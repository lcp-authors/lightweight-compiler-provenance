
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	12754 <__assert_fail@plt+0x11fc>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <pthread_mutex_unlock@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <pthread_mutex_unlock@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	sp, r2, ip, ror #28

00011198 <pthread_mutex_unlock@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #184320	; 0x2d000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <fdopen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #184320	; 0x2d000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #184320	; 0x2d000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #184320	; 0x2d000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #184320	; 0x2d000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #184320	; 0x2d000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #184320	; 0x2d000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #184320	; 0x2d000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #184320	; 0x2d000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #184320	; 0x2d000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #184320	; 0x2d000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #184320	; 0x2d000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <sigprocmask@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #184320	; 0x2d000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <memmove@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #184320	; 0x2d000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <free@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #184320	; 0x2d000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <pthread_mutex_lock@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #184320	; 0x2d000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <_exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #184320	; 0x2d000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <memcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #184320	; 0x2d000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <pthread_mutex_init@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #184320	; 0x2d000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <__strtoull_internal@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #184320	; 0x2d000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <towlower@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #184320	; 0x2d000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <mbsinit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #184320	; 0x2d000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <signal@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #184320	; 0x2d000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <fwrite_unlocked@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #184320	; 0x2d000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <memcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #184320	; 0x2d000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <fputc_unlocked@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #184320	; 0x2d000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #184320	; 0x2d000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <unlink@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #184320	; 0x2d000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <dup2@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #184320	; 0x2d000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <realloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #184320	; 0x2d000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <sigismember@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #184320	; 0x2d000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <textdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #184320	; 0x2d000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <rawmemchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #184320	; 0x2d000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <iswprint@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #184320	; 0x2d000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <sigaction@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #184320	; 0x2d000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <fwrite@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #184320	; 0x2d000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <lseek64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #184320	; 0x2d000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <__ctype_get_mb_cur_max@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #184320	; 0x2d000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <strcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #184320	; 0x2d000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__fpending@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #184320	; 0x2d000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <mbrtowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #184320	; 0x2d000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <error@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #184320	; 0x2d000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <open64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #184320	; 0x2d000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <malloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #184320	; 0x2d000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <sigaddset@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #184320	; 0x2d000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__libc_start_main@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #184320	; 0x2d000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <__freading@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #184320	; 0x2d000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <__ctype_tolower_loc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #184320	; 0x2d000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <__ctype_toupper_loc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #184320	; 0x2d000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <__gmon_start__@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #184320	; 0x2d000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <getopt_long@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #184320	; 0x2d000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <__ctype_b_loc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #184320	; 0x2d000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <exit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #184320	; 0x2d000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <strlen@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #184320	; 0x2d000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strchr@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #184320	; 0x2d000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <__errno_location@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #184320	; 0x2d000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <iswalnum@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #184320	; 0x2d000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <__sprintf_chk@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #184320	; 0x2d000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <__cxa_atexit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #184320	; 0x2d000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <memset@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #184320	; 0x2d000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <btowc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #184320	; 0x2d000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <__printf_chk@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #184320	; 0x2d000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fileno@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #184320	; 0x2d000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <__fprintf_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #184320	; 0x2d000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <fclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #184320	; 0x2d000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #184320	; 0x2d000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #184320	; 0x2d000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #184320	; 0x2d000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #184320	; 0x2d000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <strrchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #184320	; 0x2d000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <nl_langinfo@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #184320	; 0x2d000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <fputc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #184320	; 0x2d000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <__strtoll_internal@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #184320	; 0x2d000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <fopen64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #184320	; 0x2d000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <bindtextdomain@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #184320	; 0x2d000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <towupper@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #184320	; 0x2d000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <strncmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #184320	; 0x2d000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <abort@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #184320	; 0x2d000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <close@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #184320	; 0x2d000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <__snprintf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #184320	; 0x2d000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <__assert_fail@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #184320	; 0x2d000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

Disassembly of section .text:

00011564 <.text>:
   11564:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11568:	mov	r4, r1
   1156c:	movw	r5, #56888	; 0xde38
   11570:	movt	r5, #2
   11574:	strd	r6, [sp, #8]
   11578:	movw	r7, #61888	; 0xf1c0
   1157c:	movt	r7, #3
   11580:	strd	r8, [sp, #16]
   11584:	strd	sl, [sp, #24]
   11588:	movw	fp, #61896	; 0xf1c8
   1158c:	movt	fp, #3
   11590:	str	lr, [sp, #32]
   11594:	sub	sp, sp, #244	; 0xf4
   11598:	ldr	r6, [pc, #4056]	; 12578 <__assert_fail@plt+0x1020>
   1159c:	str	r1, [sp, #24]
   115a0:	str	r0, [sp, #32]
   115a4:	ldr	r0, [r1]
   115a8:	bl	1402c <__assert_fail@plt+0x2ad4>
   115ac:	movw	r1, #56080	; 0xdb10
   115b0:	movt	r1, #2
   115b4:	mov	r0, #6
   115b8:	bl	114bc <setlocale@plt>
   115bc:	movw	r1, #56816	; 0xddf0
   115c0:	movt	r1, #2
   115c4:	movw	r0, #56648	; 0xdd48
   115c8:	movt	r0, #2
   115cc:	bl	11510 <bindtextdomain@plt>
   115d0:	movw	r0, #56648	; 0xdd48
   115d4:	movt	r0, #2
   115d8:	bl	1130c <textdomain@plt>
   115dc:	movw	r0, #15084	; 0x3aec
   115e0:	movt	r0, #1
   115e4:	bl	2d5e4 <__assert_fail@plt+0x1c08c>
   115e8:	mov	r3, #0
   115ec:	mov	r1, #1
   115f0:	movw	r2, #56840	; 0xde08
   115f4:	movt	r2, #2
   115f8:	strb	r1, [fp, #128]	; 0x80
   115fc:	str	r2, [fp, #140]	; 0x8c
   11600:	strb	r3, [fp, #169]	; 0xa9
   11604:	str	r4, [fp, #208]	; 0xd0
   11608:	str	r3, [fp, #212]	; 0xd4
   1160c:	str	r3, [fp, #216]	; 0xd8
   11610:	strb	r3, [fp, #220]	; 0xdc
   11614:	mov	r4, #0
   11618:	mov	r3, r6
   1161c:	ldr	r1, [sp, #24]
   11620:	mov	r2, r5
   11624:	str	r4, [sp]
   11628:	ldr	r0, [sp, #32]
   1162c:	bl	113f0 <getopt_long@plt>
   11630:	cmn	r0, #1
   11634:	beq	1177c <__assert_fail@plt+0x224>
   11638:	cmp	r0, #107	; 0x6b
   1163c:	beq	11774 <__assert_fail@plt+0x21c>
   11640:	ble	11664 <__assert_fail@plt+0x10c>
   11644:	cmp	r0, #115	; 0x73
   11648:	beq	11768 <__assert_fail@plt+0x210>
   1164c:	ble	11698 <__assert_fail@plt+0x140>
   11650:	cmp	r0, #122	; 0x7a
   11654:	bne	11684 <__assert_fail@plt+0x12c>
   11658:	mov	r3, #1
   1165c:	strb	r3, [fp, #168]	; 0xa8
   11660:	b	11614 <__assert_fail@plt+0xbc>
   11664:	cmn	r0, #2
   11668:	beq	1248c <__assert_fail@plt+0xf34>
   1166c:	ble	1170c <__assert_fail@plt+0x1b4>
   11670:	cmp	r0, #98	; 0x62
   11674:	bne	116f8 <__assert_fail@plt+0x1a0>
   11678:	ldr	r3, [r7]
   1167c:	str	r3, [fp, #144]	; 0x90
   11680:	b	11614 <__assert_fail@plt+0xbc>
   11684:	cmp	r0, #256	; 0x100
   11688:	bne	12484 <__assert_fail@plt+0xf2c>
   1168c:	mov	r3, #1
   11690:	strb	r3, [fp, #220]	; 0xdc
   11694:	b	11614 <__assert_fail@plt+0xbc>
   11698:	cmp	r0, #110	; 0x6e
   1169c:	bne	11760 <__assert_fail@plt+0x208>
   116a0:	ldr	sl, [r7]
   116a4:	mov	r2, #5
   116a8:	movw	r1, #56844	; 0xde0c
   116ac:	movt	r1, #2
   116b0:	mov	r0, r4
   116b4:	bl	112d0 <dcgettext@plt>
   116b8:	mvn	r8, #-2147483648	; 0x80000000
   116bc:	mov	r9, #0
   116c0:	movw	r1, #56080	; 0xdb10
   116c4:	movt	r1, #2
   116c8:	mov	r3, #0
   116cc:	mov	r2, #0
   116d0:	strd	r8, [sp]
   116d4:	str	r1, [sp, #8]
   116d8:	str	r0, [sp, #12]
   116dc:	mov	r0, sl
   116e0:	str	r4, [sp, #16]
   116e4:	bl	2adbc <__assert_fail@plt+0x19864>
   116e8:	movw	r3, #61788	; 0xf15c
   116ec:	movt	r3, #3
   116f0:	str	r0, [r3]
   116f4:	b	11614 <__assert_fail@plt+0xbc>
   116f8:	cmp	r0, #102	; 0x66
   116fc:	bne	12484 <__assert_fail@plt+0xf2c>
   11700:	ldr	r3, [r7]
   11704:	str	r3, [fp, #140]	; 0x8c
   11708:	b	11614 <__assert_fail@plt+0xbc>
   1170c:	cmn	r0, #3
   11710:	bne	12484 <__assert_fail@plt+0xf2c>
   11714:	movw	r1, #56860	; 0xde1c
   11718:	movt	r1, #2
   1171c:	movw	r2, #56876	; 0xde2c
   11720:	movt	r2, #2
   11724:	movw	r3, #61792	; 0xf160
   11728:	movt	r3, #3
   1172c:	movw	r0, #61884	; 0xf1bc
   11730:	movt	r0, #3
   11734:	str	r2, [sp]
   11738:	movw	r2, #56644	; 0xdd44
   1173c:	movt	r2, #2
   11740:	stmib	sp, {r1, r4}
   11744:	movw	r1, #55244	; 0xd7cc
   11748:	movt	r1, #2
   1174c:	ldr	r0, [r0]
   11750:	ldr	r3, [r3]
   11754:	bl	2a48c <__assert_fail@plt+0x18f34>
   11758:	mov	r0, r4
   1175c:	bl	11408 <exit@plt>
   11760:	cmp	r0, #113	; 0x71
   11764:	bne	12484 <__assert_fail@plt+0xf2c>
   11768:	mov	r3, #1
   1176c:	strb	r3, [fp, #169]	; 0xa9
   11770:	b	11614 <__assert_fail@plt+0xbc>
   11774:	strb	r4, [fp, #128]	; 0x80
   11778:	b	11614 <__assert_fail@plt+0xbc>
   1177c:	movw	r5, #61872	; 0xf1b0
   11780:	movt	r5, #3
   11784:	ldr	r2, [sp, #32]
   11788:	ldr	r3, [r5]
   1178c:	sub	r2, r2, r3
   11790:	cmp	r2, #1
   11794:	ble	12454 <__assert_fail@plt+0xefc>
   11798:	ldr	r0, [fp, #140]	; 0x8c
   1179c:	bl	11414 <strlen@plt>
   117a0:	ldr	r3, [fp, #144]	; 0x90
   117a4:	mov	r6, r0
   117a8:	cmp	r3, #0
   117ac:	beq	11928 <__assert_fail@plt+0x3d0>
   117b0:	ldr	r0, [fp, #144]	; 0x90
   117b4:	ldrb	r1, [r0]
   117b8:	cmp	r1, #0
   117bc:	movne	ip, r0
   117c0:	movne	lr, #100	; 0x64
   117c4:	bne	117d8 <__assert_fail@plt+0x280>
   117c8:	b	12430 <__assert_fail@plt+0xed8>
   117cc:	cmp	r1, #0
   117d0:	mov	ip, r3
   117d4:	beq	1224c <__assert_fail@plt+0xcf4>
   117d8:	cmp	r1, #37	; 0x25
   117dc:	add	r3, ip, #1
   117e0:	ldrb	r1, [ip, #1]
   117e4:	bne	117cc <__assert_fail@plt+0x274>
   117e8:	cmp	r1, #37	; 0x25
   117ec:	moveq	r3, ip
   117f0:	ldrbeq	r1, [r3, #2]!
   117f4:	beq	117cc <__assert_fail@plt+0x274>
   117f8:	cmp	r4, #0
   117fc:	bne	126c8 <__assert_fail@plt+0x1170>
   11800:	mov	r2, r3
   11804:	mov	r3, r2
   11808:	ldrb	r1, [r2], #1
   1180c:	sub	ip, r1, #35	; 0x23
   11810:	cmp	ip, #13
   11814:	ldrls	pc, [pc, ip, lsl #2]
   11818:	b	11858 <__assert_fail@plt+0x300>
   1181c:	ldrdeq	r1, [r1], -ip
   11820:	andeq	r1, r1, r8, asr r8
   11824:	andeq	r1, r1, r8, asr r8
   11828:	andeq	r1, r1, r8, asr r8
   1182c:	ldrdeq	r1, [r1], -r4
   11830:	andeq	r1, r1, r8, asr r8
   11834:	andeq	r1, r1, r8, asr r8
   11838:	andeq	r1, r1, r8, asr r8
   1183c:	andeq	r1, r1, r8, asr r8
   11840:	andeq	r1, r1, r8, asr r8
   11844:	andeq	r1, r1, r4, lsl #16
   11848:	andeq	r1, r1, r8, asr r8
   1184c:	andeq	r1, r1, r8, asr r8
   11850:	andeq	r1, r1, r4, lsl #16
   11854:	ldrb	r1, [r3, #1]!
   11858:	sub	r2, r1, #48	; 0x30
   1185c:	cmp	r2, #9
   11860:	bls	11854 <__assert_fail@plt+0x2fc>
   11864:	cmp	r1, #46	; 0x2e
   11868:	beq	122a0 <__assert_fail@plt+0xd48>
   1186c:	ldrb	r7, [r3]
   11870:	cmp	r7, #105	; 0x69
   11874:	beq	118f4 <__assert_fail@plt+0x39c>
   11878:	bls	118e4 <__assert_fail@plt+0x38c>
   1187c:	cmp	r7, #117	; 0x75
   11880:	beq	123e4 <__assert_fail@plt+0xe8c>
   11884:	cmp	r7, #120	; 0x78
   11888:	beq	11920 <__assert_fail@plt+0x3c8>
   1188c:	cmp	r7, #111	; 0x6f
   11890:	beq	11920 <__assert_fail@plt+0x3c8>
   11894:	bl	113fc <__ctype_b_loc@plt>
   11898:	ldr	r2, [r0]
   1189c:	lsl	r3, r7, #1
   118a0:	ldrh	r3, [r2, r3]
   118a4:	ands	r4, r3, #16384	; 0x4000
   118a8:	bne	12294 <__assert_fail@plt+0xd3c>
   118ac:	movw	r1, #57124	; 0xdf24
   118b0:	movt	r1, #2
   118b4:	mov	r2, #5
   118b8:	mov	r0, #0
   118bc:	bl	112d0 <dcgettext@plt>
   118c0:	mov	r2, r0
   118c4:	mov	r3, r7
   118c8:	mov	r1, #0
   118cc:	mov	r0, #1
   118d0:	bl	11384 <error@plt>
   118d4:	orr	r4, r4, #1
   118d8:	b	11804 <__assert_fail@plt+0x2ac>
   118dc:	orr	r4, r4, #2
   118e0:	b	11804 <__assert_fail@plt+0x2ac>
   118e4:	cmp	r7, #88	; 0x58
   118e8:	beq	11920 <__assert_fail@plt+0x3c8>
   118ec:	cmp	r7, #100	; 0x64
   118f0:	bne	1190c <__assert_fail@plt+0x3b4>
   118f4:	mov	r2, #1
   118f8:	bics	r4, r4, r2
   118fc:	bne	12674 <__assert_fail@plt+0x111c>
   11900:	mov	r4, #1
   11904:	ldrb	r1, [r3, #1]!
   11908:	b	117cc <__assert_fail@plt+0x274>
   1190c:	cmp	r7, #0
   11910:	bne	11894 <__assert_fail@plt+0x33c>
   11914:	movw	r1, #57040	; 0xded0
   11918:	movt	r1, #2
   1191c:	b	12438 <__assert_fail@plt+0xee0>
   11920:	mov	r2, #2
   11924:	b	118f8 <__assert_fail@plt+0x3a0>
   11928:	movw	r3, #61788	; 0xf15c
   1192c:	movt	r3, #3
   11930:	ldr	r2, [r3]
   11934:	cmp	r2, #10
   11938:	ldrhi	r0, [r3]
   1193c:	movls	r0, #11
   11940:	add	r0, r0, #1
   11944:	adds	r0, r6, r0
   11948:	movvs	r4, #1
   1194c:	movvc	r4, #0
   11950:	cmp	r4, #0
   11954:	str	r4, [sp, #52]	; 0x34
   11958:	bne	12274 <__assert_fail@plt+0xd1c>
   1195c:	bl	2a6c0 <__assert_fail@plt+0x19168>
   11960:	ldr	r3, [r5]
   11964:	movw	r1, #57224	; 0xdf88
   11968:	movt	r1, #2
   1196c:	str	r0, [fp, #136]	; 0x88
   11970:	ldr	r2, [sp, #24]
   11974:	ldr	r6, [r2, r3, lsl #2]
   11978:	add	r3, r3, #1
   1197c:	str	r3, [r5]
   11980:	mov	r0, r6
   11984:	bl	111f8 <strcmp@plt>
   11988:	cmp	r0, #0
   1198c:	bne	122b4 <__assert_fail@plt+0xd5c>
   11990:	ldr	sl, [r5]
   11994:	ldr	r3, [sp, #32]
   11998:	cmp	sl, r3
   1199c:	bge	11c14 <__assert_fail@plt+0x6bc>
   119a0:	ldr	r3, [sp, #24]
   119a4:	ldr	r5, [r3, sl, lsl #2]
   119a8:	movw	r3, #56080	; 0xdb10
   119ac:	movt	r3, #2
   119b0:	str	r3, [sp, #44]	; 0x2c
   119b4:	movw	r3, #57492	; 0xe094
   119b8:	movt	r3, #2
   119bc:	str	r3, [sp, #48]	; 0x30
   119c0:	ldrb	r4, [r5]
   119c4:	sub	r8, r4, #37	; 0x25
   119c8:	cmp	r4, #37	; 0x25
   119cc:	cmpne	r4, #47	; 0x2f
   119d0:	clz	r8, r8
   119d4:	lsr	r8, r8, #5
   119d8:	bne	11b58 <__assert_fail@plt+0x600>
   119dc:	add	r3, r5, #1
   119e0:	mov	r1, r4
   119e4:	mov	r0, r3
   119e8:	str	r3, [sp, #40]	; 0x28
   119ec:	bl	114d4 <strrchr@plt>
   119f0:	subs	r9, r0, #0
   119f4:	beq	12584 <__assert_fail@plt+0x102c>
   119f8:	sub	r7, r9, r5
   119fc:	ldr	lr, [fp, #212]	; 0xd4
   11a00:	sub	r7, r7, #1
   11a04:	ldr	r3, [fp, #216]	; 0xd8
   11a08:	ldr	r1, [fp, #224]	; 0xe0
   11a0c:	cmp	r3, r1
   11a10:	beq	11d24 <__assert_fail@plt+0x7cc>
   11a14:	lsl	r1, r3, #6
   11a18:	add	r3, r3, #1
   11a1c:	mov	r2, #0
   11a20:	mov	r6, #0
   11a24:	mov	r0, #256	; 0x100
   11a28:	add	r4, lr, r1
   11a2c:	str	r3, [fp, #216]	; 0xd8
   11a30:	mov	r3, #0
   11a34:	strd	r2, [r4, #8]
   11a38:	strd	r2, [r4, #16]
   11a3c:	strb	r6, [r4, #28]
   11a40:	strd	r2, [lr, r1]
   11a44:	mov	r3, #1
   11a48:	str	sl, [r4, #24]
   11a4c:	strb	r8, [r4, #29]
   11a50:	strb	r3, [r4, #30]
   11a54:	str	r6, [r4, #32]
   11a58:	str	r6, [r4, #36]	; 0x24
   11a5c:	bl	2a69c <__assert_fail@plt+0x19144>
   11a60:	movw	ip, #710	; 0x2c6
   11a64:	movw	r3, #62452	; 0xf3f4
   11a68:	movt	r3, #3
   11a6c:	mov	r1, r7
   11a70:	str	r0, [r4, #48]	; 0x30
   11a74:	add	r2, r4, #32
   11a78:	str	r6, [r4, #52]	; 0x34
   11a7c:	ldr	r0, [sp, #40]	; 0x28
   11a80:	str	ip, [r3]
   11a84:	bl	29060 <__assert_fail@plt+0x17b08>
   11a88:	subs	r7, r0, #0
   11a8c:	bne	1253c <__assert_fail@plt+0xfe4>
   11a90:	ldrb	r3, [r9, #1]
   11a94:	cmp	r3, #0
   11a98:	bne	11ccc <__assert_fail@plt+0x774>
   11a9c:	ldr	r2, [sp, #32]
   11aa0:	add	r3, sl, #1
   11aa4:	cmp	r2, r3
   11aa8:	ble	11c14 <__assert_fail@plt+0x6bc>
   11aac:	ldr	r2, [sp, #24]
   11ab0:	lsl	r6, r3, #2
   11ab4:	ldr	r5, [r2, r3, lsl #2]
   11ab8:	ldrb	r2, [r5]
   11abc:	cmp	r2, #123	; 0x7b
   11ac0:	movne	sl, r3
   11ac4:	bne	119c0 <__assert_fail@plt+0x468>
   11ac8:	mov	r0, r5
   11acc:	bl	11414 <strlen@plt>
   11ad0:	sub	r3, r0, #1
   11ad4:	ldrb	r2, [r5, r3]
   11ad8:	add	r7, r5, r3
   11adc:	cmp	r2, #125	; 0x7d
   11ae0:	bne	126a8 <__assert_fail@plt+0x1150>
   11ae4:	mov	r2, #0
   11ae8:	add	r0, r5, #1
   11aec:	sub	r1, r7, #1
   11af0:	cmp	r0, r1
   11af4:	strb	r2, [r5, r3]
   11af8:	beq	11dbc <__assert_fail@plt+0x864>
   11afc:	ldr	r2, [sp, #44]	; 0x2c
   11b00:	add	r3, sp, #96	; 0x60
   11b04:	mov	r1, #0
   11b08:	str	r2, [sp]
   11b0c:	mov	r2, #10
   11b10:	bl	2bf88 <__assert_fail@plt+0x1aa30>
   11b14:	cmp	r0, #0
   11b18:	bne	125ac <__assert_fail@plt+0x1054>
   11b1c:	ldrd	r2, [sp, #96]	; 0x60
   11b20:	cmp	r2, #0
   11b24:	sbcs	r1, r3, #0
   11b28:	blt	125ac <__assert_fail@plt+0x1054>
   11b2c:	strd	r2, [r4, #16]
   11b30:	ldr	r2, [sp, #32]
   11b34:	add	sl, sl, #2
   11b38:	mov	r3, #125	; 0x7d
   11b3c:	strb	r3, [r7]
   11b40:	cmp	r2, sl
   11b44:	ble	11c14 <__assert_fail@plt+0x6bc>
   11b48:	ldr	r3, [sp, #24]
   11b4c:	add	r3, r3, r6
   11b50:	ldr	r5, [r3, #4]
   11b54:	b	119c0 <__assert_fail@plt+0x468>
   11b58:	ldr	r1, [sp, #24]
   11b5c:	lsl	r6, sl, #2
   11b60:	ldr	r3, [fp, #216]	; 0xd8
   11b64:	ldr	r2, [fp, #224]	; 0xe0
   11b68:	add	r7, r1, r6
   11b6c:	ldr	ip, [fp, #212]	; 0xd4
   11b70:	cmp	r3, r2
   11b74:	beq	11d50 <__assert_fail@plt+0x7f8>
   11b78:	lsl	lr, r3, #6
   11b7c:	mov	r2, #0
   11b80:	mov	r8, #0
   11b84:	mov	r9, #0
   11b88:	add	r3, r3, #1
   11b8c:	add	r4, ip, lr
   11b90:	mov	r0, r5
   11b94:	mov	r1, r2
   11b98:	str	r3, [fp, #216]	; 0xd8
   11b9c:	add	r3, sp, #88	; 0x58
   11ba0:	strd	r8, [r4, #8]
   11ba4:	strd	r8, [r4, #16]
   11ba8:	strb	r2, [r4, #28]
   11bac:	strb	r2, [r4, #30]
   11bb0:	mov	r2, #10
   11bb4:	strd	r8, [ip, lr]
   11bb8:	ldr	ip, [sp, #44]	; 0x2c
   11bbc:	str	sl, [r4, #24]
   11bc0:	str	ip, [sp]
   11bc4:	bl	2bf88 <__assert_fail@plt+0x1aa30>
   11bc8:	subs	r5, r0, #0
   11bcc:	bne	124a0 <__assert_fail@plt+0xf48>
   11bd0:	ldrd	r8, [sp, #88]	; 0x58
   11bd4:	cmp	r8, #0
   11bd8:	sbcs	r3, r9, #0
   11bdc:	blt	124a0 <__assert_fail@plt+0xf48>
   11be0:	orrs	r3, r8, r9
   11be4:	beq	124d4 <__assert_fail@plt+0xf7c>
   11be8:	ldrd	r2, [fp, #232]	; 0xe8
   11bec:	cmp	r9, r3
   11bf0:	cmpeq	r8, r2
   11bf4:	bcc	124f8 <__assert_fail@plt+0xfa0>
   11bf8:	beq	11d84 <__assert_fail@plt+0x82c>
   11bfc:	ldr	r2, [sp, #32]
   11c00:	add	r3, sl, #1
   11c04:	strd	r8, [r4, #8]
   11c08:	strd	r8, [fp, #232]	; 0xe8
   11c0c:	cmp	r2, r3
   11c10:	bgt	11aac <__assert_fail@plt+0x554>
   11c14:	ldr	r4, [pc, #2400]	; 1257c <__assert_fail@plt+0x1024>
   11c18:	movw	r0, #61896	; 0xf1c8
   11c1c:	movt	r0, #3
   11c20:	mov	r5, r0
   11c24:	bl	114c8 <sigemptyset@plt>
   11c28:	add	r7, r4, #44	; 0x2c
   11c2c:	mov	r6, r4
   11c30:	ldr	r8, [r6], #4
   11c34:	add	r2, sp, #96	; 0x60
   11c38:	mov	r1, #0
   11c3c:	mov	r0, r8
   11c40:	bl	11330 <sigaction@plt>
   11c44:	ldr	r3, [sp, #96]	; 0x60
   11c48:	cmp	r3, #1
   11c4c:	beq	11c5c <__assert_fail@plt+0x704>
   11c50:	mov	r1, r8
   11c54:	mov	r0, r5
   11c58:	bl	113a8 <sigaddset@plt>
   11c5c:	cmp	r7, r6
   11c60:	bne	11c30 <__assert_fail@plt+0x6d8>
   11c64:	movw	r3, #11692	; 0x2dac
   11c68:	movt	r3, #1
   11c6c:	movw	r1, #61896	; 0xf1c8
   11c70:	movt	r1, #3
   11c74:	mov	r2, #128	; 0x80
   11c78:	add	r0, sp, #100	; 0x64
   11c7c:	str	r3, [sp, #96]	; 0x60
   11c80:	bl	11264 <memcpy@plt>
   11c84:	mov	r3, #0
   11c88:	movw	r5, #61896	; 0xf1c8
   11c8c:	movt	r5, #3
   11c90:	str	r3, [sp, #228]	; 0xe4
   11c94:	b	11ca0 <__assert_fail@plt+0x748>
   11c98:	cmp	r7, r4
   11c9c:	beq	11dd4 <__assert_fail@plt+0x87c>
   11ca0:	ldr	r6, [r4], #4
   11ca4:	mov	r0, r5
   11ca8:	mov	r1, r6
   11cac:	bl	11300 <sigismember@plt>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11c98 <__assert_fail@plt+0x740>
   11cb8:	mov	r0, r6
   11cbc:	mov	r2, #0
   11cc0:	add	r1, sp, #96	; 0x60
   11cc4:	bl	11330 <sigaction@plt>
   11cc8:	b	11c98 <__assert_fail@plt+0x740>
   11ccc:	ldr	r2, [sp, #44]	; 0x2c
   11cd0:	add	r0, r9, #1
   11cd4:	mov	r3, r4
   11cd8:	mov	r1, r7
   11cdc:	str	r2, [sp]
   11ce0:	mov	r2, #10
   11ce4:	bl	2af24 <__assert_fail@plt+0x199cc>
   11ce8:	cmp	r0, #0
   11cec:	beq	11a9c <__assert_fail@plt+0x544>
   11cf0:	mov	r2, #5
   11cf4:	movw	r1, #57328	; 0xdff0
   11cf8:	movt	r1, #2
   11cfc:	mov	r0, r7
   11d00:	bl	112d0 <dcgettext@plt>
   11d04:	mov	r4, r0
   11d08:	mov	r0, r5
   11d0c:	bl	1799c <__assert_fail@plt+0x6444>
   11d10:	mov	r3, r0
   11d14:	mov	r2, r4
   11d18:	mov	r1, r7
   11d1c:	mov	r0, #1
   11d20:	bl	11384 <error@plt>
   11d24:	mov	ip, #64	; 0x40
   11d28:	mov	r0, lr
   11d2c:	ldr	r1, [pc, #2124]	; 12580 <__assert_fail@plt+0x1028>
   11d30:	mvn	r3, #0
   11d34:	mov	r2, #1
   11d38:	str	ip, [sp]
   11d3c:	bl	2a988 <__assert_fail@plt+0x19430>
   11d40:	mov	lr, r0
   11d44:	str	r0, [fp, #212]	; 0xd4
   11d48:	ldr	r3, [fp, #216]	; 0xd8
   11d4c:	b	11a14 <__assert_fail@plt+0x4bc>
   11d50:	mov	lr, #64	; 0x40
   11d54:	mov	r0, ip
   11d58:	ldr	r1, [pc, #2080]	; 12580 <__assert_fail@plt+0x1028>
   11d5c:	mvn	r3, #0
   11d60:	mov	r2, #1
   11d64:	str	lr, [sp]
   11d68:	bl	2a988 <__assert_fail@plt+0x19430>
   11d6c:	ldr	r3, [sp, #24]
   11d70:	mov	ip, r0
   11d74:	str	r0, [fp, #212]	; 0xd4
   11d78:	ldr	r5, [r3, sl, lsl #2]
   11d7c:	ldr	r3, [fp, #216]	; 0xd8
   11d80:	b	11b78 <__assert_fail@plt+0x620>
   11d84:	mov	r2, #5
   11d88:	ldr	r1, [sp, #48]	; 0x30
   11d8c:	bl	112d0 <dcgettext@plt>
   11d90:	ldr	r3, [sp, #24]
   11d94:	mov	r7, r0
   11d98:	ldr	r0, [r3, r6]
   11d9c:	bl	1799c <__assert_fail@plt+0x6444>
   11da0:	mov	r3, r0
   11da4:	mov	r2, r7
   11da8:	mov	r1, r5
   11dac:	mov	r0, r5
   11db0:	bl	11384 <error@plt>
   11db4:	ldrd	r8, [sp, #88]	; 0x58
   11db8:	b	11bfc <__assert_fail@plt+0x6a4>
   11dbc:	ldrb	r3, [r5, #1]
   11dc0:	cmp	r3, #42	; 0x2a
   11dc4:	moveq	r3, #1
   11dc8:	strbeq	r3, [r4, #28]
   11dcc:	bne	11afc <__assert_fail@plt+0x5a4>
   11dd0:	b	11b30 <__assert_fail@plt+0x5d8>
   11dd4:	mov	r5, #0
   11dd8:	ldr	r2, [sp, #52]	; 0x34
   11ddc:	ldr	r3, [fp, #216]	; 0xd8
   11de0:	cmp	r2, r3
   11de4:	bge	123f0 <__assert_fail@plt+0xe98>
   11de8:	ldr	r2, [sp, #52]	; 0x34
   11dec:	ldr	r3, [fp, #212]	; 0xd4
   11df0:	lsl	r2, r2, #6
   11df4:	add	r3, r3, r2
   11df8:	ldrb	r3, [r3, #30]
   11dfc:	str	r2, [sp, #44]	; 0x2c
   11e00:	mov	r2, #0
   11e04:	cmp	r3, #0
   11e08:	mov	r3, #0
   11e0c:	bne	11fa0 <__assert_fail@plt+0xa48>
   11e10:	ldrd	r6, [sp, #72]	; 0x48
   11e14:	strd	r2, [sp, #24]
   11e18:	ldrd	r8, [sp, #80]	; 0x50
   11e1c:	ldr	r3, [sp, #44]	; 0x2c
   11e20:	ldr	r4, [fp, #212]	; 0xd4
   11e24:	add	r4, r4, r3
   11e28:	ldrb	r3, [r4, #28]
   11e2c:	cmp	r3, #0
   11e30:	bne	11e48 <__assert_fail@plt+0x8f0>
   11e34:	ldrd	r2, [r4, #16]
   11e38:	ldrd	r0, [sp, #24]
   11e3c:	cmp	r2, r0
   11e40:	sbcs	r3, r3, r1
   11e44:	blt	12310 <__assert_fail@plt+0xdb8>
   11e48:	ldrd	r2, [sp, #24]
   11e4c:	ldr	r1, [r4, #8]
   11e50:	ldr	r0, [r4, #12]
   11e54:	adds	sl, r2, #1
   11e58:	adc	ip, r3, #0
   11e5c:	umull	r2, r3, r1, sl
   11e60:	str	ip, [sp, #40]	; 0x28
   11e64:	mul	r0, sl, r0
   11e68:	mla	r1, r1, ip, r0
   11e6c:	add	r3, r1, r3
   11e70:	strd	r2, [sp, #32]
   11e74:	bl	12c64 <__assert_fail@plt+0x170c>
   11e78:	ldrd	r0, [fp, #200]	; 0xc8
   11e7c:	adds	r0, r0, #1
   11e80:	adc	r1, r1, #0
   11e84:	bl	1333c <__assert_fail@plt+0x1de4>
   11e88:	cmp	r0, #0
   11e8c:	ldrd	r2, [sp, #32]
   11e90:	beq	11f24 <__assert_fail@plt+0x9cc>
   11e94:	ldr	r1, [fp, #192]	; 0xc0
   11e98:	cmp	r1, #0
   11e9c:	beq	11f3c <__assert_fail@plt+0x9e4>
   11ea0:	ldr	r1, [fp, #192]	; 0xc0
   11ea4:	ldrd	r0, [r1, #16]
   11ea8:	adds	r6, r0, #1
   11eac:	adc	r7, r1, #0
   11eb0:	cmp	r0, r2
   11eb4:	sbcs	r1, r1, r3
   11eb8:	bge	11eec <__assert_fail@plt+0x994>
   11ebc:	adds	r8, r2, #1
   11ec0:	adc	r9, r3, #0
   11ec4:	bl	13458 <__assert_fail@plt+0x1f00>
   11ec8:	subs	r1, r0, #0
   11ecc:	beq	11f30 <__assert_fail@plt+0x9d8>
   11ed0:	add	r1, r1, #4
   11ed4:	bl	12bb4 <__assert_fail@plt+0x165c>
   11ed8:	adds	r6, r6, #1
   11edc:	adc	r7, r7, #0
   11ee0:	cmp	r7, r9
   11ee4:	cmpeq	r6, r8
   11ee8:	bne	11ec4 <__assert_fail@plt+0x96c>
   11eec:	bl	12938 <__assert_fail@plt+0x13e0>
   11ef0:	ldrb	r3, [fp, #220]	; 0xdc
   11ef4:	cmp	r3, #0
   11ef8:	bne	11f88 <__assert_fail@plt+0xa30>
   11efc:	ldrd	r0, [fp, #200]	; 0xc8
   11f00:	adds	r0, r0, #1
   11f04:	adc	r1, r1, #0
   11f08:	bl	1333c <__assert_fail@plt+0x1de4>
   11f0c:	cmp	r0, #0
   11f10:	beq	11f90 <__assert_fail@plt+0xa38>
   11f14:	ldr	r3, [sp, #40]	; 0x28
   11f18:	str	sl, [sp, #24]
   11f1c:	str	r3, [sp, #28]
   11f20:	b	11e1c <__assert_fail@plt+0x8c4>
   11f24:	ldrb	r1, [fp, #220]	; 0xdc
   11f28:	cmp	r1, #0
   11f2c:	beq	11e94 <__assert_fail@plt+0x93c>
   11f30:	add	r0, r4, #8
   11f34:	ldrd	r2, [sp, #24]
   11f38:	bl	12ae8 <__assert_fail@plt+0x1590>
   11f3c:	ldrb	r1, [fp, #188]	; 0xbc
   11f40:	cmp	r1, #0
   11f44:	bne	11f5c <__assert_fail@plt+0xa04>
   11f48:	strd	r2, [sp, #32]
   11f4c:	bl	12eec <__assert_fail@plt+0x1994>
   11f50:	cmp	r0, #0
   11f54:	ldrd	r2, [sp, #32]
   11f58:	bne	11ea0 <__assert_fail@plt+0x948>
   11f5c:	bl	1142c <__errno_location@plt>
   11f60:	ldr	r4, [r0]
   11f64:	mov	r2, #5
   11f68:	movw	r1, #57672	; 0xe148
   11f6c:	movt	r1, #2
   11f70:	mov	r0, #0
   11f74:	bl	112d0 <dcgettext@plt>
   11f78:	mov	r2, r0
   11f7c:	mov	r0, #1
   11f80:	mov	r1, r4
   11f84:	bl	11384 <error@plt>
   11f88:	bl	13458 <__assert_fail@plt+0x1f00>
   11f8c:	b	11efc <__assert_fail@plt+0x9a4>
   11f90:	ldrb	r3, [fp, #220]	; 0xdc
   11f94:	cmp	r3, #0
   11f98:	bne	11f14 <__assert_fail@plt+0x9bc>
   11f9c:	b	11f30 <__assert_fail@plt+0x9d8>
   11fa0:	ldr	r7, [sp, #44]	; 0x2c
   11fa4:	strd	r2, [sp, #32]
   11fa8:	ldr	r9, [fp, #212]	; 0xd4
   11fac:	add	sl, r9, r7
   11fb0:	ldrb	r3, [sl, #28]
   11fb4:	cmp	r3, #0
   11fb8:	bne	11fd0 <__assert_fail@plt+0xa78>
   11fbc:	ldrd	r2, [sl, #16]
   11fc0:	ldrd	r0, [sp, #32]
   11fc4:	cmp	r2, r0
   11fc8:	sbcs	r3, r3, r1
   11fcc:	blt	12318 <__assert_fail@plt+0xdc0>
   11fd0:	ldrb	r3, [sl, #29]
   11fd4:	subs	r8, r3, #0
   11fd8:	beq	12328 <__assert_fail@plt+0xdd0>
   11fdc:	ldrd	r2, [r9, r7]
   11fe0:	cmp	r2, #0
   11fe4:	sbcs	r3, r3, #0
   11fe8:	addge	r4, sl, #32
   11fec:	bge	120dc <__assert_fail@plt+0xb84>
   11ff0:	add	r4, sl, #32
   11ff4:	b	12034 <__assert_fail@plt+0xadc>
   11ff8:	ldr	r3, [r0]
   11ffc:	ldr	r1, [r0, #4]
   12000:	mov	r0, r4
   12004:	add	r2, r1, r3
   12008:	ldrb	r2, [r2, #-1]
   1200c:	cmp	r2, #10
   12010:	subeq	r3, r3, #1
   12014:	mov	r2, r3
   12018:	stm	sp, {r3, r5}
   1201c:	mov	r3, #0
   12020:	bl	29c58 <__assert_fail@plt+0x18700>
   12024:	cmn	r0, #2
   12028:	beq	1260c <__assert_fail@plt+0x10b4>
   1202c:	cmn	r0, #1
   12030:	bne	12124 <__assert_fail@plt+0xbcc>
   12034:	ldr	r0, [fp, #200]	; 0xc8
   12038:	ldr	r2, [fp, #204]	; 0xcc
   1203c:	adds	r3, r0, #1
   12040:	mov	r0, r3
   12044:	adc	r2, r2, #0
   12048:	str	r3, [fp, #200]	; 0xc8
   1204c:	mov	r1, r2
   12050:	str	r2, [fp, #204]	; 0xcc
   12054:	bl	1333c <__assert_fail@plt+0x1de4>
   12058:	cmp	r0, #0
   1205c:	bne	11ff8 <__assert_fail@plt+0xaa0>
   12060:	ldrb	r3, [sl, #28]
   12064:	mov	r6, sl
   12068:	mov	r9, r8
   1206c:	cmp	r3, #0
   12070:	beq	12634 <__assert_fail@plt+0x10dc>
   12074:	cmp	r8, #0
   12078:	bne	1211c <__assert_fail@plt+0xbc4>
   1207c:	b	12088 <__assert_fail@plt+0xb30>
   12080:	add	r1, r1, #4
   12084:	bl	12bb4 <__assert_fail@plt+0x165c>
   12088:	bl	13458 <__assert_fail@plt+0x1f00>
   1208c:	subs	r1, r0, #0
   12090:	bne	12080 <__assert_fail@plt+0xb28>
   12094:	bl	12938 <__assert_fail@plt+0x13e0>
   12098:	b	1211c <__assert_fail@plt+0xbc4>
   1209c:	ldr	r3, [r0]
   120a0:	ldr	r1, [r0, #4]
   120a4:	mov	r0, r4
   120a8:	add	r2, r1, r3
   120ac:	ldrb	r2, [r2, #-1]
   120b0:	cmp	r2, #10
   120b4:	subeq	r3, r3, #1
   120b8:	mov	r2, r3
   120bc:	stm	sp, {r3, r5}
   120c0:	mov	r3, #0
   120c4:	bl	29c58 <__assert_fail@plt+0x18700>
   120c8:	cmn	r0, #2
   120cc:	beq	1260c <__assert_fail@plt+0x10b4>
   120d0:	cmn	r0, #1
   120d4:	bne	12124 <__assert_fail@plt+0xbcc>
   120d8:	bl	13458 <__assert_fail@plt+0x1f00>
   120dc:	ldr	r0, [fp, #200]	; 0xc8
   120e0:	ldr	r2, [fp, #204]	; 0xcc
   120e4:	adds	r3, r0, #1
   120e8:	mov	r0, r3
   120ec:	adc	r2, r2, #0
   120f0:	str	r3, [fp, #200]	; 0xc8
   120f4:	mov	r1, r2
   120f8:	str	r2, [fp, #204]	; 0xcc
   120fc:	bl	1333c <__assert_fail@plt+0x1de4>
   12100:	cmp	r0, #0
   12104:	bne	1209c <__assert_fail@plt+0xb44>
   12108:	ldrb	r3, [sl, #28]
   1210c:	mov	r6, sl
   12110:	mov	r9, r8
   12114:	cmp	r3, #0
   12118:	beq	12634 <__assert_fail@plt+0x10dc>
   1211c:	mov	r0, #0
   12120:	bl	11408 <exit@plt>
   12124:	ldr	r3, [r9, r7]
   12128:	add	r2, r9, r7
   1212c:	ldr	r1, [fp, #200]	; 0xc8
   12130:	ldr	r0, [r2, #4]
   12134:	ldr	r2, [fp, #192]	; 0xc0
   12138:	adds	r3, r3, r1
   1213c:	ldr	r4, [sl, #24]
   12140:	str	r3, [sp, #56]	; 0x38
   12144:	ldr	r3, [fp, #204]	; 0xcc
   12148:	adc	r3, r0, r3
   1214c:	cmp	r2, #0
   12150:	str	r3, [sp, #60]	; 0x3c
   12154:	beq	12278 <__assert_fail@plt+0xd20>
   12158:	ldr	r3, [fp, #192]	; 0xc0
   1215c:	ldrd	r0, [sp, #56]	; 0x38
   12160:	ldrd	r2, [r3, #16]
   12164:	cmp	r0, r2
   12168:	sbcs	r1, r1, r3
   1216c:	blt	125d0 <__assert_fail@plt+0x1078>
   12170:	ldrd	r0, [sp, #56]	; 0x38
   12174:	subs	ip, r0, r2
   12178:	sbc	r3, r1, r3
   1217c:	str	ip, [sp, #64]	; 0x40
   12180:	str	r3, [sp, #68]	; 0x44
   12184:	ldrd	r2, [sp, #64]	; 0x40
   12188:	orrs	r3, r2, r3
   1218c:	beq	12494 <__assert_fail@plt+0xf3c>
   12190:	cmp	r8, #0
   12194:	mov	r2, #0
   12198:	mov	r8, r7
   1219c:	mov	r3, #0
   121a0:	ldrd	r6, [sp, #64]	; 0x40
   121a4:	beq	12210 <__assert_fail@plt+0xcb8>
   121a8:	strd	r2, [sp, #24]
   121ac:	bl	13458 <__assert_fail@plt+0x1f00>
   121b0:	cmp	r0, #0
   121b4:	ldrd	r2, [sp, #24]
   121b8:	beq	125d0 <__assert_fail@plt+0x1078>
   121bc:	adds	r2, r2, #1
   121c0:	adc	r3, r3, #0
   121c4:	cmp	r7, r3
   121c8:	cmpeq	r6, r2
   121cc:	bne	121a8 <__assert_fail@plt+0xc50>
   121d0:	mov	r7, r8
   121d4:	ldrd	r2, [r9, r7]
   121d8:	cmp	r2, #1
   121dc:	sbcs	r3, r3, #0
   121e0:	ldrdge	r2, [sp, #56]	; 0x38
   121e4:	strdge	r2, [fp, #200]	; 0xc8
   121e8:	ldrb	r3, [fp, #220]	; 0xdc
   121ec:	cmp	r3, #0
   121f0:	bne	12428 <__assert_fail@plt+0xed0>
   121f4:	ldr	r3, [sp, #32]
   121f8:	adds	r3, r3, #1
   121fc:	str	r3, [sp, #32]
   12200:	ldr	r3, [sp, #36]	; 0x24
   12204:	adc	r3, r3, #0
   12208:	str	r3, [sp, #36]	; 0x24
   1220c:	b	11fa8 <__assert_fail@plt+0xa50>
   12210:	strd	r2, [sp, #24]
   12214:	bl	13458 <__assert_fail@plt+0x1f00>
   12218:	subs	r1, r0, #0
   1221c:	beq	125d0 <__assert_fail@plt+0x1078>
   12220:	add	r1, r1, #4
   12224:	bl	12bb4 <__assert_fail@plt+0x165c>
   12228:	ldrd	r2, [sp, #24]
   1222c:	adds	r2, r2, #1
   12230:	adc	r3, r3, #0
   12234:	cmp	r7, r3
   12238:	cmpeq	r6, r2
   1223c:	bne	12210 <__assert_fail@plt+0xcb8>
   12240:	mov	r7, r8
   12244:	bl	12938 <__assert_fail@plt+0x13e0>
   12248:	b	121d4 <__assert_fail@plt+0xc7c>
   1224c:	cmp	r4, #0
   12250:	beq	12430 <__assert_fail@plt+0xed8>
   12254:	mvn	ip, #-2147483648	; 0x80000000
   12258:	mvn	r3, #0
   1225c:	mov	r2, #1
   12260:	stm	sp, {r0, ip}
   12264:	mov	r0, r1
   12268:	bl	1154c <__snprintf_chk@plt>
   1226c:	cmp	r0, #0
   12270:	bge	11940 <__assert_fail@plt+0x3e8>
   12274:	bl	12eb4 <__assert_fail@plt+0x195c>
   12278:	ldrb	r3, [fp, #188]	; 0xbc
   1227c:	cmp	r3, #0
   12280:	bne	11f5c <__assert_fail@plt+0xa04>
   12284:	bl	12eec <__assert_fail@plt+0x1994>
   12288:	cmp	r0, #0
   1228c:	bne	12158 <__assert_fail@plt+0xc00>
   12290:	b	11f5c <__assert_fail@plt+0xa04>
   12294:	movw	r1, #57080	; 0xdef8
   12298:	movt	r1, #2
   1229c:	b	118b4 <__assert_fail@plt+0x35c>
   122a0:	ldrb	r2, [r3, #1]!
   122a4:	sub	r2, r2, #48	; 0x30
   122a8:	cmp	r2, #9
   122ac:	bhi	1186c <__assert_fail@plt+0x314>
   122b0:	b	122a0 <__assert_fail@plt+0xd48>
   122b4:	mov	r3, r4
   122b8:	mov	r2, r4
   122bc:	mov	r1, r6
   122c0:	mov	r0, r4
   122c4:	bl	13c8c <__assert_fail@plt+0x2734>
   122c8:	cmp	r0, #0
   122cc:	bge	11990 <__assert_fail@plt+0x438>
   122d0:	bl	1142c <__errno_location@plt>
   122d4:	ldr	r5, [r0]
   122d8:	mov	r2, #5
   122dc:	mov	r0, r4
   122e0:	movw	r1, #57228	; 0xdf8c
   122e4:	movt	r1, #2
   122e8:	bl	112d0 <dcgettext@plt>
   122ec:	mov	r4, r0
   122f0:	mov	r1, r6
   122f4:	mov	r0, #4
   122f8:	bl	16670 <__assert_fail@plt+0x5118>
   122fc:	mov	r3, r0
   12300:	mov	r2, r4
   12304:	mov	r1, r5
   12308:	mov	r0, #1
   1230c:	bl	11384 <error@plt>
   12310:	strd	r6, [sp, #72]	; 0x48
   12314:	strd	r8, [sp, #80]	; 0x50
   12318:	ldr	r3, [sp, #52]	; 0x34
   1231c:	add	r3, r3, #1
   12320:	str	r3, [sp, #52]	; 0x34
   12324:	b	11dd8 <__assert_fail@plt+0x880>
   12328:	bl	12c64 <__assert_fail@plt+0x170c>
   1232c:	ldrd	r2, [r9, r7]
   12330:	cmp	r2, #0
   12334:	sbcs	r3, r3, #0
   12338:	blt	11ff0 <__assert_fail@plt+0xa98>
   1233c:	add	r4, sl, #32
   12340:	b	1238c <__assert_fail@plt+0xe34>
   12344:	ldr	r3, [r0]
   12348:	ldr	r1, [r0, #4]
   1234c:	mov	r0, r4
   12350:	add	r2, r1, r3
   12354:	ldrb	r2, [r2, #-1]
   12358:	cmp	r2, #10
   1235c:	subeq	r3, r3, #1
   12360:	mov	r2, r3
   12364:	stm	sp, {r3, r5}
   12368:	mov	r3, #0
   1236c:	bl	29c58 <__assert_fail@plt+0x18700>
   12370:	cmn	r0, #2
   12374:	beq	1260c <__assert_fail@plt+0x10b4>
   12378:	cmn	r0, #1
   1237c:	bne	12124 <__assert_fail@plt+0xbcc>
   12380:	bl	13458 <__assert_fail@plt+0x1f00>
   12384:	add	r1, r0, #4
   12388:	bl	12bb4 <__assert_fail@plt+0x165c>
   1238c:	ldr	r3, [fp, #200]	; 0xc8
   12390:	ldr	r2, [fp, #204]	; 0xcc
   12394:	adds	r3, r3, #1
   12398:	mov	r0, r3
   1239c:	adc	r2, r2, #0
   123a0:	str	r3, [fp, #200]	; 0xc8
   123a4:	mov	r1, r2
   123a8:	str	r2, [fp, #204]	; 0xcc
   123ac:	bl	1333c <__assert_fail@plt+0x1de4>
   123b0:	cmp	r0, #0
   123b4:	bne	12344 <__assert_fail@plt+0xdec>
   123b8:	ldrb	r9, [sl, #28]
   123bc:	mov	r6, sl
   123c0:	cmp	r9, #0
   123c4:	bne	123d4 <__assert_fail@plt+0xe7c>
   123c8:	b	12634 <__assert_fail@plt+0x10dc>
   123cc:	add	r1, r1, #4
   123d0:	bl	12bb4 <__assert_fail@plt+0x165c>
   123d4:	bl	13458 <__assert_fail@plt+0x1f00>
   123d8:	subs	r1, r0, #0
   123dc:	bne	123cc <__assert_fail@plt+0xe74>
   123e0:	b	12094 <__assert_fail@plt+0xb3c>
   123e4:	mov	r2, #1
   123e8:	strb	lr, [r3]
   123ec:	b	118f8 <__assert_fail@plt+0x3a0>
   123f0:	bl	12c64 <__assert_fail@plt+0x170c>
   123f4:	bl	13568 <__assert_fail@plt+0x2010>
   123f8:	bl	12938 <__assert_fail@plt+0x13e0>
   123fc:	mov	r0, #0
   12400:	bl	11540 <close@plt>
   12404:	cmp	r0, #0
   12408:	bne	12644 <__assert_fail@plt+0x10ec>
   1240c:	add	sp, sp, #244	; 0xf4
   12410:	ldrd	r4, [sp]
   12414:	ldrd	r6, [sp, #8]
   12418:	ldrd	r8, [sp, #16]
   1241c:	ldrd	sl, [sp, #24]
   12420:	add	sp, sp, #32
   12424:	pop	{pc}		; (ldr pc, [sp], #4)
   12428:	bl	13458 <__assert_fail@plt+0x1f00>
   1242c:	b	121f4 <__assert_fail@plt+0xc9c>
   12430:	movw	r1, #56944	; 0xde70
   12434:	movt	r1, #2
   12438:	mov	r2, #5
   1243c:	mov	r0, #0
   12440:	bl	112d0 <dcgettext@plt>
   12444:	mov	r2, r0
   12448:	mov	r1, #0
   1244c:	mov	r0, #1
   12450:	bl	11384 <error@plt>
   12454:	ldr	r2, [sp, #32]
   12458:	cmp	r3, r2
   1245c:	blt	126d4 <__assert_fail@plt+0x117c>
   12460:	mov	r2, #5
   12464:	movw	r1, #56900	; 0xde44
   12468:	movt	r1, #2
   1246c:	mov	r0, r4
   12470:	bl	112d0 <dcgettext@plt>
   12474:	mov	r2, r0
   12478:	mov	r1, r4
   1247c:	mov	r0, r4
   12480:	bl	11384 <error@plt>
   12484:	mov	r0, #1
   12488:	bl	1370c <__assert_fail@plt+0x21b4>
   1248c:	mov	r0, r4
   12490:	bl	1370c <__assert_fail@plt+0x21b4>
   12494:	cmp	r8, #0
   12498:	bne	121d4 <__assert_fail@plt+0xc7c>
   1249c:	b	12244 <__assert_fail@plt+0xcec>
   124a0:	movw	r1, #57368	; 0xe018
   124a4:	movt	r1, #2
   124a8:	mov	r2, #5
   124ac:	mov	r0, #0
   124b0:	bl	112d0 <dcgettext@plt>
   124b4:	mov	r4, r0
   124b8:	ldr	r0, [r7]
   124bc:	bl	1799c <__assert_fail@plt+0x6444>
   124c0:	mov	r3, r0
   124c4:	mov	r2, r4
   124c8:	mov	r1, #0
   124cc:	mov	r0, #1
   124d0:	bl	11384 <error@plt>
   124d4:	mov	r2, #5
   124d8:	movw	r1, #57388	; 0xe02c
   124dc:	movt	r1, #2
   124e0:	bl	112d0 <dcgettext@plt>
   124e4:	mov	r2, r0
   124e8:	mov	r1, r5
   124ec:	ldr	r3, [r7]
   124f0:	mov	r0, #1
   124f4:	bl	11384 <error@plt>
   124f8:	mov	r2, #5
   124fc:	movw	r1, #57432	; 0xe058
   12500:	movt	r1, #2
   12504:	bl	112d0 <dcgettext@plt>
   12508:	mov	r4, r0
   1250c:	ldr	r0, [r7]
   12510:	bl	1799c <__assert_fail@plt+0x6444>
   12514:	mov	r6, r0
   12518:	add	r2, sp, #96	; 0x60
   1251c:	ldrd	r0, [fp, #232]	; 0xe8
   12520:	bl	13f4c <__assert_fail@plt+0x29f4>
   12524:	mov	r3, r6
   12528:	mov	r2, r4
   1252c:	str	r0, [sp]
   12530:	mov	r1, r5
   12534:	mov	r0, #1
   12538:	bl	11384 <error@plt>
   1253c:	mov	r2, #5
   12540:	movw	r1, #57292	; 0xdfcc
   12544:	movt	r1, #2
   12548:	mov	r0, r6
   1254c:	bl	112d0 <dcgettext@plt>
   12550:	mov	r4, r0
   12554:	mov	r0, r5
   12558:	bl	1799c <__assert_fail@plt+0x6444>
   1255c:	mov	r3, r0
   12560:	mov	r2, r4
   12564:	str	r7, [sp]
   12568:	mov	r1, r6
   1256c:	mov	r0, r6
   12570:	bl	11384 <error@plt>
   12574:	bl	12808 <__assert_fail@plt+0x12b0>
   12578:	andeq	sp, r2, ip, asr #12
   1257c:	strdeq	sp, [r2], -ip
   12580:	andeq	pc, r3, r8, lsr #5
   12584:	mov	r2, #5
   12588:	movw	r1, #57256	; 0xdfa8
   1258c:	movt	r1, #2
   12590:	bl	112d0 <dcgettext@plt>
   12594:	mov	r2, r0
   12598:	mov	r3, r5
   1259c:	str	r4, [sp]
   125a0:	mov	r1, r9
   125a4:	mov	r0, #1
   125a8:	bl	11384 <error@plt>
   125ac:	movw	r1, #57592	; 0xe0f8
   125b0:	movt	r1, #2
   125b4:	mov	r2, #5
   125b8:	mov	r0, #0
   125bc:	bl	112d0 <dcgettext@plt>
   125c0:	ldr	r3, [fp, #208]	; 0xd0
   125c4:	mov	r4, r0
   125c8:	ldr	r0, [r3, r6]
   125cc:	b	124bc <__assert_fail@plt+0xf64>
   125d0:	mov	r2, #5
   125d4:	movw	r1, #55112	; 0xd748
   125d8:	movt	r1, #2
   125dc:	mov	r0, #0
   125e0:	bl	112d0 <dcgettext@plt>
   125e4:	ldr	r3, [fp, #208]	; 0xd0
   125e8:	mov	r5, r0
   125ec:	ldr	r0, [r3, r4, lsl #2]
   125f0:	bl	1799c <__assert_fail@plt+0x6444>
   125f4:	mov	r1, #0
   125f8:	mov	r3, r0
   125fc:	mov	r2, r5
   12600:	mov	r0, r1
   12604:	bl	11384 <error@plt>
   12608:	bl	12808 <__assert_fail@plt+0x12b0>
   1260c:	mov	r2, #5
   12610:	movw	r1, #57636	; 0xe124
   12614:	movt	r1, #2
   12618:	mov	r0, #0
   1261c:	bl	112d0 <dcgettext@plt>
   12620:	mov	r1, #0
   12624:	mov	r2, r0
   12628:	mov	r0, r1
   1262c:	bl	11384 <error@plt>
   12630:	bl	12808 <__assert_fail@plt+0x12b0>
   12634:	add	r0, r6, #24
   12638:	str	r9, [sp]
   1263c:	ldrd	r2, [sp, #32]
   12640:	bl	13620 <__assert_fail@plt+0x20c8>
   12644:	bl	1142c <__errno_location@plt>
   12648:	ldr	r4, [r0]
   1264c:	mov	r2, #5
   12650:	movw	r1, #55188	; 0xd794
   12654:	movt	r1, #2
   12658:	mov	r0, #0
   1265c:	bl	112d0 <dcgettext@plt>
   12660:	mov	r2, r0
   12664:	mov	r0, #0
   12668:	mov	r1, r4
   1266c:	bl	11384 <error@plt>
   12670:	bl	12808 <__assert_fail@plt+0x12b0>
   12674:	mov	r2, #5
   12678:	movw	r1, #57172	; 0xdf54
   1267c:	movt	r1, #2
   12680:	mov	r0, #0
   12684:	bl	112d0 <dcgettext@plt>
   12688:	tst	r4, #2
   1268c:	mov	r2, r0
   12690:	str	r7, [sp]
   12694:	movne	r3, #35	; 0x23
   12698:	moveq	r3, #39	; 0x27
   1269c:	mov	r1, #0
   126a0:	mov	r0, #1
   126a4:	bl	11384 <error@plt>
   126a8:	movw	r1, #57556	; 0xe0d4
   126ac:	movt	r1, #2
   126b0:	mov	r2, #5
   126b4:	mov	r0, #0
   126b8:	bl	112d0 <dcgettext@plt>
   126bc:	mov	r4, r0
   126c0:	mov	r0, r5
   126c4:	b	124bc <__assert_fail@plt+0xf64>
   126c8:	movw	r1, #56992	; 0xdea0
   126cc:	movt	r1, #2
   126d0:	b	12438 <__assert_fail@plt+0xee0>
   126d4:	mov	r2, #5
   126d8:	mov	r0, r4
   126dc:	movw	r1, #56916	; 0xde54
   126e0:	movt	r1, #2
   126e4:	bl	112d0 <dcgettext@plt>
   126e8:	ldr	r2, [sp, #24]
   126ec:	mov	r5, r0
   126f0:	ldr	r3, [sp, #32]
   126f4:	sub	r3, r3, #-1073741823	; 0xc0000001
   126f8:	ldr	r0, [r2, r3, lsl #2]
   126fc:	bl	1799c <__assert_fail@plt+0x6444>
   12700:	mov	r3, r0
   12704:	mov	r2, r5
   12708:	mov	r1, r4
   1270c:	mov	r0, r4
   12710:	bl	11384 <error@plt>
   12714:	b	12484 <__assert_fail@plt+0xf2c>
   12718:	mov	fp, #0
   1271c:	mov	lr, #0
   12720:	pop	{r1}		; (ldr r1, [sp], #4)
   12724:	mov	r2, sp
   12728:	push	{r2}		; (str r2, [sp, #-4]!)
   1272c:	push	{r0}		; (str r0, [sp, #-4]!)
   12730:	ldr	ip, [pc, #16]	; 12748 <__assert_fail@plt+0x11f0>
   12734:	push	{ip}		; (str ip, [sp, #-4]!)
   12738:	ldr	r0, [pc, #12]	; 1274c <__assert_fail@plt+0x11f4>
   1273c:	ldr	r3, [pc, #12]	; 12750 <__assert_fail@plt+0x11f8>
   12740:	bl	113b4 <__libc_start_main@plt>
   12744:	bl	11534 <abort@plt>
   12748:	andeq	sp, r2, r0, ror #11
   1274c:	andeq	r1, r1, r4, ror #10
   12750:	andeq	sp, r2, r0, lsl #11
   12754:	ldr	r3, [pc, #20]	; 12770 <__assert_fail@plt+0x1218>
   12758:	ldr	r2, [pc, #20]	; 12774 <__assert_fail@plt+0x121c>
   1275c:	add	r3, pc, r3
   12760:	ldr	r2, [r3, r2]
   12764:	cmp	r2, #0
   12768:	bxeq	lr
   1276c:	b	113e4 <__gmon_start__@plt>
   12770:	muleq	r2, ip, r8
   12774:	andeq	r0, r0, r0, asr r1
   12778:	ldr	r0, [pc, #24]	; 12798 <__assert_fail@plt+0x1240>
   1277c:	ldr	r3, [pc, #24]	; 1279c <__assert_fail@plt+0x1244>
   12780:	cmp	r3, r0
   12784:	bxeq	lr
   12788:	ldr	r3, [pc, #16]	; 127a0 <__assert_fail@plt+0x1248>
   1278c:	cmp	r3, #0
   12790:	bxeq	lr
   12794:	bx	r3
   12798:	andeq	pc, r3, r8, lsr #3
   1279c:	andeq	pc, r3, r8, lsr #3
   127a0:	andeq	r0, r0, r0
   127a4:	ldr	r0, [pc, #36]	; 127d0 <__assert_fail@plt+0x1278>
   127a8:	ldr	r1, [pc, #36]	; 127d4 <__assert_fail@plt+0x127c>
   127ac:	sub	r1, r1, r0
   127b0:	asr	r1, r1, #2
   127b4:	add	r1, r1, r1, lsr #31
   127b8:	asrs	r1, r1, #1
   127bc:	bxeq	lr
   127c0:	ldr	r3, [pc, #16]	; 127d8 <__assert_fail@plt+0x1280>
   127c4:	cmp	r3, #0
   127c8:	bxeq	lr
   127cc:	bx	r3
   127d0:	andeq	pc, r3, r8, lsr #3
   127d4:	andeq	pc, r3, r8, lsr #3
   127d8:	andeq	r0, r0, r0
   127dc:	push	{r4, lr}
   127e0:	ldr	r4, [pc, #24]	; 12800 <__assert_fail@plt+0x12a8>
   127e4:	ldrb	r3, [r4]
   127e8:	cmp	r3, #0
   127ec:	popne	{r4, pc}
   127f0:	bl	12778 <__assert_fail@plt+0x1220>
   127f4:	mov	r3, #1
   127f8:	strb	r3, [r4]
   127fc:	pop	{r4, pc}
   12800:	andeq	pc, r3, r4, asr #3
   12804:	b	127a4 <__assert_fail@plt+0x124c>
   12808:	movw	r4, #61896	; 0xf1c8
   1280c:	movt	r4, #3
   12810:	str	r7, [sp, #-8]!
   12814:	str	lr, [sp, #4]
   12818:	sub	sp, sp, #136	; 0x88
   1281c:	bl	12938 <__assert_fail@plt+0x13e0>
   12820:	mov	r1, r4
   12824:	add	r2, sp, #8
   12828:	mov	r0, #0
   1282c:	bl	11228 <sigprocmask@plt>
   12830:	ldrb	r3, [r4, #128]	; 0x80
   12834:	cmp	r3, #0
   12838:	beq	12920 <__assert_fail@plt+0x13c8>
   1283c:	ldr	r5, [r4, #132]	; 0x84
   12840:	subs	r5, r5, #1
   12844:	bmi	12918 <__assert_fail@plt+0x13c0>
   12848:	movw	sl, #61788	; 0xf15c
   1284c:	movt	sl, #3
   12850:	movw	r9, #55080	; 0xd728
   12854:	movt	r9, #2
   12858:	movw	r8, #57324	; 0xdfec
   1285c:	movt	r8, #2
   12860:	b	128d0 <__assert_fail@plt+0x1378>
   12864:	bl	11414 <strlen@plt>
   12868:	add	r0, r6, r0
   1286c:	mvn	r2, #0
   12870:	str	r5, [sp]
   12874:	mov	r1, #1
   12878:	ldr	r3, [r4, #144]	; 0x90
   1287c:	bl	11444 <__sprintf_chk@plt>
   12880:	ldr	r7, [r4, #136]	; 0x88
   12884:	mov	r0, r7
   12888:	bl	112dc <unlink@plt>
   1288c:	cmp	r0, #0
   12890:	beq	128c8 <__assert_fail@plt+0x1370>
   12894:	bl	1142c <__errno_location@plt>
   12898:	ldr	r6, [r0]
   1289c:	cmp	r6, #2
   128a0:	beq	128c8 <__assert_fail@plt+0x1370>
   128a4:	mov	r2, r7
   128a8:	mov	r1, #3
   128ac:	mov	r0, #0
   128b0:	bl	171f0 <__assert_fail@plt+0x5c98>
   128b4:	mov	r3, r0
   128b8:	mov	r2, r8
   128bc:	mov	r1, r6
   128c0:	mov	r0, #0
   128c4:	bl	11384 <error@plt>
   128c8:	subs	r5, r5, #1
   128cc:	bcc	12918 <__assert_fail@plt+0x13c0>
   128d0:	ldr	r0, [r4, #136]	; 0x88
   128d4:	ldr	r1, [r4, #140]	; 0x8c
   128d8:	bl	11360 <strcpy@plt>
   128dc:	ldr	r3, [r4, #144]	; 0x90
   128e0:	ldr	r6, [r4, #136]	; 0x88
   128e4:	ldr	r0, [r4, #140]	; 0x8c
   128e8:	cmp	r3, #0
   128ec:	bne	12864 <__assert_fail@plt+0x130c>
   128f0:	bl	11414 <strlen@plt>
   128f4:	ldr	ip, [sl]
   128f8:	add	r0, r6, r0
   128fc:	mov	r3, r9
   12900:	mvn	r2, #0
   12904:	mov	r1, #1
   12908:	str	ip, [sp]
   1290c:	str	r5, [sp, #4]
   12910:	bl	11444 <__sprintf_chk@plt>
   12914:	b	12880 <__assert_fail@plt+0x1328>
   12918:	mov	r3, #0
   1291c:	str	r3, [r4, #132]	; 0x84
   12920:	add	r1, sp, #8
   12924:	mov	r2, #0
   12928:	mov	r0, #2
   1292c:	bl	11228 <sigprocmask@plt>
   12930:	mov	r0, #1
   12934:	bl	11408 <exit@plt>
   12938:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1293c:	movw	r4, #61896	; 0xf1c8
   12940:	movt	r4, #3
   12944:	ldr	r0, [r4, #148]	; 0x94
   12948:	strd	r6, [sp, #8]
   1294c:	str	r8, [sp, #16]
   12950:	str	lr, [sp, #20]
   12954:	sub	sp, sp, #128	; 0x80
   12958:	cmp	r0, #0
   1295c:	beq	129a4 <__assert_fail@plt+0x144c>
   12960:	ldr	r3, [r0]
   12964:	ands	r5, r3, #32
   12968:	bne	12aa4 <__assert_fail@plt+0x154c>
   1296c:	bl	13bd8 <__assert_fail@plt+0x2680>
   12970:	subs	r6, r0, #0
   12974:	bne	12a6c <__assert_fail@plt+0x1514>
   12978:	ldrd	r2, [r4, #160]	; 0xa0
   1297c:	orrs	r1, r2, r3
   12980:	bne	12990 <__assert_fail@plt+0x1438>
   12984:	ldrb	r1, [r4, #168]	; 0xa8
   12988:	cmp	r1, #0
   1298c:	bne	129f4 <__assert_fail@plt+0x149c>
   12990:	ldrb	r1, [r4, #169]	; 0xa9
   12994:	cmp	r1, #0
   12998:	beq	129bc <__assert_fail@plt+0x1464>
   1299c:	mov	r3, #0
   129a0:	str	r3, [r4, #148]	; 0x94
   129a4:	add	sp, sp, #128	; 0x80
   129a8:	ldrd	r4, [sp]
   129ac:	ldrd	r6, [sp, #8]
   129b0:	ldr	r8, [sp, #16]
   129b4:	add	sp, sp, #20
   129b8:	pop	{pc}		; (ldr pc, [sp], #4)
   129bc:	movw	r1, #61884	; 0xf1bc
   129c0:	movt	r1, #3
   129c4:	ldr	r5, [r1]
   129c8:	mov	r0, r2
   129cc:	mov	r1, r3
   129d0:	mov	r2, sp
   129d4:	bl	13f4c <__assert_fail@plt+0x29f4>
   129d8:	mov	r3, r0
   129dc:	movw	r2, #58824	; 0xe5c8
   129e0:	movt	r2, #2
   129e4:	mov	r1, #1
   129e8:	mov	r0, r5
   129ec:	bl	1148c <__fprintf_chk@plt>
   129f0:	b	1299c <__assert_fail@plt+0x1444>
   129f4:	mov	r1, r4
   129f8:	mov	r2, sp
   129fc:	bl	11228 <sigprocmask@plt>
   12a00:	ldr	r7, [r4, #152]	; 0x98
   12a04:	mov	r0, r7
   12a08:	bl	112dc <unlink@plt>
   12a0c:	mov	r8, r0
   12a10:	bl	1142c <__errno_location@plt>
   12a14:	ldr	r3, [r4, #132]	; 0x84
   12a18:	mov	r1, sp
   12a1c:	mov	r2, r6
   12a20:	ldr	r5, [r0]
   12a24:	mov	r0, #2
   12a28:	sub	r3, r3, #1
   12a2c:	str	r3, [r4, #132]	; 0x84
   12a30:	bl	11228 <sigprocmask@plt>
   12a34:	cmp	r8, #0
   12a38:	cmpne	r5, #2
   12a3c:	beq	1299c <__assert_fail@plt+0x1444>
   12a40:	mov	r2, r7
   12a44:	mov	r1, #3
   12a48:	mov	r0, r6
   12a4c:	bl	171f0 <__assert_fail@plt+0x5c98>
   12a50:	mov	r3, r0
   12a54:	mov	r1, r5
   12a58:	mov	r0, r6
   12a5c:	movw	r2, #57324	; 0xdfec
   12a60:	movt	r2, #2
   12a64:	bl	11384 <error@plt>
   12a68:	b	1299c <__assert_fail@plt+0x1444>
   12a6c:	bl	1142c <__errno_location@plt>
   12a70:	ldr	r6, [r0]
   12a74:	mov	r1, #3
   12a78:	mov	r0, r5
   12a7c:	ldr	r2, [r4, #152]	; 0x98
   12a80:	bl	171f0 <__assert_fail@plt+0x5c98>
   12a84:	mov	r3, r0
   12a88:	movw	r2, #57324	; 0xdfec
   12a8c:	movt	r2, #2
   12a90:	mov	r1, r6
   12a94:	mov	r0, r5
   12a98:	bl	11384 <error@plt>
   12a9c:	str	r5, [r4, #148]	; 0x94
   12aa0:	bl	12808 <__assert_fail@plt+0x12b0>
   12aa4:	mov	r2, #5
   12aa8:	movw	r1, #55088	; 0xd730
   12aac:	movt	r1, #2
   12ab0:	mov	r0, #0
   12ab4:	bl	112d0 <dcgettext@plt>
   12ab8:	mov	r5, r0
   12abc:	mov	r0, #4
   12ac0:	ldr	r1, [r4, #152]	; 0x98
   12ac4:	bl	16670 <__assert_fail@plt+0x5118>
   12ac8:	mov	r1, #0
   12acc:	mov	r3, r0
   12ad0:	mov	r2, r5
   12ad4:	mov	r0, r1
   12ad8:	bl	11384 <error@plt>
   12adc:	mov	r3, #0
   12ae0:	str	r3, [r4, #148]	; 0x94
   12ae4:	bl	12808 <__assert_fail@plt+0x12b0>
   12ae8:	movw	r4, #61880	; 0xf1b8
   12aec:	movt	r4, #3
   12af0:	str	r7, [sp, #-8]!
   12af4:	mov	r5, r0
   12af8:	mov	r6, r2
   12afc:	ldr	r8, [r4]
   12b00:	mov	r2, #5
   12b04:	movw	r1, #55108	; 0xd744
   12b08:	movt	r1, #2
   12b0c:	mov	r0, #0
   12b10:	str	lr, [sp, #4]
   12b14:	sub	sp, sp, #32
   12b18:	mov	r7, r3
   12b1c:	bl	112d0 <dcgettext@plt>
   12b20:	movw	r3, #62144	; 0xf2c0
   12b24:	movt	r3, #3
   12b28:	mov	r9, r0
   12b2c:	ldrd	r0, [r5]
   12b30:	add	r2, sp, #8
   12b34:	ldr	r5, [r3]
   12b38:	bl	13f4c <__assert_fail@plt+0x29f4>
   12b3c:	bl	1799c <__assert_fail@plt+0x6444>
   12b40:	mov	r2, r9
   12b44:	mov	r1, #1
   12b48:	str	r0, [sp]
   12b4c:	mov	r0, r8
   12b50:	mov	r3, r5
   12b54:	bl	1148c <__fprintf_chk@plt>
   12b58:	orrs	r3, r6, r7
   12b5c:	beq	12ba4 <__assert_fail@plt+0x164c>
   12b60:	ldr	r4, [r4]
   12b64:	mov	r2, #5
   12b68:	movw	r1, #55144	; 0xd768
   12b6c:	movt	r1, #2
   12b70:	mov	r0, #0
   12b74:	bl	112d0 <dcgettext@plt>
   12b78:	mov	r5, r0
   12b7c:	add	r2, sp, #8
   12b80:	mov	r1, r7
   12b84:	mov	r0, r6
   12b88:	bl	13f4c <__assert_fail@plt+0x29f4>
   12b8c:	mov	r3, r0
   12b90:	mov	r2, r5
   12b94:	mov	r0, r4
   12b98:	mov	r1, #1
   12b9c:	bl	1148c <__fprintf_chk@plt>
   12ba0:	bl	12808 <__assert_fail@plt+0x12b0>
   12ba4:	mov	r0, #10
   12ba8:	ldr	r1, [r4]
   12bac:	bl	114ec <fputc@plt>
   12bb0:	b	12ba0 <__assert_fail@plt+0x1648>
   12bb4:	ldr	ip, [r1]
   12bb8:	mov	r1, #1
   12bbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12bc0:	movw	r4, #61896	; 0xf1c8
   12bc4:	movt	r4, #3
   12bc8:	mov	r5, r0
   12bcc:	ldr	r2, [r0]
   12bd0:	strd	r6, [sp, #8]
   12bd4:	ldr	r3, [r4, #148]	; 0x94
   12bd8:	mov	r0, ip
   12bdc:	str	r8, [sp, #16]
   12be0:	str	lr, [sp, #20]
   12be4:	bl	112ac <fwrite_unlocked@plt>
   12be8:	ldr	r3, [r5]
   12bec:	cmp	r0, r3
   12bf0:	bne	12c18 <__assert_fail@plt+0x16c0>
   12bf4:	ldrd	r2, [r4, #160]	; 0xa0
   12bf8:	ldr	r8, [sp, #16]
   12bfc:	adds	r6, r2, r0
   12c00:	adc	r7, r3, r0, asr #31
   12c04:	strd	r6, [r4, #160]	; 0xa0
   12c08:	ldrd	r4, [sp]
   12c0c:	ldrd	r6, [sp, #8]
   12c10:	add	sp, sp, #20
   12c14:	pop	{pc}		; (ldr pc, [sp], #4)
   12c18:	bl	1142c <__errno_location@plt>
   12c1c:	ldr	r5, [r0]
   12c20:	mov	r2, #5
   12c24:	movw	r1, #55088	; 0xd730
   12c28:	movt	r1, #2
   12c2c:	mov	r0, #0
   12c30:	bl	112d0 <dcgettext@plt>
   12c34:	mov	r6, r0
   12c38:	mov	r0, #4
   12c3c:	ldr	r1, [r4, #152]	; 0x98
   12c40:	bl	16670 <__assert_fail@plt+0x5118>
   12c44:	mov	r3, r0
   12c48:	mov	r2, r6
   12c4c:	mov	r1, r5
   12c50:	mov	r0, #0
   12c54:	bl	11384 <error@plt>
   12c58:	mov	r3, #0
   12c5c:	str	r3, [r4, #148]	; 0x94
   12c60:	bl	12808 <__assert_fail@plt+0x12b0>
   12c64:	strd	r4, [sp, #-20]!	; 0xffffffec
   12c68:	movw	r4, #61896	; 0xf1c8
   12c6c:	movt	r4, #3
   12c70:	strd	r6, [sp, #8]
   12c74:	str	lr, [sp, #16]
   12c78:	sub	sp, sp, #140	; 0x8c
   12c7c:	ldr	r5, [r4, #132]	; 0x84
   12c80:	ldr	r0, [r4, #136]	; 0x88
   12c84:	ldr	r1, [r4, #140]	; 0x8c
   12c88:	bl	11360 <strcpy@plt>
   12c8c:	ldr	r3, [r4, #144]	; 0x90
   12c90:	ldr	r6, [r4, #136]	; 0x88
   12c94:	ldr	r0, [r4, #140]	; 0x8c
   12c98:	cmp	r3, #0
   12c9c:	beq	12d78 <__assert_fail@plt+0x1820>
   12ca0:	bl	11414 <strlen@plt>
   12ca4:	add	r0, r6, r0
   12ca8:	mvn	r2, #0
   12cac:	str	r5, [sp]
   12cb0:	mov	r1, #1
   12cb4:	ldr	r3, [r4, #144]	; 0x90
   12cb8:	bl	11444 <__sprintf_chk@plt>
   12cbc:	ldr	r6, [r4, #136]	; 0x88
   12cc0:	cmn	r5, #-2147483647	; 0x80000001
   12cc4:	moveq	r7, #75	; 0x4b
   12cc8:	str	r6, [r4, #152]	; 0x98
   12ccc:	bne	12cfc <__assert_fail@plt+0x17a4>
   12cd0:	mov	r2, r6
   12cd4:	mov	r1, #3
   12cd8:	mov	r0, #0
   12cdc:	bl	171f0 <__assert_fail@plt+0x5c98>
   12ce0:	mov	r3, r0
   12ce4:	mov	r1, r7
   12ce8:	movw	r2, #57324	; 0xdfec
   12cec:	movt	r2, #2
   12cf0:	mov	r0, #0
   12cf4:	bl	11384 <error@plt>
   12cf8:	bl	12808 <__assert_fail@plt+0x12b0>
   12cfc:	add	r2, sp, #8
   12d00:	movw	r1, #61896	; 0xf1c8
   12d04:	movt	r1, #3
   12d08:	mov	r0, #0
   12d0c:	bl	11228 <sigprocmask@plt>
   12d10:	mov	r0, r6
   12d14:	movw	r1, #55164	; 0xd77c
   12d18:	movt	r1, #2
   12d1c:	bl	13d70 <__assert_fail@plt+0x2818>
   12d20:	mov	r6, r0
   12d24:	cmp	r0, #0
   12d28:	addne	r5, r5, #1
   12d2c:	str	r0, [r4, #148]	; 0x94
   12d30:	bl	1142c <__errno_location@plt>
   12d34:	add	r1, sp, #8
   12d38:	mov	r2, #0
   12d3c:	ldr	r7, [r0]
   12d40:	mov	r0, #2
   12d44:	str	r5, [r4, #132]	; 0x84
   12d48:	bl	11228 <sigprocmask@plt>
   12d4c:	cmp	r6, #0
   12d50:	ldreq	r6, [r4, #152]	; 0x98
   12d54:	beq	12cd0 <__assert_fail@plt+0x1778>
   12d58:	mov	r2, #0
   12d5c:	mov	r3, #0
   12d60:	strd	r2, [r4, #160]	; 0xa0
   12d64:	add	sp, sp, #140	; 0x8c
   12d68:	ldrd	r4, [sp]
   12d6c:	ldrd	r6, [sp, #8]
   12d70:	add	sp, sp, #16
   12d74:	pop	{pc}		; (ldr pc, [sp], #4)
   12d78:	bl	11414 <strlen@plt>
   12d7c:	movw	r3, #61788	; 0xf15c
   12d80:	movt	r3, #3
   12d84:	str	r5, [sp, #4]
   12d88:	ldr	ip, [r3]
   12d8c:	add	r0, r6, r0
   12d90:	mvn	r2, #0
   12d94:	mov	r1, #1
   12d98:	movw	r3, #55080	; 0xd728
   12d9c:	movt	r3, #2
   12da0:	str	ip, [sp]
   12da4:	bl	11444 <__sprintf_chk@plt>
   12da8:	b	12cbc <__assert_fail@plt+0x1764>
   12dac:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12db0:	movw	r4, #61896	; 0xf1c8
   12db4:	movt	r4, #3
   12db8:	ldrb	r3, [r4, #128]	; 0x80
   12dbc:	strd	r6, [sp, #8]
   12dc0:	mov	r6, r0
   12dc4:	strd	r8, [sp, #16]
   12dc8:	str	lr, [sp, #24]
   12dcc:	sub	sp, sp, #12
   12dd0:	cmp	r3, #0
   12dd4:	beq	12e4c <__assert_fail@plt+0x18f4>
   12dd8:	ldr	r5, [r4, #132]	; 0x84
   12ddc:	subs	r5, r5, #1
   12de0:	bmi	12e44 <__assert_fail@plt+0x18ec>
   12de4:	movw	r8, #61788	; 0xf15c
   12de8:	movt	r8, #3
   12dec:	movw	r7, #55080	; 0xd728
   12df0:	movt	r7, #2
   12df4:	ldr	r0, [r4, #136]	; 0x88
   12df8:	ldr	r1, [r4, #140]	; 0x8c
   12dfc:	bl	11360 <strcpy@plt>
   12e00:	ldr	r3, [r4, #144]	; 0x90
   12e04:	ldr	r9, [r4, #136]	; 0x88
   12e08:	ldr	r0, [r4, #140]	; 0x8c
   12e0c:	cmp	r3, #0
   12e10:	beq	12e78 <__assert_fail@plt+0x1920>
   12e14:	bl	11414 <strlen@plt>
   12e18:	add	r0, r9, r0
   12e1c:	mvn	r2, #0
   12e20:	str	r5, [sp]
   12e24:	mov	r1, #1
   12e28:	ldr	r3, [r4, #144]	; 0x90
   12e2c:	add	r5, r5, r2
   12e30:	bl	11444 <__sprintf_chk@plt>
   12e34:	ldr	r0, [r4, #136]	; 0x88
   12e38:	bl	112dc <unlink@plt>
   12e3c:	cmn	r5, #1
   12e40:	bne	12df4 <__assert_fail@plt+0x189c>
   12e44:	mov	r3, #0
   12e48:	str	r3, [r4, #132]	; 0x84
   12e4c:	mov	r1, #0
   12e50:	mov	r0, r6
   12e54:	bl	112a0 <signal@plt>
   12e58:	mov	r0, r6
   12e5c:	add	sp, sp, #12
   12e60:	ldrd	r4, [sp]
   12e64:	ldrd	r6, [sp, #8]
   12e68:	ldrd	r8, [sp, #16]
   12e6c:	ldr	lr, [sp, #24]
   12e70:	add	sp, sp, #28
   12e74:	b	111d4 <raise@plt>
   12e78:	bl	11414 <strlen@plt>
   12e7c:	ldr	ip, [r8]
   12e80:	mvn	r2, #0
   12e84:	mov	r3, r7
   12e88:	mov	r1, #1
   12e8c:	add	r0, r9, r0
   12e90:	str	ip, [sp]
   12e94:	str	r5, [sp, #4]
   12e98:	add	r5, r5, r2
   12e9c:	bl	11444 <__sprintf_chk@plt>
   12ea0:	ldr	r0, [r4, #136]	; 0x88
   12ea4:	bl	112dc <unlink@plt>
   12ea8:	cmn	r5, #1
   12eac:	bne	12df4 <__assert_fail@plt+0x189c>
   12eb0:	b	12e44 <__assert_fail@plt+0x18ec>
   12eb4:	mov	r2, #5
   12eb8:	movw	r1, #55168	; 0xd780
   12ebc:	movt	r1, #2
   12ec0:	mov	r0, #0
   12ec4:	str	r4, [sp, #-8]!
   12ec8:	str	lr, [sp, #4]
   12ecc:	bl	112d0 <dcgettext@plt>
   12ed0:	mov	r1, #0
   12ed4:	mov	r3, r0
   12ed8:	movw	r2, #57324	; 0xdfec
   12edc:	movt	r2, #2
   12ee0:	mov	r0, r1
   12ee4:	bl	11384 <error@plt>
   12ee8:	bl	12808 <__assert_fail@plt+0x12b0>
   12eec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ef0:	movw	r3, #8190	; 0x1ffe
   12ef4:	strd	r6, [sp, #8]
   12ef8:	movw	r6, #61896	; 0xf1c8
   12efc:	movt	r6, #3
   12f00:	strd	r8, [sp, #16]
   12f04:	ldr	r9, [r6, #172]	; 0xac
   12f08:	strd	sl, [sp, #24]
   12f0c:	str	lr, [sp, #32]
   12f10:	sub	sp, sp, #20
   12f14:	cmp	r9, r3
   12f18:	addgt	r9, r9, #1
   12f1c:	movwle	r9, #8191	; 0x1fff
   12f20:	mov	r0, #48	; 0x30
   12f24:	mov	r5, #0
   12f28:	bl	2a69c <__assert_fail@plt+0x19144>
   12f2c:	mov	r4, r0
   12f30:	mov	r3, #1
   12f34:	mov	r2, r9
   12f38:	mov	r1, r0
   12f3c:	mov	r0, r5
   12f40:	str	r3, [sp]
   12f44:	mvn	r3, #0
   12f48:	str	r5, [r4]
   12f4c:	bl	2a988 <__assert_fail@plt+0x19430>
   12f50:	ldr	r9, [r6, #172]	; 0xac
   12f54:	mov	sl, r0
   12f58:	str	r5, [r4, #4]
   12f5c:	ldr	r3, [r6, #176]	; 0xb0
   12f60:	str	r5, [r4, #24]
   12f64:	ldr	r2, [r6, #180]	; 0xb4
   12f68:	str	r0, [r4, #28]
   12f6c:	str	r5, [r4, #32]
   12f70:	adds	r3, r3, #1
   12f74:	ldr	fp, [r4]
   12f78:	adc	r2, r2, r5
   12f7c:	cmp	r9, r5
   12f80:	str	r3, [r4, #8]
   12f84:	str	r5, [r4, #36]	; 0x24
   12f88:	strd	r2, [r4, #12]
   12f8c:	str	r2, [r4, #20]
   12f90:	str	r5, [r4, #40]	; 0x28
   12f94:	bne	13220 <__assert_fail@plt+0x1cc8>
   12f98:	subs	r2, fp, #1
   12f9c:	beq	130cc <__assert_fail@plt+0x1b74>
   12fa0:	mov	r1, sl
   12fa4:	mov	r0, #0
   12fa8:	bl	29ecc <__assert_fail@plt+0x18974>
   12fac:	cmp	r0, #0
   12fb0:	bne	13250 <__assert_fail@plt+0x1cf8>
   12fb4:	ldr	r0, [r4, #4]
   12fb8:	mov	r3, #1
   12fbc:	strb	r3, [r6, #188]	; 0xbc
   12fc0:	cmp	r0, #0
   12fc4:	str	r0, [r4, #4]
   12fc8:	beq	130cc <__assert_fail@plt+0x1b74>
   12fcc:	ldr	r8, [r4, #28]
   12fd0:	mov	r3, #10
   12fd4:	mov	sl, #0
   12fd8:	add	r2, r8, r0
   12fdc:	strb	r3, [r8, r0]
   12fe0:	str	r2, [sp, #12]
   12fe4:	b	1300c <__assert_fail@plt+0x1ab4>
   12fe8:	ldr	ip, [r5, #4]
   12fec:	add	r0, r0, #1
   12ff0:	add	lr, ip, #1
   12ff4:	add	ip, r5, ip, lsl #3
   12ff8:	add	sl, sl, #1
   12ffc:	str	r9, [ip, #12]
   13000:	str	r8, [ip, #16]
   13004:	add	r8, r7, #1
   13008:	stm	r5, {r0, lr}
   1300c:	mov	r1, #10
   13010:	mov	r0, r8
   13014:	bl	11318 <rawmemchr@plt>
   13018:	ldr	r3, [sp, #12]
   1301c:	mov	r7, r0
   13020:	sub	r9, r0, r8
   13024:	cmp	r3, r0
   13028:	beq	13154 <__assert_fail@plt+0x1bfc>
   1302c:	ldr	fp, [r4, #32]
   13030:	add	r9, r9, #1
   13034:	cmp	fp, #0
   13038:	beq	13120 <__assert_fail@plt+0x1bc8>
   1303c:	ldr	r5, [r4, #36]	; 0x24
   13040:	ldr	r0, [r5]
   13044:	cmp	r0, #80	; 0x50
   13048:	bne	12fe8 <__assert_fail@plt+0x1a90>
   1304c:	mov	r0, #656	; 0x290
   13050:	bl	2a69c <__assert_fail@plt+0x19144>
   13054:	mov	r3, #0
   13058:	str	r3, [r0]
   1305c:	str	r3, [r0, #4]
   13060:	str	r3, [r0, #8]
   13064:	str	r3, [r0, #652]	; 0x28c
   13068:	str	r0, [r5, #652]	; 0x28c
   1306c:	ldr	r3, [r4, #36]	; 0x24
   13070:	ldr	r5, [r3, #652]	; 0x28c
   13074:	ldr	r0, [r5]
   13078:	str	r5, [r4, #36]	; 0x24
   1307c:	b	12fe8 <__assert_fail@plt+0x1a90>
   13080:	mov	r1, r9
   13084:	mov	r0, r8
   13088:	bl	2ab70 <__assert_fail@plt+0x19618>
   1308c:	mov	r5, r0
   13090:	ldr	r0, [r6, #184]	; 0xb8
   13094:	bl	13e1c <__assert_fail@plt+0x28c4>
   13098:	str	r9, [r6, #172]	; 0xac
   1309c:	str	r5, [r6, #184]	; 0xb8
   130a0:	ldrd	r8, [r6, #176]	; 0xb0
   130a4:	str	sl, [r4, #24]
   130a8:	adds	r0, r8, #1
   130ac:	adc	r1, r9, #0
   130b0:	adds	r2, r8, sl
   130b4:	adc	r3, r9, sl, asr #31
   130b8:	cmp	sl, #0
   130bc:	strd	r0, [r4, #8]
   130c0:	strd	r0, [r4, #16]
   130c4:	strd	r2, [r6, #176]	; 0xb0
   130c8:	bne	13334 <__assert_fail@plt+0x1ddc>
   130cc:	ldrb	r3, [r6, #188]	; 0xbc
   130d0:	cmp	r3, #0
   130d4:	bne	132cc <__assert_fail@plt+0x1d74>
   130d8:	ldr	r0, [r4]
   130dc:	asr	r1, r0, #31
   130e0:	adds	r9, r0, r0
   130e4:	adc	r3, r1, r1
   130e8:	cmp	r3, r9, asr #31
   130ec:	bne	13300 <__assert_fail@plt+0x1da8>
   130f0:	ldr	r0, [r4, #32]
   130f4:	cmp	r0, #0
   130f8:	beq	1310c <__assert_fail@plt+0x1bb4>
   130fc:	ldr	r5, [r0, #652]	; 0x28c
   13100:	bl	13e1c <__assert_fail@plt+0x28c4>
   13104:	subs	r0, r5, #0
   13108:	bne	130fc <__assert_fail@plt+0x1ba4>
   1310c:	ldr	r0, [r4, #28]
   13110:	bl	13e1c <__assert_fail@plt+0x28c4>
   13114:	mov	r0, r4
   13118:	bl	13e1c <__assert_fail@plt+0x28c4>
   1311c:	b	12f20 <__assert_fail@plt+0x19c8>
   13120:	mov	r0, #656	; 0x290
   13124:	bl	2a69c <__assert_fail@plt+0x19144>
   13128:	mov	r5, r0
   1312c:	mov	lr, #1
   13130:	mov	ip, fp
   13134:	mov	r0, lr
   13138:	str	fp, [r5]
   1313c:	str	fp, [r5, #4]
   13140:	str	fp, [r5, #8]
   13144:	str	r5, [r4, #32]
   13148:	str	r5, [r4, #36]	; 0x24
   1314c:	str	fp, [r5, #652]	; 0x28c
   13150:	b	12ff4 <__assert_fail@plt+0x1a9c>
   13154:	cmp	r9, #0
   13158:	beq	130a0 <__assert_fail@plt+0x1b48>
   1315c:	ldrb	r3, [r6, #188]	; 0xbc
   13160:	cmp	r3, #0
   13164:	beq	13080 <__assert_fail@plt+0x1b28>
   13168:	ldr	r7, [r4, #32]
   1316c:	cmp	r7, #0
   13170:	beq	13298 <__assert_fail@plt+0x1d40>
   13174:	ldr	r5, [r4, #36]	; 0x24
   13178:	ldr	ip, [r5]
   1317c:	cmp	ip, #80	; 0x50
   13180:	beq	13264 <__assert_fail@plt+0x1d0c>
   13184:	ldr	r3, [r5, #4]
   13188:	add	ip, ip, #1
   1318c:	add	lr, r3, #1
   13190:	ldrd	r0, [r6, #176]	; 0xb0
   13194:	add	r3, r5, r3, lsl #3
   13198:	add	sl, sl, #1
   1319c:	str	r9, [r3, #12]
   131a0:	str	r8, [r3, #16]
   131a4:	adds	r2, r0, #1
   131a8:	stm	r5, {ip, lr}
   131ac:	adc	r3, r1, #0
   131b0:	adds	r0, r0, sl
   131b4:	adc	r1, r1, sl, asr #31
   131b8:	strd	r2, [r4, #8]
   131bc:	strd	r2, [r4, #16]
   131c0:	str	sl, [r4, #24]
   131c4:	strd	r0, [r6, #176]	; 0xb0
   131c8:	ldr	r2, [r6, #192]	; 0xc0
   131cc:	mov	r3, #0
   131d0:	str	r7, [r4, #36]	; 0x24
   131d4:	str	r3, [r4, #40]	; 0x28
   131d8:	cmp	r2, r3
   131dc:	moveq	r0, #1
   131e0:	streq	r4, [r6, #192]	; 0xc0
   131e4:	bne	13208 <__assert_fail@plt+0x1cb0>
   131e8:	add	sp, sp, #20
   131ec:	ldrd	r4, [sp]
   131f0:	ldrd	r6, [sp, #8]
   131f4:	ldrd	r8, [sp, #16]
   131f8:	ldrd	sl, [sp, #24]
   131fc:	add	sp, sp, #32
   13200:	pop	{pc}		; (ldr pc, [sp], #4)
   13204:	mov	r2, r3
   13208:	ldr	r3, [r2, #40]	; 0x28
   1320c:	cmp	r3, #0
   13210:	bne	13204 <__assert_fail@plt+0x1cac>
   13214:	mov	r0, #1
   13218:	str	r4, [r2, #40]	; 0x28
   1321c:	b	131e8 <__assert_fail@plt+0x1c90>
   13220:	mov	r2, r9
   13224:	ldr	r1, [r6, #184]	; 0xb8
   13228:	sub	fp, fp, r9
   1322c:	bl	11264 <memcpy@plt>
   13230:	ldr	r0, [r4, #4]
   13234:	subs	r2, fp, #1
   13238:	str	r5, [r6, #172]	; 0xac
   1323c:	add	r0, r9, r0
   13240:	str	r0, [r4, #4]
   13244:	beq	12fc0 <__assert_fail@plt+0x1a68>
   13248:	add	sl, sl, r9
   1324c:	b	12fa0 <__assert_fail@plt+0x1a48>
   13250:	cmn	r0, #1
   13254:	beq	13304 <__assert_fail@plt+0x1dac>
   13258:	ldr	r3, [r4, #4]
   1325c:	add	r0, r0, r3
   13260:	b	12fc0 <__assert_fail@plt+0x1a68>
   13264:	mov	r0, #656	; 0x290
   13268:	bl	2a69c <__assert_fail@plt+0x19144>
   1326c:	mov	r3, #0
   13270:	ldr	r7, [r4, #32]
   13274:	str	r3, [r0]
   13278:	str	r3, [r0, #4]
   1327c:	str	r3, [r0, #8]
   13280:	str	r3, [r0, #652]	; 0x28c
   13284:	str	r0, [r5, #652]	; 0x28c
   13288:	ldr	r3, [r4, #36]	; 0x24
   1328c:	ldr	r5, [r3, #652]	; 0x28c
   13290:	ldr	ip, [r5]
   13294:	b	13184 <__assert_fail@plt+0x1c2c>
   13298:	mov	r0, #656	; 0x290
   1329c:	bl	2a69c <__assert_fail@plt+0x19144>
   132a0:	mov	lr, #1
   132a4:	mov	r5, r0
   132a8:	str	r7, [r0]
   132ac:	mov	ip, lr
   132b0:	mov	r3, #0
   132b4:	str	r7, [r0, #4]
   132b8:	str	r7, [r0, #8]
   132bc:	str	r0, [r4, #32]
   132c0:	str	r7, [r0, #652]	; 0x28c
   132c4:	mov	r7, r0
   132c8:	b	13190 <__assert_fail@plt+0x1c38>
   132cc:	ldr	r0, [r4, #32]
   132d0:	cmp	r0, #0
   132d4:	beq	132e8 <__assert_fail@plt+0x1d90>
   132d8:	ldr	r5, [r0, #652]	; 0x28c
   132dc:	bl	13e1c <__assert_fail@plt+0x28c4>
   132e0:	subs	r0, r5, #0
   132e4:	bne	132d8 <__assert_fail@plt+0x1d80>
   132e8:	ldr	r0, [r4, #28]
   132ec:	bl	13e1c <__assert_fail@plt+0x28c4>
   132f0:	mov	r0, r4
   132f4:	bl	13e1c <__assert_fail@plt+0x28c4>
   132f8:	mov	r0, #0
   132fc:	b	131e8 <__assert_fail@plt+0x1c90>
   13300:	bl	12eb4 <__assert_fail@plt+0x195c>
   13304:	bl	1142c <__errno_location@plt>
   13308:	ldr	r4, [r0]
   1330c:	mov	r2, #5
   13310:	movw	r1, #55188	; 0xd794
   13314:	movt	r1, #2
   13318:	mov	r0, #0
   1331c:	bl	112d0 <dcgettext@plt>
   13320:	mov	r2, r0
   13324:	mov	r0, #0
   13328:	mov	r1, r4
   1332c:	bl	11384 <error@plt>
   13330:	bl	12808 <__assert_fail@plt+0x12b0>
   13334:	ldr	r7, [r4, #32]
   13338:	b	131c8 <__assert_fail@plt+0x1c70>
   1333c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13340:	movw	r5, #61896	; 0xf1c8
   13344:	movt	r5, #3
   13348:	ldr	r4, [r5, #192]	; 0xc0
   1334c:	strd	r6, [sp, #8]
   13350:	mov	r6, r0
   13354:	mov	r7, r1
   13358:	str	r8, [sp, #16]
   1335c:	str	lr, [sp, #20]
   13360:	cmp	r4, #0
   13364:	beq	133ec <__assert_fail@plt+0x1e94>
   13368:	ldrd	r2, [r4, #8]
   1336c:	cmp	r6, r2
   13370:	sbcs	r1, r7, r3
   13374:	bge	13380 <__assert_fail@plt+0x1e28>
   13378:	b	133f8 <__assert_fail@plt+0x1ea0>
   1337c:	ldrd	r2, [r4, #8]
   13380:	ldr	ip, [r4, #24]
   13384:	adds	r0, r2, ip
   13388:	adc	r1, r3, ip, asr #31
   1338c:	cmp	r6, r0
   13390:	sbcs	r1, r7, r1
   13394:	blt	13424 <__assert_fail@plt+0x1ecc>
   13398:	ldr	r3, [r4, #40]	; 0x28
   1339c:	cmp	r3, #0
   133a0:	movne	r4, r3
   133a4:	bne	1337c <__assert_fail@plt+0x1e24>
   133a8:	ldrb	r3, [r5, #188]	; 0xbc
   133ac:	cmp	r3, #0
   133b0:	bne	133f8 <__assert_fail@plt+0x1ea0>
   133b4:	bl	12eec <__assert_fail@plt+0x1994>
   133b8:	cmp	r0, #0
   133bc:	beq	133f8 <__assert_fail@plt+0x1ea0>
   133c0:	ldr	r4, [r4, #40]	; 0x28
   133c4:	cmp	r4, #0
   133c8:	bne	1337c <__assert_fail@plt+0x1e24>
   133cc:	movw	r3, #54792	; 0xd608
   133d0:	movt	r3, #2
   133d4:	movw	r1, #55200	; 0xd7a0
   133d8:	movt	r1, #2
   133dc:	movw	r0, #55216	; 0xd7b0
   133e0:	movt	r0, #2
   133e4:	movw	r2, #583	; 0x247
   133e8:	bl	11558 <__assert_fail@plt>
   133ec:	ldrb	r3, [r5, #188]	; 0xbc
   133f0:	cmp	r3, #0
   133f4:	beq	13410 <__assert_fail@plt+0x1eb8>
   133f8:	mov	r0, #0
   133fc:	ldrd	r4, [sp]
   13400:	ldrd	r6, [sp, #8]
   13404:	ldr	r8, [sp, #16]
   13408:	add	sp, sp, #20
   1340c:	pop	{pc}		; (ldr pc, [sp], #4)
   13410:	bl	12eec <__assert_fail@plt+0x1994>
   13414:	cmp	r0, #0
   13418:	beq	133f8 <__assert_fail@plt+0x1ea0>
   1341c:	ldr	r4, [r5, #192]	; 0xc0
   13420:	b	13368 <__assert_fail@plt+0x1e10>
   13424:	sub	r2, r6, r2
   13428:	ldr	r3, [r4, #32]
   1342c:	cmp	r2, #79	; 0x4f
   13430:	mov	r1, r2
   13434:	ble	1344c <__assert_fail@plt+0x1ef4>
   13438:	sub	r1, r1, #80	; 0x50
   1343c:	ldr	r3, [r3, #652]	; 0x28c
   13440:	cmp	r1, #79	; 0x4f
   13444:	bgt	13438 <__assert_fail@plt+0x1ee0>
   13448:	mov	r2, r1
   1344c:	add	r3, r3, r2, lsl #3
   13450:	add	r0, r3, #12
   13454:	b	133fc <__assert_fail@plt+0x1ea4>
   13458:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1345c:	movw	r4, #61896	; 0xf1c8
   13460:	movt	r4, #3
   13464:	ldr	r5, [r4, #196]	; 0xc4
   13468:	strd	r6, [sp, #8]
   1346c:	str	r8, [sp, #16]
   13470:	str	lr, [sp, #20]
   13474:	cmp	r5, #0
   13478:	beq	134b0 <__assert_fail@plt+0x1f58>
   1347c:	ldr	r0, [r5, #32]
   13480:	cmp	r0, #0
   13484:	beq	13498 <__assert_fail@plt+0x1f40>
   13488:	ldr	r6, [r0, #652]	; 0x28c
   1348c:	bl	13e1c <__assert_fail@plt+0x28c4>
   13490:	subs	r0, r6, #0
   13494:	bne	13488 <__assert_fail@plt+0x1f30>
   13498:	ldr	r0, [r5, #28]
   1349c:	bl	13e1c <__assert_fail@plt+0x28c4>
   134a0:	mov	r0, r5
   134a4:	bl	13e1c <__assert_fail@plt+0x28c4>
   134a8:	mov	r3, #0
   134ac:	str	r3, [r4, #196]	; 0xc4
   134b0:	ldr	r3, [r4, #192]	; 0xc0
   134b4:	cmp	r3, #0
   134b8:	beq	13518 <__assert_fail@plt+0x1fc0>
   134bc:	ldrd	r6, [r3, #16]
   134c0:	ldrd	r0, [r4, #200]	; 0xc8
   134c4:	cmp	r0, r6
   134c8:	sbcs	r2, r1, r7
   134cc:	ldr	r1, [r3, #36]	; 0x24
   134d0:	strdlt	r6, [r4, #200]	; 0xc8
   134d4:	adds	r0, r6, #1
   134d8:	adc	r2, r7, #0
   134dc:	ldr	ip, [r1]
   134e0:	str	r0, [r3, #16]
   134e4:	str	r2, [r3, #20]
   134e8:	ldr	r2, [r1, #8]
   134ec:	add	r2, r2, #1
   134f0:	add	r0, r1, r2, lsl #3
   134f4:	cmp	r2, ip
   134f8:	str	r2, [r1, #8]
   134fc:	add	r0, r0, #4
   13500:	beq	13538 <__assert_fail@plt+0x1fe0>
   13504:	ldrd	r4, [sp]
   13508:	ldrd	r6, [sp, #8]
   1350c:	ldr	r8, [sp, #16]
   13510:	add	sp, sp, #20
   13514:	pop	{pc}		; (ldr pc, [sp], #4)
   13518:	ldrb	r3, [r4, #188]	; 0xbc
   1351c:	cmp	r3, #0
   13520:	bne	13560 <__assert_fail@plt+0x2008>
   13524:	bl	12eec <__assert_fail@plt+0x1994>
   13528:	cmp	r0, #0
   1352c:	beq	13560 <__assert_fail@plt+0x2008>
   13530:	ldr	r3, [r4, #192]	; 0xc0
   13534:	b	134bc <__assert_fail@plt+0x1f64>
   13538:	ldr	r2, [r1, #652]	; 0x28c
   1353c:	cmp	r2, #0
   13540:	str	r2, [r3, #36]	; 0x24
   13544:	beq	13554 <__assert_fail@plt+0x1ffc>
   13548:	ldr	r2, [r2]
   1354c:	cmp	r2, #0
   13550:	bne	13504 <__assert_fail@plt+0x1fac>
   13554:	ldr	r2, [r3, #40]	; 0x28
   13558:	strd	r2, [r4, #192]	; 0xc0
   1355c:	b	13504 <__assert_fail@plt+0x1fac>
   13560:	mov	r0, #0
   13564:	b	13504 <__assert_fail@plt+0x1fac>
   13568:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1356c:	movw	r5, #61896	; 0xf1c8
   13570:	movt	r5, #3
   13574:	strd	r6, [sp, #8]
   13578:	str	r8, [sp, #16]
   1357c:	str	lr, [sp, #20]
   13580:	b	135b4 <__assert_fail@plt+0x205c>
   13584:	mov	r1, #1
   13588:	ldr	r2, [r4]
   1358c:	ldr	r0, [r4, #4]
   13590:	ldr	r3, [r5, #148]	; 0x94
   13594:	bl	112ac <fwrite_unlocked@plt>
   13598:	ldr	r3, [r4]
   1359c:	cmp	r0, r3
   135a0:	bne	135d4 <__assert_fail@plt+0x207c>
   135a4:	ldrd	r2, [r5, #160]	; 0xa0
   135a8:	adds	r6, r2, r0
   135ac:	adc	r7, r3, r0, asr #31
   135b0:	strd	r6, [r5, #160]	; 0xa0
   135b4:	bl	13458 <__assert_fail@plt+0x1f00>
   135b8:	subs	r4, r0, #0
   135bc:	bne	13584 <__assert_fail@plt+0x202c>
   135c0:	ldrd	r4, [sp]
   135c4:	ldrd	r6, [sp, #8]
   135c8:	ldr	r8, [sp, #16]
   135cc:	add	sp, sp, #20
   135d0:	pop	{pc}		; (ldr pc, [sp], #4)
   135d4:	bl	1142c <__errno_location@plt>
   135d8:	ldr	r4, [r0]
   135dc:	mov	r2, #5
   135e0:	movw	r1, #55088	; 0xd730
   135e4:	movt	r1, #2
   135e8:	mov	r0, #0
   135ec:	bl	112d0 <dcgettext@plt>
   135f0:	mov	r6, r0
   135f4:	mov	r0, #4
   135f8:	ldr	r1, [r5, #152]	; 0x98
   135fc:	bl	16670 <__assert_fail@plt+0x5118>
   13600:	mov	r3, r0
   13604:	mov	r2, r6
   13608:	mov	r1, r4
   1360c:	mov	r0, #0
   13610:	bl	11384 <error@plt>
   13614:	mov	r3, #0
   13618:	str	r3, [r5, #148]	; 0x94
   1361c:	bl	12808 <__assert_fail@plt+0x12b0>
   13620:	movw	r4, #61880	; 0xf1b8
   13624:	movt	r4, #3
   13628:	str	r7, [sp, #-8]!
   1362c:	mov	sl, r0
   13630:	mov	r6, r2
   13634:	ldr	r8, [r4]
   13638:	mov	r2, #5
   1363c:	movw	r1, #55220	; 0xd7b4
   13640:	movt	r1, #2
   13644:	mov	r0, #0
   13648:	str	lr, [sp, #4]
   1364c:	sub	sp, sp, #32
   13650:	mov	r7, r3
   13654:	ldrb	r5, [sp, #40]	; 0x28
   13658:	bl	112d0 <dcgettext@plt>
   1365c:	movw	r1, #61896	; 0xf1c8
   13660:	movt	r1, #3
   13664:	mov	r9, r0
   13668:	ldr	r0, [sl]
   1366c:	movw	r3, #62144	; 0xf2c0
   13670:	movt	r3, #3
   13674:	ldr	r2, [r1, #208]	; 0xd0
   13678:	ldr	sl, [r3]
   1367c:	ldr	r0, [r2, r0, lsl #2]
   13680:	bl	1799c <__assert_fail@plt+0x6444>
   13684:	mov	r3, sl
   13688:	mov	r2, r9
   1368c:	str	r0, [sp]
   13690:	mov	r1, #1
   13694:	mov	r0, r8
   13698:	bl	1148c <__fprintf_chk@plt>
   1369c:	orrs	r3, r6, r7
   136a0:	beq	136f0 <__assert_fail@plt+0x2198>
   136a4:	ldr	r4, [r4]
   136a8:	mov	r2, #5
   136ac:	movw	r1, #55144	; 0xd768
   136b0:	movt	r1, #2
   136b4:	mov	r0, #0
   136b8:	bl	112d0 <dcgettext@plt>
   136bc:	mov	r8, r0
   136c0:	add	r2, sp, #8
   136c4:	mov	r1, r7
   136c8:	mov	r0, r6
   136cc:	bl	13f4c <__assert_fail@plt+0x29f4>
   136d0:	mov	r3, r0
   136d4:	mov	r2, r8
   136d8:	mov	r0, r4
   136dc:	mov	r1, #1
   136e0:	bl	1148c <__fprintf_chk@plt>
   136e4:	cmp	r5, #0
   136e8:	beq	13700 <__assert_fail@plt+0x21a8>
   136ec:	bl	12808 <__assert_fail@plt+0x12b0>
   136f0:	mov	r0, #10
   136f4:	ldr	r1, [r4]
   136f8:	bl	114ec <fputc@plt>
   136fc:	b	136e4 <__assert_fail@plt+0x218c>
   13700:	bl	13568 <__assert_fail@plt+0x2010>
   13704:	bl	12938 <__assert_fail@plt+0x13e0>
   13708:	b	136ec <__assert_fail@plt+0x2194>
   1370c:	subs	r4, r0, #0
   13710:	str	r7, [sp, #-8]!
   13714:	str	lr, [sp, #4]
   13718:	sub	sp, sp, #56	; 0x38
   1371c:	beq	13764 <__assert_fail@plt+0x220c>
   13720:	movw	r3, #61880	; 0xf1b8
   13724:	movt	r3, #3
   13728:	ldr	r5, [r3]
   1372c:	mov	r2, #5
   13730:	movw	r1, #55252	; 0xd7d4
   13734:	movt	r1, #2
   13738:	mov	r0, #0
   1373c:	bl	112d0 <dcgettext@plt>
   13740:	movw	r3, #62144	; 0xf2c0
   13744:	movt	r3, #3
   13748:	mov	r2, r0
   1374c:	mov	r1, #1
   13750:	ldr	r3, [r3]
   13754:	mov	r0, r5
   13758:	bl	1148c <__fprintf_chk@plt>
   1375c:	mov	r0, r4
   13760:	bl	11408 <exit@plt>
   13764:	mov	r2, #5
   13768:	movw	r1, #55292	; 0xd7fc
   1376c:	movt	r1, #2
   13770:	movw	r5, #61884	; 0xf1bc
   13774:	movt	r5, #3
   13778:	bl	112d0 <dcgettext@plt>
   1377c:	movw	r3, #62144	; 0xf2c0
   13780:	movt	r3, #3
   13784:	mov	r1, r0
   13788:	mov	r0, #1
   1378c:	ldr	r2, [r3]
   13790:	bl	11474 <__printf_chk@plt>
   13794:	mov	r2, #5
   13798:	movw	r1, #55332	; 0xd824
   1379c:	movt	r1, #2
   137a0:	mov	r0, r4
   137a4:	bl	112d0 <dcgettext@plt>
   137a8:	ldr	r1, [r5]
   137ac:	bl	111bc <fputs_unlocked@plt>
   137b0:	mov	r2, #5
   137b4:	movw	r1, #55468	; 0xd8ac
   137b8:	movt	r1, #2
   137bc:	mov	r0, r4
   137c0:	bl	112d0 <dcgettext@plt>
   137c4:	ldr	r1, [r5]
   137c8:	bl	111bc <fputs_unlocked@plt>
   137cc:	mov	r2, #5
   137d0:	movw	r1, #55504	; 0xd8d0
   137d4:	movt	r1, #2
   137d8:	mov	r0, r4
   137dc:	bl	112d0 <dcgettext@plt>
   137e0:	ldr	r1, [r5]
   137e4:	bl	111bc <fputs_unlocked@plt>
   137e8:	mov	r2, #5
   137ec:	movw	r1, #55580	; 0xd91c
   137f0:	movt	r1, #2
   137f4:	mov	r0, r4
   137f8:	bl	112d0 <dcgettext@plt>
   137fc:	ldr	r1, [r5]
   13800:	bl	111bc <fputs_unlocked@plt>
   13804:	mov	r2, #5
   13808:	movw	r1, #55768	; 0xd9d8
   1380c:	movt	r1, #2
   13810:	mov	r0, r4
   13814:	bl	112d0 <dcgettext@plt>
   13818:	ldr	r1, [r5]
   1381c:	bl	111bc <fputs_unlocked@plt>
   13820:	mov	r2, #5
   13824:	movw	r1, #55836	; 0xda1c
   13828:	movt	r1, #2
   1382c:	mov	r0, r4
   13830:	bl	112d0 <dcgettext@plt>
   13834:	ldr	r1, [r5]
   13838:	bl	111bc <fputs_unlocked@plt>
   1383c:	mov	r2, #5
   13840:	movw	r1, #56036	; 0xdae4
   13844:	movt	r1, #2
   13848:	mov	r0, r4
   1384c:	bl	112d0 <dcgettext@plt>
   13850:	ldr	r1, [r5]
   13854:	bl	111bc <fputs_unlocked@plt>
   13858:	mov	r2, #5
   1385c:	movw	r1, #56084	; 0xdb14
   13860:	movt	r1, #2
   13864:	mov	r0, r4
   13868:	bl	112d0 <dcgettext@plt>
   1386c:	ldr	r1, [r5]
   13870:	bl	111bc <fputs_unlocked@plt>
   13874:	mov	r2, #5
   13878:	movw	r1, #56140	; 0xdb4c
   1387c:	movt	r1, #2
   13880:	mov	r0, r4
   13884:	bl	112d0 <dcgettext@plt>
   13888:	ldr	r1, [r5]
   1388c:	bl	111bc <fputs_unlocked@plt>
   13890:	movw	r0, #54792	; 0xd608
   13894:	movt	r0, #2
   13898:	ldr	ip, [r0, #12]
   1389c:	ldrd	r2, [r0, #20]
   138a0:	ldr	r6, [r0, #16]
   138a4:	subs	r1, ip, #0
   138a8:	str	ip, [sp]
   138ac:	ldrd	r8, [r0, #28]
   138b0:	strd	r2, [sp, #8]
   138b4:	ldrd	r2, [r0, #36]	; 0x24
   138b8:	str	r6, [sp, #4]
   138bc:	ldrd	r6, [r0, #44]	; 0x2c
   138c0:	strd	r8, [sp, #16]
   138c4:	ldrd	r8, [r0, #52]	; 0x34
   138c8:	strd	r2, [sp, #24]
   138cc:	ldrd	r2, [r0, #60]	; 0x3c
   138d0:	strd	r6, [sp, #32]
   138d4:	movwne	r7, #55244	; 0xd7cc
   138d8:	mov	r6, sp
   138dc:	movtne	r7, #2
   138e0:	strd	r8, [sp, #40]	; 0x28
   138e4:	strd	r2, [sp, #48]	; 0x30
   138e8:	bne	139e0 <__assert_fail@plt+0x2488>
   138ec:	ldr	r6, [r6, #4]
   138f0:	movw	r1, #56580	; 0xdd04
   138f4:	movt	r1, #2
   138f8:	mov	r2, #5
   138fc:	cmp	r6, #0
   13900:	beq	139f4 <__assert_fail@plt+0x249c>
   13904:	mov	r0, #0
   13908:	bl	112d0 <dcgettext@plt>
   1390c:	mov	r1, r0
   13910:	movw	r3, #56604	; 0xdd1c
   13914:	movt	r3, #2
   13918:	movw	r2, #56644	; 0xdd44
   1391c:	movt	r2, #2
   13920:	mov	r0, #1
   13924:	bl	11474 <__printf_chk@plt>
   13928:	mov	r1, #0
   1392c:	mov	r0, #5
   13930:	bl	114bc <setlocale@plt>
   13934:	cmp	r0, #0
   13938:	movweq	r7, #55244	; 0xd7cc
   1393c:	movteq	r7, #2
   13940:	beq	13964 <__assert_fail@plt+0x240c>
   13944:	movw	r1, #56660	; 0xdd54
   13948:	movt	r1, #2
   1394c:	mov	r2, #3
   13950:	movw	r7, #55244	; 0xd7cc
   13954:	movt	r7, #2
   13958:	bl	11528 <strncmp@plt>
   1395c:	cmp	r0, #0
   13960:	bne	13aac <__assert_fail@plt+0x2554>
   13964:	mov	r2, #5
   13968:	movw	r1, #56736	; 0xdda0
   1396c:	movt	r1, #2
   13970:	mov	r0, #0
   13974:	bl	112d0 <dcgettext@plt>
   13978:	mov	r1, r0
   1397c:	movw	r3, #55244	; 0xd7cc
   13980:	movt	r3, #2
   13984:	movw	r2, #56604	; 0xdd1c
   13988:	movt	r2, #2
   1398c:	mov	r0, #1
   13990:	bl	11474 <__printf_chk@plt>
   13994:	mov	r2, #5
   13998:	movw	r1, #56764	; 0xddbc
   1399c:	movt	r1, #2
   139a0:	mov	r0, #0
   139a4:	bl	112d0 <dcgettext@plt>
   139a8:	movw	r2, #57700	; 0xe164
   139ac:	movt	r2, #2
   139b0:	cmp	r6, r7
   139b4:	movw	r3, #56080	; 0xdb10
   139b8:	movt	r3, #2
   139bc:	mov	r1, r0
   139c0:	moveq	r3, r2
   139c4:	mov	r2, r6
   139c8:	mov	r0, #1
   139cc:	bl	11474 <__printf_chk@plt>
   139d0:	b	1375c <__assert_fail@plt+0x2204>
   139d4:	ldr	r1, [r6, #8]!
   139d8:	cmp	r1, #0
   139dc:	beq	138ec <__assert_fail@plt+0x2394>
   139e0:	mov	r0, r7
   139e4:	bl	111f8 <strcmp@plt>
   139e8:	cmp	r0, #0
   139ec:	bne	139d4 <__assert_fail@plt+0x247c>
   139f0:	b	138ec <__assert_fail@plt+0x2394>
   139f4:	mov	r0, r6
   139f8:	bl	112d0 <dcgettext@plt>
   139fc:	mov	r1, r0
   13a00:	movw	r3, #56604	; 0xdd1c
   13a04:	movt	r3, #2
   13a08:	movw	r2, #56644	; 0xdd44
   13a0c:	movt	r2, #2
   13a10:	mov	r0, #1
   13a14:	bl	11474 <__printf_chk@plt>
   13a18:	mov	r1, r6
   13a1c:	mov	r0, #5
   13a20:	bl	114bc <setlocale@plt>
   13a24:	cmp	r0, #0
   13a28:	beq	13a44 <__assert_fail@plt+0x24ec>
   13a2c:	movw	r1, #56660	; 0xdd54
   13a30:	movt	r1, #2
   13a34:	mov	r2, #3
   13a38:	bl	11528 <strncmp@plt>
   13a3c:	cmp	r0, #0
   13a40:	bne	13aa0 <__assert_fail@plt+0x2548>
   13a44:	mov	r2, #5
   13a48:	movw	r1, #56736	; 0xdda0
   13a4c:	movt	r1, #2
   13a50:	mov	r0, #0
   13a54:	bl	112d0 <dcgettext@plt>
   13a58:	mov	r1, r0
   13a5c:	movw	r3, #55244	; 0xd7cc
   13a60:	movt	r3, #2
   13a64:	movw	r2, #56604	; 0xdd1c
   13a68:	movt	r2, #2
   13a6c:	mov	r0, #1
   13a70:	bl	11474 <__printf_chk@plt>
   13a74:	movw	r1, #56764	; 0xddbc
   13a78:	movt	r1, #2
   13a7c:	mov	r2, #5
   13a80:	mov	r0, #0
   13a84:	bl	112d0 <dcgettext@plt>
   13a88:	movw	r6, #55244	; 0xd7cc
   13a8c:	movt	r6, #2
   13a90:	movw	r3, #57700	; 0xe164
   13a94:	movt	r3, #2
   13a98:	mov	r1, r0
   13a9c:	b	139c4 <__assert_fail@plt+0x246c>
   13aa0:	movw	r7, #55244	; 0xd7cc
   13aa4:	movt	r7, #2
   13aa8:	mov	r6, r7
   13aac:	mov	r2, #5
   13ab0:	movw	r1, #56664	; 0xdd58
   13ab4:	movt	r1, #2
   13ab8:	mov	r0, #0
   13abc:	bl	112d0 <dcgettext@plt>
   13ac0:	ldr	r1, [r5]
   13ac4:	bl	111bc <fputs_unlocked@plt>
   13ac8:	b	13964 <__assert_fail@plt+0x240c>
   13acc:	movw	r3, #62136	; 0xf2b8
   13ad0:	movt	r3, #3
   13ad4:	str	r0, [r3]
   13ad8:	bx	lr
   13adc:	movw	r3, #62136	; 0xf2b8
   13ae0:	movt	r3, #3
   13ae4:	strb	r0, [r3, #4]
   13ae8:	bx	lr
   13aec:	movw	r3, #61884	; 0xf1bc
   13af0:	movt	r3, #3
   13af4:	strd	r4, [sp, #-16]!
   13af8:	ldr	r0, [r3]
   13afc:	str	r6, [sp, #8]
   13b00:	str	lr, [sp, #12]
   13b04:	sub	sp, sp, #8
   13b08:	bl	2cdec <__assert_fail@plt+0x1b894>
   13b0c:	cmp	r0, #0
   13b10:	beq	13b3c <__assert_fail@plt+0x25e4>
   13b14:	movw	r4, #62136	; 0xf2b8
   13b18:	movt	r4, #3
   13b1c:	ldrb	r6, [r4, #4]
   13b20:	bl	1142c <__errno_location@plt>
   13b24:	mov	r5, r0
   13b28:	cmp	r6, #0
   13b2c:	beq	13b68 <__assert_fail@plt+0x2610>
   13b30:	ldr	r3, [r0]
   13b34:	cmp	r3, #32
   13b38:	bne	13b68 <__assert_fail@plt+0x2610>
   13b3c:	movw	r3, #61880	; 0xf1b8
   13b40:	movt	r3, #3
   13b44:	ldr	r0, [r3]
   13b48:	bl	2cdec <__assert_fail@plt+0x1b894>
   13b4c:	cmp	r0, #0
   13b50:	bne	13bb0 <__assert_fail@plt+0x2658>
   13b54:	add	sp, sp, #8
   13b58:	ldrd	r4, [sp]
   13b5c:	ldr	r6, [sp, #8]
   13b60:	add	sp, sp, #12
   13b64:	pop	{pc}		; (ldr pc, [sp], #4)
   13b68:	movw	r1, #57932	; 0xe24c
   13b6c:	movt	r1, #2
   13b70:	mov	r2, #5
   13b74:	mov	r0, #0
   13b78:	bl	112d0 <dcgettext@plt>
   13b7c:	mov	r6, r0
   13b80:	ldr	r0, [r4]
   13b84:	cmp	r0, #0
   13b88:	beq	13bc0 <__assert_fail@plt+0x2668>
   13b8c:	ldr	r4, [r5]
   13b90:	bl	16e20 <__assert_fail@plt+0x58c8>
   13b94:	mov	r3, r0
   13b98:	movw	r2, #57944	; 0xe258
   13b9c:	movt	r2, #2
   13ba0:	mov	r0, #0
   13ba4:	str	r6, [sp]
   13ba8:	mov	r1, r4
   13bac:	bl	11384 <error@plt>
   13bb0:	movw	r3, #61796	; 0xf164
   13bb4:	movt	r3, #3
   13bb8:	ldr	r0, [r3]
   13bbc:	bl	11258 <_exit@plt>
   13bc0:	mov	r3, r6
   13bc4:	movw	r2, #57324	; 0xdfec
   13bc8:	movt	r2, #2
   13bcc:	ldr	r1, [r5]
   13bd0:	bl	11384 <error@plt>
   13bd4:	b	13bb0 <__assert_fail@plt+0x2658>
   13bd8:	strd	r4, [sp, #-12]!
   13bdc:	mov	r4, r0
   13be0:	str	lr, [sp, #8]
   13be4:	sub	sp, sp, #12
   13be8:	bl	11480 <fileno@plt>
   13bec:	cmp	r0, #0
   13bf0:	mov	r0, r4
   13bf4:	blt	13c78 <__assert_fail@plt+0x2720>
   13bf8:	bl	113c0 <__freading@plt>
   13bfc:	cmp	r0, #0
   13c00:	bne	13c44 <__assert_fail@plt+0x26ec>
   13c04:	mov	r0, r4
   13c08:	bl	13d10 <__assert_fail@plt+0x27b8>
   13c0c:	cmp	r0, #0
   13c10:	beq	13c74 <__assert_fail@plt+0x271c>
   13c14:	bl	1142c <__errno_location@plt>
   13c18:	mov	r5, r0
   13c1c:	mov	r0, r4
   13c20:	ldr	r4, [r5]
   13c24:	bl	11498 <fclose@plt>
   13c28:	cmp	r4, #0
   13c2c:	mvnne	r0, #0
   13c30:	strne	r4, [r5]
   13c34:	add	sp, sp, #12
   13c38:	ldrd	r4, [sp]
   13c3c:	add	sp, sp, #8
   13c40:	pop	{pc}		; (ldr pc, [sp], #4)
   13c44:	mov	r0, r4
   13c48:	bl	11480 <fileno@plt>
   13c4c:	mov	r1, #1
   13c50:	mov	r2, #0
   13c54:	mov	r3, #0
   13c58:	str	r1, [sp]
   13c5c:	bl	11348 <lseek64@plt>
   13c60:	mvn	r3, #0
   13c64:	mvn	r2, #0
   13c68:	cmp	r1, r3
   13c6c:	cmpeq	r0, r2
   13c70:	bne	13c04 <__assert_fail@plt+0x26ac>
   13c74:	mov	r0, r4
   13c78:	add	sp, sp, #12
   13c7c:	ldrd	r4, [sp]
   13c80:	ldr	lr, [sp, #8]
   13c84:	add	sp, sp, #12
   13c88:	b	11498 <fclose@plt>
   13c8c:	mov	ip, r1
   13c90:	mov	r1, r2
   13c94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13c98:	mov	r2, r3
   13c9c:	mov	r5, r0
   13ca0:	strd	r6, [sp, #8]
   13ca4:	mov	r0, ip
   13ca8:	str	r8, [sp, #16]
   13cac:	str	lr, [sp, #20]
   13cb0:	bl	11390 <open64@plt>
   13cb4:	sub	r3, r5, r0
   13cb8:	mov	r4, r0
   13cbc:	clz	r3, r3
   13cc0:	lsr	r3, r3, #5
   13cc4:	orrs	r3, r3, r0, lsr #31
   13cc8:	beq	13ce4 <__assert_fail@plt+0x278c>
   13ccc:	mov	r0, r4
   13cd0:	ldrd	r4, [sp]
   13cd4:	ldrd	r6, [sp, #8]
   13cd8:	ldr	r8, [sp, #16]
   13cdc:	add	sp, sp, #20
   13ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ce4:	mov	r1, r5
   13ce8:	bl	112e8 <dup2@plt>
   13cec:	mov	r7, r0
   13cf0:	bl	1142c <__errno_location@plt>
   13cf4:	mov	r5, r0
   13cf8:	mov	r0, r4
   13cfc:	ldr	r6, [r5]
   13d00:	mov	r4, r7
   13d04:	bl	11540 <close@plt>
   13d08:	str	r6, [r5]
   13d0c:	b	13ccc <__assert_fail@plt+0x2774>
   13d10:	str	r4, [sp, #-8]!
   13d14:	subs	r4, r0, #0
   13d18:	str	lr, [sp, #4]
   13d1c:	sub	sp, sp, #8
   13d20:	beq	13d3c <__assert_fail@plt+0x27e4>
   13d24:	bl	113c0 <__freading@plt>
   13d28:	cmp	r0, #0
   13d2c:	beq	13d3c <__assert_fail@plt+0x27e4>
   13d30:	ldr	r3, [r4]
   13d34:	tst	r3, #256	; 0x100
   13d38:	bne	13d54 <__assert_fail@plt+0x27fc>
   13d3c:	mov	r0, r4
   13d40:	add	sp, sp, #8
   13d44:	ldr	r4, [sp]
   13d48:	ldr	lr, [sp, #4]
   13d4c:	add	sp, sp, #8
   13d50:	b	1121c <fflush@plt>
   13d54:	mov	r1, #1
   13d58:	mov	r2, #0
   13d5c:	mov	r3, #0
   13d60:	mov	r0, r4
   13d64:	str	r1, [sp]
   13d68:	bl	13e7c <__assert_fail@plt+0x2924>
   13d6c:	b	13d3c <__assert_fail@plt+0x27e4>
   13d70:	strd	r4, [sp, #-16]!
   13d74:	mov	r5, r1
   13d78:	str	r6, [sp, #8]
   13d7c:	str	lr, [sp, #12]
   13d80:	bl	11504 <fopen64@plt>
   13d84:	subs	r4, r0, #0
   13d88:	beq	13d98 <__assert_fail@plt+0x2840>
   13d8c:	bl	11480 <fileno@plt>
   13d90:	cmp	r0, #2
   13d94:	bls	13dac <__assert_fail@plt+0x2854>
   13d98:	mov	r0, r4
   13d9c:	ldrd	r4, [sp]
   13da0:	ldr	r6, [sp, #8]
   13da4:	add	sp, sp, #12
   13da8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dac:	bl	29f50 <__assert_fail@plt+0x189f8>
   13db0:	subs	r6, r0, #0
   13db4:	blt	13dfc <__assert_fail@plt+0x28a4>
   13db8:	mov	r0, r4
   13dbc:	bl	13bd8 <__assert_fail@plt+0x2680>
   13dc0:	cmp	r0, #0
   13dc4:	bne	13ddc <__assert_fail@plt+0x2884>
   13dc8:	mov	r1, r5
   13dcc:	mov	r0, r6
   13dd0:	bl	111a4 <fdopen@plt>
   13dd4:	subs	r4, r0, #0
   13dd8:	bne	13d98 <__assert_fail@plt+0x2840>
   13ddc:	bl	1142c <__errno_location@plt>
   13de0:	mov	r5, r0
   13de4:	mov	r0, r6
   13de8:	ldr	r6, [r5]
   13dec:	mov	r4, #0
   13df0:	bl	11540 <close@plt>
   13df4:	str	r6, [r5]
   13df8:	b	13d98 <__assert_fail@plt+0x2840>
   13dfc:	bl	1142c <__errno_location@plt>
   13e00:	mov	r5, r0
   13e04:	mov	r0, r4
   13e08:	ldr	r6, [r5]
   13e0c:	mov	r4, #0
   13e10:	bl	13bd8 <__assert_fail@plt+0x2680>
   13e14:	str	r6, [r5]
   13e18:	b	13d98 <__assert_fail@plt+0x2840>
   13e1c:	strd	r4, [sp, #-12]!
   13e20:	mov	r5, r0
   13e24:	str	lr, [sp, #8]
   13e28:	sub	sp, sp, #12
   13e2c:	bl	1142c <__errno_location@plt>
   13e30:	mov	r4, r0
   13e34:	mov	r2, #0
   13e38:	ldr	r3, [r4]
   13e3c:	mov	r0, r5
   13e40:	str	r2, [r4]
   13e44:	str	r3, [sp]
   13e48:	str	r3, [sp, #4]
   13e4c:	bl	11240 <free@plt>
   13e50:	ldr	r3, [r4]
   13e54:	add	r2, sp, #8
   13e58:	clz	r3, r3
   13e5c:	lsr	r3, r3, #5
   13e60:	add	r3, r2, r3, lsl #2
   13e64:	ldr	r3, [r3, #-8]
   13e68:	str	r3, [r4]
   13e6c:	add	sp, sp, #12
   13e70:	ldrd	r4, [sp]
   13e74:	add	sp, sp, #8
   13e78:	pop	{pc}		; (ldr pc, [sp], #4)
   13e7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e80:	mov	r4, r0
   13e84:	ldr	ip, [r0, #4]
   13e88:	strd	r6, [sp, #8]
   13e8c:	str	lr, [sp, #20]
   13e90:	ldr	lr, [r0, #8]
   13e94:	str	r8, [sp, #16]
   13e98:	sub	sp, sp, #8
   13e9c:	ldr	r5, [sp, #32]
   13ea0:	cmp	lr, ip
   13ea4:	beq	13ecc <__assert_fail@plt+0x2974>
   13ea8:	mov	r0, r4
   13eac:	str	r5, [sp, #32]
   13eb0:	add	sp, sp, #8
   13eb4:	ldrd	r4, [sp]
   13eb8:	ldrd	r6, [sp, #8]
   13ebc:	ldr	r8, [sp, #16]
   13ec0:	ldr	lr, [sp, #20]
   13ec4:	add	sp, sp, #24
   13ec8:	b	114a4 <fseeko64@plt>
   13ecc:	ldr	ip, [r0, #16]
   13ed0:	ldr	lr, [r0, #20]
   13ed4:	cmp	lr, ip
   13ed8:	bne	13ea8 <__assert_fail@plt+0x2950>
   13edc:	ldr	r8, [r0, #36]	; 0x24
   13ee0:	cmp	r8, #0
   13ee4:	bne	13ea8 <__assert_fail@plt+0x2950>
   13ee8:	mov	r6, r2
   13eec:	mov	r7, r3
   13ef0:	bl	11480 <fileno@plt>
   13ef4:	mov	r2, r6
   13ef8:	mov	r3, r7
   13efc:	str	r5, [sp]
   13f00:	bl	11348 <lseek64@plt>
   13f04:	mvn	r3, #0
   13f08:	mvn	r2, #0
   13f0c:	cmp	r1, r3
   13f10:	cmpeq	r0, r2
   13f14:	beq	13f44 <__assert_fail@plt+0x29ec>
   13f18:	ldr	r3, [r4]
   13f1c:	strd	r0, [r4, #80]	; 0x50
   13f20:	bic	r3, r3, #16
   13f24:	str	r3, [r4]
   13f28:	mov	r0, r8
   13f2c:	add	sp, sp, #8
   13f30:	ldrd	r4, [sp]
   13f34:	ldrd	r6, [sp, #8]
   13f38:	ldr	r8, [sp, #16]
   13f3c:	add	sp, sp, #20
   13f40:	pop	{pc}		; (ldr pc, [sp], #4)
   13f44:	mvn	r8, #0
   13f48:	b	13f28 <__assert_fail@plt+0x29d0>
   13f4c:	mov	r3, #0
   13f50:	cmp	r0, #0
   13f54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13f58:	mov	r5, r1
   13f5c:	sbcs	r1, r1, #0
   13f60:	strd	r6, [sp, #8]
   13f64:	mov	r4, r0
   13f68:	add	r6, r2, #20
   13f6c:	str	r8, [sp, #16]
   13f70:	str	lr, [sp, #20]
   13f74:	strb	r3, [r2, #20]
   13f78:	blt	13fd8 <__assert_fail@plt+0x2a80>
   13f7c:	mov	r0, r4
   13f80:	mov	r1, r5
   13f84:	mov	r2, #10
   13f88:	mov	r3, #0
   13f8c:	bl	2d338 <__assert_fail@plt+0x1bde0>
   13f90:	add	ip, r2, #48	; 0x30
   13f94:	mov	r0, r4
   13f98:	mov	r1, r5
   13f9c:	mov	r3, #0
   13fa0:	mov	r2, #10
   13fa4:	strb	ip, [r6, #-1]!
   13fa8:	bl	2d338 <__assert_fail@plt+0x1bde0>
   13fac:	mov	r4, r0
   13fb0:	mov	r5, r1
   13fb4:	orrs	r3, r4, r5
   13fb8:	bne	13f7c <__assert_fail@plt+0x2a24>
   13fbc:	mov	r0, r6
   13fc0:	ldrd	r4, [sp]
   13fc4:	ldrd	r6, [sp, #8]
   13fc8:	ldr	r8, [sp, #16]
   13fcc:	add	sp, sp, #20
   13fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fd4:	mov	r6, r7
   13fd8:	mov	r0, r4
   13fdc:	mov	r1, r5
   13fe0:	mov	r2, #10
   13fe4:	mov	r3, #0
   13fe8:	bl	2d338 <__assert_fail@plt+0x1bde0>
   13fec:	rsb	ip, r2, #48	; 0x30
   13ff0:	mov	r0, r4
   13ff4:	mov	r1, r5
   13ff8:	mov	r3, #0
   13ffc:	mov	r2, #10
   14000:	strb	ip, [r6, #-1]
   14004:	sub	r7, r6, #1
   14008:	bl	2d338 <__assert_fail@plt+0x1bde0>
   1400c:	mov	r4, r0
   14010:	mov	r5, r1
   14014:	orrs	r3, r4, r5
   14018:	bne	13fd4 <__assert_fail@plt+0x2a7c>
   1401c:	mov	r3, #45	; 0x2d
   14020:	sub	r6, r6, #2
   14024:	strb	r3, [r7, #-1]
   14028:	b	13fbc <__assert_fail@plt+0x2a64>
   1402c:	strd	r4, [sp, #-16]!
   14030:	subs	r4, r0, #0
   14034:	str	r6, [sp, #8]
   14038:	str	lr, [sp, #12]
   1403c:	beq	140d4 <__assert_fail@plt+0x2b7c>
   14040:	mov	r1, #47	; 0x2f
   14044:	bl	114d4 <strrchr@plt>
   14048:	subs	r5, r0, #0
   1404c:	beq	140ac <__assert_fail@plt+0x2b54>
   14050:	add	r6, r5, #1
   14054:	sub	r3, r6, r4
   14058:	cmp	r3, #6
   1405c:	ble	140ac <__assert_fail@plt+0x2b54>
   14060:	movw	r1, #58008	; 0xe298
   14064:	movt	r1, #2
   14068:	mov	r2, #7
   1406c:	sub	r0, r5, #6
   14070:	bl	11528 <strncmp@plt>
   14074:	cmp	r0, #0
   14078:	bne	140ac <__assert_fail@plt+0x2b54>
   1407c:	movw	r1, #58016	; 0xe2a0
   14080:	movt	r1, #2
   14084:	mov	r2, #3
   14088:	mov	r0, r6
   1408c:	bl	11528 <strncmp@plt>
   14090:	cmp	r0, #0
   14094:	movne	r4, r6
   14098:	bne	140ac <__assert_fail@plt+0x2b54>
   1409c:	add	r4, r5, #4
   140a0:	movw	r3, #61864	; 0xf1a8
   140a4:	movt	r3, #3
   140a8:	str	r4, [r3]
   140ac:	movw	r2, #62144	; 0xf2c0
   140b0:	movt	r2, #3
   140b4:	ldr	r6, [sp, #8]
   140b8:	movw	r3, #61868	; 0xf1ac
   140bc:	movt	r3, #3
   140c0:	str	r4, [r2]
   140c4:	str	r4, [r3]
   140c8:	ldrd	r4, [sp]
   140cc:	add	sp, sp, #12
   140d0:	pop	{pc}		; (ldr pc, [sp], #4)
   140d4:	movw	r3, #61880	; 0xf1b8
   140d8:	movt	r3, #3
   140dc:	movw	r0, #57952	; 0xe260
   140e0:	movt	r0, #2
   140e4:	ldr	r3, [r3]
   140e8:	mov	r2, #55	; 0x37
   140ec:	mov	r1, #1
   140f0:	bl	1133c <fwrite@plt>
   140f4:	bl	11534 <abort@plt>
   140f8:	mov	r2, #5
   140fc:	strd	r4, [sp, #-16]!
   14100:	mov	r5, r0
   14104:	str	r6, [sp, #8]
   14108:	mov	r6, r1
   1410c:	mov	r1, r0
   14110:	mov	r0, #0
   14114:	str	lr, [sp, #12]
   14118:	bl	112d0 <dcgettext@plt>
   1411c:	cmp	r5, r0
   14120:	mov	r4, r0
   14124:	beq	1413c <__assert_fail@plt+0x2be4>
   14128:	mov	r0, r4
   1412c:	ldrd	r4, [sp]
   14130:	ldr	r6, [sp, #8]
   14134:	add	sp, sp, #12
   14138:	pop	{pc}		; (ldr pc, [sp], #4)
   1413c:	bl	2d128 <__assert_fail@plt+0x1bbd0>
   14140:	ldrb	r3, [r0]
   14144:	bic	r3, r3, #32
   14148:	cmp	r3, #85	; 0x55
   1414c:	bne	141b4 <__assert_fail@plt+0x2c5c>
   14150:	ldrb	r3, [r0, #1]
   14154:	bic	r3, r3, #32
   14158:	cmp	r3, #84	; 0x54
   1415c:	bne	14234 <__assert_fail@plt+0x2cdc>
   14160:	ldrb	r3, [r0, #2]
   14164:	bic	r3, r3, #32
   14168:	cmp	r3, #70	; 0x46
   1416c:	bne	14234 <__assert_fail@plt+0x2cdc>
   14170:	ldrb	r3, [r0, #3]
   14174:	cmp	r3, #45	; 0x2d
   14178:	bne	14234 <__assert_fail@plt+0x2cdc>
   1417c:	ldrb	r3, [r0, #4]
   14180:	cmp	r3, #56	; 0x38
   14184:	bne	14234 <__assert_fail@plt+0x2cdc>
   14188:	ldrb	r3, [r0, #5]
   1418c:	cmp	r3, #0
   14190:	bne	14234 <__assert_fail@plt+0x2cdc>
   14194:	ldrb	r2, [r4]
   14198:	movw	r3, #58108	; 0xe2fc
   1419c:	movt	r3, #2
   141a0:	movw	r4, #58120	; 0xe308
   141a4:	movt	r4, #2
   141a8:	cmp	r2, #96	; 0x60
   141ac:	movne	r4, r3
   141b0:	b	14128 <__assert_fail@plt+0x2bd0>
   141b4:	cmp	r3, #71	; 0x47
   141b8:	bne	14234 <__assert_fail@plt+0x2cdc>
   141bc:	ldrb	r3, [r0, #1]
   141c0:	bic	r3, r3, #32
   141c4:	cmp	r3, #66	; 0x42
   141c8:	bne	14234 <__assert_fail@plt+0x2cdc>
   141cc:	ldrb	r3, [r0, #2]
   141d0:	cmp	r3, #49	; 0x31
   141d4:	bne	14234 <__assert_fail@plt+0x2cdc>
   141d8:	ldrb	r3, [r0, #3]
   141dc:	cmp	r3, #56	; 0x38
   141e0:	bne	14234 <__assert_fail@plt+0x2cdc>
   141e4:	ldrb	r3, [r0, #4]
   141e8:	cmp	r3, #48	; 0x30
   141ec:	bne	14234 <__assert_fail@plt+0x2cdc>
   141f0:	ldrb	r3, [r0, #5]
   141f4:	cmp	r3, #51	; 0x33
   141f8:	bne	14234 <__assert_fail@plt+0x2cdc>
   141fc:	ldrb	r3, [r0, #6]
   14200:	cmp	r3, #48	; 0x30
   14204:	bne	14234 <__assert_fail@plt+0x2cdc>
   14208:	ldrb	r3, [r0, #7]
   1420c:	cmp	r3, #0
   14210:	bne	14234 <__assert_fail@plt+0x2cdc>
   14214:	ldrb	r2, [r4]
   14218:	movw	r3, #58112	; 0xe300
   1421c:	movt	r3, #2
   14220:	movw	r4, #58116	; 0xe304
   14224:	movt	r4, #2
   14228:	cmp	r2, #96	; 0x60
   1422c:	movne	r4, r3
   14230:	b	14128 <__assert_fail@plt+0x2bd0>
   14234:	movw	r3, #57632	; 0xe120
   14238:	movt	r3, #2
   1423c:	cmp	r6, #9
   14240:	movw	r4, #58104	; 0xe2f8
   14244:	movt	r4, #2
   14248:	movne	r4, r3
   1424c:	b	14128 <__assert_fail@plt+0x2bd0>
   14250:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14254:	strd	r6, [sp, #8]
   14258:	strd	r8, [sp, #16]
   1425c:	mov	r8, r3
   14260:	strd	sl, [sp, #24]
   14264:	mov	fp, r0
   14268:	mov	sl, r1
   1426c:	str	lr, [sp, #32]
   14270:	sub	sp, sp, #140	; 0x8c
   14274:	ldr	r3, [sp, #180]	; 0xb4
   14278:	str	r2, [sp, #28]
   1427c:	and	r4, r3, #2
   14280:	ubfx	r3, r3, #1, #1
   14284:	str	r3, [sp, #44]	; 0x2c
   14288:	bl	11354 <__ctype_get_mb_cur_max@plt>
   1428c:	ldr	r3, [sp, #176]	; 0xb0
   14290:	str	r0, [sp, #76]	; 0x4c
   14294:	cmp	r3, #10
   14298:	ldrls	pc, [pc, r3, lsl #2]
   1429c:	b	15c38 <__assert_fail@plt+0x46e0>
   142a0:	andeq	r4, r1, r0, lsr #14
   142a4:	andeq	r4, r1, ip, lsr r8
   142a8:			; <UNDEFINED> instruction: 0x00014db8
   142ac:	andeq	r4, r1, r8, lsr #17
   142b0:	andeq	r4, r1, r8, lsr #12
   142b4:	andeq	r4, r1, r4, lsr #13
   142b8:	andeq	r4, r1, ip, ror r7
   142bc:	andeq	r4, r1, r4, ror #15
   142c0:	andeq	r4, r1, ip, asr #5
   142c4:	andeq	r4, r1, ip, asr #5
   142c8:	andeq	r4, r1, ip, asr #5
   142cc:	ldr	r3, [sp, #176]	; 0xb0
   142d0:	cmp	r3, #10
   142d4:	beq	14300 <__assert_fail@plt+0x2da8>
   142d8:	mov	r1, r3
   142dc:	movw	r0, #58124	; 0xe30c
   142e0:	movt	r0, #2
   142e4:	bl	140f8 <__assert_fail@plt+0x2ba0>
   142e8:	str	r0, [sp, #188]	; 0xbc
   142ec:	movw	r0, #57632	; 0xe120
   142f0:	movt	r0, #2
   142f4:	ldr	r1, [sp, #176]	; 0xb0
   142f8:	bl	140f8 <__assert_fail@plt+0x2ba0>
   142fc:	str	r0, [sp, #192]	; 0xc0
   14300:	cmp	r4, #0
   14304:	movne	r4, #0
   14308:	beq	159c4 <__assert_fail@plt+0x446c>
   1430c:	mov	r5, #0
   14310:	ldr	r0, [sp, #192]	; 0xc0
   14314:	mov	r9, r5
   14318:	str	r5, [sp, #64]	; 0x40
   1431c:	bl	11414 <strlen@plt>
   14320:	mov	r3, #1
   14324:	ldr	r2, [sp, #44]	; 0x2c
   14328:	cmp	r0, r5
   1432c:	moveq	r2, r5
   14330:	str	r3, [sp, #32]
   14334:	str	r3, [sp, #48]	; 0x30
   14338:	str	r5, [sp, #52]	; 0x34
   1433c:	str	r3, [sp, #60]	; 0x3c
   14340:	ldr	r3, [sp, #180]	; 0xb4
   14344:	str	r0, [sp, #56]	; 0x38
   14348:	str	r5, [sp, #68]	; 0x44
   1434c:	str	r5, [sp, #80]	; 0x50
   14350:	str	r5, [sp, #84]	; 0x54
   14354:	and	r3, r3, #1
   14358:	str	r2, [sp, #88]	; 0x58
   1435c:	str	r3, [sp, #92]	; 0x5c
   14360:	ldr	r3, [sp, #180]	; 0xb4
   14364:	and	r3, r3, #4
   14368:	str	r3, [sp, #96]	; 0x60
   1436c:	ldr	r3, [sp, #192]	; 0xc0
   14370:	str	r3, [sp, #72]	; 0x48
   14374:	mov	r3, fp
   14378:	mov	r7, #0
   1437c:	mov	fp, r9
   14380:	mov	r9, r3
   14384:	cmn	r8, #1
   14388:	beq	1498c <__assert_fail@plt+0x3434>
   1438c:	subs	r6, r8, r7
   14390:	movne	r6, #1
   14394:	cmp	r6, #0
   14398:	beq	149a4 <__assert_fail@plt+0x344c>
   1439c:	ldr	r0, [sp, #28]
   143a0:	ldr	r3, [sp, #48]	; 0x30
   143a4:	cmp	r3, #0
   143a8:	add	r3, r0, r7
   143ac:	str	r3, [sp, #36]	; 0x24
   143b0:	beq	14e30 <__assert_fail@plt+0x38d8>
   143b4:	ldr	r2, [sp, #56]	; 0x38
   143b8:	cmp	r2, #0
   143bc:	beq	15330 <__assert_fail@plt+0x3dd8>
   143c0:	cmp	r2, #1
   143c4:	mov	r3, r2
   143c8:	movls	r3, #0
   143cc:	movhi	r3, #1
   143d0:	cmn	r8, #1
   143d4:	add	r5, r7, r2
   143d8:	movne	r3, #0
   143dc:	cmp	r3, #0
   143e0:	beq	143ec <__assert_fail@plt+0x2e94>
   143e4:	bl	11414 <strlen@plt>
   143e8:	mov	r8, r0
   143ec:	cmp	r5, r8
   143f0:	bhi	15330 <__assert_fail@plt+0x3dd8>
   143f4:	ldr	r0, [sp, #36]	; 0x24
   143f8:	ldr	r2, [sp, #56]	; 0x38
   143fc:	ldr	r1, [sp, #72]	; 0x48
   14400:	bl	112b8 <memcmp@plt>
   14404:	cmp	r0, #0
   14408:	bne	15330 <__assert_fail@plt+0x3dd8>
   1440c:	ldr	r3, [sp, #44]	; 0x2c
   14410:	cmp	r3, #0
   14414:	bne	15adc <__assert_fail@plt+0x4584>
   14418:	ldr	r3, [sp, #36]	; 0x24
   1441c:	ldrb	r5, [r3]
   14420:	cmp	r5, #126	; 0x7e
   14424:	ldrls	pc, [pc, r5, lsl #2]
   14428:	b	158c4 <__assert_fail@plt+0x436c>
   1442c:	andeq	r4, r1, r0, lsl #22
   14430:	andeq	r5, r1, r4, asr #17
   14434:	andeq	r5, r1, r4, asr #17
   14438:	andeq	r5, r1, r4, asr #17
   1443c:	andeq	r5, r1, r4, asr #17
   14440:	andeq	r5, r1, r4, asr #17
   14444:	andeq	r5, r1, r4, asr #17
   14448:	andeq	r4, r1, r8, asr sl
   1444c:	andeq	r4, r1, r0, asr sl
   14450:	andeq	r4, r1, r0, ror #20
   14454:	andeq	r4, r1, r4, ror #23
   14458:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1445c:	strdeq	r4, [r1], -ip
   14460:			; <UNDEFINED> instruction: 0x00014bb0
   14464:	andeq	r5, r1, r4, asr #17
   14468:	andeq	r5, r1, r4, asr #17
   1446c:	andeq	r5, r1, r4, asr #17
   14470:	andeq	r5, r1, r4, asr #17
   14474:	andeq	r5, r1, r4, asr #17
   14478:	andeq	r5, r1, r4, asr #17
   1447c:	andeq	r5, r1, r4, asr #17
   14480:	andeq	r5, r1, r4, asr #17
   14484:	andeq	r5, r1, r4, asr #17
   14488:	andeq	r5, r1, r4, asr #17
   1448c:	andeq	r5, r1, r4, asr #17
   14490:	andeq	r5, r1, r4, asr #17
   14494:	andeq	r5, r1, r4, asr #17
   14498:	andeq	r5, r1, r4, asr #17
   1449c:	andeq	r5, r1, r4, asr #17
   144a0:	andeq	r5, r1, r4, asr #17
   144a4:	andeq	r5, r1, r4, asr #17
   144a8:	andeq	r5, r1, r4, asr #17
   144ac:	andeq	r4, r1, ip, asr ip
   144b0:	andeq	r4, r1, r0, asr ip
   144b4:	andeq	r4, r1, r0, asr ip
   144b8:	andeq	r4, r1, r4, asr #24
   144bc:	andeq	r4, r1, r0, asr ip
   144c0:	andeq	r4, r1, r8, lsr #26
   144c4:	andeq	r4, r1, r0, asr ip
   144c8:	muleq	r1, r8, sp
   144cc:	andeq	r4, r1, r0, asr ip
   144d0:	andeq	r4, r1, r0, asr ip
   144d4:	andeq	r4, r1, r0, asr ip
   144d8:	andeq	r4, r1, r8, lsr #26
   144dc:	andeq	r4, r1, r8, lsr #26
   144e0:	andeq	r4, r1, r8, lsr #26
   144e4:	andeq	r4, r1, r8, lsr #26
   144e8:	andeq	r4, r1, r8, lsr #26
   144ec:	andeq	r4, r1, r8, lsr #26
   144f0:	andeq	r4, r1, r8, lsr #26
   144f4:	andeq	r4, r1, r8, lsr #26
   144f8:	andeq	r4, r1, r8, lsr #26
   144fc:	andeq	r4, r1, r8, lsr #26
   14500:	andeq	r4, r1, r8, lsr #26
   14504:	andeq	r4, r1, r8, lsr #26
   14508:	andeq	r4, r1, r8, lsr #26
   1450c:	andeq	r4, r1, r8, lsr #26
   14510:	andeq	r4, r1, r8, lsr #26
   14514:	andeq	r4, r1, r8, lsr #26
   14518:	andeq	r4, r1, r0, asr ip
   1451c:	andeq	r4, r1, r0, asr ip
   14520:	andeq	r4, r1, r0, asr ip
   14524:	andeq	r4, r1, r0, asr ip
   14528:	andeq	r4, r1, r8, asr #26
   1452c:	andeq	r5, r1, r4, asr #17
   14530:	andeq	r4, r1, r8, lsr #26
   14534:	andeq	r4, r1, r8, lsr #26
   14538:	andeq	r4, r1, r8, lsr #26
   1453c:	andeq	r4, r1, r8, lsr #26
   14540:	andeq	r4, r1, r8, lsr #26
   14544:	andeq	r4, r1, r8, lsr #26
   14548:	andeq	r4, r1, r8, lsr #26
   1454c:	andeq	r4, r1, r8, lsr #26
   14550:	andeq	r4, r1, r8, lsr #26
   14554:	andeq	r4, r1, r8, lsr #26
   14558:	andeq	r4, r1, r8, lsr #26
   1455c:	andeq	r4, r1, r8, lsr #26
   14560:	andeq	r4, r1, r8, lsr #26
   14564:	andeq	r4, r1, r8, lsr #26
   14568:	andeq	r4, r1, r8, lsr #26
   1456c:	andeq	r4, r1, r8, lsr #26
   14570:	andeq	r4, r1, r8, lsr #26
   14574:	andeq	r4, r1, r8, lsr #26
   14578:	andeq	r4, r1, r8, lsr #26
   1457c:	andeq	r4, r1, r8, lsr #26
   14580:	andeq	r4, r1, r8, lsr #26
   14584:	andeq	r4, r1, r8, lsr #26
   14588:	andeq	r4, r1, r8, lsr #26
   1458c:	andeq	r4, r1, r8, lsr #26
   14590:	andeq	r4, r1, r8, lsr #26
   14594:	andeq	r4, r1, r8, lsr #26
   14598:	andeq	r4, r1, r0, asr ip
   1459c:	andeq	r4, r1, ip, ror #25
   145a0:	andeq	r4, r1, r8, lsr #26
   145a4:	andeq	r4, r1, r0, asr ip
   145a8:	andeq	r4, r1, r8, lsr #26
   145ac:	andeq	r4, r1, r0, asr ip
   145b0:	andeq	r4, r1, r8, lsr #26
   145b4:	andeq	r4, r1, r8, lsr #26
   145b8:	andeq	r4, r1, r8, lsr #26
   145bc:	andeq	r4, r1, r8, lsr #26
   145c0:	andeq	r4, r1, r8, lsr #26
   145c4:	andeq	r4, r1, r8, lsr #26
   145c8:	andeq	r4, r1, r8, lsr #26
   145cc:	andeq	r4, r1, r8, lsr #26
   145d0:	andeq	r4, r1, r8, lsr #26
   145d4:	andeq	r4, r1, r8, lsr #26
   145d8:	andeq	r4, r1, r8, lsr #26
   145dc:	andeq	r4, r1, r8, lsr #26
   145e0:	andeq	r4, r1, r8, lsr #26
   145e4:	andeq	r4, r1, r8, lsr #26
   145e8:	andeq	r4, r1, r8, lsr #26
   145ec:	andeq	r4, r1, r8, lsr #26
   145f0:	andeq	r4, r1, r8, lsr #26
   145f4:	andeq	r4, r1, r8, lsr #26
   145f8:	andeq	r4, r1, r8, lsr #26
   145fc:	andeq	r4, r1, r8, lsr #26
   14600:	andeq	r4, r1, r8, lsr #26
   14604:	andeq	r4, r1, r8, lsr #26
   14608:	andeq	r4, r1, r8, lsr #26
   1460c:	andeq	r4, r1, r8, lsr #26
   14610:	andeq	r4, r1, r8, lsr #26
   14614:	andeq	r4, r1, r8, lsr #26
   14618:	strdeq	r4, [r1], -r8
   1461c:	andeq	r4, r1, r0, asr ip
   14620:	strdeq	r4, [r1], -r8
   14624:	andeq	r4, r1, r4, asr #24
   14628:	ldr	r3, [sp, #180]	; 0xb4
   1462c:	cmp	r4, #0
   14630:	and	r3, r3, #1
   14634:	str	r3, [sp, #92]	; 0x5c
   14638:	ldr	r3, [sp, #180]	; 0xb4
   1463c:	and	r3, r3, #4
   14640:	str	r3, [sp, #96]	; 0x60
   14644:	moveq	r3, #1
   14648:	streq	r3, [sp, #60]	; 0x3c
   1464c:	beq	14ddc <__assert_fail@plt+0x3884>
   14650:	mov	r3, #0
   14654:	mov	r2, #1
   14658:	mov	r4, r3
   1465c:	mov	r9, r3
   14660:	str	r2, [sp, #32]
   14664:	str	r2, [sp, #44]	; 0x2c
   14668:	str	r3, [sp, #48]	; 0x30
   1466c:	str	r2, [sp, #52]	; 0x34
   14670:	str	r2, [sp, #56]	; 0x38
   14674:	str	r3, [sp, #60]	; 0x3c
   14678:	str	r2, [sp, #64]	; 0x40
   1467c:	str	r2, [sp, #68]	; 0x44
   14680:	str	r3, [sp, #80]	; 0x50
   14684:	str	r3, [sp, #84]	; 0x54
   14688:	str	r3, [sp, #88]	; 0x58
   1468c:	movw	r3, #57632	; 0xe120
   14690:	movt	r3, #2
   14694:	str	r3, [sp, #72]	; 0x48
   14698:	mov	r3, #2
   1469c:	str	r3, [sp, #176]	; 0xb0
   146a0:	b	14374 <__assert_fail@plt+0x2e1c>
   146a4:	ldr	r3, [sp, #180]	; 0xb4
   146a8:	cmp	r4, #0
   146ac:	and	r3, r3, #1
   146b0:	str	r3, [sp, #92]	; 0x5c
   146b4:	ldr	r3, [sp, #180]	; 0xb4
   146b8:	and	r3, r3, #4
   146bc:	str	r3, [sp, #96]	; 0x60
   146c0:	bne	15a94 <__assert_fail@plt+0x453c>
   146c4:	cmp	sl, #0
   146c8:	beq	15840 <__assert_fail@plt+0x42e8>
   146cc:	mov	r3, #34	; 0x22
   146d0:	mov	r2, r4
   146d4:	mov	r1, #1
   146d8:	mov	r9, r2
   146dc:	strb	r3, [fp]
   146e0:	movw	r3, #58104	; 0xe2f8
   146e4:	movt	r3, #2
   146e8:	mov	r4, r1
   146ec:	str	r1, [sp, #32]
   146f0:	str	r2, [sp, #44]	; 0x2c
   146f4:	str	r1, [sp, #48]	; 0x30
   146f8:	str	r2, [sp, #52]	; 0x34
   146fc:	str	r1, [sp, #56]	; 0x38
   14700:	str	r1, [sp, #60]	; 0x3c
   14704:	str	r2, [sp, #64]	; 0x40
   14708:	str	r2, [sp, #68]	; 0x44
   1470c:	str	r3, [sp, #72]	; 0x48
   14710:	str	r2, [sp, #80]	; 0x50
   14714:	str	r2, [sp, #84]	; 0x54
   14718:	str	r2, [sp, #88]	; 0x58
   1471c:	b	14374 <__assert_fail@plt+0x2e1c>
   14720:	mov	r3, #0
   14724:	mov	r2, #1
   14728:	mov	r9, r3
   1472c:	str	r2, [sp, #32]
   14730:	str	r3, [sp, #44]	; 0x2c
   14734:	str	r3, [sp, #48]	; 0x30
   14738:	str	r3, [sp, #52]	; 0x34
   1473c:	str	r3, [sp, #60]	; 0x3c
   14740:	strd	r2, [sp, #64]	; 0x40
   14744:	str	r3, [sp, #72]	; 0x48
   14748:	str	r3, [sp, #80]	; 0x50
   1474c:	str	r3, [sp, #88]	; 0x58
   14750:	ldr	r3, [sp, #180]	; 0xb4
   14754:	and	r3, r3, r2
   14758:	str	r3, [sp, #92]	; 0x5c
   1475c:	ldr	r3, [sp, #180]	; 0xb4
   14760:	and	r3, r3, #4
   14764:	str	r3, [sp, #96]	; 0x60
   14768:	ldr	r3, [sp, #176]	; 0xb0
   1476c:	mov	r4, r3
   14770:	str	r3, [sp, #56]	; 0x38
   14774:	str	r3, [sp, #84]	; 0x54
   14778:	b	14374 <__assert_fail@plt+0x2e1c>
   1477c:	mov	r3, #1
   14780:	mov	r4, #0
   14784:	mov	r9, r4
   14788:	str	r3, [sp, #32]
   1478c:	str	r3, [sp, #44]	; 0x2c
   14790:	str	r3, [sp, #48]	; 0x30
   14794:	str	r4, [sp, #52]	; 0x34
   14798:	str	r3, [sp, #56]	; 0x38
   1479c:	str	r3, [sp, #60]	; 0x3c
   147a0:	str	r3, [sp, #88]	; 0x58
   147a4:	movw	r3, #58104	; 0xe2f8
   147a8:	movt	r3, #2
   147ac:	str	r4, [sp, #64]	; 0x40
   147b0:	str	r4, [sp, #68]	; 0x44
   147b4:	str	r3, [sp, #72]	; 0x48
   147b8:	ldr	r3, [sp, #180]	; 0xb4
   147bc:	str	r4, [sp, #80]	; 0x50
   147c0:	str	r4, [sp, #84]	; 0x54
   147c4:	and	r3, r3, #1
   147c8:	str	r3, [sp, #92]	; 0x5c
   147cc:	ldr	r3, [sp, #180]	; 0xb4
   147d0:	and	r3, r3, #4
   147d4:	str	r3, [sp, #96]	; 0x60
   147d8:	mov	r3, #5
   147dc:	str	r3, [sp, #176]	; 0xb0
   147e0:	b	14374 <__assert_fail@plt+0x2e1c>
   147e4:	mov	r3, #1
   147e8:	mov	r4, #0
   147ec:	mov	r9, r4
   147f0:	str	r3, [sp, #32]
   147f4:	str	r4, [sp, #44]	; 0x2c
   147f8:	str	r3, [sp, #48]	; 0x30
   147fc:	str	r3, [sp, #60]	; 0x3c
   14800:	ldr	r3, [sp, #180]	; 0xb4
   14804:	str	r4, [sp, #52]	; 0x34
   14808:	str	r4, [sp, #56]	; 0x38
   1480c:	str	r4, [sp, #64]	; 0x40
   14810:	str	r4, [sp, #68]	; 0x44
   14814:	and	r3, r3, #1
   14818:	str	r4, [sp, #72]	; 0x48
   1481c:	str	r4, [sp, #80]	; 0x50
   14820:	str	r4, [sp, #84]	; 0x54
   14824:	str	r3, [sp, #92]	; 0x5c
   14828:	ldr	r3, [sp, #180]	; 0xb4
   1482c:	str	r4, [sp, #88]	; 0x58
   14830:	and	r3, r3, #4
   14834:	str	r3, [sp, #96]	; 0x60
   14838:	b	14374 <__assert_fail@plt+0x2e1c>
   1483c:	mov	r3, #0
   14840:	mov	r2, #1
   14844:	ldr	r1, [sp, #176]	; 0xb0
   14848:	mov	r4, r3
   1484c:	mov	r9, r3
   14850:	movw	r3, #57632	; 0xe120
   14854:	movt	r3, #2
   14858:	str	r2, [sp, #32]
   1485c:	str	r2, [sp, #44]	; 0x2c
   14860:	str	r4, [sp, #48]	; 0x30
   14864:	strd	r2, [sp, #68]	; 0x44
   14868:	ldr	r3, [sp, #180]	; 0xb4
   1486c:	str	r2, [sp, #52]	; 0x34
   14870:	str	r1, [sp, #56]	; 0x38
   14874:	str	r4, [sp, #60]	; 0x3c
   14878:	str	r2, [sp, #64]	; 0x40
   1487c:	and	r3, r3, r2
   14880:	str	r4, [sp, #80]	; 0x50
   14884:	str	r4, [sp, #84]	; 0x54
   14888:	str	r4, [sp, #88]	; 0x58
   1488c:	str	r3, [sp, #92]	; 0x5c
   14890:	ldr	r3, [sp, #180]	; 0xb4
   14894:	and	r3, r3, #4
   14898:	str	r3, [sp, #96]	; 0x60
   1489c:	mov	r3, #2
   148a0:	str	r3, [sp, #176]	; 0xb0
   148a4:	b	14374 <__assert_fail@plt+0x2e1c>
   148a8:	mov	r3, #1
   148ac:	mov	r2, #0
   148b0:	mov	r4, r2
   148b4:	mov	r9, r2
   148b8:	str	r3, [sp, #32]
   148bc:	str	r3, [sp, #44]	; 0x2c
   148c0:	str	r2, [sp, #48]	; 0x30
   148c4:	str	r3, [sp, #52]	; 0x34
   148c8:	str	r3, [sp, #56]	; 0x38
   148cc:	str	r3, [sp, #60]	; 0x3c
   148d0:	str	r3, [sp, #64]	; 0x40
   148d4:	str	r3, [sp, #68]	; 0x44
   148d8:	str	r3, [sp, #88]	; 0x58
   148dc:	movw	r3, #57632	; 0xe120
   148e0:	movt	r3, #2
   148e4:	str	r3, [sp, #72]	; 0x48
   148e8:	ldr	r3, [sp, #180]	; 0xb4
   148ec:	str	r2, [sp, #80]	; 0x50
   148f0:	str	r2, [sp, #84]	; 0x54
   148f4:	and	r3, r3, #1
   148f8:	b	1488c <__assert_fail@plt+0x3334>
   148fc:	mov	r5, #102	; 0x66
   14900:	mov	r6, #0
   14904:	ldr	r3, [sp, #44]	; 0x2c
   14908:	cmp	r3, #0
   1490c:	bne	157bc <__assert_fail@plt+0x4264>
   14910:	ldr	r2, [sp, #52]	; 0x34
   14914:	eor	r3, fp, #1
   14918:	ands	r3, r2, r3
   1491c:	beq	14954 <__assert_fail@plt+0x33fc>
   14920:	cmp	sl, r4
   14924:	mov	fp, r3
   14928:	movhi	r2, #39	; 0x27
   1492c:	strbhi	r2, [r9, r4]
   14930:	add	r2, r4, #1
   14934:	cmp	sl, r2
   14938:	movhi	r1, #36	; 0x24
   1493c:	strbhi	r1, [r9, r2]
   14940:	add	r2, r4, #2
   14944:	add	r4, r4, #3
   14948:	cmp	sl, r2
   1494c:	movhi	r1, #39	; 0x27
   14950:	strbhi	r1, [r9, r2]
   14954:	cmp	sl, r4
   14958:	add	r7, r7, #1
   1495c:	movhi	r3, #92	; 0x5c
   14960:	strbhi	r3, [r9, r4]
   14964:	add	r4, r4, #1
   14968:	cmp	r4, sl
   1496c:	ldr	r3, [sp, #32]
   14970:	strbcc	r5, [r9, r4]
   14974:	cmp	r6, #0
   14978:	add	r4, r4, #1
   1497c:	moveq	r3, #0
   14980:	cmn	r8, #1
   14984:	str	r3, [sp, #32]
   14988:	bne	1438c <__assert_fail@plt+0x2e34>
   1498c:	ldr	r3, [sp, #28]
   14990:	ldrb	r6, [r3, r7]
   14994:	adds	r6, r6, #0
   14998:	movne	r6, #1
   1499c:	cmp	r6, #0
   149a0:	bne	1439c <__assert_fail@plt+0x2e44>
   149a4:	mov	r3, r9
   149a8:	mov	r9, fp
   149ac:	mov	fp, r3
   149b0:	ldr	r3, [sp, #68]	; 0x44
   149b4:	cmp	r4, #0
   149b8:	movne	r3, #0
   149bc:	cmp	r3, #0
   149c0:	bne	15bb4 <__assert_fail@plt+0x465c>
   149c4:	ldr	r3, [sp, #44]	; 0x2c
   149c8:	ldr	r2, [sp, #52]	; 0x34
   149cc:	eor	r3, r3, #1
   149d0:	ands	r2, r3, r2
   149d4:	beq	15aec <__assert_fail@plt+0x4594>
   149d8:	ldr	r3, [sp, #80]	; 0x50
   149dc:	cmp	r3, #0
   149e0:	beq	15af0 <__assert_fail@plt+0x4598>
   149e4:	ldr	r3, [sp, #32]
   149e8:	cmp	r3, #0
   149ec:	bne	15b64 <__assert_fail@plt+0x460c>
   149f0:	ldr	r3, [sp, #84]	; 0x54
   149f4:	adds	r3, r3, #0
   149f8:	movne	r3, #1
   149fc:	cmp	sl, #0
   14a00:	movne	r3, #0
   14a04:	cmp	r3, #0
   14a08:	ldreq	r2, [sp, #80]	; 0x50
   14a0c:	beq	15af0 <__assert_fail@plt+0x4598>
   14a10:	ldr	r2, [sp, #84]	; 0x54
   14a14:	mov	sl, r2
   14a18:	mov	r0, #0
   14a1c:	mov	r4, #1
   14a20:	mov	r1, #39	; 0x27
   14a24:	str	r0, [sp, #44]	; 0x2c
   14a28:	strb	r1, [fp]
   14a2c:	str	r0, [sp, #48]	; 0x30
   14a30:	str	r4, [sp, #52]	; 0x34
   14a34:	str	r4, [sp, #56]	; 0x38
   14a38:	str	r4, [sp, #64]	; 0x40
   14a3c:	str	r0, [sp, #68]	; 0x44
   14a40:	str	r3, [sp, #80]	; 0x50
   14a44:	str	r2, [sp, #84]	; 0x54
   14a48:	str	r0, [sp, #88]	; 0x58
   14a4c:	b	1468c <__assert_fail@plt+0x3134>
   14a50:	mov	r5, #98	; 0x62
   14a54:	b	14900 <__assert_fail@plt+0x33a8>
   14a58:	mov	r5, #97	; 0x61
   14a5c:	b	14900 <__assert_fail@plt+0x33a8>
   14a60:	ldr	r3, [sp, #48]	; 0x30
   14a64:	str	r3, [sp, #40]	; 0x28
   14a68:	mov	r3, #116	; 0x74
   14a6c:	ldr	r2, [sp, #68]	; 0x44
   14a70:	cmp	r2, #0
   14a74:	bne	14c70 <__assert_fail@plt+0x3718>
   14a78:	ldr	r2, [sp, #60]	; 0x3c
   14a7c:	cmp	r2, #0
   14a80:	bne	14bcc <__assert_fail@plt+0x3674>
   14a84:	ldr	r3, [sp, #44]	; 0x2c
   14a88:	mov	r6, #0
   14a8c:	cmp	r3, #0
   14a90:	beq	14c3c <__assert_fail@plt+0x36e4>
   14a94:	mov	r3, fp
   14a98:	ldr	r2, [sp, #184]	; 0xb8
   14a9c:	cmp	r2, #0
   14aa0:	beq	14ac0 <__assert_fail@plt+0x3568>
   14aa4:	ubfx	r1, r5, #5, #8
   14aa8:	mov	r0, r2
   14aac:	and	r2, r5, #31
   14ab0:	ldr	r1, [r0, r1, lsl #2]
   14ab4:	lsr	r2, r1, r2
   14ab8:	tst	r2, #1
   14abc:	bne	14904 <__assert_fail@plt+0x33ac>
   14ac0:	ldr	r2, [sp, #40]	; 0x28
   14ac4:	cmp	r2, #0
   14ac8:	addeq	r7, r7, #1
   14acc:	bne	14904 <__assert_fail@plt+0x33ac>
   14ad0:	cmp	r3, #0
   14ad4:	beq	14968 <__assert_fail@plt+0x3410>
   14ad8:	cmp	sl, r4
   14adc:	mov	fp, #0
   14ae0:	movhi	r3, #39	; 0x27
   14ae4:	strbhi	r3, [r9, r4]
   14ae8:	add	r3, r4, #1
   14aec:	add	r4, r4, #2
   14af0:	cmp	sl, r3
   14af4:	movhi	r2, #39	; 0x27
   14af8:	strbhi	r2, [r9, r3]
   14afc:	b	14968 <__assert_fail@plt+0x3410>
   14b00:	ldr	r3, [sp, #48]	; 0x30
   14b04:	str	r3, [sp, #40]	; 0x28
   14b08:	eor	r3, fp, #1
   14b0c:	ldr	r2, [sp, #52]	; 0x34
   14b10:	ands	r2, r2, r3
   14b14:	beq	157d4 <__assert_fail@plt+0x427c>
   14b18:	cmp	sl, r4
   14b1c:	movhi	r3, #39	; 0x27
   14b20:	strbhi	r3, [r9, r4]
   14b24:	add	r3, r4, #1
   14b28:	cmp	sl, r3
   14b2c:	movhi	r1, #36	; 0x24
   14b30:	strbhi	r1, [r9, r3]
   14b34:	add	r3, r4, #2
   14b38:	cmp	sl, r3
   14b3c:	movhi	r1, #39	; 0x27
   14b40:	strbhi	r1, [r9, r3]
   14b44:	add	r3, r4, #3
   14b48:	cmp	sl, r3
   14b4c:	bls	15820 <__assert_fail@plt+0x42c8>
   14b50:	mov	r4, r3
   14b54:	mov	r3, #92	; 0x5c
   14b58:	mov	fp, r2
   14b5c:	mov	r2, r4
   14b60:	strb	r3, [r9, r4]
   14b64:	ldr	r3, [sp, #176]	; 0xb0
   14b68:	add	r4, r4, #1
   14b6c:	cmp	r3, #2
   14b70:	beq	15888 <__assert_fail@plt+0x4330>
   14b74:	add	r3, r7, #1
   14b78:	cmp	r3, r8
   14b7c:	bcs	14b94 <__assert_fail@plt+0x363c>
   14b80:	ldr	r1, [sp, #28]
   14b84:	ldrb	r3, [r1, r3]
   14b88:	sub	r3, r3, #48	; 0x30
   14b8c:	cmp	r3, #9
   14b90:	bls	15898 <__assert_fail@plt+0x4340>
   14b94:	mov	r3, #0
   14b98:	mov	r5, #48	; 0x30
   14b9c:	ldr	r6, [sp, #64]	; 0x40
   14ba0:	cmp	r6, #0
   14ba4:	beq	14a98 <__assert_fail@plt+0x3540>
   14ba8:	mov	r6, #0
   14bac:	b	14ac0 <__assert_fail@plt+0x3568>
   14bb0:	ldr	r3, [sp, #48]	; 0x30
   14bb4:	str	r3, [sp, #40]	; 0x28
   14bb8:	ldr	r2, [sp, #60]	; 0x3c
   14bbc:	mov	r5, #13
   14bc0:	mov	r3, #114	; 0x72
   14bc4:	cmp	r2, #0
   14bc8:	beq	14a84 <__assert_fail@plt+0x352c>
   14bcc:	mov	r5, r3
   14bd0:	b	14900 <__assert_fail@plt+0x33a8>
   14bd4:	ldr	r3, [sp, #48]	; 0x30
   14bd8:	str	r3, [sp, #40]	; 0x28
   14bdc:	mov	r3, #118	; 0x76
   14be0:	b	14a78 <__assert_fail@plt+0x3520>
   14be4:	ldr	r3, [sp, #48]	; 0x30
   14be8:	str	r3, [sp, #40]	; 0x28
   14bec:	mov	r5, #10
   14bf0:	mov	r3, #110	; 0x6e
   14bf4:	b	14a78 <__assert_fail@plt+0x3520>
   14bf8:	ldr	r3, [sp, #48]	; 0x30
   14bfc:	cmn	r8, #1
   14c00:	str	r3, [sp, #40]	; 0x28
   14c04:	beq	1504c <__assert_fail@plt+0x3af4>
   14c08:	subs	r3, r8, #1
   14c0c:	movne	r3, #1
   14c10:	cmp	r3, #0
   14c14:	bne	14c20 <__assert_fail@plt+0x36c8>
   14c18:	cmp	r7, #0
   14c1c:	beq	14c64 <__assert_fail@plt+0x370c>
   14c20:	mov	r6, #0
   14c24:	ldr	r3, [sp, #64]	; 0x40
   14c28:	cmp	r3, #0
   14c2c:	beq	14a94 <__assert_fail@plt+0x353c>
   14c30:	ldr	r3, [sp, #44]	; 0x2c
   14c34:	cmp	r3, #0
   14c38:	bne	14a94 <__assert_fail@plt+0x353c>
   14c3c:	mov	r3, fp
   14c40:	b	14ac0 <__assert_fail@plt+0x3568>
   14c44:	ldr	r3, [sp, #48]	; 0x30
   14c48:	str	r3, [sp, #40]	; 0x28
   14c4c:	b	14c18 <__assert_fail@plt+0x36c0>
   14c50:	ldr	r3, [sp, #48]	; 0x30
   14c54:	str	r3, [sp, #40]	; 0x28
   14c58:	b	14c20 <__assert_fail@plt+0x36c8>
   14c5c:	ldr	r6, [sp, #48]	; 0x30
   14c60:	str	r6, [sp, #40]	; 0x28
   14c64:	ldr	r3, [sp, #68]	; 0x44
   14c68:	cmp	r3, #0
   14c6c:	beq	14c24 <__assert_fail@plt+0x36cc>
   14c70:	mov	r3, #2
   14c74:	mov	fp, r9
   14c78:	str	r3, [sp, #176]	; 0xb0
   14c7c:	ldr	r3, [sp, #60]	; 0x3c
   14c80:	cmp	r3, #0
   14c84:	ldr	r3, [sp, #176]	; 0xb0
   14c88:	movne	r3, #4
   14c8c:	str	r3, [sp, #176]	; 0xb0
   14c90:	mov	lr, #0
   14c94:	mov	r0, fp
   14c98:	ldr	r2, [sp, #28]
   14c9c:	ldr	r3, [sp, #180]	; 0xb4
   14ca0:	ldr	r1, [sp, #188]	; 0xbc
   14ca4:	bic	ip, r3, #2
   14ca8:	ldr	r3, [sp, #176]	; 0xb0
   14cac:	stm	sp, {r3, ip, lr}
   14cb0:	mov	r3, r8
   14cb4:	ldr	ip, [sp, #192]	; 0xc0
   14cb8:	str	r1, [sp, #12]
   14cbc:	mov	r1, sl
   14cc0:	str	ip, [sp, #16]
   14cc4:	bl	14250 <__assert_fail@plt+0x2cf8>
   14cc8:	mov	r4, r0
   14ccc:	mov	r0, r4
   14cd0:	add	sp, sp, #140	; 0x8c
   14cd4:	ldrd	r4, [sp]
   14cd8:	ldrd	r6, [sp, #8]
   14cdc:	ldrd	r8, [sp, #16]
   14ce0:	ldrd	sl, [sp, #24]
   14ce4:	add	sp, sp, #32
   14ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   14cec:	ldr	r3, [sp, #48]	; 0x30
   14cf0:	str	r3, [sp, #40]	; 0x28
   14cf4:	ldr	r3, [sp, #176]	; 0xb0
   14cf8:	cmp	r3, #2
   14cfc:	beq	15074 <__assert_fail@plt+0x3b1c>
   14d00:	ldr	r3, [sp, #88]	; 0x58
   14d04:	cmp	r3, #0
   14d08:	moveq	r5, #92	; 0x5c
   14d0c:	moveq	r3, r5
   14d10:	beq	14a78 <__assert_fail@plt+0x3520>
   14d14:	add	r7, r7, #1
   14d18:	mov	r3, fp
   14d1c:	mov	r6, #0
   14d20:	mov	r5, #92	; 0x5c
   14d24:	b	14ad0 <__assert_fail@plt+0x3578>
   14d28:	ldr	r3, [sp, #64]	; 0x40
   14d2c:	cmp	r3, #0
   14d30:	bne	15ba8 <__assert_fail@plt+0x4650>
   14d34:	ldr	r2, [sp, #48]	; 0x30
   14d38:	mov	r3, fp
   14d3c:	mov	r6, r2
   14d40:	str	r2, [sp, #40]	; 0x28
   14d44:	b	14a98 <__assert_fail@plt+0x3540>
   14d48:	ldr	r3, [sp, #176]	; 0xb0
   14d4c:	cmp	r3, #2
   14d50:	beq	15ae4 <__assert_fail@plt+0x458c>
   14d54:	cmp	r3, #5
   14d58:	ldr	r3, [sp, #48]	; 0x30
   14d5c:	str	r3, [sp, #40]	; 0x28
   14d60:	bne	14d8c <__assert_fail@plt+0x3834>
   14d64:	ldr	r3, [sp, #96]	; 0x60
   14d68:	cmp	r3, #0
   14d6c:	beq	157e8 <__assert_fail@plt+0x4290>
   14d70:	add	r3, r7, #2
   14d74:	cmp	r3, r8
   14d78:	bcs	14d8c <__assert_fail@plt+0x3834>
   14d7c:	ldr	r2, [sp, #36]	; 0x24
   14d80:	ldrb	r5, [r2, #1]
   14d84:	cmp	r5, #63	; 0x3f
   14d88:	beq	158d0 <__assert_fail@plt+0x4378>
   14d8c:	mov	r6, #0
   14d90:	mov	r5, #63	; 0x3f
   14d94:	b	14c24 <__assert_fail@plt+0x36cc>
   14d98:	ldr	r3, [sp, #176]	; 0xb0
   14d9c:	cmp	r3, #2
   14da0:	ldr	r3, [sp, #48]	; 0x30
   14da4:	beq	1558c <__assert_fail@plt+0x4034>
   14da8:	mov	r5, #39	; 0x27
   14dac:	str	r3, [sp, #40]	; 0x28
   14db0:	str	r6, [sp, #80]	; 0x50
   14db4:	b	14c24 <__assert_fail@plt+0x36cc>
   14db8:	ldr	r3, [sp, #180]	; 0xb4
   14dbc:	cmp	r4, #0
   14dc0:	and	r3, r3, #1
   14dc4:	str	r3, [sp, #92]	; 0x5c
   14dc8:	ldr	r3, [sp, #180]	; 0xb4
   14dcc:	and	r3, r3, #4
   14dd0:	str	r3, [sp, #96]	; 0x60
   14dd4:	bne	15bf4 <__assert_fail@plt+0x469c>
   14dd8:	str	r4, [sp, #60]	; 0x3c
   14ddc:	cmp	sl, #0
   14de0:	bne	15bd8 <__assert_fail@plt+0x4680>
   14de4:	mov	r3, #1
   14de8:	movw	r2, #57632	; 0xe120
   14dec:	movt	r2, #2
   14df0:	mov	r4, r3
   14df4:	mov	r3, #2
   14df8:	mov	r9, sl
   14dfc:	str	r4, [sp, #32]
   14e00:	str	sl, [sp, #44]	; 0x2c
   14e04:	str	sl, [sp, #48]	; 0x30
   14e08:	str	r4, [sp, #52]	; 0x34
   14e0c:	str	r4, [sp, #56]	; 0x38
   14e10:	str	r4, [sp, #64]	; 0x40
   14e14:	str	sl, [sp, #68]	; 0x44
   14e18:	str	r2, [sp, #72]	; 0x48
   14e1c:	str	sl, [sp, #80]	; 0x50
   14e20:	str	sl, [sp, #84]	; 0x54
   14e24:	str	sl, [sp, #88]	; 0x58
   14e28:	str	r3, [sp, #176]	; 0xb0
   14e2c:	b	14374 <__assert_fail@plt+0x2e1c>
   14e30:	ldrb	r5, [r0, r7]
   14e34:	cmp	r5, #126	; 0x7e
   14e38:	ldrls	pc, [pc, r5, lsl #2]
   14e3c:	b	151a0 <__assert_fail@plt+0x3c48>
   14e40:	andeq	r5, r1, ip, ror #2
   14e44:	andeq	r5, r1, r0, lsr #3
   14e48:	andeq	r5, r1, r0, lsr #3
   14e4c:	andeq	r5, r1, r0, lsr #3
   14e50:	andeq	r5, r1, r0, lsr #3
   14e54:	andeq	r5, r1, r0, lsr #3
   14e58:	andeq	r5, r1, r0, lsr #3
   14e5c:	andeq	r5, r1, ip, asr r1
   14e60:	andeq	r5, r1, ip, asr #2
   14e64:	ldrdeq	r5, [r1], -r0
   14e68:	andeq	r5, r1, ip, lsr r1
   14e6c:	strheq	r5, [r1], -r0
   14e70:	muleq	r1, r0, r1
   14e74:	andeq	r5, r1, ip, lsl r1
   14e78:	andeq	r5, r1, r0, lsr #3
   14e7c:	andeq	r5, r1, r0, lsr #3
   14e80:	andeq	r5, r1, r0, lsr #3
   14e84:	andeq	r5, r1, r0, lsr #3
   14e88:	andeq	r5, r1, r0, lsr #3
   14e8c:	andeq	r5, r1, r0, lsr #3
   14e90:	andeq	r5, r1, r0, lsr #3
   14e94:	andeq	r5, r1, r0, lsr #3
   14e98:	andeq	r5, r1, r0, lsr #3
   14e9c:	andeq	r5, r1, r0, lsr #3
   14ea0:	andeq	r5, r1, r0, lsr #3
   14ea4:	andeq	r5, r1, r0, lsr #3
   14ea8:	andeq	r5, r1, r0, lsr #3
   14eac:	andeq	r5, r1, r0, lsr #3
   14eb0:	andeq	r5, r1, r0, lsr #3
   14eb4:	andeq	r5, r1, r0, lsr #3
   14eb8:	andeq	r5, r1, r0, lsr #3
   14ebc:	andeq	r5, r1, r0, lsr #3
   14ec0:	andeq	r5, r1, r4, asr #1
   14ec4:	andeq	r5, r1, ip, lsr #2
   14ec8:	andeq	r5, r1, ip, lsr #2
   14ecc:	andeq	r5, r1, r4, lsr #1
   14ed0:	andeq	r5, r1, ip, lsr #2
   14ed4:	muleq	r1, r8, r0
   14ed8:	andeq	r5, r1, ip, lsr #2
   14edc:	andeq	r5, r1, r8, lsl #2
   14ee0:	andeq	r5, r1, ip, lsr #2
   14ee4:	andeq	r5, r1, ip, lsr #2
   14ee8:	andeq	r5, r1, ip, lsr #2
   14eec:	muleq	r1, r8, r0
   14ef0:	muleq	r1, r8, r0
   14ef4:	muleq	r1, r8, r0
   14ef8:	muleq	r1, r8, r0
   14efc:	muleq	r1, r8, r0
   14f00:	muleq	r1, r8, r0
   14f04:	muleq	r1, r8, r0
   14f08:	muleq	r1, r8, r0
   14f0c:	muleq	r1, r8, r0
   14f10:	muleq	r1, r8, r0
   14f14:	muleq	r1, r8, r0
   14f18:	muleq	r1, r8, r0
   14f1c:	muleq	r1, r8, r0
   14f20:	muleq	r1, r8, r0
   14f24:	muleq	r1, r8, r0
   14f28:	muleq	r1, r8, r0
   14f2c:	andeq	r5, r1, ip, lsr #2
   14f30:	andeq	r5, r1, ip, lsr #2
   14f34:	andeq	r5, r1, ip, lsr #2
   14f38:	andeq	r5, r1, ip, lsr #2
   14f3c:	andeq	r5, r1, r0, ror #1
   14f40:	andeq	r5, r1, r0, lsr #3
   14f44:	muleq	r1, r8, r0
   14f48:	muleq	r1, r8, r0
   14f4c:	muleq	r1, r8, r0
   14f50:	muleq	r1, r8, r0
   14f54:	muleq	r1, r8, r0
   14f58:	muleq	r1, r8, r0
   14f5c:	muleq	r1, r8, r0
   14f60:	muleq	r1, r8, r0
   14f64:	muleq	r1, r8, r0
   14f68:	muleq	r1, r8, r0
   14f6c:	muleq	r1, r8, r0
   14f70:	muleq	r1, r8, r0
   14f74:	muleq	r1, r8, r0
   14f78:	muleq	r1, r8, r0
   14f7c:	muleq	r1, r8, r0
   14f80:	muleq	r1, r8, r0
   14f84:	muleq	r1, r8, r0
   14f88:	muleq	r1, r8, r0
   14f8c:	muleq	r1, r8, r0
   14f90:	muleq	r1, r8, r0
   14f94:	muleq	r1, r8, r0
   14f98:	muleq	r1, r8, r0
   14f9c:	muleq	r1, r8, r0
   14fa0:	muleq	r1, r8, r0
   14fa4:	muleq	r1, r8, r0
   14fa8:	muleq	r1, r8, r0
   14fac:	andeq	r5, r1, ip, lsr #2
   14fb0:	andeq	r5, r1, r0, rrx
   14fb4:	muleq	r1, r8, r0
   14fb8:	andeq	r5, r1, ip, lsr #2
   14fbc:	muleq	r1, r8, r0
   14fc0:	andeq	r5, r1, ip, lsr #2
   14fc4:	muleq	r1, r8, r0
   14fc8:	muleq	r1, r8, r0
   14fcc:	muleq	r1, r8, r0
   14fd0:	muleq	r1, r8, r0
   14fd4:	muleq	r1, r8, r0
   14fd8:	muleq	r1, r8, r0
   14fdc:	muleq	r1, r8, r0
   14fe0:	muleq	r1, r8, r0
   14fe4:	muleq	r1, r8, r0
   14fe8:	muleq	r1, r8, r0
   14fec:	muleq	r1, r8, r0
   14ff0:	muleq	r1, r8, r0
   14ff4:	muleq	r1, r8, r0
   14ff8:	muleq	r1, r8, r0
   14ffc:	muleq	r1, r8, r0
   15000:	muleq	r1, r8, r0
   15004:	muleq	r1, r8, r0
   15008:	muleq	r1, r8, r0
   1500c:	muleq	r1, r8, r0
   15010:	muleq	r1, r8, r0
   15014:	muleq	r1, r8, r0
   15018:	muleq	r1, r8, r0
   1501c:	muleq	r1, r8, r0
   15020:	muleq	r1, r8, r0
   15024:	muleq	r1, r8, r0
   15028:	muleq	r1, r8, r0
   1502c:	andeq	r5, r1, ip, lsr r0
   15030:	andeq	r5, r1, ip, lsr #2
   15034:	andeq	r5, r1, ip, lsr r0
   15038:	andeq	r5, r1, r4, lsr #1
   1503c:	mov	r3, #0
   15040:	cmn	r8, #1
   15044:	str	r3, [sp, #40]	; 0x28
   15048:	bne	14c08 <__assert_fail@plt+0x36b0>
   1504c:	ldr	r3, [sp, #28]
   15050:	ldrb	r3, [r3, #1]
   15054:	adds	r3, r3, #0
   15058:	movne	r3, #1
   1505c:	b	14c10 <__assert_fail@plt+0x36b8>
   15060:	mov	r3, #0
   15064:	str	r3, [sp, #40]	; 0x28
   15068:	ldr	r3, [sp, #176]	; 0xb0
   1506c:	cmp	r3, #2
   15070:	bne	14d00 <__assert_fail@plt+0x37a8>
   15074:	ldr	r3, [sp, #44]	; 0x2c
   15078:	cmp	r3, #0
   1507c:	bne	159bc <__assert_fail@plt+0x4464>
   15080:	mov	r6, r3
   15084:	add	r7, r7, #1
   15088:	mov	r3, fp
   1508c:	mov	r5, #92	; 0x5c
   15090:	b	14ad0 <__assert_fail@plt+0x3578>
   15094:	ldr	r6, [sp, #48]	; 0x30
   15098:	mov	r3, #0
   1509c:	str	r3, [sp, #40]	; 0x28
   150a0:	b	14c24 <__assert_fail@plt+0x36cc>
   150a4:	mov	r3, #0
   150a8:	str	r3, [sp, #40]	; 0x28
   150ac:	b	14c18 <__assert_fail@plt+0x36c0>
   150b0:	mov	r3, #0
   150b4:	str	r3, [sp, #40]	; 0x28
   150b8:	mov	r3, #118	; 0x76
   150bc:	b	14a78 <__assert_fail@plt+0x3520>
   150c0:	ldr	r6, [sp, #48]	; 0x30
   150c4:	mov	r3, #0
   150c8:	str	r3, [sp, #40]	; 0x28
   150cc:	b	14c64 <__assert_fail@plt+0x370c>
   150d0:	mov	r3, #0
   150d4:	str	r3, [sp, #40]	; 0x28
   150d8:	mov	r3, #116	; 0x74
   150dc:	b	14a6c <__assert_fail@plt+0x3514>
   150e0:	ldr	r3, [sp, #176]	; 0xb0
   150e4:	cmp	r3, #2
   150e8:	beq	155f8 <__assert_fail@plt+0x40a0>
   150ec:	cmp	r3, #5
   150f0:	mov	r3, #0
   150f4:	str	r3, [sp, #40]	; 0x28
   150f8:	beq	14d64 <__assert_fail@plt+0x380c>
   150fc:	mov	r6, #0
   15100:	mov	r5, #63	; 0x3f
   15104:	b	14c24 <__assert_fail@plt+0x36cc>
   15108:	ldr	r3, [sp, #176]	; 0xb0
   1510c:	cmp	r3, #2
   15110:	beq	15580 <__assert_fail@plt+0x4028>
   15114:	mov	r3, #0
   15118:	b	14da8 <__assert_fail@plt+0x3850>
   1511c:	mov	r3, #0
   15120:	str	r3, [sp, #40]	; 0x28
   15124:	mov	r3, #114	; 0x72
   15128:	b	14a6c <__assert_fail@plt+0x3514>
   1512c:	mov	r3, #0
   15130:	mov	r6, r3
   15134:	str	r3, [sp, #40]	; 0x28
   15138:	b	14c64 <__assert_fail@plt+0x370c>
   1513c:	mov	r3, #0
   15140:	str	r3, [sp, #40]	; 0x28
   15144:	mov	r3, #110	; 0x6e
   15148:	b	14a6c <__assert_fail@plt+0x3514>
   1514c:	mov	r3, #0
   15150:	str	r3, [sp, #40]	; 0x28
   15154:	mov	r3, #98	; 0x62
   15158:	b	14a78 <__assert_fail@plt+0x3520>
   1515c:	mov	r3, #0
   15160:	str	r3, [sp, #40]	; 0x28
   15164:	mov	r3, #97	; 0x61
   15168:	b	14a78 <__assert_fail@plt+0x3520>
   1516c:	ldr	r3, [sp, #60]	; 0x3c
   15170:	cmp	r3, #0
   15174:	bne	15564 <__assert_fail@plt+0x400c>
   15178:	ldr	r3, [sp, #92]	; 0x5c
   1517c:	cmp	r3, #0
   15180:	addne	r7, r7, #1
   15184:	bne	14384 <__assert_fail@plt+0x2e2c>
   15188:	str	r3, [sp, #40]	; 0x28
   1518c:	b	14a84 <__assert_fail@plt+0x352c>
   15190:	mov	r3, #0
   15194:	str	r3, [sp, #40]	; 0x28
   15198:	mov	r3, #102	; 0x66
   1519c:	b	14a78 <__assert_fail@plt+0x3520>
   151a0:	mov	r3, #0
   151a4:	str	r3, [sp, #40]	; 0x28
   151a8:	ldr	r3, [sp, #76]	; 0x4c
   151ac:	cmp	r3, #1
   151b0:	bne	15618 <__assert_fail@plt+0x40c0>
   151b4:	bl	113fc <__ctype_b_loc@plt>
   151b8:	ldr	r2, [r0]
   151bc:	sxth	r3, r5
   151c0:	lsl	r3, r3, #1
   151c4:	ldr	r1, [sp, #76]	; 0x4c
   151c8:	ldrh	r3, [r2, r3]
   151cc:	mov	r0, r1
   151d0:	and	r3, r3, #16384	; 0x4000
   151d4:	cmp	r3, #0
   151d8:	ldr	r3, [sp, #60]	; 0x3c
   151dc:	movne	r6, #1
   151e0:	moveq	r6, #0
   151e4:	movne	r2, #0
   151e8:	andeq	r2, r3, #1
   151ec:	cmp	r2, #0
   151f0:	beq	14c24 <__assert_fail@plt+0x36cc>
   151f4:	ldr	r2, [sp, #60]	; 0x3c
   151f8:	mov	r6, #0
   151fc:	add	r1, r0, r7
   15200:	mov	ip, #39	; 0x27
   15204:	str	r6, [sp, #100]	; 0x64
   15208:	mov	r0, #0
   1520c:	ldr	lr, [sp, #36]	; 0x24
   15210:	str	r8, [sp, #36]	; 0x24
   15214:	ldr	r6, [sp, #40]	; 0x28
   15218:	ldr	r8, [sp, #44]	; 0x2c
   1521c:	b	152cc <__assert_fail@plt+0x3d74>
   15220:	cmp	r8, #0
   15224:	bne	15800 <__assert_fail@plt+0x42a8>
   15228:	ldr	r0, [sp, #52]	; 0x34
   1522c:	eor	r3, fp, #1
   15230:	ands	r3, r0, r3
   15234:	beq	15264 <__assert_fail@plt+0x3d0c>
   15238:	cmp	sl, r4
   1523c:	add	r0, r4, #1
   15240:	strbhi	ip, [r9, r4]
   15244:	cmp	sl, r0
   15248:	movhi	fp, #36	; 0x24
   1524c:	strbhi	fp, [r9, r0]
   15250:	add	r0, r4, #2
   15254:	mov	fp, r3
   15258:	cmp	sl, r0
   1525c:	add	r4, r4, #3
   15260:	strbhi	ip, [r9, r0]
   15264:	cmp	sl, r4
   15268:	movhi	r3, #92	; 0x5c
   1526c:	strbhi	r3, [r9, r4]
   15270:	add	r3, r4, #1
   15274:	cmp	sl, r3
   15278:	bls	15288 <__assert_fail@plt+0x3d30>
   1527c:	lsr	r0, r5, #6
   15280:	add	r0, r0, #48	; 0x30
   15284:	strb	r0, [r9, r3]
   15288:	add	r3, r4, #2
   1528c:	cmp	sl, r3
   15290:	bls	152a0 <__assert_fail@plt+0x3d48>
   15294:	ubfx	r0, r5, #3, #3
   15298:	add	r0, r0, #48	; 0x30
   1529c:	strb	r0, [r9, r3]
   152a0:	add	r7, r7, #1
   152a4:	and	r5, r5, #7
   152a8:	cmp	r1, r7
   152ac:	add	r5, r5, #48	; 0x30
   152b0:	add	r4, r4, #3
   152b4:	bls	15814 <__assert_fail@plt+0x42bc>
   152b8:	mov	r0, r2
   152bc:	cmp	sl, r4
   152c0:	strbhi	r5, [r9, r4]
   152c4:	add	r4, r4, #1
   152c8:	ldrb	r5, [lr, #1]!
   152cc:	cmp	r2, #0
   152d0:	bne	15220 <__assert_fail@plt+0x3cc8>
   152d4:	eor	r3, r0, #1
   152d8:	cmp	r6, #0
   152dc:	and	r3, r3, fp
   152e0:	uxtb	r3, r3
   152e4:	beq	152f8 <__assert_fail@plt+0x3da0>
   152e8:	cmp	sl, r4
   152ec:	movhi	r6, #92	; 0x5c
   152f0:	strbhi	r6, [r9, r4]
   152f4:	add	r4, r4, #1
   152f8:	add	r7, r7, #1
   152fc:	cmp	r7, r1
   15300:	bcs	157f4 <__assert_fail@plt+0x429c>
   15304:	cmp	r3, #0
   15308:	beq	15838 <__assert_fail@plt+0x42e0>
   1530c:	cmp	sl, r4
   15310:	add	r3, r4, #1
   15314:	mov	r6, #0
   15318:	strbhi	ip, [r9, r4]
   1531c:	cmp	sl, r3
   15320:	add	r4, r4, #2
   15324:	mov	fp, r6
   15328:	strbhi	ip, [r9, r3]
   1532c:	b	152bc <__assert_fail@plt+0x3d64>
   15330:	ldr	r3, [sp, #36]	; 0x24
   15334:	ldrb	r5, [r3]
   15338:	cmp	r5, #126	; 0x7e
   1533c:	ldrls	pc, [pc, r5, lsl #2]
   15340:	b	151a0 <__assert_fail@plt+0x3c48>
   15344:	andeq	r5, r1, r4, ror #10
   15348:	andeq	r5, r1, r0, lsr #3
   1534c:	andeq	r5, r1, r0, lsr #3
   15350:	andeq	r5, r1, r0, lsr #3
   15354:	andeq	r5, r1, r0, lsr #3
   15358:	andeq	r5, r1, r0, lsr #3
   1535c:	andeq	r5, r1, r0, lsr #3
   15360:	andeq	r4, r1, r8, asr sl
   15364:	andeq	r4, r1, r0, asr sl
   15368:	ldrdeq	r5, [r1], -r0
   1536c:	andeq	r5, r1, r8, asr r5
   15370:	strheq	r5, [r1], -r0
   15374:	strdeq	r4, [r1], -ip
   15378:	andeq	r5, r1, ip, asr #10
   1537c:	andeq	r5, r1, r0, lsr #3
   15380:	andeq	r5, r1, r0, lsr #3
   15384:	andeq	r5, r1, r0, lsr #3
   15388:	andeq	r5, r1, r0, lsr #3
   1538c:	andeq	r5, r1, r0, lsr #3
   15390:	andeq	r5, r1, r0, lsr #3
   15394:	andeq	r5, r1, r0, lsr #3
   15398:	andeq	r5, r1, r0, lsr #3
   1539c:	andeq	r5, r1, r0, lsr #3
   153a0:	andeq	r5, r1, r0, lsr #3
   153a4:	andeq	r5, r1, r0, lsr #3
   153a8:	andeq	r5, r1, r0, lsr #3
   153ac:	andeq	r5, r1, r0, lsr #3
   153b0:	andeq	r5, r1, r0, lsr #3
   153b4:	andeq	r5, r1, r0, lsr #3
   153b8:	andeq	r5, r1, r0, lsr #3
   153bc:	andeq	r5, r1, r0, lsr #3
   153c0:	andeq	r5, r1, r0, lsr #3
   153c4:	andeq	r5, r1, r0, asr #1
   153c8:	andeq	r5, r1, r0, asr #10
   153cc:	andeq	r5, r1, r0, asr #10
   153d0:	andeq	r5, r1, r4, lsr #1
   153d4:	andeq	r5, r1, r0, asr #10
   153d8:	muleq	r1, r4, r0
   153dc:	andeq	r5, r1, r0, asr #10
   153e0:	andeq	r5, r1, r8, lsl #2
   153e4:	andeq	r5, r1, r0, asr #10
   153e8:	andeq	r5, r1, r0, asr #10
   153ec:	andeq	r5, r1, r0, asr #10
   153f0:	muleq	r1, r4, r0
   153f4:	muleq	r1, r4, r0
   153f8:	muleq	r1, r4, r0
   153fc:	muleq	r1, r4, r0
   15400:	muleq	r1, r4, r0
   15404:	muleq	r1, r4, r0
   15408:	muleq	r1, r4, r0
   1540c:	muleq	r1, r4, r0
   15410:	muleq	r1, r4, r0
   15414:	muleq	r1, r4, r0
   15418:	muleq	r1, r4, r0
   1541c:	muleq	r1, r4, r0
   15420:	muleq	r1, r4, r0
   15424:	muleq	r1, r4, r0
   15428:	muleq	r1, r4, r0
   1542c:	muleq	r1, r4, r0
   15430:	andeq	r5, r1, r0, asr #10
   15434:	andeq	r5, r1, r0, asr #10
   15438:	andeq	r5, r1, r0, asr #10
   1543c:	andeq	r5, r1, r0, asr #10
   15440:	andeq	r5, r1, r0, ror #1
   15444:	andeq	r5, r1, r0, lsr #3
   15448:	muleq	r1, r4, r0
   1544c:	muleq	r1, r4, r0
   15450:	muleq	r1, r4, r0
   15454:	muleq	r1, r4, r0
   15458:	muleq	r1, r4, r0
   1545c:	muleq	r1, r4, r0
   15460:	muleq	r1, r4, r0
   15464:	muleq	r1, r4, r0
   15468:	muleq	r1, r4, r0
   1546c:	muleq	r1, r4, r0
   15470:	muleq	r1, r4, r0
   15474:	muleq	r1, r4, r0
   15478:	muleq	r1, r4, r0
   1547c:	muleq	r1, r4, r0
   15480:	muleq	r1, r4, r0
   15484:	muleq	r1, r4, r0
   15488:	muleq	r1, r4, r0
   1548c:	muleq	r1, r4, r0
   15490:	muleq	r1, r4, r0
   15494:	muleq	r1, r4, r0
   15498:	muleq	r1, r4, r0
   1549c:	muleq	r1, r4, r0
   154a0:	muleq	r1, r4, r0
   154a4:	muleq	r1, r4, r0
   154a8:	muleq	r1, r4, r0
   154ac:	muleq	r1, r4, r0
   154b0:	andeq	r5, r1, r0, asr #10
   154b4:	andeq	r5, r1, r0, rrx
   154b8:	muleq	r1, r4, r0
   154bc:	andeq	r5, r1, r0, asr #10
   154c0:	muleq	r1, r4, r0
   154c4:	andeq	r5, r1, r0, asr #10
   154c8:	muleq	r1, r4, r0
   154cc:	muleq	r1, r4, r0
   154d0:	muleq	r1, r4, r0
   154d4:	muleq	r1, r4, r0
   154d8:	muleq	r1, r4, r0
   154dc:	muleq	r1, r4, r0
   154e0:	muleq	r1, r4, r0
   154e4:	muleq	r1, r4, r0
   154e8:	muleq	r1, r4, r0
   154ec:	muleq	r1, r4, r0
   154f0:	muleq	r1, r4, r0
   154f4:	muleq	r1, r4, r0
   154f8:	muleq	r1, r4, r0
   154fc:	muleq	r1, r4, r0
   15500:	muleq	r1, r4, r0
   15504:	muleq	r1, r4, r0
   15508:	muleq	r1, r4, r0
   1550c:	muleq	r1, r4, r0
   15510:	muleq	r1, r4, r0
   15514:	muleq	r1, r4, r0
   15518:	muleq	r1, r4, r0
   1551c:	muleq	r1, r4, r0
   15520:	muleq	r1, r4, r0
   15524:	muleq	r1, r4, r0
   15528:	muleq	r1, r4, r0
   1552c:	muleq	r1, r4, r0
   15530:	andeq	r5, r1, ip, lsr r0
   15534:	andeq	r5, r1, r0, asr #10
   15538:	andeq	r5, r1, ip, lsr r0
   1553c:	andeq	r5, r1, r4, lsr #1
   15540:	mov	r3, #0
   15544:	str	r3, [sp, #40]	; 0x28
   15548:	b	14c20 <__assert_fail@plt+0x36c8>
   1554c:	mov	r3, #0
   15550:	str	r3, [sp, #40]	; 0x28
   15554:	b	14bb8 <__assert_fail@plt+0x3660>
   15558:	mov	r3, #0
   1555c:	str	r3, [sp, #40]	; 0x28
   15560:	b	14bec <__assert_fail@plt+0x3694>
   15564:	ldr	r3, [sp, #44]	; 0x2c
   15568:	cmp	r3, #0
   1556c:	beq	14b04 <__assert_fail@plt+0x35ac>
   15570:	ldr	r3, [sp, #52]	; 0x34
   15574:	mov	fp, r9
   15578:	str	r3, [sp, #60]	; 0x3c
   1557c:	b	14c7c <__assert_fail@plt+0x3724>
   15580:	ldr	r3, [sp, #44]	; 0x2c
   15584:	cmp	r3, #0
   15588:	bne	159bc <__assert_fail@plt+0x4464>
   1558c:	str	r3, [sp, #40]	; 0x28
   15590:	cmp	sl, #0
   15594:	ldr	r3, [sp, #84]	; 0x54
   15598:	clz	r3, r3
   1559c:	lsr	r3, r3, #5
   155a0:	moveq	r3, #0
   155a4:	cmp	r3, #0
   155a8:	strne	sl, [sp, #84]	; 0x54
   155ac:	movne	sl, #0
   155b0:	bne	155e0 <__assert_fail@plt+0x4088>
   155b4:	cmp	sl, r4
   155b8:	movhi	r3, #39	; 0x27
   155bc:	strbhi	r3, [r9, r4]
   155c0:	add	r3, r4, #1
   155c4:	cmp	sl, r3
   155c8:	movhi	r2, #92	; 0x5c
   155cc:	strbhi	r2, [r9, r3]
   155d0:	add	r3, r4, #2
   155d4:	cmp	sl, r3
   155d8:	movhi	r2, #39	; 0x27
   155dc:	strbhi	r2, [r9, r3]
   155e0:	mov	r3, #0
   155e4:	add	r4, r4, #3
   155e8:	str	r6, [sp, #80]	; 0x50
   155ec:	mov	fp, r3
   155f0:	mov	r5, #39	; 0x27
   155f4:	b	14ac0 <__assert_fail@plt+0x3568>
   155f8:	ldr	r3, [sp, #44]	; 0x2c
   155fc:	cmp	r3, #0
   15600:	bne	159bc <__assert_fail@plt+0x4464>
   15604:	mov	r6, #0
   15608:	mov	r5, #63	; 0x3f
   1560c:	str	r3, [sp, #40]	; 0x28
   15610:	mov	r3, fp
   15614:	b	14ac0 <__assert_fail@plt+0x3568>
   15618:	mov	r2, #0
   1561c:	mov	r3, #0
   15620:	cmn	r8, #1
   15624:	strd	r2, [sp, #128]	; 0x80
   15628:	bne	15638 <__assert_fail@plt+0x40e0>
   1562c:	ldr	r0, [sp, #28]
   15630:	bl	11414 <strlen@plt>
   15634:	mov	r8, r0
   15638:	str	r9, [sp, #100]	; 0x64
   1563c:	mov	r3, #0
   15640:	strd	sl, [sp, #104]	; 0x68
   15644:	ldr	sl, [sp, #28]
   15648:	str	r5, [sp, #112]	; 0x70
   1564c:	mov	r5, r3
   15650:	ldr	r9, [sp, #68]	; 0x44
   15654:	str	r4, [sp, #116]	; 0x74
   15658:	add	r4, r7, r5
   1565c:	add	r3, sp, #128	; 0x80
   15660:	add	fp, sl, r4
   15664:	sub	r2, r8, r4
   15668:	mov	r1, fp
   1566c:	add	r0, sp, #124	; 0x7c
   15670:	bl	2d174 <__assert_fail@plt+0x1bc1c>
   15674:	subs	r1, r0, #0
   15678:	beq	156b8 <__assert_fail@plt+0x4160>
   1567c:	cmn	r1, #1
   15680:	beq	15a10 <__assert_fail@plt+0x44b8>
   15684:	cmn	r1, #2
   15688:	beq	15a30 <__assert_fail@plt+0x44d8>
   1568c:	cmp	r9, #0
   15690:	bne	156e8 <__assert_fail@plt+0x4190>
   15694:	ldr	r0, [sp, #124]	; 0x7c
   15698:	add	r5, r5, r1
   1569c:	bl	11324 <iswprint@plt>
   156a0:	cmp	r0, #0
   156a4:	add	r0, sp, #128	; 0x80
   156a8:	moveq	r6, #0
   156ac:	bl	11294 <mbsinit@plt>
   156b0:	cmp	r0, #0
   156b4:	beq	15658 <__assert_fail@plt+0x4100>
   156b8:	ldr	r3, [sp, #60]	; 0x3c
   156bc:	add	r9, sp, #100	; 0x64
   156c0:	mov	r0, r5
   156c4:	ldm	r9, {r9, sl, fp}
   156c8:	eor	r2, r6, #1
   156cc:	ldr	r5, [sp, #112]	; 0x70
   156d0:	and	r2, r2, r3
   156d4:	uxtb	r2, r2
   156d8:	ldr	r4, [sp, #116]	; 0x74
   156dc:	cmp	r0, #1
   156e0:	bhi	151fc <__assert_fail@plt+0x3ca4>
   156e4:	b	151ec <__assert_fail@plt+0x3c94>
   156e8:	cmp	r1, #1
   156ec:	beq	15694 <__assert_fail@plt+0x413c>
   156f0:	add	r2, r4, #1
   156f4:	add	r3, sl, r1
   156f8:	add	r2, sl, r2
   156fc:	add	r4, r3, r4
   15700:	ldrb	r3, [r2], #1
   15704:	sub	r3, r3, #91	; 0x5b
   15708:	cmp	r3, #33	; 0x21
   1570c:	ldrls	pc, [pc, r3, lsl #2]
   15710:	b	1579c <__assert_fail@plt+0x4244>
   15714:	andeq	r5, r1, r8, lsr #15
   15718:	andeq	r5, r1, r8, lsr #15
   1571c:	muleq	r1, ip, r7
   15720:	andeq	r5, r1, r8, lsr #15
   15724:	muleq	r1, ip, r7
   15728:	andeq	r5, r1, r8, lsr #15
   1572c:	muleq	r1, ip, r7
   15730:	muleq	r1, ip, r7
   15734:	muleq	r1, ip, r7
   15738:	muleq	r1, ip, r7
   1573c:	muleq	r1, ip, r7
   15740:	muleq	r1, ip, r7
   15744:	muleq	r1, ip, r7
   15748:	muleq	r1, ip, r7
   1574c:	muleq	r1, ip, r7
   15750:	muleq	r1, ip, r7
   15754:	muleq	r1, ip, r7
   15758:	muleq	r1, ip, r7
   1575c:	muleq	r1, ip, r7
   15760:	muleq	r1, ip, r7
   15764:	muleq	r1, ip, r7
   15768:	muleq	r1, ip, r7
   1576c:	muleq	r1, ip, r7
   15770:	muleq	r1, ip, r7
   15774:	muleq	r1, ip, r7
   15778:	muleq	r1, ip, r7
   1577c:	muleq	r1, ip, r7
   15780:	muleq	r1, ip, r7
   15784:	muleq	r1, ip, r7
   15788:	muleq	r1, ip, r7
   1578c:	muleq	r1, ip, r7
   15790:	muleq	r1, ip, r7
   15794:	muleq	r1, ip, r7
   15798:	andeq	r5, r1, r8, lsr #15
   1579c:	cmp	r4, r2
   157a0:	bne	15700 <__assert_fail@plt+0x41a8>
   157a4:	b	15694 <__assert_fail@plt+0x413c>
   157a8:	mov	r3, #2
   157ac:	ldr	fp, [sp, #100]	; 0x64
   157b0:	str	r3, [sp, #176]	; 0xb0
   157b4:	ldr	sl, [sp, #104]	; 0x68
   157b8:	b	14c7c <__assert_fail@plt+0x3724>
   157bc:	ldr	r2, [sp, #52]	; 0x34
   157c0:	mov	fp, r9
   157c4:	ldr	r3, [sp, #60]	; 0x3c
   157c8:	and	r3, r3, r2
   157cc:	str	r3, [sp, #60]	; 0x3c
   157d0:	b	14c7c <__assert_fail@plt+0x3724>
   157d4:	cmp	sl, r4
   157d8:	movhi	r2, fp
   157dc:	bhi	14b54 <__assert_fail@plt+0x35fc>
   157e0:	mov	r2, r4
   157e4:	b	14b64 <__assert_fail@plt+0x360c>
   157e8:	mov	r6, r3
   157ec:	mov	r5, #63	; 0x3f
   157f0:	b	14c24 <__assert_fail@plt+0x36cc>
   157f4:	ldr	r8, [sp, #36]	; 0x24
   157f8:	ldr	r6, [sp, #100]	; 0x64
   157fc:	b	14ad0 <__assert_fail@plt+0x3578>
   15800:	mov	fp, r9
   15804:	ldr	r8, [sp, #36]	; 0x24
   15808:	ldr	r3, [sp, #52]	; 0x34
   1580c:	str	r3, [sp, #60]	; 0x3c
   15810:	b	14c7c <__assert_fail@plt+0x3724>
   15814:	ldr	r8, [sp, #36]	; 0x24
   15818:	ldr	r6, [sp, #100]	; 0x64
   1581c:	b	14968 <__assert_fail@plt+0x3410>
   15820:	mov	r3, #0
   15824:	add	r4, r4, #4
   15828:	mov	fp, r2
   1582c:	mov	r6, r3
   15830:	mov	r5, #48	; 0x30
   15834:	b	14ac0 <__assert_fail@plt+0x3568>
   15838:	mov	r6, r3
   1583c:	b	152bc <__assert_fail@plt+0x3d64>
   15840:	mov	r3, #1
   15844:	movw	r2, #58104	; 0xe2f8
   15848:	movt	r2, #2
   1584c:	mov	r4, r3
   15850:	mov	r9, sl
   15854:	str	r3, [sp, #32]
   15858:	str	sl, [sp, #44]	; 0x2c
   1585c:	str	r3, [sp, #48]	; 0x30
   15860:	str	sl, [sp, #52]	; 0x34
   15864:	str	r3, [sp, #56]	; 0x38
   15868:	str	r3, [sp, #60]	; 0x3c
   1586c:	str	sl, [sp, #64]	; 0x40
   15870:	str	sl, [sp, #68]	; 0x44
   15874:	str	r2, [sp, #72]	; 0x48
   15878:	str	sl, [sp, #80]	; 0x50
   1587c:	str	sl, [sp, #84]	; 0x54
   15880:	str	sl, [sp, #88]	; 0x58
   15884:	b	14374 <__assert_fail@plt+0x2e1c>
   15888:	mov	r3, #0
   1588c:	mov	r5, #48	; 0x30
   15890:	mov	r6, r3
   15894:	b	14ac0 <__assert_fail@plt+0x3568>
   15898:	cmp	sl, r4
   1589c:	mov	r5, #48	; 0x30
   158a0:	movhi	r3, #48	; 0x30
   158a4:	strbhi	r3, [r9, r4]
   158a8:	add	r3, r2, #2
   158ac:	add	r4, r2, #3
   158b0:	cmp	sl, r3
   158b4:	movhi	r1, #48	; 0x30
   158b8:	strbhi	r1, [r9, r3]
   158bc:	mov	r3, #0
   158c0:	b	14b9c <__assert_fail@plt+0x3644>
   158c4:	ldr	r3, [sp, #48]	; 0x30
   158c8:	str	r3, [sp, #40]	; 0x28
   158cc:	b	151a8 <__assert_fail@plt+0x3c50>
   158d0:	ldr	r2, [sp, #28]
   158d4:	ldrb	r2, [r2, r3]
   158d8:	sub	r1, r2, #33	; 0x21
   158dc:	cmp	r1, #29
   158e0:	ldrls	pc, [pc, r1, lsl #2]
   158e4:	b	14c20 <__assert_fail@plt+0x36c8>
   158e8:	andeq	r5, r1, r0, ror #18
   158ec:	andeq	r4, r1, r0, lsr #24
   158f0:	andeq	r4, r1, r0, lsr #24
   158f4:	andeq	r4, r1, r0, lsr #24
   158f8:	andeq	r4, r1, r0, lsr #24
   158fc:	andeq	r4, r1, r0, lsr #24
   15900:	andeq	r5, r1, r0, ror #18
   15904:	andeq	r5, r1, r0, ror #18
   15908:	andeq	r5, r1, r0, ror #18
   1590c:	andeq	r4, r1, r0, lsr #24
   15910:	andeq	r4, r1, r0, lsr #24
   15914:	andeq	r4, r1, r0, lsr #24
   15918:	andeq	r5, r1, r0, ror #18
   1591c:	andeq	r4, r1, r0, lsr #24
   15920:	andeq	r5, r1, r0, ror #18
   15924:	andeq	r4, r1, r0, lsr #24
   15928:	andeq	r4, r1, r0, lsr #24
   1592c:	andeq	r4, r1, r0, lsr #24
   15930:	andeq	r4, r1, r0, lsr #24
   15934:	andeq	r4, r1, r0, lsr #24
   15938:	andeq	r4, r1, r0, lsr #24
   1593c:	andeq	r4, r1, r0, lsr #24
   15940:	andeq	r4, r1, r0, lsr #24
   15944:	andeq	r4, r1, r0, lsr #24
   15948:	andeq	r4, r1, r0, lsr #24
   1594c:	andeq	r4, r1, r0, lsr #24
   15950:	andeq	r4, r1, r0, lsr #24
   15954:	andeq	r5, r1, r0, ror #18
   15958:	andeq	r5, r1, r0, ror #18
   1595c:	andeq	r5, r1, r0, ror #18
   15960:	ldr	r1, [sp, #44]	; 0x2c
   15964:	cmp	r1, #0
   15968:	bne	15bc8 <__assert_fail@plt+0x4670>
   1596c:	cmp	sl, r4
   15970:	mov	r7, r3
   15974:	movhi	r1, #63	; 0x3f
   15978:	mov	r5, r2
   1597c:	mov	r3, fp
   15980:	strbhi	r1, [r9, r4]
   15984:	add	r1, r4, #1
   15988:	cmp	sl, r1
   1598c:	movhi	r0, #34	; 0x22
   15990:	strbhi	r0, [r9, r1]
   15994:	add	r1, r4, #2
   15998:	cmp	sl, r1
   1599c:	movhi	r0, #34	; 0x22
   159a0:	strbhi	r0, [r9, r1]
   159a4:	add	r1, r4, #3
   159a8:	add	r4, r4, #4
   159ac:	cmp	sl, r1
   159b0:	movhi	r0, #63	; 0x3f
   159b4:	strbhi	r0, [r9, r1]
   159b8:	b	14b9c <__assert_fail@plt+0x3644>
   159bc:	mov	fp, r9
   159c0:	b	14c7c <__assert_fail@plt+0x3724>
   159c4:	ldr	r3, [sp, #188]	; 0xbc
   159c8:	ldrb	r3, [r3]
   159cc:	cmp	r3, #0
   159d0:	beq	1430c <__assert_fail@plt+0x2db4>
   159d4:	ldr	r2, [sp, #188]	; 0xbc
   159d8:	cmp	sl, r4
   159dc:	bls	159fc <__assert_fail@plt+0x44a4>
   159e0:	strb	r3, [fp, r4]
   159e4:	add	r4, r4, #1
   159e8:	ldrb	r3, [r2, #1]!
   159ec:	cmp	r3, #0
   159f0:	beq	1430c <__assert_fail@plt+0x2db4>
   159f4:	cmp	sl, r4
   159f8:	bhi	159e0 <__assert_fail@plt+0x4488>
   159fc:	ldrb	r3, [r2, #1]!
   15a00:	add	r4, r4, #1
   15a04:	cmp	r3, #0
   15a08:	bne	159d8 <__assert_fail@plt+0x4480>
   15a0c:	b	1430c <__assert_fail@plt+0x2db4>
   15a10:	add	r9, sp, #100	; 0x64
   15a14:	mov	r0, r5
   15a18:	ldr	r2, [sp, #60]	; 0x3c
   15a1c:	mov	r6, #0
   15a20:	ldm	r9, {r9, sl, fp}
   15a24:	ldr	r5, [sp, #112]	; 0x70
   15a28:	ldr	r4, [sp, #116]	; 0x74
   15a2c:	b	156dc <__assert_fail@plt+0x4184>
   15a30:	cmp	r4, r8
   15a34:	add	r9, sp, #100	; 0x64
   15a38:	mov	r1, r4
   15a3c:	mov	r2, fp
   15a40:	ldm	r9, {r9, sl, fp}
   15a44:	mov	r3, r5
   15a48:	mov	r0, r5
   15a4c:	ldr	r5, [sp, #112]	; 0x70
   15a50:	ldr	r4, [sp, #116]	; 0x74
   15a54:	bcs	15a88 <__assert_fail@plt+0x4530>
   15a58:	ldrb	r6, [r2]
   15a5c:	cmp	r6, #0
   15a60:	bne	15a74 <__assert_fail@plt+0x451c>
   15a64:	b	15bc0 <__assert_fail@plt+0x4668>
   15a68:	ldrb	r6, [r2, #1]!
   15a6c:	cmp	r6, #0
   15a70:	beq	15b58 <__assert_fail@plt+0x4600>
   15a74:	add	r3, r3, #1
   15a78:	add	r1, r7, r3
   15a7c:	cmp	r8, r1
   15a80:	bhi	15a68 <__assert_fail@plt+0x4510>
   15a84:	mov	r0, r3
   15a88:	mov	r6, #0
   15a8c:	ldr	r2, [sp, #60]	; 0x3c
   15a90:	b	156dc <__assert_fail@plt+0x4184>
   15a94:	mov	r3, #1
   15a98:	mov	r4, #0
   15a9c:	mov	r9, r4
   15aa0:	str	r3, [sp, #32]
   15aa4:	str	r3, [sp, #44]	; 0x2c
   15aa8:	str	r3, [sp, #48]	; 0x30
   15aac:	str	r4, [sp, #52]	; 0x34
   15ab0:	str	r3, [sp, #56]	; 0x38
   15ab4:	str	r3, [sp, #60]	; 0x3c
   15ab8:	str	r3, [sp, #88]	; 0x58
   15abc:	movw	r3, #58104	; 0xe2f8
   15ac0:	movt	r3, #2
   15ac4:	str	r4, [sp, #64]	; 0x40
   15ac8:	str	r4, [sp, #68]	; 0x44
   15acc:	str	r3, [sp, #72]	; 0x48
   15ad0:	str	r4, [sp, #80]	; 0x50
   15ad4:	str	r4, [sp, #84]	; 0x54
   15ad8:	b	14374 <__assert_fail@plt+0x2e1c>
   15adc:	mov	fp, r9
   15ae0:	b	14c90 <__assert_fail@plt+0x3738>
   15ae4:	ldr	r3, [sp, #48]	; 0x30
   15ae8:	b	15604 <__assert_fail@plt+0x40ac>
   15aec:	mov	r2, r3
   15af0:	ldr	r3, [sp, #72]	; 0x48
   15af4:	cmp	r3, #0
   15af8:	moveq	r2, #0
   15afc:	andne	r2, r2, #1
   15b00:	cmp	r2, #0
   15b04:	beq	15b34 <__assert_fail@plt+0x45dc>
   15b08:	mov	r2, r3
   15b0c:	ldrb	r3, [r3]
   15b10:	cmp	r3, #0
   15b14:	beq	15b34 <__assert_fail@plt+0x45dc>
   15b18:	cmp	sl, r4
   15b1c:	bls	15b44 <__assert_fail@plt+0x45ec>
   15b20:	strb	r3, [fp, r4]
   15b24:	add	r4, r4, #1
   15b28:	ldrb	r3, [r2, #1]!
   15b2c:	cmp	r3, #0
   15b30:	bne	15b18 <__assert_fail@plt+0x45c0>
   15b34:	cmp	sl, r4
   15b38:	movhi	r3, #0
   15b3c:	strbhi	r3, [fp, r4]
   15b40:	b	14ccc <__assert_fail@plt+0x3774>
   15b44:	ldrb	r3, [r2, #1]!
   15b48:	add	r4, r4, #1
   15b4c:	cmp	r3, #0
   15b50:	bne	15b18 <__assert_fail@plt+0x45c0>
   15b54:	b	15b34 <__assert_fail@plt+0x45dc>
   15b58:	mov	r0, r3
   15b5c:	ldr	r2, [sp, #60]	; 0x3c
   15b60:	b	156dc <__assert_fail@plt+0x4184>
   15b64:	mov	ip, #5
   15b68:	mov	r3, r8
   15b6c:	ldr	r1, [sp, #84]	; 0x54
   15b70:	str	ip, [sp]
   15b74:	ldr	r2, [sp, #180]	; 0xb4
   15b78:	ldr	ip, [sp, #188]	; 0xbc
   15b7c:	ldr	r0, [sp, #184]	; 0xb8
   15b80:	str	r2, [sp, #4]
   15b84:	ldr	r2, [sp, #28]
   15b88:	str	ip, [sp, #12]
   15b8c:	ldr	ip, [sp, #192]	; 0xc0
   15b90:	str	r0, [sp, #8]
   15b94:	mov	r0, fp
   15b98:	str	ip, [sp, #16]
   15b9c:	bl	14250 <__assert_fail@plt+0x2cf8>
   15ba0:	mov	r4, r0
   15ba4:	b	14ccc <__assert_fail@plt+0x3774>
   15ba8:	mov	r6, r3
   15bac:	str	r3, [sp, #40]	; 0x28
   15bb0:	b	14c3c <__assert_fail@plt+0x36e4>
   15bb4:	mov	r3, #2
   15bb8:	str	r3, [sp, #176]	; 0xb0
   15bbc:	b	14c7c <__assert_fail@plt+0x3724>
   15bc0:	ldr	r2, [sp, #60]	; 0x3c
   15bc4:	b	156dc <__assert_fail@plt+0x4184>
   15bc8:	mov	r3, #5
   15bcc:	mov	fp, r9
   15bd0:	str	r3, [sp, #176]	; 0xb0
   15bd4:	b	14c90 <__assert_fail@plt+0x3738>
   15bd8:	mov	r1, #1
   15bdc:	mov	r9, #0
   15be0:	mov	r3, r9
   15be4:	mov	r2, r9
   15be8:	str	r1, [sp, #32]
   15bec:	str	sl, [sp, #84]	; 0x54
   15bf0:	b	14a18 <__assert_fail@plt+0x34c0>
   15bf4:	mov	r3, #0
   15bf8:	mov	r2, #1
   15bfc:	mov	r9, r3
   15c00:	mov	r4, r3
   15c04:	str	r2, [sp, #32]
   15c08:	strd	r2, [sp, #44]	; 0x2c
   15c0c:	strd	r2, [sp, #56]	; 0x38
   15c10:	str	r3, [sp, #80]	; 0x50
   15c14:	str	r3, [sp, #84]	; 0x54
   15c18:	str	r3, [sp, #88]	; 0x58
   15c1c:	movw	r3, #57632	; 0xe120
   15c20:	movt	r3, #2
   15c24:	str	r2, [sp, #52]	; 0x34
   15c28:	str	r2, [sp, #64]	; 0x40
   15c2c:	str	r2, [sp, #68]	; 0x44
   15c30:	str	r3, [sp, #72]	; 0x48
   15c34:	b	14374 <__assert_fail@plt+0x2e1c>
   15c38:	bl	11534 <abort@plt>
   15c3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c40:	mov	r4, r0
   15c44:	mov	r5, r3
   15c48:	strd	r6, [sp, #8]
   15c4c:	movw	r7, #61800	; 0xf168
   15c50:	movt	r7, #3
   15c54:	strd	r8, [sp, #16]
   15c58:	strd	sl, [sp, #24]
   15c5c:	mov	sl, r1
   15c60:	mov	fp, r2
   15c64:	str	lr, [sp, #32]
   15c68:	sub	sp, sp, #60	; 0x3c
   15c6c:	bl	1142c <__errno_location@plt>
   15c70:	mov	r8, r0
   15c74:	cmn	r4, #-2147483647	; 0x80000001
   15c78:	ldr	r6, [r7]
   15c7c:	movne	r0, #0
   15c80:	moveq	r0, #1
   15c84:	ldr	r3, [r8]
   15c88:	orrs	r0, r0, r4, lsr #31
   15c8c:	str	r3, [sp, #28]
   15c90:	bne	15e20 <__assert_fail@plt+0x48c8>
   15c94:	ldr	r3, [r7, #4]
   15c98:	cmp	r3, r4
   15c9c:	bgt	15cfc <__assert_fail@plt+0x47a4>
   15ca0:	add	r1, r7, #8
   15ca4:	sub	r2, r4, r3
   15ca8:	str	r3, [sp, #52]	; 0x34
   15cac:	cmp	r6, r1
   15cb0:	add	r2, r2, #1
   15cb4:	beq	15df8 <__assert_fail@plt+0x48a0>
   15cb8:	mov	r1, #8
   15cbc:	mov	r0, r6
   15cc0:	mvn	r3, #-2147483648	; 0x80000000
   15cc4:	str	r1, [sp]
   15cc8:	add	r1, sp, #52	; 0x34
   15ccc:	bl	2a988 <__assert_fail@plt+0x19430>
   15cd0:	mov	r6, r0
   15cd4:	str	r0, [r7]
   15cd8:	ldr	r0, [r7, #4]
   15cdc:	mov	r1, #0
   15ce0:	ldr	r2, [sp, #52]	; 0x34
   15ce4:	sub	r2, r2, r0
   15ce8:	add	r0, r6, r0, lsl #3
   15cec:	lsl	r2, r2, #3
   15cf0:	bl	1145c <memset@plt>
   15cf4:	ldr	r3, [sp, #52]	; 0x34
   15cf8:	str	r3, [r7, #4]
   15cfc:	ldr	r1, [r5, #4]
   15d00:	add	r0, r6, r4, lsl #3
   15d04:	add	ip, r5, #8
   15d08:	mov	r3, fp
   15d0c:	mov	r2, sl
   15d10:	ldr	r7, [r0, #4]
   15d14:	str	r0, [sp, #36]	; 0x24
   15d18:	str	ip, [sp, #40]	; 0x28
   15d1c:	orr	r0, r1, #1
   15d20:	ldr	r9, [r6, r4, lsl #3]
   15d24:	str	ip, [sp, #8]
   15d28:	ldr	lr, [r5, #44]	; 0x2c
   15d2c:	str	r0, [sp, #4]
   15d30:	ldr	ip, [r5]
   15d34:	mov	r1, r9
   15d38:	str	ip, [sp, #32]
   15d3c:	ldr	ip, [r5, #40]	; 0x28
   15d40:	str	ip, [sp, #12]
   15d44:	ldr	ip, [sp, #32]
   15d48:	str	lr, [sp, #16]
   15d4c:	str	r0, [sp, #44]	; 0x2c
   15d50:	mov	r0, r7
   15d54:	str	ip, [sp]
   15d58:	bl	14250 <__assert_fail@plt+0x2cf8>
   15d5c:	cmp	r9, r0
   15d60:	bhi	15dd0 <__assert_fail@plt+0x4878>
   15d64:	add	r9, r0, #1
   15d68:	movw	r3, #62148	; 0xf2c4
   15d6c:	movt	r3, #3
   15d70:	cmp	r7, r3
   15d74:	str	r9, [r6, r4, lsl #3]
   15d78:	beq	15d84 <__assert_fail@plt+0x482c>
   15d7c:	mov	r0, r7
   15d80:	bl	13e1c <__assert_fail@plt+0x28c4>
   15d84:	mov	r0, r9
   15d88:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   15d8c:	ldr	ip, [r5]
   15d90:	mov	r3, fp
   15d94:	mov	r2, sl
   15d98:	mov	r1, r9
   15d9c:	mov	r7, r0
   15da0:	ldr	lr, [sp, #36]	; 0x24
   15da4:	ldr	r4, [r5, #40]	; 0x28
   15da8:	str	r0, [lr, #4]
   15dac:	ldr	lr, [r5, #44]	; 0x2c
   15db0:	str	ip, [sp]
   15db4:	ldr	ip, [sp, #44]	; 0x2c
   15db8:	str	ip, [sp, #4]
   15dbc:	ldr	ip, [sp, #40]	; 0x28
   15dc0:	str	r4, [sp, #12]
   15dc4:	str	lr, [sp, #16]
   15dc8:	str	ip, [sp, #8]
   15dcc:	bl	14250 <__assert_fail@plt+0x2cf8>
   15dd0:	ldr	r3, [sp, #28]
   15dd4:	mov	r0, r7
   15dd8:	str	r3, [r8]
   15ddc:	add	sp, sp, #60	; 0x3c
   15de0:	ldrd	r4, [sp]
   15de4:	ldrd	r6, [sp, #8]
   15de8:	ldrd	r8, [sp, #16]
   15dec:	ldrd	sl, [sp, #24]
   15df0:	add	sp, sp, #32
   15df4:	pop	{pc}		; (ldr pc, [sp], #4)
   15df8:	mov	r1, #8
   15dfc:	mvn	r3, #-2147483648	; 0x80000000
   15e00:	str	r1, [sp]
   15e04:	add	r1, sp, #52	; 0x34
   15e08:	bl	2a988 <__assert_fail@plt+0x19430>
   15e0c:	ldrd	r2, [r7, #8]
   15e10:	mov	r6, r0
   15e14:	str	r0, [r7]
   15e18:	strd	r2, [r0]
   15e1c:	b	15cd8 <__assert_fail@plt+0x4780>
   15e20:	bl	11534 <abort@plt>
   15e24:	strd	r4, [sp, #-16]!
   15e28:	mov	r5, r0
   15e2c:	str	r6, [sp, #8]
   15e30:	str	lr, [sp, #12]
   15e34:	bl	1142c <__errno_location@plt>
   15e38:	mov	r4, r0
   15e3c:	cmp	r5, #0
   15e40:	ldr	r0, [pc, #32]	; 15e68 <__assert_fail@plt+0x4910>
   15e44:	mov	r1, #48	; 0x30
   15e48:	movne	r0, r5
   15e4c:	ldr	r6, [r4]
   15e50:	bl	2ab28 <__assert_fail@plt+0x195d0>
   15e54:	str	r6, [r4]
   15e58:	ldrd	r4, [sp]
   15e5c:	ldr	r6, [sp, #8]
   15e60:	add	sp, sp, #12
   15e64:	pop	{pc}		; (ldr pc, [sp], #4)
   15e68:	andeq	pc, r3, r4, asr #7
   15e6c:	ldr	r3, [pc, #12]	; 15e80 <__assert_fail@plt+0x4928>
   15e70:	cmp	r0, #0
   15e74:	moveq	r0, r3
   15e78:	ldr	r0, [r0]
   15e7c:	bx	lr
   15e80:	andeq	pc, r3, r4, asr #7
   15e84:	ldr	r3, [pc, #12]	; 15e98 <__assert_fail@plt+0x4940>
   15e88:	cmp	r0, #0
   15e8c:	moveq	r0, r3
   15e90:	str	r1, [r0]
   15e94:	bx	lr
   15e98:	andeq	pc, r3, r4, asr #7
   15e9c:	ldr	r3, [pc, #52]	; 15ed8 <__assert_fail@plt+0x4980>
   15ea0:	cmp	r0, #0
   15ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   15ea8:	lsr	lr, r1, #5
   15eac:	and	r1, r1, #31
   15eb0:	moveq	r0, r3
   15eb4:	add	r3, r0, #8
   15eb8:	ldr	ip, [r3, lr, lsl #2]
   15ebc:	lsr	r0, ip, r1
   15ec0:	eor	r2, r2, r0
   15ec4:	and	r0, r0, #1
   15ec8:	and	r2, r2, #1
   15ecc:	eor	r1, ip, r2, lsl r1
   15ed0:	str	r1, [r3, lr, lsl #2]
   15ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ed8:	andeq	pc, r3, r4, asr #7
   15edc:	ldr	r3, [pc, #16]	; 15ef4 <__assert_fail@plt+0x499c>
   15ee0:	cmp	r0, #0
   15ee4:	movne	r3, r0
   15ee8:	ldr	r0, [r3, #4]
   15eec:	str	r1, [r3, #4]
   15ef0:	bx	lr
   15ef4:	andeq	pc, r3, r4, asr #7
   15ef8:	ldr	r3, [pc, #48]	; 15f30 <__assert_fail@plt+0x49d8>
   15efc:	cmp	r0, #0
   15f00:	mov	ip, #10
   15f04:	moveq	r0, r3
   15f08:	cmp	r2, #0
   15f0c:	cmpne	r1, #0
   15f10:	str	ip, [r0]
   15f14:	beq	15f24 <__assert_fail@plt+0x49cc>
   15f18:	str	r1, [r0, #40]	; 0x28
   15f1c:	str	r2, [r0, #44]	; 0x2c
   15f20:	bx	lr
   15f24:	str	r4, [sp, #-8]!
   15f28:	str	lr, [sp, #4]
   15f2c:	bl	11534 <abort@plt>
   15f30:	andeq	pc, r3, r4, asr #7
   15f34:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15f38:	strd	r6, [sp, #8]
   15f3c:	mov	r7, r0
   15f40:	mov	r6, r1
   15f44:	strd	r8, [sp, #16]
   15f48:	mov	r8, r2
   15f4c:	mov	r9, r3
   15f50:	str	lr, [sp, #24]
   15f54:	sub	sp, sp, #28
   15f58:	ldr	r4, [sp, #56]	; 0x38
   15f5c:	ldr	ip, [pc, #104]	; 15fcc <__assert_fail@plt+0x4a74>
   15f60:	cmp	r4, #0
   15f64:	moveq	r4, ip
   15f68:	bl	1142c <__errno_location@plt>
   15f6c:	ldr	ip, [r4, #44]	; 0x2c
   15f70:	mov	r5, r0
   15f74:	mov	r1, r6
   15f78:	add	lr, r4, #8
   15f7c:	mov	r3, r9
   15f80:	ldr	r6, [r5]
   15f84:	mov	r2, r8
   15f88:	mov	r0, r7
   15f8c:	str	ip, [sp, #16]
   15f90:	ldr	ip, [r4, #40]	; 0x28
   15f94:	str	lr, [sp, #8]
   15f98:	str	ip, [sp, #12]
   15f9c:	ldr	ip, [r4, #4]
   15fa0:	str	ip, [sp, #4]
   15fa4:	ldr	ip, [r4]
   15fa8:	str	ip, [sp]
   15fac:	bl	14250 <__assert_fail@plt+0x2cf8>
   15fb0:	str	r6, [r5]
   15fb4:	add	sp, sp, #28
   15fb8:	ldrd	r4, [sp]
   15fbc:	ldrd	r6, [sp, #8]
   15fc0:	ldrd	r8, [sp, #16]
   15fc4:	add	sp, sp, #24
   15fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fcc:	andeq	pc, r3, r4, asr #7
   15fd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15fd4:	cmp	r2, #0
   15fd8:	ldr	r4, [pc, #192]	; 160a0 <__assert_fail@plt+0x4b48>
   15fdc:	movne	r4, r2
   15fe0:	strd	r6, [sp, #8]
   15fe4:	strd	r8, [sp, #16]
   15fe8:	mov	r9, r1
   15fec:	mov	r8, r0
   15ff0:	strd	sl, [sp, #24]
   15ff4:	str	lr, [sp, #32]
   15ff8:	sub	sp, sp, #36	; 0x24
   15ffc:	bl	1142c <__errno_location@plt>
   16000:	ldr	r5, [r4, #4]
   16004:	mov	r6, r0
   16008:	add	r7, r4, #8
   1600c:	mov	r1, #0
   16010:	mov	r3, r9
   16014:	ldr	ip, [r4, #44]	; 0x2c
   16018:	mov	r2, r8
   1601c:	mov	r0, r1
   16020:	ldr	sl, [r6]
   16024:	orr	r5, r5, #1
   16028:	str	ip, [sp, #16]
   1602c:	ldr	ip, [r4, #40]	; 0x28
   16030:	stmib	sp, {r5, r7, ip}
   16034:	ldr	ip, [r4]
   16038:	str	ip, [sp]
   1603c:	bl	14250 <__assert_fail@plt+0x2cf8>
   16040:	add	r1, r0, #1
   16044:	mov	r0, r1
   16048:	str	r1, [sp, #28]
   1604c:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   16050:	ldr	ip, [r4, #44]	; 0x2c
   16054:	mov	fp, r0
   16058:	mov	r3, r9
   1605c:	mov	r2, r8
   16060:	ldr	r1, [sp, #28]
   16064:	str	ip, [sp, #16]
   16068:	ldr	ip, [r4, #40]	; 0x28
   1606c:	stmib	sp, {r5, r7, ip}
   16070:	ldr	ip, [r4]
   16074:	str	ip, [sp]
   16078:	bl	14250 <__assert_fail@plt+0x2cf8>
   1607c:	mov	r0, fp
   16080:	str	sl, [r6]
   16084:	add	sp, sp, #36	; 0x24
   16088:	ldrd	r4, [sp]
   1608c:	ldrd	r6, [sp, #8]
   16090:	ldrd	r8, [sp, #16]
   16094:	ldrd	sl, [sp, #24]
   16098:	add	sp, sp, #32
   1609c:	pop	{pc}		; (ldr pc, [sp], #4)
   160a0:	andeq	pc, r3, r4, asr #7
   160a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   160a8:	cmp	r3, #0
   160ac:	ldr	r4, [pc, #220]	; 16190 <__assert_fail@plt+0x4c38>
   160b0:	movne	r4, r3
   160b4:	strd	r6, [sp, #8]
   160b8:	mov	r6, r2
   160bc:	strd	r8, [sp, #16]
   160c0:	mov	r9, r0
   160c4:	strd	sl, [sp, #24]
   160c8:	mov	sl, r1
   160cc:	str	lr, [sp, #32]
   160d0:	sub	sp, sp, #44	; 0x2c
   160d4:	bl	1142c <__errno_location@plt>
   160d8:	ldr	r5, [r4, #4]
   160dc:	mov	r7, r0
   160e0:	mov	r1, #0
   160e4:	add	r8, r4, #8
   160e8:	mov	r3, sl
   160ec:	ldr	ip, [r4, #44]	; 0x2c
   160f0:	mov	r2, r9
   160f4:	mov	r0, r1
   160f8:	ldr	lr, [r7]
   160fc:	cmp	r6, r1
   16100:	orreq	r5, r5, #1
   16104:	str	ip, [sp, #16]
   16108:	ldr	ip, [r4, #40]	; 0x28
   1610c:	stmib	sp, {r5, r8, ip}
   16110:	ldr	ip, [r4]
   16114:	str	lr, [sp, #28]
   16118:	str	ip, [sp]
   1611c:	bl	14250 <__assert_fail@plt+0x2cf8>
   16120:	add	r1, r0, #1
   16124:	mov	fp, r0
   16128:	mov	r0, r1
   1612c:	str	r1, [sp, #36]	; 0x24
   16130:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   16134:	ldr	ip, [r4, #44]	; 0x2c
   16138:	mov	r3, sl
   1613c:	mov	r2, r9
   16140:	ldr	r1, [sp, #36]	; 0x24
   16144:	str	ip, [sp, #16]
   16148:	ldr	ip, [r4, #40]	; 0x28
   1614c:	str	r0, [sp, #32]
   16150:	stmib	sp, {r5, r8, ip}
   16154:	ldr	ip, [r4]
   16158:	str	ip, [sp]
   1615c:	bl	14250 <__assert_fail@plt+0x2cf8>
   16160:	ldr	lr, [sp, #28]
   16164:	cmp	r6, #0
   16168:	ldr	r0, [sp, #32]
   1616c:	str	lr, [r7]
   16170:	strne	fp, [r6]
   16174:	add	sp, sp, #44	; 0x2c
   16178:	ldrd	r4, [sp]
   1617c:	ldrd	r6, [sp, #8]
   16180:	ldrd	r8, [sp, #16]
   16184:	ldrd	sl, [sp, #24]
   16188:	add	sp, sp, #32
   1618c:	pop	{pc}		; (ldr pc, [sp], #4)
   16190:	andeq	pc, r3, r4, asr #7
   16194:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16198:	movw	r5, #61800	; 0xf168
   1619c:	movt	r5, #3
   161a0:	ldr	r3, [r5, #4]
   161a4:	strd	r6, [sp, #8]
   161a8:	str	r8, [sp, #16]
   161ac:	str	lr, [sp, #20]
   161b0:	ldr	r7, [r5]
   161b4:	cmp	r3, #1
   161b8:	ble	161dc <__assert_fail@plt+0x4c84>
   161bc:	mov	r4, #1
   161c0:	add	r6, r7, #4
   161c4:	ldr	r0, [r6, r4, lsl #3]
   161c8:	add	r4, r4, #1
   161cc:	bl	13e1c <__assert_fail@plt+0x28c4>
   161d0:	ldr	r3, [r5, #4]
   161d4:	cmp	r3, r4
   161d8:	bgt	161c4 <__assert_fail@plt+0x4c6c>
   161dc:	ldr	r0, [r7, #4]
   161e0:	movw	r4, #62148	; 0xf2c4
   161e4:	movt	r4, #3
   161e8:	cmp	r0, r4
   161ec:	beq	16200 <__assert_fail@plt+0x4ca8>
   161f0:	bl	13e1c <__assert_fail@plt+0x28c4>
   161f4:	mov	r3, #256	; 0x100
   161f8:	str	r3, [r5, #8]
   161fc:	str	r4, [r5, #12]
   16200:	ldr	r4, [pc, #44]	; 16234 <__assert_fail@plt+0x4cdc>
   16204:	cmp	r7, r4
   16208:	beq	16218 <__assert_fail@plt+0x4cc0>
   1620c:	mov	r0, r7
   16210:	bl	13e1c <__assert_fail@plt+0x28c4>
   16214:	str	r4, [r5]
   16218:	mov	r3, #1
   1621c:	ldrd	r6, [sp, #8]
   16220:	str	r3, [r5, #4]
   16224:	ldrd	r4, [sp]
   16228:	ldr	r8, [sp, #16]
   1622c:	add	sp, sp, #20
   16230:	pop	{pc}		; (ldr pc, [sp], #4)
   16234:	andeq	pc, r3, r0, ror r1	; <UNPREDICTABLE>
   16238:	ldr	r3, [pc, #4]	; 16244 <__assert_fail@plt+0x4cec>
   1623c:	mvn	r2, #0
   16240:	b	15c3c <__assert_fail@plt+0x46e4>
   16244:	andeq	pc, r3, r4, asr #7
   16248:	ldr	r3, [pc]	; 16250 <__assert_fail@plt+0x4cf8>
   1624c:	b	15c3c <__assert_fail@plt+0x46e4>
   16250:	andeq	pc, r3, r4, asr #7
   16254:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16258:	movw	r4, #61800	; 0xf168
   1625c:	movt	r4, #3
   16260:	strd	r6, [sp, #8]
   16264:	strd	r8, [sp, #16]
   16268:	strd	sl, [sp, #24]
   1626c:	mov	sl, r0
   16270:	str	lr, [sp, #32]
   16274:	sub	sp, sp, #44	; 0x2c
   16278:	bl	1142c <__errno_location@plt>
   1627c:	ldr	r3, [r0]
   16280:	mov	r8, r0
   16284:	ldr	r2, [r4, #4]
   16288:	ldr	r5, [r4]
   1628c:	str	r3, [sp, #28]
   16290:	cmp	r2, #0
   16294:	bgt	162f0 <__assert_fail@plt+0x4d98>
   16298:	add	r3, r4, #8
   1629c:	str	r2, [sp, #36]	; 0x24
   162a0:	rsb	r2, r2, #1
   162a4:	cmp	r5, r3
   162a8:	beq	163bc <__assert_fail@plt+0x4e64>
   162ac:	mov	r1, #8
   162b0:	mov	r0, r5
   162b4:	mvn	r3, #-2147483648	; 0x80000000
   162b8:	str	r1, [sp]
   162bc:	add	r1, sp, #36	; 0x24
   162c0:	bl	2a988 <__assert_fail@plt+0x19430>
   162c4:	mov	r5, r0
   162c8:	str	r0, [r4]
   162cc:	ldr	r0, [r4, #4]
   162d0:	mov	r1, #0
   162d4:	ldr	r2, [sp, #36]	; 0x24
   162d8:	sub	r2, r2, r0
   162dc:	add	r0, r5, r0, lsl #3
   162e0:	lsl	r2, r2, #3
   162e4:	bl	1145c <memset@plt>
   162e8:	ldr	r3, [sp, #36]	; 0x24
   162ec:	str	r3, [r4, #4]
   162f0:	movw	r4, #62148	; 0xf2c4
   162f4:	movt	r4, #3
   162f8:	ldr	r9, [r5]
   162fc:	add	fp, r4, #264	; 0x108
   16300:	mvn	r3, #0
   16304:	ldr	r7, [r4, #260]	; 0x104
   16308:	mov	r2, sl
   1630c:	ldr	r6, [r5, #4]
   16310:	str	fp, [sp, #8]
   16314:	mov	r1, r9
   16318:	ldr	ip, [r4, #256]	; 0x100
   1631c:	orr	r7, r7, #1
   16320:	ldr	lr, [r4, #300]	; 0x12c
   16324:	mov	r0, r6
   16328:	str	ip, [sp]
   1632c:	str	r7, [sp, #4]
   16330:	str	lr, [sp, #16]
   16334:	ldr	ip, [r4, #296]	; 0x128
   16338:	str	ip, [sp, #12]
   1633c:	bl	14250 <__assert_fail@plt+0x2cf8>
   16340:	cmp	r9, r0
   16344:	bhi	16394 <__assert_fail@plt+0x4e3c>
   16348:	add	r9, r0, #1
   1634c:	cmp	r6, r4
   16350:	str	r9, [r5]
   16354:	beq	16360 <__assert_fail@plt+0x4e08>
   16358:	mov	r0, r6
   1635c:	bl	13e1c <__assert_fail@plt+0x28c4>
   16360:	mov	r0, r9
   16364:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   16368:	ldr	r3, [r4, #256]	; 0x100
   1636c:	mov	r2, sl
   16370:	mov	r1, r9
   16374:	mov	r6, r0
   16378:	ldr	lr, [r4, #296]	; 0x128
   1637c:	ldr	ip, [r4, #300]	; 0x12c
   16380:	str	r0, [r5, #4]
   16384:	stm	sp, {r3, r7, fp, lr}
   16388:	mvn	r3, #0
   1638c:	str	ip, [sp, #16]
   16390:	bl	14250 <__assert_fail@plt+0x2cf8>
   16394:	ldr	r3, [sp, #28]
   16398:	mov	r0, r6
   1639c:	str	r3, [r8]
   163a0:	add	sp, sp, #44	; 0x2c
   163a4:	ldrd	r4, [sp]
   163a8:	ldrd	r6, [sp, #8]
   163ac:	ldrd	r8, [sp, #16]
   163b0:	ldrd	sl, [sp, #24]
   163b4:	add	sp, sp, #32
   163b8:	pop	{pc}		; (ldr pc, [sp], #4)
   163bc:	mov	r0, #8
   163c0:	mvn	r3, #-2147483648	; 0x80000000
   163c4:	add	r1, sp, #36	; 0x24
   163c8:	str	r0, [sp]
   163cc:	mov	r0, #0
   163d0:	bl	2a988 <__assert_fail@plt+0x19430>
   163d4:	ldrd	r2, [r4, #8]
   163d8:	mov	r5, r0
   163dc:	str	r0, [r4]
   163e0:	strd	r2, [r0]
   163e4:	b	162cc <__assert_fail@plt+0x4d74>
   163e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   163ec:	movw	r4, #61800	; 0xf168
   163f0:	movt	r4, #3
   163f4:	strd	r6, [sp, #8]
   163f8:	strd	r8, [sp, #16]
   163fc:	strd	sl, [sp, #24]
   16400:	mov	sl, r0
   16404:	mov	fp, r1
   16408:	str	lr, [sp, #32]
   1640c:	sub	sp, sp, #44	; 0x2c
   16410:	bl	1142c <__errno_location@plt>
   16414:	ldr	r3, [r0]
   16418:	mov	r8, r0
   1641c:	ldr	r2, [r4, #4]
   16420:	ldr	r5, [r4]
   16424:	str	r3, [sp, #28]
   16428:	cmp	r2, #0
   1642c:	bgt	16488 <__assert_fail@plt+0x4f30>
   16430:	add	r3, r4, #8
   16434:	str	r2, [sp, #36]	; 0x24
   16438:	rsb	r2, r2, #1
   1643c:	cmp	r5, r3
   16440:	beq	16564 <__assert_fail@plt+0x500c>
   16444:	mov	r1, #8
   16448:	mov	r0, r5
   1644c:	mvn	r3, #-2147483648	; 0x80000000
   16450:	str	r1, [sp]
   16454:	add	r1, sp, #36	; 0x24
   16458:	bl	2a988 <__assert_fail@plt+0x19430>
   1645c:	mov	r5, r0
   16460:	str	r0, [r4]
   16464:	ldr	r0, [r4, #4]
   16468:	mov	r1, #0
   1646c:	ldr	r2, [sp, #36]	; 0x24
   16470:	sub	r2, r2, r0
   16474:	add	r0, r5, r0, lsl #3
   16478:	lsl	r2, r2, #3
   1647c:	bl	1145c <memset@plt>
   16480:	ldr	r3, [sp, #36]	; 0x24
   16484:	str	r3, [r4, #4]
   16488:	movw	r4, #62148	; 0xf2c4
   1648c:	movt	r4, #3
   16490:	ldr	r9, [r5]
   16494:	add	r0, r4, #264	; 0x108
   16498:	mov	r3, fp
   1649c:	ldr	r7, [r4, #260]	; 0x104
   164a0:	mov	r2, sl
   164a4:	ldr	r6, [r5, #4]
   164a8:	str	r0, [sp, #8]
   164ac:	mov	r1, r9
   164b0:	ldr	ip, [r4, #256]	; 0x100
   164b4:	orr	r7, r7, #1
   164b8:	ldr	lr, [r4, #300]	; 0x12c
   164bc:	mov	r0, r6
   164c0:	str	ip, [sp]
   164c4:	str	r7, [sp, #4]
   164c8:	str	lr, [sp, #16]
   164cc:	ldr	ip, [r4, #296]	; 0x128
   164d0:	str	ip, [sp, #12]
   164d4:	bl	14250 <__assert_fail@plt+0x2cf8>
   164d8:	cmp	r9, r0
   164dc:	bhi	1653c <__assert_fail@plt+0x4fe4>
   164e0:	add	r9, r0, #1
   164e4:	cmp	r6, r4
   164e8:	str	r9, [r5]
   164ec:	beq	164f8 <__assert_fail@plt+0x4fa0>
   164f0:	mov	r0, r6
   164f4:	bl	13e1c <__assert_fail@plt+0x28c4>
   164f8:	mov	r0, r9
   164fc:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   16500:	ldr	ip, [r4, #256]	; 0x100
   16504:	mov	r1, r9
   16508:	mov	r3, fp
   1650c:	mov	r2, sl
   16510:	mov	r6, r0
   16514:	ldr	r9, [r4, #296]	; 0x128
   16518:	ldr	lr, [r4, #300]	; 0x12c
   1651c:	str	r0, [r5, #4]
   16520:	str	ip, [sp]
   16524:	ldr	ip, [pc, #100]	; 16590 <__assert_fail@plt+0x5038>
   16528:	str	r7, [sp, #4]
   1652c:	str	ip, [sp, #8]
   16530:	str	r9, [sp, #12]
   16534:	str	lr, [sp, #16]
   16538:	bl	14250 <__assert_fail@plt+0x2cf8>
   1653c:	ldr	r3, [sp, #28]
   16540:	mov	r0, r6
   16544:	str	r3, [r8]
   16548:	add	sp, sp, #44	; 0x2c
   1654c:	ldrd	r4, [sp]
   16550:	ldrd	r6, [sp, #8]
   16554:	ldrd	r8, [sp, #16]
   16558:	ldrd	sl, [sp, #24]
   1655c:	add	sp, sp, #32
   16560:	pop	{pc}		; (ldr pc, [sp], #4)
   16564:	mov	r0, #8
   16568:	mvn	r3, #-2147483648	; 0x80000000
   1656c:	add	r1, sp, #36	; 0x24
   16570:	str	r0, [sp]
   16574:	mov	r0, #0
   16578:	bl	2a988 <__assert_fail@plt+0x19430>
   1657c:	ldrd	r2, [r4, #8]
   16580:	mov	r5, r0
   16584:	str	r0, [r4]
   16588:	strd	r2, [r0]
   1658c:	b	16464 <__assert_fail@plt+0x4f0c>
   16590:	andeq	pc, r3, ip, asr #7
   16594:	strd	r4, [sp, #-20]!	; 0xffffffec
   16598:	mov	r4, #0
   1659c:	mov	r5, #0
   165a0:	strd	r6, [sp, #8]
   165a4:	cmp	r1, #10
   165a8:	str	lr, [sp, #16]
   165ac:	sub	sp, sp, #100	; 0x64
   165b0:	strd	r4, [sp, #48]	; 0x30
   165b4:	beq	165fc <__assert_fail@plt+0x50a4>
   165b8:	mov	r3, sp
   165bc:	strd	r4, [sp, #8]
   165c0:	str	r1, [sp, #48]	; 0x30
   165c4:	mov	r1, r2
   165c8:	mvn	r2, #0
   165cc:	ldrd	r6, [sp, #48]	; 0x30
   165d0:	strd	r6, [sp]
   165d4:	strd	r4, [sp, #16]
   165d8:	strd	r4, [sp, #24]
   165dc:	strd	r4, [sp, #32]
   165e0:	strd	r4, [sp, #40]	; 0x28
   165e4:	bl	15c3c <__assert_fail@plt+0x46e4>
   165e8:	add	sp, sp, #100	; 0x64
   165ec:	ldrd	r4, [sp]
   165f0:	ldrd	r6, [sp, #8]
   165f4:	add	sp, sp, #16
   165f8:	pop	{pc}		; (ldr pc, [sp], #4)
   165fc:	bl	11534 <abort@plt>
   16600:	strd	r4, [sp, #-20]!	; 0xffffffec
   16604:	mov	r4, #0
   16608:	mov	r5, #0
   1660c:	strd	r6, [sp, #8]
   16610:	cmp	r1, #10
   16614:	str	lr, [sp, #16]
   16618:	sub	sp, sp, #100	; 0x64
   1661c:	strd	r4, [sp, #48]	; 0x30
   16620:	beq	1666c <__assert_fail@plt+0x5114>
   16624:	mov	ip, r2
   16628:	mov	r2, r3
   1662c:	strd	r4, [sp, #8]
   16630:	str	r1, [sp, #48]	; 0x30
   16634:	mov	r3, sp
   16638:	mov	r1, ip
   1663c:	ldrd	r6, [sp, #48]	; 0x30
   16640:	strd	r6, [sp]
   16644:	strd	r4, [sp, #16]
   16648:	strd	r4, [sp, #24]
   1664c:	strd	r4, [sp, #32]
   16650:	strd	r4, [sp, #40]	; 0x28
   16654:	bl	15c3c <__assert_fail@plt+0x46e4>
   16658:	add	sp, sp, #100	; 0x64
   1665c:	ldrd	r4, [sp]
   16660:	ldrd	r6, [sp, #8]
   16664:	add	sp, sp, #16
   16668:	pop	{pc}		; (ldr pc, [sp], #4)
   1666c:	bl	11534 <abort@plt>
   16670:	mov	r2, #0
   16674:	mov	r3, #0
   16678:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1667c:	strd	r6, [sp, #8]
   16680:	cmp	r0, #10
   16684:	strd	r8, [sp, #16]
   16688:	strd	sl, [sp, #24]
   1668c:	str	lr, [sp, #32]
   16690:	sub	sp, sp, #124	; 0x7c
   16694:	strd	r2, [sp, #72]	; 0x48
   16698:	strd	r2, [sp, #80]	; 0x50
   1669c:	strd	r2, [sp, #88]	; 0x58
   166a0:	strd	r2, [sp, #96]	; 0x60
   166a4:	strd	r2, [sp, #104]	; 0x68
   166a8:	strd	r2, [sp, #112]	; 0x70
   166ac:	beq	16850 <__assert_fail@plt+0x52f8>
   166b0:	mov	r6, r1
   166b4:	movw	r4, #61800	; 0xf168
   166b8:	movt	r4, #3
   166bc:	str	r0, [sp, #72]	; 0x48
   166c0:	ldrd	r0, [sp, #72]	; 0x48
   166c4:	strd	r0, [sp, #24]
   166c8:	strd	r2, [sp, #32]
   166cc:	strd	r2, [sp, #40]	; 0x28
   166d0:	strd	r2, [sp, #48]	; 0x30
   166d4:	strd	r2, [sp, #56]	; 0x38
   166d8:	strd	r2, [sp, #64]	; 0x40
   166dc:	bl	1142c <__errno_location@plt>
   166e0:	mov	r8, r0
   166e4:	ldr	r5, [r4]
   166e8:	ldr	r2, [r4, #4]
   166ec:	ldr	r9, [r0]
   166f0:	cmp	r2, #0
   166f4:	bgt	16750 <__assert_fail@plt+0x51f8>
   166f8:	add	r3, r4, #8
   166fc:	str	r2, [sp, #72]	; 0x48
   16700:	rsb	r2, r2, #1
   16704:	cmp	r5, r3
   16708:	beq	16824 <__assert_fail@plt+0x52cc>
   1670c:	mov	r3, #8
   16710:	mov	r0, r5
   16714:	add	r1, sp, #72	; 0x48
   16718:	str	r3, [sp]
   1671c:	mvn	r3, #-2147483648	; 0x80000000
   16720:	bl	2a988 <__assert_fail@plt+0x19430>
   16724:	mov	r5, r0
   16728:	str	r0, [r4]
   1672c:	ldr	r0, [r4, #4]
   16730:	mov	r1, #0
   16734:	ldr	r2, [sp, #72]	; 0x48
   16738:	sub	r2, r2, r0
   1673c:	add	r0, r5, r0, lsl #3
   16740:	lsl	r2, r2, #3
   16744:	bl	1145c <memset@plt>
   16748:	ldr	r3, [sp, #72]	; 0x48
   1674c:	str	r3, [r4, #4]
   16750:	ldr	sl, [r5]
   16754:	add	r0, sp, #32
   16758:	mvn	r3, #0
   1675c:	mov	r2, r6
   16760:	ldr	r7, [sp, #28]
   16764:	ldr	r4, [r5, #4]
   16768:	mov	r1, sl
   1676c:	str	r0, [sp, #8]
   16770:	ldr	lr, [sp, #24]
   16774:	orr	r7, r7, #1
   16778:	ldr	ip, [sp, #64]	; 0x40
   1677c:	mov	r0, r4
   16780:	ldr	fp, [sp, #68]	; 0x44
   16784:	str	lr, [sp]
   16788:	str	r7, [sp, #4]
   1678c:	str	ip, [sp, #12]
   16790:	str	fp, [sp, #16]
   16794:	bl	14250 <__assert_fail@plt+0x2cf8>
   16798:	cmp	sl, r0
   1679c:	bhi	16800 <__assert_fail@plt+0x52a8>
   167a0:	add	sl, r0, #1
   167a4:	movw	r3, #62148	; 0xf2c4
   167a8:	movt	r3, #3
   167ac:	cmp	r4, r3
   167b0:	str	sl, [r5]
   167b4:	beq	167c0 <__assert_fail@plt+0x5268>
   167b8:	mov	r0, r4
   167bc:	bl	13e1c <__assert_fail@plt+0x28c4>
   167c0:	mov	r0, sl
   167c4:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   167c8:	ldr	r3, [sp, #24]
   167cc:	mov	r2, r6
   167d0:	mov	r1, sl
   167d4:	mov	r4, r0
   167d8:	ldr	lr, [sp, #64]	; 0x40
   167dc:	ldr	ip, [sp, #68]	; 0x44
   167e0:	str	r0, [r5, #4]
   167e4:	add	r5, sp, #32
   167e8:	stm	sp, {r3, r7}
   167ec:	mvn	r3, #0
   167f0:	str	r5, [sp, #8]
   167f4:	str	lr, [sp, #12]
   167f8:	str	ip, [sp, #16]
   167fc:	bl	14250 <__assert_fail@plt+0x2cf8>
   16800:	mov	r0, r4
   16804:	str	r9, [r8]
   16808:	add	sp, sp, #124	; 0x7c
   1680c:	ldrd	r4, [sp]
   16810:	ldrd	r6, [sp, #8]
   16814:	ldrd	r8, [sp, #16]
   16818:	ldrd	sl, [sp, #24]
   1681c:	add	sp, sp, #32
   16820:	pop	{pc}		; (ldr pc, [sp], #4)
   16824:	mov	r0, #8
   16828:	mvn	r3, #-2147483648	; 0x80000000
   1682c:	add	r1, sp, #72	; 0x48
   16830:	str	r0, [sp]
   16834:	mov	r0, #0
   16838:	bl	2a988 <__assert_fail@plt+0x19430>
   1683c:	ldrd	r2, [r4, #8]
   16840:	mov	r5, r0
   16844:	str	r0, [r4]
   16848:	strd	r2, [r0]
   1684c:	b	1672c <__assert_fail@plt+0x51d4>
   16850:	bl	11534 <abort@plt>
   16854:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16858:	cmp	r0, #10
   1685c:	strd	r6, [sp, #8]
   16860:	mov	r6, #0
   16864:	mov	r7, #0
   16868:	strd	r8, [sp, #16]
   1686c:	strd	sl, [sp, #24]
   16870:	str	lr, [sp, #32]
   16874:	sub	sp, sp, #124	; 0x7c
   16878:	strd	r6, [sp, #72]	; 0x48
   1687c:	strd	r6, [sp, #80]	; 0x50
   16880:	strd	r6, [sp, #88]	; 0x58
   16884:	strd	r6, [sp, #96]	; 0x60
   16888:	strd	r6, [sp, #104]	; 0x68
   1688c:	strd	r6, [sp, #112]	; 0x70
   16890:	beq	16a3c <__assert_fail@plt+0x54e4>
   16894:	mov	sl, r2
   16898:	movw	r5, #61800	; 0xf168
   1689c:	movt	r5, #3
   168a0:	str	r0, [sp, #72]	; 0x48
   168a4:	mov	r9, r1
   168a8:	ldrd	r2, [sp, #72]	; 0x48
   168ac:	strd	r2, [sp, #24]
   168b0:	strd	r6, [sp, #32]
   168b4:	strd	r6, [sp, #40]	; 0x28
   168b8:	strd	r6, [sp, #48]	; 0x30
   168bc:	strd	r6, [sp, #56]	; 0x38
   168c0:	strd	r6, [sp, #64]	; 0x40
   168c4:	bl	1142c <__errno_location@plt>
   168c8:	mov	r7, r0
   168cc:	ldr	r4, [r5]
   168d0:	ldr	r2, [r5, #4]
   168d4:	ldr	fp, [r0]
   168d8:	cmp	r2, #0
   168dc:	bgt	16938 <__assert_fail@plt+0x53e0>
   168e0:	add	r3, r5, #8
   168e4:	str	r2, [sp, #72]	; 0x48
   168e8:	rsb	r2, r2, #1
   168ec:	cmp	r4, r3
   168f0:	beq	16a10 <__assert_fail@plt+0x54b8>
   168f4:	mov	r3, #8
   168f8:	mov	r0, r4
   168fc:	add	r1, sp, #72	; 0x48
   16900:	str	r3, [sp]
   16904:	mvn	r3, #-2147483648	; 0x80000000
   16908:	bl	2a988 <__assert_fail@plt+0x19430>
   1690c:	mov	r4, r0
   16910:	str	r0, [r5]
   16914:	ldr	r0, [r5, #4]
   16918:	mov	r1, #0
   1691c:	ldr	r2, [sp, #72]	; 0x48
   16920:	sub	r2, r2, r0
   16924:	add	r0, r4, r0, lsl #3
   16928:	lsl	r2, r2, #3
   1692c:	bl	1145c <memset@plt>
   16930:	ldr	r3, [sp, #72]	; 0x48
   16934:	str	r3, [r5, #4]
   16938:	ldr	ip, [sp, #24]
   1693c:	add	r0, sp, #32
   16940:	mov	r3, sl
   16944:	mov	r2, r9
   16948:	ldr	r6, [sp, #28]
   1694c:	ldr	r8, [r4]
   16950:	ldr	r5, [r4, #4]
   16954:	str	ip, [sp]
   16958:	orr	r6, r6, #1
   1695c:	ldr	ip, [sp, #64]	; 0x40
   16960:	mov	r1, r8
   16964:	str	r6, [sp, #4]
   16968:	ldr	lr, [sp, #68]	; 0x44
   1696c:	str	r0, [sp, #8]
   16970:	mov	r0, r5
   16974:	str	ip, [sp, #12]
   16978:	str	lr, [sp, #16]
   1697c:	bl	14250 <__assert_fail@plt+0x2cf8>
   16980:	cmp	r8, r0
   16984:	bhi	169ec <__assert_fail@plt+0x5494>
   16988:	add	r8, r0, #1
   1698c:	movw	r3, #62148	; 0xf2c4
   16990:	movt	r3, #3
   16994:	cmp	r5, r3
   16998:	str	r8, [r4]
   1699c:	beq	169a8 <__assert_fail@plt+0x5450>
   169a0:	mov	r0, r5
   169a4:	bl	13e1c <__assert_fail@plt+0x28c4>
   169a8:	mov	r0, r8
   169ac:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   169b0:	ldr	lr, [sp, #24]
   169b4:	mov	r1, r8
   169b8:	mov	r3, sl
   169bc:	mov	r2, r9
   169c0:	mov	r5, r0
   169c4:	ldr	r8, [sp, #64]	; 0x40
   169c8:	ldr	ip, [sp, #68]	; 0x44
   169cc:	str	r0, [r4, #4]
   169d0:	str	lr, [sp]
   169d4:	add	lr, sp, #32
   169d8:	str	r6, [sp, #4]
   169dc:	str	lr, [sp, #8]
   169e0:	str	r8, [sp, #12]
   169e4:	str	ip, [sp, #16]
   169e8:	bl	14250 <__assert_fail@plt+0x2cf8>
   169ec:	mov	r0, r5
   169f0:	str	fp, [r7]
   169f4:	add	sp, sp, #124	; 0x7c
   169f8:	ldrd	r4, [sp]
   169fc:	ldrd	r6, [sp, #8]
   16a00:	ldrd	r8, [sp, #16]
   16a04:	ldrd	sl, [sp, #24]
   16a08:	add	sp, sp, #32
   16a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a10:	mov	r0, #8
   16a14:	mvn	r3, #-2147483648	; 0x80000000
   16a18:	add	r1, sp, #72	; 0x48
   16a1c:	str	r0, [sp]
   16a20:	mov	r0, #0
   16a24:	bl	2a988 <__assert_fail@plt+0x19430>
   16a28:	ldrd	r2, [r5, #8]
   16a2c:	mov	r4, r0
   16a30:	str	r0, [r5]
   16a34:	strd	r2, [r0]
   16a38:	b	16914 <__assert_fail@plt+0x53bc>
   16a3c:	bl	11534 <abort@plt>
   16a40:	ldr	r3, [pc, #492]	; 16c34 <__assert_fail@plt+0x56dc>
   16a44:	lsr	ip, r2, #5
   16a48:	and	r2, r2, #31
   16a4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16a50:	movw	r5, #61800	; 0xf168
   16a54:	movt	r5, #3
   16a58:	strd	r6, [sp, #8]
   16a5c:	strd	r8, [sp, #16]
   16a60:	strd	sl, [sp, #24]
   16a64:	mov	sl, r0
   16a68:	mov	fp, r1
   16a6c:	ldrd	r0, [r3]
   16a70:	str	lr, [sp, #32]
   16a74:	sub	sp, sp, #92	; 0x5c
   16a78:	ldrd	r8, [r3, #8]
   16a7c:	add	r6, sp, #48	; 0x30
   16a80:	strd	r0, [sp, #40]	; 0x28
   16a84:	ldrd	r0, [r3, #16]
   16a88:	strd	r8, [sp, #48]	; 0x30
   16a8c:	ldrd	r8, [r3, #24]
   16a90:	strd	r0, [sp, #56]	; 0x38
   16a94:	ldrd	r0, [r3, #32]
   16a98:	strd	r8, [sp, #64]	; 0x40
   16a9c:	ldrd	r8, [r3, #40]	; 0x28
   16aa0:	strd	r0, [sp, #72]	; 0x48
   16aa4:	strd	r8, [sp, #80]	; 0x50
   16aa8:	ldr	r3, [r6, ip, lsl #2]
   16aac:	mvn	r1, r3, lsr r2
   16ab0:	and	r1, r1, #1
   16ab4:	eor	r2, r3, r1, lsl r2
   16ab8:	str	r2, [r6, ip, lsl #2]
   16abc:	bl	1142c <__errno_location@plt>
   16ac0:	ldr	r3, [r0]
   16ac4:	mov	r8, r0
   16ac8:	ldr	r2, [r5, #4]
   16acc:	ldr	r4, [r5]
   16ad0:	str	r3, [sp, #28]
   16ad4:	cmp	r2, #0
   16ad8:	bgt	16b34 <__assert_fail@plt+0x55dc>
   16adc:	add	r3, r5, #8
   16ae0:	str	r2, [sp, #36]	; 0x24
   16ae4:	rsb	r2, r2, #1
   16ae8:	cmp	r4, r3
   16aec:	beq	16c08 <__assert_fail@plt+0x56b0>
   16af0:	mov	r1, #8
   16af4:	mov	r0, r4
   16af8:	mvn	r3, #-2147483648	; 0x80000000
   16afc:	str	r1, [sp]
   16b00:	add	r1, sp, #36	; 0x24
   16b04:	bl	2a988 <__assert_fail@plt+0x19430>
   16b08:	mov	r4, r0
   16b0c:	str	r0, [r5]
   16b10:	ldr	r0, [r5, #4]
   16b14:	mov	r1, #0
   16b18:	ldr	r2, [sp, #36]	; 0x24
   16b1c:	sub	r2, r2, r0
   16b20:	add	r0, r4, r0, lsl #3
   16b24:	lsl	r2, r2, #3
   16b28:	bl	1145c <memset@plt>
   16b2c:	ldr	r3, [sp, #36]	; 0x24
   16b30:	str	r3, [r5, #4]
   16b34:	ldr	ip, [sp, #40]	; 0x28
   16b38:	mov	r3, fp
   16b3c:	mov	r2, sl
   16b40:	ldr	r7, [sp, #44]	; 0x2c
   16b44:	ldr	r9, [r4]
   16b48:	ldr	r5, [r4, #4]
   16b4c:	str	ip, [sp]
   16b50:	orr	r7, r7, #1
   16b54:	ldr	ip, [sp, #80]	; 0x50
   16b58:	mov	r1, r9
   16b5c:	str	r7, [sp, #4]
   16b60:	ldr	lr, [sp, #84]	; 0x54
   16b64:	mov	r0, r5
   16b68:	str	r6, [sp, #8]
   16b6c:	str	ip, [sp, #12]
   16b70:	str	lr, [sp, #16]
   16b74:	bl	14250 <__assert_fail@plt+0x2cf8>
   16b78:	cmp	r9, r0
   16b7c:	bhi	16be0 <__assert_fail@plt+0x5688>
   16b80:	add	r9, r0, #1
   16b84:	movw	r3, #62148	; 0xf2c4
   16b88:	movt	r3, #3
   16b8c:	cmp	r5, r3
   16b90:	str	r9, [r4]
   16b94:	beq	16ba0 <__assert_fail@plt+0x5648>
   16b98:	mov	r0, r5
   16b9c:	bl	13e1c <__assert_fail@plt+0x28c4>
   16ba0:	mov	r0, r9
   16ba4:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   16ba8:	mov	r1, r9
   16bac:	ldr	ip, [sp, #40]	; 0x28
   16bb0:	mov	r3, fp
   16bb4:	mov	r2, sl
   16bb8:	mov	r5, r0
   16bbc:	ldr	r9, [sp, #80]	; 0x50
   16bc0:	ldr	lr, [sp, #84]	; 0x54
   16bc4:	str	r0, [r4, #4]
   16bc8:	str	ip, [sp]
   16bcc:	str	r7, [sp, #4]
   16bd0:	str	r6, [sp, #8]
   16bd4:	str	r9, [sp, #12]
   16bd8:	str	lr, [sp, #16]
   16bdc:	bl	14250 <__assert_fail@plt+0x2cf8>
   16be0:	ldr	r3, [sp, #28]
   16be4:	mov	r0, r5
   16be8:	str	r3, [r8]
   16bec:	add	sp, sp, #92	; 0x5c
   16bf0:	ldrd	r4, [sp]
   16bf4:	ldrd	r6, [sp, #8]
   16bf8:	ldrd	r8, [sp, #16]
   16bfc:	ldrd	sl, [sp, #24]
   16c00:	add	sp, sp, #32
   16c04:	pop	{pc}		; (ldr pc, [sp], #4)
   16c08:	mov	r0, #8
   16c0c:	mvn	r3, #-2147483648	; 0x80000000
   16c10:	add	r1, sp, #36	; 0x24
   16c14:	str	r0, [sp]
   16c18:	mov	r0, #0
   16c1c:	bl	2a988 <__assert_fail@plt+0x19430>
   16c20:	ldrd	r2, [r5, #8]
   16c24:	mov	r4, r0
   16c28:	str	r0, [r5]
   16c2c:	strd	r2, [r0]
   16c30:	b	16b10 <__assert_fail@plt+0x55b8>
   16c34:	andeq	pc, r3, r4, asr #7
   16c38:	ldr	ip, [pc, #476]	; 16e1c <__assert_fail@plt+0x58c4>
   16c3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c40:	movw	r4, #61800	; 0xf168
   16c44:	movt	r4, #3
   16c48:	ldrd	r2, [ip, #8]
   16c4c:	strd	r6, [sp, #8]
   16c50:	lsr	r7, r1, #5
   16c54:	mov	r6, r0
   16c58:	strd	r8, [sp, #16]
   16c5c:	str	lr, [sp, #32]
   16c60:	and	lr, r1, #31
   16c64:	ldrd	r0, [ip]
   16c68:	strd	sl, [sp, #24]
   16c6c:	sub	sp, sp, #84	; 0x54
   16c70:	add	r5, sp, #40	; 0x28
   16c74:	strd	r0, [sp, #32]
   16c78:	strd	r2, [sp, #40]	; 0x28
   16c7c:	ldrd	r0, [ip, #16]
   16c80:	ldrd	r2, [ip, #24]
   16c84:	strd	r0, [sp, #48]	; 0x30
   16c88:	ldrd	r0, [ip, #32]
   16c8c:	strd	r2, [sp, #56]	; 0x38
   16c90:	ldrd	r2, [ip, #40]	; 0x28
   16c94:	strd	r0, [sp, #64]	; 0x40
   16c98:	strd	r2, [sp, #72]	; 0x48
   16c9c:	ldr	r1, [r5, r7, lsl #2]
   16ca0:	mvn	r3, r1, lsr lr
   16ca4:	and	r3, r3, #1
   16ca8:	eor	r1, r1, r3, lsl lr
   16cac:	str	r1, [r5, r7, lsl #2]
   16cb0:	bl	1142c <__errno_location@plt>
   16cb4:	mov	r9, r0
   16cb8:	ldr	sl, [r0]
   16cbc:	ldr	r2, [r4, #4]
   16cc0:	ldr	r7, [r4]
   16cc4:	cmp	r2, #0
   16cc8:	bgt	16d24 <__assert_fail@plt+0x57cc>
   16ccc:	add	r3, r4, #8
   16cd0:	str	r2, [sp, #28]
   16cd4:	rsb	r2, r2, #1
   16cd8:	cmp	r7, r3
   16cdc:	beq	16df0 <__assert_fail@plt+0x5898>
   16ce0:	mov	r1, #8
   16ce4:	mov	r0, r7
   16ce8:	mvn	r3, #-2147483648	; 0x80000000
   16cec:	str	r1, [sp]
   16cf0:	add	r1, sp, #28
   16cf4:	bl	2a988 <__assert_fail@plt+0x19430>
   16cf8:	mov	r7, r0
   16cfc:	str	r0, [r4]
   16d00:	ldr	r0, [r4, #4]
   16d04:	mov	r1, #0
   16d08:	ldr	r2, [sp, #28]
   16d0c:	sub	r2, r2, r0
   16d10:	add	r0, r7, r0, lsl #3
   16d14:	lsl	r2, r2, #3
   16d18:	bl	1145c <memset@plt>
   16d1c:	ldr	r3, [sp, #28]
   16d20:	str	r3, [r4, #4]
   16d24:	ldr	ip, [sp, #32]
   16d28:	mvn	r3, #0
   16d2c:	mov	r2, r6
   16d30:	ldr	r8, [sp, #36]	; 0x24
   16d34:	ldr	fp, [r7]
   16d38:	ldr	r4, [r7, #4]
   16d3c:	str	ip, [sp]
   16d40:	orr	r8, r8, #1
   16d44:	ldr	ip, [sp, #72]	; 0x48
   16d48:	mov	r1, fp
   16d4c:	str	r8, [sp, #4]
   16d50:	ldr	lr, [sp, #76]	; 0x4c
   16d54:	mov	r0, r4
   16d58:	str	r5, [sp, #8]
   16d5c:	str	ip, [sp, #12]
   16d60:	str	lr, [sp, #16]
   16d64:	bl	14250 <__assert_fail@plt+0x2cf8>
   16d68:	cmp	fp, r0
   16d6c:	bhi	16dcc <__assert_fail@plt+0x5874>
   16d70:	add	fp, r0, #1
   16d74:	movw	r3, #62148	; 0xf2c4
   16d78:	movt	r3, #3
   16d7c:	cmp	r4, r3
   16d80:	str	fp, [r7]
   16d84:	beq	16d90 <__assert_fail@plt+0x5838>
   16d88:	mov	r0, r4
   16d8c:	bl	13e1c <__assert_fail@plt+0x28c4>
   16d90:	mov	r0, fp
   16d94:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   16d98:	ldr	r3, [sp, #32]
   16d9c:	mov	r2, r6
   16da0:	mov	r1, fp
   16da4:	mov	r4, r0
   16da8:	ldr	lr, [sp, #72]	; 0x48
   16dac:	ldr	ip, [sp, #76]	; 0x4c
   16db0:	str	r0, [r7, #4]
   16db4:	stm	sp, {r3, r8}
   16db8:	mvn	r3, #0
   16dbc:	str	r5, [sp, #8]
   16dc0:	str	lr, [sp, #12]
   16dc4:	str	ip, [sp, #16]
   16dc8:	bl	14250 <__assert_fail@plt+0x2cf8>
   16dcc:	mov	r0, r4
   16dd0:	str	sl, [r9]
   16dd4:	add	sp, sp, #84	; 0x54
   16dd8:	ldrd	r4, [sp]
   16ddc:	ldrd	r6, [sp, #8]
   16de0:	ldrd	r8, [sp, #16]
   16de4:	ldrd	sl, [sp, #24]
   16de8:	add	sp, sp, #32
   16dec:	pop	{pc}		; (ldr pc, [sp], #4)
   16df0:	mov	r0, #8
   16df4:	mvn	r3, #-2147483648	; 0x80000000
   16df8:	add	r1, sp, #28
   16dfc:	str	r0, [sp]
   16e00:	mov	r0, #0
   16e04:	bl	2a988 <__assert_fail@plt+0x19430>
   16e08:	ldrd	r2, [r4, #8]
   16e0c:	mov	r7, r0
   16e10:	str	r0, [r4]
   16e14:	strd	r2, [r0]
   16e18:	b	16d00 <__assert_fail@plt+0x57a8>
   16e1c:	andeq	pc, r3, r4, asr #7
   16e20:	ldr	ip, [pc, #472]	; 17000 <__assert_fail@plt+0x5aa8>
   16e24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e28:	mov	r5, r0
   16e2c:	movw	r4, #61800	; 0xf168
   16e30:	movt	r4, #3
   16e34:	ldrd	r2, [ip]
   16e38:	ldrd	r0, [ip, #8]
   16e3c:	strd	r6, [sp, #8]
   16e40:	strd	r8, [sp, #16]
   16e44:	strd	sl, [sp, #24]
   16e48:	str	lr, [sp, #32]
   16e4c:	sub	sp, sp, #84	; 0x54
   16e50:	strd	r2, [sp, #32]
   16e54:	strd	r0, [sp, #40]	; 0x28
   16e58:	ldr	r6, [sp, #44]	; 0x2c
   16e5c:	ldrd	r2, [ip, #16]
   16e60:	ldrd	r0, [ip, #24]
   16e64:	mvn	lr, r6
   16e68:	and	lr, lr, #67108864	; 0x4000000
   16e6c:	eor	lr, lr, r6
   16e70:	ldrd	r6, [ip, #40]	; 0x28
   16e74:	strd	r2, [sp, #48]	; 0x30
   16e78:	ldrd	r2, [ip, #32]
   16e7c:	str	lr, [sp, #44]	; 0x2c
   16e80:	strd	r0, [sp, #56]	; 0x38
   16e84:	strd	r2, [sp, #64]	; 0x40
   16e88:	strd	r6, [sp, #72]	; 0x48
   16e8c:	bl	1142c <__errno_location@plt>
   16e90:	mov	r8, r0
   16e94:	ldr	r9, [r0]
   16e98:	ldr	r2, [r4, #4]
   16e9c:	ldr	r6, [r4]
   16ea0:	cmp	r2, #0
   16ea4:	bgt	16f00 <__assert_fail@plt+0x59a8>
   16ea8:	add	r3, r4, #8
   16eac:	str	r2, [sp, #28]
   16eb0:	rsb	r2, r2, #1
   16eb4:	cmp	r6, r3
   16eb8:	beq	16fd4 <__assert_fail@plt+0x5a7c>
   16ebc:	mov	r1, #8
   16ec0:	mov	r0, r6
   16ec4:	mvn	r3, #-2147483648	; 0x80000000
   16ec8:	str	r1, [sp]
   16ecc:	add	r1, sp, #28
   16ed0:	bl	2a988 <__assert_fail@plt+0x19430>
   16ed4:	mov	r6, r0
   16ed8:	str	r0, [r4]
   16edc:	ldr	r0, [r4, #4]
   16ee0:	mov	r1, #0
   16ee4:	ldr	r2, [sp, #28]
   16ee8:	sub	r2, r2, r0
   16eec:	add	r0, r6, r0, lsl #3
   16ef0:	lsl	r2, r2, #3
   16ef4:	bl	1145c <memset@plt>
   16ef8:	ldr	r3, [sp, #28]
   16efc:	str	r3, [r4, #4]
   16f00:	ldr	sl, [r6]
   16f04:	add	r0, sp, #40	; 0x28
   16f08:	mvn	r3, #0
   16f0c:	mov	r2, r5
   16f10:	ldr	r7, [sp, #36]	; 0x24
   16f14:	ldr	r4, [r6, #4]
   16f18:	mov	r1, sl
   16f1c:	str	r0, [sp, #8]
   16f20:	ldr	lr, [sp, #32]
   16f24:	orr	r7, r7, #1
   16f28:	ldr	ip, [sp, #72]	; 0x48
   16f2c:	mov	r0, r4
   16f30:	ldr	fp, [sp, #76]	; 0x4c
   16f34:	str	lr, [sp]
   16f38:	str	r7, [sp, #4]
   16f3c:	str	ip, [sp, #12]
   16f40:	str	fp, [sp, #16]
   16f44:	bl	14250 <__assert_fail@plt+0x2cf8>
   16f48:	cmp	sl, r0
   16f4c:	bhi	16fb0 <__assert_fail@plt+0x5a58>
   16f50:	add	sl, r0, #1
   16f54:	movw	r3, #62148	; 0xf2c4
   16f58:	movt	r3, #3
   16f5c:	cmp	r4, r3
   16f60:	str	sl, [r6]
   16f64:	beq	16f70 <__assert_fail@plt+0x5a18>
   16f68:	mov	r0, r4
   16f6c:	bl	13e1c <__assert_fail@plt+0x28c4>
   16f70:	mov	r0, sl
   16f74:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   16f78:	ldr	r3, [sp, #32]
   16f7c:	mov	r2, r5
   16f80:	add	r5, sp, #40	; 0x28
   16f84:	mov	r1, sl
   16f88:	mov	r4, r0
   16f8c:	ldr	lr, [sp, #72]	; 0x48
   16f90:	ldr	ip, [sp, #76]	; 0x4c
   16f94:	str	r0, [r6, #4]
   16f98:	stm	sp, {r3, r7}
   16f9c:	mvn	r3, #0
   16fa0:	str	r5, [sp, #8]
   16fa4:	str	lr, [sp, #12]
   16fa8:	str	ip, [sp, #16]
   16fac:	bl	14250 <__assert_fail@plt+0x2cf8>
   16fb0:	mov	r0, r4
   16fb4:	str	r9, [r8]
   16fb8:	add	sp, sp, #84	; 0x54
   16fbc:	ldrd	r4, [sp]
   16fc0:	ldrd	r6, [sp, #8]
   16fc4:	ldrd	r8, [sp, #16]
   16fc8:	ldrd	sl, [sp, #24]
   16fcc:	add	sp, sp, #32
   16fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd4:	mov	r0, #8
   16fd8:	mvn	r3, #-2147483648	; 0x80000000
   16fdc:	add	r1, sp, #28
   16fe0:	str	r0, [sp]
   16fe4:	mov	r0, #0
   16fe8:	bl	2a988 <__assert_fail@plt+0x19430>
   16fec:	ldrd	r2, [r4, #8]
   16ff0:	mov	r6, r0
   16ff4:	str	r0, [r4]
   16ff8:	strd	r2, [r0]
   16ffc:	b	16edc <__assert_fail@plt+0x5984>
   17000:	andeq	pc, r3, r4, asr #7
   17004:	ldr	ip, [pc, #480]	; 171ec <__assert_fail@plt+0x5c94>
   17008:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1700c:	mov	r5, r0
   17010:	movw	r4, #61800	; 0xf168
   17014:	movt	r4, #3
   17018:	ldrd	r2, [ip]
   1701c:	strd	r6, [sp, #8]
   17020:	mov	r6, r1
   17024:	ldrd	r0, [ip, #8]
   17028:	strd	r8, [sp, #16]
   1702c:	strd	sl, [sp, #24]
   17030:	str	lr, [sp, #32]
   17034:	sub	sp, sp, #84	; 0x54
   17038:	ldrd	r8, [ip, #40]	; 0x28
   1703c:	strd	r2, [sp, #32]
   17040:	strd	r0, [sp, #40]	; 0x28
   17044:	ldrd	r2, [ip, #16]
   17048:	ldr	r7, [sp, #44]	; 0x2c
   1704c:	ldrd	r0, [ip, #24]
   17050:	strd	r2, [sp, #48]	; 0x30
   17054:	ldrd	r2, [ip, #32]
   17058:	mvn	lr, r7
   1705c:	and	lr, lr, #67108864	; 0x4000000
   17060:	eor	lr, lr, r7
   17064:	str	lr, [sp, #44]	; 0x2c
   17068:	strd	r0, [sp, #56]	; 0x38
   1706c:	strd	r2, [sp, #64]	; 0x40
   17070:	strd	r8, [sp, #72]	; 0x48
   17074:	bl	1142c <__errno_location@plt>
   17078:	mov	r9, r0
   1707c:	ldr	sl, [r0]
   17080:	ldr	r2, [r4, #4]
   17084:	ldr	r7, [r4]
   17088:	cmp	r2, #0
   1708c:	bgt	170e8 <__assert_fail@plt+0x5b90>
   17090:	add	r3, r4, #8
   17094:	str	r2, [sp, #28]
   17098:	rsb	r2, r2, #1
   1709c:	cmp	r7, r3
   170a0:	beq	171c0 <__assert_fail@plt+0x5c68>
   170a4:	mov	r1, #8
   170a8:	mov	r0, r7
   170ac:	mvn	r3, #-2147483648	; 0x80000000
   170b0:	str	r1, [sp]
   170b4:	add	r1, sp, #28
   170b8:	bl	2a988 <__assert_fail@plt+0x19430>
   170bc:	mov	r7, r0
   170c0:	str	r0, [r4]
   170c4:	ldr	r0, [r4, #4]
   170c8:	mov	r1, #0
   170cc:	ldr	r2, [sp, #28]
   170d0:	sub	r2, r2, r0
   170d4:	add	r0, r7, r0, lsl #3
   170d8:	lsl	r2, r2, #3
   170dc:	bl	1145c <memset@plt>
   170e0:	ldr	r3, [sp, #28]
   170e4:	str	r3, [r4, #4]
   170e8:	ldr	ip, [sp, #32]
   170ec:	add	r0, sp, #40	; 0x28
   170f0:	mov	r3, r6
   170f4:	mov	r2, r5
   170f8:	ldr	r8, [sp, #36]	; 0x24
   170fc:	ldr	fp, [r7]
   17100:	ldr	r4, [r7, #4]
   17104:	str	ip, [sp]
   17108:	orr	r8, r8, #1
   1710c:	ldr	ip, [sp, #72]	; 0x48
   17110:	mov	r1, fp
   17114:	str	r8, [sp, #4]
   17118:	ldr	lr, [sp, #76]	; 0x4c
   1711c:	str	r0, [sp, #8]
   17120:	mov	r0, r4
   17124:	str	ip, [sp, #12]
   17128:	str	lr, [sp, #16]
   1712c:	bl	14250 <__assert_fail@plt+0x2cf8>
   17130:	cmp	fp, r0
   17134:	bhi	1719c <__assert_fail@plt+0x5c44>
   17138:	add	fp, r0, #1
   1713c:	movw	r3, #62148	; 0xf2c4
   17140:	movt	r3, #3
   17144:	cmp	r4, r3
   17148:	str	fp, [r7]
   1714c:	beq	17158 <__assert_fail@plt+0x5c00>
   17150:	mov	r0, r4
   17154:	bl	13e1c <__assert_fail@plt+0x28c4>
   17158:	mov	r0, fp
   1715c:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   17160:	ldr	lr, [sp, #32]
   17164:	mov	r2, r5
   17168:	mov	r3, r6
   1716c:	mov	r1, fp
   17170:	mov	r4, r0
   17174:	ldr	r5, [sp, #72]	; 0x48
   17178:	ldr	ip, [sp, #76]	; 0x4c
   1717c:	str	r0, [r7, #4]
   17180:	str	lr, [sp]
   17184:	add	lr, sp, #40	; 0x28
   17188:	str	r8, [sp, #4]
   1718c:	str	lr, [sp, #8]
   17190:	str	r5, [sp, #12]
   17194:	str	ip, [sp, #16]
   17198:	bl	14250 <__assert_fail@plt+0x2cf8>
   1719c:	mov	r0, r4
   171a0:	str	sl, [r9]
   171a4:	add	sp, sp, #84	; 0x54
   171a8:	ldrd	r4, [sp]
   171ac:	ldrd	r6, [sp, #8]
   171b0:	ldrd	r8, [sp, #16]
   171b4:	ldrd	sl, [sp, #24]
   171b8:	add	sp, sp, #32
   171bc:	pop	{pc}		; (ldr pc, [sp], #4)
   171c0:	mov	r0, #8
   171c4:	mvn	r3, #-2147483648	; 0x80000000
   171c8:	add	r1, sp, #28
   171cc:	str	r0, [sp]
   171d0:	mov	r0, #0
   171d4:	bl	2a988 <__assert_fail@plt+0x19430>
   171d8:	ldrd	r2, [r4, #8]
   171dc:	mov	r7, r0
   171e0:	str	r0, [r4]
   171e4:	strd	r2, [r0]
   171e8:	b	170c4 <__assert_fail@plt+0x5b6c>
   171ec:	andeq	pc, r3, r4, asr #7
   171f0:	strd	r4, [sp, #-12]!
   171f4:	mov	r4, #0
   171f8:	mov	r5, #0
   171fc:	str	lr, [sp, #8]
   17200:	sub	sp, sp, #100	; 0x64
   17204:	cmp	r1, #10
   17208:	strd	r4, [sp]
   1720c:	strd	r4, [sp, #8]
   17210:	strd	r4, [sp, #16]
   17214:	strd	r4, [sp, #24]
   17218:	strd	r4, [sp, #32]
   1721c:	strd	r4, [sp, #40]	; 0x28
   17220:	beq	17250 <__assert_fail@plt+0x5cf8>
   17224:	mov	ip, #67108864	; 0x4000000
   17228:	mov	r3, sp
   1722c:	str	r1, [sp]
   17230:	mov	r1, r2
   17234:	mvn	r2, #0
   17238:	str	ip, [sp, #12]
   1723c:	bl	15c3c <__assert_fail@plt+0x46e4>
   17240:	add	sp, sp, #100	; 0x64
   17244:	ldrd	r4, [sp]
   17248:	add	sp, sp, #8
   1724c:	pop	{pc}		; (ldr pc, [sp], #4)
   17250:	bl	11534 <abort@plt>
   17254:	ldr	ip, [pc, #156]	; 172f8 <__assert_fail@plt+0x5da0>
   17258:	cmp	r2, #0
   1725c:	cmpne	r1, #0
   17260:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17264:	strd	r6, [sp, #8]
   17268:	mov	r6, r2
   1726c:	str	r8, [sp, #16]
   17270:	mov	r8, r3
   17274:	strd	sl, [sp, #20]
   17278:	ldrd	r4, [ip]
   1727c:	str	lr, [sp, #28]
   17280:	sub	sp, sp, #48	; 0x30
   17284:	mov	lr, #10
   17288:	ldrd	r2, [ip, #8]
   1728c:	ldrd	sl, [ip, #16]
   17290:	strd	r4, [sp]
   17294:	ldrd	r4, [ip, #32]
   17298:	str	lr, [sp]
   1729c:	strd	r2, [sp, #8]
   172a0:	strd	sl, [sp, #16]
   172a4:	ldrd	r2, [ip, #24]
   172a8:	ldrd	sl, [ip, #40]	; 0x28
   172ac:	strd	r2, [sp, #24]
   172b0:	strd	r4, [sp, #32]
   172b4:	strd	sl, [sp, #40]	; 0x28
   172b8:	beq	172f4 <__assert_fail@plt+0x5d9c>
   172bc:	mov	r7, r1
   172c0:	mov	r3, sp
   172c4:	mov	r1, r8
   172c8:	mvn	r2, #0
   172cc:	str	r7, [sp, #40]	; 0x28
   172d0:	str	r6, [sp, #44]	; 0x2c
   172d4:	bl	15c3c <__assert_fail@plt+0x46e4>
   172d8:	add	sp, sp, #48	; 0x30
   172dc:	ldrd	r4, [sp]
   172e0:	ldrd	r6, [sp, #8]
   172e4:	ldr	r8, [sp, #16]
   172e8:	ldrd	sl, [sp, #20]
   172ec:	add	sp, sp, #28
   172f0:	pop	{pc}		; (ldr pc, [sp], #4)
   172f4:	bl	11534 <abort@plt>
   172f8:	andeq	pc, r3, r4, asr #7
   172fc:	ldr	ip, [pc, #156]	; 173a0 <__assert_fail@plt+0x5e48>
   17300:	cmp	r2, #0
   17304:	cmpne	r1, #0
   17308:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1730c:	strd	r6, [sp, #8]
   17310:	mov	r6, r2
   17314:	str	r8, [sp, #16]
   17318:	mov	r8, r3
   1731c:	strd	sl, [sp, #20]
   17320:	ldrd	r4, [ip]
   17324:	str	lr, [sp, #28]
   17328:	sub	sp, sp, #48	; 0x30
   1732c:	mov	lr, #10
   17330:	ldrd	r2, [ip, #8]
   17334:	ldrd	sl, [ip, #16]
   17338:	strd	r4, [sp]
   1733c:	ldrd	r4, [ip, #32]
   17340:	str	lr, [sp]
   17344:	strd	r2, [sp, #8]
   17348:	strd	sl, [sp, #16]
   1734c:	ldrd	r2, [ip, #24]
   17350:	ldrd	sl, [ip, #40]	; 0x28
   17354:	strd	r2, [sp, #24]
   17358:	strd	r4, [sp, #32]
   1735c:	strd	sl, [sp, #40]	; 0x28
   17360:	beq	1739c <__assert_fail@plt+0x5e44>
   17364:	ldr	r2, [sp, #80]	; 0x50
   17368:	mov	r7, r1
   1736c:	mov	r3, sp
   17370:	mov	r1, r8
   17374:	str	r7, [sp, #40]	; 0x28
   17378:	str	r6, [sp, #44]	; 0x2c
   1737c:	bl	15c3c <__assert_fail@plt+0x46e4>
   17380:	add	sp, sp, #48	; 0x30
   17384:	ldrd	r4, [sp]
   17388:	ldrd	r6, [sp, #8]
   1738c:	ldr	r8, [sp, #16]
   17390:	ldrd	sl, [sp, #20]
   17394:	add	sp, sp, #28
   17398:	pop	{pc}		; (ldr pc, [sp], #4)
   1739c:	bl	11534 <abort@plt>
   173a0:	andeq	pc, r3, r4, asr #7
   173a4:	ldr	ip, [pc, #512]	; 175ac <__assert_fail@plt+0x6054>
   173a8:	cmp	r0, #0
   173ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   173b0:	ldrd	r4, [ip, #16]
   173b4:	strd	r6, [sp, #8]
   173b8:	clz	r6, r1
   173bc:	mov	r7, r1
   173c0:	strd	r8, [sp, #16]
   173c4:	mov	r8, r0
   173c8:	lsr	r6, r6, #5
   173cc:	strd	sl, [sp, #24]
   173d0:	mov	fp, r2
   173d4:	mov	sl, #10
   173d8:	ldrd	r2, [ip]
   173dc:	moveq	r6, #1
   173e0:	str	lr, [sp, #32]
   173e4:	sub	sp, sp, #92	; 0x5c
   173e8:	cmp	r6, #0
   173ec:	ldrd	r0, [ip, #8]
   173f0:	strd	r2, [sp, #40]	; 0x28
   173f4:	strd	r4, [sp, #56]	; 0x38
   173f8:	ldrd	r2, [ip, #24]
   173fc:	strd	r0, [sp, #48]	; 0x30
   17400:	ldrd	r0, [ip, #32]
   17404:	str	sl, [sp, #40]	; 0x28
   17408:	ldrd	r4, [ip, #40]	; 0x28
   1740c:	strd	r2, [sp, #64]	; 0x40
   17410:	strd	r0, [sp, #72]	; 0x48
   17414:	strd	r4, [sp, #80]	; 0x50
   17418:	bne	175a8 <__assert_fail@plt+0x6050>
   1741c:	movw	r5, #61800	; 0xf168
   17420:	movt	r5, #3
   17424:	str	r8, [sp, #80]	; 0x50
   17428:	str	r7, [sp, #84]	; 0x54
   1742c:	bl	1142c <__errno_location@plt>
   17430:	ldr	r3, [r0]
   17434:	mov	r9, r0
   17438:	ldr	r2, [r5, #4]
   1743c:	ldr	r4, [r5]
   17440:	str	r3, [sp, #28]
   17444:	cmp	r2, #0
   17448:	movgt	r1, sl
   1744c:	bgt	174b4 <__assert_fail@plt+0x5f5c>
   17450:	add	r3, r5, #8
   17454:	str	r2, [sp, #36]	; 0x24
   17458:	rsb	r2, r2, #1
   1745c:	cmp	r4, r3
   17460:	beq	1757c <__assert_fail@plt+0x6024>
   17464:	mov	r1, #8
   17468:	mov	r0, r4
   1746c:	mvn	r3, #-2147483648	; 0x80000000
   17470:	str	r1, [sp]
   17474:	add	r1, sp, #36	; 0x24
   17478:	bl	2a988 <__assert_fail@plt+0x19430>
   1747c:	mov	r4, r0
   17480:	str	r0, [r5]
   17484:	ldr	r0, [r5, #4]
   17488:	mov	r1, #0
   1748c:	ldr	r2, [sp, #36]	; 0x24
   17490:	sub	r2, r2, r0
   17494:	add	r0, r4, r0, lsl #3
   17498:	lsl	r2, r2, #3
   1749c:	bl	1145c <memset@plt>
   174a0:	ldr	r3, [sp, #36]	; 0x24
   174a4:	ldr	r1, [sp, #40]	; 0x28
   174a8:	ldr	r8, [sp, #80]	; 0x50
   174ac:	str	r3, [r5, #4]
   174b0:	ldr	r7, [sp, #84]	; 0x54
   174b4:	mvn	r3, #0
   174b8:	mov	r2, fp
   174bc:	ldr	r6, [sp, #44]	; 0x2c
   174c0:	ldr	sl, [r4]
   174c4:	ldr	r5, [r4, #4]
   174c8:	orr	r6, r6, #1
   174cc:	stm	sp, {r1, r6}
   174d0:	add	r1, sp, #48	; 0x30
   174d4:	str	r8, [sp, #12]
   174d8:	mov	r0, r5
   174dc:	str	r1, [sp, #8]
   174e0:	mov	r1, sl
   174e4:	str	r7, [sp, #16]
   174e8:	bl	14250 <__assert_fail@plt+0x2cf8>
   174ec:	cmp	sl, r0
   174f0:	bhi	17554 <__assert_fail@plt+0x5ffc>
   174f4:	add	r7, r0, #1
   174f8:	movw	r3, #62148	; 0xf2c4
   174fc:	movt	r3, #3
   17500:	cmp	r5, r3
   17504:	str	r7, [r4]
   17508:	beq	17514 <__assert_fail@plt+0x5fbc>
   1750c:	mov	r0, r5
   17510:	bl	13e1c <__assert_fail@plt+0x28c4>
   17514:	mov	r0, r7
   17518:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   1751c:	ldr	r3, [sp, #40]	; 0x28
   17520:	mov	r2, fp
   17524:	mov	r1, r7
   17528:	mov	r5, r0
   1752c:	ldr	lr, [sp, #80]	; 0x50
   17530:	ldr	ip, [sp, #84]	; 0x54
   17534:	str	r0, [r4, #4]
   17538:	add	r4, sp, #48	; 0x30
   1753c:	stm	sp, {r3, r6}
   17540:	mvn	r3, #0
   17544:	str	r4, [sp, #8]
   17548:	str	lr, [sp, #12]
   1754c:	str	ip, [sp, #16]
   17550:	bl	14250 <__assert_fail@plt+0x2cf8>
   17554:	ldr	r3, [sp, #28]
   17558:	mov	r0, r5
   1755c:	str	r3, [r9]
   17560:	add	sp, sp, #92	; 0x5c
   17564:	ldrd	r4, [sp]
   17568:	ldrd	r6, [sp, #8]
   1756c:	ldrd	r8, [sp, #16]
   17570:	ldrd	sl, [sp, #24]
   17574:	add	sp, sp, #32
   17578:	pop	{pc}		; (ldr pc, [sp], #4)
   1757c:	mov	r1, #8
   17580:	mvn	r3, #-2147483648	; 0x80000000
   17584:	mov	r0, r6
   17588:	str	r1, [sp]
   1758c:	add	r1, sp, #36	; 0x24
   17590:	bl	2a988 <__assert_fail@plt+0x19430>
   17594:	ldrd	r2, [r5, #8]
   17598:	mov	r4, r0
   1759c:	str	r0, [r5]
   175a0:	strd	r2, [r0]
   175a4:	b	17484 <__assert_fail@plt+0x5f2c>
   175a8:	bl	11534 <abort@plt>
   175ac:	andeq	pc, r3, r4, asr #7
   175b0:	ldr	ip, [pc, #536]	; 177d0 <__assert_fail@plt+0x6278>
   175b4:	cmp	r0, #0
   175b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   175bc:	ldrd	r4, [ip, #16]
   175c0:	strd	r6, [sp, #8]
   175c4:	mov	r6, r1
   175c8:	mov	r7, r0
   175cc:	strd	r8, [sp, #16]
   175d0:	mov	r9, #10
   175d4:	strd	sl, [sp, #24]
   175d8:	mov	sl, r2
   175dc:	mov	fp, r3
   175e0:	str	lr, [sp, #32]
   175e4:	clz	lr, r1
   175e8:	sub	sp, sp, #92	; 0x5c
   175ec:	ldrd	r2, [ip]
   175f0:	lsr	lr, lr, #5
   175f4:	moveq	lr, #1
   175f8:	ldrd	r0, [ip, #8]
   175fc:	cmp	lr, #0
   17600:	strd	r4, [sp, #56]	; 0x38
   17604:	ldrd	r4, [ip, #40]	; 0x28
   17608:	str	lr, [sp, #28]
   1760c:	strd	r2, [sp, #40]	; 0x28
   17610:	ldrd	r2, [ip, #24]
   17614:	strd	r0, [sp, #48]	; 0x30
   17618:	ldrd	r0, [ip, #32]
   1761c:	str	r9, [sp, #40]	; 0x28
   17620:	strd	r2, [sp, #64]	; 0x40
   17624:	strd	r4, [sp, #80]	; 0x50
   17628:	strd	r0, [sp, #72]	; 0x48
   1762c:	bne	177cc <__assert_fail@plt+0x6274>
   17630:	movw	r5, #61800	; 0xf168
   17634:	movt	r5, #3
   17638:	str	r7, [sp, #80]	; 0x50
   1763c:	str	r6, [sp, #84]	; 0x54
   17640:	bl	1142c <__errno_location@plt>
   17644:	ldr	r3, [r0]
   17648:	mov	r8, r0
   1764c:	ldr	r2, [r5, #4]
   17650:	ldr	r4, [r5]
   17654:	str	r3, [sp, #24]
   17658:	cmp	r2, #0
   1765c:	movgt	r1, r9
   17660:	bgt	176c8 <__assert_fail@plt+0x6170>
   17664:	add	r3, r5, #8
   17668:	str	r2, [sp, #36]	; 0x24
   1766c:	rsb	r2, r2, #1
   17670:	cmp	r4, r3
   17674:	beq	177a0 <__assert_fail@plt+0x6248>
   17678:	mov	r1, #8
   1767c:	mov	r0, r4
   17680:	mvn	r3, #-2147483648	; 0x80000000
   17684:	str	r1, [sp]
   17688:	add	r1, sp, #36	; 0x24
   1768c:	bl	2a988 <__assert_fail@plt+0x19430>
   17690:	mov	r4, r0
   17694:	str	r0, [r5]
   17698:	ldr	r0, [r5, #4]
   1769c:	mov	r1, #0
   176a0:	ldr	r2, [sp, #36]	; 0x24
   176a4:	sub	r2, r2, r0
   176a8:	add	r0, r4, r0, lsl #3
   176ac:	lsl	r2, r2, #3
   176b0:	bl	1145c <memset@plt>
   176b4:	ldr	r3, [sp, #36]	; 0x24
   176b8:	ldr	r1, [sp, #40]	; 0x28
   176bc:	ldr	r7, [sp, #80]	; 0x50
   176c0:	str	r3, [r5, #4]
   176c4:	ldr	r6, [sp, #84]	; 0x54
   176c8:	mov	r3, fp
   176cc:	mov	r2, sl
   176d0:	ldr	r0, [sp, #44]	; 0x2c
   176d4:	ldr	r9, [r4]
   176d8:	ldr	r5, [r4, #4]
   176dc:	orr	r0, r0, #1
   176e0:	str	r1, [sp]
   176e4:	add	r1, sp, #48	; 0x30
   176e8:	str	r0, [sp, #4]
   176ec:	str	r1, [sp, #8]
   176f0:	mov	r1, r9
   176f4:	str	r7, [sp, #12]
   176f8:	str	r6, [sp, #16]
   176fc:	str	r0, [sp, #28]
   17700:	mov	r0, r5
   17704:	bl	14250 <__assert_fail@plt+0x2cf8>
   17708:	cmp	r9, r0
   1770c:	bhi	17778 <__assert_fail@plt+0x6220>
   17710:	add	r6, r0, #1
   17714:	movw	r3, #62148	; 0xf2c4
   17718:	movt	r3, #3
   1771c:	cmp	r5, r3
   17720:	str	r6, [r4]
   17724:	beq	17730 <__assert_fail@plt+0x61d8>
   17728:	mov	r0, r5
   1772c:	bl	13e1c <__assert_fail@plt+0x28c4>
   17730:	mov	r0, r6
   17734:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   17738:	ldr	lr, [sp, #40]	; 0x28
   1773c:	mov	r1, r6
   17740:	mov	r3, fp
   17744:	mov	r2, sl
   17748:	mov	r5, r0
   1774c:	ldr	r6, [sp, #80]	; 0x50
   17750:	ldr	ip, [sp, #84]	; 0x54
   17754:	str	r0, [r4, #4]
   17758:	str	lr, [sp]
   1775c:	ldr	lr, [sp, #28]
   17760:	str	lr, [sp, #4]
   17764:	add	lr, sp, #48	; 0x30
   17768:	str	r6, [sp, #12]
   1776c:	str	lr, [sp, #8]
   17770:	str	ip, [sp, #16]
   17774:	bl	14250 <__assert_fail@plt+0x2cf8>
   17778:	ldr	r3, [sp, #24]
   1777c:	mov	r0, r5
   17780:	str	r3, [r8]
   17784:	add	sp, sp, #92	; 0x5c
   17788:	ldrd	r4, [sp]
   1778c:	ldrd	r6, [sp, #8]
   17790:	ldrd	r8, [sp, #16]
   17794:	ldrd	sl, [sp, #24]
   17798:	add	sp, sp, #32
   1779c:	pop	{pc}		; (ldr pc, [sp], #4)
   177a0:	mov	r1, #8
   177a4:	mvn	r3, #-2147483648	; 0x80000000
   177a8:	ldr	r0, [sp, #28]
   177ac:	str	r1, [sp]
   177b0:	add	r1, sp, #36	; 0x24
   177b4:	bl	2a988 <__assert_fail@plt+0x19430>
   177b8:	ldrd	r2, [r5, #8]
   177bc:	mov	r4, r0
   177c0:	str	r0, [r5]
   177c4:	strd	r2, [r0]
   177c8:	b	17698 <__assert_fail@plt+0x6140>
   177cc:	bl	11534 <abort@plt>
   177d0:	andeq	pc, r3, r4, asr #7
   177d4:	ldr	r3, [pc]	; 177dc <__assert_fail@plt+0x6284>
   177d8:	b	15c3c <__assert_fail@plt+0x46e4>
   177dc:	andeq	pc, r3, r8, ror r1	; <UNPREDICTABLE>
   177e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177e4:	movw	r4, #61800	; 0xf168
   177e8:	movt	r4, #3
   177ec:	strd	r6, [sp, #8]
   177f0:	strd	r8, [sp, #16]
   177f4:	strd	sl, [sp, #24]
   177f8:	mov	sl, r0
   177fc:	mov	fp, r1
   17800:	str	lr, [sp, #32]
   17804:	sub	sp, sp, #44	; 0x2c
   17808:	bl	1142c <__errno_location@plt>
   1780c:	ldr	r3, [r0]
   17810:	mov	r8, r0
   17814:	ldr	r2, [r4, #4]
   17818:	ldr	r5, [r4]
   1781c:	str	r3, [sp, #28]
   17820:	cmp	r2, #0
   17824:	bgt	17880 <__assert_fail@plt+0x6328>
   17828:	add	r3, r4, #8
   1782c:	str	r2, [sp, #36]	; 0x24
   17830:	rsb	r2, r2, #1
   17834:	cmp	r5, r3
   17838:	beq	1795c <__assert_fail@plt+0x6404>
   1783c:	mov	r1, #8
   17840:	mov	r0, r5
   17844:	mvn	r3, #-2147483648	; 0x80000000
   17848:	str	r1, [sp]
   1784c:	add	r1, sp, #36	; 0x24
   17850:	bl	2a988 <__assert_fail@plt+0x19430>
   17854:	mov	r5, r0
   17858:	str	r0, [r4]
   1785c:	ldr	r0, [r4, #4]
   17860:	mov	r1, #0
   17864:	ldr	r2, [sp, #36]	; 0x24
   17868:	sub	r2, r2, r0
   1786c:	add	r0, r5, r0, lsl #3
   17870:	lsl	r2, r2, #3
   17874:	bl	1145c <memset@plt>
   17878:	ldr	r3, [sp, #36]	; 0x24
   1787c:	str	r3, [r4, #4]
   17880:	ldr	ip, [r4, #16]
   17884:	mov	r3, fp
   17888:	mov	r2, sl
   1788c:	ldr	r7, [r4, #20]
   17890:	ldr	r0, [pc, #240]	; 17988 <__assert_fail@plt+0x6430>
   17894:	ldr	r9, [r5]
   17898:	orr	r7, r7, #1
   1789c:	ldr	r6, [r5, #4]
   178a0:	str	ip, [sp]
   178a4:	ldr	ip, [r4, #56]	; 0x38
   178a8:	mov	r1, r9
   178ac:	str	r7, [sp, #4]
   178b0:	ldr	lr, [r4, #60]	; 0x3c
   178b4:	str	r0, [sp, #8]
   178b8:	mov	r0, r6
   178bc:	str	ip, [sp, #12]
   178c0:	str	lr, [sp, #16]
   178c4:	bl	14250 <__assert_fail@plt+0x2cf8>
   178c8:	cmp	r9, r0
   178cc:	bhi	17934 <__assert_fail@plt+0x63dc>
   178d0:	add	r9, r0, #1
   178d4:	movw	r3, #62148	; 0xf2c4
   178d8:	movt	r3, #3
   178dc:	cmp	r6, r3
   178e0:	str	r9, [r5]
   178e4:	beq	178f0 <__assert_fail@plt+0x6398>
   178e8:	mov	r0, r6
   178ec:	bl	13e1c <__assert_fail@plt+0x28c4>
   178f0:	mov	r0, r9
   178f4:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   178f8:	ldr	ip, [r4, #16]
   178fc:	mov	r1, r9
   17900:	mov	r3, fp
   17904:	mov	r2, sl
   17908:	mov	r6, r0
   1790c:	ldr	r9, [r4, #56]	; 0x38
   17910:	ldr	lr, [r4, #60]	; 0x3c
   17914:	str	r0, [r5, #4]
   17918:	str	ip, [sp]
   1791c:	ldr	ip, [pc, #100]	; 17988 <__assert_fail@plt+0x6430>
   17920:	str	r7, [sp, #4]
   17924:	str	ip, [sp, #8]
   17928:	str	r9, [sp, #12]
   1792c:	str	lr, [sp, #16]
   17930:	bl	14250 <__assert_fail@plt+0x2cf8>
   17934:	ldr	r3, [sp, #28]
   17938:	mov	r0, r6
   1793c:	str	r3, [r8]
   17940:	add	sp, sp, #44	; 0x2c
   17944:	ldrd	r4, [sp]
   17948:	ldrd	r6, [sp, #8]
   1794c:	ldrd	r8, [sp, #16]
   17950:	ldrd	sl, [sp, #24]
   17954:	add	sp, sp, #32
   17958:	pop	{pc}		; (ldr pc, [sp], #4)
   1795c:	mov	r0, #8
   17960:	mvn	r3, #-2147483648	; 0x80000000
   17964:	add	r1, sp, #36	; 0x24
   17968:	str	r0, [sp]
   1796c:	mov	r0, #0
   17970:	bl	2a988 <__assert_fail@plt+0x19430>
   17974:	ldrd	r2, [r4, #8]
   17978:	mov	r5, r0
   1797c:	str	r0, [r4]
   17980:	strd	r2, [r0]
   17984:	b	1785c <__assert_fail@plt+0x6304>
   17988:	andeq	pc, r3, r0, lsl #3
   1798c:	ldr	r3, [pc, #4]	; 17998 <__assert_fail@plt+0x6440>
   17990:	mvn	r2, #0
   17994:	b	15c3c <__assert_fail@plt+0x46e4>
   17998:	andeq	pc, r3, r8, ror r1	; <UNPREDICTABLE>
   1799c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   179a0:	movw	r4, #61800	; 0xf168
   179a4:	movt	r4, #3
   179a8:	strd	r6, [sp, #8]
   179ac:	strd	r8, [sp, #16]
   179b0:	strd	sl, [sp, #24]
   179b4:	mov	sl, r0
   179b8:	str	lr, [sp, #32]
   179bc:	sub	sp, sp, #44	; 0x2c
   179c0:	bl	1142c <__errno_location@plt>
   179c4:	ldr	r3, [r0]
   179c8:	mov	r8, r0
   179cc:	ldr	r2, [r4, #4]
   179d0:	ldr	r5, [r4]
   179d4:	str	r3, [sp, #28]
   179d8:	cmp	r2, #0
   179dc:	bgt	17a38 <__assert_fail@plt+0x64e0>
   179e0:	add	r3, r4, #8
   179e4:	str	r2, [sp, #36]	; 0x24
   179e8:	rsb	r2, r2, #1
   179ec:	cmp	r5, r3
   179f0:	beq	17b00 <__assert_fail@plt+0x65a8>
   179f4:	mov	r1, #8
   179f8:	mov	r0, r5
   179fc:	mvn	r3, #-2147483648	; 0x80000000
   17a00:	str	r1, [sp]
   17a04:	add	r1, sp, #36	; 0x24
   17a08:	bl	2a988 <__assert_fail@plt+0x19430>
   17a0c:	mov	r5, r0
   17a10:	str	r0, [r4]
   17a14:	ldr	r0, [r4, #4]
   17a18:	mov	r1, #0
   17a1c:	ldr	r2, [sp, #36]	; 0x24
   17a20:	sub	r2, r2, r0
   17a24:	add	r0, r5, r0, lsl #3
   17a28:	lsl	r2, r2, #3
   17a2c:	bl	1145c <memset@plt>
   17a30:	ldr	r3, [sp, #36]	; 0x24
   17a34:	str	r3, [r4, #4]
   17a38:	ldr	ip, [r4, #16]
   17a3c:	mvn	r3, #0
   17a40:	mov	r2, sl
   17a44:	ldr	r7, [r4, #20]
   17a48:	ldr	fp, [pc, #220]	; 17b2c <__assert_fail@plt+0x65d4>
   17a4c:	ldr	r9, [r5]
   17a50:	orr	r7, r7, #1
   17a54:	ldr	r6, [r5, #4]
   17a58:	str	ip, [sp]
   17a5c:	ldr	ip, [r4, #56]	; 0x38
   17a60:	mov	r1, r9
   17a64:	stmib	sp, {r7, fp}
   17a68:	ldr	lr, [r4, #60]	; 0x3c
   17a6c:	mov	r0, r6
   17a70:	str	ip, [sp, #12]
   17a74:	str	lr, [sp, #16]
   17a78:	bl	14250 <__assert_fail@plt+0x2cf8>
   17a7c:	cmp	r9, r0
   17a80:	bhi	17ad8 <__assert_fail@plt+0x6580>
   17a84:	add	r9, r0, #1
   17a88:	movw	r3, #62148	; 0xf2c4
   17a8c:	movt	r3, #3
   17a90:	cmp	r6, r3
   17a94:	str	r9, [r5]
   17a98:	beq	17aa4 <__assert_fail@plt+0x654c>
   17a9c:	mov	r0, r6
   17aa0:	bl	13e1c <__assert_fail@plt+0x28c4>
   17aa4:	mov	r0, r9
   17aa8:	bl	2a6e4 <__assert_fail@plt+0x1918c>
   17aac:	ldr	r3, [r4, #16]
   17ab0:	mov	r2, sl
   17ab4:	mov	r1, r9
   17ab8:	mov	r6, r0
   17abc:	ldr	lr, [r4, #56]	; 0x38
   17ac0:	ldr	ip, [r4, #60]	; 0x3c
   17ac4:	str	r0, [r5, #4]
   17ac8:	stm	sp, {r3, r7, fp, lr}
   17acc:	mvn	r3, #0
   17ad0:	str	ip, [sp, #16]
   17ad4:	bl	14250 <__assert_fail@plt+0x2cf8>
   17ad8:	ldr	r3, [sp, #28]
   17adc:	mov	r0, r6
   17ae0:	str	r3, [r8]
   17ae4:	add	sp, sp, #44	; 0x2c
   17ae8:	ldrd	r4, [sp]
   17aec:	ldrd	r6, [sp, #8]
   17af0:	ldrd	r8, [sp, #16]
   17af4:	ldrd	sl, [sp, #24]
   17af8:	add	sp, sp, #32
   17afc:	pop	{pc}		; (ldr pc, [sp], #4)
   17b00:	mov	r0, #8
   17b04:	mvn	r3, #-2147483648	; 0x80000000
   17b08:	add	r1, sp, #36	; 0x24
   17b0c:	str	r0, [sp]
   17b10:	mov	r0, #0
   17b14:	bl	2a988 <__assert_fail@plt+0x19430>
   17b18:	ldrd	r2, [r4, #8]
   17b1c:	mov	r5, r0
   17b20:	str	r0, [r4]
   17b24:	strd	r2, [r0]
   17b28:	b	17a14 <__assert_fail@plt+0x64bc>
   17b2c:	andeq	pc, r3, r0, lsl #3
   17b30:	ldr	r3, [r1, #40]	; 0x28
   17b34:	ldr	ip, [r1, #56]	; 0x38
   17b38:	cmp	ip, r3
   17b3c:	ble	17c00 <__assert_fail@plt+0x66a8>
   17b40:	str	r4, [sp, #-8]!
   17b44:	ldr	r4, [r1, #80]	; 0x50
   17b48:	str	lr, [sp, #4]
   17b4c:	ldr	lr, [r1, #4]
   17b50:	cmp	r4, #1
   17b54:	ldrb	ip, [lr, r3]
   17b58:	strb	ip, [r0]
   17b5c:	ble	17b7c <__assert_fail@plt+0x6624>
   17b60:	ldr	r4, [r1, #28]
   17b64:	cmp	r3, r4
   17b68:	beq	17b7c <__assert_fail@plt+0x6624>
   17b6c:	ldr	r4, [r1, #8]
   17b70:	ldr	r4, [r4, r3, lsl #2]
   17b74:	cmn	r4, #1
   17b78:	beq	17bc0 <__assert_fail@plt+0x6668>
   17b7c:	cmp	ip, #92	; 0x5c
   17b80:	beq	17bb8 <__assert_fail@plt+0x6660>
   17b84:	cmp	ip, #91	; 0x5b
   17b88:	beq	17c40 <__assert_fail@plt+0x66e8>
   17b8c:	cmp	ip, #93	; 0x5d
   17b90:	beq	17c98 <__assert_fail@plt+0x6740>
   17b94:	cmp	ip, #94	; 0x5e
   17b98:	bne	17bdc <__assert_fail@plt+0x6684>
   17b9c:	mov	r2, #25
   17ba0:	mov	r3, #1
   17ba4:	ldr	r4, [sp]
   17ba8:	add	sp, sp, #4
   17bac:	strb	r2, [r0, #4]
   17bb0:	mov	r0, r3
   17bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   17bb8:	tst	r2, #1
   17bbc:	bne	17c14 <__assert_fail@plt+0x66bc>
   17bc0:	mov	r2, #1
   17bc4:	mov	r3, r2
   17bc8:	strb	r2, [r0, #4]
   17bcc:	ldr	r4, [sp]
   17bd0:	add	sp, sp, #4
   17bd4:	mov	r0, r3
   17bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bdc:	cmp	ip, #45	; 0x2d
   17be0:	bne	17bc0 <__assert_fail@plt+0x6668>
   17be4:	mov	r2, #22
   17be8:	mov	r3, #1
   17bec:	ldr	r4, [sp]
   17bf0:	add	sp, sp, #4
   17bf4:	strb	r2, [r0, #4]
   17bf8:	mov	r0, r3
   17bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   17c00:	mov	r2, #2
   17c04:	mov	r3, #0
   17c08:	strb	r2, [r0, #4]
   17c0c:	mov	r0, r3
   17c10:	bx	lr
   17c14:	ldr	r2, [r1, #48]	; 0x30
   17c18:	add	r3, r3, #1
   17c1c:	cmp	r3, r2
   17c20:	bge	17bc0 <__assert_fail@plt+0x6668>
   17c24:	str	r3, [r1, #40]	; 0x28
   17c28:	mov	r2, #1
   17c2c:	ldrb	r1, [lr, r3]
   17c30:	mov	r3, r2
   17c34:	strb	r1, [r0]
   17c38:	strb	r2, [r0, #4]
   17c3c:	b	17bcc <__assert_fail@plt+0x6674>
   17c40:	ldr	r1, [r1, #48]	; 0x30
   17c44:	add	ip, r3, #1
   17c48:	cmp	ip, r1
   17c4c:	bge	17c80 <__assert_fail@plt+0x6728>
   17c50:	add	r3, lr, r3
   17c54:	ldrb	r3, [r3, #1]
   17c58:	cmp	r3, #58	; 0x3a
   17c5c:	strb	r3, [r0]
   17c60:	beq	17cc4 <__assert_fail@plt+0x676c>
   17c64:	cmp	r3, #61	; 0x3d
   17c68:	beq	17cb4 <__assert_fail@plt+0x675c>
   17c6c:	cmp	r3, #46	; 0x2e
   17c70:	moveq	r2, #26
   17c74:	moveq	r3, #2
   17c78:	strbeq	r2, [r0, #4]
   17c7c:	beq	17bcc <__assert_fail@plt+0x6674>
   17c80:	mov	r2, #1
   17c84:	mov	r1, #91	; 0x5b
   17c88:	mov	r3, r2
   17c8c:	strb	r1, [r0]
   17c90:	strb	r2, [r0, #4]
   17c94:	b	17bcc <__assert_fail@plt+0x6674>
   17c98:	mov	r2, #21
   17c9c:	mov	r3, #1
   17ca0:	ldr	r4, [sp]
   17ca4:	add	sp, sp, #4
   17ca8:	strb	r2, [r0, #4]
   17cac:	mov	r0, r3
   17cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb4:	mov	r2, #28
   17cb8:	mov	r3, #2
   17cbc:	strb	r2, [r0, #4]
   17cc0:	b	17bcc <__assert_fail@plt+0x6674>
   17cc4:	tst	r2, #4
   17cc8:	beq	17c80 <__assert_fail@plt+0x6728>
   17ccc:	mov	r2, #30
   17cd0:	mov	r3, #2
   17cd4:	strb	r2, [r0, #4]
   17cd8:	b	17bcc <__assert_fail@plt+0x6674>
   17cdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17ce0:	strd	r6, [sp, #8]
   17ce4:	ldr	r7, [r0, #84]	; 0x54
   17ce8:	strd	r8, [sp, #16]
   17cec:	strd	sl, [sp, #24]
   17cf0:	mov	fp, r1
   17cf4:	str	lr, [sp, #32]
   17cf8:	sub	sp, sp, #52	; 0x34
   17cfc:	ldr	r8, [r7, #24]
   17d00:	str	r3, [sp, #24]
   17d04:	add	r3, r3, r3, lsl #1
   17d08:	add	r8, r8, r3, lsl #2
   17d0c:	ldr	r1, [r8, #4]
   17d10:	cmp	r1, #0
   17d14:	ble	17ec8 <__assert_fail@plt+0x6970>
   17d18:	ldr	r3, [sp, #88]	; 0x58
   17d1c:	mov	r9, r2
   17d20:	mov	r2, #1
   17d24:	mov	sl, r0
   17d28:	and	r0, fp, #2
   17d2c:	mov	r4, #0
   17d30:	str	r0, [sp, #12]
   17d34:	and	r0, fp, #1
   17d38:	add	r3, r3, r3, lsl r2
   17d3c:	str	r0, [sp, #16]
   17d40:	lsl	r2, r2, r9
   17d44:	lsl	r3, r3, #3
   17d48:	str	r2, [sp, #20]
   17d4c:	str	r3, [sp, #28]
   17d50:	mvn	r3, r2
   17d54:	str	r3, [sp, #32]
   17d58:	b	17d70 <__assert_fail@plt+0x6818>
   17d5c:	cmp	r3, #4
   17d60:	beq	17dec <__assert_fail@plt+0x6894>
   17d64:	add	r4, r4, #1
   17d68:	cmp	r4, r1
   17d6c:	bge	17ec8 <__assert_fail@plt+0x6970>
   17d70:	ldr	r3, [r8, #8]
   17d74:	ldr	r2, [r7]
   17d78:	ldr	r5, [r3, r4, lsl #2]
   17d7c:	add	r3, r2, r5, lsl #3
   17d80:	ldrb	r3, [r3, #4]
   17d84:	cmp	r3, #8
   17d88:	beq	17db4 <__assert_fail@plt+0x685c>
   17d8c:	cmp	r3, #9
   17d90:	bne	17d5c <__assert_fail@plt+0x6804>
   17d94:	ldr	r3, [sp, #12]
   17d98:	cmp	r3, #0
   17d9c:	beq	17d64 <__assert_fail@plt+0x680c>
   17da0:	ldr	r3, [r2, r5, lsl #3]
   17da4:	cmp	r3, r9
   17da8:	bne	17d64 <__assert_fail@plt+0x680c>
   17dac:	mov	r0, #0
   17db0:	b	17dd0 <__assert_fail@plt+0x6878>
   17db4:	ldr	r3, [sp, #16]
   17db8:	cmp	r3, #0
   17dbc:	beq	17d64 <__assert_fail@plt+0x680c>
   17dc0:	ldr	r3, [r2, r5, lsl #3]
   17dc4:	cmp	r3, r9
   17dc8:	bne	17d64 <__assert_fail@plt+0x680c>
   17dcc:	mvn	r0, #0
   17dd0:	add	sp, sp, #52	; 0x34
   17dd4:	ldrd	r4, [sp]
   17dd8:	ldrd	r6, [sp, #8]
   17ddc:	ldrd	r8, [sp, #16]
   17de0:	ldrd	sl, [sp, #24]
   17de4:	add	sp, sp, #32
   17de8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dec:	ldr	r3, [sp, #88]	; 0x58
   17df0:	cmn	r3, #1
   17df4:	beq	17d64 <__assert_fail@plt+0x680c>
   17df8:	add	r3, r5, r5, lsl #1
   17dfc:	ldr	r2, [sp, #28]
   17e00:	cmp	r9, #31
   17e04:	ldr	r6, [sl, #116]	; 0x74
   17e08:	lsl	r3, r3, #2
   17e0c:	str	r3, [sp, #36]	; 0x24
   17e10:	add	r6, r6, r2
   17e14:	bgt	17ed0 <__assert_fail@plt+0x6978>
   17e18:	ldr	r3, [sp, #12]
   17e1c:	add	r6, r6, #24
   17e20:	str	r8, [sp, #40]	; 0x28
   17e24:	str	r4, [sp, #44]	; 0x2c
   17e28:	ldr	r4, [sp, #24]
   17e2c:	cmp	r3, #0
   17e30:	bne	17f60 <__assert_fail@plt+0x6a08>
   17e34:	ldr	r8, [sp, #36]	; 0x24
   17e38:	ldr	r3, [r6, #-24]	; 0xffffffe8
   17e3c:	cmp	r5, r3
   17e40:	bne	17ea0 <__assert_fail@plt+0x6948>
   17e44:	ldr	r3, [r6, #-8]
   17e48:	mov	r2, r9
   17e4c:	mov	r1, fp
   17e50:	mov	r0, sl
   17e54:	ldr	ip, [sp, #20]
   17e58:	tst	ip, r3
   17e5c:	beq	17ea0 <__assert_fail@plt+0x6948>
   17e60:	ldr	r3, [r7, #20]
   17e64:	add	r3, r3, r8
   17e68:	ldr	r3, [r3, #8]
   17e6c:	ldr	ip, [r3]
   17e70:	cmp	r4, ip
   17e74:	mov	r3, ip
   17e78:	beq	17f54 <__assert_fail@plt+0x69fc>
   17e7c:	ldr	ip, [sp, #88]	; 0x58
   17e80:	str	ip, [sp]
   17e84:	bl	17cdc <__assert_fail@plt+0x6784>
   17e88:	cmn	r0, #1
   17e8c:	beq	17dcc <__assert_fail@plt+0x6874>
   17e90:	ldr	r3, [r6, #-8]
   17e94:	ldr	r2, [sp, #32]
   17e98:	and	r3, r3, r2
   17e9c:	str	r3, [r6, #-8]
   17ea0:	add	r6, r6, #24
   17ea4:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   17ea8:	cmp	r3, #0
   17eac:	bne	17e38 <__assert_fail@plt+0x68e0>
   17eb0:	ldr	r8, [sp, #40]	; 0x28
   17eb4:	ldr	r4, [sp, #44]	; 0x2c
   17eb8:	add	r4, r4, #1
   17ebc:	ldr	r1, [r8, #4]
   17ec0:	cmp	r4, r1
   17ec4:	blt	17d70 <__assert_fail@plt+0x6818>
   17ec8:	asr	r0, fp, #1
   17ecc:	b	17dd0 <__assert_fail@plt+0x6878>
   17ed0:	ldr	r2, [sp, #12]
   17ed4:	add	r6, r6, #24
   17ed8:	cmp	r2, #0
   17edc:	bne	17fec <__assert_fail@plt+0x6a94>
   17ee0:	str	r8, [sp, #36]	; 0x24
   17ee4:	mov	r8, r3
   17ee8:	str	r4, [sp, #40]	; 0x28
   17eec:	ldr	r4, [sp, #24]
   17ef0:	mov	r2, r9
   17ef4:	mov	r1, fp
   17ef8:	ldr	r3, [r6, #-24]	; 0xffffffe8
   17efc:	mov	r0, sl
   17f00:	add	r6, r6, #24
   17f04:	cmp	r5, r3
   17f08:	bne	17f3c <__assert_fail@plt+0x69e4>
   17f0c:	ldr	r3, [r7, #20]
   17f10:	add	r3, r3, r8
   17f14:	ldr	r3, [r3, #8]
   17f18:	ldr	ip, [r3]
   17f1c:	cmp	r4, ip
   17f20:	mov	r3, ip
   17f24:	beq	17f54 <__assert_fail@plt+0x69fc>
   17f28:	ldr	ip, [sp, #88]	; 0x58
   17f2c:	str	ip, [sp]
   17f30:	bl	17cdc <__assert_fail@plt+0x6784>
   17f34:	cmn	r0, #1
   17f38:	beq	17dcc <__assert_fail@plt+0x6874>
   17f3c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   17f40:	cmp	r3, #0
   17f44:	bne	17ef0 <__assert_fail@plt+0x6998>
   17f48:	ldr	r8, [sp, #36]	; 0x24
   17f4c:	ldr	r4, [sp, #40]	; 0x28
   17f50:	b	17eb8 <__assert_fail@plt+0x6960>
   17f54:	ldr	r3, [sp, #16]
   17f58:	rsb	r0, r3, #0
   17f5c:	b	17dd0 <__assert_fail@plt+0x6878>
   17f60:	ldr	r8, [sp, #88]	; 0x58
   17f64:	b	17f88 <__assert_fail@plt+0x6a30>
   17f68:	ldr	r3, [r6, #-8]
   17f6c:	ldr	r2, [sp, #32]
   17f70:	and	r3, r3, r2
   17f74:	str	r3, [r6, #-8]
   17f78:	add	r6, r6, #24
   17f7c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   17f80:	cmp	r3, #0
   17f84:	beq	17eb0 <__assert_fail@plt+0x6958>
   17f88:	ldr	r3, [r6, #-24]	; 0xffffffe8
   17f8c:	cmp	r3, r5
   17f90:	bne	17f78 <__assert_fail@plt+0x6a20>
   17f94:	ldr	r3, [r6, #-8]
   17f98:	mov	r2, r9
   17f9c:	mov	r1, fp
   17fa0:	mov	r0, sl
   17fa4:	ldr	ip, [sp, #20]
   17fa8:	tst	ip, r3
   17fac:	beq	17f78 <__assert_fail@plt+0x6a20>
   17fb0:	ldr	r3, [r7, #20]
   17fb4:	ldr	ip, [sp, #36]	; 0x24
   17fb8:	add	r3, r3, ip
   17fbc:	ldr	r3, [r3, #8]
   17fc0:	ldr	ip, [r3]
   17fc4:	cmp	r4, ip
   17fc8:	mov	r3, ip
   17fcc:	beq	17f54 <__assert_fail@plt+0x69fc>
   17fd0:	str	r8, [sp]
   17fd4:	bl	17cdc <__assert_fail@plt+0x6784>
   17fd8:	cmn	r0, #1
   17fdc:	beq	17dcc <__assert_fail@plt+0x6874>
   17fe0:	cmp	r0, #0
   17fe4:	bne	17f68 <__assert_fail@plt+0x6a10>
   17fe8:	b	17dac <__assert_fail@plt+0x6854>
   17fec:	str	r8, [sp, #40]	; 0x28
   17ff0:	str	r4, [sp, #44]	; 0x2c
   17ff4:	ldr	r4, [sp, #24]
   17ff8:	ldr	r8, [sp, #88]	; 0x58
   17ffc:	b	1800c <__assert_fail@plt+0x6ab4>
   18000:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   18004:	cmp	r3, #0
   18008:	beq	17eb0 <__assert_fail@plt+0x6958>
   1800c:	ldr	r3, [r6, #-24]	; 0xffffffe8
   18010:	mov	r2, r9
   18014:	mov	r1, fp
   18018:	mov	r0, sl
   1801c:	add	r6, r6, #24
   18020:	cmp	r5, r3
   18024:	bne	18000 <__assert_fail@plt+0x6aa8>
   18028:	ldr	r3, [r7, #20]
   1802c:	ldr	ip, [sp, #36]	; 0x24
   18030:	add	r3, r3, ip
   18034:	ldr	r3, [r3, #8]
   18038:	ldr	ip, [r3]
   1803c:	cmp	r4, ip
   18040:	mov	r3, ip
   18044:	beq	17f54 <__assert_fail@plt+0x69fc>
   18048:	str	r8, [sp]
   1804c:	bl	17cdc <__assert_fail@plt+0x6784>
   18050:	cmn	r0, #1
   18054:	beq	17dcc <__assert_fail@plt+0x6874>
   18058:	cmp	r0, #0
   1805c:	beq	17dac <__assert_fail@plt+0x6854>
   18060:	b	18000 <__assert_fail@plt+0x6aa8>
   18064:	ldr	r3, [r0, #80]	; 0x50
   18068:	strd	r4, [sp, #-16]!
   1806c:	mov	r4, r0
   18070:	mov	r5, r1
   18074:	str	r6, [sp, #8]
   18078:	str	lr, [sp, #12]
   1807c:	cmp	r3, #1
   18080:	ble	180c8 <__assert_fail@plt+0x6b70>
   18084:	cmn	r1, #-1073741823	; 0xc0000001
   18088:	bhi	18108 <__assert_fail@plt+0x6bb0>
   1808c:	lsl	r6, r1, #2
   18090:	ldr	r0, [r0, #8]
   18094:	mov	r1, r6
   18098:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1809c:	subs	r3, r0, #0
   180a0:	beq	18108 <__assert_fail@plt+0x6bb0>
   180a4:	ldr	r0, [r4, #12]
   180a8:	str	r3, [r4, #8]
   180ac:	cmp	r0, #0
   180b0:	beq	180c8 <__assert_fail@plt+0x6b70>
   180b4:	mov	r1, r6
   180b8:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   180bc:	cmp	r0, #0
   180c0:	beq	18108 <__assert_fail@plt+0x6bb0>
   180c4:	str	r0, [r4, #12]
   180c8:	ldrb	r3, [r4, #75]	; 0x4b
   180cc:	cmp	r3, #0
   180d0:	bne	180ec <__assert_fail@plt+0x6b94>
   180d4:	str	r5, [r4, #36]	; 0x24
   180d8:	mov	r0, #0
   180dc:	ldrd	r4, [sp]
   180e0:	ldr	r6, [sp, #8]
   180e4:	add	sp, sp, #12
   180e8:	pop	{pc}		; (ldr pc, [sp], #4)
   180ec:	mov	r1, r5
   180f0:	ldr	r0, [r4, #4]
   180f4:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   180f8:	cmp	r0, #0
   180fc:	beq	18108 <__assert_fail@plt+0x6bb0>
   18100:	str	r0, [r4, #4]
   18104:	b	180d4 <__assert_fail@plt+0x6b7c>
   18108:	ldrd	r4, [sp]
   1810c:	mov	r0, #12
   18110:	ldr	r6, [sp, #8]
   18114:	add	sp, sp, #12
   18118:	pop	{pc}		; (ldr pc, [sp], #4)
   1811c:	ldr	r3, [r1, #8]
   18120:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18124:	mov	r4, #0
   18128:	mov	r5, r1
   1812c:	strd	r6, [sp, #8]
   18130:	mov	r7, r2
   18134:	str	r8, [sp, #16]
   18138:	mov	r8, r0
   1813c:	str	lr, [sp, #20]
   18140:	lsl	r0, r3, #2
   18144:	str	r2, [r1]
   18148:	str	r3, [r1, #16]
   1814c:	str	r4, [r1, #20]
   18150:	bl	2cd58 <__assert_fail@plt+0x1b800>
   18154:	cmp	r0, r4
   18158:	str	r0, [r5, #24]
   1815c:	beq	18238 <__assert_fail@plt+0x6ce0>
   18160:	ldr	r1, [r5, #8]
   18164:	cmp	r1, #0
   18168:	bgt	18178 <__assert_fail@plt+0x6c20>
   1816c:	b	181c4 <__assert_fail@plt+0x6c6c>
   18170:	cmp	r4, r1
   18174:	bge	181c4 <__assert_fail@plt+0x6c6c>
   18178:	ldr	r2, [r5, #12]
   1817c:	ldr	r3, [r8]
   18180:	ldr	r6, [r2, r4, lsl #2]
   18184:	add	r4, r4, #1
   18188:	add	r3, r3, r6, lsl #3
   1818c:	ldrb	r3, [r3, #4]
   18190:	tst	r3, #8
   18194:	bne	18170 <__assert_fail@plt+0x6c18>
   18198:	ldr	r3, [r5, #16]
   1819c:	ldr	r1, [r5, #20]
   181a0:	ldr	r0, [r5, #24]
   181a4:	cmp	r3, r1
   181a8:	beq	18210 <__assert_fail@plt+0x6cb8>
   181ac:	add	r3, r1, #1
   181b0:	str	r3, [r5, #20]
   181b4:	str	r6, [r0, r1, lsl #2]
   181b8:	ldr	r1, [r5, #8]
   181bc:	cmp	r4, r1
   181c0:	blt	18178 <__assert_fail@plt+0x6c20>
   181c4:	ldr	r6, [r8, #32]
   181c8:	ldr	r4, [r8, #68]	; 0x44
   181cc:	and	r7, r7, r4
   181d0:	add	r7, r7, r7, lsl #1
   181d4:	lsl	r4, r7, #2
   181d8:	add	r7, r6, r4
   181dc:	ldr	r3, [r6, r4]
   181e0:	ldrd	r0, [r7, #4]
   181e4:	add	r2, r3, #1
   181e8:	cmp	r0, r3
   181ec:	ble	18240 <__assert_fail@plt+0x6ce8>
   181f0:	mov	r0, #0
   181f4:	str	r2, [r6, r4]
   181f8:	str	r5, [r1, r3, lsl #2]
   181fc:	ldrd	r4, [sp]
   18200:	ldrd	r6, [sp, #8]
   18204:	ldr	r8, [sp, #16]
   18208:	add	sp, sp, #20
   1820c:	pop	{pc}		; (ldr pc, [sp], #4)
   18210:	add	r1, r1, #1
   18214:	lsl	r3, r1, #1
   18218:	lsl	r1, r1, #3
   1821c:	str	r3, [r5, #16]
   18220:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   18224:	cmp	r0, #0
   18228:	beq	18238 <__assert_fail@plt+0x6ce0>
   1822c:	str	r0, [r5, #24]
   18230:	ldr	r1, [r5, #20]
   18234:	b	181ac <__assert_fail@plt+0x6c54>
   18238:	mov	r0, #12
   1823c:	b	181fc <__assert_fail@plt+0x6ca4>
   18240:	mov	r0, r1
   18244:	lsl	r1, r2, #3
   18248:	lsl	r8, r2, #1
   1824c:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   18250:	subs	r1, r0, #0
   18254:	beq	18238 <__assert_fail@plt+0x6ce0>
   18258:	ldr	r3, [r6, r4]
   1825c:	str	r8, [r7, #4]
   18260:	str	r1, [r7, #8]
   18264:	add	r2, r3, #1
   18268:	b	181f0 <__assert_fail@plt+0x6c98>
   1826c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18270:	mov	r5, r0
   18274:	ldr	r4, [r0, #28]
   18278:	ldr	r3, [r0, #48]	; 0x30
   1827c:	strd	r6, [sp, #8]
   18280:	strd	r8, [sp, #16]
   18284:	ldr	r8, [r0, #36]	; 0x24
   18288:	str	lr, [sp, #24]
   1828c:	sub	sp, sp, #84	; 0x54
   18290:	cmp	r8, r3
   18294:	movge	r8, r3
   18298:	cmp	r8, r4
   1829c:	ble	18330 <__assert_fail@plt+0x6dd8>
   182a0:	add	r9, r0, #16
   182a4:	ldr	r3, [r5, #64]	; 0x40
   182a8:	sub	r2, r8, r4
   182ac:	ldrd	r0, [r9]
   182b0:	cmp	r3, #0
   182b4:	strd	r0, [sp, #8]
   182b8:	bne	18384 <__assert_fail@plt+0x6e2c>
   182bc:	ldr	r1, [r5]
   182c0:	ldr	r3, [r5, #24]
   182c4:	add	r3, r4, r3
   182c8:	add	r1, r1, r3
   182cc:	mov	r3, r9
   182d0:	add	r0, sp, #4
   182d4:	bl	2d174 <__assert_fail@plt+0x1bc1c>
   182d8:	sub	r3, r0, #1
   182dc:	cmn	r3, #3
   182e0:	bhi	18350 <__assert_fail@plt+0x6df8>
   182e4:	cmn	r0, #2
   182e8:	ldrne	lr, [sp, #4]
   182ec:	beq	1842c <__assert_fail@plt+0x6ed4>
   182f0:	add	r2, r4, #1
   182f4:	add	r1, r4, r0
   182f8:	lsl	r3, r4, #2
   182fc:	ldr	ip, [r5, #8]
   18300:	cmp	r2, r1
   18304:	str	lr, [ip, r4, lsl #2]
   18308:	bge	1841c <__assert_fail@plt+0x6ec4>
   1830c:	sub	r2, r0, #-1073741823	; 0xc0000001
   18310:	add	r3, r3, #4
   18314:	mov	r4, r1
   18318:	lsl	r2, r2, #2
   1831c:	add	r0, ip, r3
   18320:	mov	r1, #255	; 0xff
   18324:	bl	1145c <memset@plt>
   18328:	cmp	r4, r8
   1832c:	blt	182a4 <__assert_fail@plt+0x6d4c>
   18330:	str	r4, [r5, #28]
   18334:	str	r4, [r5, #32]
   18338:	add	sp, sp, #84	; 0x54
   1833c:	ldrd	r4, [sp]
   18340:	ldrd	r6, [sp, #8]
   18344:	ldrd	r8, [sp, #16]
   18348:	add	sp, sp, #24
   1834c:	pop	{pc}		; (ldr pc, [sp], #4)
   18350:	ldr	r3, [r5]
   18354:	mov	r0, #1
   18358:	ldr	r1, [r5, #24]
   1835c:	ldr	r2, [r5, #64]	; 0x40
   18360:	add	r3, r3, r4
   18364:	ldrd	r6, [sp, #8]
   18368:	ldrb	lr, [r3, r1]
   1836c:	cmp	r2, #0
   18370:	str	lr, [sp, #4]
   18374:	ldrbne	lr, [r2, lr]
   18378:	strd	r6, [r9]
   1837c:	strne	lr, [sp, #4]
   18380:	b	182f0 <__assert_fail@plt+0x6d98>
   18384:	ldr	r1, [r5, #80]	; 0x50
   18388:	cmp	r1, #0
   1838c:	cmpgt	r2, #0
   18390:	ble	18414 <__assert_fail@plt+0x6ebc>
   18394:	ldr	r1, [r5]
   18398:	ldr	r0, [r5, #4]
   1839c:	ldr	ip, [r5, #24]
   183a0:	add	r1, r1, r4
   183a4:	ldrb	r1, [r1, ip]
   183a8:	ldrb	r1, [r3, r1]
   183ac:	strb	r1, [r0, r4]
   183b0:	ldr	r3, [r5, #80]	; 0x50
   183b4:	strb	r1, [sp, #16]
   183b8:	cmp	r2, r3
   183bc:	movlt	r3, r2
   183c0:	cmp	r3, #1
   183c4:	ble	18414 <__assert_fail@plt+0x6ebc>
   183c8:	add	r0, sp, #16
   183cc:	mov	r1, #1
   183d0:	ldr	r3, [r5]
   183d4:	ldr	ip, [r5, #24]
   183d8:	ldr	lr, [r5, #64]	; 0x40
   183dc:	add	r3, r3, r4
   183e0:	add	r3, r3, r1
   183e4:	ldrb	ip, [r3, ip]
   183e8:	ldr	r3, [r5, #4]
   183ec:	ldrb	ip, [lr, ip]
   183f0:	add	r3, r3, r1
   183f4:	add	r1, r1, #1
   183f8:	strb	ip, [r3, r4]
   183fc:	ldr	r3, [r5, #80]	; 0x50
   18400:	strb	ip, [r0, #1]!
   18404:	cmp	r2, r3
   18408:	movlt	r3, r2
   1840c:	cmp	r3, r1
   18410:	bgt	183d0 <__assert_fail@plt+0x6e78>
   18414:	add	r1, sp, #16
   18418:	b	182cc <__assert_fail@plt+0x6d74>
   1841c:	cmp	r8, r2
   18420:	mov	r4, r2
   18424:	bgt	182a4 <__assert_fail@plt+0x6d4c>
   18428:	b	18330 <__assert_fail@plt+0x6dd8>
   1842c:	ldr	r2, [r5, #36]	; 0x24
   18430:	ldr	r3, [r5, #48]	; 0x30
   18434:	cmp	r2, r3
   18438:	bge	18350 <__assert_fail@plt+0x6df8>
   1843c:	ldrd	r2, [sp, #8]
   18440:	strd	r2, [r5, #16]
   18444:	b	18330 <__assert_fail@plt+0x6dd8>
   18448:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1844c:	mov	r4, r0
   18450:	ldr	r5, [r0, #28]
   18454:	ldr	r3, [r0, #48]	; 0x30
   18458:	strd	r6, [sp, #8]
   1845c:	ldr	r6, [r0, #36]	; 0x24
   18460:	strd	r8, [sp, #16]
   18464:	strd	sl, [sp, #24]
   18468:	str	lr, [sp, #32]
   1846c:	sub	sp, sp, #108	; 0x6c
   18470:	ldrb	r2, [r0, #74]	; 0x4a
   18474:	cmp	r6, r3
   18478:	movge	r6, r3
   1847c:	cmp	r2, #0
   18480:	bne	18490 <__assert_fail@plt+0x6f38>
   18484:	ldr	r3, [r0, #64]	; 0x40
   18488:	cmp	r3, #0
   1848c:	beq	185d0 <__assert_fail@plt+0x7078>
   18490:	ldr	r7, [r4, #32]
   18494:	cmp	r5, r6
   18498:	bge	185a8 <__assert_fail@plt+0x7050>
   1849c:	add	r3, r4, #16
   184a0:	sub	fp, r6, r5
   184a4:	str	r3, [sp, #20]
   184a8:	add	r3, sp, #28
   184ac:	str	r3, [sp, #12]
   184b0:	ldrd	r0, [r4, #16]
   184b4:	ldr	r3, [r4, #64]	; 0x40
   184b8:	strd	r0, [sp, #32]
   184bc:	cmp	r3, #0
   184c0:	bne	187a0 <__assert_fail@plt+0x7248>
   184c4:	ldr	r8, [r4]
   184c8:	ldr	r3, [r4, #24]
   184cc:	add	r3, r7, r3
   184d0:	add	r3, r8, r3
   184d4:	mov	r1, r3
   184d8:	str	r3, [sp, #4]
   184dc:	mov	r2, fp
   184e0:	ldr	r0, [sp, #12]
   184e4:	ldr	r3, [sp, #20]
   184e8:	bl	2d174 <__assert_fail@plt+0x1bc1c>
   184ec:	sub	r3, r0, #1
   184f0:	mov	r8, r0
   184f4:	cmn	r3, #4
   184f8:	str	r3, [sp, #8]
   184fc:	bhi	18838 <__assert_fail@plt+0x72e0>
   18500:	ldr	r9, [sp, #28]
   18504:	mov	fp, r5
   18508:	mov	r0, r9
   1850c:	bl	1151c <towupper@plt>
   18510:	cmp	r9, r0
   18514:	mov	sl, r0
   18518:	beq	18820 <__assert_fail@plt+0x72c8>
   1851c:	add	r9, sp, #40	; 0x28
   18520:	add	r2, sp, #32
   18524:	mov	r0, r9
   18528:	mov	r1, sl
   1852c:	bl	111e0 <wcrtomb@plt>
   18530:	cmp	r8, r0
   18534:	mov	r3, r0
   18538:	bne	188c8 <__assert_fail@plt+0x7370>
   1853c:	ldr	r0, [r4, #4]
   18540:	mov	r1, r9
   18544:	mov	r2, r8
   18548:	add	r0, r0, r5
   1854c:	bl	11264 <memcpy@plt>
   18550:	ldrb	r2, [r4, #76]	; 0x4c
   18554:	cmp	r2, #0
   18558:	bne	188a8 <__assert_fail@plt+0x7350>
   1855c:	add	r2, r8, r7
   18560:	ldr	r0, [r4, #8]
   18564:	add	r5, r5, #1
   18568:	add	ip, r8, fp
   1856c:	cmp	r5, ip
   18570:	mov	r7, r2
   18574:	lsl	r1, fp, #2
   18578:	str	sl, [r0, fp, lsl #2]
   1857c:	bge	18494 <__assert_fail@plt+0x6f3c>
   18580:	sub	r2, r8, #-1073741823	; 0xc0000001
   18584:	add	r1, r1, #4
   18588:	lsl	r2, r2, #2
   1858c:	add	r0, r0, r1
   18590:	mov	r1, #255	; 0xff
   18594:	mov	r5, ip
   18598:	bl	1145c <memset@plt>
   1859c:	b	18494 <__assert_fail@plt+0x6f3c>
   185a0:	ldrd	r2, [sp, #32]
   185a4:	strd	r2, [r4, #16]
   185a8:	mov	r0, #0
   185ac:	str	r5, [r4, #28]
   185b0:	str	r7, [r4, #32]
   185b4:	add	sp, sp, #108	; 0x6c
   185b8:	ldrd	r4, [sp]
   185bc:	ldrd	r6, [sp, #8]
   185c0:	ldrd	r8, [sp, #16]
   185c4:	ldrd	sl, [sp, #24]
   185c8:	add	sp, sp, #32
   185cc:	pop	{pc}		; (ldr pc, [sp], #4)
   185d0:	ldrb	r3, [r0, #76]	; 0x4c
   185d4:	cmp	r3, #0
   185d8:	bne	18490 <__assert_fail@plt+0x6f38>
   185dc:	cmp	r5, r6
   185e0:	bge	18810 <__assert_fail@plt+0x72b8>
   185e4:	add	sl, r0, #16
   185e8:	str	r6, [sp, #4]
   185ec:	str	sl, [sp, #20]
   185f0:	b	18670 <__assert_fail@plt+0x7118>
   185f4:	add	r3, sp, #40	; 0x28
   185f8:	add	r2, sp, #32
   185fc:	mov	r0, r3
   18600:	mov	r1, r9
   18604:	str	r3, [sp, #8]
   18608:	bl	111e0 <wcrtomb@plt>
   1860c:	cmp	r7, r0
   18610:	bne	187f8 <__assert_fail@plt+0x72a0>
   18614:	ldr	r0, [r4, #4]
   18618:	mov	r2, r7
   1861c:	ldr	r3, [sp, #8]
   18620:	add	r0, r0, r5
   18624:	mov	r1, r3
   18628:	bl	11264 <memcpy@plt>
   1862c:	ldr	r0, [r4, #8]
   18630:	add	r5, r5, #1
   18634:	add	ip, r7, r8
   18638:	cmp	r5, ip
   1863c:	lsl	r3, r8, #2
   18640:	str	r9, [r0, r8, lsl #2]
   18644:	bge	18664 <__assert_fail@plt+0x710c>
   18648:	sub	r2, r7, #-1073741823	; 0xc0000001
   1864c:	add	r3, r3, #4
   18650:	lsl	r2, r2, #2
   18654:	add	r0, r0, r3
   18658:	mov	r1, #255	; 0xff
   1865c:	mov	r5, ip
   18660:	bl	1145c <memset@plt>
   18664:	ldr	r3, [sp, #4]
   18668:	cmp	r3, r5
   1866c:	ble	18810 <__assert_fail@plt+0x72b8>
   18670:	ldr	fp, [r4]
   18674:	mov	r8, r5
   18678:	ldr	r7, [r4, #24]
   1867c:	add	r2, fp, r7
   18680:	ldrb	r9, [r2, r5]
   18684:	tst	r9, #128	; 0x80
   18688:	bne	186ac <__assert_fail@plt+0x7154>
   1868c:	mov	r0, sl
   18690:	bl	11294 <mbsinit@plt>
   18694:	cmp	r0, #0
   18698:	beq	186ac <__assert_fail@plt+0x7154>
   1869c:	mov	r0, r9
   186a0:	bl	1151c <towupper@plt>
   186a4:	bics	r3, r0, #127	; 0x7f
   186a8:	beq	18730 <__assert_fail@plt+0x71d8>
   186ac:	ldr	r3, [sp, #4]
   186b0:	add	r1, r7, r5
   186b4:	add	r0, sp, #28
   186b8:	add	r1, fp, r1
   186bc:	ldrd	r6, [sl]
   186c0:	str	r0, [sp, #12]
   186c4:	sub	r3, r3, r5
   186c8:	mov	r2, r3
   186cc:	str	r3, [sp, #16]
   186d0:	mov	r3, sl
   186d4:	strd	r6, [sp, #32]
   186d8:	bl	2d174 <__assert_fail@plt+0x1bc1c>
   186dc:	sub	r3, r0, #1
   186e0:	mov	r7, r0
   186e4:	cmn	r3, #4
   186e8:	bhi	18748 <__assert_fail@plt+0x71f0>
   186ec:	ldr	r3, [sp, #28]
   186f0:	mov	r0, r3
   186f4:	str	r3, [sp, #8]
   186f8:	bl	1151c <towupper@plt>
   186fc:	ldr	r3, [sp, #8]
   18700:	mov	r9, r0
   18704:	cmp	r3, r0
   18708:	bne	185f4 <__assert_fail@plt+0x709c>
   1870c:	ldr	r1, [r4]
   18710:	mov	r2, r7
   18714:	ldr	r3, [r4, #24]
   18718:	ldr	r0, [r4, #4]
   1871c:	add	r3, r5, r3
   18720:	add	r1, r1, r3
   18724:	add	r0, r0, r5
   18728:	bl	11264 <memcpy@plt>
   1872c:	b	1862c <__assert_fail@plt+0x70d4>
   18730:	ldr	r3, [r4, #4]
   18734:	strb	r0, [r3, r5]
   18738:	ldr	r3, [r4, #8]
   1873c:	str	r0, [r3, r5, lsl #2]
   18740:	add	r5, r5, #1
   18744:	b	18664 <__assert_fail@plt+0x710c>
   18748:	cmn	r3, #3
   1874c:	beq	18778 <__assert_fail@plt+0x7220>
   18750:	ldr	r3, [r4, #4]
   18754:	cmn	r0, #1
   18758:	strb	r9, [r3, r5]
   1875c:	add	r5, r5, #1
   18760:	ldr	r3, [r4, #8]
   18764:	str	r9, [r3, r8, lsl #2]
   18768:	bne	18664 <__assert_fail@plt+0x710c>
   1876c:	ldrd	r2, [sp, #32]
   18770:	strd	r2, [sl]
   18774:	b	18664 <__assert_fail@plt+0x710c>
   18778:	ldr	r2, [r4, #36]	; 0x24
   1877c:	ldr	r3, [r4, #48]	; 0x30
   18780:	cmp	r2, r3
   18784:	blt	18808 <__assert_fail@plt+0x72b0>
   18788:	ldr	r3, [r4, #4]
   1878c:	strb	r9, [r3, r5]
   18790:	add	r5, r5, #1
   18794:	ldr	r3, [r4, #8]
   18798:	str	r9, [r3, r8, lsl #2]
   1879c:	b	18664 <__assert_fail@plt+0x710c>
   187a0:	ldr	lr, [r4, #80]	; 0x50
   187a4:	cmp	fp, #0
   187a8:	cmpgt	lr, #0
   187ac:	ble	18a90 <__assert_fail@plt+0x7538>
   187b0:	ldr	r8, [r4]
   187b4:	cmp	lr, fp
   187b8:	add	r9, sp, #40	; 0x28
   187bc:	movge	lr, fp
   187c0:	mov	r1, r9
   187c4:	ldr	r2, [r4, #24]
   187c8:	add	r2, r7, r2
   187cc:	add	r8, r8, r2
   187d0:	mov	r2, r8
   187d4:	ldrb	r0, [r2], #1
   187d8:	ldrb	r0, [r3, r0]
   187dc:	sub	ip, r2, r8
   187e0:	cmp	ip, lr
   187e4:	strb	r0, [r1], #1
   187e8:	blt	187d4 <__assert_fail@plt+0x727c>
   187ec:	mov	r1, r9
   187f0:	str	r9, [sp, #4]
   187f4:	b	184dc <__assert_fail@plt+0x6f84>
   187f8:	mov	r7, r5
   187fc:	ldr	r6, [sp, #4]
   18800:	ldr	fp, [sp, #16]
   18804:	b	184b0 <__assert_fail@plt+0x6f58>
   18808:	ldrd	r2, [sp, #32]
   1880c:	strd	r2, [sl]
   18810:	mov	r0, #0
   18814:	str	r5, [r4, #28]
   18818:	str	r5, [r4, #32]
   1881c:	b	185b4 <__assert_fail@plt+0x705c>
   18820:	ldr	r0, [r4, #4]
   18824:	mov	r2, r8
   18828:	ldr	r1, [sp, #4]
   1882c:	add	r0, r0, r5
   18830:	bl	11264 <memcpy@plt>
   18834:	b	18550 <__assert_fail@plt+0x6ff8>
   18838:	cmn	r3, #3
   1883c:	bne	18850 <__assert_fail@plt+0x72f8>
   18840:	ldr	r1, [r4, #36]	; 0x24
   18844:	ldr	r2, [r4, #48]	; 0x30
   18848:	cmp	r1, r2
   1884c:	blt	185a0 <__assert_fail@plt+0x7048>
   18850:	ldr	r2, [r4]
   18854:	ldr	r0, [r4, #24]
   18858:	ldr	r1, [r4, #64]	; 0x40
   1885c:	add	r2, r2, r7
   18860:	ldrb	r2, [r2, r0]
   18864:	cmp	r1, #0
   18868:	ldr	r0, [r4, #4]
   1886c:	ldrbne	r2, [r1, r2]
   18870:	lsl	r1, r5, #2
   18874:	strb	r2, [r0, r5]
   18878:	ldrb	r0, [r4, #76]	; 0x4c
   1887c:	cmp	r0, #0
   18880:	ldrne	r0, [r4, #12]
   18884:	strne	r7, [r0, r5, lsl #2]
   18888:	cmn	r8, #1
   1888c:	add	r7, r7, #1
   18890:	ldr	r0, [r4, #8]
   18894:	add	r5, r5, #1
   18898:	str	r2, [r0, r1]
   1889c:	ldrdeq	r2, [sp, #32]
   188a0:	strdeq	r2, [r4, #16]
   188a4:	b	18494 <__assert_fail@plt+0x6f3c>
   188a8:	ldr	r1, [r4, #12]
   188ac:	add	r2, r8, r7
   188b0:	add	r1, r1, r5, lsl #2
   188b4:	str	r7, [r1], #4
   188b8:	add	r7, r7, #1
   188bc:	cmp	r2, r7
   188c0:	bne	188b4 <__assert_fail@plt+0x735c>
   188c4:	b	18560 <__assert_fail@plt+0x7008>
   188c8:	cmn	r0, #1
   188cc:	beq	18820 <__assert_fail@plt+0x72c8>
   188d0:	add	r2, r0, r5
   188d4:	ldr	r0, [r4, #36]	; 0x24
   188d8:	str	r2, [sp, #4]
   188dc:	cmp	r2, r0
   188e0:	bhi	185a0 <__assert_fail@plt+0x7048>
   188e4:	ldr	r2, [r4, #12]
   188e8:	cmp	r2, #0
   188ec:	beq	18a98 <__assert_fail@plt+0x7540>
   188f0:	ldrb	r0, [r4, #76]	; 0x4c
   188f4:	cmp	r0, #0
   188f8:	bne	18998 <__assert_fail@plt+0x7440>
   188fc:	cmp	r5, #0
   18900:	beq	18990 <__assert_fail@plt+0x7438>
   18904:	ldr	r2, [r4, #12]
   18908:	sub	r1, r5, #1
   1890c:	cmp	r1, #3
   18910:	ubfx	r1, r2, #2, #1
   18914:	bls	18abc <__assert_fail@plt+0x7564>
   18918:	cmp	r1, #0
   1891c:	sub	fp, r5, r1
   18920:	lsr	ip, fp, #1
   18924:	mov	r6, r1
   18928:	add	lr, r1, #1
   1892c:	strne	r0, [r2]
   18930:	add	r0, r2, r1, lsl #2
   18934:	add	ip, r0, ip, lsl #3
   18938:	stm	r0, {r6, lr}
   1893c:	add	r0, r0, #8
   18940:	add	r6, r6, #2
   18944:	cmp	ip, r0
   18948:	add	lr, lr, #2
   1894c:	bne	18938 <__assert_fail@plt+0x73e0>
   18950:	bic	r0, fp, #1
   18954:	cmp	r0, fp
   18958:	add	r1, r0, r1
   1895c:	beq	18990 <__assert_fail@plt+0x7438>
   18960:	add	ip, r1, #1
   18964:	str	r1, [r2, r1, lsl #2]
   18968:	cmp	ip, r5
   1896c:	bcs	18990 <__assert_fail@plt+0x7438>
   18970:	add	r0, r1, #2
   18974:	str	ip, [r2, ip, lsl #2]
   18978:	cmp	r0, r5
   1897c:	bcs	18990 <__assert_fail@plt+0x7438>
   18980:	add	r1, r1, #3
   18984:	str	r0, [r2, r0, lsl #2]
   18988:	cmp	r1, r5
   1898c:	strcc	r1, [r2, r1, lsl #2]
   18990:	mov	r2, #1
   18994:	strb	r2, [r4, #76]	; 0x4c
   18998:	ldr	r0, [r4, #4]
   1899c:	mov	r2, r3
   189a0:	mov	r1, r9
   189a4:	str	r3, [sp, #12]
   189a8:	add	r0, r0, r5
   189ac:	bl	11264 <memcpy@plt>
   189b0:	ldr	r3, [sp, #12]
   189b4:	lsl	r2, r5, #2
   189b8:	ldr	r0, [r4, #8]
   189bc:	ldr	ip, [r4, #12]
   189c0:	cmp	r3, #1
   189c4:	add	lr, r0, r2
   189c8:	str	sl, [r0, r5, lsl #2]
   189cc:	add	r2, ip, r2
   189d0:	str	r7, [ip, r5, lsl #2]
   189d4:	bls	18a50 <__assert_fail@plt+0x74f8>
   189d8:	cmp	r8, #1
   189dc:	movls	r2, #1
   189e0:	bls	18a1c <__assert_fail@plt+0x74c4>
   189e4:	cmp	r8, r3
   189e8:	mov	r1, r2
   189ec:	movcc	sl, r8
   189f0:	movcs	sl, r3
   189f4:	mov	r2, #1
   189f8:	mvn	r6, #0
   189fc:	add	r9, r2, r7
   18a00:	add	r2, r2, #1
   18a04:	cmp	r2, sl
   18a08:	str	r9, [r1, #4]!
   18a0c:	str	r6, [lr, #4]!
   18a10:	bcc	189fc <__assert_fail@plt+0x74a4>
   18a14:	cmp	r2, r3
   18a18:	bcs	18a50 <__assert_fail@plt+0x74f8>
   18a1c:	ldr	lr, [sp, #8]
   18a20:	sub	r1, r5, #-1073741823	; 0xc0000001
   18a24:	mvn	r5, #0
   18a28:	add	r1, r1, r2
   18a2c:	lsl	r1, r1, #2
   18a30:	add	ip, ip, r1
   18a34:	add	r0, r0, r1
   18a38:	add	lr, lr, r7
   18a3c:	add	r2, r2, #1
   18a40:	str	lr, [ip, #4]!
   18a44:	cmp	r3, r2
   18a48:	str	r5, [r0, #4]!
   18a4c:	bhi	18a3c <__assert_fail@plt+0x74e4>
   18a50:	ldr	r6, [r4, #48]	; 0x30
   18a54:	sub	r2, r3, r8
   18a58:	ldr	r1, [r4, #52]	; 0x34
   18a5c:	add	r6, r2, r6
   18a60:	cmp	r1, r7
   18a64:	str	r6, [r4, #48]	; 0x30
   18a68:	ble	18a78 <__assert_fail@plt+0x7520>
   18a6c:	ldr	r1, [r4, #56]	; 0x38
   18a70:	add	r2, r1, r2
   18a74:	str	r2, [r4, #56]	; 0x38
   18a78:	ldr	r2, [r4, #36]	; 0x24
   18a7c:	add	r7, r8, r7
   18a80:	ldr	r5, [sp, #4]
   18a84:	cmp	r6, r2
   18a88:	movge	r6, r2
   18a8c:	b	18494 <__assert_fail@plt+0x6f3c>
   18a90:	add	r9, sp, #40	; 0x28
   18a94:	b	187ec <__assert_fail@plt+0x7294>
   18a98:	lsl	r0, r0, #2
   18a9c:	str	r3, [sp, #12]
   18aa0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   18aa4:	cmp	r0, #0
   18aa8:	str	r0, [r4, #12]
   18aac:	moveq	r0, #12
   18ab0:	ldr	r3, [sp, #12]
   18ab4:	bne	188f0 <__assert_fail@plt+0x7398>
   18ab8:	b	185b4 <__assert_fail@plt+0x705c>
   18abc:	mov	r1, r0
   18ac0:	b	18960 <__assert_fail@plt+0x7408>
   18ac4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18ac8:	mov	r4, r0
   18acc:	ldr	ip, [r0, #8]
   18ad0:	strd	r6, [sp, #8]
   18ad4:	ldr	r6, [r0, #4]
   18ad8:	strd	r8, [sp, #16]
   18adc:	str	sl, [sp, #24]
   18ae0:	str	lr, [sp, #28]
   18ae4:	sub	sp, sp, #8
   18ae8:	add	r3, sp, #8
   18aec:	cmp	ip, r6
   18af0:	stmdb	r3, {r1, r2}
   18af4:	ldrb	r5, [sp, #4]
   18af8:	bcs	18bc8 <__assert_fail@plt+0x7670>
   18afc:	ldr	r7, [r0, #12]
   18b00:	ldr	r6, [r0, #20]
   18b04:	lsl	r0, ip, #3
   18b08:	cmp	r5, #5
   18b0c:	ldr	lr, [r4]
   18b10:	ldrd	r2, [sp]
   18b14:	add	r1, lr, r0
   18b18:	strd	r2, [lr, r0]
   18b1c:	ldr	r3, [r1, #4]
   18b20:	bfc	r3, #8, #10
   18b24:	str	r3, [r1, #4]
   18b28:	beq	18bb4 <__assert_fail@plt+0x765c>
   18b2c:	sub	r5, r5, #6
   18b30:	clz	r5, r5
   18b34:	lsr	r5, r5, #5
   18b38:	ldrb	r3, [r1, #6]
   18b3c:	mvn	r0, #0
   18b40:	mov	r2, #0
   18b44:	bfi	r3, r5, #4, #1
   18b48:	strb	r3, [r1, #6]
   18b4c:	str	r0, [r7, ip, lsl #2]
   18b50:	ldr	r3, [r4, #8]
   18b54:	add	r3, r3, r3, lsl #1
   18b58:	lsl	r3, r3, #2
   18b5c:	add	r1, r6, r3
   18b60:	str	r2, [r6, r3]
   18b64:	str	r2, [r1, #4]
   18b68:	str	r2, [r1, #8]
   18b6c:	ldr	r3, [r4, #8]
   18b70:	ldr	r0, [r4, #24]
   18b74:	add	r3, r3, r3, lsl #1
   18b78:	lsl	r3, r3, #2
   18b7c:	add	r1, r0, r3
   18b80:	str	r2, [r0, r3]
   18b84:	str	r2, [r1, #4]
   18b88:	str	r2, [r1, #8]
   18b8c:	ldr	r0, [r4, #8]
   18b90:	add	r3, r0, #1
   18b94:	str	r3, [r4, #8]
   18b98:	add	sp, sp, #8
   18b9c:	ldrd	r4, [sp]
   18ba0:	ldrd	r6, [sp, #8]
   18ba4:	ldrd	r8, [sp, #16]
   18ba8:	ldr	sl, [sp, #24]
   18bac:	add	sp, sp, #28
   18bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bb4:	ldr	r5, [r4, #92]	; 0x5c
   18bb8:	cmp	r5, #1
   18bbc:	movle	r5, #0
   18bc0:	movgt	r5, #1
   18bc4:	b	18b38 <__assert_fail@plt+0x75e0>
   18bc8:	lsl	r9, r6, #1
   18bcc:	movw	r3, #21845	; 0x5555
   18bd0:	movt	r3, #5461	; 0x1555
   18bd4:	cmp	r9, r3
   18bd8:	bhi	18c94 <__assert_fail@plt+0x773c>
   18bdc:	lsl	r1, r6, #4
   18be0:	ldr	r0, [r0]
   18be4:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   18be8:	cmp	r0, #0
   18bec:	beq	18c94 <__assert_fail@plt+0x773c>
   18bf0:	lsl	r8, r6, #3
   18bf4:	str	r0, [r4]
   18bf8:	add	r6, r9, r6
   18bfc:	ldr	r0, [r4, #12]
   18c00:	mov	r1, r8
   18c04:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   18c08:	mov	r7, r0
   18c0c:	mov	r1, r8
   18c10:	lsl	r8, r6, #3
   18c14:	ldr	r0, [r4, #16]
   18c18:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   18c1c:	mov	sl, r0
   18c20:	mov	r1, r8
   18c24:	ldr	r0, [r4, #20]
   18c28:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   18c2c:	mov	r6, r0
   18c30:	mov	r1, r8
   18c34:	ldr	r0, [r4, #24]
   18c38:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   18c3c:	cmp	sl, #0
   18c40:	cmpne	r7, #0
   18c44:	mov	r8, r0
   18c48:	beq	18c74 <__assert_fail@plt+0x771c>
   18c4c:	cmp	r0, #0
   18c50:	cmpne	r6, #0
   18c54:	beq	18c74 <__assert_fail@plt+0x771c>
   18c58:	str	r9, [r4, #4]
   18c5c:	str	r7, [r4, #12]
   18c60:	str	sl, [r4, #16]
   18c64:	str	r6, [r4, #20]
   18c68:	str	r0, [r4, #24]
   18c6c:	ldr	ip, [r4, #8]
   18c70:	b	18b04 <__assert_fail@plt+0x75ac>
   18c74:	mov	r0, r7
   18c78:	bl	13e1c <__assert_fail@plt+0x28c4>
   18c7c:	mov	r0, sl
   18c80:	bl	13e1c <__assert_fail@plt+0x28c4>
   18c84:	mov	r0, r6
   18c88:	bl	13e1c <__assert_fail@plt+0x28c4>
   18c8c:	mov	r0, r8
   18c90:	bl	13e1c <__assert_fail@plt+0x28c4>
   18c94:	mvn	r0, #0
   18c98:	b	18b98 <__assert_fail@plt+0x7640>
   18c9c:	ldr	r3, [r0, #124]	; 0x7c
   18ca0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ca4:	strd	r6, [sp, #8]
   18ca8:	str	r8, [sp, #16]
   18cac:	mov	r8, r0
   18cb0:	str	lr, [sp, #20]
   18cb4:	cmp	r3, #0
   18cb8:	ble	18d3c <__assert_fail@plt+0x77e4>
   18cbc:	mov	r7, #0
   18cc0:	ldr	r3, [r8, #132]	; 0x84
   18cc4:	ldr	r6, [r3, r7, lsl #2]
   18cc8:	ldr	r3, [r6, #16]
   18ccc:	cmp	r3, #0
   18cd0:	ble	18d00 <__assert_fail@plt+0x77a8>
   18cd4:	mov	r4, #0
   18cd8:	ldr	r3, [r6, #20]
   18cdc:	ldr	r5, [r3, r4, lsl #2]
   18ce0:	add	r4, r4, #1
   18ce4:	ldr	r0, [r5, #16]
   18ce8:	bl	13e1c <__assert_fail@plt+0x28c4>
   18cec:	mov	r0, r5
   18cf0:	bl	13e1c <__assert_fail@plt+0x28c4>
   18cf4:	ldr	r3, [r6, #16]
   18cf8:	cmp	r3, r4
   18cfc:	bgt	18cd8 <__assert_fail@plt+0x7780>
   18d00:	ldr	r0, [r6, #20]
   18d04:	bl	13e1c <__assert_fail@plt+0x28c4>
   18d08:	ldr	r3, [r6, #8]
   18d0c:	cmp	r3, #0
   18d10:	beq	18d5c <__assert_fail@plt+0x7804>
   18d14:	ldr	r0, [r3, #8]
   18d18:	add	r7, r7, #1
   18d1c:	bl	13e1c <__assert_fail@plt+0x28c4>
   18d20:	ldr	r0, [r6, #8]
   18d24:	bl	13e1c <__assert_fail@plt+0x28c4>
   18d28:	mov	r0, r6
   18d2c:	bl	13e1c <__assert_fail@plt+0x28c4>
   18d30:	ldr	r3, [r8, #124]	; 0x7c
   18d34:	cmp	r3, r7
   18d38:	bgt	18cc0 <__assert_fail@plt+0x7768>
   18d3c:	mov	r3, #0
   18d40:	ldrd	r4, [sp]
   18d44:	ldrd	r6, [sp, #8]
   18d48:	str	r3, [r8, #108]	; 0x6c
   18d4c:	str	r3, [r8, #124]	; 0x7c
   18d50:	ldr	r8, [sp, #16]
   18d54:	add	sp, sp, #20
   18d58:	pop	{pc}		; (ldr pc, [sp], #4)
   18d5c:	mov	r0, r6
   18d60:	add	r7, r7, #1
   18d64:	bl	13e1c <__assert_fail@plt+0x28c4>
   18d68:	ldr	r3, [r8, #124]	; 0x7c
   18d6c:	cmp	r3, r7
   18d70:	bgt	18cc0 <__assert_fail@plt+0x7768>
   18d74:	b	18d3c <__assert_fail@plt+0x77e4>
   18d78:	ldr	r3, [r0]
   18d7c:	strd	r4, [sp, #-16]!
   18d80:	mov	r4, r0
   18d84:	str	r6, [sp, #8]
   18d88:	mov	r6, r1
   18d8c:	str	lr, [sp, #12]
   18d90:	cmp	r3, #0
   18d94:	beq	18dc8 <__assert_fail@plt+0x7870>
   18d98:	ldmib	r0, {r1, r5}
   18d9c:	cmp	r1, #0
   18da0:	bne	18e0c <__assert_fail@plt+0x78b4>
   18da4:	str	r6, [r5]
   18da8:	mov	r0, #1
   18dac:	ldr	r3, [r4, #4]
   18db0:	add	r3, r3, r0
   18db4:	str	r3, [r4, #4]
   18db8:	ldrd	r4, [sp]
   18dbc:	ldr	r6, [sp, #8]
   18dc0:	add	sp, sp, #12
   18dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   18dc8:	mov	r5, #1
   18dcc:	mov	r0, #4
   18dd0:	str	r5, [r4]
   18dd4:	str	r5, [r4, #4]
   18dd8:	bl	2cd58 <__assert_fail@plt+0x1b800>
   18ddc:	mov	r3, r0
   18de0:	cmp	r0, #0
   18de4:	str	r0, [r4, #8]
   18de8:	streq	r3, [r4]
   18dec:	streq	r3, [r4, #4]
   18df0:	beq	18db8 <__assert_fail@plt+0x7860>
   18df4:	mov	r0, r5
   18df8:	str	r6, [r3]
   18dfc:	ldrd	r4, [sp]
   18e00:	ldr	r6, [sp, #8]
   18e04:	add	sp, sp, #12
   18e08:	pop	{pc}		; (ldr pc, [sp], #4)
   18e0c:	cmp	r3, r1
   18e10:	beq	18e90 <__assert_fail@plt+0x7938>
   18e14:	ldr	r3, [r5]
   18e18:	mov	r2, r1
   18e1c:	cmp	r3, r6
   18e20:	ble	18e58 <__assert_fail@plt+0x7900>
   18e24:	cmp	r1, #0
   18e28:	ble	18e40 <__assert_fail@plt+0x78e8>
   18e2c:	lsl	r2, r1, #2
   18e30:	add	r0, r5, #4
   18e34:	mov	r1, r5
   18e38:	bl	11234 <memmove@plt>
   18e3c:	mov	r2, #0
   18e40:	str	r6, [r5, r2, lsl #2]
   18e44:	mov	r0, #1
   18e48:	ldr	r3, [r4, #4]
   18e4c:	add	r3, r3, r0
   18e50:	str	r3, [r4, #4]
   18e54:	b	18db8 <__assert_fail@plt+0x7860>
   18e58:	sub	r3, r1, #-1073741823	; 0xc0000001
   18e5c:	ldr	r0, [r5, r3, lsl #2]
   18e60:	lsl	r3, r3, #2
   18e64:	cmp	r6, r0
   18e68:	bge	18e40 <__assert_fail@plt+0x78e8>
   18e6c:	add	r3, r3, #4
   18e70:	add	r3, r5, r3
   18e74:	str	r0, [r3], #-4
   18e78:	sub	r1, r1, #1
   18e7c:	ldr	r0, [r3, #-4]
   18e80:	mov	r2, r1
   18e84:	cmp	r0, r6
   18e88:	bgt	18e74 <__assert_fail@plt+0x791c>
   18e8c:	b	18e40 <__assert_fail@plt+0x78e8>
   18e90:	lsl	r3, r1, #1
   18e94:	mov	r0, r5
   18e98:	lsl	r1, r1, #3
   18e9c:	str	r3, [r4]
   18ea0:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   18ea4:	subs	r5, r0, #0
   18ea8:	beq	18eb8 <__assert_fail@plt+0x7960>
   18eac:	str	r5, [r4, #8]
   18eb0:	ldr	r1, [r4, #4]
   18eb4:	b	18e14 <__assert_fail@plt+0x78bc>
   18eb8:	mov	r0, r5
   18ebc:	b	18db8 <__assert_fail@plt+0x7860>
   18ec0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ec4:	subs	r4, r0, #0
   18ec8:	strd	r6, [sp, #8]
   18ecc:	str	r8, [sp, #16]
   18ed0:	str	lr, [sp, #20]
   18ed4:	ldr	r7, [sp, #28]
   18ed8:	beq	18f84 <__assert_fail@plt+0x7a2c>
   18edc:	ldr	ip, [r4]
   18ee0:	cmp	ip, #0
   18ee4:	beq	18f84 <__assert_fail@plt+0x7a2c>
   18ee8:	sub	ip, ip, #1
   18eec:	ldr	lr, [r4, #8]
   18ef0:	mov	r0, r3
   18ef4:	add	r5, ip, ip, lsl #1
   18ef8:	mov	r8, r1
   18efc:	lsl	r6, r2, #3
   18f00:	lsl	r5, r5, #3
   18f04:	mov	r2, r6
   18f08:	ldr	r3, [lr, r5]
   18f0c:	add	lr, lr, r5
   18f10:	ldr	r1, [lr, #8]
   18f14:	str	ip, [r4]
   18f18:	str	r3, [r8]
   18f1c:	bl	11264 <memcpy@plt>
   18f20:	ldr	r3, [r4, #8]
   18f24:	mov	r2, r6
   18f28:	ldr	r0, [sp, #24]
   18f2c:	add	r3, r3, r5
   18f30:	ldr	r1, [r3, #8]
   18f34:	add	r1, r1, r6
   18f38:	bl	11264 <memcpy@plt>
   18f3c:	ldr	r0, [r7, #8]
   18f40:	bl	13e1c <__assert_fail@plt+0x28c4>
   18f44:	ldr	r3, [r4, #8]
   18f48:	add	r3, r3, r5
   18f4c:	ldr	r0, [r3, #8]
   18f50:	bl	13e1c <__assert_fail@plt+0x28c4>
   18f54:	ldr	r3, [r4, #8]
   18f58:	add	r5, r3, r5
   18f5c:	ldr	r0, [r5, #4]
   18f60:	ldrd	r2, [r5, #12]
   18f64:	strd	r2, [r7]
   18f68:	ldr	r3, [r5, #20]
   18f6c:	str	r3, [r7, #8]
   18f70:	ldrd	r4, [sp]
   18f74:	ldrd	r6, [sp, #8]
   18f78:	ldr	r8, [sp, #16]
   18f7c:	add	sp, sp, #20
   18f80:	pop	{pc}		; (ldr pc, [sp], #4)
   18f84:	mvn	r0, #0
   18f88:	b	18f70 <__assert_fail@plt+0x7a18>
   18f8c:	ldr	ip, [r1, #4]
   18f90:	cmp	ip, #0
   18f94:	beq	1912c <__assert_fail@plt+0x7bd4>
   18f98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18f9c:	strd	r6, [sp, #8]
   18fa0:	str	lr, [sp, #28]
   18fa4:	ldr	lr, [r2, #4]
   18fa8:	strd	r8, [sp, #16]
   18fac:	str	sl, [sp, #24]
   18fb0:	cmp	lr, #0
   18fb4:	beq	190b4 <__assert_fail@plt+0x7b5c>
   18fb8:	ldr	r4, [r0]
   18fbc:	mov	r9, r2
   18fc0:	add	r2, ip, lr
   18fc4:	mov	r8, r1
   18fc8:	mov	r7, r0
   18fcc:	ldmib	r0, {r3, sl}
   18fd0:	add	r1, r2, r3
   18fd4:	cmp	r1, r4
   18fd8:	bgt	1913c <__assert_fail@plt+0x7be4>
   18fdc:	ldr	r0, [r8, #8]
   18fe0:	add	r1, r3, ip
   18fe4:	sub	r5, ip, #1
   18fe8:	sub	r6, lr, #1
   18fec:	add	r1, r1, lr
   18ff0:	ldr	r2, [r9, #8]
   18ff4:	sub	r3, r3, #1
   18ff8:	ldr	ip, [r0, r5, lsl #2]
   18ffc:	ldr	lr, [r2, r6, lsl #2]
   19000:	cmp	ip, lr
   19004:	beq	19020 <__assert_fail@plt+0x7ac8>
   19008:	bge	190d4 <__assert_fail@plt+0x7b7c>
   1900c:	subs	r6, r6, #1
   19010:	bmi	19070 <__assert_fail@plt+0x7b18>
   19014:	ldr	lr, [r2, r6, lsl #2]
   19018:	cmp	ip, lr
   1901c:	bne	19008 <__assert_fail@plt+0x7ab0>
   19020:	cmp	r3, #0
   19024:	blt	19050 <__assert_fail@plt+0x7af8>
   19028:	ldr	r4, [sl, r3, lsl #2]
   1902c:	add	lr, sl, r3, lsl #2
   19030:	cmp	r4, ip
   19034:	bgt	19048 <__assert_fail@plt+0x7af0>
   19038:	b	190e4 <__assert_fail@plt+0x7b8c>
   1903c:	ldr	r4, [lr, #-4]!
   19040:	cmp	r4, ip
   19044:	ble	190e4 <__assert_fail@plt+0x7b8c>
   19048:	subs	r3, r3, #1
   1904c:	bcs	1903c <__assert_fail@plt+0x7ae4>
   19050:	sub	r1, r1, #1
   19054:	str	ip, [sl, r1, lsl #2]
   19058:	subs	r5, r5, #1
   1905c:	bmi	19070 <__assert_fail@plt+0x7b18>
   19060:	subs	r6, r6, #1
   19064:	bmi	19070 <__assert_fail@plt+0x7b18>
   19068:	ldr	ip, [r0, r5, lsl #2]
   1906c:	b	19014 <__assert_fail@plt+0x7abc>
   19070:	ldr	ip, [r7, #4]
   19074:	ldr	r0, [r8, #4]
   19078:	ldr	r2, [r9, #4]
   1907c:	sub	r3, ip, #1
   19080:	add	r0, ip, r0
   19084:	add	r0, r0, r2
   19088:	sub	r2, r0, r1
   1908c:	sub	r0, r0, #1
   19090:	add	ip, ip, r2
   19094:	cmp	r3, #0
   19098:	cmpge	r2, #0
   1909c:	str	ip, [r7, #4]
   190a0:	bgt	19100 <__assert_fail@plt+0x7ba8>
   190a4:	lsl	r2, r2, #2
   190a8:	add	r1, sl, r1, lsl #2
   190ac:	mov	r0, sl
   190b0:	bl	11264 <memcpy@plt>
   190b4:	mov	ip, #0
   190b8:	ldrd	r4, [sp]
   190bc:	mov	r0, ip
   190c0:	ldrd	r6, [sp, #8]
   190c4:	ldrd	r8, [sp, #16]
   190c8:	ldr	sl, [sp, #24]
   190cc:	add	sp, sp, #28
   190d0:	pop	{pc}		; (ldr pc, [sp], #4)
   190d4:	subs	r5, r5, #1
   190d8:	bmi	19070 <__assert_fail@plt+0x7b18>
   190dc:	ldr	ip, [r0, r5, lsl #2]
   190e0:	b	19000 <__assert_fail@plt+0x7aa8>
   190e4:	cmp	r4, ip
   190e8:	bne	19050 <__assert_fail@plt+0x7af8>
   190ec:	b	19058 <__assert_fail@plt+0x7b00>
   190f0:	sub	r3, r3, #1
   190f4:	str	ip, [sl, r4, lsl #2]
   190f8:	cmn	r3, #1
   190fc:	beq	19134 <__assert_fail@plt+0x7bdc>
   19100:	ldr	lr, [sl, r0, lsl #2]
   19104:	add	r4, r3, r2
   19108:	ldr	ip, [sl, r3, lsl #2]
   1910c:	cmp	lr, ip
   19110:	ble	190f0 <__assert_fail@plt+0x7b98>
   19114:	subs	r2, r2, #1
   19118:	sub	r0, r0, #1
   1911c:	str	lr, [sl, r4, lsl #2]
   19120:	bne	19100 <__assert_fail@plt+0x7ba8>
   19124:	ldr	sl, [r7, #8]
   19128:	b	190a8 <__assert_fail@plt+0x7b50>
   1912c:	mov	r0, ip
   19130:	bx	lr
   19134:	ldr	sl, [r7, #8]
   19138:	b	190a4 <__assert_fail@plt+0x7b4c>
   1913c:	add	r4, r2, r4
   19140:	mov	r0, sl
   19144:	lsl	r1, r4, #2
   19148:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1914c:	subs	sl, r0, #0
   19150:	beq	1916c <__assert_fail@plt+0x7c14>
   19154:	ldr	ip, [r8, #4]
   19158:	ldr	lr, [r9, #4]
   1915c:	str	r4, [r7]
   19160:	str	sl, [r7, #8]
   19164:	ldr	r3, [r7, #4]
   19168:	b	18fdc <__assert_fail@plt+0x7a84>
   1916c:	mov	ip, #12
   19170:	b	190b8 <__assert_fail@plt+0x7b60>
   19174:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19178:	strd	r6, [sp, #8]
   1917c:	subs	r6, r1, #0
   19180:	str	r8, [sp, #16]
   19184:	str	lr, [sp, #20]
   19188:	beq	19298 <__assert_fail@plt+0x7d40>
   1918c:	ldr	r2, [r6, #4]
   19190:	cmp	r2, #0
   19194:	mov	ip, r2
   19198:	beq	19298 <__assert_fail@plt+0x7d40>
   1919c:	ldm	r0, {r1, r3}
   191a0:	mov	r5, r0
   191a4:	add	r4, r3, r2, lsl #1
   191a8:	cmp	r1, r4
   191ac:	blt	192d4 <__assert_fail@plt+0x7d7c>
   191b0:	cmp	r3, #0
   191b4:	beq	19314 <__assert_fail@plt+0x7dbc>
   191b8:	sub	r2, r2, #1
   191bc:	sub	r3, r3, #1
   191c0:	mvn	lr, r3
   191c4:	mvn	ip, r2
   191c8:	tst	lr, ip
   191cc:	bpl	19228 <__assert_fail@plt+0x7cd0>
   191d0:	ldr	r7, [r5, #8]
   191d4:	ldr	r8, [r6, #8]
   191d8:	b	19200 <__assert_fail@plt+0x7ca8>
   191dc:	subge	r3, r3, #1
   191e0:	mvnge	lr, r3
   191e4:	bge	191f8 <__assert_fail@plt+0x7ca0>
   191e8:	sub	r2, r2, #1
   191ec:	sub	r4, r4, #1
   191f0:	mvn	ip, r2
   191f4:	str	r1, [r7, r4, lsl #2]
   191f8:	tst	ip, lr
   191fc:	bpl	19228 <__assert_fail@plt+0x7cd0>
   19200:	ldr	r0, [r7, r3, lsl #2]
   19204:	ldr	r1, [r8, r2, lsl #2]
   19208:	cmp	r0, r1
   1920c:	bne	191dc <__assert_fail@plt+0x7c84>
   19210:	sub	r2, r2, #1
   19214:	sub	r3, r3, #1
   19218:	mvn	lr, r3
   1921c:	mvn	ip, r2
   19220:	tst	ip, lr
   19224:	bmi	19200 <__assert_fail@plt+0x7ca8>
   19228:	cmp	r2, #0
   1922c:	blt	1924c <__assert_fail@plt+0x7cf4>
   19230:	ldr	r0, [r5, #8]
   19234:	add	r2, r2, #1
   19238:	sub	r4, r4, r2
   1923c:	lsl	r2, r2, #2
   19240:	ldr	r1, [r6, #8]
   19244:	add	r0, r0, r4, lsl #2
   19248:	bl	11264 <memcpy@plt>
   1924c:	ldr	r3, [r5, #4]
   19250:	ldr	r0, [r6, #4]
   19254:	add	r0, r3, r0, lsl #1
   19258:	subs	r2, r0, r4
   1925c:	sub	r0, r0, #1
   19260:	beq	19298 <__assert_fail@plt+0x7d40>
   19264:	ldr	r1, [r5, #8]
   19268:	add	ip, r3, r2
   1926c:	sub	r3, r3, #1
   19270:	str	ip, [r5, #4]
   19274:	ldr	lr, [r1, r0, lsl #2]
   19278:	add	r5, r3, r2
   1927c:	ldr	ip, [r1, r3, lsl #2]
   19280:	cmp	lr, ip
   19284:	ble	192b0 <__assert_fail@plt+0x7d58>
   19288:	subs	r2, r2, #1
   1928c:	sub	r0, r0, #1
   19290:	str	lr, [r1, r5, lsl #2]
   19294:	bne	19274 <__assert_fail@plt+0x7d1c>
   19298:	mov	r0, #0
   1929c:	ldrd	r4, [sp]
   192a0:	ldrd	r6, [sp, #8]
   192a4:	ldr	r8, [sp, #16]
   192a8:	add	sp, sp, #20
   192ac:	pop	{pc}		; (ldr pc, [sp], #4)
   192b0:	subs	r3, r3, #1
   192b4:	str	ip, [r1, r5, lsl #2]
   192b8:	bpl	19274 <__assert_fail@plt+0x7d1c>
   192bc:	mov	r0, r1
   192c0:	lsl	r2, r2, #2
   192c4:	add	r1, r1, r4, lsl #2
   192c8:	bl	11264 <memcpy@plt>
   192cc:	mov	r0, #0
   192d0:	b	1929c <__assert_fail@plt+0x7d44>
   192d4:	add	r2, r2, r1
   192d8:	ldr	r0, [r0, #8]
   192dc:	lsl	r1, r2, #3
   192e0:	lsl	r4, r2, #1
   192e4:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   192e8:	cmp	r0, #0
   192ec:	beq	19330 <__assert_fail@plt+0x7dd8>
   192f0:	ldr	r3, [r5, #4]
   192f4:	str	r4, [r5]
   192f8:	str	r0, [r5, #8]
   192fc:	cmp	r3, #0
   19300:	ldreq	ip, [r6, #4]
   19304:	beq	19318 <__assert_fail@plt+0x7dc0>
   19308:	ldr	r2, [r6, #4]
   1930c:	add	r4, r3, r2, lsl #1
   19310:	b	191b8 <__assert_fail@plt+0x7c60>
   19314:	ldr	r0, [r0, #8]
   19318:	ldr	r1, [r6, #8]
   1931c:	str	ip, [r5, #4]
   19320:	ldr	r2, [r6, #4]
   19324:	lsl	r2, r2, #2
   19328:	bl	11264 <memcpy@plt>
   1932c:	b	19298 <__assert_fail@plt+0x7d40>
   19330:	mov	r0, #12
   19334:	b	1929c <__assert_fail@plt+0x7d44>
   19338:	cmp	r1, #0
   1933c:	strd	r4, [sp, #-16]!
   19340:	mov	r5, r0
   19344:	str	r6, [sp, #8]
   19348:	str	lr, [sp, #12]
   1934c:	blt	19400 <__assert_fail@plt+0x7ea8>
   19350:	ldr	r3, [r0, #48]	; 0x30
   19354:	cmp	r3, r1
   19358:	beq	19414 <__assert_fail@plt+0x7ebc>
   1935c:	ldr	r3, [r0, #80]	; 0x50
   19360:	cmp	r3, #1
   19364:	ble	193b4 <__assert_fail@plt+0x7e5c>
   19368:	ldr	r3, [r0, #8]
   1936c:	add	r3, r3, r1, lsl #2
   19370:	b	1937c <__assert_fail@plt+0x7e24>
   19374:	cmn	r1, #1
   19378:	beq	19400 <__assert_fail@plt+0x7ea8>
   1937c:	ldr	r4, [r3], #-4
   19380:	sub	r1, r1, #1
   19384:	cmn	r4, #1
   19388:	beq	19374 <__assert_fail@plt+0x7e1c>
   1938c:	ldrb	r3, [r5, #78]	; 0x4e
   19390:	cmp	r3, #0
   19394:	bne	19424 <__assert_fail@plt+0x7ecc>
   19398:	cmp	r4, #10
   1939c:	movne	r0, #0
   193a0:	beq	193e0 <__assert_fail@plt+0x7e88>
   193a4:	ldrd	r4, [sp]
   193a8:	ldr	r6, [sp, #8]
   193ac:	add	sp, sp, #12
   193b0:	pop	{pc}		; (ldr pc, [sp], #4)
   193b4:	ldr	r3, [r0, #4]
   193b8:	ldr	r0, [r0, #68]	; 0x44
   193bc:	ldrb	r3, [r3, r1]
   193c0:	asr	r1, r3, #5
   193c4:	and	r2, r3, #31
   193c8:	ldr	r0, [r0, r1, lsl #2]
   193cc:	lsr	r0, r0, r2
   193d0:	ands	r0, r0, #1
   193d4:	bne	193a4 <__assert_fail@plt+0x7e4c>
   193d8:	cmp	r3, #10
   193dc:	bne	193a4 <__assert_fail@plt+0x7e4c>
   193e0:	ldrb	r3, [r5, #77]	; 0x4d
   193e4:	ldrd	r4, [sp]
   193e8:	ldr	r6, [sp, #8]
   193ec:	add	sp, sp, #12
   193f0:	cmp	r3, #0
   193f4:	moveq	r0, #0
   193f8:	movne	r0, #2
   193fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19400:	ldr	r6, [sp, #8]
   19404:	ldr	r0, [r5, #60]	; 0x3c
   19408:	ldrd	r4, [sp]
   1940c:	add	sp, sp, #12
   19410:	pop	{pc}		; (ldr pc, [sp], #4)
   19414:	tst	r2, #2
   19418:	movne	r0, #8
   1941c:	moveq	r0, #10
   19420:	b	193a4 <__assert_fail@plt+0x7e4c>
   19424:	mov	r0, r4
   19428:	bl	11438 <iswalnum@plt>
   1942c:	sub	r3, r4, #95	; 0x5f
   19430:	cmp	r0, #0
   19434:	clz	r3, r3
   19438:	lsr	r3, r3, #5
   1943c:	movne	r3, #1
   19440:	cmp	r3, #0
   19444:	movne	r0, #1
   19448:	bne	193a4 <__assert_fail@plt+0x7e4c>
   1944c:	b	19398 <__assert_fail@plt+0x7e40>
   19450:	ldrb	ip, [r1, #4]
   19454:	str	r4, [sp, #-8]!
   19458:	ldr	r3, [r0, #4]
   1945c:	str	lr, [sp, #4]
   19460:	sub	ip, ip, #1
   19464:	ldrb	r3, [r3, r2]
   19468:	cmp	ip, #6
   1946c:	ldrls	pc, [pc, ip, lsl #2]
   19470:	b	1949c <__assert_fail@plt+0x7f44>
   19474:	muleq	r1, r0, r4
   19478:	muleq	r1, ip, r4
   1947c:	andeq	r9, r1, r0, asr #10
   19480:	muleq	r1, ip, r4
   19484:			; <UNDEFINED> instruction: 0x000194b4
   19488:	muleq	r1, ip, r4
   1948c:	andeq	r9, r1, ip, lsr #9
   19490:	ldrb	ip, [r1]
   19494:	cmp	ip, r3
   19498:	beq	194d4 <__assert_fail@plt+0x7f7c>
   1949c:	mov	r0, #0
   194a0:	ldr	r4, [sp]
   194a4:	add	sp, sp, #4
   194a8:	pop	{pc}		; (ldr pc, [sp], #4)
   194ac:	tst	r3, #128	; 0x80
   194b0:	bne	1949c <__assert_fail@plt+0x7f44>
   194b4:	cmp	r3, #10
   194b8:	beq	19574 <__assert_fail@plt+0x801c>
   194bc:	cmp	r3, #0
   194c0:	bne	194d4 <__assert_fail@plt+0x7f7c>
   194c4:	ldr	ip, [r0, #84]	; 0x54
   194c8:	ldr	ip, [ip, #128]	; 0x80
   194cc:	tst	ip, #128	; 0x80
   194d0:	bne	1949c <__assert_fail@plt+0x7f44>
   194d4:	ldr	r4, [r1, #4]
   194d8:	mov	r3, #65280	; 0xff00
   194dc:	movt	r3, #3
   194e0:	and	r3, r3, r4
   194e4:	cmp	r3, #0
   194e8:	beq	19530 <__assert_fail@plt+0x7fd8>
   194ec:	mov	r1, r2
   194f0:	ldr	r2, [r0, #88]	; 0x58
   194f4:	bl	19338 <__assert_fail@plt+0x7de0>
   194f8:	ubfx	r1, r4, #8, #10
   194fc:	ands	r2, r1, #4
   19500:	bne	19560 <__assert_fail@plt+0x8008>
   19504:	tst	r1, #8
   19508:	beq	19514 <__assert_fail@plt+0x7fbc>
   1950c:	tst	r0, #1
   19510:	bne	1949c <__assert_fail@plt+0x7f44>
   19514:	tst	r1, #32
   19518:	beq	19524 <__assert_fail@plt+0x7fcc>
   1951c:	ands	r3, r0, #2
   19520:	beq	1949c <__assert_fail@plt+0x7f44>
   19524:	tst	r1, #128	; 0x80
   19528:	ubfxne	r0, r0, #3, #1
   1952c:	bne	194a0 <__assert_fail@plt+0x7f48>
   19530:	ldr	r4, [sp]
   19534:	add	sp, sp, #4
   19538:	mov	r0, #1
   1953c:	pop	{pc}		; (ldr pc, [sp], #4)
   19540:	ldr	ip, [r1]
   19544:	asr	lr, r3, #5
   19548:	and	r3, r3, #31
   1954c:	ldr	ip, [ip, lr, lsl #2]
   19550:	lsr	r3, ip, r3
   19554:	ands	r3, r3, #1
   19558:	bne	194d4 <__assert_fail@plt+0x7f7c>
   1955c:	b	1949c <__assert_fail@plt+0x7f44>
   19560:	ands	r3, r0, #1
   19564:	beq	1949c <__assert_fail@plt+0x7f44>
   19568:	tst	r1, #8
   1956c:	beq	19514 <__assert_fail@plt+0x7fbc>
   19570:	b	1949c <__assert_fail@plt+0x7f44>
   19574:	ldr	r3, [r0, #84]	; 0x54
   19578:	ldr	r3, [r3, #128]	; 0x80
   1957c:	ands	r3, r3, #64	; 0x40
   19580:	bne	194d4 <__assert_fail@plt+0x7f7c>
   19584:	b	1949c <__assert_fail@plt+0x7f44>
   19588:	ldr	r3, [r0, #24]
   1958c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19590:	mov	r4, r0
   19594:	strd	r6, [sp, #8]
   19598:	mov	r7, r1
   1959c:	strd	r8, [sp, #16]
   195a0:	mov	r8, r2
   195a4:	strd	sl, [sp, #24]
   195a8:	cmp	r3, r1
   195ac:	str	lr, [sp, #32]
   195b0:	sub	sp, sp, #36	; 0x24
   195b4:	suble	r5, r1, r3
   195b8:	ble	1961c <__assert_fail@plt+0x80c4>
   195bc:	ldr	r3, [r0, #80]	; 0x50
   195c0:	cmp	r3, #1
   195c4:	ble	195d4 <__assert_fail@plt+0x807c>
   195c8:	mov	r2, #0
   195cc:	mov	r3, #0
   195d0:	strd	r2, [r0, #16]
   195d4:	ldrb	r3, [r4, #75]	; 0x4b
   195d8:	tst	r8, #1
   195dc:	mov	r9, #0
   195e0:	movne	r1, #4
   195e4:	moveq	r1, #6
   195e8:	ldr	r0, [r4, #44]	; 0x2c
   195ec:	str	r9, [r4, #24]
   195f0:	ldr	r2, [r4, #52]	; 0x34
   195f4:	cmp	r3, r9
   195f8:	str	r9, [r4, #28]
   195fc:	movne	r3, r9
   19600:	movne	r5, r7
   19604:	str	r9, [r4, #32]
   19608:	str	r0, [r4, #48]	; 0x30
   1960c:	str	r2, [r4, #56]	; 0x38
   19610:	str	r1, [r4, #60]	; 0x3c
   19614:	strb	r9, [r4, #76]	; 0x4c
   19618:	beq	196f8 <__assert_fail@plt+0x81a0>
   1961c:	cmp	r5, #0
   19620:	beq	1970c <__assert_fail@plt+0x81b4>
   19624:	ldrb	r2, [r4, #76]	; 0x4c
   19628:	ldr	r1, [r4, #32]
   1962c:	ldr	r6, [r4, #28]
   19630:	cmp	r1, r5
   19634:	ble	197e0 <__assert_fail@plt+0x8288>
   19638:	cmp	r2, #0
   1963c:	bne	19944 <__assert_fail@plt+0x83ec>
   19640:	mov	r2, r8
   19644:	sub	r1, r5, #1
   19648:	mov	r0, r4
   1964c:	bl	19338 <__assert_fail@plt+0x7de0>
   19650:	ldr	r3, [r4, #80]	; 0x50
   19654:	sub	r2, r6, r5
   19658:	str	r0, [r4, #60]	; 0x3c
   1965c:	cmp	r3, #1
   19660:	bgt	1971c <__assert_fail@plt+0x81c4>
   19664:	ldrb	r3, [r4, #75]	; 0x4b
   19668:	cmp	r3, #0
   1966c:	bne	19984 <__assert_fail@plt+0x842c>
   19670:	ldr	ip, [r4, #32]
   19674:	str	r2, [r4, #28]
   19678:	ldr	r1, [r4, #48]	; 0x30
   1967c:	ldr	r0, [r4, #56]	; 0x38
   19680:	sub	ip, ip, r5
   19684:	ldr	r2, [r4, #80]	; 0x50
   19688:	sub	r1, r1, r5
   1968c:	str	ip, [r4, #32]
   19690:	sub	r0, r0, r5
   19694:	cmp	r3, #0
   19698:	bne	196a8 <__assert_fail@plt+0x8150>
   1969c:	ldr	r3, [r4, #4]
   196a0:	add	r5, r3, r5
   196a4:	str	r5, [r4, #4]
   196a8:	cmp	r2, #1
   196ac:	str	r7, [r4, #24]
   196b0:	str	r1, [r4, #48]	; 0x30
   196b4:	str	r0, [r4, #56]	; 0x38
   196b8:	ble	19748 <__assert_fail@plt+0x81f0>
   196bc:	ldrb	r3, [r4, #72]	; 0x48
   196c0:	mov	r0, r4
   196c4:	cmp	r3, #0
   196c8:	bne	19738 <__assert_fail@plt+0x81e0>
   196cc:	bl	1826c <__assert_fail@plt+0x6d14>
   196d0:	mov	r3, #0
   196d4:	mov	r0, r3
   196d8:	str	r3, [r4, #40]	; 0x28
   196dc:	add	sp, sp, #36	; 0x24
   196e0:	ldrd	r4, [sp]
   196e4:	ldrd	r6, [sp, #8]
   196e8:	ldrd	r8, [sp, #16]
   196ec:	ldrd	sl, [sp, #24]
   196f0:	add	sp, sp, #32
   196f4:	pop	{pc}		; (ldr pc, [sp], #4)
   196f8:	ldr	r2, [r4]
   196fc:	mov	r5, r7
   19700:	cmp	r5, #0
   19704:	str	r2, [r4, #4]
   19708:	bne	19624 <__assert_fail@plt+0x80cc>
   1970c:	ldr	r1, [r4, #48]	; 0x30
   19710:	ldr	r0, [r4, #56]	; 0x38
   19714:	ldr	r2, [r4, #80]	; 0x50
   19718:	b	196a8 <__assert_fail@plt+0x8150>
   1971c:	ldr	r0, [r4, #8]
   19720:	lsl	r2, r2, #2
   19724:	add	r1, r0, r5, lsl #2
   19728:	bl	11234 <memmove@plt>
   1972c:	ldr	r2, [r4, #28]
   19730:	sub	r2, r2, r5
   19734:	b	19664 <__assert_fail@plt+0x810c>
   19738:	bl	18448 <__assert_fail@plt+0x6ef0>
   1973c:	cmp	r0, #0
   19740:	beq	196d0 <__assert_fail@plt+0x8178>
   19744:	b	196dc <__assert_fail@plt+0x8184>
   19748:	ldrb	r3, [r4, #75]	; 0x4b
   1974c:	cmp	r3, #0
   19750:	streq	r1, [r4, #28]
   19754:	beq	196d0 <__assert_fail@plt+0x8178>
   19758:	ldrb	r3, [r4, #72]	; 0x48
   1975c:	cmp	r3, #0
   19760:	bne	19c44 <__assert_fail@plt+0x86ec>
   19764:	ldr	r0, [r4, #64]	; 0x40
   19768:	cmp	r0, #0
   1976c:	beq	196d0 <__assert_fail@plt+0x8178>
   19770:	ldr	r2, [r4, #28]
   19774:	ldr	r3, [r4, #36]	; 0x24
   19778:	cmp	r1, r3
   1977c:	movge	r1, r3
   19780:	cmp	r1, r2
   19784:	ble	19e1c <__assert_fail@plt+0x88c4>
   19788:	ldm	r4, {ip, lr}
   1978c:	add	r3, r2, #1
   19790:	cmp	r1, r3
   19794:	add	ip, ip, r2
   19798:	ldrb	ip, [ip, r7]
   1979c:	ldrb	r0, [r0, ip]
   197a0:	strb	r0, [lr, r2]
   197a4:	ble	197d4 <__assert_fail@plt+0x827c>
   197a8:	ldr	r2, [r4]
   197ac:	ldr	r0, [r4, #24]
   197b0:	ldr	ip, [r4, #64]	; 0x40
   197b4:	add	r2, r2, r3
   197b8:	ldrb	r0, [r2, r0]
   197bc:	ldr	r2, [r4, #4]
   197c0:	ldrb	r0, [ip, r0]
   197c4:	strb	r0, [r2, r3]
   197c8:	add	r3, r3, #1
   197cc:	cmp	r1, r3
   197d0:	bne	197a8 <__assert_fail@plt+0x8250>
   197d4:	str	r1, [r4, #28]
   197d8:	str	r1, [r4, #32]
   197dc:	b	196d0 <__assert_fail@plt+0x8178>
   197e0:	cmp	r2, #0
   197e4:	bne	19d4c <__assert_fail@plt+0x87f4>
   197e8:	ldr	r2, [r4, #80]	; 0x50
   197ec:	mov	r0, #0
   197f0:	str	r0, [r4, #28]
   197f4:	cmp	r2, #1
   197f8:	ble	19b04 <__assert_fail@plt+0x85ac>
   197fc:	ldrb	r0, [r4, #73]	; 0x49
   19800:	cmp	r0, #0
   19804:	beq	19878 <__assert_fail@plt+0x8320>
   19808:	ldr	ip, [r4]
   1980c:	sub	r2, r5, r2
   19810:	sub	r0, r5, #1
   19814:	add	lr, ip, r3
   19818:	add	r2, lr, r2
   1981c:	add	r9, lr, r0
   19820:	cmp	ip, r2
   19824:	str	lr, [sp]
   19828:	movcc	ip, r2
   1982c:	cmp	ip, r9
   19830:	bhi	19878 <__assert_fail@plt+0x8320>
   19834:	ldrb	r2, [lr, r0]
   19838:	and	r2, r2, #192	; 0xc0
   1983c:	cmp	r2, #128	; 0x80
   19840:	movne	r1, lr
   19844:	bne	19ccc <__assert_fail@plt+0x8774>
   19848:	mov	sl, lr
   1984c:	sub	r2, r9, #1
   19850:	sub	ip, ip, #1
   19854:	b	1986c <__assert_fail@plt+0x8314>
   19858:	ldrb	r0, [r9]
   1985c:	sub	r2, r2, #1
   19860:	and	r0, r0, #192	; 0xc0
   19864:	cmp	r0, #128	; 0x80
   19868:	bne	19cc4 <__assert_fail@plt+0x876c>
   1986c:	cmp	ip, r2
   19870:	mov	r9, r2
   19874:	bne	19858 <__assert_fail@plt+0x8300>
   19878:	add	r9, r3, r1
   1987c:	cmp	r7, r9
   19880:	ble	19b84 <__assert_fail@plt+0x862c>
   19884:	add	fp, r4, #16
   19888:	str	r7, [sp]
   1988c:	str	r6, [sp, #4]
   19890:	ldr	r1, [r4]
   19894:	mov	r3, fp
   19898:	add	r0, sp, #16
   1989c:	ldr	sl, [r4, #44]	; 0x2c
   198a0:	ldrd	r6, [fp]
   198a4:	add	r1, r1, r9
   198a8:	sub	sl, sl, r9
   198ac:	mov	r2, sl
   198b0:	strd	r6, [sp, #24]
   198b4:	bl	2d174 <__assert_fail@plt+0x1bc1c>
   198b8:	sub	r3, r0, #1
   198bc:	cmn	r3, #4
   198c0:	ldrls	r1, [sp, #16]
   198c4:	bhi	19d78 <__assert_fail@plt+0x8820>
   198c8:	add	r9, r9, r0
   198cc:	ldr	r3, [sp]
   198d0:	cmp	r3, r9
   198d4:	bgt	19890 <__assert_fail@plt+0x8338>
   198d8:	sub	r9, r9, r3
   198dc:	cmn	r1, #1
   198e0:	ldr	r6, [sp, #4]
   198e4:	mov	r7, r3
   198e8:	str	r9, [r4, #28]
   198ec:	beq	19b8c <__assert_fail@plt+0x8634>
   198f0:	ldrb	r3, [r4, #78]	; 0x4e
   198f4:	cmp	r3, #0
   198f8:	bne	19dec <__assert_fail@plt+0x8894>
   198fc:	cmp	r1, #10
   19900:	movne	r3, #0
   19904:	bne	19918 <__assert_fail@plt+0x83c0>
   19908:	ldrb	r3, [r4, #77]	; 0x4d
   1990c:	cmp	r3, #0
   19910:	moveq	r3, #0
   19914:	movne	r3, #2
   19918:	str	r3, [r4, #60]	; 0x3c
   1991c:	cmp	r9, #0
   19920:	bne	19d9c <__assert_fail@plt+0x8844>
   19924:	ldrb	r3, [r4, #75]	; 0x4b
   19928:	str	r9, [r4, #32]
   1992c:	ldr	r1, [r4, #48]	; 0x30
   19930:	ldr	r0, [r4, #56]	; 0x38
   19934:	ldr	r2, [r4, #80]	; 0x50
   19938:	sub	r1, r1, r5
   1993c:	sub	r0, r0, r5
   19940:	b	19694 <__assert_fail@plt+0x813c>
   19944:	mov	r3, r6
   19948:	mov	r2, #0
   1994c:	ldr	r9, [r4, #12]
   19950:	b	19964 <__assert_fail@plt+0x840c>
   19954:	bge	19af8 <__assert_fail@plt+0x85a0>
   19958:	add	r2, r1, #1
   1995c:	cmp	r2, r3
   19960:	bge	199a0 <__assert_fail@plt+0x8448>
   19964:	add	r1, r2, r3
   19968:	add	r1, r1, r1, lsr #31
   1996c:	asr	r1, r1, #1
   19970:	ldr	r0, [r9, r1, lsl #2]
   19974:	cmp	r0, r5
   19978:	ble	19954 <__assert_fail@plt+0x83fc>
   1997c:	mov	r3, r1
   19980:	b	1995c <__assert_fail@plt+0x8404>
   19984:	ldr	r0, [r4, #4]
   19988:	add	r1, r0, r5
   1998c:	bl	11234 <memmove@plt>
   19990:	ldr	r2, [r4, #28]
   19994:	ldrb	r3, [r4, #75]	; 0x4b
   19998:	sub	r2, r2, r5
   1999c:	b	19670 <__assert_fail@plt+0x8118>
   199a0:	cmp	r0, r5
   199a4:	addlt	sl, r1, #1
   199a8:	bge	19af8 <__assert_fail@plt+0x85a0>
   199ac:	mov	r2, r8
   199b0:	mov	r0, r4
   199b4:	bl	19338 <__assert_fail@plt+0x7de0>
   199b8:	sub	r3, r5, sl
   199bc:	cmp	r5, r6
   199c0:	str	r0, [r4, #60]	; 0x3c
   199c4:	clz	r3, r3
   199c8:	lsr	r3, r3, #5
   199cc:	movge	r3, #0
   199d0:	cmp	r3, #0
   199d4:	bne	19ba4 <__assert_fail@plt+0x864c>
   199d8:	ldr	r1, [r4, #44]	; 0x2c
   199dc:	mov	r3, #0
   199e0:	cmp	sl, #0
   199e4:	ldr	r0, [r4, #52]	; 0x34
   199e8:	strb	r3, [r4, #76]	; 0x4c
   199ec:	sub	r1, r1, r7
   199f0:	add	r2, r1, r5
   199f4:	sub	r0, r0, r7
   199f8:	add	r3, r0, r5
   199fc:	str	r2, [r4, #48]	; 0x30
   19a00:	str	r3, [r4, #56]	; 0x38
   19a04:	ble	19a34 <__assert_fail@plt+0x84dc>
   19a08:	sub	r3, sl, #-1073741823	; 0xc0000001
   19a0c:	ldr	r2, [r9, r3, lsl #2]
   19a10:	add	r3, r9, r3, lsl #2
   19a14:	cmp	r2, r5
   19a18:	beq	19a2c <__assert_fail@plt+0x84d4>
   19a1c:	b	19a34 <__assert_fail@plt+0x84dc>
   19a20:	ldr	r2, [r3, #-4]!
   19a24:	cmp	r2, r5
   19a28:	bne	19a34 <__assert_fail@plt+0x84dc>
   19a2c:	subs	sl, sl, #1
   19a30:	bne	19a20 <__assert_fail@plt+0x84c8>
   19a34:	cmp	sl, r6
   19a38:	bge	19a90 <__assert_fail@plt+0x8538>
   19a3c:	ldr	r3, [r4, #8]
   19a40:	lsl	ip, sl, #2
   19a44:	ldr	r2, [r3, sl, lsl #2]
   19a48:	add	r3, r3, ip
   19a4c:	cmn	r2, #1
   19a50:	beq	19a64 <__assert_fail@plt+0x850c>
   19a54:	b	19a98 <__assert_fail@plt+0x8540>
   19a58:	ldr	r2, [r3, #4]!
   19a5c:	cmn	r2, #1
   19a60:	bne	19a98 <__assert_fail@plt+0x8540>
   19a64:	add	sl, sl, #1
   19a68:	cmp	sl, r6
   19a6c:	lsl	ip, sl, #2
   19a70:	bne	19a58 <__assert_fail@plt+0x8500>
   19a74:	mov	r3, #0
   19a78:	mov	r2, r3
   19a7c:	str	r3, [r4, #28]
   19a80:	ldrb	r3, [r4, #75]	; 0x4b
   19a84:	str	r2, [r4, #32]
   19a88:	ldr	r2, [r4, #80]	; 0x50
   19a8c:	b	19694 <__assert_fail@plt+0x813c>
   19a90:	beq	19a74 <__assert_fail@plt+0x851c>
   19a94:	lsl	ip, sl, #2
   19a98:	ldr	r2, [r9, ip]
   19a9c:	sub	r2, r2, r5
   19aa0:	cmp	r2, #0
   19aa4:	str	r2, [r4, #28]
   19aa8:	beq	19a80 <__assert_fail@plt+0x8528>
   19aac:	ble	19ad4 <__assert_fail@plt+0x857c>
   19ab0:	ldr	r1, [r4, #8]
   19ab4:	mov	r3, #0
   19ab8:	mvn	r0, #0
   19abc:	sub	r1, r1, #4
   19ac0:	str	r0, [r1, #4]!
   19ac4:	add	r3, r3, #1
   19ac8:	ldr	r2, [r4, #28]
   19acc:	cmp	r2, r3
   19ad0:	bgt	19ac0 <__assert_fail@plt+0x8568>
   19ad4:	mov	r1, #255	; 0xff
   19ad8:	ldr	r0, [r4, #4]
   19adc:	bl	1145c <memset@plt>
   19ae0:	ldr	r2, [r4, #28]
   19ae4:	ldr	r1, [r4, #48]	; 0x30
   19ae8:	ldr	r0, [r4, #56]	; 0x38
   19aec:	sub	r1, r1, r5
   19af0:	sub	r0, r0, r5
   19af4:	b	19a80 <__assert_fail@plt+0x8528>
   19af8:	mov	sl, r1
   19afc:	sub	r1, r1, #1
   19b00:	b	199ac <__assert_fail@plt+0x8454>
   19b04:	ldr	r9, [r4]
   19b08:	ldr	r1, [r4, #64]	; 0x40
   19b0c:	add	r9, r9, r3
   19b10:	add	r3, r9, r5
   19b14:	ldrb	ip, [r3, #-1]
   19b18:	cmp	r1, #0
   19b1c:	str	r0, [r4, #32]
   19b20:	ldr	r0, [r4, #68]	; 0x44
   19b24:	ldrbne	ip, [r1, ip]
   19b28:	asr	r1, ip, #5
   19b2c:	and	r3, ip, #31
   19b30:	ldr	r1, [r0, r1, lsl #2]
   19b34:	lsr	r3, r1, r3
   19b38:	ands	r1, r3, #1
   19b3c:	bne	19b54 <__assert_fail@plt+0x85fc>
   19b40:	cmp	ip, #10
   19b44:	bne	19b54 <__assert_fail@plt+0x85fc>
   19b48:	ldrb	r3, [r4, #77]	; 0x4d
   19b4c:	cmp	r3, #0
   19b50:	movne	r1, #2
   19b54:	ldrb	r3, [r4, #75]	; 0x4b
   19b58:	str	r1, [r4, #60]	; 0x3c
   19b5c:	ldr	r1, [r4, #48]	; 0x30
   19b60:	ldr	r0, [r4, #56]	; 0x38
   19b64:	cmp	r3, #0
   19b68:	sub	r1, r1, r5
   19b6c:	sub	r0, r0, r5
   19b70:	beq	1969c <__assert_fail@plt+0x8144>
   19b74:	str	r7, [r4, #24]
   19b78:	str	r1, [r4, #48]	; 0x30
   19b7c:	str	r0, [r4, #56]	; 0x38
   19b80:	b	1974c <__assert_fail@plt+0x81f4>
   19b84:	sub	r9, r9, r7
   19b88:	str	r9, [r4, #28]
   19b8c:	mov	r2, r8
   19b90:	sub	r1, r6, #1
   19b94:	mov	r0, r4
   19b98:	bl	19338 <__assert_fail@plt+0x7de0>
   19b9c:	str	r0, [r4, #60]	; 0x3c
   19ba0:	b	1991c <__assert_fail@plt+0x83c4>
   19ba4:	ldr	r3, [r9, sl, lsl #2]
   19ba8:	cmp	r3, r5
   19bac:	bne	199d8 <__assert_fail@plt+0x8480>
   19bb0:	ldr	r0, [r4, #8]
   19bb4:	lsl	r8, r5, #2
   19bb8:	sub	r2, r6, r5
   19bbc:	lsl	r2, r2, #2
   19bc0:	add	r1, r0, r8
   19bc4:	bl	11234 <memmove@plt>
   19bc8:	ldr	r0, [r4, #4]
   19bcc:	ldr	r2, [r4, #28]
   19bd0:	add	r1, r0, r5
   19bd4:	sub	r2, r2, r5
   19bd8:	bl	11234 <memmove@plt>
   19bdc:	ldr	r3, [r4, #28]
   19be0:	ldr	r2, [r4, #32]
   19be4:	sub	r3, r3, r5
   19be8:	cmp	r3, #0
   19bec:	sub	r2, r2, r5
   19bf0:	str	r3, [r4, #28]
   19bf4:	str	r2, [r4, #32]
   19bf8:	ble	19c28 <__assert_fail@plt+0x86d0>
   19bfc:	ldr	r1, [r4, #12]
   19c00:	mov	r2, #0
   19c04:	add	r0, r1, r8
   19c08:	sub	r1, r1, #4
   19c0c:	ldr	r3, [r0], #4
   19c10:	add	r2, r2, #1
   19c14:	sub	r3, r3, r5
   19c18:	str	r3, [r1, #4]!
   19c1c:	ldr	r3, [r4, #28]
   19c20:	cmp	r3, r2
   19c24:	bgt	19c0c <__assert_fail@plt+0x86b4>
   19c28:	ldr	r1, [r4, #48]	; 0x30
   19c2c:	ldr	r0, [r4, #56]	; 0x38
   19c30:	ldrb	r3, [r4, #75]	; 0x4b
   19c34:	sub	r1, r1, r5
   19c38:	ldr	r2, [r4, #80]	; 0x50
   19c3c:	sub	r0, r0, r5
   19c40:	b	19694 <__assert_fail@plt+0x813c>
   19c44:	ldr	r5, [r4, #28]
   19c48:	ldr	r6, [r4, #36]	; 0x24
   19c4c:	cmp	r1, r6
   19c50:	movlt	r6, r1
   19c54:	cmp	r6, r5
   19c58:	ble	19e24 <__assert_fail@plt+0x88cc>
   19c5c:	bl	113d8 <__ctype_toupper_loc@plt>
   19c60:	b	19c80 <__assert_fail@plt+0x8728>
   19c64:	ldr	r3, [r1, r3, lsl #2]
   19c68:	ldr	r2, [r4, #4]
   19c6c:	strb	r3, [r2, r5]
   19c70:	add	r5, r5, #1
   19c74:	cmp	r6, r5
   19c78:	beq	19cb8 <__assert_fail@plt+0x8760>
   19c7c:	ldr	r7, [r4, #24]
   19c80:	ldr	r3, [r4]
   19c84:	ldr	r2, [r4, #64]	; 0x40
   19c88:	ldr	r1, [r0]
   19c8c:	add	r3, r3, r5
   19c90:	ldrb	r3, [r3, r7]
   19c94:	cmp	r2, #0
   19c98:	beq	19c64 <__assert_fail@plt+0x870c>
   19c9c:	ldrb	r2, [r2, r3]
   19ca0:	ldr	r3, [r4, #4]
   19ca4:	ldr	r2, [r1, r2, lsl #2]
   19ca8:	strb	r2, [r3, r5]
   19cac:	add	r5, r5, #1
   19cb0:	cmp	r5, r6
   19cb4:	bne	19c7c <__assert_fail@plt+0x8724>
   19cb8:	str	r6, [r4, #28]
   19cbc:	str	r6, [r4, #32]
   19cc0:	b	196d0 <__assert_fail@plt+0x8178>
   19cc4:	mov	r1, sl
   19cc8:	str	sl, [sp]
   19ccc:	ldr	r2, [r4, #48]	; 0x30
   19cd0:	ldr	r3, [r4, #64]	; 0x40
   19cd4:	add	r2, r1, r2
   19cd8:	sub	r2, r2, r9
   19cdc:	cmp	r3, #0
   19ce0:	moveq	r1, r9
   19ce4:	bne	19e2c <__assert_fail@plt+0x88d4>
   19ce8:	mov	sl, #0
   19cec:	mov	fp, #0
   19cf0:	add	r3, sp, #24
   19cf4:	add	r0, sp, #12
   19cf8:	strd	sl, [sp, #24]
   19cfc:	bl	2d174 <__assert_fail@plt+0x1bc1c>
   19d00:	ldr	r3, [sp]
   19d04:	add	sl, r3, r5
   19d08:	sub	r9, sl, r9
   19d0c:	cmp	r0, r9
   19d10:	bcc	19d1c <__assert_fail@plt+0x87c4>
   19d14:	cmn	r0, #3
   19d18:	bls	19d28 <__assert_fail@plt+0x87d0>
   19d1c:	ldr	r3, [r4, #24]
   19d20:	ldr	r1, [r4, #32]
   19d24:	b	19878 <__assert_fail@plt+0x8320>
   19d28:	ldr	r1, [sp, #12]
   19d2c:	sub	r9, r0, r9
   19d30:	mov	r2, #0
   19d34:	mov	r3, #0
   19d38:	strd	r2, [r4, #16]
   19d3c:	str	r9, [r4, #28]
   19d40:	cmn	r1, #1
   19d44:	bne	198f0 <__assert_fail@plt+0x8398>
   19d48:	b	19d1c <__assert_fail@plt+0x87c4>
   19d4c:	ldr	r0, [r4, #44]	; 0x2c
   19d50:	mov	ip, #0
   19d54:	ldr	r2, [r4, #52]	; 0x34
   19d58:	strb	ip, [r4, #76]	; 0x4c
   19d5c:	sub	r0, r0, r7
   19d60:	add	r0, r0, r5
   19d64:	sub	r2, r2, r7
   19d68:	add	r2, r2, r5
   19d6c:	str	r0, [r4, #48]	; 0x30
   19d70:	str	r2, [r4, #56]	; 0x38
   19d74:	b	197e8 <__assert_fail@plt+0x8290>
   19d78:	mov	r1, #0
   19d7c:	cmp	sl, r1
   19d80:	cmpne	r0, r1
   19d84:	mov	r0, #1
   19d88:	ldrne	r3, [r4]
   19d8c:	ldrbne	r1, [r3, r9]
   19d90:	ldrd	r2, [sp, #24]
   19d94:	strd	r2, [fp]
   19d98:	b	198c8 <__assert_fail@plt+0x8370>
   19d9c:	ble	19dc4 <__assert_fail@plt+0x886c>
   19da0:	ldr	r2, [r4, #8]
   19da4:	mov	r3, #0
   19da8:	mvn	r1, #0
   19dac:	sub	r2, r2, #4
   19db0:	str	r1, [r2, #4]!
   19db4:	add	r3, r3, #1
   19db8:	ldr	r9, [r4, #28]
   19dbc:	cmp	r9, r3
   19dc0:	bgt	19db0 <__assert_fail@plt+0x8858>
   19dc4:	ldrb	r3, [r4, #75]	; 0x4b
   19dc8:	cmp	r3, #0
   19dcc:	beq	19928 <__assert_fail@plt+0x83d0>
   19dd0:	mov	r2, r9
   19dd4:	mov	r1, #255	; 0xff
   19dd8:	ldr	r0, [r4, #4]
   19ddc:	bl	1145c <memset@plt>
   19de0:	ldrb	r3, [r4, #75]	; 0x4b
   19de4:	ldr	r9, [r4, #28]
   19de8:	b	19928 <__assert_fail@plt+0x83d0>
   19dec:	mov	r0, r1
   19df0:	str	r1, [sp]
   19df4:	bl	11438 <iswalnum@plt>
   19df8:	ldr	r1, [sp]
   19dfc:	subs	r3, r1, #95	; 0x5f
   19e00:	movne	r3, #1
   19e04:	cmp	r0, #0
   19e08:	movne	r3, #0
   19e0c:	cmp	r3, #0
   19e10:	moveq	r3, #1
   19e14:	beq	19918 <__assert_fail@plt+0x83c0>
   19e18:	b	198fc <__assert_fail@plt+0x83a4>
   19e1c:	mov	r1, r2
   19e20:	b	197d4 <__assert_fail@plt+0x827c>
   19e24:	mov	r6, r5
   19e28:	b	19cb8 <__assert_fail@plt+0x8760>
   19e2c:	cmp	r2, #6
   19e30:	movlt	r1, r2
   19e34:	movge	r1, #6
   19e38:	subs	r0, r1, #1
   19e3c:	bmi	19ee4 <__assert_fail@plt+0x898c>
   19e40:	ldrb	lr, [r9, r0]
   19e44:	add	ip, sp, #32
   19e48:	add	ip, ip, r0
   19e4c:	sub	r0, r1, #2
   19e50:	cmn	r0, #1
   19e54:	ldrb	lr, [r3, lr]
   19e58:	strb	lr, [ip, #-16]
   19e5c:	beq	19ee4 <__assert_fail@plt+0x898c>
   19e60:	ldrb	lr, [r9, r0]
   19e64:	add	ip, sp, #32
   19e68:	add	ip, ip, r0
   19e6c:	sub	r0, r1, #3
   19e70:	cmn	r0, #1
   19e74:	ldrb	lr, [r3, lr]
   19e78:	strb	lr, [ip, #-16]
   19e7c:	beq	19ee4 <__assert_fail@plt+0x898c>
   19e80:	ldrb	lr, [r9, r0]
   19e84:	add	ip, sp, #32
   19e88:	add	ip, ip, r0
   19e8c:	sub	r0, r1, #4
   19e90:	cmn	r0, #1
   19e94:	ldrb	lr, [r3, lr]
   19e98:	strb	lr, [ip, #-16]
   19e9c:	beq	19ee4 <__assert_fail@plt+0x898c>
   19ea0:	ldrb	ip, [r9, r0]
   19ea4:	add	lr, sp, #32
   19ea8:	sub	r1, r1, #5
   19eac:	add	r0, lr, r0
   19eb0:	cmn	r1, #1
   19eb4:	ldrb	ip, [r3, ip]
   19eb8:	strb	ip, [r0, #-16]
   19ebc:	beq	19ee4 <__assert_fail@plt+0x898c>
   19ec0:	ldrb	r0, [r9, r1]
   19ec4:	add	r1, lr, r1
   19ec8:	cmp	r2, #5
   19ecc:	ldrb	r0, [r3, r0]
   19ed0:	strb	r0, [r1, #-16]
   19ed4:	ble	19ee4 <__assert_fail@plt+0x898c>
   19ed8:	ldrb	r1, [r9]
   19edc:	ldrb	r3, [r3, r1]
   19ee0:	strb	r3, [sp, #16]
   19ee4:	add	r1, sp, #16
   19ee8:	b	19ce8 <__assert_fail@plt+0x8790>
   19eec:	strd	r4, [sp, #-16]!
   19ef0:	mov	r4, r1
   19ef4:	mov	r1, r2
   19ef8:	ldr	r2, [r0, #88]	; 0x58
   19efc:	mov	r5, r0
   19f00:	str	r6, [sp, #8]
   19f04:	str	lr, [sp, #12]
   19f08:	bl	19338 <__assert_fail@plt+0x7de0>
   19f0c:	ldr	r1, [r4, #8]
   19f10:	cmp	r1, #0
   19f14:	ble	19f80 <__assert_fail@plt+0x8a28>
   19f18:	ldr	ip, [r5, #84]	; 0x54
   19f1c:	ands	r3, r0, #1
   19f20:	and	r2, r0, #2
   19f24:	and	r0, r0, #8
   19f28:	ldr	lr, [r4, #12]
   19f2c:	ldr	ip, [ip]
   19f30:	beq	19f94 <__assert_fail@plt+0x8a3c>
   19f34:	cmp	r2, #0
   19f38:	beq	1a0c4 <__assert_fail@plt+0x8b6c>
   19f3c:	cmp	r0, #0
   19f40:	beq	1a154 <__assert_fail@plt+0x8bfc>
   19f44:	mov	r2, #0
   19f48:	ldr	r0, [lr, r2, lsl #2]
   19f4c:	add	r2, r2, #1
   19f50:	add	r3, ip, r0, lsl #3
   19f54:	ldrb	r4, [r3, #4]
   19f58:	ldr	r3, [r3, #4]
   19f5c:	cmp	r4, #2
   19f60:	ubfx	r3, r3, #8, #10
   19f64:	bne	19f78 <__assert_fail@plt+0x8a20>
   19f68:	cmp	r3, #0
   19f6c:	beq	19fd8 <__assert_fail@plt+0x8a80>
   19f70:	tst	r3, #8
   19f74:	beq	19fd8 <__assert_fail@plt+0x8a80>
   19f78:	cmp	r1, r2
   19f7c:	bne	19f48 <__assert_fail@plt+0x89f0>
   19f80:	ldrd	r4, [sp]
   19f84:	mov	r0, #0
   19f88:	ldr	r6, [sp, #8]
   19f8c:	add	sp, sp, #12
   19f90:	pop	{pc}		; (ldr pc, [sp], #4)
   19f94:	cmp	r2, #0
   19f98:	beq	1a034 <__assert_fail@plt+0x8adc>
   19f9c:	cmp	r0, #0
   19fa0:	sub	lr, lr, #4
   19fa4:	beq	19ff4 <__assert_fail@plt+0x8a9c>
   19fa8:	ldr	r0, [lr, #4]!
   19fac:	add	r3, r3, #1
   19fb0:	add	r2, ip, r0, lsl #3
   19fb4:	ldrb	r4, [r2, #4]
   19fb8:	ldr	r2, [r2, #4]
   19fbc:	cmp	r4, #2
   19fc0:	ubfx	r2, r2, #8, #10
   19fc4:	bne	19fe8 <__assert_fail@plt+0x8a90>
   19fc8:	cmp	r2, #0
   19fcc:	beq	19fd8 <__assert_fail@plt+0x8a80>
   19fd0:	tst	r2, #4
   19fd4:	bne	19fe8 <__assert_fail@plt+0x8a90>
   19fd8:	ldrd	r4, [sp]
   19fdc:	ldr	r6, [sp, #8]
   19fe0:	add	sp, sp, #12
   19fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   19fe8:	cmp	r1, r3
   19fec:	bne	19fa8 <__assert_fail@plt+0x8a50>
   19ff0:	b	19f80 <__assert_fail@plt+0x8a28>
   19ff4:	mov	r3, r0
   19ff8:	ldr	r0, [lr, #4]!
   19ffc:	add	r3, r3, #1
   1a000:	add	r2, ip, r0, lsl #3
   1a004:	ldrb	r4, [r2, #4]
   1a008:	ldr	r2, [r2, #4]
   1a00c:	cmp	r4, #2
   1a010:	ubfx	r2, r2, #8, #10
   1a014:	bne	1a028 <__assert_fail@plt+0x8ad0>
   1a018:	cmp	r2, #0
   1a01c:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a020:	tst	r2, #132	; 0x84
   1a024:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a028:	cmp	r1, r3
   1a02c:	bne	19ff8 <__assert_fail@plt+0x8aa0>
   1a030:	b	19f80 <__assert_fail@plt+0x8a28>
   1a034:	cmp	r0, #0
   1a038:	beq	1a080 <__assert_fail@plt+0x8b28>
   1a03c:	sub	lr, lr, #4
   1a040:	mov	r3, r2
   1a044:	ldr	r0, [lr, #4]!
   1a048:	add	r3, r3, #1
   1a04c:	add	r2, ip, r0, lsl #3
   1a050:	ldrb	r4, [r2, #4]
   1a054:	ldr	r2, [r2, #4]
   1a058:	cmp	r4, #2
   1a05c:	ubfx	r2, r2, #8, #10
   1a060:	bne	1a074 <__assert_fail@plt+0x8b1c>
   1a064:	cmp	r2, #0
   1a068:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a06c:	tst	r2, #36	; 0x24
   1a070:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a074:	cmp	r1, r3
   1a078:	bne	1a044 <__assert_fail@plt+0x8aec>
   1a07c:	b	19f80 <__assert_fail@plt+0x8a28>
   1a080:	sub	r2, lr, #4
   1a084:	mov	r3, r0
   1a088:	ldr	r0, [r2, #4]!
   1a08c:	add	r3, r3, #1
   1a090:	add	lr, ip, r0, lsl #3
   1a094:	ldrb	r4, [lr, #4]
   1a098:	ldr	lr, [lr, #4]
   1a09c:	cmp	r4, #2
   1a0a0:	ubfx	lr, lr, #8, #10
   1a0a4:	bne	1a0b8 <__assert_fail@plt+0x8b60>
   1a0a8:	cmp	lr, #0
   1a0ac:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a0b0:	tst	lr, #164	; 0xa4
   1a0b4:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a0b8:	cmp	r1, r3
   1a0bc:	bne	1a088 <__assert_fail@plt+0x8b30>
   1a0c0:	b	19f80 <__assert_fail@plt+0x8a28>
   1a0c4:	cmp	r0, #0
   1a0c8:	beq	1a10c <__assert_fail@plt+0x8bb4>
   1a0cc:	mov	r3, r2
   1a0d0:	ldr	r0, [lr, r3, lsl #2]
   1a0d4:	add	r2, ip, r0, lsl #3
   1a0d8:	ldrb	r4, [r2, #4]
   1a0dc:	ldr	r2, [r2, #4]
   1a0e0:	cmp	r4, #2
   1a0e4:	ubfx	r2, r2, #8, #10
   1a0e8:	bne	1a0fc <__assert_fail@plt+0x8ba4>
   1a0ec:	cmp	r2, #0
   1a0f0:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a0f4:	tst	r2, #8
   1a0f8:	beq	1a194 <__assert_fail@plt+0x8c3c>
   1a0fc:	add	r3, r3, #1
   1a100:	cmp	r1, r3
   1a104:	bne	1a0d0 <__assert_fail@plt+0x8b78>
   1a108:	b	19f80 <__assert_fail@plt+0x8a28>
   1a10c:	mov	r3, r0
   1a110:	ldr	r0, [lr, r3, lsl #2]
   1a114:	add	r2, ip, r0, lsl #3
   1a118:	ldrb	r4, [r2, #4]
   1a11c:	ldr	r2, [r2, #4]
   1a120:	cmp	r4, #2
   1a124:	ubfx	r2, r2, #8, #10
   1a128:	bne	1a144 <__assert_fail@plt+0x8bec>
   1a12c:	cmp	r2, #0
   1a130:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a134:	tst	r2, #8
   1a138:	bne	1a144 <__assert_fail@plt+0x8bec>
   1a13c:	tst	r2, #160	; 0xa0
   1a140:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a144:	add	r3, r3, #1
   1a148:	cmp	r3, r1
   1a14c:	bne	1a110 <__assert_fail@plt+0x8bb8>
   1a150:	b	19f80 <__assert_fail@plt+0x8a28>
   1a154:	mov	r3, r0
   1a158:	ldr	r0, [lr, r3, lsl #2]
   1a15c:	add	r2, ip, r0, lsl #3
   1a160:	ldrb	r4, [r2, #4]
   1a164:	ldr	r2, [r2, #4]
   1a168:	cmp	r4, #2
   1a16c:	ubfx	r2, r2, #8, #10
   1a170:	bne	1a184 <__assert_fail@plt+0x8c2c>
   1a174:	cmp	r2, #0
   1a178:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a17c:	tst	r2, #8
   1a180:	beq	1a1a0 <__assert_fail@plt+0x8c48>
   1a184:	add	r3, r3, #1
   1a188:	cmp	r1, r3
   1a18c:	bne	1a158 <__assert_fail@plt+0x8c00>
   1a190:	b	19f80 <__assert_fail@plt+0x8a28>
   1a194:	tst	r2, #32
   1a198:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a19c:	b	1a0fc <__assert_fail@plt+0x8ba4>
   1a1a0:	tst	r2, #128	; 0x80
   1a1a4:	beq	19fd8 <__assert_fail@plt+0x8a80>
   1a1a8:	b	1a184 <__assert_fail@plt+0x8c2c>
   1a1ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a1b0:	strd	r6, [sp, #8]
   1a1b4:	strd	sl, [sp, #24]
   1a1b8:	ldr	fp, [r1]
   1a1bc:	strd	r8, [sp, #16]
   1a1c0:	str	lr, [sp, #32]
   1a1c4:	sub	sp, sp, #12
   1a1c8:	ldr	r6, [r0, #84]	; 0x54
   1a1cc:	cmp	fp, #0
   1a1d0:	ble	1a28c <__assert_fail@plt+0x8d34>
   1a1d4:	mov	r8, r3
   1a1d8:	mov	r9, r2
   1a1dc:	mov	sl, r0
   1a1e0:	mov	r7, r1
   1a1e4:	mov	r4, #0
   1a1e8:	b	1a1f4 <__assert_fail@plt+0x8c9c>
   1a1ec:	cmp	r4, fp
   1a1f0:	bge	1a28c <__assert_fail@plt+0x8d34>
   1a1f4:	ldr	r3, [r9]
   1a1f8:	ldr	ip, [r6]
   1a1fc:	ldr	r5, [r3, r4, lsl #2]
   1a200:	add	r4, r4, #1
   1a204:	add	lr, ip, r5, lsl #3
   1a208:	ldrb	lr, [lr, #4]
   1a20c:	cmp	lr, #8
   1a210:	bne	1a1ec <__assert_fail@plt+0x8c94>
   1a214:	ldr	r3, [ip, r5, lsl #3]
   1a218:	cmp	r3, #31
   1a21c:	bgt	1a1ec <__assert_fail@plt+0x8c94>
   1a220:	ldr	r2, [r6, #80]	; 0x50
   1a224:	lsr	r3, r2, r3
   1a228:	tst	r3, #1
   1a22c:	beq	1a1ec <__assert_fail@plt+0x8c94>
   1a230:	ldr	fp, [sl, #124]	; 0x7c
   1a234:	ldr	r3, [sl, #128]	; 0x80
   1a238:	ldr	r2, [sl, #132]	; 0x84
   1a23c:	cmp	r3, fp
   1a240:	beq	1a2b4 <__assert_fail@plt+0x8d5c>
   1a244:	mov	r1, #24
   1a248:	mov	r0, #1
   1a24c:	str	r2, [sp, #4]
   1a250:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   1a254:	ldr	r2, [sp, #4]
   1a258:	ldr	r3, [sl, #124]	; 0x7c
   1a25c:	str	r0, [r2, fp, lsl #2]
   1a260:	ldr	r2, [sl, #132]	; 0x84
   1a264:	add	r1, r3, #1
   1a268:	ldr	r3, [r2, r3, lsl #2]
   1a26c:	cmp	r3, #0
   1a270:	beq	1a2ac <__assert_fail@plt+0x8d54>
   1a274:	str	r5, [r3, #4]
   1a278:	str	r1, [sl, #124]	; 0x7c
   1a27c:	str	r8, [r3]
   1a280:	ldr	fp, [r7]
   1a284:	cmp	r4, fp
   1a288:	blt	1a1f4 <__assert_fail@plt+0x8c9c>
   1a28c:	mov	r0, #0
   1a290:	add	sp, sp, #12
   1a294:	ldrd	r4, [sp]
   1a298:	ldrd	r6, [sp, #8]
   1a29c:	ldrd	r8, [sp, #16]
   1a2a0:	ldrd	sl, [sp, #24]
   1a2a4:	add	sp, sp, #32
   1a2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2ac:	mov	r0, #12
   1a2b0:	b	1a290 <__assert_fail@plt+0x8d38>
   1a2b4:	mov	r0, r2
   1a2b8:	lsl	r1, fp, #3
   1a2bc:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1a2c0:	subs	r2, r0, #0
   1a2c4:	lsl	r3, fp, #1
   1a2c8:	beq	1a2ac <__assert_fail@plt+0x8d54>
   1a2cc:	str	r3, [sl, #128]	; 0x80
   1a2d0:	str	r2, [sl, #132]	; 0x84
   1a2d4:	ldr	fp, [sl, #124]	; 0x7c
   1a2d8:	b	1a244 <__assert_fail@plt+0x8cec>
   1a2dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2e0:	mov	r5, r1
   1a2e4:	strd	r6, [sp, #8]
   1a2e8:	mov	r6, r0
   1a2ec:	strd	r8, [sp, #16]
   1a2f0:	mov	r8, r3
   1a2f4:	strd	sl, [sp, #24]
   1a2f8:	mov	sl, r2
   1a2fc:	str	lr, [sp, #32]
   1a300:	sub	sp, sp, #4
   1a304:	ldr	r9, [sp, #40]	; 0x28
   1a308:	ldr	ip, [sp, #48]	; 0x30
   1a30c:	ldr	r7, [sp, #44]	; 0x2c
   1a310:	tst	ip, #4194304	; 0x400000
   1a314:	beq	1a338 <__assert_fail@plt+0x8de0>
   1a318:	mov	r0, r7
   1a31c:	movw	r1, #58720	; 0xe560
   1a320:	movt	r1, #2
   1a324:	bl	111f8 <strcmp@plt>
   1a328:	cmp	r0, #0
   1a32c:	movweq	r7, #58712	; 0xe558
   1a330:	movteq	r7, #2
   1a334:	bne	1a43c <__assert_fail@plt+0x8ee4>
   1a338:	ldr	r4, [r8]
   1a33c:	ldr	r3, [r9]
   1a340:	ldr	fp, [sl]
   1a344:	cmp	r3, r4
   1a348:	beq	1a520 <__assert_fail@plt+0x8fc8>
   1a34c:	add	r3, r4, #1
   1a350:	mov	r0, r7
   1a354:	str	r3, [r8]
   1a358:	bl	111c8 <wctype@plt>
   1a35c:	movw	r1, #58736	; 0xe570
   1a360:	movt	r1, #2
   1a364:	str	r0, [fp, r4, lsl #2]
   1a368:	mov	r0, r7
   1a36c:	bl	111f8 <strcmp@plt>
   1a370:	subs	r4, r0, #0
   1a374:	beq	1a3f4 <__assert_fail@plt+0x8e9c>
   1a378:	movw	r1, #58744	; 0xe578
   1a37c:	movt	r1, #2
   1a380:	mov	r0, r7
   1a384:	bl	111f8 <strcmp@plt>
   1a388:	subs	r4, r0, #0
   1a38c:	bne	1a460 <__assert_fail@plt+0x8f08>
   1a390:	bl	113fc <__ctype_b_loc@plt>
   1a394:	ldr	r3, [r0]
   1a398:	cmp	r6, #0
   1a39c:	moveq	ip, #1
   1a3a0:	sub	r3, r3, #2
   1a3a4:	bne	1a648 <__assert_fail@plt+0x90f0>
   1a3a8:	ldrh	r2, [r3, #2]!
   1a3ac:	asr	r1, r4, #5
   1a3b0:	and	r0, r4, #31
   1a3b4:	add	r4, r4, #1
   1a3b8:	tst	r2, #2
   1a3bc:	beq	1a3cc <__assert_fail@plt+0x8e74>
   1a3c0:	ldr	r2, [r5, r1, lsl #2]
   1a3c4:	orr	r2, r2, ip, lsl r0
   1a3c8:	str	r2, [r5, r1, lsl #2]
   1a3cc:	cmp	r4, #256	; 0x100
   1a3d0:	bne	1a3a8 <__assert_fail@plt+0x8e50>
   1a3d4:	mov	r0, #0
   1a3d8:	add	sp, sp, #4
   1a3dc:	ldrd	r4, [sp]
   1a3e0:	ldrd	r6, [sp, #8]
   1a3e4:	ldrd	r8, [sp, #16]
   1a3e8:	ldrd	sl, [sp, #24]
   1a3ec:	add	sp, sp, #32
   1a3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3f4:	bl	113fc <__ctype_b_loc@plt>
   1a3f8:	ldr	r3, [r0]
   1a3fc:	cmp	r6, #0
   1a400:	moveq	lr, #1
   1a404:	sub	r3, r3, #2
   1a408:	bne	1a60c <__assert_fail@plt+0x90b4>
   1a40c:	ldrh	r0, [r3, #2]!
   1a410:	asr	r2, r4, #5
   1a414:	and	ip, r4, #31
   1a418:	add	r4, r4, #1
   1a41c:	tst	r0, #8
   1a420:	beq	1a430 <__assert_fail@plt+0x8ed8>
   1a424:	ldr	r1, [r5, r2, lsl #2]
   1a428:	orr	r1, r1, lr, lsl ip
   1a42c:	str	r1, [r5, r2, lsl #2]
   1a430:	cmp	r4, #256	; 0x100
   1a434:	bne	1a40c <__assert_fail@plt+0x8eb4>
   1a438:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a43c:	mov	r0, r7
   1a440:	movw	r1, #58728	; 0xe568
   1a444:	movt	r1, #2
   1a448:	bl	111f8 <strcmp@plt>
   1a44c:	cmp	r0, #0
   1a450:	movw	r3, #58712	; 0xe558
   1a454:	movt	r3, #2
   1a458:	moveq	r7, r3
   1a45c:	b	1a338 <__assert_fail@plt+0x8de0>
   1a460:	movw	r1, #58728	; 0xe568
   1a464:	movt	r1, #2
   1a468:	mov	r0, r7
   1a46c:	bl	111f8 <strcmp@plt>
   1a470:	subs	r4, r0, #0
   1a474:	beq	1a4d8 <__assert_fail@plt+0x8f80>
   1a478:	movw	r1, #58752	; 0xe580
   1a47c:	movt	r1, #2
   1a480:	mov	r0, r7
   1a484:	bl	111f8 <strcmp@plt>
   1a488:	subs	r4, r0, #0
   1a48c:	bne	1a54c <__assert_fail@plt+0x8ff4>
   1a490:	bl	113fc <__ctype_b_loc@plt>
   1a494:	ldr	r3, [r0]
   1a498:	cmp	r6, #0
   1a49c:	moveq	ip, #1
   1a4a0:	sub	r3, r3, #2
   1a4a4:	bne	1a824 <__assert_fail@plt+0x92cc>
   1a4a8:	ldrh	r2, [r3, #2]!
   1a4ac:	asr	r1, r4, #5
   1a4b0:	and	r0, r4, #31
   1a4b4:	add	r4, r4, #1
   1a4b8:	tst	r2, #8192	; 0x2000
   1a4bc:	beq	1a4cc <__assert_fail@plt+0x8f74>
   1a4c0:	ldr	r2, [r5, r1, lsl #2]
   1a4c4:	orr	r2, r2, ip, lsl r0
   1a4c8:	str	r2, [r5, r1, lsl #2]
   1a4cc:	cmp	r4, #256	; 0x100
   1a4d0:	bne	1a4a8 <__assert_fail@plt+0x8f50>
   1a4d4:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a4d8:	bl	113fc <__ctype_b_loc@plt>
   1a4dc:	ldr	r3, [r0]
   1a4e0:	cmp	r6, #0
   1a4e4:	moveq	ip, #1
   1a4e8:	sub	r3, r3, #2
   1a4ec:	bne	1a684 <__assert_fail@plt+0x912c>
   1a4f0:	ldrh	r2, [r3, #2]!
   1a4f4:	asr	r1, r4, #5
   1a4f8:	and	r0, r4, #31
   1a4fc:	add	r4, r4, #1
   1a500:	tst	r2, #512	; 0x200
   1a504:	beq	1a514 <__assert_fail@plt+0x8fbc>
   1a508:	ldr	r2, [r5, r1, lsl #2]
   1a50c:	orr	r2, r2, ip, lsl r0
   1a510:	str	r2, [r5, r1, lsl #2]
   1a514:	cmp	r4, #256	; 0x100
   1a518:	bne	1a4f0 <__assert_fail@plt+0x8f98>
   1a51c:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a520:	lsl	r4, r4, #1
   1a524:	mov	r0, fp
   1a528:	add	r4, r4, #1
   1a52c:	lsl	r1, r4, #2
   1a530:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1a534:	subs	fp, r0, #0
   1a538:	beq	1a780 <__assert_fail@plt+0x9228>
   1a53c:	str	fp, [sl]
   1a540:	str	r4, [r9]
   1a544:	ldr	r4, [r8]
   1a548:	b	1a34c <__assert_fail@plt+0x8df4>
   1a54c:	movw	r1, #58712	; 0xe558
   1a550:	movt	r1, #2
   1a554:	mov	r0, r7
   1a558:	bl	111f8 <strcmp@plt>
   1a55c:	subs	r4, r0, #0
   1a560:	beq	1a5c4 <__assert_fail@plt+0x906c>
   1a564:	movw	r1, #58760	; 0xe588
   1a568:	movt	r1, #2
   1a56c:	mov	r0, r7
   1a570:	bl	111f8 <strcmp@plt>
   1a574:	subs	r4, r0, #0
   1a578:	bne	1a6c0 <__assert_fail@plt+0x9168>
   1a57c:	bl	113fc <__ctype_b_loc@plt>
   1a580:	ldr	r3, [r0]
   1a584:	cmp	r6, #0
   1a588:	moveq	ip, #1
   1a58c:	sub	r3, r3, #2
   1a590:	bne	1a860 <__assert_fail@plt+0x9308>
   1a594:	ldrh	r1, [r3, #2]!
   1a598:	asr	r2, r4, #5
   1a59c:	and	r0, r4, #31
   1a5a0:	add	r4, r4, #1
   1a5a4:	tst	r1, #2048	; 0x800
   1a5a8:	beq	1a5b8 <__assert_fail@plt+0x9060>
   1a5ac:	ldr	r1, [r5, r2, lsl #2]
   1a5b0:	orr	r1, r1, ip, lsl r0
   1a5b4:	str	r1, [r5, r2, lsl #2]
   1a5b8:	cmp	r4, #256	; 0x100
   1a5bc:	bne	1a594 <__assert_fail@plt+0x903c>
   1a5c0:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a5c4:	bl	113fc <__ctype_b_loc@plt>
   1a5c8:	ldr	r3, [r0]
   1a5cc:	cmp	r6, #0
   1a5d0:	moveq	ip, #1
   1a5d4:	sub	r3, r3, #2
   1a5d8:	bne	1a7e8 <__assert_fail@plt+0x9290>
   1a5dc:	ldrh	r2, [r3, #2]!
   1a5e0:	asr	r1, r4, #5
   1a5e4:	and	r0, r4, #31
   1a5e8:	add	r4, r4, #1
   1a5ec:	tst	r2, #1024	; 0x400
   1a5f0:	beq	1a600 <__assert_fail@plt+0x90a8>
   1a5f4:	ldr	r2, [r5, r1, lsl #2]
   1a5f8:	orr	r2, r2, ip, lsl r0
   1a5fc:	str	r2, [r5, r1, lsl #2]
   1a600:	cmp	r4, #256	; 0x100
   1a604:	bne	1a5dc <__assert_fail@plt+0x9084>
   1a608:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a60c:	add	ip, r6, #256	; 0x100
   1a610:	mov	lr, #1
   1a614:	ldrh	r2, [r3, #2]!
   1a618:	tst	r2, #8
   1a61c:	beq	1a638 <__assert_fail@plt+0x90e0>
   1a620:	ldrb	r2, [r6]
   1a624:	asr	r0, r2, #5
   1a628:	and	r2, r2, #31
   1a62c:	ldr	r1, [r5, r0, lsl #2]
   1a630:	orr	r2, r1, lr, lsl r2
   1a634:	str	r2, [r5, r0, lsl #2]
   1a638:	add	r6, r6, #1
   1a63c:	cmp	ip, r6
   1a640:	bne	1a614 <__assert_fail@plt+0x90bc>
   1a644:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a648:	add	ip, r6, #256	; 0x100
   1a64c:	mov	lr, #1
   1a650:	ldrh	r2, [r3, #2]!
   1a654:	tst	r2, #2
   1a658:	beq	1a674 <__assert_fail@plt+0x911c>
   1a65c:	ldrb	r2, [r6]
   1a660:	asr	r0, r2, #5
   1a664:	and	r2, r2, #31
   1a668:	ldr	r1, [r5, r0, lsl #2]
   1a66c:	orr	r2, r1, lr, lsl r2
   1a670:	str	r2, [r5, r0, lsl #2]
   1a674:	add	r6, r6, #1
   1a678:	cmp	ip, r6
   1a67c:	bne	1a650 <__assert_fail@plt+0x90f8>
   1a680:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a684:	add	ip, r6, #256	; 0x100
   1a688:	mov	lr, #1
   1a68c:	ldrh	r2, [r3, #2]!
   1a690:	tst	r2, #512	; 0x200
   1a694:	beq	1a6b0 <__assert_fail@plt+0x9158>
   1a698:	ldrb	r2, [r6]
   1a69c:	asr	r0, r2, #5
   1a6a0:	and	r2, r2, #31
   1a6a4:	ldr	r1, [r5, r0, lsl #2]
   1a6a8:	orr	r2, r1, lr, lsl r2
   1a6ac:	str	r2, [r5, r0, lsl #2]
   1a6b0:	add	r6, r6, #1
   1a6b4:	cmp	ip, r6
   1a6b8:	bne	1a68c <__assert_fail@plt+0x9134>
   1a6bc:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a6c0:	movw	r1, #58768	; 0xe590
   1a6c4:	movt	r1, #2
   1a6c8:	mov	r0, r7
   1a6cc:	bl	111f8 <strcmp@plt>
   1a6d0:	subs	r4, r0, #0
   1a6d4:	bne	1a720 <__assert_fail@plt+0x91c8>
   1a6d8:	bl	113fc <__ctype_b_loc@plt>
   1a6dc:	ldr	r3, [r0]
   1a6e0:	cmp	r6, #0
   1a6e4:	moveq	ip, #1
   1a6e8:	sub	r3, r3, #2
   1a6ec:	bne	1aa70 <__assert_fail@plt+0x9518>
   1a6f0:	ldrh	r2, [r3, #2]!
   1a6f4:	asr	r1, r4, #5
   1a6f8:	and	r0, r4, #31
   1a6fc:	add	r4, r4, #1
   1a700:	tst	r2, #16384	; 0x4000
   1a704:	beq	1a714 <__assert_fail@plt+0x91bc>
   1a708:	ldr	r2, [r5, r1, lsl #2]
   1a70c:	orr	r2, r2, ip, lsl r0
   1a710:	str	r2, [r5, r1, lsl #2]
   1a714:	cmp	r4, #256	; 0x100
   1a718:	bne	1a6f0 <__assert_fail@plt+0x9198>
   1a71c:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a720:	movw	r1, #58720	; 0xe560
   1a724:	movt	r1, #2
   1a728:	mov	r0, r7
   1a72c:	bl	111f8 <strcmp@plt>
   1a730:	subs	r4, r0, #0
   1a734:	bne	1a788 <__assert_fail@plt+0x9230>
   1a738:	bl	113fc <__ctype_b_loc@plt>
   1a73c:	ldr	r3, [r0]
   1a740:	cmp	r6, #0
   1a744:	moveq	ip, #1
   1a748:	sub	r3, r3, #2
   1a74c:	bne	1aae8 <__assert_fail@plt+0x9590>
   1a750:	ldrh	r2, [r3, #2]!
   1a754:	asr	r1, r4, #5
   1a758:	and	r0, r4, #31
   1a75c:	add	r4, r4, #1
   1a760:	tst	r2, #256	; 0x100
   1a764:	beq	1a774 <__assert_fail@plt+0x921c>
   1a768:	ldr	r2, [r5, r1, lsl #2]
   1a76c:	orr	r2, r2, ip, lsl r0
   1a770:	str	r2, [r5, r1, lsl #2]
   1a774:	cmp	r4, #256	; 0x100
   1a778:	bne	1a750 <__assert_fail@plt+0x91f8>
   1a77c:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a780:	mov	r0, #12
   1a784:	b	1a3d8 <__assert_fail@plt+0x8e80>
   1a788:	movw	r1, #58776	; 0xe598
   1a78c:	movt	r1, #2
   1a790:	mov	r0, r7
   1a794:	bl	111f8 <strcmp@plt>
   1a798:	subs	r4, r0, #0
   1a79c:	bne	1a89c <__assert_fail@plt+0x9344>
   1a7a0:	bl	113fc <__ctype_b_loc@plt>
   1a7a4:	ldr	r3, [r0]
   1a7a8:	cmp	r6, #0
   1a7ac:	moveq	ip, #1
   1a7b0:	sub	r3, r3, #2
   1a7b4:	bne	1aaac <__assert_fail@plt+0x9554>
   1a7b8:	ldrh	r2, [r3, #2]!
   1a7bc:	asr	r1, r4, #5
   1a7c0:	and	r0, r4, #31
   1a7c4:	add	r4, r4, #1
   1a7c8:	tst	r2, #1
   1a7cc:	beq	1a7dc <__assert_fail@plt+0x9284>
   1a7d0:	ldr	r2, [r5, r1, lsl #2]
   1a7d4:	orr	r2, r2, ip, lsl r0
   1a7d8:	str	r2, [r5, r1, lsl #2]
   1a7dc:	cmp	r4, #256	; 0x100
   1a7e0:	bne	1a7b8 <__assert_fail@plt+0x9260>
   1a7e4:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a7e8:	add	ip, r6, #256	; 0x100
   1a7ec:	mov	lr, #1
   1a7f0:	ldrh	r2, [r3, #2]!
   1a7f4:	tst	r2, #1024	; 0x400
   1a7f8:	beq	1a814 <__assert_fail@plt+0x92bc>
   1a7fc:	ldrb	r2, [r6]
   1a800:	asr	r0, r2, #5
   1a804:	and	r2, r2, #31
   1a808:	ldr	r1, [r5, r0, lsl #2]
   1a80c:	orr	r2, r1, lr, lsl r2
   1a810:	str	r2, [r5, r0, lsl #2]
   1a814:	add	r6, r6, #1
   1a818:	cmp	ip, r6
   1a81c:	bne	1a7f0 <__assert_fail@plt+0x9298>
   1a820:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a824:	add	ip, r6, #256	; 0x100
   1a828:	mov	lr, #1
   1a82c:	ldrh	r2, [r3, #2]!
   1a830:	tst	r2, #8192	; 0x2000
   1a834:	beq	1a850 <__assert_fail@plt+0x92f8>
   1a838:	ldrb	r2, [r6]
   1a83c:	asr	r0, r2, #5
   1a840:	and	r2, r2, #31
   1a844:	ldr	r1, [r5, r0, lsl #2]
   1a848:	orr	r2, r1, lr, lsl r2
   1a84c:	str	r2, [r5, r0, lsl #2]
   1a850:	add	r6, r6, #1
   1a854:	cmp	ip, r6
   1a858:	bne	1a82c <__assert_fail@plt+0x92d4>
   1a85c:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a860:	add	r1, r6, #256	; 0x100
   1a864:	mov	lr, #1
   1a868:	ldrh	r2, [r3, #2]!
   1a86c:	tst	r2, #2048	; 0x800
   1a870:	beq	1a88c <__assert_fail@plt+0x9334>
   1a874:	ldrb	r2, [r6]
   1a878:	asr	ip, r2, #5
   1a87c:	and	r2, r2, #31
   1a880:	ldr	r0, [r5, ip, lsl #2]
   1a884:	orr	r2, r0, lr, lsl r2
   1a888:	str	r2, [r5, ip, lsl #2]
   1a88c:	add	r6, r6, #1
   1a890:	cmp	r1, r6
   1a894:	bne	1a868 <__assert_fail@plt+0x9310>
   1a898:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a89c:	movw	r1, #58784	; 0xe5a0
   1a8a0:	movt	r1, #2
   1a8a4:	mov	r0, r7
   1a8a8:	bl	111f8 <strcmp@plt>
   1a8ac:	subs	r4, r0, #0
   1a8b0:	bne	1a938 <__assert_fail@plt+0x93e0>
   1a8b4:	bl	113fc <__ctype_b_loc@plt>
   1a8b8:	ldr	r3, [r0]
   1a8bc:	cmp	r6, #0
   1a8c0:	moveq	r0, #1
   1a8c4:	sub	r3, r3, #2
   1a8c8:	bne	1a8fc <__assert_fail@plt+0x93a4>
   1a8cc:	ldrsh	r2, [r3, #2]!
   1a8d0:	asr	r1, r4, #5
   1a8d4:	and	ip, r4, #31
   1a8d8:	add	r4, r4, #1
   1a8dc:	cmp	r2, #0
   1a8e0:	bge	1a8f0 <__assert_fail@plt+0x9398>
   1a8e4:	ldr	r2, [r5, r1, lsl #2]
   1a8e8:	orr	r2, r2, r0, lsl ip
   1a8ec:	str	r2, [r5, r1, lsl #2]
   1a8f0:	cmp	r4, #256	; 0x100
   1a8f4:	bne	1a8cc <__assert_fail@plt+0x9374>
   1a8f8:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a8fc:	add	lr, r6, #256	; 0x100
   1a900:	mov	ip, #1
   1a904:	ldrsh	r2, [r3, #2]!
   1a908:	cmp	r2, #0
   1a90c:	bge	1a928 <__assert_fail@plt+0x93d0>
   1a910:	ldrb	r2, [r6]
   1a914:	asr	r0, r2, #5
   1a918:	and	r2, r2, #31
   1a91c:	ldr	r1, [r5, r0, lsl #2]
   1a920:	orr	r2, r1, ip, lsl r2
   1a924:	str	r2, [r5, r0, lsl #2]
   1a928:	add	r6, r6, #1
   1a92c:	cmp	lr, r6
   1a930:	bne	1a904 <__assert_fail@plt+0x93ac>
   1a934:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a938:	movw	r1, #58792	; 0xe5a8
   1a93c:	movt	r1, #2
   1a940:	mov	r0, r7
   1a944:	bl	111f8 <strcmp@plt>
   1a948:	subs	r4, r0, #0
   1a94c:	bne	1a9d4 <__assert_fail@plt+0x947c>
   1a950:	bl	113fc <__ctype_b_loc@plt>
   1a954:	ldr	r3, [r0]
   1a958:	cmp	r6, #0
   1a95c:	moveq	r0, #1
   1a960:	sub	r3, r3, #2
   1a964:	bne	1a998 <__assert_fail@plt+0x9440>
   1a968:	ldrh	r2, [r3, #2]!
   1a96c:	asr	r1, r4, #5
   1a970:	and	ip, r4, #31
   1a974:	add	r4, r4, #1
   1a978:	tst	r2, #4
   1a97c:	beq	1a98c <__assert_fail@plt+0x9434>
   1a980:	ldr	r2, [r5, r1, lsl #2]
   1a984:	orr	r2, r2, r0, lsl ip
   1a988:	str	r2, [r5, r1, lsl #2]
   1a98c:	cmp	r4, #256	; 0x100
   1a990:	bne	1a968 <__assert_fail@plt+0x9410>
   1a994:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a998:	add	lr, r6, #256	; 0x100
   1a99c:	mov	ip, #1
   1a9a0:	ldrh	r2, [r3, #2]!
   1a9a4:	tst	r2, #4
   1a9a8:	beq	1a9c4 <__assert_fail@plt+0x946c>
   1a9ac:	ldrb	r2, [r6]
   1a9b0:	asr	r0, r2, #5
   1a9b4:	and	r2, r2, #31
   1a9b8:	ldr	r1, [r5, r0, lsl #2]
   1a9bc:	orr	r2, r1, ip, lsl r2
   1a9c0:	str	r2, [r5, r0, lsl #2]
   1a9c4:	add	r6, r6, #1
   1a9c8:	cmp	lr, r6
   1a9cc:	bne	1a9a0 <__assert_fail@plt+0x9448>
   1a9d0:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1a9d4:	mov	r0, r7
   1a9d8:	movw	r1, #58800	; 0xe5b0
   1a9dc:	movt	r1, #2
   1a9e0:	bl	111f8 <strcmp@plt>
   1a9e4:	subs	r4, r0, #0
   1a9e8:	movne	r0, #4
   1a9ec:	bne	1a3d8 <__assert_fail@plt+0x8e80>
   1a9f0:	bl	113fc <__ctype_b_loc@plt>
   1a9f4:	ldr	r3, [r0]
   1a9f8:	cmp	r6, #0
   1a9fc:	moveq	r0, #1
   1aa00:	sub	r3, r3, #2
   1aa04:	bne	1aa38 <__assert_fail@plt+0x94e0>
   1aa08:	ldrh	r2, [r3, #2]!
   1aa0c:	asr	r1, r4, #5
   1aa10:	and	ip, r4, #31
   1aa14:	add	r4, r4, #1
   1aa18:	tst	r2, #4096	; 0x1000
   1aa1c:	beq	1aa2c <__assert_fail@plt+0x94d4>
   1aa20:	ldr	r2, [r5, r1, lsl #2]
   1aa24:	orr	r2, r2, r0, lsl ip
   1aa28:	str	r2, [r5, r1, lsl #2]
   1aa2c:	cmp	r4, #256	; 0x100
   1aa30:	bne	1aa08 <__assert_fail@plt+0x94b0>
   1aa34:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1aa38:	mov	ip, #1
   1aa3c:	ldrh	r2, [r3, #2]!
   1aa40:	tst	r2, #4096	; 0x1000
   1aa44:	beq	1aa60 <__assert_fail@plt+0x9508>
   1aa48:	ldrb	r2, [r6, r4]
   1aa4c:	asr	r0, r2, #5
   1aa50:	and	r2, r2, #31
   1aa54:	ldr	r1, [r5, r0, lsl #2]
   1aa58:	orr	r2, r1, ip, lsl r2
   1aa5c:	str	r2, [r5, r0, lsl #2]
   1aa60:	add	r4, r4, #1
   1aa64:	cmp	r4, #256	; 0x100
   1aa68:	bne	1aa3c <__assert_fail@plt+0x94e4>
   1aa6c:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1aa70:	add	lr, r6, #256	; 0x100
   1aa74:	mov	ip, #1
   1aa78:	ldrh	r2, [r3, #2]!
   1aa7c:	tst	r2, #16384	; 0x4000
   1aa80:	beq	1aa9c <__assert_fail@plt+0x9544>
   1aa84:	ldrb	r2, [r6]
   1aa88:	asr	r0, r2, #5
   1aa8c:	and	r2, r2, #31
   1aa90:	ldr	r1, [r5, r0, lsl #2]
   1aa94:	orr	r2, r1, ip, lsl r2
   1aa98:	str	r2, [r5, r0, lsl #2]
   1aa9c:	add	r6, r6, #1
   1aaa0:	cmp	lr, r6
   1aaa4:	bne	1aa78 <__assert_fail@plt+0x9520>
   1aaa8:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1aaac:	add	lr, r6, #256	; 0x100
   1aab0:	mov	ip, #1
   1aab4:	ldrh	r2, [r3, #2]!
   1aab8:	tst	r2, #1
   1aabc:	beq	1aad8 <__assert_fail@plt+0x9580>
   1aac0:	ldrb	r2, [r6]
   1aac4:	asr	r0, r2, #5
   1aac8:	and	r2, r2, #31
   1aacc:	ldr	r1, [r5, r0, lsl #2]
   1aad0:	orr	r2, r1, ip, lsl r2
   1aad4:	str	r2, [r5, r0, lsl #2]
   1aad8:	add	r6, r6, #1
   1aadc:	cmp	lr, r6
   1aae0:	bne	1aab4 <__assert_fail@plt+0x955c>
   1aae4:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1aae8:	add	lr, r6, #256	; 0x100
   1aaec:	mov	ip, #1
   1aaf0:	ldrh	r2, [r3, #2]!
   1aaf4:	tst	r2, #256	; 0x100
   1aaf8:	beq	1ab14 <__assert_fail@plt+0x95bc>
   1aafc:	ldrb	r2, [r6]
   1ab00:	asr	r0, r2, #5
   1ab04:	and	r2, r2, #31
   1ab08:	ldr	r1, [r5, r0, lsl #2]
   1ab0c:	orr	r2, r1, ip, lsl r2
   1ab10:	str	r2, [r5, r0, lsl #2]
   1ab14:	add	r6, r6, #1
   1ab18:	cmp	lr, r6
   1ab1c:	bne	1aaf0 <__assert_fail@plt+0x9598>
   1ab20:	b	1a3d4 <__assert_fail@plt+0x8e7c>
   1ab24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab28:	strd	r6, [sp, #8]
   1ab2c:	ldr	r6, [r0]
   1ab30:	strd	r8, [sp, #16]
   1ab34:	strd	sl, [sp, #24]
   1ab38:	str	lr, [sp, #32]
   1ab3c:	sub	sp, sp, #316	; 0x13c
   1ab40:	ldr	ip, [r6, #92]	; 0x5c
   1ab44:	cmp	ip, #1
   1ab48:	ldreq	ip, [r0, #12]
   1ab4c:	movne	ip, #0
   1ab50:	ubfxeq	ip, ip, #22, #1
   1ab54:	str	ip, [sp, #12]
   1ab58:	ldr	ip, [r1]
   1ab5c:	cmp	ip, #0
   1ab60:	ble	1ac44 <__assert_fail@plt+0x96ec>
   1ab64:	mov	r4, r3
   1ab68:	mov	r3, #255	; 0xff
   1ab6c:	movt	r3, #32
   1ab70:	mov	r5, #0
   1ab74:	str	r2, [sp, #4]
   1ab78:	str	r1, [sp, #20]
   1ab7c:	str	r0, [sp, #24]
   1ab80:	str	r3, [sp, #32]
   1ab84:	mov	r3, #1
   1ab88:	movt	r3, #32
   1ab8c:	str	r3, [sp, #36]	; 0x24
   1ab90:	b	1abc4 <__assert_fail@plt+0x966c>
   1ab94:	cmp	r7, #3
   1ab98:	beq	1ade8 <__assert_fail@plt+0x9890>
   1ab9c:	cmp	r7, #6
   1aba0:	beq	1ac60 <__assert_fail@plt+0x9708>
   1aba4:	and	r3, r7, #253	; 0xfd
   1aba8:	cmp	r3, #5
   1abac:	beq	1afa0 <__assert_fail@plt+0x9a48>
   1abb0:	cmp	r7, #2
   1abb4:	beq	1afbc <__assert_fail@plt+0x9a64>
   1abb8:	add	r5, r5, #1
   1abbc:	cmp	r5, ip
   1abc0:	bge	1ac44 <__assert_fail@plt+0x96ec>
   1abc4:	ldr	r3, [sp, #4]
   1abc8:	ldr	r1, [r6]
   1abcc:	ldr	r3, [r3]
   1abd0:	ldr	r8, [r3, r5, lsl #2]
   1abd4:	lsl	r3, r8, #3
   1abd8:	add	r2, r1, r3
   1abdc:	ldrb	r7, [r2, #4]
   1abe0:	cmp	r7, #1
   1abe4:	bne	1ab94 <__assert_fail@plt+0x963c>
   1abe8:	ldr	r2, [sp, #12]
   1abec:	ldrb	r9, [r1, r8, lsl #3]
   1abf0:	cmp	r2, #0
   1abf4:	strb	r7, [r4, r9]
   1abf8:	beq	1ac14 <__assert_fail@plt+0x96bc>
   1abfc:	str	r3, [sp, #8]
   1ac00:	bl	113cc <__ctype_tolower_loc@plt>
   1ac04:	ldr	r2, [r0]
   1ac08:	ldr	r3, [sp, #8]
   1ac0c:	ldr	r2, [r2, r9, lsl #2]
   1ac10:	strb	r7, [r4, r2]
   1ac14:	ldr	r2, [sp, #24]
   1ac18:	ldr	r2, [r2, #12]
   1ac1c:	tst	r2, #4194304	; 0x400000
   1ac20:	beq	1ac30 <__assert_fail@plt+0x96d8>
   1ac24:	ldr	r2, [r6, #92]	; 0x5c
   1ac28:	cmp	r2, #1
   1ac2c:	bgt	1aec0 <__assert_fail@plt+0x9968>
   1ac30:	ldr	r3, [sp, #20]
   1ac34:	add	r5, r5, #1
   1ac38:	ldr	ip, [r3]
   1ac3c:	cmp	r5, ip
   1ac40:	blt	1abc4 <__assert_fail@plt+0x966c>
   1ac44:	add	sp, sp, #316	; 0x13c
   1ac48:	ldrd	r4, [sp]
   1ac4c:	ldrd	r6, [sp, #8]
   1ac50:	ldrd	r8, [sp, #16]
   1ac54:	ldrd	sl, [sp, #24]
   1ac58:	add	sp, sp, #32
   1ac5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac60:	ldr	r1, [r6, #92]	; 0x5c
   1ac64:	ldr	fp, [r2]
   1ac68:	cmp	r1, #1
   1ac6c:	ble	1ac94 <__assert_fail@plt+0x973c>
   1ac70:	ldr	r2, [fp, #36]	; 0x24
   1ac74:	cmp	r2, #0
   1ac78:	bne	1ad74 <__assert_fail@plt+0x981c>
   1ac7c:	ldrb	r2, [fp, #16]
   1ac80:	tst	r2, #1
   1ac84:	bne	1ad74 <__assert_fail@plt+0x981c>
   1ac88:	ldr	r2, [fp, #32]
   1ac8c:	cmp	r2, #0
   1ac90:	bne	1ad74 <__assert_fail@plt+0x981c>
   1ac94:	ldr	r2, [fp, #20]
   1ac98:	cmp	r2, #0
   1ac9c:	ble	1abb8 <__assert_fail@plt+0x9660>
   1aca0:	str	r5, [sp, #28]
   1aca4:	mov	r5, fp
   1aca8:	mov	r7, #0
   1acac:	ldr	fp, [sp, #24]
   1acb0:	add	r8, sp, #56	; 0x38
   1acb4:	add	r9, sp, #48	; 0x30
   1acb8:	mov	sl, #1
   1acbc:	mov	r2, #0
   1acc0:	mov	r3, #0
   1acc4:	mov	r0, r8
   1acc8:	strd	r2, [r9]
   1accc:	lsl	r3, r7, #2
   1acd0:	mov	r2, r9
   1acd4:	ldr	r1, [r5]
   1acd8:	str	r3, [sp, #8]
   1acdc:	ldr	r1, [r1, r7, lsl #2]
   1ace0:	add	r7, r7, #1
   1ace4:	bl	111e0 <wcrtomb@plt>
   1ace8:	cmn	r0, #1
   1acec:	beq	1ad1c <__assert_fail@plt+0x97c4>
   1acf0:	ldr	r3, [sp, #12]
   1acf4:	ldrb	r2, [sp, #56]	; 0x38
   1acf8:	cmp	r3, #0
   1acfc:	strb	sl, [r4, r2]
   1ad00:	str	r2, [sp, #16]
   1ad04:	beq	1ad1c <__assert_fail@plt+0x97c4>
   1ad08:	bl	113cc <__ctype_tolower_loc@plt>
   1ad0c:	ldr	r1, [r0]
   1ad10:	ldr	r2, [sp, #16]
   1ad14:	ldr	r2, [r1, r2, lsl #2]
   1ad18:	strb	sl, [r4, r2]
   1ad1c:	ldr	r2, [fp, #12]
   1ad20:	tst	r2, #4194304	; 0x400000
   1ad24:	beq	1ad60 <__assert_fail@plt+0x9808>
   1ad28:	ldr	r2, [r6, #92]	; 0x5c
   1ad2c:	cmp	r2, #1
   1ad30:	ble	1ad60 <__assert_fail@plt+0x9808>
   1ad34:	ldr	r2, [r5]
   1ad38:	ldr	r3, [sp, #8]
   1ad3c:	ldr	r0, [r2, r3]
   1ad40:	bl	11288 <towlower@plt>
   1ad44:	mov	r1, r0
   1ad48:	mov	r2, r9
   1ad4c:	mov	r0, r8
   1ad50:	bl	111e0 <wcrtomb@plt>
   1ad54:	cmn	r0, #1
   1ad58:	ldrbne	r2, [sp, #56]	; 0x38
   1ad5c:	strbne	sl, [r4, r2]
   1ad60:	ldr	r2, [r5, #20]
   1ad64:	cmp	r7, r2
   1ad68:	blt	1acbc <__assert_fail@plt+0x9764>
   1ad6c:	ldr	r5, [sp, #28]
   1ad70:	b	1ac30 <__assert_fail@plt+0x96d8>
   1ad74:	mov	r3, #0
   1ad78:	add	r8, sp, #56	; 0x38
   1ad7c:	add	r9, sp, #48	; 0x30
   1ad80:	mov	r7, #1
   1ad84:	strb	r3, [sp, #48]	; 0x30
   1ad88:	mov	r0, #0
   1ad8c:	mov	r1, #0
   1ad90:	mov	r3, r8
   1ad94:	mov	r2, #1
   1ad98:	strd	r0, [r8]
   1ad9c:	mov	r1, r9
   1ada0:	bl	2d174 <__assert_fail@plt+0x1bc1c>
   1ada4:	cmn	r0, #2
   1ada8:	beq	1adc8 <__assert_fail@plt+0x9870>
   1adac:	ldrb	r3, [sp, #48]	; 0x30
   1adb0:	add	r3, r3, #1
   1adb4:	uxtb	r3, r3
   1adb8:	cmp	r3, #0
   1adbc:	strb	r3, [sp, #48]	; 0x30
   1adc0:	bne	1ad88 <__assert_fail@plt+0x9830>
   1adc4:	b	1ac30 <__assert_fail@plt+0x96d8>
   1adc8:	ldrb	r2, [sp, #48]	; 0x30
   1adcc:	add	r3, r2, #1
   1add0:	strb	r7, [r4, r2]
   1add4:	uxtb	r3, r3
   1add8:	cmp	r3, #0
   1addc:	strb	r3, [sp, #48]	; 0x30
   1ade0:	bne	1ad88 <__assert_fail@plt+0x9830>
   1ade4:	b	1ac30 <__assert_fail@plt+0x96d8>
   1ade8:	mov	sl, #0
   1adec:	mov	fp, #32
   1adf0:	str	r3, [sp, #8]
   1adf4:	str	r6, [sp, #16]
   1adf8:	mov	r6, fp
   1adfc:	mov	fp, sl
   1ae00:	str	r5, [sp, #28]
   1ae04:	mov	r5, sl
   1ae08:	mov	r9, #1
   1ae0c:	ldr	sl, [sp, #12]
   1ae10:	mov	r0, r1
   1ae14:	cmp	sl, #0
   1ae18:	lsl	r7, fp, #3
   1ae1c:	ldr	r3, [sp, #8]
   1ae20:	ldr	r0, [r0, r3]
   1ae24:	ldr	r8, [r0, fp]
   1ae28:	bne	1ae6c <__assert_fail@plt+0x9914>
   1ae2c:	mov	r0, sl
   1ae30:	sub	lr, r4, r5
   1ae34:	lsr	r3, r8, r0
   1ae38:	tst	r3, #1
   1ae3c:	strbne	r9, [lr, r0]
   1ae40:	add	r0, r0, #1
   1ae44:	cmp	r0, #32
   1ae48:	bne	1ae34 <__assert_fail@plt+0x98dc>
   1ae4c:	add	fp, fp, #4
   1ae50:	add	r6, r6, #32
   1ae54:	cmp	fp, #32
   1ae58:	sub	r5, r5, #32
   1ae5c:	beq	1aeb4 <__assert_fail@plt+0x995c>
   1ae60:	ldr	r3, [sp, #16]
   1ae64:	ldr	r0, [r3]
   1ae68:	b	1ae14 <__assert_fail@plt+0x98bc>
   1ae6c:	add	r3, r5, r7
   1ae70:	add	r2, r7, #128	; 0x80
   1ae74:	lsr	r3, r8, r3
   1ae78:	add	r1, r4, r7
   1ae7c:	tst	r3, #1
   1ae80:	beq	1aea4 <__assert_fail@plt+0x994c>
   1ae84:	cmp	r2, #384	; 0x180
   1ae88:	strb	r9, [r4, r7]
   1ae8c:	bcs	1aea0 <__assert_fail@plt+0x9948>
   1ae90:	bl	113cc <__ctype_tolower_loc@plt>
   1ae94:	ldr	r3, [r0]
   1ae98:	ldr	r1, [r3, r7, lsl #2]
   1ae9c:	add	r1, r4, r1
   1aea0:	strb	r9, [r1]
   1aea4:	add	r7, r7, #1
   1aea8:	cmp	r7, r6
   1aeac:	bne	1ae6c <__assert_fail@plt+0x9914>
   1aeb0:	b	1ae4c <__assert_fail@plt+0x98f4>
   1aeb4:	ldr	r6, [sp, #16]
   1aeb8:	ldr	r5, [sp, #28]
   1aebc:	b	1ac30 <__assert_fail@plt+0x96d8>
   1aec0:	ldr	r1, [r6]
   1aec4:	add	r2, r8, #1
   1aec8:	ldrb	r0, [r1, r8, lsl #3]
   1aecc:	strb	r0, [sp, #56]	; 0x38
   1aed0:	ldr	r0, [r6, #8]
   1aed4:	cmp	r2, r0
   1aed8:	bcs	1afe0 <__assert_fail@plt+0x9a88>
   1aedc:	add	r3, r3, #8
   1aee0:	ldr	r0, [sp, #32]
   1aee4:	add	r3, r1, r3
   1aee8:	ldr	r1, [r3, #4]
   1aeec:	and	r1, r1, r0
   1aef0:	ldr	r0, [sp, #36]	; 0x24
   1aef4:	cmp	r1, r0
   1aef8:	bne	1afe0 <__assert_fail@plt+0x9a88>
   1aefc:	mov	ip, r0
   1af00:	add	r7, sp, #57	; 0x39
   1af04:	ldr	r0, [sp, #32]
   1af08:	b	1af24 <__assert_fail@plt+0x99cc>
   1af0c:	ldr	r3, [r6]
   1af10:	add	r3, r3, r2, lsl #3
   1af14:	ldr	r1, [r3, #4]
   1af18:	and	r1, r1, r0
   1af1c:	cmp	r1, ip
   1af20:	bne	1af3c <__assert_fail@plt+0x99e4>
   1af24:	ldrb	r3, [r3]
   1af28:	add	r2, r2, #1
   1af2c:	strb	r3, [r7], #1
   1af30:	ldr	r3, [r6, #8]
   1af34:	cmp	r3, r2
   1af38:	bhi	1af0c <__assert_fail@plt+0x99b4>
   1af3c:	add	r8, sp, #56	; 0x38
   1af40:	sub	r7, r7, r8
   1af44:	add	r9, sp, #48	; 0x30
   1af48:	mov	sl, #0
   1af4c:	mov	fp, #0
   1af50:	mov	r2, r7
   1af54:	mov	r3, r9
   1af58:	mov	r1, r8
   1af5c:	add	r0, sp, #44	; 0x2c
   1af60:	strd	sl, [sp, #48]	; 0x30
   1af64:	bl	2d174 <__assert_fail@plt+0x1bc1c>
   1af68:	cmp	r0, r7
   1af6c:	bne	1ac30 <__assert_fail@plt+0x96d8>
   1af70:	ldr	r0, [sp, #44]	; 0x2c
   1af74:	bl	11288 <towlower@plt>
   1af78:	mov	r1, r0
   1af7c:	mov	r2, r9
   1af80:	mov	r0, r8
   1af84:	bl	111e0 <wcrtomb@plt>
   1af88:	cmn	r0, #1
   1af8c:	beq	1ac30 <__assert_fail@plt+0x96d8>
   1af90:	ldrb	r3, [sp, #56]	; 0x38
   1af94:	mov	r2, #1
   1af98:	strb	r2, [r4, r3]
   1af9c:	b	1ac30 <__assert_fail@plt+0x96d8>
   1afa0:	mov	r0, r4
   1afa4:	mov	r2, #256	; 0x100
   1afa8:	mov	r1, #1
   1afac:	bl	1145c <memset@plt>
   1afb0:	cmp	r7, #2
   1afb4:	bne	1ac44 <__assert_fail@plt+0x96ec>
   1afb8:	b	1afcc <__assert_fail@plt+0x9a74>
   1afbc:	mov	r0, r4
   1afc0:	mov	r2, #256	; 0x100
   1afc4:	mov	r1, #1
   1afc8:	bl	1145c <memset@plt>
   1afcc:	ldr	r2, [sp, #24]
   1afd0:	ldrb	r3, [r2, #28]
   1afd4:	orr	r3, r3, #1
   1afd8:	strb	r3, [r2, #28]
   1afdc:	b	1ac44 <__assert_fail@plt+0x96ec>
   1afe0:	add	r8, sp, #56	; 0x38
   1afe4:	b	1af44 <__assert_fail@plt+0x99ec>
   1afe8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1afec:	ldr	r3, [r1, #56]	; 0x38
   1aff0:	strd	r6, [sp, #8]
   1aff4:	mov	r6, r0
   1aff8:	ldr	r7, [r1, #40]	; 0x28
   1affc:	strd	r8, [sp, #16]
   1b000:	str	sl, [sp, #24]
   1b004:	str	lr, [sp, #28]
   1b008:	sub	sp, sp, #8
   1b00c:	cmp	r3, r7
   1b010:	movle	r3, #2
   1b014:	movle	r0, #0
   1b018:	strble	r3, [r6, #4]
   1b01c:	ble	1b2e4 <__assert_fail@plt+0x9d8c>
   1b020:	ldr	sl, [r1, #4]
   1b024:	mov	r8, r2
   1b028:	mov	r5, r1
   1b02c:	ldrb	r3, [r6, #6]
   1b030:	ldr	r2, [r1, #80]	; 0x50
   1b034:	ldrb	r4, [sl, r7]
   1b038:	bic	r3, r3, #96	; 0x60
   1b03c:	cmp	r2, #1
   1b040:	strb	r4, [r6]
   1b044:	strb	r3, [r6, #6]
   1b048:	ble	1b300 <__assert_fail@plt+0x9da8>
   1b04c:	ldr	r3, [r1, #28]
   1b050:	cmp	r7, r3
   1b054:	beq	1b068 <__assert_fail@plt+0x9b10>
   1b058:	ldr	r3, [r1, #8]
   1b05c:	ldr	r3, [r3, r7, lsl #2]
   1b060:	cmn	r3, #1
   1b064:	beq	1b548 <__assert_fail@plt+0x9ff0>
   1b068:	cmp	r4, #92	; 0x5c
   1b06c:	beq	1b33c <__assert_fail@plt+0x9de4>
   1b070:	ldr	r3, [r5, #8]
   1b074:	mov	r2, #1
   1b078:	strb	r2, [r6, #4]
   1b07c:	ldr	r9, [r3, r7, lsl #2]
   1b080:	mov	r0, r9
   1b084:	sub	r9, r9, #95	; 0x5f
   1b088:	bl	11438 <iswalnum@plt>
   1b08c:	ldrb	r3, [r6, #6]
   1b090:	clz	r9, r9
   1b094:	cmp	r0, #0
   1b098:	lsr	r9, r9, #5
   1b09c:	movne	r9, #1
   1b0a0:	bfi	r3, r9, #6, #1
   1b0a4:	strb	r3, [r6, #6]
   1b0a8:	sub	r4, r4, #10
   1b0ac:	cmp	r4, #115	; 0x73
   1b0b0:	ldrls	pc, [pc, r4, lsl #2]
   1b0b4:	b	1b540 <__assert_fail@plt+0x9fe8>
   1b0b8:	andeq	fp, r1, r0, lsr #13
   1b0bc:	andeq	fp, r1, r0, asr #10
   1b0c0:	andeq	fp, r1, r0, asr #10
   1b0c4:	andeq	fp, r1, r0, asr #10
   1b0c8:	andeq	fp, r1, r0, asr #10
   1b0cc:	andeq	fp, r1, r0, asr #10
   1b0d0:	andeq	fp, r1, r0, asr #10
   1b0d4:	andeq	fp, r1, r0, asr #10
   1b0d8:	andeq	fp, r1, r0, asr #10
   1b0dc:	andeq	fp, r1, r0, asr #10
   1b0e0:	andeq	fp, r1, r0, asr #10
   1b0e4:	andeq	fp, r1, r0, asr #10
   1b0e8:	andeq	fp, r1, r0, asr #10
   1b0ec:	andeq	fp, r1, r0, asr #10
   1b0f0:	andeq	fp, r1, r0, asr #10
   1b0f4:	andeq	fp, r1, r0, asr #10
   1b0f8:	andeq	fp, r1, r0, asr #10
   1b0fc:	andeq	fp, r1, r0, asr #10
   1b100:	andeq	fp, r1, r0, asr #10
   1b104:	andeq	fp, r1, r0, asr #10
   1b108:	andeq	fp, r1, r0, asr #10
   1b10c:	andeq	fp, r1, r0, asr #10
   1b110:	andeq	fp, r1, r0, asr #10
   1b114:	andeq	fp, r1, r0, asr #10
   1b118:	andeq	fp, r1, r0, asr #10
   1b11c:	andeq	fp, r1, r0, asr #10
   1b120:	andeq	fp, r1, r8, lsl #5
   1b124:	andeq	fp, r1, r0, asr #10
   1b128:	andeq	fp, r1, r0, asr #10
   1b12c:	andeq	fp, r1, r0, asr #10
   1b130:	andeq	fp, r1, ip, lsl r6
   1b134:	andeq	fp, r1, r4, lsr r6
   1b138:	andeq	fp, r1, ip, lsl #12
   1b13c:	andeq	fp, r1, ip, asr #12
   1b140:	andeq	fp, r1, r0, asr #10
   1b144:	andeq	fp, r1, r0, asr #10
   1b148:	muleq	r1, r4, r5
   1b14c:	andeq	fp, r1, r0, asr #10
   1b150:	andeq	fp, r1, r0, asr #10
   1b154:	andeq	fp, r1, r0, asr #10
   1b158:	andeq	fp, r1, r0, asr #10
   1b15c:	andeq	fp, r1, r0, asr #10
   1b160:	andeq	fp, r1, r0, asr #10
   1b164:	andeq	fp, r1, r0, asr #10
   1b168:	andeq	fp, r1, r0, asr #10
   1b16c:	andeq	fp, r1, r0, asr #10
   1b170:	andeq	fp, r1, r0, asr #10
   1b174:	andeq	fp, r1, r0, asr #10
   1b178:	andeq	fp, r1, r0, asr #10
   1b17c:	andeq	fp, r1, r0, asr #10
   1b180:	andeq	fp, r1, r0, asr #10
   1b184:	andeq	fp, r1, r0, asr #10
   1b188:	andeq	fp, r1, r0, asr #10
   1b18c:	andeq	fp, r1, r4, lsr #11
   1b190:	andeq	fp, r1, r0, asr #10
   1b194:	andeq	fp, r1, r0, asr #10
   1b198:	andeq	fp, r1, r0, asr #10
   1b19c:	andeq	fp, r1, r0, asr #10
   1b1a0:	andeq	fp, r1, r0, asr #10
   1b1a4:	andeq	fp, r1, r0, asr #10
   1b1a8:	andeq	fp, r1, r0, asr #10
   1b1ac:	andeq	fp, r1, r0, asr #10
   1b1b0:	andeq	fp, r1, r0, asr #10
   1b1b4:	andeq	fp, r1, r0, asr #10
   1b1b8:	andeq	fp, r1, r0, asr #10
   1b1bc:	andeq	fp, r1, r0, asr #10
   1b1c0:	andeq	fp, r1, r0, asr #10
   1b1c4:	andeq	fp, r1, r0, asr #10
   1b1c8:	andeq	fp, r1, r0, asr #10
   1b1cc:	andeq	fp, r1, r0, asr #10
   1b1d0:	andeq	fp, r1, r0, asr #10
   1b1d4:	andeq	fp, r1, r0, asr #10
   1b1d8:	andeq	fp, r1, r0, asr #10
   1b1dc:	andeq	fp, r1, r0, asr #10
   1b1e0:	andeq	fp, r1, r0, asr #10
   1b1e4:	andeq	fp, r1, r0, asr #10
   1b1e8:	andeq	fp, r1, r0, asr #10
   1b1ec:	andeq	fp, r1, r0, asr #10
   1b1f0:	andeq	fp, r1, r0, asr #10
   1b1f4:	andeq	fp, r1, r0, asr #10
   1b1f8:	andeq	fp, r1, r0, asr #10
   1b1fc:	andeq	fp, r1, r0, asr #11
   1b200:	andeq	fp, r1, r0, asr #10
   1b204:	andeq	fp, r1, r0, asr #10
   1b208:	ldrdeq	fp, [r1], -r0
   1b20c:	andeq	fp, r1, r0, asr #10
   1b210:	andeq	fp, r1, r0, asr #10
   1b214:	andeq	fp, r1, r0, asr #10
   1b218:	andeq	fp, r1, r0, asr #10
   1b21c:	andeq	fp, r1, r0, asr #10
   1b220:	andeq	fp, r1, r0, asr #10
   1b224:	andeq	fp, r1, r0, asr #10
   1b228:	andeq	fp, r1, r0, asr #10
   1b22c:	andeq	fp, r1, r0, asr #10
   1b230:	andeq	fp, r1, r0, asr #10
   1b234:	andeq	fp, r1, r0, asr #10
   1b238:	andeq	fp, r1, r0, asr #10
   1b23c:	andeq	fp, r1, r0, asr #10
   1b240:	andeq	fp, r1, r0, asr #10
   1b244:	andeq	fp, r1, r0, asr #10
   1b248:	andeq	fp, r1, r0, asr #10
   1b24c:	andeq	fp, r1, r0, asr #10
   1b250:	andeq	fp, r1, r0, asr #10
   1b254:	andeq	fp, r1, r0, asr #10
   1b258:	andeq	fp, r1, r0, asr #10
   1b25c:	andeq	fp, r1, r0, asr #10
   1b260:	andeq	fp, r1, r0, asr #10
   1b264:	andeq	fp, r1, r0, asr #10
   1b268:	andeq	fp, r1, r0, asr #10
   1b26c:	andeq	fp, r1, r0, asr #10
   1b270:	andeq	fp, r1, r0, asr #10
   1b274:	andeq	fp, r1, r0, asr #10
   1b278:	andeq	fp, r1, r0, asr #10
   1b27c:	andeq	fp, r1, r8, ror #12
   1b280:	andeq	fp, r1, r4, lsl #13
   1b284:	andeq	fp, r1, ip, lsr #13
   1b288:	tst	r8, #8
   1b28c:	bne	1b2d0 <__assert_fail@plt+0x9d78>
   1b290:	ldr	r3, [r5, #48]	; 0x30
   1b294:	add	r7, r7, #1
   1b298:	cmp	r7, r3
   1b29c:	beq	1b2d0 <__assert_fail@plt+0x9d78>
   1b2a0:	mov	r2, r8
   1b2a4:	mov	r1, r5
   1b2a8:	str	r7, [r5, #40]	; 0x28
   1b2ac:	mov	r0, sp
   1b2b0:	bl	1afe8 <__assert_fail@plt+0x9a90>
   1b2b4:	ldrb	r2, [sp, #4]
   1b2b8:	ldr	r3, [r5, #40]	; 0x28
   1b2bc:	sub	r2, r2, #9
   1b2c0:	cmp	r2, #1
   1b2c4:	sub	r3, r3, #1
   1b2c8:	str	r3, [r5, #40]	; 0x28
   1b2cc:	bhi	1b540 <__assert_fail@plt+0x9fe8>
   1b2d0:	mov	r3, #12
   1b2d4:	mov	r2, #32
   1b2d8:	mov	r0, #1
   1b2dc:	str	r2, [r6]
   1b2e0:	strb	r3, [r6, #4]
   1b2e4:	add	sp, sp, #8
   1b2e8:	ldrd	r4, [sp]
   1b2ec:	ldrd	r6, [sp, #8]
   1b2f0:	ldrd	r8, [sp, #16]
   1b2f4:	ldr	sl, [sp, #24]
   1b2f8:	add	sp, sp, #28
   1b2fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b300:	cmp	r4, #92	; 0x5c
   1b304:	beq	1b33c <__assert_fail@plt+0x9de4>
   1b308:	mov	r3, #1
   1b30c:	strb	r3, [r6, #4]
   1b310:	bl	113fc <__ctype_b_loc@plt>
   1b314:	ldr	r1, [r0]
   1b318:	lsl	r3, r4, #1
   1b31c:	ldrb	r2, [r6, #6]
   1b320:	ldrh	r3, [r1, r3]
   1b324:	ubfx	r3, r3, #3, #1
   1b328:	cmp	r4, #95	; 0x5f
   1b32c:	orreq	r3, r3, #1
   1b330:	bfi	r2, r3, #6, #1
   1b334:	strb	r2, [r6, #6]
   1b338:	b	1b0a8 <__assert_fail@plt+0x9b50>
   1b33c:	ldr	r1, [r5, #48]	; 0x30
   1b340:	add	r3, r7, #1
   1b344:	cmp	r3, r1
   1b348:	blt	1b35c <__assert_fail@plt+0x9e04>
   1b34c:	mov	r3, #36	; 0x24
   1b350:	mov	r0, #1
   1b354:	strb	r3, [r6, #4]
   1b358:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b35c:	ldrb	r1, [r5, #75]	; 0x4b
   1b360:	cmp	r1, #0
   1b364:	bne	1b8cc <__assert_fail@plt+0xa374>
   1b368:	ldrb	r7, [sl, r3]
   1b36c:	mov	r1, #1
   1b370:	strb	r7, [r6]
   1b374:	cmp	r2, r1
   1b378:	strb	r1, [r6, #4]
   1b37c:	ble	1b568 <__assert_fail@plt+0xa010>
   1b380:	ldr	r1, [r5, #8]
   1b384:	add	r1, r1, r3, lsl #2
   1b388:	ldr	r4, [r1]
   1b38c:	mov	r0, r4
   1b390:	sub	r4, r4, #95	; 0x5f
   1b394:	bl	11438 <iswalnum@plt>
   1b398:	ldrb	r3, [r6, #6]
   1b39c:	clz	r4, r4
   1b3a0:	cmp	r0, #0
   1b3a4:	lsr	r4, r4, #5
   1b3a8:	movne	r4, #1
   1b3ac:	bfi	r3, r4, #6, #1
   1b3b0:	strb	r3, [r6, #6]
   1b3b4:	sub	r3, r7, #39	; 0x27
   1b3b8:	cmp	r3, #86	; 0x56
   1b3bc:	ldrls	pc, [pc, r3, lsl #2]
   1b3c0:	b	1b6e0 <__assert_fail@plt+0xa188>
   1b3c4:	muleq	r1, r4, r8
   1b3c8:			; <UNDEFINED> instruction: 0x0001b8b4
   1b3cc:	andeq	fp, r1, ip, ror r8
   1b3d0:	andeq	fp, r1, r0, ror #13
   1b3d4:	andeq	fp, r1, ip, asr r8
   1b3d8:	andeq	fp, r1, r0, ror #13
   1b3dc:	andeq	fp, r1, r0, ror #13
   1b3e0:	andeq	fp, r1, r0, ror #13
   1b3e4:	andeq	fp, r1, r0, ror #13
   1b3e8:	andeq	fp, r1, r0, ror #13
   1b3ec:	andeq	fp, r1, ip, lsr r8
   1b3f0:	andeq	fp, r1, ip, lsr r8
   1b3f4:	andeq	fp, r1, ip, lsr r8
   1b3f8:	andeq	fp, r1, ip, lsr r8
   1b3fc:	andeq	fp, r1, ip, lsr r8
   1b400:	andeq	fp, r1, ip, lsr r8
   1b404:	andeq	fp, r1, ip, lsr r8
   1b408:	andeq	fp, r1, ip, lsr r8
   1b40c:	andeq	fp, r1, ip, lsr r8
   1b410:	andeq	fp, r1, r0, ror #13
   1b414:	andeq	fp, r1, r0, ror #13
   1b418:	andeq	fp, r1, ip, lsl r8
   1b41c:	andeq	fp, r1, r0, ror #13
   1b420:	strdeq	fp, [r1], -ip
   1b424:	ldrdeq	fp, [r1], -ip
   1b428:	andeq	fp, r1, r0, ror #13
   1b42c:	andeq	fp, r1, r0, ror #13
   1b430:			; <UNDEFINED> instruction: 0x0001b7bc
   1b434:	andeq	fp, r1, r0, ror #13
   1b438:	andeq	fp, r1, r0, ror #13
   1b43c:	andeq	fp, r1, r0, ror #13
   1b440:	andeq	fp, r1, r0, ror #13
   1b444:	andeq	fp, r1, r0, ror #13
   1b448:	andeq	fp, r1, r0, ror #13
   1b44c:	andeq	fp, r1, r0, ror #13
   1b450:	andeq	fp, r1, r0, ror #13
   1b454:	andeq	fp, r1, r0, ror #13
   1b458:	andeq	fp, r1, r0, ror #13
   1b45c:	andeq	fp, r1, r0, ror #13
   1b460:	andeq	fp, r1, r0, ror #13
   1b464:	andeq	fp, r1, r0, ror #13
   1b468:	andeq	fp, r1, r0, ror #13
   1b46c:	andeq	fp, r1, r0, ror #13
   1b470:	andeq	fp, r1, r0, ror #13
   1b474:	andeq	fp, r1, r4, lsr #15
   1b478:	andeq	fp, r1, r0, ror #13
   1b47c:	andeq	fp, r1, r0, ror #13
   1b480:	andeq	fp, r1, r0, ror #13
   1b484:	andeq	fp, r1, ip, lsl #15
   1b488:	andeq	fp, r1, r0, ror #13
   1b48c:	andeq	fp, r1, r0, ror #13
   1b490:	andeq	fp, r1, r0, ror #13
   1b494:	andeq	fp, r1, r0, ror #13
   1b498:	andeq	fp, r1, r0, ror #13
   1b49c:	andeq	fp, r1, r0, ror #13
   1b4a0:	andeq	fp, r1, r0, ror #13
   1b4a4:	andeq	fp, r1, r0, ror #13
   1b4a8:	andeq	fp, r1, ip, ror #14
   1b4ac:	andeq	fp, r1, r0, ror #13
   1b4b0:	andeq	fp, r1, ip, asr #14
   1b4b4:	andeq	fp, r1, r0, ror #13
   1b4b8:	andeq	fp, r1, r0, ror #13
   1b4bc:	andeq	fp, r1, r0, ror #13
   1b4c0:	andeq	fp, r1, r0, ror #13
   1b4c4:	andeq	fp, r1, r0, ror #13
   1b4c8:	andeq	fp, r1, r0, ror #13
   1b4cc:	andeq	fp, r1, r0, ror #13
   1b4d0:	andeq	fp, r1, r0, ror #13
   1b4d4:	andeq	fp, r1, r0, ror #13
   1b4d8:	andeq	fp, r1, r0, ror #13
   1b4dc:	andeq	fp, r1, r0, ror #13
   1b4e0:	andeq	fp, r1, r0, ror #13
   1b4e4:	andeq	fp, r1, r0, ror #13
   1b4e8:	andeq	fp, r1, r0, ror #13
   1b4ec:	andeq	fp, r1, r0, ror #13
   1b4f0:	andeq	fp, r1, r0, ror #13
   1b4f4:	andeq	fp, r1, r4, lsr r7
   1b4f8:	andeq	fp, r1, r0, ror #13
   1b4fc:	andeq	fp, r1, r0, ror #13
   1b500:	andeq	fp, r1, r0, ror #13
   1b504:	andeq	fp, r1, ip, lsl r7
   1b508:	andeq	fp, r1, r0, ror #13
   1b50c:	andeq	fp, r1, r0, ror #13
   1b510:	andeq	fp, r1, r0, ror #13
   1b514:	andeq	fp, r1, r0, lsl #14
   1b518:	andeq	fp, r1, r8, ror #13
   1b51c:	andeq	fp, r1, r8, asr #13
   1b520:	add	r7, sl, r7
   1b524:	eor	r3, r8, #2048	; 0x800
   1b528:	ldrb	r2, [r7, #-1]
   1b52c:	ubfx	r3, r3, #11, #1
   1b530:	cmp	r2, #10
   1b534:	orrne	r3, r3, #1
   1b538:	cmp	r3, #0
   1b53c:	beq	1b5f4 <__assert_fail@plt+0xa09c>
   1b540:	mov	r0, #1
   1b544:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b548:	ldr	r3, [r6, #4]
   1b54c:	mov	r0, #1
   1b550:	bic	r3, r3, #2097152	; 0x200000
   1b554:	bic	r3, r3, #255	; 0xff
   1b558:	orr	r3, r3, #2097152	; 0x200000
   1b55c:	orr	r3, r3, r0
   1b560:	str	r3, [r6, #4]
   1b564:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b568:	bl	113fc <__ctype_b_loc@plt>
   1b56c:	ldr	r1, [r0]
   1b570:	lsl	r3, r7, #1
   1b574:	ldrb	r2, [r6, #6]
   1b578:	ldrh	r3, [r1, r3]
   1b57c:	ubfx	r3, r3, #3, #1
   1b580:	cmp	r7, #95	; 0x5f
   1b584:	orreq	r3, r3, #1
   1b588:	bfi	r2, r3, #6, #1
   1b58c:	strb	r2, [r6, #6]
   1b590:	b	1b3b4 <__assert_fail@plt+0x9e5c>
   1b594:	mov	r3, #5
   1b598:	mov	r0, #1
   1b59c:	strb	r3, [r6, #4]
   1b5a0:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b5a4:	movw	r3, #1026	; 0x402
   1b5a8:	tst	r8, r3
   1b5ac:	bne	1b540 <__assert_fail@plt+0x9fe8>
   1b5b0:	mov	r3, #19
   1b5b4:	mov	r0, #1
   1b5b8:	strb	r3, [r6, #4]
   1b5bc:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b5c0:	mov	r3, #20
   1b5c4:	mov	r0, #1
   1b5c8:	strb	r3, [r6, #4]
   1b5cc:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b5d0:	mov	r3, #8
   1b5d4:	movt	r3, #128	; 0x80
   1b5d8:	tst	r8, r3
   1b5dc:	moveq	r3, #1
   1b5e0:	movne	r3, #0
   1b5e4:	cmp	r7, #0
   1b5e8:	moveq	r3, #0
   1b5ec:	cmp	r3, #0
   1b5f0:	bne	1b520 <__assert_fail@plt+0x9fc8>
   1b5f4:	mov	r3, #12
   1b5f8:	mov	r2, #16
   1b5fc:	mov	r0, #1
   1b600:	str	r2, [r6]
   1b604:	strb	r3, [r6, #4]
   1b608:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b60c:	mov	r3, #11
   1b610:	mov	r0, #1
   1b614:	strb	r3, [r6, #4]
   1b618:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b61c:	tst	r8, #8192	; 0x2000
   1b620:	beq	1b540 <__assert_fail@plt+0x9fe8>
   1b624:	mov	r3, #8
   1b628:	mov	r0, #1
   1b62c:	strb	r3, [r6, #4]
   1b630:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b634:	tst	r8, #8192	; 0x2000
   1b638:	beq	1b540 <__assert_fail@plt+0x9fe8>
   1b63c:	mov	r3, #9
   1b640:	mov	r0, #1
   1b644:	strb	r3, [r6, #4]
   1b648:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b64c:	movw	r3, #1026	; 0x402
   1b650:	tst	r8, r3
   1b654:	bne	1b540 <__assert_fail@plt+0x9fe8>
   1b658:	mov	r3, #18
   1b65c:	mov	r0, #1
   1b660:	strb	r3, [r6, #4]
   1b664:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b668:	and	r2, r8, #4608	; 0x1200
   1b66c:	cmp	r2, #4608	; 0x1200
   1b670:	moveq	r3, #23
   1b674:	moveq	r0, #1
   1b678:	strbeq	r3, [r6, #4]
   1b67c:	bne	1b540 <__assert_fail@plt+0x9fe8>
   1b680:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b684:	and	r2, r8, #33792	; 0x8400
   1b688:	cmp	r2, #32768	; 0x8000
   1b68c:	bne	1b540 <__assert_fail@plt+0x9fe8>
   1b690:	mov	r3, #10
   1b694:	mov	r0, #1
   1b698:	strb	r3, [r6, #4]
   1b69c:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b6a0:	tst	r8, #2048	; 0x800
   1b6a4:	beq	1b540 <__assert_fail@plt+0x9fe8>
   1b6a8:	b	1b690 <__assert_fail@plt+0xa138>
   1b6ac:	and	r2, r8, #4608	; 0x1200
   1b6b0:	cmp	r2, #4608	; 0x1200
   1b6b4:	moveq	r3, #24
   1b6b8:	moveq	r0, #1
   1b6bc:	strbeq	r3, [r6, #4]
   1b6c0:	bne	1b540 <__assert_fail@plt+0x9fe8>
   1b6c4:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b6c8:	and	r2, r8, #4608	; 0x1200
   1b6cc:	cmp	r2, #512	; 0x200
   1b6d0:	moveq	r3, #24
   1b6d4:	moveq	r0, #2
   1b6d8:	strbeq	r3, [r6, #4]
   1b6dc:	beq	1b2e4 <__assert_fail@plt+0x9d8c>
   1b6e0:	mov	r0, #2
   1b6e4:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b6e8:	tst	r8, #33792	; 0x8400
   1b6ec:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b6f0:	mov	r3, #10
   1b6f4:	mov	r0, #2
   1b6f8:	strb	r3, [r6, #4]
   1b6fc:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b700:	and	r2, r8, #4608	; 0x1200
   1b704:	cmp	r2, #512	; 0x200
   1b708:	moveq	r3, #23
   1b70c:	moveq	r0, #2
   1b710:	strbeq	r3, [r6, #4]
   1b714:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b718:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b71c:	tst	r8, #524288	; 0x80000
   1b720:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b724:	mov	r3, #32
   1b728:	mov	r0, #2
   1b72c:	strb	r3, [r6, #4]
   1b730:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b734:	tst	r8, #524288	; 0x80000
   1b738:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b73c:	mov	r3, #34	; 0x22
   1b740:	mov	r0, #2
   1b744:	strb	r3, [r6, #4]
   1b748:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b74c:	tst	r8, #524288	; 0x80000
   1b750:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b754:	mov	r3, #12
   1b758:	mov	r2, #256	; 0x100
   1b75c:	mov	r0, #2
   1b760:	str	r2, [r6]
   1b764:	strb	r3, [r6, #4]
   1b768:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b76c:	tst	r8, #524288	; 0x80000
   1b770:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b774:	mov	r3, #12
   1b778:	mov	r2, #64	; 0x40
   1b77c:	mov	r0, #2
   1b780:	str	r2, [r6]
   1b784:	strb	r3, [r6, #4]
   1b788:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b78c:	tst	r8, #524288	; 0x80000
   1b790:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b794:	mov	r3, #33	; 0x21
   1b798:	mov	r0, #2
   1b79c:	strb	r3, [r6, #4]
   1b7a0:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b7a4:	tst	r8, #524288	; 0x80000
   1b7a8:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b7ac:	mov	r3, #35	; 0x23
   1b7b0:	mov	r0, #2
   1b7b4:	strb	r3, [r6, #4]
   1b7b8:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b7bc:	tst	r8, #524288	; 0x80000
   1b7c0:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b7c4:	mov	r3, #12
   1b7c8:	mov	r2, #512	; 0x200
   1b7cc:	mov	r0, #2
   1b7d0:	str	r2, [r6]
   1b7d4:	strb	r3, [r6, #4]
   1b7d8:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b7dc:	movw	r2, #1026	; 0x402
   1b7e0:	and	r2, r2, r8
   1b7e4:	cmp	r2, #2
   1b7e8:	moveq	r3, #19
   1b7ec:	moveq	r0, r2
   1b7f0:	strbeq	r3, [r6, #4]
   1b7f4:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b7f8:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b7fc:	tst	r8, #524288	; 0x80000
   1b800:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b804:	mov	r3, #12
   1b808:	mov	r2, #9
   1b80c:	mov	r0, #2
   1b810:	str	r2, [r6]
   1b814:	strb	r3, [r6, #4]
   1b818:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b81c:	tst	r8, #524288	; 0x80000
   1b820:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b824:	mov	r3, #12
   1b828:	mov	r2, #6
   1b82c:	mov	r0, #2
   1b830:	str	r2, [r6]
   1b834:	strb	r3, [r6, #4]
   1b838:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b83c:	tst	r8, #16384	; 0x4000
   1b840:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b844:	sub	r7, r7, #49	; 0x31
   1b848:	mov	r3, #4
   1b84c:	mov	r0, #2
   1b850:	str	r7, [r6]
   1b854:	strb	r3, [r6, #4]
   1b858:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b85c:	movw	r2, #1026	; 0x402
   1b860:	and	r2, r2, r8
   1b864:	cmp	r2, #2
   1b868:	moveq	r3, #18
   1b86c:	moveq	r0, r2
   1b870:	strbeq	r3, [r6, #4]
   1b874:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b878:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b87c:	tst	r8, #8192	; 0x2000
   1b880:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b884:	mov	r3, #9
   1b888:	mov	r0, #2
   1b88c:	strb	r3, [r6, #4]
   1b890:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b894:	tst	r8, #524288	; 0x80000
   1b898:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b89c:	mov	r3, #12
   1b8a0:	mov	r2, #128	; 0x80
   1b8a4:	mov	r0, #2
   1b8a8:	str	r2, [r6]
   1b8ac:	strb	r3, [r6, #4]
   1b8b0:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b8b4:	tst	r8, #8192	; 0x2000
   1b8b8:	bne	1b6e0 <__assert_fail@plt+0xa188>
   1b8bc:	mov	r3, #8
   1b8c0:	mov	r0, #2
   1b8c4:	strb	r3, [r6, #4]
   1b8c8:	b	1b2e4 <__assert_fail@plt+0x9d8c>
   1b8cc:	cmp	r2, #1
   1b8d0:	ble	1b904 <__assert_fail@plt+0xa3ac>
   1b8d4:	ldr	r1, [r5, #8]
   1b8d8:	ldr	r0, [r1, r3, lsl #2]
   1b8dc:	add	r1, r1, r3, lsl #2
   1b8e0:	cmn	r0, #1
   1b8e4:	beq	1b940 <__assert_fail@plt+0xa3e8>
   1b8e8:	ldr	r0, [r5, #28]
   1b8ec:	add	r7, r7, #2
   1b8f0:	cmp	r0, r7
   1b8f4:	beq	1b904 <__assert_fail@plt+0xa3ac>
   1b8f8:	ldr	r0, [r1, #4]
   1b8fc:	cmn	r0, #1
   1b900:	beq	1b940 <__assert_fail@plt+0xa3e8>
   1b904:	ldrb	r0, [r5, #76]	; 0x4c
   1b908:	ldr	r1, [r5]
   1b90c:	ldr	ip, [r5, #24]
   1b910:	cmp	r0, #0
   1b914:	beq	1b934 <__assert_fail@plt+0xa3dc>
   1b918:	ldr	r0, [r5, #12]
   1b91c:	add	r1, r1, ip
   1b920:	ldr	r0, [r0, r3, lsl #2]
   1b924:	ldrb	r7, [r1, r0]
   1b928:	tst	r7, #128	; 0x80
   1b92c:	beq	1b36c <__assert_fail@plt+0x9e14>
   1b930:	b	1b368 <__assert_fail@plt+0x9e10>
   1b934:	add	r1, r1, r3
   1b938:	ldrb	r7, [r1, ip]
   1b93c:	b	1b36c <__assert_fail@plt+0x9e14>
   1b940:	ldrb	r7, [sl, r3]
   1b944:	mov	r3, #1
   1b948:	strb	r7, [r6]
   1b94c:	strb	r3, [r6, #4]
   1b950:	b	1b388 <__assert_fail@plt+0x9e30>
   1b954:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b958:	ldr	ip, [r0, #84]	; 0x54
   1b95c:	strd	r6, [sp, #8]
   1b960:	strd	r8, [sp, #16]
   1b964:	ldr	r8, [r0, #108]	; 0x6c
   1b968:	strd	sl, [sp, #24]
   1b96c:	str	lr, [sp, #32]
   1b970:	sub	sp, sp, #36	; 0x24
   1b974:	ldr	r7, [sp, #72]	; 0x48
   1b978:	str	ip, [sp, #12]
   1b97c:	cmp	r8, #0
   1b980:	ldr	r6, [sp, #80]	; 0x50
   1b984:	ble	1bc6c <__assert_fail@plt+0xa714>
   1b988:	ldr	sl, [r0, #116]	; 0x74
   1b98c:	mov	lr, r8
   1b990:	mov	r4, #0
   1b994:	add	ip, lr, r4
   1b998:	asr	ip, ip, #1
   1b99c:	add	r5, ip, ip, lsl #1
   1b9a0:	add	r5, sl, r5, lsl #3
   1b9a4:	ldr	r5, [r5, #4]
   1b9a8:	cmp	r7, r5
   1b9ac:	bgt	1bbcc <__assert_fail@plt+0xa674>
   1b9b0:	cmp	ip, r4
   1b9b4:	ble	1ba00 <__assert_fail@plt+0xa4a8>
   1b9b8:	add	lr, ip, r4
   1b9bc:	asr	lr, lr, #1
   1b9c0:	add	r5, lr, lr, lsl #1
   1b9c4:	add	r5, sl, r5, lsl #3
   1b9c8:	ldr	r5, [r5, #4]
   1b9cc:	cmp	r7, r5
   1b9d0:	ble	1b9f0 <__assert_fail@plt+0xa498>
   1b9d4:	b	1bbc0 <__assert_fail@plt+0xa668>
   1b9d8:	add	r5, ip, ip, lsl #1
   1b9dc:	add	r5, sl, r5, lsl #3
   1b9e0:	ldr	r5, [r5, #4]
   1b9e4:	cmp	r5, r7
   1b9e8:	blt	1bbcc <__assert_fail@plt+0xa674>
   1b9ec:	mov	lr, ip
   1b9f0:	add	ip, r4, lr
   1b9f4:	cmp	r4, lr
   1b9f8:	asr	ip, ip, #1
   1b9fc:	blt	1b9d8 <__assert_fail@plt+0xa480>
   1ba00:	cmp	r8, r4
   1ba04:	mvnle	r4, #0
   1ba08:	ble	1ba20 <__assert_fail@plt+0xa4c8>
   1ba0c:	add	ip, r4, r4, lsl #1
   1ba10:	add	ip, sl, ip, lsl #3
   1ba14:	ldr	ip, [ip, #4]
   1ba18:	cmp	r7, ip
   1ba1c:	mvnne	r4, #0
   1ba20:	mov	lr, r8
   1ba24:	mov	r5, #0
   1ba28:	add	fp, lr, r5
   1ba2c:	add	fp, fp, fp, lsr #31
   1ba30:	asr	fp, fp, #1
   1ba34:	add	ip, fp, fp, lsl #1
   1ba38:	add	ip, sl, ip, lsl #3
   1ba3c:	ldr	ip, [ip, #4]
   1ba40:	cmp	r6, ip
   1ba44:	bgt	1bbb0 <__assert_fail@plt+0xa658>
   1ba48:	cmp	fp, r5
   1ba4c:	ble	1baa8 <__assert_fail@plt+0xa550>
   1ba50:	add	lr, fp, r5
   1ba54:	add	lr, lr, lr, lsr #31
   1ba58:	asr	lr, lr, #1
   1ba5c:	add	ip, lr, lr, lsl #1
   1ba60:	mov	r9, lr
   1ba64:	add	ip, sl, ip, lsl #3
   1ba68:	ldr	ip, [ip, #4]
   1ba6c:	cmp	r6, ip
   1ba70:	ble	1ba98 <__assert_fail@plt+0xa540>
   1ba74:	b	1bba8 <__assert_fail@plt+0xa650>
   1ba78:	asr	ip, ip, #1
   1ba7c:	add	r9, ip, ip, lsl #1
   1ba80:	mov	fp, ip
   1ba84:	add	r9, sl, r9, lsl #3
   1ba88:	ldr	r9, [r9, #4]
   1ba8c:	cmp	r9, r6
   1ba90:	blt	1bbb0 <__assert_fail@plt+0xa658>
   1ba94:	mov	lr, ip
   1ba98:	add	ip, r5, lr
   1ba9c:	cmp	r5, lr
   1baa0:	add	ip, ip, ip, lsr #31
   1baa4:	blt	1ba78 <__assert_fail@plt+0xa520>
   1baa8:	cmp	r8, r5
   1baac:	ble	1bc9c <__assert_fail@plt+0xa744>
   1bab0:	add	ip, r5, r5, lsl #1
   1bab4:	add	sl, sl, ip, lsl #3
   1bab8:	ldr	ip, [sl, #4]
   1babc:	cmp	r6, ip
   1bac0:	mvnne	r5, #0
   1bac4:	ldr	ip, [r1]
   1bac8:	cmp	ip, #0
   1bacc:	ble	1bc14 <__assert_fail@plt+0xa6bc>
   1bad0:	mov	sl, r2
   1bad4:	mov	r8, r0
   1bad8:	str	r1, [sp, #16]
   1badc:	mov	fp, #0
   1bae0:	str	r3, [sp, #20]
   1bae4:	str	r5, [sp, #24]
   1bae8:	str	r4, [sp, #28]
   1baec:	ldr	r3, [sl]
   1baf0:	lsl	r4, fp, #2
   1baf4:	ldr	r2, [sp, #12]
   1baf8:	ldr	r0, [r8, #116]	; 0x74
   1bafc:	ldr	r3, [r3, fp, lsl #2]
   1bb00:	ldr	r1, [r2]
   1bb04:	add	r3, r3, r3, lsl #1
   1bb08:	add	r2, r0, r3, lsl #3
   1bb0c:	ldr	r0, [r0, r3, lsl #3]
   1bb10:	ldr	r3, [r2, #8]
   1bb14:	ldr	r9, [r1, r0, lsl #3]
   1bb18:	cmp	r7, r3
   1bb1c:	blt	1bc78 <__assert_fail@plt+0xa720>
   1bb20:	ldr	r2, [r2, #12]
   1bb24:	cmp	r7, r2
   1bb28:	bgt	1bc64 <__assert_fail@plt+0xa70c>
   1bb2c:	sub	r1, r7, r3
   1bb30:	cmp	r7, r2
   1bb34:	clz	r1, r1
   1bb38:	lsr	r1, r1, #5
   1bb3c:	beq	1bc1c <__assert_fail@plt+0xa6c4>
   1bb40:	cmp	r7, r3
   1bb44:	movne	r5, #0
   1bb48:	beq	1bc20 <__assert_fail@plt+0xa6c8>
   1bb4c:	cmp	r6, r3
   1bb50:	blt	1bb88 <__assert_fail@plt+0xa630>
   1bb54:	cmp	r6, r2
   1bb58:	movgt	r0, #1
   1bb5c:	bgt	1bb80 <__assert_fail@plt+0xa628>
   1bb60:	sub	r1, r6, r3
   1bb64:	cmp	r6, r2
   1bb68:	clz	r1, r1
   1bb6c:	lsr	r1, r1, #5
   1bb70:	beq	1bbdc <__assert_fail@plt+0xa684>
   1bb74:	cmp	r6, r3
   1bb78:	movne	r0, #0
   1bb7c:	beq	1bbe0 <__assert_fail@plt+0xa688>
   1bb80:	cmp	r0, r5
   1bb84:	beq	1bc00 <__assert_fail@plt+0xa6a8>
   1bb88:	mov	r0, #1
   1bb8c:	add	sp, sp, #36	; 0x24
   1bb90:	ldrd	r4, [sp]
   1bb94:	ldrd	r6, [sp, #8]
   1bb98:	ldrd	r8, [sp, #16]
   1bb9c:	ldrd	sl, [sp, #24]
   1bba0:	add	sp, sp, #32
   1bba4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bba8:	mov	lr, fp
   1bbac:	mov	fp, r9
   1bbb0:	add	r5, fp, #1
   1bbb4:	cmp	r5, lr
   1bbb8:	blt	1ba28 <__assert_fail@plt+0xa4d0>
   1bbbc:	b	1baa8 <__assert_fail@plt+0xa550>
   1bbc0:	mov	r4, lr
   1bbc4:	mov	lr, ip
   1bbc8:	mov	ip, r4
   1bbcc:	add	r4, ip, #1
   1bbd0:	cmp	r4, lr
   1bbd4:	blt	1b994 <__assert_fail@plt+0xa43c>
   1bbd8:	b	1ba00 <__assert_fail@plt+0xa4a8>
   1bbdc:	orr	r1, r1, #2
   1bbe0:	ldr	r3, [sp, #24]
   1bbe4:	mov	r2, r9
   1bbe8:	mov	r0, r8
   1bbec:	str	r3, [sp]
   1bbf0:	ldr	r3, [sp, #76]	; 0x4c
   1bbf4:	bl	17cdc <__assert_fail@plt+0x6784>
   1bbf8:	cmp	r0, r5
   1bbfc:	bne	1bb88 <__assert_fail@plt+0xa630>
   1bc00:	ldr	r3, [sp, #16]
   1bc04:	ldr	ip, [r3]
   1bc08:	add	fp, fp, #1
   1bc0c:	cmp	fp, ip
   1bc10:	blt	1baec <__assert_fail@plt+0xa594>
   1bc14:	mov	r0, #0
   1bc18:	b	1bb8c <__assert_fail@plt+0xa634>
   1bc1c:	orr	r1, r1, #2
   1bc20:	mov	r0, r8
   1bc24:	ldr	r3, [sp, #20]
   1bc28:	ldr	r2, [sp, #28]
   1bc2c:	str	r2, [sp]
   1bc30:	mov	r2, r9
   1bc34:	bl	17cdc <__assert_fail@plt+0x6784>
   1bc38:	ldr	r3, [sl]
   1bc3c:	mov	r5, r0
   1bc40:	ldr	r2, [r8, #116]	; 0x74
   1bc44:	ldr	r3, [r3, r4]
   1bc48:	add	r3, r3, r3, lsl #1
   1bc4c:	add	r2, r2, r3, lsl #3
   1bc50:	ldr	r3, [r2, #8]
   1bc54:	cmp	r6, r3
   1bc58:	blt	1bc94 <__assert_fail@plt+0xa73c>
   1bc5c:	ldr	r2, [r2, #12]
   1bc60:	b	1bb54 <__assert_fail@plt+0xa5fc>
   1bc64:	mov	r5, #1
   1bc68:	b	1bb4c <__assert_fail@plt+0xa5f4>
   1bc6c:	mvn	r4, #0
   1bc70:	mov	r5, r4
   1bc74:	b	1bac4 <__assert_fail@plt+0xa56c>
   1bc78:	cmp	r6, r3
   1bc7c:	blt	1bc08 <__assert_fail@plt+0xa6b0>
   1bc80:	ldr	r2, [r2, #12]
   1bc84:	cmp	r6, r2
   1bc88:	bgt	1bb88 <__assert_fail@plt+0xa630>
   1bc8c:	mvn	r5, #0
   1bc90:	b	1bb60 <__assert_fail@plt+0xa608>
   1bc94:	mvn	r0, #0
   1bc98:	b	1bb80 <__assert_fail@plt+0xa628>
   1bc9c:	mvn	r5, #0
   1bca0:	b	1bac4 <__assert_fail@plt+0xa56c>
   1bca4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bca8:	mov	r4, r0
   1bcac:	strd	r6, [sp, #8]
   1bcb0:	ldr	r0, [r1, #80]	; 0x50
   1bcb4:	strd	r8, [sp, #16]
   1bcb8:	str	sl, [sp, #24]
   1bcbc:	str	lr, [sp, #28]
   1bcc0:	sub	sp, sp, #8
   1bcc4:	ldrb	r7, [sp, #44]	; 0x2c
   1bcc8:	cmp	r0, #1
   1bccc:	ldr	ip, [r1, #40]	; 0x28
   1bcd0:	beq	1bd38 <__assert_fail@plt+0xa7e0>
   1bcd4:	add	r5, ip, #1
   1bcd8:	ldr	r6, [r1, #28]
   1bcdc:	cmp	r5, r6
   1bce0:	bge	1bd38 <__assert_fail@plt+0xa7e0>
   1bce4:	ldr	r0, [r1, #8]
   1bce8:	ldr	lr, [r0, r5, lsl #2]
   1bcec:	add	r0, r0, r5, lsl #2
   1bcf0:	cmn	lr, #1
   1bcf4:	bne	1bd38 <__assert_fail@plt+0xa7e0>
   1bcf8:	add	r3, ip, #2
   1bcfc:	mov	r2, r0
   1bd00:	b	1bd14 <__assert_fail@plt+0xa7bc>
   1bd04:	ldr	ip, [r2, #4]!
   1bd08:	add	r3, r3, #1
   1bd0c:	cmn	ip, #1
   1bd10:	bne	1bd20 <__assert_fail@plt+0xa7c8>
   1bd14:	cmp	r6, r3
   1bd18:	mov	lr, r3
   1bd1c:	bne	1bd04 <__assert_fail@plt+0xa7ac>
   1bd20:	ldr	r3, [r0, #-4]
   1bd24:	mov	r2, #1
   1bd28:	mov	r0, #0
   1bd2c:	strd	r2, [r4]
   1bd30:	str	lr, [r1, #40]	; 0x28
   1bd34:	b	1bd80 <__assert_fail@plt+0xa828>
   1bd38:	ldrb	lr, [r2, #4]
   1bd3c:	add	r3, ip, r3
   1bd40:	str	r3, [r1, #40]	; 0x28
   1bd44:	and	r0, lr, #251	; 0xfb
   1bd48:	cmp	lr, #28
   1bd4c:	cmpne	r0, #26
   1bd50:	beq	1bd9c <__assert_fail@plt+0xa844>
   1bd54:	cmp	lr, #22
   1bd58:	moveq	lr, r7
   1bd5c:	orrne	lr, r7, #1
   1bd60:	mov	r5, r2
   1bd64:	cmp	lr, #0
   1bd68:	beq	1bf14 <__assert_fail@plt+0xa9bc>
   1bd6c:	ldrb	r2, [r5]
   1bd70:	mov	r3, #0
   1bd74:	mov	r0, r3
   1bd78:	str	r3, [r4]
   1bd7c:	strb	r2, [r4, #4]
   1bd80:	add	sp, sp, #8
   1bd84:	ldrd	r4, [sp]
   1bd88:	ldrd	r6, [sp, #8]
   1bd8c:	ldrd	r8, [sp, #16]
   1bd90:	ldr	sl, [sp, #24]
   1bd94:	add	sp, sp, #28
   1bd98:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd9c:	ldr	r6, [r1, #56]	; 0x38
   1bda0:	cmp	r3, r6
   1bda4:	bge	1be44 <__assert_fail@plt+0xa8ec>
   1bda8:	ldrb	r7, [r2]
   1bdac:	mov	r5, #0
   1bdb0:	b	1bdd4 <__assert_fail@plt+0xa87c>
   1bdb4:	ldr	r3, [r4, #4]
   1bdb8:	strb	r0, [r3, r5]
   1bdbc:	add	r5, r5, #1
   1bdc0:	cmp	r5, #32
   1bdc4:	beq	1be44 <__assert_fail@plt+0xa8ec>
   1bdc8:	ldrb	lr, [r2, #4]
   1bdcc:	ldr	r3, [r1, #40]	; 0x28
   1bdd0:	ldr	r6, [r1, #56]	; 0x38
   1bdd4:	cmp	lr, #30
   1bdd8:	add	ip, r3, #1
   1bddc:	beq	1be4c <__assert_fail@plt+0xa8f4>
   1bde0:	ldr	r0, [r1, #4]
   1bde4:	str	ip, [r1, #40]	; 0x28
   1bde8:	ldrb	r0, [r0, r3]
   1bdec:	cmp	r6, ip
   1bdf0:	ble	1be44 <__assert_fail@plt+0xa8ec>
   1bdf4:	cmp	r7, r0
   1bdf8:	bne	1bdb4 <__assert_fail@plt+0xa85c>
   1bdfc:	ldr	r3, [r1, #4]
   1be00:	ldrb	r3, [r3, ip]
   1be04:	cmp	r3, #93	; 0x5d
   1be08:	bne	1bdb4 <__assert_fail@plt+0xa85c>
   1be0c:	ldr	r3, [r4, #4]
   1be10:	add	ip, ip, #1
   1be14:	mov	r0, #0
   1be18:	str	ip, [r1, #40]	; 0x28
   1be1c:	strb	r0, [r3, r5]
   1be20:	ldrb	r3, [r2, #4]
   1be24:	cmp	r3, #28
   1be28:	beq	1bf40 <__assert_fail@plt+0xa9e8>
   1be2c:	cmp	r3, #30
   1be30:	beq	1bf34 <__assert_fail@plt+0xa9dc>
   1be34:	cmp	r3, #26
   1be38:	moveq	r3, #3
   1be3c:	streq	r3, [r4]
   1be40:	b	1bd80 <__assert_fail@plt+0xa828>
   1be44:	mov	r0, #7
   1be48:	b	1bd80 <__assert_fail@plt+0xa828>
   1be4c:	ldrb	r0, [r1, #75]	; 0x4b
   1be50:	cmp	r0, #0
   1be54:	beq	1bde0 <__assert_fail@plt+0xa888>
   1be58:	ldrb	r0, [r1, #76]	; 0x4c
   1be5c:	cmp	r0, #0
   1be60:	beq	1befc <__assert_fail@plt+0xa9a4>
   1be64:	ldr	r8, [r1, #28]
   1be68:	lsl	lr, r3, #2
   1be6c:	cmp	r3, r8
   1be70:	beq	1be84 <__assert_fail@plt+0xa92c>
   1be74:	ldr	r0, [r1, #8]
   1be78:	ldr	r0, [r0, r3, lsl #2]
   1be7c:	cmn	r0, #1
   1be80:	beq	1bde0 <__assert_fail@plt+0xa888>
   1be84:	ldr	r0, [r1]
   1be88:	ldr	sl, [r1, #12]
   1be8c:	ldr	r9, [r1, #24]
   1be90:	ldr	sl, [sl, lr]
   1be94:	add	r0, r0, sl
   1be98:	ldrb	r0, [r0, r9]
   1be9c:	tst	r0, #128	; 0x80
   1bea0:	bne	1bde0 <__assert_fail@plt+0xa888>
   1bea4:	ldr	r9, [r1, #80]	; 0x50
   1bea8:	cmp	r9, #1
   1beac:	beq	1bef4 <__assert_fail@plt+0xa99c>
   1beb0:	cmp	r8, ip
   1beb4:	ble	1bef4 <__assert_fail@plt+0xa99c>
   1beb8:	ldr	r9, [r1, #8]
   1bebc:	add	lr, r9, lr
   1bec0:	ldr	lr, [lr, #4]
   1bec4:	cmn	lr, #1
   1bec8:	bne	1bef4 <__assert_fail@plt+0xa99c>
   1becc:	add	r3, r3, #2
   1bed0:	sub	r9, r9, #4
   1bed4:	b	1bee4 <__assert_fail@plt+0xa98c>
   1bed8:	ldr	lr, [r9, r3, lsl #2]
   1bedc:	cmn	lr, #1
   1bee0:	bne	1bef4 <__assert_fail@plt+0xa99c>
   1bee4:	cmp	r8, r3
   1bee8:	mov	ip, r3
   1beec:	add	r3, r3, #1
   1bef0:	bne	1bed8 <__assert_fail@plt+0xa980>
   1bef4:	str	ip, [r1, #40]	; 0x28
   1bef8:	b	1bdec <__assert_fail@plt+0xa894>
   1befc:	ldr	r0, [r1]
   1bf00:	str	ip, [r1, #40]	; 0x28
   1bf04:	ldr	lr, [r1, #24]
   1bf08:	add	r3, r0, r3
   1bf0c:	ldrb	r0, [r3, lr]
   1bf10:	b	1bdec <__assert_fail@plt+0xa894>
   1bf14:	mov	r0, sp
   1bf18:	ldr	r2, [sp, #40]	; 0x28
   1bf1c:	bl	17b30 <__assert_fail@plt+0x65d8>
   1bf20:	ldrb	r3, [sp, #4]
   1bf24:	cmp	r3, #21
   1bf28:	movne	r0, #11
   1bf2c:	beq	1bd6c <__assert_fail@plt+0xa814>
   1bf30:	b	1bd80 <__assert_fail@plt+0xa828>
   1bf34:	mov	r3, #4
   1bf38:	str	r3, [r4]
   1bf3c:	b	1bd80 <__assert_fail@plt+0xa828>
   1bf40:	mov	r3, #2
   1bf44:	str	r3, [r4]
   1bf48:	b	1bd80 <__assert_fail@plt+0xa828>
   1bf4c:	add	ip, r0, r2, lsl #3
   1bf50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bf54:	strd	r6, [sp, #8]
   1bf58:	str	r8, [sp, #16]
   1bf5c:	ldrb	r8, [ip, #4]
   1bf60:	str	lr, [sp, #20]
   1bf64:	ldr	r7, [sp, #24]
   1bf68:	cmp	r8, #7
   1bf6c:	beq	1c0d4 <__assert_fail@plt+0xab7c>
   1bf70:	ldr	ip, [r3, #80]	; 0x50
   1bf74:	cmp	ip, #1
   1bf78:	beq	1bfd8 <__assert_fail@plt+0xaa80>
   1bf7c:	ldr	ip, [r3, #28]
   1bf80:	add	lr, r7, #1
   1bf84:	cmp	lr, ip
   1bf88:	bge	1bfd8 <__assert_fail@plt+0xaa80>
   1bf8c:	ldr	r4, [r3, #8]
   1bf90:	ldr	r5, [r4, lr, lsl #2]
   1bf94:	add	r6, r4, lr, lsl #2
   1bf98:	cmn	r5, #1
   1bf9c:	bne	1bfd8 <__assert_fail@plt+0xaa80>
   1bfa0:	sub	ip, ip, r7
   1bfa4:	mov	lr, r6
   1bfa8:	mov	r4, #1
   1bfac:	b	1bfbc <__assert_fail@plt+0xaa64>
   1bfb0:	ldr	r5, [lr, #4]!
   1bfb4:	cmn	r5, #1
   1bfb8:	bne	1bfc8 <__assert_fail@plt+0xaa70>
   1bfbc:	add	r4, r4, #1
   1bfc0:	cmp	ip, r4
   1bfc4:	bne	1bfb0 <__assert_fail@plt+0xaa58>
   1bfc8:	cmp	r8, #5
   1bfcc:	beq	1bff4 <__assert_fail@plt+0xaa9c>
   1bfd0:	cmp	r8, #6
   1bfd4:	beq	1c02c <__assert_fail@plt+0xaad4>
   1bfd8:	mov	r4, #0
   1bfdc:	mov	r0, r4
   1bfe0:	ldrd	r4, [sp]
   1bfe4:	ldrd	r6, [sp, #8]
   1bfe8:	ldr	r8, [sp, #16]
   1bfec:	add	sp, sp, #20
   1bff0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bff4:	ldr	r2, [r1]
   1bff8:	tst	r2, #64	; 0x40
   1bffc:	bne	1c010 <__assert_fail@plt+0xaab8>
   1c000:	ldr	r1, [r3, #4]
   1c004:	ldrb	r1, [r1, r7]
   1c008:	cmp	r1, #10
   1c00c:	beq	1bfd8 <__assert_fail@plt+0xaa80>
   1c010:	tst	r2, #128	; 0x80
   1c014:	beq	1bfdc <__assert_fail@plt+0xaa84>
   1c018:	ldr	r3, [r3, #4]
   1c01c:	ldrb	r3, [r3, r7]
   1c020:	cmp	r3, #0
   1c024:	beq	1bfd8 <__assert_fail@plt+0xaa80>
   1c028:	b	1bfdc <__assert_fail@plt+0xaa84>
   1c02c:	ldr	r7, [r0, r2, lsl #3]
   1c030:	ldr	r0, [r7, #20]
   1c034:	ldr	ip, [r7, #32]
   1c038:	cmp	ip, #0
   1c03c:	bne	1c04c <__assert_fail@plt+0xaaf4>
   1c040:	ldr	r3, [r7, #36]	; 0x24
   1c044:	orrs	r3, r0, r3
   1c048:	beq	1c1d4 <__assert_fail@plt+0xac7c>
   1c04c:	cmp	r0, #0
   1c050:	ldr	r6, [r6, #-4]
   1c054:	ble	1c088 <__assert_fail@plt+0xab30>
   1c058:	ldr	r2, [r7]
   1c05c:	ldr	r3, [r2]
   1c060:	cmp	r6, r3
   1c064:	beq	1c0c4 <__assert_fail@plt+0xab6c>
   1c068:	mov	r3, #0
   1c06c:	b	1c07c <__assert_fail@plt+0xab24>
   1c070:	ldr	r1, [r2, #4]!
   1c074:	cmp	r6, r1
   1c078:	beq	1c0c4 <__assert_fail@plt+0xab6c>
   1c07c:	add	r3, r3, #1
   1c080:	cmp	r3, r0
   1c084:	bne	1c070 <__assert_fail@plt+0xab18>
   1c088:	ldr	r3, [r7, #36]	; 0x24
   1c08c:	cmp	r3, #0
   1c090:	ble	1c198 <__assert_fail@plt+0xac40>
   1c094:	mov	r5, #0
   1c098:	b	1c0a8 <__assert_fail@plt+0xab50>
   1c09c:	ldr	r3, [r7, #36]	; 0x24
   1c0a0:	cmp	r5, r3
   1c0a4:	bge	1c194 <__assert_fail@plt+0xac3c>
   1c0a8:	ldr	r3, [r7, #12]
   1c0ac:	mov	r0, r6
   1c0b0:	ldr	r1, [r3, r5, lsl #2]
   1c0b4:	add	r5, r5, #1
   1c0b8:	bl	111ec <iswctype@plt>
   1c0bc:	cmp	r0, #0
   1c0c0:	beq	1c09c <__assert_fail@plt+0xab44>
   1c0c4:	ldrb	r3, [r7, #16]
   1c0c8:	tst	r3, #1
   1c0cc:	beq	1bfdc <__assert_fail@plt+0xaa84>
   1c0d0:	b	1bfd8 <__assert_fail@plt+0xaa80>
   1c0d4:	ldr	r1, [r3, #4]
   1c0d8:	ldrb	r2, [r1, r7]
   1c0dc:	cmp	r2, #193	; 0xc1
   1c0e0:	bls	1bfd8 <__assert_fail@plt+0xaa80>
   1c0e4:	ldr	r3, [r3, #48]	; 0x30
   1c0e8:	add	r0, r7, #1
   1c0ec:	cmp	r0, r3
   1c0f0:	bge	1bfd8 <__assert_fail@plt+0xaa80>
   1c0f4:	add	ip, r1, r7
   1c0f8:	cmp	r2, #223	; 0xdf
   1c0fc:	ldrb	lr, [ip, #1]
   1c100:	bls	1c200 <__assert_fail@plt+0xaca8>
   1c104:	cmp	r2, #239	; 0xef
   1c108:	bhi	1c1e4 <__assert_fail@plt+0xac8c>
   1c10c:	cmp	lr, #159	; 0x9f
   1c110:	cmpls	r2, #224	; 0xe0
   1c114:	movne	r4, #3
   1c118:	beq	1bfd8 <__assert_fail@plt+0xaa80>
   1c11c:	add	r7, r7, r4
   1c120:	cmp	r3, r7
   1c124:	blt	1bfd8 <__assert_fail@plt+0xaa80>
   1c128:	ldrb	r3, [r1, r0]
   1c12c:	eor	r3, r3, #128	; 0x80
   1c130:	cmp	r3, #63	; 0x3f
   1c134:	bhi	1bfd8 <__assert_fail@plt+0xaa80>
   1c138:	ldrb	r3, [ip, #2]
   1c13c:	eor	r3, r3, #128	; 0x80
   1c140:	cmp	r3, #63	; 0x3f
   1c144:	bhi	1bfd8 <__assert_fail@plt+0xaa80>
   1c148:	cmp	r4, #3
   1c14c:	beq	1bfdc <__assert_fail@plt+0xaa84>
   1c150:	ldrb	r3, [ip, #3]
   1c154:	eor	r3, r3, #128	; 0x80
   1c158:	cmp	r3, #63	; 0x3f
   1c15c:	bhi	1bfd8 <__assert_fail@plt+0xaa80>
   1c160:	cmp	r4, #4
   1c164:	beq	1bfdc <__assert_fail@plt+0xaa84>
   1c168:	ldrb	r3, [ip, #4]
   1c16c:	eor	r3, r3, #128	; 0x80
   1c170:	cmp	r3, #63	; 0x3f
   1c174:	bhi	1bfd8 <__assert_fail@plt+0xaa80>
   1c178:	cmp	r4, #6
   1c17c:	bne	1c24c <__assert_fail@plt+0xacf4>
   1c180:	ldrb	r3, [ip, #5]
   1c184:	eor	r3, r3, #128	; 0x80
   1c188:	cmp	r3, #63	; 0x3f
   1c18c:	bls	1bfdc <__assert_fail@plt+0xaa84>
   1c190:	b	1bfd8 <__assert_fail@plt+0xaa80>
   1c194:	ldr	ip, [r7, #32]
   1c198:	cmp	ip, #0
   1c19c:	ble	1c1d4 <__assert_fail@plt+0xac7c>
   1c1a0:	ldr	r2, [r7, #4]
   1c1a4:	mov	r3, #0
   1c1a8:	sub	r2, r2, #4
   1c1ac:	ldr	r1, [r2, #4]!
   1c1b0:	cmp	r6, r1
   1c1b4:	bcc	1c1c8 <__assert_fail@plt+0xac70>
   1c1b8:	ldr	r1, [r7, #8]
   1c1bc:	ldr	r1, [r1, r3, lsl #2]
   1c1c0:	cmp	r6, r1
   1c1c4:	bls	1c0c4 <__assert_fail@plt+0xab6c>
   1c1c8:	add	r3, r3, #1
   1c1cc:	cmp	r3, ip
   1c1d0:	bne	1c1ac <__assert_fail@plt+0xac54>
   1c1d4:	ldrb	r3, [r7, #16]
   1c1d8:	tst	r3, #1
   1c1dc:	bne	1bfdc <__assert_fail@plt+0xaa84>
   1c1e0:	b	1bfd8 <__assert_fail@plt+0xaa80>
   1c1e4:	cmp	r2, #247	; 0xf7
   1c1e8:	bhi	1c214 <__assert_fail@plt+0xacbc>
   1c1ec:	cmp	lr, #143	; 0x8f
   1c1f0:	cmpls	r2, #240	; 0xf0
   1c1f4:	movne	r4, #4
   1c1f8:	bne	1c11c <__assert_fail@plt+0xabc4>
   1c1fc:	b	1bfd8 <__assert_fail@plt+0xaa80>
   1c200:	eor	lr, lr, #128	; 0x80
   1c204:	cmp	lr, #63	; 0x3f
   1c208:	movls	r4, #2
   1c20c:	bls	1bfdc <__assert_fail@plt+0xaa84>
   1c210:	b	1bfd8 <__assert_fail@plt+0xaa80>
   1c214:	cmp	r2, #251	; 0xfb
   1c218:	bhi	1c230 <__assert_fail@plt+0xacd8>
   1c21c:	cmp	lr, #135	; 0x87
   1c220:	cmpls	r2, #248	; 0xf8
   1c224:	movne	r4, #5
   1c228:	bne	1c11c <__assert_fail@plt+0xabc4>
   1c22c:	b	1bfd8 <__assert_fail@plt+0xaa80>
   1c230:	cmp	r2, #253	; 0xfd
   1c234:	bhi	1bfd8 <__assert_fail@plt+0xaa80>
   1c238:	cmp	lr, #131	; 0x83
   1c23c:	cmpls	r2, #252	; 0xfc
   1c240:	beq	1bfd8 <__assert_fail@plt+0xaa80>
   1c244:	mov	r4, #6
   1c248:	b	1c11c <__assert_fail@plt+0xabc4>
   1c24c:	mov	r4, #5
   1c250:	b	1bfdc <__assert_fail@plt+0xaa84>
   1c254:	strd	r4, [sp, #-16]!
   1c258:	mov	r5, #255	; 0xff
   1c25c:	movt	r5, #4
   1c260:	mov	r4, r0
   1c264:	str	r6, [sp, #8]
   1c268:	str	lr, [sp, #12]
   1c26c:	b	1c274 <__assert_fail@plt+0xad1c>
   1c270:	mov	r4, r3
   1c274:	ldr	r3, [r4, #4]
   1c278:	cmp	r3, #0
   1c27c:	bne	1c270 <__assert_fail@plt+0xad18>
   1c280:	ldr	r3, [r4, #8]
   1c284:	cmp	r3, #0
   1c288:	bne	1c270 <__assert_fail@plt+0xad18>
   1c28c:	ldr	r3, [r4, #24]
   1c290:	and	r3, r3, r5
   1c294:	cmp	r3, #6
   1c298:	beq	1c2e0 <__assert_fail@plt+0xad88>
   1c29c:	cmp	r3, #3
   1c2a0:	beq	1c328 <__assert_fail@plt+0xadd0>
   1c2a4:	ldr	r0, [r4]
   1c2a8:	cmp	r0, #0
   1c2ac:	beq	1c318 <__assert_fail@plt+0xadc0>
   1c2b0:	ldr	r3, [r0, #8]
   1c2b4:	cmp	r3, #0
   1c2b8:	cmpne	r4, r3
   1c2bc:	mov	r4, r0
   1c2c0:	moveq	r2, #1
   1c2c4:	movne	r2, #0
   1c2c8:	cmp	r2, #0
   1c2cc:	beq	1c270 <__assert_fail@plt+0xad18>
   1c2d0:	ldr	r3, [r4, #24]
   1c2d4:	and	r3, r3, r5
   1c2d8:	cmp	r3, #6
   1c2dc:	bne	1c29c <__assert_fail@plt+0xad44>
   1c2e0:	ldr	r6, [r4, #20]
   1c2e4:	ldr	r0, [r6]
   1c2e8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c2ec:	ldr	r0, [r6, #4]
   1c2f0:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c2f4:	ldr	r0, [r6, #8]
   1c2f8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c2fc:	ldr	r0, [r6, #12]
   1c300:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c304:	mov	r0, r6
   1c308:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c30c:	ldr	r0, [r4]
   1c310:	cmp	r0, #0
   1c314:	bne	1c2b0 <__assert_fail@plt+0xad58>
   1c318:	ldrd	r4, [sp]
   1c31c:	ldr	r6, [sp, #8]
   1c320:	add	sp, sp, #12
   1c324:	pop	{pc}		; (ldr pc, [sp], #4)
   1c328:	ldr	r0, [r4, #20]
   1c32c:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c330:	b	1c2a4 <__assert_fail@plt+0xad4c>
   1c334:	ldr	r2, [r0]
   1c338:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c33c:	strd	r6, [sp, #8]
   1c340:	mov	r7, r0
   1c344:	str	r8, [sp, #16]
   1c348:	str	lr, [sp, #20]
   1c34c:	cmp	r2, #0
   1c350:	beq	1c3d8 <__assert_fail@plt+0xae80>
   1c354:	ldr	r0, [r0, #8]
   1c358:	cmp	r0, #0
   1c35c:	beq	1c3d8 <__assert_fail@plt+0xae80>
   1c360:	mov	r5, #255	; 0xff
   1c364:	movt	r5, #4
   1c368:	mov	r4, #0
   1c36c:	b	1c388 <__assert_fail@plt+0xae30>
   1c370:	cmp	r3, #3
   1c374:	beq	1c5b0 <__assert_fail@plt+0xb058>
   1c378:	add	r4, r4, #1
   1c37c:	cmp	r4, r0
   1c380:	bcs	1c3d8 <__assert_fail@plt+0xae80>
   1c384:	ldr	r2, [r7]
   1c388:	add	r1, r2, r4, lsl #3
   1c38c:	ldr	r3, [r1, #4]
   1c390:	and	r3, r3, r5
   1c394:	cmp	r3, #6
   1c398:	bne	1c370 <__assert_fail@plt+0xae18>
   1c39c:	ldr	r6, [r2, r4, lsl #3]
   1c3a0:	add	r4, r4, #1
   1c3a4:	ldr	r0, [r6]
   1c3a8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c3ac:	ldr	r0, [r6, #4]
   1c3b0:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c3b4:	ldr	r0, [r6, #8]
   1c3b8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c3bc:	ldr	r0, [r6, #12]
   1c3c0:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c3c4:	mov	r0, r6
   1c3c8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c3cc:	ldr	r0, [r7, #8]
   1c3d0:	cmp	r4, r0
   1c3d4:	bcc	1c384 <__assert_fail@plt+0xae2c>
   1c3d8:	ldr	r0, [r7, #12]
   1c3dc:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c3e0:	ldr	r3, [r7, #8]
   1c3e4:	cmp	r3, #0
   1c3e8:	movne	r4, #0
   1c3ec:	movne	r5, r4
   1c3f0:	beq	1c450 <__assert_fail@plt+0xaef8>
   1c3f4:	ldr	r3, [r7, #24]
   1c3f8:	cmp	r3, #0
   1c3fc:	add	r2, r3, r4
   1c400:	beq	1c40c <__assert_fail@plt+0xaeb4>
   1c404:	ldr	r0, [r2, #8]
   1c408:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c40c:	ldr	r3, [r7, #28]
   1c410:	cmp	r3, #0
   1c414:	add	r2, r3, r4
   1c418:	beq	1c424 <__assert_fail@plt+0xaecc>
   1c41c:	ldr	r0, [r2, #8]
   1c420:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c424:	ldr	r0, [r7, #20]
   1c428:	cmp	r0, #0
   1c42c:	add	r3, r0, r4
   1c430:	beq	1c554 <__assert_fail@plt+0xaffc>
   1c434:	ldr	r0, [r3, #8]
   1c438:	add	r5, r5, #1
   1c43c:	add	r4, r4, #12
   1c440:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c444:	ldr	r3, [r7, #8]
   1c448:	cmp	r5, r3
   1c44c:	bcc	1c3f4 <__assert_fail@plt+0xae9c>
   1c450:	ldr	r0, [r7, #20]
   1c454:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c458:	ldr	r0, [r7, #24]
   1c45c:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c460:	ldr	r0, [r7, #28]
   1c464:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c468:	ldr	r0, [r7]
   1c46c:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c470:	ldr	r0, [r7, #32]
   1c474:	cmp	r0, #0
   1c478:	movne	r8, #0
   1c47c:	beq	1c570 <__assert_fail@plt+0xb018>
   1c480:	add	r6, r8, r8, lsl #1
   1c484:	ldr	r3, [r0, r6, lsl #2]
   1c488:	add	r6, r0, r6, lsl #2
   1c48c:	cmp	r3, #0
   1c490:	movgt	r5, #0
   1c494:	ble	1c500 <__assert_fail@plt+0xafa8>
   1c498:	ldr	r3, [r6, #8]
   1c49c:	ldr	r4, [r3, r5, lsl #2]
   1c4a0:	ldr	r0, [r4, #24]
   1c4a4:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c4a8:	ldr	r0, [r4, #36]	; 0x24
   1c4ac:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c4b0:	ldr	r3, [r4, #40]	; 0x28
   1c4b4:	add	r2, r4, #4
   1c4b8:	cmp	r3, r2
   1c4bc:	beq	1c520 <__assert_fail@plt+0xafc8>
   1c4c0:	ldr	r0, [r3, #8]
   1c4c4:	add	r5, r5, #1
   1c4c8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c4cc:	ldr	r0, [r4, #40]	; 0x28
   1c4d0:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c4d4:	ldr	r0, [r4, #12]
   1c4d8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c4dc:	ldr	r0, [r4, #48]	; 0x30
   1c4e0:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c4e4:	ldr	r0, [r4, #44]	; 0x2c
   1c4e8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c4ec:	mov	r0, r4
   1c4f0:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c4f4:	ldr	r3, [r6]
   1c4f8:	cmp	r3, r5
   1c4fc:	bgt	1c498 <__assert_fail@plt+0xaf40>
   1c500:	ldr	r0, [r6, #8]
   1c504:	add	r8, r8, #1
   1c508:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c50c:	ldr	r3, [r7, #68]	; 0x44
   1c510:	cmp	r3, r8
   1c514:	bcc	1c56c <__assert_fail@plt+0xb014>
   1c518:	ldr	r0, [r7, #32]
   1c51c:	b	1c480 <__assert_fail@plt+0xaf28>
   1c520:	ldr	r0, [r4, #12]
   1c524:	add	r5, r5, #1
   1c528:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c52c:	ldr	r0, [r4, #48]	; 0x30
   1c530:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c534:	ldr	r0, [r4, #44]	; 0x2c
   1c538:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c53c:	mov	r0, r4
   1c540:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c544:	ldr	r3, [r6]
   1c548:	cmp	r5, r3
   1c54c:	blt	1c498 <__assert_fail@plt+0xaf40>
   1c550:	b	1c500 <__assert_fail@plt+0xafa8>
   1c554:	ldr	r3, [r7, #8]
   1c558:	add	r5, r5, #1
   1c55c:	add	r4, r4, #12
   1c560:	cmp	r3, r5
   1c564:	bhi	1c3f4 <__assert_fail@plt+0xae9c>
   1c568:	b	1c454 <__assert_fail@plt+0xaefc>
   1c56c:	ldr	r0, [r7, #32]
   1c570:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c574:	ldr	r0, [r7, #60]	; 0x3c
   1c578:	movw	r3, #58228	; 0xe374
   1c57c:	movt	r3, #2
   1c580:	cmp	r0, r3
   1c584:	beq	1c58c <__assert_fail@plt+0xb034>
   1c588:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c58c:	ldr	r0, [r7, #132]	; 0x84
   1c590:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c594:	mov	r0, r7
   1c598:	ldrd	r4, [sp]
   1c59c:	ldrd	r6, [sp, #8]
   1c5a0:	ldr	r8, [sp, #16]
   1c5a4:	ldr	lr, [sp, #20]
   1c5a8:	add	sp, sp, #24
   1c5ac:	b	13e1c <__assert_fail@plt+0x28c4>
   1c5b0:	ldr	r0, [r1]
   1c5b4:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c5b8:	ldr	r0, [r7, #8]
   1c5bc:	b	1c378 <__assert_fail@plt+0xae20>
   1c5c0:	ldr	r2, [r1, #24]
   1c5c4:	mov	r3, #255	; 0xff
   1c5c8:	movt	r3, #4
   1c5cc:	str	r4, [sp, #-8]!
   1c5d0:	str	lr, [sp, #4]
   1c5d4:	and	r3, r3, r2
   1c5d8:	cmp	r3, #6
   1c5dc:	beq	1c5f8 <__assert_fail@plt+0xb0a0>
   1c5e0:	cmp	r3, #3
   1c5e4:	beq	1c634 <__assert_fail@plt+0xb0dc>
   1c5e8:	ldr	r4, [sp]
   1c5ec:	add	sp, sp, #4
   1c5f0:	mov	r0, #0
   1c5f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5f8:	ldr	r4, [r1, #20]
   1c5fc:	ldr	r0, [r4]
   1c600:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c604:	ldr	r0, [r4, #4]
   1c608:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c60c:	ldr	r0, [r4, #8]
   1c610:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c614:	ldr	r0, [r4, #12]
   1c618:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c61c:	mov	r0, r4
   1c620:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c624:	ldr	r4, [sp]
   1c628:	add	sp, sp, #4
   1c62c:	mov	r0, #0
   1c630:	pop	{pc}		; (ldr pc, [sp], #4)
   1c634:	ldr	r0, [r1, #20]
   1c638:	bl	13e1c <__assert_fail@plt+0x28c4>
   1c63c:	ldr	r4, [sp]
   1c640:	add	sp, sp, #4
   1c644:	mov	r0, #0
   1c648:	pop	{pc}		; (ldr pc, [sp], #4)
   1c64c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c650:	mov	r4, r2
   1c654:	strd	r6, [sp, #8]
   1c658:	lsl	r7, r1, #3
   1c65c:	mov	r6, r0
   1c660:	strd	r8, [sp, #16]
   1c664:	mov	r8, r1
   1c668:	strd	sl, [sp, #24]
   1c66c:	mov	sl, #0
   1c670:	str	lr, [sp, #32]
   1c674:	sub	sp, sp, #20
   1c678:	ldr	r9, [sp, #56]	; 0x38
   1c67c:	str	r3, [sp, #8]
   1c680:	ldr	r2, [r6]
   1c684:	mov	r5, r4
   1c688:	ldr	r1, [r6, #20]
   1c68c:	add	r3, r2, r7
   1c690:	ldrb	r0, [r3, #4]
   1c694:	cmp	r0, #4
   1c698:	beq	1c8c0 <__assert_fail@plt+0xb368>
   1c69c:	add	fp, r8, r8, lsl #1
   1c6a0:	lsl	fp, fp, #2
   1c6a4:	add	ip, r1, fp
   1c6a8:	ldr	r0, [ip, #4]
   1c6ac:	cmp	r0, #0
   1c6b0:	beq	1ca10 <__assert_fail@plt+0xb4b8>
   1c6b4:	ldr	ip, [ip, #8]
   1c6b8:	add	r5, r4, r4, lsl #1
   1c6bc:	cmp	r0, #1
   1c6c0:	lsl	r5, r5, #2
   1c6c4:	add	r0, r1, r5
   1c6c8:	ldr	r7, [ip]
   1c6cc:	beq	1c808 <__assert_fail@plt+0xb2b0>
   1c6d0:	ldr	ip, [r6, #8]
   1c6d4:	sub	r1, ip, #1
   1c6d8:	add	r3, r2, r1, lsl #3
   1c6dc:	cmp	r1, #0
   1c6e0:	movle	lr, #0
   1c6e4:	movgt	lr, #1
   1c6e8:	ldrb	r4, [r3, #6]
   1c6ec:	str	sl, [r0, #4]
   1c6f0:	ands	lr, lr, r4, lsr #2
   1c6f4:	beq	1c970 <__assert_fail@plt+0xb418>
   1c6f8:	ldr	lr, [r6, #16]
   1c6fc:	add	r4, r2, ip, lsl #3
   1c700:	sub	r4, r4, r3
   1c704:	sub	r4, r4, #16
   1c708:	add	lr, lr, ip, lsl #2
   1c70c:	b	1c730 <__assert_fail@plt+0xb1d8>
   1c710:	add	r3, r3, r4
   1c714:	sub	r1, r1, #1
   1c718:	ldrb	r8, [r3, #6]
   1c71c:	cmp	r1, #0
   1c720:	movle	ip, #0
   1c724:	movgt	ip, #1
   1c728:	ands	ip, ip, r8, lsr #2
   1c72c:	beq	1c970 <__assert_fail@plt+0xb418>
   1c730:	ldr	ip, [lr, #-4]!
   1c734:	cmp	ip, r7
   1c738:	bne	1c710 <__assert_fail@plt+0xb1b8>
   1c73c:	ldr	ip, [r3, #4]
   1c740:	ubfx	ip, ip, #8, #10
   1c744:	cmp	r9, ip
   1c748:	bne	1c710 <__assert_fail@plt+0xb1b8>
   1c74c:	bl	18d78 <__assert_fail@plt+0x7820>
   1c750:	cmp	r0, #0
   1c754:	beq	1c7e8 <__assert_fail@plt+0xb290>
   1c758:	ldr	r3, [r6]
   1c75c:	mov	r0, r6
   1c760:	ldr	r2, [r6, #20]
   1c764:	add	fp, r2, fp
   1c768:	ldr	r2, [fp, #8]
   1c76c:	ldr	r8, [r2, #4]
   1c770:	lsl	r7, r8, #3
   1c774:	add	r3, r3, r7
   1c778:	ldm	r3, {r1, r2}
   1c77c:	bl	18ac4 <__assert_fail@plt+0x756c>
   1c780:	cmn	r0, #1
   1c784:	mov	r4, r0
   1c788:	beq	1c7e8 <__assert_fail@plt+0xb290>
   1c78c:	ldr	r3, [r6]
   1c790:	mov	r1, r0
   1c794:	ubfx	r2, r9, #0, #10
   1c798:	add	r0, r3, r0, lsl #3
   1c79c:	add	ip, r3, r7
   1c7a0:	ldr	r3, [r0, #4]
   1c7a4:	bfi	r3, r2, #8, #10
   1c7a8:	str	r3, [r0, #4]
   1c7ac:	ldr	ip, [ip, #4]
   1c7b0:	ubfx	ip, ip, #8, #10
   1c7b4:	orr	r2, r2, ip
   1c7b8:	bfi	r3, r2, #8, #10
   1c7bc:	ubfx	r2, r3, #16, #8
   1c7c0:	str	r3, [r0, #4]
   1c7c4:	orr	r3, r2, #4
   1c7c8:	strb	r3, [r0, #6]
   1c7cc:	ldr	r3, [r6, #16]
   1c7d0:	ldr	r0, [r6, #20]
   1c7d4:	str	r8, [r3, r4, lsl #2]
   1c7d8:	add	r0, r0, r5
   1c7dc:	bl	18d78 <__assert_fail@plt+0x7820>
   1c7e0:	cmp	r0, #0
   1c7e4:	bne	1c680 <__assert_fail@plt+0xb128>
   1c7e8:	mov	r0, #12
   1c7ec:	add	sp, sp, #20
   1c7f0:	ldrd	r4, [sp]
   1c7f4:	ldrd	r6, [sp, #8]
   1c7f8:	ldrd	r8, [sp, #16]
   1c7fc:	ldrd	sl, [sp, #24]
   1c800:	add	sp, sp, #32
   1c804:	pop	{pc}		; (ldr pc, [sp], #4)
   1c808:	ldr	r1, [sp, #8]
   1c80c:	cmp	r8, r4
   1c810:	str	sl, [r0, #4]
   1c814:	sub	r1, r8, r1
   1c818:	clz	r1, r1
   1c81c:	lsr	r1, r1, #5
   1c820:	moveq	r1, #0
   1c824:	cmp	r1, #0
   1c828:	bne	1ca20 <__assert_fail@plt+0xb4c8>
   1c82c:	ldr	r3, [r3, #4]
   1c830:	lsl	fp, r7, #3
   1c834:	mov	r0, r6
   1c838:	add	r2, r2, fp
   1c83c:	ldm	r2, {r1, r2}
   1c840:	ubfx	r3, r3, #8, #10
   1c844:	orr	r9, r9, r3
   1c848:	bl	18ac4 <__assert_fail@plt+0x756c>
   1c84c:	cmn	r0, #1
   1c850:	mov	r4, r0
   1c854:	beq	1c7e8 <__assert_fail@plt+0xb290>
   1c858:	ldr	r3, [r6]
   1c85c:	mov	r1, r0
   1c860:	ubfx	r2, r9, #0, #10
   1c864:	add	r0, r3, r0, lsl #3
   1c868:	add	ip, r3, fp
   1c86c:	ldr	r3, [r0, #4]
   1c870:	bfi	r3, r2, #8, #10
   1c874:	str	r3, [r0, #4]
   1c878:	ldr	ip, [ip, #4]
   1c87c:	ubfx	ip, ip, #8, #10
   1c880:	orr	r2, r2, ip
   1c884:	bfi	r3, r2, #8, #10
   1c888:	ubfx	r2, r3, #16, #8
   1c88c:	str	r3, [r0, #4]
   1c890:	orr	r3, r2, #4
   1c894:	strb	r3, [r0, #6]
   1c898:	ldr	r3, [r6, #16]
   1c89c:	ldr	r0, [r6, #20]
   1c8a0:	str	r7, [r3, r4, lsl #2]
   1c8a4:	add	r0, r0, r5
   1c8a8:	bl	18d78 <__assert_fail@plt+0x7820>
   1c8ac:	cmp	r0, #0
   1c8b0:	beq	1c7e8 <__assert_fail@plt+0xb290>
   1c8b4:	mov	r8, r7
   1c8b8:	mov	r7, fp
   1c8bc:	b	1c680 <__assert_fail@plt+0xb128>
   1c8c0:	ldr	ip, [r6, #12]
   1c8c4:	lsl	r3, r8, #2
   1c8c8:	mov	r0, r6
   1c8cc:	add	r4, r4, r4, lsl #1
   1c8d0:	lsl	fp, r4, #2
   1c8d4:	str	r3, [sp, #12]
   1c8d8:	ldr	r8, [ip, r8, lsl #2]
   1c8dc:	add	r1, r1, fp
   1c8e0:	str	sl, [r1, #4]
   1c8e4:	lsl	r7, r8, #3
   1c8e8:	add	r2, r2, r7
   1c8ec:	ldm	r2, {r1, r2}
   1c8f0:	bl	18ac4 <__assert_fail@plt+0x756c>
   1c8f4:	cmn	r0, #1
   1c8f8:	mov	r4, r0
   1c8fc:	ldr	r3, [sp, #12]
   1c900:	beq	1c7e8 <__assert_fail@plt+0xb290>
   1c904:	ldr	lr, [r6]
   1c908:	ubfx	r0, r9, #0, #10
   1c90c:	mov	r1, r4
   1c910:	add	ip, lr, r4, lsl #3
   1c914:	add	lr, lr, r7
   1c918:	ldr	r2, [ip, #4]
   1c91c:	bfi	r2, r0, #8, #10
   1c920:	str	r2, [ip, #4]
   1c924:	ldr	lr, [lr, #4]
   1c928:	ubfx	lr, lr, #8, #10
   1c92c:	orr	r0, r0, lr
   1c930:	bfi	r2, r0, #8, #10
   1c934:	ubfx	r0, r2, #16, #8
   1c938:	str	r2, [ip, #4]
   1c93c:	orr	r2, r0, #4
   1c940:	strb	r2, [ip, #6]
   1c944:	ldr	r2, [r6, #12]
   1c948:	ldr	ip, [r6, #16]
   1c94c:	ldr	r0, [r6, #20]
   1c950:	str	r8, [ip, r4, lsl #2]
   1c954:	ldr	r3, [r2, r3]
   1c958:	add	r0, r0, fp
   1c95c:	str	r3, [r2, r5, lsl #2]
   1c960:	bl	18d78 <__assert_fail@plt+0x7820>
   1c964:	cmp	r0, #0
   1c968:	bne	1c680 <__assert_fail@plt+0xb128>
   1c96c:	b	1c7e8 <__assert_fail@plt+0xb290>
   1c970:	lsl	r4, r7, #3
   1c974:	mov	r0, r6
   1c978:	add	r2, r2, r4
   1c97c:	ldm	r2, {r1, r2}
   1c980:	bl	18ac4 <__assert_fail@plt+0x756c>
   1c984:	cmn	r0, #1
   1c988:	mov	r8, r0
   1c98c:	beq	1c7e8 <__assert_fail@plt+0xb290>
   1c990:	ldr	r3, [r6]
   1c994:	ubfx	r0, r9, #0, #10
   1c998:	mov	r1, r8
   1c99c:	add	r2, r3, r8, lsl #3
   1c9a0:	add	r4, r3, r4
   1c9a4:	ldr	r3, [r2, #4]
   1c9a8:	bfi	r3, r0, #8, #10
   1c9ac:	str	r3, [r2, #4]
   1c9b0:	ldr	ip, [r4, #4]
   1c9b4:	ubfx	ip, ip, #8, #10
   1c9b8:	orr	r0, r0, ip
   1c9bc:	bfi	r3, r0, #8, #10
   1c9c0:	ubfx	r0, r3, #16, #8
   1c9c4:	str	r3, [r2, #4]
   1c9c8:	orr	r3, r0, #4
   1c9cc:	strb	r3, [r2, #6]
   1c9d0:	ldr	r3, [r6, #16]
   1c9d4:	ldr	r0, [r6, #20]
   1c9d8:	str	r7, [r3, r8, lsl #2]
   1c9dc:	add	r0, r0, r5
   1c9e0:	bl	18d78 <__assert_fail@plt+0x7820>
   1c9e4:	cmp	r0, #0
   1c9e8:	beq	1c7e8 <__assert_fail@plt+0xb290>
   1c9ec:	mov	r2, r8
   1c9f0:	mov	r1, r7
   1c9f4:	str	r9, [sp]
   1c9f8:	mov	r0, r6
   1c9fc:	ldr	r3, [sp, #8]
   1ca00:	bl	1c64c <__assert_fail@plt+0xb0f4>
   1ca04:	cmp	r0, #0
   1ca08:	beq	1c758 <__assert_fail@plt+0xb200>
   1ca0c:	b	1c7ec <__assert_fail@plt+0xb294>
   1ca10:	ldr	r3, [r6, #12]
   1ca14:	ldr	r2, [r3, r8, lsl #2]
   1ca18:	str	r2, [r3, r4, lsl #2]
   1ca1c:	b	1c7ec <__assert_fail@plt+0xb294>
   1ca20:	mov	r1, r7
   1ca24:	bl	18d78 <__assert_fail@plt+0x7820>
   1ca28:	cmp	r0, #0
   1ca2c:	movne	r0, #0
   1ca30:	bne	1c7ec <__assert_fail@plt+0xb294>
   1ca34:	b	1c7e8 <__assert_fail@plt+0xb290>
   1ca38:	ldr	r3, [r0, #36]	; 0x24
   1ca3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ca40:	strd	r6, [sp, #8]
   1ca44:	str	r8, [sp, #16]
   1ca48:	str	lr, [sp, #20]
   1ca4c:	cmn	r3, #-536870910	; 0xe0000002
   1ca50:	bhi	1cc18 <__assert_fail@plt+0xb6c0>
   1ca54:	ldr	r2, [r0, #48]	; 0x30
   1ca58:	lsl	r3, r3, #1
   1ca5c:	mov	r4, r0
   1ca60:	cmp	r3, r2
   1ca64:	movge	r3, r2
   1ca68:	cmp	r3, r1
   1ca6c:	movge	r1, r3
   1ca70:	bl	18064 <__assert_fail@plt+0x6b0c>
   1ca74:	subs	r6, r0, #0
   1ca78:	bne	1cae4 <__assert_fail@plt+0xb58c>
   1ca7c:	ldr	r0, [r4, #100]	; 0x64
   1ca80:	cmp	r0, #0
   1ca84:	beq	1caa4 <__assert_fail@plt+0xb54c>
   1ca88:	ldr	r1, [r4, #36]	; 0x24
   1ca8c:	add	r1, r1, #1
   1ca90:	lsl	r1, r1, #2
   1ca94:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1ca98:	cmp	r0, #0
   1ca9c:	beq	1cc18 <__assert_fail@plt+0xb6c0>
   1caa0:	str	r0, [r4, #100]	; 0x64
   1caa4:	ldrb	r3, [r4, #72]	; 0x48
   1caa8:	ldr	r2, [r4, #80]	; 0x50
   1caac:	cmp	r3, #0
   1cab0:	beq	1cafc <__assert_fail@plt+0xb5a4>
   1cab4:	cmp	r2, #1
   1cab8:	ble	1cb94 <__assert_fail@plt+0xb63c>
   1cabc:	mov	r0, r4
   1cac0:	ldrd	r4, [sp]
   1cac4:	ldrd	r6, [sp, #8]
   1cac8:	ldr	r8, [sp, #16]
   1cacc:	ldr	lr, [sp, #20]
   1cad0:	add	sp, sp, #24
   1cad4:	b	18448 <__assert_fail@plt+0x6ef0>
   1cad8:	mov	r1, r2
   1cadc:	str	r1, [r4, #28]
   1cae0:	str	r1, [r4, #32]
   1cae4:	mov	r0, r6
   1cae8:	ldrd	r4, [sp]
   1caec:	ldrd	r6, [sp, #8]
   1caf0:	ldr	r8, [sp, #16]
   1caf4:	add	sp, sp, #20
   1caf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cafc:	cmp	r2, #1
   1cb00:	bgt	1cb88 <__assert_fail@plt+0xb630>
   1cb04:	ldr	r0, [r4, #64]	; 0x40
   1cb08:	cmp	r0, #0
   1cb0c:	beq	1cae4 <__assert_fail@plt+0xb58c>
   1cb10:	ldr	r2, [r4, #28]
   1cb14:	ldr	r1, [r4, #36]	; 0x24
   1cb18:	ldr	r3, [r4, #48]	; 0x30
   1cb1c:	cmp	r1, r3
   1cb20:	movge	r1, r3
   1cb24:	cmp	r1, r2
   1cb28:	ble	1cad8 <__assert_fail@plt+0xb580>
   1cb2c:	ldm	r4, {ip, lr}
   1cb30:	add	r3, r2, #1
   1cb34:	cmp	r1, r3
   1cb38:	ldr	r5, [r4, #24]
   1cb3c:	add	ip, ip, r2
   1cb40:	ldrb	ip, [ip, r5]
   1cb44:	ldrb	r0, [r0, ip]
   1cb48:	strb	r0, [lr, r2]
   1cb4c:	ble	1cadc <__assert_fail@plt+0xb584>
   1cb50:	ldr	r2, [r4]
   1cb54:	ldr	r0, [r4, #24]
   1cb58:	ldr	ip, [r4, #64]	; 0x40
   1cb5c:	add	r2, r2, r3
   1cb60:	ldrb	r0, [r2, r0]
   1cb64:	ldr	r2, [r4, #4]
   1cb68:	ldrb	r0, [ip, r0]
   1cb6c:	strb	r0, [r2, r3]
   1cb70:	add	r3, r3, #1
   1cb74:	cmp	r1, r3
   1cb78:	bne	1cb50 <__assert_fail@plt+0xb5f8>
   1cb7c:	str	r1, [r4, #28]
   1cb80:	str	r1, [r4, #32]
   1cb84:	b	1cae4 <__assert_fail@plt+0xb58c>
   1cb88:	mov	r0, r4
   1cb8c:	bl	1826c <__assert_fail@plt+0x6d14>
   1cb90:	b	1cae4 <__assert_fail@plt+0xb58c>
   1cb94:	ldr	r5, [r4, #28]
   1cb98:	ldr	r7, [r4, #36]	; 0x24
   1cb9c:	ldr	r3, [r4, #48]	; 0x30
   1cba0:	cmp	r7, r3
   1cba4:	movge	r7, r3
   1cba8:	cmp	r7, r5
   1cbac:	ble	1cc20 <__assert_fail@plt+0xb6c8>
   1cbb0:	bl	113d8 <__ctype_toupper_loc@plt>
   1cbb4:	b	1cbd0 <__assert_fail@plt+0xb678>
   1cbb8:	ldr	r3, [r1, r3, lsl #2]
   1cbbc:	ldr	r2, [r4, #4]
   1cbc0:	strb	r3, [r2, r5]
   1cbc4:	add	r5, r5, #1
   1cbc8:	cmp	r7, r5
   1cbcc:	beq	1cc0c <__assert_fail@plt+0xb6b4>
   1cbd0:	ldr	r3, [r4]
   1cbd4:	ldr	r1, [r4, #24]
   1cbd8:	ldr	r2, [r4, #64]	; 0x40
   1cbdc:	add	r3, r3, r5
   1cbe0:	ldrb	r3, [r3, r1]
   1cbe4:	cmp	r2, #0
   1cbe8:	ldr	r1, [r0]
   1cbec:	beq	1cbb8 <__assert_fail@plt+0xb660>
   1cbf0:	ldrb	r2, [r2, r3]
   1cbf4:	ldr	r3, [r4, #4]
   1cbf8:	ldr	r2, [r1, r2, lsl #2]
   1cbfc:	strb	r2, [r3, r5]
   1cc00:	add	r5, r5, #1
   1cc04:	cmp	r7, r5
   1cc08:	bne	1cbd0 <__assert_fail@plt+0xb678>
   1cc0c:	str	r7, [r4, #28]
   1cc10:	str	r7, [r4, #32]
   1cc14:	b	1cae4 <__assert_fail@plt+0xb58c>
   1cc18:	mov	r6, #12
   1cc1c:	b	1cae4 <__assert_fail@plt+0xb58c>
   1cc20:	mov	r7, r5
   1cc24:	b	1cc0c <__assert_fail@plt+0xb6b4>
   1cc28:	ldr	r3, [r0, #36]	; 0x24
   1cc2c:	strd	r4, [sp, #-16]!
   1cc30:	mov	r4, r0
   1cc34:	mov	r5, r1
   1cc38:	str	r6, [sp, #8]
   1cc3c:	str	lr, [sp, #12]
   1cc40:	ldr	r6, [r0, #104]	; 0x68
   1cc44:	cmp	r3, r1
   1cc48:	bgt	1cc88 <__assert_fail@plt+0xb730>
   1cc4c:	ldr	r2, [r0, #48]	; 0x30
   1cc50:	cmp	r3, r2
   1cc54:	bge	1cc88 <__assert_fail@plt+0xb730>
   1cc58:	add	r1, r5, #1
   1cc5c:	mov	r0, r4
   1cc60:	bl	1ca38 <__assert_fail@plt+0xb4e0>
   1cc64:	cmp	r0, #0
   1cc68:	bne	1cc78 <__assert_fail@plt+0xb720>
   1cc6c:	cmp	r6, r5
   1cc70:	movge	r0, #0
   1cc74:	blt	1cca4 <__assert_fail@plt+0xb74c>
   1cc78:	ldrd	r4, [sp]
   1cc7c:	ldr	r6, [sp, #8]
   1cc80:	add	sp, sp, #12
   1cc84:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc88:	ldr	r3, [r4, #28]
   1cc8c:	cmp	r3, r5
   1cc90:	bgt	1cc6c <__assert_fail@plt+0xb714>
   1cc94:	ldr	r2, [r4, #48]	; 0x30
   1cc98:	cmp	r3, r2
   1cc9c:	bge	1cc6c <__assert_fail@plt+0xb714>
   1cca0:	b	1cc58 <__assert_fail@plt+0xb700>
   1cca4:	ldr	r3, [r4, #100]	; 0x64
   1cca8:	sub	r2, r5, r6
   1ccac:	add	r0, r6, #1
   1ccb0:	lsl	r2, r2, #2
   1ccb4:	mov	r1, #0
   1ccb8:	add	r0, r3, r0, lsl #2
   1ccbc:	bl	1145c <memset@plt>
   1ccc0:	str	r5, [r4, #104]	; 0x68
   1ccc4:	mov	r0, #0
   1ccc8:	ldrd	r4, [sp]
   1cccc:	ldr	r6, [sp, #8]
   1ccd0:	add	sp, sp, #12
   1ccd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccd8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ccdc:	mov	r5, r1
   1cce0:	mov	r4, r2
   1cce4:	strd	r6, [sp, #8]
   1cce8:	mov	r6, r0
   1ccec:	strd	r8, [sp, #16]
   1ccf0:	mov	r8, r3
   1ccf4:	mov	r9, #1
   1ccf8:	str	sl, [sp, #24]
   1ccfc:	str	lr, [sp, #28]
   1cd00:	sub	sp, sp, #8
   1cd04:	ldr	r7, [sp, #40]	; 0x28
   1cd08:	ldr	r1, [r5, #4]
   1cd0c:	cmp	r1, #0
   1cd10:	ble	1cd88 <__assert_fail@plt+0xb830>
   1cd14:	subs	r2, r1, #1
   1cd18:	ldr	ip, [r5, #8]
   1cd1c:	moveq	r0, r2
   1cd20:	beq	1cd7c <__assert_fail@plt+0xb824>
   1cd24:	mov	r0, #0
   1cd28:	add	r3, r0, r2
   1cd2c:	lsr	r3, r3, #1
   1cd30:	ldr	lr, [ip, r3, lsl #2]
   1cd34:	cmp	lr, r4
   1cd38:	blt	1ce0c <__assert_fail@plt+0xb8b4>
   1cd3c:	cmp	r0, r3
   1cd40:	bcs	1cd7c <__assert_fail@plt+0xb824>
   1cd44:	add	r2, r0, r3
   1cd48:	lsr	r2, r2, #1
   1cd4c:	ldr	lr, [ip, r2, lsl #2]
   1cd50:	cmp	r4, lr
   1cd54:	ble	1cd6c <__assert_fail@plt+0xb814>
   1cd58:	b	1ce00 <__assert_fail@plt+0xb8a8>
   1cd5c:	ldr	lr, [ip, r3, lsl #2]
   1cd60:	cmp	r4, lr
   1cd64:	bgt	1ce0c <__assert_fail@plt+0xb8b4>
   1cd68:	mov	r2, r3
   1cd6c:	add	r3, r2, r0
   1cd70:	cmp	r2, r0
   1cd74:	lsr	r3, r3, #1
   1cd78:	bhi	1cd5c <__assert_fail@plt+0xb804>
   1cd7c:	ldr	r3, [ip, r0, lsl #2]
   1cd80:	cmp	r4, r3
   1cd84:	beq	1ce24 <__assert_fail@plt+0xb8cc>
   1cd88:	ldr	r3, [r6]
   1cd8c:	add	r2, r3, r4, lsl #3
   1cd90:	ldrb	r2, [r2, #4]
   1cd94:	cmp	r2, r7
   1cd98:	bne	1cda8 <__assert_fail@plt+0xb850>
   1cd9c:	ldr	r3, [r3, r4, lsl #3]
   1cda0:	cmp	r3, r8
   1cda4:	beq	1cf1c <__assert_fail@plt+0xb9c4>
   1cda8:	ldr	r3, [r5]
   1cdac:	cmp	r3, #0
   1cdb0:	beq	1ce44 <__assert_fail@plt+0xb8ec>
   1cdb4:	cmp	r1, #0
   1cdb8:	ldr	sl, [r5, #8]
   1cdbc:	bne	1ce9c <__assert_fail@plt+0xb944>
   1cdc0:	str	r4, [sl]
   1cdc4:	ldr	r3, [r5, #4]
   1cdc8:	add	r3, r3, #1
   1cdcc:	str	r3, [r5, #4]
   1cdd0:	ldr	r3, [r6, #20]
   1cdd4:	add	r4, r4, r4, lsl #1
   1cdd8:	lsl	r4, r4, #2
   1cddc:	add	r3, r3, r4
   1cde0:	ldr	r2, [r3, #4]
   1cde4:	cmp	r2, #0
   1cde8:	beq	1ce24 <__assert_fail@plt+0xb8cc>
   1cdec:	cmp	r2, #2
   1cdf0:	ldr	r3, [r3, #8]
   1cdf4:	beq	1ce6c <__assert_fail@plt+0xb914>
   1cdf8:	ldr	r4, [r3]
   1cdfc:	b	1cd08 <__assert_fail@plt+0xb7b0>
   1ce00:	mov	r0, r2
   1ce04:	mov	r2, r3
   1ce08:	mov	r3, r0
   1ce0c:	add	r0, r3, #1
   1ce10:	cmp	r0, r2
   1ce14:	bcc	1cd28 <__assert_fail@plt+0xb7d0>
   1ce18:	ldr	r3, [ip, r0, lsl #2]
   1ce1c:	cmp	r4, r3
   1ce20:	bne	1cd88 <__assert_fail@plt+0xb830>
   1ce24:	mov	r0, #0
   1ce28:	add	sp, sp, #8
   1ce2c:	ldrd	r4, [sp]
   1ce30:	ldrd	r6, [sp, #8]
   1ce34:	ldrd	r8, [sp, #16]
   1ce38:	ldr	sl, [sp, #24]
   1ce3c:	add	sp, sp, #28
   1ce40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce44:	mov	r0, #4
   1ce48:	str	r9, [r5]
   1ce4c:	str	r9, [r5, #4]
   1ce50:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1ce54:	cmp	r0, #0
   1ce58:	mov	r3, r0
   1ce5c:	str	r0, [r5, #8]
   1ce60:	beq	1cf40 <__assert_fail@plt+0xb9e8>
   1ce64:	str	r4, [r0]
   1ce68:	b	1cdd0 <__assert_fail@plt+0xb878>
   1ce6c:	mov	r1, r5
   1ce70:	mov	r0, r6
   1ce74:	ldr	r2, [r3, #4]
   1ce78:	mov	r3, r8
   1ce7c:	str	r7, [sp]
   1ce80:	bl	1ccd8 <__assert_fail@plt+0xb780>
   1ce84:	cmp	r0, #0
   1ce88:	bne	1ce28 <__assert_fail@plt+0xb8d0>
   1ce8c:	ldr	r3, [r6, #20]
   1ce90:	add	r4, r3, r4
   1ce94:	ldr	r3, [r4, #8]
   1ce98:	b	1cdf8 <__assert_fail@plt+0xb8a0>
   1ce9c:	cmp	r1, r3
   1cea0:	beq	1cf50 <__assert_fail@plt+0xb9f8>
   1cea4:	ldr	r3, [sl]
   1cea8:	mov	r2, r1
   1ceac:	cmp	r4, r3
   1ceb0:	bge	1cee4 <__assert_fail@plt+0xb98c>
   1ceb4:	cmp	r1, #0
   1ceb8:	ble	1ced0 <__assert_fail@plt+0xb978>
   1cebc:	lsl	r2, r1, #2
   1cec0:	add	r0, sl, #4
   1cec4:	mov	r1, sl
   1cec8:	bl	11234 <memmove@plt>
   1cecc:	mov	r2, #0
   1ced0:	str	r4, [sl, r2, lsl #2]
   1ced4:	ldr	r3, [r5, #4]
   1ced8:	add	r3, r3, #1
   1cedc:	str	r3, [r5, #4]
   1cee0:	b	1cdd0 <__assert_fail@plt+0xb878>
   1cee4:	sub	r3, r1, #-1073741823	; 0xc0000001
   1cee8:	ldr	r0, [sl, r3, lsl #2]
   1ceec:	lsl	r3, r3, #2
   1cef0:	cmp	r4, r0
   1cef4:	bge	1ced0 <__assert_fail@plt+0xb978>
   1cef8:	add	r3, r3, #4
   1cefc:	add	r3, sl, r3
   1cf00:	str	r0, [r3], #-4
   1cf04:	sub	r1, r1, #1
   1cf08:	ldr	r0, [r3, #-4]
   1cf0c:	mov	r2, r1
   1cf10:	cmp	r4, r0
   1cf14:	blt	1cf00 <__assert_fail@plt+0xb9a8>
   1cf18:	b	1ced0 <__assert_fail@plt+0xb978>
   1cf1c:	cmp	r7, #9
   1cf20:	bne	1ce24 <__assert_fail@plt+0xb8cc>
   1cf24:	mov	r1, r4
   1cf28:	mov	r0, r5
   1cf2c:	bl	18d78 <__assert_fail@plt+0x7820>
   1cf30:	cmp	r0, #0
   1cf34:	bne	1ce24 <__assert_fail@plt+0xb8cc>
   1cf38:	mov	r0, #12
   1cf3c:	b	1ce28 <__assert_fail@plt+0xb8d0>
   1cf40:	mov	r0, #12
   1cf44:	str	r3, [r5]
   1cf48:	str	r3, [r5, #4]
   1cf4c:	b	1ce28 <__assert_fail@plt+0xb8d0>
   1cf50:	lsl	r3, r1, #1
   1cf54:	mov	r0, sl
   1cf58:	lsl	r1, r1, #3
   1cf5c:	str	r3, [r5]
   1cf60:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1cf64:	subs	sl, r0, #0
   1cf68:	beq	1cf38 <__assert_fail@plt+0xb9e0>
   1cf6c:	str	sl, [r5, #8]
   1cf70:	ldr	r1, [r5, #4]
   1cf74:	b	1cea4 <__assert_fail@plt+0xb94c>
   1cf78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cf7c:	mov	r5, r2
   1cf80:	mov	r4, r3
   1cf84:	strd	r6, [sp, #8]
   1cf88:	mov	r6, #0
   1cf8c:	mov	r7, r0
   1cf90:	strd	r8, [sp, #16]
   1cf94:	mov	r8, r1
   1cf98:	ldr	r1, [r1, #4]
   1cf9c:	strd	sl, [sp, #24]
   1cfa0:	str	lr, [sp, #32]
   1cfa4:	sub	sp, sp, #28
   1cfa8:	lsl	r0, r1, #2
   1cfac:	str	r1, [sp, #12]
   1cfb0:	str	r6, [sp, #16]
   1cfb4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1cfb8:	cmp	r0, r6
   1cfbc:	str	r0, [sp, #20]
   1cfc0:	beq	1d0c0 <__assert_fail@plt+0xbb68>
   1cfc4:	ldr	r3, [r8, #4]
   1cfc8:	add	r9, sp, #12
   1cfcc:	cmp	r3, r6
   1cfd0:	ble	1d068 <__assert_fail@plt+0xbb10>
   1cfd4:	ldr	r3, [r8, #8]
   1cfd8:	ldr	r1, [r7, #24]
   1cfdc:	ldr	r2, [r3, r6, lsl #2]
   1cfe0:	add	r3, r2, r2, lsl #1
   1cfe4:	add	r1, r1, r3, lsl #2
   1cfe8:	ldr	fp, [r1, #4]
   1cfec:	cmp	fp, #0
   1cff0:	ble	1d088 <__assert_fail@plt+0xbb30>
   1cff4:	ldr	ip, [r1, #8]
   1cff8:	mov	r3, #0
   1cffc:	ldr	sl, [r7]
   1d000:	sub	ip, ip, #4
   1d004:	b	1d010 <__assert_fail@plt+0xbab8>
   1d008:	cmp	fp, r3
   1d00c:	beq	1d088 <__assert_fail@plt+0xbb30>
   1d010:	ldr	r0, [ip, #4]!
   1d014:	add	r3, r3, #1
   1d018:	add	lr, sl, r0, lsl #3
   1d01c:	ldrb	lr, [lr, #4]
   1d020:	cmp	r4, lr
   1d024:	bne	1d008 <__assert_fail@plt+0xbab0>
   1d028:	ldr	lr, [sl, r0, lsl #3]
   1d02c:	cmp	r5, lr
   1d030:	bne	1d008 <__assert_fail@plt+0xbab0>
   1d034:	cmn	r0, #1
   1d038:	beq	1d088 <__assert_fail@plt+0xbb30>
   1d03c:	mov	r3, r5
   1d040:	mov	r1, r9
   1d044:	str	r4, [sp]
   1d048:	mov	r0, r7
   1d04c:	bl	1ccd8 <__assert_fail@plt+0xb780>
   1d050:	subs	sl, r0, #0
   1d054:	bne	1d098 <__assert_fail@plt+0xbb40>
   1d058:	ldr	r3, [r8, #4]
   1d05c:	add	r6, r6, #1
   1d060:	cmp	r3, r6
   1d064:	bgt	1cfd4 <__assert_fail@plt+0xba7c>
   1d068:	ldr	r0, [r8, #8]
   1d06c:	mov	sl, #0
   1d070:	bl	13e1c <__assert_fail@plt+0x28c4>
   1d074:	ldr	r1, [r9, #8]
   1d078:	ldrd	r2, [sp, #12]
   1d07c:	strd	r2, [r8]
   1d080:	str	r1, [r8, #8]
   1d084:	b	1d0a0 <__assert_fail@plt+0xbb48>
   1d088:	mov	r0, r9
   1d08c:	bl	19174 <__assert_fail@plt+0x7c1c>
   1d090:	subs	sl, r0, #0
   1d094:	beq	1d058 <__assert_fail@plt+0xbb00>
   1d098:	ldr	r0, [sp, #20]
   1d09c:	bl	13e1c <__assert_fail@plt+0x28c4>
   1d0a0:	mov	r0, sl
   1d0a4:	add	sp, sp, #28
   1d0a8:	ldrd	r4, [sp]
   1d0ac:	ldrd	r6, [sp, #8]
   1d0b0:	ldrd	r8, [sp, #16]
   1d0b4:	ldrd	sl, [sp, #24]
   1d0b8:	add	sp, sp, #32
   1d0bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0c0:	mov	sl, #12
   1d0c4:	b	1d0a0 <__assert_fail@plt+0xbb48>
   1d0c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d0cc:	mov	r4, #0
   1d0d0:	strd	r6, [sp, #8]
   1d0d4:	mov	r6, r0
   1d0d8:	add	r0, r1, r1, lsl #1
   1d0dc:	strd	r8, [sp, #16]
   1d0e0:	strd	sl, [sp, #24]
   1d0e4:	str	lr, [sp, #32]
   1d0e8:	sub	sp, sp, #44	; 0x2c
   1d0ec:	str	r1, [sp, #4]
   1d0f0:	ldr	r1, [r6, #28]
   1d0f4:	str	r3, [sp, #16]
   1d0f8:	str	r4, [sp, #28]
   1d0fc:	str	r4, [sp, #32]
   1d100:	str	r4, [sp, #36]	; 0x24
   1d104:	add	r9, r1, r0, lsl #2
   1d108:	ldr	sl, [r9, #4]
   1d10c:	str	r9, [sp, #20]
   1d110:	cmp	sl, r4
   1d114:	ble	1d5f4 <__assert_fail@plt+0xc09c>
   1d118:	str	r2, [sp, #8]
   1d11c:	ldr	r1, [r9, #8]
   1d120:	ldr	r3, [sp, #4]
   1d124:	ldr	r2, [r1, r4, lsl #2]
   1d128:	cmp	r3, r2
   1d12c:	beq	1d368 <__assert_fail@plt+0xbe10>
   1d130:	ldr	r3, [r6]
   1d134:	add	r3, r3, r2, lsl #3
   1d138:	ldrb	r3, [r3, #4]
   1d13c:	tst	r3, #8
   1d140:	beq	1d368 <__assert_fail@plt+0xbe10>
   1d144:	ldr	r3, [r6, #20]
   1d148:	add	r2, r2, r2, lsl #1
   1d14c:	lsl	r2, r2, #2
   1d150:	add	r3, r3, r2
   1d154:	ldmib	r3, {r0, r3}
   1d158:	cmp	r0, #1
   1d15c:	mvnle	r7, #0
   1d160:	ldrgt	r7, [r3, #4]
   1d164:	sub	lr, sl, #1
   1d168:	cmp	lr, #0
   1d16c:	mov	ip, lr
   1d170:	ldr	r5, [r3]
   1d174:	moveq	r8, lr
   1d178:	beq	1d1d8 <__assert_fail@plt+0xbc80>
   1d17c:	mov	r0, lr
   1d180:	mov	r8, #0
   1d184:	add	r3, r0, r8
   1d188:	lsr	r3, r3, #1
   1d18c:	ldr	fp, [r1, r3, lsl #2]
   1d190:	cmp	r5, fp
   1d194:	bgt	1d4fc <__assert_fail@plt+0xbfa4>
   1d198:	cmp	r3, r8
   1d19c:	bls	1d1d8 <__assert_fail@plt+0xbc80>
   1d1a0:	add	r0, r3, r8
   1d1a4:	lsr	r0, r0, #1
   1d1a8:	ldr	fp, [r1, r0, lsl #2]
   1d1ac:	cmp	r5, fp
   1d1b0:	ble	1d1c8 <__assert_fail@plt+0xbc70>
   1d1b4:	b	1d4f0 <__assert_fail@plt+0xbf98>
   1d1b8:	ldr	fp, [r1, r3, lsl #2]
   1d1bc:	cmp	r5, fp
   1d1c0:	bgt	1d4fc <__assert_fail@plt+0xbfa4>
   1d1c4:	mov	r0, r3
   1d1c8:	add	r3, r8, r0
   1d1cc:	cmp	r8, r0
   1d1d0:	lsr	r3, r3, #1
   1d1d4:	bcc	1d1b8 <__assert_fail@plt+0xbc60>
   1d1d8:	ldr	r3, [r1, r8, lsl #2]
   1d1dc:	cmp	r5, r3
   1d1e0:	beq	1d270 <__assert_fail@plt+0xbd18>
   1d1e4:	ldr	r3, [sp, #8]
   1d1e8:	ldr	r0, [r3, #4]
   1d1ec:	cmp	r0, #0
   1d1f0:	ble	1d270 <__assert_fail@plt+0xbd18>
   1d1f4:	subs	r0, r0, #1
   1d1f8:	ldr	fp, [r3, #8]
   1d1fc:	moveq	r8, r0
   1d200:	beq	1d264 <__assert_fail@plt+0xbd0c>
   1d204:	mov	r8, #0
   1d208:	str	r2, [sp, #12]
   1d20c:	add	r3, r0, r8
   1d210:	lsr	r3, r3, #1
   1d214:	ldr	r2, [fp, r3, lsl #2]
   1d218:	cmp	r5, r2
   1d21c:	bgt	1d59c <__assert_fail@plt+0xc044>
   1d220:	cmp	r3, r8
   1d224:	bls	1d260 <__assert_fail@plt+0xbd08>
   1d228:	add	r0, r3, r8
   1d22c:	lsr	r0, r0, #1
   1d230:	ldr	r2, [fp, r0, lsl #2]
   1d234:	cmp	r5, r2
   1d238:	ble	1d250 <__assert_fail@plt+0xbcf8>
   1d23c:	b	1d590 <__assert_fail@plt+0xc038>
   1d240:	ldr	r2, [fp, r3, lsl #2]
   1d244:	cmp	r5, r2
   1d248:	bgt	1d59c <__assert_fail@plt+0xc044>
   1d24c:	mov	r0, r3
   1d250:	add	r3, r8, r0
   1d254:	cmp	r8, r0
   1d258:	lsr	r3, r3, #1
   1d25c:	bcc	1d240 <__assert_fail@plt+0xbce8>
   1d260:	ldr	r2, [sp, #12]
   1d264:	ldr	r3, [fp, r8, lsl #2]
   1d268:	cmp	r5, r3
   1d26c:	beq	1d56c <__assert_fail@plt+0xc014>
   1d270:	cmp	r7, #0
   1d274:	ble	1d368 <__assert_fail@plt+0xbe10>
   1d278:	cmp	lr, #0
   1d27c:	movne	lr, #0
   1d280:	beq	1d2d8 <__assert_fail@plt+0xbd80>
   1d284:	add	r3, ip, lr
   1d288:	lsr	r3, r3, #1
   1d28c:	ldr	r0, [r1, r3, lsl #2]
   1d290:	cmp	r0, r7
   1d294:	blt	1d5b8 <__assert_fail@plt+0xc060>
   1d298:	cmp	r3, lr
   1d29c:	bls	1d2d8 <__assert_fail@plt+0xbd80>
   1d2a0:	add	ip, r3, lr
   1d2a4:	lsr	ip, ip, #1
   1d2a8:	ldr	r0, [r1, ip, lsl #2]
   1d2ac:	cmp	r7, r0
   1d2b0:	ble	1d2c8 <__assert_fail@plt+0xbd70>
   1d2b4:	b	1d5ac <__assert_fail@plt+0xc054>
   1d2b8:	ldr	r0, [r1, r3, lsl #2]
   1d2bc:	cmp	r0, r7
   1d2c0:	blt	1d5b8 <__assert_fail@plt+0xc060>
   1d2c4:	mov	ip, r3
   1d2c8:	add	r3, lr, ip
   1d2cc:	cmp	lr, ip
   1d2d0:	lsr	r3, r3, #1
   1d2d4:	bcc	1d2b8 <__assert_fail@plt+0xbd60>
   1d2d8:	ldr	r3, [r1, lr, lsl #2]
   1d2dc:	cmp	r3, r7
   1d2e0:	beq	1d368 <__assert_fail@plt+0xbe10>
   1d2e4:	ldr	r3, [sp, #8]
   1d2e8:	ldr	r1, [r3, #4]
   1d2ec:	cmp	r1, #0
   1d2f0:	ble	1d368 <__assert_fail@plt+0xbe10>
   1d2f4:	subs	r1, r1, #1
   1d2f8:	ldr	ip, [r3, #8]
   1d2fc:	moveq	r0, r1
   1d300:	beq	1d35c <__assert_fail@plt+0xbe04>
   1d304:	mov	r0, #0
   1d308:	add	r3, r1, r0
   1d30c:	lsr	r3, r3, #1
   1d310:	ldr	lr, [ip, r3, lsl #2]
   1d314:	cmp	lr, r7
   1d318:	blt	1d5d4 <__assert_fail@plt+0xc07c>
   1d31c:	cmp	r3, r0
   1d320:	bls	1d35c <__assert_fail@plt+0xbe04>
   1d324:	add	r1, r3, r0
   1d328:	lsr	r1, r1, #1
   1d32c:	ldr	lr, [ip, r1, lsl #2]
   1d330:	cmp	r7, lr
   1d334:	ble	1d34c <__assert_fail@plt+0xbdf4>
   1d338:	b	1d5c8 <__assert_fail@plt+0xc070>
   1d33c:	ldr	lr, [ip, r3, lsl #2]
   1d340:	cmp	lr, r7
   1d344:	blt	1d5d4 <__assert_fail@plt+0xc07c>
   1d348:	mov	r1, r3
   1d34c:	add	r3, r0, r1
   1d350:	cmp	r0, r1
   1d354:	lsr	r3, r3, #1
   1d358:	bcc	1d33c <__assert_fail@plt+0xbde4>
   1d35c:	ldr	r3, [ip, r0, lsl #2]
   1d360:	cmp	r3, r7
   1d364:	beq	1d56c <__assert_fail@plt+0xc014>
   1d368:	add	r4, r4, #1
   1d36c:	cmp	r4, sl
   1d370:	blt	1d11c <__assert_fail@plt+0xbbc4>
   1d374:	cmp	sl, #0
   1d378:	ldr	r5, [sp, #8]
   1d37c:	ldr	r0, [sp, #36]	; 0x24
   1d380:	ble	1d4ac <__assert_fail@plt+0xbf54>
   1d384:	mov	r1, #0
   1d388:	ldr	r4, [sp, #20]
   1d38c:	ldr	ip, [r4, #8]
   1d390:	sub	ip, ip, #4
   1d394:	ldr	r2, [sp, #32]
   1d398:	ldr	lr, [ip, #4]!
   1d39c:	cmp	r2, #0
   1d3a0:	ble	1d414 <__assert_fail@plt+0xbebc>
   1d3a4:	subs	r2, r2, #1
   1d3a8:	moveq	r7, r2
   1d3ac:	beq	1d408 <__assert_fail@plt+0xbeb0>
   1d3b0:	mov	r7, #0
   1d3b4:	add	r3, r2, r7
   1d3b8:	lsr	r3, r3, #1
   1d3bc:	ldr	r6, [r0, r3, lsl #2]
   1d3c0:	cmp	r6, lr
   1d3c4:	blt	1d4e0 <__assert_fail@plt+0xbf88>
   1d3c8:	cmp	r3, r7
   1d3cc:	bls	1d408 <__assert_fail@plt+0xbeb0>
   1d3d0:	add	r2, r3, r7
   1d3d4:	lsr	r2, r2, #1
   1d3d8:	ldr	r6, [r0, r2, lsl #2]
   1d3dc:	cmp	lr, r6
   1d3e0:	ble	1d3f8 <__assert_fail@plt+0xbea0>
   1d3e4:	b	1d4d4 <__assert_fail@plt+0xbf7c>
   1d3e8:	ldr	r6, [r0, r3, lsl #2]
   1d3ec:	cmp	lr, r6
   1d3f0:	bgt	1d4e0 <__assert_fail@plt+0xbf88>
   1d3f4:	mov	r2, r3
   1d3f8:	add	r3, r7, r2
   1d3fc:	cmp	r7, r2
   1d400:	lsr	r3, r3, #1
   1d404:	bcc	1d3e8 <__assert_fail@plt+0xbe90>
   1d408:	ldr	r3, [r0, r7, lsl #2]
   1d40c:	cmp	lr, r3
   1d410:	beq	1d4a0 <__assert_fail@plt+0xbf48>
   1d414:	ldr	r7, [r5, #4]
   1d418:	cmp	r7, #0
   1d41c:	ble	1d4a0 <__assert_fail@plt+0xbf48>
   1d420:	sub	r8, r7, #1
   1d424:	ldr	r3, [r5, #8]
   1d428:	cmp	r8, #0
   1d42c:	mov	r9, r8
   1d430:	moveq	r6, r8
   1d434:	beq	1d490 <__assert_fail@plt+0xbf38>
   1d438:	mov	r6, #0
   1d43c:	add	r2, r9, r6
   1d440:	lsr	r2, r2, #1
   1d444:	ldr	fp, [r3, r2, lsl #2]
   1d448:	cmp	lr, fp
   1d44c:	bgt	1d55c <__assert_fail@plt+0xc004>
   1d450:	cmp	r2, r6
   1d454:	bls	1d490 <__assert_fail@plt+0xbf38>
   1d458:	add	r9, r2, r6
   1d45c:	lsr	r9, r9, #1
   1d460:	ldr	fp, [r3, r9, lsl #2]
   1d464:	cmp	lr, fp
   1d468:	ble	1d480 <__assert_fail@plt+0xbf28>
   1d46c:	b	1d550 <__assert_fail@plt+0xbff8>
   1d470:	ldr	fp, [r3, r2, lsl #2]
   1d474:	cmp	lr, fp
   1d478:	bgt	1d55c <__assert_fail@plt+0xc004>
   1d47c:	mov	r9, r2
   1d480:	add	r2, r6, r9
   1d484:	cmp	r6, r9
   1d488:	lsr	r2, r2, #1
   1d48c:	bcc	1d470 <__assert_fail@plt+0xbf18>
   1d490:	ldr	r2, [r3, r6, lsl #2]
   1d494:	add	r3, r3, r6, lsl #2
   1d498:	cmp	lr, r2
   1d49c:	beq	1d50c <__assert_fail@plt+0xbfb4>
   1d4a0:	add	r1, r1, #1
   1d4a4:	cmp	r1, sl
   1d4a8:	blt	1d394 <__assert_fail@plt+0xbe3c>
   1d4ac:	mov	r7, #0
   1d4b0:	bl	13e1c <__assert_fail@plt+0x28c4>
   1d4b4:	mov	r0, r7
   1d4b8:	add	sp, sp, #44	; 0x2c
   1d4bc:	ldrd	r4, [sp]
   1d4c0:	ldrd	r6, [sp, #8]
   1d4c4:	ldrd	r8, [sp, #16]
   1d4c8:	ldrd	sl, [sp, #24]
   1d4cc:	add	sp, sp, #32
   1d4d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4d4:	mov	r6, r2
   1d4d8:	mov	r2, r3
   1d4dc:	mov	r3, r6
   1d4e0:	add	r7, r3, #1
   1d4e4:	cmp	r7, r2
   1d4e8:	bcc	1d3b4 <__assert_fail@plt+0xbe5c>
   1d4ec:	b	1d408 <__assert_fail@plt+0xbeb0>
   1d4f0:	mov	r8, r3
   1d4f4:	mov	r3, r0
   1d4f8:	mov	r0, r8
   1d4fc:	add	r8, r3, #1
   1d500:	cmp	r0, r8
   1d504:	bhi	1d184 <__assert_fail@plt+0xbc2c>
   1d508:	b	1d1d8 <__assert_fail@plt+0xbc80>
   1d50c:	cmp	r6, r7
   1d510:	mov	r2, r6
   1d514:	movlt	r7, #0
   1d518:	movge	r7, #1
   1d51c:	orrs	lr, r7, r6, lsr #31
   1d520:	bne	1d4a0 <__assert_fail@plt+0xbf48>
   1d524:	cmp	r6, r8
   1d528:	str	r8, [r5, #4]
   1d52c:	bge	1d548 <__assert_fail@plt+0xbff0>
   1d530:	ldr	lr, [r3, #4]
   1d534:	add	r2, r2, #1
   1d538:	str	lr, [r3], #4
   1d53c:	ldr	lr, [r5, #4]
   1d540:	cmp	r2, lr
   1d544:	blt	1d530 <__assert_fail@plt+0xbfd8>
   1d548:	ldr	sl, [r4, #4]
   1d54c:	b	1d4a0 <__assert_fail@plt+0xbf48>
   1d550:	mov	r6, r2
   1d554:	mov	r2, r9
   1d558:	mov	r9, r6
   1d55c:	add	r6, r2, #1
   1d560:	cmp	r6, r9
   1d564:	bcc	1d43c <__assert_fail@plt+0xbee4>
   1d568:	b	1d490 <__assert_fail@plt+0xbf38>
   1d56c:	ldr	r3, [r6, #28]
   1d570:	add	r0, sp, #28
   1d574:	ldr	r1, [sp, #16]
   1d578:	add	r2, r3, r2
   1d57c:	bl	18f8c <__assert_fail@plt+0x7a34>
   1d580:	cmp	r0, #0
   1d584:	bne	1d5e4 <__assert_fail@plt+0xc08c>
   1d588:	ldr	sl, [r9, #4]
   1d58c:	b	1d368 <__assert_fail@plt+0xbe10>
   1d590:	mov	r8, r0
   1d594:	mov	r0, r3
   1d598:	mov	r3, r8
   1d59c:	add	r8, r3, #1
   1d5a0:	cmp	r8, r0
   1d5a4:	bcc	1d20c <__assert_fail@plt+0xbcb4>
   1d5a8:	b	1d260 <__assert_fail@plt+0xbd08>
   1d5ac:	mov	r0, ip
   1d5b0:	mov	ip, r3
   1d5b4:	mov	r3, r0
   1d5b8:	add	lr, r3, #1
   1d5bc:	cmp	lr, ip
   1d5c0:	bcc	1d284 <__assert_fail@plt+0xbd2c>
   1d5c4:	b	1d2d8 <__assert_fail@plt+0xbd80>
   1d5c8:	mov	r0, r1
   1d5cc:	mov	r1, r3
   1d5d0:	mov	r3, r0
   1d5d4:	add	r0, r3, #1
   1d5d8:	cmp	r0, r1
   1d5dc:	bcc	1d308 <__assert_fail@plt+0xbdb0>
   1d5e0:	b	1d35c <__assert_fail@plt+0xbe04>
   1d5e4:	mov	r7, r0
   1d5e8:	ldr	r0, [sp, #36]	; 0x24
   1d5ec:	bl	13e1c <__assert_fail@plt+0x28c4>
   1d5f0:	b	1d4b4 <__assert_fail@plt+0xbf5c>
   1d5f4:	mov	r0, r4
   1d5f8:	b	1d4ac <__assert_fail@plt+0xbf54>
   1d5fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d600:	mov	r5, r2
   1d604:	ldr	r2, [r1, #20]
   1d608:	strd	r6, [sp, #8]
   1d60c:	mov	r7, r1
   1d610:	strd	r8, [sp, #16]
   1d614:	add	r9, r5, r5, lsl #1
   1d618:	strd	sl, [sp, #24]
   1d61c:	lsl	r9, r9, #2
   1d620:	str	lr, [sp, #32]
   1d624:	sub	sp, sp, #44	; 0x2c
   1d628:	add	r2, r2, r9
   1d62c:	str	r0, [sp, #16]
   1d630:	ldr	r2, [r2, #4]
   1d634:	str	r3, [sp, #20]
   1d638:	add	r3, r2, #1
   1d63c:	lsl	r0, r3, #2
   1d640:	str	r3, [sp, #8]
   1d644:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1d648:	subs	r4, r0, #0
   1d64c:	beq	1d968 <__assert_fail@plt+0xc410>
   1d650:	ldr	ip, [r7]
   1d654:	lsl	r6, r5, #3
   1d658:	mov	r3, #65280	; 0xff00
   1d65c:	movt	r3, #3
   1d660:	str	r5, [r4]
   1d664:	mvn	r8, #0
   1d668:	ldr	r1, [r7, #24]
   1d66c:	add	r0, ip, r6
   1d670:	ldr	lr, [r0, #4]
   1d674:	add	r2, r1, r9
   1d678:	str	r8, [r2, #4]
   1d67c:	and	r3, r3, lr
   1d680:	cmp	r3, #0
   1d684:	beq	1d6b4 <__assert_fail@plt+0xc15c>
   1d688:	ldr	r3, [r7, #20]
   1d68c:	add	r3, r3, r9
   1d690:	ldr	r8, [r3, #4]
   1d694:	cmp	r8, #0
   1d698:	beq	1d92c <__assert_fail@plt+0xc3d4>
   1d69c:	ldr	r3, [r3, #8]
   1d6a0:	ldr	r3, [r3]
   1d6a4:	add	ip, ip, r3, lsl #3
   1d6a8:	ldrb	r3, [ip, #6]
   1d6ac:	tst	r3, #4
   1d6b0:	beq	1d934 <__assert_fail@plt+0xc3dc>
   1d6b4:	ldrb	r3, [r0, #4]
   1d6b8:	tst	r3, #8
   1d6bc:	beq	1d858 <__assert_fail@plt+0xc300>
   1d6c0:	ldr	ip, [r7, #20]
   1d6c4:	add	r3, ip, r9
   1d6c8:	ldr	r2, [r3, #4]
   1d6cc:	cmp	r2, #0
   1d6d0:	ble	1d858 <__assert_fail@plt+0xc300>
   1d6d4:	mov	r2, #0
   1d6d8:	mov	sl, #1
   1d6dc:	mov	r8, r2
   1d6e0:	str	r2, [sp, #12]
   1d6e4:	ldr	r3, [r3, #8]
   1d6e8:	ldr	r2, [r3, r8, lsl #2]
   1d6ec:	add	r6, r2, r2, lsl #1
   1d6f0:	lsl	r6, r6, #2
   1d6f4:	add	r0, r1, r6
   1d6f8:	ldr	r3, [r0, #4]
   1d6fc:	cmn	r3, #1
   1d700:	moveq	r3, #1
   1d704:	streq	r3, [sp, #12]
   1d708:	beq	1d820 <__assert_fail@plt+0xc2c8>
   1d70c:	cmp	r3, #0
   1d710:	beq	1d8c0 <__assert_fail@plt+0xc368>
   1d714:	ldrd	r2, [r0]
   1d718:	strd	r2, [sp, #28]
   1d71c:	ldr	r3, [r0, #8]
   1d720:	str	r3, [sp, #36]	; 0x24
   1d724:	ldr	r2, [sp, #32]
   1d728:	cmp	r2, #0
   1d72c:	mov	r3, r2
   1d730:	beq	1d808 <__assert_fail@plt+0xc2b0>
   1d734:	ldr	r1, [sp, #8]
   1d738:	add	fp, sl, r2, lsl #1
   1d73c:	cmp	r1, fp
   1d740:	blt	1d8f4 <__assert_fail@plt+0xc39c>
   1d744:	cmp	sl, #0
   1d748:	beq	1d970 <__assert_fail@plt+0xc418>
   1d74c:	sub	r2, r2, #1
   1d750:	sub	r5, sl, #1
   1d754:	ldr	r1, [sp, #36]	; 0x24
   1d758:	cmp	r2, #0
   1d75c:	cmpge	r5, #0
   1d760:	mvn	r0, r2
   1d764:	blt	1d7b0 <__assert_fail@plt+0xc258>
   1d768:	mov	r3, r5
   1d76c:	ldr	lr, [r4, r3, lsl #2]
   1d770:	ldr	ip, [r1, r2, lsl #2]
   1d774:	cmp	lr, ip
   1d778:	subeq	r2, r2, #1
   1d77c:	subeq	r3, r3, #1
   1d780:	mvneq	r0, r2
   1d784:	beq	1d7a0 <__assert_fail@plt+0xc248>
   1d788:	subge	r3, r3, #1
   1d78c:	bge	1d7a0 <__assert_fail@plt+0xc248>
   1d790:	sub	r2, r2, #1
   1d794:	sub	fp, fp, #1
   1d798:	mvn	r0, r2
   1d79c:	str	ip, [r4, fp, lsl #2]
   1d7a0:	mvn	ip, r3
   1d7a4:	lsr	ip, ip, #31
   1d7a8:	ands	ip, ip, r0, lsr #31
   1d7ac:	bne	1d76c <__assert_fail@plt+0xc214>
   1d7b0:	cmp	r2, #0
   1d7b4:	blt	1d7cc <__assert_fail@plt+0xc274>
   1d7b8:	add	r2, r2, #1
   1d7bc:	sub	fp, fp, r2
   1d7c0:	lsl	r2, r2, #2
   1d7c4:	add	r0, r4, fp, lsl #2
   1d7c8:	bl	11264 <memcpy@plt>
   1d7cc:	ldr	r3, [sp, #32]
   1d7d0:	add	r3, sl, r3, lsl #1
   1d7d4:	subs	r2, r3, fp
   1d7d8:	sub	r3, r3, #1
   1d7dc:	beq	1d808 <__assert_fail@plt+0xc2b0>
   1d7e0:	add	sl, sl, r2
   1d7e4:	ldr	ip, [r4, r3, lsl #2]
   1d7e8:	add	r1, r5, r2
   1d7ec:	ldr	r0, [r4, r5, lsl #2]
   1d7f0:	cmp	ip, r0
   1d7f4:	ble	1d8a0 <__assert_fail@plt+0xc348>
   1d7f8:	subs	r2, r2, #1
   1d7fc:	sub	r3, r3, #1
   1d800:	str	ip, [r4, r1, lsl #2]
   1d804:	bne	1d7e4 <__assert_fail@plt+0xc28c>
   1d808:	ldr	r1, [r7, #24]
   1d80c:	add	r6, r1, r6
   1d810:	ldr	r3, [r6, #4]
   1d814:	cmp	r3, #0
   1d818:	beq	1d8d8 <__assert_fail@plt+0xc380>
   1d81c:	ldr	ip, [r7, #20]
   1d820:	add	r3, ip, r9
   1d824:	add	r8, r8, #1
   1d828:	ldr	r2, [r3, #4]
   1d82c:	cmp	r2, r8
   1d830:	bgt	1d6e4 <__assert_fail@plt+0xc18c>
   1d834:	ldr	r0, [sp, #12]
   1d838:	add	r2, r1, r9
   1d83c:	ldr	r3, [sp, #20]
   1d840:	eor	r3, r3, #1
   1d844:	tst	r0, r3
   1d848:	beq	1d860 <__assert_fail@plt+0xc308>
   1d84c:	mov	r3, #0
   1d850:	str	r3, [r2, #4]
   1d854:	b	1d870 <__assert_fail@plt+0xc318>
   1d858:	mov	sl, #1
   1d85c:	add	r2, r1, r9
   1d860:	ldr	r3, [sp, #8]
   1d864:	str	r3, [r1, r9]
   1d868:	str	sl, [r2, #4]
   1d86c:	str	r4, [r2, #8]
   1d870:	ldr	r2, [sp, #8]
   1d874:	mov	r0, #0
   1d878:	ldr	r3, [sp, #16]
   1d87c:	stm	r3, {r2, sl}
   1d880:	str	r4, [r3, #8]
   1d884:	add	sp, sp, #44	; 0x2c
   1d888:	ldrd	r4, [sp]
   1d88c:	ldrd	r6, [sp, #8]
   1d890:	ldrd	r8, [sp, #16]
   1d894:	ldrd	sl, [sp, #24]
   1d898:	add	sp, sp, #32
   1d89c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8a0:	subs	r5, r5, #1
   1d8a4:	str	r0, [r4, r1, lsl #2]
   1d8a8:	bpl	1d7e4 <__assert_fail@plt+0xc28c>
   1d8ac:	lsl	r2, r2, #2
   1d8b0:	mov	r0, r4
   1d8b4:	add	r1, r4, fp, lsl #2
   1d8b8:	bl	11264 <memcpy@plt>
   1d8bc:	b	1d808 <__assert_fail@plt+0xc2b0>
   1d8c0:	mov	r1, r7
   1d8c4:	add	r0, sp, #28
   1d8c8:	bl	1d5fc <__assert_fail@plt+0xc0a4>
   1d8cc:	cmp	r0, #0
   1d8d0:	beq	1d724 <__assert_fail@plt+0xc1cc>
   1d8d4:	b	1d884 <__assert_fail@plt+0xc32c>
   1d8d8:	mov	r3, #1
   1d8dc:	ldr	r0, [sp, #36]	; 0x24
   1d8e0:	str	r3, [sp, #12]
   1d8e4:	bl	13e1c <__assert_fail@plt+0x28c4>
   1d8e8:	ldr	ip, [r7, #20]
   1d8ec:	ldr	r1, [r7, #24]
   1d8f0:	b	1d820 <__assert_fail@plt+0xc2c8>
   1d8f4:	add	r2, r1, r2
   1d8f8:	mov	r0, r4
   1d8fc:	lsl	r3, r2, #1
   1d900:	lsl	r1, r2, #3
   1d904:	str	r3, [sp, #8]
   1d908:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1d90c:	subs	r4, r0, #0
   1d910:	beq	1d968 <__assert_fail@plt+0xc410>
   1d914:	cmp	sl, #0
   1d918:	ldreq	r3, [sp, #32]
   1d91c:	beq	1d970 <__assert_fail@plt+0xc418>
   1d920:	ldr	r2, [sp, #32]
   1d924:	add	fp, sl, r2, lsl #1
   1d928:	b	1d74c <__assert_fail@plt+0xc1f4>
   1d92c:	mov	sl, #1
   1d930:	b	1d860 <__assert_fail@plt+0xc308>
   1d934:	ubfx	lr, lr, #8, #10
   1d938:	mov	r3, r5
   1d93c:	mov	r2, r5
   1d940:	mov	r1, r5
   1d944:	mov	r0, r7
   1d948:	str	lr, [sp]
   1d94c:	bl	1c64c <__assert_fail@plt+0xb0f4>
   1d950:	cmp	r0, #0
   1d954:	bne	1d884 <__assert_fail@plt+0xc32c>
   1d958:	ldr	r0, [r7]
   1d95c:	ldr	r1, [r7, #24]
   1d960:	add	r0, r0, r6
   1d964:	b	1d6b4 <__assert_fail@plt+0xc15c>
   1d968:	mov	r0, #12
   1d96c:	b	1d884 <__assert_fail@plt+0xc32c>
   1d970:	mov	r0, r4
   1d974:	lsl	r2, r3, #2
   1d978:	ldr	r1, [sp, #36]	; 0x24
   1d97c:	mov	sl, r3
   1d980:	bl	11264 <memcpy@plt>
   1d984:	b	1d808 <__assert_fail@plt+0xc2b0>
   1d988:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d98c:	mov	r3, #0
   1d990:	strd	r6, [sp, #8]
   1d994:	strd	r8, [sp, #16]
   1d998:	ldr	r8, [r2, #4]
   1d99c:	strd	sl, [sp, #24]
   1d9a0:	str	lr, [sp, #32]
   1d9a4:	sub	sp, sp, #4
   1d9a8:	str	r3, [r0]
   1d9ac:	cmp	r8, r3
   1d9b0:	beq	1dc40 <__assert_fail@plt+0xc6e8>
   1d9b4:	mov	r5, r8
   1d9b8:	ble	1d9d4 <__assert_fail@plt+0xc47c>
   1d9bc:	ldr	r3, [r2, #8]
   1d9c0:	add	lr, r3, r8, lsl #2
   1d9c4:	ldr	ip, [r3], #4
   1d9c8:	cmp	r3, lr
   1d9cc:	add	r5, r5, ip
   1d9d0:	bne	1d9c4 <__assert_fail@plt+0xc46c>
   1d9d4:	ldr	ip, [r1, #32]
   1d9d8:	ldr	r3, [r1, #68]	; 0x44
   1d9dc:	and	r3, r3, r5
   1d9e0:	add	r3, r3, r3, lsl #1
   1d9e4:	lsl	r3, r3, #2
   1d9e8:	ldr	r9, [ip, r3]
   1d9ec:	add	r3, ip, r3
   1d9f0:	cmp	r9, #0
   1d9f4:	ble	1da3c <__assert_fail@plt+0xc4e4>
   1d9f8:	ldr	lr, [r3, #8]
   1d9fc:	mov	ip, #0
   1da00:	sub	lr, lr, #4
   1da04:	b	1da14 <__assert_fail@plt+0xc4bc>
   1da08:	add	ip, ip, #1
   1da0c:	cmp	ip, r9
   1da10:	beq	1da3c <__assert_fail@plt+0xc4e4>
   1da14:	ldr	r4, [lr, #4]!
   1da18:	ldr	r3, [r4]
   1da1c:	cmp	r3, r5
   1da20:	bne	1da08 <__assert_fail@plt+0xc4b0>
   1da24:	ldr	r3, [r4, #8]
   1da28:	cmp	r8, r3
   1da2c:	beq	1db68 <__assert_fail@plt+0xc610>
   1da30:	add	ip, ip, #1
   1da34:	cmp	ip, r9
   1da38:	bne	1da14 <__assert_fail@plt+0xc4bc>
   1da3c:	mov	r6, r1
   1da40:	mov	r7, r0
   1da44:	mov	r1, #1
   1da48:	mov	r0, #56	; 0x38
   1da4c:	mov	r9, r2
   1da50:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   1da54:	subs	r4, r0, #0
   1da58:	beq	1dc08 <__assert_fail@plt+0xc6b0>
   1da5c:	ldr	r3, [r9, #4]
   1da60:	add	r8, r4, #4
   1da64:	cmp	r3, #0
   1da68:	str	r3, [r4, #8]
   1da6c:	ble	1db90 <__assert_fail@plt+0xc638>
   1da70:	lsl	r0, r3, #2
   1da74:	str	r3, [r4, #4]
   1da78:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1da7c:	cmp	r0, #0
   1da80:	mov	r3, r0
   1da84:	str	r0, [r4, #12]
   1da88:	beq	1dc48 <__assert_fail@plt+0xc6f0>
   1da8c:	ldr	sl, [r9, #4]
   1da90:	ldr	r1, [r9, #8]
   1da94:	lsl	fp, sl, #2
   1da98:	mov	r2, fp
   1da9c:	bl	11264 <memcpy@plt>
   1daa0:	cmp	sl, #0
   1daa4:	str	r8, [r4, #40]	; 0x28
   1daa8:	ble	1dba4 <__assert_fail@plt+0xc64c>
   1daac:	ldr	r1, [r9, #8]
   1dab0:	mov	sl, #65280	; 0xff00
   1dab4:	movt	sl, #3
   1dab8:	ldr	r9, [r6]
   1dabc:	add	lr, fp, r1
   1dac0:	b	1db04 <__assert_fail@plt+0xc5ac>
   1dac4:	ldrb	r2, [r4, #52]	; 0x34
   1dac8:	cmp	r0, #2
   1dacc:	ldrb	fp, [r3, #6]
   1dad0:	ubfx	ip, r2, #5, #1
   1dad4:	ubfx	fp, fp, #4, #1
   1dad8:	orr	ip, ip, fp
   1dadc:	bfi	r2, ip, #5, #1
   1dae0:	strb	r2, [r4, #52]	; 0x34
   1dae4:	beq	1dc18 <__assert_fail@plt+0xc6c0>
   1dae8:	cmp	r0, #4
   1daec:	bne	1dc28 <__assert_fail@plt+0xc6d0>
   1daf0:	ldrb	r3, [r4, #52]	; 0x34
   1daf4:	orr	r3, r3, #64	; 0x40
   1daf8:	strb	r3, [r4, #52]	; 0x34
   1dafc:	cmp	lr, r1
   1db00:	beq	1dba4 <__assert_fail@plt+0xc64c>
   1db04:	ldr	r3, [r1], #4
   1db08:	add	r3, r9, r3, lsl #3
   1db0c:	ldrb	r0, [r3, #4]
   1db10:	cmp	r0, #1
   1db14:	bne	1dac4 <__assert_fail@plt+0xc56c>
   1db18:	ldr	r2, [r3, #4]
   1db1c:	tst	sl, r2
   1db20:	beq	1dafc <__assert_fail@plt+0xc5a4>
   1db24:	ldrb	r2, [r3, #6]
   1db28:	ldrb	r3, [r4, #52]	; 0x34
   1db2c:	ubfx	r0, r2, #4, #1
   1db30:	ubfx	r2, r3, #5, #1
   1db34:	orr	r2, r2, r0
   1db38:	bfi	r3, r2, #5, #1
   1db3c:	strb	r3, [r4, #52]	; 0x34
   1db40:	ldrb	r3, [r4, #52]	; 0x34
   1db44:	orr	r3, r3, #128	; 0x80
   1db48:	strb	r3, [r4, #52]	; 0x34
   1db4c:	b	1dafc <__assert_fail@plt+0xc5a4>
   1db50:	ldr	r6, [r2, #8]
   1db54:	ldr	r7, [r4, #12]
   1db58:	ldr	r6, [r6, r3, lsl #2]
   1db5c:	ldr	r7, [r7, r3, lsl #2]
   1db60:	cmp	r7, r6
   1db64:	bne	1da08 <__assert_fail@plt+0xc4b0>
   1db68:	subs	r3, r3, #1
   1db6c:	bpl	1db50 <__assert_fail@plt+0xc5f8>
   1db70:	mov	r0, r4
   1db74:	add	sp, sp, #4
   1db78:	ldrd	r4, [sp]
   1db7c:	ldrd	r6, [sp, #8]
   1db80:	ldrd	r8, [sp, #16]
   1db84:	ldrd	sl, [sp, #24]
   1db88:	add	sp, sp, #32
   1db8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1db90:	mov	r3, #0
   1db94:	str	r3, [r4, #4]
   1db98:	str	r3, [r8, #4]
   1db9c:	str	r3, [r8, #8]
   1dba0:	str	r8, [r4, #40]	; 0x28
   1dba4:	mov	r2, r5
   1dba8:	mov	r0, r6
   1dbac:	mov	r1, r4
   1dbb0:	bl	1811c <__assert_fail@plt+0x6bc4>
   1dbb4:	cmp	r0, #0
   1dbb8:	beq	1db70 <__assert_fail@plt+0xc618>
   1dbbc:	ldr	r0, [r4, #24]
   1dbc0:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dbc4:	ldr	r0, [r4, #36]	; 0x24
   1dbc8:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dbcc:	ldr	r3, [r4, #40]	; 0x28
   1dbd0:	cmp	r8, r3
   1dbd4:	beq	1dbe8 <__assert_fail@plt+0xc690>
   1dbd8:	ldr	r0, [r3, #8]
   1dbdc:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dbe0:	ldr	r0, [r4, #40]	; 0x28
   1dbe4:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dbe8:	ldr	r0, [r4, #12]
   1dbec:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dbf0:	ldr	r0, [r4, #48]	; 0x30
   1dbf4:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dbf8:	ldr	r0, [r4, #44]	; 0x2c
   1dbfc:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dc00:	mov	r0, r4
   1dc04:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dc08:	mov	r3, #12
   1dc0c:	mov	r4, #0
   1dc10:	str	r3, [r7]
   1dc14:	b	1db70 <__assert_fail@plt+0xc618>
   1dc18:	uxtb	r3, r2
   1dc1c:	orr	r3, r3, #16
   1dc20:	strb	r3, [r4, #52]	; 0x34
   1dc24:	b	1dafc <__assert_fail@plt+0xc5a4>
   1dc28:	cmp	r0, #12
   1dc2c:	beq	1db40 <__assert_fail@plt+0xc5e8>
   1dc30:	ldr	r3, [r3, #4]
   1dc34:	tst	sl, r3
   1dc38:	beq	1dafc <__assert_fail@plt+0xc5a4>
   1dc3c:	b	1db40 <__assert_fail@plt+0xc5e8>
   1dc40:	mov	r4, r8
   1dc44:	b	1db70 <__assert_fail@plt+0xc618>
   1dc48:	mov	r0, r4
   1dc4c:	str	r3, [r4, #4]
   1dc50:	str	r3, [r4, #8]
   1dc54:	bl	13e1c <__assert_fail@plt+0x28c4>
   1dc58:	b	1dc08 <__assert_fail@plt+0xc6b0>
   1dc5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dc60:	strd	r6, [sp, #8]
   1dc64:	ldr	r6, [r0, #108]	; 0x6c
   1dc68:	strd	r8, [sp, #16]
   1dc6c:	strd	sl, [sp, #24]
   1dc70:	str	lr, [sp, #32]
   1dc74:	sub	sp, sp, #44	; 0x2c
   1dc78:	cmp	r6, #0
   1dc7c:	ble	1dddc <__assert_fail@plt+0xc884>
   1dc80:	ldr	r4, [r0, #116]	; 0x74
   1dc84:	mov	r5, r6
   1dc88:	mov	r9, #0
   1dc8c:	add	ip, r5, r9
   1dc90:	asr	ip, ip, #1
   1dc94:	add	lr, ip, ip, lsl #1
   1dc98:	add	lr, r4, lr, lsl #3
   1dc9c:	ldr	lr, [lr, #4]
   1dca0:	cmp	lr, r2
   1dca4:	blt	1e100 <__assert_fail@plt+0xcba8>
   1dca8:	cmp	ip, r9
   1dcac:	ble	1dcf8 <__assert_fail@plt+0xc7a0>
   1dcb0:	add	r5, ip, r9
   1dcb4:	asr	r5, r5, #1
   1dcb8:	add	lr, r5, r5, lsl #1
   1dcbc:	add	lr, r4, lr, lsl #3
   1dcc0:	ldr	lr, [lr, #4]
   1dcc4:	cmp	r2, lr
   1dcc8:	ble	1dce8 <__assert_fail@plt+0xc790>
   1dccc:	b	1e0f4 <__assert_fail@plt+0xcb9c>
   1dcd0:	add	lr, ip, ip, lsl #1
   1dcd4:	add	lr, r4, lr, lsl #3
   1dcd8:	ldr	lr, [lr, #4]
   1dcdc:	cmp	r2, lr
   1dce0:	bgt	1e100 <__assert_fail@plt+0xcba8>
   1dce4:	mov	r5, ip
   1dce8:	add	ip, r9, r5
   1dcec:	cmp	r9, r5
   1dcf0:	asr	ip, ip, #1
   1dcf4:	blt	1dcd0 <__assert_fail@plt+0xc778>
   1dcf8:	cmp	r6, r9
   1dcfc:	ble	1dddc <__assert_fail@plt+0xc884>
   1dd00:	add	r9, r9, r9, lsl #1
   1dd04:	lsl	ip, r9, #3
   1dd08:	add	lr, r4, ip
   1dd0c:	ldr	lr, [lr, #4]
   1dd10:	cmp	r2, lr
   1dd14:	bne	1dddc <__assert_fail@plt+0xc884>
   1dd18:	ldr	r9, [r0, #84]	; 0x54
   1dd1c:	mov	r6, r2
   1dd20:	mov	r7, r1
   1dd24:	mov	r8, r0
   1dd28:	str	r3, [sp, #12]
   1dd2c:	add	r3, ip, #24
   1dd30:	str	r3, [sp, #8]
   1dd34:	ldr	r3, [sp, #8]
   1dd38:	add	r4, r4, r3
   1dd3c:	ldr	lr, [r7, #4]
   1dd40:	cmp	lr, #0
   1dd44:	ble	1ddcc <__assert_fail@plt+0xc874>
   1dd48:	sub	lr, lr, #1
   1dd4c:	ldr	ip, [r4, #-24]	; 0xffffffe8
   1dd50:	cmp	lr, #0
   1dd54:	mov	r1, lr
   1dd58:	moveq	r5, lr
   1dd5c:	ldr	r2, [r7, #8]
   1dd60:	beq	1ddc0 <__assert_fail@plt+0xc868>
   1dd64:	mov	r0, lr
   1dd68:	mov	r5, #0
   1dd6c:	add	r3, r0, r5
   1dd70:	lsr	r3, r3, #1
   1dd74:	ldr	sl, [r2, r3, lsl #2]
   1dd78:	cmp	ip, sl
   1dd7c:	bgt	1de08 <__assert_fail@plt+0xc8b0>
   1dd80:	cmp	r3, r5
   1dd84:	bls	1ddc0 <__assert_fail@plt+0xc868>
   1dd88:	add	r0, r3, r5
   1dd8c:	lsr	r0, r0, #1
   1dd90:	ldr	sl, [r2, r0, lsl #2]
   1dd94:	cmp	ip, sl
   1dd98:	ble	1ddb0 <__assert_fail@plt+0xc858>
   1dd9c:	b	1ddfc <__assert_fail@plt+0xc8a4>
   1dda0:	ldr	sl, [r2, r3, lsl #2]
   1dda4:	cmp	ip, sl
   1dda8:	bgt	1de08 <__assert_fail@plt+0xc8b0>
   1ddac:	mov	r0, r3
   1ddb0:	add	r3, r5, r0
   1ddb4:	cmp	r5, r0
   1ddb8:	lsr	r3, r3, #1
   1ddbc:	bcc	1dda0 <__assert_fail@plt+0xc848>
   1ddc0:	ldr	r3, [r2, r5, lsl #2]
   1ddc4:	cmp	ip, r3
   1ddc8:	beq	1de20 <__assert_fail@plt+0xc8c8>
   1ddcc:	add	r4, r4, #24
   1ddd0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1ddd4:	cmp	r3, #0
   1ddd8:	bne	1dd3c <__assert_fail@plt+0xc7e4>
   1dddc:	mov	r0, #0
   1dde0:	add	sp, sp, #44	; 0x2c
   1dde4:	ldrd	r4, [sp]
   1dde8:	ldrd	r6, [sp, #8]
   1ddec:	ldrd	r8, [sp, #16]
   1ddf0:	ldrd	sl, [sp, #24]
   1ddf4:	add	sp, sp, #32
   1ddf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ddfc:	mov	r5, r0
   1de00:	mov	r0, r3
   1de04:	mov	r3, r5
   1de08:	add	r5, r3, #1
   1de0c:	cmp	r5, r0
   1de10:	bcc	1dd6c <__assert_fail@plt+0xc814>
   1de14:	ldr	r3, [r2, r5, lsl #2]
   1de18:	cmp	ip, r3
   1de1c:	bne	1ddcc <__assert_fail@plt+0xc874>
   1de20:	ldr	r3, [r4, #-16]
   1de24:	ldr	r5, [r4, #-12]
   1de28:	add	r5, r6, r5
   1de2c:	sub	r5, r5, r3
   1de30:	cmp	r6, r5
   1de34:	beq	1df98 <__assert_fail@plt+0xca40>
   1de38:	ldr	r2, [r8, #100]	; 0x64
   1de3c:	ldr	r3, [r9, #12]
   1de40:	ldr	fp, [r2, r5, lsl #2]
   1de44:	ldr	sl, [r3, ip, lsl #2]
   1de48:	cmp	fp, #0
   1de4c:	beq	1e0ac <__assert_fail@plt+0xcb54>
   1de50:	ldr	ip, [fp, #8]
   1de54:	cmp	ip, #0
   1de58:	ble	1e0dc <__assert_fail@plt+0xcb84>
   1de5c:	subs	r2, ip, #1
   1de60:	ldr	r0, [fp, #12]
   1de64:	moveq	r1, r2
   1de68:	beq	1dec4 <__assert_fail@plt+0xc96c>
   1de6c:	mov	r1, #0
   1de70:	add	r3, r2, r1
   1de74:	lsr	r3, r3, #1
   1de78:	ldr	lr, [r0, r3, lsl #2]
   1de7c:	cmp	lr, sl
   1de80:	blt	1df88 <__assert_fail@plt+0xca30>
   1de84:	cmp	r3, r1
   1de88:	bls	1dec4 <__assert_fail@plt+0xc96c>
   1de8c:	add	r2, r3, r1
   1de90:	lsr	r2, r2, #1
   1de94:	ldr	lr, [r0, r2, lsl #2]
   1de98:	cmp	sl, lr
   1de9c:	ble	1deb4 <__assert_fail@plt+0xc95c>
   1dea0:	b	1df7c <__assert_fail@plt+0xca24>
   1dea4:	ldr	lr, [r0, r3, lsl #2]
   1dea8:	cmp	sl, lr
   1deac:	bgt	1df88 <__assert_fail@plt+0xca30>
   1deb0:	mov	r2, r3
   1deb4:	add	r3, r1, r2
   1deb8:	cmp	r1, r2
   1debc:	lsr	r3, r3, #1
   1dec0:	bcc	1dea4 <__assert_fail@plt+0xc94c>
   1dec4:	ldr	r3, [r0, r1, lsl #2]
   1dec8:	cmp	sl, r3
   1decc:	beq	1ddcc <__assert_fail@plt+0xc874>
   1ded0:	lsl	r0, ip, #2
   1ded4:	str	ip, [sp, #24]
   1ded8:	str	ip, [sp, #28]
   1dedc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1dee0:	cmp	r0, #0
   1dee4:	str	r0, [sp, #32]
   1dee8:	beq	1e170 <__assert_fail@plt+0xcc18>
   1deec:	ldr	r2, [fp, #8]
   1def0:	add	r3, sp, #24
   1def4:	ldr	r1, [fp, #12]
   1def8:	str	r3, [sp, #4]
   1defc:	lsl	r2, r2, #2
   1df00:	bl	11264 <memcpy@plt>
   1df04:	ldr	r3, [sp, #4]
   1df08:	mov	r2, #0
   1df0c:	mov	r0, r3
   1df10:	mov	r1, sl
   1df14:	str	r3, [sp, #4]
   1df18:	str	r2, [sp, #20]
   1df1c:	bl	18d78 <__assert_fail@plt+0x7820>
   1df20:	eor	r0, r0, #1
   1df24:	ldr	r3, [sp, #4]
   1df28:	ldr	r2, [sp, #20]
   1df2c:	cmp	r2, #0
   1df30:	orrne	r0, r0, #1
   1df34:	tst	r0, #255	; 0xff
   1df38:	bne	1e110 <__assert_fail@plt+0xcbb8>
   1df3c:	ldr	sl, [r8, #100]	; 0x64
   1df40:	mov	r2, r3
   1df44:	mov	r1, r9
   1df48:	add	r0, sp, #20
   1df4c:	bl	1d988 <__assert_fail@plt+0xc430>
   1df50:	str	r0, [sl, r5, lsl #2]
   1df54:	ldr	r0, [sp, #32]
   1df58:	bl	13e1c <__assert_fail@plt+0x28c4>
   1df5c:	ldr	r3, [r8, #100]	; 0x64
   1df60:	ldr	r3, [r3, r5, lsl #2]
   1df64:	cmp	r3, #0
   1df68:	bne	1ddcc <__assert_fail@plt+0xc874>
   1df6c:	ldr	r0, [sp, #20]
   1df70:	cmp	r0, #0
   1df74:	beq	1ddcc <__assert_fail@plt+0xc874>
   1df78:	b	1dde0 <__assert_fail@plt+0xc888>
   1df7c:	mov	r1, r3
   1df80:	mov	r3, r2
   1df84:	mov	r2, r1
   1df88:	add	r1, r3, #1
   1df8c:	cmp	r2, r1
   1df90:	bhi	1de70 <__assert_fail@plt+0xc918>
   1df94:	b	1dec4 <__assert_fail@plt+0xc96c>
   1df98:	ldr	r3, [r9, #20]
   1df9c:	add	ip, ip, ip, lsl #1
   1dfa0:	cmp	lr, #0
   1dfa4:	movne	lr, #0
   1dfa8:	add	ip, r3, ip, lsl #2
   1dfac:	ldr	r3, [ip, #8]
   1dfb0:	ldr	r5, [r3]
   1dfb4:	beq	1e00c <__assert_fail@plt+0xcab4>
   1dfb8:	add	r3, r1, lr
   1dfbc:	lsr	r3, r3, #1
   1dfc0:	ldr	r0, [r2, r3, lsl #2]
   1dfc4:	cmp	r0, r5
   1dfc8:	blt	1e09c <__assert_fail@plt+0xcb44>
   1dfcc:	cmp	r3, lr
   1dfd0:	bls	1e00c <__assert_fail@plt+0xcab4>
   1dfd4:	add	r1, r3, lr
   1dfd8:	lsr	r1, r1, #1
   1dfdc:	ldr	r0, [r2, r1, lsl #2]
   1dfe0:	cmp	r5, r0
   1dfe4:	ble	1dffc <__assert_fail@plt+0xcaa4>
   1dfe8:	b	1e090 <__assert_fail@plt+0xcb38>
   1dfec:	ldr	r0, [r2, r3, lsl #2]
   1dff0:	cmp	r5, r0
   1dff4:	bgt	1e09c <__assert_fail@plt+0xcb44>
   1dff8:	mov	r1, r3
   1dffc:	add	r3, lr, r1
   1e000:	cmp	lr, r1
   1e004:	lsr	r3, r3, #1
   1e008:	bcc	1dfec <__assert_fail@plt+0xca94>
   1e00c:	ldr	r3, [r2, lr, lsl #2]
   1e010:	cmp	r5, r3
   1e014:	beq	1ddcc <__assert_fail@plt+0xc874>
   1e018:	mov	r2, #1
   1e01c:	mov	r3, #1
   1e020:	mov	r0, #4
   1e024:	strd	r2, [sp, #24]
   1e028:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1e02c:	cmp	r0, #0
   1e030:	str	r0, [sp, #32]
   1e034:	beq	1e12c <__assert_fail@plt+0xcbd4>
   1e038:	mov	r2, #0
   1e03c:	ldr	r3, [sp, #80]	; 0x50
   1e040:	add	r4, sp, #24
   1e044:	mov	r1, r4
   1e048:	str	r5, [r0]
   1e04c:	mov	r0, r9
   1e050:	str	r2, [sp, #20]
   1e054:	ldr	r2, [sp, #12]
   1e058:	bl	1cf78 <__assert_fail@plt+0xba20>
   1e05c:	mov	r5, r0
   1e060:	mov	r1, r4
   1e064:	mov	r0, r7
   1e068:	bl	19174 <__assert_fail@plt+0x7c1c>
   1e06c:	mov	r4, r0
   1e070:	ldr	r0, [sp, #32]
   1e074:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e078:	ldr	r0, [sp, #20]
   1e07c:	orr	r3, r5, r4
   1e080:	orrs	r3, r3, r0
   1e084:	bne	1e158 <__assert_fail@plt+0xcc00>
   1e088:	ldr	r4, [r8, #116]	; 0x74
   1e08c:	b	1dd34 <__assert_fail@plt+0xc7dc>
   1e090:	mov	r0, r3
   1e094:	mov	r3, r1
   1e098:	mov	r1, r0
   1e09c:	add	lr, r3, #1
   1e0a0:	cmp	lr, r1
   1e0a4:	bcc	1dfb8 <__assert_fail@plt+0xca60>
   1e0a8:	b	1e00c <__assert_fail@plt+0xcab4>
   1e0ac:	mov	r2, #1
   1e0b0:	mov	r3, #1
   1e0b4:	mov	r0, #4
   1e0b8:	strd	r2, [sp, #24]
   1e0bc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1e0c0:	cmp	r0, #0
   1e0c4:	str	r0, [sp, #32]
   1e0c8:	beq	1e124 <__assert_fail@plt+0xcbcc>
   1e0cc:	add	r3, sp, #24
   1e0d0:	str	sl, [r0]
   1e0d4:	str	fp, [sp, #20]
   1e0d8:	b	1df3c <__assert_fail@plt+0xc9e4>
   1e0dc:	mov	r2, #0
   1e0e0:	add	r3, sp, #24
   1e0e4:	str	r2, [sp, #24]
   1e0e8:	str	r2, [r3, #4]
   1e0ec:	str	r2, [r3, #8]
   1e0f0:	b	1df0c <__assert_fail@plt+0xc9b4>
   1e0f4:	mov	lr, r5
   1e0f8:	mov	r5, ip
   1e0fc:	mov	ip, lr
   1e100:	add	r9, ip, #1
   1e104:	cmp	r9, r5
   1e108:	blt	1dc8c <__assert_fail@plt+0xc734>
   1e10c:	b	1dcf8 <__assert_fail@plt+0xc7a0>
   1e110:	ldr	r0, [sp, #32]
   1e114:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e118:	ldr	r0, [sp, #20]
   1e11c:	cmp	r0, #0
   1e120:	bne	1dde0 <__assert_fail@plt+0xc888>
   1e124:	mov	r0, #12
   1e128:	b	1dde0 <__assert_fail@plt+0xc888>
   1e12c:	mov	r2, #0
   1e130:	mov	r3, #0
   1e134:	mov	ip, #12
   1e138:	add	r4, sp, #24
   1e13c:	mov	r1, r4
   1e140:	mov	r0, r9
   1e144:	str	ip, [sp, #20]
   1e148:	strd	r2, [sp, #24]
   1e14c:	ldr	r2, [sp, #12]
   1e150:	ldr	r3, [sp, #80]	; 0x50
   1e154:	b	1e058 <__assert_fail@plt+0xcb00>
   1e158:	cmp	r0, #0
   1e15c:	bne	1dde0 <__assert_fail@plt+0xc888>
   1e160:	cmp	r5, #0
   1e164:	movne	r0, r5
   1e168:	moveq	r0, r4
   1e16c:	b	1dde0 <__assert_fail@plt+0xc888>
   1e170:	mov	r0, #0
   1e174:	mov	r1, #0
   1e178:	mov	r2, #12
   1e17c:	add	r3, sp, #24
   1e180:	strd	r0, [sp, #24]
   1e184:	b	1df0c <__assert_fail@plt+0xc9b4>
   1e188:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e18c:	mov	ip, #0
   1e190:	strd	r6, [sp, #8]
   1e194:	ldr	r6, [r2, #4]
   1e198:	strd	r8, [sp, #16]
   1e19c:	strd	sl, [sp, #24]
   1e1a0:	str	lr, [sp, #32]
   1e1a4:	sub	sp, sp, #20
   1e1a8:	str	ip, [r0]
   1e1ac:	cmp	r6, ip
   1e1b0:	moveq	r4, r6
   1e1b4:	beq	1e42c <__assert_fail@plt+0xced4>
   1e1b8:	add	r7, r3, r6
   1e1bc:	ble	1e1d8 <__assert_fail@plt+0xcc80>
   1e1c0:	ldr	ip, [r2, #8]
   1e1c4:	add	r4, ip, r6, lsl #2
   1e1c8:	ldr	lr, [ip], #4
   1e1cc:	cmp	r4, ip
   1e1d0:	add	r7, r7, lr
   1e1d4:	bne	1e1c8 <__assert_fail@plt+0xcc70>
   1e1d8:	ldr	lr, [r1, #32]
   1e1dc:	ldr	ip, [r1, #68]	; 0x44
   1e1e0:	and	ip, ip, r7
   1e1e4:	add	ip, ip, ip, lsl #1
   1e1e8:	lsl	ip, ip, #2
   1e1ec:	ldr	r8, [lr, ip]
   1e1f0:	add	ip, lr, ip
   1e1f4:	cmp	r8, #0
   1e1f8:	ble	1e25c <__assert_fail@plt+0xcd04>
   1e1fc:	ldr	lr, [ip, #8]
   1e200:	mov	ip, #0
   1e204:	sub	lr, lr, #4
   1e208:	b	1e218 <__assert_fail@plt+0xccc0>
   1e20c:	add	ip, ip, #1
   1e210:	cmp	ip, r8
   1e214:	beq	1e25c <__assert_fail@plt+0xcd04>
   1e218:	ldr	r4, [lr, #4]!
   1e21c:	ldr	r5, [r4]
   1e220:	cmp	r5, r7
   1e224:	bne	1e20c <__assert_fail@plt+0xccb4>
   1e228:	ldrb	r5, [r4, #52]	; 0x34
   1e22c:	and	r5, r5, #15
   1e230:	cmp	r5, r3
   1e234:	bne	1e20c <__assert_fail@plt+0xccb4>
   1e238:	ldr	fp, [r4, #40]	; 0x28
   1e23c:	cmp	fp, #0
   1e240:	beq	1e20c <__assert_fail@plt+0xccb4>
   1e244:	ldr	r5, [fp, #4]
   1e248:	cmp	r6, r5
   1e24c:	beq	1e464 <__assert_fail@plt+0xcf0c>
   1e250:	add	ip, ip, #1
   1e254:	cmp	ip, r8
   1e258:	bne	1e218 <__assert_fail@plt+0xccc0>
   1e25c:	mov	r9, r1
   1e260:	mov	r1, #1
   1e264:	str	r0, [sp, #8]
   1e268:	mov	r0, #56	; 0x38
   1e26c:	mov	sl, r3
   1e270:	mov	r6, r2
   1e274:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   1e278:	subs	r4, r0, #0
   1e27c:	beq	1e57c <__assert_fail@plt+0xd024>
   1e280:	ldr	r3, [r6, #4]
   1e284:	add	fp, r4, #4
   1e288:	cmp	r3, #0
   1e28c:	str	r3, [r4, #8]
   1e290:	ble	1e470 <__assert_fail@plt+0xcf18>
   1e294:	lsl	r0, r3, #2
   1e298:	str	r3, [r4, #4]
   1e29c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1e2a0:	cmp	r0, #0
   1e2a4:	mov	r3, r0
   1e2a8:	str	r0, [r4, #12]
   1e2ac:	beq	1e590 <__assert_fail@plt+0xd038>
   1e2b0:	ldr	r8, [r6, #4]
   1e2b4:	ldr	r1, [r6, #8]
   1e2b8:	lsl	r2, r8, #2
   1e2bc:	bl	11264 <memcpy@plt>
   1e2c0:	ldrb	r3, [r4, #52]	; 0x34
   1e2c4:	cmp	r8, #0
   1e2c8:	str	fp, [r4, #40]	; 0x28
   1e2cc:	bfi	r3, sl, #0, #4
   1e2d0:	strb	r3, [r4, #52]	; 0x34
   1e2d4:	ble	1e414 <__assert_fail@plt+0xcebc>
   1e2d8:	and	r2, sl, #2
   1e2dc:	mov	r1, #0
   1e2e0:	and	r3, sl, #1
   1e2e4:	mov	lr, r8
   1e2e8:	mov	r5, r1
   1e2ec:	mov	r8, r3
   1e2f0:	str	r2, [sp]
   1e2f4:	and	r2, sl, #4
   1e2f8:	str	r2, [sp, #4]
   1e2fc:	ldr	r3, [r6, #8]
   1e300:	ldr	r2, [r9]
   1e304:	ldr	r3, [r3, r5, lsl #2]
   1e308:	add	r2, r2, r3, lsl #3
   1e30c:	ldr	sl, [r2, #4]
   1e310:	ldrb	r3, [r2, #4]
   1e314:	ubfx	sl, sl, #8, #10
   1e318:	cmp	r3, #1
   1e31c:	cmpeq	sl, #0
   1e320:	beq	1e408 <__assert_fail@plt+0xceb0>
   1e324:	ldrb	ip, [r2, #6]
   1e328:	cmp	r3, #2
   1e32c:	ldrb	r2, [r4, #52]	; 0x34
   1e330:	ubfx	ip, ip, #4, #1
   1e334:	ubfx	r0, r2, #5, #1
   1e338:	orr	r0, r0, ip
   1e33c:	bfi	r2, r0, #5, #1
   1e340:	uxtbeq	r3, r2
   1e344:	orreq	r3, r3, #16
   1e348:	strb	r2, [r4, #52]	; 0x34
   1e34c:	strbeq	r3, [r4, #52]	; 0x34
   1e350:	beq	1e368 <__assert_fail@plt+0xce10>
   1e354:	cmp	r3, #4
   1e358:	bne	1e368 <__assert_fail@plt+0xce10>
   1e35c:	ldrb	r3, [r4, #52]	; 0x34
   1e360:	orr	r3, r3, #64	; 0x40
   1e364:	strb	r3, [r4, #52]	; 0x34
   1e368:	cmp	sl, #0
   1e36c:	beq	1e408 <__assert_fail@plt+0xceb0>
   1e370:	ldr	r3, [r4, #40]	; 0x28
   1e374:	cmp	fp, r3
   1e378:	beq	1e4a8 <__assert_fail@plt+0xcf50>
   1e37c:	tst	sl, #1
   1e380:	beq	1e494 <__assert_fail@plt+0xcf3c>
   1e384:	cmp	r8, #0
   1e388:	beq	1e3bc <__assert_fail@plt+0xce64>
   1e38c:	tst	sl, #2
   1e390:	bne	1e3bc <__assert_fail@plt+0xce64>
   1e394:	tst	sl, #16
   1e398:	beq	1e3a8 <__assert_fail@plt+0xce50>
   1e39c:	ldr	r3, [sp]
   1e3a0:	cmp	r3, #0
   1e3a4:	beq	1e3bc <__assert_fail@plt+0xce64>
   1e3a8:	tst	sl, #64	; 0x40
   1e3ac:	beq	1e404 <__assert_fail@plt+0xceac>
   1e3b0:	ldr	r3, [sp, #4]
   1e3b4:	cmp	r3, #0
   1e3b8:	bne	1e404 <__assert_fail@plt+0xceac>
   1e3bc:	subs	r3, r5, r1
   1e3c0:	bmi	1e400 <__assert_fail@plt+0xcea8>
   1e3c4:	ldr	r2, [r4, #8]
   1e3c8:	cmp	r3, r2
   1e3cc:	bge	1e400 <__assert_fail@plt+0xcea8>
   1e3d0:	sub	r2, r2, #1
   1e3d4:	cmp	r3, r2
   1e3d8:	str	r2, [r4, #8]
   1e3dc:	bge	1e400 <__assert_fail@plt+0xcea8>
   1e3e0:	ldr	r2, [r4, #12]
   1e3e4:	add	r2, r2, r3, lsl #2
   1e3e8:	ldr	r0, [r2, #4]
   1e3ec:	add	r3, r3, #1
   1e3f0:	str	r0, [r2], #4
   1e3f4:	ldr	r0, [r4, #8]
   1e3f8:	cmp	r3, r0
   1e3fc:	blt	1e3e8 <__assert_fail@plt+0xce90>
   1e400:	add	r1, r1, #1
   1e404:	ldr	lr, [r6, #4]
   1e408:	add	r5, r5, #1
   1e40c:	cmp	r5, lr
   1e410:	blt	1e2fc <__assert_fail@plt+0xcda4>
   1e414:	mov	r2, r7
   1e418:	mov	r0, r9
   1e41c:	mov	r1, r4
   1e420:	bl	1811c <__assert_fail@plt+0x6bc4>
   1e424:	cmp	r0, #0
   1e428:	bne	1e530 <__assert_fail@plt+0xcfd8>
   1e42c:	mov	r0, r4
   1e430:	add	sp, sp, #20
   1e434:	ldrd	r4, [sp]
   1e438:	ldrd	r6, [sp, #8]
   1e43c:	ldrd	r8, [sp, #16]
   1e440:	ldrd	sl, [sp, #24]
   1e444:	add	sp, sp, #32
   1e448:	pop	{pc}		; (ldr pc, [sp], #4)
   1e44c:	ldr	r9, [r2, #8]
   1e450:	ldr	sl, [fp, #8]
   1e454:	ldr	r9, [r9, r5, lsl #2]
   1e458:	ldr	sl, [sl, r5, lsl #2]
   1e45c:	cmp	sl, r9
   1e460:	bne	1e20c <__assert_fail@plt+0xccb4>
   1e464:	subs	r5, r5, #1
   1e468:	bpl	1e44c <__assert_fail@plt+0xcef4>
   1e46c:	b	1e42c <__assert_fail@plt+0xced4>
   1e470:	mov	r3, #0
   1e474:	str	r3, [r4, #4]
   1e478:	str	r3, [fp, #4]
   1e47c:	str	r3, [fp, #8]
   1e480:	ldrb	r3, [r4, #52]	; 0x34
   1e484:	str	fp, [r4, #40]	; 0x28
   1e488:	bfi	r3, sl, #0, #4
   1e48c:	strb	r3, [r4, #52]	; 0x34
   1e490:	b	1e414 <__assert_fail@plt+0xcebc>
   1e494:	tst	sl, #2
   1e498:	beq	1e394 <__assert_fail@plt+0xce3c>
   1e49c:	cmp	r8, #0
   1e4a0:	beq	1e394 <__assert_fail@plt+0xce3c>
   1e4a4:	b	1e3bc <__assert_fail@plt+0xce64>
   1e4a8:	mov	r0, #12
   1e4ac:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1e4b0:	subs	r3, r0, #0
   1e4b4:	beq	1e530 <__assert_fail@plt+0xcfd8>
   1e4b8:	ldr	r2, [r6, #4]
   1e4bc:	str	r3, [r4, #40]	; 0x28
   1e4c0:	cmp	r2, #0
   1e4c4:	str	r2, [r3, #4]
   1e4c8:	ble	1e510 <__assert_fail@plt+0xcfb8>
   1e4cc:	lsl	r0, r2, #2
   1e4d0:	str	r2, [r3]
   1e4d4:	str	r3, [sp, #12]
   1e4d8:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1e4dc:	ldr	r3, [sp, #12]
   1e4e0:	cmp	r0, #0
   1e4e4:	str	r0, [r3, #8]
   1e4e8:	beq	1e524 <__assert_fail@plt+0xcfcc>
   1e4ec:	ldr	r2, [r6, #4]
   1e4f0:	ldr	r1, [r6, #8]
   1e4f4:	lsl	r2, r2, #2
   1e4f8:	bl	11264 <memcpy@plt>
   1e4fc:	ldrb	r3, [r4, #52]	; 0x34
   1e500:	mov	r1, #0
   1e504:	orr	r3, r3, #128	; 0x80
   1e508:	strb	r3, [r4, #52]	; 0x34
   1e50c:	b	1e37c <__assert_fail@plt+0xce24>
   1e510:	mov	r2, #0
   1e514:	str	r2, [r3]
   1e518:	str	r2, [r3, #4]
   1e51c:	str	r2, [r3, #8]
   1e520:	b	1e4fc <__assert_fail@plt+0xcfa4>
   1e524:	mov	r8, r3
   1e528:	str	r0, [r8]
   1e52c:	str	r0, [r8, #4]
   1e530:	ldr	r0, [r4, #24]
   1e534:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e538:	ldr	r0, [r4, #36]	; 0x24
   1e53c:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e540:	ldr	r3, [r4, #40]	; 0x28
   1e544:	cmp	fp, r3
   1e548:	beq	1e55c <__assert_fail@plt+0xd004>
   1e54c:	ldr	r0, [r3, #8]
   1e550:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e554:	ldr	r0, [r4, #40]	; 0x28
   1e558:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e55c:	ldr	r0, [r4, #12]
   1e560:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e564:	ldr	r0, [r4, #48]	; 0x30
   1e568:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e56c:	ldr	r0, [r4, #44]	; 0x2c
   1e570:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e574:	mov	r0, r4
   1e578:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e57c:	ldr	r2, [sp, #8]
   1e580:	mov	r3, #12
   1e584:	mov	r4, #0
   1e588:	str	r3, [r2]
   1e58c:	b	1e42c <__assert_fail@plt+0xced4>
   1e590:	mov	r0, r4
   1e594:	str	r3, [r4, #4]
   1e598:	str	r3, [r4, #8]
   1e59c:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e5a0:	b	1e57c <__assert_fail@plt+0xd024>
   1e5a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e5a8:	mov	ip, r1
   1e5ac:	strd	r6, [sp, #8]
   1e5b0:	strd	r8, [sp, #16]
   1e5b4:	ldr	r8, [r1, #8]
   1e5b8:	strd	sl, [sp, #24]
   1e5bc:	str	lr, [sp, #32]
   1e5c0:	sub	sp, sp, #14528	; 0x38c0
   1e5c4:	sub	sp, sp, #60	; 0x3c
   1e5c8:	add	r9, sp, #2288	; 0x8f0
   1e5cc:	add	r9, r9, #8
   1e5d0:	str	r1, [sp, #100]	; 0x64
   1e5d4:	mov	r1, #0
   1e5d8:	cmp	r8, r1
   1e5dc:	str	r1, [r9]
   1e5e0:	str	r1, [r9, #4]
   1e5e4:	str	r1, [r9, #8]
   1e5e8:	str	r1, [r9, #12]
   1e5ec:	str	r1, [r9, #16]
   1e5f0:	str	r1, [r9, #20]
   1e5f4:	str	r1, [r9, #24]
   1e5f8:	str	r1, [r9, #28]
   1e5fc:	str	r1, [ip, #44]	; 0x2c
   1e600:	str	r1, [ip, #48]	; 0x30
   1e604:	ble	1f57c <__assert_fail@plt+0xe024>
   1e608:	mov	r3, r1
   1e60c:	mov	r2, r1
   1e610:	str	r1, [sp, #48]	; 0x30
   1e614:	mov	fp, r0
   1e618:	mov	r6, r8
   1e61c:	str	r1, [sp, #104]	; 0x68
   1e620:	str	r0, [sp, #116]	; 0x74
   1e624:	strd	r2, [sp, #128]	; 0x80
   1e628:	sub	r3, r9, #2080	; 0x820
   1e62c:	str	r3, [sp, #124]	; 0x7c
   1e630:	ldr	r3, [sp, #100]	; 0x64
   1e634:	ldr	r1, [sp, #104]	; 0x68
   1e638:	ldr	r3, [r3, #12]
   1e63c:	lsl	r2, r1, #2
   1e640:	str	r2, [sp, #112]	; 0x70
   1e644:	ldr	r2, [sp, #116]	; 0x74
   1e648:	ldr	r1, [r3, r1, lsl #2]
   1e64c:	ldr	r2, [r2]
   1e650:	add	r3, r2, r1, lsl #3
   1e654:	ldrb	r0, [r3, #4]
   1e658:	str	r3, [sp, #96]	; 0x60
   1e65c:	cmp	r0, #1
   1e660:	ldr	r3, [r3, #4]
   1e664:	str	r0, [sp, #52]	; 0x34
   1e668:	ubfx	r3, r3, #8, #10
   1e66c:	beq	1e978 <__assert_fail@plt+0xd420>
   1e670:	cmp	r0, #3
   1e674:	beq	1f328 <__assert_fail@plt+0xddd0>
   1e678:	cmp	r0, #5
   1e67c:	beq	1f050 <__assert_fail@plt+0xdaf8>
   1e680:	cmp	r0, #7
   1e684:	beq	1f264 <__assert_fail@plt+0xdd0c>
   1e688:	ldr	r3, [sp, #104]	; 0x68
   1e68c:	add	r3, r3, #1
   1e690:	cmp	r3, r6
   1e694:	str	r3, [sp, #104]	; 0x68
   1e698:	blt	1e630 <__assert_fail@plt+0xd0d8>
   1e69c:	ldr	r3, [sp, #48]	; 0x30
   1e6a0:	ldr	fp, [sp, #116]	; 0x74
   1e6a4:	cmp	r3, #0
   1e6a8:	ble	1f578 <__assert_fail@plt+0xe020>
   1e6ac:	add	r3, r3, #1
   1e6b0:	mov	r5, #0
   1e6b4:	lsl	r0, r3, #2
   1e6b8:	str	r3, [r9, #-2156]	; 0xfffff794
   1e6bc:	str	r5, [r9, #-2152]	; 0xfffff798
   1e6c0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1e6c4:	cmp	r0, r5
   1e6c8:	str	r0, [r9, #-2148]	; 0xfffff79c
   1e6cc:	beq	1f528 <__assert_fail@plt+0xdfd0>
   1e6d0:	mov	r3, #0
   1e6d4:	mov	r2, #0
   1e6d8:	str	r5, [r9, #-2160]	; 0xfffff790
   1e6dc:	add	r1, sp, #3312	; 0xcf0
   1e6e0:	mov	sl, r5
   1e6e4:	str	r5, [sp]
   1e6e8:	add	r1, r1, #8
   1e6ec:	mov	r8, r5
   1e6f0:	str	r5, [sp, #8]
   1e6f4:	strd	r2, [sp, #152]	; 0x98
   1e6f8:	mov	r4, r1
   1e6fc:	strd	r2, [sp, #160]	; 0xa0
   1e700:	strd	r2, [sp, #168]	; 0xa8
   1e704:	strd	r2, [sp, #176]	; 0xb0
   1e708:	add	r3, sp, #136	; 0x88
   1e70c:	str	r5, [sp, #12]
   1e710:	str	r5, [sp, #16]
   1e714:	str	r3, [sp, #40]	; 0x28
   1e718:	add	r3, sp, #6336	; 0x18c0
   1e71c:	add	r3, r3, #56	; 0x38
   1e720:	str	r5, [sp, #24]
   1e724:	mov	r6, r3
   1e728:	str	r5, [sp, #32]
   1e72c:	str	r5, [sp, #52]	; 0x34
   1e730:	str	r3, [sp, #56]	; 0x38
   1e734:	str	r1, [sp, #60]	; 0x3c
   1e738:	str	r1, [sp, #108]	; 0x6c
   1e73c:	ldr	ip, [r4, #4]
   1e740:	mov	r3, #0
   1e744:	str	r3, [r9, #-2152]	; 0xfffff798
   1e748:	cmp	ip, r3
   1e74c:	movgt	r7, #0
   1e750:	ble	1e79c <__assert_fail@plt+0xd244>
   1e754:	ldr	r2, [r4, #8]
   1e758:	add	r0, sp, #140	; 0x8c
   1e75c:	ldr	r3, [fp, #12]
   1e760:	ldr	r2, [r2, r7, lsl #2]
   1e764:	add	r7, r7, #1
   1e768:	ldr	r3, [r3, r2, lsl #2]
   1e76c:	cmn	r3, #1
   1e770:	add	r2, r3, r3, lsl #1
   1e774:	beq	1e794 <__assert_fail@plt+0xd23c>
   1e778:	ldr	r1, [fp, #24]
   1e77c:	add	r1, r1, r2, lsl #2
   1e780:	bl	19174 <__assert_fail@plt+0x7c1c>
   1e784:	cmp	r0, #0
   1e788:	str	r0, [r9, #-2160]	; 0xfffff790
   1e78c:	bne	1f444 <__assert_fail@plt+0xdeec>
   1e790:	ldr	ip, [r4, #4]
   1e794:	cmp	r7, ip
   1e798:	blt	1e754 <__assert_fail@plt+0xd1fc>
   1e79c:	mov	r3, #0
   1e7a0:	add	r2, sp, #140	; 0x8c
   1e7a4:	ldr	r0, [sp, #40]	; 0x28
   1e7a8:	mov	r1, fp
   1e7ac:	bl	1e188 <__assert_fail@plt+0xcc30>
   1e7b0:	add	r3, sp, #248	; 0xf8
   1e7b4:	cmp	r0, #0
   1e7b8:	mov	r7, r0
   1e7bc:	str	r0, [r3, r8, lsl #2]
   1e7c0:	beq	1f518 <__assert_fail@plt+0xdfc0>
   1e7c4:	ldrsb	r3, [r7, #52]	; 0x34
   1e7c8:	cmp	r3, #0
   1e7cc:	blt	1f474 <__assert_fail@plt+0xdf1c>
   1e7d0:	add	r3, sp, #1264	; 0x4f0
   1e7d4:	str	r7, [r9, r8, lsl #2]
   1e7d8:	add	r3, r3, #8
   1e7dc:	str	r7, [r3, r8, lsl #2]
   1e7e0:	add	r8, r8, #1
   1e7e4:	ldr	r0, [sp]
   1e7e8:	add	r4, r4, #12
   1e7ec:	add	r6, r6, #32
   1e7f0:	ldr	r3, [sp, #48]	; 0x30
   1e7f4:	ldr	r2, [r6, #-32]	; 0xffffffe0
   1e7f8:	ldr	r1, [r6, #-24]	; 0xffffffe8
   1e7fc:	cmp	r8, r3
   1e800:	ldr	r3, [r6, #-28]	; 0xffffffe4
   1e804:	orr	sl, sl, r2
   1e808:	ldr	r2, [r6, #-20]	; 0xffffffec
   1e80c:	str	sl, [r9, #-2144]	; 0xfffff7a0
   1e810:	ldr	ip, [sp, #8]
   1e814:	orr	r0, r0, r3
   1e818:	ldr	r3, [r6, #-16]
   1e81c:	str	r0, [r9, #-2140]	; 0xfffff7a4
   1e820:	str	r0, [sp]
   1e824:	ldr	r0, [sp, #12]
   1e828:	orr	ip, ip, r1
   1e82c:	str	ip, [r9, #-2136]	; 0xfffff7a8
   1e830:	str	ip, [sp, #8]
   1e834:	ldr	r1, [r6, #-12]
   1e838:	orr	r0, r0, r2
   1e83c:	ldr	ip, [sp, #16]
   1e840:	str	r0, [r9, #-2132]	; 0xfffff7ac
   1e844:	str	r0, [sp, #12]
   1e848:	ldr	r0, [sp, #24]
   1e84c:	orr	ip, ip, r3
   1e850:	ldrd	r2, [r6, #-8]
   1e854:	str	ip, [r9, #-2128]	; 0xfffff7b0
   1e858:	orr	r1, r0, r1
   1e85c:	ldr	r0, [sp, #32]
   1e860:	str	ip, [sp, #16]
   1e864:	orr	r5, r5, r3
   1e868:	str	r1, [r9, #-2124]	; 0xfffff7b4
   1e86c:	str	r1, [sp, #24]
   1e870:	str	r5, [r9, #-2116]	; 0xfffff7bc
   1e874:	orr	r2, r0, r2
   1e878:	str	r2, [r9, #-2120]	; 0xfffff7b8
   1e87c:	str	r2, [sp, #32]
   1e880:	bne	1e73c <__assert_fail@plt+0xd1e4>
   1e884:	ldr	r3, [sp, #52]	; 0x34
   1e888:	cmp	r3, #0
   1e88c:	bne	1f5c0 <__assert_fail@plt+0xe068>
   1e890:	mov	r1, #256	; 0x100
   1e894:	mov	r0, #4
   1e898:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   1e89c:	ldr	r3, [sp, #100]	; 0x64
   1e8a0:	cmp	r0, #0
   1e8a4:	mov	r7, r0
   1e8a8:	str	r0, [r3, #44]	; 0x2c
   1e8ac:	beq	1f444 <__assert_fail@plt+0xdeec>
   1e8b0:	ldr	lr, [sp, #56]	; 0x38
   1e8b4:	add	ip, sp, #148	; 0x94
   1e8b8:	add	r5, fp, #96	; 0x60
   1e8bc:	mov	r4, r0
   1e8c0:	add	r6, r0, #1024	; 0x400
   1e8c4:	ldr	r3, [ip, #4]!
   1e8c8:	cmp	r3, #0
   1e8cc:	movne	r0, r4
   1e8d0:	movne	r1, #1
   1e8d4:	beq	1e8f0 <__assert_fail@plt+0xd398>
   1e8d8:	tst	r3, #1
   1e8dc:	bne	1f540 <__assert_fail@plt+0xdfe8>
   1e8e0:	lsrs	r3, r3, #1
   1e8e4:	add	r0, r0, #4
   1e8e8:	lsl	r1, r1, #1
   1e8ec:	bne	1e8d8 <__assert_fail@plt+0xd380>
   1e8f0:	add	r4, r4, #128	; 0x80
   1e8f4:	add	r5, r5, #4
   1e8f8:	cmp	r6, r4
   1e8fc:	add	lr, lr, #4
   1e900:	bne	1e8c4 <__assert_fail@plt+0xd36c>
   1e904:	ubfx	r3, sl, #10, #1
   1e908:	cmp	r3, #0
   1e90c:	beq	1e940 <__assert_fail@plt+0xd3e8>
   1e910:	ldr	ip, [sp, #48]	; 0x30
   1e914:	add	r2, sp, #6336	; 0x18c0
   1e918:	add	r1, r3, #1
   1e91c:	add	r2, r2, #56	; 0x38
   1e920:	sub	r0, r3, #1
   1e924:	add	r2, r2, r3, lsl #5
   1e928:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1e92c:	tst	r2, #1024	; 0x400
   1e930:	bne	1f5a8 <__assert_fail@plt+0xe050>
   1e934:	cmp	ip, r3
   1e938:	mov	r3, r1
   1e93c:	bne	1e914 <__assert_fail@plt+0xd3bc>
   1e940:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   1e944:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e948:	ldr	r3, [sp, #48]	; 0x30
   1e94c:	ldr	r5, [sp, #60]	; 0x3c
   1e950:	add	r1, r3, r3, lsl #1
   1e954:	ldr	r3, [sp, #108]	; 0x6c
   1e958:	add	r4, r3, r1, lsl #2
   1e95c:	add	r5, r5, #12
   1e960:	ldr	r0, [r5, #-4]
   1e964:	bl	13e1c <__assert_fail@plt+0x28c4>
   1e968:	cmp	r4, r5
   1e96c:	bne	1e95c <__assert_fail@plt+0xd404>
   1e970:	mov	r0, #1
   1e974:	b	1f198 <__assert_fail@plt+0xdc40>
   1e978:	ldrb	r2, [r2, r1, lsl #3]
   1e97c:	mov	ip, r0
   1e980:	asr	r1, r2, #5
   1e984:	and	r2, r2, #31
   1e988:	ldr	r0, [r9, r1, lsl #2]
   1e98c:	orr	r2, r0, ip, lsl r2
   1e990:	str	r2, [r9, r1, lsl #2]
   1e994:	cmp	r3, #0
   1e998:	beq	1ec58 <__assert_fail@plt+0xd700>
   1e99c:	tst	r3, #32
   1e9a0:	bne	1f100 <__assert_fail@plt+0xdba8>
   1e9a4:	tst	r3, #128	; 0x80
   1e9a8:	bne	1f140 <__assert_fail@plt+0xdbe8>
   1e9ac:	tst	r3, #4
   1e9b0:	beq	1eb18 <__assert_fail@plt+0xd5c0>
   1e9b4:	ldr	r2, [sp, #52]	; 0x34
   1e9b8:	cmp	r2, #1
   1e9bc:	beq	1f424 <__assert_fail@plt+0xdecc>
   1e9c0:	ldr	r1, [sp, #116]	; 0x74
   1e9c4:	ldrd	r4, [r9]
   1e9c8:	ldr	lr, [r9, #16]
   1e9cc:	ldr	r2, [r1, #92]	; 0x5c
   1e9d0:	ldr	r0, [r9, #24]
   1e9d4:	ldr	ip, [r9, #28]
   1e9d8:	cmp	r2, #1
   1e9dc:	ldr	r2, [r9, #8]
   1e9e0:	str	lr, [sp, #56]	; 0x38
   1e9e4:	ldr	sl, [r9, #12]
   1e9e8:	str	r2, [sp]
   1e9ec:	ldr	r2, [r9, #20]
   1e9f0:	str	r0, [sp, #16]
   1e9f4:	str	ip, [sp, #32]
   1e9f8:	str	r2, [sp, #12]
   1e9fc:	mov	r2, r1
   1ea00:	ldr	r1, [r1, #96]	; 0x60
   1ea04:	ldr	r7, [r2, #120]	; 0x78
   1ea08:	ldr	r8, [r2, #108]	; 0x6c
   1ea0c:	ldr	ip, [r2, #100]	; 0x64
   1ea10:	ldr	r0, [r2, #104]	; 0x68
   1ea14:	str	r7, [sp, #24]
   1ea18:	str	r8, [sp, #8]
   1ea1c:	ldr	r7, [r2, #124]	; 0x7c
   1ea20:	ldr	r8, [r2, #112]	; 0x70
   1ea24:	ldr	fp, [r2, #116]	; 0x74
   1ea28:	str	r7, [sp, #40]	; 0x28
   1ea2c:	ble	1f2b0 <__assert_fail@plt+0xdd58>
   1ea30:	ldr	r2, [sp, #116]	; 0x74
   1ea34:	ldr	lr, [r2, #60]	; 0x3c
   1ea38:	ldr	r2, [lr]
   1ea3c:	mvn	r2, r2
   1ea40:	orr	r2, r2, r1
   1ea44:	ldr	r1, [lr, #4]
   1ea48:	and	r2, r2, r4
   1ea4c:	str	r2, [r9]
   1ea50:	mvn	r1, r1
   1ea54:	orr	r1, r1, ip
   1ea58:	ldr	ip, [lr, #8]
   1ea5c:	and	r1, r1, r5
   1ea60:	orr	r2, r2, r1
   1ea64:	mvn	r4, ip
   1ea68:	ldr	ip, [lr, #20]
   1ea6c:	orr	r4, r4, r0
   1ea70:	ldr	r0, [lr, #12]
   1ea74:	mvn	ip, ip
   1ea78:	orr	ip, ip, fp
   1ea7c:	mvn	r5, r0
   1ea80:	ldr	r0, [sp]
   1ea84:	and	r4, r4, r0
   1ea88:	ldr	r0, [lr, #24]
   1ea8c:	orr	r2, r2, r4
   1ea90:	stmib	r9, {r1, r4}
   1ea94:	ldr	r1, [sp, #8]
   1ea98:	ldr	r4, [sp, #56]	; 0x38
   1ea9c:	mvn	r0, r0
   1eaa0:	orr	r5, r5, r1
   1eaa4:	ldr	r1, [lr, #16]
   1eaa8:	and	r5, r5, sl
   1eaac:	orr	r2, r2, r5
   1eab0:	ldr	lr, [lr, #28]
   1eab4:	str	r5, [r9, #12]
   1eab8:	mvn	r1, r1
   1eabc:	orr	r1, r1, r8
   1eac0:	and	r1, r1, r4
   1eac4:	ldr	r4, [sp, #12]
   1eac8:	mvn	lr, lr
   1eacc:	orr	r2, r2, r1
   1ead0:	str	r1, [r9, #16]
   1ead4:	ldr	r1, [sp, #24]
   1ead8:	and	ip, ip, r4
   1eadc:	orr	r2, r2, ip
   1eae0:	str	ip, [r9, #20]
   1eae4:	orr	r0, r0, r1
   1eae8:	ldr	r1, [sp, #16]
   1eaec:	and	r0, r0, r1
   1eaf0:	ldr	r1, [sp, #40]	; 0x28
   1eaf4:	orr	ip, r2, r0
   1eaf8:	ldr	r2, [sp, #32]
   1eafc:	str	r0, [r9, #24]
   1eb00:	orr	lr, lr, r1
   1eb04:	and	lr, lr, r2
   1eb08:	orr	ip, ip, lr
   1eb0c:	str	lr, [r9, #28]
   1eb10:	cmp	ip, #0
   1eb14:	beq	1e688 <__assert_fail@plt+0xd130>
   1eb18:	tst	r3, #8
   1eb1c:	beq	1ec58 <__assert_fail@plt+0xd700>
   1eb20:	ldr	r3, [sp, #52]	; 0x34
   1eb24:	cmp	r3, #1
   1eb28:	beq	1f410 <__assert_fail@plt+0xdeb8>
   1eb2c:	ldr	r2, [sp, #116]	; 0x74
   1eb30:	ldr	r5, [r9]
   1eb34:	ldr	r1, [r9, #24]
   1eb38:	add	r7, r2, #112	; 0x70
   1eb3c:	ldr	r3, [r2, #92]	; 0x5c
   1eb40:	ldm	r7, {r7, sl, lr}
   1eb44:	str	r1, [sp, #12]
   1eb48:	cmp	r3, #1
   1eb4c:	ldr	ip, [r9, #28]
   1eb50:	ldr	r3, [r9, #8]
   1eb54:	ldr	r0, [r2, #100]	; 0x64
   1eb58:	str	lr, [sp, #32]
   1eb5c:	ldr	r1, [r2, #104]	; 0x68
   1eb60:	str	r3, [sp]
   1eb64:	str	ip, [sp, #16]
   1eb68:	ldr	r3, [r9, #20]
   1eb6c:	ldr	ip, [r2, #96]	; 0x60
   1eb70:	ldr	r4, [r9, #4]
   1eb74:	str	r3, [sp, #8]
   1eb78:	ldr	r3, [r2, #108]	; 0x6c
   1eb7c:	ldr	r2, [r2, #124]	; 0x7c
   1eb80:	ldr	r8, [r9, #12]
   1eb84:	ldr	fp, [r9, #16]
   1eb88:	str	r2, [sp, #24]
   1eb8c:	ble	1f3a4 <__assert_fail@plt+0xde4c>
   1eb90:	ldr	r2, [sp, #116]	; 0x74
   1eb94:	ldr	r2, [r2, #60]	; 0x3c
   1eb98:	ldr	lr, [r2]
   1eb9c:	and	ip, ip, lr
   1eba0:	ldr	lr, [r2, #4]
   1eba4:	bic	ip, r5, ip
   1eba8:	str	ip, [r9]
   1ebac:	and	r0, r0, lr
   1ebb0:	ldr	lr, [r2, #16]
   1ebb4:	bic	r4, r4, r0
   1ebb8:	ldr	r0, [r2, #8]
   1ebbc:	orr	r5, ip, r4
   1ebc0:	str	r4, [r9, #4]
   1ebc4:	ldr	ip, [sp]
   1ebc8:	and	r7, r7, lr
   1ebcc:	bic	r7, fp, r7
   1ebd0:	and	r1, r1, r0
   1ebd4:	ldr	r0, [r2, #20]
   1ebd8:	str	r7, [r9, #16]
   1ebdc:	bic	r1, ip, r1
   1ebe0:	ldr	ip, [r2, #12]
   1ebe4:	orr	r5, r5, r1
   1ebe8:	str	r1, [r9, #8]
   1ebec:	and	r0, r0, sl
   1ebf0:	and	r3, r3, ip
   1ebf4:	ldr	ip, [r2, #24]
   1ebf8:	bic	r3, r8, r3
   1ebfc:	orr	r5, r5, r3
   1ec00:	ldr	r2, [r2, #28]
   1ec04:	str	r3, [r9, #12]
   1ec08:	orr	r5, r5, r7
   1ec0c:	ldr	r3, [sp, #8]
   1ec10:	bic	r0, r3, r0
   1ec14:	ldr	r3, [sp, #32]
   1ec18:	orr	r5, r5, r0
   1ec1c:	str	r0, [r9, #20]
   1ec20:	and	r3, r3, ip
   1ec24:	mov	ip, r3
   1ec28:	ldr	r3, [sp, #12]
   1ec2c:	bic	ip, r3, ip
   1ec30:	ldr	r3, [sp, #24]
   1ec34:	orr	r5, r5, ip
   1ec38:	str	ip, [r9, #24]
   1ec3c:	and	r3, r3, r2
   1ec40:	ldr	r2, [sp, #16]
   1ec44:	bic	r3, r2, r3
   1ec48:	orr	r2, r5, r3
   1ec4c:	str	r3, [r9, #28]
   1ec50:	cmp	r2, #0
   1ec54:	beq	1e688 <__assert_fail@plt+0xd130>
   1ec58:	ldr	r3, [sp, #48]	; 0x30
   1ec5c:	cmp	r3, #0
   1ec60:	movle	fp, #0
   1ec64:	ble	1f01c <__assert_fail@plt+0xdac4>
   1ec68:	add	r3, sp, #3312	; 0xcf0
   1ec6c:	mov	fp, #0
   1ec70:	add	r3, r3, #8
   1ec74:	add	r4, sp, #6336	; 0x18c0
   1ec78:	add	r4, r4, #56	; 0x38
   1ec7c:	str	fp, [sp]
   1ec80:	mov	r6, r4
   1ec84:	str	r3, [sp, #8]
   1ec88:	str	r3, [sp, #108]	; 0x6c
   1ec8c:	b	1ecec <__assert_fail@plt+0xd794>
   1ec90:	ldr	r3, [sp, #96]	; 0x60
   1ec94:	add	r0, sp, #14528	; 0x38c0
   1ec98:	add	r0, r0, #56	; 0x38
   1ec9c:	ldrb	r2, [r3]
   1eca0:	asr	r3, r2, #5
   1eca4:	and	r2, r2, #31
   1eca8:	add	r3, r0, r3, lsl #2
   1ecac:	add	r3, r3, r1
   1ecb0:	sub	r3, r3, #8192	; 0x2000
   1ecb4:	ldr	r3, [r3]
   1ecb8:	lsr	r2, r3, r2
   1ecbc:	tst	r2, #1
   1ecc0:	bne	1ed00 <__assert_fail@plt+0xd7a8>
   1ecc4:	ldr	r3, [sp]
   1ecc8:	add	r6, r6, #32
   1eccc:	add	r2, r3, #1
   1ecd0:	ldr	r3, [sp, #48]	; 0x30
   1ecd4:	str	r2, [sp]
   1ecd8:	cmp	r2, r3
   1ecdc:	ldr	r3, [sp, #8]
   1ece0:	add	r3, r3, #12
   1ece4:	str	r3, [sp, #8]
   1ece8:	bge	1f1b8 <__assert_fail@plt+0xdc60>
   1ecec:	ldr	r3, [sp, #52]	; 0x34
   1ecf0:	cmp	r3, #1
   1ecf4:	ldr	r3, [sp]
   1ecf8:	lsl	r1, r3, #5
   1ecfc:	beq	1ec90 <__assert_fail@plt+0xd738>
   1ed00:	ldr	fp, [r6]
   1ed04:	ldm	r9, {r2, r4, lr}
   1ed08:	ldr	sl, [r6, #4]
   1ed0c:	and	r3, r2, fp
   1ed10:	str	fp, [sp, #56]	; 0x38
   1ed14:	ldr	r8, [r6, #8]
   1ed18:	str	r3, [sp, #64]	; 0x40
   1ed1c:	ldr	r7, [r6, #12]
   1ed20:	and	r1, r4, sl
   1ed24:	orr	r3, r3, r1
   1ed28:	ldr	ip, [r9, #12]
   1ed2c:	and	r0, lr, r8
   1ed30:	str	r1, [sp, #68]	; 0x44
   1ed34:	mov	r5, r0
   1ed38:	ldr	r1, [r6, #16]
   1ed3c:	orr	r3, r3, r5
   1ed40:	ldr	r0, [r9, #16]
   1ed44:	and	fp, ip, r7
   1ed48:	orr	r3, r3, fp
   1ed4c:	str	r5, [sp, #72]	; 0x48
   1ed50:	ldr	r5, [r9, #20]
   1ed54:	str	fp, [sp, #76]	; 0x4c
   1ed58:	ldr	fp, [r9, #24]
   1ed5c:	str	r5, [sp, #12]
   1ed60:	ldr	r5, [r6, #20]
   1ed64:	str	r1, [sp, #60]	; 0x3c
   1ed68:	str	r5, [sp, #16]
   1ed6c:	and	r5, r0, r1
   1ed70:	orr	r3, r3, r5
   1ed74:	ldr	r1, [sp, #12]
   1ed78:	str	fp, [sp, #24]
   1ed7c:	str	r5, [sp, #80]	; 0x50
   1ed80:	ldr	r5, [sp, #16]
   1ed84:	ldr	fp, [r6, #24]
   1ed88:	and	r1, r1, r5
   1ed8c:	ldr	r5, [r9, #28]
   1ed90:	orr	r3, r3, r1
   1ed94:	str	fp, [sp, #32]
   1ed98:	ldr	fp, [sp, #24]
   1ed9c:	str	r5, [sp, #40]	; 0x28
   1eda0:	str	r1, [sp, #84]	; 0x54
   1eda4:	ldr	r1, [r6, #28]
   1eda8:	ldr	r5, [sp, #32]
   1edac:	and	fp, fp, r5
   1edb0:	ldr	r5, [sp, #40]	; 0x28
   1edb4:	orr	r3, r3, fp
   1edb8:	str	fp, [sp, #88]	; 0x58
   1edbc:	and	r5, r5, r1
   1edc0:	orrs	r3, r3, r5
   1edc4:	str	r5, [sp, #92]	; 0x5c
   1edc8:	beq	1ecc4 <__assert_fail@plt+0xd76c>
   1edcc:	ldr	fp, [sp, #56]	; 0x38
   1edd0:	bic	r5, sl, r4
   1edd4:	bic	r4, r4, sl
   1edd8:	str	r5, [sp, #120]	; 0x78
   1eddc:	bic	r3, fp, r2
   1ede0:	bic	r2, r2, fp
   1ede4:	ldr	fp, [sp, #32]
   1ede8:	mov	sl, r3
   1edec:	str	r3, [sp, #56]	; 0x38
   1edf0:	orr	r3, sl, r5
   1edf4:	bic	sl, r8, lr
   1edf8:	bic	lr, lr, r8
   1edfc:	stm	r9, {r2, r4}
   1ee00:	orr	r2, r2, r4
   1ee04:	orr	r2, r2, lr
   1ee08:	bic	r8, r7, ip
   1ee0c:	ldr	r5, [sp, #16]
   1ee10:	str	lr, [r9, #8]
   1ee14:	bic	ip, ip, r7
   1ee18:	orr	r3, r3, sl
   1ee1c:	ldr	lr, [sp, #60]	; 0x3c
   1ee20:	orr	r2, r2, ip
   1ee24:	orr	r3, r3, r8
   1ee28:	str	ip, [r9, #12]
   1ee2c:	ldr	ip, [sp, #24]
   1ee30:	bic	r7, lr, r0
   1ee34:	bic	r0, r0, lr
   1ee38:	ldr	lr, [sp, #12]
   1ee3c:	orr	r2, r2, r0
   1ee40:	orr	r3, r3, r7
   1ee44:	str	r0, [r9, #16]
   1ee48:	bic	r0, ip, fp
   1ee4c:	bic	r4, r5, lr
   1ee50:	bic	r5, lr, r5
   1ee54:	bic	lr, fp, ip
   1ee58:	ldr	fp, [sp, #40]	; 0x28
   1ee5c:	orr	r3, r3, r4
   1ee60:	orr	r2, r2, r5
   1ee64:	orr	r3, r3, lr
   1ee68:	str	r5, [r9, #20]
   1ee6c:	orr	r2, r2, r0
   1ee70:	bic	ip, r1, fp
   1ee74:	bic	r1, fp, r1
   1ee78:	orrs	r3, r3, ip
   1ee7c:	orr	r5, r2, r1
   1ee80:	strd	r0, [r9, #24]
   1ee84:	beq	1eff0 <__assert_fail@plt+0xda98>
   1ee88:	ldr	r2, [sp, #48]	; 0x30
   1ee8c:	str	sl, [r9, #-2072]	; 0xfffff7e8
   1ee90:	ldr	r3, [sp, #64]	; 0x40
   1ee94:	str	ip, [r9, #-2052]	; 0xfffff7fc
   1ee98:	ldr	r1, [sp, #68]	; 0x44
   1ee9c:	ldr	r0, [sp, #72]	; 0x48
   1eea0:	str	r3, [r9, #-2112]	; 0xfffff7c0
   1eea4:	ldr	fp, [sp, #76]	; 0x4c
   1eea8:	str	r1, [r9, #-2108]	; 0xfffff7c4
   1eeac:	lsl	r1, r2, #1
   1eeb0:	ldr	ip, [sp, #124]	; 0x7c
   1eeb4:	str	r0, [r9, #-2104]	; 0xfffff7c8
   1eeb8:	add	r0, sp, #14528	; 0x38c0
   1eebc:	add	r0, r0, #56	; 0x38
   1eec0:	str	r1, [sp, #60]	; 0x3c
   1eec4:	add	r3, r0, r2, lsl #5
   1eec8:	add	r2, r1, r2
   1eecc:	ldr	r1, [sp, #80]	; 0x50
   1eed0:	str	fp, [r9, #-2100]	; 0xfffff7cc
   1eed4:	ldr	fp, [sp, #88]	; 0x58
   1eed8:	sub	r3, r3, #8192	; 0x2000
   1eedc:	ldr	r0, [sp, #108]	; 0x6c
   1eee0:	str	r1, [r9, #-2096]	; 0xfffff7d0
   1eee4:	ldr	r1, [sp, #84]	; 0x54
   1eee8:	str	r8, [r9, #-2068]	; 0xfffff7ec
   1eeec:	add	r0, r0, r2, lsl #2
   1eef0:	str	r1, [r9, #-2092]	; 0xfffff7d4
   1eef4:	ldr	r1, [sp, #92]	; 0x5c
   1eef8:	str	r7, [r9, #-2064]	; 0xfffff7f0
   1eefc:	str	r4, [r9, #-2060]	; 0xfffff7f4
   1ef00:	str	lr, [r9, #-2056]	; 0xfffff7f8
   1ef04:	str	r0, [sp, #12]
   1ef08:	str	fp, [r9, #-2088]	; 0xfffff7d8
   1ef0c:	str	r1, [r9, #-2084]	; 0xfffff7dc
   1ef10:	ldr	r1, [sp, #56]	; 0x38
   1ef14:	str	r1, [r9, #-2080]	; 0xfffff7e0
   1ef18:	ldr	r1, [sp, #120]	; 0x78
   1ef1c:	str	r1, [r9, #-2076]	; 0xfffff7e4
   1ef20:	ldrd	r0, [ip]
   1ef24:	ldrd	sl, [sp, #184]	; 0xb8
   1ef28:	ldr	r4, [sp, #12]
   1ef2c:	strd	r0, [r3]
   1ef30:	ldrd	r0, [sp, #192]	; 0xc0
   1ef34:	strd	sl, [sp, #24]
   1ef38:	ldrd	sl, [ip, #8]
   1ef3c:	strd	r0, [sp, #32]
   1ef40:	ldrd	r0, [ip, #16]
   1ef44:	strd	r0, [sp, #16]
   1ef48:	mov	r0, sl
   1ef4c:	mov	r1, fp
   1ef50:	ldrd	sl, [sp, #200]	; 0xc8
   1ef54:	strd	r0, [r3, #8]
   1ef58:	ldrd	r0, [sp, #16]
   1ef5c:	strd	sl, [sp, #40]	; 0x28
   1ef60:	ldrd	sl, [ip, #24]
   1ef64:	strd	r0, [r3, #16]
   1ef68:	ldrd	r0, [sp, #208]	; 0xd0
   1ef6c:	strd	r0, [sp, #16]
   1ef70:	mov	r0, sl
   1ef74:	mov	r1, fp
   1ef78:	ldrd	sl, [sp, #24]
   1ef7c:	strd	r0, [r3, #24]
   1ef80:	ldr	r3, [sp, #8]
   1ef84:	ldrd	r0, [sp, #32]
   1ef88:	strd	sl, [r6]
   1ef8c:	ldrd	sl, [sp, #40]	; 0x28
   1ef90:	ldr	r3, [r3, #4]
   1ef94:	strd	r0, [r6, #8]
   1ef98:	ldrd	r0, [sp, #16]
   1ef9c:	strd	sl, [r6, #16]
   1efa0:	cmp	r3, #0
   1efa4:	str	r3, [r4, #4]
   1efa8:	strd	r0, [r6, #24]
   1efac:	ble	1f034 <__assert_fail@plt+0xdadc>
   1efb0:	ldr	r1, [sp, #108]	; 0x6c
   1efb4:	lsl	r0, r3, #2
   1efb8:	str	r3, [r1, r2, lsl #2]
   1efbc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1efc0:	cmp	r0, #0
   1efc4:	str	r0, [r4, #8]
   1efc8:	ldr	r1, [sp, #60]	; 0x3c
   1efcc:	beq	1f4e8 <__assert_fail@plt+0xdf90>
   1efd0:	ldr	r3, [sp, #8]
   1efd4:	ldr	r2, [r3, #4]
   1efd8:	ldr	r1, [r3, #8]
   1efdc:	lsl	r2, r2, #2
   1efe0:	bl	11264 <memcpy@plt>
   1efe4:	ldr	r3, [sp, #48]	; 0x30
   1efe8:	add	r3, r3, #1
   1efec:	str	r3, [sp, #48]	; 0x30
   1eff0:	ldr	r0, [sp, #8]
   1eff4:	ldr	r3, [sp, #100]	; 0x64
   1eff8:	ldr	r2, [sp, #112]	; 0x70
   1effc:	ldr	r3, [r3, #12]
   1f000:	ldr	r1, [r3, r2]
   1f004:	bl	18d78 <__assert_fail@plt+0x7820>
   1f008:	cmp	r0, #0
   1f00c:	beq	1f160 <__assert_fail@plt+0xdc08>
   1f010:	cmp	r5, #0
   1f014:	bne	1ecc4 <__assert_fail@plt+0xd76c>
   1f018:	ldr	fp, [sp]
   1f01c:	ldr	r3, [sp, #48]	; 0x30
   1f020:	cmp	r3, fp
   1f024:	beq	1f1c8 <__assert_fail@plt+0xdc70>
   1f028:	ldr	r3, [sp, #100]	; 0x64
   1f02c:	ldr	r6, [r3, #8]
   1f030:	b	1e688 <__assert_fail@plt+0xd130>
   1f034:	ldr	r1, [sp, #108]	; 0x6c
   1f038:	mov	r3, #0
   1f03c:	str	r3, [r1, r2, lsl #2]
   1f040:	ldr	r2, [sp, #12]
   1f044:	str	r3, [r2, #4]
   1f048:	str	r3, [r2, #8]
   1f04c:	b	1efe4 <__assert_fail@plt+0xda8c>
   1f050:	ldr	r1, [sp, #116]	; 0x74
   1f054:	ldr	r2, [r1, #92]	; 0x5c
   1f058:	cmp	r2, #1
   1f05c:	ble	1f294 <__assert_fail@plt+0xdd3c>
   1f060:	ldr	r2, [r1, #60]	; 0x3c
   1f064:	ldm	r9, {r1, ip}
   1f068:	ldm	r2, {r0, lr}
   1f06c:	ldr	r4, [r2, #8]
   1f070:	orr	r1, r1, r0
   1f074:	orr	ip, ip, lr
   1f078:	ldr	r0, [r9, #8]
   1f07c:	stm	r9, {r1, ip}
   1f080:	ldr	lr, [r2, #12]
   1f084:	ldr	r1, [r9, #12]
   1f088:	orr	r0, r0, r4
   1f08c:	str	r0, [r9, #8]
   1f090:	ldr	r4, [r2, #16]
   1f094:	orr	r1, r1, lr
   1f098:	ldr	r0, [r9, #16]
   1f09c:	ldr	ip, [r2, #20]
   1f0a0:	str	r1, [r9, #12]
   1f0a4:	ldr	lr, [r9, #20]
   1f0a8:	orr	r0, r0, r4
   1f0ac:	ldr	r1, [r2, #24]
   1f0b0:	str	r0, [r9, #16]
   1f0b4:	ldr	r0, [r9, #24]
   1f0b8:	orr	ip, lr, ip
   1f0bc:	ldr	r2, [r2, #28]
   1f0c0:	str	ip, [r9, #20]
   1f0c4:	ldr	ip, [r9, #28]
   1f0c8:	orr	r1, r0, r1
   1f0cc:	str	r1, [r9, #24]
   1f0d0:	orr	r2, ip, r2
   1f0d4:	str	r2, [r9, #28]
   1f0d8:	ldr	r2, [sp, #116]	; 0x74
   1f0dc:	ldr	r2, [r2, #128]	; 0x80
   1f0e0:	tst	r2, #64	; 0x40
   1f0e4:	beq	1f284 <__assert_fail@plt+0xdd2c>
   1f0e8:	tst	r2, #128	; 0x80
   1f0ec:	beq	1e994 <__assert_fail@plt+0xd43c>
   1f0f0:	ldr	r2, [r9]
   1f0f4:	bic	r2, r2, #1
   1f0f8:	str	r2, [r9]
   1f0fc:	b	1e994 <__assert_fail@plt+0xd43c>
   1f100:	ldr	r2, [r9]
   1f104:	ldr	r1, [sp, #128]	; 0x80
   1f108:	ldr	r0, [sp, #132]	; 0x84
   1f10c:	tst	r2, #1024	; 0x400
   1f110:	str	r1, [r9]
   1f114:	strd	r0, [r9, #4]
   1f118:	str	r0, [r9, #12]
   1f11c:	str	r1, [r9, #16]
   1f120:	str	r0, [r9, #20]
   1f124:	str	r1, [r9, #24]
   1f128:	str	r0, [r9, #28]
   1f12c:	beq	1e688 <__assert_fail@plt+0xd130>
   1f130:	mov	r2, #1024	; 0x400
   1f134:	tst	r3, #128	; 0x80
   1f138:	str	r2, [r9]
   1f13c:	beq	1e9ac <__assert_fail@plt+0xd454>
   1f140:	ldr	r3, [sp, #128]	; 0x80
   1f144:	ldr	r2, [sp, #132]	; 0x84
   1f148:	str	r3, [r9]
   1f14c:	strd	r2, [r9, #4]
   1f150:	strd	r2, [r9, #12]
   1f154:	strd	r2, [r9, #20]
   1f158:	str	r2, [r9, #28]
   1f15c:	b	1e688 <__assert_fail@plt+0xd130>
   1f160:	ldr	r3, [sp, #48]	; 0x30
   1f164:	lsl	r3, r3, #1
   1f168:	mov	r2, r3
   1f16c:	mov	r3, r2
   1f170:	ldr	r2, [sp, #48]	; 0x30
   1f174:	ldr	r4, [sp, #108]	; 0x6c
   1f178:	add	r1, r3, r2
   1f17c:	add	r5, r4, r1, lsl #2
   1f180:	add	r4, r4, #12
   1f184:	ldr	r0, [r4, #-4]
   1f188:	bl	13e1c <__assert_fail@plt+0x28c4>
   1f18c:	cmp	r5, r4
   1f190:	bne	1f180 <__assert_fail@plt+0xdc28>
   1f194:	mov	r0, #0
   1f198:	add	sp, sp, #14528	; 0x38c0
   1f19c:	add	sp, sp, #60	; 0x3c
   1f1a0:	ldrd	r4, [sp]
   1f1a4:	ldrd	r6, [sp, #8]
   1f1a8:	ldrd	r8, [sp, #16]
   1f1ac:	ldrd	sl, [sp, #24]
   1f1b0:	add	sp, sp, #32
   1f1b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1b8:	ldr	r3, [sp, #48]	; 0x30
   1f1bc:	mov	fp, r2
   1f1c0:	cmp	r3, fp
   1f1c4:	bne	1f028 <__assert_fail@plt+0xdad0>
   1f1c8:	ldr	r2, [sp, #100]	; 0x64
   1f1cc:	lsl	sl, r3, #1
   1f1d0:	add	ip, sp, #3312	; 0xcf0
   1f1d4:	add	ip, ip, #8
   1f1d8:	ldrd	r6, [r9]
   1f1dc:	add	r1, sl, r3
   1f1e0:	add	r5, ip, r1, lsl #2
   1f1e4:	str	ip, [sp, #108]	; 0x6c
   1f1e8:	ldr	lr, [sp, #112]	; 0x70
   1f1ec:	ldr	r0, [r2, #12]
   1f1f0:	add	r2, sp, #14528	; 0x38c0
   1f1f4:	add	r2, r2, #56	; 0x38
   1f1f8:	add	r3, r2, r3, lsl #5
   1f1fc:	mov	r2, #1
   1f200:	sub	r3, r3, #8192	; 0x2000
   1f204:	ldr	r4, [r0, lr]
   1f208:	mov	r0, #4
   1f20c:	strd	r6, [r3]
   1f210:	ldrd	r6, [r9, #16]
   1f214:	str	r2, [ip, r1, lsl #2]
   1f218:	str	r2, [r5, #4]
   1f21c:	strd	r6, [sp]
   1f220:	ldrd	r6, [r9, #8]
   1f224:	strd	r6, [r3, #8]
   1f228:	ldrd	r6, [sp]
   1f22c:	strd	r6, [r3, #16]
   1f230:	ldrd	r6, [r9, #24]
   1f234:	strd	r6, [r3, #24]
   1f238:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1f23c:	cmp	r0, #0
   1f240:	str	r0, [r5, #8]
   1f244:	beq	1f4fc <__assert_fail@plt+0xdfa4>
   1f248:	ldr	r3, [sp, #100]	; 0x64
   1f24c:	str	r4, [r0]
   1f250:	ldr	r6, [r3, #8]
   1f254:	ldr	r3, [sp, #48]	; 0x30
   1f258:	add	r3, r3, #1
   1f25c:	str	r3, [sp, #48]	; 0x30
   1f260:	b	1f140 <__assert_fail@plt+0xdbe8>
   1f264:	ldr	r2, [sp, #116]	; 0x74
   1f268:	mvn	r0, #0
   1f26c:	mvn	r1, #0
   1f270:	strd	r0, [r9]
   1f274:	strd	r0, [r9, #8]
   1f278:	ldr	r2, [r2, #128]	; 0x80
   1f27c:	tst	r2, #64	; 0x40
   1f280:	bne	1f0e8 <__assert_fail@plt+0xdb90>
   1f284:	ldr	r1, [r9]
   1f288:	bic	r1, r1, #1024	; 0x400
   1f28c:	str	r1, [r9]
   1f290:	b	1f0e8 <__assert_fail@plt+0xdb90>
   1f294:	mvn	r0, #0
   1f298:	mvn	r1, #0
   1f29c:	strd	r0, [r9]
   1f2a0:	strd	r0, [r9, #8]
   1f2a4:	strd	r0, [r9, #16]
   1f2a8:	strd	r0, [r9, #24]
   1f2ac:	b	1f0d8 <__assert_fail@plt+0xdb80>
   1f2b0:	and	r2, r4, r1
   1f2b4:	ldr	r4, [sp]
   1f2b8:	and	r1, r5, ip
   1f2bc:	orr	ip, r2, r1
   1f2c0:	and	lr, lr, r8
   1f2c4:	ldr	r5, [sp, #8]
   1f2c8:	mov	r8, lr
   1f2cc:	str	r2, [r9]
   1f2d0:	ldr	r2, [sp, #12]
   1f2d4:	and	r4, r4, r0
   1f2d8:	ldr	r0, [sp, #16]
   1f2dc:	orr	ip, ip, r4
   1f2e0:	and	r5, r5, sl
   1f2e4:	ldr	r7, [sp, #24]
   1f2e8:	orr	ip, ip, r5
   1f2ec:	and	r2, r2, fp
   1f2f0:	orr	ip, ip, lr
   1f2f4:	stmib	r9, {r1, r4, r5, r8}
   1f2f8:	mov	fp, r2
   1f2fc:	orr	ip, ip, r2
   1f300:	ldr	r2, [sp, #32]
   1f304:	and	r0, r0, r7
   1f308:	str	fp, [r9, #20]
   1f30c:	ldr	r7, [sp, #40]	; 0x28
   1f310:	orr	ip, ip, r0
   1f314:	str	r0, [r9, #24]
   1f318:	and	r2, r2, r7
   1f31c:	orr	ip, ip, r2
   1f320:	str	r2, [r9, #28]
   1f324:	b	1eb10 <__assert_fail@plt+0xd5b8>
   1f328:	ldr	r2, [r2, r1, lsl #3]
   1f32c:	ldm	r9, {r1, ip}
   1f330:	ldm	r2, {r0, lr}
   1f334:	ldr	r4, [r2, #8]
   1f338:	orr	r1, r1, r0
   1f33c:	orr	ip, ip, lr
   1f340:	ldr	r0, [r9, #8]
   1f344:	stm	r9, {r1, ip}
   1f348:	ldr	lr, [r2, #12]
   1f34c:	ldr	r1, [r9, #12]
   1f350:	orr	r0, r0, r4
   1f354:	str	r0, [r9, #8]
   1f358:	ldr	r4, [r2, #16]
   1f35c:	orr	r1, r1, lr
   1f360:	ldr	r0, [r9, #16]
   1f364:	ldr	ip, [r2, #20]
   1f368:	str	r1, [r9, #12]
   1f36c:	ldr	lr, [r9, #20]
   1f370:	orr	r0, r0, r4
   1f374:	ldr	r1, [r2, #24]
   1f378:	str	r0, [r9, #16]
   1f37c:	ldr	r0, [r9, #24]
   1f380:	orr	ip, lr, ip
   1f384:	ldr	r2, [r2, #28]
   1f388:	str	ip, [r9, #20]
   1f38c:	ldr	ip, [r9, #28]
   1f390:	orr	r1, r0, r1
   1f394:	str	r1, [r9, #24]
   1f398:	orr	r2, ip, r2
   1f39c:	str	r2, [r9, #28]
   1f3a0:	b	1e994 <__assert_fail@plt+0xd43c>
   1f3a4:	ldr	r2, [sp]
   1f3a8:	bic	ip, r5, ip
   1f3ac:	bic	r0, r4, r0
   1f3b0:	bic	r3, r8, r3
   1f3b4:	bic	r7, fp, r7
   1f3b8:	str	ip, [r9]
   1f3bc:	str	r3, [r9, #12]
   1f3c0:	str	r7, [r9, #16]
   1f3c4:	bic	r1, r2, r1
   1f3c8:	orr	r2, ip, r0
   1f3cc:	orr	r2, r2, r1
   1f3d0:	strd	r0, [r9, #4]
   1f3d4:	orr	r2, r2, r3
   1f3d8:	ldrd	r0, [sp, #8]
   1f3dc:	orr	r2, r2, r7
   1f3e0:	ldr	r3, [sp, #16]
   1f3e4:	bic	ip, r1, lr
   1f3e8:	ldr	r1, [sp, #24]
   1f3ec:	bic	sl, r0, sl
   1f3f0:	orr	r2, r2, sl
   1f3f4:	orr	r2, r2, ip
   1f3f8:	str	sl, [r9, #20]
   1f3fc:	str	ip, [r9, #24]
   1f400:	bic	r3, r3, r1
   1f404:	orr	r2, r2, r3
   1f408:	str	r3, [r9, #28]
   1f40c:	b	1ec50 <__assert_fail@plt+0xd6f8>
   1f410:	ldr	r3, [sp, #96]	; 0x60
   1f414:	ldrb	r3, [r3, #6]
   1f418:	tst	r3, #64	; 0x40
   1f41c:	beq	1eb2c <__assert_fail@plt+0xd5d4>
   1f420:	b	1f140 <__assert_fail@plt+0xdbe8>
   1f424:	ldr	r2, [sp, #96]	; 0x60
   1f428:	ldrb	r2, [r2, #6]
   1f42c:	tst	r2, #64	; 0x40
   1f430:	bne	1e9c0 <__assert_fail@plt+0xd468>
   1f434:	b	1f140 <__assert_fail@plt+0xdbe8>
   1f438:	ldr	r3, [r9, #-2160]	; 0xfffff790
   1f43c:	cmp	r3, #0
   1f440:	beq	1f4a4 <__assert_fail@plt+0xdf4c>
   1f444:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   1f448:	ldr	r4, [sp, #108]	; 0x6c
   1f44c:	bl	13e1c <__assert_fail@plt+0x28c4>
   1f450:	ldr	r3, [sp, #48]	; 0x30
   1f454:	add	r5, r3, r3, lsl #1
   1f458:	add	r5, r4, r5, lsl #2
   1f45c:	add	r4, r4, #12
   1f460:	ldr	r0, [r4, #-4]
   1f464:	bl	13e1c <__assert_fail@plt+0x28c4>
   1f468:	cmp	r4, r5
   1f46c:	bne	1f45c <__assert_fail@plt+0xdf04>
   1f470:	b	1f194 <__assert_fail@plt+0xdc3c>
   1f474:	mov	r3, #1
   1f478:	add	r2, sp, #140	; 0x8c
   1f47c:	ldr	r0, [sp, #40]	; 0x28
   1f480:	mov	r1, fp
   1f484:	bl	1e188 <__assert_fail@plt+0xcc30>
   1f488:	add	r3, sp, #1264	; 0x4f0
   1f48c:	cmp	r0, #0
   1f490:	add	r3, r3, #8
   1f494:	str	r0, [r3, r8, lsl #2]
   1f498:	beq	1f438 <__assert_fail@plt+0xdee0>
   1f49c:	cmp	r7, r0
   1f4a0:	beq	1f4b8 <__assert_fail@plt+0xdf60>
   1f4a4:	ldr	r3, [fp, #92]	; 0x5c
   1f4a8:	cmp	r3, #2
   1f4ac:	ldr	r3, [sp, #52]	; 0x34
   1f4b0:	movge	r3, #1
   1f4b4:	str	r3, [sp, #52]	; 0x34
   1f4b8:	mov	r3, #2
   1f4bc:	add	r2, sp, #140	; 0x8c
   1f4c0:	ldr	r0, [sp, #40]	; 0x28
   1f4c4:	mov	r1, fp
   1f4c8:	bl	1e188 <__assert_fail@plt+0xcc30>
   1f4cc:	cmp	r0, #0
   1f4d0:	str	r0, [r9, r8, lsl #2]
   1f4d4:	bne	1e7e0 <__assert_fail@plt+0xd288>
   1f4d8:	ldr	r3, [r9, #-2160]	; 0xfffff790
   1f4dc:	cmp	r3, #0
   1f4e0:	beq	1e7e0 <__assert_fail@plt+0xd288>
   1f4e4:	b	1f444 <__assert_fail@plt+0xdeec>
   1f4e8:	mov	r2, r1
   1f4ec:	ldr	r1, [sp, #12]
   1f4f0:	str	r0, [r1]
   1f4f4:	str	r0, [r1, #4]
   1f4f8:	b	1f16c <__assert_fail@plt+0xdc14>
   1f4fc:	ldr	r3, [sp, #48]	; 0x30
   1f500:	mov	r2, sl
   1f504:	str	r0, [r5]
   1f508:	str	r0, [r5, #4]
   1f50c:	cmp	r3, #0
   1f510:	beq	1f194 <__assert_fail@plt+0xdc3c>
   1f514:	b	1f16c <__assert_fail@plt+0xdc14>
   1f518:	ldr	r3, [r9, #-2160]	; 0xfffff790
   1f51c:	cmp	r3, #0
   1f520:	beq	1e7c4 <__assert_fail@plt+0xd26c>
   1f524:	b	1f444 <__assert_fail@plt+0xdeec>
   1f528:	add	r2, sp, #3312	; 0xcf0
   1f52c:	mov	r3, #12
   1f530:	add	r2, r2, #8
   1f534:	str	r3, [r9, #-2160]	; 0xfffff790
   1f538:	str	r2, [sp, #108]	; 0x6c
   1f53c:	b	1f448 <__assert_fail@plt+0xdef0>
   1f540:	ldr	r2, [lr]
   1f544:	ands	r2, r1, r2
   1f548:	bne	1f5a0 <__assert_fail@plt+0xe048>
   1f54c:	add	r2, r2, #1
   1f550:	ldr	r8, [lr, r2, lsl #5]
   1f554:	tst	r1, r8
   1f558:	beq	1f54c <__assert_fail@plt+0xdff4>
   1f55c:	ldr	r8, [r5]
   1f560:	add	r2, r9, r2, lsl #2
   1f564:	tst	r1, r8
   1f568:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   1f56c:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   1f570:	str	r2, [r0]
   1f574:	b	1e8e0 <__assert_fail@plt+0xd388>
   1f578:	bne	1f194 <__assert_fail@plt+0xdc3c>
   1f57c:	mov	r1, #256	; 0x100
   1f580:	mov	r0, #4
   1f584:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   1f588:	ldr	r2, [sp, #100]	; 0x64
   1f58c:	mov	r3, r0
   1f590:	adds	r0, r0, #0
   1f594:	movne	r0, #1
   1f598:	str	r3, [r2, #44]	; 0x2c
   1f59c:	b	1f198 <__assert_fail@plt+0xdc40>
   1f5a0:	mov	r2, #0
   1f5a4:	b	1f55c <__assert_fail@plt+0xe004>
   1f5a8:	ldr	r2, [sp, #52]	; 0x34
   1f5ac:	ldr	r3, [r9, r0, lsl #2]
   1f5b0:	cmp	r2, #0
   1f5b4:	strne	r3, [r7, #1064]	; 0x428
   1f5b8:	str	r3, [r7, #40]	; 0x28
   1f5bc:	b	1e940 <__assert_fail@plt+0xd3e8>
   1f5c0:	mov	r1, #512	; 0x200
   1f5c4:	mov	r0, #4
   1f5c8:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   1f5cc:	ldr	r3, [sp, #100]	; 0x64
   1f5d0:	cmp	r0, #0
   1f5d4:	mov	r7, r0
   1f5d8:	str	r0, [r3, #48]	; 0x30
   1f5dc:	beq	1f444 <__assert_fail@plt+0xdeec>
   1f5e0:	ldr	ip, [sp, #56]	; 0x38
   1f5e4:	add	r4, sp, #148	; 0x94
   1f5e8:	mov	lr, r0
   1f5ec:	add	r5, r0, #1024	; 0x400
   1f5f0:	ldr	r3, [r4, #4]!
   1f5f4:	cmp	r3, #0
   1f5f8:	movne	r0, lr
   1f5fc:	movne	r1, #1
   1f600:	beq	1f61c <__assert_fail@plt+0xe0c4>
   1f604:	tst	r3, #1
   1f608:	bne	1f630 <__assert_fail@plt+0xe0d8>
   1f60c:	lsrs	r3, r3, #1
   1f610:	add	r0, r0, #4
   1f614:	lsl	r1, r1, #1
   1f618:	bne	1f604 <__assert_fail@plt+0xe0ac>
   1f61c:	add	lr, lr, #128	; 0x80
   1f620:	add	ip, ip, #4
   1f624:	cmp	r5, lr
   1f628:	bne	1f5f0 <__assert_fail@plt+0xe098>
   1f62c:	b	1e904 <__assert_fail@plt+0xd3ac>
   1f630:	ldr	r2, [ip]
   1f634:	ands	r2, r1, r2
   1f638:	bne	1f664 <__assert_fail@plt+0xe10c>
   1f63c:	add	r2, r2, #1
   1f640:	ldr	r6, [ip, r2, lsl #5]
   1f644:	tst	r1, r6
   1f648:	beq	1f63c <__assert_fail@plt+0xe0e4>
   1f64c:	add	r2, r9, r2, lsl #2
   1f650:	ldr	r6, [r2, #-2048]	; 0xfffff800
   1f654:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1f658:	str	r6, [r0]
   1f65c:	str	r2, [r0, #1024]	; 0x400
   1f660:	b	1f60c <__assert_fail@plt+0xe0b4>
   1f664:	mov	r2, #0
   1f668:	b	1f64c <__assert_fail@plt+0xe0f4>
   1f66c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f670:	mov	r4, r0
   1f674:	ldr	r0, [r0, #84]	; 0x54
   1f678:	ldr	r5, [r1, #4]
   1f67c:	strd	r6, [sp, #8]
   1f680:	mov	r7, r3
   1f684:	mov	r6, #0
   1f688:	strd	r8, [sp, #16]
   1f68c:	mov	r9, r2
   1f690:	ldr	r3, [r0]
   1f694:	strd	sl, [sp, #24]
   1f698:	str	lr, [sp, #32]
   1f69c:	sub	sp, sp, #76	; 0x4c
   1f6a0:	ldr	r2, [r4, #120]	; 0x78
   1f6a4:	str	r0, [sp, #16]
   1f6a8:	str	r1, [sp, #28]
   1f6ac:	ldr	r1, [sp, #116]	; 0x74
   1f6b0:	ldr	r3, [r3, r9, lsl #3]
   1f6b4:	add	r2, r1, r2
   1f6b8:	cmp	r2, r5
   1f6bc:	str	r3, [sp, #20]
   1f6c0:	str	r6, [sp, #40]	; 0x28
   1f6c4:	bge	1fd70 <__assert_fail@plt+0xe818>
   1f6c8:	ldr	r3, [sp, #28]
   1f6cc:	ldr	r2, [r4, #88]	; 0x58
   1f6d0:	ldr	r6, [r3]
   1f6d4:	ldr	r5, [r3, #8]
   1f6d8:	ldr	r3, [r4, #40]	; 0x28
   1f6dc:	cmp	r6, #0
   1f6e0:	str	r3, [sp, #36]	; 0x24
   1f6e4:	ldr	r3, [r4, #100]	; 0x64
   1f6e8:	str	r3, [sp, #32]
   1f6ec:	bne	1fb1c <__assert_fail@plt+0xe5c4>
   1f6f0:	sub	r1, r7, #1
   1f6f4:	mov	r0, r4
   1f6f8:	str	r7, [r4, #40]	; 0x28
   1f6fc:	str	r5, [r4, #100]	; 0x64
   1f700:	bl	19338 <__assert_fail@plt+0x7de0>
   1f704:	mov	r8, r0
   1f708:	mov	r2, #1
   1f70c:	mov	r3, #1
   1f710:	mov	r0, #4
   1f714:	strd	r2, [sp, #48]	; 0x30
   1f718:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1f71c:	cmp	r0, #0
   1f720:	str	r0, [sp, #56]	; 0x38
   1f724:	beq	1fde0 <__assert_fail@plt+0xe888>
   1f728:	mov	ip, #0
   1f72c:	add	r5, sp, #48	; 0x30
   1f730:	str	r9, [r0]
   1f734:	mov	r1, r5
   1f738:	ldr	r0, [sp, #16]
   1f73c:	str	ip, [sp, #40]	; 0x28
   1f740:	ldr	r2, [sp, #20]
   1f744:	ldr	r3, [sp, #120]	; 0x78
   1f748:	bl	1cf78 <__assert_fail@plt+0xba20>
   1f74c:	cmp	r0, #0
   1f750:	str	r0, [sp, #40]	; 0x28
   1f754:	bne	1fc4c <__assert_fail@plt+0xe6f4>
   1f758:	ldr	r3, [sp, #52]	; 0x34
   1f75c:	mov	r6, r7
   1f760:	cmp	r3, #0
   1f764:	beq	1f790 <__assert_fail@plt+0xe238>
   1f768:	mov	r2, r6
   1f76c:	mov	r0, r4
   1f770:	ldr	r3, [sp, #20]
   1f774:	ldr	r1, [sp, #120]	; 0x78
   1f778:	str	r1, [sp]
   1f77c:	mov	r1, r5
   1f780:	bl	1dc5c <__assert_fail@plt+0xc704>
   1f784:	cmp	r0, #0
   1f788:	str	r0, [sp, #40]	; 0x28
   1f78c:	bne	1fc4c <__assert_fail@plt+0xe6f4>
   1f790:	mov	r3, r8
   1f794:	mov	r2, r5
   1f798:	ldr	r1, [sp, #16]
   1f79c:	add	r0, sp, #40	; 0x28
   1f7a0:	bl	1e188 <__assert_fail@plt+0xcc30>
   1f7a4:	subs	fp, r0, #0
   1f7a8:	beq	1fde8 <__assert_fail@plt+0xe890>
   1f7ac:	ldr	r3, [r4, #100]	; 0x64
   1f7b0:	str	fp, [r3, r6, lsl #2]
   1f7b4:	ldr	r3, [sp, #116]	; 0x74
   1f7b8:	cmp	r6, r3
   1f7bc:	bge	1fa5c <__assert_fail@plt+0xe504>
   1f7c0:	ldr	r3, [r4, #120]	; 0x78
   1f7c4:	cmp	r3, #0
   1f7c8:	blt	1fa5c <__assert_fail@plt+0xe504>
   1f7cc:	ldr	r3, [r4, #100]	; 0x64
   1f7d0:	mov	r2, #0
   1f7d4:	add	r9, r6, #1
   1f7d8:	str	r2, [sp, #8]
   1f7dc:	ldr	r1, [r3, r9, lsl #2]
   1f7e0:	lsl	r3, r9, #2
   1f7e4:	sub	r8, r9, #1
   1f7e8:	str	r3, [sp, #12]
   1f7ec:	mov	r3, #0
   1f7f0:	cmp	r1, r3
   1f7f4:	str	r3, [sp, #52]	; 0x34
   1f7f8:	beq	1fc1c <__assert_fail@plt+0xe6c4>
   1f7fc:	add	r5, sp, #48	; 0x30
   1f800:	add	r1, r1, #4
   1f804:	mov	r0, r5
   1f808:	bl	19174 <__assert_fail@plt+0x7c1c>
   1f80c:	cmp	r0, #0
   1f810:	str	r0, [sp, #40]	; 0x28
   1f814:	bne	1fc4c <__assert_fail@plt+0xe6f4>
   1f818:	cmp	fp, #0
   1f81c:	beq	1f9a4 <__assert_fail@plt+0xe44c>
   1f820:	ldr	r3, [fp, #20]
   1f824:	mov	r2, #0
   1f828:	str	r2, [sp, #44]	; 0x2c
   1f82c:	str	r2, [sp, #60]	; 0x3c
   1f830:	str	r2, [sp, #64]	; 0x40
   1f834:	cmp	r3, r2
   1f838:	str	r2, [sp, #68]	; 0x44
   1f83c:	ldr	r7, [r4, #84]	; 0x54
   1f840:	ble	1fe18 <__assert_fail@plt+0xe8c0>
   1f844:	str	r9, [sp, #24]
   1f848:	mov	r9, r2
   1f84c:	ldr	r3, [fp, #24]
   1f850:	ldr	r0, [r7]
   1f854:	ldr	r5, [r3]
   1f858:	lsl	sl, r5, #3
   1f85c:	add	r1, r0, sl
   1f860:	b	1f8d4 <__assert_fail@plt+0xe37c>
   1f864:	mov	r2, r8
   1f868:	mov	r0, r4
   1f86c:	bl	19450 <__assert_fail@plt+0x7ef8>
   1f870:	cmp	r0, #0
   1f874:	beq	1f8b0 <__assert_fail@plt+0xe358>
   1f878:	lsl	sl, r5, #2
   1f87c:	ldr	r3, [sp, #48]	; 0x30
   1f880:	ldr	r2, [r7, #12]
   1f884:	cmp	r3, #0
   1f888:	ldr	r5, [r2, sl]
   1f88c:	beq	1fbcc <__assert_fail@plt+0xe674>
   1f890:	ldr	r1, [sp, #52]	; 0x34
   1f894:	ldr	r6, [sp, #56]	; 0x38
   1f898:	cmp	r1, #0
   1f89c:	bne	1fc74 <__assert_fail@plt+0xe71c>
   1f8a0:	str	r5, [r6]
   1f8a4:	ldr	r3, [sp, #52]	; 0x34
   1f8a8:	add	r3, r3, #1
   1f8ac:	str	r3, [sp, #52]	; 0x34
   1f8b0:	ldr	r3, [fp, #20]
   1f8b4:	add	r9, r9, #1
   1f8b8:	cmp	r9, r3
   1f8bc:	bge	1fc00 <__assert_fail@plt+0xe6a8>
   1f8c0:	ldr	r3, [fp, #24]
   1f8c4:	ldr	r0, [r7]
   1f8c8:	ldr	r5, [r3, r9, lsl #2]
   1f8cc:	lsl	sl, r5, #3
   1f8d0:	add	r1, r0, sl
   1f8d4:	ldrb	r3, [r1, #6]
   1f8d8:	tst	r3, #16
   1f8dc:	beq	1f864 <__assert_fail@plt+0xe30c>
   1f8e0:	mov	r3, r4
   1f8e4:	mov	r2, r5
   1f8e8:	str	r8, [sp]
   1f8ec:	add	r1, r7, #128	; 0x80
   1f8f0:	bl	1bf4c <__assert_fail@plt+0xa9f4>
   1f8f4:	cmp	r0, #1
   1f8f8:	ble	1fbb8 <__assert_fail@plt+0xe660>
   1f8fc:	ldr	r2, [r4, #100]	; 0x64
   1f900:	add	r6, r0, r8
   1f904:	lsl	sl, r5, #2
   1f908:	ldr	r3, [r7, #12]
   1f90c:	ldr	r1, [r2, r6, lsl #2]
   1f910:	ldr	r5, [r3, r5, lsl #2]
   1f914:	mov	r3, #0
   1f918:	str	r3, [sp, #64]	; 0x40
   1f91c:	cmp	r1, r3
   1f920:	beq	1f93c <__assert_fail@plt+0xe3e4>
   1f924:	add	r1, r1, #4
   1f928:	add	r0, sp, #60	; 0x3c
   1f92c:	bl	19174 <__assert_fail@plt+0x7c1c>
   1f930:	cmp	r0, #0
   1f934:	str	r0, [sp, #44]	; 0x2c
   1f938:	bne	1f984 <__assert_fail@plt+0xe42c>
   1f93c:	mov	r1, r5
   1f940:	add	r0, sp, #60	; 0x3c
   1f944:	bl	18d78 <__assert_fail@plt+0x7820>
   1f948:	cmp	r0, #0
   1f94c:	beq	1fc3c <__assert_fail@plt+0xe6e4>
   1f950:	add	r2, sp, #60	; 0x3c
   1f954:	mov	r1, r7
   1f958:	ldr	r5, [r4, #100]	; 0x64
   1f95c:	add	r0, sp, #44	; 0x2c
   1f960:	bl	1d988 <__assert_fail@plt+0xc430>
   1f964:	ldr	r3, [r4, #100]	; 0x64
   1f968:	str	r0, [r5, r6, lsl #2]
   1f96c:	ldr	r3, [r3, r6, lsl #2]
   1f970:	cmp	r3, #0
   1f974:	bne	1f87c <__assert_fail@plt+0xe324>
   1f978:	ldr	r3, [sp, #44]	; 0x2c
   1f97c:	cmp	r3, #0
   1f980:	beq	1f87c <__assert_fail@plt+0xe324>
   1f984:	ldr	r9, [sp, #24]
   1f988:	ldr	r0, [sp, #68]	; 0x44
   1f98c:	bl	13e1c <__assert_fail@plt+0x28c4>
   1f990:	ldr	r3, [sp, #44]	; 0x2c
   1f994:	cmp	r3, #0
   1f998:	str	r3, [sp, #40]	; 0x28
   1f99c:	bne	1fc4c <__assert_fail@plt+0xe6f4>
   1f9a0:	add	r5, sp, #48	; 0x30
   1f9a4:	ldr	r3, [sp, #52]	; 0x34
   1f9a8:	mov	r6, r9
   1f9ac:	cmp	r3, #0
   1f9b0:	beq	1f9fc <__assert_fail@plt+0xe4a4>
   1f9b4:	mov	r1, r5
   1f9b8:	ldr	r0, [sp, #16]
   1f9bc:	ldr	r2, [sp, #20]
   1f9c0:	ldr	r3, [sp, #120]	; 0x78
   1f9c4:	bl	1cf78 <__assert_fail@plt+0xba20>
   1f9c8:	cmp	r0, #0
   1f9cc:	str	r0, [sp, #40]	; 0x28
   1f9d0:	bne	1fc4c <__assert_fail@plt+0xe6f4>
   1f9d4:	mov	r2, r9
   1f9d8:	mov	r0, r4
   1f9dc:	ldr	r3, [sp, #20]
   1f9e0:	ldr	r1, [sp, #120]	; 0x78
   1f9e4:	str	r1, [sp]
   1f9e8:	mov	r1, r5
   1f9ec:	bl	1dc5c <__assert_fail@plt+0xc704>
   1f9f0:	cmp	r0, #0
   1f9f4:	str	r0, [sp, #40]	; 0x28
   1f9f8:	bne	1fc4c <__assert_fail@plt+0xe6f4>
   1f9fc:	mov	r1, r8
   1fa00:	mov	r0, r4
   1fa04:	ldr	r2, [r4, #88]	; 0x58
   1fa08:	bl	19338 <__assert_fail@plt+0x7de0>
   1fa0c:	mov	r3, r0
   1fa10:	mov	r2, r5
   1fa14:	ldr	r1, [sp, #16]
   1fa18:	add	r0, sp, #40	; 0x28
   1fa1c:	bl	1e188 <__assert_fail@plt+0xcc30>
   1fa20:	subs	fp, r0, #0
   1fa24:	beq	1fcf4 <__assert_fail@plt+0xe79c>
   1fa28:	mov	r2, #0
   1fa2c:	ldr	r3, [r4, #100]	; 0x64
   1fa30:	str	r2, [sp, #8]
   1fa34:	ldr	r2, [sp, #12]
   1fa38:	str	fp, [r3, r2]
   1fa3c:	ldr	r2, [sp, #116]	; 0x74
   1fa40:	cmp	r2, r9
   1fa44:	ble	1fa5c <__assert_fail@plt+0xe504>
   1fa48:	ldr	r1, [sp, #8]
   1fa4c:	add	r9, r9, #1
   1fa50:	ldr	r2, [r4, #120]	; 0x78
   1fa54:	cmp	r2, r1
   1fa58:	bge	1f7dc <__assert_fail@plt+0xe284>
   1fa5c:	ldr	r0, [sp, #56]	; 0x38
   1fa60:	bl	13e1c <__assert_fail@plt+0x28c4>
   1fa64:	ldr	r3, [r4, #100]	; 0x64
   1fa68:	ldr	r2, [sp, #116]	; 0x74
   1fa6c:	ldr	r3, [r3, r2, lsl #2]
   1fa70:	cmp	r3, #0
   1fa74:	beq	1fdf8 <__assert_fail@plt+0xe8a0>
   1fa78:	ldr	r2, [sp, #28]
   1fa7c:	ldr	r1, [sp, #32]
   1fa80:	str	r6, [r2]
   1fa84:	ldr	r2, [sp, #36]	; 0x24
   1fa88:	str	r2, [r4, #40]	; 0x28
   1fa8c:	ldr	r2, [r3, #8]
   1fa90:	str	r1, [r4, #100]	; 0x64
   1fa94:	cmp	r2, #0
   1fa98:	ble	1fe20 <__assert_fail@plt+0xe8c8>
   1fa9c:	subs	r2, r2, #1
   1faa0:	ldr	ip, [r3, #12]
   1faa4:	moveq	r1, r2
   1faa8:	beq	1fb08 <__assert_fail@plt+0xe5b0>
   1faac:	ldr	lr, [sp, #112]	; 0x70
   1fab0:	mov	r1, #0
   1fab4:	add	r3, r1, r2
   1fab8:	lsr	r3, r3, #1
   1fabc:	ldr	r0, [ip, r3, lsl #2]
   1fac0:	cmp	r0, lr
   1fac4:	blt	1fdd0 <__assert_fail@plt+0xe878>
   1fac8:	cmp	r3, r1
   1facc:	bls	1fb08 <__assert_fail@plt+0xe5b0>
   1fad0:	add	r2, r3, r1
   1fad4:	lsr	r2, r2, #1
   1fad8:	ldr	r0, [ip, r2, lsl #2]
   1fadc:	cmp	lr, r0
   1fae0:	ble	1faf8 <__assert_fail@plt+0xe5a0>
   1fae4:	b	1fdc4 <__assert_fail@plt+0xe86c>
   1fae8:	ldr	r0, [ip, r3, lsl #2]
   1faec:	cmp	lr, r0
   1faf0:	bgt	1fdd0 <__assert_fail@plt+0xe878>
   1faf4:	mov	r2, r3
   1faf8:	add	r3, r2, r1
   1fafc:	cmp	r2, r1
   1fb00:	lsr	r3, r3, #1
   1fb04:	bhi	1fae8 <__assert_fail@plt+0xe590>
   1fb08:	ldr	r0, [ip, r1, lsl #2]
   1fb0c:	ldr	r3, [sp, #112]	; 0x70
   1fb10:	subs	r0, r0, r3
   1fb14:	movne	r0, #1
   1fb18:	b	1fc58 <__assert_fail@plt+0xe700>
   1fb1c:	sub	r1, r6, #1
   1fb20:	mov	r0, r4
   1fb24:	str	r6, [r4, #40]	; 0x28
   1fb28:	str	r5, [r4, #100]	; 0x64
   1fb2c:	bl	19338 <__assert_fail@plt+0x7de0>
   1fb30:	cmp	r6, r7
   1fb34:	mov	r8, r0
   1fb38:	beq	1f708 <__assert_fail@plt+0xe1b0>
   1fb3c:	ldr	fp, [r5, r6, lsl #2]
   1fb40:	cmp	fp, #0
   1fb44:	beq	1fd60 <__assert_fail@plt+0xe808>
   1fb48:	ldrb	r3, [fp, #52]	; 0x34
   1fb4c:	ands	r3, r3, #64	; 0x40
   1fb50:	streq	r3, [sp, #48]	; 0x30
   1fb54:	streq	r3, [sp, #52]	; 0x34
   1fb58:	streq	r3, [sp, #56]	; 0x38
   1fb5c:	beq	1f7b4 <__assert_fail@plt+0xe25c>
   1fb60:	ldr	r3, [fp, #8]
   1fb64:	cmp	r3, #0
   1fb68:	str	r3, [sp, #52]	; 0x34
   1fb6c:	ble	1fd1c <__assert_fail@plt+0xe7c4>
   1fb70:	lsl	r0, r3, #2
   1fb74:	str	r3, [sp, #48]	; 0x30
   1fb78:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1fb7c:	cmp	r0, #0
   1fb80:	str	r0, [sp, #56]	; 0x38
   1fb84:	beq	1fde0 <__assert_fail@plt+0xe888>
   1fb88:	ldr	r2, [fp, #8]
   1fb8c:	ldr	r1, [fp, #12]
   1fb90:	lsl	r2, r2, #2
   1fb94:	bl	11264 <memcpy@plt>
   1fb98:	ldrb	r3, [fp, #52]	; 0x34
   1fb9c:	mov	r2, #0
   1fba0:	str	r2, [sp, #40]	; 0x28
   1fba4:	tst	r3, #64	; 0x40
   1fba8:	beq	1f7b4 <__assert_fail@plt+0xe25c>
   1fbac:	add	r5, sp, #48	; 0x30
   1fbb0:	ldr	r3, [sp, #52]	; 0x34
   1fbb4:	b	1f760 <__assert_fail@plt+0xe208>
   1fbb8:	cmp	r0, #0
   1fbbc:	bne	1f878 <__assert_fail@plt+0xe320>
   1fbc0:	ldr	r0, [r7]
   1fbc4:	add	r1, r0, sl
   1fbc8:	b	1f864 <__assert_fail@plt+0xe30c>
   1fbcc:	mov	r2, #1
   1fbd0:	mov	r3, #1
   1fbd4:	mov	r0, #4
   1fbd8:	strd	r2, [sp, #48]	; 0x30
   1fbdc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   1fbe0:	cmp	r0, #0
   1fbe4:	str	r0, [sp, #56]	; 0x38
   1fbe8:	beq	1fc30 <__assert_fail@plt+0xe6d8>
   1fbec:	str	r5, [r0]
   1fbf0:	add	r9, r9, #1
   1fbf4:	ldr	r3, [fp, #20]
   1fbf8:	cmp	r9, r3
   1fbfc:	blt	1f8c0 <__assert_fail@plt+0xe368>
   1fc00:	ldr	r9, [sp, #24]
   1fc04:	ldr	r0, [sp, #68]	; 0x44
   1fc08:	bl	13e1c <__assert_fail@plt+0x28c4>
   1fc0c:	mov	r3, #0
   1fc10:	add	r5, sp, #48	; 0x30
   1fc14:	str	r3, [sp, #40]	; 0x28
   1fc18:	b	1f9a4 <__assert_fail@plt+0xe44c>
   1fc1c:	cmp	fp, #0
   1fc20:	bne	1f820 <__assert_fail@plt+0xe2c8>
   1fc24:	mov	r6, r9
   1fc28:	add	r5, sp, #48	; 0x30
   1fc2c:	b	1f9fc <__assert_fail@plt+0xe4a4>
   1fc30:	mov	r2, #0
   1fc34:	mov	r3, #0
   1fc38:	strd	r2, [sp, #48]	; 0x30
   1fc3c:	ldr	r0, [sp, #68]	; 0x44
   1fc40:	bl	13e1c <__assert_fail@plt+0x28c4>
   1fc44:	mov	r3, #12
   1fc48:	str	r3, [sp, #40]	; 0x28
   1fc4c:	ldr	r0, [sp, #56]	; 0x38
   1fc50:	bl	13e1c <__assert_fail@plt+0x28c4>
   1fc54:	ldr	r0, [sp, #40]	; 0x28
   1fc58:	add	sp, sp, #76	; 0x4c
   1fc5c:	ldrd	r4, [sp]
   1fc60:	ldrd	r6, [sp, #8]
   1fc64:	ldrd	r8, [sp, #16]
   1fc68:	ldrd	sl, [sp, #24]
   1fc6c:	add	sp, sp, #32
   1fc70:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc74:	cmp	r3, r1
   1fc78:	beq	1fd38 <__assert_fail@plt+0xe7e0>
   1fc7c:	ldr	r3, [r6]
   1fc80:	mov	r2, r1
   1fc84:	cmp	r5, r3
   1fc88:	bge	1fcbc <__assert_fail@plt+0xe764>
   1fc8c:	cmp	r1, #0
   1fc90:	ble	1fca8 <__assert_fail@plt+0xe750>
   1fc94:	lsl	r2, r1, #2
   1fc98:	add	r0, r6, #4
   1fc9c:	mov	r1, r6
   1fca0:	bl	11234 <memmove@plt>
   1fca4:	mov	r2, #0
   1fca8:	str	r5, [r6, r2, lsl #2]
   1fcac:	ldr	r3, [sp, #52]	; 0x34
   1fcb0:	add	r3, r3, #1
   1fcb4:	str	r3, [sp, #52]	; 0x34
   1fcb8:	b	1f8b0 <__assert_fail@plt+0xe358>
   1fcbc:	sub	r3, r1, #-1073741823	; 0xc0000001
   1fcc0:	ldr	r0, [r6, r3, lsl #2]
   1fcc4:	lsl	r3, r3, #2
   1fcc8:	cmp	r0, r5
   1fccc:	ble	1fca8 <__assert_fail@plt+0xe750>
   1fcd0:	add	r3, r3, #4
   1fcd4:	add	r3, r6, r3
   1fcd8:	str	r0, [r3], #-4
   1fcdc:	sub	r1, r1, #1
   1fce0:	ldr	r0, [r3, #-4]
   1fce4:	mov	r2, r1
   1fce8:	cmp	r5, r0
   1fcec:	blt	1fcd8 <__assert_fail@plt+0xe780>
   1fcf0:	b	1fca8 <__assert_fail@plt+0xe750>
   1fcf4:	ldr	r3, [sp, #40]	; 0x28
   1fcf8:	cmp	r3, #0
   1fcfc:	bne	1fc4c <__assert_fail@plt+0xe6f4>
   1fd00:	ldr	r2, [sp, #8]
   1fd04:	ldr	r3, [r4, #100]	; 0x64
   1fd08:	add	r2, r2, #1
   1fd0c:	str	r2, [sp, #8]
   1fd10:	ldr	r2, [sp, #12]
   1fd14:	str	fp, [r3, r2]
   1fd18:	b	1fa3c <__assert_fail@plt+0xe4e4>
   1fd1c:	mov	r3, #0
   1fd20:	add	r5, sp, #48	; 0x30
   1fd24:	str	r3, [sp, #40]	; 0x28
   1fd28:	str	r3, [sp, #48]	; 0x30
   1fd2c:	str	r3, [r5, #4]
   1fd30:	str	r3, [r5, #8]
   1fd34:	b	1f790 <__assert_fail@plt+0xe238>
   1fd38:	lsl	r3, r1, #1
   1fd3c:	mov	r0, r6
   1fd40:	lsl	r1, r1, #3
   1fd44:	str	r3, [sp, #48]	; 0x30
   1fd48:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1fd4c:	subs	r6, r0, #0
   1fd50:	beq	1fc3c <__assert_fail@plt+0xe6e4>
   1fd54:	str	r6, [sp, #56]	; 0x38
   1fd58:	ldr	r1, [sp, #52]	; 0x34
   1fd5c:	b	1fc7c <__assert_fail@plt+0xe724>
   1fd60:	str	fp, [sp, #48]	; 0x30
   1fd64:	str	fp, [sp, #52]	; 0x34
   1fd68:	str	fp, [sp, #56]	; 0x38
   1fd6c:	b	1f7b4 <__assert_fail@plt+0xe25c>
   1fd70:	mvn	r3, #-2147483648	; 0x80000000
   1fd74:	add	sl, r2, #1
   1fd78:	sub	r3, r3, r5
   1fd7c:	cmp	r3, sl
   1fd80:	blt	1fde0 <__assert_fail@plt+0xe888>
   1fd84:	add	r8, r5, sl
   1fd88:	cmn	r8, #-1073741823	; 0xc0000001
   1fd8c:	bhi	1fde0 <__assert_fail@plt+0xe888>
   1fd90:	ldr	fp, [sp, #28]
   1fd94:	lsl	r1, r8, #2
   1fd98:	ldr	r0, [fp, #8]
   1fd9c:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1fda0:	subs	r3, r0, #0
   1fda4:	beq	1fde0 <__assert_fail@plt+0xe888>
   1fda8:	lsl	r2, sl, #2
   1fdac:	mov	r1, r6
   1fdb0:	str	r8, [fp, #4]
   1fdb4:	add	r0, r3, r5, lsl #2
   1fdb8:	str	r3, [fp, #8]
   1fdbc:	bl	1145c <memset@plt>
   1fdc0:	b	1f6c8 <__assert_fail@plt+0xe170>
   1fdc4:	mov	r1, r2
   1fdc8:	mov	r2, r3
   1fdcc:	mov	r3, r1
   1fdd0:	add	r1, r3, #1
   1fdd4:	cmp	r1, r2
   1fdd8:	bcc	1fab4 <__assert_fail@plt+0xe55c>
   1fddc:	b	1fb08 <__assert_fail@plt+0xe5b0>
   1fde0:	mov	r0, #12
   1fde4:	b	1fc58 <__assert_fail@plt+0xe700>
   1fde8:	ldr	r3, [sp, #40]	; 0x28
   1fdec:	cmp	r3, #0
   1fdf0:	beq	1f7ac <__assert_fail@plt+0xe254>
   1fdf4:	b	1fc4c <__assert_fail@plt+0xe6f4>
   1fdf8:	ldr	r3, [sp, #28]
   1fdfc:	mov	r0, #1
   1fe00:	str	r6, [r3]
   1fe04:	ldr	r3, [sp, #36]	; 0x24
   1fe08:	str	r3, [r4, #40]	; 0x28
   1fe0c:	ldr	r3, [sp, #32]
   1fe10:	str	r3, [r4, #100]	; 0x64
   1fe14:	b	1fc58 <__assert_fail@plt+0xe700>
   1fe18:	mov	r0, #0
   1fe1c:	b	1fc08 <__assert_fail@plt+0xe6b0>
   1fe20:	mov	r0, #1
   1fe24:	b	1fc58 <__assert_fail@plt+0xe700>
   1fe28:	mov	ip, r2
   1fe2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fe30:	mov	r4, r0
   1fe34:	strd	r6, [sp, #8]
   1fe38:	mov	r6, r2
   1fe3c:	mov	r7, r3
   1fe40:	strd	r8, [sp, #16]
   1fe44:	mov	r3, #8
   1fe48:	mov	r8, r1
   1fe4c:	strd	sl, [sp, #24]
   1fe50:	str	lr, [sp, #32]
   1fe54:	sub	sp, sp, #20
   1fe58:	ldr	r2, [ip], #8
   1fe5c:	str	r7, [sp]
   1fe60:	ldr	r5, [sp, #56]	; 0x38
   1fe64:	mov	r1, ip
   1fe68:	str	r5, [sp, #4]
   1fe6c:	str	r3, [sp, #8]
   1fe70:	ldr	r3, [r6, #4]
   1fe74:	bl	1f66c <__assert_fail@plt+0xe114>
   1fe78:	subs	fp, r0, #0
   1fe7c:	beq	1fea0 <__assert_fail@plt+0xe948>
   1fe80:	mov	r0, fp
   1fe84:	add	sp, sp, #20
   1fe88:	ldrd	r4, [sp]
   1fe8c:	ldrd	r6, [sp, #8]
   1fe90:	ldrd	r8, [sp, #16]
   1fe94:	ldrd	sl, [sp, #24]
   1fe98:	add	sp, sp, #32
   1fe9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fea0:	ldr	r3, [r4, #108]	; 0x6c
   1fea4:	ldr	r1, [r4, #112]	; 0x70
   1fea8:	ldr	r9, [r6, #4]
   1feac:	ldr	sl, [r8]
   1feb0:	cmp	r3, r1
   1feb4:	ldr	r0, [r4, #116]	; 0x74
   1feb8:	movlt	lr, r9
   1febc:	bge	1ff58 <__assert_fail@plt+0xea00>
   1fec0:	add	r2, r3, r3, lsl #1
   1fec4:	cmp	r3, #0
   1fec8:	lsl	r2, r2, #3
   1fecc:	ble	1fee8 <__assert_fail@plt+0xe990>
   1fed0:	sub	r1, r2, #24
   1fed4:	add	r1, r0, r1
   1fed8:	ldr	ip, [r1, #4]
   1fedc:	cmp	r5, ip
   1fee0:	moveq	ip, #1
   1fee4:	strbeq	ip, [r1, #20]
   1fee8:	cmp	sl, r9
   1feec:	add	ip, r0, r2
   1fef0:	str	r7, [r0, r2]
   1fef4:	add	r3, r3, #1
   1fef8:	movne	r0, #0
   1fefc:	mvneq	r0, #0
   1ff00:	mov	r1, #0
   1ff04:	stmib	ip, {r5, sl}
   1ff08:	str	r9, [ip, #12]
   1ff0c:	sub	r2, r9, sl
   1ff10:	add	r5, r5, lr
   1ff14:	str	r0, [ip, #16]
   1ff18:	mov	r0, r4
   1ff1c:	str	r3, [r4, #108]	; 0x6c
   1ff20:	strb	r1, [ip, #20]
   1ff24:	ldr	r3, [r4, #120]	; 0x78
   1ff28:	cmp	r3, r2
   1ff2c:	strlt	r2, [r4, #120]	; 0x78
   1ff30:	ldr	r1, [r8]
   1ff34:	sub	r1, r5, r1
   1ff38:	add	sp, sp, #20
   1ff3c:	ldrd	r4, [sp]
   1ff40:	ldrd	r6, [sp, #8]
   1ff44:	ldrd	r8, [sp, #16]
   1ff48:	ldrd	sl, [sp, #24]
   1ff4c:	ldr	lr, [sp, #32]
   1ff50:	add	sp, sp, #36	; 0x24
   1ff54:	b	1cc28 <__assert_fail@plt+0xb6d0>
   1ff58:	add	r1, r1, r1, lsl #1
   1ff5c:	lsl	r1, r1, #4
   1ff60:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   1ff64:	cmp	r0, #0
   1ff68:	beq	1ffac <__assert_fail@plt+0xea54>
   1ff6c:	ldr	r3, [r4, #108]	; 0x6c
   1ff70:	mov	r1, fp
   1ff74:	str	r0, [r4, #116]	; 0x74
   1ff78:	ldr	r2, [r4, #112]	; 0x70
   1ff7c:	add	r3, r3, r3, lsl #1
   1ff80:	add	r2, r2, r2, lsl #1
   1ff84:	add	r0, r0, r3, lsl #3
   1ff88:	lsl	r2, r2, #3
   1ff8c:	bl	1145c <memset@plt>
   1ff90:	ldr	lr, [r6, #4]
   1ff94:	ldr	r2, [r4, #112]	; 0x70
   1ff98:	ldr	r3, [r4, #108]	; 0x6c
   1ff9c:	ldr	r0, [r4, #116]	; 0x74
   1ffa0:	lsl	r2, r2, #1
   1ffa4:	str	r2, [r4, #112]	; 0x70
   1ffa8:	b	1fec0 <__assert_fail@plt+0xe968>
   1ffac:	ldr	r0, [r4, #116]	; 0x74
   1ffb0:	mov	fp, #12
   1ffb4:	bl	13e1c <__assert_fail@plt+0x28c4>
   1ffb8:	b	1fe80 <__assert_fail@plt+0xe928>
   1ffbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ffc0:	ldr	r4, [r2, #4]
   1ffc4:	ldrb	ip, [r1, #28]
   1ffc8:	ldr	r5, [r1]
   1ffcc:	adds	r3, r4, #0
   1ffd0:	strd	r6, [sp, #8]
   1ffd4:	movne	r3, #1
   1ffd8:	strd	r8, [sp, #16]
   1ffdc:	ands	r3, r3, ip, lsr #4
   1ffe0:	strd	sl, [sp, #24]
   1ffe4:	str	lr, [sp, #32]
   1ffe8:	sub	sp, sp, #20
   1ffec:	bne	20264 <__assert_fail@plt+0xed0c>
   1fff0:	mov	sl, r2
   1fff4:	ldr	r2, [r5, #64]	; 0x40
   1fff8:	mov	r6, #0
   1fffc:	mov	r7, #0
   20000:	mov	r1, r0
   20004:	strd	r6, [sp, #8]
   20008:	cmp	r2, #31
   2000c:	beq	20294 <__assert_fail@plt+0xed3c>
   20010:	ldr	r0, [r5, #56]	; 0x38
   20014:	lsl	r3, r2, #5
   20018:	add	r2, r2, #1
   2001c:	add	r8, r3, #4
   20020:	mov	lr, #8
   20024:	add	ip, r0, r3
   20028:	str	r2, [r5, #64]	; 0x40
   2002c:	add	r3, r3, #16
   20030:	add	r8, r0, r8
   20034:	strb	lr, [sp, #12]
   20038:	add	r0, r0, r3
   2003c:	mov	lr, #0
   20040:	ldrd	r2, [sp, #8]
   20044:	mvn	r6, #0
   20048:	str	lr, [ip, #4]
   2004c:	str	lr, [ip, #8]
   20050:	str	lr, [ip, #12]
   20054:	strd	r2, [ip, #24]
   20058:	ldrb	r3, [r0, #14]
   2005c:	bic	r3, r3, #12
   20060:	strb	r3, [r0, #14]
   20064:	str	lr, [ip, #16]
   20068:	str	lr, [ip, #20]
   2006c:	str	r6, [ip, #32]
   20070:	ldr	r0, [r5, #64]	; 0x40
   20074:	mov	r2, #0
   20078:	mov	r3, #0
   2007c:	strd	r2, [sp, #8]
   20080:	cmp	r0, #31
   20084:	beq	202c8 <__assert_fail@plt+0xed70>
   20088:	lsl	r3, r0, #5
   2008c:	add	r2, r0, #1
   20090:	ldr	r0, [r5, #56]	; 0x38
   20094:	add	r9, r3, #4
   20098:	mov	lr, #9
   2009c:	add	ip, r0, r3
   200a0:	str	r2, [r5, #64]	; 0x40
   200a4:	add	r3, r3, #16
   200a8:	add	r9, r0, r9
   200ac:	strb	lr, [sp, #12]
   200b0:	add	r0, r0, r3
   200b4:	mov	lr, #0
   200b8:	ldrd	r2, [sp, #8]
   200bc:	mvn	r6, #0
   200c0:	str	lr, [ip, #4]
   200c4:	str	lr, [ip, #8]
   200c8:	str	lr, [ip, #12]
   200cc:	strd	r2, [ip, #24]
   200d0:	ldrb	r3, [r0, #14]
   200d4:	bic	r3, r3, #12
   200d8:	strb	r3, [r0, #14]
   200dc:	str	lr, [ip, #16]
   200e0:	str	lr, [ip, #20]
   200e4:	str	r6, [ip, #32]
   200e8:	cmp	r4, #0
   200ec:	ldr	r0, [r5, #64]	; 0x40
   200f0:	moveq	fp, r9
   200f4:	beq	2017c <__assert_fail@plt+0xec24>
   200f8:	mov	r2, #0
   200fc:	mov	r3, #0
   20100:	cmp	r0, #31
   20104:	strd	r2, [sp, #8]
   20108:	beq	20330 <__assert_fail@plt+0xedd8>
   2010c:	ldr	r2, [r5, #56]	; 0x38
   20110:	lsl	r3, r0, #5
   20114:	add	r0, r0, #1
   20118:	add	fp, r3, #4
   2011c:	mov	lr, #16
   20120:	str	r0, [r5, #64]	; 0x40
   20124:	add	ip, r2, r3
   20128:	add	r0, r3, lr
   2012c:	add	fp, r2, fp
   20130:	strb	lr, [sp, #12]
   20134:	add	r0, r2, r0
   20138:	mov	lr, #0
   2013c:	ldrd	r2, [sp, #8]
   20140:	mvn	r6, #0
   20144:	cmp	r9, lr
   20148:	str	lr, [ip, #4]
   2014c:	str	r4, [ip, #8]
   20150:	str	r9, [ip, #12]
   20154:	strd	r2, [ip, #24]
   20158:	ldrb	r3, [r0, #14]
   2015c:	bic	r3, r3, #12
   20160:	strb	r3, [r0, #14]
   20164:	str	lr, [ip, #16]
   20168:	str	lr, [ip, #20]
   2016c:	str	r6, [ip, #32]
   20170:	str	fp, [r4]
   20174:	strne	fp, [r9]
   20178:	ldr	r0, [r5, #64]	; 0x40
   2017c:	mov	r2, #0
   20180:	mov	r3, #0
   20184:	cmp	r0, #31
   20188:	strd	r2, [sp, #8]
   2018c:	beq	202fc <__assert_fail@plt+0xeda4>
   20190:	ldr	r4, [r5, #56]	; 0x38
   20194:	lsl	r3, r0, #5
   20198:	add	r0, r0, #1
   2019c:	add	r2, r3, #4
   201a0:	mov	ip, #16
   201a4:	str	r0, [r5, #64]	; 0x40
   201a8:	add	r0, r4, r3
   201ac:	add	r3, r3, ip
   201b0:	cmp	r8, #0
   201b4:	strb	ip, [sp, #12]
   201b8:	mov	ip, #0
   201bc:	add	r3, r4, r3
   201c0:	ldrd	r6, [sp, #8]
   201c4:	add	r4, r4, r2
   201c8:	mvn	lr, #0
   201cc:	str	ip, [r0, #4]
   201d0:	str	r8, [r0, #8]
   201d4:	str	fp, [r0, #12]
   201d8:	strd	r6, [r0, #24]
   201dc:	ldrb	r2, [r3, #14]
   201e0:	bic	r2, r2, #12
   201e4:	strb	r2, [r3, #14]
   201e8:	str	ip, [r0, #16]
   201ec:	str	ip, [r0, #20]
   201f0:	str	lr, [r0, #32]
   201f4:	strne	r4, [r8]
   201f8:	cmp	fp, #0
   201fc:	beq	20284 <__assert_fail@plt+0xed2c>
   20200:	cmp	r4, #0
   20204:	str	r4, [fp]
   20208:	beq	20284 <__assert_fail@plt+0xed2c>
   2020c:	cmp	r9, #0
   20210:	cmpne	r8, #0
   20214:	beq	20284 <__assert_fail@plt+0xed2c>
   20218:	ldr	r2, [sl, #20]
   2021c:	ldrb	r3, [sl, #26]
   20220:	str	r2, [r9, #20]
   20224:	str	r2, [r8, #20]
   20228:	ldrb	r2, [r9, #26]
   2022c:	ubfx	r3, r3, #3, #1
   20230:	bfi	r2, r3, #3, #1
   20234:	strb	r2, [r9, #26]
   20238:	ldrb	r2, [r8, #26]
   2023c:	bfi	r2, r3, #3, #1
   20240:	strb	r2, [r8, #26]
   20244:	mov	r0, r4
   20248:	add	sp, sp, #20
   2024c:	ldrd	r4, [sp]
   20250:	ldrd	r6, [sp, #8]
   20254:	ldrd	r8, [sp, #16]
   20258:	ldrd	sl, [sp, #24]
   2025c:	add	sp, sp, #32
   20260:	pop	{pc}		; (ldr pc, [sp], #4)
   20264:	ldr	r3, [r2, #20]
   20268:	cmp	r3, #31
   2026c:	bgt	20244 <__assert_fail@plt+0xecec>
   20270:	ldr	r1, [r5, #80]	; 0x50
   20274:	lsr	r3, r1, r3
   20278:	tst	r3, #1
   2027c:	bne	1fff0 <__assert_fail@plt+0xea98>
   20280:	b	20244 <__assert_fail@plt+0xecec>
   20284:	mov	r3, #12
   20288:	mov	r4, #0
   2028c:	str	r3, [r1]
   20290:	b	20244 <__assert_fail@plt+0xecec>
   20294:	mov	r0, #996	; 0x3e4
   20298:	str	r1, [sp, #4]
   2029c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   202a0:	cmp	r0, #0
   202a4:	ldr	r1, [sp, #4]
   202a8:	beq	2036c <__assert_fail@plt+0xee14>
   202ac:	ldr	ip, [r5, #56]	; 0x38
   202b0:	mov	r2, #1
   202b4:	mov	r8, #4
   202b8:	mov	r3, #0
   202bc:	str	ip, [r0]
   202c0:	str	r0, [r5, #56]	; 0x38
   202c4:	b	20020 <__assert_fail@plt+0xeac8>
   202c8:	mov	r0, #996	; 0x3e4
   202cc:	str	r1, [sp, #4]
   202d0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   202d4:	cmp	r0, #0
   202d8:	ldr	r1, [sp, #4]
   202dc:	beq	20364 <__assert_fail@plt+0xee0c>
   202e0:	ldr	ip, [r5, #56]	; 0x38
   202e4:	mov	r2, #1
   202e8:	mov	r9, #4
   202ec:	mov	r3, #0
   202f0:	str	ip, [r0]
   202f4:	str	r0, [r5, #56]	; 0x38
   202f8:	b	20098 <__assert_fail@plt+0xeb40>
   202fc:	mov	r0, #996	; 0x3e4
   20300:	str	r1, [sp, #4]
   20304:	bl	2cd58 <__assert_fail@plt+0x1b800>
   20308:	subs	r4, r0, #0
   2030c:	ldr	r1, [sp, #4]
   20310:	beq	20284 <__assert_fail@plt+0xed2c>
   20314:	ldr	ip, [r5, #56]	; 0x38
   20318:	mov	r0, #1
   2031c:	mov	r2, #4
   20320:	mov	r3, #0
   20324:	str	ip, [r4]
   20328:	str	r4, [r5, #56]	; 0x38
   2032c:	b	201a0 <__assert_fail@plt+0xec48>
   20330:	mov	r0, #996	; 0x3e4
   20334:	str	r1, [sp, #4]
   20338:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2033c:	subs	r2, r0, #0
   20340:	ldr	r1, [sp, #4]
   20344:	beq	20374 <__assert_fail@plt+0xee1c>
   20348:	ldr	ip, [r5, #56]	; 0x38
   2034c:	mov	fp, #4
   20350:	mov	r0, #1
   20354:	mov	r3, #0
   20358:	str	ip, [r2]
   2035c:	str	r2, [r5, #56]	; 0x38
   20360:	b	2011c <__assert_fail@plt+0xebc4>
   20364:	mov	r9, r0
   20368:	b	200e8 <__assert_fail@plt+0xeb90>
   2036c:	mov	r8, r0
   20370:	b	20070 <__assert_fail@plt+0xeb18>
   20374:	mov	fp, r2
   20378:	b	20178 <__assert_fail@plt+0xec20>
   2037c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20380:	mov	r5, r0
   20384:	mov	r0, #32
   20388:	strd	r6, [sp, #8]
   2038c:	mov	r7, r3
   20390:	strd	r8, [sp, #16]
   20394:	mov	r9, #0
   20398:	strd	sl, [sp, #24]
   2039c:	mov	fp, r1
   203a0:	mov	r1, #1
   203a4:	str	lr, [sp, #32]
   203a8:	sub	sp, sp, #44	; 0x2c
   203ac:	mov	sl, r2
   203b0:	ldrb	r8, [sp, #80]	; 0x50
   203b4:	str	r9, [sp, #20]
   203b8:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   203bc:	subs	r4, r0, #0
   203c0:	beq	2077c <__assert_fail@plt+0xf224>
   203c4:	mov	r1, #1
   203c8:	mov	r0, #40	; 0x28
   203cc:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   203d0:	subs	r6, r0, #0
   203d4:	beq	207bc <__assert_fail@plt+0xf264>
   203d8:	ldrb	ip, [r6, #16]
   203dc:	add	lr, sp, #20
   203e0:	mov	r0, fp
   203e4:	add	r3, r6, #36	; 0x24
   203e8:	add	r2, r6, #12
   203ec:	mov	r1, r4
   203f0:	bfi	ip, r8, #0, #1
   203f4:	strb	ip, [r6, #16]
   203f8:	str	lr, [sp]
   203fc:	str	sl, [sp, #4]
   20400:	str	r9, [sp, #8]
   20404:	bl	1a2dc <__assert_fail@plt+0x8d84>
   20408:	subs	sl, r0, #0
   2040c:	bne	2085c <__assert_fail@plt+0xf304>
   20410:	ldrb	r3, [r7]
   20414:	cmp	r3, #0
   20418:	beq	20440 <__assert_fail@plt+0xeee8>
   2041c:	mov	ip, #1
   20420:	asr	r1, r3, #5
   20424:	and	r0, r3, #31
   20428:	ldrb	r3, [r7, #1]!
   2042c:	ldr	r2, [r4, r1, lsl #2]
   20430:	cmp	r3, #0
   20434:	orr	r2, r2, ip, lsl r0
   20438:	str	r2, [r4, r1, lsl #2]
   2043c:	bne	20420 <__assert_fail@plt+0xeec8>
   20440:	cmp	r8, #0
   20444:	beq	204d8 <__assert_fail@plt+0xef80>
   20448:	ubfx	r1, r4, #2, #1
   2044c:	cmp	r1, #0
   20450:	moveq	r3, r1
   20454:	beq	20468 <__assert_fail@plt+0xef10>
   20458:	ldr	r2, [r4]
   2045c:	mov	r3, #1
   20460:	mvn	r2, r2
   20464:	str	r2, [r4]
   20468:	ldr	ip, [r4, r1, lsl #2]
   2046c:	rsb	lr, r1, #8
   20470:	add	r2, r4, r1, lsl #2
   20474:	lsr	lr, lr, #1
   20478:	ldr	r0, [r2, #4]
   2047c:	cmp	lr, #4
   20480:	mvn	ip, ip
   20484:	str	ip, [r4, r1, lsl #2]
   20488:	mvn	r1, r0
   2048c:	ldr	lr, [r2, #8]
   20490:	ldr	ip, [r2, #12]
   20494:	ldr	r0, [r2, #16]
   20498:	mvn	lr, lr
   2049c:	stmib	r2, {r1, lr}
   204a0:	mvn	ip, ip
   204a4:	ldr	r1, [r2, #20]
   204a8:	mvn	r0, r0
   204ac:	str	ip, [r2, #12]
   204b0:	str	r0, [r2, #16]
   204b4:	mvn	r1, r1
   204b8:	str	r1, [r2, #20]
   204bc:	bne	20728 <__assert_fail@plt+0xf1d0>
   204c0:	ldr	r1, [r2, #24]
   204c4:	ldr	r3, [r2, #28]
   204c8:	mvn	r1, r1
   204cc:	mvn	r3, r3
   204d0:	str	r1, [r2, #24]
   204d4:	str	r3, [r2, #28]
   204d8:	ldr	r3, [r5, #92]	; 0x5c
   204dc:	cmp	r3, #1
   204e0:	ble	20588 <__assert_fail@plt+0xf030>
   204e4:	ldr	r3, [r5, #60]	; 0x3c
   204e8:	add	r2, r4, #8
   204ec:	add	r0, r3, #8
   204f0:	orr	r1, r3, r4
   204f4:	cmp	r4, r0
   204f8:	cmpcc	r3, r2
   204fc:	movcs	r2, #1
   20500:	movcc	r2, #0
   20504:	tst	r1, #7
   20508:	movne	r2, #0
   2050c:	cmp	r2, #0
   20510:	beq	207d8 <__assert_fail@plt+0xf280>
   20514:	ldr	ip, [r3]
   20518:	ldr	r1, [r4]
   2051c:	ldr	r2, [r3, #4]
   20520:	ldr	r0, [r4, #4]
   20524:	and	r1, r1, ip
   20528:	ldr	ip, [r4, #8]
   2052c:	ldr	lr, [r4, #12]
   20530:	and	r2, r2, r0
   20534:	stm	r4, {r1, r2}
   20538:	ldrd	r0, [r3, #8]
   2053c:	and	r0, r0, ip
   20540:	and	r1, r1, lr
   20544:	ldr	ip, [r4, #16]
   20548:	strd	r0, [r4, #8]
   2054c:	ldr	r2, [r3, #16]
   20550:	ldr	r0, [r3, #20]
   20554:	ldr	lr, [r4, #20]
   20558:	and	r2, r2, ip
   2055c:	ldr	ip, [r4, #24]
   20560:	str	r2, [r4, #16]
   20564:	ldr	r2, [r4, #28]
   20568:	and	r0, r0, lr
   2056c:	str	r0, [r4, #20]
   20570:	ldr	r1, [r3, #24]
   20574:	ldr	r3, [r3, #28]
   20578:	and	r1, r1, ip
   2057c:	and	r3, r3, r2
   20580:	str	r1, [r4, #24]
   20584:	str	r3, [r4, #28]
   20588:	ldr	r2, [r5, #64]	; 0x40
   2058c:	mov	r7, #0
   20590:	str	r7, [sp, #28]
   20594:	cmp	r2, #31
   20598:	beq	2089c <__assert_fail@plt+0xf344>
   2059c:	ldr	r0, [r5, #56]	; 0x38
   205a0:	lsl	r3, r2, #5
   205a4:	add	r2, r2, #1
   205a8:	add	r9, r3, #4
   205ac:	mov	r1, #3
   205b0:	add	r8, r0, r3
   205b4:	str	r4, [sp, #24]
   205b8:	add	r3, r3, #16
   205bc:	str	r2, [r5, #64]	; 0x40
   205c0:	mov	r7, #0
   205c4:	strb	r1, [sp, #28]
   205c8:	add	r1, r0, r3
   205cc:	mvn	ip, #0
   205d0:	ldrd	r2, [sp, #24]
   205d4:	adds	r9, r0, r9
   205d8:	str	r7, [r8, #4]
   205dc:	str	r7, [r8, #8]
   205e0:	str	r7, [r8, #12]
   205e4:	strd	r2, [r8, #24]
   205e8:	ldrb	r3, [r1, #14]
   205ec:	bic	r3, r3, #12
   205f0:	strb	r3, [r1, #14]
   205f4:	str	r7, [r8, #16]
   205f8:	str	r7, [r8, #20]
   205fc:	str	ip, [r8, #32]
   20600:	beq	20748 <__assert_fail@plt+0xf1f0>
   20604:	ldr	r3, [r5, #92]	; 0x5c
   20608:	cmp	r3, #1
   2060c:	ble	2078c <__assert_fail@plt+0xf234>
   20610:	ldrb	r2, [r5, #88]	; 0x58
   20614:	ldr	r3, [r5, #64]	; 0x40
   20618:	orr	r2, r2, #2
   2061c:	cmp	r3, #31
   20620:	strb	r2, [r5, #88]	; 0x58
   20624:	beq	208c8 <__assert_fail@plt+0xf370>
   20628:	lsl	r7, r3, #5
   2062c:	add	r3, r3, #1
   20630:	add	fp, r7, #4
   20634:	mov	r2, #6
   20638:	str	r6, [sp, #24]
   2063c:	add	sl, r0, r7
   20640:	str	r3, [r5, #64]	; 0x40
   20644:	add	r7, r7, #16
   20648:	mvn	ip, #0
   2064c:	strb	r2, [sp, #28]
   20650:	add	r1, r0, r7
   20654:	mov	r7, #0
   20658:	ldrd	r2, [sp, #24]
   2065c:	adds	fp, r0, fp
   20660:	str	r7, [sl, #4]
   20664:	str	r7, [sl, #8]
   20668:	str	r7, [sl, #12]
   2066c:	strd	r2, [sl, #24]
   20670:	ldrb	r3, [r1, #14]
   20674:	bic	r3, r3, #12
   20678:	strb	r3, [r1, #14]
   2067c:	str	r7, [sl, #16]
   20680:	str	r7, [sl, #20]
   20684:	str	ip, [sl, #32]
   20688:	beq	20748 <__assert_fail@plt+0xf1f0>
   2068c:	ldr	r1, [r5, #64]	; 0x40
   20690:	mov	r2, #0
   20694:	mov	r3, #0
   20698:	strd	r2, [sp, #32]
   2069c:	cmp	r1, #31
   206a0:	beq	208f0 <__assert_fail@plt+0xf398>
   206a4:	lsl	r7, r1, #5
   206a8:	add	r1, r1, #1
   206ac:	add	r4, r7, #4
   206b0:	mov	r3, #10
   206b4:	mov	ip, #0
   206b8:	str	r1, [r5, #64]	; 0x40
   206bc:	add	r1, r0, r7
   206c0:	add	r7, r7, #16
   206c4:	strb	r3, [sp, #36]	; 0x24
   206c8:	add	r4, r0, r4
   206cc:	add	r0, r0, r7
   206d0:	ldrd	r2, [sp, #32]
   206d4:	mvn	lr, #0
   206d8:	str	ip, [r1, #4]
   206dc:	str	r9, [r1, #8]
   206e0:	str	fp, [r1, #12]
   206e4:	strd	r2, [r1, #24]
   206e8:	ldrb	r3, [r0, #14]
   206ec:	bic	r3, r3, #12
   206f0:	strb	r3, [r0, #14]
   206f4:	str	ip, [r1, #16]
   206f8:	str	ip, [r1, #20]
   206fc:	str	lr, [r1, #32]
   20700:	str	r4, [r8, #4]
   20704:	str	r4, [sl, #4]
   20708:	mov	r0, r4
   2070c:	add	sp, sp, #44	; 0x2c
   20710:	ldrd	r4, [sp]
   20714:	ldrd	r6, [sp, #8]
   20718:	ldrd	r8, [sp, #16]
   2071c:	ldrd	sl, [sp, #24]
   20720:	add	sp, sp, #32
   20724:	pop	{pc}		; (ldr pc, [sp], #4)
   20728:	add	r3, r3, #6
   2072c:	ldr	r2, [r4, r3, lsl #2]
   20730:	mvn	r2, r2
   20734:	str	r2, [r4, r3, lsl #2]
   20738:	ldr	r3, [r5, #92]	; 0x5c
   2073c:	cmp	r3, #1
   20740:	bgt	204e4 <__assert_fail@plt+0xef8c>
   20744:	b	20588 <__assert_fail@plt+0xf030>
   20748:	mov	r0, r4
   2074c:	mov	r4, #0
   20750:	bl	13e1c <__assert_fail@plt+0x28c4>
   20754:	ldr	r0, [r6]
   20758:	bl	13e1c <__assert_fail@plt+0x28c4>
   2075c:	ldr	r0, [r6, #4]
   20760:	bl	13e1c <__assert_fail@plt+0x28c4>
   20764:	ldr	r0, [r6, #8]
   20768:	bl	13e1c <__assert_fail@plt+0x28c4>
   2076c:	ldr	r0, [r6, #12]
   20770:	bl	13e1c <__assert_fail@plt+0x28c4>
   20774:	mov	r0, r6
   20778:	bl	13e1c <__assert_fail@plt+0x28c4>
   2077c:	ldr	r2, [sp, #84]	; 0x54
   20780:	mov	r3, #12
   20784:	str	r3, [r2]
   20788:	b	20708 <__assert_fail@plt+0xf1b0>
   2078c:	ldr	r0, [r6]
   20790:	mov	r4, r9
   20794:	bl	13e1c <__assert_fail@plt+0x28c4>
   20798:	ldr	r0, [r6, #4]
   2079c:	bl	13e1c <__assert_fail@plt+0x28c4>
   207a0:	ldr	r0, [r6, #8]
   207a4:	bl	13e1c <__assert_fail@plt+0x28c4>
   207a8:	ldr	r0, [r6, #12]
   207ac:	bl	13e1c <__assert_fail@plt+0x28c4>
   207b0:	mov	r0, r6
   207b4:	bl	13e1c <__assert_fail@plt+0x28c4>
   207b8:	b	20708 <__assert_fail@plt+0xf1b0>
   207bc:	mov	r0, r4
   207c0:	mov	r4, r6
   207c4:	bl	13e1c <__assert_fail@plt+0x28c4>
   207c8:	ldr	r2, [sp, #84]	; 0x54
   207cc:	mov	r3, #12
   207d0:	str	r3, [r2]
   207d4:	b	20708 <__assert_fail@plt+0xf1b0>
   207d8:	ldr	r1, [r3]
   207dc:	ldr	r2, [r4]
   207e0:	ldr	r0, [r4, #4]
   207e4:	and	r2, r2, r1
   207e8:	ldr	r1, [r4, #8]
   207ec:	str	r2, [r4]
   207f0:	ldr	ip, [r3, #4]
   207f4:	ldr	r2, [r4, #12]
   207f8:	and	r0, r0, ip
   207fc:	ldr	ip, [r4, #16]
   20800:	str	r0, [r4, #4]
   20804:	ldr	lr, [r3, #8]
   20808:	ldr	r0, [r4, #20]
   2080c:	and	r1, r1, lr
   20810:	str	r1, [r4, #8]
   20814:	ldr	lr, [r3, #12]
   20818:	ldr	r1, [r4, #24]
   2081c:	and	r2, r2, lr
   20820:	str	r2, [r4, #12]
   20824:	ldr	lr, [r3, #16]
   20828:	ldr	r2, [r4, #28]
   2082c:	and	ip, ip, lr
   20830:	str	ip, [r4, #16]
   20834:	ldr	ip, [r3, #20]
   20838:	and	r0, r0, ip
   2083c:	str	r0, [r4, #20]
   20840:	ldr	r0, [r3, #24]
   20844:	and	r1, r1, r0
   20848:	str	r1, [r4, #24]
   2084c:	ldr	r3, [r3, #28]
   20850:	and	r3, r3, r2
   20854:	str	r3, [r4, #28]
   20858:	b	20588 <__assert_fail@plt+0xf030>
   2085c:	mov	r0, r4
   20860:	mov	r4, r9
   20864:	bl	13e1c <__assert_fail@plt+0x28c4>
   20868:	ldr	r0, [r6]
   2086c:	bl	13e1c <__assert_fail@plt+0x28c4>
   20870:	ldr	r0, [r6, #4]
   20874:	bl	13e1c <__assert_fail@plt+0x28c4>
   20878:	ldr	r0, [r6, #8]
   2087c:	bl	13e1c <__assert_fail@plt+0x28c4>
   20880:	ldr	r0, [r6, #12]
   20884:	bl	13e1c <__assert_fail@plt+0x28c4>
   20888:	mov	r0, r6
   2088c:	bl	13e1c <__assert_fail@plt+0x28c4>
   20890:	ldr	r3, [sp, #84]	; 0x54
   20894:	str	sl, [r3]
   20898:	b	20708 <__assert_fail@plt+0xf1b0>
   2089c:	mov	r0, #996	; 0x3e4
   208a0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   208a4:	cmp	r0, #0
   208a8:	beq	20748 <__assert_fail@plt+0xf1f0>
   208ac:	ldr	r1, [r5, #56]	; 0x38
   208b0:	mov	r3, r7
   208b4:	mov	r2, #1
   208b8:	mov	r9, #4
   208bc:	str	r0, [r5, #56]	; 0x38
   208c0:	str	r1, [r0]
   208c4:	b	205ac <__assert_fail@plt+0xf054>
   208c8:	mov	r0, #996	; 0x3e4
   208cc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   208d0:	cmp	r0, #0
   208d4:	beq	20748 <__assert_fail@plt+0xf1f0>
   208d8:	ldr	r2, [r5, #56]	; 0x38
   208dc:	mov	r3, #1
   208e0:	mov	fp, #4
   208e4:	str	r0, [r5, #56]	; 0x38
   208e8:	str	r2, [r0]
   208ec:	b	20634 <__assert_fail@plt+0xf0dc>
   208f0:	mov	r0, #996	; 0x3e4
   208f4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   208f8:	cmp	r0, #0
   208fc:	beq	20918 <__assert_fail@plt+0xf3c0>
   20900:	ldr	r3, [r5, #56]	; 0x38
   20904:	mov	r4, #4
   20908:	mov	r1, #1
   2090c:	str	r0, [r5, #56]	; 0x38
   20910:	str	r3, [r0]
   20914:	b	206b0 <__assert_fail@plt+0xf158>
   20918:	mov	r4, r0
   2091c:	b	20708 <__assert_fail@plt+0xf1b0>
   20920:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20924:	mov	r4, r0
   20928:	mov	r5, r2
   2092c:	strd	r6, [sp, #8]
   20930:	subs	r6, r1, #0
   20934:	strd	r8, [sp, #16]
   20938:	str	sl, [sp, #24]
   2093c:	str	lr, [sp, #28]
   20940:	beq	2095c <__assert_fail@plt+0xf404>
   20944:	ldr	r3, [r6, #4]
   20948:	cmp	r2, #0
   2094c:	cmpne	r3, #0
   20950:	bgt	2099c <__assert_fail@plt+0xf444>
   20954:	cmp	r3, #0
   20958:	bgt	209a8 <__assert_fail@plt+0xf450>
   2095c:	cmp	r5, #0
   20960:	beq	20970 <__assert_fail@plt+0xf418>
   20964:	ldr	r3, [r5, #4]
   20968:	cmp	r3, #0
   2096c:	bgt	209dc <__assert_fail@plt+0xf484>
   20970:	mov	r3, #0
   20974:	mov	r0, r3
   20978:	str	r3, [r4]
   2097c:	str	r3, [r4, #4]
   20980:	str	r3, [r4, #8]
   20984:	ldrd	r4, [sp]
   20988:	ldrd	r6, [sp, #8]
   2098c:	ldrd	r8, [sp, #16]
   20990:	ldr	sl, [sp, #24]
   20994:	add	sp, sp, #28
   20998:	pop	{pc}		; (ldr pc, [sp], #4)
   2099c:	ldr	r2, [r2, #4]
   209a0:	cmp	r2, #0
   209a4:	bgt	20a10 <__assert_fail@plt+0xf4b8>
   209a8:	lsl	r0, r3, #2
   209ac:	str	r3, [r4]
   209b0:	str	r3, [r4, #4]
   209b4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   209b8:	cmp	r0, #0
   209bc:	str	r0, [r4, #8]
   209c0:	beq	20afc <__assert_fail@plt+0xf5a4>
   209c4:	ldr	r2, [r6, #4]
   209c8:	ldr	r1, [r6, #8]
   209cc:	lsl	r2, r2, #2
   209d0:	bl	11264 <memcpy@plt>
   209d4:	mov	r0, #0
   209d8:	b	20984 <__assert_fail@plt+0xf42c>
   209dc:	lsl	r0, r3, #2
   209e0:	str	r3, [r4]
   209e4:	str	r3, [r4, #4]
   209e8:	bl	2cd58 <__assert_fail@plt+0x1b800>
   209ec:	cmp	r0, #0
   209f0:	str	r0, [r4, #8]
   209f4:	beq	20afc <__assert_fail@plt+0xf5a4>
   209f8:	ldr	r2, [r5, #4]
   209fc:	ldr	r1, [r5, #8]
   20a00:	lsl	r2, r2, #2
   20a04:	bl	11264 <memcpy@plt>
   20a08:	mov	r0, #0
   20a0c:	b	20984 <__assert_fail@plt+0xf42c>
   20a10:	add	r3, r3, r2
   20a14:	lsl	r0, r3, #2
   20a18:	str	r3, [r4]
   20a1c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   20a20:	cmp	r0, #0
   20a24:	str	r0, [r4, #8]
   20a28:	beq	20b10 <__assert_fail@plt+0xf5b8>
   20a2c:	ldr	r7, [r6, #4]
   20a30:	ldr	r8, [r5, #4]
   20a34:	cmp	r7, #0
   20a38:	ble	20b18 <__assert_fail@plt+0xf5c0>
   20a3c:	ldr	r1, [r6, #8]
   20a40:	cmp	r8, #0
   20a44:	movle	r6, #0
   20a48:	movle	lr, r0
   20a4c:	movle	r3, r6
   20a50:	mov	r9, r1
   20a54:	ble	20ae4 <__assert_fail@plt+0xf58c>
   20a58:	mov	r6, #0
   20a5c:	mov	lr, r0
   20a60:	ldr	sl, [r5, #8]
   20a64:	mov	ip, r6
   20a68:	mov	r3, r6
   20a6c:	b	20a78 <__assert_fail@plt+0xf520>
   20a70:	cmp	r8, ip
   20a74:	ble	20ae4 <__assert_fail@plt+0xf58c>
   20a78:	ldr	r2, [r1]
   20a7c:	add	r6, r6, #1
   20a80:	ldr	r1, [sl, ip, lsl #2]
   20a84:	cmp	r2, r1
   20a88:	addgt	ip, ip, #1
   20a8c:	strgt	r1, [lr]
   20a90:	bgt	20aa0 <__assert_fail@plt+0xf548>
   20a94:	add	r3, r3, #1
   20a98:	addeq	ip, ip, #1
   20a9c:	str	r2, [lr]
   20aa0:	cmp	r7, r3
   20aa4:	add	r1, r9, r3, lsl #2
   20aa8:	add	lr, lr, #4
   20aac:	bgt	20a70 <__assert_fail@plt+0xf518>
   20ab0:	cmp	r8, ip
   20ab4:	bgt	20ac4 <__assert_fail@plt+0xf56c>
   20ab8:	mov	r0, #0
   20abc:	str	r6, [r4, #4]
   20ac0:	b	20984 <__assert_fail@plt+0xf42c>
   20ac4:	ldr	r1, [r5, #8]
   20ac8:	sub	r2, r8, ip
   20acc:	add	r0, r0, r6, lsl #2
   20ad0:	add	r6, r6, r2
   20ad4:	lsl	r2, r2, #2
   20ad8:	add	r1, r1, ip, lsl #2
   20adc:	bl	11264 <memcpy@plt>
   20ae0:	b	20ab8 <__assert_fail@plt+0xf560>
   20ae4:	sub	r3, r7, r3
   20ae8:	mov	r0, lr
   20aec:	lsl	r2, r3, #2
   20af0:	add	r6, r6, r3
   20af4:	bl	11264 <memcpy@plt>
   20af8:	b	20ab8 <__assert_fail@plt+0xf560>
   20afc:	mov	r3, #0
   20b00:	mov	r0, #12
   20b04:	str	r3, [r4]
   20b08:	str	r3, [r4, #4]
   20b0c:	b	20984 <__assert_fail@plt+0xf42c>
   20b10:	mov	r0, #12
   20b14:	b	20984 <__assert_fail@plt+0xf42c>
   20b18:	mov	r6, #0
   20b1c:	mov	ip, r6
   20b20:	b	20ab0 <__assert_fail@plt+0xf558>
   20b24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20b28:	strd	r6, [sp, #8]
   20b2c:	subs	r7, r3, #0
   20b30:	subgt	r4, r1, #4
   20b34:	subgt	r6, r2, #4
   20b38:	str	r8, [sp, #16]
   20b3c:	movgt	r5, #0
   20b40:	movgt	r8, r0
   20b44:	str	lr, [sp, #20]
   20b48:	sub	sp, sp, #16
   20b4c:	bgt	20b7c <__assert_fail@plt+0xf624>
   20b50:	b	20be0 <__assert_fail@plt+0xf688>
   20b54:	bl	1d988 <__assert_fail@plt+0xc430>
   20b58:	str	r0, [r4]
   20b5c:	ldr	r0, [sp, #12]
   20b60:	bl	13e1c <__assert_fail@plt+0x28c4>
   20b64:	ldr	r3, [sp]
   20b68:	cmp	r3, #0
   20b6c:	bne	20bc4 <__assert_fail@plt+0xf66c>
   20b70:	add	r5, r5, #1
   20b74:	cmp	r7, r5
   20b78:	beq	20be0 <__assert_fail@plt+0xf688>
   20b7c:	ldr	r1, [r4, #4]!
   20b80:	ldr	ip, [r6, #4]!
   20b84:	cmp	r1, #0
   20b88:	streq	ip, [r4]
   20b8c:	beq	20b70 <__assert_fail@plt+0xf618>
   20b90:	cmp	ip, #0
   20b94:	add	r2, ip, #4
   20b98:	add	r1, r1, #4
   20b9c:	add	r0, sp, #4
   20ba0:	beq	20b70 <__assert_fail@plt+0xf618>
   20ba4:	bl	20920 <__assert_fail@plt+0xf3c8>
   20ba8:	mov	r3, r0
   20bac:	add	r2, sp, #4
   20bb0:	cmp	r3, #0
   20bb4:	mov	r1, r8
   20bb8:	mov	r0, sp
   20bbc:	str	r3, [sp]
   20bc0:	beq	20b54 <__assert_fail@plt+0xf5fc>
   20bc4:	mov	r0, r3
   20bc8:	add	sp, sp, #16
   20bcc:	ldrd	r4, [sp]
   20bd0:	ldrd	r6, [sp, #8]
   20bd4:	ldr	r8, [sp, #16]
   20bd8:	add	sp, sp, #20
   20bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   20be0:	mov	r3, #0
   20be4:	b	20bc4 <__assert_fail@plt+0xf66c>
   20be8:	lsl	ip, r2, #2
   20bec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20bf0:	mov	r4, r3
   20bf4:	strd	r6, [sp, #8]
   20bf8:	strd	r8, [sp, #16]
   20bfc:	mov	r8, r2
   20c00:	ldr	r9, [r3, #4]
   20c04:	strd	sl, [sp, #24]
   20c08:	mov	sl, r0
   20c0c:	mov	fp, r1
   20c10:	ldr	r2, [r0, #100]	; 0x64
   20c14:	str	lr, [sp, #32]
   20c18:	sub	sp, sp, #100	; 0x64
   20c1c:	ldr	r6, [r0, #84]	; 0x54
   20c20:	mov	r0, #0
   20c24:	str	ip, [sp, #28]
   20c28:	ldr	r3, [r2, r8, lsl #2]
   20c2c:	add	r2, r2, ip
   20c30:	cmp	r3, r0
   20c34:	str	r3, [sp, #20]
   20c38:	str	r0, [sp, #60]	; 0x3c
   20c3c:	beq	20ff0 <__assert_fail@plt+0xfa98>
   20c40:	cmp	r9, #0
   20c44:	bne	20c80 <__assert_fail@plt+0xf728>
   20c48:	ldr	r3, [r1]
   20c4c:	str	r9, [r3, r8, lsl #2]
   20c50:	ldr	r3, [r2]
   20c54:	ldrb	r9, [r3, #52]	; 0x34
   20c58:	ands	r9, r9, #64	; 0x40
   20c5c:	bne	20da4 <__assert_fail@plt+0xf84c>
   20c60:	mov	r0, r9
   20c64:	add	sp, sp, #100	; 0x64
   20c68:	ldrd	r4, [sp]
   20c6c:	ldrd	r6, [sp, #8]
   20c70:	ldrd	r8, [sp, #16]
   20c74:	ldrd	sl, [sp, #24]
   20c78:	add	sp, sp, #32
   20c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   20c80:	mov	r2, r4
   20c84:	mov	r1, r6
   20c88:	str	r0, [sp, #64]	; 0x40
   20c8c:	add	r0, sp, #64	; 0x40
   20c90:	bl	1d988 <__assert_fail@plt+0xc430>
   20c94:	ldr	r9, [sp, #64]	; 0x40
   20c98:	mov	r2, r0
   20c9c:	cmp	r9, #0
   20ca0:	bne	20c60 <__assert_fail@plt+0xf708>
   20ca4:	mov	r5, r0
   20ca8:	ldr	r7, [r5, #28]!
   20cac:	cmp	r7, #0
   20cb0:	bne	20d30 <__assert_fail@plt+0xf7d8>
   20cb4:	ldr	r3, [r4, #4]
   20cb8:	str	r2, [sp, #24]
   20cbc:	lsl	r0, r3, #2
   20cc0:	str	r3, [r2, #28]
   20cc4:	str	r9, [r2, #32]
   20cc8:	bl	2cd58 <__assert_fail@plt+0x1b800>
   20ccc:	ldr	r2, [sp, #24]
   20cd0:	cmp	r0, #0
   20cd4:	str	r0, [r2, #36]	; 0x24
   20cd8:	beq	20d28 <__assert_fail@plt+0xf7d0>
   20cdc:	ldr	r3, [r4, #4]
   20ce0:	str	r7, [sp, #64]	; 0x40
   20ce4:	cmp	r3, #0
   20ce8:	bgt	20cfc <__assert_fail@plt+0xf7a4>
   20cec:	b	20d30 <__assert_fail@plt+0xf7d8>
   20cf0:	ldr	r3, [r4, #4]
   20cf4:	cmp	r7, r3
   20cf8:	bge	20d30 <__assert_fail@plt+0xf7d8>
   20cfc:	ldr	r3, [r4, #8]
   20d00:	mov	r0, r5
   20d04:	ldr	r1, [r6, #28]
   20d08:	ldr	r3, [r3, r7, lsl #2]
   20d0c:	add	r7, r7, #1
   20d10:	add	r3, r3, r3, lsl #1
   20d14:	add	r1, r1, r3, lsl #2
   20d18:	bl	19174 <__assert_fail@plt+0x7c1c>
   20d1c:	cmp	r0, #0
   20d20:	str	r0, [sp, #64]	; 0x40
   20d24:	beq	20cf0 <__assert_fail@plt+0xf798>
   20d28:	mov	r9, #12
   20d2c:	b	20c60 <__assert_fail@plt+0xf708>
   20d30:	ldr	r3, [sp, #20]
   20d34:	mov	r2, r5
   20d38:	mov	r0, r4
   20d3c:	add	r3, r3, #4
   20d40:	mov	r1, r3
   20d44:	str	r3, [sp, #36]	; 0x24
   20d48:	bl	18f8c <__assert_fail@plt+0x7a34>
   20d4c:	cmp	r0, #0
   20d50:	str	r0, [sp, #60]	; 0x3c
   20d54:	bne	21550 <__assert_fail@plt+0xfff8>
   20d58:	ldr	r9, [fp, #20]
   20d5c:	cmp	r9, #0
   20d60:	bne	21270 <__assert_fail@plt+0xfd18>
   20d64:	mov	r2, r4
   20d68:	mov	r1, r6
   20d6c:	ldr	r4, [fp]
   20d70:	add	r0, sp, #60	; 0x3c
   20d74:	bl	1d988 <__assert_fail@plt+0xc430>
   20d78:	ldr	r9, [sp, #60]	; 0x3c
   20d7c:	str	r0, [r4, r8, lsl #2]
   20d80:	cmp	r9, #0
   20d84:	bne	20c60 <__assert_fail@plt+0xf708>
   20d88:	ldr	r3, [sp, #28]
   20d8c:	ldr	r2, [sl, #100]	; 0x64
   20d90:	add	r2, r2, r3
   20d94:	ldr	r3, [r2]
   20d98:	ldrb	r9, [r3, #52]	; 0x34
   20d9c:	ands	r9, r9, #64	; 0x40
   20da0:	beq	20c60 <__assert_fail@plt+0xf708>
   20da4:	ldr	ip, [sl, #108]	; 0x6c
   20da8:	cmp	ip, #0
   20dac:	ble	21028 <__assert_fail@plt+0xfad0>
   20db0:	ldr	r0, [sl, #116]	; 0x74
   20db4:	mov	r2, ip
   20db8:	mov	lr, #0
   20dbc:	add	r3, r2, lr
   20dc0:	asr	r3, r3, #1
   20dc4:	add	r1, r3, r3, lsl #1
   20dc8:	add	r1, r0, r1, lsl #3
   20dcc:	ldr	r1, [r1, #4]
   20dd0:	cmp	r8, r1
   20dd4:	bgt	21200 <__assert_fail@plt+0xfca8>
   20dd8:	cmp	r3, lr
   20ddc:	ble	20e28 <__assert_fail@plt+0xf8d0>
   20de0:	add	r2, r3, lr
   20de4:	asr	r2, r2, #1
   20de8:	add	r1, r2, r2, lsl #1
   20dec:	add	r1, r0, r1, lsl #3
   20df0:	ldr	r1, [r1, #4]
   20df4:	cmp	r8, r1
   20df8:	ble	20e18 <__assert_fail@plt+0xf8c0>
   20dfc:	b	211f4 <__assert_fail@plt+0xfc9c>
   20e00:	add	r1, r3, r3, lsl #1
   20e04:	add	r1, r0, r1, lsl #3
   20e08:	ldr	r1, [r1, #4]
   20e0c:	cmp	r8, r1
   20e10:	bgt	21200 <__assert_fail@plt+0xfca8>
   20e14:	mov	r2, r3
   20e18:	add	r3, lr, r2
   20e1c:	cmp	lr, r2
   20e20:	asr	r3, r3, #1
   20e24:	blt	20e00 <__assert_fail@plt+0xf8a8>
   20e28:	cmp	ip, lr
   20e2c:	str	lr, [sp, #44]	; 0x2c
   20e30:	ble	21028 <__assert_fail@plt+0xfad0>
   20e34:	add	r3, lr, lr, lsl #1
   20e38:	lsl	r3, r3, #3
   20e3c:	add	r0, r0, r3
   20e40:	str	r3, [sp, #48]	; 0x30
   20e44:	ldr	r3, [r0, #4]
   20e48:	cmp	r8, r3
   20e4c:	bne	21028 <__assert_fail@plt+0xfad0>
   20e50:	ldr	r3, [sp, #20]
   20e54:	ldr	r7, [sl, #84]	; 0x54
   20e58:	ldr	r0, [r3, #8]
   20e5c:	mov	r3, #0
   20e60:	str	r3, [sp, #64]	; 0x40
   20e64:	cmp	r0, r3
   20e68:	ble	21028 <__assert_fail@plt+0xfad0>
   20e6c:	add	r2, fp, #24
   20e70:	mov	r9, r8
   20e74:	mov	r8, r3
   20e78:	str	r2, [sp, #36]	; 0x24
   20e7c:	add	r2, fp, #20
   20e80:	str	r2, [sp, #40]	; 0x28
   20e84:	b	20e9c <__assert_fail@plt+0xf944>
   20e88:	cmp	r3, #4
   20e8c:	beq	20ed4 <__assert_fail@plt+0xf97c>
   20e90:	add	r8, r8, #1
   20e94:	cmp	r8, r0
   20e98:	bge	2101c <__assert_fail@plt+0xfac4>
   20e9c:	ldr	r3, [sp, #20]
   20ea0:	ldr	r2, [fp, #8]
   20ea4:	ldr	r1, [r3, #12]
   20ea8:	ldr	r3, [r7]
   20eac:	ldr	r6, [r1, r8, lsl #2]
   20eb0:	add	r3, r3, r6, lsl #3
   20eb4:	cmp	r6, r2
   20eb8:	ldrb	r3, [r3, #4]
   20ebc:	bne	20e88 <__assert_fail@plt+0xf930>
   20ec0:	ldr	r2, [fp, #12]
   20ec4:	cmp	r9, r2
   20ec8:	beq	20e90 <__assert_fail@plt+0xf938>
   20ecc:	cmp	r3, #4
   20ed0:	bne	20e90 <__assert_fail@plt+0xf938>
   20ed4:	add	r3, r6, r6, lsl #1
   20ed8:	ldr	r4, [sl, #116]	; 0x74
   20edc:	lsl	r2, r6, #2
   20ee0:	str	r8, [sp, #52]	; 0x34
   20ee4:	lsl	r3, r3, #2
   20ee8:	ldr	r5, [sp, #44]	; 0x2c
   20eec:	mov	r8, r2
   20ef0:	str	r3, [sp, #32]
   20ef4:	ldr	r3, [sp, #48]	; 0x30
   20ef8:	add	r4, r4, r3
   20efc:	ldr	r3, [r4]
   20f00:	cmp	r6, r3
   20f04:	bne	20fcc <__assert_fail@plt+0xfa74>
   20f08:	ldr	r3, [r4, #8]
   20f0c:	ldr	ip, [r4, #12]
   20f10:	sub	ip, ip, r3
   20f14:	cmp	ip, #0
   20f18:	add	ip, r9, ip
   20f1c:	beq	2104c <__assert_fail@plt+0xfaf4>
   20f20:	ldr	r3, [r7, #12]
   20f24:	ldr	r0, [r3, r8]
   20f28:	ldr	r3, [fp, #12]
   20f2c:	cmp	ip, r3
   20f30:	bgt	20fcc <__assert_fail@plt+0xfa74>
   20f34:	ldr	r3, [fp]
   20f38:	ldr	r2, [r3, ip, lsl #2]
   20f3c:	cmp	r2, #0
   20f40:	beq	20fcc <__assert_fail@plt+0xfa74>
   20f44:	ldr	r3, [r2, #8]
   20f48:	cmp	r3, #0
   20f4c:	ble	20fcc <__assert_fail@plt+0xfa74>
   20f50:	subs	r3, r3, #1
   20f54:	ldr	lr, [r2, #12]
   20f58:	moveq	r1, r3
   20f5c:	beq	20fc0 <__assert_fail@plt+0xfa68>
   20f60:	mov	r1, #0
   20f64:	str	ip, [sp, #24]
   20f68:	add	r2, r3, r1
   20f6c:	lsr	r2, r2, #1
   20f70:	ldr	ip, [lr, r2, lsl #2]
   20f74:	cmp	r0, ip
   20f78:	bgt	2103c <__assert_fail@plt+0xfae4>
   20f7c:	cmp	r2, r1
   20f80:	bls	20fbc <__assert_fail@plt+0xfa64>
   20f84:	add	r3, r2, r1
   20f88:	lsr	r3, r3, #1
   20f8c:	ldr	ip, [lr, r3, lsl #2]
   20f90:	cmp	r0, ip
   20f94:	ble	20fac <__assert_fail@plt+0xfa54>
   20f98:	b	21030 <__assert_fail@plt+0xfad8>
   20f9c:	ldr	ip, [lr, r2, lsl #2]
   20fa0:	cmp	r0, ip
   20fa4:	bgt	2103c <__assert_fail@plt+0xfae4>
   20fa8:	mov	r3, r2
   20fac:	add	r2, r1, r3
   20fb0:	cmp	r1, r3
   20fb4:	lsr	r2, r2, #1
   20fb8:	bcc	20f9c <__assert_fail@plt+0xfa44>
   20fbc:	ldr	ip, [sp, #24]
   20fc0:	ldr	r3, [lr, r1, lsl #2]
   20fc4:	cmp	r0, r3
   20fc8:	beq	21064 <__assert_fail@plt+0xfb0c>
   20fcc:	ldrb	r3, [r4, #20]
   20fd0:	add	r5, r5, #1
   20fd4:	add	r4, r4, #24
   20fd8:	cmp	r3, #0
   20fdc:	bne	20efc <__assert_fail@plt+0xf9a4>
   20fe0:	ldr	r3, [sp, #20]
   20fe4:	ldr	r8, [sp, #52]	; 0x34
   20fe8:	ldr	r0, [r3, #8]
   20fec:	b	20e90 <__assert_fail@plt+0xf938>
   20ff0:	ldr	r5, [r1]
   20ff4:	cmp	r9, r0
   20ff8:	streq	r9, [r5, r8, lsl #2]
   20ffc:	beq	20c60 <__assert_fail@plt+0xf708>
   21000:	mov	r2, r4
   21004:	mov	r1, r6
   21008:	add	r0, sp, #60	; 0x3c
   2100c:	bl	1d988 <__assert_fail@plt+0xc430>
   21010:	str	r0, [r5, r8, lsl #2]
   21014:	ldr	r9, [sp, #60]	; 0x3c
   21018:	b	20c60 <__assert_fail@plt+0xf708>
   2101c:	ldr	r3, [sp, #64]	; 0x40
   21020:	cmp	r3, #0
   21024:	bne	21630 <__assert_fail@plt+0x100d8>
   21028:	mov	r9, #0
   2102c:	b	20c60 <__assert_fail@plt+0xf708>
   21030:	mov	r1, r3
   21034:	mov	r3, r2
   21038:	mov	r2, r1
   2103c:	add	r1, r2, #1
   21040:	cmp	r3, r1
   21044:	bhi	20f68 <__assert_fail@plt+0xfa10>
   21048:	b	20fbc <__assert_fail@plt+0xfa64>
   2104c:	ldr	r3, [r7, #20]
   21050:	ldr	r2, [sp, #32]
   21054:	add	r3, r3, r2
   21058:	ldr	r3, [r3, #8]
   2105c:	ldr	r0, [r3]
   21060:	b	20f28 <__assert_fail@plt+0xf9d0>
   21064:	mov	r3, r6
   21068:	str	r9, [sp]
   2106c:	stmib	sp, {r0, ip}
   21070:	mov	r0, sl
   21074:	ldr	r2, [sp, #36]	; 0x24
   21078:	ldr	r1, [sp, #40]	; 0x28
   2107c:	bl	1b954 <__assert_fail@plt+0xa3fc>
   21080:	cmp	r0, #0
   21084:	bne	20fcc <__assert_fail@plt+0xfa74>
   21088:	ldr	r1, [sp, #64]	; 0x40
   2108c:	cmp	r1, #0
   21090:	beq	21210 <__assert_fail@plt+0xfcb8>
   21094:	add	r4, sp, #64	; 0x40
   21098:	add	r0, sp, #80	; 0x50
   2109c:	mov	r1, r5
   210a0:	str	r6, [sp, #72]	; 0x48
   210a4:	str	r9, [sp, #76]	; 0x4c
   210a8:	bl	18d78 <__assert_fail@plt+0x7820>
   210ac:	cmp	r0, #0
   210b0:	beq	215c0 <__assert_fail@plt+0x10068>
   210b4:	ldr	r2, [sp, #28]
   210b8:	mov	r1, r4
   210bc:	mov	r0, sl
   210c0:	ldr	r3, [sp, #64]	; 0x40
   210c4:	ldr	r4, [r3, r2]
   210c8:	bl	21638 <__assert_fail@plt+0x100e0>
   210cc:	cmp	r0, #0
   210d0:	bne	21558 <__assert_fail@plt+0x10000>
   210d4:	ldr	r1, [fp, #4]
   210d8:	ldr	r2, [sp, #64]	; 0x40
   210dc:	cmp	r1, #0
   210e0:	beq	210fc <__assert_fail@plt+0xfba4>
   210e4:	add	r3, r9, #1
   210e8:	mov	r0, r7
   210ec:	bl	20b24 <__assert_fail@plt+0xf5cc>
   210f0:	cmp	r0, #0
   210f4:	bne	21558 <__assert_fail@plt+0x10000>
   210f8:	ldr	r2, [sp, #64]	; 0x40
   210fc:	ldr	r3, [sp, #28]
   21100:	ldr	lr, [sp, #84]	; 0x54
   21104:	str	r4, [r2, r3]
   21108:	cmp	lr, #0
   2110c:	ble	2118c <__assert_fail@plt+0xfc34>
   21110:	sub	r4, lr, #1
   21114:	ldr	r1, [sp, #88]	; 0x58
   21118:	cmp	r4, #0
   2111c:	mov	r0, r4
   21120:	movne	r2, #0
   21124:	beq	21608 <__assert_fail@plt+0x100b0>
   21128:	add	r3, r0, r2
   2112c:	lsr	r3, r3, #1
   21130:	ldr	ip, [r1, r3, lsl #2]
   21134:	cmp	r5, ip
   21138:	bgt	211e4 <__assert_fail@plt+0xfc8c>
   2113c:	cmp	r3, r2
   21140:	bls	2117c <__assert_fail@plt+0xfc24>
   21144:	add	r0, r3, r2
   21148:	lsr	r0, r0, #1
   2114c:	ldr	ip, [r1, r0, lsl #2]
   21150:	cmp	r5, ip
   21154:	ble	2116c <__assert_fail@plt+0xfc14>
   21158:	b	211d8 <__assert_fail@plt+0xfc80>
   2115c:	ldr	ip, [r1, r3, lsl #2]
   21160:	cmp	r5, ip
   21164:	bgt	211e4 <__assert_fail@plt+0xfc8c>
   21168:	mov	r0, r3
   2116c:	add	r3, r2, r0
   21170:	cmp	r2, r0
   21174:	lsr	r3, r3, #1
   21178:	bcc	2115c <__assert_fail@plt+0xfc04>
   2117c:	lsl	r3, r2, #2
   21180:	ldr	r3, [r1, r3]!
   21184:	cmp	r5, r3
   21188:	beq	2119c <__assert_fail@plt+0xfc44>
   2118c:	ldr	r4, [sl, #116]	; 0x74
   21190:	add	r3, r5, r5, lsl #1
   21194:	add	r4, r4, r3, lsl #3
   21198:	b	20fcc <__assert_fail@plt+0xfa74>
   2119c:	cmp	lr, r2
   211a0:	movgt	lr, #0
   211a4:	movle	lr, #1
   211a8:	orrs	r3, lr, r2, lsr #31
   211ac:	bne	2118c <__assert_fail@plt+0xfc34>
   211b0:	cmp	r2, r4
   211b4:	str	r4, [sp, #84]	; 0x54
   211b8:	bge	2118c <__assert_fail@plt+0xfc34>
   211bc:	ldr	r3, [r1, #4]
   211c0:	add	r2, r2, #1
   211c4:	str	r3, [r1], #4
   211c8:	ldr	r3, [sp, #84]	; 0x54
   211cc:	cmp	r2, r3
   211d0:	blt	211bc <__assert_fail@plt+0xfc64>
   211d4:	b	2118c <__assert_fail@plt+0xfc34>
   211d8:	mov	r2, r0
   211dc:	mov	r0, r3
   211e0:	mov	r3, r2
   211e4:	add	r2, r3, #1
   211e8:	cmp	r2, r0
   211ec:	bcc	21128 <__assert_fail@plt+0xfbd0>
   211f0:	b	2117c <__assert_fail@plt+0xfc24>
   211f4:	mov	r1, r2
   211f8:	mov	r2, r3
   211fc:	mov	r3, r1
   21200:	add	lr, r3, #1
   21204:	cmp	lr, r2
   21208:	blt	20dbc <__assert_fail@plt+0xf864>
   2120c:	b	20e28 <__assert_fail@plt+0xf8d0>
   21210:	ldrd	r2, [fp]
   21214:	add	r4, sp, #64	; 0x40
   21218:	ldr	ip, [fp, #20]
   2121c:	ldr	r0, [fp, #24]
   21220:	strd	r2, [sp, #64]	; 0x40
   21224:	ldrd	r2, [fp, #8]
   21228:	cmp	ip, #0
   2122c:	strd	r2, [r4, #8]
   21230:	ldrd	r2, [fp, #16]
   21234:	str	r0, [r4, #24]
   21238:	strd	r2, [r4, #16]
   2123c:	ble	21574 <__assert_fail@plt+0x1001c>
   21240:	lsl	r0, ip, #2
   21244:	str	ip, [sp, #80]	; 0x50
   21248:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2124c:	cmp	r0, #0
   21250:	str	r0, [sp, #88]	; 0x58
   21254:	beq	2161c <__assert_fail@plt+0x100c4>
   21258:	ldr	r2, [fp, #20]
   2125c:	ldr	r1, [fp, #24]
   21260:	lsl	r2, r2, #2
   21264:	bl	11264 <memcpy@plt>
   21268:	add	r0, sp, #80	; 0x50
   2126c:	b	2109c <__assert_fail@plt+0xfb44>
   21270:	ldr	r3, [sl, #116]	; 0x74
   21274:	str	r3, [sp, #32]
   21278:	ble	21368 <__assert_fail@plt+0xfe10>
   2127c:	mov	r7, r0
   21280:	str	r9, [sp, #24]
   21284:	mov	r9, r8
   21288:	str	sl, [sp, #48]	; 0x30
   2128c:	ldr	r3, [fp, #24]
   21290:	ldr	r0, [sp, #32]
   21294:	ldr	r3, [r3, r7, lsl #2]
   21298:	add	r3, r3, r3, lsl #1
   2129c:	add	r2, r0, r3, lsl #3
   212a0:	ldr	r1, [r2, #8]
   212a4:	cmp	r9, r1
   212a8:	ble	21350 <__assert_fail@plt+0xfdf8>
   212ac:	ldr	r1, [r2, #4]
   212b0:	cmp	r9, r1
   212b4:	bgt	21350 <__assert_fail@plt+0xfdf8>
   212b8:	ldr	r1, [r2, #12]
   212bc:	ldr	r2, [r0, r3, lsl #3]
   212c0:	ldr	r3, [r6]
   212c4:	cmp	r9, r1
   212c8:	ldr	r0, [r4, #4]
   212cc:	ldr	r8, [r3, r2, lsl #3]
   212d0:	str	r0, [sp, #40]	; 0x28
   212d4:	beq	21374 <__assert_fail@plt+0xfe1c>
   212d8:	cmp	r0, #0
   212dc:	ble	21350 <__assert_fail@plt+0xfdf8>
   212e0:	mov	r5, #0
   212e4:	ldr	sl, [sp, #36]	; 0x24
   212e8:	b	212f8 <__assert_fail@plt+0xfda0>
   212ec:	cmp	r5, r0
   212f0:	bge	21348 <__assert_fail@plt+0xfdf0>
   212f4:	ldr	r3, [r6]
   212f8:	ldr	r2, [r4, #8]
   212fc:	ldr	r1, [r2, r5, lsl #2]
   21300:	add	r5, r5, #1
   21304:	add	r2, r3, r1, lsl #3
   21308:	ldrb	r2, [r2, #4]
   2130c:	sub	r2, r2, #8
   21310:	cmp	r2, #1
   21314:	bhi	212ec <__assert_fail@plt+0xfd94>
   21318:	ldr	r3, [r3, r1, lsl #3]
   2131c:	cmp	r8, r3
   21320:	bne	212ec <__assert_fail@plt+0xfd94>
   21324:	mov	r3, sl
   21328:	mov	r2, r4
   2132c:	mov	r0, r6
   21330:	bl	1d0c8 <__assert_fail@plt+0xbb70>
   21334:	cmp	r0, #0
   21338:	bne	21550 <__assert_fail@plt+0xfff8>
   2133c:	ldr	r0, [r4, #4]
   21340:	cmp	r5, r0
   21344:	blt	212f4 <__assert_fail@plt+0xfd9c>
   21348:	ldr	r3, [fp, #20]
   2134c:	str	r3, [sp, #24]
   21350:	ldr	r3, [sp, #24]
   21354:	add	r7, r7, #1
   21358:	cmp	r7, r3
   2135c:	blt	2128c <__assert_fail@plt+0xfd34>
   21360:	ldr	sl, [sp, #48]	; 0x30
   21364:	mov	r8, r9
   21368:	mov	r3, #0
   2136c:	str	r3, [sp, #60]	; 0x3c
   21370:	b	20d64 <__assert_fail@plt+0xf80c>
   21374:	cmp	r0, #0
   21378:	ble	21350 <__assert_fail@plt+0xfdf8>
   2137c:	ldr	sl, [r4, #8]
   21380:	mvn	r5, #0
   21384:	mov	r1, r5
   21388:	str	r6, [sp, #44]	; 0x2c
   2138c:	add	r2, sl, r0, lsl #2
   21390:	mov	r0, sl
   21394:	mov	r6, r2
   21398:	b	213b8 <__assert_fail@plt+0xfe60>
   2139c:	cmp	ip, #9
   213a0:	bne	213b0 <__assert_fail@plt+0xfe58>
   213a4:	ldr	ip, [lr]
   213a8:	cmp	r8, ip
   213ac:	moveq	r5, r2
   213b0:	cmp	r6, r0
   213b4:	beq	213e0 <__assert_fail@plt+0xfe88>
   213b8:	ldr	r2, [r0], #4
   213bc:	add	lr, r3, r2, lsl #3
   213c0:	ldrb	ip, [lr, #4]
   213c4:	cmp	ip, #8
   213c8:	bne	2139c <__assert_fail@plt+0xfe44>
   213cc:	ldr	ip, [r3, r2, lsl #3]
   213d0:	cmp	r8, ip
   213d4:	moveq	r1, r2
   213d8:	cmp	r6, r0
   213dc:	bne	213b8 <__assert_fail@plt+0xfe60>
   213e0:	cmp	r1, #0
   213e4:	ldr	r6, [sp, #44]	; 0x2c
   213e8:	bge	21588 <__assert_fail@plt+0x10030>
   213ec:	cmp	r5, #0
   213f0:	blt	21350 <__assert_fail@plt+0xfdf8>
   213f4:	mov	r3, sl
   213f8:	ldr	sl, [sp, #40]	; 0x28
   213fc:	mov	r8, #0
   21400:	ldr	r1, [r3, r8, lsl #2]
   21404:	ldr	r3, [r6, #28]
   21408:	add	lr, r1, r1, lsl #1
   2140c:	lsl	lr, lr, #2
   21410:	add	r3, r3, lr
   21414:	ldr	r2, [r3, #4]
   21418:	cmp	r2, #0
   2141c:	ble	2149c <__assert_fail@plt+0xff44>
   21420:	subs	r2, r2, #1
   21424:	ldr	ip, [r3, #8]
   21428:	moveq	r0, r2
   2142c:	beq	21490 <__assert_fail@plt+0xff38>
   21430:	mov	r0, #0
   21434:	str	r1, [sp, #24]
   21438:	add	r3, r2, r0
   2143c:	lsr	r3, r3, #1
   21440:	ldr	r1, [ip, r3, lsl #2]
   21444:	cmp	r5, r1
   21448:	bgt	215d4 <__assert_fail@plt+0x1007c>
   2144c:	cmp	r3, r0
   21450:	bls	2148c <__assert_fail@plt+0xff34>
   21454:	add	r2, r3, r0
   21458:	lsr	r2, r2, #1
   2145c:	ldr	r1, [ip, r2, lsl #2]
   21460:	cmp	r5, r1
   21464:	ble	2147c <__assert_fail@plt+0xff24>
   21468:	b	215c8 <__assert_fail@plt+0x10070>
   2146c:	ldr	r1, [ip, r3, lsl #2]
   21470:	cmp	r5, r1
   21474:	bgt	215d4 <__assert_fail@plt+0x1007c>
   21478:	mov	r2, r3
   2147c:	add	r3, r0, r2
   21480:	cmp	r0, r2
   21484:	lsr	r3, r3, #1
   21488:	bcc	2146c <__assert_fail@plt+0xff14>
   2148c:	ldr	r1, [sp, #24]
   21490:	ldr	r3, [ip, r0, lsl #2]
   21494:	cmp	r5, r3
   21498:	beq	215e4 <__assert_fail@plt+0x1008c>
   2149c:	ldr	r3, [r6, #24]
   214a0:	add	lr, r3, lr
   214a4:	ldr	r2, [lr, #4]
   214a8:	cmp	r2, #0
   214ac:	ble	21524 <__assert_fail@plt+0xffcc>
   214b0:	subs	r2, r2, #1
   214b4:	ldr	ip, [lr, #8]
   214b8:	moveq	r0, r2
   214bc:	beq	21518 <__assert_fail@plt+0xffc0>
   214c0:	mov	r0, #0
   214c4:	add	r3, r2, r0
   214c8:	lsr	r3, r3, #1
   214cc:	ldr	lr, [ip, r3, lsl #2]
   214d0:	cmp	lr, r5
   214d4:	blt	215f8 <__assert_fail@plt+0x100a0>
   214d8:	cmp	r3, r0
   214dc:	bls	21518 <__assert_fail@plt+0xffc0>
   214e0:	add	r2, r3, r0
   214e4:	lsr	r2, r2, #1
   214e8:	ldr	lr, [ip, r2, lsl #2]
   214ec:	cmp	r5, lr
   214f0:	ble	21508 <__assert_fail@plt+0xffb0>
   214f4:	b	215ec <__assert_fail@plt+0x10094>
   214f8:	ldr	lr, [ip, r3, lsl #2]
   214fc:	cmp	r5, lr
   21500:	bgt	215f8 <__assert_fail@plt+0x100a0>
   21504:	mov	r2, r3
   21508:	add	r3, r0, r2
   2150c:	cmp	r0, r2
   21510:	lsr	r3, r3, #1
   21514:	bcc	214f8 <__assert_fail@plt+0xffa0>
   21518:	ldr	r3, [ip, r0, lsl #2]
   2151c:	cmp	r5, r3
   21520:	beq	215e4 <__assert_fail@plt+0x1008c>
   21524:	mov	r2, r4
   21528:	mov	r0, r6
   2152c:	ldr	r3, [sp, #36]	; 0x24
   21530:	bl	1d0c8 <__assert_fail@plt+0xbb70>
   21534:	cmp	r0, #0
   21538:	bne	21550 <__assert_fail@plt+0xfff8>
   2153c:	ldr	sl, [r4, #4]
   21540:	cmp	sl, r8
   21544:	ble	21348 <__assert_fail@plt+0xfdf0>
   21548:	ldr	r3, [r4, #8]
   2154c:	b	21400 <__assert_fail@plt+0xfea8>
   21550:	mov	r9, r0
   21554:	b	20c60 <__assert_fail@plt+0xf708>
   21558:	mov	r9, r0
   2155c:	ldr	r3, [sp, #64]	; 0x40
   21560:	cmp	r3, #0
   21564:	beq	20c60 <__assert_fail@plt+0xf708>
   21568:	ldr	r0, [sp, #88]	; 0x58
   2156c:	bl	13e1c <__assert_fail@plt+0x28c4>
   21570:	b	20c60 <__assert_fail@plt+0xf708>
   21574:	add	r0, sp, #80	; 0x50
   21578:	str	r1, [sp, #80]	; 0x50
   2157c:	str	r1, [r0, #4]
   21580:	str	r1, [r0, #8]
   21584:	b	2109c <__assert_fail@plt+0xfb44>
   21588:	mov	r2, r4
   2158c:	mov	r0, r6
   21590:	ldr	r3, [sp, #36]	; 0x24
   21594:	bl	1d0c8 <__assert_fail@plt+0xbb70>
   21598:	cmp	r0, #0
   2159c:	bne	21550 <__assert_fail@plt+0xfff8>
   215a0:	cmp	r5, #0
   215a4:	blt	21348 <__assert_fail@plt+0xfdf0>
   215a8:	ldr	r3, [r4, #4]
   215ac:	cmp	r3, #0
   215b0:	str	r3, [sp, #40]	; 0x28
   215b4:	ble	21348 <__assert_fail@plt+0xfdf0>
   215b8:	ldr	sl, [r4, #8]
   215bc:	b	213f4 <__assert_fail@plt+0xfe9c>
   215c0:	mov	r9, #12
   215c4:	b	2155c <__assert_fail@plt+0x10004>
   215c8:	mov	r0, r2
   215cc:	mov	r2, r3
   215d0:	mov	r3, r0
   215d4:	add	r0, r3, #1
   215d8:	cmp	r0, r2
   215dc:	bcc	21438 <__assert_fail@plt+0xfee0>
   215e0:	b	2148c <__assert_fail@plt+0xff34>
   215e4:	add	r8, r8, #1
   215e8:	b	21540 <__assert_fail@plt+0xffe8>
   215ec:	mov	r0, r2
   215f0:	mov	r2, r3
   215f4:	mov	r3, r0
   215f8:	add	r0, r3, #1
   215fc:	cmp	r0, r2
   21600:	bcc	214c4 <__assert_fail@plt+0xff6c>
   21604:	b	21518 <__assert_fail@plt+0xffc0>
   21608:	ldr	r3, [r1]
   2160c:	cmp	r3, r5
   21610:	bne	2118c <__assert_fail@plt+0xfc34>
   21614:	mov	r2, r4
   21618:	b	211b0 <__assert_fail@plt+0xfc58>
   2161c:	mov	r2, #0
   21620:	mov	r3, #0
   21624:	mov	r9, #12
   21628:	strd	r2, [sp, #80]	; 0x50
   2162c:	b	2155c <__assert_fail@plt+0x10004>
   21630:	mov	r9, #0
   21634:	b	21568 <__assert_fail@plt+0x10010>
   21638:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2163c:	ldr	r4, [r1, #8]
   21640:	strd	r6, [sp, #8]
   21644:	mov	r6, #1
   21648:	strd	r8, [sp, #16]
   2164c:	strd	sl, [sp, #24]
   21650:	mov	sl, r0
   21654:	mov	r0, #4
   21658:	str	lr, [sp, #32]
   2165c:	sub	sp, sp, #68	; 0x44
   21660:	mov	fp, r1
   21664:	ldr	r9, [r1, #12]
   21668:	str	r6, [sp, #48]	; 0x30
   2166c:	str	r6, [sp, #52]	; 0x34
   21670:	bl	2cd58 <__assert_fail@plt+0x1b800>
   21674:	cmp	r0, #0
   21678:	str	r0, [sp, #56]	; 0x38
   2167c:	beq	21b44 <__assert_fail@plt+0x105ec>
   21680:	mov	r2, r9
   21684:	add	r3, sp, #48	; 0x30
   21688:	str	r4, [r0]
   2168c:	mov	r1, fp
   21690:	mov	r0, sl
   21694:	bl	20be8 <__assert_fail@plt+0xf690>
   21698:	subs	r4, r0, #0
   2169c:	bne	21b20 <__assert_fail@plt+0x105c8>
   216a0:	cmp	r9, #0
   216a4:	movgt	r5, r6
   216a8:	strgt	r4, [sp, #24]
   216ac:	strgt	r6, [sp, #40]	; 0x28
   216b0:	strgt	r5, [sp, #44]	; 0x2c
   216b4:	ble	21b20 <__assert_fail@plt+0x105c8>
   216b8:	ldr	r0, [fp]
   216bc:	lsl	r3, r9, #2
   216c0:	str	r3, [sp, #20]
   216c4:	ldr	r3, [r0, r9, lsl #2]
   216c8:	cmp	r3, #0
   216cc:	ldreq	r3, [sp, #24]
   216d0:	movne	r3, #0
   216d4:	addeq	r3, r3, #1
   216d8:	mov	r2, r3
   216dc:	str	r3, [sp, #24]
   216e0:	ldr	r3, [sl, #120]	; 0x78
   216e4:	cmp	r3, r2
   216e8:	blt	21b28 <__assert_fail@plt+0x105d0>
   216ec:	mov	r2, #0
   216f0:	ldr	r3, [sl, #100]	; 0x64
   216f4:	sub	r9, r9, #1
   216f8:	str	r2, [sp, #52]	; 0x34
   216fc:	ldr	r2, [sp, #20]
   21700:	add	r3, r3, r2
   21704:	ldr	r5, [r3, #-4]
   21708:	cmp	r5, #0
   2170c:	beq	219c4 <__assert_fail@plt+0x1046c>
   21710:	ldr	r3, [r5, #20]
   21714:	ldr	r7, [sl, #84]	; 0x54
   21718:	cmp	r3, #0
   2171c:	ble	219c4 <__assert_fail@plt+0x1046c>
   21720:	ldr	r3, [r5, #24]
   21724:	add	r2, fp, #24
   21728:	mov	r8, #0
   2172c:	ldr	r1, [r7]
   21730:	str	r2, [sp, #32]
   21734:	add	r2, fp, #20
   21738:	ldr	r4, [r3]
   2173c:	str	r2, [sp, #36]	; 0x24
   21740:	lsl	r6, r4, #3
   21744:	add	r1, r1, r6
   21748:	ldrb	r3, [r1, #6]
   2174c:	str	r6, [sp, #16]
   21750:	mov	r6, r8
   21754:	mov	r8, r5
   21758:	tst	r3, #16
   2175c:	bne	21844 <__assert_fail@plt+0x102ec>
   21760:	mov	r2, r9
   21764:	mov	r0, sl
   21768:	bl	19450 <__assert_fail@plt+0x7ef8>
   2176c:	cmp	r0, #0
   21770:	beq	21810 <__assert_fail@plt+0x102b8>
   21774:	ldr	r3, [fp]
   21778:	ldr	r2, [sp, #20]
   2177c:	ldr	r2, [r3, r2]
   21780:	cmp	r2, #0
   21784:	beq	21810 <__assert_fail@plt+0x102b8>
   21788:	ldr	r3, [r2, #8]
   2178c:	cmp	r3, #0
   21790:	ble	21810 <__assert_fail@plt+0x102b8>
   21794:	ldr	r1, [r7, #12]
   21798:	subs	r3, r3, #1
   2179c:	ldr	ip, [r2, #12]
   217a0:	ldr	r0, [r1, r4, lsl #2]
   217a4:	moveq	r1, r3
   217a8:	beq	21804 <__assert_fail@plt+0x102ac>
   217ac:	mov	r1, #0
   217b0:	add	r2, r3, r1
   217b4:	lsr	r2, r2, #1
   217b8:	ldr	lr, [ip, r2, lsl #2]
   217bc:	cmp	r0, lr
   217c0:	bgt	21934 <__assert_fail@plt+0x103dc>
   217c4:	cmp	r2, r1
   217c8:	bls	21804 <__assert_fail@plt+0x102ac>
   217cc:	add	r3, r2, r1
   217d0:	lsr	r3, r3, #1
   217d4:	ldr	lr, [ip, r3, lsl #2]
   217d8:	cmp	r0, lr
   217dc:	ble	217f4 <__assert_fail@plt+0x1029c>
   217e0:	b	21928 <__assert_fail@plt+0x103d0>
   217e4:	ldr	lr, [ip, r2, lsl #2]
   217e8:	cmp	r0, lr
   217ec:	bgt	21934 <__assert_fail@plt+0x103dc>
   217f0:	mov	r3, r2
   217f4:	add	r2, r1, r3
   217f8:	cmp	r1, r3
   217fc:	lsr	r2, r2, #1
   21800:	bcc	217e4 <__assert_fail@plt+0x1028c>
   21804:	ldr	r3, [ip, r1, lsl #2]
   21808:	cmp	r0, r3
   2180c:	beq	2194c <__assert_fail@plt+0x103f4>
   21810:	ldr	r3, [r8, #20]
   21814:	add	r6, r6, #1
   21818:	cmp	r6, r3
   2181c:	bge	219c4 <__assert_fail@plt+0x1046c>
   21820:	ldr	r3, [r8, #24]
   21824:	ldr	r1, [r7]
   21828:	ldr	r4, [r3, r6, lsl #2]
   2182c:	lsl	r3, r4, #3
   21830:	add	r1, r1, r3
   21834:	str	r3, [sp, #16]
   21838:	ldrb	r3, [r1, #6]
   2183c:	tst	r3, #16
   21840:	beq	21760 <__assert_fail@plt+0x10208>
   21844:	ldr	r1, [fp, #12]
   21848:	mov	r3, sl
   2184c:	mov	r2, r4
   21850:	ldr	r5, [sl, #84]	; 0x54
   21854:	str	r1, [sp, #28]
   21858:	mov	r1, r5
   2185c:	ldr	r0, [r1], #128	; 0x80
   21860:	str	r9, [sp]
   21864:	bl	1bf4c <__assert_fail@plt+0xa9f4>
   21868:	cmp	r0, #0
   2186c:	ble	21a14 <__assert_fail@plt+0x104bc>
   21870:	ldr	r1, [sp, #28]
   21874:	add	r3, r9, r0
   21878:	cmp	r1, r3
   2187c:	blt	21950 <__assert_fail@plt+0x103f8>
   21880:	ldr	r2, [fp]
   21884:	ldr	r3, [r2, r3, lsl #2]
   21888:	cmp	r3, #0
   2188c:	beq	21918 <__assert_fail@plt+0x103c0>
   21890:	ldr	r2, [r3, #8]
   21894:	cmp	r2, #0
   21898:	ble	21918 <__assert_fail@plt+0x103c0>
   2189c:	ldr	r1, [r5, #12]
   218a0:	subs	r2, r2, #1
   218a4:	ldr	lr, [r3, #12]
   218a8:	ldr	ip, [r1, r4, lsl #2]
   218ac:	moveq	r1, r2
   218b0:	beq	2190c <__assert_fail@plt+0x103b4>
   218b4:	mov	r1, #0
   218b8:	add	r3, r2, r1
   218bc:	lsr	r3, r3, #1
   218c0:	ldr	r5, [lr, r3, lsl #2]
   218c4:	cmp	ip, r5
   218c8:	bgt	21a9c <__assert_fail@plt+0x10544>
   218cc:	cmp	r3, r1
   218d0:	bls	2190c <__assert_fail@plt+0x103b4>
   218d4:	add	r2, r3, r1
   218d8:	lsr	r2, r2, #1
   218dc:	ldr	r5, [lr, r2, lsl #2]
   218e0:	cmp	ip, r5
   218e4:	ble	218fc <__assert_fail@plt+0x103a4>
   218e8:	b	21a90 <__assert_fail@plt+0x10538>
   218ec:	ldr	r5, [lr, r3, lsl #2]
   218f0:	cmp	ip, r5
   218f4:	bgt	21a9c <__assert_fail@plt+0x10544>
   218f8:	mov	r2, r3
   218fc:	add	r3, r1, r2
   21900:	cmp	r1, r2
   21904:	lsr	r3, r3, #1
   21908:	bcc	218ec <__assert_fail@plt+0x10394>
   2190c:	ldr	r3, [lr, r1, lsl #2]
   21910:	cmp	ip, r3
   21914:	beq	21950 <__assert_fail@plt+0x103f8>
   21918:	ldr	r1, [r7]
   2191c:	ldr	r3, [sp, #16]
   21920:	add	r1, r1, r3
   21924:	b	21760 <__assert_fail@plt+0x10208>
   21928:	mov	r1, r3
   2192c:	mov	r3, r2
   21930:	mov	r2, r1
   21934:	add	r1, r2, #1
   21938:	cmp	r3, r1
   2193c:	bhi	217b0 <__assert_fail@plt+0x10258>
   21940:	ldr	r3, [ip, r1, lsl #2]
   21944:	cmp	r0, r3
   21948:	bne	21810 <__assert_fail@plt+0x102b8>
   2194c:	mov	r0, #1
   21950:	ldr	r3, [fp, #20]
   21954:	cmp	r3, #0
   21958:	beq	21988 <__assert_fail@plt+0x10430>
   2195c:	ldr	r3, [r7, #12]
   21960:	add	ip, r9, r0
   21964:	mov	r0, sl
   21968:	ldr	r2, [sp, #32]
   2196c:	ldr	r1, [sp, #36]	; 0x24
   21970:	ldr	r3, [r3, r4, lsl #2]
   21974:	str	ip, [sp]
   21978:	stmib	sp, {r4, r9}
   2197c:	bl	1b954 <__assert_fail@plt+0xa3fc>
   21980:	cmp	r0, #0
   21984:	bne	21810 <__assert_fail@plt+0x102b8>
   21988:	ldr	r1, [sp, #48]	; 0x30
   2198c:	cmp	r1, #0
   21990:	beq	21a1c <__assert_fail@plt+0x104c4>
   21994:	ldr	r3, [sp, #52]	; 0x34
   21998:	ldr	r5, [sp, #56]	; 0x38
   2199c:	cmp	r3, #0
   219a0:	bne	21a48 <__assert_fail@plt+0x104f0>
   219a4:	str	r4, [r5]
   219a8:	add	r6, r6, #1
   219ac:	ldr	r3, [sp, #52]	; 0x34
   219b0:	add	r3, r3, #1
   219b4:	str	r3, [sp, #52]	; 0x34
   219b8:	ldr	r3, [r8, #20]
   219bc:	cmp	r6, r3
   219c0:	blt	21820 <__assert_fail@plt+0x102c8>
   219c4:	add	r3, sp, #48	; 0x30
   219c8:	mov	r2, r9
   219cc:	mov	r1, fp
   219d0:	mov	r0, sl
   219d4:	bl	20be8 <__assert_fail@plt+0xf690>
   219d8:	cmp	r0, #0
   219dc:	bne	219e8 <__assert_fail@plt+0x10490>
   219e0:	cmp	r9, #0
   219e4:	bne	216b8 <__assert_fail@plt+0x10160>
   219e8:	mov	r4, r0
   219ec:	ldr	r0, [sp, #56]	; 0x38
   219f0:	bl	13e1c <__assert_fail@plt+0x28c4>
   219f4:	mov	r0, r4
   219f8:	add	sp, sp, #68	; 0x44
   219fc:	ldrd	r4, [sp]
   21a00:	ldrd	r6, [sp, #8]
   21a04:	ldrd	r8, [sp, #16]
   21a08:	ldrd	sl, [sp, #24]
   21a0c:	add	sp, sp, #32
   21a10:	pop	{pc}		; (ldr pc, [sp], #4)
   21a14:	beq	21918 <__assert_fail@plt+0x103c0>
   21a18:	b	21950 <__assert_fail@plt+0x103f8>
   21a1c:	ldr	r3, [sp, #40]	; 0x28
   21a20:	mov	r0, #4
   21a24:	str	r3, [sp, #48]	; 0x30
   21a28:	ldr	r3, [sp, #44]	; 0x2c
   21a2c:	str	r3, [sp, #52]	; 0x34
   21a30:	bl	2cd58 <__assert_fail@plt+0x1b800>
   21a34:	cmp	r0, #0
   21a38:	str	r0, [sp, #56]	; 0x38
   21a3c:	beq	21ae4 <__assert_fail@plt+0x1058c>
   21a40:	str	r4, [r0]
   21a44:	b	21810 <__assert_fail@plt+0x102b8>
   21a48:	cmp	r1, r3
   21a4c:	beq	21af8 <__assert_fail@plt+0x105a0>
   21a50:	ldr	r1, [r5]
   21a54:	mov	r2, r3
   21a58:	cmp	r1, r4
   21a5c:	ble	21aac <__assert_fail@plt+0x10554>
   21a60:	cmp	r3, #0
   21a64:	ble	21a7c <__assert_fail@plt+0x10524>
   21a68:	lsl	r2, r3, #2
   21a6c:	mov	r1, r5
   21a70:	add	r0, r5, #4
   21a74:	bl	11234 <memmove@plt>
   21a78:	mov	r2, #0
   21a7c:	str	r4, [r5, r2, lsl #2]
   21a80:	ldr	r3, [sp, #52]	; 0x34
   21a84:	add	r3, r3, #1
   21a88:	str	r3, [sp, #52]	; 0x34
   21a8c:	b	21810 <__assert_fail@plt+0x102b8>
   21a90:	mov	r1, r2
   21a94:	mov	r2, r3
   21a98:	mov	r3, r1
   21a9c:	add	r1, r3, #1
   21aa0:	cmp	r1, r2
   21aa4:	bcc	218b8 <__assert_fail@plt+0x10360>
   21aa8:	b	2190c <__assert_fail@plt+0x103b4>
   21aac:	sub	r1, r3, #-1073741823	; 0xc0000001
   21ab0:	ldr	r0, [r5, r1, lsl #2]
   21ab4:	lsl	r1, r1, #2
   21ab8:	cmp	r0, r4
   21abc:	ble	21a7c <__assert_fail@plt+0x10524>
   21ac0:	add	r1, r1, #4
   21ac4:	add	r1, r5, r1
   21ac8:	str	r0, [r1], #-4
   21acc:	sub	r3, r3, #1
   21ad0:	ldr	r0, [r1, #-4]
   21ad4:	mov	r2, r3
   21ad8:	cmp	r0, r4
   21adc:	bgt	21ac8 <__assert_fail@plt+0x10570>
   21ae0:	b	21a7c <__assert_fail@plt+0x10524>
   21ae4:	mov	r2, #0
   21ae8:	mov	r3, #0
   21aec:	mov	r4, #12
   21af0:	strd	r2, [sp, #48]	; 0x30
   21af4:	b	219f0 <__assert_fail@plt+0x10498>
   21af8:	lsl	r3, r1, #1
   21afc:	mov	r0, r5
   21b00:	lsl	r1, r1, #3
   21b04:	str	r3, [sp, #48]	; 0x30
   21b08:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   21b0c:	subs	r5, r0, #0
   21b10:	beq	21b4c <__assert_fail@plt+0x105f4>
   21b14:	str	r5, [sp, #56]	; 0x38
   21b18:	ldr	r3, [sp, #52]	; 0x34
   21b1c:	b	21a50 <__assert_fail@plt+0x104f8>
   21b20:	ldr	r0, [sp, #56]	; 0x38
   21b24:	b	219f0 <__assert_fail@plt+0x10498>
   21b28:	mov	r1, #0
   21b2c:	ldr	r2, [sp, #20]
   21b30:	mov	r4, r1
   21b34:	bl	1145c <memset@plt>
   21b38:	ldr	r0, [sp, #56]	; 0x38
   21b3c:	bl	13e1c <__assert_fail@plt+0x28c4>
   21b40:	b	219f4 <__assert_fail@plt+0x1049c>
   21b44:	mov	r4, #12
   21b48:	b	219f4 <__assert_fail@plt+0x1049c>
   21b4c:	mov	r4, #12
   21b50:	ldr	r0, [sp, #56]	; 0x38
   21b54:	b	219f0 <__assert_fail@plt+0x10498>
   21b58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21b5c:	ldr	r3, [r0, #84]	; 0x54
   21b60:	strd	r6, [sp, #8]
   21b64:	ldr	r6, [r1]
   21b68:	strd	r8, [sp, #16]
   21b6c:	strd	sl, [sp, #24]
   21b70:	str	lr, [sp, #32]
   21b74:	sub	sp, sp, #84	; 0x54
   21b78:	ldr	sl, [r0, #40]	; 0x28
   21b7c:	cmp	r6, #0
   21b80:	str	r3, [sp, #24]
   21b84:	ble	220b4 <__assert_fail@plt+0x10b5c>
   21b88:	lsl	r3, sl, #2
   21b8c:	mov	fp, r0
   21b90:	mov	r9, sl
   21b94:	str	r2, [sp, #36]	; 0x24
   21b98:	str	r3, [sp, #44]	; 0x2c
   21b9c:	mov	r3, #0
   21ba0:	str	r1, [sp, #56]	; 0x38
   21ba4:	str	r3, [sp, #16]
   21ba8:	b	21bf0 <__assert_fail@plt+0x10698>
   21bac:	tst	r0, #1
   21bb0:	beq	21bdc <__assert_fail@plt+0x10684>
   21bb4:	tst	r3, #8
   21bb8:	bne	21bdc <__assert_fail@plt+0x10684>
   21bbc:	tst	r3, #32
   21bc0:	beq	21bcc <__assert_fail@plt+0x10674>
   21bc4:	tst	r0, #2
   21bc8:	beq	21bdc <__assert_fail@plt+0x10684>
   21bcc:	tst	r3, #128	; 0x80
   21bd0:	beq	21c60 <__assert_fail@plt+0x10708>
   21bd4:	tst	r0, #8
   21bd8:	bne	21c60 <__assert_fail@plt+0x10708>
   21bdc:	ldr	r3, [sp, #16]
   21be0:	add	r3, r3, #1
   21be4:	cmp	r3, r6
   21be8:	str	r3, [sp, #16]
   21bec:	bge	220b4 <__assert_fail@plt+0x10b5c>
   21bf0:	ldr	r1, [sp, #16]
   21bf4:	ldr	r3, [sp, #36]	; 0x24
   21bf8:	ldr	r2, [r3]
   21bfc:	ldr	r3, [sp, #24]
   21c00:	ldr	sl, [r2, r1, lsl #2]
   21c04:	ldr	r3, [r3]
   21c08:	add	r3, r3, sl, lsl #3
   21c0c:	ldrb	r2, [r3, #4]
   21c10:	cmp	r2, #4
   21c14:	bne	21bdc <__assert_fail@plt+0x10684>
   21c18:	ldr	r4, [r3, #4]
   21c1c:	mov	r3, #65280	; 0xff00
   21c20:	movt	r3, #3
   21c24:	and	r3, r3, r4
   21c28:	cmp	r3, #0
   21c2c:	beq	21c60 <__assert_fail@plt+0x10708>
   21c30:	mov	r1, r9
   21c34:	mov	r0, fp
   21c38:	ldr	r2, [fp, #88]	; 0x58
   21c3c:	bl	19338 <__assert_fail@plt+0x7de0>
   21c40:	ubfx	r3, r4, #8, #10
   21c44:	tst	r3, #4
   21c48:	bne	21bac <__assert_fail@plt+0x10654>
   21c4c:	tst	r3, #8
   21c50:	beq	21bbc <__assert_fail@plt+0x10664>
   21c54:	tst	r0, #1
   21c58:	beq	21bbc <__assert_fail@plt+0x10664>
   21c5c:	b	21bdc <__assert_fail@plt+0x10684>
   21c60:	ldr	ip, [fp, #108]	; 0x6c
   21c64:	cmp	ip, #0
   21c68:	mov	r4, ip
   21c6c:	ble	21ef4 <__assert_fail@plt+0x1099c>
   21c70:	ldr	r1, [fp, #116]	; 0x74
   21c74:	mov	r2, ip
   21c78:	mov	r0, #0
   21c7c:	add	r3, r2, r0
   21c80:	asr	r3, r3, #1
   21c84:	add	lr, r3, r3, lsl #1
   21c88:	add	lr, r1, lr, lsl #3
   21c8c:	ldr	lr, [lr, #4]
   21c90:	cmp	r9, lr
   21c94:	bgt	21ee4 <__assert_fail@plt+0x1098c>
   21c98:	cmp	r3, r0
   21c9c:	ble	21ce8 <__assert_fail@plt+0x10790>
   21ca0:	add	r2, r3, r0
   21ca4:	asr	r2, r2, #1
   21ca8:	add	lr, r2, r2, lsl #1
   21cac:	add	lr, r1, lr, lsl #3
   21cb0:	ldr	lr, [lr, #4]
   21cb4:	cmp	r9, lr
   21cb8:	ble	21cd8 <__assert_fail@plt+0x10780>
   21cbc:	b	21ed8 <__assert_fail@plt+0x10980>
   21cc0:	add	lr, r3, r3, lsl #1
   21cc4:	add	lr, r1, lr, lsl #3
   21cc8:	ldr	lr, [lr, #4]
   21ccc:	cmp	r9, lr
   21cd0:	bgt	21ee4 <__assert_fail@plt+0x1098c>
   21cd4:	mov	r2, r3
   21cd8:	add	r3, r0, r2
   21cdc:	cmp	r0, r2
   21ce0:	asr	r3, r3, #1
   21ce4:	blt	21cc0 <__assert_fail@plt+0x10768>
   21ce8:	cmp	ip, r0
   21cec:	ble	21ef4 <__assert_fail@plt+0x1099c>
   21cf0:	add	r0, r0, r0, lsl #1
   21cf4:	add	r1, r1, r0, lsl #3
   21cf8:	ldr	r3, [r1, #4]
   21cfc:	cmp	r9, r3
   21d00:	bne	21ef4 <__assert_fail@plt+0x1099c>
   21d04:	add	r1, r1, #24
   21d08:	b	21d18 <__assert_fail@plt+0x107c0>
   21d0c:	ldrb	r3, [r1, #-28]	; 0xffffffe4
   21d10:	cmp	r3, #0
   21d14:	beq	21ef4 <__assert_fail@plt+0x1099c>
   21d18:	ldr	r3, [r1, #-24]	; 0xffffffe8
   21d1c:	add	r1, r1, #24
   21d20:	cmp	sl, r3
   21d24:	bne	21d0c <__assert_fail@plt+0x107b4>
   21d28:	lsl	r2, sl, #2
   21d2c:	mov	r3, #0
   21d30:	cmp	r4, ip
   21d34:	str	r2, [sp, #40]	; 0x28
   21d38:	str	r3, [sp, #64]	; 0x40
   21d3c:	bge	22068 <__assert_fail@plt+0x10b10>
   21d40:	add	r3, sl, sl, lsl #1
   21d44:	ldr	r8, [sp, #24]
   21d48:	lsl	r3, r3, #2
   21d4c:	str	r3, [sp, #48]	; 0x30
   21d50:	b	21e38 <__assert_fail@plt+0x108e0>
   21d54:	ldr	r2, [r8, #20]
   21d58:	ldr	r1, [sp, #48]	; 0x30
   21d5c:	add	r2, r2, r1
   21d60:	ldr	r2, [r2, #8]
   21d64:	ldr	r2, [r2]
   21d68:	add	r2, r2, r2, lsl #1
   21d6c:	add	r6, r6, r2, lsl #2
   21d70:	add	r3, r9, r3
   21d74:	mov	r0, fp
   21d78:	ldr	r2, [fp, #88]	; 0x58
   21d7c:	sub	r5, r3, r5
   21d80:	sub	r1, r5, #1
   21d84:	bl	19338 <__assert_fail@plt+0x7de0>
   21d88:	ldr	r2, [sp, #44]	; 0x2c
   21d8c:	mov	r3, r0
   21d90:	ldr	r7, [fp, #100]	; 0x64
   21d94:	ldr	r2, [r7, r2]
   21d98:	ldr	r1, [r7, r5, lsl #2]
   21d9c:	cmp	r2, #0
   21da0:	ldrne	r2, [r2, #8]
   21da4:	cmp	r1, #0
   21da8:	str	r2, [sp, #28]
   21dac:	beq	21e8c <__assert_fail@plt+0x10934>
   21db0:	mov	r2, r6
   21db4:	add	r0, sp, #68	; 0x44
   21db8:	ldr	r1, [r1, #40]	; 0x28
   21dbc:	str	r3, [sp, #32]
   21dc0:	bl	20920 <__assert_fail@plt+0xf3c8>
   21dc4:	cmp	r0, #0
   21dc8:	str	r0, [sp, #64]	; 0x40
   21dcc:	ldr	r3, [sp, #32]
   21dd0:	bne	220a4 <__assert_fail@plt+0x10b4c>
   21dd4:	add	r2, sp, #68	; 0x44
   21dd8:	mov	r1, r8
   21ddc:	ldr	r7, [fp, #100]	; 0x64
   21de0:	add	r0, sp, #64	; 0x40
   21de4:	bl	1e188 <__assert_fail@plt+0xcc30>
   21de8:	str	r0, [r7, r5, lsl #2]
   21dec:	ldr	r0, [sp, #76]	; 0x4c
   21df0:	bl	13e1c <__assert_fail@plt+0x28c4>
   21df4:	ldr	r3, [fp, #100]	; 0x64
   21df8:	ldr	r2, [r3, r5, lsl #2]
   21dfc:	cmp	r2, #0
   21e00:	beq	21eb0 <__assert_fail@plt+0x10958>
   21e04:	ldr	r2, [sp, #20]
   21e08:	cmp	r2, #0
   21e0c:	bne	21e28 <__assert_fail@plt+0x108d0>
   21e10:	ldr	r2, [sp, #44]	; 0x2c
   21e14:	ldr	r3, [r3, r2]
   21e18:	ldr	r2, [sp, #28]
   21e1c:	ldr	r3, [r3, #8]
   21e20:	cmp	r3, r2
   21e24:	bgt	22020 <__assert_fail@plt+0x10ac8>
   21e28:	ldr	ip, [fp, #108]	; 0x6c
   21e2c:	add	r4, r4, #1
   21e30:	cmp	r4, ip
   21e34:	bge	22068 <__assert_fail@plt+0x10b10>
   21e38:	ldr	r3, [fp, #116]	; 0x74
   21e3c:	add	r2, r4, r4, lsl #1
   21e40:	ldr	r1, [r3, r2, lsl #3]
   21e44:	add	r3, r3, r2, lsl #3
   21e48:	cmp	sl, r1
   21e4c:	bne	21e2c <__assert_fail@plt+0x108d4>
   21e50:	ldr	r2, [r3, #4]
   21e54:	cmp	r9, r2
   21e58:	bne	21e2c <__assert_fail@plt+0x108d4>
   21e5c:	ldr	r5, [r3, #8]
   21e60:	ldr	r3, [r3, #12]
   21e64:	ldr	r6, [r8, #24]
   21e68:	subs	r2, r3, r5
   21e6c:	str	r2, [sp, #20]
   21e70:	beq	21d54 <__assert_fail@plt+0x107fc>
   21e74:	ldr	r2, [r8, #12]
   21e78:	ldr	r1, [sp, #40]	; 0x28
   21e7c:	ldr	r2, [r2, r1]
   21e80:	add	r2, r2, r2, lsl #1
   21e84:	add	r6, r6, r2, lsl #2
   21e88:	b	21d70 <__assert_fail@plt+0x10818>
   21e8c:	mov	r2, r6
   21e90:	mov	r1, r8
   21e94:	add	r0, sp, #64	; 0x40
   21e98:	bl	1e188 <__assert_fail@plt+0xcc30>
   21e9c:	ldr	r3, [fp, #100]	; 0x64
   21ea0:	str	r0, [r7, r5, lsl #2]
   21ea4:	ldr	r2, [r3, r5, lsl #2]
   21ea8:	cmp	r2, #0
   21eac:	bne	21e04 <__assert_fail@plt+0x108ac>
   21eb0:	ldr	r0, [sp, #64]	; 0x40
   21eb4:	cmp	r0, #0
   21eb8:	beq	21e04 <__assert_fail@plt+0x108ac>
   21ebc:	add	sp, sp, #84	; 0x54
   21ec0:	ldrd	r4, [sp]
   21ec4:	ldrd	r6, [sp, #8]
   21ec8:	ldrd	r8, [sp, #16]
   21ecc:	ldrd	sl, [sp, #24]
   21ed0:	add	sp, sp, #32
   21ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   21ed8:	mov	r0, r2
   21edc:	mov	r2, r3
   21ee0:	mov	r3, r0
   21ee4:	add	r0, r3, #1
   21ee8:	cmp	r0, r2
   21eec:	blt	21c7c <__assert_fail@plt+0x10724>
   21ef0:	b	21ce8 <__assert_fail@plt+0x10790>
   21ef4:	ldr	r3, [fp, #84]	; 0x54
   21ef8:	ldr	r1, [fp, #124]	; 0x7c
   21efc:	str	r3, [sp, #52]	; 0x34
   21f00:	ldr	r3, [r3]
   21f04:	cmp	r1, #0
   21f08:	ldr	r2, [r3, sl, lsl #3]
   21f0c:	str	r2, [sp, #48]	; 0x30
   21f10:	ble	21d28 <__assert_fail@plt+0x107d0>
   21f14:	mov	r2, #0
   21f18:	str	sl, [sp, #40]	; 0x28
   21f1c:	str	r2, [sp, #28]
   21f20:	ldr	r2, [fp, #4]
   21f24:	str	r9, [sp, #32]
   21f28:	str	r4, [sp, #60]	; 0x3c
   21f2c:	mov	sl, r2
   21f30:	ldr	r0, [sp, #28]
   21f34:	ldr	r2, [fp, #132]	; 0x84
   21f38:	ldr	r4, [r2, r0, lsl #2]
   21f3c:	ldr	r2, [r4, #4]
   21f40:	ldr	r3, [r3, r2, lsl #3]
   21f44:	ldr	r2, [sp, #48]	; 0x30
   21f48:	cmp	r2, r3
   21f4c:	beq	21f70 <__assert_fail@plt+0x10a18>
   21f50:	ldr	r3, [sp, #28]
   21f54:	add	r3, r3, #1
   21f58:	cmp	r3, r1
   21f5c:	str	r3, [sp, #28]
   21f60:	bge	222ac <__assert_fail@plt+0x10d54>
   21f64:	ldr	r3, [sp, #52]	; 0x34
   21f68:	ldr	r3, [r3]
   21f6c:	b	21f30 <__assert_fail@plt+0x109d8>
   21f70:	ldr	r6, [r4]
   21f74:	ldr	ip, [r4, #16]
   21f78:	ldr	r7, [sp, #32]
   21f7c:	cmp	ip, #0
   21f80:	ble	220cc <__assert_fail@plt+0x10b74>
   21f84:	mov	r3, sl
   21f88:	mov	r5, #0
   21f8c:	mov	sl, r7
   21f90:	mov	r7, r6
   21f94:	b	21fa8 <__assert_fail@plt+0x10a50>
   21f98:	ldr	ip, [r4, #16]
   21f9c:	mov	sl, r6
   21fa0:	cmp	r5, ip
   21fa4:	bge	220bc <__assert_fail@plt+0x10b64>
   21fa8:	ldr	r2, [r4, #20]
   21fac:	ldr	r9, [r2, r5, lsl #2]
   21fb0:	ldr	r8, [r9, #4]
   21fb4:	sub	r2, r8, r7
   21fb8:	cmp	r2, #0
   21fbc:	add	r6, r2, sl
   21fc0:	ble	21fec <__assert_fail@plt+0x10a94>
   21fc4:	ldr	r1, [fp, #28]
   21fc8:	cmp	r1, r6
   21fcc:	blt	22074 <__assert_fail@plt+0x10b1c>
   21fd0:	add	r1, r3, r7
   21fd4:	add	r0, r3, sl
   21fd8:	str	r3, [sp, #20]
   21fdc:	bl	112b8 <memcmp@plt>
   21fe0:	cmp	r0, #0
   21fe4:	ldr	r3, [sp, #20]
   21fe8:	bne	22254 <__assert_fail@plt+0x10cfc>
   21fec:	ldr	r1, [sp, #32]
   21ff0:	mov	r2, r9
   21ff4:	mov	r0, fp
   21ff8:	add	r5, r5, #1
   21ffc:	mov	r7, r8
   22000:	ldr	r3, [sp, #40]	; 0x28
   22004:	str	r1, [sp]
   22008:	mov	r1, r4
   2200c:	bl	1fe28 <__assert_fail@plt+0xe8d0>
   22010:	cmp	r0, #1
   22014:	ldr	r3, [fp, #4]
   22018:	bls	21f98 <__assert_fail@plt+0x10a40>
   2201c:	b	21ebc <__assert_fail@plt+0x10964>
   22020:	add	r5, r6, #4
   22024:	add	r6, r6, #8
   22028:	mov	r2, r6
   2202c:	mov	r1, r5
   22030:	mov	r3, r9
   22034:	mov	r0, fp
   22038:	bl	1a1ac <__assert_fail@plt+0x8c54>
   2203c:	cmp	r0, #0
   22040:	str	r0, [sp, #64]	; 0x40
   22044:	bne	21ebc <__assert_fail@plt+0x10964>
   22048:	mov	r2, r6
   2204c:	mov	r1, r5
   22050:	mov	r0, fp
   22054:	bl	21b58 <__assert_fail@plt+0x10600>
   22058:	cmp	r0, #0
   2205c:	str	r0, [sp, #64]	; 0x40
   22060:	beq	21e28 <__assert_fail@plt+0x108d0>
   22064:	b	21ebc <__assert_fail@plt+0x10964>
   22068:	ldr	r3, [sp, #56]	; 0x38
   2206c:	ldr	r6, [r3]
   22070:	b	21bdc <__assert_fail@plt+0x10684>
   22074:	ldr	lr, [fp, #48]	; 0x30
   22078:	mov	r1, r6
   2207c:	mov	r0, fp
   22080:	str	r2, [sp, #20]
   22084:	cmp	lr, r6
   22088:	blt	222f0 <__assert_fail@plt+0x10d98>
   2208c:	bl	1cc28 <__assert_fail@plt+0xb6d0>
   22090:	cmp	r0, #0
   22094:	bne	21ebc <__assert_fail@plt+0x10964>
   22098:	ldr	r3, [fp, #4]
   2209c:	ldr	r2, [sp, #20]
   220a0:	b	21fd0 <__assert_fail@plt+0x10a78>
   220a4:	ldr	r0, [sp, #76]	; 0x4c
   220a8:	bl	13e1c <__assert_fail@plt+0x28c4>
   220ac:	ldr	r0, [sp, #64]	; 0x40
   220b0:	b	21ebc <__assert_fail@plt+0x10964>
   220b4:	mov	r0, #0
   220b8:	b	21ebc <__assert_fail@plt+0x10964>
   220bc:	mov	r9, r6
   220c0:	mov	sl, r3
   220c4:	add	r6, r8, #1
   220c8:	mov	r7, r9
   220cc:	ldr	r3, [sp, #32]
   220d0:	cmp	r3, r6
   220d4:	blt	22224 <__assert_fail@plt+0x10ccc>
   220d8:	ldr	r8, [sp, #48]	; 0x30
   220dc:	mov	r9, r3
   220e0:	ldr	r3, [r4]
   220e4:	sub	r3, r6, r3
   220e8:	cmp	r3, #0
   220ec:	ble	22118 <__assert_fail@plt+0x10bc0>
   220f0:	ldr	r3, [fp, #28]
   220f4:	cmp	r3, r7
   220f8:	ble	22280 <__assert_fail@plt+0x10d28>
   220fc:	add	r5, r7, #1
   22100:	add	r3, sl, r6
   22104:	ldrb	r2, [sl, r7]
   22108:	ldrb	r3, [r3, #-1]
   2210c:	cmp	r2, r3
   22110:	bne	22224 <__assert_fail@plt+0x10ccc>
   22114:	mov	r7, r5
   22118:	ldr	r3, [fp, #100]	; 0x64
   2211c:	ldr	r3, [r3, r6, lsl #2]
   22120:	cmp	r3, #0
   22124:	beq	22218 <__assert_fail@plt+0x10cc0>
   22128:	ldr	ip, [r3, #8]
   2212c:	cmp	ip, #0
   22130:	ble	22218 <__assert_fail@plt+0x10cc0>
   22134:	ldr	r2, [r3, #12]
   22138:	mov	r3, #0
   2213c:	ldr	r1, [sp, #52]	; 0x34
   22140:	sub	r2, r2, #4
   22144:	ldr	r0, [r1]
   22148:	b	22154 <__assert_fail@plt+0x10bfc>
   2214c:	cmp	ip, r3
   22150:	beq	22218 <__assert_fail@plt+0x10cc0>
   22154:	ldr	r5, [r2, #4]!
   22158:	add	r3, r3, #1
   2215c:	add	r1, r0, r5, lsl #3
   22160:	ldrb	r1, [r1, #4]
   22164:	cmp	r1, #9
   22168:	bne	2214c <__assert_fail@plt+0x10bf4>
   2216c:	ldr	r1, [r0, r5, lsl #3]
   22170:	cmp	r8, r1
   22174:	bne	2214c <__assert_fail@plt+0x10bf4>
   22178:	cmn	r5, #1
   2217c:	beq	22218 <__assert_fail@plt+0x10cc0>
   22180:	ldr	r3, [r4]
   22184:	ldr	r1, [r4, #8]
   22188:	cmp	r1, #0
   2218c:	beq	2222c <__assert_fail@plt+0x10cd4>
   22190:	mov	ip, #9
   22194:	mov	r0, fp
   22198:	ldr	r2, [r4, #4]
   2219c:	stm	sp, {r5, r6, ip}
   221a0:	bl	1f66c <__assert_fail@plt+0xe114>
   221a4:	cmp	r0, #1
   221a8:	beq	22218 <__assert_fail@plt+0x10cc0>
   221ac:	cmp	r0, #0
   221b0:	bne	21ebc <__assert_fail@plt+0x10964>
   221b4:	ldrd	r2, [r4, #12]
   221b8:	cmp	r3, r2
   221bc:	beq	222c8 <__assert_fail@plt+0x10d70>
   221c0:	mov	r1, #20
   221c4:	mov	r0, #1
   221c8:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   221cc:	subs	ip, r0, #0
   221d0:	beq	222c0 <__assert_fail@plt+0x10d68>
   221d4:	ldr	lr, [r4, #16]
   221d8:	mov	r2, ip
   221dc:	mov	r1, r4
   221e0:	mov	r0, fp
   221e4:	ldr	r3, [sp, #40]	; 0x28
   221e8:	add	sl, lr, #1
   221ec:	str	sl, [sp, #20]
   221f0:	ldr	sl, [r4, #20]
   221f4:	str	ip, [sl, lr, lsl #2]
   221f8:	stm	ip, {r5, r6}
   221fc:	ldr	ip, [sp, #20]
   22200:	str	ip, [r4, #16]
   22204:	str	r9, [sp]
   22208:	bl	1fe28 <__assert_fail@plt+0xe8d0>
   2220c:	cmp	r0, #1
   22210:	ldr	sl, [fp, #4]
   22214:	bhi	21ebc <__assert_fail@plt+0x10964>
   22218:	add	r6, r6, #1
   2221c:	cmp	r9, r6
   22220:	bge	220e0 <__assert_fail@plt+0x10b88>
   22224:	ldr	r1, [fp, #124]	; 0x7c
   22228:	b	21f50 <__assert_fail@plt+0x109f8>
   2222c:	sub	r3, r6, r3
   22230:	mov	r0, #12
   22234:	add	r1, r3, #1
   22238:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   2223c:	cmp	r0, #0
   22240:	mov	r1, r0
   22244:	str	r0, [r4, #8]
   22248:	beq	222c0 <__assert_fail@plt+0x10d68>
   2224c:	ldr	r3, [r4]
   22250:	b	22190 <__assert_fail@plt+0x10c38>
   22254:	ldr	ip, [r4, #16]
   22258:	mov	r6, r7
   2225c:	mov	r7, sl
   22260:	mov	sl, r3
   22264:	cmp	r5, ip
   22268:	blt	22224 <__assert_fail@plt+0x10ccc>
   2226c:	cmp	r5, #0
   22270:	ble	220cc <__assert_fail@plt+0x10b74>
   22274:	mov	r9, r7
   22278:	mov	r8, r6
   2227c:	b	220c4 <__assert_fail@plt+0x10b6c>
   22280:	ldr	r3, [fp, #48]	; 0x30
   22284:	cmp	r3, r7
   22288:	ble	22224 <__assert_fail@plt+0x10ccc>
   2228c:	add	r5, r7, #1
   22290:	mov	r0, fp
   22294:	mov	r1, r5
   22298:	bl	1ca38 <__assert_fail@plt+0xb4e0>
   2229c:	cmp	r0, #0
   222a0:	bne	21ebc <__assert_fail@plt+0x10964>
   222a4:	ldr	sl, [fp, #4]
   222a8:	b	22100 <__assert_fail@plt+0x10ba8>
   222ac:	ldr	r9, [sp, #32]
   222b0:	ldr	sl, [sp, #40]	; 0x28
   222b4:	ldr	r4, [sp, #60]	; 0x3c
   222b8:	ldr	ip, [fp, #108]	; 0x6c
   222bc:	b	21d28 <__assert_fail@plt+0x107d0>
   222c0:	mov	r0, #12
   222c4:	b	21ebc <__assert_fail@plt+0x10964>
   222c8:	lsl	r3, r3, #1
   222cc:	ldr	r0, [r4, #20]
   222d0:	add	sl, r3, #1
   222d4:	lsl	r1, sl, #2
   222d8:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   222dc:	cmp	r0, #0
   222e0:	beq	222c0 <__assert_fail@plt+0x10d68>
   222e4:	str	sl, [r4, #12]
   222e8:	str	r0, [r4, #20]
   222ec:	b	221c0 <__assert_fail@plt+0x10c68>
   222f0:	mov	r6, r7
   222f4:	mov	r7, sl
   222f8:	mov	sl, r3
   222fc:	b	22264 <__assert_fail@plt+0x10d0c>
   22300:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22304:	mov	r4, r1
   22308:	ldr	r5, [r1, #40]	; 0x28
   2230c:	ldr	r3, [r1, #104]	; 0x68
   22310:	strd	r6, [sp, #8]
   22314:	strd	r8, [sp, #16]
   22318:	str	sl, [sp, #24]
   2231c:	mov	sl, r0
   22320:	str	lr, [sp, #28]
   22324:	sub	sp, sp, #16
   22328:	cmp	r3, r5
   2232c:	ldr	r8, [r1, #84]	; 0x54
   22330:	ldr	r9, [r1, #100]	; 0x64
   22334:	bge	22370 <__assert_fail@plt+0x10e18>
   22338:	mov	r6, r2
   2233c:	str	r2, [r9, r5, lsl #2]
   22340:	str	r5, [r1, #104]	; 0x68
   22344:	ldr	r3, [r8, #76]	; 0x4c
   22348:	cmp	r3, #0
   2234c:	bne	22438 <__assert_fail@plt+0x10ee0>
   22350:	mov	r0, r6
   22354:	add	sp, sp, #16
   22358:	ldrd	r4, [sp]
   2235c:	ldrd	r6, [sp, #8]
   22360:	ldrd	r8, [sp, #16]
   22364:	ldr	sl, [sp, #24]
   22368:	add	sp, sp, #28
   2236c:	pop	{pc}		; (ldr pc, [sp], #4)
   22370:	ldr	r3, [r9, r5, lsl #2]
   22374:	cmp	r3, #0
   22378:	moveq	r6, r2
   2237c:	streq	r2, [r9, r5, lsl #2]
   22380:	beq	22344 <__assert_fail@plt+0x10dec>
   22384:	cmp	r2, #0
   22388:	ldr	r3, [r3, #40]	; 0x28
   2238c:	beq	223f8 <__assert_fail@plt+0x10ea0>
   22390:	ldr	r7, [r2, #40]	; 0x28
   22394:	add	r0, sp, #4
   22398:	mov	r2, r3
   2239c:	mov	r1, r7
   223a0:	bl	20920 <__assert_fail@plt+0xf3c8>
   223a4:	cmp	r0, #0
   223a8:	str	r0, [sl]
   223ac:	bne	2249c <__assert_fail@plt+0x10f44>
   223b0:	ldr	r1, [r4, #40]	; 0x28
   223b4:	mov	r0, r4
   223b8:	ldr	r2, [r4, #88]	; 0x58
   223bc:	sub	r1, r1, #1
   223c0:	bl	19338 <__assert_fail@plt+0x7de0>
   223c4:	ldr	r9, [r4, #100]	; 0x64
   223c8:	mov	r3, r0
   223cc:	add	r2, sp, #4
   223d0:	mov	r1, r8
   223d4:	mov	r0, sl
   223d8:	bl	1e188 <__assert_fail@plt+0xcc30>
   223dc:	cmp	r7, #0
   223e0:	mov	r6, r0
   223e4:	str	r0, [r9, r5, lsl #2]
   223e8:	beq	22344 <__assert_fail@plt+0x10dec>
   223ec:	ldr	r0, [sp, #12]
   223f0:	bl	13e1c <__assert_fail@plt+0x28c4>
   223f4:	b	22344 <__assert_fail@plt+0x10dec>
   223f8:	ldrd	r6, [r3]
   223fc:	sub	r1, r5, #1
   22400:	mov	r0, r4
   22404:	ldr	r2, [r4, #88]	; 0x58
   22408:	strd	r6, [sp, #4]
   2240c:	ldr	r3, [r3, #8]
   22410:	str	r3, [sp, #12]
   22414:	bl	19338 <__assert_fail@plt+0x7de0>
   22418:	mov	r3, r0
   2241c:	add	r2, sp, #4
   22420:	mov	r1, r8
   22424:	mov	r0, sl
   22428:	bl	1e188 <__assert_fail@plt+0xcc30>
   2242c:	mov	r6, r0
   22430:	str	r0, [r9, r5, lsl #2]
   22434:	b	22344 <__assert_fail@plt+0x10dec>
   22438:	cmp	r6, #0
   2243c:	beq	2249c <__assert_fail@plt+0x10f44>
   22440:	add	r7, r6, #8
   22444:	add	r8, r6, #12
   22448:	mov	r1, r7
   2244c:	mov	r2, r8
   22450:	mov	r3, r5
   22454:	mov	r0, r4
   22458:	bl	1a1ac <__assert_fail@plt+0x8c54>
   2245c:	cmp	r0, #0
   22460:	str	r0, [sl]
   22464:	bne	2249c <__assert_fail@plt+0x10f44>
   22468:	ldrb	r3, [r6, #52]	; 0x34
   2246c:	tst	r3, #64	; 0x40
   22470:	beq	22350 <__assert_fail@plt+0x10df8>
   22474:	mov	r2, r8
   22478:	mov	r1, r7
   2247c:	mov	r0, r4
   22480:	bl	21b58 <__assert_fail@plt+0x10600>
   22484:	cmp	r0, #0
   22488:	str	r0, [sl]
   2248c:	bne	2249c <__assert_fail@plt+0x10f44>
   22490:	ldr	r3, [r4, #100]	; 0x64
   22494:	ldr	r6, [r3, r5, lsl #2]
   22498:	b	22350 <__assert_fail@plt+0x10df8>
   2249c:	mov	r6, #0
   224a0:	b	22350 <__assert_fail@plt+0x10df8>
   224a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   224a8:	mov	r4, r0
   224ac:	mov	r5, r3
   224b0:	strd	r6, [sp, #8]
   224b4:	strd	r8, [sp, #16]
   224b8:	strd	sl, [sp, #24]
   224bc:	str	lr, [sp, #32]
   224c0:	sub	sp, sp, #428	; 0x1ac
   224c4:	ldr	sl, [r0]
   224c8:	str	r0, [sp, #32]
   224cc:	add	r0, sp, #144	; 0x90
   224d0:	str	r1, [sp, #56]	; 0x38
   224d4:	mov	r1, #0
   224d8:	str	r2, [sp, #72]	; 0x48
   224dc:	mov	r2, #136	; 0x88
   224e0:	ldr	r6, [sp, #464]	; 0x1d0
   224e4:	bl	1145c <memset@plt>
   224e8:	ldr	r2, [r4, #16]
   224ec:	cmp	r2, #0
   224f0:	str	r2, [sp, #48]	; 0x30
   224f4:	str	sl, [sp, #228]	; 0xe4
   224f8:	beq	22514 <__assert_fail@plt+0x10fbc>
   224fc:	ldrb	r2, [r4, #28]
   22500:	subs	r3, r5, r6
   22504:	movne	r3, #1
   22508:	ands	r3, r3, r2, lsr #3
   2250c:	streq	r3, [sp, #48]	; 0x30
   22510:	bne	228b8 <__assert_fail@plt+0x11360>
   22514:	ldr	r3, [sp, #32]
   22518:	ldr	r2, [sp, #472]	; 0x1d8
   2251c:	ldr	r3, [r3, #24]
   22520:	cmp	r3, r2
   22524:	movcs	r3, #0
   22528:	strcs	r3, [sp, #108]	; 0x6c
   2252c:	bcs	2254c <__assert_fail@plt+0x10ff4>
   22530:	sub	r2, r2, #1
   22534:	sub	r1, r3, r2
   22538:	sub	r3, r2, r3
   2253c:	str	r3, [sp, #108]	; 0x6c
   22540:	ldr	r3, [sp, #472]	; 0x1d8
   22544:	add	r3, r3, r1
   22548:	str	r3, [sp, #472]	; 0x1d8
   2254c:	ldr	ip, [sp, #32]
   22550:	ldr	r3, [ip, #8]
   22554:	cmp	r3, #0
   22558:	beq	2319c <__assert_fail@plt+0x11c44>
   2255c:	ldr	r3, [sl, #36]	; 0x24
   22560:	cmp	r3, #0
   22564:	beq	2319c <__assert_fail@plt+0x11c44>
   22568:	ldr	r2, [sl, #40]	; 0x28
   2256c:	cmp	r2, #0
   22570:	beq	2319c <__assert_fail@plt+0x11c44>
   22574:	ldr	r0, [sl, #44]	; 0x2c
   22578:	cmp	r0, #0
   2257c:	beq	2319c <__assert_fail@plt+0x11c44>
   22580:	ldr	r1, [sl, #48]	; 0x30
   22584:	cmp	r1, #0
   22588:	beq	2319c <__assert_fail@plt+0x11c44>
   2258c:	ldr	r3, [r3, #8]
   22590:	cmp	r3, #0
   22594:	bne	225d8 <__assert_fail@plt+0x11080>
   22598:	ldr	r3, [r2, #8]
   2259c:	cmp	r3, #0
   225a0:	bne	225d8 <__assert_fail@plt+0x11080>
   225a4:	ldr	r3, [r0, #8]
   225a8:	cmp	r3, #0
   225ac:	beq	225bc <__assert_fail@plt+0x11064>
   225b0:	ldrsb	r3, [ip, #28]
   225b4:	cmp	r3, #0
   225b8:	blt	225d8 <__assert_fail@plt+0x11080>
   225bc:	adds	r6, r6, #0
   225c0:	movne	r6, #1
   225c4:	cmp	r5, #0
   225c8:	moveq	r6, #0
   225cc:	cmp	r6, #0
   225d0:	bne	2319c <__assert_fail@plt+0x11c44>
   225d4:	mov	r5, r6
   225d8:	ldr	r3, [sp, #472]	; 0x1d8
   225dc:	cmp	r3, #0
   225e0:	bne	228a8 <__assert_fail@plt+0x11350>
   225e4:	ldr	r3, [sl, #76]	; 0x4c
   225e8:	adds	r3, r3, #0
   225ec:	movne	r3, #1
   225f0:	str	r3, [sp, #20]
   225f4:	str	r3, [sp, #60]	; 0x3c
   225f8:	ldr	r8, [sp, #32]
   225fc:	add	r0, sp, #144	; 0x90
   22600:	ldr	r2, [sp, #56]	; 0x38
   22604:	ldr	r3, [sl, #8]
   22608:	ldr	ip, [r8, #12]
   2260c:	str	r2, [sp, #144]	; 0x90
   22610:	ldr	lr, [sl, #92]	; 0x5c
   22614:	add	r3, r3, #1
   22618:	ldrb	r2, [sl, #88]	; 0x58
   2261c:	and	r4, ip, #4194304	; 0x400000
   22620:	ubfx	ip, ip, #22, #1
   22624:	ldr	r8, [r8, #20]
   22628:	cmp	r3, lr
   2262c:	ldr	r7, [sp, #72]	; 0x48
   22630:	movlt	r3, lr
   22634:	str	r8, [sp, #80]	; 0x50
   22638:	strb	ip, [sp, #216]	; 0xd8
   2263c:	ubfx	ip, r2, #2, #1
   22640:	add	r1, r7, #1
   22644:	ubfx	r2, r2, #3, #1
   22648:	str	lr, [sp, #224]	; 0xe0
   2264c:	orrs	lr, r8, r4
   22650:	str	r7, [sp, #188]	; 0xbc
   22654:	movne	lr, #1
   22658:	moveq	lr, #0
   2265c:	str	r7, [sp, #192]	; 0xc0
   22660:	cmp	r3, r1
   22664:	str	r7, [sp, #196]	; 0xc4
   22668:	movlt	r1, r3
   2266c:	str	r7, [sp, #200]	; 0xc8
   22670:	str	r8, [sp, #208]	; 0xd0
   22674:	strb	ip, [sp, #217]	; 0xd9
   22678:	strb	r2, [sp, #218]	; 0xda
   2267c:	strb	lr, [sp, #219]	; 0xdb
   22680:	bl	18064 <__assert_fail@plt+0x6b0c>
   22684:	subs	r3, r0, #0
   22688:	str	r3, [sp, #36]	; 0x24
   2268c:	bne	22d70 <__assert_fail@plt+0x11818>
   22690:	ldrb	r3, [sl, #88]	; 0x58
   22694:	add	r1, sl, #96	; 0x60
   22698:	ldrb	r2, [sp, #219]	; 0xdb
   2269c:	str	r1, [sp, #212]	; 0xd4
   226a0:	ubfx	r3, r3, #4, #1
   226a4:	cmp	r2, #0
   226a8:	strb	r3, [sp, #222]	; 0xde
   226ac:	bne	226c4 <__assert_fail@plt+0x1116c>
   226b0:	ldr	r3, [sl, #92]	; 0x5c
   226b4:	ldr	r2, [sp, #56]	; 0x38
   226b8:	cmp	r3, #1
   226bc:	str	r2, [sp, #148]	; 0x94
   226c0:	ble	23480 <__assert_fail@plt+0x11f28>
   226c4:	mov	r2, #0
   226c8:	ldr	r3, [sp, #32]
   226cc:	mvn	r1, #0
   226d0:	str	r2, [sp, #172]	; 0xac
   226d4:	str	r2, [sp, #176]	; 0xb0
   226d8:	ldr	r2, [sp, #468]	; 0x1d4
   226dc:	ldrb	r3, [r3, #28]
   226e0:	str	r2, [sp, #196]	; 0xc4
   226e4:	str	r2, [sp, #200]	; 0xc8
   226e8:	ubfx	r3, r3, #7, #1
   226ec:	strb	r3, [sp, #221]	; 0xdd
   226f0:	ldr	r7, [sl, #76]	; 0x4c
   226f4:	str	r1, [sp, #236]	; 0xec
   226f8:	ldr	r3, [sp, #480]	; 0x1e0
   226fc:	lsl	r4, r7, #1
   22700:	cmp	r4, #0
   22704:	str	r3, [sp, #232]	; 0xe8
   22708:	ble	22748 <__assert_fail@plt+0x111f0>
   2270c:	movw	r3, #43690	; 0xaaaa
   22710:	movt	r3, #2730	; 0xaaa
   22714:	cmp	r4, r3
   22718:	bgt	235bc <__assert_fail@plt+0x12064>
   2271c:	add	r0, r4, r7, lsl #2
   22720:	lsl	r0, r0, #3
   22724:	bl	2cd58 <__assert_fail@plt+0x1b800>
   22728:	str	r0, [sp, #260]	; 0x104
   2272c:	lsl	r0, r7, #3
   22730:	bl	2cd58 <__assert_fail@plt+0x1b800>
   22734:	ldr	r3, [sp, #260]	; 0x104
   22738:	str	r0, [sp, #276]	; 0x114
   2273c:	cmp	r0, #0
   22740:	cmpne	r3, #0
   22744:	beq	235bc <__assert_fail@plt+0x12064>
   22748:	ldr	r2, [sp, #472]	; 0x1d8
   2274c:	mov	r3, #1
   22750:	str	r4, [sp, #256]	; 0x100
   22754:	str	r3, [sp, #264]	; 0x108
   22758:	str	r4, [sp, #272]	; 0x110
   2275c:	cmp	r2, r3
   22760:	bls	23550 <__assert_fail@plt+0x11ff8>
   22764:	ldr	r0, [sp, #180]	; 0xb4
   22768:	cmn	r0, #-1073741822	; 0xc0000002
   2276c:	bhi	235bc <__assert_fail@plt+0x12064>
   22770:	add	r0, r0, #1
   22774:	lsl	r0, r0, #2
   22778:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2277c:	cmp	r0, #0
   22780:	mov	r4, r0
   22784:	str	r0, [sp, #244]	; 0xf4
   22788:	beq	231c8 <__assert_fail@plt+0x11c70>
   2278c:	ldr	r3, [sp, #480]	; 0x1e0
   22790:	str	r5, [sp, #112]	; 0x70
   22794:	ldr	r2, [sl, #92]	; 0x5c
   22798:	tst	r3, #1
   2279c:	movne	r3, #4
   227a0:	moveq	r3, #6
   227a4:	cmp	r5, r6
   227a8:	str	r2, [sp, #88]	; 0x58
   227ac:	str	r3, [sp, #204]	; 0xcc
   227b0:	movge	r3, r5
   227b4:	movlt	r3, r6
   227b8:	mvngt	r2, #0
   227bc:	movle	r2, #1
   227c0:	str	r3, [sp, #64]	; 0x40
   227c4:	ldr	r3, [sp, #48]	; 0x30
   227c8:	str	r2, [sp, #96]	; 0x60
   227cc:	movlt	r2, r5
   227d0:	movge	r2, r6
   227d4:	str	r2, [sp, #76]	; 0x4c
   227d8:	cmp	r3, #0
   227dc:	beq	235cc <__assert_fail@plt+0x12074>
   227e0:	ldr	r3, [sp, #88]	; 0x58
   227e4:	cmp	r3, #1
   227e8:	moveq	r3, #4
   227ec:	beq	2280c <__assert_fail@plt+0x112b4>
   227f0:	ldr	r3, [sp, #32]
   227f4:	ldr	r2, [sp, #80]	; 0x50
   227f8:	ldr	r3, [r3, #12]
   227fc:	and	r3, r3, #4194304	; 0x400000
   22800:	orrs	r3, r2, r3
   22804:	moveq	r3, #4
   22808:	movne	r3, #0
   2280c:	ldr	r2, [sp, #36]	; 0x24
   22810:	cmp	r5, r6
   22814:	movle	r2, #2
   22818:	ldr	r1, [sp, #80]	; 0x50
   2281c:	cmp	r1, #0
   22820:	orrne	r3, r3, #1
   22824:	orr	r3, r3, r2
   22828:	ldr	r1, [sp, #64]	; 0x40
   2282c:	ldr	r2, [sp, #76]	; 0x4c
   22830:	cmp	r5, r2
   22834:	movge	r2, #0
   22838:	movlt	r2, #1
   2283c:	cmp	r5, r1
   22840:	orrgt	r2, r2, #1
   22844:	cmp	r2, #0
   22848:	bne	22d68 <__assert_fail@plt+0x11810>
   2284c:	add	r2, sp, #424	; 0x1a8
   22850:	cmp	r5, r6
   22854:	str	sl, [sp, #68]	; 0x44
   22858:	sub	r3, r3, #4
   2285c:	suble	r2, r2, #312	; 0x138
   22860:	movgt	r2, #0
   22864:	str	r3, [sp, #92]	; 0x5c
   22868:	adds	r3, r2, #0
   2286c:	movne	r3, #1
   22870:	str	r2, [sp, #100]	; 0x64
   22874:	str	r3, [sp, #104]	; 0x68
   22878:	mov	r3, #65280	; 0xff00
   2287c:	movt	r3, #3
   22880:	str	r3, [sp, #52]	; 0x34
   22884:	ldr	r3, [sp, #92]	; 0x5c
   22888:	cmp	r3, #4
   2288c:	ldrls	pc, [pc, r3, lsl #2]
   22890:	b	235ec <__assert_fail@plt+0x12094>
   22894:	andeq	r2, r2, r0, ror #27
   22898:	andeq	r2, r2, r0, ror #27
   2289c:	andeq	r2, r2, r8, ror sp
   228a0:			; <UNDEFINED> instruction: 0x00022cb4
   228a4:	ldrdeq	r2, [r2], -r0
   228a8:	mov	r3, #1
   228ac:	str	r3, [sp, #20]
   228b0:	str	r3, [sp, #60]	; 0x3c
   228b4:	b	225f8 <__assert_fail@plt+0x110a0>
   228b8:	ldr	r3, [sp, #48]	; 0x30
   228bc:	tst	r2, #1
   228c0:	movne	r3, #0
   228c4:	str	r3, [sp, #48]	; 0x30
   228c8:	b	22514 <__assert_fail@plt+0x10fbc>
   228cc:	str	r5, [sp, #112]	; 0x70
   228d0:	mov	r1, r5
   228d4:	add	r0, sp, #144	; 0x90
   228d8:	ldr	r2, [sp, #480]	; 0x1e0
   228dc:	bl	19588 <__assert_fail@plt+0x8030>
   228e0:	subs	r3, r0, #0
   228e4:	str	r3, [sp, #36]	; 0x24
   228e8:	bne	23620 <__assert_fail@plt+0x120c8>
   228ec:	ldr	r3, [sp, #88]	; 0x58
   228f0:	cmp	r3, #1
   228f4:	beq	22914 <__assert_fail@plt+0x113bc>
   228f8:	ldr	r3, [sp, #172]	; 0xac
   228fc:	cmp	r3, #0
   22900:	beq	22914 <__assert_fail@plt+0x113bc>
   22904:	ldr	r3, [sp, #152]	; 0x98
   22908:	ldr	r3, [r3]
   2290c:	cmn	r3, #1
   22910:	beq	2314c <__assert_fail@plt+0x11bf4>
   22914:	ldr	r4, [sp, #228]	; 0xe4
   22918:	mov	r3, #0
   2291c:	mov	r0, #0
   22920:	mov	r1, #0
   22924:	ldr	sl, [r4, #36]	; 0x24
   22928:	str	r3, [sp, #120]	; 0x78
   2292c:	strd	r0, [sp, #248]	; 0xf8
   22930:	str	r3, [sp, #264]	; 0x108
   22934:	ldr	r3, [sp, #184]	; 0xb8
   22938:	mov	r2, r3
   2293c:	ldrsb	r3, [sl, #52]	; 0x34
   22940:	str	r2, [sp, #12]
   22944:	cmp	r3, #0
   22948:	bge	22988 <__assert_fail@plt+0x11430>
   2294c:	sub	r1, r2, #1
   22950:	add	r0, sp, #144	; 0x90
   22954:	ldr	r2, [sp, #232]	; 0xe8
   22958:	bl	19338 <__assert_fail@plt+0x7de0>
   2295c:	tst	r0, #1
   22960:	bne	2357c <__assert_fail@plt+0x12024>
   22964:	cmp	r0, #0
   22968:	beq	22988 <__assert_fail@plt+0x11430>
   2296c:	and	r3, r0, #6
   22970:	cmp	r3, #6
   22974:	beq	23760 <__assert_fail@plt+0x12208>
   22978:	tst	r0, #2
   2297c:	bne	23660 <__assert_fail@plt+0x12108>
   22980:	tst	r0, #4
   22984:	bne	23688 <__assert_fail@plt+0x12130>
   22988:	ldr	r3, [sp, #244]	; 0xf4
   2298c:	cmp	r3, #0
   22990:	beq	23434 <__assert_fail@plt+0x11edc>
   22994:	ldr	r2, [r4, #76]	; 0x4c
   22998:	ldr	r1, [sp, #12]
   2299c:	cmp	r2, #0
   229a0:	str	sl, [r3, r1, lsl #2]
   229a4:	bne	2371c <__assert_fail@plt+0x121c4>
   229a8:	ldrb	r3, [sl, #52]	; 0x34
   229ac:	ldr	r2, [sp, #104]	; 0x68
   229b0:	str	r2, [sp, #16]
   229b4:	ubfx	r3, r3, #4, #1
   229b8:	cmp	r3, #0
   229bc:	mvneq	fp, #0
   229c0:	streq	r3, [sp, #28]
   229c4:	bne	2362c <__assert_fail@plt+0x120d4>
   229c8:	ldr	r3, [sp, #100]	; 0x64
   229cc:	str	fp, [sp, #24]
   229d0:	ldr	r4, [sp, #184]	; 0xb8
   229d4:	str	r3, [sp, #40]	; 0x28
   229d8:	b	22a38 <__assert_fail@plt+0x114e0>
   229dc:	ldrb	r3, [r5, #52]	; 0x34
   229e0:	ldr	r2, [sp, #16]
   229e4:	ldr	r1, [sp, #12]
   229e8:	ldr	r4, [sp, #184]	; 0xb8
   229ec:	cmp	sl, r5
   229f0:	movne	r2, #0
   229f4:	andeq	r2, r2, #1
   229f8:	cmp	r2, #0
   229fc:	movne	r1, r8
   22a00:	tst	r3, #16
   22a04:	str	r1, [sp, #12]
   22a08:	str	r2, [sp, #16]
   22a0c:	beq	22a34 <__assert_fail@plt+0x114dc>
   22a10:	tst	r3, #128	; 0x80
   22a14:	bne	22e98 <__assert_fail@plt+0x11940>
   22a18:	ldr	r3, [sp, #20]
   22a1c:	cmp	r3, #0
   22a20:	beq	23658 <__assert_fail@plt+0x12100>
   22a24:	str	r4, [sp, #24]
   22a28:	str	r3, [sp, #28]
   22a2c:	mov	r3, #0
   22a30:	str	r3, [sp, #40]	; 0x28
   22a34:	mov	sl, r5
   22a38:	ldr	r3, [sp, #200]	; 0xc8
   22a3c:	cmp	r3, r4
   22a40:	ble	22e90 <__assert_fail@plt+0x11938>
   22a44:	ldr	r3, [sp, #180]	; 0xb4
   22a48:	add	r8, r4, #1
   22a4c:	cmp	r8, r3
   22a50:	bge	22eb4 <__assert_fail@plt+0x1195c>
   22a54:	ldr	r3, [sp, #172]	; 0xac
   22a58:	cmp	r8, r3
   22a5c:	bge	23120 <__assert_fail@plt+0x11bc8>
   22a60:	ldrb	r3, [sl, #52]	; 0x34
   22a64:	tst	r3, #32
   22a68:	bne	22ee8 <__assert_fail@plt+0x11990>
   22a6c:	ldr	r3, [sp, #148]	; 0x94
   22a70:	add	r2, r4, #1
   22a74:	str	r2, [sp, #184]	; 0xb8
   22a78:	ldrb	r4, [r3, r4]
   22a7c:	ldr	r3, [sl, #44]	; 0x2c
   22a80:	cmp	r3, #0
   22a84:	beq	230f0 <__assert_fail@plt+0x11b98>
   22a88:	ldr	r5, [r3, r4, lsl #2]
   22a8c:	ldr	r3, [sp, #244]	; 0xf4
   22a90:	cmp	r3, #0
   22a94:	beq	22aac <__assert_fail@plt+0x11554>
   22a98:	mov	r2, r5
   22a9c:	add	r1, sp, #144	; 0x90
   22aa0:	add	r0, sp, #120	; 0x78
   22aa4:	bl	22300 <__assert_fail@plt+0x10da8>
   22aa8:	mov	r5, r0
   22aac:	cmp	r5, #0
   22ab0:	bne	229dc <__assert_fail@plt+0x11484>
   22ab4:	ldr	r3, [sp, #120]	; 0x78
   22ab8:	ldr	r4, [sp, #244]	; 0xf4
   22abc:	cmp	r3, #0
   22ac0:	bne	231c4 <__assert_fail@plt+0x11c6c>
   22ac4:	cmp	r4, #0
   22ac8:	beq	22e90 <__assert_fail@plt+0x11938>
   22acc:	ldr	r2, [sp, #28]
   22ad0:	ldr	r3, [sp, #60]	; 0x3c
   22ad4:	eor	r3, r3, #1
   22ad8:	tst	r2, r3
   22adc:	bne	22e90 <__assert_fail@plt+0x11938>
   22ae0:	ldr	r3, [sp, #184]	; 0xb8
   22ae4:	mov	r1, #0
   22ae8:	ldr	r0, [sp, #248]	; 0xf8
   22aec:	add	r4, r4, r3, lsl #2
   22af0:	b	22b08 <__assert_fail@plt+0x115b0>
   22af4:	ldr	ip, [r4, #4]!
   22af8:	mov	r3, r2
   22afc:	mov	r1, #1
   22b00:	cmp	ip, #0
   22b04:	bne	22e54 <__assert_fail@plt+0x118fc>
   22b08:	add	r2, r3, #1
   22b0c:	cmp	r0, r2
   22b10:	bge	22af4 <__assert_fail@plt+0x1159c>
   22b14:	ldr	fp, [sp, #24]
   22b18:	cmp	r1, #0
   22b1c:	strne	r3, [sp, #184]	; 0xb8
   22b20:	ldr	r2, [sp, #40]	; 0x28
   22b24:	cmp	r2, #0
   22b28:	beq	22b3c <__assert_fail@plt+0x115e4>
   22b2c:	ldr	r3, [r2]
   22b30:	ldr	r1, [sp, #12]
   22b34:	add	r3, r3, r1
   22b38:	str	r3, [r2]
   22b3c:	cmn	fp, #1
   22b40:	beq	23140 <__assert_fail@plt+0x11be8>
   22b44:	cmn	fp, #2
   22b48:	ldr	r4, [sp, #244]	; 0xf4
   22b4c:	beq	231c4 <__assert_fail@plt+0x11c6c>
   22b50:	ldr	r3, [sp, #32]
   22b54:	str	fp, [sp, #236]	; 0xec
   22b58:	ldrb	r3, [r3, #28]
   22b5c:	tst	r3, #16
   22b60:	bne	2321c <__assert_fail@plt+0x11cc4>
   22b64:	ldr	r2, [sp, #472]	; 0x1d8
   22b68:	cmp	r2, #1
   22b6c:	bls	2345c <__assert_fail@plt+0x11f04>
   22b70:	mov	r2, fp
   22b74:	add	r0, sp, #144	; 0x90
   22b78:	ldr	r1, [r4, fp, lsl #2]
   22b7c:	bl	19eec <__assert_fail@plt+0x8994>
   22b80:	ldr	r3, [sp, #68]	; 0x44
   22b84:	ldrb	r3, [r3, #88]	; 0x58
   22b88:	str	r0, [sp, #240]	; 0xf0
   22b8c:	tst	r3, #1
   22b90:	bne	22ba4 <__assert_fail@plt+0x1164c>
   22b94:	ldr	r3, [sp, #68]	; 0x44
   22b98:	ldr	r3, [r3, #76]	; 0x4c
   22b9c:	cmp	r3, #0
   22ba0:	beq	24570 <__assert_fail@plt+0x13018>
   22ba4:	ldr	r3, [sp, #228]	; 0xe4
   22ba8:	cmn	fp, #-1073741822	; 0xc0000002
   22bac:	ldr	sl, [sp, #240]	; 0xf0
   22bb0:	str	r3, [sp, #12]
   22bb4:	bhi	231c4 <__assert_fail@plt+0x11c6c>
   22bb8:	add	r5, fp, #1
   22bbc:	lsl	r4, r5, #2
   22bc0:	mov	r0, r4
   22bc4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   22bc8:	subs	r9, r0, #0
   22bcc:	beq	23668 <__assert_fail@plt+0x12110>
   22bd0:	ldr	r3, [sp, #12]
   22bd4:	ldr	r6, [r3, #76]	; 0x4c
   22bd8:	cmp	r6, #0
   22bdc:	beq	234d0 <__assert_fail@plt+0x11f78>
   22be0:	mov	r0, r4
   22be4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   22be8:	cmp	r0, #0
   22bec:	mov	r6, r0
   22bf0:	str	r0, [sp, #24]
   22bf4:	beq	23794 <__assert_fail@plt+0x1223c>
   22bf8:	add	r4, sp, #296	; 0x128
   22bfc:	mov	r8, #0
   22c00:	lsl	r7, r5, #2
   22c04:	mov	r1, #0
   22c08:	mov	r0, r6
   22c0c:	mov	r2, r7
   22c10:	bl	1145c <memset@plt>
   22c14:	add	r1, sp, #280	; 0x118
   22c18:	add	r0, sp, #144	; 0x90
   22c1c:	str	r9, [sp, #280]	; 0x118
   22c20:	str	r6, [sp, #284]	; 0x11c
   22c24:	str	sl, [sp, #288]	; 0x120
   22c28:	str	fp, [sp, #292]	; 0x124
   22c2c:	str	r8, [r4]
   22c30:	str	r8, [r4, #4]
   22c34:	str	r8, [r4, #8]
   22c38:	bl	21638 <__assert_fail@plt+0x100e0>
   22c3c:	mov	r3, r0
   22c40:	ldr	r0, [sp, #304]	; 0x130
   22c44:	str	r3, [sp, #16]
   22c48:	bl	13e1c <__assert_fail@plt+0x28c4>
   22c4c:	ldr	r3, [sp, #16]
   22c50:	cmp	r3, #0
   22c54:	bne	23768 <__assert_fail@plt+0x12210>
   22c58:	ldr	r3, [r9]
   22c5c:	cmp	r3, #0
   22c60:	bne	237bc <__assert_fail@plt+0x12264>
   22c64:	ldr	r3, [r6]
   22c68:	cmp	r3, #0
   22c6c:	bne	237bc <__assert_fail@plt+0x12264>
   22c70:	ldr	r3, [sp, #244]	; 0xf4
   22c74:	sub	r7, r7, #4
   22c78:	add	r3, r3, r7
   22c7c:	subs	fp, fp, #1
   22c80:	bcc	2359c <__assert_fail@plt+0x12044>
   22c84:	ldr	r1, [r3, #-4]!
   22c88:	cmp	r1, #0
   22c8c:	beq	22c7c <__assert_fail@plt+0x11724>
   22c90:	ldrb	r2, [r1, #52]	; 0x34
   22c94:	tst	r2, #16
   22c98:	beq	22c7c <__assert_fail@plt+0x11724>
   22c9c:	mov	r2, fp
   22ca0:	add	r0, sp, #144	; 0x90
   22ca4:	bl	19eec <__assert_fail@plt+0x8994>
   22ca8:	add	r5, fp, #1
   22cac:	mov	sl, r0
   22cb0:	b	22c00 <__assert_fail@plt+0x116a8>
   22cb4:	ldr	r3, [sp, #64]	; 0x40
   22cb8:	cmp	r3, r5
   22cbc:	ble	22d28 <__assert_fail@plt+0x117d0>
   22cc0:	ldr	r3, [sp, #56]	; 0x38
   22cc4:	ldr	r1, [sp, #80]	; 0x50
   22cc8:	ldrb	r2, [r3, r5]
   22ccc:	add	r3, r3, r5
   22cd0:	ldrb	r2, [r1, r2]
   22cd4:	ldr	r1, [sp, #48]	; 0x30
   22cd8:	ldrb	r2, [r1, r2]
   22cdc:	cmp	r2, #0
   22ce0:	bne	228d0 <__assert_fail@plt+0x11378>
   22ce4:	ldr	r2, [sp, #56]	; 0x38
   22ce8:	mov	ip, r1
   22cec:	ldr	r1, [sp, #64]	; 0x40
   22cf0:	ldr	lr, [sp, #80]	; 0x50
   22cf4:	sub	r0, r2, #1
   22cf8:	rsb	r2, r2, #1
   22cfc:	add	r0, r0, r1
   22d00:	b	22d18 <__assert_fail@plt+0x117c0>
   22d04:	ldrb	r1, [r3, #1]!
   22d08:	ldrb	r1, [lr, r1]
   22d0c:	ldrb	r1, [ip, r1]
   22d10:	cmp	r1, #0
   22d14:	bne	228cc <__assert_fail@plt+0x11374>
   22d18:	cmp	r0, r3
   22d1c:	add	r5, r2, r3
   22d20:	bne	22d04 <__assert_fail@plt+0x117ac>
   22d24:	str	r5, [sp, #112]	; 0x70
   22d28:	ldr	r3, [sp, #64]	; 0x40
   22d2c:	cmp	r3, r5
   22d30:	bne	228d0 <__assert_fail@plt+0x11378>
   22d34:	ldr	r2, [sp, #72]	; 0x48
   22d38:	cmp	r2, r3
   22d3c:	ldrgt	r2, [sp, #56]	; 0x38
   22d40:	movle	r3, #0
   22d44:	ldrbgt	r3, [r2, r3]
   22d48:	ldr	r2, [sp, #80]	; 0x50
   22d4c:	cmp	r2, #0
   22d50:	ldrbne	r3, [r2, r3]
   22d54:	ldr	r2, [sp, #48]	; 0x30
   22d58:	ldrb	r3, [r2, r3]
   22d5c:	cmp	r3, #0
   22d60:	bne	228d0 <__assert_fail@plt+0x11378>
   22d64:	ldr	sl, [sp, #68]	; 0x44
   22d68:	mov	r3, #1
   22d6c:	str	r3, [sp, #36]	; 0x24
   22d70:	ldr	r4, [sp, #244]	; 0xf4
   22d74:	b	231d0 <__assert_fail@plt+0x11c78>
   22d78:	ldr	r3, [sp, #64]	; 0x40
   22d7c:	cmp	r3, r5
   22d80:	ble	22d28 <__assert_fail@plt+0x117d0>
   22d84:	ldr	r1, [sp, #48]	; 0x30
   22d88:	ldr	r3, [sp, #56]	; 0x38
   22d8c:	ldrb	r2, [r3, r5]
   22d90:	add	r3, r3, r5
   22d94:	ldrb	r2, [r1, r2]
   22d98:	cmp	r2, #0
   22d9c:	bne	228d0 <__assert_fail@plt+0x11378>
   22da0:	ldr	r2, [sp, #56]	; 0x38
   22da4:	mov	ip, r1
   22da8:	ldr	r1, [sp, #64]	; 0x40
   22dac:	sub	r0, r2, #1
   22db0:	rsb	r2, r2, #1
   22db4:	add	r0, r0, r1
   22db8:	b	22dcc <__assert_fail@plt+0x11874>
   22dbc:	ldrb	r1, [r3, #1]!
   22dc0:	ldrb	r1, [ip, r1]
   22dc4:	cmp	r1, #0
   22dc8:	bne	228cc <__assert_fail@plt+0x11374>
   22dcc:	cmp	r0, r3
   22dd0:	add	r5, r2, r3
   22dd4:	bne	22dbc <__assert_fail@plt+0x11864>
   22dd8:	str	r5, [sp, #112]	; 0x70
   22ddc:	b	22d28 <__assert_fail@plt+0x117d0>
   22de0:	ldr	r3, [sp, #76]	; 0x4c
   22de4:	cmp	r3, r5
   22de8:	bgt	22d64 <__assert_fail@plt+0x1180c>
   22dec:	ldr	r3, [sp, #80]	; 0x50
   22df0:	cmp	r3, #0
   22df4:	beq	23488 <__assert_fail@plt+0x11f30>
   22df8:	mov	ip, r3
   22dfc:	mov	r1, #0
   22e00:	ldr	r0, [sp, #48]	; 0x30
   22e04:	mov	r3, r5
   22e08:	ldr	r6, [sp, #56]	; 0x38
   22e0c:	ldr	lr, [sp, #72]	; 0x48
   22e10:	ldr	r4, [sp, #76]	; 0x4c
   22e14:	b	22e28 <__assert_fail@plt+0x118d0>
   22e18:	sub	r3, r3, #1
   22e1c:	mov	r1, #1
   22e20:	cmp	r3, r4
   22e24:	blt	235d4 <__assert_fail@plt+0x1207c>
   22e28:	cmp	lr, r3
   22e2c:	mov	r2, #0
   22e30:	ldrbgt	r2, [r6, r3]
   22e34:	ldrb	r2, [ip, r2]
   22e38:	ldrb	r2, [r0, r2]
   22e3c:	cmp	r2, #0
   22e40:	beq	22e18 <__assert_fail@plt+0x118c0>
   22e44:	cmp	r1, #0
   22e48:	movne	r5, r3
   22e4c:	strne	r3, [sp, #112]	; 0x70
   22e50:	b	228d0 <__assert_fail@plt+0x11378>
   22e54:	mov	r2, #0
   22e58:	add	r1, sp, #144	; 0x90
   22e5c:	str	r3, [sp, #184]	; 0xb8
   22e60:	add	r0, sp, #120	; 0x78
   22e64:	bl	22300 <__assert_fail@plt+0x10da8>
   22e68:	ldr	r3, [sp, #120]	; 0x78
   22e6c:	cmp	r3, #0
   22e70:	bne	22e84 <__assert_fail@plt+0x1192c>
   22e74:	cmp	r0, #0
   22e78:	bne	23650 <__assert_fail@plt+0x120f8>
   22e7c:	ldr	r4, [sp, #244]	; 0xf4
   22e80:	b	22ae0 <__assert_fail@plt+0x11588>
   22e84:	cmp	r0, #0
   22e88:	mov	r5, r0
   22e8c:	bne	229dc <__assert_fail@plt+0x11484>
   22e90:	ldr	fp, [sp, #24]
   22e94:	b	22b20 <__assert_fail@plt+0x115c8>
   22e98:	mov	r2, r4
   22e9c:	mov	r1, r5
   22ea0:	add	r0, sp, #144	; 0x90
   22ea4:	bl	19eec <__assert_fail@plt+0x8994>
   22ea8:	cmp	r0, #0
   22eac:	beq	22a34 <__assert_fail@plt+0x114dc>
   22eb0:	b	22a18 <__assert_fail@plt+0x114c0>
   22eb4:	ldr	r2, [sp, #192]	; 0xc0
   22eb8:	cmp	r3, r2
   22ebc:	bge	22a54 <__assert_fail@plt+0x114fc>
   22ec0:	add	r1, r4, #2
   22ec4:	add	r0, sp, #144	; 0x90
   22ec8:	bl	1ca38 <__assert_fail@plt+0xb4e0>
   22ecc:	cmp	r0, #0
   22ed0:	str	r0, [sp, #120]	; 0x78
   22ed4:	bne	23588 <__assert_fail@plt+0x12030>
   22ed8:	ldrb	r3, [sl, #52]	; 0x34
   22edc:	ldr	r4, [sp, #184]	; 0xb8
   22ee0:	tst	r3, #32
   22ee4:	beq	22a6c <__assert_fail@plt+0x11514>
   22ee8:	ldr	fp, [sl, #8]
   22eec:	ldr	r6, [sp, #228]	; 0xe4
   22ef0:	cmp	fp, #0
   22ef4:	ble	23210 <__assert_fail@plt+0x11cb8>
   22ef8:	add	r3, r6, #128	; 0x80
   22efc:	mov	r7, #0
   22f00:	str	r3, [sp, #44]	; 0x2c
   22f04:	str	r8, [sp, #84]	; 0x54
   22f08:	b	23028 <__assert_fail@plt+0x11ad0>
   22f0c:	tst	r0, #1
   22f10:	beq	2301c <__assert_fail@plt+0x11ac4>
   22f14:	tst	r5, #8
   22f18:	bne	2301c <__assert_fail@plt+0x11ac4>
   22f1c:	tst	r5, #32
   22f20:	beq	22f2c <__assert_fail@plt+0x119d4>
   22f24:	tst	r0, #2
   22f28:	beq	2301c <__assert_fail@plt+0x11ac4>
   22f2c:	tst	r5, #128	; 0x80
   22f30:	beq	22f3c <__assert_fail@plt+0x119e4>
   22f34:	tst	r0, #8
   22f38:	beq	2301c <__assert_fail@plt+0x11ac4>
   22f3c:	mov	r0, r8
   22f40:	add	r3, sp, #144	; 0x90
   22f44:	str	r4, [sp]
   22f48:	mov	r2, r9
   22f4c:	ldr	r1, [sp, #44]	; 0x2c
   22f50:	bl	1bf4c <__assert_fail@plt+0xa9f4>
   22f54:	subs	r4, r0, #0
   22f58:	beq	23014 <__assert_fail@plt+0x11abc>
   22f5c:	ldr	r2, [sp, #184]	; 0xb8
   22f60:	add	r0, sp, #144	; 0x90
   22f64:	ldr	r3, [sp, #264]	; 0x108
   22f68:	cmp	r3, r4
   22f6c:	movlt	r3, r4
   22f70:	add	r4, r4, r2
   22f74:	mov	r1, r4
   22f78:	str	r3, [sp, #264]	; 0x108
   22f7c:	bl	1cc28 <__assert_fail@plt+0xb6d0>
   22f80:	cmp	r0, #0
   22f84:	str	r0, [sp, #132]	; 0x84
   22f88:	bne	23180 <__assert_fail@plt+0x11c28>
   22f8c:	ldr	r3, [r6, #12]
   22f90:	ldr	r5, [sp, #244]	; 0xf4
   22f94:	ldr	r2, [r6, #24]
   22f98:	ldr	r3, [r3, r9, lsl #2]
   22f9c:	ldr	r1, [r5, r4, lsl #2]
   22fa0:	add	r3, r3, r3, lsl #1
   22fa4:	lsl	r3, r3, #2
   22fa8:	cmp	r1, #0
   22fac:	add	ip, r2, r3
   22fb0:	beq	23084 <__assert_fail@plt+0x11b2c>
   22fb4:	mov	r2, ip
   22fb8:	add	r0, sp, #280	; 0x118
   22fbc:	ldr	r1, [r1, #40]	; 0x28
   22fc0:	bl	20920 <__assert_fail@plt+0xf3c8>
   22fc4:	cmp	r0, #0
   22fc8:	str	r0, [sp, #132]	; 0x84
   22fcc:	bne	23180 <__assert_fail@plt+0x11c28>
   22fd0:	sub	r1, r4, #1
   22fd4:	add	r0, sp, #144	; 0x90
   22fd8:	ldr	r2, [sp, #232]	; 0xe8
   22fdc:	bl	19338 <__assert_fail@plt+0x7de0>
   22fe0:	ldr	r5, [sp, #244]	; 0xf4
   22fe4:	mov	r3, r0
   22fe8:	add	r2, sp, #280	; 0x118
   22fec:	mov	r1, r6
   22ff0:	add	r0, sp, #132	; 0x84
   22ff4:	bl	1e188 <__assert_fail@plt+0xcc30>
   22ff8:	str	r0, [r5, r4, lsl #2]
   22ffc:	ldr	r0, [sp, #288]	; 0x120
   23000:	bl	13e1c <__assert_fail@plt+0x28c4>
   23004:	ldr	r3, [sp, #244]	; 0xf4
   23008:	ldr	r2, [r3, r4, lsl #2]
   2300c:	cmp	r2, #0
   23010:	beq	230dc <__assert_fail@plt+0x11b84>
   23014:	ldr	fp, [sl, #8]
   23018:	ldr	r4, [sp, #184]	; 0xb8
   2301c:	add	r7, r7, #1
   23020:	cmp	r7, fp
   23024:	bge	2320c <__assert_fail@plt+0x11cb4>
   23028:	ldr	r2, [sl, #12]
   2302c:	ldr	r8, [r6]
   23030:	ldr	r9, [r2, r7, lsl #2]
   23034:	add	r2, r8, r9, lsl #3
   23038:	ldrb	r1, [r2, #6]
   2303c:	tst	r1, #16
   23040:	beq	2301c <__assert_fail@plt+0x11ac4>
   23044:	ldr	r5, [r2, #4]
   23048:	ldr	r3, [sp, #52]	; 0x34
   2304c:	tst	r3, r5
   23050:	beq	22f3c <__assert_fail@plt+0x119e4>
   23054:	ubfx	r5, r5, #8, #10
   23058:	mov	r1, r4
   2305c:	add	r0, sp, #144	; 0x90
   23060:	ldr	r2, [sp, #232]	; 0xe8
   23064:	bl	19338 <__assert_fail@plt+0x7de0>
   23068:	tst	r5, #4
   2306c:	bne	22f0c <__assert_fail@plt+0x119b4>
   23070:	tst	r5, #8
   23074:	beq	22f1c <__assert_fail@plt+0x119c4>
   23078:	tst	r0, #1
   2307c:	beq	22f1c <__assert_fail@plt+0x119c4>
   23080:	b	2301c <__assert_fail@plt+0x11ac4>
   23084:	add	r2, r2, r3
   23088:	sub	r1, r4, #1
   2308c:	ldrd	r2, [r2]
   23090:	add	r0, sp, #144	; 0x90
   23094:	mov	r8, r2
   23098:	mov	r9, r3
   2309c:	ldr	r2, [sp, #232]	; 0xe8
   230a0:	add	r3, sp, #280	; 0x118
   230a4:	strd	r8, [r3]
   230a8:	ldr	r3, [ip, #8]
   230ac:	str	r3, [sp, #288]	; 0x120
   230b0:	bl	19338 <__assert_fail@plt+0x7de0>
   230b4:	mov	r3, r0
   230b8:	add	r2, sp, #280	; 0x118
   230bc:	mov	r1, r6
   230c0:	add	r0, sp, #132	; 0x84
   230c4:	bl	1e188 <__assert_fail@plt+0xcc30>
   230c8:	ldr	r3, [sp, #244]	; 0xf4
   230cc:	str	r0, [r5, r4, lsl #2]
   230d0:	ldr	r2, [r3, r4, lsl #2]
   230d4:	cmp	r2, #0
   230d8:	bne	23014 <__assert_fail@plt+0x11abc>
   230dc:	ldr	r0, [sp, #132]	; 0x84
   230e0:	cmp	r0, #0
   230e4:	beq	23014 <__assert_fail@plt+0x11abc>
   230e8:	ldr	r8, [sp, #84]	; 0x54
   230ec:	b	23188 <__assert_fail@plt+0x11c30>
   230f0:	ldr	r5, [sl, #48]	; 0x30
   230f4:	cmp	r5, #0
   230f8:	beq	23400 <__assert_fail@plt+0x11ea8>
   230fc:	ldr	r1, [sp, #184]	; 0xb8
   23100:	add	r0, sp, #144	; 0x90
   23104:	ldr	r2, [sp, #232]	; 0xe8
   23108:	sub	r1, r1, #1
   2310c:	bl	19338 <__assert_fail@plt+0x7de0>
   23110:	tst	r0, #1
   23114:	addne	r4, r4, #256	; 0x100
   23118:	ldr	r5, [r5, r4, lsl #2]
   2311c:	b	22a8c <__assert_fail@plt+0x11534>
   23120:	ldr	r2, [sp, #192]	; 0xc0
   23124:	cmp	r3, r2
   23128:	bge	22a60 <__assert_fail@plt+0x11508>
   2312c:	b	22ec0 <__assert_fail@plt+0x11968>
   23130:	mov	r0, r9
   23134:	bl	13e1c <__assert_fail@plt+0x28c4>
   23138:	mov	r0, r4
   2313c:	bl	13e1c <__assert_fail@plt+0x28c4>
   23140:	add	r0, sp, #144	; 0x90
   23144:	bl	18c9c <__assert_fail@plt+0x7744>
   23148:	ldr	r5, [sp, #112]	; 0x70
   2314c:	ldr	r2, [sp, #76]	; 0x4c
   23150:	ldr	r3, [sp, #96]	; 0x60
   23154:	add	r5, r5, r3
   23158:	ldr	r3, [sp, #64]	; 0x40
   2315c:	str	r5, [sp, #112]	; 0x70
   23160:	cmp	r5, r3
   23164:	movle	r3, #0
   23168:	movgt	r3, #1
   2316c:	cmp	r5, r2
   23170:	orrlt	r3, r3, #1
   23174:	cmp	r3, #0
   23178:	beq	22884 <__assert_fail@plt+0x1132c>
   2317c:	b	22d64 <__assert_fail@plt+0x1180c>
   23180:	ldr	r8, [sp, #84]	; 0x54
   23184:	ldr	r3, [sp, #244]	; 0xf4
   23188:	cmp	r3, #0
   2318c:	str	r0, [sp, #120]	; 0x78
   23190:	beq	23428 <__assert_fail@plt+0x11ed0>
   23194:	mov	r5, #0
   23198:	b	22a98 <__assert_fail@plt+0x11540>
   2319c:	mov	r3, #1
   231a0:	str	r3, [sp, #36]	; 0x24
   231a4:	ldr	r0, [sp, #36]	; 0x24
   231a8:	add	sp, sp, #428	; 0x1ac
   231ac:	ldrd	r4, [sp]
   231b0:	ldrd	r6, [sp, #8]
   231b4:	ldrd	r8, [sp, #16]
   231b8:	ldrd	sl, [sp, #24]
   231bc:	add	sp, sp, #32
   231c0:	pop	{pc}		; (ldr pc, [sp], #4)
   231c4:	ldr	sl, [sp, #68]	; 0x44
   231c8:	mov	r3, #12
   231cc:	str	r3, [sp, #36]	; 0x24
   231d0:	mov	r0, r4
   231d4:	bl	13e1c <__assert_fail@plt+0x28c4>
   231d8:	ldr	r3, [sl, #76]	; 0x4c
   231dc:	cmp	r3, #0
   231e0:	bne	23560 <__assert_fail@plt+0x12008>
   231e4:	ldr	r0, [sp, #152]	; 0x98
   231e8:	bl	13e1c <__assert_fail@plt+0x28c4>
   231ec:	ldr	r0, [sp, #156]	; 0x9c
   231f0:	bl	13e1c <__assert_fail@plt+0x28c4>
   231f4:	ldrb	r3, [sp, #219]	; 0xdb
   231f8:	cmp	r3, #0
   231fc:	beq	231a4 <__assert_fail@plt+0x11c4c>
   23200:	ldr	r0, [sp, #148]	; 0x94
   23204:	bl	13e1c <__assert_fail@plt+0x28c4>
   23208:	b	231a4 <__assert_fail@plt+0x11c4c>
   2320c:	ldr	r8, [sp, #84]	; 0x54
   23210:	mov	r3, #0
   23214:	str	r3, [sp, #120]	; 0x78
   23218:	b	22a6c <__assert_fail@plt+0x11514>
   2321c:	ldr	r3, [sp, #68]	; 0x44
   23220:	ldr	r3, [r3, #76]	; 0x4c
   23224:	cmp	r3, #0
   23228:	bne	23444 <__assert_fail@plt+0x11eec>
   2322c:	ldr	sl, [sp, #68]	; 0x44
   23230:	ldr	r3, [sp, #472]	; 0x1d8
   23234:	cmp	r3, #0
   23238:	beq	231d0 <__assert_fail@plt+0x11c78>
   2323c:	cmp	r3, #1
   23240:	bls	23290 <__assert_fail@plt+0x11d38>
   23244:	sub	r2, r3, #2
   23248:	ldr	r3, [sp, #476]	; 0x1dc
   2324c:	cmp	r2, #4
   23250:	movls	r2, #0
   23254:	movhi	r2, #1
   23258:	add	r3, r3, #8
   2325c:	ubfx	r1, r3, #0, #3
   23260:	cmp	r1, #0
   23264:	movne	r2, #0
   23268:	cmp	r2, #0
   2326c:	beq	242f8 <__assert_fail@plt+0x12da0>
   23270:	ldr	r1, [sp, #472]	; 0x1d8
   23274:	mvn	r0, #0
   23278:	ldr	r2, [sp, #476]	; 0x1dc
   2327c:	add	r2, r2, r1, lsl #3
   23280:	mvn	r1, #0
   23284:	strd	r0, [r3], #8
   23288:	cmp	r2, r3
   2328c:	bne	23284 <__assert_fail@plt+0x11d2c>
   23290:	ldr	r3, [sp, #32]
   23294:	ldrb	r3, [r3, #28]
   23298:	eor	r3, r3, #16
   2329c:	mov	r5, #0
   232a0:	ldr	r1, [sp, #236]	; 0xec
   232a4:	ldr	r2, [sp, #472]	; 0x1d8
   232a8:	subs	r2, r2, #1
   232ac:	movne	r2, #1
   232b0:	ands	r3, r2, r3, lsr #4
   232b4:	ldr	r2, [sp, #476]	; 0x1dc
   232b8:	str	r5, [r2]
   232bc:	str	r1, [r2, #4]
   232c0:	bne	23818 <__assert_fail@plt+0x122c0>
   232c4:	ldrb	r2, [sp, #220]	; 0xdc
   232c8:	ldr	ip, [sp, #112]	; 0x70
   232cc:	ldr	r0, [sp, #156]	; 0x9c
   232d0:	cmp	r2, #0
   232d4:	ldrne	r5, [sp, #476]	; 0x1dc
   232d8:	movne	r2, #0
   232dc:	ldrne	r7, [sp, #472]	; 0x1d8
   232e0:	ldr	r1, [sp, #172]	; 0xac
   232e4:	addne	r5, r5, #4
   232e8:	ldr	lr, [sp, #176]	; 0xb0
   232ec:	bne	236d0 <__assert_fail@plt+0x12178>
   232f0:	ldr	lr, [sp, #472]	; 0x1d8
   232f4:	ldr	r1, [sp, #476]	; 0x1dc
   232f8:	add	r0, r1, #4
   232fc:	b	23308 <__assert_fail@plt+0x11db0>
   23300:	ldr	r3, [sp, #476]	; 0x1dc
   23304:	ldr	r3, [r3, r2, lsl #3]
   23308:	cmn	r3, #1
   2330c:	add	r1, ip, r3
   23310:	beq	23328 <__assert_fail@plt+0x11dd0>
   23314:	ldr	r3, [r0, r2, lsl #3]
   23318:	ldr	r5, [sp, #476]	; 0x1dc
   2331c:	add	r3, ip, r3
   23320:	str	r1, [r5, r2, lsl #3]
   23324:	str	r3, [r0, r2, lsl #3]
   23328:	add	r2, r2, #1
   2332c:	cmp	lr, r2
   23330:	bne	23300 <__assert_fail@plt+0x11da8>
   23334:	ldr	r3, [sp, #108]	; 0x6c
   23338:	cmp	r3, #0
   2333c:	ble	2338c <__assert_fail@plt+0x11e34>
   23340:	mov	r0, r3
   23344:	ldr	r2, [sp, #472]	; 0x1d8
   23348:	ldr	r3, [sp, #476]	; 0x1dc
   2334c:	add	r3, r3, r2, lsl #3
   23350:	sub	r2, r0, #1
   23354:	cmp	r2, #4
   23358:	ubfx	r1, r3, #0, #3
   2335c:	movls	r2, #0
   23360:	movhi	r2, #1
   23364:	cmp	r1, #0
   23368:	movne	r2, #0
   2336c:	cmp	r2, #0
   23370:	beq	24320 <__assert_fail@plt+0x12dc8>
   23374:	add	r2, r3, r0, lsl #3
   23378:	mvn	r1, #0
   2337c:	mvn	r0, #0
   23380:	strd	r0, [r3], #8
   23384:	cmp	r3, r2
   23388:	bne	23380 <__assert_fail@plt+0x11e28>
   2338c:	ldr	ip, [sl, #132]	; 0x84
   23390:	cmp	ip, #0
   23394:	beq	231d0 <__assert_fail@plt+0x11c78>
   23398:	ldr	r3, [sp, #472]	; 0x1d8
   2339c:	cmp	r3, #1
   233a0:	bls	231d0 <__assert_fail@plt+0x11c78>
   233a4:	ldr	r1, [sp, #476]	; 0x1dc
   233a8:	mov	r6, r3
   233ac:	mov	r2, #0
   233b0:	mov	r3, #1
   233b4:	add	r5, r1, #4
   233b8:	ldr	r1, [ip, r2, lsl #2]
   233bc:	mov	r0, r3
   233c0:	cmp	r1, r2
   233c4:	add	lr, r1, #1
   233c8:	beq	233ec <__assert_fail@plt+0x11e94>
   233cc:	ldr	r1, [sp, #476]	; 0x1dc
   233d0:	ldr	r1, [r1, lr, lsl #3]
   233d4:	ldr	lr, [sp, #476]	; 0x1dc
   233d8:	str	r1, [lr, r3, lsl #3]
   233dc:	ldr	r2, [ip, r2, lsl #2]
   233e0:	add	r2, lr, r2, lsl #3
   233e4:	ldr	r2, [r2, #12]
   233e8:	str	r2, [r5, r3, lsl #3]
   233ec:	add	r3, r3, #1
   233f0:	mov	r2, r0
   233f4:	cmp	r6, r3
   233f8:	bne	233b8 <__assert_fail@plt+0x11e60>
   233fc:	b	231d0 <__assert_fail@plt+0x11c78>
   23400:	mov	r1, sl
   23404:	ldr	r0, [sp, #228]	; 0xe4
   23408:	bl	1e5a4 <__assert_fail@plt+0xd04c>
   2340c:	cmp	r0, #0
   23410:	bne	22a7c <__assert_fail@plt+0x11524>
   23414:	ldr	r3, [sp, #244]	; 0xf4
   23418:	mov	r2, #12
   2341c:	str	r2, [sp, #120]	; 0x78
   23420:	cmp	r3, #0
   23424:	bne	23194 <__assert_fail@plt+0x11c3c>
   23428:	mov	r4, #0
   2342c:	ldr	sl, [sp, #68]	; 0x44
   23430:	b	231c8 <__assert_fail@plt+0x11c70>
   23434:	ldr	r3, [sp, #104]	; 0x68
   23438:	str	r3, [sp, #16]
   2343c:	ldrb	r3, [sl, #52]	; 0x34
   23440:	b	229b4 <__assert_fail@plt+0x1145c>
   23444:	mov	r2, fp
   23448:	add	r0, sp, #144	; 0x90
   2344c:	ldr	r1, [r4, fp, lsl #2]
   23450:	bl	19eec <__assert_fail@plt+0x8994>
   23454:	str	r0, [sp, #240]	; 0xf0
   23458:	b	22ba4 <__assert_fail@plt+0x1164c>
   2345c:	ldr	sl, [sp, #68]	; 0x44
   23460:	ldr	r2, [sl, #76]	; 0x4c
   23464:	cmp	r2, #0
   23468:	bne	23444 <__assert_fail@plt+0x11eec>
   2346c:	ldr	r2, [sp, #472]	; 0x1d8
   23470:	cmp	r2, #0
   23474:	bne	23298 <__assert_fail@plt+0x11d40>
   23478:	str	r2, [sp, #36]	; 0x24
   2347c:	b	231d0 <__assert_fail@plt+0x11c78>
   23480:	ldr	r2, [sp, #72]	; 0x48
   23484:	b	226c8 <__assert_fail@plt+0x11170>
   23488:	mov	r1, r3
   2348c:	mov	r3, r5
   23490:	ldr	r0, [sp, #48]	; 0x30
   23494:	ldr	r4, [sp, #56]	; 0x38
   23498:	ldr	ip, [sp, #72]	; 0x48
   2349c:	ldr	lr, [sp, #76]	; 0x4c
   234a0:	b	234b4 <__assert_fail@plt+0x11f5c>
   234a4:	sub	r3, r3, #1
   234a8:	mov	r1, #1
   234ac:	cmp	lr, r3
   234b0:	bgt	235d4 <__assert_fail@plt+0x1207c>
   234b4:	cmp	ip, r3
   234b8:	mov	r2, #0
   234bc:	ldrbgt	r2, [r4, r3]
   234c0:	ldrb	r2, [r0, r2]
   234c4:	cmp	r2, #0
   234c8:	beq	234a4 <__assert_fail@plt+0x11f4c>
   234cc:	b	22e44 <__assert_fail@plt+0x118ec>
   234d0:	add	r1, sp, #280	; 0x118
   234d4:	add	r0, sp, #144	; 0x90
   234d8:	str	r9, [sp, #280]	; 0x118
   234dc:	str	r6, [sp, #284]	; 0x11c
   234e0:	str	sl, [sp, #288]	; 0x120
   234e4:	str	fp, [sp, #292]	; 0x124
   234e8:	str	r6, [sp, #296]	; 0x128
   234ec:	str	r6, [sp, #300]	; 0x12c
   234f0:	str	r6, [sp, #304]	; 0x130
   234f4:	bl	21638 <__assert_fail@plt+0x100e0>
   234f8:	mov	r7, r0
   234fc:	ldr	r0, [sp, #304]	; 0x130
   23500:	bl	13e1c <__assert_fail@plt+0x28c4>
   23504:	cmp	r7, #0
   23508:	bne	237b4 <__assert_fail@plt+0x1225c>
   2350c:	ldr	r4, [r9]
   23510:	cmp	r4, #0
   23514:	beq	23130 <__assert_fail@plt+0x11bd8>
   23518:	mov	r8, fp
   2351c:	mov	fp, sl
   23520:	ldr	sl, [sp, #68]	; 0x44
   23524:	ldr	r0, [sp, #244]	; 0xf4
   23528:	bl	13e1c <__assert_fail@plt+0x28c4>
   2352c:	mov	r0, #0
   23530:	str	r8, [sp, #236]	; 0xec
   23534:	str	fp, [sp, #240]	; 0xf0
   23538:	str	r9, [sp, #244]	; 0xf4
   2353c:	bl	13e1c <__assert_fail@plt+0x28c4>
   23540:	mov	r0, #0
   23544:	bl	13e1c <__assert_fail@plt+0x28c4>
   23548:	ldr	r4, [sp, #244]	; 0xf4
   2354c:	b	23230 <__assert_fail@plt+0x11cd8>
   23550:	ldrb	r3, [sl, #88]	; 0x58
   23554:	tst	r3, #2
   23558:	bne	22764 <__assert_fail@plt+0x1120c>
   2355c:	b	2278c <__assert_fail@plt+0x11234>
   23560:	add	r0, sp, #144	; 0x90
   23564:	bl	18c9c <__assert_fail@plt+0x7744>
   23568:	ldr	r0, [sp, #276]	; 0x114
   2356c:	bl	13e1c <__assert_fail@plt+0x28c4>
   23570:	ldr	r0, [sp, #260]	; 0x104
   23574:	bl	13e1c <__assert_fail@plt+0x28c4>
   23578:	b	231e4 <__assert_fail@plt+0x11c8c>
   2357c:	ldr	sl, [r4, #40]	; 0x28
   23580:	cmp	sl, #0
   23584:	bne	22988 <__assert_fail@plt+0x11430>
   23588:	mov	r3, #12
   2358c:	ldr	sl, [sp, #68]	; 0x44
   23590:	str	r3, [sp, #36]	; 0x24
   23594:	ldr	r4, [sp, #244]	; 0xf4
   23598:	b	231d0 <__assert_fail@plt+0x11c78>
   2359c:	mov	r0, r9
   235a0:	bl	13e1c <__assert_fail@plt+0x28c4>
   235a4:	mov	r0, r6
   235a8:	bl	13e1c <__assert_fail@plt+0x28c4>
   235ac:	add	r0, sp, #144	; 0x90
   235b0:	bl	18c9c <__assert_fail@plt+0x7744>
   235b4:	ldr	r5, [sp, #112]	; 0x70
   235b8:	b	2314c <__assert_fail@plt+0x11bf4>
   235bc:	mov	r3, #12
   235c0:	ldr	r4, [sp, #244]	; 0xf4
   235c4:	str	r3, [sp, #36]	; 0x24
   235c8:	b	231d0 <__assert_fail@plt+0x11c78>
   235cc:	mov	r3, #8
   235d0:	b	22828 <__assert_fail@plt+0x112d0>
   235d4:	mov	r2, #1
   235d8:	ldr	sl, [sp, #68]	; 0x44
   235dc:	str	r2, [sp, #36]	; 0x24
   235e0:	str	r3, [sp, #112]	; 0x70
   235e4:	ldr	r4, [sp, #244]	; 0xf4
   235e8:	b	231d0 <__assert_fail@plt+0x11c78>
   235ec:	ldr	r4, [sp, #48]	; 0x30
   235f0:	ldr	r1, [sp, #168]	; 0xa8
   235f4:	sub	r2, r5, r1
   235f8:	ldr	r3, [sp, #176]	; 0xb0
   235fc:	cmp	r3, r2
   23600:	bhi	245a0 <__assert_fail@plt+0x13048>
   23604:	mov	r1, r5
   23608:	add	r0, sp, #144	; 0x90
   2360c:	ldr	r2, [sp, #480]	; 0x1e0
   23610:	bl	19588 <__assert_fail@plt+0x8030>
   23614:	subs	r3, r0, #0
   23618:	str	r3, [sp, #36]	; 0x24
   2361c:	beq	24598 <__assert_fail@plt+0x13040>
   23620:	ldr	sl, [sp, #68]	; 0x44
   23624:	ldr	r4, [sp, #244]	; 0xf4
   23628:	b	231d0 <__assert_fail@plt+0x11c78>
   2362c:	ldrsb	r3, [sl, #52]	; 0x34
   23630:	cmp	r3, #0
   23634:	blt	236a4 <__assert_fail@plt+0x1214c>
   23638:	ldr	fp, [sp, #12]
   2363c:	ldr	r3, [sp, #20]
   23640:	cmp	r3, #0
   23644:	strne	r3, [sp, #28]
   23648:	bne	229c8 <__assert_fail@plt+0x11470>
   2364c:	b	22b3c <__assert_fail@plt+0x115e4>
   23650:	mov	r5, r0
   23654:	b	229dc <__assert_fail@plt+0x11484>
   23658:	mov	fp, r4
   2365c:	b	22b3c <__assert_fail@plt+0x115e4>
   23660:	ldr	sl, [r4, #44]	; 0x2c
   23664:	b	23580 <__assert_fail@plt+0x12028>
   23668:	ldr	sl, [sp, #68]	; 0x44
   2366c:	bl	13e1c <__assert_fail@plt+0x28c4>
   23670:	mov	r3, #12
   23674:	mov	r0, r9
   23678:	str	r3, [sp, #36]	; 0x24
   2367c:	bl	13e1c <__assert_fail@plt+0x28c4>
   23680:	ldr	r4, [sp, #244]	; 0xf4
   23684:	b	231d0 <__assert_fail@plt+0x11c78>
   23688:	mov	r3, r0
   2368c:	mov	r1, r4
   23690:	ldr	r2, [sl, #40]	; 0x28
   23694:	add	r0, sp, #120	; 0x78
   23698:	bl	1e188 <__assert_fail@plt+0xcc30>
   2369c:	mov	sl, r0
   236a0:	b	23580 <__assert_fail@plt+0x12028>
   236a4:	mov	r1, sl
   236a8:	add	r0, sp, #144	; 0x90
   236ac:	ldr	r2, [sp, #12]
   236b0:	bl	19eec <__assert_fail@plt+0x8994>
   236b4:	subs	r3, r0, #0
   236b8:	str	r3, [sp, #28]
   236bc:	bne	23638 <__assert_fail@plt+0x120e0>
   236c0:	mvn	fp, #0
   236c4:	b	229c8 <__assert_fail@plt+0x11470>
   236c8:	ldr	r3, [sp, #476]	; 0x1dc
   236cc:	ldr	r3, [r3, r2, lsl #3]
   236d0:	cmn	r3, #1
   236d4:	beq	2370c <__assert_fail@plt+0x121b4>
   236d8:	cmp	r1, r3
   236dc:	ldr	r6, [r5, r2, lsl #3]
   236e0:	moveq	r3, lr
   236e4:	ldrne	r3, [r0, r3, lsl #2]
   236e8:	ldr	r8, [sp, #476]	; 0x1dc
   236ec:	cmp	r1, r6
   236f0:	moveq	r6, lr
   236f4:	str	r3, [r8, r2, lsl #3]
   236f8:	add	r3, ip, r3
   236fc:	ldrne	r6, [r0, r6, lsl #2]
   23700:	str	r3, [r8, r2, lsl #3]
   23704:	add	r6, ip, r6
   23708:	str	r6, [r5, r2, lsl #3]
   2370c:	add	r2, r2, #1
   23710:	cmp	r2, r7
   23714:	bne	236c8 <__assert_fail@plt+0x12170>
   23718:	b	23334 <__assert_fail@plt+0x11ddc>
   2371c:	add	r4, sl, #8
   23720:	add	r5, sl, #12
   23724:	mov	r1, r4
   23728:	mov	r2, r5
   2372c:	mov	r3, #0
   23730:	add	r0, sp, #144	; 0x90
   23734:	bl	1a1ac <__assert_fail@plt+0x8c54>
   23738:	cmp	r0, #0
   2373c:	mov	fp, r0
   23740:	str	r0, [sp, #120]	; 0x78
   23744:	bne	22b3c <__assert_fail@plt+0x115e4>
   23748:	ldrb	r3, [sl, #52]	; 0x34
   2374c:	tst	r3, #64	; 0x40
   23750:	bne	237f0 <__assert_fail@plt+0x12298>
   23754:	mov	r2, #0
   23758:	str	r2, [sp, #16]
   2375c:	b	229b4 <__assert_fail@plt+0x1145c>
   23760:	ldr	sl, [r4, #48]	; 0x30
   23764:	b	23580 <__assert_fail@plt+0x12028>
   23768:	mov	r7, r3
   2376c:	mov	r0, r9
   23770:	bl	13e1c <__assert_fail@plt+0x28c4>
   23774:	ldr	r0, [sp, #24]
   23778:	bl	13e1c <__assert_fail@plt+0x28c4>
   2377c:	cmp	r7, #1
   23780:	beq	23140 <__assert_fail@plt+0x11be8>
   23784:	str	r7, [sp, #36]	; 0x24
   23788:	ldr	sl, [sp, #68]	; 0x44
   2378c:	ldr	r4, [sp, #244]	; 0xf4
   23790:	b	231d0 <__assert_fail@plt+0x11c78>
   23794:	mov	r3, #12
   23798:	mov	r0, r9
   2379c:	ldr	sl, [sp, #68]	; 0x44
   237a0:	str	r3, [sp, #36]	; 0x24
   237a4:	bl	13e1c <__assert_fail@plt+0x28c4>
   237a8:	mov	r0, r6
   237ac:	bl	13e1c <__assert_fail@plt+0x28c4>
   237b0:	b	22d70 <__assert_fail@plt+0x11818>
   237b4:	str	r6, [sp, #24]
   237b8:	b	2376c <__assert_fail@plt+0x12214>
   237bc:	mov	r3, r5
   237c0:	mov	r2, r6
   237c4:	ldr	r0, [sp, #12]
   237c8:	mov	r1, r9
   237cc:	bl	20b24 <__assert_fail@plt+0xf5cc>
   237d0:	mov	r7, r0
   237d4:	mov	r0, r6
   237d8:	bl	13e1c <__assert_fail@plt+0x28c4>
   237dc:	cmp	r7, #0
   237e0:	beq	23518 <__assert_fail@plt+0x11fc0>
   237e4:	mov	r3, #0
   237e8:	str	r3, [sp, #24]
   237ec:	b	2376c <__assert_fail@plt+0x12214>
   237f0:	mov	r2, r5
   237f4:	mov	r1, r4
   237f8:	add	r0, sp, #144	; 0x90
   237fc:	bl	21b58 <__assert_fail@plt+0x10600>
   23800:	cmp	r0, #0
   23804:	mov	fp, r0
   23808:	str	r0, [sp, #120]	; 0x78
   2380c:	bne	22b3c <__assert_fail@plt+0x115e4>
   23810:	ldrb	r3, [sl, #52]	; 0x34
   23814:	b	23754 <__assert_fail@plt+0x121fc>
   23818:	ldr	r2, [sp, #32]
   2381c:	ldrb	r3, [sl, #88]	; 0x58
   23820:	ldr	r2, [r2]
   23824:	tst	r3, #1
   23828:	str	r2, [sp, #12]
   2382c:	beq	24130 <__assert_fail@plt+0x12bd8>
   23830:	ldr	r3, [sl, #76]	; 0x4c
   23834:	cmp	r3, r5
   23838:	ble	24130 <__assert_fail@plt+0x12bd8>
   2383c:	mov	r0, #0
   23840:	mov	r1, #2
   23844:	mov	r2, #0
   23848:	mov	r3, #16
   2384c:	add	ip, sp, #280	; 0x118
   23850:	strd	r0, [sp, #120]	; 0x78
   23854:	add	r1, sp, #292	; 0x124
   23858:	mov	r0, #48	; 0x30
   2385c:	strd	r2, [ip]
   23860:	str	r1, [sp, #16]
   23864:	str	r5, [sp, #128]	; 0x80
   23868:	str	r1, [sp, #288]	; 0x120
   2386c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   23870:	cmp	r0, #0
   23874:	str	r0, [sp, #128]	; 0x80
   23878:	beq	235bc <__assert_fail@plt+0x12064>
   2387c:	ldr	r1, [sp, #12]
   23880:	add	r2, sp, #132	; 0x84
   23884:	ldr	r3, [sp, #280]	; 0x118
   23888:	str	r2, [sp, #24]
   2388c:	ldr	fp, [r1, #72]	; 0x48
   23890:	str	r5, [sp, #132]	; 0x84
   23894:	ldr	r1, [sp, #472]	; 0x1d8
   23898:	str	r5, [sp, #136]	; 0x88
   2389c:	str	r5, [sp, #140]	; 0x8c
   238a0:	cmp	r3, r1
   238a4:	movcs	r3, r1
   238a8:	addcs	r5, sp, #120	; 0x78
   238ac:	strcs	r3, [sp, #280]	; 0x118
   238b0:	bcc	2457c <__assert_fail@plt+0x13024>
   238b4:	ldr	r0, [sp, #288]	; 0x120
   238b8:	ldr	r3, [sp, #472]	; 0x1d8
   238bc:	ldr	r1, [sp, #476]	; 0x1dc
   238c0:	str	r0, [sp, #28]
   238c4:	lsl	r2, r3, #3
   238c8:	lsl	r3, r3, #4
   238cc:	mov	r4, r1
   238d0:	str	r2, [sp, #32]
   238d4:	str	r3, [sp, #44]	; 0x2c
   238d8:	bl	11264 <memcpy@plt>
   238dc:	ldr	r6, [r4], #4
   238e0:	str	sl, [sp, #20]
   238e4:	str	r4, [sp, #40]	; 0x28
   238e8:	str	r6, [sp, #116]	; 0x74
   238ec:	ldr	r3, [sp, #476]	; 0x1dc
   238f0:	ldr	r0, [r3, #4]
   238f4:	cmp	r0, r6
   238f8:	blt	2442c <__assert_fail@plt+0x12ed4>
   238fc:	ldr	r3, [sp, #12]
   23900:	lsl	r4, fp, #3
   23904:	mov	r7, fp
   23908:	ldr	r2, [r3]
   2390c:	add	r1, r2, r4
   23910:	ldrb	r3, [r1, #4]
   23914:	cmp	r3, #8
   23918:	beq	23e10 <__assert_fail@plt+0x128b8>
   2391c:	cmp	r3, #9
   23920:	beq	23e7c <__assert_fail@plt+0x12924>
   23924:	cmp	r6, r0
   23928:	beq	23d28 <__assert_fail@plt+0x127d0>
   2392c:	cmp	r5, #0
   23930:	beq	239b4 <__assert_fail@plt+0x1245c>
   23934:	ldr	r2, [sp, #136]	; 0x88
   23938:	cmp	r2, #0
   2393c:	ble	239b4 <__assert_fail@plt+0x1245c>
   23940:	subs	r2, r2, #1
   23944:	ldr	r0, [sp, #140]	; 0x8c
   23948:	moveq	r1, r2
   2394c:	beq	239a8 <__assert_fail@plt+0x12450>
   23950:	mov	r1, #0
   23954:	add	r3, r2, r1
   23958:	lsr	r3, r3, #1
   2395c:	ldr	ip, [r0, r3, lsl #2]
   23960:	cmp	ip, fp
   23964:	blt	23d18 <__assert_fail@plt+0x127c0>
   23968:	cmp	r1, r3
   2396c:	bcs	239a8 <__assert_fail@plt+0x12450>
   23970:	add	r2, r1, r3
   23974:	lsr	r2, r2, #1
   23978:	ldr	ip, [r0, r2, lsl #2]
   2397c:	cmp	fp, ip
   23980:	ble	23998 <__assert_fail@plt+0x12440>
   23984:	b	23d0c <__assert_fail@plt+0x127b4>
   23988:	ldr	ip, [r0, r3, lsl #2]
   2398c:	cmp	ip, fp
   23990:	blt	23d18 <__assert_fail@plt+0x127c0>
   23994:	mov	r2, r3
   23998:	add	r3, r1, r2
   2399c:	cmp	r1, r2
   239a0:	lsr	r3, r3, #1
   239a4:	bcc	23988 <__assert_fail@plt+0x12430>
   239a8:	ldr	r3, [r0, r1, lsl #2]
   239ac:	cmp	r3, fp
   239b0:	beq	23d3c <__assert_fail@plt+0x127e4>
   239b4:	ldr	r6, [sp, #228]	; 0xe4
   239b8:	ldr	r0, [r6]
   239bc:	add	r1, r0, r4
   239c0:	ldrb	r3, [r1, #4]
   239c4:	tst	r3, #8
   239c8:	beq	23b64 <__assert_fail@plt+0x1260c>
   239cc:	ldr	ip, [r6, #20]
   239d0:	add	r4, fp, fp, lsl #1
   239d4:	ldr	r2, [sp, #136]	; 0x88
   239d8:	ldr	r0, [sp, #116]	; 0x74
   239dc:	add	r4, ip, r4, lsl #2
   239e0:	ldr	r1, [sp, #244]	; 0xf4
   239e4:	cmp	r2, #0
   239e8:	ldr	r6, [r1, r0, lsl #2]
   239ec:	ble	23a64 <__assert_fail@plt+0x1250c>
   239f0:	subs	r2, r2, #1
   239f4:	moveq	r1, r2
   239f8:	ldr	ip, [sp, #140]	; 0x8c
   239fc:	beq	23a58 <__assert_fail@plt+0x12500>
   23a00:	mov	r1, #0
   23a04:	add	r3, r2, r1
   23a08:	lsr	r3, r3, #1
   23a0c:	ldr	r0, [ip, r3, lsl #2]
   23a10:	cmp	fp, r0
   23a14:	bgt	23e50 <__assert_fail@plt+0x128f8>
   23a18:	cmp	r3, r1
   23a1c:	bls	23a58 <__assert_fail@plt+0x12500>
   23a20:	add	r2, r3, r1
   23a24:	lsr	r2, r2, #1
   23a28:	ldr	r0, [ip, r2, lsl #2]
   23a2c:	cmp	fp, r0
   23a30:	ble	23a48 <__assert_fail@plt+0x124f0>
   23a34:	b	23e44 <__assert_fail@plt+0x128ec>
   23a38:	ldr	r0, [ip, r3, lsl #2]
   23a3c:	cmp	fp, r0
   23a40:	bgt	23e50 <__assert_fail@plt+0x128f8>
   23a44:	mov	r2, r3
   23a48:	add	r3, r1, r2
   23a4c:	cmp	r1, r2
   23a50:	lsr	r3, r3, #1
   23a54:	bcc	23a38 <__assert_fail@plt+0x124e0>
   23a58:	ldr	r3, [ip, r1, lsl #2]
   23a5c:	cmp	fp, r3
   23a60:	beq	23a78 <__assert_fail@plt+0x12520>
   23a64:	mov	r1, fp
   23a68:	ldr	r0, [sp, #24]
   23a6c:	bl	18d78 <__assert_fail@plt+0x7820>
   23a70:	cmp	r0, #0
   23a74:	beq	243a0 <__assert_fail@plt+0x12e48>
   23a78:	ldr	r9, [r4, #4]
   23a7c:	cmp	r9, #0
   23a80:	ble	23c44 <__assert_fail@plt+0x126ec>
   23a84:	ldr	r8, [r6, #8]
   23a88:	mvn	fp, #0
   23a8c:	mov	lr, #0
   23a90:	ldr	sl, [r4, #8]
   23a94:	add	r7, r8, fp
   23a98:	cmp	r8, #0
   23a9c:	ble	23b1c <__assert_fail@plt+0x125c4>
   23aa0:	cmp	r7, #0
   23aa4:	ldr	r4, [sl, lr, lsl #2]
   23aa8:	moveq	r1, r7
   23aac:	ldr	r0, [r6, #12]
   23ab0:	beq	23b10 <__assert_fail@plt+0x125b8>
   23ab4:	mov	r2, r7
   23ab8:	mov	r1, #0
   23abc:	add	r3, r2, r1
   23ac0:	lsr	r3, r3, #1
   23ac4:	ldr	ip, [r0, r3, lsl #2]
   23ac8:	cmp	r4, ip
   23acc:	bgt	23b44 <__assert_fail@plt+0x125ec>
   23ad0:	cmp	r3, r1
   23ad4:	bls	23b10 <__assert_fail@plt+0x125b8>
   23ad8:	add	r2, r3, r1
   23adc:	lsr	r2, r2, #1
   23ae0:	ldr	ip, [r0, r2, lsl #2]
   23ae4:	cmp	r4, ip
   23ae8:	ble	23b00 <__assert_fail@plt+0x125a8>
   23aec:	b	23b38 <__assert_fail@plt+0x125e0>
   23af0:	ldr	ip, [r0, r3, lsl #2]
   23af4:	cmp	r4, ip
   23af8:	bgt	23b44 <__assert_fail@plt+0x125ec>
   23afc:	mov	r2, r3
   23b00:	add	r3, r1, r2
   23b04:	cmp	r1, r2
   23b08:	lsr	r3, r3, #1
   23b0c:	bcc	23af0 <__assert_fail@plt+0x12598>
   23b10:	ldr	r3, [r0, r1, lsl #2]
   23b14:	cmp	r4, r3
   23b18:	beq	23b54 <__assert_fail@plt+0x125fc>
   23b1c:	add	lr, lr, #1
   23b20:	cmp	lr, r9
   23b24:	bne	23a98 <__assert_fail@plt+0x12540>
   23b28:	cmp	fp, #0
   23b2c:	blt	24398 <__assert_fail@plt+0x12e40>
   23b30:	ldr	r6, [sp, #116]	; 0x74
   23b34:	b	238ec <__assert_fail@plt+0x12394>
   23b38:	mov	r1, r2
   23b3c:	mov	r2, r3
   23b40:	mov	r3, r1
   23b44:	add	r1, r3, #1
   23b48:	cmp	r2, r1
   23b4c:	bhi	23abc <__assert_fail@plt+0x12564>
   23b50:	b	23b10 <__assert_fail@plt+0x125b8>
   23b54:	cmn	fp, #1
   23b58:	bne	23f10 <__assert_fail@plt+0x129b8>
   23b5c:	mov	fp, r4
   23b60:	b	23b1c <__assert_fail@plt+0x125c4>
   23b64:	ldrb	r2, [r1, #6]
   23b68:	tst	r2, #16
   23b6c:	bne	24058 <__assert_fail@plt+0x12b00>
   23b70:	cmp	r3, #4
   23b74:	beq	240a4 <__assert_fail@plt+0x12b4c>
   23b78:	ldr	r8, [sp, #116]	; 0x74
   23b7c:	mov	r2, r8
   23b80:	add	r0, sp, #144	; 0x90
   23b84:	bl	19450 <__assert_fail@plt+0x7ef8>
   23b88:	cmp	r0, #0
   23b8c:	beq	23c44 <__assert_fail@plt+0x126ec>
   23b90:	ldr	r3, [r6, #12]
   23b94:	add	r8, r8, #1
   23b98:	ldr	fp, [r3, r7, lsl #2]
   23b9c:	cmp	r5, #0
   23ba0:	str	r8, [sp, #116]	; 0x74
   23ba4:	beq	23d00 <__assert_fail@plt+0x127a8>
   23ba8:	ldr	r3, [sp, #236]	; 0xec
   23bac:	cmp	r8, r3
   23bb0:	bgt	23c44 <__assert_fail@plt+0x126ec>
   23bb4:	ldr	r3, [sp, #244]	; 0xf4
   23bb8:	ldr	r3, [r3, r8, lsl #2]
   23bbc:	cmp	r3, #0
   23bc0:	beq	23c44 <__assert_fail@plt+0x126ec>
   23bc4:	ldr	r2, [r3, #8]
   23bc8:	cmp	r2, #0
   23bcc:	ble	23c44 <__assert_fail@plt+0x126ec>
   23bd0:	subs	r2, r2, #1
   23bd4:	ldr	r0, [r3, #12]
   23bd8:	moveq	r1, r2
   23bdc:	beq	23c38 <__assert_fail@plt+0x126e0>
   23be0:	mov	r1, #0
   23be4:	add	r3, r2, r1
   23be8:	lsr	r3, r3, #1
   23bec:	ldr	ip, [r0, r3, lsl #2]
   23bf0:	cmp	ip, fp
   23bf4:	blt	23e6c <__assert_fail@plt+0x12914>
   23bf8:	cmp	r3, r1
   23bfc:	bls	23c38 <__assert_fail@plt+0x126e0>
   23c00:	add	r2, r3, r1
   23c04:	lsr	r2, r2, #1
   23c08:	ldr	ip, [r0, r2, lsl #2]
   23c0c:	cmp	fp, ip
   23c10:	ble	23c28 <__assert_fail@plt+0x126d0>
   23c14:	b	23e60 <__assert_fail@plt+0x12908>
   23c18:	ldr	ip, [r0, r3, lsl #2]
   23c1c:	cmp	ip, fp
   23c20:	blt	23e6c <__assert_fail@plt+0x12914>
   23c24:	mov	r2, r3
   23c28:	add	r3, r1, r2
   23c2c:	cmp	r1, r2
   23c30:	lsr	r3, r3, #1
   23c34:	bcc	23c18 <__assert_fail@plt+0x126c0>
   23c38:	ldr	r3, [r0, r1, lsl #2]
   23c3c:	cmp	r3, fp
   23c40:	beq	23d00 <__assert_fail@plt+0x127a8>
   23c44:	ldr	ip, [sp, #24]
   23c48:	mov	r0, r5
   23c4c:	ldr	r1, [sp, #28]
   23c50:	ldr	r2, [sp, #472]	; 0x1d8
   23c54:	ldr	r3, [sp, #476]	; 0x1dc
   23c58:	stm	sp, {r1, ip}
   23c5c:	add	r1, sp, #116	; 0x74
   23c60:	bl	18ec0 <__assert_fail@plt+0x7968>
   23c64:	subs	fp, r0, #0
   23c68:	bge	23b30 <__assert_fail@plt+0x125d8>
   23c6c:	ldr	sl, [sp, #20]
   23c70:	ldr	r0, [sp, #140]	; 0x8c
   23c74:	bl	13e1c <__assert_fail@plt+0x28c4>
   23c78:	ldr	r3, [sp, #16]
   23c7c:	ldr	r0, [sp, #288]	; 0x120
   23c80:	cmp	r0, r3
   23c84:	beq	23c8c <__assert_fail@plt+0x12734>
   23c88:	bl	13e1c <__assert_fail@plt+0x28c4>
   23c8c:	ldr	r1, [sp, #16]
   23c90:	mov	r2, #0
   23c94:	mov	r3, #16
   23c98:	cmp	r5, #0
   23c9c:	str	r1, [sp, #288]	; 0x120
   23ca0:	add	r1, sp, #280	; 0x118
   23ca4:	strd	r2, [r1]
   23ca8:	beq	22d68 <__assert_fail@plt+0x11810>
   23cac:	mov	r6, #24
   23cb0:	ldr	r4, [sp, #36]	; 0x24
   23cb4:	b	23cd4 <__assert_fail@plt+0x1277c>
   23cb8:	add	r0, r0, r7
   23cbc:	ldr	r0, [r0, #20]
   23cc0:	bl	13e1c <__assert_fail@plt+0x28c4>
   23cc4:	ldr	r3, [r5, #8]
   23cc8:	add	r3, r3, r7
   23ccc:	ldr	r0, [r3, #8]
   23cd0:	bl	13e1c <__assert_fail@plt+0x28c4>
   23cd4:	ldr	r3, [r5]
   23cd8:	mul	r7, r6, r4
   23cdc:	ldr	r0, [r5, #8]
   23ce0:	cmp	r4, r3
   23ce4:	add	r4, r4, #1
   23ce8:	blt	23cb8 <__assert_fail@plt+0x12760>
   23cec:	mov	r3, #1
   23cf0:	str	r3, [sp, #36]	; 0x24
   23cf4:	bl	13e1c <__assert_fail@plt+0x28c4>
   23cf8:	ldr	r4, [sp, #244]	; 0xf4
   23cfc:	b	231d0 <__assert_fail@plt+0x11c78>
   23d00:	mov	r3, #0
   23d04:	str	r3, [sp, #136]	; 0x88
   23d08:	b	23b28 <__assert_fail@plt+0x125d0>
   23d0c:	mov	r1, r2
   23d10:	mov	r2, r3
   23d14:	mov	r3, r1
   23d18:	add	r1, r3, #1
   23d1c:	cmp	r2, r1
   23d20:	bhi	23954 <__assert_fail@plt+0x123fc>
   23d24:	b	239a8 <__assert_fail@plt+0x12450>
   23d28:	ldr	r3, [sp, #240]	; 0xf0
   23d2c:	cmp	r3, fp
   23d30:	bne	2392c <__assert_fail@plt+0x123d4>
   23d34:	cmp	r5, #0
   23d38:	beq	24540 <__assert_fail@plt+0x12fe8>
   23d3c:	ldr	r0, [sp, #40]	; 0x28
   23d40:	mov	r3, #0
   23d44:	ldr	r1, [sp, #472]	; 0x1d8
   23d48:	ldr	r2, [sp, #476]	; 0x1dc
   23d4c:	ldr	r2, [r2, r3, lsl #3]
   23d50:	cmp	r2, #0
   23d54:	blt	23d64 <__assert_fail@plt+0x1280c>
   23d58:	ldr	r2, [r0, r3, lsl #3]
   23d5c:	cmn	r2, #1
   23d60:	beq	23edc <__assert_fail@plt+0x12984>
   23d64:	add	r3, r3, #1
   23d68:	cmp	r1, r3
   23d6c:	bne	23d48 <__assert_fail@plt+0x127f0>
   23d70:	ldr	sl, [sp, #20]
   23d74:	ldr	r0, [sp, #140]	; 0x8c
   23d78:	bl	13e1c <__assert_fail@plt+0x28c4>
   23d7c:	ldr	r3, [sp, #16]
   23d80:	ldr	r0, [sp, #288]	; 0x120
   23d84:	cmp	r0, r3
   23d88:	beq	24584 <__assert_fail@plt+0x1302c>
   23d8c:	bl	13e1c <__assert_fail@plt+0x28c4>
   23d90:	ldr	r1, [sp, #16]
   23d94:	mov	r2, #0
   23d98:	mov	r3, #16
   23d9c:	cmp	r5, #0
   23da0:	str	r1, [sp, #288]	; 0x120
   23da4:	add	r1, sp, #280	; 0x118
   23da8:	strd	r2, [r1]
   23dac:	beq	23e00 <__assert_fail@plt+0x128a8>
   23db0:	ldr	r3, [r5]
   23db4:	cmp	r3, #0
   23db8:	movgt	r6, #0
   23dbc:	movgt	r4, r6
   23dc0:	ble	23df8 <__assert_fail@plt+0x128a0>
   23dc4:	ldr	r3, [r5, #8]
   23dc8:	add	r6, r6, #1
   23dcc:	add	r3, r3, r4
   23dd0:	ldr	r0, [r3, #20]
   23dd4:	bl	13e1c <__assert_fail@plt+0x28c4>
   23dd8:	ldr	r3, [r5, #8]
   23ddc:	add	r3, r3, r4
   23de0:	add	r4, r4, #24
   23de4:	ldr	r0, [r3, #8]
   23de8:	bl	13e1c <__assert_fail@plt+0x28c4>
   23dec:	ldr	r3, [r5]
   23df0:	cmp	r6, r3
   23df4:	blt	23dc4 <__assert_fail@plt+0x1286c>
   23df8:	ldr	r0, [r5, #8]
   23dfc:	bl	13e1c <__assert_fail@plt+0x28c4>
   23e00:	ldr	r4, [sp, #244]	; 0xf4
   23e04:	ldr	r3, [sp, #476]	; 0x1dc
   23e08:	ldr	r3, [r3]
   23e0c:	b	232c4 <__assert_fail@plt+0x11d6c>
   23e10:	ldr	r3, [r2, fp, lsl #3]
   23e14:	ldr	r2, [sp, #472]	; 0x1d8
   23e18:	add	r3, r3, #1
   23e1c:	cmp	r2, r3
   23e20:	ble	23924 <__assert_fail@plt+0x123cc>
   23e24:	ldr	r2, [sp, #476]	; 0x1dc
   23e28:	ldr	r1, [sp, #476]	; 0x1dc
   23e2c:	add	r2, r2, r3, lsl #3
   23e30:	str	r6, [r1, r3, lsl #3]
   23e34:	mvn	r3, #0
   23e38:	str	r3, [r2, #4]
   23e3c:	ldr	r0, [r1, #4]
   23e40:	b	23924 <__assert_fail@plt+0x123cc>
   23e44:	mov	r1, r2
   23e48:	mov	r2, r3
   23e4c:	mov	r3, r1
   23e50:	add	r1, r3, #1
   23e54:	cmp	r2, r1
   23e58:	bhi	23a04 <__assert_fail@plt+0x124ac>
   23e5c:	b	23a58 <__assert_fail@plt+0x12500>
   23e60:	mov	r1, r2
   23e64:	mov	r2, r3
   23e68:	mov	r3, r1
   23e6c:	add	r1, r3, #1
   23e70:	cmp	r2, r1
   23e74:	bhi	23be4 <__assert_fail@plt+0x1268c>
   23e78:	b	23c38 <__assert_fail@plt+0x126e0>
   23e7c:	ldr	r3, [r1]
   23e80:	ldr	r2, [sp, #472]	; 0x1d8
   23e84:	add	r3, r3, #1
   23e88:	cmp	r2, r3
   23e8c:	ble	23924 <__assert_fail@plt+0x123cc>
   23e90:	ldr	r2, [sp, #476]	; 0x1dc
   23e94:	ldr	r0, [sp, #476]	; 0x1dc
   23e98:	ldr	r2, [r2, r3, lsl #3]
   23e9c:	add	r0, r0, r3, lsl #3
   23ea0:	cmp	r2, r6
   23ea4:	blt	24374 <__assert_fail@plt+0x12e1c>
   23ea8:	ldrb	r2, [r1, #6]
   23eac:	tst	r2, #8
   23eb0:	beq	2434c <__assert_fail@plt+0x12df4>
   23eb4:	ldr	r1, [sp, #28]
   23eb8:	ldr	r3, [r1, r3, lsl #3]
   23ebc:	cmn	r3, #1
   23ec0:	beq	2434c <__assert_fail@plt+0x12df4>
   23ec4:	ldr	r2, [sp, #32]
   23ec8:	ldr	r0, [sp, #476]	; 0x1dc
   23ecc:	bl	11264 <memcpy@plt>
   23ed0:	ldr	r3, [sp, #476]	; 0x1dc
   23ed4:	ldr	r0, [r3, #4]
   23ed8:	b	23924 <__assert_fail@plt+0x123cc>
   23edc:	ldr	ip, [sp, #24]
   23ee0:	mov	r0, r5
   23ee4:	ldr	r1, [sp, #28]
   23ee8:	ldr	r2, [sp, #472]	; 0x1d8
   23eec:	ldr	r3, [sp, #476]	; 0x1dc
   23ef0:	stm	sp, {r1, ip}
   23ef4:	add	r1, sp, #116	; 0x74
   23ef8:	bl	18ec0 <__assert_fail@plt+0x7968>
   23efc:	subs	fp, r0, #0
   23f00:	blt	23d70 <__assert_fail@plt+0x12818>
   23f04:	mov	r7, fp
   23f08:	lsl	r4, fp, #3
   23f0c:	b	239b4 <__assert_fail@plt+0x1245c>
   23f10:	ldr	r2, [sp, #136]	; 0x88
   23f14:	cmp	r2, #0
   23f18:	ble	23f90 <__assert_fail@plt+0x12a38>
   23f1c:	subs	r2, r2, #1
   23f20:	ldr	r0, [sp, #140]	; 0x8c
   23f24:	moveq	r1, r2
   23f28:	beq	23f84 <__assert_fail@plt+0x12a2c>
   23f2c:	mov	r1, #0
   23f30:	add	r3, r2, r1
   23f34:	lsr	r3, r3, #1
   23f38:	ldr	ip, [r0, r3, lsl #2]
   23f3c:	cmp	fp, ip
   23f40:	bgt	24094 <__assert_fail@plt+0x12b3c>
   23f44:	cmp	r3, r1
   23f48:	bls	23f84 <__assert_fail@plt+0x12a2c>
   23f4c:	add	r2, r3, r1
   23f50:	lsr	r2, r2, #1
   23f54:	ldr	ip, [r0, r2, lsl #2]
   23f58:	cmp	fp, ip
   23f5c:	ble	23f74 <__assert_fail@plt+0x12a1c>
   23f60:	b	24088 <__assert_fail@plt+0x12b30>
   23f64:	ldr	ip, [r0, r3, lsl #2]
   23f68:	cmp	fp, ip
   23f6c:	bgt	24094 <__assert_fail@plt+0x12b3c>
   23f70:	mov	r2, r3
   23f74:	add	r3, r1, r2
   23f78:	cmp	r1, r2
   23f7c:	lsr	r3, r3, #1
   23f80:	bcc	23f64 <__assert_fail@plt+0x12a0c>
   23f84:	ldr	r3, [r0, r1, lsl #2]
   23f88:	cmp	fp, r3
   23f8c:	beq	2436c <__assert_fail@plt+0x12e14>
   23f90:	cmp	r5, #0
   23f94:	beq	23b28 <__assert_fail@plt+0x125d0>
   23f98:	ldr	r6, [r5]
   23f9c:	ldmib	r5, {r1, r3}
   23fa0:	ldr	r7, [sp, #116]	; 0x74
   23fa4:	add	r2, r6, #1
   23fa8:	cmp	r2, r1
   23fac:	str	r2, [r5]
   23fb0:	beq	244cc <__assert_fail@plt+0x12f74>
   23fb4:	add	r2, r6, r6, lsl #1
   23fb8:	ldr	r0, [sp, #44]	; 0x2c
   23fbc:	lsl	r6, r2, #3
   23fc0:	str	r7, [r3, r2, lsl #3]
   23fc4:	add	r7, r3, r6
   23fc8:	str	r4, [r7, #4]
   23fcc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   23fd0:	ldr	r3, [r5, #8]
   23fd4:	str	r0, [r7, #8]
   23fd8:	add	r3, r3, r6
   23fdc:	ldr	r0, [r3, #8]
   23fe0:	cmp	r0, #0
   23fe4:	beq	24510 <__assert_fail@plt+0x12fb8>
   23fe8:	ldr	r4, [sp, #32]
   23fec:	ldr	r1, [sp, #476]	; 0x1dc
   23ff0:	mov	r2, r4
   23ff4:	bl	11264 <memcpy@plt>
   23ff8:	ldr	r3, [r5, #8]
   23ffc:	mov	r2, r4
   24000:	ldr	r1, [sp, #28]
   24004:	add	r3, r3, r6
   24008:	ldr	r0, [r3, #8]
   2400c:	add	r0, r0, r4
   24010:	bl	11264 <memcpy@plt>
   24014:	ldr	r2, [r5, #8]
   24018:	ldr	r3, [sp, #136]	; 0x88
   2401c:	add	r6, r2, r6
   24020:	cmp	r3, #0
   24024:	str	r3, [r6, #16]
   24028:	ble	244b8 <__assert_fail@plt+0x12f60>
   2402c:	lsl	r0, r3, #2
   24030:	str	r3, [r6, #12]
   24034:	bl	2cd58 <__assert_fail@plt+0x1b800>
   24038:	cmp	r0, #0
   2403c:	str	r0, [r6, #20]
   24040:	beq	24560 <__assert_fail@plt+0x13008>
   24044:	ldr	r2, [sp, #136]	; 0x88
   24048:	ldr	r1, [sp, #140]	; 0x8c
   2404c:	lsl	r2, r2, #2
   24050:	bl	11264 <memcpy@plt>
   24054:	b	23b28 <__assert_fail@plt+0x125d0>
   24058:	ldr	ip, [sp, #116]	; 0x74
   2405c:	add	r3, sp, #144	; 0x90
   24060:	mov	r2, fp
   24064:	add	r1, r6, #128	; 0x80
   24068:	str	ip, [sp]
   2406c:	bl	1bf4c <__assert_fail@plt+0xa9f4>
   24070:	subs	r8, r0, #0
   24074:	bne	24364 <__assert_fail@plt+0x12e0c>
   24078:	ldr	r1, [r6]
   2407c:	ldr	r8, [sp, #116]	; 0x74
   24080:	add	r1, r1, r4
   24084:	b	23b7c <__assert_fail@plt+0x12624>
   24088:	mov	r1, r2
   2408c:	mov	r2, r3
   24090:	mov	r3, r1
   24094:	add	r1, r3, #1
   24098:	cmp	r2, r1
   2409c:	bhi	23f30 <__assert_fail@plt+0x129d8>
   240a0:	b	23f84 <__assert_fail@plt+0x12a2c>
   240a4:	ldr	r3, [r1]
   240a8:	ldr	r2, [sp, #472]	; 0x1d8
   240ac:	add	r3, r3, #1
   240b0:	cmp	r2, r3
   240b4:	ble	24230 <__assert_fail@plt+0x12cd8>
   240b8:	ldr	r2, [sp, #476]	; 0x1dc
   240bc:	cmp	r5, #0
   240c0:	ldr	r1, [sp, #476]	; 0x1dc
   240c4:	add	r2, r2, r3, lsl #3
   240c8:	ldr	r0, [r1, r3, lsl #3]
   240cc:	ldr	r3, [r2, #4]
   240d0:	sub	r8, r3, r0
   240d4:	beq	2435c <__assert_fail@plt+0x12e04>
   240d8:	cmn	r0, #1
   240dc:	beq	23c44 <__assert_fail@plt+0x126ec>
   240e0:	cmn	r3, #1
   240e4:	beq	23c44 <__assert_fail@plt+0x126ec>
   240e8:	cmp	r8, #0
   240ec:	beq	24238 <__assert_fail@plt+0x12ce0>
   240f0:	ldr	r4, [sp, #116]	; 0x74
   240f4:	ldr	r1, [sp, #148]	; 0x94
   240f8:	ldr	r3, [sp, #172]	; 0xac
   240fc:	sub	r3, r3, r4
   24100:	cmp	r8, r3
   24104:	bgt	23c44 <__assert_fail@plt+0x126ec>
   24108:	add	r0, r1, r0
   2410c:	mov	r2, r8
   24110:	add	r1, r1, r4
   24114:	bl	112b8 <memcmp@plt>
   24118:	cmp	r0, #0
   2411c:	bne	23c44 <__assert_fail@plt+0x126ec>
   24120:	ldr	r3, [r6, #12]
   24124:	add	r8, r8, r4
   24128:	ldr	fp, [r3, fp, lsl #2]
   2412c:	b	23b9c <__assert_fail@plt+0x12644>
   24130:	mov	r0, #0
   24134:	mov	r1, #2
   24138:	mov	r3, #16
   2413c:	mov	r2, #0
   24140:	strd	r0, [sp, #120]	; 0x78
   24144:	add	r0, sp, #280	; 0x118
   24148:	mov	ip, #0
   2414c:	add	r1, sp, #292	; 0x124
   24150:	add	lr, sp, #132	; 0x84
   24154:	strd	r2, [r0]
   24158:	mov	r5, ip
   2415c:	ldr	r3, [sp, #12]
   24160:	str	r1, [sp, #16]
   24164:	str	lr, [sp, #24]
   24168:	str	ip, [sp, #128]	; 0x80
   2416c:	str	r1, [sp, #288]	; 0x120
   24170:	ldr	fp, [r3, #72]	; 0x48
   24174:	str	ip, [sp, #132]	; 0x84
   24178:	str	ip, [sp, #136]	; 0x88
   2417c:	str	ip, [sp, #140]	; 0x8c
   24180:	mov	r3, #8
   24184:	add	r0, sp, #280	; 0x118
   24188:	ldr	r2, [sp, #16]
   2418c:	ldr	r1, [sp, #472]	; 0x1d8
   24190:	bl	2ce74 <__assert_fail@plt+0x1b91c>
   24194:	cmp	r0, #0
   24198:	bne	238b4 <__assert_fail@plt+0x1235c>
   2419c:	ldr	r3, [sp, #16]
   241a0:	ldr	r0, [sp, #288]	; 0x120
   241a4:	cmp	r0, r3
   241a8:	beq	241b0 <__assert_fail@plt+0x12c58>
   241ac:	bl	13e1c <__assert_fail@plt+0x28c4>
   241b0:	ldr	r1, [sp, #16]
   241b4:	mov	r2, #0
   241b8:	mov	r3, #16
   241bc:	cmp	r5, #0
   241c0:	str	r1, [sp, #288]	; 0x120
   241c4:	add	r1, sp, #280	; 0x118
   241c8:	strd	r2, [r1]
   241cc:	beq	235bc <__assert_fail@plt+0x12064>
   241d0:	ldr	r3, [r5]
   241d4:	cmp	r3, #0
   241d8:	movgt	r4, #0
   241dc:	ldrgt	r6, [sp, #36]	; 0x24
   241e0:	ble	24218 <__assert_fail@plt+0x12cc0>
   241e4:	add	r6, r6, #1
   241e8:	ldr	r3, [r5, #8]
   241ec:	add	r3, r3, r4
   241f0:	ldr	r0, [r3, #20]
   241f4:	bl	13e1c <__assert_fail@plt+0x28c4>
   241f8:	ldr	r3, [r5, #8]
   241fc:	add	r3, r3, r4
   24200:	add	r4, r4, #24
   24204:	ldr	r0, [r3, #8]
   24208:	bl	13e1c <__assert_fail@plt+0x28c4>
   2420c:	ldr	r3, [r5]
   24210:	cmp	r6, r3
   24214:	blt	241e4 <__assert_fail@plt+0x12c8c>
   24218:	mov	r3, #12
   2421c:	ldr	r0, [r5, #8]
   24220:	str	r3, [sp, #36]	; 0x24
   24224:	bl	13e1c <__assert_fail@plt+0x28c4>
   24228:	ldr	r4, [sp, #244]	; 0xf4
   2422c:	b	231d0 <__assert_fail@plt+0x11c78>
   24230:	cmp	r5, #0
   24234:	bne	23c44 <__assert_fail@plt+0x126ec>
   24238:	mov	r1, fp
   2423c:	ldr	r0, [sp, #24]
   24240:	bl	18d78 <__assert_fail@plt+0x7820>
   24244:	cmp	r0, #0
   24248:	beq	243a0 <__assert_fail@plt+0x12e48>
   2424c:	ldr	r8, [sp, #116]	; 0x74
   24250:	ldr	r3, [sp, #244]	; 0xf4
   24254:	ldr	r0, [r3, r8, lsl #2]
   24258:	ldr	r2, [r0, #8]
   2425c:	cmp	r2, #0
   24260:	ble	242ec <__assert_fail@plt+0x12d94>
   24264:	ldr	r1, [r6, #20]
   24268:	mov	r3, #12
   2426c:	subs	r2, r2, #1
   24270:	ldr	ip, [r0, #12]
   24274:	mla	fp, r3, fp, r1
   24278:	moveq	r1, r2
   2427c:	ldr	r3, [fp, #8]
   24280:	ldr	r0, [r3]
   24284:	beq	242e0 <__assert_fail@plt+0x12d88>
   24288:	mov	r1, #0
   2428c:	add	r3, r2, r1
   24290:	lsr	r3, r3, #1
   24294:	ldr	lr, [ip, r3, lsl #2]
   24298:	cmp	r0, lr
   2429c:	bgt	24500 <__assert_fail@plt+0x12fa8>
   242a0:	cmp	r1, r3
   242a4:	bcs	242e0 <__assert_fail@plt+0x12d88>
   242a8:	add	r2, r1, r3
   242ac:	lsr	r2, r2, #1
   242b0:	ldr	lr, [ip, r2, lsl #2]
   242b4:	cmp	r0, lr
   242b8:	ble	242d0 <__assert_fail@plt+0x12d78>
   242bc:	b	244f4 <__assert_fail@plt+0x12f9c>
   242c0:	ldr	lr, [ip, r3, lsl #2]
   242c4:	cmp	r0, lr
   242c8:	bgt	24500 <__assert_fail@plt+0x12fa8>
   242cc:	mov	r2, r3
   242d0:	add	r3, r1, r2
   242d4:	cmp	r1, r2
   242d8:	lsr	r3, r3, #1
   242dc:	bcc	242c0 <__assert_fail@plt+0x12d68>
   242e0:	ldr	fp, [ip, r1, lsl #2]
   242e4:	cmp	r0, fp
   242e8:	beq	23b28 <__assert_fail@plt+0x125d0>
   242ec:	ldr	r1, [r6]
   242f0:	add	r1, r1, r4
   242f4:	b	23b7c <__assert_fail@plt+0x12624>
   242f8:	ldr	r2, [sp, #472]	; 0x1d8
   242fc:	ldr	r3, [sp, #476]	; 0x1dc
   24300:	sub	r1, r3, #8
   24304:	add	r1, r1, r2, lsl #3
   24308:	mvn	r2, #0
   2430c:	str	r2, [r3, #12]
   24310:	str	r2, [r3, #8]!
   24314:	cmp	r1, r3
   24318:	bne	2430c <__assert_fail@plt+0x12db4>
   2431c:	b	23290 <__assert_fail@plt+0x11d38>
   24320:	ldr	r2, [sp, #472]	; 0x1d8
   24324:	add	r1, r2, r0
   24328:	ldr	r2, [sp, #476]	; 0x1dc
   2432c:	add	r1, r2, r1, lsl #3
   24330:	mvn	r2, #0
   24334:	add	r3, r3, #8
   24338:	str	r2, [r3, #-8]
   2433c:	str	r2, [r3, #-4]
   24340:	cmp	r1, r3
   24344:	bne	24334 <__assert_fail@plt+0x12ddc>
   24348:	b	2338c <__assert_fail@plt+0x11e34>
   2434c:	ldr	r3, [sp, #476]	; 0x1dc
   24350:	str	r6, [r0, #4]
   24354:	ldr	r0, [r3, #4]
   24358:	b	23924 <__assert_fail@plt+0x123cc>
   2435c:	cmp	r8, #0
   24360:	beq	24238 <__assert_fail@plt+0x12ce0>
   24364:	ldr	r4, [sp, #116]	; 0x74
   24368:	b	24120 <__assert_fail@plt+0x12bc8>
   2436c:	mov	fp, r4
   24370:	b	23b28 <__assert_fail@plt+0x125d0>
   24374:	str	r6, [r0, #4]
   24378:	ldr	r0, [sp, #28]
   2437c:	ldr	r2, [sp, #32]
   24380:	ldr	r1, [sp, #476]	; 0x1dc
   24384:	bl	11264 <memcpy@plt>
   24388:	ldr	r6, [sp, #116]	; 0x74
   2438c:	ldr	r3, [sp, #476]	; 0x1dc
   24390:	ldr	r0, [r3, #4]
   24394:	b	23924 <__assert_fail@plt+0x123cc>
   24398:	cmn	fp, #2
   2439c:	bne	23c44 <__assert_fail@plt+0x126ec>
   243a0:	ldr	sl, [sp, #20]
   243a4:	ldr	r0, [sp, #140]	; 0x8c
   243a8:	bl	13e1c <__assert_fail@plt+0x28c4>
   243ac:	ldr	r3, [sp, #16]
   243b0:	ldr	r0, [sp, #288]	; 0x120
   243b4:	cmp	r0, r3
   243b8:	beq	243c0 <__assert_fail@plt+0x12e68>
   243bc:	bl	13e1c <__assert_fail@plt+0x28c4>
   243c0:	ldr	r1, [sp, #16]
   243c4:	mov	r2, #0
   243c8:	mov	r3, #16
   243cc:	cmp	r5, #0
   243d0:	str	r1, [sp, #288]	; 0x120
   243d4:	add	r1, sp, #280	; 0x118
   243d8:	strd	r2, [r1]
   243dc:	beq	235bc <__assert_fail@plt+0x12064>
   243e0:	ldr	r3, [r5]
   243e4:	cmp	r3, #0
   243e8:	movgt	r4, #0
   243ec:	ldrgt	r6, [sp, #36]	; 0x24
   243f0:	ble	24218 <__assert_fail@plt+0x12cc0>
   243f4:	add	r6, r6, #1
   243f8:	ldr	r3, [r5, #8]
   243fc:	add	r3, r3, r4
   24400:	ldr	r0, [r3, #20]
   24404:	bl	13e1c <__assert_fail@plt+0x28c4>
   24408:	ldr	r3, [r5, #8]
   2440c:	add	r3, r3, r4
   24410:	add	r4, r4, #24
   24414:	ldr	r0, [r3, #8]
   24418:	bl	13e1c <__assert_fail@plt+0x28c4>
   2441c:	ldr	r3, [r5]
   24420:	cmp	r6, r3
   24424:	blt	243f4 <__assert_fail@plt+0x12e9c>
   24428:	b	24218 <__assert_fail@plt+0x12cc0>
   2442c:	ldr	sl, [sp, #20]
   24430:	ldr	r0, [sp, #140]	; 0x8c
   24434:	bl	13e1c <__assert_fail@plt+0x28c4>
   24438:	ldr	r3, [sp, #16]
   2443c:	ldr	r0, [sp, #288]	; 0x120
   24440:	cmp	r0, r3
   24444:	beq	2444c <__assert_fail@plt+0x12ef4>
   24448:	bl	13e1c <__assert_fail@plt+0x28c4>
   2444c:	ldr	r1, [sp, #16]
   24450:	mov	r2, #0
   24454:	mov	r3, #16
   24458:	cmp	r5, #0
   2445c:	str	r1, [sp, #288]	; 0x120
   24460:	add	r1, sp, #280	; 0x118
   24464:	strd	r2, [r1]
   24468:	beq	23e00 <__assert_fail@plt+0x128a8>
   2446c:	ldr	r3, [r5]
   24470:	cmp	r3, #0
   24474:	movgt	r6, #0
   24478:	movgt	r4, r6
   2447c:	ble	23df8 <__assert_fail@plt+0x128a0>
   24480:	ldr	r3, [r5, #8]
   24484:	add	r6, r6, #1
   24488:	add	r3, r3, r4
   2448c:	ldr	r0, [r3, #20]
   24490:	bl	13e1c <__assert_fail@plt+0x28c4>
   24494:	ldr	r3, [r5, #8]
   24498:	add	r3, r3, r4
   2449c:	add	r4, r4, #24
   244a0:	ldr	r0, [r3, #8]
   244a4:	bl	13e1c <__assert_fail@plt+0x28c4>
   244a8:	ldr	r3, [r5]
   244ac:	cmp	r6, r3
   244b0:	blt	24480 <__assert_fail@plt+0x12f28>
   244b4:	b	23df8 <__assert_fail@plt+0x128a0>
   244b8:	mov	r3, #0
   244bc:	str	r3, [r6, #12]
   244c0:	str	r3, [r6, #16]
   244c4:	str	r3, [r6, #20]
   244c8:	b	23b28 <__assert_fail@plt+0x125d0>
   244cc:	mov	r1, #48	; 0x30
   244d0:	mov	r0, r3
   244d4:	mul	r1, r1, r2
   244d8:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   244dc:	subs	r3, r0, #0
   244e0:	beq	24510 <__assert_fail@plt+0x12fb8>
   244e4:	ldr	r2, [r5, #4]
   244e8:	lsl	r2, r2, #1
   244ec:	strd	r2, [r5, #4]
   244f0:	b	23fb4 <__assert_fail@plt+0x12a5c>
   244f4:	mov	r1, r2
   244f8:	mov	r2, r3
   244fc:	mov	r3, r1
   24500:	add	r1, r3, #1
   24504:	cmp	r2, r1
   24508:	bhi	2428c <__assert_fail@plt+0x12d34>
   2450c:	b	242e0 <__assert_fail@plt+0x12d88>
   24510:	ldr	sl, [sp, #20]
   24514:	ldr	r0, [sp, #140]	; 0x8c
   24518:	bl	13e1c <__assert_fail@plt+0x28c4>
   2451c:	ldr	r3, [sp, #16]
   24520:	ldr	r0, [sp, #288]	; 0x120
   24524:	cmp	r0, r3
   24528:	bne	243bc <__assert_fail@plt+0x12e64>
   2452c:	mov	r2, #0
   24530:	mov	r3, #16
   24534:	add	r1, sp, #280	; 0x118
   24538:	strd	r2, [r1]
   2453c:	b	243e0 <__assert_fail@plt+0x12e88>
   24540:	ldr	sl, [sp, #20]
   24544:	ldr	r0, [sp, #140]	; 0x8c
   24548:	bl	13e1c <__assert_fail@plt+0x28c4>
   2454c:	ldr	r3, [sp, #16]
   24550:	ldr	r0, [sp, #288]	; 0x120
   24554:	cmp	r0, r3
   24558:	bne	23dfc <__assert_fail@plt+0x128a4>
   2455c:	b	23e00 <__assert_fail@plt+0x128a8>
   24560:	str	r0, [r6, #12]
   24564:	str	r0, [r6, #16]
   24568:	ldr	sl, [sp, #20]
   2456c:	b	24514 <__assert_fail@plt+0x12fbc>
   24570:	ldr	sl, [sp, #68]	; 0x44
   24574:	ldr	r3, [sp, #472]	; 0x1d8
   24578:	b	2323c <__assert_fail@plt+0x11ce4>
   2457c:	add	r5, sp, #120	; 0x78
   24580:	b	24180 <__assert_fail@plt+0x12c28>
   24584:	mov	r2, #0
   24588:	mov	r3, #16
   2458c:	add	r1, sp, #280	; 0x118
   24590:	strd	r2, [r1]
   24594:	b	23db0 <__assert_fail@plt+0x12858>
   24598:	ldr	r1, [sp, #168]	; 0xa8
   2459c:	sub	r2, r5, r1
   245a0:	ldr	r0, [sp, #172]	; 0xac
   245a4:	mov	r3, r4
   245a8:	cmp	r0, r2
   245ac:	bls	245bc <__assert_fail@plt+0x13064>
   245b0:	ldr	r3, [sp, #148]	; 0x94
   245b4:	ldrb	r3, [r3, r2]
   245b8:	add	r3, r4, r3
   245bc:	ldrb	r3, [r3]
   245c0:	cmp	r3, #0
   245c4:	bne	228d0 <__assert_fail@plt+0x11378>
   245c8:	ldr	r2, [sp, #76]	; 0x4c
   245cc:	ldr	r3, [sp, #96]	; 0x60
   245d0:	add	r5, r5, r3
   245d4:	ldr	r3, [sp, #64]	; 0x40
   245d8:	str	r5, [sp, #112]	; 0x70
   245dc:	cmp	r5, r3
   245e0:	movle	r3, #0
   245e4:	movgt	r3, #1
   245e8:	cmp	r5, r2
   245ec:	orrlt	r3, r3, #1
   245f0:	cmp	r3, #0
   245f4:	beq	235f4 <__assert_fail@plt+0x1209c>
   245f8:	b	22d64 <__assert_fail@plt+0x1180c>
   245fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24600:	mov	r5, r1
   24604:	strd	r6, [sp, #8]
   24608:	strd	r8, [sp, #16]
   2460c:	mov	r9, r0
   24610:	strd	sl, [sp, #24]
   24614:	str	lr, [sp, #32]
   24618:	sub	sp, sp, #164	; 0xa4
   2461c:	ldr	sl, [r1]
   24620:	str	r2, [sp, #20]
   24624:	ldrb	r2, [r2, #4]
   24628:	str	r3, [sp, #32]
   2462c:	sub	r3, r2, #1
   24630:	cmp	r3, #35	; 0x23
   24634:	ldrls	pc, [pc, r3, lsl #2]
   24638:	b	25298 <__assert_fail@plt+0x13d40>
   2463c:	andeq	r4, r2, r8, lsr lr
   24640:	muleq	r2, r0, fp
   24644:	muleq	r2, r8, r2
   24648:	muleq	r2, r0, r0
   2464c:	andeq	r5, r2, r4
   24650:	muleq	r2, r8, r2
   24654:	muleq	r2, r8, r2
   24658:	strdeq	r4, [r2], -r0
   2465c:			; <UNDEFINED> instruction: 0x000252b0
   24660:	muleq	r2, r0, fp
   24664:	ldrdeq	r4, [r2], -r8
   24668:			; <UNDEFINED> instruction: 0x00024bb8
   2466c:	muleq	r2, r8, r2
   24670:	muleq	r2, r8, r2
   24674:	muleq	r2, r8, r2
   24678:	muleq	r2, r8, r2
   2467c:	muleq	r2, r8, r2
   24680:	ldrdeq	r4, [r2], -r8
   24684:	ldrdeq	r4, [r2], -r8
   24688:	andeq	r5, r2, r4, asr #2
   2468c:	muleq	r2, r8, r2
   24690:	muleq	r2, r8, r2
   24694:	andeq	r4, r2, ip, asr #13
   24698:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2469c:	muleq	r2, r8, r2
   246a0:	muleq	r2, r8, r2
   246a4:	muleq	r2, r8, r2
   246a8:	muleq	r2, r8, r2
   246ac:	muleq	r2, r8, r2
   246b0:	muleq	r2, r8, r2
   246b4:	muleq	r2, r8, r2
   246b8:	ldrdeq	r4, [r2], -ip
   246bc:	ldrdeq	r4, [r2], -ip
   246c0:	andeq	r5, r2, r8, ror r2
   246c4:	andeq	r5, r2, r8, ror r2
   246c8:	muleq	r2, r8, r2
   246cc:	ldr	r3, [sp, #32]
   246d0:	tst	r3, #16777216	; 0x1000000
   246d4:	bne	254a4 <__assert_fail@plt+0x13f4c>
   246d8:	ldr	r3, [sp, #32]
   246dc:	tst	r3, #32
   246e0:	bne	254a4 <__assert_fail@plt+0x13f4c>
   246e4:	tst	r3, #16
   246e8:	bne	25fbc <__assert_fail@plt+0x14a64>
   246ec:	cmp	r2, #9
   246f0:	beq	252b0 <__assert_fail@plt+0x13d58>
   246f4:	ldr	r3, [sp, #20]
   246f8:	mov	r4, #1
   246fc:	strb	r4, [r3, #4]
   24700:	ldr	r2, [sl, #64]	; 0x40
   24704:	cmp	r2, #31
   24708:	beq	25efc <__assert_fail@plt+0x149a4>
   2470c:	ldr	r0, [sl, #56]	; 0x38
   24710:	lsl	r3, r2, #5
   24714:	add	r4, r2, r4
   24718:	add	r2, r3, #4
   2471c:	add	r1, r0, r3
   24720:	add	r3, r3, #16
   24724:	str	r4, [sl, #64]	; 0x40
   24728:	adds	r2, r0, r2
   2472c:	add	r0, r0, r3
   24730:	ldr	r3, [sp, #20]
   24734:	mov	ip, #0
   24738:	mvn	lr, #0
   2473c:	str	r2, [sp, #28]
   24740:	str	ip, [r1, #4]
   24744:	str	ip, [r1, #8]
   24748:	str	ip, [r1, #12]
   2474c:	ldrd	r2, [r3]
   24750:	strd	r2, [r1, #24]
   24754:	ldrb	r3, [r0, #14]
   24758:	bic	r3, r3, #12
   2475c:	strb	r3, [r0, #14]
   24760:	str	ip, [r1, #16]
   24764:	str	ip, [r1, #20]
   24768:	str	lr, [r1, #32]
   2476c:	beq	24fec <__assert_fail@plt+0x13a94>
   24770:	ldr	r6, [sp, #20]
   24774:	mov	r1, r9
   24778:	mov	r5, #0
   2477c:	ldr	r4, [sp, #32]
   24780:	mov	r0, r6
   24784:	and	r3, r4, #2097152	; 0x200000
   24788:	mov	r2, r4
   2478c:	str	r3, [sp, #52]	; 0x34
   24790:	bl	1afe8 <__assert_fail@plt+0x9a90>
   24794:	ldr	r3, [r9, #40]	; 0x28
   24798:	and	r2, r4, #16777216	; 0x1000000
   2479c:	ldrb	r7, [r6, #4]
   247a0:	str	r2, [sp, #36]	; 0x24
   247a4:	add	r0, r3, r0
   247a8:	str	r0, [r9, #40]	; 0x28
   247ac:	cmp	r7, #23
   247b0:	cmpne	r7, #11
   247b4:	sub	r2, r7, #18
   247b8:	moveq	r3, #1
   247bc:	movne	r3, #0
   247c0:	cmp	r2, #1
   247c4:	orrls	r3, r3, #1
   247c8:	sub	r1, r7, #18
   247cc:	clz	r1, r1
   247d0:	cmp	r3, #0
   247d4:	lsr	r1, r1, #5
   247d8:	beq	24b98 <__assert_fail@plt+0x13640>
   247dc:	ldr	r3, [sp, #20]
   247e0:	cmp	r7, #23
   247e4:	add	r6, sp, #96	; 0x60
   247e8:	ldr	r4, [r9, #40]	; 0x28
   247ec:	ldrd	r2, [r3]
   247f0:	strd	r2, [sp, #96]	; 0x60
   247f4:	beq	255f4 <__assert_fail@plt+0x1409c>
   247f8:	cmp	r7, #19
   247fc:	mov	r8, r1
   24800:	beq	25528 <__assert_fail@plt+0x13fd0>
   24804:	mov	r1, r9
   24808:	ldr	r0, [sp, #20]
   2480c:	ldr	r2, [sp, #32]
   24810:	bl	1afe8 <__assert_fail@plt+0x9a90>
   24814:	ldr	r3, [r9, #40]	; 0x28
   24818:	ldr	r2, [sp, #28]
   2481c:	add	r0, r3, r0
   24820:	cmp	r2, #0
   24824:	str	r0, [r9, #40]	; 0x28
   24828:	beq	25760 <__assert_fail@plt+0x14208>
   2482c:	cmp	r7, #18
   24830:	beq	25d94 <__assert_fail@plt+0x1483c>
   24834:	ldrb	r3, [r2, #24]
   24838:	mov	r7, r2
   2483c:	cmp	r3, #17
   24840:	beq	256a8 <__assert_fail@plt+0x14150>
   24844:	mov	r8, #0
   24848:	add	fp, sp, #128	; 0x80
   2484c:	str	r8, [sp, #40]	; 0x28
   24850:	mvn	r3, #0
   24854:	mov	r6, #11
   24858:	str	r3, [sp, #24]
   2485c:	mov	r2, #0
   24860:	mov	r3, #0
   24864:	strd	r2, [fp]
   24868:	ldr	r1, [sl, #64]	; 0x40
   2486c:	cmp	r1, #31
   24870:	beq	2577c <__assert_fail@plt+0x14224>
   24874:	ldr	r4, [sl, #56]	; 0x38
   24878:	lsl	r3, r1, #5
   2487c:	add	r1, r1, #1
   24880:	add	r0, r3, #4
   24884:	add	r2, r4, r3
   24888:	add	r3, r3, #16
   2488c:	str	r1, [sl, #64]	; 0x40
   24890:	add	r3, r4, r3
   24894:	add	r4, r4, r0
   24898:	stmib	r2, {r5, r7}
   2489c:	mvn	ip, #0
   248a0:	cmp	r4, #0
   248a4:	str	r5, [r2, #12]
   248a8:	strb	r6, [sp, #132]	; 0x84
   248ac:	ldrd	r0, [fp]
   248b0:	strd	r0, [r2, #24]
   248b4:	ldrb	r0, [r3, #14]
   248b8:	bic	r0, r0, #12
   248bc:	strb	r0, [r3, #14]
   248c0:	str	r5, [r2, #16]
   248c4:	str	r5, [r2, #20]
   248c8:	str	ip, [r2, #32]
   248cc:	str	r4, [r7]
   248d0:	beq	25508 <__assert_fail@plt+0x13fb0>
   248d4:	ldr	r3, [sp, #24]
   248d8:	add	r1, r8, #2
   248dc:	cmp	r1, r3
   248e0:	bgt	253d4 <__assert_fail@plt+0x13e7c>
   248e4:	mov	r8, r4
   248e8:	mov	r2, fp
   248ec:	str	sl, [sp, #16]
   248f0:	str	r9, [sp, #44]	; 0x2c
   248f4:	mov	r9, r1
   248f8:	mov	fp, r2
   248fc:	mov	r6, r2
   24900:	b	24908 <__assert_fail@plt+0x133b0>
   24904:	mov	r7, r3
   24908:	ldr	r2, [sl, #64]	; 0x40
   2490c:	cmp	r2, #31
   24910:	beq	254c8 <__assert_fail@plt+0x13f70>
   24914:	ldr	r0, [sl, #56]	; 0x38
   24918:	lsl	r3, r2, #5
   2491c:	add	r2, r2, #1
   24920:	add	lr, r3, #4
   24924:	add	ip, r0, r3
   24928:	add	r3, r3, #16
   2492c:	str	r2, [sl, #64]	; 0x40
   24930:	add	r1, r0, r3
   24934:	add	r0, r0, lr
   24938:	str	r5, [ip, #4]
   2493c:	mvn	lr, #0
   24940:	cmp	r0, #0
   24944:	str	r5, [ip, #8]
   24948:	str	r5, [ip, #12]
   2494c:	ldrd	r2, [r7, #20]
   24950:	strd	r2, [ip, #24]
   24954:	ldrb	r3, [r1, #14]
   24958:	bic	r3, r3, #12
   2495c:	strb	r3, [r1, #14]
   24960:	str	r5, [ip, #16]
   24964:	str	r5, [ip, #20]
   24968:	str	lr, [ip, #32]
   2496c:	str	r0, [fp]
   24970:	beq	254f4 <__assert_fail@plt+0x13f9c>
   24974:	str	r8, [ip, #4]
   24978:	ldr	r8, [fp]
   2497c:	ldrb	r3, [r8, #26]
   24980:	orr	r3, r3, #4
   24984:	strb	r3, [r8, #26]
   24988:	ldr	r3, [r7, #4]
   2498c:	cmp	r3, #0
   24990:	addne	fp, r8, #4
   24994:	bne	24904 <__assert_fail@plt+0x133ac>
   24998:	ldr	r2, [r7, #8]
   2499c:	cmp	r2, #0
   249a0:	cmpne	r2, r3
   249a4:	mov	r3, r7
   249a8:	bne	254bc <__assert_fail@plt+0x13f64>
   249ac:	ldr	r2, [r7]
   249b0:	ldr	r8, [r8]
   249b4:	subs	r7, r2, #0
   249b8:	bne	24998 <__assert_fail@plt+0x13440>
   249bc:	mov	r2, r6
   249c0:	ldr	r6, [sp, #128]	; 0x80
   249c4:	str	sl, [sp, #16]
   249c8:	mov	r0, #0
   249cc:	mov	r1, #0
   249d0:	strd	r0, [r2]
   249d4:	ldr	r1, [sp, #16]
   249d8:	ldr	r0, [r1, #64]	; 0x40
   249dc:	cmp	r0, #31
   249e0:	beq	2557c <__assert_fail@plt+0x14024>
   249e4:	lsl	r3, r0, #5
   249e8:	add	ip, r0, #1
   249ec:	ldr	r0, [r1, #56]	; 0x38
   249f0:	add	r8, r3, #4
   249f4:	add	r7, r0, r3
   249f8:	mov	lr, #16
   249fc:	str	ip, [r1, #64]	; 0x40
   24a00:	add	r3, r3, lr
   24a04:	add	r8, r0, r8
   24a08:	str	r5, [r7, #4]
   24a0c:	add	r3, r0, r3
   24a10:	mvn	ip, #0
   24a14:	str	r4, [r7, #8]
   24a18:	cmp	r6, #0
   24a1c:	str	r6, [r7, #12]
   24a20:	strb	lr, [sp, #132]	; 0x84
   24a24:	ldrd	sl, [r2]
   24a28:	strd	sl, [r7, #24]
   24a2c:	ldrb	lr, [r3, #14]
   24a30:	bic	lr, lr, #12
   24a34:	strb	lr, [r3, #14]
   24a38:	str	r5, [r7, #16]
   24a3c:	str	r5, [r7, #20]
   24a40:	str	ip, [r7, #32]
   24a44:	str	r8, [r4]
   24a48:	beq	25508 <__assert_fail@plt+0x13fb0>
   24a4c:	cmp	r8, #0
   24a50:	str	r8, [r6]
   24a54:	beq	25508 <__assert_fail@plt+0x13fb0>
   24a58:	mov	sl, #0
   24a5c:	mov	fp, #0
   24a60:	strd	sl, [r2]
   24a64:	ldr	r3, [r1, #64]	; 0x40
   24a68:	cmp	r3, #31
   24a6c:	lslne	ip, r3, #5
   24a70:	addne	lr, r3, #1
   24a74:	addne	r4, ip, #4
   24a78:	beq	255b8 <__assert_fail@plt+0x14060>
   24a7c:	add	r3, r0, ip
   24a80:	str	lr, [r1, #64]	; 0x40
   24a84:	mov	lr, #10
   24a88:	add	ip, ip, #16
   24a8c:	add	r4, r0, r4
   24a90:	stmib	r3, {r5, r8}
   24a94:	add	r0, r0, ip
   24a98:	mvn	ip, #0
   24a9c:	str	r5, [r3, #12]
   24aa0:	cmp	r4, #0
   24aa4:	strb	lr, [sp, #132]	; 0x84
   24aa8:	ldrd	sl, [r2]
   24aac:	strd	sl, [r3, #24]
   24ab0:	ldrb	lr, [r0, #14]
   24ab4:	bic	lr, lr, #12
   24ab8:	strb	lr, [r0, #14]
   24abc:	str	r5, [r3, #16]
   24ac0:	str	r5, [r3, #20]
   24ac4:	str	ip, [r3, #32]
   24ac8:	str	r4, [r7, #4]
   24acc:	beq	25508 <__assert_fail@plt+0x13fb0>
   24ad0:	ldr	r3, [sp, #24]
   24ad4:	add	r9, r9, #1
   24ad8:	cmp	r9, r3
   24adc:	bgt	253c8 <__assert_fail@plt+0x13e70>
   24ae0:	mov	r7, r6
   24ae4:	mov	sl, r1
   24ae8:	ldr	r8, [r6]
   24aec:	b	248f8 <__assert_fail@plt+0x133a0>
   24af0:	ldr	r4, [r5, #24]
   24af4:	mov	r1, r0
   24af8:	ldr	r6, [sp, #20]
   24afc:	ldr	r7, [sp, #32]
   24b00:	add	r3, r4, #1
   24b04:	mov	r0, r6
   24b08:	str	r3, [r5, #24]
   24b0c:	orr	r2, r7, #8388608	; 0x800000
   24b10:	bl	1afe8 <__assert_fail@plt+0x9a90>
   24b14:	ldr	r3, [r9, #40]	; 0x28
   24b18:	ldrb	r2, [r6, #4]
   24b1c:	add	r3, r3, r0
   24b20:	cmp	r2, #9
   24b24:	str	r3, [r9, #40]	; 0x28
   24b28:	moveq	r5, #0
   24b2c:	beq	252d0 <__assert_fail@plt+0x13d78>
   24b30:	ldr	r3, [sp, #200]	; 0xc8
   24b34:	mov	r1, r5
   24b38:	mov	r2, r6
   24b3c:	add	r0, r3, #1
   24b40:	ldr	r3, [sp, #204]	; 0xcc
   24b44:	stm	sp, {r0, r3}
   24b48:	mov	r3, r7
   24b4c:	mov	r0, r9
   24b50:	bl	26f00 <__assert_fail@plt+0x159a8>
   24b54:	ldr	r3, [sp, #204]	; 0xcc
   24b58:	mov	r5, r0
   24b5c:	ldr	r3, [r3]
   24b60:	cmp	r3, #0
   24b64:	bne	24b90 <__assert_fail@plt+0x13638>
   24b68:	ldr	r3, [sp, #20]
   24b6c:	ldrb	r3, [r3, #4]
   24b70:	cmp	r3, #9
   24b74:	beq	252d0 <__assert_fail@plt+0x13d78>
   24b78:	cmp	r0, #0
   24b7c:	beq	24b84 <__assert_fail@plt+0x1362c>
   24b80:	bl	1c254 <__assert_fail@plt+0xacfc>
   24b84:	ldr	r2, [sp, #204]	; 0xcc
   24b88:	mov	r3, #8
   24b8c:	str	r3, [r2]
   24b90:	mov	r3, #0
   24b94:	str	r3, [sp, #28]
   24b98:	ldr	r0, [sp, #28]
   24b9c:	add	sp, sp, #164	; 0xa4
   24ba0:	ldrd	r4, [sp]
   24ba4:	ldrd	r6, [sp, #8]
   24ba8:	ldrd	r8, [sp, #16]
   24bac:	ldrd	sl, [sp, #24]
   24bb0:	add	sp, sp, #32
   24bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   24bb8:	ldr	r3, [sp, #20]
   24bbc:	ldr	r5, [r3]
   24bc0:	movw	r3, #783	; 0x30f
   24bc4:	tst	r5, r3
   24bc8:	beq	24c28 <__assert_fail@plt+0x136d0>
   24bcc:	ldrb	r3, [sl, #88]	; 0x58
   24bd0:	ands	r4, r3, #16
   24bd4:	bne	24c28 <__assert_fail@plt+0x136d0>
   24bd8:	orr	r3, r3, #16
   24bdc:	ands	r2, r3, #8
   24be0:	mov	r1, r3
   24be4:	strb	r3, [sl, #88]	; 0x58
   24be8:	bne	26964 <__assert_fail@plt+0x1540c>
   24bec:	mov	r3, #0
   24bf0:	movt	r3, #1023	; 0x3ff
   24bf4:	tst	r1, #4
   24bf8:	mvn	r1, #2013265921	; 0x78000001
   24bfc:	strd	r2, [sl, #96]	; 0x60
   24c00:	mvn	r3, #-134217727	; 0xf8000001
   24c04:	str	r1, [sl, #104]	; 0x68
   24c08:	str	r3, [sl, #108]	; 0x6c
   24c0c:	beq	268e4 <__assert_fail@plt+0x1538c>
   24c10:	ldr	r3, [sp, #20]
   24c14:	str	r2, [sl, #112]	; 0x70
   24c18:	str	r2, [sl, #116]	; 0x74
   24c1c:	str	r2, [sl, #120]	; 0x78
   24c20:	str	r2, [sl, #124]	; 0x7c
   24c24:	ldr	r5, [r3]
   24c28:	sub	r3, r5, #256	; 0x100
   24c2c:	bics	r6, r3, #256	; 0x100
   24c30:	bne	25e88 <__assert_fail@plt+0x14930>
   24c34:	cmp	r5, #256	; 0x100
   24c38:	beq	26084 <__assert_fail@plt+0x14b2c>
   24c3c:	ldr	r2, [sp, #20]
   24c40:	mov	r3, #5
   24c44:	str	r3, [r2]
   24c48:	ldr	r2, [sl, #64]	; 0x40
   24c4c:	cmp	r2, #31
   24c50:	beq	2687c <__assert_fail@plt+0x15324>
   24c54:	lsl	r3, r2, r3
   24c58:	add	r1, r2, #1
   24c5c:	ldr	r2, [sl, #56]	; 0x38
   24c60:	add	r4, r3, #4
   24c64:	add	ip, r2, r3
   24c68:	add	r3, r3, #16
   24c6c:	str	r1, [sl, #64]	; 0x40
   24c70:	add	r3, r2, r3
   24c74:	add	r4, r2, r4
   24c78:	ldr	r2, [sp, #20]
   24c7c:	mov	lr, #0
   24c80:	mvn	r5, #0
   24c84:	str	lr, [ip, #4]
   24c88:	str	lr, [ip, #8]
   24c8c:	str	lr, [ip, #12]
   24c90:	ldrd	r0, [r2]
   24c94:	strd	r0, [ip, #24]
   24c98:	ldrb	r2, [r3, #14]
   24c9c:	bic	r2, r2, #12
   24ca0:	strb	r2, [r3, #14]
   24ca4:	str	lr, [ip, #16]
   24ca8:	str	lr, [ip, #20]
   24cac:	str	r5, [ip, #32]
   24cb0:	ldr	r2, [sp, #20]
   24cb4:	mov	r3, #10
   24cb8:	str	r3, [r2]
   24cbc:	ldr	r2, [sl, #64]	; 0x40
   24cc0:	cmp	r2, #31
   24cc4:	beq	26480 <__assert_fail@plt+0x14f28>
   24cc8:	ldr	r0, [sl, #56]	; 0x38
   24ccc:	lsl	r3, r2, #5
   24cd0:	add	r2, r2, #1
   24cd4:	add	r5, r3, #4
   24cd8:	add	r1, r0, r3
   24cdc:	add	r3, r3, #16
   24ce0:	str	r2, [sl, #64]	; 0x40
   24ce4:	add	r5, r0, r5
   24ce8:	add	r0, r0, r3
   24cec:	ldr	r3, [sp, #20]
   24cf0:	mov	ip, #0
   24cf4:	mvn	lr, #0
   24cf8:	str	ip, [r1, #4]
   24cfc:	str	ip, [r1, #8]
   24d00:	str	ip, [r1, #12]
   24d04:	ldrd	r2, [r3]
   24d08:	strd	r2, [r1, #24]
   24d0c:	ldrb	r3, [r0, #14]
   24d10:	bic	r3, r3, #12
   24d14:	strb	r3, [r0, #14]
   24d18:	str	ip, [r1, #16]
   24d1c:	str	ip, [r1, #20]
   24d20:	str	lr, [r1, #32]
   24d24:	mov	r2, #0
   24d28:	mov	r3, #0
   24d2c:	strd	r2, [sp, #128]	; 0x80
   24d30:	ldr	r2, [sl, #64]	; 0x40
   24d34:	cmp	r2, #31
   24d38:	beq	26454 <__assert_fail@plt+0x14efc>
   24d3c:	ldr	r0, [sl, #56]	; 0x38
   24d40:	lsl	r3, r2, #5
   24d44:	add	r2, r2, #1
   24d48:	add	r6, r3, #4
   24d4c:	add	ip, r0, r3
   24d50:	mov	lr, #0
   24d54:	str	r2, [sl, #64]	; 0x40
   24d58:	mov	r2, #10
   24d5c:	add	r3, r3, #16
   24d60:	str	lr, [ip, #4]
   24d64:	add	r1, r0, r3
   24d68:	add	r6, r0, r6
   24d6c:	strd	r4, [ip, #8]
   24d70:	mvn	r0, #0
   24d74:	cmp	r4, lr
   24d78:	str	r6, [sp, #28]
   24d7c:	strb	r2, [sp, #132]	; 0x84
   24d80:	ldrd	r2, [sp, #128]	; 0x80
   24d84:	strd	r2, [ip, #24]
   24d88:	ldrb	r3, [r1, #14]
   24d8c:	bic	r3, r3, #12
   24d90:	strb	r3, [r1, #14]
   24d94:	str	lr, [ip, #16]
   24d98:	str	lr, [ip, #20]
   24d9c:	str	r0, [ip, #32]
   24da0:	beq	262f8 <__assert_fail@plt+0x14da0>
   24da4:	cmp	r5, lr
   24da8:	str	r6, [r4]
   24dac:	beq	24fec <__assert_fail@plt+0x13a94>
   24db0:	cmp	r6, lr
   24db4:	str	r6, [r5]
   24db8:	beq	24fec <__assert_fail@plt+0x13a94>
   24dbc:	mov	r1, r9
   24dc0:	ldr	r0, [sp, #20]
   24dc4:	ldr	r2, [sp, #32]
   24dc8:	bl	1afe8 <__assert_fail@plt+0x9a90>
   24dcc:	ldr	r3, [r9, #40]	; 0x28
   24dd0:	add	r3, r3, r0
   24dd4:	str	r3, [r9, #40]	; 0x28
   24dd8:	b	24b98 <__assert_fail@plt+0x13640>
   24ddc:	sub	r1, r2, #33	; 0x21
   24de0:	movw	r3, #58808	; 0xe5b8
   24de4:	movt	r3, #2
   24de8:	clz	r1, r1
   24dec:	lsr	r1, r1, #5
   24df0:	movw	r2, #58736	; 0xe570
   24df4:	movt	r2, #2
   24df8:	str	r1, [sp]
   24dfc:	mov	r0, sl
   24e00:	ldr	r1, [sp, #204]	; 0xcc
   24e04:	str	r1, [sp, #4]
   24e08:	ldr	r1, [r9, #64]	; 0x40
   24e0c:	bl	2037c <__assert_fail@plt+0xee24>
   24e10:	ldr	r3, [sp, #204]	; 0xcc
   24e14:	str	r0, [sp, #28]
   24e18:	ldr	r2, [r3]
   24e1c:	clz	r3, r0
   24e20:	lsr	r3, r3, #5
   24e24:	cmp	r2, #0
   24e28:	moveq	r3, #0
   24e2c:	cmp	r3, #0
   24e30:	beq	24770 <__assert_fail@plt+0x13218>
   24e34:	b	24b90 <__assert_fail@plt+0x13638>
   24e38:	ldr	r2, [sl, #64]	; 0x40
   24e3c:	cmp	r2, #31
   24e40:	beq	263d0 <__assert_fail@plt+0x14e78>
   24e44:	ldr	r0, [sl, #56]	; 0x38
   24e48:	lsl	r3, r2, #5
   24e4c:	add	r2, r2, #1
   24e50:	add	ip, r3, #4
   24e54:	add	r1, r0, r3
   24e58:	add	r3, r3, #16
   24e5c:	str	r2, [sl, #64]	; 0x40
   24e60:	adds	r2, r0, ip
   24e64:	add	r0, r0, r3
   24e68:	ldr	r3, [sp, #20]
   24e6c:	mov	r4, #0
   24e70:	mvn	r7, #0
   24e74:	str	r2, [sp, #28]
   24e78:	str	r4, [r1, #4]
   24e7c:	str	r4, [r1, #8]
   24e80:	str	r4, [r1, #12]
   24e84:	ldrd	r2, [r3]
   24e88:	strd	r2, [r1, #24]
   24e8c:	ldrb	r3, [r0, #14]
   24e90:	bic	r3, r3, #12
   24e94:	strb	r3, [r0, #14]
   24e98:	str	r4, [r1, #16]
   24e9c:	str	r4, [r1, #20]
   24ea0:	str	r7, [r1, #32]
   24ea4:	beq	24fec <__assert_fail@plt+0x13a94>
   24ea8:	ldr	r3, [sl, #92]	; 0x5c
   24eac:	cmp	r3, #1
   24eb0:	ble	24770 <__assert_fail@plt+0x13218>
   24eb4:	ldr	r8, [sp, #20]
   24eb8:	ldr	r5, [sp, #28]
   24ebc:	ldr	r6, [sp, #32]
   24ec0:	b	24ed0 <__assert_fail@plt+0x13978>
   24ec4:	subs	r5, ip, #0
   24ec8:	str	ip, [fp]
   24ecc:	beq	24fec <__assert_fail@plt+0x13a94>
   24ed0:	ldr	r3, [r9, #40]	; 0x28
   24ed4:	ldr	r2, [r9, #56]	; 0x38
   24ed8:	cmp	r2, r3
   24edc:	ble	2607c <__assert_fail@plt+0x14b24>
   24ee0:	ldr	r2, [r9, #28]
   24ee4:	cmp	r3, r2
   24ee8:	beq	2607c <__assert_fail@plt+0x14b24>
   24eec:	ldr	r2, [r9, #8]
   24ef0:	ldr	r3, [r2, r3, lsl #2]
   24ef4:	cmn	r3, #1
   24ef8:	bne	2607c <__assert_fail@plt+0x14b24>
   24efc:	mov	r2, r6
   24f00:	mov	r1, r9
   24f04:	mov	r0, r8
   24f08:	bl	1afe8 <__assert_fail@plt+0x9a90>
   24f0c:	ldr	r3, [r9, #40]	; 0x28
   24f10:	add	r3, r3, r0
   24f14:	str	r3, [r9, #40]	; 0x28
   24f18:	ldr	r2, [sl, #64]	; 0x40
   24f1c:	cmp	r2, #31
   24f20:	beq	26040 <__assert_fail@plt+0x14ae8>
   24f24:	ldr	fp, [sl, #56]	; 0x38
   24f28:	lsl	r3, r2, #5
   24f2c:	add	r2, r2, #1
   24f30:	add	r0, r3, #4
   24f34:	add	ip, fp, r3
   24f38:	add	r3, r3, #16
   24f3c:	str	r2, [sl, #64]	; 0x40
   24f40:	add	r1, fp, r3
   24f44:	add	fp, fp, r0
   24f48:	str	r4, [ip, #4]
   24f4c:	str	r4, [ip, #8]
   24f50:	str	r4, [ip, #12]
   24f54:	ldrd	r2, [r8]
   24f58:	strd	r2, [ip, #24]
   24f5c:	ldrb	r3, [r1, #14]
   24f60:	bic	r3, r3, #12
   24f64:	strb	r3, [r1, #14]
   24f68:	str	r4, [ip, #16]
   24f6c:	str	r4, [ip, #20]
   24f70:	str	r7, [ip, #32]
   24f74:	mov	r2, #0
   24f78:	mov	r3, #0
   24f7c:	strd	r2, [sp, #128]	; 0x80
   24f80:	add	r2, sp, #128	; 0x80
   24f84:	ldr	r1, [sl, #64]	; 0x40
   24f88:	cmp	r1, #31
   24f8c:	beq	2600c <__assert_fail@plt+0x14ab4>
   24f90:	ldr	r0, [sl, #56]	; 0x38
   24f94:	lsl	r3, r1, #5
   24f98:	add	lr, r1, #1
   24f9c:	add	ip, r3, #4
   24fa0:	add	r1, r0, r3
   24fa4:	str	lr, [sl, #64]	; 0x40
   24fa8:	mov	lr, #16
   24fac:	add	r3, r3, lr
   24fb0:	add	ip, r0, ip
   24fb4:	add	r0, r0, r3
   24fb8:	stmib	r1, {r4, r5, fp}
   24fbc:	cmp	fp, #0
   24fc0:	strb	lr, [sp, #132]	; 0x84
   24fc4:	ldrd	r2, [r2]
   24fc8:	strd	r2, [r1, #24]
   24fcc:	ldrb	r3, [r0, #14]
   24fd0:	bic	r3, r3, #12
   24fd4:	strb	r3, [r0, #14]
   24fd8:	str	r4, [r1, #16]
   24fdc:	str	r4, [r1, #20]
   24fe0:	str	r7, [r1, #32]
   24fe4:	str	ip, [r5]
   24fe8:	bne	24ec4 <__assert_fail@plt+0x1396c>
   24fec:	mov	r2, #0
   24ff0:	mov	r3, #12
   24ff4:	str	r2, [sp, #28]
   24ff8:	ldr	r2, [sp, #204]	; 0xcc
   24ffc:	str	r3, [r2]
   25000:	b	24b98 <__assert_fail@plt+0x13640>
   25004:	ldr	r2, [sl, #64]	; 0x40
   25008:	cmp	r2, #31
   2500c:	beq	26314 <__assert_fail@plt+0x14dbc>
   25010:	ldr	r0, [sl, #56]	; 0x38
   25014:	lsl	r3, r2, #5
   25018:	add	r2, r2, #1
   2501c:	add	lr, r3, #4
   25020:	add	r1, r0, r3
   25024:	add	r3, r3, #16
   25028:	str	r2, [sl, #64]	; 0x40
   2502c:	adds	r2, r0, lr
   25030:	add	r0, r0, r3
   25034:	ldr	r3, [sp, #20]
   25038:	mov	ip, #0
   2503c:	mvn	lr, #0
   25040:	str	r2, [sp, #28]
   25044:	str	ip, [r1, #4]
   25048:	str	ip, [r1, #8]
   2504c:	str	ip, [r1, #12]
   25050:	ldrd	r2, [r3]
   25054:	strd	r2, [r1, #24]
   25058:	ldrb	r3, [r0, #14]
   2505c:	bic	r3, r3, #12
   25060:	strb	r3, [r0, #14]
   25064:	str	ip, [r1, #16]
   25068:	str	ip, [r1, #20]
   2506c:	str	lr, [r1, #32]
   25070:	beq	24fec <__assert_fail@plt+0x13a94>
   25074:	ldr	r3, [sl, #92]	; 0x5c
   25078:	cmp	r3, #1
   2507c:	ble	24770 <__assert_fail@plt+0x13218>
   25080:	ldrb	r3, [sl, #88]	; 0x58
   25084:	orr	r3, r3, #2
   25088:	strb	r3, [sl, #88]	; 0x58
   2508c:	b	24770 <__assert_fail@plt+0x13218>
   25090:	ldr	r3, [sp, #20]
   25094:	mov	r4, #1
   25098:	ldr	r2, [sl, #84]	; 0x54
   2509c:	ldr	r3, [r3]
   250a0:	lsl	r3, r4, r3
   250a4:	ands	r2, r3, r2
   250a8:	beq	26340 <__assert_fail@plt+0x14de8>
   250ac:	ldr	r1, [sl, #64]	; 0x40
   250b0:	ldr	r2, [sl, #80]	; 0x50
   250b4:	cmp	r1, #31
   250b8:	orr	r3, r2, r3
   250bc:	str	r3, [sl, #80]	; 0x50
   250c0:	beq	2642c <__assert_fail@plt+0x14ed4>
   250c4:	ldr	r0, [sl, #56]	; 0x38
   250c8:	lsl	r3, r1, #5
   250cc:	add	r4, r1, #1
   250d0:	add	r2, r3, #4
   250d4:	add	r1, r0, r3
   250d8:	add	r3, r3, #16
   250dc:	str	r4, [sl, #64]	; 0x40
   250e0:	adds	r2, r0, r2
   250e4:	add	r0, r0, r3
   250e8:	ldr	r3, [sp, #20]
   250ec:	mov	ip, #0
   250f0:	mvn	lr, #0
   250f4:	str	r2, [sp, #28]
   250f8:	str	ip, [r1, #4]
   250fc:	str	ip, [r1, #8]
   25100:	str	ip, [r1, #12]
   25104:	ldrd	r2, [r3]
   25108:	strd	r2, [r1, #24]
   2510c:	ldrb	r3, [r0, #14]
   25110:	bic	r3, r3, #12
   25114:	strb	r3, [r0, #14]
   25118:	str	ip, [r1, #16]
   2511c:	str	ip, [r1, #20]
   25120:	str	lr, [r1, #32]
   25124:	beq	24fec <__assert_fail@plt+0x13a94>
   25128:	ldrb	r3, [sl, #88]	; 0x58
   2512c:	ldr	r2, [sl, #76]	; 0x4c
   25130:	orr	r3, r3, #2
   25134:	add	r2, r2, #1
   25138:	str	r2, [sl, #76]	; 0x4c
   2513c:	strb	r3, [sl, #88]	; 0x58
   25140:	b	24770 <__assert_fail@plt+0x13218>
   25144:	mov	r6, #0
   25148:	mov	r1, #1
   2514c:	mov	r0, #32
   25150:	str	r6, [sp, #68]	; 0x44
   25154:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   25158:	mov	r4, r0
   2515c:	mov	r1, #1
   25160:	mov	r0, #40	; 0x28
   25164:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   25168:	clz	r5, r0
   2516c:	cmp	r4, r6
   25170:	str	r0, [sp, #16]
   25174:	lsr	r5, r5, #5
   25178:	moveq	r5, #1
   2517c:	cmp	r5, r6
   25180:	bne	26354 <__assert_fail@plt+0x14dfc>
   25184:	ldr	r6, [sp, #20]
   25188:	mov	r1, r9
   2518c:	ldr	r2, [sp, #32]
   25190:	mov	r0, r6
   25194:	bl	17b30 <__assert_fail@plt+0x65d8>
   25198:	ldrb	r3, [r6, #4]
   2519c:	mov	fp, r0
   251a0:	cmp	r3, #2
   251a4:	beq	26304 <__assert_fail@plt+0x14dac>
   251a8:	cmp	r3, #25
   251ac:	strne	r5, [sp, #44]	; 0x2c
   251b0:	beq	25f34 <__assert_fail@plt+0x149dc>
   251b4:	cmp	r3, #21
   251b8:	beq	25f24 <__assert_fail@plt+0x149cc>
   251bc:	ldr	r5, [sp, #20]
   251c0:	mov	r3, #0
   251c4:	mov	r0, #1
   251c8:	mov	r6, #3
   251cc:	str	sl, [sp, #24]
   251d0:	ldr	r2, [sp, #32]
   251d4:	str	r3, [sp, #36]	; 0x24
   251d8:	str	r3, [sp, #40]	; 0x28
   251dc:	add	r3, sp, #96	; 0x60
   251e0:	str	r3, [sp, #28]
   251e4:	ubfx	r1, r2, #16, #1
   251e8:	mov	sl, r2
   251ec:	str	r1, [sp, #48]	; 0x30
   251f0:	ldr	ip, [sp, #28]
   251f4:	mov	r3, fp
   251f8:	mov	r2, r5
   251fc:	mov	r1, r9
   25200:	str	sl, [sp]
   25204:	str	r0, [sp, #4]
   25208:	add	r0, sp, #72	; 0x48
   2520c:	str	r6, [sp, #72]	; 0x48
   25210:	str	ip, [sp, #76]	; 0x4c
   25214:	bl	1bca4 <__assert_fail@plt+0xa74c>
   25218:	cmp	r0, #0
   2521c:	bne	2606c <__assert_fail@plt+0x14b14>
   25220:	mov	r2, sl
   25224:	mov	r1, r9
   25228:	mov	r0, r5
   2522c:	bl	17b30 <__assert_fail@plt+0x65d8>
   25230:	ldr	r3, [sp, #72]	; 0x48
   25234:	mov	fp, r0
   25238:	sub	r2, r3, #2
   2523c:	bics	r2, r2, #2
   25240:	beq	25258 <__assert_fail@plt+0x13d00>
   25244:	ldrb	r2, [r5, #4]
   25248:	cmp	r2, #2
   2524c:	beq	25fa8 <__assert_fail@plt+0x14a50>
   25250:	cmp	r2, #22
   25254:	beq	26108 <__assert_fail@plt+0x14bb0>
   25258:	cmp	r3, #4
   2525c:	ldrls	pc, [pc, r3, lsl #2]
   25260:	b	25dfc <__assert_fail@plt+0x148a4>
   25264:	strdeq	r5, [r2], -r0
   25268:	andeq	r5, r2, r0, asr #27
   2526c:	andeq	r5, r2, r4, ror r3
   25270:	andeq	r5, r2, r4, ror r3
   25274:	strdeq	r5, [r2], -ip
   25278:	sub	r1, r2, #35	; 0x23
   2527c:	movw	r3, #56080	; 0xdb10
   25280:	movt	r3, #2
   25284:	clz	r1, r1
   25288:	movw	r2, #58752	; 0xe580
   2528c:	movt	r2, #2
   25290:	lsr	r1, r1, #5
   25294:	b	24df8 <__assert_fail@plt+0x138a0>
   25298:	mov	r2, #0
   2529c:	mov	r3, #5
   252a0:	str	r2, [sp, #28]
   252a4:	ldr	r2, [sp, #204]	; 0xcc
   252a8:	str	r3, [r2]
   252ac:	b	24b98 <__assert_fail@plt+0x13640>
   252b0:	ldr	r3, [sp, #32]
   252b4:	ands	r3, r3, #131072	; 0x20000
   252b8:	bne	246f4 <__assert_fail@plt+0x1319c>
   252bc:	str	r3, [sp, #28]
   252c0:	mov	r2, #16
   252c4:	ldr	r3, [sp, #204]	; 0xcc
   252c8:	str	r2, [r3]
   252cc:	b	24b98 <__assert_fail@plt+0x13640>
   252d0:	cmp	r4, #8
   252d4:	bls	25dac <__assert_fail@plt+0x14854>
   252d8:	mov	r3, #0
   252dc:	mov	r2, #0
   252e0:	strd	r2, [sp, #128]	; 0x80
   252e4:	ldr	r3, [sl, #64]	; 0x40
   252e8:	cmp	r3, #31
   252ec:	beq	263a4 <__assert_fail@plt+0x14e4c>
   252f0:	ldr	r0, [sl, #56]	; 0x38
   252f4:	lsl	r1, r3, #5
   252f8:	add	r2, r3, #1
   252fc:	add	r6, r1, #4
   25300:	add	r3, r0, r1
   25304:	mov	ip, #0
   25308:	str	r2, [sl, #64]	; 0x40
   2530c:	mov	lr, #17
   25310:	add	r8, r0, r6
   25314:	str	ip, [r3, #4]
   25318:	add	r2, r1, #16
   2531c:	mvn	fp, #0
   25320:	str	r5, [r3, #8]
   25324:	add	r2, r0, r2
   25328:	cmp	r5, ip
   2532c:	str	ip, [r3, #12]
   25330:	str	r8, [sp, #28]
   25334:	strb	lr, [sp, #132]	; 0x84
   25338:	ldrd	r6, [sp, #128]	; 0x80
   2533c:	strd	r6, [r3, #24]
   25340:	ldrb	lr, [r2, #14]
   25344:	bic	lr, lr, #12
   25348:	strb	lr, [r2, #14]
   2534c:	str	ip, [r3, #16]
   25350:	str	ip, [r3, #20]
   25354:	str	fp, [r3, #32]
   25358:	ldr	r3, [sp, #28]
   2535c:	strne	r8, [r5]
   25360:	cmp	r3, #0
   25364:	beq	24fec <__assert_fail@plt+0x13a94>
   25368:	add	r1, r0, r1
   2536c:	str	r4, [r1, #24]
   25370:	b	24770 <__assert_fail@plt+0x13218>
   25374:	ldr	r7, [sp, #76]	; 0x4c
   25378:	mov	r0, r7
   2537c:	bl	11414 <strlen@plt>
   25380:	cmp	r0, #1
   25384:	bne	26390 <__assert_fail@plt+0x14e38>
   25388:	ldr	r1, [sp, #204]	; 0xcc
   2538c:	mov	r2, #0
   25390:	ldrb	r3, [r7]
   25394:	str	r2, [r1]
   25398:	asr	r1, r3, #5
   2539c:	and	r3, r3, #31
   253a0:	ldr	r2, [r4, r1, lsl #2]
   253a4:	orr	r3, r2, r0, lsl r3
   253a8:	str	r3, [r4, r1, lsl #2]
   253ac:	ldrb	r3, [r5, #4]
   253b0:	cmp	r3, #2
   253b4:	beq	25fa8 <__assert_fail@plt+0x14a50>
   253b8:	cmp	r3, #21
   253bc:	beq	264d8 <__assert_fail@plt+0x14f80>
   253c0:	mov	r0, #0
   253c4:	b	251f0 <__assert_fail@plt+0x13c98>
   253c8:	ldr	r9, [sp, #44]	; 0x2c
   253cc:	mov	sl, r1
   253d0:	mov	fp, r2
   253d4:	ldr	r3, [sp, #40]	; 0x28
   253d8:	cmp	r3, #0
   253dc:	beq	257a8 <__assert_fail@plt+0x14250>
   253e0:	mov	r3, #0
   253e4:	mov	r2, #0
   253e8:	strd	r2, [fp]
   253ec:	ldr	r3, [sl, #64]	; 0x40
   253f0:	cmp	r3, #31
   253f4:	beq	25d40 <__assert_fail@plt+0x147e8>
   253f8:	ldr	r0, [sl, #56]	; 0x38
   253fc:	lsl	r2, r3, #5
   25400:	add	r3, r3, #1
   25404:	add	ip, r2, #4
   25408:	ldr	r6, [sp, #40]	; 0x28
   2540c:	add	r1, r0, r2
   25410:	add	ip, r0, ip
   25414:	str	r3, [sl, #64]	; 0x40
   25418:	mov	r3, #16
   2541c:	mvn	lr, #0
   25420:	add	r2, r2, r3
   25424:	add	r0, r0, r2
   25428:	stmib	r1, {r5, r6}
   2542c:	str	r4, [r1, #12]
   25430:	strb	r3, [sp, #132]	; 0x84
   25434:	ldrd	r2, [fp]
   25438:	strd	r2, [r1, #24]
   2543c:	ldrb	r3, [r0, #14]
   25440:	bic	r3, r3, #12
   25444:	strb	r3, [r0, #14]
   25448:	ldr	r3, [sp, #204]	; 0xcc
   2544c:	str	r5, [r1, #16]
   25450:	str	r5, [r1, #20]
   25454:	str	lr, [r1, #32]
   25458:	str	ip, [r6]
   2545c:	ldr	r3, [r3]
   25460:	str	ip, [r4]
   25464:	cmp	r3, #0
   25468:	bne	25d20 <__assert_fail@plt+0x147c8>
   2546c:	str	ip, [sp, #28]
   25470:	ldr	r3, [sp, #36]	; 0x24
   25474:	cmp	r3, #0
   25478:	ldr	r3, [sp, #20]
   2547c:	ldrb	r7, [r3, #4]
   25480:	beq	247ac <__assert_fail@plt+0x13254>
   25484:	cmp	r7, #23
   25488:	cmpne	r7, #11
   2548c:	bne	247ac <__assert_fail@plt+0x13254>
   25490:	ldr	r3, [sp, #28]
   25494:	cmp	r3, #0
   25498:	beq	254a4 <__assert_fail@plt+0x13f4c>
   2549c:	mov	r0, r3
   254a0:	bl	1c254 <__assert_fail@plt+0xacfc>
   254a4:	mov	r2, #0
   254a8:	mov	r3, #13
   254ac:	str	r2, [sp, #28]
   254b0:	ldr	r2, [sp, #204]	; 0xcc
   254b4:	str	r3, [r2]
   254b8:	b	24b98 <__assert_fail@plt+0x13640>
   254bc:	mov	r3, r2
   254c0:	add	fp, r8, #8
   254c4:	b	24904 <__assert_fail@plt+0x133ac>
   254c8:	mov	r0, #996	; 0x3e4
   254cc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   254d0:	cmp	r0, #0
   254d4:	beq	25694 <__assert_fail@plt+0x1413c>
   254d8:	ldr	r1, [sl, #56]	; 0x38
   254dc:	mov	r2, #1
   254e0:	mov	lr, #4
   254e4:	mov	r3, #0
   254e8:	str	r1, [r0]
   254ec:	str	r0, [sl, #56]	; 0x38
   254f0:	b	24924 <__assert_fail@plt+0x133cc>
   254f4:	mov	r2, r6
   254f8:	mov	r6, r0
   254fc:	str	sl, [sp, #16]
   25500:	b	249c8 <__assert_fail@plt+0x13470>
   25504:	str	r0, [r1]
   25508:	ldr	r2, [sp, #204]	; 0xcc
   2550c:	mov	r3, #12
   25510:	str	r3, [r2]
   25514:	mov	r3, #0
   25518:	ldr	r0, [sp, #28]
   2551c:	str	r3, [sp, #28]
   25520:	bl	1c254 <__assert_fail@plt+0xacfc>
   25524:	b	24b98 <__assert_fail@plt+0x13640>
   25528:	mov	r1, r9
   2552c:	ldr	r0, [sp, #20]
   25530:	ldr	r2, [sp, #32]
   25534:	bl	1afe8 <__assert_fail@plt+0x9a90>
   25538:	ldr	r3, [r9, #40]	; 0x28
   2553c:	ldr	r2, [sp, #28]
   25540:	add	r0, r3, r0
   25544:	cmp	r2, #0
   25548:	str	r0, [r9, #40]	; 0x28
   2554c:	beq	25760 <__assert_fail@plt+0x14208>
   25550:	ldrb	r3, [r2, #24]
   25554:	mov	r7, r2
   25558:	add	fp, sp, #128	; 0x80
   2555c:	cmp	r3, #17
   25560:	mov	r3, #0
   25564:	str	r3, [sp, #40]	; 0x28
   25568:	mov	r3, #1
   2556c:	str	r3, [sp, #24]
   25570:	beq	256c0 <__assert_fail@plt+0x14168>
   25574:	mov	r6, #10
   25578:	b	2485c <__assert_fail@plt+0x13304>
   2557c:	mov	r0, #996	; 0x3e4
   25580:	str	r2, [sp, #48]	; 0x30
   25584:	bl	2cd58 <__assert_fail@plt+0x1b800>
   25588:	cmp	r0, #0
   2558c:	beq	25508 <__assert_fail@plt+0x13fb0>
   25590:	ldr	r2, [sp, #16]
   25594:	mov	ip, #1
   25598:	mov	r8, #4
   2559c:	mov	r3, #0
   255a0:	ldr	r1, [sp, #16]
   255a4:	ldr	lr, [r2, #56]	; 0x38
   255a8:	str	lr, [r0]
   255ac:	str	r0, [r2, #56]	; 0x38
   255b0:	ldr	r2, [sp, #48]	; 0x30
   255b4:	b	249f4 <__assert_fail@plt+0x1349c>
   255b8:	mov	r0, #996	; 0x3e4
   255bc:	str	r2, [sp, #48]	; 0x30
   255c0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   255c4:	cmp	r0, #0
   255c8:	beq	25508 <__assert_fail@plt+0x13fb0>
   255cc:	ldr	r2, [sp, #16]
   255d0:	mov	lr, #1
   255d4:	mov	r4, #4
   255d8:	mov	ip, #0
   255dc:	ldr	r1, [sp, #16]
   255e0:	ldr	r3, [r2, #56]	; 0x38
   255e4:	str	r3, [r0]
   255e8:	str	r0, [r2, #56]	; 0x38
   255ec:	ldr	r2, [sp, #48]	; 0x30
   255f0:	b	24a7c <__assert_fail@plt+0x13524>
   255f4:	ldr	r8, [sp, #20]
   255f8:	mvn	fp, #0
   255fc:	movw	r7, #32816	; 0x8030
   25600:	mov	r1, r9
   25604:	mov	r0, r8
   25608:	ldr	r2, [sp, #32]
   2560c:	bl	1afe8 <__assert_fail@plt+0x9a90>
   25610:	ldr	r2, [r9, #40]	; 0x28
   25614:	ldrb	r3, [r8, #4]
   25618:	ldrb	r1, [r8]
   2561c:	add	r0, r2, r0
   25620:	cmp	r3, #2
   25624:	str	r0, [r9, #40]	; 0x28
   25628:	beq	25ce8 <__assert_fail@plt+0x14790>
   2562c:	cmp	r3, #24
   25630:	beq	257b0 <__assert_fail@plt+0x14258>
   25634:	cmp	r1, #44	; 0x2c
   25638:	beq	25854 <__assert_fail@plt+0x142fc>
   2563c:	cmp	r3, #1
   25640:	beq	2564c <__assert_fail@plt+0x140f4>
   25644:	mvn	fp, #1
   25648:	b	25600 <__assert_fail@plt+0x140a8>
   2564c:	sub	r2, r1, #48	; 0x30
   25650:	uxtb	r0, r2
   25654:	cmp	r0, #9
   25658:	movhi	r3, #0
   2565c:	movls	r3, #1
   25660:	cmn	fp, #2
   25664:	moveq	r3, #0
   25668:	cmp	r3, #0
   2566c:	beq	25644 <__assert_fail@plt+0x140ec>
   25670:	cmn	fp, #1
   25674:	add	r3, fp, fp, lsl #2
   25678:	moveq	fp, r2
   2567c:	beq	25600 <__assert_fail@plt+0x140a8>
   25680:	add	fp, r1, r3, lsl #1
   25684:	cmp	fp, r7
   25688:	movge	fp, r7
   2568c:	sub	fp, fp, #48	; 0x30
   25690:	b	25600 <__assert_fail@plt+0x140a8>
   25694:	mov	r2, r6
   25698:	mov	r6, r0
   2569c:	str	r0, [fp]
   256a0:	str	sl, [sp, #16]
   256a4:	b	249c8 <__assert_fail@plt+0x13470>
   256a8:	mov	r3, #0
   256ac:	add	fp, sp, #128	; 0x80
   256b0:	mov	r8, r3
   256b4:	str	r3, [sp, #40]	; 0x28
   256b8:	mvn	r3, #0
   256bc:	str	r3, [sp, #24]
   256c0:	mov	r3, r7
   256c4:	ldr	ip, [r7, #20]
   256c8:	b	256d0 <__assert_fail@plt+0x14178>
   256cc:	mov	r3, r2
   256d0:	ldr	r2, [r3, #4]
   256d4:	cmp	r2, #0
   256d8:	bne	256cc <__assert_fail@plt+0x14174>
   256dc:	ldr	r2, [r3, #8]
   256e0:	cmp	r2, #0
   256e4:	bne	256cc <__assert_fail@plt+0x14174>
   256e8:	b	25720 <__assert_fail@plt+0x141c8>
   256ec:	ldr	r1, [r3]
   256f0:	cmp	r1, #0
   256f4:	beq	25750 <__assert_fail@plt+0x141f8>
   256f8:	ldr	r2, [r1, #8]
   256fc:	sub	r0, r3, r2
   25700:	cmp	r2, #0
   25704:	clz	r0, r0
   25708:	mov	r3, r1
   2570c:	lsr	r0, r0, #5
   25710:	moveq	r1, #1
   25714:	movne	r1, r0
   25718:	cmp	r1, #0
   2571c:	beq	256cc <__assert_fail@plt+0x14174>
   25720:	ldrb	r2, [r3, #24]
   25724:	cmp	r2, #17
   25728:	bne	256ec <__assert_fail@plt+0x14194>
   2572c:	ldr	r2, [r3, #20]
   25730:	cmp	ip, r2
   25734:	bne	256ec <__assert_fail@plt+0x14194>
   25738:	ldrb	r2, [r3, #26]
   2573c:	ldr	r1, [r3]
   25740:	orr	r2, r2, #8
   25744:	cmp	r1, #0
   25748:	strb	r2, [r3, #26]
   2574c:	bne	256f8 <__assert_fail@plt+0x141a0>
   25750:	ldr	r3, [sp, #24]
   25754:	cmn	r3, #1
   25758:	bne	25574 <__assert_fail@plt+0x1401c>
   2575c:	b	24850 <__assert_fail@plt+0x132f8>
   25760:	ldr	r3, [sp, #204]	; 0xcc
   25764:	ldr	r3, [r3]
   25768:	cmp	r3, #0
   2576c:	bne	24b90 <__assert_fail@plt+0x13638>
   25770:	mov	r3, #0
   25774:	str	r3, [sp, #28]
   25778:	b	25470 <__assert_fail@plt+0x13f18>
   2577c:	mov	r0, #996	; 0x3e4
   25780:	bl	2cd58 <__assert_fail@plt+0x1b800>
   25784:	subs	r4, r0, #0
   25788:	beq	25508 <__assert_fail@plt+0x13fb0>
   2578c:	ldr	r2, [sl, #56]	; 0x38
   25790:	mov	r1, #1
   25794:	mov	r0, #4
   25798:	mov	r3, #0
   2579c:	str	r2, [r4]
   257a0:	str	r4, [sl, #56]	; 0x38
   257a4:	b	24884 <__assert_fail@plt+0x1332c>
   257a8:	str	r4, [sp, #28]
   257ac:	b	25470 <__assert_fail@plt+0x13f18>
   257b0:	cmn	fp, #1
   257b4:	str	fp, [sp, #24]
   257b8:	beq	25838 <__assert_fail@plt+0x142e0>
   257bc:	cmn	fp, #2
   257c0:	movne	r8, fp
   257c4:	beq	25f98 <__assert_fail@plt+0x14a40>
   257c8:	ldr	r3, [sp, #24]
   257cc:	cmp	r3, #32768	; 0x8000
   257d0:	movlt	r4, #0
   257d4:	movge	r4, #1
   257d8:	cmp	r4, #0
   257dc:	bne	2592c <__assert_fail@plt+0x143d4>
   257e0:	mov	r1, r9
   257e4:	ldr	r0, [sp, #20]
   257e8:	ldr	r2, [sp, #32]
   257ec:	bl	1afe8 <__assert_fail@plt+0x9a90>
   257f0:	ldr	r3, [r9, #40]	; 0x28
   257f4:	ldr	r2, [sp, #28]
   257f8:	add	r0, r3, r0
   257fc:	cmp	r2, #0
   25800:	str	r0, [r9, #40]	; 0x28
   25804:	beq	25760 <__assert_fail@plt+0x14208>
   25808:	ldr	r3, [sp, #24]
   2580c:	orrs	r3, r8, r3
   25810:	bne	2593c <__assert_fail@plt+0x143e4>
   25814:	mov	r0, r2
   25818:	bl	1c254 <__assert_fail@plt+0xacfc>
   2581c:	ldr	r3, [sp, #204]	; 0xcc
   25820:	ldr	r3, [r3]
   25824:	cmp	r3, #0
   25828:	beq	25770 <__assert_fail@plt+0x14218>
   2582c:	b	25514 <__assert_fail@plt+0x13fbc>
   25830:	cmp	r3, #2
   25834:	beq	25d84 <__assert_fail@plt+0x1482c>
   25838:	ldr	r2, [sp, #204]	; 0xcc
   2583c:	mov	r3, #10
   25840:	str	r3, [r2]
   25844:	ldr	r3, [sp, #28]
   25848:	cmp	r3, #0
   2584c:	beq	24b90 <__assert_fail@plt+0x13638>
   25850:	b	25514 <__assert_fail@plt+0x13fbc>
   25854:	cmn	fp, #1
   25858:	str	fp, [sp, #24]
   2585c:	bne	25cd4 <__assert_fail@plt+0x1477c>
   25860:	cmp	r3, #1
   25864:	bne	25838 <__assert_fail@plt+0x142e0>
   25868:	mov	r8, #0
   2586c:	mvn	r3, #0
   25870:	ldr	fp, [sp, #20]
   25874:	movw	r7, #32816	; 0x8030
   25878:	str	r3, [sp, #24]
   2587c:	mov	r3, r6
   25880:	mov	r6, r4
   25884:	mov	r4, r8
   25888:	mov	r8, r9
   2588c:	mov	r9, r3
   25890:	mov	r1, r8
   25894:	mov	r0, fp
   25898:	ldr	r2, [sp, #32]
   2589c:	bl	1afe8 <__assert_fail@plt+0x9a90>
   258a0:	ldr	r2, [r8, #40]	; 0x28
   258a4:	ldrb	r1, [fp, #4]
   258a8:	ldrb	ip, [fp]
   258ac:	add	r0, r2, r0
   258b0:	cmp	r1, #2
   258b4:	str	r0, [r8, #40]	; 0x28
   258b8:	beq	25d6c <__assert_fail@plt+0x14814>
   258bc:	cmp	r1, #24
   258c0:	cmpne	ip, #44	; 0x2c
   258c4:	beq	258dc <__assert_fail@plt+0x14384>
   258c8:	cmp	r1, #1
   258cc:	beq	25c84 <__assert_fail@plt+0x1472c>
   258d0:	mvn	r3, #1
   258d4:	str	r3, [sp, #24]
   258d8:	b	25890 <__assert_fail@plt+0x14338>
   258dc:	mov	r2, r9
   258e0:	mov	r9, r8
   258e4:	mov	r8, r4
   258e8:	mov	r4, r6
   258ec:	mov	r6, r2
   258f0:	ldr	r2, [sp, #24]
   258f4:	cmn	r2, #2
   258f8:	beq	25f98 <__assert_fail@plt+0x14a40>
   258fc:	cmn	r2, #1
   25900:	cmpne	r8, r2
   25904:	bgt	25838 <__assert_fail@plt+0x142e0>
   25908:	cmp	r1, #24
   2590c:	bne	25838 <__assert_fail@plt+0x142e0>
   25910:	cmn	r2, #1
   25914:	bne	257c8 <__assert_fail@plt+0x14270>
   25918:	cmp	r8, #32768	; 0x8000
   2591c:	movlt	r4, #0
   25920:	movge	r4, #1
   25924:	cmp	r4, #0
   25928:	beq	257e0 <__assert_fail@plt+0x14288>
   2592c:	ldr	r2, [sp, #204]	; 0xcc
   25930:	mov	r3, #15
   25934:	str	r3, [r2]
   25938:	b	25844 <__assert_fail@plt+0x142ec>
   2593c:	cmp	r8, #0
   25940:	ble	26c94 <__assert_fail@plt+0x1573c>
   25944:	cmp	r8, #1
   25948:	beq	26ca0 <__assert_fail@plt+0x15748>
   2594c:	ldr	r4, [r2]
   25950:	mov	r3, #2
   25954:	mov	r6, r2
   25958:	add	fp, sp, #128	; 0x80
   2595c:	str	r8, [sp, #16]
   25960:	mov	r8, r3
   25964:	str	r9, [sp, #40]	; 0x28
   25968:	mov	r9, r2
   2596c:	mov	r7, fp
   25970:	b	25978 <__assert_fail@plt+0x14420>
   25974:	mov	r6, r3
   25978:	ldr	r2, [sl, #64]	; 0x40
   2597c:	cmp	r2, #31
   25980:	beq	25bd8 <__assert_fail@plt+0x14680>
   25984:	ldr	r0, [sl, #56]	; 0x38
   25988:	lsl	r3, r2, #5
   2598c:	add	r2, r2, #1
   25990:	add	lr, r3, #4
   25994:	add	ip, r0, r3
   25998:	add	r3, r3, #16
   2599c:	str	r2, [sl, #64]	; 0x40
   259a0:	add	r1, r0, r3
   259a4:	add	r0, r0, lr
   259a8:	str	r5, [ip, #4]
   259ac:	mvn	lr, #0
   259b0:	cmp	r0, #0
   259b4:	str	r5, [ip, #8]
   259b8:	str	r5, [ip, #12]
   259bc:	ldrd	r2, [r6, #20]
   259c0:	strd	r2, [ip, #24]
   259c4:	ldrb	r3, [r1, #14]
   259c8:	bic	r3, r3, #12
   259cc:	strb	r3, [r1, #14]
   259d0:	str	r5, [ip, #16]
   259d4:	str	r5, [ip, #20]
   259d8:	str	lr, [ip, #32]
   259dc:	str	r0, [r7]
   259e0:	beq	25c10 <__assert_fail@plt+0x146b8>
   259e4:	str	r4, [ip, #4]
   259e8:	ldr	r4, [r7]
   259ec:	ldrb	r3, [r4, #26]
   259f0:	orr	r3, r3, #4
   259f4:	strb	r3, [r4, #26]
   259f8:	ldr	r3, [r6, #4]
   259fc:	cmp	r3, #0
   25a00:	addne	r7, r4, #4
   25a04:	bne	25974 <__assert_fail@plt+0x1441c>
   25a08:	ldr	r2, [r6, #8]
   25a0c:	cmp	r2, #0
   25a10:	cmpne	r2, r3
   25a14:	mov	r3, r6
   25a18:	bne	25c04 <__assert_fail@plt+0x146ac>
   25a1c:	ldr	r2, [r6]
   25a20:	ldr	r4, [r4]
   25a24:	subs	r6, r2, #0
   25a28:	bne	25a08 <__assert_fail@plt+0x144b0>
   25a2c:	ldr	r6, [sp, #128]	; 0x80
   25a30:	mov	r3, #0
   25a34:	mov	r2, #0
   25a38:	strd	r2, [fp]
   25a3c:	ldr	r3, [sl, #64]	; 0x40
   25a40:	cmp	r3, #31
   25a44:	beq	25c18 <__assert_fail@plt+0x146c0>
   25a48:	ldr	r0, [sl, #56]	; 0x38
   25a4c:	lsl	r1, r3, #5
   25a50:	add	lr, r3, #1
   25a54:	add	r4, r1, #4
   25a58:	add	r3, r0, r1
   25a5c:	mov	ip, #16
   25a60:	str	lr, [sl, #64]	; 0x40
   25a64:	add	r1, r1, ip
   25a68:	add	r4, r0, r4
   25a6c:	stmib	r3, {r5, r9}
   25a70:	add	r2, r0, r1
   25a74:	mvn	lr, #0
   25a78:	str	r6, [r3, #12]
   25a7c:	cmp	r6, #0
   25a80:	strb	ip, [sp, #132]	; 0x84
   25a84:	ldrd	r0, [fp]
   25a88:	strd	r0, [r3, #24]
   25a8c:	ldrb	ip, [r2, #14]
   25a90:	bic	ip, ip, #12
   25a94:	strb	ip, [r2, #14]
   25a98:	str	r5, [r3, #16]
   25a9c:	str	r5, [r3, #20]
   25aa0:	str	lr, [r3, #32]
   25aa4:	str	r4, [r9]
   25aa8:	beq	25508 <__assert_fail@plt+0x13fb0>
   25aac:	cmp	r4, #0
   25ab0:	str	r4, [r6]
   25ab4:	beq	25508 <__assert_fail@plt+0x13fb0>
   25ab8:	ldr	r3, [sp, #16]
   25abc:	add	r8, r8, #1
   25ac0:	mov	r9, r4
   25ac4:	cmp	r3, r8
   25ac8:	bge	2596c <__assert_fail@plt+0x14414>
   25acc:	ldr	r9, [sp, #40]	; 0x28
   25ad0:	mov	r8, r3
   25ad4:	ldr	r3, [sp, #24]
   25ad8:	cmp	r8, r3
   25adc:	beq	257a8 <__assert_fail@plt+0x14250>
   25ae0:	add	fp, sp, #128	; 0x80
   25ae4:	str	r8, [sp, #16]
   25ae8:	mov	r1, fp
   25aec:	str	r9, [sp, #40]	; 0x28
   25af0:	ldr	r7, [r6]
   25af4:	b	25b00 <__assert_fail@plt+0x145a8>
   25af8:	mov	r6, r3
   25afc:	add	r1, r7, #4
   25b00:	ldr	r3, [sl, #64]	; 0x40
   25b04:	cmp	r3, #31
   25b08:	beq	25c50 <__assert_fail@plt+0x146f8>
   25b0c:	ldr	r0, [sl, #56]	; 0x38
   25b10:	lsl	r2, r3, #5
   25b14:	add	lr, r3, #1
   25b18:	add	ip, r2, #4
   25b1c:	add	r3, r0, r2
   25b20:	str	lr, [sl, #64]	; 0x40
   25b24:	add	r2, r2, #16
   25b28:	add	r2, r0, r2
   25b2c:	add	r0, r0, ip
   25b30:	str	r5, [r3, #4]
   25b34:	mvn	ip, #0
   25b38:	cmp	r0, #0
   25b3c:	str	r5, [r3, #8]
   25b40:	str	r5, [r3, #12]
   25b44:	ldrd	r8, [r6, #20]
   25b48:	strd	r8, [r3, #24]
   25b4c:	ldrb	lr, [r2, #14]
   25b50:	bic	lr, lr, #12
   25b54:	strb	lr, [r2, #14]
   25b58:	str	r5, [r3, #16]
   25b5c:	str	r5, [r3, #20]
   25b60:	str	ip, [r3, #32]
   25b64:	str	r0, [r1]
   25b68:	beq	25508 <__assert_fail@plt+0x13fb0>
   25b6c:	str	r7, [r3, #4]
   25b70:	ldr	r7, [r1]
   25b74:	ldrb	r3, [r7, #26]
   25b78:	orr	r3, r3, #4
   25b7c:	strb	r3, [r7, #26]
   25b80:	ldr	r3, [r6, #4]
   25b84:	cmp	r3, #0
   25b88:	bne	25af8 <__assert_fail@plt+0x145a0>
   25b8c:	ldr	r8, [sp, #16]
   25b90:	ldr	r9, [sp, #40]	; 0x28
   25b94:	ldr	r2, [r6, #8]
   25b98:	cmp	r2, #0
   25b9c:	cmpne	r2, r3
   25ba0:	mov	r3, r6
   25ba4:	bne	25d2c <__assert_fail@plt+0x147d4>
   25ba8:	ldr	r2, [r6]
   25bac:	ldr	r7, [r7]
   25bb0:	subs	r6, r2, #0
   25bb4:	bne	25b94 <__assert_fail@plt+0x1463c>
   25bb8:	ldr	r7, [sp, #128]	; 0x80
   25bbc:	cmp	r7, #0
   25bc0:	beq	25508 <__assert_fail@plt+0x13fb0>
   25bc4:	ldrb	r3, [r7, #24]
   25bc8:	str	r4, [sp, #40]	; 0x28
   25bcc:	cmp	r3, #17
   25bd0:	bne	25750 <__assert_fail@plt+0x141f8>
   25bd4:	b	256c0 <__assert_fail@plt+0x14168>
   25bd8:	mov	r0, #996	; 0x3e4
   25bdc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   25be0:	cmp	r0, #0
   25be4:	beq	25c44 <__assert_fail@plt+0x146ec>
   25be8:	ldr	r1, [sl, #56]	; 0x38
   25bec:	mov	r2, #1
   25bf0:	mov	lr, #4
   25bf4:	mov	r3, #0
   25bf8:	str	r1, [r0]
   25bfc:	str	r0, [sl, #56]	; 0x38
   25c00:	b	25994 <__assert_fail@plt+0x1443c>
   25c04:	mov	r3, r2
   25c08:	add	r7, r4, #8
   25c0c:	b	25974 <__assert_fail@plt+0x1441c>
   25c10:	mov	r6, r0
   25c14:	b	25a30 <__assert_fail@plt+0x144d8>
   25c18:	mov	r0, #996	; 0x3e4
   25c1c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   25c20:	cmp	r0, #0
   25c24:	beq	25508 <__assert_fail@plt+0x13fb0>
   25c28:	ldr	r3, [sl, #56]	; 0x38
   25c2c:	mov	lr, #1
   25c30:	mov	r4, #4
   25c34:	mov	r1, #0
   25c38:	str	r3, [r0]
   25c3c:	str	r0, [sl, #56]	; 0x38
   25c40:	b	25a58 <__assert_fail@plt+0x14500>
   25c44:	mov	r6, r0
   25c48:	str	r0, [r7]
   25c4c:	b	25a30 <__assert_fail@plt+0x144d8>
   25c50:	mov	r0, #996	; 0x3e4
   25c54:	str	r1, [sp, #44]	; 0x2c
   25c58:	bl	2cd58 <__assert_fail@plt+0x1b800>
   25c5c:	cmp	r0, #0
   25c60:	ldr	r1, [sp, #44]	; 0x2c
   25c64:	beq	25504 <__assert_fail@plt+0x13fac>
   25c68:	ldr	r3, [sl, #56]	; 0x38
   25c6c:	mov	lr, #1
   25c70:	mov	ip, #4
   25c74:	mov	r2, #0
   25c78:	str	r3, [r0]
   25c7c:	str	r0, [sl, #56]	; 0x38
   25c80:	b	25b1c <__assert_fail@plt+0x145c4>
   25c84:	ldr	r3, [sp, #24]
   25c88:	sub	r1, ip, #48	; 0x30
   25c8c:	uxtb	r0, r1
   25c90:	cmp	r0, #9
   25c94:	movhi	r2, #0
   25c98:	movls	r2, #1
   25c9c:	cmn	r3, #2
   25ca0:	moveq	r2, #0
   25ca4:	cmp	r2, #0
   25ca8:	beq	258d0 <__assert_fail@plt+0x14378>
   25cac:	cmn	r3, #1
   25cb0:	add	r2, r3, r3, lsl #2
   25cb4:	streq	r1, [sp, #24]
   25cb8:	beq	25890 <__assert_fail@plt+0x14338>
   25cbc:	add	ip, ip, r2, lsl #1
   25cc0:	cmp	ip, r7
   25cc4:	movge	ip, r7
   25cc8:	sub	r3, ip, #48	; 0x30
   25ccc:	str	r3, [sp, #24]
   25cd0:	b	25890 <__assert_fail@plt+0x14338>
   25cd4:	ldr	r2, [sp, #24]
   25cd8:	cmn	r2, #2
   25cdc:	beq	25ce8 <__assert_fail@plt+0x14790>
   25ce0:	cmp	r3, #1
   25ce4:	beq	26cdc <__assert_fail@plt+0x15784>
   25ce8:	ldr	r2, [sp, #52]	; 0x34
   25cec:	cmp	r2, #0
   25cf0:	beq	25830 <__assert_fail@plt+0x142d8>
   25cf4:	ldrd	r2, [r6]
   25cf8:	mov	r1, #1
   25cfc:	str	r4, [r9, #40]	; 0x28
   25d00:	ldr	r0, [sp, #20]
   25d04:	ldr	ip, [sp, #28]
   25d08:	strd	r2, [r0]
   25d0c:	ldr	r3, [sp, #204]	; 0xcc
   25d10:	strb	r1, [r0, #4]
   25d14:	ldr	r3, [r3]
   25d18:	cmp	r3, #0
   25d1c:	beq	2546c <__assert_fail@plt+0x13f14>
   25d20:	cmp	ip, #0
   25d24:	bne	2546c <__assert_fail@plt+0x13f14>
   25d28:	b	25844 <__assert_fail@plt+0x142ec>
   25d2c:	mov	r6, r2
   25d30:	add	r1, r7, #8
   25d34:	str	r8, [sp, #16]
   25d38:	str	r9, [sp, #40]	; 0x28
   25d3c:	b	25b00 <__assert_fail@plt+0x145a8>
   25d40:	mov	r0, #996	; 0x3e4
   25d44:	bl	2cd58 <__assert_fail@plt+0x1b800>
   25d48:	cmp	r0, #0
   25d4c:	beq	26418 <__assert_fail@plt+0x14ec0>
   25d50:	ldr	r1, [sl, #56]	; 0x38
   25d54:	mov	ip, #4
   25d58:	mov	r3, #1
   25d5c:	mov	r2, #0
   25d60:	str	r1, [r0]
   25d64:	str	r0, [sl, #56]	; 0x38
   25d68:	b	25408 <__assert_fail@plt+0x13eb0>
   25d6c:	ldr	r3, [sp, #52]	; 0x34
   25d70:	mov	r4, r6
   25d74:	mov	r6, r9
   25d78:	mov	r9, r8
   25d7c:	cmp	r3, #0
   25d80:	bne	25cf4 <__assert_fail@plt+0x1479c>
   25d84:	ldr	r2, [sp, #204]	; 0xcc
   25d88:	mov	r3, #9
   25d8c:	str	r3, [r2]
   25d90:	b	25844 <__assert_fail@plt+0x142ec>
   25d94:	mvn	r3, #0
   25d98:	mov	r4, r2
   25d9c:	mov	r6, r2
   25da0:	mov	r8, #1
   25da4:	str	r3, [sp, #24]
   25da8:	b	25ae0 <__assert_fail@plt+0x14588>
   25dac:	ldr	r3, [sl, #84]	; 0x54
   25db0:	mov	r2, #1
   25db4:	orr	r3, r3, r2, lsl r4
   25db8:	str	r3, [sl, #84]	; 0x54
   25dbc:	b	252d8 <__assert_fail@plt+0x13d80>
   25dc0:	ldr	r2, [sp, #16]
   25dc4:	ldr	r0, [r2]
   25dc8:	ldr	r3, [r2, #20]
   25dcc:	ldr	r2, [sp, #36]	; 0x24
   25dd0:	cmp	r3, r2
   25dd4:	beq	264ac <__assert_fail@plt+0x14f54>
   25dd8:	ldr	ip, [sp, #16]
   25ddc:	add	r1, r3, #1
   25de0:	ldr	r2, [sp, #76]	; 0x4c
   25de4:	str	r1, [ip, #20]
   25de8:	str	r2, [r0, r3, lsl #2]
   25dec:	b	253ac <__assert_fail@plt+0x13e54>
   25df0:	ldrb	r3, [sp, #76]	; 0x4c
   25df4:	mov	r0, #1
   25df8:	b	25398 <__assert_fail@plt+0x13e40>
   25dfc:	ldr	r2, [sp, #16]
   25e00:	add	r0, sp, #68	; 0x44
   25e04:	mov	r1, r4
   25e08:	ldr	ip, [sp, #76]	; 0x4c
   25e0c:	str	r0, [sp]
   25e10:	str	sl, [sp, #8]
   25e14:	add	r3, r2, #36	; 0x24
   25e18:	add	r2, r2, #12
   25e1c:	ldr	r0, [r9, #64]	; 0x40
   25e20:	str	ip, [sp, #4]
   25e24:	bl	1a2dc <__assert_fail@plt+0x8d84>
   25e28:	ldr	r3, [sp, #204]	; 0xcc
   25e2c:	cmp	r0, #0
   25e30:	str	r0, [r3]
   25e34:	beq	253ac <__assert_fail@plt+0x13e54>
   25e38:	ldr	sl, [sp, #24]
   25e3c:	mov	r0, r4
   25e40:	bl	13e1c <__assert_fail@plt+0x28c4>
   25e44:	ldr	r4, [sp, #16]
   25e48:	ldr	r0, [r4]
   25e4c:	bl	13e1c <__assert_fail@plt+0x28c4>
   25e50:	ldr	r0, [r4, #4]
   25e54:	bl	13e1c <__assert_fail@plt+0x28c4>
   25e58:	ldr	r0, [r4, #8]
   25e5c:	bl	13e1c <__assert_fail@plt+0x28c4>
   25e60:	ldr	r0, [r4, #12]
   25e64:	bl	13e1c <__assert_fail@plt+0x28c4>
   25e68:	mov	r0, r4
   25e6c:	bl	13e1c <__assert_fail@plt+0x28c4>
   25e70:	ldr	r3, [sp, #204]	; 0xcc
   25e74:	ldr	r3, [r3]
   25e78:	cmp	r3, #0
   25e7c:	bne	24b90 <__assert_fail@plt+0x13638>
   25e80:	str	r3, [sp, #28]
   25e84:	b	24770 <__assert_fail@plt+0x13218>
   25e88:	ldr	r2, [sl, #64]	; 0x40
   25e8c:	cmp	r2, #31
   25e90:	beq	26850 <__assert_fail@plt+0x152f8>
   25e94:	ldr	r0, [sl, #56]	; 0x38
   25e98:	lsl	r3, r2, #5
   25e9c:	add	r2, r2, #1
   25ea0:	add	lr, r3, #4
   25ea4:	add	r1, r0, r3
   25ea8:	add	r3, r3, #16
   25eac:	str	r2, [sl, #64]	; 0x40
   25eb0:	adds	r2, r0, lr
   25eb4:	add	r0, r0, r3
   25eb8:	ldr	r3, [sp, #20]
   25ebc:	mov	ip, #0
   25ec0:	mvn	lr, #0
   25ec4:	str	r2, [sp, #28]
   25ec8:	str	ip, [r1, #4]
   25ecc:	str	ip, [r1, #8]
   25ed0:	str	ip, [r1, #12]
   25ed4:	ldrd	r2, [r3]
   25ed8:	strd	r2, [r1, #24]
   25edc:	ldrb	r3, [r0, #14]
   25ee0:	bic	r3, r3, #12
   25ee4:	strb	r3, [r0, #14]
   25ee8:	str	ip, [r1, #16]
   25eec:	str	ip, [r1, #20]
   25ef0:	str	lr, [r1, #32]
   25ef4:	bne	24dbc <__assert_fail@plt+0x13864>
   25ef8:	b	24fec <__assert_fail@plt+0x13a94>
   25efc:	mov	r0, #996	; 0x3e4
   25f00:	bl	2cd58 <__assert_fail@plt+0x1b800>
   25f04:	cmp	r0, #0
   25f08:	beq	24fec <__assert_fail@plt+0x13a94>
   25f0c:	ldr	r1, [sl, #56]	; 0x38
   25f10:	mov	r2, #4
   25f14:	mov	r3, #0
   25f18:	str	r1, [r0]
   25f1c:	str	r0, [sl, #56]	; 0x38
   25f20:	b	2471c <__assert_fail@plt+0x131c4>
   25f24:	ldr	r2, [sp, #20]
   25f28:	mov	r3, #1
   25f2c:	strb	r3, [r2, #4]
   25f30:	b	251bc <__assert_fail@plt+0x13c64>
   25f34:	ldr	r2, [sp, #16]
   25f38:	ldr	r1, [sp, #32]
   25f3c:	ldrb	r3, [r2, #16]
   25f40:	tst	r1, #256	; 0x100
   25f44:	orr	r3, r3, #1
   25f48:	strb	r3, [r2, #16]
   25f4c:	beq	25f5c <__assert_fail@plt+0x14a04>
   25f50:	ldr	r3, [r4]
   25f54:	orr	r3, r3, #1024	; 0x400
   25f58:	str	r3, [r4]
   25f5c:	ldr	r3, [r9, #40]	; 0x28
   25f60:	mov	r1, r9
   25f64:	ldr	r5, [sp, #20]
   25f68:	ldr	r2, [sp, #32]
   25f6c:	add	fp, r3, fp
   25f70:	mov	r0, r5
   25f74:	str	fp, [r9, #40]	; 0x28
   25f78:	bl	17b30 <__assert_fail@plt+0x65d8>
   25f7c:	ldrb	r3, [r5, #4]
   25f80:	mov	fp, r0
   25f84:	cmp	r3, #2
   25f88:	beq	26304 <__assert_fail@plt+0x14dac>
   25f8c:	mov	r2, #1
   25f90:	str	r2, [sp, #44]	; 0x2c
   25f94:	b	251b4 <__assert_fail@plt+0x13c5c>
   25f98:	ldr	r3, [sp, #52]	; 0x34
   25f9c:	cmp	r3, #0
   25fa0:	bne	25cf4 <__assert_fail@plt+0x1479c>
   25fa4:	b	25838 <__assert_fail@plt+0x142e0>
   25fa8:	mov	r3, #7
   25fac:	ldr	sl, [sp, #24]
   25fb0:	ldr	r2, [sp, #204]	; 0xcc
   25fb4:	str	r3, [r2]
   25fb8:	b	25e3c <__assert_fail@plt+0x148e4>
   25fbc:	ldr	r4, [sp, #20]
   25fc0:	mov	r2, r3
   25fc4:	mov	r1, r9
   25fc8:	mov	r6, r3
   25fcc:	mov	r0, r4
   25fd0:	bl	1afe8 <__assert_fail@plt+0x9a90>
   25fd4:	ldr	lr, [sp, #200]	; 0xc8
   25fd8:	mov	r3, r6
   25fdc:	mov	r2, r4
   25fe0:	mov	r1, r5
   25fe4:	ldr	ip, [r9, #40]	; 0x28
   25fe8:	str	lr, [sp]
   25fec:	ldr	lr, [sp, #204]	; 0xcc
   25ff0:	add	ip, ip, r0
   25ff4:	mov	r0, r9
   25ff8:	str	lr, [sp, #4]
   25ffc:	str	ip, [r9, #40]	; 0x28
   26000:	bl	245fc <__assert_fail@plt+0x130a4>
   26004:	str	r0, [sp, #28]
   26008:	b	24b98 <__assert_fail@plt+0x13640>
   2600c:	mov	r0, #996	; 0x3e4
   26010:	str	r2, [sp, #16]
   26014:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26018:	cmp	r0, #0
   2601c:	beq	24fec <__assert_fail@plt+0x13a94>
   26020:	ldr	r1, [sl, #56]	; 0x38
   26024:	mov	lr, #1
   26028:	mov	ip, #4
   2602c:	mov	r3, #0
   26030:	ldr	r2, [sp, #16]
   26034:	str	r1, [r0]
   26038:	str	r0, [sl, #56]	; 0x38
   2603c:	b	24fa0 <__assert_fail@plt+0x13a48>
   26040:	mov	r0, #996	; 0x3e4
   26044:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26048:	subs	fp, r0, #0
   2604c:	beq	24f74 <__assert_fail@plt+0x13a1c>
   26050:	ldr	r1, [sl, #56]	; 0x38
   26054:	mov	r0, #4
   26058:	mov	r2, #1
   2605c:	mov	r3, #0
   26060:	str	r1, [fp]
   26064:	str	fp, [sl, #56]	; 0x38
   26068:	b	24f34 <__assert_fail@plt+0x139dc>
   2606c:	ldr	sl, [sp, #24]
   26070:	ldr	r3, [sp, #204]	; 0xcc
   26074:	str	r0, [r3]
   26078:	b	25e3c <__assert_fail@plt+0x148e4>
   2607c:	str	r5, [sp, #28]
   26080:	b	24770 <__assert_fail@plt+0x13218>
   26084:	ldr	r2, [sp, #20]
   26088:	mov	r3, #6
   2608c:	str	r3, [r2]
   26090:	ldr	r2, [sl, #64]	; 0x40
   26094:	cmp	r2, #31
   26098:	beq	268b0 <__assert_fail@plt+0x15358>
   2609c:	lsl	r3, r2, #5
   260a0:	add	r1, r2, #1
   260a4:	ldr	r2, [sl, #56]	; 0x38
   260a8:	add	r4, r3, #4
   260ac:	add	ip, r2, r3
   260b0:	add	r3, r3, #16
   260b4:	str	r1, [sl, #64]	; 0x40
   260b8:	add	r4, r2, r4
   260bc:	add	r2, r2, r3
   260c0:	ldr	r3, [sp, #20]
   260c4:	mov	lr, #0
   260c8:	mvn	r5, #0
   260cc:	str	lr, [ip, #4]
   260d0:	str	lr, [ip, #8]
   260d4:	str	lr, [ip, #12]
   260d8:	ldrd	r0, [r3]
   260dc:	strd	r0, [ip, #24]
   260e0:	ldrb	r3, [r2, #14]
   260e4:	bic	r3, r3, #12
   260e8:	strb	r3, [r2, #14]
   260ec:	str	lr, [ip, #16]
   260f0:	str	lr, [ip, #20]
   260f4:	str	r5, [ip, #32]
   260f8:	ldr	r2, [sp, #20]
   260fc:	mov	r3, #9
   26100:	str	r3, [r2]
   26104:	b	24cbc <__assert_fail@plt+0x13764>
   26108:	ldr	r3, [r9, #40]	; 0x28
   2610c:	mov	r2, sl
   26110:	add	r0, sp, #88	; 0x58
   26114:	mov	r1, r9
   26118:	add	r3, r3, fp
   2611c:	str	r3, [r9, #40]	; 0x28
   26120:	bl	17b30 <__assert_fail@plt+0x65d8>
   26124:	ldrb	r2, [sp, #92]	; 0x5c
   26128:	mov	r3, r0
   2612c:	cmp	r2, #2
   26130:	beq	25fa8 <__assert_fail@plt+0x14a50>
   26134:	cmp	r2, #21
   26138:	beq	263fc <__assert_fail@plt+0x14ea4>
   2613c:	mov	r1, #1
   26140:	add	ip, sp, #128	; 0x80
   26144:	str	sl, [sp]
   26148:	add	r2, sp, #88	; 0x58
   2614c:	add	r0, sp, #80	; 0x50
   26150:	str	r1, [sp, #4]
   26154:	mov	r1, r9
   26158:	str	r6, [sp, #80]	; 0x50
   2615c:	str	ip, [sp, #84]	; 0x54
   26160:	bl	1bca4 <__assert_fail@plt+0xa74c>
   26164:	cmp	r0, #0
   26168:	bne	2606c <__assert_fail@plt+0x14b14>
   2616c:	mov	r2, sl
   26170:	mov	r1, r9
   26174:	mov	r0, r5
   26178:	bl	17b30 <__assert_fail@plt+0x65d8>
   2617c:	ldr	r2, [sp, #72]	; 0x48
   26180:	mov	fp, r0
   26184:	sub	r3, r2, #2
   26188:	bics	r3, r3, #2
   2618c:	beq	26aa0 <__assert_fail@plt+0x15548>
   26190:	ldr	r3, [sp, #80]	; 0x50
   26194:	sub	r1, r3, #2
   26198:	bics	r1, r1, #2
   2619c:	beq	26aa0 <__assert_fail@plt+0x15548>
   261a0:	cmp	r2, #3
   261a4:	moveq	r1, #1
   261a8:	movne	r1, #0
   261ac:	str	r1, [sp, #52]	; 0x34
   261b0:	beq	26abc <__assert_fail@plt+0x15564>
   261b4:	cmp	r3, #3
   261b8:	beq	26b58 <__assert_fail@plt+0x15600>
   261bc:	cmp	r2, #0
   261c0:	bne	26a88 <__assert_fail@plt+0x15530>
   261c4:	ldrb	r7, [sp, #76]	; 0x4c
   261c8:	cmp	r3, #0
   261cc:	beq	26a98 <__assert_fail@plt+0x15540>
   261d0:	cmp	r3, #3
   261d4:	bne	26ab4 <__assert_fail@plt+0x1555c>
   261d8:	ldr	r1, [sp, #84]	; 0x54
   261dc:	ldrb	r8, [r1]
   261e0:	cmp	r2, #0
   261e4:	ldr	r1, [sp, #52]	; 0x34
   261e8:	moveq	r1, #1
   261ec:	cmp	r1, #0
   261f0:	beq	26a80 <__assert_fail@plt+0x15528>
   261f4:	ldr	r2, [sp, #24]
   261f8:	ldr	r2, [r2, #92]	; 0x5c
   261fc:	cmp	r2, #1
   26200:	ble	2696c <__assert_fail@plt+0x15414>
   26204:	mov	r0, r7
   26208:	bl	11468 <btowc@plt>
   2620c:	ldr	r3, [sp, #80]	; 0x50
   26210:	mov	r7, r0
   26214:	cmp	r3, #3
   26218:	cmpne	r3, #0
   2621c:	bne	26978 <__assert_fail@plt+0x15420>
   26220:	ldr	r3, [sp, #24]
   26224:	ldr	r3, [r3, #92]	; 0x5c
   26228:	cmp	r3, #1
   2622c:	ble	2623c <__assert_fail@plt+0x14ce4>
   26230:	mov	r0, r8
   26234:	bl	11468 <btowc@plt>
   26238:	mov	r8, r0
   2623c:	cmn	r7, #1
   26240:	cmnne	r8, #1
   26244:	beq	26390 <__assert_fail@plt+0x14e38>
   26248:	ldr	r3, [sp, #48]	; 0x30
   2624c:	cmp	r8, r7
   26250:	movcs	r3, #0
   26254:	andcc	r3, r3, #1
   26258:	cmp	r3, #0
   2625c:	bne	26aa0 <__assert_fail@plt+0x15548>
   26260:	ldr	r3, [sp, #24]
   26264:	ldr	r3, [r3, #92]	; 0x5c
   26268:	cmp	r3, #1
   2626c:	ble	262a4 <__assert_fail@plt+0x14d4c>
   26270:	ldr	r2, [sp, #16]
   26274:	ldr	r1, [sp, #40]	; 0x28
   26278:	ldr	r3, [r2, #32]
   2627c:	ldr	r2, [r2, #4]
   26280:	cmp	r3, r1
   26284:	beq	26c34 <__assert_fail@plt+0x156dc>
   26288:	ldr	r0, [sp, #16]
   2628c:	str	r7, [r2, r3, lsl #2]
   26290:	ldr	r2, [r0, #8]
   26294:	ldr	r3, [r0, #32]
   26298:	add	r1, r3, #1
   2629c:	str	r1, [r0, #32]
   262a0:	str	r8, [r2, r3, lsl #2]
   262a4:	mov	r3, #0
   262a8:	mov	ip, #1
   262ac:	cmp	r7, r3
   262b0:	asr	r2, r3, #5
   262b4:	and	r0, r3, #31
   262b8:	movhi	r1, #0
   262bc:	movls	r1, #1
   262c0:	cmp	r8, r3
   262c4:	add	r3, r3, #1
   262c8:	movcc	r1, #0
   262cc:	cmp	r1, #0
   262d0:	beq	262e0 <__assert_fail@plt+0x14d88>
   262d4:	ldr	r1, [r4, r2, lsl #2]
   262d8:	orr	r1, r1, ip, lsl r0
   262dc:	str	r1, [r4, r2, lsl #2]
   262e0:	cmp	r3, #256	; 0x100
   262e4:	bne	262ac <__assert_fail@plt+0x14d54>
   262e8:	ldr	r2, [sp, #204]	; 0xcc
   262ec:	mov	r3, #0
   262f0:	str	r3, [r2]
   262f4:	b	253ac <__assert_fail@plt+0x13e54>
   262f8:	cmp	r5, #0
   262fc:	strne	r6, [r5]
   26300:	b	24fec <__assert_fail@plt+0x13a94>
   26304:	ldr	r2, [sp, #204]	; 0xcc
   26308:	mov	r3, #2
   2630c:	str	r3, [r2]
   26310:	b	25e3c <__assert_fail@plt+0x148e4>
   26314:	mov	r0, #996	; 0x3e4
   26318:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2631c:	cmp	r0, #0
   26320:	beq	24fec <__assert_fail@plt+0x13a94>
   26324:	ldr	r1, [sl, #56]	; 0x38
   26328:	mov	lr, #4
   2632c:	mov	r2, #1
   26330:	mov	r3, #0
   26334:	str	r1, [r0]
   26338:	str	r0, [sl, #56]	; 0x38
   2633c:	b	25020 <__assert_fail@plt+0x13ac8>
   26340:	str	r2, [sp, #28]
   26344:	mov	r3, #6
   26348:	ldr	r2, [sp, #204]	; 0xcc
   2634c:	str	r3, [r2]
   26350:	b	24b98 <__assert_fail@plt+0x13640>
   26354:	mov	r0, r4
   26358:	str	r6, [sp, #28]
   2635c:	bl	13e1c <__assert_fail@plt+0x28c4>
   26360:	ldr	r0, [sp, #16]
   26364:	bl	13e1c <__assert_fail@plt+0x28c4>
   26368:	ldr	r2, [sp, #204]	; 0xcc
   2636c:	mov	r3, #12
   26370:	str	r3, [r2]
   26374:	b	24b98 <__assert_fail@plt+0x13640>
   26378:	ldr	r0, [sp, #84]	; 0x54
   2637c:	strd	r2, [sp, #56]	; 0x38
   26380:	bl	11414 <strlen@plt>
   26384:	cmp	r0, #1
   26388:	ldrd	r2, [sp, #56]	; 0x38
   2638c:	bls	26adc <__assert_fail@plt+0x15584>
   26390:	mov	r3, #3
   26394:	ldr	sl, [sp, #24]
   26398:	ldr	r2, [sp, #204]	; 0xcc
   2639c:	str	r3, [r2]
   263a0:	b	25e3c <__assert_fail@plt+0x148e4>
   263a4:	mov	r0, #996	; 0x3e4
   263a8:	bl	2cd58 <__assert_fail@plt+0x1b800>
   263ac:	cmp	r0, #0
   263b0:	beq	24fec <__assert_fail@plt+0x13a94>
   263b4:	ldr	r3, [sl, #56]	; 0x38
   263b8:	mov	r2, #1
   263bc:	mov	r6, #4
   263c0:	mov	r1, #0
   263c4:	str	r3, [r0]
   263c8:	str	r0, [sl, #56]	; 0x38
   263cc:	b	25300 <__assert_fail@plt+0x13da8>
   263d0:	mov	r0, #996	; 0x3e4
   263d4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   263d8:	cmp	r0, #0
   263dc:	beq	24fec <__assert_fail@plt+0x13a94>
   263e0:	ldr	r1, [sl, #56]	; 0x38
   263e4:	mov	r2, #1
   263e8:	mov	ip, #4
   263ec:	mov	r3, #0
   263f0:	str	r1, [r0]
   263f4:	str	r0, [sl, #56]	; 0x38
   263f8:	b	24e54 <__assert_fail@plt+0x138fc>
   263fc:	ldr	r2, [r9, #40]	; 0x28
   26400:	mov	r1, #1
   26404:	ldr	r3, [sp, #72]	; 0x48
   26408:	sub	r2, r2, fp
   2640c:	str	r2, [r9, #40]	; 0x28
   26410:	strb	r1, [r5, #4]
   26414:	b	25258 <__assert_fail@plt+0x13d00>
   26418:	ldr	r3, [sp, #204]	; 0xcc
   2641c:	ldr	r3, [r3]
   26420:	cmp	r3, #0
   26424:	beq	25770 <__assert_fail@plt+0x14218>
   26428:	b	25514 <__assert_fail@plt+0x13fbc>
   2642c:	mov	r0, #996	; 0x3e4
   26430:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26434:	cmp	r0, #0
   26438:	beq	24fec <__assert_fail@plt+0x13a94>
   2643c:	ldr	r1, [sl, #56]	; 0x38
   26440:	mov	r2, #4
   26444:	mov	r3, #0
   26448:	str	r1, [r0]
   2644c:	str	r0, [sl, #56]	; 0x38
   26450:	b	250d4 <__assert_fail@plt+0x13b7c>
   26454:	mov	r0, #996	; 0x3e4
   26458:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2645c:	cmp	r0, #0
   26460:	beq	24fec <__assert_fail@plt+0x13a94>
   26464:	ldr	r1, [sl, #56]	; 0x38
   26468:	mov	r6, #4
   2646c:	mov	r2, #1
   26470:	mov	r3, #0
   26474:	str	r1, [r0]
   26478:	str	r0, [sl, #56]	; 0x38
   2647c:	b	24d4c <__assert_fail@plt+0x137f4>
   26480:	mov	r0, #996	; 0x3e4
   26484:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26488:	cmp	r0, #0
   2648c:	beq	26cac <__assert_fail@plt+0x15754>
   26490:	ldr	r1, [sl, #56]	; 0x38
   26494:	mov	r2, #1
   26498:	mov	r5, #4
   2649c:	mov	r3, #0
   264a0:	str	r1, [r0]
   264a4:	str	r0, [sl, #56]	; 0x38
   264a8:	b	24cd8 <__assert_fail@plt+0x13780>
   264ac:	lsl	r3, r2, #1
   264b0:	add	r3, r3, #1
   264b4:	lsl	r1, r3, #2
   264b8:	str	r3, [sp, #36]	; 0x24
   264bc:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   264c0:	cmp	r0, #0
   264c4:	beq	26c2c <__assert_fail@plt+0x156d4>
   264c8:	ldr	r2, [sp, #16]
   264cc:	str	r0, [r2]
   264d0:	ldr	r3, [r2, #20]
   264d4:	b	25dd8 <__assert_fail@plt+0x14880>
   264d8:	ldr	r3, [r9, #40]	; 0x28
   264dc:	ldr	sl, [sp, #24]
   264e0:	ldr	r2, [sp, #44]	; 0x2c
   264e4:	add	fp, r3, fp
   264e8:	str	fp, [r9, #40]	; 0x28
   264ec:	cmp	r2, #0
   264f0:	beq	26584 <__assert_fail@plt+0x1502c>
   264f4:	ubfx	r2, r4, #2, #1
   264f8:	cmp	r2, #0
   264fc:	moveq	r1, r2
   26500:	beq	26514 <__assert_fail@plt+0x14fbc>
   26504:	ldr	r3, [r4]
   26508:	mov	r1, #1
   2650c:	mvn	r3, r3
   26510:	str	r3, [r4]
   26514:	ldr	ip, [r4, r2, lsl #2]
   26518:	rsb	lr, r2, #8
   2651c:	add	r3, r4, r2, lsl #2
   26520:	lsr	lr, lr, #1
   26524:	ldr	r0, [r3, #4]
   26528:	cmp	lr, #4
   2652c:	mvn	ip, ip
   26530:	str	ip, [r4, r2, lsl #2]
   26534:	mvn	r2, r0
   26538:	ldr	lr, [r3, #8]
   2653c:	ldr	ip, [r3, #12]
   26540:	ldr	r0, [r3, #16]
   26544:	mvn	lr, lr
   26548:	stmib	r3, {r2, lr}
   2654c:	mvn	ip, ip
   26550:	ldr	r2, [r3, #20]
   26554:	mvn	r0, r0
   26558:	str	ip, [r3, #12]
   2655c:	str	r0, [r3, #16]
   26560:	mvn	r2, r2
   26564:	str	r2, [r3, #20]
   26568:	bne	26748 <__assert_fail@plt+0x151f0>
   2656c:	ldr	r1, [r3, #24]
   26570:	ldr	r2, [r3, #28]
   26574:	mvn	r1, r1
   26578:	mvn	r2, r2
   2657c:	str	r1, [r3, #24]
   26580:	str	r2, [r3, #28]
   26584:	ldr	r1, [sl, #92]	; 0x5c
   26588:	cmp	r1, #1
   2658c:	ble	2663c <__assert_fail@plt+0x150e4>
   26590:	ldr	r3, [sl, #60]	; 0x3c
   26594:	add	r0, r4, #8
   26598:	add	r2, r3, #8
   2659c:	orr	ip, r3, r4
   265a0:	cmp	r3, r0
   265a4:	cmpcc	r4, r2
   265a8:	movcs	r2, #1
   265ac:	movcc	r2, #0
   265b0:	tst	ip, #7
   265b4:	movne	r2, #0
   265b8:	cmp	r2, #0
   265bc:	ldr	r2, [r4]
   265c0:	beq	26b80 <__assert_fail@plt+0x15628>
   265c4:	ldm	r3, {ip, lr}
   265c8:	ldr	r0, [r4, #4]
   265cc:	and	r2, r2, ip
   265d0:	ldr	ip, [r4, #8]
   265d4:	and	r0, r0, lr
   265d8:	str	r2, [r4]
   265dc:	ldr	r2, [r4, #12]
   265e0:	str	r0, [r4, #4]
   265e4:	ldr	r0, [r3, #8]
   265e8:	ldr	lr, [r3, #12]
   265ec:	and	ip, ip, r0
   265f0:	ldr	r0, [r4, #16]
   265f4:	and	r2, r2, lr
   265f8:	str	ip, [r4, #8]
   265fc:	ldr	lr, [r4, #20]
   26600:	str	r2, [r4, #12]
   26604:	ldr	r2, [r3, #16]
   26608:	ldr	ip, [r3, #20]
   2660c:	and	r2, r2, r0
   26610:	ldr	r0, [r4, #24]
   26614:	and	ip, ip, lr
   26618:	str	r2, [r4, #16]
   2661c:	ldr	r2, [r4, #28]
   26620:	str	ip, [r4, #20]
   26624:	ldr	ip, [r3, #24]
   26628:	ldr	r3, [r3, #28]
   2662c:	and	r0, r0, ip
   26630:	and	r3, r3, r2
   26634:	str	r0, [r4, #24]
   26638:	str	r3, [r4, #28]
   2663c:	ldr	r3, [sp, #16]
   26640:	ldr	r3, [r3, #20]
   26644:	cmp	r3, #0
   26648:	bne	2675c <__assert_fail@plt+0x15204>
   2664c:	ldr	r2, [sp, #16]
   26650:	ldr	r3, [r2, #24]
   26654:	cmp	r3, #0
   26658:	bne	2675c <__assert_fail@plt+0x15204>
   2665c:	ldr	r3, [r2, #28]
   26660:	cmp	r3, #0
   26664:	bne	2675c <__assert_fail@plt+0x15204>
   26668:	ldr	r3, [r2, #32]
   2666c:	cmp	r3, #0
   26670:	bne	2675c <__assert_fail@plt+0x15204>
   26674:	cmp	r1, #1
   26678:	ble	26694 <__assert_fail@plt+0x1513c>
   2667c:	ldr	r3, [r2, #36]	; 0x24
   26680:	cmp	r3, #0
   26684:	bne	2675c <__assert_fail@plt+0x15204>
   26688:	ldrb	r3, [r2, #16]
   2668c:	tst	r3, #1
   26690:	bne	2675c <__assert_fail@plt+0x15204>
   26694:	ldr	r5, [sp, #16]
   26698:	ldr	r0, [r5]
   2669c:	bl	13e1c <__assert_fail@plt+0x28c4>
   266a0:	ldr	r0, [r5, #4]
   266a4:	bl	13e1c <__assert_fail@plt+0x28c4>
   266a8:	ldr	r0, [r5, #8]
   266ac:	bl	13e1c <__assert_fail@plt+0x28c4>
   266b0:	ldr	r0, [r5, #12]
   266b4:	bl	13e1c <__assert_fail@plt+0x28c4>
   266b8:	mov	r0, r5
   266bc:	bl	13e1c <__assert_fail@plt+0x28c4>
   266c0:	ldr	r1, [sl, #64]	; 0x40
   266c4:	cmp	r1, #31
   266c8:	beq	26c00 <__assert_fail@plt+0x156a8>
   266cc:	ldr	r2, [sl, #56]	; 0x38
   266d0:	lsl	r3, r1, #5
   266d4:	add	r5, r1, #1
   266d8:	mov	lr, #3
   266dc:	mov	r1, #0
   266e0:	add	ip, r3, #24
   266e4:	add	r0, r3, #16
   266e8:	str	r5, [sl, #64]	; 0x40
   266ec:	add	r5, r3, #4
   266f0:	mvn	r7, #0
   266f4:	add	r3, r2, r3
   266f8:	add	r6, r2, ip
   266fc:	add	r0, r2, r0
   26700:	adds	r5, r2, r5
   26704:	str	r1, [r3, #4]
   26708:	str	r1, [r3, #8]
   2670c:	str	r1, [r3, #12]
   26710:	str	r4, [r2, ip]
   26714:	strb	lr, [r6, #4]
   26718:	ldrb	r2, [r0, #14]
   2671c:	str	r5, [sp, #28]
   26720:	bic	r2, r2, #12
   26724:	strb	r2, [r0, #14]
   26728:	str	r1, [r3, #16]
   2672c:	str	r1, [r3, #20]
   26730:	str	r7, [r3, #32]
   26734:	bne	24770 <__assert_fail@plt+0x13218>
   26738:	ldr	r2, [sp, #204]	; 0xcc
   2673c:	mov	r3, #12
   26740:	str	r3, [r2]
   26744:	b	25e3c <__assert_fail@plt+0x148e4>
   26748:	add	r3, r1, #6
   2674c:	ldr	r2, [r4, r3, lsl #2]
   26750:	mvn	r2, r2
   26754:	str	r2, [r4, r3, lsl #2]
   26758:	b	26584 <__assert_fail@plt+0x1502c>
   2675c:	ldrb	r2, [sl, #88]	; 0x58
   26760:	ldr	r3, [sl, #64]	; 0x40
   26764:	orr	r2, r2, #2
   26768:	cmp	r3, #31
   2676c:	strb	r2, [sl, #88]	; 0x58
   26770:	beq	26ae8 <__assert_fail@plt+0x15590>
   26774:	ldr	r0, [sl, #56]	; 0x38
   26778:	lsl	r5, r3, #5
   2677c:	add	ip, r3, #1
   26780:	mov	lr, #6
   26784:	mov	r3, #0
   26788:	str	ip, [sl, #64]	; 0x40
   2678c:	add	ip, r5, #4
   26790:	add	r1, r5, #24
   26794:	add	r2, r5, #16
   26798:	mvn	r6, #0
   2679c:	adds	r8, r0, ip
   267a0:	ldr	ip, [sp, #16]
   267a4:	add	r7, r0, r5
   267a8:	add	r5, r0, r1
   267ac:	add	r2, r0, r2
   267b0:	str	r3, [r7, #4]
   267b4:	str	r3, [r7, #8]
   267b8:	str	r3, [r7, #12]
   267bc:	str	ip, [r0, r1]
   267c0:	strb	lr, [r5, #4]
   267c4:	ldrb	r1, [r2, #14]
   267c8:	bic	r1, r1, #12
   267cc:	strb	r1, [r2, #14]
   267d0:	str	r3, [r7, #16]
   267d4:	str	r3, [r7, #20]
   267d8:	str	r6, [r7, #32]
   267dc:	beq	26738 <__assert_fail@plt+0x151e0>
   267e0:	ldr	r3, [r4]
   267e4:	cmp	r3, #0
   267e8:	bne	26980 <__assert_fail@plt+0x15428>
   267ec:	ldr	r3, [r4, #4]
   267f0:	cmp	r3, #0
   267f4:	bne	26980 <__assert_fail@plt+0x15428>
   267f8:	ldr	r3, [r4, #8]
   267fc:	cmp	r3, #0
   26800:	bne	26980 <__assert_fail@plt+0x15428>
   26804:	ldr	r3, [r4, #12]
   26808:	cmp	r3, #0
   2680c:	bne	26980 <__assert_fail@plt+0x15428>
   26810:	ldr	r3, [r4, #16]
   26814:	cmp	r3, #0
   26818:	bne	26980 <__assert_fail@plt+0x15428>
   2681c:	ldr	r3, [r4, #20]
   26820:	cmp	r3, #0
   26824:	bne	26980 <__assert_fail@plt+0x15428>
   26828:	ldr	r3, [r4, #24]
   2682c:	cmp	r3, #0
   26830:	bne	26980 <__assert_fail@plt+0x15428>
   26834:	ldr	r3, [r4, #28]
   26838:	cmp	r3, #0
   2683c:	bne	26980 <__assert_fail@plt+0x15428>
   26840:	mov	r0, r4
   26844:	str	r8, [sp, #28]
   26848:	bl	13e1c <__assert_fail@plt+0x28c4>
   2684c:	b	24770 <__assert_fail@plt+0x13218>
   26850:	mov	r0, #996	; 0x3e4
   26854:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26858:	cmp	r0, #0
   2685c:	beq	24fec <__assert_fail@plt+0x13a94>
   26860:	ldr	r1, [sl, #56]	; 0x38
   26864:	mov	lr, #4
   26868:	mov	r2, #1
   2686c:	mov	r3, #0
   26870:	str	r1, [r0]
   26874:	str	r0, [sl, #56]	; 0x38
   26878:	b	25ea4 <__assert_fail@plt+0x1494c>
   2687c:	mov	r0, #996	; 0x3e4
   26880:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26884:	cmp	r0, #0
   26888:	mov	r4, r0
   2688c:	beq	24cb0 <__assert_fail@plt+0x13758>
   26890:	ldr	ip, [sl, #56]	; 0x38
   26894:	mov	r3, r6
   26898:	mov	r2, r0
   2689c:	mov	r1, #1
   268a0:	mov	r4, #4
   268a4:	str	ip, [r0]
   268a8:	str	r0, [sl, #56]	; 0x38
   268ac:	b	24c64 <__assert_fail@plt+0x1370c>
   268b0:	mov	r0, #996	; 0x3e4
   268b4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   268b8:	cmp	r0, #0
   268bc:	mov	r4, r0
   268c0:	beq	260f8 <__assert_fail@plt+0x14ba0>
   268c4:	ldr	ip, [sl, #56]	; 0x38
   268c8:	mov	r3, r6
   268cc:	mov	r2, r0
   268d0:	mov	r1, #1
   268d4:	mov	r4, #4
   268d8:	str	ip, [r0]
   268dc:	str	r0, [sl, #56]	; 0x38
   268e0:	b	260ac <__assert_fail@plt+0x14b54>
   268e4:	mov	r4, #128	; 0x80
   268e8:	mov	r7, #4
   268ec:	bl	113fc <__ctype_b_loc@plt>
   268f0:	ldr	r2, [r0]
   268f4:	add	ip, r7, #24
   268f8:	sub	r3, r4, #-2147483647	; 0x80000001
   268fc:	mov	lr, #1
   26900:	add	ip, sl, ip, lsl #2
   26904:	add	r7, sl, #128	; 0x80
   26908:	add	r6, r2, r3, lsl lr
   2690c:	mov	r0, r6
   26910:	mov	r1, #0
   26914:	ldrh	r2, [r0, #2]!
   26918:	add	r3, r4, r1
   2691c:	ubfx	r2, r2, #3, #1
   26920:	cmp	r3, #95	; 0x5f
   26924:	movne	r3, r2
   26928:	orreq	r3, r2, #1
   2692c:	cmp	r3, #0
   26930:	beq	26940 <__assert_fail@plt+0x153e8>
   26934:	ldr	r3, [ip]
   26938:	orr	r3, r3, lr, lsl r1
   2693c:	str	r3, [ip]
   26940:	add	r1, r1, #1
   26944:	cmp	r1, #32
   26948:	bne	26914 <__assert_fail@plt+0x153bc>
   2694c:	add	ip, ip, #4
   26950:	add	r4, r4, #32
   26954:	cmp	ip, r7
   26958:	add	r6, r6, #64	; 0x40
   2695c:	bne	2690c <__assert_fail@plt+0x153b4>
   26960:	b	24c28 <__assert_fail@plt+0x136d0>
   26964:	mov	r7, r4
   26968:	b	268ec <__assert_fail@plt+0x15394>
   2696c:	cmp	r3, #3
   26970:	cmpne	r3, #0
   26974:	beq	26248 <__assert_fail@plt+0x14cf0>
   26978:	ldr	r8, [sp, #84]	; 0x54
   2697c:	b	2623c <__assert_fail@plt+0x14ce4>
   26980:	ldr	r2, [sl, #64]	; 0x40
   26984:	cmp	r2, #31
   26988:	beq	26b34 <__assert_fail@plt+0x155dc>
   2698c:	lsl	r3, r2, #5
   26990:	add	r2, r2, #1
   26994:	mov	r6, #0
   26998:	mov	lr, #3
   2699c:	add	r1, r3, #24
   269a0:	add	r5, r0, r3
   269a4:	str	r2, [sl, #64]	; 0x40
   269a8:	add	ip, r0, r1
   269ac:	add	r2, r3, #16
   269b0:	add	r2, r0, r2
   269b4:	add	r3, r3, #4
   269b8:	str	r6, [r5, #4]
   269bc:	adds	fp, r0, r3
   269c0:	str	r6, [r5, #8]
   269c4:	str	r6, [r5, #12]
   269c8:	str	r4, [r0, r1]
   269cc:	strb	lr, [ip, #4]
   269d0:	ldrb	r3, [r2, #14]
   269d4:	bic	r3, r3, #12
   269d8:	strb	r3, [r2, #14]
   269dc:	mvn	r3, #0
   269e0:	str	r6, [r5, #16]
   269e4:	str	r6, [r5, #20]
   269e8:	str	r3, [r5, #32]
   269ec:	beq	26738 <__assert_fail@plt+0x151e0>
   269f0:	mov	r2, #0
   269f4:	mov	r3, #0
   269f8:	strd	r2, [sp, #128]	; 0x80
   269fc:	ldr	r1, [sl, #64]	; 0x40
   26a00:	cmp	r1, #31
   26a04:	beq	26b0c <__assert_fail@plt+0x155b4>
   26a08:	ldr	ip, [sl, #56]	; 0x38
   26a0c:	lsl	r3, r1, #5
   26a10:	add	r1, r1, #1
   26a14:	mov	lr, #10
   26a18:	str	r1, [sl, #64]	; 0x40
   26a1c:	add	r1, r3, #4
   26a20:	add	r2, r3, #16
   26a24:	add	r6, ip, r1
   26a28:	add	r3, ip, r3
   26a2c:	mov	r1, #0
   26a30:	add	r2, ip, r2
   26a34:	cmp	r6, r1
   26a38:	mvn	ip, #0
   26a3c:	str	r6, [sp, #28]
   26a40:	stmib	r3, {r1, fp}
   26a44:	str	r8, [r3, #12]
   26a48:	strb	lr, [sp, #132]	; 0x84
   26a4c:	ldrd	r0, [sp, #128]	; 0x80
   26a50:	strd	r0, [r3, #24]
   26a54:	ldrb	r1, [r2, #14]
   26a58:	bic	r1, r1, #12
   26a5c:	strb	r1, [r2, #14]
   26a60:	mov	r2, #0
   26a64:	str	r2, [r3, #16]
   26a68:	str	r2, [r3, #20]
   26a6c:	str	ip, [r3, #32]
   26a70:	str	r6, [r5, #4]
   26a74:	str	r6, [r7, #4]
   26a78:	bne	24770 <__assert_fail@plt+0x13218>
   26a7c:	b	26738 <__assert_fail@plt+0x151e0>
   26a80:	ldr	r7, [sp, #76]	; 0x4c
   26a84:	b	26214 <__assert_fail@plt+0x14cbc>
   26a88:	cmp	r3, #0
   26a8c:	movne	r7, #0
   26a90:	bne	26ab4 <__assert_fail@plt+0x1555c>
   26a94:	mov	r7, r3
   26a98:	ldrb	r8, [sp, #84]	; 0x54
   26a9c:	b	261e0 <__assert_fail@plt+0x14c88>
   26aa0:	mov	r3, #11
   26aa4:	ldr	sl, [sp, #24]
   26aa8:	ldr	r2, [sp, #204]	; 0xcc
   26aac:	str	r3, [r2]
   26ab0:	b	25e3c <__assert_fail@plt+0x148e4>
   26ab4:	mov	r8, #0
   26ab8:	b	261e0 <__assert_fail@plt+0x14c88>
   26abc:	ldr	r0, [sp, #76]	; 0x4c
   26ac0:	strd	r2, [sp, #56]	; 0x38
   26ac4:	bl	11414 <strlen@plt>
   26ac8:	cmp	r0, #1
   26acc:	ldrd	r2, [sp, #56]	; 0x38
   26ad0:	bhi	26390 <__assert_fail@plt+0x14e38>
   26ad4:	cmp	r3, #3
   26ad8:	beq	26378 <__assert_fail@plt+0x14e20>
   26adc:	ldr	r1, [sp, #76]	; 0x4c
   26ae0:	ldrb	r7, [r1]
   26ae4:	b	261c8 <__assert_fail@plt+0x14c70>
   26ae8:	mov	r0, #996	; 0x3e4
   26aec:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26af0:	cmp	r0, #0
   26af4:	beq	26738 <__assert_fail@plt+0x151e0>
   26af8:	ldr	r2, [sl, #56]	; 0x38
   26afc:	mov	r3, #0
   26b00:	str	r2, [r0]
   26b04:	str	r0, [sl, #56]	; 0x38
   26b08:	b	26774 <__assert_fail@plt+0x1521c>
   26b0c:	mov	r0, #996	; 0x3e4
   26b10:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26b14:	cmp	r0, #0
   26b18:	beq	26738 <__assert_fail@plt+0x151e0>
   26b1c:	ldr	r3, [sl, #56]	; 0x38
   26b20:	mov	r1, r6
   26b24:	str	r3, [r0]
   26b28:	str	r0, [sl, #56]	; 0x38
   26b2c:	str	r6, [sl, #64]	; 0x40
   26b30:	b	26a08 <__assert_fail@plt+0x154b0>
   26b34:	mov	r0, #996	; 0x3e4
   26b38:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26b3c:	cmp	r0, #0
   26b40:	beq	26738 <__assert_fail@plt+0x151e0>
   26b44:	ldr	r3, [sl, #56]	; 0x38
   26b48:	mov	r2, #0
   26b4c:	str	r3, [r0]
   26b50:	str	r0, [sl, #56]	; 0x38
   26b54:	b	2698c <__assert_fail@plt+0x15434>
   26b58:	ldr	r0, [sp, #84]	; 0x54
   26b5c:	strd	r2, [sp, #56]	; 0x38
   26b60:	bl	11414 <strlen@plt>
   26b64:	cmp	r0, #1
   26b68:	bhi	26390 <__assert_fail@plt+0x14e38>
   26b6c:	ldrd	r2, [sp, #56]	; 0x38
   26b70:	cmp	r2, #0
   26b74:	movne	r7, #0
   26b78:	bne	261d8 <__assert_fail@plt+0x14c80>
   26b7c:	b	261c4 <__assert_fail@plt+0x14c6c>
   26b80:	ldr	r0, [r3]
   26b84:	ldr	ip, [r4, #4]
   26b88:	and	r2, r2, r0
   26b8c:	ldr	r0, [r4, #8]
   26b90:	str	r2, [r4]
   26b94:	ldr	lr, [r3, #4]
   26b98:	ldr	r2, [r4, #12]
   26b9c:	and	ip, ip, lr
   26ba0:	ldr	lr, [r4, #16]
   26ba4:	str	ip, [r4, #4]
   26ba8:	ldr	r5, [r3, #8]
   26bac:	ldr	ip, [r4, #20]
   26bb0:	and	r0, r0, r5
   26bb4:	str	r0, [r4, #8]
   26bb8:	ldr	r5, [r3, #12]
   26bbc:	ldr	r0, [r4, #24]
   26bc0:	and	r2, r2, r5
   26bc4:	str	r2, [r4, #12]
   26bc8:	ldr	r5, [r3, #16]
   26bcc:	ldr	r2, [r4, #28]
   26bd0:	and	lr, lr, r5
   26bd4:	str	lr, [r4, #16]
   26bd8:	ldr	lr, [r3, #20]
   26bdc:	and	ip, ip, lr
   26be0:	str	ip, [r4, #20]
   26be4:	ldr	ip, [r3, #24]
   26be8:	and	r0, r0, ip
   26bec:	str	r0, [r4, #24]
   26bf0:	ldr	r3, [r3, #28]
   26bf4:	and	r3, r3, r2
   26bf8:	str	r3, [r4, #28]
   26bfc:	b	2663c <__assert_fail@plt+0x150e4>
   26c00:	mov	r0, #996	; 0x3e4
   26c04:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26c08:	cmp	r0, #0
   26c0c:	beq	26738 <__assert_fail@plt+0x151e0>
   26c10:	ldr	r2, [sl, #56]	; 0x38
   26c14:	mov	r3, #0
   26c18:	mov	r1, r3
   26c1c:	str	r2, [r0]
   26c20:	str	r0, [sl, #56]	; 0x38
   26c24:	str	r3, [sl, #64]	; 0x40
   26c28:	b	266cc <__assert_fail@plt+0x15174>
   26c2c:	ldr	sl, [sp, #24]
   26c30:	b	26738 <__assert_fail@plt+0x151e0>
   26c34:	lsl	r3, r1, #1
   26c38:	mov	r0, r2
   26c3c:	add	r3, r3, #1
   26c40:	str	r3, [sp, #40]	; 0x28
   26c44:	lsl	r3, r3, #2
   26c48:	mov	r1, r3
   26c4c:	str	r3, [sp, #56]	; 0x38
   26c50:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   26c54:	ldr	r3, [sp, #56]	; 0x38
   26c58:	mov	r2, r0
   26c5c:	str	r2, [sp, #52]	; 0x34
   26c60:	mov	r1, r3
   26c64:	ldr	r3, [sp, #16]
   26c68:	ldr	r0, [r3, #8]
   26c6c:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   26c70:	ldr	r2, [sp, #52]	; 0x34
   26c74:	cmp	r0, #0
   26c78:	cmpne	r2, #0
   26c7c:	beq	26cb4 <__assert_fail@plt+0x1575c>
   26c80:	ldr	r1, [sp, #16]
   26c84:	str	r2, [r1, #4]
   26c88:	str	r0, [r1, #8]
   26c8c:	ldr	r3, [r1, #32]
   26c90:	b	26288 <__assert_fail@plt+0x14d30>
   26c94:	add	fp, sp, #128	; 0x80
   26c98:	ldr	r7, [sp, #28]
   26c9c:	b	25bc4 <__assert_fail@plt+0x1466c>
   26ca0:	ldr	r6, [sp, #28]
   26ca4:	mov	r4, r6
   26ca8:	b	25ad4 <__assert_fail@plt+0x1457c>
   26cac:	mov	r5, r0
   26cb0:	b	24d24 <__assert_fail@plt+0x137cc>
   26cb4:	mov	r8, r0
   26cb8:	mov	r0, r2
   26cbc:	ldr	sl, [sp, #24]
   26cc0:	bl	13e1c <__assert_fail@plt+0x28c4>
   26cc4:	mov	r0, r8
   26cc8:	bl	13e1c <__assert_fail@plt+0x28c4>
   26ccc:	ldr	r2, [sp, #204]	; 0xcc
   26cd0:	mov	r3, #12
   26cd4:	str	r3, [r2]
   26cd8:	b	25e3c <__assert_fail@plt+0x148e4>
   26cdc:	ldr	r8, [sp, #24]
   26ce0:	b	2586c <__assert_fail@plt+0x14314>
   26ce4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26ce8:	strd	r6, [sp, #8]
   26cec:	mov	r7, r2
   26cf0:	strd	r8, [sp, #16]
   26cf4:	mov	r8, r1
   26cf8:	strd	sl, [sp, #24]
   26cfc:	mov	fp, r0
   26d00:	str	lr, [sp, #32]
   26d04:	sub	sp, sp, #44	; 0x2c
   26d08:	ldr	r6, [sp, #80]	; 0x50
   26d0c:	str	r3, [sp, #12]
   26d10:	ldr	r5, [sp, #84]	; 0x54
   26d14:	ldr	r9, [r1]
   26d18:	str	r6, [sp]
   26d1c:	str	r5, [sp, #4]
   26d20:	bl	245fc <__assert_fail@plt+0x130a4>
   26d24:	ldr	r2, [r5]
   26d28:	clz	r3, r0
   26d2c:	lsr	r3, r3, #5
   26d30:	cmp	r2, #0
   26d34:	moveq	r3, #0
   26d38:	cmp	r3, #0
   26d3c:	bne	26ef8 <__assert_fail@plt+0x159a0>
   26d40:	mov	r4, r0
   26d44:	strd	r8, [sp, #16]
   26d48:	str	r3, [sp, #24]
   26d4c:	ldrb	r2, [r7, #4]
   26d50:	and	r3, r2, #247	; 0xf7
   26d54:	cmp	r3, #2
   26d58:	beq	26dd4 <__assert_fail@plt+0x1587c>
   26d5c:	clz	r3, r6
   26d60:	lsr	r3, r3, #5
   26d64:	cmp	r2, #9
   26d68:	orrne	r3, r3, #1
   26d6c:	cmp	r3, #0
   26d70:	beq	26dd4 <__assert_fail@plt+0x1587c>
   26d74:	mov	r2, r7
   26d78:	mov	r0, fp
   26d7c:	str	r6, [sp]
   26d80:	str	r5, [sp, #4]
   26d84:	ldr	r3, [sp, #12]
   26d88:	ldr	r1, [sp, #16]
   26d8c:	bl	245fc <__assert_fail@plt+0x130a4>
   26d90:	ldr	r2, [r5]
   26d94:	clz	r3, r0
   26d98:	mov	sl, r0
   26d9c:	lsr	r3, r3, #5
   26da0:	cmp	r2, #0
   26da4:	moveq	r3, #0
   26da8:	cmp	r3, #0
   26dac:	bne	26ec0 <__assert_fail@plt+0x15968>
   26db0:	cmp	r4, #0
   26db4:	cmpne	r0, #0
   26db8:	bne	26df4 <__assert_fail@plt+0x1589c>
   26dbc:	ldrb	r2, [r7, #4]
   26dc0:	cmp	r4, #0
   26dc4:	moveq	r4, r0
   26dc8:	and	r3, r2, #247	; 0xf7
   26dcc:	cmp	r3, #2
   26dd0:	bne	26d5c <__assert_fail@plt+0x15804>
   26dd4:	mov	r0, r4
   26dd8:	add	sp, sp, #44	; 0x2c
   26ddc:	ldrd	r4, [sp]
   26de0:	ldrd	r6, [sp, #8]
   26de4:	ldrd	r8, [sp, #16]
   26de8:	ldrd	sl, [sp, #24]
   26dec:	add	sp, sp, #32
   26df0:	pop	{pc}		; (ldr pc, [sp], #4)
   26df4:	ldr	r2, [sp, #20]
   26df8:	mov	r0, #0
   26dfc:	mov	r1, #0
   26e00:	strd	r0, [sp, #32]
   26e04:	ldr	ip, [r2, #64]	; 0x40
   26e08:	cmp	ip, #31
   26e0c:	beq	26e8c <__assert_fail@plt+0x15934>
   26e10:	ldr	r0, [r2, #56]	; 0x38
   26e14:	lsl	r3, ip, #5
   26e18:	add	ip, ip, #1
   26e1c:	add	r1, r3, #4
   26e20:	mov	r2, #16
   26e24:	ldr	lr, [sp, #24]
   26e28:	strb	r2, [sp, #36]	; 0x24
   26e2c:	add	r2, r0, r3
   26e30:	add	r3, r3, #16
   26e34:	add	r3, r0, r3
   26e38:	add	r0, r0, r1
   26e3c:	ldr	r1, [sp, #20]
   26e40:	cmp	r0, #0
   26e44:	ldrd	r8, [sp, #32]
   26e48:	str	ip, [r1, #64]	; 0x40
   26e4c:	mvn	r1, #0
   26e50:	str	lr, [r2, #4]
   26e54:	str	r4, [r2, #8]
   26e58:	str	sl, [r2, #12]
   26e5c:	strd	r8, [r2, #24]
   26e60:	ldrb	ip, [r3, #14]
   26e64:	bic	ip, ip, #12
   26e68:	strb	ip, [r3, #14]
   26e6c:	str	lr, [r2, #16]
   26e70:	str	lr, [r2, #20]
   26e74:	str	r1, [r2, #32]
   26e78:	str	r0, [r4]
   26e7c:	str	r0, [sl]
   26e80:	beq	26ed8 <__assert_fail@plt+0x15980>
   26e84:	mov	r4, r0
   26e88:	b	26d4c <__assert_fail@plt+0x157f4>
   26e8c:	mov	r0, #996	; 0x3e4
   26e90:	str	r3, [sp, #28]
   26e94:	bl	2cd58 <__assert_fail@plt+0x1b800>
   26e98:	cmp	r0, #0
   26e9c:	beq	26ed8 <__assert_fail@plt+0x15980>
   26ea0:	ldr	lr, [sp, #20]
   26ea4:	mov	ip, #1
   26ea8:	mov	r1, #4
   26eac:	ldr	r3, [sp, #28]
   26eb0:	ldr	r2, [lr, #56]	; 0x38
   26eb4:	str	r2, [r0]
   26eb8:	str	r0, [lr, #56]	; 0x38
   26ebc:	b	26e20 <__assert_fail@plt+0x158c8>
   26ec0:	cmp	r4, #0
   26ec4:	beq	26ef8 <__assert_fail@plt+0x159a0>
   26ec8:	mov	r0, r4
   26ecc:	mov	r4, #0
   26ed0:	bl	1c254 <__assert_fail@plt+0xacfc>
   26ed4:	b	26dd4 <__assert_fail@plt+0x1587c>
   26ed8:	mov	r0, sl
   26edc:	bl	1c254 <__assert_fail@plt+0xacfc>
   26ee0:	mov	r0, r4
   26ee4:	mov	r4, #0
   26ee8:	bl	1c254 <__assert_fail@plt+0xacfc>
   26eec:	mov	r3, #12
   26ef0:	str	r3, [r5]
   26ef4:	b	26dd4 <__assert_fail@plt+0x1587c>
   26ef8:	mov	r4, #0
   26efc:	b	26dd4 <__assert_fail@plt+0x1587c>
   26f00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26f04:	mov	r5, r2
   26f08:	mov	r4, r0
   26f0c:	strd	r6, [sp, #8]
   26f10:	ldr	r6, [r1]
   26f14:	strd	r8, [sp, #16]
   26f18:	mov	r8, r3
   26f1c:	strd	sl, [sp, #24]
   26f20:	mov	sl, r1
   26f24:	str	lr, [sp, #32]
   26f28:	sub	sp, sp, #76	; 0x4c
   26f2c:	ldr	r9, [sp, #116]	; 0x74
   26f30:	ldr	ip, [r6, #84]	; 0x54
   26f34:	str	r9, [sp, #4]
   26f38:	str	ip, [sp, #16]
   26f3c:	ldr	ip, [sp, #112]	; 0x70
   26f40:	str	ip, [sp]
   26f44:	bl	26ce4 <__assert_fail@plt+0x1578c>
   26f48:	ldr	r2, [r9]
   26f4c:	clz	r3, r0
   26f50:	lsr	r3, r3, #5
   26f54:	cmp	r2, #0
   26f58:	moveq	r3, #0
   26f5c:	cmp	r3, #0
   26f60:	bne	27aa8 <__assert_fail@plt+0x16550>
   26f64:	movw	r3, #1026	; 0x402
   26f68:	mov	r2, #65280	; 0xff00
   26f6c:	movt	r2, #65503	; 0xffdf
   26f70:	and	r3, r8, r3
   26f74:	str	r8, [sp, #12]
   26f78:	mov	r7, r0
   26f7c:	str	sl, [sp, #20]
   26f80:	str	r3, [sp, #32]
   26f84:	and	r3, r8, #4608	; 0x1200
   26f88:	str	r3, [sp, #36]	; 0x24
   26f8c:	and	r3, r8, #33792	; 0x8400
   26f90:	str	r2, [sp, #40]	; 0x28
   26f94:	str	r3, [sp, #44]	; 0x2c
   26f98:	and	r3, r8, #8192	; 0x2000
   26f9c:	str	r9, [sp, #116]	; 0x74
   26fa0:	str	r3, [sp, #28]
   26fa4:	and	r3, r8, #8
   26fa8:	str	r3, [sp, #52]	; 0x34
   26fac:	and	r3, r8, #2048	; 0x800
   26fb0:	str	r3, [sp, #56]	; 0x38
   26fb4:	and	r3, r8, #524288	; 0x80000
   26fb8:	str	r3, [sp, #48]	; 0x30
   26fbc:	and	r3, r8, #16384	; 0x4000
   26fc0:	str	r3, [sp, #60]	; 0x3c
   26fc4:	ldrb	r3, [r5, #4]
   26fc8:	cmp	r3, #10
   26fcc:	bne	27380 <__assert_fail@plt+0x15e28>
   26fd0:	ldr	r0, [r4, #40]	; 0x28
   26fd4:	ldr	r3, [r4, #56]	; 0x38
   26fd8:	cmp	r3, r0
   26fdc:	ble	27354 <__assert_fail@plt+0x15dfc>
   26fe0:	ldr	r1, [r4, #4]
   26fe4:	add	fp, r0, #1
   26fe8:	ldrb	ip, [r5, #6]
   26fec:	ldr	r2, [r4, #80]	; 0x50
   26ff0:	ldrb	sl, [r1, r0]
   26ff4:	bic	ip, ip, #96	; 0x60
   26ff8:	cmp	r2, #1
   26ffc:	strb	sl, [r5]
   27000:	strb	ip, [r5, #6]
   27004:	ble	273a0 <__assert_fail@plt+0x15e48>
   27008:	ldr	ip, [r4, #28]
   2700c:	cmp	r0, ip
   27010:	beq	27024 <__assert_fail@plt+0x15acc>
   27014:	ldr	ip, [r4, #8]
   27018:	ldr	ip, [ip, r0, lsl #2]
   2701c:	cmn	ip, #1
   27020:	beq	27664 <__assert_fail@plt+0x1610c>
   27024:	cmp	sl, #92	; 0x5c
   27028:	beq	273dc <__assert_fail@plt+0x15e84>
   2702c:	ldr	r2, [r4, #8]
   27030:	mov	r1, #1
   27034:	strb	r1, [r5, #4]
   27038:	ldr	r2, [r2, r0, lsl #2]
   2703c:	mov	r0, r2
   27040:	str	r2, [sp, #24]
   27044:	bl	11438 <iswalnum@plt>
   27048:	ldr	r2, [sp, #24]
   2704c:	adds	r0, r0, #0
   27050:	movne	r0, #1
   27054:	ldrb	r1, [r5, #6]
   27058:	cmp	r2, #95	; 0x5f
   2705c:	orreq	r0, r0, #1
   27060:	bfi	r1, r0, #6, #1
   27064:	strb	r1, [r5, #6]
   27068:	sub	r3, sl, #10
   2706c:	cmp	r3, #115	; 0x73
   27070:	ldrls	pc, [pc, r3, lsl #2]
   27074:	b	27254 <__assert_fail@plt+0x15cfc>
   27078:	andeq	r7, r2, ip, asr #13
   2707c:	andeq	r7, r2, r4, asr r2
   27080:	andeq	r7, r2, r4, asr r2
   27084:	andeq	r7, r2, r4, asr r2
   27088:	andeq	r7, r2, r4, asr r2
   2708c:	andeq	r7, r2, r4, asr r2
   27090:	andeq	r7, r2, r4, asr r2
   27094:	andeq	r7, r2, r4, asr r2
   27098:	andeq	r7, r2, r4, asr r2
   2709c:	andeq	r7, r2, r4, asr r2
   270a0:	andeq	r7, r2, r4, asr r2
   270a4:	andeq	r7, r2, r4, asr r2
   270a8:	andeq	r7, r2, r4, asr r2
   270ac:	andeq	r7, r2, r4, asr r2
   270b0:	andeq	r7, r2, r4, asr r2
   270b4:	andeq	r7, r2, r4, asr r2
   270b8:	andeq	r7, r2, r4, asr r2
   270bc:	andeq	r7, r2, r4, asr r2
   270c0:	andeq	r7, r2, r4, asr r2
   270c4:	andeq	r7, r2, r4, asr r2
   270c8:	andeq	r7, r2, r4, asr r2
   270cc:	andeq	r7, r2, r4, asr r2
   270d0:	andeq	r7, r2, r4, asr r2
   270d4:	andeq	r7, r2, r4, asr r2
   270d8:	andeq	r7, r2, r4, asr r2
   270dc:	andeq	r7, r2, r4, asr r2
   270e0:	andeq	r7, r2, ip, ror #13
   270e4:	andeq	r7, r2, r4, asr r2
   270e8:	andeq	r7, r2, r4, asr r2
   270ec:	andeq	r7, r2, r4, asr r2
   270f0:	andeq	r7, r2, ip, lsl r7
   270f4:	andeq	r7, r2, r8, lsr r7
   270f8:	andeq	r7, r2, r8, asr r7
   270fc:	andeq	r7, r2, r8, ror #14
   27100:	andeq	r7, r2, r4, asr r2
   27104:	andeq	r7, r2, r4, asr r2
   27108:	andeq	r7, r2, r4, lsl #15
   2710c:	andeq	r7, r2, r4, asr r2
   27110:	andeq	r7, r2, r4, asr r2
   27114:	andeq	r7, r2, r4, asr r2
   27118:	andeq	r7, r2, r4, asr r2
   2711c:	andeq	r7, r2, r4, asr r2
   27120:	andeq	r7, r2, r4, asr r2
   27124:	andeq	r7, r2, r4, asr r2
   27128:	andeq	r7, r2, r4, asr r2
   2712c:	andeq	r7, r2, r4, asr r2
   27130:	andeq	r7, r2, r4, asr r2
   27134:	andeq	r7, r2, r4, asr r2
   27138:	andeq	r7, r2, r4, asr r2
   2713c:	andeq	r7, r2, r4, asr r2
   27140:	andeq	r7, r2, r4, asr r2
   27144:	andeq	r7, r2, r4, asr r2
   27148:	andeq	r7, r2, r4, asr r2
   2714c:	muleq	r2, r4, r7
   27150:	andeq	r7, r2, r4, asr r2
   27154:	andeq	r7, r2, r4, asr r2
   27158:	andeq	r7, r2, r4, asr r2
   2715c:	andeq	r7, r2, r4, asr r2
   27160:	andeq	r7, r2, r4, asr r2
   27164:	andeq	r7, r2, r4, asr r2
   27168:	andeq	r7, r2, r4, asr r2
   2716c:	andeq	r7, r2, r4, asr r2
   27170:	andeq	r7, r2, r4, asr r2
   27174:	andeq	r7, r2, r4, asr r2
   27178:	andeq	r7, r2, r4, asr r2
   2717c:	andeq	r7, r2, r4, asr r2
   27180:	andeq	r7, r2, r4, asr r2
   27184:	andeq	r7, r2, r4, asr r2
   27188:	andeq	r7, r2, r4, asr r2
   2718c:	andeq	r7, r2, r4, asr r2
   27190:	andeq	r7, r2, r4, asr r2
   27194:	andeq	r7, r2, r4, asr r2
   27198:	andeq	r7, r2, r4, asr r2
   2719c:	andeq	r7, r2, r4, asr r2
   271a0:	andeq	r7, r2, r4, asr r2
   271a4:	andeq	r7, r2, r4, asr r2
   271a8:	andeq	r7, r2, r4, asr r2
   271ac:	andeq	r7, r2, r4, asr r2
   271b0:	andeq	r7, r2, r4, asr r2
   271b4:	andeq	r7, r2, r4, asr r2
   271b8:	andeq	r7, r2, r4, asr r2
   271bc:			; <UNDEFINED> instruction: 0x000277b0
   271c0:	andeq	r7, r2, r4, asr r2
   271c4:	andeq	r7, r2, r4, asr r2
   271c8:	andeq	r7, r2, r0, asr #15
   271cc:	andeq	r7, r2, r4, asr r2
   271d0:	andeq	r7, r2, r4, asr r2
   271d4:	andeq	r7, r2, r4, asr r2
   271d8:	andeq	r7, r2, r4, asr r2
   271dc:	andeq	r7, r2, r4, asr r2
   271e0:	andeq	r7, r2, r4, asr r2
   271e4:	andeq	r7, r2, r4, asr r2
   271e8:	andeq	r7, r2, r4, asr r2
   271ec:	andeq	r7, r2, r4, asr r2
   271f0:	andeq	r7, r2, r4, asr r2
   271f4:	andeq	r7, r2, r4, asr r2
   271f8:	andeq	r7, r2, r4, asr r2
   271fc:	andeq	r7, r2, r4, asr r2
   27200:	andeq	r7, r2, r4, asr r2
   27204:	andeq	r7, r2, r4, asr r2
   27208:	andeq	r7, r2, r4, asr r2
   2720c:	andeq	r7, r2, r4, asr r2
   27210:	andeq	r7, r2, r4, asr r2
   27214:	andeq	r7, r2, r4, asr r2
   27218:	andeq	r7, r2, r4, asr r2
   2721c:	andeq	r7, r2, r4, asr r2
   27220:	andeq	r7, r2, r4, asr r2
   27224:	andeq	r7, r2, r4, asr r2
   27228:	andeq	r7, r2, r4, asr r2
   2722c:	andeq	r7, r2, r4, asr r2
   27230:	andeq	r7, r2, r4, asr r2
   27234:	andeq	r7, r2, r4, asr r2
   27238:	andeq	r7, r2, r4, asr r2
   2723c:	ldrdeq	r7, [r2], -r8
   27240:	andeq	r7, r2, r8, asr #4
   27244:			; <UNDEFINED> instruction: 0x000276b0
   27248:	ldr	r3, [sp, #44]	; 0x2c
   2724c:	cmp	r3, #32768	; 0x8000
   27250:	beq	276d8 <__assert_fail@plt+0x16180>
   27254:	str	fp, [r4, #40]	; 0x28
   27258:	ldr	fp, [r6, #84]	; 0x54
   2725c:	mov	r2, r5
   27260:	mov	r0, r4
   27264:	ldr	ip, [sp, #16]
   27268:	ldr	r3, [sp, #12]
   2726c:	ldr	r1, [sp, #20]
   27270:	str	ip, [r6, #84]	; 0x54
   27274:	ldr	ip, [sp, #112]	; 0x70
   27278:	str	ip, [sp]
   2727c:	ldr	ip, [sp, #116]	; 0x74
   27280:	str	ip, [sp, #4]
   27284:	bl	26ce4 <__assert_fail@plt+0x1578c>
   27288:	ldr	r3, [sp, #116]	; 0x74
   2728c:	mov	sl, r0
   27290:	ldr	r2, [r3]
   27294:	clz	r3, r0
   27298:	lsr	r3, r3, #5
   2729c:	cmp	r2, #0
   272a0:	moveq	r3, #0
   272a4:	cmp	r3, #0
   272a8:	bne	27a90 <__assert_fail@plt+0x16538>
   272ac:	ldr	r3, [r6, #84]	; 0x54
   272b0:	orr	fp, r3, fp
   272b4:	str	fp, [r6, #84]	; 0x54
   272b8:	mov	r2, #0
   272bc:	mov	r3, #0
   272c0:	strd	r2, [sp, #64]	; 0x40
   272c4:	ldr	fp, [r6, #64]	; 0x40
   272c8:	cmp	fp, #31
   272cc:	beq	273f8 <__assert_fail@plt+0x15ea0>
   272d0:	ldr	r0, [r6, #56]	; 0x38
   272d4:	lsl	r3, fp, #5
   272d8:	add	fp, fp, #1
   272dc:	add	ip, r3, #4
   272e0:	add	r2, r0, r3
   272e4:	mov	lr, #0
   272e8:	str	fp, [r6, #64]	; 0x40
   272ec:	mov	fp, #10
   272f0:	add	r3, r3, #16
   272f4:	str	lr, [r2, #4]
   272f8:	add	r3, r0, r3
   272fc:	cmp	r7, lr
   27300:	str	r7, [r2, #8]
   27304:	add	r0, r0, ip
   27308:	mvn	ip, #0
   2730c:	str	sl, [r2, #12]
   27310:	strb	fp, [sp, #68]	; 0x44
   27314:	ldrd	r8, [sp, #64]	; 0x40
   27318:	strd	r8, [r2, #24]
   2731c:	ldrb	fp, [r3, #14]
   27320:	bic	fp, fp, #12
   27324:	strb	fp, [r3, #14]
   27328:	str	lr, [r2, #16]
   2732c:	str	lr, [r2, #20]
   27330:	str	ip, [r2, #32]
   27334:	strne	r0, [r7]
   27338:	cmp	sl, #0
   2733c:	beq	27368 <__assert_fail@plt+0x15e10>
   27340:	cmp	r0, #0
   27344:	str	r0, [sl]
   27348:	beq	27370 <__assert_fail@plt+0x15e18>
   2734c:	mov	r7, r0
   27350:	b	26fc4 <__assert_fail@plt+0x15a6c>
   27354:	mov	r3, #2
   27358:	mov	sl, #0
   2735c:	strb	r3, [r5, #4]
   27360:	str	r0, [r4, #40]	; 0x28
   27364:	b	272b8 <__assert_fail@plt+0x15d60>
   27368:	cmp	r0, #0
   2736c:	bne	2734c <__assert_fail@plt+0x15df4>
   27370:	ldr	r9, [sp, #116]	; 0x74
   27374:	mov	r3, #12
   27378:	mov	r7, #0
   2737c:	str	r3, [r9]
   27380:	mov	r0, r7
   27384:	add	sp, sp, #76	; 0x4c
   27388:	ldrd	r4, [sp]
   2738c:	ldrd	r6, [sp, #8]
   27390:	ldrd	r8, [sp, #16]
   27394:	ldrd	sl, [sp, #24]
   27398:	add	sp, sp, #32
   2739c:	pop	{pc}		; (ldr pc, [sp], #4)
   273a0:	cmp	sl, #92	; 0x5c
   273a4:	beq	273dc <__assert_fail@plt+0x15e84>
   273a8:	mov	r2, #1
   273ac:	strb	r2, [r5, #4]
   273b0:	bl	113fc <__ctype_b_loc@plt>
   273b4:	ldr	r0, [r0]
   273b8:	lsl	r2, sl, #1
   273bc:	ldrb	r1, [r5, #6]
   273c0:	ldrh	r2, [r0, r2]
   273c4:	ubfx	r2, r2, #3, #1
   273c8:	cmp	sl, #95	; 0x5f
   273cc:	orreq	r2, r2, #1
   273d0:	bfi	r1, r2, #6, #1
   273d4:	strb	r1, [r5, #6]
   273d8:	b	27068 <__assert_fail@plt+0x15b10>
   273dc:	ldr	r3, [r4, #48]	; 0x30
   273e0:	cmp	r3, fp
   273e4:	bgt	27424 <__assert_fail@plt+0x15ecc>
   273e8:	mov	r3, #36	; 0x24
   273ec:	strb	r3, [r5, #4]
   273f0:	str	fp, [r4, #40]	; 0x28
   273f4:	b	27258 <__assert_fail@plt+0x15d00>
   273f8:	mov	r0, #996	; 0x3e4
   273fc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   27400:	cmp	r0, #0
   27404:	beq	27370 <__assert_fail@plt+0x15e18>
   27408:	ldr	r2, [r6, #56]	; 0x38
   2740c:	mov	fp, #1
   27410:	mov	ip, #4
   27414:	mov	r3, #0
   27418:	str	r2, [r0]
   2741c:	str	r0, [r6, #56]	; 0x38
   27420:	b	272e0 <__assert_fail@plt+0x15d88>
   27424:	ldrb	r3, [r4, #75]	; 0x4b
   27428:	add	r0, r0, #2
   2742c:	mov	r8, r0
   27430:	cmp	r3, #0
   27434:	bne	27a2c <__assert_fail@plt+0x164d4>
   27438:	ldrb	sl, [r1, fp]
   2743c:	mov	r1, #1
   27440:	strb	sl, [r5]
   27444:	cmp	r2, r1
   27448:	strb	r1, [r5, #4]
   2744c:	ble	27684 <__assert_fail@plt+0x1612c>
   27450:	ldr	r0, [r4, #8]
   27454:	add	r0, r0, fp, lsl #2
   27458:	ldr	fp, [r0]
   2745c:	mov	r0, fp
   27460:	sub	fp, fp, #95	; 0x5f
   27464:	bl	11438 <iswalnum@plt>
   27468:	ldrb	r2, [r5, #6]
   2746c:	clz	fp, fp
   27470:	cmp	r0, #0
   27474:	lsr	fp, fp, #5
   27478:	movne	fp, #1
   2747c:	bfi	r2, fp, #6, #1
   27480:	strb	r2, [r5, #6]
   27484:	sub	r2, sl, #39	; 0x27
   27488:	cmp	r2, #86	; 0x56
   2748c:	ldrls	pc, [pc, r2, lsl #2]
   27490:	b	27628 <__assert_fail@plt+0x160d0>
   27494:	andeq	r7, r2, ip, ror #19
   27498:	andeq	r7, r2, r0, lsl sl
   2749c:	strdeq	r7, [r2], -r4
   274a0:	andeq	r7, r2, r8, lsr #12
   274a4:	andeq	r7, r2, r4, lsl r8
   274a8:	andeq	r7, r2, r8, lsr #12
   274ac:	andeq	r7, r2, r8, lsr #12
   274b0:	andeq	r7, r2, r8, lsr #12
   274b4:	andeq	r7, r2, r8, lsr #12
   274b8:	andeq	r7, r2, r8, lsr #12
   274bc:	andeq	r7, r2, r0, lsr r8
   274c0:	andeq	r7, r2, r0, lsr r8
   274c4:	andeq	r7, r2, r0, lsr r8
   274c8:	andeq	r7, r2, r0, lsr r8
   274cc:	andeq	r7, r2, r0, lsr r8
   274d0:	andeq	r7, r2, r0, lsr r8
   274d4:	andeq	r7, r2, r0, lsr r8
   274d8:	andeq	r7, r2, r0, lsr r8
   274dc:	andeq	r7, r2, r0, lsr r8
   274e0:	andeq	r7, r2, r8, lsr #12
   274e4:	andeq	r7, r2, r8, lsr #12
   274e8:	andeq	r7, r2, r4, asr r8
   274ec:	andeq	r7, r2, r8, lsr #12
   274f0:	andeq	r7, r2, r8, ror r8
   274f4:	muleq	r2, ip, r8
   274f8:	andeq	r7, r2, r8, lsr #12
   274fc:	andeq	r7, r2, r8, lsr #12
   27500:			; <UNDEFINED> instruction: 0x000278b8
   27504:	andeq	r7, r2, r8, lsr #12
   27508:	andeq	r7, r2, r8, lsr #12
   2750c:	andeq	r7, r2, r8, lsr #12
   27510:	andeq	r7, r2, r8, lsr #12
   27514:	andeq	r7, r2, r8, lsr #12
   27518:	andeq	r7, r2, r8, lsr #12
   2751c:	andeq	r7, r2, r8, lsr #12
   27520:	andeq	r7, r2, r8, lsr #12
   27524:	andeq	r7, r2, r8, lsr #12
   27528:	andeq	r7, r2, r8, lsr #12
   2752c:	andeq	r7, r2, r8, lsr #12
   27530:	andeq	r7, r2, r8, lsr #12
   27534:	andeq	r7, r2, r8, lsr #12
   27538:	andeq	r7, r2, r8, lsr #12
   2753c:	andeq	r7, r2, r8, lsr #12
   27540:	andeq	r7, r2, r8, lsr #12
   27544:	ldrdeq	r7, [r2], -ip
   27548:	andeq	r7, r2, r8, lsr #12
   2754c:	andeq	r7, r2, r8, lsr #12
   27550:	andeq	r7, r2, r8, lsr #12
   27554:	strdeq	r7, [r2], -r8
   27558:	andeq	r7, r2, r8, lsr #12
   2755c:	andeq	r7, r2, r8, lsr #12
   27560:	andeq	r7, r2, r8, lsr #12
   27564:	andeq	r7, r2, r8, lsr #12
   27568:	andeq	r7, r2, r8, lsr #12
   2756c:	andeq	r7, r2, r8, lsr #12
   27570:	andeq	r7, r2, r8, lsr #12
   27574:	andeq	r7, r2, r8, lsr #12
   27578:	andeq	r7, r2, r4, lsl r9
   2757c:	andeq	r7, r2, r8, lsr #12
   27580:	andeq	r7, r2, r8, lsr r9
   27584:	andeq	r7, r2, r8, lsr #12
   27588:	andeq	r7, r2, r8, lsr #12
   2758c:	andeq	r7, r2, r8, lsr #12
   27590:	andeq	r7, r2, r8, lsr #12
   27594:	andeq	r7, r2, r8, lsr #12
   27598:	andeq	r7, r2, r8, lsr #12
   2759c:	andeq	r7, r2, r8, lsr #12
   275a0:	andeq	r7, r2, r8, lsr #12
   275a4:	andeq	r7, r2, r8, lsr #12
   275a8:	andeq	r7, r2, r8, lsr #12
   275ac:	andeq	r7, r2, r8, lsr #12
   275b0:	andeq	r7, r2, r8, lsr #12
   275b4:	andeq	r7, r2, r8, lsr #12
   275b8:	andeq	r7, r2, r8, lsr #12
   275bc:	andeq	r7, r2, r8, lsr #12
   275c0:	andeq	r7, r2, r8, lsr #12
   275c4:	andeq	r7, r2, ip, asr r9
   275c8:	andeq	r7, r2, r8, lsr #12
   275cc:	andeq	r7, r2, r8, lsr #12
   275d0:	andeq	r7, r2, r8, lsr #12
   275d4:	andeq	r7, r2, r8, ror r9
   275d8:	andeq	r7, r2, r8, lsr #12
   275dc:	andeq	r7, r2, r8, lsr #12
   275e0:	andeq	r7, r2, r8, lsr #12
   275e4:	muleq	r2, r4, r9
   275e8:			; <UNDEFINED> instruction: 0x000279b0
   275ec:	ldrdeq	r7, [r2], -r0
   275f0:	ldr	r3, [sp, #12]
   275f4:	mov	r1, r4
   275f8:	add	r0, sp, #64	; 0x40
   275fc:	str	fp, [r4, #40]	; 0x28
   27600:	orr	r2, r3, #8388608	; 0x800000
   27604:	bl	1afe8 <__assert_fail@plt+0x9a90>
   27608:	ldrb	r3, [sp, #68]	; 0x44
   2760c:	ldr	fp, [r4, #40]	; 0x28
   27610:	sub	r3, r3, #9
   27614:	cmp	r3, #1
   27618:	sub	r3, fp, #1
   2761c:	mov	r8, fp
   27620:	str	r3, [r4, #40]	; 0x28
   27624:	bls	27704 <__assert_fail@plt+0x161ac>
   27628:	ldrb	r3, [r5, #4]
   2762c:	str	r8, [r4, #40]	; 0x28
   27630:	and	r2, r3, #247	; 0xf7
   27634:	cmp	r2, #2
   27638:	moveq	sl, #0
   2763c:	beq	272b8 <__assert_fail@plt+0x15d60>
   27640:	ldr	r2, [sp, #112]	; 0x70
   27644:	clz	r1, r2
   27648:	lsr	r1, r1, #5
   2764c:	cmp	r3, #9
   27650:	orrne	r1, r1, #1
   27654:	cmp	r1, #0
   27658:	moveq	sl, r1
   2765c:	beq	272b8 <__assert_fail@plt+0x15d60>
   27660:	b	27258 <__assert_fail@plt+0x15d00>
   27664:	ldr	r3, [r5, #4]
   27668:	ldr	r2, [sp, #40]	; 0x28
   2766c:	and	r3, r3, r2
   27670:	orr	r3, r3, #2097152	; 0x200000
   27674:	orr	r3, r3, #1
   27678:	str	r3, [r5, #4]
   2767c:	str	fp, [r4, #40]	; 0x28
   27680:	b	27258 <__assert_fail@plt+0x15d00>
   27684:	bl	113fc <__ctype_b_loc@plt>
   27688:	ldr	r0, [r0]
   2768c:	lsl	r2, sl, #1
   27690:	ldrb	r1, [r5, #6]
   27694:	ldrh	r2, [r0, r2]
   27698:	ubfx	r2, r2, #3, #1
   2769c:	cmp	sl, #95	; 0x5f
   276a0:	orreq	r2, r2, #1
   276a4:	bfi	r1, r2, #6, #1
   276a8:	strb	r1, [r5, #6]
   276ac:	b	27484 <__assert_fail@plt+0x15f2c>
   276b0:	ldr	r3, [sp, #36]	; 0x24
   276b4:	cmp	r3, #4608	; 0x1200
   276b8:	moveq	r3, #24
   276bc:	strbeq	r3, [r5, #4]
   276c0:	streq	fp, [r4, #40]	; 0x28
   276c4:	bne	27254 <__assert_fail@plt+0x15cfc>
   276c8:	b	27258 <__assert_fail@plt+0x15d00>
   276cc:	ldr	r3, [sp, #56]	; 0x38
   276d0:	cmp	r3, #0
   276d4:	beq	27254 <__assert_fail@plt+0x15cfc>
   276d8:	mov	r3, #10
   276dc:	mov	sl, #0
   276e0:	strb	r3, [r5, #4]
   276e4:	str	fp, [r4, #40]	; 0x28
   276e8:	b	272b8 <__assert_fail@plt+0x15d60>
   276ec:	ldr	r3, [sp, #52]	; 0x34
   276f0:	cmp	r3, #0
   276f4:	bne	27704 <__assert_fail@plt+0x161ac>
   276f8:	ldr	r3, [r4, #48]	; 0x30
   276fc:	cmp	r3, fp
   27700:	bne	275f0 <__assert_fail@plt+0x16098>
   27704:	mov	r3, #12
   27708:	mov	r2, #32
   2770c:	str	r2, [r5]
   27710:	strb	r3, [r5, #4]
   27714:	str	fp, [r4, #40]	; 0x28
   27718:	b	27258 <__assert_fail@plt+0x15d00>
   2771c:	ldr	r3, [sp, #28]
   27720:	cmp	r3, #0
   27724:	beq	27254 <__assert_fail@plt+0x15cfc>
   27728:	mov	r3, #8
   2772c:	strb	r3, [r5, #4]
   27730:	str	fp, [r4, #40]	; 0x28
   27734:	b	27258 <__assert_fail@plt+0x15d00>
   27738:	ldr	r3, [sp, #28]
   2773c:	cmp	r3, #0
   27740:	beq	27254 <__assert_fail@plt+0x15cfc>
   27744:	mov	r3, #9
   27748:	strb	r3, [r5, #4]
   2774c:	mov	r3, #9
   27750:	str	fp, [r4, #40]	; 0x28
   27754:	b	27640 <__assert_fail@plt+0x160e8>
   27758:	mov	r3, #11
   2775c:	strb	r3, [r5, #4]
   27760:	str	fp, [r4, #40]	; 0x28
   27764:	b	27258 <__assert_fail@plt+0x15d00>
   27768:	ldr	r3, [sp, #32]
   2776c:	cmp	r3, #0
   27770:	bne	27254 <__assert_fail@plt+0x15cfc>
   27774:	mov	r3, #18
   27778:	strb	r3, [r5, #4]
   2777c:	str	fp, [r4, #40]	; 0x28
   27780:	b	27258 <__assert_fail@plt+0x15d00>
   27784:	mov	r3, #5
   27788:	strb	r3, [r5, #4]
   2778c:	str	fp, [r4, #40]	; 0x28
   27790:	b	27258 <__assert_fail@plt+0x15d00>
   27794:	ldr	r3, [sp, #32]
   27798:	cmp	r3, #0
   2779c:	bne	27254 <__assert_fail@plt+0x15cfc>
   277a0:	mov	r3, #19
   277a4:	strb	r3, [r5, #4]
   277a8:	str	fp, [r4, #40]	; 0x28
   277ac:	b	27258 <__assert_fail@plt+0x15d00>
   277b0:	mov	r3, #20
   277b4:	strb	r3, [r5, #4]
   277b8:	str	fp, [r4, #40]	; 0x28
   277bc:	b	27258 <__assert_fail@plt+0x15d00>
   277c0:	mov	r3, #12
   277c4:	mov	r2, #16
   277c8:	str	r2, [r5]
   277cc:	strb	r3, [r5, #4]
   277d0:	str	fp, [r4, #40]	; 0x28
   277d4:	b	27258 <__assert_fail@plt+0x15d00>
   277d8:	ldr	r3, [sp, #36]	; 0x24
   277dc:	cmp	r3, #4608	; 0x1200
   277e0:	bne	27254 <__assert_fail@plt+0x15cfc>
   277e4:	mov	r3, #23
   277e8:	strb	r3, [r5, #4]
   277ec:	str	fp, [r4, #40]	; 0x28
   277f0:	b	27258 <__assert_fail@plt+0x15d00>
   277f4:	ldr	r3, [sp, #28]
   277f8:	cmp	r3, #0
   277fc:	bne	27628 <__assert_fail@plt+0x160d0>
   27800:	mov	r3, #9
   27804:	strb	r3, [r5, #4]
   27808:	mov	r3, #9
   2780c:	str	r8, [r4, #40]	; 0x28
   27810:	b	27640 <__assert_fail@plt+0x160e8>
   27814:	ldr	r3, [sp, #32]
   27818:	cmp	r3, #2
   2781c:	bne	27628 <__assert_fail@plt+0x160d0>
   27820:	mov	r3, #18
   27824:	strb	r3, [r5, #4]
   27828:	str	r8, [r4, #40]	; 0x28
   2782c:	b	27258 <__assert_fail@plt+0x15d00>
   27830:	ldr	r3, [sp, #60]	; 0x3c
   27834:	cmp	r3, #0
   27838:	bne	27628 <__assert_fail@plt+0x160d0>
   2783c:	sub	r3, sl, #49	; 0x31
   27840:	mov	r2, #4
   27844:	str	r3, [r5]
   27848:	strb	r2, [r5, #4]
   2784c:	str	r8, [r4, #40]	; 0x28
   27850:	b	27258 <__assert_fail@plt+0x15d00>
   27854:	ldr	r3, [sp, #48]	; 0x30
   27858:	cmp	r3, #0
   2785c:	bne	27628 <__assert_fail@plt+0x160d0>
   27860:	mov	r3, #12
   27864:	mov	r2, #6
   27868:	str	r2, [r5]
   2786c:	strb	r3, [r5, #4]
   27870:	str	r8, [r4, #40]	; 0x28
   27874:	b	27258 <__assert_fail@plt+0x15d00>
   27878:	ldr	r3, [sp, #48]	; 0x30
   2787c:	cmp	r3, #0
   27880:	bne	27628 <__assert_fail@plt+0x160d0>
   27884:	mov	r3, #12
   27888:	mov	r2, #9
   2788c:	str	r2, [r5]
   27890:	strb	r3, [r5, #4]
   27894:	str	r8, [r4, #40]	; 0x28
   27898:	b	27258 <__assert_fail@plt+0x15d00>
   2789c:	ldr	r3, [sp, #32]
   278a0:	cmp	r3, #2
   278a4:	bne	27628 <__assert_fail@plt+0x160d0>
   278a8:	mov	r3, #19
   278ac:	strb	r3, [r5, #4]
   278b0:	str	r8, [r4, #40]	; 0x28
   278b4:	b	27258 <__assert_fail@plt+0x15d00>
   278b8:	ldr	r3, [sp, #48]	; 0x30
   278bc:	cmp	r3, #0
   278c0:	bne	27628 <__assert_fail@plt+0x160d0>
   278c4:	mov	r3, #12
   278c8:	mov	r2, #512	; 0x200
   278cc:	str	r2, [r5]
   278d0:	strb	r3, [r5, #4]
   278d4:	str	r8, [r4, #40]	; 0x28
   278d8:	b	27258 <__assert_fail@plt+0x15d00>
   278dc:	ldr	r3, [sp, #48]	; 0x30
   278e0:	cmp	r3, #0
   278e4:	bne	27628 <__assert_fail@plt+0x160d0>
   278e8:	mov	r3, #35	; 0x23
   278ec:	strb	r3, [r5, #4]
   278f0:	str	r8, [r4, #40]	; 0x28
   278f4:	b	27258 <__assert_fail@plt+0x15d00>
   278f8:	ldr	r3, [sp, #48]	; 0x30
   278fc:	cmp	r3, #0
   27900:	bne	27628 <__assert_fail@plt+0x160d0>
   27904:	mov	r3, #33	; 0x21
   27908:	strb	r3, [r5, #4]
   2790c:	str	r8, [r4, #40]	; 0x28
   27910:	b	27258 <__assert_fail@plt+0x15d00>
   27914:	ldr	r3, [sp, #48]	; 0x30
   27918:	cmp	r3, #0
   2791c:	bne	27628 <__assert_fail@plt+0x160d0>
   27920:	mov	r3, #12
   27924:	mov	r2, #64	; 0x40
   27928:	str	r2, [r5]
   2792c:	strb	r3, [r5, #4]
   27930:	str	r8, [r4, #40]	; 0x28
   27934:	b	27258 <__assert_fail@plt+0x15d00>
   27938:	ldr	r3, [sp, #48]	; 0x30
   2793c:	cmp	r3, #0
   27940:	bne	27628 <__assert_fail@plt+0x160d0>
   27944:	mov	r3, #12
   27948:	mov	r2, #256	; 0x100
   2794c:	str	r2, [r5]
   27950:	strb	r3, [r5, #4]
   27954:	str	r8, [r4, #40]	; 0x28
   27958:	b	27258 <__assert_fail@plt+0x15d00>
   2795c:	ldr	r3, [sp, #48]	; 0x30
   27960:	cmp	r3, #0
   27964:	bne	27628 <__assert_fail@plt+0x160d0>
   27968:	mov	r3, #34	; 0x22
   2796c:	strb	r3, [r5, #4]
   27970:	str	r8, [r4, #40]	; 0x28
   27974:	b	27258 <__assert_fail@plt+0x15d00>
   27978:	ldr	r3, [sp, #48]	; 0x30
   2797c:	cmp	r3, #0
   27980:	bne	27628 <__assert_fail@plt+0x160d0>
   27984:	mov	r3, #32
   27988:	strb	r3, [r5, #4]
   2798c:	str	r8, [r4, #40]	; 0x28
   27990:	b	27258 <__assert_fail@plt+0x15d00>
   27994:	ldr	r3, [sp, #36]	; 0x24
   27998:	cmp	r3, #512	; 0x200
   2799c:	bne	27628 <__assert_fail@plt+0x160d0>
   279a0:	mov	r3, #23
   279a4:	strb	r3, [r5, #4]
   279a8:	str	r8, [r4, #40]	; 0x28
   279ac:	b	27258 <__assert_fail@plt+0x15d00>
   279b0:	ldr	r3, [sp, #44]	; 0x2c
   279b4:	cmp	r3, #0
   279b8:	bne	27628 <__assert_fail@plt+0x160d0>
   279bc:	mov	sl, r3
   279c0:	mov	r3, #10
   279c4:	strb	r3, [r5, #4]
   279c8:	str	r8, [r4, #40]	; 0x28
   279cc:	b	272b8 <__assert_fail@plt+0x15d60>
   279d0:	ldr	r3, [sp, #36]	; 0x24
   279d4:	cmp	r3, #512	; 0x200
   279d8:	bne	27628 <__assert_fail@plt+0x160d0>
   279dc:	mov	r3, #24
   279e0:	strb	r3, [r5, #4]
   279e4:	str	r8, [r4, #40]	; 0x28
   279e8:	b	27258 <__assert_fail@plt+0x15d00>
   279ec:	ldr	r3, [sp, #48]	; 0x30
   279f0:	cmp	r3, #0
   279f4:	bne	27628 <__assert_fail@plt+0x160d0>
   279f8:	mov	r3, #12
   279fc:	mov	r2, #128	; 0x80
   27a00:	str	r2, [r5]
   27a04:	strb	r3, [r5, #4]
   27a08:	str	r8, [r4, #40]	; 0x28
   27a0c:	b	27258 <__assert_fail@plt+0x15d00>
   27a10:	ldr	r3, [sp, #28]
   27a14:	cmp	r3, #0
   27a18:	bne	27628 <__assert_fail@plt+0x160d0>
   27a1c:	mov	r3, #8
   27a20:	strb	r3, [r5, #4]
   27a24:	str	r8, [r4, #40]	; 0x28
   27a28:	b	27258 <__assert_fail@plt+0x15d00>
   27a2c:	cmp	r2, #1
   27a30:	ble	27a60 <__assert_fail@plt+0x16508>
   27a34:	ldr	r0, [r4, #8]
   27a38:	ldr	r3, [r0, fp, lsl #2]
   27a3c:	add	r0, r0, fp, lsl #2
   27a40:	cmn	r3, #1
   27a44:	beq	27abc <__assert_fail@plt+0x16564>
   27a48:	ldr	r3, [r4, #28]
   27a4c:	cmp	r3, r8
   27a50:	beq	27a60 <__assert_fail@plt+0x16508>
   27a54:	ldr	r3, [r0, #4]
   27a58:	cmn	r3, #1
   27a5c:	beq	27abc <__assert_fail@plt+0x16564>
   27a60:	ldrb	ip, [r4, #76]	; 0x4c
   27a64:	ldr	r0, [r4]
   27a68:	ldr	r3, [r4, #24]
   27a6c:	cmp	ip, #0
   27a70:	beq	27ab0 <__assert_fail@plt+0x16558>
   27a74:	ldr	ip, [r4, #12]
   27a78:	add	r3, r0, r3
   27a7c:	ldr	r0, [ip, fp, lsl #2]
   27a80:	ldrb	sl, [r3, r0]
   27a84:	tst	sl, #128	; 0x80
   27a88:	beq	2743c <__assert_fail@plt+0x15ee4>
   27a8c:	b	27438 <__assert_fail@plt+0x15ee0>
   27a90:	cmp	r7, #0
   27a94:	beq	27aa8 <__assert_fail@plt+0x16550>
   27a98:	mov	r0, r7
   27a9c:	mov	r7, #0
   27aa0:	bl	1c254 <__assert_fail@plt+0xacfc>
   27aa4:	b	27380 <__assert_fail@plt+0x15e28>
   27aa8:	mov	r7, #0
   27aac:	b	27380 <__assert_fail@plt+0x15e28>
   27ab0:	add	r0, r0, fp
   27ab4:	ldrb	sl, [r0, r3]
   27ab8:	b	2743c <__assert_fail@plt+0x15ee4>
   27abc:	ldrb	sl, [r1, fp]
   27ac0:	mov	r2, #1
   27ac4:	strb	sl, [r5]
   27ac8:	strb	r2, [r5, #4]
   27acc:	b	27458 <__assert_fail@plt+0x15f00>
   27ad0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27ad4:	mov	r5, r2
   27ad8:	strd	r6, [sp, #8]
   27adc:	mov	r6, r0
   27ae0:	mov	r7, r3
   27ae4:	ldrb	r3, [r0, #28]
   27ae8:	mov	r0, #0
   27aec:	strd	r8, [sp, #16]
   27af0:	mov	r8, r1
   27af4:	strd	sl, [sp, #24]
   27af8:	ldr	r2, [r6, #4]
   27afc:	str	lr, [sp, #32]
   27b00:	sub	sp, sp, #148	; 0x94
   27b04:	bic	r3, r3, #111	; 0x6f
   27b08:	str	r0, [r6, #8]
   27b0c:	str	r7, [r6, #12]
   27b10:	str	r0, [r6, #24]
   27b14:	cmp	r2, #159	; 0x9f
   27b18:	strb	r3, [r6, #28]
   27b1c:	str	r0, [sp, #36]	; 0x24
   27b20:	ldr	r4, [r6]
   27b24:	bls	28e24 <__assert_fail@plt+0x178cc>
   27b28:	mov	r3, #160	; 0xa0
   27b2c:	mov	r1, #0
   27b30:	mov	r2, r3
   27b34:	mov	r0, r4
   27b38:	str	r3, [r6, #8]
   27b3c:	bl	1145c <memset@plt>
   27b40:	movw	r3, #43689	; 0xaaa9
   27b44:	movt	r3, #2730	; 0xaaa
   27b48:	mov	r2, #31
   27b4c:	cmp	r5, r3
   27b50:	str	r2, [r4, #64]	; 0x40
   27b54:	bhi	2832c <__assert_fail@plt+0x16dd4>
   27b58:	add	r9, r5, #1
   27b5c:	lsl	r0, r9, #3
   27b60:	str	r9, [r4, #4]
   27b64:	bl	2cd58 <__assert_fail@plt+0x1b800>
   27b68:	cmp	r5, #0
   27b6c:	str	r0, [r4]
   27b70:	beq	28e48 <__assert_fail@plt+0x178f0>
   27b74:	mov	r1, #1
   27b78:	lsl	r1, r1, #1
   27b7c:	cmp	r5, r1
   27b80:	bcs	27b78 <__assert_fail@plt+0x16620>
   27b84:	sub	sl, r1, #1
   27b88:	mov	r0, #12
   27b8c:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   27b90:	str	r0, [r4, #32]
   27b94:	str	sl, [r4, #68]	; 0x44
   27b98:	bl	11354 <__ctype_get_mb_cur_max@plt>
   27b9c:	str	r0, [r4, #92]	; 0x5c
   27ba0:	mov	r0, #14
   27ba4:	bl	114e0 <nl_langinfo@plt>
   27ba8:	ldrb	r3, [r0]
   27bac:	and	r3, r3, #223	; 0xdf
   27bb0:	cmp	r3, #85	; 0x55
   27bb4:	bne	27c0c <__assert_fail@plt+0x166b4>
   27bb8:	ldrb	r3, [r0, #1]
   27bbc:	and	r3, r3, #223	; 0xdf
   27bc0:	cmp	r3, #84	; 0x54
   27bc4:	bne	27c0c <__assert_fail@plt+0x166b4>
   27bc8:	ldrb	r3, [r0, #2]
   27bcc:	and	r3, r3, #223	; 0xdf
   27bd0:	cmp	r3, #70	; 0x46
   27bd4:	bne	27c0c <__assert_fail@plt+0x166b4>
   27bd8:	ldrb	r3, [r0, #3]
   27bdc:	movw	r1, #58812	; 0xe5bc
   27be0:	movt	r1, #2
   27be4:	cmp	r3, #45	; 0x2d
   27be8:	moveq	r3, #4
   27bec:	movne	r3, #3
   27bf0:	add	r0, r0, r3
   27bf4:	bl	111f8 <strcmp@plt>
   27bf8:	cmp	r0, #0
   27bfc:	bne	27c0c <__assert_fail@plt+0x166b4>
   27c00:	ldrb	r3, [r4, #88]	; 0x58
   27c04:	orr	r3, r3, #4
   27c08:	strb	r3, [r4, #88]	; 0x58
   27c0c:	ldrb	r3, [r4, #88]	; 0x58
   27c10:	ldr	r2, [r4, #92]	; 0x5c
   27c14:	bfc	r3, #3, #1
   27c18:	cmp	r2, #1
   27c1c:	strb	r3, [r4, #88]	; 0x58
   27c20:	ble	27c3c <__assert_fail@plt+0x166e4>
   27c24:	uxtb	sl, r3
   27c28:	ands	sl, sl, #4
   27c2c:	beq	28388 <__assert_fail@plt+0x16e30>
   27c30:	movw	r3, #58228	; 0xe374
   27c34:	movt	r3, #2
   27c38:	str	r3, [r4, #60]	; 0x3c
   27c3c:	ldr	r3, [r4]
   27c40:	cmp	r3, #0
   27c44:	beq	2832c <__assert_fail@plt+0x16dd4>
   27c48:	ldr	r3, [r4, #32]
   27c4c:	cmp	r3, #0
   27c50:	beq	2832c <__assert_fail@plt+0x16dd4>
   27c54:	mov	r1, #0
   27c58:	movw	r2, #0
   27c5c:	movt	r2, #0
   27c60:	mov	r3, #1
   27c64:	cmp	r2, r1
   27c68:	str	r1, [sp, #36]	; 0x24
   27c6c:	mov	r1, #1
   27c70:	moveq	r3, r2
   27c74:	movw	r2, #0
   27c78:	movt	r2, #0
   27c7c:	cmp	r2, #0
   27c80:	moveq	r1, r2
   27c84:	orr	r3, r3, r1
   27c88:	ands	r3, r3, #255	; 0xff
   27c8c:	str	r3, [sp, #16]
   27c90:	beq	27cb4 <__assert_fail@plt+0x1675c>
   27c94:	mov	r1, #0
   27c98:	add	r0, r4, #136	; 0x88
   27c9c:	bl	11270 <pthread_mutex_init@plt>
   27ca0:	cmp	r0, #0
   27ca4:	bne	2832c <__assert_fail@plt+0x16dd4>
   27ca8:	ldr	r3, [sp, #36]	; 0x24
   27cac:	cmp	r3, #0
   27cb0:	bne	28334 <__assert_fail@plt+0x16ddc>
   27cb4:	and	r3, r7, #4194304	; 0x400000
   27cb8:	mov	r2, #76	; 0x4c
   27cbc:	ldr	sl, [r6, #20]
   27cc0:	mov	r1, #0
   27cc4:	add	r0, sp, #64	; 0x40
   27cc8:	mov	fp, r3
   27ccc:	str	r3, [sp, #12]
   27cd0:	bl	1145c <memset@plt>
   27cd4:	ldrb	r3, [r4, #88]	; 0x58
   27cd8:	adds	ip, fp, #0
   27cdc:	orr	fp, sl, fp
   27ce0:	movne	ip, #1
   27ce4:	str	r8, [sp, #60]	; 0x3c
   27ce8:	ldr	r1, [r4, #92]	; 0x5c
   27cec:	adds	r2, fp, #0
   27cf0:	movne	r2, #1
   27cf4:	cmp	r5, #0
   27cf8:	str	r5, [sp, #104]	; 0x68
   27cfc:	str	r5, [sp, #108]	; 0x6c
   27d00:	ubfx	r0, r3, #2, #1
   27d04:	str	r5, [sp, #112]	; 0x70
   27d08:	ubfx	r3, r3, #3, #1
   27d0c:	str	r5, [sp, #116]	; 0x74
   27d10:	str	sl, [sp, #124]	; 0x7c
   27d14:	strb	ip, [sp, #132]	; 0x84
   27d18:	strb	r0, [sp, #133]	; 0x85
   27d1c:	strb	r3, [sp, #134]	; 0x86
   27d20:	strb	r2, [sp, #135]	; 0x87
   27d24:	str	r1, [sp, #140]	; 0x8c
   27d28:	bne	28368 <__assert_fail@plt+0x16e10>
   27d2c:	cmp	r2, #0
   27d30:	ldr	r3, [sp, #12]
   27d34:	ldrne	r8, [sp, #64]	; 0x40
   27d38:	cmp	r3, #0
   27d3c:	str	r8, [sp, #64]	; 0x40
   27d40:	beq	27e0c <__assert_fail@plt+0x168b4>
   27d44:	cmp	r1, #1
   27d48:	ble	28d98 <__assert_fail@plt+0x17840>
   27d4c:	add	r0, sp, #60	; 0x3c
   27d50:	bl	18448 <__assert_fail@plt+0x6ef0>
   27d54:	cmp	r0, #0
   27d58:	bne	27d94 <__assert_fail@plt+0x1683c>
   27d5c:	ldr	r3, [sp, #92]	; 0x5c
   27d60:	cmp	r5, r3
   27d64:	ble	28ec4 <__assert_fail@plt+0x1796c>
   27d68:	ldr	r3, [sp, #88]	; 0x58
   27d6c:	ldr	r2, [r4, #92]	; 0x5c
   27d70:	ldr	r1, [sp, #96]	; 0x60
   27d74:	add	r3, r3, r2
   27d78:	cmp	r1, r3
   27d7c:	bgt	28ec4 <__assert_fail@plt+0x1796c>
   27d80:	lsl	r1, r1, #1
   27d84:	add	r0, sp, #60	; 0x3c
   27d88:	bl	18064 <__assert_fail@plt+0x6b0c>
   27d8c:	cmp	r0, #0
   27d90:	beq	27d4c <__assert_fail@plt+0x167f4>
   27d94:	ldr	r5, [r6]
   27d98:	str	r0, [sp, #36]	; 0x24
   27d9c:	ldr	r0, [r5, #56]	; 0x38
   27da0:	cmp	r0, #0
   27da4:	beq	27db8 <__assert_fail@plt+0x16860>
   27da8:	ldr	r7, [r0]
   27dac:	bl	13e1c <__assert_fail@plt+0x28c4>
   27db0:	subs	r0, r7, #0
   27db4:	bne	27da8 <__assert_fail@plt+0x16850>
   27db8:	mov	r3, #31
   27dbc:	mov	r7, #0
   27dc0:	ldr	r0, [r5, #16]
   27dc4:	str	r7, [r5, #52]	; 0x34
   27dc8:	str	r7, [r5, #56]	; 0x38
   27dcc:	str	r3, [r5, #64]	; 0x40
   27dd0:	bl	13e1c <__assert_fail@plt+0x28c4>
   27dd4:	str	r7, [r5, #16]
   27dd8:	ldr	r0, [sp, #68]	; 0x44
   27ddc:	bl	13e1c <__assert_fail@plt+0x28c4>
   27de0:	ldr	r0, [sp, #72]	; 0x48
   27de4:	bl	13e1c <__assert_fail@plt+0x28c4>
   27de8:	ldrb	r3, [sp, #135]	; 0x87
   27dec:	cmp	r3, r7
   27df0:	bne	28e60 <__assert_fail@plt+0x17908>
   27df4:	ldr	r3, [sp, #16]
   27df8:	cmp	r3, #0
   27dfc:	beq	28334 <__assert_fail@plt+0x16ddc>
   27e00:	add	r0, r4, #136	; 0x88
   27e04:	bl	11210 <pthread_mutex_destroy@plt>
   27e08:	b	28334 <__assert_fail@plt+0x16ddc>
   27e0c:	cmp	r1, #1
   27e10:	bgt	28c9c <__assert_fail@plt+0x17744>
   27e14:	cmp	fp, #0
   27e18:	ldr	r1, [sp, #96]	; 0x60
   27e1c:	beq	28438 <__assert_fail@plt+0x16ee0>
   27e20:	ldr	r3, [sp, #88]	; 0x58
   27e24:	ldr	r2, [sp, #108]	; 0x6c
   27e28:	cmp	r1, r2
   27e2c:	movge	r1, r2
   27e30:	cmp	r1, r3
   27e34:	ble	29008 <__assert_fail@plt+0x17ab0>
   27e38:	ldr	r0, [sp, #60]	; 0x3c
   27e3c:	add	r2, r3, #1
   27e40:	cmp	r1, r2
   27e44:	ldr	lr, [sp, #84]	; 0x54
   27e48:	ldr	ip, [sp, #124]	; 0x7c
   27e4c:	add	r0, r0, r3
   27e50:	ldrb	r0, [r0, lr]
   27e54:	ldrb	r0, [ip, r0]
   27e58:	strb	r0, [r8, r3]
   27e5c:	ble	27e8c <__assert_fail@plt+0x16934>
   27e60:	ldr	r3, [sp, #60]	; 0x3c
   27e64:	ldr	r0, [sp, #84]	; 0x54
   27e68:	ldr	ip, [sp, #124]	; 0x7c
   27e6c:	add	r3, r3, r2
   27e70:	ldrb	r0, [r3, r0]
   27e74:	ldr	r3, [sp, #64]	; 0x40
   27e78:	ldrb	r0, [ip, r0]
   27e7c:	strb	r0, [r3, r2]
   27e80:	add	r2, r2, #1
   27e84:	cmp	r1, r2
   27e88:	bne	27e60 <__assert_fail@plt+0x16908>
   27e8c:	mov	r3, #0
   27e90:	str	r3, [sp, #36]	; 0x24
   27e94:	str	r1, [sp, #88]	; 0x58
   27e98:	str	r1, [sp, #92]	; 0x5c
   27e9c:	ldr	r5, [r6]
   27ea0:	mov	r8, #0
   27ea4:	orr	r2, r7, #8388608	; 0x800000
   27ea8:	add	r1, sp, #60	; 0x3c
   27eac:	add	r0, sp, #40	; 0x28
   27eb0:	str	r8, [r6, #24]
   27eb4:	str	r7, [r5, #128]	; 0x80
   27eb8:	bl	1afe8 <__assert_fail@plt+0x9a90>
   27ebc:	ldr	ip, [sp, #100]	; 0x64
   27ec0:	add	r1, sp, #36	; 0x24
   27ec4:	mov	r3, r7
   27ec8:	add	r2, sp, #40	; 0x28
   27ecc:	str	r8, [sp]
   27ed0:	str	r1, [sp, #4]
   27ed4:	mov	r1, r6
   27ed8:	add	ip, ip, r0
   27edc:	add	r0, sp, #60	; 0x3c
   27ee0:	str	ip, [sp, #100]	; 0x64
   27ee4:	bl	26f00 <__assert_fail@plt+0x159a8>
   27ee8:	ldr	sl, [sp, #36]	; 0x24
   27eec:	clz	r3, r0
   27ef0:	mov	r9, r0
   27ef4:	lsr	r3, r3, #5
   27ef8:	cmp	sl, r8
   27efc:	movne	sl, r3
   27f00:	moveq	sl, r8
   27f04:	cmp	sl, r8
   27f08:	bne	29020 <__assert_fail@plt+0x17ac8>
   27f0c:	mov	r2, #0
   27f10:	mov	r3, #0
   27f14:	strd	r2, [sp, #48]	; 0x30
   27f18:	ldr	r2, [r5, #64]	; 0x40
   27f1c:	cmp	r2, #31
   27f20:	beq	28e90 <__assert_fail@plt+0x17938>
   27f24:	ldr	r7, [r5, #56]	; 0x38
   27f28:	lsl	r3, r2, #5
   27f2c:	add	r2, r2, #1
   27f30:	add	r0, r3, #4
   27f34:	add	ip, r7, r3
   27f38:	mov	lr, #0
   27f3c:	str	r2, [r5, #64]	; 0x40
   27f40:	mov	r2, #2
   27f44:	add	r3, r3, #16
   27f48:	str	lr, [ip, #4]
   27f4c:	add	r1, r7, r3
   27f50:	adds	r7, r7, r0
   27f54:	str	lr, [ip, #8]
   27f58:	mvn	r0, #0
   27f5c:	moveq	r8, #1
   27f60:	str	lr, [ip, #12]
   27f64:	movne	r8, lr
   27f68:	cmp	r9, lr
   27f6c:	strb	r2, [sp, #52]	; 0x34
   27f70:	ldrd	r2, [sp, #48]	; 0x30
   27f74:	strd	r2, [ip, #24]
   27f78:	ldrb	r3, [r1, #14]
   27f7c:	bic	r3, r3, #12
   27f80:	strb	r3, [r1, #14]
   27f84:	str	lr, [ip, #16]
   27f88:	str	lr, [ip, #20]
   27f8c:	str	r0, [ip, #32]
   27f90:	beq	28024 <__assert_fail@plt+0x16acc>
   27f94:	mov	r3, #0
   27f98:	mov	r2, #0
   27f9c:	strd	r2, [sp, #48]	; 0x30
   27fa0:	ldr	r3, [r5, #64]	; 0x40
   27fa4:	cmp	r3, #31
   27fa8:	beq	28fbc <__assert_fail@plt+0x17a64>
   27fac:	ldr	r0, [r5, #56]	; 0x38
   27fb0:	lsl	r1, r3, #5
   27fb4:	add	r3, r3, #1
   27fb8:	add	r2, r1, #4
   27fbc:	add	ip, r0, r1
   27fc0:	mov	lr, #0
   27fc4:	str	r3, [r5, #64]	; 0x40
   27fc8:	mov	r3, #16
   27fcc:	mvn	r5, #0
   27fd0:	add	r1, r1, r3
   27fd4:	str	lr, [ip, #4]
   27fd8:	str	r9, [ip, #8]
   27fdc:	add	r1, r0, r1
   27fe0:	add	r0, r0, r2
   27fe4:	str	r7, [ip, #12]
   27fe8:	cmp	r0, lr
   27fec:	orreq	r8, r8, #1
   27ff0:	cmp	r7, lr
   27ff4:	strb	r3, [sp, #52]	; 0x34
   27ff8:	ldrd	r2, [sp, #48]	; 0x30
   27ffc:	strd	r2, [ip, #24]
   28000:	ldrb	r3, [r1, #14]
   28004:	bic	r3, r3, #12
   28008:	strb	r3, [r1, #14]
   2800c:	str	lr, [ip, #16]
   28010:	str	lr, [ip, #20]
   28014:	str	r5, [ip, #32]
   28018:	str	r0, [r9]
   2801c:	strne	r0, [r7]
   28020:	mov	r7, r0
   28024:	cmp	r8, #0
   28028:	ldr	r5, [r6]
   2802c:	bne	28e7c <__assert_fail@plt+0x17924>
   28030:	ldr	r0, [r5, #4]
   28034:	str	r7, [r4, #52]	; 0x34
   28038:	lsl	r0, r0, #2
   2803c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   28040:	ldr	r3, [r5, #4]
   28044:	str	r0, [r5, #12]
   28048:	lsl	r0, r3, #2
   2804c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   28050:	ldr	r3, [r5, #4]
   28054:	str	r0, [r5, #16]
   28058:	add	r3, r3, r3, lsl #1
   2805c:	lsl	r0, r3, #2
   28060:	bl	2cd58 <__assert_fail@plt+0x1b800>
   28064:	ldr	r3, [r5, #4]
   28068:	str	r0, [r5, #20]
   2806c:	add	r3, r3, r3, lsl #1
   28070:	lsl	r0, r3, #2
   28074:	bl	2cd58 <__assert_fail@plt+0x1b800>
   28078:	ldr	r3, [r5, #12]
   2807c:	str	r0, [r5, #24]
   28080:	cmp	r3, #0
   28084:	beq	28494 <__assert_fail@plt+0x16f3c>
   28088:	ldr	r3, [r5, #16]
   2808c:	cmp	r3, #0
   28090:	beq	28494 <__assert_fail@plt+0x16f3c>
   28094:	ldr	r3, [r5, #20]
   28098:	cmp	r3, #0
   2809c:	beq	28494 <__assert_fail@plt+0x16f3c>
   280a0:	cmp	r0, #0
   280a4:	beq	28494 <__assert_fail@plt+0x16f3c>
   280a8:	ldr	r0, [r6, #24]
   280ac:	lsl	r0, r0, #2
   280b0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   280b4:	cmp	r0, #0
   280b8:	str	r0, [r5, #132]	; 0x84
   280bc:	beq	28d1c <__assert_fail@plt+0x177c4>
   280c0:	ldr	ip, [r6, #24]
   280c4:	cmp	ip, #0
   280c8:	beq	28178 <__assert_fail@plt+0x16c20>
   280cc:	sub	r3, ip, #1
   280d0:	ubfx	r2, r0, #2, #1
   280d4:	cmp	r3, #4
   280d8:	bls	28ff0 <__assert_fail@plt+0x17a98>
   280dc:	cmp	r2, #0
   280e0:	beq	28e54 <__assert_fail@plt+0x178fc>
   280e4:	mov	r7, r2
   280e8:	mov	r9, #1
   280ec:	str	r8, [r0]
   280f0:	sub	r8, ip, r2
   280f4:	add	r2, r0, r2, lsl #2
   280f8:	mov	lr, r9
   280fc:	lsr	r3, r8, #1
   28100:	add	r1, r9, #1
   28104:	add	r3, r2, r3, lsl #3
   28108:	add	r2, r2, #8
   2810c:	str	lr, [r2, #-8]
   28110:	add	lr, lr, #2
   28114:	str	r1, [r2, #-4]
   28118:	cmp	r3, r2
   2811c:	add	r1, r1, #2
   28120:	bne	28108 <__assert_fail@plt+0x16bb0>
   28124:	bic	r3, r8, #1
   28128:	cmp	r3, r8
   2812c:	add	r7, r3, r7
   28130:	add	r3, r3, r9
   28134:	beq	28178 <__assert_fail@plt+0x16c20>
   28138:	add	r2, r3, #1
   2813c:	str	r3, [r0, r7, lsl #2]
   28140:	cmp	ip, r2
   28144:	bls	28178 <__assert_fail@plt+0x16c20>
   28148:	add	r1, r3, #2
   2814c:	str	r2, [r0, r2, lsl #2]
   28150:	cmp	ip, r1
   28154:	bls	28178 <__assert_fail@plt+0x16c20>
   28158:	add	r2, r3, #3
   2815c:	str	r1, [r0, r1, lsl #2]
   28160:	cmp	ip, r2
   28164:	bls	28178 <__assert_fail@plt+0x16c20>
   28168:	add	r3, r3, #4
   2816c:	str	r2, [r0, r2, lsl #2]
   28170:	cmp	ip, r3
   28174:	strhi	r3, [r0, r3, lsl #2]
   28178:	ldr	r2, [r5, #52]	; 0x34
   2817c:	mov	r8, #1
   28180:	ldrb	r1, [r2, #24]
   28184:	mov	lr, r2
   28188:	ldr	r3, [r2, #4]
   2818c:	b	281b0 <__assert_fail@plt+0x16c58>
   28190:	cmp	r1, #17
   28194:	beq	28448 <__assert_fail@plt+0x16ef0>
   28198:	cmp	r3, #0
   2819c:	beq	281d8 <__assert_fail@plt+0x16c80>
   281a0:	ldrb	r1, [r3, #24]
   281a4:	ldr	r7, [r3, #4]
   281a8:	mov	lr, r3
   281ac:	mov	r3, r7
   281b0:	cmp	r1, #4
   281b4:	bne	28190 <__assert_fail@plt+0x16c38>
   281b8:	ldr	r7, [lr, #20]
   281bc:	cmp	r3, #0
   281c0:	ldr	r1, [r5, #80]	; 0x50
   281c4:	ldr	r7, [r0, r7, lsl #2]
   281c8:	orr	r1, r1, r8, lsl r7
   281cc:	str	r7, [lr, #20]
   281d0:	str	r1, [r5, #80]	; 0x50
   281d4:	bne	281a0 <__assert_fail@plt+0x16c48>
   281d8:	mov	r1, #0
   281dc:	b	281e4 <__assert_fail@plt+0x16c8c>
   281e0:	mov	lr, r3
   281e4:	ldr	r3, [lr, #8]
   281e8:	cmp	r3, r1
   281ec:	cmpne	r3, #0
   281f0:	bne	281a0 <__assert_fail@plt+0x16c48>
   281f4:	ldr	r3, [lr]
   281f8:	mov	r1, lr
   281fc:	cmp	r3, #0
   28200:	bne	281e0 <__assert_fail@plt+0x16c88>
   28204:	cmp	ip, #0
   28208:	beq	28238 <__assert_fail@plt+0x16ce0>
   2820c:	ldr	r3, [r0]
   28210:	cmp	r3, #0
   28214:	bne	28248 <__assert_fail@plt+0x16cf0>
   28218:	mov	r1, r0
   2821c:	b	2822c <__assert_fail@plt+0x16cd4>
   28220:	ldr	lr, [r1, #4]!
   28224:	cmp	lr, r3
   28228:	bne	28248 <__assert_fail@plt+0x16cf0>
   2822c:	add	r3, r3, #1
   28230:	cmp	r3, ip
   28234:	bne	28220 <__assert_fail@plt+0x16cc8>
   28238:	bl	13e1c <__assert_fail@plt+0x28c4>
   2823c:	ldr	r2, [r5, #52]	; 0x34
   28240:	mov	r3, #0
   28244:	str	r3, [r5, #132]	; 0x84
   28248:	mov	r7, #0
   2824c:	mov	r8, r2
   28250:	ldr	r3, [r8, #4]
   28254:	cmp	r3, #0
   28258:	beq	2826c <__assert_fail@plt+0x16d14>
   2825c:	mov	r8, r3
   28260:	ldr	r3, [r8, #4]
   28264:	cmp	r3, #0
   28268:	bne	2825c <__assert_fail@plt+0x16d04>
   2826c:	ldr	r2, [r8, #8]
   28270:	cmp	r2, #0
   28274:	bne	2824c <__assert_fail@plt+0x16cf4>
   28278:	mov	r3, r2
   2827c:	b	282c4 <__assert_fail@plt+0x16d6c>
   28280:	cmp	r3, #0
   28284:	beq	282a0 <__assert_fail@plt+0x16d48>
   28288:	ldrb	r2, [r3, #24]
   2828c:	cmp	r2, #17
   28290:	beq	2830c <__assert_fail@plt+0x16db4>
   28294:	ldr	r3, [sp, #48]	; 0x30
   28298:	cmp	r3, #0
   2829c:	bne	28c5c <__assert_fail@plt+0x17704>
   282a0:	ldr	r2, [r8]
   282a4:	cmp	r2, #0
   282a8:	beq	284a4 <__assert_fail@plt+0x16f4c>
   282ac:	ldr	r3, [r2, #8]
   282b0:	cmp	r3, #0
   282b4:	cmpne	r8, r3
   282b8:	bne	28ebc <__assert_fail@plt+0x17964>
   282bc:	mov	r8, r2
   282c0:	ldr	r2, [r2, #4]
   282c4:	cmp	r2, #0
   282c8:	str	r7, [sp, #48]	; 0x30
   282cc:	beq	28280 <__assert_fail@plt+0x16d28>
   282d0:	ldrb	r1, [r2, #24]
   282d4:	cmp	r1, #17
   282d8:	bne	28280 <__assert_fail@plt+0x16d28>
   282dc:	mov	r1, r6
   282e0:	add	r0, sp, #48	; 0x30
   282e4:	bl	1ffbc <__assert_fail@plt+0xea64>
   282e8:	ldr	r3, [r8, #8]
   282ec:	cmp	r0, #0
   282f0:	str	r0, [r8, #4]
   282f4:	strne	r8, [r0]
   282f8:	cmp	r3, #0
   282fc:	beq	28294 <__assert_fail@plt+0x16d3c>
   28300:	ldrb	r2, [r3, #24]
   28304:	cmp	r2, #17
   28308:	bne	28294 <__assert_fail@plt+0x16d3c>
   2830c:	mov	r2, r3
   28310:	mov	r1, r6
   28314:	add	r0, sp, #48	; 0x30
   28318:	bl	1ffbc <__assert_fail@plt+0xea64>
   2831c:	cmp	r0, #0
   28320:	str	r0, [r8, #8]
   28324:	strne	r8, [r0]
   28328:	b	28294 <__assert_fail@plt+0x16d3c>
   2832c:	mov	r3, #12
   28330:	str	r3, [sp, #36]	; 0x24
   28334:	mov	r0, r4
   28338:	bl	1c334 <__assert_fail@plt+0xaddc>
   2833c:	ldr	r0, [sp, #36]	; 0x24
   28340:	mov	r3, #0
   28344:	str	r3, [r6]
   28348:	str	r3, [r6, #4]
   2834c:	add	sp, sp, #148	; 0x94
   28350:	ldrd	r4, [sp]
   28354:	ldrd	r6, [sp, #8]
   28358:	ldrd	r8, [sp, #16]
   2835c:	ldrd	sl, [sp, #24]
   28360:	add	sp, sp, #32
   28364:	pop	{pc}		; (ldr pc, [sp], #4)
   28368:	mov	r1, r9
   2836c:	add	r0, sp, #60	; 0x3c
   28370:	bl	18064 <__assert_fail@plt+0x6b0c>
   28374:	cmp	r0, #0
   28378:	bne	27d94 <__assert_fail@plt+0x1683c>
   2837c:	ldrb	r2, [sp, #135]	; 0x87
   28380:	ldr	r1, [r4, #92]	; 0x5c
   28384:	b	27d2c <__assert_fail@plt+0x167d4>
   28388:	mov	r1, #1
   2838c:	mov	r0, #32
   28390:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   28394:	cmp	r0, #0
   28398:	str	r0, [r4, #60]	; 0x3c
   2839c:	beq	2832c <__assert_fail@plt+0x16dd4>
   283a0:	str	r5, [sp, #12]
   283a4:	mov	r5, r4
   283a8:	lsl	fp, sl, #3
   283ac:	mov	r4, #0
   283b0:	b	283d8 <__assert_fail@plt+0x16e80>
   283b4:	cmp	r3, #0
   283b8:	bne	283c8 <__assert_fail@plt+0x16e70>
   283bc:	ldrb	r3, [r5, #88]	; 0x58
   283c0:	orr	r3, r3, #8
   283c4:	strb	r3, [r5, #88]	; 0x58
   283c8:	add	r4, r4, #1
   283cc:	add	fp, fp, #1
   283d0:	cmp	r4, #32
   283d4:	beq	28420 <__assert_fail@plt+0x16ec8>
   283d8:	mov	r0, fp
   283dc:	bl	11468 <btowc@plt>
   283e0:	cmn	r0, #1
   283e4:	bic	r3, fp, #127	; 0x7f
   283e8:	beq	283b4 <__assert_fail@plt+0x16e5c>
   283ec:	ldr	r1, [r5, #60]	; 0x3c
   283f0:	cmp	r3, #0
   283f4:	mov	r2, #1
   283f8:	ldr	r3, [r1, sl]
   283fc:	orr	r3, r3, r2, lsl r4
   28400:	str	r3, [r1, sl]
   28404:	bne	283c8 <__assert_fail@plt+0x16e70>
   28408:	cmp	r0, fp
   2840c:	bne	283bc <__assert_fail@plt+0x16e64>
   28410:	add	r4, r4, #1
   28414:	add	fp, fp, #1
   28418:	cmp	r4, #32
   2841c:	bne	283d8 <__assert_fail@plt+0x16e80>
   28420:	add	sl, sl, #4
   28424:	cmp	sl, #32
   28428:	bne	283a8 <__assert_fail@plt+0x16e50>
   2842c:	mov	r4, r5
   28430:	ldr	r5, [sp, #12]
   28434:	b	27c3c <__assert_fail@plt+0x166e4>
   28438:	str	r3, [sp, #36]	; 0x24
   2843c:	str	r1, [sp, #88]	; 0x58
   28440:	str	r1, [sp, #92]	; 0x5c
   28444:	b	27e9c <__assert_fail@plt+0x16944>
   28448:	cmp	r3, #0
   2844c:	beq	281d8 <__assert_fail@plt+0x16c80>
   28450:	ldrb	r1, [r3, #24]
   28454:	ldr	r7, [r3, #4]
   28458:	cmp	r1, #17
   2845c:	bne	281a8 <__assert_fail@plt+0x16c50>
   28460:	ldr	r1, [r3, #20]
   28464:	cmp	r7, #0
   28468:	str	r7, [lr, #4]
   2846c:	ldr	r3, [lr, #20]
   28470:	strne	lr, [r7]
   28474:	cmp	r1, #31
   28478:	ldrle	r9, [r5, #80]	; 0x50
   2847c:	ldr	r3, [r0, r3, lsl #2]
   28480:	str	r3, [r0, r1, lsl #2]
   28484:	bicle	r1, r9, r8, lsl r1
   28488:	mov	r3, r7
   2848c:	strle	r1, [r5, #80]	; 0x50
   28490:	b	28198 <__assert_fail@plt+0x16c40>
   28494:	mov	r3, #12
   28498:	ldr	r5, [r6]
   2849c:	str	r3, [sp, #36]	; 0x24
   284a0:	b	27d9c <__assert_fail@plt+0x16844>
   284a4:	ldr	r3, [r5, #52]	; 0x34
   284a8:	mov	r7, r3
   284ac:	ldr	r3, [r3, #4]
   284b0:	cmp	r3, #0
   284b4:	bne	284a8 <__assert_fail@plt+0x16f50>
   284b8:	ldr	r3, [r7, #8]
   284bc:	cmp	r3, #0
   284c0:	bne	284a8 <__assert_fail@plt+0x16f50>
   284c4:	b	2850c <__assert_fail@plt+0x16fb4>
   284c8:	ldr	r3, [r7, #4]
   284cc:	ldr	r2, [r3, #12]
   284d0:	ldr	r3, [r3, #28]
   284d4:	str	r2, [r7, #12]
   284d8:	str	r3, [r7, #28]
   284dc:	ldr	r1, [r7]
   284e0:	cmp	r1, #0
   284e4:	beq	28568 <__assert_fail@plt+0x17010>
   284e8:	ldr	r3, [r1, #8]
   284ec:	sub	r2, r7, r3
   284f0:	cmp	r3, #0
   284f4:	clz	r2, r2
   284f8:	mov	r7, r1
   284fc:	lsr	r2, r2, #5
   28500:	moveq	r2, #1
   28504:	cmp	r2, #0
   28508:	beq	284a8 <__assert_fail@plt+0x16f50>
   2850c:	ldrb	r3, [r7, #24]
   28510:	cmp	r3, #16
   28514:	beq	284c8 <__assert_fail@plt+0x16f70>
   28518:	add	r3, r7, #20
   2851c:	mov	r0, r5
   28520:	ldm	r3, {r1, r2}
   28524:	str	r7, [r7, #12]
   28528:	bl	18ac4 <__assert_fail@plt+0x756c>
   2852c:	cmn	r0, #1
   28530:	str	r0, [r7, #28]
   28534:	beq	28c88 <__assert_fail@plt+0x17730>
   28538:	ldrb	r3, [r7, #24]
   2853c:	cmp	r3, #12
   28540:	bne	284dc <__assert_fail@plt+0x16f84>
   28544:	ldr	r3, [r5]
   28548:	ldr	r2, [r7, #20]
   2854c:	add	r0, r3, r0, lsl #3
   28550:	ldr	r3, [r0, #4]
   28554:	bfi	r3, r2, #8, #10
   28558:	str	r3, [r0, #4]
   2855c:	ldr	r1, [r7]
   28560:	cmp	r1, #0
   28564:	bne	284e8 <__assert_fail@plt+0x16f90>
   28568:	ldr	fp, [r5, #52]	; 0x34
   2856c:	mov	r3, fp
   28570:	b	2859c <__assert_fail@plt+0x17044>
   28574:	cmp	r2, #0
   28578:	ldr	r1, [r3, #8]
   2857c:	beq	285d4 <__assert_fail@plt+0x1707c>
   28580:	ldr	r0, [r3, #16]
   28584:	cmp	r1, #0
   28588:	str	r0, [r2, #16]
   2858c:	beq	28598 <__assert_fail@plt+0x17040>
   28590:	ldr	r3, [r3, #16]
   28594:	str	r3, [r1, #16]
   28598:	mov	r3, r2
   2859c:	ldrb	r1, [r3, #24]
   285a0:	ldr	r2, [r3, #4]
   285a4:	cmp	r1, #11
   285a8:	beq	285cc <__assert_fail@plt+0x17074>
   285ac:	cmp	r1, #16
   285b0:	bne	28574 <__assert_fail@plt+0x1701c>
   285b4:	ldr	r1, [r3, #8]
   285b8:	ldr	r0, [r1, #12]
   285bc:	str	r0, [r2, #16]
   285c0:	ldr	r3, [r3, #16]
   285c4:	str	r3, [r1, #16]
   285c8:	b	28598 <__assert_fail@plt+0x17040>
   285cc:	str	r3, [r2, #16]
   285d0:	b	28598 <__assert_fail@plt+0x17040>
   285d4:	cmp	r1, #0
   285d8:	beq	285ec <__assert_fail@plt+0x17094>
   285dc:	ldr	r3, [r3, #16]
   285e0:	mov	r2, r1
   285e4:	str	r3, [r1, #16]
   285e8:	b	28598 <__assert_fail@plt+0x17040>
   285ec:	ldr	r1, [r3]
   285f0:	cmp	r1, #0
   285f4:	bne	28600 <__assert_fail@plt+0x170a8>
   285f8:	b	28620 <__assert_fail@plt+0x170c8>
   285fc:	mov	r1, r2
   28600:	ldr	r2, [r1, #8]
   28604:	cmp	r2, #0
   28608:	cmpne	r2, r3
   2860c:	bne	28598 <__assert_fail@plt+0x17040>
   28610:	ldr	r2, [r1]
   28614:	mov	r3, r1
   28618:	cmp	r2, #0
   2861c:	bne	285fc <__assert_fail@plt+0x170a4>
   28620:	mov	r7, #1
   28624:	mov	r9, #2
   28628:	str	r4, [sp, #20]
   2862c:	ldrb	r2, [fp, #24]
   28630:	ldr	r3, [fp, #28]
   28634:	sub	r2, r2, #2
   28638:	cmp	r2, #14
   2863c:	ldrls	pc, [pc, r2, lsl #2]
   28640:	b	287f4 <__assert_fail@plt+0x1729c>
   28644:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28648:	strdeq	r8, [r2], -r4
   2864c:	andeq	r8, r2, r8, asr #15
   28650:	strdeq	r8, [r2], -r4
   28654:	strdeq	r8, [r2], -r4
   28658:	strdeq	r8, [r2], -r4
   2865c:	muleq	r2, r0, r7
   28660:	muleq	r2, r0, r7
   28664:	andeq	r8, r2, r0, lsl #13
   28668:	andeq	r8, r2, r0, lsl #13
   2866c:	muleq	r2, r0, r7
   28670:	strdeq	r8, [r2], -r4
   28674:	strdeq	r8, [r2], -r4
   28678:	strdeq	r8, [r2], -r4
   2867c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28680:	ldrb	r2, [r5, #88]	; 0x58
   28684:	add	r3, r3, r3, lsl #1
   28688:	mov	r0, #8
   2868c:	orr	r2, r2, #1
   28690:	strb	r2, [r5, #88]	; 0x58
   28694:	ldr	r2, [fp, #4]
   28698:	cmp	r2, #0
   2869c:	ldrne	r2, [r2, #12]
   286a0:	ldreq	r2, [fp, #16]
   286a4:	ldr	sl, [r2, #28]
   286a8:	ldr	r2, [fp, #8]
   286ac:	cmp	r2, #0
   286b0:	ldrne	r2, [r2, #12]
   286b4:	ldreq	r2, [fp, #16]
   286b8:	ldr	r4, [r2, #28]
   286bc:	ldr	r2, [r5, #20]
   286c0:	add	r8, r2, r3, lsl #2
   286c4:	str	r9, [r2, r3, lsl #2]
   286c8:	bl	2cd58 <__assert_fail@plt+0x1b800>
   286cc:	cmp	r0, #0
   286d0:	str	r0, [r8, #8]
   286d4:	beq	28c84 <__assert_fail@plt+0x1772c>
   286d8:	cmp	sl, r4
   286dc:	streq	r7, [r8, #4]
   286e0:	streq	sl, [r0]
   286e4:	beq	286f8 <__assert_fail@plt+0x171a0>
   286e8:	str	r9, [r8, #4]
   286ec:	strlt	sl, [r0]
   286f0:	strlt	r4, [r0, #4]
   286f4:	stmge	r0, {r4, sl}
   286f8:	ldr	r3, [fp, #4]
   286fc:	cmp	r3, #0
   28700:	beq	28710 <__assert_fail@plt+0x171b8>
   28704:	mov	fp, r3
   28708:	b	2862c <__assert_fail@plt+0x170d4>
   2870c:	mov	fp, r8
   28710:	ldr	r2, [fp, #8]
   28714:	sub	r3, r2, r3
   28718:	cmp	r2, #0
   2871c:	clz	r3, r3
   28720:	moveq	sl, #1
   28724:	lsr	r3, r3, #5
   28728:	movne	sl, r3
   2872c:	cmp	sl, #0
   28730:	beq	28d90 <__assert_fail@plt+0x17838>
   28734:	ldr	r8, [fp]
   28738:	mov	r3, fp
   2873c:	cmp	r8, #0
   28740:	bne	2870c <__assert_fail@plt+0x171b4>
   28744:	ldr	r4, [sp, #20]
   28748:	mov	fp, r8
   2874c:	mov	r7, r8
   28750:	ldr	r2, [r5, #24]
   28754:	add	r9, r7, r7, lsl #1
   28758:	lsl	r9, r9, #2
   2875c:	add	r3, r2, r9
   28760:	ldr	r3, [r3, #4]
   28764:	cmp	r3, #0
   28768:	beq	28840 <__assert_fail@plt+0x172e8>
   2876c:	ldr	r3, [r5, #8]
   28770:	add	r7, r7, #1
   28774:	cmp	r3, r7
   28778:	bne	28754 <__assert_fail@plt+0x171fc>
   2877c:	cmp	fp, #0
   28780:	beq	2887c <__assert_fail@plt+0x17324>
   28784:	mov	fp, #0
   28788:	mov	r7, fp
   2878c:	b	28754 <__assert_fail@plt+0x171fc>
   28790:	ldr	r1, [fp, #16]
   28794:	add	r3, r3, r3, lsl #1
   28798:	mov	r0, #4
   2879c:	ldr	r2, [r5, #20]
   287a0:	ldr	r8, [r1, #28]
   287a4:	add	sl, r2, r3, lsl #2
   287a8:	str	r7, [r2, r3, lsl #2]
   287ac:	str	r7, [sl, #4]
   287b0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   287b4:	cmp	r0, #0
   287b8:	str	r0, [sl, #8]
   287bc:	beq	28fa8 <__assert_fail@plt+0x17a50>
   287c0:	str	r8, [r0]
   287c4:	b	286f8 <__assert_fail@plt+0x171a0>
   287c8:	ldr	r1, [fp, #16]
   287cc:	ldr	r2, [r5, #12]
   287d0:	ldr	r8, [r1, #28]
   287d4:	str	r8, [r2, r3, lsl #2]
   287d8:	ldrb	r0, [fp, #24]
   287dc:	cmp	r0, #4
   287e0:	bne	286f8 <__assert_fail@plt+0x171a0>
   287e4:	ldr	r2, [r5, #20]
   287e8:	add	r3, r3, r3, lsl #1
   287ec:	add	sl, r2, r3, lsl #2
   287f0:	b	287a8 <__assert_fail@plt+0x17250>
   287f4:	ldr	r1, [fp, #16]
   287f8:	ldr	r2, [r5, #12]
   287fc:	ldr	r1, [r1, #28]
   28800:	str	r1, [r2, r3, lsl #2]
   28804:	b	286f8 <__assert_fail@plt+0x171a0>
   28808:	ldr	r0, [sp, #56]	; 0x38
   2880c:	bl	13e1c <__assert_fail@plt+0x28c4>
   28810:	ldr	r3, [r5, #8]
   28814:	cmp	r3, r7
   28818:	moveq	fp, r9
   2881c:	moveq	r7, fp
   28820:	movne	fp, sl
   28824:	ldr	r2, [r5, #24]
   28828:	add	r9, r7, r7, lsl #1
   2882c:	lsl	r9, r9, #2
   28830:	add	r1, r2, r9
   28834:	ldr	r1, [r1, #4]
   28838:	cmp	r1, #0
   2883c:	bne	28770 <__assert_fail@plt+0x17218>
   28840:	mov	r3, #1
   28844:	mov	r2, r7
   28848:	mov	r1, r5
   2884c:	add	r0, sp, #48	; 0x30
   28850:	bl	1d5fc <__assert_fail@plt+0xc0a4>
   28854:	cmp	r0, #0
   28858:	bne	28c58 <__assert_fail@plt+0x17700>
   2885c:	ldr	r2, [r5, #24]
   28860:	add	r7, r7, #1
   28864:	add	r9, r2, r9
   28868:	ldr	r9, [r9, #4]
   2886c:	cmp	r9, #0
   28870:	beq	28808 <__assert_fail@plt+0x172b0>
   28874:	ldr	r3, [r5, #8]
   28878:	b	28774 <__assert_fail@plt+0x1721c>
   2887c:	ldrb	r3, [r6, #28]
   28880:	tst	r3, #16
   28884:	bne	288a0 <__assert_fail@plt+0x17348>
   28888:	ldr	r3, [r6, #24]
   2888c:	cmp	r3, #0
   28890:	beq	288a0 <__assert_fail@plt+0x17348>
   28894:	ldrb	r3, [r5, #88]	; 0x58
   28898:	tst	r3, #1
   2889c:	bne	288ac <__assert_fail@plt+0x17354>
   288a0:	ldr	r3, [r5, #76]	; 0x4c
   288a4:	cmp	r3, #0
   288a8:	beq	289d0 <__assert_fail@plt+0x17478>
   288ac:	add	r7, r7, r7, lsl #1
   288b0:	lsl	r0, r7, #2
   288b4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   288b8:	cmp	r0, #0
   288bc:	str	r0, [r5, #28]
   288c0:	beq	28494 <__assert_fail@plt+0x16f3c>
   288c4:	ldr	r3, [r5, #8]
   288c8:	cmp	r3, #0
   288cc:	movne	r3, #0
   288d0:	movne	r2, r3
   288d4:	bne	288e0 <__assert_fail@plt+0x17388>
   288d8:	b	289d0 <__assert_fail@plt+0x17478>
   288dc:	ldr	r0, [r5, #28]
   288e0:	add	ip, r3, r3, lsl #1
   288e4:	add	r3, r3, #1
   288e8:	add	r1, r0, ip, lsl #2
   288ec:	str	r2, [r0, ip, lsl #2]
   288f0:	str	r2, [r1, #4]
   288f4:	str	r2, [r1, #8]
   288f8:	ldr	r1, [r5, #8]
   288fc:	cmp	r1, r3
   28900:	bhi	288dc <__assert_fail@plt+0x17384>
   28904:	cmp	r1, #0
   28908:	beq	289d0 <__assert_fail@plt+0x17478>
   2890c:	ldr	ip, [r5, #24]
   28910:	mov	r3, #0
   28914:	mov	sl, r3
   28918:	str	r4, [sp, #20]
   2891c:	mov	r4, r3
   28920:	str	r8, [sp, #24]
   28924:	str	fp, [sp, #28]
   28928:	add	fp, ip, r4
   2892c:	ldmib	fp, {r3, r9}
   28930:	cmp	r3, #0
   28934:	ble	289b8 <__assert_fail@plt+0x17460>
   28938:	sub	r9, r9, #4
   2893c:	mov	r8, #0
   28940:	b	28960 <__assert_fail@plt+0x17408>
   28944:	add	r3, r1, #1
   28948:	add	r8, r8, #1
   2894c:	str	r3, [r7, #4]
   28950:	str	sl, [r0, r1, lsl #2]
   28954:	ldr	r3, [fp, #4]
   28958:	cmp	r8, r3
   2895c:	bge	289b4 <__assert_fail@plt+0x1745c>
   28960:	ldr	r3, [r9, #4]!
   28964:	ldr	r2, [r5, #28]
   28968:	add	r3, r3, r3, lsl #1
   2896c:	add	r7, r2, r3, lsl #2
   28970:	ldr	lr, [r2, r3, lsl #2]
   28974:	ldr	r1, [r7, #4]
   28978:	ldr	r0, [r7, #8]
   2897c:	cmp	lr, r1
   28980:	bne	28944 <__assert_fail@plt+0x173ec>
   28984:	add	r1, r1, #1
   28988:	lsl	ip, r1, #1
   2898c:	lsl	r1, r1, #3
   28990:	str	ip, [r2, r3, lsl #2]
   28994:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   28998:	cmp	r0, #0
   2899c:	beq	28c84 <__assert_fail@plt+0x1772c>
   289a0:	ldr	ip, [r5, #24]
   289a4:	str	r0, [r7, #8]
   289a8:	ldr	r1, [r7, #4]
   289ac:	add	fp, ip, r4
   289b0:	b	28944 <__assert_fail@plt+0x173ec>
   289b4:	ldr	r1, [r5, #8]
   289b8:	add	sl, sl, #1
   289bc:	add	r4, r4, #12
   289c0:	cmp	sl, r1
   289c4:	bcc	28928 <__assert_fail@plt+0x173d0>
   289c8:	add	r4, sp, #20
   289cc:	ldm	r4, {r4, r8, fp}
   289d0:	mov	r1, #0
   289d4:	str	r1, [sp, #36]	; 0x24
   289d8:	ldr	r3, [sp, #12]
   289dc:	ldrb	r2, [r4, #88]	; 0x58
   289e0:	clz	r3, r3
   289e4:	lsr	r3, r3, #5
   289e8:	ands	r3, r3, r2, lsr #2
   289ec:	bne	28cb0 <__assert_fail@plt+0x17758>
   289f0:	ldr	r7, [r4, #24]
   289f4:	ldr	r3, [r4, #52]	; 0x34
   289f8:	ldr	r3, [r3, #12]
   289fc:	ldr	r3, [r3, #28]
   28a00:	add	r2, r3, r3, lsl #1
   28a04:	str	r3, [r4, #72]	; 0x48
   28a08:	add	r7, r7, r2, lsl #2
   28a0c:	ldr	r3, [r7, #4]
   28a10:	cmp	r3, #0
   28a14:	str	r3, [sp, #52]	; 0x34
   28a18:	ble	28c68 <__assert_fail@plt+0x17710>
   28a1c:	lsl	r0, r3, #2
   28a20:	str	r3, [sp, #48]	; 0x30
   28a24:	bl	2cd58 <__assert_fail@plt+0x1b800>
   28a28:	cmp	r0, #0
   28a2c:	mov	r8, r0
   28a30:	str	r0, [sp, #56]	; 0x38
   28a34:	beq	28fe8 <__assert_fail@plt+0x17a90>
   28a38:	ldr	r2, [r7, #4]
   28a3c:	add	r5, sp, #48	; 0x30
   28a40:	ldr	r1, [r7, #8]
   28a44:	lsl	r2, r2, #2
   28a48:	bl	11264 <memcpy@plt>
   28a4c:	mov	r3, #0
   28a50:	str	r3, [sp, #40]	; 0x28
   28a54:	ldr	r3, [r4, #76]	; 0x4c
   28a58:	cmp	r3, #0
   28a5c:	ble	28b88 <__assert_fail@plt+0x17630>
   28a60:	ldr	r7, [sp, #52]	; 0x34
   28a64:	cmp	r7, #0
   28a68:	ble	28b88 <__assert_fail@plt+0x17630>
   28a6c:	mov	ip, #0
   28a70:	b	28a84 <__assert_fail@plt+0x1752c>
   28a74:	add	ip, ip, #1
   28a78:	cmp	r7, ip
   28a7c:	ble	28b88 <__assert_fail@plt+0x17630>
   28a80:	ldr	r8, [sp, #56]	; 0x38
   28a84:	ldr	r3, [r8, ip, lsl #2]
   28a88:	ldr	r0, [r4]
   28a8c:	add	r9, r0, r3, lsl #3
   28a90:	ldrb	r2, [r9, #4]
   28a94:	cmp	r2, #4
   28a98:	bne	28a74 <__assert_fail@plt+0x1751c>
   28a9c:	sub	lr, r8, #4
   28aa0:	mov	r1, #0
   28aa4:	b	28ab4 <__assert_fail@plt+0x1755c>
   28aa8:	add	r1, r1, #1
   28aac:	cmp	r7, r1
   28ab0:	beq	28a74 <__assert_fail@plt+0x1751c>
   28ab4:	ldr	r2, [lr, #4]!
   28ab8:	add	sl, r0, r2, lsl #3
   28abc:	ldrb	sl, [sl, #4]
   28ac0:	cmp	sl, #9
   28ac4:	bne	28aa8 <__assert_fail@plt+0x17550>
   28ac8:	ldr	sl, [r0, r2, lsl #3]
   28acc:	ldr	r2, [r9]
   28ad0:	cmp	sl, r2
   28ad4:	bne	28aa8 <__assert_fail@plt+0x17550>
   28ad8:	ldr	r1, [r4, #20]
   28adc:	add	r3, r3, r3, lsl #1
   28ae0:	subs	r2, r7, #1
   28ae4:	add	r3, r1, r3, lsl #2
   28ae8:	moveq	r1, r2
   28aec:	ldr	r3, [r3, #8]
   28af0:	ldr	lr, [r3]
   28af4:	beq	28b50 <__assert_fail@plt+0x175f8>
   28af8:	mov	r1, #0
   28afc:	add	r3, r2, r1
   28b00:	lsr	r3, r3, #1
   28b04:	ldr	r0, [r8, r3, lsl #2]
   28b08:	cmp	lr, r0
   28b0c:	bgt	28c48 <__assert_fail@plt+0x176f0>
   28b10:	cmp	r3, r1
   28b14:	bls	28b50 <__assert_fail@plt+0x175f8>
   28b18:	add	r2, r3, r1
   28b1c:	lsr	r2, r2, #1
   28b20:	ldr	r0, [r8, r2, lsl #2]
   28b24:	cmp	lr, r0
   28b28:	ble	28b48 <__assert_fail@plt+0x175f0>
   28b2c:	b	28c3c <__assert_fail@plt+0x176e4>
   28b30:	add	r3, r1, r2
   28b34:	lsr	r3, r3, #1
   28b38:	ldr	r0, [r8, r3, lsl #2]
   28b3c:	cmp	lr, r0
   28b40:	bgt	28c48 <__assert_fail@plt+0x176f0>
   28b44:	mov	r2, r3
   28b48:	cmp	r1, r2
   28b4c:	bcc	28b30 <__assert_fail@plt+0x175d8>
   28b50:	ldr	r3, [r8, r1, lsl #2]
   28b54:	cmp	lr, r3
   28b58:	beq	28a74 <__assert_fail@plt+0x1751c>
   28b5c:	ldr	r1, [r4, #24]
   28b60:	add	lr, lr, lr, lsl #1
   28b64:	mov	r0, r5
   28b68:	add	r1, r1, lr, lsl #2
   28b6c:	bl	19174 <__assert_fail@plt+0x7c1c>
   28b70:	cmp	r0, #0
   28b74:	bne	28bcc <__assert_fail@plt+0x17674>
   28b78:	ldr	r7, [sp, #52]	; 0x34
   28b7c:	mov	ip, #1
   28b80:	cmp	r7, ip
   28b84:	bgt	28a80 <__assert_fail@plt+0x17528>
   28b88:	mov	r3, #0
   28b8c:	mov	r2, r5
   28b90:	mov	r1, r4
   28b94:	add	r0, sp, #40	; 0x28
   28b98:	bl	1e188 <__assert_fail@plt+0xcc30>
   28b9c:	cmp	r0, #0
   28ba0:	str	r0, [r4, #36]	; 0x24
   28ba4:	beq	28d88 <__assert_fail@plt+0x17830>
   28ba8:	ldrsb	r3, [r0, #52]	; 0x34
   28bac:	cmp	r3, #0
   28bb0:	strge	r0, [r4, #40]	; 0x28
   28bb4:	strge	r0, [r4, #44]	; 0x2c
   28bb8:	strge	r0, [r4, #48]	; 0x30
   28bbc:	blt	28d24 <__assert_fail@plt+0x177cc>
   28bc0:	ldr	r0, [sp, #56]	; 0x38
   28bc4:	bl	13e1c <__assert_fail@plt+0x28c4>
   28bc8:	mov	r0, #0
   28bcc:	ldr	r5, [r6]
   28bd0:	str	r0, [sp, #36]	; 0x24
   28bd4:	ldr	r0, [r5, #56]	; 0x38
   28bd8:	cmp	r0, #0
   28bdc:	beq	28bf0 <__assert_fail@plt+0x17698>
   28be0:	ldr	r7, [r0]
   28be4:	bl	13e1c <__assert_fail@plt+0x28c4>
   28be8:	subs	r0, r7, #0
   28bec:	bne	28be0 <__assert_fail@plt+0x17688>
   28bf0:	mov	r3, #31
   28bf4:	mov	r7, #0
   28bf8:	ldr	r0, [r5, #16]
   28bfc:	str	r7, [r5, #52]	; 0x34
   28c00:	str	r7, [r5, #56]	; 0x38
   28c04:	str	r3, [r5, #64]	; 0x40
   28c08:	bl	13e1c <__assert_fail@plt+0x28c4>
   28c0c:	str	r7, [r5, #16]
   28c10:	ldr	r0, [sp, #68]	; 0x44
   28c14:	bl	13e1c <__assert_fail@plt+0x28c4>
   28c18:	ldr	r0, [sp, #72]	; 0x48
   28c1c:	bl	13e1c <__assert_fail@plt+0x28c4>
   28c20:	ldrb	r3, [sp, #135]	; 0x87
   28c24:	cmp	r3, r7
   28c28:	bne	28c90 <__assert_fail@plt+0x17738>
   28c2c:	ldr	r0, [sp, #36]	; 0x24
   28c30:	cmp	r0, #0
   28c34:	beq	2834c <__assert_fail@plt+0x16df4>
   28c38:	b	27df4 <__assert_fail@plt+0x1689c>
   28c3c:	mov	r1, r2
   28c40:	mov	r2, r3
   28c44:	mov	r3, r1
   28c48:	add	r1, r3, #1
   28c4c:	cmp	r1, r2
   28c50:	bcc	28afc <__assert_fail@plt+0x175a4>
   28c54:	b	28b50 <__assert_fail@plt+0x175f8>
   28c58:	mov	r3, r0
   28c5c:	str	r3, [sp, #36]	; 0x24
   28c60:	ldr	r5, [r6]
   28c64:	b	27d9c <__assert_fail@plt+0x16844>
   28c68:	mov	r3, #0
   28c6c:	add	r5, sp, #48	; 0x30
   28c70:	str	r3, [sp, #40]	; 0x28
   28c74:	str	r3, [sp, #48]	; 0x30
   28c78:	str	r3, [r5, #4]
   28c7c:	str	r3, [r5, #8]
   28c80:	b	28a54 <__assert_fail@plt+0x174fc>
   28c84:	ldr	r4, [sp, #20]
   28c88:	mov	r3, #12
   28c8c:	b	28c5c <__assert_fail@plt+0x17704>
   28c90:	ldr	r0, [sp, #64]	; 0x40
   28c94:	bl	13e1c <__assert_fail@plt+0x28c4>
   28c98:	b	28c2c <__assert_fail@plt+0x176d4>
   28c9c:	add	r0, sp, #60	; 0x3c
   28ca0:	bl	1826c <__assert_fail@plt+0x6d14>
   28ca4:	ldr	r3, [sp, #12]
   28ca8:	str	r3, [sp, #36]	; 0x24
   28cac:	b	27e9c <__assert_fail@plt+0x16944>
   28cb0:	ldr	r2, [r6, #20]
   28cb4:	cmp	r2, #0
   28cb8:	bne	289f0 <__assert_fail@plt+0x17498>
   28cbc:	ldr	r5, [r4, #8]
   28cc0:	cmp	r5, #0
   28cc4:	beq	2902c <__assert_fail@plt+0x17ad4>
   28cc8:	ldr	lr, [r4]
   28ccc:	mov	r0, r2
   28cd0:	mov	ip, r2
   28cd4:	mov	r1, lr
   28cd8:	ldrb	r2, [r1, #4]
   28cdc:	sub	r2, r2, #1
   28ce0:	cmp	r2, #11
   28ce4:	ldrls	pc, [pc, r2, lsl #2]
   28ce8:	b	2905c <__assert_fail@plt+0x17b04>
   28cec:	andeq	r8, r2, ip, lsr pc
   28cf0:	ldrdeq	r8, [r2], -r4
   28cf4:	andeq	r8, r2, ip, asr #30
   28cf8:	ldrdeq	r8, [r2], -r4
   28cfc:	ldrdeq	r8, [r2], -r0
   28d00:	strdeq	r8, [r2], -r0
   28d04:	andeq	r9, r2, ip, asr r0
   28d08:	ldrdeq	r8, [r2], -r4
   28d0c:	ldrdeq	r8, [r2], -r4
   28d10:	ldrdeq	r8, [r2], -r4
   28d14:	ldrdeq	r8, [r2], -r4
   28d18:	andeq	r8, r2, r4, lsl #31
   28d1c:	ldr	r2, [r5, #52]	; 0x34
   28d20:	b	28248 <__assert_fail@plt+0x16cf0>
   28d24:	mov	r3, #1
   28d28:	mov	r2, r5
   28d2c:	mov	r1, r4
   28d30:	add	r0, sp, #40	; 0x28
   28d34:	bl	1e188 <__assert_fail@plt+0xcc30>
   28d38:	mov	r3, #2
   28d3c:	mov	r2, r5
   28d40:	str	r0, [r4, #40]	; 0x28
   28d44:	mov	r1, r4
   28d48:	add	r0, sp, #40	; 0x28
   28d4c:	bl	1e188 <__assert_fail@plt+0xcc30>
   28d50:	mov	r3, #6
   28d54:	mov	r2, r5
   28d58:	str	r0, [r4, #44]	; 0x2c
   28d5c:	mov	r1, r4
   28d60:	add	r0, sp, #40	; 0x28
   28d64:	bl	1e188 <__assert_fail@plt+0xcc30>
   28d68:	ldr	r3, [r4, #40]	; 0x28
   28d6c:	str	r0, [r4, #48]	; 0x30
   28d70:	cmp	r3, #0
   28d74:	beq	28d88 <__assert_fail@plt+0x17830>
   28d78:	ldr	r3, [r4, #44]	; 0x2c
   28d7c:	cmp	r0, #0
   28d80:	cmpne	r3, #0
   28d84:	bne	28bc0 <__assert_fail@plt+0x17668>
   28d88:	ldr	r0, [sp, #40]	; 0x28
   28d8c:	b	28bcc <__assert_fail@plt+0x17674>
   28d90:	mov	r3, r2
   28d94:	b	28704 <__assert_fail@plt+0x171ac>
   28d98:	ldr	r5, [sp, #88]	; 0x58
   28d9c:	ldr	r9, [sp, #96]	; 0x60
   28da0:	ldr	r3, [sp, #108]	; 0x6c
   28da4:	cmp	r9, r3
   28da8:	movge	r9, r3
   28dac:	cmp	r9, r5
   28db0:	ble	29010 <__assert_fail@plt+0x17ab8>
   28db4:	bl	113d8 <__ctype_toupper_loc@plt>
   28db8:	b	28dd8 <__assert_fail@plt+0x17880>
   28dbc:	ldr	r2, [r0]
   28dc0:	ldr	r3, [r2, r3, lsl #2]
   28dc4:	strb	r3, [r8, r5]
   28dc8:	add	r5, r5, #1
   28dcc:	cmp	r9, r5
   28dd0:	beq	28e10 <__assert_fail@plt+0x178b8>
   28dd4:	ldr	r8, [sp, #64]	; 0x40
   28dd8:	ldr	r3, [sp, #60]	; 0x3c
   28ddc:	ldr	r1, [sp, #84]	; 0x54
   28de0:	ldr	r2, [sp, #124]	; 0x7c
   28de4:	add	r3, r3, r5
   28de8:	ldrb	r3, [r3, r1]
   28dec:	cmp	r2, #0
   28df0:	beq	28dbc <__assert_fail@plt+0x17864>
   28df4:	ldrb	r2, [r2, r3]
   28df8:	ldr	r3, [r0]
   28dfc:	ldr	r3, [r3, r2, lsl #2]
   28e00:	strb	r3, [r8, r5]
   28e04:	add	r5, r5, #1
   28e08:	cmp	r9, r5
   28e0c:	bne	28dd4 <__assert_fail@plt+0x1787c>
   28e10:	mov	r3, #0
   28e14:	str	r3, [sp, #36]	; 0x24
   28e18:	str	r9, [sp, #88]	; 0x58
   28e1c:	str	r9, [sp, #92]	; 0x5c
   28e20:	b	27e9c <__assert_fail@plt+0x16944>
   28e24:	mov	r0, r4
   28e28:	mov	r1, #160	; 0xa0
   28e2c:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   28e30:	subs	r4, r0, #0
   28e34:	beq	29018 <__assert_fail@plt+0x17ac0>
   28e38:	mov	r3, #160	; 0xa0
   28e3c:	str	r4, [r6]
   28e40:	str	r3, [r6, #4]
   28e44:	b	27b28 <__assert_fail@plt+0x165d0>
   28e48:	mov	sl, r5
   28e4c:	mov	r1, #1
   28e50:	b	27b88 <__assert_fail@plt+0x16630>
   28e54:	mov	r7, r8
   28e58:	mov	r9, r8
   28e5c:	b	280f0 <__assert_fail@plt+0x16b98>
   28e60:	ldr	r0, [sp, #64]	; 0x40
   28e64:	bl	13e1c <__assert_fail@plt+0x28c4>
   28e68:	b	27df4 <__assert_fail@plt+0x1689c>
   28e6c:	cmp	r9, #0
   28e70:	movne	r8, #1
   28e74:	bne	27f94 <__assert_fail@plt+0x16a3c>
   28e78:	ldr	r5, [r6]
   28e7c:	mov	r2, #12
   28e80:	mov	r3, #0
   28e84:	str	r2, [sp, #36]	; 0x24
   28e88:	str	r3, [r4, #52]	; 0x34
   28e8c:	b	27d9c <__assert_fail@plt+0x16844>
   28e90:	mov	r0, #996	; 0x3e4
   28e94:	bl	2cd58 <__assert_fail@plt+0x1b800>
   28e98:	subs	r7, r0, #0
   28e9c:	beq	28e6c <__assert_fail@plt+0x17914>
   28ea0:	ldr	r1, [r5, #56]	; 0x38
   28ea4:	mov	r3, sl
   28ea8:	mov	r2, #1
   28eac:	mov	r0, #4
   28eb0:	str	r1, [r7]
   28eb4:	str	r7, [r5, #56]	; 0x38
   28eb8:	b	27f34 <__assert_fail@plt+0x169dc>
   28ebc:	mov	r2, r3
   28ec0:	b	2824c <__assert_fail@plt+0x16cf4>
   28ec4:	mov	r3, #0
   28ec8:	str	r3, [sp, #36]	; 0x24
   28ecc:	b	27e9c <__assert_fail@plt+0x16944>
   28ed0:	mov	r0, r3
   28ed4:	add	ip, ip, #1
   28ed8:	add	r1, r1, #8
   28edc:	cmp	ip, r5
   28ee0:	bne	28cd8 <__assert_fail@plt+0x17780>
   28ee4:	orr	fp, fp, r0
   28ee8:	ands	fp, fp, #255	; 0xff
   28eec:	moveq	r0, fp
   28ef0:	beq	29030 <__assert_fail@plt+0x17ad8>
   28ef4:	add	ip, lr, ip, lsl #3
   28ef8:	mov	r2, #7
   28efc:	b	28f14 <__assert_fail@plt+0x179bc>
   28f00:	cmp	r3, #5
   28f04:	strbeq	r2, [lr, #4]
   28f08:	add	lr, lr, #8
   28f0c:	cmp	ip, lr
   28f10:	beq	29030 <__assert_fail@plt+0x17ad8>
   28f14:	ldrb	r3, [lr, #4]
   28f18:	cmp	r3, #1
   28f1c:	bne	28f00 <__assert_fail@plt+0x179a8>
   28f20:	ldrsb	r3, [lr]
   28f24:	cmp	r3, #0
   28f28:	bge	28f08 <__assert_fail@plt+0x179b0>
   28f2c:	ldrb	r3, [lr, #6]
   28f30:	bfc	r3, #5, #1
   28f34:	strb	r3, [lr, #6]
   28f38:	b	28f08 <__assert_fail@plt+0x179b0>
   28f3c:	ldrsb	r2, [r1]
   28f40:	cmp	r2, #0
   28f44:	movlt	fp, r3
   28f48:	b	28ed4 <__assert_fail@plt+0x1797c>
   28f4c:	ldr	r2, [r1]
   28f50:	ldr	r7, [r2, #16]
   28f54:	cmp	r7, #0
   28f58:	bne	289f0 <__assert_fail@plt+0x17498>
   28f5c:	ldr	r7, [r2, #20]
   28f60:	cmp	r7, #0
   28f64:	bne	289f0 <__assert_fail@plt+0x17498>
   28f68:	ldr	r7, [r2, #24]
   28f6c:	cmp	r7, #0
   28f70:	bne	289f0 <__assert_fail@plt+0x17498>
   28f74:	ldr	r2, [r2, #28]
   28f78:	cmp	r2, #0
   28f7c:	beq	28ed4 <__assert_fail@plt+0x1797c>
   28f80:	b	289f0 <__assert_fail@plt+0x17498>
   28f84:	ldr	r2, [r1]
   28f88:	cmp	r2, #32
   28f8c:	beq	28ed4 <__assert_fail@plt+0x1797c>
   28f90:	bls	28ffc <__assert_fail@plt+0x17aa4>
   28f94:	cmp	r2, #64	; 0x40
   28f98:	beq	28ed4 <__assert_fail@plt+0x1797c>
   28f9c:	cmp	r2, #128	; 0x80
   28fa0:	beq	28ed4 <__assert_fail@plt+0x1797c>
   28fa4:	b	289f0 <__assert_fail@plt+0x17498>
   28fa8:	mov	r3, #12
   28fac:	ldr	r4, [sp, #20]
   28fb0:	str	r0, [sl]
   28fb4:	str	r0, [sl, #4]
   28fb8:	b	28c5c <__assert_fail@plt+0x17704>
   28fbc:	mov	r0, #996	; 0x3e4
   28fc0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   28fc4:	cmp	r0, #0
   28fc8:	beq	28e78 <__assert_fail@plt+0x17920>
   28fcc:	ldr	ip, [r5, #56]	; 0x38
   28fd0:	mov	r2, #4
   28fd4:	mov	r3, #1
   28fd8:	mov	r1, #0
   28fdc:	str	ip, [r0]
   28fe0:	str	r0, [r5, #56]	; 0x38
   28fe4:	b	27fbc <__assert_fail@plt+0x16a64>
   28fe8:	mov	r0, #12
   28fec:	b	28bcc <__assert_fail@plt+0x17674>
   28ff0:	mov	r3, r8
   28ff4:	mov	r7, r8
   28ff8:	b	28138 <__assert_fail@plt+0x16be0>
   28ffc:	cmp	r2, #16
   29000:	beq	28ed4 <__assert_fail@plt+0x1797c>
   29004:	b	289f0 <__assert_fail@plt+0x17498>
   29008:	mov	r1, r3
   2900c:	b	27e8c <__assert_fail@plt+0x16934>
   29010:	mov	r9, r5
   29014:	b	28e10 <__assert_fail@plt+0x178b8>
   29018:	mov	r0, #12
   2901c:	b	2834c <__assert_fail@plt+0x16df4>
   29020:	ldr	r5, [r6]
   29024:	str	r8, [r4, #52]	; 0x34
   29028:	b	27d9c <__assert_fail@plt+0x16844>
   2902c:	mov	r0, r5
   29030:	ldrb	r3, [r4, #88]	; 0x58
   29034:	mov	r1, #1
   29038:	ldr	r2, [r4, #76]	; 0x4c
   2903c:	str	r1, [r4, #92]	; 0x5c
   29040:	and	r3, r3, #251	; 0xfb
   29044:	cmp	r2, #0
   29048:	movle	r2, r0
   2904c:	orrgt	r2, r0, #1
   29050:	bfi	r3, r2, #1, #1
   29054:	strb	r3, [r4, #88]	; 0x58
   29058:	b	289f0 <__assert_fail@plt+0x17498>
   2905c:	bl	11534 <abort@plt>
   29060:	movw	r3, #62452	; 0xf3f4
   29064:	movt	r3, #3
   29068:	str	r4, [sp, #-8]!
   2906c:	ldr	r3, [r3]
   29070:	str	lr, [sp, #4]
   29074:	mov	lr, r2
   29078:	mov	r2, r1
   2907c:	ldrb	ip, [lr, #28]
   29080:	mov	r1, r0
   29084:	mov	r0, lr
   29088:	ubfx	r4, r3, #25, #1
   2908c:	bfi	ip, r4, #4, #1
   29090:	mvn	ip, ip, lsl #25
   29094:	mvn	ip, ip, lsr #25
   29098:	strb	ip, [lr, #28]
   2909c:	bl	27ad0 <__assert_fail@plt+0x16578>
   290a0:	subs	r3, r0, #0
   290a4:	beq	290d8 <__assert_fail@plt+0x17b80>
   290a8:	movw	r1, #58228	; 0xe374
   290ac:	movt	r1, #2
   290b0:	ldr	r4, [sp]
   290b4:	add	r3, r1, r3, lsl #2
   290b8:	add	r1, r1, #32
   290bc:	mov	r2, #5
   290c0:	mov	r0, #0
   290c4:	ldr	lr, [sp, #4]
   290c8:	add	sp, sp, #8
   290cc:	ldr	r3, [r3, #416]	; 0x1a0
   290d0:	add	r1, r1, r3
   290d4:	b	112d0 <dcgettext@plt>
   290d8:	ldr	r4, [sp]
   290dc:	add	sp, sp, #4
   290e0:	pop	{pc}		; (ldr pc, [sp], #4)
   290e4:	movw	r3, #62452	; 0xf3f4
   290e8:	movt	r3, #3
   290ec:	ldr	r2, [r3]
   290f0:	str	r0, [r3]
   290f4:	mov	r0, r2
   290f8:	bx	lr
   290fc:	strd	r4, [sp, #-16]!
   29100:	mov	r2, #256	; 0x100
   29104:	mov	r4, r0
   29108:	ldr	r5, [r0]
   2910c:	mov	r1, #0
   29110:	str	r6, [sp, #8]
   29114:	ldr	r6, [r0, #16]
   29118:	str	lr, [sp, #12]
   2911c:	mov	r0, r6
   29120:	bl	1145c <memset@plt>
   29124:	ldr	r1, [r5, #36]	; 0x24
   29128:	mov	r3, r6
   2912c:	mov	r0, r4
   29130:	add	r2, r1, #12
   29134:	add	r1, r1, #8
   29138:	bl	1ab24 <__assert_fail@plt+0x95cc>
   2913c:	ldr	r3, [r5, #36]	; 0x24
   29140:	ldr	r0, [r5, #40]	; 0x28
   29144:	cmp	r3, r0
   29148:	beq	29164 <__assert_fail@plt+0x17c0c>
   2914c:	add	r2, r0, #12
   29150:	add	r1, r0, #8
   29154:	mov	r3, r6
   29158:	mov	r0, r4
   2915c:	bl	1ab24 <__assert_fail@plt+0x95cc>
   29160:	ldr	r0, [r5, #36]	; 0x24
   29164:	ldr	r1, [r5, #44]	; 0x2c
   29168:	cmp	r1, r0
   2916c:	beq	29188 <__assert_fail@plt+0x17c30>
   29170:	add	r2, r1, #12
   29174:	mov	r0, r4
   29178:	mov	r3, r6
   2917c:	add	r1, r1, #8
   29180:	bl	1ab24 <__assert_fail@plt+0x95cc>
   29184:	ldr	r0, [r5, #36]	; 0x24
   29188:	ldr	r1, [r5, #48]	; 0x30
   2918c:	cmp	r1, r0
   29190:	beq	291a8 <__assert_fail@plt+0x17c50>
   29194:	add	r2, r1, #12
   29198:	mov	r3, r6
   2919c:	add	r1, r1, #8
   291a0:	mov	r0, r4
   291a4:	bl	1ab24 <__assert_fail@plt+0x95cc>
   291a8:	ldrb	r3, [r4, #28]
   291ac:	mov	r0, #0
   291b0:	ldr	r6, [sp, #8]
   291b4:	orr	r3, r3, #8
   291b8:	strb	r3, [r4, #28]
   291bc:	ldrd	r4, [sp]
   291c0:	add	sp, sp, #12
   291c4:	pop	{pc}		; (ldr pc, [sp], #4)
   291c8:	cmp	r3, r2
   291cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   291d0:	strd	r6, [sp, #8]
   291d4:	strd	r8, [sp, #16]
   291d8:	strd	sl, [sp, #24]
   291dc:	str	lr, [sp, #32]
   291e0:	sub	sp, sp, #52	; 0x34
   291e4:	movle	lr, #0
   291e8:	movgt	lr, #1
   291ec:	ldr	ip, [sp, #88]	; 0x58
   291f0:	orrs	lr, lr, r3, lsr #31
   291f4:	ldrb	lr, [sp, #100]	; 0x64
   291f8:	ldr	r8, [sp, #96]	; 0x60
   291fc:	add	r7, r3, ip
   29200:	str	lr, [sp, #36]	; 0x24
   29204:	ldr	lr, [r0]
   29208:	str	lr, [sp, #28]
   2920c:	bne	2950c <__assert_fail@plt+0x17fb4>
   29210:	cmp	r7, r2
   29214:	mov	fp, r3
   29218:	str	r2, [sp, #32]
   2921c:	mov	r4, r0
   29220:	mov	r3, r2
   29224:	str	r1, [sp, #40]	; 0x28
   29228:	bgt	294b8 <__assert_fail@plt+0x17f60>
   2922c:	cmp	ip, #0
   29230:	cmpge	fp, r7
   29234:	bgt	294b8 <__assert_fail@plt+0x17f60>
   29238:	cmp	r7, #0
   2923c:	blt	294c0 <__assert_fail@plt+0x17f68>
   29240:	cmp	fp, r7
   29244:	movgt	r2, #0
   29248:	movle	r2, #1
   2924c:	ands	r3, r2, ip, lsr #31
   29250:	bne	294c0 <__assert_fail@plt+0x17f68>
   29254:	movw	r2, #0
   29258:	movt	r2, #0
   2925c:	cmp	r2, #0
   29260:	mov	r5, #1
   29264:	moveq	r5, r2
   29268:	movw	r2, #0
   2926c:	movt	r2, #0
   29270:	mov	r0, #1
   29274:	cmp	r2, #0
   29278:	moveq	r0, r2
   2927c:	orr	r5, r5, r0
   29280:	ands	r5, r5, #255	; 0xff
   29284:	beq	29298 <__assert_fail@plt+0x17d40>
   29288:	ldr	r3, [sp, #28]
   2928c:	mov	r5, #1
   29290:	add	r0, r3, #136	; 0x88
   29294:	bl	1124c <pthread_mutex_lock@plt>
   29298:	ldrb	r0, [r4, #28]
   2929c:	cmp	fp, r7
   292a0:	ubfx	r3, r0, #5, #2
   292a4:	str	r3, [sp, #44]	; 0x2c
   292a8:	bge	292c0 <__assert_fail@plt+0x17d68>
   292ac:	ldr	r2, [r4, #16]
   292b0:	cmp	r2, #0
   292b4:	beq	292c0 <__assert_fail@plt+0x17d68>
   292b8:	tst	r0, #8
   292bc:	beq	29460 <__assert_fail@plt+0x17f08>
   292c0:	ubfx	r2, r0, #4, #1
   292c4:	cmp	r8, #0
   292c8:	orreq	r2, r2, #1
   292cc:	ands	r2, r2, #255	; 0xff
   292d0:	bne	2944c <__assert_fail@plt+0x17ef4>
   292d4:	and	r0, r0, #6
   292d8:	ldr	ip, [r4, #24]
   292dc:	cmp	r0, #4
   292e0:	beq	2951c <__assert_fail@plt+0x17fc4>
   292e4:	add	sl, ip, #1
   292e8:	mov	r6, sl
   292ec:	lsl	r0, sl, #3
   292f0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   292f4:	subs	r9, r0, #0
   292f8:	beq	29514 <__assert_fail@plt+0x17fbc>
   292fc:	mov	r3, fp
   29300:	mov	r0, r4
   29304:	str	sl, [sp, #8]
   29308:	ldr	ip, [sp, #92]	; 0x5c
   2930c:	ldr	r2, [sp, #32]
   29310:	ldr	r1, [sp, #40]	; 0x28
   29314:	stm	sp, {r7, ip}
   29318:	ldr	ip, [sp, #44]	; 0x2c
   2931c:	str	r9, [sp, #12]
   29320:	str	ip, [sp, #16]
   29324:	bl	224a4 <__assert_fail@plt+0x10f4c>
   29328:	cmp	r0, #0
   2932c:	beq	2937c <__assert_fail@plt+0x17e24>
   29330:	cmp	r0, #1
   29334:	mvneq	r4, #0
   29338:	beq	29340 <__assert_fail@plt+0x17de8>
   2933c:	mvn	r4, #1
   29340:	mov	r0, r9
   29344:	bl	13e1c <__assert_fail@plt+0x28c4>
   29348:	cmp	r5, #0
   2934c:	beq	2935c <__assert_fail@plt+0x17e04>
   29350:	ldr	r3, [sp, #28]
   29354:	add	r0, r3, #136	; 0x88
   29358:	bl	11198 <pthread_mutex_unlock@plt>
   2935c:	mov	r0, r4
   29360:	add	sp, sp, #52	; 0x34
   29364:	ldrd	r4, [sp]
   29368:	ldrd	r6, [sp, #8]
   2936c:	ldrd	r8, [sp, #16]
   29370:	ldrd	sl, [sp, #24]
   29374:	add	sp, sp, #32
   29378:	pop	{pc}		; (ldr pc, [sp], #4)
   2937c:	cmp	r8, #0
   29380:	beq	29430 <__assert_fail@plt+0x17ed8>
   29384:	ldrb	r7, [r4, #28]
   29388:	add	sl, r6, #1
   2938c:	ubfx	r7, r7, #1, #2
   29390:	cmp	r7, #0
   29394:	beq	29470 <__assert_fail@plt+0x17f18>
   29398:	cmp	r7, #1
   2939c:	beq	29548 <__assert_fail@plt+0x17ff0>
   293a0:	ldr	fp, [r8]
   293a4:	mov	r7, #2
   293a8:	cmp	r6, #0
   293ac:	ble	295b0 <__assert_fail@plt+0x18058>
   293b0:	ldrd	r0, [r8, #4]
   293b4:	add	lr, r9, r6, lsl #3
   293b8:	mov	r3, r9
   293bc:	mov	r2, r6
   293c0:	sub	r0, r0, #4
   293c4:	sub	r1, r1, #4
   293c8:	ldr	ip, [r3]
   293cc:	add	r3, r3, #8
   293d0:	str	ip, [r0, #4]!
   293d4:	ldr	ip, [r3, #-4]
   293d8:	cmp	r3, lr
   293dc:	str	ip, [r1, #4]!
   293e0:	bne	293c8 <__assert_fail@plt+0x17e70>
   293e4:	ldr	fp, [r8]
   293e8:	cmp	r2, fp
   293ec:	bcs	29418 <__assert_fail@plt+0x17ec0>
   293f0:	ldr	ip, [r8, #4]
   293f4:	mvn	r3, #0
   293f8:	ldr	r0, [r8, #8]
   293fc:	str	r3, [r0, r2, lsl #2]
   29400:	add	r6, r6, #1
   29404:	str	r3, [ip, r2, lsl #2]
   29408:	mov	r2, r6
   2940c:	ldr	r1, [r8]
   29410:	cmp	r1, r6
   29414:	bhi	293fc <__assert_fail@plt+0x17ea4>
   29418:	ldrb	r3, [r4, #28]
   2941c:	bfi	r3, r7, #1, #2
   29420:	and	r2, r3, #6
   29424:	cmp	r2, #0
   29428:	strb	r3, [r4, #28]
   2942c:	beq	2933c <__assert_fail@plt+0x17de4>
   29430:	ldr	r3, [sp, #36]	; 0x24
   29434:	ldr	r4, [r9]
   29438:	cmp	r3, #0
   2943c:	beq	29340 <__assert_fail@plt+0x17de8>
   29440:	ldr	r3, [r9, #4]
   29444:	sub	r4, r3, r4
   29448:	b	29340 <__assert_fail@plt+0x17de8>
   2944c:	mov	sl, #1
   29450:	mov	r0, #8
   29454:	mov	r6, sl
   29458:	mov	r8, #0
   2945c:	b	292f0 <__assert_fail@plt+0x17d98>
   29460:	mov	r0, r4
   29464:	bl	290fc <__assert_fail@plt+0x17ba4>
   29468:	ldrb	r0, [r4, #28]
   2946c:	b	292c0 <__assert_fail@plt+0x17d68>
   29470:	lsl	r7, sl, #2
   29474:	mov	fp, sl
   29478:	mov	r0, r7
   2947c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   29480:	cmp	r0, #0
   29484:	str	r0, [r8, #4]
   29488:	beq	295bc <__assert_fail@plt+0x18064>
   2948c:	mov	r0, r7
   29490:	bl	2cd58 <__assert_fail@plt+0x1b800>
   29494:	cmp	r0, #0
   29498:	mov	r7, r0
   2949c:	str	r0, [r8, #8]
   294a0:	movne	r7, #1
   294a4:	strne	sl, [r8]
   294a8:	bne	293a8 <__assert_fail@plt+0x17e50>
   294ac:	ldr	r0, [r8, #4]
   294b0:	bl	13e1c <__assert_fail@plt+0x28c4>
   294b4:	b	29418 <__assert_fail@plt+0x17ec0>
   294b8:	mov	r7, r3
   294bc:	b	29254 <__assert_fail@plt+0x17cfc>
   294c0:	movw	r2, #0
   294c4:	movt	r2, #0
   294c8:	cmp	r2, #0
   294cc:	mov	r5, #1
   294d0:	moveq	r5, r2
   294d4:	movw	r2, #0
   294d8:	movt	r2, #0
   294dc:	mov	r1, #1
   294e0:	cmp	r2, #0
   294e4:	moveq	r1, r2
   294e8:	orr	r5, r5, r1
   294ec:	ands	r5, r5, #255	; 0xff
   294f0:	movne	r7, #0
   294f4:	bne	29288 <__assert_fail@plt+0x17d30>
   294f8:	ldrb	r0, [r4, #28]
   294fc:	mov	r7, r5
   29500:	ubfx	r3, r0, #5, #2
   29504:	str	r3, [sp, #44]	; 0x2c
   29508:	b	292c0 <__assert_fail@plt+0x17d68>
   2950c:	mvn	r4, #0
   29510:	b	2935c <__assert_fail@plt+0x17e04>
   29514:	mvn	r4, #1
   29518:	b	29348 <__assert_fail@plt+0x17df0>
   2951c:	ldr	sl, [r8]
   29520:	cmp	sl, ip
   29524:	bhi	292e4 <__assert_fail@plt+0x17d8c>
   29528:	cmp	sl, #0
   2952c:	mov	r6, sl
   29530:	bgt	292ec <__assert_fail@plt+0x17d94>
   29534:	mov	sl, #1
   29538:	mov	r8, r2
   2953c:	mov	r6, sl
   29540:	mov	r0, #8
   29544:	b	292f0 <__assert_fail@plt+0x17d98>
   29548:	ldr	fp, [r8]
   2954c:	cmp	fp, sl
   29550:	bcs	293a8 <__assert_fail@plt+0x17e50>
   29554:	lsl	fp, sl, #2
   29558:	ldr	r0, [r8, #4]
   2955c:	mov	r1, fp
   29560:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   29564:	subs	r2, r0, #0
   29568:	str	r2, [sp, #32]
   2956c:	beq	295bc <__assert_fail@plt+0x18064>
   29570:	mov	r1, fp
   29574:	ldr	r0, [r8, #8]
   29578:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   2957c:	ldr	r2, [sp, #32]
   29580:	subs	r1, r0, #0
   29584:	movne	fp, sl
   29588:	strne	sl, [r8]
   2958c:	strne	r1, [r8, #8]
   29590:	strne	r2, [r8, #4]
   29594:	bne	293a8 <__assert_fail@plt+0x17e50>
   29598:	mov	r0, r2
   2959c:	str	r1, [sp, #32]
   295a0:	bl	13e1c <__assert_fail@plt+0x28c4>
   295a4:	ldr	r1, [sp, #32]
   295a8:	mov	r7, r1
   295ac:	b	29418 <__assert_fail@plt+0x17ec0>
   295b0:	mov	r6, #0
   295b4:	mov	r2, r6
   295b8:	b	293e8 <__assert_fail@plt+0x17e90>
   295bc:	mov	r7, #0
   295c0:	b	29418 <__assert_fail@plt+0x17ec0>
   295c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   295c8:	mov	r4, r0
   295cc:	mov	r0, #0
   295d0:	tst	r2, #1
   295d4:	movw	r5, #45820	; 0xb2fc
   295d8:	movt	r5, #3
   295dc:	movw	r3, #710	; 0x2c6
   295e0:	movt	r3, #257	; 0x101
   295e4:	strd	r6, [sp, #8]
   295e8:	mov	r6, r2
   295ec:	str	r8, [sp, #16]
   295f0:	mov	r7, r1
   295f4:	movne	r8, r5
   295f8:	str	lr, [sp, #20]
   295fc:	moveq	r8, r3
   29600:	str	r0, [r4]
   29604:	str	r0, [r4, #4]
   29608:	str	r0, [r4, #8]
   2960c:	mov	r0, #256	; 0x100
   29610:	bl	2cd58 <__assert_fail@plt+0x1b800>
   29614:	cmp	r0, #0
   29618:	str	r0, [r4, #16]
   2961c:	beq	296c8 <__assert_fail@plt+0x18170>
   29620:	lsl	r5, r6, #21
   29624:	ands	r2, r6, #4
   29628:	and	r5, r5, #4194304	; 0x400000
   2962c:	orr	r5, r5, r8
   29630:	bne	296a0 <__assert_fail@plt+0x18148>
   29634:	ldrb	r3, [r4, #28]
   29638:	ubfx	r6, r6, #3, #1
   2963c:	mov	r1, #0
   29640:	mov	r0, r7
   29644:	str	r1, [r4, #20]
   29648:	bfi	r3, r2, #7, #1
   2964c:	bfi	r3, r6, #4, #1
   29650:	strb	r3, [r4, #28]
   29654:	bl	11414 <strlen@plt>
   29658:	mov	r2, r0
   2965c:	mov	r3, r5
   29660:	mov	r1, r7
   29664:	mov	r0, r4
   29668:	bl	27ad0 <__assert_fail@plt+0x16578>
   2966c:	cmp	r0, #16
   29670:	mov	r5, r0
   29674:	beq	296b0 <__assert_fail@plt+0x18158>
   29678:	cmp	r0, #0
   2967c:	bne	296b4 <__assert_fail@plt+0x1815c>
   29680:	mov	r0, r4
   29684:	bl	290fc <__assert_fail@plt+0x17ba4>
   29688:	mov	r0, r5
   2968c:	ldrd	r4, [sp]
   29690:	ldrd	r6, [sp, #8]
   29694:	ldr	r8, [sp, #16]
   29698:	add	sp, sp, #20
   2969c:	pop	{pc}		; (ldr pc, [sp], #4)
   296a0:	bic	r5, r5, #64	; 0x40
   296a4:	mov	r2, #1
   296a8:	orr	r5, r5, #256	; 0x100
   296ac:	b	29634 <__assert_fail@plt+0x180dc>
   296b0:	mov	r5, #8
   296b4:	ldr	r0, [r4, #16]
   296b8:	bl	13e1c <__assert_fail@plt+0x28c4>
   296bc:	mov	r3, #0
   296c0:	str	r3, [r4, #16]
   296c4:	b	29688 <__assert_fail@plt+0x18130>
   296c8:	mov	r5, #12
   296cc:	b	29688 <__assert_fail@plt+0x18130>
   296d0:	cmp	r0, #16
   296d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   296d8:	strd	r6, [sp, #8]
   296dc:	str	r8, [sp, #16]
   296e0:	str	lr, [sp, #20]
   296e4:	bhi	29760 <__assert_fail@plt+0x18208>
   296e8:	movw	r1, #58228	; 0xe374
   296ec:	movt	r1, #2
   296f0:	add	ip, r1, r0, lsl #2
   296f4:	mov	r4, r3
   296f8:	add	r1, r1, #32
   296fc:	mov	r6, r2
   29700:	mov	r0, #0
   29704:	ldr	r3, [ip, #416]	; 0x1a0
   29708:	mov	r2, #5
   2970c:	add	r1, r1, r3
   29710:	bl	112d0 <dcgettext@plt>
   29714:	mov	r7, r0
   29718:	bl	11414 <strlen@plt>
   2971c:	cmp	r4, #0
   29720:	add	r5, r0, #1
   29724:	beq	29748 <__assert_fail@plt+0x181f0>
   29728:	cmp	r5, r4
   2972c:	mov	r1, r7
   29730:	subhi	r2, r4, #1
   29734:	movhi	r3, #0
   29738:	movls	r2, r5
   2973c:	mov	r0, r6
   29740:	strbhi	r3, [r6, r2]
   29744:	bl	11264 <memcpy@plt>
   29748:	mov	r0, r5
   2974c:	ldrd	r4, [sp]
   29750:	ldrd	r6, [sp, #8]
   29754:	ldr	r8, [sp, #16]
   29758:	add	sp, sp, #20
   2975c:	pop	{pc}		; (ldr pc, [sp], #4)
   29760:	bl	11534 <abort@plt>
   29764:	strd	r4, [sp, #-16]!
   29768:	mov	r4, r0
   2976c:	ldr	r5, [r0]
   29770:	str	r6, [sp, #8]
   29774:	str	lr, [sp, #12]
   29778:	cmp	r5, #0
   2977c:	beq	297c4 <__assert_fail@plt+0x1826c>
   29780:	movw	r2, #0
   29784:	movt	r2, #0
   29788:	cmp	r2, #0
   2978c:	mov	r3, #1
   29790:	moveq	r3, r2
   29794:	movw	r2, #0
   29798:	movt	r2, #0
   2979c:	mov	r1, #1
   297a0:	cmp	r2, #0
   297a4:	moveq	r1, r2
   297a8:	orr	r3, r3, r1
   297ac:	tst	r3, #1
   297b0:	beq	297bc <__assert_fail@plt+0x18264>
   297b4:	add	r0, r5, #136	; 0x88
   297b8:	bl	11210 <pthread_mutex_destroy@plt>
   297bc:	mov	r0, r5
   297c0:	bl	1c334 <__assert_fail@plt+0xaddc>
   297c4:	mov	r5, #0
   297c8:	ldr	r0, [r4, #16]
   297cc:	str	r5, [r4]
   297d0:	str	r5, [r4, #4]
   297d4:	bl	13e1c <__assert_fail@plt+0x28c4>
   297d8:	str	r5, [r4, #16]
   297dc:	ldr	r0, [r4, #20]
   297e0:	bl	13e1c <__assert_fail@plt+0x28c4>
   297e4:	ldr	r6, [sp, #8]
   297e8:	str	r5, [r4, #20]
   297ec:	ldrd	r4, [sp]
   297f0:	add	sp, sp, #12
   297f4:	pop	{pc}		; (ldr pc, [sp], #4)
   297f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   297fc:	strd	r6, [sp, #8]
   29800:	strd	r8, [sp, #16]
   29804:	strd	sl, [sp, #24]
   29808:	str	lr, [sp, #32]
   2980c:	sub	sp, sp, #36	; 0x24
   29810:	ldr	r6, [sp, #72]	; 0x48
   29814:	bics	ip, r6, #7
   29818:	movne	r0, #2
   2981c:	bne	298d4 <__assert_fail@plt+0x1837c>
   29820:	ands	sl, r6, #4
   29824:	mov	r7, r3
   29828:	str	r2, [sp, #28]
   2982c:	mov	r8, r1
   29830:	mov	r5, r0
   29834:	bne	298f0 <__assert_fail@plt+0x18398>
   29838:	mov	r0, r1
   2983c:	bl	11414 <strlen@plt>
   29840:	mov	r9, r0
   29844:	movw	r2, #0
   29848:	movt	r2, #0
   2984c:	ldr	fp, [r5]
   29850:	cmp	r2, #0
   29854:	mov	r4, #1
   29858:	moveq	r4, r2
   2985c:	movw	r2, #0
   29860:	movt	r2, #0
   29864:	mov	r1, #1
   29868:	cmp	r2, #0
   2986c:	moveq	r1, r2
   29870:	orr	r4, r4, r1
   29874:	ands	r4, r4, #255	; 0xff
   29878:	beq	29884 <__assert_fail@plt+0x1832c>
   2987c:	add	r0, fp, #136	; 0x88
   29880:	bl	1124c <pthread_mutex_lock@plt>
   29884:	ldrb	r2, [r5, #28]
   29888:	tst	r2, #16
   2988c:	beq	298fc <__assert_fail@plt+0x183a4>
   29890:	mov	ip, #0
   29894:	mov	r0, r5
   29898:	str	r9, [sp]
   2989c:	mov	r3, sl
   298a0:	mov	r1, r8
   298a4:	mov	r2, r9
   298a8:	stmib	sp, {r9, ip}
   298ac:	str	ip, [sp, #12]
   298b0:	str	r6, [sp, #16]
   298b4:	bl	224a4 <__assert_fail@plt+0x10f4c>
   298b8:	mov	r5, r0
   298bc:	cmp	r4, #0
   298c0:	beq	298cc <__assert_fail@plt+0x18374>
   298c4:	add	r0, fp, #136	; 0x88
   298c8:	bl	11198 <pthread_mutex_unlock@plt>
   298cc:	adds	r0, r5, #0
   298d0:	movne	r0, #1
   298d4:	add	sp, sp, #36	; 0x24
   298d8:	ldrd	r4, [sp]
   298dc:	ldrd	r6, [sp, #8]
   298e0:	ldrd	r8, [sp, #16]
   298e4:	ldrd	sl, [sp, #24]
   298e8:	add	sp, sp, #32
   298ec:	pop	{pc}		; (ldr pc, [sp], #4)
   298f0:	ldr	sl, [r3]
   298f4:	ldr	r9, [r3, #4]
   298f8:	b	29844 <__assert_fail@plt+0x182ec>
   298fc:	ldr	ip, [sp, #28]
   29900:	mov	r0, r5
   29904:	mov	r3, sl
   29908:	mov	r1, r8
   2990c:	mov	r2, r9
   29910:	str	r9, [sp]
   29914:	stmib	sp, {r9, ip}
   29918:	str	r7, [sp, #12]
   2991c:	str	r6, [sp, #16]
   29920:	bl	224a4 <__assert_fail@plt+0x10f4c>
   29924:	mov	r5, r0
   29928:	b	298bc <__assert_fail@plt+0x18364>
   2992c:	cmp	r2, r3
   29930:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29934:	movge	ip, #0
   29938:	movlt	ip, #1
   2993c:	strd	r6, [sp, #8]
   29940:	orrs	ip, ip, r3, lsr #31
   29944:	strd	r8, [sp, #16]
   29948:	strd	sl, [sp, #24]
   2994c:	str	lr, [sp, #32]
   29950:	sub	sp, sp, #44	; 0x2c
   29954:	ldr	fp, [r0]
   29958:	ldr	r8, [sp, #80]	; 0x50
   2995c:	bne	29b98 <__assert_fail@plt+0x18640>
   29960:	movw	lr, #0
   29964:	movt	lr, #0
   29968:	str	r1, [sp, #36]	; 0x24
   2996c:	cmp	lr, #0
   29970:	mov	ip, #1
   29974:	moveq	ip, lr
   29978:	movw	lr, #0
   2997c:	movt	lr, #0
   29980:	mov	r6, #1
   29984:	cmp	lr, #0
   29988:	mov	r4, r3
   2998c:	moveq	r6, lr
   29990:	mov	r5, r0
   29994:	orr	r3, ip, r6
   29998:	mov	r7, r2
   2999c:	ands	r3, r3, #255	; 0xff
   299a0:	str	r3, [sp, #28]
   299a4:	beq	299b0 <__assert_fail@plt+0x18458>
   299a8:	add	r0, fp, #136	; 0x88
   299ac:	bl	1124c <pthread_mutex_lock@plt>
   299b0:	ldrb	r2, [r5, #28]
   299b4:	ubfx	r3, r2, #4, #1
   299b8:	ubfx	r1, r2, #5, #2
   299bc:	cmp	r8, #0
   299c0:	orreq	r3, r3, #1
   299c4:	ands	r3, r3, #255	; 0xff
   299c8:	str	r1, [sp, #32]
   299cc:	bne	29b30 <__assert_fail@plt+0x185d8>
   299d0:	and	r2, r2, #6
   299d4:	ldr	r1, [r5, #24]
   299d8:	cmp	r2, #4
   299dc:	beq	29ba8 <__assert_fail@plt+0x18650>
   299e0:	add	sl, r1, #1
   299e4:	mov	r6, sl
   299e8:	lsl	r0, sl, #3
   299ec:	bl	2cd58 <__assert_fail@plt+0x1b800>
   299f0:	subs	r9, r0, #0
   299f4:	beq	29ba0 <__assert_fail@plt+0x18648>
   299f8:	ldr	ip, [sp, #32]
   299fc:	mov	r2, r7
   29a00:	mov	r3, r4
   29a04:	mov	r0, r5
   29a08:	stm	sp, {r4, r7, sl}
   29a0c:	str	r9, [sp, #12]
   29a10:	str	ip, [sp, #16]
   29a14:	ldr	r1, [sp, #36]	; 0x24
   29a18:	bl	224a4 <__assert_fail@plt+0x10f4c>
   29a1c:	cmp	r0, #0
   29a20:	beq	29a70 <__assert_fail@plt+0x18518>
   29a24:	cmp	r0, #1
   29a28:	mvneq	r4, #0
   29a2c:	beq	29a34 <__assert_fail@plt+0x184dc>
   29a30:	mvn	r4, #1
   29a34:	mov	r0, r9
   29a38:	bl	13e1c <__assert_fail@plt+0x28c4>
   29a3c:	ldr	r3, [sp, #28]
   29a40:	cmp	r3, #0
   29a44:	beq	29a50 <__assert_fail@plt+0x184f8>
   29a48:	add	r0, fp, #136	; 0x88
   29a4c:	bl	11198 <pthread_mutex_unlock@plt>
   29a50:	mov	r0, r4
   29a54:	add	sp, sp, #44	; 0x2c
   29a58:	ldrd	r4, [sp]
   29a5c:	ldrd	r6, [sp, #8]
   29a60:	ldrd	r8, [sp, #16]
   29a64:	ldrd	sl, [sp, #24]
   29a68:	add	sp, sp, #32
   29a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   29a70:	cmp	r8, #0
   29a74:	beq	29b24 <__assert_fail@plt+0x185cc>
   29a78:	ldrb	r7, [r5, #28]
   29a7c:	add	sl, r6, #1
   29a80:	ubfx	r7, r7, #1, #2
   29a84:	cmp	r7, #0
   29a88:	beq	29b44 <__assert_fail@plt+0x185ec>
   29a8c:	cmp	r7, #1
   29a90:	beq	29bd4 <__assert_fail@plt+0x1867c>
   29a94:	ldr	r3, [r8]
   29a98:	mov	r7, #2
   29a9c:	cmp	r6, #0
   29aa0:	ble	29c44 <__assert_fail@plt+0x186ec>
   29aa4:	ldrd	r0, [r8, #4]
   29aa8:	add	lr, r9, r6, lsl #3
   29aac:	mov	r3, r9
   29ab0:	mov	r2, r6
   29ab4:	sub	r0, r0, #4
   29ab8:	sub	r1, r1, #4
   29abc:	ldr	ip, [r3]
   29ac0:	add	r3, r3, #8
   29ac4:	str	ip, [r0, #4]!
   29ac8:	ldr	ip, [r3, #-4]
   29acc:	cmp	r3, lr
   29ad0:	str	ip, [r1, #4]!
   29ad4:	bne	29abc <__assert_fail@plt+0x18564>
   29ad8:	ldr	r3, [r8]
   29adc:	cmp	r2, r3
   29ae0:	bcs	29b0c <__assert_fail@plt+0x185b4>
   29ae4:	ldr	ip, [r8, #4]
   29ae8:	mvn	r3, #0
   29aec:	ldr	r0, [r8, #8]
   29af0:	str	r3, [r0, r2, lsl #2]
   29af4:	add	r6, r6, #1
   29af8:	str	r3, [ip, r2, lsl #2]
   29afc:	mov	r2, r6
   29b00:	ldr	r1, [r8]
   29b04:	cmp	r1, r6
   29b08:	bhi	29af0 <__assert_fail@plt+0x18598>
   29b0c:	ldrb	r3, [r5, #28]
   29b10:	bfi	r3, r7, #1, #2
   29b14:	and	r2, r3, #6
   29b18:	cmp	r2, #0
   29b1c:	strb	r3, [r5, #28]
   29b20:	beq	29a30 <__assert_fail@plt+0x184d8>
   29b24:	ldr	r3, [r9, #4]
   29b28:	sub	r4, r3, r4
   29b2c:	b	29a34 <__assert_fail@plt+0x184dc>
   29b30:	mov	sl, #1
   29b34:	mov	r0, #8
   29b38:	mov	r6, sl
   29b3c:	mov	r8, #0
   29b40:	b	299ec <__assert_fail@plt+0x18494>
   29b44:	lsl	r7, sl, #2
   29b48:	str	sl, [sp, #32]
   29b4c:	mov	r0, r7
   29b50:	bl	2cd58 <__assert_fail@plt+0x1b800>
   29b54:	cmp	r0, #0
   29b58:	str	r0, [r8, #4]
   29b5c:	ldr	r3, [sp, #32]
   29b60:	beq	29c50 <__assert_fail@plt+0x186f8>
   29b64:	mov	r0, r7
   29b68:	str	r3, [sp, #32]
   29b6c:	bl	2cd58 <__assert_fail@plt+0x1b800>
   29b70:	ldr	r3, [sp, #32]
   29b74:	cmp	r0, #0
   29b78:	mov	r7, r0
   29b7c:	movne	r7, #1
   29b80:	str	r0, [r8, #8]
   29b84:	strne	r3, [r8]
   29b88:	bne	29a9c <__assert_fail@plt+0x18544>
   29b8c:	ldr	r0, [r8, #4]
   29b90:	bl	13e1c <__assert_fail@plt+0x28c4>
   29b94:	b	29b0c <__assert_fail@plt+0x185b4>
   29b98:	mvn	r4, #0
   29b9c:	b	29a50 <__assert_fail@plt+0x184f8>
   29ba0:	mvn	r4, #1
   29ba4:	b	29a3c <__assert_fail@plt+0x184e4>
   29ba8:	ldr	sl, [r8]
   29bac:	cmp	sl, r1
   29bb0:	bhi	299e0 <__assert_fail@plt+0x18488>
   29bb4:	cmp	sl, #0
   29bb8:	mov	r6, sl
   29bbc:	bgt	299e8 <__assert_fail@plt+0x18490>
   29bc0:	mov	sl, #1
   29bc4:	mov	r8, r3
   29bc8:	mov	r6, sl
   29bcc:	mov	r0, #8
   29bd0:	b	299ec <__assert_fail@plt+0x18494>
   29bd4:	ldr	r3, [r8]
   29bd8:	cmp	r3, sl
   29bdc:	bcs	29a9c <__assert_fail@plt+0x18544>
   29be0:	lsl	r3, sl, #2
   29be4:	ldr	r0, [r8, #4]
   29be8:	mov	r1, r3
   29bec:	str	r3, [sp, #36]	; 0x24
   29bf0:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   29bf4:	subs	r2, r0, #0
   29bf8:	str	r2, [sp, #32]
   29bfc:	beq	29c50 <__assert_fail@plt+0x186f8>
   29c00:	ldr	r3, [sp, #36]	; 0x24
   29c04:	ldr	r0, [r8, #8]
   29c08:	mov	r1, r3
   29c0c:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   29c10:	ldr	r2, [sp, #32]
   29c14:	subs	r1, r0, #0
   29c18:	movne	r3, sl
   29c1c:	strne	sl, [r8]
   29c20:	strne	r1, [r8, #8]
   29c24:	strne	r2, [r8, #4]
   29c28:	bne	29a9c <__assert_fail@plt+0x18544>
   29c2c:	mov	r0, r2
   29c30:	str	r1, [sp, #32]
   29c34:	bl	13e1c <__assert_fail@plt+0x28c4>
   29c38:	ldr	r1, [sp, #32]
   29c3c:	mov	r7, r1
   29c40:	b	29b0c <__assert_fail@plt+0x185b4>
   29c44:	mov	r6, #0
   29c48:	mov	r2, r6
   29c4c:	b	29adc <__assert_fail@plt+0x18584>
   29c50:	mov	r7, #0
   29c54:	b	29b0c <__assert_fail@plt+0x185b4>
   29c58:	str	r4, [sp, #-8]!
   29c5c:	mov	r4, #0
   29c60:	str	lr, [sp, #4]
   29c64:	sub	sp, sp, #16
   29c68:	ldr	lr, [sp, #24]
   29c6c:	ldr	ip, [sp, #28]
   29c70:	str	lr, [sp]
   29c74:	str	r4, [sp, #12]
   29c78:	stmib	sp, {r2, ip}
   29c7c:	bl	291c8 <__assert_fail@plt+0x17c70>
   29c80:	add	sp, sp, #16
   29c84:	ldr	r4, [sp]
   29c88:	add	sp, sp, #4
   29c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   29c90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   29c94:	strd	r6, [sp, #8]
   29c98:	mov	r7, r3
   29c9c:	strd	r8, [sp, #16]
   29ca0:	str	sl, [sp, #24]
   29ca4:	str	lr, [sp, #28]
   29ca8:	sub	sp, sp, #24
   29cac:	ldr	r5, [sp, #56]	; 0x38
   29cb0:	ldr	r6, [sp, #68]	; 0x44
   29cb4:	orr	r3, r5, r2
   29cb8:	orrs	r3, r3, r6
   29cbc:	bmi	29d78 <__assert_fail@plt+0x18820>
   29cc0:	adds	r9, r2, r5
   29cc4:	mov	r4, r2
   29cc8:	bvs	29d78 <__assert_fail@plt+0x18820>
   29ccc:	cmp	r5, #0
   29cd0:	mov	sl, r0
   29cd4:	beq	29d80 <__assert_fail@plt+0x18828>
   29cd8:	cmp	r2, #0
   29cdc:	str	r1, [sp, #20]
   29ce0:	moveq	r8, r2
   29ce4:	bne	29d44 <__assert_fail@plt+0x187ec>
   29ce8:	ldr	r0, [sp, #64]	; 0x40
   29cec:	mov	r3, #1
   29cf0:	mov	ip, #0
   29cf4:	mov	r2, r9
   29cf8:	mov	r1, r7
   29cfc:	str	ip, [sp]
   29d00:	str	r6, [sp, #4]
   29d04:	str	r0, [sp, #8]
   29d08:	mov	r0, sl
   29d0c:	str	r3, [sp, #12]
   29d10:	ldr	r3, [sp, #60]	; 0x3c
   29d14:	bl	291c8 <__assert_fail@plt+0x17c70>
   29d18:	mov	r4, r0
   29d1c:	mov	r0, r8
   29d20:	bl	13e1c <__assert_fail@plt+0x28c4>
   29d24:	mov	r0, r4
   29d28:	add	sp, sp, #24
   29d2c:	ldrd	r4, [sp]
   29d30:	ldrd	r6, [sp, #8]
   29d34:	ldrd	r8, [sp, #16]
   29d38:	ldr	sl, [sp, #24]
   29d3c:	add	sp, sp, #28
   29d40:	pop	{pc}		; (ldr pc, [sp], #4)
   29d44:	mov	r0, r9
   29d48:	bl	2cd58 <__assert_fail@plt+0x1b800>
   29d4c:	subs	r8, r0, #0
   29d50:	beq	29d78 <__assert_fail@plt+0x18820>
   29d54:	mov	r2, r4
   29d58:	ldr	r1, [sp, #20]
   29d5c:	bl	11264 <memcpy@plt>
   29d60:	mov	r1, r7
   29d64:	mov	r2, r5
   29d68:	add	r0, r8, r4
   29d6c:	mov	r7, r8
   29d70:	bl	11264 <memcpy@plt>
   29d74:	b	29ce8 <__assert_fail@plt+0x18790>
   29d78:	mvn	r4, #1
   29d7c:	b	29d24 <__assert_fail@plt+0x187cc>
   29d80:	mov	r7, r1
   29d84:	mov	r8, r5
   29d88:	b	29ce8 <__assert_fail@plt+0x18790>
   29d8c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   29d90:	strd	r6, [sp, #8]
   29d94:	mov	r7, r3
   29d98:	strd	r8, [sp, #16]
   29d9c:	str	sl, [sp, #24]
   29da0:	str	lr, [sp, #28]
   29da4:	sub	sp, sp, #24
   29da8:	ldr	r5, [sp, #56]	; 0x38
   29dac:	ldr	r6, [sp, #72]	; 0x48
   29db0:	orr	r3, r5, r2
   29db4:	orrs	r3, r3, r6
   29db8:	bmi	29e70 <__assert_fail@plt+0x18918>
   29dbc:	adds	r9, r2, r5
   29dc0:	mov	r4, r2
   29dc4:	bvs	29e70 <__assert_fail@plt+0x18918>
   29dc8:	cmp	r5, #0
   29dcc:	mov	sl, r0
   29dd0:	beq	29e78 <__assert_fail@plt+0x18920>
   29dd4:	cmp	r2, #0
   29dd8:	str	r1, [sp, #20]
   29ddc:	moveq	r8, r2
   29de0:	bne	29e3c <__assert_fail@plt+0x188e4>
   29de4:	ldr	r3, [sp, #64]	; 0x40
   29de8:	mov	ip, #0
   29dec:	mov	r2, r9
   29df0:	mov	r1, r7
   29df4:	mov	r0, sl
   29df8:	stm	sp, {r3, r6}
   29dfc:	ldr	r3, [sp, #68]	; 0x44
   29e00:	str	ip, [sp, #12]
   29e04:	str	r3, [sp, #8]
   29e08:	ldr	r3, [sp, #60]	; 0x3c
   29e0c:	bl	291c8 <__assert_fail@plt+0x17c70>
   29e10:	mov	r4, r0
   29e14:	mov	r0, r8
   29e18:	bl	13e1c <__assert_fail@plt+0x28c4>
   29e1c:	mov	r0, r4
   29e20:	add	sp, sp, #24
   29e24:	ldrd	r4, [sp]
   29e28:	ldrd	r6, [sp, #8]
   29e2c:	ldrd	r8, [sp, #16]
   29e30:	ldr	sl, [sp, #24]
   29e34:	add	sp, sp, #28
   29e38:	pop	{pc}		; (ldr pc, [sp], #4)
   29e3c:	mov	r0, r9
   29e40:	bl	2cd58 <__assert_fail@plt+0x1b800>
   29e44:	subs	r8, r0, #0
   29e48:	beq	29e70 <__assert_fail@plt+0x18918>
   29e4c:	mov	r2, r4
   29e50:	ldr	r1, [sp, #20]
   29e54:	bl	11264 <memcpy@plt>
   29e58:	mov	r1, r7
   29e5c:	mov	r2, r5
   29e60:	add	r0, r8, r4
   29e64:	mov	r7, r8
   29e68:	bl	11264 <memcpy@plt>
   29e6c:	b	29de4 <__assert_fail@plt+0x1888c>
   29e70:	mvn	r4, #1
   29e74:	b	29e1c <__assert_fail@plt+0x188c4>
   29e78:	mov	r7, r1
   29e7c:	mov	r8, r5
   29e80:	b	29de4 <__assert_fail@plt+0x1888c>
   29e84:	cmp	r2, #0
   29e88:	beq	29eb0 <__assert_fail@plt+0x18958>
   29e8c:	ldrb	ip, [r0, #28]
   29e90:	push	{lr}		; (str lr, [sp, #-4]!)
   29e94:	mov	lr, #1
   29e98:	bfi	ip, lr, #1, #2
   29e9c:	strb	ip, [r0, #28]
   29ea0:	strd	r2, [r1]
   29ea4:	ldr	r3, [sp, #4]
   29ea8:	str	r3, [r1, #8]
   29eac:	pop	{pc}		; (ldr pc, [sp], #4)
   29eb0:	ldrb	r3, [r0, #28]
   29eb4:	bfi	r3, r2, #1, #2
   29eb8:	strb	r3, [r0, #28]
   29ebc:	str	r2, [r1]
   29ec0:	str	r2, [r1, #4]
   29ec4:	str	r2, [r1, #8]
   29ec8:	bx	lr
   29ecc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   29ed0:	mov	r5, #0
   29ed4:	movt	r5, #32752	; 0x7ff0
   29ed8:	mov	r4, r2
   29edc:	strd	r6, [sp, #8]
   29ee0:	mov	r7, r1
   29ee4:	str	r8, [sp, #16]
   29ee8:	mov	r8, r0
   29eec:	str	lr, [sp, #20]
   29ef0:	mov	r2, r4
   29ef4:	mov	r1, r7
   29ef8:	mov	r0, r8
   29efc:	bl	11204 <read@plt>
   29f00:	subs	r6, r0, #0
   29f04:	bge	29f38 <__assert_fail@plt+0x189e0>
   29f08:	bl	1142c <__errno_location@plt>
   29f0c:	ldr	r3, [r0]
   29f10:	cmp	r3, #4
   29f14:	beq	29ef0 <__assert_fail@plt+0x18998>
   29f18:	cmp	r4, r5
   29f1c:	mov	r4, r5
   29f20:	movls	r2, #0
   29f24:	movhi	r2, #1
   29f28:	cmp	r3, #22
   29f2c:	movne	r2, #0
   29f30:	cmp	r2, #0
   29f34:	bne	29ef0 <__assert_fail@plt+0x18998>
   29f38:	mov	r0, r6
   29f3c:	ldrd	r4, [sp]
   29f40:	ldrd	r6, [sp, #8]
   29f44:	ldr	r8, [sp, #16]
   29f48:	add	sp, sp, #20
   29f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   29f50:	mov	r2, #3
   29f54:	mov	r1, #0
   29f58:	b	2cf40 <__assert_fail@plt+0x1b9e8>
   29f5c:	cmp	r1, #0
   29f60:	strd	r4, [sp, #-16]!
   29f64:	mov	ip, r3
   29f68:	str	r6, [sp, #8]
   29f6c:	mov	r4, r0
   29f70:	str	lr, [sp, #12]
   29f74:	sub	sp, sp, #32
   29f78:	ldr	r5, [sp, #48]	; 0x30
   29f7c:	ldr	r6, [sp, #52]	; 0x34
   29f80:	beq	2a0c4 <__assert_fail@plt+0x18b6c>
   29f84:	mov	r3, r1
   29f88:	mov	r1, #1
   29f8c:	stm	sp, {r2, ip}
   29f90:	movw	r2, #58816	; 0xe5c0
   29f94:	movt	r2, #2
   29f98:	bl	1148c <__fprintf_chk@plt>
   29f9c:	mov	r2, #5
   29fa0:	movw	r1, #58836	; 0xe5d4
   29fa4:	movt	r1, #2
   29fa8:	mov	r0, #0
   29fac:	bl	112d0 <dcgettext@plt>
   29fb0:	movw	ip, #2022	; 0x7e6
   29fb4:	mov	r3, r0
   29fb8:	mov	r1, #1
   29fbc:	movw	r2, #59564	; 0xe8ac
   29fc0:	movt	r2, #2
   29fc4:	mov	r0, r4
   29fc8:	str	ip, [sp]
   29fcc:	bl	1148c <__fprintf_chk@plt>
   29fd0:	mov	r1, r4
   29fd4:	mov	r0, #10
   29fd8:	bl	112c4 <fputc_unlocked@plt>
   29fdc:	mov	r2, #5
   29fe0:	movw	r1, #58840	; 0xe5d8
   29fe4:	movt	r1, #2
   29fe8:	mov	r0, #0
   29fec:	bl	112d0 <dcgettext@plt>
   29ff0:	mov	r2, r0
   29ff4:	mov	r1, #1
   29ff8:	movw	r3, #59012	; 0xe684
   29ffc:	movt	r3, #2
   2a000:	mov	r0, r4
   2a004:	bl	1148c <__fprintf_chk@plt>
   2a008:	mov	r1, r4
   2a00c:	mov	r0, #10
   2a010:	bl	112c4 <fputc_unlocked@plt>
   2a014:	cmp	r6, #9
   2a018:	ldrls	pc, [pc, r6, lsl #2]
   2a01c:	b	2a330 <__assert_fail@plt+0x18dd8>
   2a020:	strheq	sl, [r2], -r0
   2a024:	andeq	sl, r2, r0, ror #1
   2a028:	andeq	sl, r2, ip, lsl r1
   2a02c:	andeq	sl, r2, ip, asr r1
   2a030:	andeq	sl, r2, r4, lsr #3
   2a034:	ldrdeq	sl, [r2], -ip
   2a038:	andeq	sl, r2, r4, lsr #4
   2a03c:	andeq	sl, r2, r8, ror r2
   2a040:	ldrdeq	sl, [r2], -r0
   2a044:	andeq	sl, r2, r8, asr #32
   2a048:	movw	r1, #59316	; 0xe7b4
   2a04c:	movt	r1, #2
   2a050:	mov	r2, #5
   2a054:	mov	r0, #0
   2a058:	bl	112d0 <dcgettext@plt>
   2a05c:	ldr	lr, [r5, #4]
   2a060:	mov	r2, r0
   2a064:	mov	r1, #1
   2a068:	mov	r0, r4
   2a06c:	ldr	r3, [r5, #8]
   2a070:	ldr	ip, [r5, #32]
   2a074:	str	lr, [sp]
   2a078:	ldr	lr, [r5, #12]
   2a07c:	str	ip, [sp, #28]
   2a080:	ldr	ip, [r5, #28]
   2a084:	str	r3, [sp, #4]
   2a088:	ldr	r3, [r5, #16]
   2a08c:	str	lr, [sp, #8]
   2a090:	ldr	lr, [r5, #20]
   2a094:	str	ip, [sp, #24]
   2a098:	ldr	ip, [r5, #24]
   2a09c:	str	r3, [sp, #12]
   2a0a0:	ldr	r3, [r5]
   2a0a4:	str	lr, [sp, #16]
   2a0a8:	str	ip, [sp, #20]
   2a0ac:	bl	1148c <__fprintf_chk@plt>
   2a0b0:	add	sp, sp, #32
   2a0b4:	ldrd	r4, [sp]
   2a0b8:	ldr	r6, [sp, #8]
   2a0bc:	add	sp, sp, #12
   2a0c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2a0c4:	mov	r3, r2
   2a0c8:	mov	r1, #1
   2a0cc:	str	ip, [sp]
   2a0d0:	movw	r2, #58828	; 0xe5cc
   2a0d4:	movt	r2, #2
   2a0d8:	bl	1148c <__fprintf_chk@plt>
   2a0dc:	b	29f9c <__assert_fail@plt+0x18a44>
   2a0e0:	mov	r2, #5
   2a0e4:	movw	r1, #59048	; 0xe6a8
   2a0e8:	movt	r1, #2
   2a0ec:	mov	r0, #0
   2a0f0:	bl	112d0 <dcgettext@plt>
   2a0f4:	ldr	r3, [r5]
   2a0f8:	mov	r2, r0
   2a0fc:	mov	r1, #1
   2a100:	mov	r0, r4
   2a104:	add	sp, sp, #32
   2a108:	ldrd	r4, [sp]
   2a10c:	ldr	r6, [sp, #8]
   2a110:	ldr	lr, [sp, #12]
   2a114:	add	sp, sp, #16
   2a118:	b	1148c <__fprintf_chk@plt>
   2a11c:	mov	r2, #5
   2a120:	movw	r1, #59064	; 0xe6b8
   2a124:	movt	r1, #2
   2a128:	mov	r0, #0
   2a12c:	bl	112d0 <dcgettext@plt>
   2a130:	ldm	r5, {r3, ip}
   2a134:	mov	r2, r0
   2a138:	mov	r1, #1
   2a13c:	mov	r0, r4
   2a140:	str	ip, [sp, #48]	; 0x30
   2a144:	add	sp, sp, #32
   2a148:	ldrd	r4, [sp]
   2a14c:	ldr	r6, [sp, #8]
   2a150:	ldr	lr, [sp, #12]
   2a154:	add	sp, sp, #16
   2a158:	b	1148c <__fprintf_chk@plt>
   2a15c:	mov	r2, #5
   2a160:	movw	r1, #59088	; 0xe6d0
   2a164:	movt	r1, #2
   2a168:	mov	r0, #0
   2a16c:	bl	112d0 <dcgettext@plt>
   2a170:	ldm	r5, {r3, lr}
   2a174:	mov	r2, r0
   2a178:	mov	r1, #1
   2a17c:	mov	r0, r4
   2a180:	ldr	ip, [r5, #8]
   2a184:	str	lr, [sp, #48]	; 0x30
   2a188:	str	ip, [sp, #52]	; 0x34
   2a18c:	add	sp, sp, #32
   2a190:	ldrd	r4, [sp]
   2a194:	ldr	r6, [sp, #8]
   2a198:	ldr	lr, [sp, #12]
   2a19c:	add	sp, sp, #16
   2a1a0:	b	1148c <__fprintf_chk@plt>
   2a1a4:	mov	r2, #5
   2a1a8:	movw	r1, #59116	; 0xe6ec
   2a1ac:	movt	r1, #2
   2a1b0:	mov	r0, #0
   2a1b4:	bl	112d0 <dcgettext@plt>
   2a1b8:	ldmib	r5, {r3, ip, lr}
   2a1bc:	mov	r2, r0
   2a1c0:	mov	r1, #1
   2a1c4:	mov	r0, r4
   2a1c8:	str	r3, [sp]
   2a1cc:	ldr	r3, [r5]
   2a1d0:	stmib	sp, {ip, lr}
   2a1d4:	bl	1148c <__fprintf_chk@plt>
   2a1d8:	b	2a0b0 <__assert_fail@plt+0x18b58>
   2a1dc:	mov	r2, #5
   2a1e0:	movw	r1, #59148	; 0xe70c
   2a1e4:	movt	r1, #2
   2a1e8:	mov	r0, #0
   2a1ec:	bl	112d0 <dcgettext@plt>
   2a1f0:	ldmib	r5, {ip, lr}
   2a1f4:	mov	r2, r0
   2a1f8:	mov	r1, #1
   2a1fc:	mov	r0, r4
   2a200:	ldr	r3, [r5, #16]
   2a204:	str	ip, [sp]
   2a208:	ldr	ip, [r5, #12]
   2a20c:	str	r3, [sp, #12]
   2a210:	ldr	r3, [r5]
   2a214:	str	lr, [sp, #4]
   2a218:	str	ip, [sp, #8]
   2a21c:	bl	1148c <__fprintf_chk@plt>
   2a220:	b	2a0b0 <__assert_fail@plt+0x18b58>
   2a224:	mov	r2, #5
   2a228:	movw	r1, #59184	; 0xe730
   2a22c:	movt	r1, #2
   2a230:	mov	r0, #0
   2a234:	bl	112d0 <dcgettext@plt>
   2a238:	ldr	lr, [r5, #4]
   2a23c:	mov	r2, r0
   2a240:	mov	r1, #1
   2a244:	mov	r0, r4
   2a248:	ldr	r3, [r5, #8]
   2a24c:	ldr	ip, [r5, #20]
   2a250:	str	lr, [sp]
   2a254:	ldr	lr, [r5, #12]
   2a258:	str	ip, [sp, #16]
   2a25c:	ldr	ip, [r5, #16]
   2a260:	str	r3, [sp, #4]
   2a264:	ldr	r3, [r5]
   2a268:	str	lr, [sp, #8]
   2a26c:	str	ip, [sp, #12]
   2a270:	bl	1148c <__fprintf_chk@plt>
   2a274:	b	2a0b0 <__assert_fail@plt+0x18b58>
   2a278:	mov	r2, #5
   2a27c:	movw	r1, #59224	; 0xe758
   2a280:	movt	r1, #2
   2a284:	mov	r0, #0
   2a288:	bl	112d0 <dcgettext@plt>
   2a28c:	ldmib	r5, {r3, ip}
   2a290:	mov	r2, r0
   2a294:	mov	r1, #1
   2a298:	mov	r0, r4
   2a29c:	ldr	lr, [r5, #24]
   2a2a0:	str	r3, [sp]
   2a2a4:	ldr	r3, [r5, #12]
   2a2a8:	str	lr, [sp, #20]
   2a2ac:	ldr	lr, [r5, #20]
   2a2b0:	str	ip, [sp, #4]
   2a2b4:	ldr	ip, [r5, #16]
   2a2b8:	str	r3, [sp, #8]
   2a2bc:	ldr	r3, [r5]
   2a2c0:	str	ip, [sp, #12]
   2a2c4:	str	lr, [sp, #16]
   2a2c8:	bl	1148c <__fprintf_chk@plt>
   2a2cc:	b	2a0b0 <__assert_fail@plt+0x18b58>
   2a2d0:	mov	r2, #5
   2a2d4:	movw	r1, #59268	; 0xe784
   2a2d8:	movt	r1, #2
   2a2dc:	mov	r0, #0
   2a2e0:	bl	112d0 <dcgettext@plt>
   2a2e4:	ldmib	r5, {ip, lr}
   2a2e8:	mov	r2, r0
   2a2ec:	mov	r1, #1
   2a2f0:	mov	r0, r4
   2a2f4:	ldr	r3, [r5, #28]
   2a2f8:	str	ip, [sp]
   2a2fc:	ldr	ip, [r5, #12]
   2a300:	str	r3, [sp, #24]
   2a304:	ldr	r3, [r5, #24]
   2a308:	str	lr, [sp, #4]
   2a30c:	ldr	lr, [r5, #16]
   2a310:	str	ip, [sp, #8]
   2a314:	ldr	ip, [r5, #20]
   2a318:	str	r3, [sp, #20]
   2a31c:	ldr	r3, [r5]
   2a320:	str	lr, [sp, #12]
   2a324:	str	ip, [sp, #16]
   2a328:	bl	1148c <__fprintf_chk@plt>
   2a32c:	b	2a0b0 <__assert_fail@plt+0x18b58>
   2a330:	movw	r1, #59368	; 0xe7e8
   2a334:	movt	r1, #2
   2a338:	b	2a050 <__assert_fail@plt+0x18af8>
   2a33c:	strd	r4, [sp, #-12]!
   2a340:	str	lr, [sp, #8]
   2a344:	sub	sp, sp, #12
   2a348:	ldr	r5, [sp, #24]
   2a34c:	ldr	ip, [r5]
   2a350:	cmp	ip, #0
   2a354:	beq	2a370 <__assert_fail@plt+0x18e18>
   2a358:	mov	lr, r5
   2a35c:	mov	ip, #0
   2a360:	ldr	r4, [lr, #4]!
   2a364:	add	ip, ip, #1
   2a368:	cmp	r4, #0
   2a36c:	bne	2a360 <__assert_fail@plt+0x18e08>
   2a370:	stm	sp, {r5, ip}
   2a374:	bl	29f5c <__assert_fail@plt+0x18a04>
   2a378:	add	sp, sp, #12
   2a37c:	ldrd	r4, [sp]
   2a380:	add	sp, sp, #8
   2a384:	pop	{pc}		; (ldr pc, [sp], #4)
   2a388:	push	{lr}		; (str lr, [sp, #-4]!)
   2a38c:	sub	sp, sp, #52	; 0x34
   2a390:	ldr	ip, [sp, #56]	; 0x38
   2a394:	ldr	lr, [ip]
   2a398:	cmp	lr, #0
   2a39c:	str	lr, [sp, #8]
   2a3a0:	beq	2a438 <__assert_fail@plt+0x18ee0>
   2a3a4:	ldr	lr, [ip, #4]
   2a3a8:	cmp	lr, #0
   2a3ac:	str	lr, [sp, #12]
   2a3b0:	beq	2a44c <__assert_fail@plt+0x18ef4>
   2a3b4:	ldr	lr, [ip, #8]
   2a3b8:	cmp	lr, #0
   2a3bc:	str	lr, [sp, #16]
   2a3c0:	beq	2a454 <__assert_fail@plt+0x18efc>
   2a3c4:	ldr	lr, [ip, #12]
   2a3c8:	cmp	lr, #0
   2a3cc:	str	lr, [sp, #20]
   2a3d0:	beq	2a45c <__assert_fail@plt+0x18f04>
   2a3d4:	ldr	lr, [ip, #16]
   2a3d8:	cmp	lr, #0
   2a3dc:	str	lr, [sp, #24]
   2a3e0:	beq	2a464 <__assert_fail@plt+0x18f0c>
   2a3e4:	ldr	lr, [ip, #20]
   2a3e8:	cmp	lr, #0
   2a3ec:	str	lr, [sp, #28]
   2a3f0:	beq	2a46c <__assert_fail@plt+0x18f14>
   2a3f4:	ldr	lr, [ip, #24]
   2a3f8:	cmp	lr, #0
   2a3fc:	str	lr, [sp, #32]
   2a400:	beq	2a474 <__assert_fail@plt+0x18f1c>
   2a404:	ldr	lr, [ip, #28]
   2a408:	cmp	lr, #0
   2a40c:	str	lr, [sp, #36]	; 0x24
   2a410:	beq	2a47c <__assert_fail@plt+0x18f24>
   2a414:	ldr	lr, [ip, #32]
   2a418:	cmp	lr, #0
   2a41c:	str	lr, [sp, #40]	; 0x28
   2a420:	beq	2a484 <__assert_fail@plt+0x18f2c>
   2a424:	ldr	ip, [ip, #36]	; 0x24
   2a428:	cmp	ip, #0
   2a42c:	str	ip, [sp, #44]	; 0x2c
   2a430:	movne	lr, #10
   2a434:	moveq	lr, #9
   2a438:	add	ip, sp, #8
   2a43c:	stm	sp, {ip, lr}
   2a440:	bl	29f5c <__assert_fail@plt+0x18a04>
   2a444:	add	sp, sp, #52	; 0x34
   2a448:	pop	{pc}		; (ldr pc, [sp], #4)
   2a44c:	mov	lr, #1
   2a450:	b	2a438 <__assert_fail@plt+0x18ee0>
   2a454:	mov	lr, #2
   2a458:	b	2a438 <__assert_fail@plt+0x18ee0>
   2a45c:	mov	lr, #3
   2a460:	b	2a438 <__assert_fail@plt+0x18ee0>
   2a464:	mov	lr, #4
   2a468:	b	2a438 <__assert_fail@plt+0x18ee0>
   2a46c:	mov	lr, #5
   2a470:	b	2a438 <__assert_fail@plt+0x18ee0>
   2a474:	mov	lr, #6
   2a478:	b	2a438 <__assert_fail@plt+0x18ee0>
   2a47c:	mov	lr, #7
   2a480:	b	2a438 <__assert_fail@plt+0x18ee0>
   2a484:	mov	lr, #8
   2a488:	b	2a438 <__assert_fail@plt+0x18ee0>
   2a48c:	push	{r3}		; (str r3, [sp, #-4]!)
   2a490:	push	{lr}		; (str lr, [sp, #-4]!)
   2a494:	sub	sp, sp, #56	; 0x38
   2a498:	ldr	ip, [sp, #64]	; 0x40
   2a49c:	add	r3, sp, #64	; 0x40
   2a4a0:	str	r3, [sp, #12]
   2a4a4:	cmp	ip, #0
   2a4a8:	str	ip, [sp, #16]
   2a4ac:	beq	2a544 <__assert_fail@plt+0x18fec>
   2a4b0:	ldr	ip, [sp, #68]	; 0x44
   2a4b4:	cmp	ip, #0
   2a4b8:	str	ip, [sp, #20]
   2a4bc:	beq	2a568 <__assert_fail@plt+0x19010>
   2a4c0:	ldr	ip, [sp, #72]	; 0x48
   2a4c4:	cmp	ip, #0
   2a4c8:	str	ip, [sp, #24]
   2a4cc:	beq	2a570 <__assert_fail@plt+0x19018>
   2a4d0:	ldr	ip, [sp, #76]	; 0x4c
   2a4d4:	cmp	ip, #0
   2a4d8:	str	ip, [sp, #28]
   2a4dc:	beq	2a578 <__assert_fail@plt+0x19020>
   2a4e0:	ldr	ip, [sp, #80]	; 0x50
   2a4e4:	cmp	ip, #0
   2a4e8:	str	ip, [sp, #32]
   2a4ec:	beq	2a580 <__assert_fail@plt+0x19028>
   2a4f0:	ldr	ip, [sp, #84]	; 0x54
   2a4f4:	cmp	ip, #0
   2a4f8:	str	ip, [sp, #36]	; 0x24
   2a4fc:	beq	2a588 <__assert_fail@plt+0x19030>
   2a500:	ldr	ip, [sp, #88]	; 0x58
   2a504:	cmp	ip, #0
   2a508:	str	ip, [sp, #40]	; 0x28
   2a50c:	beq	2a590 <__assert_fail@plt+0x19038>
   2a510:	ldr	ip, [sp, #92]	; 0x5c
   2a514:	cmp	ip, #0
   2a518:	str	ip, [sp, #44]	; 0x2c
   2a51c:	beq	2a598 <__assert_fail@plt+0x19040>
   2a520:	ldr	ip, [sp, #96]	; 0x60
   2a524:	cmp	ip, #0
   2a528:	str	ip, [sp, #48]	; 0x30
   2a52c:	beq	2a5a0 <__assert_fail@plt+0x19048>
   2a530:	ldr	r3, [sp, #100]	; 0x64
   2a534:	cmp	r3, #0
   2a538:	str	r3, [sp, #52]	; 0x34
   2a53c:	movne	ip, #10
   2a540:	moveq	ip, #9
   2a544:	ldr	r3, [sp, #60]	; 0x3c
   2a548:	add	lr, sp, #16
   2a54c:	str	lr, [sp]
   2a550:	str	ip, [sp, #4]
   2a554:	bl	29f5c <__assert_fail@plt+0x18a04>
   2a558:	add	sp, sp, #56	; 0x38
   2a55c:	pop	{lr}		; (ldr lr, [sp], #4)
   2a560:	add	sp, sp, #4
   2a564:	bx	lr
   2a568:	mov	ip, #1
   2a56c:	b	2a544 <__assert_fail@plt+0x18fec>
   2a570:	mov	ip, #2
   2a574:	b	2a544 <__assert_fail@plt+0x18fec>
   2a578:	mov	ip, #3
   2a57c:	b	2a544 <__assert_fail@plt+0x18fec>
   2a580:	mov	ip, #4
   2a584:	b	2a544 <__assert_fail@plt+0x18fec>
   2a588:	mov	ip, #5
   2a58c:	b	2a544 <__assert_fail@plt+0x18fec>
   2a590:	mov	ip, #6
   2a594:	b	2a544 <__assert_fail@plt+0x18fec>
   2a598:	mov	ip, #7
   2a59c:	b	2a544 <__assert_fail@plt+0x18fec>
   2a5a0:	mov	ip, #8
   2a5a4:	b	2a544 <__assert_fail@plt+0x18fec>
   2a5a8:	movw	r3, #61884	; 0xf1bc
   2a5ac:	movt	r3, #3
   2a5b0:	str	r4, [sp, #-8]!
   2a5b4:	mov	r0, #10
   2a5b8:	ldr	r1, [r3]
   2a5bc:	str	lr, [sp, #4]
   2a5c0:	bl	112c4 <fputc_unlocked@plt>
   2a5c4:	mov	r2, #5
   2a5c8:	movw	r1, #59428	; 0xe824
   2a5cc:	movt	r1, #2
   2a5d0:	mov	r0, #0
   2a5d4:	bl	112d0 <dcgettext@plt>
   2a5d8:	mov	r1, r0
   2a5dc:	movw	r2, #59448	; 0xe838
   2a5e0:	movt	r2, #2
   2a5e4:	mov	r0, #1
   2a5e8:	bl	11474 <__printf_chk@plt>
   2a5ec:	mov	r2, #5
   2a5f0:	movw	r1, #59472	; 0xe850
   2a5f4:	movt	r1, #2
   2a5f8:	mov	r0, #0
   2a5fc:	bl	112d0 <dcgettext@plt>
   2a600:	mov	r1, r0
   2a604:	movw	r3, #56604	; 0xdd1c
   2a608:	movt	r3, #2
   2a60c:	movw	r2, #56644	; 0xdd44
   2a610:	movt	r2, #2
   2a614:	mov	r0, #1
   2a618:	bl	11474 <__printf_chk@plt>
   2a61c:	mov	r2, #5
   2a620:	movw	r1, #59492	; 0xe864
   2a624:	movt	r1, #2
   2a628:	mov	r0, #0
   2a62c:	bl	112d0 <dcgettext@plt>
   2a630:	mov	r1, r0
   2a634:	movw	r2, #59532	; 0xe88c
   2a638:	movt	r2, #2
   2a63c:	mov	r0, #1
   2a640:	ldr	r4, [sp]
   2a644:	ldr	lr, [sp, #4]
   2a648:	add	sp, sp, #8
   2a64c:	b	11474 <__printf_chk@plt>
   2a650:	strd	r4, [sp, #-16]!
   2a654:	mov	r4, r0
   2a658:	mov	r5, r2
   2a65c:	str	r6, [sp, #8]
   2a660:	mov	r6, r1
   2a664:	str	lr, [sp, #12]
   2a668:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a66c:	cmp	r0, #0
   2a670:	beq	2a684 <__assert_fail@plt+0x1912c>
   2a674:	ldrd	r4, [sp]
   2a678:	ldr	r6, [sp, #8]
   2a67c:	add	sp, sp, #12
   2a680:	pop	{pc}		; (ldr pc, [sp], #4)
   2a684:	cmp	r4, #0
   2a688:	beq	2a698 <__assert_fail@plt+0x19140>
   2a68c:	cmp	r6, #0
   2a690:	cmpne	r5, #0
   2a694:	beq	2a674 <__assert_fail@plt+0x1911c>
   2a698:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a69c:	str	r4, [sp, #-8]!
   2a6a0:	str	lr, [sp, #4]
   2a6a4:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2a6a8:	cmp	r0, #0
   2a6ac:	beq	2a6bc <__assert_fail@plt+0x19164>
   2a6b0:	ldr	r4, [sp]
   2a6b4:	add	sp, sp, #4
   2a6b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a6bc:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a6c0:	str	r4, [sp, #-8]!
   2a6c4:	str	lr, [sp, #4]
   2a6c8:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2a6cc:	cmp	r0, #0
   2a6d0:	beq	2a6e0 <__assert_fail@plt+0x19188>
   2a6d4:	ldr	r4, [sp]
   2a6d8:	add	sp, sp, #4
   2a6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a6e0:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a6e4:	str	r4, [sp, #-8]!
   2a6e8:	str	lr, [sp, #4]
   2a6ec:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2a6f0:	cmp	r0, #0
   2a6f4:	beq	2a704 <__assert_fail@plt+0x191ac>
   2a6f8:	ldr	r4, [sp]
   2a6fc:	add	sp, sp, #4
   2a700:	pop	{pc}		; (ldr pc, [sp], #4)
   2a704:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a708:	strd	r4, [sp, #-16]!
   2a70c:	mov	r5, r0
   2a710:	mov	r4, r1
   2a714:	str	r6, [sp, #8]
   2a718:	str	lr, [sp, #12]
   2a71c:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   2a720:	cmp	r0, #0
   2a724:	beq	2a738 <__assert_fail@plt+0x191e0>
   2a728:	ldrd	r4, [sp]
   2a72c:	ldr	r6, [sp, #8]
   2a730:	add	sp, sp, #12
   2a734:	pop	{pc}		; (ldr pc, [sp], #4)
   2a738:	adds	r4, r4, #0
   2a73c:	movne	r4, #1
   2a740:	cmp	r5, #0
   2a744:	moveq	r4, #1
   2a748:	cmp	r4, #0
   2a74c:	beq	2a728 <__assert_fail@plt+0x191d0>
   2a750:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a754:	cmp	r1, #0
   2a758:	orreq	r1, r1, #1
   2a75c:	str	r4, [sp, #-8]!
   2a760:	str	lr, [sp, #4]
   2a764:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   2a768:	cmp	r0, #0
   2a76c:	beq	2a77c <__assert_fail@plt+0x19224>
   2a770:	ldr	r4, [sp]
   2a774:	add	sp, sp, #4
   2a778:	pop	{pc}		; (ldr pc, [sp], #4)
   2a77c:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a780:	strd	r4, [sp, #-16]!
   2a784:	mov	r4, r0
   2a788:	mov	r5, r2
   2a78c:	str	r6, [sp, #8]
   2a790:	mov	r6, r1
   2a794:	str	lr, [sp, #12]
   2a798:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a79c:	cmp	r0, #0
   2a7a0:	beq	2a7b4 <__assert_fail@plt+0x1925c>
   2a7a4:	ldrd	r4, [sp]
   2a7a8:	ldr	r6, [sp, #8]
   2a7ac:	add	sp, sp, #12
   2a7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2a7b4:	cmp	r4, #0
   2a7b8:	beq	2a7c8 <__assert_fail@plt+0x19270>
   2a7bc:	cmp	r6, #0
   2a7c0:	cmpne	r5, #0
   2a7c4:	beq	2a7a4 <__assert_fail@plt+0x1924c>
   2a7c8:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a7cc:	cmp	r2, #0
   2a7d0:	cmpne	r1, #0
   2a7d4:	str	r4, [sp, #-8]!
   2a7d8:	moveq	r2, #1
   2a7dc:	str	lr, [sp, #4]
   2a7e0:	moveq	r1, r2
   2a7e4:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a7e8:	cmp	r0, #0
   2a7ec:	beq	2a7fc <__assert_fail@plt+0x192a4>
   2a7f0:	ldr	r4, [sp]
   2a7f4:	add	sp, sp, #4
   2a7f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a7fc:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a800:	mov	r2, r1
   2a804:	mov	r1, r0
   2a808:	str	r4, [sp, #-8]!
   2a80c:	mov	r0, #0
   2a810:	str	lr, [sp, #4]
   2a814:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a818:	cmp	r0, #0
   2a81c:	beq	2a82c <__assert_fail@plt+0x192d4>
   2a820:	ldr	r4, [sp]
   2a824:	add	sp, sp, #4
   2a828:	pop	{pc}		; (ldr pc, [sp], #4)
   2a82c:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a830:	cmp	r1, #0
   2a834:	cmpne	r0, #0
   2a838:	str	r4, [sp, #-8]!
   2a83c:	moveq	r2, #1
   2a840:	movne	r2, r1
   2a844:	str	lr, [sp, #4]
   2a848:	movne	r1, r0
   2a84c:	moveq	r1, r2
   2a850:	mov	r0, #0
   2a854:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a858:	cmp	r0, #0
   2a85c:	beq	2a86c <__assert_fail@plt+0x19314>
   2a860:	ldr	r4, [sp]
   2a864:	add	sp, sp, #4
   2a868:	pop	{pc}		; (ldr pc, [sp], #4)
   2a86c:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a870:	cmp	r0, #0
   2a874:	strd	r4, [sp, #-16]!
   2a878:	mov	r5, r1
   2a87c:	ldr	r4, [r1]
   2a880:	str	r6, [sp, #8]
   2a884:	str	lr, [sp, #12]
   2a888:	beq	2a8d0 <__assert_fail@plt+0x19378>
   2a88c:	lsr	r3, r4, #1
   2a890:	add	r3, r3, #1
   2a894:	adds	r4, r4, r3
   2a898:	bcs	2a8cc <__assert_fail@plt+0x19374>
   2a89c:	mov	r2, #1
   2a8a0:	mov	r1, r4
   2a8a4:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a8a8:	cmp	r0, #0
   2a8ac:	beq	2a8c4 <__assert_fail@plt+0x1936c>
   2a8b0:	ldr	r6, [sp, #8]
   2a8b4:	str	r4, [r5]
   2a8b8:	ldrd	r4, [sp]
   2a8bc:	add	sp, sp, #12
   2a8c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2a8c4:	cmp	r4, #0
   2a8c8:	beq	2a8b0 <__assert_fail@plt+0x19358>
   2a8cc:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a8d0:	cmp	r4, #0
   2a8d4:	mov	r2, #1
   2a8d8:	moveq	r4, #64	; 0x40
   2a8dc:	mov	r1, r4
   2a8e0:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a8e4:	cmp	r0, #0
   2a8e8:	bne	2a8b0 <__assert_fail@plt+0x19358>
   2a8ec:	b	2a8cc <__assert_fail@plt+0x19374>
   2a8f0:	cmp	r0, #0
   2a8f4:	strd	r4, [sp, #-16]!
   2a8f8:	mov	r5, r1
   2a8fc:	ldr	r4, [r1]
   2a900:	str	r6, [sp, #8]
   2a904:	mov	r6, r2
   2a908:	str	lr, [sp, #12]
   2a90c:	beq	2a954 <__assert_fail@plt+0x193fc>
   2a910:	lsr	r3, r4, #1
   2a914:	add	r3, r3, #1
   2a918:	adds	r4, r4, r3
   2a91c:	bcs	2a950 <__assert_fail@plt+0x193f8>
   2a920:	mov	r1, r4
   2a924:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a928:	cmp	r0, #0
   2a92c:	beq	2a944 <__assert_fail@plt+0x193ec>
   2a930:	ldr	r6, [sp, #8]
   2a934:	str	r4, [r5]
   2a938:	ldrd	r4, [sp]
   2a93c:	add	sp, sp, #12
   2a940:	pop	{pc}		; (ldr pc, [sp], #4)
   2a944:	cmp	r4, #0
   2a948:	cmpne	r6, #0
   2a94c:	beq	2a930 <__assert_fail@plt+0x193d8>
   2a950:	bl	12eb4 <__assert_fail@plt+0x195c>
   2a954:	cmp	r4, #0
   2a958:	bne	2a96c <__assert_fail@plt+0x19414>
   2a95c:	mov	r4, #64	; 0x40
   2a960:	udiv	r4, r4, r2
   2a964:	cmp	r2, #64	; 0x40
   2a968:	addhi	r4, r4, #1
   2a96c:	mov	r2, r6
   2a970:	mov	r1, r4
   2a974:	mov	r0, #0
   2a978:	bl	2d1e4 <__assert_fail@plt+0x1bc8c>
   2a97c:	cmp	r0, #0
   2a980:	bne	2a930 <__assert_fail@plt+0x193d8>
   2a984:	b	2a950 <__assert_fail@plt+0x193f8>
   2a988:	ldr	ip, [r1]
   2a98c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a990:	strd	r6, [sp, #8]
   2a994:	mov	r7, r1
   2a998:	mov	r6, r0
   2a99c:	str	r8, [sp, #16]
   2a9a0:	mvn	r8, r3
   2a9a4:	lsr	r8, r8, #31
   2a9a8:	str	lr, [sp, #20]
   2a9ac:	asr	r1, ip, #1
   2a9b0:	ldr	lr, [sp, #24]
   2a9b4:	adds	r4, ip, r1
   2a9b8:	mvnvs	r4, #-2147483648	; 0x80000000
   2a9bc:	cmp	r3, r4
   2a9c0:	movge	r1, #0
   2a9c4:	andlt	r1, r8, #1
   2a9c8:	cmp	r1, #0
   2a9cc:	movne	r4, r3
   2a9d0:	smull	r0, r1, r4, lr
   2a9d4:	cmp	r1, r0, asr #31
   2a9d8:	bne	2aa88 <__assert_fail@plt+0x19530>
   2a9dc:	cmp	r0, #63	; 0x3f
   2a9e0:	mov	r5, r0
   2a9e4:	ble	2aa54 <__assert_fail@plt+0x194fc>
   2a9e8:	cmp	r6, #0
   2a9ec:	sub	r1, r4, ip
   2a9f0:	streq	r6, [r7]
   2a9f4:	cmp	r1, r2
   2a9f8:	bge	2aa28 <__assert_fail@plt+0x194d0>
   2a9fc:	adds	r4, ip, r2
   2aa00:	bvs	2aa84 <__assert_fail@plt+0x1952c>
   2aa04:	cmp	r4, r3
   2aa08:	movle	r3, #0
   2aa0c:	andgt	r3, r8, #1
   2aa10:	cmp	r3, #0
   2aa14:	bne	2aa84 <__assert_fail@plt+0x1952c>
   2aa18:	smull	r0, r1, r4, lr
   2aa1c:	cmp	r1, r0, asr #31
   2aa20:	mov	r5, r0
   2aa24:	bne	2aa84 <__assert_fail@plt+0x1952c>
   2aa28:	mov	r1, r5
   2aa2c:	mov	r0, r6
   2aa30:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   2aa34:	cmp	r0, #0
   2aa38:	beq	2aa68 <__assert_fail@plt+0x19510>
   2aa3c:	ldr	r8, [sp, #16]
   2aa40:	str	r4, [r7]
   2aa44:	ldrd	r4, [sp]
   2aa48:	ldrd	r6, [sp, #8]
   2aa4c:	add	sp, sp, #20
   2aa50:	pop	{pc}		; (ldr pc, [sp], #4)
   2aa54:	mov	r0, #64	; 0x40
   2aa58:	sdiv	r4, r0, lr
   2aa5c:	mls	r5, lr, r4, r0
   2aa60:	sub	r5, r0, r5
   2aa64:	b	2a9e8 <__assert_fail@plt+0x19490>
   2aa68:	adds	r5, r5, #0
   2aa6c:	movne	r5, #1
   2aa70:	cmp	r6, #0
   2aa74:	movne	r6, r5
   2aa78:	moveq	r6, #1
   2aa7c:	cmp	r6, #0
   2aa80:	beq	2aa3c <__assert_fail@plt+0x194e4>
   2aa84:	bl	12eb4 <__assert_fail@plt+0x195c>
   2aa88:	mvn	r0, #-2147483648	; 0x80000000
   2aa8c:	b	2aa58 <__assert_fail@plt+0x19500>
   2aa90:	mov	r1, #1
   2aa94:	str	r4, [sp, #-8]!
   2aa98:	str	lr, [sp, #4]
   2aa9c:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   2aaa0:	cmp	r0, #0
   2aaa4:	beq	2aab4 <__assert_fail@plt+0x1955c>
   2aaa8:	ldr	r4, [sp]
   2aaac:	add	sp, sp, #4
   2aab0:	pop	{pc}		; (ldr pc, [sp], #4)
   2aab4:	bl	12eb4 <__assert_fail@plt+0x195c>
   2aab8:	mov	r1, #1
   2aabc:	str	r4, [sp, #-8]!
   2aac0:	str	lr, [sp, #4]
   2aac4:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   2aac8:	cmp	r0, #0
   2aacc:	beq	2aadc <__assert_fail@plt+0x19584>
   2aad0:	ldr	r4, [sp]
   2aad4:	add	sp, sp, #4
   2aad8:	pop	{pc}		; (ldr pc, [sp], #4)
   2aadc:	bl	12eb4 <__assert_fail@plt+0x195c>
   2aae0:	str	r4, [sp, #-8]!
   2aae4:	str	lr, [sp, #4]
   2aae8:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   2aaec:	cmp	r0, #0
   2aaf0:	beq	2ab00 <__assert_fail@plt+0x195a8>
   2aaf4:	ldr	r4, [sp]
   2aaf8:	add	sp, sp, #4
   2aafc:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab00:	bl	12eb4 <__assert_fail@plt+0x195c>
   2ab04:	str	r4, [sp, #-8]!
   2ab08:	str	lr, [sp, #4]
   2ab0c:	bl	2cce4 <__assert_fail@plt+0x1b78c>
   2ab10:	cmp	r0, #0
   2ab14:	beq	2ab24 <__assert_fail@plt+0x195cc>
   2ab18:	ldr	r4, [sp]
   2ab1c:	add	sp, sp, #4
   2ab20:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab24:	bl	12eb4 <__assert_fail@plt+0x195c>
   2ab28:	strd	r4, [sp, #-16]!
   2ab2c:	mov	r4, r1
   2ab30:	str	r6, [sp, #8]
   2ab34:	mov	r6, r0
   2ab38:	mov	r0, r1
   2ab3c:	str	lr, [sp, #12]
   2ab40:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2ab44:	subs	r5, r0, #0
   2ab48:	beq	2ab6c <__assert_fail@plt+0x19614>
   2ab4c:	mov	r2, r4
   2ab50:	mov	r1, r6
   2ab54:	bl	11264 <memcpy@plt>
   2ab58:	mov	r0, r5
   2ab5c:	ldrd	r4, [sp]
   2ab60:	ldr	r6, [sp, #8]
   2ab64:	add	sp, sp, #12
   2ab68:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab6c:	bl	12eb4 <__assert_fail@plt+0x195c>
   2ab70:	strd	r4, [sp, #-16]!
   2ab74:	mov	r4, r1
   2ab78:	str	r6, [sp, #8]
   2ab7c:	mov	r6, r0
   2ab80:	mov	r0, r1
   2ab84:	str	lr, [sp, #12]
   2ab88:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2ab8c:	subs	r5, r0, #0
   2ab90:	beq	2abb4 <__assert_fail@plt+0x1965c>
   2ab94:	mov	r2, r4
   2ab98:	mov	r1, r6
   2ab9c:	bl	11264 <memcpy@plt>
   2aba0:	mov	r0, r5
   2aba4:	ldrd	r4, [sp]
   2aba8:	ldr	r6, [sp, #8]
   2abac:	add	sp, sp, #12
   2abb0:	pop	{pc}		; (ldr pc, [sp], #4)
   2abb4:	bl	12eb4 <__assert_fail@plt+0x195c>
   2abb8:	strd	r4, [sp, #-16]!
   2abbc:	mov	r4, r1
   2abc0:	str	r6, [sp, #8]
   2abc4:	mov	r6, r0
   2abc8:	add	r0, r1, #1
   2abcc:	str	lr, [sp, #12]
   2abd0:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2abd4:	subs	r5, r0, #0
   2abd8:	beq	2ac04 <__assert_fail@plt+0x196ac>
   2abdc:	mov	r3, #0
   2abe0:	mov	r1, r6
   2abe4:	mov	r2, r4
   2abe8:	strb	r3, [r5, r4]
   2abec:	bl	11264 <memcpy@plt>
   2abf0:	mov	r0, r5
   2abf4:	ldrd	r4, [sp]
   2abf8:	ldr	r6, [sp, #8]
   2abfc:	add	sp, sp, #12
   2ac00:	pop	{pc}		; (ldr pc, [sp], #4)
   2ac04:	bl	12eb4 <__assert_fail@plt+0x195c>
   2ac08:	strd	r4, [sp, #-16]!
   2ac0c:	str	r6, [sp, #8]
   2ac10:	mov	r6, r0
   2ac14:	str	lr, [sp, #12]
   2ac18:	bl	11414 <strlen@plt>
   2ac1c:	add	r4, r0, #1
   2ac20:	mov	r0, r4
   2ac24:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2ac28:	subs	r5, r0, #0
   2ac2c:	beq	2ac50 <__assert_fail@plt+0x196f8>
   2ac30:	mov	r2, r4
   2ac34:	mov	r1, r6
   2ac38:	bl	11264 <memcpy@plt>
   2ac3c:	mov	r0, r5
   2ac40:	ldrd	r4, [sp]
   2ac44:	ldr	r6, [sp, #8]
   2ac48:	add	sp, sp, #12
   2ac4c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ac50:	bl	12eb4 <__assert_fail@plt+0x195c>
   2ac54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ac58:	strd	r6, [sp, #8]
   2ac5c:	mov	r6, r2
   2ac60:	mov	r7, r3
   2ac64:	str	r8, [sp, #16]
   2ac68:	mov	r2, r1
   2ac6c:	mov	r1, #0
   2ac70:	str	lr, [sp, #20]
   2ac74:	sub	sp, sp, #16
   2ac78:	mov	r8, r0
   2ac7c:	ldr	ip, [sp, #48]	; 0x30
   2ac80:	add	r3, sp, #8
   2ac84:	str	ip, [sp]
   2ac88:	bl	2af24 <__assert_fail@plt+0x199cc>
   2ac8c:	subs	r4, r0, #0
   2ac90:	bne	2ace0 <__assert_fail@plt+0x19788>
   2ac94:	ldrd	r4, [sp, #8]
   2ac98:	ldrd	r0, [sp, #40]	; 0x28
   2ac9c:	cmp	r4, r6
   2aca0:	sbcs	r3, r5, r7
   2aca4:	movlt	r3, #1
   2aca8:	movge	r3, #0
   2acac:	cmp	r0, r4
   2acb0:	sbcs	r2, r1, r5
   2acb4:	orrlt	r3, r3, #1
   2acb8:	cmp	r3, #0
   2acbc:	bne	2ad60 <__assert_fail@plt+0x19808>
   2acc0:	mov	r0, r4
   2acc4:	mov	r1, r5
   2acc8:	add	sp, sp, #16
   2accc:	ldrd	r4, [sp]
   2acd0:	ldrd	r6, [sp, #8]
   2acd4:	ldr	r8, [sp, #16]
   2acd8:	add	sp, sp, #20
   2acdc:	pop	{pc}		; (ldr pc, [sp], #4)
   2ace0:	bl	1142c <__errno_location@plt>
   2ace4:	cmp	r4, #1
   2ace8:	moveq	r3, #75	; 0x4b
   2acec:	moveq	r4, r3
   2acf0:	streq	r3, [r0]
   2acf4:	beq	2ad50 <__assert_fail@plt+0x197f8>
   2acf8:	cmp	r4, #3
   2acfc:	beq	2ad44 <__assert_fail@plt+0x197ec>
   2ad00:	ldr	r3, [sp, #56]	; 0x38
   2ad04:	ldr	r4, [r0]
   2ad08:	cmp	r3, #0
   2ad0c:	bne	2ad18 <__assert_fail@plt+0x197c0>
   2ad10:	mov	r3, #1
   2ad14:	str	r3, [sp, #56]	; 0x38
   2ad18:	cmp	r4, #22
   2ad1c:	moveq	r4, #0
   2ad20:	mov	r0, r8
   2ad24:	bl	1799c <__assert_fail@plt+0x6444>
   2ad28:	movw	r2, #57944	; 0xe258
   2ad2c:	movt	r2, #2
   2ad30:	str	r0, [sp]
   2ad34:	mov	r1, r4
   2ad38:	ldr	r3, [sp, #52]	; 0x34
   2ad3c:	ldr	r0, [sp, #56]	; 0x38
   2ad40:	bl	11384 <error@plt>
   2ad44:	mov	r3, #0
   2ad48:	mov	r4, r3
   2ad4c:	str	r3, [r0]
   2ad50:	ldr	r3, [sp, #56]	; 0x38
   2ad54:	cmp	r3, #0
   2ad58:	bne	2ad20 <__assert_fail@plt+0x197c8>
   2ad5c:	b	2ad10 <__assert_fail@plt+0x197b8>
   2ad60:	bl	1142c <__errno_location@plt>
   2ad64:	cmp	r4, #1073741824	; 0x40000000
   2ad68:	sbcs	r3, r5, #0
   2ad6c:	bge	2ad94 <__assert_fail@plt+0x1983c>
   2ad70:	mov	r2, #-1073741824	; 0xc0000000
   2ad74:	mvn	r3, #0
   2ad78:	cmp	r4, r2
   2ad7c:	sbcs	r3, r5, r3
   2ad80:	blt	2ad94 <__assert_fail@plt+0x1983c>
   2ad84:	mov	r3, #34	; 0x22
   2ad88:	mov	r4, r3
   2ad8c:	str	r3, [r0]
   2ad90:	b	2ad50 <__assert_fail@plt+0x197f8>
   2ad94:	mov	r3, #75	; 0x4b
   2ad98:	str	r3, [r0]
   2ad9c:	ldr	r3, [sp, #56]	; 0x38
   2ada0:	cmp	r3, #0
   2ada4:	movne	r4, #75	; 0x4b
   2ada8:	bne	2ad20 <__assert_fail@plt+0x197c8>
   2adac:	mov	r3, #1
   2adb0:	mov	r4, #75	; 0x4b
   2adb4:	str	r3, [sp, #56]	; 0x38
   2adb8:	b	2ad20 <__assert_fail@plt+0x197c8>
   2adbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2adc0:	mov	r1, #0
   2adc4:	strd	r6, [sp, #8]
   2adc8:	mov	r6, r2
   2adcc:	mov	r7, r3
   2add0:	str	r8, [sp, #16]
   2add4:	mov	r2, #10
   2add8:	mov	r8, r0
   2addc:	str	lr, [sp, #20]
   2ade0:	sub	sp, sp, #16
   2ade4:	ldr	ip, [sp, #48]	; 0x30
   2ade8:	add	r3, sp, #8
   2adec:	str	ip, [sp]
   2adf0:	bl	2af24 <__assert_fail@plt+0x199cc>
   2adf4:	subs	r4, r0, #0
   2adf8:	bne	2ae48 <__assert_fail@plt+0x198f0>
   2adfc:	ldrd	r4, [sp, #8]
   2ae00:	ldrd	r0, [sp, #40]	; 0x28
   2ae04:	cmp	r4, r6
   2ae08:	sbcs	r3, r5, r7
   2ae0c:	movlt	r3, #1
   2ae10:	movge	r3, #0
   2ae14:	cmp	r0, r4
   2ae18:	sbcs	r2, r1, r5
   2ae1c:	orrlt	r3, r3, #1
   2ae20:	cmp	r3, #0
   2ae24:	bne	2aec8 <__assert_fail@plt+0x19970>
   2ae28:	mov	r0, r4
   2ae2c:	mov	r1, r5
   2ae30:	add	sp, sp, #16
   2ae34:	ldrd	r4, [sp]
   2ae38:	ldrd	r6, [sp, #8]
   2ae3c:	ldr	r8, [sp, #16]
   2ae40:	add	sp, sp, #20
   2ae44:	pop	{pc}		; (ldr pc, [sp], #4)
   2ae48:	bl	1142c <__errno_location@plt>
   2ae4c:	cmp	r4, #1
   2ae50:	moveq	r3, #75	; 0x4b
   2ae54:	moveq	r4, r3
   2ae58:	streq	r3, [r0]
   2ae5c:	beq	2aeb0 <__assert_fail@plt+0x19958>
   2ae60:	cmp	r4, #3
   2ae64:	beq	2aea4 <__assert_fail@plt+0x1994c>
   2ae68:	ldr	r3, [sp, #56]	; 0x38
   2ae6c:	ldr	r4, [r0]
   2ae70:	cmp	r3, #0
   2ae74:	beq	2aebc <__assert_fail@plt+0x19964>
   2ae78:	cmp	r4, #22
   2ae7c:	moveq	r4, #0
   2ae80:	mov	r0, r8
   2ae84:	bl	1799c <__assert_fail@plt+0x6444>
   2ae88:	movw	r2, #57944	; 0xe258
   2ae8c:	movt	r2, #2
   2ae90:	str	r0, [sp]
   2ae94:	mov	r1, r4
   2ae98:	ldr	r3, [sp, #52]	; 0x34
   2ae9c:	ldr	r0, [sp, #56]	; 0x38
   2aea0:	bl	11384 <error@plt>
   2aea4:	mov	r3, #0
   2aea8:	mov	r4, r3
   2aeac:	str	r3, [r0]
   2aeb0:	ldr	r3, [sp, #56]	; 0x38
   2aeb4:	cmp	r3, #0
   2aeb8:	bne	2ae80 <__assert_fail@plt+0x19928>
   2aebc:	mov	r3, #1
   2aec0:	str	r3, [sp, #56]	; 0x38
   2aec4:	b	2ae78 <__assert_fail@plt+0x19920>
   2aec8:	bl	1142c <__errno_location@plt>
   2aecc:	cmp	r4, #1073741824	; 0x40000000
   2aed0:	sbcs	r3, r5, #0
   2aed4:	bge	2aefc <__assert_fail@plt+0x199a4>
   2aed8:	mov	r2, #-1073741824	; 0xc0000000
   2aedc:	mvn	r3, #0
   2aee0:	cmp	r4, r2
   2aee4:	sbcs	r3, r5, r3
   2aee8:	blt	2aefc <__assert_fail@plt+0x199a4>
   2aeec:	mov	r3, #34	; 0x22
   2aef0:	mov	r4, r3
   2aef4:	str	r3, [r0]
   2aef8:	b	2aeb0 <__assert_fail@plt+0x19958>
   2aefc:	mov	r3, #75	; 0x4b
   2af00:	str	r3, [r0]
   2af04:	ldr	r3, [sp, #56]	; 0x38
   2af08:	cmp	r3, #0
   2af0c:	movne	r4, #75	; 0x4b
   2af10:	bne	2ae80 <__assert_fail@plt+0x19928>
   2af14:	mov	r3, #1
   2af18:	mov	r4, #75	; 0x4b
   2af1c:	str	r3, [sp, #56]	; 0x38
   2af20:	b	2ae80 <__assert_fail@plt+0x19928>
   2af24:	cmp	r2, #36	; 0x24
   2af28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2af2c:	strd	r6, [sp, #8]
   2af30:	strd	r8, [sp, #16]
   2af34:	strd	sl, [sp, #24]
   2af38:	str	lr, [sp, #32]
   2af3c:	sub	sp, sp, #36	; 0x24
   2af40:	bhi	2bd1c <__assert_fail@plt+0x1a7c4>
   2af44:	cmp	r1, #0
   2af48:	mov	r5, r1
   2af4c:	mov	r6, r2
   2af50:	addeq	r5, sp, #28
   2af54:	mov	sl, r0
   2af58:	mov	r9, r3
   2af5c:	bl	1142c <__errno_location@plt>
   2af60:	mov	fp, r0
   2af64:	mov	r4, #0
   2af68:	mov	r2, r6
   2af6c:	mov	r3, r4
   2af70:	mov	r1, r5
   2af74:	mov	r0, sl
   2af78:	str	r4, [fp]
   2af7c:	bl	114f8 <__strtoll_internal@plt>
   2af80:	ldr	r8, [r5]
   2af84:	mov	r6, r0
   2af88:	mov	r7, r1
   2af8c:	cmp	r8, sl
   2af90:	beq	2afe8 <__assert_fail@plt+0x19a90>
   2af94:	ldr	r4, [fp]
   2af98:	cmp	r4, #0
   2af9c:	beq	2afac <__assert_fail@plt+0x19a54>
   2afa0:	cmp	r4, #34	; 0x22
   2afa4:	bne	2b0ec <__assert_fail@plt+0x19b94>
   2afa8:	mov	r4, #1
   2afac:	ldr	r3, [sp, #72]	; 0x48
   2afb0:	cmp	r3, #0
   2afb4:	beq	2afc4 <__assert_fail@plt+0x19a6c>
   2afb8:	ldrb	sl, [r8]
   2afbc:	cmp	sl, #0
   2afc0:	bne	2b1f0 <__assert_fail@plt+0x19c98>
   2afc4:	strd	r6, [r9]
   2afc8:	mov	r0, r4
   2afcc:	add	sp, sp, #36	; 0x24
   2afd0:	ldrd	r4, [sp]
   2afd4:	ldrd	r6, [sp, #8]
   2afd8:	ldrd	r8, [sp, #16]
   2afdc:	ldrd	sl, [sp, #24]
   2afe0:	add	sp, sp, #32
   2afe4:	pop	{pc}		; (ldr pc, [sp], #4)
   2afe8:	ldr	r3, [sp, #72]	; 0x48
   2afec:	cmp	r3, r4
   2aff0:	beq	2b0ec <__assert_fail@plt+0x19b94>
   2aff4:	ldrb	sl, [sl]
   2aff8:	cmp	sl, r4
   2affc:	beq	2b0ec <__assert_fail@plt+0x19b94>
   2b000:	mov	r1, sl
   2b004:	mov	r0, r3
   2b008:	bl	11420 <strchr@plt>
   2b00c:	cmp	r0, r4
   2b010:	movne	r6, #1
   2b014:	movne	r7, #0
   2b018:	beq	2b0ec <__assert_fail@plt+0x19b94>
   2b01c:	sub	fp, sl, #69	; 0x45
   2b020:	cmp	fp, #47	; 0x2f
   2b024:	ldrls	pc, [pc, fp, lsl #2]
   2b028:	b	2b20c <__assert_fail@plt+0x19cb4>
   2b02c:	strdeq	fp, [r2], -r4
   2b030:	andeq	fp, r2, ip, lsl #4
   2b034:	strdeq	fp, [r2], -r4
   2b038:	andeq	fp, r2, ip, lsl #4
   2b03c:	andeq	fp, r2, ip, lsl #4
   2b040:	andeq	fp, r2, ip, lsl #4
   2b044:	strdeq	fp, [r2], -r4
   2b048:	andeq	fp, r2, ip, lsl #4
   2b04c:	strdeq	fp, [r2], -r4
   2b050:	andeq	fp, r2, ip, lsl #4
   2b054:	andeq	fp, r2, ip, lsl #4
   2b058:	strdeq	fp, [r2], -r4
   2b05c:	andeq	fp, r2, ip, lsl #4
   2b060:	andeq	fp, r2, ip, lsl #4
   2b064:	andeq	fp, r2, ip, lsl #4
   2b068:	strdeq	fp, [r2], -r4
   2b06c:	andeq	fp, r2, ip, lsl #4
   2b070:	andeq	fp, r2, ip, lsl #4
   2b074:	andeq	fp, r2, ip, lsl #4
   2b078:	andeq	fp, r2, ip, lsl #4
   2b07c:	strdeq	fp, [r2], -r4
   2b080:	strdeq	fp, [r2], -r4
   2b084:	andeq	fp, r2, ip, lsl #4
   2b088:	andeq	fp, r2, ip, lsl #4
   2b08c:	andeq	fp, r2, ip, lsl #4
   2b090:	andeq	fp, r2, ip, lsl #4
   2b094:	andeq	fp, r2, ip, lsl #4
   2b098:	andeq	fp, r2, ip, lsl #4
   2b09c:	andeq	fp, r2, ip, lsl #4
   2b0a0:	andeq	fp, r2, ip, lsl #4
   2b0a4:	andeq	fp, r2, ip, lsl #4
   2b0a8:	andeq	fp, r2, ip, lsl #4
   2b0ac:	andeq	fp, r2, ip, lsl #4
   2b0b0:	andeq	fp, r2, ip, lsl #4
   2b0b4:	strdeq	fp, [r2], -r4
   2b0b8:	andeq	fp, r2, ip, lsl #4
   2b0bc:	andeq	fp, r2, ip, lsl #4
   2b0c0:	andeq	fp, r2, ip, lsl #4
   2b0c4:	strdeq	fp, [r2], -r4
   2b0c8:	andeq	fp, r2, ip, lsl #4
   2b0cc:	strdeq	fp, [r2], -r4
   2b0d0:	andeq	fp, r2, ip, lsl #4
   2b0d4:	andeq	fp, r2, ip, lsl #4
   2b0d8:	andeq	fp, r2, ip, lsl #4
   2b0dc:	andeq	fp, r2, ip, lsl #4
   2b0e0:	andeq	fp, r2, ip, lsl #4
   2b0e4:	andeq	fp, r2, ip, lsl #4
   2b0e8:	strdeq	fp, [r2], -r4
   2b0ec:	mov	r4, #4
   2b0f0:	b	2afc8 <__assert_fail@plt+0x19a70>
   2b0f4:	mov	r1, #48	; 0x30
   2b0f8:	ldr	r0, [sp, #72]	; 0x48
   2b0fc:	bl	11420 <strchr@plt>
   2b100:	cmp	r0, #0
   2b104:	beq	2b20c <__assert_fail@plt+0x19cb4>
   2b108:	ldrb	r3, [r8, #1]
   2b10c:	cmp	r3, #68	; 0x44
   2b110:	beq	2b8f4 <__assert_fail@plt+0x1a39c>
   2b114:	cmp	r3, #105	; 0x69
   2b118:	beq	2b93c <__assert_fail@plt+0x1a3e4>
   2b11c:	cmp	r3, #66	; 0x42
   2b120:	beq	2b8f4 <__assert_fail@plt+0x1a39c>
   2b124:	cmp	fp, #47	; 0x2f
   2b128:	ldrls	pc, [pc, fp, lsl #2]
   2b12c:	b	2b204 <__assert_fail@plt+0x19cac>
   2b130:	andeq	fp, r2, r4, lsl r8
   2b134:	andeq	fp, r2, r4, lsl #4
   2b138:	andeq	fp, r2, r8, asr r6
   2b13c:	andeq	fp, r2, r4, lsl #4
   2b140:	andeq	fp, r2, r4, lsl #4
   2b144:	andeq	fp, r2, r4, lsl #4
   2b148:	andeq	fp, r2, r8, lsr #8
   2b14c:	andeq	fp, r2, r4, lsl #4
   2b150:			; <UNDEFINED> instruction: 0x0002b7b4
   2b154:	andeq	fp, r2, r4, lsl #4
   2b158:	andeq	fp, r2, r4, lsl #4
   2b15c:			; <UNDEFINED> instruction: 0x0002b5b8
   2b160:	andeq	fp, r2, r4, lsl #4
   2b164:	andeq	fp, r2, r4, lsl #4
   2b168:	andeq	fp, r2, r4, lsl #4
   2b16c:	strdeq	fp, [r2], -r8
   2b170:	andeq	fp, r2, r4, lsl #4
   2b174:	andeq	fp, r2, r4, lsl #4
   2b178:	andeq	fp, r2, r4, lsl #4
   2b17c:	andeq	fp, r2, r4, lsl #4
   2b180:	strdeq	fp, [r2], -r4
   2b184:	strdeq	fp, [r2], -ip
   2b188:	andeq	fp, r2, r4, lsl #4
   2b18c:	andeq	fp, r2, r4, lsl #4
   2b190:	andeq	fp, r2, r4, lsl #4
   2b194:	andeq	fp, r2, r4, lsl #4
   2b198:	andeq	fp, r2, r4, lsl #4
   2b19c:	andeq	fp, r2, r4, lsl #4
   2b1a0:	andeq	fp, r2, r4, lsl #4
   2b1a4:	andeq	fp, r2, r4, asr #9
   2b1a8:			; <UNDEFINED> instruction: 0x0002b8b4
   2b1ac:	andeq	fp, r2, r4, lsl #4
   2b1b0:	andeq	fp, r2, r4, lsl #4
   2b1b4:	andeq	fp, r2, r4, lsl #4
   2b1b8:	andeq	fp, r2, r8, asr r6
   2b1bc:	andeq	fp, r2, r4, lsl #4
   2b1c0:	andeq	fp, r2, r4, lsl #4
   2b1c4:	andeq	fp, r2, r4, lsl #4
   2b1c8:	andeq	fp, r2, r8, lsr #8
   2b1cc:	andeq	fp, r2, r4, lsl #4
   2b1d0:			; <UNDEFINED> instruction: 0x0002b7b4
   2b1d4:	andeq	fp, r2, r4, lsl #4
   2b1d8:	andeq	fp, r2, r4, lsl #4
   2b1dc:	andeq	fp, r2, r4, lsl #4
   2b1e0:	andeq	fp, r2, r4, lsl #4
   2b1e4:	andeq	fp, r2, r4, lsl #4
   2b1e8:	andeq	fp, r2, r4, lsl #4
   2b1ec:	strdeq	fp, [r2], -r8
   2b1f0:	mov	r0, r3
   2b1f4:	mov	r1, sl
   2b1f8:	bl	11420 <strchr@plt>
   2b1fc:	cmp	r0, #0
   2b200:	bne	2b01c <__assert_fail@plt+0x19ac4>
   2b204:	orr	r4, r4, #2
   2b208:	b	2afc4 <__assert_fail@plt+0x19a6c>
   2b20c:	mov	fp, #1
   2b210:	mov	lr, #1024	; 0x400
   2b214:	sub	sl, sl, #66	; 0x42
   2b218:	cmp	sl, #53	; 0x35
   2b21c:	ldrls	pc, [pc, sl, lsl #2]
   2b220:	b	2b204 <__assert_fail@plt+0x19cac>
   2b224:	muleq	r2, r8, r7
   2b228:	andeq	fp, r2, r4, lsl #4
   2b22c:	andeq	fp, r2, r4, lsl #4
   2b230:	andeq	fp, r2, ip, lsl r8
   2b234:	andeq	fp, r2, r4, lsl #4
   2b238:	andeq	fp, r2, r0, ror #12
   2b23c:	andeq	fp, r2, r4, lsl #4
   2b240:	andeq	fp, r2, r4, lsl #4
   2b244:	andeq	fp, r2, r4, lsl #4
   2b248:	andeq	fp, r2, r0, lsr r4
   2b24c:	andeq	fp, r2, r4, lsl #4
   2b250:			; <UNDEFINED> instruction: 0x0002b7bc
   2b254:	andeq	fp, r2, r4, lsl #4
   2b258:	andeq	fp, r2, r4, lsl #4
   2b25c:	andeq	fp, r2, r0, asr #11
   2b260:	andeq	fp, r2, r4, lsl #4
   2b264:	andeq	fp, r2, r4, lsl #4
   2b268:	andeq	fp, r2, r4, lsl #4
   2b26c:	andeq	fp, r2, r0, lsl #14
   2b270:	andeq	fp, r2, r4, lsl #4
   2b274:	andeq	fp, r2, r4, lsl #4
   2b278:	andeq	fp, r2, r4, lsl #4
   2b27c:	andeq	fp, r2, r4, lsl #4
   2b280:	strdeq	fp, [r2], -ip
   2b284:	andeq	fp, r2, r4, lsl #6
   2b288:	andeq	fp, r2, r4, lsl #4
   2b28c:	andeq	fp, r2, r4, lsl #4
   2b290:	andeq	fp, r2, r4, lsl #4
   2b294:	andeq	fp, r2, r4, lsl #4
   2b298:	andeq	fp, r2, r4, lsl #4
   2b29c:	andeq	fp, r2, r4, lsl #4
   2b2a0:	andeq	fp, r2, r4, lsl #4
   2b2a4:	andeq	fp, r2, r8, asr #9
   2b2a8:	andeq	fp, r2, r0, lsl r4
   2b2ac:	andeq	fp, r2, r4, lsl #4
   2b2b0:	andeq	fp, r2, r4, lsl #4
   2b2b4:	andeq	fp, r2, r4, lsl #4
   2b2b8:	andeq	fp, r2, r0, ror #12
   2b2bc:	andeq	fp, r2, r4, lsl #4
   2b2c0:	andeq	fp, r2, r4, lsl #4
   2b2c4:	andeq	fp, r2, r4, lsl #4
   2b2c8:	andeq	fp, r2, r0, lsr r4
   2b2cc:	andeq	fp, r2, r4, lsl #4
   2b2d0:			; <UNDEFINED> instruction: 0x0002b7bc
   2b2d4:	andeq	fp, r2, r4, lsl #4
   2b2d8:	andeq	fp, r2, r4, lsl #4
   2b2dc:	andeq	fp, r2, r4, lsl #4
   2b2e0:	andeq	fp, r2, r4, lsl #4
   2b2e4:	andeq	fp, r2, r4, lsl #4
   2b2e8:	andeq	fp, r2, r4, lsl #4
   2b2ec:	andeq	fp, r2, r0, lsl #14
   2b2f0:	andeq	fp, r2, r4, lsl #4
   2b2f4:	andeq	fp, r2, r4, lsl #4
   2b2f8:	muleq	r2, ip, r4
   2b2fc:	mov	fp, #1
   2b300:	mov	lr, #1024	; 0x400
   2b304:	asr	r3, lr, #31
   2b308:	mov	r2, lr
   2b30c:	mov	r1, #0
   2b310:	cmp	r7, r6, asr #31
   2b314:	strd	r2, [sp]
   2b318:	bne	2ba28 <__assert_fail@plt+0x1a4d0>
   2b31c:	smull	r2, r3, r6, lr
   2b320:	mov	ip, r2
   2b324:	cmp	r1, #0
   2b328:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b32c:	mov	r6, ip
   2b330:	mov	r7, r3
   2b334:	cmp	r3, r6, asr #31
   2b338:	mov	ip, r1
   2b33c:	bne	2b55c <__assert_fail@plt+0x1a004>
   2b340:	smull	r2, r3, r6, lr
   2b344:	mov	sl, r2
   2b348:	subs	r1, ip, #0
   2b34c:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b350:	cmp	r3, sl, asr #31
   2b354:	mov	r6, sl
   2b358:	mov	ip, r1
   2b35c:	mov	r7, r3
   2b360:	bne	2b858 <__assert_fail@plt+0x1a300>
   2b364:	smull	r2, r3, r6, lr
   2b368:	mov	sl, r2
   2b36c:	subs	r1, ip, #0
   2b370:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b374:	cmp	r3, sl, asr #31
   2b378:	mov	r6, sl
   2b37c:	mov	ip, r1
   2b380:	mov	r7, r3
   2b384:	bne	2b5fc <__assert_fail@plt+0x1a0a4>
   2b388:	smull	r2, r3, r6, lr
   2b38c:	mov	sl, r2
   2b390:	subs	r1, ip, #0
   2b394:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b398:	cmp	r3, sl, asr #31
   2b39c:	mov	r6, sl
   2b3a0:	mov	ip, r1
   2b3a4:	mov	r7, r3
   2b3a8:	bne	2b73c <__assert_fail@plt+0x1a1e4>
   2b3ac:	smull	r2, r3, r6, lr
   2b3b0:	mov	sl, r2
   2b3b4:	subs	r1, ip, #0
   2b3b8:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b3bc:	cmp	r3, sl, asr #31
   2b3c0:	mov	r6, sl
   2b3c4:	mov	ip, r1
   2b3c8:	mov	r7, r3
   2b3cc:	bne	2b69c <__assert_fail@plt+0x1a144>
   2b3d0:	smull	r2, r3, r6, lr
   2b3d4:	mov	sl, r2
   2b3d8:	cmp	ip, #0
   2b3dc:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b3e0:	cmp	r3, sl, asr #31
   2b3e4:	mov	r0, sl
   2b3e8:	mov	r1, r3
   2b3ec:	bne	2b954 <__assert_fail@plt+0x1a3fc>
   2b3f0:	smull	r2, r3, sl, lr
   2b3f4:	mov	lr, r2
   2b3f8:	mov	r2, r3
   2b3fc:	cmp	ip, #0
   2b400:	moveq	r6, lr
   2b404:	moveq	r7, r2
   2b408:	bne	2b8d8 <__assert_fail@plt+0x1a380>
   2b40c:	orr	r4, r4, ip
   2b410:	add	r3, r8, fp
   2b414:	str	r3, [r5]
   2b418:	ldrb	r3, [r8, fp]
   2b41c:	cmp	r3, #0
   2b420:	beq	2afc4 <__assert_fail@plt+0x19a6c>
   2b424:	b	2b204 <__assert_fail@plt+0x19cac>
   2b428:	mov	fp, #1
   2b42c:	mov	lr, #1024	; 0x400
   2b430:	cmp	r7, r6, asr #31
   2b434:	mov	r0, lr
   2b438:	mov	ip, #0
   2b43c:	asr	r1, lr, #31
   2b440:	bne	2b900 <__assert_fail@plt+0x1a3a8>
   2b444:	smull	r2, r3, r6, lr
   2b448:	mov	r1, r2
   2b44c:	mov	lr, r3
   2b450:	cmp	ip, #0
   2b454:	bne	2b464 <__assert_fail@plt+0x19f0c>
   2b458:	mov	r6, r1
   2b45c:	mov	r7, lr
   2b460:	b	2b410 <__assert_fail@plt+0x19eb8>
   2b464:	cmp	r6, #0
   2b468:	mov	r4, #1
   2b46c:	sbcs	r3, r7, #0
   2b470:	blt	2b490 <__assert_fail@plt+0x19f38>
   2b474:	mvn	r6, #0
   2b478:	mvn	r7, #-2147483648	; 0x80000000
   2b47c:	b	2b410 <__assert_fail@plt+0x19eb8>
   2b480:	cmp	r0, #0
   2b484:	mov	r4, #1
   2b488:	sbcs	r3, r1, #0
   2b48c:	bge	2b474 <__assert_fail@plt+0x19f1c>
   2b490:	mov	r6, #0
   2b494:	mov	r7, #-2147483648	; 0x80000000
   2b498:	b	2b410 <__assert_fail@plt+0x19eb8>
   2b49c:	cmp	r7, r6, asr #31
   2b4a0:	mov	r1, #0
   2b4a4:	bne	2bbc0 <__assert_fail@plt+0x1a668>
   2b4a8:	adds	ip, r6, r6
   2b4ac:	adc	r3, r7, r7
   2b4b0:	cmp	r1, #0
   2b4b4:	bne	2b464 <__assert_fail@plt+0x19f0c>
   2b4b8:	mov	r6, ip
   2b4bc:	mov	r7, r3
   2b4c0:	b	2b410 <__assert_fail@plt+0x19eb8>
   2b4c4:	mov	fp, #1
   2b4c8:	cmp	r7, r6, asr #31
   2b4cc:	mov	ip, #0
   2b4d0:	bne	2bc18 <__assert_fail@plt+0x1a6c0>
   2b4d4:	lsl	r3, r7, #9
   2b4d8:	lsl	r2, r6, #9
   2b4dc:	orr	r3, r3, r6, lsr #23
   2b4e0:	cmp	ip, #0
   2b4e4:	bne	2b464 <__assert_fail@plt+0x19f0c>
   2b4e8:	mov	r6, r2
   2b4ec:	mov	r7, r3
   2b4f0:	b	2b410 <__assert_fail@plt+0x19eb8>
   2b4f4:	mov	fp, #1
   2b4f8:	mov	lr, #1024	; 0x400
   2b4fc:	asr	r3, lr, #31
   2b500:	mov	r2, lr
   2b504:	mov	r1, #0
   2b508:	cmp	r7, r6, asr #31
   2b50c:	strd	r2, [sp]
   2b510:	bne	2baa8 <__assert_fail@plt+0x1a550>
   2b514:	smull	r2, r3, r6, lr
   2b518:	mov	ip, r2
   2b51c:	cmp	r1, #0
   2b520:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b524:	mov	r6, ip
   2b528:	mov	r7, r3
   2b52c:	cmp	r3, r6, asr #31
   2b530:	mov	ip, r1
   2b534:	bne	2bc6c <__assert_fail@plt+0x1a714>
   2b538:	smull	r2, r3, r6, lr
   2b53c:	mov	sl, r2
   2b540:	subs	r1, ip, #0
   2b544:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b548:	cmp	r3, sl, asr #31
   2b54c:	mov	r6, sl
   2b550:	mov	ip, r1
   2b554:	mov	r7, r3
   2b558:	beq	2b340 <__assert_fail@plt+0x19de8>
   2b55c:	umull	r0, r1, r6, lr
   2b560:	cmp	r3, #0
   2b564:	umull	r2, r3, lr, r3
   2b568:	strd	r0, [sp, #16]
   2b56c:	mov	r0, r2
   2b570:	mov	r1, r3
   2b574:	strd	r0, [sp, #8]
   2b578:	bge	2b590 <__assert_fail@plt+0x1a038>
   2b57c:	subs	r3, r0, ip
   2b580:	str	r3, [sp, #8]
   2b584:	ldr	r3, [sp, #12]
   2b588:	sbc	r3, r3, lr
   2b58c:	str	r3, [sp, #12]
   2b590:	ldr	r1, [sp, #8]
   2b594:	mov	r2, #0
   2b598:	ldr	r3, [sp, #20]
   2b59c:	adds	r3, r1, r3
   2b5a0:	ldr	r1, [sp, #12]
   2b5a4:	adc	r2, r1, r2
   2b5a8:	cmp	r2, r3, asr #31
   2b5ac:	bne	2bec0 <__assert_fail@plt+0x1a968>
   2b5b0:	ldr	sl, [sp, #16]
   2b5b4:	b	2b348 <__assert_fail@plt+0x19df0>
   2b5b8:	mov	fp, #1
   2b5bc:	mov	lr, #1024	; 0x400
   2b5c0:	asr	r3, lr, #31
   2b5c4:	mov	r2, lr
   2b5c8:	mov	r1, #0
   2b5cc:	cmp	r7, r6, asr #31
   2b5d0:	strd	r2, [sp]
   2b5d4:	bne	2b9e8 <__assert_fail@plt+0x1a490>
   2b5d8:	smull	r2, r3, r6, lr
   2b5dc:	mov	ip, r2
   2b5e0:	cmp	r1, #0
   2b5e4:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b5e8:	mov	r6, ip
   2b5ec:	mov	r7, r3
   2b5f0:	cmp	r3, r6, asr #31
   2b5f4:	mov	ip, r1
   2b5f8:	beq	2b388 <__assert_fail@plt+0x19e30>
   2b5fc:	umull	r0, r1, r6, lr
   2b600:	cmp	r3, #0
   2b604:	umull	r2, r3, lr, r3
   2b608:	strd	r0, [sp, #16]
   2b60c:	mov	r0, r2
   2b610:	mov	r1, r3
   2b614:	strd	r0, [sp, #8]
   2b618:	bge	2b630 <__assert_fail@plt+0x1a0d8>
   2b61c:	subs	r3, r0, ip
   2b620:	str	r3, [sp, #8]
   2b624:	ldr	r3, [sp, #12]
   2b628:	sbc	r3, r3, lr
   2b62c:	str	r3, [sp, #12]
   2b630:	ldr	r1, [sp, #8]
   2b634:	mov	r2, #0
   2b638:	ldr	r3, [sp, #20]
   2b63c:	adds	r3, r1, r3
   2b640:	ldr	r1, [sp, #12]
   2b644:	adc	r2, r1, r2
   2b648:	cmp	r2, r3, asr #31
   2b64c:	bne	2bdf0 <__assert_fail@plt+0x1a898>
   2b650:	ldr	sl, [sp, #16]
   2b654:	b	2b390 <__assert_fail@plt+0x19e38>
   2b658:	mov	fp, #1
   2b65c:	mov	lr, #1024	; 0x400
   2b660:	asr	r3, lr, #31
   2b664:	mov	r2, lr
   2b668:	mov	r1, #0
   2b66c:	cmp	r7, r6, asr #31
   2b670:	strd	r2, [sp]
   2b674:	bne	2b9a8 <__assert_fail@plt+0x1a450>
   2b678:	smull	r2, r3, r6, lr
   2b67c:	mov	ip, r2
   2b680:	cmp	r1, #0
   2b684:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b688:	mov	r6, ip
   2b68c:	mov	r7, r3
   2b690:	cmp	r3, r6, asr #31
   2b694:	mov	ip, r1
   2b698:	beq	2b3d0 <__assert_fail@plt+0x19e78>
   2b69c:	umull	r0, r1, r6, lr
   2b6a0:	cmp	r3, #0
   2b6a4:	umull	r2, r3, lr, r3
   2b6a8:	strd	r0, [sp, #16]
   2b6ac:	mov	r0, r2
   2b6b0:	mov	r1, r3
   2b6b4:	strd	r0, [sp, #8]
   2b6b8:	bge	2b6d0 <__assert_fail@plt+0x1a178>
   2b6bc:	subs	r3, r0, ip
   2b6c0:	str	r3, [sp, #8]
   2b6c4:	ldr	r3, [sp, #12]
   2b6c8:	sbc	r3, r3, lr
   2b6cc:	str	r3, [sp, #12]
   2b6d0:	ldr	r1, [sp, #8]
   2b6d4:	mov	r2, #0
   2b6d8:	ldr	r3, [sp, #20]
   2b6dc:	adds	r3, r1, r3
   2b6e0:	ldr	r1, [sp, #12]
   2b6e4:	adc	r2, r1, r2
   2b6e8:	cmp	r2, r3, asr #31
   2b6ec:	bne	2bd60 <__assert_fail@plt+0x1a808>
   2b6f0:	ldr	sl, [sp, #16]
   2b6f4:	b	2b3d8 <__assert_fail@plt+0x19e80>
   2b6f8:	mov	fp, #1
   2b6fc:	mov	lr, #1024	; 0x400
   2b700:	asr	r3, lr, #31
   2b704:	mov	r2, lr
   2b708:	mov	r1, #0
   2b70c:	cmp	r7, r6, asr #31
   2b710:	strd	r2, [sp]
   2b714:	bne	2bb80 <__assert_fail@plt+0x1a628>
   2b718:	smull	r2, r3, r6, lr
   2b71c:	mov	ip, r2
   2b720:	cmp	r1, #0
   2b724:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b728:	mov	r6, ip
   2b72c:	mov	r7, r3
   2b730:	cmp	r3, r6, asr #31
   2b734:	mov	ip, r1
   2b738:	beq	2b3ac <__assert_fail@plt+0x19e54>
   2b73c:	umull	r0, r1, r6, lr
   2b740:	cmp	r3, #0
   2b744:	umull	r2, r3, lr, r3
   2b748:	strd	r0, [sp, #16]
   2b74c:	mov	r0, r2
   2b750:	mov	r1, r3
   2b754:	strd	r0, [sp, #8]
   2b758:	bge	2b770 <__assert_fail@plt+0x1a218>
   2b75c:	subs	r3, r0, ip
   2b760:	str	r3, [sp, #8]
   2b764:	ldr	r3, [sp, #12]
   2b768:	sbc	r3, r3, lr
   2b76c:	str	r3, [sp, #12]
   2b770:	ldr	r1, [sp, #8]
   2b774:	mov	r2, #0
   2b778:	ldr	r3, [sp, #20]
   2b77c:	adds	r3, r1, r3
   2b780:	ldr	r1, [sp, #12]
   2b784:	adc	r2, r1, r2
   2b788:	cmp	r2, r3, asr #31
   2b78c:	bne	2bda8 <__assert_fail@plt+0x1a850>
   2b790:	ldr	sl, [sp, #16]
   2b794:	b	2b3b4 <__assert_fail@plt+0x19e5c>
   2b798:	cmp	r7, r6, asr #31
   2b79c:	mov	ip, #0
   2b7a0:	bne	2bb28 <__assert_fail@plt+0x1a5d0>
   2b7a4:	lsl	r3, r7, #10
   2b7a8:	lsl	r2, r6, #10
   2b7ac:	orr	r3, r3, r6, lsr #22
   2b7b0:	b	2b4e0 <__assert_fail@plt+0x19f88>
   2b7b4:	mov	fp, #1
   2b7b8:	mov	lr, #1024	; 0x400
   2b7bc:	asr	r3, lr, #31
   2b7c0:	mov	r2, lr
   2b7c4:	mov	r1, #0
   2b7c8:	cmp	r7, r6, asr #31
   2b7cc:	strd	r2, [sp]
   2b7d0:	bne	2bae8 <__assert_fail@plt+0x1a590>
   2b7d4:	smull	r2, r3, r6, lr
   2b7d8:	mov	sl, r2
   2b7dc:	subs	ip, r1, #0
   2b7e0:	bne	2b464 <__assert_fail@plt+0x19f0c>
   2b7e4:	cmp	r3, sl, asr #31
   2b7e8:	mov	r0, sl
   2b7ec:	mov	r1, r3
   2b7f0:	bne	2bcc8 <__assert_fail@plt+0x1a770>
   2b7f4:	smull	r2, r3, sl, lr
   2b7f8:	mov	lr, r2
   2b7fc:	mov	r2, r3
   2b800:	cmp	ip, #0
   2b804:	bne	2b480 <__assert_fail@plt+0x19f28>
   2b808:	mov	r6, lr
   2b80c:	mov	r7, r2
   2b810:	b	2b410 <__assert_fail@plt+0x19eb8>
   2b814:	mov	fp, #1
   2b818:	mov	lr, #1024	; 0x400
   2b81c:	asr	r3, lr, #31
   2b820:	mov	r2, lr
   2b824:	mov	r1, #0
   2b828:	cmp	r7, r6, asr #31
   2b82c:	strd	r2, [sp]
   2b830:	bne	2ba68 <__assert_fail@plt+0x1a510>
   2b834:	smull	r2, r3, r6, lr
   2b838:	mov	ip, r2
   2b83c:	cmp	r1, #0
   2b840:	bne	2b8bc <__assert_fail@plt+0x1a364>
   2b844:	mov	r6, ip
   2b848:	mov	r7, r3
   2b84c:	cmp	r3, r6, asr #31
   2b850:	mov	ip, r1
   2b854:	beq	2b364 <__assert_fail@plt+0x19e0c>
   2b858:	umull	r0, r1, r6, lr
   2b85c:	cmp	r3, #0
   2b860:	umull	r2, r3, lr, r3
   2b864:	strd	r0, [sp, #16]
   2b868:	mov	r0, r2
   2b86c:	mov	r1, r3
   2b870:	strd	r0, [sp, #8]
   2b874:	bge	2b88c <__assert_fail@plt+0x1a334>
   2b878:	subs	r3, r0, ip
   2b87c:	str	r3, [sp, #8]
   2b880:	ldr	r3, [sp, #12]
   2b884:	sbc	r3, r3, lr
   2b888:	str	r3, [sp, #12]
   2b88c:	ldr	r1, [sp, #8]
   2b890:	mov	r2, #0
   2b894:	ldr	r3, [sp, #20]
   2b898:	adds	r3, r1, r3
   2b89c:	ldr	r1, [sp, #12]
   2b8a0:	adc	r2, r1, r2
   2b8a4:	cmp	r2, r3, asr #31
   2b8a8:	bne	2bdcc <__assert_fail@plt+0x1a874>
   2b8ac:	ldr	sl, [sp, #16]
   2b8b0:	b	2b36c <__assert_fail@plt+0x19e14>
   2b8b4:	mov	fp, #1
   2b8b8:	b	2b410 <__assert_fail@plt+0x19eb8>
   2b8bc:	cmp	r6, #0
   2b8c0:	mov	ip, #1
   2b8c4:	sbcs	r3, r7, #0
   2b8c8:	blt	2b8e8 <__assert_fail@plt+0x1a390>
   2b8cc:	mvn	r6, #0
   2b8d0:	mvn	r7, #-2147483648	; 0x80000000
   2b8d4:	b	2b40c <__assert_fail@plt+0x19eb4>
   2b8d8:	cmp	r0, #0
   2b8dc:	mov	ip, #1
   2b8e0:	sbcs	r3, r1, #0
   2b8e4:	bge	2b8cc <__assert_fail@plt+0x1a374>
   2b8e8:	mov	r6, #0
   2b8ec:	mov	r7, #-2147483648	; 0x80000000
   2b8f0:	b	2b40c <__assert_fail@plt+0x19eb4>
   2b8f4:	mov	fp, #2
   2b8f8:	mov	lr, #1000	; 0x3e8
   2b8fc:	b	2b214 <__assert_fail@plt+0x19cbc>
   2b900:	umull	r2, r3, r6, lr
   2b904:	cmp	r7, #0
   2b908:	strd	r2, [sp]
   2b90c:	umull	r2, r3, lr, r7
   2b910:	bge	2b91c <__assert_fail@plt+0x1a3c4>
   2b914:	subs	r2, r2, ip
   2b918:	sbc	r3, r3, lr
   2b91c:	ldr	lr, [sp, #4]
   2b920:	mov	sl, #0
   2b924:	adds	lr, r2, lr
   2b928:	adc	sl, r3, sl
   2b92c:	cmp	sl, lr, asr #31
   2b930:	bne	2be80 <__assert_fail@plt+0x1a928>
   2b934:	ldr	r1, [sp]
   2b938:	b	2b450 <__assert_fail@plt+0x19ef8>
   2b93c:	ldrb	r3, [r8, #2]
   2b940:	mov	lr, #1024	; 0x400
   2b944:	cmp	r3, #66	; 0x42
   2b948:	movne	fp, #1
   2b94c:	moveq	fp, #3
   2b950:	b	2b214 <__assert_fail@plt+0x19cbc>
   2b954:	cmp	r3, #0
   2b958:	umull	r6, r7, sl, lr
   2b95c:	umull	r2, r3, lr, r3
   2b960:	strd	r2, [sp, #8]
   2b964:	strd	r6, [sp, #16]
   2b968:	bge	2b980 <__assert_fail@plt+0x1a428>
   2b96c:	subs	r3, r2, ip
   2b970:	str	r3, [sp, #8]
   2b974:	ldr	r3, [sp, #12]
   2b978:	sbc	r3, r3, lr
   2b97c:	str	r3, [sp, #12]
   2b980:	ldr	r3, [sp, #8]
   2b984:	mov	lr, #0
   2b988:	ldr	r6, [sp, #20]
   2b98c:	adds	r2, r3, r6
   2b990:	ldr	r3, [sp, #12]
   2b994:	adc	lr, r3, lr
   2b998:	cmp	lr, r2, asr #31
   2b99c:	bne	2be14 <__assert_fail@plt+0x1a8bc>
   2b9a0:	ldr	lr, [sp, #16]
   2b9a4:	b	2b3fc <__assert_fail@plt+0x19ea4>
   2b9a8:	umull	r2, r3, r6, lr
   2b9ac:	cmp	r7, #0
   2b9b0:	strd	r2, [sp, #8]
   2b9b4:	umull	r2, r3, lr, r7
   2b9b8:	bge	2b9c4 <__assert_fail@plt+0x1a46c>
   2b9bc:	subs	r2, r2, r1
   2b9c0:	sbc	r3, r3, lr
   2b9c4:	ldr	r0, [sp, #12]
   2b9c8:	mov	ip, #0
   2b9cc:	adds	r0, r2, r0
   2b9d0:	adc	ip, r3, ip
   2b9d4:	cmp	ip, r0, asr #31
   2b9d8:	bne	2bd3c <__assert_fail@plt+0x1a7e4>
   2b9dc:	mov	r3, r0
   2b9e0:	ldr	ip, [sp, #8]
   2b9e4:	b	2b680 <__assert_fail@plt+0x1a128>
   2b9e8:	umull	r2, r3, r6, lr
   2b9ec:	cmp	r7, #0
   2b9f0:	strd	r2, [sp, #8]
   2b9f4:	umull	r2, r3, lr, r7
   2b9f8:	bge	2ba04 <__assert_fail@plt+0x1a4ac>
   2b9fc:	subs	r2, r2, r1
   2ba00:	sbc	r3, r3, lr
   2ba04:	ldr	r0, [sp, #12]
   2ba08:	mov	ip, #0
   2ba0c:	adds	r0, r2, r0
   2ba10:	adc	ip, r3, ip
   2ba14:	cmp	ip, r0, asr #31
   2ba18:	bne	2be9c <__assert_fail@plt+0x1a944>
   2ba1c:	mov	r3, r0
   2ba20:	ldr	ip, [sp, #8]
   2ba24:	b	2b5e0 <__assert_fail@plt+0x1a088>
   2ba28:	umull	r2, r3, r6, lr
   2ba2c:	cmp	r7, #0
   2ba30:	strd	r2, [sp, #8]
   2ba34:	umull	r2, r3, lr, r7
   2ba38:	bge	2ba44 <__assert_fail@plt+0x1a4ec>
   2ba3c:	subs	r2, r2, r1
   2ba40:	sbc	r3, r3, lr
   2ba44:	ldr	r0, [sp, #12]
   2ba48:	mov	ip, #0
   2ba4c:	adds	r0, r2, r0
   2ba50:	adc	ip, r3, ip
   2ba54:	cmp	ip, r0, asr #31
   2ba58:	bne	2bd84 <__assert_fail@plt+0x1a82c>
   2ba5c:	mov	r3, r0
   2ba60:	ldr	ip, [sp, #8]
   2ba64:	b	2b324 <__assert_fail@plt+0x19dcc>
   2ba68:	umull	r2, r3, r6, lr
   2ba6c:	cmp	r7, #0
   2ba70:	strd	r2, [sp, #8]
   2ba74:	umull	r2, r3, lr, r7
   2ba78:	bge	2ba84 <__assert_fail@plt+0x1a52c>
   2ba7c:	subs	r2, r2, r1
   2ba80:	sbc	r3, r3, lr
   2ba84:	ldr	r0, [sp, #12]
   2ba88:	mov	ip, #0
   2ba8c:	adds	r0, r2, r0
   2ba90:	adc	ip, r3, ip
   2ba94:	cmp	ip, r0, asr #31
   2ba98:	bne	2bf3c <__assert_fail@plt+0x1a9e4>
   2ba9c:	mov	r3, r0
   2baa0:	ldr	ip, [sp, #8]
   2baa4:	b	2b83c <__assert_fail@plt+0x1a2e4>
   2baa8:	umull	r2, r3, r6, lr
   2baac:	cmp	r7, #0
   2bab0:	strd	r2, [sp, #8]
   2bab4:	umull	r2, r3, lr, r7
   2bab8:	bge	2bac4 <__assert_fail@plt+0x1a56c>
   2babc:	subs	r2, r2, r1
   2bac0:	sbc	r3, r3, lr
   2bac4:	ldr	r0, [sp, #12]
   2bac8:	mov	ip, #0
   2bacc:	adds	r0, r2, r0
   2bad0:	adc	ip, r3, ip
   2bad4:	cmp	ip, r0, asr #31
   2bad8:	bne	2be38 <__assert_fail@plt+0x1a8e0>
   2badc:	mov	r3, r0
   2bae0:	ldr	ip, [sp, #8]
   2bae4:	b	2b51c <__assert_fail@plt+0x19fc4>
   2bae8:	umull	r2, r3, r6, lr
   2baec:	cmp	r7, #0
   2baf0:	strd	r2, [sp, #8]
   2baf4:	umull	r2, r3, lr, r7
   2baf8:	bge	2bb04 <__assert_fail@plt+0x1a5ac>
   2bafc:	subs	r2, r2, r1
   2bb00:	sbc	r3, r3, lr
   2bb04:	ldr	r0, [sp, #12]
   2bb08:	mov	ip, #0
   2bb0c:	adds	r0, r2, r0
   2bb10:	adc	ip, r3, ip
   2bb14:	cmp	ip, r0, asr #31
   2bb18:	bne	2bee4 <__assert_fail@plt+0x1a98c>
   2bb1c:	mov	r3, r0
   2bb20:	ldr	sl, [sp, #8]
   2bb24:	b	2b7dc <__assert_fail@plt+0x1a284>
   2bb28:	mov	r2, r6
   2bb2c:	mov	r3, #0
   2bb30:	mov	lr, #1024	; 0x400
   2bb34:	cmp	r7, #0
   2bb38:	strd	r2, [sp]
   2bb3c:	lsr	r3, r6, #22
   2bb40:	ldr	r2, [sp]
   2bb44:	umull	r0, r1, lr, r7
   2bb48:	lsl	r2, r2, #10
   2bb4c:	bge	2bb58 <__assert_fail@plt+0x1a600>
   2bb50:	subs	r0, r0, ip
   2bb54:	sbc	r1, r1, lr
   2bb58:	adds	r3, r0, r3
   2bb5c:	mov	lr, #0
   2bb60:	adc	r1, r1, lr
   2bb64:	cmp	r1, r3, asr #31
   2bb68:	beq	2b4e0 <__assert_fail@plt+0x19f88>
   2bb6c:	lsl	r3, r7, #10
   2bb70:	mov	ip, #1
   2bb74:	lsl	r2, r6, #10
   2bb78:	orr	r3, r3, r6, lsr #22
   2bb7c:	b	2b4e0 <__assert_fail@plt+0x19f88>
   2bb80:	umull	r2, r3, r6, lr
   2bb84:	cmp	r7, #0
   2bb88:	strd	r2, [sp, #8]
   2bb8c:	umull	r2, r3, lr, r7
   2bb90:	bge	2bb9c <__assert_fail@plt+0x1a644>
   2bb94:	subs	r2, r2, r1
   2bb98:	sbc	r3, r3, lr
   2bb9c:	ldr	r0, [sp, #12]
   2bba0:	mov	ip, #0
   2bba4:	adds	r0, r2, r0
   2bba8:	adc	ip, r3, ip
   2bbac:	cmp	ip, r0, asr #31
   2bbb0:	bne	2bf08 <__assert_fail@plt+0x1a9b0>
   2bbb4:	mov	r3, r0
   2bbb8:	ldr	ip, [sp, #8]
   2bbbc:	b	2b720 <__assert_fail@plt+0x1a1c8>
   2bbc0:	mov	lr, #2
   2bbc4:	mov	r3, #0
   2bbc8:	adds	ip, r6, r6
   2bbcc:	adc	r0, r3, r3
   2bbd0:	umull	r2, r3, lr, r7
   2bbd4:	cmp	r7, #0
   2bbd8:	strd	r2, [sp]
   2bbdc:	bge	2bbf4 <__assert_fail@plt+0x1a69c>
   2bbe0:	subs	r3, r2, r1
   2bbe4:	str	r3, [sp]
   2bbe8:	ldr	r3, [sp, #4]
   2bbec:	sbc	r3, r3, lr
   2bbf0:	str	r3, [sp, #4]
   2bbf4:	ldr	r3, [sp]
   2bbf8:	mov	lr, #0
   2bbfc:	adds	r2, r3, r0
   2bc00:	ldr	r3, [sp, #4]
   2bc04:	adc	r3, r3, lr
   2bc08:	cmp	r3, r2, asr #31
   2bc0c:	bne	2bf2c <__assert_fail@plt+0x1a9d4>
   2bc10:	mov	r3, r2
   2bc14:	b	2b4b0 <__assert_fail@plt+0x19f58>
   2bc18:	mov	r2, r6
   2bc1c:	mov	r3, #0
   2bc20:	mov	lr, #512	; 0x200
   2bc24:	cmp	r7, #0
   2bc28:	strd	r2, [sp]
   2bc2c:	lsr	r3, r6, #23
   2bc30:	ldr	r2, [sp]
   2bc34:	umull	r0, r1, lr, r7
   2bc38:	lsl	r2, r2, #9
   2bc3c:	bge	2bc48 <__assert_fail@plt+0x1a6f0>
   2bc40:	subs	r0, r0, ip
   2bc44:	sbc	r1, r1, lr
   2bc48:	adds	r3, r0, r3
   2bc4c:	mov	lr, #0
   2bc50:	adc	r1, r1, lr
   2bc54:	cmp	r1, r3, asr #31
   2bc58:	lslne	r3, r7, #9
   2bc5c:	movne	ip, #1
   2bc60:	lslne	r2, r6, #9
   2bc64:	orrne	r3, r3, r6, lsr #23
   2bc68:	b	2b4e0 <__assert_fail@plt+0x19f88>
   2bc6c:	umull	r0, r1, r6, lr
   2bc70:	cmp	r3, #0
   2bc74:	umull	r2, r3, lr, r3
   2bc78:	strd	r0, [sp, #16]
   2bc7c:	mov	r0, r2
   2bc80:	mov	r1, r3
   2bc84:	strd	r0, [sp, #8]
   2bc88:	bge	2bca0 <__assert_fail@plt+0x1a748>
   2bc8c:	subs	r3, r0, ip
   2bc90:	str	r3, [sp, #8]
   2bc94:	ldr	r3, [sp, #12]
   2bc98:	sbc	r3, r3, lr
   2bc9c:	str	r3, [sp, #12]
   2bca0:	ldr	r1, [sp, #8]
   2bca4:	mov	r2, #0
   2bca8:	ldr	r3, [sp, #20]
   2bcac:	adds	r3, r1, r3
   2bcb0:	ldr	r1, [sp, #12]
   2bcb4:	adc	r2, r1, r2
   2bcb8:	cmp	r2, r3, asr #31
   2bcbc:	bne	2be5c <__assert_fail@plt+0x1a904>
   2bcc0:	ldr	sl, [sp, #16]
   2bcc4:	b	2b540 <__assert_fail@plt+0x19fe8>
   2bcc8:	cmp	r3, #0
   2bccc:	umull	r6, r7, sl, lr
   2bcd0:	umull	r2, r3, lr, r3
   2bcd4:	strd	r2, [sp, #8]
   2bcd8:	strd	r6, [sp, #16]
   2bcdc:	bge	2bcf4 <__assert_fail@plt+0x1a79c>
   2bce0:	subs	r3, r2, ip
   2bce4:	str	r3, [sp, #8]
   2bce8:	ldr	r3, [sp, #12]
   2bcec:	sbc	r3, r3, lr
   2bcf0:	str	r3, [sp, #12]
   2bcf4:	ldr	r3, [sp, #8]
   2bcf8:	mov	lr, #0
   2bcfc:	ldr	r6, [sp, #20]
   2bd00:	adds	r2, r3, r6
   2bd04:	ldr	r3, [sp, #12]
   2bd08:	adc	lr, r3, lr
   2bd0c:	cmp	lr, r2, asr #31
   2bd10:	bne	2bf60 <__assert_fail@plt+0x1aa08>
   2bd14:	ldr	lr, [sp, #16]
   2bd18:	b	2b800 <__assert_fail@plt+0x1a2a8>
   2bd1c:	movw	r3, #59612	; 0xe8dc
   2bd20:	movt	r3, #2
   2bd24:	movw	r1, #59624	; 0xe8e8
   2bd28:	movt	r1, #2
   2bd2c:	movw	r0, #59640	; 0xe8f8
   2bd30:	movt	r0, #2
   2bd34:	mov	r2, #85	; 0x55
   2bd38:	bl	11558 <__assert_fail@plt>
   2bd3c:	ldrd	r2, [sp]
   2bd40:	mov	r1, #1
   2bd44:	ldr	ip, [sp]
   2bd48:	mul	r0, r6, r3
   2bd4c:	umull	r2, r3, r6, r2
   2bd50:	mla	r0, ip, r7, r0
   2bd54:	mov	ip, r2
   2bd58:	add	r3, r0, r3
   2bd5c:	b	2b680 <__assert_fail@plt+0x1a128>
   2bd60:	ldrd	r2, [sp]
   2bd64:	mov	ip, #1
   2bd68:	ldr	r1, [sp]
   2bd6c:	mul	r0, r6, r3
   2bd70:	umull	r2, r3, r6, r2
   2bd74:	mla	r0, r1, r7, r0
   2bd78:	mov	sl, r2
   2bd7c:	add	r3, r0, r3
   2bd80:	b	2b3d8 <__assert_fail@plt+0x19e80>
   2bd84:	ldrd	r2, [sp]
   2bd88:	mov	r1, #1
   2bd8c:	ldr	ip, [sp]
   2bd90:	mul	r0, r6, r3
   2bd94:	umull	r2, r3, r6, r2
   2bd98:	mla	r0, ip, r7, r0
   2bd9c:	mov	ip, r2
   2bda0:	add	r3, r0, r3
   2bda4:	b	2b324 <__assert_fail@plt+0x19dcc>
   2bda8:	ldrd	r2, [sp]
   2bdac:	mov	ip, #1
   2bdb0:	ldr	r1, [sp]
   2bdb4:	mul	r0, r6, r3
   2bdb8:	umull	r2, r3, r6, r2
   2bdbc:	mla	r0, r1, r7, r0
   2bdc0:	mov	sl, r2
   2bdc4:	add	r3, r0, r3
   2bdc8:	b	2b3b4 <__assert_fail@plt+0x19e5c>
   2bdcc:	ldrd	r2, [sp]
   2bdd0:	mov	ip, #1
   2bdd4:	ldr	r1, [sp]
   2bdd8:	mul	r0, r6, r3
   2bddc:	umull	r2, r3, r6, r2
   2bde0:	mla	r0, r1, r7, r0
   2bde4:	mov	sl, r2
   2bde8:	add	r3, r0, r3
   2bdec:	b	2b36c <__assert_fail@plt+0x19e14>
   2bdf0:	ldrd	r2, [sp]
   2bdf4:	mov	ip, #1
   2bdf8:	ldr	r1, [sp]
   2bdfc:	mul	r0, r6, r3
   2be00:	umull	r2, r3, r6, r2
   2be04:	mla	r0, r1, r7, r0
   2be08:	mov	sl, r2
   2be0c:	add	r3, r0, r3
   2be10:	b	2b390 <__assert_fail@plt+0x19e38>
   2be14:	ldrd	r2, [sp]
   2be18:	mov	ip, #1
   2be1c:	ldr	lr, [sp]
   2be20:	mul	r6, r0, r3
   2be24:	umull	r2, r3, r0, r2
   2be28:	mla	r6, lr, r1, r6
   2be2c:	mov	lr, r2
   2be30:	add	r2, r6, r3
   2be34:	b	2b3fc <__assert_fail@plt+0x19ea4>
   2be38:	ldrd	r2, [sp]
   2be3c:	mov	r1, #1
   2be40:	ldr	ip, [sp]
   2be44:	mul	r0, r6, r3
   2be48:	umull	r2, r3, r6, r2
   2be4c:	mla	r0, ip, r7, r0
   2be50:	mov	ip, r2
   2be54:	add	r3, r0, r3
   2be58:	b	2b51c <__assert_fail@plt+0x19fc4>
   2be5c:	ldrd	r2, [sp]
   2be60:	mov	ip, #1
   2be64:	ldr	r1, [sp]
   2be68:	mul	r0, r6, r3
   2be6c:	umull	r2, r3, r6, r2
   2be70:	mla	r0, r1, r7, r0
   2be74:	mov	sl, r2
   2be78:	add	r3, r0, r3
   2be7c:	b	2b540 <__assert_fail@plt+0x19fe8>
   2be80:	mul	lr, r6, r1
   2be84:	mov	ip, #1
   2be88:	umull	r2, r3, r6, r0
   2be8c:	mla	lr, r0, r7, lr
   2be90:	mov	r1, r2
   2be94:	add	lr, lr, r3
   2be98:	b	2b450 <__assert_fail@plt+0x19ef8>
   2be9c:	ldrd	r2, [sp]
   2bea0:	mov	r1, #1
   2bea4:	ldr	ip, [sp]
   2bea8:	mul	r0, r6, r3
   2beac:	umull	r2, r3, r6, r2
   2beb0:	mla	r0, ip, r7, r0
   2beb4:	mov	ip, r2
   2beb8:	add	r3, r0, r3
   2bebc:	b	2b5e0 <__assert_fail@plt+0x1a088>
   2bec0:	ldrd	r2, [sp]
   2bec4:	mov	ip, #1
   2bec8:	ldr	r1, [sp]
   2becc:	mul	r0, r6, r3
   2bed0:	umull	r2, r3, r6, r2
   2bed4:	mla	r0, r1, r7, r0
   2bed8:	mov	sl, r2
   2bedc:	add	r3, r0, r3
   2bee0:	b	2b348 <__assert_fail@plt+0x19df0>
   2bee4:	ldrd	r2, [sp]
   2bee8:	mov	r1, #1
   2beec:	ldr	ip, [sp]
   2bef0:	mul	r0, r6, r3
   2bef4:	umull	r2, r3, r6, r2
   2bef8:	mla	r0, ip, r7, r0
   2befc:	mov	sl, r2
   2bf00:	add	r3, r0, r3
   2bf04:	b	2b7dc <__assert_fail@plt+0x1a284>
   2bf08:	ldrd	r2, [sp]
   2bf0c:	mov	r1, #1
   2bf10:	ldr	ip, [sp]
   2bf14:	mul	r0, r6, r3
   2bf18:	umull	r2, r3, r6, r2
   2bf1c:	mla	r0, ip, r7, r0
   2bf20:	mov	ip, r2
   2bf24:	add	r3, r0, r3
   2bf28:	b	2b720 <__assert_fail@plt+0x1a1c8>
   2bf2c:	adds	ip, r6, r6
   2bf30:	mov	r1, #1
   2bf34:	adc	r3, r7, r7
   2bf38:	b	2b4b0 <__assert_fail@plt+0x19f58>
   2bf3c:	ldrd	r2, [sp]
   2bf40:	mov	r1, #1
   2bf44:	ldr	ip, [sp]
   2bf48:	mul	r0, r6, r3
   2bf4c:	umull	r2, r3, r6, r2
   2bf50:	mla	r0, ip, r7, r0
   2bf54:	mov	ip, r2
   2bf58:	add	r3, r0, r3
   2bf5c:	b	2b83c <__assert_fail@plt+0x1a2e4>
   2bf60:	ldrd	r2, [sp]
   2bf64:	mov	ip, #1
   2bf68:	ldr	lr, [sp]
   2bf6c:	mul	r6, r0, r3
   2bf70:	umull	r2, r3, r0, r2
   2bf74:	mla	r6, lr, r1, r6
   2bf78:	mov	lr, r2
   2bf7c:	add	r3, r6, r3
   2bf80:	mov	r2, r3
   2bf84:	b	2b800 <__assert_fail@plt+0x1a2a8>
   2bf88:	cmp	r2, #36	; 0x24
   2bf8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bf90:	strd	r6, [sp, #8]
   2bf94:	strd	r8, [sp, #16]
   2bf98:	strd	sl, [sp, #24]
   2bf9c:	str	lr, [sp, #32]
   2bfa0:	sub	sp, sp, #36	; 0x24
   2bfa4:	bhi	2cc1c <__assert_fail@plt+0x1b6c4>
   2bfa8:	cmp	r1, #0
   2bfac:	mov	r6, r2
   2bfb0:	mov	r5, r1
   2bfb4:	mov	sl, r0
   2bfb8:	addeq	r5, sp, #28
   2bfbc:	mov	r9, r3
   2bfc0:	bl	1142c <__errno_location@plt>
   2bfc4:	mov	r3, #0
   2bfc8:	mov	fp, r0
   2bfcc:	str	r3, [r0]
   2bfd0:	ldrb	r4, [sl]
   2bfd4:	bl	113fc <__ctype_b_loc@plt>
   2bfd8:	ldr	r2, [r0]
   2bfdc:	lsl	r3, r4, #1
   2bfe0:	ldrh	r3, [r2, r3]
   2bfe4:	tst	r3, #8192	; 0x2000
   2bfe8:	beq	2c004 <__assert_fail@plt+0x1aaac>
   2bfec:	mov	r3, sl
   2bff0:	ldrb	r4, [r3, #1]!
   2bff4:	lsl	r1, r4, #1
   2bff8:	ldrh	r1, [r2, r1]
   2bffc:	tst	r1, #8192	; 0x2000
   2c000:	bne	2bff0 <__assert_fail@plt+0x1aa98>
   2c004:	cmp	r4, #45	; 0x2d
   2c008:	beq	2c0a4 <__assert_fail@plt+0x1ab4c>
   2c00c:	mov	r2, r6
   2c010:	mov	r3, #0
   2c014:	mov	r1, r5
   2c018:	mov	r0, sl
   2c01c:	bl	1127c <__strtoull_internal@plt>
   2c020:	ldr	r8, [r5]
   2c024:	mov	r6, r0
   2c028:	mov	r7, r1
   2c02c:	cmp	r8, sl
   2c030:	beq	2c08c <__assert_fail@plt+0x1ab34>
   2c034:	ldr	r4, [fp]
   2c038:	cmp	r4, #0
   2c03c:	bne	2c07c <__assert_fail@plt+0x1ab24>
   2c040:	ldr	r3, [sp, #72]	; 0x48
   2c044:	cmp	r3, #0
   2c048:	beq	2c058 <__assert_fail@plt+0x1ab00>
   2c04c:	ldrb	sl, [r8]
   2c050:	cmp	sl, #0
   2c054:	bne	2c410 <__assert_fail@plt+0x1aeb8>
   2c058:	strd	r6, [r9]
   2c05c:	mov	r0, r4
   2c060:	add	sp, sp, #36	; 0x24
   2c064:	ldrd	r4, [sp]
   2c068:	ldrd	r6, [sp, #8]
   2c06c:	ldrd	r8, [sp, #16]
   2c070:	ldrd	sl, [sp, #24]
   2c074:	add	sp, sp, #32
   2c078:	pop	{pc}		; (ldr pc, [sp], #4)
   2c07c:	cmp	r4, #34	; 0x22
   2c080:	bne	2c0a4 <__assert_fail@plt+0x1ab4c>
   2c084:	mov	r4, #1
   2c088:	b	2c040 <__assert_fail@plt+0x1aae8>
   2c08c:	ldr	r3, [sp, #72]	; 0x48
   2c090:	cmp	r3, #0
   2c094:	beq	2c0a4 <__assert_fail@plt+0x1ab4c>
   2c098:	ldrb	sl, [sl]
   2c09c:	cmp	sl, #0
   2c0a0:	bne	2c0ac <__assert_fail@plt+0x1ab54>
   2c0a4:	mov	r4, #4
   2c0a8:	b	2c05c <__assert_fail@plt+0x1ab04>
   2c0ac:	mov	r1, sl
   2c0b0:	mov	r0, r3
   2c0b4:	bl	11420 <strchr@plt>
   2c0b8:	cmp	r0, #0
   2c0bc:	movne	r4, #0
   2c0c0:	movne	r6, #1
   2c0c4:	movne	r7, r4
   2c0c8:	beq	2c0a4 <__assert_fail@plt+0x1ab4c>
   2c0cc:	sub	r3, sl, #69	; 0x45
   2c0d0:	cmp	r3, #47	; 0x2f
   2c0d4:	ldrls	pc, [pc, r3, lsl #2]
   2c0d8:	b	2c1e0 <__assert_fail@plt+0x1ac88>
   2c0dc:	muleq	r2, ip, r1
   2c0e0:	andeq	ip, r2, r0, ror #3
   2c0e4:	muleq	r2, ip, r1
   2c0e8:	andeq	ip, r2, r0, ror #3
   2c0ec:	andeq	ip, r2, r0, ror #3
   2c0f0:	andeq	ip, r2, r0, ror #3
   2c0f4:	muleq	r2, ip, r1
   2c0f8:	andeq	ip, r2, r0, ror #3
   2c0fc:	muleq	r2, ip, r1
   2c100:	andeq	ip, r2, r0, ror #3
   2c104:	andeq	ip, r2, r0, ror #3
   2c108:	muleq	r2, ip, r1
   2c10c:	andeq	ip, r2, r0, ror #3
   2c110:	andeq	ip, r2, r0, ror #3
   2c114:	andeq	ip, r2, r0, ror #3
   2c118:	muleq	r2, ip, r1
   2c11c:	andeq	ip, r2, r0, ror #3
   2c120:	andeq	ip, r2, r0, ror #3
   2c124:	andeq	ip, r2, r0, ror #3
   2c128:	andeq	ip, r2, r0, ror #3
   2c12c:	muleq	r2, ip, r1
   2c130:	muleq	r2, ip, r1
   2c134:	andeq	ip, r2, r0, ror #3
   2c138:	andeq	ip, r2, r0, ror #3
   2c13c:	andeq	ip, r2, r0, ror #3
   2c140:	andeq	ip, r2, r0, ror #3
   2c144:	andeq	ip, r2, r0, ror #3
   2c148:	andeq	ip, r2, r0, ror #3
   2c14c:	andeq	ip, r2, r0, ror #3
   2c150:	andeq	ip, r2, r0, ror #3
   2c154:	andeq	ip, r2, r0, ror #3
   2c158:	andeq	ip, r2, r0, ror #3
   2c15c:	andeq	ip, r2, r0, ror #3
   2c160:	andeq	ip, r2, r0, ror #3
   2c164:	muleq	r2, ip, r1
   2c168:	andeq	ip, r2, r0, ror #3
   2c16c:	andeq	ip, r2, r0, ror #3
   2c170:	andeq	ip, r2, r0, ror #3
   2c174:	muleq	r2, ip, r1
   2c178:	andeq	ip, r2, r0, ror #3
   2c17c:	muleq	r2, ip, r1
   2c180:	andeq	ip, r2, r0, ror #3
   2c184:	andeq	ip, r2, r0, ror #3
   2c188:	andeq	ip, r2, r0, ror #3
   2c18c:	andeq	ip, r2, r0, ror #3
   2c190:	andeq	ip, r2, r0, ror #3
   2c194:	andeq	ip, r2, r0, ror #3
   2c198:	muleq	r2, ip, r1
   2c19c:	mov	r1, #48	; 0x30
   2c1a0:	ldr	r0, [sp, #72]	; 0x48
   2c1a4:	bl	11420 <strchr@plt>
   2c1a8:	cmp	r0, #0
   2c1ac:	beq	2c1e0 <__assert_fail@plt+0x1ac88>
   2c1b0:	ldrb	r3, [r8, #1]
   2c1b4:	cmp	r3, #68	; 0x44
   2c1b8:	beq	2c770 <__assert_fail@plt+0x1b218>
   2c1bc:	cmp	r3, #105	; 0x69
   2c1c0:	beq	2c428 <__assert_fail@plt+0x1aed0>
   2c1c4:	cmp	r3, #66	; 0x42
   2c1c8:	moveq	r3, #2
   2c1cc:	movne	r3, #1
   2c1d0:	moveq	ip, #1000	; 0x3e8
   2c1d4:	movne	ip, #1024	; 0x400
   2c1d8:	str	r3, [sp, #12]
   2c1dc:	b	2c1ec <__assert_fail@plt+0x1ac94>
   2c1e0:	mov	r3, #1
   2c1e4:	mov	ip, #1024	; 0x400
   2c1e8:	str	r3, [sp, #12]
   2c1ec:	sub	sl, sl, #66	; 0x42
   2c1f0:	cmp	sl, #53	; 0x35
   2c1f4:	ldrls	pc, [pc, sl, lsl #2]
   2c1f8:	b	2c3d4 <__assert_fail@plt+0x1ae7c>
   2c1fc:			; <UNDEFINED> instruction: 0x0002c6bc
   2c200:	ldrdeq	ip, [r2], -r4
   2c204:	ldrdeq	ip, [r2], -r4
   2c208:	andeq	ip, r2, ip, asr r6
   2c20c:	ldrdeq	ip, [r2], -r4
   2c210:	ldrdeq	ip, [r2], -r8
   2c214:	ldrdeq	ip, [r2], -r4
   2c218:	ldrdeq	ip, [r2], -r4
   2c21c:	ldrdeq	ip, [r2], -r4
   2c220:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c224:	ldrdeq	ip, [r2], -r4
   2c228:	andeq	ip, r2, r4, lsl #12
   2c22c:	ldrdeq	ip, [r2], -r4
   2c230:	ldrdeq	ip, [r2], -r4
   2c234:	andeq	ip, r2, r8, lsr #11
   2c238:	ldrdeq	ip, [r2], -r4
   2c23c:	ldrdeq	ip, [r2], -r4
   2c240:	ldrdeq	ip, [r2], -r4
   2c244:	andeq	ip, r2, r8, asr #10
   2c248:	ldrdeq	ip, [r2], -r4
   2c24c:	ldrdeq	ip, [r2], -r4
   2c250:	ldrdeq	ip, [r2], -r4
   2c254:	ldrdeq	ip, [r2], -r4
   2c258:	andeq	ip, r2, ip, ror r4
   2c25c:	ldrdeq	ip, [r2], -r4
   2c260:	ldrdeq	ip, [r2], -r4
   2c264:	ldrdeq	ip, [r2], -r4
   2c268:	ldrdeq	ip, [r2], -r4
   2c26c:	ldrdeq	ip, [r2], -r4
   2c270:	ldrdeq	ip, [r2], -r4
   2c274:	ldrdeq	ip, [r2], -r4
   2c278:	ldrdeq	ip, [r2], -r4
   2c27c:	andeq	ip, r2, ip, asr r4
   2c280:			; <UNDEFINED> instruction: 0x0002c3bc
   2c284:	ldrdeq	ip, [r2], -r4
   2c288:	ldrdeq	ip, [r2], -r4
   2c28c:	ldrdeq	ip, [r2], -r4
   2c290:	ldrdeq	ip, [r2], -r8
   2c294:	ldrdeq	ip, [r2], -r4
   2c298:	ldrdeq	ip, [r2], -r4
   2c29c:	ldrdeq	ip, [r2], -r4
   2c2a0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c2a4:	ldrdeq	ip, [r2], -r4
   2c2a8:	andeq	ip, r2, r4, lsl #12
   2c2ac:	ldrdeq	ip, [r2], -r4
   2c2b0:	ldrdeq	ip, [r2], -r4
   2c2b4:	ldrdeq	ip, [r2], -r4
   2c2b8:	ldrdeq	ip, [r2], -r4
   2c2bc:	ldrdeq	ip, [r2], -r4
   2c2c0:	ldrdeq	ip, [r2], -r4
   2c2c4:	andeq	ip, r2, r8, asr #10
   2c2c8:	ldrdeq	ip, [r2], -r4
   2c2cc:	ldrdeq	ip, [r2], -r4
   2c2d0:	andeq	ip, r2, r4, asr #8
   2c2d4:	asr	r3, ip, #31
   2c2d8:	mov	r2, ip
   2c2dc:	cmp	r7, #0
   2c2e0:	mov	r1, #0
   2c2e4:	strd	r2, [sp]
   2c2e8:	bne	2c828 <__assert_fail@plt+0x1b2d0>
   2c2ec:	umull	r6, r7, r6, ip
   2c2f0:	mov	r2, r6
   2c2f4:	mov	r3, r7
   2c2f8:	cmp	r1, #0
   2c2fc:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c300:	cmp	r3, #0
   2c304:	mov	lr, r1
   2c308:	bne	2c954 <__assert_fail@plt+0x1b3fc>
   2c30c:	umull	r2, r3, r2, ip
   2c310:	mov	r0, r2
   2c314:	mov	r1, r3
   2c318:	cmp	lr, #0
   2c31c:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c320:	cmp	r1, #0
   2c324:	bne	2c930 <__assert_fail@plt+0x1b3d8>
   2c328:	umull	r0, r1, r0, ip
   2c32c:	mov	r2, r0
   2c330:	mov	r3, r1
   2c334:	cmp	lr, #0
   2c338:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c33c:	cmp	r3, #0
   2c340:	bne	2c5e0 <__assert_fail@plt+0x1b088>
   2c344:	umull	r2, r3, r2, ip
   2c348:	mov	r0, r2
   2c34c:	mov	r1, r3
   2c350:	cmp	lr, #0
   2c354:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c358:	cmp	r1, #0
   2c35c:	bne	2c7e0 <__assert_fail@plt+0x1b288>
   2c360:	umull	r0, r1, r0, ip
   2c364:	mov	r2, r0
   2c368:	mov	r3, r1
   2c36c:	cmp	lr, #0
   2c370:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c374:	cmp	r3, #0
   2c378:	mov	r7, lr
   2c37c:	bne	2c7bc <__assert_fail@plt+0x1b264>
   2c380:	umull	r2, r3, r2, ip
   2c384:	mov	r6, r2
   2c388:	mov	lr, r3
   2c38c:	cmp	r7, #0
   2c390:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c394:	cmp	lr, #0
   2c398:	bne	2c780 <__assert_fail@plt+0x1b228>
   2c39c:	umull	r2, r3, r6, ip
   2c3a0:	mov	r0, r2
   2c3a4:	mov	r2, r3
   2c3a8:	subs	r3, r7, #0
   2c3ac:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c3b0:	mov	r6, r0
   2c3b4:	mov	r7, r2
   2c3b8:	orr	r4, r4, r3
   2c3bc:	ldr	r2, [sp, #12]
   2c3c0:	add	r3, r8, r2
   2c3c4:	str	r3, [r5]
   2c3c8:	ldrb	r3, [r8, r2]
   2c3cc:	cmp	r3, #0
   2c3d0:	beq	2c058 <__assert_fail@plt+0x1ab00>
   2c3d4:	orr	r4, r4, #2
   2c3d8:	b	2c058 <__assert_fail@plt+0x1ab00>
   2c3dc:	cmp	r7, #0
   2c3e0:	asr	r1, ip, #31
   2c3e4:	mov	lr, #0
   2c3e8:	bne	2c74c <__assert_fail@plt+0x1b1f4>
   2c3ec:	umull	r2, r3, r6, ip
   2c3f0:	mov	r6, r2
   2c3f4:	mov	r7, r3
   2c3f8:	cmp	lr, #0
   2c3fc:	beq	2c3bc <__assert_fail@plt+0x1ae64>
   2c400:	mvn	r6, #0
   2c404:	mov	r4, #1
   2c408:	mov	r7, r6
   2c40c:	b	2c3bc <__assert_fail@plt+0x1ae64>
   2c410:	mov	r0, r3
   2c414:	mov	r1, sl
   2c418:	bl	11420 <strchr@plt>
   2c41c:	cmp	r0, #0
   2c420:	bne	2c0cc <__assert_fail@plt+0x1ab74>
   2c424:	b	2c3d4 <__assert_fail@plt+0x1ae7c>
   2c428:	ldrb	r3, [r8, #2]
   2c42c:	mov	ip, #1024	; 0x400
   2c430:	cmp	r3, #66	; 0x42
   2c434:	movne	r3, #1
   2c438:	moveq	r3, #3
   2c43c:	str	r3, [sp, #12]
   2c440:	b	2c1ec <__assert_fail@plt+0x1ac94>
   2c444:	lsr	r3, r7, #31
   2c448:	adds	r6, r6, r6
   2c44c:	adc	r7, r7, r7
   2c450:	cmp	r3, #0
   2c454:	beq	2c3bc <__assert_fail@plt+0x1ae64>
   2c458:	b	2c400 <__assert_fail@plt+0x1aea8>
   2c45c:	lsr	r3, r7, #23
   2c460:	lsl	r7, r7, #9
   2c464:	cmp	r3, #0
   2c468:	lsl	r3, r6, #9
   2c46c:	orr	r7, r7, r6, lsr #23
   2c470:	bne	2c400 <__assert_fail@plt+0x1aea8>
   2c474:	mov	r6, r3
   2c478:	b	2c3bc <__assert_fail@plt+0x1ae64>
   2c47c:	asr	r3, ip, #31
   2c480:	mov	r2, ip
   2c484:	cmp	r7, #0
   2c488:	mov	r1, #0
   2c48c:	strd	r2, [sp]
   2c490:	bne	2c89c <__assert_fail@plt+0x1b344>
   2c494:	umull	r6, r7, r6, ip
   2c498:	mov	r0, r6
   2c49c:	mov	fp, r7
   2c4a0:	cmp	r1, #0
   2c4a4:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c4a8:	cmp	fp, #0
   2c4ac:	mov	lr, r1
   2c4b0:	bne	2ca2c <__assert_fail@plt+0x1b4d4>
   2c4b4:	umull	r0, r1, r0, ip
   2c4b8:	mov	r2, r0
   2c4bc:	mov	r3, r1
   2c4c0:	cmp	lr, #0
   2c4c4:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c4c8:	cmp	r3, #0
   2c4cc:	bne	2ca54 <__assert_fail@plt+0x1b4fc>
   2c4d0:	umull	r2, r3, r2, ip
   2c4d4:	mov	r0, r2
   2c4d8:	mov	r1, r3
   2c4dc:	cmp	lr, #0
   2c4e0:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c4e4:	cmp	r1, #0
   2c4e8:	bne	2c9d4 <__assert_fail@plt+0x1b47c>
   2c4ec:	umull	r0, r1, r0, ip
   2c4f0:	mov	r2, r0
   2c4f4:	mov	r3, r1
   2c4f8:	cmp	lr, #0
   2c4fc:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c500:	cmp	r3, #0
   2c504:	bne	2c804 <__assert_fail@plt+0x1b2ac>
   2c508:	umull	r2, r3, r2, ip
   2c50c:	mov	r0, r2
   2c510:	mov	r1, r3
   2c514:	cmp	lr, #0
   2c518:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c51c:	cmp	r1, #0
   2c520:	beq	2c360 <__assert_fail@plt+0x1ae08>
   2c524:	umull	r6, r7, r0, ip
   2c528:	mov	fp, lr
   2c52c:	mov	sl, r7
   2c530:	umlal	sl, fp, r1, ip
   2c534:	cmp	fp, #0
   2c538:	bne	2cc3c <__assert_fail@plt+0x1b6e4>
   2c53c:	mov	r2, r6
   2c540:	mov	r3, sl
   2c544:	b	2c36c <__assert_fail@plt+0x1ae14>
   2c548:	asr	r3, ip, #31
   2c54c:	mov	r2, ip
   2c550:	cmp	r7, #0
   2c554:	mov	r1, #0
   2c558:	strd	r2, [sp]
   2c55c:	bne	2c8c0 <__assert_fail@plt+0x1b368>
   2c560:	umull	r6, r7, r6, ip
   2c564:	mov	r0, r6
   2c568:	mov	fp, r7
   2c56c:	cmp	r1, #0
   2c570:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c574:	cmp	fp, #0
   2c578:	mov	lr, r1
   2c57c:	beq	2c360 <__assert_fail@plt+0x1ae08>
   2c580:	umull	r6, r7, r0, ip
   2c584:	mov	r3, r1
   2c588:	mov	r2, r7
   2c58c:	umlal	r2, r3, fp, ip
   2c590:	cmp	r3, #0
   2c594:	strd	r2, [sp, #16]
   2c598:	bne	2cb20 <__assert_fail@plt+0x1b5c8>
   2c59c:	mov	r2, r6
   2c5a0:	ldr	r3, [sp, #16]
   2c5a4:	b	2c36c <__assert_fail@plt+0x1ae14>
   2c5a8:	asr	r3, ip, #31
   2c5ac:	mov	r2, ip
   2c5b0:	cmp	r7, #0
   2c5b4:	mov	r1, #0
   2c5b8:	strd	r2, [sp]
   2c5bc:	bne	2c908 <__assert_fail@plt+0x1b3b0>
   2c5c0:	umull	r6, r7, r6, ip
   2c5c4:	mov	r2, r6
   2c5c8:	mov	r3, r7
   2c5cc:	cmp	r1, #0
   2c5d0:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c5d4:	cmp	r3, #0
   2c5d8:	mov	lr, r1
   2c5dc:	beq	2c344 <__assert_fail@plt+0x1adec>
   2c5e0:	umull	r6, r7, r2, ip
   2c5e4:	mov	fp, lr
   2c5e8:	mov	sl, r7
   2c5ec:	umlal	sl, fp, r3, ip
   2c5f0:	cmp	fp, #0
   2c5f4:	bne	2cc00 <__assert_fail@plt+0x1b6a8>
   2c5f8:	mov	r0, r6
   2c5fc:	mov	r1, sl
   2c600:	b	2c350 <__assert_fail@plt+0x1adf8>
   2c604:	asr	r3, ip, #31
   2c608:	mov	r2, ip
   2c60c:	cmp	r7, #0
   2c610:	mov	r1, #0
   2c614:	strd	r2, [sp]
   2c618:	bne	2c8e4 <__assert_fail@plt+0x1b38c>
   2c61c:	umull	r6, r7, r6, ip
   2c620:	mov	sl, r6
   2c624:	mov	lr, r7
   2c628:	cmp	r1, #0
   2c62c:	bne	2c400 <__assert_fail@plt+0x1aea8>
   2c630:	cmp	lr, #0
   2c634:	mov	r7, r1
   2c638:	bne	2c9f8 <__assert_fail@plt+0x1b4a0>
   2c63c:	umull	sl, fp, sl, ip
   2c640:	mov	r0, sl
   2c644:	mov	r2, fp
   2c648:	cmp	r7, #0
   2c64c:	mov	r6, r0
   2c650:	mov	r7, r2
   2c654:	beq	2c3bc <__assert_fail@plt+0x1ae64>
   2c658:	b	2c400 <__assert_fail@plt+0x1aea8>
   2c65c:	asr	r3, ip, #31
   2c660:	mov	r2, ip
   2c664:	cmp	r7, #0
   2c668:	mov	r1, #0
   2c66c:	strd	r2, [sp]
   2c670:	bne	2c878 <__assert_fail@plt+0x1b320>
   2c674:	umull	r6, r7, r6, ip
   2c678:	mov	r0, r6
   2c67c:	mov	fp, r7
   2c680:	cmp	r1, #0
   2c684:	bne	2c73c <__assert_fail@plt+0x1b1e4>
   2c688:	cmp	fp, #0
   2c68c:	mov	lr, r1
   2c690:	beq	2c4ec <__assert_fail@plt+0x1af94>
   2c694:	umull	r6, r7, r0, ip
   2c698:	mov	r3, r1
   2c69c:	mov	r2, r7
   2c6a0:	umlal	r2, r3, fp, ip
   2c6a4:	cmp	r3, #0
   2c6a8:	strd	r2, [sp, #16]
   2c6ac:	bne	2cb90 <__assert_fail@plt+0x1b638>
   2c6b0:	mov	r2, r6
   2c6b4:	ldr	r3, [sp, #16]
   2c6b8:	b	2c4f8 <__assert_fail@plt+0x1afa0>
   2c6bc:	lsr	r3, r7, #22
   2c6c0:	lsl	r7, r7, #10
   2c6c4:	cmp	r3, #0
   2c6c8:	lsl	r3, r6, #10
   2c6cc:	orr	r7, r7, r6, lsr #22
   2c6d0:	beq	2c474 <__assert_fail@plt+0x1af1c>
   2c6d4:	b	2c400 <__assert_fail@plt+0x1aea8>
   2c6d8:	asr	r3, ip, #31
   2c6dc:	mov	r2, ip
   2c6e0:	cmp	r7, #0
   2c6e4:	mov	r1, #0
   2c6e8:	strd	r2, [sp]
   2c6ec:	bne	2c850 <__assert_fail@plt+0x1b2f8>
   2c6f0:	umull	r6, r7, r6, ip
   2c6f4:	mov	r2, r6
   2c6f8:	mov	r3, r7
   2c6fc:	cmp	r1, #0
   2c700:	bne	2c400 <__assert_fail@plt+0x1aea8>
   2c704:	cmp	r3, #0
   2c708:	mov	r7, r1
   2c70c:	bne	2c9b4 <__assert_fail@plt+0x1b45c>
   2c710:	umull	r2, r3, r2, ip
   2c714:	mov	r6, r2
   2c718:	mov	lr, r3
   2c71c:	cmp	r7, #0
   2c720:	bne	2c400 <__assert_fail@plt+0x1aea8>
   2c724:	cmp	lr, #0
   2c728:	bne	2c978 <__assert_fail@plt+0x1b420>
   2c72c:	umull	r2, r3, r6, ip
   2c730:	mov	r0, r2
   2c734:	mov	r2, r3
   2c738:	b	2c648 <__assert_fail@plt+0x1b0f0>
   2c73c:	mvn	r6, #0
   2c740:	mov	r3, #1
   2c744:	mov	r7, r6
   2c748:	b	2c3b8 <__assert_fail@plt+0x1ae60>
   2c74c:	umull	sl, fp, r6, ip
   2c750:	mov	r3, lr
   2c754:	mov	r2, fp
   2c758:	umlal	r2, r3, r7, ip
   2c75c:	cmp	r3, #0
   2c760:	bne	2cb58 <__assert_fail@plt+0x1b600>
   2c764:	mov	r6, sl
   2c768:	mov	r7, r2
   2c76c:	b	2c3f8 <__assert_fail@plt+0x1aea0>
   2c770:	mov	r3, #2
   2c774:	mov	ip, #1000	; 0x3e8
   2c778:	str	r3, [sp, #12]
   2c77c:	b	2c1ec <__assert_fail@plt+0x1ac94>
   2c780:	umull	r0, r1, r6, ip
   2c784:	mov	r3, r7
   2c788:	mov	r2, r1
   2c78c:	strd	r0, [sp, #16]
   2c790:	umlal	r2, r3, lr, ip
   2c794:	cmp	r3, #0
   2c798:	beq	2c3a8 <__assert_fail@plt+0x1ae50>
   2c79c:	ldrd	sl, [sp]
   2c7a0:	mov	r7, #1
   2c7a4:	ldr	r0, [sp, #16]
   2c7a8:	ldr	r3, [sp, #20]
   2c7ac:	mul	r2, r6, fp
   2c7b0:	mla	r2, lr, sl, r2
   2c7b4:	add	r2, r2, r3
   2c7b8:	b	2c3a8 <__assert_fail@plt+0x1ae50>
   2c7bc:	umull	sl, fp, r2, ip
   2c7c0:	mov	r1, lr
   2c7c4:	mov	r0, fp
   2c7c8:	umlal	r0, r1, r3, ip
   2c7cc:	cmp	r1, #0
   2c7d0:	bne	2cab0 <__assert_fail@plt+0x1b558>
   2c7d4:	mov	r6, sl
   2c7d8:	mov	lr, r0
   2c7dc:	b	2c38c <__assert_fail@plt+0x1ae34>
   2c7e0:	umull	sl, fp, r0, ip
   2c7e4:	mov	r7, lr
   2c7e8:	mov	r6, fp
   2c7ec:	umlal	r6, r7, r1, ip
   2c7f0:	cmp	r7, #0
   2c7f4:	bne	2cc58 <__assert_fail@plt+0x1b700>
   2c7f8:	mov	r2, sl
   2c7fc:	mov	r3, r6
   2c800:	b	2c36c <__assert_fail@plt+0x1ae14>
   2c804:	umull	sl, fp, r2, ip
   2c808:	mov	r7, lr
   2c80c:	mov	r6, fp
   2c810:	umlal	r6, r7, r3, ip
   2c814:	cmp	r7, #0
   2c818:	bne	2cae8 <__assert_fail@plt+0x1b590>
   2c81c:	mov	r0, sl
   2c820:	mov	r1, r6
   2c824:	b	2c514 <__assert_fail@plt+0x1afbc>
   2c828:	umull	sl, fp, r6, ip
   2c82c:	mov	r3, r1
   2c830:	mov	r2, fp
   2c834:	umlal	r2, r3, r7, ip
   2c838:	cmp	r3, #0
   2c83c:	strd	r2, [sp, #16]
   2c840:	bne	2cacc <__assert_fail@plt+0x1b574>
   2c844:	mov	r2, sl
   2c848:	ldr	r3, [sp, #16]
   2c84c:	b	2c2f8 <__assert_fail@plt+0x1ada0>
   2c850:	umull	sl, fp, r6, ip
   2c854:	mov	r3, r1
   2c858:	mov	r2, fp
   2c85c:	umlal	r2, r3, r7, ip
   2c860:	cmp	r3, #0
   2c864:	strd	r2, [sp, #16]
   2c868:	bne	2cbac <__assert_fail@plt+0x1b654>
   2c86c:	mov	r2, sl
   2c870:	ldr	r3, [sp, #16]
   2c874:	b	2c6fc <__assert_fail@plt+0x1b1a4>
   2c878:	umull	sl, fp, r6, ip
   2c87c:	mov	r3, r1
   2c880:	mov	r2, fp
   2c884:	umlal	r2, r3, r7, ip
   2c888:	cmp	r3, #0
   2c88c:	bne	2ca78 <__assert_fail@plt+0x1b520>
   2c890:	mov	r0, sl
   2c894:	mov	fp, r2
   2c898:	b	2c680 <__assert_fail@plt+0x1b128>
   2c89c:	umull	sl, fp, r6, ip
   2c8a0:	mov	r3, r1
   2c8a4:	mov	r2, fp
   2c8a8:	umlal	r2, r3, r7, ip
   2c8ac:	cmp	r3, #0
   2c8b0:	bne	2cb3c <__assert_fail@plt+0x1b5e4>
   2c8b4:	mov	r0, sl
   2c8b8:	mov	fp, r2
   2c8bc:	b	2c4a0 <__assert_fail@plt+0x1af48>
   2c8c0:	umull	sl, fp, r6, ip
   2c8c4:	mov	r3, r1
   2c8c8:	mov	r2, fp
   2c8cc:	umlal	r2, r3, r7, ip
   2c8d0:	cmp	r3, #0
   2c8d4:	bne	2cbc8 <__assert_fail@plt+0x1b670>
   2c8d8:	mov	r0, sl
   2c8dc:	mov	fp, r2
   2c8e0:	b	2c56c <__assert_fail@plt+0x1b014>
   2c8e4:	umull	sl, fp, r6, ip
   2c8e8:	mov	r3, r1
   2c8ec:	mov	r2, fp
   2c8f0:	strd	sl, [sp, #16]
   2c8f4:	umlal	r2, r3, r7, ip
   2c8f8:	cmp	r3, #0
   2c8fc:	bne	2cb70 <__assert_fail@plt+0x1b618>
   2c900:	mov	lr, r2
   2c904:	b	2c628 <__assert_fail@plt+0x1b0d0>
   2c908:	umull	sl, fp, r6, ip
   2c90c:	mov	r3, r1
   2c910:	mov	r2, fp
   2c914:	umlal	r2, r3, r7, ip
   2c918:	cmp	r3, #0
   2c91c:	strd	r2, [sp, #16]
   2c920:	bne	2cc74 <__assert_fail@plt+0x1b71c>
   2c924:	mov	r2, sl
   2c928:	ldr	r3, [sp, #16]
   2c92c:	b	2c5cc <__assert_fail@plt+0x1b074>
   2c930:	umull	sl, fp, r0, ip
   2c934:	mov	r7, lr
   2c938:	mov	r6, fp
   2c93c:	umlal	r6, r7, r1, ip
   2c940:	cmp	r7, #0
   2c944:	bne	2cc90 <__assert_fail@plt+0x1b738>
   2c948:	mov	r2, sl
   2c94c:	mov	r3, r6
   2c950:	b	2c334 <__assert_fail@plt+0x1addc>
   2c954:	umull	r6, r7, r2, ip
   2c958:	mov	fp, r1
   2c95c:	mov	sl, r7
   2c960:	umlal	sl, fp, r3, ip
   2c964:	cmp	fp, #0
   2c968:	bne	2cb04 <__assert_fail@plt+0x1b5ac>
   2c96c:	mov	r0, r6
   2c970:	mov	r1, sl
   2c974:	b	2c318 <__assert_fail@plt+0x1adc0>
   2c978:	umull	r0, r1, r6, ip
   2c97c:	mov	r3, r7
   2c980:	mov	r2, r1
   2c984:	strd	r0, [sp, #16]
   2c988:	umlal	r2, r3, lr, ip
   2c98c:	cmp	r3, #0
   2c990:	beq	2c648 <__assert_fail@plt+0x1b0f0>
   2c994:	ldrd	sl, [sp]
   2c998:	mov	r7, #1
   2c99c:	ldr	r0, [sp, #16]
   2c9a0:	ldr	r3, [sp, #20]
   2c9a4:	mul	r2, r6, fp
   2c9a8:	mla	r2, lr, sl, r2
   2c9ac:	add	r2, r2, r3
   2c9b0:	b	2c648 <__assert_fail@plt+0x1b0f0>
   2c9b4:	umull	sl, fp, r2, ip
   2c9b8:	mov	r0, fp
   2c9bc:	umlal	r0, r1, r3, ip
   2c9c0:	cmp	r1, #0
   2c9c4:	bne	2ccac <__assert_fail@plt+0x1b754>
   2c9c8:	mov	r6, sl
   2c9cc:	mov	lr, r0
   2c9d0:	b	2c71c <__assert_fail@plt+0x1b1c4>
   2c9d4:	umull	r6, r7, r0, ip
   2c9d8:	mov	fp, lr
   2c9dc:	mov	sl, r7
   2c9e0:	umlal	sl, fp, r1, ip
   2c9e4:	cmp	fp, #0
   2c9e8:	bne	2cbe4 <__assert_fail@plt+0x1b68c>
   2c9ec:	mov	r2, r6
   2c9f0:	mov	r3, sl
   2c9f4:	b	2c4f8 <__assert_fail@plt+0x1afa0>
   2c9f8:	umull	r0, r1, sl, ip
   2c9fc:	mov	r3, r7
   2ca00:	mov	r2, r1
   2ca04:	umlal	r2, r3, lr, ip
   2ca08:	cmp	r3, #0
   2ca0c:	beq	2c648 <__assert_fail@plt+0x1b0f0>
   2ca10:	ldr	r3, [sp, #4]
   2ca14:	mov	r7, #1
   2ca18:	mul	r2, sl, r3
   2ca1c:	ldr	r3, [sp]
   2ca20:	mla	r2, lr, r3, r2
   2ca24:	add	r2, r2, r1
   2ca28:	b	2c648 <__assert_fail@plt+0x1b0f0>
   2ca2c:	umull	r6, r7, r0, ip
   2ca30:	mov	r3, r1
   2ca34:	mov	r2, r7
   2ca38:	umlal	r2, r3, fp, ip
   2ca3c:	cmp	r3, #0
   2ca40:	strd	r2, [sp, #16]
   2ca44:	bne	2ccc8 <__assert_fail@plt+0x1b770>
   2ca48:	mov	r2, r6
   2ca4c:	ldr	r3, [sp, #16]
   2ca50:	b	2c4c0 <__assert_fail@plt+0x1af68>
   2ca54:	umull	sl, fp, r2, ip
   2ca58:	mov	r7, lr
   2ca5c:	mov	r6, fp
   2ca60:	umlal	r6, r7, r3, ip
   2ca64:	cmp	r7, #0
   2ca68:	bne	2ca94 <__assert_fail@plt+0x1b53c>
   2ca6c:	mov	r0, sl
   2ca70:	mov	r1, r6
   2ca74:	b	2c4dc <__assert_fail@plt+0x1af84>
   2ca78:	ldrd	r2, [sp]
   2ca7c:	mov	r0, sl
   2ca80:	mov	r1, #1
   2ca84:	mul	r6, r6, r3
   2ca88:	mla	r7, r2, r7, r6
   2ca8c:	add	fp, r7, fp
   2ca90:	b	2c680 <__assert_fail@plt+0x1b128>
   2ca94:	ldrd	r6, [sp]
   2ca98:	mov	r0, sl
   2ca9c:	mov	lr, #1
   2caa0:	mul	r2, r2, r7
   2caa4:	mla	r1, r3, r6, r2
   2caa8:	add	r1, r1, fp
   2caac:	b	2c4dc <__assert_fail@plt+0x1af84>
   2cab0:	ldrd	r0, [sp]
   2cab4:	mov	r6, sl
   2cab8:	mov	r7, #1
   2cabc:	mul	r2, r2, r1
   2cac0:	mla	lr, r3, r0, r2
   2cac4:	add	lr, lr, fp
   2cac8:	b	2c38c <__assert_fail@plt+0x1ae34>
   2cacc:	ldm	sp, {r0, r3}
   2cad0:	mov	r2, sl
   2cad4:	mov	r1, #1
   2cad8:	mul	r3, r6, r3
   2cadc:	mla	r3, r0, r7, r3
   2cae0:	add	r3, r3, fp
   2cae4:	b	2c2f8 <__assert_fail@plt+0x1ada0>
   2cae8:	ldrd	r6, [sp]
   2caec:	mov	r0, sl
   2caf0:	mov	lr, #1
   2caf4:	mul	r2, r2, r7
   2caf8:	mla	r1, r3, r6, r2
   2cafc:	add	r1, r1, fp
   2cb00:	b	2c514 <__assert_fail@plt+0x1afbc>
   2cb04:	ldrd	sl, [sp]
   2cb08:	mov	r0, r6
   2cb0c:	mov	lr, #1
   2cb10:	mul	r2, r2, fp
   2cb14:	mla	r1, r3, sl, r2
   2cb18:	add	r1, r1, r7
   2cb1c:	b	2c318 <__assert_fail@plt+0x1adc0>
   2cb20:	ldm	sp, {r1, r3}
   2cb24:	mov	r2, r6
   2cb28:	mov	lr, #1
   2cb2c:	mul	r3, r0, r3
   2cb30:	mla	r3, fp, r1, r3
   2cb34:	add	r3, r3, r7
   2cb38:	b	2c36c <__assert_fail@plt+0x1ae14>
   2cb3c:	ldrd	r2, [sp]
   2cb40:	mov	r0, sl
   2cb44:	mov	r1, #1
   2cb48:	mul	r6, r6, r3
   2cb4c:	mla	r7, r2, r7, r6
   2cb50:	add	fp, r7, fp
   2cb54:	b	2c4a0 <__assert_fail@plt+0x1af48>
   2cb58:	mul	r3, r6, r1
   2cb5c:	mov	lr, #1
   2cb60:	mov	r6, sl
   2cb64:	mla	r7, ip, r7, r3
   2cb68:	add	r7, r7, fp
   2cb6c:	b	2c3f8 <__assert_fail@plt+0x1aea0>
   2cb70:	ldrd	r2, [sp]
   2cb74:	mov	r1, #1
   2cb78:	ldr	sl, [sp, #16]
   2cb7c:	mul	lr, r6, r3
   2cb80:	ldr	r3, [sp, #20]
   2cb84:	mla	lr, r2, r7, lr
   2cb88:	add	lr, lr, r3
   2cb8c:	b	2c628 <__assert_fail@plt+0x1b0d0>
   2cb90:	ldm	sp, {r1, r3}
   2cb94:	mov	r2, r6
   2cb98:	mov	lr, #1
   2cb9c:	mul	r3, r0, r3
   2cba0:	mla	r3, fp, r1, r3
   2cba4:	add	r3, r3, r7
   2cba8:	b	2c4f8 <__assert_fail@plt+0x1afa0>
   2cbac:	ldm	sp, {r0, r3}
   2cbb0:	mov	r2, sl
   2cbb4:	mov	r1, #1
   2cbb8:	mul	r3, r6, r3
   2cbbc:	mla	r3, r0, r7, r3
   2cbc0:	add	r3, r3, fp
   2cbc4:	b	2c6fc <__assert_fail@plt+0x1b1a4>
   2cbc8:	ldrd	r2, [sp]
   2cbcc:	mov	r0, sl
   2cbd0:	mov	r1, #1
   2cbd4:	mul	r6, r6, r3
   2cbd8:	mla	r7, r2, r7, r6
   2cbdc:	add	fp, r7, fp
   2cbe0:	b	2c56c <__assert_fail@plt+0x1b014>
   2cbe4:	ldrd	sl, [sp]
   2cbe8:	mov	r2, r6
   2cbec:	mov	lr, #1
   2cbf0:	mul	r3, r0, fp
   2cbf4:	mla	r3, r1, sl, r3
   2cbf8:	add	r3, r3, r7
   2cbfc:	b	2c4f8 <__assert_fail@plt+0x1afa0>
   2cc00:	ldrd	sl, [sp]
   2cc04:	mov	r0, r6
   2cc08:	mov	lr, #1
   2cc0c:	mul	r2, r2, fp
   2cc10:	mla	r1, r3, sl, r2
   2cc14:	add	r1, r1, r7
   2cc18:	b	2c350 <__assert_fail@plt+0x1adf8>
   2cc1c:	movw	r3, #59680	; 0xe920
   2cc20:	movt	r3, #2
   2cc24:	movw	r1, #59624	; 0xe8e8
   2cc28:	movt	r1, #2
   2cc2c:	movw	r0, #59640	; 0xe8f8
   2cc30:	movt	r0, #2
   2cc34:	mov	r2, #85	; 0x55
   2cc38:	bl	11558 <__assert_fail@plt>
   2cc3c:	ldrd	sl, [sp]
   2cc40:	mov	r2, r6
   2cc44:	mov	lr, #1
   2cc48:	mul	r3, r0, fp
   2cc4c:	mla	r3, r1, sl, r3
   2cc50:	add	r3, r3, r7
   2cc54:	b	2c36c <__assert_fail@plt+0x1ae14>
   2cc58:	ldrd	r6, [sp]
   2cc5c:	mov	r2, sl
   2cc60:	mov	lr, #1
   2cc64:	mul	r3, r0, r7
   2cc68:	mla	r3, r1, r6, r3
   2cc6c:	add	r3, r3, fp
   2cc70:	b	2c36c <__assert_fail@plt+0x1ae14>
   2cc74:	ldm	sp, {r0, r3}
   2cc78:	mov	r2, sl
   2cc7c:	mov	r1, #1
   2cc80:	mul	r3, r6, r3
   2cc84:	mla	r3, r0, r7, r3
   2cc88:	add	r3, r3, fp
   2cc8c:	b	2c5cc <__assert_fail@plt+0x1b074>
   2cc90:	ldrd	r6, [sp]
   2cc94:	mov	r2, sl
   2cc98:	mov	lr, #1
   2cc9c:	mul	r3, r0, r7
   2cca0:	mla	r3, r1, r6, r3
   2cca4:	add	r3, r3, fp
   2cca8:	b	2c334 <__assert_fail@plt+0x1addc>
   2ccac:	ldrd	r0, [sp]
   2ccb0:	mov	r6, sl
   2ccb4:	mov	r7, #1
   2ccb8:	mul	r2, r2, r1
   2ccbc:	mla	lr, r3, r0, r2
   2ccc0:	add	lr, lr, fp
   2ccc4:	b	2c71c <__assert_fail@plt+0x1b1c4>
   2ccc8:	ldm	sp, {r1, r3}
   2cccc:	mov	r2, r6
   2ccd0:	mov	lr, #1
   2ccd4:	mul	r3, r0, r3
   2ccd8:	mla	r3, fp, r1, r3
   2ccdc:	add	r3, r3, r7
   2cce0:	b	2c4c0 <__assert_fail@plt+0x1af68>
   2cce4:	cmp	r1, #0
   2cce8:	cmpne	r0, #0
   2ccec:	beq	2cd38 <__assert_fail@plt+0x1b7e0>
   2ccf0:	strd	r4, [sp, #-16]!
   2ccf4:	umull	r4, r5, r0, r1
   2ccf8:	str	r6, [sp, #8]
   2ccfc:	str	lr, [sp, #12]
   2cd00:	adds	r3, r5, #0
   2cd04:	movne	r3, #1
   2cd08:	cmp	r4, #0
   2cd0c:	blt	2cd18 <__assert_fail@plt+0x1b7c0>
   2cd10:	cmp	r3, #0
   2cd14:	beq	2cd44 <__assert_fail@plt+0x1b7ec>
   2cd18:	bl	1142c <__errno_location@plt>
   2cd1c:	mov	r3, #12
   2cd20:	ldrd	r4, [sp]
   2cd24:	ldr	r6, [sp, #8]
   2cd28:	add	sp, sp, #12
   2cd2c:	str	r3, [r0]
   2cd30:	mov	r0, #0
   2cd34:	pop	{pc}		; (ldr pc, [sp], #4)
   2cd38:	mov	r1, #1
   2cd3c:	mov	r0, r1
   2cd40:	b	111b0 <calloc@plt>
   2cd44:	ldrd	r4, [sp]
   2cd48:	ldr	r6, [sp, #8]
   2cd4c:	ldr	lr, [sp, #12]
   2cd50:	add	sp, sp, #16
   2cd54:	b	111b0 <calloc@plt>
   2cd58:	cmp	r0, #0
   2cd5c:	beq	2cd68 <__assert_fail@plt+0x1b810>
   2cd60:	blt	2cd70 <__assert_fail@plt+0x1b818>
   2cd64:	b	1139c <malloc@plt>
   2cd68:	mov	r0, #1
   2cd6c:	b	1139c <malloc@plt>
   2cd70:	str	r4, [sp, #-8]!
   2cd74:	str	lr, [sp, #4]
   2cd78:	bl	1142c <__errno_location@plt>
   2cd7c:	mov	r3, #12
   2cd80:	ldr	r4, [sp]
   2cd84:	add	sp, sp, #4
   2cd88:	str	r3, [r0]
   2cd8c:	mov	r0, #0
   2cd90:	pop	{pc}		; (ldr pc, [sp], #4)
   2cd94:	cmp	r0, #0
   2cd98:	beq	2cdc0 <__assert_fail@plt+0x1b868>
   2cd9c:	cmp	r1, #0
   2cda0:	str	r4, [sp, #-8]!
   2cda4:	str	lr, [sp, #4]
   2cda8:	beq	2cdc8 <__assert_fail@plt+0x1b870>
   2cdac:	blt	2cddc <__assert_fail@plt+0x1b884>
   2cdb0:	ldr	r4, [sp]
   2cdb4:	ldr	lr, [sp, #4]
   2cdb8:	add	sp, sp, #8
   2cdbc:	b	112f4 <realloc@plt>
   2cdc0:	mov	r0, r1
   2cdc4:	b	2cd58 <__assert_fail@plt+0x1b800>
   2cdc8:	bl	13e1c <__assert_fail@plt+0x28c4>
   2cdcc:	ldr	r4, [sp]
   2cdd0:	add	sp, sp, #4
   2cdd4:	mov	r0, #0
   2cdd8:	pop	{pc}		; (ldr pc, [sp], #4)
   2cddc:	bl	1142c <__errno_location@plt>
   2cde0:	mov	r3, #12
   2cde4:	str	r3, [r0]
   2cde8:	b	2cdcc <__assert_fail@plt+0x1b874>
   2cdec:	strd	r4, [sp, #-16]!
   2cdf0:	mov	r4, r0
   2cdf4:	str	r6, [sp, #8]
   2cdf8:	str	lr, [sp, #12]
   2cdfc:	bl	1136c <__fpending@plt>
   2ce00:	ldr	r5, [r4]
   2ce04:	mov	r6, r0
   2ce08:	mov	r0, r4
   2ce0c:	bl	13bd8 <__assert_fail@plt+0x2680>
   2ce10:	mov	r4, r0
   2ce14:	and	r5, r5, #32
   2ce18:	cmp	r5, #0
   2ce1c:	bne	2ce54 <__assert_fail@plt+0x1b8fc>
   2ce20:	cmp	r0, #0
   2ce24:	beq	2ce40 <__assert_fail@plt+0x1b8e8>
   2ce28:	cmp	r6, #0
   2ce2c:	bne	2ce6c <__assert_fail@plt+0x1b914>
   2ce30:	bl	1142c <__errno_location@plt>
   2ce34:	ldr	r4, [r0]
   2ce38:	subs	r4, r4, #9
   2ce3c:	mvnne	r4, #0
   2ce40:	mov	r0, r4
   2ce44:	ldrd	r4, [sp]
   2ce48:	ldr	r6, [sp, #8]
   2ce4c:	add	sp, sp, #12
   2ce50:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce54:	cmp	r0, #0
   2ce58:	bne	2ce6c <__assert_fail@plt+0x1b914>
   2ce5c:	bl	1142c <__errno_location@plt>
   2ce60:	str	r4, [r0]
   2ce64:	mvn	r4, #0
   2ce68:	b	2ce40 <__assert_fail@plt+0x1b8e8>
   2ce6c:	mvn	r4, #0
   2ce70:	b	2ce40 <__assert_fail@plt+0x1b8e8>
   2ce74:	ldr	ip, [r0, #4]
   2ce78:	cmp	ip, r1
   2ce7c:	bcs	2cee8 <__assert_fail@plt+0x1b990>
   2ce80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ce84:	mov	r5, r1
   2ce88:	mov	r4, r0
   2ce8c:	strd	r6, [sp, #8]
   2ce90:	umull	r6, r7, r1, r3
   2ce94:	str	r8, [sp, #16]
   2ce98:	mov	r8, r3
   2ce9c:	str	lr, [sp, #20]
   2cea0:	cmp	r7, #0
   2cea4:	bne	2cf2c <__assert_fail@plt+0x1b9d4>
   2cea8:	ldr	r0, [r0, #8]
   2ceac:	cmp	r0, r2
   2ceb0:	beq	2cef8 <__assert_fail@plt+0x1b9a0>
   2ceb4:	mov	r1, r6
   2ceb8:	bl	2cd94 <__assert_fail@plt+0x1b83c>
   2cebc:	subs	r6, r0, #0
   2cec0:	beq	2cf24 <__assert_fail@plt+0x1b9cc>
   2cec4:	mov	r3, #1
   2cec8:	str	r5, [r4]
   2cecc:	stmib	r4, {r5, r6}
   2ced0:	ldrd	r4, [sp]
   2ced4:	mov	r0, r3
   2ced8:	ldrd	r6, [sp, #8]
   2cedc:	ldr	r8, [sp, #16]
   2cee0:	add	sp, sp, #20
   2cee4:	pop	{pc}		; (ldr pc, [sp], #4)
   2cee8:	mov	r3, #1
   2ceec:	str	r1, [r0]
   2cef0:	mov	r0, r3
   2cef4:	bx	lr
   2cef8:	mov	r0, r6
   2cefc:	bl	2cd58 <__assert_fail@plt+0x1b800>
   2cf00:	subs	r6, r0, #0
   2cf04:	beq	2cf24 <__assert_fail@plt+0x1b9cc>
   2cf08:	ldr	r1, [r4, #8]
   2cf0c:	cmp	r1, #0
   2cf10:	beq	2cec4 <__assert_fail@plt+0x1b96c>
   2cf14:	ldr	r2, [r4]
   2cf18:	mul	r2, r2, r8
   2cf1c:	bl	11264 <memcpy@plt>
   2cf20:	b	2cec4 <__assert_fail@plt+0x1b96c>
   2cf24:	mov	r3, #0
   2cf28:	b	2ced0 <__assert_fail@plt+0x1b978>
   2cf2c:	bl	1142c <__errno_location@plt>
   2cf30:	mov	r2, #12
   2cf34:	mov	r3, #0
   2cf38:	str	r2, [r0]
   2cf3c:	b	2ced0 <__assert_fail@plt+0x1b978>
   2cf40:	push	{r1, r2, r3}
   2cf44:	strd	r4, [sp, #-20]!	; 0xffffffec
   2cf48:	strd	r6, [sp, #8]
   2cf4c:	str	lr, [sp, #16]
   2cf50:	sub	sp, sp, #8
   2cf54:	ldr	r1, [sp, #28]
   2cf58:	add	r2, sp, #32
   2cf5c:	str	r2, [sp, #4]
   2cf60:	cmp	r1, #0
   2cf64:	beq	2d040 <__assert_fail@plt+0x1bae8>
   2cf68:	movw	r3, #1030	; 0x406
   2cf6c:	mov	r6, r0
   2cf70:	cmp	r1, r3
   2cf74:	beq	2d050 <__assert_fail@plt+0x1baf8>
   2cf78:	cmp	r1, #11
   2cf7c:	beq	2cff8 <__assert_fail@plt+0x1baa0>
   2cf80:	ble	2cfd8 <__assert_fail@plt+0x1ba80>
   2cf84:	movw	r2, #1031	; 0x407
   2cf88:	cmp	r1, r2
   2cf8c:	bgt	2d014 <__assert_fail@plt+0x1babc>
   2cf90:	cmp	r1, r3
   2cf94:	bge	2cfa4 <__assert_fail@plt+0x1ba4c>
   2cf98:	movw	r3, #1025	; 0x401
   2cf9c:	cmp	r1, r3
   2cfa0:	beq	2cff8 <__assert_fail@plt+0x1baa0>
   2cfa4:	ldr	r3, [sp, #4]
   2cfa8:	mov	r0, r6
   2cfac:	ldr	r2, [r3]
   2cfb0:	bl	114b0 <fcntl64@plt>
   2cfb4:	mov	r4, r0
   2cfb8:	mov	r0, r4
   2cfbc:	add	sp, sp, #8
   2cfc0:	ldrd	r4, [sp]
   2cfc4:	ldrd	r6, [sp, #8]
   2cfc8:	ldr	lr, [sp, #16]
   2cfcc:	add	sp, sp, #20
   2cfd0:	add	sp, sp, #12
   2cfd4:	bx	lr
   2cfd8:	cmp	r1, #4
   2cfdc:	beq	2cfa4 <__assert_fail@plt+0x1ba4c>
   2cfe0:	bgt	2d008 <__assert_fail@plt+0x1bab0>
   2cfe4:	cmp	r1, #2
   2cfe8:	beq	2cfa4 <__assert_fail@plt+0x1ba4c>
   2cfec:	bgt	2cff8 <__assert_fail@plt+0x1baa0>
   2cff0:	cmp	r1, #1
   2cff4:	bne	2cfa4 <__assert_fail@plt+0x1ba4c>
   2cff8:	mov	r0, r6
   2cffc:	bl	114b0 <fcntl64@plt>
   2d000:	mov	r4, r0
   2d004:	b	2cfb8 <__assert_fail@plt+0x1ba60>
   2d008:	cmp	r1, #9
   2d00c:	bne	2cfa4 <__assert_fail@plt+0x1ba4c>
   2d010:	b	2cff8 <__assert_fail@plt+0x1baa0>
   2d014:	movw	r3, #1033	; 0x409
   2d018:	cmp	r1, r3
   2d01c:	beq	2cfa4 <__assert_fail@plt+0x1ba4c>
   2d020:	blt	2cff8 <__assert_fail@plt+0x1baa0>
   2d024:	movw	r3, #1034	; 0x40a
   2d028:	cmp	r1, r3
   2d02c:	bne	2cfa4 <__assert_fail@plt+0x1ba4c>
   2d030:	mov	r0, r6
   2d034:	bl	114b0 <fcntl64@plt>
   2d038:	mov	r4, r0
   2d03c:	b	2cfb8 <__assert_fail@plt+0x1ba60>
   2d040:	ldr	r2, [sp, #32]
   2d044:	bl	114b0 <fcntl64@plt>
   2d048:	mov	r4, r0
   2d04c:	b	2cfb8 <__assert_fail@plt+0x1ba60>
   2d050:	movw	r5, #62456	; 0xf3f8
   2d054:	movt	r5, #3
   2d058:	ldr	r7, [r2]
   2d05c:	add	r2, sp, #36	; 0x24
   2d060:	ldr	r3, [r5]
   2d064:	str	r2, [sp, #4]
   2d068:	mov	r2, r7
   2d06c:	cmp	r3, #0
   2d070:	blt	2d08c <__assert_fail@plt+0x1bb34>
   2d074:	bl	114b0 <fcntl64@plt>
   2d078:	subs	r4, r0, #0
   2d07c:	blt	2d0f4 <__assert_fail@plt+0x1bb9c>
   2d080:	mov	r3, #1
   2d084:	str	r3, [r5]
   2d088:	b	2cfb8 <__assert_fail@plt+0x1ba60>
   2d08c:	mov	r1, #0
   2d090:	bl	114b0 <fcntl64@plt>
   2d094:	subs	r4, r0, #0
   2d098:	blt	2cfb8 <__assert_fail@plt+0x1ba60>
   2d09c:	ldr	r3, [r5]
   2d0a0:	cmn	r3, #1
   2d0a4:	bne	2cfb8 <__assert_fail@plt+0x1ba60>
   2d0a8:	mov	r1, #1
   2d0ac:	mov	r0, r4
   2d0b0:	bl	114b0 <fcntl64@plt>
   2d0b4:	subs	r2, r0, #0
   2d0b8:	blt	2d0d4 <__assert_fail@plt+0x1bb7c>
   2d0bc:	orr	r2, r2, #1
   2d0c0:	mov	r1, #2
   2d0c4:	mov	r0, r4
   2d0c8:	bl	114b0 <fcntl64@plt>
   2d0cc:	cmn	r0, #1
   2d0d0:	bne	2cfb8 <__assert_fail@plt+0x1ba60>
   2d0d4:	bl	1142c <__errno_location@plt>
   2d0d8:	mov	r5, r0
   2d0dc:	mov	r0, r4
   2d0e0:	ldr	r6, [r5]
   2d0e4:	mvn	r4, #0
   2d0e8:	bl	11540 <close@plt>
   2d0ec:	str	r6, [r5]
   2d0f0:	b	2cfb8 <__assert_fail@plt+0x1ba60>
   2d0f4:	bl	1142c <__errno_location@plt>
   2d0f8:	ldr	r3, [r0]
   2d0fc:	cmp	r3, #22
   2d100:	bne	2d080 <__assert_fail@plt+0x1bb28>
   2d104:	mov	r2, r7
   2d108:	mov	r0, r6
   2d10c:	mov	r1, #0
   2d110:	bl	114b0 <fcntl64@plt>
   2d114:	subs	r4, r0, #0
   2d118:	mvnge	r3, #0
   2d11c:	strge	r3, [r5]
   2d120:	bge	2d0a8 <__assert_fail@plt+0x1bb50>
   2d124:	b	2cfb8 <__assert_fail@plt+0x1ba60>
   2d128:	mov	r0, #14
   2d12c:	str	r4, [sp, #-8]!
   2d130:	str	lr, [sp, #4]
   2d134:	bl	114e0 <nl_langinfo@plt>
   2d138:	cmp	r0, #0
   2d13c:	beq	2d160 <__assert_fail@plt+0x1bc08>
   2d140:	ldrb	r2, [r0]
   2d144:	movw	r3, #59692	; 0xe92c
   2d148:	movt	r3, #2
   2d14c:	ldr	r4, [sp]
   2d150:	add	sp, sp, #4
   2d154:	cmp	r2, #0
   2d158:	moveq	r0, r3
   2d15c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d160:	ldr	r4, [sp]
   2d164:	add	sp, sp, #4
   2d168:	movw	r0, #59692	; 0xe92c
   2d16c:	movt	r0, #2
   2d170:	pop	{pc}		; (ldr pc, [sp], #4)
   2d174:	strd	r4, [sp, #-20]!	; 0xffffffec
   2d178:	mov	r5, r2
   2d17c:	strd	r6, [sp, #8]
   2d180:	subs	r6, r0, #0
   2d184:	mov	r7, r1
   2d188:	str	lr, [sp, #16]
   2d18c:	sub	sp, sp, #12
   2d190:	addeq	r6, sp, #4
   2d194:	mov	r0, r6
   2d198:	bl	11378 <mbrtowc@plt>
   2d19c:	cmp	r5, #0
   2d1a0:	cmnne	r0, #3
   2d1a4:	mov	r4, r0
   2d1a8:	bhi	2d1c4 <__assert_fail@plt+0x1bc6c>
   2d1ac:	mov	r0, r4
   2d1b0:	add	sp, sp, #12
   2d1b4:	ldrd	r4, [sp]
   2d1b8:	ldrd	r6, [sp, #8]
   2d1bc:	add	sp, sp, #16
   2d1c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d1c4:	mov	r0, #0
   2d1c8:	bl	2d21c <__assert_fail@plt+0x1bcc4>
   2d1cc:	cmp	r0, #0
   2d1d0:	bne	2d1ac <__assert_fail@plt+0x1bc54>
   2d1d4:	ldrb	r3, [r7]
   2d1d8:	mov	r4, #1
   2d1dc:	str	r3, [r6]
   2d1e0:	b	2d1ac <__assert_fail@plt+0x1bc54>
   2d1e4:	umull	r2, r3, r1, r2
   2d1e8:	cmp	r3, #0
   2d1ec:	bne	2d1f8 <__assert_fail@plt+0x1bca0>
   2d1f0:	mov	r1, r2
   2d1f4:	b	2cd94 <__assert_fail@plt+0x1b83c>
   2d1f8:	str	r4, [sp, #-8]!
   2d1fc:	str	lr, [sp, #4]
   2d200:	bl	1142c <__errno_location@plt>
   2d204:	mov	r3, #12
   2d208:	ldr	r4, [sp]
   2d20c:	add	sp, sp, #4
   2d210:	str	r3, [r0]
   2d214:	mov	r0, #0
   2d218:	pop	{pc}		; (ldr pc, [sp], #4)
   2d21c:	push	{lr}		; (str lr, [sp, #-4]!)
   2d220:	sub	sp, sp, #268	; 0x10c
   2d224:	movw	r2, #257	; 0x101
   2d228:	add	r1, sp, #4
   2d22c:	bl	2d274 <__assert_fail@plt+0x1bd1c>
   2d230:	cmp	r0, #0
   2d234:	movne	r0, #0
   2d238:	bne	2d26c <__assert_fail@plt+0x1bd14>
   2d23c:	movw	r1, #59700	; 0xe934
   2d240:	movt	r1, #2
   2d244:	add	r0, sp, #4
   2d248:	bl	111f8 <strcmp@plt>
   2d24c:	cmp	r0, #0
   2d250:	beq	2d26c <__assert_fail@plt+0x1bd14>
   2d254:	add	r0, sp, #4
   2d258:	movw	r1, #59704	; 0xe938
   2d25c:	movt	r1, #2
   2d260:	bl	111f8 <strcmp@plt>
   2d264:	adds	r0, r0, #0
   2d268:	movne	r0, #1
   2d26c:	add	sp, sp, #268	; 0x10c
   2d270:	pop	{pc}		; (ldr pc, [sp], #4)
   2d274:	strd	r4, [sp, #-16]!
   2d278:	mov	r5, r1
   2d27c:	mov	r1, #0
   2d280:	mov	r4, r2
   2d284:	str	r6, [sp, #8]
   2d288:	str	lr, [sp, #12]
   2d28c:	bl	114bc <setlocale@plt>
   2d290:	subs	r6, r0, #0
   2d294:	beq	2d314 <__assert_fail@plt+0x1bdbc>
   2d298:	bl	11414 <strlen@plt>
   2d29c:	cmp	r4, r0
   2d2a0:	bhi	2d2c0 <__assert_fail@plt+0x1bd68>
   2d2a4:	cmp	r4, #0
   2d2a8:	moveq	r0, #34	; 0x22
   2d2ac:	bne	2d2e4 <__assert_fail@plt+0x1bd8c>
   2d2b0:	ldrd	r4, [sp]
   2d2b4:	ldr	r6, [sp, #8]
   2d2b8:	add	sp, sp, #12
   2d2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2d2c0:	add	r2, r0, #1
   2d2c4:	mov	r1, r6
   2d2c8:	mov	r0, r5
   2d2cc:	bl	11264 <memcpy@plt>
   2d2d0:	ldrd	r4, [sp]
   2d2d4:	mov	r0, #0
   2d2d8:	ldr	r6, [sp, #8]
   2d2dc:	add	sp, sp, #12
   2d2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d2e4:	sub	r4, r4, #1
   2d2e8:	mov	r1, r6
   2d2ec:	mov	r2, r4
   2d2f0:	mov	r0, r5
   2d2f4:	bl	11264 <memcpy@plt>
   2d2f8:	mov	r3, #0
   2d2fc:	mov	r0, #34	; 0x22
   2d300:	strb	r3, [r5, r4]
   2d304:	ldrd	r4, [sp]
   2d308:	ldr	r6, [sp, #8]
   2d30c:	add	sp, sp, #12
   2d310:	pop	{pc}		; (ldr pc, [sp], #4)
   2d314:	cmp	r4, #0
   2d318:	mov	r0, #22
   2d31c:	strbne	r6, [r5]
   2d320:	ldrd	r4, [sp]
   2d324:	ldr	r6, [sp, #8]
   2d328:	add	sp, sp, #12
   2d32c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d330:	mov	r1, #0
   2d334:	b	114bc <setlocale@plt>
   2d338:	cmp	r3, #0
   2d33c:	cmpeq	r2, #0
   2d340:	bne	2d364 <__assert_fail@plt+0x1be0c>
   2d344:	cmp	r1, #0
   2d348:	movlt	r1, #-2147483648	; 0x80000000
   2d34c:	movlt	r0, #0
   2d350:	blt	2d360 <__assert_fail@plt+0x1be08>
   2d354:	cmpeq	r0, #0
   2d358:	mvnne	r1, #-2147483648	; 0x80000000
   2d35c:	mvnne	r0, #0
   2d360:	b	2d448 <__assert_fail@plt+0x1bef0>
   2d364:	sub	sp, sp, #8
   2d368:	push	{sp, lr}
   2d36c:	cmp	r1, #0
   2d370:	blt	2d390 <__assert_fail@plt+0x1be38>
   2d374:	cmp	r3, #0
   2d378:	blt	2d3c4 <__assert_fail@plt+0x1be6c>
   2d37c:	bl	2d458 <__assert_fail@plt+0x1bf00>
   2d380:	ldr	lr, [sp, #4]
   2d384:	add	sp, sp, #8
   2d388:	pop	{r2, r3}
   2d38c:	bx	lr
   2d390:	rsbs	r0, r0, #0
   2d394:	sbc	r1, r1, r1, lsl #1
   2d398:	cmp	r3, #0
   2d39c:	blt	2d3e8 <__assert_fail@plt+0x1be90>
   2d3a0:	bl	2d458 <__assert_fail@plt+0x1bf00>
   2d3a4:	ldr	lr, [sp, #4]
   2d3a8:	add	sp, sp, #8
   2d3ac:	pop	{r2, r3}
   2d3b0:	rsbs	r0, r0, #0
   2d3b4:	sbc	r1, r1, r1, lsl #1
   2d3b8:	rsbs	r2, r2, #0
   2d3bc:	sbc	r3, r3, r3, lsl #1
   2d3c0:	bx	lr
   2d3c4:	rsbs	r2, r2, #0
   2d3c8:	sbc	r3, r3, r3, lsl #1
   2d3cc:	bl	2d458 <__assert_fail@plt+0x1bf00>
   2d3d0:	ldr	lr, [sp, #4]
   2d3d4:	add	sp, sp, #8
   2d3d8:	pop	{r2, r3}
   2d3dc:	rsbs	r0, r0, #0
   2d3e0:	sbc	r1, r1, r1, lsl #1
   2d3e4:	bx	lr
   2d3e8:	rsbs	r2, r2, #0
   2d3ec:	sbc	r3, r3, r3, lsl #1
   2d3f0:	bl	2d458 <__assert_fail@plt+0x1bf00>
   2d3f4:	ldr	lr, [sp, #4]
   2d3f8:	add	sp, sp, #8
   2d3fc:	pop	{r2, r3}
   2d400:	rsbs	r2, r2, #0
   2d404:	sbc	r3, r3, r3, lsl #1
   2d408:	bx	lr
   2d40c:	cmp	r3, #0
   2d410:	cmpeq	r2, #0
   2d414:	bne	2d42c <__assert_fail@plt+0x1bed4>
   2d418:	cmp	r1, #0
   2d41c:	cmpeq	r0, #0
   2d420:	mvnne	r1, #0
   2d424:	mvnne	r0, #0
   2d428:	b	2d448 <__assert_fail@plt+0x1bef0>
   2d42c:	sub	sp, sp, #8
   2d430:	push	{sp, lr}
   2d434:	bl	2d458 <__assert_fail@plt+0x1bf00>
   2d438:	ldr	lr, [sp, #4]
   2d43c:	add	sp, sp, #8
   2d440:	pop	{r2, r3}
   2d444:	bx	lr
   2d448:	push	{r1, lr}
   2d44c:	mov	r0, #8
   2d450:	bl	111d4 <raise@plt>
   2d454:	pop	{r1, pc}
   2d458:	cmp	r1, r3
   2d45c:	cmpeq	r0, r2
   2d460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d464:	mov	r4, r0
   2d468:	movcc	r0, #0
   2d46c:	mov	r5, r1
   2d470:	ldr	lr, [sp, #36]	; 0x24
   2d474:	movcc	r1, r0
   2d478:	bcc	2d574 <__assert_fail@plt+0x1c01c>
   2d47c:	cmp	r3, #0
   2d480:	clzeq	ip, r2
   2d484:	clzne	ip, r3
   2d488:	addeq	ip, ip, #32
   2d48c:	cmp	r5, #0
   2d490:	clzeq	r1, r4
   2d494:	addeq	r1, r1, #32
   2d498:	clzne	r1, r5
   2d49c:	sub	ip, ip, r1
   2d4a0:	sub	sl, ip, #32
   2d4a4:	lsl	r9, r3, ip
   2d4a8:	rsb	fp, ip, #32
   2d4ac:	orr	r9, r9, r2, lsl sl
   2d4b0:	orr	r9, r9, r2, lsr fp
   2d4b4:	lsl	r8, r2, ip
   2d4b8:	cmp	r5, r9
   2d4bc:	cmpeq	r4, r8
   2d4c0:	movcc	r0, #0
   2d4c4:	movcc	r1, r0
   2d4c8:	bcc	2d4e4 <__assert_fail@plt+0x1bf8c>
   2d4cc:	mov	r0, #1
   2d4d0:	subs	r4, r4, r8
   2d4d4:	lsl	r1, r0, sl
   2d4d8:	orr	r1, r1, r0, lsr fp
   2d4dc:	lsl	r0, r0, ip
   2d4e0:	sbc	r5, r5, r9
   2d4e4:	cmp	ip, #0
   2d4e8:	beq	2d574 <__assert_fail@plt+0x1c01c>
   2d4ec:	lsr	r6, r8, #1
   2d4f0:	orr	r6, r6, r9, lsl #31
   2d4f4:	lsr	r7, r9, #1
   2d4f8:	mov	r2, ip
   2d4fc:	b	2d520 <__assert_fail@plt+0x1bfc8>
   2d500:	subs	r3, r4, r6
   2d504:	sbc	r8, r5, r7
   2d508:	adds	r3, r3, r3
   2d50c:	adc	r8, r8, r8
   2d510:	adds	r4, r3, #1
   2d514:	adc	r5, r8, #0
   2d518:	subs	r2, r2, #1
   2d51c:	beq	2d53c <__assert_fail@plt+0x1bfe4>
   2d520:	cmp	r5, r7
   2d524:	cmpeq	r4, r6
   2d528:	bcs	2d500 <__assert_fail@plt+0x1bfa8>
   2d52c:	adds	r4, r4, r4
   2d530:	adc	r5, r5, r5
   2d534:	subs	r2, r2, #1
   2d538:	bne	2d520 <__assert_fail@plt+0x1bfc8>
   2d53c:	lsr	r3, r4, ip
   2d540:	orr	r3, r3, r5, lsl fp
   2d544:	lsr	r2, r5, ip
   2d548:	orr	r3, r3, r5, lsr sl
   2d54c:	adds	r0, r0, r4
   2d550:	mov	r4, r3
   2d554:	lsl	r3, r2, ip
   2d558:	orr	r3, r3, r4, lsl sl
   2d55c:	lsl	ip, r4, ip
   2d560:	orr	r3, r3, r4, lsr fp
   2d564:	adc	r1, r1, r5
   2d568:	subs	r0, r0, ip
   2d56c:	mov	r5, r2
   2d570:	sbc	r1, r1, r3
   2d574:	cmp	lr, #0
   2d578:	strdne	r4, [lr]
   2d57c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d580:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d584:	mov	r7, r0
   2d588:	ldr	r6, [pc, #72]	; 2d5d8 <__assert_fail@plt+0x1c080>
   2d58c:	ldr	r5, [pc, #72]	; 2d5dc <__assert_fail@plt+0x1c084>
   2d590:	add	r6, pc, r6
   2d594:	add	r5, pc, r5
   2d598:	sub	r6, r6, r5
   2d59c:	mov	r8, r1
   2d5a0:	mov	r9, r2
   2d5a4:	bl	11178 <pthread_mutex_unlock@plt-0x20>
   2d5a8:	asrs	r6, r6, #2
   2d5ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d5b0:	mov	r4, #0
   2d5b4:	add	r4, r4, #1
   2d5b8:	ldr	r3, [r5], #4
   2d5bc:	mov	r2, r9
   2d5c0:	mov	r1, r8
   2d5c4:	mov	r0, r7
   2d5c8:	blx	r3
   2d5cc:	cmp	r6, r4
   2d5d0:	bne	2d5b4 <__assert_fail@plt+0x1c05c>
   2d5d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d5d8:	andeq	r1, r1, ip, ror r9
   2d5dc:	andeq	r1, r1, r4, ror r9
   2d5e0:	bx	lr
   2d5e4:	ldr	r3, [pc, #12]	; 2d5f8 <__assert_fail@plt+0x1c0a0>
   2d5e8:	mov	r1, #0
   2d5ec:	add	r3, pc, r3
   2d5f0:	ldr	r2, [r3]
   2d5f4:	b	11450 <__cxa_atexit@plt>
   2d5f8:	andeq	r1, r1, r4, ror #22

Disassembly of section .fini:

0002d5fc <.fini>:
   2d5fc:	push	{r3, lr}
   2d600:	pop	{r3, pc}
