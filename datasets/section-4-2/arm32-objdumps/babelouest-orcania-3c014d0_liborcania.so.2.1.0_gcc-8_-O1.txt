
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00000e24 <.init>:
 e24:	push	{r3, lr}
 e28:	bl	1010 <o_strchr@plt+0x10>
 e2c:	pop	{r3, pc}

Disassembly of section .plt:

00000e30 <strstr@plt-0x14>:
     e30:	push	{lr}		; (str lr, [sp, #-4]!)
     e34:	ldr	lr, [pc, #4]	; e40 <strstr@plt-0x4>
     e38:	add	lr, pc, lr
     e3c:	ldr	pc, [lr, #8]!
     e40:	andeq	r2, r1, r0, asr #3

00000e44 <strstr@plt>:
     e44:	add	ip, pc, #0, 12
     e48:	add	ip, ip, #73728	; 0x12000
     e4c:	ldr	pc, [ip, #448]!	; 0x1c0

00000e50 <pointer_list_get_at@plt>:
     e50:	add	ip, pc, #0, 12
     e54:	add	ip, ip, #73728	; 0x12000
     e58:	ldr	pc, [ip, #440]!	; 0x1b8

00000e5c <o_strncasecmp@plt>:
     e5c:	add	ip, pc, #0, 12
     e60:	add	ip, ip, #73728	; 0x12000
     e64:	ldr	pc, [ip, #432]!	; 0x1b0

00000e68 <strcasestr@plt>:
     e68:	add	ip, pc, #0, 12
     e6c:	add	ip, ip, #73728	; 0x12000
     e70:	ldr	pc, [ip, #424]!	; 0x1a8

00000e74 <strcmp@plt>:
     e74:	add	ip, pc, #0, 12
     e78:	add	ip, ip, #73728	; 0x12000
     e7c:	ldr	pc, [ip, #416]!	; 0x1a0

00000e80 <__cxa_finalize@plt>:
     e80:	add	ip, pc, #0, 12
     e84:	add	ip, ip, #73728	; 0x12000
     e88:	ldr	pc, [ip, #408]!	; 0x198

00000e8c <o_strndup@plt>:
     e8c:	add	ip, pc, #0, 12
     e90:	add	ip, ip, #73728	; 0x12000
     e94:	ldr	pc, [ip, #400]!	; 0x190

00000e98 <trunc@plt>:
     e98:	add	ip, pc, #0, 12
     e9c:	add	ip, ip, #73728	; 0x12000
     ea0:	ldr	pc, [ip, #392]!	; 0x188

00000ea4 <o_free@plt>:
     ea4:	add	ip, pc, #0, 12
     ea8:	add	ip, ip, #73728	; 0x12000
     eac:	ldr	pc, [ip, #384]!	; 0x180

00000eb0 <pointer_list_remove_at@plt>:
     eb0:	add	ip, pc, #0, 12
     eb4:	add	ip, ip, #73728	; 0x12000
     eb8:	ldr	pc, [ip, #376]!	; 0x178

00000ebc <memcpy@plt>:
     ebc:	add	ip, pc, #0, 12
     ec0:	add	ip, ip, #73728	; 0x12000
     ec4:	ldr	pc, [ip, #368]!	; 0x170

00000ec8 <o_strdup@plt>:
     ec8:	add	ip, pc, #0, 12
     ecc:	add	ip, ip, #73728	; 0x12000
     ed0:	ldr	pc, [ip, #360]!	; 0x168

00000ed4 <o_base64_encode@plt>:
     ed4:	add	ip, pc, #0, 12
     ed8:	add	ip, ip, #73728	; 0x12000
     edc:	ldr	pc, [ip, #352]!	; 0x160

00000ee0 <strcasecmp@plt>:
     ee0:	add	ip, pc, #0, 12
     ee4:	add	ip, ip, #73728	; 0x12000
     ee8:	ldr	pc, [ip, #344]!	; 0x158

00000eec <o_strcmp@plt>:
     eec:	add	ip, pc, #0, 12
     ef0:	add	ip, ip, #73728	; 0x12000
     ef4:	ldr	pc, [ip, #336]!	; 0x150

00000ef8 <trimwhitespace@plt>:
     ef8:	add	ip, pc, #0, 12
     efc:	add	ip, ip, #73728	; 0x12000
     f00:	ldr	pc, [ip, #328]!	; 0x148

00000f04 <strcpy@plt>:
     f04:	add	ip, pc, #0, 12
     f08:	add	ip, ip, #73728	; 0x12000
     f0c:	ldr	pc, [ip, #320]!	; 0x140

00000f10 <o_strlen@plt>:
     f10:	add	ip, pc, #0, 12
     f14:	add	ip, ip, #73728	; 0x12000
     f18:	ldr	pc, [ip, #312]!	; 0x138

00000f1c <o_strcasecmp@plt>:
     f1c:	add	ip, pc, #0, 12
     f20:	add	ip, ip, #73728	; 0x12000
     f24:	ldr	pc, [ip, #304]!	; 0x130

00000f28 <o_realloc@plt>:
     f28:	add	ip, pc, #0, 12
     f2c:	add	ip, ip, #73728	; 0x12000
     f30:	ldr	pc, [ip, #296]!	; 0x128

00000f34 <__gmon_start__@plt>:
     f34:	add	ip, pc, #0, 12
     f38:	add	ip, ip, #73728	; 0x12000
     f3c:	ldr	pc, [ip, #288]!	; 0x120

00000f40 <__ctype_b_loc@plt>:
     f40:	add	ip, pc, #0, 12
     f44:	add	ip, ip, #73728	; 0x12000
     f48:	ldr	pc, [ip, #280]!	; 0x118

00000f4c <strlen@plt>:
     f4c:	add	ip, pc, #0, 12
     f50:	add	ip, ip, #73728	; 0x12000
     f54:	ldr	pc, [ip, #272]!	; 0x110

00000f58 <strchr@plt>:
     f58:	add	ip, pc, #0, 12
     f5c:	add	ip, ip, #73728	; 0x12000
     f60:	ldr	pc, [ip, #264]!	; 0x108

00000f64 <strncasecmp@plt>:
     f64:	add	ip, pc, #0, 12
     f68:	add	ip, ip, #73728	; 0x12000
     f6c:	ldr	pc, [ip, #256]!	; 0x100

00000f70 <snprintf@plt>:
     f70:	add	ip, pc, #0, 12
     f74:	add	ip, ip, #73728	; 0x12000
     f78:	ldr	pc, [ip, #248]!	; 0xf8

00000f7c <o_malloc@plt>:
     f7c:	add	ip, pc, #0, 12
     f80:	add	ip, ip, #73728	; 0x12000
     f84:	ldr	pc, [ip, #240]!	; 0xf0

00000f88 <memset@plt>:
     f88:	add	ip, pc, #0, 12
     f8c:	add	ip, ip, #73728	; 0x12000
     f90:	ldr	pc, [ip, #232]!	; 0xe8

00000f94 <strncpy@plt>:
     f94:	add	ip, pc, #0, 12
     f98:	add	ip, ip, #73728	; 0x12000
     f9c:	ldr	pc, [ip, #224]!	; 0xe0

00000fa0 <pointer_list_size@plt>:
     fa0:	add	ip, pc, #0, 12
     fa4:	add	ip, ip, #73728	; 0x12000
     fa8:	ldr	pc, [ip, #216]!	; 0xd8

00000fac <msprintf@plt>:
     fac:	add	ip, pc, #0, 12
     fb0:	add	ip, ip, #73728	; 0x12000
     fb4:	ldr	pc, [ip, #208]!	; 0xd0

00000fb8 <o_base64url_2_base64@plt>:
     fb8:	add	ip, pc, #0, 12
     fbc:	add	ip, ip, #73728	; 0x12000
     fc0:	ldr	pc, [ip, #200]!	; 0xc8

00000fc4 <strrchr@plt>:
     fc4:	add	ip, pc, #0, 12
     fc8:	add	ip, ip, #73728	; 0x12000
     fcc:	ldr	pc, [ip, #192]!	; 0xc0

00000fd0 <o_base64_decode@plt>:
     fd0:	add	ip, pc, #0, 12
     fd4:	add	ip, ip, #73728	; 0x12000
     fd8:	ldr	pc, [ip, #184]!	; 0xb8

00000fdc <vsnprintf@plt>:
     fdc:	add	ip, pc, #0, 12
     fe0:	add	ip, ip, #73728	; 0x12000
     fe4:	ldr	pc, [ip, #176]!	; 0xb0

00000fe8 <o_strncmp@plt>:
     fe8:	add	ip, pc, #0, 12
     fec:	add	ip, ip, #73728	; 0x12000
     ff0:	ldr	pc, [ip, #168]!	; 0xa8

00000ff4 <strncmp@plt>:
     ff4:	add	ip, pc, #0, 12
     ff8:	add	ip, ip, #73728	; 0x12000
     ffc:	ldr	pc, [ip, #160]!	; 0xa0

00001000 <o_strchr@plt>:
    1000:	add	ip, pc, #0, 12
    1004:	add	ip, ip, #73728	; 0x12000
    1008:	ldr	pc, [ip, #152]!	; 0x98

Disassembly of section .text:

00001010 <o_base64_encode@@Base-0x128>:
    1010:	ldr	r3, [pc, #20]	; 102c <o_strchr@plt+0x2c>
    1014:	ldr	r2, [pc, #20]	; 1030 <o_strchr@plt+0x30>
    1018:	add	r3, pc, r3
    101c:	ldr	r2, [r3, r2]
    1020:	cmp	r2, #0
    1024:	bxeq	lr
    1028:	b	f34 <__gmon_start__@plt>
    102c:	andeq	r1, r1, r0, ror #31
    1030:	andeq	r0, r0, ip, lsr #1
    1034:	ldr	r0, [pc, #44]	; 1068 <o_strchr@plt+0x68>
    1038:	ldr	r3, [pc, #44]	; 106c <o_strchr@plt+0x6c>
    103c:	add	r0, pc, r0
    1040:	add	r3, pc, r3
    1044:	cmp	r3, r0
    1048:	ldr	r3, [pc, #32]	; 1070 <o_strchr@plt+0x70>
    104c:	add	r3, pc, r3
    1050:	bxeq	lr
    1054:	ldr	r2, [pc, #24]	; 1074 <o_strchr@plt+0x74>
    1058:	ldr	r3, [r3, r2]
    105c:	cmp	r3, #0
    1060:	bxeq	lr
    1064:	bx	r3
    1068:	andeq	r2, r1, r0, lsl #1
    106c:	andeq	r2, r1, ip, ror r0
    1070:	andeq	r1, r1, ip, lsr #31
    1074:	andeq	r0, r0, r8, lsr #1
    1078:	ldr	r0, [pc, #56]	; 10b8 <o_strchr@plt+0xb8>
    107c:	ldr	r3, [pc, #56]	; 10bc <o_strchr@plt+0xbc>
    1080:	add	r0, pc, r0
    1084:	add	r3, pc, r3
    1088:	sub	r1, r3, r0
    108c:	ldr	r3, [pc, #44]	; 10c0 <o_strchr@plt+0xc0>
    1090:	asr	r1, r1, #2
    1094:	add	r3, pc, r3
    1098:	add	r1, r1, r1, lsr #31
    109c:	asrs	r1, r1, #1
    10a0:	bxeq	lr
    10a4:	ldr	r2, [pc, #24]	; 10c4 <o_strchr@plt+0xc4>
    10a8:	ldr	r3, [r3, r2]
    10ac:	cmp	r3, #0
    10b0:	bxeq	lr
    10b4:	bx	r3
    10b8:	andeq	r2, r1, ip, lsr r0
    10bc:	andeq	r2, r1, r8, lsr r0
    10c0:	andeq	r1, r1, r4, ror #30
    10c4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    10c8:	ldr	r3, [pc, #76]	; 111c <o_strchr@plt+0x11c>
    10cc:	ldr	r2, [pc, #76]	; 1120 <o_strchr@plt+0x120>
    10d0:	add	r3, pc, r3
    10d4:	add	r2, pc, r2
    10d8:	ldrb	r3, [r3]
    10dc:	cmp	r3, #0
    10e0:	bxne	lr
    10e4:	ldr	r3, [pc, #56]	; 1124 <o_strchr@plt+0x124>
    10e8:	push	{r4, lr}
    10ec:	ldr	r3, [r2, r3]
    10f0:	cmp	r3, #0
    10f4:	beq	1104 <o_strchr@plt+0x104>
    10f8:	ldr	r3, [pc, #40]	; 1128 <o_strchr@plt+0x128>
    10fc:	ldr	r0, [pc, r3]
    1100:	bl	e80 <__cxa_finalize@plt>
    1104:	bl	1034 <o_strchr@plt+0x34>
    1108:	ldr	r3, [pc, #28]	; 112c <o_strchr@plt+0x12c>
    110c:	mov	r2, #1
    1110:	add	r3, pc, r3
    1114:	strb	r2, [r3]
    1118:	pop	{r4, pc}
    111c:	andeq	r1, r1, ip, ror #31
    1120:	andeq	r1, r1, r4, lsr #30
    1124:	andeq	r0, r0, r4, lsr #1
    1128:			; <UNDEFINED> instruction: 0x00011fb0
    112c:	andeq	r1, r1, ip, lsr #31
    1130:	b	1078 <o_strchr@plt+0x78>
    1134:	andeq	r0, r0, r0

00001138 <o_base64_encode@@Base>:
    1138:	strd	r4, [sp, #-12]!
    113c:	str	lr, [sp, #8]
    1140:	lsl	ip, r1, #2
    1144:	movw	lr, #43691	; 0xaaab
    1148:	movt	lr, #43690	; 0xaaaa
    114c:	umull	lr, ip, lr, ip
    1150:	lsr	ip, ip, #1
    1154:	add	r4, ip, #4
    1158:	movw	lr, #36409	; 0x8e39
    115c:	movt	lr, #14563	; 0x38e3
    1160:	umull	lr, r4, lr, r4
    1164:	add	ip, ip, #5
    1168:	add	r4, ip, r4, lsr #4
    116c:	mov	lr, r3
    1170:	clz	r3, r3
    1174:	lsr	r3, r3, #5
    1178:	cmp	r0, #0
    117c:	moveq	r3, #1
    1180:	cmp	r1, r4
    1184:	movls	r4, r3
    1188:	orrhi	r4, r3, #1
    118c:	cmp	r4, #0
    1190:	movne	r0, #0
    1194:	bne	12f8 <o_base64_encode@@Base+0x1c0>
    1198:	mov	ip, r0
    119c:	add	r1, r0, r1
    11a0:	mov	r0, #0
    11a4:	str	r0, [lr]
    11a8:	ldr	r4, [pc, #436]	; 1364 <o_base64_encode@@Base+0x22c>
    11ac:	add	r4, pc, r4
    11b0:	b	11d0 <o_base64_encode@@Base+0x98>
    11b4:	ldr	r3, [lr]
    11b8:	add	r3, r3, #4
    11bc:	str	r3, [lr]
    11c0:	add	ip, ip, #3
    11c4:	add	r0, r0, #4
    11c8:	cmp	r0, #72	; 0x48
    11cc:	movge	r0, #0
    11d0:	sub	r3, r1, ip
    11d4:	cmp	r3, #2
    11d8:	ble	1240 <o_base64_encode@@Base+0x108>
    11dc:	cmp	r2, #0
    11e0:	beq	11b4 <o_base64_encode@@Base+0x7c>
    11e4:	ldrb	r3, [ip]
    11e8:	ldrb	r3, [r4, r3, lsr #2]
    11ec:	strb	r3, [r2]
    11f0:	ldrb	r3, [ip]
    11f4:	lsl	r3, r3, #4
    11f8:	and	r3, r3, #48	; 0x30
    11fc:	ldrb	r5, [ip, #1]
    1200:	orr	r3, r3, r5, lsr #4
    1204:	ldrb	r3, [r4, r3]
    1208:	strb	r3, [r2, #1]
    120c:	ldrb	r3, [ip, #1]
    1210:	lsl	r3, r3, #2
    1214:	and	r3, r3, #60	; 0x3c
    1218:	ldrb	r5, [ip, #2]
    121c:	orr	r3, r3, r5, lsr #6
    1220:	ldrb	r3, [r4, r3]
    1224:	strb	r3, [r2, #2]
    1228:	ldrb	r3, [ip, #2]
    122c:	and	r3, r3, #63	; 0x3f
    1230:	ldrb	r3, [r4, r3]
    1234:	strb	r3, [r2, #3]
    1238:	add	r2, r2, #4
    123c:	b	11b4 <o_base64_encode@@Base+0x7c>
    1240:	cmp	ip, r1
    1244:	beq	12e8 <o_base64_encode@@Base+0x1b0>
    1248:	cmp	r2, #0
    124c:	beq	1344 <o_base64_encode@@Base+0x20c>
    1250:	mov	r1, r2
    1254:	ldrb	r4, [ip]
    1258:	ldr	r0, [pc, #264]	; 1368 <o_base64_encode@@Base+0x230>
    125c:	add	r0, pc, r0
    1260:	ldrb	r0, [r0, r4, lsr #2]
    1264:	strb	r0, [r1], #1
    1268:	ldr	r0, [lr]
    126c:	add	r0, r0, #1
    1270:	str	r0, [lr]
    1274:	cmp	r3, #1
    1278:	beq	1304 <o_base64_encode@@Base+0x1cc>
    127c:	cmp	r1, #0
    1280:	beq	12c0 <o_base64_encode@@Base+0x188>
    1284:	ldr	r0, [pc, #224]	; 136c <o_base64_encode@@Base+0x234>
    1288:	add	r0, pc, r0
    128c:	ldrb	r3, [ip]
    1290:	lsl	r3, r3, #4
    1294:	and	r3, r3, #48	; 0x30
    1298:	ldrb	r1, [ip, #1]
    129c:	orr	r3, r3, r1, lsr #4
    12a0:	ldrb	r3, [r0, r3]
    12a4:	strb	r3, [r2, #1]
    12a8:	add	r1, r2, #3
    12ac:	ldrb	r3, [ip, #1]
    12b0:	lsl	r3, r3, #2
    12b4:	and	r3, r3, #60	; 0x3c
    12b8:	ldrb	r3, [r0, r3]
    12bc:	strb	r3, [r2, #2]
    12c0:	ldr	r3, [lr]
    12c4:	add	r3, r3, #2
    12c8:	str	r3, [lr]
    12cc:	cmp	r1, #0
    12d0:	mov	r2, r1
    12d4:	movne	r3, #61	; 0x3d
    12d8:	strbne	r3, [r2], #1
    12dc:	ldr	r3, [lr]
    12e0:	add	r3, r3, #1
    12e4:	str	r3, [lr]
    12e8:	cmp	r2, #0
    12ec:	movne	r3, #0
    12f0:	strbne	r3, [r2]
    12f4:	mov	r0, #1
    12f8:	ldrd	r4, [sp]
    12fc:	add	sp, sp, #8
    1300:	pop	{pc}		; (ldr pc, [sp], #4)
    1304:	cmp	r1, #0
    1308:	beq	1334 <o_base64_encode@@Base+0x1fc>
    130c:	ldrb	r3, [ip]
    1310:	lsl	r3, r3, #4
    1314:	and	r3, r3, #48	; 0x30
    1318:	ldr	r1, [pc, #80]	; 1370 <o_base64_encode@@Base+0x238>
    131c:	add	r1, pc, r1
    1320:	ldrb	r3, [r1, r3]
    1324:	strb	r3, [r2, #1]
    1328:	add	r1, r2, #3
    132c:	mov	r3, #61	; 0x3d
    1330:	strb	r3, [r2, #2]
    1334:	ldr	r3, [lr]
    1338:	add	r3, r3, #2
    133c:	str	r3, [lr]
    1340:	b	12cc <o_base64_encode@@Base+0x194>
    1344:	ldr	r1, [lr]
    1348:	add	r1, r1, #1
    134c:	str	r1, [lr]
    1350:	cmp	r3, #1
    1354:	movne	r1, r2
    1358:	bne	12c0 <o_base64_encode@@Base+0x188>
    135c:	mov	r1, r2
    1360:	b	1334 <o_base64_encode@@Base+0x1fc>
    1364:	andeq	r1, r0, ip, lsl #24
    1368:	andeq	r1, r0, ip, asr fp
    136c:	andeq	r1, r0, r0, lsr fp
    1370:	muleq	r0, ip, sl

00001374 <o_base64_decode@@Base>:
    1374:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1378:	strd	r6, [sp, #8]
    137c:	strd	r8, [sp, #16]
    1380:	strd	sl, [sp, #24]
    1384:	str	lr, [sp, #32]
    1388:	sub	sp, sp, #276	; 0x114
    138c:	mov	fp, r3
    1390:	clz	r3, r3
    1394:	lsr	r3, r3, #5
    1398:	cmp	r1, #0
    139c:	moveq	r3, #1
    13a0:	cmp	r0, #0
    13a4:	moveq	r3, #1
    13a8:	cmp	r3, #0
    13ac:	movne	r8, #0
    13b0:	beq	13d4 <o_base64_decode@@Base+0x60>
    13b4:	mov	r0, r8
    13b8:	add	sp, sp, #276	; 0x114
    13bc:	ldrd	r4, [sp]
    13c0:	ldrd	r6, [sp, #8]
    13c4:	ldrd	r8, [sp, #16]
    13c8:	ldrd	sl, [sp, #24]
    13cc:	add	sp, sp, #32
    13d0:	pop	{pc}		; (ldr pc, [sp], #4)
    13d4:	mov	r9, r2
    13d8:	mov	r7, r1
    13dc:	mov	r5, r0
    13e0:	mov	r2, #256	; 0x100
    13e4:	mov	r1, #128	; 0x80
    13e8:	add	r0, sp, #16
    13ec:	bl	f88 <memset@plt>
    13f0:	ldr	r0, [pc, #468]	; 15cc <o_base64_decode@@Base+0x258>
    13f4:	add	r0, pc, r0
    13f8:	sub	ip, r0, #1
    13fc:	add	r0, r0, #63	; 0x3f
    1400:	mov	r2, ip
    1404:	add	r2, r2, #1
    1408:	mov	r3, r2
    140c:	ldrb	r1, [r3], #-1
    1410:	add	lr, sp, #272	; 0x110
    1414:	add	r1, lr, r1
    1418:	sub	r3, r3, ip
    141c:	strb	r3, [r1, #-256]	; 0xffffff00
    1420:	cmp	r2, r0
    1424:	bne	1404 <o_base64_decode@@Base+0x90>
    1428:	mov	r1, #0
    142c:	strb	r1, [sp, #77]	; 0x4d
    1430:	sub	r4, r5, #1
    1434:	mov	r3, r4
    1438:	mov	sl, r5
    143c:	add	r0, r3, #1
    1440:	ldrb	r2, [r3, #1]
    1444:	add	ip, sp, #272	; 0x110
    1448:	add	r2, ip, r2
    144c:	ldrb	r2, [r2, #-256]	; 0xffffff00
    1450:	cmp	r2, #128	; 0x80
    1454:	addne	r1, r1, #1
    1458:	add	r3, r3, #2
    145c:	sub	r2, r3, r5
    1460:	mov	r3, r0
    1464:	cmp	r7, r2
    1468:	bhi	143c <o_base64_decode@@Base+0xc8>
    146c:	cmp	r1, #0
    1470:	moveq	r8, #0
    1474:	beq	13b4 <o_base64_decode@@Base+0x40>
    1478:	ands	r3, r1, #3
    147c:	str	r3, [sp, #4]
    1480:	movne	r8, #0
    1484:	bne	13b4 <o_base64_decode@@Base+0x40>
    1488:	mov	r8, #0
    148c:	str	r8, [fp]
    1490:	mov	r5, r3
    1494:	ldr	r3, [pc, #308]	; 15d0 <o_base64_decode@@Base+0x25c>
    1498:	add	r3, pc, r3
    149c:	str	r3, [sp]
    14a0:	b	1508 <o_base64_decode@@Base+0x194>
    14a4:	ldrb	r3, [r4, #1]
    14a8:	cmp	r3, #61	; 0x3d
    14ac:	cmpne	r3, #32
    14b0:	movne	r2, #1
    14b4:	moveq	r2, #0
    14b8:	sub	r3, r3, #9
    14bc:	uxtb	r3, r3
    14c0:	cmp	r3, #1
    14c4:	movls	r3, #0
    14c8:	andhi	r3, r2, #1
    14cc:	cmp	r3, #0
    14d0:	beq	1520 <o_base64_decode@@Base+0x1ac>
    14d4:	mov	r8, #0
    14d8:	b	13b4 <o_base64_decode@@Base+0x40>
    14dc:	ldr	r3, [fp]
    14e0:	add	r2, r3, #3
    14e4:	str	r2, [fp]
    14e8:	cmp	r8, #0
    14ec:	bne	1598 <o_base64_decode@@Base+0x224>
    14f0:	ldr	r5, [sp, #4]
    14f4:	add	r4, r4, #2
    14f8:	sub	r3, r4, sl
    14fc:	mov	r4, r6
    1500:	cmp	r7, r3
    1504:	bls	15c4 <o_base64_decode@@Base+0x250>
    1508:	add	r6, r4, #1
    150c:	ldrb	r1, [r4, #1]
    1510:	ldr	r0, [sp]
    1514:	bl	1000 <o_strchr@plt>
    1518:	cmp	r0, #0
    151c:	beq	14a4 <o_base64_decode@@Base+0x130>
    1520:	ldrb	r2, [r6]
    1524:	add	r3, sp, #272	; 0x110
    1528:	add	r3, r3, r2
    152c:	ldrb	r3, [r3, #-256]	; 0xffffff00
    1530:	cmp	r3, #128	; 0x80
    1534:	beq	14f4 <o_base64_decode@@Base+0x180>
    1538:	cmp	r2, #61	; 0x3d
    153c:	addeq	r8, r8, #1
    1540:	add	r2, sp, #272	; 0x110
    1544:	add	r2, r2, r5
    1548:	strb	r3, [r2, #-260]	; 0xfffffefc
    154c:	add	r5, r5, #1
    1550:	cmp	r5, #4
    1554:	bne	14f4 <o_base64_decode@@Base+0x180>
    1558:	cmp	r9, #0
    155c:	beq	14dc <o_base64_decode@@Base+0x168>
    1560:	ldrb	r0, [sp, #13]
    1564:	ldrb	r2, [sp, #12]
    1568:	lsr	r3, r0, #4
    156c:	orr	r3, r3, r2, lsl #2
    1570:	strb	r3, [r9]
    1574:	ldrb	r1, [sp, #14]
    1578:	lsr	r2, r1, #2
    157c:	orr	r2, r2, r0, lsl #4
    1580:	strb	r2, [r9, #1]
    1584:	ldrb	r3, [sp, #15]
    1588:	orr	r3, r3, r1, lsl #6
    158c:	strb	r3, [r9, #2]
    1590:	add	r9, r9, #3
    1594:	b	14dc <o_base64_decode@@Base+0x168>
    1598:	cmp	r8, #1
    159c:	addeq	r3, r3, #2
    15a0:	streq	r3, [fp]
    15a4:	beq	13b4 <o_base64_decode@@Base+0x40>
    15a8:	cmp	r8, #2
    15ac:	movne	r8, #0
    15b0:	bne	13b4 <o_base64_decode@@Base+0x40>
    15b4:	add	r3, r3, #1
    15b8:	str	r3, [fp]
    15bc:	mov	r8, #1
    15c0:	b	13b4 <o_base64_decode@@Base+0x40>
    15c4:	mov	r8, #1
    15c8:	b	13b4 <o_base64_decode@@Base+0x40>
    15cc:	andeq	r1, r0, r4, asr #19
    15d0:	andeq	r1, r0, r0, lsr #18

000015d4 <o_base64url_encode@@Base>:
    15d4:	strd	r4, [sp, #-16]!
    15d8:	str	r6, [sp, #8]
    15dc:	str	lr, [sp, #12]
    15e0:	vpush	{d8}
    15e4:	mov	r4, r3
    15e8:	subs	r5, r2, #0
    15ec:	beq	16b8 <o_base64url_encode@@Base+0xe4>
    15f0:	mov	r2, r5
    15f4:	bl	ed4 <o_base64_encode@plt>
    15f8:	cmp	r0, #0
    15fc:	beq	1704 <o_base64url_encode@@Base+0x130>
    1600:	ldr	r3, [r4]
    1604:	cmp	r3, #1
    1608:	bls	1674 <o_base64url_encode@@Base+0xa0>
    160c:	sub	r2, r3, #2
    1610:	ldrb	r1, [r5, r2]
    1614:	cmp	r1, #61	; 0x3d
    1618:	beq	1644 <o_base64url_encode@@Base+0x70>
    161c:	sub	r3, r3, #1
    1620:	ldrb	r2, [r5, r3]
    1624:	cmp	r2, #61	; 0x3d
    1628:	bne	1664 <o_base64url_encode@@Base+0x90>
    162c:	mov	r2, #0
    1630:	strb	r2, [r5, r3]
    1634:	ldr	r3, [r4]
    1638:	sub	r3, r3, #1
    163c:	str	r3, [r4]
    1640:	b	1658 <o_base64url_encode@@Base+0x84>
    1644:	mov	r3, #0
    1648:	strb	r3, [r5, r2]
    164c:	ldr	r3, [r4]
    1650:	sub	r3, r3, #2
    1654:	str	r3, [r4]
    1658:	ldr	r3, [r4]
    165c:	cmp	r3, #0
    1660:	beq	1704 <o_base64url_encode@@Base+0x130>
    1664:	sub	r3, r5, #1
    1668:	mov	lr, #95	; 0x5f
    166c:	mov	ip, #45	; 0x2d
    1670:	b	16a0 <o_base64url_encode@@Base+0xcc>
    1674:	cmp	r3, #0
    1678:	beq	1704 <o_base64url_encode@@Base+0x130>
    167c:	b	161c <o_base64url_encode@@Base+0x48>
    1680:	cmp	r2, #47	; 0x2f
    1684:	strbeq	lr, [r1]
    1688:	add	r3, r3, #2
    168c:	sub	r2, r3, r5
    1690:	mov	r3, r1
    1694:	ldr	r1, [r4]
    1698:	cmp	r1, r2
    169c:	bls	1704 <o_base64url_encode@@Base+0x130>
    16a0:	add	r1, r3, #1
    16a4:	ldrb	r2, [r3, #1]
    16a8:	cmp	r2, #43	; 0x2b
    16ac:	strbeq	ip, [r3, #1]
    16b0:	bne	1680 <o_base64url_encode@@Base+0xac>
    16b4:	b	1688 <o_base64url_encode@@Base+0xb4>
    16b8:	cmp	r1, #0
    16bc:	cmpne	r3, #0
    16c0:	moveq	r0, #0
    16c4:	beq	1704 <o_base64url_encode@@Base+0x130>
    16c8:	vmov	s15, r1
    16cc:	vcvt.f64.u32	d7, s15
    16d0:	vldr	d6, [pc, #64]	; 1718 <o_base64url_encode@@Base+0x144>
    16d4:	vmul.f64	d7, d7, d6
    16d8:	vldr	d6, [pc, #64]	; 1720 <o_base64url_encode@@Base+0x14c>
    16dc:	vdiv.f64	d8, d7, d6
    16e0:	vmov.f64	d0, d8
    16e4:	bl	e98 <trunc@plt>
    16e8:	vcmp.f64	d0, d8
    16ec:	vmrs	APSR_nzcv, fpscr
    16f0:	vldrne	d8, [pc, #48]	; 1728 <o_base64url_encode@@Base+0x154>
    16f4:	vaddne.f64	d8, d0, d8
    16f8:	vcvt.u32.f64	s16, d8
    16fc:	vstr	s16, [r4]
    1700:	mov	r0, #1
    1704:	vpop	{d8}
    1708:	ldrd	r4, [sp]
    170c:	ldr	r6, [sp, #8]
    1710:	add	sp, sp, #12
    1714:	pop	{pc}		; (ldr pc, [sp], #4)
    1718:	andeq	r0, r0, r0
    171c:	andsmi	r0, r0, r0
    1720:	andeq	r0, r0, r0
    1724:	andmi	r0, r8, r0
    1728:	andeq	r0, r0, r0
    172c:	svccc	0x00f00000	; IMB

00001730 <o_base64url_2_base64@@Base>:
    1730:	cmp	r0, #0
    1734:	beq	1814 <o_base64url_2_base64@@Base+0xe4>
    1738:	strd	r4, [sp, #-24]!	; 0xffffffe8
    173c:	strd	r6, [sp, #8]
    1740:	str	r8, [sp, #16]
    1744:	str	lr, [sp, #20]
    1748:	mov	r7, r3
    174c:	mov	r6, r2
    1750:	mov	r5, r1
    1754:	mov	r2, r1
    1758:	mov	r1, r0
    175c:	mov	r0, r6
    1760:	bl	ebc <memcpy@plt>
    1764:	str	r5, [r7]
    1768:	cmp	r5, #0
    176c:	beq	181c <o_base64url_2_base64@@Base+0xec>
    1770:	sub	r0, r6, #1
    1774:	sub	lr, r5, #1
    1778:	add	lr, r6, lr
    177c:	mov	r2, #47	; 0x2f
    1780:	mov	r3, #43	; 0x2b
    1784:	b	1798 <o_base64url_2_base64@@Base+0x68>
    1788:	cmp	ip, #95	; 0x5f
    178c:	strbeq	r2, [r0]
    1790:	cmp	r0, lr
    1794:	beq	17b0 <o_base64url_2_base64@@Base+0x80>
    1798:	add	r0, r0, #1
    179c:	ldrb	ip, [r0]
    17a0:	cmp	ip, #45	; 0x2d
    17a4:	strbeq	r3, [r0]
    17a8:	bne	1788 <o_base64url_2_base64@@Base+0x58>
    17ac:	b	1790 <o_base64url_2_base64@@Base+0x60>
    17b0:	and	r3, r5, #3
    17b4:	cmp	r3, #2
    17b8:	beq	17e4 <o_base64url_2_base64@@Base+0xb4>
    17bc:	cmp	r3, #3
    17c0:	movne	r0, #1
    17c4:	bne	1800 <o_base64url_2_base64@@Base+0xd0>
    17c8:	mov	r3, #61	; 0x3d
    17cc:	strb	r3, [r6, r5]
    17d0:	ldr	r3, [r7]
    17d4:	add	r3, r3, #1
    17d8:	str	r3, [r7]
    17dc:	mov	r0, #1
    17e0:	b	1800 <o_base64url_2_base64@@Base+0xd0>
    17e4:	mov	r3, #61	; 0x3d
    17e8:	strb	r3, [r6, r5]!
    17ec:	strb	r3, [r6, #1]
    17f0:	ldr	r3, [r7]
    17f4:	add	r3, r3, #2
    17f8:	str	r3, [r7]
    17fc:	mov	r0, #1
    1800:	ldrd	r4, [sp]
    1804:	ldrd	r6, [sp, #8]
    1808:	ldr	r8, [sp, #16]
    180c:	add	sp, sp, #20
    1810:	pop	{pc}		; (ldr pc, [sp], #4)
    1814:	mov	r0, #0
    1818:	bx	lr
    181c:	mov	r0, #1
    1820:	b	1800 <o_base64url_2_base64@@Base+0xd0>

00001824 <o_base64url_decode@@Base>:
    1824:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1828:	strd	r6, [sp, #8]
    182c:	str	r8, [sp, #16]
    1830:	str	lr, [sp, #20]
    1834:	sub	sp, sp, #8
    1838:	subs	r5, r0, #0
    183c:	moveq	r4, #0
    1840:	beq	188c <o_base64url_decode@@Base+0x68>
    1844:	mov	r7, r3
    1848:	mov	r6, r2
    184c:	mov	r4, r1
    1850:	add	r0, r1, #3
    1854:	bl	f7c <o_malloc@plt>
    1858:	subs	r8, r0, #0
    185c:	moveq	r4, #0
    1860:	beq	188c <o_base64url_decode@@Base+0x68>
    1864:	add	r3, sp, #4
    1868:	mov	r2, r8
    186c:	mov	r1, r4
    1870:	mov	r0, r5
    1874:	bl	fb8 <o_base64url_2_base64@plt>
    1878:	cmp	r0, #0
    187c:	moveq	r4, #1
    1880:	bne	18a8 <o_base64url_decode@@Base+0x84>
    1884:	mov	r0, r8
    1888:	bl	ea4 <o_free@plt>
    188c:	mov	r0, r4
    1890:	add	sp, sp, #8
    1894:	ldrd	r4, [sp]
    1898:	ldrd	r6, [sp, #8]
    189c:	ldr	r8, [sp, #16]
    18a0:	add	sp, sp, #20
    18a4:	pop	{pc}		; (ldr pc, [sp], #4)
    18a8:	mov	r3, r7
    18ac:	mov	r2, r6
    18b0:	ldr	r1, [sp, #4]
    18b4:	mov	r0, r8
    18b8:	bl	fd0 <o_base64_decode@plt>
    18bc:	mov	r4, r0
    18c0:	b	1884 <o_base64url_decode@@Base+0x60>

000018c4 <o_base64_2_base64url@@Base>:
    18c4:	cmp	r0, #0
    18c8:	beq	1988 <o_base64_2_base64url@@Base+0xc4>
    18cc:	strd	r4, [sp, #-16]!
    18d0:	str	r6, [sp, #8]
    18d4:	str	lr, [sp, #12]
    18d8:	mov	r5, r3
    18dc:	mov	r4, r2
    18e0:	mov	r6, r1
    18e4:	mov	r2, r1
    18e8:	mov	r1, r0
    18ec:	mov	r0, r4
    18f0:	bl	ebc <memcpy@plt>
    18f4:	str	r6, [r5]
    18f8:	cmp	r6, #0
    18fc:	beq	1940 <o_base64_2_base64url@@Base+0x7c>
    1900:	sub	r0, r4, #1
    1904:	sub	ip, r6, #1
    1908:	add	ip, r4, ip
    190c:	mov	lr, #95	; 0x5f
    1910:	mov	r2, #45	; 0x2d
    1914:	b	1928 <o_base64_2_base64url@@Base+0x64>
    1918:	cmp	r1, #47	; 0x2f
    191c:	strbeq	lr, [r0]
    1920:	cmp	r0, ip
    1924:	beq	1940 <o_base64_2_base64url@@Base+0x7c>
    1928:	add	r0, r0, #1
    192c:	ldrb	r1, [r0]
    1930:	cmp	r1, #43	; 0x2b
    1934:	strbeq	r2, [r0]
    1938:	bne	1918 <o_base64_2_base64url@@Base+0x54>
    193c:	b	1920 <o_base64_2_base64url@@Base+0x5c>
    1940:	ldr	r1, [r5]
    1944:	add	r3, r4, r1
    1948:	ldrb	r3, [r3, #-1]
    194c:	cmp	r3, #61	; 0x3d
    1950:	bne	1990 <o_base64_2_base64url@@Base+0xcc>
    1954:	sub	r1, r1, #2
    1958:	add	r1, r4, r1
    195c:	rsb	r4, r4, #1
    1960:	add	r3, r4, r1
    1964:	str	r3, [r5]
    1968:	ldrb	r3, [r1], #-1
    196c:	cmp	r3, #61	; 0x3d
    1970:	beq	1960 <o_base64_2_base64url@@Base+0x9c>
    1974:	mov	r0, #1
    1978:	ldrd	r4, [sp]
    197c:	ldr	r6, [sp, #8]
    1980:	add	sp, sp, #12
    1984:	pop	{pc}		; (ldr pc, [sp], #4)
    1988:	mov	r0, #0
    198c:	bx	lr
    1990:	mov	r0, #1
    1994:	b	1978 <o_base64_2_base64url@@Base+0xb4>

00001998 <o_malloc@@Base>:
    1998:	cmp	r0, #0
    199c:	beq	19c4 <o_malloc@@Base+0x2c>
    19a0:	str	r4, [sp, #-8]!
    19a4:	str	lr, [sp, #4]
    19a8:	ldr	r3, [pc, #28]	; 19cc <o_malloc@@Base+0x34>
    19ac:	add	r3, pc, r3
    19b0:	ldr	r3, [r3]
    19b4:	blx	r3
    19b8:	ldr	r4, [sp]
    19bc:	add	sp, sp, #4
    19c0:	pop	{pc}		; (ldr pc, [sp], #4)
    19c4:	mov	r0, #0
    19c8:	bx	lr
    19cc:	andeq	r1, r1, r4, lsl #14

000019d0 <o_realloc@@Base>:
    19d0:	cmp	r1, #0
    19d4:	beq	19fc <o_realloc@@Base+0x2c>
    19d8:	str	r4, [sp, #-8]!
    19dc:	str	lr, [sp, #4]
    19e0:	ldr	r3, [pc, #28]	; 1a04 <o_realloc@@Base+0x34>
    19e4:	add	r3, pc, r3
    19e8:	ldr	r3, [r3, #4]
    19ec:	blx	r3
    19f0:	ldr	r4, [sp]
    19f4:	add	sp, sp, #4
    19f8:	pop	{pc}		; (ldr pc, [sp], #4)
    19fc:	mov	r0, #0
    1a00:	bx	lr
    1a04:	andeq	r1, r1, ip, asr #13

00001a08 <o_free@@Base>:
    1a08:	cmp	r0, #0
    1a0c:	bxeq	lr
    1a10:	str	r4, [sp, #-8]!
    1a14:	str	lr, [sp, #4]
    1a18:	ldr	r3, [pc, #20]	; 1a34 <o_free@@Base+0x2c>
    1a1c:	add	r3, pc, r3
    1a20:	ldr	r3, [r3, #8]
    1a24:	blx	r3
    1a28:	ldr	r4, [sp]
    1a2c:	add	sp, sp, #4
    1a30:	pop	{pc}		; (ldr pc, [sp], #4)
    1a34:	muleq	r1, r4, r6

00001a38 <o_set_alloc_funcs@@Base>:
    1a38:	ldr	r3, [pc, #16]	; 1a50 <o_set_alloc_funcs@@Base+0x18>
    1a3c:	add	r3, pc, r3
    1a40:	str	r0, [r3]
    1a44:	str	r1, [r3, #4]
    1a48:	str	r2, [r3, #8]
    1a4c:	bx	lr
    1a50:	andeq	r1, r1, r4, ror r6

00001a54 <o_get_alloc_funcs@@Base>:
    1a54:	cmp	r0, #0
    1a58:	beq	1a6c <o_get_alloc_funcs@@Base+0x18>
    1a5c:	ldr	r3, [pc, #60]	; 1aa0 <o_get_alloc_funcs@@Base+0x4c>
    1a60:	add	r3, pc, r3
    1a64:	ldr	r3, [r3]
    1a68:	str	r3, [r0]
    1a6c:	cmp	r1, #0
    1a70:	beq	1a84 <o_get_alloc_funcs@@Base+0x30>
    1a74:	ldr	r3, [pc, #40]	; 1aa4 <o_get_alloc_funcs@@Base+0x50>
    1a78:	add	r3, pc, r3
    1a7c:	ldr	r3, [r3, #4]
    1a80:	str	r3, [r1]
    1a84:	cmp	r2, #0
    1a88:	beq	1a9c <o_get_alloc_funcs@@Base+0x48>
    1a8c:	ldr	r3, [pc, #20]	; 1aa8 <o_get_alloc_funcs@@Base+0x54>
    1a90:	add	r3, pc, r3
    1a94:	ldr	r3, [r3, #8]
    1a98:	str	r3, [r2]
    1a9c:	bx	lr
    1aa0:	andeq	r1, r1, r0, asr r6
    1aa4:	andeq	r1, r1, r8, lsr r6
    1aa8:	andeq	r1, r1, r0, lsr #12

00001aac <msprintf@@Base>:
    1aac:	push	{r0, r1, r2, r3}
    1ab0:	strd	r4, [sp, #-16]!
    1ab4:	str	r6, [sp, #8]
    1ab8:	str	lr, [sp, #12]
    1abc:	sub	sp, sp, #8
    1ac0:	ldr	r4, [sp, #24]
    1ac4:	cmp	r4, #0
    1ac8:	moveq	r5, r4
    1acc:	beq	1b14 <msprintf@@Base+0x68>
    1ad0:	add	r3, sp, #28
    1ad4:	str	r3, [sp, #4]
    1ad8:	str	r3, [sp]
    1adc:	mov	r2, r4
    1ae0:	mov	r1, #0
    1ae4:	mov	r0, r1
    1ae8:	bl	fdc <vsnprintf@plt>
    1aec:	add	r6, r0, #1
    1af0:	mov	r0, r6
    1af4:	bl	f7c <o_malloc@plt>
    1af8:	subs	r5, r0, #0
    1afc:	beq	1b14 <msprintf@@Base+0x68>
    1b00:	ldr	r3, [sp]
    1b04:	mov	r2, r4
    1b08:	mov	r1, r6
    1b0c:	mov	r0, r5
    1b10:	bl	fdc <vsnprintf@plt>
    1b14:	mov	r0, r5
    1b18:	add	sp, sp, #8
    1b1c:	ldrd	r4, [sp]
    1b20:	ldr	r6, [sp, #8]
    1b24:	ldr	lr, [sp, #12]
    1b28:	add	sp, sp, #16
    1b2c:	add	sp, sp, #16
    1b30:	bx	lr

00001b34 <mstrcatf@@Base>:
    1b34:	push	{r1, r2, r3}
    1b38:	strd	r4, [sp, #-20]!	; 0xffffffec
    1b3c:	strd	r6, [sp, #8]
    1b40:	str	lr, [sp, #16]
    1b44:	sub	sp, sp, #8
    1b48:	ldr	r5, [sp, #28]
    1b4c:	cmp	r5, #0
    1b50:	moveq	r6, r5
    1b54:	beq	1bd4 <mstrcatf@@Base+0xa0>
    1b58:	mov	r4, r0
    1b5c:	cmp	r0, #0
    1b60:	beq	1bf4 <mstrcatf@@Base+0xc0>
    1b64:	add	r3, sp, #32
    1b68:	str	r3, [sp, #4]
    1b6c:	str	r3, [sp]
    1b70:	mov	r2, r5
    1b74:	mov	r1, #0
    1b78:	mov	r0, r1
    1b7c:	bl	fdc <vsnprintf@plt>
    1b80:	add	r7, r0, #1
    1b84:	mov	r0, r7
    1b88:	bl	f7c <o_malloc@plt>
    1b8c:	subs	r6, r0, #0
    1b90:	beq	1bd4 <mstrcatf@@Base+0xa0>
    1b94:	ldr	r3, [sp]
    1b98:	mov	r2, r5
    1b9c:	mov	r1, r7
    1ba0:	mov	r0, r6
    1ba4:	bl	fdc <vsnprintf@plt>
    1ba8:	mov	r2, r6
    1bac:	mov	r1, r4
    1bb0:	ldr	r0, [pc, #132]	; 1c3c <mstrcatf@@Base+0x108>
    1bb4:	add	r0, pc, r0
    1bb8:	bl	fac <msprintf@plt>
    1bbc:	mov	r5, r0
    1bc0:	mov	r0, r6
    1bc4:	bl	ea4 <o_free@plt>
    1bc8:	mov	r0, r4
    1bcc:	bl	ea4 <o_free@plt>
    1bd0:	mov	r6, r5
    1bd4:	mov	r0, r6
    1bd8:	add	sp, sp, #8
    1bdc:	ldrd	r4, [sp]
    1be0:	ldrd	r6, [sp, #8]
    1be4:	ldr	lr, [sp, #16]
    1be8:	add	sp, sp, #20
    1bec:	add	sp, sp, #12
    1bf0:	bx	lr
    1bf4:	add	r3, sp, #32
    1bf8:	str	r3, [sp, #4]
    1bfc:	str	r3, [sp]
    1c00:	mov	r2, r5
    1c04:	mov	r1, #0
    1c08:	mov	r0, r1
    1c0c:	bl	fdc <vsnprintf@plt>
    1c10:	add	r4, r0, #1
    1c14:	mov	r0, r4
    1c18:	bl	f7c <o_malloc@plt>
    1c1c:	subs	r6, r0, #0
    1c20:	beq	1bd4 <mstrcatf@@Base+0xa0>
    1c24:	ldr	r3, [sp]
    1c28:	mov	r2, r5
    1c2c:	mov	r1, r4
    1c30:	mov	r0, r6
    1c34:	bl	fdc <vsnprintf@plt>
    1c38:	b	1bd4 <mstrcatf@@Base+0xa0>
    1c3c:	andeq	r1, r0, r8, asr #4

00001c40 <o_strndup@@Base>:
    1c40:	strd	r4, [sp, #-16]!
    1c44:	str	r6, [sp, #8]
    1c48:	str	lr, [sp, #12]
    1c4c:	subs	r5, r0, #0
    1c50:	moveq	r6, r5
    1c54:	beq	1c84 <o_strndup@@Base+0x44>
    1c58:	mov	r4, r1
    1c5c:	add	r0, r1, #1
    1c60:	bl	f7c <o_malloc@plt>
    1c64:	subs	r6, r0, #0
    1c68:	beq	1c84 <o_strndup@@Base+0x44>
    1c6c:	mov	r2, r4
    1c70:	mov	r1, r5
    1c74:	mov	r0, r6
    1c78:	bl	ebc <memcpy@plt>
    1c7c:	mov	r3, #0
    1c80:	strb	r3, [r6, r4]
    1c84:	mov	r0, r6
    1c88:	ldrd	r4, [sp]
    1c8c:	ldr	r6, [sp, #8]
    1c90:	add	sp, sp, #12
    1c94:	pop	{pc}		; (ldr pc, [sp], #4)

00001c98 <o_strdup@@Base>:
    1c98:	str	r4, [sp, #-8]!
    1c9c:	str	lr, [sp, #4]
    1ca0:	subs	r4, r0, #0
    1ca4:	moveq	r0, r4
    1ca8:	beq	1cc0 <o_strdup@@Base+0x28>
    1cac:	mov	r0, r4
    1cb0:	bl	f4c <strlen@plt>
    1cb4:	mov	r1, r0
    1cb8:	mov	r0, r4
    1cbc:	bl	e8c <o_strndup@plt>
    1cc0:	ldr	r4, [sp]
    1cc4:	add	sp, sp, #4
    1cc8:	pop	{pc}		; (ldr pc, [sp], #4)

00001ccc <str_replace@@Base>:
    1ccc:	strd	r4, [sp, #-28]!	; 0xffffffe4
    1cd0:	strd	r6, [sp, #8]
    1cd4:	strd	r8, [sp, #16]
    1cd8:	str	lr, [sp, #24]
    1cdc:	sub	sp, sp, #12
    1ce0:	mov	r7, r2
    1ce4:	clz	r2, r2
    1ce8:	lsr	r2, r2, #5
    1cec:	cmp	r1, #0
    1cf0:	moveq	r2, #1
    1cf4:	cmp	r0, #0
    1cf8:	moveq	r2, #1
    1cfc:	cmp	r2, #0
    1d00:	movne	r4, #0
    1d04:	bne	1de4 <str_replace@@Base+0x118>
    1d08:	mov	r5, r1
    1d0c:	mov	r4, r0
    1d10:	bl	e44 <strstr@plt>
    1d14:	cmp	r0, #0
    1d18:	beq	1e00 <str_replace@@Base+0x134>
    1d1c:	sub	r8, r0, r4
    1d20:	add	r6, r8, #1
    1d24:	mov	r0, r6
    1d28:	bl	f7c <o_malloc@plt>
    1d2c:	subs	r9, r0, #0
    1d30:	moveq	r4, r9
    1d34:	beq	1de4 <str_replace@@Base+0x118>
    1d38:	mov	r2, r8
    1d3c:	mov	r1, r4
    1d40:	mov	r0, r9
    1d44:	bl	ebc <memcpy@plt>
    1d48:	mov	r3, #0
    1d4c:	strb	r3, [r9, r8]
    1d50:	mov	r0, r9
    1d54:	bl	f4c <strlen@plt>
    1d58:	mov	r8, r0
    1d5c:	mov	r0, r5
    1d60:	bl	f4c <strlen@plt>
    1d64:	add	r0, r8, r0
    1d68:	mov	r2, r7
    1d6c:	mov	r1, r5
    1d70:	add	r0, r4, r0
    1d74:	bl	1ccc <str_replace@@Base>
    1d78:	subs	r5, r0, #0
    1d7c:	beq	1e10 <str_replace@@Base+0x144>
    1d80:	mov	r0, r7
    1d84:	bl	f4c <strlen@plt>
    1d88:	mov	r4, r0
    1d8c:	mov	r0, r5
    1d90:	bl	f4c <strlen@plt>
    1d94:	add	r6, r6, r4
    1d98:	add	r6, r6, r0
    1d9c:	mov	r0, r6
    1da0:	bl	f7c <o_malloc@plt>
    1da4:	subs	r4, r0, #0
    1da8:	beq	1e20 <str_replace@@Base+0x154>
    1dac:	str	r5, [sp, #4]
    1db0:	str	r7, [sp]
    1db4:	mov	r3, r9
    1db8:	ldr	r2, [pc, #148]	; 1e54 <str_replace@@Base+0x188>
    1dbc:	add	r2, pc, r2
    1dc0:	mov	r1, r6
    1dc4:	mov	r0, r4
    1dc8:	bl	f70 <snprintf@plt>
    1dcc:	cmp	r0, #0
    1dd0:	blt	1e34 <str_replace@@Base+0x168>
    1dd4:	mov	r0, r9
    1dd8:	bl	ea4 <o_free@plt>
    1ddc:	mov	r0, r5
    1de0:	bl	ea4 <o_free@plt>
    1de4:	mov	r0, r4
    1de8:	add	sp, sp, #12
    1dec:	ldrd	r4, [sp]
    1df0:	ldrd	r6, [sp, #8]
    1df4:	ldrd	r8, [sp, #16]
    1df8:	add	sp, sp, #24
    1dfc:	pop	{pc}		; (ldr pc, [sp], #4)
    1e00:	mov	r0, r4
    1e04:	bl	ec8 <o_strdup@plt>
    1e08:	mov	r4, r0
    1e0c:	b	1de4 <str_replace@@Base+0x118>
    1e10:	mov	r0, r9
    1e14:	bl	ea4 <o_free@plt>
    1e18:	mov	r4, r5
    1e1c:	b	1de4 <str_replace@@Base+0x118>
    1e20:	mov	r0, r9
    1e24:	bl	ea4 <o_free@plt>
    1e28:	mov	r0, r5
    1e2c:	bl	ea4 <o_free@plt>
    1e30:	b	1de4 <str_replace@@Base+0x118>
    1e34:	mov	r0, r9
    1e38:	bl	ea4 <o_free@plt>
    1e3c:	mov	r0, r5
    1e40:	bl	ea4 <o_free@plt>
    1e44:	mov	r0, r4
    1e48:	bl	ea4 <o_free@plt>
    1e4c:	mov	r4, #0
    1e50:	b	1de4 <str_replace@@Base+0x118>
    1e54:	andeq	r1, r0, r8, asr #32

00001e58 <o_strcmp@@Base>:
    1e58:	orrs	r3, r0, r1
    1e5c:	beq	1e98 <o_strcmp@@Base+0x40>
    1e60:	adds	r3, r0, #0
    1e64:	movne	r3, #1
    1e68:	cmp	r1, #0
    1e6c:	movne	r3, #0
    1e70:	cmp	r3, #0
    1e74:	bne	1ea0 <o_strcmp@@Base+0x48>
    1e78:	cmp	r0, #0
    1e7c:	beq	1ea8 <o_strcmp@@Base+0x50>
    1e80:	str	r4, [sp, #-8]!
    1e84:	str	lr, [sp, #4]
    1e88:	bl	e74 <strcmp@plt>
    1e8c:	ldr	r4, [sp]
    1e90:	add	sp, sp, #4
    1e94:	pop	{pc}		; (ldr pc, [sp], #4)
    1e98:	mov	r0, #0
    1e9c:	bx	lr
    1ea0:	mvn	r0, #0
    1ea4:	bx	lr
    1ea8:	mov	r0, #1
    1eac:	bx	lr

00001eb0 <o_strncmp@@Base>:
    1eb0:	orrs	r3, r0, r1
    1eb4:	moveq	r3, #1
    1eb8:	movne	r3, #0
    1ebc:	cmp	r2, #0
    1ec0:	moveq	r3, #1
    1ec4:	cmp	r3, #0
    1ec8:	beq	1ed4 <o_strncmp@@Base+0x24>
    1ecc:	mov	r0, #0
    1ed0:	bx	lr
    1ed4:	adds	r3, r0, #0
    1ed8:	movne	r3, #1
    1edc:	cmp	r1, #0
    1ee0:	movne	r3, #0
    1ee4:	cmp	r3, #0
    1ee8:	bne	1f0c <o_strncmp@@Base+0x5c>
    1eec:	cmp	r0, #0
    1ef0:	beq	1f14 <o_strncmp@@Base+0x64>
    1ef4:	str	r4, [sp, #-8]!
    1ef8:	str	lr, [sp, #4]
    1efc:	bl	ff4 <strncmp@plt>
    1f00:	ldr	r4, [sp]
    1f04:	add	sp, sp, #4
    1f08:	pop	{pc}		; (ldr pc, [sp], #4)
    1f0c:	mvn	r0, #0
    1f10:	bx	lr
    1f14:	mov	r0, #1
    1f18:	bx	lr

00001f1c <o_strcpy@@Base>:
    1f1c:	cmp	r1, #0
    1f20:	cmpne	r0, #0
    1f24:	beq	1f40 <o_strcpy@@Base+0x24>
    1f28:	str	r4, [sp, #-8]!
    1f2c:	str	lr, [sp, #4]
    1f30:	bl	f04 <strcpy@plt>
    1f34:	ldr	r4, [sp]
    1f38:	add	sp, sp, #4
    1f3c:	pop	{pc}		; (ldr pc, [sp], #4)
    1f40:	mov	r0, #0
    1f44:	bx	lr

00001f48 <o_strncpy@@Base>:
    1f48:	cmp	r1, #0
    1f4c:	cmpne	r0, #0
    1f50:	beq	1f6c <o_strncpy@@Base+0x24>
    1f54:	str	r4, [sp, #-8]!
    1f58:	str	lr, [sp, #4]
    1f5c:	bl	f94 <strncpy@plt>
    1f60:	ldr	r4, [sp]
    1f64:	add	sp, sp, #4
    1f68:	pop	{pc}		; (ldr pc, [sp], #4)
    1f6c:	mov	r0, #0
    1f70:	bx	lr

00001f74 <o_strcasecmp@@Base>:
    1f74:	orrs	r3, r0, r1
    1f78:	beq	1fc4 <o_strcasecmp@@Base+0x50>
    1f7c:	adds	r3, r0, #0
    1f80:	movne	r3, #1
    1f84:	cmp	r1, #0
    1f88:	movne	r3, #0
    1f8c:	cmp	r3, #0
    1f90:	bne	1fcc <o_strcasecmp@@Base+0x58>
    1f94:	adds	r3, r1, #0
    1f98:	movne	r3, #1
    1f9c:	cmp	r0, #0
    1fa0:	movne	r3, #0
    1fa4:	cmp	r3, #0
    1fa8:	bne	1fd4 <o_strcasecmp@@Base+0x60>
    1fac:	str	r4, [sp, #-8]!
    1fb0:	str	lr, [sp, #4]
    1fb4:	bl	ee0 <strcasecmp@plt>
    1fb8:	ldr	r4, [sp]
    1fbc:	add	sp, sp, #4
    1fc0:	pop	{pc}		; (ldr pc, [sp], #4)
    1fc4:	mov	r0, #0
    1fc8:	bx	lr
    1fcc:	mvn	r0, #0
    1fd0:	bx	lr
    1fd4:	mov	r0, #1
    1fd8:	bx	lr

00001fdc <o_strncasecmp@@Base>:
    1fdc:	orrs	r3, r0, r1
    1fe0:	moveq	r3, #1
    1fe4:	movne	r3, #0
    1fe8:	cmp	r2, #0
    1fec:	moveq	r3, #1
    1ff0:	cmp	r3, #0
    1ff4:	beq	2000 <o_strncasecmp@@Base+0x24>
    1ff8:	mov	r0, #0
    1ffc:	bx	lr
    2000:	adds	r3, r0, #0
    2004:	movne	r3, #1
    2008:	cmp	r1, #0
    200c:	movne	r3, #0
    2010:	cmp	r3, #0
    2014:	bne	2048 <o_strncasecmp@@Base+0x6c>
    2018:	adds	r3, r1, #0
    201c:	movne	r3, #1
    2020:	cmp	r0, #0
    2024:	movne	r3, #0
    2028:	cmp	r3, #0
    202c:	bne	2050 <o_strncasecmp@@Base+0x74>
    2030:	str	r4, [sp, #-8]!
    2034:	str	lr, [sp, #4]
    2038:	bl	f64 <strncasecmp@plt>
    203c:	ldr	r4, [sp]
    2040:	add	sp, sp, #4
    2044:	pop	{pc}		; (ldr pc, [sp], #4)
    2048:	mvn	r0, #0
    204c:	bx	lr
    2050:	mov	r0, #1
    2054:	bx	lr

00002058 <o_strstr@@Base>:
    2058:	cmp	r1, #0
    205c:	cmpne	r0, #0
    2060:	beq	207c <o_strstr@@Base+0x24>
    2064:	str	r4, [sp, #-8]!
    2068:	str	lr, [sp, #4]
    206c:	bl	e44 <strstr@plt>
    2070:	ldr	r4, [sp]
    2074:	add	sp, sp, #4
    2078:	pop	{pc}		; (ldr pc, [sp], #4)
    207c:	mov	r0, #0
    2080:	bx	lr

00002084 <o_strchr@@Base>:
    2084:	cmp	r0, #0
    2088:	bxeq	lr
    208c:	str	r4, [sp, #-8]!
    2090:	str	lr, [sp, #4]
    2094:	bl	f58 <strchr@plt>
    2098:	ldr	r4, [sp]
    209c:	add	sp, sp, #4
    20a0:	pop	{pc}		; (ldr pc, [sp], #4)

000020a4 <o_strrchr@@Base>:
    20a4:	cmp	r0, #0
    20a8:	bxeq	lr
    20ac:	str	r4, [sp, #-8]!
    20b0:	str	lr, [sp, #4]
    20b4:	bl	fc4 <strrchr@plt>
    20b8:	ldr	r4, [sp]
    20bc:	add	sp, sp, #4
    20c0:	pop	{pc}		; (ldr pc, [sp], #4)

000020c4 <o_strnstr@@Base>:
    20c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    20c8:	strd	r6, [sp, #8]
    20cc:	strd	r8, [sp, #16]
    20d0:	str	sl, [sp, #24]
    20d4:	str	lr, [sp, #28]
    20d8:	cmp	r1, #0
    20dc:	cmpne	r0, #0
    20e0:	moveq	r5, #0
    20e4:	beq	215c <o_strnstr@@Base+0x98>
    20e8:	mov	r5, r0
    20ec:	mov	r7, r1
    20f0:	mov	r6, r2
    20f4:	mov	r0, r1
    20f8:	bl	f4c <strlen@plt>
    20fc:	subs	r8, r0, #0
    2100:	beq	215c <o_strnstr@@Base+0x98>
    2104:	subs	r6, r6, r8
    2108:	bmi	2178 <o_strnstr@@Base+0xb4>
    210c:	ldrb	r9, [r7]
    2110:	sub	r4, r5, #1
    2114:	rsb	sl, r5, #1
    2118:	b	2128 <o_strnstr@@Base+0x64>
    211c:	add	r3, sl, r4
    2120:	cmp	r6, r3
    2124:	blt	2158 <o_strnstr@@Base+0x94>
    2128:	add	r4, r4, #1
    212c:	mov	r5, r4
    2130:	ldrb	r3, [r4]
    2134:	cmp	r3, r9
    2138:	bne	211c <o_strnstr@@Base+0x58>
    213c:	mov	r2, r8
    2140:	mov	r1, r7
    2144:	mov	r0, r4
    2148:	bl	ff4 <strncmp@plt>
    214c:	cmp	r0, #0
    2150:	bne	211c <o_strnstr@@Base+0x58>
    2154:	b	215c <o_strnstr@@Base+0x98>
    2158:	mov	r5, #0
    215c:	mov	r0, r5
    2160:	ldrd	r4, [sp]
    2164:	ldrd	r6, [sp, #8]
    2168:	ldrd	r8, [sp, #16]
    216c:	ldr	sl, [sp, #24]
    2170:	add	sp, sp, #28
    2174:	pop	{pc}		; (ldr pc, [sp], #4)
    2178:	mov	r5, #0
    217c:	b	215c <o_strnstr@@Base+0x98>

00002180 <o_strcasestr@@Base>:
    2180:	cmp	r1, #0
    2184:	cmpne	r0, #0
    2188:	beq	21a4 <o_strcasestr@@Base+0x24>
    218c:	str	r4, [sp, #-8]!
    2190:	str	lr, [sp, #4]
    2194:	bl	e68 <strcasestr@plt>
    2198:	ldr	r4, [sp]
    219c:	add	sp, sp, #4
    21a0:	pop	{pc}		; (ldr pc, [sp], #4)
    21a4:	mov	r0, #0
    21a8:	bx	lr

000021ac <o_strlen@@Base>:
    21ac:	cmp	r0, #0
    21b0:	beq	21cc <o_strlen@@Base+0x20>
    21b4:	str	r4, [sp, #-8]!
    21b8:	str	lr, [sp, #4]
    21bc:	bl	f4c <strlen@plt>
    21c0:	ldr	r4, [sp]
    21c4:	add	sp, sp, #4
    21c8:	pop	{pc}		; (ldr pc, [sp], #4)
    21cc:	mov	r0, #0
    21d0:	bx	lr

000021d4 <o_strnchr@@Base>:
    21d4:	cmp	r0, #0
    21d8:	cmpne	r1, #0
    21dc:	beq	2234 <o_strnchr@@Base+0x60>
    21e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
    21e4:	strd	r6, [sp, #8]
    21e8:	str	r8, [sp, #16]
    21ec:	str	lr, [sp, #20]
    21f0:	mov	r5, r0
    21f4:	mov	r7, r1
    21f8:	mov	r6, r2
    21fc:	mov	r4, #0
    2200:	mov	r0, r5
    2204:	bl	f10 <o_strlen@plt>
    2208:	cmp	r0, r4
    220c:	bls	223c <o_strnchr@@Base+0x68>
    2210:	add	r0, r5, r4
    2214:	ldrb	r3, [r5, r4]
    2218:	cmp	r3, r6
    221c:	beq	2240 <o_strnchr@@Base+0x6c>
    2220:	add	r4, r4, #1
    2224:	cmp	r7, r4
    2228:	bhi	2200 <o_strnchr@@Base+0x2c>
    222c:	mov	r0, #0
    2230:	b	2240 <o_strnchr@@Base+0x6c>
    2234:	mov	r0, #0
    2238:	bx	lr
    223c:	mov	r0, #0
    2240:	ldrd	r4, [sp]
    2244:	ldrd	r6, [sp, #8]
    2248:	ldr	r8, [sp, #16]
    224c:	add	sp, sp, #20
    2250:	pop	{pc}		; (ldr pc, [sp], #4)

00002254 <o_strrnchr@@Base>:
    2254:	cmp	r0, #0
    2258:	cmpne	r1, #0
    225c:	beq	22dc <o_strrnchr@@Base+0x88>
    2260:	strd	r4, [sp, #-24]!	; 0xffffffe8
    2264:	strd	r6, [sp, #8]
    2268:	str	r8, [sp, #16]
    226c:	str	lr, [sp, #20]
    2270:	mov	r5, r0
    2274:	mov	r6, r1
    2278:	mov	r7, r2
    227c:	bl	f10 <o_strlen@plt>
    2280:	subs	r4, r0, #1
    2284:	movmi	r0, #0
    2288:	bmi	22c8 <o_strrnchr@@Base+0x74>
    228c:	mov	r0, r5
    2290:	bl	f10 <o_strlen@plt>
    2294:	sub	r0, r0, #1
    2298:	sub	r0, r0, r4
    229c:	cmp	r0, r6
    22a0:	bcs	22c4 <o_strrnchr@@Base+0x70>
    22a4:	add	r0, r5, r4
    22a8:	ldrb	r3, [r5, r4]
    22ac:	cmp	r3, r7
    22b0:	beq	22c8 <o_strrnchr@@Base+0x74>
    22b4:	subs	r4, r4, #1
    22b8:	bpl	228c <o_strrnchr@@Base+0x38>
    22bc:	mov	r0, #0
    22c0:	b	22c8 <o_strrnchr@@Base+0x74>
    22c4:	mov	r0, #0
    22c8:	ldrd	r4, [sp]
    22cc:	ldrd	r6, [sp, #8]
    22d0:	ldr	r8, [sp, #16]
    22d4:	add	sp, sp, #20
    22d8:	pop	{pc}		; (ldr pc, [sp], #4)
    22dc:	mov	r0, #0
    22e0:	bx	lr

000022e4 <split_string@@Base>:
    22e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
    22e8:	strd	r6, [sp, #8]
    22ec:	strd	r8, [sp, #16]
    22f0:	strd	sl, [sp, #24]
    22f4:	str	lr, [sp, #32]
    22f8:	sub	sp, sp, #12
    22fc:	str	r1, [sp, #4]
    2300:	cmp	r0, #0
    2304:	cmpne	r1, #0
    2308:	moveq	r4, #0
    230c:	beq	2404 <split_string@@Base+0x120>
    2310:	mov	r5, r2
    2314:	mov	r6, r0
    2318:	cmp	r5, #0
    231c:	beq	242c <split_string@@Base+0x148>
    2320:	mov	r3, #0
    2324:	str	r3, [r5]
    2328:	bl	e44 <strstr@plt>
    232c:	subs	r8, r0, #0
    2330:	beq	2424 <split_string@@Base+0x140>
    2334:	mov	r4, #1
    2338:	mov	fp, #0
    233c:	b	2368 <split_string@@Base+0x84>
    2340:	add	r4, r4, #1
    2344:	ldr	r7, [sp, #4]
    2348:	mov	r0, r7
    234c:	bl	f4c <strlen@plt>
    2350:	add	r6, r8, r0
    2354:	mov	r1, r7
    2358:	mov	r0, r6
    235c:	bl	e44 <strstr@plt>
    2360:	subs	r8, r0, #0
    2364:	beq	23b8 <split_string@@Base+0xd4>
    2368:	cmp	r5, #0
    236c:	beq	2340 <split_string@@Base+0x5c>
    2370:	add	r7, r4, #1
    2374:	lsl	r7, r7, #2
    2378:	mov	r1, r7
    237c:	ldr	r0, [r5]
    2380:	bl	f28 <o_realloc@plt>
    2384:	mov	r9, r0
    2388:	str	r0, [r5]
    238c:	cmp	r0, #0
    2390:	beq	2340 <split_string@@Base+0x5c>
    2394:	sub	sl, r7, #8
    2398:	sub	r1, r8, r6
    239c:	mov	r0, r6
    23a0:	bl	e8c <o_strndup@plt>
    23a4:	str	r0, [r9, sl]
    23a8:	ldr	r3, [r5]
    23ac:	add	r7, r3, r7
    23b0:	str	fp, [r7, #-4]
    23b4:	b	2340 <split_string@@Base+0x5c>
    23b8:	cmp	r5, #0
    23bc:	beq	2404 <split_string@@Base+0x120>
    23c0:	add	r7, r4, #1
    23c4:	lsl	r7, r7, #2
    23c8:	mov	r1, r7
    23cc:	ldr	r0, [r5]
    23d0:	bl	f28 <o_realloc@plt>
    23d4:	mov	r8, r0
    23d8:	str	r0, [r5]
    23dc:	cmp	r0, #0
    23e0:	beq	2404 <split_string@@Base+0x120>
    23e4:	sub	r9, r7, #8
    23e8:	mov	r0, r6
    23ec:	bl	ec8 <o_strdup@plt>
    23f0:	str	r0, [r8, r9]
    23f4:	ldr	r3, [r5]
    23f8:	add	r7, r3, r7
    23fc:	mov	r3, #0
    2400:	str	r3, [r7, #-4]
    2404:	mov	r0, r4
    2408:	add	sp, sp, #12
    240c:	ldrd	r4, [sp]
    2410:	ldrd	r6, [sp, #8]
    2414:	ldrd	r8, [sp, #16]
    2418:	ldrd	sl, [sp, #24]
    241c:	add	sp, sp, #32
    2420:	pop	{pc}		; (ldr pc, [sp], #4)
    2424:	mov	r4, #1
    2428:	b	23c0 <split_string@@Base+0xdc>
    242c:	ldr	r1, [sp, #4]
    2430:	bl	e44 <strstr@plt>
    2434:	subs	r8, r0, #0
    2438:	bne	2334 <split_string@@Base+0x50>
    243c:	mov	r4, #1
    2440:	b	2404 <split_string@@Base+0x120>

00002444 <free_string_array@@Base>:
    2444:	strd	r4, [sp, #-16]!
    2448:	str	r6, [sp, #8]
    244c:	str	lr, [sp, #12]
    2450:	subs	r6, r0, #0
    2454:	beq	2488 <free_string_array@@Base+0x44>
    2458:	ldr	r0, [r6]
    245c:	cmp	r0, #0
    2460:	beq	2480 <free_string_array@@Base+0x3c>
    2464:	mov	r4, r6
    2468:	mov	r5, #0
    246c:	bl	ea4 <o_free@plt>
    2470:	str	r5, [r4]
    2474:	ldr	r0, [r4, #4]!
    2478:	cmp	r0, #0
    247c:	bne	246c <free_string_array@@Base+0x28>
    2480:	mov	r0, r6
    2484:	bl	ea4 <o_free@plt>
    2488:	ldrd	r4, [sp]
    248c:	ldr	r6, [sp, #8]
    2490:	add	sp, sp, #12
    2494:	pop	{pc}		; (ldr pc, [sp], #4)

00002498 <string_array_size@@Base>:
    2498:	subs	r3, r0, #0
    249c:	beq	24c4 <string_array_size@@Base+0x2c>
    24a0:	ldr	r2, [r3]
    24a4:	cmp	r2, #0
    24a8:	beq	24cc <string_array_size@@Base+0x34>
    24ac:	mov	r0, #0
    24b0:	add	r0, r0, #1
    24b4:	ldr	r2, [r3, #4]!
    24b8:	cmp	r2, #0
    24bc:	bne	24b0 <string_array_size@@Base+0x18>
    24c0:	bx	lr
    24c4:	mov	r0, #0
    24c8:	bx	lr
    24cc:	mov	r0, #0
    24d0:	bx	lr

000024d4 <string_array_join@@Base>:
    24d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
    24d8:	strd	r6, [sp, #8]
    24dc:	str	r8, [sp, #16]
    24e0:	str	lr, [sp, #20]
    24e4:	cmp	r0, #0
    24e8:	cmpne	r1, #0
    24ec:	moveq	r4, #0
    24f0:	beq	2560 <string_array_join@@Base+0x8c>
    24f4:	mov	r5, r0
    24f8:	mov	r7, r1
    24fc:	ldr	r3, [r0]
    2500:	cmp	r3, #0
    2504:	beq	255c <string_array_join@@Base+0x88>
    2508:	mov	r4, #0
    250c:	ldr	r8, [pc, #100]	; 2578 <string_array_join@@Base+0xa4>
    2510:	add	r8, pc, r8
    2514:	b	2530 <string_array_join@@Base+0x5c>
    2518:	mov	r0, r3
    251c:	bl	ec8 <o_strdup@plt>
    2520:	mov	r4, r0
    2524:	ldr	r3, [r5, #4]!
    2528:	cmp	r3, #0
    252c:	beq	2560 <string_array_join@@Base+0x8c>
    2530:	cmp	r4, #0
    2534:	beq	2518 <string_array_join@@Base+0x44>
    2538:	mov	r2, r7
    253c:	mov	r1, r4
    2540:	mov	r0, r8
    2544:	bl	fac <msprintf@plt>
    2548:	mov	r6, r0
    254c:	mov	r0, r4
    2550:	bl	ea4 <o_free@plt>
    2554:	mov	r4, r6
    2558:	b	2524 <string_array_join@@Base+0x50>
    255c:	mov	r4, r3
    2560:	mov	r0, r4
    2564:	ldrd	r4, [sp]
    2568:	ldrd	r6, [sp, #8]
    256c:	ldr	r8, [sp, #16]
    2570:	add	sp, sp, #20
    2574:	pop	{pc}		; (ldr pc, [sp], #4)
    2578:	strdeq	r0, [r0], -r4

0000257c <trimwhitespace@@Base>:
    257c:	strd	r4, [sp, #-16]!
    2580:	str	r6, [sp, #8]
    2584:	str	lr, [sp, #12]
    2588:	subs	r5, r0, #0
    258c:	beq	2630 <trimwhitespace@@Base+0xb4>
    2590:	ldrb	r3, [r5]
    2594:	cmp	r3, #0
    2598:	beq	2630 <trimwhitespace@@Base+0xb4>
    259c:	bl	f40 <__ctype_b_loc@plt>
    25a0:	mov	r6, r0
    25a4:	ldr	r1, [r0]
    25a8:	mov	r4, r5
    25ac:	b	25b4 <trimwhitespace@@Base+0x38>
    25b0:	mov	r4, r2
    25b4:	mov	r5, r4
    25b8:	mov	r2, r4
    25bc:	ldrb	r3, [r2], #1
    25c0:	lsl	r3, r3, #1
    25c4:	ldrh	r3, [r1, r3]
    25c8:	tst	r3, #8192	; 0x2000
    25cc:	bne	25b0 <trimwhitespace@@Base+0x34>
    25d0:	mov	r0, r4
    25d4:	bl	f10 <o_strlen@plt>
    25d8:	sub	r0, r0, #1
    25dc:	add	r1, r4, r0
    25e0:	cmp	r4, r1
    25e4:	bcs	2628 <trimwhitespace@@Base+0xac>
    25e8:	ldr	ip, [r6]
    25ec:	ldrb	r3, [r4, r0]
    25f0:	lsl	r3, r3, #1
    25f4:	ldrh	r3, [ip, r3]
    25f8:	tst	r3, #8192	; 0x2000
    25fc:	beq	2628 <trimwhitespace@@Base+0xac>
    2600:	sub	r3, r1, #1
    2604:	mov	r1, r3
    2608:	cmp	r3, r4
    260c:	beq	2628 <trimwhitespace@@Base+0xac>
    2610:	sub	r3, r3, #1
    2614:	ldrb	r2, [r1]
    2618:	lsl	r2, r2, #1
    261c:	ldrh	r2, [ip, r2]
    2620:	tst	r2, #8192	; 0x2000
    2624:	bne	2604 <trimwhitespace@@Base+0x88>
    2628:	mov	r3, #0
    262c:	strb	r3, [r1, #1]
    2630:	mov	r0, r5
    2634:	ldrd	r4, [sp]
    2638:	ldr	r6, [sp, #8]
    263c:	add	sp, sp, #12
    2640:	pop	{pc}		; (ldr pc, [sp], #4)

00002644 <trimcharacter@@Base>:
    2644:	strd	r4, [sp, #-16]!
    2648:	str	r6, [sp, #8]
    264c:	str	lr, [sp, #12]
    2650:	subs	r4, r0, #0
    2654:	beq	26e4 <trimcharacter@@Base+0xa0>
    2658:	mov	r5, r1
    265c:	ldrb	r3, [r4]
    2660:	cmp	r3, #0
    2664:	moveq	r0, r4
    2668:	beq	26d4 <trimcharacter@@Base+0x90>
    266c:	cmp	r3, r1
    2670:	bne	2680 <trimcharacter@@Base+0x3c>
    2674:	ldrb	r3, [r4, #1]!
    2678:	cmp	r3, r5
    267c:	beq	2674 <trimcharacter@@Base+0x30>
    2680:	mov	r0, r4
    2684:	bl	f10 <o_strlen@plt>
    2688:	sub	r0, r0, #1
    268c:	add	r2, r4, r0
    2690:	cmp	r2, r4
    2694:	bls	26c8 <trimcharacter@@Base+0x84>
    2698:	ldrb	r3, [r4, r0]
    269c:	cmp	r3, r5
    26a0:	bne	26c8 <trimcharacter@@Base+0x84>
    26a4:	sub	r3, r2, #1
    26a8:	mov	r0, r4
    26ac:	mov	r2, r3
    26b0:	cmp	r3, r0
    26b4:	beq	26c8 <trimcharacter@@Base+0x84>
    26b8:	sub	r3, r3, #1
    26bc:	ldrb	r1, [r2]
    26c0:	cmp	r1, r5
    26c4:	beq	26ac <trimcharacter@@Base+0x68>
    26c8:	mov	r3, #0
    26cc:	strb	r3, [r2, #1]
    26d0:	mov	r0, r4
    26d4:	ldrd	r4, [sp]
    26d8:	ldr	r6, [sp, #8]
    26dc:	add	sp, sp, #12
    26e0:	pop	{pc}		; (ldr pc, [sp], #4)
    26e4:	mov	r0, r4
    26e8:	b	26d4 <trimcharacter@@Base+0x90>

000026ec <string_array_has_value@@Base>:
    26ec:	cmp	r0, #0
    26f0:	cmpne	r1, #0
    26f4:	beq	2738 <string_array_has_value@@Base+0x4c>
    26f8:	strd	r4, [sp, #-16]!
    26fc:	str	r6, [sp, #8]
    2700:	str	lr, [sp, #12]
    2704:	mov	r4, r0
    2708:	mov	r5, r1
    270c:	ldr	r0, [r0]
    2710:	cmp	r0, #0
    2714:	beq	2740 <string_array_has_value@@Base+0x54>
    2718:	mov	r1, r5
    271c:	bl	eec <o_strcmp@plt>
    2720:	cmp	r0, #0
    2724:	beq	2748 <string_array_has_value@@Base+0x5c>
    2728:	ldr	r0, [r4, #4]!
    272c:	cmp	r0, #0
    2730:	bne	2718 <string_array_has_value@@Base+0x2c>
    2734:	b	274c <string_array_has_value@@Base+0x60>
    2738:	mov	r0, #0
    273c:	bx	lr
    2740:	mov	r0, #0
    2744:	b	274c <string_array_has_value@@Base+0x60>
    2748:	mov	r0, #1
    274c:	ldrd	r4, [sp]
    2750:	ldr	r6, [sp, #8]
    2754:	add	sp, sp, #12
    2758:	pop	{pc}		; (ldr pc, [sp], #4)

0000275c <string_array_has_value_case@@Base>:
    275c:	cmp	r0, #0
    2760:	cmpne	r1, #0
    2764:	beq	27a8 <string_array_has_value_case@@Base+0x4c>
    2768:	strd	r4, [sp, #-16]!
    276c:	str	r6, [sp, #8]
    2770:	str	lr, [sp, #12]
    2774:	mov	r4, r0
    2778:	mov	r5, r1
    277c:	ldr	r0, [r0]
    2780:	cmp	r0, #0
    2784:	beq	27b0 <string_array_has_value_case@@Base+0x54>
    2788:	mov	r1, r5
    278c:	bl	f1c <o_strcasecmp@plt>
    2790:	cmp	r0, #0
    2794:	beq	27b8 <string_array_has_value_case@@Base+0x5c>
    2798:	ldr	r0, [r4, #4]!
    279c:	cmp	r0, #0
    27a0:	bne	2788 <string_array_has_value_case@@Base+0x2c>
    27a4:	b	27bc <string_array_has_value_case@@Base+0x60>
    27a8:	mov	r0, #0
    27ac:	bx	lr
    27b0:	mov	r0, #0
    27b4:	b	27bc <string_array_has_value_case@@Base+0x60>
    27b8:	mov	r0, #1
    27bc:	ldrd	r4, [sp]
    27c0:	ldr	r6, [sp, #8]
    27c4:	add	sp, sp, #12
    27c8:	pop	{pc}		; (ldr pc, [sp], #4)

000027cc <string_array_has_value_n@@Base>:
    27cc:	cmp	r0, #0
    27d0:	cmpne	r1, #0
    27d4:	beq	2820 <string_array_has_value_n@@Base+0x54>
    27d8:	strd	r4, [sp, #-16]!
    27dc:	str	r6, [sp, #8]
    27e0:	str	lr, [sp, #12]
    27e4:	mov	r4, r0
    27e8:	mov	r6, r1
    27ec:	ldr	r0, [r0]
    27f0:	cmp	r0, #0
    27f4:	beq	2828 <string_array_has_value_n@@Base+0x5c>
    27f8:	mov	r5, r2
    27fc:	mov	r2, r5
    2800:	mov	r1, r6
    2804:	bl	fe8 <o_strncmp@plt>
    2808:	cmp	r0, #0
    280c:	beq	2830 <string_array_has_value_n@@Base+0x64>
    2810:	ldr	r0, [r4, #4]!
    2814:	cmp	r0, #0
    2818:	bne	27fc <string_array_has_value_n@@Base+0x30>
    281c:	b	2834 <string_array_has_value_n@@Base+0x68>
    2820:	mov	r0, #0
    2824:	bx	lr
    2828:	mov	r0, #0
    282c:	b	2834 <string_array_has_value_n@@Base+0x68>
    2830:	mov	r0, #1
    2834:	ldrd	r4, [sp]
    2838:	ldr	r6, [sp, #8]
    283c:	add	sp, sp, #12
    2840:	pop	{pc}		; (ldr pc, [sp], #4)

00002844 <string_array_has_value_ncase@@Base>:
    2844:	cmp	r0, #0
    2848:	cmpne	r1, #0
    284c:	beq	2898 <string_array_has_value_ncase@@Base+0x54>
    2850:	strd	r4, [sp, #-16]!
    2854:	str	r6, [sp, #8]
    2858:	str	lr, [sp, #12]
    285c:	mov	r4, r0
    2860:	mov	r6, r1
    2864:	ldr	r0, [r0]
    2868:	cmp	r0, #0
    286c:	beq	28a0 <string_array_has_value_ncase@@Base+0x5c>
    2870:	mov	r5, r2
    2874:	mov	r2, r5
    2878:	mov	r1, r6
    287c:	bl	e5c <o_strncasecmp@plt>
    2880:	cmp	r0, #0
    2884:	beq	28a8 <string_array_has_value_ncase@@Base+0x64>
    2888:	ldr	r0, [r4, #4]!
    288c:	cmp	r0, #0
    2890:	bne	2874 <string_array_has_value_ncase@@Base+0x30>
    2894:	b	28ac <string_array_has_value_ncase@@Base+0x68>
    2898:	mov	r0, #0
    289c:	bx	lr
    28a0:	mov	r0, #0
    28a4:	b	28ac <string_array_has_value_ncase@@Base+0x68>
    28a8:	mov	r0, #1
    28ac:	ldrd	r4, [sp]
    28b0:	ldr	r6, [sp, #8]
    28b4:	add	sp, sp, #12
    28b8:	pop	{pc}		; (ldr pc, [sp], #4)

000028bc <string_array_has_trimmed_value@@Base>:
    28bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
    28c0:	strd	r6, [sp, #8]
    28c4:	str	r8, [sp, #16]
    28c8:	str	lr, [sp, #20]
    28cc:	cmp	r0, #0
    28d0:	cmpne	r1, #0
    28d4:	moveq	r4, #0
    28d8:	bne	28f4 <string_array_has_trimmed_value@@Base+0x38>
    28dc:	mov	r0, r4
    28e0:	ldrd	r4, [sp]
    28e4:	ldrd	r6, [sp, #8]
    28e8:	ldr	r8, [sp, #16]
    28ec:	add	sp, sp, #20
    28f0:	pop	{pc}		; (ldr pc, [sp], #4)
    28f4:	mov	r4, r0
    28f8:	mov	r0, r1
    28fc:	bl	ec8 <o_strdup@plt>
    2900:	subs	r7, r0, #0
    2904:	moveq	r4, #0
    2908:	beq	2970 <string_array_has_trimmed_value@@Base+0xb4>
    290c:	mov	r0, r7
    2910:	bl	ef8 <trimwhitespace@plt>
    2914:	mov	r6, r0
    2918:	ldr	r0, [r4]
    291c:	cmp	r0, #0
    2920:	bne	2940 <string_array_has_trimmed_value@@Base+0x84>
    2924:	mov	r4, #0
    2928:	b	2970 <string_array_has_trimmed_value@@Base+0xb4>
    292c:	mov	r0, r5
    2930:	bl	ea4 <o_free@plt>
    2934:	ldr	r0, [r4, #4]!
    2938:	cmp	r0, #0
    293c:	beq	297c <string_array_has_trimmed_value@@Base+0xc0>
    2940:	bl	ec8 <o_strdup@plt>
    2944:	subs	r5, r0, #0
    2948:	beq	2984 <string_array_has_trimmed_value@@Base+0xc8>
    294c:	mov	r0, r5
    2950:	bl	ef8 <trimwhitespace@plt>
    2954:	mov	r1, r6
    2958:	bl	eec <o_strcmp@plt>
    295c:	cmp	r0, #0
    2960:	bne	292c <string_array_has_trimmed_value@@Base+0x70>
    2964:	mov	r0, r5
    2968:	bl	ea4 <o_free@plt>
    296c:	mov	r4, #1
    2970:	mov	r0, r7
    2974:	bl	ea4 <o_free@plt>
    2978:	b	28dc <string_array_has_trimmed_value@@Base+0x20>
    297c:	mov	r4, #0
    2980:	b	2970 <string_array_has_trimmed_value@@Base+0xb4>
    2984:	mov	r4, #0
    2988:	b	2970 <string_array_has_trimmed_value@@Base+0xb4>

0000298c <pointer_list_init@@Base>:
    298c:	cmp	r0, #0
    2990:	beq	29a0 <pointer_list_init@@Base+0x14>
    2994:	mov	r3, #0
    2998:	str	r3, [r0]
    299c:	str	r3, [r0, #4]
    29a0:	bx	lr

000029a4 <pointer_list_size@@Base>:
    29a4:	cmp	r0, #0
    29a8:	ldrne	r0, [r0]
    29ac:	moveq	r0, #0
    29b0:	bx	lr

000029b4 <pointer_list_append@@Base>:
    29b4:	strd	r4, [sp, #-16]!
    29b8:	str	r6, [sp, #8]
    29bc:	str	lr, [sp, #12]
    29c0:	subs	r4, r0, #0
    29c4:	moveq	r0, #0
    29c8:	beq	2a08 <pointer_list_append@@Base+0x54>
    29cc:	mov	r5, r1
    29d0:	ldr	r1, [r4]
    29d4:	add	r1, r1, #1
    29d8:	lsl	r1, r1, #2
    29dc:	ldr	r0, [r4, #4]
    29e0:	bl	f28 <o_realloc@plt>
    29e4:	str	r0, [r4, #4]
    29e8:	cmp	r0, #0
    29ec:	beq	2a18 <pointer_list_append@@Base+0x64>
    29f0:	ldr	r3, [r4]
    29f4:	str	r5, [r0, r3, lsl #2]
    29f8:	ldr	r3, [r4]
    29fc:	add	r3, r3, #1
    2a00:	str	r3, [r4]
    2a04:	mov	r0, #1
    2a08:	ldrd	r4, [sp]
    2a0c:	ldr	r6, [sp, #8]
    2a10:	add	sp, sp, #12
    2a14:	pop	{pc}		; (ldr pc, [sp], #4)
    2a18:	mov	r0, #0
    2a1c:	bl	ea4 <o_free@plt>
    2a20:	mov	r0, #0
    2a24:	str	r0, [r4, #4]
    2a28:	b	2a08 <pointer_list_append@@Base+0x54>

00002a2c <pointer_list_get_at@@Base>:
    2a2c:	cmp	r0, #0
    2a30:	beq	2a50 <pointer_list_get_at@@Base+0x24>
    2a34:	ldr	r3, [r0]
    2a38:	cmp	r3, r1
    2a3c:	bls	2a4c <pointer_list_get_at@@Base+0x20>
    2a40:	ldr	r3, [r0, #4]
    2a44:	ldr	r0, [r3, r1, lsl #2]
    2a48:	bx	lr
    2a4c:	mov	r0, #0
    2a50:	bx	lr

00002a54 <pointer_list_remove_at@@Base>:
    2a54:	str	r4, [sp, #-8]!
    2a58:	str	lr, [sp, #4]
    2a5c:	subs	r4, r0, #0
    2a60:	moveq	r0, #0
    2a64:	beq	2adc <pointer_list_remove_at@@Base+0x88>
    2a68:	ldr	r3, [r4]
    2a6c:	cmp	r3, r1
    2a70:	movls	r0, #0
    2a74:	bls	2adc <pointer_list_remove_at@@Base+0x88>
    2a78:	sub	r2, r3, #1
    2a7c:	cmp	r1, r2
    2a80:	bcs	2ab0 <pointer_list_remove_at@@Base+0x5c>
    2a84:	add	r2, r1, #1
    2a88:	lsl	r2, r2, #2
    2a8c:	add	r1, r1, #1
    2a90:	ldr	r3, [r4, #4]
    2a94:	ldr	r0, [r3, r2]!
    2a98:	str	r0, [r3, #-4]
    2a9c:	ldr	r3, [r4]
    2aa0:	add	r2, r2, #4
    2aa4:	sub	r0, r3, #1
    2aa8:	cmp	r1, r0
    2aac:	bcc	2a8c <pointer_list_remove_at@@Base+0x38>
    2ab0:	cmp	r3, #1
    2ab4:	bls	2ae8 <pointer_list_remove_at@@Base+0x94>
    2ab8:	sub	r1, r3, #-1073741823	; 0xc0000001
    2abc:	lsl	r1, r1, #2
    2ac0:	ldr	r0, [r4, #4]
    2ac4:	bl	f28 <o_realloc@plt>
    2ac8:	str	r0, [r4, #4]
    2acc:	ldr	r3, [r4]
    2ad0:	sub	r3, r3, #1
    2ad4:	str	r3, [r4]
    2ad8:	mov	r0, #1
    2adc:	ldr	r4, [sp]
    2ae0:	add	sp, sp, #4
    2ae4:	pop	{pc}		; (ldr pc, [sp], #4)
    2ae8:	ldr	r0, [r4, #4]
    2aec:	bl	ea4 <o_free@plt>
    2af0:	mov	r3, #0
    2af4:	str	r3, [r4, #4]
    2af8:	b	2acc <pointer_list_remove_at@@Base+0x78>

00002afc <pointer_list_clean@@Base>:
    2afc:	strd	r4, [sp, #-16]!
    2b00:	str	r6, [sp, #8]
    2b04:	str	lr, [sp, #12]
    2b08:	subs	r5, r0, #0
    2b0c:	beq	2b38 <pointer_list_clean@@Base+0x3c>
    2b10:	mov	r0, r5
    2b14:	bl	fa0 <pointer_list_size@plt>
    2b18:	subs	r4, r0, #0
    2b1c:	beq	2b38 <pointer_list_clean@@Base+0x3c>
    2b20:	sub	r4, r4, #1
    2b24:	mov	r1, r4
    2b28:	mov	r0, r5
    2b2c:	bl	eb0 <pointer_list_remove_at@plt>
    2b30:	cmp	r4, #0
    2b34:	bne	2b20 <pointer_list_clean@@Base+0x24>
    2b38:	ldrd	r4, [sp]
    2b3c:	ldr	r6, [sp, #8]
    2b40:	add	sp, sp, #12
    2b44:	pop	{pc}		; (ldr pc, [sp], #4)

00002b48 <pointer_list_clean_free@@Base>:
    2b48:	strd	r4, [sp, #-16]!
    2b4c:	str	r6, [sp, #8]
    2b50:	str	lr, [sp, #12]
    2b54:	subs	r5, r0, #0
    2b58:	beq	2b98 <pointer_list_clean_free@@Base+0x50>
    2b5c:	mov	r6, r1
    2b60:	mov	r0, r5
    2b64:	bl	fa0 <pointer_list_size@plt>
    2b68:	subs	r4, r0, #0
    2b6c:	beq	2b98 <pointer_list_clean_free@@Base+0x50>
    2b70:	sub	r4, r4, #1
    2b74:	mov	r1, r4
    2b78:	mov	r0, r5
    2b7c:	bl	e50 <pointer_list_get_at@plt>
    2b80:	blx	r6
    2b84:	mov	r1, r4
    2b88:	mov	r0, r5
    2b8c:	bl	eb0 <pointer_list_remove_at@plt>
    2b90:	cmp	r4, #0
    2b94:	bne	2b70 <pointer_list_clean_free@@Base+0x28>
    2b98:	ldrd	r4, [sp]
    2b9c:	ldr	r6, [sp, #8]
    2ba0:	add	sp, sp, #12
    2ba4:	pop	{pc}		; (ldr pc, [sp], #4)

00002ba8 <pointer_list_remove_at_free@@Base>:
    2ba8:	strd	r4, [sp, #-16]!
    2bac:	str	r6, [sp, #8]
    2bb0:	str	lr, [sp, #12]
    2bb4:	subs	r4, r0, #0
    2bb8:	moveq	r0, #0
    2bbc:	beq	2bd0 <pointer_list_remove_at_free@@Base+0x28>
    2bc0:	ldr	r3, [r4]
    2bc4:	cmp	r3, r1
    2bc8:	movls	r0, #0
    2bcc:	bhi	2be0 <pointer_list_remove_at_free@@Base+0x38>
    2bd0:	ldrd	r4, [sp]
    2bd4:	ldr	r6, [sp, #8]
    2bd8:	add	sp, sp, #12
    2bdc:	pop	{pc}		; (ldr pc, [sp], #4)
    2be0:	mov	r6, r2
    2be4:	mov	r5, r1
    2be8:	mov	r0, r4
    2bec:	bl	e50 <pointer_list_get_at@plt>
    2bf0:	blx	r6
    2bf4:	mov	r1, r5
    2bf8:	mov	r0, r4
    2bfc:	bl	eb0 <pointer_list_remove_at@plt>
    2c00:	b	2bd0 <pointer_list_remove_at_free@@Base+0x28>

00002c04 <pointer_list_insert_at@@Base>:
    2c04:	strd	r4, [sp, #-16]!
    2c08:	str	r6, [sp, #8]
    2c0c:	str	lr, [sp, #12]
    2c10:	subs	r4, r0, #0
    2c14:	moveq	r0, #0
    2c18:	beq	2c2c <pointer_list_insert_at@@Base+0x28>
    2c1c:	ldr	r3, [r4]
    2c20:	cmp	r3, r2
    2c24:	movcc	r0, #0
    2c28:	bcs	2c3c <pointer_list_insert_at@@Base+0x38>
    2c2c:	ldrd	r4, [sp]
    2c30:	ldr	r6, [sp, #8]
    2c34:	add	sp, sp, #12
    2c38:	pop	{pc}		; (ldr pc, [sp], #4)
    2c3c:	mov	r5, r2
    2c40:	mov	r6, r1
    2c44:	add	r1, r3, #1
    2c48:	lsl	r1, r1, #2
    2c4c:	ldr	r0, [r4, #4]
    2c50:	bl	f28 <o_realloc@plt>
    2c54:	str	r0, [r4, #4]
    2c58:	cmp	r0, #0
    2c5c:	moveq	r0, #0
    2c60:	beq	2c2c <pointer_list_insert_at@@Base+0x28>
    2c64:	ldr	r3, [r4]
    2c68:	cmp	r5, r3
    2c6c:	bcs	2c94 <pointer_list_insert_at@@Base+0x90>
    2c70:	sub	ip, r3, #-1073741823	; 0xc0000001
    2c74:	lsl	ip, ip, #2
    2c78:	ldr	r0, [r4, #4]
    2c7c:	ldr	r2, [r0, ip]
    2c80:	str	r2, [r0, r3, lsl #2]
    2c84:	sub	r3, r3, #1
    2c88:	sub	ip, ip, #4
    2c8c:	cmp	r5, r3
    2c90:	bne	2c78 <pointer_list_insert_at@@Base+0x74>
    2c94:	ldr	r3, [r4, #4]
    2c98:	str	r6, [r3, r5, lsl #2]
    2c9c:	ldr	r3, [r4]
    2ca0:	add	r3, r3, #1
    2ca4:	str	r3, [r4]
    2ca8:	mov	r0, #1
    2cac:	b	2c2c <pointer_list_insert_at@@Base+0x28>

00002cb0 <pointer_list_remove_pointer@@Base>:
    2cb0:	cmp	r0, #0
    2cb4:	beq	2d1c <pointer_list_remove_pointer@@Base+0x6c>
    2cb8:	str	r4, [sp, #-8]!
    2cbc:	str	lr, [sp, #4]
    2cc0:	ldr	lr, [r0]
    2cc4:	cmp	lr, #0
    2cc8:	beq	2d24 <pointer_list_remove_pointer@@Base+0x74>
    2ccc:	ldr	r2, [r0, #4]
    2cd0:	ldr	r3, [r2]
    2cd4:	cmp	r1, r3
    2cd8:	movne	r3, #0
    2cdc:	beq	2d0c <pointer_list_remove_pointer@@Base+0x5c>
    2ce0:	add	r3, r3, #1
    2ce4:	cmp	r3, lr
    2ce8:	beq	2d14 <pointer_list_remove_pointer@@Base+0x64>
    2cec:	ldr	ip, [r2, #4]!
    2cf0:	cmp	ip, r1
    2cf4:	bne	2ce0 <pointer_list_remove_pointer@@Base+0x30>
    2cf8:	mov	r1, r3
    2cfc:	bl	eb0 <pointer_list_remove_at@plt>
    2d00:	ldr	r4, [sp]
    2d04:	add	sp, sp, #4
    2d08:	pop	{pc}		; (ldr pc, [sp], #4)
    2d0c:	mov	r3, #0
    2d10:	b	2cf8 <pointer_list_remove_pointer@@Base+0x48>
    2d14:	mov	r0, #0
    2d18:	b	2d00 <pointer_list_remove_pointer@@Base+0x50>
    2d1c:	mov	r0, #0
    2d20:	bx	lr
    2d24:	mov	r0, #0
    2d28:	b	2d00 <pointer_list_remove_pointer@@Base+0x50>

00002d2c <pointer_list_remove_pointer_free@@Base>:
    2d2c:	strd	r4, [sp, #-16]!
    2d30:	str	r6, [sp, #8]
    2d34:	str	lr, [sp, #12]
    2d38:	subs	r5, r0, #0
    2d3c:	moveq	r0, #0
    2d40:	beq	2d90 <pointer_list_remove_pointer_free@@Base+0x64>
    2d44:	ldr	lr, [r5]
    2d48:	cmp	lr, #0
    2d4c:	beq	2db0 <pointer_list_remove_pointer_free@@Base+0x84>
    2d50:	ldr	r3, [r5, #4]
    2d54:	ldr	ip, [r3]
    2d58:	cmp	r1, ip
    2d5c:	movne	r4, #0
    2d60:	beq	2da0 <pointer_list_remove_pointer_free@@Base+0x74>
    2d64:	add	r4, r4, #1
    2d68:	cmp	r4, lr
    2d6c:	beq	2da8 <pointer_list_remove_pointer_free@@Base+0x7c>
    2d70:	ldr	ip, [r3, #4]!
    2d74:	cmp	ip, r1
    2d78:	bne	2d64 <pointer_list_remove_pointer_free@@Base+0x38>
    2d7c:	mov	r0, r1
    2d80:	blx	r2
    2d84:	mov	r1, r4
    2d88:	mov	r0, r5
    2d8c:	bl	eb0 <pointer_list_remove_at@plt>
    2d90:	ldrd	r4, [sp]
    2d94:	ldr	r6, [sp, #8]
    2d98:	add	sp, sp, #12
    2d9c:	pop	{pc}		; (ldr pc, [sp], #4)
    2da0:	mov	r4, #0
    2da4:	b	2d7c <pointer_list_remove_pointer_free@@Base+0x50>
    2da8:	mov	r0, #0
    2dac:	b	2d90 <pointer_list_remove_pointer_free@@Base+0x64>
    2db0:	mov	r0, #0
    2db4:	b	2d90 <pointer_list_remove_pointer_free@@Base+0x64>

Disassembly of section .fini:

00002db8 <.fini>:
    2db8:	push	{r3, lr}
    2dbc:	pop	{r3, pc}
