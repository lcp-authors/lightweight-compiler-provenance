
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010da8 <.init>:
   10da8:	push	{r3, lr}
   10dac:	bl	1105c <__assert_fail@plt+0x48>
   10db0:	pop	{r3, pc}

Disassembly of section .plt:

00010db4 <calloc@plt-0x14>:
   10db4:	push	{lr}		; (str lr, [sp, #-4]!)
   10db8:	ldr	lr, [pc, #4]	; 10dc4 <calloc@plt-0x4>
   10dbc:	add	lr, pc, lr
   10dc0:	ldr	pc, [lr, #8]!
   10dc4:	andeq	r6, r1, ip, lsr r2

00010dc8 <calloc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #572]!	; 0x23c

00010dd4 <fputs_unlocked@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #564]!	; 0x234

00010de0 <raise@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #556]!	; 0x22c

00010dec <strcmp@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #548]!	; 0x224

00010df8 <posix_fadvise64@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #540]!	; 0x21c

00010e04 <fflush@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #532]!	; 0x214

00010e10 <free@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #524]!	; 0x20c

00010e1c <_exit@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #516]!	; 0x204

00010e28 <memcpy@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #508]!	; 0x1fc

00010e34 <mbsinit@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e40 <fwrite_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #492]!	; 0x1ec

00010e4c <dcgettext@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #484]!	; 0x1e4

00010e58 <realloc@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #476]!	; 0x1dc

00010e64 <textdomain@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e70 <iswprint@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #460]!	; 0x1cc

00010e7c <fwrite@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #452]!	; 0x1c4

00010e88 <lseek64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #444]!	; 0x1bc

00010e94 <__ctype_get_mb_cur_max@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea0 <__fpending@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #428]!	; 0x1ac

00010eac <mbrtowc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #420]!	; 0x1a4

00010eb8 <error@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #412]!	; 0x19c

00010ec4 <malloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #404]!	; 0x194

00010ed0 <__libc_start_main@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #396]!	; 0x18c

00010edc <__freading@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #388]!	; 0x184

00010ee8 <__gmon_start__@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #380]!	; 0x17c

00010ef4 <getopt_long@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #372]!	; 0x174

00010f00 <__ctype_b_loc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #364]!	; 0x16c

00010f0c <exit@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #356]!	; 0x164

00010f18 <bcmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #348]!	; 0x15c

00010f24 <strlen@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #340]!	; 0x154

00010f30 <__errno_location@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #332]!	; 0x14c

00010f3c <__cxa_atexit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #324]!	; 0x144

00010f48 <memset@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #316]!	; 0x13c

00010f54 <__printf_chk@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #308]!	; 0x134

00010f60 <fileno@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #300]!	; 0x12c

00010f6c <__fprintf_chk@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #292]!	; 0x124

00010f78 <fclose@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #284]!	; 0x11c

00010f84 <fseeko64@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #276]!	; 0x114

00010f90 <__uflow@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #268]!	; 0x10c

00010f9c <__overflow@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #260]!	; 0x104

00010fa8 <setlocale@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #252]!	; 0xfc

00010fb4 <strrchr@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #244]!	; 0xf4

00010fc0 <nl_langinfo@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #236]!	; 0xec

00010fcc <clearerr_unlocked@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #228]!	; 0xe4

00010fd8 <fopen64@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #220]!	; 0xdc

00010fe4 <bindtextdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #212]!	; 0xd4

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #204]!	; 0xcc

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #196]!	; 0xc4

00011008 <strspn@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #188]!	; 0xbc

00011014 <__assert_fail@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #180]!	; 0xb4

Disassembly of section .text:

00011020 <.text>:
   11020:	mov	fp, #0
   11024:	mov	lr, #0
   11028:	pop	{r1}		; (ldr r1, [sp], #4)
   1102c:	mov	r2, sp
   11030:	push	{r2}		; (str r2, [sp, #-4]!)
   11034:	push	{r0}		; (str r0, [sp, #-4]!)
   11038:	ldr	ip, [pc, #16]	; 11050 <__assert_fail@plt+0x3c>
   1103c:	push	{ip}		; (str ip, [sp, #-4]!)
   11040:	ldr	r0, [pc, #12]	; 11054 <__assert_fail@plt+0x40>
   11044:	ldr	r3, [pc, #12]	; 11058 <__assert_fail@plt+0x44>
   11048:	bl	10ed0 <__libc_start_main@plt>
   1104c:	bl	10ffc <abort@plt>
   11050:	andeq	r5, r1, ip, lsr #18
   11054:	andeq	r1, r1, ip, lsr #7
   11058:	andeq	r5, r1, ip, asr #17
   1105c:	ldr	r3, [pc, #20]	; 11078 <__assert_fail@plt+0x64>
   11060:	ldr	r2, [pc, #20]	; 1107c <__assert_fail@plt+0x68>
   11064:	add	r3, pc, r3
   11068:	ldr	r2, [r3, r2]
   1106c:	cmp	r2, #0
   11070:	bxeq	lr
   11074:	b	10ee8 <__gmon_start__@plt>
   11078:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1107c:	ldrdeq	r0, [r0], -r4
   11080:	ldr	r0, [pc, #24]	; 110a0 <__assert_fail@plt+0x8c>
   11084:	ldr	r3, [pc, #24]	; 110a4 <__assert_fail@plt+0x90>
   11088:	cmp	r3, r0
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <__assert_fail@plt+0x94>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r7, r2, r0, lsr r1
   110a4:	andeq	r7, r2, r0, lsr r1
   110a8:	andeq	r0, r0, r0
   110ac:	ldr	r0, [pc, #36]	; 110d8 <__assert_fail@plt+0xc4>
   110b0:	ldr	r1, [pc, #36]	; 110dc <__assert_fail@plt+0xc8>
   110b4:	sub	r1, r1, r0
   110b8:	asr	r1, r1, #2
   110bc:	add	r1, r1, r1, lsr #31
   110c0:	asrs	r1, r1, #1
   110c4:	bxeq	lr
   110c8:	ldr	r3, [pc, #16]	; 110e0 <__assert_fail@plt+0xcc>
   110cc:	cmp	r3, #0
   110d0:	bxeq	lr
   110d4:	bx	r3
   110d8:	andeq	r7, r2, r0, lsr r1
   110dc:	andeq	r7, r2, r0, lsr r1
   110e0:	andeq	r0, r0, r0
   110e4:	push	{r4, lr}
   110e8:	ldr	r4, [pc, #24]	; 11108 <__assert_fail@plt+0xf4>
   110ec:	ldrb	r3, [r4]
   110f0:	cmp	r3, #0
   110f4:	popne	{r4, pc}
   110f8:	bl	11080 <__assert_fail@plt+0x6c>
   110fc:	mov	r3, #1
   11100:	strb	r3, [r4]
   11104:	pop	{r4, pc}
   11108:	andeq	r7, r2, r4, asr r1
   1110c:	b	110ac <__assert_fail@plt+0x98>
   11110:	push	{fp, lr}
   11114:	mov	fp, sp
   11118:	sub	sp, sp, #56	; 0x38
   1111c:	mov	r4, r0
   11120:	cmp	r0, #0
   11124:	bne	11368 <__assert_fail@plt+0x354>
   11128:	movw	r1, #22907	; 0x597b
   1112c:	mov	r0, #0
   11130:	mov	r2, #5
   11134:	movt	r1, #1
   11138:	bl	10e4c <dcgettext@plt>
   1113c:	mov	r1, r0
   11140:	movw	r0, #29088	; 0x71a0
   11144:	movt	r0, #2
   11148:	ldr	r2, [r0]
   1114c:	mov	r0, #1
   11150:	bl	10f54 <__printf_chk@plt>
   11154:	movw	r1, #22940	; 0x599c
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10e4c <dcgettext@plt>
   11168:	movw	r7, #29004	; 0x714c
   1116c:	movt	r7, #2
   11170:	ldr	r1, [r7]
   11174:	bl	10dd4 <fputs_unlocked@plt>
   11178:	movw	r1, #23432	; 0x5b88
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e4c <dcgettext@plt>
   1118c:	ldr	r1, [r7]
   11190:	bl	10dd4 <fputs_unlocked@plt>
   11194:	movw	r1, #23488	; 0x5bc0
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e4c <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10dd4 <fputs_unlocked@plt>
   111b0:	movw	r1, #23006	; 0x59de
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e4c <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10dd4 <fputs_unlocked@plt>
   111cc:	bl	1249c <__assert_fail@plt+0x1488>
   111d0:	movw	r1, #23227	; 0x5abb
   111d4:	mov	r0, #0
   111d8:	mov	r2, #5
   111dc:	movt	r1, #1
   111e0:	bl	10e4c <dcgettext@plt>
   111e4:	ldr	r1, [r7]
   111e8:	bl	10dd4 <fputs_unlocked@plt>
   111ec:	movw	r1, #23272	; 0x5ae8
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10e4c <dcgettext@plt>
   11200:	ldr	r1, [r7]
   11204:	bl	10dd4 <fputs_unlocked@plt>
   11208:	movw	r0, #24040	; 0x5de8
   1120c:	mov	r2, #48	; 0x30
   11210:	mov	r6, sp
   11214:	movw	r5, #23326	; 0x5b1e
   11218:	movt	r0, #1
   1121c:	movt	r5, #1
   11220:	add	r1, r0, #32
   11224:	add	r3, r0, #16
   11228:	vld1.64	{d18-d19}, [r0], r2
   1122c:	vld1.64	{d16-d17}, [r1]
   11230:	vld1.64	{d20-d21}, [r3]
   11234:	vldr	d22, [r0]
   11238:	add	r1, r6, #32
   1123c:	add	r0, r6, #16
   11240:	vst1.64	{d16-d17}, [r1]
   11244:	movw	r1, #23563	; 0x5c0b
   11248:	vst1.64	{d20-d21}, [r0]
   1124c:	mov	r0, r6
   11250:	movt	r1, #1
   11254:	vst1.64	{d18-d19}, [r0], r2
   11258:	vstr	d22, [r0]
   1125c:	mov	r0, r5
   11260:	bl	10dec <strcmp@plt>
   11264:	cmp	r0, #0
   11268:	ldrne	r1, [r6, #8]!
   1126c:	cmpne	r1, #0
   11270:	bne	1125c <__assert_fail@plt+0x248>
   11274:	movw	r1, #23658	; 0x5c6a
   11278:	ldr	r6, [r6, #4]
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10e4c <dcgettext@plt>
   1128c:	movw	r2, #23374	; 0x5b4e
   11290:	movw	r3, #23681	; 0x5c81
   11294:	mov	r1, r0
   11298:	mov	r0, #1
   1129c:	movt	r2, #1
   112a0:	movt	r3, #1
   112a4:	bl	10f54 <__printf_chk@plt>
   112a8:	cmp	r6, #0
   112ac:	mov	r0, #5
   112b0:	mov	r1, #0
   112b4:	moveq	r6, r5
   112b8:	bl	10fa8 <setlocale@plt>
   112bc:	cmp	r0, #0
   112c0:	beq	112f8 <__assert_fail@plt+0x2e4>
   112c4:	movw	r1, #23721	; 0x5ca9
   112c8:	mov	r2, #3
   112cc:	movt	r1, #1
   112d0:	bl	10ff0 <strncmp@plt>
   112d4:	cmp	r0, #0
   112d8:	beq	112f8 <__assert_fail@plt+0x2e4>
   112dc:	movw	r1, #23725	; 0x5cad
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	movt	r1, #1
   112ec:	bl	10e4c <dcgettext@plt>
   112f0:	ldr	r1, [r7]
   112f4:	bl	10dd4 <fputs_unlocked@plt>
   112f8:	movw	r1, #23796	; 0x5cf4
   112fc:	mov	r0, #0
   11300:	mov	r2, #5
   11304:	movt	r1, #1
   11308:	bl	10e4c <dcgettext@plt>
   1130c:	movw	r2, #23681	; 0x5c81
   11310:	mov	r1, r0
   11314:	mov	r0, #1
   11318:	mov	r3, r5
   1131c:	movt	r2, #1
   11320:	bl	10f54 <__printf_chk@plt>
   11324:	movw	r1, #23823	; 0x5d0f
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	movt	r1, #1
   11334:	bl	10e4c <dcgettext@plt>
   11338:	mov	r1, r0
   1133c:	movw	r0, #23591	; 0x5c27
   11340:	movw	r3, #23873	; 0x5d41
   11344:	cmp	r6, r5
   11348:	mov	r2, r6
   1134c:	movt	r0, #1
   11350:	movt	r3, #1
   11354:	moveq	r3, r0
   11358:	mov	r0, #1
   1135c:	bl	10f54 <__printf_chk@plt>
   11360:	mov	r0, r4
   11364:	bl	10f0c <exit@plt>
   11368:	movw	r0, #28992	; 0x7140
   1136c:	movw	r1, #22868	; 0x5954
   11370:	mov	r2, #5
   11374:	movt	r0, #2
   11378:	movt	r1, #1
   1137c:	ldr	r5, [r0]
   11380:	mov	r0, #0
   11384:	bl	10e4c <dcgettext@plt>
   11388:	mov	r2, r0
   1138c:	movw	r0, #29088	; 0x71a0
   11390:	mov	r1, #1
   11394:	movt	r0, #2
   11398:	ldr	r3, [r0]
   1139c:	mov	r0, r5
   113a0:	bl	10f6c <__fprintf_chk@plt>
   113a4:	mov	r0, r4
   113a8:	bl	10f0c <exit@plt>
   113ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b0:	add	fp, sp, #28
   113b4:	sub	sp, sp, #36	; 0x24
   113b8:	mov	r5, r0
   113bc:	ldr	r0, [r1]
   113c0:	mov	r4, r1
   113c4:	bl	127fc <__assert_fail@plt+0x17e8>
   113c8:	movw	r1, #23873	; 0x5d41
   113cc:	mov	r0, #6
   113d0:	movt	r1, #1
   113d4:	bl	10fa8 <setlocale@plt>
   113d8:	movw	r6, #23378	; 0x5b52
   113dc:	movw	r1, #23335	; 0x5b27
   113e0:	movt	r6, #1
   113e4:	movt	r1, #1
   113e8:	mov	r0, r6
   113ec:	bl	10fe4 <bindtextdomain@plt>
   113f0:	mov	r0, r6
   113f4:	bl	10e64 <textdomain@plt>
   113f8:	movw	r0, #9480	; 0x2508
   113fc:	movt	r0, #1
   11400:	bl	15930 <__assert_fail@plt+0x491c>
   11404:	movw	r8, #23359	; 0x5b3f
   11408:	movw	r9, #23944	; 0x5d88
   1140c:	mov	sl, #0
   11410:	mov	r0, #0
   11414:	movt	r8, #1
   11418:	movt	r9, #1
   1141c:	str	r0, [sp, #24]
   11420:	mov	r0, #0
   11424:	mov	r1, r4
   11428:	mov	r2, r8
   1142c:	mov	r3, r9
   11430:	str	r0, [sp]
   11434:	mov	r0, r5
   11438:	bl	10ef4 <getopt_long@plt>
   1143c:	cmp	r0, #96	; 0x60
   11440:	ble	11460 <__assert_fail@plt+0x44c>
   11444:	cmp	r0, #97	; 0x61
   11448:	beq	114ac <__assert_fail@plt+0x498>
   1144c:	cmp	r0, #116	; 0x74
   11450:	beq	114c0 <__assert_fail@plt+0x4ac>
   11454:	cmp	r0, #256	; 0x100
   11458:	beq	1154c <__assert_fail@plt+0x538>
   1145c:	b	114ec <__assert_fail@plt+0x4d8>
   11460:	cmp	r0, #43	; 0x2b
   11464:	bgt	11484 <__assert_fail@plt+0x470>
   11468:	cmn	r0, #1
   1146c:	beq	11554 <__assert_fail@plt+0x540>
   11470:	cmn	r0, #3
   11474:	beq	11968 <__assert_fail@plt+0x954>
   11478:	cmn	r0, #2
   1147c:	bne	114ec <__assert_fail@plt+0x4d8>
   11480:	b	119b0 <__assert_fail@plt+0x99c>
   11484:	cmp	r0, #44	; 0x2c
   11488:	bne	114e4 <__assert_fail@plt+0x4d0>
   1148c:	tst	sl, #1
   11490:	mov	sl, #0
   11494:	beq	11420 <__assert_fail@plt+0x40c>
   11498:	mov	r0, r6
   1149c:	mov	r1, r7
   114a0:	bl	119f0 <__assert_fail@plt+0x9dc>
   114a4:	mov	sl, #0
   114a8:	b	11420 <__assert_fail@plt+0x40c>
   114ac:	movw	r0, #29016	; 0x7158
   114b0:	mov	r1, #1
   114b4:	movt	r0, #2
   114b8:	strb	r1, [r0]
   114bc:	b	11420 <__assert_fail@plt+0x40c>
   114c0:	movw	r0, #29016	; 0x7158
   114c4:	mov	r1, #1
   114c8:	movt	r0, #2
   114cc:	strb	r1, [r0]
   114d0:	movw	r0, #29008	; 0x7150
   114d4:	movt	r0, #2
   114d8:	ldr	r0, [r0]
   114dc:	bl	11ad0 <__assert_fail@plt+0xabc>
   114e0:	b	11420 <__assert_fail@plt+0x40c>
   114e4:	cmp	r0, #63	; 0x3f
   114e8:	beq	119b8 <__assert_fail@plt+0x9a4>
   114ec:	ands	r1, sl, #1
   114f0:	moveq	r7, r1
   114f4:	moveq	r6, r1
   114f8:	movw	r1, #39321	; 0x9999
   114fc:	movt	r1, #39321	; 0x9999
   11500:	subs	r1, r1, r6
   11504:	movw	r1, #39321	; 0x9999
   11508:	movt	r1, #6553	; 0x1999
   1150c:	sbcs	r1, r1, r7
   11510:	bcc	119c0 <__assert_fail@plt+0x9ac>
   11514:	mov	r1, #10
   11518:	add	r3, r7, r7, lsl #2
   1151c:	sub	r0, r0, #48	; 0x30
   11520:	mov	sl, #1
   11524:	umull	r1, r2, r6, r1
   11528:	add	r2, r2, r3, lsl #1
   1152c:	adds	r1, r1, r0
   11530:	adc	r0, r2, r0, asr #31
   11534:	subs	r2, r1, r6
   11538:	mov	r6, r1
   1153c:	sbcs	r2, r0, r7
   11540:	mov	r7, r0
   11544:	bcs	11420 <__assert_fail@plt+0x40c>
   11548:	b	119c0 <__assert_fail@plt+0x9ac>
   1154c:	mov	r0, #1
   11550:	b	1141c <__assert_fail@plt+0x408>
   11554:	ldr	r0, [sp, #24]
   11558:	tst	r0, #1
   1155c:	movwne	r1, #29016	; 0x7158
   11560:	movne	r0, #0
   11564:	movtne	r1, #2
   11568:	strbne	r0, [r1]
   1156c:	tst	sl, #1
   11570:	beq	11580 <__assert_fail@plt+0x56c>
   11574:	mov	r0, r6
   11578:	mov	r1, r7
   1157c:	bl	119f0 <__assert_fail@plt+0x9dc>
   11580:	bl	12048 <__assert_fail@plt+0x1034>
   11584:	movw	r0, #28984	; 0x7138
   11588:	movt	r0, #2
   1158c:	ldr	r1, [r0]
   11590:	mov	r0, #0
   11594:	cmp	r1, r5
   11598:	addlt	r0, r4, r1, lsl #2
   1159c:	bl	12250 <__assert_fail@plt+0x123c>
   115a0:	mov	r0, #0
   115a4:	bl	12278 <__assert_fail@plt+0x1264>
   115a8:	cmp	r0, #0
   115ac:	beq	11950 <__assert_fail@plt+0x93c>
   115b0:	mov	r1, r0
   115b4:	movw	r0, #29400	; 0x72d8
   115b8:	movt	r0, #2
   115bc:	mov	r4, r1
   115c0:	ldr	r0, [r0]
   115c4:	bl	14e98 <__assert_fail@plt+0x3e84>
   115c8:	mov	r3, r4
   115cc:	str	r0, [sp, #12]
   115d0:	mov	r8, #0
   115d4:	mov	r0, #0
   115d8:	mov	r4, #1
   115dc:	mov	sl, #0
   115e0:	mov	r6, #1
   115e4:	mov	ip, #0
   115e8:	str	r8, [sp, #32]
   115ec:	str	r0, [sp, #20]
   115f0:	ldmib	r3, {r0, r1}
   115f4:	cmp	r0, r1
   115f8:	bcs	1183c <__assert_fail@plt+0x828>
   115fc:	add	r1, r0, #1
   11600:	str	r1, [r3, #4]
   11604:	ldrb	r7, [r0]
   11608:	tst	r4, #1
   1160c:	beq	1189c <__assert_fail@plt+0x888>
   11610:	str	r6, [sp, #16]
   11614:	mov	r4, ip
   11618:	str	r3, [sp, #24]
   1161c:	bl	10f00 <__ctype_b_loc@plt>
   11620:	ldr	r0, [r0]
   11624:	add	r0, r0, r7, lsl #1
   11628:	ldrh	r0, [r0]
   1162c:	ands	r6, r0, #1
   11630:	beq	1167c <__assert_fail@plt+0x668>
   11634:	mov	r0, r8
   11638:	mov	r1, sl
   1163c:	add	r2, sp, #32
   11640:	add	r3, sp, #31
   11644:	bl	1216c <__assert_fail@plt+0x1158>
   11648:	mov	r5, r0
   1164c:	ldrb	r0, [sp, #31]
   11650:	cmp	r0, #0
   11654:	beq	11770 <__assert_fail@plt+0x75c>
   11658:	ldr	r3, [sp, #24]
   1165c:	mov	r5, r8
   11660:	mov	r9, sl
   11664:	mov	r2, r4
   11668:	clz	r0, r0
   1166c:	lsr	r4, r0, #5
   11670:	cmp	r2, #0
   11674:	bne	116f0 <__assert_fail@plt+0x6dc>
   11678:	b	11748 <__assert_fail@plt+0x734>
   1167c:	cmp	r7, #8
   11680:	mov	r2, r4
   11684:	bne	116c8 <__assert_fail@plt+0x6b4>
   11688:	ldr	r0, [sp, #32]
   1168c:	ldr	r3, [sp, #24]
   11690:	mov	r7, #8
   11694:	mov	r4, #1
   11698:	cmp	r0, #0
   1169c:	subne	r0, r0, #1
   116a0:	subs	r5, r8, #1
   116a4:	str	r0, [sp, #32]
   116a8:	orr	r0, r8, sl
   116ac:	sbc	r9, sl, #0
   116b0:	cmp	r0, #0
   116b4:	moveq	r9, sl
   116b8:	moveq	r5, r8
   116bc:	cmp	r2, #0
   116c0:	bne	116f0 <__assert_fail@plt+0x6dc>
   116c4:	b	11748 <__assert_fail@plt+0x734>
   116c8:	adds	r5, r8, #1
   116cc:	ldr	r3, [sp, #24]
   116d0:	mov	r0, #0
   116d4:	mov	r4, #1
   116d8:	adcs	r9, sl, #0
   116dc:	adc	r0, r0, #0
   116e0:	cmp	r0, #1
   116e4:	beq	119cc <__assert_fail@plt+0x9b8>
   116e8:	cmp	r2, #0
   116ec:	beq	11748 <__assert_fail@plt+0x734>
   116f0:	mov	r8, r6
   116f4:	cmp	r2, #1
   116f8:	beq	11714 <__assert_fail@plt+0x700>
   116fc:	ldr	r0, [sp, #20]
   11700:	tst	r0, #1
   11704:	beq	11714 <__assert_fail@plt+0x700>
   11708:	ldr	r0, [sp, #12]
   1170c:	mov	r1, #9
   11710:	strb	r1, [r0]
   11714:	movw	r0, #29004	; 0x714c
   11718:	mov	r1, #1
   1171c:	mov	r6, r2
   11720:	movt	r0, #2
   11724:	ldr	r3, [r0]
   11728:	ldr	r0, [sp, #12]
   1172c:	bl	10e40 <fwrite_unlocked@plt>
   11730:	ldr	r3, [sp, #24]
   11734:	mov	r1, #0
   11738:	cmp	r0, r6
   1173c:	mov	r6, r8
   11740:	str	r1, [sp, #20]
   11744:	bne	1191c <__assert_fail@plt+0x908>
   11748:	movw	r0, #29016	; 0x7158
   1174c:	mov	ip, #0
   11750:	movt	r0, #2
   11754:	ldrb	r0, [r0]
   11758:	orrs	r0, r6, r0
   1175c:	movwne	r0, #1
   11760:	and	r4, r4, r0
   11764:	cmn	r7, #1
   11768:	bgt	118b0 <__assert_fail@plt+0x89c>
   1176c:	b	11948 <__assert_fail@plt+0x934>
   11770:	mov	r9, r1
   11774:	subs	r1, r5, r8
   11778:	sbcs	r1, r9, sl
   1177c:	bcc	119cc <__assert_fail@plt+0x9b8>
   11780:	mov	ip, r4
   11784:	cmp	r7, #9
   11788:	bne	1179c <__assert_fail@plt+0x788>
   1178c:	ldr	r3, [sp, #24]
   11790:	cmp	ip, #0
   11794:	bne	117d8 <__assert_fail@plt+0x7c4>
   11798:	b	117e4 <__assert_fail@plt+0x7d0>
   1179c:	adds	r8, r8, #1
   117a0:	ldr	r3, [sp, #16]
   117a4:	adc	sl, sl, #0
   117a8:	eor	r1, r8, r5
   117ac:	eor	r2, sl, r9
   117b0:	orrs	r1, r1, r2
   117b4:	mov	r2, r1
   117b8:	movwne	r2, #1
   117bc:	mvn	r3, r3
   117c0:	orr	r2, r3, r2
   117c4:	tst	r2, #1
   117c8:	bne	11804 <__assert_fail@plt+0x7f0>
   117cc:	ldr	r3, [sp, #24]
   117d0:	mov	r5, r8
   117d4:	mov	r9, sl
   117d8:	ldr	r1, [sp, #12]
   117dc:	mov	r2, #9
   117e0:	strb	r2, [r1]
   117e4:	ldr	r1, [sp, #20]
   117e8:	mov	r7, #9
   117ec:	and	r2, r1, #1
   117f0:	clz	r0, r0
   117f4:	lsr	r4, r0, #5
   117f8:	cmp	r2, #0
   117fc:	bne	116f0 <__assert_fail@plt+0x6dc>
   11800:	b	11748 <__assert_fail@plt+0x734>
   11804:	ldr	r0, [sp, #12]
   11808:	ldr	r3, [sp, #24]
   1180c:	mov	r4, #1
   11810:	mov	r6, #1
   11814:	strb	r7, [r0, ip]
   11818:	clz	r0, r1
   1181c:	ldr	r1, [sp, #20]
   11820:	add	ip, ip, #1
   11824:	lsr	r0, r0, #5
   11828:	orr	r1, r1, r0
   1182c:	str	r1, [sp, #20]
   11830:	cmp	r7, #10
   11834:	bne	115f0 <__assert_fail@plt+0x5dc>
   11838:	b	115d0 <__assert_fail@plt+0x5bc>
   1183c:	mov	r0, r3
   11840:	mov	r9, r6
   11844:	mov	r6, ip
   11848:	mov	r5, r3
   1184c:	bl	10f90 <__uflow@plt>
   11850:	mov	r7, r0
   11854:	cmn	r0, #1
   11858:	bgt	11888 <__assert_fail@plt+0x874>
   1185c:	mov	r0, r5
   11860:	bl	12278 <__assert_fail@plt+0x1264>
   11864:	mov	ip, r6
   11868:	mov	r3, r0
   1186c:	cmp	r0, #0
   11870:	mov	r6, r9
   11874:	bne	115f0 <__assert_fail@plt+0x5dc>
   11878:	mov	r3, #0
   1187c:	tst	r4, #1
   11880:	bne	11610 <__assert_fail@plt+0x5fc>
   11884:	b	1189c <__assert_fail@plt+0x888>
   11888:	mov	ip, r6
   1188c:	mov	r3, r5
   11890:	mov	r6, r9
   11894:	tst	r4, #1
   11898:	bne	11610 <__assert_fail@plt+0x5fc>
   1189c:	mov	r4, #0
   118a0:	mov	r5, r8
   118a4:	mov	r9, sl
   118a8:	cmn	r7, #1
   118ac:	ble	11948 <__assert_fail@plt+0x934>
   118b0:	movw	r0, #29004	; 0x714c
   118b4:	movt	r0, #2
   118b8:	ldr	r0, [r0]
   118bc:	ldr	r1, [r0, #20]
   118c0:	ldr	r2, [r0, #24]
   118c4:	cmp	r1, r2
   118c8:	bcs	118ec <__assert_fail@plt+0x8d8>
   118cc:	add	r2, r1, #1
   118d0:	mov	r8, r5
   118d4:	mov	sl, r9
   118d8:	str	r2, [r0, #20]
   118dc:	strb	r7, [r1]
   118e0:	cmp	r7, #10
   118e4:	bne	115f0 <__assert_fail@plt+0x5dc>
   118e8:	b	115d0 <__assert_fail@plt+0x5bc>
   118ec:	uxtb	r1, r7
   118f0:	str	r6, [sp, #24]
   118f4:	mov	r8, r3
   118f8:	mov	r6, ip
   118fc:	bl	10f9c <__overflow@plt>
   11900:	mov	ip, r6
   11904:	ldr	r6, [sp, #24]
   11908:	mov	r3, r8
   1190c:	cmn	r0, #1
   11910:	mov	r8, r5
   11914:	mov	sl, r9
   11918:	bgt	118e0 <__assert_fail@plt+0x8cc>
   1191c:	bl	10f30 <__errno_location@plt>
   11920:	movw	r1, #23930	; 0x5d7a
   11924:	ldr	r4, [r0]
   11928:	mov	r0, #0
   1192c:	mov	r2, #5
   11930:	movt	r1, #1
   11934:	bl	10e4c <dcgettext@plt>
   11938:	mov	r2, r0
   1193c:	mov	r0, #1
   11940:	mov	r1, r4
   11944:	bl	10eb8 <error@plt>
   11948:	ldr	r0, [sp, #12]
   1194c:	bl	1272c <__assert_fail@plt+0x1718>
   11950:	bl	1244c <__assert_fail@plt+0x1438>
   11954:	movw	r0, #29028	; 0x7164
   11958:	movt	r0, #2
   1195c:	ldr	r0, [r0]
   11960:	sub	sp, fp, #28
   11964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11968:	movw	r0, #28904	; 0x70e8
   1196c:	movw	r2, #23388	; 0x5b5c
   11970:	mov	r1, #0
   11974:	movt	r0, #2
   11978:	movt	r2, #1
   1197c:	str	r1, [sp, #4]
   11980:	movw	r1, #23326	; 0x5b1e
   11984:	movt	r1, #1
   11988:	ldr	r3, [r0]
   1198c:	movw	r0, #29004	; 0x714c
   11990:	str	r2, [sp]
   11994:	movw	r2, #23374	; 0x5b4e
   11998:	movt	r0, #2
   1199c:	movt	r2, #1
   119a0:	ldr	r0, [r0]
   119a4:	bl	14c64 <__assert_fail@plt+0x3c50>
   119a8:	mov	r0, #0
   119ac:	bl	10f0c <exit@plt>
   119b0:	mov	r0, #0
   119b4:	bl	11110 <__assert_fail@plt+0xfc>
   119b8:	mov	r0, #1
   119bc:	bl	11110 <__assert_fail@plt+0xfc>
   119c0:	movw	r1, #23404	; 0x5b6c
   119c4:	movt	r1, #1
   119c8:	b	119d4 <__assert_fail@plt+0x9c0>
   119cc:	movw	r1, #23907	; 0x5d63
   119d0:	movt	r1, #1
   119d4:	mov	r0, #0
   119d8:	mov	r2, #5
   119dc:	bl	10e4c <dcgettext@plt>
   119e0:	mov	r2, r0
   119e4:	mov	r0, #1
   119e8:	mov	r1, #0
   119ec:	bl	10eb8 <error@plt>
   119f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   119f4:	add	fp, sp, #24
   119f8:	movw	r6, #29024	; 0x7160
   119fc:	mov	r8, r1
   11a00:	mov	r5, r0
   11a04:	mov	r0, #0
   11a08:	movt	r6, #2
   11a0c:	ldr	r1, [r6, #8]
   11a10:	cmp	r1, #0
   11a14:	beq	11a28 <__assert_fail@plt+0xa14>
   11a18:	ldr	r2, [r6, #12]
   11a1c:	add	r2, r2, r1, lsl #3
   11a20:	ldrd	r2, [r2, #-8]
   11a24:	b	11a30 <__assert_fail@plt+0xa1c>
   11a28:	mov	r2, #0
   11a2c:	mov	r3, #0
   11a30:	subs	r7, r5, r2
   11a34:	sbcs	r4, r8, r3
   11a38:	adc	r0, r0, #0
   11a3c:	rsbs	r0, r0, #1
   11a40:	ldr	r0, [r6, #16]
   11a44:	movwne	r4, #0
   11a48:	movwne	r7, #0
   11a4c:	cmp	r1, r0
   11a50:	bne	11a70 <__assert_fail@plt+0xa5c>
   11a54:	ldr	r0, [r6, #12]
   11a58:	add	r1, r6, #16
   11a5c:	mov	r2, #8
   11a60:	bl	15044 <__assert_fail@plt+0x4030>
   11a64:	str	r0, [r6, #12]
   11a68:	ldr	r1, [r6, #8]
   11a6c:	b	11a74 <__assert_fail@plt+0xa60>
   11a70:	ldr	r0, [r6, #12]
   11a74:	add	r2, r1, #1
   11a78:	str	r2, [r6, #8]
   11a7c:	str	r5, [r0, r1, lsl #3]!
   11a80:	str	r8, [r0, #4]
   11a84:	movw	r0, #29400	; 0x72d8
   11a88:	movt	r0, #2
   11a8c:	ldr	r1, [r0]
   11a90:	subs	r1, r1, r7
   11a94:	rscs	r1, r4, #0
   11a98:	bcs	11aa8 <__assert_fail@plt+0xa94>
   11a9c:	cmp	r4, #0
   11aa0:	bne	11aac <__assert_fail@plt+0xa98>
   11aa4:	str	r7, [r0]
   11aa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11aac:	movw	r1, #24096	; 0x5e20
   11ab0:	mov	r0, #0
   11ab4:	mov	r2, #5
   11ab8:	movt	r1, #1
   11abc:	bl	10e4c <dcgettext@plt>
   11ac0:	mov	r2, r0
   11ac4:	mov	r0, #1
   11ac8:	mov	r1, #0
   11acc:	bl	10eb8 <error@plt>
   11ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad4:	add	fp, sp, #28
   11ad8:	sub	sp, sp, #12
   11adc:	movw	r8, #29024	; 0x7160
   11ae0:	mov	r5, r0
   11ae4:	mov	r0, #0
   11ae8:	mov	ip, #1
   11aec:	mov	sl, #0
   11af0:	mov	r9, #0
   11af4:	mov	r6, #0
   11af8:	movt	r8, #2
   11afc:	str	r0, [sp, #8]
   11b00:	mov	r0, #0
   11b04:	str	r0, [sp, #4]
   11b08:	mov	r0, #0
   11b0c:	str	r0, [sp]
   11b10:	ldrb	r4, [r5]
   11b14:	cmp	r4, #44	; 0x2c
   11b18:	bne	11b38 <__assert_fail@plt+0xb24>
   11b1c:	b	11d0c <__assert_fail@plt+0xcf8>
   11b20:	mov	r9, #0
   11b24:	mov	r6, #0
   11b28:	add	r5, r5, #1
   11b2c:	ldrb	r4, [r5]
   11b30:	cmp	r4, #44	; 0x2c
   11b34:	beq	11d0c <__assert_fail@plt+0xcf8>
   11b38:	cmp	r4, #0
   11b3c:	beq	11e4c <__assert_fail@plt+0xe38>
   11b40:	mov	r7, ip
   11b44:	bl	10f00 <__ctype_b_loc@plt>
   11b48:	ldr	r0, [r0]
   11b4c:	mov	ip, r7
   11b50:	ldrb	r0, [r0, r4, lsl #1]
   11b54:	tst	r0, #1
   11b58:	bne	11d0c <__assert_fail@plt+0xcf8>
   11b5c:	cmp	r4, #43	; 0x2b
   11b60:	beq	11bb8 <__assert_fail@plt+0xba4>
   11b64:	cmp	r4, #47	; 0x2f
   11b68:	bne	11c04 <__assert_fail@plt+0xbf0>
   11b6c:	mov	r9, #0
   11b70:	tst	r6, #1
   11b74:	beq	11d34 <__assert_fail@plt+0xd20>
   11b78:	movw	r1, #24119	; 0x5e37
   11b7c:	mov	r0, #0
   11b80:	mov	r2, #5
   11b84:	movt	r1, #1
   11b88:	bl	10e4c <dcgettext@plt>
   11b8c:	mov	r6, r0
   11b90:	mov	r0, r5
   11b94:	bl	147c0 <__assert_fail@plt+0x37ac>
   11b98:	mov	r3, r0
   11b9c:	mov	r0, #0
   11ba0:	mov	r1, #0
   11ba4:	mov	r2, r6
   11ba8:	bl	10eb8 <error@plt>
   11bac:	mov	sl, #1
   11bb0:	mov	ip, #0
   11bb4:	b	11cf8 <__assert_fail@plt+0xce4>
   11bb8:	tst	r6, #1
   11bbc:	beq	11d5c <__assert_fail@plt+0xd48>
   11bc0:	movw	r1, #24160	; 0x5e60
   11bc4:	mov	r0, #0
   11bc8:	mov	r2, #5
   11bcc:	mov	sl, #0
   11bd0:	movt	r1, #1
   11bd4:	bl	10e4c <dcgettext@plt>
   11bd8:	mov	r6, r0
   11bdc:	mov	r0, r5
   11be0:	bl	147c0 <__assert_fail@plt+0x37ac>
   11be4:	mov	r3, r0
   11be8:	mov	r0, #0
   11bec:	mov	r1, #0
   11bf0:	mov	r2, r6
   11bf4:	bl	10eb8 <error@plt>
   11bf8:	mov	r9, #1
   11bfc:	mov	ip, #0
   11c00:	b	11cf8 <__assert_fail@plt+0xce4>
   11c04:	sub	r0, r4, #48	; 0x30
   11c08:	cmp	r0, #9
   11c0c:	bhi	1200c <__assert_fail@plt+0xff8>
   11c10:	ldr	r3, [sp, #4]
   11c14:	ands	r1, r6, #1
   11c18:	ldr	r2, [sp]
   11c1c:	moveq	r2, r5
   11c20:	str	r2, [sp]
   11c24:	mov	r2, r1
   11c28:	movne	r2, r3
   11c2c:	ldr	r3, [sp, #8]
   11c30:	movne	r1, r3
   11c34:	movw	r3, #39321	; 0x9999
   11c38:	movt	r3, #39321	; 0x9999
   11c3c:	subs	r3, r3, r1
   11c40:	movw	r3, #39321	; 0x9999
   11c44:	movt	r3, #6553	; 0x1999
   11c48:	sbcs	r3, r3, r2
   11c4c:	bcc	11c80 <__assert_fail@plt+0xc6c>
   11c50:	mov	r3, #10
   11c54:	add	r6, r2, r2, lsl #2
   11c58:	str	r1, [sp, #8]
   11c5c:	str	r2, [sp, #4]
   11c60:	umull	r3, r7, r1, r3
   11c64:	add	r7, r7, r6, lsl #1
   11c68:	adds	r3, r3, r0
   11c6c:	mov	r6, #1
   11c70:	adc	r0, r7, r0, asr #31
   11c74:	subs	r7, r3, r1
   11c78:	sbcs	r7, r0, r2
   11c7c:	bcs	11e34 <__assert_fail@plt+0xe20>
   11c80:	ldr	r7, [sp]
   11c84:	movw	r1, #24201	; 0x5e89
   11c88:	movt	r1, #1
   11c8c:	mov	r0, r7
   11c90:	bl	11008 <strspn@plt>
   11c94:	mov	r5, r0
   11c98:	mov	r0, r7
   11c9c:	mov	r1, r5
   11ca0:	bl	15360 <__assert_fail@plt+0x434c>
   11ca4:	movw	r1, #24212	; 0x5e94
   11ca8:	mov	r6, r0
   11cac:	mov	r0, #0
   11cb0:	mov	r2, #5
   11cb4:	movt	r1, #1
   11cb8:	bl	10e4c <dcgettext@plt>
   11cbc:	mov	r4, r8
   11cc0:	mov	r8, r0
   11cc4:	mov	r0, r6
   11cc8:	bl	147c0 <__assert_fail@plt+0x37ac>
   11ccc:	mov	r3, r0
   11cd0:	mov	r2, r8
   11cd4:	mov	r0, #0
   11cd8:	mov	r1, #0
   11cdc:	mov	r8, r4
   11ce0:	bl	10eb8 <error@plt>
   11ce4:	mov	r0, r6
   11ce8:	bl	1272c <__assert_fail@plt+0x1718>
   11cec:	add	r0, r7, r5
   11cf0:	mov	ip, #0
   11cf4:	sub	r5, r0, #1
   11cf8:	mov	r6, #1
   11cfc:	add	r5, r5, #1
   11d00:	ldrb	r4, [r5]
   11d04:	cmp	r4, #44	; 0x2c
   11d08:	bne	11b38 <__assert_fail@plt+0xb24>
   11d0c:	tst	r6, #1
   11d10:	beq	11b24 <__assert_fail@plt+0xb10>
   11d14:	tst	sl, #1
   11d18:	beq	11d3c <__assert_fail@plt+0xd28>
   11d1c:	ldrd	r0, [r8, #32]
   11d20:	orrs	r0, r0, r1
   11d24:	bne	11e7c <__assert_fail@plt+0xe68>
   11d28:	ldr	r0, [sp, #8]
   11d2c:	ldr	r1, [sp, #4]
   11d30:	strd	r0, [r8, #32]
   11d34:	mov	sl, #1
   11d38:	b	11b24 <__assert_fail@plt+0xb10>
   11d3c:	tst	r9, #1
   11d40:	beq	11d68 <__assert_fail@plt+0xd54>
   11d44:	ldrd	r0, [r8, #40]	; 0x28
   11d48:	orrs	r0, r0, r1
   11d4c:	bne	11ed8 <__assert_fail@plt+0xec4>
   11d50:	ldr	r0, [sp, #8]
   11d54:	ldr	r1, [sp, #4]
   11d58:	strd	r0, [r8, #40]	; 0x28
   11d5c:	mov	r9, #1
   11d60:	mov	sl, #0
   11d64:	b	11b24 <__assert_fail@plt+0xb10>
   11d68:	ldr	r1, [r8, #8]
   11d6c:	cmp	r1, #0
   11d70:	beq	11d88 <__assert_fail@plt+0xd74>
   11d74:	ldr	r0, [r8, #12]
   11d78:	add	r0, r0, r1, lsl #3
   11d7c:	ldr	r3, [r0, #-4]
   11d80:	ldr	r0, [r0, #-8]
   11d84:	b	11d90 <__assert_fail@plt+0xd7c>
   11d88:	mov	r0, #0
   11d8c:	mov	r3, #0
   11d90:	ldr	r2, [sp, #8]
   11d94:	subs	r6, r2, r0
   11d98:	ldr	r0, [sp, #4]
   11d9c:	sbcs	r4, r0, r3
   11da0:	mov	r0, #0
   11da4:	adc	r0, r0, #0
   11da8:	rsbs	r0, r0, #1
   11dac:	ldr	r0, [r8, #16]
   11db0:	movwne	r4, #0
   11db4:	movwne	r6, #0
   11db8:	cmp	r1, r0
   11dbc:	bne	11de4 <__assert_fail@plt+0xdd0>
   11dc0:	ldr	r0, [r8, #12]
   11dc4:	add	r1, r8, #16
   11dc8:	mov	r2, #8
   11dcc:	mov	r7, ip
   11dd0:	bl	15044 <__assert_fail@plt+0x4030>
   11dd4:	str	r0, [r8, #12]
   11dd8:	mov	ip, r7
   11ddc:	ldr	r1, [r8, #8]
   11de0:	b	11de8 <__assert_fail@plt+0xdd4>
   11de4:	ldr	r0, [r8, #12]
   11de8:	add	r2, r1, #1
   11dec:	mov	sl, #0
   11df0:	str	r2, [r8, #8]
   11df4:	ldr	r2, [sp, #8]
   11df8:	str	r2, [r0, r1, lsl #3]!
   11dfc:	ldr	r1, [sp, #4]
   11e00:	str	r1, [r0, #4]
   11e04:	movw	r0, #29400	; 0x72d8
   11e08:	movt	r0, #2
   11e0c:	ldr	r0, [r0]
   11e10:	subs	r0, r0, r6
   11e14:	rscs	r0, r4, #0
   11e18:	bcs	11b20 <__assert_fail@plt+0xb0c>
   11e1c:	cmp	r4, #0
   11e20:	bne	11fd4 <__assert_fail@plt+0xfc0>
   11e24:	movw	r0, #29400	; 0x72d8
   11e28:	movt	r0, #2
   11e2c:	str	r6, [r0]
   11e30:	b	11b20 <__assert_fail@plt+0xb0c>
   11e34:	stmib	sp, {r0, r3}
   11e38:	add	r5, r5, #1
   11e3c:	ldrb	r4, [r5]
   11e40:	cmp	r4, #44	; 0x2c
   11e44:	bne	11b38 <__assert_fail@plt+0xb24>
   11e48:	b	11d0c <__assert_fail@plt+0xcf8>
   11e4c:	and	r0, ip, r6
   11e50:	tst	r0, #1
   11e54:	beq	11ff8 <__assert_fail@plt+0xfe4>
   11e58:	tst	sl, #1
   11e5c:	beq	11eb4 <__assert_fail@plt+0xea0>
   11e60:	ldrd	r0, [r8, #32]
   11e64:	orrs	r0, r0, r1
   11e68:	ldreq	r0, [sp, #8]
   11e6c:	ldreq	r1, [sp, #4]
   11e70:	strdeq	r0, [r8, #32]
   11e74:	subeq	sp, fp, #28
   11e78:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e7c:	movw	r1, #24762	; 0x60ba
   11e80:	mov	r0, #0
   11e84:	mov	r2, #5
   11e88:	movt	r1, #1
   11e8c:	bl	10e4c <dcgettext@plt>
   11e90:	mov	r2, r0
   11e94:	mov	r0, #0
   11e98:	mov	r1, #0
   11e9c:	bl	10eb8 <error@plt>
   11ea0:	ldr	r0, [sp, #8]
   11ea4:	ldr	r1, [sp, #4]
   11ea8:	strd	r0, [r8, #32]
   11eac:	mov	r0, #1
   11eb0:	bl	10f0c <exit@plt>
   11eb4:	tst	r9, #1
   11eb8:	beq	11f10 <__assert_fail@plt+0xefc>
   11ebc:	ldrd	r0, [r8, #40]	; 0x28
   11ec0:	orrs	r0, r0, r1
   11ec4:	ldreq	r0, [sp, #8]
   11ec8:	ldreq	r1, [sp, #4]
   11ecc:	strdeq	r0, [r8, #40]	; 0x28
   11ed0:	subeq	sp, fp, #28
   11ed4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ed8:	movw	r1, #24809	; 0x60e9
   11edc:	mov	r0, #0
   11ee0:	mov	r2, #5
   11ee4:	movt	r1, #1
   11ee8:	bl	10e4c <dcgettext@plt>
   11eec:	mov	r2, r0
   11ef0:	mov	r0, #0
   11ef4:	mov	r1, #0
   11ef8:	bl	10eb8 <error@plt>
   11efc:	ldr	r0, [sp, #8]
   11f00:	ldr	r1, [sp, #4]
   11f04:	strd	r0, [r8, #40]	; 0x28
   11f08:	mov	r0, #1
   11f0c:	bl	10f0c <exit@plt>
   11f10:	ldr	r1, [r8, #8]
   11f14:	mov	r0, #0
   11f18:	cmp	r1, #0
   11f1c:	beq	11f30 <__assert_fail@plt+0xf1c>
   11f20:	ldr	r2, [r8, #12]
   11f24:	add	r2, r2, r1, lsl #3
   11f28:	ldrd	r2, [r2, #-8]
   11f2c:	b	11f38 <__assert_fail@plt+0xf24>
   11f30:	mov	r2, #0
   11f34:	mov	r3, #0
   11f38:	ldr	r6, [sp, #8]
   11f3c:	subs	r5, r6, r2
   11f40:	ldr	r2, [sp, #4]
   11f44:	sbcs	r6, r2, r3
   11f48:	adc	r0, r0, #0
   11f4c:	rsbs	r0, r0, #1
   11f50:	ldr	r0, [r8, #16]
   11f54:	movwne	r6, #0
   11f58:	movwne	r5, #0
   11f5c:	cmp	r1, r0
   11f60:	bne	11f88 <__assert_fail@plt+0xf74>
   11f64:	ldr	r0, [r8, #12]
   11f68:	add	r1, r8, #16
   11f6c:	mov	r2, #8
   11f70:	mov	r4, ip
   11f74:	bl	15044 <__assert_fail@plt+0x4030>
   11f78:	str	r0, [r8, #12]
   11f7c:	mov	ip, r4
   11f80:	ldr	r1, [r8, #8]
   11f84:	b	11f8c <__assert_fail@plt+0xf78>
   11f88:	ldr	r0, [r8, #12]
   11f8c:	add	r2, r1, #1
   11f90:	str	r2, [r8, #8]
   11f94:	ldr	r2, [sp, #8]
   11f98:	str	r2, [r0, r1, lsl #3]!
   11f9c:	ldr	r1, [sp, #4]
   11fa0:	str	r1, [r0, #4]
   11fa4:	movw	r0, #29400	; 0x72d8
   11fa8:	movt	r0, #2
   11fac:	ldr	r0, [r0]
   11fb0:	subs	r0, r0, r5
   11fb4:	rscs	r0, r6, #0
   11fb8:	bcs	11ff8 <__assert_fail@plt+0xfe4>
   11fbc:	cmp	r6, #0
   11fc0:	movweq	r0, #29400	; 0x72d8
   11fc4:	movteq	r0, #2
   11fc8:	streq	r5, [r0]
   11fcc:	subeq	sp, fp, #28
   11fd0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fd4:	movw	r1, #24096	; 0x5e20
   11fd8:	mov	r0, #0
   11fdc:	mov	r2, #5
   11fe0:	movt	r1, #1
   11fe4:	bl	10e4c <dcgettext@plt>
   11fe8:	mov	r2, r0
   11fec:	mov	r0, #1
   11ff0:	mov	r1, #0
   11ff4:	bl	10eb8 <error@plt>
   11ff8:	tst	ip, #1
   11ffc:	subne	sp, fp, #28
   12000:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12004:	mov	r0, #1
   12008:	bl	10f0c <exit@plt>
   1200c:	movw	r1, #24237	; 0x5ead
   12010:	mov	r0, #0
   12014:	mov	r2, #5
   12018:	movt	r1, #1
   1201c:	bl	10e4c <dcgettext@plt>
   12020:	mov	r4, r0
   12024:	mov	r0, r5
   12028:	bl	147c0 <__assert_fail@plt+0x37ac>
   1202c:	mov	r3, r0
   12030:	mov	r0, #0
   12034:	mov	r1, #0
   12038:	mov	r2, r4
   1203c:	bl	10eb8 <error@plt>
   12040:	mov	r0, #1
   12044:	bl	10f0c <exit@plt>
   12048:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1204c:	add	fp, sp, #24
   12050:	movw	ip, #29024	; 0x7160
   12054:	movt	ip, #2
   12058:	ldr	r2, [ip, #8]
   1205c:	ldr	r9, [ip, #12]
   12060:	cmp	r2, #0
   12064:	beq	120a8 <__assert_fail@plt+0x1094>
   12068:	mov	r5, #0
   1206c:	mov	r4, r9
   12070:	mov	r3, r2
   12074:	mov	r7, #0
   12078:	ldr	r6, [r4]
   1207c:	ldr	r1, [r4, #4]
   12080:	orrs	r0, r6, r1
   12084:	beq	12130 <__assert_fail@plt+0x111c>
   12088:	subs	r0, r5, r6
   1208c:	sbcs	r0, r7, r1
   12090:	bcs	1213c <__assert_fail@plt+0x1128>
   12094:	add	r4, r4, #8
   12098:	subs	r3, r3, #1
   1209c:	mov	r5, r6
   120a0:	mov	r7, r1
   120a4:	bne	12078 <__assert_fail@plt+0x1064>
   120a8:	ldr	r3, [ip, #40]	; 0x28
   120ac:	ldr	r7, [ip, #44]	; 0x2c
   120b0:	ldr	r1, [ip, #32]
   120b4:	ldr	r5, [ip, #36]	; 0x24
   120b8:	orrs	r6, r3, r7
   120bc:	orrsne	r4, r1, r5
   120c0:	bne	12160 <__assert_fail@plt+0x114c>
   120c4:	cmp	r2, #0
   120c8:	beq	120f4 <__assert_fail@plt+0x10e0>
   120cc:	mov	r4, #0
   120d0:	cmp	r2, #1
   120d4:	bne	12124 <__assert_fail@plt+0x1110>
   120d8:	orr	r0, r1, r3
   120dc:	orr	r1, r5, r7
   120e0:	mov	r5, #0
   120e4:	orrs	r0, r0, r1
   120e8:	ldrdeq	r4, [r9]
   120ec:	strd	r4, [ip, #48]	; 0x30
   120f0:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   120f4:	orr	r0, r1, r5
   120f8:	cmp	r6, #0
   120fc:	mov	r5, #0
   12100:	movweq	r3, #8
   12104:	cmp	r0, #0
   12108:	movw	r0, #29400	; 0x72d8
   1210c:	movne	r3, r1
   12110:	movt	r0, #2
   12114:	mov	r4, r3
   12118:	str	r3, [r0]
   1211c:	strd	r4, [ip, #48]	; 0x30
   12120:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   12124:	mov	r5, #0
   12128:	strd	r4, [ip, #48]	; 0x30
   1212c:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   12130:	movw	r1, #24856	; 0x6118
   12134:	movt	r1, #1
   12138:	b	12144 <__assert_fail@plt+0x1130>
   1213c:	movw	r1, #24877	; 0x612d
   12140:	movt	r1, #1
   12144:	mov	r0, #0
   12148:	mov	r2, #5
   1214c:	bl	10e4c <dcgettext@plt>
   12150:	mov	r2, r0
   12154:	mov	r0, #1
   12158:	mov	r1, #0
   1215c:	bl	10eb8 <error@plt>
   12160:	movw	r1, #24905	; 0x6149
   12164:	movt	r1, #1
   12168:	b	12144 <__assert_fail@plt+0x1130>
   1216c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12170:	add	fp, sp, #24
   12174:	movw	ip, #29024	; 0x7160
   12178:	mov	r9, r0
   1217c:	mov	r0, #0
   12180:	mov	r8, r1
   12184:	movt	ip, #2
   12188:	strb	r0, [r3]
   1218c:	ldrd	r6, [ip, #48]	; 0x30
   12190:	orrs	r0, r6, r7
   12194:	bne	121e0 <__assert_fail@plt+0x11cc>
   12198:	ldr	r1, [ip, #8]
   1219c:	ldr	r0, [r2]
   121a0:	cmp	r0, r1
   121a4:	bcs	121d4 <__assert_fail@plt+0x11c0>
   121a8:	ldr	r7, [ip, #12]
   121ac:	add	r4, r7, r0, lsl #3
   121b0:	ldrd	r6, [r4]
   121b4:	subs	r5, r9, r6
   121b8:	sbcs	r5, r8, r7
   121bc:	bcc	12204 <__assert_fail@plt+0x11f0>
   121c0:	add	r0, r0, #1
   121c4:	add	r4, r4, #8
   121c8:	cmp	r0, r1
   121cc:	str	r0, [r2]
   121d0:	bcc	121b0 <__assert_fail@plt+0x119c>
   121d4:	ldrd	r6, [ip, #32]
   121d8:	orrs	r0, r6, r7
   121dc:	beq	12210 <__assert_fail@plt+0x11fc>
   121e0:	mov	r0, r9
   121e4:	mov	r1, r8
   121e8:	mov	r2, r6
   121ec:	mov	r3, r7
   121f0:	bl	15758 <__assert_fail@plt+0x4744>
   121f4:	adds	r0, r6, r9
   121f8:	adc	r1, r7, r8
   121fc:	subs	r6, r0, r2
   12200:	sbc	r7, r1, r3
   12204:	mov	r0, r6
   12208:	mov	r1, r7
   1220c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12210:	ldrd	r6, [ip, #40]	; 0x28
   12214:	orrs	r0, r6, r7
   12218:	beq	12234 <__assert_fail@plt+0x1220>
   1221c:	ldr	r0, [ip, #12]
   12220:	add	r0, r0, r1, lsl #3
   12224:	ldrd	r0, [r0, #-8]
   12228:	subs	r0, r9, r0
   1222c:	sbc	r1, r8, r1
   12230:	b	121e8 <__assert_fail@plt+0x11d4>
   12234:	mov	r0, #1
   12238:	mov	r6, #0
   1223c:	mov	r7, #0
   12240:	strb	r0, [r3]
   12244:	mov	r0, r6
   12248:	mov	r1, r7
   1224c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12250:	movw	r1, #29024	; 0x7160
   12254:	mov	r2, #0
   12258:	cmp	r0, #0
   1225c:	movt	r1, #2
   12260:	strb	r2, [r1]
   12264:	movw	r2, #28896	; 0x70e0
   12268:	movt	r2, #2
   1226c:	movne	r2, r0
   12270:	str	r2, [r1, #20]
   12274:	bx	lr
   12278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1227c:	add	fp, sp, #28
   12280:	sub	sp, sp, #4
   12284:	movw	r5, #29024	; 0x7160
   12288:	cmp	r0, #0
   1228c:	movt	r5, #2
   12290:	beq	1231c <__assert_fail@plt+0x1308>
   12294:	ldr	r7, [r5, #24]
   12298:	cmp	r7, #0
   1229c:	beq	1242c <__assert_fail@plt+0x1418>
   122a0:	mov	r4, r0
   122a4:	bl	10f30 <__errno_location@plt>
   122a8:	ldr	r1, [r4]
   122ac:	mov	r6, r0
   122b0:	ldr	r0, [r0]
   122b4:	lsl	r1, r1, #26
   122b8:	and	r8, r0, r1, asr #31
   122bc:	movw	r1, #25038	; 0x61ce
   122c0:	mov	r0, r7
   122c4:	movt	r1, #1
   122c8:	bl	10dec <strcmp@plt>
   122cc:	cmp	r0, #0
   122d0:	beq	12418 <__assert_fail@plt+0x1404>
   122d4:	mov	r0, r4
   122d8:	bl	12634 <__assert_fail@plt+0x1620>
   122dc:	cmp	r0, #0
   122e0:	ldrne	r8, [r6]
   122e4:	cmp	r8, #0
   122e8:	beq	1231c <__assert_fail@plt+0x1308>
   122ec:	ldr	r2, [r5, #24]
   122f0:	mov	r0, #0
   122f4:	mov	r1, #3
   122f8:	bl	14514 <__assert_fail@plt+0x3500>
   122fc:	movw	r2, #24277	; 0x5ed5
   12300:	mov	r3, r0
   12304:	mov	r0, #0
   12308:	mov	r1, r8
   1230c:	movt	r2, #1
   12310:	bl	10eb8 <error@plt>
   12314:	mov	r0, #1
   12318:	str	r0, [r5, #4]
   1231c:	ldr	r0, [r5, #20]
   12320:	add	r1, r0, #4
   12324:	str	r1, [r5, #20]
   12328:	ldr	r7, [r0]
   1232c:	cmp	r7, #0
   12330:	beq	123ec <__assert_fail@plt+0x13d8>
   12334:	movw	r9, #25038	; 0x61ce
   12338:	movw	sl, #24277	; 0x5ed5
   1233c:	mov	r8, #1
   12340:	movt	r9, #1
   12344:	movt	sl, #1
   12348:	mov	r0, r7
   1234c:	mov	r1, r9
   12350:	bl	10dec <strcmp@plt>
   12354:	cmp	r0, #0
   12358:	beq	1237c <__assert_fail@plt+0x1368>
   1235c:	movw	r1, #23940	; 0x5d84
   12360:	mov	r0, r7
   12364:	movt	r1, #1
   12368:	bl	10fd8 <fopen64@plt>
   1236c:	mov	r6, r0
   12370:	cmp	r6, #0
   12374:	beq	12394 <__assert_fail@plt+0x1380>
   12378:	b	123fc <__assert_fail@plt+0x13e8>
   1237c:	movw	r0, #29000	; 0x7148
   12380:	strb	r8, [r5]
   12384:	movt	r0, #2
   12388:	ldr	r6, [r0]
   1238c:	cmp	r6, #0
   12390:	bne	123fc <__assert_fail@plt+0x13e8>
   12394:	bl	10f30 <__errno_location@plt>
   12398:	ldr	r4, [r0]
   1239c:	mov	r0, #0
   123a0:	mov	r1, #3
   123a4:	mov	r2, r7
   123a8:	mov	r6, #0
   123ac:	bl	14514 <__assert_fail@plt+0x3500>
   123b0:	mov	r3, r0
   123b4:	mov	r0, #0
   123b8:	mov	r1, r4
   123bc:	mov	r2, sl
   123c0:	bl	10eb8 <error@plt>
   123c4:	str	r8, [r5, #4]
   123c8:	ldr	r0, [r5, #20]
   123cc:	add	r1, r0, #4
   123d0:	str	r1, [r5, #20]
   123d4:	ldr	r7, [r0]
   123d8:	cmp	r7, #0
   123dc:	bne	12348 <__assert_fail@plt+0x1334>
   123e0:	mov	r0, r6
   123e4:	sub	sp, fp, #28
   123e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123ec:	mov	r6, #0
   123f0:	mov	r0, r6
   123f4:	sub	sp, fp, #28
   123f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123fc:	mov	r0, r6
   12400:	mov	r1, #2
   12404:	str	r7, [r5, #24]
   12408:	bl	125f8 <__assert_fail@plt+0x15e4>
   1240c:	mov	r0, r6
   12410:	sub	sp, fp, #28
   12414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12418:	mov	r0, r4
   1241c:	bl	10fcc <clearerr_unlocked@plt>
   12420:	cmp	r8, #0
   12424:	bne	122ec <__assert_fail@plt+0x12d8>
   12428:	b	1231c <__assert_fail@plt+0x1308>
   1242c:	movw	r0, #24280	; 0x5ed8
   12430:	movw	r1, #24290	; 0x5ee2
   12434:	movw	r3, #24310	; 0x5ef6
   12438:	mov	r2, #340	; 0x154
   1243c:	movt	r0, #1
   12440:	movt	r1, #1
   12444:	movt	r3, #1
   12448:	bl	11014 <__assert_fail@plt>
   1244c:	push	{fp, lr}
   12450:	mov	fp, sp
   12454:	movw	r0, #29024	; 0x7160
   12458:	movt	r0, #2
   1245c:	ldrb	r0, [r0]
   12460:	cmp	r0, #1
   12464:	popne	{fp, pc}
   12468:	movw	r0, #29000	; 0x7148
   1246c:	movt	r0, #2
   12470:	ldr	r0, [r0]
   12474:	bl	12634 <__assert_fail@plt+0x1620>
   12478:	cmp	r0, #0
   1247c:	bne	12484 <__assert_fail@plt+0x1470>
   12480:	pop	{fp, pc}
   12484:	bl	10f30 <__errno_location@plt>
   12488:	ldr	r1, [r0]
   1248c:	movw	r2, #25038	; 0x61ce
   12490:	mov	r0, #1
   12494:	movt	r2, #1
   12498:	bl	10eb8 <error@plt>
   1249c:	push	{r4, sl, fp, lr}
   124a0:	add	fp, sp, #8
   124a4:	movw	r1, #24334	; 0x5f0e
   124a8:	mov	r0, #0
   124ac:	mov	r2, #5
   124b0:	movt	r1, #1
   124b4:	bl	10e4c <dcgettext@plt>
   124b8:	movw	r4, #29004	; 0x714c
   124bc:	movt	r4, #2
   124c0:	ldr	r1, [r4]
   124c4:	bl	10dd4 <fputs_unlocked@plt>
   124c8:	movw	r1, #24397	; 0x5f4d
   124cc:	mov	r0, #0
   124d0:	mov	r2, #5
   124d4:	movt	r1, #1
   124d8:	bl	10e4c <dcgettext@plt>
   124dc:	ldr	r1, [r4]
   124e0:	pop	{r4, sl, fp, lr}
   124e4:	b	10dd4 <fputs_unlocked@plt>
   124e8:	movw	r1, #29080	; 0x7198
   124ec:	movt	r1, #2
   124f0:	str	r0, [r1, #4]
   124f4:	bx	lr
   124f8:	movw	r1, #29080	; 0x7198
   124fc:	movt	r1, #2
   12500:	strb	r0, [r1]
   12504:	bx	lr
   12508:	push	{r4, r5, r6, sl, fp, lr}
   1250c:	add	fp, sp, #16
   12510:	sub	sp, sp, #8
   12514:	movw	r0, #29004	; 0x714c
   12518:	movt	r0, #2
   1251c:	ldr	r0, [r0]
   12520:	bl	154f0 <__assert_fail@plt+0x44dc>
   12524:	cmp	r0, #0
   12528:	beq	12550 <__assert_fail@plt+0x153c>
   1252c:	movw	r5, #29080	; 0x7198
   12530:	movt	r5, #2
   12534:	ldrb	r0, [r5]
   12538:	cmp	r0, #0
   1253c:	beq	1257c <__assert_fail@plt+0x1568>
   12540:	bl	10f30 <__errno_location@plt>
   12544:	ldr	r0, [r0]
   12548:	cmp	r0, #32
   1254c:	bne	1257c <__assert_fail@plt+0x1568>
   12550:	movw	r0, #28992	; 0x7140
   12554:	movt	r0, #2
   12558:	ldr	r0, [r0]
   1255c:	bl	154f0 <__assert_fail@plt+0x44dc>
   12560:	cmp	r0, #0
   12564:	subeq	sp, fp, #16
   12568:	popeq	{r4, r5, r6, sl, fp, pc}
   1256c:	movw	r0, #28908	; 0x70ec
   12570:	movt	r0, #2
   12574:	ldr	r0, [r0]
   12578:	bl	10e1c <_exit@plt>
   1257c:	movw	r1, #23930	; 0x5d7a
   12580:	mov	r0, #0
   12584:	mov	r2, #5
   12588:	movt	r1, #1
   1258c:	bl	10e4c <dcgettext@plt>
   12590:	ldr	r6, [r5, #4]
   12594:	mov	r4, r0
   12598:	bl	10f30 <__errno_location@plt>
   1259c:	ldr	r5, [r0]
   125a0:	cmp	r6, #0
   125a4:	bne	125c0 <__assert_fail@plt+0x15ac>
   125a8:	movw	r2, #24277	; 0x5ed5
   125ac:	mov	r0, #0
   125b0:	mov	r1, r5
   125b4:	mov	r3, r4
   125b8:	movt	r2, #1
   125bc:	b	125e0 <__assert_fail@plt+0x15cc>
   125c0:	mov	r0, r6
   125c4:	bl	14438 <__assert_fail@plt+0x3424>
   125c8:	movw	r2, #24965	; 0x6185
   125cc:	mov	r3, r0
   125d0:	str	r4, [sp]
   125d4:	mov	r0, #0
   125d8:	mov	r1, r5
   125dc:	movt	r2, #1
   125e0:	bl	10eb8 <error@plt>
   125e4:	movw	r0, #28908	; 0x70ec
   125e8:	movt	r0, #2
   125ec:	ldr	r0, [r0]
   125f0:	bl	10e1c <_exit@plt>
   125f4:	b	10df8 <posix_fadvise64@plt>
   125f8:	cmp	r0, #0
   125fc:	bxeq	lr
   12600:	push	{r4, sl, fp, lr}
   12604:	add	fp, sp, #8
   12608:	sub	sp, sp, #16
   1260c:	mov	r4, r1
   12610:	bl	10f60 <fileno@plt>
   12614:	mov	r1, #0
   12618:	mov	r2, #0
   1261c:	mov	r3, #0
   12620:	str	r1, [sp]
   12624:	stmib	sp, {r1, r4}
   12628:	bl	10df8 <posix_fadvise64@plt>
   1262c:	sub	sp, fp, #8
   12630:	pop	{r4, sl, fp, pc}
   12634:	push	{r4, r5, r6, sl, fp, lr}
   12638:	add	fp, sp, #16
   1263c:	sub	sp, sp, #8
   12640:	mov	r4, r0
   12644:	bl	10f60 <fileno@plt>
   12648:	cmn	r0, #1
   1264c:	ble	126c0 <__assert_fail@plt+0x16ac>
   12650:	mov	r0, r4
   12654:	bl	10edc <__freading@plt>
   12658:	cmp	r0, #0
   1265c:	beq	12688 <__assert_fail@plt+0x1674>
   12660:	mov	r0, r4
   12664:	bl	10f60 <fileno@plt>
   12668:	mov	r1, #1
   1266c:	mov	r2, #0
   12670:	mov	r3, #0
   12674:	str	r1, [sp]
   12678:	bl	10e88 <lseek64@plt>
   1267c:	and	r0, r0, r1
   12680:	cmn	r0, #1
   12684:	beq	126c0 <__assert_fail@plt+0x16ac>
   12688:	mov	r0, r4
   1268c:	bl	126d0 <__assert_fail@plt+0x16bc>
   12690:	cmp	r0, #0
   12694:	beq	126c0 <__assert_fail@plt+0x16ac>
   12698:	bl	10f30 <__errno_location@plt>
   1269c:	ldr	r6, [r0]
   126a0:	mov	r5, r0
   126a4:	mov	r0, r4
   126a8:	bl	10f78 <fclose@plt>
   126ac:	cmp	r6, #0
   126b0:	strne	r6, [r5]
   126b4:	mvnne	r0, #0
   126b8:	sub	sp, fp, #16
   126bc:	pop	{r4, r5, r6, sl, fp, pc}
   126c0:	mov	r0, r4
   126c4:	sub	sp, fp, #16
   126c8:	pop	{r4, r5, r6, sl, fp, lr}
   126cc:	b	10f78 <fclose@plt>
   126d0:	push	{r4, sl, fp, lr}
   126d4:	add	fp, sp, #8
   126d8:	sub	sp, sp, #8
   126dc:	mov	r4, r0
   126e0:	cmp	r0, #0
   126e4:	beq	1271c <__assert_fail@plt+0x1708>
   126e8:	mov	r0, r4
   126ec:	bl	10edc <__freading@plt>
   126f0:	cmp	r0, #0
   126f4:	beq	1271c <__assert_fail@plt+0x1708>
   126f8:	ldrb	r0, [r4, #1]
   126fc:	tst	r0, #1
   12700:	beq	1271c <__assert_fail@plt+0x1708>
   12704:	mov	r0, #1
   12708:	mov	r2, #0
   1270c:	mov	r3, #0
   12710:	str	r0, [sp]
   12714:	mov	r0, r4
   12718:	bl	12754 <__assert_fail@plt+0x1740>
   1271c:	mov	r0, r4
   12720:	sub	sp, fp, #8
   12724:	pop	{r4, sl, fp, lr}
   12728:	b	10e04 <fflush@plt>
   1272c:	push	{r4, r5, r6, sl, fp, lr}
   12730:	add	fp, sp, #16
   12734:	mov	r4, r0
   12738:	bl	10f30 <__errno_location@plt>
   1273c:	ldr	r6, [r0]
   12740:	mov	r5, r0
   12744:	mov	r0, r4
   12748:	bl	10e10 <free@plt>
   1274c:	str	r6, [r5]
   12750:	pop	{r4, r5, r6, sl, fp, pc}
   12754:	push	{r4, r5, r6, r7, fp, lr}
   12758:	add	fp, sp, #16
   1275c:	sub	sp, sp, #8
   12760:	mov	r4, r0
   12764:	ldr	r0, [r0, #4]
   12768:	mov	r5, r3
   1276c:	mov	r6, r2
   12770:	ldr	r1, [r4, #8]
   12774:	cmp	r1, r0
   12778:	bne	12794 <__assert_fail@plt+0x1780>
   1277c:	ldrd	r0, [r4, #16]
   12780:	cmp	r1, r0
   12784:	bne	12794 <__assert_fail@plt+0x1780>
   12788:	ldr	r0, [r4, #36]	; 0x24
   1278c:	cmp	r0, #0
   12790:	beq	127ac <__assert_fail@plt+0x1798>
   12794:	mov	r0, r4
   12798:	mov	r2, r6
   1279c:	mov	r3, r5
   127a0:	sub	sp, fp, #16
   127a4:	pop	{r4, r5, r6, r7, fp, lr}
   127a8:	b	10f84 <fseeko64@plt>
   127ac:	ldr	r7, [fp, #8]
   127b0:	mov	r0, r4
   127b4:	bl	10f60 <fileno@plt>
   127b8:	mov	r2, r6
   127bc:	mov	r3, r5
   127c0:	str	r7, [sp]
   127c4:	bl	10e88 <lseek64@plt>
   127c8:	and	r2, r0, r1
   127cc:	cmn	r2, #1
   127d0:	beq	127f0 <__assert_fail@plt+0x17dc>
   127d4:	strd	r0, [r4, #80]	; 0x50
   127d8:	ldr	r0, [r4]
   127dc:	bic	r0, r0, #16
   127e0:	str	r0, [r4]
   127e4:	mov	r0, #0
   127e8:	sub	sp, fp, #16
   127ec:	pop	{r4, r5, r6, r7, fp, pc}
   127f0:	mvn	r0, #0
   127f4:	sub	sp, fp, #16
   127f8:	pop	{r4, r5, r6, r7, fp, pc}
   127fc:	push	{r4, r5, fp, lr}
   12800:	add	fp, sp, #8
   12804:	cmp	r0, #0
   12808:	beq	1289c <__assert_fail@plt+0x1888>
   1280c:	mov	r1, #47	; 0x2f
   12810:	mov	r4, r0
   12814:	bl	10fb4 <strrchr@plt>
   12818:	cmp	r0, #0
   1281c:	mov	r5, r4
   12820:	addne	r5, r0, #1
   12824:	sub	r0, r5, r4
   12828:	cmp	r0, #7
   1282c:	blt	12880 <__assert_fail@plt+0x186c>
   12830:	movw	r1, #25028	; 0x61c4
   12834:	sub	r0, r5, #7
   12838:	mov	r2, #7
   1283c:	movt	r1, #1
   12840:	bl	10ff0 <strncmp@plt>
   12844:	cmp	r0, #0
   12848:	bne	12880 <__assert_fail@plt+0x186c>
   1284c:	movw	r1, #25036	; 0x61cc
   12850:	mov	r0, r5
   12854:	mov	r2, #3
   12858:	movt	r1, #1
   1285c:	bl	10ff0 <strncmp@plt>
   12860:	cmp	r0, #0
   12864:	beq	12870 <__assert_fail@plt+0x185c>
   12868:	mov	r4, r5
   1286c:	b	12880 <__assert_fail@plt+0x186c>
   12870:	movw	r0, #28976	; 0x7130
   12874:	add	r4, r5, #3
   12878:	movt	r0, #2
   1287c:	str	r4, [r0]
   12880:	movw	r0, #28980	; 0x7134
   12884:	movt	r0, #2
   12888:	str	r4, [r0]
   1288c:	movw	r0, #29088	; 0x71a0
   12890:	movt	r0, #2
   12894:	str	r4, [r0]
   12898:	pop	{r4, r5, fp, pc}
   1289c:	movw	r0, #28992	; 0x7140
   128a0:	mov	r1, #55	; 0x37
   128a4:	mov	r2, #1
   128a8:	movt	r0, #2
   128ac:	ldr	r3, [r0]
   128b0:	movw	r0, #24972	; 0x618c
   128b4:	movt	r0, #1
   128b8:	bl	10e7c <fwrite@plt>
   128bc:	bl	10ffc <abort@plt>
   128c0:	push	{r4, r5, r6, sl, fp, lr}
   128c4:	add	fp, sp, #16
   128c8:	mov	r4, r0
   128cc:	movw	r0, #29096	; 0x71a8
   128d0:	movt	r0, #2
   128d4:	cmp	r4, #0
   128d8:	moveq	r4, r0
   128dc:	bl	10f30 <__errno_location@plt>
   128e0:	ldr	r6, [r0]
   128e4:	mov	r5, r0
   128e8:	mov	r0, r4
   128ec:	mov	r1, #48	; 0x30
   128f0:	bl	152f8 <__assert_fail@plt+0x42e4>
   128f4:	str	r6, [r5]
   128f8:	pop	{r4, r5, r6, sl, fp, pc}
   128fc:	movw	r1, #29096	; 0x71a8
   12900:	cmp	r0, #0
   12904:	movt	r1, #2
   12908:	movne	r1, r0
   1290c:	ldr	r0, [r1]
   12910:	bx	lr
   12914:	movw	r2, #29096	; 0x71a8
   12918:	cmp	r0, #0
   1291c:	movt	r2, #2
   12920:	movne	r2, r0
   12924:	str	r1, [r2]
   12928:	bx	lr
   1292c:	movw	r3, #29096	; 0x71a8
   12930:	cmp	r0, #0
   12934:	and	r2, r2, #1
   12938:	movt	r3, #2
   1293c:	movne	r3, r0
   12940:	ubfx	r0, r1, #5, #3
   12944:	and	r1, r1, #31
   12948:	add	ip, r3, r0, lsl #2
   1294c:	mov	r0, #1
   12950:	ldr	r3, [ip, #8]
   12954:	and	r0, r0, r3, lsr r1
   12958:	eor	r2, r0, r2
   1295c:	eor	r1, r3, r2, lsl r1
   12960:	str	r1, [ip, #8]
   12964:	bx	lr
   12968:	movw	r2, #29096	; 0x71a8
   1296c:	cmp	r0, #0
   12970:	movt	r2, #2
   12974:	movne	r2, r0
   12978:	ldr	r0, [r2, #4]
   1297c:	str	r1, [r2, #4]
   12980:	bx	lr
   12984:	push	{fp, lr}
   12988:	mov	fp, sp
   1298c:	movw	r3, #29096	; 0x71a8
   12990:	cmp	r0, #0
   12994:	movt	r3, #2
   12998:	movne	r3, r0
   1299c:	cmp	r1, #0
   129a0:	mov	r0, #10
   129a4:	cmpne	r2, #0
   129a8:	str	r0, [r3]
   129ac:	bne	129b4 <__assert_fail@plt+0x19a0>
   129b0:	bl	10ffc <abort@plt>
   129b4:	str	r1, [r3, #40]	; 0x28
   129b8:	str	r2, [r3, #44]	; 0x2c
   129bc:	pop	{fp, pc}
   129c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c4:	add	fp, sp, #28
   129c8:	sub	sp, sp, #20
   129cc:	mov	r7, r0
   129d0:	ldr	r0, [fp, #8]
   129d4:	movw	r5, #29096	; 0x71a8
   129d8:	mov	r8, r3
   129dc:	mov	r9, r2
   129e0:	mov	sl, r1
   129e4:	movt	r5, #2
   129e8:	cmp	r0, #0
   129ec:	movne	r5, r0
   129f0:	bl	10f30 <__errno_location@plt>
   129f4:	ldr	r2, [r5, #40]	; 0x28
   129f8:	ldr	r3, [r5, #44]	; 0x2c
   129fc:	mov	r4, r0
   12a00:	ldm	r5, {r0, r1}
   12a04:	add	r5, r5, #8
   12a08:	ldr	r6, [r4]
   12a0c:	stm	sp, {r0, r1, r5}
   12a10:	mov	r0, r7
   12a14:	mov	r1, sl
   12a18:	str	r2, [sp, #12]
   12a1c:	str	r3, [sp, #16]
   12a20:	mov	r2, r9
   12a24:	mov	r3, r8
   12a28:	bl	12a38 <__assert_fail@plt+0x1a24>
   12a2c:	str	r6, [r4]
   12a30:	sub	sp, fp, #28
   12a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a3c:	add	fp, sp, #28
   12a40:	sub	sp, sp, #156	; 0x9c
   12a44:	str	r0, [fp, #-84]	; 0xffffffac
   12a48:	add	r0, r2, #1
   12a4c:	mov	r6, r1
   12a50:	mov	r7, r3
   12a54:	str	r2, [fp, #-80]	; 0xffffffb0
   12a58:	str	r0, [sp, #80]	; 0x50
   12a5c:	ldr	r0, [fp, #12]
   12a60:	and	r1, r0, #1
   12a64:	str	r1, [sp, #36]	; 0x24
   12a68:	and	r1, r0, #4
   12a6c:	str	r1, [sp, #32]
   12a70:	ubfx	r8, r0, #1, #1
   12a74:	bl	10e94 <__ctype_get_mb_cur_max@plt>
   12a78:	str	r0, [sp, #40]	; 0x28
   12a7c:	ldr	r0, [fp, #24]
   12a80:	ldr	r4, [fp, #8]
   12a84:	mov	r1, #0
   12a88:	str	r1, [fp, #-52]	; 0xffffffcc
   12a8c:	mov	r1, #0
   12a90:	str	r1, [sp, #60]	; 0x3c
   12a94:	mov	r1, #1
   12a98:	str	r1, [sp, #84]	; 0x54
   12a9c:	str	r0, [sp, #76]	; 0x4c
   12aa0:	ldr	r0, [fp, #20]
   12aa4:	str	r0, [sp, #72]	; 0x48
   12aa8:	mov	r0, #0
   12aac:	str	r0, [sp, #56]	; 0x38
   12ab0:	mov	r0, #0
   12ab4:	str	r0, [fp, #-88]	; 0xffffffa8
   12ab8:	mov	r0, #0
   12abc:	str	r0, [fp, #-72]	; 0xffffffb8
   12ac0:	mov	r0, #0
   12ac4:	cmp	r4, #10
   12ac8:	bhi	13de4 <__assert_fail@plt+0x2dd0>
   12acc:	add	r1, pc, #24
   12ad0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ad4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12ad8:	mov	r5, r6
   12adc:	mov	r9, #0
   12ae0:	mov	r2, #1
   12ae4:	mov	r3, #0
   12ae8:	ldr	pc, [r1, r4, lsl #2]
   12aec:			; <UNDEFINED> instruction: 0x00012bb4
   12af0:	strdeq	r2, [r1], -r0
   12af4:	andeq	r2, r1, r4, asr #23
   12af8:	andeq	r2, r1, ip, lsr #23
   12afc:	andeq	r2, r1, r4, ror #23
   12b00:	andeq	r2, r1, r8, asr #24
   12b04:	ldrdeq	r2, [r1], -r4
   12b08:	andeq	r2, r1, r0, asr #29
   12b0c:	andeq	r2, r1, r8, lsl fp
   12b10:	andeq	r2, r1, r8, lsl fp
   12b14:	andeq	r2, r1, r0, asr sp
   12b18:	movw	r6, #25118	; 0x621e
   12b1c:	mov	r0, #0
   12b20:	mov	r2, #5
   12b24:	movt	r6, #1
   12b28:	mov	r1, r6
   12b2c:	bl	10e4c <dcgettext@plt>
   12b30:	cmp	r0, r6
   12b34:	str	r0, [sp, #72]	; 0x48
   12b38:	bne	12d28 <__assert_fail@plt+0x1d14>
   12b3c:	bl	15574 <__assert_fail@plt+0x4560>
   12b40:	ldrb	r1, [r0]
   12b44:	and	r1, r1, #223	; 0xdf
   12b48:	cmp	r1, #71	; 0x47
   12b4c:	beq	12ca8 <__assert_fail@plt+0x1c94>
   12b50:	cmp	r1, #85	; 0x55
   12b54:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12b58:	ldrb	r1, [r0, #1]
   12b5c:	and	r1, r1, #223	; 0xdf
   12b60:	cmp	r1, #84	; 0x54
   12b64:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12b68:	ldrb	r1, [r0, #2]
   12b6c:	and	r1, r1, #223	; 0xdf
   12b70:	cmp	r1, #70	; 0x46
   12b74:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12b78:	ldrb	r1, [r0, #3]
   12b7c:	cmp	r1, #45	; 0x2d
   12b80:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12b84:	ldrb	r1, [r0, #4]
   12b88:	cmp	r1, #56	; 0x38
   12b8c:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12b90:	ldrb	r0, [r0, #5]
   12b94:	cmp	r0, #0
   12b98:	movw	r0, #25120	; 0x6220
   12b9c:	movt	r0, #1
   12ba0:	str	r0, [sp, #72]	; 0x48
   12ba4:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12ba8:	b	12d28 <__assert_fail@plt+0x1d14>
   12bac:	mov	r0, #1
   12bb0:	b	12bf0 <__assert_fail@plt+0x1bdc>
   12bb4:	mov	r4, #0
   12bb8:	mov	r9, #0
   12bbc:	mov	r2, r0
   12bc0:	b	12c40 <__assert_fail@plt+0x1c2c>
   12bc4:	tst	r8, #1
   12bc8:	bne	12bf0 <__assert_fail@plt+0x1bdc>
   12bcc:	mov	r2, r0
   12bd0:	b	12c18 <__assert_fail@plt+0x1c04>
   12bd4:	mov	r0, #1
   12bd8:	mov	r9, #0
   12bdc:	mov	r4, #5
   12be0:	b	12c5c <__assert_fail@plt+0x1c48>
   12be4:	mov	r2, #1
   12be8:	tst	r8, #1
   12bec:	beq	12c18 <__assert_fail@plt+0x1c04>
   12bf0:	mov	r1, #1
   12bf4:	mov	r9, #0
   12bf8:	mov	r4, #2
   12bfc:	mov	r2, r0
   12c00:	mov	r3, #1
   12c04:	str	r1, [fp, #-72]	; 0xffffffb8
   12c08:	movw	r1, #24948	; 0x6174
   12c0c:	movt	r1, #1
   12c10:	str	r1, [fp, #-88]	; 0xffffffa8
   12c14:	b	12ec0 <__assert_fail@plt+0x1eac>
   12c18:	cmp	r5, #0
   12c1c:	mov	r9, #1
   12c20:	mov	r4, #2
   12c24:	movne	r0, #39	; 0x27
   12c28:	strbne	r0, [ip]
   12c2c:	movw	r0, #24948	; 0x6174
   12c30:	movt	r0, #1
   12c34:	str	r0, [fp, #-88]	; 0xffffffa8
   12c38:	mov	r0, #1
   12c3c:	str	r0, [fp, #-72]	; 0xffffffb8
   12c40:	mov	r3, #0
   12c44:	b	12ec0 <__assert_fail@plt+0x1eac>
   12c48:	mov	r4, #5
   12c4c:	tst	r8, #1
   12c50:	beq	12c78 <__assert_fail@plt+0x1c64>
   12c54:	mov	r0, #1
   12c58:	mov	r9, #0
   12c5c:	str	r0, [fp, #-72]	; 0xffffffb8
   12c60:	movw	r0, #25116	; 0x621c
   12c64:	mov	r2, #1
   12c68:	mov	r3, #1
   12c6c:	movt	r0, #1
   12c70:	str	r0, [fp, #-88]	; 0xffffffa8
   12c74:	b	12ec0 <__assert_fail@plt+0x1eac>
   12c78:	cmp	r5, #0
   12c7c:	mov	r3, #0
   12c80:	mov	r9, #1
   12c84:	mov	r2, #1
   12c88:	movne	r0, #34	; 0x22
   12c8c:	strbne	r0, [ip]
   12c90:	movw	r0, #25116	; 0x621c
   12c94:	movt	r0, #1
   12c98:	str	r0, [fp, #-88]	; 0xffffffa8
   12c9c:	mov	r0, #1
   12ca0:	str	r0, [fp, #-72]	; 0xffffffb8
   12ca4:	b	12ec0 <__assert_fail@plt+0x1eac>
   12ca8:	ldrb	r1, [r0, #1]
   12cac:	and	r1, r1, #223	; 0xdf
   12cb0:	cmp	r1, #66	; 0x42
   12cb4:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12cb8:	ldrb	r1, [r0, #2]
   12cbc:	cmp	r1, #49	; 0x31
   12cc0:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12cc4:	ldrb	r1, [r0, #3]
   12cc8:	cmp	r1, #56	; 0x38
   12ccc:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12cd0:	ldrb	r1, [r0, #4]
   12cd4:	cmp	r1, #48	; 0x30
   12cd8:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12cdc:	ldrb	r1, [r0, #5]
   12ce0:	cmp	r1, #51	; 0x33
   12ce4:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12ce8:	ldrb	r1, [r0, #6]
   12cec:	cmp	r1, #48	; 0x30
   12cf0:	bne	12d0c <__assert_fail@plt+0x1cf8>
   12cf4:	ldrb	r0, [r0, #7]
   12cf8:	cmp	r0, #0
   12cfc:	movw	r0, #25128	; 0x6228
   12d00:	movt	r0, #1
   12d04:	str	r0, [sp, #72]	; 0x48
   12d08:	beq	12d28 <__assert_fail@plt+0x1d14>
   12d0c:	movw	r1, #25116	; 0x621c
   12d10:	movw	r0, #24948	; 0x6174
   12d14:	cmp	r4, #9
   12d18:	movt	r1, #1
   12d1c:	movt	r0, #1
   12d20:	moveq	r0, r1
   12d24:	str	r0, [sp, #72]	; 0x48
   12d28:	movw	r6, #24948	; 0x6174
   12d2c:	mov	r0, #0
   12d30:	mov	r2, #5
   12d34:	movt	r6, #1
   12d38:	mov	r1, r6
   12d3c:	bl	10e4c <dcgettext@plt>
   12d40:	cmp	r0, r6
   12d44:	str	r0, [sp, #76]	; 0x4c
   12d48:	beq	12d94 <__assert_fail@plt+0x1d80>
   12d4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d50:	mov	r9, #0
   12d54:	tst	r8, #1
   12d58:	bne	12e9c <__assert_fail@plt+0x1e88>
   12d5c:	ldr	r0, [sp, #72]	; 0x48
   12d60:	ldrb	r0, [r0]
   12d64:	cmp	r0, #0
   12d68:	beq	12e9c <__assert_fail@plt+0x1e88>
   12d6c:	ldr	r1, [sp, #72]	; 0x48
   12d70:	mov	r9, #0
   12d74:	add	r1, r1, #1
   12d78:	cmp	r9, r5
   12d7c:	strbcc	r0, [ip, r9]
   12d80:	ldrb	r0, [r1, r9]
   12d84:	add	r9, r9, #1
   12d88:	cmp	r0, #0
   12d8c:	bne	12d78 <__assert_fail@plt+0x1d64>
   12d90:	b	12e9c <__assert_fail@plt+0x1e88>
   12d94:	bl	15574 <__assert_fail@plt+0x4560>
   12d98:	ldrb	r1, [r0]
   12d9c:	and	r1, r1, #223	; 0xdf
   12da0:	cmp	r1, #71	; 0x47
   12da4:	beq	12e14 <__assert_fail@plt+0x1e00>
   12da8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12dac:	cmp	r1, #85	; 0x55
   12db0:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12db4:	ldrb	r1, [r0, #1]
   12db8:	and	r1, r1, #223	; 0xdf
   12dbc:	cmp	r1, #84	; 0x54
   12dc0:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12dc4:	ldrb	r1, [r0, #2]
   12dc8:	and	r1, r1, #223	; 0xdf
   12dcc:	cmp	r1, #70	; 0x46
   12dd0:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12dd4:	ldrb	r1, [r0, #3]
   12dd8:	cmp	r1, #45	; 0x2d
   12ddc:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12de0:	ldrb	r1, [r0, #4]
   12de4:	cmp	r1, #56	; 0x38
   12de8:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12dec:	ldrb	r0, [r0, #5]
   12df0:	cmp	r0, #0
   12df4:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12df8:	movw	r0, #25124	; 0x6224
   12dfc:	movt	r0, #1
   12e00:	str	r0, [sp, #76]	; 0x4c
   12e04:	mov	r9, #0
   12e08:	tst	r8, #1
   12e0c:	beq	12d5c <__assert_fail@plt+0x1d48>
   12e10:	b	12e9c <__assert_fail@plt+0x1e88>
   12e14:	ldrb	r1, [r0, #1]
   12e18:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e1c:	and	r1, r1, #223	; 0xdf
   12e20:	cmp	r1, #66	; 0x42
   12e24:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12e28:	ldrb	r1, [r0, #2]
   12e2c:	cmp	r1, #49	; 0x31
   12e30:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12e34:	ldrb	r1, [r0, #3]
   12e38:	cmp	r1, #56	; 0x38
   12e3c:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12e40:	ldrb	r1, [r0, #4]
   12e44:	cmp	r1, #48	; 0x30
   12e48:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12e4c:	ldrb	r1, [r0, #5]
   12e50:	cmp	r1, #51	; 0x33
   12e54:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12e58:	ldrb	r1, [r0, #6]
   12e5c:	cmp	r1, #48	; 0x30
   12e60:	bne	12e70 <__assert_fail@plt+0x1e5c>
   12e64:	ldrb	r0, [r0, #7]
   12e68:	cmp	r0, #0
   12e6c:	beq	13c84 <__assert_fail@plt+0x2c70>
   12e70:	movw	r0, #24948	; 0x6174
   12e74:	cmp	r4, #9
   12e78:	movt	r0, #1
   12e7c:	mov	r1, r0
   12e80:	movw	r0, #25116	; 0x621c
   12e84:	movt	r0, #1
   12e88:	moveq	r1, r0
   12e8c:	str	r1, [sp, #76]	; 0x4c
   12e90:	mov	r9, #0
   12e94:	tst	r8, #1
   12e98:	beq	12d5c <__assert_fail@plt+0x1d48>
   12e9c:	ldr	r6, [sp, #76]	; 0x4c
   12ea0:	mov	r0, r6
   12ea4:	bl	10f24 <strlen@plt>
   12ea8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12eac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12eb0:	str	r0, [fp, #-72]	; 0xffffffb8
   12eb4:	str	r6, [fp, #-88]	; 0xffffffa8
   12eb8:	mov	r2, #1
   12ebc:	mov	r3, r8
   12ec0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ec4:	str	r4, [fp, #-64]	; 0xffffffc0
   12ec8:	mov	sl, #0
   12ecc:	str	r3, [fp, #-76]	; 0xffffffb4
   12ed0:	str	r2, [sp, #88]	; 0x58
   12ed4:	cmp	r0, #0
   12ed8:	movwne	r0, #1
   12edc:	and	r1, r0, r3
   12ee0:	and	r1, r2, r1
   12ee4:	str	r1, [sp, #48]	; 0x30
   12ee8:	sub	r1, r4, #2
   12eec:	clz	r1, r1
   12ef0:	lsr	r1, r1, #5
   12ef4:	and	r1, r1, r3
   12ef8:	str	r1, [sp, #44]	; 0x2c
   12efc:	subs	r1, r4, #2
   12f00:	eor	r4, r3, #1
   12f04:	movwne	r1, #1
   12f08:	str	r4, [sp, #92]	; 0x5c
   12f0c:	orr	r4, r1, r4
   12f10:	and	r1, r1, r2
   12f14:	and	r0, r0, r1
   12f18:	str	r4, [sp, #64]	; 0x40
   12f1c:	ldr	r4, [sp, #84]	; 0x54
   12f20:	str	r0, [fp, #-60]	; 0xffffffc4
   12f24:	orr	r0, r1, r3
   12f28:	ldr	r1, [fp, #16]
   12f2c:	eor	r0, r0, #1
   12f30:	clz	r1, r1
   12f34:	lsr	r1, r1, #5
   12f38:	orr	r0, r1, r0
   12f3c:	str	r0, [fp, #-68]	; 0xffffffbc
   12f40:	eor	r0, r2, #1
   12f44:	str	r0, [sp, #52]	; 0x34
   12f48:	cmn	r7, #1
   12f4c:	beq	12f5c <__assert_fail@plt+0x1f48>
   12f50:	cmp	sl, r7
   12f54:	bne	12f68 <__assert_fail@plt+0x1f54>
   12f58:	b	13bfc <__assert_fail@plt+0x2be8>
   12f5c:	ldrb	r0, [lr, sl]
   12f60:	cmp	r0, #0
   12f64:	beq	13c04 <__assert_fail@plt+0x2bf0>
   12f68:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12f6c:	cmp	r0, #0
   12f70:	beq	12fd0 <__assert_fail@plt+0x1fbc>
   12f74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f78:	mov	r6, r5
   12f7c:	add	r5, sl, r0
   12f80:	cmp	r0, #2
   12f84:	bcc	12ff0 <__assert_fail@plt+0x1fdc>
   12f88:	mov	r0, #0
   12f8c:	cmn	r7, #1
   12f90:	str	r0, [fp, #-56]	; 0xffffffc8
   12f94:	bne	12fac <__assert_fail@plt+0x1f98>
   12f98:	mov	r0, lr
   12f9c:	bl	10f24 <strlen@plt>
   12fa0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12fa4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fa8:	mov	r7, r0
   12fac:	cmp	r5, r7
   12fb0:	bls	13000 <__assert_fail@plt+0x1fec>
   12fb4:	mov	r0, #0
   12fb8:	mov	r5, r6
   12fbc:	str	r0, [fp, #-48]	; 0xffffffd0
   12fc0:	ldrb	r6, [lr, sl]
   12fc4:	cmp	r6, #126	; 0x7e
   12fc8:	bls	13050 <__assert_fail@plt+0x203c>
   12fcc:	b	135ac <__assert_fail@plt+0x2598>
   12fd0:	mov	r0, #0
   12fd4:	str	r0, [fp, #-56]	; 0xffffffc8
   12fd8:	mov	r0, #0
   12fdc:	str	r0, [fp, #-48]	; 0xffffffd0
   12fe0:	ldrb	r6, [lr, sl]
   12fe4:	cmp	r6, #126	; 0x7e
   12fe8:	bls	13050 <__assert_fail@plt+0x203c>
   12fec:	b	135ac <__assert_fail@plt+0x2598>
   12ff0:	mov	r0, #0
   12ff4:	str	r0, [fp, #-56]	; 0xffffffc8
   12ff8:	cmp	r5, r7
   12ffc:	bhi	12fb4 <__assert_fail@plt+0x1fa0>
   13000:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13004:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13008:	add	r0, lr, sl
   1300c:	bl	10f18 <bcmp@plt>
   13010:	ldr	r2, [sp, #92]	; 0x5c
   13014:	cmp	r0, #0
   13018:	mov	r1, r0
   1301c:	mov	r5, r6
   13020:	movwne	r1, #1
   13024:	orr	r1, r1, r2
   13028:	tst	r1, #1
   1302c:	beq	13cc4 <__assert_fail@plt+0x2cb0>
   13030:	ldr	ip, [fp, #-84]	; 0xffffffac
   13034:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13038:	clz	r0, r0
   1303c:	lsr	r0, r0, #5
   13040:	str	r0, [fp, #-48]	; 0xffffffd0
   13044:	ldrb	r6, [lr, sl]
   13048:	cmp	r6, #126	; 0x7e
   1304c:	bhi	135ac <__assert_fail@plt+0x2598>
   13050:	add	r3, pc, #16
   13054:	mov	r8, #1
   13058:	mov	r2, #110	; 0x6e
   1305c:	mov	r0, #97	; 0x61
   13060:	mov	r1, #0
   13064:	ldr	pc, [r3, r6, lsl #2]
   13068:	andeq	r3, r1, r4, ror #6
   1306c:	andeq	r3, r1, ip, lsr #11
   13070:	andeq	r3, r1, ip, lsr #11
   13074:	andeq	r3, r1, ip, lsr #11
   13078:	andeq	r3, r1, ip, lsr #11
   1307c:	andeq	r3, r1, ip, lsr #11
   13080:	andeq	r3, r1, ip, lsr #11
   13084:	andeq	r3, r1, r0, ror #12
   13088:	andeq	r3, r1, r4, asr #6
   1308c:	andeq	r3, r1, ip, lsr r3
   13090:	andeq	r3, r1, r0, asr r3
   13094:	andeq	r3, r1, r0, lsl #9
   13098:	andeq	r3, r1, r4, lsr r3
   1309c:	andeq	r3, r1, ip, asr #6
   130a0:	andeq	r3, r1, ip, lsr #11
   130a4:	andeq	r3, r1, ip, lsr #11
   130a8:	andeq	r3, r1, ip, lsr #11
   130ac:	andeq	r3, r1, ip, lsr #11
   130b0:	andeq	r3, r1, ip, lsr #11
   130b4:	andeq	r3, r1, ip, lsr #11
   130b8:	andeq	r3, r1, ip, lsr #11
   130bc:	andeq	r3, r1, ip, lsr #11
   130c0:	andeq	r3, r1, ip, lsr #11
   130c4:	andeq	r3, r1, ip, lsr #11
   130c8:	andeq	r3, r1, ip, lsr #11
   130cc:	andeq	r3, r1, ip, lsr #11
   130d0:	andeq	r3, r1, ip, lsr #11
   130d4:	andeq	r3, r1, ip, lsr #11
   130d8:	andeq	r3, r1, ip, lsr #11
   130dc:	andeq	r3, r1, ip, lsr #11
   130e0:	andeq	r3, r1, ip, lsr #11
   130e4:	andeq	r3, r1, ip, lsr #11
   130e8:	ldrdeq	r3, [r1], -r8
   130ec:	ldrdeq	r3, [r1], -ip
   130f0:	ldrdeq	r3, [r1], -ip
   130f4:	andeq	r3, r1, ip, asr #5
   130f8:	ldrdeq	r3, [r1], -ip
   130fc:	andeq	r3, r1, r4, ror #4
   13100:	ldrdeq	r3, [r1], -ip
   13104:	andeq	r3, r1, r8, lsl #9
   13108:	ldrdeq	r3, [r1], -ip
   1310c:	ldrdeq	r3, [r1], -ip
   13110:	ldrdeq	r3, [r1], -ip
   13114:	andeq	r3, r1, r4, ror #4
   13118:	andeq	r3, r1, r4, ror #4
   1311c:	andeq	r3, r1, r4, ror #4
   13120:	andeq	r3, r1, r4, ror #4
   13124:	andeq	r3, r1, r4, ror #4
   13128:	andeq	r3, r1, r4, ror #4
   1312c:	andeq	r3, r1, r4, ror #4
   13130:	andeq	r3, r1, r4, ror #4
   13134:	andeq	r3, r1, r4, ror #4
   13138:	andeq	r3, r1, r4, ror #4
   1313c:	andeq	r3, r1, r4, ror #4
   13140:	andeq	r3, r1, r4, ror #4
   13144:	andeq	r3, r1, r4, ror #4
   13148:	andeq	r3, r1, r4, ror #4
   1314c:	andeq	r3, r1, r4, ror #4
   13150:	andeq	r3, r1, r4, ror #4
   13154:	ldrdeq	r3, [r1], -ip
   13158:	ldrdeq	r3, [r1], -ip
   1315c:	ldrdeq	r3, [r1], -ip
   13160:	ldrdeq	r3, [r1], -ip
   13164:	andeq	r3, r1, ip, asr #8
   13168:	andeq	r3, r1, ip, lsr #11
   1316c:	andeq	r3, r1, r4, ror #4
   13170:	andeq	r3, r1, r4, ror #4
   13174:	andeq	r3, r1, r4, ror #4
   13178:	andeq	r3, r1, r4, ror #4
   1317c:	andeq	r3, r1, r4, ror #4
   13180:	andeq	r3, r1, r4, ror #4
   13184:	andeq	r3, r1, r4, ror #4
   13188:	andeq	r3, r1, r4, ror #4
   1318c:	andeq	r3, r1, r4, ror #4
   13190:	andeq	r3, r1, r4, ror #4
   13194:	andeq	r3, r1, r4, ror #4
   13198:	andeq	r3, r1, r4, ror #4
   1319c:	andeq	r3, r1, r4, ror #4
   131a0:	andeq	r3, r1, r4, ror #4
   131a4:	andeq	r3, r1, r4, ror #4
   131a8:	andeq	r3, r1, r4, ror #4
   131ac:	andeq	r3, r1, r4, ror #4
   131b0:	andeq	r3, r1, r4, ror #4
   131b4:	andeq	r3, r1, r4, ror #4
   131b8:	andeq	r3, r1, r4, ror #4
   131bc:	andeq	r3, r1, r4, ror #4
   131c0:	andeq	r3, r1, r4, ror #4
   131c4:	andeq	r3, r1, r4, ror #4
   131c8:	andeq	r3, r1, r4, ror #4
   131cc:	andeq	r3, r1, r4, ror #4
   131d0:	andeq	r3, r1, r4, ror #4
   131d4:	ldrdeq	r3, [r1], -ip
   131d8:	andeq	r3, r1, r0, lsl r3
   131dc:	andeq	r3, r1, r4, ror #4
   131e0:	ldrdeq	r3, [r1], -ip
   131e4:	andeq	r3, r1, r4, ror #4
   131e8:	ldrdeq	r3, [r1], -ip
   131ec:	andeq	r3, r1, r4, ror #4
   131f0:	andeq	r3, r1, r4, ror #4
   131f4:	andeq	r3, r1, r4, ror #4
   131f8:	andeq	r3, r1, r4, ror #4
   131fc:	andeq	r3, r1, r4, ror #4
   13200:	andeq	r3, r1, r4, ror #4
   13204:	andeq	r3, r1, r4, ror #4
   13208:	andeq	r3, r1, r4, ror #4
   1320c:	andeq	r3, r1, r4, ror #4
   13210:	andeq	r3, r1, r4, ror #4
   13214:	andeq	r3, r1, r4, ror #4
   13218:	andeq	r3, r1, r4, ror #4
   1321c:	andeq	r3, r1, r4, ror #4
   13220:	andeq	r3, r1, r4, ror #4
   13224:	andeq	r3, r1, r4, ror #4
   13228:	andeq	r3, r1, r4, ror #4
   1322c:	andeq	r3, r1, r4, ror #4
   13230:	andeq	r3, r1, r4, ror #4
   13234:	andeq	r3, r1, r4, ror #4
   13238:	andeq	r3, r1, r4, ror #4
   1323c:	andeq	r3, r1, r4, ror #4
   13240:	andeq	r3, r1, r4, ror #4
   13244:	andeq	r3, r1, r4, ror #4
   13248:	andeq	r3, r1, r4, ror #4
   1324c:	andeq	r3, r1, r4, ror #4
   13250:	andeq	r3, r1, r4, ror #4
   13254:	andeq	r3, r1, r4, lsr #5
   13258:	ldrdeq	r3, [r1], -ip
   1325c:	andeq	r3, r1, r4, lsr #5
   13260:	andeq	r3, r1, ip, asr #5
   13264:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13268:	tst	r0, #1
   1326c:	bne	13524 <__assert_fail@plt+0x2510>
   13270:	ldr	r1, [fp, #16]
   13274:	ubfx	r0, r6, #5, #3
   13278:	mov	r2, #1
   1327c:	ldr	r0, [r1, r0, lsl #2]
   13280:	and	r1, r6, #31
   13284:	tst	r0, r2, lsl r1
   13288:	beq	13524 <__assert_fail@plt+0x2510>
   1328c:	mov	r0, r6
   13290:	mov	r1, r8
   13294:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13298:	tst	r2, #1
   1329c:	beq	13544 <__assert_fail@plt+0x2530>
   132a0:	b	13ca0 <__assert_fail@plt+0x2c8c>
   132a4:	cmp	r7, #1
   132a8:	beq	132cc <__assert_fail@plt+0x22b8>
   132ac:	mov	r8, #0
   132b0:	cmn	r7, #1
   132b4:	bne	13510 <__assert_fail@plt+0x24fc>
   132b8:	ldrb	r0, [lr, #1]
   132bc:	cmp	r0, #0
   132c0:	beq	132cc <__assert_fail@plt+0x22b8>
   132c4:	mvn	r7, #0
   132c8:	b	13510 <__assert_fail@plt+0x24fc>
   132cc:	mov	r8, #0
   132d0:	cmp	sl, #0
   132d4:	bne	13510 <__assert_fail@plt+0x24fc>
   132d8:	mov	r1, #1
   132dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132e0:	cmp	r0, #2
   132e4:	bne	132fc <__assert_fail@plt+0x22e8>
   132e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132ec:	mov	r8, r1
   132f0:	tst	r0, #1
   132f4:	beq	13264 <__assert_fail@plt+0x2250>
   132f8:	b	13ca0 <__assert_fail@plt+0x2c8c>
   132fc:	mov	r8, r1
   13300:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13304:	tst	r0, #1
   13308:	beq	13270 <__assert_fail@plt+0x225c>
   1330c:	b	13524 <__assert_fail@plt+0x2510>
   13310:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13314:	cmp	r0, #2
   13318:	bne	135d8 <__assert_fail@plt+0x25c4>
   1331c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13320:	tst	r0, #1
   13324:	bne	13ca0 <__assert_fail@plt+0x2c8c>
   13328:	mov	r0, #0
   1332c:	str	r0, [fp, #-56]	; 0xffffffc8
   13330:	b	135f0 <__assert_fail@plt+0x25dc>
   13334:	mov	r0, #102	; 0x66
   13338:	b	13660 <__assert_fail@plt+0x264c>
   1333c:	mov	r2, #116	; 0x74
   13340:	b	13350 <__assert_fail@plt+0x233c>
   13344:	mov	r0, #98	; 0x62
   13348:	b	13660 <__assert_fail@plt+0x264c>
   1334c:	mov	r2, #114	; 0x72
   13350:	ldr	r0, [sp, #64]	; 0x40
   13354:	tst	r0, #1
   13358:	mov	r0, r2
   1335c:	bne	13660 <__assert_fail@plt+0x264c>
   13360:	b	13ca0 <__assert_fail@plt+0x2c8c>
   13364:	ldr	r0, [sp, #88]	; 0x58
   13368:	tst	r0, #1
   1336c:	beq	13680 <__assert_fail@plt+0x266c>
   13370:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13374:	tst	r0, #1
   13378:	bne	13ddc <__assert_fail@plt+0x2dc8>
   1337c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13380:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13384:	subs	r0, r0, #2
   13388:	movwne	r0, #1
   1338c:	orr	r0, r0, r1
   13390:	tst	r0, #1
   13394:	bne	133d0 <__assert_fail@plt+0x23bc>
   13398:	cmp	r9, r5
   1339c:	movcc	r0, #39	; 0x27
   133a0:	strbcc	r0, [ip, r9]
   133a4:	add	r0, r9, #1
   133a8:	cmp	r0, r5
   133ac:	movcc	r1, #36	; 0x24
   133b0:	strbcc	r1, [ip, r0]
   133b4:	add	r0, r9, #2
   133b8:	add	r9, r9, #3
   133bc:	cmp	r0, r5
   133c0:	movcc	r1, #39	; 0x27
   133c4:	strbcc	r1, [ip, r0]
   133c8:	mov	r0, #1
   133cc:	str	r0, [fp, #-52]	; 0xffffffcc
   133d0:	mov	r1, #1
   133d4:	cmp	r9, r5
   133d8:	mov	r8, #0
   133dc:	mov	r6, #48	; 0x30
   133e0:	str	r1, [fp, #-56]	; 0xffffffc8
   133e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   133e8:	movcc	r0, #92	; 0x5c
   133ec:	strbcc	r0, [ip, r9]
   133f0:	add	r0, r9, #1
   133f4:	cmp	r1, #2
   133f8:	beq	1384c <__assert_fail@plt+0x2838>
   133fc:	add	r1, sl, #1
   13400:	cmp	r1, r7
   13404:	bcs	1384c <__assert_fail@plt+0x2838>
   13408:	ldrb	r1, [lr, r1]
   1340c:	sub	r1, r1, #48	; 0x30
   13410:	uxtb	r1, r1
   13414:	cmp	r1, #9
   13418:	bhi	1384c <__assert_fail@plt+0x2838>
   1341c:	cmp	r0, r5
   13420:	movcc	r1, #48	; 0x30
   13424:	strbcc	r1, [ip, r0]
   13428:	add	r0, r9, #2
   1342c:	add	r9, r9, #3
   13430:	cmp	r0, r5
   13434:	movcc	r1, #48	; 0x30
   13438:	strbcc	r1, [ip, r0]
   1343c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13440:	tst	r0, #1
   13444:	beq	13270 <__assert_fail@plt+0x225c>
   13448:	b	13524 <__assert_fail@plt+0x2510>
   1344c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13450:	mov	r6, #63	; 0x3f
   13454:	cmp	r0, #5
   13458:	beq	13860 <__assert_fail@plt+0x284c>
   1345c:	mov	r1, #0
   13460:	cmp	r0, #2
   13464:	str	r1, [fp, #-56]	; 0xffffffc8
   13468:	bne	13928 <__assert_fail@plt+0x2914>
   1346c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13470:	mov	r8, #0
   13474:	tst	r0, #1
   13478:	beq	13264 <__assert_fail@plt+0x2250>
   1347c:	b	13ca0 <__assert_fail@plt+0x2c8c>
   13480:	mov	r0, #118	; 0x76
   13484:	b	13660 <__assert_fail@plt+0x264c>
   13488:	mov	r0, #1
   1348c:	mov	r6, #39	; 0x27
   13490:	str	r0, [sp, #60]	; 0x3c
   13494:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13498:	cmp	r0, #2
   1349c:	bne	136a0 <__assert_fail@plt+0x268c>
   134a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134a4:	tst	r0, #1
   134a8:	bne	13ca0 <__assert_fail@plt+0x2c8c>
   134ac:	ldr	r2, [sp, #56]	; 0x38
   134b0:	clz	r1, r5
   134b4:	mov	r8, #1
   134b8:	lsr	r1, r1, #5
   134bc:	cmp	r2, #0
   134c0:	mov	r0, r2
   134c4:	movwne	r0, #1
   134c8:	orrs	r0, r0, r1
   134cc:	moveq	r2, r5
   134d0:	moveq	r5, r0
   134d4:	cmp	r9, r5
   134d8:	str	r2, [sp, #56]	; 0x38
   134dc:	movcc	r0, #39	; 0x27
   134e0:	strbcc	r0, [ip, r9]
   134e4:	add	r0, r9, #1
   134e8:	cmp	r0, r5
   134ec:	movcc	r1, #92	; 0x5c
   134f0:	strbcc	r1, [ip, r0]
   134f4:	add	r0, r9, #2
   134f8:	add	r9, r9, #3
   134fc:	cmp	r0, r5
   13500:	movcc	r1, #39	; 0x27
   13504:	strbcc	r1, [ip, r0]
   13508:	mov	r0, #0
   1350c:	str	r0, [fp, #-52]	; 0xffffffcc
   13510:	mov	r0, #0
   13514:	str	r0, [fp, #-56]	; 0xffffffc8
   13518:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1351c:	tst	r0, #1
   13520:	beq	13270 <__assert_fail@plt+0x225c>
   13524:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13528:	mov	r1, r8
   1352c:	cmp	r0, #0
   13530:	mov	r0, r6
   13534:	beq	135f8 <__assert_fail@plt+0x25e4>
   13538:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1353c:	tst	r2, #1
   13540:	bne	13ca0 <__assert_fail@plt+0x2c8c>
   13544:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13548:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1354c:	subs	r2, r2, #2
   13550:	movwne	r2, #1
   13554:	orr	r2, r2, r3
   13558:	tst	r2, #1
   1355c:	bne	13598 <__assert_fail@plt+0x2584>
   13560:	cmp	r9, r5
   13564:	movcc	r2, #39	; 0x27
   13568:	strbcc	r2, [ip, r9]
   1356c:	add	r2, r9, #1
   13570:	cmp	r2, r5
   13574:	movcc	r3, #36	; 0x24
   13578:	strbcc	r3, [ip, r2]
   1357c:	add	r2, r9, #2
   13580:	add	r9, r9, #3
   13584:	cmp	r2, r5
   13588:	movcc	r3, #39	; 0x27
   1358c:	strbcc	r3, [ip, r2]
   13590:	mov	r2, #1
   13594:	str	r2, [fp, #-52]	; 0xffffffcc
   13598:	cmp	r9, r5
   1359c:	movcc	r2, #92	; 0x5c
   135a0:	strbcc	r2, [ip, r9]
   135a4:	add	r9, r9, #1
   135a8:	b	13640 <__assert_fail@plt+0x262c>
   135ac:	ldr	r0, [sp, #40]	; 0x28
   135b0:	cmp	r0, #1
   135b4:	bne	136b4 <__assert_fail@plt+0x26a0>
   135b8:	bl	10f00 <__ctype_b_loc@plt>
   135bc:	ldr	r0, [r0]
   135c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   135c4:	mov	r1, #1
   135c8:	add	r0, r0, r6, lsl #1
   135cc:	ldrb	r0, [r0, #1]
   135d0:	ubfx	r8, r0, #6, #1
   135d4:	b	13a0c <__assert_fail@plt+0x29f8>
   135d8:	ldr	r1, [sp, #48]	; 0x30
   135dc:	mov	r0, #0
   135e0:	str	r0, [fp, #-56]	; 0xffffffc8
   135e4:	mov	r0, #92	; 0x5c
   135e8:	cmp	r1, #0
   135ec:	beq	13660 <__assert_fail@plt+0x264c>
   135f0:	mov	r6, #92	; 0x5c
   135f4:	mov	r8, #0
   135f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   135fc:	cmp	r0, #0
   13600:	bne	13638 <__assert_fail@plt+0x2624>
   13604:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13608:	tst	r0, #1
   1360c:	beq	13638 <__assert_fail@plt+0x2624>
   13610:	cmp	r9, r5
   13614:	movcc	r0, #39	; 0x27
   13618:	strbcc	r0, [ip, r9]
   1361c:	add	r0, r9, #1
   13620:	add	r9, r9, #2
   13624:	cmp	r0, r5
   13628:	movcc	r1, #39	; 0x27
   1362c:	strbcc	r1, [ip, r0]
   13630:	mov	r0, #0
   13634:	str	r0, [fp, #-52]	; 0xffffffcc
   13638:	mov	r1, r8
   1363c:	mov	r0, r6
   13640:	cmp	r9, r5
   13644:	and	r4, r4, r1
   13648:	strbcc	r0, [ip, r9]
   1364c:	add	r9, r9, #1
   13650:	add	sl, sl, #1
   13654:	cmn	r7, #1
   13658:	bne	12f50 <__assert_fail@plt+0x1f3c>
   1365c:	b	12f5c <__assert_fail@plt+0x1f48>
   13660:	mov	r1, #0
   13664:	mov	r8, #0
   13668:	str	r1, [fp, #-56]	; 0xffffffc8
   1366c:	ldr	r1, [sp, #88]	; 0x58
   13670:	tst	r1, #1
   13674:	mov	r1, #0
   13678:	beq	13264 <__assert_fail@plt+0x2250>
   1367c:	b	13538 <__assert_fail@plt+0x2524>
   13680:	ldr	r0, [sp, #36]	; 0x24
   13684:	mov	r6, #0
   13688:	mov	r8, #0
   1368c:	cmp	r0, #0
   13690:	mov	r0, #0
   13694:	str	r0, [fp, #-56]	; 0xffffffc8
   13698:	bne	13650 <__assert_fail@plt+0x263c>
   1369c:	b	13264 <__assert_fail@plt+0x2250>
   136a0:	mov	r8, #1
   136a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136a8:	tst	r0, #1
   136ac:	beq	13270 <__assert_fail@plt+0x225c>
   136b0:	b	13524 <__assert_fail@plt+0x2510>
   136b4:	mov	r0, #0
   136b8:	cmn	r7, #1
   136bc:	str	r0, [fp, #-36]	; 0xffffffdc
   136c0:	str	r0, [fp, #-40]	; 0xffffffd8
   136c4:	bne	136d8 <__assert_fail@plt+0x26c4>
   136c8:	mov	r0, lr
   136cc:	bl	10f24 <strlen@plt>
   136d0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   136d4:	mov	r7, r0
   136d8:	ldr	r0, [sp, #44]	; 0x2c
   136dc:	str	r4, [sp, #84]	; 0x54
   136e0:	str	r5, [sp, #28]
   136e4:	cmp	r0, #0
   136e8:	beq	1393c <__assert_fail@plt+0x2928>
   136ec:	ldr	r0, [sp, #80]	; 0x50
   136f0:	mov	r8, #1
   136f4:	mov	r5, #0
   136f8:	add	r0, r0, sl
   136fc:	str	r0, [sp, #24]
   13700:	sub	r0, fp, #40	; 0x28
   13704:	mov	r3, r0
   13708:	b	13744 <__assert_fail@plt+0x2730>
   1370c:	ldr	r5, [sp, #68]	; 0x44
   13710:	add	r5, r0, r5
   13714:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13718:	bl	10e70 <iswprint@plt>
   1371c:	cmp	r0, #0
   13720:	sub	r4, fp, #40	; 0x28
   13724:	movwne	r0, #1
   13728:	and	r8, r8, r0
   1372c:	mov	r0, r4
   13730:	bl	10e34 <mbsinit@plt>
   13734:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13738:	mov	r3, r4
   1373c:	cmp	r0, #0
   13740:	bne	13a00 <__assert_fail@plt+0x29ec>
   13744:	str	r5, [sp, #68]	; 0x44
   13748:	add	r5, r5, sl
   1374c:	sub	r0, fp, #44	; 0x2c
   13750:	add	r1, lr, r5
   13754:	sub	r2, r7, r5
   13758:	bl	155ac <__assert_fail@plt+0x4598>
   1375c:	cmn	r0, #2
   13760:	beq	139c0 <__assert_fail@plt+0x29ac>
   13764:	ldr	ip, [fp, #-84]	; 0xffffffac
   13768:	cmn	r0, #1
   1376c:	beq	139b4 <__assert_fail@plt+0x29a0>
   13770:	cmp	r0, #0
   13774:	beq	139b8 <__assert_fail@plt+0x29a4>
   13778:	cmp	r0, #2
   1377c:	bcc	1370c <__assert_fail@plt+0x26f8>
   13780:	ldr	r1, [sp, #68]	; 0x44
   13784:	ldr	r2, [sp, #24]
   13788:	add	r1, r2, r1
   1378c:	sub	r2, r0, #1
   13790:	ldrb	r3, [r1]
   13794:	sub	r3, r3, #91	; 0x5b
   13798:	cmp	r3, #33	; 0x21
   1379c:	bls	137bc <__assert_fail@plt+0x27a8>
   137a0:	add	r1, r1, #1
   137a4:	subs	r2, r2, #1
   137a8:	beq	1370c <__assert_fail@plt+0x26f8>
   137ac:	ldrb	r3, [r1]
   137b0:	sub	r3, r3, #91	; 0x5b
   137b4:	cmp	r3, #33	; 0x21
   137b8:	bhi	137a0 <__assert_fail@plt+0x278c>
   137bc:	add	r5, pc, #0
   137c0:	ldr	pc, [r5, r3, lsl #2]
   137c4:	ldrdeq	r3, [r1], -r8
   137c8:	ldrdeq	r3, [r1], -r8
   137cc:	andeq	r3, r1, r0, lsr #15
   137d0:	ldrdeq	r3, [r1], -r8
   137d4:	andeq	r3, r1, r0, lsr #15
   137d8:	ldrdeq	r3, [r1], -r8
   137dc:	andeq	r3, r1, r0, lsr #15
   137e0:	andeq	r3, r1, r0, lsr #15
   137e4:	andeq	r3, r1, r0, lsr #15
   137e8:	andeq	r3, r1, r0, lsr #15
   137ec:	andeq	r3, r1, r0, lsr #15
   137f0:	andeq	r3, r1, r0, lsr #15
   137f4:	andeq	r3, r1, r0, lsr #15
   137f8:	andeq	r3, r1, r0, lsr #15
   137fc:	andeq	r3, r1, r0, lsr #15
   13800:	andeq	r3, r1, r0, lsr #15
   13804:	andeq	r3, r1, r0, lsr #15
   13808:	andeq	r3, r1, r0, lsr #15
   1380c:	andeq	r3, r1, r0, lsr #15
   13810:	andeq	r3, r1, r0, lsr #15
   13814:	andeq	r3, r1, r0, lsr #15
   13818:	andeq	r3, r1, r0, lsr #15
   1381c:	andeq	r3, r1, r0, lsr #15
   13820:	andeq	r3, r1, r0, lsr #15
   13824:	andeq	r3, r1, r0, lsr #15
   13828:	andeq	r3, r1, r0, lsr #15
   1382c:	andeq	r3, r1, r0, lsr #15
   13830:	andeq	r3, r1, r0, lsr #15
   13834:	andeq	r3, r1, r0, lsr #15
   13838:	andeq	r3, r1, r0, lsr #15
   1383c:	andeq	r3, r1, r0, lsr #15
   13840:	andeq	r3, r1, r0, lsr #15
   13844:	andeq	r3, r1, r0, lsr #15
   13848:	ldrdeq	r3, [r1], -r8
   1384c:	mov	r9, r0
   13850:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13854:	tst	r0, #1
   13858:	beq	13270 <__assert_fail@plt+0x225c>
   1385c:	b	13524 <__assert_fail@plt+0x2510>
   13860:	mov	r0, #0
   13864:	str	r0, [fp, #-56]	; 0xffffffc8
   13868:	ldr	r0, [sp, #32]
   1386c:	cmp	r0, #0
   13870:	beq	13928 <__assert_fail@plt+0x2914>
   13874:	add	r0, sl, #2
   13878:	mov	r1, r7
   1387c:	cmp	r0, r7
   13880:	bcs	13928 <__assert_fail@plt+0x2914>
   13884:	add	r1, sl, lr
   13888:	ldrb	r1, [r1, #1]
   1388c:	cmp	r1, #63	; 0x3f
   13890:	bne	13928 <__assert_fail@plt+0x2914>
   13894:	ldrb	r8, [lr, r0]
   13898:	sub	r2, r8, #33	; 0x21
   1389c:	cmp	r2, #29
   138a0:	bhi	13928 <__assert_fail@plt+0x2914>
   138a4:	mov	r1, r4
   138a8:	movw	r4, #20929	; 0x51c1
   138ac:	mov	r3, #1
   138b0:	movt	r4, #14336	; 0x3800
   138b4:	tst	r4, r3, lsl r2
   138b8:	beq	13be4 <__assert_fail@plt+0x2bd0>
   138bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   138c0:	tst	r2, #1
   138c4:	bne	13ca0 <__assert_fail@plt+0x2c8c>
   138c8:	cmp	r9, r5
   138cc:	mov	r6, r8
   138d0:	mov	r4, r1
   138d4:	mov	sl, r0
   138d8:	mov	r8, #0
   138dc:	movcc	r2, #63	; 0x3f
   138e0:	strbcc	r2, [ip, r9]
   138e4:	add	r2, r9, #1
   138e8:	cmp	r2, r5
   138ec:	movcc	r3, #34	; 0x22
   138f0:	strbcc	r3, [ip, r2]
   138f4:	add	r2, r9, #2
   138f8:	cmp	r2, r5
   138fc:	movcc	r3, #34	; 0x22
   13900:	strbcc	r3, [ip, r2]
   13904:	add	r2, r9, #3
   13908:	add	r9, r9, #4
   1390c:	cmp	r2, r5
   13910:	movcc	r3, #63	; 0x3f
   13914:	strbcc	r3, [ip, r2]
   13918:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1391c:	tst	r0, #1
   13920:	beq	13270 <__assert_fail@plt+0x225c>
   13924:	b	13524 <__assert_fail@plt+0x2510>
   13928:	mov	r8, #0
   1392c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13930:	tst	r0, #1
   13934:	beq	13270 <__assert_fail@plt+0x225c>
   13938:	b	13524 <__assert_fail@plt+0x2510>
   1393c:	mov	r8, #1
   13940:	mov	r5, #0
   13944:	sub	r4, fp, #40	; 0x28
   13948:	str	r5, [sp, #68]	; 0x44
   1394c:	add	r5, r5, sl
   13950:	sub	r0, fp, #44	; 0x2c
   13954:	mov	r3, r4
   13958:	add	r1, lr, r5
   1395c:	sub	r2, r7, r5
   13960:	bl	155ac <__assert_fail@plt+0x4598>
   13964:	cmn	r0, #2
   13968:	beq	139c0 <__assert_fail@plt+0x29ac>
   1396c:	cmn	r0, #1
   13970:	beq	139b4 <__assert_fail@plt+0x29a0>
   13974:	ldr	r5, [sp, #68]	; 0x44
   13978:	cmp	r0, #0
   1397c:	beq	139fc <__assert_fail@plt+0x29e8>
   13980:	add	r5, r0, r5
   13984:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13988:	bl	10e70 <iswprint@plt>
   1398c:	cmp	r0, #0
   13990:	sub	r4, fp, #40	; 0x28
   13994:	movwne	r0, #1
   13998:	and	r8, r8, r0
   1399c:	mov	r0, r4
   139a0:	bl	10e34 <mbsinit@plt>
   139a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   139a8:	cmp	r0, #0
   139ac:	beq	13948 <__assert_fail@plt+0x2934>
   139b0:	b	13a00 <__assert_fail@plt+0x29ec>
   139b4:	mov	r8, #0
   139b8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   139bc:	b	139f4 <__assert_fail@plt+0x29e0>
   139c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   139c4:	mov	r8, #0
   139c8:	cmp	r5, r7
   139cc:	bcs	139f4 <__assert_fail@plt+0x29e0>
   139d0:	ldrb	r0, [lr, r5]
   139d4:	cmp	r0, #0
   139d8:	beq	139f4 <__assert_fail@plt+0x29e0>
   139dc:	ldr	r0, [sp, #68]	; 0x44
   139e0:	add	r0, r0, #1
   139e4:	add	r5, r0, sl
   139e8:	str	r0, [sp, #68]	; 0x44
   139ec:	cmp	r5, r7
   139f0:	bcc	139d0 <__assert_fail@plt+0x29bc>
   139f4:	ldr	r5, [sp, #68]	; 0x44
   139f8:	b	13a00 <__assert_fail@plt+0x29ec>
   139fc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13a00:	mov	r1, r5
   13a04:	ldr	r5, [sp, #28]
   13a08:	ldr	r4, [sp, #84]	; 0x54
   13a0c:	ldr	r0, [sp, #52]	; 0x34
   13a10:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a14:	cmp	r1, #1
   13a18:	orr	r2, r8, r0
   13a1c:	mov	r0, r1
   13a20:	bhi	13a2c <__assert_fail@plt+0x2a18>
   13a24:	tst	r2, #1
   13a28:	bne	13264 <__assert_fail@plt+0x2250>
   13a2c:	add	r0, r0, sl
   13a30:	str	r2, [sp, #84]	; 0x54
   13a34:	str	r0, [fp, #-56]	; 0xffffffc8
   13a38:	mov	r0, #0
   13a3c:	tst	r2, #1
   13a40:	bne	13b20 <__assert_fail@plt+0x2b0c>
   13a44:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13a48:	tst	r1, #1
   13a4c:	bne	13ca0 <__assert_fail@plt+0x2c8c>
   13a50:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13a54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13a58:	subs	r2, r1, #2
   13a5c:	movwne	r2, #1
   13a60:	orr	r2, r2, r0
   13a64:	tst	r2, #1
   13a68:	bne	13aa4 <__assert_fail@plt+0x2a90>
   13a6c:	cmp	r9, r5
   13a70:	add	r2, r9, #1
   13a74:	mov	r0, #1
   13a78:	movcc	r1, #39	; 0x27
   13a7c:	str	r0, [fp, #-52]	; 0xffffffcc
   13a80:	strbcc	r1, [ip, r9]
   13a84:	cmp	r2, r5
   13a88:	movcc	r1, #36	; 0x24
   13a8c:	strbcc	r1, [ip, r2]
   13a90:	add	r2, r9, #2
   13a94:	add	r9, r9, #3
   13a98:	cmp	r2, r5
   13a9c:	movcc	r1, #39	; 0x27
   13aa0:	strbcc	r1, [ip, r2]
   13aa4:	cmp	r9, r5
   13aa8:	add	r2, r9, #1
   13aac:	movcc	r1, #92	; 0x5c
   13ab0:	strbcc	r1, [ip, r9]
   13ab4:	cmp	r2, r5
   13ab8:	bcs	13acc <__assert_fail@plt+0x2ab8>
   13abc:	uxtb	r3, r6
   13ac0:	mov	r1, #48	; 0x30
   13ac4:	orr	r3, r1, r3, lsr #6
   13ac8:	strb	r3, [ip, r2]
   13acc:	add	r2, r9, #2
   13ad0:	add	r9, r9, #3
   13ad4:	cmp	r2, r5
   13ad8:	lsrcc	r3, r6, #3
   13adc:	movcc	r1, #6
   13ae0:	bficc	r3, r1, #3, #29
   13ae4:	mov	r1, #6
   13ae8:	bfi	r6, r1, #3, #29
   13aec:	strbcc	r3, [ip, r2]
   13af0:	mov	r2, #1
   13af4:	b	13b54 <__assert_fail@plt+0x2b40>
   13af8:	ldr	r1, [sp, #80]	; 0x50
   13afc:	cmp	r9, r2
   13b00:	mov	r5, r2
   13b04:	ldr	r2, [sp, #84]	; 0x54
   13b08:	strbcc	r6, [ip, r9]
   13b0c:	add	r9, r9, #1
   13b10:	ldrb	r6, [r1, sl]
   13b14:	mov	sl, r3
   13b18:	tst	r2, #1
   13b1c:	beq	13a44 <__assert_fail@plt+0x2a30>
   13b20:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13b24:	tst	r1, #1
   13b28:	beq	13b48 <__assert_fail@plt+0x2b34>
   13b2c:	cmp	r9, r5
   13b30:	mov	r2, r0
   13b34:	movcc	r1, #92	; 0x5c
   13b38:	strbcc	r1, [ip, r9]
   13b3c:	add	r9, r9, #1
   13b40:	mov	r1, #0
   13b44:	b	13b50 <__assert_fail@plt+0x2b3c>
   13b48:	mov	r1, #0
   13b4c:	mov	r2, r0
   13b50:	str	r1, [fp, #-48]	; 0xffffffd0
   13b54:	mov	r0, r2
   13b58:	and	r1, r2, #1
   13b5c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b60:	add	r3, sl, #1
   13b64:	cmp	r2, r3
   13b68:	bls	13bc8 <__assert_fail@plt+0x2bb4>
   13b6c:	mov	r2, r5
   13b70:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13b74:	cmp	r1, #0
   13b78:	movwne	r1, #1
   13b7c:	mvn	r5, r5
   13b80:	orr	r5, r5, r1
   13b84:	tst	r5, #1
   13b88:	bne	13af8 <__assert_fail@plt+0x2ae4>
   13b8c:	cmp	r9, r2
   13b90:	movcc	r5, r4
   13b94:	movcc	r4, #39	; 0x27
   13b98:	strbcc	r4, [ip, r9]
   13b9c:	movcc	r4, r5
   13ba0:	add	r5, r9, #1
   13ba4:	add	r9, r9, #2
   13ba8:	cmp	r5, r2
   13bac:	movcc	r1, r4
   13bb0:	movcc	r4, #39	; 0x27
   13bb4:	strbcc	r4, [ip, r5]
   13bb8:	movcc	r4, r1
   13bbc:	mov	r1, #0
   13bc0:	str	r1, [fp, #-52]	; 0xffffffcc
   13bc4:	b	13af8 <__assert_fail@plt+0x2ae4>
   13bc8:	cmp	r1, #0
   13bcc:	movwne	r1, #1
   13bd0:	str	r1, [fp, #-56]	; 0xffffffc8
   13bd4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13bd8:	cmp	r0, #0
   13bdc:	beq	13604 <__assert_fail@plt+0x25f0>
   13be0:	b	13638 <__assert_fail@plt+0x2624>
   13be4:	mov	r8, #0
   13be8:	mov	r4, r1
   13bec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bf0:	tst	r0, #1
   13bf4:	beq	13270 <__assert_fail@plt+0x225c>
   13bf8:	b	13524 <__assert_fail@plt+0x2510>
   13bfc:	mov	r7, sl
   13c00:	b	13c08 <__assert_fail@plt+0x2bf4>
   13c04:	mvn	r7, #0
   13c08:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13c0c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13c10:	ldr	r2, [sp, #88]	; 0x58
   13c14:	eor	r0, r1, #2
   13c18:	orr	r0, r0, r9
   13c1c:	clz	r0, r0
   13c20:	lsr	r0, r0, #5
   13c24:	tst	r3, r0
   13c28:	bne	13ca0 <__assert_fail@plt+0x2c8c>
   13c2c:	subs	r0, r1, #2
   13c30:	movwne	r0, #1
   13c34:	orr	r0, r3, r0
   13c38:	tst	r0, #1
   13c3c:	ldreq	r0, [sp, #60]	; 0x3c
   13c40:	eoreq	r0, r0, #1
   13c44:	tsteq	r0, #1
   13c48:	bne	13d7c <__assert_fail@plt+0x2d68>
   13c4c:	tst	r4, #1
   13c50:	bne	13d40 <__assert_fail@plt+0x2d2c>
   13c54:	ldr	r6, [sp, #56]	; 0x38
   13c58:	mov	r8, #0
   13c5c:	cmp	r6, #0
   13c60:	beq	13d78 <__assert_fail@plt+0x2d64>
   13c64:	mov	r1, #0
   13c68:	mov	r4, #2
   13c6c:	cmp	r5, #0
   13c70:	mov	r0, r2
   13c74:	mov	r3, #0
   13c78:	str	r1, [sp, #84]	; 0x54
   13c7c:	beq	12ac4 <__assert_fail@plt+0x1ab0>
   13c80:	b	13d7c <__assert_fail@plt+0x2d68>
   13c84:	movw	r0, #25132	; 0x622c
   13c88:	movt	r0, #1
   13c8c:	str	r0, [sp, #76]	; 0x4c
   13c90:	mov	r9, #0
   13c94:	tst	r8, #1
   13c98:	beq	12d5c <__assert_fail@plt+0x1d48>
   13c9c:	b	12e9c <__assert_fail@plt+0x1e88>
   13ca0:	ldr	r1, [sp, #88]	; 0x58
   13ca4:	mov	r0, #2
   13ca8:	tst	r1, #1
   13cac:	movwne	r0, #4
   13cb0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13cb4:	ldr	r1, [fp, #12]
   13cb8:	cmp	r2, #2
   13cbc:	moveq	r2, r0
   13cc0:	b	13cf8 <__assert_fail@plt+0x2ce4>
   13cc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13cc8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ccc:	ldr	r1, [fp, #12]
   13cd0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13cd4:	b	13cf8 <__assert_fail@plt+0x2ce4>
   13cd8:	ldr	r1, [sp, #88]	; 0x58
   13cdc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ce0:	ldr	r5, [sp, #28]
   13ce4:	mov	r0, #2
   13ce8:	tst	r1, #1
   13cec:	ldr	r1, [fp, #12]
   13cf0:	movwne	r0, #4
   13cf4:	mov	r2, r0
   13cf8:	mov	r0, #0
   13cfc:	bic	r1, r1, #2
   13d00:	str	r2, [sp]
   13d04:	mov	r2, lr
   13d08:	str	r0, [sp, #8]
   13d0c:	ldr	r0, [sp, #72]	; 0x48
   13d10:	str	r1, [sp, #4]
   13d14:	mov	r1, r5
   13d18:	str	r0, [sp, #12]
   13d1c:	ldr	r0, [sp, #76]	; 0x4c
   13d20:	str	r0, [sp, #16]
   13d24:	mov	r0, ip
   13d28:	mov	r3, r7
   13d2c:	bl	12a38 <__assert_fail@plt+0x1a24>
   13d30:	mov	r9, r0
   13d34:	mov	r0, r9
   13d38:	sub	sp, fp, #28
   13d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d40:	mov	r0, #5
   13d44:	ldr	r1, [sp, #56]	; 0x38
   13d48:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13d4c:	str	r0, [sp]
   13d50:	ldr	r0, [fp, #12]
   13d54:	str	r0, [sp, #4]
   13d58:	ldr	r0, [fp, #16]
   13d5c:	str	r0, [sp, #8]
   13d60:	ldr	r0, [sp, #72]	; 0x48
   13d64:	str	r0, [sp, #12]
   13d68:	ldr	r0, [sp, #76]	; 0x4c
   13d6c:	str	r0, [sp, #16]
   13d70:	ldr	r0, [fp, #-84]	; 0xffffffac
   13d74:	b	13d28 <__assert_fail@plt+0x2d14>
   13d78:	mov	r3, #0
   13d7c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13d80:	cmp	r1, #0
   13d84:	beq	13dc0 <__assert_fail@plt+0x2dac>
   13d88:	ldr	r2, [fp, #-84]	; 0xffffffac
   13d8c:	tst	r3, #1
   13d90:	bne	13dc4 <__assert_fail@plt+0x2db0>
   13d94:	ldrb	r0, [r1]
   13d98:	cmp	r0, #0
   13d9c:	beq	13dc4 <__assert_fail@plt+0x2db0>
   13da0:	add	r1, r1, #1
   13da4:	cmp	r9, r5
   13da8:	strbcc	r0, [r2, r9]
   13dac:	add	r9, r9, #1
   13db0:	ldrb	r0, [r1], #1
   13db4:	cmp	r0, #0
   13db8:	bne	13da4 <__assert_fail@plt+0x2d90>
   13dbc:	b	13dc4 <__assert_fail@plt+0x2db0>
   13dc0:	ldr	r2, [fp, #-84]	; 0xffffffac
   13dc4:	cmp	r9, r5
   13dc8:	movcc	r0, #0
   13dcc:	strbcc	r0, [r2, r9]
   13dd0:	mov	r0, r9
   13dd4:	sub	sp, fp, #28
   13dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ddc:	mov	r0, #4
   13de0:	b	13cb0 <__assert_fail@plt+0x2c9c>
   13de4:	bl	10ffc <abort@plt>
   13de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dec:	add	fp, sp, #28
   13df0:	sub	sp, sp, #28
   13df4:	movw	r5, #29096	; 0x71a8
   13df8:	cmp	r2, #0
   13dfc:	mov	r4, r1
   13e00:	mov	r7, r0
   13e04:	str	r0, [sp, #20]
   13e08:	movt	r5, #2
   13e0c:	movne	r5, r2
   13e10:	bl	10f30 <__errno_location@plt>
   13e14:	mov	sl, r0
   13e18:	ldr	r2, [r5, #40]	; 0x28
   13e1c:	ldr	r3, [r5, #44]	; 0x2c
   13e20:	ldm	r5, {r0, r1}
   13e24:	orr	r8, r1, #1
   13e28:	add	r9, r5, #8
   13e2c:	mov	r1, #0
   13e30:	ldr	r6, [sl]
   13e34:	stm	sp, {r0, r8, r9}
   13e38:	mov	r0, #0
   13e3c:	str	r2, [sp, #12]
   13e40:	str	r3, [sp, #16]
   13e44:	mov	r2, r7
   13e48:	mov	r3, r4
   13e4c:	str	r6, [sp, #24]
   13e50:	mov	r6, r4
   13e54:	bl	12a38 <__assert_fail@plt+0x1a24>
   13e58:	add	r7, r0, #1
   13e5c:	mov	r0, r7
   13e60:	bl	14ec8 <__assert_fail@plt+0x3eb4>
   13e64:	mov	r4, r0
   13e68:	ldr	r0, [r5]
   13e6c:	ldr	r2, [r5, #44]	; 0x2c
   13e70:	ldr	r1, [r5, #40]	; 0x28
   13e74:	mov	r3, r6
   13e78:	stm	sp, {r0, r8, r9}
   13e7c:	str	r2, [sp, #16]
   13e80:	ldr	r2, [sp, #20]
   13e84:	str	r1, [sp, #12]
   13e88:	mov	r0, r4
   13e8c:	mov	r1, r7
   13e90:	bl	12a38 <__assert_fail@plt+0x1a24>
   13e94:	ldr	r0, [sp, #24]
   13e98:	str	r0, [sl]
   13e9c:	mov	r0, r4
   13ea0:	sub	sp, fp, #28
   13ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eac:	add	fp, sp, #28
   13eb0:	sub	sp, sp, #36	; 0x24
   13eb4:	movw	r8, #29096	; 0x71a8
   13eb8:	cmp	r3, #0
   13ebc:	mov	r4, r2
   13ec0:	str	r2, [sp, #24]
   13ec4:	mov	r5, r1
   13ec8:	mov	r6, r0
   13ecc:	str	r0, [sp, #20]
   13ed0:	movt	r8, #2
   13ed4:	movne	r8, r3
   13ed8:	bl	10f30 <__errno_location@plt>
   13edc:	str	r0, [sp, #28]
   13ee0:	ldr	r1, [r8, #40]	; 0x28
   13ee4:	ldr	r2, [r8, #44]	; 0x2c
   13ee8:	ldr	r7, [r0]
   13eec:	cmp	r4, #0
   13ef0:	add	sl, r8, #8
   13ef4:	mov	r0, #0
   13ef8:	ldm	r8, {r3, r9}
   13efc:	orreq	r9, r9, #1
   13f00:	stm	sp, {r3, r9, sl}
   13f04:	str	r1, [sp, #12]
   13f08:	str	r2, [sp, #16]
   13f0c:	mov	r1, #0
   13f10:	mov	r2, r6
   13f14:	mov	r3, r5
   13f18:	str	r7, [sp, #32]
   13f1c:	mov	r7, r5
   13f20:	bl	12a38 <__assert_fail@plt+0x1a24>
   13f24:	add	r4, r0, #1
   13f28:	mov	r5, r0
   13f2c:	mov	r0, r4
   13f30:	bl	14ec8 <__assert_fail@plt+0x3eb4>
   13f34:	mov	r6, r0
   13f38:	ldr	r0, [r8]
   13f3c:	ldr	r2, [r8, #44]	; 0x2c
   13f40:	ldr	r1, [r8, #40]	; 0x28
   13f44:	mov	r3, r7
   13f48:	stm	sp, {r0, r9, sl}
   13f4c:	str	r2, [sp, #16]
   13f50:	ldr	r2, [sp, #20]
   13f54:	str	r1, [sp, #12]
   13f58:	mov	r0, r6
   13f5c:	mov	r1, r4
   13f60:	bl	12a38 <__assert_fail@plt+0x1a24>
   13f64:	ldr	r0, [sp, #24]
   13f68:	ldr	r1, [sp, #32]
   13f6c:	ldr	r2, [sp, #28]
   13f70:	cmp	r0, #0
   13f74:	str	r1, [r2]
   13f78:	strne	r5, [r0]
   13f7c:	mov	r0, r6
   13f80:	sub	sp, fp, #28
   13f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f88:	push	{r4, r5, r6, r7, fp, lr}
   13f8c:	add	fp, sp, #16
   13f90:	movw	r4, #28960	; 0x7120
   13f94:	movt	r4, #2
   13f98:	ldrd	r6, [r4]
   13f9c:	cmp	r7, #2
   13fa0:	blt	13fcc <__assert_fail@plt+0x2fb8>
   13fa4:	add	r5, r6, #12
   13fa8:	mov	r7, #0
   13fac:	ldr	r0, [r5, r7, lsl #3]
   13fb0:	bl	1272c <__assert_fail@plt+0x1718>
   13fb4:	ldr	r1, [r4, #4]
   13fb8:	add	r2, r7, #2
   13fbc:	add	r0, r7, #1
   13fc0:	mov	r7, r0
   13fc4:	cmp	r2, r1
   13fc8:	blt	13fac <__assert_fail@plt+0x2f98>
   13fcc:	ldr	r0, [r6, #4]
   13fd0:	movw	r5, #29144	; 0x71d8
   13fd4:	movt	r5, #2
   13fd8:	cmp	r0, r5
   13fdc:	beq	13ff0 <__assert_fail@plt+0x2fdc>
   13fe0:	bl	1272c <__assert_fail@plt+0x1718>
   13fe4:	mov	r0, #256	; 0x100
   13fe8:	str	r0, [r4, #8]
   13fec:	str	r5, [r4, #12]
   13ff0:	add	r5, r4, #8
   13ff4:	cmp	r6, r5
   13ff8:	beq	14008 <__assert_fail@plt+0x2ff4>
   13ffc:	mov	r0, r6
   14000:	bl	1272c <__assert_fail@plt+0x1718>
   14004:	str	r5, [r4]
   14008:	mov	r0, #1
   1400c:	str	r0, [r4, #4]
   14010:	pop	{r4, r5, r6, r7, fp, pc}
   14014:	movw	r3, #29096	; 0x71a8
   14018:	mvn	r2, #0
   1401c:	movt	r3, #2
   14020:	b	14024 <__assert_fail@plt+0x3010>
   14024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14028:	add	fp, sp, #28
   1402c:	sub	sp, sp, #44	; 0x2c
   14030:	mov	r7, r3
   14034:	str	r2, [sp, #36]	; 0x24
   14038:	str	r1, [sp, #32]
   1403c:	mov	r5, r0
   14040:	bl	10f30 <__errno_location@plt>
   14044:	cmp	r5, #0
   14048:	bmi	141b0 <__assert_fail@plt+0x319c>
   1404c:	cmn	r5, #-2147483647	; 0x80000001
   14050:	beq	141b0 <__assert_fail@plt+0x319c>
   14054:	movw	r8, #28960	; 0x7120
   14058:	mov	r4, r0
   1405c:	ldr	r0, [r0]
   14060:	movt	r8, #2
   14064:	str	r4, [sp, #28]
   14068:	ldr	r1, [r8, #4]
   1406c:	ldr	r6, [r8]
   14070:	str	r0, [sp, #24]
   14074:	cmp	r1, r5
   14078:	ble	14084 <__assert_fail@plt+0x3070>
   1407c:	mov	sl, r6
   14080:	b	140ec <__assert_fail@plt+0x30d8>
   14084:	mov	r0, #8
   14088:	add	r9, r8, #8
   1408c:	str	r1, [fp, #-32]	; 0xffffffe0
   14090:	sub	r1, r5, r1
   14094:	mvn	r3, #-2147483648	; 0x80000000
   14098:	str	r0, [sp]
   1409c:	subs	r0, r6, r9
   140a0:	add	r2, r1, #1
   140a4:	sub	r1, fp, #32
   140a8:	movne	r0, r6
   140ac:	bl	150c8 <__assert_fail@plt+0x40b4>
   140b0:	mov	sl, r0
   140b4:	cmp	r6, r9
   140b8:	str	r0, [r8]
   140bc:	bne	140c8 <__assert_fail@plt+0x30b4>
   140c0:	ldrd	r0, [r8, #8]
   140c4:	stm	sl, {r0, r1}
   140c8:	ldr	r1, [r8, #4]
   140cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   140d0:	add	r0, sl, r1, lsl #3
   140d4:	sub	r1, r2, r1
   140d8:	lsl	r2, r1, #3
   140dc:	mov	r1, #0
   140e0:	bl	10f48 <memset@plt>
   140e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   140e8:	str	r0, [r8, #4]
   140ec:	mov	r9, sl
   140f0:	ldm	r7, {r0, r1}
   140f4:	orr	r8, r1, #1
   140f8:	add	r1, r7, #8
   140fc:	ldr	r2, [r7, #40]	; 0x28
   14100:	ldr	r3, [r7, #44]	; 0x2c
   14104:	ldr	r6, [r9, r5, lsl #3]!
   14108:	str	r1, [sp, #20]
   1410c:	ldr	r4, [r9, #4]!
   14110:	stm	sp, {r0, r8}
   14114:	add	r0, sp, #8
   14118:	stm	r0, {r1, r2, r3}
   1411c:	ldr	r2, [sp, #32]
   14120:	ldr	r3, [sp, #36]	; 0x24
   14124:	mov	r1, r6
   14128:	mov	r0, r4
   1412c:	bl	12a38 <__assert_fail@plt+0x1a24>
   14130:	cmp	r6, r0
   14134:	bhi	14198 <__assert_fail@plt+0x3184>
   14138:	add	r6, r0, #1
   1413c:	movw	r0, #29144	; 0x71d8
   14140:	movt	r0, #2
   14144:	str	r6, [sl, r5, lsl #3]
   14148:	cmp	r4, r0
   1414c:	beq	14158 <__assert_fail@plt+0x3144>
   14150:	mov	r0, r4
   14154:	bl	1272c <__assert_fail@plt+0x1718>
   14158:	mov	r0, r6
   1415c:	bl	14ec8 <__assert_fail@plt+0x3eb4>
   14160:	str	r0, [r9]
   14164:	mov	r4, r0
   14168:	add	r3, sp, #8
   1416c:	ldr	r0, [r7]
   14170:	ldr	r1, [r7, #40]	; 0x28
   14174:	ldr	r2, [r7, #44]	; 0x2c
   14178:	stm	sp, {r0, r8}
   1417c:	ldr	r0, [sp, #20]
   14180:	stm	r3, {r0, r1, r2}
   14184:	ldr	r2, [sp, #32]
   14188:	ldr	r3, [sp, #36]	; 0x24
   1418c:	mov	r0, r4
   14190:	mov	r1, r6
   14194:	bl	12a38 <__assert_fail@plt+0x1a24>
   14198:	ldr	r1, [sp, #24]
   1419c:	ldr	r0, [sp, #28]
   141a0:	str	r1, [r0]
   141a4:	mov	r0, r4
   141a8:	sub	sp, fp, #28
   141ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141b0:	bl	10ffc <abort@plt>
   141b4:	movw	r3, #29096	; 0x71a8
   141b8:	movt	r3, #2
   141bc:	b	14024 <__assert_fail@plt+0x3010>
   141c0:	movw	r3, #29096	; 0x71a8
   141c4:	mov	r1, r0
   141c8:	mov	r0, #0
   141cc:	mvn	r2, #0
   141d0:	movt	r3, #2
   141d4:	b	14024 <__assert_fail@plt+0x3010>
   141d8:	movw	r3, #29096	; 0x71a8
   141dc:	mov	r2, r1
   141e0:	mov	r1, r0
   141e4:	mov	r0, #0
   141e8:	movt	r3, #2
   141ec:	b	14024 <__assert_fail@plt+0x3010>
   141f0:	push	{fp, lr}
   141f4:	mov	fp, sp
   141f8:	sub	sp, sp, #48	; 0x30
   141fc:	vmov.i32	q8, #0	; 0x00000000
   14200:	mov	ip, #32
   14204:	mov	r3, sp
   14208:	mov	lr, r2
   1420c:	cmp	r1, #10
   14210:	add	r2, r3, #16
   14214:	vst1.64	{d16-d17}, [r3], ip
   14218:	vst1.64	{d16-d17}, [r2]
   1421c:	vst1.64	{d16-d17}, [r3]
   14220:	beq	14240 <__assert_fail@plt+0x322c>
   14224:	str	r1, [sp]
   14228:	mov	r3, sp
   1422c:	mov	r1, lr
   14230:	mvn	r2, #0
   14234:	bl	14024 <__assert_fail@plt+0x3010>
   14238:	mov	sp, fp
   1423c:	pop	{fp, pc}
   14240:	bl	10ffc <abort@plt>
   14244:	push	{r4, sl, fp, lr}
   14248:	add	fp, sp, #8
   1424c:	sub	sp, sp, #48	; 0x30
   14250:	vmov.i32	q8, #0	; 0x00000000
   14254:	mov	ip, r3
   14258:	mov	r3, sp
   1425c:	mov	lr, #32
   14260:	cmp	r1, #10
   14264:	add	r4, r3, #16
   14268:	vst1.64	{d16-d17}, [r3], lr
   1426c:	vst1.64	{d16-d17}, [r4]
   14270:	vst1.64	{d16-d17}, [r3]
   14274:	beq	14294 <__assert_fail@plt+0x3280>
   14278:	str	r1, [sp]
   1427c:	mov	r1, r2
   14280:	mov	r3, sp
   14284:	mov	r2, ip
   14288:	bl	14024 <__assert_fail@plt+0x3010>
   1428c:	sub	sp, fp, #8
   14290:	pop	{r4, sl, fp, pc}
   14294:	bl	10ffc <abort@plt>
   14298:	push	{fp, lr}
   1429c:	mov	fp, sp
   142a0:	sub	sp, sp, #48	; 0x30
   142a4:	vmov.i32	q8, #0	; 0x00000000
   142a8:	mov	r3, sp
   142ac:	mov	ip, #32
   142b0:	cmp	r0, #10
   142b4:	add	r2, r3, #16
   142b8:	vst1.64	{d16-d17}, [r3], ip
   142bc:	vst1.64	{d16-d17}, [r2]
   142c0:	vst1.64	{d16-d17}, [r3]
   142c4:	beq	142e4 <__assert_fail@plt+0x32d0>
   142c8:	str	r0, [sp]
   142cc:	mov	r3, sp
   142d0:	mov	r0, #0
   142d4:	mvn	r2, #0
   142d8:	bl	14024 <__assert_fail@plt+0x3010>
   142dc:	mov	sp, fp
   142e0:	pop	{fp, pc}
   142e4:	bl	10ffc <abort@plt>
   142e8:	push	{fp, lr}
   142ec:	mov	fp, sp
   142f0:	sub	sp, sp, #48	; 0x30
   142f4:	vmov.i32	q8, #0	; 0x00000000
   142f8:	mov	r3, sp
   142fc:	mov	ip, #32
   14300:	cmp	r0, #10
   14304:	add	lr, r3, #16
   14308:	vst1.64	{d16-d17}, [r3], ip
   1430c:	vst1.64	{d16-d17}, [lr]
   14310:	vst1.64	{d16-d17}, [r3]
   14314:	beq	14330 <__assert_fail@plt+0x331c>
   14318:	str	r0, [sp]
   1431c:	mov	r3, sp
   14320:	mov	r0, #0
   14324:	bl	14024 <__assert_fail@plt+0x3010>
   14328:	mov	sp, fp
   1432c:	pop	{fp, pc}
   14330:	bl	10ffc <abort@plt>
   14334:	push	{r4, sl, fp, lr}
   14338:	add	fp, sp, #8
   1433c:	sub	sp, sp, #48	; 0x30
   14340:	mov	lr, r0
   14344:	movw	r0, #29096	; 0x71a8
   14348:	mov	ip, r1
   1434c:	mov	r1, #32
   14350:	mov	r4, #1
   14354:	movt	r0, #2
   14358:	add	r3, r0, #16
   1435c:	vld1.64	{d16-d17}, [r0], r1
   14360:	vld1.64	{d20-d21}, [r0]
   14364:	vld1.64	{d18-d19}, [r3]
   14368:	mov	r3, sp
   1436c:	add	r0, r3, #32
   14370:	add	r1, r3, #16
   14374:	vst1.64	{d20-d21}, [r0]
   14378:	mov	r0, #28
   1437c:	vst1.64	{d18-d19}, [r1]
   14380:	mov	r1, r3
   14384:	and	r0, r0, r2, lsr #3
   14388:	and	r2, r2, #31
   1438c:	vst1.64	{d16-d17}, [r1], r0
   14390:	ldr	r0, [r1, #8]
   14394:	bic	r4, r4, r0, lsr r2
   14398:	eor	r0, r0, r4, lsl r2
   1439c:	mov	r2, ip
   143a0:	str	r0, [r1, #8]
   143a4:	mov	r0, #0
   143a8:	mov	r1, lr
   143ac:	bl	14024 <__assert_fail@plt+0x3010>
   143b0:	sub	sp, fp, #8
   143b4:	pop	{r4, sl, fp, pc}
   143b8:	push	{fp, lr}
   143bc:	mov	fp, sp
   143c0:	sub	sp, sp, #48	; 0x30
   143c4:	mov	ip, r0
   143c8:	movw	r0, #29096	; 0x71a8
   143cc:	mov	r2, #32
   143d0:	movt	r0, #2
   143d4:	add	r3, r0, #16
   143d8:	vld1.64	{d16-d17}, [r0], r2
   143dc:	vld1.64	{d20-d21}, [r0]
   143e0:	vld1.64	{d18-d19}, [r3]
   143e4:	mov	r3, sp
   143e8:	add	r0, r3, #32
   143ec:	add	r2, r3, #16
   143f0:	vst1.64	{d20-d21}, [r0]
   143f4:	mov	r0, #28
   143f8:	vst1.64	{d18-d19}, [r2]
   143fc:	mov	r2, r3
   14400:	and	r0, r0, r1, lsr #3
   14404:	and	r1, r1, #31
   14408:	vst1.64	{d16-d17}, [r2], r0
   1440c:	mov	r0, #1
   14410:	ldr	lr, [r2, #8]
   14414:	bic	r0, r0, lr, lsr r1
   14418:	eor	r0, lr, r0, lsl r1
   1441c:	mov	r1, ip
   14420:	str	r0, [r2, #8]
   14424:	mov	r0, #0
   14428:	mvn	r2, #0
   1442c:	bl	14024 <__assert_fail@plt+0x3010>
   14430:	mov	sp, fp
   14434:	pop	{fp, pc}
   14438:	push	{fp, lr}
   1443c:	mov	fp, sp
   14440:	sub	sp, sp, #48	; 0x30
   14444:	mov	r1, r0
   14448:	movw	r0, #29096	; 0x71a8
   1444c:	mov	r3, #32
   14450:	movt	r0, #2
   14454:	add	r2, r0, #16
   14458:	vld1.64	{d16-d17}, [r0], r3
   1445c:	mov	r3, sp
   14460:	vld1.64	{d18-d19}, [r2]
   14464:	vld1.64	{d20-d21}, [r0]
   14468:	add	r2, r3, #16
   1446c:	add	r0, r3, #32
   14470:	vst1.64	{d18-d19}, [r2]
   14474:	vst1.64	{d20-d21}, [r0]
   14478:	mov	r0, #12
   1447c:	mov	r2, r3
   14480:	vst1.64	{d16-d17}, [r2], r0
   14484:	ldr	r0, [r2]
   14488:	orr	r0, r0, #67108864	; 0x4000000
   1448c:	str	r0, [r2]
   14490:	mov	r0, #0
   14494:	mvn	r2, #0
   14498:	bl	14024 <__assert_fail@plt+0x3010>
   1449c:	mov	sp, fp
   144a0:	pop	{fp, pc}
   144a4:	push	{fp, lr}
   144a8:	mov	fp, sp
   144ac:	sub	sp, sp, #48	; 0x30
   144b0:	mov	ip, r1
   144b4:	mov	r1, r0
   144b8:	movw	r0, #29096	; 0x71a8
   144bc:	mov	r2, #32
   144c0:	movt	r0, #2
   144c4:	add	r3, r0, #16
   144c8:	vld1.64	{d16-d17}, [r0], r2
   144cc:	vld1.64	{d18-d19}, [r3]
   144d0:	vld1.64	{d20-d21}, [r0]
   144d4:	mov	r3, sp
   144d8:	add	r2, r3, #16
   144dc:	add	r0, r3, #32
   144e0:	vst1.64	{d18-d19}, [r2]
   144e4:	vst1.64	{d20-d21}, [r0]
   144e8:	mov	r0, #12
   144ec:	mov	r2, r3
   144f0:	vst1.64	{d16-d17}, [r2], r0
   144f4:	ldr	r0, [r2]
   144f8:	orr	r0, r0, #67108864	; 0x4000000
   144fc:	str	r0, [r2]
   14500:	mov	r0, #0
   14504:	mov	r2, ip
   14508:	bl	14024 <__assert_fail@plt+0x3010>
   1450c:	mov	sp, fp
   14510:	pop	{fp, pc}
   14514:	push	{r4, sl, fp, lr}
   14518:	add	fp, sp, #8
   1451c:	sub	sp, sp, #96	; 0x60
   14520:	vmov.i32	q8, #0	; 0x00000000
   14524:	mov	ip, r2
   14528:	mov	r2, sp
   1452c:	mov	r4, #28
   14530:	cmp	r1, #10
   14534:	mov	r3, r2
   14538:	add	lr, r2, #16
   1453c:	vst1.64	{d16-d17}, [r3], r4
   14540:	vst1.64	{d16-d17}, [lr]
   14544:	vst1.32	{d16-d17}, [r3]
   14548:	beq	14598 <__assert_fail@plt+0x3584>
   1454c:	vld1.64	{d16-d17}, [r2], r4
   14550:	vld1.64	{d18-d19}, [lr]
   14554:	add	r3, sp, #48	; 0x30
   14558:	vld1.32	{d20-d21}, [r2]
   1455c:	add	r2, r3, #20
   14560:	add	r4, r3, #4
   14564:	vst1.32	{d18-d19}, [r2]
   14568:	add	r2, r3, #32
   1456c:	vst1.32	{d16-d17}, [r4]
   14570:	vst1.32	{d20-d21}, [r2]
   14574:	str	r1, [sp, #48]	; 0x30
   14578:	mvn	r2, #0
   1457c:	ldr	r1, [sp, #60]	; 0x3c
   14580:	orr	r1, r1, #67108864	; 0x4000000
   14584:	str	r1, [sp, #60]	; 0x3c
   14588:	mov	r1, ip
   1458c:	bl	14024 <__assert_fail@plt+0x3010>
   14590:	sub	sp, fp, #8
   14594:	pop	{r4, sl, fp, pc}
   14598:	bl	10ffc <abort@plt>
   1459c:	push	{r4, r5, r6, sl, fp, lr}
   145a0:	add	fp, sp, #16
   145a4:	sub	sp, sp, #48	; 0x30
   145a8:	mov	ip, r3
   145ac:	movw	r3, #29096	; 0x71a8
   145b0:	mov	r6, #32
   145b4:	cmp	r1, #0
   145b8:	mov	r4, sp
   145bc:	movt	r3, #2
   145c0:	cmpne	r2, #0
   145c4:	add	r5, r4, #16
   145c8:	add	lr, r3, #16
   145cc:	vld1.64	{d16-d17}, [r3], r6
   145d0:	vld1.64	{d18-d19}, [lr]
   145d4:	vld1.64	{d20-d21}, [r3]
   145d8:	mov	r3, #10
   145dc:	vst1.64	{d16-d17}, [r4], r6
   145e0:	vst1.64	{d18-d19}, [r5]
   145e4:	vst1.64	{d20-d21}, [r4]
   145e8:	str	r3, [sp]
   145ec:	bne	145f4 <__assert_fail@plt+0x35e0>
   145f0:	bl	10ffc <abort@plt>
   145f4:	str	r2, [sp, #44]	; 0x2c
   145f8:	str	r1, [sp, #40]	; 0x28
   145fc:	mov	r3, sp
   14600:	mov	r1, ip
   14604:	mvn	r2, #0
   14608:	bl	14024 <__assert_fail@plt+0x3010>
   1460c:	sub	sp, fp, #16
   14610:	pop	{r4, r5, r6, sl, fp, pc}
   14614:	push	{r4, r5, r6, sl, fp, lr}
   14618:	add	fp, sp, #16
   1461c:	sub	sp, sp, #48	; 0x30
   14620:	mov	lr, r3
   14624:	movw	r3, #29096	; 0x71a8
   14628:	mov	r6, #32
   1462c:	cmp	r1, #0
   14630:	mov	r4, sp
   14634:	movt	r3, #2
   14638:	cmpne	r2, #0
   1463c:	add	r5, r4, #16
   14640:	add	ip, r3, #16
   14644:	vld1.64	{d16-d17}, [r3], r6
   14648:	vld1.64	{d18-d19}, [ip]
   1464c:	vld1.64	{d20-d21}, [r3]
   14650:	mov	r3, #10
   14654:	vst1.64	{d16-d17}, [r4], r6
   14658:	vst1.64	{d18-d19}, [r5]
   1465c:	vst1.64	{d20-d21}, [r4]
   14660:	str	r3, [sp]
   14664:	bne	1466c <__assert_fail@plt+0x3658>
   14668:	bl	10ffc <abort@plt>
   1466c:	ldr	ip, [fp, #8]
   14670:	str	r2, [sp, #44]	; 0x2c
   14674:	str	r1, [sp, #40]	; 0x28
   14678:	mov	r3, sp
   1467c:	mov	r1, lr
   14680:	mov	r2, ip
   14684:	bl	14024 <__assert_fail@plt+0x3010>
   14688:	sub	sp, fp, #16
   1468c:	pop	{r4, r5, r6, sl, fp, pc}
   14690:	push	{r4, sl, fp, lr}
   14694:	add	fp, sp, #8
   14698:	sub	sp, sp, #48	; 0x30
   1469c:	movw	r3, #29096	; 0x71a8
   146a0:	mov	lr, #32
   146a4:	mov	ip, r2
   146a8:	cmp	r0, #0
   146ac:	movt	r3, #2
   146b0:	cmpne	r1, #0
   146b4:	add	r2, r3, #16
   146b8:	vld1.64	{d16-d17}, [r3], lr
   146bc:	vld1.64	{d20-d21}, [r3]
   146c0:	vld1.64	{d18-d19}, [r2]
   146c4:	mov	r2, sp
   146c8:	add	r4, r2, #16
   146cc:	vst1.64	{d16-d17}, [r2], lr
   146d0:	vst1.64	{d20-d21}, [r2]
   146d4:	mov	r2, #10
   146d8:	vst1.64	{d18-d19}, [r4]
   146dc:	str	r2, [sp]
   146e0:	bne	146e8 <__assert_fail@plt+0x36d4>
   146e4:	bl	10ffc <abort@plt>
   146e8:	str	r1, [sp, #44]	; 0x2c
   146ec:	str	r0, [sp, #40]	; 0x28
   146f0:	mov	r3, sp
   146f4:	mov	r0, #0
   146f8:	mov	r1, ip
   146fc:	mvn	r2, #0
   14700:	bl	14024 <__assert_fail@plt+0x3010>
   14704:	sub	sp, fp, #8
   14708:	pop	{r4, sl, fp, pc}
   1470c:	push	{r4, r5, fp, lr}
   14710:	add	fp, sp, #8
   14714:	sub	sp, sp, #48	; 0x30
   14718:	mov	ip, r3
   1471c:	movw	r3, #29096	; 0x71a8
   14720:	mov	r4, #32
   14724:	mov	lr, r2
   14728:	cmp	r0, #0
   1472c:	movt	r3, #2
   14730:	cmpne	r1, #0
   14734:	add	r2, r3, #16
   14738:	vld1.64	{d16-d17}, [r3], r4
   1473c:	vld1.64	{d20-d21}, [r3]
   14740:	vld1.64	{d18-d19}, [r2]
   14744:	mov	r2, sp
   14748:	add	r5, r2, #16
   1474c:	vst1.64	{d16-d17}, [r2], r4
   14750:	vst1.64	{d20-d21}, [r2]
   14754:	mov	r2, #10
   14758:	vst1.64	{d18-d19}, [r5]
   1475c:	str	r2, [sp]
   14760:	bne	14768 <__assert_fail@plt+0x3754>
   14764:	bl	10ffc <abort@plt>
   14768:	str	r1, [sp, #44]	; 0x2c
   1476c:	str	r0, [sp, #40]	; 0x28
   14770:	mov	r3, sp
   14774:	mov	r0, #0
   14778:	mov	r1, lr
   1477c:	mov	r2, ip
   14780:	bl	14024 <__assert_fail@plt+0x3010>
   14784:	sub	sp, fp, #8
   14788:	pop	{r4, r5, fp, pc}
   1478c:	movw	r3, #28912	; 0x70f0
   14790:	movt	r3, #2
   14794:	b	14024 <__assert_fail@plt+0x3010>
   14798:	movw	r3, #28912	; 0x70f0
   1479c:	mov	r2, r1
   147a0:	mov	r1, r0
   147a4:	mov	r0, #0
   147a8:	movt	r3, #2
   147ac:	b	14024 <__assert_fail@plt+0x3010>
   147b0:	movw	r3, #28912	; 0x70f0
   147b4:	mvn	r2, #0
   147b8:	movt	r3, #2
   147bc:	b	14024 <__assert_fail@plt+0x3010>
   147c0:	movw	r3, #28912	; 0x70f0
   147c4:	mov	r1, r0
   147c8:	mov	r0, #0
   147cc:	mvn	r2, #0
   147d0:	movt	r3, #2
   147d4:	b	14024 <__assert_fail@plt+0x3010>
   147d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147dc:	add	fp, sp, #24
   147e0:	sub	sp, sp, #32
   147e4:	ldr	r6, [fp, #12]
   147e8:	ldr	r7, [fp, #8]
   147ec:	mov	r4, r2
   147f0:	mov	r8, r0
   147f4:	cmp	r1, #0
   147f8:	beq	14820 <__assert_fail@plt+0x380c>
   147fc:	movw	r2, #25220	; 0x6284
   14800:	mov	r5, r1
   14804:	str	r3, [sp, #4]
   14808:	str	r4, [sp]
   1480c:	mov	r0, r8
   14810:	mov	r1, #1
   14814:	movt	r2, #1
   14818:	mov	r3, r5
   1481c:	b	14838 <__assert_fail@plt+0x3824>
   14820:	movw	r2, #25232	; 0x6290
   14824:	str	r3, [sp]
   14828:	mov	r0, r8
   1482c:	mov	r1, #1
   14830:	mov	r3, r4
   14834:	movt	r2, #1
   14838:	bl	10f6c <__fprintf_chk@plt>
   1483c:	movw	r1, #25239	; 0x6297
   14840:	mov	r0, #0
   14844:	mov	r2, #5
   14848:	movt	r1, #1
   1484c:	bl	10e4c <dcgettext@plt>
   14850:	movw	r2, #25957	; 0x6565
   14854:	mov	r3, r0
   14858:	movw	r0, #2022	; 0x7e6
   1485c:	mov	r1, #1
   14860:	movt	r2, #1
   14864:	str	r0, [sp]
   14868:	mov	r0, r8
   1486c:	bl	10f6c <__fprintf_chk@plt>
   14870:	movw	r4, #23872	; 0x5d40
   14874:	mov	r1, r8
   14878:	movt	r4, #1
   1487c:	mov	r0, r4
   14880:	bl	10dd4 <fputs_unlocked@plt>
   14884:	movw	r1, #25243	; 0x629b
   14888:	mov	r0, #0
   1488c:	mov	r2, #5
   14890:	movt	r1, #1
   14894:	bl	10e4c <dcgettext@plt>
   14898:	movw	r3, #25414	; 0x6346
   1489c:	mov	r2, r0
   148a0:	mov	r0, r8
   148a4:	mov	r1, #1
   148a8:	movt	r3, #1
   148ac:	bl	10f6c <__fprintf_chk@plt>
   148b0:	mov	r0, r4
   148b4:	mov	r1, r8
   148b8:	bl	10dd4 <fputs_unlocked@plt>
   148bc:	cmp	r6, #9
   148c0:	bhi	148fc <__assert_fail@plt+0x38e8>
   148c4:	add	r0, pc, #0
   148c8:	ldr	pc, [r0, r6, lsl #2]
   148cc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d0:	andeq	r4, r1, r8, lsl #18
   148d4:	andeq	r4, r1, r8, lsr r9
   148d8:	andeq	r4, r1, r0, ror #18
   148dc:	andeq	r4, r1, r8, lsl #19
   148e0:			; <UNDEFINED> instruction: 0x000149b0
   148e4:	ldrdeq	r4, [r1], -r8
   148e8:	andeq	r4, r1, r0, lsl sl
   148ec:			; <UNDEFINED> instruction: 0x00014ab8
   148f0:	andeq	r4, r1, r0, ror #20
   148f4:	sub	sp, fp, #24
   148f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148fc:	movw	r1, #25767	; 0x64a7
   14900:	movt	r1, #1
   14904:	b	14a68 <__assert_fail@plt+0x3a54>
   14908:	movw	r1, #25448	; 0x6368
   1490c:	mov	r0, #0
   14910:	mov	r2, #5
   14914:	movt	r1, #1
   14918:	bl	10e4c <dcgettext@plt>
   1491c:	ldr	r3, [r7]
   14920:	mov	r2, r0
   14924:	mov	r0, r8
   14928:	mov	r1, #1
   1492c:	sub	sp, fp, #24
   14930:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14934:	b	10f6c <__fprintf_chk@plt>
   14938:	movw	r1, #25464	; 0x6378
   1493c:	mov	r0, #0
   14940:	mov	r2, #5
   14944:	movt	r1, #1
   14948:	bl	10e4c <dcgettext@plt>
   1494c:	mov	r2, r0
   14950:	ldr	r3, [r7]
   14954:	ldr	r0, [r7, #4]
   14958:	str	r0, [sp]
   1495c:	b	14a4c <__assert_fail@plt+0x3a38>
   14960:	movw	r1, #25487	; 0x638f
   14964:	mov	r0, #0
   14968:	mov	r2, #5
   1496c:	movt	r1, #1
   14970:	bl	10e4c <dcgettext@plt>
   14974:	mov	r2, r0
   14978:	ldr	r3, [r7]
   1497c:	ldmib	r7, {r0, r1}
   14980:	stm	sp, {r0, r1}
   14984:	b	14a4c <__assert_fail@plt+0x3a38>
   14988:	movw	r1, #25515	; 0x63ab
   1498c:	mov	r0, #0
   14990:	mov	r2, #5
   14994:	movt	r1, #1
   14998:	bl	10e4c <dcgettext@plt>
   1499c:	ldr	r3, [r7]
   149a0:	mov	r2, r0
   149a4:	ldmib	r7, {r0, r1, r7}
   149a8:	stm	sp, {r0, r1, r7}
   149ac:	b	14a4c <__assert_fail@plt+0x3a38>
   149b0:	movw	r1, #25547	; 0x63cb
   149b4:	mov	r0, #0
   149b8:	mov	r2, #5
   149bc:	movt	r1, #1
   149c0:	bl	10e4c <dcgettext@plt>
   149c4:	ldr	r3, [r7]
   149c8:	mov	r2, r0
   149cc:	ldmib	r7, {r0, r1, r6, r7}
   149d0:	stm	sp, {r0, r1, r6, r7}
   149d4:	b	14a4c <__assert_fail@plt+0x3a38>
   149d8:	movw	r1, #25583	; 0x63ef
   149dc:	mov	r0, #0
   149e0:	mov	r2, #5
   149e4:	movt	r1, #1
   149e8:	bl	10e4c <dcgettext@plt>
   149ec:	mov	r2, r0
   149f0:	ldr	r3, [r7]
   149f4:	ldmib	r7, {r0, r1, r6}
   149f8:	ldr	r5, [r7, #16]
   149fc:	ldr	r7, [r7, #20]
   14a00:	stm	sp, {r0, r1, r6}
   14a04:	str	r5, [sp, #12]
   14a08:	str	r7, [sp, #16]
   14a0c:	b	14a4c <__assert_fail@plt+0x3a38>
   14a10:	movw	r1, #25623	; 0x6417
   14a14:	mov	r0, #0
   14a18:	mov	r2, #5
   14a1c:	movt	r1, #1
   14a20:	bl	10e4c <dcgettext@plt>
   14a24:	mov	r2, r0
   14a28:	ldr	r3, [r7]
   14a2c:	ldmib	r7, {r0, r1, r6}
   14a30:	ldr	r5, [r7, #16]
   14a34:	ldr	r4, [r7, #20]
   14a38:	ldr	r7, [r7, #24]
   14a3c:	stm	sp, {r0, r1, r6}
   14a40:	str	r5, [sp, #12]
   14a44:	str	r4, [sp, #16]
   14a48:	str	r7, [sp, #20]
   14a4c:	mov	r0, r8
   14a50:	mov	r1, #1
   14a54:	bl	10f6c <__fprintf_chk@plt>
   14a58:	sub	sp, fp, #24
   14a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a60:	movw	r1, #25715	; 0x6473
   14a64:	movt	r1, #1
   14a68:	mov	r0, #0
   14a6c:	mov	r2, #5
   14a70:	bl	10e4c <dcgettext@plt>
   14a74:	mov	ip, r0
   14a78:	ldr	r3, [r7]
   14a7c:	ldr	r0, [r7, #4]
   14a80:	ldr	r1, [r7, #8]
   14a84:	ldr	r6, [r7, #12]
   14a88:	ldr	r5, [r7, #16]
   14a8c:	ldr	r4, [r7, #20]
   14a90:	ldr	r2, [r7, #24]
   14a94:	ldr	lr, [r7, #28]
   14a98:	ldr	r7, [r7, #32]
   14a9c:	stm	sp, {r0, r1, r6}
   14aa0:	str	r5, [sp, #12]
   14aa4:	str	r4, [sp, #16]
   14aa8:	str	r2, [sp, #20]
   14aac:	str	lr, [sp, #24]
   14ab0:	str	r7, [sp, #28]
   14ab4:	b	14afc <__assert_fail@plt+0x3ae8>
   14ab8:	movw	r1, #25667	; 0x6443
   14abc:	mov	r0, #0
   14ac0:	mov	r2, #5
   14ac4:	movt	r1, #1
   14ac8:	bl	10e4c <dcgettext@plt>
   14acc:	mov	ip, r0
   14ad0:	ldr	r3, [r7]
   14ad4:	ldmib	r7, {r0, r1, r6}
   14ad8:	ldr	r5, [r7, #16]
   14adc:	ldr	r4, [r7, #20]
   14ae0:	ldr	r2, [r7, #24]
   14ae4:	ldr	r7, [r7, #28]
   14ae8:	stm	sp, {r0, r1, r6}
   14aec:	str	r5, [sp, #12]
   14af0:	str	r4, [sp, #16]
   14af4:	str	r2, [sp, #20]
   14af8:	str	r7, [sp, #24]
   14afc:	mov	r0, r8
   14b00:	mov	r1, #1
   14b04:	mov	r2, ip
   14b08:	bl	10f6c <__fprintf_chk@plt>
   14b0c:	sub	sp, fp, #24
   14b10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b14:	push	{r4, sl, fp, lr}
   14b18:	add	fp, sp, #8
   14b1c:	sub	sp, sp, #8
   14b20:	ldr	ip, [fp, #8]
   14b24:	mov	lr, #0
   14b28:	ldr	r4, [ip, lr, lsl #2]
   14b2c:	add	lr, lr, #1
   14b30:	cmp	r4, #0
   14b34:	bne	14b28 <__assert_fail@plt+0x3b14>
   14b38:	sub	r4, lr, #1
   14b3c:	str	ip, [sp]
   14b40:	str	r4, [sp, #4]
   14b44:	bl	147d8 <__assert_fail@plt+0x37c4>
   14b48:	sub	sp, fp, #8
   14b4c:	pop	{r4, sl, fp, pc}
   14b50:	push	{fp, lr}
   14b54:	mov	fp, sp
   14b58:	sub	sp, sp, #48	; 0x30
   14b5c:	ldr	ip, [fp, #8]
   14b60:	ldr	lr, [ip]
   14b64:	cmp	lr, #0
   14b68:	str	lr, [sp, #8]
   14b6c:	beq	14c08 <__assert_fail@plt+0x3bf4>
   14b70:	ldr	lr, [ip, #4]
   14b74:	cmp	lr, #0
   14b78:	str	lr, [sp, #12]
   14b7c:	beq	14c10 <__assert_fail@plt+0x3bfc>
   14b80:	ldr	lr, [ip, #8]
   14b84:	cmp	lr, #0
   14b88:	str	lr, [sp, #16]
   14b8c:	beq	14c18 <__assert_fail@plt+0x3c04>
   14b90:	ldr	lr, [ip, #12]
   14b94:	cmp	lr, #0
   14b98:	str	lr, [sp, #20]
   14b9c:	beq	14c20 <__assert_fail@plt+0x3c0c>
   14ba0:	ldr	lr, [ip, #16]
   14ba4:	cmp	lr, #0
   14ba8:	str	lr, [sp, #24]
   14bac:	beq	14c28 <__assert_fail@plt+0x3c14>
   14bb0:	ldr	lr, [ip, #20]
   14bb4:	cmp	lr, #0
   14bb8:	str	lr, [sp, #28]
   14bbc:	beq	14c30 <__assert_fail@plt+0x3c1c>
   14bc0:	ldr	lr, [ip, #24]
   14bc4:	cmp	lr, #0
   14bc8:	str	lr, [sp, #32]
   14bcc:	beq	14c38 <__assert_fail@plt+0x3c24>
   14bd0:	ldr	lr, [ip, #28]
   14bd4:	cmp	lr, #0
   14bd8:	str	lr, [sp, #36]	; 0x24
   14bdc:	beq	14c40 <__assert_fail@plt+0x3c2c>
   14be0:	ldr	lr, [ip, #32]
   14be4:	cmp	lr, #0
   14be8:	str	lr, [sp, #40]	; 0x28
   14bec:	beq	14c48 <__assert_fail@plt+0x3c34>
   14bf0:	ldr	lr, [ip, #36]	; 0x24
   14bf4:	mov	ip, #10
   14bf8:	cmp	lr, #0
   14bfc:	str	lr, [sp, #44]	; 0x2c
   14c00:	movweq	ip, #9
   14c04:	b	14c4c <__assert_fail@plt+0x3c38>
   14c08:	mov	ip, #0
   14c0c:	b	14c4c <__assert_fail@plt+0x3c38>
   14c10:	mov	ip, #1
   14c14:	b	14c4c <__assert_fail@plt+0x3c38>
   14c18:	mov	ip, #2
   14c1c:	b	14c4c <__assert_fail@plt+0x3c38>
   14c20:	mov	ip, #3
   14c24:	b	14c4c <__assert_fail@plt+0x3c38>
   14c28:	mov	ip, #4
   14c2c:	b	14c4c <__assert_fail@plt+0x3c38>
   14c30:	mov	ip, #5
   14c34:	b	14c4c <__assert_fail@plt+0x3c38>
   14c38:	mov	ip, #6
   14c3c:	b	14c4c <__assert_fail@plt+0x3c38>
   14c40:	mov	ip, #7
   14c44:	b	14c4c <__assert_fail@plt+0x3c38>
   14c48:	mov	ip, #8
   14c4c:	add	lr, sp, #8
   14c50:	str	ip, [sp, #4]
   14c54:	str	lr, [sp]
   14c58:	bl	147d8 <__assert_fail@plt+0x37c4>
   14c5c:	mov	sp, fp
   14c60:	pop	{fp, pc}
   14c64:	push	{fp, lr}
   14c68:	mov	fp, sp
   14c6c:	sub	sp, sp, #56	; 0x38
   14c70:	add	ip, fp, #8
   14c74:	str	ip, [sp, #12]
   14c78:	ldr	lr, [fp, #8]
   14c7c:	cmp	lr, #0
   14c80:	str	lr, [sp, #16]
   14c84:	beq	14d20 <__assert_fail@plt+0x3d0c>
   14c88:	ldr	lr, [ip, #4]
   14c8c:	cmp	lr, #0
   14c90:	str	lr, [sp, #20]
   14c94:	beq	14d28 <__assert_fail@plt+0x3d14>
   14c98:	ldr	lr, [ip, #8]
   14c9c:	cmp	lr, #0
   14ca0:	str	lr, [sp, #24]
   14ca4:	beq	14d30 <__assert_fail@plt+0x3d1c>
   14ca8:	ldr	lr, [ip, #12]
   14cac:	cmp	lr, #0
   14cb0:	str	lr, [sp, #28]
   14cb4:	beq	14d38 <__assert_fail@plt+0x3d24>
   14cb8:	ldr	lr, [ip, #16]
   14cbc:	cmp	lr, #0
   14cc0:	str	lr, [sp, #32]
   14cc4:	beq	14d40 <__assert_fail@plt+0x3d2c>
   14cc8:	ldr	lr, [ip, #20]
   14ccc:	cmp	lr, #0
   14cd0:	str	lr, [sp, #36]	; 0x24
   14cd4:	beq	14d48 <__assert_fail@plt+0x3d34>
   14cd8:	ldr	lr, [ip, #24]
   14cdc:	cmp	lr, #0
   14ce0:	str	lr, [sp, #40]	; 0x28
   14ce4:	beq	14d50 <__assert_fail@plt+0x3d3c>
   14ce8:	ldr	lr, [ip, #28]
   14cec:	cmp	lr, #0
   14cf0:	str	lr, [sp, #44]	; 0x2c
   14cf4:	beq	14d58 <__assert_fail@plt+0x3d44>
   14cf8:	ldr	lr, [ip, #32]
   14cfc:	cmp	lr, #0
   14d00:	str	lr, [sp, #48]	; 0x30
   14d04:	beq	14d60 <__assert_fail@plt+0x3d4c>
   14d08:	ldr	lr, [ip, #36]	; 0x24
   14d0c:	mov	ip, #10
   14d10:	cmp	lr, #0
   14d14:	str	lr, [sp, #52]	; 0x34
   14d18:	movweq	ip, #9
   14d1c:	b	14d64 <__assert_fail@plt+0x3d50>
   14d20:	mov	ip, #0
   14d24:	b	14d64 <__assert_fail@plt+0x3d50>
   14d28:	mov	ip, #1
   14d2c:	b	14d64 <__assert_fail@plt+0x3d50>
   14d30:	mov	ip, #2
   14d34:	b	14d64 <__assert_fail@plt+0x3d50>
   14d38:	mov	ip, #3
   14d3c:	b	14d64 <__assert_fail@plt+0x3d50>
   14d40:	mov	ip, #4
   14d44:	b	14d64 <__assert_fail@plt+0x3d50>
   14d48:	mov	ip, #5
   14d4c:	b	14d64 <__assert_fail@plt+0x3d50>
   14d50:	mov	ip, #6
   14d54:	b	14d64 <__assert_fail@plt+0x3d50>
   14d58:	mov	ip, #7
   14d5c:	b	14d64 <__assert_fail@plt+0x3d50>
   14d60:	mov	ip, #8
   14d64:	add	lr, sp, #16
   14d68:	str	ip, [sp, #4]
   14d6c:	str	lr, [sp]
   14d70:	bl	147d8 <__assert_fail@plt+0x37c4>
   14d74:	mov	sp, fp
   14d78:	pop	{fp, pc}
   14d7c:	push	{fp, lr}
   14d80:	mov	fp, sp
   14d84:	movw	r0, #29004	; 0x714c
   14d88:	movt	r0, #2
   14d8c:	ldr	r1, [r0]
   14d90:	movw	r0, #23872	; 0x5d40
   14d94:	movt	r0, #1
   14d98:	bl	10dd4 <fputs_unlocked@plt>
   14d9c:	movw	r1, #25827	; 0x64e3
   14da0:	mov	r0, #0
   14da4:	mov	r2, #5
   14da8:	movt	r1, #1
   14dac:	bl	10e4c <dcgettext@plt>
   14db0:	movw	r2, #25847	; 0x64f7
   14db4:	mov	r1, r0
   14db8:	mov	r0, #1
   14dbc:	movt	r2, #1
   14dc0:	bl	10f54 <__printf_chk@plt>
   14dc4:	movw	r1, #25869	; 0x650d
   14dc8:	mov	r0, #0
   14dcc:	mov	r2, #5
   14dd0:	movt	r1, #1
   14dd4:	bl	10e4c <dcgettext@plt>
   14dd8:	movw	r2, #23374	; 0x5b4e
   14ddc:	movw	r3, #23681	; 0x5c81
   14de0:	mov	r1, r0
   14de4:	mov	r0, #1
   14de8:	movt	r2, #1
   14dec:	movt	r3, #1
   14df0:	bl	10f54 <__printf_chk@plt>
   14df4:	movw	r1, #25889	; 0x6521
   14df8:	mov	r0, #0
   14dfc:	mov	r2, #5
   14e00:	movt	r1, #1
   14e04:	bl	10e4c <dcgettext@plt>
   14e08:	movw	r2, #25928	; 0x6548
   14e0c:	mov	r1, r0
   14e10:	mov	r0, #1
   14e14:	movt	r2, #1
   14e18:	pop	{fp, lr}
   14e1c:	b	10f54 <__printf_chk@plt>
   14e20:	push	{r4, r5, r6, sl, fp, lr}
   14e24:	add	fp, sp, #16
   14e28:	mov	r4, r2
   14e2c:	mov	r5, r1
   14e30:	mov	r6, r0
   14e34:	bl	15610 <__assert_fail@plt+0x45fc>
   14e38:	cmp	r0, #0
   14e3c:	popne	{r4, r5, r6, sl, fp, pc}
   14e40:	cmp	r6, #0
   14e44:	beq	14e58 <__assert_fail@plt+0x3e44>
   14e48:	cmp	r5, #0
   14e4c:	cmpne	r4, #0
   14e50:	bne	14e58 <__assert_fail@plt+0x3e44>
   14e54:	pop	{r4, r5, r6, sl, fp, pc}
   14e58:	bl	153d4 <__assert_fail@plt+0x43c0>
   14e5c:	push	{r4, r5, r6, sl, fp, lr}
   14e60:	add	fp, sp, #16
   14e64:	mov	r4, r2
   14e68:	mov	r5, r1
   14e6c:	mov	r6, r0
   14e70:	bl	15610 <__assert_fail@plt+0x45fc>
   14e74:	cmp	r0, #0
   14e78:	popne	{r4, r5, r6, sl, fp, pc}
   14e7c:	cmp	r6, #0
   14e80:	beq	14e94 <__assert_fail@plt+0x3e80>
   14e84:	cmp	r5, #0
   14e88:	cmpne	r4, #0
   14e8c:	bne	14e94 <__assert_fail@plt+0x3e80>
   14e90:	pop	{r4, r5, r6, sl, fp, pc}
   14e94:	bl	153d4 <__assert_fail@plt+0x43c0>
   14e98:	push	{fp, lr}
   14e9c:	mov	fp, sp
   14ea0:	bl	1546c <__assert_fail@plt+0x4458>
   14ea4:	cmp	r0, #0
   14ea8:	popne	{fp, pc}
   14eac:	bl	153d4 <__assert_fail@plt+0x43c0>
   14eb0:	push	{fp, lr}
   14eb4:	mov	fp, sp
   14eb8:	bl	1546c <__assert_fail@plt+0x4458>
   14ebc:	cmp	r0, #0
   14ec0:	popne	{fp, pc}
   14ec4:	bl	153d4 <__assert_fail@plt+0x43c0>
   14ec8:	push	{fp, lr}
   14ecc:	mov	fp, sp
   14ed0:	bl	1546c <__assert_fail@plt+0x4458>
   14ed4:	cmp	r0, #0
   14ed8:	popne	{fp, pc}
   14edc:	bl	153d4 <__assert_fail@plt+0x43c0>
   14ee0:	push	{r4, r5, fp, lr}
   14ee4:	add	fp, sp, #8
   14ee8:	mov	r4, r1
   14eec:	mov	r5, r0
   14ef0:	bl	1549c <__assert_fail@plt+0x4488>
   14ef4:	cmp	r0, #0
   14ef8:	popne	{r4, r5, fp, pc}
   14efc:	cmp	r5, #0
   14f00:	beq	14f10 <__assert_fail@plt+0x3efc>
   14f04:	cmp	r4, #0
   14f08:	bne	14f10 <__assert_fail@plt+0x3efc>
   14f0c:	pop	{r4, r5, fp, pc}
   14f10:	bl	153d4 <__assert_fail@plt+0x43c0>
   14f14:	push	{fp, lr}
   14f18:	mov	fp, sp
   14f1c:	cmp	r1, #0
   14f20:	orreq	r1, r1, #1
   14f24:	bl	1549c <__assert_fail@plt+0x4488>
   14f28:	cmp	r0, #0
   14f2c:	popne	{fp, pc}
   14f30:	bl	153d4 <__assert_fail@plt+0x43c0>
   14f34:	push	{fp, lr}
   14f38:	mov	fp, sp
   14f3c:	clz	r3, r2
   14f40:	lsr	ip, r3, #5
   14f44:	clz	r3, r1
   14f48:	lsr	r3, r3, #5
   14f4c:	orrs	r3, r3, ip
   14f50:	movwne	r1, #1
   14f54:	movwne	r2, #1
   14f58:	bl	15610 <__assert_fail@plt+0x45fc>
   14f5c:	cmp	r0, #0
   14f60:	popne	{fp, pc}
   14f64:	bl	153d4 <__assert_fail@plt+0x43c0>
   14f68:	push	{fp, lr}
   14f6c:	mov	fp, sp
   14f70:	mov	r2, r1
   14f74:	mov	r1, r0
   14f78:	mov	r0, #0
   14f7c:	bl	15610 <__assert_fail@plt+0x45fc>
   14f80:	cmp	r0, #0
   14f84:	popne	{fp, pc}
   14f88:	bl	153d4 <__assert_fail@plt+0x43c0>
   14f8c:	push	{fp, lr}
   14f90:	mov	fp, sp
   14f94:	mov	r2, r1
   14f98:	mov	r1, r0
   14f9c:	clz	r0, r2
   14fa0:	clz	r3, r1
   14fa4:	lsr	r0, r0, #5
   14fa8:	lsr	r3, r3, #5
   14fac:	orrs	r0, r3, r0
   14fb0:	mov	r0, #0
   14fb4:	movwne	r1, #1
   14fb8:	movwne	r2, #1
   14fbc:	bl	15610 <__assert_fail@plt+0x45fc>
   14fc0:	cmp	r0, #0
   14fc4:	popne	{fp, pc}
   14fc8:	bl	153d4 <__assert_fail@plt+0x43c0>
   14fcc:	push	{r4, r5, r6, sl, fp, lr}
   14fd0:	add	fp, sp, #16
   14fd4:	ldr	r5, [r1]
   14fd8:	mov	r4, r1
   14fdc:	mov	r6, r0
   14fe0:	cmp	r0, #0
   14fe4:	beq	14ffc <__assert_fail@plt+0x3fe8>
   14fe8:	mov	r0, #1
   14fec:	add	r0, r0, r5, lsr #1
   14ff0:	adds	r5, r5, r0
   14ff4:	bcc	15004 <__assert_fail@plt+0x3ff0>
   14ff8:	b	15040 <__assert_fail@plt+0x402c>
   14ffc:	cmp	r5, #0
   15000:	movweq	r5, #64	; 0x40
   15004:	mov	r0, r6
   15008:	mov	r1, r5
   1500c:	mov	r2, #1
   15010:	bl	15610 <__assert_fail@plt+0x45fc>
   15014:	cmp	r5, #0
   15018:	mov	r1, r5
   1501c:	movwne	r1, #1
   15020:	cmp	r0, #0
   15024:	bne	15038 <__assert_fail@plt+0x4024>
   15028:	clz	r2, r6
   1502c:	lsr	r2, r2, #5
   15030:	orrs	r1, r2, r1
   15034:	bne	15040 <__assert_fail@plt+0x402c>
   15038:	str	r5, [r4]
   1503c:	pop	{r4, r5, r6, sl, fp, pc}
   15040:	bl	153d4 <__assert_fail@plt+0x43c0>
   15044:	push	{r4, r5, r6, r7, fp, lr}
   15048:	add	fp, sp, #16
   1504c:	ldr	r5, [r1]
   15050:	mov	r6, r2
   15054:	mov	r4, r1
   15058:	mov	r7, r0
   1505c:	cmp	r0, #0
   15060:	beq	15078 <__assert_fail@plt+0x4064>
   15064:	mov	r0, #1
   15068:	add	r0, r0, r5, lsr #1
   1506c:	adds	r5, r5, r0
   15070:	bcc	15090 <__assert_fail@plt+0x407c>
   15074:	b	150c4 <__assert_fail@plt+0x40b0>
   15078:	cmp	r5, #0
   1507c:	bne	15090 <__assert_fail@plt+0x407c>
   15080:	mov	r0, #64	; 0x40
   15084:	cmp	r6, #64	; 0x40
   15088:	udiv	r5, r0, r6
   1508c:	addhi	r5, r5, #1
   15090:	mov	r0, r7
   15094:	mov	r1, r5
   15098:	mov	r2, r6
   1509c:	bl	15610 <__assert_fail@plt+0x45fc>
   150a0:	cmp	r0, #0
   150a4:	bne	150bc <__assert_fail@plt+0x40a8>
   150a8:	cmp	r7, #0
   150ac:	beq	150c4 <__assert_fail@plt+0x40b0>
   150b0:	cmp	r6, #0
   150b4:	cmpne	r5, #0
   150b8:	bne	150c4 <__assert_fail@plt+0x40b0>
   150bc:	str	r5, [r4]
   150c0:	pop	{r4, r5, r6, r7, fp, pc}
   150c4:	bl	153d4 <__assert_fail@plt+0x43c0>
   150c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150cc:	add	fp, sp, #24
   150d0:	mov	r8, r1
   150d4:	ldr	r1, [r1]
   150d8:	mov	r5, r0
   150dc:	add	r0, r1, r1, asr #1
   150e0:	cmp	r0, r1
   150e4:	mvnvs	r0, #-2147483648	; 0x80000000
   150e8:	cmp	r0, r3
   150ec:	mov	r7, r0
   150f0:	movgt	r7, r3
   150f4:	cmn	r3, #1
   150f8:	movle	r7, r0
   150fc:	ldr	r0, [fp, #8]
   15100:	cmn	r0, #1
   15104:	ble	1512c <__assert_fail@plt+0x4118>
   15108:	cmp	r0, #0
   1510c:	beq	15180 <__assert_fail@plt+0x416c>
   15110:	cmn	r7, #1
   15114:	ble	15154 <__assert_fail@plt+0x4140>
   15118:	mvn	r4, #-2147483648	; 0x80000000
   1511c:	udiv	r6, r4, r0
   15120:	cmp	r6, r7
   15124:	bge	15180 <__assert_fail@plt+0x416c>
   15128:	b	15190 <__assert_fail@plt+0x417c>
   1512c:	cmn	r7, #1
   15130:	ble	15170 <__assert_fail@plt+0x415c>
   15134:	cmn	r0, #1
   15138:	beq	15180 <__assert_fail@plt+0x416c>
   1513c:	mov	r6, #-2147483648	; 0x80000000
   15140:	mvn	r4, #-2147483648	; 0x80000000
   15144:	sdiv	r6, r6, r0
   15148:	cmp	r6, r7
   1514c:	bge	15180 <__assert_fail@plt+0x416c>
   15150:	b	15190 <__assert_fail@plt+0x417c>
   15154:	beq	15180 <__assert_fail@plt+0x416c>
   15158:	mov	r6, #-2147483648	; 0x80000000
   1515c:	mvn	r4, #-2147483648	; 0x80000000
   15160:	sdiv	r6, r6, r7
   15164:	cmp	r6, r0
   15168:	bge	15180 <__assert_fail@plt+0x416c>
   1516c:	b	15190 <__assert_fail@plt+0x417c>
   15170:	mvn	r4, #-2147483648	; 0x80000000
   15174:	sdiv	r6, r4, r0
   15178:	cmp	r7, r6
   1517c:	blt	15190 <__assert_fail@plt+0x417c>
   15180:	mul	r6, r7, r0
   15184:	mov	r4, #64	; 0x40
   15188:	cmp	r6, #63	; 0x3f
   1518c:	bgt	15198 <__assert_fail@plt+0x4184>
   15190:	sdiv	r7, r4, r0
   15194:	mul	r6, r7, r0
   15198:	cmp	r5, #0
   1519c:	moveq	r4, #0
   151a0:	streq	r4, [r8]
   151a4:	sub	r4, r7, r1
   151a8:	cmp	r4, r2
   151ac:	bge	15258 <__assert_fail@plt+0x4244>
   151b0:	add	r7, r1, r2
   151b4:	mov	r6, #0
   151b8:	mov	r2, #0
   151bc:	cmp	r7, r3
   151c0:	movwgt	r6, #1
   151c4:	cmn	r3, #1
   151c8:	movwgt	r2, #1
   151cc:	cmp	r7, r1
   151d0:	bvs	1528c <__assert_fail@plt+0x4278>
   151d4:	ands	r1, r2, r6
   151d8:	bne	1528c <__assert_fail@plt+0x4278>
   151dc:	cmn	r0, #1
   151e0:	ble	15208 <__assert_fail@plt+0x41f4>
   151e4:	cmp	r0, #0
   151e8:	beq	15254 <__assert_fail@plt+0x4240>
   151ec:	cmn	r7, #1
   151f0:	ble	1522c <__assert_fail@plt+0x4218>
   151f4:	mvn	r1, #-2147483648	; 0x80000000
   151f8:	udiv	r1, r1, r0
   151fc:	cmp	r1, r7
   15200:	bge	15254 <__assert_fail@plt+0x4240>
   15204:	b	1528c <__assert_fail@plt+0x4278>
   15208:	cmn	r7, #1
   1520c:	ble	15244 <__assert_fail@plt+0x4230>
   15210:	cmn	r0, #1
   15214:	beq	15254 <__assert_fail@plt+0x4240>
   15218:	mov	r1, #-2147483648	; 0x80000000
   1521c:	sdiv	r1, r1, r0
   15220:	cmp	r1, r7
   15224:	bge	15254 <__assert_fail@plt+0x4240>
   15228:	b	1528c <__assert_fail@plt+0x4278>
   1522c:	beq	15254 <__assert_fail@plt+0x4240>
   15230:	mov	r1, #-2147483648	; 0x80000000
   15234:	sdiv	r1, r1, r7
   15238:	cmp	r1, r0
   1523c:	bge	15254 <__assert_fail@plt+0x4240>
   15240:	b	1528c <__assert_fail@plt+0x4278>
   15244:	mvn	r1, #-2147483648	; 0x80000000
   15248:	sdiv	r1, r1, r0
   1524c:	cmp	r7, r1
   15250:	blt	1528c <__assert_fail@plt+0x4278>
   15254:	mul	r6, r7, r0
   15258:	mov	r0, r5
   1525c:	mov	r1, r6
   15260:	bl	1549c <__assert_fail@plt+0x4488>
   15264:	cmp	r6, #0
   15268:	movwne	r6, #1
   1526c:	cmp	r0, #0
   15270:	bne	15284 <__assert_fail@plt+0x4270>
   15274:	clz	r1, r5
   15278:	lsr	r1, r1, #5
   1527c:	orrs	r1, r1, r6
   15280:	bne	1528c <__assert_fail@plt+0x4278>
   15284:	str	r7, [r8]
   15288:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1528c:	bl	153d4 <__assert_fail@plt+0x43c0>
   15290:	push	{fp, lr}
   15294:	mov	fp, sp
   15298:	mov	r1, #1
   1529c:	bl	15418 <__assert_fail@plt+0x4404>
   152a0:	cmp	r0, #0
   152a4:	popne	{fp, pc}
   152a8:	bl	153d4 <__assert_fail@plt+0x43c0>
   152ac:	push	{fp, lr}
   152b0:	mov	fp, sp
   152b4:	bl	15418 <__assert_fail@plt+0x4404>
   152b8:	cmp	r0, #0
   152bc:	popne	{fp, pc}
   152c0:	bl	153d4 <__assert_fail@plt+0x43c0>
   152c4:	push	{fp, lr}
   152c8:	mov	fp, sp
   152cc:	mov	r1, #1
   152d0:	bl	15418 <__assert_fail@plt+0x4404>
   152d4:	cmp	r0, #0
   152d8:	popne	{fp, pc}
   152dc:	bl	153d4 <__assert_fail@plt+0x43c0>
   152e0:	push	{fp, lr}
   152e4:	mov	fp, sp
   152e8:	bl	15418 <__assert_fail@plt+0x4404>
   152ec:	cmp	r0, #0
   152f0:	popne	{fp, pc}
   152f4:	bl	153d4 <__assert_fail@plt+0x43c0>
   152f8:	push	{r4, r5, fp, lr}
   152fc:	add	fp, sp, #8
   15300:	mov	r5, r0
   15304:	mov	r0, r1
   15308:	mov	r4, r1
   1530c:	bl	1546c <__assert_fail@plt+0x4458>
   15310:	cmp	r0, #0
   15314:	beq	15328 <__assert_fail@plt+0x4314>
   15318:	mov	r1, r5
   1531c:	mov	r2, r4
   15320:	pop	{r4, r5, fp, lr}
   15324:	b	10e28 <memcpy@plt>
   15328:	bl	153d4 <__assert_fail@plt+0x43c0>
   1532c:	push	{r4, r5, fp, lr}
   15330:	add	fp, sp, #8
   15334:	mov	r5, r0
   15338:	mov	r0, r1
   1533c:	mov	r4, r1
   15340:	bl	1546c <__assert_fail@plt+0x4458>
   15344:	cmp	r0, #0
   15348:	beq	1535c <__assert_fail@plt+0x4348>
   1534c:	mov	r1, r5
   15350:	mov	r2, r4
   15354:	pop	{r4, r5, fp, lr}
   15358:	b	10e28 <memcpy@plt>
   1535c:	bl	153d4 <__assert_fail@plt+0x43c0>
   15360:	push	{r4, r5, fp, lr}
   15364:	add	fp, sp, #8
   15368:	mov	r5, r0
   1536c:	add	r0, r1, #1
   15370:	mov	r4, r1
   15374:	bl	1546c <__assert_fail@plt+0x4458>
   15378:	cmp	r0, #0
   1537c:	beq	15398 <__assert_fail@plt+0x4384>
   15380:	mov	r1, #0
   15384:	mov	r2, r4
   15388:	strb	r1, [r0, r4]
   1538c:	mov	r1, r5
   15390:	pop	{r4, r5, fp, lr}
   15394:	b	10e28 <memcpy@plt>
   15398:	bl	153d4 <__assert_fail@plt+0x43c0>
   1539c:	push	{r4, r5, fp, lr}
   153a0:	add	fp, sp, #8
   153a4:	mov	r4, r0
   153a8:	bl	10f24 <strlen@plt>
   153ac:	add	r5, r0, #1
   153b0:	mov	r0, r5
   153b4:	bl	1546c <__assert_fail@plt+0x4458>
   153b8:	cmp	r0, #0
   153bc:	beq	153d0 <__assert_fail@plt+0x43bc>
   153c0:	mov	r1, r4
   153c4:	mov	r2, r5
   153c8:	pop	{r4, r5, fp, lr}
   153cc:	b	10e28 <memcpy@plt>
   153d0:	bl	153d4 <__assert_fail@plt+0x43c0>
   153d4:	push	{fp, lr}
   153d8:	mov	fp, sp
   153dc:	movw	r0, #28908	; 0x70ec
   153e0:	movw	r1, #26004	; 0x6594
   153e4:	mov	r2, #5
   153e8:	movt	r0, #2
   153ec:	movt	r1, #1
   153f0:	ldr	r4, [r0]
   153f4:	mov	r0, #0
   153f8:	bl	10e4c <dcgettext@plt>
   153fc:	movw	r2, #24277	; 0x5ed5
   15400:	mov	r3, r0
   15404:	mov	r0, r4
   15408:	mov	r1, #0
   1540c:	movt	r2, #1
   15410:	bl	10eb8 <error@plt>
   15414:	bl	10ffc <abort@plt>
   15418:	clz	r2, r1
   1541c:	clz	r3, r0
   15420:	lsr	r2, r2, #5
   15424:	lsr	r3, r3, #5
   15428:	orrs	r2, r3, r2
   1542c:	movwne	r1, #1
   15430:	movwne	r0, #1
   15434:	cmp	r1, #0
   15438:	beq	15468 <__assert_fail@plt+0x4454>
   1543c:	mvn	r2, #-2147483648	; 0x80000000
   15440:	udiv	r2, r2, r1
   15444:	cmp	r2, r0
   15448:	bcs	15468 <__assert_fail@plt+0x4454>
   1544c:	push	{fp, lr}
   15450:	mov	fp, sp
   15454:	bl	10f30 <__errno_location@plt>
   15458:	mov	r1, #12
   1545c:	str	r1, [r0]
   15460:	mov	r0, #0
   15464:	pop	{fp, pc}
   15468:	b	10dc8 <calloc@plt>
   1546c:	cmp	r0, #0
   15470:	movweq	r0, #1
   15474:	cmn	r0, #1
   15478:	ble	15480 <__assert_fail@plt+0x446c>
   1547c:	b	10ec4 <malloc@plt>
   15480:	push	{fp, lr}
   15484:	mov	fp, sp
   15488:	bl	10f30 <__errno_location@plt>
   1548c:	mov	r1, #12
   15490:	str	r1, [r0]
   15494:	mov	r0, #0
   15498:	pop	{fp, pc}
   1549c:	push	{fp, lr}
   154a0:	mov	fp, sp
   154a4:	cmp	r0, #0
   154a8:	beq	154c4 <__assert_fail@plt+0x44b0>
   154ac:	cmp	r1, #0
   154b0:	beq	154d0 <__assert_fail@plt+0x44bc>
   154b4:	cmn	r1, #1
   154b8:	ble	154dc <__assert_fail@plt+0x44c8>
   154bc:	pop	{fp, lr}
   154c0:	b	10e58 <realloc@plt>
   154c4:	mov	r0, r1
   154c8:	pop	{fp, lr}
   154cc:	b	1546c <__assert_fail@plt+0x4458>
   154d0:	bl	1272c <__assert_fail@plt+0x1718>
   154d4:	mov	r0, #0
   154d8:	pop	{fp, pc}
   154dc:	bl	10f30 <__errno_location@plt>
   154e0:	mov	r1, #12
   154e4:	str	r1, [r0]
   154e8:	mov	r0, #0
   154ec:	pop	{fp, pc}
   154f0:	push	{r4, r5, r6, sl, fp, lr}
   154f4:	add	fp, sp, #16
   154f8:	mov	r4, r0
   154fc:	bl	10ea0 <__fpending@plt>
   15500:	ldr	r6, [r4]
   15504:	mov	r5, r0
   15508:	mov	r0, r4
   1550c:	bl	12634 <__assert_fail@plt+0x1620>
   15510:	tst	r6, #32
   15514:	bne	1554c <__assert_fail@plt+0x4538>
   15518:	cmp	r0, #0
   1551c:	mov	r4, r0
   15520:	mvnne	r4, #0
   15524:	cmp	r5, #0
   15528:	bne	15558 <__assert_fail@plt+0x4544>
   1552c:	cmp	r0, #0
   15530:	beq	15558 <__assert_fail@plt+0x4544>
   15534:	bl	10f30 <__errno_location@plt>
   15538:	ldr	r0, [r0]
   1553c:	subs	r4, r0, #9
   15540:	mvnne	r4, #0
   15544:	mov	r0, r4
   15548:	pop	{r4, r5, r6, sl, fp, pc}
   1554c:	mvn	r4, #0
   15550:	cmp	r0, #0
   15554:	beq	15560 <__assert_fail@plt+0x454c>
   15558:	mov	r0, r4
   1555c:	pop	{r4, r5, r6, sl, fp, pc}
   15560:	bl	10f30 <__errno_location@plt>
   15564:	mov	r1, #0
   15568:	str	r1, [r0]
   1556c:	mov	r0, r4
   15570:	pop	{r4, r5, r6, sl, fp, pc}
   15574:	push	{fp, lr}
   15578:	mov	fp, sp
   1557c:	mov	r0, #14
   15580:	bl	10fc0 <nl_langinfo@plt>
   15584:	movw	r1, #23873	; 0x5d41
   15588:	cmp	r0, #0
   1558c:	movt	r1, #1
   15590:	movne	r1, r0
   15594:	movw	r0, #26021	; 0x65a5
   15598:	ldrb	r2, [r1]
   1559c:	movt	r0, #1
   155a0:	cmp	r2, #0
   155a4:	movne	r0, r1
   155a8:	pop	{fp, pc}
   155ac:	push	{r4, r5, r6, r7, fp, lr}
   155b0:	add	fp, sp, #16
   155b4:	sub	sp, sp, #8
   155b8:	cmp	r0, #0
   155bc:	add	r5, sp, #4
   155c0:	mov	r7, r2
   155c4:	mov	r4, r1
   155c8:	movne	r5, r0
   155cc:	mov	r0, r5
   155d0:	bl	10eac <mbrtowc@plt>
   155d4:	mov	r6, r0
   155d8:	cmp	r7, #0
   155dc:	beq	15604 <__assert_fail@plt+0x45f0>
   155e0:	cmn	r6, #2
   155e4:	bcc	15604 <__assert_fail@plt+0x45f0>
   155e8:	mov	r0, #0
   155ec:	bl	1564c <__assert_fail@plt+0x4638>
   155f0:	cmp	r0, #0
   155f4:	bne	15604 <__assert_fail@plt+0x45f0>
   155f8:	ldrb	r0, [r4]
   155fc:	mov	r6, #1
   15600:	str	r0, [r5]
   15604:	mov	r0, r6
   15608:	sub	sp, fp, #16
   1560c:	pop	{r4, r5, r6, r7, fp, pc}
   15610:	cmp	r2, #0
   15614:	beq	15644 <__assert_fail@plt+0x4630>
   15618:	mvn	r3, #0
   1561c:	udiv	r3, r3, r2
   15620:	cmp	r3, r1
   15624:	bcs	15644 <__assert_fail@plt+0x4630>
   15628:	push	{fp, lr}
   1562c:	mov	fp, sp
   15630:	bl	10f30 <__errno_location@plt>
   15634:	mov	r1, #12
   15638:	str	r1, [r0]
   1563c:	mov	r0, #0
   15640:	pop	{fp, pc}
   15644:	mul	r1, r2, r1
   15648:	b	1549c <__assert_fail@plt+0x4488>
   1564c:	push	{r4, sl, fp, lr}
   15650:	add	fp, sp, #8
   15654:	sub	sp, sp, #264	; 0x108
   15658:	add	r1, sp, #7
   1565c:	movw	r2, #257	; 0x101
   15660:	bl	156b8 <__assert_fail@plt+0x46a4>
   15664:	mov	r4, #0
   15668:	cmp	r0, #0
   1566c:	bne	156ac <__assert_fail@plt+0x4698>
   15670:	movw	r1, #26027	; 0x65ab
   15674:	add	r0, sp, #7
   15678:	mov	r2, #2
   1567c:	movt	r1, #1
   15680:	bl	10f18 <bcmp@plt>
   15684:	cmp	r0, #0
   15688:	beq	156ac <__assert_fail@plt+0x4698>
   1568c:	movw	r1, #26029	; 0x65ad
   15690:	add	r0, sp, #7
   15694:	mov	r2, #6
   15698:	movt	r1, #1
   1569c:	bl	10f18 <bcmp@plt>
   156a0:	cmp	r0, #0
   156a4:	mov	r4, r0
   156a8:	movwne	r4, #1
   156ac:	mov	r0, r4
   156b0:	sub	sp, fp, #8
   156b4:	pop	{r4, sl, fp, pc}
   156b8:	push	{r4, r5, r6, r7, fp, lr}
   156bc:	add	fp, sp, #16
   156c0:	mov	r4, r1
   156c4:	mov	r1, #0
   156c8:	mov	r6, r2
   156cc:	bl	10fa8 <setlocale@plt>
   156d0:	cmp	r0, #0
   156d4:	beq	15704 <__assert_fail@plt+0x46f0>
   156d8:	mov	r7, r0
   156dc:	bl	10f24 <strlen@plt>
   156e0:	cmp	r0, r6
   156e4:	bcs	15720 <__assert_fail@plt+0x470c>
   156e8:	add	r2, r0, #1
   156ec:	mov	r0, r4
   156f0:	mov	r1, r7
   156f4:	bl	10e28 <memcpy@plt>
   156f8:	mov	r5, #0
   156fc:	mov	r0, r5
   15700:	pop	{r4, r5, r6, r7, fp, pc}
   15704:	mov	r5, #22
   15708:	cmp	r6, #0
   1570c:	beq	15748 <__assert_fail@plt+0x4734>
   15710:	mov	r0, #0
   15714:	strb	r0, [r4]
   15718:	mov	r0, r5
   1571c:	pop	{r4, r5, r6, r7, fp, pc}
   15720:	mov	r5, #34	; 0x22
   15724:	cmp	r6, #0
   15728:	beq	15748 <__assert_fail@plt+0x4734>
   1572c:	sub	r6, r6, #1
   15730:	mov	r0, r4
   15734:	mov	r1, r7
   15738:	mov	r2, r6
   1573c:	bl	10e28 <memcpy@plt>
   15740:	mov	r0, #0
   15744:	strb	r0, [r4, r6]
   15748:	mov	r0, r5
   1574c:	pop	{r4, r5, r6, r7, fp, pc}
   15750:	mov	r1, #0
   15754:	b	10fa8 <setlocale@plt>
   15758:	cmp	r3, #0
   1575c:	cmpeq	r2, #0
   15760:	bne	15778 <__assert_fail@plt+0x4764>
   15764:	cmp	r1, #0
   15768:	cmpeq	r0, #0
   1576c:	mvnne	r1, #0
   15770:	mvnne	r0, #0
   15774:	b	15794 <__assert_fail@plt+0x4780>
   15778:	sub	sp, sp, #8
   1577c:	push	{sp, lr}
   15780:	bl	157a4 <__assert_fail@plt+0x4790>
   15784:	ldr	lr, [sp, #4]
   15788:	add	sp, sp, #8
   1578c:	pop	{r2, r3}
   15790:	bx	lr
   15794:	push	{r1, lr}
   15798:	mov	r0, #8
   1579c:	bl	10de0 <raise@plt>
   157a0:	pop	{r1, pc}
   157a4:	cmp	r1, r3
   157a8:	cmpeq	r0, r2
   157ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157b0:	mov	r4, r0
   157b4:	movcc	r0, #0
   157b8:	mov	r5, r1
   157bc:	ldr	lr, [sp, #36]	; 0x24
   157c0:	movcc	r1, r0
   157c4:	bcc	158c0 <__assert_fail@plt+0x48ac>
   157c8:	cmp	r3, #0
   157cc:	clzeq	ip, r2
   157d0:	clzne	ip, r3
   157d4:	addeq	ip, ip, #32
   157d8:	cmp	r5, #0
   157dc:	clzeq	r1, r4
   157e0:	addeq	r1, r1, #32
   157e4:	clzne	r1, r5
   157e8:	sub	ip, ip, r1
   157ec:	sub	sl, ip, #32
   157f0:	lsl	r9, r3, ip
   157f4:	rsb	fp, ip, #32
   157f8:	orr	r9, r9, r2, lsl sl
   157fc:	orr	r9, r9, r2, lsr fp
   15800:	lsl	r8, r2, ip
   15804:	cmp	r5, r9
   15808:	cmpeq	r4, r8
   1580c:	movcc	r0, #0
   15810:	movcc	r1, r0
   15814:	bcc	15830 <__assert_fail@plt+0x481c>
   15818:	mov	r0, #1
   1581c:	subs	r4, r4, r8
   15820:	lsl	r1, r0, sl
   15824:	orr	r1, r1, r0, lsr fp
   15828:	lsl	r0, r0, ip
   1582c:	sbc	r5, r5, r9
   15830:	cmp	ip, #0
   15834:	beq	158c0 <__assert_fail@plt+0x48ac>
   15838:	lsr	r6, r8, #1
   1583c:	orr	r6, r6, r9, lsl #31
   15840:	lsr	r7, r9, #1
   15844:	mov	r2, ip
   15848:	b	1586c <__assert_fail@plt+0x4858>
   1584c:	subs	r3, r4, r6
   15850:	sbc	r8, r5, r7
   15854:	adds	r3, r3, r3
   15858:	adc	r8, r8, r8
   1585c:	adds	r4, r3, #1
   15860:	adc	r5, r8, #0
   15864:	subs	r2, r2, #1
   15868:	beq	15888 <__assert_fail@plt+0x4874>
   1586c:	cmp	r5, r7
   15870:	cmpeq	r4, r6
   15874:	bcs	1584c <__assert_fail@plt+0x4838>
   15878:	adds	r4, r4, r4
   1587c:	adc	r5, r5, r5
   15880:	subs	r2, r2, #1
   15884:	bne	1586c <__assert_fail@plt+0x4858>
   15888:	lsr	r3, r4, ip
   1588c:	orr	r3, r3, r5, lsl fp
   15890:	lsr	r2, r5, ip
   15894:	orr	r3, r3, r5, lsr sl
   15898:	adds	r0, r0, r4
   1589c:	mov	r4, r3
   158a0:	lsl	r3, r2, ip
   158a4:	orr	r3, r3, r4, lsl sl
   158a8:	lsl	ip, r4, ip
   158ac:	orr	r3, r3, r4, lsr fp
   158b0:	adc	r1, r1, r5
   158b4:	subs	r0, r0, ip
   158b8:	mov	r5, r2
   158bc:	sbc	r1, r1, r3
   158c0:	cmp	lr, #0
   158c4:	strdne	r4, [lr]
   158c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   158d0:	mov	r7, r0
   158d4:	ldr	r6, [pc, #72]	; 15924 <__assert_fail@plt+0x4910>
   158d8:	ldr	r5, [pc, #72]	; 15928 <__assert_fail@plt+0x4914>
   158dc:	add	r6, pc, r6
   158e0:	add	r5, pc, r5
   158e4:	sub	r6, r6, r5
   158e8:	mov	r8, r1
   158ec:	mov	r9, r2
   158f0:	bl	10da8 <calloc@plt-0x20>
   158f4:	asrs	r6, r6, #2
   158f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   158fc:	mov	r4, #0
   15900:	add	r4, r4, #1
   15904:	ldr	r3, [r5], #4
   15908:	mov	r2, r9
   1590c:	mov	r1, r8
   15910:	mov	r0, r7
   15914:	blx	r3
   15918:	cmp	r6, r4
   1591c:	bne	15900 <__assert_fail@plt+0x48ec>
   15920:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15924:	andeq	r1, r1, r8, lsr #12
   15928:	andeq	r1, r1, r0, lsr #12
   1592c:	bx	lr
   15930:	ldr	r3, [pc, #12]	; 15944 <__assert_fail@plt+0x4930>
   15934:	mov	r1, #0
   15938:	add	r3, pc, r3
   1593c:	ldr	r2, [r3]
   15940:	b	10f3c <__cxa_atexit@plt>
   15944:	muleq	r1, ip, r7

Disassembly of section .fini:

00015948 <.fini>:
   15948:	push	{r3, lr}
   1594c:	pop	{r3, pc}
