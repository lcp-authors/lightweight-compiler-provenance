
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

000109ac <.init>:
   109ac:	push	{r3, lr}
   109b0:	bl	10c44 <__assert_fail@plt+0xd4>
   109b4:	pop	{r3, pc}

Disassembly of section .plt:

000109b8 <calloc@plt-0x14>:
   109b8:	push	{lr}		; (str lr, [sp, #-4]!)
   109bc:	ldr	lr, [pc, #4]	; 109c8 <calloc@plt-0x4>
   109c0:	add	lr, pc, lr
   109c4:	ldr	pc, [lr, #8]!
   109c8:	andeq	r7, r1, r8, lsr r6

000109cc <calloc@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #94208	; 0x17000
   109d4:	ldr	pc, [ip, #1592]!	; 0x638

000109d8 <raise@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #94208	; 0x17000
   109e0:	ldr	pc, [ip, #1584]!	; 0x630

000109e4 <strcmp@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #94208	; 0x17000
   109ec:	ldr	pc, [ip, #1576]!	; 0x628

000109f0 <fopen@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #94208	; 0x17000
   109f8:	ldr	pc, [ip, #1568]!	; 0x620

000109fc <free@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #94208	; 0x17000
   10a04:	ldr	pc, [ip, #1560]!	; 0x618

00010a08 <utf8proc_get_property@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #94208	; 0x17000
   10a10:	ldr	pc, [ip, #1552]!	; 0x610

00010a14 <fgets@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #94208	; 0x17000
   10a1c:	ldr	pc, [ip, #1544]!	; 0x608

00010a20 <utf8proc_encode_char@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #94208	; 0x17000
   10a28:	ldr	pc, [ip, #1536]!	; 0x600

00010a2c <strdup@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #94208	; 0x17000
   10a34:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a38 <rewind@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #94208	; 0x17000
   10a40:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a44 <unlink@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #94208	; 0x17000
   10a4c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a50 <utf8proc_tolower@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #94208	; 0x17000
   10a58:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a5c <__xstat@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #94208	; 0x17000
   10a64:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a68 <fread@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #94208	; 0x17000
   10a70:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a74 <utf8proc_iterate@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #94208	; 0x17000
   10a7c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a80 <malloc@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #94208	; 0x17000
   10a88:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a8c <__libc_start_main@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #94208	; 0x17000
   10a94:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a98 <__sysv_signal@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #94208	; 0x17000
   10aa0:	ldr	pc, [ip, #1456]!	; 0x5b0

00010aa4 <__gmon_start__@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #94208	; 0x17000
   10aac:	ldr	pc, [ip, #1448]!	; 0x5a8

00010ab0 <getpid@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #94208	; 0x17000
   10ab8:	ldr	pc, [ip, #1440]!	; 0x5a0

00010abc <exit@plt>:
   10abc:	add	ip, pc, #0, 12
   10ac0:	add	ip, ip, #94208	; 0x17000
   10ac4:	ldr	pc, [ip, #1432]!	; 0x598

00010ac8 <utf8proc_category@plt>:
   10ac8:	add	ip, pc, #0, 12
   10acc:	add	ip, ip, #94208	; 0x17000
   10ad0:	ldr	pc, [ip, #1424]!	; 0x590

00010ad4 <strlen@plt>:
   10ad4:	add	ip, pc, #0, 12
   10ad8:	add	ip, ip, #94208	; 0x17000
   10adc:	ldr	pc, [ip, #1416]!	; 0x588

00010ae0 <fprintf@plt>:
   10ae0:	add	ip, pc, #0, 12
   10ae4:	add	ip, ip, #94208	; 0x17000
   10ae8:	ldr	pc, [ip, #1408]!	; 0x580

00010aec <__isoc99_sscanf@plt>:
   10aec:	add	ip, pc, #0, 12
   10af0:	add	ip, ip, #94208	; 0x17000
   10af4:	ldr	pc, [ip, #1400]!	; 0x578

00010af8 <fclose@plt>:
   10af8:	add	ip, pc, #0, 12
   10afc:	add	ip, ip, #94208	; 0x17000
   10b00:	ldr	pc, [ip, #1392]!	; 0x570

00010b04 <utf8proc_NFC@plt>:
   10b04:	add	ip, pc, #0, 12
   10b08:	add	ip, ip, #94208	; 0x17000
   10b0c:	ldr	pc, [ip, #1384]!	; 0x568

00010b10 <fputc@plt>:
   10b10:	add	ip, pc, #0, 12
   10b14:	add	ip, ip, #94208	; 0x17000
   10b18:	ldr	pc, [ip, #1376]!	; 0x560

00010b1c <sprintf@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #94208	; 0x17000
   10b24:	ldr	pc, [ip, #1368]!	; 0x558

00010b28 <atoi@plt>:
   10b28:	add	ip, pc, #0, 12
   10b2c:	add	ip, ip, #94208	; 0x17000
   10b30:	ldr	pc, [ip, #1360]!	; 0x550

00010b34 <utf8proc_errmsg@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #94208	; 0x17000
   10b3c:	ldr	pc, [ip, #1352]!	; 0x548

00010b40 <fputs@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #94208	; 0x17000
   10b48:	ldr	pc, [ip, #1344]!	; 0x540

00010b4c <strncmp@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #94208	; 0x17000
   10b54:	ldr	pc, [ip, #1336]!	; 0x538

00010b58 <abort@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #94208	; 0x17000
   10b60:	ldr	pc, [ip, #1328]!	; 0x530

00010b64 <getc@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #94208	; 0x17000
   10b6c:	ldr	pc, [ip, #1320]!	; 0x528

00010b70 <__assert_fail@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #94208	; 0x17000
   10b78:	ldr	pc, [ip, #1312]!	; 0x520

Disassembly of section .text:

00010b80 <error@@Base-0x1b94>:
   10b80:	push	{r0, r1, r2, lr}
   10b84:	add	ip, sp, #8
   10b88:	ldr	r3, [pc, #100]	; 10bf4 <__assert_fail@plt+0x84>
   10b8c:	str	r0, [ip, #-4]!
   10b90:	ldr	r2, [pc, #96]	; 10bf8 <__assert_fail@plt+0x88>
   10b94:	mov	r0, ip
   10b98:	mov	r4, r1
   10b9c:	bl	12838 <error@@Base+0x124>
   10ba0:	ldr	r3, [sp, #4]
   10ba4:	sub	r3, r3, #2
   10ba8:	cmp	r3, #1
   10bac:	bls	10bb8 <__assert_fail@plt+0x48>
   10bb0:	ldr	r0, [pc, #68]	; 10bfc <__assert_fail@plt+0x8c>
   10bb4:	bl	12714 <error@@Base>
   10bb8:	ldr	r3, [pc, #64]	; 10c00 <__assert_fail@plt+0x90>
   10bbc:	ldr	r0, [r3]
   10bc0:	bl	115ac <__assert_fail@plt+0xa3c>
   10bc4:	mov	r0, r4
   10bc8:	bl	10da8 <__assert_fail@plt+0x238>
   10bcc:	bl	11054 <__assert_fail@plt+0x4e4>
   10bd0:	bl	11134 <__assert_fail@plt+0x5c4>
   10bd4:	bl	1132c <__assert_fail@plt+0x7bc>
   10bd8:	ldr	r3, [sp, #4]
   10bdc:	ldr	r0, [pc, #32]	; 10c04 <__assert_fail@plt+0x94>
   10be0:	cmp	r3, #3
   10be4:	movne	r1, #0
   10be8:	ldreq	r1, [r4, #8]
   10bec:	bl	11cb8 <__assert_fail@plt+0x1148>
   10bf0:	bl	126bc <__assert_fail@plt+0x1b4c>
   10bf4:	strheq	r8, [r2], -r4
   10bf8:	andeq	r3, r1, lr, lsl #8
   10bfc:	andeq	r3, r1, fp, asr #8
   10c00:	andeq	sl, r2, r8, lsr #2
   10c04:	ldrdeq	ip, [r2], -r4
   10c08:	mov	fp, #0
   10c0c:	mov	lr, #0
   10c10:	pop	{r1}		; (ldr r1, [sp], #4)
   10c14:	mov	r2, sp
   10c18:	push	{r2}		; (str r2, [sp, #-4]!)
   10c1c:	push	{r0}		; (str r0, [sp, #-4]!)
   10c20:	ldr	ip, [pc, #16]	; 10c38 <__assert_fail@plt+0xc8>
   10c24:	push	{ip}		; (str ip, [sp, #-4]!)
   10c28:	ldr	r0, [pc, #12]	; 10c3c <__assert_fail@plt+0xcc>
   10c2c:	ldr	r3, [pc, #12]	; 10c40 <__assert_fail@plt+0xd0>
   10c30:	bl	10a8c <__libc_start_main@plt>
   10c34:	bl	10b58 <abort@plt>
   10c38:			; <UNDEFINED> instruction: 0x000133bc
   10c3c:	andeq	r0, r1, r0, lsl #23
   10c40:	andeq	r3, r1, ip, asr r3
   10c44:	ldr	r3, [pc, #20]	; 10c60 <__assert_fail@plt+0xf0>
   10c48:	ldr	r2, [pc, #20]	; 10c64 <__assert_fail@plt+0xf4>
   10c4c:	add	r3, pc, r3
   10c50:	ldr	r2, [r3, r2]
   10c54:	cmp	r2, #0
   10c58:	bxeq	lr
   10c5c:	b	10aa4 <__gmon_start__@plt>
   10c60:	andeq	r7, r1, ip, lsr #7
   10c64:	muleq	r0, ip, r0
   10c68:	ldr	r3, [pc, #28]	; 10c8c <__assert_fail@plt+0x11c>
   10c6c:	ldr	r0, [pc, #28]	; 10c90 <__assert_fail@plt+0x120>
   10c70:	sub	r3, r3, r0
   10c74:	cmp	r3, #6
   10c78:	bxls	lr
   10c7c:	ldr	r3, [pc, #16]	; 10c94 <__assert_fail@plt+0x124>
   10c80:	cmp	r3, #0
   10c84:	bxeq	lr
   10c88:	bx	r3
   10c8c:	andeq	r8, r2, r3, ror #1
   10c90:	andeq	r8, r2, r0, ror #1
   10c94:	andeq	r0, r0, r0
   10c98:	ldr	r1, [pc, #36]	; 10cc4 <__assert_fail@plt+0x154>
   10c9c:	ldr	r0, [pc, #36]	; 10cc8 <__assert_fail@plt+0x158>
   10ca0:	sub	r1, r1, r0
   10ca4:	asr	r1, r1, #2
   10ca8:	add	r1, r1, r1, lsr #31
   10cac:	asrs	r1, r1, #1
   10cb0:	bxeq	lr
   10cb4:	ldr	r3, [pc, #16]	; 10ccc <__assert_fail@plt+0x15c>
   10cb8:	cmp	r3, #0
   10cbc:	bxeq	lr
   10cc0:	bx	r3
   10cc4:	andeq	r8, r2, r0, ror #1
   10cc8:	andeq	r8, r2, r0, ror #1
   10ccc:	andeq	r0, r0, r0
   10cd0:	push	{r4, lr}
   10cd4:	ldr	r4, [pc, #24]	; 10cf4 <__assert_fail@plt+0x184>
   10cd8:	ldrb	r3, [r4]
   10cdc:	cmp	r3, #0
   10ce0:	popne	{r4, pc}
   10ce4:	bl	10c68 <__assert_fail@plt+0xf8>
   10ce8:	mov	r3, #1
   10cec:	strb	r3, [r4]
   10cf0:	pop	{r4, pc}
   10cf4:	strdeq	r8, [r2], -r0
   10cf8:	ldr	r0, [pc, #40]	; 10d28 <__assert_fail@plt+0x1b8>
   10cfc:	ldr	r3, [r0]
   10d00:	cmp	r3, #0
   10d04:	bne	10d0c <__assert_fail@plt+0x19c>
   10d08:	b	10c98 <__assert_fail@plt+0x128>
   10d0c:	ldr	r3, [pc, #24]	; 10d2c <__assert_fail@plt+0x1bc>
   10d10:	cmp	r3, #0
   10d14:	beq	10d08 <__assert_fail@plt+0x198>
   10d18:	push	{r4, lr}
   10d1c:	blx	r3
   10d20:	pop	{r4, lr}
   10d24:	b	10c98 <__assert_fail@plt+0x128>
   10d28:	andeq	r7, r2, r4, lsl #28
   10d2c:	andeq	r0, r0, r0
   10d30:	push	{r4, r5, r6, r7, r8, lr}
   10d34:	mov	r5, r0
   10d38:	ldr	r4, [pc, #96]	; 10da0 <__assert_fail@plt+0x230>
   10d3c:	mov	r6, r1
   10d40:	add	r4, r4, r0, lsl #4
   10d44:	mov	r1, #4
   10d48:	ldr	r0, [r4, #12]
   10d4c:	add	r0, r0, #1
   10d50:	bl	12750 <error@@Base+0x3c>
   10d54:	mov	r3, #0
   10d58:	ldr	lr, [pc, #68]	; 10da4 <__assert_fail@plt+0x234>
   10d5c:	ldr	ip, [r4, #12]
   10d60:	mov	r2, r3
   10d64:	rsb	r4, r5, #1
   10d68:	cmp	r2, ip
   10d6c:	blt	10d78 <__assert_fail@plt+0x208>
   10d70:	str	r3, [r6]
   10d74:	pop	{r4, r5, r6, r7, r8, pc}
   10d78:	ldr	r1, [lr, r5, lsl #2]
   10d7c:	add	r7, r1, r2, lsl #3
   10d80:	ldr	r1, [r1, r2, lsl #3]
   10d84:	add	r2, r2, #1
   10d88:	add	r1, r1, r4
   10d8c:	ldrb	r1, [r1, #12]
   10d90:	cmp	r1, #0
   10d94:	strne	r7, [r0, r3, lsl #2]
   10d98:	addne	r3, r3, #1
   10d9c:	b	10d68 <__assert_fail@plt+0x1f8>
   10da0:	andeq	sl, r2, ip, lsr #2
   10da4:			; <UNDEFINED> instruction: 0x000303b4
   10da8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10dac:	mov	r4, #0
   10db0:	ldr	r6, [pc, #312]	; 10ef0 <__assert_fail@plt+0x380>
   10db4:	ldr	r7, [pc, #312]	; 10ef4 <__assert_fail@plt+0x384>
   10db8:	str	r0, [sp]
   10dbc:	ldr	r3, [pc, #308]	; 10ef8 <__assert_fail@plt+0x388>
   10dc0:	lsl	r5, r4, #4
   10dc4:	add	r8, r5, r3
   10dc8:	ldr	r3, [sp]
   10dcc:	ldr	sl, [pc, #296]	; 10efc <__assert_fail@plt+0x38c>
   10dd0:	mov	r0, r8
   10dd4:	mov	r2, sl
   10dd8:	ldr	r1, [r3, r4, lsl #2]
   10ddc:	bl	12a6c <error@@Base+0x358>
   10de0:	cmp	r4, #0
   10de4:	bne	10dfc <__assert_fail@plt+0x28c>
   10de8:	ldrb	r3, [sl, #11]
   10dec:	cmp	r3, #0
   10df0:	beq	10dfc <__assert_fail@plt+0x28c>
   10df4:	ldr	r0, [pc, #260]	; 10f00 <__assert_fail@plt+0x390>
   10df8:	bl	12714 <error@@Base>
   10dfc:	mov	r1, r8
   10e00:	mov	r0, r6
   10e04:	bl	120d4 <__assert_fail@plt+0x1564>
   10e08:	ldr	r0, [r6, #12]
   10e0c:	mov	r1, #8
   10e10:	add	r0, r0, #1
   10e14:	bl	12750 <error@@Base+0x3c>
   10e18:	ldr	r3, [pc, #208]	; 10ef0 <__assert_fail@plt+0x380>
   10e1c:	ldr	r8, [pc, #224]	; 10f04 <__assert_fail@plt+0x394>
   10e20:	mov	r9, #0
   10e24:	ldr	r5, [r3, r5]
   10e28:	mov	sl, #16
   10e2c:	add	fp, r7, r4, lsl #2
   10e30:	str	r0, [r7, r4, lsl #2]
   10e34:	cmp	r5, #0
   10e38:	bne	10e78 <__assert_fail@plt+0x308>
   10e3c:	add	r4, r4, #1
   10e40:	cmp	r4, #2
   10e44:	add	r6, r6, #16
   10e48:	bne	10dbc <__assert_fail@plt+0x24c>
   10e4c:	ldr	r4, [pc, #180]	; 10f08 <__assert_fail@plt+0x398>
   10e50:	mov	r0, r5
   10e54:	mov	r1, r4
   10e58:	bl	10d30 <__assert_fail@plt+0x1c0>
   10e5c:	ldr	r3, [pc, #168]	; 10f0c <__assert_fail@plt+0x39c>
   10e60:	str	r0, [r3]
   10e64:	ldr	r3, [r4]
   10e68:	cmp	r3, #65536	; 0x10000
   10e6c:	blt	10ed4 <__assert_fail@plt+0x364>
   10e70:	ldr	r0, [pc, #152]	; 10f10 <__assert_fail@plt+0x3a0>
   10e74:	b	10df8 <__assert_fail@plt+0x288>
   10e78:	ldr	r1, [r5, #8]
   10e7c:	mov	r0, r8
   10e80:	bl	11e7c <__assert_fail@plt+0x130c>
   10e84:	subs	r3, r0, #0
   10e88:	bne	10eb4 <__assert_fail@plt+0x344>
   10e8c:	mov	r1, sl
   10e90:	mov	r0, #1
   10e94:	bl	12750 <error@@Base+0x3c>
   10e98:	ldr	r1, [r5, #8]
   10e9c:	str	r0, [sp, #4]
   10ea0:	str	r1, [r0, #8]
   10ea4:	mov	r1, r0
   10ea8:	mov	r0, r8
   10eac:	bl	11ec0 <__assert_fail@plt+0x1350>
   10eb0:	ldr	r3, [sp, #4]
   10eb4:	add	r1, r3, r4
   10eb8:	mov	r0, #1
   10ebc:	strb	r0, [r1, #12]
   10ec0:	ldr	r1, [fp]
   10ec4:	ldr	r5, [r5, #4]
   10ec8:	str	r3, [r1, r9]
   10ecc:	add	r9, r9, #8
   10ed0:	b	10e34 <__assert_fail@plt+0x2c4>
   10ed4:	ldr	r1, [pc, #56]	; 10f14 <__assert_fail@plt+0x3a4>
   10ed8:	mov	r0, #1
   10edc:	bl	10d30 <__assert_fail@plt+0x1c0>
   10ee0:	ldr	r3, [pc, #48]	; 10f18 <__assert_fail@plt+0x3a8>
   10ee4:	str	r0, [r3]
   10ee8:	add	sp, sp, #12
   10eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ef0:	andeq	sl, r2, ip, lsr #2
   10ef4:			; <UNDEFINED> instruction: 0x000303b4
   10ef8:	andeq	sl, r2, r0, lsl #2
   10efc:	andeq	r8, r2, r8, lsr #1
   10f00:	ldrdeq	r3, [r1], -ip
   10f04:	andeq	sl, r2, ip, asr r1
   10f08:	andeq	r0, r3, ip, lsr #7
   10f0c:	andeq	r0, r3, r8, lsr #7
   10f10:	strdeq	r3, [r1], -r6
   10f14:	andeq	sl, r2, r4, lsr #2
   10f18:	andeq	sl, r2, r0, lsr #2
   10f1c:	cmp	r1, #0
   10f20:	beq	10f88 <__assert_fail@plt+0x418>
   10f24:	mov	r3, r0
   10f28:	ldr	r0, [r1, #8]
   10f2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f30:	rsb	ip, r0, #0
   10f34:	cmp	ip, r3
   10f38:	sublt	ip, r3, #1
   10f3c:	addlt	r0, r0, ip
   10f40:	ldrlt	lr, [r1, #12]
   10f44:	biclt	r0, r0, #1
   10f48:	movge	r0, #0
   10f4c:	ldrhlt	r0, [lr, r0]
   10f50:	strlt	ip, [r2]
   10f54:	ldr	ip, [r1, #8]
   10f58:	cmp	r3, ip
   10f5c:	popge	{pc}		; (ldrge pc, [sp], #4)
   10f60:	add	r3, r3, #1
   10f64:	ldr	r1, [r1, #12]
   10f68:	add	ip, ip, r3
   10f6c:	bic	ip, ip, #1
   10f70:	ldrh	r1, [r1, ip]
   10f74:	add	r1, r1, #1
   10f78:	cmp	r0, r1
   10f7c:	strle	r3, [r2]
   10f80:	movle	r0, r1
   10f84:	pop	{pc}		; (ldr pc, [sp], #4)
   10f88:	mov	r0, r1
   10f8c:	bx	lr
   10f90:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f94:	mov	r5, r1
   10f98:	add	r2, sp, #4
   10f9c:	ldr	r1, [r1]
   10fa0:	mov	r4, r0
   10fa4:	bl	10f1c <__assert_fail@plt+0x3ac>
   10fa8:	ldr	r2, [pc, #140]	; 1103c <__assert_fail@plt+0x4cc>
   10fac:	ldr	r7, [r2]
   10fb0:	ldr	r2, [pc, #136]	; 11040 <__assert_fail@plt+0x4d0>
   10fb4:	ldr	r1, [r2]
   10fb8:	ldr	r2, [pc, #132]	; 11044 <__assert_fail@plt+0x4d4>
   10fbc:	ldr	r6, [r2]
   10fc0:	ldr	r2, [pc, #128]	; 11048 <__assert_fail@plt+0x4d8>
   10fc4:	ldr	lr, [r2]
   10fc8:	add	r3, r4, r0
   10fcc:	cmp	r0, r7
   10fd0:	bge	1101c <__assert_fail@plt+0x4ac>
   10fd4:	cmp	r3, r1
   10fd8:	bge	11028 <__assert_fail@plt+0x4b8>
   10fdc:	ldr	ip, [r6, r0, lsl #2]
   10fe0:	ldr	r2, [lr, r3, lsl #2]
   10fe4:	ldr	ip, [ip]
   10fe8:	ldr	r2, [r2]
   10fec:	cmp	ip, r2
   10ff0:	beq	11010 <__assert_fail@plt+0x4a0>
   10ff4:	ldr	r3, [r5, #8]
   10ff8:	add	r4, r4, r3
   10ffc:	ldr	r3, [r5, #12]
   11000:	bic	r4, r4, #1
   11004:	strh	r0, [r3, r4]
   11008:	add	sp, sp, #12
   1100c:	pop	{r4, r5, r6, r7, pc}
   11010:	add	r0, r0, #1
   11014:	add	r3, r3, #1
   11018:	b	10fcc <__assert_fail@plt+0x45c>
   1101c:	ldreq	ip, [pc, #40]	; 1104c <__assert_fail@plt+0x4dc>
   11020:	addeq	r2, r4, #1
   11024:	streq	r2, [ip]
   11028:	cmp	r3, r1
   1102c:	subeq	r3, r4, #1
   11030:	ldreq	r2, [pc, #24]	; 11050 <__assert_fail@plt+0x4e0>
   11034:	streq	r3, [r2]
   11038:	b	10ff4 <__assert_fail@plt+0x484>
   1103c:	andeq	r0, r3, ip, lsr #7
   11040:	andeq	sl, r2, r4, lsr #2
   11044:	andeq	r0, r3, r8, lsr #7
   11048:	andeq	sl, r2, r0, lsr #2
   1104c:			; <UNDEFINED> instruction: 0x000303b0
   11050:	andeq	r0, r3, r4, lsr #7
   11054:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11058:	mvn	r4, #0
   1105c:	ldr	r5, [pc, #188]	; 11120 <__assert_fail@plt+0x5b0>
   11060:	ldr	r2, [pc, #188]	; 11124 <__assert_fail@plt+0x5b4>
   11064:	ldr	r6, [pc, #188]	; 11128 <__assert_fail@plt+0x5b8>
   11068:	ldr	r3, [r5]
   1106c:	ldr	r7, [pc, #184]	; 1112c <__assert_fail@plt+0x5bc>
   11070:	rsb	r3, r3, #0
   11074:	ldr	fp, [pc, #180]	; 11130 <__assert_fail@plt+0x5c0>
   11078:	str	r3, [r2]
   1107c:	mov	r9, r2
   11080:	ldr	r3, [r6]
   11084:	mov	sl, #1
   11088:	str	r3, [r7]
   1108c:	ldr	r1, [r5]
   11090:	ldr	r3, [r6]
   11094:	sub	r3, r3, r1
   11098:	ldr	r1, [r9]
   1109c:	cmp	r3, r1
   110a0:	bge	110ac <__assert_fail@plt+0x53c>
   110a4:	add	sp, sp, #12
   110a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110ac:	mov	r1, #16
   110b0:	mov	r0, sl
   110b4:	bl	12750 <error@@Base+0x3c>
   110b8:	add	r4, r4, #1
   110bc:	mov	r1, #2
   110c0:	mov	r8, r0
   110c4:	str	r4, [r0, #8]
   110c8:	add	r0, r4, #1
   110cc:	bl	12750 <error@@Base+0x3c>
   110d0:	mov	r1, r8
   110d4:	str	r0, [r8, #12]
   110d8:	mov	r0, fp
   110dc:	bl	11450 <__assert_fail@plt+0x8e0>
   110e0:	rsb	r3, r4, #0
   110e4:	ldr	r1, [r9]
   110e8:	cmp	r1, r3
   110ec:	bgt	11110 <__assert_fail@plt+0x5a0>
   110f0:	ldr	r1, [r7]
   110f4:	cmp	r1, r3
   110f8:	blt	11110 <__assert_fail@plt+0x5a0>
   110fc:	mov	r0, r3
   11100:	mov	r1, r8
   11104:	str	r3, [sp, #4]
   11108:	bl	10f90 <__assert_fail@plt+0x420>
   1110c:	ldr	r3, [sp, #4]
   11110:	add	r3, r3, #2
   11114:	cmp	r4, r3
   11118:	bge	110e4 <__assert_fail@plt+0x574>
   1111c:	b	1108c <__assert_fail@plt+0x51c>
   11120:	andeq	r0, r3, ip, lsr #7
   11124:			; <UNDEFINED> instruction: 0x000303b0
   11128:	andeq	sl, r2, r4, lsr #2
   1112c:	andeq	r0, r3, r4, lsr #7
   11130:	andeq	sl, r2, ip, asr #2
   11134:	ldr	r3, [pc, #116]	; 111b0 <__assert_fail@plt+0x640>
   11138:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1113c:	mov	r7, #1
   11140:	ldr	r0, [r3]
   11144:	ldr	r3, [pc, #104]	; 111b4 <__assert_fail@plt+0x644>
   11148:	ldr	r6, [pc, #104]	; 111b8 <__assert_fail@plt+0x648>
   1114c:	ldr	r3, [r3]
   11150:	sub	r0, r0, r3
   11154:	ldr	r3, [pc, #96]	; 111bc <__assert_fail@plt+0x64c>
   11158:	ldr	r4, [r3, #4]
   1115c:	cmp	r4, #0
   11160:	bne	1116c <__assert_fail@plt+0x5fc>
   11164:	add	sp, sp, #12
   11168:	pop	{r4, r5, r6, r7, pc}
   1116c:	ldr	r3, [r4, #8]
   11170:	ldr	r2, [r4, #12]
   11174:	add	r3, r0, r3
   11178:	bic	r3, r3, #1
   1117c:	ldr	r1, [r4]
   11180:	ldrh	r5, [r2, r3]
   11184:	add	r2, sp, #4
   11188:	bl	10f1c <__assert_fail@plt+0x3ac>
   1118c:	ldr	r3, [r6]
   11190:	cmp	r5, r0
   11194:	ldrle	r0, [sp, #4]
   11198:	ldrle	r4, [r4]
   1119c:	ble	1115c <__assert_fail@plt+0x5ec>
   111a0:	sub	r5, r5, #1
   111a4:	ldr	r2, [r3, r5, lsl #2]
   111a8:	strb	r7, [r2, #4]
   111ac:	b	11190 <__assert_fail@plt+0x620>
   111b0:	andeq	sl, r2, r4, lsr #2
   111b4:	andeq	r0, r3, ip, lsr #7
   111b8:	andeq	r0, r3, r8, lsr #7
   111bc:	andeq	sl, r2, ip, asr #2
   111c0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111c4:	mov	r6, r0
   111c8:	mov	r8, r1
   111cc:	mov	r7, r2
   111d0:	bl	11f58 <__assert_fail@plt+0x13e8>
   111d4:	ldr	r9, [pc, #176]	; 1128c <__assert_fail@plt+0x71c>
   111d8:	mov	r5, #0
   111dc:	add	r6, r6, #4096	; 0x1000
   111e0:	mov	sl, #88	; 0x58
   111e4:	ldr	r3, [r6, #3956]	; 0xf74
   111e8:	cmp	r5, r3
   111ec:	blt	111f4 <__assert_fail@plt+0x684>
   111f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111f4:	ldr	r3, [r6, #3952]	; 0xf70
   111f8:	mov	r0, r9
   111fc:	ldr	r3, [r3, r5, lsl #2]
   11200:	ldr	r4, [r3, #12]
   11204:	ldr	fp, [r3, #16]
   11208:	mov	r1, r4
   1120c:	mov	r2, fp
   11210:	bl	11a2c <__assert_fail@plt+0xebc>
   11214:	mov	r2, fp
   11218:	mov	r1, r4
   1121c:	mov	r0, r8
   11220:	bl	11a2c <__assert_fail@plt+0xebc>
   11224:	ldr	r3, [r6, #3952]	; 0xf70
   11228:	ldr	r3, [r3, r5, lsl #2]
   1122c:	ldr	r0, [r3, #8]
   11230:	bl	10ad4 <strlen@plt>
   11234:	mov	r2, fp
   11238:	mov	r1, r4
   1123c:	add	r0, r8, r0, lsl #3
   11240:	bl	11a2c <__assert_fail@plt+0xebc>
   11244:	cmp	r7, #0
   11248:	beq	11284 <__assert_fail@plt+0x714>
   1124c:	sub	fp, r4, fp
   11250:	clz	fp, fp
   11254:	lsr	fp, fp, #5
   11258:	mov	r0, r7
   1125c:	mov	r2, fp
   11260:	mov	r1, #1
   11264:	bl	11a2c <__assert_fail@plt+0xebc>
   11268:	cmp	r4, #10
   1126c:	lslle	r0, r4, #3
   11270:	movgt	r0, sl
   11274:	mov	r2, fp
   11278:	mov	r1, #1
   1127c:	add	r0, r7, r0
   11280:	bl	11a2c <__assert_fail@plt+0xebc>
   11284:	add	r5, r5, #1
   11288:	b	111e4 <__assert_fail@plt+0x674>
   1128c:	ldrdeq	ip, [r2], -r4
   11290:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11294:	mov	r5, #0
   11298:	ldr	r8, [pc, #128]	; 11320 <__assert_fail@plt+0x7b0>
   1129c:	ldr	r3, [pc, #128]	; 11324 <__assert_fail@plt+0x7b4>
   112a0:	mov	fp, r8
   112a4:	ldr	r2, [r8, #12]
   112a8:	cmp	r5, r2
   112ac:	bge	11318 <__assert_fail@plt+0x7a8>
   112b0:	ldr	r9, [pc, #112]	; 11328 <__assert_fail@plt+0x7b8>
   112b4:	mov	r7, r5
   112b8:	lsl	sl, r5, #3
   112bc:	mov	r4, #0
   112c0:	mov	r6, #1
   112c4:	ldr	r2, [fp, #12]
   112c8:	cmp	r7, r2
   112cc:	bge	11310 <__assert_fail@plt+0x7a0>
   112d0:	ldr	r2, [r3]
   112d4:	add	r0, r4, #928	; 0x3a0
   112d8:	add	r2, r2, r4
   112dc:	add	r2, r2, sl
   112e0:	mov	r1, #1
   112e4:	ldrb	r2, [r2, #4]
   112e8:	add	r0, r9, r0
   112ec:	add	r4, r4, #8
   112f0:	and	r6, r6, r2
   112f4:	eor	r2, r6, #1
   112f8:	str	r3, [sp, #4]
   112fc:	bl	11a2c <__assert_fail@plt+0xebc>
   11300:	cmp	r4, #64	; 0x40
   11304:	add	r7, r7, #1
   11308:	ldr	r3, [sp, #4]
   1130c:	bne	112c4 <__assert_fail@plt+0x754>
   11310:	add	r5, r5, #1
   11314:	b	112a4 <__assert_fail@plt+0x734>
   11318:	add	sp, sp, #12
   1131c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11320:	andeq	sl, r2, ip, lsr #2
   11324:			; <UNDEFINED> instruction: 0x000303b4
   11328:	ldrdeq	ip, [r2], -r4
   1132c:	push	{r4, r5, r6, r7, r8, lr}
   11330:	mov	r4, #0
   11334:	ldr	r7, [pc, #136]	; 113c4 <__assert_fail@plt+0x854>
   11338:	ldr	r6, [pc, #136]	; 113c8 <__assert_fail@plt+0x858>
   1133c:	ldr	r3, [r7, #12]
   11340:	cmp	r4, r3
   11344:	blt	11370 <__assert_fail@plt+0x800>
   11348:	ldr	r1, [pc, #124]	; 113cc <__assert_fail@plt+0x85c>
   1134c:	mov	r2, #0
   11350:	add	r0, r1, #984	; 0x3d8
   11354:	bl	111c0 <__assert_fail@plt+0x650>
   11358:	ldr	r2, [pc, #112]	; 113d0 <__assert_fail@plt+0x860>
   1135c:	ldr	r0, [pc, #112]	; 113d4 <__assert_fail@plt+0x864>
   11360:	sub	r1, r2, #408	; 0x198
   11364:	bl	111c0 <__assert_fail@plt+0x650>
   11368:	pop	{r4, r5, r6, r7, r8, lr}
   1136c:	b	11290 <__assert_fail@plt+0x720>
   11370:	ldr	r3, [r6]
   11374:	lsl	r5, r4, #3
   11378:	ldr	r3, [r3, r4, lsl #3]
   1137c:	ldr	r0, [r3, #8]
   11380:	bl	11658 <__assert_fail@plt+0xae8>
   11384:	ldr	r2, [r6]
   11388:	ldr	ip, [pc, #68]	; 113d4 <__assert_fail@plt+0x864>
   1138c:	add	r5, r2, r5
   11390:	ldr	r1, [r2, r4, lsl #3]
   11394:	ldr	lr, [pc, #60]	; 113d8 <__assert_fail@plt+0x868>
   11398:	ldrb	r3, [r5, #4]
   1139c:	mov	r2, #1
   113a0:	clz	r3, r3
   113a4:	ldr	r1, [r1, #8]
   113a8:	lsr	r3, r3, #5
   113ac:	add	r4, r4, #1
   113b0:	cmp	r0, #0
   113b4:	movne	r0, lr
   113b8:	moveq	r0, ip
   113bc:	bl	11a48 <__assert_fail@plt+0xed8>
   113c0:	b	1133c <__assert_fail@plt+0x7cc>
   113c4:	andeq	sl, r2, ip, lsr #2
   113c8:			; <UNDEFINED> instruction: 0x000303b4
   113cc:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   113d0:	andeq	ip, r2, ip, lsl #8
   113d4:	andeq	lr, r2, ip, lsr #8
   113d8:			; <UNDEFINED> instruction: 0x0002c4b4
   113dc:	cmp	r1, #0
   113e0:	push	{r4, lr}
   113e4:	mov	r4, r0
   113e8:	stm	r2, {r1, r3}
   113ec:	strne	r2, [r1, #4]
   113f0:	streq	r2, [r0]
   113f4:	cmp	r3, #0
   113f8:	streq	r2, [r0, #4]
   113fc:	ldr	r0, [r0, #8]
   11400:	strne	r2, [r3]
   11404:	cmp	r0, #0
   11408:	beq	11418 <__assert_fail@plt+0x8a8>
   1140c:	bl	109fc <free@plt>
   11410:	mov	r3, #0
   11414:	str	r3, [r4, #8]
   11418:	ldr	r3, [r4, #12]
   1141c:	add	r3, r3, #1
   11420:	str	r3, [r4, #12]
   11424:	pop	{r4, pc}
   11428:	mov	r3, #0
   1142c:	str	r3, [r0, #4]
   11430:	str	r3, [r0]
   11434:	str	r3, [r0, #8]
   11438:	str	r3, [r0, #12]
   1143c:	bx	lr
   11440:	mov	r2, r1
   11444:	ldr	r3, [r0]
   11448:	mov	r1, #0
   1144c:	b	113dc <__assert_fail@plt+0x86c>
   11450:	mov	r2, r1
   11454:	mov	r3, #0
   11458:	ldr	r1, [r0, #4]
   1145c:	b	113dc <__assert_fail@plt+0x86c>
   11460:	mov	r3, r2
   11464:	mov	r2, r1
   11468:	ldr	r1, [r3]
   1146c:	b	113dc <__assert_fail@plt+0x86c>
   11470:	ldr	r3, [r1, #4]
   11474:	b	113dc <__assert_fail@plt+0x86c>
   11478:	ldr	r3, [r1]
   1147c:	ldr	r2, [r1, #4]
   11480:	cmp	r3, #0
   11484:	push	{r4, r5, r6, lr}
   11488:	mov	r4, r0
   1148c:	strne	r2, [r3, #4]
   11490:	streq	r2, [r0]
   11494:	ldr	r2, [r1, #4]
   11498:	mov	r5, #0
   1149c:	cmp	r2, #0
   114a0:	streq	r3, [r0, #4]
   114a4:	ldr	r0, [r0, #8]
   114a8:	strne	r3, [r2]
   114ac:	cmp	r0, r5
   114b0:	str	r5, [r1, #4]
   114b4:	str	r5, [r1]
   114b8:	beq	114c4 <__assert_fail@plt+0x954>
   114bc:	bl	109fc <free@plt>
   114c0:	str	r5, [r4, #8]
   114c4:	ldr	r3, [r4, #12]
   114c8:	sub	r3, r3, #1
   114cc:	str	r3, [r4, #12]
   114d0:	pop	{r4, r5, r6, pc}
   114d4:	ldr	r3, [r0, #8]
   114d8:	cmp	r3, #0
   114dc:	bxne	lr
   114e0:	ldr	r3, [r0, #12]
   114e4:	cmp	r3, #0
   114e8:	bxeq	lr
   114ec:	push	{r4, lr}
   114f0:	mov	r1, #4
   114f4:	mov	r4, r0
   114f8:	mov	r0, r3
   114fc:	bl	12750 <error@@Base+0x3c>
   11500:	ldr	r3, [r4]
   11504:	str	r0, [r4, #8]
   11508:	sub	r0, r0, #4
   1150c:	cmp	r3, #0
   11510:	bne	11518 <__assert_fail@plt+0x9a8>
   11514:	pop	{r4, pc}
   11518:	str	r3, [r0, #4]!
   1151c:	ldr	r3, [r3, #4]
   11520:	b	1150c <__assert_fail@plt+0x99c>
   11524:	push	{r4, r5, r6, lr}
   11528:	mov	r5, r0
   1152c:	mov	r6, r1
   11530:	ldr	r4, [r5]
   11534:	cmp	r4, #0
   11538:	bne	11540 <__assert_fail@plt+0x9d0>
   1153c:	pop	{r4, r5, r6, pc}
   11540:	mov	r0, r5
   11544:	mov	r1, r4
   11548:	bl	11478 <__assert_fail@plt+0x908>
   1154c:	mov	r0, r4
   11550:	blx	r6
   11554:	b	11530 <__assert_fail@plt+0x9c0>
   11558:	push	{r4, lr}
   1155c:	mov	r1, r0
   11560:	mov	r4, r0
   11564:	ldr	r0, [pc, #56]	; 115a4 <__assert_fail@plt+0xa34>
   11568:	bl	11e7c <__assert_fail@plt+0x130c>
   1156c:	cmp	r0, #0
   11570:	beq	11584 <__assert_fail@plt+0xa14>
   11574:	mov	r1, r4
   11578:	ldr	r0, [pc, #40]	; 115a8 <__assert_fail@plt+0xa38>
   1157c:	pop	{r4, lr}
   11580:	b	12a00 <error@@Base+0x2ec>
   11584:	mov	r1, #12
   11588:	mov	r0, #1
   1158c:	bl	12750 <error@@Base+0x3c>
   11590:	str	r4, [r0, #8]
   11594:	mov	r1, r0
   11598:	pop	{r4, lr}
   1159c:	ldr	r0, [pc]	; 115a4 <__assert_fail@plt+0xa34>
   115a0:	b	11ec0 <__assert_fail@plt+0x1350>
   115a4:	strdeq	r8, [r2], -r4
   115a8:	andeq	r3, r1, ip, lsl r6
   115ac:	push	{r4, r5, r6, lr}
   115b0:	ldr	r5, [pc, #136]	; 11640 <__assert_fail@plt+0xad0>
   115b4:	ldrb	r3, [r5, #-128]	; 0xffffff80
   115b8:	cmp	r3, #0
   115bc:	beq	115c8 <__assert_fail@plt+0xa58>
   115c0:	ldr	r0, [pc, #124]	; 11644 <__assert_fail@plt+0xad4>
   115c4:	bl	12714 <error@@Base>
   115c8:	cmp	r0, #0
   115cc:	mov	r1, r0
   115d0:	beq	11620 <__assert_fail@plt+0xab0>
   115d4:	ldr	r2, [pc, #108]	; 11648 <__assert_fail@plt+0xad8>
   115d8:	ldr	r0, [pc, #108]	; 1164c <__assert_fail@plt+0xadc>
   115dc:	bl	12a6c <error@@Base+0x358>
   115e0:	ldr	r1, [pc, #100]	; 1164c <__assert_fail@plt+0xadc>
   115e4:	add	r0, r1, #16
   115e8:	bl	120d4 <__assert_fail@plt+0x1564>
   115ec:	ldr	r1, [pc, #92]	; 11650 <__assert_fail@plt+0xae0>
   115f0:	ldr	r0, [pc, #84]	; 1164c <__assert_fail@plt+0xadc>
   115f4:	bl	11524 <__assert_fail@plt+0x9b4>
   115f8:	ldr	r4, [r5, #-108]	; 0xffffff94
   115fc:	cmp	r4, #0
   11600:	bne	11610 <__assert_fail@plt+0xaa0>
   11604:	mov	r3, #1
   11608:	strb	r3, [r5, #-128]	; 0xffffff80
   1160c:	pop	{r4, r5, r6, pc}
   11610:	ldr	r0, [r4, #8]
   11614:	bl	11558 <__assert_fail@plt+0x9e8>
   11618:	ldr	r4, [r4, #4]
   1161c:	b	115fc <__assert_fail@plt+0xa8c>
   11620:	ldr	r6, [pc, #44]	; 11654 <__assert_fail@plt+0xae4>
   11624:	mov	r4, r0
   11628:	ldr	r0, [r6, r4, lsl #2]
   1162c:	add	r4, r4, #1
   11630:	bl	11558 <__assert_fail@plt+0x9e8>
   11634:	cmp	r4, #110	; 0x6e
   11638:	bne	11628 <__assert_fail@plt+0xab8>
   1163c:	b	11604 <__assert_fail@plt+0xa94>
   11640:	andeq	sl, r2, ip, ror #1
   11644:	andeq	r3, r1, pc, lsr #12
   11648:	andeq	r8, r2, ip, asr #1
   1164c:	andeq	sl, r2, r0, ror r0
   11650:	strdeq	r0, [r1], -ip
   11654:	andeq	r3, r1, r4, ror #8
   11658:	ldr	r3, [pc, #44]	; 1168c <__assert_fail@plt+0xb1c>
   1165c:	push	{r4, lr}
   11660:	ldrb	r3, [r3, #-128]	; 0xffffff80
   11664:	cmp	r3, #0
   11668:	bne	11674 <__assert_fail@plt+0xb04>
   1166c:	ldr	r0, [pc, #28]	; 11690 <__assert_fail@plt+0xb20>
   11670:	bl	12714 <error@@Base>
   11674:	mov	r1, r0
   11678:	ldr	r0, [pc, #20]	; 11694 <__assert_fail@plt+0xb24>
   1167c:	bl	11e7c <__assert_fail@plt+0x130c>
   11680:	adds	r0, r0, #0
   11684:	movne	r0, #1
   11688:	pop	{r4, pc}
   1168c:	andeq	sl, r2, ip, ror #1
   11690:	andeq	r3, r1, sp, asr #12
   11694:	strdeq	r8, [r2], -r4
   11698:	mov	r2, r0
   1169c:	push	{r4, lr}
   116a0:	mov	r1, #99	; 0x63
   116a4:	ldr	r0, [pc, #12]	; 116b8 <__assert_fail@plt+0xb48>
   116a8:	bl	10a14 <fgets@plt>
   116ac:	adds	r0, r0, #0
   116b0:	movne	r0, #1
   116b4:	pop	{r4, pc}
   116b8:	muleq	r2, r0, r0
   116bc:	push	{r4, lr}
   116c0:	mov	r4, r1
   116c4:	bl	11698 <__assert_fail@plt+0xb28>
   116c8:	cmp	r0, #0
   116cc:	popeq	{r4, pc}
   116d0:	mov	r2, r4
   116d4:	ldr	r1, [pc, #20]	; 116f0 <__assert_fail@plt+0xb80>
   116d8:	ldr	r0, [pc, #20]	; 116f4 <__assert_fail@plt+0xb84>
   116dc:	bl	10aec <__isoc99_sscanf@plt>
   116e0:	sub	r0, r0, #1
   116e4:	clz	r0, r0
   116e8:	lsr	r0, r0, #5
   116ec:	pop	{r4, pc}
   116f0:	andeq	r3, r1, r2, ror r8
   116f4:	muleq	r2, r0, r0
   116f8:	ldr	r2, [r1]
   116fc:	cmp	r2, #0
   11700:	bne	11710 <__assert_fail@plt+0xba0>
   11704:	mov	r1, r0
   11708:	ldr	r0, [pc, #56]	; 11748 <__assert_fail@plt+0xbd8>
   1170c:	b	10b40 <fputs@plt>
   11710:	ldr	r3, [r1, #4]
   11714:	vldr	d6, [pc, #36]	; 11740 <__assert_fail@plt+0xbd0>
   11718:	sub	r3, r2, r3
   1171c:	ldr	r1, [pc, #40]	; 1174c <__assert_fail@plt+0xbdc>
   11720:	vmov	s14, r3
   11724:	vcvt.f64.s32	d7, s14
   11728:	vmul.f64	d7, d7, d6
   1172c:	vmov	s13, r2
   11730:	vcvt.f64.s32	d6, s13
   11734:	vdiv.f64	d5, d7, d6
   11738:	vmov	r2, r3, d5
   1173c:	b	10ae0 <fprintf@plt>
   11740:	andeq	r0, r0, r0
   11744:	subsmi	r0, r9, r0
   11748:	andeq	r3, r1, r8, lsl #16
   1174c:	andeq	r3, r1, r1, lsl r8
   11750:	push	{r4, r5, r6, lr}
   11754:	subs	r5, r1, #0
   11758:	mov	r4, r0
   1175c:	beq	11788 <__assert_fail@plt+0xc18>
   11760:	ldr	r1, [pc, #48]	; 11798 <__assert_fail@plt+0xc28>
   11764:	ldm	r5, {r2, r3}
   11768:	bl	10ae0 <fprintf@plt>
   1176c:	mov	r1, r5
   11770:	mov	r0, r4
   11774:	bl	116f8 <__assert_fail@plt+0xb88>
   11778:	mov	r1, r4
   1177c:	ldr	r0, [pc, #24]	; 1179c <__assert_fail@plt+0xc2c>
   11780:	pop	{r4, r5, r6, lr}
   11784:	b	10b40 <fputs@plt>
   11788:	mov	r1, r0
   1178c:	ldr	r0, [pc, #12]	; 117a0 <__assert_fail@plt+0xc30>
   11790:	bl	10b40 <fputs@plt>
   11794:	b	11778 <__assert_fail@plt+0xc08>
   11798:	andeq	r3, r1, r7, lsl r8
   1179c:	andeq	r3, r1, sp, lsr r8
   117a0:	andeq	r3, r1, r2, lsr #16
   117a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117a8:	mov	r4, r0
   117ac:	ldrb	r8, [sp, #32]
   117b0:	mov	r6, r1
   117b4:	mov	r7, r2
   117b8:	ldr	r1, [pc, #204]	; 1188c <__assert_fail@plt+0xd1c>
   117bc:	mov	r2, r3
   117c0:	ldrb	r9, [sp, #36]	; 0x24
   117c4:	bl	10ae0 <fprintf@plt>
   117c8:	mov	r1, #0
   117cc:	mov	r0, r4
   117d0:	bl	11750 <__assert_fail@plt+0xbe0>
   117d4:	ldr	r3, [pc, #180]	; 11890 <__assert_fail@plt+0xd20>
   117d8:	cmp	r8, #0
   117dc:	ldr	r2, [pc, #176]	; 11894 <__assert_fail@plt+0xd24>
   117e0:	ldr	r1, [pc, #176]	; 11898 <__assert_fail@plt+0xd28>
   117e4:	moveq	r2, r3
   117e8:	mov	r0, r4
   117ec:	bl	10ae0 <fprintf@plt>
   117f0:	ldr	sl, [pc, #164]	; 1189c <__assert_fail@plt+0xd2c>
   117f4:	mov	r5, #1
   117f8:	cmp	r5, r7
   117fc:	ble	11858 <__assert_fail@plt+0xce8>
   11800:	cmp	r8, #0
   11804:	beq	11834 <__assert_fail@plt+0xcc4>
   11808:	add	r3, r7, #1
   1180c:	add	r1, r6, r3, lsl #3
   11810:	ldr	r3, [r6, r3, lsl #3]
   11814:	cmp	r3, #0
   11818:	ble	11834 <__assert_fail@plt+0xcc4>
   1181c:	mov	r0, r4
   11820:	bl	11750 <__assert_fail@plt+0xbe0>
   11824:	mov	r2, r7
   11828:	ldr	r1, [pc, #112]	; 118a0 <__assert_fail@plt+0xd30>
   1182c:	mov	r0, r4
   11830:	bl	10ae0 <fprintf@plt>
   11834:	cmp	r9, #0
   11838:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1183c:	mov	r1, r6
   11840:	mov	r0, r4
   11844:	bl	11750 <__assert_fail@plt+0xbe0>
   11848:	mov	r1, r4
   1184c:	ldr	r0, [pc, #80]	; 118a4 <__assert_fail@plt+0xd34>
   11850:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11854:	b	10b40 <fputs@plt>
   11858:	ldr	r3, [r6, r5, lsl #3]
   1185c:	add	r1, r6, r5, lsl #3
   11860:	cmp	r3, #0
   11864:	ble	11880 <__assert_fail@plt+0xd10>
   11868:	mov	r0, r4
   1186c:	bl	11750 <__assert_fail@plt+0xbe0>
   11870:	mov	r2, r5
   11874:	mov	r1, sl
   11878:	mov	r0, r4
   1187c:	bl	10ae0 <fprintf@plt>
   11880:	add	r5, r5, #1
   11884:	sxth	r5, r5
   11888:	b	117f8 <__assert_fail@plt+0xc88>
   1188c:	andeq	r3, r1, pc, asr #16
   11890:	andeq	r3, r1, r8, asr #16
   11894:	andeq	r3, r1, r1, asr #16
   11898:	andeq	r3, r1, r0, asr r8
   1189c:	andeq	r3, r1, r4, asr r8
   118a0:	andeq	r3, r1, sp, asr r8
   118a4:	andeq	r3, r1, r6, ror #16
   118a8:	push	{r4, r5, r6, r7, r8, lr}
   118ac:	mov	r4, r1
   118b0:	add	r4, r4, #4096	; 0x1000
   118b4:	mov	r6, r0
   118b8:	mov	r0, r1
   118bc:	mov	r5, r2
   118c0:	bl	11f58 <__assert_fail@plt+0x13e8>
   118c4:	ldr	r2, [pc, #124]	; 11948 <__assert_fail@plt+0xdd8>
   118c8:	ldr	r1, [r4, #3952]	; 0xf70
   118cc:	ldr	r0, [r4, #3956]	; 0xf74
   118d0:	bl	130ec <error@@Base+0x9d8>
   118d4:	mov	r2, r5
   118d8:	ldr	r1, [pc, #108]	; 1194c <__assert_fail@plt+0xddc>
   118dc:	mov	r0, r6
   118e0:	bl	10ae0 <fprintf@plt>
   118e4:	mov	r1, #0
   118e8:	mov	r0, r6
   118ec:	bl	11750 <__assert_fail@plt+0xbe0>
   118f0:	mov	r1, r6
   118f4:	mov	r0, #10
   118f8:	bl	10b10 <fputc@plt>
   118fc:	ldr	r7, [pc, #76]	; 11950 <__assert_fail@plt+0xde0>
   11900:	mov	r5, #0
   11904:	ldr	r3, [r4, #3956]	; 0xf74
   11908:	cmp	r5, r3
   1190c:	blt	11914 <__assert_fail@plt+0xda4>
   11910:	pop	{r4, r5, r6, r7, r8, pc}
   11914:	ldr	r3, [r4, #3952]	; 0xf70
   11918:	mov	r0, r6
   1191c:	ldr	r1, [r3, r5, lsl #2]
   11920:	add	r1, r1, #12
   11924:	bl	11750 <__assert_fail@plt+0xbe0>
   11928:	ldr	r3, [r4, #3952]	; 0xf70
   1192c:	mov	r1, r7
   11930:	mov	r0, r6
   11934:	ldr	r3, [r3, r5, lsl #2]
   11938:	add	r5, r5, #1
   1193c:	ldr	r2, [r3, #8]
   11940:	bl	10ae0 <fprintf@plt>
   11944:	b	11904 <__assert_fail@plt+0xd94>
   11948:	andeq	r1, r1, r4, asr r9
   1194c:	andeq	r3, r1, pc, asr #16
   11950:	andeq	r3, r1, r0, asr r8
   11954:	ldr	r1, [r1, #8]
   11958:	ldr	r0, [r0, #8]
   1195c:	b	125c4 <__assert_fail@plt+0x1a54>
   11960:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11964:	mov	r6, r0
   11968:	mov	r5, r1
   1196c:	bl	11698 <__assert_fail@plt+0xb28>
   11970:	mov	r4, #0
   11974:	cmp	r0, #0
   11978:	bne	11988 <__assert_fail@plt+0xe18>
   1197c:	mov	r0, r4
   11980:	add	sp, sp, #8
   11984:	pop	{r4, r5, r6, r7, r8, pc}
   11988:	mov	r0, r6
   1198c:	bl	11698 <__assert_fail@plt+0xb28>
   11990:	cmp	r0, #0
   11994:	ldrne	r7, [pc, #128]	; 11a1c <__assert_fail@plt+0xeac>
   11998:	beq	1197c <__assert_fail@plt+0xe0c>
   1199c:	mov	r0, r6
   119a0:	bl	11698 <__assert_fail@plt+0xb28>
   119a4:	cmp	r0, #0
   119a8:	beq	1197c <__assert_fail@plt+0xe0c>
   119ac:	add	r3, sp, #4
   119b0:	mov	r2, sp
   119b4:	mov	r1, r7
   119b8:	ldr	r0, [pc, #96]	; 11a20 <__assert_fail@plt+0xeb0>
   119bc:	bl	10aec <__isoc99_sscanf@plt>
   119c0:	cmp	r0, #2
   119c4:	bne	1197c <__assert_fail@plt+0xe0c>
   119c8:	ldr	r0, [pc, #84]	; 11a24 <__assert_fail@plt+0xeb4>
   119cc:	bl	10b28 <atoi@plt>
   119d0:	ldr	r8, [sp]
   119d4:	cmp	r0, #0
   119d8:	bne	119f8 <__assert_fail@plt+0xe88>
   119dc:	ldr	r1, [pc, #68]	; 11a28 <__assert_fail@plt+0xeb8>
   119e0:	ldr	r0, [pc, #60]	; 11a24 <__assert_fail@plt+0xeb4>
   119e4:	bl	109e4 <strcmp@plt>
   119e8:	cmp	r0, #0
   119ec:	moveq	r4, r8
   119f0:	moveq	r0, #0
   119f4:	movne	r0, #11
   119f8:	ldr	r3, [r5, r0, lsl #3]
   119fc:	add	r2, r5, r0, lsl #3
   11a00:	add	r3, r3, r8
   11a04:	str	r3, [r5, r0, lsl #3]
   11a08:	ldr	r1, [sp, #4]
   11a0c:	ldr	r3, [r2, #4]
   11a10:	add	r3, r3, r1
   11a14:	str	r3, [r2, #4]
   11a18:	b	1199c <__assert_fail@plt+0xe2c>
   11a1c:	andeq	r3, r1, lr, ror #16
   11a20:	muleq	r2, r0, r0
   11a24:	andeq	sl, r2, sp, lsr #1
   11a28:	andeq	r3, r1, r6, ror #16
   11a2c:	ldr	r3, [r0]
   11a30:	add	r1, r3, r1
   11a34:	ldr	r3, [r0, #4]
   11a38:	str	r1, [r0]
   11a3c:	add	r2, r3, r2
   11a40:	str	r2, [r0, #4]
   11a44:	bx	lr
   11a48:	push	{r4, r5, r6, r7, r8, lr}
   11a4c:	mov	r7, r0
   11a50:	mov	r8, r1
   11a54:	mov	r6, r2
   11a58:	mov	r5, r3
   11a5c:	bl	11e7c <__assert_fail@plt+0x130c>
   11a60:	subs	r4, r0, #0
   11a64:	bne	11a90 <__assert_fail@plt+0xf20>
   11a68:	mov	r1, #20
   11a6c:	mov	r0, #1
   11a70:	bl	12750 <error@@Base+0x3c>
   11a74:	mov	r4, r0
   11a78:	mov	r0, r8
   11a7c:	bl	10a2c <strdup@plt>
   11a80:	mov	r1, r4
   11a84:	str	r0, [r4, #8]
   11a88:	mov	r0, r7
   11a8c:	bl	11ec0 <__assert_fail@plt+0x1350>
   11a90:	ldr	r2, [r4, #12]
   11a94:	ldr	r3, [r4, #16]
   11a98:	add	r2, r2, r6
   11a9c:	add	r3, r3, r5
   11aa0:	str	r2, [r4, #12]
   11aa4:	str	r3, [r4, #16]
   11aa8:	pop	{r4, r5, r6, r7, r8, pc}
   11aac:	push	{r0, r1, r4, r5, r6, lr}
   11ab0:	mov	r4, r0
   11ab4:	mov	r6, r1
   11ab8:	bl	11698 <__assert_fail@plt+0xb28>
   11abc:	cmp	r0, #0
   11ac0:	beq	11ad8 <__assert_fail@plt+0xf68>
   11ac4:	mov	r0, r4
   11ac8:	bl	11698 <__assert_fail@plt+0xb28>
   11acc:	cmp	r0, #0
   11ad0:	ldrne	r5, [pc, #92]	; 11b34 <__assert_fail@plt+0xfc4>
   11ad4:	bne	11b04 <__assert_fail@plt+0xf94>
   11ad8:	add	sp, sp, #8
   11adc:	pop	{r4, r5, r6, pc}
   11ae0:	mov	r0, r5
   11ae4:	bl	10ad4 <strlen@plt>
   11ae8:	mov	r3, #0
   11aec:	ldr	r1, [pc, #68]	; 11b38 <__assert_fail@plt+0xfc8>
   11af0:	add	r0, r5, r0
   11af4:	strb	r3, [r0, #-1]
   11af8:	ldm	sp, {r2, r3}
   11afc:	mov	r0, r6
   11b00:	bl	11a48 <__assert_fail@plt+0xed8>
   11b04:	mov	r0, r4
   11b08:	bl	11698 <__assert_fail@plt+0xb28>
   11b0c:	cmp	r0, #0
   11b10:	beq	11ad8 <__assert_fail@plt+0xf68>
   11b14:	add	r3, sp, #4
   11b18:	mov	r2, sp
   11b1c:	ldr	r1, [pc, #24]	; 11b3c <__assert_fail@plt+0xfcc>
   11b20:	ldr	r0, [pc, #12]	; 11b34 <__assert_fail@plt+0xfc4>
   11b24:	bl	10aec <__isoc99_sscanf@plt>
   11b28:	cmp	r0, #2
   11b2c:	beq	11ae0 <__assert_fail@plt+0xf70>
   11b30:	b	11ad8 <__assert_fail@plt+0xf68>
   11b34:	muleq	r2, r0, r0
   11b38:	andeq	sl, r2, sp, lsr #1
   11b3c:	andeq	r3, r1, lr, ror #16
   11b40:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11b44:	mov	r6, r1
   11b48:	mov	r5, r0
   11b4c:	ldr	r1, [pc, #332]	; 11ca0 <__assert_fail@plt+0x1130>
   11b50:	mov	r0, r6
   11b54:	bl	127dc <error@@Base+0xc8>
   11b58:	mov	r4, r0
   11b5c:	bl	11698 <__assert_fail@plt+0xb28>
   11b60:	cmp	r0, #0
   11b64:	beq	11c8c <__assert_fail@plt+0x111c>
   11b68:	mov	r2, #45	; 0x2d
   11b6c:	ldr	r1, [pc, #304]	; 11ca4 <__assert_fail@plt+0x1134>
   11b70:	ldr	r0, [pc, #304]	; 11ca8 <__assert_fail@plt+0x1138>
   11b74:	bl	10b4c <strncmp@plt>
   11b78:	cmp	r0, #0
   11b7c:	bne	11c8c <__assert_fail@plt+0x111c>
   11b80:	mov	r0, r4
   11b84:	bl	11698 <__assert_fail@plt+0xb28>
   11b88:	cmp	r0, #0
   11b8c:	beq	11c8c <__assert_fail@plt+0x111c>
   11b90:	ldr	r1, [pc, #276]	; 11cac <__assert_fail@plt+0x113c>
   11b94:	ldr	r0, [pc, #268]	; 11ca8 <__assert_fail@plt+0x1138>
   11b98:	bl	109e4 <strcmp@plt>
   11b9c:	cmp	r0, #0
   11ba0:	bne	11c8c <__assert_fail@plt+0x111c>
   11ba4:	mov	r1, sp
   11ba8:	mov	r0, r4
   11bac:	bl	116bc <__assert_fail@plt+0xb4c>
   11bb0:	cmp	r0, #0
   11bb4:	beq	11c8c <__assert_fail@plt+0x111c>
   11bb8:	add	r1, sp, #4
   11bbc:	mov	r0, r4
   11bc0:	bl	116bc <__assert_fail@plt+0xb4c>
   11bc4:	cmp	r0, #0
   11bc8:	beq	11c8c <__assert_fail@plt+0x111c>
   11bcc:	mov	r0, r4
   11bd0:	bl	11698 <__assert_fail@plt+0xb28>
   11bd4:	cmp	r0, #0
   11bd8:	beq	11c8c <__assert_fail@plt+0x111c>
   11bdc:	mov	r0, r4
   11be0:	bl	11698 <__assert_fail@plt+0xb28>
   11be4:	cmp	r0, #0
   11be8:	beq	11c8c <__assert_fail@plt+0x111c>
   11bec:	ldr	r3, [r5]
   11bf0:	ldr	r2, [sp]
   11bf4:	add	r1, r5, #8
   11bf8:	add	r3, r3, r2
   11bfc:	str	r3, [r5]
   11c00:	ldr	r2, [sp, #4]
   11c04:	ldr	r3, [r5, #4]
   11c08:	mov	r0, r4
   11c0c:	add	r3, r3, r2
   11c10:	str	r3, [r5, #4]
   11c14:	bl	11960 <__assert_fail@plt+0xdf0>
   11c18:	add	r1, r5, #416	; 0x1a0
   11c1c:	mov	r7, r0
   11c20:	mov	r0, r4
   11c24:	bl	11960 <__assert_fail@plt+0xdf0>
   11c28:	add	r1, r5, #824	; 0x338
   11c2c:	mov	r6, r0
   11c30:	mov	r0, r4
   11c34:	bl	11960 <__assert_fail@plt+0xdf0>
   11c38:	ldr	r3, [sp]
   11c3c:	cmp	r3, #0
   11c40:	ble	11c7c <__assert_fail@plt+0x110c>
   11c44:	add	r1, r5, #920	; 0x398
   11c48:	mov	r0, r4
   11c4c:	bl	11960 <__assert_fail@plt+0xdf0>
   11c50:	cmp	r7, #0
   11c54:	ble	11c64 <__assert_fail@plt+0x10f4>
   11c58:	add	r1, r5, #992	; 0x3e0
   11c5c:	mov	r0, r4
   11c60:	bl	11aac <__assert_fail@plt+0xf3c>
   11c64:	cmp	r6, #0
   11c68:	ble	11c7c <__assert_fail@plt+0x110c>
   11c6c:	add	r1, r5, #9024	; 0x2340
   11c70:	add	r1, r1, #24
   11c74:	mov	r0, r4
   11c78:	bl	11aac <__assert_fail@plt+0xf3c>
   11c7c:	mov	r0, r4
   11c80:	bl	1260c <__assert_fail@plt+0x1a9c>
   11c84:	add	sp, sp, #12
   11c88:	pop	{r4, r5, r6, r7, pc}
   11c8c:	cmp	r6, #0
   11c90:	ldr	r1, [pc, #24]	; 11cb0 <__assert_fail@plt+0x1140>
   11c94:	ldr	r0, [pc, #24]	; 11cb4 <__assert_fail@plt+0x1144>
   11c98:	movne	r1, r6
   11c9c:	bl	1279c <error@@Base+0x88>
   11ca0:	andeq	r3, r1, r1, asr r7
   11ca4:	andeq	r3, r1, ip, ror r8
   11ca8:	muleq	r2, r0, r0
   11cac:	andeq	r6, r1, sp, lsr #27
   11cb0:	andeq	r3, r1, r6, ror r8
   11cb4:	andeq	r3, r1, ip, lsr #17
   11cb8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11cbc:	mov	r4, r0
   11cc0:	mov	r0, r1
   11cc4:	ldr	r1, [pc, #276]	; 11de0 <__assert_fail@plt+0x1270>
   11cc8:	bl	127dc <error@@Base+0xc8>
   11ccc:	ldr	r3, [pc, #272]	; 11de4 <__assert_fail@plt+0x1274>
   11cd0:	ldr	r2, [pc, #272]	; 11de8 <__assert_fail@plt+0x1278>
   11cd4:	ldr	r1, [pc, #272]	; 11dec <__assert_fail@plt+0x127c>
   11cd8:	mov	r7, #1
   11cdc:	mov	r6, #0
   11ce0:	mov	r5, r0
   11ce4:	bl	10ae0 <fprintf@plt>
   11ce8:	ldr	r2, [r4]
   11cec:	ldr	r1, [pc, #252]	; 11df0 <__assert_fail@plt+0x1280>
   11cf0:	mov	r0, r5
   11cf4:	bl	10ae0 <fprintf@plt>
   11cf8:	ldr	r2, [r4, #4]
   11cfc:	ldr	r1, [pc, #240]	; 11df4 <__assert_fail@plt+0x1284>
   11d00:	mov	r0, r5
   11d04:	bl	10ae0 <fprintf@plt>
   11d08:	mov	r1, r4
   11d0c:	mov	r0, r5
   11d10:	bl	116f8 <__assert_fail@plt+0xb88>
   11d14:	mov	r1, r5
   11d18:	ldr	r0, [pc, #216]	; 11df8 <__assert_fail@plt+0x1288>
   11d1c:	bl	10b40 <fputs@plt>
   11d20:	ldr	r3, [pc, #212]	; 11dfc <__assert_fail@plt+0x128c>
   11d24:	mov	r2, #50	; 0x32
   11d28:	add	r1, r4, #8
   11d2c:	mov	r0, r5
   11d30:	stm	sp, {r6, r7}
   11d34:	bl	117a4 <__assert_fail@plt+0xc34>
   11d38:	ldr	r3, [pc, #192]	; 11e00 <__assert_fail@plt+0x1290>
   11d3c:	mov	r2, #50	; 0x32
   11d40:	add	r1, r4, #416	; 0x1a0
   11d44:	mov	r0, r5
   11d48:	stm	sp, {r6, r7}
   11d4c:	bl	117a4 <__assert_fail@plt+0xc34>
   11d50:	ldr	r3, [pc, #172]	; 11e04 <__assert_fail@plt+0x1294>
   11d54:	str	r7, [sp, #4]
   11d58:	str	r7, [sp]
   11d5c:	mov	r2, #10
   11d60:	add	r1, r4, #824	; 0x338
   11d64:	mov	r0, r5
   11d68:	bl	117a4 <__assert_fail@plt+0xc34>
   11d6c:	ldr	r3, [r4]
   11d70:	cmp	r3, r6
   11d74:	ble	11dd0 <__assert_fail@plt+0x1260>
   11d78:	ldr	r3, [pc, #136]	; 11e08 <__assert_fail@plt+0x1298>
   11d7c:	str	r6, [sp, #4]
   11d80:	str	r6, [sp]
   11d84:	mov	r2, #8
   11d88:	add	r1, r4, #920	; 0x398
   11d8c:	mov	r0, r5
   11d90:	bl	117a4 <__assert_fail@plt+0xc34>
   11d94:	ldr	r3, [r4, #8]
   11d98:	cmp	r3, r6
   11d9c:	ble	11db0 <__assert_fail@plt+0x1240>
   11da0:	ldr	r2, [pc, #84]	; 11dfc <__assert_fail@plt+0x128c>
   11da4:	add	r1, r4, #992	; 0x3e0
   11da8:	mov	r0, r5
   11dac:	bl	118a8 <__assert_fail@plt+0xd38>
   11db0:	ldr	r3, [r4, #416]	; 0x1a0
   11db4:	cmp	r3, #0
   11db8:	ble	11dd0 <__assert_fail@plt+0x1260>
   11dbc:	add	r1, r4, #9024	; 0x2340
   11dc0:	ldr	r2, [pc, #56]	; 11e00 <__assert_fail@plt+0x1290>
   11dc4:	add	r1, r1, #24
   11dc8:	mov	r0, r5
   11dcc:	bl	118a8 <__assert_fail@plt+0xd38>
   11dd0:	mov	r0, r5
   11dd4:	add	sp, sp, #12
   11dd8:	pop	{r4, r5, r6, r7, lr}
   11ddc:	b	1260c <__assert_fail@plt+0x1a9c>
   11de0:	andeq	r3, r1, r8, lsr r7
   11de4:	andeq	r6, r1, sp, lsr #27
   11de8:	andeq	r3, r1, ip, ror r8
   11dec:			; <UNDEFINED> instruction: 0x000138be
   11df0:	andeq	r3, r1, r3, asr #17
   11df4:	ldrdeq	r3, [r1], -r1
   11df8:	andeq	r3, r1, r7, ror #17
   11dfc:	strdeq	r3, [r1], -r4
   11e00:	andeq	r3, r1, r7, lsl #18
   11e04:	strdeq	r3, [r1], -lr
   11e08:	andeq	r3, r1, r5, lsl r9
   11e0c:	sub	r2, r0, #1
   11e10:	mov	r0, #0
   11e14:	push	{r4, lr}
   11e18:	ldrb	r3, [r2, #1]!
   11e1c:	cmp	r3, #0
   11e20:	bne	11e34 <__assert_fail@plt+0x12c4>
   11e24:	ldr	r1, [pc, #16]	; 11e3c <__assert_fail@plt+0x12cc>
   11e28:	bl	1332c <error@@Base+0xc18>
   11e2c:	sxth	r0, r1
   11e30:	pop	{r4, pc}
   11e34:	add	r0, r0, r3
   11e38:	b	11e18 <__assert_fail@plt+0x12a8>
   11e3c:	strdeq	r0, [r0], -r7
   11e40:	push	{r4, r5, r6, lr}
   11e44:	add	r6, r0, #8000	; 0x1f40
   11e48:	mov	r4, r0
   11e4c:	mov	r5, r0
   11e50:	add	r6, r6, #48	; 0x30
   11e54:	mov	r0, r5
   11e58:	add	r5, r5, #16
   11e5c:	bl	11428 <__assert_fail@plt+0x8b8>
   11e60:	cmp	r5, r6
   11e64:	bne	11e54 <__assert_fail@plt+0x12e4>
   11e68:	add	r4, r4, #4096	; 0x1000
   11e6c:	mov	r3, #0
   11e70:	str	r3, [r4, #3952]	; 0xf70
   11e74:	str	r3, [r4, #3956]	; 0xf74
   11e78:	pop	{r4, r5, r6, pc}
   11e7c:	push	{r4, r5, r6, lr}
   11e80:	mov	r4, r0
   11e84:	mov	r0, r1
   11e88:	mov	r5, r1
   11e8c:	bl	11e0c <__assert_fail@plt+0x129c>
   11e90:	ldr	r4, [r4, r0, lsl #4]
   11e94:	cmp	r4, #0
   11e98:	beq	11eb0 <__assert_fail@plt+0x1340>
   11e9c:	ldr	r1, [r4, #8]
   11ea0:	mov	r0, r5
   11ea4:	bl	109e4 <strcmp@plt>
   11ea8:	cmp	r0, #0
   11eac:	bne	11eb8 <__assert_fail@plt+0x1348>
   11eb0:	mov	r0, r4
   11eb4:	pop	{r4, r5, r6, pc}
   11eb8:	ldr	r4, [r4, #4]
   11ebc:	b	11e94 <__assert_fail@plt+0x1324>
   11ec0:	push	{r4, r5, r6, lr}
   11ec4:	mov	r4, r0
   11ec8:	ldr	r0, [r1, #8]
   11ecc:	mov	r5, r1
   11ed0:	bl	11e0c <__assert_fail@plt+0x129c>
   11ed4:	mov	r1, r5
   11ed8:	add	r0, r4, r0, lsl #4
   11edc:	add	r4, r4, #4096	; 0x1000
   11ee0:	bl	11440 <__assert_fail@plt+0x8d0>
   11ee4:	ldr	r0, [r4, #3952]	; 0xf70
   11ee8:	cmp	r0, #0
   11eec:	beq	11efc <__assert_fail@plt+0x138c>
   11ef0:	bl	109fc <free@plt>
   11ef4:	mov	r3, #0
   11ef8:	str	r3, [r4, #3952]	; 0xf70
   11efc:	ldr	r3, [r4, #3956]	; 0xf74
   11f00:	add	r3, r3, #1
   11f04:	str	r3, [r4, #3956]	; 0xf74
   11f08:	pop	{r4, r5, r6, pc}
   11f0c:	push	{r4, r5, r6, lr}
   11f10:	mov	r4, r0
   11f14:	ldr	r0, [r1, #8]
   11f18:	mov	r5, r1
   11f1c:	bl	11e0c <__assert_fail@plt+0x129c>
   11f20:	mov	r1, r5
   11f24:	add	r0, r4, r0, lsl #4
   11f28:	add	r4, r4, #4096	; 0x1000
   11f2c:	bl	11478 <__assert_fail@plt+0x908>
   11f30:	ldr	r0, [r4, #3952]	; 0xf70
   11f34:	cmp	r0, #0
   11f38:	beq	11f48 <__assert_fail@plt+0x13d8>
   11f3c:	bl	109fc <free@plt>
   11f40:	mov	r3, #0
   11f44:	str	r3, [r4, #3952]	; 0xf70
   11f48:	ldr	r3, [r4, #3956]	; 0xf74
   11f4c:	sub	r3, r3, #1
   11f50:	str	r3, [r4, #3956]	; 0xf74
   11f54:	pop	{r4, r5, r6, pc}
   11f58:	push	{r4, r5, r6, lr}
   11f5c:	add	r6, r0, #4096	; 0x1000
   11f60:	ldr	r4, [r6, #3952]	; 0xf70
   11f64:	cmp	r4, #0
   11f68:	popne	{r4, r5, r6, pc}
   11f6c:	ldr	r3, [r6, #3956]	; 0xf74
   11f70:	cmp	r3, #0
   11f74:	popeq	{r4, r5, r6, pc}
   11f78:	mov	r5, r0
   11f7c:	mov	r1, #4
   11f80:	mov	r0, r3
   11f84:	bl	12750 <error@@Base+0x3c>
   11f88:	ldr	lr, [pc, #60]	; 11fcc <__assert_fail@plt+0x145c>
   11f8c:	mov	r3, r4
   11f90:	mov	r2, r4
   11f94:	str	r0, [r6, #3952]	; 0xf70
   11f98:	ldr	r1, [r5, r2, lsl #4]
   11f9c:	mov	ip, r3
   11fa0:	cmp	r1, #0
   11fa4:	mov	r3, ip
   11fa8:	bne	11fbc <__assert_fail@plt+0x144c>
   11fac:	add	r2, r2, #1
   11fb0:	cmp	r2, lr
   11fb4:	bne	11f98 <__assert_fail@plt+0x1428>
   11fb8:	pop	{r4, r5, r6, pc}
   11fbc:	str	r1, [r0, ip, lsl #2]
   11fc0:	add	ip, ip, #1
   11fc4:	ldr	r1, [r1, #4]
   11fc8:	b	11fa0 <__assert_fail@plt+0x1430>
   11fcc:	strdeq	r0, [r0], -r7
   11fd0:	push	{r4, r5, r6, r7, r8, lr}
   11fd4:	add	r6, r0, #8000	; 0x1f40
   11fd8:	mov	r4, r0
   11fdc:	mov	r7, r1
   11fe0:	mov	r5, r0
   11fe4:	add	r6, r6, #48	; 0x30
   11fe8:	mov	r0, r5
   11fec:	mov	r1, r7
   11ff0:	add	r5, r5, #16
   11ff4:	bl	11524 <__assert_fail@plt+0x9b4>
   11ff8:	cmp	r5, r6
   11ffc:	bne	11fe8 <__assert_fail@plt+0x1478>
   12000:	add	r4, r4, #4096	; 0x1000
   12004:	ldr	r0, [r4, #3952]	; 0xf70
   12008:	cmp	r0, #0
   1200c:	beq	1201c <__assert_fail@plt+0x14ac>
   12010:	bl	109fc <free@plt>
   12014:	mov	r3, #0
   12018:	str	r3, [r4, #3952]	; 0xf70
   1201c:	mov	r3, #0
   12020:	str	r3, [r4, #3956]	; 0xf74
   12024:	pop	{r4, r5, r6, r7, r8, pc}
   12028:	cmp	r0, #0
   1202c:	beq	12090 <__assert_fail@plt+0x1520>
   12030:	push	{r4, r5, lr}
   12034:	mov	r2, #0
   12038:	ldr	ip, [r0, #12]
   1203c:	ldr	r1, [pc, #84]	; 12098 <__assert_fail@plt+0x1528>
   12040:	ldr	lr, [pc, #84]	; 1209c <__assert_fail@plt+0x152c>
   12044:	mov	r5, #12
   12048:	sub	r3, r1, r2
   1204c:	add	r3, r2, r3, lsr #1
   12050:	mul	r4, r5, r3
   12054:	add	r0, lr, r4
   12058:	ldr	r4, [lr, r4]
   1205c:	cmp	ip, r4
   12060:	subcc	r1, r3, #1
   12064:	bcc	12078 <__assert_fail@plt+0x1508>
   12068:	ldr	r2, [r0, #4]
   1206c:	cmp	ip, r2
   12070:	bls	12088 <__assert_fail@plt+0x1518>
   12074:	add	r2, r3, #1
   12078:	cmp	r1, r2
   1207c:	bcs	12048 <__assert_fail@plt+0x14d8>
   12080:	mov	r0, #0
   12084:	pop	{r4, r5, pc}
   12088:	ldr	r0, [r0, #8]
   1208c:	pop	{r4, r5, pc}
   12090:	mov	r0, #18
   12094:	bx	lr
   12098:	andeq	r0, r0, r4, asr #8
   1209c:	andeq	r3, r1, r0, lsr #18
   120a0:	push	{r4, lr}
   120a4:	subs	r4, r0, #0
   120a8:	beq	120cc <__assert_fail@plt+0x155c>
   120ac:	ldr	r4, [r4, #4]
   120b0:	cmp	r4, #0
   120b4:	beq	120cc <__assert_fail@plt+0x155c>
   120b8:	mov	r0, r4
   120bc:	bl	12028 <__assert_fail@plt+0x14b8>
   120c0:	bic	r0, r0, #2
   120c4:	cmp	r0, #4
   120c8:	beq	120ac <__assert_fail@plt+0x153c>
   120cc:	mov	r0, r4
   120d0:	pop	{r4, pc}
   120d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120d8:	sub	sp, sp, #28
   120dc:	ldr	r6, [r1]
   120e0:	str	r0, [sp, #4]
   120e4:	cmp	r6, #0
   120e8:	str	r6, [sp, #12]
   120ec:	beq	12494 <__assert_fail@plt+0x1924>
   120f0:	mov	r8, #17
   120f4:	add	r7, sp, #8
   120f8:	mov	r9, #8
   120fc:	mov	sl, #15
   12100:	ldr	r3, [r7, #4]
   12104:	cmp	r3, #0
   12108:	bne	12214 <__assert_fail@plt+0x16a4>
   1210c:	ldr	r0, [r6, #12]
   12110:	bl	10a08 <utf8proc_get_property@plt>
   12114:	ldrh	r3, [r0]
   12118:	cmp	r3, #29
   1211c:	bhi	121e4 <__assert_fail@plt+0x1674>
   12120:	mov	r2, #1
   12124:	ldr	r1, [pc, #948]	; 124e0 <__assert_fail@plt+0x1970>
   12128:	ands	r3, r1, r2, lsl r3
   1212c:	beq	121e4 <__assert_fail@plt+0x1674>
   12130:	ldr	r8, [r7, #4]
   12134:	mov	r4, r6
   12138:	mov	r5, #0
   1213c:	b	1218c <__assert_fail@plt+0x161c>
   12140:	cmp	r4, #0
   12144:	bne	1215c <__assert_fail@plt+0x15ec>
   12148:	ldr	r3, [pc, #916]	; 124e4 <__assert_fail@plt+0x1974>
   1214c:	mov	r2, #249	; 0xf9
   12150:	ldr	r1, [pc, #912]	; 124e8 <__assert_fail@plt+0x1978>
   12154:	ldr	r0, [pc, #912]	; 124ec <__assert_fail@plt+0x197c>
   12158:	b	12180 <__assert_fail@plt+0x1610>
   1215c:	add	r1, sp, #8
   12160:	ldr	r0, [r4, #12]
   12164:	bl	10a20 <utf8proc_encode_char@plt>
   12168:	cmp	r0, #0
   1216c:	bne	12184 <__assert_fail@plt+0x1614>
   12170:	ldr	r3, [pc, #876]	; 124e4 <__assert_fail@plt+0x1974>
   12174:	ldr	r1, [pc, #876]	; 124e8 <__assert_fail@plt+0x1978>
   12178:	ldr	r0, [pc, #880]	; 124f0 <__assert_fail@plt+0x1980>
   1217c:	mov	r2, #253	; 0xfd
   12180:	bl	10b70 <__assert_fail@plt>
   12184:	ldr	r4, [r4, #4]
   12188:	add	r5, r5, r0
   1218c:	cmp	r8, r4
   12190:	bne	12140 <__assert_fail@plt+0x15d0>
   12194:	add	r0, r5, #1
   12198:	bl	10a80 <malloc@plt>
   1219c:	mov	r5, #0
   121a0:	mov	r4, r0
   121a4:	cmp	r8, r6
   121a8:	bne	121ec <__assert_fail@plt+0x167c>
   121ac:	mov	r3, #0
   121b0:	strb	r3, [r4, r5]
   121b4:	mov	r1, #12
   121b8:	mov	r0, #1
   121bc:	bl	12750 <error@@Base+0x3c>
   121c0:	mov	r5, r0
   121c4:	mov	r0, r4
   121c8:	bl	10b04 <utf8proc_NFC@plt>
   121cc:	mov	r1, r5
   121d0:	str	r0, [r5, #8]
   121d4:	ldr	r0, [sp, #4]
   121d8:	bl	11450 <__assert_fail@plt+0x8e0>
   121dc:	mov	r0, r4
   121e0:	bl	109fc <free@plt>
   121e4:	ldr	r6, [r7, #4]
   121e8:	b	120e4 <__assert_fail@plt+0x1574>
   121ec:	cmp	r6, #0
   121f0:	ldreq	r3, [pc, #764]	; 124f4 <__assert_fail@plt+0x1984>
   121f4:	ldreq	r2, [pc, #764]	; 124f8 <__assert_fail@plt+0x1988>
   121f8:	beq	12150 <__assert_fail@plt+0x15e0>
   121fc:	add	r1, r4, r5
   12200:	ldr	r0, [r6, #12]
   12204:	bl	10a20 <utf8proc_encode_char@plt>
   12208:	ldr	r6, [r6, #4]
   1220c:	add	r5, r5, r0
   12210:	b	121a4 <__assert_fail@plt+0x1634>
   12214:	mov	r0, r7
   12218:	bl	120a0 <__assert_fail@plt+0x1530>
   1221c:	mov	r7, r0
   12220:	bl	12028 <__assert_fail@plt+0x14b8>
   12224:	mov	r4, r0
   12228:	mov	r0, r7
   1222c:	bl	120a0 <__assert_fail@plt+0x1530>
   12230:	mov	fp, r0
   12234:	bl	12028 <__assert_fail@plt+0x14b8>
   12238:	mov	r5, r0
   1223c:	mov	r0, fp
   12240:	bl	120a0 <__assert_fail@plt+0x1530>
   12244:	bl	12028 <__assert_fail@plt+0x14b8>
   12248:	cmp	r4, #1
   1224c:	cmpeq	r5, #2
   12250:	sub	r3, r5, #2
   12254:	sub	r2, r4, #1
   12258:	clz	r3, r3
   1225c:	lsr	r3, r3, #5
   12260:	beq	12464 <__assert_fail@plt+0x18f4>
   12264:	cmp	r2, #2
   12268:	bls	1248c <__assert_fail@plt+0x191c>
   1226c:	bic	r2, r5, #2
   12270:	cmp	r2, #1
   12274:	orreq	r3, r3, #1
   12278:	cmp	r3, #0
   1227c:	bne	1248c <__assert_fail@plt+0x191c>
   12280:	sub	r3, r4, #8
   12284:	cmp	r3, #1
   12288:	bhi	122b4 <__assert_fail@plt+0x1744>
   1228c:	sub	r1, r5, #8
   12290:	cmp	r1, #1
   12294:	bls	12370 <__assert_fail@plt+0x1800>
   12298:	sub	r1, r5, #12
   1229c:	cmp	r5, #10
   122a0:	cmpne	r1, #1
   122a4:	bhi	122b4 <__assert_fail@plt+0x1744>
   122a8:	sub	r1, r0, #8
   122ac:	cmp	r1, #1
   122b0:	bls	12370 <__assert_fail@plt+0x1800>
   122b4:	sub	r1, r8, #8
   122b8:	cmp	r1, #1
   122bc:	bhi	122dc <__assert_fail@plt+0x176c>
   122c0:	sub	r1, r4, #12
   122c4:	cmp	r4, #10
   122c8:	cmpne	r1, #1
   122cc:	bhi	122dc <__assert_fail@plt+0x176c>
   122d0:	sub	r1, r5, #8
   122d4:	cmp	r1, #1
   122d8:	bls	12370 <__assert_fail@plt+0x1800>
   122dc:	sub	r1, r4, #8
   122e0:	sub	lr, r5, #10
   122e4:	clz	r1, r1
   122e8:	clz	lr, lr
   122ec:	lsr	r1, r1, #5
   122f0:	lsr	lr, lr, #5
   122f4:	tst	r1, lr
   122f8:	bne	1246c <__assert_fail@plt+0x18fc>
   122fc:	cmp	r5, #11
   12300:	movne	r1, #0
   12304:	andeq	r1, r1, #1
   12308:	cmp	r0, #8
   1230c:	movne	r1, #0
   12310:	andeq	r1, r1, #1
   12314:	cmp	r1, #0
   12318:	bne	1246c <__assert_fail@plt+0x18fc>
   1231c:	cmp	r5, #8
   12320:	cmpeq	r4, #11
   12324:	moveq	r1, #1
   12328:	movne	r1, #0
   1232c:	cmp	r8, #8
   12330:	movne	r1, #0
   12334:	andeq	r1, r1, #1
   12338:	cmp	r1, #0
   1233c:	bne	12474 <__assert_fail@plt+0x1904>
   12340:	sub	r1, r4, #15
   12344:	sub	ip, r5, #15
   12348:	clz	r1, r1
   1234c:	clz	ip, ip
   12350:	lsr	r1, r1, #5
   12354:	lsr	ip, ip, #5
   12358:	tst	r1, ip
   1235c:	bne	1247c <__assert_fail@plt+0x190c>
   12360:	cmp	r3, #1
   12364:	bhi	12378 <__assert_fail@plt+0x1808>
   12368:	cmp	r5, #15
   1236c:	bne	12398 <__assert_fail@plt+0x1828>
   12370:	mov	r8, r4
   12374:	b	12100 <__assert_fail@plt+0x1590>
   12378:	cmp	r4, #15
   1237c:	bne	124c4 <__assert_fail@plt+0x1954>
   12380:	sub	fp, r5, #8
   12384:	cmp	fp, #1
   12388:	bls	12370 <__assert_fail@plt+0x1800>
   1238c:	cmp	r8, #15
   12390:	bne	123bc <__assert_fail@plt+0x184c>
   12394:	b	123a0 <__assert_fail@plt+0x1830>
   12398:	cmp	r8, #15
   1239c:	bne	123b4 <__assert_fail@plt+0x1844>
   123a0:	sub	r8, r4, #10
   123a4:	bics	r8, r8, #2
   123a8:	bne	123b4 <__assert_fail@plt+0x1844>
   123ac:	cmp	r5, #15
   123b0:	beq	12370 <__assert_fail@plt+0x1800>
   123b4:	cmp	r4, #15
   123b8:	bne	123d8 <__assert_fail@plt+0x1868>
   123bc:	cmp	r2, #12
   123c0:	movne	r2, lr
   123c4:	orreq	r2, lr, #1
   123c8:	cmp	r2, #0
   123cc:	beq	123d8 <__assert_fail@plt+0x1868>
   123d0:	cmp	r0, #15
   123d4:	beq	1247c <__assert_fail@plt+0x190c>
   123d8:	sub	r0, r4, #7
   123dc:	sub	r2, r5, #7
   123e0:	clz	r0, r0
   123e4:	clz	r2, r2
   123e8:	lsr	r0, r0, #5
   123ec:	lsr	r2, r2, #5
   123f0:	tst	r0, r2
   123f4:	bne	12484 <__assert_fail@plt+0x1914>
   123f8:	cmp	r3, #1
   123fc:	movhi	r3, r1
   12400:	orrls	r3, r1, #1
   12404:	cmp	r3, #0
   12408:	bne	1241c <__assert_fail@plt+0x18ac>
   1240c:	cmp	r4, #16
   12410:	orreq	r0, r0, #1
   12414:	cmp	r0, #0
   12418:	beq	12424 <__assert_fail@plt+0x18b4>
   1241c:	cmp	r5, #16
   12420:	beq	12370 <__assert_fail@plt+0x1800>
   12424:	cmp	r4, #16
   12428:	bne	12450 <__assert_fail@plt+0x18e0>
   1242c:	sub	r3, r5, #8
   12430:	cmp	r3, #1
   12434:	orrls	ip, ip, #1
   12438:	cmp	ip, #0
   1243c:	bne	12370 <__assert_fail@plt+0x1800>
   12440:	cmp	r5, #16
   12444:	orreq	r2, r2, #1
   12448:	cmp	r2, #0
   1244c:	bne	12370 <__assert_fail@plt+0x1800>
   12450:	cmp	r4, #5
   12454:	cmpeq	r5, #5
   12458:	bne	1248c <__assert_fail@plt+0x191c>
   1245c:	mov	r4, #5
   12460:	b	12370 <__assert_fail@plt+0x1800>
   12464:	mov	r4, #1
   12468:	b	12370 <__assert_fail@plt+0x1800>
   1246c:	mov	r4, r9
   12470:	b	12370 <__assert_fail@plt+0x1800>
   12474:	mov	r4, #11
   12478:	b	12370 <__assert_fail@plt+0x1800>
   1247c:	mov	r4, sl
   12480:	b	12370 <__assert_fail@plt+0x1800>
   12484:	mov	r4, #7
   12488:	b	12370 <__assert_fail@plt+0x1800>
   1248c:	cmp	r7, #0
   12490:	bne	124a0 <__assert_fail@plt+0x1930>
   12494:	add	sp, sp, #28
   12498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1249c:	mov	r7, r4
   124a0:	ldr	r4, [r7, #4]
   124a4:	cmp	r4, #0
   124a8:	beq	1210c <__assert_fail@plt+0x159c>
   124ac:	mov	r0, r4
   124b0:	bl	12028 <__assert_fail@plt+0x14b8>
   124b4:	bic	r0, r0, #2
   124b8:	cmp	r0, #4
   124bc:	beq	1249c <__assert_fail@plt+0x192c>
   124c0:	b	1210c <__assert_fail@plt+0x159c>
   124c4:	cmp	r8, #15
   124c8:	bne	123d8 <__assert_fail@plt+0x1868>
   124cc:	cmp	r4, #14
   124d0:	bne	123a0 <__assert_fail@plt+0x1830>
   124d4:	cmp	r5, #15
   124d8:	bne	123d8 <__assert_fail@plt+0x1868>
   124dc:	b	12370 <__assert_fail@plt+0x1800>
   124e0:	strdcs	r1, [r0], -lr
   124e4:	andeq	r6, r1, ip, asr ip
   124e8:	andeq	r6, r1, lr, ror ip
   124ec:	andeq	r6, r1, r5, lsl #25
   124f0:	muleq	r1, r5, ip
   124f4:	andeq	r6, r1, sp, ror #24
   124f8:	andeq	r0, r0, sp, lsl #2
   124fc:	push	{r4, lr}
   12500:	mov	r4, r0
   12504:	ldr	r0, [r0, #8]
   12508:	bl	109fc <free@plt>
   1250c:	mov	r0, r4
   12510:	pop	{r4, lr}
   12514:	b	109fc <free@plt>
   12518:	ldr	r3, [pc, #56]	; 12558 <__assert_fail@plt+0x19e8>
   1251c:	push	{r4, r5, lr}
   12520:	sub	sp, sp, #116	; 0x74
   12524:	ldr	r4, [r3]
   12528:	mov	r5, r0
   1252c:	bl	10ab0 <getpid@plt>
   12530:	mov	r2, r4
   12534:	ldr	r1, [pc, #32]	; 1255c <__assert_fail@plt+0x19ec>
   12538:	str	r5, [sp]
   1253c:	mov	r3, r0
   12540:	add	r0, sp, #12
   12544:	bl	10b1c <sprintf@plt>
   12548:	add	r0, sp, #12
   1254c:	bl	10a2c <strdup@plt>
   12550:	add	sp, sp, #116	; 0x74
   12554:	pop	{r4, r5, pc}
   12558:	andeq	r0, r3, r0, asr #7
   1255c:	andeq	r6, r1, r8, lsr #25
   12560:	ldr	r3, [pc, #84]	; 125bc <__assert_fail@plt+0x1a4c>
   12564:	push	{r7, lr}
   12568:	mov	r5, r0
   1256c:	ldr	r3, [r3]
   12570:	cmp	r3, #0
   12574:	beq	1257c <__assert_fail@plt+0x1a0c>
   12578:	blx	r3
   1257c:	ldr	r6, [pc, #60]	; 125c0 <__assert_fail@plt+0x1a50>
   12580:	mov	r4, #1
   12584:	ldrsh	r3, [r6]
   12588:	cmp	r3, r4
   1258c:	bge	12598 <__assert_fail@plt+0x1a28>
   12590:	mov	r0, r5
   12594:	bl	10abc <exit@plt>
   12598:	mov	r0, r4
   1259c:	bl	12518 <__assert_fail@plt+0x19a8>
   125a0:	add	r4, r4, #1
   125a4:	sxth	r4, r4
   125a8:	mov	r7, r0
   125ac:	bl	10a44 <unlink@plt>
   125b0:	mov	r0, r7
   125b4:	bl	109fc <free@plt>
   125b8:	b	12584 <__assert_fail@plt+0x1a14>
   125bc:	andeq	r0, r3, r4, asr #7
   125c0:	strdeq	sl, [r2], -r4
   125c4:	mov	r3, #0
   125c8:	ldrb	r2, [r0, r3]
   125cc:	cmp	r2, #0
   125d0:	beq	125fc <__assert_fail@plt+0x1a8c>
   125d4:	ldrb	ip, [r1, r3]
   125d8:	cmp	ip, r2
   125dc:	beq	125f4 <__assert_fail@plt+0x1a84>
   125e0:	ldrb	r3, [r1, r3]
   125e4:	cmp	r3, r2
   125e8:	mvnhi	r0, #0
   125ec:	movls	r0, #1
   125f0:	bx	lr
   125f4:	add	r3, r3, #1
   125f8:	b	125c8 <__assert_fail@plt+0x1a58>
   125fc:	ldrb	r0, [r1, r3]
   12600:	cmp	r0, #0
   12604:	bne	125e0 <__assert_fail@plt+0x1a70>
   12608:	bx	lr
   1260c:	ldr	r2, [pc, #28]	; 12630 <__assert_fail@plt+0x1ac0>
   12610:	ldr	r2, [r2]
   12614:	cmp	r2, r0
   12618:	bxeq	lr
   1261c:	ldr	r2, [pc, #16]	; 12634 <__assert_fail@plt+0x1ac4>
   12620:	ldr	r2, [r2]
   12624:	cmp	r0, r2
   12628:	bxeq	lr
   1262c:	b	10af8 <fclose@plt>
   12630:	andeq	r8, r2, r8, ror #1
   12634:	andeq	r8, r2, ip, ror #1
   12638:	push	{lr}		; (str lr, [sp, #-4]!)
   1263c:	sub	sp, sp, #92	; 0x5c
   12640:	mov	r1, sp
   12644:	bl	133c0 <error@@Base+0xcac>
   12648:	clz	r0, r0
   1264c:	lsr	r0, r0, #5
   12650:	add	sp, sp, #92	; 0x5c
   12654:	pop	{pc}		; (ldr pc, [sp], #4)
   12658:	ldr	r3, [pc, #36]	; 12684 <__assert_fail@plt+0x1b14>
   1265c:	push	{r4, lr}
   12660:	ldrh	r0, [r3]
   12664:	add	r0, r0, #1
   12668:	sxth	r0, r0
   1266c:	strh	r0, [r3]
   12670:	bl	12518 <__assert_fail@plt+0x19a8>
   12674:	mov	r4, r0
   12678:	bl	10a44 <unlink@plt>
   1267c:	mov	r0, r4
   12680:	pop	{r4, pc}
   12684:	strdeq	sl, [r2], -r4
   12688:	push	{r4, lr}
   1268c:	mov	r4, r0
   12690:	bl	10ad4 <strlen@plt>
   12694:	sub	r0, r0, #1
   12698:	sxth	r0, r0
   1269c:	cmp	r0, #0
   126a0:	blt	126b0 <__assert_fail@plt+0x1b40>
   126a4:	ldrb	r3, [r4, r0]
   126a8:	cmp	r3, #47	; 0x2f
   126ac:	bne	12694 <__assert_fail@plt+0x1b24>
   126b0:	add	r0, r0, #1
   126b4:	add	r0, r4, r0
   126b8:	pop	{r4, pc}
   126bc:	push	{r4, lr}
   126c0:	mov	r0, #0
   126c4:	bl	12560 <__assert_fail@plt+0x19f0>
   126c8:	ldr	r2, [pc, #52]	; 12704 <__assert_fail@plt+0x1b94>
   126cc:	push	{r4, lr}
   126d0:	ldr	r2, [r2]
   126d4:	cmp	r2, #0
   126d8:	beq	126e4 <__assert_fail@plt+0x1b74>
   126dc:	blx	r2
   126e0:	bl	126bc <__assert_fail@plt+0x1b4c>
   126e4:	mov	r3, r0
   126e8:	ldr	r2, [pc, #24]	; 12708 <__assert_fail@plt+0x1b98>
   126ec:	ldr	r0, [pc, #24]	; 1270c <__assert_fail@plt+0x1b9c>
   126f0:	ldr	r1, [pc, #24]	; 12710 <__assert_fail@plt+0x1ba0>
   126f4:	ldr	r2, [r2]
   126f8:	ldr	r0, [r0]
   126fc:	bl	10ae0 <fprintf@plt>
   12700:	b	126e0 <__assert_fail@plt+0x1b70>
   12704:			; <UNDEFINED> instruction: 0x000303bc
   12708:	andeq	r0, r3, r0, asr #7
   1270c:	andeq	r8, r2, r0, ror #1
   12710:			; <UNDEFINED> instruction: 0x00016cb6

00012714 <error@@Base>:
   12714:	mov	r3, r0
   12718:	ldr	r2, [pc, #32]	; 12740 <error@@Base+0x2c>
   1271c:	ldr	r0, [pc, #32]	; 12744 <error@@Base+0x30>
   12720:	push	{r4, lr}
   12724:	ldr	r2, [r2]
   12728:	ldr	r1, [pc, #24]	; 12748 <error@@Base+0x34>
   1272c:	ldr	r0, [r0]
   12730:	bl	10ae0 <fprintf@plt>
   12734:	ldr	r3, [pc, #16]	; 1274c <error@@Base+0x38>
   12738:	ldr	r0, [r3]
   1273c:	bl	12560 <__assert_fail@plt+0x19f0>
   12740:	andeq	r0, r3, r0, asr #7
   12744:	andeq	r8, r2, r0, ror #1
   12748:	andeq	r6, r1, r5, asr #25
   1274c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12750:	push	{r4, lr}
   12754:	bl	109cc <calloc@plt>
   12758:	cmp	r0, #0
   1275c:	popne	{r4, pc}
   12760:	ldr	r0, [pc]	; 12768 <error@@Base+0x54>
   12764:	bl	12714 <error@@Base>
   12768:	andeq	r6, r1, sp, asr #25
   1276c:	ldr	r3, [pc, #32]	; 12794 <error@@Base+0x80>
   12770:	ldrb	r2, [r3, #2]
   12774:	cmp	r2, #0
   12778:	bne	12790 <error@@Base+0x7c>
   1277c:	push	{r4, lr}
   12780:	mov	r2, #1
   12784:	ldr	r0, [pc, #12]	; 12798 <error@@Base+0x84>
   12788:	strb	r2, [r3, #2]
   1278c:	bl	12714 <error@@Base>
   12790:	bx	lr
   12794:	strdeq	sl, [r2], -r4
   12798:	andeq	r6, r1, r7, ror #25
   1279c:	push	{r0, r1, r2, lr}
   127a0:	mov	r3, r0
   127a4:	ldr	r2, [pc, #32]	; 127cc <error@@Base+0xb8>
   127a8:	ldr	r0, [pc, #32]	; 127d0 <error@@Base+0xbc>
   127ac:	str	r1, [sp]
   127b0:	ldr	r1, [pc, #28]	; 127d4 <error@@Base+0xc0>
   127b4:	ldr	r2, [r2]
   127b8:	ldr	r0, [r0]
   127bc:	bl	10ae0 <fprintf@plt>
   127c0:	ldr	r3, [pc, #16]	; 127d8 <error@@Base+0xc4>
   127c4:	ldr	r0, [r3]
   127c8:	bl	12560 <__assert_fail@plt+0x19f0>
   127cc:	andeq	r0, r3, r0, asr #7
   127d0:	andeq	r8, r2, r0, ror #1
   127d4:	strdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   127d8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   127dc:	push	{r4, r5, r6, lr}
   127e0:	subs	r4, r0, #0
   127e4:	mov	r5, r1
   127e8:	bne	12804 <error@@Base+0xf0>
   127ec:	ldrb	r3, [r1]
   127f0:	cmp	r3, #114	; 0x72
   127f4:	ldreq	r3, [pc, #44]	; 12828 <error@@Base+0x114>
   127f8:	ldrne	r3, [pc, #44]	; 1282c <error@@Base+0x118>
   127fc:	ldr	r0, [r3]
   12800:	pop	{r4, r5, r6, pc}
   12804:	bl	109f0 <fopen@plt>
   12808:	cmp	r0, #0
   1280c:	popne	{r4, r5, r6, pc}
   12810:	ldrb	r3, [r5]
   12814:	mov	r1, r4
   12818:	cmp	r3, #119	; 0x77
   1281c:	ldreq	r0, [pc, #12]	; 12830 <error@@Base+0x11c>
   12820:	ldrne	r0, [pc, #12]	; 12834 <error@@Base+0x120>
   12824:	bl	1279c <error@@Base+0x88>
   12828:	andeq	r8, r2, r8, ror #1
   1282c:	andeq	r8, r2, ip, ror #1
   12830:	andeq	r6, r1, r3, lsl #26
   12834:	andeq	r6, r1, r9, lsl sp
   12838:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1283c:	mov	r8, r0
   12840:	ldr	r0, [r1]
   12844:	str	r2, [sp]
   12848:	mov	r7, r1
   1284c:	mov	r9, r3
   12850:	bl	12688 <__assert_fail@plt+0x1b18>
   12854:	ldr	r3, [pc, #396]	; 129e8 <error@@Base+0x2d4>
   12858:	ldr	r1, [pc, #396]	; 129ec <error@@Base+0x2d8>
   1285c:	str	r0, [r3]
   12860:	mov	r0, #2
   12864:	bl	10a98 <__sysv_signal@plt>
   12868:	ldr	r1, [pc, #380]	; 129ec <error@@Base+0x2d8>
   1286c:	mov	r0, #15
   12870:	bl	10a98 <__sysv_signal@plt>
   12874:	ldr	r3, [r8]
   12878:	cmp	r3, #1
   1287c:	movne	r6, #0
   12880:	movne	r5, #1
   12884:	bne	129a8 <error@@Base+0x294>
   12888:	ldr	r3, [pc, #352]	; 129f0 <error@@Base+0x2dc>
   1288c:	ldrb	r6, [r3, #4]
   12890:	cmp	r6, #0
   12894:	beq	129b4 <error@@Base+0x2a0>
   12898:	ldr	r0, [sp]
   1289c:	bl	126c8 <__assert_fail@plt+0x1b58>
   128a0:	ldr	r4, [r7, r5, lsl #2]
   128a4:	lsl	sl, r5, #2
   128a8:	ldrb	r3, [r4]
   128ac:	cmp	r3, #45	; 0x2d
   128b0:	bne	129d8 <error@@Base+0x2c4>
   128b4:	ldrb	r3, [r4, #1]
   128b8:	cmp	r3, #0
   128bc:	str	r3, [sp, #4]
   128c0:	beq	129d8 <error@@Base+0x2c4>
   128c4:	mov	r0, r4
   128c8:	bl	10ad4 <strlen@plt>
   128cc:	mov	r1, r4
   128d0:	mov	r2, r0
   128d4:	ldr	r0, [pc, #280]	; 129f4 <error@@Base+0x2e0>
   128d8:	bl	10b4c <strncmp@plt>
   128dc:	cmp	r0, #0
   128e0:	beq	12898 <error@@Base+0x184>
   128e4:	add	r0, r5, #1
   128e8:	cmp	r0, fp
   128ec:	addlt	sl, r7, sl
   128f0:	movge	r1, #0
   128f4:	ldrlt	r1, [sl, #4]
   128f8:	cmp	r9, #0
   128fc:	ldr	r3, [sp, #4]
   12900:	beq	129c0 <error@@Base+0x2ac>
   12904:	mov	r2, #0
   12908:	add	lr, r2, r2, lsl #1
   1290c:	add	ip, r9, lr, lsl #2
   12910:	ldrb	lr, [r9, lr, lsl #2]
   12914:	cmp	lr, #0
   12918:	beq	129c0 <error@@Base+0x2ac>
   1291c:	cmp	r3, lr
   12920:	bne	12960 <error@@Base+0x24c>
   12924:	ldr	r3, [ip, #4]
   12928:	cmp	r3, #0
   1292c:	bne	1296c <error@@Base+0x258>
   12930:	ldr	r3, [ip, #8]
   12934:	cmp	r3, #0
   12938:	beq	129c0 <error@@Base+0x2ac>
   1293c:	ldrb	r2, [r4, #2]
   12940:	cmp	r2, #0
   12944:	bne	129c0 <error@@Base+0x2ac>
   12948:	ldrb	r2, [r3]
   1294c:	cmp	r2, #0
   12950:	bne	129cc <error@@Base+0x2b8>
   12954:	mov	r2, #1
   12958:	strb	r2, [r3]
   1295c:	b	129a0 <error@@Base+0x28c>
   12960:	add	r2, r2, #1
   12964:	sxth	r2, r2
   12968:	b	12908 <error@@Base+0x1f4>
   1296c:	ldrb	r2, [r4, #2]
   12970:	cmp	r2, #0
   12974:	cmpeq	r1, #0
   12978:	beq	12930 <error@@Base+0x21c>
   1297c:	ldr	ip, [r3]
   12980:	cmp	ip, #0
   12984:	bne	129cc <error@@Base+0x2b8>
   12988:	cmp	r2, #0
   1298c:	addne	r1, r4, #2
   12990:	str	r1, [r3]
   12994:	ldrb	r3, [r4, #2]
   12998:	cmp	r3, #0
   1299c:	sxtheq	r5, r0
   129a0:	add	r5, r5, #1
   129a4:	sxth	r5, r5
   129a8:	ldr	fp, [r8]
   129ac:	cmp	r5, fp
   129b0:	blt	128a0 <error@@Base+0x18c>
   129b4:	str	r6, [r8]
   129b8:	add	sp, sp, #12
   129bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c0:	ldr	r0, [pc, #48]	; 129f8 <error@@Base+0x2e4>
   129c4:	mov	r1, r4
   129c8:	bl	1279c <error@@Base+0x88>
   129cc:	mov	r1, r4
   129d0:	ldr	r0, [pc, #36]	; 129fc <error@@Base+0x2e8>
   129d4:	b	129c8 <error@@Base+0x2b4>
   129d8:	add	r3, r6, #1
   129dc:	str	r4, [r7, r6, lsl #2]
   129e0:	sxth	r6, r3
   129e4:	b	129a0 <error@@Base+0x28c>
   129e8:	andeq	r0, r3, r0, asr #7
   129ec:	andeq	r2, r1, ip, ror #14
   129f0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   129f4:	andeq	r6, r1, sp, lsr #26
   129f8:	andeq	r6, r1, r3, lsr sp
   129fc:	andeq	r6, r1, r2, asr #26
   12a00:	push	{r0, r1, r2, lr}
   12a04:	mov	r3, r0
   12a08:	ldr	r2, [pc, #28]	; 12a2c <error@@Base+0x318>
   12a0c:	ldr	r0, [pc, #28]	; 12a30 <error@@Base+0x31c>
   12a10:	str	r1, [sp]
   12a14:	ldr	r1, [pc, #24]	; 12a34 <error@@Base+0x320>
   12a18:	ldr	r2, [r2]
   12a1c:	ldr	r0, [r0]
   12a20:	bl	10ae0 <fprintf@plt>
   12a24:	add	sp, sp, #12
   12a28:	pop	{pc}		; (ldr pc, [sp], #4)
   12a2c:	andeq	r0, r3, r0, asr #7
   12a30:	andeq	r8, r2, r0, ror #1
   12a34:	strdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   12a38:	push	{r4, r5, r6, lr}
   12a3c:	mov	r4, r0
   12a40:	uxtb	r6, r1
   12a44:	mov	r0, #1
   12a48:	mov	r1, #16
   12a4c:	mov	r5, r2
   12a50:	bl	12750 <error@@Base+0x3c>
   12a54:	strb	r6, [r0, #8]
   12a58:	str	r5, [r0, #12]
   12a5c:	mov	r1, r0
   12a60:	mov	r0, r4
   12a64:	pop	{r4, r5, r6, lr}
   12a68:	b	11450 <__assert_fail@plt+0x8e0>
   12a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a70:	sub	sp, sp, #116	; 0x74
   12a74:	ldrb	r3, [r2]
   12a78:	adds	r3, r3, #0
   12a7c:	movne	r3, #1
   12a80:	cmp	r1, #0
   12a84:	movne	r3, #0
   12a88:	cmp	r3, #0
   12a8c:	beq	12a9c <error@@Base+0x388>
   12a90:	ldr	r1, [pc, #752]	; 12d88 <error@@Base+0x674>
   12a94:	ldr	r0, [pc, #752]	; 12d8c <error@@Base+0x678>
   12a98:	bl	1279c <error@@Base+0x88>
   12a9c:	mov	r6, r0
   12aa0:	mov	r0, r1
   12aa4:	ldr	r1, [pc, #740]	; 12d90 <error@@Base+0x67c>
   12aa8:	mov	r4, r2
   12aac:	ldr	r7, [r6, #4]
   12ab0:	bl	127dc <error@@Base+0xc8>
   12ab4:	ldrb	r3, [r4]
   12ab8:	cmp	r3, #0
   12abc:	mov	r5, r0
   12ac0:	beq	12b0c <error@@Base+0x3f8>
   12ac4:	mov	r2, r0
   12ac8:	mov	r1, #99	; 0x63
   12acc:	add	r0, sp, #12
   12ad0:	bl	10a14 <fgets@plt>
   12ad4:	cmp	r0, #0
   12ad8:	beq	12afc <error@@Base+0x3e8>
   12adc:	mov	r2, #51	; 0x33
   12ae0:	ldr	r1, [pc, #684]	; 12d94 <error@@Base+0x680>
   12ae4:	add	r0, sp, #12
   12ae8:	bl	10b4c <strncmp@plt>
   12aec:	subs	r8, r0, #0
   12af0:	moveq	r9, #99	; 0x63
   12af4:	ldreq	sl, [pc, #668]	; 12d98 <error@@Base+0x684>
   12af8:	beq	12b88 <error@@Base+0x474>
   12afc:	mov	r0, r5
   12b00:	bl	10a38 <rewind@plt>
   12b04:	mov	r3, #0
   12b08:	strb	r3, [r4, #11]
   12b0c:	ldrb	r3, [r4, #1]
   12b10:	ldr	r8, [r4, #4]
   12b14:	mov	r0, r5
   12b18:	cmp	r8, #0
   12b1c:	mov	fp, #0
   12b20:	str	r3, [sp]
   12b24:	moveq	r8, #94	; 0x5e
   12b28:	bl	10b64 <getc@plt>
   12b2c:	add	r3, sp, #9
   12b30:	str	r3, [sp, #4]
   12b34:	cmn	r0, #1
   12b38:	bne	12ba8 <error@@Base+0x494>
   12b3c:	mov	r0, r5
   12b40:	bl	1260c <__assert_fail@plt+0x1a9c>
   12b44:	ldrb	r3, [r4, #9]
   12b48:	cmp	r3, #0
   12b4c:	bne	12c4c <error@@Base+0x538>
   12b50:	ldrb	r3, [r4, #10]
   12b54:	cmp	r3, #0
   12b58:	bne	12d60 <error@@Base+0x64c>
   12b5c:	add	sp, sp, #116	; 0x74
   12b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b64:	mov	r1, sl
   12b68:	add	r0, sp, #12
   12b6c:	bl	109e4 <strcmp@plt>
   12b70:	cmp	r0, #0
   12b74:	bne	12b88 <error@@Base+0x474>
   12b78:	add	r8, r8, #1
   12b7c:	sxth	r8, r8
   12b80:	cmp	r8, #1
   12b84:	bgt	12ba0 <error@@Base+0x48c>
   12b88:	mov	r2, r5
   12b8c:	mov	r1, r9
   12b90:	add	r0, sp, #12
   12b94:	bl	10a14 <fgets@plt>
   12b98:	cmp	r0, #0
   12b9c:	bne	12b64 <error@@Base+0x450>
   12ba0:	mov	r3, #1
   12ba4:	b	12b08 <error@@Base+0x3f4>
   12ba8:	ldr	r3, [pc, #492]	; 12d9c <error@@Base+0x688>
   12bac:	ldrsb	r9, [r3, r0]
   12bb0:	cmp	r9, #0
   12bb4:	bgt	12bc0 <error@@Base+0x4ac>
   12bb8:	ldr	r0, [pc, #480]	; 12da0 <error@@Base+0x68c>
   12bbc:	bl	12714 <error@@Base>
   12bc0:	cmp	r9, #1
   12bc4:	strb	r0, [sp, #8]
   12bc8:	beq	12bf0 <error@@Base+0x4dc>
   12bcc:	sub	sl, r9, #1
   12bd0:	mov	r3, r5
   12bd4:	mov	r2, sl
   12bd8:	mov	r1, #1
   12bdc:	ldr	r0, [sp, #4]
   12be0:	bl	10a68 <fread@plt>
   12be4:	cmp	sl, r0
   12be8:	ldrne	r0, [pc, #436]	; 12da4 <error@@Base+0x690>
   12bec:	bne	12bbc <error@@Base+0x4a8>
   12bf0:	add	r2, sp, #12
   12bf4:	mov	r1, #4
   12bf8:	add	r0, sp, #8
   12bfc:	bl	10a74 <utf8proc_iterate@plt>
   12c00:	cmp	r9, r0
   12c04:	beq	12c10 <error@@Base+0x4fc>
   12c08:	bl	10b34 <utf8proc_errmsg@plt>
   12c0c:	b	12bbc <error@@Base+0x4a8>
   12c10:	ldr	r3, [sp]
   12c14:	cmp	r3, #0
   12c18:	beq	12c2c <error@@Base+0x518>
   12c1c:	ldr	r3, [sp, #12]
   12c20:	cmp	r8, r3
   12c24:	moveq	fp, #1
   12c28:	beq	12c40 <error@@Base+0x52c>
   12c2c:	mov	r1, fp
   12c30:	ldr	r2, [sp, #12]
   12c34:	mov	r0, r6
   12c38:	bl	12a38 <error@@Base+0x324>
   12c3c:	mov	fp, #0
   12c40:	mov	r0, r5
   12c44:	bl	10b64 <getc@plt>
   12c48:	b	12b34 <error@@Base+0x420>
   12c4c:	cmp	r7, #0
   12c50:	mov	sl, #32
   12c54:	ldrne	r8, [r7, #4]
   12c58:	ldreq	r8, [r6]
   12c5c:	mov	r5, r8
   12c60:	cmp	r5, #0
   12c64:	bne	12cec <error@@Base+0x5d8>
   12c68:	cmp	r8, #0
   12c6c:	beq	12b50 <error@@Base+0x43c>
   12c70:	ldr	r2, [r8, #12]
   12c74:	ldr	r9, [r8, #4]
   12c78:	cmp	r2, #32
   12c7c:	eor	r3, r5, #1
   12c80:	bne	12d40 <error@@Base+0x62c>
   12c84:	cmp	r9, #0
   12c88:	orreq	r3, r3, #1
   12c8c:	cmp	r3, #0
   12c90:	bne	12ca4 <error@@Base+0x590>
   12c94:	ldr	r3, [r9, #12]
   12c98:	cmp	r3, #10
   12c9c:	cmpne	r3, #32
   12ca0:	bne	12d54 <error@@Base+0x640>
   12ca4:	cmp	r9, #0
   12ca8:	moveq	r3, #0
   12cac:	andne	r3, r5, #1
   12cb0:	cmp	r3, #0
   12cb4:	beq	12cd0 <error@@Base+0x5bc>
   12cb8:	ldr	r3, [r9, #12]
   12cbc:	cmp	r3, #32
   12cc0:	ldrbeq	r3, [r9, #8]
   12cc4:	ldrbeq	r2, [r8, #8]
   12cc8:	orreq	r3, r3, r2
   12ccc:	strbeq	r3, [r9, #8]
   12cd0:	mov	r0, r6
   12cd4:	mov	r1, r8
   12cd8:	bl	11478 <__assert_fail@plt+0x908>
   12cdc:	mov	r0, r8
   12ce0:	bl	109fc <free@plt>
   12ce4:	mov	r8, r9
   12ce8:	b	12c68 <error@@Base+0x554>
   12cec:	ldr	r9, [r5, #12]
   12cf0:	mov	r0, r9
   12cf4:	bl	10a08 <utf8proc_get_property@plt>
   12cf8:	cmp	r9, #13
   12cfc:	bhi	12d30 <error@@Base+0x61c>
   12d00:	cmp	r9, #11
   12d04:	bcs	12d38 <error@@Base+0x624>
   12d08:	cmp	r9, #9
   12d0c:	beq	12d38 <error@@Base+0x624>
   12d10:	cmp	r9, #10
   12d14:	beq	12d28 <error@@Base+0x614>
   12d18:	ldrsh	r3, [r0]
   12d1c:	sub	r3, r3, #23
   12d20:	cmp	r3, #2
   12d24:	bls	12d38 <error@@Base+0x624>
   12d28:	ldr	r5, [r5, #4]
   12d2c:	b	12c60 <error@@Base+0x54c>
   12d30:	cmp	r9, #160	; 0xa0
   12d34:	bne	12d18 <error@@Base+0x604>
   12d38:	str	sl, [r5, #12]
   12d3c:	b	12d28 <error@@Base+0x614>
   12d40:	cmp	r2, #10
   12d44:	movne	r3, #0
   12d48:	andeq	r3, r3, #1
   12d4c:	cmp	r3, #0
   12d50:	bne	12ca4 <error@@Base+0x590>
   12d54:	subs	r5, r2, #10
   12d58:	movne	r5, #1
   12d5c:	b	12ce4 <error@@Base+0x5d0>
   12d60:	cmp	r7, #0
   12d64:	ldrne	r4, [r7, #4]
   12d68:	ldreq	r4, [r6]
   12d6c:	cmp	r4, #0
   12d70:	beq	12b5c <error@@Base+0x448>
   12d74:	ldr	r0, [r4, #12]
   12d78:	bl	10a50 <utf8proc_tolower@plt>
   12d7c:	str	r0, [r4, #12]
   12d80:	ldr	r4, [r4, #4]
   12d84:	b	12d6c <error@@Base+0x658>
   12d88:	andeq	r6, r1, r3, asr sp
   12d8c:	andeq	r6, r1, sp, asr sp
   12d90:	andeq	r3, r1, r1, asr r7
   12d94:	andeq	r6, r1, sp, ror #26
   12d98:	andeq	r6, r1, r5, lsr #27
   12d9c:	andeq	r7, r2, r8, lsl #28
   12da0:	ldrdeq	r6, [r1], -sp
   12da4:	strdeq	r6, [r1], -r5
   12da8:	push	{r4, lr}
   12dac:	bl	10a20 <utf8proc_encode_char@plt>
   12db0:	cmp	r0, #0
   12db4:	bgt	12dc0 <error@@Base+0x6ac>
   12db8:	ldr	r0, [pc, #8]	; 12dc8 <error@@Base+0x6b4>
   12dbc:	bl	12714 <error@@Base>
   12dc0:	sxtb	r0, r0
   12dc4:	pop	{r4, pc}
   12dc8:	andeq	r6, r1, sp, lsl #28
   12dcc:	push	{r4, r5, r6, r7, r8, lr}
   12dd0:	uxtb	r4, r0
   12dd4:	cmp	r4, #0
   12dd8:	mov	r7, r1
   12ddc:	mov	r6, r2
   12de0:	uxtb	r8, r3
   12de4:	beq	12df8 <error@@Base+0x6e4>
   12de8:	mov	r1, r2
   12dec:	mov	r0, #94	; 0x5e
   12df0:	bl	12da8 <error@@Base+0x694>
   12df4:	sxth	r4, r0
   12df8:	cmp	r7, #10
   12dfc:	add	r5, r6, r4
   12e00:	bne	12e20 <error@@Base+0x70c>
   12e04:	ldr	r2, [pc, #168]	; 12eb4 <error@@Base+0x7a0>
   12e08:	cmp	r8, #0
   12e0c:	ldr	r1, [pc, #164]	; 12eb8 <error@@Base+0x7a4>
   12e10:	mov	r0, r5
   12e14:	moveq	r1, r2
   12e18:	pop	{r4, r5, r6, r7, r8, lr}
   12e1c:	b	10b1c <sprintf@plt>
   12e20:	mov	r0, r7
   12e24:	bl	10a08 <utf8proc_get_property@plt>
   12e28:	cmp	r7, #32
   12e2c:	beq	12e4c <error@@Base+0x738>
   12e30:	ldrh	r3, [r0]
   12e34:	cmp	r3, #29
   12e38:	bhi	12e94 <error@@Base+0x780>
   12e3c:	ldr	r2, [pc, #120]	; 12ebc <error@@Base+0x7a8>
   12e40:	mov	r1, #1
   12e44:	ands	r3, r2, r1, lsl r3
   12e48:	beq	12e94 <error@@Base+0x780>
   12e4c:	mov	r0, r7
   12e50:	bl	10ac8 <utf8proc_category@plt>
   12e54:	sub	r0, r0, #6
   12e58:	cmp	r0, #2
   12e5c:	bhi	12e74 <error@@Base+0x760>
   12e60:	mov	r1, r5
   12e64:	ldr	r0, [pc, #84]	; 12ec0 <error@@Base+0x7ac>
   12e68:	bl	12da8 <error@@Base+0x694>
   12e6c:	add	r4, r0, r4
   12e70:	sxth	r4, r4
   12e74:	add	r1, r6, r4
   12e78:	mov	r0, r7
   12e7c:	bl	12da8 <error@@Base+0x694>
   12e80:	mov	r3, #0
   12e84:	add	r0, r0, r4
   12e88:	sxth	r0, r0
   12e8c:	strb	r3, [r6, r0]
   12e90:	pop	{r4, r5, r6, r7, r8, pc}
   12e94:	cmp	r7, #255	; 0xff
   12e98:	movhi	r2, r7
   12e9c:	ldrhi	r1, [pc, #32]	; 12ec4 <error@@Base+0x7b0>
   12ea0:	ldrls	r1, [pc, #32]	; 12ec8 <error@@Base+0x7b4>
   12ea4:	movls	r2, r7
   12ea8:	mov	r0, r5
   12eac:	pop	{r4, r5, r6, r7, r8, lr}
   12eb0:	b	10b1c <sprintf@plt>
   12eb4:	andeq	r6, r1, r1, lsl #26
   12eb8:	andeq	r6, r1, r4, lsr #28
   12ebc:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   12ec0:	andeq	r2, r0, ip, asr #11
   12ec4:	andeq	r6, r1, r0, lsr lr
   12ec8:	andeq	r6, r1, r9, lsr #28
   12ecc:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12ed0:	mov	r6, r0
   12ed4:	mov	r0, r1
   12ed8:	ldr	r1, [pc, #132]	; 12f64 <error@@Base+0x850>
   12edc:	mov	r5, r2
   12ee0:	bl	127dc <error@@Base+0xc8>
   12ee4:	cmp	r5, #0
   12ee8:	mov	r4, r0
   12eec:	beq	12f1c <error@@Base+0x808>
   12ef0:	mov	r1, r0
   12ef4:	ldr	r0, [pc, #108]	; 12f68 <error@@Base+0x854>
   12ef8:	bl	10b40 <fputs@plt>
   12efc:	mov	r1, r4
   12f00:	ldr	r0, [pc, #100]	; 12f6c <error@@Base+0x858>
   12f04:	bl	10b40 <fputs@plt>
   12f08:	mov	r0, r4
   12f0c:	blx	r5
   12f10:	mov	r1, r4
   12f14:	ldr	r0, [pc, #80]	; 12f6c <error@@Base+0x858>
   12f18:	bl	10b40 <fputs@plt>
   12f1c:	ldr	r5, [r6]
   12f20:	mov	r6, #0
   12f24:	cmp	r5, #0
   12f28:	bne	12f3c <error@@Base+0x828>
   12f2c:	mov	r0, r4
   12f30:	bl	1260c <__assert_fail@plt+0x1a9c>
   12f34:	add	sp, sp, #16
   12f38:	pop	{r4, r5, r6, pc}
   12f3c:	ldr	r1, [r5, #12]
   12f40:	ldrb	r0, [r5, #8]
   12f44:	mov	r3, r6
   12f48:	add	r2, sp, #4
   12f4c:	bl	12dcc <error@@Base+0x6b8>
   12f50:	mov	r1, r4
   12f54:	add	r0, sp, #4
   12f58:	bl	10b40 <fputs@plt>
   12f5c:	ldr	r5, [r5, #4]
   12f60:	b	12f24 <error@@Base+0x810>
   12f64:	andeq	r3, r1, r8, lsr r7
   12f68:	andeq	r6, r1, sp, ror #26
   12f6c:	andeq	r6, r1, r5, lsr #27
   12f70:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12f74:	mov	r4, r1
   12f78:	mov	r1, #0
   12f7c:	add	r6, sp, #8
   12f80:	mov	r7, r0
   12f84:	mvn	r8, #0
   12f88:	mov	r5, r1
   12f8c:	str	r1, [r6, #-4]!
   12f90:	ldrb	r3, [r4]
   12f94:	cmp	r3, #0
   12f98:	bne	12fa8 <error@@Base+0x894>
   12f9c:	mov	r0, #1
   12fa0:	add	sp, sp, #12
   12fa4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12fa8:	mov	r2, r6
   12fac:	mov	r1, r8
   12fb0:	mov	r0, r4
   12fb4:	bl	10a74 <utf8proc_iterate@plt>
   12fb8:	subs	r9, r0, #0
   12fbc:	ble	12fd8 <error@@Base+0x8c4>
   12fc0:	ldr	r2, [sp, #4]
   12fc4:	mov	r1, r5
   12fc8:	mov	r0, r7
   12fcc:	bl	12a38 <error@@Base+0x324>
   12fd0:	add	r4, r4, r9
   12fd4:	b	12f90 <error@@Base+0x87c>
   12fd8:	mov	r0, #0
   12fdc:	b	12fa0 <error@@Base+0x88c>
   12fe0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fe4:	mov	r7, r0
   12fe8:	ldr	sl, [pc, #248]	; 130e8 <error@@Base+0x9d4>
   12fec:	mov	r9, r1
   12ff0:	mov	r6, sl
   12ff4:	ldr	r3, [sl]
   12ff8:	mov	r4, r9
   12ffc:	mov	r5, r7
   13000:	ldr	fp, [r3, r7, lsl #2]
   13004:	cmp	r5, r4
   13008:	blt	13054 <error@@Base+0x940>
   1300c:	ldr	r3, [r6]
   13010:	sub	r1, r4, #1
   13014:	cmp	r7, r1
   13018:	str	fp, [r3, r4, lsl #2]
   1301c:	bge	13028 <error@@Base+0x914>
   13020:	mov	r0, r7
   13024:	bl	12fe0 <error@@Base+0x8cc>
   13028:	add	r7, r5, #1
   1302c:	cmp	r7, r9
   13030:	blt	12ff4 <error@@Base+0x8e0>
   13034:	add	sp, sp, #12
   13038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1303c:	sub	r4, r4, #1
   13040:	cmp	r5, r4
   13044:	sub	r8, r8, #4
   13048:	bne	13058 <error@@Base+0x944>
   1304c:	mov	r2, r4
   13050:	b	130cc <error@@Base+0x9b8>
   13054:	lsl	r8, r4, #2
   13058:	ldm	r6, {r2, r3}
   1305c:	mov	r0, fp
   13060:	ldr	r1, [r2, r8]
   13064:	blx	r3
   13068:	cmp	r0, #0
   1306c:	blt	1303c <error@@Base+0x928>
   13070:	ldr	r2, [r6]
   13074:	lsl	r1, r5, #2
   13078:	add	r8, r5, #1
   1307c:	ldr	r0, [r2, r4, lsl #2]
   13080:	lsl	r3, r4, #2
   13084:	str	r0, [r2, r5, lsl #2]
   13088:	add	r5, r1, #4
   1308c:	cmp	r8, r4
   13090:	bge	130e0 <error@@Base+0x9cc>
   13094:	ldm	r6, {r1, r2}
   13098:	mov	r0, fp
   1309c:	str	r3, [sp, #4]
   130a0:	ldr	r1, [r1, r5]
   130a4:	blx	r2
   130a8:	add	r5, r5, #4
   130ac:	ldr	r3, [sp, #4]
   130b0:	cmp	r0, #0
   130b4:	bgt	130d8 <error@@Base+0x9c4>
   130b8:	ldr	r1, [r6]
   130bc:	sub	r2, r4, #1
   130c0:	mov	r4, r8
   130c4:	ldr	r0, [r1, r8, lsl #2]
   130c8:	str	r0, [r1, r3]
   130cc:	mov	r5, r4
   130d0:	mov	r4, r2
   130d4:	b	13004 <error@@Base+0x8f0>
   130d8:	add	r8, r8, #1
   130dc:	b	1308c <error@@Base+0x978>
   130e0:	bne	130b8 <error@@Base+0x9a4>
   130e4:	b	1304c <error@@Base+0x938>
   130e8:	strdeq	sl, [r2], -r8
   130ec:	cmp	r0, #1
   130f0:	bxle	lr
   130f4:	ldr	r3, [pc, #12]	; 13108 <error@@Base+0x9f4>
   130f8:	stm	r3, {r1, r2}
   130fc:	sub	r1, r0, #1
   13100:	mov	r0, #0
   13104:	b	12fe0 <error@@Base+0x8cc>
   13108:	strdeq	sl, [r2], -r8
   1310c:	cmp	r1, #0
   13110:	beq	1331c <error@@Base+0xc08>
   13114:	eor	ip, r0, r1
   13118:	rsbmi	r1, r1, #0
   1311c:	subs	r2, r1, #1
   13120:	beq	132e8 <error@@Base+0xbd4>
   13124:	movs	r3, r0
   13128:	rsbmi	r3, r0, #0
   1312c:	cmp	r3, r1
   13130:	bls	132f4 <error@@Base+0xbe0>
   13134:	tst	r1, r2
   13138:	beq	13304 <error@@Base+0xbf0>
   1313c:	clz	r2, r3
   13140:	clz	r0, r1
   13144:	sub	r2, r0, r2
   13148:	rsbs	r2, r2, #31
   1314c:	addne	r2, r2, r2, lsl #1
   13150:	mov	r0, #0
   13154:	addne	pc, pc, r2, lsl #2
   13158:	nop			; (mov r0, r0)
   1315c:	cmp	r3, r1, lsl #31
   13160:	adc	r0, r0, r0
   13164:	subcs	r3, r3, r1, lsl #31
   13168:	cmp	r3, r1, lsl #30
   1316c:	adc	r0, r0, r0
   13170:	subcs	r3, r3, r1, lsl #30
   13174:	cmp	r3, r1, lsl #29
   13178:	adc	r0, r0, r0
   1317c:	subcs	r3, r3, r1, lsl #29
   13180:	cmp	r3, r1, lsl #28
   13184:	adc	r0, r0, r0
   13188:	subcs	r3, r3, r1, lsl #28
   1318c:	cmp	r3, r1, lsl #27
   13190:	adc	r0, r0, r0
   13194:	subcs	r3, r3, r1, lsl #27
   13198:	cmp	r3, r1, lsl #26
   1319c:	adc	r0, r0, r0
   131a0:	subcs	r3, r3, r1, lsl #26
   131a4:	cmp	r3, r1, lsl #25
   131a8:	adc	r0, r0, r0
   131ac:	subcs	r3, r3, r1, lsl #25
   131b0:	cmp	r3, r1, lsl #24
   131b4:	adc	r0, r0, r0
   131b8:	subcs	r3, r3, r1, lsl #24
   131bc:	cmp	r3, r1, lsl #23
   131c0:	adc	r0, r0, r0
   131c4:	subcs	r3, r3, r1, lsl #23
   131c8:	cmp	r3, r1, lsl #22
   131cc:	adc	r0, r0, r0
   131d0:	subcs	r3, r3, r1, lsl #22
   131d4:	cmp	r3, r1, lsl #21
   131d8:	adc	r0, r0, r0
   131dc:	subcs	r3, r3, r1, lsl #21
   131e0:	cmp	r3, r1, lsl #20
   131e4:	adc	r0, r0, r0
   131e8:	subcs	r3, r3, r1, lsl #20
   131ec:	cmp	r3, r1, lsl #19
   131f0:	adc	r0, r0, r0
   131f4:	subcs	r3, r3, r1, lsl #19
   131f8:	cmp	r3, r1, lsl #18
   131fc:	adc	r0, r0, r0
   13200:	subcs	r3, r3, r1, lsl #18
   13204:	cmp	r3, r1, lsl #17
   13208:	adc	r0, r0, r0
   1320c:	subcs	r3, r3, r1, lsl #17
   13210:	cmp	r3, r1, lsl #16
   13214:	adc	r0, r0, r0
   13218:	subcs	r3, r3, r1, lsl #16
   1321c:	cmp	r3, r1, lsl #15
   13220:	adc	r0, r0, r0
   13224:	subcs	r3, r3, r1, lsl #15
   13228:	cmp	r3, r1, lsl #14
   1322c:	adc	r0, r0, r0
   13230:	subcs	r3, r3, r1, lsl #14
   13234:	cmp	r3, r1, lsl #13
   13238:	adc	r0, r0, r0
   1323c:	subcs	r3, r3, r1, lsl #13
   13240:	cmp	r3, r1, lsl #12
   13244:	adc	r0, r0, r0
   13248:	subcs	r3, r3, r1, lsl #12
   1324c:	cmp	r3, r1, lsl #11
   13250:	adc	r0, r0, r0
   13254:	subcs	r3, r3, r1, lsl #11
   13258:	cmp	r3, r1, lsl #10
   1325c:	adc	r0, r0, r0
   13260:	subcs	r3, r3, r1, lsl #10
   13264:	cmp	r3, r1, lsl #9
   13268:	adc	r0, r0, r0
   1326c:	subcs	r3, r3, r1, lsl #9
   13270:	cmp	r3, r1, lsl #8
   13274:	adc	r0, r0, r0
   13278:	subcs	r3, r3, r1, lsl #8
   1327c:	cmp	r3, r1, lsl #7
   13280:	adc	r0, r0, r0
   13284:	subcs	r3, r3, r1, lsl #7
   13288:	cmp	r3, r1, lsl #6
   1328c:	adc	r0, r0, r0
   13290:	subcs	r3, r3, r1, lsl #6
   13294:	cmp	r3, r1, lsl #5
   13298:	adc	r0, r0, r0
   1329c:	subcs	r3, r3, r1, lsl #5
   132a0:	cmp	r3, r1, lsl #4
   132a4:	adc	r0, r0, r0
   132a8:	subcs	r3, r3, r1, lsl #4
   132ac:	cmp	r3, r1, lsl #3
   132b0:	adc	r0, r0, r0
   132b4:	subcs	r3, r3, r1, lsl #3
   132b8:	cmp	r3, r1, lsl #2
   132bc:	adc	r0, r0, r0
   132c0:	subcs	r3, r3, r1, lsl #2
   132c4:	cmp	r3, r1, lsl #1
   132c8:	adc	r0, r0, r0
   132cc:	subcs	r3, r3, r1, lsl #1
   132d0:	cmp	r3, r1
   132d4:	adc	r0, r0, r0
   132d8:	subcs	r3, r3, r1
   132dc:	cmp	ip, #0
   132e0:	rsbmi	r0, r0, #0
   132e4:	bx	lr
   132e8:	teq	ip, r0
   132ec:	rsbmi	r0, r0, #0
   132f0:	bx	lr
   132f4:	movcc	r0, #0
   132f8:	asreq	r0, ip, #31
   132fc:	orreq	r0, r0, #1
   13300:	bx	lr
   13304:	clz	r2, r1
   13308:	rsb	r2, r2, #31
   1330c:	cmp	ip, #0
   13310:	lsr	r0, r3, r2
   13314:	rsbmi	r0, r0, #0
   13318:	bx	lr
   1331c:	cmp	r0, #0
   13320:	mvngt	r0, #-2147483648	; 0x80000000
   13324:	movlt	r0, #-2147483648	; 0x80000000
   13328:	b	1334c <error@@Base+0xc38>
   1332c:	cmp	r1, #0
   13330:	beq	1331c <error@@Base+0xc08>
   13334:	push	{r0, r1, lr}
   13338:	bl	13114 <error@@Base+0xa00>
   1333c:	pop	{r1, r2, lr}
   13340:	mul	r3, r2, r0
   13344:	sub	r1, r1, r3
   13348:	bx	lr
   1334c:	push	{r1, lr}
   13350:	mov	r0, #8
   13354:	bl	109d8 <raise@plt>
   13358:	pop	{r1, pc}
   1335c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13360:	mov	r7, r0
   13364:	ldr	r6, [pc, #72]	; 133b4 <error@@Base+0xca0>
   13368:	ldr	r5, [pc, #72]	; 133b8 <error@@Base+0xca4>
   1336c:	add	r6, pc, r6
   13370:	add	r5, pc, r5
   13374:	sub	r6, r6, r5
   13378:	mov	r8, r1
   1337c:	mov	r9, r2
   13380:	bl	109ac <calloc@plt-0x20>
   13384:	asrs	r6, r6, #2
   13388:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1338c:	mov	r4, #0
   13390:	add	r4, r4, #1
   13394:	ldr	r3, [r5], #4
   13398:	mov	r2, r9
   1339c:	mov	r1, r8
   133a0:	mov	r0, r7
   133a4:	blx	r3
   133a8:	cmp	r6, r4
   133ac:	bne	13390 <error@@Base+0xc7c>
   133b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133b4:	andeq	r4, r1, ip, lsl #21
   133b8:	andeq	r4, r1, r4, lsl #21
   133bc:	bx	lr
   133c0:	mov	r2, r1
   133c4:	mov	r1, r0
   133c8:	mov	r0, #3
   133cc:	b	10a5c <__xstat@plt>

Disassembly of section .fini:

000133d0 <.fini>:
   133d0:	push	{r3, lr}
   133d4:	pop	{r3, pc}
