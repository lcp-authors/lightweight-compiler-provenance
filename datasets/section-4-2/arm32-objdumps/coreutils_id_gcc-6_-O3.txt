
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010e80 <.init>:
   10e80:	push	{r3, lr}
   10e84:	bl	11798 <__assert_fail@plt+0x61c>
   10e88:	pop	{r3, pc}

Disassembly of section .plt:

00010e8c <calloc@plt-0x14>:
   10e8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e90:	ldr	lr, [pc, #4]	; 10e9c <calloc@plt-0x4>
   10e94:	add	lr, pc, lr
   10e98:	ldr	pc, [lr, #8]!
   10e9c:	andeq	r9, r1, r4, ror #2

00010ea0 <calloc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #356]!	; 0x164

00010eac <endgrent@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #348]!	; 0x15c

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #340]!	; 0x154

00010ec4 <raise@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #332]!	; 0x14c

00010ed0 <getpwnam@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #324]!	; 0x144

00010edc <is_selinux_enabled@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #316]!	; 0x13c

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #308]!	; 0x134

00010ef4 <getpwuid@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #300]!	; 0x12c

00010f00 <fflush@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #292]!	; 0x124

00010f0c <getuid@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #284]!	; 0x11c

00010f18 <free@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #276]!	; 0x114

00010f24 <_exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #268]!	; 0x10c

00010f30 <memcpy@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #260]!	; 0x104

00010f3c <mbsinit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #102400	; 0x19000
   10f44:	ldr	pc, [ip, #252]!	; 0xfc

00010f48 <memcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #102400	; 0x19000
   10f50:	ldr	pc, [ip, #244]!	; 0xf4

00010f54 <fputc_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #102400	; 0x19000
   10f5c:	ldr	pc, [ip, #236]!	; 0xec

00010f60 <dcgettext@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #102400	; 0x19000
   10f68:	ldr	pc, [ip, #228]!	; 0xe4

00010f6c <realloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #102400	; 0x19000
   10f74:	ldr	pc, [ip, #220]!	; 0xdc

00010f78 <textdomain@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #102400	; 0x19000
   10f80:	ldr	pc, [ip, #212]!	; 0xd4

00010f84 <geteuid@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #102400	; 0x19000
   10f8c:	ldr	pc, [ip, #204]!	; 0xcc

00010f90 <iswprint@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #102400	; 0x19000
   10f98:	ldr	pc, [ip, #196]!	; 0xc4

00010f9c <getegid@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #102400	; 0x19000
   10fa4:	ldr	pc, [ip, #188]!	; 0xbc

00010fa8 <fwrite@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #102400	; 0x19000
   10fb0:	ldr	pc, [ip, #180]!	; 0xb4

00010fb4 <lseek64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #102400	; 0x19000
   10fbc:	ldr	pc, [ip, #172]!	; 0xac

00010fc0 <__ctype_get_mb_cur_max@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #102400	; 0x19000
   10fc8:	ldr	pc, [ip, #164]!	; 0xa4

00010fcc <getcon@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #102400	; 0x19000
   10fd4:	ldr	pc, [ip, #156]!	; 0x9c

00010fd8 <__fpending@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #102400	; 0x19000
   10fe0:	ldr	pc, [ip, #148]!	; 0x94

00010fe4 <mbrtowc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #102400	; 0x19000
   10fec:	ldr	pc, [ip, #140]!	; 0x8c

00010ff0 <error@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #102400	; 0x19000
   10ff8:	ldr	pc, [ip, #132]!	; 0x84

00010ffc <getenv@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #102400	; 0x19000
   11004:	ldr	pc, [ip, #124]!	; 0x7c

00011008 <malloc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #102400	; 0x19000
   11010:	ldr	pc, [ip, #116]!	; 0x74

00011014 <__libc_start_main@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #102400	; 0x19000
   1101c:	ldr	pc, [ip, #108]!	; 0x6c

00011020 <__freading@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #102400	; 0x19000
   11028:	ldr	pc, [ip, #100]!	; 0x64

0001102c <__gmon_start__@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #102400	; 0x19000
   11034:	ldr	pc, [ip, #92]!	; 0x5c

00011038 <getopt_long@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #102400	; 0x19000
   11040:	ldr	pc, [ip, #84]!	; 0x54

00011044 <__ctype_b_loc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #102400	; 0x19000
   1104c:	ldr	pc, [ip, #76]!	; 0x4c

00011050 <exit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #102400	; 0x19000
   11058:	ldr	pc, [ip, #68]!	; 0x44

0001105c <strtoul@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #102400	; 0x19000
   11064:	ldr	pc, [ip, #60]!	; 0x3c

00011068 <strlen@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #102400	; 0x19000
   11070:	ldr	pc, [ip, #52]!	; 0x34

00011074 <strchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #102400	; 0x19000
   1107c:	ldr	pc, [ip, #44]!	; 0x2c

00011080 <__errno_location@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #102400	; 0x19000
   11088:	ldr	pc, [ip, #36]!	; 0x24

0001108c <__cxa_atexit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #102400	; 0x19000
   11094:	ldr	pc, [ip, #28]!

00011098 <getgid@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #102400	; 0x19000
   110a0:	ldr	pc, [ip, #20]!

000110a4 <getgrouplist@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #102400	; 0x19000
   110ac:	ldr	pc, [ip, #12]!

000110b0 <memset@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #4]!

000110bc <__printf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #4092]!	; 0xffc

000110c8 <fileno@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #24, 20	; 0x18000
   110d0:	ldr	pc, [ip, #4084]!	; 0xff4

000110d4 <__fprintf_chk@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #24, 20	; 0x18000
   110dc:	ldr	pc, [ip, #4076]!	; 0xfec

000110e0 <fclose@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #24, 20	; 0x18000
   110e8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ec <fseeko64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #24, 20	; 0x18000
   110f4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f8 <__overflow@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #24, 20	; 0x18000
   11100:	ldr	pc, [ip, #4052]!	; 0xfd4

00011104 <setlocale@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #24, 20	; 0x18000
   1110c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011110 <endpwent@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #24, 20	; 0x18000
   11118:	ldr	pc, [ip, #4036]!	; 0xfc4

0001111c <strrchr@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #24, 20	; 0x18000
   11124:	ldr	pc, [ip, #4028]!	; 0xfbc

00011128 <nl_langinfo@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #24, 20	; 0x18000
   11130:	ldr	pc, [ip, #4020]!	; 0xfb4

00011134 <getgroups@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #24, 20	; 0x18000
   1113c:	ldr	pc, [ip, #4012]!	; 0xfac

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #24, 20	; 0x18000
   11148:	ldr	pc, [ip, #4004]!	; 0xfa4

0001114c <strncmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #24, 20	; 0x18000
   11154:	ldr	pc, [ip, #3996]!	; 0xf9c

00011158 <abort@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #24, 20	; 0x18000
   11160:	ldr	pc, [ip, #3988]!	; 0xf94

00011164 <getgrgid@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #24, 20	; 0x18000
   1116c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011170 <getgrnam@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #24, 20	; 0x18000
   11178:	ldr	pc, [ip, #3972]!	; 0xf84

0001117c <__assert_fail@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #24, 20	; 0x18000
   11184:	ldr	pc, [ip, #3964]!	; 0xf7c

Disassembly of section .text:

00011188 <.text>:
   11188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1118c:	sub	sp, sp, #20
   11190:	mov	r4, r1
   11194:	mov	r5, r0
   11198:	bl	10edc <is_selinux_enabled@plt>
   1119c:	ldr	r8, [pc, #1348]	; 116e8 <__assert_fail@plt+0x56c>
   111a0:	ldr	r7, [pc, #1348]	; 116ec <__assert_fail@plt+0x570>
   111a4:	ldr	fp, [pc, #1348]	; 116f0 <__assert_fail@plt+0x574>
   111a8:	mov	r6, #0
   111ac:	mov	r9, #1
   111b0:	mov	sl, r0
   111b4:	ldr	r0, [r4]
   111b8:	bl	1267c <__assert_fail@plt+0x1500>
   111bc:	ldr	r1, [pc, #1328]	; 116f4 <__assert_fail@plt+0x578>
   111c0:	mov	r0, #6
   111c4:	bl	11104 <setlocale@plt>
   111c8:	ldr	r1, [pc, #1320]	; 116f8 <__assert_fail@plt+0x57c>
   111cc:	ldr	r0, [pc, #1320]	; 116fc <__assert_fail@plt+0x580>
   111d0:	bl	11140 <bindtextdomain@plt>
   111d4:	ldr	r0, [pc, #1312]	; 116fc <__assert_fail@plt+0x580>
   111d8:	bl	10f78 <textdomain@plt>
   111dc:	ldr	r0, [pc, #1308]	; 11700 <__assert_fail@plt+0x584>
   111e0:	bl	19124 <__assert_fail@plt+0x7fa8>
   111e4:	str	r6, [sp]
   111e8:	mov	r3, r8
   111ec:	mov	r2, r7
   111f0:	mov	r1, r4
   111f4:	mov	r0, r5
   111f8:	bl	11038 <getopt_long@plt>
   111fc:	cmn	r0, #1
   11200:	beq	112e8 <__assert_fail@plt+0x16c>
   11204:	cmp	r0, #97	; 0x61
   11208:	beq	111e4 <__assert_fail@plt+0x68>
   1120c:	ble	11234 <__assert_fail@plt+0xb8>
   11210:	cmp	r0, #114	; 0x72
   11214:	beq	112e0 <__assert_fail@plt+0x164>
   11218:	bgt	11260 <__assert_fail@plt+0xe4>
   1121c:	cmp	r0, #103	; 0x67
   11220:	beq	11288 <__assert_fail@plt+0x10c>
   11224:	cmp	r0, #110	; 0x6e
   11228:	bne	112d0 <__assert_fail@plt+0x154>
   1122c:	strb	r9, [fp, #12]
   11230:	b	111e4 <__assert_fail@plt+0x68>
   11234:	cmn	r0, #2
   11238:	beq	112d8 <__assert_fail@plt+0x15c>
   1123c:	ble	11290 <__assert_fail@plt+0x114>
   11240:	cmp	r0, #71	; 0x47
   11244:	beq	11278 <__assert_fail@plt+0xfc>
   11248:	cmp	r0, #90	; 0x5a
   1124c:	bne	112d0 <__assert_fail@plt+0x154>
   11250:	cmp	sl, #0
   11254:	ble	116bc <__assert_fail@plt+0x540>
   11258:	strb	r9, [fp, #50]	; 0x32
   1125c:	b	111e4 <__assert_fail@plt+0x68>
   11260:	cmp	r0, #117	; 0x75
   11264:	beq	11280 <__assert_fail@plt+0x104>
   11268:	cmp	r0, #122	; 0x7a
   1126c:	bne	112d0 <__assert_fail@plt+0x154>
   11270:	strb	r9, [fp, #49]	; 0x31
   11274:	b	111e4 <__assert_fail@plt+0x68>
   11278:	strb	r9, [fp, #48]	; 0x30
   1127c:	b	111e4 <__assert_fail@plt+0x68>
   11280:	strb	r9, [fp]
   11284:	b	111e4 <__assert_fail@plt+0x68>
   11288:	strb	r9, [fp, #37]	; 0x25
   1128c:	b	111e4 <__assert_fail@plt+0x68>
   11290:	cmn	r0, #3
   11294:	bne	112d0 <__assert_fail@plt+0x154>
   11298:	ldr	r3, [pc, #1124]	; 11704 <__assert_fail@plt+0x588>
   1129c:	ldr	r0, [pc, #1124]	; 11708 <__assert_fail@plt+0x58c>
   112a0:	ldr	r1, [pc, #1124]	; 1170c <__assert_fail@plt+0x590>
   112a4:	ldr	r2, [pc, #1124]	; 11710 <__assert_fail@plt+0x594>
   112a8:	str	r6, [sp, #8]
   112ac:	ldr	r0, [r0]
   112b0:	ldr	r3, [r3]
   112b4:	str	r1, [sp, #4]
   112b8:	str	r2, [sp]
   112bc:	ldr	r1, [pc, #1104]	; 11714 <__assert_fail@plt+0x598>
   112c0:	ldr	r2, [pc, #1104]	; 11718 <__assert_fail@plt+0x59c>
   112c4:	bl	17578 <__assert_fail@plt+0x63fc>
   112c8:	mov	r0, #0
   112cc:	bl	11050 <exit@plt>
   112d0:	mov	r0, #1
   112d4:	bl	11de8 <__assert_fail@plt+0xc6c>
   112d8:	mov	r0, #0
   112dc:	bl	11de8 <__assert_fail@plt+0xc6c>
   112e0:	strb	r9, [fp, #1]
   112e4:	b	111e4 <__assert_fail@plt+0x68>
   112e8:	ldr	r6, [pc, #1068]	; 1171c <__assert_fail@plt+0x5a0>
   112ec:	ldr	r9, [r6]
   112f0:	subs	r0, r5, r9
   112f4:	ldr	r5, [pc, #1012]	; 116f0 <__assert_fail@plt+0x574>
   112f8:	beq	11328 <__assert_fail@plt+0x1ac>
   112fc:	ldrb	r3, [r5, #50]	; 0x32
   11300:	cmp	r3, #0
   11304:	beq	11328 <__assert_fail@plt+0x1ac>
   11308:	ldr	r1, [pc, #1040]	; 11720 <__assert_fail@plt+0x5a4>
   1130c:	mov	r2, #5
   11310:	mov	r0, #0
   11314:	bl	10f60 <dcgettext@plt>
   11318:	mov	r1, #0
   1131c:	mov	r2, r0
   11320:	mov	r0, #1
   11324:	bl	10ff0 <error@plt>
   11328:	ldrb	r1, [r5]
   1132c:	ldrb	lr, [r5, #37]	; 0x25
   11330:	ldrb	r2, [r5, #48]	; 0x30
   11334:	ldrb	ip, [r5, #50]	; 0x32
   11338:	add	r3, r1, lr
   1133c:	add	r3, r3, r2
   11340:	add	r3, r3, ip
   11344:	cmp	r3, #1
   11348:	movgt	r2, #5
   1134c:	ldrgt	r1, [pc, #976]	; 11724 <__assert_fail@plt+0x5a8>
   11350:	bgt	11310 <__assert_fail@plt+0x194>
   11354:	orr	r1, r1, lr
   11358:	orr	r2, r2, r1
   1135c:	orrs	r3, ip, r2
   11360:	bne	11424 <__assert_fail@plt+0x2a8>
   11364:	ldrb	r3, [r5, #1]
   11368:	cmp	r3, #0
   1136c:	bne	116b0 <__assert_fail@plt+0x534>
   11370:	ldrb	r7, [r5, #12]
   11374:	cmp	r7, #0
   11378:	bne	116b0 <__assert_fail@plt+0x534>
   1137c:	ldrb	r3, [r5, #49]	; 0x31
   11380:	cmp	r3, #0
   11384:	bne	116a4 <__assert_fail@plt+0x528>
   11388:	mov	r3, #1
   1138c:	cmp	r0, #0
   11390:	bne	1142c <__assert_fail@plt+0x2b0>
   11394:	cmp	ip, #0
   11398:	beq	11514 <__assert_fail@plt+0x398>
   1139c:	cmp	sl, #0
   113a0:	ble	113c8 <__assert_fail@plt+0x24c>
   113a4:	ldr	r0, [pc, #892]	; 11728 <__assert_fail@plt+0x5ac>
   113a8:	bl	10fcc <getcon@plt>
   113ac:	cmp	r0, #0
   113b0:	beq	113c8 <__assert_fail@plt+0x24c>
   113b4:	ldrb	r3, [r5, #50]	; 0x32
   113b8:	cmp	r3, #0
   113bc:	movne	r2, #5
   113c0:	ldrne	r1, [pc, #868]	; 1172c <__assert_fail@plt+0x5b0>
   113c4:	bne	11310 <__assert_fail@plt+0x194>
   113c8:	ldrb	r4, [r5]
   113cc:	cmp	r4, #0
   113d0:	beq	11530 <__assert_fail@plt+0x3b4>
   113d4:	ldrb	r6, [r5, #1]
   113d8:	cmp	r6, #0
   113dc:	bne	11594 <__assert_fail@plt+0x418>
   113e0:	bl	11080 <__errno_location@plt>
   113e4:	str	r6, [r0]
   113e8:	mov	r7, r0
   113ec:	bl	10f84 <geteuid@plt>
   113f0:	cmn	r0, #1
   113f4:	str	r0, [r5, #8]
   113f8:	beq	1167c <__assert_fail@plt+0x500>
   113fc:	ldrb	r3, [r5, #1]
   11400:	cmp	r3, #0
   11404:	bne	11594 <__assert_fail@plt+0x418>
   11408:	mov	r0, #0
   1140c:	bl	11884 <__assert_fail@plt+0x708>
   11410:	ldr	sl, [pc, #792]	; 11730 <__assert_fail@plt+0x5b4>
   11414:	ldrb	r0, [sl]
   11418:	eor	r0, r0, #1
   1141c:	add	sp, sp, #20
   11420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11424:	mov	r3, #0
   11428:	b	1138c <__assert_fail@plt+0x210>
   1142c:	cmp	r0, #1
   11430:	movls	r3, #0
   11434:	movhi	r3, #1
   11438:	add	r9, r9, r0
   1143c:	strb	r3, [r5, #77]	; 0x4d
   11440:	ldr	sl, [pc, #744]	; 11730 <__assert_fail@plt+0x5b4>
   11444:	mov	r7, #0
   11448:	b	11498 <__assert_fail@plt+0x31c>
   1144c:	bl	11080 <__errno_location@plt>
   11450:	mov	r2, #5
   11454:	ldr	r1, [pc, #728]	; 11734 <__assert_fail@plt+0x5b8>
   11458:	ldr	r8, [r0]
   1145c:	mov	r0, r7
   11460:	bl	10f60 <dcgettext@plt>
   11464:	ldr	r3, [r6]
   11468:	mov	fp, r0
   1146c:	ldr	r0, [r4, r3, lsl #2]
   11470:	bl	16548 <__assert_fail@plt+0x53cc>
   11474:	mov	r2, fp
   11478:	mov	r1, r8
   1147c:	mov	r3, r0
   11480:	mov	r0, r7
   11484:	bl	10ff0 <error@plt>
   11488:	strb	r7, [sl]
   1148c:	ldr	r3, [r6]
   11490:	add	r3, r3, #1
   11494:	str	r3, [r6]
   11498:	ldr	r3, [r6]
   1149c:	cmp	r9, r3
   114a0:	bls	11414 <__assert_fail@plt+0x298>
   114a4:	ldr	r0, [r4, r3, lsl #2]
   114a8:	ldrb	r3, [r0]
   114ac:	cmp	r3, #0
   114b0:	beq	1144c <__assert_fail@plt+0x2d0>
   114b4:	mov	r3, #0
   114b8:	str	r7, [sp]
   114bc:	mov	r2, r3
   114c0:	ldr	r1, [pc, #624]	; 11738 <__assert_fail@plt+0x5bc>
   114c4:	bl	166c8 <__assert_fail@plt+0x554c>
   114c8:	cmp	r0, #0
   114cc:	bne	1144c <__assert_fail@plt+0x2d0>
   114d0:	ldr	r0, [r5, #8]
   114d4:	bl	10ef4 <getpwuid@plt>
   114d8:	subs	r8, r0, #0
   114dc:	beq	1144c <__assert_fail@plt+0x2d0>
   114e0:	ldr	r0, [r8]
   114e4:	bl	17d70 <__assert_fail@plt+0x6bf4>
   114e8:	ldr	r1, [r8, #8]
   114ec:	ldr	r3, [r8, #12]
   114f0:	str	r1, [r5, #8]
   114f4:	str	r1, [r5, #4]
   114f8:	str	r3, [r5, #44]	; 0x2c
   114fc:	str	r3, [r5, #40]	; 0x28
   11500:	mov	fp, r0
   11504:	bl	11884 <__assert_fail@plt+0x708>
   11508:	mov	r0, fp
   1150c:	bl	125bc <__assert_fail@plt+0x1440>
   11510:	b	1148c <__assert_fail@plt+0x310>
   11514:	cmp	r3, #0
   11518:	beq	113c8 <__assert_fail@plt+0x24c>
   1151c:	ldr	r0, [pc, #536]	; 1173c <__assert_fail@plt+0x5c0>
   11520:	bl	10ffc <getenv@plt>
   11524:	cmp	r0, #0
   11528:	bne	113c8 <__assert_fail@plt+0x24c>
   1152c:	b	1139c <__assert_fail@plt+0x220>
   11530:	ldrb	r3, [r5, #37]	; 0x25
   11534:	cmp	r3, #0
   11538:	bne	11570 <__assert_fail@plt+0x3f4>
   1153c:	ldrb	r3, [r5, #48]	; 0x30
   11540:	cmp	r3, #0
   11544:	bne	11570 <__assert_fail@plt+0x3f4>
   11548:	ldrb	r3, [r5, #50]	; 0x32
   1154c:	cmp	r3, #0
   11550:	bne	11570 <__assert_fail@plt+0x3f4>
   11554:	bl	11080 <__errno_location@plt>
   11558:	str	r4, [r0]
   1155c:	mov	r7, r0
   11560:	bl	10f84 <geteuid@plt>
   11564:	cmn	r0, #1
   11568:	str	r0, [r5, #8]
   1156c:	beq	1167c <__assert_fail@plt+0x500>
   11570:	ldrb	r3, [r5, #37]	; 0x25
   11574:	cmp	r3, #0
   11578:	bne	115bc <__assert_fail@plt+0x440>
   1157c:	ldrb	r3, [r5, #48]	; 0x30
   11580:	cmp	r3, #0
   11584:	bne	11594 <__assert_fail@plt+0x418>
   11588:	ldrb	r3, [r5, #50]	; 0x32
   1158c:	cmp	r3, #0
   11590:	bne	115bc <__assert_fail@plt+0x440>
   11594:	bl	11080 <__errno_location@plt>
   11598:	mov	r6, #0
   1159c:	str	r6, [r0]
   115a0:	mov	r7, r0
   115a4:	bl	10f0c <getuid@plt>
   115a8:	cmn	r0, #1
   115ac:	str	r0, [r5, #4]
   115b0:	beq	11650 <__assert_fail@plt+0x4d4>
   115b4:	cmp	r4, #0
   115b8:	bne	11408 <__assert_fail@plt+0x28c>
   115bc:	ldrb	r3, [r5, #37]	; 0x25
   115c0:	cmp	r3, #0
   115c4:	bne	115e0 <__assert_fail@plt+0x464>
   115c8:	ldrb	r3, [r5, #48]	; 0x30
   115cc:	cmp	r3, #0
   115d0:	bne	115e0 <__assert_fail@plt+0x464>
   115d4:	ldrb	r3, [r5, #50]	; 0x32
   115d8:	cmp	r3, #0
   115dc:	bne	11408 <__assert_fail@plt+0x28c>
   115e0:	bl	11080 <__errno_location@plt>
   115e4:	mov	r6, #0
   115e8:	str	r6, [r0]
   115ec:	mov	r4, r0
   115f0:	bl	10f9c <getegid@plt>
   115f4:	cmn	r0, #1
   115f8:	str	r0, [r5, #44]	; 0x2c
   115fc:	bne	1160c <__assert_fail@plt+0x490>
   11600:	ldr	r7, [r4]
   11604:	cmp	r7, r6
   11608:	bne	11694 <__assert_fail@plt+0x518>
   1160c:	mov	r6, #0
   11610:	str	r6, [r4]
   11614:	bl	11098 <getgid@plt>
   11618:	cmn	r0, #1
   1161c:	str	r0, [r5, #40]	; 0x28
   11620:	bne	11408 <__assert_fail@plt+0x28c>
   11624:	ldr	r4, [r4]
   11628:	cmp	r4, r6
   1162c:	beq	11408 <__assert_fail@plt+0x28c>
   11630:	mov	r2, #5
   11634:	ldr	r1, [pc, #260]	; 11740 <__assert_fail@plt+0x5c4>
   11638:	mov	r0, r6
   1163c:	bl	10f60 <dcgettext@plt>
   11640:	mov	r1, r4
   11644:	mov	r2, r0
   11648:	mov	r0, #1
   1164c:	bl	10ff0 <error@plt>
   11650:	ldr	r7, [r7]
   11654:	cmp	r7, #0
   11658:	movne	r0, r6
   1165c:	movne	r2, #5
   11660:	ldrne	r1, [pc, #220]	; 11744 <__assert_fail@plt+0x5c8>
   11664:	beq	115b4 <__assert_fail@plt+0x438>
   11668:	bl	10f60 <dcgettext@plt>
   1166c:	mov	r1, r7
   11670:	mov	r2, r0
   11674:	mov	r0, #1
   11678:	bl	10ff0 <error@plt>
   1167c:	ldr	r6, [r7]
   11680:	cmp	r6, #0
   11684:	bne	116c8 <__assert_fail@plt+0x54c>
   11688:	cmp	r4, #0
   1168c:	bne	113fc <__assert_fail@plt+0x280>
   11690:	b	11570 <__assert_fail@plt+0x3f4>
   11694:	mov	r0, r6
   11698:	mov	r2, #5
   1169c:	ldr	r1, [pc, #164]	; 11748 <__assert_fail@plt+0x5cc>
   116a0:	b	11668 <__assert_fail@plt+0x4ec>
   116a4:	mov	r2, #5
   116a8:	ldr	r1, [pc, #156]	; 1174c <__assert_fail@plt+0x5d0>
   116ac:	b	11310 <__assert_fail@plt+0x194>
   116b0:	mov	r2, #5
   116b4:	ldr	r1, [pc, #148]	; 11750 <__assert_fail@plt+0x5d4>
   116b8:	b	11310 <__assert_fail@plt+0x194>
   116bc:	mov	r2, #5
   116c0:	ldr	r1, [pc, #140]	; 11754 <__assert_fail@plt+0x5d8>
   116c4:	b	11310 <__assert_fail@plt+0x194>
   116c8:	mov	r2, #5
   116cc:	ldr	r1, [pc, #132]	; 11758 <__assert_fail@plt+0x5dc>
   116d0:	mov	r0, #0
   116d4:	bl	10f60 <dcgettext@plt>
   116d8:	mov	r1, r6
   116dc:	mov	r2, r0
   116e0:	mov	r0, #1
   116e4:	bl	10ff0 <error@plt>
   116e8:	andeq	r9, r1, r0, lsl #3
   116ec:			; <UNDEFINED> instruction: 0x000197b0
   116f0:	andeq	sl, r2, ip, ror r1
   116f4:	andeq	r9, r1, r8, lsr #6
   116f8:	andeq	r9, r1, r0, asr #14
   116fc:	muleq	r1, r8, r6
   11700:	ldrdeq	r2, [r1], -r8
   11704:	andeq	sl, r2, r4, lsl r1
   11708:	andeq	sl, r2, r4, ror r1
   1170c:	muleq	r1, r0, r7
   11710:	andeq	r9, r1, r0, lsr #15
   11714:	ldrdeq	r9, [r1], -ip
   11718:	muleq	r1, r4, r6
   1171c:	andeq	sl, r2, r8, ror #2
   11720:			; <UNDEFINED> instruction: 0x000197bc
   11724:	strdeq	r9, [r1], -r0
   11728:			; <UNDEFINED> instruction: 0x0002a1b0
   1172c:	muleq	r1, r4, r8
   11730:	andeq	sl, r2, r0, lsl r1
   11734:			; <UNDEFINED> instruction: 0x000198b0
   11738:	andeq	sl, r2, r4, lsl #3
   1173c:	andeq	r9, r1, r4, lsl #17
   11740:	andeq	r9, r1, r0, lsl r9
   11744:	andeq	r9, r1, r0, ror #17
   11748:	strdeq	r9, [r1], -r4
   1174c:	andeq	r9, r1, r4, asr r8
   11750:	andeq	r9, r1, ip, lsl r8
   11754:	andeq	r9, r1, r8, asr r7
   11758:	andeq	r9, r1, r4, asr #17
   1175c:	mov	fp, #0
   11760:	mov	lr, #0
   11764:	pop	{r1}		; (ldr r1, [sp], #4)
   11768:	mov	r2, sp
   1176c:	push	{r2}		; (str r2, [sp, #-4]!)
   11770:	push	{r0}		; (str r0, [sp, #-4]!)
   11774:	ldr	ip, [pc, #16]	; 1178c <__assert_fail@plt+0x610>
   11778:	push	{ip}		; (str ip, [sp, #-4]!)
   1177c:	ldr	r0, [pc, #12]	; 11790 <__assert_fail@plt+0x614>
   11780:	ldr	r3, [pc, #12]	; 11794 <__assert_fail@plt+0x618>
   11784:	bl	11014 <__libc_start_main@plt>
   11788:	bl	11158 <abort@plt>
   1178c:	andeq	r9, r1, r0, lsr #2
   11790:	andeq	r1, r1, r8, lsl #3
   11794:	andeq	r9, r1, r0, asr #1
   11798:	ldr	r3, [pc, #20]	; 117b4 <__assert_fail@plt+0x638>
   1179c:	ldr	r2, [pc, #20]	; 117b8 <__assert_fail@plt+0x63c>
   117a0:	add	r3, pc, r3
   117a4:	ldr	r2, [r3, r2]
   117a8:	cmp	r2, #0
   117ac:	bxeq	lr
   117b0:	b	1102c <__gmon_start__@plt>
   117b4:	andeq	r8, r1, r8, asr r8
   117b8:	andeq	r0, r0, r4, lsl #2
   117bc:	ldr	r3, [pc, #28]	; 117e0 <__assert_fail@plt+0x664>
   117c0:	ldr	r0, [pc, #28]	; 117e4 <__assert_fail@plt+0x668>
   117c4:	sub	r3, r3, r0
   117c8:	cmp	r3, #6
   117cc:	bxls	lr
   117d0:	ldr	r3, [pc, #16]	; 117e8 <__assert_fail@plt+0x66c>
   117d4:	cmp	r3, #0
   117d8:	bxeq	lr
   117dc:	bx	r3
   117e0:	andeq	sl, r2, pc, asr r1
   117e4:	andeq	sl, r2, ip, asr r1
   117e8:	andeq	r0, r0, r0
   117ec:	ldr	r1, [pc, #36]	; 11818 <__assert_fail@plt+0x69c>
   117f0:	ldr	r0, [pc, #36]	; 1181c <__assert_fail@plt+0x6a0>
   117f4:	sub	r1, r1, r0
   117f8:	asr	r1, r1, #2
   117fc:	add	r1, r1, r1, lsr #31
   11800:	asrs	r1, r1, #1
   11804:	bxeq	lr
   11808:	ldr	r3, [pc, #16]	; 11820 <__assert_fail@plt+0x6a4>
   1180c:	cmp	r3, #0
   11810:	bxeq	lr
   11814:	bx	r3
   11818:	andeq	sl, r2, ip, asr r1
   1181c:	andeq	sl, r2, ip, asr r1
   11820:	andeq	r0, r0, r0
   11824:	push	{r4, lr}
   11828:	ldr	r4, [pc, #24]	; 11848 <__assert_fail@plt+0x6cc>
   1182c:	ldrb	r3, [r4]
   11830:	cmp	r3, #0
   11834:	popne	{r4, pc}
   11838:	bl	117bc <__assert_fail@plt+0x640>
   1183c:	mov	r3, #1
   11840:	strb	r3, [r4]
   11844:	pop	{r4, pc}
   11848:	andeq	sl, r2, r8, ror r1
   1184c:	ldr	r0, [pc, #40]	; 1187c <__assert_fail@plt+0x700>
   11850:	ldr	r3, [r0]
   11854:	cmp	r3, #0
   11858:	bne	11860 <__assert_fail@plt+0x6e4>
   1185c:	b	117ec <__assert_fail@plt+0x670>
   11860:	ldr	r3, [pc, #24]	; 11880 <__assert_fail@plt+0x704>
   11864:	cmp	r3, #0
   11868:	beq	1185c <__assert_fail@plt+0x6e0>
   1186c:	push	{r4, lr}
   11870:	blx	r3
   11874:	pop	{r4, lr}
   11878:	b	117ec <__assert_fail@plt+0x670>
   1187c:	andeq	r9, r2, ip, lsl #30
   11880:	andeq	r0, r0, r0
   11884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11888:	sub	sp, sp, #20
   1188c:	ldr	r4, [pc, #1304]	; 11dac <__assert_fail@plt+0xc30>
   11890:	ldrb	r3, [r4]
   11894:	cmp	r3, #0
   11898:	beq	11928 <__assert_fail@plt+0x7ac>
   1189c:	ldrb	r3, [r4, #1]
   118a0:	ldrb	r1, [r4, #12]
   118a4:	cmp	r3, #0
   118a8:	ldrne	r6, [r4, #4]
   118ac:	ldreq	r6, [r4, #8]
   118b0:	cmp	r1, #0
   118b4:	moveq	r5, r1
   118b8:	bne	119a4 <__assert_fail@plt+0x828>
   118bc:	mov	r0, r6
   118c0:	mov	r1, r5
   118c4:	ldr	r2, [pc, #1252]	; 11db0 <__assert_fail@plt+0xc34>
   118c8:	bl	12614 <__assert_fail@plt+0x1498>
   118cc:	ldr	r5, [pc, #1248]	; 11db4 <__assert_fail@plt+0xc38>
   118d0:	ldr	r1, [r5]
   118d4:	bl	10eb8 <fputs_unlocked@plt>
   118d8:	ldrb	r3, [r4, #49]	; 0x31
   118dc:	cmp	r3, #0
   118e0:	beq	1196c <__assert_fail@plt+0x7f0>
   118e4:	ldrb	r3, [r4, #48]	; 0x30
   118e8:	cmp	r3, #0
   118ec:	beq	118fc <__assert_fail@plt+0x780>
   118f0:	ldrb	r3, [r4, #77]	; 0x4d
   118f4:	cmp	r3, #0
   118f8:	bne	11a2c <__assert_fail@plt+0x8b0>
   118fc:	mov	r1, r3
   11900:	ldr	r0, [r5]
   11904:	ldr	r2, [r0, #20]
   11908:	ldr	ip, [r0, #24]
   1190c:	cmp	r2, ip
   11910:	addcc	r1, r2, #1
   11914:	strcc	r1, [r0, #20]
   11918:	strbcc	r3, [r2]
   1191c:	bcs	11a80 <__assert_fail@plt+0x904>
   11920:	add	sp, sp, #20
   11924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11928:	ldrb	r3, [r4, #37]	; 0x25
   1192c:	cmp	r3, #0
   11930:	beq	11978 <__assert_fail@plt+0x7fc>
   11934:	ldrb	r3, [r4, #1]
   11938:	ldrb	r1, [r4, #12]
   1193c:	cmp	r3, #0
   11940:	ldrne	r0, [r4, #40]	; 0x28
   11944:	ldreq	r0, [r4, #44]	; 0x2c
   11948:	bl	1243c <__assert_fail@plt+0x12c0>
   1194c:	ldr	r2, [pc, #1124]	; 11db8 <__assert_fail@plt+0xc3c>
   11950:	ldr	r5, [pc, #1116]	; 11db4 <__assert_fail@plt+0xc38>
   11954:	ldrb	r3, [r2]
   11958:	and	r0, r0, r3
   1195c:	ldrb	r3, [r4, #49]	; 0x31
   11960:	strb	r0, [r2]
   11964:	cmp	r3, #0
   11968:	bne	118e4 <__assert_fail@plt+0x768>
   1196c:	mov	r3, #10
   11970:	mov	r1, r3
   11974:	b	11900 <__assert_fail@plt+0x784>
   11978:	ldrb	r3, [r4, #48]	; 0x30
   1197c:	cmp	r3, #0
   11980:	bne	119fc <__assert_fail@plt+0x880>
   11984:	ldrb	r6, [r4, #50]	; 0x32
   11988:	cmp	r6, #0
   1198c:	beq	11a88 <__assert_fail@plt+0x90c>
   11990:	ldr	r5, [pc, #1052]	; 11db4 <__assert_fail@plt+0xc38>
   11994:	ldr	r0, [r4, #52]	; 0x34
   11998:	ldr	r1, [r5]
   1199c:	bl	10eb8 <fputs_unlocked@plt>
   119a0:	b	118d8 <__assert_fail@plt+0x75c>
   119a4:	mov	r0, r6
   119a8:	bl	10ef4 <getpwuid@plt>
   119ac:	subs	r1, r0, #0
   119b0:	ldrne	r0, [r1]
   119b4:	bne	118cc <__assert_fail@plt+0x750>
   119b8:	mov	r5, r1
   119bc:	mov	r2, #5
   119c0:	ldr	r1, [pc, #1012]	; 11dbc <__assert_fail@plt+0xc40>
   119c4:	bl	10f60 <dcgettext@plt>
   119c8:	mov	r1, r5
   119cc:	ldr	r2, [pc, #988]	; 11db0 <__assert_fail@plt+0xc34>
   119d0:	mov	r7, r0
   119d4:	mov	r0, r6
   119d8:	bl	12614 <__assert_fail@plt+0x1498>
   119dc:	mov	r2, r7
   119e0:	mov	r1, r5
   119e4:	mov	r3, r0
   119e8:	mov	r0, r5
   119ec:	bl	10ff0 <error@plt>
   119f0:	ldr	r3, [pc, #960]	; 11db8 <__assert_fail@plt+0xc3c>
   119f4:	strb	r5, [r3]
   119f8:	b	118bc <__assert_fail@plt+0x740>
   119fc:	ldrb	ip, [r4, #49]	; 0x31
   11a00:	ldrb	lr, [r4, #12]
   11a04:	ldr	r1, [r4, #4]
   11a08:	cmp	ip, #0
   11a0c:	moveq	ip, #32
   11a10:	movne	ip, #0
   11a14:	ldr	r2, [r4, #40]	; 0x28
   11a18:	ldr	r3, [r4, #44]	; 0x2c
   11a1c:	str	ip, [sp, #4]
   11a20:	str	lr, [sp]
   11a24:	bl	120e8 <__assert_fail@plt+0xf6c>
   11a28:	b	1194c <__assert_fail@plt+0x7d0>
   11a2c:	ldr	r0, [r5]
   11a30:	ldr	r3, [r0, #20]
   11a34:	ldr	r2, [r0, #24]
   11a38:	cmp	r3, r2
   11a3c:	addcc	r1, r3, #1
   11a40:	movcc	r2, #0
   11a44:	strcc	r1, [r0, #20]
   11a48:	strbcc	r2, [r3]
   11a4c:	bcs	11d5c <__assert_fail@plt+0xbe0>
   11a50:	ldr	r0, [r5]
   11a54:	ldr	r3, [r0, #20]
   11a58:	ldr	r2, [r0, #24]
   11a5c:	cmp	r3, r2
   11a60:	addcc	r1, r3, #1
   11a64:	movcc	r2, #0
   11a68:	strcc	r1, [r0, #20]
   11a6c:	strbcc	r2, [r3]
   11a70:	bcc	11920 <__assert_fail@plt+0x7a4>
   11a74:	mov	r1, #0
   11a78:	bl	110f8 <__overflow@plt>
   11a7c:	b	11920 <__assert_fail@plt+0x7a4>
   11a80:	bl	110f8 <__overflow@plt>
   11a84:	b	11920 <__assert_fail@plt+0x7a4>
   11a88:	mov	r2, #5
   11a8c:	ldr	r1, [pc, #812]	; 11dc0 <__assert_fail@plt+0xc44>
   11a90:	mov	r5, r0
   11a94:	mov	r0, r6
   11a98:	bl	10f60 <dcgettext@plt>
   11a9c:	mov	r1, r6
   11aa0:	add	r2, r4, #16
   11aa4:	mov	r7, r0
   11aa8:	ldr	r0, [r4, #4]
   11aac:	bl	12614 <__assert_fail@plt+0x1498>
   11ab0:	mov	r1, r7
   11ab4:	mov	r2, r0
   11ab8:	mov	r0, #1
   11abc:	bl	110bc <__printf_chk@plt>
   11ac0:	ldr	r0, [r4, #4]
   11ac4:	bl	10ef4 <getpwuid@plt>
   11ac8:	subs	r6, r0, #0
   11acc:	beq	11ae0 <__assert_fail@plt+0x964>
   11ad0:	ldr	r2, [r6]
   11ad4:	ldr	r1, [pc, #744]	; 11dc4 <__assert_fail@plt+0xc48>
   11ad8:	mov	r0, #1
   11adc:	bl	110bc <__printf_chk@plt>
   11ae0:	mov	r2, #5
   11ae4:	ldr	r1, [pc, #732]	; 11dc8 <__assert_fail@plt+0xc4c>
   11ae8:	mov	r0, #0
   11aec:	bl	10f60 <dcgettext@plt>
   11af0:	ldr	r2, [pc, #724]	; 11dcc <__assert_fail@plt+0xc50>
   11af4:	mov	r1, #0
   11af8:	mov	r7, r0
   11afc:	ldr	r0, [r4, #40]	; 0x28
   11b00:	bl	12614 <__assert_fail@plt+0x1498>
   11b04:	mov	r1, r7
   11b08:	mov	r2, r0
   11b0c:	mov	r0, #1
   11b10:	bl	110bc <__printf_chk@plt>
   11b14:	ldr	r0, [r4, #40]	; 0x28
   11b18:	bl	11164 <getgrgid@plt>
   11b1c:	cmp	r0, #0
   11b20:	beq	11b34 <__assert_fail@plt+0x9b8>
   11b24:	ldr	r2, [r0]
   11b28:	ldr	r1, [pc, #660]	; 11dc4 <__assert_fail@plt+0xc48>
   11b2c:	mov	r0, #1
   11b30:	bl	110bc <__printf_chk@plt>
   11b34:	ldr	r2, [r4, #8]
   11b38:	ldr	r3, [r4, #4]
   11b3c:	cmp	r2, r3
   11b40:	beq	11b98 <__assert_fail@plt+0xa1c>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #640]	; 11dd0 <__assert_fail@plt+0xc54>
   11b4c:	mov	r0, #0
   11b50:	bl	10f60 <dcgettext@plt>
   11b54:	ldr	r2, [pc, #596]	; 11db0 <__assert_fail@plt+0xc34>
   11b58:	mov	r1, #0
   11b5c:	mov	r6, r0
   11b60:	ldr	r0, [r4, #8]
   11b64:	bl	12614 <__assert_fail@plt+0x1498>
   11b68:	mov	r1, r6
   11b6c:	mov	r2, r0
   11b70:	mov	r0, #1
   11b74:	bl	110bc <__printf_chk@plt>
   11b78:	ldr	r0, [r4, #8]
   11b7c:	bl	10ef4 <getpwuid@plt>
   11b80:	subs	r6, r0, #0
   11b84:	beq	11b98 <__assert_fail@plt+0xa1c>
   11b88:	ldr	r2, [r6]
   11b8c:	ldr	r1, [pc, #560]	; 11dc4 <__assert_fail@plt+0xc48>
   11b90:	mov	r0, #1
   11b94:	bl	110bc <__printf_chk@plt>
   11b98:	ldr	r7, [r4, #44]	; 0x2c
   11b9c:	ldr	r3, [r4, #40]	; 0x28
   11ba0:	cmp	r7, r3
   11ba4:	beq	11bfc <__assert_fail@plt+0xa80>
   11ba8:	mov	r2, #5
   11bac:	ldr	r1, [pc, #544]	; 11dd4 <__assert_fail@plt+0xc58>
   11bb0:	mov	r0, #0
   11bb4:	bl	10f60 <dcgettext@plt>
   11bb8:	ldr	r2, [pc, #524]	; 11dcc <__assert_fail@plt+0xc50>
   11bbc:	mov	r1, #0
   11bc0:	mov	r8, r0
   11bc4:	mov	r0, r7
   11bc8:	bl	12614 <__assert_fail@plt+0x1498>
   11bcc:	mov	r1, r8
   11bd0:	mov	r2, r0
   11bd4:	mov	r0, #1
   11bd8:	bl	110bc <__printf_chk@plt>
   11bdc:	ldr	r0, [r4, #44]	; 0x2c
   11be0:	bl	11164 <getgrgid@plt>
   11be4:	cmp	r0, #0
   11be8:	beq	11bfc <__assert_fail@plt+0xa80>
   11bec:	ldr	r2, [r0]
   11bf0:	ldr	r1, [pc, #460]	; 11dc4 <__assert_fail@plt+0xc48>
   11bf4:	mov	r0, #1
   11bf8:	bl	110bc <__printf_chk@plt>
   11bfc:	cmp	r5, #0
   11c00:	beq	11d68 <__assert_fail@plt+0xbec>
   11c04:	cmp	r6, #0
   11c08:	mvneq	r1, #0
   11c0c:	ldrne	r1, [r6, #12]
   11c10:	add	r2, sp, #12
   11c14:	mov	r0, r5
   11c18:	bl	17de8 <__assert_fail@plt+0x6c6c>
   11c1c:	subs	r7, r0, #0
   11c20:	blt	11cd8 <__assert_fail@plt+0xb5c>
   11c24:	cmp	r7, #0
   11c28:	ldr	r5, [pc, #388]	; 11db4 <__assert_fail@plt+0xc38>
   11c2c:	beq	11d24 <__assert_fail@plt+0xba8>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #412]	; 11dd8 <__assert_fail@plt+0xc5c>
   11c38:	mov	r0, #0
   11c3c:	bl	10f60 <dcgettext@plt>
   11c40:	ldr	r1, [r5]
   11c44:	bl	10eb8 <fputs_unlocked@plt>
   11c48:	mov	r6, #0
   11c4c:	ldr	sl, [pc, #376]	; 11dcc <__assert_fail@plt+0xc50>
   11c50:	ldr	r9, [pc, #364]	; 11dc4 <__assert_fail@plt+0xc48>
   11c54:	mov	fp, r6
   11c58:	mov	r8, #1
   11c5c:	ldr	r3, [sp, #12]
   11c60:	mov	r2, sl
   11c64:	mov	r1, fp
   11c68:	ldr	r0, [r3, r6, lsl #2]
   11c6c:	bl	12614 <__assert_fail@plt+0x1498>
   11c70:	ldr	r1, [r5]
   11c74:	bl	10eb8 <fputs_unlocked@plt>
   11c78:	ldr	r3, [sp, #12]
   11c7c:	ldr	r0, [r3, r6, lsl #2]
   11c80:	bl	11164 <getgrgid@plt>
   11c84:	mov	r1, r9
   11c88:	subs	r3, r0, #0
   11c8c:	mov	r0, r8
   11c90:	beq	11c9c <__assert_fail@plt+0xb20>
   11c94:	ldr	r2, [r3]
   11c98:	bl	110bc <__printf_chk@plt>
   11c9c:	add	r6, r6, #1
   11ca0:	cmp	r6, r7
   11ca4:	beq	11d24 <__assert_fail@plt+0xba8>
   11ca8:	ldr	r0, [r5]
   11cac:	ldr	r3, [r0, #20]
   11cb0:	ldr	r2, [r0, #24]
   11cb4:	add	r1, r3, #1
   11cb8:	cmp	r3, r2
   11cbc:	movcc	r2, #44	; 0x2c
   11cc0:	strcc	r1, [r0, #20]
   11cc4:	strbcc	r2, [r3]
   11cc8:	bcc	11c5c <__assert_fail@plt+0xae0>
   11ccc:	mov	r1, #44	; 0x2c
   11cd0:	bl	110f8 <__overflow@plt>
   11cd4:	b	11c5c <__assert_fail@plt+0xae0>
   11cd8:	bl	11080 <__errno_location@plt>
   11cdc:	mov	r2, #5
   11ce0:	ldr	r1, [pc, #244]	; 11ddc <__assert_fail@plt+0xc60>
   11ce4:	ldr	r6, [r0]
   11ce8:	mov	r0, #0
   11cec:	bl	10f60 <dcgettext@plt>
   11cf0:	mov	r7, r0
   11cf4:	mov	r0, r5
   11cf8:	bl	16548 <__assert_fail@plt+0x53cc>
   11cfc:	mov	r2, r7
   11d00:	mov	r1, r6
   11d04:	mov	r3, r0
   11d08:	mov	r0, #0
   11d0c:	bl	10ff0 <error@plt>
   11d10:	ldr	r3, [pc, #160]	; 11db8 <__assert_fail@plt+0xc3c>
   11d14:	mov	r2, #0
   11d18:	ldr	r5, [pc, #148]	; 11db4 <__assert_fail@plt+0xc38>
   11d1c:	strb	r2, [r3]
   11d20:	b	118d8 <__assert_fail@plt+0x75c>
   11d24:	ldr	r0, [sp, #12]
   11d28:	bl	125bc <__assert_fail@plt+0x1440>
   11d2c:	ldr	r3, [r4, #52]	; 0x34
   11d30:	cmp	r3, #0
   11d34:	beq	118d8 <__assert_fail@plt+0x75c>
   11d38:	mov	r2, #5
   11d3c:	ldr	r1, [pc, #156]	; 11de0 <__assert_fail@plt+0xc64>
   11d40:	mov	r0, #0
   11d44:	bl	10f60 <dcgettext@plt>
   11d48:	ldr	r2, [r4, #52]	; 0x34
   11d4c:	mov	r1, r0
   11d50:	mov	r0, #1
   11d54:	bl	110bc <__printf_chk@plt>
   11d58:	b	118d8 <__assert_fail@plt+0x75c>
   11d5c:	mov	r1, #0
   11d60:	bl	110f8 <__overflow@plt>
   11d64:	b	11a50 <__assert_fail@plt+0x8d4>
   11d68:	add	r2, sp, #12
   11d6c:	ldr	r1, [r4, #44]	; 0x2c
   11d70:	mov	r0, r5
   11d74:	bl	17de8 <__assert_fail@plt+0x6c6c>
   11d78:	subs	r7, r0, #0
   11d7c:	bge	11c24 <__assert_fail@plt+0xaa8>
   11d80:	bl	11080 <__errno_location@plt>
   11d84:	mov	r2, #5
   11d88:	ldr	r1, [pc, #84]	; 11de4 <__assert_fail@plt+0xc68>
   11d8c:	ldr	r6, [r0]
   11d90:	mov	r0, r5
   11d94:	bl	10f60 <dcgettext@plt>
   11d98:	mov	r1, r6
   11d9c:	mov	r2, r0
   11da0:	mov	r0, r5
   11da4:	bl	10ff0 <error@plt>
   11da8:	b	11d10 <__assert_fail@plt+0xb94>
   11dac:	andeq	sl, r2, ip, ror r1
   11db0:	andeq	sl, r2, ip, lsl #3
   11db4:	andeq	sl, r2, r4, ror r1
   11db8:	andeq	sl, r2, r0, lsl r1
   11dbc:	andeq	r9, r1, r0, lsr #4
   11dc0:	andeq	r9, r1, r0, asr #4
   11dc4:	andeq	r9, r1, r8, asr #4
   11dc8:	andeq	r9, r1, r0, asr r2
   11dcc:			; <UNDEFINED> instruction: 0x0002a1b4
   11dd0:	andeq	r9, r1, r8, asr r2
   11dd4:	andeq	r9, r1, r4, ror #4
   11dd8:	ldrdeq	r9, [r1], -r0
   11ddc:	andeq	r9, r1, r0, ror r2
   11de0:	andeq	r9, r1, r4, asr #5
   11de4:	muleq	r1, r4, r2
   11de8:	subs	r6, r0, #0
   11dec:	push	{r7, lr}
   11df0:	sub	sp, sp, #56	; 0x38
   11df4:	beq	11e30 <__assert_fail@plt+0xcb4>
   11df8:	ldr	r3, [pc, #660]	; 12094 <__assert_fail@plt+0xf18>
   11dfc:	mov	r2, #5
   11e00:	ldr	r1, [pc, #656]	; 12098 <__assert_fail@plt+0xf1c>
   11e04:	mov	r0, #0
   11e08:	ldr	r4, [r3]
   11e0c:	bl	10f60 <dcgettext@plt>
   11e10:	ldr	r3, [pc, #644]	; 1209c <__assert_fail@plt+0xf20>
   11e14:	mov	r1, #1
   11e18:	ldr	r3, [r3]
   11e1c:	mov	r2, r0
   11e20:	mov	r0, r4
   11e24:	bl	110d4 <__fprintf_chk@plt>
   11e28:	mov	r0, r6
   11e2c:	bl	11050 <exit@plt>
   11e30:	mov	r2, #5
   11e34:	ldr	r1, [pc, #612]	; 120a0 <__assert_fail@plt+0xf24>
   11e38:	bl	10f60 <dcgettext@plt>
   11e3c:	ldr	r3, [pc, #600]	; 1209c <__assert_fail@plt+0xf20>
   11e40:	ldr	r7, [pc, #604]	; 120a4 <__assert_fail@plt+0xf28>
   11e44:	ldr	r4, [pc, #604]	; 120a8 <__assert_fail@plt+0xf2c>
   11e48:	ldr	r2, [r3]
   11e4c:	mov	r1, r0
   11e50:	mov	r0, #1
   11e54:	bl	110bc <__printf_chk@plt>
   11e58:	mov	r2, #5
   11e5c:	ldr	r1, [pc, #584]	; 120ac <__assert_fail@plt+0xf30>
   11e60:	mov	r0, r6
   11e64:	bl	10f60 <dcgettext@plt>
   11e68:	ldr	r1, [r7]
   11e6c:	bl	10eb8 <fputs_unlocked@plt>
   11e70:	mov	r2, #5
   11e74:	ldr	r1, [pc, #564]	; 120b0 <__assert_fail@plt+0xf34>
   11e78:	mov	r0, r6
   11e7c:	bl	10f60 <dcgettext@plt>
   11e80:	ldr	r1, [r7]
   11e84:	bl	10eb8 <fputs_unlocked@plt>
   11e88:	mov	r2, #5
   11e8c:	ldr	r1, [pc, #544]	; 120b4 <__assert_fail@plt+0xf38>
   11e90:	mov	r0, r6
   11e94:	bl	10f60 <dcgettext@plt>
   11e98:	ldr	r1, [r7]
   11e9c:	bl	10eb8 <fputs_unlocked@plt>
   11ea0:	mov	r2, #5
   11ea4:	ldr	r1, [pc, #524]	; 120b8 <__assert_fail@plt+0xf3c>
   11ea8:	mov	r0, r6
   11eac:	bl	10f60 <dcgettext@plt>
   11eb0:	ldr	r1, [r7]
   11eb4:	bl	10eb8 <fputs_unlocked@plt>
   11eb8:	mov	r2, #5
   11ebc:	ldr	r1, [pc, #504]	; 120bc <__assert_fail@plt+0xf40>
   11ec0:	mov	r0, r6
   11ec4:	bl	10f60 <dcgettext@plt>
   11ec8:	ldr	r1, [r7]
   11ecc:	bl	10eb8 <fputs_unlocked@plt>
   11ed0:	ldm	r4!, {r0, r1, r2, r3}
   11ed4:	mov	lr, sp
   11ed8:	stmia	lr!, {r0, r1, r2, r3}
   11edc:	ldm	r4!, {r0, r1, r2, r3}
   11ee0:	ldr	ip, [sp]
   11ee4:	stmia	lr!, {r0, r1, r2, r3}
   11ee8:	cmp	ip, #0
   11eec:	ldm	r4!, {r0, r1, r2, r3}
   11ef0:	stmia	lr!, {r0, r1, r2, r3}
   11ef4:	ldm	r4, {r0, r1}
   11ef8:	moveq	r4, sp
   11efc:	stm	lr, {r0, r1}
   11f00:	beq	11f30 <__assert_fail@plt+0xdb4>
   11f04:	ldr	r5, [pc, #436]	; 120c0 <__assert_fail@plt+0xf44>
   11f08:	mov	r4, sp
   11f0c:	b	11f1c <__assert_fail@plt+0xda0>
   11f10:	ldr	ip, [r4, #8]!
   11f14:	cmp	ip, #0
   11f18:	beq	11f30 <__assert_fail@plt+0xdb4>
   11f1c:	mov	r1, ip
   11f20:	mov	r0, r5
   11f24:	bl	10ee8 <strcmp@plt>
   11f28:	cmp	r0, #0
   11f2c:	bne	11f10 <__assert_fail@plt+0xd94>
   11f30:	ldr	r4, [r4, #4]
   11f34:	mov	r2, #5
   11f38:	cmp	r4, #0
   11f3c:	ldr	r1, [pc, #384]	; 120c4 <__assert_fail@plt+0xf48>
   11f40:	beq	11fe8 <__assert_fail@plt+0xe6c>
   11f44:	mov	r0, #0
   11f48:	bl	10f60 <dcgettext@plt>
   11f4c:	ldr	r3, [pc, #372]	; 120c8 <__assert_fail@plt+0xf4c>
   11f50:	ldr	r2, [pc, #372]	; 120cc <__assert_fail@plt+0xf50>
   11f54:	mov	r1, r0
   11f58:	mov	r0, #1
   11f5c:	bl	110bc <__printf_chk@plt>
   11f60:	mov	r1, #0
   11f64:	mov	r0, #5
   11f68:	bl	11104 <setlocale@plt>
   11f6c:	cmp	r0, #0
   11f70:	ldreq	r5, [pc, #328]	; 120c0 <__assert_fail@plt+0xf44>
   11f74:	beq	11f90 <__assert_fail@plt+0xe14>
   11f78:	mov	r2, #3
   11f7c:	ldr	r1, [pc, #332]	; 120d0 <__assert_fail@plt+0xf54>
   11f80:	bl	1114c <strncmp@plt>
   11f84:	ldr	r5, [pc, #308]	; 120c0 <__assert_fail@plt+0xf44>
   11f88:	cmp	r0, #0
   11f8c:	bne	12078 <__assert_fail@plt+0xefc>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #312]	; 120d4 <__assert_fail@plt+0xf58>
   11f98:	mov	r0, #0
   11f9c:	bl	10f60 <dcgettext@plt>
   11fa0:	ldr	r3, [pc, #280]	; 120c0 <__assert_fail@plt+0xf44>
   11fa4:	ldr	r2, [pc, #284]	; 120c8 <__assert_fail@plt+0xf4c>
   11fa8:	mov	r1, r0
   11fac:	mov	r0, #1
   11fb0:	bl	110bc <__printf_chk@plt>
   11fb4:	mov	r2, #5
   11fb8:	ldr	r1, [pc, #280]	; 120d8 <__assert_fail@plt+0xf5c>
   11fbc:	mov	r0, #0
   11fc0:	bl	10f60 <dcgettext@plt>
   11fc4:	ldr	r2, [pc, #272]	; 120dc <__assert_fail@plt+0xf60>
   11fc8:	cmp	r4, r5
   11fcc:	ldr	r3, [pc, #268]	; 120e0 <__assert_fail@plt+0xf64>
   11fd0:	movne	r3, r2
   11fd4:	mov	r1, r0
   11fd8:	mov	r2, r4
   11fdc:	mov	r0, #1
   11fe0:	bl	110bc <__printf_chk@plt>
   11fe4:	b	11e28 <__assert_fail@plt+0xcac>
   11fe8:	mov	r0, r4
   11fec:	bl	10f60 <dcgettext@plt>
   11ff0:	ldr	r3, [pc, #208]	; 120c8 <__assert_fail@plt+0xf4c>
   11ff4:	ldr	r2, [pc, #208]	; 120cc <__assert_fail@plt+0xf50>
   11ff8:	mov	r1, r0
   11ffc:	mov	r0, #1
   12000:	bl	110bc <__printf_chk@plt>
   12004:	mov	r1, r4
   12008:	mov	r0, #5
   1200c:	bl	11104 <setlocale@plt>
   12010:	cmp	r0, #0
   12014:	beq	1202c <__assert_fail@plt+0xeb0>
   12018:	mov	r2, #3
   1201c:	ldr	r1, [pc, #172]	; 120d0 <__assert_fail@plt+0xf54>
   12020:	bl	1114c <strncmp@plt>
   12024:	cmp	r0, #0
   12028:	bne	12070 <__assert_fail@plt+0xef4>
   1202c:	mov	r2, #5
   12030:	ldr	r1, [pc, #156]	; 120d4 <__assert_fail@plt+0xf58>
   12034:	mov	r0, #0
   12038:	bl	10f60 <dcgettext@plt>
   1203c:	ldr	r3, [pc, #124]	; 120c0 <__assert_fail@plt+0xf44>
   12040:	ldr	r2, [pc, #128]	; 120c8 <__assert_fail@plt+0xf4c>
   12044:	mov	r4, r3
   12048:	mov	r1, r0
   1204c:	mov	r0, #1
   12050:	bl	110bc <__printf_chk@plt>
   12054:	ldr	r1, [pc, #124]	; 120d8 <__assert_fail@plt+0xf5c>
   12058:	mov	r2, #5
   1205c:	mov	r0, #0
   12060:	bl	10f60 <dcgettext@plt>
   12064:	ldr	r3, [pc, #116]	; 120e0 <__assert_fail@plt+0xf64>
   12068:	mov	r1, r0
   1206c:	b	11fd8 <__assert_fail@plt+0xe5c>
   12070:	ldr	r5, [pc, #72]	; 120c0 <__assert_fail@plt+0xf44>
   12074:	mov	r4, r5
   12078:	mov	r2, #5
   1207c:	ldr	r1, [pc, #96]	; 120e4 <__assert_fail@plt+0xf68>
   12080:	mov	r0, #0
   12084:	bl	10f60 <dcgettext@plt>
   12088:	ldr	r1, [r7]
   1208c:	bl	10eb8 <fputs_unlocked@plt>
   12090:	b	11f90 <__assert_fail@plt+0xe14>
   12094:	andeq	sl, r2, r0, ror r1
   12098:	andeq	r9, r1, r0, ror #5
   1209c:	andeq	sl, r2, ip, ror #3
   120a0:	andeq	r9, r1, r8, lsl #6
   120a4:	andeq	sl, r2, r4, ror r1
   120a8:	andeq	r9, r1, r8, asr #2
   120ac:	andeq	r9, r1, ip, lsr #6
   120b0:	muleq	r1, r8, r3
   120b4:	andeq	r9, r1, r4, lsr #11
   120b8:	ldrdeq	r9, [r1], -r4
   120bc:	andeq	r9, r1, ip, lsl #12
   120c0:	ldrdeq	r9, [r1], -ip
   120c4:	andeq	r9, r1, r4, asr r6
   120c8:	andeq	r9, r1, ip, ror #12
   120cc:	muleq	r1, r4, r6
   120d0:	andeq	r9, r1, r4, lsr #13
   120d4:	strdeq	r9, [r1], -r0
   120d8:	andeq	r9, r1, ip, lsl #14
   120dc:	andeq	r9, r1, r8, lsr #6
   120e0:	andeq	r9, r1, ip, lsr #18
   120e4:	andeq	r9, r1, r8, lsr #13
   120e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120ec:	sub	sp, sp, #20
   120f0:	subs	r9, r0, #0
   120f4:	mov	r6, r2
   120f8:	mov	r7, r3
   120fc:	ldrb	sl, [sp, #56]	; 0x38
   12100:	ldrb	fp, [sp, #60]	; 0x3c
   12104:	beq	12278 <__assert_fail@plt+0x10fc>
   12108:	mov	r0, r1
   1210c:	bl	10ef4 <getpwuid@plt>
   12110:	adds	r3, r0, #0
   12114:	movne	r3, #1
   12118:	cmp	sl, #0
   1211c:	mov	r4, r0
   12120:	str	r3, [sp, #4]
   12124:	bne	1228c <__assert_fail@plt+0x1110>
   12128:	ldr	r5, [pc, #760]	; 12428 <__assert_fail@plt+0x12ac>
   1212c:	mov	r1, sl
   12130:	ldr	r2, [pc, #756]	; 1242c <__assert_fail@plt+0x12b0>
   12134:	mov	r0, r6
   12138:	bl	12614 <__assert_fail@plt+0x1498>
   1213c:	ldr	r1, [r5]
   12140:	bl	10eb8 <fputs_unlocked@plt>
   12144:	cmp	r6, r7
   12148:	beq	1218c <__assert_fail@plt+0x1010>
   1214c:	ldr	r0, [r5]
   12150:	ldr	r3, [r0, #20]
   12154:	ldr	r2, [r0, #24]
   12158:	cmp	r3, r2
   1215c:	addcc	r2, r3, #1
   12160:	strcc	r2, [r0, #20]
   12164:	strbcc	fp, [r3]
   12168:	bcs	1236c <__assert_fail@plt+0x11f0>
   1216c:	cmp	sl, #0
   12170:	bne	12304 <__assert_fail@plt+0x1188>
   12174:	mov	r1, sl
   12178:	ldr	r2, [pc, #684]	; 1242c <__assert_fail@plt+0x12b0>
   1217c:	mov	r0, r7
   12180:	bl	12614 <__assert_fail@plt+0x1498>
   12184:	ldr	r1, [r5]
   12188:	bl	10eb8 <fputs_unlocked@plt>
   1218c:	cmp	r4, #0
   12190:	moveq	r1, r7
   12194:	ldrne	r1, [r4, #12]
   12198:	add	r2, sp, #12
   1219c:	mov	r0, r9
   121a0:	bl	17de8 <__assert_fail@plt+0x6c6c>
   121a4:	subs	r8, r0, #0
   121a8:	blt	122b0 <__assert_fail@plt+0x1134>
   121ac:	ldreq	r0, [sp, #12]
   121b0:	beq	1225c <__assert_fail@plt+0x10e0>
   121b4:	mov	r4, #0
   121b8:	ldr	r0, [sp, #12]
   121bc:	str	sl, [sp]
   121c0:	b	121e0 <__assert_fail@plt+0x1064>
   121c4:	bl	12614 <__assert_fail@plt+0x1498>
   121c8:	ldr	r1, [r5]
   121cc:	bl	10eb8 <fputs_unlocked@plt>
   121d0:	ldr	r0, [sp, #12]
   121d4:	add	r4, r4, #1
   121d8:	cmp	r8, r4
   121dc:	beq	1225c <__assert_fail@plt+0x10e0>
   121e0:	ldr	r3, [r0, r4, lsl #2]
   121e4:	lsl	r9, r4, #2
   121e8:	cmp	r7, r3
   121ec:	cmpne	r6, r3
   121f0:	beq	121d4 <__assert_fail@plt+0x1058>
   121f4:	ldr	r0, [r5]
   121f8:	ldr	r3, [r0, #20]
   121fc:	ldr	r2, [r0, #24]
   12200:	add	r1, r3, #1
   12204:	cmp	r3, r2
   12208:	strcc	r1, [r0, #20]
   1220c:	strbcc	fp, [r3]
   12210:	bcs	1226c <__assert_fail@plt+0x10f0>
   12214:	ldr	r3, [sp, #12]
   12218:	ldr	r0, [sp]
   1221c:	mov	r1, #0
   12220:	ldr	r9, [r3, r9]
   12224:	cmp	r0, r1
   12228:	ldr	r2, [pc, #508]	; 1242c <__assert_fail@plt+0x12b0>
   1222c:	mov	r0, r9
   12230:	beq	121c4 <__assert_fail@plt+0x1048>
   12234:	bl	11164 <getgrgid@plt>
   12238:	subs	sl, r0, #0
   1223c:	beq	12324 <__assert_fail@plt+0x11a8>
   12240:	ldr	r0, [sl]
   12244:	ldr	r1, [r5]
   12248:	add	r4, r4, #1
   1224c:	bl	10eb8 <fputs_unlocked@plt>
   12250:	cmp	r8, r4
   12254:	ldr	r0, [sp, #12]
   12258:	bne	121e0 <__assert_fail@plt+0x1064>
   1225c:	bl	125bc <__assert_fail@plt+0x1440>
   12260:	ldr	r0, [sp, #4]
   12264:	add	sp, sp, #20
   12268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1226c:	mov	r1, fp
   12270:	bl	110f8 <__overflow@plt>
   12274:	b	12214 <__assert_fail@plt+0x1098>
   12278:	mov	r3, #1
   1227c:	cmp	sl, #0
   12280:	mov	r4, r9
   12284:	str	r3, [sp, #4]
   12288:	beq	12128 <__assert_fail@plt+0xfac>
   1228c:	mov	r0, r6
   12290:	bl	11164 <getgrgid@plt>
   12294:	subs	r8, r0, #0
   12298:	beq	123e4 <__assert_fail@plt+0x1268>
   1229c:	ldr	r5, [pc, #388]	; 12428 <__assert_fail@plt+0x12ac>
   122a0:	ldr	r0, [r8]
   122a4:	ldr	r1, [r5]
   122a8:	bl	10eb8 <fputs_unlocked@plt>
   122ac:	b	12144 <__assert_fail@plt+0xfc8>
   122b0:	cmp	r9, #0
   122b4:	beq	123b8 <__assert_fail@plt+0x123c>
   122b8:	bl	11080 <__errno_location@plt>
   122bc:	mov	r2, #5
   122c0:	ldr	r1, [pc, #360]	; 12430 <__assert_fail@plt+0x12b4>
   122c4:	ldr	r4, [r0]
   122c8:	mov	r0, #0
   122cc:	bl	10f60 <dcgettext@plt>
   122d0:	mov	r5, r0
   122d4:	mov	r0, r9
   122d8:	bl	16548 <__assert_fail@plt+0x53cc>
   122dc:	mov	r2, r5
   122e0:	mov	r1, r4
   122e4:	mov	r3, r0
   122e8:	mov	r0, #0
   122ec:	bl	10ff0 <error@plt>
   122f0:	mov	r3, #0
   122f4:	mov	r0, r3
   122f8:	str	r3, [sp, #4]
   122fc:	add	sp, sp, #20
   12300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12304:	mov	r0, r7
   12308:	bl	11164 <getgrgid@plt>
   1230c:	subs	r8, r0, #0
   12310:	beq	12378 <__assert_fail@plt+0x11fc>
   12314:	ldr	r0, [r8]
   12318:	ldr	r1, [r5]
   1231c:	bl	10eb8 <fputs_unlocked@plt>
   12320:	b	1218c <__assert_fail@plt+0x1010>
   12324:	mov	r2, #5
   12328:	ldr	r1, [pc, #260]	; 12434 <__assert_fail@plt+0x12b8>
   1232c:	bl	10f60 <dcgettext@plt>
   12330:	mov	r3, r9
   12334:	mov	r1, #0
   12338:	mov	r2, r0
   1233c:	mov	r0, sl
   12340:	bl	10ff0 <error@plt>
   12344:	ldr	r2, [pc, #224]	; 1242c <__assert_fail@plt+0x12b0>
   12348:	mov	r1, #0
   1234c:	mov	r0, r9
   12350:	bl	12614 <__assert_fail@plt+0x1498>
   12354:	ldr	r1, [r5]
   12358:	bl	10eb8 <fputs_unlocked@plt>
   1235c:	mov	r3, #0
   12360:	ldr	r0, [sp, #12]
   12364:	str	r3, [sp, #4]
   12368:	b	121d4 <__assert_fail@plt+0x1058>
   1236c:	mov	r1, fp
   12370:	bl	110f8 <__overflow@plt>
   12374:	b	1216c <__assert_fail@plt+0xff0>
   12378:	mov	r2, #5
   1237c:	ldr	r1, [pc, #176]	; 12434 <__assert_fail@plt+0x12b8>
   12380:	bl	10f60 <dcgettext@plt>
   12384:	mov	r3, r7
   12388:	mov	r1, r8
   1238c:	mov	r2, r0
   12390:	mov	r0, r8
   12394:	bl	10ff0 <error@plt>
   12398:	ldr	r2, [pc, #140]	; 1242c <__assert_fail@plt+0x12b0>
   1239c:	mov	r1, r8
   123a0:	mov	r0, r7
   123a4:	bl	12614 <__assert_fail@plt+0x1498>
   123a8:	ldr	r1, [r5]
   123ac:	bl	10eb8 <fputs_unlocked@plt>
   123b0:	str	r8, [sp, #4]
   123b4:	b	1218c <__assert_fail@plt+0x1010>
   123b8:	bl	11080 <__errno_location@plt>
   123bc:	mov	r2, #5
   123c0:	ldr	r1, [pc, #112]	; 12438 <__assert_fail@plt+0x12bc>
   123c4:	ldr	r4, [r0]
   123c8:	mov	r0, r9
   123cc:	bl	10f60 <dcgettext@plt>
   123d0:	mov	r1, r4
   123d4:	mov	r2, r0
   123d8:	mov	r0, r9
   123dc:	bl	10ff0 <error@plt>
   123e0:	b	122f0 <__assert_fail@plt+0x1174>
   123e4:	mov	r2, #5
   123e8:	ldr	r1, [pc, #68]	; 12434 <__assert_fail@plt+0x12b8>
   123ec:	bl	10f60 <dcgettext@plt>
   123f0:	ldr	r5, [pc, #48]	; 12428 <__assert_fail@plt+0x12ac>
   123f4:	mov	r3, r6
   123f8:	mov	r1, r8
   123fc:	mov	r2, r0
   12400:	mov	r0, r8
   12404:	bl	10ff0 <error@plt>
   12408:	ldr	r2, [pc, #28]	; 1242c <__assert_fail@plt+0x12b0>
   1240c:	mov	r1, r8
   12410:	mov	r0, r6
   12414:	bl	12614 <__assert_fail@plt+0x1498>
   12418:	ldr	r1, [r5]
   1241c:	bl	10eb8 <fputs_unlocked@plt>
   12420:	str	r8, [sp, #4]
   12424:	b	12144 <__assert_fail@plt+0xfc8>
   12428:	andeq	sl, r2, r4, ror r1
   1242c:	andeq	sl, r2, ip, asr #3
   12430:	andeq	r9, r1, r0, ror r2
   12434:	andeq	r9, r1, r8, asr #19
   12438:	muleq	r1, r4, r2
   1243c:	push	{r4, r5, r6, lr}
   12440:	subs	r4, r1, #0
   12444:	mov	r5, r0
   12448:	moveq	r4, #1
   1244c:	bne	12474 <__assert_fail@plt+0x12f8>
   12450:	mov	r0, r5
   12454:	ldr	r2, [pc, #80]	; 124ac <__assert_fail@plt+0x1330>
   12458:	mov	r1, #0
   1245c:	bl	12614 <__assert_fail@plt+0x1498>
   12460:	ldr	r3, [pc, #72]	; 124b0 <__assert_fail@plt+0x1334>
   12464:	ldr	r1, [r3]
   12468:	bl	10eb8 <fputs_unlocked@plt>
   1246c:	mov	r0, r4
   12470:	pop	{r4, r5, r6, pc}
   12474:	bl	11164 <getgrgid@plt>
   12478:	subs	r6, r0, #0
   1247c:	ldrne	r0, [r6]
   12480:	bne	12460 <__assert_fail@plt+0x12e4>
   12484:	mov	r2, #5
   12488:	ldr	r1, [pc, #36]	; 124b4 <__assert_fail@plt+0x1338>
   1248c:	bl	10f60 <dcgettext@plt>
   12490:	mov	r3, r5
   12494:	mov	r1, r6
   12498:	mov	r4, r6
   1249c:	mov	r2, r0
   124a0:	mov	r0, r6
   124a4:	bl	10ff0 <error@plt>
   124a8:	b	12450 <__assert_fail@plt+0x12d4>
   124ac:	andeq	sl, r2, ip, asr #3
   124b0:	andeq	sl, r2, r4, ror r1
   124b4:	andeq	r9, r1, r8, asr #19
   124b8:	ldr	r3, [pc, #4]	; 124c4 <__assert_fail@plt+0x1348>
   124bc:	str	r0, [r3]
   124c0:	bx	lr
   124c4:	andeq	sl, r2, r4, ror #3
   124c8:	ldr	r3, [pc, #4]	; 124d4 <__assert_fail@plt+0x1358>
   124cc:	strb	r0, [r3, #4]
   124d0:	bx	lr
   124d4:	andeq	sl, r2, r4, ror #3
   124d8:	ldr	r3, [pc, #192]	; 125a0 <__assert_fail@plt+0x1424>
   124dc:	push	{r4, r5, r6, lr}
   124e0:	sub	sp, sp, #8
   124e4:	ldr	r0, [r3]
   124e8:	bl	18504 <__assert_fail@plt+0x7388>
   124ec:	cmp	r0, #0
   124f0:	beq	12514 <__assert_fail@plt+0x1398>
   124f4:	ldr	r4, [pc, #168]	; 125a4 <__assert_fail@plt+0x1428>
   124f8:	ldrb	r3, [r4, #4]
   124fc:	cmp	r3, #0
   12500:	beq	12530 <__assert_fail@plt+0x13b4>
   12504:	bl	11080 <__errno_location@plt>
   12508:	ldr	r3, [r0]
   1250c:	cmp	r3, #32
   12510:	bne	12530 <__assert_fail@plt+0x13b4>
   12514:	ldr	r3, [pc, #140]	; 125a8 <__assert_fail@plt+0x142c>
   12518:	ldr	r0, [r3]
   1251c:	bl	18504 <__assert_fail@plt+0x7388>
   12520:	cmp	r0, #0
   12524:	bne	12578 <__assert_fail@plt+0x13fc>
   12528:	add	sp, sp, #8
   1252c:	pop	{r4, r5, r6, pc}
   12530:	mov	r2, #5
   12534:	ldr	r1, [pc, #112]	; 125ac <__assert_fail@plt+0x1430>
   12538:	mov	r0, #0
   1253c:	bl	10f60 <dcgettext@plt>
   12540:	ldr	r4, [r4]
   12544:	cmp	r4, #0
   12548:	mov	r5, r0
   1254c:	beq	12584 <__assert_fail@plt+0x1408>
   12550:	bl	11080 <__errno_location@plt>
   12554:	ldr	r6, [r0]
   12558:	mov	r0, r4
   1255c:	bl	152e8 <__assert_fail@plt+0x416c>
   12560:	mov	r1, r6
   12564:	str	r5, [sp]
   12568:	ldr	r2, [pc, #64]	; 125b0 <__assert_fail@plt+0x1434>
   1256c:	mov	r3, r0
   12570:	mov	r0, #0
   12574:	bl	10ff0 <error@plt>
   12578:	ldr	r3, [pc, #52]	; 125b4 <__assert_fail@plt+0x1438>
   1257c:	ldr	r0, [r3]
   12580:	bl	10f24 <_exit@plt>
   12584:	bl	11080 <__errno_location@plt>
   12588:	mov	r3, r5
   1258c:	ldr	r2, [pc, #36]	; 125b8 <__assert_fail@plt+0x143c>
   12590:	ldr	r1, [r0]
   12594:	mov	r0, r4
   12598:	bl	10ff0 <error@plt>
   1259c:	b	12578 <__assert_fail@plt+0x13fc>
   125a0:	andeq	sl, r2, r4, ror r1
   125a4:	andeq	sl, r2, r4, ror #3
   125a8:	andeq	sl, r2, r0, ror r1
   125ac:	strdeq	r9, [r1], -ip
   125b0:	andeq	r9, r1, r8, lsl #20
   125b4:	andeq	sl, r2, r8, lsl r1
   125b8:	andeq	r9, r1, ip, lsl #20
   125bc:	push	{r4, r5, lr}
   125c0:	sub	sp, sp, #12
   125c4:	mov	r5, r0
   125c8:	bl	11080 <__errno_location@plt>
   125cc:	mov	r2, #0
   125d0:	mov	r4, r0
   125d4:	ldr	r3, [r0]
   125d8:	str	r2, [r4]
   125dc:	mov	r0, r5
   125e0:	str	r3, [sp]
   125e4:	str	r3, [sp, #4]
   125e8:	bl	10f18 <free@plt>
   125ec:	ldr	r3, [r4]
   125f0:	add	r2, sp, #8
   125f4:	cmp	r3, #0
   125f8:	moveq	r3, #4
   125fc:	movne	r3, #0
   12600:	add	r3, r2, r3
   12604:	ldr	r3, [r3, #-8]
   12608:	str	r3, [r4]
   1260c:	add	sp, sp, #12
   12610:	pop	{r4, r5, pc}
   12614:	push	{r4, r5, r6, r8, r9, lr}
   12618:	mov	r4, r0
   1261c:	mov	r5, r1
   12620:	add	r6, r2, #20
   12624:	mov	r8, #10
   12628:	mov	r9, #0
   1262c:	mov	r3, #0
   12630:	strb	r3, [r2, #20]
   12634:	mov	r0, r4
   12638:	mov	r1, r5
   1263c:	mov	r2, r8
   12640:	mov	r3, r9
   12644:	bl	18f4c <__assert_fail@plt+0x7dd0>
   12648:	mov	r0, r4
   1264c:	mov	r1, r5
   12650:	mov	r3, r9
   12654:	add	r2, r2, #48	; 0x30
   12658:	strb	r2, [r6, #-1]!
   1265c:	mov	r2, r8
   12660:	bl	18f4c <__assert_fail@plt+0x7dd0>
   12664:	mov	r4, r0
   12668:	mov	r5, r1
   1266c:	orrs	r3, r4, r5
   12670:	bne	12634 <__assert_fail@plt+0x14b8>
   12674:	mov	r0, r6
   12678:	pop	{r4, r5, r6, r8, r9, pc}
   1267c:	push	{r4, r5, r6, lr}
   12680:	subs	r4, r0, #0
   12684:	beq	126f8 <__assert_fail@plt+0x157c>
   12688:	mov	r1, #47	; 0x2f
   1268c:	bl	1111c <strrchr@plt>
   12690:	subs	r5, r0, #0
   12694:	beq	126e4 <__assert_fail@plt+0x1568>
   12698:	add	r6, r5, #1
   1269c:	sub	r3, r6, r4
   126a0:	cmp	r3, #6
   126a4:	ble	126e4 <__assert_fail@plt+0x1568>
   126a8:	mov	r2, #7
   126ac:	ldr	r1, [pc, #96]	; 12714 <__assert_fail@plt+0x1598>
   126b0:	sub	r0, r5, #6
   126b4:	bl	1114c <strncmp@plt>
   126b8:	cmp	r0, #0
   126bc:	bne	126e4 <__assert_fail@plt+0x1568>
   126c0:	mov	r2, #3
   126c4:	ldr	r1, [pc, #76]	; 12718 <__assert_fail@plt+0x159c>
   126c8:	mov	r0, r6
   126cc:	bl	1114c <strncmp@plt>
   126d0:	cmp	r0, #0
   126d4:	movne	r4, r6
   126d8:	ldreq	r3, [pc, #60]	; 1271c <__assert_fail@plt+0x15a0>
   126dc:	addeq	r4, r5, #4
   126e0:	streq	r4, [r3]
   126e4:	ldr	r2, [pc, #52]	; 12720 <__assert_fail@plt+0x15a4>
   126e8:	ldr	r3, [pc, #52]	; 12724 <__assert_fail@plt+0x15a8>
   126ec:	str	r4, [r2]
   126f0:	str	r4, [r3]
   126f4:	pop	{r4, r5, r6, pc}
   126f8:	ldr	r3, [pc, #40]	; 12728 <__assert_fail@plt+0x15ac>
   126fc:	mov	r2, #55	; 0x37
   12700:	mov	r1, #1
   12704:	ldr	r3, [r3]
   12708:	ldr	r0, [pc, #28]	; 1272c <__assert_fail@plt+0x15b0>
   1270c:	bl	10fa8 <fwrite@plt>
   12710:	bl	11158 <abort@plt>
   12714:	andeq	r9, r1, r8, asr #20
   12718:	andeq	r9, r1, r0, asr sl
   1271c:	andeq	sl, r2, r0, ror #2
   12720:	andeq	sl, r2, ip, ror #3
   12724:	andeq	sl, r2, r4, ror #2
   12728:	andeq	sl, r2, r0, ror r1
   1272c:	andeq	r9, r1, r0, lsl sl
   12730:	push	{r4, r5, r6, lr}
   12734:	mov	r4, r0
   12738:	mov	r5, r1
   1273c:	bl	18720 <__assert_fail@plt+0x75a4>
   12740:	ldrb	r3, [r0]
   12744:	bic	r3, r3, #32
   12748:	cmp	r3, #85	; 0x55
   1274c:	bne	127ac <__assert_fail@plt+0x1630>
   12750:	ldrb	r3, [r0, #1]
   12754:	bic	r3, r3, #32
   12758:	cmp	r3, #84	; 0x54
   1275c:	bne	127e8 <__assert_fail@plt+0x166c>
   12760:	ldrb	r3, [r0, #2]
   12764:	bic	r3, r3, #32
   12768:	cmp	r3, #70	; 0x46
   1276c:	bne	127e8 <__assert_fail@plt+0x166c>
   12770:	ldrb	r3, [r0, #3]
   12774:	cmp	r3, #45	; 0x2d
   12778:	bne	127e8 <__assert_fail@plt+0x166c>
   1277c:	ldrb	r3, [r0, #4]
   12780:	cmp	r3, #56	; 0x38
   12784:	bne	127e8 <__assert_fail@plt+0x166c>
   12788:	ldrb	r3, [r0, #5]
   1278c:	cmp	r3, #0
   12790:	bne	127e8 <__assert_fail@plt+0x166c>
   12794:	ldrb	r2, [r4]
   12798:	ldr	r3, [pc, #152]	; 12838 <__assert_fail@plt+0x16bc>
   1279c:	ldr	r0, [pc, #152]	; 1283c <__assert_fail@plt+0x16c0>
   127a0:	cmp	r2, #96	; 0x60
   127a4:	movne	r0, r3
   127a8:	pop	{r4, r5, r6, pc}
   127ac:	cmp	r3, #71	; 0x47
   127b0:	bne	127e8 <__assert_fail@plt+0x166c>
   127b4:	ldrb	r3, [r0, #1]
   127b8:	bic	r3, r3, #32
   127bc:	cmp	r3, #66	; 0x42
   127c0:	bne	127e8 <__assert_fail@plt+0x166c>
   127c4:	ldrb	r3, [r0, #2]
   127c8:	cmp	r3, #49	; 0x31
   127cc:	bne	127e8 <__assert_fail@plt+0x166c>
   127d0:	ldrb	r3, [r0, #3]
   127d4:	cmp	r3, #56	; 0x38
   127d8:	bne	127e8 <__assert_fail@plt+0x166c>
   127dc:	ldrb	r3, [r0, #4]
   127e0:	cmp	r3, #48	; 0x30
   127e4:	beq	127fc <__assert_fail@plt+0x1680>
   127e8:	ldr	r3, [pc, #80]	; 12840 <__assert_fail@plt+0x16c4>
   127ec:	cmp	r5, #9
   127f0:	ldr	r0, [pc, #76]	; 12844 <__assert_fail@plt+0x16c8>
   127f4:	movne	r0, r3
   127f8:	pop	{r4, r5, r6, pc}
   127fc:	ldrb	r3, [r0, #5]
   12800:	cmp	r3, #51	; 0x33
   12804:	bne	127e8 <__assert_fail@plt+0x166c>
   12808:	ldrb	r3, [r0, #6]
   1280c:	cmp	r3, #48	; 0x30
   12810:	bne	127e8 <__assert_fail@plt+0x166c>
   12814:	ldrb	r3, [r0, #7]
   12818:	cmp	r3, #0
   1281c:	bne	127e8 <__assert_fail@plt+0x166c>
   12820:	ldrb	r2, [r4]
   12824:	ldr	r3, [pc, #28]	; 12848 <__assert_fail@plt+0x16cc>
   12828:	ldr	r0, [pc, #28]	; 1284c <__assert_fail@plt+0x16d0>
   1282c:	cmp	r2, #96	; 0x60
   12830:	movne	r0, r3
   12834:	pop	{r4, r5, r6, pc}
   12838:	andeq	r9, r1, ip, lsr #21
   1283c:	andeq	r9, r1, r8, lsr #21
   12840:			; <UNDEFINED> instruction: 0x00019abc
   12844:			; <UNDEFINED> instruction: 0x00019ab8
   12848:			; <UNDEFINED> instruction: 0x00019ab4
   1284c:			; <UNDEFINED> instruction: 0x00019ab0
   12850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12854:	sub	sp, sp, #140	; 0x8c
   12858:	mov	r9, r1
   1285c:	str	r3, [sp, #24]
   12860:	mov	r3, #1
   12864:	mov	sl, r0
   12868:	str	r2, [sp, #44]	; 0x2c
   1286c:	str	r3, [sp, #28]
   12870:	bl	10fc0 <__ctype_get_mb_cur_max@plt>
   12874:	ldr	r3, [sp, #180]	; 0xb4
   12878:	mov	fp, r9
   1287c:	mov	r9, sl
   12880:	lsr	r3, r3, #1
   12884:	and	r3, r3, #1
   12888:	str	r3, [sp, #40]	; 0x28
   1288c:	ldr	r3, [sp, #180]	; 0xb4
   12890:	mov	r2, #0
   12894:	and	r3, r3, #4
   12898:	str	r3, [sp, #100]	; 0x64
   1289c:	ldr	r3, [sp, #180]	; 0xb4
   128a0:	str	r2, [sp, #76]	; 0x4c
   128a4:	and	r3, r3, #1
   128a8:	str	r3, [sp, #96]	; 0x60
   128ac:	str	r2, [sp, #36]	; 0x24
   128b0:	str	r2, [sp, #56]	; 0x38
   128b4:	str	r2, [sp, #68]	; 0x44
   128b8:	str	r2, [sp, #72]	; 0x48
   128bc:	str	r2, [sp, #84]	; 0x54
   128c0:	str	r0, [sp, #80]	; 0x50
   128c4:	ldr	r3, [sp, #176]	; 0xb0
   128c8:	cmp	r3, #10
   128cc:	ldrls	pc, [pc, r3, lsl #2]
   128d0:	b	13aa8 <__assert_fail@plt+0x292c>
   128d4:	andeq	r2, r1, r0, lsl #18
   128d8:	andeq	r2, r1, r0, lsr #24
   128dc:	andeq	r2, r1, r8, ror sp
   128e0:	andeq	r2, r1, r4, asr ip
   128e4:	andeq	r2, r1, ip, asr #27
   128e8:	andeq	r2, r1, ip, lsr #27
   128ec:	andeq	r2, r1, r4, ror ip
   128f0:	muleq	r1, r8, ip
   128f4:	andeq	r2, r1, r0, asr #25
   128f8:	andeq	r2, r1, r0, asr #25
   128fc:	andeq	r2, r1, r0, asr #25
   12900:	mov	r3, #0
   12904:	ldr	r1, [sp, #56]	; 0x38
   12908:	ldr	r2, [sp, #176]	; 0xb0
   1290c:	ldr	lr, [sp, #176]	; 0xb0
   12910:	mov	r8, r3
   12914:	mov	ip, r3
   12918:	str	r3, [sp, #40]	; 0x28
   1291c:	mov	r3, r1
   12920:	cmp	r2, #2
   12924:	moveq	r3, #0
   12928:	andne	r3, r3, #1
   1292c:	mov	r0, r3
   12930:	str	r3, [sp, #92]	; 0x5c
   12934:	ldr	r3, [sp, #68]	; 0x44
   12938:	sub	lr, lr, #2
   1293c:	adds	r2, r3, #0
   12940:	movne	r2, #1
   12944:	and	r3, r1, ip
   12948:	and	r3, r2, r3
   1294c:	clz	lr, lr
   12950:	str	r3, [sp, #88]	; 0x58
   12954:	lsr	lr, lr, #5
   12958:	mov	r3, ip
   1295c:	and	r3, r3, lr
   12960:	mov	sl, #0
   12964:	and	r0, r2, r0
   12968:	str	r3, [sp, #64]	; 0x40
   1296c:	eor	r3, r1, #1
   12970:	str	lr, [sp, #52]	; 0x34
   12974:	str	r0, [sp, #48]	; 0x30
   12978:	str	r3, [sp, #60]	; 0x3c
   1297c:	ldr	r3, [sp, #24]
   12980:	cmn	r3, #1
   12984:	beq	12eb4 <__assert_fail@plt+0x1d38>
   12988:	subs	r7, r3, sl
   1298c:	movne	r7, #1
   12990:	cmp	r7, #0
   12994:	beq	12ecc <__assert_fail@plt+0x1d50>
   12998:	ldr	r3, [sp, #48]	; 0x30
   1299c:	cmp	r3, #0
   129a0:	beq	13238 <__assert_fail@plt+0x20bc>
   129a4:	ldr	r2, [sp, #68]	; 0x44
   129a8:	ldr	r1, [sp, #24]
   129ac:	cmp	r2, #1
   129b0:	mov	r3, r2
   129b4:	movls	r3, #0
   129b8:	movhi	r3, #1
   129bc:	cmn	r1, #1
   129c0:	movne	r3, #0
   129c4:	cmp	r3, #0
   129c8:	add	r4, sl, r2
   129cc:	beq	129dc <__assert_fail@plt+0x1860>
   129d0:	ldr	r0, [sp, #44]	; 0x2c
   129d4:	bl	11068 <strlen@plt>
   129d8:	str	r0, [sp, #24]
   129dc:	ldr	r3, [sp, #24]
   129e0:	cmp	r3, r4
   129e4:	ldr	r3, [sp, #44]	; 0x2c
   129e8:	add	r5, r3, sl
   129ec:	bcc	13240 <__assert_fail@plt+0x20c4>
   129f0:	mov	r0, r5
   129f4:	ldr	r2, [sp, #68]	; 0x44
   129f8:	ldr	r1, [sp, #72]	; 0x48
   129fc:	bl	10f48 <memcmp@plt>
   12a00:	cmp	r0, #0
   12a04:	bne	13240 <__assert_fail@plt+0x20c4>
   12a08:	ldr	r3, [sp, #40]	; 0x28
   12a0c:	cmp	r3, #0
   12a10:	bne	13bfc <__assert_fail@plt+0x2a80>
   12a14:	ldrb	r4, [r5]
   12a18:	cmp	r4, #126	; 0x7e
   12a1c:	ldrls	pc, [pc, r4, lsl #2]
   12a20:	b	13b38 <__assert_fail@plt+0x29bc>
   12a24:	strdeq	r3, [r1], -r8
   12a28:	andeq	r3, r1, r8, lsr fp
   12a2c:	andeq	r3, r1, r8, lsr fp
   12a30:	andeq	r3, r1, r8, lsr fp
   12a34:	andeq	r3, r1, r8, lsr fp
   12a38:	andeq	r3, r1, r8, lsr fp
   12a3c:	andeq	r3, r1, r8, lsr fp
   12a40:	andeq	r3, r1, r4, ror #1
   12a44:	ldrdeq	r3, [r1], -r0
   12a48:	andeq	r3, r1, ip, lsr #1
   12a4c:	andeq	r3, r1, ip, lsl #1
   12a50:	strheq	r3, [r1], -ip
   12a54:	strdeq	r2, [r1], -r4
   12a58:	andeq	r3, r1, r8, lsr #4
   12a5c:	andeq	r3, r1, r8, lsr fp
   12a60:	andeq	r3, r1, r8, lsr fp
   12a64:	andeq	r3, r1, r8, lsr fp
   12a68:	andeq	r3, r1, r8, lsr fp
   12a6c:	andeq	r3, r1, r8, lsr fp
   12a70:	andeq	r3, r1, r8, lsr fp
   12a74:	andeq	r3, r1, r8, lsr fp
   12a78:	andeq	r3, r1, r8, lsr fp
   12a7c:	andeq	r3, r1, r8, lsr fp
   12a80:	andeq	r3, r1, r8, lsr fp
   12a84:	andeq	r3, r1, r8, lsr fp
   12a88:	andeq	r3, r1, r8, lsr fp
   12a8c:	andeq	r3, r1, r8, lsr fp
   12a90:	andeq	r3, r1, r8, lsr fp
   12a94:	andeq	r3, r1, r8, lsr fp
   12a98:	andeq	r3, r1, r8, lsr fp
   12a9c:	andeq	r3, r1, r8, lsr fp
   12aa0:	andeq	r3, r1, r8, lsr fp
   12aa4:	andeq	r3, r1, r8, lsl r2
   12aa8:	strdeq	r3, [r1], -r8
   12aac:	strdeq	r3, [r1], -r8
   12ab0:	ldrdeq	r3, [r1], -r8
   12ab4:	strdeq	r3, [r1], -r8
   12ab8:	andeq	r2, r1, r4, ror #31
   12abc:	strdeq	r3, [r1], -r8
   12ac0:	andeq	r2, r1, r0, asr #31
   12ac4:	strdeq	r3, [r1], -r8
   12ac8:	strdeq	r3, [r1], -r8
   12acc:	strdeq	r3, [r1], -r8
   12ad0:	andeq	r2, r1, r4, ror #31
   12ad4:	andeq	r2, r1, r4, ror #31
   12ad8:	andeq	r2, r1, r4, ror #31
   12adc:	andeq	r2, r1, r4, ror #31
   12ae0:	andeq	r2, r1, r4, ror #31
   12ae4:	andeq	r2, r1, r4, ror #31
   12ae8:	andeq	r2, r1, r4, ror #31
   12aec:	andeq	r2, r1, r4, ror #31
   12af0:	andeq	r2, r1, r4, ror #31
   12af4:	andeq	r2, r1, r4, ror #31
   12af8:	andeq	r2, r1, r4, ror #31
   12afc:	andeq	r2, r1, r4, ror #31
   12b00:	andeq	r2, r1, r4, ror #31
   12b04:	andeq	r2, r1, r4, ror #31
   12b08:	andeq	r2, r1, r4, ror #31
   12b0c:	andeq	r2, r1, r4, ror #31
   12b10:	strdeq	r3, [r1], -r8
   12b14:	strdeq	r3, [r1], -r8
   12b18:	strdeq	r3, [r1], -r8
   12b1c:	strdeq	r3, [r1], -r8
   12b20:	andeq	r2, r1, r0, ror pc
   12b24:	andeq	r3, r1, r8, lsr fp
   12b28:	andeq	r2, r1, r4, ror #31
   12b2c:	andeq	r2, r1, r4, ror #31
   12b30:	andeq	r2, r1, r4, ror #31
   12b34:	andeq	r2, r1, r4, ror #31
   12b38:	andeq	r2, r1, r4, ror #31
   12b3c:	andeq	r2, r1, r4, ror #31
   12b40:	andeq	r2, r1, r4, ror #31
   12b44:	andeq	r2, r1, r4, ror #31
   12b48:	andeq	r2, r1, r4, ror #31
   12b4c:	andeq	r2, r1, r4, ror #31
   12b50:	andeq	r2, r1, r4, ror #31
   12b54:	andeq	r2, r1, r4, ror #31
   12b58:	andeq	r2, r1, r4, ror #31
   12b5c:	andeq	r2, r1, r4, ror #31
   12b60:	andeq	r2, r1, r4, ror #31
   12b64:	andeq	r2, r1, r4, ror #31
   12b68:	andeq	r2, r1, r4, ror #31
   12b6c:	andeq	r2, r1, r4, ror #31
   12b70:	andeq	r2, r1, r4, ror #31
   12b74:	andeq	r2, r1, r4, ror #31
   12b78:	andeq	r2, r1, r4, ror #31
   12b7c:	andeq	r2, r1, r4, ror #31
   12b80:	andeq	r2, r1, r4, ror #31
   12b84:	andeq	r2, r1, r4, ror #31
   12b88:	andeq	r2, r1, r4, ror #31
   12b8c:	andeq	r2, r1, r4, ror #31
   12b90:	strdeq	r3, [r1], -r8
   12b94:	andeq	r2, r1, ip, lsr pc
   12b98:	andeq	r2, r1, r4, ror #31
   12b9c:	strdeq	r3, [r1], -r8
   12ba0:	andeq	r2, r1, r4, ror #31
   12ba4:	strdeq	r3, [r1], -r8
   12ba8:	andeq	r2, r1, r4, ror #31
   12bac:	andeq	r2, r1, r4, ror #31
   12bb0:	andeq	r2, r1, r4, ror #31
   12bb4:	andeq	r2, r1, r4, ror #31
   12bb8:	andeq	r2, r1, r4, ror #31
   12bbc:	andeq	r2, r1, r4, ror #31
   12bc0:	andeq	r2, r1, r4, ror #31
   12bc4:	andeq	r2, r1, r4, ror #31
   12bc8:	andeq	r2, r1, r4, ror #31
   12bcc:	andeq	r2, r1, r4, ror #31
   12bd0:	andeq	r2, r1, r4, ror #31
   12bd4:	andeq	r2, r1, r4, ror #31
   12bd8:	andeq	r2, r1, r4, ror #31
   12bdc:	andeq	r2, r1, r4, ror #31
   12be0:	andeq	r2, r1, r4, ror #31
   12be4:	andeq	r2, r1, r4, ror #31
   12be8:	andeq	r2, r1, r4, ror #31
   12bec:	andeq	r2, r1, r4, ror #31
   12bf0:	andeq	r2, r1, r4, ror #31
   12bf4:	andeq	r2, r1, r4, ror #31
   12bf8:	andeq	r2, r1, r4, ror #31
   12bfc:	andeq	r2, r1, r4, ror #31
   12c00:	andeq	r2, r1, r4, ror #31
   12c04:	andeq	r2, r1, r4, ror #31
   12c08:	andeq	r2, r1, r4, ror #31
   12c0c:	andeq	r2, r1, r4, ror #31
   12c10:	strdeq	r2, [r1], -r4
   12c14:	strdeq	r3, [r1], -r8
   12c18:	strdeq	r2, [r1], -r4
   12c1c:	ldrdeq	r3, [r1], -r8
   12c20:	mov	r3, #1
   12c24:	str	r3, [sp, #40]	; 0x28
   12c28:	str	r3, [sp, #68]	; 0x44
   12c2c:	mov	r8, #0
   12c30:	ldr	r3, [pc, #4056]	; 13c10 <__assert_fail@plt+0x2a94>
   12c34:	str	r3, [sp, #72]	; 0x48
   12c38:	mov	r3, #2
   12c3c:	str	r3, [sp, #176]	; 0xb0
   12c40:	ldr	r1, [sp, #56]	; 0x38
   12c44:	mov	r2, r3
   12c48:	ldr	ip, [sp, #40]	; 0x28
   12c4c:	mov	lr, r3
   12c50:	b	1291c <__assert_fail@plt+0x17a0>
   12c54:	mov	r3, #1
   12c58:	str	r3, [sp, #56]	; 0x38
   12c5c:	str	r3, [sp, #68]	; 0x44
   12c60:	str	r3, [sp, #40]	; 0x28
   12c64:	ldr	r3, [pc, #4004]	; 13c10 <__assert_fail@plt+0x2a94>
   12c68:	mov	r8, #0
   12c6c:	str	r3, [sp, #72]	; 0x48
   12c70:	b	12c38 <__assert_fail@plt+0x1abc>
   12c74:	mov	r3, #1
   12c78:	str	r3, [sp, #56]	; 0x38
   12c7c:	str	r3, [sp, #68]	; 0x44
   12c80:	str	r3, [sp, #40]	; 0x28
   12c84:	ldr	r3, [pc, #3976]	; 13c14 <__assert_fail@plt+0x2a98>
   12c88:	mov	r8, #0
   12c8c:	str	r3, [sp, #72]	; 0x48
   12c90:	mov	r3, #5
   12c94:	b	12c3c <__assert_fail@plt+0x1ac0>
   12c98:	mov	r3, #0
   12c9c:	str	r3, [sp, #40]	; 0x28
   12ca0:	mov	r3, #1
   12ca4:	str	r3, [sp, #56]	; 0x38
   12ca8:	mov	r8, #0
   12cac:	mov	r1, r3
   12cb0:	ldr	r2, [sp, #176]	; 0xb0
   12cb4:	ldr	ip, [sp, #40]	; 0x28
   12cb8:	ldr	lr, [sp, #176]	; 0xb0
   12cbc:	b	1291c <__assert_fail@plt+0x17a0>
   12cc0:	ldr	r3, [sp, #176]	; 0xb0
   12cc4:	cmp	r3, #10
   12cc8:	beq	12d0c <__assert_fail@plt+0x1b90>
   12ccc:	mov	r2, #5
   12cd0:	ldr	r1, [pc, #3904]	; 13c18 <__assert_fail@plt+0x2a9c>
   12cd4:	mov	r0, #0
   12cd8:	bl	10f60 <dcgettext@plt>
   12cdc:	ldr	r2, [pc, #3892]	; 13c18 <__assert_fail@plt+0x2a9c>
   12ce0:	cmp	r0, r2
   12ce4:	str	r0, [sp, #188]	; 0xbc
   12ce8:	beq	13da4 <__assert_fail@plt+0x2c28>
   12cec:	mov	r2, #5
   12cf0:	ldr	r1, [pc, #3864]	; 13c10 <__assert_fail@plt+0x2a94>
   12cf4:	mov	r0, #0
   12cf8:	bl	10f60 <dcgettext@plt>
   12cfc:	ldr	r2, [pc, #3852]	; 13c10 <__assert_fail@plt+0x2a94>
   12d00:	cmp	r0, r2
   12d04:	str	r0, [sp, #192]	; 0xc0
   12d08:	beq	13d94 <__assert_fail@plt+0x2c18>
   12d0c:	ldr	r8, [sp, #40]	; 0x28
   12d10:	cmp	r8, #0
   12d14:	movne	r8, #0
   12d18:	bne	12d48 <__assert_fail@plt+0x1bcc>
   12d1c:	ldr	r3, [sp, #188]	; 0xbc
   12d20:	ldrb	r3, [r3]
   12d24:	cmp	r3, #0
   12d28:	beq	12d48 <__assert_fail@plt+0x1bcc>
   12d2c:	ldr	r2, [sp, #188]	; 0xbc
   12d30:	cmp	fp, r8
   12d34:	strbhi	r3, [r9, r8]
   12d38:	ldrb	r3, [r2, #1]!
   12d3c:	add	r8, r8, #1
   12d40:	cmp	r3, #0
   12d44:	bne	12d30 <__assert_fail@plt+0x1bb4>
   12d48:	ldr	r0, [sp, #192]	; 0xc0
   12d4c:	bl	11068 <strlen@plt>
   12d50:	ldr	r3, [sp, #192]	; 0xc0
   12d54:	ldr	r2, [sp, #176]	; 0xb0
   12d58:	str	r3, [sp, #72]	; 0x48
   12d5c:	mov	r3, #1
   12d60:	str	r3, [sp, #56]	; 0x38
   12d64:	mov	r1, r3
   12d68:	ldr	ip, [sp, #40]	; 0x28
   12d6c:	ldr	lr, [sp, #176]	; 0xb0
   12d70:	str	r0, [sp, #68]	; 0x44
   12d74:	b	1291c <__assert_fail@plt+0x17a0>
   12d78:	ldr	r3, [sp, #40]	; 0x28
   12d7c:	cmp	r3, #0
   12d80:	beq	13a28 <__assert_fail@plt+0x28ac>
   12d84:	mov	r3, #1
   12d88:	str	r3, [sp, #68]	; 0x44
   12d8c:	ldr	r3, [pc, #3708]	; 13c10 <__assert_fail@plt+0x2a94>
   12d90:	str	r3, [sp, #72]	; 0x48
   12d94:	mov	r8, #0
   12d98:	ldr	r1, [sp, #56]	; 0x38
   12d9c:	ldr	r2, [sp, #176]	; 0xb0
   12da0:	ldr	ip, [sp, #40]	; 0x28
   12da4:	ldr	lr, [sp, #176]	; 0xb0
   12da8:	b	1291c <__assert_fail@plt+0x17a0>
   12dac:	ldr	r3, [sp, #40]	; 0x28
   12db0:	cmp	r3, #0
   12db4:	beq	13aac <__assert_fail@plt+0x2930>
   12db8:	str	r3, [sp, #56]	; 0x38
   12dbc:	mov	r3, #1
   12dc0:	str	r3, [sp, #68]	; 0x44
   12dc4:	ldr	r3, [pc, #3656]	; 13c14 <__assert_fail@plt+0x2a98>
   12dc8:	b	12d90 <__assert_fail@plt+0x1c14>
   12dcc:	ldr	r3, [sp, #40]	; 0x28
   12dd0:	cmp	r3, #0
   12dd4:	mov	r3, #1
   12dd8:	streq	r3, [sp, #56]	; 0x38
   12ddc:	beq	13a28 <__assert_fail@plt+0x28ac>
   12de0:	str	r3, [sp, #68]	; 0x44
   12de4:	ldr	r3, [pc, #3620]	; 13c10 <__assert_fail@plt+0x2a94>
   12de8:	mov	r8, #0
   12dec:	str	r3, [sp, #72]	; 0x48
   12df0:	b	12c38 <__assert_fail@plt+0x1abc>
   12df4:	ldr	r3, [sp, #24]
   12df8:	ldr	r6, [sp, #48]	; 0x30
   12dfc:	cmn	r3, #1
   12e00:	beq	1345c <__assert_fail@plt+0x22e0>
   12e04:	subs	r3, r3, #1
   12e08:	movne	r3, #1
   12e0c:	cmp	r3, #0
   12e10:	beq	131dc <__assert_fail@plt+0x2060>
   12e14:	ldr	r1, [sp, #52]	; 0x34
   12e18:	mov	r7, r3
   12e1c:	mov	r3, #0
   12e20:	str	r3, [sp, #32]
   12e24:	ldr	r3, [sp, #60]	; 0x3c
   12e28:	orr	r2, r1, r3
   12e2c:	ldr	r3, [sp, #40]	; 0x28
   12e30:	eor	r2, r2, #1
   12e34:	orr	r2, r3, r2
   12e38:	tst	r2, #255	; 0xff
   12e3c:	bne	13760 <__assert_fail@plt+0x25e4>
   12e40:	cmp	r6, #0
   12e44:	bne	13020 <__assert_fail@plt+0x1ea4>
   12e48:	ldr	r3, [sp, #36]	; 0x24
   12e4c:	add	sl, sl, #1
   12e50:	and	r3, r3, r7
   12e54:	uxtb	r6, r3
   12e58:	cmp	r6, #0
   12e5c:	beq	12e88 <__assert_fail@plt+0x1d0c>
   12e60:	cmp	fp, r8
   12e64:	movhi	r3, #39	; 0x27
   12e68:	strbhi	r3, [r9, r8]
   12e6c:	add	r3, r8, #1
   12e70:	cmp	fp, r3
   12e74:	movhi	r2, #39	; 0x27
   12e78:	add	r8, r8, #2
   12e7c:	strbhi	r2, [r9, r3]
   12e80:	mov	r3, #0
   12e84:	str	r3, [sp, #36]	; 0x24
   12e88:	ldr	r2, [sp, #32]
   12e8c:	cmp	r8, fp
   12e90:	ldr	r3, [sp, #28]
   12e94:	strbcc	r4, [r9, r8]
   12e98:	cmp	r2, #0
   12e9c:	moveq	r3, #0
   12ea0:	str	r3, [sp, #28]
   12ea4:	ldr	r3, [sp, #24]
   12ea8:	add	r8, r8, #1
   12eac:	cmn	r3, #1
   12eb0:	bne	12988 <__assert_fail@plt+0x180c>
   12eb4:	ldr	r3, [sp, #44]	; 0x2c
   12eb8:	ldrb	r3, [r3, sl]
   12ebc:	adds	r7, r3, #0
   12ec0:	movne	r7, #1
   12ec4:	cmp	r7, #0
   12ec8:	bne	12998 <__assert_fail@plt+0x181c>
   12ecc:	ldr	r3, [sp, #64]	; 0x40
   12ed0:	cmp	r8, #0
   12ed4:	movne	r3, #0
   12ed8:	andeq	r3, r3, #1
   12edc:	cmp	r3, #0
   12ee0:	str	r3, [sp, #64]	; 0x40
   12ee4:	bne	13988 <__assert_fail@plt+0x280c>
   12ee8:	ldr	r3, [sp, #40]	; 0x28
   12eec:	ldr	r2, [sp, #52]	; 0x34
   12ef0:	eor	r3, r3, #1
   12ef4:	ands	r2, r2, r3
   12ef8:	beq	13db4 <__assert_fail@plt+0x2c38>
   12efc:	ldr	r3, [sp, #76]	; 0x4c
   12f00:	cmp	r3, #0
   12f04:	beq	13d84 <__assert_fail@plt+0x2c08>
   12f08:	ldr	r3, [sp, #28]
   12f0c:	cmp	r3, #0
   12f10:	bne	13d40 <__assert_fail@plt+0x2bc4>
   12f14:	ldr	r2, [sp, #84]	; 0x54
   12f18:	clz	r3, fp
   12f1c:	cmp	r2, #0
   12f20:	lsr	r3, r3, #5
   12f24:	moveq	r3, #0
   12f28:	cmp	r3, #0
   12f2c:	beq	13ce0 <__assert_fail@plt+0x2b64>
   12f30:	mov	fp, r2
   12f34:	str	r3, [sp, #76]	; 0x4c
   12f38:	b	128c4 <__assert_fail@plt+0x1748>
   12f3c:	ldr	r3, [sp, #176]	; 0xb0
   12f40:	ldr	r6, [sp, #48]	; 0x30
   12f44:	cmp	r3, #2
   12f48:	beq	13480 <__assert_fail@plt+0x2304>
   12f4c:	ldr	r3, [sp, #88]	; 0x58
   12f50:	cmp	r3, #0
   12f54:	beq	13a04 <__assert_fail@plt+0x2888>
   12f58:	mov	r3, #0
   12f5c:	add	sl, sl, #1
   12f60:	ldr	r6, [sp, #36]	; 0x24
   12f64:	str	r3, [sp, #32]
   12f68:	mov	r4, #92	; 0x5c
   12f6c:	b	12e58 <__assert_fail@plt+0x1cdc>
   12f70:	ldr	r3, [sp, #176]	; 0xb0
   12f74:	ldr	r6, [sp, #48]	; 0x30
   12f78:	cmp	r3, #2
   12f7c:	beq	134b0 <__assert_fail@plt+0x2334>
   12f80:	cmp	r3, #5
   12f84:	bne	13a14 <__assert_fail@plt+0x2898>
   12f88:	ldr	r3, [sp, #100]	; 0x64
   12f8c:	cmp	r3, #0
   12f90:	beq	13a78 <__assert_fail@plt+0x28fc>
   12f94:	ldr	r2, [sp, #24]
   12f98:	add	r3, sl, #2
   12f9c:	cmp	r2, r3
   12fa0:	bls	12fb0 <__assert_fail@plt+0x1e34>
   12fa4:	ldrb	r4, [r5, #1]
   12fa8:	cmp	r4, #63	; 0x3f
   12fac:	beq	13c20 <__assert_fail@plt+0x2aa4>
   12fb0:	mov	r1, #0
   12fb4:	str	r1, [sp, #32]
   12fb8:	mov	r4, #63	; 0x3f
   12fbc:	b	12e24 <__assert_fail@plt+0x1ca8>
   12fc0:	ldr	r3, [sp, #176]	; 0xb0
   12fc4:	ldr	r6, [sp, #48]	; 0x30
   12fc8:	cmp	r3, #2
   12fcc:	beq	134dc <__assert_fail@plt+0x2360>
   12fd0:	str	r7, [sp, #32]
   12fd4:	str	r7, [sp, #76]	; 0x4c
   12fd8:	mov	r1, #0
   12fdc:	mov	r4, #39	; 0x27
   12fe0:	b	12e24 <__assert_fail@plt+0x1ca8>
   12fe4:	ldr	r6, [sp, #48]	; 0x30
   12fe8:	ldr	r1, [sp, #52]	; 0x34
   12fec:	str	r7, [sp, #32]
   12ff0:	b	12e24 <__assert_fail@plt+0x1ca8>
   12ff4:	ldr	r6, [sp, #48]	; 0x30
   12ff8:	ldr	r1, [sp, #52]	; 0x34
   12ffc:	mov	r4, #12
   13000:	mov	r3, #102	; 0x66
   13004:	ldr	r2, [sp, #56]	; 0x38
   13008:	cmp	r2, #0
   1300c:	streq	r2, [sp, #32]
   13010:	beq	12e24 <__assert_fail@plt+0x1ca8>
   13014:	mov	r4, r3
   13018:	mov	r3, #0
   1301c:	str	r3, [sp, #32]
   13020:	ldr	r3, [sp, #40]	; 0x28
   13024:	cmp	r3, #0
   13028:	bne	13798 <__assert_fail@plt+0x261c>
   1302c:	ldr	r3, [sp, #36]	; 0x24
   13030:	eor	r3, r3, #1
   13034:	and	r3, r3, r1
   13038:	ands	r3, r3, #255	; 0xff
   1303c:	beq	13074 <__assert_fail@plt+0x1ef8>
   13040:	cmp	fp, r8
   13044:	movhi	r2, #39	; 0x27
   13048:	strbhi	r2, [r9, r8]
   1304c:	add	r2, r8, #1
   13050:	cmp	fp, r2
   13054:	movhi	r1, #36	; 0x24
   13058:	strbhi	r1, [r9, r2]
   1305c:	add	r2, r8, #2
   13060:	cmp	fp, r2
   13064:	add	r8, r8, #3
   13068:	movhi	r1, #39	; 0x27
   1306c:	strbhi	r1, [r9, r2]
   13070:	str	r3, [sp, #36]	; 0x24
   13074:	cmp	fp, r8
   13078:	movhi	r3, #92	; 0x5c
   1307c:	strbhi	r3, [r9, r8]
   13080:	add	sl, sl, #1
   13084:	add	r8, r8, #1
   13088:	b	12e88 <__assert_fail@plt+0x1d0c>
   1308c:	ldr	r6, [sp, #48]	; 0x30
   13090:	mov	r4, #10
   13094:	mov	r3, #110	; 0x6e
   13098:	ldr	r2, [sp, #64]	; 0x40
   1309c:	cmp	r2, #0
   130a0:	bne	13b20 <__assert_fail@plt+0x29a4>
   130a4:	ldr	r1, [sp, #52]	; 0x34
   130a8:	b	13004 <__assert_fail@plt+0x1e88>
   130ac:	ldr	r6, [sp, #48]	; 0x30
   130b0:	ldr	r1, [sp, #52]	; 0x34
   130b4:	mov	r3, #116	; 0x74
   130b8:	b	13004 <__assert_fail@plt+0x1e88>
   130bc:	ldr	r6, [sp, #48]	; 0x30
   130c0:	ldr	r1, [sp, #52]	; 0x34
   130c4:	mov	r4, #11
   130c8:	mov	r3, #118	; 0x76
   130cc:	b	13004 <__assert_fail@plt+0x1e88>
   130d0:	ldr	r6, [sp, #48]	; 0x30
   130d4:	ldr	r1, [sp, #52]	; 0x34
   130d8:	mov	r4, #8
   130dc:	mov	r3, #98	; 0x62
   130e0:	b	13004 <__assert_fail@plt+0x1e88>
   130e4:	ldr	r6, [sp, #48]	; 0x30
   130e8:	ldr	r1, [sp, #52]	; 0x34
   130ec:	mov	r4, #7
   130f0:	mov	r3, #97	; 0x61
   130f4:	b	13004 <__assert_fail@plt+0x1e88>
   130f8:	ldr	r3, [sp, #56]	; 0x38
   130fc:	ldr	r6, [sp, #48]	; 0x30
   13100:	cmp	r3, #0
   13104:	beq	135c8 <__assert_fail@plt+0x244c>
   13108:	ldr	r3, [sp, #40]	; 0x28
   1310c:	cmp	r3, #0
   13110:	bne	13bfc <__assert_fail@plt+0x2a80>
   13114:	ldr	r3, [sp, #36]	; 0x24
   13118:	ldr	r2, [sp, #52]	; 0x34
   1311c:	eor	r3, r3, #1
   13120:	ands	r3, r2, r3
   13124:	moveq	r2, r8
   13128:	beq	13160 <__assert_fail@plt+0x1fe4>
   1312c:	cmp	fp, r8
   13130:	movhi	r2, #39	; 0x27
   13134:	strbhi	r2, [r9, r8]
   13138:	add	r2, r8, #1
   1313c:	cmp	fp, r2
   13140:	movhi	r1, #36	; 0x24
   13144:	strbhi	r1, [r9, r2]
   13148:	add	r2, r8, #2
   1314c:	cmp	fp, r2
   13150:	movhi	r1, #39	; 0x27
   13154:	strbhi	r1, [r9, r2]
   13158:	add	r2, r8, #3
   1315c:	str	r3, [sp, #36]	; 0x24
   13160:	cmp	fp, r2
   13164:	movhi	r3, #92	; 0x5c
   13168:	strbhi	r3, [r9, r2]
   1316c:	ldr	r3, [sp, #92]	; 0x5c
   13170:	add	r8, r2, #1
   13174:	cmp	r3, #0
   13178:	beq	13afc <__assert_fail@plt+0x2980>
   1317c:	ldr	r1, [sp, #24]
   13180:	add	r3, sl, #1
   13184:	cmp	r1, r3
   13188:	bls	131c0 <__assert_fail@plt+0x2044>
   1318c:	ldr	r1, [sp, #44]	; 0x2c
   13190:	ldrb	r3, [r1, r3]
   13194:	sub	r3, r3, #48	; 0x30
   13198:	cmp	r3, #9
   1319c:	bhi	131c0 <__assert_fail@plt+0x2044>
   131a0:	cmp	fp, r8
   131a4:	movhi	r3, #48	; 0x30
   131a8:	strbhi	r3, [r9, r8]
   131ac:	add	r3, r2, #2
   131b0:	cmp	fp, r3
   131b4:	add	r8, r2, #3
   131b8:	movhi	r1, #48	; 0x30
   131bc:	strbhi	r1, [r9, r3]
   131c0:	ldr	r3, [sp, #40]	; 0x28
   131c4:	ldr	r1, [sp, #52]	; 0x34
   131c8:	mov	r7, r3
   131cc:	str	r3, [sp, #32]
   131d0:	mov	r4, #48	; 0x30
   131d4:	b	12e24 <__assert_fail@plt+0x1ca8>
   131d8:	ldr	r6, [sp, #48]	; 0x30
   131dc:	cmp	sl, #0
   131e0:	streq	r7, [sp, #32]
   131e4:	beq	13204 <__assert_fail@plt+0x2088>
   131e8:	mov	r3, #0
   131ec:	ldr	r1, [sp, #52]	; 0x34
   131f0:	str	r3, [sp, #32]
   131f4:	b	12e24 <__assert_fail@plt+0x1ca8>
   131f8:	ldr	r6, [sp, #48]	; 0x30
   131fc:	mov	r3, #0
   13200:	str	r3, [sp, #32]
   13204:	ldr	r3, [sp, #64]	; 0x40
   13208:	cmp	r3, #0
   1320c:	bne	13988 <__assert_fail@plt+0x280c>
   13210:	ldr	r1, [sp, #52]	; 0x34
   13214:	b	12e24 <__assert_fail@plt+0x1ca8>
   13218:	ldr	r3, [sp, #48]	; 0x30
   1321c:	mov	r6, r3
   13220:	str	r3, [sp, #32]
   13224:	b	13204 <__assert_fail@plt+0x2088>
   13228:	ldr	r6, [sp, #48]	; 0x30
   1322c:	mov	r4, #13
   13230:	mov	r3, #114	; 0x72
   13234:	b	13098 <__assert_fail@plt+0x1f1c>
   13238:	ldr	r3, [sp, #44]	; 0x2c
   1323c:	add	r5, r3, sl
   13240:	ldrb	r4, [r5]
   13244:	cmp	r4, #126	; 0x7e
   13248:	ldrls	pc, [pc, r4, lsl #2]
   1324c:	b	135e8 <__assert_fail@plt+0x246c>
   13250:			; <UNDEFINED> instruction: 0x000135b8
   13254:	andeq	r3, r1, r8, ror #11
   13258:	andeq	r3, r1, r8, ror #11
   1325c:	andeq	r3, r1, r8, ror #11
   13260:	andeq	r3, r1, r8, ror #11
   13264:	andeq	r3, r1, r8, ror #11
   13268:	andeq	r3, r1, r8, ror #11
   1326c:			; <UNDEFINED> instruction: 0x000135b0
   13270:	andeq	r3, r1, r8, lsr #11
   13274:	muleq	r1, ip, r5
   13278:	muleq	r1, r4, r5
   1327c:	andeq	r3, r1, ip, lsl #11
   13280:	andeq	r3, r1, r4, lsl #11
   13284:	andeq	r3, r1, ip, ror r5
   13288:	andeq	r3, r1, r8, ror #11
   1328c:	andeq	r3, r1, r8, ror #11
   13290:	andeq	r3, r1, r8, ror #11
   13294:	andeq	r3, r1, r8, ror #11
   13298:	andeq	r3, r1, r8, ror #11
   1329c:	andeq	r3, r1, r8, ror #11
   132a0:	andeq	r3, r1, r8, ror #11
   132a4:	andeq	r3, r1, r8, ror #11
   132a8:	andeq	r3, r1, r8, ror #11
   132ac:	andeq	r3, r1, r8, ror #11
   132b0:	andeq	r3, r1, r8, ror #11
   132b4:	andeq	r3, r1, r8, ror #11
   132b8:	andeq	r3, r1, r8, ror #11
   132bc:	andeq	r3, r1, r8, ror #11
   132c0:	andeq	r3, r1, r8, ror #11
   132c4:	andeq	r3, r1, r8, ror #11
   132c8:	andeq	r3, r1, r8, ror #11
   132cc:	andeq	r3, r1, r8, ror #11
   132d0:	andeq	r3, r1, r0, ror r5
   132d4:	andeq	r3, r1, r8, ror #10
   132d8:	andeq	r3, r1, r8, ror #10
   132dc:	andeq	r3, r1, r0, ror #10
   132e0:	andeq	r3, r1, r8, ror #10
   132e4:	andeq	r3, r1, r8, asr r5
   132e8:	andeq	r3, r1, r8, ror #10
   132ec:	andeq	r3, r1, ip, asr #9
   132f0:	andeq	r3, r1, r8, ror #10
   132f4:	andeq	r3, r1, r8, ror #10
   132f8:	andeq	r3, r1, r8, ror #10
   132fc:	andeq	r3, r1, r8, asr r5
   13300:	andeq	r3, r1, r8, asr r5
   13304:	andeq	r3, r1, r8, asr r5
   13308:	andeq	r3, r1, r8, asr r5
   1330c:	andeq	r3, r1, r8, asr r5
   13310:	andeq	r3, r1, r8, asr r5
   13314:	andeq	r3, r1, r8, asr r5
   13318:	andeq	r3, r1, r8, asr r5
   1331c:	andeq	r3, r1, r8, asr r5
   13320:	andeq	r3, r1, r8, asr r5
   13324:	andeq	r3, r1, r8, asr r5
   13328:	andeq	r3, r1, r8, asr r5
   1332c:	andeq	r3, r1, r8, asr r5
   13330:	andeq	r3, r1, r8, asr r5
   13334:	andeq	r3, r1, r8, asr r5
   13338:	andeq	r3, r1, r8, asr r5
   1333c:	andeq	r3, r1, r8, ror #10
   13340:	andeq	r3, r1, r8, ror #10
   13344:	andeq	r3, r1, r8, ror #10
   13348:	andeq	r3, r1, r8, ror #10
   1334c:	andeq	r3, r1, r0, lsr #9
   13350:	andeq	r3, r1, r8, ror #11
   13354:	andeq	r3, r1, r8, asr r5
   13358:	andeq	r3, r1, r8, asr r5
   1335c:	andeq	r3, r1, r8, asr r5
   13360:	andeq	r3, r1, r8, asr r5
   13364:	andeq	r3, r1, r8, asr r5
   13368:	andeq	r3, r1, r8, asr r5
   1336c:	andeq	r3, r1, r8, asr r5
   13370:	andeq	r3, r1, r8, asr r5
   13374:	andeq	r3, r1, r8, asr r5
   13378:	andeq	r3, r1, r8, asr r5
   1337c:	andeq	r3, r1, r8, asr r5
   13380:	andeq	r3, r1, r8, asr r5
   13384:	andeq	r3, r1, r8, asr r5
   13388:	andeq	r3, r1, r8, asr r5
   1338c:	andeq	r3, r1, r8, asr r5
   13390:	andeq	r3, r1, r8, asr r5
   13394:	andeq	r3, r1, r8, asr r5
   13398:	andeq	r3, r1, r8, asr r5
   1339c:	andeq	r3, r1, r8, asr r5
   133a0:	andeq	r3, r1, r8, asr r5
   133a4:	andeq	r3, r1, r8, asr r5
   133a8:	andeq	r3, r1, r8, asr r5
   133ac:	andeq	r3, r1, r8, asr r5
   133b0:	andeq	r3, r1, r8, asr r5
   133b4:	andeq	r3, r1, r8, asr r5
   133b8:	andeq	r3, r1, r8, asr r5
   133bc:	andeq	r3, r1, r8, ror #10
   133c0:	andeq	r3, r1, r0, ror r4
   133c4:	andeq	r3, r1, r8, asr r5
   133c8:	andeq	r3, r1, r8, ror #10
   133cc:	andeq	r3, r1, r8, asr r5
   133d0:	andeq	r3, r1, r8, ror #10
   133d4:	andeq	r3, r1, r8, asr r5
   133d8:	andeq	r3, r1, r8, asr r5
   133dc:	andeq	r3, r1, r8, asr r5
   133e0:	andeq	r3, r1, r8, asr r5
   133e4:	andeq	r3, r1, r8, asr r5
   133e8:	andeq	r3, r1, r8, asr r5
   133ec:	andeq	r3, r1, r8, asr r5
   133f0:	andeq	r3, r1, r8, asr r5
   133f4:	andeq	r3, r1, r8, asr r5
   133f8:	andeq	r3, r1, r8, asr r5
   133fc:	andeq	r3, r1, r8, asr r5
   13400:	andeq	r3, r1, r8, asr r5
   13404:	andeq	r3, r1, r8, asr r5
   13408:	andeq	r3, r1, r8, asr r5
   1340c:	andeq	r3, r1, r8, asr r5
   13410:	andeq	r3, r1, r8, asr r5
   13414:	andeq	r3, r1, r8, asr r5
   13418:	andeq	r3, r1, r8, asr r5
   1341c:	andeq	r3, r1, r8, asr r5
   13420:	andeq	r3, r1, r8, asr r5
   13424:	andeq	r3, r1, r8, asr r5
   13428:	andeq	r3, r1, r8, asr r5
   1342c:	andeq	r3, r1, r8, asr r5
   13430:	andeq	r3, r1, r8, asr r5
   13434:	andeq	r3, r1, r8, asr r5
   13438:	andeq	r3, r1, r8, asr r5
   1343c:	andeq	r3, r1, ip, asr #8
   13440:	andeq	r3, r1, r8, ror #10
   13444:	andeq	r3, r1, ip, asr #8
   13448:	andeq	r3, r1, r0, ror #10
   1344c:	ldr	r3, [sp, #24]
   13450:	mov	r6, #0
   13454:	cmn	r3, #1
   13458:	bne	12e04 <__assert_fail@plt+0x1c88>
   1345c:	ldr	r3, [sp, #44]	; 0x2c
   13460:	ldrb	r3, [r3, #1]
   13464:	adds	r3, r3, #0
   13468:	movne	r3, #1
   1346c:	b	12e0c <__assert_fail@plt+0x1c90>
   13470:	ldr	r3, [sp, #176]	; 0xb0
   13474:	mov	r6, #0
   13478:	cmp	r3, #2
   1347c:	bne	12f4c <__assert_fail@plt+0x1dd0>
   13480:	ldr	r3, [sp, #64]	; 0x40
   13484:	cmp	r3, #0
   13488:	bne	13cc0 <__assert_fail@plt+0x2b44>
   1348c:	add	sl, sl, #1
   13490:	ldr	r6, [sp, #36]	; 0x24
   13494:	str	r3, [sp, #32]
   13498:	mov	r4, #92	; 0x5c
   1349c:	b	12e58 <__assert_fail@plt+0x1cdc>
   134a0:	ldr	r3, [sp, #176]	; 0xb0
   134a4:	mov	r6, #0
   134a8:	cmp	r3, #2
   134ac:	bne	12f80 <__assert_fail@plt+0x1e04>
   134b0:	ldr	r3, [sp, #40]	; 0x28
   134b4:	cmp	r3, #0
   134b8:	bne	1379c <__assert_fail@plt+0x2620>
   134bc:	mov	r1, r7
   134c0:	str	r3, [sp, #32]
   134c4:	mov	r4, #63	; 0x3f
   134c8:	b	12e24 <__assert_fail@plt+0x1ca8>
   134cc:	ldr	r3, [sp, #176]	; 0xb0
   134d0:	mov	r6, #0
   134d4:	cmp	r3, #2
   134d8:	bne	12fd0 <__assert_fail@plt+0x1e54>
   134dc:	ldr	r3, [sp, #64]	; 0x40
   134e0:	cmp	r3, #0
   134e4:	bne	13cc0 <__assert_fail@plt+0x2b44>
   134e8:	ldr	r2, [sp, #84]	; 0x54
   134ec:	adds	r3, fp, #0
   134f0:	movne	r3, #1
   134f4:	cmp	r2, #0
   134f8:	movne	r3, #0
   134fc:	cmp	r3, #0
   13500:	strne	fp, [sp, #84]	; 0x54
   13504:	movne	fp, #0
   13508:	bne	13538 <__assert_fail@plt+0x23bc>
   1350c:	cmp	fp, r8
   13510:	movhi	r3, #39	; 0x27
   13514:	strbhi	r3, [r9, r8]
   13518:	add	r3, r8, #1
   1351c:	cmp	fp, r3
   13520:	movhi	r2, #92	; 0x5c
   13524:	strbhi	r2, [r9, r3]
   13528:	add	r3, r8, #2
   1352c:	cmp	fp, r3
   13530:	movhi	r2, #39	; 0x27
   13534:	strbhi	r2, [r9, r3]
   13538:	ldr	r3, [sp, #64]	; 0x40
   1353c:	add	r8, r8, #3
   13540:	mov	r1, r7
   13544:	str	r7, [sp, #32]
   13548:	str	r7, [sp, #76]	; 0x4c
   1354c:	str	r3, [sp, #36]	; 0x24
   13550:	mov	r4, #39	; 0x27
   13554:	b	12e24 <__assert_fail@plt+0x1ca8>
   13558:	mov	r6, #0
   1355c:	b	12fe8 <__assert_fail@plt+0x1e6c>
   13560:	mov	r6, #0
   13564:	b	131dc <__assert_fail@plt+0x2060>
   13568:	mov	r6, #0
   1356c:	b	131fc <__assert_fail@plt+0x2080>
   13570:	str	r7, [sp, #32]
   13574:	mov	r6, #0
   13578:	b	13204 <__assert_fail@plt+0x2088>
   1357c:	mov	r6, #0
   13580:	b	1322c <__assert_fail@plt+0x20b0>
   13584:	mov	r6, #0
   13588:	b	12ff8 <__assert_fail@plt+0x1e7c>
   1358c:	mov	r6, #0
   13590:	b	130c0 <__assert_fail@plt+0x1f44>
   13594:	mov	r6, #0
   13598:	b	13090 <__assert_fail@plt+0x1f14>
   1359c:	mov	r6, #0
   135a0:	mov	r3, #116	; 0x74
   135a4:	b	13098 <__assert_fail@plt+0x1f1c>
   135a8:	mov	r6, #0
   135ac:	b	130d4 <__assert_fail@plt+0x1f58>
   135b0:	mov	r6, #0
   135b4:	b	130e8 <__assert_fail@plt+0x1f6c>
   135b8:	ldr	r3, [sp, #56]	; 0x38
   135bc:	mov	r6, #0
   135c0:	cmp	r3, #0
   135c4:	bne	13108 <__assert_fail@plt+0x1f8c>
   135c8:	ldr	r3, [sp, #96]	; 0x60
   135cc:	cmp	r3, #0
   135d0:	addne	sl, sl, #1
   135d4:	bne	1297c <__assert_fail@plt+0x1800>
   135d8:	ldr	r1, [sp, #52]	; 0x34
   135dc:	str	r3, [sp, #32]
   135e0:	mov	r4, r3
   135e4:	b	12e24 <__assert_fail@plt+0x1ca8>
   135e8:	mov	r6, #0
   135ec:	ldr	r3, [sp, #80]	; 0x50
   135f0:	cmp	r3, #1
   135f4:	bne	137e4 <__assert_fail@plt+0x2668>
   135f8:	bl	11044 <__ctype_b_loc@plt>
   135fc:	ldr	r2, [sp, #80]	; 0x50
   13600:	sxth	r3, r4
   13604:	mov	r1, r2
   13608:	lsl	r3, r3, #1
   1360c:	ldr	r2, [r0]
   13610:	ldrh	r3, [r2, r3]
   13614:	and	r3, r3, #16384	; 0x4000
   13618:	cmp	r3, #0
   1361c:	movne	r3, #1
   13620:	moveq	r3, #0
   13624:	str	r3, [sp, #32]
   13628:	moveq	r3, #1
   1362c:	movne	r3, #0
   13630:	ldr	r2, [sp, #56]	; 0x38
   13634:	and	r3, r3, r2
   13638:	ands	r3, r3, #255	; 0xff
   1363c:	beq	13210 <__assert_fail@plt+0x2094>
   13640:	add	r1, sl, r1
   13644:	mov	r0, #0
   13648:	ldr	r7, [sp, #40]	; 0x28
   1364c:	ldr	r2, [sp, #36]	; 0x24
   13650:	ldr	lr, [sp, #52]	; 0x34
   13654:	b	13704 <__assert_fail@plt+0x2588>
   13658:	cmp	r7, #0
   1365c:	bne	13a58 <__assert_fail@plt+0x28dc>
   13660:	eor	r0, r2, #1
   13664:	ands	r0, lr, r0
   13668:	beq	136a0 <__assert_fail@plt+0x2524>
   1366c:	cmp	fp, r8
   13670:	movhi	r2, #39	; 0x27
   13674:	strbhi	r2, [r9, r8]
   13678:	add	r2, r8, #1
   1367c:	cmp	fp, r2
   13680:	movhi	ip, #36	; 0x24
   13684:	strbhi	ip, [r9, r2]
   13688:	add	r2, r8, #2
   1368c:	cmp	fp, r2
   13690:	movhi	ip, #39	; 0x27
   13694:	strbhi	ip, [r9, r2]
   13698:	add	r8, r8, #3
   1369c:	mov	r2, r0
   136a0:	cmp	fp, r8
   136a4:	movhi	r0, #92	; 0x5c
   136a8:	strbhi	r0, [r9, r8]
   136ac:	add	r0, r8, #1
   136b0:	cmp	fp, r0
   136b4:	lsrhi	ip, r4, #6
   136b8:	addhi	ip, ip, #48	; 0x30
   136bc:	strbhi	ip, [r9, r0]
   136c0:	add	ip, r8, #2
   136c4:	cmp	fp, ip
   136c8:	lsrhi	r0, r4, #3
   136cc:	andhi	r0, r0, #7
   136d0:	addhi	r0, r0, #48	; 0x30
   136d4:	add	sl, sl, #1
   136d8:	strbhi	r0, [r9, ip]
   136dc:	and	r4, r4, #7
   136e0:	cmp	sl, r1
   136e4:	add	r4, r4, #48	; 0x30
   136e8:	add	r8, r8, #3
   136ec:	bcs	13a70 <__assert_fail@plt+0x28f4>
   136f0:	mov	r0, r3
   136f4:	cmp	fp, r8
   136f8:	strbhi	r4, [r9, r8]
   136fc:	ldrb	r4, [r5, #1]!
   13700:	add	r8, r8, #1
   13704:	cmp	r3, #0
   13708:	bne	13658 <__assert_fail@plt+0x24dc>
   1370c:	cmp	r6, #0
   13710:	bne	137b4 <__assert_fail@plt+0x2638>
   13714:	eor	r6, r0, #1
   13718:	and	r6, r6, r2
   1371c:	add	sl, sl, #1
   13720:	cmp	r1, sl
   13724:	uxtb	r6, r6
   13728:	bls	137dc <__assert_fail@plt+0x2660>
   1372c:	cmp	r6, #0
   13730:	beq	136f4 <__assert_fail@plt+0x2578>
   13734:	cmp	fp, r8
   13738:	movhi	r2, #39	; 0x27
   1373c:	strbhi	r2, [r9, r8]
   13740:	add	r2, r8, #1
   13744:	cmp	fp, r2
   13748:	movhi	ip, #39	; 0x27
   1374c:	strbhi	ip, [r9, r2]
   13750:	add	r8, r8, #2
   13754:	mov	r6, r3
   13758:	mov	r2, r3
   1375c:	b	136f4 <__assert_fail@plt+0x2578>
   13760:	ldr	r3, [sp, #184]	; 0xb8
   13764:	cmp	r3, #0
   13768:	beq	12e40 <__assert_fail@plt+0x1cc4>
   1376c:	lsr	r2, r4, #5
   13770:	mov	r0, r3
   13774:	uxtb	r2, r2
   13778:	and	r3, r4, #31
   1377c:	ldr	r2, [r0, r2, lsl #2]
   13780:	lsr	r3, r2, r3
   13784:	tst	r3, #1
   13788:	beq	12e40 <__assert_fail@plt+0x1cc4>
   1378c:	ldr	r3, [sp, #40]	; 0x28
   13790:	cmp	r3, #0
   13794:	beq	1302c <__assert_fail@plt+0x1eb0>
   13798:	mov	r3, r1
   1379c:	str	r3, [sp, #64]	; 0x40
   137a0:	mov	sl, r9
   137a4:	ldr	r3, [sp, #56]	; 0x38
   137a8:	mov	r9, fp
   137ac:	ldr	r2, [sp, #64]	; 0x40
   137b0:	b	139a0 <__assert_fail@plt+0x2824>
   137b4:	cmp	fp, r8
   137b8:	eor	r6, r0, #1
   137bc:	movhi	ip, #92	; 0x5c
   137c0:	and	r6, r6, r2
   137c4:	add	sl, sl, #1
   137c8:	strbhi	ip, [r9, r8]
   137cc:	cmp	r1, sl
   137d0:	add	r8, r8, #1
   137d4:	uxtb	r6, r6
   137d8:	bhi	1372c <__assert_fail@plt+0x25b0>
   137dc:	str	r2, [sp, #36]	; 0x24
   137e0:	b	12e58 <__assert_fail@plt+0x1cdc>
   137e4:	ldr	r3, [sp, #24]
   137e8:	cmn	r3, #1
   137ec:	mov	r3, #0
   137f0:	str	r3, [sp, #128]	; 0x80
   137f4:	str	r3, [sp, #132]	; 0x84
   137f8:	beq	13aec <__assert_fail@plt+0x2970>
   137fc:	mov	r2, r7
   13800:	mov	r3, #0
   13804:	str	r7, [sp, #104]	; 0x68
   13808:	str	r5, [sp, #116]	; 0x74
   1380c:	mov	r7, r3
   13810:	mov	r5, r2
   13814:	str	r4, [sp, #32]
   13818:	str	r6, [sp, #108]	; 0x6c
   1381c:	str	r8, [sp, #112]	; 0x70
   13820:	ldr	r3, [sp, #44]	; 0x2c
   13824:	add	r6, sl, r7
   13828:	add	r4, r3, r6
   1382c:	ldr	r3, [sp, #24]
   13830:	mov	r1, r4
   13834:	sub	r2, r3, r6
   13838:	add	r0, sp, #124	; 0x7c
   1383c:	add	r3, sp, #128	; 0x80
   13840:	bl	18754 <__assert_fail@plt+0x75d8>
   13844:	subs	r8, r0, #0
   13848:	beq	13bd0 <__assert_fail@plt+0x2a54>
   1384c:	cmn	r8, #1
   13850:	beq	13ba8 <__assert_fail@plt+0x2a2c>
   13854:	cmn	r8, #2
   13858:	beq	13b40 <__assert_fail@plt+0x29c4>
   1385c:	ldr	r3, [sp, #64]	; 0x40
   13860:	cmp	r3, #0
   13864:	beq	13924 <__assert_fail@plt+0x27a8>
   13868:	cmp	r8, #1
   1386c:	beq	13924 <__assert_fail@plt+0x27a8>
   13870:	sub	r3, r8, #1
   13874:	add	r6, r3, r6
   13878:	ldr	r3, [sp, #44]	; 0x2c
   1387c:	add	r6, r3, r6
   13880:	ldrb	r3, [r4, #1]!
   13884:	sub	r3, r3, #91	; 0x5b
   13888:	cmp	r3, #33	; 0x21
   1388c:	ldrls	pc, [pc, r3, lsl #2]
   13890:	b	1391c <__assert_fail@plt+0x27a0>
   13894:	andeq	r3, r1, r8, lsl #19
   13898:	andeq	r3, r1, r8, lsl #19
   1389c:	andeq	r3, r1, ip, lsl r9
   138a0:	andeq	r3, r1, r8, lsl #19
   138a4:	andeq	r3, r1, ip, lsl r9
   138a8:	andeq	r3, r1, r8, lsl #19
   138ac:	andeq	r3, r1, ip, lsl r9
   138b0:	andeq	r3, r1, ip, lsl r9
   138b4:	andeq	r3, r1, ip, lsl r9
   138b8:	andeq	r3, r1, ip, lsl r9
   138bc:	andeq	r3, r1, ip, lsl r9
   138c0:	andeq	r3, r1, ip, lsl r9
   138c4:	andeq	r3, r1, ip, lsl r9
   138c8:	andeq	r3, r1, ip, lsl r9
   138cc:	andeq	r3, r1, ip, lsl r9
   138d0:	andeq	r3, r1, ip, lsl r9
   138d4:	andeq	r3, r1, ip, lsl r9
   138d8:	andeq	r3, r1, ip, lsl r9
   138dc:	andeq	r3, r1, ip, lsl r9
   138e0:	andeq	r3, r1, ip, lsl r9
   138e4:	andeq	r3, r1, ip, lsl r9
   138e8:	andeq	r3, r1, ip, lsl r9
   138ec:	andeq	r3, r1, ip, lsl r9
   138f0:	andeq	r3, r1, ip, lsl r9
   138f4:	andeq	r3, r1, ip, lsl r9
   138f8:	andeq	r3, r1, ip, lsl r9
   138fc:	andeq	r3, r1, ip, lsl r9
   13900:	andeq	r3, r1, ip, lsl r9
   13904:	andeq	r3, r1, ip, lsl r9
   13908:	andeq	r3, r1, ip, lsl r9
   1390c:	andeq	r3, r1, ip, lsl r9
   13910:	andeq	r3, r1, ip, lsl r9
   13914:	andeq	r3, r1, ip, lsl r9
   13918:	andeq	r3, r1, r8, lsl #19
   1391c:	cmp	r6, r4
   13920:	bne	13880 <__assert_fail@plt+0x2704>
   13924:	ldr	r0, [sp, #124]	; 0x7c
   13928:	bl	10f90 <iswprint@plt>
   1392c:	add	r7, r7, r8
   13930:	cmp	r0, #0
   13934:	add	r0, sp, #128	; 0x80
   13938:	moveq	r5, #0
   1393c:	bl	10f3c <mbsinit@plt>
   13940:	cmp	r0, #0
   13944:	beq	13820 <__assert_fail@plt+0x26a4>
   13948:	ldr	r4, [sp, #32]
   1394c:	str	r5, [sp, #32]
   13950:	ldr	r3, [sp, #32]
   13954:	mov	r1, r7
   13958:	eor	r3, r3, #1
   1395c:	ldr	r7, [sp, #104]	; 0x68
   13960:	ldr	r6, [sp, #108]	; 0x6c
   13964:	ldr	r8, [sp, #112]	; 0x70
   13968:	ldr	r5, [sp, #116]	; 0x74
   1396c:	uxtb	r3, r3
   13970:	cmp	r1, #1
   13974:	bls	13630 <__assert_fail@plt+0x24b4>
   13978:	ldr	r2, [sp, #56]	; 0x38
   1397c:	and	r3, r3, r2
   13980:	uxtb	r3, r3
   13984:	b	13640 <__assert_fail@plt+0x24c4>
   13988:	mov	r3, #2
   1398c:	str	r3, [sp, #176]	; 0xb0
   13990:	ldr	r2, [sp, #64]	; 0x40
   13994:	ldr	r3, [sp, #56]	; 0x38
   13998:	mov	sl, r9
   1399c:	mov	r9, fp
   139a0:	and	r3, r3, r2
   139a4:	tst	r3, #255	; 0xff
   139a8:	ldr	r3, [sp, #176]	; 0xb0
   139ac:	movne	r3, #4
   139b0:	str	r3, [sp, #176]	; 0xb0
   139b4:	ldr	r3, [sp, #180]	; 0xb4
   139b8:	mov	ip, #0
   139bc:	bic	r3, r3, #2
   139c0:	str	r3, [sp, #4]
   139c4:	ldr	r3, [sp, #192]	; 0xc0
   139c8:	ldr	r2, [sp, #44]	; 0x2c
   139cc:	str	r3, [sp, #16]
   139d0:	ldr	r3, [sp, #188]	; 0xbc
   139d4:	mov	r1, r9
   139d8:	str	r3, [sp, #12]
   139dc:	ldr	r3, [sp, #176]	; 0xb0
   139e0:	mov	r0, sl
   139e4:	str	r3, [sp]
   139e8:	str	ip, [sp, #8]
   139ec:	ldr	r3, [sp, #24]
   139f0:	bl	12850 <__assert_fail@plt+0x16d4>
   139f4:	mov	fp, r0
   139f8:	mov	r0, fp
   139fc:	add	sp, sp, #140	; 0x8c
   13a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a04:	mov	r4, #92	; 0x5c
   13a08:	mov	r1, #0
   13a0c:	mov	r3, r4
   13a10:	b	13004 <__assert_fail@plt+0x1e88>
   13a14:	mov	r3, #0
   13a18:	ldr	r1, [sp, #52]	; 0x34
   13a1c:	str	r3, [sp, #32]
   13a20:	mov	r4, #63	; 0x3f
   13a24:	b	12e24 <__assert_fail@plt+0x1ca8>
   13a28:	cmp	fp, #0
   13a2c:	beq	13a88 <__assert_fail@plt+0x290c>
   13a30:	mov	r3, #39	; 0x27
   13a34:	strb	r3, [r9]
   13a38:	mov	r3, #0
   13a3c:	str	r3, [sp, #40]	; 0x28
   13a40:	mov	r3, #1
   13a44:	str	r3, [sp, #68]	; 0x44
   13a48:	ldr	r3, [pc, #448]	; 13c10 <__assert_fail@plt+0x2a94>
   13a4c:	mov	r8, #1
   13a50:	str	r3, [sp, #72]	; 0x48
   13a54:	b	12c38 <__assert_fail@plt+0x1abc>
   13a58:	ldr	r3, [sp, #40]	; 0x28
   13a5c:	mov	sl, r9
   13a60:	str	r3, [sp, #56]	; 0x38
   13a64:	mov	r9, fp
   13a68:	ldr	r2, [sp, #64]	; 0x40
   13a6c:	b	139a0 <__assert_fail@plt+0x2824>
   13a70:	str	r2, [sp, #36]	; 0x24
   13a74:	b	12e88 <__assert_fail@plt+0x1d0c>
   13a78:	mov	r1, #0
   13a7c:	str	r3, [sp, #32]
   13a80:	mov	r4, #63	; 0x3f
   13a84:	b	12e24 <__assert_fail@plt+0x1ca8>
   13a88:	ldr	r3, [pc, #384]	; 13c10 <__assert_fail@plt+0x2a94>
   13a8c:	str	r3, [sp, #72]	; 0x48
   13a90:	mov	r3, #0
   13a94:	str	r3, [sp, #40]	; 0x28
   13a98:	mov	r3, #1
   13a9c:	str	r3, [sp, #68]	; 0x44
   13aa0:	mov	r8, r3
   13aa4:	b	12c38 <__assert_fail@plt+0x1abc>
   13aa8:	bl	11158 <abort@plt>
   13aac:	cmp	fp, #0
   13ab0:	beq	13b10 <__assert_fail@plt+0x2994>
   13ab4:	mov	r2, #1
   13ab8:	mov	r3, #34	; 0x22
   13abc:	strb	r3, [r9]
   13ac0:	mov	r8, r2
   13ac4:	mov	r3, r2
   13ac8:	str	r2, [sp, #68]	; 0x44
   13acc:	str	r3, [sp, #56]	; 0x38
   13ad0:	ldr	r3, [pc, #316]	; 13c14 <__assert_fail@plt+0x2a98>
   13ad4:	ldr	r1, [sp, #56]	; 0x38
   13ad8:	str	r3, [sp, #72]	; 0x48
   13adc:	ldr	r2, [sp, #176]	; 0xb0
   13ae0:	ldr	ip, [sp, #40]	; 0x28
   13ae4:	ldr	lr, [sp, #176]	; 0xb0
   13ae8:	b	1291c <__assert_fail@plt+0x17a0>
   13aec:	ldr	r0, [sp, #44]	; 0x2c
   13af0:	bl	11068 <strlen@plt>
   13af4:	str	r0, [sp, #24]
   13af8:	b	137fc <__assert_fail@plt+0x2680>
   13afc:	mov	r7, #0
   13b00:	ldr	r1, [sp, #52]	; 0x34
   13b04:	str	r3, [sp, #32]
   13b08:	mov	r4, #48	; 0x30
   13b0c:	b	12e24 <__assert_fail@plt+0x1ca8>
   13b10:	mov	r3, #1
   13b14:	str	r3, [sp, #68]	; 0x44
   13b18:	mov	r8, r3
   13b1c:	b	13acc <__assert_fail@plt+0x2950>
   13b20:	mov	r3, #2
   13b24:	mov	sl, r9
   13b28:	str	r3, [sp, #176]	; 0xb0
   13b2c:	mov	r9, fp
   13b30:	ldr	r3, [sp, #56]	; 0x38
   13b34:	b	139a0 <__assert_fail@plt+0x2824>
   13b38:	ldr	r6, [sp, #48]	; 0x30
   13b3c:	b	135ec <__assert_fail@plt+0x2470>
   13b40:	ldr	r0, [sp, #24]
   13b44:	mov	ip, r6
   13b48:	cmp	r0, ip
   13b4c:	mov	r1, r7
   13b50:	mov	r2, r4
   13b54:	ldr	r7, [sp, #104]	; 0x68
   13b58:	ldr	r4, [sp, #32]
   13b5c:	ldr	r6, [sp, #108]	; 0x6c
   13b60:	ldr	r8, [sp, #112]	; 0x70
   13b64:	ldr	r5, [sp, #116]	; 0x74
   13b68:	bls	13b98 <__assert_fail@plt+0x2a1c>
   13b6c:	ldrb	r3, [r2]
   13b70:	cmp	r3, #0
   13b74:	bne	13b88 <__assert_fail@plt+0x2a0c>
   13b78:	b	13ca8 <__assert_fail@plt+0x2b2c>
   13b7c:	ldrb	r3, [r2, #1]!
   13b80:	cmp	r3, #0
   13b84:	beq	13ca8 <__assert_fail@plt+0x2b2c>
   13b88:	add	r1, r1, #1
   13b8c:	add	r3, sl, r1
   13b90:	cmp	r0, r3
   13b94:	bhi	13b7c <__assert_fail@plt+0x2a00>
   13b98:	mov	r2, #0
   13b9c:	mov	r3, r7
   13ba0:	str	r2, [sp, #32]
   13ba4:	b	13970 <__assert_fail@plt+0x27f4>
   13ba8:	mov	r1, r7
   13bac:	ldr	r7, [sp, #104]	; 0x68
   13bb0:	mov	r2, #0
   13bb4:	ldr	r4, [sp, #32]
   13bb8:	ldr	r6, [sp, #108]	; 0x6c
   13bbc:	ldr	r8, [sp, #112]	; 0x70
   13bc0:	ldr	r5, [sp, #116]	; 0x74
   13bc4:	mov	r3, r7
   13bc8:	str	r2, [sp, #32]
   13bcc:	b	13970 <__assert_fail@plt+0x27f4>
   13bd0:	mov	r3, r5
   13bd4:	eor	r3, r3, #1
   13bd8:	ldr	r4, [sp, #32]
   13bdc:	mov	r1, r7
   13be0:	str	r5, [sp, #32]
   13be4:	ldr	r7, [sp, #104]	; 0x68
   13be8:	ldr	r6, [sp, #108]	; 0x6c
   13bec:	ldr	r8, [sp, #112]	; 0x70
   13bf0:	ldr	r5, [sp, #116]	; 0x74
   13bf4:	uxtb	r3, r3
   13bf8:	b	13970 <__assert_fail@plt+0x27f4>
   13bfc:	mov	sl, r9
   13c00:	str	r3, [sp, #56]	; 0x38
   13c04:	mov	r9, fp
   13c08:	ldr	r2, [sp, #64]	; 0x40
   13c0c:	b	139a0 <__assert_fail@plt+0x2824>
   13c10:			; <UNDEFINED> instruction: 0x00019abc
   13c14:			; <UNDEFINED> instruction: 0x00019ab8
   13c18:	andeq	r9, r1, r0, asr #21
   13c1c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13c20:	ldr	r2, [sp, #44]	; 0x2c
   13c24:	ldrb	r1, [r2, r3]
   13c28:	sub	r2, r1, #33	; 0x21
   13c2c:	uxtb	r2, r2
   13c30:	cmp	r2, #29
   13c34:	bhi	13cb4 <__assert_fail@plt+0x2b38>
   13c38:	ldr	r0, [pc, #-36]	; 13c1c <__assert_fail@plt+0x2aa0>
   13c3c:	mov	ip, #1
   13c40:	ands	r2, r0, ip, lsl r2
   13c44:	beq	13cd4 <__assert_fail@plt+0x2b58>
   13c48:	ldr	r2, [sp, #40]	; 0x28
   13c4c:	cmp	r2, #0
   13c50:	bne	13dc8 <__assert_fail@plt+0x2c4c>
   13c54:	add	r2, r8, #1
   13c58:	cmp	fp, r8
   13c5c:	strbhi	r4, [r9, r8]
   13c60:	cmp	fp, r2
   13c64:	movhi	r0, #34	; 0x22
   13c68:	strbhi	r0, [r9, r2]
   13c6c:	add	r2, r8, #2
   13c70:	cmp	fp, r2
   13c74:	movhi	r0, #34	; 0x22
   13c78:	strbhi	r0, [r9, r2]
   13c7c:	add	r2, r8, #3
   13c80:	cmp	fp, r2
   13c84:	mov	sl, r3
   13c88:	ldr	r3, [sp, #40]	; 0x28
   13c8c:	movhi	r0, #63	; 0x3f
   13c90:	mov	r4, r1
   13c94:	strbhi	r0, [r9, r2]
   13c98:	add	r8, r8, #4
   13c9c:	mov	r1, r3
   13ca0:	str	r3, [sp, #32]
   13ca4:	b	12e24 <__assert_fail@plt+0x1ca8>
   13ca8:	str	r3, [sp, #32]
   13cac:	mov	r3, r7
   13cb0:	b	13970 <__assert_fail@plt+0x27f4>
   13cb4:	mov	r1, #0
   13cb8:	str	r1, [sp, #32]
   13cbc:	b	12e24 <__assert_fail@plt+0x1ca8>
   13cc0:	mov	sl, r9
   13cc4:	ldr	r3, [sp, #56]	; 0x38
   13cc8:	mov	r9, fp
   13ccc:	ldr	r2, [sp, #64]	; 0x40
   13cd0:	b	139a0 <__assert_fail@plt+0x2824>
   13cd4:	str	r2, [sp, #32]
   13cd8:	mov	r1, #0
   13cdc:	b	12e24 <__assert_fail@plt+0x1ca8>
   13ce0:	ldr	r2, [sp, #76]	; 0x4c
   13ce4:	mov	sl, r9
   13ce8:	mov	r9, fp
   13cec:	mov	fp, r8
   13cf0:	ldr	r1, [sp, #72]	; 0x48
   13cf4:	cmp	r1, #0
   13cf8:	moveq	r3, #0
   13cfc:	andne	r3, r2, #1
   13d00:	cmp	r3, #0
   13d04:	beq	13d30 <__assert_fail@plt+0x2bb4>
   13d08:	ldrb	r3, [r1]
   13d0c:	cmp	r3, #0
   13d10:	beq	13d30 <__assert_fail@plt+0x2bb4>
   13d14:	mov	r2, r1
   13d18:	cmp	r9, fp
   13d1c:	strbhi	r3, [sl, fp]
   13d20:	ldrb	r3, [r2, #1]!
   13d24:	add	fp, fp, #1
   13d28:	cmp	r3, #0
   13d2c:	bne	13d18 <__assert_fail@plt+0x2b9c>
   13d30:	cmp	r9, fp
   13d34:	movhi	r3, #0
   13d38:	strbhi	r3, [sl, fp]
   13d3c:	b	139f8 <__assert_fail@plt+0x287c>
   13d40:	ldr	r3, [sp, #192]	; 0xc0
   13d44:	mov	ip, #5
   13d48:	str	r3, [sp, #16]
   13d4c:	ldr	r3, [sp, #188]	; 0xbc
   13d50:	ldr	r2, [sp, #44]	; 0x2c
   13d54:	str	r3, [sp, #12]
   13d58:	ldr	r3, [sp, #184]	; 0xb8
   13d5c:	ldr	r1, [sp, #84]	; 0x54
   13d60:	str	r3, [sp, #8]
   13d64:	ldr	r3, [sp, #180]	; 0xb4
   13d68:	mov	r0, r9
   13d6c:	str	r3, [sp, #4]
   13d70:	str	ip, [sp]
   13d74:	ldr	r3, [sp, #24]
   13d78:	bl	12850 <__assert_fail@plt+0x16d4>
   13d7c:	mov	fp, r0
   13d80:	b	139f8 <__assert_fail@plt+0x287c>
   13d84:	mov	sl, r9
   13d88:	mov	r9, fp
   13d8c:	mov	fp, r8
   13d90:	b	13cf0 <__assert_fail@plt+0x2b74>
   13d94:	ldr	r1, [sp, #176]	; 0xb0
   13d98:	bl	12730 <__assert_fail@plt+0x15b4>
   13d9c:	str	r0, [sp, #192]	; 0xc0
   13da0:	b	12d0c <__assert_fail@plt+0x1b90>
   13da4:	ldr	r1, [sp, #176]	; 0xb0
   13da8:	bl	12730 <__assert_fail@plt+0x15b4>
   13dac:	str	r0, [sp, #188]	; 0xbc
   13db0:	b	12cec <__assert_fail@plt+0x1b70>
   13db4:	mov	sl, r9
   13db8:	mov	r2, r3
   13dbc:	mov	r9, fp
   13dc0:	mov	fp, r8
   13dc4:	b	13cf0 <__assert_fail@plt+0x2b74>
   13dc8:	mov	sl, r9
   13dcc:	mov	r9, fp
   13dd0:	b	139b4 <__assert_fail@plt+0x2838>
   13dd4:	push	{r4, r5, r6, lr}
   13dd8:	mov	r5, r0
   13ddc:	bl	11080 <__errno_location@plt>
   13de0:	cmp	r5, #0
   13de4:	mov	r1, #48	; 0x30
   13de8:	mov	r4, r0
   13dec:	ldr	r0, [pc, #16]	; 13e04 <__assert_fail@plt+0x2c88>
   13df0:	ldr	r6, [r4]
   13df4:	movne	r0, r5
   13df8:	bl	17ccc <__assert_fail@plt+0x6b50>
   13dfc:	str	r6, [r4]
   13e00:	pop	{r4, r5, r6, pc}
   13e04:	strdeq	sl, [r2], -r0
   13e08:	ldr	r3, [pc, #12]	; 13e1c <__assert_fail@plt+0x2ca0>
   13e0c:	cmp	r0, #0
   13e10:	moveq	r0, r3
   13e14:	ldr	r0, [r0]
   13e18:	bx	lr
   13e1c:	strdeq	sl, [r2], -r0
   13e20:	ldr	r3, [pc, #12]	; 13e34 <__assert_fail@plt+0x2cb8>
   13e24:	cmp	r0, #0
   13e28:	moveq	r0, r3
   13e2c:	str	r1, [r0]
   13e30:	bx	lr
   13e34:	strdeq	sl, [r2], -r0
   13e38:	ldr	r3, [pc, #52]	; 13e74 <__assert_fail@plt+0x2cf8>
   13e3c:	cmp	r0, #0
   13e40:	moveq	r0, r3
   13e44:	add	r3, r0, #8
   13e48:	push	{lr}		; (str lr, [sp, #-4]!)
   13e4c:	lsr	lr, r1, #5
   13e50:	and	r1, r1, #31
   13e54:	ldr	ip, [r3, lr, lsl #2]
   13e58:	lsr	r0, ip, r1
   13e5c:	eor	r2, r2, r0
   13e60:	and	r2, r2, #1
   13e64:	and	r0, r0, #1
   13e68:	eor	r1, ip, r2, lsl r1
   13e6c:	str	r1, [r3, lr, lsl #2]
   13e70:	pop	{pc}		; (ldr pc, [sp], #4)
   13e74:	strdeq	sl, [r2], -r0
   13e78:	ldr	r3, [pc, #16]	; 13e90 <__assert_fail@plt+0x2d14>
   13e7c:	cmp	r0, #0
   13e80:	movne	r3, r0
   13e84:	ldr	r0, [r3, #4]
   13e88:	str	r1, [r3, #4]
   13e8c:	bx	lr
   13e90:	strdeq	sl, [r2], -r0
   13e94:	ldr	r3, [pc, #44]	; 13ec8 <__assert_fail@plt+0x2d4c>
   13e98:	cmp	r0, #0
   13e9c:	moveq	r0, r3
   13ea0:	mov	ip, #10
   13ea4:	cmp	r2, #0
   13ea8:	cmpne	r1, #0
   13eac:	str	ip, [r0]
   13eb0:	beq	13ec0 <__assert_fail@plt+0x2d44>
   13eb4:	str	r1, [r0, #40]	; 0x28
   13eb8:	str	r2, [r0, #44]	; 0x2c
   13ebc:	bx	lr
   13ec0:	push	{r4, lr}
   13ec4:	bl	11158 <abort@plt>
   13ec8:	strdeq	sl, [r2], -r0
   13ecc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ed0:	sub	sp, sp, #24
   13ed4:	ldr	ip, [pc, #108]	; 13f48 <__assert_fail@plt+0x2dcc>
   13ed8:	ldr	r4, [sp, #56]	; 0x38
   13edc:	mov	r9, r2
   13ee0:	cmp	r4, #0
   13ee4:	moveq	r4, ip
   13ee8:	mov	sl, r3
   13eec:	mov	r7, r0
   13ef0:	mov	r8, r1
   13ef4:	bl	11080 <__errno_location@plt>
   13ef8:	ldr	r3, [r4, #44]	; 0x2c
   13efc:	mov	r1, r8
   13f00:	ldr	r6, [r0]
   13f04:	str	r3, [sp, #16]
   13f08:	ldr	r2, [r4, #40]	; 0x28
   13f0c:	add	r3, r4, #8
   13f10:	str	r3, [sp, #8]
   13f14:	str	r2, [sp, #12]
   13f18:	ldr	r2, [r4, #4]
   13f1c:	mov	r5, r0
   13f20:	str	r2, [sp, #4]
   13f24:	ldr	ip, [r4]
   13f28:	mov	r3, sl
   13f2c:	mov	r2, r9
   13f30:	mov	r0, r7
   13f34:	str	ip, [sp]
   13f38:	bl	12850 <__assert_fail@plt+0x16d4>
   13f3c:	str	r6, [r5]
   13f40:	add	sp, sp, #24
   13f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f48:	strdeq	sl, [r2], -r0
   13f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f50:	cmp	r2, #0
   13f54:	sub	sp, sp, #36	; 0x24
   13f58:	ldr	r4, [pc, #164]	; 14004 <__assert_fail@plt+0x2e88>
   13f5c:	mov	r8, r1
   13f60:	movne	r4, r2
   13f64:	mov	r7, r0
   13f68:	bl	11080 <__errno_location@plt>
   13f6c:	ldr	r3, [r4, #44]	; 0x2c
   13f70:	ldr	r5, [r4, #4]
   13f74:	add	r9, r4, #8
   13f78:	orr	r5, r5, #1
   13f7c:	mov	r1, #0
   13f80:	mov	r2, r7
   13f84:	ldr	fp, [r0]
   13f88:	str	r3, [sp, #16]
   13f8c:	ldr	r3, [r4, #40]	; 0x28
   13f90:	stmib	sp, {r5, r9}
   13f94:	str	r3, [sp, #12]
   13f98:	ldr	r3, [r4]
   13f9c:	mov	r6, r0
   13fa0:	str	r3, [sp]
   13fa4:	mov	r0, r1
   13fa8:	mov	r3, r8
   13fac:	bl	12850 <__assert_fail@plt+0x16d4>
   13fb0:	add	r1, r0, #1
   13fb4:	mov	r0, r1
   13fb8:	str	r1, [sp, #28]
   13fbc:	bl	17788 <__assert_fail@plt+0x660c>
   13fc0:	ldr	r3, [r4, #44]	; 0x2c
   13fc4:	ldr	r1, [sp, #28]
   13fc8:	str	r3, [sp, #16]
   13fcc:	ldr	r3, [r4, #40]	; 0x28
   13fd0:	str	r5, [sp, #4]
   13fd4:	str	r3, [sp, #12]
   13fd8:	str	r9, [sp, #8]
   13fdc:	ldr	ip, [r4]
   13fe0:	mov	r3, r8
   13fe4:	mov	r2, r7
   13fe8:	str	ip, [sp]
   13fec:	mov	sl, r0
   13ff0:	bl	12850 <__assert_fail@plt+0x16d4>
   13ff4:	mov	r0, sl
   13ff8:	str	fp, [r6]
   13ffc:	add	sp, sp, #36	; 0x24
   14000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14004:	strdeq	sl, [r2], -r0
   14008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1400c:	cmp	r3, #0
   14010:	sub	sp, sp, #44	; 0x2c
   14014:	ldr	r4, [pc, #192]	; 140dc <__assert_fail@plt+0x2f60>
   14018:	mov	r6, r2
   1401c:	movne	r4, r3
   14020:	mov	r9, r1
   14024:	mov	r8, r0
   14028:	bl	11080 <__errno_location@plt>
   1402c:	ldr	r3, [r4, #44]	; 0x2c
   14030:	ldr	r5, [r4, #4]
   14034:	add	sl, r4, #8
   14038:	cmp	r6, #0
   1403c:	orreq	r5, r5, #1
   14040:	mov	r1, #0
   14044:	ldr	r2, [r0]
   14048:	str	r3, [sp, #16]
   1404c:	ldr	r3, [r4, #40]	; 0x28
   14050:	stmib	sp, {r5, sl}
   14054:	str	r3, [sp, #12]
   14058:	ldr	r3, [r4]
   1405c:	mov	r7, r0
   14060:	str	r2, [sp, #28]
   14064:	str	r3, [sp]
   14068:	mov	r2, r8
   1406c:	mov	r3, r9
   14070:	mov	r0, r1
   14074:	bl	12850 <__assert_fail@plt+0x16d4>
   14078:	add	r1, r0, #1
   1407c:	mov	fp, r0
   14080:	mov	r0, r1
   14084:	str	r1, [sp, #36]	; 0x24
   14088:	bl	17788 <__assert_fail@plt+0x660c>
   1408c:	ldr	r3, [r4, #44]	; 0x2c
   14090:	mov	r2, r8
   14094:	str	r3, [sp, #16]
   14098:	ldr	r3, [r4, #40]	; 0x28
   1409c:	str	r5, [sp, #4]
   140a0:	str	r3, [sp, #12]
   140a4:	str	sl, [sp, #8]
   140a8:	ldr	ip, [r4]
   140ac:	ldr	r1, [sp, #36]	; 0x24
   140b0:	mov	r3, r9
   140b4:	str	ip, [sp]
   140b8:	str	r0, [sp, #32]
   140bc:	bl	12850 <__assert_fail@plt+0x16d4>
   140c0:	ldr	r2, [sp, #28]
   140c4:	cmp	r6, #0
   140c8:	str	r2, [r7]
   140cc:	ldr	r0, [sp, #32]
   140d0:	strne	fp, [r6]
   140d4:	add	sp, sp, #44	; 0x2c
   140d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140dc:	strdeq	sl, [r2], -r0
   140e0:	push	{r4, r5, r6, r7, r8, lr}
   140e4:	ldr	r6, [pc, #116]	; 14160 <__assert_fail@plt+0x2fe4>
   140e8:	ldr	r3, [r6, #4]
   140ec:	ldr	r7, [r6]
   140f0:	cmp	r3, #1
   140f4:	movgt	r5, r7
   140f8:	movgt	r4, #1
   140fc:	ble	1411c <__assert_fail@plt+0x2fa0>
   14100:	ldr	r0, [r5, #12]
   14104:	bl	125bc <__assert_fail@plt+0x1440>
   14108:	ldr	r3, [r6, #4]
   1410c:	add	r4, r4, #1
   14110:	cmp	r3, r4
   14114:	add	r5, r5, #8
   14118:	bgt	14100 <__assert_fail@plt+0x2f84>
   1411c:	ldr	r0, [r7, #4]
   14120:	ldr	r4, [pc, #60]	; 14164 <__assert_fail@plt+0x2fe8>
   14124:	cmp	r0, r4
   14128:	beq	1413c <__assert_fail@plt+0x2fc0>
   1412c:	bl	125bc <__assert_fail@plt+0x1440>
   14130:	mov	r3, #256	; 0x100
   14134:	str	r4, [r6, #12]
   14138:	str	r3, [r6, #8]
   1413c:	ldr	r4, [pc, #36]	; 14168 <__assert_fail@plt+0x2fec>
   14140:	cmp	r7, r4
   14144:	beq	14154 <__assert_fail@plt+0x2fd8>
   14148:	mov	r0, r7
   1414c:	bl	125bc <__assert_fail@plt+0x1440>
   14150:	str	r4, [r6]
   14154:	mov	r3, #1
   14158:	str	r3, [r6, #4]
   1415c:	pop	{r4, r5, r6, r7, r8, pc}
   14160:	andeq	sl, r2, ip, lsl r1
   14164:	andeq	sl, r2, r0, lsr #4
   14168:	andeq	sl, r2, r4, lsr #2
   1416c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14170:	sub	sp, sp, #44	; 0x2c
   14174:	mov	r5, r0
   14178:	mov	sl, r1
   1417c:	bl	11080 <__errno_location@plt>
   14180:	ldr	r4, [pc, #400]	; 14318 <__assert_fail@plt+0x319c>
   14184:	cmn	r5, #-2147483647	; 0x80000001
   14188:	ldr	r6, [r4]
   1418c:	mov	r8, r0
   14190:	movne	r0, #0
   14194:	moveq	r0, #1
   14198:	ldr	r3, [r8]
   1419c:	orrs	r0, r0, r5, lsr #31
   141a0:	str	r3, [sp, #24]
   141a4:	bne	14314 <__assert_fail@plt+0x3198>
   141a8:	ldr	r2, [r4, #4]
   141ac:	cmp	r5, r2
   141b0:	blt	14210 <__assert_fail@plt+0x3094>
   141b4:	add	r7, r4, #8
   141b8:	cmp	r6, r7
   141bc:	str	r2, [sp, #36]	; 0x24
   141c0:	beq	142e4 <__assert_fail@plt+0x3168>
   141c4:	mov	r3, #8
   141c8:	sub	r2, r5, r2
   141cc:	mov	r0, r6
   141d0:	str	r3, [sp]
   141d4:	add	r2, r2, #1
   141d8:	mvn	r3, #-2147483648	; 0x80000000
   141dc:	add	r1, sp, #36	; 0x24
   141e0:	bl	179a4 <__assert_fail@plt+0x6828>
   141e4:	mov	r6, r0
   141e8:	str	r0, [r4]
   141ec:	ldr	r0, [r4, #4]
   141f0:	ldr	r2, [sp, #36]	; 0x24
   141f4:	mov	r1, #0
   141f8:	sub	r2, r2, r0
   141fc:	add	r0, r6, r0, lsl #3
   14200:	lsl	r2, r2, #3
   14204:	bl	110b0 <memset@plt>
   14208:	ldr	r3, [sp, #36]	; 0x24
   1420c:	str	r3, [r4, #4]
   14210:	ldr	r4, [pc, #260]	; 1431c <__assert_fail@plt+0x31a0>
   14214:	add	fp, r6, r5, lsl #3
   14218:	ldr	r9, [r6, r5, lsl #3]
   1421c:	ldr	r0, [r4, #4]
   14220:	ldr	r3, [r4]
   14224:	ldr	r7, [fp, #4]
   14228:	ldr	r1, [r4, #44]	; 0x2c
   1422c:	ldr	r2, [r4, #40]	; 0x28
   14230:	orr	r0, r0, #1
   14234:	str	r3, [sp]
   14238:	add	r3, r4, #8
   1423c:	str	r0, [sp, #28]
   14240:	str	r0, [sp, #4]
   14244:	str	r1, [sp, #16]
   14248:	str	r2, [sp, #12]
   1424c:	str	r3, [sp, #8]
   14250:	mov	r0, r7
   14254:	mov	r1, r9
   14258:	mvn	r3, #0
   1425c:	mov	r2, sl
   14260:	bl	12850 <__assert_fail@plt+0x16d4>
   14264:	cmp	r9, r0
   14268:	bhi	142d0 <__assert_fail@plt+0x3154>
   1426c:	add	r3, r4, #48	; 0x30
   14270:	add	r9, r0, #1
   14274:	cmp	r7, r3
   14278:	str	r9, [r6, r5, lsl #3]
   1427c:	beq	14288 <__assert_fail@plt+0x310c>
   14280:	mov	r0, r7
   14284:	bl	125bc <__assert_fail@plt+0x1440>
   14288:	mov	r0, r9
   1428c:	bl	17788 <__assert_fail@plt+0x660c>
   14290:	ldr	ip, [r4, #44]	; 0x2c
   14294:	ldr	r3, [r4]
   14298:	ldr	lr, [r4, #40]	; 0x28
   1429c:	ldr	r4, [pc, #124]	; 14320 <__assert_fail@plt+0x31a4>
   142a0:	mov	r2, sl
   142a4:	mov	r1, r9
   142a8:	str	r0, [fp, #4]
   142ac:	str	r4, [sp, #8]
   142b0:	ldr	r4, [sp, #28]
   142b4:	str	r3, [sp]
   142b8:	str	r4, [sp, #4]
   142bc:	str	ip, [sp, #16]
   142c0:	str	lr, [sp, #12]
   142c4:	mvn	r3, #0
   142c8:	mov	r7, r0
   142cc:	bl	12850 <__assert_fail@plt+0x16d4>
   142d0:	ldr	r3, [sp, #24]
   142d4:	mov	r0, r7
   142d8:	str	r3, [r8]
   142dc:	add	sp, sp, #44	; 0x2c
   142e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142e4:	mov	r3, #8
   142e8:	sub	r2, r5, r2
   142ec:	str	r3, [sp]
   142f0:	add	r1, sp, #36	; 0x24
   142f4:	add	r2, r2, #1
   142f8:	mvn	r3, #-2147483648	; 0x80000000
   142fc:	bl	179a4 <__assert_fail@plt+0x6828>
   14300:	mov	r6, r0
   14304:	ldm	r7, {r0, r1}
   14308:	str	r6, [r4]
   1430c:	stm	r6, {r0, r1}
   14310:	b	141ec <__assert_fail@plt+0x3070>
   14314:	bl	11158 <abort@plt>
   14318:	andeq	sl, r2, ip, lsl r1
   1431c:	strdeq	sl, [r2], -r0
   14320:	strdeq	sl, [r2], -r8
   14324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14328:	sub	sp, sp, #52	; 0x34
   1432c:	mov	r5, r0
   14330:	mov	sl, r1
   14334:	mov	fp, r2
   14338:	bl	11080 <__errno_location@plt>
   1433c:	ldr	r4, [pc, #408]	; 144dc <__assert_fail@plt+0x3360>
   14340:	cmn	r5, #-2147483647	; 0x80000001
   14344:	ldr	r6, [r4]
   14348:	mov	r8, r0
   1434c:	movne	r0, #0
   14350:	moveq	r0, #1
   14354:	ldr	r3, [r8]
   14358:	orrs	r0, r0, r5, lsr #31
   1435c:	str	r3, [sp, #28]
   14360:	bne	144d8 <__assert_fail@plt+0x335c>
   14364:	ldr	r2, [r4, #4]
   14368:	cmp	r5, r2
   1436c:	blt	143cc <__assert_fail@plt+0x3250>
   14370:	add	r7, r4, #8
   14374:	cmp	r6, r7
   14378:	str	r2, [sp, #44]	; 0x2c
   1437c:	beq	144a8 <__assert_fail@plt+0x332c>
   14380:	mov	r3, #8
   14384:	sub	r2, r5, r2
   14388:	mov	r0, r6
   1438c:	str	r3, [sp]
   14390:	add	r2, r2, #1
   14394:	mvn	r3, #-2147483648	; 0x80000000
   14398:	add	r1, sp, #44	; 0x2c
   1439c:	bl	179a4 <__assert_fail@plt+0x6828>
   143a0:	mov	r6, r0
   143a4:	str	r0, [r4]
   143a8:	ldr	r0, [r4, #4]
   143ac:	ldr	r2, [sp, #44]	; 0x2c
   143b0:	mov	r1, #0
   143b4:	sub	r2, r2, r0
   143b8:	add	r0, r6, r0, lsl #3
   143bc:	lsl	r2, r2, #3
   143c0:	bl	110b0 <memset@plt>
   143c4:	ldr	r3, [sp, #44]	; 0x2c
   143c8:	str	r3, [r4, #4]
   143cc:	ldr	r4, [pc, #268]	; 144e0 <__assert_fail@plt+0x3364>
   143d0:	add	r3, r6, r5, lsl #3
   143d4:	str	r3, [sp, #32]
   143d8:	ldr	r7, [r3, #4]
   143dc:	ldr	r0, [r4, #4]
   143e0:	ldr	r3, [r4]
   143e4:	ldr	r9, [r6, r5, lsl #3]
   143e8:	ldr	r1, [r4, #44]	; 0x2c
   143ec:	ldr	r2, [r4, #40]	; 0x28
   143f0:	orr	r0, r0, #1
   143f4:	str	r3, [sp]
   143f8:	add	r3, r4, #8
   143fc:	str	r0, [sp, #36]	; 0x24
   14400:	str	r0, [sp, #4]
   14404:	str	r1, [sp, #16]
   14408:	str	r2, [sp, #12]
   1440c:	str	r3, [sp, #8]
   14410:	mov	r0, r7
   14414:	mov	r1, r9
   14418:	mov	r3, fp
   1441c:	mov	r2, sl
   14420:	bl	12850 <__assert_fail@plt+0x16d4>
   14424:	cmp	r9, r0
   14428:	bhi	14494 <__assert_fail@plt+0x3318>
   1442c:	add	r3, r4, #48	; 0x30
   14430:	add	r9, r0, #1
   14434:	cmp	r7, r3
   14438:	str	r9, [r6, r5, lsl #3]
   1443c:	beq	14448 <__assert_fail@plt+0x32cc>
   14440:	mov	r0, r7
   14444:	bl	125bc <__assert_fail@plt+0x1440>
   14448:	mov	r0, r9
   1444c:	bl	17788 <__assert_fail@plt+0x660c>
   14450:	ldr	ip, [sp, #32]
   14454:	ldr	lr, [r4, #44]	; 0x2c
   14458:	ldr	r5, [r4, #40]	; 0x28
   1445c:	mov	r3, fp
   14460:	mov	r2, sl
   14464:	mov	r1, r9
   14468:	str	r0, [ip, #4]
   1446c:	ldr	ip, [r4]
   14470:	ldr	r4, [pc, #108]	; 144e4 <__assert_fail@plt+0x3368>
   14474:	str	lr, [sp, #16]
   14478:	str	r4, [sp, #8]
   1447c:	ldr	r4, [sp, #36]	; 0x24
   14480:	str	r5, [sp, #12]
   14484:	str	r4, [sp, #4]
   14488:	str	ip, [sp]
   1448c:	mov	r7, r0
   14490:	bl	12850 <__assert_fail@plt+0x16d4>
   14494:	ldr	r3, [sp, #28]
   14498:	mov	r0, r7
   1449c:	str	r3, [r8]
   144a0:	add	sp, sp, #52	; 0x34
   144a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a8:	mov	r3, #8
   144ac:	sub	r2, r5, r2
   144b0:	str	r3, [sp]
   144b4:	add	r1, sp, #44	; 0x2c
   144b8:	add	r2, r2, #1
   144bc:	mvn	r3, #-2147483648	; 0x80000000
   144c0:	bl	179a4 <__assert_fail@plt+0x6828>
   144c4:	mov	r6, r0
   144c8:	ldm	r7, {r0, r1}
   144cc:	str	r6, [r4]
   144d0:	stm	r6, {r0, r1}
   144d4:	b	143a8 <__assert_fail@plt+0x322c>
   144d8:	bl	11158 <abort@plt>
   144dc:	andeq	sl, r2, ip, lsl r1
   144e0:	strdeq	sl, [r2], -r0
   144e4:	strdeq	sl, [r2], -r8
   144e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ec:	sub	sp, sp, #44	; 0x2c
   144f0:	mov	sl, r0
   144f4:	bl	11080 <__errno_location@plt>
   144f8:	ldr	r4, [pc, #352]	; 14660 <__assert_fail@plt+0x34e4>
   144fc:	ldr	r2, [r4, #4]
   14500:	ldr	r5, [r4]
   14504:	cmp	r2, #0
   14508:	ldr	r3, [r0]
   1450c:	mov	r8, r0
   14510:	str	r3, [sp, #28]
   14514:	bgt	14570 <__assert_fail@plt+0x33f4>
   14518:	add	r6, r4, #8
   1451c:	cmp	r5, r6
   14520:	str	r2, [sp, #36]	; 0x24
   14524:	beq	14630 <__assert_fail@plt+0x34b4>
   14528:	mov	r3, #8
   1452c:	mov	r0, r5
   14530:	str	r3, [sp]
   14534:	rsb	r2, r2, #1
   14538:	mvn	r3, #-2147483648	; 0x80000000
   1453c:	add	r1, sp, #36	; 0x24
   14540:	bl	179a4 <__assert_fail@plt+0x6828>
   14544:	mov	r5, r0
   14548:	str	r0, [r4]
   1454c:	ldr	r0, [r4, #4]
   14550:	ldr	r2, [sp, #36]	; 0x24
   14554:	mov	r1, #0
   14558:	sub	r2, r2, r0
   1455c:	add	r0, r5, r0, lsl #3
   14560:	lsl	r2, r2, #3
   14564:	bl	110b0 <memset@plt>
   14568:	ldr	r3, [sp, #36]	; 0x24
   1456c:	str	r3, [r4, #4]
   14570:	ldr	r4, [pc, #236]	; 14664 <__assert_fail@plt+0x34e8>
   14574:	ldr	r9, [r5]
   14578:	ldr	r6, [r5, #4]
   1457c:	ldr	r7, [r4, #4]
   14580:	ldr	r1, [r4, #44]	; 0x2c
   14584:	ldr	r2, [r4, #40]	; 0x28
   14588:	ldr	r3, [r4]
   1458c:	orr	r7, r7, #1
   14590:	add	fp, r4, #8
   14594:	str	r1, [sp, #16]
   14598:	str	r2, [sp, #12]
   1459c:	str	r3, [sp]
   145a0:	str	r7, [sp, #4]
   145a4:	str	fp, [sp, #8]
   145a8:	mov	r1, r9
   145ac:	mov	r0, r6
   145b0:	mvn	r3, #0
   145b4:	mov	r2, sl
   145b8:	bl	12850 <__assert_fail@plt+0x16d4>
   145bc:	cmp	r9, r0
   145c0:	bhi	1461c <__assert_fail@plt+0x34a0>
   145c4:	add	r3, r4, #48	; 0x30
   145c8:	add	r9, r0, #1
   145cc:	cmp	r6, r3
   145d0:	str	r9, [r5]
   145d4:	beq	145e0 <__assert_fail@plt+0x3464>
   145d8:	mov	r0, r6
   145dc:	bl	125bc <__assert_fail@plt+0x1440>
   145e0:	mov	r0, r9
   145e4:	bl	17788 <__assert_fail@plt+0x660c>
   145e8:	ldr	ip, [r4, #44]	; 0x2c
   145ec:	ldr	r3, [r4]
   145f0:	ldr	lr, [r4, #40]	; 0x28
   145f4:	mov	r2, sl
   145f8:	mov	r1, r9
   145fc:	str	r0, [r5, #4]
   14600:	str	r3, [sp]
   14604:	stmib	sp, {r7, fp}
   14608:	str	ip, [sp, #16]
   1460c:	str	lr, [sp, #12]
   14610:	mvn	r3, #0
   14614:	mov	r6, r0
   14618:	bl	12850 <__assert_fail@plt+0x16d4>
   1461c:	ldr	r3, [sp, #28]
   14620:	mov	r0, r6
   14624:	str	r3, [r8]
   14628:	add	sp, sp, #44	; 0x2c
   1462c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14630:	mov	r3, #8
   14634:	str	r3, [sp]
   14638:	add	r1, sp, #36	; 0x24
   1463c:	rsb	r2, r2, #1
   14640:	mvn	r3, #-2147483648	; 0x80000000
   14644:	mov	r0, #0
   14648:	bl	179a4 <__assert_fail@plt+0x6828>
   1464c:	mov	r5, r0
   14650:	ldm	r6, {r0, r1}
   14654:	str	r5, [r4]
   14658:	stm	r5, {r0, r1}
   1465c:	b	1454c <__assert_fail@plt+0x33d0>
   14660:	andeq	sl, r2, ip, lsl r1
   14664:	strdeq	sl, [r2], -r0
   14668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1466c:	sub	sp, sp, #44	; 0x2c
   14670:	mov	r9, r0
   14674:	mov	sl, r1
   14678:	bl	11080 <__errno_location@plt>
   1467c:	ldr	r4, [pc, #364]	; 147f0 <__assert_fail@plt+0x3674>
   14680:	ldr	r2, [r4, #4]
   14684:	ldr	r5, [r4]
   14688:	cmp	r2, #0
   1468c:	ldr	r3, [r0]
   14690:	mov	r7, r0
   14694:	str	r3, [sp, #24]
   14698:	bgt	146f4 <__assert_fail@plt+0x3578>
   1469c:	add	r6, r4, #8
   146a0:	cmp	r5, r6
   146a4:	str	r2, [sp, #36]	; 0x24
   146a8:	beq	147c0 <__assert_fail@plt+0x3644>
   146ac:	mov	r3, #8
   146b0:	mov	r0, r5
   146b4:	str	r3, [sp]
   146b8:	rsb	r2, r2, #1
   146bc:	mvn	r3, #-2147483648	; 0x80000000
   146c0:	add	r1, sp, #36	; 0x24
   146c4:	bl	179a4 <__assert_fail@plt+0x6828>
   146c8:	mov	r5, r0
   146cc:	str	r0, [r4]
   146d0:	ldr	r0, [r4, #4]
   146d4:	ldr	r2, [sp, #36]	; 0x24
   146d8:	mov	r1, #0
   146dc:	sub	r2, r2, r0
   146e0:	add	r0, r5, r0, lsl #3
   146e4:	lsl	r2, r2, #3
   146e8:	bl	110b0 <memset@plt>
   146ec:	ldr	r3, [sp, #36]	; 0x24
   146f0:	str	r3, [r4, #4]
   146f4:	ldr	r4, [pc, #248]	; 147f4 <__assert_fail@plt+0x3678>
   146f8:	ldr	r8, [r5]
   146fc:	ldr	r6, [r5, #4]
   14700:	ldr	r0, [r4, #4]
   14704:	ldr	r1, [r4, #44]	; 0x2c
   14708:	ldr	r2, [r4, #40]	; 0x28
   1470c:	ldr	r3, [r4]
   14710:	orr	r0, r0, #1
   14714:	add	fp, r4, #8
   14718:	str	r0, [sp, #28]
   1471c:	str	r0, [sp, #4]
   14720:	str	r1, [sp, #16]
   14724:	str	r2, [sp, #12]
   14728:	str	r3, [sp]
   1472c:	str	fp, [sp, #8]
   14730:	mov	r1, r8
   14734:	mov	r0, r6
   14738:	mov	r3, sl
   1473c:	mov	r2, r9
   14740:	bl	12850 <__assert_fail@plt+0x16d4>
   14744:	cmp	r8, r0
   14748:	bhi	147ac <__assert_fail@plt+0x3630>
   1474c:	add	r3, r4, #48	; 0x30
   14750:	add	r8, r0, #1
   14754:	cmp	r6, r3
   14758:	str	r8, [r5]
   1475c:	beq	14768 <__assert_fail@plt+0x35ec>
   14760:	mov	r0, r6
   14764:	bl	125bc <__assert_fail@plt+0x1440>
   14768:	mov	r0, r8
   1476c:	bl	17788 <__assert_fail@plt+0x660c>
   14770:	ldr	lr, [r4, #44]	; 0x2c
   14774:	ldr	ip, [r4]
   14778:	mov	r3, sl
   1477c:	mov	r2, r9
   14780:	mov	r1, r8
   14784:	str	r0, [r5, #4]
   14788:	ldr	r5, [r4, #40]	; 0x28
   1478c:	ldr	r4, [sp, #28]
   14790:	str	fp, [sp, #8]
   14794:	str	r4, [sp, #4]
   14798:	str	lr, [sp, #16]
   1479c:	str	r5, [sp, #12]
   147a0:	str	ip, [sp]
   147a4:	mov	r6, r0
   147a8:	bl	12850 <__assert_fail@plt+0x16d4>
   147ac:	ldr	r3, [sp, #24]
   147b0:	mov	r0, r6
   147b4:	str	r3, [r7]
   147b8:	add	sp, sp, #44	; 0x2c
   147bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c0:	mov	r3, #8
   147c4:	str	r3, [sp]
   147c8:	add	r1, sp, #36	; 0x24
   147cc:	rsb	r2, r2, #1
   147d0:	mvn	r3, #-2147483648	; 0x80000000
   147d4:	mov	r0, #0
   147d8:	bl	179a4 <__assert_fail@plt+0x6828>
   147dc:	mov	r5, r0
   147e0:	ldm	r6, {r0, r1}
   147e4:	str	r5, [r4]
   147e8:	stm	r5, {r0, r1}
   147ec:	b	146d0 <__assert_fail@plt+0x3554>
   147f0:	andeq	sl, r2, ip, lsl r1
   147f4:	strdeq	sl, [r2], -r0
   147f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147fc:	sub	sp, sp, #132	; 0x84
   14800:	mov	r5, r1
   14804:	mov	r4, r0
   14808:	mov	r9, r2
   1480c:	add	r0, sp, #80	; 0x50
   14810:	mov	r2, #48	; 0x30
   14814:	mov	r1, #0
   14818:	bl	110b0 <memset@plt>
   1481c:	cmp	r5, #10
   14820:	beq	149d8 <__assert_fail@plt+0x385c>
   14824:	add	lr, sp, #80	; 0x50
   14828:	str	r5, [sp, #80]	; 0x50
   1482c:	ldm	lr!, {r0, r1, r2, r3}
   14830:	add	ip, sp, #32
   14834:	ldr	r6, [pc, #416]	; 149dc <__assert_fail@plt+0x3860>
   14838:	stmia	ip!, {r0, r1, r2, r3}
   1483c:	ldm	lr!, {r0, r1, r2, r3}
   14840:	stmia	ip!, {r0, r1, r2, r3}
   14844:	ldm	lr, {r0, r1, r2, r3}
   14848:	stm	ip, {r0, r1, r2, r3}
   1484c:	bl	11080 <__errno_location@plt>
   14850:	cmn	r4, #-2147483647	; 0x80000001
   14854:	ldr	r5, [r6]
   14858:	mov	r7, r0
   1485c:	movne	r0, #0
   14860:	moveq	r0, #1
   14864:	ldr	r3, [r7]
   14868:	orrs	r0, r0, r4, lsr #31
   1486c:	str	r3, [sp, #24]
   14870:	bne	149d8 <__assert_fail@plt+0x385c>
   14874:	ldr	r2, [r6, #4]
   14878:	cmp	r4, r2
   1487c:	blt	148dc <__assert_fail@plt+0x3760>
   14880:	add	r8, r6, #8
   14884:	cmp	r5, r8
   14888:	str	r2, [sp, #80]	; 0x50
   1488c:	beq	149a8 <__assert_fail@plt+0x382c>
   14890:	mov	r3, #8
   14894:	sub	r2, r4, r2
   14898:	mov	r0, r5
   1489c:	str	r3, [sp]
   148a0:	add	r2, r2, #1
   148a4:	add	r1, sp, #80	; 0x50
   148a8:	mvn	r3, #-2147483648	; 0x80000000
   148ac:	bl	179a4 <__assert_fail@plt+0x6828>
   148b0:	mov	r5, r0
   148b4:	str	r0, [r6]
   148b8:	ldr	r0, [r6, #4]
   148bc:	ldr	r2, [sp, #80]	; 0x50
   148c0:	mov	r1, #0
   148c4:	sub	r2, r2, r0
   148c8:	add	r0, r5, r0, lsl #3
   148cc:	lsl	r2, r2, #3
   148d0:	bl	110b0 <memset@plt>
   148d4:	ldr	r3, [sp, #80]	; 0x50
   148d8:	str	r3, [r6, #4]
   148dc:	add	fp, r5, r4, lsl #3
   148e0:	ldr	r1, [sp, #36]	; 0x24
   148e4:	ldr	r8, [r5, r4, lsl #3]
   148e8:	ldr	r6, [fp, #4]
   148ec:	ldr	r2, [sp, #72]	; 0x48
   148f0:	ldr	r3, [sp, #32]
   148f4:	ldr	ip, [sp, #76]	; 0x4c
   148f8:	orr	r1, r1, #1
   148fc:	add	sl, sp, #40	; 0x28
   14900:	str	r1, [sp, #28]
   14904:	str	r1, [sp, #4]
   14908:	str	r2, [sp, #12]
   1490c:	str	r3, [sp]
   14910:	mov	r0, r6
   14914:	mov	r1, r8
   14918:	str	ip, [sp, #16]
   1491c:	str	sl, [sp, #8]
   14920:	mvn	r3, #0
   14924:	mov	r2, r9
   14928:	bl	12850 <__assert_fail@plt+0x16d4>
   1492c:	cmp	r8, r0
   14930:	bhi	14994 <__assert_fail@plt+0x3818>
   14934:	ldr	r3, [pc, #164]	; 149e0 <__assert_fail@plt+0x3864>
   14938:	add	r8, r0, #1
   1493c:	cmp	r6, r3
   14940:	str	r8, [r5, r4, lsl #3]
   14944:	beq	14950 <__assert_fail@plt+0x37d4>
   14948:	mov	r0, r6
   1494c:	bl	125bc <__assert_fail@plt+0x1440>
   14950:	mov	r0, r8
   14954:	bl	17788 <__assert_fail@plt+0x660c>
   14958:	ldr	lr, [sp, #76]	; 0x4c
   1495c:	ldr	r3, [sp, #32]
   14960:	ldr	ip, [sp, #72]	; 0x48
   14964:	ldr	r4, [sp, #28]
   14968:	mov	r2, r9
   1496c:	mov	r1, r8
   14970:	str	r0, [fp, #4]
   14974:	str	r3, [sp]
   14978:	str	sl, [sp, #8]
   1497c:	str	r4, [sp, #4]
   14980:	str	lr, [sp, #16]
   14984:	str	ip, [sp, #12]
   14988:	mvn	r3, #0
   1498c:	mov	r6, r0
   14990:	bl	12850 <__assert_fail@plt+0x16d4>
   14994:	ldr	r3, [sp, #24]
   14998:	mov	r0, r6
   1499c:	str	r3, [r7]
   149a0:	add	sp, sp, #132	; 0x84
   149a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149a8:	mov	r3, #8
   149ac:	sub	r2, r4, r2
   149b0:	add	r1, sp, #80	; 0x50
   149b4:	str	r3, [sp]
   149b8:	add	r2, r2, #1
   149bc:	mvn	r3, #-2147483648	; 0x80000000
   149c0:	bl	179a4 <__assert_fail@plt+0x6828>
   149c4:	mov	r5, r0
   149c8:	ldm	r8, {r0, r1}
   149cc:	str	r5, [r6]
   149d0:	stm	r5, {r0, r1}
   149d4:	b	148b8 <__assert_fail@plt+0x373c>
   149d8:	bl	11158 <abort@plt>
   149dc:	andeq	sl, r2, ip, lsl r1
   149e0:	andeq	sl, r2, r0, lsr #4
   149e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149e8:	sub	sp, sp, #132	; 0x84
   149ec:	mov	r5, r1
   149f0:	mov	r4, r0
   149f4:	mov	r9, r2
   149f8:	add	r0, sp, #80	; 0x50
   149fc:	mov	r2, #48	; 0x30
   14a00:	mov	r1, #0
   14a04:	mov	sl, r3
   14a08:	bl	110b0 <memset@plt>
   14a0c:	cmp	r5, #10
   14a10:	beq	14bcc <__assert_fail@plt+0x3a50>
   14a14:	add	lr, sp, #80	; 0x50
   14a18:	str	r5, [sp, #80]	; 0x50
   14a1c:	ldm	lr!, {r0, r1, r2, r3}
   14a20:	add	ip, sp, #32
   14a24:	ldr	r6, [pc, #420]	; 14bd0 <__assert_fail@plt+0x3a54>
   14a28:	stmia	ip!, {r0, r1, r2, r3}
   14a2c:	ldm	lr!, {r0, r1, r2, r3}
   14a30:	stmia	ip!, {r0, r1, r2, r3}
   14a34:	ldm	lr, {r0, r1, r2, r3}
   14a38:	stm	ip, {r0, r1, r2, r3}
   14a3c:	bl	11080 <__errno_location@plt>
   14a40:	cmn	r4, #-2147483647	; 0x80000001
   14a44:	ldr	r5, [r6]
   14a48:	mov	r7, r0
   14a4c:	movne	r0, #0
   14a50:	moveq	r0, #1
   14a54:	ldr	r3, [r7]
   14a58:	orrs	r0, r0, r4, lsr #31
   14a5c:	str	r3, [sp, #24]
   14a60:	bne	14bcc <__assert_fail@plt+0x3a50>
   14a64:	ldr	r2, [r6, #4]
   14a68:	cmp	r4, r2
   14a6c:	blt	14acc <__assert_fail@plt+0x3950>
   14a70:	add	r8, r6, #8
   14a74:	cmp	r5, r8
   14a78:	str	r2, [sp, #80]	; 0x50
   14a7c:	beq	14b9c <__assert_fail@plt+0x3a20>
   14a80:	mov	r3, #8
   14a84:	sub	r2, r4, r2
   14a88:	mov	r0, r5
   14a8c:	str	r3, [sp]
   14a90:	add	r2, r2, #1
   14a94:	add	r1, sp, #80	; 0x50
   14a98:	mvn	r3, #-2147483648	; 0x80000000
   14a9c:	bl	179a4 <__assert_fail@plt+0x6828>
   14aa0:	mov	r5, r0
   14aa4:	str	r0, [r6]
   14aa8:	ldr	r0, [r6, #4]
   14aac:	ldr	r2, [sp, #80]	; 0x50
   14ab0:	mov	r1, #0
   14ab4:	sub	r2, r2, r0
   14ab8:	add	r0, r5, r0, lsl #3
   14abc:	lsl	r2, r2, #3
   14ac0:	bl	110b0 <memset@plt>
   14ac4:	ldr	r3, [sp, #80]	; 0x50
   14ac8:	str	r3, [r6, #4]
   14acc:	add	fp, r5, r4, lsl #3
   14ad0:	ldr	r3, [sp, #32]
   14ad4:	ldr	r1, [sp, #36]	; 0x24
   14ad8:	ldr	r8, [r5, r4, lsl #3]
   14adc:	ldr	r6, [fp, #4]
   14ae0:	ldr	r2, [sp, #72]	; 0x48
   14ae4:	ldr	ip, [sp, #76]	; 0x4c
   14ae8:	orr	r1, r1, #1
   14aec:	str	r3, [sp]
   14af0:	add	r3, sp, #40	; 0x28
   14af4:	str	r1, [sp, #28]
   14af8:	str	r1, [sp, #4]
   14afc:	str	r2, [sp, #12]
   14b00:	str	r3, [sp, #8]
   14b04:	mov	r0, r6
   14b08:	mov	r1, r8
   14b0c:	str	ip, [sp, #16]
   14b10:	mov	r3, sl
   14b14:	mov	r2, r9
   14b18:	bl	12850 <__assert_fail@plt+0x16d4>
   14b1c:	cmp	r8, r0
   14b20:	bhi	14b88 <__assert_fail@plt+0x3a0c>
   14b24:	ldr	r3, [pc, #168]	; 14bd4 <__assert_fail@plt+0x3a58>
   14b28:	add	r8, r0, #1
   14b2c:	cmp	r6, r3
   14b30:	str	r8, [r5, r4, lsl #3]
   14b34:	beq	14b40 <__assert_fail@plt+0x39c4>
   14b38:	mov	r0, r6
   14b3c:	bl	125bc <__assert_fail@plt+0x1440>
   14b40:	mov	r0, r8
   14b44:	bl	17788 <__assert_fail@plt+0x660c>
   14b48:	add	lr, sp, #40	; 0x28
   14b4c:	ldr	ip, [sp, #76]	; 0x4c
   14b50:	ldr	r4, [sp, #72]	; 0x48
   14b54:	ldr	r5, [sp, #28]
   14b58:	mov	r3, sl
   14b5c:	mov	r2, r9
   14b60:	mov	r1, r8
   14b64:	str	r0, [fp, #4]
   14b68:	str	lr, [sp, #8]
   14b6c:	ldr	lr, [sp, #32]
   14b70:	str	r5, [sp, #4]
   14b74:	str	ip, [sp, #16]
   14b78:	str	r4, [sp, #12]
   14b7c:	str	lr, [sp]
   14b80:	mov	r6, r0
   14b84:	bl	12850 <__assert_fail@plt+0x16d4>
   14b88:	ldr	r3, [sp, #24]
   14b8c:	mov	r0, r6
   14b90:	str	r3, [r7]
   14b94:	add	sp, sp, #132	; 0x84
   14b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b9c:	mov	r3, #8
   14ba0:	sub	r2, r4, r2
   14ba4:	add	r1, sp, #80	; 0x50
   14ba8:	str	r3, [sp]
   14bac:	add	r2, r2, #1
   14bb0:	mvn	r3, #-2147483648	; 0x80000000
   14bb4:	bl	179a4 <__assert_fail@plt+0x6828>
   14bb8:	mov	r5, r0
   14bbc:	ldm	r8, {r0, r1}
   14bc0:	str	r5, [r6]
   14bc4:	stm	r5, {r0, r1}
   14bc8:	b	14aa8 <__assert_fail@plt+0x392c>
   14bcc:	bl	11158 <abort@plt>
   14bd0:	andeq	sl, r2, ip, lsl r1
   14bd4:	andeq	sl, r2, r0, lsr #4
   14bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bdc:	sub	sp, sp, #124	; 0x7c
   14be0:	mov	r4, r0
   14be4:	mov	r9, r1
   14be8:	add	r0, sp, #72	; 0x48
   14bec:	mov	r2, #48	; 0x30
   14bf0:	mov	r1, #0
   14bf4:	bl	110b0 <memset@plt>
   14bf8:	cmp	r4, #10
   14bfc:	beq	14d88 <__assert_fail@plt+0x3c0c>
   14c00:	add	lr, sp, #72	; 0x48
   14c04:	str	r4, [sp, #72]	; 0x48
   14c08:	ldm	lr!, {r0, r1, r2, r3}
   14c0c:	add	ip, sp, #24
   14c10:	ldr	r5, [pc, #372]	; 14d8c <__assert_fail@plt+0x3c10>
   14c14:	stmia	ip!, {r0, r1, r2, r3}
   14c18:	ldm	lr!, {r0, r1, r2, r3}
   14c1c:	stmia	ip!, {r0, r1, r2, r3}
   14c20:	ldm	lr, {r0, r1, r2, r3}
   14c24:	stm	ip, {r0, r1, r2, r3}
   14c28:	bl	11080 <__errno_location@plt>
   14c2c:	ldr	r2, [r5, #4]
   14c30:	ldr	r4, [r5]
   14c34:	cmp	r2, #0
   14c38:	mov	r7, r0
   14c3c:	ldr	fp, [r0]
   14c40:	bgt	14c9c <__assert_fail@plt+0x3b20>
   14c44:	add	r6, r5, #8
   14c48:	cmp	r4, r6
   14c4c:	str	r2, [sp, #72]	; 0x48
   14c50:	beq	14d58 <__assert_fail@plt+0x3bdc>
   14c54:	mov	r3, #8
   14c58:	mov	r0, r4
   14c5c:	str	r3, [sp]
   14c60:	rsb	r2, r2, #1
   14c64:	add	r1, sp, #72	; 0x48
   14c68:	mvn	r3, #-2147483648	; 0x80000000
   14c6c:	bl	179a4 <__assert_fail@plt+0x6828>
   14c70:	mov	r4, r0
   14c74:	str	r0, [r5]
   14c78:	ldr	r0, [r5, #4]
   14c7c:	ldr	r2, [sp, #72]	; 0x48
   14c80:	mov	r1, #0
   14c84:	sub	r2, r2, r0
   14c88:	add	r0, r4, r0, lsl #3
   14c8c:	lsl	r2, r2, #3
   14c90:	bl	110b0 <memset@plt>
   14c94:	ldr	r3, [sp, #72]	; 0x48
   14c98:	str	r3, [r5, #4]
   14c9c:	ldr	r6, [sp, #28]
   14ca0:	ldr	r8, [r4]
   14ca4:	ldr	r5, [r4, #4]
   14ca8:	ldr	r2, [sp, #64]	; 0x40
   14cac:	ldr	r3, [sp, #24]
   14cb0:	ldr	ip, [sp, #68]	; 0x44
   14cb4:	orr	r6, r6, #1
   14cb8:	add	sl, sp, #32
   14cbc:	str	r2, [sp, #12]
   14cc0:	str	r3, [sp]
   14cc4:	str	r6, [sp, #4]
   14cc8:	mov	r1, r8
   14ccc:	mov	r0, r5
   14cd0:	str	ip, [sp, #16]
   14cd4:	str	sl, [sp, #8]
   14cd8:	mvn	r3, #0
   14cdc:	mov	r2, r9
   14ce0:	bl	12850 <__assert_fail@plt+0x16d4>
   14ce4:	cmp	r8, r0
   14ce8:	bhi	14d48 <__assert_fail@plt+0x3bcc>
   14cec:	ldr	r3, [pc, #156]	; 14d90 <__assert_fail@plt+0x3c14>
   14cf0:	add	r8, r0, #1
   14cf4:	cmp	r5, r3
   14cf8:	str	r8, [r4]
   14cfc:	beq	14d08 <__assert_fail@plt+0x3b8c>
   14d00:	mov	r0, r5
   14d04:	bl	125bc <__assert_fail@plt+0x1440>
   14d08:	mov	r0, r8
   14d0c:	bl	17788 <__assert_fail@plt+0x660c>
   14d10:	ldr	lr, [sp, #68]	; 0x44
   14d14:	ldr	r3, [sp, #24]
   14d18:	ldr	ip, [sp, #64]	; 0x40
   14d1c:	mov	r2, r9
   14d20:	mov	r1, r8
   14d24:	str	r0, [r4, #4]
   14d28:	str	r3, [sp]
   14d2c:	str	sl, [sp, #8]
   14d30:	str	r6, [sp, #4]
   14d34:	str	lr, [sp, #16]
   14d38:	str	ip, [sp, #12]
   14d3c:	mvn	r3, #0
   14d40:	mov	r5, r0
   14d44:	bl	12850 <__assert_fail@plt+0x16d4>
   14d48:	mov	r0, r5
   14d4c:	str	fp, [r7]
   14d50:	add	sp, sp, #124	; 0x7c
   14d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d58:	mov	r3, #8
   14d5c:	add	r1, sp, #72	; 0x48
   14d60:	str	r3, [sp]
   14d64:	rsb	r2, r2, #1
   14d68:	mvn	r3, #-2147483648	; 0x80000000
   14d6c:	mov	r0, #0
   14d70:	bl	179a4 <__assert_fail@plt+0x6828>
   14d74:	mov	r4, r0
   14d78:	ldm	r6, {r0, r1}
   14d7c:	str	r4, [r5]
   14d80:	stm	r4, {r0, r1}
   14d84:	b	14c78 <__assert_fail@plt+0x3afc>
   14d88:	bl	11158 <abort@plt>
   14d8c:	andeq	sl, r2, ip, lsl r1
   14d90:	andeq	sl, r2, r0, lsr #4
   14d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d98:	sub	sp, sp, #132	; 0x84
   14d9c:	mov	r4, r0
   14da0:	mov	r9, r1
   14da4:	mov	sl, r2
   14da8:	add	r0, sp, #80	; 0x50
   14dac:	mov	r2, #48	; 0x30
   14db0:	mov	r1, #0
   14db4:	bl	110b0 <memset@plt>
   14db8:	cmp	r4, #10
   14dbc:	beq	14f50 <__assert_fail@plt+0x3dd4>
   14dc0:	add	lr, sp, #80	; 0x50
   14dc4:	str	r4, [sp, #80]	; 0x50
   14dc8:	ldm	lr!, {r0, r1, r2, r3}
   14dcc:	add	ip, sp, #32
   14dd0:	ldr	r5, [pc, #380]	; 14f54 <__assert_fail@plt+0x3dd8>
   14dd4:	stmia	ip!, {r0, r1, r2, r3}
   14dd8:	ldm	lr!, {r0, r1, r2, r3}
   14ddc:	stmia	ip!, {r0, r1, r2, r3}
   14de0:	ldm	lr, {r0, r1, r2, r3}
   14de4:	stm	ip, {r0, r1, r2, r3}
   14de8:	bl	11080 <__errno_location@plt>
   14dec:	ldr	r2, [r5, #4]
   14df0:	ldr	r4, [r5]
   14df4:	cmp	r2, #0
   14df8:	ldr	r3, [r0]
   14dfc:	mov	r7, r0
   14e00:	str	r3, [sp, #28]
   14e04:	bgt	14e60 <__assert_fail@plt+0x3ce4>
   14e08:	add	r6, r5, #8
   14e0c:	cmp	r4, r6
   14e10:	str	r2, [sp, #80]	; 0x50
   14e14:	beq	14f20 <__assert_fail@plt+0x3da4>
   14e18:	mov	r3, #8
   14e1c:	mov	r0, r4
   14e20:	str	r3, [sp]
   14e24:	rsb	r2, r2, #1
   14e28:	add	r1, sp, #80	; 0x50
   14e2c:	mvn	r3, #-2147483648	; 0x80000000
   14e30:	bl	179a4 <__assert_fail@plt+0x6828>
   14e34:	mov	r4, r0
   14e38:	str	r0, [r5]
   14e3c:	ldr	r0, [r5, #4]
   14e40:	ldr	r2, [sp, #80]	; 0x50
   14e44:	mov	r1, #0
   14e48:	sub	r2, r2, r0
   14e4c:	add	r0, r4, r0, lsl #3
   14e50:	lsl	r2, r2, #3
   14e54:	bl	110b0 <memset@plt>
   14e58:	ldr	r3, [sp, #80]	; 0x50
   14e5c:	str	r3, [r5, #4]
   14e60:	ldr	r6, [sp, #36]	; 0x24
   14e64:	ldr	r8, [r4]
   14e68:	ldr	r5, [r4, #4]
   14e6c:	ldr	r2, [sp, #72]	; 0x48
   14e70:	ldr	r3, [sp, #32]
   14e74:	ldr	ip, [sp, #76]	; 0x4c
   14e78:	orr	r6, r6, #1
   14e7c:	add	fp, sp, #40	; 0x28
   14e80:	str	r2, [sp, #12]
   14e84:	str	r3, [sp]
   14e88:	str	r6, [sp, #4]
   14e8c:	mov	r1, r8
   14e90:	mov	r0, r5
   14e94:	str	ip, [sp, #16]
   14e98:	str	fp, [sp, #8]
   14e9c:	mov	r3, sl
   14ea0:	mov	r2, r9
   14ea4:	bl	12850 <__assert_fail@plt+0x16d4>
   14ea8:	cmp	r8, r0
   14eac:	bhi	14f0c <__assert_fail@plt+0x3d90>
   14eb0:	ldr	r3, [pc, #160]	; 14f58 <__assert_fail@plt+0x3ddc>
   14eb4:	add	r8, r0, #1
   14eb8:	cmp	r5, r3
   14ebc:	str	r8, [r4]
   14ec0:	beq	14ecc <__assert_fail@plt+0x3d50>
   14ec4:	mov	r0, r5
   14ec8:	bl	125bc <__assert_fail@plt+0x1440>
   14ecc:	mov	r0, r8
   14ed0:	bl	17788 <__assert_fail@plt+0x660c>
   14ed4:	ldr	ip, [sp, #76]	; 0x4c
   14ed8:	ldr	lr, [sp, #32]
   14edc:	mov	r3, sl
   14ee0:	mov	r2, r9
   14ee4:	mov	r1, r8
   14ee8:	str	r0, [r4, #4]
   14eec:	ldr	r4, [sp, #72]	; 0x48
   14ef0:	str	fp, [sp, #8]
   14ef4:	str	r6, [sp, #4]
   14ef8:	str	ip, [sp, #16]
   14efc:	str	r4, [sp, #12]
   14f00:	str	lr, [sp]
   14f04:	mov	r5, r0
   14f08:	bl	12850 <__assert_fail@plt+0x16d4>
   14f0c:	ldr	r3, [sp, #28]
   14f10:	mov	r0, r5
   14f14:	str	r3, [r7]
   14f18:	add	sp, sp, #132	; 0x84
   14f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f20:	mov	r3, #8
   14f24:	add	r1, sp, #80	; 0x50
   14f28:	str	r3, [sp]
   14f2c:	rsb	r2, r2, #1
   14f30:	mvn	r3, #-2147483648	; 0x80000000
   14f34:	mov	r0, #0
   14f38:	bl	179a4 <__assert_fail@plt+0x6828>
   14f3c:	mov	r4, r0
   14f40:	ldm	r6, {r0, r1}
   14f44:	str	r4, [r5]
   14f48:	stm	r4, {r0, r1}
   14f4c:	b	14e3c <__assert_fail@plt+0x3cc0>
   14f50:	bl	11158 <abort@plt>
   14f54:	andeq	sl, r2, ip, lsl r1
   14f58:	andeq	sl, r2, r0, lsr #4
   14f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f60:	mov	r4, r2
   14f64:	ldr	lr, [pc, #432]	; 1511c <__assert_fail@plt+0x3fa0>
   14f68:	mov	sl, r0
   14f6c:	mov	fp, r1
   14f70:	ldm	lr!, {r0, r1, r2, r3}
   14f74:	sub	sp, sp, #92	; 0x5c
   14f78:	add	ip, sp, #40	; 0x28
   14f7c:	lsr	r7, r4, #5
   14f80:	stmia	ip!, {r0, r1, r2, r3}
   14f84:	add	r6, sp, #48	; 0x30
   14f88:	ldm	lr!, {r0, r1, r2, r3}
   14f8c:	and	r4, r4, #31
   14f90:	ldr	r5, [pc, #392]	; 15120 <__assert_fail@plt+0x3fa4>
   14f94:	stmia	ip!, {r0, r1, r2, r3}
   14f98:	ldm	lr, {r0, r1, r2, r3}
   14f9c:	stm	ip, {r0, r1, r2, r3}
   14fa0:	ldr	r2, [r6, r7, lsl #2]
   14fa4:	lsr	r3, r2, r4
   14fa8:	eor	r3, r3, #1
   14fac:	and	r3, r3, #1
   14fb0:	eor	r4, r2, r3, lsl r4
   14fb4:	str	r4, [r6, r7, lsl #2]
   14fb8:	bl	11080 <__errno_location@plt>
   14fbc:	ldr	r2, [r5, #4]
   14fc0:	ldr	r4, [r5]
   14fc4:	cmp	r2, #0
   14fc8:	ldr	r3, [r0]
   14fcc:	mov	r8, r0
   14fd0:	str	r3, [sp, #28]
   14fd4:	bgt	15030 <__assert_fail@plt+0x3eb4>
   14fd8:	add	r7, r5, #8
   14fdc:	cmp	r4, r7
   14fe0:	str	r2, [sp, #36]	; 0x24
   14fe4:	beq	150ec <__assert_fail@plt+0x3f70>
   14fe8:	mov	r3, #8
   14fec:	mov	r0, r4
   14ff0:	str	r3, [sp]
   14ff4:	rsb	r2, r2, #1
   14ff8:	mvn	r3, #-2147483648	; 0x80000000
   14ffc:	add	r1, sp, #36	; 0x24
   15000:	bl	179a4 <__assert_fail@plt+0x6828>
   15004:	mov	r4, r0
   15008:	str	r0, [r5]
   1500c:	ldr	r0, [r5, #4]
   15010:	ldr	r2, [sp, #36]	; 0x24
   15014:	mov	r1, #0
   15018:	sub	r2, r2, r0
   1501c:	add	r0, r4, r0, lsl #3
   15020:	lsl	r2, r2, #3
   15024:	bl	110b0 <memset@plt>
   15028:	ldr	r3, [sp, #36]	; 0x24
   1502c:	str	r3, [r5, #4]
   15030:	ldr	r7, [sp, #44]	; 0x2c
   15034:	ldr	r9, [r4]
   15038:	ldr	r5, [r4, #4]
   1503c:	ldr	r2, [sp, #80]	; 0x50
   15040:	ldr	r3, [sp, #40]	; 0x28
   15044:	ldr	ip, [sp, #84]	; 0x54
   15048:	orr	r7, r7, #1
   1504c:	str	r2, [sp, #12]
   15050:	str	r3, [sp]
   15054:	str	r7, [sp, #4]
   15058:	str	r6, [sp, #8]
   1505c:	mov	r1, r9
   15060:	mov	r0, r5
   15064:	str	ip, [sp, #16]
   15068:	mov	r3, fp
   1506c:	mov	r2, sl
   15070:	bl	12850 <__assert_fail@plt+0x16d4>
   15074:	cmp	r9, r0
   15078:	bhi	150d8 <__assert_fail@plt+0x3f5c>
   1507c:	ldr	r3, [pc, #160]	; 15124 <__assert_fail@plt+0x3fa8>
   15080:	add	r9, r0, #1
   15084:	cmp	r5, r3
   15088:	str	r9, [r4]
   1508c:	beq	15098 <__assert_fail@plt+0x3f1c>
   15090:	mov	r0, r5
   15094:	bl	125bc <__assert_fail@plt+0x1440>
   15098:	mov	r0, r9
   1509c:	bl	17788 <__assert_fail@plt+0x660c>
   150a0:	ldr	ip, [sp, #84]	; 0x54
   150a4:	ldr	lr, [sp, #40]	; 0x28
   150a8:	mov	r3, fp
   150ac:	mov	r2, sl
   150b0:	mov	r1, r9
   150b4:	str	r0, [r4, #4]
   150b8:	ldr	r4, [sp, #80]	; 0x50
   150bc:	str	r6, [sp, #8]
   150c0:	str	r7, [sp, #4]
   150c4:	str	ip, [sp, #16]
   150c8:	str	r4, [sp, #12]
   150cc:	str	lr, [sp]
   150d0:	mov	r5, r0
   150d4:	bl	12850 <__assert_fail@plt+0x16d4>
   150d8:	ldr	r3, [sp, #28]
   150dc:	mov	r0, r5
   150e0:	str	r3, [r8]
   150e4:	add	sp, sp, #92	; 0x5c
   150e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150ec:	mov	r3, #8
   150f0:	str	r3, [sp]
   150f4:	add	r1, sp, #36	; 0x24
   150f8:	rsb	r2, r2, #1
   150fc:	mvn	r3, #-2147483648	; 0x80000000
   15100:	mov	r0, #0
   15104:	bl	179a4 <__assert_fail@plt+0x6828>
   15108:	mov	r4, r0
   1510c:	ldm	r7, {r0, r1}
   15110:	str	r4, [r5]
   15114:	stm	r4, {r0, r1}
   15118:	b	1500c <__assert_fail@plt+0x3e90>
   1511c:	strdeq	sl, [r2], -r0
   15120:	andeq	sl, r2, ip, lsl r1
   15124:	andeq	sl, r2, r0, lsr #4
   15128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1512c:	mov	r4, r1
   15130:	ldr	lr, [pc, #420]	; 152dc <__assert_fail@plt+0x4160>
   15134:	mov	r6, r0
   15138:	sub	sp, sp, #84	; 0x54
   1513c:	ldm	lr!, {r0, r1, r2, r3}
   15140:	add	ip, sp, #32
   15144:	lsr	r8, r4, #5
   15148:	add	r5, sp, #40	; 0x28
   1514c:	stmia	ip!, {r0, r1, r2, r3}
   15150:	and	r4, r4, #31
   15154:	ldm	lr!, {r0, r1, r2, r3}
   15158:	ldr	r7, [pc, #384]	; 152e0 <__assert_fail@plt+0x4164>
   1515c:	stmia	ip!, {r0, r1, r2, r3}
   15160:	ldm	lr, {r0, r1, r2, r3}
   15164:	stm	ip, {r0, r1, r2, r3}
   15168:	ldr	r2, [r5, r8, lsl #2]
   1516c:	lsr	r3, r2, r4
   15170:	eor	r3, r3, #1
   15174:	and	r3, r3, #1
   15178:	eor	r4, r2, r3, lsl r4
   1517c:	str	r4, [r5, r8, lsl #2]
   15180:	bl	11080 <__errno_location@plt>
   15184:	ldr	r2, [r7, #4]
   15188:	ldr	r4, [r7]
   1518c:	cmp	r2, #0
   15190:	mov	r9, r0
   15194:	ldr	sl, [r0]
   15198:	bgt	151f4 <__assert_fail@plt+0x4078>
   1519c:	add	r8, r7, #8
   151a0:	cmp	r4, r8
   151a4:	str	r2, [sp, #28]
   151a8:	beq	152ac <__assert_fail@plt+0x4130>
   151ac:	mov	r3, #8
   151b0:	mov	r0, r4
   151b4:	str	r3, [sp]
   151b8:	rsb	r2, r2, #1
   151bc:	mvn	r3, #-2147483648	; 0x80000000
   151c0:	add	r1, sp, #28
   151c4:	bl	179a4 <__assert_fail@plt+0x6828>
   151c8:	mov	r4, r0
   151cc:	str	r0, [r7]
   151d0:	ldr	r0, [r7, #4]
   151d4:	ldr	r2, [sp, #28]
   151d8:	mov	r1, #0
   151dc:	sub	r2, r2, r0
   151e0:	add	r0, r4, r0, lsl #3
   151e4:	lsl	r2, r2, #3
   151e8:	bl	110b0 <memset@plt>
   151ec:	ldr	r3, [sp, #28]
   151f0:	str	r3, [r7, #4]
   151f4:	ldr	r8, [sp, #36]	; 0x24
   151f8:	ldr	fp, [r4]
   151fc:	ldr	r7, [r4, #4]
   15200:	ldr	r2, [sp, #72]	; 0x48
   15204:	ldr	r3, [sp, #32]
   15208:	ldr	ip, [sp, #76]	; 0x4c
   1520c:	orr	r8, r8, #1
   15210:	str	r2, [sp, #12]
   15214:	str	r3, [sp]
   15218:	str	r8, [sp, #4]
   1521c:	str	r5, [sp, #8]
   15220:	mov	r1, fp
   15224:	mov	r0, r7
   15228:	str	ip, [sp, #16]
   1522c:	mvn	r3, #0
   15230:	mov	r2, r6
   15234:	bl	12850 <__assert_fail@plt+0x16d4>
   15238:	cmp	fp, r0
   1523c:	bhi	1529c <__assert_fail@plt+0x4120>
   15240:	ldr	r3, [pc, #156]	; 152e4 <__assert_fail@plt+0x4168>
   15244:	add	fp, r0, #1
   15248:	cmp	r7, r3
   1524c:	str	fp, [r4]
   15250:	beq	1525c <__assert_fail@plt+0x40e0>
   15254:	mov	r0, r7
   15258:	bl	125bc <__assert_fail@plt+0x1440>
   1525c:	mov	r0, fp
   15260:	bl	17788 <__assert_fail@plt+0x660c>
   15264:	ldr	lr, [sp, #76]	; 0x4c
   15268:	ldr	r3, [sp, #32]
   1526c:	ldr	ip, [sp, #72]	; 0x48
   15270:	mov	r2, r6
   15274:	mov	r1, fp
   15278:	str	r0, [r4, #4]
   1527c:	str	r3, [sp]
   15280:	str	r5, [sp, #8]
   15284:	str	r8, [sp, #4]
   15288:	str	lr, [sp, #16]
   1528c:	str	ip, [sp, #12]
   15290:	mvn	r3, #0
   15294:	mov	r7, r0
   15298:	bl	12850 <__assert_fail@plt+0x16d4>
   1529c:	mov	r0, r7
   152a0:	str	sl, [r9]
   152a4:	add	sp, sp, #84	; 0x54
   152a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152ac:	mov	r3, #8
   152b0:	str	r3, [sp]
   152b4:	add	r1, sp, #28
   152b8:	rsb	r2, r2, #1
   152bc:	mvn	r3, #-2147483648	; 0x80000000
   152c0:	mov	r0, #0
   152c4:	bl	179a4 <__assert_fail@plt+0x6828>
   152c8:	mov	r4, r0
   152cc:	ldm	r8, {r0, r1}
   152d0:	str	r4, [r7]
   152d4:	stm	r4, {r0, r1}
   152d8:	b	151d0 <__assert_fail@plt+0x4054>
   152dc:	strdeq	sl, [r2], -r0
   152e0:	andeq	sl, r2, ip, lsl r1
   152e4:	andeq	sl, r2, r0, lsr #4
   152e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152ec:	mov	r6, r0
   152f0:	ldr	lr, [pc, #404]	; 1548c <__assert_fail@plt+0x4310>
   152f4:	sub	sp, sp, #84	; 0x54
   152f8:	add	ip, sp, #32
   152fc:	ldm	lr!, {r0, r1, r2, r3}
   15300:	ldr	r5, [pc, #392]	; 15490 <__assert_fail@plt+0x4314>
   15304:	stmia	ip!, {r0, r1, r2, r3}
   15308:	ldm	lr!, {r0, r1, r2, r3}
   1530c:	ldr	r4, [sp, #44]	; 0x2c
   15310:	stmia	ip!, {r0, r1, r2, r3}
   15314:	ldm	lr, {r0, r1, r2, r3}
   15318:	mvn	lr, r4
   1531c:	and	lr, lr, #67108864	; 0x4000000
   15320:	eor	lr, lr, r4
   15324:	stm	ip, {r0, r1, r2, r3}
   15328:	str	lr, [sp, #44]	; 0x2c
   1532c:	bl	11080 <__errno_location@plt>
   15330:	ldr	r2, [r5, #4]
   15334:	ldr	r4, [r5]
   15338:	cmp	r2, #0
   1533c:	mov	r8, r0
   15340:	ldr	sl, [r0]
   15344:	bgt	153a0 <__assert_fail@plt+0x4224>
   15348:	add	r7, r5, #8
   1534c:	cmp	r4, r7
   15350:	str	r2, [sp, #28]
   15354:	beq	1545c <__assert_fail@plt+0x42e0>
   15358:	mov	r3, #8
   1535c:	mov	r0, r4
   15360:	str	r3, [sp]
   15364:	rsb	r2, r2, #1
   15368:	mvn	r3, #-2147483648	; 0x80000000
   1536c:	add	r1, sp, #28
   15370:	bl	179a4 <__assert_fail@plt+0x6828>
   15374:	mov	r4, r0
   15378:	str	r0, [r5]
   1537c:	ldr	r0, [r5, #4]
   15380:	ldr	r2, [sp, #28]
   15384:	mov	r1, #0
   15388:	sub	r2, r2, r0
   1538c:	add	r0, r4, r0, lsl #3
   15390:	lsl	r2, r2, #3
   15394:	bl	110b0 <memset@plt>
   15398:	ldr	r3, [sp, #28]
   1539c:	str	r3, [r5, #4]
   153a0:	ldr	r7, [sp, #36]	; 0x24
   153a4:	ldr	r9, [r4]
   153a8:	ldr	r5, [r4, #4]
   153ac:	ldr	r2, [sp, #72]	; 0x48
   153b0:	ldr	r3, [sp, #32]
   153b4:	ldr	ip, [sp, #76]	; 0x4c
   153b8:	orr	r7, r7, #1
   153bc:	add	fp, sp, #40	; 0x28
   153c0:	str	r2, [sp, #12]
   153c4:	str	r3, [sp]
   153c8:	str	r7, [sp, #4]
   153cc:	mov	r1, r9
   153d0:	mov	r0, r5
   153d4:	str	ip, [sp, #16]
   153d8:	str	fp, [sp, #8]
   153dc:	mvn	r3, #0
   153e0:	mov	r2, r6
   153e4:	bl	12850 <__assert_fail@plt+0x16d4>
   153e8:	cmp	r9, r0
   153ec:	bhi	1544c <__assert_fail@plt+0x42d0>
   153f0:	ldr	r3, [pc, #156]	; 15494 <__assert_fail@plt+0x4318>
   153f4:	add	r9, r0, #1
   153f8:	cmp	r5, r3
   153fc:	str	r9, [r4]
   15400:	beq	1540c <__assert_fail@plt+0x4290>
   15404:	mov	r0, r5
   15408:	bl	125bc <__assert_fail@plt+0x1440>
   1540c:	mov	r0, r9
   15410:	bl	17788 <__assert_fail@plt+0x660c>
   15414:	ldr	lr, [sp, #76]	; 0x4c
   15418:	ldr	r3, [sp, #32]
   1541c:	ldr	ip, [sp, #72]	; 0x48
   15420:	mov	r2, r6
   15424:	mov	r1, r9
   15428:	str	r0, [r4, #4]
   1542c:	str	r3, [sp]
   15430:	str	fp, [sp, #8]
   15434:	str	r7, [sp, #4]
   15438:	str	lr, [sp, #16]
   1543c:	str	ip, [sp, #12]
   15440:	mvn	r3, #0
   15444:	mov	r5, r0
   15448:	bl	12850 <__assert_fail@plt+0x16d4>
   1544c:	mov	r0, r5
   15450:	str	sl, [r8]
   15454:	add	sp, sp, #84	; 0x54
   15458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1545c:	mov	r3, #8
   15460:	str	r3, [sp]
   15464:	add	r1, sp, #28
   15468:	rsb	r2, r2, #1
   1546c:	mvn	r3, #-2147483648	; 0x80000000
   15470:	mov	r0, #0
   15474:	bl	179a4 <__assert_fail@plt+0x6828>
   15478:	mov	r4, r0
   1547c:	ldm	r7, {r0, r1}
   15480:	str	r4, [r5]
   15484:	stm	r4, {r0, r1}
   15488:	b	1537c <__assert_fail@plt+0x4200>
   1548c:	strdeq	sl, [r2], -r0
   15490:	andeq	sl, r2, ip, lsl r1
   15494:	andeq	sl, r2, r0, lsr #4
   15498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1549c:	mov	r9, r0
   154a0:	ldr	lr, [pc, #416]	; 15648 <__assert_fail@plt+0x44cc>
   154a4:	mov	sl, r1
   154a8:	sub	sp, sp, #92	; 0x5c
   154ac:	ldm	lr!, {r0, r1, r2, r3}
   154b0:	add	ip, sp, #40	; 0x28
   154b4:	ldr	r5, [pc, #400]	; 1564c <__assert_fail@plt+0x44d0>
   154b8:	stmia	ip!, {r0, r1, r2, r3}
   154bc:	ldm	lr!, {r0, r1, r2, r3}
   154c0:	ldr	r4, [sp, #52]	; 0x34
   154c4:	stmia	ip!, {r0, r1, r2, r3}
   154c8:	ldm	lr, {r0, r1, r2, r3}
   154cc:	mvn	lr, r4
   154d0:	and	lr, lr, #67108864	; 0x4000000
   154d4:	eor	lr, lr, r4
   154d8:	stm	ip, {r0, r1, r2, r3}
   154dc:	str	lr, [sp, #52]	; 0x34
   154e0:	bl	11080 <__errno_location@plt>
   154e4:	ldr	r2, [r5, #4]
   154e8:	ldr	r4, [r5]
   154ec:	cmp	r2, #0
   154f0:	ldr	r3, [r0]
   154f4:	mov	r7, r0
   154f8:	str	r3, [sp, #28]
   154fc:	bgt	15558 <__assert_fail@plt+0x43dc>
   15500:	add	r6, r5, #8
   15504:	cmp	r4, r6
   15508:	str	r2, [sp, #36]	; 0x24
   1550c:	beq	15618 <__assert_fail@plt+0x449c>
   15510:	mov	r3, #8
   15514:	mov	r0, r4
   15518:	str	r3, [sp]
   1551c:	rsb	r2, r2, #1
   15520:	mvn	r3, #-2147483648	; 0x80000000
   15524:	add	r1, sp, #36	; 0x24
   15528:	bl	179a4 <__assert_fail@plt+0x6828>
   1552c:	mov	r4, r0
   15530:	str	r0, [r5]
   15534:	ldr	r0, [r5, #4]
   15538:	ldr	r2, [sp, #36]	; 0x24
   1553c:	mov	r1, #0
   15540:	sub	r2, r2, r0
   15544:	add	r0, r4, r0, lsl #3
   15548:	lsl	r2, r2, #3
   1554c:	bl	110b0 <memset@plt>
   15550:	ldr	r3, [sp, #36]	; 0x24
   15554:	str	r3, [r5, #4]
   15558:	ldr	r6, [sp, #44]	; 0x2c
   1555c:	ldr	r8, [r4]
   15560:	ldr	r5, [r4, #4]
   15564:	ldr	r2, [sp, #80]	; 0x50
   15568:	ldr	r3, [sp, #40]	; 0x28
   1556c:	ldr	ip, [sp, #84]	; 0x54
   15570:	orr	r6, r6, #1
   15574:	add	fp, sp, #48	; 0x30
   15578:	str	r2, [sp, #12]
   1557c:	str	r3, [sp]
   15580:	str	r6, [sp, #4]
   15584:	mov	r1, r8
   15588:	mov	r0, r5
   1558c:	str	ip, [sp, #16]
   15590:	str	fp, [sp, #8]
   15594:	mov	r3, sl
   15598:	mov	r2, r9
   1559c:	bl	12850 <__assert_fail@plt+0x16d4>
   155a0:	cmp	r8, r0
   155a4:	bhi	15604 <__assert_fail@plt+0x4488>
   155a8:	ldr	r3, [pc, #160]	; 15650 <__assert_fail@plt+0x44d4>
   155ac:	add	r8, r0, #1
   155b0:	cmp	r5, r3
   155b4:	str	r8, [r4]
   155b8:	beq	155c4 <__assert_fail@plt+0x4448>
   155bc:	mov	r0, r5
   155c0:	bl	125bc <__assert_fail@plt+0x1440>
   155c4:	mov	r0, r8
   155c8:	bl	17788 <__assert_fail@plt+0x660c>
   155cc:	ldr	ip, [sp, #84]	; 0x54
   155d0:	ldr	lr, [sp, #40]	; 0x28
   155d4:	mov	r3, sl
   155d8:	mov	r2, r9
   155dc:	mov	r1, r8
   155e0:	str	r0, [r4, #4]
   155e4:	ldr	r4, [sp, #80]	; 0x50
   155e8:	str	fp, [sp, #8]
   155ec:	str	r6, [sp, #4]
   155f0:	str	ip, [sp, #16]
   155f4:	str	r4, [sp, #12]
   155f8:	str	lr, [sp]
   155fc:	mov	r5, r0
   15600:	bl	12850 <__assert_fail@plt+0x16d4>
   15604:	ldr	r3, [sp, #28]
   15608:	mov	r0, r5
   1560c:	str	r3, [r7]
   15610:	add	sp, sp, #92	; 0x5c
   15614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15618:	mov	r3, #8
   1561c:	str	r3, [sp]
   15620:	add	r1, sp, #36	; 0x24
   15624:	rsb	r2, r2, #1
   15628:	mvn	r3, #-2147483648	; 0x80000000
   1562c:	mov	r0, #0
   15630:	bl	179a4 <__assert_fail@plt+0x6828>
   15634:	mov	r4, r0
   15638:	ldm	r6, {r0, r1}
   1563c:	str	r4, [r5]
   15640:	stm	r4, {r0, r1}
   15644:	b	15534 <__assert_fail@plt+0x43b8>
   15648:	strdeq	sl, [r2], -r0
   1564c:	andeq	sl, r2, ip, lsl r1
   15650:	andeq	sl, r2, r0, lsr #4
   15654:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15658:	sub	sp, sp, #180	; 0xb4
   1565c:	mov	r6, r1
   15660:	mov	r4, r0
   15664:	mov	r9, r2
   15668:	add	r0, sp, #80	; 0x50
   1566c:	mov	r2, #48	; 0x30
   15670:	mov	r1, #0
   15674:	bl	110b0 <memset@plt>
   15678:	cmp	r6, #10
   1567c:	beq	1585c <__assert_fail@plt+0x46e0>
   15680:	add	r5, sp, #80	; 0x50
   15684:	str	r6, [sp, #80]	; 0x50
   15688:	ldm	r5!, {r0, r1, r2, r3}
   1568c:	add	ip, sp, #128	; 0x80
   15690:	mov	r7, ip
   15694:	add	lr, sp, #32
   15698:	stmia	ip!, {r0, r1, r2, r3}
   1569c:	mov	r8, #67108864	; 0x4000000
   156a0:	ldm	r5!, {r0, r1, r2, r3}
   156a4:	ldr	r6, [pc, #436]	; 15860 <__assert_fail@plt+0x46e4>
   156a8:	stmia	ip!, {r0, r1, r2, r3}
   156ac:	ldm	r5, {r0, r1, r2, r3}
   156b0:	stm	ip, {r0, r1, r2, r3}
   156b4:	ldm	r7!, {r0, r1, r2, r3}
   156b8:	stmia	lr!, {r0, r1, r2, r3}
   156bc:	ldm	r7!, {r0, r1, r2, r3}
   156c0:	str	r8, [sp, #44]	; 0x2c
   156c4:	stmia	lr!, {r0, r1, r2, r3}
   156c8:	ldm	ip, {r0, r1, r2, r3}
   156cc:	stm	lr, {r0, r1, r2, r3}
   156d0:	bl	11080 <__errno_location@plt>
   156d4:	cmn	r4, #-2147483647	; 0x80000001
   156d8:	ldr	r5, [r6]
   156dc:	mov	r7, r0
   156e0:	movne	r0, #0
   156e4:	moveq	r0, #1
   156e8:	ldr	r3, [r7]
   156ec:	orrs	r0, r0, r4, lsr #31
   156f0:	str	r3, [sp, #24]
   156f4:	bne	1585c <__assert_fail@plt+0x46e0>
   156f8:	ldr	r2, [r6, #4]
   156fc:	cmp	r4, r2
   15700:	blt	15760 <__assert_fail@plt+0x45e4>
   15704:	add	r8, r6, #8
   15708:	cmp	r5, r8
   1570c:	str	r2, [sp, #80]	; 0x50
   15710:	beq	1582c <__assert_fail@plt+0x46b0>
   15714:	mov	r3, #8
   15718:	sub	r2, r4, r2
   1571c:	mov	r0, r5
   15720:	str	r3, [sp]
   15724:	add	r2, r2, #1
   15728:	add	r1, sp, #80	; 0x50
   1572c:	mvn	r3, #-2147483648	; 0x80000000
   15730:	bl	179a4 <__assert_fail@plt+0x6828>
   15734:	mov	r5, r0
   15738:	str	r0, [r6]
   1573c:	ldr	r0, [r6, #4]
   15740:	ldr	r2, [sp, #80]	; 0x50
   15744:	mov	r1, #0
   15748:	sub	r2, r2, r0
   1574c:	add	r0, r5, r0, lsl #3
   15750:	lsl	r2, r2, #3
   15754:	bl	110b0 <memset@plt>
   15758:	ldr	r3, [sp, #80]	; 0x50
   1575c:	str	r3, [r6, #4]
   15760:	add	fp, r5, r4, lsl #3
   15764:	ldr	r1, [sp, #36]	; 0x24
   15768:	ldr	r8, [r5, r4, lsl #3]
   1576c:	ldr	r6, [fp, #4]
   15770:	ldr	r2, [sp, #72]	; 0x48
   15774:	ldr	r3, [sp, #32]
   15778:	ldr	ip, [sp, #76]	; 0x4c
   1577c:	orr	r1, r1, #1
   15780:	add	sl, sp, #40	; 0x28
   15784:	str	r1, [sp, #28]
   15788:	str	r1, [sp, #4]
   1578c:	str	r2, [sp, #12]
   15790:	str	r3, [sp]
   15794:	mov	r0, r6
   15798:	mov	r1, r8
   1579c:	str	ip, [sp, #16]
   157a0:	str	sl, [sp, #8]
   157a4:	mvn	r3, #0
   157a8:	mov	r2, r9
   157ac:	bl	12850 <__assert_fail@plt+0x16d4>
   157b0:	cmp	r8, r0
   157b4:	bhi	15818 <__assert_fail@plt+0x469c>
   157b8:	ldr	r3, [pc, #164]	; 15864 <__assert_fail@plt+0x46e8>
   157bc:	add	r8, r0, #1
   157c0:	cmp	r6, r3
   157c4:	str	r8, [r5, r4, lsl #3]
   157c8:	beq	157d4 <__assert_fail@plt+0x4658>
   157cc:	mov	r0, r6
   157d0:	bl	125bc <__assert_fail@plt+0x1440>
   157d4:	mov	r0, r8
   157d8:	bl	17788 <__assert_fail@plt+0x660c>
   157dc:	ldr	lr, [sp, #76]	; 0x4c
   157e0:	ldr	r3, [sp, #32]
   157e4:	ldr	ip, [sp, #72]	; 0x48
   157e8:	ldr	r4, [sp, #28]
   157ec:	mov	r2, r9
   157f0:	mov	r1, r8
   157f4:	str	r0, [fp, #4]
   157f8:	str	r3, [sp]
   157fc:	str	sl, [sp, #8]
   15800:	str	r4, [sp, #4]
   15804:	str	lr, [sp, #16]
   15808:	str	ip, [sp, #12]
   1580c:	mvn	r3, #0
   15810:	mov	r6, r0
   15814:	bl	12850 <__assert_fail@plt+0x16d4>
   15818:	ldr	r3, [sp, #24]
   1581c:	mov	r0, r6
   15820:	str	r3, [r7]
   15824:	add	sp, sp, #180	; 0xb4
   15828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1582c:	mov	r3, #8
   15830:	sub	r2, r4, r2
   15834:	add	r1, sp, #80	; 0x50
   15838:	str	r3, [sp]
   1583c:	add	r2, r2, #1
   15840:	mvn	r3, #-2147483648	; 0x80000000
   15844:	bl	179a4 <__assert_fail@plt+0x6828>
   15848:	mov	r5, r0
   1584c:	ldm	r8, {r0, r1}
   15850:	str	r5, [r6]
   15854:	stm	r5, {r0, r1}
   15858:	b	1573c <__assert_fail@plt+0x45c0>
   1585c:	bl	11158 <abort@plt>
   15860:	andeq	sl, r2, ip, lsl r1
   15864:	andeq	sl, r2, r0, lsr #4
   15868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1586c:	mov	r7, r1
   15870:	ldr	lr, [pc, #492]	; 15a64 <__assert_fail@plt+0x48e8>
   15874:	mov	r8, r2
   15878:	mov	r4, r0
   1587c:	mov	fp, r3
   15880:	ldm	lr!, {r0, r1, r2, r3}
   15884:	sub	sp, sp, #100	; 0x64
   15888:	add	ip, sp, #48	; 0x30
   1588c:	mov	sl, #10
   15890:	stmia	ip!, {r0, r1, r2, r3}
   15894:	cmp	r8, #0
   15898:	cmpne	r7, #0
   1589c:	ldm	lr!, {r0, r1, r2, r3}
   158a0:	str	sl, [sp, #48]	; 0x30
   158a4:	stmia	ip!, {r0, r1, r2, r3}
   158a8:	ldm	lr, {r0, r1, r2, r3}
   158ac:	stm	ip, {r0, r1, r2, r3}
   158b0:	beq	15a60 <__assert_fail@plt+0x48e4>
   158b4:	str	r7, [sp, #88]	; 0x58
   158b8:	str	r8, [sp, #92]	; 0x5c
   158bc:	bl	11080 <__errno_location@plt>
   158c0:	ldr	r6, [pc, #416]	; 15a68 <__assert_fail@plt+0x48ec>
   158c4:	cmn	r4, #-2147483647	; 0x80000001
   158c8:	ldr	r5, [r6]
   158cc:	mov	r9, r0
   158d0:	movne	r0, #0
   158d4:	moveq	r0, #1
   158d8:	ldr	r3, [r9]
   158dc:	orrs	r0, r0, r4, lsr #31
   158e0:	str	r3, [sp, #28]
   158e4:	bne	15a60 <__assert_fail@plt+0x48e4>
   158e8:	ldr	r2, [r6, #4]
   158ec:	cmp	r4, r2
   158f0:	movlt	r3, sl
   158f4:	blt	15960 <__assert_fail@plt+0x47e4>
   158f8:	add	r7, r6, #8
   158fc:	cmp	r5, r7
   15900:	str	r2, [sp, #44]	; 0x2c
   15904:	beq	15a30 <__assert_fail@plt+0x48b4>
   15908:	mov	r3, #8
   1590c:	sub	r2, r4, r2
   15910:	mov	r0, r5
   15914:	str	r3, [sp]
   15918:	add	r2, r2, #1
   1591c:	mvn	r3, #-2147483648	; 0x80000000
   15920:	add	r1, sp, #44	; 0x2c
   15924:	bl	179a4 <__assert_fail@plt+0x6828>
   15928:	mov	r5, r0
   1592c:	str	r0, [r6]
   15930:	ldr	r0, [r6, #4]
   15934:	ldr	r2, [sp, #44]	; 0x2c
   15938:	mov	r1, #0
   1593c:	sub	r2, r2, r0
   15940:	add	r0, r5, r0, lsl #3
   15944:	lsl	r2, r2, #3
   15948:	bl	110b0 <memset@plt>
   1594c:	ldr	r3, [sp, #48]	; 0x30
   15950:	ldr	r7, [sp, #88]	; 0x58
   15954:	ldr	r8, [sp, #92]	; 0x5c
   15958:	ldr	r2, [sp, #44]	; 0x2c
   1595c:	str	r2, [r6, #4]
   15960:	add	r2, r5, r4, lsl #3
   15964:	mov	r1, r2
   15968:	str	r2, [sp, #32]
   1596c:	ldr	r2, [sp, #52]	; 0x34
   15970:	ldr	r6, [r1, #4]
   15974:	ldr	sl, [r5, r4, lsl #3]
   15978:	orr	r2, r2, #1
   1597c:	str	r3, [sp]
   15980:	add	r3, sp, #56	; 0x38
   15984:	str	r2, [sp, #36]	; 0x24
   15988:	str	r2, [sp, #4]
   1598c:	str	r3, [sp, #8]
   15990:	mov	r0, r6
   15994:	str	r8, [sp, #16]
   15998:	str	r7, [sp, #12]
   1599c:	mov	r1, sl
   159a0:	mvn	r3, #0
   159a4:	mov	r2, fp
   159a8:	bl	12850 <__assert_fail@plt+0x16d4>
   159ac:	cmp	sl, r0
   159b0:	bhi	15a1c <__assert_fail@plt+0x48a0>
   159b4:	ldr	r3, [pc, #176]	; 15a6c <__assert_fail@plt+0x48f0>
   159b8:	add	r7, r0, #1
   159bc:	cmp	r6, r3
   159c0:	str	r7, [r5, r4, lsl #3]
   159c4:	beq	159d0 <__assert_fail@plt+0x4854>
   159c8:	mov	r0, r6
   159cc:	bl	125bc <__assert_fail@plt+0x1440>
   159d0:	mov	r0, r7
   159d4:	bl	17788 <__assert_fail@plt+0x660c>
   159d8:	ldr	r3, [sp, #32]
   159dc:	ldr	lr, [sp, #92]	; 0x5c
   159e0:	ldr	ip, [sp, #88]	; 0x58
   159e4:	ldr	r4, [sp, #36]	; 0x24
   159e8:	mov	r2, fp
   159ec:	mov	r1, r7
   159f0:	str	r0, [r3, #4]
   159f4:	add	r3, sp, #56	; 0x38
   159f8:	str	r3, [sp, #8]
   159fc:	ldr	r3, [sp, #48]	; 0x30
   15a00:	str	r4, [sp, #4]
   15a04:	str	r3, [sp]
   15a08:	str	lr, [sp, #16]
   15a0c:	str	ip, [sp, #12]
   15a10:	mvn	r3, #0
   15a14:	mov	r6, r0
   15a18:	bl	12850 <__assert_fail@plt+0x16d4>
   15a1c:	ldr	r3, [sp, #28]
   15a20:	mov	r0, r6
   15a24:	str	r3, [r9]
   15a28:	add	sp, sp, #100	; 0x64
   15a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a30:	mov	r3, #8
   15a34:	sub	r2, r4, r2
   15a38:	str	r3, [sp]
   15a3c:	add	r1, sp, #44	; 0x2c
   15a40:	add	r2, r2, #1
   15a44:	mvn	r3, #-2147483648	; 0x80000000
   15a48:	bl	179a4 <__assert_fail@plt+0x6828>
   15a4c:	mov	r5, r0
   15a50:	ldm	r7, {r0, r1}
   15a54:	str	r5, [r6]
   15a58:	stm	r5, {r0, r1}
   15a5c:	b	15930 <__assert_fail@plt+0x47b4>
   15a60:	bl	11158 <abort@plt>
   15a64:	strdeq	sl, [r2], -r0
   15a68:	andeq	sl, r2, ip, lsl r1
   15a6c:	andeq	sl, r2, r0, lsr #4
   15a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a74:	mov	r7, r1
   15a78:	ldr	lr, [pc, #492]	; 15c6c <__assert_fail@plt+0x4af0>
   15a7c:	mov	r8, r2
   15a80:	mov	r4, r0
   15a84:	mov	fp, r3
   15a88:	ldm	lr!, {r0, r1, r2, r3}
   15a8c:	sub	sp, sp, #100	; 0x64
   15a90:	add	ip, sp, #48	; 0x30
   15a94:	mov	sl, #10
   15a98:	stmia	ip!, {r0, r1, r2, r3}
   15a9c:	cmp	r8, #0
   15aa0:	cmpne	r7, #0
   15aa4:	ldm	lr!, {r0, r1, r2, r3}
   15aa8:	str	sl, [sp, #48]	; 0x30
   15aac:	stmia	ip!, {r0, r1, r2, r3}
   15ab0:	ldm	lr, {r0, r1, r2, r3}
   15ab4:	stm	ip, {r0, r1, r2, r3}
   15ab8:	beq	15c68 <__assert_fail@plt+0x4aec>
   15abc:	str	r7, [sp, #88]	; 0x58
   15ac0:	str	r8, [sp, #92]	; 0x5c
   15ac4:	bl	11080 <__errno_location@plt>
   15ac8:	ldr	r6, [pc, #416]	; 15c70 <__assert_fail@plt+0x4af4>
   15acc:	cmn	r4, #-2147483647	; 0x80000001
   15ad0:	ldr	r5, [r6]
   15ad4:	mov	r9, r0
   15ad8:	movne	r0, #0
   15adc:	moveq	r0, #1
   15ae0:	ldr	r3, [r9]
   15ae4:	orrs	r0, r0, r4, lsr #31
   15ae8:	str	r3, [sp, #28]
   15aec:	bne	15c68 <__assert_fail@plt+0x4aec>
   15af0:	ldr	r2, [r6, #4]
   15af4:	cmp	r4, r2
   15af8:	movlt	r3, sl
   15afc:	blt	15b68 <__assert_fail@plt+0x49ec>
   15b00:	add	r7, r6, #8
   15b04:	cmp	r5, r7
   15b08:	str	r2, [sp, #44]	; 0x2c
   15b0c:	beq	15c38 <__assert_fail@plt+0x4abc>
   15b10:	mov	r3, #8
   15b14:	sub	r2, r4, r2
   15b18:	mov	r0, r5
   15b1c:	str	r3, [sp]
   15b20:	add	r2, r2, #1
   15b24:	mvn	r3, #-2147483648	; 0x80000000
   15b28:	add	r1, sp, #44	; 0x2c
   15b2c:	bl	179a4 <__assert_fail@plt+0x6828>
   15b30:	mov	r5, r0
   15b34:	str	r0, [r6]
   15b38:	ldr	r0, [r6, #4]
   15b3c:	ldr	r2, [sp, #44]	; 0x2c
   15b40:	mov	r1, #0
   15b44:	sub	r2, r2, r0
   15b48:	add	r0, r5, r0, lsl #3
   15b4c:	lsl	r2, r2, #3
   15b50:	bl	110b0 <memset@plt>
   15b54:	ldr	r3, [sp, #48]	; 0x30
   15b58:	ldr	r7, [sp, #88]	; 0x58
   15b5c:	ldr	r8, [sp, #92]	; 0x5c
   15b60:	ldr	r2, [sp, #44]	; 0x2c
   15b64:	str	r2, [r6, #4]
   15b68:	add	r2, r5, r4, lsl #3
   15b6c:	mov	r1, r2
   15b70:	str	r2, [sp, #32]
   15b74:	ldr	r2, [sp, #52]	; 0x34
   15b78:	ldr	r6, [r1, #4]
   15b7c:	ldr	sl, [r5, r4, lsl #3]
   15b80:	orr	r2, r2, #1
   15b84:	str	r3, [sp]
   15b88:	add	r3, sp, #56	; 0x38
   15b8c:	str	r2, [sp, #36]	; 0x24
   15b90:	str	r2, [sp, #4]
   15b94:	str	r3, [sp, #8]
   15b98:	mov	r0, r6
   15b9c:	str	r8, [sp, #16]
   15ba0:	str	r7, [sp, #12]
   15ba4:	mov	r1, sl
   15ba8:	ldr	r3, [sp, #136]	; 0x88
   15bac:	mov	r2, fp
   15bb0:	bl	12850 <__assert_fail@plt+0x16d4>
   15bb4:	cmp	sl, r0
   15bb8:	bhi	15c24 <__assert_fail@plt+0x4aa8>
   15bbc:	ldr	r3, [pc, #176]	; 15c74 <__assert_fail@plt+0x4af8>
   15bc0:	add	r7, r0, #1
   15bc4:	cmp	r6, r3
   15bc8:	str	r7, [r5, r4, lsl #3]
   15bcc:	beq	15bd8 <__assert_fail@plt+0x4a5c>
   15bd0:	mov	r0, r6
   15bd4:	bl	125bc <__assert_fail@plt+0x1440>
   15bd8:	mov	r0, r7
   15bdc:	bl	17788 <__assert_fail@plt+0x660c>
   15be0:	ldr	r3, [sp, #32]
   15be4:	ldr	lr, [sp, #92]	; 0x5c
   15be8:	ldr	ip, [sp, #88]	; 0x58
   15bec:	ldr	r4, [sp, #36]	; 0x24
   15bf0:	mov	r2, fp
   15bf4:	mov	r1, r7
   15bf8:	str	r0, [r3, #4]
   15bfc:	add	r3, sp, #56	; 0x38
   15c00:	str	r3, [sp, #8]
   15c04:	ldr	r3, [sp, #48]	; 0x30
   15c08:	str	r4, [sp, #4]
   15c0c:	str	r3, [sp]
   15c10:	str	lr, [sp, #16]
   15c14:	str	ip, [sp, #12]
   15c18:	ldr	r3, [sp, #136]	; 0x88
   15c1c:	mov	r6, r0
   15c20:	bl	12850 <__assert_fail@plt+0x16d4>
   15c24:	ldr	r3, [sp, #28]
   15c28:	mov	r0, r6
   15c2c:	str	r3, [r9]
   15c30:	add	sp, sp, #100	; 0x64
   15c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c38:	mov	r3, #8
   15c3c:	sub	r2, r4, r2
   15c40:	str	r3, [sp]
   15c44:	add	r1, sp, #44	; 0x2c
   15c48:	add	r2, r2, #1
   15c4c:	mvn	r3, #-2147483648	; 0x80000000
   15c50:	bl	179a4 <__assert_fail@plt+0x6828>
   15c54:	mov	r5, r0
   15c58:	ldm	r7, {r0, r1}
   15c5c:	str	r5, [r6]
   15c60:	stm	r5, {r0, r1}
   15c64:	b	15b38 <__assert_fail@plt+0x49bc>
   15c68:	bl	11158 <abort@plt>
   15c6c:	strdeq	sl, [r2], -r0
   15c70:	andeq	sl, r2, ip, lsl r1
   15c74:	andeq	sl, r2, r0, lsr #4
   15c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c7c:	mov	r5, r0
   15c80:	ldr	lr, [pc, #452]	; 15e4c <__assert_fail@plt+0x4cd0>
   15c84:	mov	r6, r1
   15c88:	mov	sl, r2
   15c8c:	ldm	lr!, {r0, r1, r2, r3}
   15c90:	sub	sp, sp, #92	; 0x5c
   15c94:	add	ip, sp, #40	; 0x28
   15c98:	cmp	r6, #0
   15c9c:	cmpne	r5, #0
   15ca0:	stmia	ip!, {r0, r1, r2, r3}
   15ca4:	mov	r9, #10
   15ca8:	ldm	lr!, {r0, r1, r2, r3}
   15cac:	moveq	fp, #1
   15cb0:	movne	fp, #0
   15cb4:	str	r9, [sp, #40]	; 0x28
   15cb8:	stmia	ip!, {r0, r1, r2, r3}
   15cbc:	ldm	lr, {r0, r1, r2, r3}
   15cc0:	stm	ip, {r0, r1, r2, r3}
   15cc4:	beq	15e48 <__assert_fail@plt+0x4ccc>
   15cc8:	str	r5, [sp, #80]	; 0x50
   15ccc:	str	r6, [sp, #84]	; 0x54
   15cd0:	bl	11080 <__errno_location@plt>
   15cd4:	ldr	r7, [pc, #372]	; 15e50 <__assert_fail@plt+0x4cd4>
   15cd8:	ldr	r2, [r7, #4]
   15cdc:	ldr	r4, [r7]
   15ce0:	cmp	r2, #0
   15ce4:	ldr	r3, [r0]
   15ce8:	mov	r8, r0
   15cec:	str	r3, [sp, #24]
   15cf0:	movgt	r3, r9
   15cf4:	bgt	15d5c <__assert_fail@plt+0x4be0>
   15cf8:	add	r5, r7, #8
   15cfc:	cmp	r4, r5
   15d00:	str	r2, [sp, #36]	; 0x24
   15d04:	beq	15e18 <__assert_fail@plt+0x4c9c>
   15d08:	mov	r3, #8
   15d0c:	mov	r0, r4
   15d10:	str	r3, [sp]
   15d14:	rsb	r2, r2, #1
   15d18:	mvn	r3, #-2147483648	; 0x80000000
   15d1c:	add	r1, sp, #36	; 0x24
   15d20:	bl	179a4 <__assert_fail@plt+0x6828>
   15d24:	mov	r4, r0
   15d28:	str	r0, [r7]
   15d2c:	ldr	r0, [r7, #4]
   15d30:	ldr	r2, [sp, #36]	; 0x24
   15d34:	mov	r1, #0
   15d38:	sub	r2, r2, r0
   15d3c:	add	r0, r4, r0, lsl #3
   15d40:	lsl	r2, r2, #3
   15d44:	bl	110b0 <memset@plt>
   15d48:	ldr	r3, [sp, #40]	; 0x28
   15d4c:	ldr	r5, [sp, #80]	; 0x50
   15d50:	ldr	r6, [sp, #84]	; 0x54
   15d54:	ldr	r2, [sp, #36]	; 0x24
   15d58:	str	r2, [r7, #4]
   15d5c:	ldr	r2, [sp, #44]	; 0x2c
   15d60:	ldr	r9, [r4]
   15d64:	ldr	r7, [r4, #4]
   15d68:	orr	r2, r2, #1
   15d6c:	add	fp, sp, #48	; 0x30
   15d70:	str	r2, [sp, #28]
   15d74:	str	r2, [sp, #4]
   15d78:	str	r3, [sp]
   15d7c:	str	r6, [sp, #16]
   15d80:	str	r5, [sp, #12]
   15d84:	mov	r1, r9
   15d88:	mov	r0, r7
   15d8c:	str	fp, [sp, #8]
   15d90:	mvn	r3, #0
   15d94:	mov	r2, sl
   15d98:	bl	12850 <__assert_fail@plt+0x16d4>
   15d9c:	cmp	r9, r0
   15da0:	bhi	15e04 <__assert_fail@plt+0x4c88>
   15da4:	ldr	r3, [pc, #168]	; 15e54 <__assert_fail@plt+0x4cd8>
   15da8:	add	r5, r0, #1
   15dac:	cmp	r7, r3
   15db0:	str	r5, [r4]
   15db4:	beq	15dc0 <__assert_fail@plt+0x4c44>
   15db8:	mov	r0, r7
   15dbc:	bl	125bc <__assert_fail@plt+0x1440>
   15dc0:	mov	r0, r5
   15dc4:	bl	17788 <__assert_fail@plt+0x660c>
   15dc8:	ldr	lr, [sp, #84]	; 0x54
   15dcc:	ldr	r3, [sp, #40]	; 0x28
   15dd0:	ldr	ip, [sp, #80]	; 0x50
   15dd4:	mov	r2, sl
   15dd8:	mov	r1, r5
   15ddc:	str	r0, [r4, #4]
   15de0:	ldr	r4, [sp, #28]
   15de4:	str	r3, [sp]
   15de8:	str	fp, [sp, #8]
   15dec:	str	r4, [sp, #4]
   15df0:	str	lr, [sp, #16]
   15df4:	str	ip, [sp, #12]
   15df8:	mvn	r3, #0
   15dfc:	mov	r7, r0
   15e00:	bl	12850 <__assert_fail@plt+0x16d4>
   15e04:	ldr	r3, [sp, #24]
   15e08:	mov	r0, r7
   15e0c:	str	r3, [r8]
   15e10:	add	sp, sp, #92	; 0x5c
   15e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e18:	mov	r3, #8
   15e1c:	str	r3, [sp]
   15e20:	add	r1, sp, #36	; 0x24
   15e24:	rsb	r2, r2, #1
   15e28:	mov	r0, fp
   15e2c:	mvn	r3, #-2147483648	; 0x80000000
   15e30:	bl	179a4 <__assert_fail@plt+0x6828>
   15e34:	mov	r4, r0
   15e38:	ldm	r5, {r0, r1}
   15e3c:	str	r4, [r7]
   15e40:	stm	r4, {r0, r1}
   15e44:	b	15d2c <__assert_fail@plt+0x4bb0>
   15e48:	bl	11158 <abort@plt>
   15e4c:	strdeq	sl, [r2], -r0
   15e50:	andeq	sl, r2, ip, lsl r1
   15e54:	andeq	sl, r2, r0, lsr #4
   15e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e5c:	mov	r5, r0
   15e60:	ldr	lr, [pc, #464]	; 16038 <__assert_fail@plt+0x4ebc>
   15e64:	mov	r6, r1
   15e68:	mov	sl, r2
   15e6c:	mov	fp, r3
   15e70:	ldm	lr!, {r0, r1, r2, r3}
   15e74:	sub	sp, sp, #92	; 0x5c
   15e78:	add	ip, sp, #40	; 0x28
   15e7c:	cmp	r6, #0
   15e80:	cmpne	r5, #0
   15e84:	stmia	ip!, {r0, r1, r2, r3}
   15e88:	moveq	r4, #1
   15e8c:	ldm	lr!, {r0, r1, r2, r3}
   15e90:	movne	r4, #0
   15e94:	mov	r9, #10
   15e98:	str	r4, [sp, #28]
   15e9c:	stmia	ip!, {r0, r1, r2, r3}
   15ea0:	ldm	lr, {r0, r1, r2, r3}
   15ea4:	str	r9, [sp, #40]	; 0x28
   15ea8:	stm	ip, {r0, r1, r2, r3}
   15eac:	beq	16034 <__assert_fail@plt+0x4eb8>
   15eb0:	str	r5, [sp, #80]	; 0x50
   15eb4:	str	r6, [sp, #84]	; 0x54
   15eb8:	bl	11080 <__errno_location@plt>
   15ebc:	ldr	r7, [pc, #376]	; 1603c <__assert_fail@plt+0x4ec0>
   15ec0:	ldr	r2, [r7, #4]
   15ec4:	ldr	r4, [r7]
   15ec8:	cmp	r2, #0
   15ecc:	ldr	r3, [r0]
   15ed0:	mov	r8, r0
   15ed4:	str	r3, [sp, #24]
   15ed8:	movgt	r3, r9
   15edc:	bgt	15f44 <__assert_fail@plt+0x4dc8>
   15ee0:	add	r5, r7, #8
   15ee4:	cmp	r4, r5
   15ee8:	str	r2, [sp, #36]	; 0x24
   15eec:	beq	16004 <__assert_fail@plt+0x4e88>
   15ef0:	mov	r3, #8
   15ef4:	mov	r0, r4
   15ef8:	str	r3, [sp]
   15efc:	rsb	r2, r2, #1
   15f00:	mvn	r3, #-2147483648	; 0x80000000
   15f04:	add	r1, sp, #36	; 0x24
   15f08:	bl	179a4 <__assert_fail@plt+0x6828>
   15f0c:	mov	r4, r0
   15f10:	str	r0, [r7]
   15f14:	ldr	r0, [r7, #4]
   15f18:	ldr	r2, [sp, #36]	; 0x24
   15f1c:	mov	r1, #0
   15f20:	sub	r2, r2, r0
   15f24:	add	r0, r4, r0, lsl #3
   15f28:	lsl	r2, r2, #3
   15f2c:	bl	110b0 <memset@plt>
   15f30:	ldr	r3, [sp, #40]	; 0x28
   15f34:	ldr	r5, [sp, #80]	; 0x50
   15f38:	ldr	r6, [sp, #84]	; 0x54
   15f3c:	ldr	r2, [sp, #36]	; 0x24
   15f40:	str	r2, [r7, #4]
   15f44:	ldr	r2, [sp, #44]	; 0x2c
   15f48:	ldr	r9, [r4]
   15f4c:	ldr	r7, [r4, #4]
   15f50:	orr	r2, r2, #1
   15f54:	str	r3, [sp]
   15f58:	add	r3, sp, #48	; 0x30
   15f5c:	str	r2, [sp, #28]
   15f60:	str	r2, [sp, #4]
   15f64:	str	r3, [sp, #8]
   15f68:	str	r6, [sp, #16]
   15f6c:	str	r5, [sp, #12]
   15f70:	mov	r1, r9
   15f74:	mov	r0, r7
   15f78:	mov	r3, fp
   15f7c:	mov	r2, sl
   15f80:	bl	12850 <__assert_fail@plt+0x16d4>
   15f84:	cmp	r9, r0
   15f88:	bhi	15ff0 <__assert_fail@plt+0x4e74>
   15f8c:	ldr	r3, [pc, #172]	; 16040 <__assert_fail@plt+0x4ec4>
   15f90:	add	r5, r0, #1
   15f94:	cmp	r7, r3
   15f98:	str	r5, [r4]
   15f9c:	beq	15fa8 <__assert_fail@plt+0x4e2c>
   15fa0:	mov	r0, r7
   15fa4:	bl	125bc <__assert_fail@plt+0x1440>
   15fa8:	mov	r0, r5
   15fac:	bl	17788 <__assert_fail@plt+0x660c>
   15fb0:	add	lr, sp, #48	; 0x30
   15fb4:	ldr	ip, [sp, #84]	; 0x54
   15fb8:	mov	r1, r5
   15fbc:	ldr	r5, [sp, #28]
   15fc0:	mov	r3, fp
   15fc4:	mov	r2, sl
   15fc8:	str	r0, [r4, #4]
   15fcc:	ldr	r4, [sp, #80]	; 0x50
   15fd0:	str	lr, [sp, #8]
   15fd4:	ldr	lr, [sp, #40]	; 0x28
   15fd8:	str	r5, [sp, #4]
   15fdc:	str	ip, [sp, #16]
   15fe0:	str	r4, [sp, #12]
   15fe4:	str	lr, [sp]
   15fe8:	mov	r7, r0
   15fec:	bl	12850 <__assert_fail@plt+0x16d4>
   15ff0:	ldr	r3, [sp, #24]
   15ff4:	mov	r0, r7
   15ff8:	str	r3, [r8]
   15ffc:	add	sp, sp, #92	; 0x5c
   16000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16004:	mov	r3, #8
   16008:	str	r3, [sp]
   1600c:	add	r1, sp, #36	; 0x24
   16010:	rsb	r2, r2, #1
   16014:	ldr	r0, [sp, #28]
   16018:	mvn	r3, #-2147483648	; 0x80000000
   1601c:	bl	179a4 <__assert_fail@plt+0x6828>
   16020:	mov	r4, r0
   16024:	ldm	r5, {r0, r1}
   16028:	str	r4, [r7]
   1602c:	stm	r4, {r0, r1}
   16030:	b	15f14 <__assert_fail@plt+0x4d98>
   16034:	bl	11158 <abort@plt>
   16038:	strdeq	sl, [r2], -r0
   1603c:	andeq	sl, r2, ip, lsl r1
   16040:	andeq	sl, r2, r0, lsr #4
   16044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16048:	sub	sp, sp, #52	; 0x34
   1604c:	mov	r5, r0
   16050:	mov	sl, r1
   16054:	mov	fp, r2
   16058:	bl	11080 <__errno_location@plt>
   1605c:	ldr	r4, [pc, #404]	; 161f8 <__assert_fail@plt+0x507c>
   16060:	cmn	r5, #-2147483647	; 0x80000001
   16064:	ldr	r6, [r4]
   16068:	mov	r8, r0
   1606c:	movne	r0, #0
   16070:	moveq	r0, #1
   16074:	ldr	r3, [r8]
   16078:	orrs	r0, r0, r5, lsr #31
   1607c:	str	r3, [sp, #28]
   16080:	bne	161f4 <__assert_fail@plt+0x5078>
   16084:	ldr	r2, [r4, #4]
   16088:	cmp	r5, r2
   1608c:	blt	160ec <__assert_fail@plt+0x4f70>
   16090:	add	r7, r4, #8
   16094:	cmp	r6, r7
   16098:	str	r2, [sp, #44]	; 0x2c
   1609c:	beq	161c4 <__assert_fail@plt+0x5048>
   160a0:	mov	r3, #8
   160a4:	sub	r2, r5, r2
   160a8:	mov	r0, r6
   160ac:	str	r3, [sp]
   160b0:	add	r2, r2, #1
   160b4:	mvn	r3, #-2147483648	; 0x80000000
   160b8:	add	r1, sp, #44	; 0x2c
   160bc:	bl	179a4 <__assert_fail@plt+0x6828>
   160c0:	mov	r6, r0
   160c4:	str	r0, [r4]
   160c8:	ldr	r0, [r4, #4]
   160cc:	ldr	r2, [sp, #44]	; 0x2c
   160d0:	mov	r1, #0
   160d4:	sub	r2, r2, r0
   160d8:	add	r0, r6, r0, lsl #3
   160dc:	lsl	r2, r2, #3
   160e0:	bl	110b0 <memset@plt>
   160e4:	ldr	r3, [sp, #44]	; 0x2c
   160e8:	str	r3, [r4, #4]
   160ec:	ldr	r2, [r4, #56]	; 0x38
   160f0:	add	r3, r6, r5, lsl #3
   160f4:	ldr	r1, [r4, #20]
   160f8:	ldr	r7, [r3, #4]
   160fc:	ldr	r9, [r6, r5, lsl #3]
   16100:	ldr	ip, [r4, #60]	; 0x3c
   16104:	str	r3, [sp, #32]
   16108:	ldr	r3, [r4, #16]
   1610c:	str	r2, [sp, #12]
   16110:	ldr	r2, [pc, #228]	; 161fc <__assert_fail@plt+0x5080>
   16114:	orr	r1, r1, #1
   16118:	str	r1, [sp, #36]	; 0x24
   1611c:	str	r1, [sp, #4]
   16120:	str	r2, [sp, #8]
   16124:	str	r3, [sp]
   16128:	mov	r0, r7
   1612c:	mov	r1, r9
   16130:	str	ip, [sp, #16]
   16134:	mov	r3, fp
   16138:	mov	r2, sl
   1613c:	bl	12850 <__assert_fail@plt+0x16d4>
   16140:	cmp	r9, r0
   16144:	bhi	161b0 <__assert_fail@plt+0x5034>
   16148:	ldr	r3, [pc, #176]	; 16200 <__assert_fail@plt+0x5084>
   1614c:	add	r9, r0, #1
   16150:	cmp	r7, r3
   16154:	str	r9, [r6, r5, lsl #3]
   16158:	beq	16164 <__assert_fail@plt+0x4fe8>
   1615c:	mov	r0, r7
   16160:	bl	125bc <__assert_fail@plt+0x1440>
   16164:	mov	r0, r9
   16168:	bl	17788 <__assert_fail@plt+0x660c>
   1616c:	ldr	ip, [sp, #32]
   16170:	ldr	lr, [r4, #60]	; 0x3c
   16174:	ldr	r5, [r4, #56]	; 0x38
   16178:	mov	r3, fp
   1617c:	mov	r2, sl
   16180:	mov	r1, r9
   16184:	str	r0, [ip, #4]
   16188:	ldr	ip, [r4, #16]
   1618c:	ldr	r4, [pc, #104]	; 161fc <__assert_fail@plt+0x5080>
   16190:	str	lr, [sp, #16]
   16194:	str	r4, [sp, #8]
   16198:	ldr	r4, [sp, #36]	; 0x24
   1619c:	str	r5, [sp, #12]
   161a0:	str	r4, [sp, #4]
   161a4:	str	ip, [sp]
   161a8:	mov	r7, r0
   161ac:	bl	12850 <__assert_fail@plt+0x16d4>
   161b0:	ldr	r3, [sp, #28]
   161b4:	mov	r0, r7
   161b8:	str	r3, [r8]
   161bc:	add	sp, sp, #52	; 0x34
   161c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161c4:	mov	r3, #8
   161c8:	sub	r2, r5, r2
   161cc:	str	r3, [sp]
   161d0:	add	r1, sp, #44	; 0x2c
   161d4:	add	r2, r2, #1
   161d8:	mvn	r3, #-2147483648	; 0x80000000
   161dc:	bl	179a4 <__assert_fail@plt+0x6828>
   161e0:	mov	r6, r0
   161e4:	ldm	r7, {r0, r1}
   161e8:	str	r6, [r4]
   161ec:	stm	r6, {r0, r1}
   161f0:	b	160c8 <__assert_fail@plt+0x4f4c>
   161f4:	bl	11158 <abort@plt>
   161f8:	andeq	sl, r2, ip, lsl r1
   161fc:	andeq	sl, r2, r4, lsr r1
   16200:	andeq	sl, r2, r0, lsr #4
   16204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16208:	sub	sp, sp, #44	; 0x2c
   1620c:	mov	r9, r0
   16210:	mov	sl, r1
   16214:	bl	11080 <__errno_location@plt>
   16218:	ldr	r4, [pc, #360]	; 16388 <__assert_fail@plt+0x520c>
   1621c:	ldr	r2, [r4, #4]
   16220:	ldr	r5, [r4]
   16224:	cmp	r2, #0
   16228:	ldr	r3, [r0]
   1622c:	mov	r7, r0
   16230:	str	r3, [sp, #24]
   16234:	bgt	16290 <__assert_fail@plt+0x5114>
   16238:	add	r6, r4, #8
   1623c:	cmp	r5, r6
   16240:	str	r2, [sp, #36]	; 0x24
   16244:	beq	16358 <__assert_fail@plt+0x51dc>
   16248:	mov	r3, #8
   1624c:	mov	r0, r5
   16250:	str	r3, [sp]
   16254:	rsb	r2, r2, #1
   16258:	mvn	r3, #-2147483648	; 0x80000000
   1625c:	add	r1, sp, #36	; 0x24
   16260:	bl	179a4 <__assert_fail@plt+0x6828>
   16264:	mov	r5, r0
   16268:	str	r0, [r4]
   1626c:	ldr	r0, [r4, #4]
   16270:	ldr	r2, [sp, #36]	; 0x24
   16274:	mov	r1, #0
   16278:	sub	r2, r2, r0
   1627c:	add	r0, r5, r0, lsl #3
   16280:	lsl	r2, r2, #3
   16284:	bl	110b0 <memset@plt>
   16288:	ldr	r3, [sp, #36]	; 0x24
   1628c:	str	r3, [r4, #4]
   16290:	ldr	r1, [r4, #20]
   16294:	ldr	r8, [r5]
   16298:	ldr	r6, [r5, #4]
   1629c:	ldr	r2, [r4, #56]	; 0x38
   162a0:	ldr	r3, [r4, #16]
   162a4:	ldr	ip, [r4, #60]	; 0x3c
   162a8:	ldr	fp, [pc, #220]	; 1638c <__assert_fail@plt+0x5210>
   162ac:	orr	r1, r1, #1
   162b0:	str	r1, [sp, #28]
   162b4:	str	r1, [sp, #4]
   162b8:	str	r2, [sp, #12]
   162bc:	str	r3, [sp]
   162c0:	mov	r1, r8
   162c4:	mov	r0, r6
   162c8:	str	ip, [sp, #16]
   162cc:	str	fp, [sp, #8]
   162d0:	mov	r3, sl
   162d4:	mov	r2, r9
   162d8:	bl	12850 <__assert_fail@plt+0x16d4>
   162dc:	cmp	r8, r0
   162e0:	bhi	16344 <__assert_fail@plt+0x51c8>
   162e4:	ldr	r3, [pc, #164]	; 16390 <__assert_fail@plt+0x5214>
   162e8:	add	r8, r0, #1
   162ec:	cmp	r6, r3
   162f0:	str	r8, [r5]
   162f4:	beq	16300 <__assert_fail@plt+0x5184>
   162f8:	mov	r0, r6
   162fc:	bl	125bc <__assert_fail@plt+0x1440>
   16300:	mov	r0, r8
   16304:	bl	17788 <__assert_fail@plt+0x660c>
   16308:	ldr	lr, [r4, #60]	; 0x3c
   1630c:	ldr	ip, [r4, #16]
   16310:	mov	r3, sl
   16314:	mov	r2, r9
   16318:	mov	r1, r8
   1631c:	str	r0, [r5, #4]
   16320:	ldr	r5, [r4, #56]	; 0x38
   16324:	ldr	r4, [sp, #28]
   16328:	str	fp, [sp, #8]
   1632c:	str	r4, [sp, #4]
   16330:	str	lr, [sp, #16]
   16334:	str	r5, [sp, #12]
   16338:	str	ip, [sp]
   1633c:	mov	r6, r0
   16340:	bl	12850 <__assert_fail@plt+0x16d4>
   16344:	ldr	r3, [sp, #24]
   16348:	mov	r0, r6
   1634c:	str	r3, [r7]
   16350:	add	sp, sp, #44	; 0x2c
   16354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16358:	mov	r3, #8
   1635c:	str	r3, [sp]
   16360:	add	r1, sp, #36	; 0x24
   16364:	rsb	r2, r2, #1
   16368:	mvn	r3, #-2147483648	; 0x80000000
   1636c:	mov	r0, #0
   16370:	bl	179a4 <__assert_fail@plt+0x6828>
   16374:	mov	r5, r0
   16378:	ldm	r6, {r0, r1}
   1637c:	str	r5, [r4]
   16380:	stm	r5, {r0, r1}
   16384:	b	1626c <__assert_fail@plt+0x50f0>
   16388:	andeq	sl, r2, ip, lsl r1
   1638c:	andeq	sl, r2, r4, lsr r1
   16390:	andeq	sl, r2, r0, lsr #4
   16394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16398:	sub	sp, sp, #44	; 0x2c
   1639c:	mov	r5, r0
   163a0:	mov	sl, r1
   163a4:	bl	11080 <__errno_location@plt>
   163a8:	ldr	r4, [pc, #396]	; 1653c <__assert_fail@plt+0x53c0>
   163ac:	cmn	r5, #-2147483647	; 0x80000001
   163b0:	ldr	r6, [r4]
   163b4:	mov	r8, r0
   163b8:	movne	r0, #0
   163bc:	moveq	r0, #1
   163c0:	ldr	r3, [r8]
   163c4:	orrs	r0, r0, r5, lsr #31
   163c8:	str	r3, [sp, #24]
   163cc:	bne	16538 <__assert_fail@plt+0x53bc>
   163d0:	ldr	r2, [r4, #4]
   163d4:	cmp	r5, r2
   163d8:	blt	16438 <__assert_fail@plt+0x52bc>
   163dc:	add	r7, r4, #8
   163e0:	cmp	r6, r7
   163e4:	str	r2, [sp, #36]	; 0x24
   163e8:	beq	16508 <__assert_fail@plt+0x538c>
   163ec:	mov	r3, #8
   163f0:	sub	r2, r5, r2
   163f4:	mov	r0, r6
   163f8:	str	r3, [sp]
   163fc:	add	r2, r2, #1
   16400:	mvn	r3, #-2147483648	; 0x80000000
   16404:	add	r1, sp, #36	; 0x24
   16408:	bl	179a4 <__assert_fail@plt+0x6828>
   1640c:	mov	r6, r0
   16410:	str	r0, [r4]
   16414:	ldr	r0, [r4, #4]
   16418:	ldr	r2, [sp, #36]	; 0x24
   1641c:	mov	r1, #0
   16420:	sub	r2, r2, r0
   16424:	add	r0, r6, r0, lsl #3
   16428:	lsl	r2, r2, #3
   1642c:	bl	110b0 <memset@plt>
   16430:	ldr	r3, [sp, #36]	; 0x24
   16434:	str	r3, [r4, #4]
   16438:	ldr	r2, [r4, #56]	; 0x38
   1643c:	add	fp, r6, r5, lsl #3
   16440:	ldr	r1, [r4, #20]
   16444:	ldr	r9, [r6, r5, lsl #3]
   16448:	ldr	r7, [fp, #4]
   1644c:	ldr	r3, [r4, #16]
   16450:	ldr	ip, [r4, #60]	; 0x3c
   16454:	str	r2, [sp, #12]
   16458:	ldr	r2, [pc, #224]	; 16540 <__assert_fail@plt+0x53c4>
   1645c:	orr	r1, r1, #1
   16460:	str	r1, [sp, #28]
   16464:	str	r1, [sp, #4]
   16468:	str	r2, [sp, #8]
   1646c:	str	r3, [sp]
   16470:	mov	r0, r7
   16474:	mov	r1, r9
   16478:	str	ip, [sp, #16]
   1647c:	mvn	r3, #0
   16480:	mov	r2, sl
   16484:	bl	12850 <__assert_fail@plt+0x16d4>
   16488:	cmp	r9, r0
   1648c:	bhi	164f4 <__assert_fail@plt+0x5378>
   16490:	ldr	r3, [pc, #172]	; 16544 <__assert_fail@plt+0x53c8>
   16494:	add	r9, r0, #1
   16498:	cmp	r7, r3
   1649c:	str	r9, [r6, r5, lsl #3]
   164a0:	beq	164ac <__assert_fail@plt+0x5330>
   164a4:	mov	r0, r7
   164a8:	bl	125bc <__assert_fail@plt+0x1440>
   164ac:	mov	r0, r9
   164b0:	bl	17788 <__assert_fail@plt+0x660c>
   164b4:	ldr	ip, [r4, #60]	; 0x3c
   164b8:	ldr	r3, [r4, #16]
   164bc:	ldr	lr, [r4, #56]	; 0x38
   164c0:	ldr	r4, [pc, #120]	; 16540 <__assert_fail@plt+0x53c4>
   164c4:	mov	r2, sl
   164c8:	mov	r1, r9
   164cc:	str	r0, [fp, #4]
   164d0:	str	r4, [sp, #8]
   164d4:	ldr	r4, [sp, #28]
   164d8:	str	r3, [sp]
   164dc:	str	r4, [sp, #4]
   164e0:	str	ip, [sp, #16]
   164e4:	str	lr, [sp, #12]
   164e8:	mvn	r3, #0
   164ec:	mov	r7, r0
   164f0:	bl	12850 <__assert_fail@plt+0x16d4>
   164f4:	ldr	r3, [sp, #24]
   164f8:	mov	r0, r7
   164fc:	str	r3, [r8]
   16500:	add	sp, sp, #44	; 0x2c
   16504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16508:	mov	r3, #8
   1650c:	sub	r2, r5, r2
   16510:	str	r3, [sp]
   16514:	add	r1, sp, #36	; 0x24
   16518:	add	r2, r2, #1
   1651c:	mvn	r3, #-2147483648	; 0x80000000
   16520:	bl	179a4 <__assert_fail@plt+0x6828>
   16524:	mov	r6, r0
   16528:	ldm	r7, {r0, r1}
   1652c:	str	r6, [r4]
   16530:	stm	r6, {r0, r1}
   16534:	b	16414 <__assert_fail@plt+0x5298>
   16538:	bl	11158 <abort@plt>
   1653c:	andeq	sl, r2, ip, lsl r1
   16540:	andeq	sl, r2, r4, lsr r1
   16544:	andeq	sl, r2, r0, lsr #4
   16548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1654c:	sub	sp, sp, #44	; 0x2c
   16550:	mov	sl, r0
   16554:	bl	11080 <__errno_location@plt>
   16558:	ldr	r4, [pc, #348]	; 166bc <__assert_fail@plt+0x5540>
   1655c:	ldr	r2, [r4, #4]
   16560:	ldr	r5, [r4]
   16564:	cmp	r2, #0
   16568:	ldr	r3, [r0]
   1656c:	mov	r8, r0
   16570:	str	r3, [sp, #28]
   16574:	bgt	165d0 <__assert_fail@plt+0x5454>
   16578:	add	r6, r4, #8
   1657c:	cmp	r5, r6
   16580:	str	r2, [sp, #36]	; 0x24
   16584:	beq	1668c <__assert_fail@plt+0x5510>
   16588:	mov	r3, #8
   1658c:	mov	r0, r5
   16590:	str	r3, [sp]
   16594:	rsb	r2, r2, #1
   16598:	mvn	r3, #-2147483648	; 0x80000000
   1659c:	add	r1, sp, #36	; 0x24
   165a0:	bl	179a4 <__assert_fail@plt+0x6828>
   165a4:	mov	r5, r0
   165a8:	str	r0, [r4]
   165ac:	ldr	r0, [r4, #4]
   165b0:	ldr	r2, [sp, #36]	; 0x24
   165b4:	mov	r1, #0
   165b8:	sub	r2, r2, r0
   165bc:	add	r0, r5, r0, lsl #3
   165c0:	lsl	r2, r2, #3
   165c4:	bl	110b0 <memset@plt>
   165c8:	ldr	r3, [sp, #36]	; 0x24
   165cc:	str	r3, [r4, #4]
   165d0:	ldr	r7, [r4, #20]
   165d4:	ldr	r9, [r5]
   165d8:	ldr	r6, [r5, #4]
   165dc:	ldr	r2, [r4, #56]	; 0x38
   165e0:	ldr	r3, [r4, #16]
   165e4:	ldr	ip, [r4, #60]	; 0x3c
   165e8:	ldr	fp, [pc, #208]	; 166c0 <__assert_fail@plt+0x5544>
   165ec:	orr	r7, r7, #1
   165f0:	str	r2, [sp, #12]
   165f4:	str	r3, [sp]
   165f8:	str	r7, [sp, #4]
   165fc:	mov	r1, r9
   16600:	mov	r0, r6
   16604:	str	ip, [sp, #16]
   16608:	str	fp, [sp, #8]
   1660c:	mvn	r3, #0
   16610:	mov	r2, sl
   16614:	bl	12850 <__assert_fail@plt+0x16d4>
   16618:	cmp	r9, r0
   1661c:	bhi	16678 <__assert_fail@plt+0x54fc>
   16620:	ldr	r3, [pc, #156]	; 166c4 <__assert_fail@plt+0x5548>
   16624:	add	r9, r0, #1
   16628:	cmp	r6, r3
   1662c:	str	r9, [r5]
   16630:	beq	1663c <__assert_fail@plt+0x54c0>
   16634:	mov	r0, r6
   16638:	bl	125bc <__assert_fail@plt+0x1440>
   1663c:	mov	r0, r9
   16640:	bl	17788 <__assert_fail@plt+0x660c>
   16644:	ldr	ip, [r4, #60]	; 0x3c
   16648:	ldr	r3, [r4, #16]
   1664c:	ldr	lr, [r4, #56]	; 0x38
   16650:	mov	r2, sl
   16654:	mov	r1, r9
   16658:	str	r0, [r5, #4]
   1665c:	str	r3, [sp]
   16660:	stmib	sp, {r7, fp}
   16664:	str	ip, [sp, #16]
   16668:	str	lr, [sp, #12]
   1666c:	mvn	r3, #0
   16670:	mov	r6, r0
   16674:	bl	12850 <__assert_fail@plt+0x16d4>
   16678:	ldr	r3, [sp, #28]
   1667c:	mov	r0, r6
   16680:	str	r3, [r8]
   16684:	add	sp, sp, #44	; 0x2c
   16688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1668c:	mov	r3, #8
   16690:	str	r3, [sp]
   16694:	add	r1, sp, #36	; 0x24
   16698:	rsb	r2, r2, #1
   1669c:	mvn	r3, #-2147483648	; 0x80000000
   166a0:	mov	r0, #0
   166a4:	bl	179a4 <__assert_fail@plt+0x6828>
   166a8:	mov	r5, r0
   166ac:	ldm	r6, {r0, r1}
   166b0:	str	r5, [r4]
   166b4:	stm	r5, {r0, r1}
   166b8:	b	165ac <__assert_fail@plt+0x5430>
   166bc:	andeq	sl, r2, ip, lsl r1
   166c0:	andeq	sl, r2, r4, lsr r1
   166c4:	andeq	sl, r2, r0, lsr #4
   166c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166cc:	sub	sp, sp, #52	; 0x34
   166d0:	cmp	r2, #0
   166d4:	mov	r4, r2
   166d8:	str	r2, [sp, #8]
   166dc:	mov	r5, r1
   166e0:	str	r1, [sp, #20]
   166e4:	mov	sl, r3
   166e8:	mov	r8, r0
   166ec:	beq	16a48 <__assert_fail@plt+0x58cc>
   166f0:	mov	r1, #58	; 0x3a
   166f4:	bl	11074 <strchr@plt>
   166f8:	ldr	r3, [r5]
   166fc:	mov	r2, r4
   16700:	str	r3, [sp, #12]
   16704:	ldr	r3, [r4]
   16708:	str	r3, [sp, #16]
   1670c:	clz	r5, r0
   16710:	mov	r4, r0
   16714:	lsr	r5, r5, #5
   16718:	cmp	sl, #0
   1671c:	movne	r3, #0
   16720:	strne	r3, [sl]
   16724:	ldr	r3, [sp, #88]	; 0x58
   16728:	cmp	r3, #0
   1672c:	movne	r2, r3
   16730:	movne	r3, #0
   16734:	strne	r3, [r2]
   16738:	cmp	r4, #0
   1673c:	beq	16a60 <__assert_fail@plt+0x58e4>
   16740:	subs	r7, r4, r8
   16744:	bne	1699c <__assert_fail@plt+0x5820>
   16748:	ldrb	r6, [r4, #1]
   1674c:	cmp	r6, #0
   16750:	movne	r6, r7
   16754:	beq	16a70 <__assert_fail@plt+0x58f4>
   16758:	cmp	r6, #0
   1675c:	add	r9, r4, #1
   16760:	beq	16c58 <__assert_fail@plt+0x5adc>
   16764:	ldrb	r3, [r6]
   16768:	cmp	r3, #43	; 0x2b
   1676c:	beq	16808 <__assert_fail@plt+0x568c>
   16770:	mov	r0, r6
   16774:	bl	10ed0 <getpwnam@plt>
   16778:	cmp	r0, #0
   1677c:	beq	16808 <__assert_fail@plt+0x568c>
   16780:	cmp	r4, #0
   16784:	clz	r7, r9
   16788:	ldr	r3, [r0, #8]
   1678c:	lsr	r7, r7, #5
   16790:	moveq	r7, #0
   16794:	cmp	r7, #0
   16798:	str	r3, [sp, #12]
   1679c:	bne	169d0 <__assert_fail@plt+0x5854>
   167a0:	adds	r4, r9, #0
   167a4:	mov	fp, r7
   167a8:	movne	r4, #1
   167ac:	bl	11110 <endpwent@plt>
   167b0:	cmp	r4, #0
   167b4:	beq	16838 <__assert_fail@plt+0x56bc>
   167b8:	ldrb	r3, [r9]
   167bc:	cmp	r3, #43	; 0x2b
   167c0:	bne	1696c <__assert_fail@plt+0x57f0>
   167c4:	ldr	r2, [pc, #1352]	; 16d14 <__assert_fail@plt+0x5b98>
   167c8:	add	r3, sp, #24
   167cc:	str	r2, [sp]
   167d0:	mov	r1, #0
   167d4:	mov	r2, #10
   167d8:	mov	r0, r9
   167dc:	bl	17e18 <__assert_fail@plt+0x6c9c>
   167e0:	cmp	r0, #0
   167e4:	bne	16a04 <__assert_fail@plt+0x5888>
   167e8:	ldr	r3, [sp, #24]
   167ec:	ldr	r2, [sp, #16]
   167f0:	cmn	r3, #1
   167f4:	movne	r2, r3
   167f8:	ldr	fp, [pc, #1304]	; 16d18 <__assert_fail@plt+0x5b9c>
   167fc:	str	r2, [sp, #16]
   16800:	movne	fp, #0
   16804:	b	16988 <__assert_fail@plt+0x580c>
   16808:	adds	r4, r4, #0
   1680c:	movne	r4, #1
   16810:	cmp	r9, #0
   16814:	movne	r4, #0
   16818:	cmp	r4, #0
   1681c:	beq	16c98 <__assert_fail@plt+0x5b1c>
   16820:	mov	r4, #0
   16824:	bl	11110 <endpwent@plt>
   16828:	cmp	r4, #0
   1682c:	ldr	fp, [pc, #1256]	; 16d1c <__assert_fail@plt+0x5ba0>
   16830:	mov	r7, r4
   16834:	bne	167b8 <__assert_fail@plt+0x563c>
   16838:	cmp	fp, #0
   1683c:	beq	16a74 <__assert_fail@plt+0x58f8>
   16840:	mov	r0, r6
   16844:	bl	125bc <__assert_fail@plt+0x1440>
   16848:	mov	r0, r7
   1684c:	bl	125bc <__assert_fail@plt+0x1440>
   16850:	ldr	r3, [sp, #8]
   16854:	mov	r1, fp
   16858:	mov	r2, #5
   1685c:	mov	r0, #0
   16860:	cmp	r3, #0
   16864:	moveq	r7, #0
   16868:	andne	r7, r5, #1
   1686c:	bl	10f60 <dcgettext@plt>
   16870:	cmp	r7, #0
   16874:	mov	r4, r0
   16878:	beq	16960 <__assert_fail@plt+0x57e4>
   1687c:	cmp	r4, #0
   16880:	beq	16ad4 <__assert_fail@plt+0x5958>
   16884:	mov	r1, #46	; 0x2e
   16888:	mov	r0, r8
   1688c:	bl	11074 <strchr@plt>
   16890:	subs	r9, r0, #0
   16894:	beq	16960 <__assert_fail@plt+0x57e4>
   16898:	ldr	r3, [sp, #20]
   1689c:	cmp	sl, #0
   168a0:	ldr	r3, [r3]
   168a4:	str	r3, [sp, #12]
   168a8:	ldr	r3, [sp, #8]
   168ac:	ldr	fp, [r3]
   168b0:	movne	r3, #0
   168b4:	strne	r3, [sl]
   168b8:	ldr	r3, [sp, #88]	; 0x58
   168bc:	cmp	r3, #0
   168c0:	movne	r2, r3
   168c4:	movne	r3, #0
   168c8:	strne	r3, [r2]
   168cc:	subs	r5, r9, r8
   168d0:	bne	16ae4 <__assert_fail@plt+0x5968>
   168d4:	ldrb	r3, [r9, #1]
   168d8:	cmp	r3, #0
   168dc:	beq	16c04 <__assert_fail@plt+0x5a88>
   168e0:	add	r8, r9, #1
   168e4:	adds	r9, r9, #1
   168e8:	mov	r6, r5
   168ec:	mov	r7, r5
   168f0:	movne	r9, #1
   168f4:	cmp	r9, #0
   168f8:	beq	16930 <__assert_fail@plt+0x57b4>
   168fc:	ldrb	r3, [r8]
   16900:	cmp	r3, #43	; 0x2b
   16904:	beq	16a0c <__assert_fail@plt+0x5890>
   16908:	mov	r0, r8
   1690c:	bl	11170 <getgrnam@plt>
   16910:	cmp	r0, #0
   16914:	movne	r7, #0
   16918:	ldrne	fp, [r0, #8]
   1691c:	beq	16a0c <__assert_fail@plt+0x5890>
   16920:	bl	10eac <endgrent@plt>
   16924:	mov	r0, r8
   16928:	bl	17d70 <__assert_fail@plt+0x6bf4>
   1692c:	mov	r5, r0
   16930:	cmp	r7, #0
   16934:	beq	16c0c <__assert_fail@plt+0x5a90>
   16938:	mov	r0, r6
   1693c:	bl	125bc <__assert_fail@plt+0x1440>
   16940:	mov	r0, r5
   16944:	bl	125bc <__assert_fail@plt+0x1440>
   16948:	mov	r1, r7
   1694c:	mov	r2, #5
   16950:	mov	r0, #0
   16954:	bl	10f60 <dcgettext@plt>
   16958:	cmp	r0, #0
   1695c:	beq	16ad4 <__assert_fail@plt+0x5958>
   16960:	mov	r0, r4
   16964:	add	sp, sp, #52	; 0x34
   16968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1696c:	mov	r0, r9
   16970:	bl	11170 <getgrnam@plt>
   16974:	cmp	r0, #0
   16978:	beq	167c4 <__assert_fail@plt+0x5648>
   1697c:	ldr	r3, [r0, #8]
   16980:	mov	fp, #0
   16984:	str	r3, [sp, #16]
   16988:	bl	10eac <endgrent@plt>
   1698c:	mov	r0, r9
   16990:	bl	17d70 <__assert_fail@plt+0x6bf4>
   16994:	mov	r7, r0
   16998:	b	16838 <__assert_fail@plt+0x56bc>
   1699c:	add	r1, r7, #1
   169a0:	mov	r0, r8
   169a4:	bl	17d00 <__assert_fail@plt+0x6b84>
   169a8:	ldrb	r9, [r4, #1]
   169ac:	mov	r3, #0
   169b0:	cmp	r9, r3
   169b4:	mov	r6, r0
   169b8:	strb	r3, [r0, r7]
   169bc:	bne	16758 <__assert_fail@plt+0x55dc>
   169c0:	ldrb	r3, [r6]
   169c4:	cmp	r3, #43	; 0x2b
   169c8:	bne	16770 <__assert_fail@plt+0x55f4>
   169cc:	b	16808 <__assert_fail@plt+0x568c>
   169d0:	ldr	r3, [r0, #12]
   169d4:	mov	r0, r3
   169d8:	str	r3, [sp, #16]
   169dc:	bl	11164 <getgrgid@plt>
   169e0:	subs	r1, r0, #0
   169e4:	beq	16c64 <__assert_fail@plt+0x5ae8>
   169e8:	ldr	r0, [r1]
   169ec:	bl	17d70 <__assert_fail@plt+0x6bf4>
   169f0:	mov	r4, #0
   169f4:	mov	fp, r4
   169f8:	mov	r7, r0
   169fc:	bl	10eac <endgrent@plt>
   16a00:	b	167ac <__assert_fail@plt+0x5630>
   16a04:	ldr	fp, [pc, #780]	; 16d18 <__assert_fail@plt+0x5b9c>
   16a08:	b	16988 <__assert_fail@plt+0x580c>
   16a0c:	ldr	r2, [pc, #768]	; 16d14 <__assert_fail@plt+0x5b98>
   16a10:	add	r3, sp, #24
   16a14:	str	r2, [sp]
   16a18:	mov	r1, #0
   16a1c:	mov	r2, #10
   16a20:	mov	r0, r8
   16a24:	bl	17e18 <__assert_fail@plt+0x6c9c>
   16a28:	cmp	r0, #0
   16a2c:	bne	16c50 <__assert_fail@plt+0x5ad4>
   16a30:	ldr	r3, [sp, #24]
   16a34:	ldr	r7, [pc, #732]	; 16d18 <__assert_fail@plt+0x5b9c>
   16a38:	cmn	r3, #1
   16a3c:	movne	fp, r3
   16a40:	movne	r7, #0
   16a44:	b	16920 <__assert_fail@plt+0x57a4>
   16a48:	ldr	r3, [r1]
   16a4c:	mov	r5, #1
   16a50:	str	r3, [sp, #12]
   16a54:	mvn	r3, #0
   16a58:	str	r3, [sp, #16]
   16a5c:	b	16718 <__assert_fail@plt+0x559c>
   16a60:	ldrb	r3, [r8]
   16a64:	cmp	r3, #0
   16a68:	moveq	r6, r4
   16a6c:	bne	16c74 <__assert_fail@plt+0x5af8>
   16a70:	mov	r7, r6
   16a74:	ldr	r3, [sp, #8]
   16a78:	ldr	r2, [sp, #20]
   16a7c:	cmp	r3, #0
   16a80:	ldr	r1, [sp, #12]
   16a84:	str	r1, [r2]
   16a88:	ldrne	r2, [sp, #16]
   16a8c:	strne	r2, [r3]
   16a90:	ldr	r3, [sp, #88]	; 0x58
   16a94:	cmp	sl, #0
   16a98:	strne	r6, [sl]
   16a9c:	movne	r6, #0
   16aa0:	cmp	r3, #0
   16aa4:	strne	r7, [r3]
   16aa8:	movne	r7, #0
   16aac:	mov	r0, r6
   16ab0:	bl	125bc <__assert_fail@plt+0x1440>
   16ab4:	mov	r0, r7
   16ab8:	bl	125bc <__assert_fail@plt+0x1440>
   16abc:	ldr	r3, [sp, #8]
   16ac0:	cmp	r3, #0
   16ac4:	moveq	r4, #0
   16ac8:	andne	r4, r5, #1
   16acc:	cmp	r4, #0
   16ad0:	beq	16960 <__assert_fail@plt+0x57e4>
   16ad4:	mov	r4, #0
   16ad8:	mov	r0, r4
   16adc:	add	sp, sp, #52	; 0x34
   16ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae4:	mov	r0, r8
   16ae8:	add	r1, r5, #1
   16aec:	bl	17d00 <__assert_fail@plt+0x6b84>
   16af0:	ldrb	r8, [r9, #1]
   16af4:	mov	r3, #0
   16af8:	cmp	r8, r3
   16afc:	mov	r6, r0
   16b00:	strb	r3, [r0, r5]
   16b04:	bne	16b60 <__assert_fail@plt+0x59e4>
   16b08:	ldrb	r3, [r0]
   16b0c:	cmp	r3, #43	; 0x2b
   16b10:	beq	16c88 <__assert_fail@plt+0x5b0c>
   16b14:	bl	10ed0 <getpwnam@plt>
   16b18:	cmp	r0, #0
   16b1c:	beq	16d00 <__assert_fail@plt+0x5b84>
   16b20:	ldr	r3, [r0, #8]
   16b24:	mov	r9, r8
   16b28:	str	r3, [sp, #12]
   16b2c:	ldr	fp, [r0, #12]
   16b30:	mov	r0, fp
   16b34:	bl	11164 <getgrgid@plt>
   16b38:	subs	r1, r0, #0
   16b3c:	beq	16cf0 <__assert_fail@plt+0x5b74>
   16b40:	ldr	r0, [r1]
   16b44:	bl	17d70 <__assert_fail@plt+0x6bf4>
   16b48:	mov	r8, #0
   16b4c:	mov	r7, r8
   16b50:	mov	r5, r0
   16b54:	bl	10eac <endgrent@plt>
   16b58:	bl	11110 <endpwent@plt>
   16b5c:	b	168f4 <__assert_fail@plt+0x5778>
   16b60:	ldrb	r2, [r0]
   16b64:	str	r3, [sp, #16]
   16b68:	add	r8, r9, #1
   16b6c:	cmp	r2, #43	; 0x2b
   16b70:	bne	16bd0 <__assert_fail@plt+0x5a54>
   16b74:	cmp	r8, #0
   16b78:	beq	16d00 <__assert_fail@plt+0x5b84>
   16b7c:	ldr	r2, [pc, #400]	; 16d14 <__assert_fail@plt+0x5b98>
   16b80:	add	r3, sp, #24
   16b84:	str	r2, [sp]
   16b88:	mov	r1, #0
   16b8c:	mov	r2, #10
   16b90:	mov	r0, r6
   16b94:	bl	17e18 <__assert_fail@plt+0x6c9c>
   16b98:	cmp	r0, #0
   16b9c:	bne	16ce4 <__assert_fail@plt+0x5b68>
   16ba0:	ldr	r3, [sp, #24]
   16ba4:	ldr	r2, [pc, #372]	; 16d20 <__assert_fail@plt+0x5ba4>
   16ba8:	cmn	r3, #1
   16bac:	ldr	r1, [sp, #12]
   16bb0:	movne	r9, r7
   16bb4:	moveq	r9, #0
   16bb8:	moveq	r7, r2
   16bbc:	movne	r7, #0
   16bc0:	movne	r1, r3
   16bc4:	str	r1, [sp, #12]
   16bc8:	mov	r5, #0
   16bcc:	b	16b58 <__assert_fail@plt+0x59dc>
   16bd0:	bl	10ed0 <getpwnam@plt>
   16bd4:	adds	r9, r8, #0
   16bd8:	movne	r9, #1
   16bdc:	ldr	r3, [sp, #16]
   16be0:	cmp	r0, #0
   16be4:	beq	16b74 <__assert_fail@plt+0x59f8>
   16be8:	cmp	r8, #0
   16bec:	ldr	r2, [r0, #8]
   16bf0:	movne	r5, r3
   16bf4:	str	r2, [sp, #12]
   16bf8:	movne	r7, r5
   16bfc:	bne	16b58 <__assert_fail@plt+0x59dc>
   16c00:	b	16b2c <__assert_fail@plt+0x59b0>
   16c04:	mov	r5, r3
   16c08:	mov	r6, r3
   16c0c:	ldr	r3, [sp, #20]
   16c10:	ldr	r2, [sp, #12]
   16c14:	cmp	sl, #0
   16c18:	str	r2, [r3]
   16c1c:	ldr	r3, [sp, #8]
   16c20:	str	fp, [r3]
   16c24:	ldr	r3, [sp, #88]	; 0x58
   16c28:	strne	r6, [sl]
   16c2c:	movne	r6, #0
   16c30:	cmp	r3, #0
   16c34:	strne	r5, [r3]
   16c38:	movne	r5, #0
   16c3c:	mov	r0, r6
   16c40:	bl	125bc <__assert_fail@plt+0x1440>
   16c44:	mov	r0, r5
   16c48:	bl	125bc <__assert_fail@plt+0x1440>
   16c4c:	b	16ad4 <__assert_fail@plt+0x5958>
   16c50:	ldr	r7, [pc, #192]	; 16d18 <__assert_fail@plt+0x5b9c>
   16c54:	b	16920 <__assert_fail@plt+0x57a4>
   16c58:	cmp	r9, #0
   16c5c:	bne	167b8 <__assert_fail@plt+0x563c>
   16c60:	b	16a70 <__assert_fail@plt+0x58f4>
   16c64:	add	r2, sp, #24
   16c68:	ldr	r0, [sp, #16]
   16c6c:	bl	12614 <__assert_fail@plt+0x1498>
   16c70:	b	169ec <__assert_fail@plt+0x5870>
   16c74:	mov	r0, r8
   16c78:	bl	17d70 <__assert_fail@plt+0x6bf4>
   16c7c:	mov	r9, r4
   16c80:	mov	r6, r0
   16c84:	b	16764 <__assert_fail@plt+0x55e8>
   16c88:	mov	r9, r8
   16c8c:	ldr	r7, [pc, #136]	; 16d1c <__assert_fail@plt+0x5ba0>
   16c90:	mov	r5, r8
   16c94:	b	16b58 <__assert_fail@plt+0x59dc>
   16c98:	ldr	r2, [pc, #116]	; 16d14 <__assert_fail@plt+0x5b98>
   16c9c:	add	r3, sp, #24
   16ca0:	str	r2, [sp]
   16ca4:	mov	r1, r4
   16ca8:	mov	r2, #10
   16cac:	mov	r0, r6
   16cb0:	bl	17e18 <__assert_fail@plt+0x6c9c>
   16cb4:	subs	fp, r0, #0
   16cb8:	bne	16cdc <__assert_fail@plt+0x5b60>
   16cbc:	ldr	r3, [sp, #24]
   16cc0:	cmn	r3, #1
   16cc4:	beq	16cdc <__assert_fail@plt+0x5b60>
   16cc8:	adds	r4, r9, #0
   16ccc:	movne	r4, #1
   16cd0:	str	r3, [sp, #12]
   16cd4:	mov	r7, #0
   16cd8:	b	167ac <__assert_fail@plt+0x5630>
   16cdc:	ldr	fp, [pc, #60]	; 16d20 <__assert_fail@plt+0x5ba4>
   16ce0:	b	16cd4 <__assert_fail@plt+0x5b58>
   16ce4:	ldr	r7, [pc, #52]	; 16d20 <__assert_fail@plt+0x5ba4>
   16ce8:	mov	r9, #0
   16cec:	b	16bc8 <__assert_fail@plt+0x5a4c>
   16cf0:	add	r2, sp, #24
   16cf4:	mov	r0, fp
   16cf8:	bl	12614 <__assert_fail@plt+0x1498>
   16cfc:	b	16b44 <__assert_fail@plt+0x59c8>
   16d00:	mov	r9, #0
   16d04:	mov	r8, r9
   16d08:	mov	r5, r9
   16d0c:	ldr	r7, [pc, #8]	; 16d1c <__assert_fail@plt+0x5ba0>
   16d10:	b	16b58 <__assert_fail@plt+0x59dc>
   16d14:	andeq	r9, r1, r8, lsr #6
   16d18:	andeq	r9, r1, r8, asr #22
   16d1c:	andeq	r9, r1, r8, lsr fp
   16d20:	andeq	r9, r1, r8, lsr #22
   16d24:	push	{r4, r5, r6, lr}
   16d28:	sub	sp, sp, #32
   16d2c:	cmp	r1, #0
   16d30:	mov	r4, r0
   16d34:	ldr	r5, [sp, #48]	; 0x30
   16d38:	ldr	r6, [sp, #52]	; 0x34
   16d3c:	beq	17054 <__assert_fail@plt+0x5ed8>
   16d40:	stm	sp, {r2, r3}
   16d44:	mov	r3, r1
   16d48:	ldr	r2, [pc, #808]	; 17078 <__assert_fail@plt+0x5efc>
   16d4c:	mov	r1, #1
   16d50:	bl	110d4 <__fprintf_chk@plt>
   16d54:	mov	r2, #5
   16d58:	ldr	r1, [pc, #796]	; 1707c <__assert_fail@plt+0x5f00>
   16d5c:	mov	r0, #0
   16d60:	bl	10f60 <dcgettext@plt>
   16d64:	ldr	r3, [pc, #788]	; 17080 <__assert_fail@plt+0x5f04>
   16d68:	ldr	r2, [pc, #788]	; 17084 <__assert_fail@plt+0x5f08>
   16d6c:	str	r3, [sp]
   16d70:	mov	r1, #1
   16d74:	mov	r3, r0
   16d78:	mov	r0, r4
   16d7c:	bl	110d4 <__fprintf_chk@plt>
   16d80:	mov	r1, r4
   16d84:	mov	r0, #10
   16d88:	bl	10f54 <fputc_unlocked@plt>
   16d8c:	mov	r2, #5
   16d90:	ldr	r1, [pc, #752]	; 17088 <__assert_fail@plt+0x5f0c>
   16d94:	mov	r0, #0
   16d98:	bl	10f60 <dcgettext@plt>
   16d9c:	mov	r1, #1
   16da0:	ldr	r3, [pc, #740]	; 1708c <__assert_fail@plt+0x5f10>
   16da4:	mov	r2, r0
   16da8:	mov	r0, r4
   16dac:	bl	110d4 <__fprintf_chk@plt>
   16db0:	mov	r1, r4
   16db4:	mov	r0, #10
   16db8:	bl	10f54 <fputc_unlocked@plt>
   16dbc:	cmp	r6, #9
   16dc0:	ldrls	pc, [pc, r6, lsl #2]
   16dc4:	b	1706c <__assert_fail@plt+0x5ef0>
   16dc8:	andeq	r6, r1, ip, asr #28
   16dcc:	andeq	r6, r1, r4, asr lr
   16dd0:	andeq	r6, r1, r0, lsl #29
   16dd4:			; <UNDEFINED> instruction: 0x00016eb4
   16dd8:	strdeq	r6, [r1], -r0
   16ddc:	andeq	r6, r1, ip, lsr #30
   16de0:	andeq	r6, r1, r8, ror #30
   16de4:	andeq	r6, r1, ip, lsr #31
   16de8:	strdeq	r6, [r1], -ip
   16dec:	strdeq	r6, [r1], -r0
   16df0:	ldr	r1, [pc, #664]	; 17090 <__assert_fail@plt+0x5f14>
   16df4:	mov	r2, #5
   16df8:	mov	r0, #0
   16dfc:	bl	10f60 <dcgettext@plt>
   16e00:	ldr	ip, [r5, #32]
   16e04:	ldr	r1, [r5, #28]
   16e08:	ldr	r2, [r5, #24]
   16e0c:	ldr	r3, [r5]
   16e10:	ldr	r6, [r5, #20]
   16e14:	str	ip, [sp, #28]
   16e18:	ldr	lr, [r5, #16]
   16e1c:	str	r1, [sp, #24]
   16e20:	ldr	ip, [r5, #12]
   16e24:	str	r2, [sp, #20]
   16e28:	ldr	r1, [r5, #8]
   16e2c:	ldr	r2, [r5, #4]
   16e30:	str	r6, [sp, #16]
   16e34:	stmib	sp, {r1, ip, lr}
   16e38:	mov	r1, #1
   16e3c:	str	r2, [sp]
   16e40:	mov	r2, r0
   16e44:	mov	r0, r4
   16e48:	bl	110d4 <__fprintf_chk@plt>
   16e4c:	add	sp, sp, #32
   16e50:	pop	{r4, r5, r6, pc}
   16e54:	mov	r2, #5
   16e58:	ldr	r1, [pc, #564]	; 17094 <__assert_fail@plt+0x5f18>
   16e5c:	mov	r0, #0
   16e60:	bl	10f60 <dcgettext@plt>
   16e64:	ldr	r3, [r5]
   16e68:	mov	r1, #1
   16e6c:	mov	r2, r0
   16e70:	mov	r0, r4
   16e74:	add	sp, sp, #32
   16e78:	pop	{r4, r5, r6, lr}
   16e7c:	b	110d4 <__fprintf_chk@plt>
   16e80:	mov	r2, #5
   16e84:	ldr	r1, [pc, #524]	; 17098 <__assert_fail@plt+0x5f1c>
   16e88:	mov	r0, #0
   16e8c:	bl	10f60 <dcgettext@plt>
   16e90:	ldr	r2, [r5, #4]
   16e94:	ldr	r3, [r5]
   16e98:	mov	r1, #1
   16e9c:	str	r2, [sp, #48]	; 0x30
   16ea0:	mov	r2, r0
   16ea4:	mov	r0, r4
   16ea8:	add	sp, sp, #32
   16eac:	pop	{r4, r5, r6, lr}
   16eb0:	b	110d4 <__fprintf_chk@plt>
   16eb4:	mov	r2, #5
   16eb8:	ldr	r1, [pc, #476]	; 1709c <__assert_fail@plt+0x5f20>
   16ebc:	mov	r0, #0
   16ec0:	bl	10f60 <dcgettext@plt>
   16ec4:	ldr	r1, [r5, #8]
   16ec8:	ldr	r2, [r5, #4]
   16ecc:	ldr	r3, [r5]
   16ed0:	str	r1, [sp, #52]	; 0x34
   16ed4:	str	r2, [sp, #48]	; 0x30
   16ed8:	mov	r1, #1
   16edc:	mov	r2, r0
   16ee0:	mov	r0, r4
   16ee4:	add	sp, sp, #32
   16ee8:	pop	{r4, r5, r6, lr}
   16eec:	b	110d4 <__fprintf_chk@plt>
   16ef0:	mov	r2, #5
   16ef4:	ldr	r1, [pc, #420]	; 170a0 <__assert_fail@plt+0x5f24>
   16ef8:	mov	r0, #0
   16efc:	bl	10f60 <dcgettext@plt>
   16f00:	ldr	r1, [r5, #8]
   16f04:	ldr	ip, [r5, #12]
   16f08:	ldr	r2, [r5, #4]
   16f0c:	ldr	r3, [r5]
   16f10:	stmib	sp, {r1, ip}
   16f14:	str	r2, [sp]
   16f18:	mov	r1, #1
   16f1c:	mov	r2, r0
   16f20:	mov	r0, r4
   16f24:	bl	110d4 <__fprintf_chk@plt>
   16f28:	b	16e4c <__assert_fail@plt+0x5cd0>
   16f2c:	mov	r2, #5
   16f30:	ldr	r1, [pc, #364]	; 170a4 <__assert_fail@plt+0x5f28>
   16f34:	mov	r0, #0
   16f38:	bl	10f60 <dcgettext@plt>
   16f3c:	add	r1, r5, #8
   16f40:	ldr	r2, [r5, #4]
   16f44:	ldm	r1, {r1, ip, lr}
   16f48:	ldr	r3, [r5]
   16f4c:	str	r2, [sp]
   16f50:	stmib	sp, {r1, ip, lr}
   16f54:	mov	r1, #1
   16f58:	mov	r2, r0
   16f5c:	mov	r0, r4
   16f60:	bl	110d4 <__fprintf_chk@plt>
   16f64:	b	16e4c <__assert_fail@plt+0x5cd0>
   16f68:	mov	r2, #5
   16f6c:	ldr	r1, [pc, #308]	; 170a8 <__assert_fail@plt+0x5f2c>
   16f70:	mov	r0, #0
   16f74:	bl	10f60 <dcgettext@plt>
   16f78:	add	r1, r5, #8
   16f7c:	ldr	r2, [r5, #4]
   16f80:	ldm	r1, {r1, ip, lr}
   16f84:	ldr	r6, [r5, #20]
   16f88:	ldr	r3, [r5]
   16f8c:	stmib	sp, {r1, ip, lr}
   16f90:	mov	r1, #1
   16f94:	str	r2, [sp]
   16f98:	str	r6, [sp, #16]
   16f9c:	mov	r2, r0
   16fa0:	mov	r0, r4
   16fa4:	bl	110d4 <__fprintf_chk@plt>
   16fa8:	b	16e4c <__assert_fail@plt+0x5cd0>
   16fac:	mov	r2, #5
   16fb0:	ldr	r1, [pc, #244]	; 170ac <__assert_fail@plt+0x5f30>
   16fb4:	mov	r0, #0
   16fb8:	bl	10f60 <dcgettext@plt>
   16fbc:	ldr	r2, [r5, #24]
   16fc0:	ldr	r3, [r5]
   16fc4:	ldr	r6, [r5, #20]
   16fc8:	ldr	lr, [r5, #16]
   16fcc:	ldr	ip, [r5, #12]
   16fd0:	str	r2, [sp, #20]
   16fd4:	ldr	r1, [r5, #8]
   16fd8:	ldr	r2, [r5, #4]
   16fdc:	str	r6, [sp, #16]
   16fe0:	stmib	sp, {r1, ip, lr}
   16fe4:	mov	r1, #1
   16fe8:	str	r2, [sp]
   16fec:	mov	r2, r0
   16ff0:	mov	r0, r4
   16ff4:	bl	110d4 <__fprintf_chk@plt>
   16ff8:	b	16e4c <__assert_fail@plt+0x5cd0>
   16ffc:	mov	r2, #5
   17000:	ldr	r1, [pc, #168]	; 170b0 <__assert_fail@plt+0x5f34>
   17004:	mov	r0, #0
   17008:	bl	10f60 <dcgettext@plt>
   1700c:	ldr	r1, [r5, #28]
   17010:	ldr	r2, [r5, #24]
   17014:	ldr	r3, [r5]
   17018:	ldr	r6, [r5, #20]
   1701c:	ldr	lr, [r5, #16]
   17020:	str	r1, [sp, #24]
   17024:	ldr	ip, [r5, #12]
   17028:	str	r2, [sp, #20]
   1702c:	ldr	r1, [r5, #8]
   17030:	ldr	r2, [r5, #4]
   17034:	str	r6, [sp, #16]
   17038:	stmib	sp, {r1, ip, lr}
   1703c:	mov	r1, #1
   17040:	str	r2, [sp]
   17044:	mov	r2, r0
   17048:	mov	r0, r4
   1704c:	bl	110d4 <__fprintf_chk@plt>
   17050:	b	16e4c <__assert_fail@plt+0x5cd0>
   17054:	str	r3, [sp]
   17058:	mov	r1, #1
   1705c:	mov	r3, r2
   17060:	ldr	r2, [pc, #76]	; 170b4 <__assert_fail@plt+0x5f38>
   17064:	bl	110d4 <__fprintf_chk@plt>
   17068:	b	16d54 <__assert_fail@plt+0x5bd8>
   1706c:	mov	r2, #5
   17070:	ldr	r1, [pc, #64]	; 170b8 <__assert_fail@plt+0x5f3c>
   17074:	b	16df8 <__assert_fail@plt+0x5c7c>
   17078:	andeq	r9, r1, r8, asr fp
   1707c:	andeq	r9, r1, ip, ror #22
   17080:	andeq	r0, r0, r6, ror #15
   17084:	andeq	r9, r1, r4, asr #28
   17088:	andeq	r9, r1, r0, ror fp
   1708c:	andeq	r9, r1, ip, lsl ip
   17090:	andeq	r9, r1, ip, asr #26
   17094:	andeq	r9, r1, r0, asr #24
   17098:	andeq	r9, r1, r0, asr ip
   1709c:	andeq	r9, r1, r8, ror #24
   170a0:	andeq	r9, r1, r4, lsl #25
   170a4:	andeq	r9, r1, r4, lsr #25
   170a8:	andeq	r9, r1, r8, asr #25
   170ac:	strdeq	r9, [r1], -r0
   170b0:	andeq	r9, r1, ip, lsl sp
   170b4:	andeq	r9, r1, r4, ror #22
   170b8:	andeq	r9, r1, r0, lsl #27
   170bc:	push	{r4, r5, lr}
   170c0:	sub	sp, sp, #12
   170c4:	ldr	r5, [sp, #24]
   170c8:	ldr	ip, [r5]
   170cc:	cmp	ip, #0
   170d0:	beq	170ec <__assert_fail@plt+0x5f70>
   170d4:	mov	lr, r5
   170d8:	mov	ip, #0
   170dc:	ldr	r4, [lr, #4]!
   170e0:	add	ip, ip, #1
   170e4:	cmp	r4, #0
   170e8:	bne	170dc <__assert_fail@plt+0x5f60>
   170ec:	stm	sp, {r5, ip}
   170f0:	bl	16d24 <__assert_fail@plt+0x5ba8>
   170f4:	add	sp, sp, #12
   170f8:	pop	{r4, r5, pc}
   170fc:	push	{r4, r5, lr}
   17100:	sub	sp, sp, #76	; 0x4c
   17104:	mov	r5, r0
   17108:	ldr	ip, [sp, #88]	; 0x58
   1710c:	ldr	r0, [ip]
   17110:	cmp	r0, #0
   17114:	str	r0, [sp, #32]
   17118:	beq	174ec <__assert_fail@plt+0x6370>
   1711c:	ldr	r0, [ip, #4]
   17120:	cmp	r0, #0
   17124:	str	r0, [sp, #36]	; 0x24
   17128:	beq	174f4 <__assert_fail@plt+0x6378>
   1712c:	ldr	r0, [ip, #8]
   17130:	cmp	r0, #0
   17134:	str	r0, [sp, #40]	; 0x28
   17138:	beq	174fc <__assert_fail@plt+0x6380>
   1713c:	ldr	r0, [ip, #12]
   17140:	cmp	r0, #0
   17144:	str	r0, [sp, #44]	; 0x2c
   17148:	beq	17504 <__assert_fail@plt+0x6388>
   1714c:	ldr	r0, [ip, #16]
   17150:	cmp	r0, #0
   17154:	str	r0, [sp, #48]	; 0x30
   17158:	beq	1750c <__assert_fail@plt+0x6390>
   1715c:	ldr	r0, [ip, #20]
   17160:	cmp	r0, #0
   17164:	str	r0, [sp, #52]	; 0x34
   17168:	beq	17514 <__assert_fail@plt+0x6398>
   1716c:	ldr	r0, [ip, #24]
   17170:	cmp	r0, #0
   17174:	str	r0, [sp, #56]	; 0x38
   17178:	beq	1751c <__assert_fail@plt+0x63a0>
   1717c:	ldr	r0, [ip, #28]
   17180:	cmp	r0, #0
   17184:	str	r0, [sp, #60]	; 0x3c
   17188:	beq	17524 <__assert_fail@plt+0x63a8>
   1718c:	ldr	r0, [ip, #32]
   17190:	cmp	r0, #0
   17194:	str	r0, [sp, #64]	; 0x40
   17198:	beq	1752c <__assert_fail@plt+0x63b0>
   1719c:	ldr	r0, [ip, #36]	; 0x24
   171a0:	cmp	r0, #0
   171a4:	movne	r4, #10
   171a8:	moveq	r4, #9
   171ac:	cmp	r1, #0
   171b0:	beq	174c4 <__assert_fail@plt+0x6348>
   171b4:	stm	sp, {r2, r3}
   171b8:	mov	r0, r5
   171bc:	mov	r3, r1
   171c0:	ldr	r2, [pc, #876]	; 17534 <__assert_fail@plt+0x63b8>
   171c4:	mov	r1, #1
   171c8:	bl	110d4 <__fprintf_chk@plt>
   171cc:	mov	r2, #5
   171d0:	ldr	r1, [pc, #864]	; 17538 <__assert_fail@plt+0x63bc>
   171d4:	mov	r0, #0
   171d8:	bl	10f60 <dcgettext@plt>
   171dc:	ldr	r3, [pc, #856]	; 1753c <__assert_fail@plt+0x63c0>
   171e0:	ldr	r2, [pc, #856]	; 17540 <__assert_fail@plt+0x63c4>
   171e4:	str	r3, [sp]
   171e8:	mov	r1, #1
   171ec:	mov	r3, r0
   171f0:	mov	r0, r5
   171f4:	bl	110d4 <__fprintf_chk@plt>
   171f8:	mov	r1, r5
   171fc:	mov	r0, #10
   17200:	bl	10f54 <fputc_unlocked@plt>
   17204:	mov	r2, #5
   17208:	ldr	r1, [pc, #820]	; 17544 <__assert_fail@plt+0x63c8>
   1720c:	mov	r0, #0
   17210:	bl	10f60 <dcgettext@plt>
   17214:	mov	r1, #1
   17218:	ldr	r3, [pc, #808]	; 17548 <__assert_fail@plt+0x63cc>
   1721c:	mov	r2, r0
   17220:	mov	r0, r5
   17224:	bl	110d4 <__fprintf_chk@plt>
   17228:	mov	r1, r5
   1722c:	mov	r0, #10
   17230:	bl	10f54 <fputc_unlocked@plt>
   17234:	cmp	r4, #9
   17238:	ldrls	pc, [pc, r4, lsl #2]
   1723c:	b	174e0 <__assert_fail@plt+0x6364>
   17240:	andeq	r7, r1, r4, asr #5
   17244:	andeq	r7, r1, ip, asr #5
   17248:	strdeq	r7, [r1], -r8
   1724c:	andeq	r7, r1, ip, lsr #6
   17250:	andeq	r7, r1, r4, ror #6
   17254:	andeq	r7, r1, r0, lsr #7
   17258:	ldrdeq	r7, [r1], -ip
   1725c:	andeq	r7, r1, r0, lsr #8
   17260:	andeq	r7, r1, ip, ror #8
   17264:	andeq	r7, r1, r8, ror #4
   17268:	ldr	r1, [pc, #732]	; 1754c <__assert_fail@plt+0x63d0>
   1726c:	mov	r2, #5
   17270:	mov	r0, #0
   17274:	bl	10f60 <dcgettext@plt>
   17278:	ldr	ip, [sp, #64]	; 0x40
   1727c:	ldr	r1, [sp, #60]	; 0x3c
   17280:	ldr	r2, [sp, #56]	; 0x38
   17284:	ldr	lr, [sp, #48]	; 0x30
   17288:	str	ip, [sp, #28]
   1728c:	str	r1, [sp, #24]
   17290:	ldr	ip, [sp, #44]	; 0x2c
   17294:	ldr	r1, [sp, #40]	; 0x28
   17298:	ldr	r4, [sp, #52]	; 0x34
   1729c:	str	r2, [sp, #20]
   172a0:	ldr	r2, [sp, #36]	; 0x24
   172a4:	stmib	sp, {r1, ip, lr}
   172a8:	mov	r1, #1
   172ac:	str	r2, [sp]
   172b0:	ldr	r3, [sp, #32]
   172b4:	str	r4, [sp, #16]
   172b8:	mov	r2, r0
   172bc:	mov	r0, r5
   172c0:	bl	110d4 <__fprintf_chk@plt>
   172c4:	add	sp, sp, #76	; 0x4c
   172c8:	pop	{r4, r5, pc}
   172cc:	mov	r2, #5
   172d0:	ldr	r1, [pc, #632]	; 17550 <__assert_fail@plt+0x63d4>
   172d4:	mov	r0, #0
   172d8:	bl	10f60 <dcgettext@plt>
   172dc:	ldr	r3, [sp, #32]
   172e0:	mov	r1, #1
   172e4:	mov	r2, r0
   172e8:	mov	r0, r5
   172ec:	add	sp, sp, #76	; 0x4c
   172f0:	pop	{r4, r5, lr}
   172f4:	b	110d4 <__fprintf_chk@plt>
   172f8:	mov	r2, #5
   172fc:	ldr	r1, [pc, #592]	; 17554 <__assert_fail@plt+0x63d8>
   17300:	mov	r0, #0
   17304:	bl	10f60 <dcgettext@plt>
   17308:	ldr	r2, [sp, #36]	; 0x24
   1730c:	ldr	r3, [sp, #32]
   17310:	str	r2, [sp, #88]	; 0x58
   17314:	mov	r1, #1
   17318:	mov	r2, r0
   1731c:	mov	r0, r5
   17320:	add	sp, sp, #76	; 0x4c
   17324:	pop	{r4, r5, lr}
   17328:	b	110d4 <__fprintf_chk@plt>
   1732c:	mov	r2, #5
   17330:	ldr	r1, [pc, #544]	; 17558 <__assert_fail@plt+0x63dc>
   17334:	mov	r0, #0
   17338:	bl	10f60 <dcgettext@plt>
   1733c:	ldr	r1, [sp, #40]	; 0x28
   17340:	ldr	r2, [sp, #36]	; 0x24
   17344:	str	r1, [sp, #4]
   17348:	str	r2, [sp]
   1734c:	ldr	r3, [sp, #32]
   17350:	mov	r1, #1
   17354:	mov	r2, r0
   17358:	mov	r0, r5
   1735c:	bl	110d4 <__fprintf_chk@plt>
   17360:	b	172c4 <__assert_fail@plt+0x6148>
   17364:	mov	r2, #5
   17368:	ldr	r1, [pc, #492]	; 1755c <__assert_fail@plt+0x63e0>
   1736c:	mov	r0, #0
   17370:	bl	10f60 <dcgettext@plt>
   17374:	ldr	r1, [sp, #40]	; 0x28
   17378:	ldr	ip, [sp, #44]	; 0x2c
   1737c:	ldr	r2, [sp, #36]	; 0x24
   17380:	ldr	r3, [sp, #32]
   17384:	stmib	sp, {r1, ip}
   17388:	str	r2, [sp]
   1738c:	mov	r1, #1
   17390:	mov	r2, r0
   17394:	mov	r0, r5
   17398:	bl	110d4 <__fprintf_chk@plt>
   1739c:	b	172c4 <__assert_fail@plt+0x6148>
   173a0:	mov	r2, #5
   173a4:	ldr	r1, [pc, #436]	; 17560 <__assert_fail@plt+0x63e4>
   173a8:	mov	r0, #0
   173ac:	bl	10f60 <dcgettext@plt>
   173b0:	add	r1, sp, #40	; 0x28
   173b4:	ldr	r2, [sp, #36]	; 0x24
   173b8:	ldm	r1, {r1, ip, lr}
   173bc:	ldr	r3, [sp, #32]
   173c0:	str	r2, [sp]
   173c4:	stmib	sp, {r1, ip, lr}
   173c8:	mov	r1, #1
   173cc:	mov	r2, r0
   173d0:	mov	r0, r5
   173d4:	bl	110d4 <__fprintf_chk@plt>
   173d8:	b	172c4 <__assert_fail@plt+0x6148>
   173dc:	mov	r2, #5
   173e0:	ldr	r1, [pc, #380]	; 17564 <__assert_fail@plt+0x63e8>
   173e4:	mov	r0, #0
   173e8:	bl	10f60 <dcgettext@plt>
   173ec:	add	r1, sp, #40	; 0x28
   173f0:	ldr	r2, [sp, #36]	; 0x24
   173f4:	ldm	r1, {r1, ip, lr}
   173f8:	ldr	r4, [sp, #52]	; 0x34
   173fc:	str	r2, [sp]
   17400:	stmib	sp, {r1, ip, lr}
   17404:	mov	r1, #1
   17408:	ldr	r3, [sp, #32]
   1740c:	str	r4, [sp, #16]
   17410:	mov	r2, r0
   17414:	mov	r0, r5
   17418:	bl	110d4 <__fprintf_chk@plt>
   1741c:	b	172c4 <__assert_fail@plt+0x6148>
   17420:	mov	r2, #5
   17424:	ldr	r1, [pc, #316]	; 17568 <__assert_fail@plt+0x63ec>
   17428:	mov	r0, #0
   1742c:	bl	10f60 <dcgettext@plt>
   17430:	add	r1, sp, #40	; 0x28
   17434:	ldr	r2, [sp, #56]	; 0x38
   17438:	ldm	r1, {r1, ip, lr}
   1743c:	ldr	r4, [sp, #52]	; 0x34
   17440:	str	r2, [sp, #20]
   17444:	ldr	r2, [sp, #36]	; 0x24
   17448:	stmib	sp, {r1, ip, lr}
   1744c:	mov	r1, #1
   17450:	str	r2, [sp]
   17454:	ldr	r3, [sp, #32]
   17458:	str	r4, [sp, #16]
   1745c:	mov	r2, r0
   17460:	mov	r0, r5
   17464:	bl	110d4 <__fprintf_chk@plt>
   17468:	b	172c4 <__assert_fail@plt+0x6148>
   1746c:	mov	r2, #5
   17470:	ldr	r1, [pc, #244]	; 1756c <__assert_fail@plt+0x63f0>
   17474:	mov	r0, #0
   17478:	bl	10f60 <dcgettext@plt>
   1747c:	ldr	r1, [sp, #60]	; 0x3c
   17480:	ldr	r2, [sp, #56]	; 0x38
   17484:	ldr	lr, [sp, #48]	; 0x30
   17488:	ldr	ip, [sp, #44]	; 0x2c
   1748c:	str	r1, [sp, #24]
   17490:	ldr	r1, [sp, #40]	; 0x28
   17494:	ldr	r4, [sp, #52]	; 0x34
   17498:	str	r2, [sp, #20]
   1749c:	ldr	r2, [sp, #36]	; 0x24
   174a0:	stmib	sp, {r1, ip, lr}
   174a4:	mov	r1, #1
   174a8:	str	r2, [sp]
   174ac:	ldr	r3, [sp, #32]
   174b0:	str	r4, [sp, #16]
   174b4:	mov	r2, r0
   174b8:	mov	r0, r5
   174bc:	bl	110d4 <__fprintf_chk@plt>
   174c0:	b	172c4 <__assert_fail@plt+0x6148>
   174c4:	str	r3, [sp]
   174c8:	mov	r1, #1
   174cc:	mov	r3, r2
   174d0:	mov	r0, r5
   174d4:	ldr	r2, [pc, #148]	; 17570 <__assert_fail@plt+0x63f4>
   174d8:	bl	110d4 <__fprintf_chk@plt>
   174dc:	b	171cc <__assert_fail@plt+0x6050>
   174e0:	mov	r2, #5
   174e4:	ldr	r1, [pc, #136]	; 17574 <__assert_fail@plt+0x63f8>
   174e8:	b	17270 <__assert_fail@plt+0x60f4>
   174ec:	mov	r4, r0
   174f0:	b	171ac <__assert_fail@plt+0x6030>
   174f4:	mov	r4, #1
   174f8:	b	171ac <__assert_fail@plt+0x6030>
   174fc:	mov	r4, #2
   17500:	b	171ac <__assert_fail@plt+0x6030>
   17504:	mov	r4, #3
   17508:	b	171ac <__assert_fail@plt+0x6030>
   1750c:	mov	r4, #4
   17510:	b	171ac <__assert_fail@plt+0x6030>
   17514:	mov	r4, #5
   17518:	b	171ac <__assert_fail@plt+0x6030>
   1751c:	mov	r4, #6
   17520:	b	171ac <__assert_fail@plt+0x6030>
   17524:	mov	r4, #7
   17528:	b	171ac <__assert_fail@plt+0x6030>
   1752c:	mov	r4, #8
   17530:	b	171ac <__assert_fail@plt+0x6030>
   17534:	andeq	r9, r1, r8, asr fp
   17538:	andeq	r9, r1, ip, ror #22
   1753c:	andeq	r0, r0, r6, ror #15
   17540:	andeq	r9, r1, r4, asr #28
   17544:	andeq	r9, r1, r0, ror fp
   17548:	andeq	r9, r1, ip, lsl ip
   1754c:	andeq	r9, r1, ip, asr #26
   17550:	andeq	r9, r1, r0, asr #24
   17554:	andeq	r9, r1, r0, asr ip
   17558:	andeq	r9, r1, r8, ror #24
   1755c:	andeq	r9, r1, r4, lsl #25
   17560:	andeq	r9, r1, r4, lsr #25
   17564:	andeq	r9, r1, r8, asr #25
   17568:	strdeq	r9, [r1], -r0
   1756c:	andeq	r9, r1, ip, lsl sp
   17570:	andeq	r9, r1, r4, ror #22
   17574:	andeq	r9, r1, r0, lsl #27
   17578:	push	{r3}		; (str r3, [sp, #-4]!)
   1757c:	push	{lr}		; (str lr, [sp, #-4]!)
   17580:	sub	sp, sp, #56	; 0x38
   17584:	add	r3, sp, #64	; 0x40
   17588:	ldr	ip, [sp, #64]	; 0x40
   1758c:	str	r3, [sp, #12]
   17590:	cmp	ip, #0
   17594:	str	ip, [sp, #16]
   17598:	beq	17630 <__assert_fail@plt+0x64b4>
   1759c:	ldr	ip, [sp, #68]	; 0x44
   175a0:	cmp	ip, #0
   175a4:	str	ip, [sp, #20]
   175a8:	beq	17650 <__assert_fail@plt+0x64d4>
   175ac:	ldr	ip, [sp, #72]	; 0x48
   175b0:	cmp	ip, #0
   175b4:	str	ip, [sp, #24]
   175b8:	beq	17658 <__assert_fail@plt+0x64dc>
   175bc:	ldr	ip, [sp, #76]	; 0x4c
   175c0:	cmp	ip, #0
   175c4:	str	ip, [sp, #28]
   175c8:	beq	17660 <__assert_fail@plt+0x64e4>
   175cc:	ldr	ip, [sp, #80]	; 0x50
   175d0:	cmp	ip, #0
   175d4:	str	ip, [sp, #32]
   175d8:	beq	17668 <__assert_fail@plt+0x64ec>
   175dc:	ldr	ip, [sp, #84]	; 0x54
   175e0:	cmp	ip, #0
   175e4:	str	ip, [sp, #36]	; 0x24
   175e8:	beq	17670 <__assert_fail@plt+0x64f4>
   175ec:	ldr	ip, [sp, #88]	; 0x58
   175f0:	cmp	ip, #0
   175f4:	str	ip, [sp, #40]	; 0x28
   175f8:	beq	17678 <__assert_fail@plt+0x64fc>
   175fc:	ldr	ip, [sp, #92]	; 0x5c
   17600:	cmp	ip, #0
   17604:	str	ip, [sp, #44]	; 0x2c
   17608:	beq	17680 <__assert_fail@plt+0x6504>
   1760c:	ldr	ip, [sp, #96]	; 0x60
   17610:	cmp	ip, #0
   17614:	str	ip, [sp, #48]	; 0x30
   17618:	beq	17688 <__assert_fail@plt+0x650c>
   1761c:	ldr	ip, [sp, #100]	; 0x64
   17620:	cmp	ip, #0
   17624:	str	ip, [sp, #52]	; 0x34
   17628:	movne	ip, #10
   1762c:	moveq	ip, #9
   17630:	add	r3, sp, #16
   17634:	stm	sp, {r3, ip}
   17638:	ldr	r3, [sp, #60]	; 0x3c
   1763c:	bl	16d24 <__assert_fail@plt+0x5ba8>
   17640:	add	sp, sp, #56	; 0x38
   17644:	pop	{lr}		; (ldr lr, [sp], #4)
   17648:	add	sp, sp, #4
   1764c:	bx	lr
   17650:	mov	ip, #1
   17654:	b	17630 <__assert_fail@plt+0x64b4>
   17658:	mov	ip, #2
   1765c:	b	17630 <__assert_fail@plt+0x64b4>
   17660:	mov	ip, #3
   17664:	b	17630 <__assert_fail@plt+0x64b4>
   17668:	mov	ip, #4
   1766c:	b	17630 <__assert_fail@plt+0x64b4>
   17670:	mov	ip, #5
   17674:	b	17630 <__assert_fail@plt+0x64b4>
   17678:	mov	ip, #6
   1767c:	b	17630 <__assert_fail@plt+0x64b4>
   17680:	mov	ip, #7
   17684:	b	17630 <__assert_fail@plt+0x64b4>
   17688:	mov	ip, #8
   1768c:	b	17630 <__assert_fail@plt+0x64b4>
   17690:	ldr	r3, [pc, #116]	; 1770c <__assert_fail@plt+0x6590>
   17694:	push	{r4, lr}
   17698:	mov	r0, #10
   1769c:	ldr	r1, [r3]
   176a0:	bl	10f54 <fputc_unlocked@plt>
   176a4:	mov	r2, #5
   176a8:	ldr	r1, [pc, #96]	; 17710 <__assert_fail@plt+0x6594>
   176ac:	mov	r0, #0
   176b0:	bl	10f60 <dcgettext@plt>
   176b4:	ldr	r2, [pc, #88]	; 17714 <__assert_fail@plt+0x6598>
   176b8:	mov	r1, r0
   176bc:	mov	r0, #1
   176c0:	bl	110bc <__printf_chk@plt>
   176c4:	mov	r2, #5
   176c8:	ldr	r1, [pc, #72]	; 17718 <__assert_fail@plt+0x659c>
   176cc:	mov	r0, #0
   176d0:	bl	10f60 <dcgettext@plt>
   176d4:	ldr	r3, [pc, #64]	; 1771c <__assert_fail@plt+0x65a0>
   176d8:	ldr	r2, [pc, #64]	; 17720 <__assert_fail@plt+0x65a4>
   176dc:	mov	r1, r0
   176e0:	mov	r0, #1
   176e4:	bl	110bc <__printf_chk@plt>
   176e8:	mov	r2, #5
   176ec:	ldr	r1, [pc, #48]	; 17724 <__assert_fail@plt+0x65a8>
   176f0:	mov	r0, #0
   176f4:	bl	10f60 <dcgettext@plt>
   176f8:	ldr	r2, [pc, #40]	; 17728 <__assert_fail@plt+0x65ac>
   176fc:	pop	{r4, lr}
   17700:	mov	r1, r0
   17704:	mov	r0, #1
   17708:	b	110bc <__printf_chk@plt>
   1770c:	andeq	sl, r2, r4, ror r1
   17710:			; <UNDEFINED> instruction: 0x00019dbc
   17714:	ldrdeq	r9, [r1], -r0
   17718:	andeq	r9, r1, r8, ror #27
   1771c:	andeq	r9, r1, ip, ror #12
   17720:	muleq	r1, r4, r6
   17724:	strdeq	r9, [r1], -ip
   17728:	andeq	r9, r1, r4, lsr #28
   1772c:	push	{r4, r5, r6, lr}
   17730:	mov	r6, r0
   17734:	mov	r5, r1
   17738:	mov	r4, r2
   1773c:	bl	189c0 <__assert_fail@plt+0x7844>
   17740:	cmp	r0, #0
   17744:	popne	{r4, r5, r6, pc}
   17748:	cmp	r6, #0
   1774c:	beq	1775c <__assert_fail@plt+0x65e0>
   17750:	cmp	r5, #0
   17754:	cmpne	r4, #0
   17758:	popeq	{r4, r5, r6, pc}
   1775c:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17760:	push	{r4, lr}
   17764:	bl	1847c <__assert_fail@plt+0x7300>
   17768:	cmp	r0, #0
   1776c:	popne	{r4, pc}
   17770:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17774:	push	{r4, lr}
   17778:	bl	1847c <__assert_fail@plt+0x7300>
   1777c:	cmp	r0, #0
   17780:	popne	{r4, pc}
   17784:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17788:	push	{r4, lr}
   1778c:	bl	1847c <__assert_fail@plt+0x7300>
   17790:	cmp	r0, #0
   17794:	popne	{r4, pc}
   17798:	bl	17da8 <__assert_fail@plt+0x6c2c>
   1779c:	push	{r4, r5, r6, lr}
   177a0:	mov	r5, r0
   177a4:	mov	r4, r1
   177a8:	bl	184a8 <__assert_fail@plt+0x732c>
   177ac:	cmp	r0, #0
   177b0:	popne	{r4, r5, r6, pc}
   177b4:	adds	r4, r4, #0
   177b8:	movne	r4, #1
   177bc:	cmp	r5, #0
   177c0:	orreq	r4, r4, #1
   177c4:	cmp	r4, #0
   177c8:	popeq	{r4, r5, r6, pc}
   177cc:	bl	17da8 <__assert_fail@plt+0x6c2c>
   177d0:	push	{r4, lr}
   177d4:	cmp	r1, #0
   177d8:	orreq	r1, r1, #1
   177dc:	bl	184a8 <__assert_fail@plt+0x732c>
   177e0:	cmp	r0, #0
   177e4:	popne	{r4, pc}
   177e8:	bl	17da8 <__assert_fail@plt+0x6c2c>
   177ec:	push	{r4, r5, r6, lr}
   177f0:	mov	r6, r0
   177f4:	mov	r5, r1
   177f8:	mov	r4, r2
   177fc:	bl	189c0 <__assert_fail@plt+0x7844>
   17800:	cmp	r0, #0
   17804:	popne	{r4, r5, r6, pc}
   17808:	cmp	r6, #0
   1780c:	beq	1781c <__assert_fail@plt+0x66a0>
   17810:	cmp	r5, #0
   17814:	cmpne	r4, #0
   17818:	popeq	{r4, r5, r6, pc}
   1781c:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17820:	cmp	r2, #0
   17824:	cmpne	r1, #0
   17828:	moveq	r2, #1
   1782c:	moveq	r1, r2
   17830:	push	{r4, lr}
   17834:	bl	189c0 <__assert_fail@plt+0x7844>
   17838:	cmp	r0, #0
   1783c:	popne	{r4, pc}
   17840:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17844:	push	{r4, lr}
   17848:	mov	r2, r1
   1784c:	mov	r1, r0
   17850:	mov	r0, #0
   17854:	bl	189c0 <__assert_fail@plt+0x7844>
   17858:	cmp	r0, #0
   1785c:	popne	{r4, pc}
   17860:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17864:	cmp	r1, #0
   17868:	cmpne	r0, #0
   1786c:	moveq	r2, #1
   17870:	movne	r2, r1
   17874:	moveq	r1, r2
   17878:	movne	r1, r0
   1787c:	push	{r4, lr}
   17880:	mov	r0, #0
   17884:	bl	189c0 <__assert_fail@plt+0x7844>
   17888:	cmp	r0, #0
   1788c:	popne	{r4, pc}
   17890:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17894:	cmp	r0, #0
   17898:	push	{r4, r5, r6, lr}
   1789c:	mov	r5, r1
   178a0:	ldr	r4, [r1]
   178a4:	beq	178e0 <__assert_fail@plt+0x6764>
   178a8:	lsr	r2, r4, #1
   178ac:	add	r3, r2, #1
   178b0:	mvn	r3, r3
   178b4:	cmp	r4, r3
   178b8:	bhi	178fc <__assert_fail@plt+0x6780>
   178bc:	add	r4, r4, #1
   178c0:	add	r4, r4, r2
   178c4:	mov	r1, r4
   178c8:	mov	r2, #1
   178cc:	bl	189c0 <__assert_fail@plt+0x7844>
   178d0:	cmp	r0, #0
   178d4:	beq	17900 <__assert_fail@plt+0x6784>
   178d8:	str	r4, [r5]
   178dc:	pop	{r4, r5, r6, pc}
   178e0:	cmp	r4, #0
   178e4:	moveq	r4, #64	; 0x40
   178e8:	mov	r1, r4
   178ec:	mov	r2, #1
   178f0:	bl	189c0 <__assert_fail@plt+0x7844>
   178f4:	cmp	r0, #0
   178f8:	bne	178d8 <__assert_fail@plt+0x675c>
   178fc:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17900:	cmp	r4, #0
   17904:	bne	178fc <__assert_fail@plt+0x6780>
   17908:	str	r4, [r5]
   1790c:	pop	{r4, r5, r6, pc}
   17910:	cmp	r0, #0
   17914:	push	{r4, r5, r6, lr}
   17918:	mov	r5, r1
   1791c:	ldr	r4, [r1]
   17920:	mov	r6, r2
   17924:	beq	17968 <__assert_fail@plt+0x67ec>
   17928:	lsr	r1, r4, #1
   1792c:	add	r3, r1, #1
   17930:	mvn	r3, r3
   17934:	cmp	r4, r3
   17938:	bhi	179a0 <__assert_fail@plt+0x6824>
   1793c:	add	r4, r4, #1
   17940:	add	r4, r4, r1
   17944:	mov	r1, r4
   17948:	bl	189c0 <__assert_fail@plt+0x7844>
   1794c:	cmp	r0, #0
   17950:	bne	17960 <__assert_fail@plt+0x67e4>
   17954:	cmp	r4, #0
   17958:	cmpne	r6, #0
   1795c:	bne	179a0 <__assert_fail@plt+0x6824>
   17960:	str	r4, [r5]
   17964:	pop	{r4, r5, r6, pc}
   17968:	cmp	r4, #0
   1796c:	bne	17988 <__assert_fail@plt+0x680c>
   17970:	mov	r1, r2
   17974:	mov	r0, #64	; 0x40
   17978:	bl	18b00 <__assert_fail@plt+0x7984>
   1797c:	cmp	r0, #0
   17980:	movne	r4, r0
   17984:	addeq	r4, r0, #1
   17988:	mov	r2, r6
   1798c:	mov	r1, r4
   17990:	mov	r0, #0
   17994:	bl	189c0 <__assert_fail@plt+0x7844>
   17998:	cmp	r0, #0
   1799c:	bne	17960 <__assert_fail@plt+0x67e4>
   179a0:	bl	17da8 <__assert_fail@plt+0x6c2c>
   179a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179a8:	sub	sp, sp, #12
   179ac:	ldr	r6, [r1]
   179b0:	mov	r8, r1
   179b4:	mov	r9, r0
   179b8:	asrs	r4, r6, #1
   179bc:	mov	sl, r2
   179c0:	mov	fp, r3
   179c4:	ldr	r7, [sp, #48]	; 0x30
   179c8:	bmi	17b44 <__assert_fail@plt+0x69c8>
   179cc:	mvn	r1, #-2147483648	; 0x80000000
   179d0:	sub	r1, r1, r4
   179d4:	cmp	r6, r1
   179d8:	movle	r1, #0
   179dc:	movgt	r1, #1
   179e0:	mvn	r3, fp
   179e4:	cmp	r1, #0
   179e8:	addeq	r4, r4, r6
   179ec:	mvnne	r4, #-2147483648	; 0x80000000
   179f0:	lsr	r3, r3, #31
   179f4:	cmp	fp, r4
   179f8:	movge	r2, #0
   179fc:	andlt	r2, r3, #1
   17a00:	cmp	r2, #0
   17a04:	beq	17af4 <__assert_fail@plt+0x6978>
   17a08:	cmp	r7, #0
   17a0c:	blt	17bdc <__assert_fail@plt+0x6a60>
   17a10:	bne	17bd4 <__assert_fail@plt+0x6a58>
   17a14:	mov	r5, #64	; 0x40
   17a18:	mov	r1, r7
   17a1c:	mov	r0, r5
   17a20:	str	r3, [sp, #4]
   17a24:	bl	18d0c <__assert_fail@plt+0x7b90>
   17a28:	mov	r1, r7
   17a2c:	mov	r4, r0
   17a30:	mov	r0, r5
   17a34:	bl	18f2c <__assert_fail@plt+0x7db0>
   17a38:	ldr	r3, [sp, #4]
   17a3c:	sub	r5, r5, r1
   17a40:	cmp	r9, #0
   17a44:	sub	r2, r4, r6
   17a48:	streq	r9, [r8]
   17a4c:	cmp	r2, sl
   17a50:	bge	17ad4 <__assert_fail@plt+0x6958>
   17a54:	cmp	sl, #0
   17a58:	blt	17b74 <__assert_fail@plt+0x69f8>
   17a5c:	cmp	r6, #0
   17a60:	blt	17a80 <__assert_fail@plt+0x6904>
   17a64:	mvn	r2, #-2147483648	; 0x80000000
   17a68:	sub	r2, r2, sl
   17a6c:	cmp	r6, r2
   17a70:	movle	r2, #0
   17a74:	movgt	r2, #1
   17a78:	cmp	r2, #0
   17a7c:	bne	17b70 <__assert_fail@plt+0x69f4>
   17a80:	add	r6, r6, sl
   17a84:	cmp	fp, r6
   17a88:	movge	r3, #0
   17a8c:	andlt	r3, r3, #1
   17a90:	cmp	r3, #0
   17a94:	mov	r4, r6
   17a98:	bne	17b70 <__assert_fail@plt+0x69f4>
   17a9c:	cmp	r7, #0
   17aa0:	blt	17b88 <__assert_fail@plt+0x6a0c>
   17aa4:	beq	17ad0 <__assert_fail@plt+0x6954>
   17aa8:	cmp	r6, #0
   17aac:	blt	17c2c <__assert_fail@plt+0x6ab0>
   17ab0:	mov	r1, r7
   17ab4:	mvn	r0, #-2147483648	; 0x80000000
   17ab8:	bl	18d0c <__assert_fail@plt+0x7b90>
   17abc:	cmp	r6, r0
   17ac0:	movle	r0, #0
   17ac4:	movgt	r0, #1
   17ac8:	cmp	r0, #0
   17acc:	bne	17b70 <__assert_fail@plt+0x69f4>
   17ad0:	mul	r5, r6, r7
   17ad4:	mov	r1, r5
   17ad8:	mov	r0, r9
   17adc:	bl	184a8 <__assert_fail@plt+0x732c>
   17ae0:	cmp	r0, #0
   17ae4:	beq	17b58 <__assert_fail@plt+0x69dc>
   17ae8:	str	r4, [r8]
   17aec:	add	sp, sp, #12
   17af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17af4:	cmp	r7, #0
   17af8:	blt	17bb4 <__assert_fail@plt+0x6a38>
   17afc:	beq	17a14 <__assert_fail@plt+0x6898>
   17b00:	cmp	r4, #0
   17b04:	blt	17be4 <__assert_fail@plt+0x6a68>
   17b08:	mov	r1, r7
   17b0c:	mvn	r0, #-2147483648	; 0x80000000
   17b10:	str	r3, [sp, #4]
   17b14:	bl	18d0c <__assert_fail@plt+0x7b90>
   17b18:	ldr	r3, [sp, #4]
   17b1c:	cmp	r0, r4
   17b20:	movge	r0, #0
   17b24:	movlt	r0, #1
   17b28:	cmp	r0, #0
   17b2c:	mvnne	r5, #-2147483648	; 0x80000000
   17b30:	bne	17a18 <__assert_fail@plt+0x689c>
   17b34:	mul	r5, r7, r4
   17b38:	cmp	r5, #63	; 0x3f
   17b3c:	bgt	17a40 <__assert_fail@plt+0x68c4>
   17b40:	b	17a14 <__assert_fail@plt+0x6898>
   17b44:	rsb	r1, r4, #-2147483648	; 0x80000000
   17b48:	cmp	r6, r1
   17b4c:	movge	r1, #0
   17b50:	movlt	r1, #1
   17b54:	b	179e0 <__assert_fail@plt+0x6864>
   17b58:	adds	r5, r5, #0
   17b5c:	movne	r5, #1
   17b60:	cmp	r9, #0
   17b64:	orreq	r5, r5, #1
   17b68:	cmp	r5, #0
   17b6c:	beq	17ae8 <__assert_fail@plt+0x696c>
   17b70:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17b74:	rsb	r2, sl, #-2147483648	; 0x80000000
   17b78:	cmp	r6, r2
   17b7c:	movge	r2, #0
   17b80:	movlt	r2, #1
   17b84:	b	17a78 <__assert_fail@plt+0x68fc>
   17b88:	cmp	r6, #0
   17b8c:	blt	17c10 <__assert_fail@plt+0x6a94>
   17b90:	cmn	r7, #1
   17b94:	beq	17ad0 <__assert_fail@plt+0x6954>
   17b98:	mov	r1, r7
   17b9c:	mov	r0, #-2147483648	; 0x80000000
   17ba0:	bl	18d0c <__assert_fail@plt+0x7b90>
   17ba4:	cmp	r6, r0
   17ba8:	movle	r0, #0
   17bac:	movgt	r0, #1
   17bb0:	b	17ac8 <__assert_fail@plt+0x694c>
   17bb4:	cmp	r4, #0
   17bb8:	blt	17c50 <__assert_fail@plt+0x6ad4>
   17bbc:	cmn	r7, #1
   17bc0:	beq	17b34 <__assert_fail@plt+0x69b8>
   17bc4:	str	r3, [sp, #4]
   17bc8:	mov	r1, r7
   17bcc:	mov	r0, #-2147483648	; 0x80000000
   17bd0:	b	17b14 <__assert_fail@plt+0x6998>
   17bd4:	mov	r4, fp
   17bd8:	b	17b08 <__assert_fail@plt+0x698c>
   17bdc:	mov	r4, fp
   17be0:	b	17bbc <__assert_fail@plt+0x6a40>
   17be4:	cmn	r4, #1
   17be8:	beq	17b34 <__assert_fail@plt+0x69b8>
   17bec:	mov	r1, r4
   17bf0:	mov	r0, #-2147483648	; 0x80000000
   17bf4:	str	r3, [sp, #4]
   17bf8:	bl	18d0c <__assert_fail@plt+0x7b90>
   17bfc:	ldr	r3, [sp, #4]
   17c00:	cmp	r7, r0
   17c04:	movle	r0, #0
   17c08:	movgt	r0, #1
   17c0c:	b	17b28 <__assert_fail@plt+0x69ac>
   17c10:	mov	r1, r7
   17c14:	mvn	r0, #-2147483648	; 0x80000000
   17c18:	bl	18d0c <__assert_fail@plt+0x7b90>
   17c1c:	cmp	r6, r0
   17c20:	movge	r0, #0
   17c24:	movlt	r0, #1
   17c28:	b	17ac8 <__assert_fail@plt+0x694c>
   17c2c:	cmn	r6, #1
   17c30:	beq	17ad0 <__assert_fail@plt+0x6954>
   17c34:	mov	r1, r6
   17c38:	mov	r0, #-2147483648	; 0x80000000
   17c3c:	bl	18d0c <__assert_fail@plt+0x7b90>
   17c40:	cmp	r7, r0
   17c44:	movle	r0, #0
   17c48:	movgt	r0, #1
   17c4c:	b	17ac8 <__assert_fail@plt+0x694c>
   17c50:	mov	r1, r7
   17c54:	mvn	r0, #-2147483648	; 0x80000000
   17c58:	str	r3, [sp, #4]
   17c5c:	bl	18d0c <__assert_fail@plt+0x7b90>
   17c60:	ldr	r3, [sp, #4]
   17c64:	cmp	r0, r4
   17c68:	movle	r0, #0
   17c6c:	movgt	r0, #1
   17c70:	b	17b28 <__assert_fail@plt+0x69ac>
   17c74:	push	{r4, lr}
   17c78:	mov	r1, #1
   17c7c:	bl	18434 <__assert_fail@plt+0x72b8>
   17c80:	cmp	r0, #0
   17c84:	popne	{r4, pc}
   17c88:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17c8c:	push	{r4, lr}
   17c90:	mov	r1, #1
   17c94:	bl	18434 <__assert_fail@plt+0x72b8>
   17c98:	cmp	r0, #0
   17c9c:	popne	{r4, pc}
   17ca0:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17ca4:	push	{r4, lr}
   17ca8:	bl	18434 <__assert_fail@plt+0x72b8>
   17cac:	cmp	r0, #0
   17cb0:	popne	{r4, pc}
   17cb4:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17cb8:	push	{r4, lr}
   17cbc:	bl	18434 <__assert_fail@plt+0x72b8>
   17cc0:	cmp	r0, #0
   17cc4:	popne	{r4, pc}
   17cc8:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17ccc:	push	{r4, r5, r6, lr}
   17cd0:	mov	r6, r0
   17cd4:	mov	r0, r1
   17cd8:	mov	r4, r1
   17cdc:	bl	1847c <__assert_fail@plt+0x7300>
   17ce0:	subs	r5, r0, #0
   17ce4:	beq	17cfc <__assert_fail@plt+0x6b80>
   17ce8:	mov	r2, r4
   17cec:	mov	r1, r6
   17cf0:	bl	10f30 <memcpy@plt>
   17cf4:	mov	r0, r5
   17cf8:	pop	{r4, r5, r6, pc}
   17cfc:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17d00:	push	{r4, r5, r6, lr}
   17d04:	mov	r6, r0
   17d08:	mov	r0, r1
   17d0c:	mov	r4, r1
   17d10:	bl	1847c <__assert_fail@plt+0x7300>
   17d14:	subs	r5, r0, #0
   17d18:	beq	17d30 <__assert_fail@plt+0x6bb4>
   17d1c:	mov	r2, r4
   17d20:	mov	r1, r6
   17d24:	bl	10f30 <memcpy@plt>
   17d28:	mov	r0, r5
   17d2c:	pop	{r4, r5, r6, pc}
   17d30:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17d34:	push	{r4, r5, r6, lr}
   17d38:	mov	r6, r0
   17d3c:	add	r0, r1, #1
   17d40:	mov	r4, r1
   17d44:	bl	1847c <__assert_fail@plt+0x7300>
   17d48:	subs	r5, r0, #0
   17d4c:	beq	17d6c <__assert_fail@plt+0x6bf0>
   17d50:	mov	r3, #0
   17d54:	mov	r1, r6
   17d58:	strb	r3, [r5, r4]
   17d5c:	mov	r2, r4
   17d60:	bl	10f30 <memcpy@plt>
   17d64:	mov	r0, r5
   17d68:	pop	{r4, r5, r6, pc}
   17d6c:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17d70:	push	{r4, r5, r6, lr}
   17d74:	mov	r6, r0
   17d78:	bl	11068 <strlen@plt>
   17d7c:	add	r4, r0, #1
   17d80:	mov	r0, r4
   17d84:	bl	1847c <__assert_fail@plt+0x7300>
   17d88:	subs	r5, r0, #0
   17d8c:	beq	17da4 <__assert_fail@plt+0x6c28>
   17d90:	mov	r2, r4
   17d94:	mov	r1, r6
   17d98:	bl	10f30 <memcpy@plt>
   17d9c:	mov	r0, r5
   17da0:	pop	{r4, r5, r6, pc}
   17da4:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17da8:	ldr	r3, [pc, #44]	; 17ddc <__assert_fail@plt+0x6c60>
   17dac:	push	{r4, lr}
   17db0:	mov	r2, #5
   17db4:	ldr	r1, [pc, #36]	; 17de0 <__assert_fail@plt+0x6c64>
   17db8:	mov	r0, #0
   17dbc:	ldr	r4, [r3]
   17dc0:	bl	10f60 <dcgettext@plt>
   17dc4:	ldr	r2, [pc, #24]	; 17de4 <__assert_fail@plt+0x6c68>
   17dc8:	mov	r1, #0
   17dcc:	mov	r3, r0
   17dd0:	mov	r0, r4
   17dd4:	bl	10ff0 <error@plt>
   17dd8:	bl	11158 <abort@plt>
   17ddc:	andeq	sl, r2, r8, lsl r1
   17de0:	andeq	r9, r1, r4, ror lr
   17de4:	andeq	r9, r1, ip, lsl #20
   17de8:	push	{r4, lr}
   17dec:	bl	187a8 <__assert_fail@plt+0x762c>
   17df0:	cmn	r0, #1
   17df4:	mov	r4, r0
   17df8:	beq	17e04 <__assert_fail@plt+0x6c88>
   17dfc:	mov	r0, r4
   17e00:	pop	{r4, pc}
   17e04:	bl	11080 <__errno_location@plt>
   17e08:	ldr	r3, [r0]
   17e0c:	cmp	r3, #12
   17e10:	bne	17dfc <__assert_fail@plt+0x6c80>
   17e14:	bl	17da8 <__assert_fail@plt+0x6c2c>
   17e18:	cmp	r2, #36	; 0x24
   17e1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e20:	sub	sp, sp, #8
   17e24:	bhi	1840c <__assert_fail@plt+0x7290>
   17e28:	cmp	r1, #0
   17e2c:	mov	r6, r1
   17e30:	mov	r9, r2
   17e34:	mov	r5, r0
   17e38:	mov	r8, r3
   17e3c:	addeq	r6, sp, #4
   17e40:	bl	11080 <__errno_location@plt>
   17e44:	mov	r3, #0
   17e48:	str	r3, [r0]
   17e4c:	mov	r7, r0
   17e50:	bl	11044 <__ctype_b_loc@plt>
   17e54:	ldrb	r1, [r5]
   17e58:	mov	r2, r5
   17e5c:	ldr	r0, [r0]
   17e60:	b	17e68 <__assert_fail@plt+0x6cec>
   17e64:	ldrb	r1, [r2, #1]!
   17e68:	lsl	r3, r1, #1
   17e6c:	ldrh	r3, [r0, r3]
   17e70:	ands	r4, r3, #8192	; 0x2000
   17e74:	bne	17e64 <__assert_fail@plt+0x6ce8>
   17e78:	cmp	r1, #45	; 0x2d
   17e7c:	bne	17e90 <__assert_fail@plt+0x6d14>
   17e80:	mov	r4, #4
   17e84:	mov	r0, r4
   17e88:	add	sp, sp, #8
   17e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e90:	mov	r2, r9
   17e94:	mov	r1, r6
   17e98:	mov	r0, r5
   17e9c:	bl	1105c <strtoul@plt>
   17ea0:	ldr	sl, [r6]
   17ea4:	cmp	r5, sl
   17ea8:	mov	r9, r0
   17eac:	beq	17ef4 <__assert_fail@plt+0x6d78>
   17eb0:	ldr	r4, [r7]
   17eb4:	cmp	r4, #0
   17eb8:	bne	17ee4 <__assert_fail@plt+0x6d68>
   17ebc:	ldr	r3, [sp, #40]	; 0x28
   17ec0:	cmp	r3, #0
   17ec4:	beq	17ed4 <__assert_fail@plt+0x6d58>
   17ec8:	ldrb	r5, [sl]
   17ecc:	cmp	r5, #0
   17ed0:	bne	17f24 <__assert_fail@plt+0x6da8>
   17ed4:	mov	r0, r4
   17ed8:	str	r9, [r8]
   17edc:	add	sp, sp, #8
   17ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ee4:	cmp	r4, #34	; 0x22
   17ee8:	bne	17e80 <__assert_fail@plt+0x6d04>
   17eec:	mov	r4, #1
   17ef0:	b	17ebc <__assert_fail@plt+0x6d40>
   17ef4:	ldr	r3, [sp, #40]	; 0x28
   17ef8:	cmp	r3, #0
   17efc:	beq	17e80 <__assert_fail@plt+0x6d04>
   17f00:	ldrb	r5, [sl]
   17f04:	cmp	r5, #0
   17f08:	beq	17e80 <__assert_fail@plt+0x6d04>
   17f0c:	mov	r1, r5
   17f10:	mov	r0, r3
   17f14:	bl	11074 <strchr@plt>
   17f18:	cmp	r0, #0
   17f1c:	movne	r9, #1
   17f20:	beq	17e80 <__assert_fail@plt+0x6d04>
   17f24:	mov	r1, r5
   17f28:	ldr	r0, [sp, #40]	; 0x28
   17f2c:	bl	11074 <strchr@plt>
   17f30:	cmp	r0, #0
   17f34:	beq	183c4 <__assert_fail@plt+0x7248>
   17f38:	sub	r3, r5, #69	; 0x45
   17f3c:	cmp	r3, #47	; 0x2f
   17f40:	ldrls	pc, [pc, r3, lsl #2]
   17f44:	b	18008 <__assert_fail@plt+0x6e8c>
   17f48:	strdeq	r8, [r1], -ip
   17f4c:	andeq	r8, r1, r8
   17f50:	strdeq	r8, [r1], -ip
   17f54:	andeq	r8, r1, r8
   17f58:	andeq	r8, r1, r8
   17f5c:	andeq	r8, r1, r8
   17f60:	strdeq	r8, [r1], -ip
   17f64:	andeq	r8, r1, r8
   17f68:	strdeq	r8, [r1], -ip
   17f6c:	andeq	r8, r1, r8
   17f70:	andeq	r8, r1, r8
   17f74:	strdeq	r8, [r1], -ip
   17f78:	andeq	r8, r1, r8
   17f7c:	andeq	r8, r1, r8
   17f80:	andeq	r8, r1, r8
   17f84:	strdeq	r8, [r1], -ip
   17f88:	andeq	r8, r1, r8
   17f8c:	andeq	r8, r1, r8
   17f90:	andeq	r8, r1, r8
   17f94:	andeq	r8, r1, r8
   17f98:	strdeq	r8, [r1], -ip
   17f9c:	strdeq	r8, [r1], -ip
   17fa0:	andeq	r8, r1, r8
   17fa4:	andeq	r8, r1, r8
   17fa8:	andeq	r8, r1, r8
   17fac:	andeq	r8, r1, r8
   17fb0:	andeq	r8, r1, r8
   17fb4:	andeq	r8, r1, r8
   17fb8:	andeq	r8, r1, r8
   17fbc:	andeq	r8, r1, r8
   17fc0:	andeq	r8, r1, r8
   17fc4:	andeq	r8, r1, r8
   17fc8:	andeq	r8, r1, r8
   17fcc:	andeq	r8, r1, r8
   17fd0:	strdeq	r8, [r1], -ip
   17fd4:	andeq	r8, r1, r8
   17fd8:	andeq	r8, r1, r8
   17fdc:	andeq	r8, r1, r8
   17fe0:	strdeq	r8, [r1], -ip
   17fe4:	andeq	r8, r1, r8
   17fe8:	strdeq	r8, [r1], -ip
   17fec:	andeq	r8, r1, r8
   17ff0:	andeq	r8, r1, r8
   17ff4:	andeq	r8, r1, r8
   17ff8:	andeq	r8, r1, r8
   17ffc:	andeq	r8, r1, r8
   18000:	andeq	r8, r1, r8
   18004:	strdeq	r8, [r1], -ip
   18008:	ldr	r0, [pc, #1040]	; 18420 <__assert_fail@plt+0x72a4>
   1800c:	mov	r2, #1024	; 0x400
   18010:	mov	r1, #1
   18014:	sub	r5, r5, #66	; 0x42
   18018:	cmp	r5, #53	; 0x35
   1801c:	ldrls	pc, [pc, r5, lsl #2]
   18020:	b	183c4 <__assert_fail@plt+0x7248>
   18024:			; <UNDEFINED> instruction: 0x000183b0
   18028:	andeq	r8, r1, r4, asr #7
   1802c:	andeq	r8, r1, r4, asr #7
   18030:	andeq	r8, r1, r0, asr r3
   18034:	andeq	r8, r1, r4, asr #7
   18038:	andeq	r8, r1, r4, lsr #6
   1803c:	andeq	r8, r1, r4, asr #7
   18040:	andeq	r8, r1, r4, asr #7
   18044:	andeq	r8, r1, r4, asr #7
   18048:	ldrdeq	r8, [r1], -r0
   1804c:	andeq	r8, r1, r4, asr #7
   18050:	andeq	r8, r1, ip, lsl #6
   18054:	andeq	r8, r1, r4, asr #7
   18058:	andeq	r8, r1, r4, asr #7
   1805c:	andeq	r8, r1, r8, asr #5
   18060:	andeq	r8, r1, r4, asr #7
   18064:	andeq	r8, r1, r4, asr #7
   18068:	andeq	r8, r1, r4, asr #7
   1806c:	andeq	r8, r1, r4, ror r2
   18070:	andeq	r8, r1, r4, asr #7
   18074:	andeq	r8, r1, r4, asr #7
   18078:	andeq	r8, r1, r4, asr #7
   1807c:	andeq	r8, r1, r4, asr #7
   18080:	andeq	r8, r1, r4, lsl #4
   18084:	andeq	r8, r1, r4, lsl #3
   18088:	andeq	r8, r1, r4, asr #7
   1808c:	andeq	r8, r1, r4, asr #7
   18090:	andeq	r8, r1, r4, asr #7
   18094:	andeq	r8, r1, r4, asr #7
   18098:	andeq	r8, r1, r4, asr #7
   1809c:	andeq	r8, r1, r4, asr #7
   180a0:	andeq	r8, r1, r4, asr #7
   180a4:	andeq	r8, r1, r0, ror r1
   180a8:	andeq	r8, r1, r8, ror #2
   180ac:	andeq	r8, r1, r4, asr #7
   180b0:	andeq	r8, r1, r4, asr #7
   180b4:	andeq	r8, r1, r4, asr #7
   180b8:	andeq	r8, r1, r4, lsr #6
   180bc:	andeq	r8, r1, r4, asr #7
   180c0:	andeq	r8, r1, r4, asr #7
   180c4:	andeq	r8, r1, r4, asr #7
   180c8:	ldrdeq	r8, [r1], -r0
   180cc:	andeq	r8, r1, r4, asr #7
   180d0:	andeq	r8, r1, ip, lsl #6
   180d4:	andeq	r8, r1, r4, asr #7
   180d8:	andeq	r8, r1, r4, asr #7
   180dc:	andeq	r8, r1, r4, asr #7
   180e0:	andeq	r8, r1, r4, asr #7
   180e4:	andeq	r8, r1, r4, asr #7
   180e8:	andeq	r8, r1, r4, asr #7
   180ec:	andeq	r8, r1, r4, ror r2
   180f0:	andeq	r8, r1, r4, asr #7
   180f4:	andeq	r8, r1, r4, asr #7
   180f8:	andeq	r8, r1, ip, lsr r1
   180fc:	mov	r1, #48	; 0x30
   18100:	ldr	r0, [sp, #40]	; 0x28
   18104:	bl	11074 <strchr@plt>
   18108:	cmp	r0, #0
   1810c:	beq	18008 <__assert_fail@plt+0x6e8c>
   18110:	ldrb	r3, [sl, #1]
   18114:	cmp	r3, #68	; 0x44
   18118:	beq	1812c <__assert_fail@plt+0x6fb0>
   1811c:	cmp	r3, #105	; 0x69
   18120:	beq	183e4 <__assert_fail@plt+0x7268>
   18124:	cmp	r3, #66	; 0x42
   18128:	bne	18008 <__assert_fail@plt+0x6e8c>
   1812c:	ldr	r0, [pc, #752]	; 18424 <__assert_fail@plt+0x72a8>
   18130:	mov	r2, #1000	; 0x3e8
   18134:	mov	r1, #2
   18138:	b	18014 <__assert_fail@plt+0x6e98>
   1813c:	cmp	r9, #0
   18140:	lslge	r9, r9, #1
   18144:	movge	r3, #0
   18148:	blt	18400 <__assert_fail@plt+0x7284>
   1814c:	add	r2, sl, r1
   18150:	str	r2, [r6]
   18154:	ldrb	r2, [sl, r1]
   18158:	orr	r4, r4, r3
   1815c:	cmp	r2, #0
   18160:	orrne	r4, r4, #2
   18164:	b	17ed4 <__assert_fail@plt+0x6d58>
   18168:	mov	r3, #0
   1816c:	b	1814c <__assert_fail@plt+0x6fd0>
   18170:	cmp	r9, #8388608	; 0x800000
   18174:	bcs	18400 <__assert_fail@plt+0x7284>
   18178:	lsl	r9, r9, #9
   1817c:	mov	r3, #0
   18180:	b	1814c <__assert_fail@plt+0x6fd0>
   18184:	mul	r3, r9, r2
   18188:	cmp	r0, r9
   1818c:	mvncc	r3, #0
   18190:	cmp	r3, r0
   18194:	mul	ip, r2, r3
   18198:	mvnhi	ip, #0
   1819c:	movhi	r3, #1
   181a0:	mul	lr, r2, ip
   181a4:	movls	r3, #0
   181a8:	cmp	r0, r9
   181ac:	orrcc	r3, r3, #1
   181b0:	cmp	ip, r0
   181b4:	mvnhi	lr, #0
   181b8:	orrhi	r3, r3, #1
   181bc:	mul	ip, r2, lr
   181c0:	cmp	lr, r0
   181c4:	mvnhi	ip, #0
   181c8:	orrhi	r3, r3, #1
   181cc:	cmp	ip, r0
   181d0:	mul	lr, r2, ip
   181d4:	orrhi	r3, r3, #1
   181d8:	mvnhi	lr, #0
   181dc:	cmp	r0, lr
   181e0:	mul	ip, lr, r2
   181e4:	orrcc	r3, r3, #1
   181e8:	mvncc	ip, #0
   181ec:	mul	r2, r2, ip
   181f0:	cmp	ip, r0
   181f4:	movls	r9, r2
   181f8:	mvnhi	r9, #0
   181fc:	orrhi	r3, r3, #1
   18200:	b	1814c <__assert_fail@plt+0x6fd0>
   18204:	mul	r3, r9, r2
   18208:	cmp	r0, r9
   1820c:	mvncc	r3, #0
   18210:	cmp	r3, r0
   18214:	mul	ip, r2, r3
   18218:	mvnhi	ip, #0
   1821c:	movhi	r3, #1
   18220:	mul	lr, r2, ip
   18224:	movls	r3, #0
   18228:	cmp	r0, r9
   1822c:	orrcc	r3, r3, #1
   18230:	cmp	ip, r0
   18234:	movls	ip, lr
   18238:	mvnhi	ip, #0
   1823c:	orrhi	r3, r3, #1
   18240:	mul	lr, ip, r2
   18244:	cmp	r0, ip
   18248:	mvncc	lr, #0
   1824c:	orrcc	r3, r3, #1
   18250:	mul	ip, r2, lr
   18254:	cmp	lr, r0
   18258:	mvnhi	ip, #0
   1825c:	orrhi	r3, r3, #1
   18260:	cmp	r0, ip
   18264:	mul	lr, ip, r2
   18268:	orrcc	r3, r3, #1
   1826c:	mvncc	lr, #0
   18270:	b	181dc <__assert_fail@plt+0x7060>
   18274:	mul	r3, r9, r2
   18278:	cmp	r0, r9
   1827c:	mvncc	r3, #0
   18280:	cmp	r0, r3
   18284:	mul	ip, r3, r2
   18288:	mvncc	ip, #0
   1828c:	movcc	r3, #1
   18290:	mul	lr, r2, ip
   18294:	movcs	r3, #0
   18298:	cmp	r0, r9
   1829c:	orrcc	r3, r3, #1
   182a0:	cmp	ip, r0
   182a4:	movls	ip, lr
   182a8:	mvnhi	ip, #0
   182ac:	orrhi	r3, r3, #1
   182b0:	mul	r2, ip, r2
   182b4:	cmp	r0, ip
   182b8:	movcs	r9, r2
   182bc:	mvncc	r9, #0
   182c0:	orrcc	r3, r3, #1
   182c4:	b	1814c <__assert_fail@plt+0x6fd0>
   182c8:	mul	r3, r9, r2
   182cc:	cmp	r0, r9
   182d0:	mvncc	r3, #0
   182d4:	cmp	r0, r3
   182d8:	mul	ip, r3, r2
   182dc:	mvncc	ip, #0
   182e0:	movcc	r3, #1
   182e4:	mul	lr, ip, r2
   182e8:	movcs	r3, #0
   182ec:	cmp	r0, r9
   182f0:	orrcc	r3, r3, #1
   182f4:	cmp	r0, ip
   182f8:	mvncc	lr, #0
   182fc:	orrcc	r3, r3, #1
   18300:	mul	ip, r2, lr
   18304:	cmp	lr, r0
   18308:	b	182a8 <__assert_fail@plt+0x712c>
   1830c:	cmp	r0, r9
   18310:	mul	ip, r9, r2
   18314:	movcc	r3, #1
   18318:	mvncc	ip, #0
   1831c:	movcs	r3, #0
   18320:	b	182b0 <__assert_fail@plt+0x7134>
   18324:	mul	r3, r9, r2
   18328:	cmp	r0, r9
   1832c:	mvncc	r3, #0
   18330:	cmp	r3, r0
   18334:	mul	ip, r2, r3
   18338:	movhi	r3, #1
   1833c:	movls	r3, #0
   18340:	mvnhi	ip, #0
   18344:	cmp	r0, r9
   18348:	orrcc	r3, r3, #1
   1834c:	b	181ec <__assert_fail@plt+0x7070>
   18350:	mul	r3, r9, r2
   18354:	cmp	r0, r9
   18358:	mvncc	r3, #0
   1835c:	cmp	r0, r3
   18360:	mul	ip, r3, r2
   18364:	mvncc	ip, #0
   18368:	movcc	r3, #1
   1836c:	mul	lr, r2, ip
   18370:	movcs	r3, #0
   18374:	cmp	r0, r9
   18378:	orrcc	r3, r3, #1
   1837c:	cmp	ip, r0
   18380:	movls	ip, lr
   18384:	mvnhi	ip, #0
   18388:	orrhi	r3, r3, #1
   1838c:	mul	lr, r2, ip
   18390:	cmp	ip, r0
   18394:	mvnhi	lr, #0
   18398:	orrhi	r3, r3, #1
   1839c:	cmp	lr, r0
   183a0:	mul	ip, r2, lr
   183a4:	orrhi	r3, r3, #1
   183a8:	mvnhi	ip, #0
   183ac:	b	181ec <__assert_fail@plt+0x7070>
   183b0:	cmp	r9, #4194304	; 0x400000
   183b4:	bcs	18400 <__assert_fail@plt+0x7284>
   183b8:	lsl	r9, r9, #10
   183bc:	mov	r3, #0
   183c0:	b	1814c <__assert_fail@plt+0x6fd0>
   183c4:	str	r9, [r8]
   183c8:	orr	r4, r4, #2
   183cc:	b	17e84 <__assert_fail@plt+0x6d08>
   183d0:	cmp	r0, r9
   183d4:	bcc	18400 <__assert_fail@plt+0x7284>
   183d8:	mul	r9, r9, r2
   183dc:	mov	r3, #0
   183e0:	b	1814c <__assert_fail@plt+0x6fd0>
   183e4:	ldrb	r1, [sl, #2]
   183e8:	ldr	r0, [pc, #48]	; 18420 <__assert_fail@plt+0x72a4>
   183ec:	mov	r2, #1024	; 0x400
   183f0:	cmp	r1, #66	; 0x42
   183f4:	movne	r1, #1
   183f8:	moveq	r1, #3
   183fc:	b	18014 <__assert_fail@plt+0x6e98>
   18400:	mvn	r9, #0
   18404:	mov	r3, #1
   18408:	b	1814c <__assert_fail@plt+0x6fd0>
   1840c:	ldr	r3, [pc, #20]	; 18428 <__assert_fail@plt+0x72ac>
   18410:	mov	r2, #85	; 0x55
   18414:	ldr	r1, [pc, #16]	; 1842c <__assert_fail@plt+0x72b0>
   18418:	ldr	r0, [pc, #16]	; 18430 <__assert_fail@plt+0x72b4>
   1841c:	bl	1117c <__assert_fail@plt>
   18420:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   18424:	subeq	r8, r1, r7, lsr r9
   18428:	andeq	r9, r1, r8, lsl #29
   1842c:	muleq	r1, r4, lr
   18430:	andeq	r9, r1, r4, lsr #29
   18434:	cmp	r1, #0
   18438:	cmpne	r0, #0
   1843c:	moveq	r1, #1
   18440:	moveq	r0, r1
   18444:	umull	r2, r3, r0, r1
   18448:	adds	r3, r3, #0
   1844c:	movne	r3, #1
   18450:	cmp	r2, #0
   18454:	blt	18464 <__assert_fail@plt+0x72e8>
   18458:	cmp	r3, #0
   1845c:	bne	18464 <__assert_fail@plt+0x72e8>
   18460:	b	10ea0 <calloc@plt>
   18464:	push	{r4, lr}
   18468:	bl	11080 <__errno_location@plt>
   1846c:	mov	r3, #12
   18470:	str	r3, [r0]
   18474:	mov	r0, #0
   18478:	pop	{r4, pc}
   1847c:	cmp	r0, #0
   18480:	moveq	r0, #1
   18484:	cmp	r0, #0
   18488:	blt	18490 <__assert_fail@plt+0x7314>
   1848c:	b	11008 <malloc@plt>
   18490:	push	{r4, lr}
   18494:	bl	11080 <__errno_location@plt>
   18498:	mov	r3, #12
   1849c:	str	r3, [r0]
   184a0:	mov	r0, #0
   184a4:	pop	{r4, pc}
   184a8:	cmp	r0, #0
   184ac:	beq	184d0 <__assert_fail@plt+0x7354>
   184b0:	cmp	r1, #0
   184b4:	push	{lr}		; (str lr, [sp, #-4]!)
   184b8:	sub	sp, sp, #12
   184bc:	beq	184d8 <__assert_fail@plt+0x735c>
   184c0:	blt	184f0 <__assert_fail@plt+0x7374>
   184c4:	add	sp, sp, #12
   184c8:	pop	{lr}		; (ldr lr, [sp], #4)
   184cc:	b	10f6c <realloc@plt>
   184d0:	mov	r0, r1
   184d4:	b	1847c <__assert_fail@plt+0x7300>
   184d8:	str	r1, [sp, #4]
   184dc:	bl	125bc <__assert_fail@plt+0x1440>
   184e0:	ldr	r3, [sp, #4]
   184e4:	mov	r0, r3
   184e8:	add	sp, sp, #12
   184ec:	pop	{pc}		; (ldr pc, [sp], #4)
   184f0:	bl	11080 <__errno_location@plt>
   184f4:	mov	r2, #12
   184f8:	mov	r3, #0
   184fc:	str	r2, [r0]
   18500:	b	184e4 <__assert_fail@plt+0x7368>
   18504:	push	{r4, r5, r6, lr}
   18508:	mov	r4, r0
   1850c:	bl	10fd8 <__fpending@plt>
   18510:	ldr	r5, [r4]
   18514:	and	r5, r5, #32
   18518:	mov	r6, r0
   1851c:	mov	r0, r4
   18520:	bl	18580 <__assert_fail@plt+0x7404>
   18524:	cmp	r5, #0
   18528:	mov	r4, r0
   1852c:	bne	1854c <__assert_fail@plt+0x73d0>
   18530:	cmp	r0, #0
   18534:	beq	18544 <__assert_fail@plt+0x73c8>
   18538:	cmp	r6, #0
   1853c:	beq	18568 <__assert_fail@plt+0x73ec>
   18540:	mvn	r4, #0
   18544:	mov	r0, r4
   18548:	pop	{r4, r5, r6, pc}
   1854c:	cmp	r0, #0
   18550:	bne	18540 <__assert_fail@plt+0x73c4>
   18554:	bl	11080 <__errno_location@plt>
   18558:	str	r4, [r0]
   1855c:	mvn	r4, #0
   18560:	mov	r0, r4
   18564:	pop	{r4, r5, r6, pc}
   18568:	bl	11080 <__errno_location@plt>
   1856c:	ldr	r4, [r0]
   18570:	subs	r4, r4, #9
   18574:	mvnne	r4, #0
   18578:	mov	r0, r4
   1857c:	pop	{r4, r5, r6, pc}
   18580:	push	{r4, r5, lr}
   18584:	sub	sp, sp, #12
   18588:	mov	r4, r0
   1858c:	bl	110c8 <fileno@plt>
   18590:	cmp	r0, #0
   18594:	mov	r0, r4
   18598:	blt	18614 <__assert_fail@plt+0x7498>
   1859c:	bl	11020 <__freading@plt>
   185a0:	cmp	r0, #0
   185a4:	bne	185e0 <__assert_fail@plt+0x7464>
   185a8:	mov	r0, r4
   185ac:	bl	18620 <__assert_fail@plt+0x74a4>
   185b0:	cmp	r0, #0
   185b4:	beq	18610 <__assert_fail@plt+0x7494>
   185b8:	bl	11080 <__errno_location@plt>
   185bc:	mov	r5, r0
   185c0:	mov	r0, r4
   185c4:	ldr	r4, [r5]
   185c8:	bl	110e0 <fclose@plt>
   185cc:	cmp	r4, #0
   185d0:	mvnne	r0, #0
   185d4:	strne	r4, [r5]
   185d8:	add	sp, sp, #12
   185dc:	pop	{r4, r5, pc}
   185e0:	mov	r0, r4
   185e4:	bl	110c8 <fileno@plt>
   185e8:	mov	r3, #1
   185ec:	str	r3, [sp]
   185f0:	mov	r2, #0
   185f4:	mov	r3, #0
   185f8:	bl	10fb4 <lseek64@plt>
   185fc:	mvn	r3, #0
   18600:	mvn	r2, #0
   18604:	cmp	r1, r3
   18608:	cmpeq	r0, r2
   1860c:	bne	185a8 <__assert_fail@plt+0x742c>
   18610:	mov	r0, r4
   18614:	add	sp, sp, #12
   18618:	pop	{r4, r5, lr}
   1861c:	b	110e0 <fclose@plt>
   18620:	push	{r4, lr}
   18624:	subs	r4, r0, #0
   18628:	sub	sp, sp, #8
   1862c:	beq	18648 <__assert_fail@plt+0x74cc>
   18630:	bl	11020 <__freading@plt>
   18634:	cmp	r0, #0
   18638:	beq	18648 <__assert_fail@plt+0x74cc>
   1863c:	ldr	r3, [r4]
   18640:	tst	r3, #256	; 0x100
   18644:	bne	18658 <__assert_fail@plt+0x74dc>
   18648:	mov	r0, r4
   1864c:	add	sp, sp, #8
   18650:	pop	{r4, lr}
   18654:	b	10f00 <fflush@plt>
   18658:	mov	r3, #1
   1865c:	str	r3, [sp]
   18660:	mov	r2, #0
   18664:	mov	r3, #0
   18668:	mov	r0, r4
   1866c:	bl	18680 <__assert_fail@plt+0x7504>
   18670:	mov	r0, r4
   18674:	add	sp, sp, #8
   18678:	pop	{r4, lr}
   1867c:	b	10f00 <fflush@plt>
   18680:	push	{r4, r5, r6, r7, r8, lr}
   18684:	sub	sp, sp, #8
   18688:	ldmib	r0, {ip, lr}
   1868c:	mov	r4, r0
   18690:	ldr	r5, [sp, #32]
   18694:	cmp	lr, ip
   18698:	beq	186b0 <__assert_fail@plt+0x7534>
   1869c:	str	r5, [sp, #32]
   186a0:	mov	r0, r4
   186a4:	add	sp, sp, #8
   186a8:	pop	{r4, r5, r6, r7, r8, lr}
   186ac:	b	110ec <fseeko64@plt>
   186b0:	ldr	lr, [r0, #20]
   186b4:	ldr	ip, [r0, #16]
   186b8:	cmp	lr, ip
   186bc:	bne	1869c <__assert_fail@plt+0x7520>
   186c0:	ldr	r8, [r0, #36]	; 0x24
   186c4:	cmp	r8, #0
   186c8:	bne	1869c <__assert_fail@plt+0x7520>
   186cc:	mov	r6, r2
   186d0:	mov	r7, r3
   186d4:	bl	110c8 <fileno@plt>
   186d8:	mov	r2, r6
   186dc:	mov	r3, r7
   186e0:	str	r5, [sp]
   186e4:	bl	10fb4 <lseek64@plt>
   186e8:	mvn	r3, #0
   186ec:	mvn	r2, #0
   186f0:	cmp	r1, r3
   186f4:	cmpeq	r0, r2
   186f8:	beq	18718 <__assert_fail@plt+0x759c>
   186fc:	ldr	r3, [r4]
   18700:	strd	r0, [r4, #80]	; 0x50
   18704:	mov	r0, r8
   18708:	bic	r3, r3, #16
   1870c:	str	r3, [r4]
   18710:	add	sp, sp, #8
   18714:	pop	{r4, r5, r6, r7, r8, pc}
   18718:	mvn	r0, #0
   1871c:	b	18710 <__assert_fail@plt+0x7594>
   18720:	push	{r4, lr}
   18724:	mov	r0, #14
   18728:	bl	11128 <nl_langinfo@plt>
   1872c:	cmp	r0, #0
   18730:	beq	18748 <__assert_fail@plt+0x75cc>
   18734:	ldrb	r2, [r0]
   18738:	ldr	r3, [pc, #16]	; 18750 <__assert_fail@plt+0x75d4>
   1873c:	cmp	r2, #0
   18740:	moveq	r0, r3
   18744:	pop	{r4, pc}
   18748:	ldr	r0, [pc]	; 18750 <__assert_fail@plt+0x75d4>
   1874c:	pop	{r4, pc}
   18750:	andeq	r9, r1, ip, asr #29
   18754:	push	{r4, r5, r6, r7, lr}
   18758:	subs	r6, r0, #0
   1875c:	sub	sp, sp, #12
   18760:	addeq	r6, sp, #4
   18764:	mov	r0, r6
   18768:	mov	r5, r2
   1876c:	mov	r7, r1
   18770:	bl	10fe4 <mbrtowc@plt>
   18774:	cmp	r5, #0
   18778:	cmnne	r0, #3
   1877c:	mov	r4, r0
   18780:	bls	1879c <__assert_fail@plt+0x7620>
   18784:	mov	r0, #0
   18788:	bl	18a0c <__assert_fail@plt+0x7890>
   1878c:	cmp	r0, #0
   18790:	moveq	r4, #1
   18794:	ldrbeq	r3, [r7]
   18798:	streq	r3, [r6]
   1879c:	mov	r0, r4
   187a0:	add	sp, sp, #12
   187a4:	pop	{r4, r5, r6, r7, pc}
   187a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   187ac:	subs	r7, r0, #0
   187b0:	sub	sp, sp, #12
   187b4:	mov	r6, r1
   187b8:	mov	r8, r2
   187bc:	beq	18884 <__assert_fail@plt+0x7708>
   187c0:	mov	r3, #10
   187c4:	mov	r1, #40	; 0x28
   187c8:	mov	r0, #0
   187cc:	str	r3, [sp, #4]
   187d0:	bl	184a8 <__assert_fail@plt+0x732c>
   187d4:	subs	r4, r0, #0
   187d8:	bne	18818 <__assert_fail@plt+0x769c>
   187dc:	b	18860 <__assert_fail@plt+0x76e4>
   187e0:	lsrs	r3, r1, #30
   187e4:	movne	r3, #1
   187e8:	moveq	r3, #0
   187ec:	lsls	r1, r1, #2
   187f0:	mov	r0, r4
   187f4:	bmi	1884c <__assert_fail@plt+0x76d0>
   187f8:	cmp	r3, #0
   187fc:	bne	1884c <__assert_fail@plt+0x76d0>
   18800:	bl	184a8 <__assert_fail@plt+0x732c>
   18804:	cmp	r0, #0
   18808:	beq	18858 <__assert_fail@plt+0x76dc>
   1880c:	cmp	r5, #0
   18810:	mov	r4, r0
   18814:	bge	18870 <__assert_fail@plt+0x76f4>
   18818:	mov	r1, r6
   1881c:	add	r3, sp, #4
   18820:	mov	r2, r4
   18824:	mov	r0, r7
   18828:	ldr	r9, [sp, #4]
   1882c:	bl	110a4 <getgrouplist@plt>
   18830:	ldr	r1, [sp, #4]
   18834:	subs	r5, r0, #0
   18838:	bge	187e0 <__assert_fail@plt+0x7664>
   1883c:	cmp	r9, r1
   18840:	lsleq	r1, r1, #1
   18844:	streq	r1, [sp, #4]
   18848:	b	187e0 <__assert_fail@plt+0x7664>
   1884c:	bl	11080 <__errno_location@plt>
   18850:	mov	r3, #12
   18854:	str	r3, [r0]
   18858:	mov	r0, r4
   1885c:	bl	125bc <__assert_fail@plt+0x1440>
   18860:	mvn	r3, #0
   18864:	mov	r0, r3
   18868:	add	sp, sp, #12
   1886c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18870:	ldr	r3, [sp, #4]
   18874:	str	r0, [r8]
   18878:	mov	r0, r3
   1887c:	add	sp, sp, #12
   18880:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18884:	mov	r1, r7
   18888:	bl	11134 <getgroups@plt>
   1888c:	cmp	r0, #0
   18890:	str	r0, [sp, #4]
   18894:	blt	18960 <__assert_fail@plt+0x77e4>
   18898:	adds	r5, r6, #1
   1889c:	movne	r5, #1
   188a0:	cmp	r0, #0
   188a4:	movne	r3, r5
   188a8:	orreq	r3, r5, #1
   188ac:	cmp	r3, #0
   188b0:	addne	r0, r0, #1
   188b4:	strne	r0, [sp, #4]
   188b8:	lsrs	r3, r0, #30
   188bc:	movne	r3, #1
   188c0:	moveq	r3, #0
   188c4:	lsls	r1, r0, #2
   188c8:	bmi	189ac <__assert_fail@plt+0x7830>
   188cc:	cmp	r3, #0
   188d0:	bne	189ac <__assert_fail@plt+0x7830>
   188d4:	mov	r0, r3
   188d8:	bl	184a8 <__assert_fail@plt+0x732c>
   188dc:	subs	r4, r0, #0
   188e0:	beq	18860 <__assert_fail@plt+0x76e4>
   188e4:	ldr	r0, [sp, #4]
   188e8:	cmn	r6, #1
   188ec:	sub	r0, r0, r5
   188f0:	beq	18998 <__assert_fail@plt+0x781c>
   188f4:	add	r1, r4, #4
   188f8:	bl	11134 <getgroups@plt>
   188fc:	subs	r3, r0, #0
   18900:	addge	r3, r3, #1
   18904:	strge	r6, [r4]
   18908:	blt	18858 <__assert_fail@plt+0x76dc>
   1890c:	cmp	r3, #1
   18910:	str	r4, [r8]
   18914:	ble	18864 <__assert_fail@plt+0x76e8>
   18918:	add	ip, r4, r3, lsl #2
   1891c:	add	r2, r4, #4
   18920:	cmp	ip, r2
   18924:	ldr	lr, [r4]
   18928:	bhi	1894c <__assert_fail@plt+0x77d0>
   1892c:	b	18864 <__assert_fail@plt+0x76e8>
   18930:	ldr	r0, [r4]
   18934:	cmp	r1, r0
   18938:	strne	r1, [r4, #4]
   1893c:	addne	r4, r4, #4
   18940:	beq	18958 <__assert_fail@plt+0x77dc>
   18944:	cmp	ip, r2
   18948:	bls	18864 <__assert_fail@plt+0x76e8>
   1894c:	ldr	r1, [r2], #4
   18950:	cmp	lr, r1
   18954:	bne	18930 <__assert_fail@plt+0x77b4>
   18958:	sub	r3, r3, #1
   1895c:	b	18944 <__assert_fail@plt+0x77c8>
   18960:	bl	11080 <__errno_location@plt>
   18964:	ldr	r3, [r0]
   18968:	cmp	r3, #38	; 0x26
   1896c:	bne	18860 <__assert_fail@plt+0x76e4>
   18970:	mov	r0, r7
   18974:	mov	r1, #4
   18978:	bl	184a8 <__assert_fail@plt+0x732c>
   1897c:	cmp	r0, #0
   18980:	beq	18860 <__assert_fail@plt+0x76e4>
   18984:	adds	r3, r6, #1
   18988:	str	r0, [r8]
   1898c:	movne	r3, #1
   18990:	str	r6, [r0]
   18994:	b	18864 <__assert_fail@plt+0x76e8>
   18998:	mov	r1, r4
   1899c:	bl	11134 <getgroups@plt>
   189a0:	subs	r3, r0, #0
   189a4:	bge	1890c <__assert_fail@plt+0x7790>
   189a8:	b	18858 <__assert_fail@plt+0x76dc>
   189ac:	bl	11080 <__errno_location@plt>
   189b0:	mov	r2, #12
   189b4:	mvn	r3, #0
   189b8:	str	r2, [r0]
   189bc:	b	18864 <__assert_fail@plt+0x76e8>
   189c0:	push	{r4, r5, r6, lr}
   189c4:	subs	r4, r2, #0
   189c8:	mov	r6, r0
   189cc:	mov	r5, r1
   189d0:	beq	189fc <__assert_fail@plt+0x7880>
   189d4:	mov	r1, r4
   189d8:	mvn	r0, #0
   189dc:	bl	18b00 <__assert_fail@plt+0x7984>
   189e0:	cmp	r0, r5
   189e4:	bcs	189fc <__assert_fail@plt+0x7880>
   189e8:	bl	11080 <__errno_location@plt>
   189ec:	mov	r3, #12
   189f0:	str	r3, [r0]
   189f4:	mov	r0, #0
   189f8:	pop	{r4, r5, r6, pc}
   189fc:	mul	r1, r5, r4
   18a00:	mov	r0, r6
   18a04:	pop	{r4, r5, r6, lr}
   18a08:	b	184a8 <__assert_fail@plt+0x732c>
   18a0c:	push	{lr}		; (str lr, [sp, #-4]!)
   18a10:	sub	sp, sp, #268	; 0x10c
   18a14:	add	r1, sp, #4
   18a18:	ldr	r2, [pc, #60]	; 18a5c <__assert_fail@plt+0x78e0>
   18a1c:	bl	18a68 <__assert_fail@plt+0x78ec>
   18a20:	cmp	r0, #0
   18a24:	movne	r0, #0
   18a28:	bne	18a54 <__assert_fail@plt+0x78d8>
   18a2c:	ldr	r1, [pc, #44]	; 18a60 <__assert_fail@plt+0x78e4>
   18a30:	add	r0, sp, #4
   18a34:	bl	10ee8 <strcmp@plt>
   18a38:	cmp	r0, #0
   18a3c:	beq	18a54 <__assert_fail@plt+0x78d8>
   18a40:	add	r0, sp, #4
   18a44:	ldr	r1, [pc, #24]	; 18a64 <__assert_fail@plt+0x78e8>
   18a48:	bl	10ee8 <strcmp@plt>
   18a4c:	adds	r0, r0, #0
   18a50:	movne	r0, #1
   18a54:	add	sp, sp, #268	; 0x10c
   18a58:	pop	{pc}		; (ldr pc, [sp], #4)
   18a5c:	andeq	r0, r0, r1, lsl #2
   18a60:	ldrdeq	r9, [r1], -r4
   18a64:	ldrdeq	r9, [r1], -r8
   18a68:	push	{r4, r5, r6, lr}
   18a6c:	mov	r5, r1
   18a70:	mov	r1, #0
   18a74:	mov	r4, r2
   18a78:	bl	11104 <setlocale@plt>
   18a7c:	subs	r6, r0, #0
   18a80:	beq	18adc <__assert_fail@plt+0x7960>
   18a84:	bl	11068 <strlen@plt>
   18a88:	cmp	r4, r0
   18a8c:	bhi	18ac4 <__assert_fail@plt+0x7948>
   18a90:	cmp	r4, #0
   18a94:	bne	18aa0 <__assert_fail@plt+0x7924>
   18a98:	mov	r0, #34	; 0x22
   18a9c:	pop	{r4, r5, r6, pc}
   18aa0:	sub	r4, r4, #1
   18aa4:	mov	r1, r6
   18aa8:	mov	r2, r4
   18aac:	mov	r0, r5
   18ab0:	bl	10f30 <memcpy@plt>
   18ab4:	mov	r3, #0
   18ab8:	strb	r3, [r5, r4]
   18abc:	mov	r0, #34	; 0x22
   18ac0:	pop	{r4, r5, r6, pc}
   18ac4:	add	r2, r0, #1
   18ac8:	mov	r1, r6
   18acc:	mov	r0, r5
   18ad0:	bl	10f30 <memcpy@plt>
   18ad4:	mov	r0, #0
   18ad8:	pop	{r4, r5, r6, pc}
   18adc:	cmp	r4, #0
   18ae0:	beq	18af0 <__assert_fail@plt+0x7974>
   18ae4:	strb	r6, [r5]
   18ae8:	mov	r0, #22
   18aec:	pop	{r4, r5, r6, pc}
   18af0:	mov	r0, #22
   18af4:	pop	{r4, r5, r6, pc}
   18af8:	mov	r1, #0
   18afc:	b	11104 <setlocale@plt>
   18b00:	subs	r2, r1, #1
   18b04:	bxeq	lr
   18b08:	bcc	18ce0 <__assert_fail@plt+0x7b64>
   18b0c:	cmp	r0, r1
   18b10:	bls	18cc4 <__assert_fail@plt+0x7b48>
   18b14:	tst	r1, r2
   18b18:	beq	18cd0 <__assert_fail@plt+0x7b54>
   18b1c:	clz	r3, r0
   18b20:	clz	r2, r1
   18b24:	sub	r3, r2, r3
   18b28:	rsbs	r3, r3, #31
   18b2c:	addne	r3, r3, r3, lsl #1
   18b30:	mov	r2, #0
   18b34:	addne	pc, pc, r3, lsl #2
   18b38:	nop			; (mov r0, r0)
   18b3c:	cmp	r0, r1, lsl #31
   18b40:	adc	r2, r2, r2
   18b44:	subcs	r0, r0, r1, lsl #31
   18b48:	cmp	r0, r1, lsl #30
   18b4c:	adc	r2, r2, r2
   18b50:	subcs	r0, r0, r1, lsl #30
   18b54:	cmp	r0, r1, lsl #29
   18b58:	adc	r2, r2, r2
   18b5c:	subcs	r0, r0, r1, lsl #29
   18b60:	cmp	r0, r1, lsl #28
   18b64:	adc	r2, r2, r2
   18b68:	subcs	r0, r0, r1, lsl #28
   18b6c:	cmp	r0, r1, lsl #27
   18b70:	adc	r2, r2, r2
   18b74:	subcs	r0, r0, r1, lsl #27
   18b78:	cmp	r0, r1, lsl #26
   18b7c:	adc	r2, r2, r2
   18b80:	subcs	r0, r0, r1, lsl #26
   18b84:	cmp	r0, r1, lsl #25
   18b88:	adc	r2, r2, r2
   18b8c:	subcs	r0, r0, r1, lsl #25
   18b90:	cmp	r0, r1, lsl #24
   18b94:	adc	r2, r2, r2
   18b98:	subcs	r0, r0, r1, lsl #24
   18b9c:	cmp	r0, r1, lsl #23
   18ba0:	adc	r2, r2, r2
   18ba4:	subcs	r0, r0, r1, lsl #23
   18ba8:	cmp	r0, r1, lsl #22
   18bac:	adc	r2, r2, r2
   18bb0:	subcs	r0, r0, r1, lsl #22
   18bb4:	cmp	r0, r1, lsl #21
   18bb8:	adc	r2, r2, r2
   18bbc:	subcs	r0, r0, r1, lsl #21
   18bc0:	cmp	r0, r1, lsl #20
   18bc4:	adc	r2, r2, r2
   18bc8:	subcs	r0, r0, r1, lsl #20
   18bcc:	cmp	r0, r1, lsl #19
   18bd0:	adc	r2, r2, r2
   18bd4:	subcs	r0, r0, r1, lsl #19
   18bd8:	cmp	r0, r1, lsl #18
   18bdc:	adc	r2, r2, r2
   18be0:	subcs	r0, r0, r1, lsl #18
   18be4:	cmp	r0, r1, lsl #17
   18be8:	adc	r2, r2, r2
   18bec:	subcs	r0, r0, r1, lsl #17
   18bf0:	cmp	r0, r1, lsl #16
   18bf4:	adc	r2, r2, r2
   18bf8:	subcs	r0, r0, r1, lsl #16
   18bfc:	cmp	r0, r1, lsl #15
   18c00:	adc	r2, r2, r2
   18c04:	subcs	r0, r0, r1, lsl #15
   18c08:	cmp	r0, r1, lsl #14
   18c0c:	adc	r2, r2, r2
   18c10:	subcs	r0, r0, r1, lsl #14
   18c14:	cmp	r0, r1, lsl #13
   18c18:	adc	r2, r2, r2
   18c1c:	subcs	r0, r0, r1, lsl #13
   18c20:	cmp	r0, r1, lsl #12
   18c24:	adc	r2, r2, r2
   18c28:	subcs	r0, r0, r1, lsl #12
   18c2c:	cmp	r0, r1, lsl #11
   18c30:	adc	r2, r2, r2
   18c34:	subcs	r0, r0, r1, lsl #11
   18c38:	cmp	r0, r1, lsl #10
   18c3c:	adc	r2, r2, r2
   18c40:	subcs	r0, r0, r1, lsl #10
   18c44:	cmp	r0, r1, lsl #9
   18c48:	adc	r2, r2, r2
   18c4c:	subcs	r0, r0, r1, lsl #9
   18c50:	cmp	r0, r1, lsl #8
   18c54:	adc	r2, r2, r2
   18c58:	subcs	r0, r0, r1, lsl #8
   18c5c:	cmp	r0, r1, lsl #7
   18c60:	adc	r2, r2, r2
   18c64:	subcs	r0, r0, r1, lsl #7
   18c68:	cmp	r0, r1, lsl #6
   18c6c:	adc	r2, r2, r2
   18c70:	subcs	r0, r0, r1, lsl #6
   18c74:	cmp	r0, r1, lsl #5
   18c78:	adc	r2, r2, r2
   18c7c:	subcs	r0, r0, r1, lsl #5
   18c80:	cmp	r0, r1, lsl #4
   18c84:	adc	r2, r2, r2
   18c88:	subcs	r0, r0, r1, lsl #4
   18c8c:	cmp	r0, r1, lsl #3
   18c90:	adc	r2, r2, r2
   18c94:	subcs	r0, r0, r1, lsl #3
   18c98:	cmp	r0, r1, lsl #2
   18c9c:	adc	r2, r2, r2
   18ca0:	subcs	r0, r0, r1, lsl #2
   18ca4:	cmp	r0, r1, lsl #1
   18ca8:	adc	r2, r2, r2
   18cac:	subcs	r0, r0, r1, lsl #1
   18cb0:	cmp	r0, r1
   18cb4:	adc	r2, r2, r2
   18cb8:	subcs	r0, r0, r1
   18cbc:	mov	r0, r2
   18cc0:	bx	lr
   18cc4:	moveq	r0, #1
   18cc8:	movne	r0, #0
   18ccc:	bx	lr
   18cd0:	clz	r2, r1
   18cd4:	rsb	r2, r2, #31
   18cd8:	lsr	r0, r0, r2
   18cdc:	bx	lr
   18ce0:	cmp	r0, #0
   18ce4:	mvnne	r0, #0
   18ce8:	b	18f88 <__assert_fail@plt+0x7e0c>
   18cec:	cmp	r1, #0
   18cf0:	beq	18ce0 <__assert_fail@plt+0x7b64>
   18cf4:	push	{r0, r1, lr}
   18cf8:	bl	18b00 <__assert_fail@plt+0x7984>
   18cfc:	pop	{r1, r2, lr}
   18d00:	mul	r3, r2, r0
   18d04:	sub	r1, r1, r3
   18d08:	bx	lr
   18d0c:	cmp	r1, #0
   18d10:	beq	18f1c <__assert_fail@plt+0x7da0>
   18d14:	eor	ip, r0, r1
   18d18:	rsbmi	r1, r1, #0
   18d1c:	subs	r2, r1, #1
   18d20:	beq	18ee8 <__assert_fail@plt+0x7d6c>
   18d24:	movs	r3, r0
   18d28:	rsbmi	r3, r0, #0
   18d2c:	cmp	r3, r1
   18d30:	bls	18ef4 <__assert_fail@plt+0x7d78>
   18d34:	tst	r1, r2
   18d38:	beq	18f04 <__assert_fail@plt+0x7d88>
   18d3c:	clz	r2, r3
   18d40:	clz	r0, r1
   18d44:	sub	r2, r0, r2
   18d48:	rsbs	r2, r2, #31
   18d4c:	addne	r2, r2, r2, lsl #1
   18d50:	mov	r0, #0
   18d54:	addne	pc, pc, r2, lsl #2
   18d58:	nop			; (mov r0, r0)
   18d5c:	cmp	r3, r1, lsl #31
   18d60:	adc	r0, r0, r0
   18d64:	subcs	r3, r3, r1, lsl #31
   18d68:	cmp	r3, r1, lsl #30
   18d6c:	adc	r0, r0, r0
   18d70:	subcs	r3, r3, r1, lsl #30
   18d74:	cmp	r3, r1, lsl #29
   18d78:	adc	r0, r0, r0
   18d7c:	subcs	r3, r3, r1, lsl #29
   18d80:	cmp	r3, r1, lsl #28
   18d84:	adc	r0, r0, r0
   18d88:	subcs	r3, r3, r1, lsl #28
   18d8c:	cmp	r3, r1, lsl #27
   18d90:	adc	r0, r0, r0
   18d94:	subcs	r3, r3, r1, lsl #27
   18d98:	cmp	r3, r1, lsl #26
   18d9c:	adc	r0, r0, r0
   18da0:	subcs	r3, r3, r1, lsl #26
   18da4:	cmp	r3, r1, lsl #25
   18da8:	adc	r0, r0, r0
   18dac:	subcs	r3, r3, r1, lsl #25
   18db0:	cmp	r3, r1, lsl #24
   18db4:	adc	r0, r0, r0
   18db8:	subcs	r3, r3, r1, lsl #24
   18dbc:	cmp	r3, r1, lsl #23
   18dc0:	adc	r0, r0, r0
   18dc4:	subcs	r3, r3, r1, lsl #23
   18dc8:	cmp	r3, r1, lsl #22
   18dcc:	adc	r0, r0, r0
   18dd0:	subcs	r3, r3, r1, lsl #22
   18dd4:	cmp	r3, r1, lsl #21
   18dd8:	adc	r0, r0, r0
   18ddc:	subcs	r3, r3, r1, lsl #21
   18de0:	cmp	r3, r1, lsl #20
   18de4:	adc	r0, r0, r0
   18de8:	subcs	r3, r3, r1, lsl #20
   18dec:	cmp	r3, r1, lsl #19
   18df0:	adc	r0, r0, r0
   18df4:	subcs	r3, r3, r1, lsl #19
   18df8:	cmp	r3, r1, lsl #18
   18dfc:	adc	r0, r0, r0
   18e00:	subcs	r3, r3, r1, lsl #18
   18e04:	cmp	r3, r1, lsl #17
   18e08:	adc	r0, r0, r0
   18e0c:	subcs	r3, r3, r1, lsl #17
   18e10:	cmp	r3, r1, lsl #16
   18e14:	adc	r0, r0, r0
   18e18:	subcs	r3, r3, r1, lsl #16
   18e1c:	cmp	r3, r1, lsl #15
   18e20:	adc	r0, r0, r0
   18e24:	subcs	r3, r3, r1, lsl #15
   18e28:	cmp	r3, r1, lsl #14
   18e2c:	adc	r0, r0, r0
   18e30:	subcs	r3, r3, r1, lsl #14
   18e34:	cmp	r3, r1, lsl #13
   18e38:	adc	r0, r0, r0
   18e3c:	subcs	r3, r3, r1, lsl #13
   18e40:	cmp	r3, r1, lsl #12
   18e44:	adc	r0, r0, r0
   18e48:	subcs	r3, r3, r1, lsl #12
   18e4c:	cmp	r3, r1, lsl #11
   18e50:	adc	r0, r0, r0
   18e54:	subcs	r3, r3, r1, lsl #11
   18e58:	cmp	r3, r1, lsl #10
   18e5c:	adc	r0, r0, r0
   18e60:	subcs	r3, r3, r1, lsl #10
   18e64:	cmp	r3, r1, lsl #9
   18e68:	adc	r0, r0, r0
   18e6c:	subcs	r3, r3, r1, lsl #9
   18e70:	cmp	r3, r1, lsl #8
   18e74:	adc	r0, r0, r0
   18e78:	subcs	r3, r3, r1, lsl #8
   18e7c:	cmp	r3, r1, lsl #7
   18e80:	adc	r0, r0, r0
   18e84:	subcs	r3, r3, r1, lsl #7
   18e88:	cmp	r3, r1, lsl #6
   18e8c:	adc	r0, r0, r0
   18e90:	subcs	r3, r3, r1, lsl #6
   18e94:	cmp	r3, r1, lsl #5
   18e98:	adc	r0, r0, r0
   18e9c:	subcs	r3, r3, r1, lsl #5
   18ea0:	cmp	r3, r1, lsl #4
   18ea4:	adc	r0, r0, r0
   18ea8:	subcs	r3, r3, r1, lsl #4
   18eac:	cmp	r3, r1, lsl #3
   18eb0:	adc	r0, r0, r0
   18eb4:	subcs	r3, r3, r1, lsl #3
   18eb8:	cmp	r3, r1, lsl #2
   18ebc:	adc	r0, r0, r0
   18ec0:	subcs	r3, r3, r1, lsl #2
   18ec4:	cmp	r3, r1, lsl #1
   18ec8:	adc	r0, r0, r0
   18ecc:	subcs	r3, r3, r1, lsl #1
   18ed0:	cmp	r3, r1
   18ed4:	adc	r0, r0, r0
   18ed8:	subcs	r3, r3, r1
   18edc:	cmp	ip, #0
   18ee0:	rsbmi	r0, r0, #0
   18ee4:	bx	lr
   18ee8:	teq	ip, r0
   18eec:	rsbmi	r0, r0, #0
   18ef0:	bx	lr
   18ef4:	movcc	r0, #0
   18ef8:	asreq	r0, ip, #31
   18efc:	orreq	r0, r0, #1
   18f00:	bx	lr
   18f04:	clz	r2, r1
   18f08:	rsb	r2, r2, #31
   18f0c:	cmp	ip, #0
   18f10:	lsr	r0, r3, r2
   18f14:	rsbmi	r0, r0, #0
   18f18:	bx	lr
   18f1c:	cmp	r0, #0
   18f20:	mvngt	r0, #-2147483648	; 0x80000000
   18f24:	movlt	r0, #-2147483648	; 0x80000000
   18f28:	b	18f88 <__assert_fail@plt+0x7e0c>
   18f2c:	cmp	r1, #0
   18f30:	beq	18f1c <__assert_fail@plt+0x7da0>
   18f34:	push	{r0, r1, lr}
   18f38:	bl	18d14 <__assert_fail@plt+0x7b98>
   18f3c:	pop	{r1, r2, lr}
   18f40:	mul	r3, r2, r0
   18f44:	sub	r1, r1, r3
   18f48:	bx	lr
   18f4c:	cmp	r3, #0
   18f50:	cmpeq	r2, #0
   18f54:	bne	18f6c <__assert_fail@plt+0x7df0>
   18f58:	cmp	r1, #0
   18f5c:	cmpeq	r0, #0
   18f60:	mvnne	r1, #0
   18f64:	mvnne	r0, #0
   18f68:	b	18f88 <__assert_fail@plt+0x7e0c>
   18f6c:	sub	sp, sp, #8
   18f70:	push	{sp, lr}
   18f74:	bl	18f98 <__assert_fail@plt+0x7e1c>
   18f78:	ldr	lr, [sp, #4]
   18f7c:	add	sp, sp, #8
   18f80:	pop	{r2, r3}
   18f84:	bx	lr
   18f88:	push	{r1, lr}
   18f8c:	mov	r0, #8
   18f90:	bl	10ec4 <raise@plt>
   18f94:	pop	{r1, pc}
   18f98:	cmp	r1, r3
   18f9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18fa0:	cmpeq	r0, r2
   18fa4:	mov	r4, r0
   18fa8:	mov	r5, r1
   18fac:	ldr	r9, [sp, #28]
   18fb0:	movcc	r0, #0
   18fb4:	movcc	r1, #0
   18fb8:	bcc	190b0 <__assert_fail@plt+0x7f34>
   18fbc:	cmp	r3, #0
   18fc0:	clzeq	ip, r2
   18fc4:	clzne	ip, r3
   18fc8:	addeq	ip, ip, #32
   18fcc:	cmp	r5, #0
   18fd0:	clzeq	r1, r4
   18fd4:	addeq	r1, r1, #32
   18fd8:	clzne	r1, r5
   18fdc:	sub	ip, ip, r1
   18fe0:	sub	lr, ip, #32
   18fe4:	lsl	r7, r3, ip
   18fe8:	rsb	r8, ip, #32
   18fec:	orr	r7, r7, r2, lsl lr
   18ff0:	orr	r7, r7, r2, lsr r8
   18ff4:	lsl	r6, r2, ip
   18ff8:	cmp	r5, r7
   18ffc:	cmpeq	r4, r6
   19000:	movcc	r0, #0
   19004:	movcc	r1, #0
   19008:	bcc	19024 <__assert_fail@plt+0x7ea8>
   1900c:	mov	r3, #1
   19010:	subs	r4, r4, r6
   19014:	lsl	r1, r3, lr
   19018:	lsl	r0, r3, ip
   1901c:	orr	r1, r1, r3, lsr r8
   19020:	sbc	r5, r5, r7
   19024:	cmp	ip, #0
   19028:	beq	190b0 <__assert_fail@plt+0x7f34>
   1902c:	lsrs	r3, r7, #1
   19030:	rrx	r2, r6
   19034:	mov	r6, ip
   19038:	b	1905c <__assert_fail@plt+0x7ee0>
   1903c:	subs	r4, r4, r2
   19040:	sbc	r5, r5, r3
   19044:	adds	r4, r4, r4
   19048:	adc	r5, r5, r5
   1904c:	adds	r4, r4, #1
   19050:	adc	r5, r5, #0
   19054:	subs	r6, r6, #1
   19058:	beq	19078 <__assert_fail@plt+0x7efc>
   1905c:	cmp	r5, r3
   19060:	cmpeq	r4, r2
   19064:	bcs	1903c <__assert_fail@plt+0x7ec0>
   19068:	adds	r4, r4, r4
   1906c:	adc	r5, r5, r5
   19070:	subs	r6, r6, #1
   19074:	bne	1905c <__assert_fail@plt+0x7ee0>
   19078:	lsr	r6, r4, ip
   1907c:	lsr	r7, r5, ip
   19080:	orr	r6, r6, r5, lsl r8
   19084:	adds	r2, r0, r4
   19088:	orr	r6, r6, r5, lsr lr
   1908c:	adc	r3, r1, r5
   19090:	lsl	r1, r7, ip
   19094:	orr	r1, r1, r6, lsl lr
   19098:	lsl	r0, r6, ip
   1909c:	orr	r1, r1, r6, lsr r8
   190a0:	subs	r0, r2, r0
   190a4:	mov	r4, r6
   190a8:	mov	r5, r7
   190ac:	sbc	r1, r3, r1
   190b0:	cmp	r9, #0
   190b4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   190b8:	strd	r4, [r9]
   190bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   190c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   190c4:	mov	r7, r0
   190c8:	ldr	r6, [pc, #72]	; 19118 <__assert_fail@plt+0x7f9c>
   190cc:	ldr	r5, [pc, #72]	; 1911c <__assert_fail@plt+0x7fa0>
   190d0:	add	r6, pc, r6
   190d4:	add	r5, pc, r5
   190d8:	sub	r6, r6, r5
   190dc:	mov	r8, r1
   190e0:	mov	r9, r2
   190e4:	bl	10e80 <calloc@plt-0x20>
   190e8:	asrs	r6, r6, #2
   190ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   190f0:	mov	r4, #0
   190f4:	add	r4, r4, #1
   190f8:	ldr	r3, [r5], #4
   190fc:	mov	r2, r9
   19100:	mov	r1, r8
   19104:	mov	r0, r7
   19108:	blx	r3
   1910c:	cmp	r6, r4
   19110:	bne	190f4 <__assert_fail@plt+0x7f78>
   19114:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19118:	andeq	r0, r1, r0, lsr lr
   1911c:	andeq	r0, r1, r8, lsr #28
   19120:	bx	lr
   19124:	ldr	r3, [pc, #12]	; 19138 <__assert_fail@plt+0x7fbc>
   19128:	mov	r1, #0
   1912c:	add	r3, pc, r3
   19130:	ldr	r2, [r3]
   19134:	b	1108c <__cxa_atexit@plt>
   19138:	ldrdeq	r0, [r1], -r8

Disassembly of section .fini:

0001913c <.fini>:
   1913c:	push	{r3, lr}
   19140:	pop	{r3, pc}
