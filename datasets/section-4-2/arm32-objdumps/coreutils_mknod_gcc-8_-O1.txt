
../repos/coreutils/src/mknod:     file format elf32-littlearm


Disassembly of section .init:

00011468 <.init>:
   11468:	push	{r3, lr}
   1146c:	bl	11914 <__assert_fail@plt+0x48>
   11470:	pop	{r3, pc}

Disassembly of section .plt:

00011474 <fstatfs64@plt-0x14>:
   11474:	push	{lr}		; (str lr, [sp, #-4]!)
   11478:	ldr	lr, [pc, #4]	; 11484 <fstatfs64@plt-0x4>
   1147c:	add	lr, pc, lr
   11480:	ldr	pc, [lr, #8]!
   11484:	andeq	fp, r1, ip, ror fp

00011488 <fstatfs64@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #110592	; 0x1b000
   11490:	ldr	pc, [ip, #2940]!	; 0xb7c

00011494 <selabel_lookup@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #110592	; 0x1b000
   1149c:	ldr	pc, [ip, #2932]!	; 0xb74

000114a0 <calloc@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #110592	; 0x1b000
   114a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114ac <fputs_unlocked@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #110592	; 0x1b000
   114b4:	ldr	pc, [ip, #2916]!	; 0xb64

000114b8 <raise@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #110592	; 0x1b000
   114c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114c4 <is_selinux_enabled@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #110592	; 0x1b000
   114cc:	ldr	pc, [ip, #2900]!	; 0xb54

000114d0 <strcmp@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #110592	; 0x1b000
   114d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000114dc <context_type_get@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #110592	; 0x1b000
   114e4:	ldr	pc, [ip, #2884]!	; 0xb44

000114e8 <fflush@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #110592	; 0x1b000
   114f0:	ldr	pc, [ip, #2876]!	; 0xb3c

000114f4 <lsetfilecon@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #110592	; 0x1b000
   114fc:	ldr	pc, [ip, #2868]!	; 0xb34

00011500 <memmove@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #110592	; 0x1b000
   11508:	ldr	pc, [ip, #2860]!	; 0xb2c

0001150c <free@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #110592	; 0x1b000
   11514:	ldr	pc, [ip, #2852]!	; 0xb24

00011518 <faccessat@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #110592	; 0x1b000
   11520:	ldr	pc, [ip, #2844]!	; 0xb1c

00011524 <_exit@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #110592	; 0x1b000
   1152c:	ldr	pc, [ip, #2836]!	; 0xb14

00011530 <memcpy@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #110592	; 0x1b000
   11538:	ldr	pc, [ip, #2828]!	; 0xb0c

0001153c <__strtoull_internal@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #110592	; 0x1b000
   11544:	ldr	pc, [ip, #2820]!	; 0xb04

00011548 <mbsinit@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #110592	; 0x1b000
   11550:	ldr	pc, [ip, #2812]!	; 0xafc

00011554 <context_new@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #110592	; 0x1b000
   1155c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011560 <memcmp@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #110592	; 0x1b000
   11568:	ldr	pc, [ip, #2796]!	; 0xaec

0001156c <fputc_unlocked@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #110592	; 0x1b000
   11574:	ldr	pc, [ip, #2788]!	; 0xae4

00011578 <dcgettext@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #110592	; 0x1b000
   11580:	ldr	pc, [ip, #2780]!	; 0xadc

00011584 <context_type_set@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #110592	; 0x1b000
   1158c:	ldr	pc, [ip, #2772]!	; 0xad4

00011590 <realloc@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #110592	; 0x1b000
   11598:	ldr	pc, [ip, #2764]!	; 0xacc

0001159c <fgetfilecon@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #110592	; 0x1b000
   115a4:	ldr	pc, [ip, #2756]!	; 0xac4

000115a8 <textdomain@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #110592	; 0x1b000
   115b0:	ldr	pc, [ip, #2748]!	; 0xabc

000115b4 <rawmemchr@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #110592	; 0x1b000
   115bc:	ldr	pc, [ip, #2740]!	; 0xab4

000115c0 <__fxstatat64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #110592	; 0x1b000
   115c8:	ldr	pc, [ip, #2732]!	; 0xaac

000115cc <iswprint@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #110592	; 0x1b000
   115d4:	ldr	pc, [ip, #2724]!	; 0xaa4

000115d8 <__fxstat64@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #110592	; 0x1b000
   115e0:	ldr	pc, [ip, #2716]!	; 0xa9c

000115e4 <readlink@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #110592	; 0x1b000
   115ec:	ldr	pc, [ip, #2708]!	; 0xa94

000115f0 <fwrite@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #110592	; 0x1b000
   115f8:	ldr	pc, [ip, #2700]!	; 0xa8c

000115fc <lseek64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #110592	; 0x1b000
   11604:	ldr	pc, [ip, #2692]!	; 0xa84

00011608 <__ctype_get_mb_cur_max@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #110592	; 0x1b000
   11610:	ldr	pc, [ip, #2684]!	; 0xa7c

00011614 <getcon@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #110592	; 0x1b000
   1161c:	ldr	pc, [ip, #2676]!	; 0xa74

00011620 <__fpending@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #110592	; 0x1b000
   11628:	ldr	pc, [ip, #2668]!	; 0xa6c

0001162c <mbrtowc@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #110592	; 0x1b000
   11634:	ldr	pc, [ip, #2660]!	; 0xa64

00011638 <error@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #110592	; 0x1b000
   11640:	ldr	pc, [ip, #2652]!	; 0xa5c

00011644 <open64@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #110592	; 0x1b000
   1164c:	ldr	pc, [ip, #2644]!	; 0xa54

00011650 <lgetfilecon@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #110592	; 0x1b000
   11658:	ldr	pc, [ip, #2636]!	; 0xa4c

0001165c <malloc@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #110592	; 0x1b000
   11664:	ldr	pc, [ip, #2628]!	; 0xa44

00011668 <__libc_start_main@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #110592	; 0x1b000
   11670:	ldr	pc, [ip, #2620]!	; 0xa3c

00011674 <__freading@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #110592	; 0x1b000
   1167c:	ldr	pc, [ip, #2612]!	; 0xa34

00011680 <__gmon_start__@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #110592	; 0x1b000
   11688:	ldr	pc, [ip, #2604]!	; 0xa2c

0001168c <context_free@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #110592	; 0x1b000
   11694:	ldr	pc, [ip, #2596]!	; 0xa24

00011698 <mempcpy@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #110592	; 0x1b000
   116a0:	ldr	pc, [ip, #2588]!	; 0xa1c

000116a4 <getopt_long@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #110592	; 0x1b000
   116ac:	ldr	pc, [ip, #2580]!	; 0xa14

000116b0 <__ctype_b_loc@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #110592	; 0x1b000
   116b8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116bc <getcwd@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #110592	; 0x1b000
   116c4:	ldr	pc, [ip, #2564]!	; 0xa04

000116c8 <exit@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #110592	; 0x1b000
   116d0:	ldr	pc, [ip, #2556]!	; 0x9fc

000116d4 <getfilecon@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #110592	; 0x1b000
   116dc:	ldr	pc, [ip, #2548]!	; 0x9f4

000116e0 <strlen@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #110592	; 0x1b000
   116e8:	ldr	pc, [ip, #2540]!	; 0x9ec

000116ec <selabel_open@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #110592	; 0x1b000
   116f4:	ldr	pc, [ip, #2532]!	; 0x9e4

000116f8 <strchr@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #110592	; 0x1b000
   11700:	ldr	pc, [ip, #2524]!	; 0x9dc

00011704 <openat64@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #110592	; 0x1b000
   1170c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011710 <setfscreatecon@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #110592	; 0x1b000
   11718:	ldr	pc, [ip, #2508]!	; 0x9cc

0001171c <__errno_location@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #110592	; 0x1b000
   11724:	ldr	pc, [ip, #2500]!	; 0x9c4

00011728 <__sprintf_chk@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #110592	; 0x1b000
   11730:	ldr	pc, [ip, #2492]!	; 0x9bc

00011734 <__cxa_atexit@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #110592	; 0x1b000
   1173c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011740 <memset@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #110592	; 0x1b000
   11748:	ldr	pc, [ip, #2476]!	; 0x9ac

0001174c <__printf_chk@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #110592	; 0x1b000
   11754:	ldr	pc, [ip, #2468]!	; 0x9a4

00011758 <fileno@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #110592	; 0x1b000
   11760:	ldr	pc, [ip, #2460]!	; 0x99c

00011764 <__fprintf_chk@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #110592	; 0x1b000
   1176c:	ldr	pc, [ip, #2452]!	; 0x994

00011770 <fclose@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #110592	; 0x1b000
   11778:	ldr	pc, [ip, #2444]!	; 0x98c

0001177c <fseeko64@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #110592	; 0x1b000
   11784:	ldr	pc, [ip, #2436]!	; 0x984

00011788 <fcntl64@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #110592	; 0x1b000
   11790:	ldr	pc, [ip, #2428]!	; 0x97c

00011794 <setlocale@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #110592	; 0x1b000
   1179c:	ldr	pc, [ip, #2420]!	; 0x974

000117a0 <fsetfilecon@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #110592	; 0x1b000
   117a8:	ldr	pc, [ip, #2412]!	; 0x96c

000117ac <strrchr@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #110592	; 0x1b000
   117b4:	ldr	pc, [ip, #2404]!	; 0x964

000117b8 <nl_langinfo@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #110592	; 0x1b000
   117c0:	ldr	pc, [ip, #2396]!	; 0x95c

000117c4 <readdir64@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #110592	; 0x1b000
   117cc:	ldr	pc, [ip, #2388]!	; 0x954

000117d0 <fdopendir@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #110592	; 0x1b000
   117d8:	ldr	pc, [ip, #2380]!	; 0x94c

000117dc <security_compute_create@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #110592	; 0x1b000
   117e4:	ldr	pc, [ip, #2372]!	; 0x944

000117e8 <dirfd@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #110592	; 0x1b000
   117f0:	ldr	pc, [ip, #2364]!	; 0x93c

000117f4 <fchdir@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #110592	; 0x1b000
   117fc:	ldr	pc, [ip, #2356]!	; 0x934

00011800 <qsort@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #110592	; 0x1b000
   11808:	ldr	pc, [ip, #2348]!	; 0x92c

0001180c <freecon@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #110592	; 0x1b000
   11814:	ldr	pc, [ip, #2340]!	; 0x924

00011818 <bindtextdomain@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #110592	; 0x1b000
   11820:	ldr	pc, [ip, #2332]!	; 0x91c

00011824 <getfscreatecon@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #110592	; 0x1b000
   1182c:	ldr	pc, [ip, #2324]!	; 0x914

00011830 <umask@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #110592	; 0x1b000
   11838:	ldr	pc, [ip, #2316]!	; 0x90c

0001183c <context_str@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #110592	; 0x1b000
   11844:	ldr	pc, [ip, #2308]!	; 0x904

00011848 <chmod@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #110592	; 0x1b000
   11850:	ldr	pc, [ip, #2300]!	; 0x8fc

00011854 <__xstat64@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #110592	; 0x1b000
   1185c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011860 <__xmknod@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #110592	; 0x1b000
   11868:	ldr	pc, [ip, #2284]!	; 0x8ec

0001186c <strncmp@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #110592	; 0x1b000
   11874:	ldr	pc, [ip, #2276]!	; 0x8e4

00011878 <abort@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #110592	; 0x1b000
   11880:	ldr	pc, [ip, #2268]!	; 0x8dc

00011884 <close@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #110592	; 0x1b000
   1188c:	ldr	pc, [ip, #2260]!	; 0x8d4

00011890 <__lxstat64@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #110592	; 0x1b000
   11898:	ldr	pc, [ip, #2252]!	; 0x8cc

0001189c <mkfifo@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #110592	; 0x1b000
   118a4:	ldr	pc, [ip, #2244]!	; 0x8c4

000118a8 <mode_to_security_class@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #110592	; 0x1b000
   118b0:	ldr	pc, [ip, #2236]!	; 0x8bc

000118b4 <closedir@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #110592	; 0x1b000
   118bc:	ldr	pc, [ip, #2228]!	; 0x8b4

000118c0 <strspn@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #110592	; 0x1b000
   118c8:	ldr	pc, [ip, #2220]!	; 0x8ac

000118cc <__assert_fail@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #110592	; 0x1b000
   118d4:	ldr	pc, [ip, #2212]!	; 0x8a4

Disassembly of section .text:

000118d8 <lchmod@@Base-0x5540>:
   118d8:	mov	fp, #0
   118dc:	mov	lr, #0
   118e0:	pop	{r1}		; (ldr r1, [sp], #4)
   118e4:	mov	r2, sp
   118e8:	push	{r2}		; (str r2, [sp, #-4]!)
   118ec:	push	{r0}		; (str r0, [sp, #-4]!)
   118f0:	ldr	ip, [pc, #16]	; 11908 <__assert_fail@plt+0x3c>
   118f4:	push	{ip}		; (str ip, [sp, #-4]!)
   118f8:	ldr	r0, [pc, #12]	; 1190c <__assert_fail@plt+0x40>
   118fc:	ldr	r3, [pc, #12]	; 11910 <__assert_fail@plt+0x44>
   11900:	bl	11668 <__libc_start_main@plt>
   11904:	bl	11878 <abort@plt>
   11908:	andeq	fp, r1, r8, asr #18
   1190c:	andeq	r1, r1, ip, ror #27
   11910:	andeq	fp, r1, r8, ror #17
   11914:	ldr	r3, [pc, #20]	; 11930 <__assert_fail@plt+0x64>
   11918:	ldr	r2, [pc, #20]	; 11934 <__assert_fail@plt+0x68>
   1191c:	add	r3, pc, r3
   11920:	ldr	r2, [r3, r2]
   11924:	cmp	r2, #0
   11928:	bxeq	lr
   1192c:	b	11680 <__gmon_start__@plt>
   11930:	ldrdeq	fp, [r1], -ip
   11934:	andeq	r0, r0, ip, ror r1
   11938:	ldr	r0, [pc, #24]	; 11958 <__assert_fail@plt+0x8c>
   1193c:	ldr	r3, [pc, #24]	; 1195c <__assert_fail@plt+0x90>
   11940:	cmp	r3, r0
   11944:	bxeq	lr
   11948:	ldr	r3, [pc, #16]	; 11960 <__assert_fail@plt+0x94>
   1194c:	cmp	r3, #0
   11950:	bxeq	lr
   11954:	bx	r3
   11958:	ldrdeq	sp, [r2], -r0
   1195c:	ldrdeq	sp, [r2], -r0
   11960:	andeq	r0, r0, r0
   11964:	ldr	r0, [pc, #36]	; 11990 <__assert_fail@plt+0xc4>
   11968:	ldr	r1, [pc, #36]	; 11994 <__assert_fail@plt+0xc8>
   1196c:	sub	r1, r1, r0
   11970:	asr	r1, r1, #2
   11974:	add	r1, r1, r1, lsr #31
   11978:	asrs	r1, r1, #1
   1197c:	bxeq	lr
   11980:	ldr	r3, [pc, #16]	; 11998 <__assert_fail@plt+0xcc>
   11984:	cmp	r3, #0
   11988:	bxeq	lr
   1198c:	bx	r3
   11990:	ldrdeq	sp, [r2], -r0
   11994:	ldrdeq	sp, [r2], -r0
   11998:	andeq	r0, r0, r0
   1199c:	push	{r4, lr}
   119a0:	ldr	r4, [pc, #24]	; 119c0 <__assert_fail@plt+0xf4>
   119a4:	ldrb	r3, [r4]
   119a8:	cmp	r3, #0
   119ac:	popne	{r4, pc}
   119b0:	bl	11938 <__assert_fail@plt+0x6c>
   119b4:	mov	r3, #1
   119b8:	strb	r3, [r4]
   119bc:	pop	{r4, pc}
   119c0:	andeq	sp, r2, ip, ror #3
   119c4:	b	11964 <__assert_fail@plt+0x98>
   119c8:	push	{lr}		; (str lr, [sp, #-4]!)
   119cc:	sub	sp, sp, #60	; 0x3c
   119d0:	subs	r4, r0, #0
   119d4:	beq	11a1c <__assert_fail@plt+0x150>
   119d8:	movw	r3, #53728	; 0xd1e0
   119dc:	movt	r3, #2
   119e0:	ldr	r5, [r3]
   119e4:	mov	r2, #5
   119e8:	movw	r1, #47616	; 0xba00
   119ec:	movt	r1, #1
   119f0:	mov	r0, #0
   119f4:	bl	11578 <dcgettext@plt>
   119f8:	movw	r3, #53752	; 0xd1f8
   119fc:	movt	r3, #2
   11a00:	ldr	r3, [r3]
   11a04:	mov	r2, r0
   11a08:	mov	r1, #1
   11a0c:	mov	r0, r5
   11a10:	bl	11764 <__fprintf_chk@plt>
   11a14:	mov	r0, r4
   11a18:	bl	116c8 <exit@plt>
   11a1c:	mov	r2, #5
   11a20:	movw	r1, #47656	; 0xba28
   11a24:	movt	r1, #1
   11a28:	mov	r0, #0
   11a2c:	bl	11578 <dcgettext@plt>
   11a30:	movw	r3, #53752	; 0xd1f8
   11a34:	movt	r3, #2
   11a38:	ldr	r2, [r3]
   11a3c:	mov	r1, r0
   11a40:	mov	r0, #1
   11a44:	bl	1174c <__printf_chk@plt>
   11a48:	mov	r2, #5
   11a4c:	movw	r1, #47704	; 0xba58
   11a50:	movt	r1, #1
   11a54:	mov	r0, #0
   11a58:	bl	11578 <dcgettext@plt>
   11a5c:	movw	r5, #53732	; 0xd1e4
   11a60:	movt	r5, #2
   11a64:	ldr	r1, [r5]
   11a68:	bl	114ac <fputs_unlocked@plt>
   11a6c:	mov	r2, #5
   11a70:	movw	r1, #47756	; 0xba8c
   11a74:	movt	r1, #1
   11a78:	mov	r0, #0
   11a7c:	bl	11578 <dcgettext@plt>
   11a80:	ldr	r1, [r5]
   11a84:	bl	114ac <fputs_unlocked@plt>
   11a88:	mov	r2, #5
   11a8c:	movw	r1, #47832	; 0xbad8
   11a90:	movt	r1, #1
   11a94:	mov	r0, #0
   11a98:	bl	11578 <dcgettext@plt>
   11a9c:	ldr	r1, [r5]
   11aa0:	bl	114ac <fputs_unlocked@plt>
   11aa4:	mov	r2, #5
   11aa8:	movw	r1, #47908	; 0xbb24
   11aac:	movt	r1, #1
   11ab0:	mov	r0, #0
   11ab4:	bl	11578 <dcgettext@plt>
   11ab8:	ldr	r1, [r5]
   11abc:	bl	114ac <fputs_unlocked@plt>
   11ac0:	mov	r2, #5
   11ac4:	movw	r1, #48116	; 0xbbf4
   11ac8:	movt	r1, #1
   11acc:	mov	r0, #0
   11ad0:	bl	11578 <dcgettext@plt>
   11ad4:	ldr	r1, [r5]
   11ad8:	bl	114ac <fputs_unlocked@plt>
   11adc:	mov	r2, #5
   11ae0:	movw	r1, #48164	; 0xbc24
   11ae4:	movt	r1, #1
   11ae8:	mov	r0, #0
   11aec:	bl	11578 <dcgettext@plt>
   11af0:	ldr	r1, [r5]
   11af4:	bl	114ac <fputs_unlocked@plt>
   11af8:	mov	r2, #5
   11afc:	movw	r1, #48220	; 0xbc5c
   11b00:	movt	r1, #1
   11b04:	mov	r0, #0
   11b08:	bl	11578 <dcgettext@plt>
   11b0c:	ldr	r1, [r5]
   11b10:	bl	114ac <fputs_unlocked@plt>
   11b14:	mov	r2, #5
   11b18:	movw	r1, #48484	; 0xbd64
   11b1c:	movt	r1, #1
   11b20:	mov	r0, #0
   11b24:	bl	11578 <dcgettext@plt>
   11b28:	ldr	r1, [r5]
   11b2c:	bl	114ac <fputs_unlocked@plt>
   11b30:	mov	r2, #5
   11b34:	movw	r1, #48612	; 0xbde4
   11b38:	movt	r1, #1
   11b3c:	mov	r0, #0
   11b40:	bl	11578 <dcgettext@plt>
   11b44:	movw	r2, #47608	; 0xb9f8
   11b48:	movt	r2, #1
   11b4c:	mov	r1, r0
   11b50:	mov	r0, #1
   11b54:	bl	1174c <__printf_chk@plt>
   11b58:	movw	r0, #47472	; 0xb970
   11b5c:	movt	r0, #1
   11b60:	ldr	r1, [r0]
   11b64:	ldr	r3, [r0, #4]
   11b68:	str	r1, [sp]
   11b6c:	str	r3, [sp, #4]
   11b70:	ldrd	r2, [r0, #8]
   11b74:	strd	r2, [sp, #8]
   11b78:	ldrd	r2, [r0, #16]
   11b7c:	strd	r2, [sp, #16]
   11b80:	ldrd	r2, [r0, #24]
   11b84:	strd	r2, [sp, #24]
   11b88:	ldrd	r2, [r0, #32]
   11b8c:	strd	r2, [sp, #32]
   11b90:	ldrd	r2, [r0, #40]	; 0x28
   11b94:	strd	r2, [sp, #40]	; 0x28
   11b98:	ldrd	r2, [r0, #48]	; 0x30
   11b9c:	strd	r2, [sp, #48]	; 0x30
   11ba0:	cmp	r1, #0
   11ba4:	moveq	r5, sp
   11ba8:	beq	11bd4 <__assert_fail@plt+0x308>
   11bac:	mov	r5, sp
   11bb0:	movw	r6, #47608	; 0xb9f8
   11bb4:	movt	r6, #1
   11bb8:	mov	r0, r6
   11bbc:	bl	114d0 <strcmp@plt>
   11bc0:	cmp	r0, #0
   11bc4:	beq	11bd4 <__assert_fail@plt+0x308>
   11bc8:	ldr	r1, [r5, #8]!
   11bcc:	cmp	r1, #0
   11bd0:	bne	11bb8 <__assert_fail@plt+0x2ec>
   11bd4:	ldr	r5, [r5, #4]
   11bd8:	cmp	r5, #0
   11bdc:	beq	11d38 <__assert_fail@plt+0x46c>
   11be0:	mov	r2, #5
   11be4:	movw	r1, #48804	; 0xbea4
   11be8:	movt	r1, #1
   11bec:	mov	r0, #0
   11bf0:	bl	11578 <dcgettext@plt>
   11bf4:	movw	r3, #48828	; 0xbebc
   11bf8:	movt	r3, #1
   11bfc:	movw	r2, #48868	; 0xbee4
   11c00:	movt	r2, #1
   11c04:	mov	r1, r0
   11c08:	mov	r0, #1
   11c0c:	bl	1174c <__printf_chk@plt>
   11c10:	mov	r1, #0
   11c14:	mov	r0, #5
   11c18:	bl	11794 <setlocale@plt>
   11c1c:	cmp	r0, #0
   11c20:	beq	11c3c <__assert_fail@plt+0x370>
   11c24:	mov	r2, #3
   11c28:	movw	r1, #48884	; 0xbef4
   11c2c:	movt	r1, #1
   11c30:	bl	1186c <strncmp@plt>
   11c34:	cmp	r0, #0
   11c38:	bne	11cb8 <__assert_fail@plt+0x3ec>
   11c3c:	mov	r2, #5
   11c40:	movw	r1, #48960	; 0xbf40
   11c44:	movt	r1, #1
   11c48:	mov	r0, #0
   11c4c:	bl	11578 <dcgettext@plt>
   11c50:	movw	r6, #47608	; 0xb9f8
   11c54:	movt	r6, #1
   11c58:	mov	r3, r6
   11c5c:	movw	r2, #48828	; 0xbebc
   11c60:	movt	r2, #1
   11c64:	mov	r1, r0
   11c68:	mov	r0, #1
   11c6c:	bl	1174c <__printf_chk@plt>
   11c70:	mov	r2, #5
   11c74:	movw	r1, #48988	; 0xbf5c
   11c78:	movt	r1, #1
   11c7c:	mov	r0, #0
   11c80:	bl	11578 <dcgettext@plt>
   11c84:	mov	r1, r0
   11c88:	movw	r2, #49624	; 0xc1d8
   11c8c:	movt	r2, #1
   11c90:	movw	r3, #49884	; 0xc2dc
   11c94:	movt	r3, #1
   11c98:	cmp	r5, r6
   11c9c:	moveq	r3, r2
   11ca0:	mov	r2, r5
   11ca4:	mov	r0, #1
   11ca8:	bl	1174c <__printf_chk@plt>
   11cac:	b	11a14 <__assert_fail@plt+0x148>
   11cb0:	movw	r5, #47608	; 0xb9f8
   11cb4:	movt	r5, #1
   11cb8:	mov	r2, #5
   11cbc:	movw	r1, #48888	; 0xbef8
   11cc0:	movt	r1, #1
   11cc4:	mov	r0, #0
   11cc8:	bl	11578 <dcgettext@plt>
   11ccc:	movw	r3, #53732	; 0xd1e4
   11cd0:	movt	r3, #2
   11cd4:	ldr	r1, [r3]
   11cd8:	bl	114ac <fputs_unlocked@plt>
   11cdc:	b	11c3c <__assert_fail@plt+0x370>
   11ce0:	mov	r2, #5
   11ce4:	movw	r1, #48960	; 0xbf40
   11ce8:	movt	r1, #1
   11cec:	mov	r0, #0
   11cf0:	bl	11578 <dcgettext@plt>
   11cf4:	movw	r5, #47608	; 0xb9f8
   11cf8:	movt	r5, #1
   11cfc:	mov	r3, r5
   11d00:	movw	r2, #48828	; 0xbebc
   11d04:	movt	r2, #1
   11d08:	mov	r1, r0
   11d0c:	mov	r0, #1
   11d10:	bl	1174c <__printf_chk@plt>
   11d14:	mov	r2, #5
   11d18:	movw	r1, #48988	; 0xbf5c
   11d1c:	movt	r1, #1
   11d20:	mov	r0, #0
   11d24:	bl	11578 <dcgettext@plt>
   11d28:	mov	r1, r0
   11d2c:	movw	r3, #49624	; 0xc1d8
   11d30:	movt	r3, #1
   11d34:	b	11ca0 <__assert_fail@plt+0x3d4>
   11d38:	mov	r2, #5
   11d3c:	movw	r1, #48804	; 0xbea4
   11d40:	movt	r1, #1
   11d44:	mov	r0, #0
   11d48:	bl	11578 <dcgettext@plt>
   11d4c:	movw	r3, #48828	; 0xbebc
   11d50:	movt	r3, #1
   11d54:	movw	r2, #48868	; 0xbee4
   11d58:	movt	r2, #1
   11d5c:	mov	r1, r0
   11d60:	mov	r0, #1
   11d64:	bl	1174c <__printf_chk@plt>
   11d68:	mov	r1, #0
   11d6c:	mov	r0, #5
   11d70:	bl	11794 <setlocale@plt>
   11d74:	cmp	r0, #0
   11d78:	beq	11ce0 <__assert_fail@plt+0x414>
   11d7c:	mov	r2, #3
   11d80:	movw	r1, #48884	; 0xbef4
   11d84:	movt	r1, #1
   11d88:	bl	1186c <strncmp@plt>
   11d8c:	cmp	r0, #0
   11d90:	bne	11cb0 <__assert_fail@plt+0x3e4>
   11d94:	mov	r2, #5
   11d98:	movw	r1, #48960	; 0xbf40
   11d9c:	movt	r1, #1
   11da0:	mov	r0, #0
   11da4:	bl	11578 <dcgettext@plt>
   11da8:	movw	r5, #47608	; 0xb9f8
   11dac:	movt	r5, #1
   11db0:	mov	r3, r5
   11db4:	movw	r2, #48828	; 0xbebc
   11db8:	movt	r2, #1
   11dbc:	mov	r1, r0
   11dc0:	mov	r0, #1
   11dc4:	bl	1174c <__printf_chk@plt>
   11dc8:	mov	r2, #5
   11dcc:	movw	r1, #48988	; 0xbf5c
   11dd0:	movt	r1, #1
   11dd4:	mov	r0, #0
   11dd8:	bl	11578 <dcgettext@plt>
   11ddc:	mov	r1, r0
   11de0:	movw	r3, #49624	; 0xc1d8
   11de4:	movt	r3, #1
   11de8:	b	11ca0 <__assert_fail@plt+0x3d4>
   11dec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11df0:	strd	r6, [sp, #8]
   11df4:	strd	r8, [sp, #16]
   11df8:	strd	sl, [sp, #24]
   11dfc:	str	lr, [sp, #32]
   11e00:	sub	sp, sp, #52	; 0x34
   11e04:	mov	r9, r0
   11e08:	mov	r4, r1
   11e0c:	ldr	r0, [r1]
   11e10:	bl	17588 <lchmod@@Base+0x770>
   11e14:	movw	r1, #49884	; 0xc2dc
   11e18:	movt	r1, #1
   11e1c:	mov	r0, #6
   11e20:	bl	11794 <setlocale@plt>
   11e24:	movw	r5, #48872	; 0xbee8
   11e28:	movt	r5, #1
   11e2c:	movw	r1, #49040	; 0xbf90
   11e30:	movt	r1, #1
   11e34:	mov	r0, r5
   11e38:	bl	11818 <bindtextdomain@plt>
   11e3c:	mov	r0, r5
   11e40:	bl	115a8 <textdomain@plt>
   11e44:	movw	r0, #13448	; 0x3488
   11e48:	movt	r0, #1
   11e4c:	bl	1b94c <lchmod@@Base+0x4b34>
   11e50:	mov	r5, #0
   11e54:	mov	sl, r5
   11e58:	mov	r6, r5
   11e5c:	ldr	fp, [pc, #2096]	; 12694 <__assert_fail@plt+0xdc8>
   11e60:	movw	r7, #49184	; 0xc020
   11e64:	movt	r7, #1
   11e68:	movw	r8, #53736	; 0xd1e8
   11e6c:	movt	r8, #2
   11e70:	mov	r3, #0
   11e74:	str	r3, [sp]
   11e78:	mov	r3, fp
   11e7c:	mov	r2, r7
   11e80:	mov	r1, r4
   11e84:	mov	r0, r9
   11e88:	bl	116a4 <getopt_long@plt>
   11e8c:	cmn	r0, #1
   11e90:	beq	11fb4 <__assert_fail@plt+0x6e8>
   11e94:	cmn	r0, #2
   11e98:	beq	11fa4 <__assert_fail@plt+0x6d8>
   11e9c:	ble	11eb8 <__assert_fail@plt+0x5ec>
   11ea0:	cmp	r0, #90	; 0x5a
   11ea4:	beq	11f08 <__assert_fail@plt+0x63c>
   11ea8:	cmp	r0, #109	; 0x6d
   11eac:	bne	11fac <__assert_fail@plt+0x6e0>
   11eb0:	ldr	r6, [r8]
   11eb4:	b	11e70 <__assert_fail@plt+0x5a4>
   11eb8:	cmn	r0, #3
   11ebc:	bne	11fac <__assert_fail@plt+0x6e0>
   11ec0:	movw	r3, #53640	; 0xd188
   11ec4:	movt	r3, #2
   11ec8:	movw	r0, #53732	; 0xd1e4
   11ecc:	movt	r0, #2
   11ed0:	mov	r4, #0
   11ed4:	str	r4, [sp, #4]
   11ed8:	movw	r2, #49168	; 0xc010
   11edc:	movt	r2, #1
   11ee0:	str	r2, [sp]
   11ee4:	ldr	r3, [r3]
   11ee8:	movw	r2, #48868	; 0xbee4
   11eec:	movt	r2, #1
   11ef0:	movw	r1, #47608	; 0xb9f8
   11ef4:	movt	r1, #1
   11ef8:	ldr	r0, [r0]
   11efc:	bl	1a064 <lchmod@@Base+0x324c>
   11f00:	mov	r0, r4
   11f04:	bl	116c8 <exit@plt>
   11f08:	bl	114c4 <is_selinux_enabled@plt>
   11f0c:	cmp	r0, #0
   11f10:	ble	11f70 <__assert_fail@plt+0x6a4>
   11f14:	ldr	r3, [r8]
   11f18:	cmp	r3, #0
   11f1c:	movne	sl, r3
   11f20:	bne	11e70 <__assert_fail@plt+0x5a4>
   11f24:	mov	r2, #0
   11f28:	mov	r1, r2
   11f2c:	mov	r0, r2
   11f30:	bl	116ec <selabel_open@plt>
   11f34:	subs	r5, r0, #0
   11f38:	bne	11e70 <__assert_fail@plt+0x5a4>
   11f3c:	bl	1171c <__errno_location@plt>
   11f40:	ldr	r3, [r0]
   11f44:	str	r3, [sp, #8]
   11f48:	mov	r2, #5
   11f4c:	movw	r1, #49064	; 0xbfa8
   11f50:	movt	r1, #1
   11f54:	mov	r0, #0
   11f58:	bl	11578 <dcgettext@plt>
   11f5c:	mov	r2, r0
   11f60:	ldr	r1, [sp, #8]
   11f64:	mov	r0, #0
   11f68:	bl	11638 <error@plt>
   11f6c:	b	11e70 <__assert_fail@plt+0x5a4>
   11f70:	ldr	r3, [r8]
   11f74:	cmp	r3, #0
   11f78:	beq	11e70 <__assert_fail@plt+0x5a4>
   11f7c:	mov	r2, #5
   11f80:	movw	r1, #49092	; 0xbfc4
   11f84:	movt	r1, #1
   11f88:	mov	r0, #0
   11f8c:	bl	11578 <dcgettext@plt>
   11f90:	mov	r2, r0
   11f94:	mov	r1, #0
   11f98:	mov	r0, r1
   11f9c:	bl	11638 <error@plt>
   11fa0:	b	11e70 <__assert_fail@plt+0x5a4>
   11fa4:	mov	r0, #0
   11fa8:	bl	119c8 <__assert_fail@plt+0xfc>
   11fac:	mov	r0, #1
   11fb0:	bl	119c8 <__assert_fail@plt+0xfc>
   11fb4:	cmp	r6, #0
   11fb8:	beq	120f4 <__assert_fail@plt+0x828>
   11fbc:	mov	r0, r6
   11fc0:	bl	16f44 <lchmod@@Base+0x12c>
   11fc4:	subs	r8, r0, #0
   11fc8:	beq	120b0 <__assert_fail@plt+0x7e4>
   11fcc:	mov	r0, #0
   11fd0:	bl	11830 <umask@plt>
   11fd4:	mov	r7, r0
   11fd8:	bl	11830 <umask@plt>
   11fdc:	mov	r1, #0
   11fe0:	str	r1, [sp]
   11fe4:	mov	r3, r8
   11fe8:	mov	r2, r7
   11fec:	movw	r0, #438	; 0x1b6
   11ff0:	bl	17380 <lchmod@@Base+0x568>
   11ff4:	mov	r7, r0
   11ff8:	mov	r0, r8
   11ffc:	bl	13780 <__assert_fail@plt+0x1eb4>
   12000:	bic	r3, r7, #508	; 0x1fc
   12004:	bic	r3, r3, #3
   12008:	cmp	r3, #0
   1200c:	bne	120d0 <__assert_fail@plt+0x804>
   12010:	movw	r3, #53720	; 0xd1d8
   12014:	movt	r3, #2
   12018:	ldr	r3, [r3]
   1201c:	cmp	r3, r9
   12020:	bge	12554 <__assert_fail@plt+0xc88>
   12024:	add	r2, r3, #1
   12028:	cmp	r2, r9
   1202c:	movge	r8, #4
   12030:	bge	12048 <__assert_fail@plt+0x77c>
   12034:	ldr	r2, [r4, r2, lsl #2]
   12038:	ldrb	r2, [r2]
   1203c:	cmp	r2, #112	; 0x70
   12040:	movne	r8, #4
   12044:	moveq	r8, #2
   12048:	sub	r3, r9, r3
   1204c:	cmp	r8, r3
   12050:	bhi	12128 <__assert_fail@plt+0x85c>
   12054:	cmp	r8, r3
   12058:	bcs	12568 <__assert_fail@plt+0xc9c>
   1205c:	mov	r2, #5
   12060:	movw	r1, #49348	; 0xc0c4
   12064:	movt	r1, #1
   12068:	mov	r0, #0
   1206c:	bl	11578 <dcgettext@plt>
   12070:	mov	r5, r0
   12074:	movw	r3, #53720	; 0xd1d8
   12078:	movt	r3, #2
   1207c:	ldr	r3, [r3]
   12080:	add	r3, r8, r3
   12084:	ldr	r0, [r4, r3, lsl #2]
   12088:	bl	19884 <lchmod@@Base+0x2a6c>
   1208c:	mov	r3, r0
   12090:	mov	r2, r5
   12094:	mov	r1, #0
   12098:	mov	r0, r1
   1209c:	bl	11638 <error@plt>
   120a0:	cmp	r8, #2
   120a4:	beq	12640 <__assert_fail@plt+0xd74>
   120a8:	mov	r0, #1
   120ac:	bl	119c8 <__assert_fail@plt+0xfc>
   120b0:	mov	r2, #5
   120b4:	movw	r1, #49188	; 0xc024
   120b8:	movt	r1, #1
   120bc:	bl	11578 <dcgettext@plt>
   120c0:	mov	r2, r0
   120c4:	mov	r1, #0
   120c8:	mov	r0, #1
   120cc:	bl	11638 <error@plt>
   120d0:	mov	r2, #5
   120d4:	movw	r1, #49204	; 0xc034
   120d8:	movt	r1, #1
   120dc:	mov	r0, #0
   120e0:	bl	11578 <dcgettext@plt>
   120e4:	mov	r2, r0
   120e8:	mov	r1, #0
   120ec:	mov	r0, #1
   120f0:	bl	11638 <error@plt>
   120f4:	movw	r7, #438	; 0x1b6
   120f8:	b	12010 <__assert_fail@plt+0x744>
   120fc:	mov	r2, #5
   12100:	movw	r1, #49248	; 0xc060
   12104:	movt	r1, #1
   12108:	mov	r0, #0
   1210c:	bl	11578 <dcgettext@plt>
   12110:	mov	r2, r0
   12114:	mov	r1, #0
   12118:	mov	r0, r1
   1211c:	bl	11638 <error@plt>
   12120:	mov	r0, #1
   12124:	bl	119c8 <__assert_fail@plt+0xfc>
   12128:	mov	r2, #5
   1212c:	movw	r1, #49264	; 0xc070
   12130:	movt	r1, #1
   12134:	mov	r0, #0
   12138:	bl	11578 <dcgettext@plt>
   1213c:	mov	r5, r0
   12140:	sub	r3, r9, #-1073741823	; 0xc0000001
   12144:	ldr	r0, [r4, r3, lsl #2]
   12148:	bl	19884 <lchmod@@Base+0x2a6c>
   1214c:	mov	r3, r0
   12150:	mov	r2, r5
   12154:	mov	r1, #0
   12158:	mov	r0, r1
   1215c:	bl	11638 <error@plt>
   12160:	cmp	r8, #4
   12164:	bne	12120 <__assert_fail@plt+0x854>
   12168:	movw	r3, #53720	; 0xd1d8
   1216c:	movt	r3, #2
   12170:	ldr	r3, [r3]
   12174:	sub	r9, r9, r3
   12178:	cmp	r9, #2
   1217c:	bne	12120 <__assert_fail@plt+0x854>
   12180:	movw	r3, #53728	; 0xd1e0
   12184:	movt	r3, #2
   12188:	ldr	r4, [r3]
   1218c:	mov	r2, #5
   12190:	movw	r1, #49292	; 0xc08c
   12194:	movt	r1, #1
   12198:	mov	r0, #0
   1219c:	bl	11578 <dcgettext@plt>
   121a0:	mov	r3, r0
   121a4:	movw	r2, #50232	; 0xc438
   121a8:	movt	r2, #1
   121ac:	mov	r1, #1
   121b0:	mov	r0, r4
   121b4:	bl	11764 <__fprintf_chk@plt>
   121b8:	b	12120 <__assert_fail@plt+0x854>
   121bc:	bl	1171c <__errno_location@plt>
   121c0:	ldr	r4, [r0]
   121c4:	mov	r2, #5
   121c8:	movw	r1, #49420	; 0xc10c
   121cc:	movt	r1, #1
   121d0:	mov	r0, #0
   121d4:	bl	11578 <dcgettext@plt>
   121d8:	mov	r5, r0
   121dc:	mov	r0, sl
   121e0:	bl	19884 <lchmod@@Base+0x2a6c>
   121e4:	mov	r3, r0
   121e8:	mov	r2, r5
   121ec:	mov	r1, r4
   121f0:	mov	r0, #1
   121f4:	bl	11638 <error@plt>
   121f8:	mov	sl, #8192	; 0x2000
   121fc:	b	12204 <__assert_fail@plt+0x938>
   12200:	mov	sl, #24576	; 0x6000
   12204:	add	r3, r4, r2
   12208:	ldr	r0, [r3, #4]
   1220c:	str	r0, [sp, #20]
   12210:	ldr	fp, [r3, #8]
   12214:	movw	r3, #49884	; 0xc2dc
   12218:	movt	r3, #1
   1221c:	str	r3, [sp]
   12220:	add	r3, sp, #24
   12224:	mov	r2, #0
   12228:	mov	r1, r2
   1222c:	bl	1a7c8 <lchmod@@Base+0x39b0>
   12230:	cmp	r0, #0
   12234:	bne	12374 <__assert_fail@plt+0xaa8>
   12238:	ldrd	r2, [sp, #24]
   1223c:	mov	r1, #0
   12240:	cmp	r3, r1
   12244:	cmpeq	r2, r2
   12248:	bne	12374 <__assert_fail@plt+0xaa8>
   1224c:	movw	r3, #49884	; 0xc2dc
   12250:	movt	r3, #1
   12254:	str	r3, [sp]
   12258:	add	r3, sp, #32
   1225c:	mov	r2, #0
   12260:	mov	r1, r2
   12264:	mov	r0, fp
   12268:	bl	1a7c8 <lchmod@@Base+0x39b0>
   1226c:	cmp	r0, #0
   12270:	bne	123a8 <__assert_fail@plt+0xadc>
   12274:	ldrd	r0, [sp, #32]
   12278:	strd	r0, [sp, #8]
   1227c:	mov	r3, #0
   12280:	cmp	r1, r3
   12284:	cmpeq	r0, r0
   12288:	bne	123a8 <__assert_fail@plt+0xadc>
   1228c:	ldr	r3, [sp, #24]
   12290:	mov	r2, #65280	; 0xff00
   12294:	movt	r2, #15
   12298:	and	r2, r2, r3, lsl #8
   1229c:	bic	r3, r3, #4080	; 0xff0
   122a0:	bic	r3, r3, #15
   122a4:	mov	r1, #0
   122a8:	movt	r1, #65520	; 0xfff0
   122ac:	ldrd	r8, [sp, #8]
   122b0:	and	r1, r1, r8, lsl #12
   122b4:	orr	r2, r2, r1
   122b8:	ldrb	r1, [sp, #8]
   122bc:	orr	r8, r1, r2
   122c0:	ldr	r2, [sp, #8]
   122c4:	orr	r9, r3, r2, lsr #20
   122c8:	mvn	r2, #0
   122cc:	mvn	r3, #0
   122d0:	cmp	r9, r3
   122d4:	cmpeq	r8, r2
   122d8:	beq	123dc <__assert_fail@plt+0xb10>
   122dc:	cmp	r5, #0
   122e0:	beq	12300 <__assert_fail@plt+0xa34>
   122e4:	movw	r3, #53720	; 0xd1d8
   122e8:	movt	r3, #2
   122ec:	ldr	r3, [r3]
   122f0:	mov	r2, sl
   122f4:	ldr	r1, [r4, r3, lsl #2]
   122f8:	mov	r0, r5
   122fc:	bl	129a0 <__assert_fail@plt+0x10d4>
   12300:	movw	r3, #53720	; 0xd1d8
   12304:	movt	r3, #2
   12308:	ldr	r1, [r3]
   1230c:	strd	r8, [sp, #40]	; 0x28
   12310:	add	r3, sp, #40	; 0x28
   12314:	orr	r2, r7, sl
   12318:	ldr	r1, [r4, r1, lsl #2]
   1231c:	mov	r0, #1
   12320:	bl	11860 <__xmknod@plt>
   12324:	cmp	r0, #0
   12328:	bne	12408 <__assert_fail@plt+0xb3c>
   1232c:	cmp	r6, #0
   12330:	beq	12354 <__assert_fail@plt+0xa88>
   12334:	movw	r3, #53720	; 0xd1d8
   12338:	movt	r3, #2
   1233c:	ldr	r3, [r3]
   12340:	mov	r1, r7
   12344:	ldr	r0, [r4, r3, lsl #2]
   12348:	bl	16e18 <lchmod@@Base>
   1234c:	cmp	r0, #0
   12350:	bne	12508 <__assert_fail@plt+0xc3c>
   12354:	mov	r0, #0
   12358:	add	sp, sp, #52	; 0x34
   1235c:	ldrd	r4, [sp]
   12360:	ldrd	r6, [sp, #8]
   12364:	ldrd	r8, [sp, #16]
   12368:	ldrd	sl, [sp, #24]
   1236c:	add	sp, sp, #32
   12370:	pop	{pc}		; (ldr pc, [sp], #4)
   12374:	mov	r2, #5
   12378:	movw	r1, #49472	; 0xc140
   1237c:	movt	r1, #1
   12380:	mov	r0, #0
   12384:	bl	11578 <dcgettext@plt>
   12388:	mov	r4, r0
   1238c:	ldr	r0, [sp, #20]
   12390:	bl	19884 <lchmod@@Base+0x2a6c>
   12394:	mov	r3, r0
   12398:	mov	r2, r4
   1239c:	mov	r1, #0
   123a0:	mov	r0, #1
   123a4:	bl	11638 <error@plt>
   123a8:	mov	r2, #5
   123ac:	movw	r1, #49504	; 0xc160
   123b0:	movt	r1, #1
   123b4:	mov	r0, #0
   123b8:	bl	11578 <dcgettext@plt>
   123bc:	mov	r4, r0
   123c0:	mov	r0, fp
   123c4:	bl	19884 <lchmod@@Base+0x2a6c>
   123c8:	mov	r3, r0
   123cc:	mov	r2, r4
   123d0:	mov	r1, #0
   123d4:	mov	r0, #1
   123d8:	bl	11638 <error@plt>
   123dc:	mov	r2, #5
   123e0:	movw	r1, #49536	; 0xc180
   123e4:	movt	r1, #1
   123e8:	mov	r0, #0
   123ec:	bl	11578 <dcgettext@plt>
   123f0:	str	fp, [sp]
   123f4:	ldr	r3, [sp, #20]
   123f8:	mov	r2, r0
   123fc:	mov	r1, #0
   12400:	mov	r0, #1
   12404:	bl	11638 <error@plt>
   12408:	bl	1171c <__errno_location@plt>
   1240c:	ldr	r5, [r0]
   12410:	movw	r3, #53720	; 0xd1d8
   12414:	movt	r3, #2
   12418:	ldr	r3, [r3]
   1241c:	ldr	r2, [r4, r3, lsl #2]
   12420:	mov	r1, #3
   12424:	mov	r0, #0
   12428:	bl	196b8 <lchmod@@Base+0x28a0>
   1242c:	mov	r3, r0
   12430:	movw	r2, #49776	; 0xc270
   12434:	movt	r2, #1
   12438:	mov	r1, r5
   1243c:	mov	r0, #1
   12440:	bl	11638 <error@plt>
   12444:	cmp	r5, #0
   12448:	beq	12460 <__assert_fail@plt+0xb94>
   1244c:	add	r3, r4, r2
   12450:	mov	r2, #4096	; 0x1000
   12454:	ldr	r1, [r3, #-4]
   12458:	mov	r0, r5
   1245c:	bl	129a0 <__assert_fail@plt+0x10d4>
   12460:	movw	r3, #53720	; 0xd1d8
   12464:	movt	r3, #2
   12468:	ldr	r3, [r3]
   1246c:	mov	r1, r7
   12470:	ldr	r0, [r4, r3, lsl #2]
   12474:	bl	1189c <mkfifo@plt>
   12478:	cmp	r0, #0
   1247c:	beq	1232c <__assert_fail@plt+0xa60>
   12480:	bl	1171c <__errno_location@plt>
   12484:	ldr	r5, [r0]
   12488:	movw	r3, #53720	; 0xd1d8
   1248c:	movt	r3, #2
   12490:	ldr	r3, [r3]
   12494:	ldr	r2, [r4, r3, lsl #2]
   12498:	mov	r1, #3
   1249c:	mov	r0, #0
   124a0:	bl	196b8 <lchmod@@Base+0x28a0>
   124a4:	mov	r3, r0
   124a8:	movw	r2, #49776	; 0xc270
   124ac:	movt	r2, #1
   124b0:	mov	r1, r5
   124b4:	mov	r0, #1
   124b8:	bl	11638 <error@plt>
   124bc:	mov	r2, #5
   124c0:	movw	r1, #49560	; 0xc198
   124c4:	movt	r1, #1
   124c8:	mov	r0, #0
   124cc:	bl	11578 <dcgettext@plt>
   124d0:	mov	r5, r0
   124d4:	movw	r3, #53720	; 0xd1d8
   124d8:	movt	r3, #2
   124dc:	ldr	r3, [r3]
   124e0:	add	r3, r3, #1
   124e4:	ldr	r0, [r4, r3, lsl #2]
   124e8:	bl	19884 <lchmod@@Base+0x2a6c>
   124ec:	mov	r3, r0
   124f0:	mov	r2, r5
   124f4:	mov	r1, #0
   124f8:	mov	r0, r1
   124fc:	bl	11638 <error@plt>
   12500:	mov	r0, #1
   12504:	bl	119c8 <__assert_fail@plt+0xfc>
   12508:	bl	1171c <__errno_location@plt>
   1250c:	ldr	r5, [r0]
   12510:	mov	r2, #5
   12514:	movw	r1, #49584	; 0xc1b0
   12518:	movt	r1, #1
   1251c:	mov	r0, #0
   12520:	bl	11578 <dcgettext@plt>
   12524:	mov	r6, r0
   12528:	movw	r3, #53720	; 0xd1d8
   1252c:	movt	r3, #2
   12530:	ldr	r3, [r3]
   12534:	ldr	r1, [r4, r3, lsl #2]
   12538:	mov	r0, #4
   1253c:	bl	19594 <lchmod@@Base+0x277c>
   12540:	mov	r3, r0
   12544:	mov	r2, r6
   12548:	mov	r1, r5
   1254c:	mov	r0, #1
   12550:	bl	11638 <error@plt>
   12554:	sub	r3, r9, r3
   12558:	cmp	r3, #1
   1255c:	bls	120fc <__assert_fail@plt+0x830>
   12560:	cmp	r3, #2
   12564:	bhi	125fc <__assert_fail@plt+0xd30>
   12568:	cmp	sl, #0
   1256c:	beq	12580 <__assert_fail@plt+0xcb4>
   12570:	mov	r0, sl
   12574:	bl	11710 <setfscreatecon@plt>
   12578:	cmp	r0, #0
   1257c:	blt	121bc <__assert_fail@plt+0x8f0>
   12580:	movw	r3, #53720	; 0xd1d8
   12584:	movt	r3, #2
   12588:	ldr	r3, [r3]
   1258c:	add	r3, r3, #1
   12590:	lsl	r2, r3, #2
   12594:	ldr	r3, [r4, r3, lsl #2]
   12598:	ldrb	r3, [r3]
   1259c:	sub	r3, r3, #98	; 0x62
   125a0:	cmp	r3, #19
   125a4:	ldrls	pc, [pc, r3, lsl #2]
   125a8:	b	124bc <__assert_fail@plt+0xbf0>
   125ac:	andeq	r2, r1, r0, lsl #4
   125b0:	strdeq	r2, [r1], -r8
   125b4:			; <UNDEFINED> instruction: 0x000124bc
   125b8:			; <UNDEFINED> instruction: 0x000124bc
   125bc:			; <UNDEFINED> instruction: 0x000124bc
   125c0:			; <UNDEFINED> instruction: 0x000124bc
   125c4:			; <UNDEFINED> instruction: 0x000124bc
   125c8:			; <UNDEFINED> instruction: 0x000124bc
   125cc:			; <UNDEFINED> instruction: 0x000124bc
   125d0:			; <UNDEFINED> instruction: 0x000124bc
   125d4:			; <UNDEFINED> instruction: 0x000124bc
   125d8:			; <UNDEFINED> instruction: 0x000124bc
   125dc:			; <UNDEFINED> instruction: 0x000124bc
   125e0:			; <UNDEFINED> instruction: 0x000124bc
   125e4:	andeq	r2, r1, r4, asr #8
   125e8:			; <UNDEFINED> instruction: 0x000124bc
   125ec:			; <UNDEFINED> instruction: 0x000124bc
   125f0:			; <UNDEFINED> instruction: 0x000124bc
   125f4:			; <UNDEFINED> instruction: 0x000124bc
   125f8:	strdeq	r2, [r1], -r8
   125fc:	mov	r2, #5
   12600:	movw	r1, #49348	; 0xc0c4
   12604:	movt	r1, #1
   12608:	mov	r0, #0
   1260c:	bl	11578 <dcgettext@plt>
   12610:	mov	r5, r0
   12614:	movw	r3, #53720	; 0xd1d8
   12618:	movt	r3, #2
   1261c:	ldr	r3, [r3]
   12620:	add	r3, r3, #2
   12624:	ldr	r0, [r4, r3, lsl #2]
   12628:	bl	19884 <lchmod@@Base+0x2a6c>
   1262c:	mov	r3, r0
   12630:	mov	r2, r5
   12634:	mov	r1, #0
   12638:	mov	r0, r1
   1263c:	bl	11638 <error@plt>
   12640:	movw	r3, #53720	; 0xd1d8
   12644:	movt	r3, #2
   12648:	ldr	r3, [r3]
   1264c:	sub	r9, r9, r3
   12650:	cmp	r9, #4
   12654:	bne	120a8 <__assert_fail@plt+0x7dc>
   12658:	movw	r3, #53728	; 0xd1e0
   1265c:	movt	r3, #2
   12660:	ldr	r4, [r3]
   12664:	mov	r2, #5
   12668:	movw	r1, #49368	; 0xc0d8
   1266c:	movt	r1, #1
   12670:	mov	r0, #0
   12674:	bl	11578 <dcgettext@plt>
   12678:	mov	r3, r0
   1267c:	movw	r2, #50232	; 0xc438
   12680:	movt	r2, #1
   12684:	mov	r1, #1
   12688:	mov	r0, r4
   1268c:	bl	11764 <__fprintf_chk@plt>
   12690:	b	120a8 <__assert_fail@plt+0x7dc>
   12694:	andeq	fp, r1, r8, lsr #19
   12698:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1269c:	strd	r6, [sp, #8]
   126a0:	strd	r8, [sp, #16]
   126a4:	str	lr, [sp, #24]
   126a8:	sub	sp, sp, #116	; 0x74
   126ac:	mov	r5, r1
   126b0:	mov	r3, #0
   126b4:	str	r3, [sp, #4]
   126b8:	str	r3, [sp]
   126bc:	subs	r6, r0, #0
   126c0:	beq	12794 <__assert_fail@plt+0xec8>
   126c4:	mov	r1, #32768	; 0x8000
   126c8:	mov	r0, r5
   126cc:	bl	11644 <open64@plt>
   126d0:	mov	r4, r0
   126d4:	cmn	r0, #1
   126d8:	beq	127ec <__assert_fail@plt+0xf20>
   126dc:	add	r2, sp, #8
   126e0:	mov	r1, r0
   126e4:	mov	r0, #3
   126e8:	bl	115d8 <__fxstat64@plt>
   126ec:	cmp	r0, #0
   126f0:	blt	128d4 <__assert_fail@plt+0x1008>
   126f4:	ldr	r3, [sp, #24]
   126f8:	mov	r2, r5
   126fc:	add	r1, sp, #4
   12700:	mov	r0, r6
   12704:	bl	11494 <selabel_lookup@plt>
   12708:	cmp	r0, #0
   1270c:	blt	12820 <__assert_fail@plt+0xf54>
   12710:	ldr	r0, [sp, #4]
   12714:	bl	11554 <context_new@plt>
   12718:	subs	r8, r0, #0
   1271c:	beq	128c4 <__assert_fail@plt+0xff8>
   12720:	cmn	r4, #1
   12724:	beq	1286c <__assert_fail@plt+0xfa0>
   12728:	mov	r1, sp
   1272c:	mov	r0, r4
   12730:	bl	19b08 <lchmod@@Base+0x2cf0>
   12734:	cmp	r0, #0
   12738:	blt	12934 <__assert_fail@plt+0x1068>
   1273c:	ldr	r0, [sp]
   12740:	bl	11554 <context_new@plt>
   12744:	subs	r7, r0, #0
   12748:	beq	12964 <__assert_fail@plt+0x1098>
   1274c:	mov	r0, r8
   12750:	bl	114dc <context_type_get@plt>
   12754:	subs	r1, r0, #0
   12758:	beq	1298c <__assert_fail@plt+0x10c0>
   1275c:	mov	r0, r7
   12760:	bl	11584 <context_type_set@plt>
   12764:	cmp	r0, #0
   12768:	bne	12838 <__assert_fail@plt+0xf6c>
   1276c:	mov	r0, r7
   12770:	bl	1183c <context_str@plt>
   12774:	subs	r1, r0, #0
   12778:	beq	12838 <__assert_fail@plt+0xf6c>
   1277c:	cmn	r4, #1
   12780:	beq	128b4 <__assert_fail@plt+0xfe8>
   12784:	mov	r0, r4
   12788:	bl	117a0 <fsetfilecon@plt>
   1278c:	mov	r6, r0
   12790:	b	128e0 <__assert_fail@plt+0x1014>
   12794:	mov	r0, sp
   12798:	bl	11824 <getfscreatecon@plt>
   1279c:	cmp	r0, #0
   127a0:	blt	128cc <__assert_fail@plt+0x1000>
   127a4:	ldr	r1, [sp]
   127a8:	cmp	r1, #0
   127ac:	beq	127d8 <__assert_fail@plt+0xf0c>
   127b0:	mov	r0, r5
   127b4:	bl	114f4 <lsetfilecon@plt>
   127b8:	mov	r6, r0
   127bc:	bl	1171c <__errno_location@plt>
   127c0:	mov	r4, r0
   127c4:	ldr	r5, [r0]
   127c8:	ldr	r0, [sp]
   127cc:	bl	1180c <freecon@plt>
   127d0:	str	r5, [r4]
   127d4:	b	12918 <__assert_fail@plt+0x104c>
   127d8:	bl	1171c <__errno_location@plt>
   127dc:	mov	r3, #61	; 0x3d
   127e0:	str	r3, [r0]
   127e4:	mvn	r6, #0
   127e8:	b	12918 <__assert_fail@plt+0x104c>
   127ec:	bl	1171c <__errno_location@plt>
   127f0:	ldr	r3, [r0]
   127f4:	cmp	r3, #40	; 0x28
   127f8:	bne	12940 <__assert_fail@plt+0x1074>
   127fc:	add	r2, sp, #8
   12800:	mov	r1, r5
   12804:	mov	r0, #3
   12808:	bl	11890 <__lxstat64@plt>
   1280c:	cmp	r0, #0
   12810:	bge	126f4 <__assert_fail@plt+0xe28>
   12814:	mov	r7, #0
   12818:	mov	r8, r7
   1281c:	b	12948 <__assert_fail@plt+0x107c>
   12820:	bl	1171c <__errno_location@plt>
   12824:	ldr	r3, [r0]
   12828:	cmp	r3, #2
   1282c:	movne	r7, #0
   12830:	movne	r8, r7
   12834:	beq	12858 <__assert_fail@plt+0xf8c>
   12838:	bl	1171c <__errno_location@plt>
   1283c:	mov	r5, r0
   12840:	ldr	r9, [r0]
   12844:	cmn	r4, #1
   12848:	moveq	r6, r4
   1284c:	beq	128f4 <__assert_fail@plt+0x1028>
   12850:	mvn	r6, #0
   12854:	b	128ec <__assert_fail@plt+0x1020>
   12858:	mov	r3, #61	; 0x3d
   1285c:	str	r3, [r0]
   12860:	mov	r7, #0
   12864:	mov	r8, r7
   12868:	b	12838 <__assert_fail@plt+0xf6c>
   1286c:	mov	r1, sp
   12870:	mov	r0, r5
   12874:	bl	19ae4 <lchmod@@Base+0x2ccc>
   12878:	cmp	r0, #0
   1287c:	blt	1295c <__assert_fail@plt+0x1090>
   12880:	ldr	r0, [sp]
   12884:	bl	11554 <context_new@plt>
   12888:	subs	r7, r0, #0
   1288c:	beq	12978 <__assert_fail@plt+0x10ac>
   12890:	mov	r0, r8
   12894:	bl	114dc <context_type_get@plt>
   12898:	subs	r1, r0, #0
   1289c:	bne	1275c <__assert_fail@plt+0xe90>
   128a0:	bl	1171c <__errno_location@plt>
   128a4:	mov	r5, r0
   128a8:	ldr	r9, [r0]
   128ac:	mov	r6, r4
   128b0:	b	128f4 <__assert_fail@plt+0x1028>
   128b4:	mov	r0, r5
   128b8:	bl	114f4 <lsetfilecon@plt>
   128bc:	mov	r4, r0
   128c0:	b	12948 <__assert_fail@plt+0x107c>
   128c4:	mov	r7, r8
   128c8:	b	12838 <__assert_fail@plt+0xf6c>
   128cc:	mvn	r6, #0
   128d0:	b	12918 <__assert_fail@plt+0x104c>
   128d4:	mov	r7, #0
   128d8:	mov	r8, r7
   128dc:	mvn	r6, #0
   128e0:	bl	1171c <__errno_location@plt>
   128e4:	mov	r5, r0
   128e8:	ldr	r9, [r0]
   128ec:	mov	r0, r4
   128f0:	bl	11884 <close@plt>
   128f4:	mov	r0, r8
   128f8:	bl	1168c <context_free@plt>
   128fc:	mov	r0, r7
   12900:	bl	1168c <context_free@plt>
   12904:	ldr	r0, [sp, #4]
   12908:	bl	1180c <freecon@plt>
   1290c:	ldr	r0, [sp]
   12910:	bl	1180c <freecon@plt>
   12914:	str	r9, [r5]
   12918:	mov	r0, r6
   1291c:	add	sp, sp, #116	; 0x74
   12920:	ldrd	r4, [sp]
   12924:	ldrd	r6, [sp, #8]
   12928:	ldrd	r8, [sp, #16]
   1292c:	add	sp, sp, #24
   12930:	pop	{pc}		; (ldr pc, [sp], #4)
   12934:	mov	r7, #0
   12938:	mvn	r6, #0
   1293c:	b	128e0 <__assert_fail@plt+0x1014>
   12940:	mov	r7, #0
   12944:	mov	r8, r7
   12948:	bl	1171c <__errno_location@plt>
   1294c:	mov	r5, r0
   12950:	ldr	r9, [r0]
   12954:	mov	r6, r4
   12958:	b	128f4 <__assert_fail@plt+0x1028>
   1295c:	mov	r7, #0
   12960:	b	12948 <__assert_fail@plt+0x107c>
   12964:	bl	1171c <__errno_location@plt>
   12968:	mov	r5, r0
   1296c:	ldr	r9, [r0]
   12970:	mvn	r6, #0
   12974:	b	128ec <__assert_fail@plt+0x1020>
   12978:	bl	1171c <__errno_location@plt>
   1297c:	mov	r5, r0
   12980:	ldr	r9, [r0]
   12984:	mov	r6, r4
   12988:	b	128f4 <__assert_fail@plt+0x1028>
   1298c:	bl	1171c <__errno_location@plt>
   12990:	mov	r5, r0
   12994:	ldr	r9, [r0]
   12998:	mvn	r6, #0
   1299c:	b	128ec <__assert_fail@plt+0x1020>
   129a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   129a4:	strd	r6, [sp, #8]
   129a8:	strd	r8, [sp, #16]
   129ac:	str	lr, [sp, #24]
   129b0:	sub	sp, sp, #20
   129b4:	mov	r6, r0
   129b8:	mov	r4, r1
   129bc:	mov	r5, r2
   129c0:	mov	r3, #0
   129c4:	str	r3, [sp, #12]
   129c8:	str	r3, [sp, #8]
   129cc:	ldrb	r3, [r1]
   129d0:	cmp	r3, #47	; 0x2f
   129d4:	beq	12b48 <__assert_fail@plt+0x127c>
   129d8:	mov	r1, #2
   129dc:	mov	r0, r4
   129e0:	bl	12d28 <__assert_fail@plt+0x145c>
   129e4:	subs	r4, r0, #0
   129e8:	beq	12b84 <__assert_fail@plt+0x12b8>
   129ec:	mov	r7, r4
   129f0:	mov	r3, r5
   129f4:	mov	r2, r4
   129f8:	add	r1, sp, #12
   129fc:	mov	r0, r6
   12a00:	bl	11494 <selabel_lookup@plt>
   12a04:	cmp	r0, #0
   12a08:	blt	12b50 <__assert_fail@plt+0x1284>
   12a0c:	mov	r3, #0
   12a10:	str	r3, [sp]
   12a14:	str	r3, [sp, #4]
   12a18:	mov	r0, r4
   12a1c:	bl	13598 <__assert_fail@plt+0x1ccc>
   12a20:	mov	r4, r0
   12a24:	mov	r0, sp
   12a28:	bl	11614 <getcon@plt>
   12a2c:	cmp	r0, #0
   12a30:	blt	12bd0 <__assert_fail@plt+0x1304>
   12a34:	add	r1, sp, #4
   12a38:	mov	r0, r4
   12a3c:	bl	19ac0 <lchmod@@Base+0x2ca8>
   12a40:	cmp	r0, #0
   12a44:	blt	12bd0 <__assert_fail@plt+0x1304>
   12a48:	mov	r0, r5
   12a4c:	bl	118a8 <mode_to_security_class@plt>
   12a50:	subs	r2, r0, #0
   12a54:	beq	12bd0 <__assert_fail@plt+0x1304>
   12a58:	add	r3, sp, #8
   12a5c:	ldr	r1, [sp, #4]
   12a60:	ldr	r0, [sp]
   12a64:	bl	117dc <security_compute_create@plt>
   12a68:	mov	r6, r0
   12a6c:	bl	1171c <__errno_location@plt>
   12a70:	mov	r5, r0
   12a74:	ldr	r8, [r0]
   12a78:	mov	r0, r4
   12a7c:	bl	13780 <__assert_fail@plt+0x1eb4>
   12a80:	ldr	r0, [sp]
   12a84:	bl	1180c <freecon@plt>
   12a88:	ldr	r0, [sp, #4]
   12a8c:	bl	1180c <freecon@plt>
   12a90:	str	r8, [r5]
   12a94:	cmp	r6, #0
   12a98:	blt	12b94 <__assert_fail@plt+0x12c8>
   12a9c:	ldr	r0, [sp, #12]
   12aa0:	bl	11554 <context_new@plt>
   12aa4:	subs	r4, r0, #0
   12aa8:	beq	12ba4 <__assert_fail@plt+0x12d8>
   12aac:	ldr	r0, [sp, #8]
   12ab0:	bl	11554 <context_new@plt>
   12ab4:	subs	r5, r0, #0
   12ab8:	beq	12bb0 <__assert_fail@plt+0x12e4>
   12abc:	mov	r0, r4
   12ac0:	bl	114dc <context_type_get@plt>
   12ac4:	subs	r1, r0, #0
   12ac8:	beq	12bb8 <__assert_fail@plt+0x12ec>
   12acc:	mov	r0, r5
   12ad0:	bl	11584 <context_type_set@plt>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12bc0 <__assert_fail@plt+0x12f4>
   12adc:	mov	r0, r5
   12ae0:	bl	1183c <context_str@plt>
   12ae4:	cmp	r0, #0
   12ae8:	beq	12bc8 <__assert_fail@plt+0x12fc>
   12aec:	bl	11710 <setfscreatecon@plt>
   12af0:	mov	r9, r0
   12af4:	bl	1171c <__errno_location@plt>
   12af8:	mov	r6, r0
   12afc:	ldr	r8, [r0]
   12b00:	mov	r0, r4
   12b04:	bl	1168c <context_free@plt>
   12b08:	mov	r0, r5
   12b0c:	bl	1168c <context_free@plt>
   12b10:	ldr	r0, [sp, #12]
   12b14:	bl	1180c <freecon@plt>
   12b18:	ldr	r0, [sp, #8]
   12b1c:	bl	1180c <freecon@plt>
   12b20:	mov	r0, r7
   12b24:	bl	13780 <__assert_fail@plt+0x1eb4>
   12b28:	str	r8, [r6]
   12b2c:	mov	r0, r9
   12b30:	add	sp, sp, #20
   12b34:	ldrd	r4, [sp]
   12b38:	ldrd	r6, [sp, #8]
   12b3c:	ldrd	r8, [sp, #16]
   12b40:	add	sp, sp, #24
   12b44:	pop	{pc}		; (ldr pc, [sp], #4)
   12b48:	mov	r7, #0
   12b4c:	b	129f0 <__assert_fail@plt+0x1124>
   12b50:	bl	1171c <__errno_location@plt>
   12b54:	ldr	r3, [r0]
   12b58:	cmp	r3, #2
   12b5c:	movne	r5, #0
   12b60:	movne	r4, r5
   12b64:	mvnne	r9, #0
   12b68:	bne	12af4 <__assert_fail@plt+0x1228>
   12b6c:	mov	r3, #61	; 0x3d
   12b70:	str	r3, [r0]
   12b74:	mov	r5, #0
   12b78:	mov	r4, r5
   12b7c:	mvn	r9, #0
   12b80:	b	12af4 <__assert_fail@plt+0x1228>
   12b84:	mov	r7, r4
   12b88:	mov	r5, r4
   12b8c:	mvn	r9, #0
   12b90:	b	12af4 <__assert_fail@plt+0x1228>
   12b94:	mov	r5, #0
   12b98:	mov	r4, r5
   12b9c:	mvn	r9, #0
   12ba0:	b	12af4 <__assert_fail@plt+0x1228>
   12ba4:	mov	r5, r4
   12ba8:	mvn	r9, #0
   12bac:	b	12af4 <__assert_fail@plt+0x1228>
   12bb0:	mvn	r9, #0
   12bb4:	b	12af4 <__assert_fail@plt+0x1228>
   12bb8:	mvn	r9, #0
   12bbc:	b	12af4 <__assert_fail@plt+0x1228>
   12bc0:	mvn	r9, #0
   12bc4:	b	12af4 <__assert_fail@plt+0x1228>
   12bc8:	mvn	r9, #0
   12bcc:	b	12af4 <__assert_fail@plt+0x1228>
   12bd0:	bl	1171c <__errno_location@plt>
   12bd4:	mov	r5, r0
   12bd8:	ldr	r6, [r0]
   12bdc:	mov	r0, r4
   12be0:	bl	13780 <__assert_fail@plt+0x1eb4>
   12be4:	ldr	r0, [sp]
   12be8:	bl	1180c <freecon@plt>
   12bec:	ldr	r0, [sp, #4]
   12bf0:	bl	1180c <freecon@plt>
   12bf4:	str	r6, [r5]
   12bf8:	mov	r5, #0
   12bfc:	mov	r4, r5
   12c00:	mvn	r9, #0
   12c04:	b	12af4 <__assert_fail@plt+0x1228>
   12c08:	strd	r4, [sp, #-20]!	; 0xffffffec
   12c0c:	strd	r6, [sp, #8]
   12c10:	str	lr, [sp, #16]
   12c14:	sub	sp, sp, #12
   12c18:	mov	r6, r0
   12c1c:	mov	r0, r1
   12c20:	mov	r4, r2
   12c24:	ldrb	r3, [r1]
   12c28:	cmp	r3, #47	; 0x2f
   12c2c:	moveq	r7, #0
   12c30:	bne	12c60 <__assert_fail@plt+0x1394>
   12c34:	cmp	r4, #0
   12c38:	beq	12c7c <__assert_fail@plt+0x13b0>
   12c3c:	str	r0, [sp]
   12c40:	mov	r5, #0
   12c44:	str	r5, [sp, #4]
   12c48:	mov	r2, r5
   12c4c:	mov	r1, #16
   12c50:	mov	r0, sp
   12c54:	bl	1a614 <lchmod@@Base+0x37fc>
   12c58:	mov	r4, r0
   12c5c:	b	12cb4 <__assert_fail@plt+0x13e8>
   12c60:	mov	r1, #2
   12c64:	bl	12d28 <__assert_fail@plt+0x145c>
   12c68:	cmp	r0, #0
   12c6c:	movne	r7, r0
   12c70:	bne	12c34 <__assert_fail@plt+0x1368>
   12c74:	mov	r5, #0
   12c78:	b	12d10 <__assert_fail@plt+0x1444>
   12c7c:	mov	r1, r0
   12c80:	mov	r0, r6
   12c84:	bl	12698 <__assert_fail@plt+0xdcc>
   12c88:	adds	r5, r0, #1
   12c8c:	movne	r5, #1
   12c90:	bl	1171c <__errno_location@plt>
   12c94:	mov	r4, r0
   12c98:	ldr	r6, [r0]
   12c9c:	mov	r0, r7
   12ca0:	bl	13780 <__assert_fail@plt+0x1eb4>
   12ca4:	str	r6, [r4]
   12ca8:	b	12d10 <__assert_fail@plt+0x1444>
   12cac:	bl	1171c <__errno_location@plt>
   12cb0:	ldr	r5, [r0]
   12cb4:	mov	r0, r4
   12cb8:	bl	15328 <__assert_fail@plt+0x3a5c>
   12cbc:	cmp	r0, #0
   12cc0:	beq	12cdc <__assert_fail@plt+0x1410>
   12cc4:	ldr	r1, [r4, #24]
   12cc8:	mov	r0, r6
   12ccc:	bl	12698 <__assert_fail@plt+0xdcc>
   12cd0:	cmp	r0, #0
   12cd4:	bge	12cb4 <__assert_fail@plt+0x13e8>
   12cd8:	b	12cac <__assert_fail@plt+0x13e0>
   12cdc:	bl	1171c <__errno_location@plt>
   12ce0:	mov	r6, r0
   12ce4:	ldr	r3, [r0]
   12ce8:	cmp	r3, #0
   12cec:	movne	r5, r3
   12cf0:	mov	r0, r4
   12cf4:	bl	151ac <__assert_fail@plt+0x38e0>
   12cf8:	cmp	r0, #0
   12cfc:	ldrne	r5, [r6]
   12d00:	mov	r0, r7
   12d04:	bl	13780 <__assert_fail@plt+0x1eb4>
   12d08:	clz	r5, r5
   12d0c:	lsr	r5, r5, #5
   12d10:	mov	r0, r5
   12d14:	add	sp, sp, #12
   12d18:	ldrd	r4, [sp]
   12d1c:	ldrd	r6, [sp, #8]
   12d20:	add	sp, sp, #16
   12d24:	pop	{pc}		; (ldr pc, [sp], #4)
   12d28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12d2c:	strd	r6, [sp, #8]
   12d30:	strd	r8, [sp, #16]
   12d34:	strd	sl, [sp, #24]
   12d38:	str	lr, [sp, #32]
   12d3c:	sub	sp, sp, #3232	; 0xca0
   12d40:	sub	sp, sp, #12
   12d44:	and	sl, r1, #3
   12d48:	sub	r3, sl, #1
   12d4c:	tst	r3, sl
   12d50:	bne	12df0 <__assert_fail@plt+0x1524>
   12d54:	mov	r8, r0
   12d58:	mov	r5, r1
   12d5c:	cmp	r0, #0
   12d60:	beq	12e04 <__assert_fail@plt+0x1538>
   12d64:	ldrb	r2, [r0]
   12d68:	cmp	r2, #0
   12d6c:	beq	12e18 <__assert_fail@plt+0x154c>
   12d70:	add	r3, sp, #152	; 0x98
   12d74:	str	r3, [sp, #144]	; 0x90
   12d78:	mov	r3, #1024	; 0x400
   12d7c:	str	r3, [sp, #148]	; 0x94
   12d80:	add	r1, sp, #1184	; 0x4a0
   12d84:	str	r1, [sp, #1176]	; 0x498
   12d88:	str	r3, [sp, #1180]	; 0x49c
   12d8c:	add	r1, sp, #2208	; 0x8a0
   12d90:	add	r1, r1, #8
   12d94:	str	r1, [sp, #2208]	; 0x8a0
   12d98:	str	r3, [sp, #2212]	; 0x8a4
   12d9c:	cmp	r2, #47	; 0x2f
   12da0:	addne	r4, sp, #2208	; 0x8a0
   12da4:	addne	r4, r4, #8
   12da8:	beq	12e48 <__assert_fail@plt+0x157c>
   12dac:	ldr	r1, [sp, #2212]	; 0x8a4
   12db0:	mov	r0, r4
   12db4:	bl	116bc <getcwd@plt>
   12db8:	cmp	r0, #0
   12dbc:	bne	12e30 <__assert_fail@plt+0x1564>
   12dc0:	bl	1171c <__errno_location@plt>
   12dc4:	ldr	r3, [r0]
   12dc8:	cmp	r3, #12
   12dcc:	beq	12e2c <__assert_fail@plt+0x1560>
   12dd0:	cmp	r3, #34	; 0x22
   12dd4:	bne	133a4 <__assert_fail@plt+0x1ad8>
   12dd8:	add	r0, sp, #2208	; 0x8a0
   12ddc:	bl	19900 <lchmod@@Base+0x2ae8>
   12de0:	cmp	r0, #0
   12de4:	beq	12e2c <__assert_fail@plt+0x1560>
   12de8:	ldr	r4, [sp, #2208]	; 0x8a0
   12dec:	b	12dac <__assert_fail@plt+0x14e0>
   12df0:	bl	1171c <__errno_location@plt>
   12df4:	mov	r3, #22
   12df8:	str	r3, [r0]
   12dfc:	mov	r0, #0
   12e00:	b	133f8 <__assert_fail@plt+0x1b2c>
   12e04:	bl	1171c <__errno_location@plt>
   12e08:	mov	r3, #22
   12e0c:	str	r3, [r0]
   12e10:	mov	r0, r8
   12e14:	b	133f8 <__assert_fail@plt+0x1b2c>
   12e18:	bl	1171c <__errno_location@plt>
   12e1c:	mov	r3, #2
   12e20:	str	r3, [r0]
   12e24:	mov	r0, #0
   12e28:	b	133f8 <__assert_fail@plt+0x1b2c>
   12e2c:	bl	1a5d0 <lchmod@@Base+0x37b8>
   12e30:	mov	r1, #0
   12e34:	mov	r0, r4
   12e38:	bl	115b4 <rawmemchr@plt>
   12e3c:	mov	fp, r4
   12e40:	mov	r4, r0
   12e44:	b	12e5c <__assert_fail@plt+0x1590>
   12e48:	mov	r3, #47	; 0x2f
   12e4c:	strb	r3, [sp, #2216]	; 0x8a8
   12e50:	add	fp, sp, #2208	; 0x8a0
   12e54:	add	fp, fp, #8
   12e58:	add	r4, fp, #1
   12e5c:	and	r3, r5, #4
   12e60:	str	r3, [sp, #12]
   12e64:	mov	r3, #0
   12e68:	str	r3, [sp, #16]
   12e6c:	str	r3, [sp, #20]
   12e70:	str	r3, [sp, #24]
   12e74:	movw	r3, #49344	; 0xc0c0
   12e78:	movt	r3, #1
   12e7c:	str	r3, [sp, #28]
   12e80:	b	1321c <__assert_fail@plt+0x1950>
   12e84:	ldrb	r3, [r8, #1]
   12e88:	cmp	r3, #46	; 0x2e
   12e8c:	bne	13290 <__assert_fail@plt+0x19c4>
   12e90:	add	r3, fp, #1
   12e94:	cmp	r4, r3
   12e98:	bls	13218 <__assert_fail@plt+0x194c>
   12e9c:	sub	r3, r4, #1
   12ea0:	cmp	fp, r3
   12ea4:	bcs	1335c <__assert_fail@plt+0x1a90>
   12ea8:	ldrb	r2, [r4, #-2]
   12eac:	cmp	r2, #47	; 0x2f
   12eb0:	moveq	r4, r3
   12eb4:	beq	13218 <__assert_fail@plt+0x194c>
   12eb8:	sub	r3, r4, #2
   12ebc:	mov	r1, fp
   12ec0:	mov	r4, r3
   12ec4:	cmp	r3, r1
   12ec8:	beq	13218 <__assert_fail@plt+0x194c>
   12ecc:	ldrb	r2, [r3, #-1]!
   12ed0:	cmp	r2, #47	; 0x2f
   12ed4:	beq	13218 <__assert_fail@plt+0x194c>
   12ed8:	b	12ec0 <__assert_fail@plt+0x15f4>
   12edc:	bl	1a5d0 <lchmod@@Base+0x37b8>
   12ee0:	ldr	r9, [sp, #1176]	; 0x498
   12ee4:	ldr	r6, [sp, #1180]	; 0x49c
   12ee8:	sub	r6, r6, #1
   12eec:	mov	r2, r6
   12ef0:	mov	r1, r9
   12ef4:	mov	r0, fp
   12ef8:	bl	115e4 <readlink@plt>
   12efc:	cmp	r6, r0
   12f00:	bgt	12f1c <__assert_fail@plt+0x1650>
   12f04:	add	r0, sp, #1168	; 0x490
   12f08:	add	r0, r0, #8
   12f0c:	bl	19900 <lchmod@@Base+0x2ae8>
   12f10:	cmp	r0, #0
   12f14:	bne	12ee0 <__assert_fail@plt+0x1614>
   12f18:	bl	1a5d0 <lchmod@@Base+0x37b8>
   12f1c:	mov	r7, r0
   12f20:	cmp	r0, #0
   12f24:	blt	13310 <__assert_fail@plt+0x1a44>
   12f28:	ldr	r3, [sp, #24]
   12f2c:	cmp	r3, #19
   12f30:	addle	r3, r3, #1
   12f34:	strle	r3, [sp, #24]
   12f38:	ble	13020 <__assert_fail@plt+0x1754>
   12f3c:	ldrb	r3, [r8]
   12f40:	cmp	r3, #0
   12f44:	beq	13020 <__assert_fail@plt+0x1754>
   12f48:	sub	r6, r8, r5
   12f4c:	mov	r3, #0
   12f50:	strb	r3, [r4, r6]
   12f54:	ldrb	r1, [fp]
   12f58:	add	r2, sp, #40	; 0x28
   12f5c:	ldr	r3, [sp, #28]
   12f60:	cmp	r1, #0
   12f64:	movne	r3, fp
   12f68:	mov	r1, r3
   12f6c:	mov	r0, #3
   12f70:	bl	11854 <__xstat64@plt>
   12f74:	cmp	r0, #0
   12f78:	bne	12fc0 <__assert_fail@plt+0x16f4>
   12f7c:	ldrb	r3, [r8]
   12f80:	strb	r3, [r4, r6]
   12f84:	ldr	r3, [sp, #16]
   12f88:	cmp	r3, #0
   12f8c:	beq	12fd8 <__assert_fail@plt+0x170c>
   12f90:	add	r2, sp, #40	; 0x28
   12f94:	mov	r1, r8
   12f98:	ldr	r6, [sp, #16]
   12f9c:	mov	r0, r6
   12fa0:	bl	13730 <__assert_fail@plt+0x1e64>
   12fa4:	cmp	r0, #0
   12fa8:	beq	13010 <__assert_fail@plt+0x1744>
   12fac:	cmp	sl, #2
   12fb0:	beq	13218 <__assert_fail@plt+0x194c>
   12fb4:	bl	1171c <__errno_location@plt>
   12fb8:	mov	r3, #40	; 0x28
   12fbc:	str	r3, [r0]
   12fc0:	mov	r6, #1
   12fc4:	ldr	r0, [sp, #16]
   12fc8:	cmp	r0, #0
   12fcc:	beq	133ac <__assert_fail@plt+0x1ae0>
   12fd0:	bl	16718 <__assert_fail@plt+0x4e4c>
   12fd4:	b	133ac <__assert_fail@plt+0x1ae0>
   12fd8:	movw	r3, #27936	; 0x6d20
   12fdc:	movt	r3, #1
   12fe0:	str	r3, [sp]
   12fe4:	movw	r3, #27836	; 0x6cbc
   12fe8:	movt	r3, #1
   12fec:	movw	r2, #27764	; 0x6c74
   12ff0:	movt	r2, #1
   12ff4:	mov	r1, #0
   12ff8:	mov	r0, #7
   12ffc:	bl	1654c <__assert_fail@plt+0x4c80>
   13000:	subs	r3, r0, #0
   13004:	str	r3, [sp, #16]
   13008:	bne	12f90 <__assert_fail@plt+0x16c4>
   1300c:	bl	1a5d0 <lchmod@@Base+0x37b8>
   13010:	add	r2, sp, #40	; 0x28
   13014:	mov	r1, r8
   13018:	mov	r0, r6
   1301c:	bl	136ac <__assert_fail@plt+0x1de0>
   13020:	mov	r3, #0
   13024:	strb	r3, [r9, r7]
   13028:	ldr	r8, [sp, #144]	; 0x90
   1302c:	ldr	r3, [sp, #20]
   13030:	cmp	r3, #0
   13034:	beq	13440 <__assert_fail@plt+0x1b74>
   13038:	sub	r3, r5, r8
   1303c:	str	r3, [sp, #36]	; 0x24
   13040:	mov	r0, r5
   13044:	bl	116e0 <strlen@plt>
   13048:	str	r0, [sp, #32]
   1304c:	add	r6, r7, r0
   13050:	ldr	r3, [sp, #148]	; 0x94
   13054:	cmp	r3, r6
   13058:	bhi	13088 <__assert_fail@plt+0x17bc>
   1305c:	add	r0, sp, #144	; 0x90
   13060:	bl	19984 <lchmod@@Base+0x2b6c>
   13064:	cmp	r0, #0
   13068:	beq	13100 <__assert_fail@plt+0x1834>
   1306c:	ldr	r3, [sp, #148]	; 0x94
   13070:	cmp	r3, r6
   13074:	bls	1305c <__assert_fail@plt+0x1790>
   13078:	ldr	r8, [sp, #144]	; 0x90
   1307c:	ldr	r3, [sp, #20]
   13080:	cmp	r3, #0
   13084:	beq	13090 <__assert_fail@plt+0x17c4>
   13088:	ldr	r3, [sp, #36]	; 0x24
   1308c:	add	r5, r8, r3
   13090:	ldr	r3, [sp, #32]
   13094:	add	r2, r3, #1
   13098:	mov	r1, r5
   1309c:	add	r0, r8, r7
   130a0:	bl	11500 <memmove@plt>
   130a4:	mov	r2, r7
   130a8:	mov	r1, r9
   130ac:	mov	r0, r8
   130b0:	bl	11530 <memcpy@plt>
   130b4:	mov	r5, r0
   130b8:	ldrb	r3, [r9]
   130bc:	cmp	r3, #47	; 0x2f
   130c0:	beq	13104 <__assert_fail@plt+0x1838>
   130c4:	add	r3, fp, #1
   130c8:	cmp	r4, r3
   130cc:	movls	r3, #1
   130d0:	strls	r3, [sp, #20]
   130d4:	bls	13218 <__assert_fail@plt+0x194c>
   130d8:	sub	r3, r4, #1
   130dc:	cmp	r3, fp
   130e0:	bls	13364 <__assert_fail@plt+0x1a98>
   130e4:	ldrb	r2, [r4, #-2]
   130e8:	cmp	r2, #47	; 0x2f
   130ec:	bne	13118 <__assert_fail@plt+0x184c>
   130f0:	mov	r4, r3
   130f4:	mov	r3, #1
   130f8:	str	r3, [sp, #20]
   130fc:	b	13218 <__assert_fail@plt+0x194c>
   13100:	bl	1a5d0 <lchmod@@Base+0x37b8>
   13104:	mov	r4, fp
   13108:	strb	r3, [r4], #1
   1310c:	mov	r3, #1
   13110:	str	r3, [sp, #20]
   13114:	b	13218 <__assert_fail@plt+0x194c>
   13118:	sub	r3, r4, #2
   1311c:	mov	r1, fp
   13120:	mov	r4, r3
   13124:	cmp	r3, r1
   13128:	beq	13374 <__assert_fail@plt+0x1aa8>
   1312c:	ldrb	r2, [r3, #-1]!
   13130:	cmp	r2, #47	; 0x2f
   13134:	bne	13120 <__assert_fail@plt+0x1854>
   13138:	mov	r3, #1
   1313c:	str	r3, [sp, #20]
   13140:	b	13218 <__assert_fail@plt+0x194c>
   13144:	mov	r3, r1
   13148:	add	r1, r3, #1
   1314c:	ldrb	r2, [r3, #1]
   13150:	cmp	r2, #47	; 0x2f
   13154:	beq	13144 <__assert_fail@plt+0x1878>
   13158:	add	r3, r3, #2
   1315c:	cmp	r2, #0
   13160:	beq	13190 <__assert_fail@plt+0x18c4>
   13164:	cmp	r2, #46	; 0x2e
   13168:	bne	131c0 <__assert_fail@plt+0x18f4>
   1316c:	ldrb	r2, [r1, #1]
   13170:	cmp	r2, #0
   13174:	beq	13190 <__assert_fail@plt+0x18c4>
   13178:	cmp	r2, #46	; 0x2e
   1317c:	bne	1331c <__assert_fail@plt+0x1a50>
   13180:	ldrb	r2, [r1, #2]
   13184:	cmp	r2, #47	; 0x2f
   13188:	cmpne	r2, #0
   1318c:	bne	1331c <__assert_fail@plt+0x1a50>
   13190:	movw	r3, #49756	; 0xc25c
   13194:	movt	r3, #1
   13198:	ldrh	r3, [r3]
   1319c:	strh	r3, [r4]
   131a0:	mov	r3, #512	; 0x200
   131a4:	mov	r2, #0
   131a8:	mov	r1, fp
   131ac:	mvn	r0, #99	; 0x63
   131b0:	bl	11518 <faccessat@plt>
   131b4:	adds	r6, r0, #0
   131b8:	movne	r6, #1
   131bc:	b	131dc <__assert_fail@plt+0x1910>
   131c0:	ldr	r3, [sp, #12]
   131c4:	cmp	r3, #0
   131c8:	bne	1332c <__assert_fail@plt+0x1a60>
   131cc:	bl	1171c <__errno_location@plt>
   131d0:	ldr	r6, [r0]
   131d4:	subs	r6, r6, #22
   131d8:	movne	r6, #1
   131dc:	cmp	r6, #0
   131e0:	beq	13218 <__assert_fail@plt+0x194c>
   131e4:	cmp	sl, #1
   131e8:	bne	12fc4 <__assert_fail@plt+0x16f8>
   131ec:	bl	1171c <__errno_location@plt>
   131f0:	ldr	r3, [r0]
   131f4:	cmp	r3, #2
   131f8:	bne	12fc4 <__assert_fail@plt+0x16f8>
   131fc:	movw	r1, #49756	; 0xc25c
   13200:	movt	r1, #1
   13204:	mov	r0, r5
   13208:	bl	118c0 <strspn@plt>
   1320c:	ldrb	r3, [r5, r0]
   13210:	cmp	r3, #0
   13214:	bne	12fc4 <__assert_fail@plt+0x16f8>
   13218:	mov	r8, r5
   1321c:	ldrb	r3, [r8]
   13220:	cmp	r3, #0
   13224:	beq	13380 <__assert_fail@plt+0x1ab4>
   13228:	cmp	r3, #47	; 0x2f
   1322c:	bne	13248 <__assert_fail@plt+0x197c>
   13230:	ldrb	r3, [r8, #1]!
   13234:	cmp	r3, #47	; 0x2f
   13238:	beq	13230 <__assert_fail@plt+0x1964>
   1323c:	cmp	r3, #47	; 0x2f
   13240:	cmpne	r3, #0
   13244:	beq	13380 <__assert_fail@plt+0x1ab4>
   13248:	mov	r5, r8
   1324c:	ldrb	r2, [r5, #1]!
   13250:	cmp	r2, #0
   13254:	cmpne	r2, #47	; 0x2f
   13258:	bne	1324c <__assert_fail@plt+0x1980>
   1325c:	subs	r6, r5, r8
   13260:	beq	13380 <__assert_fail@plt+0x1ab4>
   13264:	cmp	r3, #46	; 0x2e
   13268:	movne	r2, #0
   1326c:	moveq	r2, #1
   13270:	cmp	r6, #1
   13274:	cmpeq	r3, #46	; 0x2e
   13278:	beq	13218 <__assert_fail@plt+0x194c>
   1327c:	cmp	r6, #2
   13280:	movne	r3, #0
   13284:	andeq	r3, r2, #1
   13288:	cmp	r3, #0
   1328c:	bne	12e84 <__assert_fail@plt+0x15b8>
   13290:	ldrb	r3, [r4, #-1]
   13294:	cmp	r3, #47	; 0x2f
   13298:	beq	132a4 <__assert_fail@plt+0x19d8>
   1329c:	mov	r3, #47	; 0x2f
   132a0:	strb	r3, [r4], #1
   132a4:	add	r7, r6, #2
   132a8:	ldr	r3, [sp, #2212]	; 0x8a4
   132ac:	add	r3, fp, r3
   132b0:	sub	r3, r3, r4
   132b4:	cmp	r3, r7
   132b8:	bcs	132e8 <__assert_fail@plt+0x1a1c>
   132bc:	sub	r9, r4, fp
   132c0:	add	r0, sp, #2208	; 0x8a0
   132c4:	bl	19984 <lchmod@@Base+0x2b6c>
   132c8:	cmp	r0, #0
   132cc:	beq	12edc <__assert_fail@plt+0x1610>
   132d0:	ldr	fp, [sp, #2208]	; 0x8a0
   132d4:	add	r4, fp, r9
   132d8:	ldr	r3, [sp, #2212]	; 0x8a4
   132dc:	sub	r3, r3, r9
   132e0:	cmp	r3, r7
   132e4:	bcc	132bc <__assert_fail@plt+0x19f0>
   132e8:	mov	r2, r6
   132ec:	mov	r1, r8
   132f0:	mov	r0, r4
   132f4:	bl	11698 <mempcpy@plt>
   132f8:	mov	r4, r0
   132fc:	mov	r3, #0
   13300:	strb	r3, [r0]
   13304:	ldr	r3, [sp, #12]
   13308:	cmp	r3, #0
   1330c:	beq	12ee0 <__assert_fail@plt+0x1614>
   13310:	cmp	sl, #2
   13314:	movne	r3, r5
   13318:	beq	13218 <__assert_fail@plt+0x194c>
   1331c:	ldrb	r2, [r3]
   13320:	cmp	r2, #47	; 0x2f
   13324:	beq	13148 <__assert_fail@plt+0x187c>
   13328:	b	131c0 <__assert_fail@plt+0x18f4>
   1332c:	ldrb	r3, [r5]
   13330:	cmp	r3, #0
   13334:	movne	r6, #0
   13338:	bne	131dc <__assert_fail@plt+0x1910>
   1333c:	mov	r3, #512	; 0x200
   13340:	mov	r2, #0
   13344:	mov	r1, fp
   13348:	mvn	r0, #99	; 0x63
   1334c:	bl	11518 <faccessat@plt>
   13350:	adds	r6, r0, #0
   13354:	movne	r6, #1
   13358:	b	131dc <__assert_fail@plt+0x1910>
   1335c:	mov	r4, r3
   13360:	b	13218 <__assert_fail@plt+0x194c>
   13364:	mov	r4, r3
   13368:	mov	r3, #1
   1336c:	str	r3, [sp, #20]
   13370:	b	13218 <__assert_fail@plt+0x194c>
   13374:	mov	r3, #1
   13378:	str	r3, [sp, #20]
   1337c:	b	13218 <__assert_fail@plt+0x194c>
   13380:	add	r3, fp, #1
   13384:	cmp	r4, r3
   13388:	movls	r6, #0
   1338c:	bls	12fc4 <__assert_fail@plt+0x16f8>
   13390:	ldrb	r3, [r4, #-1]
   13394:	cmp	r3, #47	; 0x2f
   13398:	subeq	r4, r4, #1
   1339c:	mov	r6, #0
   133a0:	b	12fc4 <__assert_fail@plt+0x16f8>
   133a4:	mov	fp, r4
   133a8:	mov	r6, #1
   133ac:	ldr	r0, [sp, #144]	; 0x90
   133b0:	add	r3, sp, #152	; 0x98
   133b4:	cmp	r0, r3
   133b8:	beq	133c0 <__assert_fail@plt+0x1af4>
   133bc:	bl	13780 <__assert_fail@plt+0x1eb4>
   133c0:	ldr	r0, [sp, #1176]	; 0x498
   133c4:	add	r3, sp, #1184	; 0x4a0
   133c8:	cmp	r0, r3
   133cc:	beq	133d4 <__assert_fail@plt+0x1b08>
   133d0:	bl	13780 <__assert_fail@plt+0x1eb4>
   133d4:	cmp	r6, #0
   133d8:	bne	13418 <__assert_fail@plt+0x1b4c>
   133dc:	mov	r3, #0
   133e0:	strb	r3, [r4], #1
   133e4:	sub	r1, r4, fp
   133e8:	add	r0, sp, #2208	; 0x8a0
   133ec:	bl	198a4 <lchmod@@Base+0x2a8c>
   133f0:	cmp	r0, #0
   133f4:	beq	1343c <__assert_fail@plt+0x1b70>
   133f8:	add	sp, sp, #3232	; 0xca0
   133fc:	add	sp, sp, #12
   13400:	ldrd	r4, [sp]
   13404:	ldrd	r6, [sp, #8]
   13408:	ldrd	r8, [sp, #16]
   1340c:	ldrd	sl, [sp, #24]
   13410:	add	sp, sp, #32
   13414:	pop	{pc}		; (ldr pc, [sp], #4)
   13418:	ldr	r0, [sp, #2208]	; 0x8a0
   1341c:	add	r3, sp, #2208	; 0x8a0
   13420:	add	r3, r3, #8
   13424:	cmp	r0, r3
   13428:	moveq	r0, #0
   1342c:	beq	133f8 <__assert_fail@plt+0x1b2c>
   13430:	bl	13780 <__assert_fail@plt+0x1eb4>
   13434:	mov	r0, #0
   13438:	b	133f8 <__assert_fail@plt+0x1b2c>
   1343c:	bl	1a5d0 <lchmod@@Base+0x37b8>
   13440:	mov	r0, r5
   13444:	bl	116e0 <strlen@plt>
   13448:	str	r0, [sp, #32]
   1344c:	add	r6, r7, r0
   13450:	ldr	r3, [sp, #148]	; 0x94
   13454:	cmp	r3, r6
   13458:	movls	r3, #0
   1345c:	strls	r3, [sp, #36]	; 0x24
   13460:	bls	1305c <__assert_fail@plt+0x1790>
   13464:	b	13090 <__assert_fail@plt+0x17c4>
   13468:	movw	r3, #53744	; 0xd1f0
   1346c:	movt	r3, #2
   13470:	str	r0, [r3]
   13474:	bx	lr
   13478:	movw	r3, #53744	; 0xd1f0
   1347c:	movt	r3, #2
   13480:	strb	r0, [r3, #4]
   13484:	bx	lr
   13488:	strd	r4, [sp, #-16]!
   1348c:	str	r6, [sp, #8]
   13490:	str	lr, [sp, #12]
   13494:	sub	sp, sp, #8
   13498:	movw	r3, #53732	; 0xd1e4
   1349c:	movt	r3, #2
   134a0:	ldr	r0, [r3]
   134a4:	bl	1aee8 <lchmod@@Base+0x40d0>
   134a8:	cmp	r0, #0
   134ac:	beq	134d4 <__assert_fail@plt+0x1c08>
   134b0:	movw	r3, #53744	; 0xd1f0
   134b4:	movt	r3, #2
   134b8:	ldrb	r3, [r3, #4]
   134bc:	cmp	r3, #0
   134c0:	beq	13500 <__assert_fail@plt+0x1c34>
   134c4:	bl	1171c <__errno_location@plt>
   134c8:	ldr	r3, [r0]
   134cc:	cmp	r3, #32
   134d0:	bne	13500 <__assert_fail@plt+0x1c34>
   134d4:	movw	r3, #53728	; 0xd1e0
   134d8:	movt	r3, #2
   134dc:	ldr	r0, [r3]
   134e0:	bl	1aee8 <lchmod@@Base+0x40d0>
   134e4:	cmp	r0, #0
   134e8:	bne	13588 <__assert_fail@plt+0x1cbc>
   134ec:	add	sp, sp, #8
   134f0:	ldrd	r4, [sp]
   134f4:	ldr	r6, [sp, #8]
   134f8:	add	sp, sp, #12
   134fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13500:	mov	r2, #5
   13504:	movw	r1, #49760	; 0xc260
   13508:	movt	r1, #1
   1350c:	mov	r0, #0
   13510:	bl	11578 <dcgettext@plt>
   13514:	mov	r4, r0
   13518:	movw	r3, #53744	; 0xd1f0
   1351c:	movt	r3, #2
   13520:	ldr	r5, [r3]
   13524:	cmp	r5, #0
   13528:	beq	13568 <__assert_fail@plt+0x1c9c>
   1352c:	bl	1171c <__errno_location@plt>
   13530:	ldr	r6, [r0]
   13534:	mov	r0, r5
   13538:	bl	19680 <lchmod@@Base+0x2868>
   1353c:	str	r4, [sp]
   13540:	mov	r3, r0
   13544:	movw	r2, #49772	; 0xc26c
   13548:	movt	r2, #1
   1354c:	mov	r1, r6
   13550:	mov	r0, #0
   13554:	bl	11638 <error@plt>
   13558:	movw	r3, #53644	; 0xd18c
   1355c:	movt	r3, #2
   13560:	ldr	r0, [r3]
   13564:	bl	11524 <_exit@plt>
   13568:	bl	1171c <__errno_location@plt>
   1356c:	mov	r3, r4
   13570:	movw	r2, #49776	; 0xc270
   13574:	movt	r2, #1
   13578:	ldr	r1, [r0]
   1357c:	mov	r0, #0
   13580:	bl	11638 <error@plt>
   13584:	b	13558 <__assert_fail@plt+0x1c8c>
   13588:	movw	r3, #53644	; 0xd18c
   1358c:	movt	r3, #2
   13590:	ldr	r0, [r3]
   13594:	bl	11524 <_exit@plt>
   13598:	str	r4, [sp, #-8]!
   1359c:	str	lr, [sp, #4]
   135a0:	bl	13638 <__assert_fail@plt+0x1d6c>
   135a4:	cmp	r0, #0
   135a8:	beq	135b8 <__assert_fail@plt+0x1cec>
   135ac:	ldr	r4, [sp]
   135b0:	add	sp, sp, #4
   135b4:	pop	{pc}		; (ldr pc, [sp], #4)
   135b8:	bl	1a5d0 <lchmod@@Base+0x37b8>
   135bc:	strd	r4, [sp, #-16]!
   135c0:	str	r6, [sp, #8]
   135c4:	str	lr, [sp, #12]
   135c8:	mov	r4, r0
   135cc:	ldrb	ip, [r0]
   135d0:	cmp	ip, #47	; 0x2f
   135d4:	movne	r5, #0
   135d8:	moveq	r5, #1
   135dc:	bl	1ae24 <lchmod@@Base+0x400c>
   135e0:	sub	r0, r0, r4
   135e4:	cmp	r0, r5
   135e8:	bls	13628 <__assert_fail@plt+0x1d5c>
   135ec:	add	r3, r4, r0
   135f0:	ldrb	r3, [r3, #-1]
   135f4:	cmp	r3, #47	; 0x2f
   135f8:	bne	13628 <__assert_fail@plt+0x1d5c>
   135fc:	sub	r0, r0, #2
   13600:	add	r3, r4, r0
   13604:	sub	ip, r4, #1
   13608:	add	ip, ip, r5
   1360c:	rsb	r2, r4, #1
   13610:	add	r0, r2, r3
   13614:	cmp	r3, ip
   13618:	beq	13628 <__assert_fail@plt+0x1d5c>
   1361c:	ldrb	r1, [r3], #-1
   13620:	cmp	r1, #47	; 0x2f
   13624:	beq	13610 <__assert_fail@plt+0x1d44>
   13628:	ldrd	r4, [sp]
   1362c:	ldr	r6, [sp, #8]
   13630:	add	sp, sp, #12
   13634:	pop	{pc}		; (ldr pc, [sp], #4)
   13638:	strd	r4, [sp, #-16]!
   1363c:	str	r6, [sp, #8]
   13640:	str	lr, [sp, #12]
   13644:	mov	r6, r0
   13648:	bl	135bc <__assert_fail@plt+0x1cf0>
   1364c:	mov	r4, r0
   13650:	add	r3, r0, #1
   13654:	cmp	r0, #0
   13658:	movne	r0, r3
   1365c:	addeq	r0, r3, #1
   13660:	bl	1ad8c <lchmod@@Base+0x3f74>
   13664:	subs	r5, r0, #0
   13668:	beq	13698 <__assert_fail@plt+0x1dcc>
   1366c:	mov	r2, r4
   13670:	mov	r1, r6
   13674:	mov	r0, r5
   13678:	bl	11530 <memcpy@plt>
   1367c:	cmp	r4, #0
   13680:	bne	13690 <__assert_fail@plt+0x1dc4>
   13684:	mov	r3, #46	; 0x2e
   13688:	strb	r3, [r5]
   1368c:	mov	r4, #1
   13690:	mov	r3, #0
   13694:	strb	r3, [r5, r4]
   13698:	mov	r0, r5
   1369c:	ldrd	r4, [sp]
   136a0:	ldr	r6, [sp, #8]
   136a4:	add	sp, sp, #12
   136a8:	pop	{pc}		; (ldr pc, [sp], #4)
   136ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   136b0:	strd	r6, [sp, #8]
   136b4:	str	r8, [sp, #16]
   136b8:	str	lr, [sp, #20]
   136bc:	subs	r7, r0, #0
   136c0:	beq	13718 <__assert_fail@plt+0x1e4c>
   136c4:	mov	r5, r2
   136c8:	mov	r6, r1
   136cc:	mov	r0, #24
   136d0:	bl	1a13c <lchmod@@Base+0x3324>
   136d4:	mov	r4, r0
   136d8:	mov	r0, r6
   136dc:	bl	1a5a8 <lchmod@@Base+0x3790>
   136e0:	str	r0, [r4]
   136e4:	ldrd	r2, [r5, #96]	; 0x60
   136e8:	strd	r2, [r4, #8]
   136ec:	ldrd	r2, [r5]
   136f0:	strd	r2, [r4, #16]
   136f4:	mov	r1, r4
   136f8:	mov	r0, r7
   136fc:	bl	16b00 <__assert_fail@plt+0x5234>
   13700:	cmp	r0, #0
   13704:	beq	1372c <__assert_fail@plt+0x1e60>
   13708:	cmp	r4, r0
   1370c:	beq	13718 <__assert_fail@plt+0x1e4c>
   13710:	mov	r0, r4
   13714:	bl	16d20 <__assert_fail@plt+0x5454>
   13718:	ldrd	r4, [sp]
   1371c:	ldrd	r6, [sp, #8]
   13720:	ldr	r8, [sp, #16]
   13724:	add	sp, sp, #20
   13728:	pop	{pc}		; (ldr pc, [sp], #4)
   1372c:	bl	1a5d0 <lchmod@@Base+0x37b8>
   13730:	cmp	r0, #0
   13734:	beq	13778 <__assert_fail@plt+0x1eac>
   13738:	strd	r4, [sp, #-12]!
   1373c:	str	lr, [sp, #8]
   13740:	sub	sp, sp, #28
   13744:	str	r1, [sp]
   13748:	ldrd	r4, [r2, #96]	; 0x60
   1374c:	strd	r4, [sp, #8]
   13750:	ldrd	r2, [r2]
   13754:	strd	r2, [sp, #16]
   13758:	mov	r1, sp
   1375c:	bl	16258 <__assert_fail@plt+0x498c>
   13760:	adds	r0, r0, #0
   13764:	movne	r0, #1
   13768:	add	sp, sp, #28
   1376c:	ldrd	r4, [sp]
   13770:	add	sp, sp, #8
   13774:	pop	{pc}		; (ldr pc, [sp], #4)
   13778:	mov	r0, #0
   1377c:	bx	lr
   13780:	strd	r4, [sp, #-12]!
   13784:	str	lr, [sp, #8]
   13788:	sub	sp, sp, #12
   1378c:	mov	r5, r0
   13790:	bl	1171c <__errno_location@plt>
   13794:	mov	r4, r0
   13798:	ldr	r3, [r0]
   1379c:	str	r3, [sp]
   137a0:	str	r3, [sp, #4]
   137a4:	mov	r3, #0
   137a8:	str	r3, [r0]
   137ac:	mov	r0, r5
   137b0:	bl	1150c <free@plt>
   137b4:	ldr	r3, [r4]
   137b8:	clz	r3, r3
   137bc:	lsr	r3, r3, #5
   137c0:	add	r2, sp, #8
   137c4:	add	r3, r2, r3, lsl #2
   137c8:	ldr	r3, [r3, #-8]
   137cc:	str	r3, [r4]
   137d0:	add	sp, sp, #12
   137d4:	ldrd	r4, [sp]
   137d8:	add	sp, sp, #8
   137dc:	pop	{pc}		; (ldr pc, [sp], #4)
   137e0:	strd	r4, [sp, #-8]!
   137e4:	ldrd	r4, [r0, #8]
   137e8:	ldrd	r2, [r1, #8]
   137ec:	cmp	r5, r3
   137f0:	cmpeq	r4, r2
   137f4:	movne	r0, #0
   137f8:	beq	13808 <__assert_fail@plt+0x1f3c>
   137fc:	ldrd	r4, [sp]
   13800:	add	sp, sp, #8
   13804:	bx	lr
   13808:	ldrd	r4, [r0]
   1380c:	ldrd	r2, [r1]
   13810:	cmp	r5, r3
   13814:	cmpeq	r4, r2
   13818:	moveq	r0, #1
   1381c:	movne	r0, #0
   13820:	b	137fc <__assert_fail@plt+0x1f30>
   13824:	str	r4, [sp, #-8]!
   13828:	str	lr, [sp, #4]
   1382c:	mov	r2, r1
   13830:	mov	r3, #0
   13834:	ldrd	r0, [r0, #8]
   13838:	bl	1b774 <lchmod@@Base+0x495c>
   1383c:	mov	r0, r2
   13840:	ldr	r4, [sp]
   13844:	add	sp, sp, #4
   13848:	pop	{pc}		; (ldr pc, [sp], #4)
   1384c:	str	r4, [sp, #-8]!
   13850:	str	lr, [sp, #4]
   13854:	mov	r2, r1
   13858:	mov	r3, #0
   1385c:	ldrd	r0, [r0]
   13860:	bl	1b774 <lchmod@@Base+0x495c>
   13864:	mov	r0, r2
   13868:	ldr	r4, [sp]
   1386c:	add	sp, sp, #4
   13870:	pop	{pc}		; (ldr pc, [sp], #4)
   13874:	strd	r4, [sp, #-8]!
   13878:	ldrd	r4, [r0]
   1387c:	ldrd	r2, [r1]
   13880:	cmp	r5, r3
   13884:	cmpeq	r4, r2
   13888:	moveq	r0, #1
   1388c:	movne	r0, #0
   13890:	ldrd	r4, [sp]
   13894:	add	sp, sp, #8
   13898:	bx	lr
   1389c:	strd	r4, [sp, #-8]!
   138a0:	ldr	r3, [r0]
   138a4:	ldrd	r4, [r3, #160]	; 0xa0
   138a8:	ldr	r3, [r1]
   138ac:	ldrd	r2, [r3, #160]	; 0xa0
   138b0:	cmp	r5, r3
   138b4:	cmpeq	r4, r2
   138b8:	movhi	r0, #1
   138bc:	movls	r0, #0
   138c0:	movcc	r3, #1
   138c4:	movcs	r3, #0
   138c8:	sub	r0, r0, r3
   138cc:	ldrd	r4, [sp]
   138d0:	add	sp, sp, #8
   138d4:	bx	lr
   138d8:	strd	r4, [sp, #-16]!
   138dc:	str	r6, [sp, #8]
   138e0:	str	lr, [sp, #12]
   138e4:	mov	r4, r0
   138e8:	ldr	r3, [r0, #36]	; 0x24
   138ec:	add	r1, r1, #256	; 0x100
   138f0:	adds	r1, r1, r3
   138f4:	bcs	13924 <__assert_fail@plt+0x2058>
   138f8:	str	r1, [r0, #36]	; 0x24
   138fc:	ldr	r0, [r0, #24]
   13900:	bl	1adc8 <lchmod@@Base+0x3fb0>
   13904:	cmp	r0, #0
   13908:	strne	r0, [r4, #24]
   1390c:	movne	r0, #1
   13910:	beq	13948 <__assert_fail@plt+0x207c>
   13914:	ldrd	r4, [sp]
   13918:	ldr	r6, [sp, #8]
   1391c:	add	sp, sp, #12
   13920:	pop	{pc}		; (ldr pc, [sp], #4)
   13924:	ldr	r0, [r0, #24]
   13928:	bl	13780 <__assert_fail@plt+0x1eb4>
   1392c:	mov	r5, #0
   13930:	str	r5, [r4, #24]
   13934:	bl	1171c <__errno_location@plt>
   13938:	mov	r3, #36	; 0x24
   1393c:	str	r3, [r0]
   13940:	mov	r0, r5
   13944:	b	13914 <__assert_fail@plt+0x2048>
   13948:	ldr	r0, [r4, #24]
   1394c:	bl	13780 <__assert_fail@plt+0x1eb4>
   13950:	mov	r0, #0
   13954:	str	r0, [r4, #24]
   13958:	b	13914 <__assert_fail@plt+0x2048>
   1395c:	strd	r4, [sp, #-16]!
   13960:	str	r6, [sp, #8]
   13964:	str	lr, [sp, #12]
   13968:	sub	sp, sp, #8
   1396c:	mov	r4, r1
   13970:	add	r5, r1, #64	; 0x40
   13974:	ldr	r3, [r1, #48]	; 0x30
   13978:	cmp	r3, #0
   1397c:	bne	1398c <__assert_fail@plt+0x20c0>
   13980:	ldr	r3, [r0, #48]	; 0x30
   13984:	tst	r3, #1
   13988:	bne	1399c <__assert_fail@plt+0x20d0>
   1398c:	ldr	r3, [r0, #48]	; 0x30
   13990:	ubfx	r3, r3, #1, #1
   13994:	orrs	r3, r2, r3
   13998:	beq	13a10 <__assert_fail@plt+0x2144>
   1399c:	mov	r2, r5
   139a0:	ldr	r1, [r4, #24]
   139a4:	mov	r0, #3
   139a8:	bl	11854 <__xstat64@plt>
   139ac:	cmp	r0, #0
   139b0:	beq	13a34 <__assert_fail@plt+0x2168>
   139b4:	bl	1171c <__errno_location@plt>
   139b8:	mov	r6, r0
   139bc:	ldr	r3, [r0]
   139c0:	cmp	r3, #2
   139c4:	bne	139f0 <__assert_fail@plt+0x2124>
   139c8:	mov	r2, r5
   139cc:	ldr	r1, [r4, #24]
   139d0:	mov	r0, #3
   139d4:	bl	11890 <__lxstat64@plt>
   139d8:	cmp	r0, #0
   139dc:	bne	139f0 <__assert_fail@plt+0x2124>
   139e0:	mov	r3, #0
   139e4:	str	r3, [r6]
   139e8:	mov	r0, #13
   139ec:	b	13a58 <__assert_fail@plt+0x218c>
   139f0:	ldr	r3, [r6]
   139f4:	str	r3, [r4, #32]
   139f8:	mov	r2, #104	; 0x68
   139fc:	mov	r1, #0
   13a00:	mov	r0, r5
   13a04:	bl	11740 <memset@plt>
   13a08:	mov	r0, #10
   13a0c:	b	13a58 <__assert_fail@plt+0x218c>
   13a10:	mov	r3, #256	; 0x100
   13a14:	str	r3, [sp]
   13a18:	mov	r3, r5
   13a1c:	ldr	r2, [r4, #24]
   13a20:	ldr	r1, [r0, #32]
   13a24:	mov	r0, #3
   13a28:	bl	115c0 <__fxstatat64@plt>
   13a2c:	cmp	r0, #0
   13a30:	bne	13a6c <__assert_fail@plt+0x21a0>
   13a34:	ldr	r3, [r4, #80]	; 0x50
   13a38:	and	r3, r3, #61440	; 0xf000
   13a3c:	cmp	r3, #16384	; 0x4000
   13a40:	beq	13a7c <__assert_fail@plt+0x21b0>
   13a44:	cmp	r3, #40960	; 0xa000
   13a48:	beq	13ac4 <__assert_fail@plt+0x21f8>
   13a4c:	cmp	r3, #32768	; 0x8000
   13a50:	movne	r0, #3
   13a54:	moveq	r0, #8
   13a58:	add	sp, sp, #8
   13a5c:	ldrd	r4, [sp]
   13a60:	ldr	r6, [sp, #8]
   13a64:	add	sp, sp, #12
   13a68:	pop	{pc}		; (ldr pc, [sp], #4)
   13a6c:	bl	1171c <__errno_location@plt>
   13a70:	ldr	r3, [r0]
   13a74:	str	r3, [r4, #32]
   13a78:	b	139f8 <__assert_fail@plt+0x212c>
   13a7c:	ldrb	r3, [r4, #168]	; 0xa8
   13a80:	cmp	r3, #46	; 0x2e
   13a84:	movne	r0, #1
   13a88:	bne	13a58 <__assert_fail@plt+0x218c>
   13a8c:	ldrb	r3, [r4, #169]	; 0xa9
   13a90:	cmp	r3, #0
   13a94:	beq	13ab0 <__assert_fail@plt+0x21e4>
   13a98:	ldr	r3, [r4, #168]	; 0xa8
   13a9c:	bic	r3, r3, #-16777216	; 0xff000000
   13aa0:	bic	r3, r3, #255	; 0xff
   13aa4:	cmp	r3, #11776	; 0x2e00
   13aa8:	movne	r0, #1
   13aac:	bne	13a58 <__assert_fail@plt+0x218c>
   13ab0:	ldr	r3, [r4, #48]	; 0x30
   13ab4:	cmp	r3, #0
   13ab8:	moveq	r0, #1
   13abc:	movne	r0, #5
   13ac0:	b	13a58 <__assert_fail@plt+0x218c>
   13ac4:	mov	r0, #12
   13ac8:	b	13a58 <__assert_fail@plt+0x218c>
   13acc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13ad0:	strd	r6, [sp, #8]
   13ad4:	str	r8, [sp, #16]
   13ad8:	str	lr, [sp, #20]
   13adc:	mov	r6, r0
   13ae0:	mov	r4, r1
   13ae4:	mov	r5, r2
   13ae8:	ldr	r7, [r0, #44]	; 0x2c
   13aec:	ldr	r3, [r0, #40]	; 0x28
   13af0:	cmp	r3, r2
   13af4:	bcs	13b20 <__assert_fail@plt+0x2254>
   13af8:	add	r1, r2, #40	; 0x28
   13afc:	str	r1, [r0, #40]	; 0x28
   13b00:	cmn	r1, #-1073741823	; 0xc0000001
   13b04:	bhi	13ba0 <__assert_fail@plt+0x22d4>
   13b08:	lsl	r1, r1, #2
   13b0c:	ldr	r0, [r0, #8]
   13b10:	bl	1adc8 <lchmod@@Base+0x3fb0>
   13b14:	cmp	r0, #0
   13b18:	strne	r0, [r6, #8]
   13b1c:	beq	13ba0 <__assert_fail@plt+0x22d4>
   13b20:	ldr	r3, [r6, #8]
   13b24:	cmp	r4, #0
   13b28:	beq	13b3c <__assert_fail@plt+0x2270>
   13b2c:	str	r4, [r3], #4
   13b30:	ldr	r4, [r4, #8]
   13b34:	cmp	r4, #0
   13b38:	bne	13b2c <__assert_fail@plt+0x2260>
   13b3c:	mov	r3, r7
   13b40:	mov	r2, #4
   13b44:	mov	r1, r5
   13b48:	ldr	r0, [r6, #8]
   13b4c:	bl	11800 <qsort@plt>
   13b50:	ldr	lr, [r6, #8]
   13b54:	ldr	r0, [lr]
   13b58:	subs	r3, r5, #1
   13b5c:	beq	13b80 <__assert_fail@plt+0x22b4>
   13b60:	mov	r2, lr
   13b64:	ldr	r1, [r2]
   13b68:	ldr	ip, [r2, #4]!
   13b6c:	str	ip, [r1, #8]
   13b70:	subs	r3, r3, #1
   13b74:	bne	13b64 <__assert_fail@plt+0x2298>
   13b78:	sub	r5, r5, #-1073741823	; 0xc0000001
   13b7c:	add	lr, lr, r5, lsl #2
   13b80:	ldr	r3, [lr]
   13b84:	mov	r2, #0
   13b88:	str	r2, [r3, #8]
   13b8c:	ldrd	r4, [sp]
   13b90:	ldrd	r6, [sp, #8]
   13b94:	ldr	r8, [sp, #16]
   13b98:	add	sp, sp, #20
   13b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13ba0:	ldr	r0, [r6, #8]
   13ba4:	bl	13780 <__assert_fail@plt+0x1eb4>
   13ba8:	mov	r3, #0
   13bac:	str	r3, [r6, #8]
   13bb0:	str	r3, [r6, #40]	; 0x28
   13bb4:	mov	r0, r4
   13bb8:	b	13b8c <__assert_fail@plt+0x22c0>
   13bbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13bc0:	strd	r6, [sp, #8]
   13bc4:	str	r8, [sp, #16]
   13bc8:	str	lr, [sp, #20]
   13bcc:	mov	r6, r0
   13bd0:	mov	r7, r1
   13bd4:	mov	r5, r2
   13bd8:	add	r0, r2, #176	; 0xb0
   13bdc:	bic	r0, r0, #7
   13be0:	bl	1ad8c <lchmod@@Base+0x3f74>
   13be4:	subs	r4, r0, #0
   13be8:	beq	13c34 <__assert_fail@plt+0x2368>
   13bec:	mov	r2, r5
   13bf0:	mov	r1, r7
   13bf4:	add	r0, r4, #168	; 0xa8
   13bf8:	bl	11530 <memcpy@plt>
   13bfc:	add	r2, r4, r5
   13c00:	mov	r3, #0
   13c04:	strb	r3, [r2, #168]	; 0xa8
   13c08:	str	r5, [r4, #52]	; 0x34
   13c0c:	str	r6, [r4, #44]	; 0x2c
   13c10:	ldr	r2, [r6, #24]
   13c14:	str	r2, [r4, #28]
   13c18:	str	r3, [r4, #32]
   13c1c:	str	r3, [r4, #12]
   13c20:	strh	r3, [r4, #58]	; 0x3a
   13c24:	mov	r2, #3
   13c28:	strh	r2, [r4, #60]	; 0x3c
   13c2c:	str	r3, [r4, #16]
   13c30:	str	r3, [r4, #20]
   13c34:	mov	r0, r4
   13c38:	ldrd	r4, [sp]
   13c3c:	ldrd	r6, [sp, #8]
   13c40:	ldr	r8, [sp, #16]
   13c44:	add	sp, sp, #20
   13c48:	pop	{pc}		; (ldr pc, [sp], #4)
   13c4c:	str	r4, [sp, #-8]!
   13c50:	str	lr, [sp, #4]
   13c54:	sub	sp, sp, #8
   13c58:	mov	r4, r0
   13c5c:	ldr	r3, [r0, #48]	; 0x30
   13c60:	movw	r2, #258	; 0x102
   13c64:	tst	r2, r3
   13c68:	beq	13cb0 <__assert_fail@plt+0x23e4>
   13c6c:	movw	r3, #14208	; 0x3780
   13c70:	movt	r3, #1
   13c74:	str	r3, [sp]
   13c78:	movw	r3, #14304	; 0x37e0
   13c7c:	movt	r3, #1
   13c80:	movw	r2, #14372	; 0x3824
   13c84:	movt	r2, #1
   13c88:	mov	r1, #0
   13c8c:	mov	r0, #31
   13c90:	bl	1654c <__assert_fail@plt+0x4c80>
   13c94:	str	r0, [r4, #56]	; 0x38
   13c98:	adds	r0, r0, #0
   13c9c:	movne	r0, #1
   13ca0:	add	sp, sp, #8
   13ca4:	ldr	r4, [sp]
   13ca8:	add	sp, sp, #4
   13cac:	pop	{pc}		; (ldr pc, [sp], #4)
   13cb0:	mov	r0, #32
   13cb4:	bl	1ad8c <lchmod@@Base+0x3f74>
   13cb8:	str	r0, [r4, #56]	; 0x38
   13cbc:	cmp	r0, #0
   13cc0:	moveq	r0, #0
   13cc4:	beq	13ca0 <__assert_fail@plt+0x23d4>
   13cc8:	bl	1af74 <lchmod@@Base+0x415c>
   13ccc:	mov	r0, #1
   13cd0:	b	13ca0 <__assert_fail@plt+0x23d4>
   13cd4:	str	r4, [sp, #-8]!
   13cd8:	str	lr, [sp, #4]
   13cdc:	mov	ip, r1
   13ce0:	ldr	r3, [r0, #48]	; 0x30
   13ce4:	lsl	r2, r3, #11
   13ce8:	and	r2, r2, #32768	; 0x8000
   13cec:	orr	r2, r2, #540672	; 0x84000
   13cf0:	orr	r2, r2, #2304	; 0x900
   13cf4:	tst	r3, #512	; 0x200
   13cf8:	beq	13d10 <__assert_fail@plt+0x2444>
   13cfc:	ldr	r0, [r0, #32]
   13d00:	bl	174d8 <lchmod@@Base+0x6c0>
   13d04:	ldr	r4, [sp]
   13d08:	add	sp, sp, #4
   13d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d10:	mov	r1, r2
   13d14:	mov	r0, ip
   13d18:	bl	1b3a8 <lchmod@@Base+0x4590>
   13d1c:	b	13d04 <__assert_fail@plt+0x2438>
   13d20:	strd	r4, [sp, #-16]!
   13d24:	str	r6, [sp, #8]
   13d28:	str	lr, [sp, #12]
   13d2c:	subs	r4, r0, #0
   13d30:	bne	13d5c <__assert_fail@plt+0x2490>
   13d34:	ldrd	r4, [sp]
   13d38:	ldr	r6, [sp, #8]
   13d3c:	add	sp, sp, #12
   13d40:	pop	{pc}		; (ldr pc, [sp], #4)
   13d44:	bl	118b4 <closedir@plt>
   13d48:	mov	r0, r4
   13d4c:	bl	13780 <__assert_fail@plt+0x1eb4>
   13d50:	mov	r4, r5
   13d54:	cmp	r5, #0
   13d58:	beq	13d34 <__assert_fail@plt+0x2468>
   13d5c:	ldr	r5, [r4, #8]
   13d60:	ldr	r0, [r4, #12]
   13d64:	cmp	r0, #0
   13d68:	bne	13d44 <__assert_fail@plt+0x2478>
   13d6c:	b	13d48 <__assert_fail@plt+0x247c>
   13d70:	str	r4, [sp, #-8]!
   13d74:	str	lr, [sp, #4]
   13d78:	ldr	r3, [r0, #48]	; 0x30
   13d7c:	movw	r2, #258	; 0x102
   13d80:	tst	r2, r3
   13d84:	beq	13da4 <__assert_fail@plt+0x24d8>
   13d88:	ldr	r0, [r0, #56]	; 0x38
   13d8c:	cmp	r0, #0
   13d90:	beq	13d98 <__assert_fail@plt+0x24cc>
   13d94:	bl	16718 <__assert_fail@plt+0x4e4c>
   13d98:	ldr	r4, [sp]
   13d9c:	add	sp, sp, #4
   13da0:	pop	{pc}		; (ldr pc, [sp], #4)
   13da4:	ldr	r0, [r0, #56]	; 0x38
   13da8:	bl	13780 <__assert_fail@plt+0x1eb4>
   13dac:	b	13d98 <__assert_fail@plt+0x24cc>
   13db0:	str	r4, [sp, #-8]!
   13db4:	str	lr, [sp, #4]
   13db8:	mov	r4, r0
   13dbc:	mov	r0, r4
   13dc0:	bl	16d74 <__assert_fail@plt+0x54a8>
   13dc4:	cmp	r0, #0
   13dc8:	bne	13de4 <__assert_fail@plt+0x2518>
   13dcc:	mov	r0, r4
   13dd0:	bl	16dc8 <__assert_fail@plt+0x54fc>
   13dd4:	cmp	r0, #0
   13dd8:	blt	13dbc <__assert_fail@plt+0x24f0>
   13ddc:	bl	11884 <close@plt>
   13de0:	b	13dbc <__assert_fail@plt+0x24f0>
   13de4:	ldr	r4, [sp]
   13de8:	add	sp, sp, #4
   13dec:	pop	{pc}		; (ldr pc, [sp], #4)
   13df0:	strd	r4, [sp, #-20]!	; 0xffffffec
   13df4:	strd	r6, [sp, #8]
   13df8:	str	lr, [sp, #16]
   13dfc:	sub	sp, sp, #116	; 0x74
   13e00:	ldr	r7, [r0, #44]	; 0x2c
   13e04:	ldr	r3, [r7, #48]	; 0x30
   13e08:	ands	r3, r3, #512	; 0x200
   13e0c:	beq	13efc <__assert_fail@plt+0x2630>
   13e10:	mov	r6, r1
   13e14:	mov	r5, r0
   13e18:	ldr	r4, [r7, #52]	; 0x34
   13e1c:	cmp	r4, #0
   13e20:	beq	13e48 <__assert_fail@plt+0x257c>
   13e24:	ldrd	r2, [r5, #64]	; 0x40
   13e28:	strd	r2, [sp, #8]
   13e2c:	add	r1, sp, #8
   13e30:	mov	r0, r4
   13e34:	bl	16258 <__assert_fail@plt+0x498c>
   13e38:	cmp	r0, #0
   13e3c:	beq	13e80 <__assert_fail@plt+0x25b4>
   13e40:	ldr	r3, [r0, #8]
   13e44:	b	13efc <__assert_fail@plt+0x2630>
   13e48:	movw	r3, #14208	; 0x3780
   13e4c:	movt	r3, #1
   13e50:	str	r3, [sp]
   13e54:	movw	r3, #14452	; 0x3874
   13e58:	movt	r3, #1
   13e5c:	movw	r2, #14412	; 0x384c
   13e60:	movt	r2, #1
   13e64:	mov	r1, #0
   13e68:	mov	r0, #13
   13e6c:	bl	1654c <__assert_fail@plt+0x4c80>
   13e70:	mov	r4, r0
   13e74:	str	r0, [r7, #52]	; 0x34
   13e78:	cmp	r0, #0
   13e7c:	bne	13e24 <__assert_fail@plt+0x2558>
   13e80:	cmp	r6, #0
   13e84:	blt	13ef8 <__assert_fail@plt+0x262c>
   13e88:	add	r1, sp, #24
   13e8c:	mov	r0, r6
   13e90:	bl	11488 <fstatfs64@plt>
   13e94:	cmp	r0, #0
   13e98:	bne	13f14 <__assert_fail@plt+0x2648>
   13e9c:	cmp	r4, #0
   13ea0:	beq	13ee0 <__assert_fail@plt+0x2614>
   13ea4:	mov	r0, #16
   13ea8:	bl	1ad8c <lchmod@@Base+0x3f74>
   13eac:	subs	r6, r0, #0
   13eb0:	beq	13ee0 <__assert_fail@plt+0x2614>
   13eb4:	ldrd	r2, [r5, #64]	; 0x40
   13eb8:	strd	r2, [r6]
   13ebc:	ldr	r3, [sp, #24]
   13ec0:	str	r3, [r6, #8]
   13ec4:	mov	r1, r6
   13ec8:	mov	r0, r4
   13ecc:	bl	16b00 <__assert_fail@plt+0x5234>
   13ed0:	cmp	r0, #0
   13ed4:	beq	13eec <__assert_fail@plt+0x2620>
   13ed8:	cmp	r6, r0
   13edc:	bne	13ee8 <__assert_fail@plt+0x261c>
   13ee0:	ldr	r3, [sp, #24]
   13ee4:	b	13efc <__assert_fail@plt+0x2630>
   13ee8:	bl	11878 <abort@plt>
   13eec:	mov	r0, r6
   13ef0:	bl	13780 <__assert_fail@plt+0x1eb4>
   13ef4:	b	13ee0 <__assert_fail@plt+0x2614>
   13ef8:	mov	r3, #0
   13efc:	mov	r0, r3
   13f00:	add	sp, sp, #116	; 0x74
   13f04:	ldrd	r4, [sp]
   13f08:	ldrd	r6, [sp, #8]
   13f0c:	add	sp, sp, #16
   13f10:	pop	{pc}		; (ldr pc, [sp], #4)
   13f14:	mov	r3, #0
   13f18:	b	13efc <__assert_fail@plt+0x2630>
   13f1c:	strd	r4, [sp, #-16]!
   13f20:	str	r6, [sp, #8]
   13f24:	str	lr, [sp, #12]
   13f28:	mov	r5, r0
   13f2c:	mov	r4, r1
   13f30:	ldr	r3, [r0, #48]	; 0x30
   13f34:	movw	r2, #258	; 0x102
   13f38:	tst	r2, r3
   13f3c:	beq	13fb0 <__assert_fail@plt+0x26e4>
   13f40:	mov	r0, #24
   13f44:	bl	1ad8c <lchmod@@Base+0x3f74>
   13f48:	subs	r6, r0, #0
   13f4c:	moveq	r0, #0
   13f50:	beq	13fd4 <__assert_fail@plt+0x2708>
   13f54:	ldrd	r2, [r4, #64]	; 0x40
   13f58:	strd	r2, [r6]
   13f5c:	ldrd	r2, [r4, #160]	; 0xa0
   13f60:	strd	r2, [r6, #8]
   13f64:	str	r4, [r6, #16]
   13f68:	mov	r1, r6
   13f6c:	ldr	r0, [r5, #56]	; 0x38
   13f70:	bl	16b00 <__assert_fail@plt+0x5234>
   13f74:	mov	r5, r0
   13f78:	cmp	r6, r0
   13f7c:	moveq	r0, #1
   13f80:	beq	13fd4 <__assert_fail@plt+0x2708>
   13f84:	mov	r0, r6
   13f88:	bl	13780 <__assert_fail@plt+0x1eb4>
   13f8c:	cmp	r5, #0
   13f90:	moveq	r0, #0
   13f94:	beq	13fd4 <__assert_fail@plt+0x2708>
   13f98:	ldr	r3, [r5, #16]
   13f9c:	str	r3, [r4]
   13fa0:	mov	r3, #2
   13fa4:	strh	r3, [r4, #56]	; 0x38
   13fa8:	mov	r0, #1
   13fac:	b	13fd4 <__assert_fail@plt+0x2708>
   13fb0:	add	r1, r1, #64	; 0x40
   13fb4:	ldr	r0, [r0, #56]	; 0x38
   13fb8:	bl	1af90 <lchmod@@Base+0x4178>
   13fbc:	cmp	r0, #0
   13fc0:	moveq	r0, #1
   13fc4:	beq	13fd4 <__assert_fail@plt+0x2708>
   13fc8:	str	r4, [r4]
   13fcc:	mov	r3, #2
   13fd0:	strh	r3, [r4, #56]	; 0x38
   13fd4:	ldrd	r4, [sp]
   13fd8:	ldr	r6, [sp, #8]
   13fdc:	add	sp, sp, #12
   13fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fe4:	strd	r4, [sp, #-16]!
   13fe8:	str	r6, [sp, #8]
   13fec:	str	lr, [sp, #12]
   13ff0:	mov	r5, r1
   13ff4:	ldr	r1, [r0, #32]
   13ff8:	cmp	r1, r5
   13ffc:	movne	r3, #0
   14000:	moveq	r3, #1
   14004:	cmn	r1, #100	; 0x64
   14008:	moveq	r3, #0
   1400c:	cmp	r3, #0
   14010:	bne	14054 <__assert_fail@plt+0x2788>
   14014:	mov	r4, r0
   14018:	cmp	r2, #0
   1401c:	bne	14058 <__assert_fail@plt+0x278c>
   14020:	ldr	r3, [r0, #48]	; 0x30
   14024:	eor	r3, r3, #4
   14028:	ubfx	r3, r3, #2, #1
   1402c:	cmp	r1, #0
   14030:	movlt	r3, #0
   14034:	andge	r3, r3, #1
   14038:	cmp	r3, #0
   1403c:	bne	14070 <__assert_fail@plt+0x27a4>
   14040:	str	r5, [r4, #32]
   14044:	ldrd	r4, [sp]
   14048:	ldr	r6, [sp, #8]
   1404c:	add	sp, sp, #12
   14050:	pop	{pc}		; (ldr pc, [sp], #4)
   14054:	bl	11878 <abort@plt>
   14058:	add	r0, r0, #60	; 0x3c
   1405c:	bl	16d7c <__assert_fail@plt+0x54b0>
   14060:	cmp	r0, #0
   14064:	blt	14040 <__assert_fail@plt+0x2774>
   14068:	bl	11884 <close@plt>
   1406c:	b	14040 <__assert_fail@plt+0x2774>
   14070:	mov	r0, r1
   14074:	bl	11884 <close@plt>
   14078:	b	14040 <__assert_fail@plt+0x2774>
   1407c:	strd	r4, [sp, #-16]!
   14080:	str	r6, [sp, #8]
   14084:	str	lr, [sp, #12]
   14088:	mov	r4, r0
   1408c:	ldr	r3, [r0, #48]	; 0x30
   14090:	ands	r5, r3, #4
   14094:	movne	r5, #0
   14098:	bne	140b0 <__assert_fail@plt+0x27e4>
   1409c:	tst	r3, #512	; 0x200
   140a0:	beq	140cc <__assert_fail@plt+0x2800>
   140a4:	mov	r2, #1
   140a8:	mvn	r1, #99	; 0x63
   140ac:	bl	13fe4 <__assert_fail@plt+0x2718>
   140b0:	add	r0, r4, #60	; 0x3c
   140b4:	bl	13db0 <__assert_fail@plt+0x24e4>
   140b8:	mov	r0, r5
   140bc:	ldrd	r4, [sp]
   140c0:	ldr	r6, [sp, #8]
   140c4:	add	sp, sp, #12
   140c8:	pop	{pc}		; (ldr pc, [sp], #4)
   140cc:	ldr	r0, [r0, #28]
   140d0:	bl	117f4 <fchdir@plt>
   140d4:	adds	r5, r0, #0
   140d8:	movne	r5, #1
   140dc:	b	140b0 <__assert_fail@plt+0x27e4>
   140e0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   140e4:	strd	r6, [sp, #8]
   140e8:	strd	r8, [sp, #16]
   140ec:	str	lr, [sp, #24]
   140f0:	sub	sp, sp, #108	; 0x6c
   140f4:	mov	r4, r0
   140f8:	mov	r7, r1
   140fc:	mov	r5, r2
   14100:	subs	r9, r3, #0
   14104:	beq	14230 <__assert_fail@plt+0x2964>
   14108:	movw	r1, #49780	; 0xc274
   1410c:	movt	r1, #1
   14110:	mov	r0, r9
   14114:	bl	114d0 <strcmp@plt>
   14118:	cmp	r0, #0
   1411c:	bne	14230 <__assert_fail@plt+0x2964>
   14120:	ldr	r3, [r4, #48]	; 0x30
   14124:	tst	r3, #4
   14128:	bne	14170 <__assert_fail@plt+0x28a4>
   1412c:	cmp	r5, #0
   14130:	bge	141e4 <__assert_fail@plt+0x2918>
   14134:	tst	r3, #512	; 0x200
   14138:	beq	14150 <__assert_fail@plt+0x2884>
   1413c:	add	r6, r4, #60	; 0x3c
   14140:	mov	r0, r6
   14144:	bl	16d74 <__assert_fail@plt+0x54a8>
   14148:	cmp	r0, #0
   1414c:	beq	1419c <__assert_fail@plt+0x28d0>
   14150:	mov	r8, #1
   14154:	mov	r1, r9
   14158:	mov	r0, r4
   1415c:	bl	13cd4 <__assert_fail@plt+0x2408>
   14160:	subs	r6, r0, #0
   14164:	bge	1424c <__assert_fail@plt+0x2980>
   14168:	mvn	r4, #0
   1416c:	b	142d0 <__assert_fail@plt+0x2a04>
   14170:	ubfx	r3, r3, #9, #1
   14174:	cmp	r5, #0
   14178:	movlt	r3, #0
   1417c:	andge	r3, r3, #1
   14180:	cmp	r3, #0
   14184:	moveq	r4, #0
   14188:	beq	142d0 <__assert_fail@plt+0x2a04>
   1418c:	mov	r0, r5
   14190:	bl	11884 <close@plt>
   14194:	mov	r4, #0
   14198:	b	142d0 <__assert_fail@plt+0x2a04>
   1419c:	mov	r0, r6
   141a0:	bl	16dc8 <__assert_fail@plt+0x54fc>
   141a4:	subs	r6, r0, #0
   141a8:	blt	14150 <__assert_fail@plt+0x2884>
   141ac:	ldr	r3, [r4, #48]	; 0x30
   141b0:	tst	r3, #2
   141b4:	bne	141f0 <__assert_fail@plt+0x2924>
   141b8:	mov	r5, r6
   141bc:	mov	r8, #1
   141c0:	ldr	r3, [r4, #48]	; 0x30
   141c4:	tst	r3, #512	; 0x200
   141c8:	bne	141fc <__assert_fail@plt+0x2930>
   141cc:	mov	r0, r6
   141d0:	bl	117f4 <fchdir@plt>
   141d4:	mov	r4, r0
   141d8:	b	142c8 <__assert_fail@plt+0x29fc>
   141dc:	mov	r8, #0
   141e0:	b	14154 <__assert_fail@plt+0x2888>
   141e4:	mov	r6, r5
   141e8:	mov	r8, #1
   141ec:	b	1424c <__assert_fail@plt+0x2980>
   141f0:	mov	r5, r6
   141f4:	mov	r8, #1
   141f8:	b	14278 <__assert_fail@plt+0x29ac>
   141fc:	eor	r2, r8, #1
   14200:	mov	r1, r6
   14204:	mov	r0, r4
   14208:	bl	13fe4 <__assert_fail@plt+0x2718>
   1420c:	mov	r4, #0
   14210:	b	142d0 <__assert_fail@plt+0x2a04>
   14214:	bl	1171c <__errno_location@plt>
   14218:	mov	r5, r0
   1421c:	ldr	r7, [r0]
   14220:	mov	r0, r6
   14224:	bl	11884 <close@plt>
   14228:	str	r7, [r5]
   1422c:	b	142d0 <__assert_fail@plt+0x2a04>
   14230:	ldr	r3, [r4, #48]	; 0x30
   14234:	tst	r3, #4
   14238:	bne	14170 <__assert_fail@plt+0x28a4>
   1423c:	cmp	r5, #0
   14240:	movge	r6, r5
   14244:	movge	r8, #0
   14248:	blt	141dc <__assert_fail@plt+0x2910>
   1424c:	ldr	r3, [r4, #48]	; 0x30
   14250:	tst	r3, #2
   14254:	bne	14278 <__assert_fail@plt+0x29ac>
   14258:	cmp	r9, #0
   1425c:	beq	141c0 <__assert_fail@plt+0x28f4>
   14260:	movw	r1, #49780	; 0xc274
   14264:	movt	r1, #1
   14268:	mov	r0, r9
   1426c:	bl	114d0 <strcmp@plt>
   14270:	cmp	r0, #0
   14274:	bne	141c0 <__assert_fail@plt+0x28f4>
   14278:	mov	r2, sp
   1427c:	mov	r1, r6
   14280:	mov	r0, #3
   14284:	bl	115d8 <__fxstat64@plt>
   14288:	cmp	r0, #0
   1428c:	bne	142c4 <__assert_fail@plt+0x29f8>
   14290:	ldrd	r0, [r7, #64]	; 0x40
   14294:	ldrd	r2, [sp]
   14298:	cmp	r1, r3
   1429c:	cmpeq	r0, r2
   142a0:	bne	142b8 <__assert_fail@plt+0x29ec>
   142a4:	ldrd	r0, [r7, #160]	; 0xa0
   142a8:	ldrd	r2, [sp, #96]	; 0x60
   142ac:	cmp	r1, r3
   142b0:	cmpeq	r0, r2
   142b4:	beq	141c0 <__assert_fail@plt+0x28f4>
   142b8:	bl	1171c <__errno_location@plt>
   142bc:	mov	r3, #2
   142c0:	str	r3, [r0]
   142c4:	mvn	r4, #0
   142c8:	cmp	r5, #0
   142cc:	blt	14214 <__assert_fail@plt+0x2948>
   142d0:	mov	r0, r4
   142d4:	add	sp, sp, #108	; 0x6c
   142d8:	ldrd	r4, [sp]
   142dc:	ldrd	r6, [sp, #8]
   142e0:	ldrd	r8, [sp, #16]
   142e4:	add	sp, sp, #24
   142e8:	pop	{pc}		; (ldr pc, [sp], #4)
   142ec:	strd	r4, [sp, #-12]!
   142f0:	str	lr, [sp, #8]
   142f4:	sub	sp, sp, #28
   142f8:	ldr	r3, [r0, #48]	; 0x30
   142fc:	movw	r2, #258	; 0x102
   14300:	tst	r2, r3
   14304:	bne	14370 <__assert_fail@plt+0x2aa4>
   14308:	ldr	ip, [r1, #4]
   1430c:	cmp	ip, #0
   14310:	beq	14398 <__assert_fail@plt+0x2acc>
   14314:	ldr	r3, [ip, #48]	; 0x30
   14318:	cmp	r3, #0
   1431c:	blt	14398 <__assert_fail@plt+0x2acc>
   14320:	ldr	lr, [r0, #56]	; 0x38
   14324:	ldrd	r2, [lr, #16]
   14328:	orrs	r3, r2, r3
   1432c:	beq	143ac <__assert_fail@plt+0x2ae0>
   14330:	ldrd	r4, [lr]
   14334:	ldrd	r2, [r1, #160]	; 0xa0
   14338:	cmp	r5, r3
   1433c:	cmpeq	r4, r2
   14340:	bne	14398 <__assert_fail@plt+0x2acc>
   14344:	ldrd	r2, [lr, #8]
   14348:	ldrd	r4, [r1, #64]	; 0x40
   1434c:	cmp	r3, r5
   14350:	cmpeq	r2, r4
   14354:	bne	14398 <__assert_fail@plt+0x2acc>
   14358:	ldrd	r2, [ip, #64]	; 0x40
   1435c:	strd	r2, [lr, #8]
   14360:	ldr	r3, [r0, #56]	; 0x38
   14364:	ldrd	r0, [ip, #160]	; 0xa0
   14368:	strd	r0, [r3]
   1436c:	b	14398 <__assert_fail@plt+0x2acc>
   14370:	ldrd	r2, [r1, #64]	; 0x40
   14374:	strd	r2, [sp]
   14378:	ldrd	r2, [r1, #160]	; 0xa0
   1437c:	strd	r2, [sp, #8]
   14380:	mov	r1, sp
   14384:	ldr	r0, [r0, #56]	; 0x38
   14388:	bl	16b40 <__assert_fail@plt+0x5274>
   1438c:	cmp	r0, #0
   14390:	beq	143a8 <__assert_fail@plt+0x2adc>
   14394:	bl	13780 <__assert_fail@plt+0x1eb4>
   14398:	add	sp, sp, #28
   1439c:	ldrd	r4, [sp]
   143a0:	add	sp, sp, #8
   143a4:	pop	{pc}		; (ldr pc, [sp], #4)
   143a8:	bl	11878 <abort@plt>
   143ac:	bl	11878 <abort@plt>
   143b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143b4:	strd	r6, [sp, #8]
   143b8:	strd	r8, [sp, #16]
   143bc:	strd	sl, [sp, #24]
   143c0:	str	lr, [sp, #32]
   143c4:	sub	sp, sp, #68	; 0x44
   143c8:	mov	r5, r0
   143cc:	str	r1, [sp, #32]
   143d0:	ldr	r9, [r0]
   143d4:	ldr	r0, [r9, #12]
   143d8:	str	r0, [sp, #40]	; 0x28
   143dc:	cmp	r0, #0
   143e0:	beq	144f0 <__assert_fail@plt+0x2c24>
   143e4:	bl	117e8 <dirfd@plt>
   143e8:	str	r0, [sp, #60]	; 0x3c
   143ec:	cmp	r0, #0
   143f0:	blt	144ac <__assert_fail@plt+0x2be0>
   143f4:	ldr	r2, [r5, #44]	; 0x2c
   143f8:	movw	r3, #34464	; 0x86a0
   143fc:	movt	r3, #1
   14400:	cmp	r2, #0
   14404:	mvnne	r3, #0
   14408:	str	r3, [sp, #16]
   1440c:	mov	r3, #1
   14410:	str	r3, [sp, #52]	; 0x34
   14414:	ldr	r3, [r9, #40]	; 0x28
   14418:	sub	r1, r3, #1
   1441c:	ldr	r2, [r9, #28]
   14420:	ldrb	r2, [r2, r1]
   14424:	cmp	r2, #47	; 0x2f
   14428:	movne	r1, r3
   1442c:	str	r1, [sp, #28]
   14430:	ldr	r3, [r5, #48]	; 0x30
   14434:	tst	r3, #4
   14438:	moveq	r3, #0
   1443c:	streq	r3, [sp, #20]
   14440:	beq	1445c <__assert_fail@plt+0x2b90>
   14444:	ldr	r3, [r5, #24]
   14448:	add	r2, r3, r1
   1444c:	add	r2, r2, #1
   14450:	str	r2, [sp, #20]
   14454:	mov	r2, #47	; 0x2f
   14458:	strb	r2, [r3, r1]
   1445c:	ldr	r3, [sp, #28]
   14460:	add	sl, r3, #1
   14464:	ldr	fp, [r5, #36]	; 0x24
   14468:	sub	fp, fp, sl
   1446c:	ldr	r3, [r9, #48]	; 0x30
   14470:	add	r3, r3, #1
   14474:	str	r3, [sp, #12]
   14478:	mov	r3, #0
   1447c:	str	r3, [sp, #36]	; 0x24
   14480:	str	r3, [sp, #24]
   14484:	str	r3, [sp]
   14488:	mov	r8, r3
   1448c:	str	r3, [sp, #4]
   14490:	movw	r3, #6548	; 0x1994
   14494:	movt	r3, #258	; 0x102
   14498:	str	r3, [sp, #44]	; 0x2c
   1449c:	movw	r3, #19778	; 0x4d42
   144a0:	movt	r3, #65363	; 0xff53
   144a4:	str	r3, [sp, #48]	; 0x30
   144a8:	b	14a88 <__assert_fail@plt+0x31bc>
   144ac:	ldr	r0, [r9, #12]
   144b0:	bl	118b4 <closedir@plt>
   144b4:	mov	r3, #0
   144b8:	str	r3, [r9, #12]
   144bc:	ldr	r3, [sp, #32]
   144c0:	cmp	r3, #3
   144c4:	movne	r3, #0
   144c8:	strne	r3, [sp, #4]
   144cc:	bne	14938 <__assert_fail@plt+0x306c>
   144d0:	mov	r3, #4
   144d4:	strh	r3, [r9, #56]	; 0x38
   144d8:	bl	1171c <__errno_location@plt>
   144dc:	ldr	r3, [r0]
   144e0:	str	r3, [r9, #32]
   144e4:	mov	r3, #0
   144e8:	str	r3, [sp, #4]
   144ec:	b	14938 <__assert_fail@plt+0x306c>
   144f0:	ldr	r3, [r5, #48]	; 0x30
   144f4:	and	r2, r3, #516	; 0x204
   144f8:	cmp	r2, #512	; 0x200
   144fc:	ldreq	r0, [r5, #32]
   14500:	mvnne	r0, #99	; 0x63
   14504:	ldr	r1, [r9, #24]
   14508:	ands	r2, r3, #16
   1450c:	beq	14528 <__assert_fail@plt+0x2c5c>
   14510:	tst	r3, #1
   14514:	moveq	r2, #32768	; 0x8000
   14518:	beq	14528 <__assert_fail@plt+0x2c5c>
   1451c:	ldr	r2, [r9, #48]	; 0x30
   14520:	cmp	r2, #0
   14524:	movne	r2, #32768	; 0x8000
   14528:	add	r3, sp, #60	; 0x3c
   1452c:	bl	17514 <lchmod@@Base+0x6fc>
   14530:	str	r0, [sp, #4]
   14534:	str	r0, [r9, #12]
   14538:	cmp	r0, #0
   1453c:	beq	14610 <__assert_fail@plt+0x2d44>
   14540:	ldrh	r3, [r9, #56]	; 0x38
   14544:	cmp	r3, #11
   14548:	beq	14634 <__assert_fail@plt+0x2d68>
   1454c:	ldr	r3, [r5, #48]	; 0x30
   14550:	tst	r3, #256	; 0x100
   14554:	bne	1464c <__assert_fail@plt+0x2d80>
   14558:	ldr	r2, [r5, #44]	; 0x2c
   1455c:	movw	r3, #34464	; 0x86a0
   14560:	movt	r3, #1
   14564:	cmp	r2, #0
   14568:	mvnne	r3, #0
   1456c:	str	r3, [sp, #16]
   14570:	ldr	r3, [sp, #32]
   14574:	cmp	r3, #2
   14578:	beq	14770 <__assert_fail@plt+0x2ea4>
   1457c:	ldr	r3, [r5, #48]	; 0x30
   14580:	and	r3, r3, #56	; 0x38
   14584:	cmp	r3, #24
   14588:	beq	14694 <__assert_fail@plt+0x2dc8>
   1458c:	ldr	r3, [sp, #32]
   14590:	cmp	r3, #3
   14594:	movne	r4, #0
   14598:	moveq	r4, #1
   1459c:	mov	r6, #1
   145a0:	ldr	r3, [r5, #48]	; 0x30
   145a4:	tst	r3, #512	; 0x200
   145a8:	bne	1472c <__assert_fail@plt+0x2e60>
   145ac:	ldr	r2, [sp, #60]	; 0x3c
   145b0:	cmp	r2, #0
   145b4:	bge	14744 <__assert_fail@plt+0x2e78>
   145b8:	tst	r4, r6
   145bc:	beq	145cc <__assert_fail@plt+0x2d00>
   145c0:	bl	1171c <__errno_location@plt>
   145c4:	ldr	r3, [r0]
   145c8:	str	r3, [r9, #32]
   145cc:	ldrh	r3, [r9, #58]	; 0x3a
   145d0:	orr	r3, r3, #1
   145d4:	strh	r3, [r9, #58]	; 0x3a
   145d8:	ldr	r0, [r9, #12]
   145dc:	bl	118b4 <closedir@plt>
   145e0:	mov	r3, #0
   145e4:	str	r3, [r9, #12]
   145e8:	ldr	r3, [r5, #48]	; 0x30
   145ec:	tst	r3, #512	; 0x200
   145f0:	beq	14600 <__assert_fail@plt+0x2d34>
   145f4:	ldr	r0, [sp, #60]	; 0x3c
   145f8:	cmp	r0, #0
   145fc:	bge	14768 <__assert_fail@plt+0x2e9c>
   14600:	mov	r3, #0
   14604:	str	r3, [r9, #12]
   14608:	str	r3, [sp, #52]	; 0x34
   1460c:	b	14414 <__assert_fail@plt+0x2b48>
   14610:	ldr	r3, [sp, #32]
   14614:	cmp	r3, #3
   14618:	bne	14938 <__assert_fail@plt+0x306c>
   1461c:	mov	r3, #4
   14620:	strh	r3, [r9, #56]	; 0x38
   14624:	bl	1171c <__errno_location@plt>
   14628:	ldr	r3, [r0]
   1462c:	str	r3, [r9, #32]
   14630:	b	14938 <__assert_fail@plt+0x306c>
   14634:	mov	r2, #0
   14638:	mov	r1, r9
   1463c:	mov	r0, r5
   14640:	bl	1395c <__assert_fail@plt+0x2090>
   14644:	strh	r0, [r9, #56]	; 0x38
   14648:	b	14558 <__assert_fail@plt+0x2c8c>
   1464c:	mov	r1, r9
   14650:	mov	r0, r5
   14654:	bl	142ec <__assert_fail@plt+0x2a20>
   14658:	mov	r2, #0
   1465c:	mov	r1, r9
   14660:	mov	r0, r5
   14664:	bl	1395c <__assert_fail@plt+0x2090>
   14668:	mov	r1, r9
   1466c:	mov	r0, r5
   14670:	bl	13f1c <__assert_fail@plt+0x2650>
   14674:	cmp	r0, #0
   14678:	bne	14558 <__assert_fail@plt+0x2c8c>
   1467c:	bl	1171c <__errno_location@plt>
   14680:	mov	r3, #12
   14684:	str	r3, [r0]
   14688:	ldr	r3, [sp, #40]	; 0x28
   1468c:	str	r3, [sp, #4]
   14690:	b	14938 <__assert_fail@plt+0x306c>
   14694:	ldr	r3, [r9, #84]	; 0x54
   14698:	cmp	r3, #2
   1469c:	bne	1458c <__assert_fail@plt+0x2cc0>
   146a0:	ldr	r1, [sp, #60]	; 0x3c
   146a4:	mov	r0, r9
   146a8:	bl	13df0 <__assert_fail@plt+0x2524>
   146ac:	movw	r3, #26985	; 0x6969
   146b0:	cmp	r0, r3
   146b4:	beq	14714 <__assert_fail@plt+0x2e48>
   146b8:	bgt	146f8 <__assert_fail@plt+0x2e2c>
   146bc:	movw	r3, #19778	; 0x4d42
   146c0:	movt	r3, #65363	; 0xff53
   146c4:	cmp	r0, r3
   146c8:	beq	14714 <__assert_fail@plt+0x2e48>
   146cc:	cmp	r0, #0
   146d0:	beq	14714 <__assert_fail@plt+0x2e48>
   146d4:	ldr	r3, [sp, #32]
   146d8:	cmp	r3, #3
   146dc:	moveq	r4, #1
   146e0:	movne	r4, #0
   146e4:	movne	r3, #0
   146e8:	strne	r3, [sp, #52]	; 0x34
   146ec:	bne	14414 <__assert_fail@plt+0x2b48>
   146f0:	mov	r6, #0
   146f4:	b	145a0 <__assert_fail@plt+0x2cd4>
   146f8:	movw	r3, #40864	; 0x9fa0
   146fc:	cmp	r0, r3
   14700:	beq	14714 <__assert_fail@plt+0x2e48>
   14704:	movw	r3, #16719	; 0x414f
   14708:	movt	r3, #21318	; 0x5346
   1470c:	cmp	r0, r3
   14710:	bne	146d4 <__assert_fail@plt+0x2e08>
   14714:	ldr	r3, [sp, #32]
   14718:	cmp	r3, #3
   1471c:	movne	r4, #0
   14720:	moveq	r4, #1
   14724:	mov	r6, #1
   14728:	b	145a0 <__assert_fail@plt+0x2cd4>
   1472c:	mov	r2, #3
   14730:	movw	r1, #1030	; 0x406
   14734:	ldr	r0, [sp, #60]	; 0x3c
   14738:	bl	1b13c <lchmod@@Base+0x4324>
   1473c:	str	r0, [sp, #60]	; 0x3c
   14740:	b	145ac <__assert_fail@plt+0x2ce0>
   14744:	mov	r3, #0
   14748:	mov	r1, r9
   1474c:	mov	r0, r5
   14750:	bl	140e0 <__assert_fail@plt+0x2814>
   14754:	cmp	r0, #0
   14758:	moveq	r3, #1
   1475c:	streq	r3, [sp, #52]	; 0x34
   14760:	beq	14414 <__assert_fail@plt+0x2b48>
   14764:	b	145b8 <__assert_fail@plt+0x2cec>
   14768:	bl	11884 <close@plt>
   1476c:	b	14600 <__assert_fail@plt+0x2d34>
   14770:	mov	r3, #0
   14774:	str	r3, [sp, #52]	; 0x34
   14778:	b	14414 <__assert_fail@plt+0x2b48>
   1477c:	ldr	r3, [sp, #8]
   14780:	ldr	r3, [r3]
   14784:	cmp	r3, #0
   14788:	beq	147a8 <__assert_fail@plt+0x2edc>
   1478c:	str	r3, [r9, #32]
   14790:	ldr	r3, [sp, #40]	; 0x28
   14794:	orr	r3, r3, r8
   14798:	cmp	r3, #0
   1479c:	movne	r3, #7
   147a0:	moveq	r3, #4
   147a4:	strh	r3, [r9, #56]	; 0x38
   147a8:	ldr	r0, [r9, #12]
   147ac:	cmp	r0, #0
   147b0:	beq	147c0 <__assert_fail@plt+0x2ef4>
   147b4:	bl	118b4 <closedir@plt>
   147b8:	mov	r3, #0
   147bc:	str	r3, [r9, #12]
   147c0:	ldr	r3, [sp, #24]
   147c4:	cmp	r3, #0
   147c8:	bne	14c88 <__assert_fail@plt+0x33bc>
   147cc:	ldr	r3, [r5, #48]	; 0x30
   147d0:	tst	r3, #4
   147d4:	beq	14800 <__assert_fail@plt+0x2f34>
   147d8:	ldr	r3, [r5, #36]	; 0x24
   147dc:	cmp	r8, #0
   147e0:	cmpne	r3, sl
   147e4:	bne	147f4 <__assert_fail@plt+0x2f28>
   147e8:	ldr	r3, [sp, #20]
   147ec:	sub	r3, r3, #1
   147f0:	str	r3, [sp, #20]
   147f4:	mov	r3, #0
   147f8:	ldr	r2, [sp, #20]
   147fc:	strb	r3, [r2]
   14800:	ldr	r3, [sp, #52]	; 0x34
   14804:	ldr	r2, [sp, #40]	; 0x28
   14808:	cmp	r2, #0
   1480c:	movne	r3, #0
   14810:	cmp	r3, #0
   14814:	beq	1484c <__assert_fail@plt+0x2f80>
   14818:	ldr	r3, [sp, #32]
   1481c:	cmp	r8, #0
   14820:	cmpne	r3, #1
   14824:	bne	14854 <__assert_fail@plt+0x2f88>
   14828:	ldr	r3, [r9, #48]	; 0x30
   1482c:	cmp	r3, #0
   14830:	bne	14d18 <__assert_fail@plt+0x344c>
   14834:	mov	r0, r5
   14838:	bl	1407c <__assert_fail@plt+0x27b0>
   1483c:	adds	r0, r0, #0
   14840:	movne	r0, #1
   14844:	cmp	r0, #0
   14848:	bne	14d3c <__assert_fail@plt+0x3470>
   1484c:	cmp	r8, #0
   14850:	beq	14d64 <__assert_fail@plt+0x3498>
   14854:	ldr	r3, [sp, #36]	; 0x24
   14858:	cmp	r3, #0
   1485c:	bne	14d9c <__assert_fail@plt+0x34d0>
   14860:	ldr	r3, [r5, #44]	; 0x2c
   14864:	cmp	r3, #0
   14868:	cmpne	r8, #1
   1486c:	bls	14938 <__assert_fail@plt+0x306c>
   14870:	mov	r2, r8
   14874:	ldr	r1, [sp, #4]
   14878:	mov	r0, r5
   1487c:	bl	13acc <__assert_fail@plt+0x2200>
   14880:	str	r0, [sp, #4]
   14884:	b	14938 <__assert_fail@plt+0x306c>
   14888:	ldrb	r3, [r7, #20]
   1488c:	cmp	r3, #0
   14890:	beq	14c80 <__assert_fail@plt+0x33b4>
   14894:	ldrh	r3, [r7, #20]
   14898:	cmp	r3, #46	; 0x2e
   1489c:	bne	14acc <__assert_fail@plt+0x3200>
   148a0:	ldr	r4, [sp]
   148a4:	b	14a84 <__assert_fail@plt+0x31b8>
   148a8:	ldr	fp, [r5, #24]
   148ac:	ldr	r3, [sp, #28]
   148b0:	add	r1, r3, #2
   148b4:	add	r1, r1, r6
   148b8:	mov	r0, r5
   148bc:	bl	138d8 <__assert_fail@plt+0x200c>
   148c0:	cmp	r0, #0
   148c4:	beq	148f4 <__assert_fail@plt+0x3028>
   148c8:	ldr	r3, [r5, #24]
   148cc:	cmp	r3, fp
   148d0:	beq	14958 <__assert_fail@plt+0x308c>
   148d4:	ldr	r2, [r5, #48]	; 0x30
   148d8:	tst	r2, #4
   148dc:	addne	r3, r3, sl
   148e0:	strne	r3, [sp, #20]
   148e4:	ldr	fp, [r5, #36]	; 0x24
   148e8:	sub	fp, fp, sl
   148ec:	str	r0, [sp, #24]
   148f0:	b	14afc <__assert_fail@plt+0x3230>
   148f4:	ldr	r7, [sp, #8]
   148f8:	ldr	r6, [r7]
   148fc:	mov	r0, r4
   14900:	bl	13780 <__assert_fail@plt+0x1eb4>
   14904:	ldr	r0, [sp, #4]
   14908:	bl	13d20 <__assert_fail@plt+0x2454>
   1490c:	ldr	r0, [r9, #12]
   14910:	bl	118b4 <closedir@plt>
   14914:	mov	r2, #0
   14918:	str	r2, [r9, #12]
   1491c:	mov	r3, #7
   14920:	strh	r3, [r9, #56]	; 0x38
   14924:	ldr	r3, [r5, #48]	; 0x30
   14928:	orr	r3, r3, #8192	; 0x2000
   1492c:	str	r3, [r5, #48]	; 0x30
   14930:	str	r6, [r7]
   14934:	str	r2, [sp, #4]
   14938:	ldr	r0, [sp, #4]
   1493c:	add	sp, sp, #68	; 0x44
   14940:	ldrd	r4, [sp]
   14944:	ldrd	r6, [sp, #8]
   14948:	ldrd	r8, [sp, #16]
   1494c:	ldrd	sl, [sp, #24]
   14950:	add	sp, sp, #32
   14954:	pop	{pc}		; (ldr pc, [sp], #4)
   14958:	ldr	r0, [sp, #24]
   1495c:	b	148e4 <__assert_fail@plt+0x3018>
   14960:	mov	r0, r4
   14964:	bl	13780 <__assert_fail@plt+0x1eb4>
   14968:	ldr	r0, [sp, #4]
   1496c:	bl	13d20 <__assert_fail@plt+0x2454>
   14970:	ldr	r0, [r9, #12]
   14974:	bl	118b4 <closedir@plt>
   14978:	mov	r2, #0
   1497c:	str	r2, [r9, #12]
   14980:	mov	r3, #7
   14984:	strh	r3, [r9, #56]	; 0x38
   14988:	ldr	r3, [r5, #48]	; 0x30
   1498c:	orr	r3, r3, #8192	; 0x2000
   14990:	str	r3, [r5, #48]	; 0x30
   14994:	mov	r3, #36	; 0x24
   14998:	ldr	r1, [sp, #8]
   1499c:	str	r3, [r1]
   149a0:	str	r2, [sp, #4]
   149a4:	b	14938 <__assert_fail@plt+0x306c>
   149a8:	ldr	r3, [r4, #28]
   149ac:	str	r3, [r4, #24]
   149b0:	ldr	r2, [r4, #52]	; 0x34
   149b4:	add	r2, r2, #1
   149b8:	add	r1, r4, #168	; 0xa8
   149bc:	ldr	r0, [sp, #20]
   149c0:	bl	11500 <memmove@plt>
   149c4:	b	14b34 <__assert_fail@plt+0x3268>
   149c8:	ubfx	r3, r3, #4, #1
   149cc:	cmp	r2, #10
   149d0:	orrne	r3, r3, #1
   149d4:	cmp	r3, #0
   149d8:	beq	14b64 <__assert_fail@plt+0x3298>
   149dc:	mov	r2, #11
   149e0:	strh	r2, [r4, #56]	; 0x38
   149e4:	ldrb	r2, [r7, #18]
   149e8:	sub	r2, r2, #1
   149ec:	cmp	r2, #11
   149f0:	ldrls	pc, [pc, r2, lsl #2]
   149f4:	b	14bf0 <__assert_fail@plt+0x3324>
   149f8:	andeq	r4, r1, r0, asr #23
   149fc:	andeq	r4, r1, ip, lsr #20
   14a00:	strdeq	r4, [r1], -r0
   14a04:			; <UNDEFINED> instruction: 0x00014bb4
   14a08:	strdeq	r4, [r1], -r0
   14a0c:	andeq	r4, r1, r8, asr #27
   14a10:	strdeq	r4, [r1], -r0
   14a14:	ldrdeq	r4, [r1], -r8
   14a18:	strdeq	r4, [r1], -r0
   14a1c:	andeq	r4, r1, ip, asr #23
   14a20:	strdeq	r4, [r1], -r0
   14a24:	andeq	r4, r1, r4, ror #23
   14a28:	mov	r3, #0
   14a2c:	mov	r2, #8192	; 0x2000
   14a30:	str	r2, [r4, #80]	; 0x50
   14a34:	cmp	r3, #0
   14a38:	movne	r2, #1
   14a3c:	moveq	r2, #2
   14a40:	mov	r3, #0
   14a44:	str	r2, [r4, #112]	; 0x70
   14a48:	str	r3, [r4, #116]	; 0x74
   14a4c:	mov	r3, #0
   14a50:	str	r3, [r4, #8]
   14a54:	ldr	r3, [sp, #4]
   14a58:	cmp	r3, #0
   14a5c:	ldrne	r3, [sp]
   14a60:	strne	r4, [r3, #8]
   14a64:	streq	r4, [sp, #4]
   14a68:	movw	r3, #10000	; 0x2710
   14a6c:	cmp	r8, r3
   14a70:	beq	14c10 <__assert_fail@plt+0x3344>
   14a74:	add	r8, r8, #1
   14a78:	ldr	r3, [sp, #16]
   14a7c:	cmp	r8, r3
   14a80:	bcs	147c0 <__assert_fail@plt+0x2ef4>
   14a84:	str	r4, [sp]
   14a88:	ldr	r3, [r9, #12]
   14a8c:	cmp	r3, #0
   14a90:	beq	147c0 <__assert_fail@plt+0x2ef4>
   14a94:	bl	1171c <__errno_location@plt>
   14a98:	str	r0, [sp, #8]
   14a9c:	mov	r3, #0
   14aa0:	str	r3, [r0]
   14aa4:	ldr	r0, [r9, #12]
   14aa8:	bl	117c4 <readdir64@plt>
   14aac:	subs	r7, r0, #0
   14ab0:	beq	1477c <__assert_fail@plt+0x2eb0>
   14ab4:	ldr	r3, [r5, #48]	; 0x30
   14ab8:	tst	r3, #32
   14abc:	bne	14acc <__assert_fail@plt+0x3200>
   14ac0:	ldrb	r3, [r7, #19]
   14ac4:	cmp	r3, #46	; 0x2e
   14ac8:	beq	14888 <__assert_fail@plt+0x2fbc>
   14acc:	add	r4, r7, #19
   14ad0:	mov	r0, r4
   14ad4:	bl	116e0 <strlen@plt>
   14ad8:	mov	r6, r0
   14adc:	mov	r2, r0
   14ae0:	mov	r1, r4
   14ae4:	mov	r0, r5
   14ae8:	bl	13bbc <__assert_fail@plt+0x22f0>
   14aec:	subs	r4, r0, #0
   14af0:	beq	148f4 <__assert_fail@plt+0x3028>
   14af4:	cmp	fp, r6
   14af8:	bls	148a8 <__assert_fail@plt+0x2fdc>
   14afc:	adds	r6, sl, r6
   14b00:	bcs	14960 <__assert_fail@plt+0x3094>
   14b04:	ldr	r3, [sp, #12]
   14b08:	str	r3, [r4, #48]	; 0x30
   14b0c:	ldr	r3, [r5]
   14b10:	str	r3, [r4, #4]
   14b14:	str	r6, [r4, #40]	; 0x28
   14b18:	ldrd	r2, [r7]
   14b1c:	strd	r2, [r4, #160]	; 0xa0
   14b20:	ldr	r3, [r5, #48]	; 0x30
   14b24:	tst	r3, #4
   14b28:	addeq	r3, r4, #168	; 0xa8
   14b2c:	streq	r3, [r4, #24]
   14b30:	bne	149a8 <__assert_fail@plt+0x30dc>
   14b34:	ldr	r3, [r5, #44]	; 0x2c
   14b38:	cmp	r3, #0
   14b3c:	beq	14b4c <__assert_fail@plt+0x3280>
   14b40:	ldr	r3, [r5, #48]	; 0x30
   14b44:	tst	r3, #1024	; 0x400
   14b48:	beq	14bf8 <__assert_fail@plt+0x332c>
   14b4c:	ldr	r3, [r5, #48]	; 0x30
   14b50:	tst	r3, #8
   14b54:	beq	14b64 <__assert_fail@plt+0x3298>
   14b58:	ldrb	r2, [r7, #18]
   14b5c:	tst	r2, #251	; 0xfb
   14b60:	bne	149c8 <__assert_fail@plt+0x30fc>
   14b64:	mov	r3, #11
   14b68:	strh	r3, [r4, #56]	; 0x38
   14b6c:	ldrb	r3, [r7, #18]
   14b70:	sub	r3, r3, #1
   14b74:	cmp	r3, #11
   14b78:	ldrls	pc, [pc, r3, lsl #2]
   14b7c:	b	14bec <__assert_fail@plt+0x3320>
   14b80:			; <UNDEFINED> instruction: 0x00014bbc
   14b84:	andeq	r4, r1, r8, lsr #20
   14b88:	andeq	r4, r1, ip, ror #23
   14b8c:			; <UNDEFINED> instruction: 0x00014bb0
   14b90:	andeq	r4, r1, ip, ror #23
   14b94:	ldrdeq	r4, [r1], -ip
   14b98:	andeq	r4, r1, ip, ror #23
   14b9c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ba0:	andeq	r4, r1, ip, ror #23
   14ba4:	andeq	r4, r1, r8, asr #23
   14ba8:	andeq	r4, r1, ip, ror #23
   14bac:	andeq	r4, r1, r0, ror #23
   14bb0:	mov	r3, #0
   14bb4:	mov	r2, #16384	; 0x4000
   14bb8:	b	14a30 <__assert_fail@plt+0x3164>
   14bbc:	mov	r3, #0
   14bc0:	mov	r2, #4096	; 0x1000
   14bc4:	b	14a30 <__assert_fail@plt+0x3164>
   14bc8:	mov	r3, #0
   14bcc:	mov	r2, #40960	; 0xa000
   14bd0:	b	14a30 <__assert_fail@plt+0x3164>
   14bd4:	mov	r3, #0
   14bd8:	mov	r2, #32768	; 0x8000
   14bdc:	b	14a30 <__assert_fail@plt+0x3164>
   14be0:	mov	r3, #0
   14be4:	mov	r2, #49152	; 0xc000
   14be8:	b	14a30 <__assert_fail@plt+0x3164>
   14bec:	mov	r3, #0
   14bf0:	mov	r2, #0
   14bf4:	b	14a30 <__assert_fail@plt+0x3164>
   14bf8:	mov	r2, #0
   14bfc:	mov	r1, r4
   14c00:	mov	r0, r5
   14c04:	bl	1395c <__assert_fail@plt+0x2090>
   14c08:	strh	r0, [r4, #56]	; 0x38
   14c0c:	b	14a4c <__assert_fail@plt+0x3180>
   14c10:	ldr	r3, [r5, #44]	; 0x2c
   14c14:	cmp	r3, #0
   14c18:	beq	14c24 <__assert_fail@plt+0x3358>
   14c1c:	movw	r8, #10001	; 0x2711
   14c20:	b	14a84 <__assert_fail@plt+0x31b8>
   14c24:	ldr	r1, [sp, #60]	; 0x3c
   14c28:	mov	r0, r9
   14c2c:	bl	13df0 <__assert_fail@plt+0x2524>
   14c30:	movw	r3, #26985	; 0x6969
   14c34:	cmp	r0, r3
   14c38:	beq	14c68 <__assert_fail@plt+0x339c>
   14c3c:	ldr	r3, [sp, #44]	; 0x2c
   14c40:	cmp	r0, r3
   14c44:	beq	14c74 <__assert_fail@plt+0x33a8>
   14c48:	ldr	r3, [sp, #48]	; 0x30
   14c4c:	cmp	r0, r3
   14c50:	moveq	r3, #0
   14c54:	streq	r3, [sp, #36]	; 0x24
   14c58:	beq	14a74 <__assert_fail@plt+0x31a8>
   14c5c:	mov	r3, #1
   14c60:	str	r3, [sp, #36]	; 0x24
   14c64:	b	14c1c <__assert_fail@plt+0x3350>
   14c68:	mov	r3, #0
   14c6c:	str	r3, [sp, #36]	; 0x24
   14c70:	b	14a74 <__assert_fail@plt+0x31a8>
   14c74:	mov	r3, #0
   14c78:	str	r3, [sp, #36]	; 0x24
   14c7c:	b	14a74 <__assert_fail@plt+0x31a8>
   14c80:	ldr	r4, [sp]
   14c84:	b	14a84 <__assert_fail@plt+0x31b8>
   14c88:	ldr	r1, [r5, #24]
   14c8c:	ldr	r3, [r5, #4]
   14c90:	cmp	r3, #0
   14c94:	bne	14cb0 <__assert_fail@plt+0x33e4>
   14c98:	ldr	r3, [sp, #4]
   14c9c:	b	14ce8 <__assert_fail@plt+0x341c>
   14ca0:	str	r1, [r3, #28]
   14ca4:	ldr	r3, [r3, #8]
   14ca8:	cmp	r3, #0
   14cac:	beq	14c98 <__assert_fail@plt+0x33cc>
   14cb0:	ldr	r2, [r3, #24]
   14cb4:	add	r0, r3, #168	; 0xa8
   14cb8:	cmp	r2, r0
   14cbc:	beq	14ca0 <__assert_fail@plt+0x33d4>
   14cc0:	ldr	r0, [r3, #28]
   14cc4:	sub	r2, r2, r0
   14cc8:	add	r2, r1, r2
   14ccc:	str	r2, [r3, #24]
   14cd0:	b	14ca0 <__assert_fail@plt+0x33d4>
   14cd4:	str	r1, [r3, #28]
   14cd8:	ldr	r2, [r3, #8]
   14cdc:	cmp	r2, #0
   14ce0:	ldreq	r2, [r3, #4]
   14ce4:	mov	r3, r2
   14ce8:	ldr	r2, [r3, #48]	; 0x30
   14cec:	cmp	r2, #0
   14cf0:	blt	147cc <__assert_fail@plt+0x2f00>
   14cf4:	ldr	r2, [r3, #24]
   14cf8:	add	r0, r3, #168	; 0xa8
   14cfc:	cmp	r2, r0
   14d00:	beq	14cd4 <__assert_fail@plt+0x3408>
   14d04:	ldr	r0, [r3, #28]
   14d08:	sub	r2, r2, r0
   14d0c:	add	r2, r1, r2
   14d10:	str	r2, [r3, #24]
   14d14:	b	14cd4 <__assert_fail@plt+0x3408>
   14d18:	movw	r3, #49780	; 0xc274
   14d1c:	movt	r3, #1
   14d20:	mvn	r2, #0
   14d24:	ldr	r1, [r9, #4]
   14d28:	mov	r0, r5
   14d2c:	bl	140e0 <__assert_fail@plt+0x2814>
   14d30:	adds	r0, r0, #0
   14d34:	movne	r0, #1
   14d38:	b	14844 <__assert_fail@plt+0x2f78>
   14d3c:	mov	r3, #7
   14d40:	strh	r3, [r9, #56]	; 0x38
   14d44:	ldr	r3, [r5, #48]	; 0x30
   14d48:	orr	r3, r3, #8192	; 0x2000
   14d4c:	str	r3, [r5, #48]	; 0x30
   14d50:	ldr	r0, [sp, #4]
   14d54:	bl	13d20 <__assert_fail@plt+0x2454>
   14d58:	mov	r3, #0
   14d5c:	str	r3, [sp, #4]
   14d60:	b	14938 <__assert_fail@plt+0x306c>
   14d64:	ldr	r3, [sp, #32]
   14d68:	cmp	r3, #3
   14d6c:	beq	14d84 <__assert_fail@plt+0x34b8>
   14d70:	ldr	r0, [sp, #4]
   14d74:	bl	13d20 <__assert_fail@plt+0x2454>
   14d78:	mov	r3, #0
   14d7c:	str	r3, [sp, #4]
   14d80:	b	14938 <__assert_fail@plt+0x306c>
   14d84:	ldrh	r3, [r9, #56]	; 0x38
   14d88:	cmp	r3, #7
   14d8c:	cmpne	r3, #4
   14d90:	movne	r3, #6
   14d94:	strhne	r3, [r9, #56]	; 0x38
   14d98:	b	14d70 <__assert_fail@plt+0x34a4>
   14d9c:	movw	r3, #14492	; 0x389c
   14da0:	movt	r3, #1
   14da4:	str	r3, [r5, #44]	; 0x2c
   14da8:	mov	r2, r8
   14dac:	ldr	r1, [sp, #4]
   14db0:	mov	r0, r5
   14db4:	bl	13acc <__assert_fail@plt+0x2200>
   14db8:	str	r0, [sp, #4]
   14dbc:	mov	r3, #0
   14dc0:	str	r3, [r5, #44]	; 0x2c
   14dc4:	b	14938 <__assert_fail@plt+0x306c>
   14dc8:	mov	r3, #24576	; 0x6000
   14dcc:	str	r3, [r4, #80]	; 0x50
   14dd0:	mov	r2, #1
   14dd4:	mov	r3, #0
   14dd8:	b	14a44 <__assert_fail@plt+0x3178>
   14ddc:	mov	r3, #24576	; 0x6000
   14de0:	str	r3, [r4, #80]	; 0x50
   14de4:	mov	r2, #2
   14de8:	mov	r3, #0
   14dec:	b	14a44 <__assert_fail@plt+0x3178>
   14df0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14df4:	strd	r6, [sp, #8]
   14df8:	strd	r8, [sp, #16]
   14dfc:	strd	sl, [sp, #24]
   14e00:	str	lr, [sp, #32]
   14e04:	sub	sp, sp, #20
   14e08:	bic	r3, r1, #4080	; 0xff0
   14e0c:	bic	r3, r3, #15
   14e10:	cmp	r3, #0
   14e14:	bne	14ef4 <__assert_fail@plt+0x3628>
   14e18:	mov	r6, r0
   14e1c:	mov	r9, r1
   14e20:	mov	sl, r2
   14e24:	and	r3, r1, #516	; 0x204
   14e28:	cmp	r3, #516	; 0x204
   14e2c:	beq	14f08 <__assert_fail@plt+0x363c>
   14e30:	tst	r1, #18
   14e34:	beq	14f1c <__assert_fail@plt+0x3650>
   14e38:	mov	r1, #96	; 0x60
   14e3c:	mov	r0, #1
   14e40:	bl	1ad18 <lchmod@@Base+0x3f00>
   14e44:	subs	r5, r0, #0
   14e48:	beq	15144 <__assert_fail@plt+0x3878>
   14e4c:	str	sl, [r5, #44]	; 0x2c
   14e50:	tst	r9, #2
   14e54:	streq	r9, [r5, #48]	; 0x30
   14e58:	bicne	r3, r9, #512	; 0x200
   14e5c:	orrne	r3, r3, #4
   14e60:	strne	r3, [r5, #48]	; 0x30
   14e64:	mvn	r3, #99	; 0x63
   14e68:	str	r3, [r5, #32]
   14e6c:	ldr	r0, [r6]
   14e70:	cmp	r0, #0
   14e74:	beq	14f30 <__assert_fail@plt+0x3664>
   14e78:	mov	r7, r6
   14e7c:	mov	r4, #0
   14e80:	bl	116e0 <strlen@plt>
   14e84:	cmp	r4, r0
   14e88:	movcc	r4, r0
   14e8c:	ldr	r0, [r7, #4]!
   14e90:	cmp	r0, #0
   14e94:	bne	14e80 <__assert_fail@plt+0x35b4>
   14e98:	add	r1, r4, #1
   14e9c:	cmp	r1, #4096	; 0x1000
   14ea0:	movcc	r1, #4096	; 0x1000
   14ea4:	mov	r0, r5
   14ea8:	bl	138d8 <__assert_fail@plt+0x200c>
   14eac:	cmp	r0, #0
   14eb0:	beq	15138 <__assert_fail@plt+0x386c>
   14eb4:	ldr	fp, [r6]
   14eb8:	cmp	fp, #0
   14ebc:	beq	15164 <__assert_fail@plt+0x3898>
   14ec0:	mov	r2, #0
   14ec4:	movw	r1, #49884	; 0xc2dc
   14ec8:	movt	r1, #1
   14ecc:	mov	r0, r5
   14ed0:	bl	13bbc <__assert_fail@plt+0x22f0>
   14ed4:	subs	fp, r0, #0
   14ed8:	beq	15130 <__assert_fail@plt+0x3864>
   14edc:	mvn	r3, #0
   14ee0:	str	r3, [fp, #48]	; 0x30
   14ee4:	cmp	sl, #0
   14ee8:	moveq	r3, #1
   14eec:	bne	1516c <__assert_fail@plt+0x38a0>
   14ef0:	b	15174 <__assert_fail@plt+0x38a8>
   14ef4:	bl	1171c <__errno_location@plt>
   14ef8:	mov	r3, #22
   14efc:	str	r3, [r0]
   14f00:	mov	r5, #0
   14f04:	b	15144 <__assert_fail@plt+0x3878>
   14f08:	bl	1171c <__errno_location@plt>
   14f0c:	mov	r3, #22
   14f10:	str	r3, [r0]
   14f14:	mov	r5, #0
   14f18:	b	15144 <__assert_fail@plt+0x3878>
   14f1c:	bl	1171c <__errno_location@plt>
   14f20:	mov	r3, #22
   14f24:	str	r3, [r0]
   14f28:	mov	r5, #0
   14f2c:	b	15144 <__assert_fail@plt+0x3878>
   14f30:	mov	r4, #0
   14f34:	b	14e98 <__assert_fail@plt+0x35cc>
   14f38:	sub	r1, r0, #1
   14f3c:	ldrb	r3, [r4, r1]
   14f40:	cmp	r3, #47	; 0x2f
   14f44:	bne	14fd0 <__assert_fail@plt+0x3704>
   14f48:	sub	r0, r0, #2
   14f4c:	add	r3, r4, r0
   14f50:	ldrb	r0, [r4, r0]
   14f54:	cmp	r0, #47	; 0x2f
   14f58:	moveq	r2, r1
   14f5c:	bne	14fd0 <__assert_fail@plt+0x3704>
   14f60:	ldrb	r1, [r3, #-1]!
   14f64:	cmp	r1, #47	; 0x2f
   14f68:	bne	14fd0 <__assert_fail@plt+0x3704>
   14f6c:	sub	r2, r2, #1
   14f70:	cmp	r2, #1
   14f74:	bhi	14f60 <__assert_fail@plt+0x3694>
   14f78:	b	14fd0 <__assert_fail@plt+0x3704>
   14f7c:	mov	r2, r9
   14f80:	mov	r1, r4
   14f84:	ldr	r0, [sp, #4]
   14f88:	bl	1395c <__assert_fail@plt+0x2090>
   14f8c:	strh	r0, [r4, #56]	; 0x38
   14f90:	cmp	sl, #0
   14f94:	beq	15038 <__assert_fail@plt+0x376c>
   14f98:	str	r7, [r4, #8]
   14f9c:	mov	r7, r4
   14fa0:	add	r8, r8, #1
   14fa4:	ldr	r4, [r6, #4]!
   14fa8:	cmp	r4, #0
   14fac:	beq	15050 <__assert_fail@plt+0x3784>
   14fb0:	mov	r0, r4
   14fb4:	bl	116e0 <strlen@plt>
   14fb8:	mov	r2, r0
   14fbc:	cmp	r0, #2
   14fc0:	movls	r3, #0
   14fc4:	andhi	r3, r5, #1
   14fc8:	cmp	r3, #0
   14fcc:	bne	14f38 <__assert_fail@plt+0x366c>
   14fd0:	mov	r1, r4
   14fd4:	ldr	r0, [sp, #4]
   14fd8:	bl	13bbc <__assert_fail@plt+0x22f0>
   14fdc:	subs	r4, r0, #0
   14fe0:	beq	1511c <__assert_fail@plt+0x3850>
   14fe4:	str	r9, [r4, #48]	; 0x30
   14fe8:	str	fp, [r4, #4]
   14fec:	add	r3, r4, #168	; 0xa8
   14ff0:	str	r3, [r4, #24]
   14ff4:	ldr	r3, [sp, #8]
   14ff8:	cmp	r7, #0
   14ffc:	moveq	r3, #0
   15000:	cmp	r3, #0
   15004:	beq	14f7c <__assert_fail@plt+0x36b0>
   15008:	mov	r3, #11
   1500c:	strh	r3, [r4, #56]	; 0x38
   15010:	mov	r2, #2
   15014:	mov	r3, #0
   15018:	strd	r2, [r4, #112]	; 0x70
   1501c:	cmp	sl, #0
   15020:	bne	14f98 <__assert_fail@plt+0x36cc>
   15024:	str	r9, [r4, #8]
   15028:	ldr	r3, [sp, #12]
   1502c:	str	r4, [r3, #8]
   15030:	str	r4, [sp, #12]
   15034:	b	14fa0 <__assert_fail@plt+0x36d4>
   15038:	str	r9, [r4, #8]
   1503c:	cmp	r7, #0
   15040:	streq	r4, [sp, #12]
   15044:	moveq	r7, r4
   15048:	beq	14fa0 <__assert_fail@plt+0x36d4>
   1504c:	b	15028 <__assert_fail@plt+0x375c>
   15050:	ldr	r5, [sp, #4]
   15054:	cmp	sl, #0
   15058:	cmpne	r8, #1
   1505c:	bhi	150c8 <__assert_fail@plt+0x37fc>
   15060:	mov	r2, #0
   15064:	movw	r1, #49884	; 0xc2dc
   15068:	movt	r1, #1
   1506c:	mov	r0, r5
   15070:	bl	13bbc <__assert_fail@plt+0x22f0>
   15074:	str	r0, [r5]
   15078:	cmp	r0, #0
   1507c:	beq	15120 <__assert_fail@plt+0x3854>
   15080:	str	r7, [r0, #8]
   15084:	ldr	r3, [r5]
   15088:	mov	r2, #9
   1508c:	strh	r2, [r3, #56]	; 0x38
   15090:	ldr	r3, [r5]
   15094:	mov	r2, #1
   15098:	str	r2, [r3, #48]	; 0x30
   1509c:	mov	r0, r5
   150a0:	bl	13c4c <__assert_fail@plt+0x2380>
   150a4:	cmp	r0, #0
   150a8:	beq	15120 <__assert_fail@plt+0x3854>
   150ac:	ldr	r3, [r5, #48]	; 0x30
   150b0:	tst	r3, #516	; 0x204
   150b4:	beq	150f0 <__assert_fail@plt+0x3824>
   150b8:	mvn	r1, #0
   150bc:	add	r0, r5, #60	; 0x3c
   150c0:	bl	16d48 <__assert_fail@plt+0x547c>
   150c4:	b	15144 <__assert_fail@plt+0x3878>
   150c8:	mov	r2, r8
   150cc:	mov	r1, r7
   150d0:	mov	r0, r5
   150d4:	bl	13acc <__assert_fail@plt+0x2200>
   150d8:	mov	r7, r0
   150dc:	b	15060 <__assert_fail@plt+0x3794>
   150e0:	mov	r7, r4
   150e4:	b	15060 <__assert_fail@plt+0x3794>
   150e8:	mov	r7, fp
   150ec:	b	15060 <__assert_fail@plt+0x3794>
   150f0:	movw	r1, #49344	; 0xc0c0
   150f4:	movt	r1, #1
   150f8:	mov	r0, r5
   150fc:	bl	13cd4 <__assert_fail@plt+0x2408>
   15100:	str	r0, [r5, #28]
   15104:	cmp	r0, #0
   15108:	bge	150b8 <__assert_fail@plt+0x37ec>
   1510c:	ldr	r3, [r5, #48]	; 0x30
   15110:	orr	r3, r3, #4
   15114:	str	r3, [r5, #48]	; 0x30
   15118:	b	150b8 <__assert_fail@plt+0x37ec>
   1511c:	ldr	r5, [sp, #4]
   15120:	mov	r0, r7
   15124:	bl	13d20 <__assert_fail@plt+0x2454>
   15128:	mov	r0, fp
   1512c:	bl	13780 <__assert_fail@plt+0x1eb4>
   15130:	ldr	r0, [r5, #24]
   15134:	bl	13780 <__assert_fail@plt+0x1eb4>
   15138:	mov	r0, r5
   1513c:	bl	13780 <__assert_fail@plt+0x1eb4>
   15140:	mov	r5, #0
   15144:	mov	r0, r5
   15148:	add	sp, sp, #20
   1514c:	ldrd	r4, [sp]
   15150:	ldrd	r6, [sp, #8]
   15154:	ldrd	r8, [sp, #16]
   15158:	ldrd	sl, [sp, #24]
   1515c:	add	sp, sp, #32
   15160:	pop	{pc}		; (ldr pc, [sp], #4)
   15164:	cmp	sl, #0
   15168:	beq	150e8 <__assert_fail@plt+0x381c>
   1516c:	ldr	r3, [r5, #48]	; 0x30
   15170:	ubfx	r3, r3, #10, #1
   15174:	str	r3, [sp, #8]
   15178:	ldr	r4, [r6]
   1517c:	cmp	r4, #0
   15180:	beq	150e0 <__assert_fail@plt+0x3814>
   15184:	mov	r3, #0
   15188:	mov	r7, r3
   1518c:	str	r3, [sp, #12]
   15190:	mov	r8, r3
   15194:	eor	r9, r9, #2048	; 0x800
   15198:	ubfx	r3, r9, #11, #1
   1519c:	mov	r9, r7
   151a0:	str	r5, [sp, #4]
   151a4:	mov	r5, r3
   151a8:	b	14fb0 <__assert_fail@plt+0x36e4>
   151ac:	strd	r4, [sp, #-16]!
   151b0:	str	r6, [sp, #8]
   151b4:	str	lr, [sp, #12]
   151b8:	mov	r5, r0
   151bc:	ldr	r0, [r0]
   151c0:	cmp	r0, #0
   151c4:	beq	151fc <__assert_fail@plt+0x3930>
   151c8:	ldr	r3, [r0, #48]	; 0x30
   151cc:	cmp	r3, #0
   151d0:	blt	1524c <__assert_fail@plt+0x3980>
   151d4:	ldr	r4, [r0, #8]
   151d8:	cmp	r4, #0
   151dc:	ldreq	r4, [r0, #4]
   151e0:	bl	13780 <__assert_fail@plt+0x1eb4>
   151e4:	mov	r0, r4
   151e8:	ldr	r3, [r4, #48]	; 0x30
   151ec:	cmp	r3, #0
   151f0:	bge	151d4 <__assert_fail@plt+0x3908>
   151f4:	mov	r0, r4
   151f8:	bl	13780 <__assert_fail@plt+0x1eb4>
   151fc:	ldr	r0, [r5, #4]
   15200:	cmp	r0, #0
   15204:	beq	1520c <__assert_fail@plt+0x3940>
   15208:	bl	13d20 <__assert_fail@plt+0x2454>
   1520c:	ldr	r0, [r5, #8]
   15210:	bl	13780 <__assert_fail@plt+0x1eb4>
   15214:	ldr	r0, [r5, #24]
   15218:	bl	13780 <__assert_fail@plt+0x1eb4>
   1521c:	ldr	r3, [r5, #48]	; 0x30
   15220:	tst	r3, #512	; 0x200
   15224:	beq	15254 <__assert_fail@plt+0x3988>
   15228:	ldr	r0, [r5, #32]
   1522c:	cmp	r0, #0
   15230:	blt	1525c <__assert_fail@plt+0x3990>
   15234:	bl	11884 <close@plt>
   15238:	cmp	r0, #0
   1523c:	beq	1525c <__assert_fail@plt+0x3990>
   15240:	bl	1171c <__errno_location@plt>
   15244:	ldr	r4, [r0]
   15248:	b	152dc <__assert_fail@plt+0x3a10>
   1524c:	mov	r4, r0
   15250:	b	151f4 <__assert_fail@plt+0x3928>
   15254:	tst	r3, #4
   15258:	beq	152a4 <__assert_fail@plt+0x39d8>
   1525c:	add	r0, r5, #60	; 0x3c
   15260:	bl	13db0 <__assert_fail@plt+0x24e4>
   15264:	ldr	r0, [r5, #52]	; 0x34
   15268:	cmp	r0, #0
   1526c:	movne	r4, #0
   15270:	beq	15310 <__assert_fail@plt+0x3a44>
   15274:	bl	16718 <__assert_fail@plt+0x4e4c>
   15278:	mov	r0, r5
   1527c:	bl	13d70 <__assert_fail@plt+0x24a4>
   15280:	mov	r0, r5
   15284:	bl	13780 <__assert_fail@plt+0x1eb4>
   15288:	cmp	r4, #0
   1528c:	bne	15300 <__assert_fail@plt+0x3a34>
   15290:	mov	r0, r4
   15294:	ldrd	r4, [sp]
   15298:	ldr	r6, [sp, #8]
   1529c:	add	sp, sp, #12
   152a0:	pop	{pc}		; (ldr pc, [sp], #4)
   152a4:	ldr	r0, [r5, #28]
   152a8:	bl	117f4 <fchdir@plt>
   152ac:	subs	r4, r0, #0
   152b0:	beq	152bc <__assert_fail@plt+0x39f0>
   152b4:	bl	1171c <__errno_location@plt>
   152b8:	ldr	r4, [r0]
   152bc:	ldr	r0, [r5, #28]
   152c0:	bl	11884 <close@plt>
   152c4:	adds	r0, r0, #0
   152c8:	movne	r0, #1
   152cc:	cmp	r4, #0
   152d0:	movne	r0, #0
   152d4:	cmp	r0, #0
   152d8:	bne	152f4 <__assert_fail@plt+0x3a28>
   152dc:	add	r0, r5, #60	; 0x3c
   152e0:	bl	13db0 <__assert_fail@plt+0x24e4>
   152e4:	ldr	r0, [r5, #52]	; 0x34
   152e8:	cmp	r0, #0
   152ec:	bne	15274 <__assert_fail@plt+0x39a8>
   152f0:	b	15278 <__assert_fail@plt+0x39ac>
   152f4:	bl	1171c <__errno_location@plt>
   152f8:	ldr	r4, [r0]
   152fc:	b	152dc <__assert_fail@plt+0x3a10>
   15300:	bl	1171c <__errno_location@plt>
   15304:	str	r4, [r0]
   15308:	mvn	r4, #0
   1530c:	b	15290 <__assert_fail@plt+0x39c4>
   15310:	mov	r0, r5
   15314:	bl	13d70 <__assert_fail@plt+0x24a4>
   15318:	mov	r0, r5
   1531c:	bl	13780 <__assert_fail@plt+0x1eb4>
   15320:	mov	r4, #0
   15324:	b	15290 <__assert_fail@plt+0x39c4>
   15328:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1532c:	strd	r6, [sp, #8]
   15330:	str	r8, [sp, #16]
   15334:	str	lr, [sp, #20]
   15338:	ldr	r5, [r0]
   1533c:	cmp	r5, #0
   15340:	beq	159a0 <__assert_fail@plt+0x40d4>
   15344:	ldr	r3, [r0, #48]	; 0x30
   15348:	tst	r3, #8192	; 0x2000
   1534c:	bne	1599c <__assert_fail@plt+0x40d0>
   15350:	mov	r8, r0
   15354:	ldrh	r3, [r5, #60]	; 0x3c
   15358:	mov	r2, #3
   1535c:	strh	r2, [r5, #60]	; 0x3c
   15360:	cmp	r3, #1
   15364:	beq	153e0 <__assert_fail@plt+0x3b14>
   15368:	cmp	r3, #2
   1536c:	beq	153f4 <__assert_fail@plt+0x3b28>
   15370:	ldrh	r2, [r5, #56]	; 0x38
   15374:	cmp	r2, #1
   15378:	bne	15674 <__assert_fail@plt+0x3da8>
   1537c:	cmp	r3, #4
   15380:	beq	153a4 <__assert_fail@plt+0x3ad8>
   15384:	ldr	r1, [r8, #48]	; 0x30
   15388:	tst	r1, #64	; 0x40
   1538c:	beq	15488 <__assert_fail@plt+0x3bbc>
   15390:	ldrd	r6, [r5, #64]	; 0x40
   15394:	ldrd	r2, [r8, #16]
   15398:	cmp	r7, r3
   1539c:	cmpeq	r6, r2
   153a0:	beq	15488 <__assert_fail@plt+0x3bbc>
   153a4:	ldrh	r3, [r5, #58]	; 0x3a
   153a8:	tst	r3, #2
   153ac:	bne	1547c <__assert_fail@plt+0x3bb0>
   153b0:	ldr	r0, [r8, #4]
   153b4:	cmp	r0, #0
   153b8:	beq	153c8 <__assert_fail@plt+0x3afc>
   153bc:	bl	13d20 <__assert_fail@plt+0x2454>
   153c0:	mov	r3, #0
   153c4:	str	r3, [r8, #4]
   153c8:	mov	r3, #6
   153cc:	strh	r3, [r5, #56]	; 0x38
   153d0:	mov	r1, r5
   153d4:	mov	r0, r8
   153d8:	bl	142ec <__assert_fail@plt+0x2a20>
   153dc:	b	159a0 <__assert_fail@plt+0x40d4>
   153e0:	mov	r2, #0
   153e4:	mov	r1, r5
   153e8:	bl	1395c <__assert_fail@plt+0x2090>
   153ec:	strh	r0, [r5, #56]	; 0x38
   153f0:	b	159a0 <__assert_fail@plt+0x40d4>
   153f4:	ldrh	r2, [r5, #56]	; 0x38
   153f8:	sub	r3, r2, #12
   153fc:	uxth	r3, r3
   15400:	cmp	r3, #1
   15404:	bls	15414 <__assert_fail@plt+0x3b48>
   15408:	cmp	r2, #1
   1540c:	bne	15674 <__assert_fail@plt+0x3da8>
   15410:	b	15384 <__assert_fail@plt+0x3ab8>
   15414:	mov	r2, #1
   15418:	mov	r1, r5
   1541c:	bl	1395c <__assert_fail@plt+0x2090>
   15420:	strh	r0, [r5, #56]	; 0x38
   15424:	cmp	r0, #1
   15428:	bne	15504 <__assert_fail@plt+0x3c38>
   1542c:	ldr	r3, [r8, #48]	; 0x30
   15430:	tst	r3, #4
   15434:	bne	15504 <__assert_fail@plt+0x3c38>
   15438:	movw	r1, #49344	; 0xc0c0
   1543c:	movt	r1, #1
   15440:	mov	r0, r8
   15444:	bl	13cd4 <__assert_fail@plt+0x2408>
   15448:	str	r0, [r5, #36]	; 0x24
   1544c:	cmp	r0, #0
   15450:	blt	15464 <__assert_fail@plt+0x3b98>
   15454:	ldrh	r3, [r5, #58]	; 0x3a
   15458:	orr	r3, r3, #2
   1545c:	strh	r3, [r5, #58]	; 0x3a
   15460:	b	15504 <__assert_fail@plt+0x3c38>
   15464:	bl	1171c <__errno_location@plt>
   15468:	ldr	r3, [r0]
   1546c:	str	r3, [r5, #32]
   15470:	mov	r3, #7
   15474:	strh	r3, [r5, #56]	; 0x38
   15478:	b	15504 <__assert_fail@plt+0x3c38>
   1547c:	ldr	r0, [r5, #36]	; 0x24
   15480:	bl	11884 <close@plt>
   15484:	b	153b0 <__assert_fail@plt+0x3ae4>
   15488:	ldr	r0, [r8, #4]
   1548c:	cmp	r0, #0
   15490:	beq	1556c <__assert_fail@plt+0x3ca0>
   15494:	tst	r1, #4096	; 0x1000
   15498:	bne	15558 <__assert_fail@plt+0x3c8c>
   1549c:	ldr	r3, [r5, #24]
   154a0:	mvn	r2, #0
   154a4:	mov	r1, r5
   154a8:	mov	r0, r8
   154ac:	bl	140e0 <__assert_fail@plt+0x2814>
   154b0:	cmp	r0, #0
   154b4:	bne	155c0 <__assert_fail@plt+0x3cf4>
   154b8:	ldr	r5, [r8, #4]
   154bc:	mov	r3, #0
   154c0:	str	r3, [r8, #4]
   154c4:	ldr	r2, [r8, #24]
   154c8:	ldr	r0, [r5, #4]
   154cc:	ldr	r1, [r0, #40]	; 0x28
   154d0:	sub	r3, r1, #1
   154d4:	ldr	r0, [r0, #28]
   154d8:	ldrb	r0, [r0, r3]
   154dc:	cmp	r0, #47	; 0x2f
   154e0:	movne	r3, r1
   154e4:	add	r0, r2, r3
   154e8:	mov	r1, #47	; 0x2f
   154ec:	strb	r1, [r2, r3]
   154f0:	ldr	r2, [r5, #52]	; 0x34
   154f4:	add	r2, r2, #1
   154f8:	add	r1, r5, #168	; 0xa8
   154fc:	add	r0, r0, #1
   15500:	bl	11500 <memmove@plt>
   15504:	str	r5, [r8]
   15508:	ldrh	r3, [r5, #56]	; 0x38
   1550c:	cmp	r3, #11
   15510:	beq	15894 <__assert_fail@plt+0x3fc8>
   15514:	ldrh	r3, [r5, #56]	; 0x38
   15518:	cmp	r3, #1
   1551c:	bne	159a0 <__assert_fail@plt+0x40d4>
   15520:	ldr	r3, [r5, #48]	; 0x30
   15524:	cmp	r3, #0
   15528:	ldrdeq	r2, [r5, #64]	; 0x40
   1552c:	strdeq	r2, [r8, #16]
   15530:	mov	r1, r5
   15534:	mov	r0, r8
   15538:	bl	13f1c <__assert_fail@plt+0x2650>
   1553c:	cmp	r0, #0
   15540:	bne	159a0 <__assert_fail@plt+0x40d4>
   15544:	bl	1171c <__errno_location@plt>
   15548:	mov	r3, #12
   1554c:	str	r3, [r0]
   15550:	mov	r5, #0
   15554:	b	159a0 <__assert_fail@plt+0x40d4>
   15558:	bic	r1, r1, #4096	; 0x1000
   1555c:	str	r1, [r8, #48]	; 0x30
   15560:	bl	13d20 <__assert_fail@plt+0x2454>
   15564:	mov	r3, #0
   15568:	str	r3, [r8, #4]
   1556c:	mov	r1, #3
   15570:	mov	r0, r8
   15574:	bl	143b0 <__assert_fail@plt+0x2ae4>
   15578:	str	r0, [r8, #4]
   1557c:	cmp	r0, #0
   15580:	bne	154b8 <__assert_fail@plt+0x3bec>
   15584:	ldr	r3, [r8, #48]	; 0x30
   15588:	tst	r3, #8192	; 0x2000
   1558c:	movne	r5, r0
   15590:	bne	159a0 <__assert_fail@plt+0x40d4>
   15594:	ldr	r3, [r5, #32]
   15598:	cmp	r3, #0
   1559c:	beq	155b0 <__assert_fail@plt+0x3ce4>
   155a0:	ldrh	r3, [r5, #56]	; 0x38
   155a4:	cmp	r3, #4
   155a8:	movne	r3, #7
   155ac:	strhne	r3, [r5, #56]	; 0x38
   155b0:	mov	r1, r5
   155b4:	mov	r0, r8
   155b8:	bl	142ec <__assert_fail@plt+0x2a20>
   155bc:	b	159a0 <__assert_fail@plt+0x40d4>
   155c0:	bl	1171c <__errno_location@plt>
   155c4:	ldr	r3, [r0]
   155c8:	str	r3, [r5, #32]
   155cc:	ldrh	r3, [r5, #58]	; 0x3a
   155d0:	orr	r3, r3, #1
   155d4:	strh	r3, [r5, #58]	; 0x3a
   155d8:	ldr	r3, [r8, #4]
   155dc:	cmp	r3, #0
   155e0:	beq	154b8 <__assert_fail@plt+0x3bec>
   155e4:	ldr	r2, [r3, #4]
   155e8:	ldr	r2, [r2, #24]
   155ec:	str	r2, [r3, #24]
   155f0:	ldr	r3, [r3, #8]
   155f4:	cmp	r3, #0
   155f8:	bne	155e4 <__assert_fail@plt+0x3d18>
   155fc:	b	154b8 <__assert_fail@plt+0x3bec>
   15600:	str	r3, [r8]
   15604:	ldr	r2, [r8, #24]
   15608:	ldr	r3, [r3, #40]	; 0x28
   1560c:	mov	r1, #0
   15610:	strb	r1, [r2, r3]
   15614:	mov	r1, #3
   15618:	mov	r0, r8
   1561c:	bl	143b0 <__assert_fail@plt+0x2ae4>
   15620:	subs	r6, r0, #0
   15624:	bne	1563c <__assert_fail@plt+0x3d70>
   15628:	ldr	r3, [r8, #48]	; 0x30
   1562c:	tst	r3, #8192	; 0x2000
   15630:	beq	15690 <__assert_fail@plt+0x3dc4>
   15634:	mov	r5, r6
   15638:	b	159a0 <__assert_fail@plt+0x40d4>
   1563c:	mov	r0, r5
   15640:	bl	13780 <__assert_fail@plt+0x1eb4>
   15644:	mov	r5, r6
   15648:	b	154c4 <__assert_fail@plt+0x3bf8>
   1564c:	str	r4, [r8]
   15650:	mov	r0, r5
   15654:	bl	13780 <__assert_fail@plt+0x1eb4>
   15658:	ldr	r3, [r4, #48]	; 0x30
   1565c:	cmp	r3, #0
   15660:	beq	15758 <__assert_fail@plt+0x3e8c>
   15664:	ldrh	r3, [r4, #60]	; 0x3c
   15668:	mov	r5, r4
   1566c:	cmp	r3, #4
   15670:	bne	1580c <__assert_fail@plt+0x3f40>
   15674:	ldr	r4, [r5, #8]
   15678:	cmp	r4, #0
   1567c:	bne	1564c <__assert_fail@plt+0x3d80>
   15680:	ldr	r3, [r5, #4]
   15684:	ldr	r2, [r3, #12]
   15688:	cmp	r2, #0
   1568c:	bne	15600 <__assert_fail@plt+0x3d34>
   15690:	ldr	r6, [r5, #4]
   15694:	str	r6, [r8]
   15698:	mov	r0, r5
   1569c:	bl	13780 <__assert_fail@plt+0x1eb4>
   156a0:	ldr	r3, [r6, #48]	; 0x30
   156a4:	cmn	r3, #1
   156a8:	beq	158cc <__assert_fail@plt+0x4000>
   156ac:	ldrh	r3, [r6, #56]	; 0x38
   156b0:	cmp	r3, #11
   156b4:	beq	158ec <__assert_fail@plt+0x4020>
   156b8:	ldr	r2, [r8, #24]
   156bc:	ldr	r3, [r6, #40]	; 0x28
   156c0:	mov	r1, #0
   156c4:	strb	r1, [r2, r3]
   156c8:	ldr	r3, [r6, #48]	; 0x30
   156cc:	cmp	r3, r1
   156d0:	beq	158f0 <__assert_fail@plt+0x4024>
   156d4:	ldrh	r3, [r6, #58]	; 0x3a
   156d8:	tst	r3, #2
   156dc:	beq	15958 <__assert_fail@plt+0x408c>
   156e0:	ldr	r3, [r8, #48]	; 0x30
   156e4:	tst	r3, #4
   156e8:	bne	15704 <__assert_fail@plt+0x3e38>
   156ec:	tst	r3, #512	; 0x200
   156f0:	beq	1592c <__assert_fail@plt+0x4060>
   156f4:	mov	r2, #1
   156f8:	ldr	r1, [r6, #36]	; 0x24
   156fc:	mov	r0, r8
   15700:	bl	13fe4 <__assert_fail@plt+0x2718>
   15704:	ldr	r0, [r6, #36]	; 0x24
   15708:	bl	11884 <close@plt>
   1570c:	ldrh	r3, [r6, #56]	; 0x38
   15710:	cmp	r3, #2
   15714:	beq	15740 <__assert_fail@plt+0x3e74>
   15718:	ldr	r3, [r6, #32]
   1571c:	cmp	r3, #0
   15720:	movne	r3, #7
   15724:	strhne	r3, [r6, #56]	; 0x38
   15728:	bne	15740 <__assert_fail@plt+0x3e74>
   1572c:	mov	r3, #6
   15730:	strh	r3, [r6, #56]	; 0x38
   15734:	mov	r1, r6
   15738:	mov	r0, r8
   1573c:	bl	142ec <__assert_fail@plt+0x2a20>
   15740:	ldr	r5, [r8, #48]	; 0x30
   15744:	and	r5, r5, #8192	; 0x2000
   15748:	cmp	r5, #0
   1574c:	moveq	r5, r6
   15750:	movne	r5, r4
   15754:	b	159a0 <__assert_fail@plt+0x40d4>
   15758:	mov	r0, r8
   1575c:	bl	1407c <__assert_fail@plt+0x27b0>
   15760:	cmp	r0, #0
   15764:	bne	157e8 <__assert_fail@plt+0x3f1c>
   15768:	mov	r0, r8
   1576c:	bl	13d70 <__assert_fail@plt+0x24a4>
   15770:	ldr	r2, [r4, #52]	; 0x34
   15774:	str	r2, [r4, #40]	; 0x28
   15778:	add	r5, r4, #168	; 0xa8
   1577c:	add	r2, r2, #1
   15780:	mov	r1, r5
   15784:	ldr	r0, [r8, #24]
   15788:	bl	11500 <memmove@plt>
   1578c:	mov	r1, #47	; 0x2f
   15790:	mov	r0, r5
   15794:	bl	117ac <strrchr@plt>
   15798:	cmp	r0, #0
   1579c:	beq	157cc <__assert_fail@plt+0x3f00>
   157a0:	cmp	r5, r0
   157a4:	beq	157fc <__assert_fail@plt+0x3f30>
   157a8:	add	r6, r0, #1
   157ac:	mov	r0, r6
   157b0:	bl	116e0 <strlen@plt>
   157b4:	mov	r7, r0
   157b8:	add	r2, r0, #1
   157bc:	mov	r1, r6
   157c0:	mov	r0, r5
   157c4:	bl	11500 <memmove@plt>
   157c8:	str	r7, [r4, #52]	; 0x34
   157cc:	ldr	r3, [r8, #24]
   157d0:	str	r3, [r4, #28]
   157d4:	str	r3, [r4, #24]
   157d8:	mov	r0, r8
   157dc:	bl	13c4c <__assert_fail@plt+0x2380>
   157e0:	mov	r5, r4
   157e4:	b	15504 <__assert_fail@plt+0x3c38>
   157e8:	ldr	r3, [r8, #48]	; 0x30
   157ec:	orr	r3, r3, #8192	; 0x2000
   157f0:	str	r3, [r8, #48]	; 0x30
   157f4:	mov	r5, #0
   157f8:	b	159a0 <__assert_fail@plt+0x40d4>
   157fc:	ldrb	r3, [r0, #1]
   15800:	cmp	r3, #0
   15804:	beq	157cc <__assert_fail@plt+0x3f00>
   15808:	b	157a8 <__assert_fail@plt+0x3edc>
   1580c:	cmp	r3, #2
   15810:	movne	r5, r4
   15814:	bne	154c4 <__assert_fail@plt+0x3bf8>
   15818:	mov	r2, #1
   1581c:	mov	r1, r4
   15820:	mov	r0, r8
   15824:	bl	1395c <__assert_fail@plt+0x2090>
   15828:	strh	r0, [r4, #56]	; 0x38
   1582c:	cmp	r0, #1
   15830:	beq	15844 <__assert_fail@plt+0x3f78>
   15834:	mov	r3, #3
   15838:	strh	r3, [r4, #60]	; 0x3c
   1583c:	mov	r5, r4
   15840:	b	154c4 <__assert_fail@plt+0x3bf8>
   15844:	ldr	r3, [r8, #48]	; 0x30
   15848:	tst	r3, #4
   1584c:	bne	15834 <__assert_fail@plt+0x3f68>
   15850:	movw	r1, #49344	; 0xc0c0
   15854:	movt	r1, #1
   15858:	mov	r0, r8
   1585c:	bl	13cd4 <__assert_fail@plt+0x2408>
   15860:	str	r0, [r4, #36]	; 0x24
   15864:	cmp	r0, #0
   15868:	blt	1587c <__assert_fail@plt+0x3fb0>
   1586c:	ldrh	r3, [r4, #58]	; 0x3a
   15870:	orr	r3, r3, #2
   15874:	strh	r3, [r4, #58]	; 0x3a
   15878:	b	15834 <__assert_fail@plt+0x3f68>
   1587c:	bl	1171c <__errno_location@plt>
   15880:	ldr	r3, [r0]
   15884:	str	r3, [r4, #32]
   15888:	mov	r3, #7
   1588c:	strh	r3, [r4, #56]	; 0x38
   15890:	b	15834 <__assert_fail@plt+0x3f68>
   15894:	ldrd	r2, [r5, #112]	; 0x70
   15898:	cmp	r3, #0
   1589c:	cmpeq	r2, #2
   158a0:	beq	158b4 <__assert_fail@plt+0x3fe8>
   158a4:	cmp	r3, #0
   158a8:	cmpeq	r2, #1
   158ac:	beq	159a0 <__assert_fail@plt+0x40d4>
   158b0:	bl	11878 <abort@plt>
   158b4:	mov	r2, #0
   158b8:	mov	r1, r5
   158bc:	mov	r0, r8
   158c0:	bl	1395c <__assert_fail@plt+0x2090>
   158c4:	strh	r0, [r5, #56]	; 0x38
   158c8:	b	15514 <__assert_fail@plt+0x3c48>
   158cc:	mov	r0, r6
   158d0:	bl	13780 <__assert_fail@plt+0x1eb4>
   158d4:	bl	1171c <__errno_location@plt>
   158d8:	mov	r3, #0
   158dc:	str	r3, [r0]
   158e0:	str	r3, [r8]
   158e4:	mov	r5, r4
   158e8:	b	159a0 <__assert_fail@plt+0x40d4>
   158ec:	bl	11878 <abort@plt>
   158f0:	mov	r0, r8
   158f4:	bl	1407c <__assert_fail@plt+0x27b0>
   158f8:	cmp	r0, #0
   158fc:	beq	1570c <__assert_fail@plt+0x3e40>
   15900:	bl	1171c <__errno_location@plt>
   15904:	ldr	r3, [r0]
   15908:	str	r3, [r6, #32]
   1590c:	ldr	r3, [r8, #48]	; 0x30
   15910:	orr	r3, r3, #8192	; 0x2000
   15914:	str	r3, [r8, #48]	; 0x30
   15918:	ldrh	r3, [r6, #56]	; 0x38
   1591c:	cmp	r3, #2
   15920:	moveq	r5, r4
   15924:	bne	15718 <__assert_fail@plt+0x3e4c>
   15928:	b	159a0 <__assert_fail@plt+0x40d4>
   1592c:	ldr	r0, [r6, #36]	; 0x24
   15930:	bl	117f4 <fchdir@plt>
   15934:	cmp	r0, #0
   15938:	beq	15704 <__assert_fail@plt+0x3e38>
   1593c:	bl	1171c <__errno_location@plt>
   15940:	ldr	r3, [r0]
   15944:	str	r3, [r6, #32]
   15948:	ldr	r3, [r8, #48]	; 0x30
   1594c:	orr	r3, r3, #8192	; 0x2000
   15950:	str	r3, [r8, #48]	; 0x30
   15954:	b	15704 <__assert_fail@plt+0x3e38>
   15958:	tst	r3, #1
   1595c:	bne	1570c <__assert_fail@plt+0x3e40>
   15960:	movw	r3, #49780	; 0xc274
   15964:	movt	r3, #1
   15968:	mvn	r2, #0
   1596c:	ldr	r1, [r6, #4]
   15970:	mov	r0, r8
   15974:	bl	140e0 <__assert_fail@plt+0x2814>
   15978:	cmp	r0, #0
   1597c:	beq	1570c <__assert_fail@plt+0x3e40>
   15980:	bl	1171c <__errno_location@plt>
   15984:	ldr	r3, [r0]
   15988:	str	r3, [r6, #32]
   1598c:	ldr	r3, [r8, #48]	; 0x30
   15990:	orr	r3, r3, #8192	; 0x2000
   15994:	str	r3, [r8, #48]	; 0x30
   15998:	b	15918 <__assert_fail@plt+0x404c>
   1599c:	mov	r5, #0
   159a0:	mov	r0, r5
   159a4:	ldrd	r4, [sp]
   159a8:	ldrd	r6, [sp, #8]
   159ac:	ldr	r8, [sp, #16]
   159b0:	add	sp, sp, #20
   159b4:	pop	{pc}		; (ldr pc, [sp], #4)
   159b8:	cmp	r2, #4
   159bc:	bhi	159cc <__assert_fail@plt+0x4100>
   159c0:	strh	r2, [r1, #60]	; 0x3c
   159c4:	mov	r0, #0
   159c8:	bx	lr
   159cc:	str	r4, [sp, #-8]!
   159d0:	str	lr, [sp, #4]
   159d4:	bl	1171c <__errno_location@plt>
   159d8:	mov	r3, #22
   159dc:	str	r3, [r0]
   159e0:	mov	r0, #1
   159e4:	ldr	r4, [sp]
   159e8:	add	sp, sp, #4
   159ec:	pop	{pc}		; (ldr pc, [sp], #4)
   159f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159f4:	strd	r6, [sp, #8]
   159f8:	str	r8, [sp, #16]
   159fc:	str	lr, [sp, #20]
   15a00:	bics	r3, r1, #4096	; 0x1000
   15a04:	bne	15ab4 <__assert_fail@plt+0x41e8>
   15a08:	mov	r4, r0
   15a0c:	mov	r5, r1
   15a10:	ldr	r6, [r0]
   15a14:	bl	1171c <__errno_location@plt>
   15a18:	mov	r7, r0
   15a1c:	mov	r3, #0
   15a20:	str	r3, [r0]
   15a24:	ldr	r3, [r4, #48]	; 0x30
   15a28:	tst	r3, #8192	; 0x2000
   15a2c:	movne	r0, #0
   15a30:	bne	15aa0 <__assert_fail@plt+0x41d4>
   15a34:	ldrh	r3, [r6, #56]	; 0x38
   15a38:	cmp	r3, #9
   15a3c:	beq	15ac8 <__assert_fail@plt+0x41fc>
   15a40:	cmp	r3, #1
   15a44:	movne	r0, #0
   15a48:	bne	15aa0 <__assert_fail@plt+0x41d4>
   15a4c:	ldr	r0, [r4, #4]
   15a50:	cmp	r0, #0
   15a54:	beq	15a5c <__assert_fail@plt+0x4190>
   15a58:	bl	13d20 <__assert_fail@plt+0x2454>
   15a5c:	cmp	r5, #4096	; 0x1000
   15a60:	movne	r5, #1
   15a64:	beq	15ad0 <__assert_fail@plt+0x4204>
   15a68:	ldr	r3, [r6, #48]	; 0x30
   15a6c:	cmp	r3, #0
   15a70:	bne	15a90 <__assert_fail@plt+0x41c4>
   15a74:	ldr	r3, [r6, #24]
   15a78:	ldrb	r3, [r3]
   15a7c:	cmp	r3, #47	; 0x2f
   15a80:	beq	15a90 <__assert_fail@plt+0x41c4>
   15a84:	ldr	r3, [r4, #48]	; 0x30
   15a88:	tst	r3, #4
   15a8c:	beq	15ae4 <__assert_fail@plt+0x4218>
   15a90:	mov	r1, r5
   15a94:	mov	r0, r4
   15a98:	bl	143b0 <__assert_fail@plt+0x2ae4>
   15a9c:	str	r0, [r4, #4]
   15aa0:	ldrd	r4, [sp]
   15aa4:	ldrd	r6, [sp, #8]
   15aa8:	ldr	r8, [sp, #16]
   15aac:	add	sp, sp, #20
   15ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab4:	bl	1171c <__errno_location@plt>
   15ab8:	mov	r3, #22
   15abc:	str	r3, [r0]
   15ac0:	mov	r0, #0
   15ac4:	b	15aa0 <__assert_fail@plt+0x41d4>
   15ac8:	ldr	r0, [r6, #8]
   15acc:	b	15aa0 <__assert_fail@plt+0x41d4>
   15ad0:	ldr	r3, [r4, #48]	; 0x30
   15ad4:	orr	r3, r3, #4096	; 0x1000
   15ad8:	str	r3, [r4, #48]	; 0x30
   15adc:	mov	r5, #2
   15ae0:	b	15a68 <__assert_fail@plt+0x419c>
   15ae4:	movw	r1, #49344	; 0xc0c0
   15ae8:	movt	r1, #1
   15aec:	mov	r0, r4
   15af0:	bl	13cd4 <__assert_fail@plt+0x2408>
   15af4:	subs	r6, r0, #0
   15af8:	movlt	r0, #0
   15afc:	strlt	r0, [r4, #4]
   15b00:	blt	15aa0 <__assert_fail@plt+0x41d4>
   15b04:	mov	r1, r5
   15b08:	mov	r0, r4
   15b0c:	bl	143b0 <__assert_fail@plt+0x2ae4>
   15b10:	str	r0, [r4, #4]
   15b14:	ldr	r3, [r4, #48]	; 0x30
   15b18:	tst	r3, #512	; 0x200
   15b1c:	beq	15b38 <__assert_fail@plt+0x426c>
   15b20:	mov	r2, #1
   15b24:	mov	r1, r6
   15b28:	mov	r0, r4
   15b2c:	bl	13fe4 <__assert_fail@plt+0x2718>
   15b30:	ldr	r0, [r4, #4]
   15b34:	b	15aa0 <__assert_fail@plt+0x41d4>
   15b38:	mov	r0, r6
   15b3c:	bl	117f4 <fchdir@plt>
   15b40:	cmp	r0, #0
   15b44:	bne	15b54 <__assert_fail@plt+0x4288>
   15b48:	mov	r0, r6
   15b4c:	bl	11884 <close@plt>
   15b50:	b	15b30 <__assert_fail@plt+0x4264>
   15b54:	ldr	r4, [r7]
   15b58:	mov	r0, r6
   15b5c:	bl	11884 <close@plt>
   15b60:	str	r4, [r7]
   15b64:	mov	r0, #0
   15b68:	b	15aa0 <__assert_fail@plt+0x41d4>
   15b6c:	andeq	r0, r0, r0
   15b70:	ror	r0, r0, #3
   15b74:	udiv	r3, r0, r1
   15b78:	mls	r0, r3, r1, r0
   15b7c:	bx	lr
   15b80:	cmp	r1, r0
   15b84:	movne	r0, #0
   15b88:	moveq	r0, #1
   15b8c:	bx	lr
   15b90:	ldr	r2, [r0, #20]
   15b94:	movw	r3, #49784	; 0xc278
   15b98:	movt	r3, #1
   15b9c:	cmp	r2, r3
   15ba0:	beq	15c3c <__assert_fail@plt+0x4370>
   15ba4:	vldr	s15, [r2, #8]
   15ba8:	vldr	s14, [pc, #148]	; 15c44 <__assert_fail@plt+0x4378>
   15bac:	vcmpe.f32	s15, s14
   15bb0:	vmrs	APSR_nzcv, fpscr
   15bb4:	ble	15c14 <__assert_fail@plt+0x4348>
   15bb8:	vldr	s14, [pc, #136]	; 15c48 <__assert_fail@plt+0x437c>
   15bbc:	vcmpe.f32	s15, s14
   15bc0:	vmrs	APSR_nzcv, fpscr
   15bc4:	bpl	15c14 <__assert_fail@plt+0x4348>
   15bc8:	vldr	s13, [r2, #12]
   15bcc:	vldr	s14, [pc, #120]	; 15c4c <__assert_fail@plt+0x4380>
   15bd0:	vcmpe.f32	s13, s14
   15bd4:	vmrs	APSR_nzcv, fpscr
   15bd8:	ble	15c14 <__assert_fail@plt+0x4348>
   15bdc:	vldr	s14, [r2]
   15be0:	vcmpe.f32	s14, #0.0
   15be4:	vmrs	APSR_nzcv, fpscr
   15be8:	blt	15c14 <__assert_fail@plt+0x4348>
   15bec:	vldr	s13, [pc, #80]	; 15c44 <__assert_fail@plt+0x4378>
   15bf0:	vadd.f32	s14, s14, s13
   15bf4:	vldr	s13, [r2, #4]
   15bf8:	vcmpe.f32	s14, s13
   15bfc:	vmrs	APSR_nzcv, fpscr
   15c00:	bpl	15c14 <__assert_fail@plt+0x4348>
   15c04:	vldr	s12, [pc, #68]	; 15c50 <__assert_fail@plt+0x4384>
   15c08:	vcmpe.f32	s13, s12
   15c0c:	vmrs	APSR_nzcv, fpscr
   15c10:	bls	15c28 <__assert_fail@plt+0x435c>
   15c14:	movw	r3, #49784	; 0xc278
   15c18:	movt	r3, #1
   15c1c:	str	r3, [r0, #20]
   15c20:	mov	r0, #0
   15c24:	bx	lr
   15c28:	vcmpe.f32	s15, s14
   15c2c:	vmrs	APSR_nzcv, fpscr
   15c30:	ble	15c14 <__assert_fail@plt+0x4348>
   15c34:	mov	r0, #1
   15c38:	bx	lr
   15c3c:	mov	r0, #1
   15c40:	bx	lr
   15c44:	stclcc	12, cr12, [ip, #820]	; 0x334
   15c48:	svccc	0x00666666
   15c4c:	svccc	0x008ccccd
   15c50:	svccc	0x00800000
   15c54:	ldrb	r3, [r1, #16]
   15c58:	cmp	r3, #0
   15c5c:	bne	15c88 <__assert_fail@plt+0x43bc>
   15c60:	vmov	s15, r0
   15c64:	vcvt.f32.u32	s15, s15
   15c68:	vldr	s13, [r1, #8]
   15c6c:	vdiv.f32	s14, s15, s13
   15c70:	vldr	s15, [pc, #224]	; 15d58 <__assert_fail@plt+0x448c>
   15c74:	vcmpe.f32	s14, s15
   15c78:	vmrs	APSR_nzcv, fpscr
   15c7c:	bge	15d48 <__assert_fail@plt+0x447c>
   15c80:	vcvt.u32.f32	s15, s14
   15c84:	vmov	r0, s15
   15c88:	cmp	r0, #10
   15c8c:	movcc	r0, #10
   15c90:	orr	r0, r0, #1
   15c94:	cmn	r0, #1
   15c98:	beq	15cac <__assert_fail@plt+0x43e0>
   15c9c:	push	{lr}		; (str lr, [sp, #-4]!)
   15ca0:	movw	lr, #43691	; 0xaaab
   15ca4:	movt	lr, #43690	; 0xaaaa
   15ca8:	b	15cd4 <__assert_fail@plt+0x4408>
   15cac:	mov	r0, #0
   15cb0:	bx	lr
   15cb4:	mov	r3, #3
   15cb8:	udiv	r2, r0, r3
   15cbc:	mls	r3, r3, r2, r0
   15cc0:	cmp	r3, #0
   15cc4:	bne	15d24 <__assert_fail@plt+0x4458>
   15cc8:	add	r0, r0, #2
   15ccc:	cmn	r0, #1
   15cd0:	beq	15d50 <__assert_fail@plt+0x4484>
   15cd4:	cmp	r0, #9
   15cd8:	bls	15cb4 <__assert_fail@plt+0x43e8>
   15cdc:	umull	r2, r3, lr, r0
   15ce0:	lsr	r3, r3, #1
   15ce4:	add	r3, r3, r3, lsl #1
   15ce8:	cmp	r0, r3
   15cec:	beq	15cc8 <__assert_fail@plt+0x43fc>
   15cf0:	mov	r1, #16
   15cf4:	mov	r2, #9
   15cf8:	mov	r3, #3
   15cfc:	add	r2, r2, r1
   15d00:	add	r3, r3, #2
   15d04:	cmp	r2, r0
   15d08:	bcs	15cb8 <__assert_fail@plt+0x43ec>
   15d0c:	add	r1, r1, #8
   15d10:	udiv	ip, r0, r3
   15d14:	mls	ip, r3, ip, r0
   15d18:	cmp	ip, #0
   15d1c:	bne	15cfc <__assert_fail@plt+0x4430>
   15d20:	b	15cc8 <__assert_fail@plt+0x43fc>
   15d24:	lsl	r2, r0, #2
   15d28:	lsr	r3, r0, #30
   15d2c:	adds	r3, r3, #0
   15d30:	movne	r3, #1
   15d34:	cmp	r2, #0
   15d38:	movlt	r3, #1
   15d3c:	cmp	r3, #0
   15d40:	movne	r0, #0
   15d44:	pop	{pc}		; (ldr pc, [sp], #4)
   15d48:	mov	r0, #0
   15d4c:	bx	lr
   15d50:	mov	r0, #0
   15d54:	b	15d44 <__assert_fail@plt+0x4478>
   15d58:	svcmi	0x00800000
   15d5c:	str	r4, [sp, #-8]!
   15d60:	str	lr, [sp, #4]
   15d64:	mov	r4, r0
   15d68:	mov	r0, r1
   15d6c:	ldr	r3, [r4, #24]
   15d70:	ldr	r1, [r4, #8]
   15d74:	blx	r3
   15d78:	ldr	r3, [r4, #8]
   15d7c:	cmp	r3, r0
   15d80:	bls	15d98 <__assert_fail@plt+0x44cc>
   15d84:	ldr	r3, [r4]
   15d88:	add	r0, r3, r0, lsl #3
   15d8c:	ldr	r4, [sp]
   15d90:	add	sp, sp, #4
   15d94:	pop	{pc}		; (ldr pc, [sp], #4)
   15d98:	bl	11878 <abort@plt>
   15d9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15da0:	strd	r6, [sp, #8]
   15da4:	strd	r8, [sp, #16]
   15da8:	strd	sl, [sp, #24]
   15dac:	str	lr, [sp, #32]
   15db0:	sub	sp, sp, #4
   15db4:	ldr	r7, [r1]
   15db8:	ldr	r3, [r1, #4]
   15dbc:	cmp	r7, r3
   15dc0:	bcs	15f18 <__assert_fail@plt+0x464c>
   15dc4:	mov	fp, r2
   15dc8:	mov	r9, r1
   15dcc:	mov	r6, r0
   15dd0:	add	r7, r7, #8
   15dd4:	mov	sl, #0
   15dd8:	b	15eac <__assert_fail@plt+0x45e0>
   15ddc:	str	r5, [r0]
   15de0:	ldr	r2, [r6, #12]
   15de4:	add	r2, r2, #1
   15de8:	str	r2, [r6, #12]
   15dec:	str	sl, [r4]
   15df0:	ldr	r2, [r6, #36]	; 0x24
   15df4:	str	r2, [r4, #4]
   15df8:	str	r4, [r6, #36]	; 0x24
   15dfc:	mov	r4, r3
   15e00:	cmp	r3, #0
   15e04:	beq	15e38 <__assert_fail@plt+0x456c>
   15e08:	ldr	r5, [r4]
   15e0c:	mov	r1, r5
   15e10:	mov	r0, r6
   15e14:	bl	15d5c <__assert_fail@plt+0x4490>
   15e18:	ldr	r3, [r4, #4]
   15e1c:	ldr	r2, [r0]
   15e20:	cmp	r2, #0
   15e24:	beq	15ddc <__assert_fail@plt+0x4510>
   15e28:	ldr	r2, [r0, #4]
   15e2c:	str	r2, [r4, #4]
   15e30:	str	r4, [r0, #4]
   15e34:	b	15dfc <__assert_fail@plt+0x4530>
   15e38:	ldr	r4, [r8, #-8]
   15e3c:	str	sl, [r8, #-4]
   15e40:	cmp	fp, #0
   15e44:	bne	15e98 <__assert_fail@plt+0x45cc>
   15e48:	mov	r1, r4
   15e4c:	mov	r0, r6
   15e50:	bl	15d5c <__assert_fail@plt+0x4490>
   15e54:	mov	r5, r0
   15e58:	ldr	r3, [r0]
   15e5c:	cmp	r3, #0
   15e60:	beq	15ee4 <__assert_fail@plt+0x4618>
   15e64:	ldr	r0, [r6, #36]	; 0x24
   15e68:	cmp	r0, #0
   15e6c:	beq	15ecc <__assert_fail@plt+0x4600>
   15e70:	ldr	r3, [r0, #4]
   15e74:	str	r3, [r6, #36]	; 0x24
   15e78:	str	r4, [r0]
   15e7c:	ldr	r3, [r5, #4]
   15e80:	str	r3, [r0, #4]
   15e84:	str	r0, [r5, #4]
   15e88:	str	sl, [r8, #-8]
   15e8c:	ldr	r3, [r9, #12]
   15e90:	sub	r3, r3, #1
   15e94:	str	r3, [r9, #12]
   15e98:	add	r2, r7, #8
   15e9c:	ldr	r3, [r9, #4]
   15ea0:	cmp	r3, r7
   15ea4:	bls	15ef8 <__assert_fail@plt+0x462c>
   15ea8:	mov	r7, r2
   15eac:	mov	r8, r7
   15eb0:	ldr	r3, [r7, #-8]
   15eb4:	cmp	r3, #0
   15eb8:	beq	15e98 <__assert_fail@plt+0x45cc>
   15ebc:	ldr	r4, [r7, #-4]
   15ec0:	cmp	r4, #0
   15ec4:	bne	15e08 <__assert_fail@plt+0x453c>
   15ec8:	b	15e38 <__assert_fail@plt+0x456c>
   15ecc:	mov	r0, #8
   15ed0:	bl	1ad8c <lchmod@@Base+0x3f74>
   15ed4:	cmp	r0, #0
   15ed8:	bne	15e78 <__assert_fail@plt+0x45ac>
   15edc:	mov	r0, fp
   15ee0:	b	15efc <__assert_fail@plt+0x4630>
   15ee4:	str	r4, [r0]
   15ee8:	ldr	r3, [r6, #12]
   15eec:	add	r3, r3, #1
   15ef0:	str	r3, [r6, #12]
   15ef4:	b	15e88 <__assert_fail@plt+0x45bc>
   15ef8:	mov	r0, #1
   15efc:	add	sp, sp, #4
   15f00:	ldrd	r4, [sp]
   15f04:	ldrd	r6, [sp, #8]
   15f08:	ldrd	r8, [sp, #16]
   15f0c:	ldrd	sl, [sp, #24]
   15f10:	add	sp, sp, #32
   15f14:	pop	{pc}		; (ldr pc, [sp], #4)
   15f18:	mov	r0, #1
   15f1c:	b	15efc <__assert_fail@plt+0x4630>
   15f20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f24:	strd	r6, [sp, #8]
   15f28:	str	r8, [sp, #16]
   15f2c:	str	lr, [sp, #20]
   15f30:	mov	r6, r0
   15f34:	mov	r5, r1
   15f38:	mov	r7, r2
   15f3c:	mov	r8, r3
   15f40:	bl	15d5c <__assert_fail@plt+0x4490>
   15f44:	mov	r4, r0
   15f48:	str	r0, [r7]
   15f4c:	ldr	r0, [r0]
   15f50:	cmp	r0, #0
   15f54:	beq	15fd0 <__assert_fail@plt+0x4704>
   15f58:	cmp	r0, r5
   15f5c:	beq	15fe4 <__assert_fail@plt+0x4718>
   15f60:	ldr	r3, [r6, #28]
   15f64:	mov	r1, r0
   15f68:	mov	r0, r5
   15f6c:	blx	r3
   15f70:	cmp	r0, #0
   15f74:	bne	15fe4 <__assert_fail@plt+0x4718>
   15f78:	ldr	r0, [r4, #4]
   15f7c:	cmp	r0, #0
   15f80:	beq	15fd0 <__assert_fail@plt+0x4704>
   15f84:	ldr	r1, [r0]
   15f88:	cmp	r5, r1
   15f8c:	beq	15fc0 <__assert_fail@plt+0x46f4>
   15f90:	ldr	r3, [r6, #28]
   15f94:	mov	r0, r5
   15f98:	blx	r3
   15f9c:	cmp	r0, #0
   15fa0:	bne	15fc0 <__assert_fail@plt+0x46f4>
   15fa4:	ldr	r4, [r4, #4]
   15fa8:	ldr	r0, [r4, #4]
   15fac:	cmp	r0, #0
   15fb0:	beq	15fd0 <__assert_fail@plt+0x4704>
   15fb4:	ldr	r1, [r0]
   15fb8:	cmp	r1, r5
   15fbc:	bne	15f90 <__assert_fail@plt+0x46c4>
   15fc0:	ldr	r3, [r4, #4]
   15fc4:	ldr	r0, [r3]
   15fc8:	cmp	r8, #0
   15fcc:	bne	16024 <__assert_fail@plt+0x4758>
   15fd0:	ldrd	r4, [sp]
   15fd4:	ldrd	r6, [sp, #8]
   15fd8:	ldr	r8, [sp, #16]
   15fdc:	add	sp, sp, #20
   15fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe4:	ldr	r0, [r4]
   15fe8:	cmp	r8, #0
   15fec:	beq	15fd0 <__assert_fail@plt+0x4704>
   15ff0:	ldr	r1, [r4, #4]
   15ff4:	cmp	r1, #0
   15ff8:	moveq	r3, #0
   15ffc:	streq	r3, [r4]
   16000:	beq	15fd0 <__assert_fail@plt+0x4704>
   16004:	ldrd	r2, [r1]
   16008:	strd	r2, [r4]
   1600c:	mov	r3, #0
   16010:	str	r3, [r1]
   16014:	ldr	r3, [r6, #36]	; 0x24
   16018:	str	r3, [r1, #4]
   1601c:	str	r1, [r6, #36]	; 0x24
   16020:	b	15fd0 <__assert_fail@plt+0x4704>
   16024:	ldr	r2, [r3, #4]
   16028:	str	r2, [r4, #4]
   1602c:	mov	r2, #0
   16030:	str	r2, [r3]
   16034:	ldr	r2, [r6, #36]	; 0x24
   16038:	str	r2, [r3, #4]
   1603c:	str	r3, [r6, #36]	; 0x24
   16040:	b	15fd0 <__assert_fail@plt+0x4704>
   16044:	ldr	r0, [r0, #8]
   16048:	bx	lr
   1604c:	ldr	r0, [r0, #12]
   16050:	bx	lr
   16054:	ldr	r0, [r0, #16]
   16058:	bx	lr
   1605c:	ldr	r2, [r0]
   16060:	ldr	r3, [r0, #4]
   16064:	cmp	r2, r3
   16068:	bcs	160d8 <__assert_fail@plt+0x480c>
   1606c:	add	r1, r2, #8
   16070:	sub	ip, r3, #1
   16074:	sub	ip, ip, r2
   16078:	bic	ip, ip, #7
   1607c:	add	r2, r2, #16
   16080:	add	ip, ip, r2
   16084:	mov	r0, #0
   16088:	b	160a4 <__assert_fail@plt+0x47d8>
   1608c:	mov	r2, #1
   16090:	cmp	r0, r2
   16094:	movcc	r0, r2
   16098:	add	r1, r1, #8
   1609c:	cmp	r1, ip
   160a0:	beq	160d4 <__assert_fail@plt+0x4808>
   160a4:	ldr	r3, [r1, #-8]
   160a8:	cmp	r3, #0
   160ac:	beq	16098 <__assert_fail@plt+0x47cc>
   160b0:	ldr	r3, [r1, #-4]
   160b4:	cmp	r3, #0
   160b8:	beq	1608c <__assert_fail@plt+0x47c0>
   160bc:	mov	r2, #1
   160c0:	add	r2, r2, #1
   160c4:	ldr	r3, [r3, #4]
   160c8:	cmp	r3, #0
   160cc:	bne	160c0 <__assert_fail@plt+0x47f4>
   160d0:	b	16090 <__assert_fail@plt+0x47c4>
   160d4:	bx	lr
   160d8:	mov	r0, #0
   160dc:	bx	lr
   160e0:	push	{lr}		; (str lr, [sp, #-4]!)
   160e4:	ldr	r2, [r0]
   160e8:	ldr	r3, [r0, #4]
   160ec:	cmp	r2, r3
   160f0:	bcs	16158 <__assert_fail@plt+0x488c>
   160f4:	add	r1, r2, #8
   160f8:	sub	ip, r3, #1
   160fc:	sub	ip, ip, r2
   16100:	bic	ip, ip, #7
   16104:	add	r2, r2, #16
   16108:	add	ip, ip, r2
   1610c:	mov	r2, #0
   16110:	mov	lr, r2
   16114:	b	16124 <__assert_fail@plt+0x4858>
   16118:	add	r1, r1, #8
   1611c:	cmp	r1, ip
   16120:	beq	16160 <__assert_fail@plt+0x4894>
   16124:	ldr	r3, [r1, #-8]
   16128:	cmp	r3, #0
   1612c:	beq	16118 <__assert_fail@plt+0x484c>
   16130:	add	lr, lr, #1
   16134:	add	r2, r2, #1
   16138:	ldr	r3, [r1, #-4]
   1613c:	cmp	r3, #0
   16140:	beq	16118 <__assert_fail@plt+0x484c>
   16144:	add	r2, r2, #1
   16148:	ldr	r3, [r3, #4]
   1614c:	cmp	r3, #0
   16150:	bne	16144 <__assert_fail@plt+0x4878>
   16154:	b	16118 <__assert_fail@plt+0x484c>
   16158:	mov	r2, #0
   1615c:	mov	lr, r2
   16160:	ldr	r3, [r0, #12]
   16164:	cmp	r3, lr
   16168:	movne	r0, #0
   1616c:	beq	16174 <__assert_fail@plt+0x48a8>
   16170:	pop	{pc}		; (ldr pc, [sp], #4)
   16174:	ldr	r0, [r0, #16]
   16178:	cmp	r0, r2
   1617c:	movne	r0, #0
   16180:	moveq	r0, #1
   16184:	b	16170 <__assert_fail@plt+0x48a4>
   16188:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1618c:	strd	r6, [sp, #8]
   16190:	str	r8, [sp, #16]
   16194:	str	lr, [sp, #20]
   16198:	sub	sp, sp, #8
   1619c:	mov	r6, r0
   161a0:	mov	r4, r1
   161a4:	ldr	r5, [r0, #8]
   161a8:	ldr	r7, [r0, #12]
   161ac:	bl	1605c <__assert_fail@plt+0x4790>
   161b0:	mov	r8, r0
   161b4:	ldr	r3, [r6, #16]
   161b8:	movw	r2, #49804	; 0xc28c
   161bc:	movt	r2, #1
   161c0:	mov	r1, #1
   161c4:	mov	r0, r4
   161c8:	bl	11764 <__fprintf_chk@plt>
   161cc:	mov	r3, r5
   161d0:	movw	r2, #49828	; 0xc2a4
   161d4:	movt	r2, #1
   161d8:	mov	r1, #1
   161dc:	mov	r0, r4
   161e0:	bl	11764 <__fprintf_chk@plt>
   161e4:	vmov	s15, r7
   161e8:	vcvt.f64.u32	d6, s15
   161ec:	vldr	d7, [pc, #92]	; 16250 <__assert_fail@plt+0x4984>
   161f0:	vmul.f64	d6, d6, d7
   161f4:	vmov	s15, r5
   161f8:	vcvt.f64.u32	d7, s15
   161fc:	vdiv.f64	d5, d6, d7
   16200:	vstr	d5, [sp]
   16204:	mov	r3, r7
   16208:	movw	r2, #49852	; 0xc2bc
   1620c:	movt	r2, #1
   16210:	mov	r1, #1
   16214:	mov	r0, r4
   16218:	bl	11764 <__fprintf_chk@plt>
   1621c:	mov	r3, r8
   16220:	movw	r2, #49888	; 0xc2e0
   16224:	movt	r2, #1
   16228:	mov	r1, #1
   1622c:	mov	r0, r4
   16230:	bl	11764 <__fprintf_chk@plt>
   16234:	add	sp, sp, #8
   16238:	ldrd	r4, [sp]
   1623c:	ldrd	r6, [sp, #8]
   16240:	ldr	r8, [sp, #16]
   16244:	add	sp, sp, #20
   16248:	pop	{pc}		; (ldr pc, [sp], #4)
   1624c:	nop	{0}
   16250:	andeq	r0, r0, r0
   16254:	subsmi	r0, r9, r0
   16258:	strd	r4, [sp, #-16]!
   1625c:	str	r6, [sp, #8]
   16260:	str	lr, [sp, #12]
   16264:	mov	r6, r0
   16268:	mov	r5, r1
   1626c:	bl	15d5c <__assert_fail@plt+0x4490>
   16270:	ldr	r1, [r0]
   16274:	cmp	r1, #0
   16278:	beq	162cc <__assert_fail@plt+0x4a00>
   1627c:	mov	r4, r0
   16280:	cmp	r1, r5
   16284:	beq	162b4 <__assert_fail@plt+0x49e8>
   16288:	ldr	r3, [r6, #28]
   1628c:	mov	r0, r5
   16290:	blx	r3
   16294:	cmp	r0, #0
   16298:	bne	162b4 <__assert_fail@plt+0x49e8>
   1629c:	ldr	r4, [r4, #4]
   162a0:	cmp	r4, #0
   162a4:	beq	162b8 <__assert_fail@plt+0x49ec>
   162a8:	ldr	r1, [r4]
   162ac:	cmp	r1, r5
   162b0:	bne	16288 <__assert_fail@plt+0x49bc>
   162b4:	ldr	r4, [r4]
   162b8:	mov	r0, r4
   162bc:	ldrd	r4, [sp]
   162c0:	ldr	r6, [sp, #8]
   162c4:	add	sp, sp, #12
   162c8:	pop	{pc}		; (ldr pc, [sp], #4)
   162cc:	mov	r4, r1
   162d0:	b	162b8 <__assert_fail@plt+0x49ec>
   162d4:	ldr	r3, [r0, #16]
   162d8:	cmp	r3, #0
   162dc:	beq	16334 <__assert_fail@plt+0x4a68>
   162e0:	ldr	r2, [r0]
   162e4:	ldr	r1, [r0, #4]
   162e8:	cmp	r2, r1
   162ec:	bcs	16328 <__assert_fail@plt+0x4a5c>
   162f0:	ldr	r0, [r2]
   162f4:	cmp	r0, #0
   162f8:	bxne	lr
   162fc:	mov	r3, r2
   16300:	sub	r1, r1, #1
   16304:	sub	r1, r1, r2
   16308:	bic	r1, r1, #7
   1630c:	add	r2, r2, r1
   16310:	cmp	r3, r2
   16314:	beq	16328 <__assert_fail@plt+0x4a5c>
   16318:	ldr	r0, [r3, #8]!
   1631c:	cmp	r0, #0
   16320:	beq	16310 <__assert_fail@plt+0x4a44>
   16324:	bx	lr
   16328:	str	r4, [sp, #-8]!
   1632c:	str	lr, [sp, #4]
   16330:	bl	11878 <abort@plt>
   16334:	mov	r0, #0
   16338:	bx	lr
   1633c:	strd	r4, [sp, #-16]!
   16340:	str	r6, [sp, #8]
   16344:	str	lr, [sp, #12]
   16348:	mov	r5, r0
   1634c:	mov	r4, r1
   16350:	bl	15d5c <__assert_fail@plt+0x4490>
   16354:	mov	r2, r0
   16358:	mov	r3, r0
   1635c:	b	1636c <__assert_fail@plt+0x4aa0>
   16360:	ldr	r3, [r3, #4]
   16364:	cmp	r3, #0
   16368:	beq	16388 <__assert_fail@plt+0x4abc>
   1636c:	ldr	r1, [r3]
   16370:	cmp	r1, r4
   16374:	bne	16360 <__assert_fail@plt+0x4a94>
   16378:	ldr	r3, [r3, #4]
   1637c:	cmp	r3, #0
   16380:	ldrne	r0, [r3]
   16384:	bne	163ac <__assert_fail@plt+0x4ae0>
   16388:	ldr	r3, [r5, #4]
   1638c:	add	r2, r2, #8
   16390:	cmp	r3, r2
   16394:	bls	163a8 <__assert_fail@plt+0x4adc>
   16398:	ldr	r0, [r2]
   1639c:	cmp	r0, #0
   163a0:	beq	1638c <__assert_fail@plt+0x4ac0>
   163a4:	b	163ac <__assert_fail@plt+0x4ae0>
   163a8:	mov	r0, #0
   163ac:	ldrd	r4, [sp]
   163b0:	ldr	r6, [sp, #8]
   163b4:	add	sp, sp, #12
   163b8:	pop	{pc}		; (ldr pc, [sp], #4)
   163bc:	strd	r4, [sp, #-12]!
   163c0:	str	lr, [sp, #8]
   163c4:	ldr	r4, [r0]
   163c8:	ldr	r3, [r0, #4]
   163cc:	cmp	r4, r3
   163d0:	bcs	16438 <__assert_fail@plt+0x4b6c>
   163d4:	mov	r5, r0
   163d8:	mov	r0, #0
   163dc:	b	163f0 <__assert_fail@plt+0x4b24>
   163e0:	add	r4, r4, #8
   163e4:	ldr	r3, [r5, #4]
   163e8:	cmp	r3, r4
   163ec:	bls	1642c <__assert_fail@plt+0x4b60>
   163f0:	ldr	r3, [r4]
   163f4:	cmp	r3, #0
   163f8:	beq	163e0 <__assert_fail@plt+0x4b14>
   163fc:	cmp	r2, r0
   16400:	bls	1642c <__assert_fail@plt+0x4b60>
   16404:	add	ip, r1, r0, lsl #2
   16408:	mov	r3, r4
   1640c:	add	r0, r0, #1
   16410:	ldr	lr, [r3]
   16414:	str	lr, [ip], #4
   16418:	ldr	r3, [r3, #4]
   1641c:	cmp	r3, #0
   16420:	beq	163e0 <__assert_fail@plt+0x4b14>
   16424:	cmp	r2, r0
   16428:	bne	1640c <__assert_fail@plt+0x4b40>
   1642c:	ldrd	r4, [sp]
   16430:	add	sp, sp, #8
   16434:	pop	{pc}		; (ldr pc, [sp], #4)
   16438:	mov	r0, #0
   1643c:	b	1642c <__assert_fail@plt+0x4b60>
   16440:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16444:	strd	r6, [sp, #8]
   16448:	strd	r8, [sp, #16]
   1644c:	str	sl, [sp, #24]
   16450:	str	lr, [sp, #28]
   16454:	ldr	r8, [r0]
   16458:	ldr	r3, [r0, #4]
   1645c:	cmp	r8, r3
   16460:	bcs	164c0 <__assert_fail@plt+0x4bf4>
   16464:	mov	r7, r2
   16468:	mov	r6, r1
   1646c:	mov	r9, r0
   16470:	mov	r5, #0
   16474:	b	16488 <__assert_fail@plt+0x4bbc>
   16478:	add	r8, r8, #8
   1647c:	ldr	r3, [r9, #4]
   16480:	cmp	r3, r8
   16484:	bls	164c4 <__assert_fail@plt+0x4bf8>
   16488:	ldr	r3, [r8]
   1648c:	cmp	r3, #0
   16490:	beq	16478 <__assert_fail@plt+0x4bac>
   16494:	mov	r4, r8
   16498:	mov	r1, r7
   1649c:	ldr	r0, [r4]
   164a0:	blx	r6
   164a4:	cmp	r0, #0
   164a8:	beq	164c4 <__assert_fail@plt+0x4bf8>
   164ac:	add	r5, r5, #1
   164b0:	ldr	r4, [r4, #4]
   164b4:	cmp	r4, #0
   164b8:	bne	16498 <__assert_fail@plt+0x4bcc>
   164bc:	b	16478 <__assert_fail@plt+0x4bac>
   164c0:	mov	r5, #0
   164c4:	mov	r0, r5
   164c8:	ldrd	r4, [sp]
   164cc:	ldrd	r6, [sp, #8]
   164d0:	ldrd	r8, [sp, #16]
   164d4:	ldr	sl, [sp, #24]
   164d8:	add	sp, sp, #28
   164dc:	pop	{pc}		; (ldr pc, [sp], #4)
   164e0:	ldrb	r2, [r0]
   164e4:	cmp	r2, #0
   164e8:	beq	16514 <__assert_fail@plt+0x4c48>
   164ec:	mov	r3, #0
   164f0:	rsb	r3, r3, r3, lsl #5
   164f4:	add	r3, r3, r2
   164f8:	udiv	r2, r3, r1
   164fc:	mls	r3, r1, r2, r3
   16500:	ldrb	r2, [r0, #1]!
   16504:	cmp	r2, #0
   16508:	bne	164f0 <__assert_fail@plt+0x4c24>
   1650c:	mov	r0, r3
   16510:	bx	lr
   16514:	mov	r3, #0
   16518:	b	1650c <__assert_fail@plt+0x4c40>
   1651c:	strd	r4, [sp, #-8]!
   16520:	movw	r3, #49784	; 0xc278
   16524:	movt	r3, #1
   16528:	ldrd	r4, [r3]
   1652c:	strd	r4, [r0]
   16530:	ldrd	r4, [r3, #8]
   16534:	strd	r4, [r0, #8]
   16538:	ldr	r3, [r3, #16]
   1653c:	str	r3, [r0, #16]
   16540:	ldrd	r4, [sp]
   16544:	add	sp, sp, #8
   16548:	bx	lr
   1654c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16550:	strd	r6, [sp, #8]
   16554:	str	r8, [sp, #16]
   16558:	str	lr, [sp, #20]
   1655c:	mov	r8, r0
   16560:	mov	r5, r1
   16564:	subs	r7, r2, #0
   16568:	movw	r2, #23408	; 0x5b70
   1656c:	movt	r2, #1
   16570:	cmp	r7, #0
   16574:	moveq	r7, r2
   16578:	subs	r6, r3, #0
   1657c:	movw	r3, #23424	; 0x5b80
   16580:	movt	r3, #1
   16584:	cmp	r6, #0
   16588:	moveq	r6, r3
   1658c:	mov	r0, #40	; 0x28
   16590:	bl	1ad8c <lchmod@@Base+0x3f74>
   16594:	subs	r4, r0, #0
   16598:	beq	16618 <__assert_fail@plt+0x4d4c>
   1659c:	movw	r3, #49784	; 0xc278
   165a0:	movt	r3, #1
   165a4:	cmp	r5, #0
   165a8:	moveq	r5, r3
   165ac:	str	r5, [r4, #20]
   165b0:	mov	r0, r4
   165b4:	bl	15b90 <__assert_fail@plt+0x42c4>
   165b8:	cmp	r0, #0
   165bc:	beq	16630 <__assert_fail@plt+0x4d64>
   165c0:	mov	r1, r5
   165c4:	mov	r0, r8
   165c8:	bl	15c54 <__assert_fail@plt+0x4388>
   165cc:	str	r0, [r4, #8]
   165d0:	cmp	r0, #0
   165d4:	beq	16630 <__assert_fail@plt+0x4d64>
   165d8:	mov	r1, #8
   165dc:	bl	1ad18 <lchmod@@Base+0x3f00>
   165e0:	str	r0, [r4]
   165e4:	cmp	r0, #0
   165e8:	beq	16630 <__assert_fail@plt+0x4d64>
   165ec:	ldr	r3, [r4, #8]
   165f0:	add	r0, r0, r3, lsl #3
   165f4:	str	r0, [r4, #4]
   165f8:	mov	r3, #0
   165fc:	str	r3, [r4, #12]
   16600:	str	r3, [r4, #16]
   16604:	str	r7, [r4, #24]
   16608:	str	r6, [r4, #28]
   1660c:	ldr	r2, [sp, #24]
   16610:	str	r2, [r4, #32]
   16614:	str	r3, [r4, #36]	; 0x24
   16618:	mov	r0, r4
   1661c:	ldrd	r4, [sp]
   16620:	ldrd	r6, [sp, #8]
   16624:	ldr	r8, [sp, #16]
   16628:	add	sp, sp, #20
   1662c:	pop	{pc}		; (ldr pc, [sp], #4)
   16630:	mov	r0, r4
   16634:	bl	13780 <__assert_fail@plt+0x1eb4>
   16638:	mov	r4, #0
   1663c:	b	16618 <__assert_fail@plt+0x4d4c>
   16640:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16644:	strd	r6, [sp, #8]
   16648:	str	r8, [sp, #16]
   1664c:	str	lr, [sp, #20]
   16650:	mov	r5, r0
   16654:	ldr	r6, [r0]
   16658:	ldr	r3, [r0, #4]
   1665c:	cmp	r6, r3
   16660:	bcs	166f8 <__assert_fail@plt+0x4e2c>
   16664:	add	r6, r6, #8
   16668:	mov	r7, #0
   1666c:	b	166d8 <__assert_fail@plt+0x4e0c>
   16670:	str	r7, [r4]
   16674:	ldr	r3, [r4, #4]
   16678:	ldr	r2, [r5, #36]	; 0x24
   1667c:	str	r2, [r4, #4]
   16680:	str	r4, [r5, #36]	; 0x24
   16684:	mov	r4, r3
   16688:	cmp	r3, #0
   1668c:	beq	166a8 <__assert_fail@plt+0x4ddc>
   16690:	ldr	r3, [r5, #32]
   16694:	cmp	r3, #0
   16698:	beq	16670 <__assert_fail@plt+0x4da4>
   1669c:	ldr	r0, [r4]
   166a0:	blx	r3
   166a4:	b	16670 <__assert_fail@plt+0x4da4>
   166a8:	ldr	r3, [r5, #32]
   166ac:	cmp	r3, #0
   166b0:	beq	166bc <__assert_fail@plt+0x4df0>
   166b4:	ldr	r0, [r8, #-8]
   166b8:	blx	r3
   166bc:	str	r7, [r8, #-8]
   166c0:	str	r7, [r8, #-4]
   166c4:	add	r2, r6, #8
   166c8:	ldr	r3, [r5, #4]
   166cc:	cmp	r3, r6
   166d0:	bls	166f8 <__assert_fail@plt+0x4e2c>
   166d4:	mov	r6, r2
   166d8:	mov	r8, r6
   166dc:	ldr	r3, [r6, #-8]
   166e0:	cmp	r3, #0
   166e4:	beq	166c4 <__assert_fail@plt+0x4df8>
   166e8:	ldr	r4, [r6, #-4]
   166ec:	cmp	r4, #0
   166f0:	bne	16690 <__assert_fail@plt+0x4dc4>
   166f4:	b	166a8 <__assert_fail@plt+0x4ddc>
   166f8:	mov	r3, #0
   166fc:	str	r3, [r5, #12]
   16700:	str	r3, [r5, #16]
   16704:	ldrd	r4, [sp]
   16708:	ldrd	r6, [sp, #8]
   1670c:	ldr	r8, [sp, #16]
   16710:	add	sp, sp, #20
   16714:	pop	{pc}		; (ldr pc, [sp], #4)
   16718:	strd	r4, [sp, #-16]!
   1671c:	str	r6, [sp, #8]
   16720:	str	lr, [sp, #12]
   16724:	mov	r6, r0
   16728:	ldr	r3, [r0, #32]
   1672c:	cmp	r3, #0
   16730:	beq	16790 <__assert_fail@plt+0x4ec4>
   16734:	ldr	r3, [r0, #16]
   16738:	cmp	r3, #0
   1673c:	beq	16790 <__assert_fail@plt+0x4ec4>
   16740:	ldr	r5, [r0]
   16744:	ldr	r3, [r0, #4]
   16748:	cmp	r5, r3
   1674c:	bcc	16764 <__assert_fail@plt+0x4e98>
   16750:	b	167a0 <__assert_fail@plt+0x4ed4>
   16754:	add	r5, r5, #8
   16758:	ldr	r3, [r6, #4]
   1675c:	cmp	r3, r5
   16760:	bls	16790 <__assert_fail@plt+0x4ec4>
   16764:	ldr	r3, [r5]
   16768:	cmp	r3, #0
   1676c:	beq	16754 <__assert_fail@plt+0x4e88>
   16770:	mov	r4, r5
   16774:	ldr	r3, [r6, #32]
   16778:	ldr	r0, [r4]
   1677c:	blx	r3
   16780:	ldr	r4, [r4, #4]
   16784:	cmp	r4, #0
   16788:	bne	16774 <__assert_fail@plt+0x4ea8>
   1678c:	b	16754 <__assert_fail@plt+0x4e88>
   16790:	ldr	r5, [r6]
   16794:	ldr	r3, [r6, #4]
   16798:	cmp	r5, r3
   1679c:	bcc	167f0 <__assert_fail@plt+0x4f24>
   167a0:	ldr	r0, [r6, #36]	; 0x24
   167a4:	cmp	r0, #0
   167a8:	beq	167c0 <__assert_fail@plt+0x4ef4>
   167ac:	ldr	r4, [r0, #4]
   167b0:	bl	13780 <__assert_fail@plt+0x1eb4>
   167b4:	mov	r0, r4
   167b8:	cmp	r4, #0
   167bc:	bne	167ac <__assert_fail@plt+0x4ee0>
   167c0:	ldr	r0, [r6]
   167c4:	bl	13780 <__assert_fail@plt+0x1eb4>
   167c8:	mov	r0, r6
   167cc:	bl	13780 <__assert_fail@plt+0x1eb4>
   167d0:	ldrd	r4, [sp]
   167d4:	ldr	r6, [sp, #8]
   167d8:	add	sp, sp, #12
   167dc:	pop	{pc}		; (ldr pc, [sp], #4)
   167e0:	add	r5, r5, #8
   167e4:	ldr	r3, [r6, #4]
   167e8:	cmp	r3, r5
   167ec:	bls	167a0 <__assert_fail@plt+0x4ed4>
   167f0:	ldr	r0, [r5, #4]
   167f4:	cmp	r0, #0
   167f8:	beq	167e0 <__assert_fail@plt+0x4f14>
   167fc:	ldr	r4, [r0, #4]
   16800:	bl	13780 <__assert_fail@plt+0x1eb4>
   16804:	mov	r0, r4
   16808:	cmp	r4, #0
   1680c:	bne	167fc <__assert_fail@plt+0x4f30>
   16810:	b	167e0 <__assert_fail@plt+0x4f14>
   16814:	strd	r4, [sp, #-12]!
   16818:	str	lr, [sp, #8]
   1681c:	sub	sp, sp, #44	; 0x2c
   16820:	mov	r4, r0
   16824:	mov	r0, r1
   16828:	ldr	r1, [r4, #20]
   1682c:	bl	15c54 <__assert_fail@plt+0x4388>
   16830:	subs	r5, r0, #0
   16834:	beq	1692c <__assert_fail@plt+0x5060>
   16838:	ldr	r3, [r4, #8]
   1683c:	cmp	r3, r5
   16840:	beq	16944 <__assert_fail@plt+0x5078>
   16844:	mov	r1, #8
   16848:	mov	r0, r5
   1684c:	bl	1ad18 <lchmod@@Base+0x3f00>
   16850:	str	r0, [sp]
   16854:	cmp	r0, #0
   16858:	beq	1694c <__assert_fail@plt+0x5080>
   1685c:	str	r5, [sp, #8]
   16860:	add	r0, r0, r5, lsl #3
   16864:	str	r0, [sp, #4]
   16868:	mov	r2, #0
   1686c:	str	r2, [sp, #12]
   16870:	str	r2, [sp, #16]
   16874:	ldr	r3, [r4, #20]
   16878:	str	r3, [sp, #20]
   1687c:	ldr	r3, [r4, #24]
   16880:	str	r3, [sp, #24]
   16884:	ldr	r3, [r4, #28]
   16888:	str	r3, [sp, #28]
   1688c:	ldr	r3, [r4, #32]
   16890:	str	r3, [sp, #32]
   16894:	ldr	r3, [r4, #36]	; 0x24
   16898:	str	r3, [sp, #36]	; 0x24
   1689c:	mov	r1, r4
   168a0:	mov	r0, sp
   168a4:	bl	15d9c <__assert_fail@plt+0x44d0>
   168a8:	subs	r5, r0, #0
   168ac:	bne	168f4 <__assert_fail@plt+0x5028>
   168b0:	ldr	r3, [sp, #36]	; 0x24
   168b4:	str	r3, [r4, #36]	; 0x24
   168b8:	mov	r2, #1
   168bc:	mov	r1, sp
   168c0:	mov	r0, r4
   168c4:	bl	15d9c <__assert_fail@plt+0x44d0>
   168c8:	cmp	r0, #0
   168cc:	beq	16928 <__assert_fail@plt+0x505c>
   168d0:	mov	r2, #0
   168d4:	mov	r1, sp
   168d8:	mov	r0, r4
   168dc:	bl	15d9c <__assert_fail@plt+0x44d0>
   168e0:	cmp	r0, #0
   168e4:	beq	16928 <__assert_fail@plt+0x505c>
   168e8:	ldr	r0, [sp]
   168ec:	bl	13780 <__assert_fail@plt+0x1eb4>
   168f0:	b	16930 <__assert_fail@plt+0x5064>
   168f4:	ldr	r0, [r4]
   168f8:	bl	13780 <__assert_fail@plt+0x1eb4>
   168fc:	ldr	r3, [sp]
   16900:	str	r3, [r4]
   16904:	ldr	r3, [sp, #4]
   16908:	str	r3, [r4, #4]
   1690c:	ldr	r3, [sp, #8]
   16910:	str	r3, [r4, #8]
   16914:	ldr	r3, [sp, #12]
   16918:	str	r3, [r4, #12]
   1691c:	ldr	r3, [sp, #36]	; 0x24
   16920:	str	r3, [r4, #36]	; 0x24
   16924:	b	16930 <__assert_fail@plt+0x5064>
   16928:	bl	11878 <abort@plt>
   1692c:	mov	r5, #0
   16930:	mov	r0, r5
   16934:	add	sp, sp, #44	; 0x2c
   16938:	ldrd	r4, [sp]
   1693c:	add	sp, sp, #8
   16940:	pop	{pc}		; (ldr pc, [sp], #4)
   16944:	mov	r5, #1
   16948:	b	16930 <__assert_fail@plt+0x5064>
   1694c:	mov	r5, #0
   16950:	b	16930 <__assert_fail@plt+0x5064>
   16954:	strd	r4, [sp, #-16]!
   16958:	str	r6, [sp, #8]
   1695c:	str	lr, [sp, #12]
   16960:	sub	sp, sp, #8
   16964:	subs	r5, r1, #0
   16968:	beq	169b4 <__assert_fail@plt+0x50e8>
   1696c:	mov	r4, r0
   16970:	mov	r6, r2
   16974:	mov	r3, #0
   16978:	add	r2, sp, #4
   1697c:	mov	r1, r5
   16980:	bl	15f20 <__assert_fail@plt+0x4654>
   16984:	cmp	r0, #0
   16988:	beq	169b8 <__assert_fail@plt+0x50ec>
   1698c:	cmp	r6, #0
   16990:	moveq	r0, #0
   16994:	beq	169a0 <__assert_fail@plt+0x50d4>
   16998:	str	r0, [r6]
   1699c:	mov	r0, #0
   169a0:	add	sp, sp, #8
   169a4:	ldrd	r4, [sp]
   169a8:	ldr	r6, [sp, #8]
   169ac:	add	sp, sp, #12
   169b0:	pop	{pc}		; (ldr pc, [sp], #4)
   169b4:	bl	11878 <abort@plt>
   169b8:	vldr	s15, [r4, #12]
   169bc:	vcvt.f32.u32	s14, s15
   169c0:	ldr	r3, [r4, #20]
   169c4:	vldr	s15, [r4, #8]
   169c8:	vcvt.f32.u32	s15, s15
   169cc:	vldr	s13, [r3, #8]
   169d0:	vmul.f32	s15, s15, s13
   169d4:	vcmpe.f32	s14, s15
   169d8:	vmrs	APSR_nzcv, fpscr
   169dc:	bgt	16a2c <__assert_fail@plt+0x5160>
   169e0:	ldr	r3, [sp, #4]
   169e4:	ldr	r2, [r3]
   169e8:	cmp	r2, #0
   169ec:	beq	16ad8 <__assert_fail@plt+0x520c>
   169f0:	ldr	r0, [r4, #36]	; 0x24
   169f4:	cmp	r0, #0
   169f8:	beq	16ac0 <__assert_fail@plt+0x51f4>
   169fc:	ldr	r3, [r0, #4]
   16a00:	str	r3, [r4, #36]	; 0x24
   16a04:	str	r5, [r0]
   16a08:	ldr	r3, [sp, #4]
   16a0c:	ldr	r2, [r3, #4]
   16a10:	str	r2, [r0, #4]
   16a14:	str	r0, [r3, #4]
   16a18:	ldr	r3, [r4, #16]
   16a1c:	add	r3, r3, #1
   16a20:	str	r3, [r4, #16]
   16a24:	mov	r0, #1
   16a28:	b	169a0 <__assert_fail@plt+0x50d4>
   16a2c:	mov	r0, r4
   16a30:	bl	15b90 <__assert_fail@plt+0x42c4>
   16a34:	ldr	r3, [r4, #20]
   16a38:	vldr	s13, [r3, #8]
   16a3c:	vldr	s15, [r4, #8]
   16a40:	vcvt.f32.u32	s15, s15
   16a44:	vldr	s14, [r4, #12]
   16a48:	vcvt.f32.u32	s14, s14
   16a4c:	vmul.f32	s12, s13, s15
   16a50:	vcmpe.f32	s14, s12
   16a54:	vmrs	APSR_nzcv, fpscr
   16a58:	ble	169e0 <__assert_fail@plt+0x5114>
   16a5c:	ldrb	r2, [r3, #16]
   16a60:	cmp	r2, #0
   16a64:	vldr	s14, [r3, #12]
   16a68:	vmul.f32	s15, s15, s14
   16a6c:	vmuleq.f32	s15, s15, s13
   16a70:	vldr	s14, [pc, #132]	; 16afc <__assert_fail@plt+0x5230>
   16a74:	vcmpe.f32	s15, s14
   16a78:	vmrs	APSR_nzcv, fpscr
   16a7c:	mvnge	r0, #0
   16a80:	bge	169a0 <__assert_fail@plt+0x50d4>
   16a84:	vcvt.u32.f32	s15, s15
   16a88:	vmov	r1, s15
   16a8c:	mov	r0, r4
   16a90:	bl	16814 <__assert_fail@plt+0x4f48>
   16a94:	cmp	r0, #0
   16a98:	mvneq	r0, #0
   16a9c:	beq	169a0 <__assert_fail@plt+0x50d4>
   16aa0:	mov	r3, #0
   16aa4:	add	r2, sp, #4
   16aa8:	mov	r1, r5
   16aac:	mov	r0, r4
   16ab0:	bl	15f20 <__assert_fail@plt+0x4654>
   16ab4:	cmp	r0, #0
   16ab8:	beq	169e0 <__assert_fail@plt+0x5114>
   16abc:	bl	11878 <abort@plt>
   16ac0:	mov	r0, #8
   16ac4:	bl	1ad8c <lchmod@@Base+0x3f74>
   16ac8:	cmp	r0, #0
   16acc:	mvneq	r0, #0
   16ad0:	beq	169a0 <__assert_fail@plt+0x50d4>
   16ad4:	b	16a04 <__assert_fail@plt+0x5138>
   16ad8:	str	r5, [r3]
   16adc:	ldr	r3, [r4, #16]
   16ae0:	add	r3, r3, #1
   16ae4:	str	r3, [r4, #16]
   16ae8:	ldr	r3, [r4, #12]
   16aec:	add	r3, r3, #1
   16af0:	str	r3, [r4, #12]
   16af4:	mov	r0, #1
   16af8:	b	169a0 <__assert_fail@plt+0x50d4>
   16afc:	svcmi	0x00800000
   16b00:	str	r4, [sp, #-8]!
   16b04:	str	lr, [sp, #4]
   16b08:	sub	sp, sp, #8
   16b0c:	mov	r4, r1
   16b10:	add	r2, sp, #4
   16b14:	bl	16954 <__assert_fail@plt+0x5088>
   16b18:	cmn	r0, #1
   16b1c:	moveq	r0, #0
   16b20:	beq	16b30 <__assert_fail@plt+0x5264>
   16b24:	cmp	r0, #0
   16b28:	ldreq	r0, [sp, #4]
   16b2c:	movne	r0, r4
   16b30:	add	sp, sp, #8
   16b34:	ldr	r4, [sp]
   16b38:	add	sp, sp, #4
   16b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b40:	strd	r4, [sp, #-16]!
   16b44:	str	r6, [sp, #8]
   16b48:	str	lr, [sp, #12]
   16b4c:	sub	sp, sp, #8
   16b50:	mov	r4, r0
   16b54:	mov	r3, #1
   16b58:	add	r2, sp, #4
   16b5c:	bl	15f20 <__assert_fail@plt+0x4654>
   16b60:	subs	r5, r0, #0
   16b64:	beq	16b84 <__assert_fail@plt+0x52b8>
   16b68:	ldr	r3, [r4, #16]
   16b6c:	sub	r3, r3, #1
   16b70:	str	r3, [r4, #16]
   16b74:	ldr	r3, [sp, #4]
   16b78:	ldr	r3, [r3]
   16b7c:	cmp	r3, #0
   16b80:	beq	16b9c <__assert_fail@plt+0x52d0>
   16b84:	mov	r0, r5
   16b88:	add	sp, sp, #8
   16b8c:	ldrd	r4, [sp]
   16b90:	ldr	r6, [sp, #8]
   16b94:	add	sp, sp, #12
   16b98:	pop	{pc}		; (ldr pc, [sp], #4)
   16b9c:	ldr	r3, [r4, #12]
   16ba0:	sub	r3, r3, #1
   16ba4:	str	r3, [r4, #12]
   16ba8:	vmov	s15, r3
   16bac:	vcvt.f32.u32	s15, s15
   16bb0:	ldr	r3, [r4, #20]
   16bb4:	vldr	s14, [r4, #8]
   16bb8:	vcvt.f32.u32	s14, s14
   16bbc:	vldr	s13, [r3]
   16bc0:	vmul.f32	s14, s14, s13
   16bc4:	vcmpe.f32	s15, s14
   16bc8:	vmrs	APSR_nzcv, fpscr
   16bcc:	bpl	16b84 <__assert_fail@plt+0x52b8>
   16bd0:	mov	r0, r4
   16bd4:	bl	15b90 <__assert_fail@plt+0x42c4>
   16bd8:	ldr	r3, [r4, #20]
   16bdc:	vldr	s15, [r4, #8]
   16be0:	vcvt.f32.u32	s15, s15
   16be4:	vldr	s14, [r4, #12]
   16be8:	vcvt.f32.u32	s13, s14
   16bec:	vldr	s14, [r3]
   16bf0:	vmul.f32	s14, s15, s14
   16bf4:	vcmpe.f32	s13, s14
   16bf8:	vmrs	APSR_nzcv, fpscr
   16bfc:	bpl	16b84 <__assert_fail@plt+0x52b8>
   16c00:	ldrb	r2, [r3, #16]
   16c04:	cmp	r2, #0
   16c08:	vldr	s14, [r3, #4]
   16c0c:	vmuleq.f32	s15, s15, s14
   16c10:	vldreq	s14, [r3, #8]
   16c14:	vmul.f32	s15, s15, s14
   16c18:	vcvt.u32.f32	s15, s15
   16c1c:	vmov	r1, s15
   16c20:	mov	r0, r4
   16c24:	bl	16814 <__assert_fail@plt+0x4f48>
   16c28:	cmp	r0, #0
   16c2c:	bne	16b84 <__assert_fail@plt+0x52b8>
   16c30:	ldr	r0, [r4, #36]	; 0x24
   16c34:	cmp	r0, #0
   16c38:	beq	16c50 <__assert_fail@plt+0x5384>
   16c3c:	ldr	r6, [r0, #4]
   16c40:	bl	13780 <__assert_fail@plt+0x1eb4>
   16c44:	mov	r0, r6
   16c48:	cmp	r6, #0
   16c4c:	bne	16c3c <__assert_fail@plt+0x5370>
   16c50:	mov	r3, #0
   16c54:	str	r3, [r4, #36]	; 0x24
   16c58:	b	16b84 <__assert_fail@plt+0x52b8>
   16c5c:	str	r4, [sp, #-8]!
   16c60:	str	lr, [sp, #4]
   16c64:	bl	16b40 <__assert_fail@plt+0x5274>
   16c68:	ldr	r4, [sp]
   16c6c:	add	sp, sp, #4
   16c70:	pop	{pc}		; (ldr pc, [sp], #4)
   16c74:	strd	r4, [sp, #-16]!
   16c78:	str	r6, [sp, #8]
   16c7c:	str	lr, [sp, #12]
   16c80:	mov	r4, r0
   16c84:	mov	r5, r1
   16c88:	ldr	r0, [r0]
   16c8c:	bl	1b514 <lchmod@@Base+0x46fc>
   16c90:	ldr	r1, [r4, #8]
   16c94:	mov	r2, r5
   16c98:	mov	r3, #0
   16c9c:	eor	r0, r0, r1
   16ca0:	ldr	r1, [r4, #12]
   16ca4:	bl	1b774 <lchmod@@Base+0x495c>
   16ca8:	mov	r0, r2
   16cac:	ldrd	r4, [sp]
   16cb0:	ldr	r6, [sp, #8]
   16cb4:	add	sp, sp, #12
   16cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16cbc:	strd	r4, [sp, #-16]!
   16cc0:	str	r6, [sp, #8]
   16cc4:	str	lr, [sp, #12]
   16cc8:	ldrd	r4, [r0, #8]
   16ccc:	ldrd	r2, [r1, #8]
   16cd0:	cmp	r5, r3
   16cd4:	cmpeq	r4, r2
   16cd8:	movne	r0, #0
   16cdc:	beq	16cf0 <__assert_fail@plt+0x5424>
   16ce0:	ldrd	r4, [sp]
   16ce4:	ldr	r6, [sp, #8]
   16ce8:	add	sp, sp, #12
   16cec:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf0:	ldrd	r4, [r0, #16]
   16cf4:	ldrd	r2, [r1, #16]
   16cf8:	cmp	r5, r3
   16cfc:	cmpeq	r4, r2
   16d00:	movne	r0, #0
   16d04:	bne	16ce0 <__assert_fail@plt+0x5414>
   16d08:	ldr	r1, [r1]
   16d0c:	ldr	r0, [r0]
   16d10:	bl	114d0 <strcmp@plt>
   16d14:	clz	r0, r0
   16d18:	lsr	r0, r0, #5
   16d1c:	b	16ce0 <__assert_fail@plt+0x5414>
   16d20:	str	r4, [sp, #-8]!
   16d24:	str	lr, [sp, #4]
   16d28:	mov	r4, r0
   16d2c:	ldr	r0, [r0]
   16d30:	bl	13780 <__assert_fail@plt+0x1eb4>
   16d34:	mov	r0, r4
   16d38:	bl	13780 <__assert_fail@plt+0x1eb4>
   16d3c:	ldr	r4, [sp]
   16d40:	add	sp, sp, #4
   16d44:	pop	{pc}		; (ldr pc, [sp], #4)
   16d48:	mov	r3, #1
   16d4c:	strb	r3, [r0, #28]
   16d50:	mov	r3, #0
   16d54:	str	r3, [r0, #20]
   16d58:	str	r3, [r0, #24]
   16d5c:	str	r1, [r0]
   16d60:	str	r1, [r0, #4]
   16d64:	str	r1, [r0, #8]
   16d68:	str	r1, [r0, #12]
   16d6c:	str	r1, [r0, #16]
   16d70:	bx	lr
   16d74:	ldrb	r0, [r0, #28]
   16d78:	bx	lr
   16d7c:	mov	r2, r0
   16d80:	ldrb	ip, [r0, #28]
   16d84:	eor	ip, ip, #1
   16d88:	ldr	r3, [r0, #20]
   16d8c:	add	r3, ip, r3
   16d90:	and	r3, r3, #3
   16d94:	ldr	r0, [r0, r3, lsl #2]
   16d98:	str	r1, [r2, r3, lsl #2]
   16d9c:	str	r3, [r2, #20]
   16da0:	ldr	r1, [r2, #24]
   16da4:	cmp	r1, r3
   16da8:	beq	16db8 <__assert_fail@plt+0x54ec>
   16dac:	mov	r3, #0
   16db0:	strb	r3, [r2, #28]
   16db4:	bx	lr
   16db8:	add	ip, ip, r1
   16dbc:	and	ip, ip, #3
   16dc0:	str	ip, [r2, #24]
   16dc4:	b	16dac <__assert_fail@plt+0x54e0>
   16dc8:	ldrb	r3, [r0, #28]
   16dcc:	cmp	r3, #0
   16dd0:	bne	16e0c <__assert_fail@plt+0x5540>
   16dd4:	ldr	r3, [r0, #20]
   16dd8:	ldr	r2, [r0, r3, lsl #2]
   16ddc:	ldr	r1, [r0, #16]
   16de0:	str	r1, [r0, r3, lsl #2]
   16de4:	ldr	r1, [r0, #24]
   16de8:	cmp	r3, r1
   16dec:	moveq	r3, #1
   16df0:	strbeq	r3, [r0, #28]
   16df4:	beq	16e04 <__assert_fail@plt+0x5538>
   16df8:	add	r3, r3, #3
   16dfc:	and	r3, r3, #3
   16e00:	str	r3, [r0, #20]
   16e04:	mov	r0, r2
   16e08:	bx	lr
   16e0c:	str	r4, [sp, #-8]!
   16e10:	str	lr, [sp, #4]
   16e14:	bl	11878 <abort@plt>

00016e18 <lchmod@@Base>:
   16e18:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16e1c:	strd	r6, [sp, #8]
   16e20:	strd	r8, [sp, #16]
   16e24:	str	lr, [sp, #24]
   16e28:	sub	sp, sp, #148	; 0x94
   16e2c:	mov	r9, r0
   16e30:	mov	r5, r1
   16e34:	mov	r1, #2654208	; 0x288000
   16e38:	bl	11644 <open64@plt>
   16e3c:	subs	r4, r0, #0
   16e40:	blt	16ed8 <lchmod@@Base+0xc0>
   16e44:	mov	r3, #4096	; 0x1000
   16e48:	str	r3, [sp]
   16e4c:	add	r3, sp, #40	; 0x28
   16e50:	movw	r2, #49884	; 0xc2dc
   16e54:	movt	r2, #1
   16e58:	mov	r1, r4
   16e5c:	mov	r0, #3
   16e60:	bl	115c0 <__fxstatat64@plt>
   16e64:	cmp	r0, #0
   16e68:	bne	16ef4 <lchmod@@Base+0xdc>
   16e6c:	ldr	r3, [sp, #56]	; 0x38
   16e70:	and	r3, r3, #61440	; 0xf000
   16e74:	cmp	r3, #40960	; 0xa000
   16e78:	beq	16f14 <lchmod@@Base+0xfc>
   16e7c:	str	r4, [sp]
   16e80:	movw	r3, #49912	; 0xc2f8
   16e84:	movt	r3, #1
   16e88:	mov	r2, #26
   16e8c:	mov	r1, #1
   16e90:	add	r0, sp, #12
   16e94:	bl	11728 <__sprintf_chk@plt>
   16e98:	mov	r1, r5
   16e9c:	add	r0, sp, #12
   16ea0:	bl	11848 <chmod@plt>
   16ea4:	mov	r6, r0
   16ea8:	bl	1171c <__errno_location@plt>
   16eac:	mov	r7, r0
   16eb0:	ldr	r8, [r0]
   16eb4:	mov	r0, r4
   16eb8:	bl	11884 <close@plt>
   16ebc:	cmp	r6, #0
   16ec0:	moveq	r4, r6
   16ec4:	beq	16ed8 <lchmod@@Base+0xc0>
   16ec8:	cmp	r8, #2
   16ecc:	beq	16f30 <lchmod@@Base+0x118>
   16ed0:	str	r8, [r7]
   16ed4:	mov	r4, r6
   16ed8:	mov	r0, r4
   16edc:	add	sp, sp, #148	; 0x94
   16ee0:	ldrd	r4, [sp]
   16ee4:	ldrd	r6, [sp, #8]
   16ee8:	ldrd	r8, [sp, #16]
   16eec:	add	sp, sp, #24
   16ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ef4:	bl	1171c <__errno_location@plt>
   16ef8:	mov	r5, r0
   16efc:	ldr	r6, [r0]
   16f00:	mov	r0, r4
   16f04:	bl	11884 <close@plt>
   16f08:	str	r6, [r5]
   16f0c:	mvn	r4, #0
   16f10:	b	16ed8 <lchmod@@Base+0xc0>
   16f14:	mov	r0, r4
   16f18:	bl	11884 <close@plt>
   16f1c:	bl	1171c <__errno_location@plt>
   16f20:	mov	r3, #95	; 0x5f
   16f24:	str	r3, [r0]
   16f28:	mvn	r4, #0
   16f2c:	b	16ed8 <lchmod@@Base+0xc0>
   16f30:	mov	r1, r5
   16f34:	mov	r0, r9
   16f38:	bl	11848 <chmod@plt>
   16f3c:	mov	r4, r0
   16f40:	b	16ed8 <lchmod@@Base+0xc0>
   16f44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16f48:	strd	r6, [sp, #8]
   16f4c:	strd	r8, [sp, #16]
   16f50:	strd	sl, [sp, #24]
   16f54:	str	lr, [sp, #32]
   16f58:	sub	sp, sp, #4
   16f5c:	mov	r4, r0
   16f60:	ldrb	r3, [r0]
   16f64:	sub	r2, r3, #48	; 0x30
   16f68:	uxtb	r2, r2
   16f6c:	cmp	r2, #7
   16f70:	bls	16ffc <lchmod@@Base+0x1e4>
   16f74:	cmp	r3, #0
   16f78:	moveq	r0, #1
   16f7c:	beq	16fac <lchmod@@Base+0x194>
   16f80:	mov	r1, r4
   16f84:	mov	r0, #1
   16f88:	and	r2, r3, #239	; 0xef
   16f8c:	cmp	r3, #43	; 0x2b
   16f90:	cmpne	r2, #45	; 0x2d
   16f94:	moveq	r3, #1
   16f98:	movne	r3, #0
   16f9c:	add	r0, r0, r3
   16fa0:	ldrb	r3, [r1, #1]!
   16fa4:	cmp	r3, #0
   16fa8:	bne	16f88 <lchmod@@Base+0x170>
   16fac:	mov	r1, #16
   16fb0:	bl	1a2bc <lchmod@@Base+0x34a4>
   16fb4:	mov	ip, #0
   16fb8:	movw	fp, #519	; 0x207
   16fbc:	movw	r7, #1080	; 0x438
   16fc0:	mov	r9, #3
   16fc4:	mov	r6, #0
   16fc8:	mov	r2, r4
   16fcc:	ldrb	r3, [r4], #1
   16fd0:	cmp	r3, #97	; 0x61
   16fd4:	beq	170d4 <lchmod@@Base+0x2bc>
   16fd8:	bls	17088 <lchmod@@Base+0x270>
   16fdc:	cmp	r3, #111	; 0x6f
   16fe0:	beq	170cc <lchmod@@Base+0x2b4>
   16fe4:	cmp	r3, #117	; 0x75
   16fe8:	beq	170c4 <lchmod@@Base+0x2ac>
   16fec:	cmp	r3, #103	; 0x67
   16ff0:	bne	170a0 <lchmod@@Base+0x288>
   16ff4:	orr	r6, r6, r7
   16ff8:	b	16fc8 <lchmod@@Base+0x1b0>
   16ffc:	mov	r2, r0
   17000:	mov	r5, #0
   17004:	lsl	r5, r5, #3
   17008:	sub	r5, r5, #48	; 0x30
   1700c:	ldrb	r3, [r2], #1
   17010:	add	r5, r3, r5
   17014:	cmp	r5, #4096	; 0x1000
   17018:	bcs	1730c <lchmod@@Base+0x4f4>
   1701c:	ldrb	r1, [r2]
   17020:	sub	r3, r1, #48	; 0x30
   17024:	uxtb	r3, r3
   17028:	cmp	r3, #7
   1702c:	bls	17004 <lchmod@@Base+0x1ec>
   17030:	cmp	r1, #0
   17034:	movne	r0, #0
   17038:	bne	170a8 <lchmod@@Base+0x290>
   1703c:	sub	r2, r2, r4
   17040:	cmp	r2, #4
   17044:	andle	r4, r5, #3072	; 0xc00
   17048:	mvnle	r4, r4, lsr #10
   1704c:	mvnle	r4, r4, lsl #10
   17050:	movwgt	r4, #4095	; 0xfff
   17054:	mov	r0, #32
   17058:	bl	1a13c <lchmod@@Base+0x3324>
   1705c:	mov	r3, #61	; 0x3d
   17060:	strb	r3, [r0]
   17064:	mov	r3, #1
   17068:	strb	r3, [r0, #1]
   1706c:	movw	r3, #4095	; 0xfff
   17070:	str	r3, [r0, #4]
   17074:	str	r5, [r0, #8]
   17078:	str	r4, [r0, #12]
   1707c:	mov	r3, #0
   17080:	strb	r3, [r0, #17]
   17084:	b	170a8 <lchmod@@Base+0x290>
   17088:	cmp	r3, #45	; 0x2d
   1708c:	beq	170dc <lchmod@@Base+0x2c4>
   17090:	cmp	r3, #61	; 0x3d
   17094:	beq	170dc <lchmod@@Base+0x2c4>
   17098:	cmp	r3, #43	; 0x2b
   1709c:	beq	170dc <lchmod@@Base+0x2c4>
   170a0:	bl	13780 <__assert_fail@plt+0x1eb4>
   170a4:	mov	r0, #0
   170a8:	add	sp, sp, #4
   170ac:	ldrd	r4, [sp]
   170b0:	ldrd	r6, [sp, #8]
   170b4:	ldrd	r8, [sp, #16]
   170b8:	ldrd	sl, [sp, #24]
   170bc:	add	sp, sp, #32
   170c0:	pop	{pc}		; (ldr pc, [sp], #4)
   170c4:	orr	r6, r6, #2496	; 0x9c0
   170c8:	b	16fc8 <lchmod@@Base+0x1b0>
   170cc:	orr	r6, r6, fp
   170d0:	b	16fc8 <lchmod@@Base+0x1b0>
   170d4:	movw	r6, #4095	; 0xfff
   170d8:	b	16fc8 <lchmod@@Base+0x1b0>
   170dc:	add	r5, ip, #1
   170e0:	add	ip, r0, ip, lsl #4
   170e4:	mov	sl, #1
   170e8:	b	1729c <lchmod@@Base+0x484>
   170ec:	sub	r3, r3, #48	; 0x30
   170f0:	uxtb	r3, r3
   170f4:	cmp	r3, #7
   170f8:	movls	r3, #0
   170fc:	bhi	17168 <lchmod@@Base+0x350>
   17100:	lsl	r3, r3, #3
   17104:	sub	r3, r3, #48	; 0x30
   17108:	ldrb	r2, [r1], #1
   1710c:	add	r3, r2, r3
   17110:	cmp	r3, #4096	; 0x1000
   17114:	bcs	170a0 <lchmod@@Base+0x288>
   17118:	ldrb	r4, [r1]
   1711c:	sub	r2, r4, #48	; 0x30
   17120:	uxtb	r2, r2
   17124:	cmp	r2, #7
   17128:	bls	17100 <lchmod@@Base+0x2e8>
   1712c:	cmp	r6, #0
   17130:	bne	170a0 <lchmod@@Base+0x288>
   17134:	cmp	r4, #0
   17138:	cmpne	r4, #44	; 0x2c
   1713c:	bne	170a0 <lchmod@@Base+0x288>
   17140:	mov	r8, ip
   17144:	strb	lr, [ip]
   17148:	strb	sl, [ip, #1]
   1714c:	movw	r2, #4095	; 0xfff
   17150:	str	r2, [ip, #4]
   17154:	str	r3, [ip, #8]
   17158:	mov	r2, r1
   1715c:	movw	r6, #4095	; 0xfff
   17160:	mov	r4, r6
   17164:	b	17278 <lchmod@@Base+0x460>
   17168:	mov	r8, r1
   1716c:	mov	r1, sl
   17170:	mov	r4, #0
   17174:	b	171bc <lchmod@@Base+0x3a4>
   17178:	add	r2, r2, #2
   1717c:	mov	r4, #56	; 0x38
   17180:	b	172cc <lchmod@@Base+0x4b4>
   17184:	add	r2, r2, #2
   17188:	mov	r4, #7
   1718c:	b	172cc <lchmod@@Base+0x4b4>
   17190:	orr	r4, r4, #292	; 0x124
   17194:	b	171bc <lchmod@@Base+0x3a4>
   17198:	orr	r4, r4, #146	; 0x92
   1719c:	b	171bc <lchmod@@Base+0x3a4>
   171a0:	orr	r4, r4, #73	; 0x49
   171a4:	b	171bc <lchmod@@Base+0x3a4>
   171a8:	orr	r4, r4, #3072	; 0xc00
   171ac:	b	171bc <lchmod@@Base+0x3a4>
   171b0:	orr	r4, r4, #512	; 0x200
   171b4:	b	171bc <lchmod@@Base+0x3a4>
   171b8:	mov	r1, #2
   171bc:	mov	r2, r8
   171c0:	add	r8, r8, #1
   171c4:	ldrb	r3, [r2]
   171c8:	sub	r3, r3, #88	; 0x58
   171cc:	cmp	r3, #32
   171d0:	ldrls	pc, [pc, r3, lsl #2]
   171d4:	b	1725c <lchmod@@Base+0x444>
   171d8:			; <UNDEFINED> instruction: 0x000171b8
   171dc:	andeq	r7, r1, ip, asr r2
   171e0:	andeq	r7, r1, ip, asr r2
   171e4:	andeq	r7, r1, ip, asr r2
   171e8:	andeq	r7, r1, ip, asr r2
   171ec:	andeq	r7, r1, ip, asr r2
   171f0:	andeq	r7, r1, ip, asr r2
   171f4:	andeq	r7, r1, ip, asr r2
   171f8:	andeq	r7, r1, ip, asr r2
   171fc:	andeq	r7, r1, ip, asr r2
   17200:	andeq	r7, r1, ip, asr r2
   17204:	andeq	r7, r1, ip, asr r2
   17208:	andeq	r7, r1, ip, asr r2
   1720c:	andeq	r7, r1, ip, asr r2
   17210:	andeq	r7, r1, ip, asr r2
   17214:	andeq	r7, r1, ip, asr r2
   17218:	andeq	r7, r1, ip, asr r2
   1721c:	andeq	r7, r1, ip, asr r2
   17220:	andeq	r7, r1, ip, asr r2
   17224:	andeq	r7, r1, ip, asr r2
   17228:	andeq	r7, r1, ip, asr r2
   1722c:	andeq	r7, r1, ip, asr r2
   17230:	andeq	r7, r1, ip, asr r2
   17234:	andeq	r7, r1, ip, asr r2
   17238:	andeq	r7, r1, ip, asr r2
   1723c:	andeq	r7, r1, ip, asr r2
   17240:	muleq	r1, r0, r1
   17244:	andeq	r7, r1, r8, lsr #3
   17248:			; <UNDEFINED> instruction: 0x000171b0
   1724c:	andeq	r7, r1, ip, asr r2
   17250:	andeq	r7, r1, ip, asr r2
   17254:	muleq	r1, r8, r1
   17258:	andeq	r7, r1, r0, lsr #3
   1725c:	mov	r8, ip
   17260:	strb	lr, [ip]
   17264:	strb	r1, [ip, #1]
   17268:	str	r6, [ip, #4]
   1726c:	str	r4, [ip, #8]
   17270:	cmp	r6, #0
   17274:	andne	r4, r4, r6
   17278:	str	r4, [r8, #12]
   1727c:	ldrb	r3, [r2]
   17280:	add	lr, r5, #1
   17284:	add	ip, ip, #16
   17288:	and	r1, r3, #239	; 0xef
   1728c:	cmp	r3, #43	; 0x2b
   17290:	cmpne	r1, #45	; 0x2d
   17294:	bne	172e4 <lchmod@@Base+0x4cc>
   17298:	mov	r5, lr
   1729c:	mov	r1, r2
   172a0:	ldrb	lr, [r1], #1
   172a4:	ldrb	r3, [r2, #1]
   172a8:	cmp	r3, #103	; 0x67
   172ac:	beq	17178 <lchmod@@Base+0x360>
   172b0:	bls	170ec <lchmod@@Base+0x2d4>
   172b4:	cmp	r3, #111	; 0x6f
   172b8:	beq	17184 <lchmod@@Base+0x36c>
   172bc:	cmp	r3, #117	; 0x75
   172c0:	addeq	r2, r2, #2
   172c4:	moveq	r4, #448	; 0x1c0
   172c8:	bne	17168 <lchmod@@Base+0x350>
   172cc:	mov	r8, ip
   172d0:	strb	lr, [ip]
   172d4:	strb	r9, [ip, #1]
   172d8:	str	r6, [ip, #4]
   172dc:	str	r4, [ip, #8]
   172e0:	b	17270 <lchmod@@Base+0x458>
   172e4:	cmp	r3, #44	; 0x2c
   172e8:	bne	172f8 <lchmod@@Base+0x4e0>
   172ec:	add	r4, r2, #1
   172f0:	mov	ip, r5
   172f4:	b	16fc4 <lchmod@@Base+0x1ac>
   172f8:	cmp	r3, #0
   172fc:	addeq	r5, r0, r5, lsl #4
   17300:	strbeq	r3, [r5, #1]
   17304:	beq	170a8 <lchmod@@Base+0x290>
   17308:	b	170a0 <lchmod@@Base+0x288>
   1730c:	mov	r0, #0
   17310:	b	170a8 <lchmod@@Base+0x290>
   17314:	str	r4, [sp, #-8]!
   17318:	str	lr, [sp, #4]
   1731c:	sub	sp, sp, #104	; 0x68
   17320:	mov	r2, sp
   17324:	mov	r1, r0
   17328:	mov	r0, #3
   1732c:	bl	11854 <__xstat64@plt>
   17330:	cmp	r0, #0
   17334:	movne	r0, #0
   17338:	bne	17370 <lchmod@@Base+0x558>
   1733c:	ldr	r4, [sp, #16]
   17340:	mov	r0, #32
   17344:	bl	1a13c <lchmod@@Base+0x3324>
   17348:	mov	r3, #61	; 0x3d
   1734c:	strb	r3, [r0]
   17350:	mov	r3, #1
   17354:	strb	r3, [r0, #1]
   17358:	movw	r3, #4095	; 0xfff
   1735c:	str	r3, [r0, #4]
   17360:	str	r4, [r0, #8]
   17364:	str	r3, [r0, #12]
   17368:	mov	r3, #0
   1736c:	strb	r3, [r0, #17]
   17370:	add	sp, sp, #104	; 0x68
   17374:	ldr	r4, [sp]
   17378:	add	sp, sp, #4
   1737c:	pop	{pc}		; (ldr pc, [sp], #4)
   17380:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17384:	strd	r6, [sp, #8]
   17388:	strd	r8, [sp, #16]
   1738c:	str	sl, [sp, #24]
   17390:	str	lr, [sp, #28]
   17394:	ldr	r6, [sp, #32]
   17398:	ubfx	r0, r0, #0, #12
   1739c:	ldrb	r9, [r3, #1]
   173a0:	cmp	r9, #0
   173a4:	beq	174b4 <lchmod@@Base+0x69c>
   173a8:	cmp	r1, #0
   173ac:	movne	r7, #3072	; 0xc00
   173b0:	moveq	r7, #0
   173b4:	add	r3, r3, #16
   173b8:	mov	r5, #0
   173bc:	mvn	r2, r2
   173c0:	b	17410 <lchmod@@Base+0x5f8>
   173c4:	and	r9, r0, #73	; 0x49
   173c8:	orrs	r9, r9, r1
   173cc:	orrne	ip, ip, #73	; 0x49
   173d0:	cmp	lr, #0
   173d4:	movne	r9, lr
   173d8:	moveq	r9, r2
   173dc:	bic	ip, ip, r4
   173e0:	and	ip, ip, r9
   173e4:	ldrb	r8, [r8, #-16]
   173e8:	cmp	r8, #45	; 0x2d
   173ec:	beq	174a8 <lchmod@@Base+0x690>
   173f0:	cmp	r8, #61	; 0x3d
   173f4:	beq	17478 <lchmod@@Base+0x660>
   173f8:	cmp	r8, #43	; 0x2b
   173fc:	beq	1749c <lchmod@@Base+0x684>
   17400:	add	r3, r3, #16
   17404:	ldrb	r9, [r3, #-15]
   17408:	cmp	r9, #0
   1740c:	beq	174b8 <lchmod@@Base+0x6a0>
   17410:	mov	r8, r3
   17414:	ldr	lr, [r3, #-12]
   17418:	ldr	r4, [r3, #-4]
   1741c:	bic	r4, r7, r4
   17420:	ldr	ip, [r3, #-8]
   17424:	cmp	r9, #2
   17428:	beq	173c4 <lchmod@@Base+0x5ac>
   1742c:	cmp	r9, #3
   17430:	bne	173d0 <lchmod@@Base+0x5b8>
   17434:	and	ip, ip, r0
   17438:	and	r9, ip, #292	; 0x124
   1743c:	cmp	r9, #0
   17440:	movne	r9, #292	; 0x124
   17444:	moveq	r9, #0
   17448:	and	sl, ip, #146	; 0x92
   1744c:	cmp	sl, #0
   17450:	movne	sl, #146	; 0x92
   17454:	moveq	sl, #0
   17458:	orr	r9, r9, sl
   1745c:	and	sl, ip, #73	; 0x49
   17460:	cmp	sl, #0
   17464:	movne	sl, #73	; 0x49
   17468:	moveq	sl, #0
   1746c:	orr	r9, r9, sl
   17470:	orr	ip, r9, ip
   17474:	b	173d0 <lchmod@@Base+0x5b8>
   17478:	cmp	lr, #0
   1747c:	mvnne	lr, lr
   17480:	orr	lr, lr, r4
   17484:	mvn	r4, lr
   17488:	ubfx	r4, r4, #0, #12
   1748c:	orr	r5, r5, r4
   17490:	and	lr, lr, r0
   17494:	orr	r0, lr, ip
   17498:	b	17400 <lchmod@@Base+0x5e8>
   1749c:	orr	r5, r5, ip
   174a0:	orr	r0, r0, ip
   174a4:	b	17400 <lchmod@@Base+0x5e8>
   174a8:	orr	r5, r5, ip
   174ac:	bic	r0, r0, ip
   174b0:	b	17400 <lchmod@@Base+0x5e8>
   174b4:	mov	r5, #0
   174b8:	cmp	r6, #0
   174bc:	strne	r5, [r6]
   174c0:	ldrd	r4, [sp]
   174c4:	ldrd	r6, [sp, #8]
   174c8:	ldrd	r8, [sp, #16]
   174cc:	ldr	sl, [sp, #24]
   174d0:	add	sp, sp, #28
   174d4:	pop	{pc}		; (ldr pc, [sp], #4)
   174d8:	push	{r2, r3}
   174dc:	push	{lr}		; (str lr, [sp, #-4]!)
   174e0:	sub	sp, sp, #12
   174e4:	ldr	r2, [sp, #16]
   174e8:	tst	r2, #64	; 0x40
   174ec:	addne	r3, sp, #24
   174f0:	strne	r3, [sp, #4]
   174f4:	ldrne	r3, [sp, #20]
   174f8:	moveq	r3, #0
   174fc:	bl	11704 <openat64@plt>
   17500:	bl	19b2c <lchmod@@Base+0x2d14>
   17504:	add	sp, sp, #12
   17508:	pop	{lr}		; (ldr lr, [sp], #4)
   1750c:	add	sp, sp, #8
   17510:	bx	lr
   17514:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17518:	strd	r6, [sp, #8]
   1751c:	str	r8, [sp, #16]
   17520:	str	lr, [sp, #20]
   17524:	mov	r6, r3
   17528:	orr	r2, r2, #540672	; 0x84000
   1752c:	orr	r2, r2, #2304	; 0x900
   17530:	bl	174d8 <lchmod@@Base+0x6c0>
   17534:	subs	r4, r0, #0
   17538:	movlt	r5, #0
   1753c:	blt	17554 <lchmod@@Base+0x73c>
   17540:	mov	r0, r4
   17544:	bl	117d0 <fdopendir@plt>
   17548:	subs	r5, r0, #0
   1754c:	strne	r4, [r6]
   17550:	beq	1756c <lchmod@@Base+0x754>
   17554:	mov	r0, r5
   17558:	ldrd	r4, [sp]
   1755c:	ldrd	r6, [sp, #8]
   17560:	ldr	r8, [sp, #16]
   17564:	add	sp, sp, #20
   17568:	pop	{pc}		; (ldr pc, [sp], #4)
   1756c:	bl	1171c <__errno_location@plt>
   17570:	mov	r6, r0
   17574:	ldr	r7, [r0]
   17578:	mov	r0, r4
   1757c:	bl	11884 <close@plt>
   17580:	str	r7, [r6]
   17584:	b	17554 <lchmod@@Base+0x73c>
   17588:	strd	r4, [sp, #-16]!
   1758c:	str	r6, [sp, #8]
   17590:	str	lr, [sp, #12]
   17594:	subs	r4, r0, #0
   17598:	beq	17634 <lchmod@@Base+0x81c>
   1759c:	mov	r1, #47	; 0x2f
   175a0:	mov	r0, r4
   175a4:	bl	117ac <strrchr@plt>
   175a8:	subs	r5, r0, #0
   175ac:	beq	1760c <lchmod@@Base+0x7f4>
   175b0:	add	r6, r5, #1
   175b4:	sub	r3, r6, r4
   175b8:	cmp	r3, #6
   175bc:	ble	1760c <lchmod@@Base+0x7f4>
   175c0:	mov	r2, #7
   175c4:	movw	r1, #49988	; 0xc344
   175c8:	movt	r1, #1
   175cc:	sub	r0, r5, #6
   175d0:	bl	1186c <strncmp@plt>
   175d4:	cmp	r0, #0
   175d8:	bne	1760c <lchmod@@Base+0x7f4>
   175dc:	mov	r2, #3
   175e0:	movw	r1, #49996	; 0xc34c
   175e4:	movt	r1, #1
   175e8:	mov	r0, r6
   175ec:	bl	1186c <strncmp@plt>
   175f0:	cmp	r0, #0
   175f4:	movne	r4, r6
   175f8:	bne	1760c <lchmod@@Base+0x7f4>
   175fc:	add	r4, r5, #4
   17600:	movw	r3, #53712	; 0xd1d0
   17604:	movt	r3, #2
   17608:	str	r4, [r3]
   1760c:	movw	r3, #53752	; 0xd1f8
   17610:	movt	r3, #2
   17614:	str	r4, [r3]
   17618:	movw	r3, #53716	; 0xd1d4
   1761c:	movt	r3, #2
   17620:	str	r4, [r3]
   17624:	ldrd	r4, [sp]
   17628:	ldr	r6, [sp, #8]
   1762c:	add	sp, sp, #12
   17630:	pop	{pc}		; (ldr pc, [sp], #4)
   17634:	movw	r3, #53728	; 0xd1e0
   17638:	movt	r3, #2
   1763c:	ldr	r3, [r3]
   17640:	mov	r2, #55	; 0x37
   17644:	mov	r1, #1
   17648:	movw	r0, #49932	; 0xc30c
   1764c:	movt	r0, #1
   17650:	bl	115f0 <fwrite@plt>
   17654:	bl	11878 <abort@plt>
   17658:	mov	r2, #0
   1765c:	mov	r3, #0
   17660:	strd	r2, [r0]
   17664:	strd	r2, [r0, #8]
   17668:	strd	r2, [r0, #16]
   1766c:	strd	r2, [r0, #24]
   17670:	strd	r2, [r0, #32]
   17674:	strd	r2, [r0, #40]	; 0x28
   17678:	cmp	r1, #10
   1767c:	beq	17688 <lchmod@@Base+0x870>
   17680:	str	r1, [r0]
   17684:	bx	lr
   17688:	str	r4, [sp, #-8]!
   1768c:	str	lr, [sp, #4]
   17690:	bl	11878 <abort@plt>
   17694:	strd	r4, [sp, #-16]!
   17698:	str	r6, [sp, #8]
   1769c:	str	lr, [sp, #12]
   176a0:	mov	r5, r0
   176a4:	mov	r6, r1
   176a8:	mov	r2, #5
   176ac:	mov	r1, r0
   176b0:	mov	r0, #0
   176b4:	bl	11578 <dcgettext@plt>
   176b8:	mov	r4, r0
   176bc:	cmp	r5, r0
   176c0:	beq	176d8 <lchmod@@Base+0x8c0>
   176c4:	mov	r0, r4
   176c8:	ldrd	r4, [sp]
   176cc:	ldr	r6, [sp, #8]
   176d0:	add	sp, sp, #12
   176d4:	pop	{pc}		; (ldr pc, [sp], #4)
   176d8:	bl	1b548 <lchmod@@Base+0x4730>
   176dc:	ldrb	r3, [r0]
   176e0:	bic	r3, r3, #32
   176e4:	cmp	r3, #85	; 0x55
   176e8:	bne	1776c <lchmod@@Base+0x954>
   176ec:	ldrb	r3, [r0, #1]
   176f0:	bic	r3, r3, #32
   176f4:	cmp	r3, #84	; 0x54
   176f8:	bne	17730 <lchmod@@Base+0x918>
   176fc:	ldrb	r3, [r0, #2]
   17700:	bic	r3, r3, #32
   17704:	cmp	r3, #70	; 0x46
   17708:	bne	17730 <lchmod@@Base+0x918>
   1770c:	ldrb	r3, [r0, #3]
   17710:	cmp	r3, #45	; 0x2d
   17714:	bne	17730 <lchmod@@Base+0x918>
   17718:	ldrb	r3, [r0, #4]
   1771c:	cmp	r3, #56	; 0x38
   17720:	bne	17730 <lchmod@@Base+0x918>
   17724:	ldrb	r3, [r0, #5]
   17728:	cmp	r3, #0
   1772c:	beq	1774c <lchmod@@Base+0x934>
   17730:	movw	r4, #50084	; 0xc3a4
   17734:	movt	r4, #1
   17738:	movw	r3, #50104	; 0xc3b8
   1773c:	movt	r3, #1
   17740:	cmp	r6, #9
   17744:	movne	r4, r3
   17748:	b	176c4 <lchmod@@Base+0x8ac>
   1774c:	ldrb	r2, [r4]
   17750:	movw	r4, #50100	; 0xc3b4
   17754:	movt	r4, #1
   17758:	movw	r3, #50088	; 0xc3a8
   1775c:	movt	r3, #1
   17760:	cmp	r2, #96	; 0x60
   17764:	movne	r4, r3
   17768:	b	176c4 <lchmod@@Base+0x8ac>
   1776c:	cmp	r3, #71	; 0x47
   17770:	bne	17730 <lchmod@@Base+0x918>
   17774:	ldrb	r3, [r0, #1]
   17778:	bic	r3, r3, #32
   1777c:	cmp	r3, #66	; 0x42
   17780:	bne	17730 <lchmod@@Base+0x918>
   17784:	ldrb	r3, [r0, #2]
   17788:	cmp	r3, #49	; 0x31
   1778c:	bne	17730 <lchmod@@Base+0x918>
   17790:	ldrb	r3, [r0, #3]
   17794:	cmp	r3, #56	; 0x38
   17798:	bne	17730 <lchmod@@Base+0x918>
   1779c:	ldrb	r3, [r0, #4]
   177a0:	cmp	r3, #48	; 0x30
   177a4:	bne	17730 <lchmod@@Base+0x918>
   177a8:	ldrb	r3, [r0, #5]
   177ac:	cmp	r3, #51	; 0x33
   177b0:	bne	17730 <lchmod@@Base+0x918>
   177b4:	ldrb	r3, [r0, #6]
   177b8:	cmp	r3, #48	; 0x30
   177bc:	bne	17730 <lchmod@@Base+0x918>
   177c0:	ldrb	r3, [r0, #7]
   177c4:	cmp	r3, #0
   177c8:	bne	17730 <lchmod@@Base+0x918>
   177cc:	ldrb	r2, [r4]
   177d0:	movw	r4, #50096	; 0xc3b0
   177d4:	movt	r4, #1
   177d8:	movw	r3, #50092	; 0xc3ac
   177dc:	movt	r3, #1
   177e0:	cmp	r2, #96	; 0x60
   177e4:	movne	r4, r3
   177e8:	b	176c4 <lchmod@@Base+0x8ac>
   177ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177f0:	strd	r6, [sp, #8]
   177f4:	strd	r8, [sp, #16]
   177f8:	strd	sl, [sp, #24]
   177fc:	str	lr, [sp, #32]
   17800:	sub	sp, sp, #116	; 0x74
   17804:	str	r0, [sp, #64]	; 0x40
   17808:	mov	r8, r1
   1780c:	str	r2, [sp, #48]	; 0x30
   17810:	str	r3, [sp, #24]
   17814:	ldr	r7, [sp, #152]	; 0x98
   17818:	bl	11608 <__ctype_get_mb_cur_max@plt>
   1781c:	str	r0, [sp, #76]	; 0x4c
   17820:	ldr	r3, [sp, #156]	; 0x9c
   17824:	ubfx	r3, r3, #1, #1
   17828:	str	r3, [sp, #32]
   1782c:	mov	r3, #1
   17830:	str	r3, [sp, #40]	; 0x28
   17834:	mov	r3, #0
   17838:	str	r3, [sp, #68]	; 0x44
   1783c:	str	r3, [sp, #36]	; 0x24
   17840:	str	r3, [sp, #28]
   17844:	str	r3, [sp, #52]	; 0x34
   17848:	str	r3, [sp, #60]	; 0x3c
   1784c:	str	r3, [sp, #72]	; 0x48
   17850:	movw	r3, #50108	; 0xc3bc
   17854:	movt	r3, #1
   17858:	str	r3, [sp, #80]	; 0x50
   1785c:	mov	r9, r8
   17860:	mov	sl, r7
   17864:	cmp	sl, #10
   17868:	ldrls	pc, [pc, sl, lsl #2]
   1786c:	b	17a30 <lchmod@@Base+0xc18>
   17870:	ldrdeq	r7, [r1], -r0
   17874:	andeq	r7, r1, r4, lsr #17
   17878:	andeq	r7, r1, r8, lsl #20
   1787c:	muleq	r1, ip, r8
   17880:			; <UNDEFINED> instruction: 0x000179bc
   17884:	andeq	r7, r1, r0, ror #17
   17888:	andeq	r8, r1, ip, lsr #25
   1788c:	andeq	r7, r1, r4, lsr sl
   17890:	andeq	r7, r1, ip, lsl r9
   17894:	andeq	r7, r1, ip, lsl r9
   17898:	andeq	r7, r1, ip, lsl r9
   1789c:	mov	r3, #1
   178a0:	str	r3, [sp, #28]
   178a4:	mov	r3, #1
   178a8:	str	r3, [sp, #32]
   178ac:	str	r3, [sp, #52]	; 0x34
   178b0:	movw	r3, #50104	; 0xc3b8
   178b4:	movt	r3, #1
   178b8:	str	r3, [sp, #60]	; 0x3c
   178bc:	mov	fp, #0
   178c0:	mov	sl, #2
   178c4:	mov	r6, #0
   178c8:	ldr	r8, [sp, #64]	; 0x40
   178cc:	b	18144 <lchmod@@Base+0x132c>
   178d0:	mov	fp, sl
   178d4:	mov	r3, #0
   178d8:	str	r3, [sp, #32]
   178dc:	b	178c4 <lchmod@@Base+0xaac>
   178e0:	ldr	r3, [sp, #32]
   178e4:	cmp	r3, #0
   178e8:	bne	17a48 <lchmod@@Base+0xc30>
   178ec:	cmp	r9, #0
   178f0:	beq	17a6c <lchmod@@Base+0xc54>
   178f4:	mov	r3, #34	; 0x22
   178f8:	ldr	r2, [sp, #64]	; 0x40
   178fc:	strb	r3, [r2]
   17900:	mov	fp, #1
   17904:	str	fp, [sp, #28]
   17908:	str	fp, [sp, #52]	; 0x34
   1790c:	movw	r3, #50084	; 0xc3a4
   17910:	movt	r3, #1
   17914:	str	r3, [sp, #60]	; 0x3c
   17918:	b	178c4 <lchmod@@Base+0xaac>
   1791c:	cmp	sl, #10
   17920:	bne	17954 <lchmod@@Base+0xb3c>
   17924:	ldr	r3, [sp, #32]
   17928:	cmp	r3, #0
   1792c:	movne	fp, #0
   17930:	beq	1797c <lchmod@@Base+0xb64>
   17934:	ldr	r0, [sp, #168]	; 0xa8
   17938:	bl	116e0 <strlen@plt>
   1793c:	str	r0, [sp, #52]	; 0x34
   17940:	ldr	r3, [sp, #168]	; 0xa8
   17944:	str	r3, [sp, #60]	; 0x3c
   17948:	mov	r3, #1
   1794c:	str	r3, [sp, #28]
   17950:	b	178c4 <lchmod@@Base+0xaac>
   17954:	mov	r1, sl
   17958:	ldr	r0, [sp, #80]	; 0x50
   1795c:	bl	17694 <lchmod@@Base+0x87c>
   17960:	str	r0, [sp, #164]	; 0xa4
   17964:	mov	r1, sl
   17968:	movw	r0, #50104	; 0xc3b8
   1796c:	movt	r0, #1
   17970:	bl	17694 <lchmod@@Base+0x87c>
   17974:	str	r0, [sp, #168]	; 0xa8
   17978:	b	17924 <lchmod@@Base+0xb0c>
   1797c:	ldr	r3, [sp, #164]	; 0xa4
   17980:	ldrb	r3, [r3]
   17984:	cmp	r3, #0
   17988:	beq	179b4 <lchmod@@Base+0xb9c>
   1798c:	ldr	r2, [sp, #164]	; 0xa4
   17990:	mov	fp, #0
   17994:	ldr	r1, [sp, #64]	; 0x40
   17998:	cmp	r9, fp
   1799c:	strbhi	r3, [r1, fp]
   179a0:	add	fp, fp, #1
   179a4:	ldrb	r3, [r2, #1]!
   179a8:	cmp	r3, #0
   179ac:	bne	17998 <lchmod@@Base+0xb80>
   179b0:	b	17934 <lchmod@@Base+0xb1c>
   179b4:	mov	fp, #0
   179b8:	b	17934 <lchmod@@Base+0xb1c>
   179bc:	ldr	r3, [sp, #32]
   179c0:	cmp	r3, #0
   179c4:	bne	178a4 <lchmod@@Base+0xa8c>
   179c8:	mov	r3, #1
   179cc:	str	r3, [sp, #28]
   179d0:	cmp	r9, #0
   179d4:	beq	17a88 <lchmod@@Base+0xc70>
   179d8:	mov	r3, #39	; 0x27
   179dc:	ldr	r2, [sp, #64]	; 0x40
   179e0:	strb	r3, [r2]
   179e4:	mov	r3, #0
   179e8:	str	r3, [sp, #32]
   179ec:	mov	fp, #1
   179f0:	str	fp, [sp, #52]	; 0x34
   179f4:	movw	r3, #50104	; 0xc3b8
   179f8:	movt	r3, #1
   179fc:	str	r3, [sp, #60]	; 0x3c
   17a00:	mov	sl, #2
   17a04:	b	178c4 <lchmod@@Base+0xaac>
   17a08:	ldr	r3, [sp, #32]
   17a0c:	cmp	r3, #0
   17a10:	beq	179d0 <lchmod@@Base+0xbb8>
   17a14:	mov	r3, #1
   17a18:	str	r3, [sp, #52]	; 0x34
   17a1c:	movw	r3, #50104	; 0xc3b8
   17a20:	movt	r3, #1
   17a24:	str	r3, [sp, #60]	; 0x3c
   17a28:	mov	fp, #0
   17a2c:	b	178c4 <lchmod@@Base+0xaac>
   17a30:	bl	11878 <abort@plt>
   17a34:	mov	fp, #0
   17a38:	str	fp, [sp, #32]
   17a3c:	mov	r3, #1
   17a40:	str	r3, [sp, #28]
   17a44:	b	178c4 <lchmod@@Base+0xaac>
   17a48:	ldr	r3, [sp, #32]
   17a4c:	str	r3, [sp, #28]
   17a50:	mov	r3, #1
   17a54:	str	r3, [sp, #52]	; 0x34
   17a58:	movw	r3, #50084	; 0xc3a4
   17a5c:	movt	r3, #1
   17a60:	str	r3, [sp, #60]	; 0x3c
   17a64:	mov	fp, #0
   17a68:	b	178c4 <lchmod@@Base+0xaac>
   17a6c:	mov	fp, #1
   17a70:	str	fp, [sp, #28]
   17a74:	str	fp, [sp, #52]	; 0x34
   17a78:	movw	r3, #50084	; 0xc3a4
   17a7c:	movt	r3, #1
   17a80:	str	r3, [sp, #60]	; 0x3c
   17a84:	b	178c4 <lchmod@@Base+0xaac>
   17a88:	mov	r3, #0
   17a8c:	str	r3, [sp, #32]
   17a90:	mov	fp, #1
   17a94:	str	fp, [sp, #52]	; 0x34
   17a98:	movw	r3, #50104	; 0xc3b8
   17a9c:	movt	r3, #1
   17aa0:	str	r3, [sp, #60]	; 0x3c
   17aa4:	mov	sl, #2
   17aa8:	b	178c4 <lchmod@@Base+0xaac>
   17aac:	mov	r3, r2
   17ab0:	add	r4, r6, r2
   17ab4:	ldr	r2, [sp, #24]
   17ab8:	cmp	r3, #1
   17abc:	movls	r3, #0
   17ac0:	movhi	r3, #1
   17ac4:	cmn	r2, #1
   17ac8:	movne	r3, #0
   17acc:	cmp	r3, #0
   17ad0:	beq	17ae0 <lchmod@@Base+0xcc8>
   17ad4:	ldr	r0, [sp, #48]	; 0x30
   17ad8:	bl	116e0 <strlen@plt>
   17adc:	str	r0, [sp, #24]
   17ae0:	ldr	r3, [sp, #24]
   17ae4:	cmp	r4, r3
   17ae8:	bhi	18cd4 <lchmod@@Base+0x1ebc>
   17aec:	ldr	r3, [sp, #48]	; 0x30
   17af0:	add	r4, r3, r6
   17af4:	ldr	r2, [sp, #52]	; 0x34
   17af8:	ldr	r1, [sp, #60]	; 0x3c
   17afc:	mov	r0, r4
   17b00:	bl	11560 <memcmp@plt>
   17b04:	cmp	r0, #0
   17b08:	bne	18cd4 <lchmod@@Base+0x1ebc>
   17b0c:	ldr	r3, [sp, #32]
   17b10:	cmp	r3, #0
   17b14:	bne	17d24 <lchmod@@Base+0xf0c>
   17b18:	ldrb	r4, [r4]
   17b1c:	cmp	r4, #126	; 0x7e
   17b20:	ldrls	pc, [pc, r4, lsl #2]
   17b24:	b	185d8 <lchmod@@Base+0x17c0>
   17b28:	andeq	r7, r1, r8, ror #26
   17b2c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b30:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b34:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b38:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b3c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b40:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b44:	andeq	r8, r1, r0, lsl #9
   17b48:	andeq	r8, r1, r4
   17b4c:	andeq	r8, r1, r8, lsr #7
   17b50:	andeq	r8, r1, r4, asr r4
   17b54:			; <UNDEFINED> instruction: 0x000183bc
   17b58:	andeq	r8, r1, r8, lsl r0
   17b5c:	andeq	r8, r1, ip, lsr #32
   17b60:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b64:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b68:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b6c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b70:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b74:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b78:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b7c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b80:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b84:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b88:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b8c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b90:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b94:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b98:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b9c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ba0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ba4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ba8:	strdeq	r8, [r1], -r4
   17bac:	andeq	r8, r1, r8, lsl r5
   17bb0:	andeq	r8, r1, r8, lsl r5
   17bb4:			; <UNDEFINED> instruction: 0x000184b0
   17bb8:	andeq	r8, r1, r8, lsl r5
   17bbc:	andeq	r8, r1, r8, lsr sl
   17bc0:	andeq	r8, r1, r8, lsl r5
   17bc4:	andeq	r8, r1, r8, lsr r5
   17bc8:	andeq	r8, r1, r8, lsl r5
   17bcc:	andeq	r8, r1, r8, lsl r5
   17bd0:	andeq	r8, r1, r8, lsl r5
   17bd4:	andeq	r8, r1, r8, lsr sl
   17bd8:	andeq	r8, r1, r8, lsr sl
   17bdc:	andeq	r8, r1, r8, lsr sl
   17be0:	andeq	r8, r1, r8, lsr sl
   17be4:	andeq	r8, r1, r8, lsr sl
   17be8:	andeq	r8, r1, r8, lsr sl
   17bec:	andeq	r8, r1, r8, lsr sl
   17bf0:	andeq	r8, r1, r8, lsr sl
   17bf4:	andeq	r8, r1, r8, lsr sl
   17bf8:	andeq	r8, r1, r8, lsr sl
   17bfc:	andeq	r8, r1, r8, lsr sl
   17c00:	andeq	r8, r1, r8, lsr sl
   17c04:	andeq	r8, r1, r8, lsr sl
   17c08:	andeq	r8, r1, r8, lsr sl
   17c0c:	andeq	r8, r1, r8, lsr sl
   17c10:	andeq	r8, r1, r8, lsr sl
   17c14:	andeq	r8, r1, r8, lsl r5
   17c18:	andeq	r8, r1, r8, lsl r5
   17c1c:	andeq	r8, r1, r8, lsl r5
   17c20:	andeq	r8, r1, r8, lsl r5
   17c24:	muleq	r1, r8, lr
   17c28:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17c2c:	andeq	r8, r1, r8, lsr sl
   17c30:	andeq	r8, r1, r8, lsr sl
   17c34:	andeq	r8, r1, r8, lsr sl
   17c38:	andeq	r8, r1, r8, lsr sl
   17c3c:	andeq	r8, r1, r8, lsr sl
   17c40:	andeq	r8, r1, r8, lsr sl
   17c44:	andeq	r8, r1, r8, lsr sl
   17c48:	andeq	r8, r1, r8, lsr sl
   17c4c:	andeq	r8, r1, r8, lsr sl
   17c50:	andeq	r8, r1, r8, lsr sl
   17c54:	andeq	r8, r1, r8, lsr sl
   17c58:	andeq	r8, r1, r8, lsr sl
   17c5c:	andeq	r8, r1, r8, lsr sl
   17c60:	andeq	r8, r1, r8, lsr sl
   17c64:	andeq	r8, r1, r8, lsr sl
   17c68:	andeq	r8, r1, r8, lsr sl
   17c6c:	andeq	r8, r1, r8, lsr sl
   17c70:	andeq	r8, r1, r8, lsr sl
   17c74:	andeq	r8, r1, r8, lsr sl
   17c78:	andeq	r8, r1, r8, lsr sl
   17c7c:	andeq	r8, r1, r8, lsr sl
   17c80:	andeq	r8, r1, r8, lsr sl
   17c84:	andeq	r8, r1, r8, lsr sl
   17c88:	andeq	r8, r1, r8, lsr sl
   17c8c:	andeq	r8, r1, r8, lsr sl
   17c90:	andeq	r8, r1, r8, lsr sl
   17c94:	andeq	r8, r1, r8, lsl r5
   17c98:	ldrdeq	r8, [r1], -r0
   17c9c:	andeq	r8, r1, r8, lsr sl
   17ca0:	andeq	r8, r1, r8, lsl r5
   17ca4:	andeq	r8, r1, r8, lsr sl
   17ca8:	andeq	r8, r1, r8, lsl r5
   17cac:	andeq	r8, r1, r8, lsr sl
   17cb0:	andeq	r8, r1, r8, lsr sl
   17cb4:	andeq	r8, r1, r8, lsr sl
   17cb8:	andeq	r8, r1, r8, lsr sl
   17cbc:	andeq	r8, r1, r8, lsr sl
   17cc0:	andeq	r8, r1, r8, lsr sl
   17cc4:	andeq	r8, r1, r8, lsr sl
   17cc8:	andeq	r8, r1, r8, lsr sl
   17ccc:	andeq	r8, r1, r8, lsr sl
   17cd0:	andeq	r8, r1, r8, lsr sl
   17cd4:	andeq	r8, r1, r8, lsr sl
   17cd8:	andeq	r8, r1, r8, lsr sl
   17cdc:	andeq	r8, r1, r8, lsr sl
   17ce0:	andeq	r8, r1, r8, lsr sl
   17ce4:	andeq	r8, r1, r8, lsr sl
   17ce8:	andeq	r8, r1, r8, lsr sl
   17cec:	andeq	r8, r1, r8, lsr sl
   17cf0:	andeq	r8, r1, r8, lsr sl
   17cf4:	andeq	r8, r1, r8, lsr sl
   17cf8:	andeq	r8, r1, r8, lsr sl
   17cfc:	andeq	r8, r1, r8, lsr sl
   17d00:	andeq	r8, r1, r8, lsr sl
   17d04:	andeq	r8, r1, r8, lsr sl
   17d08:	andeq	r8, r1, r8, lsr sl
   17d0c:	andeq	r8, r1, r8, lsr sl
   17d10:	andeq	r8, r1, r8, lsr sl
   17d14:	muleq	r1, r0, r4
   17d18:	andeq	r8, r1, r8, lsl r5
   17d1c:	muleq	r1, r0, r4
   17d20:			; <UNDEFINED> instruction: 0x000184b0
   17d24:	mov	r8, r9
   17d28:	mov	r7, sl
   17d2c:	b	18c2c <lchmod@@Base+0x1e14>
   17d30:	ldr	r3, [sp, #28]
   17d34:	cmp	r3, #0
   17d38:	bne	17d58 <lchmod@@Base+0xf40>
   17d3c:	ldr	r3, [sp, #156]	; 0x9c
   17d40:	tst	r3, #1
   17d44:	bne	18140 <lchmod@@Base+0x1328>
   17d48:	ldr	r3, [sp, #28]
   17d4c:	str	r3, [sp, #44]	; 0x2c
   17d50:	mov	r5, r3
   17d54:	b	18060 <lchmod@@Base+0x1248>
   17d58:	ldr	r3, [sp, #32]
   17d5c:	cmp	r3, #0
   17d60:	bne	18bdc <lchmod@@Base+0x1dc4>
   17d64:	str	r3, [sp, #44]	; 0x2c
   17d68:	ldr	r3, [sp, #36]	; 0x24
   17d6c:	eor	r3, r3, #1
   17d70:	cmp	sl, #2
   17d74:	movne	r3, #0
   17d78:	andeq	r3, r3, #1
   17d7c:	cmp	r3, #0
   17d80:	beq	17dd8 <lchmod@@Base+0xfc0>
   17d84:	cmp	r9, fp
   17d88:	movhi	r2, #39	; 0x27
   17d8c:	strbhi	r2, [r8, fp]
   17d90:	add	r2, fp, #1
   17d94:	cmp	r9, r2
   17d98:	movhi	r1, #36	; 0x24
   17d9c:	strbhi	r1, [r8, r2]
   17da0:	add	r2, fp, #2
   17da4:	cmp	r9, r2
   17da8:	movhi	r1, #39	; 0x27
   17dac:	strbhi	r1, [r8, r2]
   17db0:	add	r2, fp, #3
   17db4:	cmp	r9, r2
   17db8:	bls	18c98 <lchmod@@Base+0x1e80>
   17dbc:	mov	r1, #92	; 0x5c
   17dc0:	strb	r1, [r8, r2]
   17dc4:	add	fp, fp, #4
   17dc8:	str	r3, [sp, #36]	; 0x24
   17dcc:	mov	r5, #0
   17dd0:	mov	r4, #48	; 0x30
   17dd4:	b	180ac <lchmod@@Base+0x1294>
   17dd8:	cmp	r9, fp
   17ddc:	bhi	17e04 <lchmod@@Base+0xfec>
   17de0:	add	r1, fp, #1
   17de4:	ldr	r2, [sp, #56]	; 0x38
   17de8:	cmp	r2, #0
   17dec:	bne	17e2c <lchmod@@Base+0x1014>
   17df0:	mov	r3, r5
   17df4:	ldr	r5, [sp, #56]	; 0x38
   17df8:	mov	fp, r1
   17dfc:	mov	r4, #48	; 0x30
   17e00:	b	18060 <lchmod@@Base+0x1248>
   17e04:	mov	r2, #92	; 0x5c
   17e08:	strb	r2, [r8, fp]
   17e0c:	add	r1, fp, #1
   17e10:	ldr	r2, [sp, #56]	; 0x38
   17e14:	cmp	r2, #0
   17e18:	moveq	r3, r5
   17e1c:	moveq	r5, r2
   17e20:	moveq	fp, r1
   17e24:	moveq	r4, #48	; 0x30
   17e28:	beq	180ac <lchmod@@Base+0x1294>
   17e2c:	add	r2, r6, #1
   17e30:	ldr	r0, [sp, #24]
   17e34:	cmp	r2, r0
   17e38:	bcs	17e54 <lchmod@@Base+0x103c>
   17e3c:	ldr	r0, [sp, #48]	; 0x30
   17e40:	ldrb	r2, [r0, r2]
   17e44:	sub	r2, r2, #48	; 0x30
   17e48:	uxtb	r2, r2
   17e4c:	cmp	r2, #9
   17e50:	bls	17e6c <lchmod@@Base+0x1054>
   17e54:	mov	r2, r3
   17e58:	mov	r3, r5
   17e5c:	mov	r5, r2
   17e60:	mov	fp, r1
   17e64:	mov	r4, #48	; 0x30
   17e68:	b	18084 <lchmod@@Base+0x126c>
   17e6c:	cmp	r9, r1
   17e70:	movhi	r2, #48	; 0x30
   17e74:	strbhi	r2, [r8, r1]
   17e78:	add	r2, fp, #2
   17e7c:	cmp	r9, r2
   17e80:	movhi	r1, #48	; 0x30
   17e84:	strbhi	r1, [r8, r2]
   17e88:	add	r1, fp, #3
   17e8c:	b	17e54 <lchmod@@Base+0x103c>
   17e90:	mov	r3, #0
   17e94:	str	r3, [sp, #44]	; 0x2c
   17e98:	cmp	sl, #2
   17e9c:	beq	17eb8 <lchmod@@Base+0x10a0>
   17ea0:	cmp	sl, #5
   17ea4:	beq	17ed0 <lchmod@@Base+0x10b8>
   17ea8:	mov	r5, #0
   17eac:	mov	r3, r5
   17eb0:	mov	r4, #63	; 0x3f
   17eb4:	b	18060 <lchmod@@Base+0x1248>
   17eb8:	ldr	r3, [sp, #32]
   17ebc:	cmp	r3, #0
   17ec0:	bne	18be8 <lchmod@@Base+0x1dd0>
   17ec4:	mov	r5, r3
   17ec8:	mov	r4, #63	; 0x3f
   17ecc:	b	185c8 <lchmod@@Base+0x17b0>
   17ed0:	ldr	r3, [sp, #156]	; 0x9c
   17ed4:	tst	r3, #4
   17ed8:	beq	18a00 <lchmod@@Base+0x1be8>
   17edc:	add	r2, r6, #2
   17ee0:	ldr	r3, [sp, #24]
   17ee4:	cmp	r2, r3
   17ee8:	bcs	18a10 <lchmod@@Base+0x1bf8>
   17eec:	ldr	r3, [sp, #48]	; 0x30
   17ef0:	add	r3, r3, r6
   17ef4:	ldrb	r4, [r3, #1]
   17ef8:	cmp	r4, #63	; 0x3f
   17efc:	movne	r5, #0
   17f00:	movne	r3, r5
   17f04:	movne	r4, #63	; 0x3f
   17f08:	bne	18060 <lchmod@@Base+0x1248>
   17f0c:	ldr	r3, [sp, #48]	; 0x30
   17f10:	ldrb	r1, [r3, r2]
   17f14:	sub	r3, r1, #33	; 0x21
   17f18:	cmp	r3, #29
   17f1c:	ldrls	pc, [pc, r3, lsl #2]
   17f20:	b	18a20 <lchmod@@Base+0x1c08>
   17f24:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f28:	andeq	r8, r1, r0, lsr #20
   17f2c:	andeq	r8, r1, r0, lsr #20
   17f30:	andeq	r8, r1, r0, lsr #20
   17f34:	andeq	r8, r1, r0, lsr #20
   17f38:	andeq	r8, r1, r0, lsr #20
   17f3c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f40:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f44:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f48:	andeq	r8, r1, r0, lsr #20
   17f4c:	andeq	r8, r1, r0, lsr #20
   17f50:	andeq	r8, r1, r0, lsr #20
   17f54:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f58:	andeq	r8, r1, r0, lsr #20
   17f5c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f60:	andeq	r8, r1, r0, lsr #20
   17f64:	andeq	r8, r1, r0, lsr #20
   17f68:	andeq	r8, r1, r0, lsr #20
   17f6c:	andeq	r8, r1, r0, lsr #20
   17f70:	andeq	r8, r1, r0, lsr #20
   17f74:	andeq	r8, r1, r0, lsr #20
   17f78:	andeq	r8, r1, r0, lsr #20
   17f7c:	andeq	r8, r1, r0, lsr #20
   17f80:	andeq	r8, r1, r0, lsr #20
   17f84:	andeq	r8, r1, r0, lsr #20
   17f88:	andeq	r8, r1, r0, lsr #20
   17f8c:	andeq	r8, r1, r0, lsr #20
   17f90:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f94:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f98:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17f9c:	ldr	r3, [sp, #32]
   17fa0:	cmp	r3, #0
   17fa4:	bne	18c8c <lchmod@@Base+0x1e74>
   17fa8:	cmp	r9, fp
   17fac:	movhi	r3, #63	; 0x3f
   17fb0:	strbhi	r3, [r8, fp]
   17fb4:	add	r3, fp, #1
   17fb8:	cmp	r9, r3
   17fbc:	movhi	r0, #34	; 0x22
   17fc0:	strbhi	r0, [r8, r3]
   17fc4:	add	r3, fp, #2
   17fc8:	cmp	r9, r3
   17fcc:	movhi	r0, #34	; 0x22
   17fd0:	strbhi	r0, [r8, r3]
   17fd4:	add	r3, fp, #3
   17fd8:	cmp	r9, r3
   17fdc:	movhi	r0, #63	; 0x3f
   17fe0:	strbhi	r0, [r8, r3]
   17fe4:	add	fp, fp, #4
   17fe8:	ldr	r3, [sp, #32]
   17fec:	mov	r5, r3
   17ff0:	mov	r4, r1
   17ff4:	mov	r6, r2
   17ff8:	b	18060 <lchmod@@Base+0x1248>
   17ffc:	mov	r3, #0
   18000:	str	r3, [sp, #44]	; 0x2c
   18004:	mov	r4, #8
   18008:	mov	r3, #98	; 0x62
   1800c:	b	1804c <lchmod@@Base+0x1234>
   18010:	mov	r3, #0
   18014:	str	r3, [sp, #44]	; 0x2c
   18018:	mov	r4, #12
   1801c:	mov	r3, #102	; 0x66
   18020:	b	1804c <lchmod@@Base+0x1234>
   18024:	mov	r3, #0
   18028:	str	r3, [sp, #44]	; 0x2c
   1802c:	mov	r4, #13
   18030:	mov	r3, #114	; 0x72
   18034:	ldr	r2, [sp, #32]
   18038:	cmp	sl, #2
   1803c:	movne	r2, #0
   18040:	andeq	r2, r2, #1
   18044:	cmp	r2, #0
   18048:	bne	1846c <lchmod@@Base+0x1654>
   1804c:	ldr	r2, [sp, #28]
   18050:	cmp	r2, #0
   18054:	bne	18a54 <lchmod@@Base+0x1c3c>
   18058:	mov	r5, r2
   1805c:	mov	r3, r2
   18060:	ldr	r2, [sp, #28]
   18064:	eor	r2, r2, #1
   18068:	cmp	sl, #2
   1806c:	orreq	r2, r2, #1
   18070:	eor	r2, r2, #1
   18074:	ldr	r1, [sp, #32]
   18078:	orr	r2, r1, r2
   1807c:	tst	r2, #255	; 0xff
   18080:	beq	180ac <lchmod@@Base+0x1294>
   18084:	ldr	r2, [sp, #160]	; 0xa0
   18088:	cmp	r2, #0
   1808c:	beq	180ac <lchmod@@Base+0x1294>
   18090:	ubfx	r1, r4, #5, #8
   18094:	and	r2, r4, #31
   18098:	ldr	r0, [sp, #160]	; 0xa0
   1809c:	ldr	r1, [r0, r1, lsl #2]
   180a0:	lsr	r2, r1, r2
   180a4:	tst	r2, #1
   180a8:	bne	180b8 <lchmod@@Base+0x12a0>
   180ac:	ldr	r2, [sp, #44]	; 0x2c
   180b0:	cmp	r2, #0
   180b4:	beq	1840c <lchmod@@Base+0x15f4>
   180b8:	ldr	r3, [sp, #32]
   180bc:	cmp	r3, #0
   180c0:	bne	18c0c <lchmod@@Base+0x1df4>
   180c4:	ldr	r3, [sp, #36]	; 0x24
   180c8:	eor	r3, r3, #1
   180cc:	cmp	sl, #2
   180d0:	movne	r3, #0
   180d4:	andeq	r3, r3, #1
   180d8:	cmp	r3, #0
   180dc:	beq	18114 <lchmod@@Base+0x12fc>
   180e0:	cmp	r9, fp
   180e4:	movhi	r2, #39	; 0x27
   180e8:	strbhi	r2, [r8, fp]
   180ec:	add	r2, fp, #1
   180f0:	cmp	r9, r2
   180f4:	movhi	r1, #36	; 0x24
   180f8:	strbhi	r1, [r8, r2]
   180fc:	add	r2, fp, #2
   18100:	cmp	r9, r2
   18104:	movhi	r1, #39	; 0x27
   18108:	strbhi	r1, [r8, r2]
   1810c:	add	fp, fp, #3
   18110:	str	r3, [sp, #36]	; 0x24
   18114:	cmp	r9, fp
   18118:	movhi	r3, #92	; 0x5c
   1811c:	strbhi	r3, [r8, fp]
   18120:	add	fp, fp, #1
   18124:	cmp	fp, r9
   18128:	strbcc	r4, [r8, fp]
   1812c:	add	fp, fp, #1
   18130:	cmp	r5, #0
   18134:	ldr	r3, [sp, #40]	; 0x28
   18138:	moveq	r3, r5
   1813c:	str	r3, [sp, #40]	; 0x28
   18140:	add	r6, r6, #1
   18144:	ldr	r3, [sp, #24]
   18148:	cmn	r3, #1
   1814c:	beq	18a7c <lchmod@@Base+0x1c64>
   18150:	ldr	r3, [sp, #24]
   18154:	subs	r5, r3, r6
   18158:	movne	r5, #1
   1815c:	cmp	r5, #0
   18160:	beq	18a90 <lchmod@@Base+0x1c78>
   18164:	ldr	r3, [sp, #28]
   18168:	cmp	sl, #2
   1816c:	moveq	r3, #0
   18170:	andne	r3, r3, #1
   18174:	str	r3, [sp, #56]	; 0x38
   18178:	ldr	r2, [sp, #52]	; 0x34
   1817c:	adds	r7, r2, #0
   18180:	movne	r7, #1
   18184:	ands	r3, r3, r7
   18188:	str	r3, [sp, #44]	; 0x2c
   1818c:	bne	17aac <lchmod@@Base+0xc94>
   18190:	ldr	r3, [sp, #48]	; 0x30
   18194:	ldrb	r4, [r3, r6]
   18198:	cmp	r4, #126	; 0x7e
   1819c:	ldrls	pc, [pc, r4, lsl #2]
   181a0:	b	185d8 <lchmod@@Base+0x17c0>
   181a4:	andeq	r7, r1, r0, lsr sp
   181a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181c0:	andeq	r8, r1, r8, ror r4
   181c4:	andeq	r8, r1, r4
   181c8:	andeq	r8, r1, r8, lsr #7
   181cc:	andeq	r8, r1, ip, asr #8
   181d0:			; <UNDEFINED> instruction: 0x000183bc
   181d4:	andeq	r8, r1, r8, lsl r0
   181d8:	andeq	r8, r1, ip, lsr #32
   181dc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18200:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18204:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18208:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1820c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18210:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18214:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18218:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1821c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18220:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18224:	strdeq	r8, [r1], -r4
   18228:	strdeq	r8, [r1], -r0
   1822c:	strdeq	r8, [r1], -r0
   18230:			; <UNDEFINED> instruction: 0x000184b0
   18234:	strdeq	r8, [r1], -r0
   18238:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1823c:	strdeq	r8, [r1], -r0
   18240:	andeq	r8, r1, r8, lsr r5
   18244:	strdeq	r8, [r1], -r0
   18248:	strdeq	r8, [r1], -r0
   1824c:	strdeq	r8, [r1], -r0
   18250:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18254:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18258:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1825c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18260:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18264:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18268:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1826c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18270:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18274:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18278:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1827c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18280:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18284:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18288:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1828c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18290:	strdeq	r8, [r1], -r0
   18294:	strdeq	r8, [r1], -r0
   18298:	strdeq	r8, [r1], -r0
   1829c:	strdeq	r8, [r1], -r0
   182a0:	muleq	r1, r8, lr
   182a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182a8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182ac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182bc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182cc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182dc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182ec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182f0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182f4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182f8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182fc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18300:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18304:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18308:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1830c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18310:	strdeq	r8, [r1], -r0
   18314:	ldrdeq	r8, [r1], -r0
   18318:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1831c:	strdeq	r8, [r1], -r0
   18320:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18324:	strdeq	r8, [r1], -r0
   18328:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1832c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18330:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18334:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18338:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1833c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18340:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18344:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18348:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1834c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18350:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18354:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18358:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1835c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18360:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18364:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18368:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1836c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18370:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18374:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18378:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1837c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18380:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18384:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18388:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1838c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18390:	muleq	r1, r0, r4
   18394:	strdeq	r8, [r1], -r0
   18398:	muleq	r1, r0, r4
   1839c:			; <UNDEFINED> instruction: 0x000184b0
   183a0:	mov	r3, #0
   183a4:	str	r3, [sp, #44]	; 0x2c
   183a8:	mov	r4, #9
   183ac:	mov	r3, #116	; 0x74
   183b0:	b	18034 <lchmod@@Base+0x121c>
   183b4:	mov	r3, #0
   183b8:	str	r3, [sp, #44]	; 0x2c
   183bc:	mov	r4, #11
   183c0:	mov	r3, #118	; 0x76
   183c4:	b	1804c <lchmod@@Base+0x1234>
   183c8:	mov	r3, #0
   183cc:	str	r3, [sp, #44]	; 0x2c
   183d0:	cmp	sl, #2
   183d4:	beq	183f8 <lchmod@@Base+0x15e0>
   183d8:	ldr	r3, [sp, #28]
   183dc:	ldr	r2, [sp, #32]
   183e0:	and	r3, r3, r2
   183e4:	tst	r7, r3
   183e8:	bne	18a6c <lchmod@@Base+0x1c54>
   183ec:	mov	r4, #92	; 0x5c
   183f0:	mov	r3, r4
   183f4:	b	1804c <lchmod@@Base+0x1234>
   183f8:	ldr	r3, [sp, #32]
   183fc:	cmp	r3, #0
   18400:	bne	18bf4 <lchmod@@Base+0x1ddc>
   18404:	mov	r5, r3
   18408:	mov	r4, #92	; 0x5c
   1840c:	eor	r3, r3, #1
   18410:	ldr	r2, [sp, #36]	; 0x24
   18414:	and	r3, r3, r2
   18418:	tst	r3, #255	; 0xff
   1841c:	beq	18124 <lchmod@@Base+0x130c>
   18420:	cmp	r9, fp
   18424:	movhi	r3, #39	; 0x27
   18428:	strbhi	r3, [r8, fp]
   1842c:	add	r3, fp, #1
   18430:	cmp	r9, r3
   18434:	movhi	r2, #39	; 0x27
   18438:	strbhi	r2, [r8, r3]
   1843c:	add	fp, fp, #2
   18440:	mov	r3, #0
   18444:	str	r3, [sp, #36]	; 0x24
   18448:	b	18124 <lchmod@@Base+0x130c>
   1844c:	mov	r3, #110	; 0x6e
   18450:	b	18034 <lchmod@@Base+0x121c>
   18454:	mov	r3, #110	; 0x6e
   18458:	b	18034 <lchmod@@Base+0x121c>
   1845c:	mov	r3, #0
   18460:	str	r3, [sp, #44]	; 0x2c
   18464:	mov	r3, #110	; 0x6e
   18468:	b	18034 <lchmod@@Base+0x121c>
   1846c:	mov	r8, r9
   18470:	mov	r7, #2
   18474:	b	18c14 <lchmod@@Base+0x1dfc>
   18478:	mov	r3, #97	; 0x61
   1847c:	b	1804c <lchmod@@Base+0x1234>
   18480:	mov	r3, #97	; 0x61
   18484:	b	1804c <lchmod@@Base+0x1234>
   18488:	mov	r3, #0
   1848c:	str	r3, [sp, #44]	; 0x2c
   18490:	ldr	r3, [sp, #24]
   18494:	cmn	r3, #1
   18498:	beq	184c4 <lchmod@@Base+0x16ac>
   1849c:	ldr	r3, [sp, #24]
   184a0:	subs	r3, r3, #1
   184a4:	movne	r3, #1
   184a8:	cmp	r3, #0
   184ac:	bne	18a2c <lchmod@@Base+0x1c14>
   184b0:	cmp	r6, #0
   184b4:	beq	184f4 <lchmod@@Base+0x16dc>
   184b8:	mov	r5, #0
   184bc:	mov	r3, r5
   184c0:	b	18060 <lchmod@@Base+0x1248>
   184c4:	ldr	r3, [sp, #48]	; 0x30
   184c8:	ldrb	r3, [r3, #1]
   184cc:	adds	r3, r3, #0
   184d0:	movne	r3, #1
   184d4:	b	184a8 <lchmod@@Base+0x1690>
   184d8:	mov	r3, #0
   184dc:	str	r3, [sp, #44]	; 0x2c
   184e0:	b	184b0 <lchmod@@Base+0x1698>
   184e4:	mov	r3, #0
   184e8:	str	r3, [sp, #44]	; 0x2c
   184ec:	b	184f4 <lchmod@@Base+0x16dc>
   184f0:	ldr	r5, [sp, #44]	; 0x2c
   184f4:	ldr	r3, [sp, #32]
   184f8:	cmp	sl, #2
   184fc:	movne	r3, #0
   18500:	andeq	r3, r3, #1
   18504:	cmp	r3, #0
   18508:	beq	18060 <lchmod@@Base+0x1248>
   1850c:	mov	r8, r9
   18510:	mov	r7, #2
   18514:	b	18c14 <lchmod@@Base+0x1dfc>
   18518:	ldr	r5, [sp, #32]
   1851c:	b	184f4 <lchmod@@Base+0x16dc>
   18520:	mov	r3, #0
   18524:	str	r3, [sp, #44]	; 0x2c
   18528:	mov	r5, r3
   1852c:	b	184f4 <lchmod@@Base+0x16dc>
   18530:	mov	r3, #0
   18534:	str	r3, [sp, #44]	; 0x2c
   18538:	cmp	sl, #2
   1853c:	strne	r5, [sp, #68]	; 0x44
   18540:	movne	r3, #0
   18544:	movne	r4, #39	; 0x27
   18548:	bne	18060 <lchmod@@Base+0x1248>
   1854c:	ldr	r3, [sp, #32]
   18550:	cmp	r3, #0
   18554:	bne	18c00 <lchmod@@Base+0x1de8>
   18558:	ldr	r3, [sp, #72]	; 0x48
   1855c:	clz	r3, r3
   18560:	lsr	r3, r3, #5
   18564:	cmp	r9, #0
   18568:	moveq	r3, #0
   1856c:	cmp	r3, #0
   18570:	movne	r3, #0
   18574:	bne	1859c <lchmod@@Base+0x1784>
   18578:	cmp	r9, fp
   1857c:	movhi	r3, #39	; 0x27
   18580:	strbhi	r3, [r8, fp]
   18584:	add	r3, fp, #1
   18588:	cmp	r9, r3
   1858c:	movhi	r2, #92	; 0x5c
   18590:	strbhi	r2, [r8, r3]
   18594:	mov	r3, r9
   18598:	ldr	r9, [sp, #72]	; 0x48
   1859c:	add	r2, fp, #2
   185a0:	cmp	r2, r3
   185a4:	movcc	r1, #39	; 0x27
   185a8:	strbcc	r1, [r8, r2]
   185ac:	add	fp, fp, #3
   185b0:	str	r5, [sp, #68]	; 0x44
   185b4:	ldr	r2, [sp, #32]
   185b8:	str	r2, [sp, #36]	; 0x24
   185bc:	str	r9, [sp, #72]	; 0x48
   185c0:	mov	r9, r3
   185c4:	mov	r4, #39	; 0x27
   185c8:	mov	r3, #0
   185cc:	b	180ac <lchmod@@Base+0x1294>
   185d0:	mov	r3, #0
   185d4:	str	r3, [sp, #44]	; 0x2c
   185d8:	ldr	r7, [sp, #76]	; 0x4c
   185dc:	cmp	r7, #1
   185e0:	bne	18618 <lchmod@@Base+0x1800>
   185e4:	bl	116b0 <__ctype_b_loc@plt>
   185e8:	ldr	r2, [r0]
   185ec:	lsl	r3, r4, #1
   185f0:	ldrh	r5, [r2, r3]
   185f4:	ubfx	r5, r5, #14, #1
   185f8:	mov	ip, r7
   185fc:	eor	r3, r5, #1
   18600:	ldr	r2, [sp, #28]
   18604:	and	r3, r3, r2
   18608:	ands	r3, r3, #255	; 0xff
   1860c:	beq	18060 <lchmod@@Base+0x1248>
   18610:	mov	r5, #0
   18614:	b	18874 <lchmod@@Base+0x1a5c>
   18618:	mov	r2, #0
   1861c:	mov	r3, #0
   18620:	strd	r2, [sp, #104]	; 0x68
   18624:	ldr	r3, [sp, #24]
   18628:	cmn	r3, #1
   1862c:	beq	18650 <lchmod@@Base+0x1838>
   18630:	mov	r3, #0
   18634:	str	r4, [sp, #88]	; 0x58
   18638:	str	fp, [sp, #92]	; 0x5c
   1863c:	str	r8, [sp, #56]	; 0x38
   18640:	mov	r8, r3
   18644:	str	r9, [sp, #84]	; 0x54
   18648:	ldr	r9, [sp, #48]	; 0x30
   1864c:	b	1879c <lchmod@@Base+0x1984>
   18650:	ldr	r0, [sp, #48]	; 0x30
   18654:	bl	116e0 <strlen@plt>
   18658:	str	r0, [sp, #24]
   1865c:	b	18630 <lchmod@@Base+0x1818>
   18660:	mov	r1, fp
   18664:	ldr	r4, [sp, #88]	; 0x58
   18668:	mov	r2, r8
   1866c:	mov	ip, r8
   18670:	ldr	fp, [sp, #92]	; 0x5c
   18674:	ldr	r8, [sp, #56]	; 0x38
   18678:	ldr	r9, [sp, #84]	; 0x54
   1867c:	ldr	r0, [sp, #24]
   18680:	cmp	r7, r0
   18684:	bcs	1883c <lchmod@@Base+0x1a24>
   18688:	ldrb	r3, [r1]
   1868c:	cmp	r3, #0
   18690:	beq	18844 <lchmod@@Base+0x1a2c>
   18694:	mov	r3, r1
   18698:	add	r2, r2, #1
   1869c:	add	r1, r6, r2
   186a0:	cmp	r0, r1
   186a4:	bls	1884c <lchmod@@Base+0x1a34>
   186a8:	ldrb	r1, [r3, #1]!
   186ac:	cmp	r1, #0
   186b0:	bne	18698 <lchmod@@Base+0x1880>
   186b4:	mov	ip, r2
   186b8:	mov	r5, #0
   186bc:	b	1886c <lchmod@@Base+0x1a54>
   186c0:	ldr	r3, [sp, #56]	; 0x38
   186c4:	str	r3, [sp, #64]	; 0x40
   186c8:	ldr	r8, [sp, #84]	; 0x54
   186cc:	mov	r7, #2
   186d0:	b	18c14 <lchmod@@Base+0x1dfc>
   186d4:	cmp	r2, r7
   186d8:	beq	18778 <lchmod@@Base+0x1960>
   186dc:	ldrb	r3, [r2], #1
   186e0:	sub	r3, r3, #91	; 0x5b
   186e4:	cmp	r3, #33	; 0x21
   186e8:	ldrls	pc, [pc, r3, lsl #2]
   186ec:	b	186d4 <lchmod@@Base+0x18bc>
   186f0:	andeq	r8, r1, r0, asr #13
   186f4:	andeq	r8, r1, r0, asr #13
   186f8:	ldrdeq	r8, [r1], -r4
   186fc:	andeq	r8, r1, r0, asr #13
   18700:	ldrdeq	r8, [r1], -r4
   18704:	andeq	r8, r1, r0, asr #13
   18708:	ldrdeq	r8, [r1], -r4
   1870c:	ldrdeq	r8, [r1], -r4
   18710:	ldrdeq	r8, [r1], -r4
   18714:	ldrdeq	r8, [r1], -r4
   18718:	ldrdeq	r8, [r1], -r4
   1871c:	ldrdeq	r8, [r1], -r4
   18720:	ldrdeq	r8, [r1], -r4
   18724:	ldrdeq	r8, [r1], -r4
   18728:	ldrdeq	r8, [r1], -r4
   1872c:	ldrdeq	r8, [r1], -r4
   18730:	ldrdeq	r8, [r1], -r4
   18734:	ldrdeq	r8, [r1], -r4
   18738:	ldrdeq	r8, [r1], -r4
   1873c:	ldrdeq	r8, [r1], -r4
   18740:	ldrdeq	r8, [r1], -r4
   18744:	ldrdeq	r8, [r1], -r4
   18748:	ldrdeq	r8, [r1], -r4
   1874c:	ldrdeq	r8, [r1], -r4
   18750:	ldrdeq	r8, [r1], -r4
   18754:	ldrdeq	r8, [r1], -r4
   18758:	ldrdeq	r8, [r1], -r4
   1875c:	ldrdeq	r8, [r1], -r4
   18760:	ldrdeq	r8, [r1], -r4
   18764:	ldrdeq	r8, [r1], -r4
   18768:	ldrdeq	r8, [r1], -r4
   1876c:	ldrdeq	r8, [r1], -r4
   18770:	ldrdeq	r8, [r1], -r4
   18774:	andeq	r8, r1, r0, asr #13
   18778:	ldr	r0, [sp, #100]	; 0x64
   1877c:	bl	115cc <iswprint@plt>
   18780:	cmp	r0, #0
   18784:	moveq	r5, #0
   18788:	add	r8, r8, r4
   1878c:	add	r0, sp, #104	; 0x68
   18790:	bl	11548 <mbsinit@plt>
   18794:	cmp	r0, #0
   18798:	bne	18808 <lchmod@@Base+0x19f0>
   1879c:	add	r7, r6, r8
   187a0:	add	fp, r9, r7
   187a4:	add	r3, sp, #104	; 0x68
   187a8:	ldr	r2, [sp, #24]
   187ac:	sub	r2, r2, r7
   187b0:	mov	r1, fp
   187b4:	add	r0, sp, #100	; 0x64
   187b8:	bl	1b58c <lchmod@@Base+0x4774>
   187bc:	subs	r4, r0, #0
   187c0:	beq	18858 <lchmod@@Base+0x1a40>
   187c4:	cmn	r4, #1
   187c8:	beq	18820 <lchmod@@Base+0x1a08>
   187cc:	cmn	r4, #2
   187d0:	beq	18660 <lchmod@@Base+0x1848>
   187d4:	ldr	r3, [sp, #32]
   187d8:	cmp	sl, #2
   187dc:	movne	r3, #0
   187e0:	andeq	r3, r3, #1
   187e4:	cmp	r3, #0
   187e8:	beq	18778 <lchmod@@Base+0x1960>
   187ec:	cmp	r4, #1
   187f0:	bls	18778 <lchmod@@Base+0x1960>
   187f4:	add	r2, r7, #1
   187f8:	add	r2, r9, r2
   187fc:	add	r3, r9, r4
   18800:	add	r7, r3, r7
   18804:	b	186dc <lchmod@@Base+0x18c4>
   18808:	ldr	r4, [sp, #88]	; 0x58
   1880c:	mov	ip, r8
   18810:	ldr	fp, [sp, #92]	; 0x5c
   18814:	ldr	r8, [sp, #56]	; 0x38
   18818:	ldr	r9, [sp, #84]	; 0x54
   1881c:	b	1886c <lchmod@@Base+0x1a54>
   18820:	ldr	r4, [sp, #88]	; 0x58
   18824:	mov	ip, r8
   18828:	ldr	fp, [sp, #92]	; 0x5c
   1882c:	ldr	r8, [sp, #56]	; 0x38
   18830:	ldr	r9, [sp, #84]	; 0x54
   18834:	mov	r5, #0
   18838:	b	1886c <lchmod@@Base+0x1a54>
   1883c:	mov	r5, #0
   18840:	b	1886c <lchmod@@Base+0x1a54>
   18844:	mov	r5, #0
   18848:	b	1886c <lchmod@@Base+0x1a54>
   1884c:	mov	ip, r2
   18850:	mov	r5, #0
   18854:	b	1886c <lchmod@@Base+0x1a54>
   18858:	ldr	r4, [sp, #88]	; 0x58
   1885c:	mov	ip, r8
   18860:	ldr	fp, [sp, #92]	; 0x5c
   18864:	ldr	r8, [sp, #56]	; 0x38
   18868:	ldr	r9, [sp, #84]	; 0x54
   1886c:	cmp	ip, #1
   18870:	bls	185fc <lchmod@@Base+0x17e4>
   18874:	add	lr, r6, ip
   18878:	ldr	r3, [sp, #48]	; 0x30
   1887c:	add	r1, r3, r6
   18880:	mov	r3, #0
   18884:	eor	r0, r5, #1
   18888:	ldr	r2, [sp, #28]
   1888c:	and	r0, r0, r2
   18890:	uxtb	r0, r0
   18894:	str	r0, [sp, #56]	; 0x38
   18898:	mov	r7, #92	; 0x5c
   1889c:	ldr	ip, [sp, #36]	; 0x24
   188a0:	str	r5, [sp, #84]	; 0x54
   188a4:	ldr	r2, [sp, #44]	; 0x2c
   188a8:	b	18918 <lchmod@@Base+0x1b00>
   188ac:	cmp	r2, #0
   188b0:	beq	188c0 <lchmod@@Base+0x1aa8>
   188b4:	cmp	r9, fp
   188b8:	strbhi	r7, [r8, fp]
   188bc:	add	fp, fp, #1
   188c0:	add	r5, r6, #1
   188c4:	cmp	r5, lr
   188c8:	bcs	189d4 <lchmod@@Base+0x1bbc>
   188cc:	eor	r2, r3, #1
   188d0:	and	r2, r2, ip
   188d4:	ands	r2, r2, #255	; 0xff
   188d8:	beq	189f0 <lchmod@@Base+0x1bd8>
   188dc:	cmp	r9, fp
   188e0:	movhi	r2, #39	; 0x27
   188e4:	strbhi	r2, [r8, fp]
   188e8:	add	r2, fp, #1
   188ec:	cmp	r9, r2
   188f0:	movhi	ip, #39	; 0x27
   188f4:	strbhi	ip, [r8, r2]
   188f8:	add	fp, fp, #2
   188fc:	ldr	ip, [sp, #56]	; 0x38
   18900:	mov	r2, ip
   18904:	mov	r6, r5
   18908:	cmp	r9, fp
   1890c:	strbhi	r4, [r8, fp]
   18910:	add	fp, fp, #1
   18914:	ldrb	r4, [r1, #1]!
   18918:	cmp	r0, #0
   1891c:	beq	188ac <lchmod@@Base+0x1a94>
   18920:	ldr	r3, [sp, #32]
   18924:	cmp	r3, #0
   18928:	bne	18bbc <lchmod@@Base+0x1da4>
   1892c:	eor	r3, ip, #1
   18930:	cmp	sl, #2
   18934:	movne	r3, #0
   18938:	andeq	r3, r3, #1
   1893c:	cmp	r3, #0
   18940:	beq	18978 <lchmod@@Base+0x1b60>
   18944:	cmp	r9, fp
   18948:	movhi	ip, #39	; 0x27
   1894c:	strbhi	ip, [r8, fp]
   18950:	add	ip, fp, #1
   18954:	cmp	r9, ip
   18958:	movhi	r5, #36	; 0x24
   1895c:	strbhi	r5, [r8, ip]
   18960:	add	ip, fp, #2
   18964:	cmp	r9, ip
   18968:	movhi	r5, #39	; 0x27
   1896c:	strbhi	r5, [r8, ip]
   18970:	add	fp, fp, #3
   18974:	mov	ip, r3
   18978:	cmp	r9, fp
   1897c:	strbhi	r7, [r8, fp]
   18980:	add	r3, fp, #1
   18984:	cmp	r9, r3
   18988:	bls	18998 <lchmod@@Base+0x1b80>
   1898c:	lsr	r5, r4, #6
   18990:	add	r5, r5, #48	; 0x30
   18994:	strb	r5, [r8, r3]
   18998:	add	r3, fp, #2
   1899c:	cmp	r9, r3
   189a0:	bls	189b0 <lchmod@@Base+0x1b98>
   189a4:	ubfx	r5, r4, #3, #3
   189a8:	add	r5, r5, #48	; 0x30
   189ac:	strb	r5, [r8, r3]
   189b0:	add	fp, fp, #3
   189b4:	and	r4, r4, #7
   189b8:	add	r4, r4, #48	; 0x30
   189bc:	add	r5, r6, #1
   189c0:	cmp	r5, lr
   189c4:	bcs	189e0 <lchmod@@Base+0x1bc8>
   189c8:	ldr	r3, [sp, #56]	; 0x38
   189cc:	mov	r6, r5
   189d0:	b	18908 <lchmod@@Base+0x1af0>
   189d4:	str	ip, [sp, #36]	; 0x24
   189d8:	ldr	r5, [sp, #84]	; 0x54
   189dc:	b	1840c <lchmod@@Base+0x15f4>
   189e0:	str	ip, [sp, #36]	; 0x24
   189e4:	ldr	r5, [sp, #84]	; 0x54
   189e8:	mov	r3, r0
   189ec:	b	1840c <lchmod@@Base+0x15f4>
   189f0:	mov	r6, r5
   189f4:	b	18908 <lchmod@@Base+0x1af0>
   189f8:	ldr	r3, [sp, #44]	; 0x2c
   189fc:	b	18060 <lchmod@@Base+0x1248>
   18a00:	mov	r5, #0
   18a04:	mov	r3, r5
   18a08:	mov	r4, #63	; 0x3f
   18a0c:	b	18060 <lchmod@@Base+0x1248>
   18a10:	mov	r5, #0
   18a14:	mov	r3, r5
   18a18:	mov	r4, #63	; 0x3f
   18a1c:	b	18060 <lchmod@@Base+0x1248>
   18a20:	mov	r5, #0
   18a24:	mov	r3, r5
   18a28:	b	18060 <lchmod@@Base+0x1248>
   18a2c:	mov	r5, #0
   18a30:	mov	r3, r5
   18a34:	b	18060 <lchmod@@Base+0x1248>
   18a38:	ldr	r5, [sp, #44]	; 0x2c
   18a3c:	ldr	r3, [sp, #32]
   18a40:	b	18060 <lchmod@@Base+0x1248>
   18a44:	ldr	r5, [sp, #44]	; 0x2c
   18a48:	mov	r3, #0
   18a4c:	str	r3, [sp, #44]	; 0x2c
   18a50:	b	18060 <lchmod@@Base+0x1248>
   18a54:	mov	r4, r3
   18a58:	mov	r5, #0
   18a5c:	b	180b8 <lchmod@@Base+0x12a0>
   18a60:	mov	r5, #0
   18a64:	mov	r4, #97	; 0x61
   18a68:	b	180b8 <lchmod@@Base+0x12a0>
   18a6c:	mov	r5, #0
   18a70:	mov	r3, r5
   18a74:	mov	r4, #92	; 0x5c
   18a78:	b	1840c <lchmod@@Base+0x15f4>
   18a7c:	ldr	r3, [sp, #48]	; 0x30
   18a80:	ldrb	r5, [r3, r6]
   18a84:	adds	r5, r5, #0
   18a88:	movne	r5, #1
   18a8c:	b	1815c <lchmod@@Base+0x1344>
   18a90:	cmp	sl, #2
   18a94:	movne	r3, #0
   18a98:	moveq	r3, #1
   18a9c:	ldr	r1, [sp, #32]
   18aa0:	cmp	fp, #0
   18aa4:	andeq	r2, r3, r1
   18aa8:	movne	r2, #0
   18aac:	cmp	r2, #0
   18ab0:	bne	18bd0 <lchmod@@Base+0x1db8>
   18ab4:	eor	r2, r1, #1
   18ab8:	uxtb	r2, r2
   18abc:	and	r3, r3, r2
   18ac0:	ldr	r1, [sp, #68]	; 0x44
   18ac4:	ands	r3, r1, r3
   18ac8:	beq	18b5c <lchmod@@Base+0x1d44>
   18acc:	ldr	r2, [sp, #40]	; 0x28
   18ad0:	cmp	r2, #0
   18ad4:	bne	18b0c <lchmod@@Base+0x1cf4>
   18ad8:	ldr	r2, [sp, #72]	; 0x48
   18adc:	adds	r2, r2, #0
   18ae0:	movne	r2, #1
   18ae4:	cmp	r9, #0
   18ae8:	movne	r2, #0
   18aec:	str	r2, [sp, #68]	; 0x44
   18af0:	mov	sl, #2
   18af4:	ldr	r1, [sp, #40]	; 0x28
   18af8:	str	r1, [sp, #32]
   18afc:	cmp	r2, #0
   18b00:	beq	18b50 <lchmod@@Base+0x1d38>
   18b04:	ldr	r9, [sp, #72]	; 0x48
   18b08:	b	17864 <lchmod@@Base+0xa4c>
   18b0c:	ldr	r3, [sp, #168]	; 0xa8
   18b10:	str	r3, [sp, #16]
   18b14:	ldr	r3, [sp, #164]	; 0xa4
   18b18:	str	r3, [sp, #12]
   18b1c:	ldr	r3, [sp, #160]	; 0xa0
   18b20:	str	r3, [sp, #8]
   18b24:	ldr	r3, [sp, #156]	; 0x9c
   18b28:	str	r3, [sp, #4]
   18b2c:	mov	r3, #5
   18b30:	str	r3, [sp]
   18b34:	ldr	r3, [sp, #24]
   18b38:	ldr	r2, [sp, #48]	; 0x30
   18b3c:	ldr	r1, [sp, #72]	; 0x48
   18b40:	ldr	r0, [sp, #64]	; 0x40
   18b44:	bl	177ec <lchmod@@Base+0x9d4>
   18b48:	mov	fp, r0
   18b4c:	b	18c6c <lchmod@@Base+0x1e54>
   18b50:	mov	r8, r9
   18b54:	mov	r2, r3
   18b58:	b	18b60 <lchmod@@Base+0x1d48>
   18b5c:	mov	r8, r9
   18b60:	ldr	r3, [sp, #60]	; 0x3c
   18b64:	cmp	r3, #0
   18b68:	moveq	r2, #0
   18b6c:	andne	r2, r2, #1
   18b70:	cmp	r2, #0
   18b74:	beq	18ba4 <lchmod@@Base+0x1d8c>
   18b78:	mov	r2, r3
   18b7c:	ldrb	r3, [r3]
   18b80:	cmp	r3, #0
   18b84:	beq	18ba4 <lchmod@@Base+0x1d8c>
   18b88:	ldr	r1, [sp, #64]	; 0x40
   18b8c:	cmp	r8, fp
   18b90:	strbhi	r3, [r1, fp]
   18b94:	add	fp, fp, #1
   18b98:	ldrb	r3, [r2, #1]!
   18b9c:	cmp	r3, #0
   18ba0:	bne	18b8c <lchmod@@Base+0x1d74>
   18ba4:	cmp	r8, fp
   18ba8:	bls	18c6c <lchmod@@Base+0x1e54>
   18bac:	mov	r3, #0
   18bb0:	ldr	r2, [sp, #64]	; 0x40
   18bb4:	strb	r3, [r2, fp]
   18bb8:	b	18c6c <lchmod@@Base+0x1e54>
   18bbc:	mov	r8, r9
   18bc0:	mov	r7, sl
   18bc4:	ldr	r3, [sp, #32]
   18bc8:	str	r3, [sp, #28]
   18bcc:	b	18c14 <lchmod@@Base+0x1dfc>
   18bd0:	mov	r8, r9
   18bd4:	mov	r7, #2
   18bd8:	b	18c14 <lchmod@@Base+0x1dfc>
   18bdc:	mov	r8, r9
   18be0:	mov	r7, sl
   18be4:	b	18c14 <lchmod@@Base+0x1dfc>
   18be8:	mov	r8, r9
   18bec:	mov	r7, sl
   18bf0:	b	18c14 <lchmod@@Base+0x1dfc>
   18bf4:	mov	r8, r9
   18bf8:	mov	r7, sl
   18bfc:	b	18c14 <lchmod@@Base+0x1dfc>
   18c00:	mov	r8, r9
   18c04:	mov	r7, sl
   18c08:	b	18c14 <lchmod@@Base+0x1dfc>
   18c0c:	mov	r8, r9
   18c10:	mov	r7, sl
   18c14:	ldr	r3, [sp, #28]
   18c18:	cmp	r7, #2
   18c1c:	movne	r3, #0
   18c20:	andeq	r3, r3, #1
   18c24:	cmp	r3, #0
   18c28:	movne	r7, #4
   18c2c:	ldr	r3, [sp, #168]	; 0xa8
   18c30:	str	r3, [sp, #16]
   18c34:	ldr	r3, [sp, #164]	; 0xa4
   18c38:	str	r3, [sp, #12]
   18c3c:	mov	r3, #0
   18c40:	str	r3, [sp, #8]
   18c44:	ldr	r3, [sp, #156]	; 0x9c
   18c48:	bic	r3, r3, #2
   18c4c:	str	r3, [sp, #4]
   18c50:	str	r7, [sp]
   18c54:	ldr	r3, [sp, #24]
   18c58:	ldr	r2, [sp, #48]	; 0x30
   18c5c:	mov	r1, r8
   18c60:	ldr	r0, [sp, #64]	; 0x40
   18c64:	bl	177ec <lchmod@@Base+0x9d4>
   18c68:	mov	fp, r0
   18c6c:	mov	r0, fp
   18c70:	add	sp, sp, #116	; 0x74
   18c74:	ldrd	r4, [sp]
   18c78:	ldrd	r6, [sp, #8]
   18c7c:	ldrd	r8, [sp, #16]
   18c80:	ldrd	sl, [sp, #24]
   18c84:	add	sp, sp, #32
   18c88:	pop	{pc}		; (ldr pc, [sp], #4)
   18c8c:	mov	r8, r9
   18c90:	mov	r7, sl
   18c94:	b	18c2c <lchmod@@Base+0x1e14>
   18c98:	add	fp, fp, #4
   18c9c:	str	r3, [sp, #36]	; 0x24
   18ca0:	mov	r5, #0
   18ca4:	mov	r4, #48	; 0x30
   18ca8:	b	18060 <lchmod@@Base+0x1248>
   18cac:	mov	r3, #1
   18cb0:	str	r3, [sp, #32]
   18cb4:	str	r3, [sp, #28]
   18cb8:	str	r3, [sp, #52]	; 0x34
   18cbc:	movw	r3, #50084	; 0xc3a4
   18cc0:	movt	r3, #1
   18cc4:	str	r3, [sp, #60]	; 0x3c
   18cc8:	mov	fp, #0
   18ccc:	mov	sl, #5
   18cd0:	b	178c4 <lchmod@@Base+0xaac>
   18cd4:	ldr	r3, [sp, #48]	; 0x30
   18cd8:	ldrb	r4, [r3, r6]
   18cdc:	cmp	r4, #126	; 0x7e
   18ce0:	ldrls	pc, [pc, r4, lsl #2]
   18ce4:	b	185d0 <lchmod@@Base+0x17b8>
   18ce8:	andeq	r7, r1, r8, asr sp
   18cec:	ldrdeq	r8, [r1], -r0
   18cf0:	ldrdeq	r8, [r1], -r0
   18cf4:	ldrdeq	r8, [r1], -r0
   18cf8:	ldrdeq	r8, [r1], -r0
   18cfc:	ldrdeq	r8, [r1], -r0
   18d00:	ldrdeq	r8, [r1], -r0
   18d04:	andeq	r8, r1, r0, ror #20
   18d08:	strdeq	r7, [r1], -ip
   18d0c:	andeq	r8, r1, r0, lsr #7
   18d10:	andeq	r8, r1, ip, asr r4
   18d14:			; <UNDEFINED> instruction: 0x000183b4
   18d18:	andeq	r8, r1, r0, lsl r0
   18d1c:	andeq	r8, r1, r4, lsr #32
   18d20:	ldrdeq	r8, [r1], -r0
   18d24:	ldrdeq	r8, [r1], -r0
   18d28:	ldrdeq	r8, [r1], -r0
   18d2c:	ldrdeq	r8, [r1], -r0
   18d30:	ldrdeq	r8, [r1], -r0
   18d34:	ldrdeq	r8, [r1], -r0
   18d38:	ldrdeq	r8, [r1], -r0
   18d3c:	ldrdeq	r8, [r1], -r0
   18d40:	ldrdeq	r8, [r1], -r0
   18d44:	ldrdeq	r8, [r1], -r0
   18d48:	ldrdeq	r8, [r1], -r0
   18d4c:	ldrdeq	r8, [r1], -r0
   18d50:	ldrdeq	r8, [r1], -r0
   18d54:	ldrdeq	r8, [r1], -r0
   18d58:	ldrdeq	r8, [r1], -r0
   18d5c:	ldrdeq	r8, [r1], -r0
   18d60:	ldrdeq	r8, [r1], -r0
   18d64:	ldrdeq	r8, [r1], -r0
   18d68:	andeq	r8, r1, r4, ror #9
   18d6c:	andeq	r8, r1, r0, lsr #10
   18d70:	andeq	r8, r1, r0, lsr #10
   18d74:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d78:	andeq	r8, r1, r0, lsr #10
   18d7c:	andeq	r8, r1, r4, asr #20
   18d80:	andeq	r8, r1, r0, lsr #10
   18d84:	andeq	r8, r1, r0, lsr r5
   18d88:	andeq	r8, r1, r0, lsr #10
   18d8c:	andeq	r8, r1, r0, lsr #10
   18d90:	andeq	r8, r1, r0, lsr #10
   18d94:	andeq	r8, r1, r4, asr #20
   18d98:	andeq	r8, r1, r4, asr #20
   18d9c:	andeq	r8, r1, r4, asr #20
   18da0:	andeq	r8, r1, r4, asr #20
   18da4:	andeq	r8, r1, r4, asr #20
   18da8:	andeq	r8, r1, r4, asr #20
   18dac:	andeq	r8, r1, r4, asr #20
   18db0:	andeq	r8, r1, r4, asr #20
   18db4:	andeq	r8, r1, r4, asr #20
   18db8:	andeq	r8, r1, r4, asr #20
   18dbc:	andeq	r8, r1, r4, asr #20
   18dc0:	andeq	r8, r1, r4, asr #20
   18dc4:	andeq	r8, r1, r4, asr #20
   18dc8:	andeq	r8, r1, r4, asr #20
   18dcc:	andeq	r8, r1, r4, asr #20
   18dd0:	andeq	r8, r1, r4, asr #20
   18dd4:	andeq	r8, r1, r0, lsr #10
   18dd8:	andeq	r8, r1, r0, lsr #10
   18ddc:	andeq	r8, r1, r0, lsr #10
   18de0:	andeq	r8, r1, r0, lsr #10
   18de4:	muleq	r1, r0, lr
   18de8:	ldrdeq	r8, [r1], -r0
   18dec:	andeq	r8, r1, r4, asr #20
   18df0:	andeq	r8, r1, r4, asr #20
   18df4:	andeq	r8, r1, r4, asr #20
   18df8:	andeq	r8, r1, r4, asr #20
   18dfc:	andeq	r8, r1, r4, asr #20
   18e00:	andeq	r8, r1, r4, asr #20
   18e04:	andeq	r8, r1, r4, asr #20
   18e08:	andeq	r8, r1, r4, asr #20
   18e0c:	andeq	r8, r1, r4, asr #20
   18e10:	andeq	r8, r1, r4, asr #20
   18e14:	andeq	r8, r1, r4, asr #20
   18e18:	andeq	r8, r1, r4, asr #20
   18e1c:	andeq	r8, r1, r4, asr #20
   18e20:	andeq	r8, r1, r4, asr #20
   18e24:	andeq	r8, r1, r4, asr #20
   18e28:	andeq	r8, r1, r4, asr #20
   18e2c:	andeq	r8, r1, r4, asr #20
   18e30:	andeq	r8, r1, r4, asr #20
   18e34:	andeq	r8, r1, r4, asr #20
   18e38:	andeq	r8, r1, r4, asr #20
   18e3c:	andeq	r8, r1, r4, asr #20
   18e40:	andeq	r8, r1, r4, asr #20
   18e44:	andeq	r8, r1, r4, asr #20
   18e48:	andeq	r8, r1, r4, asr #20
   18e4c:	andeq	r8, r1, r4, asr #20
   18e50:	andeq	r8, r1, r4, asr #20
   18e54:	andeq	r8, r1, r0, lsr #10
   18e58:	andeq	r8, r1, r8, asr #7
   18e5c:	andeq	r8, r1, r4, asr #20
   18e60:	andeq	r8, r1, r0, lsr #10
   18e64:	andeq	r8, r1, r4, asr #20
   18e68:	andeq	r8, r1, r0, lsr #10
   18e6c:	andeq	r8, r1, r4, asr #20
   18e70:	andeq	r8, r1, r4, asr #20
   18e74:	andeq	r8, r1, r4, asr #20
   18e78:	andeq	r8, r1, r4, asr #20
   18e7c:	andeq	r8, r1, r4, asr #20
   18e80:	andeq	r8, r1, r4, asr #20
   18e84:	andeq	r8, r1, r4, asr #20
   18e88:	andeq	r8, r1, r4, asr #20
   18e8c:	andeq	r8, r1, r4, asr #20
   18e90:	andeq	r8, r1, r4, asr #20
   18e94:	andeq	r8, r1, r4, asr #20
   18e98:	andeq	r8, r1, r4, asr #20
   18e9c:	andeq	r8, r1, r4, asr #20
   18ea0:	andeq	r8, r1, r4, asr #20
   18ea4:	andeq	r8, r1, r4, asr #20
   18ea8:	andeq	r8, r1, r4, asr #20
   18eac:	andeq	r8, r1, r4, asr #20
   18eb0:	andeq	r8, r1, r4, asr #20
   18eb4:	andeq	r8, r1, r4, asr #20
   18eb8:	andeq	r8, r1, r4, asr #20
   18ebc:	andeq	r8, r1, r4, asr #20
   18ec0:	andeq	r8, r1, r4, asr #20
   18ec4:	andeq	r8, r1, r4, asr #20
   18ec8:	andeq	r8, r1, r4, asr #20
   18ecc:	andeq	r8, r1, r4, asr #20
   18ed0:	andeq	r8, r1, r4, asr #20
   18ed4:	andeq	r8, r1, r8, lsl #9
   18ed8:	andeq	r8, r1, r0, lsr #10
   18edc:	andeq	r8, r1, r8, lsl #9
   18ee0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ee4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18ee8:	strd	r6, [sp, #8]
   18eec:	strd	r8, [sp, #16]
   18ef0:	strd	sl, [sp, #24]
   18ef4:	str	lr, [sp, #32]
   18ef8:	sub	sp, sp, #52	; 0x34
   18efc:	mov	r5, r0
   18f00:	str	r1, [sp, #24]
   18f04:	str	r2, [sp, #28]
   18f08:	mov	r4, r3
   18f0c:	bl	1171c <__errno_location@plt>
   18f10:	str	r0, [sp, #32]
   18f14:	ldr	r3, [r0]
   18f18:	str	r3, [sp, #36]	; 0x24
   18f1c:	movw	r3, #53648	; 0xd190
   18f20:	movt	r3, #2
   18f24:	ldr	r6, [r3]
   18f28:	cmn	r5, #-2147483647	; 0x80000001
   18f2c:	movne	r3, #0
   18f30:	moveq	r3, #1
   18f34:	orrs	r3, r3, r5, lsr #31
   18f38:	bne	1909c <lchmod@@Base+0x2284>
   18f3c:	movw	r3, #53648	; 0xd190
   18f40:	movt	r3, #2
   18f44:	ldr	r2, [r3, #4]
   18f48:	cmp	r2, r5
   18f4c:	bgt	18fbc <lchmod@@Base+0x21a4>
   18f50:	str	r2, [sp, #44]	; 0x2c
   18f54:	add	r3, r3, #8
   18f58:	cmp	r6, r3
   18f5c:	beq	190a0 <lchmod@@Base+0x2288>
   18f60:	sub	r2, r5, r2
   18f64:	mov	r3, #8
   18f68:	str	r3, [sp]
   18f6c:	mvn	r3, #-2147483648	; 0x80000000
   18f70:	add	r2, r2, #1
   18f74:	add	r1, sp, #44	; 0x2c
   18f78:	mov	r0, r6
   18f7c:	bl	1a388 <lchmod@@Base+0x3570>
   18f80:	mov	r6, r0
   18f84:	movw	r3, #53648	; 0xd190
   18f88:	movt	r3, #2
   18f8c:	str	r0, [r3]
   18f90:	movw	r7, #53648	; 0xd190
   18f94:	movt	r7, #2
   18f98:	ldr	r0, [r7, #4]
   18f9c:	ldr	r2, [sp, #44]	; 0x2c
   18fa0:	sub	r2, r2, r0
   18fa4:	lsl	r2, r2, #3
   18fa8:	mov	r1, #0
   18fac:	add	r0, r6, r0, lsl #3
   18fb0:	bl	11740 <memset@plt>
   18fb4:	ldr	r3, [sp, #44]	; 0x2c
   18fb8:	str	r3, [r7, #4]
   18fbc:	add	fp, r6, r5, lsl #3
   18fc0:	ldr	r8, [r6, r5, lsl #3]
   18fc4:	ldr	r7, [fp, #4]
   18fc8:	ldr	r3, [r4, #4]
   18fcc:	orr	r9, r3, #1
   18fd0:	add	sl, r4, #8
   18fd4:	ldr	r3, [r4, #44]	; 0x2c
   18fd8:	str	r3, [sp, #16]
   18fdc:	ldr	r3, [r4, #40]	; 0x28
   18fe0:	str	r3, [sp, #12]
   18fe4:	str	sl, [sp, #8]
   18fe8:	str	r9, [sp, #4]
   18fec:	ldr	r3, [r4]
   18ff0:	str	r3, [sp]
   18ff4:	ldr	r3, [sp, #28]
   18ff8:	ldr	r2, [sp, #24]
   18ffc:	mov	r1, r8
   19000:	mov	r0, r7
   19004:	bl	177ec <lchmod@@Base+0x9d4>
   19008:	cmp	r8, r0
   1900c:	bhi	19070 <lchmod@@Base+0x2258>
   19010:	add	r8, r0, #1
   19014:	str	r8, [r6, r5, lsl #3]
   19018:	movw	r3, #53756	; 0xd1fc
   1901c:	movt	r3, #2
   19020:	cmp	r7, r3
   19024:	beq	19030 <lchmod@@Base+0x2218>
   19028:	mov	r0, r7
   1902c:	bl	13780 <__assert_fail@plt+0x1eb4>
   19030:	mov	r0, r8
   19034:	bl	1a184 <lchmod@@Base+0x336c>
   19038:	mov	r7, r0
   1903c:	str	r0, [fp, #4]
   19040:	ldr	r3, [r4, #44]	; 0x2c
   19044:	str	r3, [sp, #16]
   19048:	ldr	r3, [r4, #40]	; 0x28
   1904c:	str	r3, [sp, #12]
   19050:	str	sl, [sp, #8]
   19054:	str	r9, [sp, #4]
   19058:	ldr	r3, [r4]
   1905c:	str	r3, [sp]
   19060:	ldr	r3, [sp, #28]
   19064:	ldr	r2, [sp, #24]
   19068:	mov	r1, r8
   1906c:	bl	177ec <lchmod@@Base+0x9d4>
   19070:	ldr	r3, [sp, #32]
   19074:	ldr	r2, [sp, #36]	; 0x24
   19078:	str	r2, [r3]
   1907c:	mov	r0, r7
   19080:	add	sp, sp, #52	; 0x34
   19084:	ldrd	r4, [sp]
   19088:	ldrd	r6, [sp, #8]
   1908c:	ldrd	r8, [sp, #16]
   19090:	ldrd	sl, [sp, #24]
   19094:	add	sp, sp, #32
   19098:	pop	{pc}		; (ldr pc, [sp], #4)
   1909c:	bl	11878 <abort@plt>
   190a0:	sub	r2, r5, r2
   190a4:	mov	r3, #8
   190a8:	str	r3, [sp]
   190ac:	mvn	r3, #-2147483648	; 0x80000000
   190b0:	add	r2, r2, #1
   190b4:	add	r1, sp, #44	; 0x2c
   190b8:	mov	r0, #0
   190bc:	bl	1a388 <lchmod@@Base+0x3570>
   190c0:	mov	r6, r0
   190c4:	movw	r3, #53648	; 0xd190
   190c8:	movt	r3, #2
   190cc:	str	r0, [r3]
   190d0:	ldrd	r2, [r3, #8]
   190d4:	strd	r2, [r0]
   190d8:	b	18f90 <lchmod@@Base+0x2178>
   190dc:	strd	r4, [sp, #-16]!
   190e0:	str	r6, [sp, #8]
   190e4:	str	lr, [sp, #12]
   190e8:	mov	r4, r0
   190ec:	bl	1171c <__errno_location@plt>
   190f0:	mov	r5, r0
   190f4:	ldr	r6, [r0]
   190f8:	cmp	r4, #0
   190fc:	ldr	r3, [pc, #32]	; 19124 <lchmod@@Base+0x230c>
   19100:	moveq	r4, r3
   19104:	mov	r1, #48	; 0x30
   19108:	mov	r0, r4
   1910c:	bl	1a4f8 <lchmod@@Base+0x36e0>
   19110:	str	r6, [r5]
   19114:	ldrd	r4, [sp]
   19118:	ldr	r6, [sp, #8]
   1911c:	add	sp, sp, #12
   19120:	pop	{pc}		; (ldr pc, [sp], #4)
   19124:	strdeq	sp, [r2], -ip
   19128:	subs	r3, r0, #0
   1912c:	ldr	r2, [pc, #8]	; 1913c <lchmod@@Base+0x2324>
   19130:	moveq	r3, r2
   19134:	ldr	r0, [r3]
   19138:	bx	lr
   1913c:	strdeq	sp, [r2], -ip
   19140:	subs	r3, r0, #0
   19144:	ldr	r2, [pc, #8]	; 19154 <lchmod@@Base+0x233c>
   19148:	moveq	r3, r2
   1914c:	str	r1, [r3]
   19150:	bx	lr
   19154:	strdeq	sp, [r2], -ip
   19158:	push	{lr}		; (str lr, [sp, #-4]!)
   1915c:	subs	r3, r0, #0
   19160:	ldr	r0, [pc, #44]	; 19194 <lchmod@@Base+0x237c>
   19164:	moveq	r3, r0
   19168:	add	r3, r3, #8
   1916c:	lsr	lr, r1, #5
   19170:	and	r1, r1, #31
   19174:	ldr	ip, [r3, lr, lsl #2]
   19178:	lsr	r0, ip, r1
   1917c:	eor	r2, r2, r0
   19180:	and	r2, r2, #1
   19184:	eor	r1, ip, r2, lsl r1
   19188:	str	r1, [r3, lr, lsl #2]
   1918c:	and	r0, r0, #1
   19190:	pop	{pc}		; (ldr pc, [sp], #4)
   19194:	strdeq	sp, [r2], -ip
   19198:	subs	r3, r0, #0
   1919c:	ldr	r2, [pc, #12]	; 191b0 <lchmod@@Base+0x2398>
   191a0:	moveq	r3, r2
   191a4:	ldr	r0, [r3, #4]
   191a8:	str	r1, [r3, #4]
   191ac:	bx	lr
   191b0:	strdeq	sp, [r2], -ip
   191b4:	subs	r3, r0, #0
   191b8:	ldr	r0, [pc, #44]	; 191ec <lchmod@@Base+0x23d4>
   191bc:	moveq	r3, r0
   191c0:	mov	r0, #10
   191c4:	str	r0, [r3]
   191c8:	cmp	r2, #0
   191cc:	cmpne	r1, #0
   191d0:	beq	191e0 <lchmod@@Base+0x23c8>
   191d4:	str	r1, [r3, #40]	; 0x28
   191d8:	str	r2, [r3, #44]	; 0x2c
   191dc:	bx	lr
   191e0:	str	r4, [sp, #-8]!
   191e4:	str	lr, [sp, #4]
   191e8:	bl	11878 <abort@plt>
   191ec:	strdeq	sp, [r2], -ip
   191f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   191f4:	strd	r6, [sp, #8]
   191f8:	strd	r8, [sp, #16]
   191fc:	str	sl, [sp, #24]
   19200:	str	lr, [sp, #28]
   19204:	sub	sp, sp, #24
   19208:	mov	r7, r0
   1920c:	mov	r8, r1
   19210:	mov	r9, r2
   19214:	mov	sl, r3
   19218:	ldr	r4, [sp, #56]	; 0x38
   1921c:	cmp	r4, #0
   19220:	ldr	r3, [pc, #104]	; 19290 <lchmod@@Base+0x2478>
   19224:	moveq	r4, r3
   19228:	bl	1171c <__errno_location@plt>
   1922c:	mov	r5, r0
   19230:	ldr	r6, [r0]
   19234:	ldr	r3, [r4, #44]	; 0x2c
   19238:	str	r3, [sp, #16]
   1923c:	ldr	r3, [r4, #40]	; 0x28
   19240:	str	r3, [sp, #12]
   19244:	add	r3, r4, #8
   19248:	str	r3, [sp, #8]
   1924c:	ldr	r3, [r4, #4]
   19250:	str	r3, [sp, #4]
   19254:	ldr	r3, [r4]
   19258:	str	r3, [sp]
   1925c:	mov	r3, sl
   19260:	mov	r2, r9
   19264:	mov	r1, r8
   19268:	mov	r0, r7
   1926c:	bl	177ec <lchmod@@Base+0x9d4>
   19270:	str	r6, [r5]
   19274:	add	sp, sp, #24
   19278:	ldrd	r4, [sp]
   1927c:	ldrd	r6, [sp, #8]
   19280:	ldrd	r8, [sp, #16]
   19284:	ldr	sl, [sp, #24]
   19288:	add	sp, sp, #28
   1928c:	pop	{pc}		; (ldr pc, [sp], #4)
   19290:	strdeq	sp, [r2], -ip
   19294:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19298:	strd	r6, [sp, #8]
   1929c:	strd	r8, [sp, #16]
   192a0:	strd	sl, [sp, #24]
   192a4:	str	lr, [sp, #32]
   192a8:	sub	sp, sp, #44	; 0x2c
   192ac:	mov	r8, r0
   192b0:	mov	sl, r1
   192b4:	mov	r6, r2
   192b8:	subs	r4, r3, #0
   192bc:	ldr	r3, [pc, #200]	; 1938c <lchmod@@Base+0x2574>
   192c0:	moveq	r4, r3
   192c4:	bl	1171c <__errno_location@plt>
   192c8:	mov	r7, r0
   192cc:	ldr	fp, [r0]
   192d0:	ldr	r5, [r4, #4]
   192d4:	cmp	r6, #0
   192d8:	orreq	r5, r5, #1
   192dc:	add	r9, r4, #8
   192e0:	ldr	r3, [r4, #44]	; 0x2c
   192e4:	str	r3, [sp, #16]
   192e8:	ldr	r3, [r4, #40]	; 0x28
   192ec:	str	r3, [sp, #12]
   192f0:	str	r9, [sp, #8]
   192f4:	str	r5, [sp, #4]
   192f8:	ldr	r3, [r4]
   192fc:	str	r3, [sp]
   19300:	str	sl, [sp, #36]	; 0x24
   19304:	mov	r3, sl
   19308:	str	r8, [sp, #32]
   1930c:	mov	r2, r8
   19310:	mov	r1, #0
   19314:	mov	r0, r1
   19318:	bl	177ec <lchmod@@Base+0x9d4>
   1931c:	mov	sl, r0
   19320:	add	r8, r0, #1
   19324:	mov	r0, r8
   19328:	bl	1a184 <lchmod@@Base+0x336c>
   1932c:	str	r0, [sp, #28]
   19330:	ldr	r3, [r4, #44]	; 0x2c
   19334:	str	r3, [sp, #16]
   19338:	ldr	r3, [r4, #40]	; 0x28
   1933c:	str	r3, [sp, #12]
   19340:	str	r9, [sp, #8]
   19344:	str	r5, [sp, #4]
   19348:	ldr	r3, [r4]
   1934c:	str	r3, [sp]
   19350:	ldr	r3, [sp, #36]	; 0x24
   19354:	ldr	r2, [sp, #32]
   19358:	mov	r1, r8
   1935c:	bl	177ec <lchmod@@Base+0x9d4>
   19360:	str	fp, [r7]
   19364:	cmp	r6, #0
   19368:	strne	sl, [r6]
   1936c:	ldr	r0, [sp, #28]
   19370:	add	sp, sp, #44	; 0x2c
   19374:	ldrd	r4, [sp]
   19378:	ldrd	r6, [sp, #8]
   1937c:	ldrd	r8, [sp, #16]
   19380:	ldrd	sl, [sp, #24]
   19384:	add	sp, sp, #32
   19388:	pop	{pc}		; (ldr pc, [sp], #4)
   1938c:	strdeq	sp, [r2], -ip
   19390:	str	r4, [sp, #-8]!
   19394:	str	lr, [sp, #4]
   19398:	mov	r3, r2
   1939c:	mov	r2, #0
   193a0:	bl	19294 <lchmod@@Base+0x247c>
   193a4:	ldr	r4, [sp]
   193a8:	add	sp, sp, #4
   193ac:	pop	{pc}		; (ldr pc, [sp], #4)
   193b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   193b4:	strd	r6, [sp, #8]
   193b8:	str	r8, [sp, #16]
   193bc:	str	lr, [sp, #20]
   193c0:	movw	r3, #53648	; 0xd190
   193c4:	movt	r3, #2
   193c8:	ldr	r7, [r3]
   193cc:	ldr	r3, [r3, #4]
   193d0:	cmp	r3, #1
   193d4:	ble	19400 <lchmod@@Base+0x25e8>
   193d8:	mov	r4, #1
   193dc:	add	r6, r7, #4
   193e0:	movw	r5, #53648	; 0xd190
   193e4:	movt	r5, #2
   193e8:	ldr	r0, [r6, r4, lsl #3]
   193ec:	bl	13780 <__assert_fail@plt+0x1eb4>
   193f0:	add	r4, r4, #1
   193f4:	ldr	r3, [r5, #4]
   193f8:	cmp	r3, r4
   193fc:	bgt	193e8 <lchmod@@Base+0x25d0>
   19400:	ldr	r0, [r7, #4]
   19404:	movw	r3, #53756	; 0xd1fc
   19408:	movt	r3, #2
   1940c:	cmp	r0, r3
   19410:	beq	19434 <lchmod@@Base+0x261c>
   19414:	bl	13780 <__assert_fail@plt+0x1eb4>
   19418:	movw	r3, #53648	; 0xd190
   1941c:	movt	r3, #2
   19420:	mov	r2, #256	; 0x100
   19424:	str	r2, [r3, #8]
   19428:	movw	r2, #53756	; 0xd1fc
   1942c:	movt	r2, #2
   19430:	str	r2, [r3, #12]
   19434:	ldr	r3, [pc, #64]	; 1947c <lchmod@@Base+0x2664>
   19438:	cmp	r7, r3
   1943c:	beq	19458 <lchmod@@Base+0x2640>
   19440:	mov	r0, r7
   19444:	bl	13780 <__assert_fail@plt+0x1eb4>
   19448:	movw	r3, #53648	; 0xd190
   1944c:	movt	r3, #2
   19450:	add	r2, r3, #8
   19454:	str	r2, [r3]
   19458:	movw	r3, #53648	; 0xd190
   1945c:	movt	r3, #2
   19460:	mov	r2, #1
   19464:	str	r2, [r3, #4]
   19468:	ldrd	r4, [sp]
   1946c:	ldrd	r6, [sp, #8]
   19470:	ldr	r8, [sp, #16]
   19474:	add	sp, sp, #20
   19478:	pop	{pc}		; (ldr pc, [sp], #4)
   1947c:	muleq	r2, r8, r1
   19480:	str	r4, [sp, #-8]!
   19484:	str	lr, [sp, #4]
   19488:	ldr	r3, [pc, #16]	; 194a0 <lchmod@@Base+0x2688>
   1948c:	mvn	r2, #0
   19490:	bl	18ee4 <lchmod@@Base+0x20cc>
   19494:	ldr	r4, [sp]
   19498:	add	sp, sp, #4
   1949c:	pop	{pc}		; (ldr pc, [sp], #4)
   194a0:	strdeq	sp, [r2], -ip
   194a4:	str	r4, [sp, #-8]!
   194a8:	str	lr, [sp, #4]
   194ac:	ldr	r3, [pc, #12]	; 194c0 <lchmod@@Base+0x26a8>
   194b0:	bl	18ee4 <lchmod@@Base+0x20cc>
   194b4:	ldr	r4, [sp]
   194b8:	add	sp, sp, #4
   194bc:	pop	{pc}		; (ldr pc, [sp], #4)
   194c0:	strdeq	sp, [r2], -ip
   194c4:	str	r4, [sp, #-8]!
   194c8:	str	lr, [sp, #4]
   194cc:	mov	r1, r0
   194d0:	mov	r0, #0
   194d4:	bl	19480 <lchmod@@Base+0x2668>
   194d8:	ldr	r4, [sp]
   194dc:	add	sp, sp, #4
   194e0:	pop	{pc}		; (ldr pc, [sp], #4)
   194e4:	str	r4, [sp, #-8]!
   194e8:	str	lr, [sp, #4]
   194ec:	mov	r2, r1
   194f0:	mov	r1, r0
   194f4:	mov	r0, #0
   194f8:	bl	194a4 <lchmod@@Base+0x268c>
   194fc:	ldr	r4, [sp]
   19500:	add	sp, sp, #4
   19504:	pop	{pc}		; (ldr pc, [sp], #4)
   19508:	strd	r4, [sp, #-12]!
   1950c:	str	lr, [sp, #8]
   19510:	sub	sp, sp, #52	; 0x34
   19514:	mov	r4, r0
   19518:	mov	r5, r2
   1951c:	mov	r0, sp
   19520:	bl	17658 <lchmod@@Base+0x840>
   19524:	mov	r3, sp
   19528:	mvn	r2, #0
   1952c:	mov	r1, r5
   19530:	mov	r0, r4
   19534:	bl	18ee4 <lchmod@@Base+0x20cc>
   19538:	add	sp, sp, #52	; 0x34
   1953c:	ldrd	r4, [sp]
   19540:	add	sp, sp, #8
   19544:	pop	{pc}		; (ldr pc, [sp], #4)
   19548:	strd	r4, [sp, #-16]!
   1954c:	str	r6, [sp, #8]
   19550:	str	lr, [sp, #12]
   19554:	sub	sp, sp, #48	; 0x30
   19558:	mov	r4, r0
   1955c:	mov	r5, r2
   19560:	mov	r6, r3
   19564:	mov	r0, sp
   19568:	bl	17658 <lchmod@@Base+0x840>
   1956c:	mov	r3, sp
   19570:	mov	r2, r6
   19574:	mov	r1, r5
   19578:	mov	r0, r4
   1957c:	bl	18ee4 <lchmod@@Base+0x20cc>
   19580:	add	sp, sp, #48	; 0x30
   19584:	ldrd	r4, [sp]
   19588:	ldr	r6, [sp, #8]
   1958c:	add	sp, sp, #12
   19590:	pop	{pc}		; (ldr pc, [sp], #4)
   19594:	str	r4, [sp, #-8]!
   19598:	str	lr, [sp, #4]
   1959c:	mov	r2, r1
   195a0:	mov	r1, r0
   195a4:	mov	r0, #0
   195a8:	bl	19508 <lchmod@@Base+0x26f0>
   195ac:	ldr	r4, [sp]
   195b0:	add	sp, sp, #4
   195b4:	pop	{pc}		; (ldr pc, [sp], #4)
   195b8:	str	r4, [sp, #-8]!
   195bc:	str	lr, [sp, #4]
   195c0:	mov	r3, r2
   195c4:	mov	r2, r1
   195c8:	mov	r1, r0
   195cc:	mov	r0, #0
   195d0:	bl	19548 <lchmod@@Base+0x2730>
   195d4:	ldr	r4, [sp]
   195d8:	add	sp, sp, #4
   195dc:	pop	{pc}		; (ldr pc, [sp], #4)
   195e0:	strd	r4, [sp, #-12]!
   195e4:	str	lr, [sp, #8]
   195e8:	sub	sp, sp, #52	; 0x34
   195ec:	mov	r4, r0
   195f0:	mov	r5, r1
   195f4:	mov	r1, r2
   195f8:	ldr	r0, [pc, #92]	; 1965c <lchmod@@Base+0x2844>
   195fc:	ldrd	r2, [r0]
   19600:	strd	r2, [sp]
   19604:	ldrd	r2, [r0, #8]
   19608:	strd	r2, [sp, #8]
   1960c:	ldrd	r2, [r0, #16]
   19610:	strd	r2, [sp, #16]
   19614:	ldrd	r2, [r0, #24]
   19618:	strd	r2, [sp, #24]
   1961c:	ldrd	r2, [r0, #32]
   19620:	strd	r2, [sp, #32]
   19624:	ldrd	r2, [r0, #40]	; 0x28
   19628:	strd	r2, [sp, #40]	; 0x28
   1962c:	mov	r2, #1
   19630:	mov	r0, sp
   19634:	bl	19158 <lchmod@@Base+0x2340>
   19638:	mov	r3, sp
   1963c:	mov	r2, r5
   19640:	mov	r1, r4
   19644:	mov	r0, #0
   19648:	bl	18ee4 <lchmod@@Base+0x20cc>
   1964c:	add	sp, sp, #52	; 0x34
   19650:	ldrd	r4, [sp]
   19654:	add	sp, sp, #8
   19658:	pop	{pc}		; (ldr pc, [sp], #4)
   1965c:	strdeq	sp, [r2], -ip
   19660:	str	r4, [sp, #-8]!
   19664:	str	lr, [sp, #4]
   19668:	mov	r2, r1
   1966c:	mvn	r1, #0
   19670:	bl	195e0 <lchmod@@Base+0x27c8>
   19674:	ldr	r4, [sp]
   19678:	add	sp, sp, #4
   1967c:	pop	{pc}		; (ldr pc, [sp], #4)
   19680:	str	r4, [sp, #-8]!
   19684:	str	lr, [sp, #4]
   19688:	mov	r1, #58	; 0x3a
   1968c:	bl	19660 <lchmod@@Base+0x2848>
   19690:	ldr	r4, [sp]
   19694:	add	sp, sp, #4
   19698:	pop	{pc}		; (ldr pc, [sp], #4)
   1969c:	str	r4, [sp, #-8]!
   196a0:	str	lr, [sp, #4]
   196a4:	mov	r2, #58	; 0x3a
   196a8:	bl	195e0 <lchmod@@Base+0x27c8>
   196ac:	ldr	r4, [sp]
   196b0:	add	sp, sp, #4
   196b4:	pop	{pc}		; (ldr pc, [sp], #4)
   196b8:	strd	r4, [sp, #-12]!
   196bc:	str	lr, [sp, #8]
   196c0:	sub	sp, sp, #100	; 0x64
   196c4:	mov	r4, r0
   196c8:	mov	r5, r2
   196cc:	mov	r0, sp
   196d0:	bl	17658 <lchmod@@Base+0x840>
   196d4:	ldrd	r2, [sp]
   196d8:	strd	r2, [sp, #48]	; 0x30
   196dc:	ldrd	r2, [sp, #8]
   196e0:	strd	r2, [sp, #56]	; 0x38
   196e4:	ldrd	r2, [sp, #16]
   196e8:	strd	r2, [sp, #64]	; 0x40
   196ec:	ldrd	r2, [sp, #24]
   196f0:	strd	r2, [sp, #72]	; 0x48
   196f4:	ldrd	r2, [sp, #32]
   196f8:	strd	r2, [sp, #80]	; 0x50
   196fc:	ldrd	r2, [sp, #40]	; 0x28
   19700:	strd	r2, [sp, #88]	; 0x58
   19704:	mov	r2, #1
   19708:	mov	r1, #58	; 0x3a
   1970c:	add	r0, sp, #48	; 0x30
   19710:	bl	19158 <lchmod@@Base+0x2340>
   19714:	add	r3, sp, #48	; 0x30
   19718:	mvn	r2, #0
   1971c:	mov	r1, r5
   19720:	mov	r0, r4
   19724:	bl	18ee4 <lchmod@@Base+0x20cc>
   19728:	add	sp, sp, #100	; 0x64
   1972c:	ldrd	r4, [sp]
   19730:	add	sp, sp, #8
   19734:	pop	{pc}		; (ldr pc, [sp], #4)
   19738:	strd	r4, [sp, #-20]!	; 0xffffffec
   1973c:	strd	r6, [sp, #8]
   19740:	str	lr, [sp, #16]
   19744:	sub	sp, sp, #52	; 0x34
   19748:	mov	r4, r0
   1974c:	mov	r5, r3
   19750:	ldr	r3, [pc, #92]	; 197b4 <lchmod@@Base+0x299c>
   19754:	ldrd	r6, [r3]
   19758:	strd	r6, [sp]
   1975c:	ldrd	r6, [r3, #8]
   19760:	strd	r6, [sp, #8]
   19764:	ldrd	r6, [r3, #16]
   19768:	strd	r6, [sp, #16]
   1976c:	ldrd	r6, [r3, #24]
   19770:	strd	r6, [sp, #24]
   19774:	ldrd	r6, [r3, #32]
   19778:	strd	r6, [sp, #32]
   1977c:	ldrd	r6, [r3, #40]	; 0x28
   19780:	strd	r6, [sp, #40]	; 0x28
   19784:	mov	r0, sp
   19788:	bl	191b4 <lchmod@@Base+0x239c>
   1978c:	mov	r3, sp
   19790:	ldr	r2, [sp, #72]	; 0x48
   19794:	mov	r1, r5
   19798:	mov	r0, r4
   1979c:	bl	18ee4 <lchmod@@Base+0x20cc>
   197a0:	add	sp, sp, #52	; 0x34
   197a4:	ldrd	r4, [sp]
   197a8:	ldrd	r6, [sp, #8]
   197ac:	add	sp, sp, #16
   197b0:	pop	{pc}		; (ldr pc, [sp], #4)
   197b4:	strdeq	sp, [r2], -ip
   197b8:	push	{lr}		; (str lr, [sp, #-4]!)
   197bc:	sub	sp, sp, #12
   197c0:	mvn	ip, #0
   197c4:	str	ip, [sp]
   197c8:	bl	19738 <lchmod@@Base+0x2920>
   197cc:	add	sp, sp, #12
   197d0:	pop	{pc}		; (ldr pc, [sp], #4)
   197d4:	str	r4, [sp, #-8]!
   197d8:	str	lr, [sp, #4]
   197dc:	mov	r3, r2
   197e0:	mov	r2, r1
   197e4:	mov	r1, r0
   197e8:	mov	r0, #0
   197ec:	bl	197b8 <lchmod@@Base+0x29a0>
   197f0:	ldr	r4, [sp]
   197f4:	add	sp, sp, #4
   197f8:	pop	{pc}		; (ldr pc, [sp], #4)
   197fc:	push	{lr}		; (str lr, [sp, #-4]!)
   19800:	sub	sp, sp, #12
   19804:	str	r3, [sp]
   19808:	mov	r3, r2
   1980c:	mov	r2, r1
   19810:	mov	r1, r0
   19814:	mov	r0, #0
   19818:	bl	19738 <lchmod@@Base+0x2920>
   1981c:	add	sp, sp, #12
   19820:	pop	{pc}		; (ldr pc, [sp], #4)
   19824:	str	r4, [sp, #-8]!
   19828:	str	lr, [sp, #4]
   1982c:	ldr	r3, [pc, #12]	; 19840 <lchmod@@Base+0x2a28>
   19830:	bl	18ee4 <lchmod@@Base+0x20cc>
   19834:	ldr	r4, [sp]
   19838:	add	sp, sp, #4
   1983c:	pop	{pc}		; (ldr pc, [sp], #4)
   19840:	andeq	sp, r2, r0, lsr #3
   19844:	str	r4, [sp, #-8]!
   19848:	str	lr, [sp, #4]
   1984c:	mov	r2, r1
   19850:	mov	r1, r0
   19854:	mov	r0, #0
   19858:	bl	19824 <lchmod@@Base+0x2a0c>
   1985c:	ldr	r4, [sp]
   19860:	add	sp, sp, #4
   19864:	pop	{pc}		; (ldr pc, [sp], #4)
   19868:	str	r4, [sp, #-8]!
   1986c:	str	lr, [sp, #4]
   19870:	mvn	r2, #0
   19874:	bl	19824 <lchmod@@Base+0x2a0c>
   19878:	ldr	r4, [sp]
   1987c:	add	sp, sp, #4
   19880:	pop	{pc}		; (ldr pc, [sp], #4)
   19884:	str	r4, [sp, #-8]!
   19888:	str	lr, [sp, #4]
   1988c:	mov	r1, r0
   19890:	mov	r0, #0
   19894:	bl	19868 <lchmod@@Base+0x2a50>
   19898:	ldr	r4, [sp]
   1989c:	add	sp, sp, #4
   198a0:	pop	{pc}		; (ldr pc, [sp], #4)
   198a4:	strd	r4, [sp, #-16]!
   198a8:	str	r6, [sp, #8]
   198ac:	str	lr, [sp, #12]
   198b0:	mov	r5, r1
   198b4:	ldr	r4, [r0], #8
   198b8:	cmp	r4, r0
   198bc:	beq	198e0 <lchmod@@Base+0x2ac8>
   198c0:	mov	r0, r4
   198c4:	bl	1adc8 <lchmod@@Base+0x3fb0>
   198c8:	cmp	r0, #0
   198cc:	moveq	r0, r4
   198d0:	ldrd	r4, [sp]
   198d4:	ldr	r6, [sp, #8]
   198d8:	add	sp, sp, #12
   198dc:	pop	{pc}		; (ldr pc, [sp], #4)
   198e0:	mov	r0, r1
   198e4:	bl	1ad8c <lchmod@@Base+0x3f74>
   198e8:	cmp	r0, #0
   198ec:	beq	198d0 <lchmod@@Base+0x2ab8>
   198f0:	mov	r2, r5
   198f4:	mov	r1, r4
   198f8:	bl	11530 <memcpy@plt>
   198fc:	b	198d0 <lchmod@@Base+0x2ab8>
   19900:	strd	r4, [sp, #-16]!
   19904:	str	r6, [sp, #8]
   19908:	str	lr, [sp, #12]
   1990c:	mov	r4, r0
   19910:	ldr	r5, [r0, #4]
   19914:	lsl	r5, r5, #1
   19918:	mov	r6, r0
   1991c:	ldr	r0, [r6], #8
   19920:	cmp	r0, r6
   19924:	beq	1992c <lchmod@@Base+0x2b14>
   19928:	bl	13780 <__assert_fail@plt+0x1eb4>
   1992c:	ldr	r3, [r4, #4]
   19930:	cmp	r3, r5
   19934:	bhi	19964 <lchmod@@Base+0x2b4c>
   19938:	mov	r0, r5
   1993c:	bl	1ad8c <lchmod@@Base+0x3f74>
   19940:	cmp	r0, #0
   19944:	strne	r0, [r4]
   19948:	strne	r5, [r4, #4]
   1994c:	movne	r0, #1
   19950:	beq	19970 <lchmod@@Base+0x2b58>
   19954:	ldrd	r4, [sp]
   19958:	ldr	r6, [sp, #8]
   1995c:	add	sp, sp, #12
   19960:	pop	{pc}		; (ldr pc, [sp], #4)
   19964:	bl	1171c <__errno_location@plt>
   19968:	mov	r3, #12
   1996c:	str	r3, [r0]
   19970:	str	r6, [r4]
   19974:	mov	r3, #1024	; 0x400
   19978:	str	r3, [r4, #4]
   1997c:	mov	r0, #0
   19980:	b	19954 <lchmod@@Base+0x2b3c>
   19984:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19988:	strd	r6, [sp, #8]
   1998c:	str	r8, [sp, #16]
   19990:	str	lr, [sp, #20]
   19994:	mov	r4, r0
   19998:	ldr	r3, [r0, #4]
   1999c:	lsl	r6, r3, #1
   199a0:	mov	r5, r0
   199a4:	ldr	r0, [r5], #8
   199a8:	cmp	r0, r5
   199ac:	beq	199e8 <lchmod@@Base+0x2bd0>
   199b0:	cmp	r3, r6
   199b4:	bhi	19a10 <lchmod@@Base+0x2bf8>
   199b8:	mov	r1, r6
   199bc:	bl	1adc8 <lchmod@@Base+0x3fb0>
   199c0:	subs	r7, r0, #0
   199c4:	beq	19a1c <lchmod@@Base+0x2c04>
   199c8:	str	r7, [r4]
   199cc:	str	r6, [r4, #4]
   199d0:	mov	r0, #1
   199d4:	ldrd	r4, [sp]
   199d8:	ldrd	r6, [sp, #8]
   199dc:	ldr	r8, [sp, #16]
   199e0:	add	sp, sp, #20
   199e4:	pop	{pc}		; (ldr pc, [sp], #4)
   199e8:	mov	r0, r6
   199ec:	bl	1ad8c <lchmod@@Base+0x3f74>
   199f0:	subs	r7, r0, #0
   199f4:	moveq	r0, #0
   199f8:	beq	199d4 <lchmod@@Base+0x2bbc>
   199fc:	ldr	r2, [r4, #4]
   19a00:	mov	r1, r5
   19a04:	mov	r0, r7
   19a08:	bl	11530 <memcpy@plt>
   19a0c:	b	199c8 <lchmod@@Base+0x2bb0>
   19a10:	bl	1171c <__errno_location@plt>
   19a14:	mov	r3, #12
   19a18:	str	r3, [r0]
   19a1c:	ldr	r0, [r4]
   19a20:	bl	13780 <__assert_fail@plt+0x1eb4>
   19a24:	str	r5, [r4]
   19a28:	mov	r3, #1024	; 0x400
   19a2c:	str	r3, [r4, #4]
   19a30:	mov	r0, #0
   19a34:	b	199d4 <lchmod@@Base+0x2bbc>
   19a38:	strd	r4, [sp, #-16]!
   19a3c:	str	r6, [sp, #8]
   19a40:	str	lr, [sp, #12]
   19a44:	subs	r4, r0, #0
   19a48:	beq	19a6c <lchmod@@Base+0x2c54>
   19a4c:	mov	r5, r1
   19a50:	cmp	r4, #10
   19a54:	beq	19a80 <lchmod@@Base+0x2c68>
   19a58:	mov	r0, r4
   19a5c:	ldrd	r4, [sp]
   19a60:	ldr	r6, [sp, #8]
   19a64:	add	sp, sp, #12
   19a68:	pop	{pc}		; (ldr pc, [sp], #4)
   19a6c:	bl	1171c <__errno_location@plt>
   19a70:	mov	r3, #95	; 0x5f
   19a74:	str	r3, [r0]
   19a78:	mvn	r4, #0
   19a7c:	b	19a58 <lchmod@@Base+0x2c40>
   19a80:	ldr	r6, [r1]
   19a84:	movw	r1, #50212	; 0xc424
   19a88:	movt	r1, #1
   19a8c:	mov	r0, r6
   19a90:	bl	114d0 <strcmp@plt>
   19a94:	cmp	r0, #0
   19a98:	bne	19a58 <lchmod@@Base+0x2c40>
   19a9c:	mov	r0, r6
   19aa0:	bl	1180c <freecon@plt>
   19aa4:	mov	r3, #0
   19aa8:	str	r3, [r5]
   19aac:	bl	1171c <__errno_location@plt>
   19ab0:	mov	r3, #61	; 0x3d
   19ab4:	str	r3, [r0]
   19ab8:	mvn	r4, #0
   19abc:	b	19a58 <lchmod@@Base+0x2c40>
   19ac0:	str	r4, [sp, #-8]!
   19ac4:	str	lr, [sp, #4]
   19ac8:	mov	r4, r1
   19acc:	bl	116d4 <getfilecon@plt>
   19ad0:	mov	r1, r4
   19ad4:	bl	19a38 <lchmod@@Base+0x2c20>
   19ad8:	ldr	r4, [sp]
   19adc:	add	sp, sp, #4
   19ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ae4:	str	r4, [sp, #-8]!
   19ae8:	str	lr, [sp, #4]
   19aec:	mov	r4, r1
   19af0:	bl	11650 <lgetfilecon@plt>
   19af4:	mov	r1, r4
   19af8:	bl	19a38 <lchmod@@Base+0x2c20>
   19afc:	ldr	r4, [sp]
   19b00:	add	sp, sp, #4
   19b04:	pop	{pc}		; (ldr pc, [sp], #4)
   19b08:	str	r4, [sp, #-8]!
   19b0c:	str	lr, [sp, #4]
   19b10:	mov	r4, r1
   19b14:	bl	1159c <fgetfilecon@plt>
   19b18:	mov	r1, r4
   19b1c:	bl	19a38 <lchmod@@Base+0x2c20>
   19b20:	ldr	r4, [sp]
   19b24:	add	sp, sp, #4
   19b28:	pop	{pc}		; (ldr pc, [sp], #4)
   19b2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19b30:	strd	r6, [sp, #8]
   19b34:	str	r8, [sp, #16]
   19b38:	str	lr, [sp, #20]
   19b3c:	mov	r4, r0
   19b40:	cmp	r0, #2
   19b44:	bls	19b60 <lchmod@@Base+0x2d48>
   19b48:	mov	r0, r4
   19b4c:	ldrd	r4, [sp]
   19b50:	ldrd	r6, [sp, #8]
   19b54:	ldr	r8, [sp, #16]
   19b58:	add	sp, sp, #20
   19b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b60:	bl	1b638 <lchmod@@Base+0x4820>
   19b64:	mov	r6, r0
   19b68:	bl	1171c <__errno_location@plt>
   19b6c:	mov	r5, r0
   19b70:	ldr	r7, [r0]
   19b74:	mov	r0, r4
   19b78:	bl	11884 <close@plt>
   19b7c:	str	r7, [r5]
   19b80:	mov	r4, r6
   19b84:	b	19b48 <lchmod@@Base+0x2d30>
   19b88:	strd	r4, [sp, #-16]!
   19b8c:	str	r6, [sp, #8]
   19b90:	str	lr, [sp, #12]
   19b94:	sub	sp, sp, #32
   19b98:	mov	r4, r0
   19b9c:	ldr	r5, [sp, #48]	; 0x30
   19ba0:	ldr	r6, [sp, #52]	; 0x34
   19ba4:	cmp	r1, #0
   19ba8:	beq	19c74 <lchmod@@Base+0x2e5c>
   19bac:	str	r3, [sp, #4]
   19bb0:	str	r2, [sp]
   19bb4:	mov	r3, r1
   19bb8:	movw	r2, #50224	; 0xc430
   19bbc:	movt	r2, #1
   19bc0:	mov	r1, #1
   19bc4:	bl	11764 <__fprintf_chk@plt>
   19bc8:	mov	r2, #5
   19bcc:	movw	r1, #50244	; 0xc444
   19bd0:	movt	r1, #1
   19bd4:	mov	r0, #0
   19bd8:	bl	11578 <dcgettext@plt>
   19bdc:	movw	r3, #2022	; 0x7e6
   19be0:	str	r3, [sp]
   19be4:	mov	r3, r0
   19be8:	movw	r2, #50972	; 0xc71c
   19bec:	movt	r2, #1
   19bf0:	mov	r1, #1
   19bf4:	mov	r0, r4
   19bf8:	bl	11764 <__fprintf_chk@plt>
   19bfc:	mov	r1, r4
   19c00:	mov	r0, #10
   19c04:	bl	1156c <fputc_unlocked@plt>
   19c08:	mov	r2, #5
   19c0c:	movw	r1, #50248	; 0xc448
   19c10:	movt	r1, #1
   19c14:	mov	r0, #0
   19c18:	bl	11578 <dcgettext@plt>
   19c1c:	movw	r3, #50420	; 0xc4f4
   19c20:	movt	r3, #1
   19c24:	mov	r2, r0
   19c28:	mov	r1, #1
   19c2c:	mov	r0, r4
   19c30:	bl	11764 <__fprintf_chk@plt>
   19c34:	mov	r1, r4
   19c38:	mov	r0, #10
   19c3c:	bl	1156c <fputc_unlocked@plt>
   19c40:	cmp	r6, #9
   19c44:	ldrls	pc, [pc, r6, lsl #2]
   19c48:	b	19f4c <lchmod@@Base+0x3134>
   19c4c:			; <UNDEFINED> instruction: 0x00019cb8
   19c50:	muleq	r1, r0, ip
   19c54:	andeq	r9, r1, ip, asr #25
   19c58:	andeq	r9, r1, r0, lsl #26
   19c5c:	andeq	r9, r1, ip, lsr sp
   19c60:	andeq	r9, r1, r0, lsl #27
   19c64:	andeq	r9, r1, ip, asr #27
   19c68:	andeq	r9, r1, r0, lsr #28
   19c6c:	andeq	r9, r1, ip, ror lr
   19c70:	andeq	r9, r1, r0, ror #29
   19c74:	str	r3, [sp]
   19c78:	mov	r3, r2
   19c7c:	movw	r2, #50236	; 0xc43c
   19c80:	movt	r2, #1
   19c84:	mov	r1, #1
   19c88:	bl	11764 <__fprintf_chk@plt>
   19c8c:	b	19bc8 <lchmod@@Base+0x2db0>
   19c90:	mov	r2, #5
   19c94:	movw	r1, #50456	; 0xc518
   19c98:	movt	r1, #1
   19c9c:	mov	r0, #0
   19ca0:	bl	11578 <dcgettext@plt>
   19ca4:	ldr	r3, [r5]
   19ca8:	mov	r2, r0
   19cac:	mov	r1, #1
   19cb0:	mov	r0, r4
   19cb4:	bl	11764 <__fprintf_chk@plt>
   19cb8:	add	sp, sp, #32
   19cbc:	ldrd	r4, [sp]
   19cc0:	ldr	r6, [sp, #8]
   19cc4:	add	sp, sp, #12
   19cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ccc:	mov	r2, #5
   19cd0:	movw	r1, #50472	; 0xc528
   19cd4:	movt	r1, #1
   19cd8:	mov	r0, #0
   19cdc:	bl	11578 <dcgettext@plt>
   19ce0:	ldr	r3, [r5, #4]
   19ce4:	str	r3, [sp]
   19ce8:	ldr	r3, [r5]
   19cec:	mov	r2, r0
   19cf0:	mov	r1, #1
   19cf4:	mov	r0, r4
   19cf8:	bl	11764 <__fprintf_chk@plt>
   19cfc:	b	19cb8 <lchmod@@Base+0x2ea0>
   19d00:	mov	r2, #5
   19d04:	movw	r1, #50496	; 0xc540
   19d08:	movt	r1, #1
   19d0c:	mov	r0, #0
   19d10:	bl	11578 <dcgettext@plt>
   19d14:	ldr	r3, [r5, #8]
   19d18:	str	r3, [sp, #4]
   19d1c:	ldr	r3, [r5, #4]
   19d20:	str	r3, [sp]
   19d24:	ldr	r3, [r5]
   19d28:	mov	r2, r0
   19d2c:	mov	r1, #1
   19d30:	mov	r0, r4
   19d34:	bl	11764 <__fprintf_chk@plt>
   19d38:	b	19cb8 <lchmod@@Base+0x2ea0>
   19d3c:	mov	r2, #5
   19d40:	movw	r1, #50524	; 0xc55c
   19d44:	movt	r1, #1
   19d48:	mov	r0, #0
   19d4c:	bl	11578 <dcgettext@plt>
   19d50:	ldr	r3, [r5, #12]
   19d54:	str	r3, [sp, #8]
   19d58:	ldr	r3, [r5, #8]
   19d5c:	str	r3, [sp, #4]
   19d60:	ldr	r3, [r5, #4]
   19d64:	str	r3, [sp]
   19d68:	ldr	r3, [r5]
   19d6c:	mov	r2, r0
   19d70:	mov	r1, #1
   19d74:	mov	r0, r4
   19d78:	bl	11764 <__fprintf_chk@plt>
   19d7c:	b	19cb8 <lchmod@@Base+0x2ea0>
   19d80:	mov	r2, #5
   19d84:	movw	r1, #50556	; 0xc57c
   19d88:	movt	r1, #1
   19d8c:	mov	r0, #0
   19d90:	bl	11578 <dcgettext@plt>
   19d94:	ldr	r3, [r5, #16]
   19d98:	str	r3, [sp, #12]
   19d9c:	ldr	r3, [r5, #12]
   19da0:	str	r3, [sp, #8]
   19da4:	ldr	r3, [r5, #8]
   19da8:	str	r3, [sp, #4]
   19dac:	ldr	r3, [r5, #4]
   19db0:	str	r3, [sp]
   19db4:	ldr	r3, [r5]
   19db8:	mov	r2, r0
   19dbc:	mov	r1, #1
   19dc0:	mov	r0, r4
   19dc4:	bl	11764 <__fprintf_chk@plt>
   19dc8:	b	19cb8 <lchmod@@Base+0x2ea0>
   19dcc:	mov	r2, #5
   19dd0:	movw	r1, #50592	; 0xc5a0
   19dd4:	movt	r1, #1
   19dd8:	mov	r0, #0
   19ddc:	bl	11578 <dcgettext@plt>
   19de0:	ldr	r3, [r5, #20]
   19de4:	str	r3, [sp, #16]
   19de8:	ldr	r3, [r5, #16]
   19dec:	str	r3, [sp, #12]
   19df0:	ldr	r3, [r5, #12]
   19df4:	str	r3, [sp, #8]
   19df8:	ldr	r3, [r5, #8]
   19dfc:	str	r3, [sp, #4]
   19e00:	ldr	r3, [r5, #4]
   19e04:	str	r3, [sp]
   19e08:	ldr	r3, [r5]
   19e0c:	mov	r2, r0
   19e10:	mov	r1, #1
   19e14:	mov	r0, r4
   19e18:	bl	11764 <__fprintf_chk@plt>
   19e1c:	b	19cb8 <lchmod@@Base+0x2ea0>
   19e20:	mov	r2, #5
   19e24:	movw	r1, #50632	; 0xc5c8
   19e28:	movt	r1, #1
   19e2c:	mov	r0, #0
   19e30:	bl	11578 <dcgettext@plt>
   19e34:	ldr	r3, [r5, #24]
   19e38:	str	r3, [sp, #20]
   19e3c:	ldr	r3, [r5, #20]
   19e40:	str	r3, [sp, #16]
   19e44:	ldr	r3, [r5, #16]
   19e48:	str	r3, [sp, #12]
   19e4c:	ldr	r3, [r5, #12]
   19e50:	str	r3, [sp, #8]
   19e54:	ldr	r3, [r5, #8]
   19e58:	str	r3, [sp, #4]
   19e5c:	ldr	r3, [r5, #4]
   19e60:	str	r3, [sp]
   19e64:	ldr	r3, [r5]
   19e68:	mov	r2, r0
   19e6c:	mov	r1, #1
   19e70:	mov	r0, r4
   19e74:	bl	11764 <__fprintf_chk@plt>
   19e78:	b	19cb8 <lchmod@@Base+0x2ea0>
   19e7c:	mov	r2, #5
   19e80:	movw	r1, #50676	; 0xc5f4
   19e84:	movt	r1, #1
   19e88:	mov	r0, #0
   19e8c:	bl	11578 <dcgettext@plt>
   19e90:	ldr	r3, [r5, #28]
   19e94:	str	r3, [sp, #24]
   19e98:	ldr	r3, [r5, #24]
   19e9c:	str	r3, [sp, #20]
   19ea0:	ldr	r3, [r5, #20]
   19ea4:	str	r3, [sp, #16]
   19ea8:	ldr	r3, [r5, #16]
   19eac:	str	r3, [sp, #12]
   19eb0:	ldr	r3, [r5, #12]
   19eb4:	str	r3, [sp, #8]
   19eb8:	ldr	r3, [r5, #8]
   19ebc:	str	r3, [sp, #4]
   19ec0:	ldr	r3, [r5, #4]
   19ec4:	str	r3, [sp]
   19ec8:	ldr	r3, [r5]
   19ecc:	mov	r2, r0
   19ed0:	mov	r1, #1
   19ed4:	mov	r0, r4
   19ed8:	bl	11764 <__fprintf_chk@plt>
   19edc:	b	19cb8 <lchmod@@Base+0x2ea0>
   19ee0:	mov	r2, #5
   19ee4:	movw	r1, #50724	; 0xc624
   19ee8:	movt	r1, #1
   19eec:	mov	r0, #0
   19ef0:	bl	11578 <dcgettext@plt>
   19ef4:	ldr	r3, [r5, #32]
   19ef8:	str	r3, [sp, #28]
   19efc:	ldr	r3, [r5, #28]
   19f00:	str	r3, [sp, #24]
   19f04:	ldr	r3, [r5, #24]
   19f08:	str	r3, [sp, #20]
   19f0c:	ldr	r3, [r5, #20]
   19f10:	str	r3, [sp, #16]
   19f14:	ldr	r3, [r5, #16]
   19f18:	str	r3, [sp, #12]
   19f1c:	ldr	r3, [r5, #12]
   19f20:	str	r3, [sp, #8]
   19f24:	ldr	r3, [r5, #8]
   19f28:	str	r3, [sp, #4]
   19f2c:	ldr	r3, [r5, #4]
   19f30:	str	r3, [sp]
   19f34:	ldr	r3, [r5]
   19f38:	mov	r2, r0
   19f3c:	mov	r1, #1
   19f40:	mov	r0, r4
   19f44:	bl	11764 <__fprintf_chk@plt>
   19f48:	b	19cb8 <lchmod@@Base+0x2ea0>
   19f4c:	mov	r2, #5
   19f50:	movw	r1, #50776	; 0xc658
   19f54:	movt	r1, #1
   19f58:	mov	r0, #0
   19f5c:	bl	11578 <dcgettext@plt>
   19f60:	ldr	r3, [r5, #32]
   19f64:	str	r3, [sp, #28]
   19f68:	ldr	r3, [r5, #28]
   19f6c:	str	r3, [sp, #24]
   19f70:	ldr	r3, [r5, #24]
   19f74:	str	r3, [sp, #20]
   19f78:	ldr	r3, [r5, #20]
   19f7c:	str	r3, [sp, #16]
   19f80:	ldr	r3, [r5, #16]
   19f84:	str	r3, [sp, #12]
   19f88:	ldr	r3, [r5, #12]
   19f8c:	str	r3, [sp, #8]
   19f90:	ldr	r3, [r5, #8]
   19f94:	str	r3, [sp, #4]
   19f98:	ldr	r3, [r5, #4]
   19f9c:	str	r3, [sp]
   19fa0:	ldr	r3, [r5]
   19fa4:	mov	r2, r0
   19fa8:	mov	r1, #1
   19fac:	mov	r0, r4
   19fb0:	bl	11764 <__fprintf_chk@plt>
   19fb4:	b	19cb8 <lchmod@@Base+0x2ea0>
   19fb8:	strd	r4, [sp, #-12]!
   19fbc:	str	lr, [sp, #8]
   19fc0:	sub	sp, sp, #12
   19fc4:	ldr	r5, [sp, #24]
   19fc8:	ldr	ip, [r5]
   19fcc:	cmp	ip, #0
   19fd0:	beq	1a008 <lchmod@@Base+0x31f0>
   19fd4:	mov	lr, r5
   19fd8:	mov	ip, #0
   19fdc:	add	ip, ip, #1
   19fe0:	ldr	r4, [lr, #4]!
   19fe4:	cmp	r4, #0
   19fe8:	bne	19fdc <lchmod@@Base+0x31c4>
   19fec:	str	ip, [sp, #4]
   19ff0:	str	r5, [sp]
   19ff4:	bl	19b88 <lchmod@@Base+0x2d70>
   19ff8:	add	sp, sp, #12
   19ffc:	ldrd	r4, [sp]
   1a000:	add	sp, sp, #8
   1a004:	pop	{pc}		; (ldr pc, [sp], #4)
   1a008:	mov	ip, #0
   1a00c:	b	19fec <lchmod@@Base+0x31d4>
   1a010:	strd	r4, [sp, #-12]!
   1a014:	str	lr, [sp, #8]
   1a018:	sub	sp, sp, #52	; 0x34
   1a01c:	ldr	r5, [sp, #64]	; 0x40
   1a020:	add	r4, sp, #8
   1a024:	mov	ip, #0
   1a028:	ldr	lr, [r5], #4
   1a02c:	str	lr, [r4], #4
   1a030:	cmp	lr, #0
   1a034:	beq	1a044 <lchmod@@Base+0x322c>
   1a038:	add	ip, ip, #1
   1a03c:	cmp	ip, #10
   1a040:	bne	1a028 <lchmod@@Base+0x3210>
   1a044:	str	ip, [sp, #4]
   1a048:	add	ip, sp, #8
   1a04c:	str	ip, [sp]
   1a050:	bl	19b88 <lchmod@@Base+0x2d70>
   1a054:	add	sp, sp, #52	; 0x34
   1a058:	ldrd	r4, [sp]
   1a05c:	add	sp, sp, #8
   1a060:	pop	{pc}		; (ldr pc, [sp], #4)
   1a064:	push	{r3}		; (str r3, [sp, #-4]!)
   1a068:	push	{lr}		; (str lr, [sp, #-4]!)
   1a06c:	sub	sp, sp, #16
   1a070:	add	r3, sp, #24
   1a074:	str	r3, [sp, #12]
   1a078:	str	r3, [sp]
   1a07c:	ldr	r3, [sp, #20]
   1a080:	bl	1a010 <lchmod@@Base+0x31f8>
   1a084:	add	sp, sp, #16
   1a088:	pop	{lr}		; (ldr lr, [sp], #4)
   1a08c:	add	sp, sp, #4
   1a090:	bx	lr
   1a094:	str	r4, [sp, #-8]!
   1a098:	str	lr, [sp, #4]
   1a09c:	movw	r3, #53732	; 0xd1e4
   1a0a0:	movt	r3, #2
   1a0a4:	ldr	r1, [r3]
   1a0a8:	mov	r0, #10
   1a0ac:	bl	1156c <fputc_unlocked@plt>
   1a0b0:	mov	r2, #5
   1a0b4:	movw	r1, #50836	; 0xc694
   1a0b8:	movt	r1, #1
   1a0bc:	mov	r0, #0
   1a0c0:	bl	11578 <dcgettext@plt>
   1a0c4:	movw	r2, #50856	; 0xc6a8
   1a0c8:	movt	r2, #1
   1a0cc:	mov	r1, r0
   1a0d0:	mov	r0, #1
   1a0d4:	bl	1174c <__printf_chk@plt>
   1a0d8:	mov	r2, #5
   1a0dc:	movw	r1, #50880	; 0xc6c0
   1a0e0:	movt	r1, #1
   1a0e4:	mov	r0, #0
   1a0e8:	bl	11578 <dcgettext@plt>
   1a0ec:	movw	r3, #48828	; 0xbebc
   1a0f0:	movt	r3, #1
   1a0f4:	movw	r2, #48868	; 0xbee4
   1a0f8:	movt	r2, #1
   1a0fc:	mov	r1, r0
   1a100:	mov	r0, #1
   1a104:	bl	1174c <__printf_chk@plt>
   1a108:	mov	r2, #5
   1a10c:	movw	r1, #50900	; 0xc6d4
   1a110:	movt	r1, #1
   1a114:	mov	r0, #0
   1a118:	bl	11578 <dcgettext@plt>
   1a11c:	movw	r2, #50940	; 0xc6fc
   1a120:	movt	r2, #1
   1a124:	mov	r1, r0
   1a128:	mov	r0, #1
   1a12c:	bl	1174c <__printf_chk@plt>
   1a130:	ldr	r4, [sp]
   1a134:	add	sp, sp, #4
   1a138:	pop	{pc}		; (ldr pc, [sp], #4)
   1a13c:	str	r4, [sp, #-8]!
   1a140:	str	lr, [sp, #4]
   1a144:	bl	1ad8c <lchmod@@Base+0x3f74>
   1a148:	cmp	r0, #0
   1a14c:	beq	1a15c <lchmod@@Base+0x3344>
   1a150:	ldr	r4, [sp]
   1a154:	add	sp, sp, #4
   1a158:	pop	{pc}		; (ldr pc, [sp], #4)
   1a15c:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a160:	str	r4, [sp, #-8]!
   1a164:	str	lr, [sp, #4]
   1a168:	bl	1ad8c <lchmod@@Base+0x3f74>
   1a16c:	cmp	r0, #0
   1a170:	beq	1a180 <lchmod@@Base+0x3368>
   1a174:	ldr	r4, [sp]
   1a178:	add	sp, sp, #4
   1a17c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a180:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a184:	str	r4, [sp, #-8]!
   1a188:	str	lr, [sp, #4]
   1a18c:	bl	1a13c <lchmod@@Base+0x3324>
   1a190:	ldr	r4, [sp]
   1a194:	add	sp, sp, #4
   1a198:	pop	{pc}		; (ldr pc, [sp], #4)
   1a19c:	strd	r4, [sp, #-16]!
   1a1a0:	str	r6, [sp, #8]
   1a1a4:	str	lr, [sp, #12]
   1a1a8:	mov	r5, r0
   1a1ac:	mov	r4, r1
   1a1b0:	bl	1adc8 <lchmod@@Base+0x3fb0>
   1a1b4:	cmp	r0, #0
   1a1b8:	beq	1a1cc <lchmod@@Base+0x33b4>
   1a1bc:	ldrd	r4, [sp]
   1a1c0:	ldr	r6, [sp, #8]
   1a1c4:	add	sp, sp, #12
   1a1c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1cc:	adds	r4, r4, #0
   1a1d0:	movne	r4, #1
   1a1d4:	cmp	r5, #0
   1a1d8:	moveq	r4, #1
   1a1dc:	cmp	r4, #0
   1a1e0:	beq	1a1bc <lchmod@@Base+0x33a4>
   1a1e4:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a1e8:	str	r4, [sp, #-8]!
   1a1ec:	str	lr, [sp, #4]
   1a1f0:	cmp	r1, #0
   1a1f4:	orreq	r1, r1, #1
   1a1f8:	bl	1adc8 <lchmod@@Base+0x3fb0>
   1a1fc:	cmp	r0, #0
   1a200:	beq	1a210 <lchmod@@Base+0x33f8>
   1a204:	ldr	r4, [sp]
   1a208:	add	sp, sp, #4
   1a20c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a210:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a214:	strd	r4, [sp, #-16]!
   1a218:	str	r6, [sp, #8]
   1a21c:	str	lr, [sp, #12]
   1a220:	mov	r4, r0
   1a224:	mov	r6, r1
   1a228:	mov	r5, r2
   1a22c:	bl	1b5fc <lchmod@@Base+0x47e4>
   1a230:	cmp	r0, #0
   1a234:	beq	1a248 <lchmod@@Base+0x3430>
   1a238:	ldrd	r4, [sp]
   1a23c:	ldr	r6, [sp, #8]
   1a240:	add	sp, sp, #12
   1a244:	pop	{pc}		; (ldr pc, [sp], #4)
   1a248:	cmp	r4, #0
   1a24c:	beq	1a25c <lchmod@@Base+0x3444>
   1a250:	cmp	r6, #0
   1a254:	cmpne	r5, #0
   1a258:	beq	1a238 <lchmod@@Base+0x3420>
   1a25c:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a260:	str	r4, [sp, #-8]!
   1a264:	str	lr, [sp, #4]
   1a268:	bl	1a214 <lchmod@@Base+0x33fc>
   1a26c:	ldr	r4, [sp]
   1a270:	add	sp, sp, #4
   1a274:	pop	{pc}		; (ldr pc, [sp], #4)
   1a278:	str	r4, [sp, #-8]!
   1a27c:	str	lr, [sp, #4]
   1a280:	mov	ip, r1
   1a284:	mov	r3, r2
   1a288:	cmp	r2, #0
   1a28c:	cmpne	r1, #0
   1a290:	moveq	r3, #1
   1a294:	moveq	ip, r3
   1a298:	mov	r2, r3
   1a29c:	mov	r1, ip
   1a2a0:	bl	1b5fc <lchmod@@Base+0x47e4>
   1a2a4:	cmp	r0, #0
   1a2a8:	beq	1a2b8 <lchmod@@Base+0x34a0>
   1a2ac:	ldr	r4, [sp]
   1a2b0:	add	sp, sp, #4
   1a2b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2b8:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a2bc:	str	r4, [sp, #-8]!
   1a2c0:	str	lr, [sp, #4]
   1a2c4:	mov	r2, r1
   1a2c8:	mov	r1, r0
   1a2cc:	mov	r0, #0
   1a2d0:	bl	1a214 <lchmod@@Base+0x33fc>
   1a2d4:	ldr	r4, [sp]
   1a2d8:	add	sp, sp, #4
   1a2dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e0:	str	r4, [sp, #-8]!
   1a2e4:	str	lr, [sp, #4]
   1a2e8:	mov	r2, r1
   1a2ec:	mov	r1, r0
   1a2f0:	mov	r0, #0
   1a2f4:	bl	1a278 <lchmod@@Base+0x3460>
   1a2f8:	ldr	r4, [sp]
   1a2fc:	add	sp, sp, #4
   1a300:	pop	{pc}		; (ldr pc, [sp], #4)
   1a304:	strd	r4, [sp, #-16]!
   1a308:	str	r6, [sp, #8]
   1a30c:	str	lr, [sp, #12]
   1a310:	mov	r5, r1
   1a314:	ldr	r4, [r1]
   1a318:	cmp	r0, #0
   1a31c:	beq	1a34c <lchmod@@Base+0x3534>
   1a320:	lsr	r3, r4, #1
   1a324:	add	r3, r3, #1
   1a328:	adds	r4, r4, r3
   1a32c:	bcs	1a368 <lchmod@@Base+0x3550>
   1a330:	mov	r1, r4
   1a334:	bl	1a214 <lchmod@@Base+0x33fc>
   1a338:	str	r4, [r5]
   1a33c:	ldrd	r4, [sp]
   1a340:	ldr	r6, [sp, #8]
   1a344:	add	sp, sp, #12
   1a348:	pop	{pc}		; (ldr pc, [sp], #4)
   1a34c:	cmp	r4, #0
   1a350:	bne	1a330 <lchmod@@Base+0x3518>
   1a354:	mov	r4, #64	; 0x40
   1a358:	udiv	r4, r4, r2
   1a35c:	cmp	r2, #64	; 0x40
   1a360:	addhi	r4, r4, #1
   1a364:	b	1a330 <lchmod@@Base+0x3518>
   1a368:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a36c:	str	r4, [sp, #-8]!
   1a370:	str	lr, [sp, #4]
   1a374:	mov	r2, #1
   1a378:	bl	1a304 <lchmod@@Base+0x34ec>
   1a37c:	ldr	r4, [sp]
   1a380:	add	sp, sp, #4
   1a384:	pop	{pc}		; (ldr pc, [sp], #4)
   1a388:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a38c:	strd	r6, [sp, #8]
   1a390:	str	r8, [sp, #16]
   1a394:	str	lr, [sp, #20]
   1a398:	mov	r5, r1
   1a39c:	ldr	lr, [sp, #24]
   1a3a0:	ldr	ip, [r1]
   1a3a4:	asr	r4, ip, #1
   1a3a8:	adds	r4, ip, r4
   1a3ac:	movvs	r1, #1
   1a3b0:	movvc	r1, #0
   1a3b4:	cmp	r1, #0
   1a3b8:	mvnne	r4, #-2147483648	; 0x80000000
   1a3bc:	mvn	r8, r3
   1a3c0:	lsr	r8, r8, #31
   1a3c4:	cmp	r3, r4
   1a3c8:	movge	r1, #0
   1a3cc:	andlt	r1, r8, #1
   1a3d0:	cmp	r1, #0
   1a3d4:	movne	r4, r3
   1a3d8:	smull	r6, r7, r4, lr
   1a3dc:	asr	r1, r6, #31
   1a3e0:	cmp	r1, r7
   1a3e4:	bne	1a3fc <lchmod@@Base+0x35e4>
   1a3e8:	mov	r1, r6
   1a3ec:	cmp	r6, #63	; 0x3f
   1a3f0:	movle	r1, #64	; 0x40
   1a3f4:	ble	1a400 <lchmod@@Base+0x35e8>
   1a3f8:	b	1a40c <lchmod@@Base+0x35f4>
   1a3fc:	mvn	r1, #-2147483648	; 0x80000000
   1a400:	sdiv	r4, r1, lr
   1a404:	mls	r6, lr, r4, r1
   1a408:	sub	r1, r1, r6
   1a40c:	cmp	r0, #0
   1a410:	moveq	r6, #0
   1a414:	streq	r6, [r5]
   1a418:	sub	r6, r4, ip
   1a41c:	cmp	r6, r2
   1a420:	bge	1a458 <lchmod@@Base+0x3640>
   1a424:	adds	r2, ip, r2
   1a428:	mov	r4, r2
   1a42c:	bvs	1a474 <lchmod@@Base+0x365c>
   1a430:	cmp	r2, r3
   1a434:	movle	r3, #0
   1a438:	andgt	r3, r8, #1
   1a43c:	cmp	r3, #0
   1a440:	bne	1a474 <lchmod@@Base+0x365c>
   1a444:	smull	r2, r3, r2, lr
   1a448:	asr	ip, r2, #31
   1a44c:	mov	r1, r2
   1a450:	cmp	ip, r3
   1a454:	bne	1a474 <lchmod@@Base+0x365c>
   1a458:	bl	1a19c <lchmod@@Base+0x3384>
   1a45c:	str	r4, [r5]
   1a460:	ldrd	r4, [sp]
   1a464:	ldrd	r6, [sp, #8]
   1a468:	ldr	r8, [sp, #16]
   1a46c:	add	sp, sp, #20
   1a470:	pop	{pc}		; (ldr pc, [sp], #4)
   1a474:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a478:	str	r4, [sp, #-8]!
   1a47c:	str	lr, [sp, #4]
   1a480:	bl	1ad18 <lchmod@@Base+0x3f00>
   1a484:	cmp	r0, #0
   1a488:	beq	1a498 <lchmod@@Base+0x3680>
   1a48c:	ldr	r4, [sp]
   1a490:	add	sp, sp, #4
   1a494:	pop	{pc}		; (ldr pc, [sp], #4)
   1a498:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a49c:	str	r4, [sp, #-8]!
   1a4a0:	str	lr, [sp, #4]
   1a4a4:	mov	r1, #1
   1a4a8:	bl	1a478 <lchmod@@Base+0x3660>
   1a4ac:	ldr	r4, [sp]
   1a4b0:	add	sp, sp, #4
   1a4b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4b8:	str	r4, [sp, #-8]!
   1a4bc:	str	lr, [sp, #4]
   1a4c0:	bl	1ad18 <lchmod@@Base+0x3f00>
   1a4c4:	cmp	r0, #0
   1a4c8:	beq	1a4d8 <lchmod@@Base+0x36c0>
   1a4cc:	ldr	r4, [sp]
   1a4d0:	add	sp, sp, #4
   1a4d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4d8:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a4dc:	str	r4, [sp, #-8]!
   1a4e0:	str	lr, [sp, #4]
   1a4e4:	mov	r1, #1
   1a4e8:	bl	1a4b8 <lchmod@@Base+0x36a0>
   1a4ec:	ldr	r4, [sp]
   1a4f0:	add	sp, sp, #4
   1a4f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4f8:	strd	r4, [sp, #-16]!
   1a4fc:	str	r6, [sp, #8]
   1a500:	str	lr, [sp, #12]
   1a504:	mov	r5, r0
   1a508:	mov	r4, r1
   1a50c:	mov	r0, r1
   1a510:	bl	1a13c <lchmod@@Base+0x3324>
   1a514:	mov	r2, r4
   1a518:	mov	r1, r5
   1a51c:	bl	11530 <memcpy@plt>
   1a520:	ldrd	r4, [sp]
   1a524:	ldr	r6, [sp, #8]
   1a528:	add	sp, sp, #12
   1a52c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a530:	strd	r4, [sp, #-16]!
   1a534:	str	r6, [sp, #8]
   1a538:	str	lr, [sp, #12]
   1a53c:	mov	r5, r0
   1a540:	mov	r4, r1
   1a544:	mov	r0, r1
   1a548:	bl	1a160 <lchmod@@Base+0x3348>
   1a54c:	mov	r2, r4
   1a550:	mov	r1, r5
   1a554:	bl	11530 <memcpy@plt>
   1a558:	ldrd	r4, [sp]
   1a55c:	ldr	r6, [sp, #8]
   1a560:	add	sp, sp, #12
   1a564:	pop	{pc}		; (ldr pc, [sp], #4)
   1a568:	strd	r4, [sp, #-16]!
   1a56c:	str	r6, [sp, #8]
   1a570:	str	lr, [sp, #12]
   1a574:	mov	r5, r0
   1a578:	mov	r4, r1
   1a57c:	add	r0, r1, #1
   1a580:	bl	1a160 <lchmod@@Base+0x3348>
   1a584:	mov	r2, #0
   1a588:	strb	r2, [r0, r4]
   1a58c:	mov	r2, r4
   1a590:	mov	r1, r5
   1a594:	bl	11530 <memcpy@plt>
   1a598:	ldrd	r4, [sp]
   1a59c:	ldr	r6, [sp, #8]
   1a5a0:	add	sp, sp, #12
   1a5a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5a8:	str	r4, [sp, #-8]!
   1a5ac:	str	lr, [sp, #4]
   1a5b0:	mov	r4, r0
   1a5b4:	bl	116e0 <strlen@plt>
   1a5b8:	add	r1, r0, #1
   1a5bc:	mov	r0, r4
   1a5c0:	bl	1a4f8 <lchmod@@Base+0x36e0>
   1a5c4:	ldr	r4, [sp]
   1a5c8:	add	sp, sp, #4
   1a5cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5d0:	str	r4, [sp, #-8]!
   1a5d4:	str	lr, [sp, #4]
   1a5d8:	movw	r3, #53644	; 0xd18c
   1a5dc:	movt	r3, #2
   1a5e0:	ldr	r4, [r3]
   1a5e4:	mov	r2, #5
   1a5e8:	movw	r1, #51020	; 0xc74c
   1a5ec:	movt	r1, #1
   1a5f0:	mov	r0, #0
   1a5f4:	bl	11578 <dcgettext@plt>
   1a5f8:	mov	r3, r0
   1a5fc:	movw	r2, #49776	; 0xc270
   1a600:	movt	r2, #1
   1a604:	mov	r1, #0
   1a608:	mov	r0, r4
   1a60c:	bl	11638 <error@plt>
   1a610:	bl	11878 <abort@plt>
   1a614:	str	r4, [sp, #-8]!
   1a618:	str	lr, [sp, #4]
   1a61c:	orr	r1, r1, #512	; 0x200
   1a620:	bl	14df0 <__assert_fail@plt+0x3524>
   1a624:	cmp	r0, #0
   1a628:	beq	1a638 <lchmod@@Base+0x3820>
   1a62c:	ldr	r4, [sp]
   1a630:	add	sp, sp, #4
   1a634:	pop	{pc}		; (ldr pc, [sp], #4)
   1a638:	bl	1171c <__errno_location@plt>
   1a63c:	ldr	r3, [r0]
   1a640:	cmp	r3, #22
   1a644:	beq	1a64c <lchmod@@Base+0x3834>
   1a648:	bl	1a5d0 <lchmod@@Base+0x37b8>
   1a64c:	movw	r3, #51040	; 0xc760
   1a650:	movt	r3, #1
   1a654:	mov	r2, #41	; 0x29
   1a658:	movw	r1, #51052	; 0xc76c
   1a65c:	movt	r1, #1
   1a660:	movw	r0, #51064	; 0xc778
   1a664:	movt	r0, #1
   1a668:	bl	118cc <__assert_fail@plt>
   1a66c:	ldr	r3, [r0, #48]	; 0x30
   1a670:	and	r3, r3, #17
   1a674:	cmp	r3, #16
   1a678:	beq	1a69c <lchmod@@Base+0x3884>
   1a67c:	cmp	r3, #17
   1a680:	beq	1a68c <lchmod@@Base+0x3874>
   1a684:	mov	r0, #0
   1a688:	bx	lr
   1a68c:	ldr	r0, [r1, #48]	; 0x30
   1a690:	adds	r0, r0, #0
   1a694:	movne	r0, #1
   1a698:	bx	lr
   1a69c:	mov	r0, #1
   1a6a0:	bx	lr
   1a6a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a6a8:	strd	r6, [sp, #8]
   1a6ac:	strd	r8, [sp, #16]
   1a6b0:	strd	sl, [sp, #24]
   1a6b4:	str	lr, [sp, #32]
   1a6b8:	sub	sp, sp, #12
   1a6bc:	str	r0, [sp, #4]
   1a6c0:	cmp	r2, #0
   1a6c4:	beq	1a7c0 <lchmod@@Base+0x39a8>
   1a6c8:	sub	ip, r2, #1
   1a6cc:	ldrd	r2, [r0]
   1a6d0:	mov	r0, #0
   1a6d4:	mov	r8, r1
   1a6d8:	asr	r9, r1, #31
   1a6dc:	str	r1, [sp]
   1a6e0:	b	1a730 <lchmod@@Base+0x3918>
   1a6e4:	orrs	r4, r2, r3
   1a6e8:	movne	lr, #1
   1a6ec:	b	1a740 <lchmod@@Base+0x3928>
   1a6f0:	mov	sl, r3
   1a6f4:	ldr	fp, [sp]
   1a6f8:	umull	r6, r7, r1, r2
   1a6fc:	mov	r4, r7
   1a700:	mov	r5, #0
   1a704:	umlal	r4, r5, sl, fp
   1a708:	cmp	r5, #0
   1a70c:	bne	1a774 <lchmod@@Base+0x395c>
   1a710:	cmp	lr, #0
   1a714:	bne	1a78c <lchmod@@Base+0x3974>
   1a718:	mov	r2, r6
   1a71c:	mov	r3, r4
   1a720:	orr	r0, r0, lr
   1a724:	sub	ip, ip, #1
   1a728:	cmn	ip, #1
   1a72c:	beq	1a79c <lchmod@@Base+0x3984>
   1a730:	mov	lr, #0
   1a734:	cmp	r8, #0
   1a738:	sbcs	r4, r9, #0
   1a73c:	blt	1a6e4 <lchmod@@Base+0x38cc>
   1a740:	cmp	r9, #0
   1a744:	bne	1a760 <lchmod@@Base+0x3948>
   1a748:	cmp	r3, #0
   1a74c:	bne	1a6f0 <lchmod@@Base+0x38d8>
   1a750:	umull	r2, r3, r1, r2
   1a754:	mov	r6, r2
   1a758:	mov	r4, r3
   1a75c:	b	1a710 <lchmod@@Base+0x38f8>
   1a760:	cmp	r3, #0
   1a764:	bne	1a774 <lchmod@@Base+0x395c>
   1a768:	mov	sl, r9
   1a76c:	mov	fp, r2
   1a770:	b	1a6f8 <lchmod@@Base+0x38e0>
   1a774:	mul	r4, r1, r3
   1a778:	mla	r4, r2, r9, r4
   1a77c:	umull	r6, r7, r1, r2
   1a780:	add	r4, r4, r7
   1a784:	mov	lr, #1
   1a788:	b	1a710 <lchmod@@Base+0x38f8>
   1a78c:	mvn	r2, #0
   1a790:	mvn	r3, #0
   1a794:	mov	lr, #1
   1a798:	b	1a720 <lchmod@@Base+0x3908>
   1a79c:	ldr	r1, [sp, #4]
   1a7a0:	strd	r2, [r1]
   1a7a4:	add	sp, sp, #12
   1a7a8:	ldrd	r4, [sp]
   1a7ac:	ldrd	r6, [sp, #8]
   1a7b0:	ldrd	r8, [sp, #16]
   1a7b4:	ldrd	sl, [sp, #24]
   1a7b8:	add	sp, sp, #32
   1a7bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7c0:	mov	r0, #0
   1a7c4:	b	1a7a4 <lchmod@@Base+0x398c>
   1a7c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a7cc:	strd	r6, [sp, #8]
   1a7d0:	strd	r8, [sp, #16]
   1a7d4:	str	lr, [sp, #24]
   1a7d8:	sub	sp, sp, #20
   1a7dc:	cmp	r2, #36	; 0x24
   1a7e0:	bhi	1a834 <lchmod@@Base+0x3a1c>
   1a7e4:	mov	r5, r0
   1a7e8:	mov	r6, r1
   1a7ec:	mov	r7, r2
   1a7f0:	mov	r9, r3
   1a7f4:	cmp	r1, #0
   1a7f8:	addeq	r6, sp, #12
   1a7fc:	bl	1171c <__errno_location@plt>
   1a800:	mov	r8, r0
   1a804:	mov	r3, #0
   1a808:	str	r3, [r0]
   1a80c:	ldrb	r4, [r5]
   1a810:	bl	116b0 <__ctype_b_loc@plt>
   1a814:	ldr	r1, [r0]
   1a818:	mov	r2, r5
   1a81c:	lsl	r3, r4, #1
   1a820:	ldrh	r3, [r1, r3]
   1a824:	tst	r3, #8192	; 0x2000
   1a828:	beq	1a854 <lchmod@@Base+0x3a3c>
   1a82c:	ldrb	r4, [r2, #1]!
   1a830:	b	1a81c <lchmod@@Base+0x3a04>
   1a834:	movw	r3, #51080	; 0xc788
   1a838:	movt	r3, #1
   1a83c:	mov	r2, #85	; 0x55
   1a840:	movw	r1, #51092	; 0xc794
   1a844:	movt	r1, #1
   1a848:	movw	r0, #51108	; 0xc7a4
   1a84c:	movt	r0, #1
   1a850:	bl	118cc <__assert_fail@plt>
   1a854:	cmp	r4, #45	; 0x2d
   1a858:	moveq	r4, #4
   1a85c:	beq	1a9f0 <lchmod@@Base+0x3bd8>
   1a860:	mov	r3, #0
   1a864:	mov	r2, r7
   1a868:	mov	r1, r6
   1a86c:	mov	r0, r5
   1a870:	bl	1153c <__strtoull_internal@plt>
   1a874:	strd	r0, [sp]
   1a878:	ldr	r7, [r6]
   1a87c:	cmp	r7, r5
   1a880:	beq	1a8a4 <lchmod@@Base+0x3a8c>
   1a884:	ldr	r3, [r8]
   1a888:	cmp	r3, #0
   1a88c:	beq	1a9c8 <lchmod@@Base+0x3bb0>
   1a890:	cmp	r3, #34	; 0x22
   1a894:	moveq	r4, #1
   1a898:	beq	1a9cc <lchmod@@Base+0x3bb4>
   1a89c:	mov	r4, #4
   1a8a0:	b	1a9f0 <lchmod@@Base+0x3bd8>
   1a8a4:	ldr	r3, [sp, #48]	; 0x30
   1a8a8:	cmp	r3, #0
   1a8ac:	beq	1ad08 <lchmod@@Base+0x3ef0>
   1a8b0:	ldrb	r1, [r5]
   1a8b4:	cmp	r1, #0
   1a8b8:	moveq	r4, #4
   1a8bc:	beq	1a9f0 <lchmod@@Base+0x3bd8>
   1a8c0:	mov	r0, r3
   1a8c4:	bl	116f8 <strchr@plt>
   1a8c8:	cmp	r0, #0
   1a8cc:	beq	1ad10 <lchmod@@Base+0x3ef8>
   1a8d0:	mov	r2, #1
   1a8d4:	mov	r3, #0
   1a8d8:	strd	r2, [sp]
   1a8dc:	ldrb	r5, [r7]
   1a8e0:	mov	r4, #0
   1a8e4:	mov	r1, r5
   1a8e8:	ldr	r0, [sp, #48]	; 0x30
   1a8ec:	bl	116f8 <strchr@plt>
   1a8f0:	cmp	r0, #0
   1a8f4:	beq	1aa0c <lchmod@@Base+0x3bf4>
   1a8f8:	sub	r3, r5, #69	; 0x45
   1a8fc:	cmp	r3, #47	; 0x2f
   1a900:	ldrls	pc, [pc, r3, lsl #2]
   1a904:	b	1ab58 <lchmod@@Base+0x3d40>
   1a908:	andeq	sl, r1, ip, lsl sl
   1a90c:	andeq	sl, r1, r8, asr fp
   1a910:	andeq	sl, r1, ip, lsl sl
   1a914:	andeq	sl, r1, r8, asr fp
   1a918:	andeq	sl, r1, r8, asr fp
   1a91c:	andeq	sl, r1, r8, asr fp
   1a920:	andeq	sl, r1, ip, lsl sl
   1a924:	andeq	sl, r1, r8, asr fp
   1a928:	andeq	sl, r1, ip, lsl sl
   1a92c:	andeq	sl, r1, r8, asr fp
   1a930:	andeq	sl, r1, r8, asr fp
   1a934:	andeq	sl, r1, ip, lsl sl
   1a938:	andeq	sl, r1, r8, asr fp
   1a93c:	andeq	sl, r1, r8, asr fp
   1a940:	andeq	sl, r1, r8, asr fp
   1a944:	andeq	sl, r1, ip, lsl sl
   1a948:	andeq	sl, r1, r8, asr fp
   1a94c:	andeq	sl, r1, r8, asr fp
   1a950:	andeq	sl, r1, r8, asr fp
   1a954:	andeq	sl, r1, r8, asr fp
   1a958:	andeq	sl, r1, ip, lsl sl
   1a95c:	andeq	sl, r1, ip, lsl sl
   1a960:	andeq	sl, r1, r8, asr fp
   1a964:	andeq	sl, r1, r8, asr fp
   1a968:	andeq	sl, r1, r8, asr fp
   1a96c:	andeq	sl, r1, r8, asr fp
   1a970:	andeq	sl, r1, r8, asr fp
   1a974:	andeq	sl, r1, r8, asr fp
   1a978:	andeq	sl, r1, r8, asr fp
   1a97c:	andeq	sl, r1, r8, asr fp
   1a980:	andeq	sl, r1, r8, asr fp
   1a984:	andeq	sl, r1, r8, asr fp
   1a988:	andeq	sl, r1, r8, asr fp
   1a98c:	andeq	sl, r1, r8, asr fp
   1a990:	andeq	sl, r1, ip, lsl sl
   1a994:	andeq	sl, r1, r8, asr fp
   1a998:	andeq	sl, r1, r8, asr fp
   1a99c:	andeq	sl, r1, r8, asr fp
   1a9a0:	andeq	sl, r1, ip, lsl sl
   1a9a4:	andeq	sl, r1, r8, asr fp
   1a9a8:	andeq	sl, r1, ip, lsl sl
   1a9ac:	andeq	sl, r1, r8, asr fp
   1a9b0:	andeq	sl, r1, r8, asr fp
   1a9b4:	andeq	sl, r1, r8, asr fp
   1a9b8:	andeq	sl, r1, r8, asr fp
   1a9bc:	andeq	sl, r1, r8, asr fp
   1a9c0:	andeq	sl, r1, r8, asr fp
   1a9c4:	andeq	sl, r1, ip, lsl sl
   1a9c8:	mov	r4, #0
   1a9cc:	ldr	r3, [sp, #48]	; 0x30
   1a9d0:	cmp	r3, #0
   1a9d4:	strdeq	r0, [r9]
   1a9d8:	beq	1a9f0 <lchmod@@Base+0x3bd8>
   1a9dc:	ldrb	r5, [r7]
   1a9e0:	cmp	r5, #0
   1a9e4:	bne	1a8e4 <lchmod@@Base+0x3acc>
   1a9e8:	ldrd	r2, [sp]
   1a9ec:	strd	r2, [r9]
   1a9f0:	mov	r0, r4
   1a9f4:	add	sp, sp, #20
   1a9f8:	ldrd	r4, [sp]
   1a9fc:	ldrd	r6, [sp, #8]
   1aa00:	ldrd	r8, [sp, #16]
   1aa04:	add	sp, sp, #24
   1aa08:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa0c:	ldrd	r2, [sp]
   1aa10:	strd	r2, [r9]
   1aa14:	orr	r4, r4, #2
   1aa18:	b	1a9f0 <lchmod@@Base+0x3bd8>
   1aa1c:	mov	r1, #48	; 0x30
   1aa20:	ldr	r0, [sp, #48]	; 0x30
   1aa24:	bl	116f8 <strchr@plt>
   1aa28:	cmp	r0, #0
   1aa2c:	beq	1ab64 <lchmod@@Base+0x3d4c>
   1aa30:	ldrb	r3, [r7, #1]
   1aa34:	cmp	r3, #68	; 0x44
   1aa38:	beq	1ab70 <lchmod@@Base+0x3d58>
   1aa3c:	cmp	r3, #105	; 0x69
   1aa40:	beq	1ab40 <lchmod@@Base+0x3d28>
   1aa44:	cmp	r3, #66	; 0x42
   1aa48:	moveq	r7, #2
   1aa4c:	movne	r7, #1
   1aa50:	moveq	r1, #1000	; 0x3e8
   1aa54:	movne	r1, #1024	; 0x400
   1aa58:	sub	r5, r5, #66	; 0x42
   1aa5c:	cmp	r5, #53	; 0x35
   1aa60:	ldrls	pc, [pc, r5, lsl #2]
   1aa64:	b	1acd4 <lchmod@@Base+0x3ebc>
   1aa68:	andeq	sl, r1, r4, asr #23
   1aa6c:	ldrdeq	sl, [r1], -r4
   1aa70:	ldrdeq	sl, [r1], -r4
   1aa74:	andeq	sl, r1, ip, lsl #24
   1aa78:	ldrdeq	sl, [r1], -r4
   1aa7c:	andeq	sl, r1, ip, lsl ip
   1aa80:	ldrdeq	sl, [r1], -r4
   1aa84:	ldrdeq	sl, [r1], -r4
   1aa88:	ldrdeq	sl, [r1], -r4
   1aa8c:	andeq	sl, r1, ip, lsr #24
   1aa90:	ldrdeq	sl, [r1], -r4
   1aa94:	andeq	sl, r1, ip, lsr ip
   1aa98:	ldrdeq	sl, [r1], -r4
   1aa9c:	ldrdeq	sl, [r1], -r4
   1aaa0:	andeq	sl, r1, ip, asr #24
   1aaa4:	ldrdeq	sl, [r1], -r4
   1aaa8:	ldrdeq	sl, [r1], -r4
   1aaac:	ldrdeq	sl, [r1], -r4
   1aab0:	andeq	sl, r1, ip, asr ip
   1aab4:	ldrdeq	sl, [r1], -r4
   1aab8:	ldrdeq	sl, [r1], -r4
   1aabc:	ldrdeq	sl, [r1], -r4
   1aac0:	ldrdeq	sl, [r1], -r4
   1aac4:			; <UNDEFINED> instruction: 0x0001acb4
   1aac8:	andeq	sl, r1, r4, asr #25
   1aacc:	ldrdeq	sl, [r1], -r4
   1aad0:	ldrdeq	sl, [r1], -r4
   1aad4:	ldrdeq	sl, [r1], -r4
   1aad8:	ldrdeq	sl, [r1], -r4
   1aadc:	ldrdeq	sl, [r1], -r4
   1aae0:	ldrdeq	sl, [r1], -r4
   1aae4:	ldrdeq	sl, [r1], -r4
   1aae8:	andeq	sl, r1, ip, ror fp
   1aaec:	andeq	sl, r1, r4, ror #25
   1aaf0:	ldrdeq	sl, [r1], -r4
   1aaf4:	ldrdeq	sl, [r1], -r4
   1aaf8:	ldrdeq	sl, [r1], -r4
   1aafc:	andeq	sl, r1, ip, lsl ip
   1ab00:	ldrdeq	sl, [r1], -r4
   1ab04:	ldrdeq	sl, [r1], -r4
   1ab08:	ldrdeq	sl, [r1], -r4
   1ab0c:	andeq	sl, r1, ip, lsr #24
   1ab10:	ldrdeq	sl, [r1], -r4
   1ab14:	andeq	sl, r1, ip, lsr ip
   1ab18:	ldrdeq	sl, [r1], -r4
   1ab1c:	ldrdeq	sl, [r1], -r4
   1ab20:	ldrdeq	sl, [r1], -r4
   1ab24:	ldrdeq	sl, [r1], -r4
   1ab28:	ldrdeq	sl, [r1], -r4
   1ab2c:	ldrdeq	sl, [r1], -r4
   1ab30:	andeq	sl, r1, ip, asr ip
   1ab34:	ldrdeq	sl, [r1], -r4
   1ab38:	ldrdeq	sl, [r1], -r4
   1ab3c:	andeq	sl, r1, ip, ror #24
   1ab40:	ldrb	r3, [r7, #2]
   1ab44:	cmp	r3, #66	; 0x42
   1ab48:	movne	r7, #1
   1ab4c:	moveq	r7, #3
   1ab50:	mov	r1, #1024	; 0x400
   1ab54:	b	1aa58 <lchmod@@Base+0x3c40>
   1ab58:	mov	r7, #1
   1ab5c:	mov	r1, #1024	; 0x400
   1ab60:	b	1aa58 <lchmod@@Base+0x3c40>
   1ab64:	mov	r7, #1
   1ab68:	mov	r1, #1024	; 0x400
   1ab6c:	b	1aa58 <lchmod@@Base+0x3c40>
   1ab70:	mov	r7, #2
   1ab74:	mov	r1, #1000	; 0x3e8
   1ab78:	b	1aa58 <lchmod@@Base+0x3c40>
   1ab7c:	ldr	r3, [sp]
   1ab80:	ldr	ip, [sp, #4]
   1ab84:	lsl	r2, ip, #9
   1ab88:	orr	r2, r2, r3, lsr #23
   1ab8c:	lsl	r3, r3, #9
   1ab90:	mov	r0, #0
   1ab94:	mov	r1, r0
   1ab98:	lsr	r0, ip, #23
   1ab9c:	orrs	r1, r0, r1
   1aba0:	streq	r3, [sp]
   1aba4:	streq	r2, [sp, #4]
   1aba8:	moveq	r0, #0
   1abac:	beq	1ace8 <lchmod@@Base+0x3ed0>
   1abb0:	mvn	r2, #0
   1abb4:	mvn	r3, #0
   1abb8:	strd	r2, [sp]
   1abbc:	mov	r0, #1
   1abc0:	b	1ace8 <lchmod@@Base+0x3ed0>
   1abc4:	ldr	r3, [sp]
   1abc8:	ldr	ip, [sp, #4]
   1abcc:	lsl	r2, ip, #10
   1abd0:	orr	r2, r2, r3, lsr #22
   1abd4:	lsl	r3, r3, #10
   1abd8:	mov	r0, #0
   1abdc:	mov	r1, r0
   1abe0:	lsr	r0, ip, #22
   1abe4:	orrs	r1, r0, r1
   1abe8:	streq	r3, [sp]
   1abec:	streq	r2, [sp, #4]
   1abf0:	moveq	r0, #0
   1abf4:	beq	1ace8 <lchmod@@Base+0x3ed0>
   1abf8:	mvn	r2, #0
   1abfc:	mvn	r3, #0
   1ac00:	strd	r2, [sp]
   1ac04:	mov	r0, #1
   1ac08:	b	1ace8 <lchmod@@Base+0x3ed0>
   1ac0c:	mov	r2, #6
   1ac10:	mov	r0, sp
   1ac14:	bl	1a6a4 <lchmod@@Base+0x388c>
   1ac18:	b	1ace8 <lchmod@@Base+0x3ed0>
   1ac1c:	mov	r2, #3
   1ac20:	mov	r0, sp
   1ac24:	bl	1a6a4 <lchmod@@Base+0x388c>
   1ac28:	b	1ace8 <lchmod@@Base+0x3ed0>
   1ac2c:	mov	r2, #1
   1ac30:	mov	r0, sp
   1ac34:	bl	1a6a4 <lchmod@@Base+0x388c>
   1ac38:	b	1ace8 <lchmod@@Base+0x3ed0>
   1ac3c:	mov	r2, #2
   1ac40:	mov	r0, sp
   1ac44:	bl	1a6a4 <lchmod@@Base+0x388c>
   1ac48:	b	1ace8 <lchmod@@Base+0x3ed0>
   1ac4c:	mov	r2, #5
   1ac50:	mov	r0, sp
   1ac54:	bl	1a6a4 <lchmod@@Base+0x388c>
   1ac58:	b	1ace8 <lchmod@@Base+0x3ed0>
   1ac5c:	mov	r2, #4
   1ac60:	mov	r0, sp
   1ac64:	bl	1a6a4 <lchmod@@Base+0x388c>
   1ac68:	b	1ace8 <lchmod@@Base+0x3ed0>
   1ac6c:	ldr	r3, [sp]
   1ac70:	ldr	r2, [sp, #4]
   1ac74:	adds	r3, r3, r3
   1ac78:	adc	r2, r2, r2
   1ac7c:	mov	r1, #0
   1ac80:	mov	r0, r1
   1ac84:	ldr	r1, [sp, #4]
   1ac88:	lsr	r1, r1, #31
   1ac8c:	orrs	r1, r1, r0
   1ac90:	streq	r3, [sp]
   1ac94:	streq	r2, [sp, #4]
   1ac98:	moveq	r0, #0
   1ac9c:	beq	1ace8 <lchmod@@Base+0x3ed0>
   1aca0:	mvn	r2, #0
   1aca4:	mvn	r3, #0
   1aca8:	strd	r2, [sp]
   1acac:	mov	r0, #1
   1acb0:	b	1ace8 <lchmod@@Base+0x3ed0>
   1acb4:	mov	r2, #8
   1acb8:	mov	r0, sp
   1acbc:	bl	1a6a4 <lchmod@@Base+0x388c>
   1acc0:	b	1ace8 <lchmod@@Base+0x3ed0>
   1acc4:	mov	r2, #7
   1acc8:	mov	r0, sp
   1accc:	bl	1a6a4 <lchmod@@Base+0x388c>
   1acd0:	b	1ace8 <lchmod@@Base+0x3ed0>
   1acd4:	ldrd	r2, [sp]
   1acd8:	strd	r2, [r9]
   1acdc:	orr	r4, r4, #2
   1ace0:	b	1a9f0 <lchmod@@Base+0x3bd8>
   1ace4:	mov	r0, #0
   1ace8:	orr	r4, r4, r0
   1acec:	ldr	r3, [r6]
   1acf0:	add	r2, r3, r7
   1acf4:	str	r2, [r6]
   1acf8:	ldrb	r3, [r3, r7]
   1acfc:	cmp	r3, #0
   1ad00:	orrne	r4, r4, #2
   1ad04:	b	1a9e8 <lchmod@@Base+0x3bd0>
   1ad08:	mov	r4, #4
   1ad0c:	b	1a9f0 <lchmod@@Base+0x3bd8>
   1ad10:	mov	r4, #4
   1ad14:	b	1a9f0 <lchmod@@Base+0x3bd8>
   1ad18:	strd	r4, [sp, #-16]!
   1ad1c:	str	r6, [sp, #8]
   1ad20:	str	lr, [sp, #12]
   1ad24:	cmp	r1, #0
   1ad28:	cmpne	r0, #0
   1ad2c:	beq	1ad68 <lchmod@@Base+0x3f50>
   1ad30:	mov	r2, r0
   1ad34:	mov	r3, r1
   1ad38:	umull	r4, r5, r0, r1
   1ad3c:	adds	r1, r5, #0
   1ad40:	movne	r1, #1
   1ad44:	cmp	r4, #0
   1ad48:	movlt	r1, #1
   1ad4c:	cmp	r1, #0
   1ad50:	beq	1ad70 <lchmod@@Base+0x3f58>
   1ad54:	bl	1171c <__errno_location@plt>
   1ad58:	mov	r3, #12
   1ad5c:	str	r3, [r0]
   1ad60:	mov	r0, #0
   1ad64:	b	1ad7c <lchmod@@Base+0x3f64>
   1ad68:	mov	r3, #1
   1ad6c:	mov	r2, r3
   1ad70:	mov	r1, r3
   1ad74:	mov	r0, r2
   1ad78:	bl	114a0 <calloc@plt>
   1ad7c:	ldrd	r4, [sp]
   1ad80:	ldr	r6, [sp, #8]
   1ad84:	add	sp, sp, #12
   1ad88:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad8c:	str	r4, [sp, #-8]!
   1ad90:	str	lr, [sp, #4]
   1ad94:	cmp	r0, #0
   1ad98:	beq	1adb4 <lchmod@@Base+0x3f9c>
   1ad9c:	bge	1adb8 <lchmod@@Base+0x3fa0>
   1ada0:	bl	1171c <__errno_location@plt>
   1ada4:	mov	r3, #12
   1ada8:	str	r3, [r0]
   1adac:	mov	r0, #0
   1adb0:	b	1adbc <lchmod@@Base+0x3fa4>
   1adb4:	mov	r0, #1
   1adb8:	bl	1165c <malloc@plt>
   1adbc:	ldr	r4, [sp]
   1adc0:	add	sp, sp, #4
   1adc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adc8:	str	r4, [sp, #-8]!
   1adcc:	str	lr, [sp, #4]
   1add0:	cmp	r0, #0
   1add4:	beq	1adf8 <lchmod@@Base+0x3fe0>
   1add8:	cmp	r1, #0
   1addc:	beq	1ae04 <lchmod@@Base+0x3fec>
   1ade0:	cmp	r1, #0
   1ade4:	blt	1ae10 <lchmod@@Base+0x3ff8>
   1ade8:	bl	11590 <realloc@plt>
   1adec:	ldr	r4, [sp]
   1adf0:	add	sp, sp, #4
   1adf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf8:	mov	r0, r1
   1adfc:	bl	1ad8c <lchmod@@Base+0x3f74>
   1ae00:	b	1adec <lchmod@@Base+0x3fd4>
   1ae04:	bl	13780 <__assert_fail@plt+0x1eb4>
   1ae08:	mov	r0, #0
   1ae0c:	b	1adec <lchmod@@Base+0x3fd4>
   1ae10:	bl	1171c <__errno_location@plt>
   1ae14:	mov	r3, #12
   1ae18:	str	r3, [r0]
   1ae1c:	mov	r0, #0
   1ae20:	b	1adec <lchmod@@Base+0x3fd4>
   1ae24:	ldrb	r3, [r0]
   1ae28:	cmp	r3, #47	; 0x2f
   1ae2c:	bne	1ae3c <lchmod@@Base+0x4024>
   1ae30:	ldrb	r3, [r0, #1]!
   1ae34:	cmp	r3, #47	; 0x2f
   1ae38:	beq	1ae30 <lchmod@@Base+0x4018>
   1ae3c:	ldrb	r2, [r0]
   1ae40:	cmp	r2, #0
   1ae44:	bxeq	lr
   1ae48:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae4c:	mov	r1, r0
   1ae50:	mov	r3, #0
   1ae54:	mov	lr, #1
   1ae58:	mov	ip, r3
   1ae5c:	b	1ae78 <lchmod@@Base+0x4060>
   1ae60:	cmp	r3, #0
   1ae64:	movne	r0, r1
   1ae68:	movne	r3, ip
   1ae6c:	ldrb	r2, [r1, #1]!
   1ae70:	cmp	r2, #0
   1ae74:	beq	1ae88 <lchmod@@Base+0x4070>
   1ae78:	cmp	r2, #47	; 0x2f
   1ae7c:	moveq	r3, lr
   1ae80:	bne	1ae60 <lchmod@@Base+0x4048>
   1ae84:	b	1ae6c <lchmod@@Base+0x4054>
   1ae88:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae8c:	str	r4, [sp, #-8]!
   1ae90:	str	lr, [sp, #4]
   1ae94:	mov	r4, r0
   1ae98:	bl	116e0 <strlen@plt>
   1ae9c:	cmp	r0, #1
   1aea0:	bls	1aec0 <lchmod@@Base+0x40a8>
   1aea4:	add	r3, r4, r0
   1aea8:	ldrb	r3, [r3, #-1]
   1aeac:	cmp	r3, #47	; 0x2f
   1aeb0:	subeq	r0, r0, #2
   1aeb4:	addeq	r3, r4, r0
   1aeb8:	rsbeq	r1, r4, #1
   1aebc:	beq	1aecc <lchmod@@Base+0x40b4>
   1aec0:	ldr	r4, [sp]
   1aec4:	add	sp, sp, #4
   1aec8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aecc:	add	r0, r1, r3
   1aed0:	cmp	r3, r4
   1aed4:	beq	1aec0 <lchmod@@Base+0x40a8>
   1aed8:	ldrb	r2, [r3], #-1
   1aedc:	cmp	r2, #47	; 0x2f
   1aee0:	bne	1aec0 <lchmod@@Base+0x40a8>
   1aee4:	b	1aecc <lchmod@@Base+0x40b4>
   1aee8:	strd	r4, [sp, #-16]!
   1aeec:	str	r6, [sp, #8]
   1aef0:	str	lr, [sp, #12]
   1aef4:	mov	r5, r0
   1aef8:	bl	11620 <__fpending@plt>
   1aefc:	mov	r6, r0
   1af00:	ldr	r4, [r5]
   1af04:	and	r4, r4, #32
   1af08:	mov	r0, r5
   1af0c:	bl	1b080 <lchmod@@Base+0x4268>
   1af10:	cmp	r4, #0
   1af14:	bne	1af48 <lchmod@@Base+0x4130>
   1af18:	cmp	r0, #0
   1af1c:	beq	1af38 <lchmod@@Base+0x4120>
   1af20:	cmp	r6, #0
   1af24:	bne	1af64 <lchmod@@Base+0x414c>
   1af28:	bl	1171c <__errno_location@plt>
   1af2c:	ldr	r0, [r0]
   1af30:	subs	r0, r0, #9
   1af34:	mvnne	r0, #0
   1af38:	ldrd	r4, [sp]
   1af3c:	ldr	r6, [sp, #8]
   1af40:	add	sp, sp, #12
   1af44:	pop	{pc}		; (ldr pc, [sp], #4)
   1af48:	cmp	r0, #0
   1af4c:	bne	1af6c <lchmod@@Base+0x4154>
   1af50:	bl	1171c <__errno_location@plt>
   1af54:	mov	r3, #0
   1af58:	str	r3, [r0]
   1af5c:	mvn	r0, #0
   1af60:	b	1af38 <lchmod@@Base+0x4120>
   1af64:	mvn	r0, #0
   1af68:	b	1af38 <lchmod@@Base+0x4120>
   1af6c:	mvn	r0, #0
   1af70:	b	1af38 <lchmod@@Base+0x4120>
   1af74:	mov	r2, #0
   1af78:	mov	r3, #0
   1af7c:	strd	r2, [r0, #16]
   1af80:	movw	r3, #62998	; 0xf616
   1af84:	movt	r3, #149	; 0x95
   1af88:	str	r3, [r0, #24]
   1af8c:	bx	lr
   1af90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1af94:	strd	r6, [sp, #8]
   1af98:	strd	r8, [sp, #16]
   1af9c:	str	sl, [sp, #24]
   1afa0:	str	lr, [sp, #28]
   1afa4:	movw	r3, #62998	; 0xf616
   1afa8:	movt	r3, #149	; 0x95
   1afac:	ldr	r2, [r0, #24]
   1afb0:	cmp	r2, r3
   1afb4:	bne	1b010 <lchmod@@Base+0x41f8>
   1afb8:	ldrd	r6, [r0, #16]
   1afbc:	orrs	r3, r6, r7
   1afc0:	beq	1b05c <lchmod@@Base+0x4244>
   1afc4:	ldrd	r4, [r1, #96]	; 0x60
   1afc8:	ldrd	r2, [r0]
   1afcc:	cmp	r5, r3
   1afd0:	cmpeq	r4, r2
   1afd4:	beq	1b030 <lchmod@@Base+0x4218>
   1afd8:	adds	r8, r6, #1
   1afdc:	adc	r9, r7, #0
   1afe0:	strd	r8, [r0, #16]
   1afe4:	and	r2, r6, r8
   1afe8:	and	r3, r7, r9
   1afec:	orrs	r3, r2, r3
   1aff0:	movne	r0, #0
   1aff4:	beq	1b04c <lchmod@@Base+0x4234>
   1aff8:	ldrd	r4, [sp]
   1affc:	ldrd	r6, [sp, #8]
   1b000:	ldrd	r8, [sp, #16]
   1b004:	ldr	sl, [sp, #24]
   1b008:	add	sp, sp, #28
   1b00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b010:	movw	r3, #51148	; 0xc7cc
   1b014:	movt	r3, #1
   1b018:	mov	r2, #60	; 0x3c
   1b01c:	movw	r1, #51160	; 0xc7d8
   1b020:	movt	r1, #1
   1b024:	movw	r0, #51180	; 0xc7ec
   1b028:	movt	r0, #1
   1b02c:	bl	118cc <__assert_fail@plt>
   1b030:	ldrd	r4, [r1]
   1b034:	ldrd	r2, [r0, #8]
   1b038:	cmp	r5, r3
   1b03c:	cmpeq	r4, r2
   1b040:	moveq	r0, #1
   1b044:	bne	1afd8 <lchmod@@Base+0x41c0>
   1b048:	b	1aff8 <lchmod@@Base+0x41e0>
   1b04c:	orrs	r3, r8, r9
   1b050:	moveq	r0, #1
   1b054:	beq	1aff8 <lchmod@@Base+0x41e0>
   1b058:	b	1b068 <lchmod@@Base+0x4250>
   1b05c:	mov	r2, #1
   1b060:	mov	r3, #0
   1b064:	strd	r2, [r0, #16]
   1b068:	ldrd	r2, [r1]
   1b06c:	strd	r2, [r0, #8]
   1b070:	ldrd	r2, [r1, #96]	; 0x60
   1b074:	strd	r2, [r0]
   1b078:	mov	r0, #0
   1b07c:	b	1aff8 <lchmod@@Base+0x41e0>
   1b080:	strd	r4, [sp, #-16]!
   1b084:	str	r6, [sp, #8]
   1b088:	str	lr, [sp, #12]
   1b08c:	sub	sp, sp, #8
   1b090:	mov	r4, r0
   1b094:	bl	11758 <fileno@plt>
   1b098:	cmp	r0, #0
   1b09c:	blt	1b114 <lchmod@@Base+0x42fc>
   1b0a0:	mov	r0, r4
   1b0a4:	bl	11674 <__freading@plt>
   1b0a8:	cmp	r0, #0
   1b0ac:	beq	1b0e0 <lchmod@@Base+0x42c8>
   1b0b0:	mov	r0, r4
   1b0b4:	bl	11758 <fileno@plt>
   1b0b8:	mov	r3, #1
   1b0bc:	str	r3, [sp]
   1b0c0:	mov	r2, #0
   1b0c4:	mov	r3, #0
   1b0c8:	bl	115fc <lseek64@plt>
   1b0cc:	mvn	r2, #0
   1b0d0:	mvn	r3, #0
   1b0d4:	cmp	r1, r3
   1b0d8:	cmpeq	r0, r2
   1b0dc:	beq	1b120 <lchmod@@Base+0x4308>
   1b0e0:	mov	r0, r4
   1b0e4:	bl	1b3e4 <lchmod@@Base+0x45cc>
   1b0e8:	cmp	r0, #0
   1b0ec:	beq	1b120 <lchmod@@Base+0x4308>
   1b0f0:	bl	1171c <__errno_location@plt>
   1b0f4:	mov	r5, r0
   1b0f8:	ldr	r6, [r0]
   1b0fc:	mov	r0, r4
   1b100:	bl	11770 <fclose@plt>
   1b104:	cmp	r6, #0
   1b108:	strne	r6, [r5]
   1b10c:	mvnne	r0, #0
   1b110:	b	1b128 <lchmod@@Base+0x4310>
   1b114:	mov	r0, r4
   1b118:	bl	11770 <fclose@plt>
   1b11c:	b	1b128 <lchmod@@Base+0x4310>
   1b120:	mov	r0, r4
   1b124:	bl	11770 <fclose@plt>
   1b128:	add	sp, sp, #8
   1b12c:	ldrd	r4, [sp]
   1b130:	ldr	r6, [sp, #8]
   1b134:	add	sp, sp, #12
   1b138:	pop	{pc}		; (ldr pc, [sp], #4)
   1b13c:	push	{r1, r2, r3}
   1b140:	strd	r4, [sp, #-16]!
   1b144:	str	r6, [sp, #8]
   1b148:	str	lr, [sp, #12]
   1b14c:	sub	sp, sp, #12
   1b150:	mov	r5, r0
   1b154:	ldr	r1, [sp, #28]
   1b158:	add	r3, sp, #32
   1b15c:	str	r3, [sp, #4]
   1b160:	cmp	r1, #0
   1b164:	beq	1b1ac <lchmod@@Base+0x4394>
   1b168:	movw	r3, #1030	; 0x406
   1b16c:	cmp	r1, r3
   1b170:	beq	1b1e8 <lchmod@@Base+0x43d0>
   1b174:	cmp	r1, #11
   1b178:	beq	1b398 <lchmod@@Base+0x4580>
   1b17c:	bgt	1b324 <lchmod@@Base+0x450c>
   1b180:	cmp	r1, #3
   1b184:	beq	1b398 <lchmod@@Base+0x4580>
   1b188:	ble	1b2e4 <lchmod@@Base+0x44cc>
   1b18c:	cmp	r1, #8
   1b190:	beq	1b304 <lchmod@@Base+0x44ec>
   1b194:	ble	1b2fc <lchmod@@Base+0x44e4>
   1b198:	cmp	r1, #9
   1b19c:	beq	1b398 <lchmod@@Base+0x4580>
   1b1a0:	cmp	r1, #10
   1b1a4:	bne	1b35c <lchmod@@Base+0x4544>
   1b1a8:	b	1b304 <lchmod@@Base+0x44ec>
   1b1ac:	ldr	r3, [sp, #4]
   1b1b0:	add	r2, r3, #4
   1b1b4:	str	r2, [sp, #4]
   1b1b8:	ldr	r2, [r3]
   1b1bc:	mov	r1, #0
   1b1c0:	bl	11788 <fcntl64@plt>
   1b1c4:	mov	r4, r0
   1b1c8:	mov	r0, r4
   1b1cc:	add	sp, sp, #12
   1b1d0:	ldrd	r4, [sp]
   1b1d4:	ldr	r6, [sp, #8]
   1b1d8:	ldr	lr, [sp, #12]
   1b1dc:	add	sp, sp, #16
   1b1e0:	add	sp, sp, #12
   1b1e4:	bx	lr
   1b1e8:	ldr	r3, [sp, #4]
   1b1ec:	add	r2, r3, #4
   1b1f0:	str	r2, [sp, #4]
   1b1f4:	ldr	r6, [r3]
   1b1f8:	movw	r3, #54060	; 0xd32c
   1b1fc:	movt	r3, #2
   1b200:	ldr	r3, [r3]
   1b204:	cmp	r3, #0
   1b208:	blt	1b270 <lchmod@@Base+0x4458>
   1b20c:	mov	r2, r6
   1b210:	movw	r1, #1030	; 0x406
   1b214:	bl	11788 <fcntl64@plt>
   1b218:	subs	r4, r0, #0
   1b21c:	blt	1b234 <lchmod@@Base+0x441c>
   1b220:	movw	r3, #54060	; 0xd32c
   1b224:	movt	r3, #2
   1b228:	mov	r2, #1
   1b22c:	str	r2, [r3]
   1b230:	b	1b1c8 <lchmod@@Base+0x43b0>
   1b234:	bl	1171c <__errno_location@plt>
   1b238:	ldr	r3, [r0]
   1b23c:	cmp	r3, #22
   1b240:	bne	1b220 <lchmod@@Base+0x4408>
   1b244:	mov	r2, r6
   1b248:	mov	r1, #0
   1b24c:	mov	r0, r5
   1b250:	bl	11788 <fcntl64@plt>
   1b254:	subs	r4, r0, #0
   1b258:	blt	1b1c8 <lchmod@@Base+0x43b0>
   1b25c:	movw	r3, #54060	; 0xd32c
   1b260:	movt	r3, #2
   1b264:	mvn	r2, #0
   1b268:	str	r2, [r3]
   1b26c:	b	1b298 <lchmod@@Base+0x4480>
   1b270:	mov	r2, r6
   1b274:	mov	r1, #0
   1b278:	bl	11788 <fcntl64@plt>
   1b27c:	subs	r4, r0, #0
   1b280:	blt	1b1c8 <lchmod@@Base+0x43b0>
   1b284:	movw	r3, #54060	; 0xd32c
   1b288:	movt	r3, #2
   1b28c:	ldr	r3, [r3]
   1b290:	cmn	r3, #1
   1b294:	bne	1b1c8 <lchmod@@Base+0x43b0>
   1b298:	mov	r1, #1
   1b29c:	mov	r0, r4
   1b2a0:	bl	11788 <fcntl64@plt>
   1b2a4:	subs	r2, r0, #0
   1b2a8:	blt	1b2c4 <lchmod@@Base+0x44ac>
   1b2ac:	orr	r2, r2, #1
   1b2b0:	mov	r1, #2
   1b2b4:	mov	r0, r4
   1b2b8:	bl	11788 <fcntl64@plt>
   1b2bc:	cmn	r0, #1
   1b2c0:	bne	1b1c8 <lchmod@@Base+0x43b0>
   1b2c4:	bl	1171c <__errno_location@plt>
   1b2c8:	mov	r5, r0
   1b2cc:	ldr	r6, [r0]
   1b2d0:	mov	r0, r4
   1b2d4:	bl	11884 <close@plt>
   1b2d8:	str	r6, [r5]
   1b2dc:	mvn	r4, #0
   1b2e0:	b	1b1c8 <lchmod@@Base+0x43b0>
   1b2e4:	cmp	r1, #1
   1b2e8:	beq	1b398 <lchmod@@Base+0x4580>
   1b2ec:	bgt	1b304 <lchmod@@Base+0x44ec>
   1b2f0:	cmp	r1, #0
   1b2f4:	bne	1b35c <lchmod@@Base+0x4544>
   1b2f8:	b	1b304 <lchmod@@Base+0x44ec>
   1b2fc:	cmp	r1, #4
   1b300:	bne	1b35c <lchmod@@Base+0x4544>
   1b304:	ldr	r3, [sp, #4]
   1b308:	add	r2, r3, #4
   1b30c:	str	r2, [sp, #4]
   1b310:	ldr	r2, [r3]
   1b314:	mov	r0, r5
   1b318:	bl	11788 <fcntl64@plt>
   1b31c:	mov	r4, r0
   1b320:	b	1b1c8 <lchmod@@Base+0x43b0>
   1b324:	movw	r3, #1031	; 0x407
   1b328:	cmp	r1, r3
   1b32c:	bgt	1b37c <lchmod@@Base+0x4564>
   1b330:	movw	r3, #1030	; 0x406
   1b334:	cmp	r1, r3
   1b338:	bge	1b304 <lchmod@@Base+0x44ec>
   1b33c:	movw	r3, #1025	; 0x401
   1b340:	cmp	r1, r3
   1b344:	beq	1b398 <lchmod@@Base+0x4580>
   1b348:	movw	r3, #1026	; 0x402
   1b34c:	cmp	r1, r3
   1b350:	beq	1b304 <lchmod@@Base+0x44ec>
   1b354:	cmp	r1, #1024	; 0x400
   1b358:	beq	1b304 <lchmod@@Base+0x44ec>
   1b35c:	ldr	r3, [sp, #4]
   1b360:	add	r2, r3, #4
   1b364:	str	r2, [sp, #4]
   1b368:	ldr	r2, [r3]
   1b36c:	mov	r0, r5
   1b370:	bl	11788 <fcntl64@plt>
   1b374:	mov	r4, r0
   1b378:	b	1b1c8 <lchmod@@Base+0x43b0>
   1b37c:	movw	r3, #1033	; 0x409
   1b380:	cmp	r1, r3
   1b384:	beq	1b304 <lchmod@@Base+0x44ec>
   1b388:	blt	1b398 <lchmod@@Base+0x4580>
   1b38c:	movw	r3, #1034	; 0x40a
   1b390:	cmp	r1, r3
   1b394:	bne	1b35c <lchmod@@Base+0x4544>
   1b398:	mov	r0, r5
   1b39c:	bl	11788 <fcntl64@plt>
   1b3a0:	mov	r4, r0
   1b3a4:	b	1b1c8 <lchmod@@Base+0x43b0>
   1b3a8:	push	{r1, r2, r3}
   1b3ac:	push	{lr}		; (str lr, [sp, #-4]!)
   1b3b0:	sub	sp, sp, #8
   1b3b4:	ldr	r1, [sp, #12]
   1b3b8:	tst	r1, #64	; 0x40
   1b3bc:	addne	r3, sp, #20
   1b3c0:	strne	r3, [sp, #4]
   1b3c4:	ldrne	r2, [sp, #16]
   1b3c8:	moveq	r2, #0
   1b3cc:	bl	11644 <open64@plt>
   1b3d0:	bl	19b2c <lchmod@@Base+0x2d14>
   1b3d4:	add	sp, sp, #8
   1b3d8:	pop	{lr}		; (ldr lr, [sp], #4)
   1b3dc:	add	sp, sp, #12
   1b3e0:	bx	lr
   1b3e4:	str	r4, [sp, #-8]!
   1b3e8:	str	lr, [sp, #4]
   1b3ec:	sub	sp, sp, #8
   1b3f0:	subs	r4, r0, #0
   1b3f4:	beq	1b408 <lchmod@@Base+0x45f0>
   1b3f8:	mov	r0, r4
   1b3fc:	bl	11674 <__freading@plt>
   1b400:	cmp	r0, #0
   1b404:	bne	1b420 <lchmod@@Base+0x4608>
   1b408:	mov	r0, r4
   1b40c:	bl	114e8 <fflush@plt>
   1b410:	add	sp, sp, #8
   1b414:	ldr	r4, [sp]
   1b418:	add	sp, sp, #4
   1b41c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b420:	ldr	r3, [r4]
   1b424:	tst	r3, #256	; 0x100
   1b428:	bne	1b438 <lchmod@@Base+0x4620>
   1b42c:	mov	r0, r4
   1b430:	bl	114e8 <fflush@plt>
   1b434:	b	1b410 <lchmod@@Base+0x45f8>
   1b438:	mov	r3, #1
   1b43c:	str	r3, [sp]
   1b440:	mov	r2, #0
   1b444:	mov	r3, #0
   1b448:	mov	r0, r4
   1b44c:	bl	1b454 <lchmod@@Base+0x463c>
   1b450:	b	1b42c <lchmod@@Base+0x4614>
   1b454:	str	r4, [sp, #-16]!
   1b458:	strd	r6, [sp, #4]
   1b45c:	str	lr, [sp, #12]
   1b460:	sub	sp, sp, #8
   1b464:	mov	r4, r0
   1b468:	mov	r6, r2
   1b46c:	mov	r7, r3
   1b470:	ldr	r2, [r0, #8]
   1b474:	ldr	r3, [r0, #4]
   1b478:	cmp	r2, r3
   1b47c:	beq	1b4ac <lchmod@@Base+0x4694>
   1b480:	ldr	r3, [sp, #24]
   1b484:	str	r3, [sp]
   1b488:	mov	r2, r6
   1b48c:	mov	r3, r7
   1b490:	mov	r0, r4
   1b494:	bl	1177c <fseeko64@plt>
   1b498:	add	sp, sp, #8
   1b49c:	ldr	r4, [sp]
   1b4a0:	ldrd	r6, [sp, #4]
   1b4a4:	add	sp, sp, #12
   1b4a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4ac:	ldr	r2, [r0, #20]
   1b4b0:	ldr	r3, [r0, #16]
   1b4b4:	cmp	r2, r3
   1b4b8:	bne	1b480 <lchmod@@Base+0x4668>
   1b4bc:	ldr	r3, [r0, #36]	; 0x24
   1b4c0:	cmp	r3, #0
   1b4c4:	bne	1b480 <lchmod@@Base+0x4668>
   1b4c8:	bl	11758 <fileno@plt>
   1b4cc:	ldr	r3, [sp, #24]
   1b4d0:	str	r3, [sp]
   1b4d4:	mov	r2, r6
   1b4d8:	mov	r3, r7
   1b4dc:	bl	115fc <lseek64@plt>
   1b4e0:	mvn	r2, #0
   1b4e4:	mvn	r3, #0
   1b4e8:	cmp	r1, r3
   1b4ec:	cmpeq	r0, r2
   1b4f0:	beq	1b50c <lchmod@@Base+0x46f4>
   1b4f4:	ldr	r3, [r4]
   1b4f8:	bic	r3, r3, #16
   1b4fc:	str	r3, [r4]
   1b500:	strd	r0, [r4, #80]	; 0x50
   1b504:	mov	r0, #0
   1b508:	b	1b498 <lchmod@@Base+0x4680>
   1b50c:	mvn	r0, #0
   1b510:	b	1b498 <lchmod@@Base+0x4680>
   1b514:	ldrb	r3, [r0]
   1b518:	cmp	r3, #0
   1b51c:	beq	1b540 <lchmod@@Base+0x4728>
   1b520:	mov	r2, #0
   1b524:	add	r2, r3, r2, ror #23
   1b528:	ldrb	r3, [r0, #1]!
   1b52c:	cmp	r3, #0
   1b530:	bne	1b524 <lchmod@@Base+0x470c>
   1b534:	udiv	r0, r2, r1
   1b538:	mls	r0, r1, r0, r2
   1b53c:	bx	lr
   1b540:	mov	r2, #0
   1b544:	b	1b534 <lchmod@@Base+0x471c>
   1b548:	str	r4, [sp, #-8]!
   1b54c:	str	lr, [sp, #4]
   1b550:	mov	r0, #14
   1b554:	bl	117b8 <nl_langinfo@plt>
   1b558:	cmp	r0, #0
   1b55c:	beq	1b580 <lchmod@@Base+0x4768>
   1b560:	ldrb	r2, [r0]
   1b564:	movw	r3, #51204	; 0xc804
   1b568:	movt	r3, #1
   1b56c:	cmp	r2, #0
   1b570:	moveq	r0, r3
   1b574:	ldr	r4, [sp]
   1b578:	add	sp, sp, #4
   1b57c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b580:	movw	r0, #51204	; 0xc804
   1b584:	movt	r0, #1
   1b588:	b	1b574 <lchmod@@Base+0x475c>
   1b58c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b590:	strd	r6, [sp, #8]
   1b594:	str	lr, [sp, #16]
   1b598:	sub	sp, sp, #12
   1b59c:	mov	r7, r1
   1b5a0:	mov	r5, r2
   1b5a4:	subs	r6, r0, #0
   1b5a8:	addeq	r6, sp, #4
   1b5ac:	mov	r0, r6
   1b5b0:	bl	1162c <mbrtowc@plt>
   1b5b4:	mov	r4, r0
   1b5b8:	cmp	r5, #0
   1b5bc:	cmnne	r0, #3
   1b5c0:	bhi	1b5dc <lchmod@@Base+0x47c4>
   1b5c4:	mov	r0, r4
   1b5c8:	add	sp, sp, #12
   1b5cc:	ldrd	r4, [sp]
   1b5d0:	ldrd	r6, [sp, #8]
   1b5d4:	add	sp, sp, #16
   1b5d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5dc:	mov	r0, #0
   1b5e0:	bl	1b658 <lchmod@@Base+0x4840>
   1b5e4:	cmp	r0, #0
   1b5e8:	bne	1b5c4 <lchmod@@Base+0x47ac>
   1b5ec:	ldrb	r3, [r7]
   1b5f0:	str	r3, [r6]
   1b5f4:	mov	r4, #1
   1b5f8:	b	1b5c4 <lchmod@@Base+0x47ac>
   1b5fc:	str	r4, [sp, #-8]!
   1b600:	str	lr, [sp, #4]
   1b604:	umull	r2, r3, r1, r2
   1b608:	cmp	r3, #0
   1b60c:	bne	1b624 <lchmod@@Base+0x480c>
   1b610:	mov	r1, r2
   1b614:	bl	1adc8 <lchmod@@Base+0x3fb0>
   1b618:	ldr	r4, [sp]
   1b61c:	add	sp, sp, #4
   1b620:	pop	{pc}		; (ldr pc, [sp], #4)
   1b624:	bl	1171c <__errno_location@plt>
   1b628:	mov	r3, #12
   1b62c:	str	r3, [r0]
   1b630:	mov	r0, #0
   1b634:	b	1b618 <lchmod@@Base+0x4800>
   1b638:	str	r4, [sp, #-8]!
   1b63c:	str	lr, [sp, #4]
   1b640:	mov	r2, #3
   1b644:	mov	r1, #0
   1b648:	bl	1b13c <lchmod@@Base+0x4324>
   1b64c:	ldr	r4, [sp]
   1b650:	add	sp, sp, #4
   1b654:	pop	{pc}		; (ldr pc, [sp], #4)
   1b658:	push	{lr}		; (str lr, [sp, #-4]!)
   1b65c:	sub	sp, sp, #268	; 0x10c
   1b660:	movw	r2, #257	; 0x101
   1b664:	add	r1, sp, #4
   1b668:	bl	1b6b4 <lchmod@@Base+0x489c>
   1b66c:	cmp	r0, #0
   1b670:	movne	r0, #0
   1b674:	bne	1b6ac <lchmod@@Base+0x4894>
   1b678:	movw	r1, #51212	; 0xc80c
   1b67c:	movt	r1, #1
   1b680:	add	r0, sp, #4
   1b684:	bl	114d0 <strcmp@plt>
   1b688:	cmp	r0, #0
   1b68c:	beq	1b6a8 <lchmod@@Base+0x4890>
   1b690:	movw	r1, #51216	; 0xc810
   1b694:	movt	r1, #1
   1b698:	add	r0, sp, #4
   1b69c:	bl	114d0 <strcmp@plt>
   1b6a0:	adds	r0, r0, #0
   1b6a4:	movne	r0, #1
   1b6a8:	and	r0, r0, #1
   1b6ac:	add	sp, sp, #268	; 0x10c
   1b6b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6b4:	strd	r4, [sp, #-16]!
   1b6b8:	str	r6, [sp, #8]
   1b6bc:	str	lr, [sp, #12]
   1b6c0:	mov	r6, r1
   1b6c4:	mov	r4, r2
   1b6c8:	mov	r1, #0
   1b6cc:	bl	11794 <setlocale@plt>
   1b6d0:	subs	r5, r0, #0
   1b6d4:	beq	1b718 <lchmod@@Base+0x4900>
   1b6d8:	mov	r0, r5
   1b6dc:	bl	116e0 <strlen@plt>
   1b6e0:	cmp	r4, r0
   1b6e4:	bhi	1b734 <lchmod@@Base+0x491c>
   1b6e8:	cmp	r4, #0
   1b6ec:	moveq	r0, #34	; 0x22
   1b6f0:	beq	1b748 <lchmod@@Base+0x4930>
   1b6f4:	sub	r4, r4, #1
   1b6f8:	mov	r2, r4
   1b6fc:	mov	r1, r5
   1b700:	mov	r0, r6
   1b704:	bl	11530 <memcpy@plt>
   1b708:	mov	r3, #0
   1b70c:	strb	r3, [r6, r4]
   1b710:	mov	r0, #34	; 0x22
   1b714:	b	1b748 <lchmod@@Base+0x4930>
   1b718:	cmp	r4, #0
   1b71c:	moveq	r0, #22
   1b720:	beq	1b748 <lchmod@@Base+0x4930>
   1b724:	mov	r3, #0
   1b728:	strb	r3, [r6]
   1b72c:	mov	r0, #22
   1b730:	b	1b748 <lchmod@@Base+0x4930>
   1b734:	add	r2, r0, #1
   1b738:	mov	r1, r5
   1b73c:	mov	r0, r6
   1b740:	bl	11530 <memcpy@plt>
   1b744:	mov	r0, #0
   1b748:	ldrd	r4, [sp]
   1b74c:	ldr	r6, [sp, #8]
   1b750:	add	sp, sp, #12
   1b754:	pop	{pc}		; (ldr pc, [sp], #4)
   1b758:	str	r4, [sp, #-8]!
   1b75c:	str	lr, [sp, #4]
   1b760:	mov	r1, #0
   1b764:	bl	11794 <setlocale@plt>
   1b768:	ldr	r4, [sp]
   1b76c:	add	sp, sp, #4
   1b770:	pop	{pc}		; (ldr pc, [sp], #4)
   1b774:	cmp	r3, #0
   1b778:	cmpeq	r2, #0
   1b77c:	bne	1b794 <lchmod@@Base+0x497c>
   1b780:	cmp	r1, #0
   1b784:	cmpeq	r0, #0
   1b788:	mvnne	r1, #0
   1b78c:	mvnne	r0, #0
   1b790:	b	1b7b0 <lchmod@@Base+0x4998>
   1b794:	sub	sp, sp, #8
   1b798:	push	{sp, lr}
   1b79c:	bl	1b7c0 <lchmod@@Base+0x49a8>
   1b7a0:	ldr	lr, [sp, #4]
   1b7a4:	add	sp, sp, #8
   1b7a8:	pop	{r2, r3}
   1b7ac:	bx	lr
   1b7b0:	push	{r1, lr}
   1b7b4:	mov	r0, #8
   1b7b8:	bl	114b8 <raise@plt>
   1b7bc:	pop	{r1, pc}
   1b7c0:	cmp	r1, r3
   1b7c4:	cmpeq	r0, r2
   1b7c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7cc:	mov	r4, r0
   1b7d0:	movcc	r0, #0
   1b7d4:	mov	r5, r1
   1b7d8:	ldr	lr, [sp, #36]	; 0x24
   1b7dc:	movcc	r1, r0
   1b7e0:	bcc	1b8dc <lchmod@@Base+0x4ac4>
   1b7e4:	cmp	r3, #0
   1b7e8:	clzeq	ip, r2
   1b7ec:	clzne	ip, r3
   1b7f0:	addeq	ip, ip, #32
   1b7f4:	cmp	r5, #0
   1b7f8:	clzeq	r1, r4
   1b7fc:	addeq	r1, r1, #32
   1b800:	clzne	r1, r5
   1b804:	sub	ip, ip, r1
   1b808:	sub	sl, ip, #32
   1b80c:	lsl	r9, r3, ip
   1b810:	rsb	fp, ip, #32
   1b814:	orr	r9, r9, r2, lsl sl
   1b818:	orr	r9, r9, r2, lsr fp
   1b81c:	lsl	r8, r2, ip
   1b820:	cmp	r5, r9
   1b824:	cmpeq	r4, r8
   1b828:	movcc	r0, #0
   1b82c:	movcc	r1, r0
   1b830:	bcc	1b84c <lchmod@@Base+0x4a34>
   1b834:	mov	r0, #1
   1b838:	subs	r4, r4, r8
   1b83c:	lsl	r1, r0, sl
   1b840:	orr	r1, r1, r0, lsr fp
   1b844:	lsl	r0, r0, ip
   1b848:	sbc	r5, r5, r9
   1b84c:	cmp	ip, #0
   1b850:	beq	1b8dc <lchmod@@Base+0x4ac4>
   1b854:	lsr	r6, r8, #1
   1b858:	orr	r6, r6, r9, lsl #31
   1b85c:	lsr	r7, r9, #1
   1b860:	mov	r2, ip
   1b864:	b	1b888 <lchmod@@Base+0x4a70>
   1b868:	subs	r3, r4, r6
   1b86c:	sbc	r8, r5, r7
   1b870:	adds	r3, r3, r3
   1b874:	adc	r8, r8, r8
   1b878:	adds	r4, r3, #1
   1b87c:	adc	r5, r8, #0
   1b880:	subs	r2, r2, #1
   1b884:	beq	1b8a4 <lchmod@@Base+0x4a8c>
   1b888:	cmp	r5, r7
   1b88c:	cmpeq	r4, r6
   1b890:	bcs	1b868 <lchmod@@Base+0x4a50>
   1b894:	adds	r4, r4, r4
   1b898:	adc	r5, r5, r5
   1b89c:	subs	r2, r2, #1
   1b8a0:	bne	1b888 <lchmod@@Base+0x4a70>
   1b8a4:	lsr	r3, r4, ip
   1b8a8:	orr	r3, r3, r5, lsl fp
   1b8ac:	lsr	r2, r5, ip
   1b8b0:	orr	r3, r3, r5, lsr sl
   1b8b4:	adds	r0, r0, r4
   1b8b8:	mov	r4, r3
   1b8bc:	lsl	r3, r2, ip
   1b8c0:	orr	r3, r3, r4, lsl sl
   1b8c4:	lsl	ip, r4, ip
   1b8c8:	orr	r3, r3, r4, lsr fp
   1b8cc:	adc	r1, r1, r5
   1b8d0:	subs	r0, r0, ip
   1b8d4:	mov	r5, r2
   1b8d8:	sbc	r1, r1, r3
   1b8dc:	cmp	lr, #0
   1b8e0:	strdne	r4, [lr]
   1b8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8ec:	mov	r7, r0
   1b8f0:	ldr	r6, [pc, #72]	; 1b940 <lchmod@@Base+0x4b28>
   1b8f4:	ldr	r5, [pc, #72]	; 1b944 <lchmod@@Base+0x4b2c>
   1b8f8:	add	r6, pc, r6
   1b8fc:	add	r5, pc, r5
   1b900:	sub	r6, r6, r5
   1b904:	mov	r8, r1
   1b908:	mov	r9, r2
   1b90c:	bl	11468 <fstatfs64@plt-0x20>
   1b910:	asrs	r6, r6, #2
   1b914:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b918:	mov	r4, #0
   1b91c:	add	r4, r4, #1
   1b920:	ldr	r3, [r5], #4
   1b924:	mov	r2, r9
   1b928:	mov	r1, r8
   1b92c:	mov	r0, r7
   1b930:	blx	r3
   1b934:	cmp	r6, r4
   1b938:	bne	1b91c <lchmod@@Base+0x4b04>
   1b93c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b940:	andeq	r1, r1, ip, lsl #12
   1b944:	andeq	r1, r1, r4, lsl #12
   1b948:	bx	lr
   1b94c:	ldr	r3, [pc, #12]	; 1b960 <lchmod@@Base+0x4b48>
   1b950:	mov	r1, #0
   1b954:	add	r3, pc, r3
   1b958:	ldr	r2, [r3]
   1b95c:	b	11734 <__cxa_atexit@plt>
   1b960:	andeq	r1, r1, r8, lsr #16

Disassembly of section .fini:

0001b964 <.fini>:
   1b964:	push	{r3, lr}
   1b968:	pop	{r3, pc}
