
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

000113c4 <.init>:
   113c4:	push	{r3, lr}
   113c8:	bl	117ec <__assert_fail@plt+0x48>
   113cc:	pop	{r3, pc}

Disassembly of section .plt:

000113d0 <fdopen@plt-0x14>:
   113d0:	push	{lr}		; (str lr, [sp, #-4]!)
   113d4:	ldr	lr, [pc, #4]	; 113e0 <fdopen@plt-0x4>
   113d8:	add	lr, pc, lr
   113dc:	ldr	pc, [lr, #8]!
   113e0:	andeq	sl, r1, r0, lsr #24

000113e4 <fdopen@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3104]!	; 0xc20

000113f0 <calloc@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3096]!	; 0xc18

000113fc <strcmp@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3088]!	; 0xc10

00011408 <strtol@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3080]!	; 0xc08

00011414 <printf@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3072]!	; 0xc00

00011420 <read@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3064]!	; 0xbf8

0001142c <fflush@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3056]!	; 0xbf0

00011438 <wcwidth@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3048]!	; 0xbe8

00011444 <free@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3040]!	; 0xbe0

00011450 <ferror@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3032]!	; 0xbd8

0001145c <_exit@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3024]!	; 0xbd0

00011468 <memcpy@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3016]!	; 0xbc8

00011474 <execvp@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3008]!	; 0xbc0

00011480 <mbsinit@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3000]!	; 0xbb8

0001148c <signal@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #2992]!	; 0xbb0

00011498 <memcmp@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #2984]!	; 0xba8

000114a4 <dcgettext@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #2976]!	; 0xba0

000114b0 <sysconf@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #2968]!	; 0xb98

000114bc <dup2@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #2960]!	; 0xb90

000114c8 <getrlimit64@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #2952]!	; 0xb88

000114d4 <realloc@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2944]!	; 0xb80

000114e0 <textdomain@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2936]!	; 0xb78

000114ec <iswcntrl@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2928]!	; 0xb70

000114f8 <iswprint@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2920]!	; 0xb68

00011504 <poll@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2912]!	; 0xb60

00011510 <sigaction@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2904]!	; 0xb58

0001151c <lseek64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2896]!	; 0xb50

00011528 <waitpid@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2888]!	; 0xb48

00011534 <__ctype_get_mb_cur_max@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2880]!	; 0xb40

00011540 <strcpy@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2872]!	; 0xb38

0001154c <__fpending@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2864]!	; 0xb30

00011558 <mbrtowc@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2856]!	; 0xb28

00011564 <error@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2848]!	; 0xb20

00011570 <opendir@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2840]!	; 0xb18

0001157c <open64@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2832]!	; 0xb10

00011588 <getenv@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2824]!	; 0xb08

00011594 <malloc@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2816]!	; 0xb00

000115a0 <__libc_start_main@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2808]!	; 0xaf8

000115ac <__freading@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2800]!	; 0xaf0

000115b8 <__gmon_start__@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2792]!	; 0xae8

000115c4 <getopt_long@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2784]!	; 0xae0

000115d0 <__ctype_b_loc@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2776]!	; 0xad8

000115dc <getpid@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2768]!	; 0xad0

000115e8 <exit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2760]!	; 0xac8

000115f4 <strtoul@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2752]!	; 0xac0

00011600 <strlen@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2744]!	; 0xab8

0001160c <strchr@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2736]!	; 0xab0

00011618 <setenv@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2728]!	; 0xaa8

00011624 <fprintf@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2720]!	; 0xaa0

00011630 <__errno_location@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2712]!	; 0xa98

0001163c <snprintf@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2704]!	; 0xa90

00011648 <__cxa_atexit@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2696]!	; 0xa88

00011654 <memset@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2688]!	; 0xa80

00011660 <strncpy@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2680]!	; 0xa78

0001166c <write@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2672]!	; 0xa70

00011678 <fileno@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2664]!	; 0xa68

00011684 <memchr@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2656]!	; 0xa60

00011690 <fclose@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2648]!	; 0xa58

0001169c <strnlen@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2640]!	; 0xa50

000116a8 <pipe@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2632]!	; 0xa48

000116b4 <fseeko64@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2624]!	; 0xa40

000116c0 <fcntl64@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2616]!	; 0xa38

000116cc <setlocale@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2608]!	; 0xa30

000116d8 <sigemptyset@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2600]!	; 0xa28

000116e4 <fork@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2592]!	; 0xa20

000116f0 <strrchr@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #106496	; 0x1a000
   116f8:	ldr	pc, [ip, #2584]!	; 0xa18

000116fc <nl_langinfo@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #106496	; 0x1a000
   11704:	ldr	pc, [ip, #2576]!	; 0xa10

00011708 <readdir64@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #106496	; 0x1a000
   11710:	ldr	pc, [ip, #2568]!	; 0xa08

00011714 <fdopendir@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #106496	; 0x1a000
   1171c:	ldr	pc, [ip, #2560]!	; 0xa00

00011720 <putc@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #106496	; 0x1a000
   11728:	ldr	pc, [ip, #2552]!	; 0x9f8

0001172c <dirfd@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #106496	; 0x1a000
   11734:	ldr	pc, [ip, #2544]!	; 0x9f0

00011738 <bindtextdomain@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #106496	; 0x1a000
   11740:	ldr	pc, [ip, #2536]!	; 0x9e8

00011744 <isatty@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #106496	; 0x1a000
   1174c:	ldr	pc, [ip, #2528]!	; 0x9e0

00011750 <unsetenv@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #106496	; 0x1a000
   11758:	ldr	pc, [ip, #2520]!	; 0x9d8

0001175c <fputs@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #106496	; 0x1a000
   11764:	ldr	pc, [ip, #2512]!	; 0x9d0

00011768 <strncmp@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #106496	; 0x1a000
   11770:	ldr	pc, [ip, #2504]!	; 0x9c8

00011774 <abort@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #106496	; 0x1a000
   1177c:	ldr	pc, [ip, #2496]!	; 0x9c0

00011780 <getc@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #106496	; 0x1a000
   11788:	ldr	pc, [ip, #2488]!	; 0x9b8

0001178c <close@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #106496	; 0x1a000
   11794:	ldr	pc, [ip, #2480]!	; 0x9b0

00011798 <closedir@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #106496	; 0x1a000
   117a0:	ldr	pc, [ip, #2472]!	; 0x9a8

000117a4 <__assert_fail@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #106496	; 0x1a000
   117ac:	ldr	pc, [ip, #2464]!	; 0x9a0

Disassembly of section .text:

000117b0 <.text>:
   117b0:	mov	fp, #0
   117b4:	mov	lr, #0
   117b8:	pop	{r1}		; (ldr r1, [sp], #4)
   117bc:	mov	r2, sp
   117c0:	push	{r2}		; (str r2, [sp, #-4]!)
   117c4:	push	{r0}		; (str r0, [sp, #-4]!)
   117c8:	ldr	ip, [pc, #16]	; 117e0 <__assert_fail@plt+0x3c>
   117cc:	push	{ip}		; (str ip, [sp, #-4]!)
   117d0:	ldr	r0, [pc, #12]	; 117e4 <__assert_fail@plt+0x40>
   117d4:	ldr	r3, [pc, #12]	; 117e8 <__assert_fail@plt+0x44>
   117d8:	bl	115a0 <__libc_start_main@plt>
   117dc:	bl	11774 <abort@plt>
   117e0:	andeq	r9, r1, r4, ror #13
   117e4:	andeq	r1, r1, r0, lsr #17
   117e8:	andeq	r9, r1, r4, lsl #13
   117ec:	ldr	r3, [pc, #20]	; 11808 <__assert_fail@plt+0x64>
   117f0:	ldr	r2, [pc, #20]	; 1180c <__assert_fail@plt+0x68>
   117f4:	add	r3, pc, r3
   117f8:	ldr	r2, [r3, r2]
   117fc:	cmp	r2, #0
   11800:	bxeq	lr
   11804:	b	115b8 <__gmon_start__@plt>
   11808:	andeq	sl, r1, r4, lsl #16
   1180c:	andeq	r0, r0, r0, asr r1
   11810:	ldr	r0, [pc, #24]	; 11830 <__assert_fail@plt+0x8c>
   11814:	ldr	r3, [pc, #24]	; 11834 <__assert_fail@plt+0x90>
   11818:	cmp	r3, r0
   1181c:	bxeq	lr
   11820:	ldr	r3, [pc, #16]	; 11838 <__assert_fail@plt+0x94>
   11824:	cmp	r3, #0
   11828:	bxeq	lr
   1182c:	bx	r3
   11830:			; <UNDEFINED> instruction: 0x0002c1b0
   11834:			; <UNDEFINED> instruction: 0x0002c1b0
   11838:	andeq	r0, r0, r0
   1183c:	ldr	r0, [pc, #36]	; 11868 <__assert_fail@plt+0xc4>
   11840:	ldr	r1, [pc, #36]	; 1186c <__assert_fail@plt+0xc8>
   11844:	sub	r1, r1, r0
   11848:	asr	r1, r1, #2
   1184c:	add	r1, r1, r1, lsr #31
   11850:	asrs	r1, r1, #1
   11854:	bxeq	lr
   11858:	ldr	r3, [pc, #16]	; 11870 <__assert_fail@plt+0xcc>
   1185c:	cmp	r3, #0
   11860:	bxeq	lr
   11864:	bx	r3
   11868:			; <UNDEFINED> instruction: 0x0002c1b0
   1186c:			; <UNDEFINED> instruction: 0x0002c1b0
   11870:	andeq	r0, r0, r0
   11874:	push	{r4, lr}
   11878:	ldr	r4, [pc, #24]	; 11898 <__assert_fail@plt+0xf4>
   1187c:	ldrb	r3, [r4]
   11880:	cmp	r3, #0
   11884:	popne	{r4, pc}
   11888:	bl	11810 <__assert_fail@plt+0x6c>
   1188c:	mov	r3, #1
   11890:	strb	r3, [r4]
   11894:	pop	{r4, pc}
   11898:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1189c:	b	1183c <__assert_fail@plt+0x98>
   118a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a4:	add	fp, sp, #28
   118a8:	sub	sp, sp, #212	; 0xd4
   118ac:	mov	r9, r0
   118b0:	mov	r0, #0
   118b4:	mov	sl, r1
   118b8:	strb	r0, [fp, #-40]	; 0xffffffd8
   118bc:	movw	r0, #25445	; 0x6365
   118c0:	movt	r0, #28520	; 0x6f68
   118c4:	str	r0, [fp, #-44]	; 0xffffffd4
   118c8:	ldr	r0, [r1]
   118cc:	cmp	r0, #0
   118d0:	movweq	r0, #38673	; 0x9711
   118d4:	movteq	r0, #1
   118d8:	bl	16410 <__assert_fail@plt+0x4c6c>
   118dc:	bl	14bac <__assert_fail@plt+0x3408>
   118e0:	bl	115dc <getpid@plt>
   118e4:	movw	r1, #49632	; 0xc1e0
   118e8:	movt	r1, #2
   118ec:	str	r0, [r1]
   118f0:	movw	r1, #49636	; 0xc1e4
   118f4:	mov	r0, #0
   118f8:	movt	r1, #2
   118fc:	str	r0, [r1]
   11900:	movw	r1, #41983	; 0xa3ff
   11904:	mov	r0, #6
   11908:	movt	r1, #1
   1190c:	bl	116cc <setlocale@plt>
   11910:	movw	r4, #46162	; 0xb452
   11914:	movw	r1, #38679	; 0x9717
   11918:	movt	r4, #1
   1191c:	movt	r1, #1
   11920:	mov	r0, r4
   11924:	bl	11738 <bindtextdomain@plt>
   11928:	mov	r0, r4
   1192c:	bl	114e0 <textdomain@plt>
   11930:	movw	r0, #21684	; 0x54b4
   11934:	movt	r0, #1
   11938:	bl	196e8 <__assert_fail@plt+0x7f44>
   1193c:	cmp	r0, #0
   11940:	bne	128a8 <__assert_fail@plt+0x1104>
   11944:	movw	r0, #12260	; 0x2fe4
   11948:	movt	r0, #1
   1194c:	bl	196e8 <__assert_fail@plt+0x7f44>
   11950:	cmp	r0, #0
   11954:	bne	128a8 <__assert_fail@plt+0x1104>
   11958:	movw	r7, #49640	; 0xc1e8
   1195c:	mov	r1, #2048	; 0x800
   11960:	movt	r7, #2
   11964:	mov	r0, r7
   11968:	bl	1491c <__assert_fail@plt+0x3178>
   1196c:	mov	r4, r0
   11970:	sub	r0, r0, #1
   11974:	cmp	r0, #2
   11978:	str	r4, [sp, #32]
   1197c:	bcs	1198c <__assert_fail@plt+0x1e8>
   11980:	movw	r0, #12416	; 0x3080
   11984:	movt	r0, #1
   11988:	b	119e8 <__assert_fail@plt+0x244>
   1198c:	mov	r0, #0
   11990:	bl	114b0 <sysconf@plt>
   11994:	cmp	r0, #1
   11998:	blt	119bc <__assert_fail@plt+0x218>
   1199c:	cmp	r0, #2048	; 0x800
   119a0:	ble	12a20 <__assert_fail@plt+0x127c>
   119a4:	ldr	r1, [r7, #12]
   119a8:	sub	r0, r0, #2048	; 0x800
   119ac:	cmp	r1, r0
   119b0:	movcc	r0, r1
   119b4:	str	r0, [r7, #12]
   119b8:	b	119c0 <__assert_fail@plt+0x21c>
   119bc:	ldr	r0, [r7, #12]
   119c0:	mov	r1, #0
   119c4:	cmp	r1, r0, lsr #11
   119c8:	beq	12a00 <__assert_fail@plt+0x125c>
   119cc:	movw	r0, #12460	; 0x30ac
   119d0:	movt	r0, #1
   119d4:	str	r0, [r7, #32]
   119d8:	mov	r0, r7
   119dc:	bl	149ec <__assert_fail@plt+0x3248>
   119e0:	movw	r0, #12256	; 0x2fe0
   119e4:	movt	r0, #1
   119e8:	str	r0, [sp, #36]	; 0x24
   119ec:	movw	r0, #10816	; 0x2a40
   119f0:	movw	r5, #44680	; 0xae88
   119f4:	mov	r4, #0
   119f8:	mov	r8, #1
   119fc:	mov	r1, #0
   11a00:	movt	r0, #1
   11a04:	movt	r5, #1
   11a08:	str	r0, [sp, #48]	; 0x30
   11a0c:	movw	r0, #46891	; 0xb72b
   11a10:	movt	r0, #1
   11a14:	str	r0, [sp, #40]	; 0x28
   11a18:	mov	r0, #1
   11a1c:	str	r0, [sp, #28]
   11a20:	b	1208c <__assert_fail@plt+0x8e8>
   11a24:	cmp	r0, #48	; 0x30
   11a28:	bne	11c28 <__assert_fail@plt+0x484>
   11a2c:	movw	r0, #49684	; 0xc214
   11a30:	mov	r1, r6
   11a34:	movt	r0, #2
   11a38:	strb	r4, [r0]
   11a3c:	movw	r0, #13684	; 0x3574
   11a40:	movt	r0, #1
   11a44:	str	r0, [sp, #48]	; 0x30
   11a48:	b	1208c <__assert_fail@plt+0x8e8>
   11a4c:	cmp	r0, #73	; 0x49
   11a50:	beq	11b00 <__assert_fail@plt+0x35c>
   11a54:	cmp	r0, #76	; 0x4c
   11a58:	bne	11c60 <__assert_fail@plt+0x4bc>
   11a5c:	movw	r0, #49624	; 0xc1d8
   11a60:	mov	r1, #76	; 0x4c
   11a64:	mov	r2, #1
   11a68:	mvn	r3, #0
   11a6c:	str	r8, [sp]
   11a70:	movt	r0, #2
   11a74:	ldr	r0, [r0]
   11a78:	bl	13a00 <__assert_fail@plt+0x225c>
   11a7c:	str	r0, [r7, #36]	; 0x24
   11a80:	ldr	r0, [r7, #40]	; 0x28
   11a84:	cmp	r0, #0
   11a88:	beq	11acc <__assert_fail@plt+0x328>
   11a8c:	movw	r1, #40569	; 0x9e79
   11a90:	mov	r0, #0
   11a94:	mov	r2, #5
   11a98:	movt	r1, #1
   11a9c:	bl	114a4 <dcgettext@plt>
   11aa0:	mov	r2, r0
   11aa4:	movw	r0, #38898	; 0x97f2
   11aa8:	movw	r3, #38875	; 0x97db
   11aac:	mov	r1, #0
   11ab0:	movt	r0, #1
   11ab4:	movt	r3, #1
   11ab8:	str	r0, [sp]
   11abc:	mov	r0, #0
   11ac0:	str	r3, [sp, #4]
   11ac4:	bl	11564 <error@plt>
   11ac8:	str	r4, [r7, #40]	; 0x28
   11acc:	ldr	r0, [r7, #24]
   11ad0:	mov	r1, r6
   11ad4:	cmp	r0, #0
   11ad8:	beq	1208c <__assert_fail@plt+0x8e8>
   11adc:	movw	r1, #40569	; 0x9e79
   11ae0:	mov	r0, #0
   11ae4:	mov	r2, #5
   11ae8:	movt	r1, #1
   11aec:	bl	114a4 <dcgettext@plt>
   11af0:	mov	r2, r0
   11af4:	movw	r0, #38898	; 0x97f2
   11af8:	movt	r0, #1
   11afc:	b	11f90 <__assert_fail@plt+0x7ec>
   11b00:	movw	r0, #49624	; 0xc1d8
   11b04:	movw	r1, #38856	; 0x97c8
   11b08:	movt	r0, #2
   11b0c:	movt	r1, #1
   11b10:	ldr	r0, [r0]
   11b14:	cmp	r0, #0
   11b18:	moveq	r0, r1
   11b1c:	str	r0, [r7, #24]
   11b20:	ldr	r0, [r7, #40]	; 0x28
   11b24:	cmp	r0, #0
   11b28:	beq	11b6c <__assert_fail@plt+0x3c8>
   11b2c:	movw	r1, #40569	; 0x9e79
   11b30:	mov	r0, #0
   11b34:	mov	r2, #5
   11b38:	movt	r1, #1
   11b3c:	bl	114a4 <dcgettext@plt>
   11b40:	mov	r2, r0
   11b44:	movw	r0, #38859	; 0x97cb
   11b48:	movw	r3, #38875	; 0x97db
   11b4c:	mov	r1, #0
   11b50:	movt	r0, #1
   11b54:	movt	r3, #1
   11b58:	str	r0, [sp]
   11b5c:	mov	r0, #0
   11b60:	str	r3, [sp, #4]
   11b64:	bl	11564 <error@plt>
   11b68:	str	r4, [r7, #40]	; 0x28
   11b6c:	ldr	r0, [r7, #36]	; 0x24
   11b70:	mov	r1, r6
   11b74:	cmp	r0, #0
   11b78:	beq	1208c <__assert_fail@plt+0x8e8>
   11b7c:	movw	r1, #40569	; 0x9e79
   11b80:	mov	r0, #0
   11b84:	mov	r2, #5
   11b88:	movt	r1, #1
   11b8c:	bl	114a4 <dcgettext@plt>
   11b90:	mov	r2, r0
   11b94:	movw	r0, #38859	; 0x97cb
   11b98:	movw	r3, #38886	; 0x97e6
   11b9c:	mov	r1, #0
   11ba0:	movt	r0, #1
   11ba4:	movt	r3, #1
   11ba8:	str	r0, [sp]
   11bac:	mov	r0, #0
   11bb0:	str	r3, [sp, #4]
   11bb4:	bl	11564 <error@plt>
   11bb8:	str	r4, [r7, #36]	; 0x24
   11bbc:	mov	r1, r6
   11bc0:	b	1208c <__assert_fail@plt+0x8e8>
   11bc4:	cmp	r0, #83	; 0x53
   11bc8:	mov	r1, #1
   11bcc:	beq	1208c <__assert_fail@plt+0x8e8>
   11bd0:	cmp	r0, #256	; 0x100
   11bd4:	bne	128a0 <__assert_fail@plt+0x10fc>
   11bd8:	movw	r0, #49624	; 0xc1d8
   11bdc:	mov	r4, r5
   11be0:	mov	r1, #61	; 0x3d
   11be4:	movt	r0, #2
   11be8:	ldr	r5, [r0]
   11bec:	mov	r0, r5
   11bf0:	bl	1160c <strchr@plt>
   11bf4:	cmp	r0, #0
   11bf8:	bne	128d4 <__assert_fail@plt+0x1130>
   11bfc:	movw	r0, #49696	; 0xc220
   11c00:	movt	r0, #2
   11c04:	str	r5, [r0]
   11c08:	mov	r0, r5
   11c0c:	bl	11750 <unsetenv@plt>
   11c10:	mov	r5, r4
   11c14:	cmp	r0, #0
   11c18:	mov	r1, r6
   11c1c:	mov	r4, #0
   11c20:	beq	1208c <__assert_fail@plt+0x8e8>
   11c24:	b	12900 <__assert_fail@plt+0x115c>
   11c28:	cmp	r0, #69	; 0x45
   11c2c:	bne	128a0 <__assert_fail@plt+0x10fc>
   11c30:	movw	r0, #49624	; 0xc1d8
   11c34:	movt	r0, #2
   11c38:	ldr	r0, [r0]
   11c3c:	cmp	r0, #0
   11c40:	ldrbne	r1, [r0]
   11c44:	cmpne	r1, #0
   11c48:	bne	11e94 <__assert_fail@plt+0x6f0>
   11c4c:	movw	r0, #49688	; 0xc218
   11c50:	mov	r1, r6
   11c54:	movt	r0, #2
   11c58:	str	r4, [r0]
   11c5c:	b	1208c <__assert_fail@plt+0x8e8>
   11c60:	cmp	r0, #80	; 0x50
   11c64:	bne	128a0 <__assert_fail@plt+0x10fc>
   11c68:	movw	r0, #49624	; 0xc1d8
   11c6c:	mov	r1, #80	; 0x50
   11c70:	mov	r2, #0
   11c74:	mvn	r3, #-2147483648	; 0x80000000
   11c78:	str	r8, [sp]
   11c7c:	movt	r0, #2
   11c80:	ldr	r0, [r0]
   11c84:	bl	13a00 <__assert_fail@plt+0x225c>
   11c88:	movw	r1, #49504	; 0xc160
   11c8c:	movt	r1, #2
   11c90:	b	11e9c <__assert_fail@plt+0x6f8>
   11c94:	str	r8, [r7]
   11c98:	mov	r1, r6
   11c9c:	b	1208c <__assert_fail@plt+0x8e8>
   11ca0:	mov	r0, #0
   11ca4:	mov	r1, r6
   11ca8:	str	r0, [sp, #28]
   11cac:	b	1208c <__assert_fail@plt+0x8e8>
   11cb0:	movw	r0, #49692	; 0xc21c
   11cb4:	movt	r0, #2
   11cb8:	b	11e04 <__assert_fail@plt+0x660>
   11cbc:	movw	r0, #49624	; 0xc1d8
   11cc0:	str	sl, [sp, #44]	; 0x2c
   11cc4:	movt	r0, #2
   11cc8:	ldr	r4, [r0]
   11ccc:	mov	r0, r4
   11cd0:	bl	11600 <strlen@plt>
   11cd4:	mov	r1, r0
   11cd8:	ldrb	r0, [r4]
   11cdc:	cmp	r1, #1
   11ce0:	beq	12068 <__assert_fail@plt+0x8c4>
   11ce4:	cmp	r0, #92	; 0x5c
   11ce8:	bne	12938 <__assert_fail@plt+0x1194>
   11cec:	mov	r5, r4
   11cf0:	mov	sl, r7
   11cf4:	ldrb	r7, [r5, #1]!
   11cf8:	cmp	r7, #101	; 0x65
   11cfc:	bgt	11f30 <__assert_fail@plt+0x78c>
   11d00:	cmp	r7, #92	; 0x5c
   11d04:	beq	11fb8 <__assert_fail@plt+0x814>
   11d08:	cmp	r7, #97	; 0x61
   11d0c:	beq	11fc0 <__assert_fail@plt+0x81c>
   11d10:	cmp	r7, #98	; 0x62
   11d14:	bne	11fd8 <__assert_fail@plt+0x834>
   11d18:	mov	r0, #8
   11d1c:	b	1205c <__assert_fail@plt+0x8b8>
   11d20:	movw	r0, #49624	; 0xc1d8
   11d24:	movt	r0, #2
   11d28:	ldr	r0, [r0]
   11d2c:	cmp	r0, #0
   11d30:	beq	11ea8 <__assert_fail@plt+0x704>
   11d34:	mov	r1, #108	; 0x6c
   11d38:	mov	r2, #1
   11d3c:	mvn	r3, #0
   11d40:	str	r8, [sp]
   11d44:	bl	13a00 <__assert_fail@plt+0x225c>
   11d48:	b	11eac <__assert_fail@plt+0x708>
   11d4c:	movw	r0, #49624	; 0xc1d8
   11d50:	mov	r1, #110	; 0x6e
   11d54:	mov	r2, #1
   11d58:	mvn	r3, #0
   11d5c:	str	r8, [sp]
   11d60:	movt	r0, #2
   11d64:	ldr	r0, [r0]
   11d68:	bl	13a00 <__assert_fail@plt+0x225c>
   11d6c:	str	r0, [r7, #40]	; 0x28
   11d70:	ldr	r0, [r7, #36]	; 0x24
   11d74:	cmp	r0, #0
   11d78:	beq	11dbc <__assert_fail@plt+0x618>
   11d7c:	movw	r1, #40569	; 0x9e79
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	movt	r1, #1
   11d8c:	bl	114a4 <dcgettext@plt>
   11d90:	mov	r2, r0
   11d94:	movw	r0, #38926	; 0x980e
   11d98:	movw	r3, #38886	; 0x97e6
   11d9c:	mov	r1, #0
   11da0:	movt	r0, #1
   11da4:	movt	r3, #1
   11da8:	str	r0, [sp]
   11dac:	mov	r0, #0
   11db0:	str	r3, [sp, #4]
   11db4:	bl	11564 <error@plt>
   11db8:	str	r4, [r7, #36]	; 0x24
   11dbc:	ldr	r0, [r7, #24]
   11dc0:	mov	r1, r6
   11dc4:	cmp	r0, #0
   11dc8:	beq	1208c <__assert_fail@plt+0x8e8>
   11dcc:	ldr	r0, [r7, #40]	; 0x28
   11dd0:	cmp	r0, #1
   11dd4:	bne	11f70 <__assert_fail@plt+0x7cc>
   11dd8:	str	r4, [r7, #40]	; 0x28
   11ddc:	mov	r1, r6
   11de0:	b	1208c <__assert_fail@plt+0x8e8>
   11de4:	movw	r0, #49693	; 0xc21d
   11de8:	movt	r0, #2
   11dec:	b	11e04 <__assert_fail@plt+0x660>
   11df0:	movw	r0, #49692	; 0xc21c
   11df4:	movt	r0, #2
   11df8:	strb	r8, [r0]
   11dfc:	movw	r0, #49694	; 0xc21e
   11e00:	movt	r0, #2
   11e04:	strb	r8, [r0]
   11e08:	mov	r1, r6
   11e0c:	b	1208c <__assert_fail@plt+0x8e8>
   11e10:	ldr	r0, [sp, #36]	; 0x24
   11e14:	mov	r8, r5
   11e18:	blx	r0
   11e1c:	movw	r0, #49624	; 0xc1d8
   11e20:	ldr	r3, [r7, #4]
   11e24:	mov	r1, #115	; 0x73
   11e28:	mov	r2, #1
   11e2c:	str	r4, [sp]
   11e30:	movt	r0, #2
   11e34:	ldr	r0, [r0]
   11e38:	bl	13a00 <__assert_fail@plt+0x225c>
   11e3c:	mov	r5, r0
   11e40:	ldr	r0, [r7, #4]
   11e44:	cmp	r5, r0
   11e48:	bls	11e80 <__assert_fail@plt+0x6dc>
   11e4c:	movw	r1, #38940	; 0x981c
   11e50:	mov	r0, #0
   11e54:	mov	r2, #5
   11e58:	movt	r1, #1
   11e5c:	bl	114a4 <dcgettext@plt>
   11e60:	mov	r2, r0
   11e64:	ldr	r0, [r7, #4]
   11e68:	mov	r1, #0
   11e6c:	mov	r3, r5
   11e70:	str	r0, [sp]
   11e74:	mov	r0, #0
   11e78:	bl	11564 <error@plt>
   11e7c:	ldr	r5, [r7, #4]
   11e80:	str	r5, [r7, #12]
   11e84:	mov	r5, r8
   11e88:	mov	r1, r6
   11e8c:	mov	r8, #1
   11e90:	b	1208c <__assert_fail@plt+0x8e8>
   11e94:	movw	r1, #49688	; 0xc218
   11e98:	movt	r1, #2
   11e9c:	str	r0, [r1]
   11ea0:	mov	r1, r6
   11ea4:	b	1208c <__assert_fail@plt+0x8e8>
   11ea8:	mov	r0, #1
   11eac:	str	r0, [r7, #36]	; 0x24
   11eb0:	ldr	r0, [r7, #40]	; 0x28
   11eb4:	cmp	r0, #0
   11eb8:	beq	11efc <__assert_fail@plt+0x758>
   11ebc:	movw	r1, #40569	; 0x9e79
   11ec0:	mov	r0, #0
   11ec4:	mov	r2, #5
   11ec8:	movt	r1, #1
   11ecc:	bl	114a4 <dcgettext@plt>
   11ed0:	mov	r2, r0
   11ed4:	movw	r0, #38911	; 0x97ff
   11ed8:	movw	r3, #38875	; 0x97db
   11edc:	mov	r1, #0
   11ee0:	movt	r0, #1
   11ee4:	movt	r3, #1
   11ee8:	str	r0, [sp]
   11eec:	mov	r0, #0
   11ef0:	str	r3, [sp, #4]
   11ef4:	bl	11564 <error@plt>
   11ef8:	str	r4, [r7, #40]	; 0x28
   11efc:	ldr	r0, [r7, #24]
   11f00:	mov	r1, r6
   11f04:	cmp	r0, #0
   11f08:	beq	1208c <__assert_fail@plt+0x8e8>
   11f0c:	movw	r1, #40569	; 0x9e79
   11f10:	mov	r0, #0
   11f14:	mov	r2, #5
   11f18:	movt	r1, #1
   11f1c:	bl	114a4 <dcgettext@plt>
   11f20:	mov	r2, r0
   11f24:	movw	r0, #38911	; 0x97ff
   11f28:	movt	r0, #1
   11f2c:	b	11f90 <__assert_fail@plt+0x7ec>
   11f30:	sub	r0, r7, #110	; 0x6e
   11f34:	cmp	r0, #8
   11f38:	bhi	11fc8 <__assert_fail@plt+0x824>
   11f3c:	add	r1, pc, #0
   11f40:	ldr	pc, [r1, r0, lsl #2]
   11f44:	andeq	r1, r1, r8, ror #30
   11f48:	ldrdeq	r1, [r1], -r8
   11f4c:	ldrdeq	r1, [r1], -r8
   11f50:	ldrdeq	r1, [r1], -r8
   11f54:	strdeq	r1, [r1], -r0
   11f58:	ldrdeq	r1, [r1], -r8
   11f5c:	strdeq	r1, [r1], -r8
   11f60:	ldrdeq	r1, [r1], -r8
   11f64:	andeq	r2, r1, r0
   11f68:	mov	r0, #10
   11f6c:	b	1205c <__assert_fail@plt+0x8b8>
   11f70:	movw	r1, #40569	; 0x9e79
   11f74:	mov	r0, #0
   11f78:	mov	r2, #5
   11f7c:	movt	r1, #1
   11f80:	bl	114a4 <dcgettext@plt>
   11f84:	mov	r2, r0
   11f88:	movw	r0, #38926	; 0x980e
   11f8c:	movt	r0, #1
   11f90:	movw	r3, #38901	; 0x97f5
   11f94:	str	r0, [sp]
   11f98:	mov	r0, #0
   11f9c:	mov	r1, #0
   11fa0:	movt	r3, #1
   11fa4:	str	r3, [sp, #4]
   11fa8:	bl	11564 <error@plt>
   11fac:	str	r4, [r7, #24]
   11fb0:	mov	r1, r6
   11fb4:	b	1208c <__assert_fail@plt+0x8e8>
   11fb8:	mov	r0, #92	; 0x5c
   11fbc:	b	1205c <__assert_fail@plt+0x8b8>
   11fc0:	mov	r0, #7
   11fc4:	b	1205c <__assert_fail@plt+0x8b8>
   11fc8:	cmp	r7, #102	; 0x66
   11fcc:	bne	11fd8 <__assert_fail@plt+0x834>
   11fd0:	mov	r0, #12
   11fd4:	b	1205c <__assert_fail@plt+0x8b8>
   11fd8:	cmp	r7, #120	; 0x78
   11fdc:	str	r4, [sp, #48]	; 0x30
   11fe0:	bne	12008 <__assert_fail@plt+0x864>
   11fe4:	add	r5, r4, #2
   11fe8:	mov	r4, #16
   11fec:	b	12024 <__assert_fail@plt+0x880>
   11ff0:	mov	r0, #13
   11ff4:	b	1205c <__assert_fail@plt+0x8b8>
   11ff8:	mov	r0, #9
   11ffc:	b	1205c <__assert_fail@plt+0x8b8>
   12000:	mov	r0, #11
   12004:	b	1205c <__assert_fail@plt+0x8b8>
   12008:	bl	115d0 <__ctype_b_loc@plt>
   1200c:	ldr	r0, [r0]
   12010:	mov	r4, #8
   12014:	add	r0, r0, r7, lsl #1
   12018:	ldrb	r0, [r0, #1]
   1201c:	tst	r0, #8
   12020:	beq	12960 <__assert_fail@plt+0x11bc>
   12024:	bl	11630 <__errno_location@plt>
   12028:	mov	r1, #0
   1202c:	mov	r2, r4
   12030:	str	r1, [r0]
   12034:	str	r1, [sp, #52]	; 0x34
   12038:	mov	r0, r5
   1203c:	add	r1, sp, #52	; 0x34
   12040:	bl	115f4 <strtoul@plt>
   12044:	cmp	r0, #256	; 0x100
   12048:	bcs	1297c <__assert_fail@plt+0x11d8>
   1204c:	ldr	r5, [sp, #52]	; 0x34
   12050:	ldrb	r1, [r5]
   12054:	cmp	r1, #0
   12058:	bne	12990 <__assert_fail@plt+0x11ec>
   1205c:	movw	r5, #44680	; 0xae88
   12060:	mov	r7, sl
   12064:	movt	r5, #1
   12068:	movw	r1, #49684	; 0xc214
   1206c:	ldr	sl, [sp, #44]	; 0x2c
   12070:	mov	r4, #0
   12074:	movt	r1, #2
   12078:	strb	r0, [r1]
   1207c:	movw	r0, #13684	; 0x3574
   12080:	mov	r1, r6
   12084:	movt	r0, #1
   12088:	str	r0, [sp, #48]	; 0x30
   1208c:	movw	r2, #38823	; 0x97a7
   12090:	sub	r0, fp, #36	; 0x24
   12094:	mov	r6, r1
   12098:	mov	r1, sl
   1209c:	mov	r3, r5
   120a0:	str	r0, [sp]
   120a4:	mov	r0, r9
   120a8:	movt	r2, #1
   120ac:	bl	115c4 <getopt_long@plt>
   120b0:	cmp	r0, #82	; 0x52
   120b4:	ble	12144 <__assert_fail@plt+0x9a0>
   120b8:	sub	r1, r0, #97	; 0x61
   120bc:	cmp	r1, #23
   120c0:	bhi	11bc4 <__assert_fail@plt+0x420>
   120c4:	add	r0, pc, #0
   120c8:	ldr	pc, [r0, r1, lsl #2]
   120cc:	andeq	r2, r1, ip, lsr #2
   120d0:	andeq	r2, r1, r0, lsr #17
   120d4:	andeq	r2, r1, r0, lsr #17
   120d8:			; <UNDEFINED> instruction: 0x00011cbc
   120dc:	andeq	r1, r1, r0, lsr ip
   120e0:	andeq	r2, r1, r0, lsr #17
   120e4:	andeq	r2, r1, r0, lsr #17
   120e8:	muleq	r1, r8, r8
   120ec:	andeq	r1, r1, r0, lsl #22
   120f0:	andeq	r2, r1, r0, lsr #17
   120f4:	andeq	r2, r1, r0, lsr #17
   120f8:	andeq	r1, r1, r0, lsr #26
   120fc:	andeq	r2, r1, r0, lsr #17
   12100:	andeq	r1, r1, ip, asr #26
   12104:	andeq	r1, r1, r4, ror #27
   12108:	strdeq	r1, [r1], -r0
   1210c:	andeq	r2, r1, r0, lsr #17
   12110:	andeq	r1, r1, r0, lsr #25
   12114:	andeq	r1, r1, r0, lsl lr
   12118:			; <UNDEFINED> instruction: 0x00011cb0
   1211c:	andeq	r2, r1, r0, lsr #17
   12120:	andeq	r2, r1, ip, lsl #6
   12124:	andeq	r2, r1, r0, lsr #17
   12128:	muleq	r1, r4, ip
   1212c:	movw	r0, #49624	; 0xc1d8
   12130:	mov	r1, r6
   12134:	movt	r0, #2
   12138:	ldr	r0, [r0]
   1213c:	str	r0, [sp, #40]	; 0x28
   12140:	b	1208c <__assert_fail@plt+0x8e8>
   12144:	cmp	r0, #72	; 0x48
   12148:	bgt	11a4c <__assert_fail@plt+0x2a8>
   1214c:	cmn	r0, #1
   12150:	bne	11a24 <__assert_fail@plt+0x280>
   12154:	ldr	r1, [sp, #48]	; 0x30
   12158:	movw	r0, #13684	; 0x3574
   1215c:	movt	r0, #1
   12160:	cmp	r1, r0
   12164:	bne	121a0 <__assert_fail@plt+0x9fc>
   12168:	movw	r0, #49688	; 0xc218
   1216c:	movt	r0, #2
   12170:	ldr	r0, [r0]
   12174:	cmp	r0, #0
   12178:	beq	121a0 <__assert_fail@plt+0x9fc>
   1217c:	movw	r1, #39102	; 0x98be
   12180:	mov	r0, #0
   12184:	mov	r2, #5
   12188:	movt	r1, #1
   1218c:	bl	114a4 <dcgettext@plt>
   12190:	mov	r2, r0
   12194:	mov	r0, #0
   12198:	mov	r1, #0
   1219c:	bl	11564 <error@plt>
   121a0:	ldr	r0, [sp, #36]	; 0x24
   121a4:	blx	r0
   121a8:	ldr	r0, [sp, #32]
   121ac:	ldr	r8, [sp, #40]	; 0x28
   121b0:	cmp	r0, #0
   121b4:	bne	129b0 <__assert_fail@plt+0x120c>
   121b8:	movw	r0, #15188	; 0x3b54
   121bc:	add	r5, sp, #52	; 0x34
   121c0:	movt	r0, #1
   121c4:	add	r4, r5, #4
   121c8:	str	r0, [sp, #52]	; 0x34
   121cc:	mov	r0, r4
   121d0:	bl	116d8 <sigemptyset@plt>
   121d4:	mov	r7, #0
   121d8:	mov	r0, #10
   121dc:	mov	r1, r5
   121e0:	mov	r2, #0
   121e4:	str	r7, [sp, #184]	; 0xb8
   121e8:	bl	11510 <sigaction@plt>
   121ec:	cmp	r0, #0
   121f0:	beq	12220 <__assert_fail@plt+0xa7c>
   121f4:	bl	11630 <__errno_location@plt>
   121f8:	ldr	r5, [r0]
   121fc:	movw	r1, #39184	; 0x9910
   12200:	mov	r0, #0
   12204:	mov	r2, #5
   12208:	movt	r1, #1
   1220c:	bl	114a4 <dcgettext@plt>
   12210:	mov	r2, r0
   12214:	mov	r0, #0
   12218:	mov	r1, r5
   1221c:	bl	11564 <error@plt>
   12220:	movw	r0, #15236	; 0x3b84
   12224:	movt	r0, #1
   12228:	str	r0, [sp, #52]	; 0x34
   1222c:	mov	r0, r4
   12230:	bl	116d8 <sigemptyset@plt>
   12234:	add	r1, sp, #52	; 0x34
   12238:	mov	r0, #12
   1223c:	mov	r2, #0
   12240:	str	r7, [sp, #184]	; 0xb8
   12244:	bl	11510 <sigaction@plt>
   12248:	cmp	r0, #0
   1224c:	beq	1227c <__assert_fail@plt+0xad8>
   12250:	bl	11630 <__errno_location@plt>
   12254:	ldr	r4, [r0]
   12258:	movw	r1, #39218	; 0x9932
   1225c:	mov	r0, #0
   12260:	mov	r2, #5
   12264:	movt	r1, #1
   12268:	bl	114a4 <dcgettext@plt>
   1226c:	mov	r2, r0
   12270:	mov	r0, #0
   12274:	mov	r1, r4
   12278:	bl	11564 <error@plt>
   1227c:	movw	r1, #46891	; 0xb72b
   12280:	mov	r0, r8
   12284:	movt	r1, #1
   12288:	bl	113fc <strcmp@plt>
   1228c:	movw	r7, #49640	; 0xc1e8
   12290:	cmp	r0, #0
   12294:	movt	r7, #2
   12298:	beq	12320 <__assert_fail@plt+0xb7c>
   1229c:	movw	r0, #49704	; 0xc228
   122a0:	mov	r1, #1
   122a4:	movt	r0, #2
   122a8:	strb	r1, [r0]
   122ac:	mov	r0, r8
   122b0:	bl	13ba4 <__assert_fail@plt+0x2400>
   122b4:	movw	r1, #49700	; 0xc224
   122b8:	cmp	r0, #0
   122bc:	movt	r1, #2
   122c0:	str	r0, [r1]
   122c4:	bne	12338 <__assert_fail@plt+0xb94>
   122c8:	bl	11630 <__errno_location@plt>
   122cc:	ldr	r4, [r0]
   122d0:	movw	r1, #39252	; 0x9954
   122d4:	mov	r0, #0
   122d8:	mov	r2, #5
   122dc:	movt	r1, #1
   122e0:	bl	114a4 <dcgettext@plt>
   122e4:	mov	r5, r0
   122e8:	mov	r0, #0
   122ec:	mov	r1, #8
   122f0:	mov	r2, r8
   122f4:	bl	17a34 <__assert_fail@plt+0x6290>
   122f8:	mov	r3, r0
   122fc:	mov	r0, #1
   12300:	mov	r1, r4
   12304:	mov	r2, r5
   12308:	bl	11564 <error@plt>
   1230c:	movw	r0, #38673	; 0x9711
   12310:	movt	r0, #1
   12314:	bl	150fc <__assert_fail@plt+0x3958>
   12318:	mov	r0, #0
   1231c:	b	126ec <__assert_fail@plt+0xf48>
   12320:	movw	r0, #49616	; 0xc1d0
   12324:	movw	r1, #49700	; 0xc224
   12328:	movt	r0, #2
   1232c:	movt	r1, #2
   12330:	ldr	r0, [r0]
   12334:	str	r0, [r1]
   12338:	ldr	r0, [r7, #24]
   1233c:	cmp	r0, #0
   12340:	ldreq	r0, [r7, #36]	; 0x24
   12344:	cmpeq	r0, #0
   12348:	beq	12354 <__assert_fail@plt+0xbb0>
   1234c:	mov	r0, #1
   12350:	str	r0, [r7]
   12354:	movw	r8, #49600	; 0xc1c0
   12358:	movt	r8, #2
   1235c:	ldr	r0, [r8]
   12360:	cmp	r0, r9
   12364:	bne	12380 <__assert_fail@plt+0xbdc>
   12368:	mov	r0, #0
   1236c:	mov	r9, #1
   12370:	sub	sl, fp, #48	; 0x30
   12374:	str	r0, [r8]
   12378:	sub	r0, fp, #44	; 0x2c
   1237c:	str	r0, [fp, #-48]	; 0xffffffd0
   12380:	cmp	r6, #0
   12384:	bne	126f4 <__assert_fail@plt+0xf50>
   12388:	ldr	r0, [r7, #12]
   1238c:	add	r0, r0, #1
   12390:	bl	1852c <__assert_fail@plt+0x6d88>
   12394:	movw	r1, #49708	; 0xc22c
   12398:	movt	r1, #2
   1239c:	str	r0, [r1]
   123a0:	ldr	r0, [r7, #12]
   123a4:	add	r0, r0, #1
   123a8:	bl	1852c <__assert_fail@plt+0x6d88>
   123ac:	movw	r1, #49712	; 0xc230
   123b0:	movt	r1, #2
   123b4:	str	r0, [r1, #12]
   123b8:	mov	r0, #17
   123bc:	mov	r1, #0
   123c0:	bl	1148c <signal@plt>
   123c4:	ldr	r0, [r7, #24]
   123c8:	cmp	r0, #0
   123cc:	beq	12588 <__assert_fail@plt+0xde4>
   123d0:	lsl	r0, r9, #2
   123d4:	bl	1852c <__assert_fail@plt+0x6d88>
   123d8:	str	r0, [sp, #40]	; 0x28
   123dc:	ldr	r0, [r8]
   123e0:	cmp	r0, r9
   123e4:	bge	1240c <__assert_fail@plt+0xc68>
   123e8:	ldr	r1, [sp, #40]	; 0x28
   123ec:	sub	r4, r9, r0
   123f0:	add	r6, sl, r0, lsl #2
   123f4:	add	r5, r1, r0, lsl #2
   123f8:	ldr	r0, [r6], #4
   123fc:	bl	11600 <strlen@plt>
   12400:	str	r0, [r5], #4
   12404:	subs	r4, r4, #1
   12408:	bne	123f8 <__assert_fail@plt+0xc54>
   1240c:	ldr	r0, [r7, #24]
   12410:	str	sl, [sp, #44]	; 0x2c
   12414:	str	r9, [sp, #36]	; 0x24
   12418:	bl	11600 <strlen@plt>
   1241c:	str	r0, [r7, #20]
   12420:	ldr	r0, [sp, #48]	; 0x30
   12424:	blx	r0
   12428:	movw	r6, #49712	; 0xc230
   1242c:	cmn	r0, #1
   12430:	movt	r6, #2
   12434:	beq	126d0 <__assert_fail@plt+0xf2c>
   12438:	mov	r4, r0
   1243c:	ldr	r0, [sp, #44]	; 0x2c
   12440:	movw	r5, #49640	; 0xc1e8
   12444:	movw	r9, #49756	; 0xc25c
   12448:	mov	sl, #0
   1244c:	movt	r5, #2
   12450:	movt	r9, #2
   12454:	add	r0, r0, #4
   12458:	str	r0, [sp, #32]
   1245c:	ldr	r0, [sp, #40]	; 0x28
   12460:	add	r0, r0, #4
   12464:	str	r0, [sp, #28]
   12468:	ldr	r0, [sp, #36]	; 0x24
   1246c:	sub	r0, r0, #2
   12470:	str	r0, [sp, #24]
   12474:	mov	r0, r5
   12478:	mov	r1, r6
   1247c:	bl	1488c <__assert_fail@plt+0x30e8>
   12480:	ldr	r0, [r8]
   12484:	ldr	r1, [sp, #44]	; 0x2c
   12488:	str	sl, [r6, #16]
   1248c:	ldr	r2, [r1, r0, lsl #2]
   12490:	ldr	r1, [sp, #40]	; 0x28
   12494:	str	sl, [sp]
   12498:	str	sl, [sp, #4]
   1249c:	ldr	r0, [r1, r0, lsl #2]
   124a0:	ldrb	r1, [r9]
   124a4:	eor	r1, r1, #1
   124a8:	add	r3, r0, #1
   124ac:	mov	r0, r5
   124b0:	str	r1, [sp, #8]
   124b4:	mov	r1, r6
   124b8:	bl	1433c <__assert_fail@plt+0x2b98>
   124bc:	mov	r0, #1
   124c0:	ldr	r2, [sp, #36]	; 0x24
   124c4:	strb	r0, [r9]
   124c8:	ldr	r0, [r8]
   124cc:	add	r1, r0, #1
   124d0:	cmp	r1, r2
   124d4:	bge	12554 <__assert_fail@plt+0xdb0>
   124d8:	ldr	r1, [sp, #32]
   124dc:	sub	r4, r4, #1
   124e0:	add	r7, r1, r0, lsl #2
   124e4:	ldr	r1, [sp, #28]
   124e8:	add	r8, r1, r0, lsl #2
   124ec:	ldr	r1, [sp, #24]
   124f0:	sub	r6, r1, r0
   124f4:	mov	r0, #1
   124f8:	b	1250c <__assert_fail@plt+0xd68>
   124fc:	ldrb	r0, [r9]
   12500:	add	r7, r7, #4
   12504:	add	r8, r8, #4
   12508:	sub	r6, r6, #1
   1250c:	mov	r1, #1
   12510:	ldr	r2, [r7]
   12514:	ldr	r3, [r8]
   12518:	str	sl, [sp]
   1251c:	str	sl, [sp, #4]
   12520:	str	r4, [sp, #12]
   12524:	bic	r0, r1, r0
   12528:	movw	r1, #49708	; 0xc22c
   1252c:	movt	r1, #2
   12530:	str	r0, [sp, #16]
   12534:	mov	r0, r5
   12538:	ldr	r1, [r1]
   1253c:	str	r1, [sp, #8]
   12540:	movw	r1, #49712	; 0xc230
   12544:	movt	r1, #2
   12548:	bl	141c4 <__assert_fail@plt+0x2a20>
   1254c:	cmp	r6, #0
   12550:	bne	124fc <__assert_fail@plt+0xd58>
   12554:	movw	r6, #49712	; 0xc230
   12558:	mov	r0, r5
   1255c:	movt	r6, #2
   12560:	mov	r1, r6
   12564:	bl	145ac <__assert_fail@plt+0x2e08>
   12568:	ldr	r0, [sp, #48]	; 0x30
   1256c:	blx	r0
   12570:	movw	r8, #49600	; 0xc1c0
   12574:	mov	r4, r0
   12578:	cmn	r0, #1
   1257c:	movt	r8, #2
   12580:	bne	12474 <__assert_fail@plt+0xcd0>
   12584:	b	126d0 <__assert_fail@plt+0xf2c>
   12588:	ldr	r0, [r8]
   1258c:	cmp	r0, r9
   12590:	bge	125f8 <__assert_fail@plt+0xe54>
   12594:	movw	r4, #49640	; 0xc1e8
   12598:	movw	r5, #49712	; 0xc230
   1259c:	mov	r7, #0
   125a0:	movt	r4, #2
   125a4:	movt	r5, #2
   125a8:	ldr	r6, [sl, r0, lsl #2]
   125ac:	mov	r0, r6
   125b0:	bl	11600 <strlen@plt>
   125b4:	movw	r1, #49756	; 0xc25c
   125b8:	add	r3, r0, #1
   125bc:	mov	r0, r4
   125c0:	mov	r2, r6
   125c4:	str	r7, [sp]
   125c8:	str	r7, [sp, #4]
   125cc:	movt	r1, #2
   125d0:	ldrb	r1, [r1]
   125d4:	eor	r1, r1, #1
   125d8:	str	r1, [sp, #8]
   125dc:	mov	r1, r5
   125e0:	bl	1433c <__assert_fail@plt+0x2b98>
   125e4:	ldr	r0, [r8]
   125e8:	add	r0, r0, #1
   125ec:	cmp	r0, r9
   125f0:	str	r0, [r8]
   125f4:	blt	125a8 <__assert_fail@plt+0xe04>
   125f8:	movw	r0, #49756	; 0xc25c
   125fc:	mov	r1, #1
   12600:	movw	r7, #49640	; 0xc1e8
   12604:	movt	r0, #2
   12608:	movt	r7, #2
   1260c:	strb	r1, [r0]
   12610:	movw	r0, #49712	; 0xc230
   12614:	movt	r0, #2
   12618:	mov	r2, r0
   1261c:	ldr	r0, [r0]
   12620:	ldr	r1, [r2, #16]
   12624:	str	r0, [r7, #28]
   12628:	ldr	r0, [sp, #48]	; 0x30
   1262c:	str	r1, [r2, #20]
   12630:	blx	r0
   12634:	cmn	r0, #1
   12638:	beq	12684 <__assert_fail@plt+0xee0>
   1263c:	movw	r5, #49760	; 0xc260
   12640:	movw	r4, #49712	; 0xc230
   12644:	mov	r6, #0
   12648:	movt	r5, #2
   1264c:	movt	r4, #2
   12650:	ldr	r1, [r7, #36]	; 0x24
   12654:	ldr	r0, [r5]
   12658:	sub	r1, r1, #1
   1265c:	cmp	r1, r0
   12660:	bcs	12674 <__assert_fail@plt+0xed0>
   12664:	mov	r0, r7
   12668:	mov	r1, r4
   1266c:	bl	145ac <__assert_fail@plt+0x2e08>
   12670:	str	r6, [r5]
   12674:	ldr	r0, [sp, #48]	; 0x30
   12678:	blx	r0
   1267c:	cmn	r0, #1
   12680:	bne	12650 <__assert_fail@plt+0xeac>
   12684:	movw	r1, #49712	; 0xc230
   12688:	ldr	r0, [r7, #28]
   1268c:	movt	r1, #2
   12690:	ldr	r1, [r1]
   12694:	cmp	r1, r0
   12698:	bne	126bc <__assert_fail@plt+0xf18>
   1269c:	ldr	r0, [sp, #28]
   126a0:	cmp	r0, #0
   126a4:	beq	126d0 <__assert_fail@plt+0xf2c>
   126a8:	movw	r0, #49764	; 0xc264
   126ac:	movt	r0, #2
   126b0:	ldrb	r0, [r0]
   126b4:	cmp	r0, #0
   126b8:	bne	126d0 <__assert_fail@plt+0xf2c>
   126bc:	movw	r0, #49640	; 0xc1e8
   126c0:	movw	r1, #49712	; 0xc230
   126c4:	movt	r0, #2
   126c8:	movt	r1, #2
   126cc:	bl	145ac <__assert_fail@plt+0x2e08>
   126d0:	movw	r0, #49768	; 0xc268
   126d4:	movw	r2, #49636	; 0xc1e4
   126d8:	movt	r0, #2
   126dc:	movt	r2, #2
   126e0:	ldr	r1, [r0]
   126e4:	str	r1, [r2]
   126e8:	ldr	r0, [r0]
   126ec:	sub	sp, fp, #28
   126f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f4:	movw	r6, #49608	; 0xc1c8
   126f8:	movw	r1, #39278	; 0x996e
   126fc:	mov	r0, #0
   12700:	mov	r2, #5
   12704:	movt	r6, #2
   12708:	movt	r1, #1
   1270c:	ldr	r4, [r6]
   12710:	bl	114a4 <dcgettext@plt>
   12714:	mov	r5, r0
   12718:	bl	148cc <__assert_fail@plt+0x3128>
   1271c:	mov	r2, r0
   12720:	mov	r0, r4
   12724:	mov	r1, r5
   12728:	mov	r3, #0
   1272c:	bl	11624 <fprintf@plt>
   12730:	ldr	r4, [r6]
   12734:	movw	r1, #39325	; 0x999d
   12738:	mov	r0, #0
   1273c:	mov	r2, #5
   12740:	movt	r1, #1
   12744:	bl	114a4 <dcgettext@plt>
   12748:	ldr	r2, [r7, #4]
   1274c:	mov	r1, r0
   12750:	mov	r0, r4
   12754:	mov	r3, #0
   12758:	bl	11624 <fprintf@plt>
   1275c:	ldr	r4, [r6]
   12760:	movw	r1, #39383	; 0x99d7
   12764:	mov	r0, #0
   12768:	mov	r2, #5
   1276c:	movt	r1, #1
   12770:	bl	114a4 <dcgettext@plt>
   12774:	ldr	r2, [r7, #8]
   12778:	mov	r1, r0
   1277c:	mov	r0, r4
   12780:	mov	r3, #0
   12784:	bl	11624 <fprintf@plt>
   12788:	ldr	r4, [r6]
   1278c:	movw	r1, #39460	; 0x9a24
   12790:	mov	r0, #0
   12794:	mov	r2, #5
   12798:	movt	r1, #1
   1279c:	bl	114a4 <dcgettext@plt>
   127a0:	mov	r5, r0
   127a4:	movw	r0, #49640	; 0xc1e8
   127a8:	movt	r0, #2
   127ac:	ldr	r7, [r0, #4]
   127b0:	bl	148cc <__assert_fail@plt+0x3128>
   127b4:	sub	r2, r7, r0
   127b8:	movw	r7, #49640	; 0xc1e8
   127bc:	mov	r0, r4
   127c0:	mov	r1, r5
   127c4:	mov	r3, #0
   127c8:	movt	r7, #2
   127cc:	bl	11624 <fprintf@plt>
   127d0:	ldr	r4, [r6]
   127d4:	movw	r1, #39515	; 0x9a5b
   127d8:	mov	r0, #0
   127dc:	mov	r2, #5
   127e0:	movt	r1, #1
   127e4:	bl	114a4 <dcgettext@plt>
   127e8:	ldr	r2, [r7, #12]
   127ec:	mov	r1, r0
   127f0:	mov	r0, r4
   127f4:	mov	r3, #0
   127f8:	bl	11624 <fprintf@plt>
   127fc:	ldr	r4, [r6]
   12800:	movw	r1, #39567	; 0x9a8f
   12804:	mov	r0, #0
   12808:	mov	r2, #5
   1280c:	movt	r1, #1
   12810:	bl	114a4 <dcgettext@plt>
   12814:	mov	r1, r0
   12818:	mov	r0, r4
   1281c:	mvn	r2, #-2147483648	; 0x80000000
   12820:	mov	r3, #0
   12824:	bl	11624 <fprintf@plt>
   12828:	mov	r0, #0
   1282c:	bl	11744 <isatty@plt>
   12830:	cmp	r0, #0
   12834:	beq	12388 <__assert_fail@plt+0xbe4>
   12838:	ldr	r4, [r6]
   1283c:	movw	r1, #39627	; 0x9acb
   12840:	mov	r0, #0
   12844:	mov	r2, #5
   12848:	movt	r1, #1
   1284c:	bl	114a4 <dcgettext@plt>
   12850:	mov	r1, r0
   12854:	mov	r0, r4
   12858:	bl	11624 <fprintf@plt>
   1285c:	ldr	r0, [sp, #28]
   12860:	cmp	r0, #0
   12864:	beq	12388 <__assert_fail@plt+0xbe4>
   12868:	ldr	r4, [r6]
   1286c:	movw	r1, #39800	; 0x9b78
   12870:	mov	r0, #0
   12874:	mov	r2, #5
   12878:	movt	r1, #1
   1287c:	bl	114a4 <dcgettext@plt>
   12880:	mov	r1, r0
   12884:	ldr	r0, [r8]
   12888:	ldr	r2, [sl, r0, lsl #2]
   1288c:	mov	r0, r4
   12890:	bl	11624 <fprintf@plt>
   12894:	b	12388 <__assert_fail@plt+0xbe4>
   12898:	mov	r0, #0
   1289c:	bl	136dc <__assert_fail@plt+0x1f38>
   128a0:	mov	r0, #1
   128a4:	bl	136dc <__assert_fail@plt+0x1f38>
   128a8:	bl	11630 <__errno_location@plt>
   128ac:	ldr	r4, [r0]
   128b0:	movw	r1, #38703	; 0x972f
   128b4:	mov	r0, #0
   128b8:	mov	r2, #5
   128bc:	movt	r1, #1
   128c0:	bl	114a4 <dcgettext@plt>
   128c4:	mov	r2, r0
   128c8:	mov	r0, #1
   128cc:	mov	r1, r4
   128d0:	bl	11564 <error@plt>
   128d4:	movw	r1, #39005	; 0x985d
   128d8:	mov	r0, #0
   128dc:	mov	r2, #5
   128e0:	movt	r1, #1
   128e4:	bl	114a4 <dcgettext@plt>
   128e8:	mov	r2, r0
   128ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   128f0:	mov	r1, #0
   128f4:	ldr	r3, [r4, r0, lsl #4]
   128f8:	mov	r0, #1
   128fc:	bl	11564 <error@plt>
   12900:	bl	11630 <__errno_location@plt>
   12904:	ldr	r4, [r0]
   12908:	movw	r1, #39062	; 0x9896
   1290c:	mov	r0, #0
   12910:	mov	r2, #5
   12914:	movt	r1, #1
   12918:	bl	114a4 <dcgettext@plt>
   1291c:	mov	r2, r0
   12920:	movw	r0, #49696	; 0xc220
   12924:	mov	r1, r4
   12928:	movt	r0, #2
   1292c:	ldr	r3, [r0]
   12930:	mov	r0, #1
   12934:	bl	11564 <error@plt>
   12938:	movw	r1, #40081	; 0x9c91
   1293c:	mov	r0, #0
   12940:	mov	r2, #5
   12944:	movt	r1, #1
   12948:	bl	114a4 <dcgettext@plt>
   1294c:	mov	r2, r0
   12950:	mov	r0, #1
   12954:	mov	r1, #0
   12958:	mov	r3, r4
   1295c:	bl	11564 <error@plt>
   12960:	movw	r1, #40210	; 0x9d12
   12964:	mov	r0, #0
   12968:	mov	r2, #5
   1296c:	movt	r1, #1
   12970:	bl	114a4 <dcgettext@plt>
   12974:	mov	r2, r0
   12978:	b	129f0 <__assert_fail@plt+0x124c>
   1297c:	cmp	r4, #16
   12980:	bne	129d0 <__assert_fail@plt+0x122c>
   12984:	movw	r1, #40271	; 0x9d4f
   12988:	movt	r1, #1
   1298c:	b	129d8 <__assert_fail@plt+0x1234>
   12990:	movw	r1, #40469	; 0x9e15
   12994:	mov	r0, #0
   12998:	mov	r2, #5
   1299c:	movt	r1, #1
   129a0:	bl	114a4 <dcgettext@plt>
   129a4:	mov	r2, r0
   129a8:	str	r5, [sp]
   129ac:	b	129f0 <__assert_fail@plt+0x124c>
   129b0:	movw	r0, #39161	; 0x98f9
   129b4:	movw	r1, #38765	; 0x976d
   129b8:	movw	r3, #38773	; 0x9775
   129bc:	movw	r2, #723	; 0x2d3
   129c0:	movt	r0, #1
   129c4:	movt	r1, #1
   129c8:	movt	r3, #1
   129cc:	bl	117a4 <__assert_fail@plt>
   129d0:	movw	r1, #40370	; 0x9db2
   129d4:	movt	r1, #1
   129d8:	mov	r0, #0
   129dc:	mov	r2, #5
   129e0:	bl	114a4 <dcgettext@plt>
   129e4:	mov	r2, r0
   129e8:	mov	r0, #255	; 0xff
   129ec:	str	r0, [sp]
   129f0:	ldr	r3, [sp, #48]	; 0x30
   129f4:	mov	r0, #1
   129f8:	mov	r1, #0
   129fc:	bl	11564 <error@plt>
   12a00:	movw	r0, #38796	; 0x978c
   12a04:	movw	r1, #38765	; 0x976d
   12a08:	movw	r3, #38773	; 0x9775
   12a0c:	movw	r2, #511	; 0x1ff
   12a10:	movt	r0, #1
   12a14:	movt	r1, #1
   12a18:	movt	r3, #1
   12a1c:	bl	117a4 <__assert_fail@plt>
   12a20:	movw	r0, #38738	; 0x9752
   12a24:	movw	r1, #38765	; 0x976d
   12a28:	movw	r3, #38773	; 0x9775
   12a2c:	movw	r2, #483	; 0x1e3
   12a30:	movt	r0, #1
   12a34:	movt	r1, #1
   12a38:	movt	r3, #1
   12a3c:	bl	117a4 <__assert_fail@plt>
   12a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a44:	add	fp, sp, #28
   12a48:	sub	sp, sp, #28
   12a4c:	movw	r0, #49772	; 0xc26c
   12a50:	mvn	r4, #0
   12a54:	movt	r0, #2
   12a58:	ldrb	r0, [r0]
   12a5c:	cmp	r0, #0
   12a60:	bne	12ee4 <__assert_fail@plt+0x1740>
   12a64:	movw	r0, #49640	; 0xc1e8
   12a68:	movt	r0, #2
   12a6c:	ldr	r4, [r0, #12]
   12a70:	movw	r0, #49708	; 0xc22c
   12a74:	movt	r0, #2
   12a78:	ldr	r5, [r0]
   12a7c:	movw	r0, #49712	; 0xc230
   12a80:	movt	r0, #2
   12a84:	ldr	r6, [r0, #20]
   12a88:	movw	r0, #49700	; 0xc224
   12a8c:	movt	r0, #2
   12a90:	ldr	r0, [r0]
   12a94:	bl	11780 <getc@plt>
   12a98:	cmn	r0, #1
   12a9c:	beq	12d90 <__assert_fail@plt+0x15ec>
   12aa0:	add	r1, r5, r4
   12aa4:	movw	r9, #49760	; 0xc260
   12aa8:	mov	r2, #0
   12aac:	mvn	sl, #0
   12ab0:	mov	r4, #0
   12ab4:	mov	r7, #1
   12ab8:	sub	r1, r1, r6
   12abc:	movt	r9, #2
   12ac0:	str	r2, [sp, #24]
   12ac4:	sub	r1, r1, #1
   12ac8:	str	r1, [sp, #16]
   12acc:	mov	r1, #1
   12ad0:	str	r1, [sp, #20]
   12ad4:	mov	r6, sl
   12ad8:	mov	sl, r6
   12adc:	movw	r6, #49708	; 0xc22c
   12ae0:	movt	r6, #2
   12ae4:	mov	r8, sl
   12ae8:	mov	sl, r0
   12aec:	cmp	r7, #3
   12af0:	bhi	12c30 <__assert_fail@plt+0x148c>
   12af4:	add	r0, pc, #0
   12af8:	ldr	pc, [r0, r7, lsl #2]
   12afc:	andeq	r2, r1, r8, lsr fp
   12b00:	andeq	r2, r1, ip, lsl #22
   12b04:	andeq	r2, r1, r4, ror #23
   12b08:	andeq	r2, r1, ip, lsr #24
   12b0c:	cmp	sl, #127	; 0x7f
   12b10:	bhi	12bd0 <__assert_fail@plt+0x142c>
   12b14:	bl	115d0 <__ctype_b_loc@plt>
   12b18:	sub	r1, sl, #10
   12b1c:	cmp	r1, #4
   12b20:	bcc	12b80 <__assert_fail@plt+0x13dc>
   12b24:	ldr	r0, [r0]
   12b28:	add	r0, r0, sl, lsl #1
   12b2c:	ldrh	r0, [r0]
   12b30:	ands	r0, r0, #1
   12b34:	bne	12b80 <__assert_fail@plt+0x13dc>
   12b38:	cmp	sl, #10
   12b3c:	bne	12ba0 <__assert_fail@plt+0x13fc>
   12b40:	cmp	r8, #127	; 0x7f
   12b44:	bhi	12b5c <__assert_fail@plt+0x13b8>
   12b48:	bl	115d0 <__ctype_b_loc@plt>
   12b4c:	ldr	r0, [r0]
   12b50:	ldrb	r0, [r0, r8, lsl #1]
   12b54:	tst	r0, #1
   12b58:	bne	12b68 <__assert_fail@plt+0x13c4>
   12b5c:	ldr	r0, [r9]
   12b60:	add	r0, r0, #1
   12b64:	str	r0, [r9]
   12b68:	ldr	r7, [r6]
   12b6c:	subs	r0, r5, r7
   12b70:	movwne	r0, #1
   12b74:	orr	r0, r4, r0
   12b78:	tst	r0, #1
   12b7c:	bne	12e54 <__assert_fail@plt+0x16b0>
   12b80:	movw	r0, #49700	; 0xc224
   12b84:	movt	r0, #2
   12b88:	ldr	r0, [r0]
   12b8c:	bl	11780 <getc@plt>
   12b90:	mov	r7, #1
   12b94:	cmn	r0, #1
   12b98:	bne	12ae4 <__assert_fail@plt+0x1340>
   12b9c:	b	12da8 <__assert_fail@plt+0x1604>
   12ba0:	cmp	sl, #127	; 0x7f
   12ba4:	bhi	12bd0 <__assert_fail@plt+0x142c>
   12ba8:	movw	r0, #49640	; 0xc1e8
   12bac:	movt	r0, #2
   12bb0:	ldr	r0, [r0, #24]
   12bb4:	cmp	r0, #0
   12bb8:	bne	12bd0 <__assert_fail@plt+0x142c>
   12bbc:	bl	115d0 <__ctype_b_loc@plt>
   12bc0:	ldr	r0, [r0]
   12bc4:	ldrb	r0, [r0, sl, lsl #1]
   12bc8:	tst	r0, #1
   12bcc:	bne	12cb4 <__assert_fail@plt+0x1510>
   12bd0:	mov	r7, #3
   12bd4:	cmp	sl, #92	; 0x5c
   12bd8:	bne	12c1c <__assert_fail@plt+0x1478>
   12bdc:	mov	r6, sl
   12be0:	b	12bfc <__assert_fail@plt+0x1458>
   12be4:	cmp	sl, #10
   12be8:	beq	12f54 <__assert_fail@plt+0x17b0>
   12bec:	ldr	r6, [sp, #24]
   12bf0:	mov	r7, #0
   12bf4:	cmp	sl, r6
   12bf8:	bne	12cac <__assert_fail@plt+0x1508>
   12bfc:	movw	r0, #49700	; 0xc224
   12c00:	movt	r0, #2
   12c04:	ldr	r0, [r0]
   12c08:	bl	11780 <getc@plt>
   12c0c:	mov	r4, #1
   12c10:	cmn	r0, #1
   12c14:	bne	12ad8 <__assert_fail@plt+0x1334>
   12c18:	b	12f10 <__assert_fail@plt+0x176c>
   12c1c:	cmp	sl, #34	; 0x22
   12c20:	cmpne	sl, #39	; 0x27
   12c24:	beq	12d64 <__assert_fail@plt+0x15c0>
   12c28:	mov	r4, #1
   12c2c:	mov	r7, #0
   12c30:	cmp	sl, #0
   12c34:	movweq	r0, #49776	; 0xc270
   12c38:	movteq	r0, #2
   12c3c:	ldrbeq	r0, [r0]
   12c40:	cmpeq	r0, #0
   12c44:	bne	12c7c <__assert_fail@plt+0x14d8>
   12c48:	movw	r1, #40749	; 0x9f2d
   12c4c:	mov	r0, #0
   12c50:	mov	r2, #5
   12c54:	movt	r1, #1
   12c58:	bl	114a4 <dcgettext@plt>
   12c5c:	mov	r2, r0
   12c60:	mov	r0, #0
   12c64:	mov	r1, #0
   12c68:	bl	11564 <error@plt>
   12c6c:	movw	r1, #49776	; 0xc270
   12c70:	mov	r0, #1
   12c74:	movt	r1, #2
   12c78:	strb	r0, [r1]
   12c7c:	ldr	r0, [sp, #16]
   12c80:	cmp	r5, r0
   12c84:	bcs	12f2c <__assert_fail@plt+0x1788>
   12c88:	movw	r0, #49700	; 0xc224
   12c8c:	strb	sl, [r5], #1
   12c90:	movt	r0, #2
   12c94:	ldr	r0, [r0]
   12c98:	bl	11780 <getc@plt>
   12c9c:	cmn	r0, #1
   12ca0:	mov	r6, sl
   12ca4:	bne	12ad8 <__assert_fail@plt+0x1334>
   12ca8:	b	12f10 <__assert_fail@plt+0x176c>
   12cac:	mov	r7, #2
   12cb0:	b	12c30 <__assert_fail@plt+0x148c>
   12cb4:	mov	r0, #0
   12cb8:	strb	r0, [r5], #1
   12cbc:	movw	r0, #49688	; 0xc218
   12cc0:	movt	r0, #2
   12cc4:	ldr	r7, [r6]
   12cc8:	ldr	r0, [r0]
   12ccc:	sub	r4, r5, r7
   12cd0:	cmp	r0, #0
   12cd4:	beq	12cf8 <__assert_fail@plt+0x1554>
   12cd8:	ldrb	r1, [r7]
   12cdc:	ldrb	r2, [r0]
   12ce0:	cmp	r2, r1
   12ce4:	bne	12cf8 <__assert_fail@plt+0x1554>
   12ce8:	mov	r1, r7
   12cec:	bl	113fc <strcmp@plt>
   12cf0:	cmp	r0, #0
   12cf4:	beq	12ef0 <__assert_fail@plt+0x174c>
   12cf8:	movw	r0, #49756	; 0xc25c
   12cfc:	mov	r1, #0
   12d00:	mov	r2, #0
   12d04:	mov	r3, r4
   12d08:	movt	r0, #2
   12d0c:	str	r1, [sp, #20]
   12d10:	movw	r1, #49712	; 0xc230
   12d14:	str	r2, [sp]
   12d18:	str	r2, [sp, #4]
   12d1c:	mov	r2, r7
   12d20:	ldrb	r0, [r0]
   12d24:	movt	r1, #2
   12d28:	eor	r0, r0, #1
   12d2c:	str	r0, [sp, #8]
   12d30:	movw	r0, #49640	; 0xc1e8
   12d34:	movt	r0, #2
   12d38:	bl	1433c <__assert_fail@plt+0x2b98>
   12d3c:	movw	r0, #49700	; 0xc224
   12d40:	ldr	r5, [r6]
   12d44:	movt	r0, #2
   12d48:	ldr	r0, [r0]
   12d4c:	bl	11780 <getc@plt>
   12d50:	mov	r4, #1
   12d54:	cmn	r0, #1
   12d58:	mov	r7, #1
   12d5c:	bne	12ad4 <__assert_fail@plt+0x1330>
   12d60:	b	12f1c <__assert_fail@plt+0x1778>
   12d64:	movw	r0, #49700	; 0xc224
   12d68:	movt	r0, #2
   12d6c:	ldr	r0, [r0]
   12d70:	bl	11780 <getc@plt>
   12d74:	ldr	r1, [sp, #20]
   12d78:	mov	r4, #1
   12d7c:	mov	r7, #2
   12d80:	cmn	r0, #1
   12d84:	str	sl, [sp, #24]
   12d88:	bne	12ad0 <__assert_fail@plt+0x132c>
   12d8c:	b	12db0 <__assert_fail@plt+0x160c>
   12d90:	mov	sl, #0
   12d94:	mov	r1, #1
   12d98:	mov	r7, #1
   12d9c:	movw	r6, #49708	; 0xc22c
   12da0:	movt	r6, #2
   12da4:	b	12db0 <__assert_fail@plt+0x160c>
   12da8:	ldr	sl, [sp, #24]
   12dac:	ldr	r1, [sp, #20]
   12db0:	ldr	r6, [r6]
   12db4:	movw	r0, #49772	; 0xc26c
   12db8:	mov	r2, #1
   12dbc:	movt	r0, #2
   12dc0:	strb	r2, [r0]
   12dc4:	cmp	r5, r6
   12dc8:	beq	12e4c <__assert_fail@plt+0x16a8>
   12dcc:	mov	r0, #0
   12dd0:	cmp	r7, #2
   12dd4:	strb	r0, [r5], #1
   12dd8:	beq	12f8c <__assert_fail@plt+0x17e8>
   12ddc:	movw	r0, #49688	; 0xc218
   12de0:	mvn	r1, r1
   12de4:	mvn	r4, #0
   12de8:	movt	r0, #2
   12dec:	ldr	r0, [r0]
   12df0:	clz	r2, r0
   12df4:	lsr	r2, r2, #5
   12df8:	orr	r1, r1, r2
   12dfc:	tst	r1, #1
   12e00:	bne	12e24 <__assert_fail@plt+0x1680>
   12e04:	ldrb	r1, [r6]
   12e08:	ldrb	r2, [r0]
   12e0c:	cmp	r2, r1
   12e10:	bne	12e24 <__assert_fail@plt+0x1680>
   12e14:	mov	r1, r6
   12e18:	bl	113fc <strcmp@plt>
   12e1c:	cmp	r0, #0
   12e20:	beq	12ee4 <__assert_fail@plt+0x1740>
   12e24:	movw	r0, #49640	; 0xc1e8
   12e28:	sub	r4, r5, r6
   12e2c:	movt	r0, #2
   12e30:	ldr	r0, [r0, #24]
   12e34:	cmp	r0, #0
   12e38:	bne	12ee4 <__assert_fail@plt+0x1740>
   12e3c:	movw	r0, #49756	; 0xc25c
   12e40:	mov	r1, #0
   12e44:	mov	r2, r6
   12e48:	b	12eb4 <__assert_fail@plt+0x1710>
   12e4c:	mvn	r4, #0
   12e50:	b	12ee4 <__assert_fail@plt+0x1740>
   12e54:	mov	r0, #0
   12e58:	strb	r0, [r5], #1
   12e5c:	movw	r0, #49688	; 0xc218
   12e60:	movt	r0, #2
   12e64:	sub	r4, r5, r7
   12e68:	ldr	r0, [r0]
   12e6c:	cmp	r0, #0
   12e70:	beq	12e94 <__assert_fail@plt+0x16f0>
   12e74:	ldrb	r1, [r7]
   12e78:	ldrb	r2, [r0]
   12e7c:	cmp	r2, r1
   12e80:	bne	12e94 <__assert_fail@plt+0x16f0>
   12e84:	mov	r1, r7
   12e88:	bl	113fc <strcmp@plt>
   12e8c:	cmp	r0, #0
   12e90:	beq	12ef0 <__assert_fail@plt+0x174c>
   12e94:	movw	r0, #49640	; 0xc1e8
   12e98:	movt	r0, #2
   12e9c:	ldr	r0, [r0, #24]
   12ea0:	cmp	r0, #0
   12ea4:	bne	12ee4 <__assert_fail@plt+0x1740>
   12ea8:	movw	r0, #49756	; 0xc25c
   12eac:	mov	r1, #0
   12eb0:	mov	r2, r7
   12eb4:	movt	r0, #2
   12eb8:	str	r1, [sp]
   12ebc:	str	r1, [sp, #4]
   12ec0:	movw	r1, #49712	; 0xc230
   12ec4:	ldrb	r0, [r0]
   12ec8:	movt	r1, #2
   12ecc:	eor	r0, r0, #1
   12ed0:	str	r0, [sp, #8]
   12ed4:	movw	r0, #49640	; 0xc1e8
   12ed8:	movt	r0, #2
   12edc:	mov	r3, r4
   12ee0:	bl	1433c <__assert_fail@plt+0x2b98>
   12ee4:	mov	r0, r4
   12ee8:	sub	sp, fp, #28
   12eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ef0:	movw	r1, #49772	; 0xc26c
   12ef4:	mov	r0, #1
   12ef8:	movt	r1, #2
   12efc:	strb	r0, [r1]
   12f00:	ldr	r0, [sp, #20]
   12f04:	tst	r0, #1
   12f08:	mvnne	r4, #0
   12f0c:	b	12ee4 <__assert_fail@plt+0x1740>
   12f10:	ldr	sl, [sp, #24]
   12f14:	ldr	r1, [sp, #20]
   12f18:	b	12d9c <__assert_fail@plt+0x15f8>
   12f1c:	ldr	sl, [sp, #24]
   12f20:	mov	r7, #1
   12f24:	mov	r1, #0
   12f28:	b	12db0 <__assert_fail@plt+0x160c>
   12f2c:	bl	13c00 <__assert_fail@plt+0x245c>
   12f30:	movw	r1, #40888	; 0x9fb8
   12f34:	mov	r0, #0
   12f38:	mov	r2, #5
   12f3c:	movt	r1, #1
   12f40:	bl	114a4 <dcgettext@plt>
   12f44:	mov	r2, r0
   12f48:	mov	r0, #1
   12f4c:	mov	r1, #0
   12f50:	bl	11564 <error@plt>
   12f54:	bl	13c00 <__assert_fail@plt+0x245c>
   12f58:	movw	r1, #40647	; 0x9ec7
   12f5c:	mov	r0, #0
   12f60:	mov	r2, #5
   12f64:	movt	r1, #1
   12f68:	bl	114a4 <dcgettext@plt>
   12f6c:	ldr	r2, [sp, #24]
   12f70:	movw	r1, #40742	; 0x9f26
   12f74:	mov	r4, r0
   12f78:	movw	r0, #40735	; 0x9f1f
   12f7c:	movt	r0, #1
   12f80:	movt	r1, #1
   12f84:	cmp	r2, #34	; 0x22
   12f88:	b	12fbc <__assert_fail@plt+0x1818>
   12f8c:	bl	13c00 <__assert_fail@plt+0x245c>
   12f90:	movw	r1, #40647	; 0x9ec7
   12f94:	mov	r0, #0
   12f98:	mov	r2, #5
   12f9c:	movt	r1, #1
   12fa0:	bl	114a4 <dcgettext@plt>
   12fa4:	movw	r1, #40742	; 0x9f26
   12fa8:	mov	r4, r0
   12fac:	movw	r0, #40735	; 0x9f1f
   12fb0:	cmp	sl, #34	; 0x22
   12fb4:	movt	r0, #1
   12fb8:	movt	r1, #1
   12fbc:	moveq	r1, r0
   12fc0:	mov	r0, #0
   12fc4:	mov	r2, #5
   12fc8:	bl	114a4 <dcgettext@plt>
   12fcc:	mov	r3, r0
   12fd0:	mov	r0, #1
   12fd4:	mov	r1, #0
   12fd8:	mov	r2, r4
   12fdc:	bl	11564 <error@plt>
   12fe0:	bx	lr
   12fe4:	push	{r4, r5, fp, lr}
   12fe8:	add	fp, sp, #8
   12fec:	bl	115dc <getpid@plt>
   12ff0:	movw	r1, #49632	; 0xc1e0
   12ff4:	movt	r1, #2
   12ff8:	ldr	r1, [r1]
   12ffc:	cmp	r0, r1
   13000:	bne	13058 <__assert_fail@plt+0x18b4>
   13004:	movw	r4, #49800	; 0xc288
   13008:	movt	r4, #2
   1300c:	ldrb	r0, [r4]
   13010:	cmp	r0, #0
   13014:	popne	{r4, r5, fp, pc}
   13018:	mov	r0, #1
   1301c:	mov	r1, #0
   13020:	mov	r5, #0
   13024:	strb	r0, [r4]
   13028:	mov	r0, #1
   1302c:	bl	13c64 <__assert_fail@plt+0x24c0>
   13030:	movw	r0, #49636	; 0xc1e4
   13034:	strb	r5, [r4]
   13038:	movt	r0, #2
   1303c:	ldr	r1, [r0]
   13040:	movw	r0, #49768	; 0xc268
   13044:	movt	r0, #2
   13048:	ldr	r2, [r0]
   1304c:	cmp	r1, r2
   13050:	bne	13078 <__assert_fail@plt+0x18d4>
   13054:	pop	{r4, r5, fp, pc}
   13058:	movw	r0, #41637	; 0xa2a5
   1305c:	movw	r1, #38765	; 0x976d
   13060:	movw	r3, #41657	; 0xa2b9
   13064:	movw	r2, #1605	; 0x645
   13068:	movt	r0, #1
   1306c:	movt	r1, #1
   13070:	movt	r3, #1
   13074:	bl	117a4 <__assert_fail@plt>
   13078:	ldr	r0, [r0]
   1307c:	bl	1145c <_exit@plt>
   13080:	push	{fp, lr}
   13084:	mov	fp, sp
   13088:	movw	r1, #39912	; 0x9be8
   1308c:	mov	r0, #0
   13090:	mov	r2, #5
   13094:	movt	r1, #1
   13098:	bl	114a4 <dcgettext@plt>
   1309c:	mov	r2, r0
   130a0:	mov	r0, #1
   130a4:	mov	r1, #0
   130a8:	bl	11564 <error@plt>
   130ac:	push	{r4, r5, r6, r7, fp, lr}
   130b0:	add	fp, sp, #16
   130b4:	sub	sp, sp, #32
   130b8:	movw	r5, #49504	; 0xc160
   130bc:	mov	r4, r3
   130c0:	movt	r5, #2
   130c4:	ldr	r0, [r5]
   130c8:	cmp	r0, #0
   130cc:	beq	130fc <__assert_fail@plt+0x1958>
   130d0:	ldr	r0, [r5]
   130d4:	movw	r6, #49780	; 0xc274
   130d8:	movt	r6, #2
   130dc:	b	130f0 <__assert_fail@plt+0x194c>
   130e0:	mov	r0, #0
   130e4:	mov	r1, #1
   130e8:	bl	13c64 <__assert_fail@plt+0x24c0>
   130ec:	ldr	r0, [r5]
   130f0:	ldr	r1, [r6]
   130f4:	cmp	r1, r0
   130f8:	bcs	130e0 <__assert_fail@plt+0x193c>
   130fc:	movw	r5, #49694	; 0xc21e
   13100:	movt	r5, #2
   13104:	ldrb	r0, [r5]
   13108:	cmp	r0, #1
   1310c:	bne	13130 <__assert_fail@plt+0x198c>
   13110:	mov	r0, #1
   13114:	mov	r6, #1
   13118:	bl	13f24 <__assert_fail@plt+0x2780>
   1311c:	cmp	r0, #0
   13120:	beq	13294 <__assert_fail@plt+0x1af0>
   13124:	ldrb	r0, [r5]
   13128:	cmp	r0, #0
   1312c:	bne	13148 <__assert_fail@plt+0x19a4>
   13130:	movw	r0, #49692	; 0xc21c
   13134:	movt	r0, #2
   13138:	ldrb	r0, [r0]
   1313c:	cmp	r0, #1
   13140:	moveq	r0, #0
   13144:	bleq	13f24 <__assert_fail@plt+0x2780>
   13148:	mov	r0, #0
   1314c:	mov	r1, #0
   13150:	bl	13c64 <__assert_fail@plt+0x24c0>
   13154:	add	r0, sp, #4
   13158:	bl	18024 <__assert_fail@plt+0x6880>
   1315c:	cmp	r0, #0
   13160:	bne	132a0 <__assert_fail@plt+0x1afc>
   13164:	ldr	r0, [sp, #8]
   13168:	mov	r1, #2
   1316c:	mov	r2, #1
   13170:	bl	18e7c <__assert_fail@plt+0x76d8>
   13174:	bl	116e4 <fork@plt>
   13178:	mov	r5, r0
   1317c:	cmn	r0, #1
   13180:	ble	13200 <__assert_fail@plt+0x1a5c>
   13184:	cmp	r5, #0
   13188:	beq	132b4 <__assert_fail@plt+0x1b10>
   1318c:	cmn	r5, #1
   13190:	beq	13390 <__assert_fail@plt+0x1bec>
   13194:	ldr	r0, [sp, #8]
   13198:	bl	1178c <close@plt>
   1319c:	ldr	r0, [sp, #4]
   131a0:	add	r1, sp, #12
   131a4:	mov	r2, #4
   131a8:	bl	17f4c <__assert_fail@plt+0x67a8>
   131ac:	cmp	r0, #4
   131b0:	beq	1326c <__assert_fail@plt+0x1ac8>
   131b4:	mov	r4, r0
   131b8:	cmp	r0, #0
   131bc:	beq	13254 <__assert_fail@plt+0x1ab0>
   131c0:	cmn	r4, #1
   131c4:	bne	133bc <__assert_fail@plt+0x1c18>
   131c8:	ldr	r0, [sp, #4]
   131cc:	bl	1178c <close@plt>
   131d0:	bl	11630 <__errno_location@plt>
   131d4:	ldr	r4, [r0]
   131d8:	movw	r1, #40957	; 0x9ffd
   131dc:	mov	r0, #0
   131e0:	mov	r2, #5
   131e4:	movt	r1, #1
   131e8:	bl	114a4 <dcgettext@plt>
   131ec:	mov	r2, r0
   131f0:	mov	r0, #0
   131f4:	mov	r1, r4
   131f8:	bl	11564 <error@plt>
   131fc:	b	1325c <__assert_fail@plt+0x1ab8>
   13200:	bl	11630 <__errno_location@plt>
   13204:	mov	r6, r0
   13208:	ldr	r0, [r0]
   1320c:	cmp	r0, #11
   13210:	bne	13184 <__assert_fail@plt+0x19e0>
   13214:	movw	r7, #49780	; 0xc274
   13218:	movt	r7, #2
   1321c:	ldr	r0, [r7]
   13220:	cmp	r0, #0
   13224:	beq	13184 <__assert_fail@plt+0x19e0>
   13228:	mov	r0, #0
   1322c:	mov	r1, #1
   13230:	bl	13c64 <__assert_fail@plt+0x24c0>
   13234:	bl	116e4 <fork@plt>
   13238:	mov	r5, r0
   1323c:	cmp	r0, #0
   13240:	bge	13184 <__assert_fail@plt+0x19e0>
   13244:	ldr	r0, [r6]
   13248:	cmp	r0, #11
   1324c:	beq	1321c <__assert_fail@plt+0x1a78>
   13250:	b	13184 <__assert_fail@plt+0x19e0>
   13254:	mov	r0, r5
   13258:	bl	140cc <__assert_fail@plt+0x2928>
   1325c:	ldr	r0, [sp, #4]
   13260:	bl	1178c <close@plt>
   13264:	mov	r6, #1
   13268:	b	13294 <__assert_fail@plt+0x1af0>
   1326c:	ldr	r0, [sp, #4]
   13270:	bl	1178c <close@plt>
   13274:	mov	r1, sp
   13278:	mov	r0, r5
   1327c:	mov	r2, #0
   13280:	mov	r6, #0
   13284:	bl	11528 <waitpid@plt>
   13288:	ldr	r0, [sp, #12]
   1328c:	cmp	r0, #7
   13290:	bne	133ec <__assert_fail@plt+0x1c48>
   13294:	mov	r0, r6
   13298:	sub	sp, fp, #16
   1329c:	pop	{r4, r5, r6, r7, fp, pc}
   132a0:	bl	11630 <__errno_location@plt>
   132a4:	ldr	r4, [r0]
   132a8:	movw	r1, #40911	; 0x9fcf
   132ac:	movt	r1, #1
   132b0:	b	133a0 <__assert_fail@plt+0x1bfc>
   132b4:	ldr	r0, [sp, #4]
   132b8:	bl	1178c <close@plt>
   132bc:	movw	r0, #49768	; 0xc268
   132c0:	mov	r1, #0
   132c4:	movt	r0, #2
   132c8:	str	r1, [r0]
   132cc:	bl	14fc4 <__assert_fail@plt+0x3820>
   132d0:	cmp	r0, #0
   132d4:	beq	132dc <__assert_fail@plt+0x1b38>
   132d8:	bl	14fe4 <__assert_fail@plt+0x3840>
   132dc:	mov	r0, #0
   132e0:	bl	140cc <__assert_fail@plt+0x2928>
   132e4:	movw	r2, #41464	; 0xa1f8
   132e8:	mov	r3, r0
   132ec:	add	r0, sp, #12
   132f0:	mov	r1, #19
   132f4:	movt	r2, #1
   132f8:	bl	1163c <snprintf@plt>
   132fc:	cmp	r0, #20
   13300:	bcs	133fc <__assert_fail@plt+0x1c58>
   13304:	movw	r6, #49696	; 0xc220
   13308:	movt	r6, #2
   1330c:	ldr	r0, [r6]
   13310:	cmp	r0, #0
   13314:	beq	1335c <__assert_fail@plt+0x1bb8>
   13318:	add	r1, sp, #12
   1331c:	mov	r2, #1
   13320:	bl	11618 <setenv@plt>
   13324:	cmn	r0, #1
   13328:	bgt	1335c <__assert_fail@plt+0x1bb8>
   1332c:	bl	11630 <__errno_location@plt>
   13330:	ldr	r5, [r0]
   13334:	movw	r1, #41557	; 0xa255
   13338:	mov	r0, #0
   1333c:	mov	r2, #5
   13340:	movt	r1, #1
   13344:	bl	114a4 <dcgettext@plt>
   13348:	ldr	r3, [r6]
   1334c:	mov	r2, r0
   13350:	mov	r0, #0
   13354:	mov	r1, r5
   13358:	bl	11564 <error@plt>
   1335c:	movw	r1, #49704	; 0xc228
   13360:	movw	r7, #49693	; 0xc21d
   13364:	movt	r1, #2
   13368:	movt	r7, #2
   1336c:	ldrb	r1, [r1]
   13370:	ldrb	r0, [r7]
   13374:	cmp	r1, #0
   13378:	beq	13424 <__assert_fail@plt+0x1c80>
   1337c:	cmp	r0, #0
   13380:	beq	134cc <__assert_fail@plt+0x1d28>
   13384:	movw	r5, #41323	; 0xa16b
   13388:	movt	r5, #1
   1338c:	b	1343c <__assert_fail@plt+0x1c98>
   13390:	bl	11630 <__errno_location@plt>
   13394:	ldr	r4, [r0]
   13398:	movw	r1, #40945	; 0x9ff1
   1339c:	movt	r1, #1
   133a0:	mov	r0, #0
   133a4:	mov	r2, #5
   133a8:	bl	114a4 <dcgettext@plt>
   133ac:	mov	r2, r0
   133b0:	mov	r0, #1
   133b4:	mov	r1, r4
   133b8:	bl	11564 <error@plt>
   133bc:	bl	11630 <__errno_location@plt>
   133c0:	ldr	r5, [r0]
   133c4:	movw	r1, #41047	; 0xa057
   133c8:	mov	r0, #0
   133cc:	mov	r2, #5
   133d0:	movt	r1, #1
   133d4:	bl	114a4 <dcgettext@plt>
   133d8:	mov	r2, r0
   133dc:	mov	r0, #1
   133e0:	mov	r1, r5
   133e4:	mov	r3, r4
   133e8:	bl	11564 <error@plt>
   133ec:	cmp	r0, #2
   133f0:	bne	1341c <__assert_fail@plt+0x1c78>
   133f4:	mov	r0, #127	; 0x7f
   133f8:	bl	115e8 <exit@plt>
   133fc:	movw	r0, #41467	; 0xa1fb
   13400:	movw	r1, #38765	; 0x976d
   13404:	movw	r3, #41525	; 0xa235
   13408:	movw	r2, #1190	; 0x4a6
   1340c:	movt	r0, #1
   13410:	movt	r1, #1
   13414:	movt	r3, #1
   13418:	bl	117a4 <__assert_fail@plt>
   1341c:	mov	r0, #126	; 0x7e
   13420:	bl	115e8 <exit@plt>
   13424:	movw	r1, #41323	; 0xa16b
   13428:	movw	r5, #41399	; 0xa1b7
   1342c:	cmp	r0, #0
   13430:	movt	r1, #1
   13434:	movt	r5, #1
   13438:	movne	r5, r1
   1343c:	mov	r0, #0
   13440:	bl	1178c <close@plt>
   13444:	mov	r0, r5
   13448:	mov	r1, #0
   1344c:	bl	15760 <__assert_fail@plt+0x3fbc>
   13450:	cmn	r0, #1
   13454:	bgt	13494 <__assert_fail@plt+0x1cf0>
   13458:	ldrb	r7, [r7]
   1345c:	bl	11630 <__errno_location@plt>
   13460:	ldr	r6, [r0]
   13464:	mov	r0, #0
   13468:	mov	r1, #8
   1346c:	mov	r2, r5
   13470:	bl	17a34 <__assert_fail@plt+0x6290>
   13474:	movw	r2, #46263	; 0xb4b7
   13478:	mov	r3, r0
   1347c:	cmp	r7, #1
   13480:	movt	r2, #1
   13484:	bne	134c0 <__assert_fail@plt+0x1d1c>
   13488:	mov	r0, #1
   1348c:	mov	r1, r6
   13490:	bl	11564 <error@plt>
   13494:	mov	r6, r0
   13498:	cmp	r0, #0
   1349c:	beq	134cc <__assert_fail@plt+0x1d28>
   134a0:	mov	r0, r6
   134a4:	mov	r1, #0
   134a8:	bl	114bc <dup2@plt>
   134ac:	cmp	r0, #0
   134b0:	bne	13560 <__assert_fail@plt+0x1dbc>
   134b4:	mov	r0, r6
   134b8:	bl	1178c <close@plt>
   134bc:	b	134cc <__assert_fail@plt+0x1d28>
   134c0:	mov	r0, #0
   134c4:	mov	r1, r6
   134c8:	bl	11564 <error@plt>
   134cc:	mov	r0, r4
   134d0:	bl	14a98 <__assert_fail@plt+0x32f4>
   134d4:	cmp	r0, #0
   134d8:	beq	134f0 <__assert_fail@plt+0x1d4c>
   134dc:	bl	11630 <__errno_location@plt>
   134e0:	mov	r5, r0
   134e4:	mov	r0, #7
   134e8:	str	r0, [r5]
   134ec:	b	13510 <__assert_fail@plt+0x1d6c>
   134f0:	ldr	r0, [r4]
   134f4:	mov	r1, r4
   134f8:	bl	11474 <execvp@plt>
   134fc:	bl	11630 <__errno_location@plt>
   13500:	mov	r5, r0
   13504:	ldr	r0, [r0]
   13508:	cmp	r0, #0
   1350c:	beq	13520 <__assert_fail@plt+0x1d7c>
   13510:	ldr	r0, [sp, #8]
   13514:	mov	r1, r5
   13518:	mov	r2, #4
   1351c:	bl	1166c <write@plt>
   13520:	ldr	r0, [sp, #8]
   13524:	bl	1178c <close@plt>
   13528:	ldr	r1, [r5]
   1352c:	mov	r0, #126	; 0x7e
   13530:	cmp	r1, #7
   13534:	beq	1355c <__assert_fail@plt+0x1db8>
   13538:	ldr	r3, [r4]
   1353c:	movw	r2, #46263	; 0xb4b7
   13540:	mov	r0, #0
   13544:	movt	r2, #1
   13548:	bl	11564 <error@plt>
   1354c:	ldr	r1, [r5]
   13550:	mov	r0, #126	; 0x7e
   13554:	cmp	r1, #2
   13558:	movweq	r0, #127	; 0x7f
   1355c:	bl	1145c <_exit@plt>
   13560:	bl	11630 <__errno_location@plt>
   13564:	ldr	r4, [r0]
   13568:	movw	r1, #41409	; 0xa1c1
   1356c:	movt	r1, #1
   13570:	b	133a0 <__assert_fail@plt+0x1bfc>
   13574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13578:	add	fp, sp, #28
   1357c:	sub	sp, sp, #12
   13580:	movw	sl, #49777	; 0xc271
   13584:	mvn	r9, #0
   13588:	movt	sl, #2
   1358c:	ldrb	r0, [sl]
   13590:	cmp	r0, #0
   13594:	bne	136a8 <__assert_fail@plt+0x1f04>
   13598:	movw	r0, #49640	; 0xc1e8
   1359c:	movw	r7, #49700	; 0xc224
   135a0:	movt	r0, #2
   135a4:	movt	r7, #2
   135a8:	ldr	r5, [r0, #12]
   135ac:	movw	r0, #49708	; 0xc22c
   135b0:	movt	r0, #2
   135b4:	ldr	r6, [r0]
   135b8:	movw	r0, #49712	; 0xc230
   135bc:	movt	r0, #2
   135c0:	ldr	r4, [r0, #20]
   135c4:	ldr	r0, [r7]
   135c8:	bl	11780 <getc@plt>
   135cc:	cmn	r0, #1
   135d0:	beq	13610 <__assert_fail@plt+0x1e6c>
   135d4:	add	r1, r6, r5
   135d8:	movw	r8, #49684	; 0xc214
   135dc:	sub	r1, r1, r4
   135e0:	movt	r8, #2
   135e4:	sub	r5, r1, #1
   135e8:	ldrb	r1, [r8]
   135ec:	cmp	r0, r1
   135f0:	beq	13638 <__assert_fail@plt+0x1e94>
   135f4:	cmp	r6, r5
   135f8:	bcs	136b4 <__assert_fail@plt+0x1f10>
   135fc:	strb	r0, [r6], #1
   13600:	ldr	r0, [r7]
   13604:	bl	11780 <getc@plt>
   13608:	cmn	r0, #1
   1360c:	bne	135e8 <__assert_fail@plt+0x1e44>
   13610:	mov	r0, #1
   13614:	strb	r0, [sl]
   13618:	movw	r0, #49708	; 0xc22c
   1361c:	movt	r0, #2
   13620:	ldr	r2, [r0]
   13624:	cmp	r6, r2
   13628:	beq	136a8 <__assert_fail@plt+0x1f04>
   1362c:	mov	r0, #0
   13630:	strb	r0, [r6], #1
   13634:	b	13660 <__assert_fail@plt+0x1ebc>
   13638:	movw	r0, #49760	; 0xc260
   1363c:	movt	r0, #2
   13640:	ldr	r1, [r0]
   13644:	add	r1, r1, #1
   13648:	str	r1, [r0]
   1364c:	movw	r1, #49708	; 0xc22c
   13650:	mov	r0, #0
   13654:	strb	r0, [r6], #1
   13658:	movt	r1, #2
   1365c:	ldr	r2, [r1]
   13660:	movw	r1, #49640	; 0xc1e8
   13664:	sub	r9, r6, r2
   13668:	movt	r1, #2
   1366c:	ldr	r1, [r1, #24]
   13670:	cmp	r1, #0
   13674:	bne	136a8 <__assert_fail@plt+0x1f04>
   13678:	movw	r1, #49756	; 0xc25c
   1367c:	str	r0, [sp]
   13680:	mov	r3, r9
   13684:	movt	r1, #2
   13688:	ldrb	r1, [r1]
   1368c:	eor	r1, r1, #1
   13690:	stmib	sp, {r0, r1}
   13694:	movw	r0, #49640	; 0xc1e8
   13698:	movw	r1, #49712	; 0xc230
   1369c:	movt	r0, #2
   136a0:	movt	r1, #2
   136a4:	bl	1433c <__assert_fail@plt+0x2b98>
   136a8:	mov	r0, r9
   136ac:	sub	sp, fp, #28
   136b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b4:	bl	13c00 <__assert_fail@plt+0x245c>
   136b8:	movw	r1, #40888	; 0x9fb8
   136bc:	mov	r0, #0
   136c0:	mov	r2, #5
   136c4:	movt	r1, #1
   136c8:	bl	114a4 <dcgettext@plt>
   136cc:	mov	r2, r0
   136d0:	mov	r0, #1
   136d4:	mov	r1, #0
   136d8:	bl	11564 <error@plt>
   136dc:	push	{fp, lr}
   136e0:	mov	fp, sp
   136e4:	cmp	r0, #0
   136e8:	bne	139bc <__assert_fail@plt+0x2218>
   136ec:	movw	r5, #49620	; 0xc1d4
   136f0:	movw	r1, #41857	; 0xa381
   136f4:	mov	r0, #0
   136f8:	mov	r2, #5
   136fc:	movt	r5, #2
   13700:	movt	r1, #1
   13704:	ldr	r4, [r5]
   13708:	bl	114a4 <dcgettext@plt>
   1370c:	movw	r6, #49832	; 0xc2a8
   13710:	mov	r1, r0
   13714:	mov	r0, r4
   13718:	movt	r6, #2
   1371c:	ldr	r2, [r6]
   13720:	bl	11624 <fprintf@plt>
   13724:	movw	r1, #41906	; 0xa3b2
   13728:	mov	r0, #0
   1372c:	mov	r2, #5
   13730:	movt	r1, #1
   13734:	bl	114a4 <dcgettext@plt>
   13738:	ldr	r1, [r5]
   1373c:	bl	1175c <fputs@plt>
   13740:	movw	r1, #41984	; 0xa400
   13744:	mov	r0, #0
   13748:	mov	r2, #5
   1374c:	movt	r1, #1
   13750:	bl	114a4 <dcgettext@plt>
   13754:	ldr	r1, [r5]
   13758:	bl	1175c <fputs@plt>
   1375c:	movw	r1, #42101	; 0xa475
   13760:	mov	r0, #0
   13764:	mov	r2, #5
   13768:	movt	r1, #1
   1376c:	bl	114a4 <dcgettext@plt>
   13770:	ldr	r1, [r5]
   13774:	bl	1175c <fputs@plt>
   13778:	movw	r1, #42313	; 0xa549
   1377c:	mov	r0, #0
   13780:	mov	r2, #5
   13784:	movt	r1, #1
   13788:	bl	114a4 <dcgettext@plt>
   1378c:	ldr	r1, [r5]
   13790:	bl	1175c <fputs@plt>
   13794:	movw	r1, #42390	; 0xa596
   13798:	mov	r0, #0
   1379c:	mov	r2, #5
   137a0:	movt	r1, #1
   137a4:	bl	114a4 <dcgettext@plt>
   137a8:	ldr	r1, [r5]
   137ac:	bl	1175c <fputs@plt>
   137b0:	movw	r1, #42624	; 0xa680
   137b4:	mov	r0, #0
   137b8:	mov	r2, #5
   137bc:	movt	r1, #1
   137c0:	bl	114a4 <dcgettext@plt>
   137c4:	ldr	r1, [r5]
   137c8:	bl	1175c <fputs@plt>
   137cc:	movw	r1, #42849	; 0xa761
   137d0:	mov	r0, #0
   137d4:	mov	r2, #5
   137d8:	movt	r1, #1
   137dc:	bl	114a4 <dcgettext@plt>
   137e0:	ldr	r1, [r5]
   137e4:	bl	1175c <fputs@plt>
   137e8:	movw	r1, #42998	; 0xa7f6
   137ec:	mov	r0, #0
   137f0:	mov	r2, #5
   137f4:	movt	r1, #1
   137f8:	bl	114a4 <dcgettext@plt>
   137fc:	ldr	r1, [r5]
   13800:	bl	1175c <fputs@plt>
   13804:	movw	r1, #43050	; 0xa82a
   13808:	mov	r0, #0
   1380c:	mov	r2, #5
   13810:	movt	r1, #1
   13814:	bl	114a4 <dcgettext@plt>
   13818:	ldr	r1, [r5]
   1381c:	bl	1175c <fputs@plt>
   13820:	movw	r1, #43261	; 0xa8fd
   13824:	mov	r0, #0
   13828:	mov	r2, #5
   1382c:	movt	r1, #1
   13830:	bl	114a4 <dcgettext@plt>
   13834:	ldr	r1, [r5]
   13838:	bl	1175c <fputs@plt>
   1383c:	movw	r1, #43387	; 0xa97b
   13840:	mov	r0, #0
   13844:	mov	r2, #5
   13848:	movt	r1, #1
   1384c:	bl	114a4 <dcgettext@plt>
   13850:	ldr	r1, [r5]
   13854:	bl	1175c <fputs@plt>
   13858:	movw	r1, #43546	; 0xaa1a
   1385c:	mov	r0, #0
   13860:	mov	r2, #5
   13864:	movt	r1, #1
   13868:	bl	114a4 <dcgettext@plt>
   1386c:	ldr	r1, [r5]
   13870:	bl	1175c <fputs@plt>
   13874:	movw	r1, #43626	; 0xaa6a
   13878:	mov	r0, #0
   1387c:	mov	r2, #5
   13880:	movt	r1, #1
   13884:	bl	114a4 <dcgettext@plt>
   13888:	ldr	r1, [r5]
   1388c:	bl	1175c <fputs@plt>
   13890:	movw	r1, #43842	; 0xab42
   13894:	mov	r0, #0
   13898:	mov	r2, #5
   1389c:	movt	r1, #1
   138a0:	bl	114a4 <dcgettext@plt>
   138a4:	ldr	r1, [r5]
   138a8:	bl	1175c <fputs@plt>
   138ac:	movw	r1, #43916	; 0xab8c
   138b0:	mov	r0, #0
   138b4:	mov	r2, #5
   138b8:	movt	r1, #1
   138bc:	bl	114a4 <dcgettext@plt>
   138c0:	ldr	r1, [r5]
   138c4:	bl	1175c <fputs@plt>
   138c8:	movw	r1, #43979	; 0xabcb
   138cc:	mov	r0, #0
   138d0:	mov	r2, #5
   138d4:	movt	r1, #1
   138d8:	bl	114a4 <dcgettext@plt>
   138dc:	ldr	r1, [r5]
   138e0:	bl	1175c <fputs@plt>
   138e4:	movw	r1, #44059	; 0xac1b
   138e8:	mov	r0, #0
   138ec:	mov	r2, #5
   138f0:	movt	r1, #1
   138f4:	bl	114a4 <dcgettext@plt>
   138f8:	ldr	r1, [r5]
   138fc:	bl	1175c <fputs@plt>
   13900:	movw	r1, #44272	; 0xacf0
   13904:	mov	r0, #0
   13908:	mov	r2, #5
   1390c:	movt	r1, #1
   13910:	bl	114a4 <dcgettext@plt>
   13914:	ldr	r1, [r5]
   13918:	bl	1175c <fputs@plt>
   1391c:	movw	r1, #44346	; 0xad3a
   13920:	mov	r0, #0
   13924:	mov	r2, #5
   13928:	movt	r1, #1
   1392c:	bl	114a4 <dcgettext@plt>
   13930:	ldr	r1, [r5]
   13934:	bl	1175c <fputs@plt>
   13938:	movw	r1, #44413	; 0xad7d
   1393c:	mov	r0, #0
   13940:	mov	r2, #5
   13944:	movt	r1, #1
   13948:	bl	114a4 <dcgettext@plt>
   1394c:	ldr	r1, [r5]
   13950:	bl	1175c <fputs@plt>
   13954:	movw	r1, #44482	; 0xadc2
   13958:	mov	r0, #0
   1395c:	mov	r2, #5
   13960:	movt	r1, #1
   13964:	bl	114a4 <dcgettext@plt>
   13968:	ldr	r1, [r5]
   1396c:	bl	1175c <fputs@plt>
   13970:	movw	r1, #44552	; 0xae08
   13974:	mov	r0, #0
   13978:	mov	r2, #5
   1397c:	movt	r1, #1
   13980:	bl	114a4 <dcgettext@plt>
   13984:	ldr	r1, [r5]
   13988:	bl	1175c <fputs@plt>
   1398c:	movw	r1, #44611	; 0xae43
   13990:	mov	r0, #0
   13994:	mov	r2, #5
   13998:	movt	r1, #1
   1399c:	bl	114a4 <dcgettext@plt>
   139a0:	ldr	r1, [r5]
   139a4:	bl	1175c <fputs@plt>
   139a8:	ldr	r0, [r5]
   139ac:	ldr	r1, [r6]
   139b0:	bl	152b8 <__assert_fail@plt+0x3b14>
   139b4:	mov	r0, #0
   139b8:	bl	115e8 <exit@plt>
   139bc:	mov	r4, r0
   139c0:	movw	r0, #49608	; 0xc1c8
   139c4:	movw	r1, #41818	; 0xa35a
   139c8:	mov	r2, #5
   139cc:	movt	r0, #2
   139d0:	movt	r1, #1
   139d4:	ldr	r5, [r0]
   139d8:	mov	r0, #0
   139dc:	bl	114a4 <dcgettext@plt>
   139e0:	mov	r1, r0
   139e4:	movw	r0, #49832	; 0xc2a8
   139e8:	movt	r0, #2
   139ec:	ldr	r2, [r0]
   139f0:	mov	r0, r5
   139f4:	bl	11624 <fprintf@plt>
   139f8:	mov	r0, r4
   139fc:	bl	115e8 <exit@plt>
   13a00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a04:	add	fp, sp, #24
   13a08:	sub	sp, sp, #16
   13a0c:	mov	r6, r2
   13a10:	mov	r5, r1
   13a14:	add	r1, sp, #12
   13a18:	mov	r2, #10
   13a1c:	mov	r7, r3
   13a20:	mov	r4, r0
   13a24:	bl	11408 <strtol@plt>
   13a28:	ldr	r1, [sp, #12]
   13a2c:	cmp	r1, r4
   13a30:	beq	13b0c <__assert_fail@plt+0x2368>
   13a34:	ldrb	r1, [r1]
   13a38:	cmp	r1, #0
   13a3c:	bne	13b0c <__assert_fail@plt+0x2368>
   13a40:	ldr	r8, [fp, #8]
   13a44:	cmp	r0, r6
   13a48:	blt	13ac0 <__assert_fail@plt+0x231c>
   13a4c:	cmp	r7, #0
   13a50:	blt	13ab0 <__assert_fail@plt+0x230c>
   13a54:	cmp	r0, r7
   13a58:	mov	r6, r0
   13a5c:	ble	13ab4 <__assert_fail@plt+0x2310>
   13a60:	movw	r0, #49608	; 0xc1c8
   13a64:	movw	r1, #41772	; 0xa32c
   13a68:	mov	r2, #5
   13a6c:	movt	r0, #2
   13a70:	movt	r1, #1
   13a74:	ldr	r6, [r0]
   13a78:	mov	r0, #0
   13a7c:	bl	114a4 <dcgettext@plt>
   13a80:	mov	r1, r0
   13a84:	movw	r0, #49832	; 0xc2a8
   13a88:	mov	r3, r4
   13a8c:	movt	r0, #2
   13a90:	ldr	r2, [r0]
   13a94:	mov	r0, r6
   13a98:	stm	sp, {r5, r7}
   13a9c:	bl	11624 <fprintf@plt>
   13aa0:	cmp	r8, #0
   13aa4:	mov	r6, r7
   13aa8:	beq	13ab4 <__assert_fail@plt+0x2310>
   13aac:	b	13b4c <__assert_fail@plt+0x23a8>
   13ab0:	mov	r6, r0
   13ab4:	mov	r0, r6
   13ab8:	sub	sp, fp, #24
   13abc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ac0:	movw	r0, #49608	; 0xc1c8
   13ac4:	movw	r1, #41726	; 0xa2fe
   13ac8:	mov	r2, #5
   13acc:	movt	r0, #2
   13ad0:	movt	r1, #1
   13ad4:	ldr	r7, [r0]
   13ad8:	mov	r0, #0
   13adc:	bl	114a4 <dcgettext@plt>
   13ae0:	mov	r1, r0
   13ae4:	movw	r0, #49832	; 0xc2a8
   13ae8:	mov	r3, r4
   13aec:	movt	r0, #2
   13af0:	ldr	r2, [r0]
   13af4:	mov	r0, r7
   13af8:	stm	sp, {r5, r6}
   13afc:	bl	11624 <fprintf@plt>
   13b00:	cmp	r8, #0
   13b04:	beq	13ab4 <__assert_fail@plt+0x2310>
   13b08:	b	13b4c <__assert_fail@plt+0x23a8>
   13b0c:	movw	r0, #49608	; 0xc1c8
   13b10:	movw	r1, #41686	; 0xa2d6
   13b14:	mov	r2, #5
   13b18:	movt	r0, #2
   13b1c:	movt	r1, #1
   13b20:	ldr	r6, [r0]
   13b24:	mov	r0, #0
   13b28:	bl	114a4 <dcgettext@plt>
   13b2c:	mov	r1, r0
   13b30:	movw	r0, #49832	; 0xc2a8
   13b34:	mov	r3, r4
   13b38:	str	r5, [sp]
   13b3c:	movt	r0, #2
   13b40:	ldr	r2, [r0]
   13b44:	mov	r0, r6
   13b48:	bl	11624 <fprintf@plt>
   13b4c:	mov	r0, #1
   13b50:	bl	136dc <__assert_fail@plt+0x1f38>
   13b54:	movw	r0, #49504	; 0xc160
   13b58:	movt	r0, #2
   13b5c:	ldr	r1, [r0]
   13b60:	cmn	r1, #-2147483647	; 0x80000001
   13b64:	ldrne	r1, [r0]
   13b68:	addne	r1, r1, #1
   13b6c:	strne	r1, [r0]
   13b70:	movw	r0, #49784	; 0xc278
   13b74:	mov	r1, #1
   13b78:	movt	r0, #2
   13b7c:	str	r1, [r0]
   13b80:	bx	lr
   13b84:	movw	r0, #49504	; 0xc160
   13b88:	movt	r0, #2
   13b8c:	ldr	r1, [r0]
   13b90:	cmp	r1, #2
   13b94:	ldrge	r1, [r0]
   13b98:	subge	r1, r1, #1
   13b9c:	strge	r1, [r0]
   13ba0:	bx	lr
   13ba4:	push	{r4, r5, r6, sl, fp, lr}
   13ba8:	add	fp, sp, #16
   13bac:	mov	r1, #0
   13bb0:	mov	r5, #0
   13bb4:	bl	14ea8 <__assert_fail@plt+0x3704>
   13bb8:	cmp	r0, #0
   13bbc:	blt	13bf8 <__assert_fail@plt+0x2454>
   13bc0:	movw	r1, #40066	; 0x9c82
   13bc4:	mov	r4, r0
   13bc8:	movt	r1, #1
   13bcc:	bl	113e4 <fdopen@plt>
   13bd0:	mov	r5, r0
   13bd4:	cmp	r0, #0
   13bd8:	bne	13bf8 <__assert_fail@plt+0x2454>
   13bdc:	bl	11630 <__errno_location@plt>
   13be0:	ldr	r6, [r0]
   13be4:	mov	r5, r0
   13be8:	mov	r0, r4
   13bec:	bl	1178c <close@plt>
   13bf0:	str	r6, [r5]
   13bf4:	mov	r5, #0
   13bf8:	mov	r0, r5
   13bfc:	pop	{r4, r5, r6, sl, fp, pc}
   13c00:	movw	r0, #49640	; 0xc1e8
   13c04:	movt	r0, #2
   13c08:	ldr	r1, [r0, #24]
   13c0c:	cmp	r1, #0
   13c10:	bne	13c60 <__assert_fail@plt+0x24bc>
   13c14:	movw	r1, #49756	; 0xc25c
   13c18:	movt	r1, #2
   13c1c:	ldrb	r1, [r1]
   13c20:	cmp	r1, #1
   13c24:	bne	13c60 <__assert_fail@plt+0x24bc>
   13c28:	movw	r2, #49712	; 0xc230
   13c2c:	ldr	r1, [r0, #28]
   13c30:	movt	r2, #2
   13c34:	ldr	r2, [r2]
   13c38:	cmp	r2, r1
   13c3c:	bxeq	lr
   13c40:	ldr	r0, [r0]
   13c44:	cmp	r0, #0
   13c48:	bne	13c60 <__assert_fail@plt+0x24bc>
   13c4c:	movw	r0, #49640	; 0xc1e8
   13c50:	movw	r1, #49712	; 0xc230
   13c54:	movt	r0, #2
   13c58:	movt	r1, #2
   13c5c:	b	145ac <__assert_fail@plt+0x2e08>
   13c60:	bx	lr
   13c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c68:	add	fp, sp, #28
   13c6c:	sub	sp, sp, #20
   13c70:	mov	r5, r0
   13c74:	movw	r0, #49780	; 0xc274
   13c78:	movt	r0, #2
   13c7c:	ldr	r0, [r0]
   13c80:	cmp	r0, #0
   13c84:	beq	13ef8 <__assert_fail@plt+0x2754>
   13c88:	movw	sl, #49784	; 0xc278
   13c8c:	movw	r8, #49788	; 0xc27c
   13c90:	eor	r2, r5, #1
   13c94:	mov	r7, #0
   13c98:	add	r6, sp, #16
   13c9c:	mov	r3, #0
   13ca0:	str	r1, [sp, #8]
   13ca4:	movt	sl, #2
   13ca8:	movt	r8, #2
   13cac:	str	r2, [sp, #4]
   13cb0:	cmp	r3, r1
   13cb4:	mov	r0, #0
   13cb8:	str	r7, [sl]
   13cbc:	str	r3, [sp, #12]
   13cc0:	movwcs	r0, #1
   13cc4:	and	r7, r0, r2
   13cc8:	mvn	r0, #0
   13ccc:	mov	r1, r6
   13cd0:	mov	r2, r7
   13cd4:	bl	11528 <waitpid@plt>
   13cd8:	cmn	r0, #1
   13cdc:	bne	13d2c <__assert_fail@plt+0x2588>
   13ce0:	mov	r4, r8
   13ce4:	bl	11630 <__errno_location@plt>
   13ce8:	mov	r8, r0
   13cec:	ldr	r9, [r8]
   13cf0:	cmp	r9, #4
   13cf4:	bne	13f00 <__assert_fail@plt+0x275c>
   13cf8:	ldr	r1, [sl]
   13cfc:	cmp	r5, #0
   13d00:	mov	r0, r7
   13d04:	moveq	r0, #1
   13d08:	cmp	r1, #0
   13d0c:	mov	r1, r6
   13d10:	movne	r7, r0
   13d14:	mvn	r0, #0
   13d18:	mov	r2, r7
   13d1c:	bl	11528 <waitpid@plt>
   13d20:	cmn	r0, #1
   13d24:	beq	13cec <__assert_fail@plt+0x2548>
   13d28:	mov	r8, r4
   13d2c:	cmp	r0, #0
   13d30:	beq	13ec0 <__assert_fail@plt+0x271c>
   13d34:	ldr	r1, [r8]
   13d38:	cmp	r1, #0
   13d3c:	beq	13d6c <__assert_fail@plt+0x25c8>
   13d40:	movw	r2, #49792	; 0xc280
   13d44:	movt	r2, #2
   13d48:	ldr	r3, [r2]
   13d4c:	mov	r2, #0
   13d50:	ldr	r4, [r3, r2, lsl #2]
   13d54:	cmp	r0, r4
   13d58:	beq	13d70 <__assert_fail@plt+0x25cc>
   13d5c:	add	r2, r2, #1
   13d60:	cmp	r2, r1
   13d64:	bcc	13d50 <__assert_fail@plt+0x25ac>
   13d68:	b	13d70 <__assert_fail@plt+0x25cc>
   13d6c:	mov	r2, #0
   13d70:	cmp	r2, r1
   13d74:	beq	13cc8 <__assert_fail@plt+0x2524>
   13d78:	movw	r0, #49792	; 0xc280
   13d7c:	movw	r4, #49780	; 0xc274
   13d80:	mov	r7, #0
   13d84:	movt	r0, #2
   13d88:	movt	r4, #2
   13d8c:	ldr	r0, [r0]
   13d90:	str	r7, [r0, r2, lsl #2]
   13d94:	ldr	r0, [r4]
   13d98:	sub	r0, r0, #1
   13d9c:	str	r0, [r4]
   13da0:	ldr	r0, [sp, #16]
   13da4:	and	r1, r0, #65280	; 0xff00
   13da8:	cmp	r1, #65280	; 0xff00
   13dac:	bne	13de8 <__assert_fail@plt+0x2644>
   13db0:	movw	r1, #41200	; 0xa0f0
   13db4:	mov	r0, #0
   13db8:	mov	r2, #5
   13dbc:	movt	r1, #1
   13dc0:	bl	114a4 <dcgettext@plt>
   13dc4:	mov	r2, r0
   13dc8:	movw	r0, #49712	; 0xc230
   13dcc:	mov	r1, #0
   13dd0:	movt	r0, #2
   13dd4:	ldr	r0, [r0, #4]
   13dd8:	ldr	r3, [r0]
   13ddc:	mov	r0, #124	; 0x7c
   13de0:	bl	11564 <error@plt>
   13de4:	ldr	r0, [sp, #16]
   13de8:	uxtb	r1, r0
   13dec:	cmp	r1, #127	; 0x7f
   13df0:	bne	13e34 <__assert_fail@plt+0x2690>
   13df4:	movw	r1, #41237	; 0xa115
   13df8:	mov	r0, #0
   13dfc:	mov	r2, #5
   13e00:	movt	r1, #1
   13e04:	bl	114a4 <dcgettext@plt>
   13e08:	mov	r2, r0
   13e0c:	movw	r0, #49712	; 0xc230
   13e10:	mov	r1, #0
   13e14:	movt	r0, #2
   13e18:	ldr	r0, [r0, #4]
   13e1c:	ldr	r3, [r0]
   13e20:	ldrb	r0, [sp, #17]
   13e24:	str	r0, [sp]
   13e28:	mov	r0, #125	; 0x7d
   13e2c:	bl	11564 <error@plt>
   13e30:	ldr	r0, [sp, #16]
   13e34:	mov	r1, #2130706432	; 0x7f000000
   13e38:	and	r1, r1, r0, lsl #24
   13e3c:	add	r1, r1, #16777216	; 0x1000000
   13e40:	cmp	r1, #33554432	; 0x2000000
   13e44:	blt	13e8c <__assert_fail@plt+0x26e8>
   13e48:	movw	r1, #41262	; 0xa12e
   13e4c:	mov	r0, #0
   13e50:	mov	r2, #5
   13e54:	movt	r1, #1
   13e58:	bl	114a4 <dcgettext@plt>
   13e5c:	mov	r2, r0
   13e60:	movw	r0, #49712	; 0xc230
   13e64:	mov	r1, #0
   13e68:	movt	r0, #2
   13e6c:	ldr	r0, [r0, #4]
   13e70:	ldr	r3, [r0]
   13e74:	ldr	r0, [sp, #16]
   13e78:	and	r0, r0, #127	; 0x7f
   13e7c:	str	r0, [sp]
   13e80:	mov	r0, #125	; 0x7d
   13e84:	bl	11564 <error@plt>
   13e88:	ldr	r0, [sp, #16]
   13e8c:	tst	r0, #65280	; 0xff00
   13e90:	ldr	r3, [sp, #12]
   13e94:	ldr	r2, [sp, #4]
   13e98:	movwne	r0, #49768	; 0xc268
   13e9c:	movne	r1, #123	; 0x7b
   13ea0:	movtne	r0, #2
   13ea4:	strne	r1, [r0]
   13ea8:	ldr	r0, [r4]
   13eac:	ldr	r1, [sp, #8]
   13eb0:	add	r3, r3, #1
   13eb4:	cmp	r0, #0
   13eb8:	bne	13cb0 <__assert_fail@plt+0x250c>
   13ebc:	b	13ef8 <__assert_fail@plt+0x2754>
   13ec0:	tst	r7, #1
   13ec4:	bne	13ef8 <__assert_fail@plt+0x2754>
   13ec8:	movw	r1, #41157	; 0xa0c5
   13ecc:	mov	r0, #0
   13ed0:	mov	r2, #5
   13ed4:	movt	r1, #1
   13ed8:	bl	114a4 <dcgettext@plt>
   13edc:	mov	r2, r0
   13ee0:	movw	r0, #49780	; 0xc274
   13ee4:	mov	r1, #0
   13ee8:	movt	r0, #2
   13eec:	ldr	r3, [r0]
   13ef0:	mov	r0, #0
   13ef4:	bl	11564 <error@plt>
   13ef8:	sub	sp, fp, #28
   13efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f00:	movw	r1, #41125	; 0xa0a5
   13f04:	mov	r0, #0
   13f08:	mov	r2, #5
   13f0c:	movt	r1, #1
   13f10:	bl	114a4 <dcgettext@plt>
   13f14:	mov	r2, r0
   13f18:	mov	r0, #1
   13f1c:	mov	r1, r9
   13f20:	bl	11564 <error@plt>
   13f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f28:	add	fp, sp, #28
   13f2c:	sub	sp, sp, #4
   13f30:	movw	r5, #49712	; 0xc230
   13f34:	mov	r9, r0
   13f38:	movt	r5, #2
   13f3c:	ldr	r0, [r5]
   13f40:	cmp	r0, #1
   13f44:	bne	14000 <__assert_fail@plt+0x285c>
   13f48:	cmp	r9, #0
   13f4c:	beq	13fb4 <__assert_fail@plt+0x2810>
   13f50:	movw	r5, #49796	; 0xc284
   13f54:	movt	r5, #2
   13f58:	ldr	r0, [r5]
   13f5c:	cmp	r0, #0
   13f60:	bne	13f7c <__assert_fail@plt+0x27d8>
   13f64:	movw	r0, #41323	; 0xa16b
   13f68:	movt	r0, #1
   13f6c:	bl	13ba4 <__assert_fail@plt+0x2400>
   13f70:	cmp	r0, #0
   13f74:	str	r0, [r5]
   13f78:	beq	140a0 <__assert_fail@plt+0x28fc>
   13f7c:	movw	r4, #49608	; 0xc1c8
   13f80:	movw	r0, #41368	; 0xa198
   13f84:	movt	r4, #2
   13f88:	movt	r0, #1
   13f8c:	ldr	r1, [r4]
   13f90:	bl	1175c <fputs@plt>
   13f94:	ldr	r0, [r4]
   13f98:	bl	19054 <__assert_fail@plt+0x78b0>
   13f9c:	cmp	r0, #0
   13fa0:	bne	14078 <__assert_fail@plt+0x28d4>
   13fa4:	ldr	r0, [r5]
   13fa8:	bl	11780 <getc@plt>
   13fac:	mov	r4, r0
   13fb0:	b	13fe0 <__assert_fail@plt+0x283c>
   13fb4:	movw	r0, #49608	; 0xc1c8
   13fb8:	movt	r0, #2
   13fbc:	ldr	r1, [r0]
   13fc0:	mov	r0, #10
   13fc4:	bl	11720 <putc@plt>
   13fc8:	mov	r0, #0
   13fcc:	b	13ff8 <__assert_fail@plt+0x2854>
   13fd0:	cmn	r0, #1
   13fd4:	beq	1408c <__assert_fail@plt+0x28e8>
   13fd8:	ldr	r0, [r5]
   13fdc:	bl	11780 <getc@plt>
   13fe0:	cmp	r0, #10
   13fe4:	bne	13fd0 <__assert_fail@plt+0x282c>
   13fe8:	orr	r1, r4, #32
   13fec:	mov	r0, #1
   13ff0:	cmp	r1, #121	; 0x79
   13ff4:	movne	r0, #0
   13ff8:	sub	sp, fp, #28
   13ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14000:	movw	sl, #49608	; 0xc1c8
   14004:	movw	r8, #41290	; 0xa14a
   14008:	mov	r4, #0
   1400c:	movt	sl, #2
   14010:	movt	r8, #1
   14014:	movw	r6, #41295	; 0xa14f
   14018:	movw	r0, #41983	; 0xa3ff
   1401c:	cmp	r4, #0
   14020:	ldr	r7, [sl]
   14024:	mov	r1, #3
   14028:	movt	r6, #1
   1402c:	movt	r0, #1
   14030:	moveq	r6, r0
   14034:	ldr	r0, [r5, #4]
   14038:	ldr	r2, [r0, r4, lsl #2]
   1403c:	mov	r0, #0
   14040:	bl	17a34 <__assert_fail@plt+0x6290>
   14044:	mov	r3, r0
   14048:	mov	r0, r7
   1404c:	mov	r1, r8
   14050:	mov	r2, r6
   14054:	bl	11624 <fprintf@plt>
   14058:	cmn	r0, #1
   1405c:	ble	14078 <__assert_fail@plt+0x28d4>
   14060:	ldr	r0, [r5]
   14064:	add	r4, r4, #1
   14068:	sub	r0, r0, #1
   1406c:	cmp	r4, r0
   14070:	bcc	14014 <__assert_fail@plt+0x2870>
   14074:	b	13f48 <__assert_fail@plt+0x27a4>
   14078:	bl	11630 <__errno_location@plt>
   1407c:	ldr	r4, [r0]
   14080:	movw	r1, #41297	; 0xa151
   14084:	movt	r1, #1
   14088:	b	140b0 <__assert_fail@plt+0x290c>
   1408c:	bl	11630 <__errno_location@plt>
   14090:	ldr	r4, [r0]
   14094:	movw	r1, #41373	; 0xa19d
   14098:	movt	r1, #1
   1409c:	b	140b0 <__assert_fail@plt+0x290c>
   140a0:	bl	11630 <__errno_location@plt>
   140a4:	ldr	r4, [r0]
   140a8:	movw	r1, #41332	; 0xa174
   140ac:	movt	r1, #1
   140b0:	mov	r0, #0
   140b4:	mov	r2, #5
   140b8:	bl	114a4 <dcgettext@plt>
   140bc:	mov	r2, r0
   140c0:	mov	r0, #1
   140c4:	mov	r1, r4
   140c8:	bl	11564 <error@plt>
   140cc:	push	{r4, r5, r6, r7, fp, lr}
   140d0:	add	fp, sp, #16
   140d4:	movw	r6, #49788	; 0xc27c
   140d8:	mov	r4, r0
   140dc:	movt	r6, #2
   140e0:	ldr	r0, [r6]
   140e4:	cmp	r0, #0
   140e8:	beq	14124 <__assert_fail@plt+0x2980>
   140ec:	movw	r1, #49792	; 0xc280
   140f0:	mov	r5, #0
   140f4:	movt	r1, #2
   140f8:	ldr	r2, [r1]
   140fc:	ldr	r3, [r2, r5, lsl #2]
   14100:	cmp	r3, #0
   14104:	beq	14114 <__assert_fail@plt+0x2970>
   14108:	add	r5, r5, #1
   1410c:	cmp	r5, r0
   14110:	bcc	140fc <__assert_fail@plt+0x2958>
   14114:	cmp	r5, r0
   14118:	beq	14128 <__assert_fail@plt+0x2984>
   1411c:	ldr	r0, [r1]
   14120:	b	1416c <__assert_fail@plt+0x29c8>
   14124:	mov	r5, #0
   14128:	movw	r7, #49792	; 0xc280
   1412c:	mov	r1, r6
   14130:	mov	r2, #4
   14134:	movt	r7, #2
   14138:	ldr	r0, [r7]
   1413c:	bl	18638 <__assert_fail@plt+0x6e94>
   14140:	ldr	r1, [r6]
   14144:	str	r0, [r7]
   14148:	cmp	r5, r1
   1414c:	bcs	1416c <__assert_fail@plt+0x29c8>
   14150:	mov	r1, #0
   14154:	mov	r2, r5
   14158:	str	r1, [r0, r2, lsl #2]
   1415c:	add	r2, r2, #1
   14160:	ldr	r3, [r6]
   14164:	cmp	r2, r3
   14168:	bcc	14158 <__assert_fail@plt+0x29b4>
   1416c:	ldr	r1, [r0, r5, lsl #2]
   14170:	cmp	r1, #0
   14174:	streq	r4, [r0, r5, lsl #2]
   14178:	movweq	r0, #49764	; 0xc264
   1417c:	moveq	r1, #1
   14180:	movteq	r0, #2
   14184:	strbeq	r1, [r0]
   14188:	movweq	r0, #49780	; 0xc274
   1418c:	movteq	r0, #2
   14190:	ldreq	r1, [r0]
   14194:	addeq	r1, r1, #1
   14198:	streq	r1, [r0]
   1419c:	moveq	r0, r5
   141a0:	popeq	{r4, r5, r6, r7, fp, pc}
   141a4:	movw	r0, #41595	; 0xa27b
   141a8:	movw	r1, #38765	; 0x976d
   141ac:	movw	r3, #41608	; 0xa288
   141b0:	movw	r2, #1477	; 0x5c5
   141b4:	movt	r0, #1
   141b8:	movt	r1, #1
   141bc:	movt	r3, #1
   141c0:	bl	117a4 <__assert_fail@plt>
   141c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141c8:	add	fp, sp, #28
   141cc:	sub	sp, sp, #20
   141d0:	movw	r5, #49804	; 0xc28c
   141d4:	str	r1, [sp, #12]
   141d8:	str	r0, [sp, #16]
   141dc:	ldr	r4, [r0, #12]
   141e0:	ldr	r0, [fp, #20]
   141e4:	ldr	r1, [fp, #12]
   141e8:	mov	r9, r3
   141ec:	mov	r7, r2
   141f0:	movt	r5, #2
   141f4:	ldr	r6, [r5]
   141f8:	cmp	r6, #0
   141fc:	bne	1421c <__assert_fail@plt+0x2a78>
   14200:	mov	r8, r0
   14204:	add	r0, r4, #1
   14208:	bl	1852c <__assert_fail@plt+0x6d88>
   1420c:	ldr	r1, [fp, #12]
   14210:	mov	r6, r0
   14214:	mov	r0, r8
   14218:	str	r6, [r5]
   1421c:	sub	sl, r4, #1
   14220:	add	r5, r0, r1
   14224:	ldr	r0, [sp, #16]
   14228:	ldr	r1, [r0, #24]
   1422c:	mov	r0, r7
   14230:	bl	157a8 <__assert_fail@plt+0x4004>
   14234:	cmp	r0, #0
   14238:	mov	r4, r9
   1423c:	subne	r4, r0, r7
   14240:	cmp	sl, r4
   14244:	bls	142d0 <__assert_fail@plt+0x2b2c>
   14248:	mov	r8, r0
   1424c:	mov	r0, r6
   14250:	mov	r1, r7
   14254:	mov	r2, r4
   14258:	bl	11660 <strncpy@plt>
   1425c:	sub	r9, r9, r4
   14260:	add	r7, r7, r4
   14264:	add	r6, r6, r4
   14268:	sub	sl, sl, r4
   1426c:	cmp	r8, #0
   14270:	beq	142c0 <__assert_fail@plt+0x2b1c>
   14274:	ldr	r4, [fp, #12]
   14278:	ldr	r1, [fp, #8]
   1427c:	cmp	sl, r5
   14280:	bls	142d0 <__assert_fail@plt+0x2b2c>
   14284:	cmp	r1, #0
   14288:	beq	14298 <__assert_fail@plt+0x2af4>
   1428c:	mov	r0, r6
   14290:	bl	11540 <strcpy@plt>
   14294:	add	r6, r6, r4
   14298:	ldr	r1, [fp, #16]
   1429c:	mov	r0, r6
   142a0:	sub	sl, sl, r5
   142a4:	bl	11540 <strcpy@plt>
   142a8:	ldr	r0, [fp, #20]
   142ac:	add	r6, r6, r0
   142b0:	ldr	r0, [sp, #16]
   142b4:	ldr	r0, [r0, #20]
   142b8:	sub	r9, r9, r0
   142bc:	add	r7, r7, r0
   142c0:	ldrb	r0, [r7]
   142c4:	cmp	r0, #0
   142c8:	bne	14224 <__assert_fail@plt+0x2a80>
   142cc:	b	142dc <__assert_fail@plt+0x2b38>
   142d0:	ldrb	r0, [r7]
   142d4:	cmp	r0, #0
   142d8:	bne	14318 <__assert_fail@plt+0x2b74>
   142dc:	mov	r0, #0
   142e0:	movw	r1, #49804	; 0xc28c
   142e4:	strb	r0, [r6], #1
   142e8:	str	r0, [sp]
   142ec:	str	r0, [sp, #4]
   142f0:	ldr	r0, [fp, #24]
   142f4:	movt	r1, #2
   142f8:	ldr	r2, [r1]
   142fc:	ldr	r1, [sp, #12]
   14300:	str	r0, [sp, #8]
   14304:	ldr	r0, [sp, #16]
   14308:	sub	r3, r6, r2
   1430c:	bl	1433c <__assert_fail@plt+0x2b98>
   14310:	sub	sp, fp, #28
   14314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14318:	movw	r1, #44984	; 0xafb8
   1431c:	mov	r0, #0
   14320:	mov	r2, #5
   14324:	movt	r1, #1
   14328:	bl	114a4 <dcgettext@plt>
   1432c:	mov	r2, r0
   14330:	mov	r0, #1
   14334:	mov	r1, #0
   14338:	bl	11564 <error@plt>
   1433c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14340:	add	fp, sp, #28
   14344:	sub	sp, sp, #4
   14348:	cmp	r2, #0
   1434c:	beq	1455c <__assert_fail@plt+0x2db8>
   14350:	mov	r5, r0
   14354:	ldr	r6, [fp, #16]
   14358:	ldr	r0, [fp, #12]
   1435c:	movw	sl, #45823	; 0xb2ff
   14360:	mov	r9, r3
   14364:	mov	r8, r2
   14368:	mov	r4, r1
   1436c:	movt	sl, #1
   14370:	cmp	r2, sl
   14374:	beq	14428 <__assert_fail@plt+0x2c84>
   14378:	ldr	r1, [r4, #16]
   1437c:	add	r0, r0, r9
   14380:	add	r0, r0, r1
   14384:	ldr	r1, [r5, #12]
   14388:	cmp	r0, r1
   1438c:	bls	143e4 <__assert_fail@plt+0x2c40>
   14390:	cmp	r6, #0
   14394:	bne	1457c <__assert_fail@plt+0x2dd8>
   14398:	ldr	r0, [r5, #28]
   1439c:	ldr	r1, [r4]
   143a0:	cmp	r1, r0
   143a4:	beq	1457c <__assert_fail@plt+0x2dd8>
   143a8:	ldr	r0, [r5, #24]
   143ac:	cmp	r0, #0
   143b0:	bne	14588 <__assert_fail@plt+0x2de4>
   143b4:	ldr	r0, [r5]
   143b8:	cmp	r0, #0
   143bc:	beq	143d4 <__assert_fail@plt+0x2c30>
   143c0:	ldr	r0, [r5, #36]	; 0x24
   143c4:	cmp	r0, #0
   143c8:	ldreq	r0, [r5, #40]	; 0x28
   143cc:	cmpeq	r0, #0
   143d0:	bne	14588 <__assert_fail@plt+0x2de4>
   143d4:	mov	r0, r5
   143d8:	mov	r1, r4
   143dc:	bl	145ac <__assert_fail@plt+0x2e08>
   143e0:	b	143ec <__assert_fail@plt+0x2c48>
   143e4:	cmp	r6, #0
   143e8:	bne	1440c <__assert_fail@plt+0x2c68>
   143ec:	ldr	r0, [r5, #40]	; 0x28
   143f0:	cmp	r0, #0
   143f4:	beq	1440c <__assert_fail@plt+0x2c68>
   143f8:	ldr	r1, [r5, #28]
   143fc:	ldr	r2, [r4]
   14400:	sub	r1, r2, r1
   14404:	cmp	r1, r0
   14408:	beq	1441c <__assert_fail@plt+0x2c78>
   1440c:	ldr	r0, [r5, #16]
   14410:	ldr	r1, [r4]
   14414:	cmp	r1, r0
   14418:	bne	14428 <__assert_fail@plt+0x2c84>
   1441c:	mov	r0, r5
   14420:	mov	r1, r4
   14424:	bl	145ac <__assert_fail@plt+0x2e08>
   14428:	cmp	r6, #0
   1442c:	moveq	r0, #1
   14430:	streq	r0, [r4, #28]
   14434:	ldr	r0, [r4]
   14438:	ldr	r1, [r4, #8]
   1443c:	cmp	r0, r1
   14440:	bcc	14478 <__assert_fail@plt+0x2cd4>
   14444:	ldr	r0, [r4, #4]
   14448:	cmp	r0, #0
   1444c:	beq	14464 <__assert_fail@plt+0x2cc0>
   14450:	lsl	r2, r1, #1
   14454:	lsl	r1, r1, #3
   14458:	str	r2, [r4, #8]
   1445c:	bl	18574 <__assert_fail@plt+0x6dd0>
   14460:	b	14474 <__assert_fail@plt+0x2cd0>
   14464:	mov	r0, #64	; 0x40
   14468:	str	r0, [r4, #8]
   1446c:	mov	r0, #256	; 0x100
   14470:	bl	1852c <__assert_fail@plt+0x6d88>
   14474:	str	r0, [r4, #4]
   14478:	cmp	r8, sl
   1447c:	beq	14504 <__assert_fail@plt+0x2d60>
   14480:	ldm	r4, {r2, r3}
   14484:	mov	sl, r6
   14488:	ldr	r1, [fp, #8]
   1448c:	ldr	r6, [r4, #12]
   14490:	ldr	r0, [r4, #16]
   14494:	add	r7, r2, #1
   14498:	cmp	r1, #0
   1449c:	str	r7, [r4]
   144a0:	add	r7, r6, r0
   144a4:	str	r7, [r3, r2, lsl #2]
   144a8:	beq	144c8 <__assert_fail@plt+0x2d24>
   144ac:	ldr	r2, [r4, #12]
   144b0:	add	r0, r2, r0
   144b4:	bl	11540 <strcpy@plt>
   144b8:	ldr	r0, [r4, #16]
   144bc:	ldr	r1, [fp, #12]
   144c0:	add	r0, r0, r1
   144c4:	str	r0, [r4, #16]
   144c8:	ldr	r1, [r4, #12]
   144cc:	mov	r6, sl
   144d0:	add	r0, r1, r0
   144d4:	mov	r1, r8
   144d8:	bl	11540 <strcpy@plt>
   144dc:	ldr	r0, [r4, #16]
   144e0:	cmp	sl, #0
   144e4:	add	r0, r0, r9
   144e8:	str	r0, [r4, #16]
   144ec:	beq	1451c <__assert_fail@plt+0x2d78>
   144f0:	ldr	r0, [r5, #16]
   144f4:	ldr	r1, [r4]
   144f8:	cmp	r1, r0
   144fc:	beq	1453c <__assert_fail@plt+0x2d98>
   14500:	b	14548 <__assert_fail@plt+0x2da4>
   14504:	ldm	r4, {r0, r1}
   14508:	add	r2, r0, #1
   1450c:	str	r2, [r4]
   14510:	mov	r2, #0
   14514:	str	r2, [r1, r0, lsl #2]
   14518:	b	14548 <__assert_fail@plt+0x2da4>
   1451c:	ldr	r0, [r5, #40]	; 0x28
   14520:	cmp	r0, #0
   14524:	beq	144f0 <__assert_fail@plt+0x2d4c>
   14528:	ldr	r1, [r5, #28]
   1452c:	ldr	r2, [r4]
   14530:	sub	r1, r2, r1
   14534:	cmp	r1, r0
   14538:	bne	144f0 <__assert_fail@plt+0x2d4c>
   1453c:	mov	r0, r5
   14540:	mov	r1, r4
   14544:	bl	145ac <__assert_fail@plt+0x2e08>
   14548:	cmp	r6, #0
   1454c:	ldrne	r0, [r4, #16]
   14550:	strne	r0, [r4, #20]
   14554:	sub	sp, fp, #28
   14558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1455c:	movw	r0, #45195	; 0xb08b
   14560:	movw	r1, #45021	; 0xafdd
   14564:	movw	r3, #45207	; 0xb097
   14568:	movw	r2, #341	; 0x155
   1456c:	movt	r0, #1
   14570:	movt	r1, #1
   14574:	movt	r3, #1
   14578:	bl	117a4 <__assert_fail@plt>
   1457c:	movw	r1, #45325	; 0xb10d
   14580:	movt	r1, #1
   14584:	b	14590 <__assert_fail@plt+0x2dec>
   14588:	movw	r1, #45384	; 0xb148
   1458c:	movt	r1, #1
   14590:	mov	r0, #0
   14594:	mov	r2, #5
   14598:	bl	114a4 <dcgettext@plt>
   1459c:	mov	r2, r0
   145a0:	mov	r0, #1
   145a4:	mov	r1, #0
   145a8:	bl	11564 <error@plt>
   145ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145b0:	add	fp, sp, #28
   145b4:	sub	sp, sp, #12
   145b8:	movw	r2, #45823	; 0xb2ff
   145bc:	mov	sl, r0
   145c0:	mov	r0, #0
   145c4:	mov	r3, #0
   145c8:	mov	r8, r1
   145cc:	str	r0, [sp]
   145d0:	str	r0, [sp, #4]
   145d4:	str	r0, [sp, #8]
   145d8:	movt	r2, #1
   145dc:	mov	r0, sl
   145e0:	bl	1433c <__assert_fail@plt+0x2b98>
   145e4:	ldr	r0, [r8]
   145e8:	cmp	r0, #0
   145ec:	beq	1479c <__assert_fail@plt+0x2ff8>
   145f0:	ldr	r1, [r8, #4]
   145f4:	add	r1, r1, r0, lsl #2
   145f8:	ldr	r1, [r1, #-4]
   145fc:	cmp	r1, #0
   14600:	bne	147bc <__assert_fail@plt+0x3018>
   14604:	mov	r1, #4
   14608:	add	r0, r1, r0, lsl #2
   1460c:	bl	1852c <__assert_fail@plt+0x6d88>
   14610:	ldr	r1, [r8]
   14614:	mov	r9, r0
   14618:	ldr	r0, [sl, #28]
   1461c:	mov	r5, #0
   14620:	mov	r7, r1
   14624:	cmp	r0, #0
   14628:	beq	14648 <__assert_fail@plt+0x2ea4>
   1462c:	ldr	r2, [r8, #4]
   14630:	mov	r3, r0
   14634:	mov	r6, r9
   14638:	ldr	r4, [r2], #4
   1463c:	subs	r3, r3, #1
   14640:	str	r4, [r6], #4
   14644:	bne	14638 <__assert_fail@plt+0x2e94>
   14648:	cmp	r0, r7
   1464c:	mov	r4, r0
   14650:	bcs	14690 <__assert_fail@plt+0x2eec>
   14654:	add	r2, r0, r5
   14658:	mov	r4, r0
   1465c:	cmp	r2, r1
   14660:	bcs	14690 <__assert_fail@plt+0x2eec>
   14664:	ldr	r2, [r8, #4]
   14668:	mov	r4, r0
   1466c:	add	r2, r2, r5, lsl #2
   14670:	ldr	r3, [r2, r4, lsl #2]
   14674:	str	r3, [r9, r4, lsl #2]
   14678:	add	r3, r5, r4
   1467c:	add	r4, r4, #1
   14680:	add	r3, r3, #1
   14684:	cmp	r3, r1
   14688:	cmpcc	r4, r7
   1468c:	bcc	14670 <__assert_fail@plt+0x2ecc>
   14690:	cmp	r4, r0
   14694:	bcc	14758 <__assert_fail@plt+0x2fb4>
   14698:	mov	r0, #0
   1469c:	mov	r2, r4
   146a0:	mov	r3, r9
   146a4:	str	r0, [r9, r4, lsl #2]
   146a8:	mov	r0, sl
   146ac:	ldr	r1, [r8, #24]
   146b0:	ldr	r6, [sl, #32]
   146b4:	blx	r6
   146b8:	cmp	r0, #0
   146bc:	beq	146e8 <__assert_fail@plt+0x2f44>
   146c0:	mov	r0, sl
   146c4:	mov	r1, r8
   146c8:	mov	r2, #1
   146cc:	mov	r3, r7
   146d0:	bl	147dc <__assert_fail@plt+0x3038>
   146d4:	mov	r7, r0
   146d8:	ldr	r0, [sl, #28]
   146dc:	add	r1, r4, r5
   146e0:	sub	r5, r1, r0
   146e4:	b	14714 <__assert_fail@plt+0x2f70>
   146e8:	ldr	r0, [sl, #28]
   146ec:	add	r0, r0, #1
   146f0:	cmp	r7, r0
   146f4:	bls	14778 <__assert_fail@plt+0x2fd4>
   146f8:	mov	r0, sl
   146fc:	mov	r1, r8
   14700:	mov	r2, #0
   14704:	mov	r3, r7
   14708:	bl	147dc <__assert_fail@plt+0x3038>
   1470c:	mov	r7, r0
   14710:	ldr	r0, [sl, #28]
   14714:	ldr	r1, [r8]
   14718:	add	r3, r5, #1
   1471c:	sub	r2, r1, r0
   14720:	cmp	r3, r2
   14724:	bcc	14624 <__assert_fail@plt+0x2e80>
   14728:	mov	r0, r9
   1472c:	bl	190ec <__assert_fail@plt+0x7948>
   14730:	ldr	r0, [sl, #28]
   14734:	mov	r1, #0
   14738:	mvn	r2, #0
   1473c:	str	r1, [r8, #28]
   14740:	str	r2, [r8, #32]
   14744:	str	r0, [r8]
   14748:	ldr	r0, [r8, #20]
   1474c:	str	r0, [r8, #16]
   14750:	sub	sp, fp, #28
   14754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14758:	movw	r0, #45700	; 0xb284
   1475c:	movw	r1, #45021	; 0xafdd
   14760:	movw	r3, #45729	; 0xb2a1
   14764:	mov	r2, #242	; 0xf2
   14768:	movt	r0, #1
   1476c:	movt	r1, #1
   14770:	movt	r3, #1
   14774:	bl	117a4 <__assert_fail@plt>
   14778:	movw	r1, #45143	; 0xb057
   1477c:	mov	r0, #0
   14780:	mov	r2, #5
   14784:	movt	r1, #1
   14788:	bl	114a4 <dcgettext@plt>
   1478c:	mov	r2, r0
   14790:	mov	r0, #1
   14794:	mov	r1, #0
   14798:	bl	11564 <error@plt>
   1479c:	movw	r0, #45001	; 0xafc9
   147a0:	movw	r1, #45021	; 0xafdd
   147a4:	movw	r3, #45032	; 0xafe8
   147a8:	movw	r2, #261	; 0x105
   147ac:	movt	r0, #1
   147b0:	movt	r1, #1
   147b4:	movt	r3, #1
   147b8:	bl	117a4 <__assert_fail@plt>
   147bc:	movw	r0, #45100	; 0xb02c
   147c0:	movw	r1, #45021	; 0xafdd
   147c4:	movw	r3, #45032	; 0xafe8
   147c8:	movw	r2, #262	; 0x106
   147cc:	movt	r0, #1
   147d0:	movt	r1, #1
   147d4:	movt	r3, #1
   147d8:	bl	117a4 <__assert_fail@plt>
   147dc:	cmp	r2, #0
   147e0:	beq	147f4 <__assert_fail@plt+0x3050>
   147e4:	ldr	ip, [r1, #36]	; 0x24
   147e8:	cmp	ip, r3
   147ec:	strcc	r3, [r1, #36]	; 0x24
   147f0:	b	14804 <__assert_fail@plt+0x3060>
   147f4:	ldr	ip, [r1, #40]	; 0x28
   147f8:	sub	ip, ip, #1
   147fc:	cmp	ip, r3
   14800:	strcs	r3, [r1, #40]	; 0x28
   14804:	ldr	ip, [r1, #36]	; 0x24
   14808:	cmp	ip, #0
   1480c:	ldrne	r1, [r1, #40]	; 0x28
   14810:	cmpne	r1, ip
   14814:	bhi	14834 <__assert_fail@plt+0x3090>
   14818:	cmp	r2, #0
   1481c:	beq	1482c <__assert_fail@plt+0x3088>
   14820:	cmn	r3, #1
   14824:	addne	r3, r3, #1
   14828:	b	14860 <__assert_fail@plt+0x30bc>
   1482c:	lsr	r3, r3, #1
   14830:	b	14860 <__assert_fail@plt+0x30bc>
   14834:	sub	r1, r1, ip
   14838:	cmp	r2, #0
   1483c:	lsr	r1, r1, #1
   14840:	beq	14854 <__assert_fail@plt+0x30b0>
   14844:	cmp	r1, #0
   14848:	addeq	r3, r3, #1
   1484c:	addne	r3, r1, r3
   14850:	b	14860 <__assert_fail@plt+0x30bc>
   14854:	cmp	r1, #0
   14858:	subeq	r3, r3, #1
   1485c:	subne	r3, r3, r1
   14860:	ldr	r0, [r0, #28]
   14864:	cmp	r0, #0
   14868:	beq	1487c <__assert_fail@plt+0x30d8>
   1486c:	add	r0, r0, #1
   14870:	cmp	r3, r0
   14874:	movhi	r0, r3
   14878:	b	14880 <__assert_fail@plt+0x30dc>
   1487c:	mov	r0, r3
   14880:	cmp	r0, #0
   14884:	movweq	r0, #1
   14888:	bx	lr
   1488c:	ldr	r0, [r0, #28]
   14890:	mov	r2, #0
   14894:	mvn	r3, #0
   14898:	str	r2, [r1, #28]
   1489c:	str	r3, [r1, #32]
   148a0:	str	r0, [r1]
   148a4:	ldr	r0, [r1, #20]
   148a8:	str	r0, [r1, #16]
   148ac:	bx	lr
   148b0:	push	{fp, lr}
   148b4:	mov	fp, sp
   148b8:	mov	r0, #0
   148bc:	bl	114b0 <sysconf@plt>
   148c0:	cmp	r0, #0
   148c4:	mvnle	r0, #-2147483648	; 0x80000000
   148c8:	pop	{fp, pc}
   148cc:	push	{r4, r5, fp, lr}
   148d0:	add	fp, sp, #8
   148d4:	movw	r0, #49588	; 0xc1b4
   148d8:	movt	r0, #2
   148dc:	ldr	r1, [r0]
   148e0:	ldr	r0, [r1]
   148e4:	cmp	r0, #0
   148e8:	beq	14910 <__assert_fail@plt+0x316c>
   148ec:	add	r5, r1, #4
   148f0:	mov	r4, #0
   148f4:	bl	11600 <strlen@plt>
   148f8:	add	r0, r4, r0
   148fc:	add	r4, r0, #1
   14900:	ldr	r0, [r5], #4
   14904:	cmp	r0, #0
   14908:	bne	148f4 <__assert_fail@plt+0x3150>
   1490c:	b	14914 <__assert_fail@plt+0x3170>
   14910:	mov	r4, #0
   14914:	mov	r0, r4
   14918:	pop	{r4, r5, fp, pc}
   1491c:	push	{r4, r5, r6, r7, fp, lr}
   14920:	add	fp, sp, #16
   14924:	mov	r5, r1
   14928:	mov	r4, r0
   1492c:	bl	148cc <__assert_fail@plt+0x3128>
   14930:	mov	r6, r0
   14934:	mov	r0, #4096	; 0x1000
   14938:	mov	r7, #0
   1493c:	str	r0, [r4, #8]
   14940:	mov	r0, #0
   14944:	bl	114b0 <sysconf@plt>
   14948:	mov	r1, r0
   1494c:	cmp	r0, #0
   14950:	mov	r0, #1
   14954:	str	r7, [r4]
   14958:	mvnle	r1, #-2147483648	; 0x80000000
   1495c:	cmp	r1, r6
   14960:	str	r1, [r4, #4]
   14964:	bcc	149c0 <__assert_fail@plt+0x321c>
   14968:	add	r2, r6, r5
   1496c:	mov	r0, #2
   14970:	cmp	r2, r1
   14974:	popcs	{r4, r5, r6, r7, fp, pc}
   14978:	sub	r0, r1, r6
   1497c:	sub	r1, r0, r5
   14980:	mvn	r0, #1
   14984:	add	r0, r0, r1, lsr #2
   14988:	str	r1, [r4, #4]
   1498c:	cmp	r0, #0
   14990:	str	r0, [r4, #16]
   14994:	beq	149c4 <__assert_fail@plt+0x3220>
   14998:	movw	r2, #18916	; 0x49e4
   1499c:	mov	r0, #0
   149a0:	movt	r2, #1
   149a4:	str	r0, [r4, #20]
   149a8:	str	r0, [r4, #24]
   149ac:	str	r0, [r4, #28]
   149b0:	str	r2, [r4, #32]
   149b4:	str	r0, [r4, #36]	; 0x24
   149b8:	str	r0, [r4, #40]	; 0x28
   149bc:	str	r1, [r4, #12]
   149c0:	pop	{r4, r5, r6, r7, fp, pc}
   149c4:	movw	r0, #45407	; 0xb15f
   149c8:	movw	r1, #45021	; 0xafdd
   149cc:	movw	r3, #45430	; 0xb176
   149d0:	movw	r2, #518	; 0x206
   149d4:	movt	r0, #1
   149d8:	movt	r1, #1
   149dc:	movt	r3, #1
   149e0:	bl	117a4 <__assert_fail@plt>
   149e4:	mov	r0, #0
   149e8:	bx	lr
   149ec:	ldr	r1, [r0, #4]
   149f0:	mov	r2, #0
   149f4:	cmp	r2, r1, lsr #17
   149f8:	beq	14a08 <__assert_fail@plt+0x3264>
   149fc:	ldr	r1, [r0, #8]
   14a00:	cmp	r1, #131072	; 0x20000
   14a04:	movls	r1, #131072	; 0x20000
   14a08:	str	r1, [r0, #12]
   14a0c:	bx	lr
   14a10:	push	{r4, r5, r6, sl, fp, lr}
   14a14:	add	fp, sp, #16
   14a18:	mov	r6, #0
   14a1c:	mov	r4, r1
   14a20:	str	r6, [r1, #16]
   14a24:	str	r6, [r1]
   14a28:	str	r6, [r1, #4]
   14a2c:	str	r6, [r1, #8]
   14a30:	str	r6, [r1, #36]	; 0x24
   14a34:	str	r6, [r1, #40]	; 0x28
   14a38:	movw	r1, #63488	; 0xf800
   14a3c:	ldr	r0, [r0, #12]
   14a40:	movt	r1, #32767	; 0x7fff
   14a44:	cmp	r0, r1
   14a48:	bcs	14a78 <__assert_fail@plt+0x32d4>
   14a4c:	add	r0, r0, #1
   14a50:	mov	r5, r2
   14a54:	bl	1852c <__assert_fail@plt+0x6d88>
   14a58:	mvn	r1, #0
   14a5c:	str	r0, [r4, #12]
   14a60:	str	r6, [r4, #16]
   14a64:	str	r6, [r4, #20]
   14a68:	str	r5, [r4, #24]
   14a6c:	str	r6, [r4, #28]
   14a70:	str	r1, [r4, #32]
   14a74:	pop	{r4, r5, r6, sl, fp, pc}
   14a78:	movw	r0, #45505	; 0xb1c1
   14a7c:	movw	r1, #45021	; 0xafdd
   14a80:	movw	r3, #45540	; 0xb1e4
   14a84:	mov	r2, #572	; 0x23c
   14a88:	movt	r0, #1
   14a8c:	movt	r1, #1
   14a90:	movt	r3, #1
   14a94:	bl	117a4 <__assert_fail@plt>
   14a98:	push	{r4, r5, r6, sl, fp, lr}
   14a9c:	add	fp, sp, #16
   14aa0:	mov	r1, r0
   14aa4:	ldr	r0, [r0]
   14aa8:	cmp	r0, #0
   14aac:	beq	14ad8 <__assert_fail@plt+0x3334>
   14ab0:	add	r6, r1, #4
   14ab4:	mov	r5, #0
   14ab8:	mov	r4, #0
   14abc:	bl	11600 <strlen@plt>
   14ac0:	add	r4, r0, r4
   14ac4:	ldr	r0, [r6, r5, lsl #2]
   14ac8:	add	r5, r5, #1
   14acc:	cmp	r0, #0
   14ad0:	bne	14abc <__assert_fail@plt+0x3318>
   14ad4:	b	14ae0 <__assert_fail@plt+0x333c>
   14ad8:	mov	r4, #0
   14adc:	mov	r5, #0
   14ae0:	movw	r0, #45625	; 0xb239
   14ae4:	mov	r1, r5
   14ae8:	movt	r0, #1
   14aec:	bl	14b1c <__assert_fail@plt+0x3378>
   14af0:	mov	r1, r0
   14af4:	mov	r0, #1
   14af8:	cmp	r1, #0
   14afc:	popne	{r4, r5, r6, sl, fp, pc}
   14b00:	movw	r0, #45662	; 0xb25e
   14b04:	mov	r1, r4
   14b08:	movt	r0, #1
   14b0c:	bl	14b1c <__assert_fail@plt+0x3378>
   14b10:	cmp	r0, #0
   14b14:	movwne	r0, #1
   14b18:	pop	{r4, r5, r6, sl, fp, pc}
   14b1c:	push	{r4, r5, fp, lr}
   14b20:	add	fp, sp, #8
   14b24:	sub	sp, sp, #16
   14b28:	mov	r5, r1
   14b2c:	mov	r4, r0
   14b30:	bl	11588 <getenv@plt>
   14b34:	cmp	r0, #0
   14b38:	beq	14b70 <__assert_fail@plt+0x33cc>
   14b3c:	mov	r1, #0
   14b40:	add	r3, sp, #8
   14b44:	mov	r2, #10
   14b48:	str	r1, [sp]
   14b4c:	add	r1, sp, #12
   14b50:	bl	189c0 <__assert_fail@plt+0x721c>
   14b54:	cmp	r0, #0
   14b58:	bne	14b7c <__assert_fail@plt+0x33d8>
   14b5c:	ldr	r1, [sp, #8]
   14b60:	mov	r0, #1
   14b64:	cmp	r1, r5
   14b68:	movcs	r0, #0
   14b6c:	b	14b74 <__assert_fail@plt+0x33d0>
   14b70:	mov	r0, #0
   14b74:	sub	sp, fp, #8
   14b78:	pop	{r4, r5, fp, pc}
   14b7c:	bl	11630 <__errno_location@plt>
   14b80:	ldr	r5, [r0]
   14b84:	movw	r1, #45835	; 0xb30b
   14b88:	mov	r0, #0
   14b8c:	mov	r2, #5
   14b90:	movt	r1, #1
   14b94:	bl	114a4 <dcgettext@plt>
   14b98:	mov	r2, r0
   14b9c:	mov	r0, #1
   14ba0:	mov	r1, r5
   14ba4:	mov	r3, r4
   14ba8:	bl	11564 <error@plt>
   14bac:	push	{fp, lr}
   14bb0:	mov	fp, sp
   14bb4:	sub	sp, sp, #16
   14bb8:	bl	14c08 <__assert_fail@plt+0x3464>
   14bbc:	mov	r1, #0
   14bc0:	cmn	r0, #-2147483647	; 0x80000001
   14bc4:	add	r2, sp, #4
   14bc8:	str	r1, [sp, #12]
   14bcc:	str	r1, [sp, #4]
   14bd0:	str	r1, [sp, #8]
   14bd4:	movw	r1, #20032	; 0x4e40
   14bd8:	addne	r0, r0, #1
   14bdc:	movt	r1, #1
   14be0:	bl	14d58 <__assert_fail@plt+0x35b4>
   14be4:	ldmib	sp, {r0, r1}
   14be8:	movw	r2, #49808	; 0xc290
   14bec:	movt	r2, #2
   14bf0:	str	r0, [r2]
   14bf4:	movw	r0, #49812	; 0xc294
   14bf8:	movt	r0, #2
   14bfc:	str	r1, [r0]
   14c00:	mov	sp, fp
   14c04:	pop	{fp, pc}
   14c08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c0c:	add	fp, sp, #24
   14c10:	sub	sp, sp, #16
   14c14:	movw	r0, #46130	; 0xb432
   14c18:	movt	r0, #1
   14c1c:	bl	156c8 <__assert_fail@plt+0x3f24>
   14c20:	cmp	r0, #0
   14c24:	beq	14cf8 <__assert_fail@plt+0x3554>
   14c28:	mov	r4, r0
   14c2c:	bl	11630 <__errno_location@plt>
   14c30:	mov	r7, #0
   14c34:	mov	r6, r0
   14c38:	str	r7, [r0]
   14c3c:	mov	r0, r4
   14c40:	bl	11708 <readdir64@plt>
   14c44:	cmp	r0, #0
   14c48:	beq	14cb4 <__assert_fail@plt+0x3510>
   14c4c:	mov	r8, #0
   14c50:	mvn	r5, #0
   14c54:	mov	r7, #0
   14c58:	mov	r1, r0
   14c5c:	ldrb	r2, [r1, #19]!
   14c60:	cmp	r2, #46	; 0x2e
   14c64:	bne	14c84 <__assert_fail@plt+0x34e0>
   14c68:	ldrb	r2, [r0, #20]
   14c6c:	cmp	r2, #0
   14c70:	beq	14c9c <__assert_fail@plt+0x34f8>
   14c74:	cmp	r2, #46	; 0x2e
   14c78:	ldrbeq	r0, [r0, #21]
   14c7c:	cmpeq	r0, #0
   14c80:	beq	14c9c <__assert_fail@plt+0x34f8>
   14c84:	mov	r0, r1
   14c88:	mov	r1, #0
   14c8c:	bl	151ac <__assert_fail@plt+0x3a08>
   14c90:	cmp	r0, r5
   14c94:	mov	r7, #1
   14c98:	movgt	r5, r0
   14c9c:	mov	r0, r4
   14ca0:	str	r8, [r6]
   14ca4:	bl	11708 <readdir64@plt>
   14ca8:	cmp	r0, #0
   14cac:	bne	14c58 <__assert_fail@plt+0x34b4>
   14cb0:	b	14cb8 <__assert_fail@plt+0x3514>
   14cb4:	mvn	r5, #0
   14cb8:	ldr	r6, [r6]
   14cbc:	cmp	r6, #0
   14cc0:	beq	14d34 <__assert_fail@plt+0x3590>
   14cc4:	movw	r2, #46130	; 0xb432
   14cc8:	mov	r0, #0
   14ccc:	mov	r1, #8
   14cd0:	movt	r2, #1
   14cd4:	bl	17a34 <__assert_fail@plt+0x6290>
   14cd8:	movw	r2, #46263	; 0xb4b7
   14cdc:	mov	r3, r0
   14ce0:	mov	r0, #0
   14ce4:	mov	r1, r6
   14ce8:	movt	r2, #1
   14cec:	bl	11564 <error@plt>
   14cf0:	mov	r0, r4
   14cf4:	bl	11798 <closedir@plt>
   14cf8:	mov	r0, #4
   14cfc:	bl	114b0 <sysconf@plt>
   14d00:	mov	r5, r0
   14d04:	mov	r1, sp
   14d08:	mov	r0, #7
   14d0c:	bl	114c8 <getrlimit64@plt>
   14d10:	cmn	r5, #1
   14d14:	movweq	r5, #20
   14d18:	cmp	r0, #0
   14d1c:	bne	14d4c <__assert_fail@plt+0x35a8>
   14d20:	ldm	sp, {r0, r1}
   14d24:	and	r1, r0, r1
   14d28:	cmn	r1, #1
   14d2c:	movne	r5, r0
   14d30:	b	14d4c <__assert_fail@plt+0x35a8>
   14d34:	mov	r0, r4
   14d38:	bl	11798 <closedir@plt>
   14d3c:	cmp	r7, #0
   14d40:	beq	14cf8 <__assert_fail@plt+0x3554>
   14d44:	cmn	r5, #1
   14d48:	ble	14cf8 <__assert_fail@plt+0x3554>
   14d4c:	mov	r0, r5
   14d50:	sub	sp, fp, #24
   14d54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d5c:	add	fp, sp, #28
   14d60:	sub	sp, sp, #532	; 0x214
   14d64:	cmp	r0, #1
   14d68:	str	r2, [sp, #12]
   14d6c:	str	r0, [sp, #8]
   14d70:	blt	14e38 <__assert_fail@plt+0x3694>
   14d74:	add	r0, sp, #16
   14d78:	mov	r5, r1
   14d7c:	mov	r9, #0
   14d80:	mov	r8, #5
   14d84:	add	r1, r0, #6
   14d88:	add	r0, r0, #4
   14d8c:	str	r1, [sp]
   14d90:	str	r0, [sp, #4]
   14d94:	ldr	r0, [sp, #8]
   14d98:	sub	sl, r0, r9
   14d9c:	cmp	sl, #64	; 0x40
   14da0:	mov	r7, sl
   14da4:	movge	r7, #64	; 0x40
   14da8:	cmp	sl, #1
   14dac:	blt	14dd0 <__assert_fail@plt+0x362c>
   14db0:	ldr	r1, [sp, #4]
   14db4:	mov	r0, #0
   14db8:	add	r2, r9, r0
   14dbc:	add	r0, r0, #1
   14dc0:	stmda	r1, {r2, r8}
   14dc4:	add	r1, r1, #8
   14dc8:	cmp	r0, r7
   14dcc:	blt	14db8 <__assert_fail@plt+0x3614>
   14dd0:	add	r0, sp, #16
   14dd4:	mov	r1, r7
   14dd8:	mov	r2, #0
   14ddc:	bl	11504 <poll@plt>
   14de0:	cmn	r0, #1
   14de4:	beq	14e38 <__assert_fail@plt+0x3694>
   14de8:	cmp	sl, #1
   14dec:	blt	14e28 <__assert_fail@plt+0x3684>
   14df0:	ldr	r4, [sp]
   14df4:	mov	r6, #0
   14df8:	ldrh	r0, [r4]
   14dfc:	cmp	r0, #32
   14e00:	beq	14e18 <__assert_fail@plt+0x3674>
   14e04:	ldr	r0, [r4, #-6]
   14e08:	ldr	r1, [sp, #12]
   14e0c:	blx	r5
   14e10:	cmp	r0, #0
   14e14:	bne	14e38 <__assert_fail@plt+0x3694>
   14e18:	add	r6, r6, #1
   14e1c:	add	r4, r4, #8
   14e20:	cmp	r6, r7
   14e24:	blt	14df8 <__assert_fail@plt+0x3654>
   14e28:	ldr	r0, [sp, #8]
   14e2c:	add	r9, r7, r9
   14e30:	cmp	r9, r0
   14e34:	blt	14d94 <__assert_fail@plt+0x35f0>
   14e38:	sub	sp, fp, #28
   14e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e40:	push	{r4, r5, r6, sl, fp, lr}
   14e44:	add	fp, sp, #16
   14e48:	mov	r5, r1
   14e4c:	mov	r1, #1
   14e50:	mov	r6, r0
   14e54:	bl	18e7c <__assert_fail@plt+0x76d8>
   14e58:	mov	r4, #0
   14e5c:	tst	r0, #1
   14e60:	bne	14ea0 <__assert_fail@plt+0x36fc>
   14e64:	ldm	r5, {r0, r1}
   14e68:	mov	r2, #4
   14e6c:	add	r1, r2, r1, lsl #2
   14e70:	add	r2, r5, #8
   14e74:	bl	15324 <__assert_fail@plt+0x3b80>
   14e78:	cmp	r0, #0
   14e7c:	beq	14e9c <__assert_fail@plt+0x36f8>
   14e80:	str	r0, [r5]
   14e84:	ldr	r1, [r5, #4]
   14e88:	str	r6, [r0, r1, lsl #2]
   14e8c:	ldr	r0, [r5, #4]
   14e90:	add	r0, r0, #1
   14e94:	str	r0, [r5, #4]
   14e98:	b	14ea0 <__assert_fail@plt+0x36fc>
   14e9c:	mvn	r4, #0
   14ea0:	mov	r0, r4
   14ea4:	pop	{r4, r5, r6, sl, fp, pc}
   14ea8:	sub	sp, sp, #8
   14eac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14eb0:	add	fp, sp, #24
   14eb4:	sub	sp, sp, #8
   14eb8:	tst	r1, #64	; 0x40
   14ebc:	movw	r9, #49817	; 0xc299
   14ec0:	mov	r4, r0
   14ec4:	str	r3, [fp, #12]
   14ec8:	str	r2, [fp, #8]
   14ecc:	mov	r6, #0
   14ed0:	mov	r5, r1
   14ed4:	addne	r0, fp, #8
   14ed8:	movt	r9, #2
   14edc:	orrne	r0, r0, #4
   14ee0:	strne	r0, [sp, #4]
   14ee4:	ldrb	r0, [r9]
   14ee8:	ldrne	r6, [fp, #8]
   14eec:	cmp	r0, #0
   14ef0:	bne	14f44 <__assert_fail@plt+0x37a0>
   14ef4:	movw	r0, #47785	; 0xbaa9
   14ef8:	mov	r1, #524288	; 0x80000
   14efc:	movt	r0, #1
   14f00:	bl	15760 <__assert_fail@plt+0x3fbc>
   14f04:	cmp	r0, #0
   14f08:	blt	14f2c <__assert_fail@plt+0x3788>
   14f0c:	mov	r1, #1
   14f10:	mov	r7, r0
   14f14:	bl	18e7c <__assert_fail@plt+0x76d8>
   14f18:	mov	r8, r0
   14f1c:	mov	r0, r7
   14f20:	bl	1178c <close@plt>
   14f24:	and	r0, r8, #1
   14f28:	b	14f30 <__assert_fail@plt+0x378c>
   14f2c:	mov	r0, #0
   14f30:	mov	r1, #1
   14f34:	strb	r1, [r9]
   14f38:	movw	r1, #49816	; 0xc298
   14f3c:	movt	r1, #2
   14f40:	strb	r0, [r1]
   14f44:	orr	r1, r5, #524288	; 0x80000
   14f48:	mov	r0, r4
   14f4c:	mov	r2, r6
   14f50:	bl	15760 <__assert_fail@plt+0x3fbc>
   14f54:	mov	r4, r0
   14f58:	cmp	r0, #0
   14f5c:	blt	14f80 <__assert_fail@plt+0x37dc>
   14f60:	movw	r0, #49816	; 0xc298
   14f64:	movt	r0, #2
   14f68:	ldrb	r0, [r0]
   14f6c:	cmp	r0, #0
   14f70:	bne	14f80 <__assert_fail@plt+0x37dc>
   14f74:	mov	r0, r4
   14f78:	mov	r1, #1
   14f7c:	bl	15438 <__assert_fail@plt+0x3c94>
   14f80:	mov	r0, r4
   14f84:	sub	sp, fp, #24
   14f88:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f8c:	add	sp, sp, #8
   14f90:	bx	lr
   14f94:	push	{r4, sl, fp, lr}
   14f98:	add	fp, sp, #8
   14f9c:	movw	r4, #49808	; 0xc290
   14fa0:	movt	r4, #2
   14fa4:	ldr	r0, [r4]
   14fa8:	bl	190ec <__assert_fail@plt+0x7948>
   14fac:	movw	r0, #49812	; 0xc294
   14fb0:	mov	r1, #0
   14fb4:	movt	r0, #2
   14fb8:	str	r1, [r4]
   14fbc:	str	r1, [r0]
   14fc0:	pop	{r4, sl, fp, pc}
   14fc4:	push	{fp, lr}
   14fc8:	mov	fp, sp
   14fcc:	movw	r0, #45896	; 0xb348
   14fd0:	movt	r0, #1
   14fd4:	bl	11588 <getenv@plt>
   14fd8:	cmp	r0, #0
   14fdc:	movwne	r0, #1
   14fe0:	pop	{fp, pc}
   14fe4:	push	{r4, r5, fp, lr}
   14fe8:	add	fp, sp, #8
   14fec:	sub	sp, sp, #16
   14ff0:	movw	r0, #49812	; 0xc294
   14ff4:	movt	r0, #2
   14ff8:	ldr	r4, [r0]
   14ffc:	movw	r0, #49808	; 0xc290
   15000:	movt	r0, #2
   15004:	ldr	r5, [r0]
   15008:	bl	14c08 <__assert_fail@plt+0x3464>
   1500c:	mov	r1, #0
   15010:	str	r5, [sp]
   15014:	str	r4, [sp, #4]
   15018:	cmn	r0, #-2147483647	; 0x80000001
   1501c:	mov	r2, sp
   15020:	str	r1, [sp, #8]
   15024:	mvn	r1, #0
   15028:	addne	r0, r0, #1
   1502c:	str	r1, [sp, #12]
   15030:	movw	r1, #20628	; 0x5094
   15034:	movt	r1, #1
   15038:	bl	14d58 <__assert_fail@plt+0x35b4>
   1503c:	ldr	r4, [sp, #12]
   15040:	cmp	r4, #0
   15044:	sublt	sp, fp, #8
   15048:	poplt	{r4, r5, fp, pc}
   1504c:	movw	r1, #45924	; 0xb364
   15050:	mov	r0, #0
   15054:	mov	r2, #5
   15058:	movt	r1, #1
   1505c:	bl	114a4 <dcgettext@plt>
   15060:	mov	r2, r0
   15064:	mov	r0, #0
   15068:	mov	r1, #0
   1506c:	mov	r3, r4
   15070:	bl	11564 <error@plt>
   15074:	movw	r0, #46076	; 0xb3fc
   15078:	movw	r1, #46085	; 0xb405
   1507c:	movw	r3, #46094	; 0xb40e
   15080:	mov	r2, #396	; 0x18c
   15084:	movt	r0, #1
   15088:	movt	r1, #1
   1508c:	movt	r3, #1
   15090:	bl	117a4 <__assert_fail@plt>
   15094:	push	{r4, r5, r6, sl, fp, lr}
   15098:	add	fp, sp, #16
   1509c:	mov	r6, r1
   150a0:	mov	r1, #1
   150a4:	mov	r5, r0
   150a8:	bl	18e7c <__assert_fail@plt+0x76d8>
   150ac:	mov	r1, r0
   150b0:	mov	r0, #0
   150b4:	tst	r1, #1
   150b8:	bne	150f8 <__assert_fail@plt+0x3954>
   150bc:	ldmib	r6, {r1, r2}
   150c0:	cmp	r2, r1
   150c4:	bcs	150f0 <__assert_fail@plt+0x394c>
   150c8:	ldr	r3, [r6]
   150cc:	ldr	r4, [r3, r2, lsl #2]
   150d0:	cmp	r4, r5
   150d4:	bge	150ec <__assert_fail@plt+0x3948>
   150d8:	add	r2, r2, #1
   150dc:	cmp	r2, r1
   150e0:	str	r2, [r6, #8]
   150e4:	bcc	150cc <__assert_fail@plt+0x3928>
   150e8:	b	150f0 <__assert_fail@plt+0x394c>
   150ec:	popeq	{r4, r5, r6, sl, fp, pc}
   150f0:	mvn	r0, #0
   150f4:	str	r5, [r6, #12]
   150f8:	pop	{r4, r5, r6, sl, fp, pc}
   150fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15100:	add	fp, sp, #24
   15104:	sub	sp, sp, #16
   15108:	mov	r8, r0
   1510c:	movw	r0, #49608	; 0xc1c8
   15110:	movt	r0, #2
   15114:	ldr	r0, [r0]
   15118:	bl	19054 <__assert_fail@plt+0x78b0>
   1511c:	movw	r0, #49620	; 0xc1d4
   15120:	movw	r1, #46172	; 0xb45c
   15124:	mov	r2, #5
   15128:	mov	r9, #0
   1512c:	movt	r0, #2
   15130:	movt	r1, #1
   15134:	ldr	r6, [r0]
   15138:	movw	r0, #49508	; 0xc164
   1513c:	movt	r0, #2
   15140:	ldr	r5, [r0]
   15144:	mov	r0, #0
   15148:	bl	114a4 <dcgettext@plt>
   1514c:	movw	r1, #46187	; 0xb46b
   15150:	mov	r7, r0
   15154:	mov	r0, #0
   15158:	mov	r2, #5
   1515c:	movt	r1, #1
   15160:	bl	114a4 <dcgettext@plt>
   15164:	movw	r1, #46202	; 0xb47a
   15168:	mov	r4, r0
   1516c:	mov	r0, #0
   15170:	mov	r2, #5
   15174:	movt	r1, #1
   15178:	bl	114a4 <dcgettext@plt>
   1517c:	movw	r2, #46158	; 0xb44e
   15180:	str	r0, [sp, #8]
   15184:	mov	r0, r6
   15188:	mov	r1, r8
   1518c:	mov	r3, r5
   15190:	str	r7, [sp]
   15194:	str	r4, [sp, #4]
   15198:	str	r9, [sp, #12]
   1519c:	movt	r2, #1
   151a0:	bl	1843c <__assert_fail@plt+0x6c98>
   151a4:	sub	sp, fp, #24
   151a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   151b0:	add	fp, sp, #24
   151b4:	sub	sp, sp, #8
   151b8:	mov	r5, r1
   151bc:	mov	r4, r0
   151c0:	bl	11630 <__errno_location@plt>
   151c4:	mov	r6, r0
   151c8:	mov	r0, #0
   151cc:	add	r1, sp, #4
   151d0:	mov	r2, #10
   151d4:	str	r0, [r6]
   151d8:	mov	r0, r4
   151dc:	bl	11408 <strtol@plt>
   151e0:	add	r1, r0, #-2147483647	; 0x80000001
   151e4:	cmp	r1, #1
   151e8:	bls	15248 <__assert_fail@plt+0x3aa4>
   151ec:	ldr	r7, [sp, #4]
   151f0:	ldrb	r1, [r7]
   151f4:	cmp	r1, #0
   151f8:	bne	15260 <__assert_fail@plt+0x3abc>
   151fc:	cmp	r7, r4
   15200:	subne	sp, fp, #24
   15204:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15208:	ldr	r6, [r6]
   1520c:	movw	r1, #46242	; 0xb4a2
   15210:	mov	r0, #0
   15214:	mov	r2, #5
   15218:	movt	r1, #1
   1521c:	bl	114a4 <dcgettext@plt>
   15220:	mov	r7, r0
   15224:	mov	r0, #0
   15228:	mov	r1, r5
   1522c:	mov	r2, r4
   15230:	bl	17a34 <__assert_fail@plt+0x6290>
   15234:	mov	r3, r0
   15238:	mov	r0, #1
   1523c:	mov	r1, r6
   15240:	mov	r2, r7
   15244:	bl	11564 <error@plt>
   15248:	ldr	r1, [r6]
   1524c:	movw	r2, #46263	; 0xb4b7
   15250:	mov	r0, #1
   15254:	mov	r3, r4
   15258:	movt	r2, #1
   1525c:	bl	11564 <error@plt>
   15260:	ldr	r8, [r6]
   15264:	movw	r1, #46215	; 0xb487
   15268:	mov	r0, #0
   1526c:	mov	r2, #5
   15270:	movt	r1, #1
   15274:	bl	114a4 <dcgettext@plt>
   15278:	mov	r6, r0
   1527c:	mov	r0, #0
   15280:	mov	r1, r5
   15284:	mov	r2, r7
   15288:	bl	17a34 <__assert_fail@plt+0x6290>
   1528c:	mov	r7, r0
   15290:	mov	r0, #1
   15294:	mov	r1, r5
   15298:	mov	r2, r4
   1529c:	bl	17a34 <__assert_fail@plt+0x6290>
   152a0:	str	r0, [sp]
   152a4:	mov	r0, #1
   152a8:	mov	r1, r8
   152ac:	mov	r2, r6
   152b0:	mov	r3, r7
   152b4:	bl	11564 <error@plt>
   152b8:	push	{r4, r5, fp, lr}
   152bc:	add	fp, sp, #8
   152c0:	sub	sp, sp, #16
   152c4:	mov	r4, r1
   152c8:	movw	r1, #46266	; 0xb4ba
   152cc:	mov	r5, r0
   152d0:	mov	r0, #0
   152d4:	mov	r2, #5
   152d8:	movt	r1, #1
   152dc:	bl	114a4 <dcgettext@plt>
   152e0:	movw	r2, #46511	; 0xb5af
   152e4:	movw	r3, #46158	; 0xb44e
   152e8:	mov	r1, r0
   152ec:	movw	r0, #46558	; 0xb5de
   152f0:	movt	r2, #1
   152f4:	movt	r0, #1
   152f8:	movt	r3, #1
   152fc:	str	r2, [sp, #4]
   15300:	movw	r2, #46472	; 0xb588
   15304:	str	r3, [sp]
   15308:	str	r0, [sp, #8]
   1530c:	mov	r0, r5
   15310:	mov	r3, r4
   15314:	movt	r2, #1
   15318:	bl	11624 <fprintf@plt>
   1531c:	sub	sp, fp, #8
   15320:	pop	{r4, r5, fp, pc}
   15324:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15328:	add	fp, sp, #24
   1532c:	mov	r6, r2
   15330:	mov	r7, r1
   15334:	mov	r4, r0
   15338:	bl	11630 <__errno_location@plt>
   1533c:	cmp	r7, #0
   15340:	beq	153d4 <__assert_fail@plt+0x3c30>
   15344:	mov	r5, r0
   15348:	ldr	r8, [r0]
   1534c:	ldr	r0, [r6]
   15350:	cmp	r0, #0
   15354:	mov	r1, r0
   15358:	movweq	r1, #16
   1535c:	cmp	r1, r7
   15360:	bcs	15378 <__assert_fail@plt+0x3bd4>
   15364:	lsl	r2, r1, #1
   15368:	cmp	r1, r1, lsl #1
   1536c:	mov	r1, r2
   15370:	bls	1535c <__assert_fail@plt+0x3bb8>
   15374:	mov	r1, r7
   15378:	cmp	r0, #0
   1537c:	beq	153a8 <__assert_fail@plt+0x3c04>
   15380:	cmp	r1, r0
   15384:	beq	153c0 <__assert_fail@plt+0x3c1c>
   15388:	mov	r0, r4
   1538c:	str	r1, [r6]
   15390:	bl	19248 <__assert_fail@plt+0x7aa4>
   15394:	mov	r4, r0
   15398:	cmp	r0, #0
   1539c:	bne	153c8 <__assert_fail@plt+0x3c24>
   153a0:	mov	r4, #0
   153a4:	b	153cc <__assert_fail@plt+0x3c28>
   153a8:	cmp	r4, #0
   153ac:	bne	153f4 <__assert_fail@plt+0x3c50>
   153b0:	mov	r0, r1
   153b4:	str	r1, [r6]
   153b8:	bl	191b8 <__assert_fail@plt+0x7a14>
   153bc:	mov	r4, r0
   153c0:	cmp	r4, #0
   153c4:	beq	153a0 <__assert_fail@plt+0x3bfc>
   153c8:	str	r8, [r5]
   153cc:	mov	r0, r4
   153d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153d4:	movw	r0, #46580	; 0xb5f4
   153d8:	movw	r1, #46592	; 0xb600
   153dc:	movw	r3, #46604	; 0xb60c
   153e0:	mov	r2, #71	; 0x47
   153e4:	movt	r0, #1
   153e8:	movt	r1, #1
   153ec:	movt	r3, #1
   153f0:	bl	117a4 <__assert_fail@plt>
   153f4:	movw	r0, #46646	; 0xb636
   153f8:	movw	r1, #46592	; 0xb600
   153fc:	movw	r3, #46604	; 0xb60c
   15400:	mov	r2, #79	; 0x4f
   15404:	movt	r0, #1
   15408:	movt	r1, #1
   1540c:	movt	r3, #1
   15410:	bl	117a4 <__assert_fail@plt>
   15414:	push	{r4, sl, fp, lr}
   15418:	add	fp, sp, #8
   1541c:	mov	r4, r0
   15420:	bl	15324 <__assert_fail@plt+0x3b80>
   15424:	cmp	r0, #0
   15428:	popne	{r4, sl, fp, pc}
   1542c:	mov	r0, r4
   15430:	bl	190ec <__assert_fail@plt+0x7948>
   15434:	bl	1897c <__assert_fail@plt+0x71d8>
   15438:	push	{r4, r5, r6, sl, fp, lr}
   1543c:	add	fp, sp, #16
   15440:	mov	r6, r1
   15444:	mov	r1, #1
   15448:	mov	r2, #0
   1544c:	mov	r4, r0
   15450:	mov	r5, #0
   15454:	bl	18e7c <__assert_fail@plt+0x76d8>
   15458:	cmp	r0, #0
   1545c:	blt	1548c <__assert_fail@plt+0x3ce8>
   15460:	bic	r2, r0, #1
   15464:	cmp	r6, #0
   15468:	orrne	r2, r0, #1
   1546c:	cmp	r0, r2
   15470:	beq	15490 <__assert_fail@plt+0x3cec>
   15474:	mov	r0, r4
   15478:	mov	r1, #2
   1547c:	bl	18e7c <__assert_fail@plt+0x76d8>
   15480:	cmn	r0, #1
   15484:	movwne	r0, #0
   15488:	pop	{r4, r5, r6, sl, fp, pc}
   1548c:	mvn	r5, #0
   15490:	mov	r0, r5
   15494:	pop	{r4, r5, r6, sl, fp, pc}
   15498:	movw	r1, #1030	; 0x406
   1549c:	mov	r2, #0
   154a0:	b	18e7c <__assert_fail@plt+0x76d8>
   154a4:	movw	r1, #49820	; 0xc29c
   154a8:	movt	r1, #2
   154ac:	str	r0, [r1]
   154b0:	bx	lr
   154b4:	push	{r4, r5, r6, sl, fp, lr}
   154b8:	add	fp, sp, #16
   154bc:	sub	sp, sp, #8
   154c0:	movw	r6, #49616	; 0xc1d0
   154c4:	movt	r6, #2
   154c8:	ldr	r5, [r6]
   154cc:	mov	r0, r5
   154d0:	bl	190b0 <__assert_fail@plt+0x790c>
   154d4:	cmp	r0, #0
   154d8:	beq	15518 <__assert_fail@plt+0x3d74>
   154dc:	mov	r0, #1
   154e0:	mov	r2, #0
   154e4:	mov	r3, #0
   154e8:	mov	r4, #0
   154ec:	str	r0, [sp]
   154f0:	mov	r0, r5
   154f4:	bl	19114 <__assert_fail@plt+0x7970>
   154f8:	cmp	r0, #0
   154fc:	bne	1551c <__assert_fail@plt+0x3d78>
   15500:	ldr	r0, [r6]
   15504:	bl	19054 <__assert_fail@plt+0x78b0>
   15508:	mov	r4, r0
   1550c:	cmp	r0, #0
   15510:	movwne	r4, #1
   15514:	b	1551c <__assert_fail@plt+0x3d78>
   15518:	mov	r4, #0
   1551c:	ldr	r0, [r6]
   15520:	bl	192d4 <__assert_fail@plt+0x7b30>
   15524:	cmp	r4, #0
   15528:	cmpeq	r0, #0
   1552c:	bne	1553c <__assert_fail@plt+0x3d98>
   15530:	sub	sp, fp, #16
   15534:	pop	{r4, r5, r6, sl, fp, lr}
   15538:	b	155e0 <__assert_fail@plt+0x3e3c>
   1553c:	movw	r1, #46663	; 0xb647
   15540:	mov	r0, #0
   15544:	mov	r2, #5
   15548:	movt	r1, #1
   1554c:	bl	114a4 <dcgettext@plt>
   15550:	mov	r4, r0
   15554:	movw	r0, #49820	; 0xc29c
   15558:	movt	r0, #2
   1555c:	ldr	r6, [r0]
   15560:	bl	11630 <__errno_location@plt>
   15564:	ldr	r5, [r0]
   15568:	cmp	r6, #0
   1556c:	bne	15588 <__assert_fail@plt+0x3de4>
   15570:	movw	r2, #46263	; 0xb4b7
   15574:	mov	r0, #0
   15578:	mov	r1, r5
   1557c:	mov	r3, r4
   15580:	movt	r2, #1
   15584:	b	155a8 <__assert_fail@plt+0x3e04>
   15588:	mov	r0, r6
   1558c:	bl	17bd4 <__assert_fail@plt+0x6430>
   15590:	movw	r2, #46682	; 0xb65a
   15594:	mov	r3, r0
   15598:	str	r4, [sp]
   1559c:	mov	r0, #0
   155a0:	mov	r1, r5
   155a4:	movt	r2, #1
   155a8:	bl	11564 <error@plt>
   155ac:	bl	155e0 <__assert_fail@plt+0x3e3c>
   155b0:	movw	r0, #49512	; 0xc168
   155b4:	movt	r0, #2
   155b8:	ldr	r0, [r0]
   155bc:	bl	1145c <_exit@plt>
   155c0:	movw	r1, #49824	; 0xc2a0
   155c4:	movt	r1, #2
   155c8:	str	r0, [r1]
   155cc:	bx	lr
   155d0:	movw	r1, #49828	; 0xc2a4
   155d4:	movt	r1, #2
   155d8:	strb	r0, [r1]
   155dc:	bx	lr
   155e0:	push	{r4, r5, r6, sl, fp, lr}
   155e4:	add	fp, sp, #16
   155e8:	sub	sp, sp, #8
   155ec:	movw	r0, #49620	; 0xc1d4
   155f0:	movt	r0, #2
   155f4:	ldr	r0, [r0]
   155f8:	bl	192d4 <__assert_fail@plt+0x7b30>
   155fc:	cmp	r0, #0
   15600:	beq	15628 <__assert_fail@plt+0x3e84>
   15604:	movw	r0, #49828	; 0xc2a4
   15608:	movt	r0, #2
   1560c:	ldrb	r0, [r0]
   15610:	cmp	r0, #0
   15614:	beq	15648 <__assert_fail@plt+0x3ea4>
   15618:	bl	11630 <__errno_location@plt>
   1561c:	ldr	r0, [r0]
   15620:	cmp	r0, #32
   15624:	bne	15648 <__assert_fail@plt+0x3ea4>
   15628:	movw	r0, #49608	; 0xc1c8
   1562c:	movt	r0, #2
   15630:	ldr	r0, [r0]
   15634:	bl	192d4 <__assert_fail@plt+0x7b30>
   15638:	cmp	r0, #0
   1563c:	subeq	sp, fp, #16
   15640:	popeq	{r4, r5, r6, sl, fp, pc}
   15644:	b	156b8 <__assert_fail@plt+0x3f14>
   15648:	movw	r1, #46689	; 0xb661
   1564c:	mov	r0, #0
   15650:	mov	r2, #5
   15654:	movt	r1, #1
   15658:	bl	114a4 <dcgettext@plt>
   1565c:	mov	r4, r0
   15660:	movw	r0, #49824	; 0xc2a0
   15664:	movt	r0, #2
   15668:	ldr	r6, [r0]
   1566c:	bl	11630 <__errno_location@plt>
   15670:	ldr	r5, [r0]
   15674:	cmp	r6, #0
   15678:	bne	15694 <__assert_fail@plt+0x3ef0>
   1567c:	movw	r2, #46263	; 0xb4b7
   15680:	mov	r0, #0
   15684:	mov	r1, r5
   15688:	mov	r3, r4
   1568c:	movt	r2, #1
   15690:	b	156b4 <__assert_fail@plt+0x3f10>
   15694:	mov	r0, r6
   15698:	bl	17bd4 <__assert_fail@plt+0x6430>
   1569c:	movw	r2, #46682	; 0xb65a
   156a0:	mov	r3, r0
   156a4:	str	r4, [sp]
   156a8:	mov	r0, #0
   156ac:	mov	r1, r5
   156b0:	movt	r2, #1
   156b4:	bl	11564 <error@plt>
   156b8:	movw	r0, #49512	; 0xc168
   156bc:	movt	r0, #2
   156c0:	ldr	r0, [r0]
   156c4:	bl	1145c <_exit@plt>
   156c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156cc:	add	fp, sp, #24
   156d0:	bl	11570 <opendir@plt>
   156d4:	cmp	r0, #0
   156d8:	beq	1572c <__assert_fail@plt+0x3f88>
   156dc:	mov	r4, r0
   156e0:	bl	1172c <dirfd@plt>
   156e4:	cmp	r0, #2
   156e8:	bhi	15734 <__assert_fail@plt+0x3f90>
   156ec:	movw	r1, #1030	; 0x406
   156f0:	mov	r2, #3
   156f4:	bl	18e7c <__assert_fail@plt+0x76d8>
   156f8:	cmn	r0, #1
   156fc:	ble	1573c <__assert_fail@plt+0x3f98>
   15700:	mov	r7, r0
   15704:	bl	11714 <fdopendir@plt>
   15708:	mov	r5, r0
   1570c:	bl	11630 <__errno_location@plt>
   15710:	ldr	r8, [r0]
   15714:	mov	r6, r0
   15718:	cmp	r5, #0
   1571c:	bne	1574c <__assert_fail@plt+0x3fa8>
   15720:	mov	r0, r7
   15724:	bl	1178c <close@plt>
   15728:	b	15748 <__assert_fail@plt+0x3fa4>
   1572c:	mov	r5, #0
   15730:	b	15758 <__assert_fail@plt+0x3fb4>
   15734:	mov	r5, r4
   15738:	b	15758 <__assert_fail@plt+0x3fb4>
   1573c:	bl	11630 <__errno_location@plt>
   15740:	ldr	r8, [r0]
   15744:	mov	r6, r0
   15748:	mov	r5, #0
   1574c:	mov	r0, r4
   15750:	bl	11798 <closedir@plt>
   15754:	str	r8, [r6]
   15758:	mov	r0, r5
   1575c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15760:	sub	sp, sp, #8
   15764:	push	{fp, lr}
   15768:	mov	fp, sp
   1576c:	sub	sp, sp, #8
   15770:	str	r2, [fp, #8]
   15774:	mov	r2, #0
   15778:	tst	r1, #64	; 0x40
   1577c:	str	r3, [fp, #12]
   15780:	addne	r2, fp, #8
   15784:	orrne	r2, r2, #4
   15788:	strne	r2, [sp, #4]
   1578c:	ldrne	r2, [fp, #8]
   15790:	bl	1157c <open64@plt>
   15794:	bl	17fe0 <__assert_fail@plt+0x683c>
   15798:	mov	sp, fp
   1579c:	pop	{fp, lr}
   157a0:	add	sp, sp, #8
   157a4:	bx	lr
   157a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157ac:	add	fp, sp, #28
   157b0:	sub	sp, sp, #308	; 0x134
   157b4:	mov	r5, r1
   157b8:	mov	r7, r0
   157bc:	bl	11534 <__ctype_get_mb_cur_max@plt>
   157c0:	cmp	r0, #2
   157c4:	bcc	15b40 <__assert_fail@plt+0x439c>
   157c8:	mov	r4, #0
   157cc:	sub	r0, fp, #88	; 0x58
   157d0:	str	r4, [fp, #-80]	; 0xffffffb0
   157d4:	str	r4, [fp, #-84]	; 0xffffffac
   157d8:	strb	r4, [fp, #-88]	; 0xffffffa8
   157dc:	str	r5, [fp, #-72]	; 0xffffffb8
   157e0:	strb	r4, [fp, #-76]	; 0xffffffb4
   157e4:	bl	161d4 <__assert_fail@plt+0x4a30>
   157e8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   157ec:	cmp	r0, #0
   157f0:	beq	15800 <__assert_fail@plt+0x405c>
   157f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   157f8:	cmp	r0, #0
   157fc:	beq	15c60 <__assert_fail@plt+0x44bc>
   15800:	add	r0, sp, #136	; 0x88
   15804:	str	r4, [fp, #-136]	; 0xffffff78
   15808:	str	r4, [fp, #-140]	; 0xffffff74
   1580c:	strb	r4, [fp, #-144]	; 0xffffff70
   15810:	str	r5, [fp, #-128]	; 0xffffff80
   15814:	str	r4, [sp, #144]	; 0x90
   15818:	str	r4, [sp, #140]	; 0x8c
   1581c:	str	r7, [sp, #152]	; 0x98
   15820:	strb	r4, [sp, #136]	; 0x88
   15824:	strb	r4, [fp, #-132]	; 0xffffff7c
   15828:	str	r7, [sp, #12]
   1582c:	strb	r4, [sp, #148]	; 0x94
   15830:	bl	161d4 <__assert_fail@plt+0x4a30>
   15834:	ldrb	r0, [sp, #160]	; 0xa0
   15838:	cmp	r0, #0
   1583c:	beq	1584c <__assert_fail@plt+0x40a8>
   15840:	ldr	r0, [sp, #164]	; 0xa4
   15844:	cmp	r0, #0
   15848:	beq	15c6c <__assert_fail@plt+0x44c8>
   1584c:	add	r0, sp, #24
   15850:	mov	sl, #0
   15854:	sub	r7, fp, #144	; 0x90
   15858:	mov	r1, #0
   1585c:	mov	r6, #0
   15860:	mov	r9, #0
   15864:	add	r0, r0, #4
   15868:	str	r0, [sp, #8]
   1586c:	mov	r0, #1
   15870:	str	r0, [sp, #16]
   15874:	add	r0, r9, r9, lsl #2
   15878:	mov	r8, r6
   1587c:	cmp	r6, r0
   15880:	bcc	15930 <__assert_fail@plt+0x418c>
   15884:	ldr	r0, [sp, #16]
   15888:	tst	r0, #1
   1588c:	beq	15930 <__assert_fail@plt+0x418c>
   15890:	cmp	r9, #10
   15894:	bcc	15930 <__assert_fail@plt+0x418c>
   15898:	subs	r0, r8, r1
   1589c:	beq	158e0 <__assert_fail@plt+0x413c>
   158a0:	sub	r6, r1, r8
   158a4:	mov	r0, r7
   158a8:	bl	161d4 <__assert_fail@plt+0x4a30>
   158ac:	ldrb	r0, [fp, #-120]	; 0xffffff88
   158b0:	cmp	r0, #0
   158b4:	beq	158c4 <__assert_fail@plt+0x4120>
   158b8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   158bc:	cmp	r0, #0
   158c0:	beq	158e0 <__assert_fail@plt+0x413c>
   158c4:	strb	sl, [fp, #-132]	; 0xffffff7c
   158c8:	adds	r6, r6, #1
   158cc:	ldr	r0, [fp, #-128]	; 0xffffff80
   158d0:	ldr	r1, [fp, #-124]	; 0xffffff84
   158d4:	add	r0, r0, r1
   158d8:	str	r0, [fp, #-128]	; 0xffffff80
   158dc:	bne	158a4 <__assert_fail@plt+0x4100>
   158e0:	mov	r0, r7
   158e4:	bl	161d4 <__assert_fail@plt+0x4a30>
   158e8:	ldrb	r0, [fp, #-120]	; 0xffffff88
   158ec:	cmp	r0, #0
   158f0:	beq	1592c <__assert_fail@plt+0x4188>
   158f4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   158f8:	mov	r1, r8
   158fc:	cmp	r0, #0
   15900:	bne	15930 <__assert_fail@plt+0x418c>
   15904:	ldr	r0, [sp, #12]
   15908:	mov	r1, r5
   1590c:	add	r2, sp, #80	; 0x50
   15910:	bl	15c94 <__assert_fail@plt+0x44f0>
   15914:	mov	r1, #0
   15918:	cmp	r0, #0
   1591c:	str	r1, [sp, #16]
   15920:	mov	r1, r8
   15924:	beq	15930 <__assert_fail@plt+0x418c>
   15928:	b	15c88 <__assert_fail@plt+0x44e4>
   1592c:	mov	r1, r8
   15930:	ldrb	r0, [sp, #160]	; 0xa0
   15934:	add	r6, r8, #1
   15938:	str	r1, [sp, #20]
   1593c:	cmp	r0, #0
   15940:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   15944:	cmpne	r0, #0
   15948:	bne	15974 <__assert_fail@plt+0x41d0>
   1594c:	ldr	r2, [sp, #156]	; 0x9c
   15950:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15954:	cmp	r2, r0
   15958:	bne	15afc <__assert_fail@plt+0x4358>
   1595c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15960:	ldr	r0, [sp, #152]	; 0x98
   15964:	bl	11498 <memcmp@plt>
   15968:	cmp	r0, #0
   1596c:	bne	15afc <__assert_fail@plt+0x4358>
   15970:	b	15984 <__assert_fail@plt+0x41e0>
   15974:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15978:	ldr	r1, [sp, #164]	; 0xa4
   1597c:	cmp	r1, r0
   15980:	bne	15afc <__assert_fail@plt+0x4358>
   15984:	str	r9, [sp, #4]
   15988:	add	r1, sp, #136	; 0x88
   1598c:	mov	ip, r5
   15990:	add	r0, sp, #80	; 0x50
   15994:	ldm	r1!, {r2, r3, r5, r6}
   15998:	stmia	r0!, {r2, r3, r5, r6}
   1599c:	ldm	r1!, {r2, r3, r4, r5, r6}
   159a0:	stmia	r0!, {r2, r3, r4, r5, r6}
   159a4:	ldm	r1, {r2, r3, r4, r5, r6}
   159a8:	stm	r0, {r2, r3, r4, r5, r6}
   159ac:	strb	sl, [sp, #92]	; 0x5c
   159b0:	str	ip, [sp, #40]	; 0x28
   159b4:	strb	sl, [sp, #24]
   159b8:	mov	r5, ip
   159bc:	ldr	r0, [sp, #96]	; 0x60
   159c0:	ldr	r1, [sp, #100]	; 0x64
   159c4:	add	r0, r0, r1
   159c8:	str	r0, [sp, #96]	; 0x60
   159cc:	ldr	r0, [sp, #8]
   159d0:	str	sl, [r0]
   159d4:	str	sl, [r0, #4]
   159d8:	add	r0, sp, #24
   159dc:	strb	sl, [sp, #36]	; 0x24
   159e0:	bl	161d4 <__assert_fail@plt+0x4a30>
   159e4:	ldrb	r0, [sp, #48]	; 0x30
   159e8:	cmp	r0, #0
   159ec:	beq	159fc <__assert_fail@plt+0x4258>
   159f0:	ldr	r0, [sp, #52]	; 0x34
   159f4:	cmp	r0, #0
   159f8:	beq	15c90 <__assert_fail@plt+0x44ec>
   159fc:	strb	sl, [sp, #36]	; 0x24
   15a00:	ldr	r0, [sp, #40]	; 0x28
   15a04:	ldr	r1, [sp, #44]	; 0x2c
   15a08:	add	r0, r0, r1
   15a0c:	str	r0, [sp, #40]	; 0x28
   15a10:	add	r0, sp, #24
   15a14:	bl	161d4 <__assert_fail@plt+0x4a30>
   15a18:	ldrb	r0, [sp, #48]	; 0x30
   15a1c:	cmp	r0, #0
   15a20:	beq	15a30 <__assert_fail@plt+0x428c>
   15a24:	ldr	r0, [sp, #52]	; 0x34
   15a28:	cmp	r0, #0
   15a2c:	beq	15c78 <__assert_fail@plt+0x44d4>
   15a30:	add	r6, r8, #2
   15a34:	add	r0, sp, #80	; 0x50
   15a38:	bl	161d4 <__assert_fail@plt+0x4a30>
   15a3c:	ldr	r0, [sp, #108]	; 0x6c
   15a40:	ldrb	r1, [sp, #104]	; 0x68
   15a44:	cmp	r0, #0
   15a48:	bne	15a54 <__assert_fail@plt+0x42b0>
   15a4c:	cmp	r1, #0
   15a50:	bne	15c68 <__assert_fail@plt+0x44c4>
   15a54:	cmp	r1, #0
   15a58:	ldrbne	r1, [sp, #48]	; 0x30
   15a5c:	cmpne	r1, #0
   15a60:	bne	15a9c <__assert_fail@plt+0x42f8>
   15a64:	ldr	r4, [sp, #100]	; 0x64
   15a68:	ldr	r0, [sp, #44]	; 0x2c
   15a6c:	cmp	r4, r0
   15a70:	bne	15af8 <__assert_fail@plt+0x4354>
   15a74:	ldr	r8, [sp, #40]	; 0x28
   15a78:	ldr	r9, [sp, #96]	; 0x60
   15a7c:	mov	r2, r4
   15a80:	mov	r0, r9
   15a84:	mov	r1, r8
   15a88:	bl	11498 <memcmp@plt>
   15a8c:	cmp	r0, #0
   15a90:	mov	r0, r4
   15a94:	beq	15ab8 <__assert_fail@plt+0x4314>
   15a98:	b	15af8 <__assert_fail@plt+0x4354>
   15a9c:	ldr	r1, [sp, #52]	; 0x34
   15aa0:	cmp	r0, r1
   15aa4:	bne	15af8 <__assert_fail@plt+0x4354>
   15aa8:	ldr	r8, [sp, #40]	; 0x28
   15aac:	ldr	r4, [sp, #44]	; 0x2c
   15ab0:	ldr	r9, [sp, #96]	; 0x60
   15ab4:	ldr	r0, [sp, #100]	; 0x64
   15ab8:	add	r0, r9, r0
   15abc:	strb	sl, [sp, #92]	; 0x5c
   15ac0:	strb	sl, [sp, #36]	; 0x24
   15ac4:	str	r0, [sp, #96]	; 0x60
   15ac8:	add	r0, r8, r4
   15acc:	str	r0, [sp, #40]	; 0x28
   15ad0:	add	r0, sp, #24
   15ad4:	bl	161d4 <__assert_fail@plt+0x4a30>
   15ad8:	ldrb	r0, [sp, #48]	; 0x30
   15adc:	add	r6, r6, #1
   15ae0:	cmp	r0, #0
   15ae4:	beq	15a34 <__assert_fail@plt+0x4290>
   15ae8:	ldr	r0, [sp, #52]	; 0x34
   15aec:	cmp	r0, #0
   15af0:	bne	15a34 <__assert_fail@plt+0x4290>
   15af4:	b	15c78 <__assert_fail@plt+0x44d4>
   15af8:	ldr	r9, [sp, #4]
   15afc:	mov	r4, #0
   15b00:	add	r9, r9, #1
   15b04:	strb	r4, [sp, #148]	; 0x94
   15b08:	ldr	r0, [sp, #152]	; 0x98
   15b0c:	ldr	r1, [sp, #156]	; 0x9c
   15b10:	add	r0, r0, r1
   15b14:	str	r0, [sp, #152]	; 0x98
   15b18:	add	r0, sp, #136	; 0x88
   15b1c:	bl	161d4 <__assert_fail@plt+0x4a30>
   15b20:	ldrb	r0, [sp, #160]	; 0xa0
   15b24:	ldr	r1, [sp, #20]
   15b28:	cmp	r0, #0
   15b2c:	beq	15874 <__assert_fail@plt+0x40d0>
   15b30:	ldr	r0, [sp, #164]	; 0xa4
   15b34:	cmp	r0, #0
   15b38:	bne	15874 <__assert_fail@plt+0x40d0>
   15b3c:	b	15c6c <__assert_fail@plt+0x44c8>
   15b40:	ldrb	r6, [r5]
   15b44:	cmp	r6, #0
   15b48:	beq	15c60 <__assert_fail@plt+0x44bc>
   15b4c:	ldrb	r9, [r7]
   15b50:	cmp	r9, #0
   15b54:	beq	15c68 <__assert_fail@plt+0x44c4>
   15b58:	mov	r3, #1
   15b5c:	mov	ip, #0
   15b60:	mov	lr, r5
   15b64:	mov	r8, #0
   15b68:	mov	sl, #0
   15b6c:	str	r6, [sp, #16]
   15b70:	add	r0, sl, sl, lsl #2
   15b74:	cmp	r8, r0
   15b78:	bcc	15c08 <__assert_fail@plt+0x4464>
   15b7c:	tst	r3, #1
   15b80:	beq	15c08 <__assert_fail@plt+0x4464>
   15b84:	cmp	sl, #10
   15b88:	bcc	15c08 <__assert_fail@plt+0x4464>
   15b8c:	cmp	lr, #0
   15b90:	str	r3, [sp, #20]
   15b94:	beq	15bc8 <__assert_fail@plt+0x4424>
   15b98:	sub	r1, r8, ip
   15b9c:	mov	r0, lr
   15ba0:	mov	r6, lr
   15ba4:	bl	1169c <strnlen@plt>
   15ba8:	mov	lr, r6
   15bac:	mov	ip, r8
   15bb0:	ldrb	r0, [lr, r0]!
   15bb4:	cmp	r0, #0
   15bb8:	beq	15bc8 <__assert_fail@plt+0x4424>
   15bbc:	ldr	r3, [sp, #20]
   15bc0:	mov	ip, r8
   15bc4:	b	15c04 <__assert_fail@plt+0x4460>
   15bc8:	mov	r0, r5
   15bcc:	mov	r4, ip
   15bd0:	bl	11600 <strlen@plt>
   15bd4:	mov	r2, r0
   15bd8:	mov	r0, r7
   15bdc:	mov	r1, r5
   15be0:	sub	r3, fp, #88	; 0x58
   15be4:	bl	1608c <__assert_fail@plt+0x48e8>
   15be8:	cmp	r0, #0
   15bec:	bne	15c80 <__assert_fail@plt+0x44dc>
   15bf0:	ldr	r3, [sp, #20]
   15bf4:	ldrb	r9, [r7]
   15bf8:	mov	lr, #0
   15bfc:	mov	ip, r4
   15c00:	and	r3, r3, r0
   15c04:	ldr	r6, [sp, #16]
   15c08:	uxtb	r0, r9
   15c0c:	cmp	r0, r6
   15c10:	bne	15c44 <__assert_fail@plt+0x44a0>
   15c14:	mov	r0, #1
   15c18:	ldrb	r1, [r5, r0]
   15c1c:	cmp	r1, #0
   15c20:	beq	15c60 <__assert_fail@plt+0x44bc>
   15c24:	ldrb	r2, [r7, r0]
   15c28:	cmp	r2, #0
   15c2c:	beq	15c68 <__assert_fail@plt+0x44c4>
   15c30:	add	r0, r0, #1
   15c34:	cmp	r2, r1
   15c38:	beq	15c18 <__assert_fail@plt+0x4474>
   15c3c:	add	r8, r8, r0
   15c40:	b	15c48 <__assert_fail@plt+0x44a4>
   15c44:	add	r8, r8, #1
   15c48:	ldrb	r9, [r7, #1]!
   15c4c:	add	sl, sl, #1
   15c50:	mov	r4, #0
   15c54:	cmp	r9, #0
   15c58:	bne	15b70 <__assert_fail@plt+0x43cc>
   15c5c:	b	15c6c <__assert_fail@plt+0x44c8>
   15c60:	mov	r4, r7
   15c64:	b	15c6c <__assert_fail@plt+0x44c8>
   15c68:	mov	r4, #0
   15c6c:	mov	r0, r4
   15c70:	sub	sp, fp, #28
   15c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c78:	ldr	r4, [sp, #152]	; 0x98
   15c7c:	b	15c6c <__assert_fail@plt+0x44c8>
   15c80:	ldr	r4, [fp, #-88]	; 0xffffffa8
   15c84:	b	15c6c <__assert_fail@plt+0x44c8>
   15c88:	ldr	r4, [sp, #80]	; 0x50
   15c8c:	b	15c6c <__assert_fail@plt+0x44c8>
   15c90:	bl	11774 <abort@plt>
   15c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c98:	add	fp, sp, #28
   15c9c:	sub	sp, sp, #132	; 0x84
   15ca0:	mov	r4, r0
   15ca4:	mov	r0, r1
   15ca8:	mov	r8, r2
   15cac:	mov	r7, r1
   15cb0:	bl	19530 <__assert_fail@plt+0x7d8c>
   15cb4:	mov	sl, r0
   15cb8:	movw	r0, #47662	; 0xba2e
   15cbc:	mov	r5, #0
   15cc0:	movt	r0, #744	; 0x2e8
   15cc4:	cmp	sl, r0
   15cc8:	bhi	1607c <__assert_fail@plt+0x48d8>
   15ccc:	mov	r0, #44	; 0x2c
   15cd0:	mul	r0, sl, r0
   15cd4:	cmp	r0, #4016	; 0xfb0
   15cd8:	bhi	15cf8 <__assert_fail@plt+0x4554>
   15cdc:	add	r0, r0, #22
   15ce0:	bic	r0, r0, #7
   15ce4:	sub	r0, sp, r0
   15ce8:	add	r1, r0, #15
   15cec:	bic	r9, r1, #15
   15cf0:	mov	sp, r0
   15cf4:	b	15d00 <__assert_fail@plt+0x455c>
   15cf8:	bl	193f0 <__assert_fail@plt+0x7c4c>
   15cfc:	mov	r9, r0
   15d00:	cmp	r9, #0
   15d04:	beq	1607c <__assert_fail@plt+0x48d8>
   15d08:	sub	r6, fp, #88	; 0x58
   15d0c:	str	r4, [fp, #-160]	; 0xffffff60
   15d10:	mov	r4, #0
   15d14:	mov	r0, r6
   15d18:	str	r4, [fp, #-80]	; 0xffffffb0
   15d1c:	str	r4, [fp, #-84]	; 0xffffffac
   15d20:	strb	r4, [fp, #-88]	; 0xffffffa8
   15d24:	str	r7, [fp, #-72]	; 0xffffffb8
   15d28:	strb	r4, [fp, #-76]	; 0xffffffb4
   15d2c:	bl	161d4 <__assert_fail@plt+0x4a30>
   15d30:	add	r0, sl, sl, lsl #2
   15d34:	add	r3, r9, r0, lsl #3
   15d38:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15d3c:	str	r3, [fp, #-148]	; 0xffffff6c
   15d40:	cmp	r0, #0
   15d44:	beq	15d54 <__assert_fail@plt+0x45b0>
   15d48:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15d4c:	cmp	r0, #0
   15d50:	beq	15dd8 <__assert_fail@plt+0x4634>
   15d54:	add	r7, r9, #16
   15d58:	add	r5, r6, #32
   15d5c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15d60:	cmp	r0, r5
   15d64:	bne	15d7c <__assert_fail@plt+0x45d8>
   15d68:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15d6c:	mov	r0, r7
   15d70:	mov	r1, r5
   15d74:	bl	11468 <memcpy@plt>
   15d78:	mov	r0, r7
   15d7c:	str	r0, [r7, #-16]
   15d80:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15d84:	str	r0, [r7, #-12]
   15d88:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15d8c:	strb	r0, [r7, #-8]
   15d90:	cmp	r0, #0
   15d94:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   15d98:	strne	r0, [r7, #-4]
   15d9c:	strb	r4, [fp, #-76]	; 0xffffffb4
   15da0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15da4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15da8:	add	r0, r0, r1
   15dac:	str	r0, [fp, #-72]	; 0xffffffb8
   15db0:	mov	r0, r6
   15db4:	bl	161d4 <__assert_fail@plt+0x4a30>
   15db8:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   15dbc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15dc0:	ldr	r3, [fp, #-148]	; 0xffffff6c
   15dc4:	add	r7, r7, #40	; 0x28
   15dc8:	cmp	r1, #0
   15dcc:	beq	15d5c <__assert_fail@plt+0x45b8>
   15dd0:	cmp	r0, #0
   15dd4:	bne	15d5c <__assert_fail@plt+0x45b8>
   15dd8:	mov	r0, #1
   15ddc:	cmp	sl, #3
   15de0:	str	r8, [fp, #-156]	; 0xffffff64
   15de4:	str	sl, [fp, #-152]	; 0xffffff68
   15de8:	str	r0, [r3, #4]
   15dec:	bcc	15eac <__assert_fail@plt+0x4708>
   15df0:	mov	r4, #2
   15df4:	mov	r5, #0
   15df8:	add	r0, r4, r4, lsl #2
   15dfc:	add	r0, r9, r0, lsl #3
   15e00:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   15e04:	sub	r7, r0, #28
   15e08:	sub	sl, r0, #40	; 0x28
   15e0c:	sub	r6, r0, #36	; 0x24
   15e10:	b	15e1c <__assert_fail@plt+0x4678>
   15e14:	ldr	r0, [r3, r5, lsl #2]
   15e18:	sub	r5, r5, r0
   15e1c:	cmp	r8, #0
   15e20:	beq	15e4c <__assert_fail@plt+0x46a8>
   15e24:	add	r0, r5, r5, lsl #2
   15e28:	add	r0, r9, r0, lsl #3
   15e2c:	ldrb	r1, [r0, #8]
   15e30:	cmp	r1, #0
   15e34:	beq	15e4c <__assert_fail@plt+0x46a8>
   15e38:	ldr	r0, [r0, #12]
   15e3c:	ldr	r1, [r7]
   15e40:	cmp	r1, r0
   15e44:	bne	15e7c <__assert_fail@plt+0x46d8>
   15e48:	b	15e90 <__assert_fail@plt+0x46ec>
   15e4c:	add	r0, r5, r5, lsl #2
   15e50:	ldr	r2, [r6]
   15e54:	add	r1, r9, r0, lsl #3
   15e58:	ldr	r1, [r1, #4]
   15e5c:	cmp	r2, r1
   15e60:	bne	15e7c <__assert_fail@plt+0x46d8>
   15e64:	ldr	r1, [r9, r0, lsl #3]
   15e68:	ldr	r0, [sl]
   15e6c:	bl	11498 <memcmp@plt>
   15e70:	ldr	r3, [fp, #-148]	; 0xffffff6c
   15e74:	cmp	r0, #0
   15e78:	beq	15e90 <__assert_fail@plt+0x46ec>
   15e7c:	cmp	r5, #0
   15e80:	bne	15e14 <__assert_fail@plt+0x4670>
   15e84:	mov	r5, #0
   15e88:	mov	r0, r4
   15e8c:	b	15e98 <__assert_fail@plt+0x46f4>
   15e90:	add	r5, r5, #1
   15e94:	sub	r0, r4, r5
   15e98:	str	r0, [r3, r4, lsl #2]
   15e9c:	ldr	r0, [fp, #-152]	; 0xffffff68
   15ea0:	add	r4, r4, #1
   15ea4:	cmp	r4, r0
   15ea8:	bne	15df8 <__assert_fail@plt+0x4654>
   15eac:	ldr	r8, [fp, #-156]	; 0xffffff64
   15eb0:	ldr	r0, [fp, #-160]	; 0xffffff60
   15eb4:	mov	r6, #0
   15eb8:	str	r6, [r8]
   15ebc:	str	r6, [fp, #-80]	; 0xffffffb0
   15ec0:	str	r6, [fp, #-84]	; 0xffffffac
   15ec4:	strb	r6, [fp, #-88]	; 0xffffffa8
   15ec8:	str	r0, [fp, #-72]	; 0xffffffb8
   15ecc:	str	r6, [fp, #-136]	; 0xffffff78
   15ed0:	str	r6, [fp, #-140]	; 0xffffff74
   15ed4:	str	r0, [fp, #-128]	; 0xffffff80
   15ed8:	sub	r0, fp, #144	; 0x90
   15edc:	strb	r6, [fp, #-144]	; 0xffffff70
   15ee0:	strb	r6, [fp, #-76]	; 0xffffffb4
   15ee4:	strb	r6, [fp, #-132]	; 0xffffff7c
   15ee8:	bl	161d4 <__assert_fail@plt+0x4a30>
   15eec:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15ef0:	ldrb	r1, [fp, #-120]	; 0xffffff88
   15ef4:	cmp	r0, #0
   15ef8:	bne	15f04 <__assert_fail@plt+0x4760>
   15efc:	cmp	r1, #0
   15f00:	bne	16070 <__assert_fail@plt+0x48cc>
   15f04:	clz	r1, r1
   15f08:	sub	r4, fp, #88	; 0x58
   15f0c:	mov	sl, #0
   15f10:	lsr	r1, r1, #5
   15f14:	add	r2, sl, sl, lsl #2
   15f18:	tst	r1, #1
   15f1c:	add	r3, r9, r2, lsl #3
   15f20:	bne	15f48 <__assert_fail@plt+0x47a4>
   15f24:	ldrb	r1, [r3, #8]
   15f28:	cmp	r1, #0
   15f2c:	beq	15f48 <__assert_fail@plt+0x47a4>
   15f30:	ldr	r1, [r3, #12]
   15f34:	cmp	r1, r0
   15f38:	bne	15f74 <__assert_fail@plt+0x47d0>
   15f3c:	ldr	r7, [fp, #-128]	; 0xffffff80
   15f40:	ldr	r5, [fp, #-124]	; 0xffffff84
   15f44:	b	15fd0 <__assert_fail@plt+0x482c>
   15f48:	ldr	r5, [r3, #4]
   15f4c:	ldr	r0, [fp, #-124]	; 0xffffff84
   15f50:	cmp	r5, r0
   15f54:	bne	15f74 <__assert_fail@plt+0x47d0>
   15f58:	ldr	r7, [fp, #-128]	; 0xffffff80
   15f5c:	ldr	r0, [r9, r2, lsl #3]
   15f60:	mov	r2, r5
   15f64:	mov	r1, r7
   15f68:	bl	11498 <memcmp@plt>
   15f6c:	cmp	r0, #0
   15f70:	beq	15fd0 <__assert_fail@plt+0x482c>
   15f74:	cmp	sl, #0
   15f78:	beq	15ff0 <__assert_fail@plt+0x484c>
   15f7c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   15f80:	ldr	r5, [r0, sl, lsl #2]
   15f84:	sub	sl, sl, r5
   15f88:	cmp	r5, #0
   15f8c:	beq	1603c <__assert_fail@plt+0x4898>
   15f90:	mov	r0, r4
   15f94:	bl	161d4 <__assert_fail@plt+0x4a30>
   15f98:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15f9c:	cmp	r0, #0
   15fa0:	beq	15fb0 <__assert_fail@plt+0x480c>
   15fa4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15fa8:	cmp	r0, #0
   15fac:	beq	16088 <__assert_fail@plt+0x48e4>
   15fb0:	strb	r6, [fp, #-76]	; 0xffffffb4
   15fb4:	subs	r5, r5, #1
   15fb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15fbc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15fc0:	add	r0, r0, r1
   15fc4:	str	r0, [fp, #-72]	; 0xffffffb8
   15fc8:	bne	15f90 <__assert_fail@plt+0x47ec>
   15fcc:	b	1603c <__assert_fail@plt+0x4898>
   15fd0:	add	r0, r7, r5
   15fd4:	strb	r6, [fp, #-132]	; 0xffffff7c
   15fd8:	add	sl, sl, #1
   15fdc:	str	r0, [fp, #-128]	; 0xffffff80
   15fe0:	ldr	r0, [fp, #-152]	; 0xffffff68
   15fe4:	cmp	sl, r0
   15fe8:	bne	1603c <__assert_fail@plt+0x4898>
   15fec:	b	16068 <__assert_fail@plt+0x48c4>
   15ff0:	mov	r0, r4
   15ff4:	bl	161d4 <__assert_fail@plt+0x4a30>
   15ff8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15ffc:	cmp	r0, #0
   16000:	beq	16010 <__assert_fail@plt+0x486c>
   16004:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16008:	cmp	r0, #0
   1600c:	beq	16088 <__assert_fail@plt+0x48e4>
   16010:	mov	sl, #0
   16014:	strb	sl, [fp, #-76]	; 0xffffffb4
   16018:	strb	sl, [fp, #-132]	; 0xffffff7c
   1601c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16020:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16024:	add	r0, r0, r1
   16028:	ldr	r1, [fp, #-124]	; 0xffffff84
   1602c:	str	r0, [fp, #-72]	; 0xffffffb8
   16030:	ldr	r0, [fp, #-128]	; 0xffffff80
   16034:	add	r0, r0, r1
   16038:	str	r0, [fp, #-128]	; 0xffffff80
   1603c:	sub	r0, fp, #144	; 0x90
   16040:	bl	161d4 <__assert_fail@plt+0x4a30>
   16044:	ldrb	r2, [fp, #-120]	; 0xffffff88
   16048:	clz	r0, r2
   1604c:	lsr	r1, r0, #5
   16050:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16054:	cmp	r0, #0
   16058:	bne	15f14 <__assert_fail@plt+0x4770>
   1605c:	cmp	r2, #0
   16060:	beq	15f14 <__assert_fail@plt+0x4770>
   16064:	b	16070 <__assert_fail@plt+0x48cc>
   16068:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1606c:	str	r0, [r8]
   16070:	mov	r0, r9
   16074:	bl	19458 <__assert_fail@plt+0x7cb4>
   16078:	mov	r5, #1
   1607c:	mov	r0, r5
   16080:	sub	sp, fp, #28
   16084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16088:	bl	11774 <abort@plt>
   1608c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16090:	add	fp, sp, #24
   16094:	mov	r4, #0
   16098:	cmn	r2, #-536870911	; 0xe0000001
   1609c:	bhi	161c8 <__assert_fail@plt+0x4a24>
   160a0:	mov	r7, r0
   160a4:	lsl	r0, r2, #2
   160a8:	mov	r8, r3
   160ac:	mov	r5, r2
   160b0:	mov	r6, r1
   160b4:	cmp	r0, #4016	; 0xfb0
   160b8:	bhi	160d8 <__assert_fail@plt+0x4934>
   160bc:	add	r0, r0, #22
   160c0:	bic	r0, r0, #7
   160c4:	sub	r1, sp, r0
   160c8:	add	r0, r1, #15
   160cc:	bic	r0, r0, #15
   160d0:	mov	sp, r1
   160d4:	b	160dc <__assert_fail@plt+0x4938>
   160d8:	bl	193f0 <__assert_fail@plt+0x7c4c>
   160dc:	cmp	r0, #0
   160e0:	beq	161c8 <__assert_fail@plt+0x4a24>
   160e4:	mov	r1, #1
   160e8:	cmp	r5, #3
   160ec:	str	r1, [r0, #4]
   160f0:	bcc	1614c <__assert_fail@plt+0x49a8>
   160f4:	mov	r1, #2
   160f8:	mov	r2, #0
   160fc:	add	r3, r6, r1
   16100:	ldrb	r4, [r6, r2]
   16104:	ldrb	r3, [r3, #-1]
   16108:	b	16118 <__assert_fail@plt+0x4974>
   1610c:	ldr	r4, [r0, r2, lsl #2]
   16110:	sub	r2, r2, r4
   16114:	ldrb	r4, [r6, r2]
   16118:	cmp	r3, r4
   1611c:	beq	16134 <__assert_fail@plt+0x4990>
   16120:	cmp	r2, #0
   16124:	bne	1610c <__assert_fail@plt+0x4968>
   16128:	mov	r2, #0
   1612c:	mov	r3, r1
   16130:	b	1613c <__assert_fail@plt+0x4998>
   16134:	add	r2, r2, #1
   16138:	sub	r3, r1, r2
   1613c:	str	r3, [r0, r1, lsl #2]
   16140:	add	r1, r1, #1
   16144:	cmp	r1, r5
   16148:	bne	160fc <__assert_fail@plt+0x4958>
   1614c:	mov	r1, #0
   16150:	str	r1, [r8]
   16154:	ldrb	r3, [r7]
   16158:	cmp	r3, #0
   1615c:	beq	161c0 <__assert_fail@plt+0x4a1c>
   16160:	mov	r2, r7
   16164:	ldrb	r4, [r6, r1]
   16168:	uxtb	r3, r3
   1616c:	cmp	r4, r3
   16170:	bne	16188 <__assert_fail@plt+0x49e4>
   16174:	add	r1, r1, #1
   16178:	cmp	r1, r5
   1617c:	beq	161bc <__assert_fail@plt+0x4a18>
   16180:	add	r7, r7, #1
   16184:	b	161ac <__assert_fail@plt+0x4a08>
   16188:	cmp	r1, #0
   1618c:	beq	161a0 <__assert_fail@plt+0x49fc>
   16190:	ldr	r3, [r0, r1, lsl #2]
   16194:	sub	r1, r1, r3
   16198:	add	r2, r2, r3
   1619c:	b	161ac <__assert_fail@plt+0x4a08>
   161a0:	add	r7, r7, #1
   161a4:	add	r2, r2, #1
   161a8:	mov	r1, #0
   161ac:	ldrb	r3, [r7]
   161b0:	cmp	r3, #0
   161b4:	bne	16164 <__assert_fail@plt+0x49c0>
   161b8:	b	161c0 <__assert_fail@plt+0x4a1c>
   161bc:	str	r2, [r8]
   161c0:	bl	19458 <__assert_fail@plt+0x7cb4>
   161c4:	mov	r4, #1
   161c8:	mov	r0, r4
   161cc:	sub	sp, fp, #24
   161d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161d4:	push	{r4, r5, r6, r7, fp, lr}
   161d8:	add	fp, sp, #16
   161dc:	mov	r4, r0
   161e0:	ldrb	r0, [r0, #12]
   161e4:	cmp	r0, #0
   161e8:	popne	{r4, r5, r6, r7, fp, pc}
   161ec:	ldrb	r0, [r4]
   161f0:	ldr	r6, [r4, #16]
   161f4:	cmp	r0, #0
   161f8:	beq	16258 <__assert_fail@plt+0x4ab4>
   161fc:	add	r5, r4, #4
   16200:	bl	11534 <__ctype_get_mb_cur_max@plt>
   16204:	mov	r1, r0
   16208:	mov	r0, r6
   1620c:	bl	17fb0 <__assert_fail@plt+0x680c>
   16210:	add	r7, r4, #28
   16214:	mov	r2, r0
   16218:	mov	r1, r6
   1621c:	mov	r3, r5
   16220:	mov	r0, r7
   16224:	bl	191e8 <__assert_fail@plt+0x7a44>
   16228:	cmn	r0, #2
   1622c:	str	r0, [r4, #20]
   16230:	beq	162d4 <__assert_fail@plt+0x4b30>
   16234:	cmp	r0, #0
   16238:	beq	16290 <__assert_fail@plt+0x4aec>
   1623c:	cmn	r0, #1
   16240:	bne	162b4 <__assert_fail@plt+0x4b10>
   16244:	mov	r0, #0
   16248:	strb	r0, [r4, #24]
   1624c:	mov	r0, #1
   16250:	str	r0, [r4, #20]
   16254:	b	162e8 <__assert_fail@plt+0x4b44>
   16258:	ldrb	r0, [r6]
   1625c:	movw	r2, #47996	; 0xbb7c
   16260:	movt	r2, #1
   16264:	ubfx	r1, r0, #5, #3
   16268:	ldr	r1, [r2, r1, lsl #2]
   1626c:	and	r2, r0, #31
   16270:	mov	r0, #1
   16274:	tst	r1, r0, lsl r2
   16278:	beq	162f4 <__assert_fail@plt+0x4b50>
   1627c:	str	r0, [r4, #20]
   16280:	ldrb	r1, [r6]
   16284:	strb	r0, [r4, #24]
   16288:	str	r1, [r4, #28]
   1628c:	b	162e8 <__assert_fail@plt+0x4b44>
   16290:	mov	r0, #1
   16294:	str	r0, [r4, #20]
   16298:	ldr	r0, [r4, #16]
   1629c:	ldrb	r0, [r0]
   162a0:	cmp	r0, #0
   162a4:	bne	16314 <__assert_fail@plt+0x4b70>
   162a8:	ldr	r0, [r7]
   162ac:	cmp	r0, #0
   162b0:	bne	16334 <__assert_fail@plt+0x4b90>
   162b4:	mov	r0, #1
   162b8:	strb	r0, [r4, #24]
   162bc:	mov	r0, r5
   162c0:	bl	11480 <mbsinit@plt>
   162c4:	cmp	r0, #0
   162c8:	movne	r0, #0
   162cc:	strbne	r0, [r4]
   162d0:	b	162e8 <__assert_fail@plt+0x4b44>
   162d4:	ldr	r0, [r4, #16]
   162d8:	bl	11600 <strlen@plt>
   162dc:	str	r0, [r4, #20]
   162e0:	mov	r0, #0
   162e4:	strb	r0, [r4, #24]
   162e8:	mov	r0, #1
   162ec:	strb	r0, [r4, #12]
   162f0:	pop	{r4, r5, r6, r7, fp, pc}
   162f4:	add	r5, r4, #4
   162f8:	mov	r0, r5
   162fc:	bl	11480 <mbsinit@plt>
   16300:	cmp	r0, #0
   16304:	beq	16354 <__assert_fail@plt+0x4bb0>
   16308:	mov	r0, #1
   1630c:	strb	r0, [r4]
   16310:	b	16200 <__assert_fail@plt+0x4a5c>
   16314:	movw	r0, #46784	; 0xb6c0
   16318:	movw	r1, #46724	; 0xb684
   1631c:	movw	r3, #46736	; 0xb690
   16320:	mov	r2, #171	; 0xab
   16324:	movt	r0, #1
   16328:	movt	r1, #1
   1632c:	movt	r3, #1
   16330:	bl	117a4 <__assert_fail@plt>
   16334:	movw	r0, #46807	; 0xb6d7
   16338:	movw	r1, #46724	; 0xb684
   1633c:	movw	r3, #46736	; 0xb690
   16340:	mov	r2, #172	; 0xac
   16344:	movt	r0, #1
   16348:	movt	r1, #1
   1634c:	movt	r3, #1
   16350:	bl	117a4 <__assert_fail@plt>
   16354:	movw	r0, #46701	; 0xb66d
   16358:	movw	r1, #46724	; 0xb684
   1635c:	movw	r3, #46736	; 0xb690
   16360:	mov	r2, #143	; 0x8f
   16364:	movt	r0, #1
   16368:	movt	r1, #1
   1636c:	movt	r3, #1
   16370:	bl	117a4 <__assert_fail@plt>
   16374:	ldr	r2, [r0, #16]
   16378:	add	r1, r2, r1
   1637c:	str	r1, [r0, #16]
   16380:	bx	lr
   16384:	push	{r4, r5, r6, sl, fp, lr}
   16388:	add	fp, sp, #16
   1638c:	mov	r5, r1
   16390:	ldrb	r1, [r1]
   16394:	mov	r4, r0
   16398:	strb	r1, [r0], #4
   1639c:	cmp	r1, #0
   163a0:	beq	163b0 <__assert_fail@plt+0x4c0c>
   163a4:	ldmib	r5, {r1, r2}
   163a8:	stm	r0, {r1, r2}
   163ac:	b	163bc <__assert_fail@plt+0x4c18>
   163b0:	mov	r1, #0
   163b4:	str	r1, [r0]
   163b8:	str	r1, [r0, #4]
   163bc:	ldrb	r0, [r5, #12]
   163c0:	strb	r0, [r4, #12]
   163c4:	add	r0, r5, #32
   163c8:	ldr	r1, [r5, #16]
   163cc:	cmp	r1, r0
   163d0:	beq	163dc <__assert_fail@plt+0x4c38>
   163d4:	mov	r6, r1
   163d8:	b	163ec <__assert_fail@plt+0x4c48>
   163dc:	ldr	r2, [r5, #20]
   163e0:	add	r6, r4, #32
   163e4:	mov	r0, r6
   163e8:	bl	11468 <memcpy@plt>
   163ec:	str	r6, [r4, #16]
   163f0:	ldr	r0, [r5, #20]
   163f4:	str	r0, [r4, #20]
   163f8:	ldrb	r0, [r5, #24]
   163fc:	strb	r0, [r4, #24]
   16400:	cmp	r0, #0
   16404:	ldrne	r0, [r5, #28]
   16408:	strne	r0, [r4, #28]
   1640c:	pop	{r4, r5, r6, sl, fp, pc}
   16410:	push	{r4, r5, fp, lr}
   16414:	add	fp, sp, #8
   16418:	cmp	r0, #0
   1641c:	beq	164b0 <__assert_fail@plt+0x4d0c>
   16420:	mov	r1, #47	; 0x2f
   16424:	mov	r4, r0
   16428:	bl	116f0 <strrchr@plt>
   1642c:	cmp	r0, #0
   16430:	mov	r5, r4
   16434:	addne	r5, r0, #1
   16438:	sub	r0, r5, r4
   1643c:	cmp	r0, #7
   16440:	blt	16494 <__assert_fail@plt+0x4cf0>
   16444:	movw	r1, #46881	; 0xb721
   16448:	sub	r0, r5, #7
   1644c:	mov	r2, #7
   16450:	movt	r1, #1
   16454:	bl	11768 <strncmp@plt>
   16458:	cmp	r0, #0
   1645c:	bne	16494 <__assert_fail@plt+0x4cf0>
   16460:	movw	r1, #46889	; 0xb729
   16464:	mov	r0, r5
   16468:	mov	r2, #3
   1646c:	movt	r1, #1
   16470:	bl	11768 <strncmp@plt>
   16474:	cmp	r0, #0
   16478:	beq	16484 <__assert_fail@plt+0x4ce0>
   1647c:	mov	r4, r5
   16480:	b	16494 <__assert_fail@plt+0x4cf0>
   16484:	movw	r0, #49584	; 0xc1b0
   16488:	add	r4, r5, #3
   1648c:	movt	r0, #2
   16490:	str	r4, [r0]
   16494:	movw	r0, #49592	; 0xc1b8
   16498:	movt	r0, #2
   1649c:	str	r4, [r0]
   164a0:	movw	r0, #49832	; 0xc2a8
   164a4:	movt	r0, #2
   164a8:	str	r4, [r0]
   164ac:	pop	{r4, r5, fp, pc}
   164b0:	movw	r0, #49608	; 0xc1c8
   164b4:	movt	r0, #2
   164b8:	ldr	r1, [r0]
   164bc:	movw	r0, #46825	; 0xb6e9
   164c0:	movt	r0, #1
   164c4:	bl	1175c <fputs@plt>
   164c8:	bl	11774 <abort@plt>
   164cc:	push	{r4, r5, r6, sl, fp, lr}
   164d0:	add	fp, sp, #16
   164d4:	mov	r4, r0
   164d8:	movw	r0, #49840	; 0xc2b0
   164dc:	movt	r0, #2
   164e0:	cmp	r4, #0
   164e4:	moveq	r4, r0
   164e8:	bl	11630 <__errno_location@plt>
   164ec:	ldr	r6, [r0]
   164f0:	mov	r5, r0
   164f4:	mov	r0, r4
   164f8:	mov	r1, #48	; 0x30
   164fc:	bl	1887c <__assert_fail@plt+0x70d8>
   16500:	str	r6, [r5]
   16504:	pop	{r4, r5, r6, sl, fp, pc}
   16508:	movw	r1, #49840	; 0xc2b0
   1650c:	cmp	r0, #0
   16510:	movt	r1, #2
   16514:	movne	r1, r0
   16518:	ldr	r0, [r1]
   1651c:	bx	lr
   16520:	movw	r2, #49840	; 0xc2b0
   16524:	cmp	r0, #0
   16528:	movt	r2, #2
   1652c:	movne	r2, r0
   16530:	str	r1, [r2]
   16534:	bx	lr
   16538:	movw	r3, #49840	; 0xc2b0
   1653c:	cmp	r0, #0
   16540:	movt	r3, #2
   16544:	movne	r3, r0
   16548:	ubfx	r0, r1, #5, #3
   1654c:	and	r1, r1, #31
   16550:	add	r0, r3, r0, lsl #2
   16554:	ldr	r3, [r0, #8]
   16558:	eor	r2, r2, r3, lsr r1
   1655c:	and	r2, r2, #1
   16560:	eor	r2, r3, r2, lsl r1
   16564:	str	r2, [r0, #8]
   16568:	mov	r0, #1
   1656c:	and	r0, r0, r3, lsr r1
   16570:	bx	lr
   16574:	movw	r2, #49840	; 0xc2b0
   16578:	cmp	r0, #0
   1657c:	movt	r2, #2
   16580:	movne	r2, r0
   16584:	ldr	r0, [r2, #4]
   16588:	str	r1, [r2, #4]
   1658c:	bx	lr
   16590:	movw	r3, #49840	; 0xc2b0
   16594:	cmp	r0, #0
   16598:	movt	r3, #2
   1659c:	movne	r3, r0
   165a0:	cmp	r1, #0
   165a4:	mov	r0, #10
   165a8:	cmpne	r2, #0
   165ac:	str	r0, [r3]
   165b0:	bne	165c0 <__assert_fail@plt+0x4e1c>
   165b4:	push	{fp, lr}
   165b8:	mov	fp, sp
   165bc:	bl	11774 <abort@plt>
   165c0:	str	r1, [r3, #40]	; 0x28
   165c4:	str	r2, [r3, #44]	; 0x2c
   165c8:	bx	lr
   165cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165d0:	add	fp, sp, #28
   165d4:	sub	sp, sp, #20
   165d8:	mov	r7, r0
   165dc:	ldr	r0, [fp, #8]
   165e0:	movw	r5, #49840	; 0xc2b0
   165e4:	mov	r8, r3
   165e8:	mov	r9, r2
   165ec:	mov	sl, r1
   165f0:	movt	r5, #2
   165f4:	cmp	r0, #0
   165f8:	movne	r5, r0
   165fc:	bl	11630 <__errno_location@plt>
   16600:	mov	r4, r0
   16604:	ldm	r5, {r0, r1}
   16608:	ldr	r2, [r5, #40]	; 0x28
   1660c:	ldr	r3, [r5, #44]	; 0x2c
   16610:	add	r5, r5, #8
   16614:	ldr	r6, [r4]
   16618:	stm	sp, {r0, r1, r5}
   1661c:	str	r2, [sp, #12]
   16620:	str	r3, [sp, #16]
   16624:	mov	r0, r7
   16628:	mov	r1, sl
   1662c:	mov	r2, r9
   16630:	mov	r3, r8
   16634:	bl	16644 <__assert_fail@plt+0x4ea0>
   16638:	str	r6, [r4]
   1663c:	sub	sp, fp, #28
   16640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16648:	add	fp, sp, #28
   1664c:	sub	sp, sp, #156	; 0x9c
   16650:	str	r0, [fp, #-56]	; 0xffffffc8
   16654:	ldr	r0, [fp, #12]
   16658:	mov	r4, r1
   1665c:	str	r3, [sp, #80]	; 0x50
   16660:	str	r2, [fp, #-84]	; 0xffffffac
   16664:	and	r1, r0, #4
   16668:	str	r1, [sp, #24]
   1666c:	and	r1, r0, #1
   16670:	str	r1, [sp, #28]
   16674:	ubfx	r7, r0, #1, #1
   16678:	bl	11534 <__ctype_get_mb_cur_max@plt>
   1667c:	str	r0, [sp, #32]
   16680:	ldr	r0, [fp, #24]
   16684:	ldr	r9, [fp, #8]
   16688:	mov	r2, #0
   1668c:	mov	r1, #0
   16690:	mov	r5, #0
   16694:	str	r2, [sp, #52]	; 0x34
   16698:	mov	r2, #1
   1669c:	str	r0, [sp, #72]	; 0x48
   166a0:	ldr	r0, [fp, #20]
   166a4:	str	r0, [sp, #64]	; 0x40
   166a8:	mov	r0, #0
   166ac:	str	r0, [sp, #92]	; 0x5c
   166b0:	mov	r0, #0
   166b4:	str	r0, [fp, #-76]	; 0xffffffb4
   166b8:	mov	r0, #0
   166bc:	cmp	r9, #10
   166c0:	str	r1, [sp, #68]	; 0x44
   166c4:	bhi	176c4 <__assert_fail@plt+0x5f20>
   166c8:	add	r1, pc, #28
   166cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   166d0:	ldr	lr, [sp, #80]	; 0x50
   166d4:	mov	r6, r4
   166d8:	mov	r8, #0
   166dc:	mov	r3, #1
   166e0:	mov	sl, #0
   166e4:	mov	r4, r2
   166e8:	ldr	pc, [r1, r9, lsl #2]
   166ec:			; <UNDEFINED> instruction: 0x000167bc
   166f0:	strdeq	r6, [r1], -r8
   166f4:	andeq	r6, r1, ip, asr #15
   166f8:			; <UNDEFINED> instruction: 0x000167b4
   166fc:	andeq	r6, r1, ip, ror #15
   16700:	andeq	r6, r1, r4, asr #16
   16704:	ldrdeq	r6, [r1], -ip
   16708:	andeq	r6, r1, r4, lsr #17
   1670c:	andeq	r6, r1, r8, lsl r7
   16710:	andeq	r6, r1, r8, lsl r7
   16714:	andeq	r6, r1, r0, asr #14
   16718:	movw	r0, #46971	; 0xb77b
   1671c:	mov	r1, r9
   16720:	movt	r0, #1
   16724:	bl	17e2c <__assert_fail@plt+0x6688>
   16728:	str	r0, [sp, #64]	; 0x40
   1672c:	movw	r0, #46805	; 0xb6d5
   16730:	mov	r1, r9
   16734:	movt	r0, #1
   16738:	bl	17e2c <__assert_fail@plt+0x6688>
   1673c:	str	r0, [sp, #72]	; 0x48
   16740:	mov	r8, #0
   16744:	mov	sl, r7
   16748:	tst	r7, #1
   1674c:	str	r5, [fp, #-48]	; 0xffffffd0
   16750:	bne	1678c <__assert_fail@plt+0x4fe8>
   16754:	ldr	r0, [sp, #64]	; 0x40
   16758:	ldrb	r0, [r0]
   1675c:	cmp	r0, #0
   16760:	beq	1678c <__assert_fail@plt+0x4fe8>
   16764:	ldr	r1, [sp, #64]	; 0x40
   16768:	mov	r8, #0
   1676c:	add	r1, r1, #1
   16770:	cmp	r8, r6
   16774:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16778:	strbcc	r0, [r2, r8]
   1677c:	ldrb	r0, [r1, r8]
   16780:	add	r8, r8, #1
   16784:	cmp	r0, #0
   16788:	bne	16770 <__assert_fail@plt+0x4fcc>
   1678c:	ldr	r7, [sp, #72]	; 0x48
   16790:	mov	r0, r7
   16794:	bl	11600 <strlen@plt>
   16798:	ldr	ip, [fp, #-84]	; 0xffffffac
   1679c:	ldr	lr, [sp, #80]	; 0x50
   167a0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   167a4:	str	r0, [fp, #-76]	; 0xffffffb4
   167a8:	str	r7, [sp, #92]	; 0x5c
   167ac:	mov	r3, #1
   167b0:	b	168a4 <__assert_fail@plt+0x5100>
   167b4:	mov	r0, #1
   167b8:	b	167f8 <__assert_fail@plt+0x5054>
   167bc:	mov	r9, #0
   167c0:	mov	r8, #0
   167c4:	mov	r3, r0
   167c8:	b	168a0 <__assert_fail@plt+0x50fc>
   167cc:	tst	r7, #1
   167d0:	bne	167f8 <__assert_fail@plt+0x5054>
   167d4:	mov	r3, r0
   167d8:	b	16820 <__assert_fail@plt+0x507c>
   167dc:	mov	r0, #1
   167e0:	mov	r8, #0
   167e4:	mov	r9, #5
   167e8:	b	16858 <__assert_fail@plt+0x50b4>
   167ec:	mov	r3, #1
   167f0:	tst	r7, #1
   167f4:	beq	16820 <__assert_fail@plt+0x507c>
   167f8:	mov	r1, #1
   167fc:	mov	r8, #0
   16800:	mov	r9, #2
   16804:	mov	r3, r0
   16808:	mov	sl, #1
   1680c:	str	r1, [fp, #-76]	; 0xffffffb4
   16810:	movw	r1, #46805	; 0xb6d5
   16814:	movt	r1, #1
   16818:	str	r1, [sp, #92]	; 0x5c
   1681c:	b	168a4 <__assert_fail@plt+0x5100>
   16820:	cmp	r6, #0
   16824:	mov	r8, #1
   16828:	mov	r9, #2
   1682c:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   16830:	movne	r0, #39	; 0x27
   16834:	strbne	r0, [r1]
   16838:	movw	r0, #46805	; 0xb6d5
   1683c:	movt	r0, #1
   16840:	b	16894 <__assert_fail@plt+0x50f0>
   16844:	mov	r9, #5
   16848:	tst	r7, #1
   1684c:	beq	16874 <__assert_fail@plt+0x50d0>
   16850:	mov	r0, #1
   16854:	mov	r8, #0
   16858:	str	r0, [fp, #-76]	; 0xffffffb4
   1685c:	movw	r0, #46969	; 0xb779
   16860:	mov	r3, #1
   16864:	mov	sl, #1
   16868:	movt	r0, #1
   1686c:	str	r0, [sp, #92]	; 0x5c
   16870:	b	168a4 <__assert_fail@plt+0x5100>
   16874:	cmp	r6, #0
   16878:	mov	r8, #1
   1687c:	mov	r3, #1
   16880:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   16884:	movne	r0, #34	; 0x22
   16888:	strbne	r0, [r1]
   1688c:	movw	r0, #46969	; 0xb779
   16890:	movt	r0, #1
   16894:	str	r0, [sp, #92]	; 0x5c
   16898:	mov	r0, #1
   1689c:	str	r0, [fp, #-76]	; 0xffffffb4
   168a0:	mov	sl, #0
   168a4:	ldr	r0, [fp, #16]
   168a8:	mov	r7, #0
   168ac:	str	r9, [fp, #-64]	; 0xffffffc0
   168b0:	str	sl, [fp, #-72]	; 0xffffffb8
   168b4:	str	r3, [sp, #84]	; 0x54
   168b8:	cmp	r0, #0
   168bc:	movwne	r0, #1
   168c0:	and	r0, r0, sl
   168c4:	str	r0, [fp, #-88]	; 0xffffffa8
   168c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   168cc:	cmp	r0, #0
   168d0:	movwne	r0, #1
   168d4:	subs	r2, r9, #2
   168d8:	and	r1, r0, sl
   168dc:	str	r2, [fp, #-80]	; 0xffffffb0
   168e0:	and	r1, r3, r1
   168e4:	str	r1, [sp, #44]	; 0x2c
   168e8:	clz	r1, r2
   168ec:	lsr	r1, r1, #5
   168f0:	and	r1, r1, sl
   168f4:	str	r1, [sp, #56]	; 0x38
   168f8:	mov	r1, r2
   168fc:	eor	r2, sl, #1
   16900:	movwne	r1, #1
   16904:	str	r2, [sp, #88]	; 0x58
   16908:	orr	r2, r1, r2
   1690c:	and	r1, r1, r3
   16910:	and	r0, r0, r1
   16914:	str	r2, [sp, #60]	; 0x3c
   16918:	str	r1, [fp, #-68]	; 0xffffffbc
   1691c:	str	r0, [fp, #-60]	; 0xffffffc4
   16920:	eor	r0, r3, #1
   16924:	str	r0, [sp, #48]	; 0x30
   16928:	cmn	lr, #1
   1692c:	beq	1693c <__assert_fail@plt+0x5198>
   16930:	cmp	r7, lr
   16934:	bne	16948 <__assert_fail@plt+0x51a4>
   16938:	b	174f4 <__assert_fail@plt+0x5d50>
   1693c:	ldrb	r0, [ip, r7]
   16940:	cmp	r0, #0
   16944:	beq	174fc <__assert_fail@plt+0x5d58>
   16948:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1694c:	mov	r9, #0
   16950:	str	r5, [fp, #-48]	; 0xffffffd0
   16954:	str	r6, [fp, #-52]	; 0xffffffcc
   16958:	cmp	r0, #0
   1695c:	beq	1699c <__assert_fail@plt+0x51f8>
   16960:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16964:	mov	r5, r4
   16968:	add	r4, r7, r0
   1696c:	cmp	r0, #2
   16970:	bcc	1698c <__assert_fail@plt+0x51e8>
   16974:	cmn	lr, #1
   16978:	bne	1698c <__assert_fail@plt+0x51e8>
   1697c:	mov	r0, ip
   16980:	bl	11600 <strlen@plt>
   16984:	ldr	ip, [fp, #-84]	; 0xffffffac
   16988:	mov	lr, r0
   1698c:	cmp	r4, lr
   16990:	bls	169a4 <__assert_fail@plt+0x5200>
   16994:	mov	r6, #0
   16998:	b	169e4 <__assert_fail@plt+0x5240>
   1699c:	mov	r6, #0
   169a0:	b	169e8 <__assert_fail@plt+0x5244>
   169a4:	ldr	r1, [sp, #92]	; 0x5c
   169a8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   169ac:	add	r0, ip, r7
   169b0:	mov	r4, lr
   169b4:	bl	11498 <memcmp@plt>
   169b8:	ldr	r2, [sp, #88]	; 0x58
   169bc:	cmp	r0, #0
   169c0:	mov	r1, r0
   169c4:	movwne	r1, #1
   169c8:	orr	r1, r1, r2
   169cc:	tst	r1, #1
   169d0:	beq	17590 <__assert_fail@plt+0x5dec>
   169d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   169d8:	clz	r0, r0
   169dc:	mov	lr, r4
   169e0:	lsr	r6, r0, #5
   169e4:	mov	r4, r5
   169e8:	ldrb	r5, [ip, r7]
   169ec:	cmp	r5, #126	; 0x7e
   169f0:	bhi	16db8 <__assert_fail@plt+0x5614>
   169f4:	add	r3, pc, #16
   169f8:	mov	sl, #1
   169fc:	mov	r2, #110	; 0x6e
   16a00:	mov	r0, #97	; 0x61
   16a04:	mov	r1, #0
   16a08:	ldr	pc, [r3, r5, lsl #2]
   16a0c:	muleq	r1, ip, ip
   16a10:			; <UNDEFINED> instruction: 0x00016db8
   16a14:			; <UNDEFINED> instruction: 0x00016db8
   16a18:			; <UNDEFINED> instruction: 0x00016db8
   16a1c:			; <UNDEFINED> instruction: 0x00016db8
   16a20:			; <UNDEFINED> instruction: 0x00016db8
   16a24:			; <UNDEFINED> instruction: 0x00016db8
   16a28:	andeq	r6, r1, ip, asr lr
   16a2c:	andeq	r6, r1, ip, ror ip
   16a30:	andeq	r6, r1, r4, ror ip
   16a34:	andeq	r6, r1, r8, lsl #25
   16a38:	andeq	r6, r1, ip, lsl #26
   16a3c:	andeq	r6, r1, ip, ror #24
   16a40:	andeq	r6, r1, r4, lsl #25
   16a44:			; <UNDEFINED> instruction: 0x00016db8
   16a48:			; <UNDEFINED> instruction: 0x00016db8
   16a4c:			; <UNDEFINED> instruction: 0x00016db8
   16a50:			; <UNDEFINED> instruction: 0x00016db8
   16a54:			; <UNDEFINED> instruction: 0x00016db8
   16a58:			; <UNDEFINED> instruction: 0x00016db8
   16a5c:			; <UNDEFINED> instruction: 0x00016db8
   16a60:			; <UNDEFINED> instruction: 0x00016db8
   16a64:			; <UNDEFINED> instruction: 0x00016db8
   16a68:			; <UNDEFINED> instruction: 0x00016db8
   16a6c:			; <UNDEFINED> instruction: 0x00016db8
   16a70:			; <UNDEFINED> instruction: 0x00016db8
   16a74:			; <UNDEFINED> instruction: 0x00016db8
   16a78:			; <UNDEFINED> instruction: 0x00016db8
   16a7c:			; <UNDEFINED> instruction: 0x00016db8
   16a80:			; <UNDEFINED> instruction: 0x00016db8
   16a84:			; <UNDEFINED> instruction: 0x00016db8
   16a88:			; <UNDEFINED> instruction: 0x00016db8
   16a8c:	andeq	r6, r1, ip, lsl lr
   16a90:	andeq	r6, r1, r0, lsr #28
   16a94:	andeq	r6, r1, r0, lsr #28
   16a98:	andeq	r6, r1, ip, lsl ip
   16a9c:	andeq	r6, r1, r0, lsr #28
   16aa0:	andeq	r6, r1, r8, lsl #24
   16aa4:	andeq	r6, r1, r0, lsr #28
   16aa8:	andeq	r6, r1, r4, lsl sp
   16aac:	andeq	r6, r1, r0, lsr #28
   16ab0:	andeq	r6, r1, r0, lsr #28
   16ab4:	andeq	r6, r1, r0, lsr #28
   16ab8:	andeq	r6, r1, r8, lsl #24
   16abc:	andeq	r6, r1, r8, lsl #24
   16ac0:	andeq	r6, r1, r8, lsl #24
   16ac4:	andeq	r6, r1, r8, lsl #24
   16ac8:	andeq	r6, r1, r8, lsl #24
   16acc:	andeq	r6, r1, r8, lsl #24
   16ad0:	andeq	r6, r1, r8, lsl #24
   16ad4:	andeq	r6, r1, r8, lsl #24
   16ad8:	andeq	r6, r1, r8, lsl #24
   16adc:	andeq	r6, r1, r8, lsl #24
   16ae0:	andeq	r6, r1, r8, lsl #24
   16ae4:	andeq	r6, r1, r8, lsl #24
   16ae8:	andeq	r6, r1, r8, lsl #24
   16aec:	andeq	r6, r1, r8, lsl #24
   16af0:	andeq	r6, r1, r8, lsl #24
   16af4:	andeq	r6, r1, r8, lsl #24
   16af8:	andeq	r6, r1, r0, lsr #28
   16afc:	andeq	r6, r1, r0, lsr #28
   16b00:	andeq	r6, r1, r0, lsr #28
   16b04:	andeq	r6, r1, r0, lsr #28
   16b08:	andeq	r6, r1, r0, ror #25
   16b0c:			; <UNDEFINED> instruction: 0x00016db8
   16b10:	andeq	r6, r1, r8, lsl #24
   16b14:	andeq	r6, r1, r8, lsl #24
   16b18:	andeq	r6, r1, r8, lsl #24
   16b1c:	andeq	r6, r1, r8, lsl #24
   16b20:	andeq	r6, r1, r8, lsl #24
   16b24:	andeq	r6, r1, r8, lsl #24
   16b28:	andeq	r6, r1, r8, lsl #24
   16b2c:	andeq	r6, r1, r8, lsl #24
   16b30:	andeq	r6, r1, r8, lsl #24
   16b34:	andeq	r6, r1, r8, lsl #24
   16b38:	andeq	r6, r1, r8, lsl #24
   16b3c:	andeq	r6, r1, r8, lsl #24
   16b40:	andeq	r6, r1, r8, lsl #24
   16b44:	andeq	r6, r1, r8, lsl #24
   16b48:	andeq	r6, r1, r8, lsl #24
   16b4c:	andeq	r6, r1, r8, lsl #24
   16b50:	andeq	r6, r1, r8, lsl #24
   16b54:	andeq	r6, r1, r8, lsl #24
   16b58:	andeq	r6, r1, r8, lsl #24
   16b5c:	andeq	r6, r1, r8, lsl #24
   16b60:	andeq	r6, r1, r8, lsl #24
   16b64:	andeq	r6, r1, r8, lsl #24
   16b68:	andeq	r6, r1, r8, lsl #24
   16b6c:	andeq	r6, r1, r8, lsl #24
   16b70:	andeq	r6, r1, r8, lsl #24
   16b74:	andeq	r6, r1, r8, lsl #24
   16b78:	andeq	r6, r1, r0, lsr #28
   16b7c:	andeq	r6, r1, r8, asr #24
   16b80:	andeq	r6, r1, r8, lsl #24
   16b84:	andeq	r6, r1, r0, lsr #28
   16b88:	andeq	r6, r1, r8, lsl #24
   16b8c:	andeq	r6, r1, r0, lsr #28
   16b90:	andeq	r6, r1, r8, lsl #24
   16b94:	andeq	r6, r1, r8, lsl #24
   16b98:	andeq	r6, r1, r8, lsl #24
   16b9c:	andeq	r6, r1, r8, lsl #24
   16ba0:	andeq	r6, r1, r8, lsl #24
   16ba4:	andeq	r6, r1, r8, lsl #24
   16ba8:	andeq	r6, r1, r8, lsl #24
   16bac:	andeq	r6, r1, r8, lsl #24
   16bb0:	andeq	r6, r1, r8, lsl #24
   16bb4:	andeq	r6, r1, r8, lsl #24
   16bb8:	andeq	r6, r1, r8, lsl #24
   16bbc:	andeq	r6, r1, r8, lsl #24
   16bc0:	andeq	r6, r1, r8, lsl #24
   16bc4:	andeq	r6, r1, r8, lsl #24
   16bc8:	andeq	r6, r1, r8, lsl #24
   16bcc:	andeq	r6, r1, r8, lsl #24
   16bd0:	andeq	r6, r1, r8, lsl #24
   16bd4:	andeq	r6, r1, r8, lsl #24
   16bd8:	andeq	r6, r1, r8, lsl #24
   16bdc:	andeq	r6, r1, r8, lsl #24
   16be0:	andeq	r6, r1, r8, lsl #24
   16be4:	andeq	r6, r1, r8, lsl #24
   16be8:	andeq	r6, r1, r8, lsl #24
   16bec:	andeq	r6, r1, r8, lsl #24
   16bf0:	andeq	r6, r1, r8, lsl #24
   16bf4:	andeq	r6, r1, r8, lsl #24
   16bf8:	andeq	r6, r1, ip, lsr #24
   16bfc:	andeq	r6, r1, r0, lsr #28
   16c00:	andeq	r6, r1, ip, lsr #24
   16c04:	andeq	r6, r1, ip, lsl ip
   16c08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16c0c:	cmp	r0, #0
   16c10:	beq	16e70 <__assert_fail@plt+0x56cc>
   16c14:	ldr	r0, [fp, #16]
   16c18:	b	16e74 <__assert_fail@plt+0x56d0>
   16c1c:	mov	sl, #0
   16c20:	cmp	r7, #0
   16c24:	bne	1708c <__assert_fail@plt+0x58e8>
   16c28:	b	16e1c <__assert_fail@plt+0x5678>
   16c2c:	mov	sl, #0
   16c30:	cmn	lr, #1
   16c34:	beq	16e08 <__assert_fail@plt+0x5664>
   16c38:	cmp	r7, #0
   16c3c:	cmpeq	lr, #1
   16c40:	bne	1708c <__assert_fail@plt+0x58e8>
   16c44:	b	16e1c <__assert_fail@plt+0x5678>
   16c48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16c4c:	cmp	r0, #2
   16c50:	bne	16e40 <__assert_fail@plt+0x569c>
   16c54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16c58:	tst	r0, #1
   16c5c:	bne	175ac <__assert_fail@plt+0x5e08>
   16c60:	mov	r9, #0
   16c64:	mov	r0, #92	; 0x5c
   16c68:	b	16e54 <__assert_fail@plt+0x56b0>
   16c6c:	mov	r0, #102	; 0x66
   16c70:	b	16e5c <__assert_fail@plt+0x56b8>
   16c74:	mov	r2, #116	; 0x74
   16c78:	b	16c88 <__assert_fail@plt+0x54e4>
   16c7c:	mov	r0, #98	; 0x62
   16c80:	b	16e5c <__assert_fail@plt+0x56b8>
   16c84:	mov	r2, #114	; 0x72
   16c88:	ldr	r0, [sp, #60]	; 0x3c
   16c8c:	tst	r0, #1
   16c90:	mov	r0, r2
   16c94:	bne	16e5c <__assert_fail@plt+0x56b8>
   16c98:	b	175ac <__assert_fail@plt+0x5e08>
   16c9c:	ldr	r0, [sp, #84]	; 0x54
   16ca0:	tst	r0, #1
   16ca4:	beq	16f48 <__assert_fail@plt+0x57a4>
   16ca8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16cac:	tst	r0, #1
   16cb0:	bne	176b4 <__assert_fail@plt+0x5f10>
   16cb4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16cb8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16cbc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16cc0:	cmp	r0, #2
   16cc4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16cc8:	movwne	r0, #1
   16ccc:	orr	r0, r0, r3
   16cd0:	tst	r0, #1
   16cd4:	beq	173c8 <__assert_fail@plt+0x5c24>
   16cd8:	mov	r0, r8
   16cdc:	b	17408 <__assert_fail@plt+0x5c64>
   16ce0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16ce4:	mov	r9, #0
   16ce8:	mov	r5, #63	; 0x3f
   16cec:	cmp	r0, #5
   16cf0:	beq	17094 <__assert_fail@plt+0x58f0>
   16cf4:	cmp	r0, #2
   16cf8:	bne	17154 <__assert_fail@plt+0x59b0>
   16cfc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16d00:	tst	r0, #1
   16d04:	beq	17158 <__assert_fail@plt+0x59b4>
   16d08:	b	175ac <__assert_fail@plt+0x5e08>
   16d0c:	mov	r0, #118	; 0x76
   16d10:	b	16e5c <__assert_fail@plt+0x56b8>
   16d14:	mov	r0, #1
   16d18:	mov	r5, #39	; 0x27
   16d1c:	str	r0, [sp, #52]	; 0x34
   16d20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16d24:	cmp	r0, #2
   16d28:	bne	16db0 <__assert_fail@plt+0x560c>
   16d2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16d30:	tst	r0, #1
   16d34:	bne	175ac <__assert_fail@plt+0x5e08>
   16d38:	ldr	r3, [sp, #68]	; 0x44
   16d3c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16d40:	mov	r9, #0
   16d44:	clz	r1, r2
   16d48:	cmp	r3, #0
   16d4c:	mov	r0, r3
   16d50:	movwne	r0, #1
   16d54:	lsr	r1, r1, #5
   16d58:	orrs	r0, r0, r1
   16d5c:	moveq	r3, r2
   16d60:	moveq	r2, r0
   16d64:	cmp	r8, r2
   16d68:	str	r3, [sp, #68]	; 0x44
   16d6c:	str	r2, [fp, #-52]	; 0xffffffcc
   16d70:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   16d74:	movcc	r0, #39	; 0x27
   16d78:	strbcc	r0, [r1, r8]
   16d7c:	add	r0, r8, #1
   16d80:	cmp	r0, r2
   16d84:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16d88:	movcc	r1, #92	; 0x5c
   16d8c:	strbcc	r1, [r3, r0]
   16d90:	add	r0, r8, #2
   16d94:	add	r8, r8, #3
   16d98:	cmp	r0, r2
   16d9c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16da0:	movcc	r1, #39	; 0x27
   16da4:	strbcc	r1, [r2, r0]
   16da8:	mov	r0, #0
   16dac:	str	r0, [fp, #-48]	; 0xffffffd0
   16db0:	mov	sl, #1
   16db4:	b	16c08 <__assert_fail@plt+0x5464>
   16db8:	ldr	r0, [sp, #32]
   16dbc:	cmp	r0, #1
   16dc0:	bne	16f6c <__assert_fail@plt+0x57c8>
   16dc4:	str	lr, [sp, #80]	; 0x50
   16dc8:	bl	115d0 <__ctype_b_loc@plt>
   16dcc:	ldr	r0, [r0]
   16dd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16dd4:	mov	r1, #1
   16dd8:	add	r0, r0, r5, lsl #1
   16ddc:	ldrb	r0, [r0, #1]
   16de0:	ubfx	sl, r0, #6, #1
   16de4:	ldr	r0, [sp, #48]	; 0x30
   16de8:	mov	r2, r1
   16dec:	cmp	r1, #1
   16df0:	orr	r0, sl, r0
   16df4:	bhi	17160 <__assert_fail@plt+0x59bc>
   16df8:	tst	r0, #1
   16dfc:	beq	17160 <__assert_fail@plt+0x59bc>
   16e00:	ldr	lr, [sp, #80]	; 0x50
   16e04:	b	16c08 <__assert_fail@plt+0x5464>
   16e08:	cmp	r7, #0
   16e0c:	bne	17088 <__assert_fail@plt+0x58e4>
   16e10:	ldrb	r0, [ip, #1]
   16e14:	cmp	r0, #0
   16e18:	bne	17088 <__assert_fail@plt+0x58e4>
   16e1c:	mov	r1, #1
   16e20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16e24:	cmp	r0, #2
   16e28:	bne	16e38 <__assert_fail@plt+0x5694>
   16e2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e30:	tst	r0, #1
   16e34:	bne	175ac <__assert_fail@plt+0x5e08>
   16e38:	mov	sl, r1
   16e3c:	b	16c08 <__assert_fail@plt+0x5464>
   16e40:	ldr	r1, [sp, #44]	; 0x2c
   16e44:	mov	r9, #0
   16e48:	mov	r0, #92	; 0x5c
   16e4c:	cmp	r1, #0
   16e50:	beq	16e5c <__assert_fail@plt+0x56b8>
   16e54:	mov	sl, #0
   16e58:	b	17374 <__assert_fail@plt+0x5bd0>
   16e5c:	ldr	r1, [sp, #84]	; 0x54
   16e60:	mov	sl, #0
   16e64:	mov	r9, #0
   16e68:	tst	r1, #1
   16e6c:	bne	16ea8 <__assert_fail@plt+0x5704>
   16e70:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16e74:	cmp	r0, #0
   16e78:	mov	r0, r5
   16e7c:	beq	16ea0 <__assert_fail@plt+0x56fc>
   16e80:	ldr	r1, [fp, #16]
   16e84:	ubfx	r0, r5, #5, #3
   16e88:	mov	r2, #1
   16e8c:	ldr	r0, [r1, r0, lsl #2]
   16e90:	and	r1, r5, #31
   16e94:	tst	r0, r2, lsl r1
   16e98:	mov	r0, r5
   16e9c:	bne	16ea8 <__assert_fail@plt+0x5704>
   16ea0:	cmp	r6, #0
   16ea4:	beq	17374 <__assert_fail@plt+0x5bd0>
   16ea8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16eac:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16eb0:	tst	r1, #1
   16eb4:	bne	17588 <__assert_fail@plt+0x5de4>
   16eb8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16ebc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16ec0:	cmp	r1, #2
   16ec4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16ec8:	movwne	r1, #1
   16ecc:	orr	r1, r1, r5
   16ed0:	tst	r1, #1
   16ed4:	bne	16f18 <__assert_fail@plt+0x5774>
   16ed8:	cmp	r8, r6
   16edc:	mov	r5, #1
   16ee0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16ee4:	movcc	r1, #39	; 0x27
   16ee8:	strbcc	r1, [r2, r8]
   16eec:	add	r1, r8, #1
   16ef0:	cmp	r1, r6
   16ef4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16ef8:	movcc	r2, #36	; 0x24
   16efc:	strbcc	r2, [r3, r1]
   16f00:	add	r1, r8, #2
   16f04:	add	r8, r8, #3
   16f08:	cmp	r1, r6
   16f0c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16f10:	movcc	r2, #39	; 0x27
   16f14:	strbcc	r2, [r3, r1]
   16f18:	cmp	r8, r6
   16f1c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16f20:	movcc	r1, #92	; 0x5c
   16f24:	strbcc	r1, [r2, r8]
   16f28:	add	r8, r8, #1
   16f2c:	cmp	r8, r6
   16f30:	and	r4, r4, sl
   16f34:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   16f38:	strbcc	r0, [r1, r8]
   16f3c:	add	r8, r8, #1
   16f40:	add	r7, r7, #1
   16f44:	b	16928 <__assert_fail@plt+0x5184>
   16f48:	ldr	r0, [sp, #28]
   16f4c:	mov	sl, #0
   16f50:	mov	r9, #0
   16f54:	mov	r5, #0
   16f58:	cmp	r0, #0
   16f5c:	beq	16e70 <__assert_fail@plt+0x56cc>
   16f60:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16f64:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16f68:	b	16f40 <__assert_fail@plt+0x579c>
   16f6c:	mov	r0, #0
   16f70:	cmn	lr, #1
   16f74:	str	r6, [sp, #76]	; 0x4c
   16f78:	str	r4, [sp, #20]
   16f7c:	str	r0, [fp, #-36]	; 0xffffffdc
   16f80:	str	r0, [fp, #-40]	; 0xffffffd8
   16f84:	bne	16f98 <__assert_fail@plt+0x57f4>
   16f88:	mov	r0, ip
   16f8c:	bl	11600 <strlen@plt>
   16f90:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f94:	mov	lr, r0
   16f98:	add	r0, ip, r7
   16f9c:	mov	sl, #1
   16fa0:	mov	r6, #0
   16fa4:	sub	r4, fp, #40	; 0x28
   16fa8:	str	lr, [sp, #80]	; 0x50
   16fac:	str	r0, [sp, #36]	; 0x24
   16fb0:	str	r6, [sp, #40]	; 0x28
   16fb4:	add	r6, r6, r7
   16fb8:	sub	r0, fp, #44	; 0x2c
   16fbc:	mov	r3, r4
   16fc0:	add	r1, ip, r6
   16fc4:	sub	r2, lr, r6
   16fc8:	bl	191e8 <__assert_fail@plt+0x7a44>
   16fcc:	cmp	r0, #0
   16fd0:	beq	174dc <__assert_fail@plt+0x5d38>
   16fd4:	cmn	r0, #1
   16fd8:	beq	1749c <__assert_fail@plt+0x5cf8>
   16fdc:	ldr	lr, [sp, #80]	; 0x50
   16fe0:	cmn	r0, #2
   16fe4:	beq	174a4 <__assert_fail@plt+0x5d00>
   16fe8:	ldr	r2, [sp, #56]	; 0x38
   16fec:	cmp	r0, #2
   16ff0:	mov	r1, #0
   16ff4:	movwcc	r1, #1
   16ff8:	eor	r2, r2, #1
   16ffc:	orrs	r1, r2, r1
   17000:	bne	1704c <__assert_fail@plt+0x58a8>
   17004:	ldr	r1, [sp, #40]	; 0x28
   17008:	ldr	r2, [sp, #36]	; 0x24
   1700c:	add	ip, r2, r1
   17010:	mov	r2, #1
   17014:	ldrb	r3, [ip, r2]
   17018:	sub	r6, r3, #94	; 0x5e
   1701c:	cmp	r6, #30
   17020:	bhi	17034 <__assert_fail@plt+0x5890>
   17024:	mov	r4, #1
   17028:	mov	r1, #1073741829	; 0x40000005
   1702c:	tst	r1, r4, lsl r6
   17030:	bne	175a8 <__assert_fail@plt+0x5e04>
   17034:	sub	r3, r3, #91	; 0x5b
   17038:	cmp	r3, #2
   1703c:	bcc	175a8 <__assert_fail@plt+0x5e04>
   17040:	add	r2, r2, #1
   17044:	cmp	r2, r0
   17048:	bcc	17014 <__assert_fail@plt+0x5870>
   1704c:	ldr	r6, [sp, #40]	; 0x28
   17050:	add	r6, r0, r6
   17054:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17058:	bl	114f8 <iswprint@plt>
   1705c:	cmp	r0, #0
   17060:	sub	r4, fp, #40	; 0x28
   17064:	movwne	r0, #1
   17068:	and	sl, sl, r0
   1706c:	mov	r0, r4
   17070:	bl	11480 <mbsinit@plt>
   17074:	ldr	lr, [sp, #80]	; 0x50
   17078:	ldr	ip, [fp, #-84]	; 0xffffffac
   1707c:	cmp	r0, #0
   17080:	beq	16fb0 <__assert_fail@plt+0x580c>
   17084:	b	174e4 <__assert_fail@plt+0x5d40>
   17088:	mvn	lr, #0
   1708c:	mov	r9, #0
   17090:	b	16c08 <__assert_fail@plt+0x5464>
   17094:	ldr	r0, [sp, #24]
   17098:	cmp	r0, #0
   1709c:	beq	17154 <__assert_fail@plt+0x59b0>
   170a0:	add	r0, r7, #2
   170a4:	cmp	r0, lr
   170a8:	bcs	17154 <__assert_fail@plt+0x59b0>
   170ac:	add	r1, ip, r7
   170b0:	ldrb	r1, [r1, #1]
   170b4:	cmp	r1, #63	; 0x3f
   170b8:	bne	17154 <__assert_fail@plt+0x59b0>
   170bc:	ldrb	r5, [ip, r0]
   170c0:	sub	r1, r5, #33	; 0x21
   170c4:	cmp	r1, #29
   170c8:	bhi	17154 <__assert_fail@plt+0x59b0>
   170cc:	movw	r3, #20929	; 0x51c1
   170d0:	mov	r2, #1
   170d4:	movt	r3, #14336	; 0x3800
   170d8:	tst	r3, r2, lsl r1
   170dc:	beq	17154 <__assert_fail@plt+0x59b0>
   170e0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   170e4:	tst	r1, #1
   170e8:	bne	176bc <__assert_fail@plt+0x5f18>
   170ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   170f0:	mov	r7, r0
   170f4:	cmp	r8, r1
   170f8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   170fc:	movcc	r1, #63	; 0x3f
   17100:	strbcc	r1, [r2, r8]
   17104:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17108:	add	r1, r8, #1
   1710c:	cmp	r1, r2
   17110:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17114:	movcc	r2, #34	; 0x22
   17118:	strbcc	r2, [r3, r1]
   1711c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17120:	add	r1, r8, #2
   17124:	cmp	r1, r2
   17128:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1712c:	movcc	r2, #34	; 0x22
   17130:	strbcc	r2, [r3, r1]
   17134:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17138:	add	r1, r8, #3
   1713c:	add	r8, r8, #4
   17140:	cmp	r1, r2
   17144:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17148:	movcc	r2, #63	; 0x3f
   1714c:	strbcc	r2, [r3, r1]
   17150:	b	17158 <__assert_fail@plt+0x59b4>
   17154:	mov	r5, #63	; 0x3f
   17158:	mov	sl, #0
   1715c:	b	16c08 <__assert_fail@plt+0x5464>
   17160:	str	r0, [sp, #40]	; 0x28
   17164:	add	r0, r2, r7
   17168:	str	r6, [sp, #76]	; 0x4c
   1716c:	add	r1, r7, #1
   17170:	ldr	lr, [sp, #80]	; 0x50
   17174:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17178:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1717c:	mov	r3, #0
   17180:	str	r0, [sp, #36]	; 0x24
   17184:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17188:	b	1721c <__assert_fail@plt+0x5a78>
   1718c:	str	r0, [sp, #76]	; 0x4c
   17190:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17194:	cmp	r9, #0
   17198:	movwne	r9, #1
   1719c:	mvn	r7, r0
   171a0:	orr	r7, r7, r9
   171a4:	tst	r7, #1
   171a8:	bne	171f8 <__assert_fail@plt+0x5a54>
   171ac:	ldr	r6, [fp, #-52]	; 0xffffffcc
   171b0:	cmp	r8, r6
   171b4:	bcs	171cc <__assert_fail@plt+0x5a28>
   171b8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   171bc:	mov	r2, r4
   171c0:	mov	r4, #39	; 0x27
   171c4:	strb	r4, [r7, r8]
   171c8:	mov	r4, r2
   171cc:	add	r7, r8, #1
   171d0:	cmp	r7, r6
   171d4:	bcs	171ec <__assert_fail@plt+0x5a48>
   171d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   171dc:	mov	r2, r4
   171e0:	mov	r4, #39	; 0x27
   171e4:	strb	r4, [r0, r7]
   171e8:	mov	r4, r2
   171ec:	add	r8, r8, #2
   171f0:	mov	r0, #0
   171f4:	b	17200 <__assert_fail@plt+0x5a5c>
   171f8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   171fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17200:	cmp	r8, r6
   17204:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17208:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1720c:	strbcc	r5, [r2, r8]
   17210:	add	r8, r8, #1
   17214:	ldrb	r5, [ip, r1]
   17218:	add	r1, r1, #1
   1721c:	ldr	r2, [sp, #40]	; 0x28
   17220:	tst	r2, #1
   17224:	beq	17260 <__assert_fail@plt+0x5abc>
   17228:	ldr	r2, [sp, #76]	; 0x4c
   1722c:	str	r0, [fp, #-48]	; 0xffffffd0
   17230:	tst	r2, #1
   17234:	beq	17258 <__assert_fail@plt+0x5ab4>
   17238:	cmp	r8, r6
   1723c:	bcs	17254 <__assert_fail@plt+0x5ab0>
   17240:	ldr	r6, [fp, #-56]	; 0xffffffc8
   17244:	mov	r2, r4
   17248:	mov	r4, #92	; 0x5c
   1724c:	strb	r4, [r6, r8]
   17250:	mov	r4, r2
   17254:	add	r8, r8, #1
   17258:	mov	r0, #0
   1725c:	b	17354 <__assert_fail@plt+0x5bb0>
   17260:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17264:	tst	r2, #1
   17268:	bne	175b4 <__assert_fail@plt+0x5e10>
   1726c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17270:	cmp	r7, #2
   17274:	movwne	r3, #1
   17278:	orr	r3, r3, r0
   1727c:	tst	r3, #1
   17280:	bne	172dc <__assert_fail@plt+0x5b38>
   17284:	cmp	r8, r6
   17288:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1728c:	movcc	r3, #39	; 0x27
   17290:	strbcc	r3, [r2, r8]
   17294:	add	r3, r8, #1
   17298:	cmp	r3, r6
   1729c:	bcs	172b4 <__assert_fail@plt+0x5b10>
   172a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   172a4:	mov	r7, r4
   172a8:	mov	r4, #36	; 0x24
   172ac:	strb	r4, [r2, r3]
   172b0:	mov	r4, r7
   172b4:	add	r3, r8, #2
   172b8:	cmp	r3, r6
   172bc:	bcs	172d4 <__assert_fail@plt+0x5b30>
   172c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   172c4:	mov	r7, r4
   172c8:	mov	r4, #39	; 0x27
   172cc:	strb	r4, [r2, r3]
   172d0:	mov	r4, r7
   172d4:	add	r8, r8, #3
   172d8:	mov	r0, #1
   172dc:	cmp	r8, r6
   172e0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   172e4:	movcc	r3, #92	; 0x5c
   172e8:	strbcc	r3, [r2, r8]
   172ec:	add	r3, r8, #1
   172f0:	cmp	r3, r6
   172f4:	bcs	17314 <__assert_fail@plt+0x5b70>
   172f8:	mov	r2, r4
   172fc:	and	r7, r5, #192	; 0xc0
   17300:	mov	r4, #48	; 0x30
   17304:	orr	r7, r4, r7, lsr #6
   17308:	mov	r4, r2
   1730c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17310:	strb	r7, [r2, r3]
   17314:	add	r3, r8, #2
   17318:	cmp	r3, r6
   1731c:	bcs	1733c <__assert_fail@plt+0x5b98>
   17320:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17324:	mov	r6, r4
   17328:	lsr	r7, r5, #3
   1732c:	mov	r4, #6
   17330:	bfi	r7, r4, #3, #29
   17334:	mov	r4, r6
   17338:	strb	r7, [r2, r3]
   1733c:	str	r0, [fp, #-48]	; 0xffffffd0
   17340:	ldr	r0, [sp, #76]	; 0x4c
   17344:	mov	r3, #6
   17348:	add	r8, r8, #3
   1734c:	bfi	r5, r3, #3, #29
   17350:	mov	r3, #1
   17354:	ldr	r2, [sp, #36]	; 0x24
   17358:	and	r9, r3, #1
   1735c:	cmp	r2, r1
   17360:	bhi	1718c <__assert_fail@plt+0x59e8>
   17364:	cmp	r9, #0
   17368:	sub	r7, r1, #1
   1736c:	mov	r0, r5
   17370:	movwne	r9, #1
   17374:	cmp	r9, #0
   17378:	bne	173bc <__assert_fail@plt+0x5c18>
   1737c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17380:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17384:	tst	r5, #1
   17388:	beq	16f2c <__assert_fail@plt+0x5788>
   1738c:	cmp	r8, r6
   17390:	mov	r5, #0
   17394:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17398:	movcc	r1, #39	; 0x27
   1739c:	strbcc	r1, [r2, r8]
   173a0:	add	r1, r8, #1
   173a4:	add	r8, r8, #2
   173a8:	cmp	r1, r6
   173ac:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   173b0:	movcc	r2, #39	; 0x27
   173b4:	strbcc	r2, [r3, r1]
   173b8:	b	16f2c <__assert_fail@plt+0x5788>
   173bc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   173c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   173c4:	b	16f2c <__assert_fail@plt+0x5788>
   173c8:	cmp	r8, r1
   173cc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   173d0:	movcc	r0, #39	; 0x27
   173d4:	strbcc	r0, [r2, r8]
   173d8:	add	r0, r8, #1
   173dc:	cmp	r0, r1
   173e0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   173e4:	movcc	r2, #36	; 0x24
   173e8:	strbcc	r2, [r3, r0]
   173ec:	add	r0, r8, #2
   173f0:	cmp	r0, r1
   173f4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   173f8:	movcc	r2, #39	; 0x27
   173fc:	strbcc	r2, [r3, r0]
   17400:	add	r0, r8, #3
   17404:	mov	r3, #1
   17408:	cmp	r0, r1
   1740c:	add	r8, r0, #1
   17410:	str	r3, [fp, #-48]	; 0xffffffd0
   17414:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17418:	movcc	r1, #92	; 0x5c
   1741c:	strbcc	r1, [r2, r0]
   17420:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17424:	cmp	r1, #2
   17428:	beq	1748c <__assert_fail@plt+0x5ce8>
   1742c:	add	r1, r7, #1
   17430:	mov	sl, #0
   17434:	mov	r9, #1
   17438:	mov	r5, #48	; 0x30
   1743c:	cmp	r1, lr
   17440:	bcs	16c08 <__assert_fail@plt+0x5464>
   17444:	ldrb	r1, [ip, r1]
   17448:	sub	r1, r1, #48	; 0x30
   1744c:	uxtb	r1, r1
   17450:	cmp	r1, #9
   17454:	bhi	16c08 <__assert_fail@plt+0x5464>
   17458:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1745c:	cmp	r8, r1
   17460:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17464:	movcc	r1, #48	; 0x30
   17468:	strbcc	r1, [r2, r8]
   1746c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17470:	add	r1, r0, #2
   17474:	add	r8, r0, #3
   17478:	cmp	r1, r2
   1747c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17480:	movcc	r2, #48	; 0x30
   17484:	strbcc	r2, [r3, r1]
   17488:	b	16c08 <__assert_fail@plt+0x5464>
   1748c:	mov	r0, #48	; 0x30
   17490:	mov	r9, #1
   17494:	mov	sl, #0
   17498:	b	16ea0 <__assert_fail@plt+0x56fc>
   1749c:	mov	sl, #0
   174a0:	b	174dc <__assert_fail@plt+0x5d38>
   174a4:	mov	sl, #0
   174a8:	cmp	lr, r6
   174ac:	bls	174dc <__assert_fail@plt+0x5d38>
   174b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   174b4:	ldr	r6, [sp, #40]	; 0x28
   174b8:	ldr	r0, [sp, #36]	; 0x24
   174bc:	ldrb	r0, [r0, r6]
   174c0:	cmp	r0, #0
   174c4:	beq	174e4 <__assert_fail@plt+0x5d40>
   174c8:	add	r6, r6, #1
   174cc:	add	r0, r7, r6
   174d0:	cmp	r0, lr
   174d4:	bcc	174b8 <__assert_fail@plt+0x5d14>
   174d8:	b	174e4 <__assert_fail@plt+0x5d40>
   174dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   174e0:	ldr	r6, [sp, #40]	; 0x28
   174e4:	mov	r1, r6
   174e8:	ldr	r4, [sp, #20]
   174ec:	ldr	r6, [sp, #76]	; 0x4c
   174f0:	b	16de4 <__assert_fail@plt+0x5640>
   174f4:	mov	lr, r7
   174f8:	b	17500 <__assert_fail@plt+0x5d5c>
   174fc:	mvn	lr, #0
   17500:	ldr	r9, [fp, #-64]	; 0xffffffc0
   17504:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17508:	eor	r0, r9, #2
   1750c:	orr	r0, r0, r8
   17510:	clz	r0, r0
   17514:	lsr	r0, r0, #5
   17518:	tst	r1, r0
   1751c:	bne	17618 <__assert_fail@plt+0x5e74>
   17520:	mov	r0, r1
   17524:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17528:	cmp	r9, #2
   1752c:	movwne	r1, #1
   17530:	orr	r0, r0, r1
   17534:	tst	r0, #1
   17538:	bne	17658 <__assert_fail@plt+0x5eb4>
   1753c:	ldr	r0, [sp, #52]	; 0x34
   17540:	ldr	r1, [sp, #68]	; 0x44
   17544:	str	lr, [sp, #80]	; 0x50
   17548:	eor	r0, r0, #1
   1754c:	tst	r0, #1
   17550:	bne	17658 <__assert_fail@plt+0x5eb4>
   17554:	tst	r4, #1
   17558:	bne	17620 <__assert_fail@plt+0x5e7c>
   1755c:	mov	r7, #0
   17560:	cmp	r1, #0
   17564:	beq	17650 <__assert_fail@plt+0x5eac>
   17568:	ldr	r0, [sp, #84]	; 0x54
   1756c:	mov	r3, #0
   17570:	cmp	r6, #0
   17574:	mov	r2, #0
   17578:	mov	r4, r1
   1757c:	str	r3, [fp, #-72]	; 0xffffffb8
   17580:	beq	166bc <__assert_fail@plt+0x4f18>
   17584:	b	17658 <__assert_fail@plt+0x5eb4>
   17588:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1758c:	b	175b4 <__assert_fail@plt+0x5e10>
   17590:	ldr	ip, [fp, #-84]	; 0xffffffac
   17594:	mov	r2, #1
   17598:	mov	lr, r4
   1759c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   175a0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   175a4:	b	175b8 <__assert_fail@plt+0x5e14>
   175a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   175ac:	mov	r7, #2
   175b0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   175b4:	ldr	r2, [sp, #84]	; 0x54
   175b8:	mov	r0, #0
   175bc:	ldr	r1, [fp, #12]
   175c0:	tst	r2, #1
   175c4:	mov	r2, r7
   175c8:	mov	r3, lr
   175cc:	str	r0, [sp, #8]
   175d0:	ldr	r0, [sp, #64]	; 0x40
   175d4:	movwne	r2, #4
   175d8:	cmp	r7, #2
   175dc:	movne	r2, r7
   175e0:	str	r2, [sp]
   175e4:	mov	r2, ip
   175e8:	bic	r1, r1, #2
   175ec:	str	r0, [sp, #12]
   175f0:	ldr	r0, [sp, #72]	; 0x48
   175f4:	str	r1, [sp, #4]
   175f8:	mov	r1, r6
   175fc:	str	r0, [sp, #16]
   17600:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17604:	bl	16644 <__assert_fail@plt+0x4ea0>
   17608:	mov	r8, r0
   1760c:	mov	r0, r8
   17610:	sub	sp, fp, #28
   17614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17618:	mov	r7, #2
   1761c:	b	175b4 <__assert_fail@plt+0x5e10>
   17620:	mov	r0, #5
   17624:	ldr	r2, [fp, #-84]	; 0xffffffac
   17628:	ldr	r3, [sp, #80]	; 0x50
   1762c:	str	r0, [sp]
   17630:	ldr	r0, [fp, #12]
   17634:	str	r0, [sp, #4]
   17638:	ldr	r0, [fp, #16]
   1763c:	str	r0, [sp, #8]
   17640:	ldr	r0, [sp, #64]	; 0x40
   17644:	str	r0, [sp, #12]
   17648:	ldr	r0, [sp, #72]	; 0x48
   1764c:	b	175fc <__assert_fail@plt+0x5e58>
   17650:	mov	r0, #0
   17654:	str	r0, [fp, #-72]	; 0xffffffb8
   17658:	ldr	r1, [sp, #92]	; 0x5c
   1765c:	cmp	r1, #0
   17660:	beq	176a0 <__assert_fail@plt+0x5efc>
   17664:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17668:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1766c:	tst	r0, #1
   17670:	bne	176a4 <__assert_fail@plt+0x5f00>
   17674:	ldrb	r0, [r1]
   17678:	cmp	r0, #0
   1767c:	beq	176a4 <__assert_fail@plt+0x5f00>
   17680:	add	r1, r1, #1
   17684:	cmp	r8, r6
   17688:	strbcc	r0, [r2, r8]
   1768c:	add	r8, r8, #1
   17690:	ldrb	r0, [r1], #1
   17694:	cmp	r0, #0
   17698:	bne	17684 <__assert_fail@plt+0x5ee0>
   1769c:	b	176a4 <__assert_fail@plt+0x5f00>
   176a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   176a4:	cmp	r8, r6
   176a8:	movcc	r0, #0
   176ac:	strbcc	r0, [r2, r8]
   176b0:	b	1760c <__assert_fail@plt+0x5e68>
   176b4:	mov	r2, #1
   176b8:	b	1759c <__assert_fail@plt+0x5df8>
   176bc:	mov	r7, #5
   176c0:	b	175b0 <__assert_fail@plt+0x5e0c>
   176c4:	bl	11774 <abort@plt>
   176c8:	mov	r3, r2
   176cc:	mov	r2, #0
   176d0:	b	176d4 <__assert_fail@plt+0x5f30>
   176d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176d8:	add	fp, sp, #28
   176dc:	sub	sp, sp, #36	; 0x24
   176e0:	movw	r8, #49840	; 0xc2b0
   176e4:	cmp	r3, #0
   176e8:	mov	r4, r2
   176ec:	str	r2, [sp, #24]
   176f0:	mov	r5, r1
   176f4:	mov	r6, r0
   176f8:	str	r0, [sp, #20]
   176fc:	movt	r8, #2
   17700:	movne	r8, r3
   17704:	bl	11630 <__errno_location@plt>
   17708:	str	r0, [sp, #28]
   1770c:	cmp	r4, #0
   17710:	add	sl, r8, #8
   17714:	ldm	r8, {r3, r9}
   17718:	ldr	r7, [r0]
   1771c:	ldr	r1, [r8, #40]	; 0x28
   17720:	ldr	r2, [r8, #44]	; 0x2c
   17724:	mov	r0, #0
   17728:	orreq	r9, r9, #1
   1772c:	str	r7, [sp, #32]
   17730:	mov	r7, r5
   17734:	stm	sp, {r3, r9, sl}
   17738:	str	r1, [sp, #12]
   1773c:	str	r2, [sp, #16]
   17740:	mov	r1, #0
   17744:	mov	r2, r6
   17748:	mov	r3, r5
   1774c:	bl	16644 <__assert_fail@plt+0x4ea0>
   17750:	add	r4, r0, #1
   17754:	mov	r5, r0
   17758:	mov	r0, r4
   1775c:	bl	1855c <__assert_fail@plt+0x6db8>
   17760:	mov	r6, r0
   17764:	ldr	r0, [r8]
   17768:	ldr	r2, [r8, #44]	; 0x2c
   1776c:	ldr	r1, [r8, #40]	; 0x28
   17770:	mov	r3, r7
   17774:	stm	sp, {r0, r9, sl}
   17778:	str	r2, [sp, #16]
   1777c:	str	r1, [sp, #12]
   17780:	mov	r0, r6
   17784:	mov	r1, r4
   17788:	ldr	r2, [sp, #20]
   1778c:	bl	16644 <__assert_fail@plt+0x4ea0>
   17790:	ldr	r0, [sp, #24]
   17794:	ldr	r1, [sp, #32]
   17798:	ldr	r2, [sp, #28]
   1779c:	cmp	r0, #0
   177a0:	str	r1, [r2]
   177a4:	strne	r5, [r0]
   177a8:	mov	r0, r6
   177ac:	sub	sp, fp, #28
   177b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   177b8:	add	fp, sp, #24
   177bc:	movw	r5, #49524	; 0xc174
   177c0:	movw	r8, #49520	; 0xc170
   177c4:	movt	r5, #2
   177c8:	movt	r8, #2
   177cc:	ldr	r0, [r5]
   177d0:	ldr	r4, [r8]
   177d4:	cmp	r0, #2
   177d8:	blt	17804 <__assert_fail@plt+0x6060>
   177dc:	add	r7, r4, #12
   177e0:	mov	r6, #0
   177e4:	ldr	r0, [r7, r6, lsl #3]
   177e8:	bl	190ec <__assert_fail@plt+0x7948>
   177ec:	ldr	r1, [r5]
   177f0:	add	r2, r6, #2
   177f4:	add	r0, r6, #1
   177f8:	mov	r6, r0
   177fc:	cmp	r2, r1
   17800:	blt	177e4 <__assert_fail@plt+0x6040>
   17804:	ldr	r0, [r4, #4]
   17808:	movw	r7, #49888	; 0xc2e0
   1780c:	movt	r7, #2
   17810:	cmp	r0, r7
   17814:	beq	1782c <__assert_fail@plt+0x6088>
   17818:	bl	190ec <__assert_fail@plt+0x7948>
   1781c:	movw	r0, #49528	; 0xc178
   17820:	mov	r6, #256	; 0x100
   17824:	movt	r0, #2
   17828:	strd	r6, [r0]
   1782c:	movw	r6, #49528	; 0xc178
   17830:	movt	r6, #2
   17834:	cmp	r4, r6
   17838:	beq	17848 <__assert_fail@plt+0x60a4>
   1783c:	mov	r0, r4
   17840:	bl	190ec <__assert_fail@plt+0x7948>
   17844:	str	r6, [r8]
   17848:	mov	r0, #1
   1784c:	str	r0, [r5]
   17850:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17854:	movw	r3, #49840	; 0xc2b0
   17858:	mvn	r2, #0
   1785c:	movt	r3, #2
   17860:	b	17864 <__assert_fail@plt+0x60c0>
   17864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17868:	add	fp, sp, #28
   1786c:	sub	sp, sp, #44	; 0x2c
   17870:	mov	r7, r3
   17874:	str	r2, [sp, #36]	; 0x24
   17878:	str	r1, [sp, #32]
   1787c:	mov	r5, r0
   17880:	bl	11630 <__errno_location@plt>
   17884:	cmp	r5, #0
   17888:	blt	179f4 <__assert_fail@plt+0x6250>
   1788c:	cmn	r5, #-2147483647	; 0x80000001
   17890:	beq	179f4 <__assert_fail@plt+0x6250>
   17894:	movw	r8, #49524	; 0xc174
   17898:	movw	r4, #49520	; 0xc170
   1789c:	str	r0, [sp, #28]
   178a0:	ldr	r0, [r0]
   178a4:	movt	r8, #2
   178a8:	movt	r4, #2
   178ac:	ldr	r1, [r8]
   178b0:	ldr	r6, [r4]
   178b4:	str	r0, [sp, #24]
   178b8:	cmp	r1, r5
   178bc:	ble	178c8 <__assert_fail@plt+0x6124>
   178c0:	mov	sl, r6
   178c4:	b	17930 <__assert_fail@plt+0x618c>
   178c8:	movw	r9, #49528	; 0xc178
   178cc:	mov	r0, #8
   178d0:	add	r2, r5, #1
   178d4:	str	r1, [fp, #-32]	; 0xffffffe0
   178d8:	mvn	r3, #-2147483648	; 0x80000000
   178dc:	movt	r9, #2
   178e0:	str	r0, [sp]
   178e4:	sub	r2, r2, r1
   178e8:	sub	r1, fp, #32
   178ec:	subs	r0, r6, r9
   178f0:	movne	r0, r6
   178f4:	bl	1868c <__assert_fail@plt+0x6ee8>
   178f8:	cmp	r6, r9
   178fc:	mov	sl, r0
   17900:	str	r0, [r4]
   17904:	ldrdeq	r0, [r9]
   17908:	stmeq	sl, {r0, r1}
   1790c:	ldr	r1, [r8]
   17910:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17914:	add	r0, sl, r1, lsl #3
   17918:	sub	r1, r2, r1
   1791c:	lsl	r2, r1, #3
   17920:	mov	r1, #0
   17924:	bl	11654 <memset@plt>
   17928:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1792c:	str	r0, [r8]
   17930:	mov	r9, sl
   17934:	ldr	r6, [r9, r5, lsl #3]!
   17938:	ldr	r4, [r9, #4]!
   1793c:	ldm	r7, {r0, r1}
   17940:	ldr	r2, [r7, #40]	; 0x28
   17944:	ldr	r3, [r7, #44]	; 0x2c
   17948:	orr	r8, r1, #1
   1794c:	add	r1, r7, #8
   17950:	stm	sp, {r0, r8}
   17954:	add	r0, sp, #8
   17958:	str	r1, [sp, #20]
   1795c:	stm	r0, {r1, r2, r3}
   17960:	mov	r0, r4
   17964:	mov	r1, r6
   17968:	ldr	r2, [sp, #32]
   1796c:	ldr	r3, [sp, #36]	; 0x24
   17970:	bl	16644 <__assert_fail@plt+0x4ea0>
   17974:	cmp	r6, r0
   17978:	bhi	179dc <__assert_fail@plt+0x6238>
   1797c:	add	r6, r0, #1
   17980:	movw	r0, #49888	; 0xc2e0
   17984:	movt	r0, #2
   17988:	str	r6, [sl, r5, lsl #3]
   1798c:	cmp	r4, r0
   17990:	beq	1799c <__assert_fail@plt+0x61f8>
   17994:	mov	r0, r4
   17998:	bl	190ec <__assert_fail@plt+0x7948>
   1799c:	mov	r0, r6
   179a0:	bl	1855c <__assert_fail@plt+0x6db8>
   179a4:	str	r0, [r9]
   179a8:	mov	r4, r0
   179ac:	add	r3, sp, #8
   179b0:	ldr	r0, [r7]
   179b4:	ldr	r1, [r7, #40]	; 0x28
   179b8:	ldr	r2, [r7, #44]	; 0x2c
   179bc:	stm	sp, {r0, r8}
   179c0:	ldr	r0, [sp, #20]
   179c4:	stm	r3, {r0, r1, r2}
   179c8:	mov	r0, r4
   179cc:	mov	r1, r6
   179d0:	ldr	r2, [sp, #32]
   179d4:	ldr	r3, [sp, #36]	; 0x24
   179d8:	bl	16644 <__assert_fail@plt+0x4ea0>
   179dc:	ldr	r0, [sp, #28]
   179e0:	ldr	r1, [sp, #24]
   179e4:	str	r1, [r0]
   179e8:	mov	r0, r4
   179ec:	sub	sp, fp, #28
   179f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179f4:	bl	11774 <abort@plt>
   179f8:	movw	r3, #49840	; 0xc2b0
   179fc:	movt	r3, #2
   17a00:	b	17864 <__assert_fail@plt+0x60c0>
   17a04:	movw	r3, #49840	; 0xc2b0
   17a08:	mov	r1, r0
   17a0c:	mov	r0, #0
   17a10:	mvn	r2, #0
   17a14:	movt	r3, #2
   17a18:	b	17864 <__assert_fail@plt+0x60c0>
   17a1c:	movw	r3, #49840	; 0xc2b0
   17a20:	mov	r2, r1
   17a24:	mov	r1, r0
   17a28:	mov	r0, #0
   17a2c:	movt	r3, #2
   17a30:	b	17864 <__assert_fail@plt+0x60c0>
   17a34:	push	{fp, lr}
   17a38:	mov	fp, sp
   17a3c:	sub	sp, sp, #48	; 0x30
   17a40:	vmov.i32	q8, #0	; 0x00000000
   17a44:	mov	ip, #32
   17a48:	mov	r3, sp
   17a4c:	mov	lr, r2
   17a50:	cmp	r1, #10
   17a54:	add	r2, r3, #16
   17a58:	vst1.64	{d16-d17}, [r3], ip
   17a5c:	vst1.64	{d16-d17}, [r3]
   17a60:	vst1.64	{d16-d17}, [r2]
   17a64:	beq	17a84 <__assert_fail@plt+0x62e0>
   17a68:	str	r1, [sp]
   17a6c:	mov	r3, sp
   17a70:	mov	r1, lr
   17a74:	mvn	r2, #0
   17a78:	bl	17864 <__assert_fail@plt+0x60c0>
   17a7c:	mov	sp, fp
   17a80:	pop	{fp, pc}
   17a84:	bl	11774 <abort@plt>
   17a88:	push	{r4, sl, fp, lr}
   17a8c:	add	fp, sp, #8
   17a90:	sub	sp, sp, #48	; 0x30
   17a94:	mov	ip, r3
   17a98:	mov	r3, sp
   17a9c:	vmov.i32	q8, #0	; 0x00000000
   17aa0:	mov	lr, #32
   17aa4:	cmp	r1, #10
   17aa8:	add	r4, r3, #16
   17aac:	vst1.64	{d16-d17}, [r3], lr
   17ab0:	vst1.64	{d16-d17}, [r3]
   17ab4:	vst1.64	{d16-d17}, [r4]
   17ab8:	beq	17ad8 <__assert_fail@plt+0x6334>
   17abc:	str	r1, [sp]
   17ac0:	mov	r1, r2
   17ac4:	mov	r3, sp
   17ac8:	mov	r2, ip
   17acc:	bl	17864 <__assert_fail@plt+0x60c0>
   17ad0:	sub	sp, fp, #8
   17ad4:	pop	{r4, sl, fp, pc}
   17ad8:	bl	11774 <abort@plt>
   17adc:	mov	r2, r1
   17ae0:	mov	r1, r0
   17ae4:	mov	r0, #0
   17ae8:	b	17a34 <__assert_fail@plt+0x6290>
   17aec:	mov	r3, r2
   17af0:	mov	r2, r1
   17af4:	mov	r1, r0
   17af8:	mov	r0, #0
   17afc:	b	17a88 <__assert_fail@plt+0x62e4>
   17b00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17b04:	add	fp, sp, #24
   17b08:	sub	sp, sp, #48	; 0x30
   17b0c:	movw	r8, #49840	; 0xc2b0
   17b10:	mov	lr, r0
   17b14:	mov	r3, sp
   17b18:	mov	ip, r1
   17b1c:	movt	r8, #2
   17b20:	mov	r1, r3
   17b24:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   17b28:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   17b2c:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   17b30:	stm	r1, {r0, r4, r5, r6, r7, r9}
   17b34:	ubfx	r0, r2, #5, #3
   17b38:	and	r2, r2, #31
   17b3c:	mov	r4, #1
   17b40:	add	r0, r3, r0, lsl #2
   17b44:	ldr	r1, [r0, #8]
   17b48:	bic	r4, r4, r1, lsr r2
   17b4c:	eor	r1, r1, r4, lsl r2
   17b50:	mov	r2, ip
   17b54:	str	r1, [r0, #8]
   17b58:	mov	r0, #0
   17b5c:	mov	r1, lr
   17b60:	bl	17864 <__assert_fail@plt+0x60c0>
   17b64:	sub	sp, fp, #24
   17b68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b70:	add	fp, sp, #24
   17b74:	sub	sp, sp, #48	; 0x30
   17b78:	movw	lr, #49840	; 0xc2b0
   17b7c:	mov	ip, r0
   17b80:	mov	r3, sp
   17b84:	movt	lr, #2
   17b88:	mov	r2, r3
   17b8c:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   17b90:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   17b94:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   17b98:	stm	r2, {r0, r4, r5, r6, r7, r8}
   17b9c:	ubfx	r0, r1, #5, #3
   17ba0:	and	r1, r1, #31
   17ba4:	mov	r7, #1
   17ba8:	add	r0, r3, r0, lsl #2
   17bac:	ldr	r2, [r0, #8]
   17bb0:	bic	r7, r7, r2, lsr r1
   17bb4:	eor	r1, r2, r7, lsl r1
   17bb8:	mvn	r2, #0
   17bbc:	str	r1, [r0, #8]
   17bc0:	mov	r0, #0
   17bc4:	mov	r1, ip
   17bc8:	bl	17864 <__assert_fail@plt+0x60c0>
   17bcc:	sub	sp, fp, #24
   17bd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17bd4:	push	{r4, r5, r6, r7, fp, lr}
   17bd8:	add	fp, sp, #16
   17bdc:	sub	sp, sp, #48	; 0x30
   17be0:	movw	lr, #49840	; 0xc2b0
   17be4:	mov	ip, r0
   17be8:	mov	r3, sp
   17bec:	movt	lr, #2
   17bf0:	mov	r2, r3
   17bf4:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   17bf8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17bfc:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17c00:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17c04:	mov	r1, ip
   17c08:	mvn	r2, #0
   17c0c:	ldr	r0, [sp, #12]
   17c10:	orr	r0, r0, #67108864	; 0x4000000
   17c14:	str	r0, [sp, #12]
   17c18:	mov	r0, #0
   17c1c:	bl	17864 <__assert_fail@plt+0x60c0>
   17c20:	sub	sp, fp, #16
   17c24:	pop	{r4, r5, r6, r7, fp, pc}
   17c28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c2c:	add	fp, sp, #24
   17c30:	sub	sp, sp, #48	; 0x30
   17c34:	movw	r8, #49840	; 0xc2b0
   17c38:	mov	ip, r1
   17c3c:	mov	lr, r0
   17c40:	mov	r3, sp
   17c44:	movt	r8, #2
   17c48:	mov	r2, r3
   17c4c:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   17c50:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17c54:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   17c58:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17c5c:	mov	r1, lr
   17c60:	mov	r2, ip
   17c64:	ldr	r0, [sp, #12]
   17c68:	orr	r0, r0, #67108864	; 0x4000000
   17c6c:	str	r0, [sp, #12]
   17c70:	mov	r0, #0
   17c74:	bl	17864 <__assert_fail@plt+0x60c0>
   17c78:	sub	sp, fp, #24
   17c7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c84:	add	fp, sp, #24
   17c88:	sub	sp, sp, #96	; 0x60
   17c8c:	mov	lr, sp
   17c90:	vmov.i32	q8, #0	; 0x00000000
   17c94:	mov	ip, r2
   17c98:	cmp	r1, #10
   17c9c:	add	r3, lr, #16
   17ca0:	mov	r2, lr
   17ca4:	vst1.64	{d16-d17}, [r3]
   17ca8:	mov	r3, #28
   17cac:	vst1.64	{d16-d17}, [r2], r3
   17cb0:	vst1.32	{d16-d17}, [r2]
   17cb4:	beq	17cf4 <__assert_fail@plt+0x6550>
   17cb8:	str	r1, [sp, #48]	; 0x30
   17cbc:	add	r3, sp, #48	; 0x30
   17cc0:	ldm	lr!, {r2, r4, r5, r6, r7}
   17cc4:	add	r1, r3, #4
   17cc8:	stmia	r1!, {r2, r4, r5, r6, r7}
   17ccc:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   17cd0:	stm	r1, {r2, r4, r5, r6, r7, r8}
   17cd4:	mvn	r2, #0
   17cd8:	ldr	r1, [sp, #60]	; 0x3c
   17cdc:	orr	r1, r1, #67108864	; 0x4000000
   17ce0:	str	r1, [sp, #60]	; 0x3c
   17ce4:	mov	r1, ip
   17ce8:	bl	17864 <__assert_fail@plt+0x60c0>
   17cec:	sub	sp, fp, #24
   17cf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17cf4:	bl	11774 <abort@plt>
   17cf8:	push	{fp, lr}
   17cfc:	mov	fp, sp
   17d00:	sub	sp, sp, #8
   17d04:	mvn	ip, #0
   17d08:	str	ip, [sp]
   17d0c:	bl	17d18 <__assert_fail@plt+0x6574>
   17d10:	mov	sp, fp
   17d14:	pop	{fp, pc}
   17d18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17d1c:	add	fp, sp, #24
   17d20:	sub	sp, sp, #48	; 0x30
   17d24:	movw	ip, #49840	; 0xc2b0
   17d28:	mov	lr, r3
   17d2c:	mov	r3, sp
   17d30:	cmp	r1, #0
   17d34:	movt	ip, #2
   17d38:	cmpne	r2, #0
   17d3c:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   17d40:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   17d44:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   17d48:	stm	r3, {r4, r5, r6, r7, r8, r9}
   17d4c:	mov	r3, #10
   17d50:	str	r3, [sp]
   17d54:	bne	17d5c <__assert_fail@plt+0x65b8>
   17d58:	bl	11774 <abort@plt>
   17d5c:	ldr	ip, [fp, #8]
   17d60:	str	r2, [sp, #44]	; 0x2c
   17d64:	str	r1, [sp, #40]	; 0x28
   17d68:	mov	r3, sp
   17d6c:	mov	r1, lr
   17d70:	mov	r2, ip
   17d74:	bl	17864 <__assert_fail@plt+0x60c0>
   17d78:	sub	sp, fp, #24
   17d7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17d80:	push	{fp, lr}
   17d84:	mov	fp, sp
   17d88:	sub	sp, sp, #8
   17d8c:	mov	r3, r2
   17d90:	mov	r2, r1
   17d94:	mov	r1, r0
   17d98:	mvn	r0, #0
   17d9c:	str	r0, [sp]
   17da0:	mov	r0, #0
   17da4:	bl	17d18 <__assert_fail@plt+0x6574>
   17da8:	mov	sp, fp
   17dac:	pop	{fp, pc}
   17db0:	push	{fp, lr}
   17db4:	mov	fp, sp
   17db8:	sub	sp, sp, #8
   17dbc:	mov	ip, r2
   17dc0:	mov	r2, r1
   17dc4:	mov	r1, r0
   17dc8:	str	r3, [sp]
   17dcc:	mov	r0, #0
   17dd0:	mov	r3, ip
   17dd4:	bl	17d18 <__assert_fail@plt+0x6574>
   17dd8:	mov	sp, fp
   17ddc:	pop	{fp, pc}
   17de0:	movw	r3, #49536	; 0xc180
   17de4:	movt	r3, #2
   17de8:	b	17864 <__assert_fail@plt+0x60c0>
   17dec:	movw	r3, #49536	; 0xc180
   17df0:	mov	r2, r1
   17df4:	mov	r1, r0
   17df8:	mov	r0, #0
   17dfc:	movt	r3, #2
   17e00:	b	17864 <__assert_fail@plt+0x60c0>
   17e04:	movw	r3, #49536	; 0xc180
   17e08:	mvn	r2, #0
   17e0c:	movt	r3, #2
   17e10:	b	17864 <__assert_fail@plt+0x60c0>
   17e14:	movw	r3, #49536	; 0xc180
   17e18:	mov	r1, r0
   17e1c:	mov	r0, #0
   17e20:	mvn	r2, #0
   17e24:	movt	r3, #2
   17e28:	b	17864 <__assert_fail@plt+0x60c0>
   17e2c:	push	{r4, r5, fp, lr}
   17e30:	add	fp, sp, #8
   17e34:	mov	r5, r0
   17e38:	mov	r4, r1
   17e3c:	mov	r0, #0
   17e40:	mov	r2, #5
   17e44:	mov	r1, r5
   17e48:	bl	114a4 <dcgettext@plt>
   17e4c:	cmp	r0, r5
   17e50:	popne	{r4, r5, fp, pc}
   17e54:	bl	193b8 <__assert_fail@plt+0x7c14>
   17e58:	ldrb	r1, [r0]
   17e5c:	and	r1, r1, #223	; 0xdf
   17e60:	cmp	r1, #71	; 0x47
   17e64:	beq	17ecc <__assert_fail@plt+0x6728>
   17e68:	cmp	r1, #85	; 0x55
   17e6c:	bne	17ef0 <__assert_fail@plt+0x674c>
   17e70:	ldrb	r1, [r0, #1]
   17e74:	and	r1, r1, #223	; 0xdf
   17e78:	cmp	r1, #84	; 0x54
   17e7c:	bne	17ef0 <__assert_fail@plt+0x674c>
   17e80:	ldrb	r1, [r0, #2]
   17e84:	and	r1, r1, #223	; 0xdf
   17e88:	cmp	r1, #70	; 0x46
   17e8c:	ldrbeq	r1, [r0, #3]
   17e90:	cmpeq	r1, #45	; 0x2d
   17e94:	bne	17ef0 <__assert_fail@plt+0x674c>
   17e98:	ldrb	r1, [r0, #4]
   17e9c:	cmp	r1, #56	; 0x38
   17ea0:	ldrbeq	r0, [r0, #5]
   17ea4:	cmpeq	r0, #0
   17ea8:	bne	17ef0 <__assert_fail@plt+0x674c>
   17eac:	ldrb	r1, [r5]
   17eb0:	movw	r2, #46973	; 0xb77d
   17eb4:	movw	r0, #46977	; 0xb781
   17eb8:	movt	r2, #1
   17ebc:	movt	r0, #1
   17ec0:	cmp	r1, #96	; 0x60
   17ec4:	moveq	r0, r2
   17ec8:	pop	{r4, r5, fp, pc}
   17ecc:	ldrb	r1, [r0, #1]
   17ed0:	and	r1, r1, #223	; 0xdf
   17ed4:	cmp	r1, #66	; 0x42
   17ed8:	bne	17ef0 <__assert_fail@plt+0x674c>
   17edc:	ldrb	r1, [r0, #2]
   17ee0:	cmp	r1, #49	; 0x31
   17ee4:	ldrbeq	r1, [r0, #3]
   17ee8:	cmpeq	r1, #56	; 0x38
   17eec:	beq	17f0c <__assert_fail@plt+0x6768>
   17ef0:	movw	r1, #46969	; 0xb779
   17ef4:	movw	r0, #46805	; 0xb6d5
   17ef8:	cmp	r4, #9
   17efc:	movt	r1, #1
   17f00:	movt	r0, #1
   17f04:	moveq	r0, r1
   17f08:	pop	{r4, r5, fp, pc}
   17f0c:	ldrb	r1, [r0, #4]
   17f10:	cmp	r1, #48	; 0x30
   17f14:	ldrbeq	r1, [r0, #5]
   17f18:	cmpeq	r1, #51	; 0x33
   17f1c:	bne	17ef0 <__assert_fail@plt+0x674c>
   17f20:	ldrb	r1, [r0, #6]
   17f24:	cmp	r1, #48	; 0x30
   17f28:	ldrbeq	r0, [r0, #7]
   17f2c:	cmpeq	r0, #0
   17f30:	bne	17ef0 <__assert_fail@plt+0x674c>
   17f34:	ldrb	r1, [r5]
   17f38:	movw	r2, #46981	; 0xb785
   17f3c:	movw	r0, #46985	; 0xb789
   17f40:	movt	r2, #1
   17f44:	movt	r0, #1
   17f48:	b	17ec0 <__assert_fail@plt+0x671c>
   17f4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17f50:	add	fp, sp, #24
   17f54:	movw	r8, #0
   17f58:	mov	r6, r2
   17f5c:	mov	r4, r1
   17f60:	mov	r5, r0
   17f64:	movt	r8, #32752	; 0x7ff0
   17f68:	mov	r0, r5
   17f6c:	mov	r1, r4
   17f70:	mov	r2, r6
   17f74:	bl	11420 <read@plt>
   17f78:	mov	r7, r0
   17f7c:	cmn	r0, #1
   17f80:	bgt	17fa8 <__assert_fail@plt+0x6804>
   17f84:	bl	11630 <__errno_location@plt>
   17f88:	ldr	r0, [r0]
   17f8c:	cmp	r0, #4
   17f90:	beq	17f68 <__assert_fail@plt+0x67c4>
   17f94:	cmp	r6, r8
   17f98:	bls	17fa8 <__assert_fail@plt+0x6804>
   17f9c:	cmp	r0, #22
   17fa0:	mov	r6, r8
   17fa4:	beq	17f68 <__assert_fail@plt+0x67c4>
   17fa8:	mov	r0, r7
   17fac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17fb0:	push	{r4, r5, fp, lr}
   17fb4:	add	fp, sp, #8
   17fb8:	mov	r4, r1
   17fbc:	mov	r1, #0
   17fc0:	mov	r5, r0
   17fc4:	mov	r2, r4
   17fc8:	bl	11684 <memchr@plt>
   17fcc:	rsb	r1, r5, #1
   17fd0:	cmp	r0, #0
   17fd4:	addne	r4, r1, r0
   17fd8:	mov	r0, r4
   17fdc:	pop	{r4, r5, fp, pc}
   17fe0:	push	{r4, r5, r6, r7, fp, lr}
   17fe4:	add	fp, sp, #16
   17fe8:	mov	r4, r0
   17fec:	cmp	r0, #2
   17ff0:	movhi	r0, r4
   17ff4:	pophi	{r4, r5, r6, r7, fp, pc}
   17ff8:	mov	r0, r4
   17ffc:	bl	19678 <__assert_fail@plt+0x7ed4>
   18000:	mov	r5, r0
   18004:	bl	11630 <__errno_location@plt>
   18008:	ldr	r7, [r0]
   1800c:	mov	r6, r0
   18010:	mov	r0, r4
   18014:	bl	1178c <close@plt>
   18018:	mov	r0, r5
   1801c:	str	r7, [r6]
   18020:	pop	{r4, r5, r6, r7, fp, pc}
   18024:	push	{r4, r5, r6, sl, fp, lr}
   18028:	add	fp, sp, #16
   1802c:	mov	r5, r0
   18030:	bl	116a8 <pipe@plt>
   18034:	mvn	r4, #0
   18038:	cmp	r0, #0
   1803c:	bne	18088 <__assert_fail@plt+0x68e4>
   18040:	mov	r6, #0
   18044:	ldr	r0, [r5, r6, lsl #2]
   18048:	bl	17fe0 <__assert_fail@plt+0x683c>
   1804c:	cmn	r0, #1
   18050:	str	r0, [r5, r6, lsl #2]
   18054:	ble	1806c <__assert_fail@plt+0x68c8>
   18058:	add	r6, r6, #1
   1805c:	cmp	r6, #2
   18060:	bcc	18044 <__assert_fail@plt+0x68a0>
   18064:	mov	r4, #0
   18068:	b	18088 <__assert_fail@plt+0x68e4>
   1806c:	sub	r6, r5, r6, lsl #2
   18070:	bl	11630 <__errno_location@plt>
   18074:	mov	r5, r0
   18078:	ldr	r0, [r6, #4]
   1807c:	ldr	r6, [r5]
   18080:	bl	1178c <close@plt>
   18084:	str	r6, [r5]
   18088:	mov	r0, r4
   1808c:	pop	{r4, r5, r6, sl, fp, pc}
   18090:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18094:	add	fp, sp, #24
   18098:	sub	sp, sp, #32
   1809c:	ldr	r7, [fp, #12]
   180a0:	ldr	r6, [fp, #8]
   180a4:	mov	r4, r2
   180a8:	mov	r5, r0
   180ac:	cmp	r1, #0
   180b0:	beq	180d0 <__assert_fail@plt+0x692c>
   180b4:	mov	r2, r1
   180b8:	movw	r1, #47072	; 0xb7e0
   180bc:	str	r3, [sp]
   180c0:	mov	r0, r5
   180c4:	mov	r3, r4
   180c8:	movt	r1, #1
   180cc:	b	180e0 <__assert_fail@plt+0x693c>
   180d0:	movw	r1, #47084	; 0xb7ec
   180d4:	mov	r0, r5
   180d8:	mov	r2, r4
   180dc:	movt	r1, #1
   180e0:	bl	11624 <fprintf@plt>
   180e4:	movw	r1, #47091	; 0xb7f3
   180e8:	mov	r0, #0
   180ec:	mov	r2, #5
   180f0:	movt	r1, #1
   180f4:	bl	114a4 <dcgettext@plt>
   180f8:	movw	r1, #47787	; 0xbaab
   180fc:	mov	r2, r0
   18100:	mov	r0, r5
   18104:	movw	r3, #2022	; 0x7e6
   18108:	movt	r1, #1
   1810c:	bl	11624 <fprintf@plt>
   18110:	movw	r4, #41982	; 0xa3fe
   18114:	mov	r1, r5
   18118:	movt	r4, #1
   1811c:	mov	r0, r4
   18120:	bl	1175c <fputs@plt>
   18124:	movw	r1, #47095	; 0xb7f7
   18128:	mov	r0, #0
   1812c:	mov	r2, #5
   18130:	movt	r1, #1
   18134:	bl	114a4 <dcgettext@plt>
   18138:	movw	r2, #47266	; 0xb8a2
   1813c:	mov	r1, r0
   18140:	mov	r0, r5
   18144:	movt	r2, #1
   18148:	bl	11624 <fprintf@plt>
   1814c:	mov	r0, r4
   18150:	mov	r1, r5
   18154:	bl	1175c <fputs@plt>
   18158:	cmp	r7, #9
   1815c:	bhi	181bc <__assert_fail@plt+0x6a18>
   18160:	add	r0, pc, #0
   18164:	ldr	pc, [r0, r7, lsl #2]
   18168:	andeq	r8, r1, ip, lsr #7
   1816c:	muleq	r1, r0, r1
   18170:	andeq	r8, r1, r8, asr #3
   18174:	strdeq	r8, [r1], -r4
   18178:	andeq	r8, r1, ip, lsl r2
   1817c:	andeq	r8, r1, r8, asr #4
   18180:	andeq	r8, r1, ip, ror r2
   18184:			; <UNDEFINED> instruction: 0x000182bc
   18188:	andeq	r8, r1, r8, asr r3
   1818c:	andeq	r8, r1, r0, lsl #6
   18190:	movw	r1, #47300	; 0xb8c4
   18194:	mov	r0, #0
   18198:	mov	r2, #5
   1819c:	movt	r1, #1
   181a0:	bl	114a4 <dcgettext@plt>
   181a4:	ldr	r2, [r6]
   181a8:	mov	r1, r0
   181ac:	mov	r0, r5
   181b0:	sub	sp, fp, #24
   181b4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   181b8:	b	11624 <fprintf@plt>
   181bc:	movw	r1, #47619	; 0xba03
   181c0:	movt	r1, #1
   181c4:	b	18308 <__assert_fail@plt+0x6b64>
   181c8:	movw	r1, #47316	; 0xb8d4
   181cc:	mov	r0, #0
   181d0:	mov	r2, #5
   181d4:	movt	r1, #1
   181d8:	bl	114a4 <dcgettext@plt>
   181dc:	ldm	r6, {r2, r3}
   181e0:	mov	r1, r0
   181e4:	mov	r0, r5
   181e8:	sub	sp, fp, #24
   181ec:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   181f0:	b	11624 <fprintf@plt>
   181f4:	movw	r1, #47339	; 0xb8eb
   181f8:	mov	r0, #0
   181fc:	mov	r2, #5
   18200:	movt	r1, #1
   18204:	bl	114a4 <dcgettext@plt>
   18208:	mov	r1, r0
   1820c:	ldm	r6, {r2, r3}
   18210:	ldr	r0, [r6, #8]
   18214:	str	r0, [sp]
   18218:	b	182b4 <__assert_fail@plt+0x6b10>
   1821c:	movw	r1, #47367	; 0xb907
   18220:	mov	r0, #0
   18224:	mov	r2, #5
   18228:	movt	r1, #1
   1822c:	bl	114a4 <dcgettext@plt>
   18230:	ldm	r6, {r2, r3}
   18234:	mov	r1, r0
   18238:	ldr	r0, [r6, #8]
   1823c:	ldr	r7, [r6, #12]
   18240:	stm	sp, {r0, r7}
   18244:	b	182b4 <__assert_fail@plt+0x6b10>
   18248:	movw	r1, #47399	; 0xb927
   1824c:	mov	r0, #0
   18250:	mov	r2, #5
   18254:	movt	r1, #1
   18258:	bl	114a4 <dcgettext@plt>
   1825c:	ldm	r6, {r2, r3}
   18260:	mov	r1, r0
   18264:	ldr	r0, [r6, #8]
   18268:	ldr	r7, [r6, #12]
   1826c:	ldr	r6, [r6, #16]
   18270:	stm	sp, {r0, r7}
   18274:	str	r6, [sp, #8]
   18278:	b	182b4 <__assert_fail@plt+0x6b10>
   1827c:	movw	r1, #47435	; 0xb94b
   18280:	mov	r0, #0
   18284:	mov	r2, #5
   18288:	movt	r1, #1
   1828c:	bl	114a4 <dcgettext@plt>
   18290:	ldm	r6, {r2, r3}
   18294:	mov	r1, r0
   18298:	ldr	r0, [r6, #8]
   1829c:	ldr	r7, [r6, #12]
   182a0:	ldr	r4, [r6, #16]
   182a4:	ldr	r6, [r6, #20]
   182a8:	stm	sp, {r0, r7}
   182ac:	str	r4, [sp, #8]
   182b0:	str	r6, [sp, #12]
   182b4:	mov	r0, r5
   182b8:	b	183a8 <__assert_fail@plt+0x6c04>
   182bc:	movw	r1, #47475	; 0xb973
   182c0:	mov	r0, #0
   182c4:	mov	r2, #5
   182c8:	movt	r1, #1
   182cc:	bl	114a4 <dcgettext@plt>
   182d0:	ldm	r6, {r2, r3}
   182d4:	mov	ip, r0
   182d8:	ldr	r0, [r6, #8]
   182dc:	ldr	r7, [r6, #12]
   182e0:	ldr	r4, [r6, #16]
   182e4:	ldr	r1, [r6, #20]
   182e8:	ldr	r6, [r6, #24]
   182ec:	stm	sp, {r0, r7}
   182f0:	str	r4, [sp, #8]
   182f4:	str	r1, [sp, #12]
   182f8:	str	r6, [sp, #16]
   182fc:	b	183a0 <__assert_fail@plt+0x6bfc>
   18300:	movw	r1, #47567	; 0xb9cf
   18304:	movt	r1, #1
   18308:	mov	r0, #0
   1830c:	mov	r2, #5
   18310:	bl	114a4 <dcgettext@plt>
   18314:	mov	ip, r0
   18318:	ldr	r2, [r6]
   1831c:	ldr	r3, [r6, #4]
   18320:	ldr	r0, [r6, #8]
   18324:	ldr	r7, [r6, #12]
   18328:	ldr	r4, [r6, #16]
   1832c:	ldr	r1, [r6, #20]
   18330:	ldr	lr, [r6, #24]
   18334:	ldr	r8, [r6, #28]
   18338:	ldr	r6, [r6, #32]
   1833c:	stm	sp, {r0, r7}
   18340:	str	r4, [sp, #8]
   18344:	str	r1, [sp, #12]
   18348:	str	lr, [sp, #16]
   1834c:	str	r8, [sp, #20]
   18350:	str	r6, [sp, #24]
   18354:	b	183a0 <__assert_fail@plt+0x6bfc>
   18358:	movw	r1, #47519	; 0xb99f
   1835c:	mov	r0, #0
   18360:	mov	r2, #5
   18364:	movt	r1, #1
   18368:	bl	114a4 <dcgettext@plt>
   1836c:	ldm	r6, {r2, r3}
   18370:	mov	ip, r0
   18374:	ldr	r0, [r6, #8]
   18378:	ldr	r7, [r6, #12]
   1837c:	ldr	r4, [r6, #16]
   18380:	ldr	r1, [r6, #20]
   18384:	ldr	lr, [r6, #24]
   18388:	ldr	r6, [r6, #28]
   1838c:	stm	sp, {r0, r7}
   18390:	str	r4, [sp, #8]
   18394:	str	r1, [sp, #12]
   18398:	str	lr, [sp, #16]
   1839c:	str	r6, [sp, #20]
   183a0:	mov	r0, r5
   183a4:	mov	r1, ip
   183a8:	bl	11624 <fprintf@plt>
   183ac:	sub	sp, fp, #24
   183b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   183b4:	push	{r4, sl, fp, lr}
   183b8:	add	fp, sp, #8
   183bc:	sub	sp, sp, #8
   183c0:	ldr	ip, [fp, #8]
   183c4:	mov	lr, #0
   183c8:	ldr	r4, [ip, lr, lsl #2]
   183cc:	add	lr, lr, #1
   183d0:	cmp	r4, #0
   183d4:	bne	183c8 <__assert_fail@plt+0x6c24>
   183d8:	sub	r4, lr, #1
   183dc:	str	ip, [sp]
   183e0:	str	r4, [sp, #4]
   183e4:	bl	18090 <__assert_fail@plt+0x68ec>
   183e8:	sub	sp, fp, #8
   183ec:	pop	{r4, sl, fp, pc}
   183f0:	push	{r4, r5, fp, lr}
   183f4:	add	fp, sp, #8
   183f8:	sub	sp, sp, #48	; 0x30
   183fc:	ldr	r4, [fp, #8]
   18400:	mov	ip, #0
   18404:	add	lr, sp, #8
   18408:	ldr	r5, [r4]
   1840c:	cmp	r5, #0
   18410:	str	r5, [lr, ip, lsl #2]
   18414:	beq	18428 <__assert_fail@plt+0x6c84>
   18418:	add	ip, ip, #1
   1841c:	add	r4, r4, #4
   18420:	cmp	ip, #10
   18424:	bcc	18408 <__assert_fail@plt+0x6c64>
   18428:	str	lr, [sp]
   1842c:	str	ip, [sp, #4]
   18430:	bl	18090 <__assert_fail@plt+0x68ec>
   18434:	sub	sp, fp, #8
   18438:	pop	{r4, r5, fp, pc}
   1843c:	push	{fp, lr}
   18440:	mov	fp, sp
   18444:	sub	sp, sp, #8
   18448:	add	ip, fp, #8
   1844c:	str	ip, [sp, #4]
   18450:	str	ip, [sp]
   18454:	bl	183f0 <__assert_fail@plt+0x6c4c>
   18458:	mov	sp, fp
   1845c:	pop	{fp, pc}
   18460:	push	{fp, lr}
   18464:	mov	fp, sp
   18468:	movw	r0, #49620	; 0xc1d4
   1846c:	movt	r0, #2
   18470:	ldr	r1, [r0]
   18474:	movw	r0, #41982	; 0xa3fe
   18478:	movt	r0, #1
   1847c:	bl	1175c <fputs@plt>
   18480:	movw	r1, #47679	; 0xba3f
   18484:	mov	r0, #0
   18488:	mov	r2, #5
   1848c:	movt	r1, #1
   18490:	bl	114a4 <dcgettext@plt>
   18494:	movw	r1, #46558	; 0xb5de
   18498:	movt	r1, #1
   1849c:	bl	11414 <printf@plt>
   184a0:	movw	r1, #47699	; 0xba53
   184a4:	mov	r0, #0
   184a8:	mov	r2, #5
   184ac:	movt	r1, #1
   184b0:	bl	114a4 <dcgettext@plt>
   184b4:	movw	r1, #46158	; 0xb44e
   184b8:	movw	r2, #46472	; 0xb588
   184bc:	movt	r1, #1
   184c0:	movt	r2, #1
   184c4:	bl	11414 <printf@plt>
   184c8:	movw	r1, #47719	; 0xba67
   184cc:	mov	r0, #0
   184d0:	mov	r2, #5
   184d4:	movt	r1, #1
   184d8:	bl	114a4 <dcgettext@plt>
   184dc:	movw	r1, #47758	; 0xba8e
   184e0:	movt	r1, #1
   184e4:	pop	{fp, lr}
   184e8:	b	11414 <printf@plt>
   184ec:	b	184f0 <__assert_fail@plt+0x6d4c>
   184f0:	push	{r4, r5, r6, sl, fp, lr}
   184f4:	add	fp, sp, #16
   184f8:	mov	r4, r2
   184fc:	mov	r5, r1
   18500:	mov	r6, r0
   18504:	bl	19298 <__assert_fail@plt+0x7af4>
   18508:	cmp	r0, #0
   1850c:	popne	{r4, r5, r6, sl, fp, pc}
   18510:	cmp	r6, #0
   18514:	beq	18528 <__assert_fail@plt+0x6d84>
   18518:	cmp	r5, #0
   1851c:	cmpne	r4, #0
   18520:	bne	18528 <__assert_fail@plt+0x6d84>
   18524:	pop	{r4, r5, r6, sl, fp, pc}
   18528:	bl	1897c <__assert_fail@plt+0x71d8>
   1852c:	push	{fp, lr}
   18530:	mov	fp, sp
   18534:	bl	191b8 <__assert_fail@plt+0x7a14>
   18538:	cmp	r0, #0
   1853c:	popne	{fp, pc}
   18540:	bl	1897c <__assert_fail@plt+0x71d8>
   18544:	push	{fp, lr}
   18548:	mov	fp, sp
   1854c:	bl	191b8 <__assert_fail@plt+0x7a14>
   18550:	cmp	r0, #0
   18554:	popne	{fp, pc}
   18558:	bl	1897c <__assert_fail@plt+0x71d8>
   1855c:	push	{fp, lr}
   18560:	mov	fp, sp
   18564:	bl	191b8 <__assert_fail@plt+0x7a14>
   18568:	cmp	r0, #0
   1856c:	popne	{fp, pc}
   18570:	bl	1897c <__assert_fail@plt+0x71d8>
   18574:	push	{r4, r5, fp, lr}
   18578:	add	fp, sp, #8
   1857c:	mov	r4, r1
   18580:	mov	r5, r0
   18584:	bl	19248 <__assert_fail@plt+0x7aa4>
   18588:	cmp	r0, #0
   1858c:	popne	{r4, r5, fp, pc}
   18590:	cmp	r5, #0
   18594:	beq	185a4 <__assert_fail@plt+0x6e00>
   18598:	cmp	r4, #0
   1859c:	bne	185a4 <__assert_fail@plt+0x6e00>
   185a0:	pop	{r4, r5, fp, pc}
   185a4:	bl	1897c <__assert_fail@plt+0x71d8>
   185a8:	push	{fp, lr}
   185ac:	mov	fp, sp
   185b0:	cmp	r1, #0
   185b4:	orreq	r1, r1, #1
   185b8:	bl	19248 <__assert_fail@plt+0x7aa4>
   185bc:	cmp	r0, #0
   185c0:	popne	{fp, pc}
   185c4:	bl	1897c <__assert_fail@plt+0x71d8>
   185c8:	push	{fp, lr}
   185cc:	mov	fp, sp
   185d0:	clz	r3, r2
   185d4:	lsr	ip, r3, #5
   185d8:	clz	r3, r1
   185dc:	lsr	r3, r3, #5
   185e0:	orrs	r3, r3, ip
   185e4:	movwne	r1, #1
   185e8:	movwne	r2, #1
   185ec:	bl	19298 <__assert_fail@plt+0x7af4>
   185f0:	cmp	r0, #0
   185f4:	popne	{fp, pc}
   185f8:	bl	1897c <__assert_fail@plt+0x71d8>
   185fc:	push	{fp, lr}
   18600:	mov	fp, sp
   18604:	mov	r2, r1
   18608:	mov	r1, r0
   1860c:	mov	r0, #0
   18610:	bl	19298 <__assert_fail@plt+0x7af4>
   18614:	cmp	r0, #0
   18618:	popne	{fp, pc}
   1861c:	bl	1897c <__assert_fail@plt+0x71d8>
   18620:	mov	r2, r1
   18624:	mov	r1, r0
   18628:	mov	r0, #0
   1862c:	b	185c8 <__assert_fail@plt+0x6e24>
   18630:	mov	r2, #1
   18634:	b	18638 <__assert_fail@plt+0x6e94>
   18638:	push	{r4, r5, fp, lr}
   1863c:	add	fp, sp, #8
   18640:	ldr	r5, [r1]
   18644:	mov	r4, r1
   18648:	cmp	r0, #0
   1864c:	beq	18664 <__assert_fail@plt+0x6ec0>
   18650:	mov	r1, #1
   18654:	add	r1, r1, r5, lsr #1
   18658:	adds	r5, r5, r1
   1865c:	bcc	1867c <__assert_fail@plt+0x6ed8>
   18660:	bl	1897c <__assert_fail@plt+0x71d8>
   18664:	cmp	r5, #0
   18668:	bne	1867c <__assert_fail@plt+0x6ed8>
   1866c:	mov	r1, #64	; 0x40
   18670:	cmp	r2, #64	; 0x40
   18674:	udiv	r5, r1, r2
   18678:	addhi	r5, r5, #1
   1867c:	mov	r1, r5
   18680:	bl	184f0 <__assert_fail@plt+0x6d4c>
   18684:	str	r5, [r4]
   18688:	pop	{r4, r5, fp, pc}
   1868c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18690:	add	fp, sp, #24
   18694:	ldr	r6, [r1]
   18698:	mov	r8, r1
   1869c:	ldr	r4, [fp, #8]
   186a0:	add	r1, r6, r6, asr #1
   186a4:	cmp	r1, r6
   186a8:	mvnvs	r1, #-2147483648	; 0x80000000
   186ac:	cmp	r1, r3
   186b0:	mov	r5, r1
   186b4:	movgt	r5, r3
   186b8:	cmn	r3, #1
   186bc:	movle	r5, r1
   186c0:	cmn	r4, #1
   186c4:	ble	186e4 <__assert_fail@plt+0x6f40>
   186c8:	cmp	r4, #0
   186cc:	beq	18738 <__assert_fail@plt+0x6f94>
   186d0:	cmn	r5, #1
   186d4:	ble	1870c <__assert_fail@plt+0x6f68>
   186d8:	mvn	r7, #-2147483648	; 0x80000000
   186dc:	udiv	r1, r7, r4
   186e0:	b	18700 <__assert_fail@plt+0x6f5c>
   186e4:	cmn	r5, #1
   186e8:	ble	18728 <__assert_fail@plt+0x6f84>
   186ec:	cmn	r4, #1
   186f0:	beq	18738 <__assert_fail@plt+0x6f94>
   186f4:	mov	r1, #-2147483648	; 0x80000000
   186f8:	mvn	r7, #-2147483648	; 0x80000000
   186fc:	sdiv	r1, r1, r4
   18700:	cmp	r1, r5
   18704:	bge	18738 <__assert_fail@plt+0x6f94>
   18708:	b	18748 <__assert_fail@plt+0x6fa4>
   1870c:	beq	18738 <__assert_fail@plt+0x6f94>
   18710:	mov	r1, #-2147483648	; 0x80000000
   18714:	mvn	r7, #-2147483648	; 0x80000000
   18718:	sdiv	r1, r1, r5
   1871c:	cmp	r1, r4
   18720:	bge	18738 <__assert_fail@plt+0x6f94>
   18724:	b	18748 <__assert_fail@plt+0x6fa4>
   18728:	mvn	r7, #-2147483648	; 0x80000000
   1872c:	sdiv	r1, r7, r4
   18730:	cmp	r5, r1
   18734:	blt	18748 <__assert_fail@plt+0x6fa4>
   18738:	mul	r1, r5, r4
   1873c:	mov	r7, #64	; 0x40
   18740:	cmp	r1, #63	; 0x3f
   18744:	bgt	18750 <__assert_fail@plt+0x6fac>
   18748:	sdiv	r5, r7, r4
   1874c:	mul	r1, r5, r4
   18750:	cmp	r0, #0
   18754:	moveq	r7, #0
   18758:	streq	r7, [r8]
   1875c:	sub	r7, r5, r6
   18760:	cmp	r7, r2
   18764:	bge	18808 <__assert_fail@plt+0x7064>
   18768:	add	r5, r6, r2
   1876c:	mov	r2, #0
   18770:	mov	r1, #0
   18774:	cmp	r5, r3
   18778:	movwgt	r2, #1
   1877c:	cmn	r3, #1
   18780:	movwgt	r1, #1
   18784:	cmp	r5, r6
   18788:	bvs	187f0 <__assert_fail@plt+0x704c>
   1878c:	ands	r1, r1, r2
   18790:	bne	187f0 <__assert_fail@plt+0x704c>
   18794:	cmn	r4, #1
   18798:	ble	187b8 <__assert_fail@plt+0x7014>
   1879c:	cmp	r4, #0
   187a0:	beq	18804 <__assert_fail@plt+0x7060>
   187a4:	cmn	r5, #1
   187a8:	ble	187dc <__assert_fail@plt+0x7038>
   187ac:	mvn	r1, #-2147483648	; 0x80000000
   187b0:	udiv	r1, r1, r4
   187b4:	b	187d0 <__assert_fail@plt+0x702c>
   187b8:	cmn	r5, #1
   187bc:	ble	187f4 <__assert_fail@plt+0x7050>
   187c0:	cmn	r4, #1
   187c4:	beq	18804 <__assert_fail@plt+0x7060>
   187c8:	mov	r1, #-2147483648	; 0x80000000
   187cc:	sdiv	r1, r1, r4
   187d0:	cmp	r1, r5
   187d4:	bge	18804 <__assert_fail@plt+0x7060>
   187d8:	b	187f0 <__assert_fail@plt+0x704c>
   187dc:	beq	18804 <__assert_fail@plt+0x7060>
   187e0:	mov	r1, #-2147483648	; 0x80000000
   187e4:	sdiv	r1, r1, r5
   187e8:	cmp	r1, r4
   187ec:	bge	18804 <__assert_fail@plt+0x7060>
   187f0:	bl	1897c <__assert_fail@plt+0x71d8>
   187f4:	mvn	r1, #-2147483648	; 0x80000000
   187f8:	sdiv	r1, r1, r4
   187fc:	cmp	r5, r1
   18800:	blt	187f0 <__assert_fail@plt+0x704c>
   18804:	mul	r1, r5, r4
   18808:	bl	18574 <__assert_fail@plt+0x6dd0>
   1880c:	str	r5, [r8]
   18810:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18814:	push	{fp, lr}
   18818:	mov	fp, sp
   1881c:	mov	r1, #1
   18820:	bl	18e28 <__assert_fail@plt+0x7684>
   18824:	cmp	r0, #0
   18828:	popne	{fp, pc}
   1882c:	bl	1897c <__assert_fail@plt+0x71d8>
   18830:	push	{fp, lr}
   18834:	mov	fp, sp
   18838:	bl	18e28 <__assert_fail@plt+0x7684>
   1883c:	cmp	r0, #0
   18840:	popne	{fp, pc}
   18844:	bl	1897c <__assert_fail@plt+0x71d8>
   18848:	push	{fp, lr}
   1884c:	mov	fp, sp
   18850:	mov	r1, #1
   18854:	bl	18e28 <__assert_fail@plt+0x7684>
   18858:	cmp	r0, #0
   1885c:	popne	{fp, pc}
   18860:	bl	1897c <__assert_fail@plt+0x71d8>
   18864:	push	{fp, lr}
   18868:	mov	fp, sp
   1886c:	bl	18e28 <__assert_fail@plt+0x7684>
   18870:	cmp	r0, #0
   18874:	popne	{fp, pc}
   18878:	bl	1897c <__assert_fail@plt+0x71d8>
   1887c:	push	{r4, r5, r6, sl, fp, lr}
   18880:	add	fp, sp, #16
   18884:	mov	r5, r0
   18888:	mov	r0, r1
   1888c:	mov	r4, r1
   18890:	bl	191b8 <__assert_fail@plt+0x7a14>
   18894:	cmp	r0, #0
   18898:	beq	188b4 <__assert_fail@plt+0x7110>
   1889c:	mov	r1, r5
   188a0:	mov	r2, r4
   188a4:	mov	r6, r0
   188a8:	bl	11468 <memcpy@plt>
   188ac:	mov	r0, r6
   188b0:	pop	{r4, r5, r6, sl, fp, pc}
   188b4:	bl	1897c <__assert_fail@plt+0x71d8>
   188b8:	push	{r4, r5, r6, sl, fp, lr}
   188bc:	add	fp, sp, #16
   188c0:	mov	r5, r0
   188c4:	mov	r0, r1
   188c8:	mov	r4, r1
   188cc:	bl	191b8 <__assert_fail@plt+0x7a14>
   188d0:	cmp	r0, #0
   188d4:	beq	188f0 <__assert_fail@plt+0x714c>
   188d8:	mov	r1, r5
   188dc:	mov	r2, r4
   188e0:	mov	r6, r0
   188e4:	bl	11468 <memcpy@plt>
   188e8:	mov	r0, r6
   188ec:	pop	{r4, r5, r6, sl, fp, pc}
   188f0:	bl	1897c <__assert_fail@plt+0x71d8>
   188f4:	push	{r4, r5, r6, sl, fp, lr}
   188f8:	add	fp, sp, #16
   188fc:	mov	r5, r0
   18900:	add	r0, r1, #1
   18904:	mov	r4, r1
   18908:	bl	191b8 <__assert_fail@plt+0x7a14>
   1890c:	cmp	r0, #0
   18910:	beq	18938 <__assert_fail@plt+0x7194>
   18914:	mov	r6, r0
   18918:	mov	r0, #0
   1891c:	mov	r1, r5
   18920:	mov	r2, r4
   18924:	strb	r0, [r6, r4]
   18928:	mov	r0, r6
   1892c:	bl	11468 <memcpy@plt>
   18930:	mov	r0, r6
   18934:	pop	{r4, r5, r6, sl, fp, pc}
   18938:	bl	1897c <__assert_fail@plt+0x71d8>
   1893c:	push	{r4, r5, r6, sl, fp, lr}
   18940:	add	fp, sp, #16
   18944:	mov	r4, r0
   18948:	bl	11600 <strlen@plt>
   1894c:	add	r5, r0, #1
   18950:	mov	r0, r5
   18954:	bl	191b8 <__assert_fail@plt+0x7a14>
   18958:	cmp	r0, #0
   1895c:	beq	18978 <__assert_fail@plt+0x71d4>
   18960:	mov	r1, r4
   18964:	mov	r2, r5
   18968:	mov	r6, r0
   1896c:	bl	11468 <memcpy@plt>
   18970:	mov	r0, r6
   18974:	pop	{r4, r5, r6, sl, fp, pc}
   18978:	bl	1897c <__assert_fail@plt+0x71d8>
   1897c:	push	{fp, lr}
   18980:	mov	fp, sp
   18984:	movw	r0, #49512	; 0xc168
   18988:	movw	r1, #47834	; 0xbada
   1898c:	mov	r2, #5
   18990:	movt	r0, #2
   18994:	movt	r1, #1
   18998:	ldr	r4, [r0]
   1899c:	mov	r0, #0
   189a0:	bl	114a4 <dcgettext@plt>
   189a4:	movw	r2, #46263	; 0xb4b7
   189a8:	mov	r3, r0
   189ac:	mov	r0, r4
   189b0:	mov	r1, #0
   189b4:	movt	r2, #1
   189b8:	bl	11564 <error@plt>
   189bc:	bl	11774 <abort@plt>
   189c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189c4:	add	fp, sp, #28
   189c8:	sub	sp, sp, #12
   189cc:	cmp	r2, #37	; 0x25
   189d0:	bcs	18e08 <__assert_fail@plt+0x7664>
   189d4:	ldr	r9, [fp, #8]
   189d8:	mov	r7, r2
   189dc:	mov	r6, r1
   189e0:	mov	r4, r0
   189e4:	str	r3, [sp, #4]
   189e8:	bl	11630 <__errno_location@plt>
   189ec:	mov	r5, r0
   189f0:	mov	r0, #0
   189f4:	str	r0, [r5]
   189f8:	bl	115d0 <__ctype_b_loc@plt>
   189fc:	ldr	r1, [r0]
   18a00:	mov	r2, r4
   18a04:	ldrb	r0, [r2], #1
   18a08:	add	r3, r1, r0, lsl #1
   18a0c:	ldrb	r3, [r3, #1]
   18a10:	tst	r3, #32
   18a14:	bne	18a04 <__assert_fail@plt+0x7260>
   18a18:	add	r8, sp, #8
   18a1c:	cmp	r6, #0
   18a20:	mov	sl, #4
   18a24:	movne	r8, r6
   18a28:	cmp	r0, #45	; 0x2d
   18a2c:	beq	18dfc <__assert_fail@plt+0x7658>
   18a30:	mov	r0, r4
   18a34:	mov	r1, r8
   18a38:	mov	r2, r7
   18a3c:	bl	115f4 <strtoul@plt>
   18a40:	ldr	r6, [r8]
   18a44:	cmp	r6, r4
   18a48:	beq	18a6c <__assert_fail@plt+0x72c8>
   18a4c:	mov	r7, r0
   18a50:	ldr	r0, [r5]
   18a54:	cmp	r0, #0
   18a58:	beq	18a98 <__assert_fail@plt+0x72f4>
   18a5c:	cmp	r0, #34	; 0x22
   18a60:	bne	18dfc <__assert_fail@plt+0x7658>
   18a64:	mov	sl, #1
   18a68:	b	18a9c <__assert_fail@plt+0x72f8>
   18a6c:	cmp	r9, #0
   18a70:	ldrbne	r1, [r4]
   18a74:	cmpne	r1, #0
   18a78:	beq	18dfc <__assert_fail@plt+0x7658>
   18a7c:	mov	r0, r9
   18a80:	bl	1160c <strchr@plt>
   18a84:	cmp	r0, #0
   18a88:	beq	18dfc <__assert_fail@plt+0x7658>
   18a8c:	mov	r7, #1
   18a90:	mov	sl, #0
   18a94:	b	18aa4 <__assert_fail@plt+0x7300>
   18a98:	mov	sl, r0
   18a9c:	cmp	r9, #0
   18aa0:	beq	18df4 <__assert_fail@plt+0x7650>
   18aa4:	ldrb	r4, [r6]
   18aa8:	cmp	r4, #0
   18aac:	beq	18df4 <__assert_fail@plt+0x7650>
   18ab0:	mov	r0, r9
   18ab4:	mov	r1, r4
   18ab8:	bl	1160c <strchr@plt>
   18abc:	cmp	r0, #0
   18ac0:	beq	18d7c <__assert_fail@plt+0x75d8>
   18ac4:	sub	r0, r4, #69	; 0x45
   18ac8:	mov	r3, #1
   18acc:	mov	r5, #1024	; 0x400
   18ad0:	cmp	r0, #21
   18ad4:	bhi	18aec <__assert_fail@plt+0x7348>
   18ad8:	movw	r2, #35141	; 0x8945
   18adc:	mov	r1, #1
   18ae0:	movt	r2, #48	; 0x30
   18ae4:	tst	r2, r1, lsl r0
   18ae8:	bne	18b08 <__assert_fail@plt+0x7364>
   18aec:	sub	r0, r4, #103	; 0x67
   18af0:	cmp	r0, #13
   18af4:	bhi	18b58 <__assert_fail@plt+0x73b4>
   18af8:	mov	r1, #1
   18afc:	movw	r2, #8273	; 0x2051
   18b00:	tst	r2, r1, lsl r0
   18b04:	beq	18b58 <__assert_fail@plt+0x73b4>
   18b08:	mov	r0, r9
   18b0c:	mov	r1, #48	; 0x30
   18b10:	bl	1160c <strchr@plt>
   18b14:	cmp	r0, #0
   18b18:	beq	18b54 <__assert_fail@plt+0x73b0>
   18b1c:	ldrb	r0, [r6, #1]
   18b20:	cmp	r0, #66	; 0x42
   18b24:	cmpne	r0, #68	; 0x44
   18b28:	bne	18b38 <__assert_fail@plt+0x7394>
   18b2c:	mov	r3, #2
   18b30:	mov	r5, #1000	; 0x3e8
   18b34:	b	18b58 <__assert_fail@plt+0x73b4>
   18b38:	cmp	r0, #105	; 0x69
   18b3c:	bne	18b54 <__assert_fail@plt+0x73b0>
   18b40:	ldrb	r0, [r6, #2]
   18b44:	mov	r3, #1
   18b48:	cmp	r0, #66	; 0x42
   18b4c:	movweq	r3, #3
   18b50:	b	18b58 <__assert_fail@plt+0x73b4>
   18b54:	mov	r3, #1
   18b58:	cmp	r4, #89	; 0x59
   18b5c:	bgt	18bcc <__assert_fail@plt+0x7428>
   18b60:	sub	r0, r4, #66	; 0x42
   18b64:	cmp	r0, #14
   18b68:	bhi	18c40 <__assert_fail@plt+0x749c>
   18b6c:	add	r1, pc, #0
   18b70:	ldr	pc, [r1, r0, lsl #2]
   18b74:			; <UNDEFINED> instruction: 0x00018bb0
   18b78:	andeq	r8, r1, ip, ror sp
   18b7c:	andeq	r8, r1, ip, ror sp
   18b80:	andeq	r8, r1, r8, lsl #27
   18b84:	andeq	r8, r1, ip, ror sp
   18b88:	andeq	r8, r1, r0, lsr #25
   18b8c:	andeq	r8, r1, ip, ror sp
   18b90:	andeq	r8, r1, ip, ror sp
   18b94:	andeq	r8, r1, ip, ror sp
   18b98:	andeq	r8, r1, ip, asr #25
   18b9c:	andeq	r8, r1, ip, ror sp
   18ba0:	strdeq	r8, [r1], -r0
   18ba4:	andeq	r8, r1, ip, ror sp
   18ba8:	andeq	r8, r1, ip, ror sp
   18bac:			; <UNDEFINED> instruction: 0x00018db4
   18bb0:	mov	r1, #0
   18bb4:	lsr	r0, r7, #22
   18bb8:	cmp	r1, r7, lsr #22
   18bbc:	lsl	r7, r7, #10
   18bc0:	movwne	r0, #1
   18bc4:	mvnne	r7, #0
   18bc8:	b	18ddc <__assert_fail@plt+0x7638>
   18bcc:	cmp	r4, #115	; 0x73
   18bd0:	bgt	18c7c <__assert_fail@plt+0x74d8>
   18bd4:	sub	r1, r4, #98	; 0x62
   18bd8:	cmp	r1, #11
   18bdc:	bhi	18d48 <__assert_fail@plt+0x75a4>
   18be0:	add	r2, pc, #4
   18be4:	mov	r0, #0
   18be8:	ldr	pc, [r2, r1, lsl #2]
   18bec:	andeq	r8, r1, ip, lsl ip
   18bf0:	ldrdeq	r8, [r1], -ip
   18bf4:	andeq	r8, r1, ip, ror sp
   18bf8:	andeq	r8, r1, ip, ror sp
   18bfc:	andeq	r8, r1, ip, ror sp
   18c00:	andeq	r8, r1, r0, lsr #25
   18c04:	andeq	r8, r1, ip, ror sp
   18c08:	andeq	r8, r1, ip, ror sp
   18c0c:	andeq	r8, r1, ip, ror sp
   18c10:	andeq	r8, r1, ip, asr #25
   18c14:	andeq	r8, r1, ip, ror sp
   18c18:	strdeq	r8, [r1], -r0
   18c1c:	movw	r0, #65535	; 0xffff
   18c20:	movt	r0, #63	; 0x3f
   18c24:	add	r1, r0, #4194304	; 0x400000
   18c28:	mov	r0, #0
   18c2c:	cmp	r7, r1
   18c30:	lsl	r7, r7, #9
   18c34:	movwhi	r0, #1
   18c38:	mvnhi	r7, #0
   18c3c:	b	18ddc <__assert_fail@plt+0x7638>
   18c40:	cmp	r4, #84	; 0x54
   18c44:	beq	18d1c <__assert_fail@plt+0x7578>
   18c48:	cmp	r4, #89	; 0x59
   18c4c:	bne	18d7c <__assert_fail@plt+0x75d8>
   18c50:	mvn	r0, #0
   18c54:	mvn	r2, #7
   18c58:	udiv	r1, r0, r5
   18c5c:	mov	r0, #0
   18c60:	cmp	r1, r7
   18c64:	mul	r7, r7, r5
   18c68:	orrcc	r0, r0, #1
   18c6c:	mvncc	r7, #0
   18c70:	adds	r2, r2, #1
   18c74:	bne	18c60 <__assert_fail@plt+0x74bc>
   18c78:	b	18ddc <__assert_fail@plt+0x7638>
   18c7c:	cmp	r4, #116	; 0x74
   18c80:	beq	18d1c <__assert_fail@plt+0x7578>
   18c84:	cmp	r4, #119	; 0x77
   18c88:	bne	18d7c <__assert_fail@plt+0x75d8>
   18c8c:	lsl	r1, r7, #1
   18c90:	cmp	r7, #0
   18c94:	lsr	r0, r7, #31
   18c98:	mvnlt	r1, #0
   18c9c:	b	18ce8 <__assert_fail@plt+0x7544>
   18ca0:	mvn	r0, #0
   18ca4:	mvn	r2, #2
   18ca8:	udiv	r1, r0, r5
   18cac:	mov	r0, #0
   18cb0:	cmp	r1, r7
   18cb4:	mul	r7, r7, r5
   18cb8:	orrcc	r0, r0, #1
   18cbc:	mvncc	r7, #0
   18cc0:	adds	r2, r2, #1
   18cc4:	bne	18cb0 <__assert_fail@plt+0x750c>
   18cc8:	b	18ddc <__assert_fail@plt+0x7638>
   18ccc:	mvn	r0, #0
   18cd0:	mul	r1, r7, r5
   18cd4:	udiv	r0, r0, r5
   18cd8:	cmp	r0, r7
   18cdc:	mov	r0, #0
   18ce0:	mvncc	r1, #0
   18ce4:	movwcc	r0, #1
   18ce8:	mov	r7, r1
   18cec:	b	18ddc <__assert_fail@plt+0x7638>
   18cf0:	mvn	r0, #0
   18cf4:	mvn	r2, #1
   18cf8:	udiv	r1, r0, r5
   18cfc:	mov	r0, #0
   18d00:	cmp	r1, r7
   18d04:	mul	r7, r7, r5
   18d08:	orrcc	r0, r0, #1
   18d0c:	mvncc	r7, #0
   18d10:	adds	r2, r2, #1
   18d14:	bne	18d00 <__assert_fail@plt+0x755c>
   18d18:	b	18ddc <__assert_fail@plt+0x7638>
   18d1c:	mvn	r0, #0
   18d20:	mvn	r2, #3
   18d24:	udiv	r1, r0, r5
   18d28:	mov	r0, #0
   18d2c:	cmp	r1, r7
   18d30:	mul	r7, r7, r5
   18d34:	orrcc	r0, r0, #1
   18d38:	mvncc	r7, #0
   18d3c:	adds	r2, r2, #1
   18d40:	bne	18d2c <__assert_fail@plt+0x7588>
   18d44:	b	18ddc <__assert_fail@plt+0x7638>
   18d48:	cmp	r4, #90	; 0x5a
   18d4c:	bne	18d7c <__assert_fail@plt+0x75d8>
   18d50:	mvn	r0, #0
   18d54:	mvn	r2, #6
   18d58:	udiv	r1, r0, r5
   18d5c:	mov	r0, #0
   18d60:	cmp	r1, r7
   18d64:	mul	r7, r7, r5
   18d68:	orrcc	r0, r0, #1
   18d6c:	mvncc	r7, #0
   18d70:	adds	r2, r2, #1
   18d74:	bne	18d60 <__assert_fail@plt+0x75bc>
   18d78:	b	18ddc <__assert_fail@plt+0x7638>
   18d7c:	ldr	r0, [sp, #4]
   18d80:	orr	sl, sl, #2
   18d84:	b	18df8 <__assert_fail@plt+0x7654>
   18d88:	mvn	r0, #0
   18d8c:	mvn	r2, #5
   18d90:	udiv	r1, r0, r5
   18d94:	mov	r0, #0
   18d98:	cmp	r1, r7
   18d9c:	mul	r7, r7, r5
   18da0:	orrcc	r0, r0, #1
   18da4:	mvncc	r7, #0
   18da8:	adds	r2, r2, #1
   18dac:	bne	18d98 <__assert_fail@plt+0x75f4>
   18db0:	b	18ddc <__assert_fail@plt+0x7638>
   18db4:	mvn	r0, #0
   18db8:	mvn	r2, #4
   18dbc:	udiv	r1, r0, r5
   18dc0:	mov	r0, #0
   18dc4:	cmp	r1, r7
   18dc8:	mul	r7, r7, r5
   18dcc:	orrcc	r0, r0, #1
   18dd0:	mvncc	r7, #0
   18dd4:	adds	r2, r2, #1
   18dd8:	bne	18dc4 <__assert_fail@plt+0x7620>
   18ddc:	add	r1, r6, r3
   18de0:	orr	sl, r0, sl
   18de4:	str	r1, [r8]
   18de8:	ldrb	r1, [r6, r3]
   18dec:	cmp	r1, #0
   18df0:	orrne	sl, sl, #2
   18df4:	ldr	r0, [sp, #4]
   18df8:	str	r7, [r0]
   18dfc:	mov	r0, sl
   18e00:	sub	sp, fp, #28
   18e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e08:	movw	r0, #47851	; 0xbaeb
   18e0c:	movw	r1, #47889	; 0xbb11
   18e10:	movw	r3, #47901	; 0xbb1d
   18e14:	mov	r2, #84	; 0x54
   18e18:	movt	r0, #1
   18e1c:	movt	r1, #1
   18e20:	movt	r3, #1
   18e24:	bl	117a4 <__assert_fail@plt>
   18e28:	clz	r2, r1
   18e2c:	clz	r3, r0
   18e30:	lsr	r2, r2, #5
   18e34:	lsr	r3, r3, #5
   18e38:	orrs	r2, r3, r2
   18e3c:	movwne	r1, #1
   18e40:	movwne	r0, #1
   18e44:	cmp	r1, #0
   18e48:	beq	18e78 <__assert_fail@plt+0x76d4>
   18e4c:	mvn	r2, #-2147483648	; 0x80000000
   18e50:	udiv	r2, r2, r1
   18e54:	cmp	r2, r0
   18e58:	bcs	18e78 <__assert_fail@plt+0x76d4>
   18e5c:	push	{fp, lr}
   18e60:	mov	fp, sp
   18e64:	bl	11630 <__errno_location@plt>
   18e68:	mov	r1, #12
   18e6c:	str	r1, [r0]
   18e70:	mov	r0, #0
   18e74:	pop	{fp, pc}
   18e78:	b	113f0 <calloc@plt>
   18e7c:	sub	sp, sp, #8
   18e80:	push	{r4, r5, r6, r7, fp, lr}
   18e84:	add	fp, sp, #16
   18e88:	sub	sp, sp, #8
   18e8c:	mov	r5, r0
   18e90:	add	r0, fp, #8
   18e94:	cmp	r1, #11
   18e98:	str	r3, [fp, #12]
   18e9c:	str	r2, [fp, #8]
   18ea0:	str	r0, [sp, #4]
   18ea4:	bhi	18ee0 <__assert_fail@plt+0x773c>
   18ea8:	mov	r0, #1
   18eac:	movw	r2, #1300	; 0x514
   18eb0:	tst	r2, r0, lsl r1
   18eb4:	bne	18f98 <__assert_fail@plt+0x77f4>
   18eb8:	movw	r2, #2570	; 0xa0a
   18ebc:	tst	r2, r0, lsl r1
   18ec0:	bne	18f08 <__assert_fail@plt+0x7764>
   18ec4:	cmp	r1, #0
   18ec8:	bne	18ee0 <__assert_fail@plt+0x773c>
   18ecc:	ldr	r0, [sp, #4]
   18ed0:	add	r1, r0, #4
   18ed4:	str	r1, [sp, #4]
   18ed8:	mov	r1, #0
   18edc:	b	18fa4 <__assert_fail@plt+0x7800>
   18ee0:	sub	r0, r1, #1024	; 0x400
   18ee4:	cmp	r0, #10
   18ee8:	bhi	18f98 <__assert_fail@plt+0x77f4>
   18eec:	mov	r2, #1
   18ef0:	movw	r3, #645	; 0x285
   18ef4:	tst	r3, r2, lsl r0
   18ef8:	bne	18f98 <__assert_fail@plt+0x77f4>
   18efc:	movw	r3, #1282	; 0x502
   18f00:	tst	r3, r2, lsl r0
   18f04:	beq	18f14 <__assert_fail@plt+0x7770>
   18f08:	mov	r0, r5
   18f0c:	bl	116c0 <fcntl64@plt>
   18f10:	b	18fb0 <__assert_fail@plt+0x780c>
   18f14:	cmp	r0, #6
   18f18:	bne	18f98 <__assert_fail@plt+0x77f4>
   18f1c:	ldr	r0, [sp, #4]
   18f20:	movw	r7, #50144	; 0xc3e0
   18f24:	movt	r7, #2
   18f28:	add	r1, r0, #4
   18f2c:	str	r1, [sp, #4]
   18f30:	ldr	r6, [r0]
   18f34:	ldr	r0, [r7]
   18f38:	cmp	r0, #0
   18f3c:	blt	18fd4 <__assert_fail@plt+0x7830>
   18f40:	mov	r0, r5
   18f44:	movw	r1, #1030	; 0x406
   18f48:	mov	r2, r6
   18f4c:	bl	116c0 <fcntl64@plt>
   18f50:	mov	r4, r0
   18f54:	cmn	r0, #1
   18f58:	bgt	18fc8 <__assert_fail@plt+0x7824>
   18f5c:	bl	11630 <__errno_location@plt>
   18f60:	ldr	r0, [r0]
   18f64:	cmp	r0, #22
   18f68:	bne	18fc8 <__assert_fail@plt+0x7824>
   18f6c:	mov	r0, r5
   18f70:	mov	r1, #0
   18f74:	mov	r2, r6
   18f78:	bl	116c0 <fcntl64@plt>
   18f7c:	mov	r4, r0
   18f80:	cmp	r0, #0
   18f84:	blt	18fb4 <__assert_fail@plt+0x7810>
   18f88:	mvn	r0, #0
   18f8c:	str	r0, [r7]
   18f90:	mov	r0, #1
   18f94:	b	18ff8 <__assert_fail@plt+0x7854>
   18f98:	ldr	r0, [sp, #4]
   18f9c:	add	r2, r0, #4
   18fa0:	str	r2, [sp, #4]
   18fa4:	ldr	r2, [r0]
   18fa8:	mov	r0, r5
   18fac:	bl	116c0 <fcntl64@plt>
   18fb0:	mov	r4, r0
   18fb4:	mov	r0, r4
   18fb8:	sub	sp, fp, #16
   18fbc:	pop	{r4, r5, r6, r7, fp, lr}
   18fc0:	add	sp, sp, #8
   18fc4:	bx	lr
   18fc8:	mov	r0, #1
   18fcc:	str	r0, [r7]
   18fd0:	b	18fb4 <__assert_fail@plt+0x7810>
   18fd4:	mov	r0, r5
   18fd8:	mov	r1, #0
   18fdc:	mov	r2, r6
   18fe0:	bl	116c0 <fcntl64@plt>
   18fe4:	mov	r4, r0
   18fe8:	ldr	r0, [r7]
   18fec:	add	r0, r0, #1
   18ff0:	clz	r0, r0
   18ff4:	lsr	r0, r0, #5
   18ff8:	cmp	r0, #0
   18ffc:	beq	18fb4 <__assert_fail@plt+0x7810>
   19000:	cmp	r4, #0
   19004:	blt	18fb4 <__assert_fail@plt+0x7810>
   19008:	mov	r0, r4
   1900c:	mov	r1, #1
   19010:	bl	116c0 <fcntl64@plt>
   19014:	cmp	r0, #0
   19018:	blt	19034 <__assert_fail@plt+0x7890>
   1901c:	orr	r2, r0, #1
   19020:	mov	r0, r4
   19024:	mov	r1, #2
   19028:	bl	116c0 <fcntl64@plt>
   1902c:	cmn	r0, #1
   19030:	bne	18fb4 <__assert_fail@plt+0x7810>
   19034:	bl	11630 <__errno_location@plt>
   19038:	ldr	r6, [r0]
   1903c:	mov	r5, r0
   19040:	mov	r0, r4
   19044:	bl	1178c <close@plt>
   19048:	str	r6, [r5]
   1904c:	mvn	r4, #0
   19050:	b	18fb4 <__assert_fail@plt+0x7810>
   19054:	push	{r4, sl, fp, lr}
   19058:	add	fp, sp, #8
   1905c:	sub	sp, sp, #8
   19060:	mov	r4, r0
   19064:	cmp	r0, #0
   19068:	beq	19084 <__assert_fail@plt+0x78e0>
   1906c:	mov	r0, r4
   19070:	bl	115ac <__freading@plt>
   19074:	cmp	r0, #0
   19078:	ldrbne	r0, [r4, #1]
   1907c:	tstne	r0, #1
   19080:	bne	19094 <__assert_fail@plt+0x78f0>
   19084:	mov	r0, r4
   19088:	sub	sp, fp, #8
   1908c:	pop	{r4, sl, fp, lr}
   19090:	b	1142c <fflush@plt>
   19094:	mov	r0, #1
   19098:	mov	r2, #0
   1909c:	mov	r3, #0
   190a0:	str	r0, [sp]
   190a4:	mov	r0, r4
   190a8:	bl	19114 <__assert_fail@plt+0x7970>
   190ac:	b	19084 <__assert_fail@plt+0x78e0>
   190b0:	ldrd	r2, [r0, #16]
   190b4:	mov	r1, #0
   190b8:	cmp	r3, r2
   190bc:	bhi	190e4 <__assert_fail@plt+0x7940>
   190c0:	ldmib	r0, {r1, r2}
   190c4:	ldrb	r3, [r0, #1]
   190c8:	sub	r1, r2, r1
   190cc:	mov	r2, #0
   190d0:	tst	r3, #1
   190d4:	ldrne	r2, [r0, #36]	; 0x24
   190d8:	ldrne	r0, [r0, #44]	; 0x2c
   190dc:	subne	r2, r0, r2
   190e0:	add	r1, r1, r2
   190e4:	mov	r0, r1
   190e8:	bx	lr
   190ec:	push	{r4, r5, r6, sl, fp, lr}
   190f0:	add	fp, sp, #16
   190f4:	mov	r4, r0
   190f8:	bl	11630 <__errno_location@plt>
   190fc:	ldr	r6, [r0]
   19100:	mov	r5, r0
   19104:	mov	r0, r4
   19108:	bl	11444 <free@plt>
   1910c:	str	r6, [r5]
   19110:	pop	{r4, r5, r6, sl, fp, pc}
   19114:	push	{r4, r5, r6, r7, fp, lr}
   19118:	add	fp, sp, #16
   1911c:	sub	sp, sp, #8
   19120:	mov	r4, r0
   19124:	ldr	r0, [r0, #4]
   19128:	mov	r5, r3
   1912c:	mov	r6, r2
   19130:	ldr	r1, [r4, #8]
   19134:	cmp	r1, r0
   19138:	bne	19154 <__assert_fail@plt+0x79b0>
   1913c:	ldrd	r0, [r4, #16]
   19140:	cmp	r1, r0
   19144:	bne	19154 <__assert_fail@plt+0x79b0>
   19148:	ldr	r0, [r4, #36]	; 0x24
   1914c:	cmp	r0, #0
   19150:	beq	1916c <__assert_fail@plt+0x79c8>
   19154:	mov	r0, r4
   19158:	mov	r2, r6
   1915c:	mov	r3, r5
   19160:	sub	sp, fp, #16
   19164:	pop	{r4, r5, r6, r7, fp, lr}
   19168:	b	116b4 <fseeko64@plt>
   1916c:	ldr	r7, [fp, #8]
   19170:	mov	r0, r4
   19174:	bl	11678 <fileno@plt>
   19178:	mov	r2, r6
   1917c:	mov	r3, r5
   19180:	str	r7, [sp]
   19184:	bl	1151c <lseek64@plt>
   19188:	and	r2, r0, r1
   1918c:	cmn	r2, #1
   19190:	beq	191ac <__assert_fail@plt+0x7a08>
   19194:	strd	r0, [r4, #80]	; 0x50
   19198:	ldr	r0, [r4]
   1919c:	bic	r0, r0, #16
   191a0:	str	r0, [r4]
   191a4:	mov	r0, #0
   191a8:	b	191b0 <__assert_fail@plt+0x7a0c>
   191ac:	mvn	r0, #0
   191b0:	sub	sp, fp, #16
   191b4:	pop	{r4, r5, r6, r7, fp, pc}
   191b8:	cmp	r0, #0
   191bc:	movweq	r0, #1
   191c0:	cmn	r0, #1
   191c4:	ble	191cc <__assert_fail@plt+0x7a28>
   191c8:	b	11594 <malloc@plt>
   191cc:	push	{fp, lr}
   191d0:	mov	fp, sp
   191d4:	bl	11630 <__errno_location@plt>
   191d8:	mov	r1, #12
   191dc:	str	r1, [r0]
   191e0:	mov	r0, #0
   191e4:	pop	{fp, pc}
   191e8:	push	{r4, r5, r6, r7, fp, lr}
   191ec:	add	fp, sp, #16
   191f0:	sub	sp, sp, #8
   191f4:	add	r5, sp, #4
   191f8:	cmp	r0, #0
   191fc:	mov	r7, r2
   19200:	mov	r4, r1
   19204:	movne	r5, r0
   19208:	mov	r0, r5
   1920c:	bl	11558 <mbrtowc@plt>
   19210:	mov	r6, r0
   19214:	cmp	r7, #0
   19218:	beq	1923c <__assert_fail@plt+0x7a98>
   1921c:	cmn	r6, #2
   19220:	bcc	1923c <__assert_fail@plt+0x7a98>
   19224:	mov	r0, #0
   19228:	bl	19354 <__assert_fail@plt+0x7bb0>
   1922c:	cmp	r0, #0
   19230:	ldrbeq	r0, [r4]
   19234:	moveq	r6, #1
   19238:	streq	r0, [r5]
   1923c:	mov	r0, r6
   19240:	sub	sp, fp, #16
   19244:	pop	{r4, r5, r6, r7, fp, pc}
   19248:	push	{fp, lr}
   1924c:	mov	fp, sp
   19250:	cmp	r0, #0
   19254:	beq	19270 <__assert_fail@plt+0x7acc>
   19258:	cmp	r1, #0
   1925c:	beq	1927c <__assert_fail@plt+0x7ad8>
   19260:	cmn	r1, #1
   19264:	ble	19284 <__assert_fail@plt+0x7ae0>
   19268:	pop	{fp, lr}
   1926c:	b	114d4 <realloc@plt>
   19270:	mov	r0, r1
   19274:	pop	{fp, lr}
   19278:	b	191b8 <__assert_fail@plt+0x7a14>
   1927c:	bl	190ec <__assert_fail@plt+0x7948>
   19280:	b	19290 <__assert_fail@plt+0x7aec>
   19284:	bl	11630 <__errno_location@plt>
   19288:	mov	r1, #12
   1928c:	str	r1, [r0]
   19290:	mov	r0, #0
   19294:	pop	{fp, pc}
   19298:	cmp	r2, #0
   1929c:	beq	192cc <__assert_fail@plt+0x7b28>
   192a0:	mvn	r3, #0
   192a4:	udiv	r3, r3, r2
   192a8:	cmp	r3, r1
   192ac:	bcs	192cc <__assert_fail@plt+0x7b28>
   192b0:	push	{fp, lr}
   192b4:	mov	fp, sp
   192b8:	bl	11630 <__errno_location@plt>
   192bc:	mov	r1, #12
   192c0:	str	r1, [r0]
   192c4:	mov	r0, #0
   192c8:	pop	{fp, pc}
   192cc:	mul	r1, r2, r1
   192d0:	b	19248 <__assert_fail@plt+0x7aa4>
   192d4:	push	{r4, r5, r6, sl, fp, lr}
   192d8:	add	fp, sp, #16
   192dc:	mov	r4, r0
   192e0:	bl	1154c <__fpending@plt>
   192e4:	mov	r5, r0
   192e8:	mov	r0, r4
   192ec:	bl	11450 <ferror@plt>
   192f0:	mov	r6, r0
   192f4:	mov	r0, r4
   192f8:	bl	11690 <fclose@plt>
   192fc:	cmp	r6, #0
   19300:	beq	19320 <__assert_fail@plt+0x7b7c>
   19304:	mvn	r4, #0
   19308:	cmp	r0, #0
   1930c:	bne	1934c <__assert_fail@plt+0x7ba8>
   19310:	bl	11630 <__errno_location@plt>
   19314:	mov	r1, #0
   19318:	str	r1, [r0]
   1931c:	b	1934c <__assert_fail@plt+0x7ba8>
   19320:	cmp	r0, #0
   19324:	mov	r4, r0
   19328:	mvnne	r4, #0
   1932c:	cmp	r5, #0
   19330:	bne	1934c <__assert_fail@plt+0x7ba8>
   19334:	cmp	r0, #0
   19338:	beq	1934c <__assert_fail@plt+0x7ba8>
   1933c:	bl	11630 <__errno_location@plt>
   19340:	ldr	r0, [r0]
   19344:	subs	r4, r0, #9
   19348:	mvnne	r4, #0
   1934c:	mov	r0, r4
   19350:	pop	{r4, r5, r6, sl, fp, pc}
   19354:	push	{r4, sl, fp, lr}
   19358:	add	fp, sp, #8
   1935c:	sub	sp, sp, #264	; 0x108
   19360:	add	r1, sp, #7
   19364:	movw	r2, #257	; 0x101
   19368:	bl	195e4 <__assert_fail@plt+0x7e40>
   1936c:	mov	r4, #0
   19370:	cmp	r0, #0
   19374:	bne	193ac <__assert_fail@plt+0x7c08>
   19378:	movw	r1, #47982	; 0xbb6e
   1937c:	add	r0, sp, #7
   19380:	movt	r1, #1
   19384:	bl	113fc <strcmp@plt>
   19388:	cmp	r0, #0
   1938c:	beq	193ac <__assert_fail@plt+0x7c08>
   19390:	movw	r1, #47984	; 0xbb70
   19394:	add	r0, sp, #7
   19398:	movt	r1, #1
   1939c:	bl	113fc <strcmp@plt>
   193a0:	mov	r4, r0
   193a4:	cmp	r0, #0
   193a8:	movwne	r4, #1
   193ac:	mov	r0, r4
   193b0:	sub	sp, fp, #8
   193b4:	pop	{r4, sl, fp, pc}
   193b8:	push	{fp, lr}
   193bc:	mov	fp, sp
   193c0:	mov	r0, #14
   193c4:	bl	116fc <nl_langinfo@plt>
   193c8:	movw	r1, #41983	; 0xa3ff
   193cc:	cmp	r0, #0
   193d0:	movt	r1, #1
   193d4:	movne	r1, r0
   193d8:	movw	r0, #47990	; 0xbb76
   193dc:	ldrb	r2, [r1]
   193e0:	movt	r0, #1
   193e4:	cmp	r2, #0
   193e8:	movne	r0, r1
   193ec:	pop	{fp, pc}
   193f0:	push	{r4, sl, fp, lr}
   193f4:	add	fp, sp, #8
   193f8:	mov	r4, #0
   193fc:	adds	r0, r0, #16
   19400:	adc	r1, r4, #0
   19404:	rsb	r2, r1, #0
   19408:	eors	r2, r2, r1
   1940c:	movwne	r2, #1
   19410:	cmp	r0, #0
   19414:	blt	19450 <__assert_fail@plt+0x7cac>
   19418:	cmp	r2, #0
   1941c:	asreq	r2, r0, #31
   19420:	eoreq	r3, r0, r0
   19424:	andeq	r2, r2, #1
   19428:	eoreq	r1, r1, r2
   1942c:	orrseq	r1, r3, r1
   19430:	bne	19450 <__assert_fail@plt+0x7cac>
   19434:	bl	11594 <malloc@plt>
   19438:	cmp	r0, #0
   1943c:	addne	r4, r0, #8
   19440:	movne	r1, #8
   19444:	bfine	r4, r1, #0, #4
   19448:	subne	r0, r4, r0
   1944c:	strbne	r0, [r4, #-1]
   19450:	mov	r0, r4
   19454:	pop	{r4, sl, fp, pc}
   19458:	tst	r0, #7
   1945c:	bne	19474 <__assert_fail@plt+0x7cd0>
   19460:	tst	r0, #8
   19464:	bxeq	lr
   19468:	ldrb	r1, [r0, #-1]
   1946c:	sub	r0, r0, r1
   19470:	b	190ec <__assert_fail@plt+0x7948>
   19474:	push	{fp, lr}
   19478:	mov	fp, sp
   1947c:	bl	11774 <abort@plt>
   19480:	push	{r4, sl, fp, lr}
   19484:	add	fp, sp, #8
   19488:	mov	r4, r0
   1948c:	bl	11438 <wcwidth@plt>
   19490:	cmn	r0, #1
   19494:	popgt	{r4, sl, fp, pc}
   19498:	mov	r0, r4
   1949c:	bl	114ec <iswcntrl@plt>
   194a0:	clz	r0, r0
   194a4:	lsr	r0, r0, #5
   194a8:	pop	{r4, sl, fp, pc}
   194ac:	push	{r4, r5, r6, sl, fp, lr}
   194b0:	add	fp, sp, #16
   194b4:	mov	r4, r0
   194b8:	mov	r0, r1
   194bc:	mov	r5, r1
   194c0:	ldr	r1, [r0], #16
   194c4:	cmp	r1, r0
   194c8:	beq	194d4 <__assert_fail@plt+0x7d30>
   194cc:	mov	r6, r1
   194d0:	b	194e4 <__assert_fail@plt+0x7d40>
   194d4:	ldr	r2, [r5, #4]
   194d8:	add	r6, r4, #16
   194dc:	mov	r0, r6
   194e0:	bl	11468 <memcpy@plt>
   194e4:	str	r6, [r4]
   194e8:	ldr	r0, [r5, #4]
   194ec:	str	r0, [r4, #4]
   194f0:	ldrb	r0, [r5, #8]
   194f4:	strb	r0, [r4, #8]
   194f8:	cmp	r0, #0
   194fc:	ldrne	r0, [r5, #12]
   19500:	strne	r0, [r4, #12]
   19504:	pop	{r4, r5, r6, sl, fp, pc}
   19508:	movw	r2, #47996	; 0xbb7c
   1950c:	ubfx	r1, r0, #5, #3
   19510:	and	r0, r0, #31
   19514:	movt	r2, #1
   19518:	ldr	r1, [r2, r1, lsl #2]
   1951c:	mov	r2, #1
   19520:	and	r0, r1, r2, lsl r0
   19524:	cmp	r0, #0
   19528:	movwne	r0, #1
   1952c:	bx	lr
   19530:	push	{r4, r5, r6, sl, fp, lr}
   19534:	add	fp, sp, #16
   19538:	sub	sp, sp, #56	; 0x38
   1953c:	mov	r5, r0
   19540:	bl	11534 <__ctype_get_mb_cur_max@plt>
   19544:	cmp	r0, #2
   19548:	bcc	195d4 <__assert_fail@plt+0x7e30>
   1954c:	mov	r4, #0
   19550:	mov	r0, sp
   19554:	str	r4, [sp, #8]
   19558:	str	r4, [sp, #4]
   1955c:	strb	r4, [sp]
   19560:	str	r5, [sp, #16]
   19564:	strb	r4, [sp, #12]
   19568:	bl	161d4 <__assert_fail@plt+0x4a30>
   1956c:	ldrb	r0, [sp, #24]
   19570:	cmp	r0, #0
   19574:	beq	19584 <__assert_fail@plt+0x7de0>
   19578:	ldr	r0, [sp, #28]
   1957c:	cmp	r0, #0
   19580:	beq	195c8 <__assert_fail@plt+0x7e24>
   19584:	mov	r6, #0
   19588:	mov	r5, sp
   1958c:	mov	r4, #0
   19590:	strb	r6, [sp, #12]
   19594:	ldr	r0, [sp, #16]
   19598:	ldr	r1, [sp, #20]
   1959c:	add	r0, r0, r1
   195a0:	str	r0, [sp, #16]
   195a4:	mov	r0, r5
   195a8:	bl	161d4 <__assert_fail@plt+0x4a30>
   195ac:	ldrb	r1, [sp, #24]
   195b0:	ldr	r0, [sp, #28]
   195b4:	add	r4, r4, #1
   195b8:	cmp	r1, #0
   195bc:	beq	19590 <__assert_fail@plt+0x7dec>
   195c0:	cmp	r0, #0
   195c4:	bne	19590 <__assert_fail@plt+0x7dec>
   195c8:	mov	r0, r4
   195cc:	sub	sp, fp, #16
   195d0:	pop	{r4, r5, r6, sl, fp, pc}
   195d4:	mov	r0, r5
   195d8:	sub	sp, fp, #16
   195dc:	pop	{r4, r5, r6, sl, fp, lr}
   195e0:	b	11600 <strlen@plt>
   195e4:	push	{r4, r5, r6, r7, fp, lr}
   195e8:	add	fp, sp, #16
   195ec:	mov	r4, r1
   195f0:	mov	r1, #0
   195f4:	mov	r6, r2
   195f8:	bl	116cc <setlocale@plt>
   195fc:	cmp	r0, #0
   19600:	beq	1962c <__assert_fail@plt+0x7e88>
   19604:	mov	r7, r0
   19608:	bl	11600 <strlen@plt>
   1960c:	cmp	r0, r6
   19610:	bcs	19640 <__assert_fail@plt+0x7e9c>
   19614:	add	r2, r0, #1
   19618:	mov	r0, r4
   1961c:	mov	r1, r7
   19620:	bl	11468 <memcpy@plt>
   19624:	mov	r5, #0
   19628:	b	19668 <__assert_fail@plt+0x7ec4>
   1962c:	cmp	r6, #0
   19630:	mov	r5, #22
   19634:	movne	r0, #0
   19638:	strbne	r0, [r4]
   1963c:	b	19668 <__assert_fail@plt+0x7ec4>
   19640:	mov	r5, #34	; 0x22
   19644:	cmp	r6, #0
   19648:	beq	19668 <__assert_fail@plt+0x7ec4>
   1964c:	sub	r6, r6, #1
   19650:	mov	r0, r4
   19654:	mov	r1, r7
   19658:	mov	r2, r6
   1965c:	bl	11468 <memcpy@plt>
   19660:	mov	r0, #0
   19664:	strb	r0, [r4, r6]
   19668:	mov	r0, r5
   1966c:	pop	{r4, r5, r6, r7, fp, pc}
   19670:	mov	r1, #0
   19674:	b	116cc <setlocale@plt>
   19678:	mov	r1, #0
   1967c:	mov	r2, #3
   19680:	b	18e7c <__assert_fail@plt+0x76d8>
   19684:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19688:	mov	r7, r0
   1968c:	ldr	r6, [pc, #72]	; 196dc <__assert_fail@plt+0x7f38>
   19690:	ldr	r5, [pc, #72]	; 196e0 <__assert_fail@plt+0x7f3c>
   19694:	add	r6, pc, r6
   19698:	add	r5, pc, r5
   1969c:	sub	r6, r6, r5
   196a0:	mov	r8, r1
   196a4:	mov	r9, r2
   196a8:	bl	113c4 <fdopen@plt-0x20>
   196ac:	asrs	r6, r6, #2
   196b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   196b4:	mov	r4, #0
   196b8:	add	r4, r4, #1
   196bc:	ldr	r3, [r5], #4
   196c0:	mov	r2, r9
   196c4:	mov	r1, r8
   196c8:	mov	r0, r7
   196cc:	blx	r3
   196d0:	cmp	r6, r4
   196d4:	bne	196b8 <__assert_fail@plt+0x7f14>
   196d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196dc:	andeq	r2, r1, r0, ror r8
   196e0:	andeq	r2, r1, r8, ror #16
   196e4:	bx	lr
   196e8:	ldr	r3, [pc, #12]	; 196fc <__assert_fail@plt+0x7f58>
   196ec:	mov	r1, #0
   196f0:	add	r3, pc, r3
   196f4:	ldr	r2, [r3]
   196f8:	b	11648 <__cxa_atexit@plt>
   196fc:	andeq	r2, r1, r4, ror #20

Disassembly of section .fini:

00019700 <.fini>:
   19700:	push	{r3, lr}
   19704:	pop	{r3, pc}
