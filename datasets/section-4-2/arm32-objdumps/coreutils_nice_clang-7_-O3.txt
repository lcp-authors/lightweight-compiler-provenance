
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010cf0 <.init>:
   10cf0:	push	{r3, lr}
   10cf4:	bl	10f80 <__assert_fail@plt+0x48>
   10cf8:	pop	{r3, pc}

Disassembly of section .plt:

00010cfc <calloc@plt-0x14>:
   10cfc:	push	{lr}		; (str lr, [sp, #-4]!)
   10d00:	ldr	lr, [pc, #4]	; 10d0c <calloc@plt-0x4>
   10d04:	add	lr, pc, lr
   10d08:	ldr	pc, [lr, #8]!
   10d0c:	strdeq	r6, [r1], -r4

00010d10 <calloc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #756]!	; 0x2f4

00010d1c <fputs_unlocked@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #748]!	; 0x2ec

00010d28 <strcmp@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #740]!	; 0x2e4

00010d34 <strtol@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d40 <fflush@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #724]!	; 0x2d4

00010d4c <free@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #716]!	; 0x2cc

00010d58 <_exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #708]!	; 0x2c4

00010d64 <memcpy@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d70 <execvp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #692]!	; 0x2b4

00010d7c <mbsinit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #684]!	; 0x2ac

00010d88 <memcmp@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #676]!	; 0x2a4

00010d94 <dcgettext@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #668]!	; 0x29c

00010da0 <realloc@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #660]!	; 0x294

00010dac <getpriority@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #652]!	; 0x28c

00010db8 <textdomain@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #644]!	; 0x284

00010dc4 <iswprint@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #636]!	; 0x27c

00010dd0 <fwrite@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #628]!	; 0x274

00010ddc <lseek64@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #620]!	; 0x26c

00010de8 <__ctype_get_mb_cur_max@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #612]!	; 0x264

00010df4 <__fpending@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #604]!	; 0x25c

00010e00 <mbrtowc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #596]!	; 0x254

00010e0c <error@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #588]!	; 0x24c

00010e18 <setpriority@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #580]!	; 0x244

00010e24 <malloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #572]!	; 0x23c

00010e30 <__libc_start_main@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #564]!	; 0x234

00010e3c <__freading@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #556]!	; 0x22c

00010e48 <__gmon_start__@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #548]!	; 0x224

00010e54 <getopt_long@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #540]!	; 0x21c

00010e60 <__ctype_b_loc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #532]!	; 0x214

00010e6c <exit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #524]!	; 0x20c

00010e78 <strlen@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #516]!	; 0x204

00010e84 <strchr@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e90 <__errno_location@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #500]!	; 0x1f4

00010e9c <__cxa_atexit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ea8 <memset@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #484]!	; 0x1e4

00010eb4 <__printf_chk@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #468]!	; 0x1d4

00010ecc <__fprintf_chk@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #452]!	; 0x1c4

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #444]!	; 0x1bc

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #436]!	; 0x1b4

00010efc <strrchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #428]!	; 0x1ac

00010f08 <nl_langinfo@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #420]!	; 0x1a4

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #412]!	; 0x19c

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #404]!	; 0x194

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #396]!	; 0x18c

00010f38 <__assert_fail@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f44 <.text>:
   10f44:	mov	fp, #0
   10f48:	mov	lr, #0
   10f4c:	pop	{r1}		; (ldr r1, [sp], #4)
   10f50:	mov	r2, sp
   10f54:	push	{r2}		; (str r2, [sp, #-4]!)
   10f58:	push	{r0}		; (str r0, [sp, #-4]!)
   10f5c:	ldr	ip, [pc, #16]	; 10f74 <__assert_fail@plt+0x3c>
   10f60:	push	{ip}		; (str ip, [sp, #-4]!)
   10f64:	ldr	r0, [pc, #12]	; 10f78 <__assert_fail@plt+0x40>
   10f68:	ldr	r3, [pc, #12]	; 10f7c <__assert_fail@plt+0x44>
   10f6c:	bl	10e30 <__libc_start_main@plt>
   10f70:	bl	10f2c <abort@plt>
   10f74:	andeq	r5, r1, r4, lsl #10
   10f78:	andeq	r1, r1, r0, ror #5
   10f7c:	andeq	r5, r1, r4, lsr #9
   10f80:	ldr	r3, [pc, #20]	; 10f9c <__assert_fail@plt+0x64>
   10f84:	ldr	r2, [pc, #20]	; 10fa0 <__assert_fail@plt+0x68>
   10f88:	add	r3, pc, r3
   10f8c:	ldr	r2, [r3, r2]
   10f90:	cmp	r2, #0
   10f94:	bxeq	lr
   10f98:	b	10e48 <__gmon_start__@plt>
   10f9c:	andeq	r6, r1, r0, ror r0
   10fa0:	andeq	r0, r0, r8, asr #1
   10fa4:	ldr	r0, [pc, #24]	; 10fc4 <__assert_fail@plt+0x8c>
   10fa8:	ldr	r3, [pc, #24]	; 10fc8 <__assert_fail@plt+0x90>
   10fac:	cmp	r3, r0
   10fb0:	bxeq	lr
   10fb4:	ldr	r3, [pc, #16]	; 10fcc <__assert_fail@plt+0x94>
   10fb8:	cmp	r3, #0
   10fbc:	bxeq	lr
   10fc0:	bx	r3
   10fc4:	andeq	r7, r2, r0, lsr #2
   10fc8:	andeq	r7, r2, r0, lsr #2
   10fcc:	andeq	r0, r0, r0
   10fd0:	ldr	r0, [pc, #36]	; 10ffc <__assert_fail@plt+0xc4>
   10fd4:	ldr	r1, [pc, #36]	; 11000 <__assert_fail@plt+0xc8>
   10fd8:	sub	r1, r1, r0
   10fdc:	asr	r1, r1, #2
   10fe0:	add	r1, r1, r1, lsr #31
   10fe4:	asrs	r1, r1, #1
   10fe8:	bxeq	lr
   10fec:	ldr	r3, [pc, #16]	; 11004 <__assert_fail@plt+0xcc>
   10ff0:	cmp	r3, #0
   10ff4:	bxeq	lr
   10ff8:	bx	r3
   10ffc:	andeq	r7, r2, r0, lsr #2
   11000:	andeq	r7, r2, r0, lsr #2
   11004:	andeq	r0, r0, r0
   11008:	push	{r4, lr}
   1100c:	ldr	r4, [pc, #24]	; 1102c <__assert_fail@plt+0xf4>
   11010:	ldrb	r3, [r4]
   11014:	cmp	r3, #0
   11018:	popne	{r4, pc}
   1101c:	bl	10fa4 <__assert_fail@plt+0x6c>
   11020:	mov	r3, #1
   11024:	strb	r3, [r4]
   11028:	pop	{r4, pc}
   1102c:	andeq	r7, r2, ip, lsr r1
   11030:	b	10fd0 <__assert_fail@plt+0x98>
   11034:	push	{fp, lr}
   11038:	mov	fp, sp
   1103c:	sub	sp, sp, #56	; 0x38
   11040:	mov	r4, r0
   11044:	cmp	r0, #0
   11048:	bne	1129c <__assert_fail@plt+0x364>
   1104c:	movw	r1, #21843	; 0x5553
   11050:	mov	r0, #0
   11054:	mov	r2, #5
   11058:	movt	r1, #1
   1105c:	bl	10d94 <dcgettext@plt>
   11060:	mov	r1, r0
   11064:	movw	r0, #29000	; 0x7148
   11068:	movt	r0, #2
   1106c:	ldr	r2, [r0]
   11070:	mov	r0, #1
   11074:	bl	10eb4 <__printf_chk@plt>
   11078:	movw	r1, #21882	; 0x557a
   1107c:	mov	r0, #0
   11080:	mov	r2, #5
   11084:	movt	r1, #1
   11088:	bl	10d94 <dcgettext@plt>
   1108c:	mov	r1, r0
   11090:	mov	r0, #1
   11094:	mvn	r2, #19
   11098:	mov	r3, #19
   1109c:	bl	10eb4 <__printf_chk@plt>
   110a0:	movw	r1, #22633	; 0x5869
   110a4:	mov	r0, #0
   110a8:	mov	r2, #5
   110ac:	movt	r1, #1
   110b0:	bl	10d94 <dcgettext@plt>
   110b4:	movw	r7, #28980	; 0x7134
   110b8:	movt	r7, #2
   110bc:	ldr	r1, [r7]
   110c0:	bl	10d1c <fputs_unlocked@plt>
   110c4:	movw	r1, #22104	; 0x5658
   110c8:	mov	r0, #0
   110cc:	mov	r2, #5
   110d0:	movt	r1, #1
   110d4:	bl	10d94 <dcgettext@plt>
   110d8:	ldr	r1, [r7]
   110dc:	bl	10d1c <fputs_unlocked@plt>
   110e0:	movw	r1, #22171	; 0x569b
   110e4:	mov	r0, #0
   110e8:	mov	r2, #5
   110ec:	movt	r1, #1
   110f0:	bl	10d94 <dcgettext@plt>
   110f4:	ldr	r1, [r7]
   110f8:	bl	10d1c <fputs_unlocked@plt>
   110fc:	movw	r1, #22216	; 0x56c8
   11100:	mov	r0, #0
   11104:	mov	r2, #5
   11108:	movt	r1, #1
   1110c:	bl	10d94 <dcgettext@plt>
   11110:	ldr	r1, [r7]
   11114:	bl	10d1c <fputs_unlocked@plt>
   11118:	movw	r1, #22270	; 0x56fe
   1111c:	mov	r0, #0
   11120:	mov	r2, #5
   11124:	movt	r1, #1
   11128:	bl	10d94 <dcgettext@plt>
   1112c:	movw	r5, #22461	; 0x57bd
   11130:	mov	r1, r0
   11134:	mov	r0, #1
   11138:	movt	r5, #1
   1113c:	mov	r2, r5
   11140:	bl	10eb4 <__printf_chk@plt>
   11144:	movw	r0, #23096	; 0x5a38
   11148:	mov	r2, #48	; 0x30
   1114c:	mov	r6, sp
   11150:	movt	r0, #1
   11154:	add	r1, r0, #32
   11158:	add	r3, r0, #16
   1115c:	vld1.64	{d18-d19}, [r0], r2
   11160:	vld1.64	{d16-d17}, [r1]
   11164:	vld1.64	{d20-d21}, [r3]
   11168:	add	r1, r6, #32
   1116c:	vldr	d22, [r0]
   11170:	add	r0, r6, #16
   11174:	vst1.64	{d16-d17}, [r1]
   11178:	movw	r1, #22708	; 0x58b4
   1117c:	vst1.64	{d20-d21}, [r0]
   11180:	mov	r0, r6
   11184:	vst1.64	{d18-d19}, [r0], r2
   11188:	movt	r1, #1
   1118c:	vstr	d22, [r0]
   11190:	mov	r0, r5
   11194:	bl	10d28 <strcmp@plt>
   11198:	cmp	r0, #0
   1119c:	ldrne	r1, [r6, #8]!
   111a0:	cmpne	r1, #0
   111a4:	bne	11190 <__assert_fail@plt+0x258>
   111a8:	ldr	r6, [r6, #4]
   111ac:	movw	r1, #22803	; 0x5913
   111b0:	mov	r0, #0
   111b4:	mov	r2, #5
   111b8:	movt	r1, #1
   111bc:	bl	10d94 <dcgettext@plt>
   111c0:	movw	r2, #22494	; 0x57de
   111c4:	movw	r3, #22826	; 0x592a
   111c8:	mov	r1, r0
   111cc:	mov	r0, #1
   111d0:	movt	r2, #1
   111d4:	movt	r3, #1
   111d8:	bl	10eb4 <__printf_chk@plt>
   111dc:	cmp	r6, #0
   111e0:	mov	r0, #5
   111e4:	mov	r1, #0
   111e8:	moveq	r6, r5
   111ec:	bl	10ef0 <setlocale@plt>
   111f0:	cmp	r0, #0
   111f4:	beq	1122c <__assert_fail@plt+0x2f4>
   111f8:	movw	r1, #22866	; 0x5952
   111fc:	mov	r2, #3
   11200:	movt	r1, #1
   11204:	bl	10f20 <strncmp@plt>
   11208:	cmp	r0, #0
   1120c:	beq	1122c <__assert_fail@plt+0x2f4>
   11210:	movw	r1, #22870	; 0x5956
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10d94 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10d1c <fputs_unlocked@plt>
   1122c:	movw	r1, #22941	; 0x599d
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10d94 <dcgettext@plt>
   11240:	movw	r2, #22826	; 0x592a
   11244:	mov	r1, r0
   11248:	mov	r0, #1
   1124c:	mov	r3, r5
   11250:	movt	r2, #1
   11254:	bl	10eb4 <__printf_chk@plt>
   11258:	movw	r1, #22968	; 0x59b8
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	movt	r1, #1
   11268:	bl	10d94 <dcgettext@plt>
   1126c:	movw	r3, #23018	; 0x59ea
   11270:	mov	r1, r0
   11274:	movw	r0, #22736	; 0x58d0
   11278:	cmp	r6, r5
   1127c:	mov	r2, r6
   11280:	movt	r0, #1
   11284:	movt	r3, #1
   11288:	moveq	r3, r0
   1128c:	mov	r0, #1
   11290:	bl	10eb4 <__printf_chk@plt>
   11294:	mov	r0, r4
   11298:	bl	10e6c <exit@plt>
   1129c:	movw	r0, #28976	; 0x7130
   112a0:	movw	r1, #21804	; 0x552c
   112a4:	mov	r2, #5
   112a8:	movt	r0, #2
   112ac:	movt	r1, #1
   112b0:	ldr	r5, [r0]
   112b4:	mov	r0, #0
   112b8:	bl	10d94 <dcgettext@plt>
   112bc:	mov	r2, r0
   112c0:	movw	r0, #29000	; 0x7148
   112c4:	mov	r1, #1
   112c8:	movt	r0, #2
   112cc:	ldr	r3, [r0]
   112d0:	mov	r0, r5
   112d4:	bl	10ecc <__fprintf_chk@plt>
   112d8:	mov	r0, r4
   112dc:	bl	10e6c <exit@plt>
   112e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e4:	add	fp, sp, #28
   112e8:	sub	sp, sp, #12
   112ec:	mov	r8, r0
   112f0:	ldr	r0, [r1]
   112f4:	mov	r9, r1
   112f8:	bl	11810 <__assert_fail@plt+0x8d8>
   112fc:	movw	r1, #23018	; 0x59ea
   11300:	mov	r0, #6
   11304:	movt	r1, #1
   11308:	bl	10ef0 <setlocale@plt>
   1130c:	movw	r7, #22498	; 0x57e2
   11310:	movw	r1, #22466	; 0x57c2
   11314:	movt	r7, #1
   11318:	movt	r1, #1
   1131c:	mov	r0, r7
   11320:	bl	10f14 <bindtextdomain@plt>
   11324:	mov	r0, r7
   11328:	bl	10db8 <textdomain@plt>
   1132c:	movw	r0, #28892	; 0x70dc
   11330:	mov	r1, #125	; 0x7d
   11334:	movt	r0, #2
   11338:	str	r1, [r0]
   1133c:	movw	r0, #5924	; 0x1724
   11340:	movt	r0, #1
   11344:	bl	15508 <__assert_fail@plt+0x45d0>
   11348:	mov	r1, #10
   1134c:	mov	r7, #1
   11350:	cmp	r8, #2
   11354:	blt	11438 <__assert_fail@plt+0x500>
   11358:	movw	r2, #22490	; 0x57da
   1135c:	movw	r3, #23032	; 0x59f8
   11360:	movw	sl, #28968	; 0x7128
   11364:	mov	r4, #0
   11368:	movt	r2, #1
   1136c:	movt	r3, #1
   11370:	movt	sl, #2
   11374:	ldr	r1, [r9, r7, lsl #2]
   11378:	ldrb	r0, [r1]
   1137c:	cmp	r0, #45	; 0x2d
   11380:	bne	113c4 <__assert_fail@plt+0x48c>
   11384:	mov	r0, r1
   11388:	mov	r5, #1
   1138c:	ldrb	r6, [r0, #1]!
   11390:	cmp	r6, #43	; 0x2b
   11394:	movweq	r5, #2
   11398:	cmp	r6, #45	; 0x2d
   1139c:	movweq	r5, #2
   113a0:	ldrb	r1, [r1, r5]
   113a4:	sub	r1, r1, #48	; 0x30
   113a8:	cmp	r1, #9
   113ac:	bhi	113c4 <__assert_fail@plt+0x48c>
   113b0:	add	r7, r7, #1
   113b4:	mov	r4, r0
   113b8:	cmp	r7, r8
   113bc:	blt	11374 <__assert_fail@plt+0x43c>
   113c0:	b	114ac <__assert_fail@plt+0x574>
   113c4:	sub	r7, r7, #1
   113c8:	mov	r5, r9
   113cc:	mov	r6, r8
   113d0:	ldr	r0, [r9], r7, lsl #2
   113d4:	str	r0, [r9]
   113d8:	mov	r0, #0
   113dc:	mov	r1, r9
   113e0:	mov	r9, r2
   113e4:	str	r0, [sl]
   113e8:	str	r0, [sp]
   113ec:	sub	r0, r8, r7
   113f0:	mov	r8, r3
   113f4:	bl	10e54 <getopt_long@plt>
   113f8:	ldr	r1, [sl]
   113fc:	cmp	r0, #109	; 0x6d
   11400:	add	r7, r7, r1
   11404:	ble	1149c <__assert_fail@plt+0x564>
   11408:	cmp	r0, #110	; 0x6e
   1140c:	bne	11654 <__assert_fail@plt+0x71c>
   11410:	movw	r0, #28984	; 0x7138
   11414:	mov	r2, r9
   11418:	mov	r3, r8
   1141c:	mov	r9, r5
   11420:	mov	r8, r6
   11424:	movt	r0, #2
   11428:	ldr	r4, [r0]
   1142c:	cmp	r7, r8
   11430:	blt	11374 <__assert_fail@plt+0x43c>
   11434:	b	114ac <__assert_fail@plt+0x574>
   11438:	mov	r0, #0
   1143c:	cmp	r7, r8
   11440:	bne	114fc <__assert_fail@plt+0x5c4>
   11444:	cmp	r0, #0
   11448:	bne	1165c <__assert_fail@plt+0x724>
   1144c:	bl	10e90 <__errno_location@plt>
   11450:	mov	r6, #0
   11454:	mov	r4, r0
   11458:	mov	r1, #0
   1145c:	str	r6, [r0]
   11460:	mov	r0, #0
   11464:	bl	10dac <getpriority@plt>
   11468:	mov	r2, r0
   1146c:	cmn	r0, #1
   11470:	bne	11480 <__assert_fail@plt+0x548>
   11474:	ldr	r4, [r4]
   11478:	cmp	r4, #0
   1147c:	bne	116bc <__assert_fail@plt+0x784>
   11480:	movw	r1, #22609	; 0x5851
   11484:	mov	r0, #1
   11488:	movt	r1, #1
   1148c:	bl	10eb4 <__printf_chk@plt>
   11490:	mov	r0, r6
   11494:	sub	sp, fp, #28
   11498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1149c:	cmn	r0, #1
   114a0:	mov	r9, r5
   114a4:	mov	r8, r6
   114a8:	bne	115f4 <__assert_fail@plt+0x6bc>
   114ac:	cmp	r4, #0
   114b0:	beq	115e0 <__assert_fail@plt+0x6a8>
   114b4:	movw	r0, #23018	; 0x59ea
   114b8:	add	r3, sp, #8
   114bc:	mov	r1, #0
   114c0:	mov	r2, #10
   114c4:	movt	r0, #1
   114c8:	str	r0, [sp]
   114cc:	mov	r0, r4
   114d0:	bl	14408 <__assert_fail@plt+0x34d0>
   114d4:	cmp	r0, #2
   114d8:	bcs	11688 <__assert_fail@plt+0x750>
   114dc:	ldr	r1, [sp, #8]
   114e0:	mov	r0, #1
   114e4:	cmp	r1, #39	; 0x27
   114e8:	movge	r1, #39	; 0x27
   114ec:	cmn	r1, #39	; 0x27
   114f0:	mvnle	r1, #38	; 0x26
   114f4:	cmp	r7, r8
   114f8:	beq	11444 <__assert_fail@plt+0x50c>
   114fc:	mov	r5, r1
   11500:	bl	10e90 <__errno_location@plt>
   11504:	mov	r4, r0
   11508:	mov	r0, #0
   1150c:	mov	r1, #0
   11510:	str	r0, [r4]
   11514:	mov	r0, #0
   11518:	bl	10dac <getpriority@plt>
   1151c:	cmn	r0, #1
   11520:	bne	11530 <__assert_fail@plt+0x5f8>
   11524:	ldr	r6, [r4]
   11528:	cmp	r6, #0
   1152c:	bne	116e0 <__assert_fail@plt+0x7a8>
   11530:	add	r2, r0, r5
   11534:	mov	r0, #0
   11538:	mov	r1, #0
   1153c:	bl	10e18 <setpriority@plt>
   11540:	cmp	r0, #0
   11544:	beq	11598 <__assert_fail@plt+0x660>
   11548:	ldr	r6, [r4]
   1154c:	movw	r1, #22613	; 0x5855
   11550:	mov	r0, #0
   11554:	mov	r2, #5
   11558:	movt	r1, #1
   1155c:	bl	10d94 <dcgettext@plt>
   11560:	subs	r1, r6, #1
   11564:	mov	r2, r0
   11568:	movwne	r1, #125	; 0x7d
   1156c:	subs	r0, r6, #13
   11570:	movne	r0, r1
   11574:	mov	r1, r6
   11578:	bl	10e0c <error@plt>
   1157c:	movw	r0, #28976	; 0x7130
   11580:	mov	r6, #125	; 0x7d
   11584:	movt	r0, #2
   11588:	ldr	r0, [r0]
   1158c:	ldrb	r0, [r0]
   11590:	tst	r0, #32
   11594:	bne	115d4 <__assert_fail@plt+0x69c>
   11598:	ldr	r0, [r9, r7, lsl #2]!
   1159c:	mov	r1, r9
   115a0:	bl	10d70 <execvp@plt>
   115a4:	ldr	r0, [r9]
   115a8:	ldr	r4, [r4]
   115ac:	bl	1378c <__assert_fail@plt+0x2854>
   115b0:	movw	r2, #23183	; 0x5a8f
   115b4:	mov	r3, r0
   115b8:	mov	r0, #0
   115bc:	mov	r1, r4
   115c0:	movt	r2, #1
   115c4:	bl	10e0c <error@plt>
   115c8:	mov	r6, #126	; 0x7e
   115cc:	cmp	r4, #2
   115d0:	movweq	r6, #127	; 0x7f
   115d4:	mov	r0, r6
   115d8:	sub	sp, fp, #28
   115dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115e0:	mov	r0, #0
   115e4:	mov	r1, #10
   115e8:	cmp	r7, r8
   115ec:	beq	11444 <__assert_fail@plt+0x50c>
   115f0:	b	114fc <__assert_fail@plt+0x5c4>
   115f4:	cmn	r0, #3
   115f8:	bne	11644 <__assert_fail@plt+0x70c>
   115fc:	movw	r0, #28888	; 0x70d8
   11600:	movw	r2, #22508	; 0x57ec
   11604:	mov	r1, #0
   11608:	movt	r0, #2
   1160c:	movt	r2, #1
   11610:	str	r1, [sp, #4]
   11614:	movw	r1, #22461	; 0x57bd
   11618:	ldr	r3, [r0]
   1161c:	movw	r0, #28980	; 0x7134
   11620:	str	r2, [sp]
   11624:	movw	r2, #22494	; 0x57de
   11628:	movt	r1, #1
   1162c:	movt	r0, #2
   11630:	movt	r2, #1
   11634:	ldr	r0, [r0]
   11638:	bl	13c30 <__assert_fail@plt+0x2cf8>
   1163c:	mov	r0, #0
   11640:	bl	10e6c <exit@plt>
   11644:	cmn	r0, #2
   11648:	bne	11654 <__assert_fail@plt+0x71c>
   1164c:	mov	r0, #0
   11650:	bl	11034 <__assert_fail@plt+0xfc>
   11654:	mov	r0, #125	; 0x7d
   11658:	bl	11034 <__assert_fail@plt+0xfc>
   1165c:	movw	r1, #22546	; 0x5812
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	10d94 <dcgettext@plt>
   11670:	mov	r2, r0
   11674:	mov	r0, #0
   11678:	mov	r1, #0
   1167c:	bl	10e0c <error@plt>
   11680:	mov	r0, #125	; 0x7d
   11684:	bl	11034 <__assert_fail@plt+0xfc>
   11688:	movw	r1, #22524	; 0x57fc
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #1
   11698:	bl	10d94 <dcgettext@plt>
   1169c:	mov	r5, r0
   116a0:	mov	r0, r4
   116a4:	bl	1378c <__assert_fail@plt+0x2854>
   116a8:	mov	r3, r0
   116ac:	mov	r0, #125	; 0x7d
   116b0:	mov	r1, #0
   116b4:	mov	r2, r5
   116b8:	bl	10e0c <error@plt>
   116bc:	movw	r1, #22589	; 0x583d
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	movt	r1, #1
   116cc:	bl	10d94 <dcgettext@plt>
   116d0:	mov	r2, r0
   116d4:	mov	r0, #125	; 0x7d
   116d8:	mov	r1, r4
   116dc:	bl	10e0c <error@plt>
   116e0:	movw	r1, #22589	; 0x583d
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	movt	r1, #1
   116f0:	bl	10d94 <dcgettext@plt>
   116f4:	mov	r2, r0
   116f8:	mov	r0, #125	; 0x7d
   116fc:	mov	r1, r6
   11700:	bl	10e0c <error@plt>
   11704:	movw	r1, #28992	; 0x7140
   11708:	movt	r1, #2
   1170c:	str	r0, [r1, #4]
   11710:	bx	lr
   11714:	movw	r1, #28992	; 0x7140
   11718:	movt	r1, #2
   1171c:	strb	r0, [r1]
   11720:	bx	lr
   11724:	push	{r4, r5, r6, sl, fp, lr}
   11728:	add	fp, sp, #16
   1172c:	sub	sp, sp, #8
   11730:	movw	r0, #28980	; 0x7134
   11734:	movt	r0, #2
   11738:	ldr	r0, [r0]
   1173c:	bl	15074 <__assert_fail@plt+0x413c>
   11740:	cmp	r0, #0
   11744:	beq	1176c <__assert_fail@plt+0x834>
   11748:	movw	r5, #28992	; 0x7140
   1174c:	movt	r5, #2
   11750:	ldrb	r0, [r5]
   11754:	cmp	r0, #0
   11758:	beq	11798 <__assert_fail@plt+0x860>
   1175c:	bl	10e90 <__errno_location@plt>
   11760:	ldr	r0, [r0]
   11764:	cmp	r0, #32
   11768:	bne	11798 <__assert_fail@plt+0x860>
   1176c:	movw	r0, #28976	; 0x7130
   11770:	movt	r0, #2
   11774:	ldr	r0, [r0]
   11778:	bl	15074 <__assert_fail@plt+0x413c>
   1177c:	cmp	r0, #0
   11780:	subeq	sp, fp, #16
   11784:	popeq	{r4, r5, r6, sl, fp, pc}
   11788:	movw	r0, #28892	; 0x70dc
   1178c:	movt	r0, #2
   11790:	ldr	r0, [r0]
   11794:	bl	10d58 <_exit@plt>
   11798:	movw	r1, #23167	; 0x5a7f
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	movt	r1, #1
   117a8:	bl	10d94 <dcgettext@plt>
   117ac:	ldr	r6, [r5, #4]
   117b0:	mov	r4, r0
   117b4:	bl	10e90 <__errno_location@plt>
   117b8:	ldr	r5, [r0]
   117bc:	cmp	r6, #0
   117c0:	bne	117dc <__assert_fail@plt+0x8a4>
   117c4:	movw	r2, #23183	; 0x5a8f
   117c8:	mov	r0, #0
   117cc:	mov	r1, r5
   117d0:	mov	r3, r4
   117d4:	movt	r2, #1
   117d8:	b	117fc <__assert_fail@plt+0x8c4>
   117dc:	mov	r0, r6
   117e0:	bl	13404 <__assert_fail@plt+0x24cc>
   117e4:	movw	r2, #23179	; 0x5a8b
   117e8:	mov	r3, r0
   117ec:	str	r4, [sp]
   117f0:	mov	r0, #0
   117f4:	mov	r1, r5
   117f8:	movt	r2, #1
   117fc:	bl	10e0c <error@plt>
   11800:	movw	r0, #28892	; 0x70dc
   11804:	movt	r0, #2
   11808:	ldr	r0, [r0]
   1180c:	bl	10d58 <_exit@plt>
   11810:	push	{r4, r5, fp, lr}
   11814:	add	fp, sp, #8
   11818:	cmp	r0, #0
   1181c:	beq	118b0 <__assert_fail@plt+0x978>
   11820:	mov	r1, #47	; 0x2f
   11824:	mov	r4, r0
   11828:	bl	10efc <strrchr@plt>
   1182c:	cmp	r0, #0
   11830:	mov	r5, r4
   11834:	addne	r5, r0, #1
   11838:	sub	r0, r5, r4
   1183c:	cmp	r0, #7
   11840:	blt	11894 <__assert_fail@plt+0x95c>
   11844:	movw	r1, #23242	; 0x5aca
   11848:	sub	r0, r5, #7
   1184c:	mov	r2, #7
   11850:	movt	r1, #1
   11854:	bl	10f20 <strncmp@plt>
   11858:	cmp	r0, #0
   1185c:	bne	11894 <__assert_fail@plt+0x95c>
   11860:	movw	r1, #23250	; 0x5ad2
   11864:	mov	r0, r5
   11868:	mov	r2, #3
   1186c:	movt	r1, #1
   11870:	bl	10f20 <strncmp@plt>
   11874:	cmp	r0, #0
   11878:	beq	11884 <__assert_fail@plt+0x94c>
   1187c:	mov	r4, r5
   11880:	b	11894 <__assert_fail@plt+0x95c>
   11884:	movw	r0, #28960	; 0x7120
   11888:	add	r4, r5, #3
   1188c:	movt	r0, #2
   11890:	str	r4, [r0]
   11894:	movw	r0, #28964	; 0x7124
   11898:	movt	r0, #2
   1189c:	str	r4, [r0]
   118a0:	movw	r0, #29000	; 0x7148
   118a4:	movt	r0, #2
   118a8:	str	r4, [r0]
   118ac:	pop	{r4, r5, fp, pc}
   118b0:	movw	r0, #28976	; 0x7130
   118b4:	mov	r1, #55	; 0x37
   118b8:	mov	r2, #1
   118bc:	movt	r0, #2
   118c0:	ldr	r3, [r0]
   118c4:	movw	r0, #23186	; 0x5a92
   118c8:	movt	r0, #1
   118cc:	bl	10dd0 <fwrite@plt>
   118d0:	bl	10f2c <abort@plt>
   118d4:	push	{r4, r5, r6, sl, fp, lr}
   118d8:	add	fp, sp, #16
   118dc:	mov	r4, r0
   118e0:	movw	r0, #29008	; 0x7150
   118e4:	movt	r0, #2
   118e8:	cmp	r4, #0
   118ec:	moveq	r4, r0
   118f0:	bl	10e90 <__errno_location@plt>
   118f4:	ldr	r6, [r0]
   118f8:	mov	r5, r0
   118fc:	mov	r0, r4
   11900:	mov	r1, #48	; 0x30
   11904:	bl	142c4 <__assert_fail@plt+0x338c>
   11908:	str	r6, [r5]
   1190c:	pop	{r4, r5, r6, sl, fp, pc}
   11910:	movw	r1, #29008	; 0x7150
   11914:	cmp	r0, #0
   11918:	movt	r1, #2
   1191c:	movne	r1, r0
   11920:	ldr	r0, [r1]
   11924:	bx	lr
   11928:	movw	r2, #29008	; 0x7150
   1192c:	cmp	r0, #0
   11930:	movt	r2, #2
   11934:	movne	r2, r0
   11938:	str	r1, [r2]
   1193c:	bx	lr
   11940:	movw	r3, #29008	; 0x7150
   11944:	cmp	r0, #0
   11948:	movt	r3, #2
   1194c:	movne	r3, r0
   11950:	ubfx	r0, r1, #5, #3
   11954:	and	r1, r1, #31
   11958:	add	r0, r3, r0, lsl #2
   1195c:	ldr	r3, [r0, #8]
   11960:	eor	r2, r2, r3, lsr r1
   11964:	and	r2, r2, #1
   11968:	eor	r2, r3, r2, lsl r1
   1196c:	str	r2, [r0, #8]
   11970:	mov	r0, #1
   11974:	and	r0, r0, r3, lsr r1
   11978:	bx	lr
   1197c:	movw	r2, #29008	; 0x7150
   11980:	cmp	r0, #0
   11984:	movt	r2, #2
   11988:	movne	r2, r0
   1198c:	ldr	r0, [r2, #4]
   11990:	str	r1, [r2, #4]
   11994:	bx	lr
   11998:	movw	r3, #29008	; 0x7150
   1199c:	cmp	r0, #0
   119a0:	movt	r3, #2
   119a4:	movne	r3, r0
   119a8:	cmp	r1, #0
   119ac:	mov	r0, #10
   119b0:	cmpne	r2, #0
   119b4:	str	r0, [r3]
   119b8:	bne	119c8 <__assert_fail@plt+0xa90>
   119bc:	push	{fp, lr}
   119c0:	mov	fp, sp
   119c4:	bl	10f2c <abort@plt>
   119c8:	str	r1, [r3, #40]	; 0x28
   119cc:	str	r2, [r3, #44]	; 0x2c
   119d0:	bx	lr
   119d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d8:	add	fp, sp, #28
   119dc:	sub	sp, sp, #20
   119e0:	mov	r7, r0
   119e4:	ldr	r0, [fp, #8]
   119e8:	movw	r5, #29008	; 0x7150
   119ec:	mov	r8, r3
   119f0:	mov	r9, r2
   119f4:	mov	sl, r1
   119f8:	movt	r5, #2
   119fc:	cmp	r0, #0
   11a00:	movne	r5, r0
   11a04:	bl	10e90 <__errno_location@plt>
   11a08:	mov	r4, r0
   11a0c:	ldm	r5, {r0, r1}
   11a10:	ldr	r2, [r5, #40]	; 0x28
   11a14:	ldr	r3, [r5, #44]	; 0x2c
   11a18:	add	r5, r5, #8
   11a1c:	ldr	r6, [r4]
   11a20:	stm	sp, {r0, r1, r5}
   11a24:	str	r2, [sp, #12]
   11a28:	str	r3, [sp, #16]
   11a2c:	mov	r0, r7
   11a30:	mov	r1, sl
   11a34:	mov	r2, r9
   11a38:	mov	r3, r8
   11a3c:	bl	11a4c <__assert_fail@plt+0xb14>
   11a40:	str	r6, [r4]
   11a44:	sub	sp, fp, #28
   11a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a50:	add	fp, sp, #28
   11a54:	sub	sp, sp, #156	; 0x9c
   11a58:	str	r0, [sp, #76]	; 0x4c
   11a5c:	ldr	r0, [fp, #12]
   11a60:	mov	r6, r1
   11a64:	str	r3, [sp, #84]	; 0x54
   11a68:	str	r2, [fp, #-84]	; 0xffffffac
   11a6c:	and	r1, r0, #4
   11a70:	str	r1, [sp, #24]
   11a74:	and	r1, r0, #1
   11a78:	str	r1, [sp, #28]
   11a7c:	ubfx	r8, r0, #1, #1
   11a80:	bl	10de8 <__ctype_get_mb_cur_max@plt>
   11a84:	str	r0, [sp, #32]
   11a88:	ldr	r0, [fp, #24]
   11a8c:	ldr	r7, [fp, #8]
   11a90:	mov	r1, #0
   11a94:	mov	r2, #0
   11a98:	mov	r4, #1
   11a9c:	str	r1, [sp, #52]	; 0x34
   11aa0:	str	r0, [sp, #72]	; 0x48
   11aa4:	ldr	r0, [fp, #20]
   11aa8:	str	r0, [sp, #68]	; 0x44
   11aac:	mov	r0, #0
   11ab0:	str	r0, [sp, #48]	; 0x30
   11ab4:	mov	r0, #0
   11ab8:	str	r0, [sp, #92]	; 0x5c
   11abc:	mov	r0, #0
   11ac0:	str	r0, [fp, #-76]	; 0xffffffb4
   11ac4:	mov	r0, #0
   11ac8:	cmp	r7, #10
   11acc:	bhi	12db4 <__assert_fail@plt+0x1e7c>
   11ad0:	add	r1, pc, #28
   11ad4:	mov	sl, r6
   11ad8:	ldr	r6, [sp, #76]	; 0x4c
   11adc:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ae0:	ldr	lr, [sp, #84]	; 0x54
   11ae4:	mov	r9, #0
   11ae8:	mov	r3, #1
   11aec:	mov	r5, #0
   11af0:	ldr	pc, [r1, r7, lsl #2]
   11af4:	andeq	r1, r1, r4, asr #23
   11af8:	andeq	r1, r1, r0, lsl #24
   11afc:	ldrdeq	r1, [r1], -r4
   11b00:			; <UNDEFINED> instruction: 0x00011bbc
   11b04:	strdeq	r1, [r1], -r4
   11b08:	andeq	r1, r1, r8, lsr #24
   11b0c:	andeq	r1, r1, r4, ror #23
   11b10:	andeq	r1, r1, r4, lsr lr
   11b14:	andeq	r1, r1, r0, lsr #22
   11b18:	andeq	r1, r1, r0, lsr #22
   11b1c:	andeq	r1, r1, r8, asr #27
   11b20:	mov	r9, r4
   11b24:	movw	r4, #23332	; 0x5b24
   11b28:	mov	r5, r8
   11b2c:	mov	r8, r2
   11b30:	mov	r0, #0
   11b34:	mov	r2, #5
   11b38:	movt	r4, #1
   11b3c:	mov	r1, r4
   11b40:	bl	10d94 <dcgettext@plt>
   11b44:	cmp	r0, r4
   11b48:	str	r0, [sp, #68]	; 0x44
   11b4c:	bne	11cdc <__assert_fail@plt+0xda4>
   11b50:	bl	152c8 <__assert_fail@plt+0x4390>
   11b54:	ldrb	r1, [r0]
   11b58:	and	r1, r1, #223	; 0xdf
   11b5c:	cmp	r1, #71	; 0x47
   11b60:	beq	11ca8 <__assert_fail@plt+0xd70>
   11b64:	cmp	r1, #85	; 0x55
   11b68:	bne	11cc0 <__assert_fail@plt+0xd88>
   11b6c:	ldrb	r1, [r0, #1]
   11b70:	and	r1, r1, #223	; 0xdf
   11b74:	cmp	r1, #84	; 0x54
   11b78:	bne	11cc0 <__assert_fail@plt+0xd88>
   11b7c:	ldrb	r1, [r0, #2]
   11b80:	and	r1, r1, #223	; 0xdf
   11b84:	cmp	r1, #70	; 0x46
   11b88:	bne	11cc0 <__assert_fail@plt+0xd88>
   11b8c:	ldrb	r1, [r0, #3]
   11b90:	cmp	r1, #45	; 0x2d
   11b94:	ldrbeq	r1, [r0, #4]
   11b98:	cmpeq	r1, #56	; 0x38
   11b9c:	bne	11cc0 <__assert_fail@plt+0xd88>
   11ba0:	ldrb	r0, [r0, #5]
   11ba4:	cmp	r0, #0
   11ba8:	movw	r0, #23336	; 0x5b28
   11bac:	movt	r0, #1
   11bb0:	str	r0, [sp, #68]	; 0x44
   11bb4:	bne	11cc0 <__assert_fail@plt+0xd88>
   11bb8:	b	11cdc <__assert_fail@plt+0xda4>
   11bbc:	mov	r0, #1
   11bc0:	b	11c00 <__assert_fail@plt+0xcc8>
   11bc4:	mov	r7, #0
   11bc8:	mov	r9, #0
   11bcc:	mov	r3, r0
   11bd0:	b	11ca0 <__assert_fail@plt+0xd68>
   11bd4:	tst	r8, #1
   11bd8:	bne	11c00 <__assert_fail@plt+0xcc8>
   11bdc:	mov	r3, r0
   11be0:	b	11c58 <__assert_fail@plt+0xd20>
   11be4:	mov	r0, #1
   11be8:	mov	r9, #0
   11bec:	mov	r7, #5
   11bf0:	b	11c3c <__assert_fail@plt+0xd04>
   11bf4:	mov	r3, #1
   11bf8:	tst	r8, #1
   11bfc:	beq	11c58 <__assert_fail@plt+0xd20>
   11c00:	mov	r1, #1
   11c04:	mov	r9, #0
   11c08:	mov	r7, #2
   11c0c:	mov	r3, r0
   11c10:	mov	r5, #1
   11c14:	str	r1, [fp, #-76]	; 0xffffffb4
   11c18:	movw	r1, #23334	; 0x5b26
   11c1c:	movt	r1, #1
   11c20:	str	r1, [sp, #92]	; 0x5c
   11c24:	b	11e34 <__assert_fail@plt+0xefc>
   11c28:	mov	r7, #5
   11c2c:	tst	r8, #1
   11c30:	beq	11c78 <__assert_fail@plt+0xd40>
   11c34:	mov	r0, #1
   11c38:	mov	r9, #0
   11c3c:	str	r0, [fp, #-76]	; 0xffffffb4
   11c40:	movw	r0, #23330	; 0x5b22
   11c44:	mov	r3, #1
   11c48:	mov	r5, #1
   11c4c:	movt	r0, #1
   11c50:	str	r0, [sp, #92]	; 0x5c
   11c54:	b	11e34 <__assert_fail@plt+0xefc>
   11c58:	cmp	sl, #0
   11c5c:	mov	r9, #1
   11c60:	mov	r7, #2
   11c64:	movne	r0, #39	; 0x27
   11c68:	strbne	r0, [r6]
   11c6c:	movw	r0, #23334	; 0x5b26
   11c70:	movt	r0, #1
   11c74:	b	11c94 <__assert_fail@plt+0xd5c>
   11c78:	cmp	sl, #0
   11c7c:	mov	r9, #1
   11c80:	mov	r3, #1
   11c84:	movne	r0, #34	; 0x22
   11c88:	strbne	r0, [r6]
   11c8c:	movw	r0, #23330	; 0x5b22
   11c90:	movt	r0, #1
   11c94:	str	r0, [sp, #92]	; 0x5c
   11c98:	mov	r0, #1
   11c9c:	str	r0, [fp, #-76]	; 0xffffffb4
   11ca0:	mov	r5, #0
   11ca4:	b	11e34 <__assert_fail@plt+0xefc>
   11ca8:	ldrb	r1, [r0, #1]
   11cac:	and	r1, r1, #223	; 0xdf
   11cb0:	cmp	r1, #66	; 0x42
   11cb4:	ldrbeq	r1, [r0, #2]
   11cb8:	cmpeq	r1, #49	; 0x31
   11cbc:	beq	12bdc <__assert_fail@plt+0x1ca4>
   11cc0:	movw	r0, #23334	; 0x5b26
   11cc4:	movw	r1, #23330	; 0x5b22
   11cc8:	cmp	r7, #9
   11ccc:	movt	r0, #1
   11cd0:	movt	r1, #1
   11cd4:	moveq	r0, r1
   11cd8:	str	r0, [sp, #68]	; 0x44
   11cdc:	movw	r4, #23334	; 0x5b26
   11ce0:	mov	r0, #0
   11ce4:	mov	r2, #5
   11ce8:	movt	r4, #1
   11cec:	mov	r1, r4
   11cf0:	bl	10d94 <dcgettext@plt>
   11cf4:	cmp	r0, r4
   11cf8:	str	r0, [sp, #72]	; 0x48
   11cfc:	beq	11d0c <__assert_fail@plt+0xdd4>
   11d00:	mov	r4, r9
   11d04:	mov	r2, r8
   11d08:	b	11dc4 <__assert_fail@plt+0xe8c>
   11d0c:	bl	152c8 <__assert_fail@plt+0x4390>
   11d10:	ldrb	r1, [r0]
   11d14:	mov	r4, r9
   11d18:	and	r1, r1, #223	; 0xdf
   11d1c:	cmp	r1, #71	; 0x47
   11d20:	beq	11d7c <__assert_fail@plt+0xe44>
   11d24:	cmp	r1, #85	; 0x55
   11d28:	mov	r2, r8
   11d2c:	bne	11da4 <__assert_fail@plt+0xe6c>
   11d30:	ldrb	r1, [r0, #1]
   11d34:	and	r1, r1, #223	; 0xdf
   11d38:	cmp	r1, #84	; 0x54
   11d3c:	bne	11da4 <__assert_fail@plt+0xe6c>
   11d40:	ldrb	r1, [r0, #2]
   11d44:	and	r1, r1, #223	; 0xdf
   11d48:	cmp	r1, #70	; 0x46
   11d4c:	ldrbeq	r1, [r0, #3]
   11d50:	cmpeq	r1, #45	; 0x2d
   11d54:	bne	11da4 <__assert_fail@plt+0xe6c>
   11d58:	ldrb	r1, [r0, #4]
   11d5c:	cmp	r1, #56	; 0x38
   11d60:	ldrbeq	r0, [r0, #5]
   11d64:	cmpeq	r0, #0
   11d68:	bne	11da4 <__assert_fail@plt+0xe6c>
   11d6c:	movw	r0, #23340	; 0x5b2c
   11d70:	movt	r0, #1
   11d74:	str	r0, [sp, #72]	; 0x48
   11d78:	b	11dc4 <__assert_fail@plt+0xe8c>
   11d7c:	ldrb	r1, [r0, #1]
   11d80:	mov	r2, r8
   11d84:	and	r1, r1, #223	; 0xdf
   11d88:	cmp	r1, #66	; 0x42
   11d8c:	bne	11da4 <__assert_fail@plt+0xe6c>
   11d90:	ldrb	r1, [r0, #2]
   11d94:	cmp	r1, #49	; 0x31
   11d98:	ldrbeq	r1, [r0, #3]
   11d9c:	cmpeq	r1, #56	; 0x38
   11da0:	beq	12c20 <__assert_fail@plt+0x1ce8>
   11da4:	movw	r0, #23334	; 0x5b26
   11da8:	cmp	r7, #9
   11dac:	movt	r0, #1
   11db0:	mov	r1, r0
   11db4:	movw	r0, #23330	; 0x5b22
   11db8:	movt	r0, #1
   11dbc:	moveq	r1, r0
   11dc0:	str	r1, [sp, #72]	; 0x48
   11dc4:	mov	r8, r5
   11dc8:	mov	r9, #0
   11dcc:	tst	r8, #1
   11dd0:	mov	r5, r8
   11dd4:	str	r2, [fp, #-48]	; 0xffffffd0
   11dd8:	bne	11e10 <__assert_fail@plt+0xed8>
   11ddc:	ldr	r0, [sp, #68]	; 0x44
   11de0:	ldrb	r0, [r0]
   11de4:	cmp	r0, #0
   11de8:	beq	11e10 <__assert_fail@plt+0xed8>
   11dec:	ldr	r1, [sp, #68]	; 0x44
   11df0:	mov	r9, #0
   11df4:	add	r1, r1, #1
   11df8:	cmp	r9, sl
   11dfc:	strbcc	r0, [r6, r9]
   11e00:	ldrb	r0, [r1, r9]
   11e04:	add	r9, r9, #1
   11e08:	cmp	r0, #0
   11e0c:	bne	11df8 <__assert_fail@plt+0xec0>
   11e10:	ldr	r8, [sp, #72]	; 0x48
   11e14:	mov	r0, r8
   11e18:	bl	10e78 <strlen@plt>
   11e1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e20:	ldr	lr, [sp, #84]	; 0x54
   11e24:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11e28:	str	r0, [fp, #-76]	; 0xffffffb4
   11e2c:	str	r8, [sp, #92]	; 0x5c
   11e30:	mov	r3, #1
   11e34:	ldr	r0, [fp, #16]
   11e38:	str	r7, [fp, #-64]	; 0xffffffc0
   11e3c:	str	r5, [fp, #-72]	; 0xffffffb8
   11e40:	str	r3, [sp, #80]	; 0x50
   11e44:	cmp	r0, #0
   11e48:	movwne	r0, #1
   11e4c:	and	r0, r0, r5
   11e50:	str	r0, [fp, #-88]	; 0xffffffa8
   11e54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11e58:	cmp	r0, #0
   11e5c:	movwne	r0, #1
   11e60:	subs	r7, r7, #2
   11e64:	and	r1, r0, r5
   11e68:	str	r7, [fp, #-80]	; 0xffffffb0
   11e6c:	and	r1, r3, r1
   11e70:	str	r1, [sp, #40]	; 0x28
   11e74:	clz	r1, r7
   11e78:	lsr	r1, r1, #5
   11e7c:	and	r1, r1, r5
   11e80:	eor	r5, r5, #1
   11e84:	str	r1, [sp, #36]	; 0x24
   11e88:	mov	r1, r7
   11e8c:	str	r5, [sp, #88]	; 0x58
   11e90:	mov	r7, #0
   11e94:	movwne	r1, #1
   11e98:	orr	r5, r1, r5
   11e9c:	and	r1, r1, r3
   11ea0:	and	r0, r0, r1
   11ea4:	str	r5, [sp, #60]	; 0x3c
   11ea8:	str	r1, [fp, #-68]	; 0xffffffbc
   11eac:	str	r0, [fp, #-60]	; 0xffffffc4
   11eb0:	eor	r0, r3, #1
   11eb4:	str	r0, [sp, #44]	; 0x2c
   11eb8:	cmn	lr, #1
   11ebc:	beq	11ecc <__assert_fail@plt+0xf94>
   11ec0:	cmp	r7, lr
   11ec4:	bne	11ed8 <__assert_fail@plt+0xfa0>
   11ec8:	b	12b50 <__assert_fail@plt+0x1c18>
   11ecc:	ldrb	r0, [ip, r7]
   11ed0:	cmp	r0, #0
   11ed4:	beq	12b58 <__assert_fail@plt+0x1c20>
   11ed8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11edc:	mov	r8, #0
   11ee0:	str	r4, [fp, #-52]	; 0xffffffcc
   11ee4:	str	r2, [fp, #-48]	; 0xffffffd0
   11ee8:	cmp	r0, #0
   11eec:	beq	11f20 <__assert_fail@plt+0xfe8>
   11ef0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11ef4:	add	r4, r7, r0
   11ef8:	cmp	r0, #2
   11efc:	bcc	11f18 <__assert_fail@plt+0xfe0>
   11f00:	cmn	lr, #1
   11f04:	bne	11f18 <__assert_fail@plt+0xfe0>
   11f08:	mov	r0, ip
   11f0c:	bl	10e78 <strlen@plt>
   11f10:	ldr	ip, [fp, #-84]	; 0xffffffac
   11f14:	mov	lr, r0
   11f18:	cmp	r4, lr
   11f1c:	bls	11f38 <__assert_fail@plt+0x1000>
   11f20:	mov	r0, #0
   11f24:	str	r0, [fp, #-56]	; 0xffffffc8
   11f28:	ldrb	r5, [ip, r7]
   11f2c:	cmp	r5, #126	; 0x7e
   11f30:	bls	11f88 <__assert_fail@plt+0x1050>
   11f34:	b	12390 <__assert_fail@plt+0x1458>
   11f38:	ldr	r1, [sp, #92]	; 0x5c
   11f3c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11f40:	add	r0, ip, r7
   11f44:	mov	r4, lr
   11f48:	bl	10d88 <memcmp@plt>
   11f4c:	ldr	r2, [sp, #88]	; 0x58
   11f50:	cmp	r0, #0
   11f54:	mov	r1, r0
   11f58:	movwne	r1, #1
   11f5c:	orr	r1, r1, r2
   11f60:	tst	r1, #1
   11f64:	beq	12c64 <__assert_fail@plt+0x1d2c>
   11f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   11f6c:	clz	r0, r0
   11f70:	mov	lr, r4
   11f74:	lsr	r0, r0, #5
   11f78:	str	r0, [fp, #-56]	; 0xffffffc8
   11f7c:	ldrb	r5, [ip, r7]
   11f80:	cmp	r5, #126	; 0x7e
   11f84:	bhi	12390 <__assert_fail@plt+0x1458>
   11f88:	add	r3, pc, #16
   11f8c:	mov	r4, #1
   11f90:	mov	r2, #110	; 0x6e
   11f94:	mov	r0, #97	; 0x61
   11f98:	mov	r1, #0
   11f9c:	ldr	pc, [r3, r5, lsl #2]
   11fa0:	andeq	r2, r1, r0, ror r2
   11fa4:	muleq	r1, r0, r3
   11fa8:	muleq	r1, r0, r3
   11fac:	muleq	r1, r0, r3
   11fb0:	muleq	r1, r0, r3
   11fb4:	muleq	r1, r0, r3
   11fb8:	muleq	r1, r0, r3
   11fbc:	andeq	r2, r1, ip, ror #8
   11fc0:	andeq	r2, r1, r0, asr r2
   11fc4:	andeq	r2, r1, r8, lsr r2
   11fc8:	andeq	r2, r1, ip, asr r2
   11fcc:	andeq	r2, r1, ip, ror #5
   11fd0:	andeq	r2, r1, r0, lsr r2
   11fd4:	andeq	r2, r1, r8, asr r2
   11fd8:	muleq	r1, r0, r3
   11fdc:	muleq	r1, r0, r3
   11fe0:	muleq	r1, r0, r3
   11fe4:	muleq	r1, r0, r3
   11fe8:	muleq	r1, r0, r3
   11fec:	muleq	r1, r0, r3
   11ff0:	muleq	r1, r0, r3
   11ff4:	muleq	r1, r0, r3
   11ff8:	muleq	r1, r0, r3
   11ffc:	muleq	r1, r0, r3
   12000:	muleq	r1, r0, r3
   12004:	muleq	r1, r0, r3
   12008:	muleq	r1, r0, r3
   1200c:	muleq	r1, r0, r3
   12010:	muleq	r1, r0, r3
   12014:	muleq	r1, r0, r3
   12018:	muleq	r1, r0, r3
   1201c:	muleq	r1, r0, r3
   12020:	andeq	r2, r1, r8, ror #7
   12024:	andeq	r2, r1, ip, ror #7
   12028:	andeq	r2, r1, ip, ror #7
   1202c:			; <UNDEFINED> instruction: 0x000121bc
   12030:	andeq	r2, r1, ip, ror #7
   12034:	muleq	r1, ip, r1
   12038:	andeq	r2, r1, ip, ror #7
   1203c:	strdeq	r2, [r1], -r4
   12040:	andeq	r2, r1, ip, ror #7
   12044:	andeq	r2, r1, ip, ror #7
   12048:	andeq	r2, r1, ip, ror #7
   1204c:	muleq	r1, ip, r1
   12050:	muleq	r1, ip, r1
   12054:	muleq	r1, ip, r1
   12058:	muleq	r1, ip, r1
   1205c:	muleq	r1, ip, r1
   12060:	muleq	r1, ip, r1
   12064:	muleq	r1, ip, r1
   12068:	muleq	r1, ip, r1
   1206c:	muleq	r1, ip, r1
   12070:	muleq	r1, ip, r1
   12074:	muleq	r1, ip, r1
   12078:	muleq	r1, ip, r1
   1207c:	muleq	r1, ip, r1
   12080:	muleq	r1, ip, r1
   12084:	muleq	r1, ip, r1
   12088:	muleq	r1, ip, r1
   1208c:	andeq	r2, r1, ip, ror #7
   12090:	andeq	r2, r1, ip, ror #7
   12094:	andeq	r2, r1, ip, ror #7
   12098:	andeq	r2, r1, ip, ror #7
   1209c:			; <UNDEFINED> instruction: 0x000122b0
   120a0:	muleq	r1, r0, r3
   120a4:	muleq	r1, ip, r1
   120a8:	muleq	r1, ip, r1
   120ac:	muleq	r1, ip, r1
   120b0:	muleq	r1, ip, r1
   120b4:	muleq	r1, ip, r1
   120b8:	muleq	r1, ip, r1
   120bc:	muleq	r1, ip, r1
   120c0:	muleq	r1, ip, r1
   120c4:	muleq	r1, ip, r1
   120c8:	muleq	r1, ip, r1
   120cc:	muleq	r1, ip, r1
   120d0:	muleq	r1, ip, r1
   120d4:	muleq	r1, ip, r1
   120d8:	muleq	r1, ip, r1
   120dc:	muleq	r1, ip, r1
   120e0:	muleq	r1, ip, r1
   120e4:	muleq	r1, ip, r1
   120e8:	muleq	r1, ip, r1
   120ec:	muleq	r1, ip, r1
   120f0:	muleq	r1, ip, r1
   120f4:	muleq	r1, ip, r1
   120f8:	muleq	r1, ip, r1
   120fc:	muleq	r1, ip, r1
   12100:	muleq	r1, ip, r1
   12104:	muleq	r1, ip, r1
   12108:	muleq	r1, ip, r1
   1210c:	andeq	r2, r1, ip, ror #7
   12110:	strdeq	r2, [r1], -ip
   12114:	muleq	r1, ip, r1
   12118:	andeq	r2, r1, ip, ror #7
   1211c:	muleq	r1, ip, r1
   12120:	andeq	r2, r1, ip, ror #7
   12124:	muleq	r1, ip, r1
   12128:	muleq	r1, ip, r1
   1212c:	muleq	r1, ip, r1
   12130:	muleq	r1, ip, r1
   12134:	muleq	r1, ip, r1
   12138:	muleq	r1, ip, r1
   1213c:	muleq	r1, ip, r1
   12140:	muleq	r1, ip, r1
   12144:	muleq	r1, ip, r1
   12148:	muleq	r1, ip, r1
   1214c:	muleq	r1, ip, r1
   12150:	muleq	r1, ip, r1
   12154:	muleq	r1, ip, r1
   12158:	muleq	r1, ip, r1
   1215c:	muleq	r1, ip, r1
   12160:	muleq	r1, ip, r1
   12164:	muleq	r1, ip, r1
   12168:	muleq	r1, ip, r1
   1216c:	muleq	r1, ip, r1
   12170:	muleq	r1, ip, r1
   12174:	muleq	r1, ip, r1
   12178:	muleq	r1, ip, r1
   1217c:	muleq	r1, ip, r1
   12180:	muleq	r1, ip, r1
   12184:	muleq	r1, ip, r1
   12188:	muleq	r1, ip, r1
   1218c:	ldrdeq	r2, [r1], -ip
   12190:	andeq	r2, r1, ip, ror #7
   12194:	ldrdeq	r2, [r1], -ip
   12198:			; <UNDEFINED> instruction: 0x000121bc
   1219c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121a0:	cmp	r0, #0
   121a4:	beq	12480 <__assert_fail@plt+0x1548>
   121a8:	ldr	r0, [fp, #16]
   121ac:	cmp	r0, #0
   121b0:	mov	r0, r5
   121b4:	bne	12490 <__assert_fail@plt+0x1558>
   121b8:	b	124b0 <__assert_fail@plt+0x1578>
   121bc:	mov	r4, #0
   121c0:	cmp	r7, #0
   121c4:	beq	123e8 <__assert_fail@plt+0x14b0>
   121c8:	mov	r8, #0
   121cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121d0:	cmp	r0, #0
   121d4:	bne	121a8 <__assert_fail@plt+0x1270>
   121d8:	b	12480 <__assert_fail@plt+0x1548>
   121dc:	mov	r4, #0
   121e0:	cmn	lr, #1
   121e4:	beq	123c0 <__assert_fail@plt+0x1488>
   121e8:	cmp	r7, #0
   121ec:	bne	121c8 <__assert_fail@plt+0x1290>
   121f0:	cmp	lr, #1
   121f4:	beq	123e8 <__assert_fail@plt+0x14b0>
   121f8:	b	121c8 <__assert_fail@plt+0x1290>
   121fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12200:	cmp	r0, #2
   12204:	bne	12418 <__assert_fail@plt+0x14e0>
   12208:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1220c:	tst	r0, #1
   12210:	bne	12c78 <__assert_fail@plt+0x1d40>
   12214:	mov	r8, #0
   12218:	mov	r0, #92	; 0x5c
   1221c:	mov	r4, #0
   12220:	cmp	r8, #0
   12224:	beq	12438 <__assert_fail@plt+0x1500>
   12228:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1222c:	b	1252c <__assert_fail@plt+0x15f4>
   12230:	mov	r0, #102	; 0x66
   12234:	b	1246c <__assert_fail@plt+0x1534>
   12238:	mov	r2, #116	; 0x74
   1223c:	ldr	r0, [sp, #60]	; 0x3c
   12240:	tst	r0, #1
   12244:	mov	r0, r2
   12248:	bne	1246c <__assert_fail@plt+0x1534>
   1224c:	b	12c78 <__assert_fail@plt+0x1d40>
   12250:	mov	r0, #98	; 0x62
   12254:	b	1246c <__assert_fail@plt+0x1534>
   12258:	mov	r2, #114	; 0x72
   1225c:	ldr	r0, [sp, #60]	; 0x3c
   12260:	tst	r0, #1
   12264:	mov	r0, r2
   12268:	bne	1246c <__assert_fail@plt+0x1534>
   1226c:	b	12c78 <__assert_fail@plt+0x1d40>
   12270:	ldr	r0, [sp, #80]	; 0x50
   12274:	tst	r0, #1
   12278:	beq	12554 <__assert_fail@plt+0x161c>
   1227c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12280:	tst	r0, #1
   12284:	bne	12da0 <__assert_fail@plt+0x1e68>
   12288:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1228c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12290:	cmp	r0, #2
   12294:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12298:	movwne	r0, #1
   1229c:	orr	r0, r0, r2
   122a0:	tst	r0, #1
   122a4:	beq	1284c <__assert_fail@plt+0x1914>
   122a8:	mov	r0, r9
   122ac:	b	12880 <__assert_fail@plt+0x1948>
   122b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122b4:	mov	r8, #0
   122b8:	mov	r5, #63	; 0x3f
   122bc:	cmp	r0, #5
   122c0:	beq	12708 <__assert_fail@plt+0x17d0>
   122c4:	cmp	r0, #2
   122c8:	bne	127b8 <__assert_fail@plt+0x1880>
   122cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   122d0:	tst	r0, #1
   122d4:	bne	12c78 <__assert_fail@plt+0x1d40>
   122d8:	mov	r4, #0
   122dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122e0:	cmp	r0, #0
   122e4:	bne	121a8 <__assert_fail@plt+0x1270>
   122e8:	b	12480 <__assert_fail@plt+0x1548>
   122ec:	mov	r0, #118	; 0x76
   122f0:	b	1246c <__assert_fail@plt+0x1534>
   122f4:	mov	r0, #1
   122f8:	mov	r5, #39	; 0x27
   122fc:	str	r0, [sp, #52]	; 0x34
   12300:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12304:	cmp	r0, #2
   12308:	bne	1237c <__assert_fail@plt+0x1444>
   1230c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12310:	tst	r0, #1
   12314:	bne	12c78 <__assert_fail@plt+0x1d40>
   12318:	ldr	r2, [sp, #48]	; 0x30
   1231c:	clz	r1, sl
   12320:	mov	r8, #0
   12324:	lsr	r1, r1, #5
   12328:	cmp	r2, #0
   1232c:	mov	r0, r2
   12330:	movwne	r0, #1
   12334:	orrs	r0, r0, r1
   12338:	moveq	r2, sl
   1233c:	moveq	sl, r0
   12340:	cmp	r9, sl
   12344:	str	r2, [sp, #48]	; 0x30
   12348:	movcc	r0, #39	; 0x27
   1234c:	strbcc	r0, [r6, r9]
   12350:	add	r0, r9, #1
   12354:	cmp	r0, sl
   12358:	movcc	r1, #92	; 0x5c
   1235c:	strbcc	r1, [r6, r0]
   12360:	add	r0, r9, #2
   12364:	add	r9, r9, #3
   12368:	cmp	r0, sl
   1236c:	movcc	r1, #39	; 0x27
   12370:	strbcc	r1, [r6, r0]
   12374:	mov	r0, #0
   12378:	str	r0, [fp, #-48]	; 0xffffffd0
   1237c:	mov	r4, #1
   12380:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12384:	cmp	r0, #0
   12388:	bne	121a8 <__assert_fail@plt+0x1270>
   1238c:	b	12480 <__assert_fail@plt+0x1548>
   12390:	ldr	r0, [sp, #32]
   12394:	cmp	r0, #1
   12398:	bne	12584 <__assert_fail@plt+0x164c>
   1239c:	str	lr, [sp, #84]	; 0x54
   123a0:	bl	10e60 <__ctype_b_loc@plt>
   123a4:	ldr	r0, [r0]
   123a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   123ac:	mov	r1, #1
   123b0:	add	r0, r0, r5, lsl #1
   123b4:	ldrb	r0, [r0, #1]
   123b8:	ubfx	r4, r0, #6, #1
   123bc:	b	1297c <__assert_fail@plt+0x1a44>
   123c0:	cmp	r7, #0
   123c4:	ldrbeq	r0, [ip, #1]
   123c8:	cmpeq	r0, #0
   123cc:	beq	123e8 <__assert_fail@plt+0x14b0>
   123d0:	mvn	lr, #0
   123d4:	mov	r8, #0
   123d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   123dc:	cmp	r0, #0
   123e0:	bne	121a8 <__assert_fail@plt+0x1270>
   123e4:	b	12480 <__assert_fail@plt+0x1548>
   123e8:	mov	r1, #1
   123ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   123f0:	cmp	r0, #2
   123f4:	bne	12404 <__assert_fail@plt+0x14cc>
   123f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   123fc:	tst	r0, #1
   12400:	bne	12c78 <__assert_fail@plt+0x1d40>
   12404:	mov	r4, r1
   12408:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1240c:	cmp	r0, #0
   12410:	bne	121a8 <__assert_fail@plt+0x1270>
   12414:	b	12480 <__assert_fail@plt+0x1548>
   12418:	ldr	r1, [sp, #40]	; 0x28
   1241c:	mov	r8, #0
   12420:	mov	r0, #92	; 0x5c
   12424:	cmp	r1, #0
   12428:	beq	1246c <__assert_fail@plt+0x1534>
   1242c:	mov	r4, #0
   12430:	cmp	r8, #0
   12434:	bne	12228 <__assert_fail@plt+0x12f0>
   12438:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1243c:	tst	r2, #1
   12440:	beq	1252c <__assert_fail@plt+0x15f4>
   12444:	cmp	r9, sl
   12448:	movcc	r1, #39	; 0x27
   1244c:	strbcc	r1, [r6, r9]
   12450:	add	r1, r9, #1
   12454:	add	r9, r9, #2
   12458:	cmp	r1, sl
   1245c:	movcc	r2, #39	; 0x27
   12460:	strbcc	r2, [r6, r1]
   12464:	mov	r2, #0
   12468:	b	1252c <__assert_fail@plt+0x15f4>
   1246c:	ldr	r1, [sp, #80]	; 0x50
   12470:	mov	r4, #0
   12474:	mov	r8, #0
   12478:	tst	r1, #1
   1247c:	bne	124bc <__assert_fail@plt+0x1584>
   12480:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12484:	cmp	r0, #0
   12488:	mov	r0, r5
   1248c:	beq	124b0 <__assert_fail@plt+0x1578>
   12490:	ldr	r1, [fp, #16]
   12494:	ubfx	r0, r5, #5, #3
   12498:	mov	r2, #1
   1249c:	ldr	r0, [r1, r0, lsl #2]
   124a0:	and	r1, r5, #31
   124a4:	tst	r0, r2, lsl r1
   124a8:	mov	r0, r5
   124ac:	bne	124bc <__assert_fail@plt+0x1584>
   124b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   124b4:	cmp	r1, #0
   124b8:	beq	12914 <__assert_fail@plt+0x19dc>
   124bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   124c0:	tst	r1, #1
   124c4:	bne	12c58 <__assert_fail@plt+0x1d20>
   124c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   124cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   124d0:	cmp	r1, #2
   124d4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   124d8:	movwne	r1, #1
   124dc:	orr	r1, r1, r2
   124e0:	tst	r1, #1
   124e4:	bne	1251c <__assert_fail@plt+0x15e4>
   124e8:	cmp	r9, sl
   124ec:	movcc	r1, #39	; 0x27
   124f0:	strbcc	r1, [r6, r9]
   124f4:	add	r1, r9, #1
   124f8:	cmp	r1, sl
   124fc:	movcc	r2, #36	; 0x24
   12500:	strbcc	r2, [r6, r1]
   12504:	add	r1, r9, #2
   12508:	add	r9, r9, #3
   1250c:	cmp	r1, sl
   12510:	movcc	r2, #39	; 0x27
   12514:	strbcc	r2, [r6, r1]
   12518:	mov	r2, #1
   1251c:	cmp	r9, sl
   12520:	movcc	r1, #92	; 0x5c
   12524:	strbcc	r1, [r6, r9]
   12528:	add	r9, r9, #1
   1252c:	cmp	r9, sl
   12530:	add	r7, r7, #1
   12534:	strbcc	r0, [r6, r9]
   12538:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1253c:	add	r9, r9, #1
   12540:	and	r0, r0, r4
   12544:	mov	r4, r0
   12548:	cmn	lr, #1
   1254c:	bne	11ec0 <__assert_fail@plt+0xf88>
   12550:	b	11ecc <__assert_fail@plt+0xf94>
   12554:	ldr	r0, [sp, #28]
   12558:	mov	r4, #0
   1255c:	mov	r8, #0
   12560:	mov	r5, #0
   12564:	cmp	r0, #0
   12568:	beq	12480 <__assert_fail@plt+0x1548>
   1256c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   12570:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12574:	add	r7, r7, #1
   12578:	cmn	lr, #1
   1257c:	bne	11ec0 <__assert_fail@plt+0xf88>
   12580:	b	11ecc <__assert_fail@plt+0xf94>
   12584:	mov	r0, #0
   12588:	cmn	lr, #1
   1258c:	str	r0, [fp, #-36]	; 0xffffffdc
   12590:	str	r0, [fp, #-40]	; 0xffffffd8
   12594:	bne	125a8 <__assert_fail@plt+0x1670>
   12598:	mov	r0, ip
   1259c:	bl	10e78 <strlen@plt>
   125a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   125a4:	mov	lr, r0
   125a8:	ldr	r0, [sp, #36]	; 0x24
   125ac:	str	sl, [sp, #56]	; 0x38
   125b0:	str	lr, [sp, #84]	; 0x54
   125b4:	cmp	r0, #0
   125b8:	beq	127d0 <__assert_fail@plt+0x1898>
   125bc:	add	r0, ip, r7
   125c0:	mov	r4, #1
   125c4:	mov	r6, #0
   125c8:	sub	sl, fp, #40	; 0x28
   125cc:	str	r0, [sp, #20]
   125d0:	str	r6, [sp, #64]	; 0x40
   125d4:	add	r6, r6, r7
   125d8:	sub	r0, fp, #44	; 0x2c
   125dc:	mov	r3, sl
   125e0:	add	r1, ip, r6
   125e4:	sub	r2, lr, r6
   125e8:	bl	15300 <__assert_fail@plt+0x43c8>
   125ec:	cmn	r0, #2
   125f0:	beq	1292c <__assert_fail@plt+0x19f4>
   125f4:	ldr	sl, [sp, #56]	; 0x38
   125f8:	cmn	r0, #1
   125fc:	beq	12920 <__assert_fail@plt+0x19e8>
   12600:	cmp	r0, #0
   12604:	beq	12924 <__assert_fail@plt+0x19ec>
   12608:	cmp	r0, #2
   1260c:	bcc	126cc <__assert_fail@plt+0x1794>
   12610:	ldr	r1, [sp, #64]	; 0x40
   12614:	ldr	r2, [sp, #20]
   12618:	add	r1, r2, r1
   1261c:	mov	r2, #1
   12620:	ldrb	r3, [r1, r2]
   12624:	sub	r3, r3, #91	; 0x5b
   12628:	cmp	r3, #33	; 0x21
   1262c:	bhi	126c0 <__assert_fail@plt+0x1788>
   12630:	add	r6, pc, #0
   12634:	ldr	pc, [r6, r3, lsl #2]
   12638:	andeq	r2, r1, r4, lsl #25
   1263c:	andeq	r2, r1, r4, lsl #25
   12640:	andeq	r2, r1, r0, asr #13
   12644:	andeq	r2, r1, r4, lsl #25
   12648:	andeq	r2, r1, r0, asr #13
   1264c:	andeq	r2, r1, r4, lsl #25
   12650:	andeq	r2, r1, r0, asr #13
   12654:	andeq	r2, r1, r0, asr #13
   12658:	andeq	r2, r1, r0, asr #13
   1265c:	andeq	r2, r1, r0, asr #13
   12660:	andeq	r2, r1, r0, asr #13
   12664:	andeq	r2, r1, r0, asr #13
   12668:	andeq	r2, r1, r0, asr #13
   1266c:	andeq	r2, r1, r0, asr #13
   12670:	andeq	r2, r1, r0, asr #13
   12674:	andeq	r2, r1, r0, asr #13
   12678:	andeq	r2, r1, r0, asr #13
   1267c:	andeq	r2, r1, r0, asr #13
   12680:	andeq	r2, r1, r0, asr #13
   12684:	andeq	r2, r1, r0, asr #13
   12688:	andeq	r2, r1, r0, asr #13
   1268c:	andeq	r2, r1, r0, asr #13
   12690:	andeq	r2, r1, r0, asr #13
   12694:	andeq	r2, r1, r0, asr #13
   12698:	andeq	r2, r1, r0, asr #13
   1269c:	andeq	r2, r1, r0, asr #13
   126a0:	andeq	r2, r1, r0, asr #13
   126a4:	andeq	r2, r1, r0, asr #13
   126a8:	andeq	r2, r1, r0, asr #13
   126ac:	andeq	r2, r1, r0, asr #13
   126b0:	andeq	r2, r1, r0, asr #13
   126b4:	andeq	r2, r1, r0, asr #13
   126b8:	andeq	r2, r1, r0, asr #13
   126bc:	andeq	r2, r1, r4, lsl #25
   126c0:	add	r2, r2, #1
   126c4:	cmp	r2, r0
   126c8:	bcc	12620 <__assert_fail@plt+0x16e8>
   126cc:	ldr	r6, [sp, #64]	; 0x40
   126d0:	add	r6, r0, r6
   126d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   126d8:	bl	10dc4 <iswprint@plt>
   126dc:	cmp	r0, #0
   126e0:	sub	sl, fp, #40	; 0x28
   126e4:	movwne	r0, #1
   126e8:	and	r4, r4, r0
   126ec:	mov	r0, sl
   126f0:	bl	10d7c <mbsinit@plt>
   126f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   126f8:	ldr	lr, [sp, #84]	; 0x54
   126fc:	cmp	r0, #0
   12700:	beq	125d0 <__assert_fail@plt+0x1698>
   12704:	b	12970 <__assert_fail@plt+0x1a38>
   12708:	ldr	r0, [sp, #24]
   1270c:	cmp	r0, #0
   12710:	beq	127b8 <__assert_fail@plt+0x1880>
   12714:	add	r0, r7, #2
   12718:	cmp	r0, lr
   1271c:	bcs	127b8 <__assert_fail@plt+0x1880>
   12720:	add	r1, ip, r7
   12724:	ldrb	r1, [r1, #1]
   12728:	cmp	r1, #63	; 0x3f
   1272c:	bne	127b8 <__assert_fail@plt+0x1880>
   12730:	ldrb	r5, [ip, r0]
   12734:	sub	r1, r5, #33	; 0x21
   12738:	cmp	r1, #29
   1273c:	bhi	127b8 <__assert_fail@plt+0x1880>
   12740:	movw	r3, #20929	; 0x51c1
   12744:	mov	r2, #1
   12748:	movt	r3, #14336	; 0x3800
   1274c:	tst	r3, r2, lsl r1
   12750:	beq	127b8 <__assert_fail@plt+0x1880>
   12754:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12758:	tst	r1, #1
   1275c:	bne	12da8 <__assert_fail@plt+0x1e70>
   12760:	cmp	r9, sl
   12764:	mov	r7, r0
   12768:	mov	r4, #0
   1276c:	movcc	r1, #63	; 0x3f
   12770:	strbcc	r1, [r6, r9]
   12774:	add	r1, r9, #1
   12778:	cmp	r1, sl
   1277c:	movcc	r2, #34	; 0x22
   12780:	strbcc	r2, [r6, r1]
   12784:	add	r1, r9, #2
   12788:	cmp	r1, sl
   1278c:	movcc	r2, #34	; 0x22
   12790:	strbcc	r2, [r6, r1]
   12794:	add	r1, r9, #3
   12798:	add	r9, r9, #4
   1279c:	cmp	r1, sl
   127a0:	movcc	r2, #63	; 0x3f
   127a4:	strbcc	r2, [r6, r1]
   127a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   127ac:	cmp	r0, #0
   127b0:	bne	121a8 <__assert_fail@plt+0x1270>
   127b4:	b	12480 <__assert_fail@plt+0x1548>
   127b8:	mov	r5, #63	; 0x3f
   127bc:	mov	r4, #0
   127c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   127c4:	cmp	r0, #0
   127c8:	bne	121a8 <__assert_fail@plt+0x1270>
   127cc:	b	12480 <__assert_fail@plt+0x1548>
   127d0:	mov	r4, #1
   127d4:	mov	r6, #0
   127d8:	sub	sl, fp, #40	; 0x28
   127dc:	str	r6, [sp, #64]	; 0x40
   127e0:	add	r6, r6, r7
   127e4:	sub	r0, fp, #44	; 0x2c
   127e8:	mov	r3, sl
   127ec:	add	r1, ip, r6
   127f0:	sub	r2, lr, r6
   127f4:	bl	15300 <__assert_fail@plt+0x43c8>
   127f8:	cmn	r0, #2
   127fc:	beq	1292c <__assert_fail@plt+0x19f4>
   12800:	cmn	r0, #1
   12804:	beq	12920 <__assert_fail@plt+0x19e8>
   12808:	ldr	r6, [sp, #64]	; 0x40
   1280c:	cmp	r0, #0
   12810:	beq	1296c <__assert_fail@plt+0x1a34>
   12814:	add	r6, r0, r6
   12818:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1281c:	bl	10dc4 <iswprint@plt>
   12820:	cmp	r0, #0
   12824:	sub	sl, fp, #40	; 0x28
   12828:	movwne	r0, #1
   1282c:	and	r4, r4, r0
   12830:	mov	r0, sl
   12834:	bl	10d7c <mbsinit@plt>
   12838:	ldr	ip, [fp, #-84]	; 0xffffffac
   1283c:	ldr	lr, [sp, #84]	; 0x54
   12840:	cmp	r0, #0
   12844:	beq	127dc <__assert_fail@plt+0x18a4>
   12848:	b	12970 <__assert_fail@plt+0x1a38>
   1284c:	cmp	r9, sl
   12850:	mov	r2, #1
   12854:	movcc	r0, #39	; 0x27
   12858:	strbcc	r0, [r6, r9]
   1285c:	add	r0, r9, #1
   12860:	cmp	r0, sl
   12864:	movcc	r1, #36	; 0x24
   12868:	strbcc	r1, [r6, r0]
   1286c:	add	r0, r9, #2
   12870:	cmp	r0, sl
   12874:	movcc	r1, #39	; 0x27
   12878:	strbcc	r1, [r6, r0]
   1287c:	add	r0, r9, #3
   12880:	cmp	r0, sl
   12884:	add	r9, r0, #1
   12888:	str	r2, [fp, #-48]	; 0xffffffd0
   1288c:	movcc	r1, #92	; 0x5c
   12890:	strbcc	r1, [r6, r0]
   12894:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12898:	cmp	r1, #2
   1289c:	beq	128fc <__assert_fail@plt+0x19c4>
   128a0:	add	r1, r7, #1
   128a4:	mov	r4, #0
   128a8:	mov	r8, #1
   128ac:	mov	r5, #48	; 0x30
   128b0:	cmp	r1, lr
   128b4:	bcs	1219c <__assert_fail@plt+0x1264>
   128b8:	ldrb	r1, [ip, r1]
   128bc:	sub	r1, r1, #48	; 0x30
   128c0:	uxtb	r1, r1
   128c4:	cmp	r1, #9
   128c8:	bhi	1219c <__assert_fail@plt+0x1264>
   128cc:	cmp	r9, sl
   128d0:	movcc	r1, #48	; 0x30
   128d4:	strbcc	r1, [r6, r9]
   128d8:	add	r1, r0, #2
   128dc:	add	r9, r0, #3
   128e0:	cmp	r1, sl
   128e4:	movcc	r2, #48	; 0x30
   128e8:	strbcc	r2, [r6, r1]
   128ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   128f0:	cmp	r0, #0
   128f4:	bne	121a8 <__assert_fail@plt+0x1270>
   128f8:	b	12480 <__assert_fail@plt+0x1548>
   128fc:	mov	r0, #48	; 0x30
   12900:	mov	r8, #1
   12904:	mov	r4, #0
   12908:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1290c:	cmp	r1, #0
   12910:	bne	124bc <__assert_fail@plt+0x1584>
   12914:	cmp	r8, #0
   12918:	beq	12438 <__assert_fail@plt+0x1500>
   1291c:	b	12228 <__assert_fail@plt+0x12f0>
   12920:	mov	r4, #0
   12924:	ldr	ip, [fp, #-84]	; 0xffffffac
   12928:	b	12964 <__assert_fail@plt+0x1a2c>
   1292c:	ldr	r1, [sp, #84]	; 0x54
   12930:	ldr	ip, [fp, #-84]	; 0xffffffac
   12934:	mov	r4, #0
   12938:	cmp	r6, r1
   1293c:	bcs	12964 <__assert_fail@plt+0x1a2c>
   12940:	ldrb	r0, [ip, r6]
   12944:	cmp	r0, #0
   12948:	beq	12964 <__assert_fail@plt+0x1a2c>
   1294c:	ldr	r0, [sp, #64]	; 0x40
   12950:	add	r0, r0, #1
   12954:	add	r6, r0, r7
   12958:	str	r0, [sp, #64]	; 0x40
   1295c:	cmp	r6, r1
   12960:	bcc	12940 <__assert_fail@plt+0x1a08>
   12964:	ldr	r6, [sp, #64]	; 0x40
   12968:	b	12970 <__assert_fail@plt+0x1a38>
   1296c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12970:	mov	r1, r6
   12974:	ldr	r6, [sp, #76]	; 0x4c
   12978:	ldr	sl, [sp, #56]	; 0x38
   1297c:	ldr	r0, [sp, #44]	; 0x2c
   12980:	cmp	r1, #1
   12984:	orr	r2, r4, r0
   12988:	mov	r0, r1
   1298c:	bhi	129ac <__assert_fail@plt+0x1a74>
   12990:	tst	r2, #1
   12994:	beq	129ac <__assert_fail@plt+0x1a74>
   12998:	ldr	lr, [sp, #84]	; 0x54
   1299c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   129a0:	cmp	r0, #0
   129a4:	bne	121a8 <__assert_fail@plt+0x1270>
   129a8:	b	12480 <__assert_fail@plt+0x1548>
   129ac:	str	r2, [sp, #64]	; 0x40
   129b0:	add	r0, r0, r7
   129b4:	add	r1, r7, #1
   129b8:	ldr	lr, [sp, #84]	; 0x54
   129bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   129c0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   129c4:	mov	r3, #0
   129c8:	str	r0, [sp, #56]	; 0x38
   129cc:	ldr	r0, [sp, #64]	; 0x40
   129d0:	tst	r0, #1
   129d4:	bne	12abc <__assert_fail@plt+0x1b84>
   129d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129dc:	tst	r0, #1
   129e0:	bne	12c5c <__assert_fail@plt+0x1d24>
   129e4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   129e8:	cmp	r7, #2
   129ec:	movwne	r3, #1
   129f0:	orr	r3, r3, r2
   129f4:	tst	r3, #1
   129f8:	bne	12a30 <__assert_fail@plt+0x1af8>
   129fc:	cmp	r9, sl
   12a00:	add	r3, r9, #1
   12a04:	movcc	r2, #39	; 0x27
   12a08:	strbcc	r2, [r6, r9]
   12a0c:	cmp	r3, sl
   12a10:	movcc	r2, #36	; 0x24
   12a14:	strbcc	r2, [r6, r3]
   12a18:	add	r3, r9, #2
   12a1c:	add	r9, r9, #3
   12a20:	cmp	r3, sl
   12a24:	movcc	r2, #39	; 0x27
   12a28:	strbcc	r2, [r6, r3]
   12a2c:	mov	r2, #1
   12a30:	cmp	r9, sl
   12a34:	mov	r0, r2
   12a38:	movcc	r3, #92	; 0x5c
   12a3c:	strbcc	r3, [r6, r9]
   12a40:	add	r3, r9, #1
   12a44:	cmp	r3, sl
   12a48:	andcc	r7, r5, #192	; 0xc0
   12a4c:	movcc	r2, #48	; 0x30
   12a50:	orrcc	r7, r2, r7, lsr #6
   12a54:	strbcc	r7, [r6, r3]
   12a58:	add	r3, r9, #2
   12a5c:	add	r9, r9, #3
   12a60:	cmp	r3, sl
   12a64:	lsrcc	r7, r5, #3
   12a68:	movcc	r2, #6
   12a6c:	bficc	r7, r2, #3, #29
   12a70:	mov	r2, #6
   12a74:	strbcc	r7, [r6, r3]
   12a78:	bfi	r5, r2, #3, #29
   12a7c:	mov	r3, #1
   12a80:	mov	r2, r0
   12a84:	ldr	r0, [sp, #56]	; 0x38
   12a88:	and	r8, r3, #1
   12a8c:	cmp	r0, r1
   12a90:	bhi	12af0 <__assert_fail@plt+0x1bb8>
   12a94:	b	12b30 <__assert_fail@plt+0x1bf8>
   12a98:	cmp	r9, sl
   12a9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12aa0:	strbcc	r5, [r6, r9]
   12aa4:	add	r9, r9, #1
   12aa8:	ldrb	r5, [ip, r1]
   12aac:	add	r1, r1, #1
   12ab0:	ldr	r0, [sp, #64]	; 0x40
   12ab4:	tst	r0, #1
   12ab8:	beq	129d8 <__assert_fail@plt+0x1aa0>
   12abc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12ac0:	tst	r7, #1
   12ac4:	beq	12ad8 <__assert_fail@plt+0x1ba0>
   12ac8:	cmp	r9, sl
   12acc:	movcc	r7, #92	; 0x5c
   12ad0:	strbcc	r7, [r6, r9]
   12ad4:	add	r9, r9, #1
   12ad8:	mov	r7, #0
   12adc:	str	r7, [fp, #-56]	; 0xffffffc8
   12ae0:	ldr	r0, [sp, #56]	; 0x38
   12ae4:	and	r8, r3, #1
   12ae8:	cmp	r0, r1
   12aec:	bls	12b30 <__assert_fail@plt+0x1bf8>
   12af0:	cmp	r8, #0
   12af4:	mvn	r7, r2
   12af8:	movwne	r8, #1
   12afc:	orr	r7, r7, r8
   12b00:	tst	r7, #1
   12b04:	bne	12a98 <__assert_fail@plt+0x1b60>
   12b08:	cmp	r9, sl
   12b0c:	movcc	r7, #39	; 0x27
   12b10:	strbcc	r7, [r6, r9]
   12b14:	add	r7, r9, #1
   12b18:	add	r9, r9, #2
   12b1c:	cmp	r7, sl
   12b20:	movcc	r2, #39	; 0x27
   12b24:	strbcc	r2, [r6, r7]
   12b28:	mov	r2, #0
   12b2c:	b	12a98 <__assert_fail@plt+0x1b60>
   12b30:	cmp	r8, #0
   12b34:	sub	r7, r1, #1
   12b38:	mov	r0, r5
   12b3c:	str	r2, [fp, #-48]	; 0xffffffd0
   12b40:	movwne	r8, #1
   12b44:	cmp	r8, #0
   12b48:	beq	12438 <__assert_fail@plt+0x1500>
   12b4c:	b	12228 <__assert_fail@plt+0x12f0>
   12b50:	mov	lr, r7
   12b54:	b	12b5c <__assert_fail@plt+0x1c24>
   12b58:	mvn	lr, #0
   12b5c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12b60:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b64:	eor	r0, r7, #2
   12b68:	orr	r0, r0, r9
   12b6c:	clz	r0, r0
   12b70:	lsr	r0, r0, #5
   12b74:	tst	r1, r0
   12b78:	bne	12c78 <__assert_fail@plt+0x1d40>
   12b7c:	mov	r0, r1
   12b80:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12b84:	cmp	r7, #2
   12b88:	movwne	r1, #1
   12b8c:	orr	r0, r0, r1
   12b90:	tst	r0, #1
   12b94:	ldreq	r0, [sp, #52]	; 0x34
   12b98:	streq	lr, [sp, #84]	; 0x54
   12b9c:	eoreq	r0, r0, #1
   12ba0:	tsteq	r0, #1
   12ba4:	bne	12d3c <__assert_fail@plt+0x1e04>
   12ba8:	tst	r4, #1
   12bac:	bne	12cf8 <__assert_fail@plt+0x1dc0>
   12bb0:	ldr	r6, [sp, #48]	; 0x30
   12bb4:	mov	r8, #0
   12bb8:	cmp	r6, #0
   12bbc:	beq	12d34 <__assert_fail@plt+0x1dfc>
   12bc0:	ldr	r0, [sp, #80]	; 0x50
   12bc4:	mov	r1, #0
   12bc8:	cmp	sl, #0
   12bcc:	mov	r4, #0
   12bd0:	str	r1, [fp, #-72]	; 0xffffffb8
   12bd4:	beq	11ac8 <__assert_fail@plt+0xb90>
   12bd8:	b	12d3c <__assert_fail@plt+0x1e04>
   12bdc:	ldrb	r1, [r0, #3]
   12be0:	cmp	r1, #56	; 0x38
   12be4:	ldrbeq	r1, [r0, #4]
   12be8:	cmpeq	r1, #48	; 0x30
   12bec:	bne	11cc0 <__assert_fail@plt+0xd88>
   12bf0:	ldrb	r1, [r0, #5]
   12bf4:	cmp	r1, #51	; 0x33
   12bf8:	ldrbeq	r1, [r0, #6]
   12bfc:	cmpeq	r1, #48	; 0x30
   12c00:	bne	11cc0 <__assert_fail@plt+0xd88>
   12c04:	ldrb	r0, [r0, #7]
   12c08:	cmp	r0, #0
   12c0c:	movw	r0, #23344	; 0x5b30
   12c10:	movt	r0, #1
   12c14:	str	r0, [sp, #68]	; 0x44
   12c18:	bne	11cc0 <__assert_fail@plt+0xd88>
   12c1c:	b	11cdc <__assert_fail@plt+0xda4>
   12c20:	ldrb	r1, [r0, #4]
   12c24:	cmp	r1, #48	; 0x30
   12c28:	ldrbeq	r1, [r0, #5]
   12c2c:	cmpeq	r1, #51	; 0x33
   12c30:	bne	11da4 <__assert_fail@plt+0xe6c>
   12c34:	ldrb	r1, [r0, #6]
   12c38:	cmp	r1, #48	; 0x30
   12c3c:	ldrbeq	r0, [r0, #7]
   12c40:	cmpeq	r0, #0
   12c44:	bne	11da4 <__assert_fail@plt+0xe6c>
   12c48:	movw	r0, #23348	; 0x5b34
   12c4c:	movt	r0, #1
   12c50:	str	r0, [sp, #72]	; 0x48
   12c54:	b	11dc4 <__assert_fail@plt+0xe8c>
   12c58:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12c5c:	ldr	r2, [sp, #80]	; 0x50
   12c60:	b	12c98 <__assert_fail@plt+0x1d60>
   12c64:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c68:	mov	r2, #1
   12c6c:	mov	lr, r4
   12c70:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12c74:	b	12c98 <__assert_fail@plt+0x1d60>
   12c78:	ldr	r2, [sp, #80]	; 0x50
   12c7c:	mov	r7, #2
   12c80:	b	12c98 <__assert_fail@plt+0x1d60>
   12c84:	ldr	r6, [sp, #76]	; 0x4c
   12c88:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c8c:	ldr	lr, [sp, #84]	; 0x54
   12c90:	ldr	r2, [sp, #80]	; 0x50
   12c94:	mov	r7, #2
   12c98:	mov	r0, #0
   12c9c:	ldr	r1, [fp, #12]
   12ca0:	tst	r2, #1
   12ca4:	mov	r2, r7
   12ca8:	mov	r3, lr
   12cac:	str	r0, [sp, #8]
   12cb0:	ldr	r0, [sp, #68]	; 0x44
   12cb4:	movwne	r2, #4
   12cb8:	cmp	r7, #2
   12cbc:	movne	r2, r7
   12cc0:	str	r2, [sp]
   12cc4:	mov	r2, ip
   12cc8:	bic	r1, r1, #2
   12ccc:	str	r0, [sp, #12]
   12cd0:	ldr	r0, [sp, #72]	; 0x48
   12cd4:	str	r1, [sp, #4]
   12cd8:	mov	r1, sl
   12cdc:	str	r0, [sp, #16]
   12ce0:	mov	r0, r6
   12ce4:	bl	11a4c <__assert_fail@plt+0xb14>
   12ce8:	mov	r9, r0
   12cec:	mov	r0, r9
   12cf0:	sub	sp, fp, #28
   12cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf8:	mov	r0, #5
   12cfc:	ldr	r1, [sp, #48]	; 0x30
   12d00:	ldr	r2, [fp, #-84]	; 0xffffffac
   12d04:	ldr	r3, [sp, #84]	; 0x54
   12d08:	str	r0, [sp]
   12d0c:	ldr	r0, [fp, #12]
   12d10:	str	r0, [sp, #4]
   12d14:	ldr	r0, [fp, #16]
   12d18:	str	r0, [sp, #8]
   12d1c:	ldr	r0, [sp, #68]	; 0x44
   12d20:	str	r0, [sp, #12]
   12d24:	ldr	r0, [sp, #72]	; 0x48
   12d28:	str	r0, [sp, #16]
   12d2c:	ldr	r0, [sp, #76]	; 0x4c
   12d30:	b	12ce4 <__assert_fail@plt+0x1dac>
   12d34:	mov	r0, #0
   12d38:	str	r0, [fp, #-72]	; 0xffffffb8
   12d3c:	ldr	r1, [sp, #92]	; 0x5c
   12d40:	cmp	r1, #0
   12d44:	beq	12d84 <__assert_fail@plt+0x1e4c>
   12d48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d4c:	ldr	r2, [sp, #76]	; 0x4c
   12d50:	tst	r0, #1
   12d54:	bne	12d88 <__assert_fail@plt+0x1e50>
   12d58:	ldrb	r0, [r1]
   12d5c:	cmp	r0, #0
   12d60:	beq	12d88 <__assert_fail@plt+0x1e50>
   12d64:	add	r1, r1, #1
   12d68:	cmp	r9, sl
   12d6c:	strbcc	r0, [r2, r9]
   12d70:	add	r9, r9, #1
   12d74:	ldrb	r0, [r1], #1
   12d78:	cmp	r0, #0
   12d7c:	bne	12d68 <__assert_fail@plt+0x1e30>
   12d80:	b	12d88 <__assert_fail@plt+0x1e50>
   12d84:	ldr	r2, [sp, #76]	; 0x4c
   12d88:	cmp	r9, sl
   12d8c:	movcc	r0, #0
   12d90:	strbcc	r0, [r2, r9]
   12d94:	mov	r0, r9
   12d98:	sub	sp, fp, #28
   12d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12da0:	mov	r2, #1
   12da4:	b	12c70 <__assert_fail@plt+0x1d38>
   12da8:	ldr	r2, [sp, #80]	; 0x50
   12dac:	mov	r7, #5
   12db0:	b	12c98 <__assert_fail@plt+0x1d60>
   12db4:	bl	10f2c <abort@plt>
   12db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dbc:	add	fp, sp, #28
   12dc0:	sub	sp, sp, #28
   12dc4:	movw	r5, #29008	; 0x7150
   12dc8:	cmp	r2, #0
   12dcc:	mov	r4, r1
   12dd0:	mov	r7, r0
   12dd4:	str	r0, [sp, #20]
   12dd8:	movt	r5, #2
   12ddc:	movne	r5, r2
   12de0:	bl	10e90 <__errno_location@plt>
   12de4:	mov	sl, r0
   12de8:	ldm	r5, {r0, r1}
   12dec:	ldr	r2, [r5, #40]	; 0x28
   12df0:	ldr	r3, [r5, #44]	; 0x2c
   12df4:	add	r9, r5, #8
   12df8:	ldr	r6, [sl]
   12dfc:	orr	r8, r1, #1
   12e00:	mov	r1, #0
   12e04:	str	r6, [sp, #24]
   12e08:	stm	sp, {r0, r8, r9}
   12e0c:	str	r2, [sp, #12]
   12e10:	str	r3, [sp, #16]
   12e14:	mov	r0, #0
   12e18:	mov	r2, r7
   12e1c:	mov	r3, r4
   12e20:	mov	r6, r4
   12e24:	bl	11a4c <__assert_fail@plt+0xb14>
   12e28:	add	r7, r0, #1
   12e2c:	mov	r0, r7
   12e30:	bl	13e94 <__assert_fail@plt+0x2f5c>
   12e34:	mov	r4, r0
   12e38:	ldr	r0, [r5]
   12e3c:	ldr	r2, [r5, #44]	; 0x2c
   12e40:	ldr	r1, [r5, #40]	; 0x28
   12e44:	mov	r3, r6
   12e48:	stm	sp, {r0, r8, r9}
   12e4c:	str	r2, [sp, #16]
   12e50:	str	r1, [sp, #12]
   12e54:	mov	r0, r4
   12e58:	mov	r1, r7
   12e5c:	ldr	r2, [sp, #20]
   12e60:	bl	11a4c <__assert_fail@plt+0xb14>
   12e64:	ldr	r0, [sp, #24]
   12e68:	str	r0, [sl]
   12e6c:	mov	r0, r4
   12e70:	sub	sp, fp, #28
   12e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e7c:	add	fp, sp, #28
   12e80:	sub	sp, sp, #36	; 0x24
   12e84:	movw	r8, #29008	; 0x7150
   12e88:	cmp	r3, #0
   12e8c:	mov	r4, r2
   12e90:	str	r2, [sp, #24]
   12e94:	mov	r5, r1
   12e98:	mov	r6, r0
   12e9c:	str	r0, [sp, #20]
   12ea0:	movt	r8, #2
   12ea4:	movne	r8, r3
   12ea8:	bl	10e90 <__errno_location@plt>
   12eac:	str	r0, [sp, #28]
   12eb0:	cmp	r4, #0
   12eb4:	add	sl, r8, #8
   12eb8:	ldm	r8, {r3, r9}
   12ebc:	ldr	r7, [r0]
   12ec0:	ldr	r1, [r8, #40]	; 0x28
   12ec4:	ldr	r2, [r8, #44]	; 0x2c
   12ec8:	mov	r0, #0
   12ecc:	orreq	r9, r9, #1
   12ed0:	str	r7, [sp, #32]
   12ed4:	mov	r7, r5
   12ed8:	stm	sp, {r3, r9, sl}
   12edc:	str	r1, [sp, #12]
   12ee0:	str	r2, [sp, #16]
   12ee4:	mov	r1, #0
   12ee8:	mov	r2, r6
   12eec:	mov	r3, r5
   12ef0:	bl	11a4c <__assert_fail@plt+0xb14>
   12ef4:	add	r4, r0, #1
   12ef8:	mov	r5, r0
   12efc:	mov	r0, r4
   12f00:	bl	13e94 <__assert_fail@plt+0x2f5c>
   12f04:	mov	r6, r0
   12f08:	ldr	r0, [r8]
   12f0c:	ldr	r2, [r8, #44]	; 0x2c
   12f10:	ldr	r1, [r8, #40]	; 0x28
   12f14:	mov	r3, r7
   12f18:	stm	sp, {r0, r9, sl}
   12f1c:	str	r2, [sp, #16]
   12f20:	str	r1, [sp, #12]
   12f24:	mov	r0, r6
   12f28:	mov	r1, r4
   12f2c:	ldr	r2, [sp, #20]
   12f30:	bl	11a4c <__assert_fail@plt+0xb14>
   12f34:	ldr	r0, [sp, #24]
   12f38:	ldr	r1, [sp, #32]
   12f3c:	ldr	r2, [sp, #28]
   12f40:	cmp	r0, #0
   12f44:	str	r1, [r2]
   12f48:	strne	r5, [r0]
   12f4c:	mov	r0, r6
   12f50:	sub	sp, fp, #28
   12f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f58:	push	{r4, r5, r6, r7, fp, lr}
   12f5c:	add	fp, sp, #16
   12f60:	movw	r4, #28944	; 0x7110
   12f64:	movt	r4, #2
   12f68:	ldrd	r6, [r4]
   12f6c:	cmp	r7, #2
   12f70:	blt	12f9c <__assert_fail@plt+0x2064>
   12f74:	add	r5, r6, #12
   12f78:	mov	r7, #0
   12f7c:	ldr	r0, [r5, r7, lsl #3]
   12f80:	bl	151fc <__assert_fail@plt+0x42c4>
   12f84:	ldr	r1, [r4, #4]
   12f88:	add	r2, r7, #2
   12f8c:	add	r0, r7, #1
   12f90:	mov	r7, r0
   12f94:	cmp	r2, r1
   12f98:	blt	12f7c <__assert_fail@plt+0x2044>
   12f9c:	ldr	r0, [r6, #4]
   12fa0:	movw	r5, #29056	; 0x7180
   12fa4:	movt	r5, #2
   12fa8:	cmp	r0, r5
   12fac:	beq	12fc0 <__assert_fail@plt+0x2088>
   12fb0:	bl	151fc <__assert_fail@plt+0x42c4>
   12fb4:	mov	r0, #256	; 0x100
   12fb8:	str	r0, [r4, #8]
   12fbc:	str	r5, [r4, #12]
   12fc0:	add	r5, r4, #8
   12fc4:	cmp	r6, r5
   12fc8:	beq	12fd8 <__assert_fail@plt+0x20a0>
   12fcc:	mov	r0, r6
   12fd0:	bl	151fc <__assert_fail@plt+0x42c4>
   12fd4:	str	r5, [r4]
   12fd8:	mov	r0, #1
   12fdc:	str	r0, [r4, #4]
   12fe0:	pop	{r4, r5, r6, r7, fp, pc}
   12fe4:	movw	r3, #29008	; 0x7150
   12fe8:	mvn	r2, #0
   12fec:	movt	r3, #2
   12ff0:	b	12ff4 <__assert_fail@plt+0x20bc>
   12ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ff8:	add	fp, sp, #28
   12ffc:	sub	sp, sp, #44	; 0x2c
   13000:	mov	r7, r3
   13004:	str	r2, [sp, #36]	; 0x24
   13008:	str	r1, [sp, #32]
   1300c:	mov	r5, r0
   13010:	bl	10e90 <__errno_location@plt>
   13014:	cmp	r5, #0
   13018:	blt	1317c <__assert_fail@plt+0x2244>
   1301c:	cmn	r5, #-2147483647	; 0x80000001
   13020:	beq	1317c <__assert_fail@plt+0x2244>
   13024:	movw	r8, #28944	; 0x7110
   13028:	mov	r4, r0
   1302c:	movt	r8, #2
   13030:	ldr	r6, [r8]
   13034:	ldr	r1, [r8, #4]
   13038:	ldr	r0, [r0]
   1303c:	str	r4, [sp, #28]
   13040:	cmp	r1, r5
   13044:	str	r0, [sp, #24]
   13048:	ble	13054 <__assert_fail@plt+0x211c>
   1304c:	mov	sl, r6
   13050:	b	130b8 <__assert_fail@plt+0x2180>
   13054:	mov	r0, #8
   13058:	add	r9, r8, #8
   1305c:	add	r2, r5, #1
   13060:	str	r1, [fp, #-32]	; 0xffffffe0
   13064:	mvn	r3, #-2147483648	; 0x80000000
   13068:	str	r0, [sp]
   1306c:	subs	r0, r6, r9
   13070:	sub	r2, r2, r1
   13074:	sub	r1, fp, #32
   13078:	movne	r0, r6
   1307c:	bl	14094 <__assert_fail@plt+0x315c>
   13080:	str	r0, [r8]
   13084:	cmp	r6, r9
   13088:	mov	sl, r0
   1308c:	ldrdeq	r0, [r8, #8]
   13090:	stmeq	sl, {r0, r1}
   13094:	ldr	r1, [r8, #4]
   13098:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1309c:	add	r0, sl, r1, lsl #3
   130a0:	sub	r1, r2, r1
   130a4:	lsl	r2, r1, #3
   130a8:	mov	r1, #0
   130ac:	bl	10ea8 <memset@plt>
   130b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   130b4:	str	r0, [r8, #4]
   130b8:	mov	r9, sl
   130bc:	ldr	r6, [r9, r5, lsl #3]!
   130c0:	ldr	r4, [r9, #4]!
   130c4:	ldm	r7, {r0, r1}
   130c8:	ldr	r2, [r7, #40]	; 0x28
   130cc:	ldr	r3, [r7, #44]	; 0x2c
   130d0:	orr	r8, r1, #1
   130d4:	add	r1, r7, #8
   130d8:	stm	sp, {r0, r8}
   130dc:	add	r0, sp, #8
   130e0:	str	r1, [sp, #20]
   130e4:	stm	r0, {r1, r2, r3}
   130e8:	mov	r0, r4
   130ec:	mov	r1, r6
   130f0:	ldr	r2, [sp, #32]
   130f4:	ldr	r3, [sp, #36]	; 0x24
   130f8:	bl	11a4c <__assert_fail@plt+0xb14>
   130fc:	cmp	r6, r0
   13100:	bhi	13164 <__assert_fail@plt+0x222c>
   13104:	add	r6, r0, #1
   13108:	movw	r0, #29056	; 0x7180
   1310c:	movt	r0, #2
   13110:	str	r6, [sl, r5, lsl #3]
   13114:	cmp	r4, r0
   13118:	beq	13124 <__assert_fail@plt+0x21ec>
   1311c:	mov	r0, r4
   13120:	bl	151fc <__assert_fail@plt+0x42c4>
   13124:	mov	r0, r6
   13128:	bl	13e94 <__assert_fail@plt+0x2f5c>
   1312c:	str	r0, [r9]
   13130:	mov	r4, r0
   13134:	add	r3, sp, #8
   13138:	ldr	r0, [r7]
   1313c:	ldr	r1, [r7, #40]	; 0x28
   13140:	ldr	r2, [r7, #44]	; 0x2c
   13144:	stm	sp, {r0, r8}
   13148:	ldr	r0, [sp, #20]
   1314c:	stm	r3, {r0, r1, r2}
   13150:	mov	r0, r4
   13154:	mov	r1, r6
   13158:	ldr	r2, [sp, #32]
   1315c:	ldr	r3, [sp, #36]	; 0x24
   13160:	bl	11a4c <__assert_fail@plt+0xb14>
   13164:	ldr	r1, [sp, #24]
   13168:	ldr	r0, [sp, #28]
   1316c:	str	r1, [r0]
   13170:	mov	r0, r4
   13174:	sub	sp, fp, #28
   13178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1317c:	bl	10f2c <abort@plt>
   13180:	movw	r3, #29008	; 0x7150
   13184:	movt	r3, #2
   13188:	b	12ff4 <__assert_fail@plt+0x20bc>
   1318c:	movw	r3, #29008	; 0x7150
   13190:	mov	r1, r0
   13194:	mov	r0, #0
   13198:	mvn	r2, #0
   1319c:	movt	r3, #2
   131a0:	b	12ff4 <__assert_fail@plt+0x20bc>
   131a4:	movw	r3, #29008	; 0x7150
   131a8:	mov	r2, r1
   131ac:	mov	r1, r0
   131b0:	mov	r0, #0
   131b4:	movt	r3, #2
   131b8:	b	12ff4 <__assert_fail@plt+0x20bc>
   131bc:	push	{fp, lr}
   131c0:	mov	fp, sp
   131c4:	sub	sp, sp, #48	; 0x30
   131c8:	vmov.i32	q8, #0	; 0x00000000
   131cc:	mov	ip, #32
   131d0:	mov	r3, sp
   131d4:	mov	lr, r2
   131d8:	cmp	r1, #10
   131dc:	add	r2, r3, #16
   131e0:	vst1.64	{d16-d17}, [r3], ip
   131e4:	vst1.64	{d16-d17}, [r3]
   131e8:	vst1.64	{d16-d17}, [r2]
   131ec:	beq	1320c <__assert_fail@plt+0x22d4>
   131f0:	str	r1, [sp]
   131f4:	mov	r3, sp
   131f8:	mov	r1, lr
   131fc:	mvn	r2, #0
   13200:	bl	12ff4 <__assert_fail@plt+0x20bc>
   13204:	mov	sp, fp
   13208:	pop	{fp, pc}
   1320c:	bl	10f2c <abort@plt>
   13210:	push	{r4, sl, fp, lr}
   13214:	add	fp, sp, #8
   13218:	sub	sp, sp, #48	; 0x30
   1321c:	mov	ip, r3
   13220:	mov	r3, sp
   13224:	vmov.i32	q8, #0	; 0x00000000
   13228:	mov	lr, #32
   1322c:	cmp	r1, #10
   13230:	add	r4, r3, #16
   13234:	vst1.64	{d16-d17}, [r3], lr
   13238:	vst1.64	{d16-d17}, [r3]
   1323c:	vst1.64	{d16-d17}, [r4]
   13240:	beq	13260 <__assert_fail@plt+0x2328>
   13244:	str	r1, [sp]
   13248:	mov	r1, r2
   1324c:	mov	r3, sp
   13250:	mov	r2, ip
   13254:	bl	12ff4 <__assert_fail@plt+0x20bc>
   13258:	sub	sp, fp, #8
   1325c:	pop	{r4, sl, fp, pc}
   13260:	bl	10f2c <abort@plt>
   13264:	push	{fp, lr}
   13268:	mov	fp, sp
   1326c:	sub	sp, sp, #48	; 0x30
   13270:	mov	r3, sp
   13274:	vmov.i32	q8, #0	; 0x00000000
   13278:	mov	ip, #32
   1327c:	cmp	r0, #10
   13280:	add	r2, r3, #16
   13284:	vst1.64	{d16-d17}, [r3], ip
   13288:	vst1.64	{d16-d17}, [r3]
   1328c:	vst1.64	{d16-d17}, [r2]
   13290:	beq	132b0 <__assert_fail@plt+0x2378>
   13294:	str	r0, [sp]
   13298:	mov	r3, sp
   1329c:	mov	r0, #0
   132a0:	mvn	r2, #0
   132a4:	bl	12ff4 <__assert_fail@plt+0x20bc>
   132a8:	mov	sp, fp
   132ac:	pop	{fp, pc}
   132b0:	bl	10f2c <abort@plt>
   132b4:	push	{fp, lr}
   132b8:	mov	fp, sp
   132bc:	sub	sp, sp, #48	; 0x30
   132c0:	mov	r3, sp
   132c4:	vmov.i32	q8, #0	; 0x00000000
   132c8:	mov	ip, #32
   132cc:	cmp	r0, #10
   132d0:	add	lr, r3, #16
   132d4:	vst1.64	{d16-d17}, [r3], ip
   132d8:	vst1.64	{d16-d17}, [r3]
   132dc:	vst1.64	{d16-d17}, [lr]
   132e0:	beq	132fc <__assert_fail@plt+0x23c4>
   132e4:	str	r0, [sp]
   132e8:	mov	r3, sp
   132ec:	mov	r0, #0
   132f0:	bl	12ff4 <__assert_fail@plt+0x20bc>
   132f4:	mov	sp, fp
   132f8:	pop	{fp, pc}
   132fc:	bl	10f2c <abort@plt>
   13300:	push	{r4, sl, fp, lr}
   13304:	add	fp, sp, #8
   13308:	sub	sp, sp, #48	; 0x30
   1330c:	mov	lr, r0
   13310:	movw	r0, #29008	; 0x7150
   13314:	mov	r3, #32
   13318:	mov	ip, r1
   1331c:	mov	r4, #1
   13320:	movt	r0, #2
   13324:	add	r1, r0, #16
   13328:	vld1.64	{d16-d17}, [r0], r3
   1332c:	mov	r3, sp
   13330:	vld1.64	{d18-d19}, [r1]
   13334:	add	r1, r3, #16
   13338:	vld1.64	{d20-d21}, [r0]
   1333c:	add	r0, r3, #32
   13340:	vst1.64	{d18-d19}, [r1]
   13344:	mov	r1, r3
   13348:	vst1.64	{d20-d21}, [r0]
   1334c:	mov	r0, #28
   13350:	and	r0, r0, r2, lsr #3
   13354:	and	r2, r2, #31
   13358:	vst1.64	{d16-d17}, [r1], r0
   1335c:	ldr	r0, [r1, #8]
   13360:	bic	r4, r4, r0, lsr r2
   13364:	eor	r0, r0, r4, lsl r2
   13368:	mov	r2, ip
   1336c:	str	r0, [r1, #8]
   13370:	mov	r0, #0
   13374:	mov	r1, lr
   13378:	bl	12ff4 <__assert_fail@plt+0x20bc>
   1337c:	sub	sp, fp, #8
   13380:	pop	{r4, sl, fp, pc}
   13384:	push	{fp, lr}
   13388:	mov	fp, sp
   1338c:	sub	sp, sp, #48	; 0x30
   13390:	mov	ip, r0
   13394:	movw	r0, #29008	; 0x7150
   13398:	mov	r3, #32
   1339c:	movt	r0, #2
   133a0:	add	r2, r0, #16
   133a4:	vld1.64	{d16-d17}, [r0], r3
   133a8:	mov	r3, sp
   133ac:	vld1.64	{d18-d19}, [r2]
   133b0:	add	r2, r3, #16
   133b4:	vld1.64	{d20-d21}, [r0]
   133b8:	add	r0, r3, #32
   133bc:	vst1.64	{d18-d19}, [r2]
   133c0:	mov	r2, r3
   133c4:	vst1.64	{d20-d21}, [r0]
   133c8:	mov	r0, #28
   133cc:	and	r0, r0, r1, lsr #3
   133d0:	and	r1, r1, #31
   133d4:	vst1.64	{d16-d17}, [r2], r0
   133d8:	mov	r0, #1
   133dc:	ldr	lr, [r2, #8]
   133e0:	bic	r0, r0, lr, lsr r1
   133e4:	eor	r0, lr, r0, lsl r1
   133e8:	mov	r1, ip
   133ec:	str	r0, [r2, #8]
   133f0:	mov	r0, #0
   133f4:	mvn	r2, #0
   133f8:	bl	12ff4 <__assert_fail@plt+0x20bc>
   133fc:	mov	sp, fp
   13400:	pop	{fp, pc}
   13404:	push	{fp, lr}
   13408:	mov	fp, sp
   1340c:	sub	sp, sp, #48	; 0x30
   13410:	movw	r2, #29008	; 0x7150
   13414:	mov	r3, #32
   13418:	mov	r1, r0
   1341c:	movt	r2, #2
   13420:	add	r0, r2, #16
   13424:	vld1.64	{d16-d17}, [r2], r3
   13428:	mov	r3, sp
   1342c:	vld1.64	{d18-d19}, [r0]
   13430:	add	r0, r3, #16
   13434:	vld1.64	{d20-d21}, [r2]
   13438:	mov	r2, r3
   1343c:	vst1.64	{d18-d19}, [r0]
   13440:	add	r0, r3, #32
   13444:	vst1.64	{d20-d21}, [r0]
   13448:	mov	r0, #12
   1344c:	vst1.64	{d16-d17}, [r2], r0
   13450:	ldr	r0, [r2]
   13454:	orr	r0, r0, #67108864	; 0x4000000
   13458:	str	r0, [r2]
   1345c:	mov	r0, #0
   13460:	mvn	r2, #0
   13464:	bl	12ff4 <__assert_fail@plt+0x20bc>
   13468:	mov	sp, fp
   1346c:	pop	{fp, pc}
   13470:	push	{fp, lr}
   13474:	mov	fp, sp
   13478:	sub	sp, sp, #48	; 0x30
   1347c:	mov	ip, r1
   13480:	mov	r1, r0
   13484:	movw	r0, #29008	; 0x7150
   13488:	mov	r3, #32
   1348c:	movt	r0, #2
   13490:	add	r2, r0, #16
   13494:	vld1.64	{d16-d17}, [r0], r3
   13498:	mov	r3, sp
   1349c:	vld1.64	{d18-d19}, [r2]
   134a0:	add	r2, r3, #16
   134a4:	vld1.64	{d20-d21}, [r0]
   134a8:	add	r0, r3, #32
   134ac:	vst1.64	{d18-d19}, [r2]
   134b0:	mov	r2, r3
   134b4:	vst1.64	{d20-d21}, [r0]
   134b8:	mov	r0, #12
   134bc:	vst1.64	{d16-d17}, [r2], r0
   134c0:	ldr	r0, [r2]
   134c4:	orr	r0, r0, #67108864	; 0x4000000
   134c8:	str	r0, [r2]
   134cc:	mov	r0, #0
   134d0:	mov	r2, ip
   134d4:	bl	12ff4 <__assert_fail@plt+0x20bc>
   134d8:	mov	sp, fp
   134dc:	pop	{fp, pc}
   134e0:	push	{r4, sl, fp, lr}
   134e4:	add	fp, sp, #8
   134e8:	sub	sp, sp, #96	; 0x60
   134ec:	mov	ip, r2
   134f0:	mov	r2, sp
   134f4:	vmov.i32	q8, #0	; 0x00000000
   134f8:	mov	r4, #28
   134fc:	cmp	r1, #10
   13500:	mov	r3, r2
   13504:	add	lr, r2, #16
   13508:	vst1.64	{d16-d17}, [r3], r4
   1350c:	vst1.64	{d16-d17}, [lr]
   13510:	vst1.32	{d16-d17}, [r3]
   13514:	beq	13564 <__assert_fail@plt+0x262c>
   13518:	vld1.64	{d16-d17}, [r2], r4
   1351c:	vld1.64	{d18-d19}, [lr]
   13520:	add	r3, sp, #48	; 0x30
   13524:	add	r4, r3, #4
   13528:	vld1.32	{d20-d21}, [r2]
   1352c:	add	r2, r3, #20
   13530:	vst1.32	{d16-d17}, [r4]
   13534:	vst1.32	{d18-d19}, [r2]
   13538:	add	r2, r3, #32
   1353c:	vst1.32	{d20-d21}, [r2]
   13540:	str	r1, [sp, #48]	; 0x30
   13544:	mvn	r2, #0
   13548:	ldr	r1, [sp, #60]	; 0x3c
   1354c:	orr	r1, r1, #67108864	; 0x4000000
   13550:	str	r1, [sp, #60]	; 0x3c
   13554:	mov	r1, ip
   13558:	bl	12ff4 <__assert_fail@plt+0x20bc>
   1355c:	sub	sp, fp, #8
   13560:	pop	{r4, sl, fp, pc}
   13564:	bl	10f2c <abort@plt>
   13568:	push	{r4, r5, fp, lr}
   1356c:	add	fp, sp, #8
   13570:	sub	sp, sp, #48	; 0x30
   13574:	mov	ip, r3
   13578:	movw	r3, #29008	; 0x7150
   1357c:	mov	lr, #32
   13580:	cmp	r1, #0
   13584:	mov	r5, sp
   13588:	movt	r3, #2
   1358c:	cmpne	r2, #0
   13590:	add	r4, r3, #16
   13594:	vld1.64	{d16-d17}, [r3], lr
   13598:	vld1.64	{d18-d19}, [r4]
   1359c:	add	r4, r5, #16
   135a0:	vld1.64	{d20-d21}, [r3]
   135a4:	vst1.64	{d16-d17}, [r5], lr
   135a8:	mov	r3, #10
   135ac:	vst1.64	{d18-d19}, [r4]
   135b0:	vst1.64	{d20-d21}, [r5]
   135b4:	str	r3, [sp]
   135b8:	bne	135c0 <__assert_fail@plt+0x2688>
   135bc:	bl	10f2c <abort@plt>
   135c0:	str	r2, [sp, #44]	; 0x2c
   135c4:	str	r1, [sp, #40]	; 0x28
   135c8:	mov	r3, sp
   135cc:	mov	r1, ip
   135d0:	mvn	r2, #0
   135d4:	bl	12ff4 <__assert_fail@plt+0x20bc>
   135d8:	sub	sp, fp, #8
   135dc:	pop	{r4, r5, fp, pc}
   135e0:	push	{r4, r5, fp, lr}
   135e4:	add	fp, sp, #8
   135e8:	sub	sp, sp, #48	; 0x30
   135ec:	mov	lr, r3
   135f0:	movw	r3, #29008	; 0x7150
   135f4:	mov	ip, #32
   135f8:	cmp	r1, #0
   135fc:	mov	r5, sp
   13600:	movt	r3, #2
   13604:	cmpne	r2, #0
   13608:	add	r4, r3, #16
   1360c:	vld1.64	{d16-d17}, [r3], ip
   13610:	vld1.64	{d18-d19}, [r4]
   13614:	add	r4, r5, #16
   13618:	vld1.64	{d20-d21}, [r3]
   1361c:	vst1.64	{d16-d17}, [r5], ip
   13620:	mov	r3, #10
   13624:	vst1.64	{d18-d19}, [r4]
   13628:	vst1.64	{d20-d21}, [r5]
   1362c:	str	r3, [sp]
   13630:	bne	13638 <__assert_fail@plt+0x2700>
   13634:	bl	10f2c <abort@plt>
   13638:	ldr	ip, [fp, #8]
   1363c:	str	r2, [sp, #44]	; 0x2c
   13640:	str	r1, [sp, #40]	; 0x28
   13644:	mov	r3, sp
   13648:	mov	r1, lr
   1364c:	mov	r2, ip
   13650:	bl	12ff4 <__assert_fail@plt+0x20bc>
   13654:	sub	sp, fp, #8
   13658:	pop	{r4, r5, fp, pc}
   1365c:	push	{r4, sl, fp, lr}
   13660:	add	fp, sp, #8
   13664:	sub	sp, sp, #48	; 0x30
   13668:	mov	ip, r2
   1366c:	movw	r2, #29008	; 0x7150
   13670:	mov	lr, #32
   13674:	cmp	r0, #0
   13678:	mov	r4, sp
   1367c:	movt	r2, #2
   13680:	cmpne	r1, #0
   13684:	add	r3, r2, #16
   13688:	vld1.64	{d16-d17}, [r2], lr
   1368c:	vld1.64	{d18-d19}, [r3]
   13690:	add	r3, r4, #16
   13694:	vld1.64	{d20-d21}, [r2]
   13698:	vst1.64	{d16-d17}, [r4], lr
   1369c:	mov	r2, #10
   136a0:	vst1.64	{d18-d19}, [r3]
   136a4:	vst1.64	{d20-d21}, [r4]
   136a8:	str	r2, [sp]
   136ac:	bne	136b4 <__assert_fail@plt+0x277c>
   136b0:	bl	10f2c <abort@plt>
   136b4:	str	r1, [sp, #44]	; 0x2c
   136b8:	str	r0, [sp, #40]	; 0x28
   136bc:	mov	r3, sp
   136c0:	mov	r0, #0
   136c4:	mov	r1, ip
   136c8:	mvn	r2, #0
   136cc:	bl	12ff4 <__assert_fail@plt+0x20bc>
   136d0:	sub	sp, fp, #8
   136d4:	pop	{r4, sl, fp, pc}
   136d8:	push	{r4, r5, fp, lr}
   136dc:	add	fp, sp, #8
   136e0:	sub	sp, sp, #48	; 0x30
   136e4:	mov	lr, r2
   136e8:	movw	r2, #29008	; 0x7150
   136ec:	mov	ip, r3
   136f0:	mov	r3, #32
   136f4:	cmp	r0, #0
   136f8:	mov	r5, sp
   136fc:	movt	r2, #2
   13700:	cmpne	r1, #0
   13704:	add	r4, r2, #16
   13708:	vld1.64	{d16-d17}, [r2], r3
   1370c:	vld1.64	{d18-d19}, [r4]
   13710:	add	r4, r5, #16
   13714:	vld1.64	{d20-d21}, [r2]
   13718:	vst1.64	{d16-d17}, [r5], r3
   1371c:	mov	r2, #10
   13720:	vst1.64	{d18-d19}, [r4]
   13724:	vst1.64	{d20-d21}, [r5]
   13728:	str	r2, [sp]
   1372c:	bne	13734 <__assert_fail@plt+0x27fc>
   13730:	bl	10f2c <abort@plt>
   13734:	str	r1, [sp, #44]	; 0x2c
   13738:	str	r0, [sp, #40]	; 0x28
   1373c:	mov	r3, sp
   13740:	mov	r0, #0
   13744:	mov	r1, lr
   13748:	mov	r2, ip
   1374c:	bl	12ff4 <__assert_fail@plt+0x20bc>
   13750:	sub	sp, fp, #8
   13754:	pop	{r4, r5, fp, pc}
   13758:	movw	r3, #28896	; 0x70e0
   1375c:	movt	r3, #2
   13760:	b	12ff4 <__assert_fail@plt+0x20bc>
   13764:	movw	r3, #28896	; 0x70e0
   13768:	mov	r2, r1
   1376c:	mov	r1, r0
   13770:	mov	r0, #0
   13774:	movt	r3, #2
   13778:	b	12ff4 <__assert_fail@plt+0x20bc>
   1377c:	movw	r3, #28896	; 0x70e0
   13780:	mvn	r2, #0
   13784:	movt	r3, #2
   13788:	b	12ff4 <__assert_fail@plt+0x20bc>
   1378c:	movw	r3, #28896	; 0x70e0
   13790:	mov	r1, r0
   13794:	mov	r0, #0
   13798:	mvn	r2, #0
   1379c:	movt	r3, #2
   137a0:	b	12ff4 <__assert_fail@plt+0x20bc>
   137a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137a8:	add	fp, sp, #24
   137ac:	sub	sp, sp, #32
   137b0:	ldr	r6, [fp, #12]
   137b4:	ldr	r7, [fp, #8]
   137b8:	mov	r4, r2
   137bc:	mov	r8, r0
   137c0:	cmp	r1, #0
   137c4:	beq	137ec <__assert_fail@plt+0x28b4>
   137c8:	movw	r2, #23436	; 0x5b8c
   137cc:	mov	r5, r1
   137d0:	str	r3, [sp, #4]
   137d4:	str	r4, [sp]
   137d8:	mov	r0, r8
   137dc:	mov	r1, #1
   137e0:	movt	r2, #1
   137e4:	mov	r3, r5
   137e8:	b	13804 <__assert_fail@plt+0x28cc>
   137ec:	movw	r2, #23448	; 0x5b98
   137f0:	str	r3, [sp]
   137f4:	mov	r0, r8
   137f8:	mov	r1, #1
   137fc:	mov	r3, r4
   13800:	movt	r2, #1
   13804:	bl	10ecc <__fprintf_chk@plt>
   13808:	movw	r1, #23455	; 0x5b9f
   1380c:	mov	r0, #0
   13810:	mov	r2, #5
   13814:	movt	r1, #1
   13818:	bl	10d94 <dcgettext@plt>
   1381c:	movw	r2, #24173	; 0x5e6d
   13820:	mov	r3, r0
   13824:	movw	r0, #2022	; 0x7e6
   13828:	mov	r1, #1
   1382c:	str	r0, [sp]
   13830:	movt	r2, #1
   13834:	mov	r0, r8
   13838:	bl	10ecc <__fprintf_chk@plt>
   1383c:	movw	r4, #23017	; 0x59e9
   13840:	mov	r1, r8
   13844:	movt	r4, #1
   13848:	mov	r0, r4
   1384c:	bl	10d1c <fputs_unlocked@plt>
   13850:	movw	r1, #23459	; 0x5ba3
   13854:	mov	r0, #0
   13858:	mov	r2, #5
   1385c:	movt	r1, #1
   13860:	bl	10d94 <dcgettext@plt>
   13864:	movw	r3, #23630	; 0x5c4e
   13868:	mov	r2, r0
   1386c:	mov	r0, r8
   13870:	mov	r1, #1
   13874:	movt	r3, #1
   13878:	bl	10ecc <__fprintf_chk@plt>
   1387c:	mov	r0, r4
   13880:	mov	r1, r8
   13884:	bl	10d1c <fputs_unlocked@plt>
   13888:	cmp	r6, #9
   1388c:	bhi	138c8 <__assert_fail@plt+0x2990>
   13890:	add	r0, pc, #0
   13894:	ldr	pc, [r0, r6, lsl #2]
   13898:	andeq	r3, r1, r0, asr #17
   1389c:	ldrdeq	r3, [r1], -r4
   138a0:	andeq	r3, r1, r4, lsl #18
   138a4:	andeq	r3, r1, ip, lsr #18
   138a8:	andeq	r3, r1, r4, asr r9
   138ac:	andeq	r3, r1, ip, ror r9
   138b0:	andeq	r3, r1, r4, lsr #19
   138b4:	ldrdeq	r3, [r1], -ip
   138b8:	andeq	r3, r1, r4, lsl #21
   138bc:	andeq	r3, r1, ip, lsr #20
   138c0:	sub	sp, fp, #24
   138c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138c8:	movw	r1, #23983	; 0x5daf
   138cc:	movt	r1, #1
   138d0:	b	13a34 <__assert_fail@plt+0x2afc>
   138d4:	movw	r1, #23664	; 0x5c70
   138d8:	mov	r0, #0
   138dc:	mov	r2, #5
   138e0:	movt	r1, #1
   138e4:	bl	10d94 <dcgettext@plt>
   138e8:	ldr	r3, [r7]
   138ec:	mov	r2, r0
   138f0:	mov	r0, r8
   138f4:	mov	r1, #1
   138f8:	sub	sp, fp, #24
   138fc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13900:	b	10ecc <__fprintf_chk@plt>
   13904:	movw	r1, #23680	; 0x5c80
   13908:	mov	r0, #0
   1390c:	mov	r2, #5
   13910:	movt	r1, #1
   13914:	bl	10d94 <dcgettext@plt>
   13918:	mov	r2, r0
   1391c:	ldr	r3, [r7]
   13920:	ldr	r0, [r7, #4]
   13924:	str	r0, [sp]
   13928:	b	13a18 <__assert_fail@plt+0x2ae0>
   1392c:	movw	r1, #23703	; 0x5c97
   13930:	mov	r0, #0
   13934:	mov	r2, #5
   13938:	movt	r1, #1
   1393c:	bl	10d94 <dcgettext@plt>
   13940:	ldr	r3, [r7]
   13944:	mov	r2, r0
   13948:	ldmib	r7, {r0, r1}
   1394c:	stm	sp, {r0, r1}
   13950:	b	13a18 <__assert_fail@plt+0x2ae0>
   13954:	movw	r1, #23731	; 0x5cb3
   13958:	mov	r0, #0
   1395c:	mov	r2, #5
   13960:	movt	r1, #1
   13964:	bl	10d94 <dcgettext@plt>
   13968:	ldr	r3, [r7]
   1396c:	mov	r2, r0
   13970:	ldmib	r7, {r0, r1, r7}
   13974:	stm	sp, {r0, r1, r7}
   13978:	b	13a18 <__assert_fail@plt+0x2ae0>
   1397c:	movw	r1, #23763	; 0x5cd3
   13980:	mov	r0, #0
   13984:	mov	r2, #5
   13988:	movt	r1, #1
   1398c:	bl	10d94 <dcgettext@plt>
   13990:	ldr	r3, [r7]
   13994:	mov	r2, r0
   13998:	ldmib	r7, {r0, r1, r6, r7}
   1399c:	stm	sp, {r0, r1, r6, r7}
   139a0:	b	13a18 <__assert_fail@plt+0x2ae0>
   139a4:	movw	r1, #23799	; 0x5cf7
   139a8:	mov	r0, #0
   139ac:	mov	r2, #5
   139b0:	movt	r1, #1
   139b4:	bl	10d94 <dcgettext@plt>
   139b8:	ldr	r3, [r7]
   139bc:	mov	r2, r0
   139c0:	ldmib	r7, {r0, r1, r6}
   139c4:	ldr	r5, [r7, #16]
   139c8:	ldr	r7, [r7, #20]
   139cc:	stm	sp, {r0, r1, r6}
   139d0:	str	r5, [sp, #12]
   139d4:	str	r7, [sp, #16]
   139d8:	b	13a18 <__assert_fail@plt+0x2ae0>
   139dc:	movw	r1, #23839	; 0x5d1f
   139e0:	mov	r0, #0
   139e4:	mov	r2, #5
   139e8:	movt	r1, #1
   139ec:	bl	10d94 <dcgettext@plt>
   139f0:	ldr	r3, [r7]
   139f4:	mov	r2, r0
   139f8:	ldmib	r7, {r0, r1, r6}
   139fc:	ldr	r5, [r7, #16]
   13a00:	ldr	r4, [r7, #20]
   13a04:	ldr	r7, [r7, #24]
   13a08:	stm	sp, {r0, r1, r6}
   13a0c:	str	r5, [sp, #12]
   13a10:	str	r4, [sp, #16]
   13a14:	str	r7, [sp, #20]
   13a18:	mov	r0, r8
   13a1c:	mov	r1, #1
   13a20:	bl	10ecc <__fprintf_chk@plt>
   13a24:	sub	sp, fp, #24
   13a28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a2c:	movw	r1, #23931	; 0x5d7b
   13a30:	movt	r1, #1
   13a34:	mov	r0, #0
   13a38:	mov	r2, #5
   13a3c:	bl	10d94 <dcgettext@plt>
   13a40:	mov	ip, r0
   13a44:	ldr	r3, [r7]
   13a48:	ldr	r0, [r7, #4]
   13a4c:	ldr	r1, [r7, #8]
   13a50:	ldr	r6, [r7, #12]
   13a54:	ldr	r5, [r7, #16]
   13a58:	ldr	r4, [r7, #20]
   13a5c:	ldr	r2, [r7, #24]
   13a60:	ldr	lr, [r7, #28]
   13a64:	ldr	r7, [r7, #32]
   13a68:	stm	sp, {r0, r1, r6}
   13a6c:	str	r5, [sp, #12]
   13a70:	str	r4, [sp, #16]
   13a74:	str	r2, [sp, #20]
   13a78:	str	lr, [sp, #24]
   13a7c:	str	r7, [sp, #28]
   13a80:	b	13ac8 <__assert_fail@plt+0x2b90>
   13a84:	movw	r1, #23883	; 0x5d4b
   13a88:	mov	r0, #0
   13a8c:	mov	r2, #5
   13a90:	movt	r1, #1
   13a94:	bl	10d94 <dcgettext@plt>
   13a98:	mov	ip, r0
   13a9c:	ldr	r3, [r7]
   13aa0:	ldmib	r7, {r0, r1, r6}
   13aa4:	ldr	r5, [r7, #16]
   13aa8:	ldr	r4, [r7, #20]
   13aac:	ldr	r2, [r7, #24]
   13ab0:	ldr	r7, [r7, #28]
   13ab4:	stm	sp, {r0, r1, r6}
   13ab8:	str	r5, [sp, #12]
   13abc:	str	r4, [sp, #16]
   13ac0:	str	r2, [sp, #20]
   13ac4:	str	r7, [sp, #24]
   13ac8:	mov	r0, r8
   13acc:	mov	r1, #1
   13ad0:	mov	r2, ip
   13ad4:	bl	10ecc <__fprintf_chk@plt>
   13ad8:	sub	sp, fp, #24
   13adc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ae0:	push	{r4, sl, fp, lr}
   13ae4:	add	fp, sp, #8
   13ae8:	sub	sp, sp, #8
   13aec:	ldr	ip, [fp, #8]
   13af0:	mov	lr, #0
   13af4:	ldr	r4, [ip, lr, lsl #2]
   13af8:	add	lr, lr, #1
   13afc:	cmp	r4, #0
   13b00:	bne	13af4 <__assert_fail@plt+0x2bbc>
   13b04:	sub	r4, lr, #1
   13b08:	str	ip, [sp]
   13b0c:	str	r4, [sp, #4]
   13b10:	bl	137a4 <__assert_fail@plt+0x286c>
   13b14:	sub	sp, fp, #8
   13b18:	pop	{r4, sl, fp, pc}
   13b1c:	push	{fp, lr}
   13b20:	mov	fp, sp
   13b24:	sub	sp, sp, #48	; 0x30
   13b28:	ldr	ip, [fp, #8]
   13b2c:	ldr	lr, [ip]
   13b30:	cmp	lr, #0
   13b34:	str	lr, [sp, #8]
   13b38:	beq	13bd4 <__assert_fail@plt+0x2c9c>
   13b3c:	ldr	lr, [ip, #4]
   13b40:	cmp	lr, #0
   13b44:	str	lr, [sp, #12]
   13b48:	beq	13bdc <__assert_fail@plt+0x2ca4>
   13b4c:	ldr	lr, [ip, #8]
   13b50:	cmp	lr, #0
   13b54:	str	lr, [sp, #16]
   13b58:	beq	13be4 <__assert_fail@plt+0x2cac>
   13b5c:	ldr	lr, [ip, #12]
   13b60:	cmp	lr, #0
   13b64:	str	lr, [sp, #20]
   13b68:	beq	13bec <__assert_fail@plt+0x2cb4>
   13b6c:	ldr	lr, [ip, #16]
   13b70:	cmp	lr, #0
   13b74:	str	lr, [sp, #24]
   13b78:	beq	13bf4 <__assert_fail@plt+0x2cbc>
   13b7c:	ldr	lr, [ip, #20]
   13b80:	cmp	lr, #0
   13b84:	str	lr, [sp, #28]
   13b88:	beq	13bfc <__assert_fail@plt+0x2cc4>
   13b8c:	ldr	lr, [ip, #24]
   13b90:	cmp	lr, #0
   13b94:	str	lr, [sp, #32]
   13b98:	beq	13c04 <__assert_fail@plt+0x2ccc>
   13b9c:	ldr	lr, [ip, #28]
   13ba0:	cmp	lr, #0
   13ba4:	str	lr, [sp, #36]	; 0x24
   13ba8:	beq	13c0c <__assert_fail@plt+0x2cd4>
   13bac:	ldr	lr, [ip, #32]
   13bb0:	cmp	lr, #0
   13bb4:	str	lr, [sp, #40]	; 0x28
   13bb8:	beq	13c14 <__assert_fail@plt+0x2cdc>
   13bbc:	ldr	lr, [ip, #36]	; 0x24
   13bc0:	mov	ip, #10
   13bc4:	cmp	lr, #0
   13bc8:	str	lr, [sp, #44]	; 0x2c
   13bcc:	movweq	ip, #9
   13bd0:	b	13c18 <__assert_fail@plt+0x2ce0>
   13bd4:	mov	ip, #0
   13bd8:	b	13c18 <__assert_fail@plt+0x2ce0>
   13bdc:	mov	ip, #1
   13be0:	b	13c18 <__assert_fail@plt+0x2ce0>
   13be4:	mov	ip, #2
   13be8:	b	13c18 <__assert_fail@plt+0x2ce0>
   13bec:	mov	ip, #3
   13bf0:	b	13c18 <__assert_fail@plt+0x2ce0>
   13bf4:	mov	ip, #4
   13bf8:	b	13c18 <__assert_fail@plt+0x2ce0>
   13bfc:	mov	ip, #5
   13c00:	b	13c18 <__assert_fail@plt+0x2ce0>
   13c04:	mov	ip, #6
   13c08:	b	13c18 <__assert_fail@plt+0x2ce0>
   13c0c:	mov	ip, #7
   13c10:	b	13c18 <__assert_fail@plt+0x2ce0>
   13c14:	mov	ip, #8
   13c18:	add	lr, sp, #8
   13c1c:	str	ip, [sp, #4]
   13c20:	str	lr, [sp]
   13c24:	bl	137a4 <__assert_fail@plt+0x286c>
   13c28:	mov	sp, fp
   13c2c:	pop	{fp, pc}
   13c30:	push	{fp, lr}
   13c34:	mov	fp, sp
   13c38:	sub	sp, sp, #56	; 0x38
   13c3c:	add	ip, fp, #8
   13c40:	str	ip, [sp, #12]
   13c44:	ldr	lr, [fp, #8]
   13c48:	cmp	lr, #0
   13c4c:	str	lr, [sp, #16]
   13c50:	beq	13cec <__assert_fail@plt+0x2db4>
   13c54:	ldr	lr, [ip, #4]
   13c58:	cmp	lr, #0
   13c5c:	str	lr, [sp, #20]
   13c60:	beq	13cf4 <__assert_fail@plt+0x2dbc>
   13c64:	ldr	lr, [ip, #8]
   13c68:	cmp	lr, #0
   13c6c:	str	lr, [sp, #24]
   13c70:	beq	13cfc <__assert_fail@plt+0x2dc4>
   13c74:	ldr	lr, [ip, #12]
   13c78:	cmp	lr, #0
   13c7c:	str	lr, [sp, #28]
   13c80:	beq	13d04 <__assert_fail@plt+0x2dcc>
   13c84:	ldr	lr, [ip, #16]
   13c88:	cmp	lr, #0
   13c8c:	str	lr, [sp, #32]
   13c90:	beq	13d0c <__assert_fail@plt+0x2dd4>
   13c94:	ldr	lr, [ip, #20]
   13c98:	cmp	lr, #0
   13c9c:	str	lr, [sp, #36]	; 0x24
   13ca0:	beq	13d14 <__assert_fail@plt+0x2ddc>
   13ca4:	ldr	lr, [ip, #24]
   13ca8:	cmp	lr, #0
   13cac:	str	lr, [sp, #40]	; 0x28
   13cb0:	beq	13d1c <__assert_fail@plt+0x2de4>
   13cb4:	ldr	lr, [ip, #28]
   13cb8:	cmp	lr, #0
   13cbc:	str	lr, [sp, #44]	; 0x2c
   13cc0:	beq	13d24 <__assert_fail@plt+0x2dec>
   13cc4:	ldr	lr, [ip, #32]
   13cc8:	cmp	lr, #0
   13ccc:	str	lr, [sp, #48]	; 0x30
   13cd0:	beq	13d2c <__assert_fail@plt+0x2df4>
   13cd4:	ldr	lr, [ip, #36]	; 0x24
   13cd8:	mov	ip, #10
   13cdc:	cmp	lr, #0
   13ce0:	str	lr, [sp, #52]	; 0x34
   13ce4:	movweq	ip, #9
   13ce8:	b	13d30 <__assert_fail@plt+0x2df8>
   13cec:	mov	ip, #0
   13cf0:	b	13d30 <__assert_fail@plt+0x2df8>
   13cf4:	mov	ip, #1
   13cf8:	b	13d30 <__assert_fail@plt+0x2df8>
   13cfc:	mov	ip, #2
   13d00:	b	13d30 <__assert_fail@plt+0x2df8>
   13d04:	mov	ip, #3
   13d08:	b	13d30 <__assert_fail@plt+0x2df8>
   13d0c:	mov	ip, #4
   13d10:	b	13d30 <__assert_fail@plt+0x2df8>
   13d14:	mov	ip, #5
   13d18:	b	13d30 <__assert_fail@plt+0x2df8>
   13d1c:	mov	ip, #6
   13d20:	b	13d30 <__assert_fail@plt+0x2df8>
   13d24:	mov	ip, #7
   13d28:	b	13d30 <__assert_fail@plt+0x2df8>
   13d2c:	mov	ip, #8
   13d30:	add	lr, sp, #16
   13d34:	str	ip, [sp, #4]
   13d38:	str	lr, [sp]
   13d3c:	bl	137a4 <__assert_fail@plt+0x286c>
   13d40:	mov	sp, fp
   13d44:	pop	{fp, pc}
   13d48:	push	{fp, lr}
   13d4c:	mov	fp, sp
   13d50:	movw	r0, #28980	; 0x7134
   13d54:	movt	r0, #2
   13d58:	ldr	r1, [r0]
   13d5c:	movw	r0, #23017	; 0x59e9
   13d60:	movt	r0, #1
   13d64:	bl	10d1c <fputs_unlocked@plt>
   13d68:	movw	r1, #24043	; 0x5deb
   13d6c:	mov	r0, #0
   13d70:	mov	r2, #5
   13d74:	movt	r1, #1
   13d78:	bl	10d94 <dcgettext@plt>
   13d7c:	movw	r2, #24063	; 0x5dff
   13d80:	mov	r1, r0
   13d84:	mov	r0, #1
   13d88:	movt	r2, #1
   13d8c:	bl	10eb4 <__printf_chk@plt>
   13d90:	movw	r1, #24085	; 0x5e15
   13d94:	mov	r0, #0
   13d98:	mov	r2, #5
   13d9c:	movt	r1, #1
   13da0:	bl	10d94 <dcgettext@plt>
   13da4:	movw	r2, #22494	; 0x57de
   13da8:	movw	r3, #22826	; 0x592a
   13dac:	mov	r1, r0
   13db0:	mov	r0, #1
   13db4:	movt	r2, #1
   13db8:	movt	r3, #1
   13dbc:	bl	10eb4 <__printf_chk@plt>
   13dc0:	movw	r1, #24105	; 0x5e29
   13dc4:	mov	r0, #0
   13dc8:	mov	r2, #5
   13dcc:	movt	r1, #1
   13dd0:	bl	10d94 <dcgettext@plt>
   13dd4:	movw	r2, #24144	; 0x5e50
   13dd8:	mov	r1, r0
   13ddc:	mov	r0, #1
   13de0:	movt	r2, #1
   13de4:	pop	{fp, lr}
   13de8:	b	10eb4 <__printf_chk@plt>
   13dec:	push	{r4, r5, r6, sl, fp, lr}
   13df0:	add	fp, sp, #16
   13df4:	mov	r4, r2
   13df8:	mov	r5, r1
   13dfc:	mov	r6, r0
   13e00:	bl	15360 <__assert_fail@plt+0x4428>
   13e04:	cmp	r0, #0
   13e08:	popne	{r4, r5, r6, sl, fp, pc}
   13e0c:	cmp	r6, #0
   13e10:	beq	13e24 <__assert_fail@plt+0x2eec>
   13e14:	cmp	r5, #0
   13e18:	cmpne	r4, #0
   13e1c:	bne	13e24 <__assert_fail@plt+0x2eec>
   13e20:	pop	{r4, r5, r6, sl, fp, pc}
   13e24:	bl	143c4 <__assert_fail@plt+0x348c>
   13e28:	push	{r4, r5, r6, sl, fp, lr}
   13e2c:	add	fp, sp, #16
   13e30:	mov	r4, r2
   13e34:	mov	r5, r1
   13e38:	mov	r6, r0
   13e3c:	bl	15360 <__assert_fail@plt+0x4428>
   13e40:	cmp	r0, #0
   13e44:	popne	{r4, r5, r6, sl, fp, pc}
   13e48:	cmp	r6, #0
   13e4c:	beq	13e60 <__assert_fail@plt+0x2f28>
   13e50:	cmp	r5, #0
   13e54:	cmpne	r4, #0
   13e58:	bne	13e60 <__assert_fail@plt+0x2f28>
   13e5c:	pop	{r4, r5, r6, sl, fp, pc}
   13e60:	bl	143c4 <__assert_fail@plt+0x348c>
   13e64:	push	{fp, lr}
   13e68:	mov	fp, sp
   13e6c:	bl	14ff0 <__assert_fail@plt+0x40b8>
   13e70:	cmp	r0, #0
   13e74:	popne	{fp, pc}
   13e78:	bl	143c4 <__assert_fail@plt+0x348c>
   13e7c:	push	{fp, lr}
   13e80:	mov	fp, sp
   13e84:	bl	14ff0 <__assert_fail@plt+0x40b8>
   13e88:	cmp	r0, #0
   13e8c:	popne	{fp, pc}
   13e90:	bl	143c4 <__assert_fail@plt+0x348c>
   13e94:	push	{fp, lr}
   13e98:	mov	fp, sp
   13e9c:	bl	14ff0 <__assert_fail@plt+0x40b8>
   13ea0:	cmp	r0, #0
   13ea4:	popne	{fp, pc}
   13ea8:	bl	143c4 <__assert_fail@plt+0x348c>
   13eac:	push	{r4, r5, fp, lr}
   13eb0:	add	fp, sp, #8
   13eb4:	mov	r4, r1
   13eb8:	mov	r5, r0
   13ebc:	bl	15020 <__assert_fail@plt+0x40e8>
   13ec0:	cmp	r0, #0
   13ec4:	popne	{r4, r5, fp, pc}
   13ec8:	cmp	r5, #0
   13ecc:	beq	13edc <__assert_fail@plt+0x2fa4>
   13ed0:	cmp	r4, #0
   13ed4:	bne	13edc <__assert_fail@plt+0x2fa4>
   13ed8:	pop	{r4, r5, fp, pc}
   13edc:	bl	143c4 <__assert_fail@plt+0x348c>
   13ee0:	push	{fp, lr}
   13ee4:	mov	fp, sp
   13ee8:	cmp	r1, #0
   13eec:	orreq	r1, r1, #1
   13ef0:	bl	15020 <__assert_fail@plt+0x40e8>
   13ef4:	cmp	r0, #0
   13ef8:	popne	{fp, pc}
   13efc:	bl	143c4 <__assert_fail@plt+0x348c>
   13f00:	push	{fp, lr}
   13f04:	mov	fp, sp
   13f08:	clz	r3, r2
   13f0c:	lsr	ip, r3, #5
   13f10:	clz	r3, r1
   13f14:	lsr	r3, r3, #5
   13f18:	orrs	r3, r3, ip
   13f1c:	movwne	r1, #1
   13f20:	movwne	r2, #1
   13f24:	bl	15360 <__assert_fail@plt+0x4428>
   13f28:	cmp	r0, #0
   13f2c:	popne	{fp, pc}
   13f30:	bl	143c4 <__assert_fail@plt+0x348c>
   13f34:	push	{fp, lr}
   13f38:	mov	fp, sp
   13f3c:	mov	r2, r1
   13f40:	mov	r1, r0
   13f44:	mov	r0, #0
   13f48:	bl	15360 <__assert_fail@plt+0x4428>
   13f4c:	cmp	r0, #0
   13f50:	popne	{fp, pc}
   13f54:	bl	143c4 <__assert_fail@plt+0x348c>
   13f58:	push	{fp, lr}
   13f5c:	mov	fp, sp
   13f60:	mov	r2, r1
   13f64:	mov	r1, r0
   13f68:	clz	r0, r2
   13f6c:	clz	r3, r1
   13f70:	lsr	r0, r0, #5
   13f74:	lsr	r3, r3, #5
   13f78:	orrs	r0, r3, r0
   13f7c:	movwne	r1, #1
   13f80:	movwne	r2, #1
   13f84:	mov	r0, #0
   13f88:	bl	15360 <__assert_fail@plt+0x4428>
   13f8c:	cmp	r0, #0
   13f90:	popne	{fp, pc}
   13f94:	bl	143c4 <__assert_fail@plt+0x348c>
   13f98:	push	{r4, r5, r6, sl, fp, lr}
   13f9c:	add	fp, sp, #16
   13fa0:	ldr	r5, [r1]
   13fa4:	mov	r4, r1
   13fa8:	mov	r6, r0
   13fac:	cmp	r0, #0
   13fb0:	beq	13fc8 <__assert_fail@plt+0x3090>
   13fb4:	mov	r0, #1
   13fb8:	add	r0, r0, r5, lsr #1
   13fbc:	adds	r5, r5, r0
   13fc0:	bcc	13fd0 <__assert_fail@plt+0x3098>
   13fc4:	b	1400c <__assert_fail@plt+0x30d4>
   13fc8:	cmp	r5, #0
   13fcc:	movweq	r5, #64	; 0x40
   13fd0:	mov	r0, r6
   13fd4:	mov	r1, r5
   13fd8:	mov	r2, #1
   13fdc:	bl	15360 <__assert_fail@plt+0x4428>
   13fe0:	cmp	r5, #0
   13fe4:	mov	r1, r5
   13fe8:	movwne	r1, #1
   13fec:	cmp	r0, #0
   13ff0:	bne	14004 <__assert_fail@plt+0x30cc>
   13ff4:	clz	r2, r6
   13ff8:	lsr	r2, r2, #5
   13ffc:	orrs	r1, r2, r1
   14000:	bne	1400c <__assert_fail@plt+0x30d4>
   14004:	str	r5, [r4]
   14008:	pop	{r4, r5, r6, sl, fp, pc}
   1400c:	bl	143c4 <__assert_fail@plt+0x348c>
   14010:	push	{r4, r5, r6, r7, fp, lr}
   14014:	add	fp, sp, #16
   14018:	ldr	r5, [r1]
   1401c:	mov	r6, r2
   14020:	mov	r4, r1
   14024:	mov	r7, r0
   14028:	cmp	r0, #0
   1402c:	beq	14044 <__assert_fail@plt+0x310c>
   14030:	mov	r0, #1
   14034:	add	r0, r0, r5, lsr #1
   14038:	adds	r5, r5, r0
   1403c:	bcc	1405c <__assert_fail@plt+0x3124>
   14040:	b	14090 <__assert_fail@plt+0x3158>
   14044:	cmp	r5, #0
   14048:	bne	1405c <__assert_fail@plt+0x3124>
   1404c:	mov	r0, #64	; 0x40
   14050:	cmp	r6, #64	; 0x40
   14054:	udiv	r5, r0, r6
   14058:	addhi	r5, r5, #1
   1405c:	mov	r0, r7
   14060:	mov	r1, r5
   14064:	mov	r2, r6
   14068:	bl	15360 <__assert_fail@plt+0x4428>
   1406c:	cmp	r0, #0
   14070:	bne	14088 <__assert_fail@plt+0x3150>
   14074:	cmp	r7, #0
   14078:	beq	14090 <__assert_fail@plt+0x3158>
   1407c:	cmp	r6, #0
   14080:	cmpne	r5, #0
   14084:	bne	14090 <__assert_fail@plt+0x3158>
   14088:	str	r5, [r4]
   1408c:	pop	{r4, r5, r6, r7, fp, pc}
   14090:	bl	143c4 <__assert_fail@plt+0x348c>
   14094:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14098:	add	fp, sp, #24
   1409c:	mov	r8, r1
   140a0:	ldr	r1, [r1]
   140a4:	mov	r5, r0
   140a8:	add	r0, r1, r1, asr #1
   140ac:	cmp	r0, r1
   140b0:	mvnvs	r0, #-2147483648	; 0x80000000
   140b4:	cmp	r0, r3
   140b8:	mov	r7, r0
   140bc:	movgt	r7, r3
   140c0:	cmn	r3, #1
   140c4:	movle	r7, r0
   140c8:	ldr	r0, [fp, #8]
   140cc:	cmn	r0, #1
   140d0:	ble	140f8 <__assert_fail@plt+0x31c0>
   140d4:	cmp	r0, #0
   140d8:	beq	1414c <__assert_fail@plt+0x3214>
   140dc:	cmn	r7, #1
   140e0:	ble	14120 <__assert_fail@plt+0x31e8>
   140e4:	mvn	r4, #-2147483648	; 0x80000000
   140e8:	udiv	r6, r4, r0
   140ec:	cmp	r6, r7
   140f0:	bge	1414c <__assert_fail@plt+0x3214>
   140f4:	b	1415c <__assert_fail@plt+0x3224>
   140f8:	cmn	r7, #1
   140fc:	ble	1413c <__assert_fail@plt+0x3204>
   14100:	cmn	r0, #1
   14104:	beq	1414c <__assert_fail@plt+0x3214>
   14108:	mov	r6, #-2147483648	; 0x80000000
   1410c:	mvn	r4, #-2147483648	; 0x80000000
   14110:	sdiv	r6, r6, r0
   14114:	cmp	r6, r7
   14118:	bge	1414c <__assert_fail@plt+0x3214>
   1411c:	b	1415c <__assert_fail@plt+0x3224>
   14120:	beq	1414c <__assert_fail@plt+0x3214>
   14124:	mov	r6, #-2147483648	; 0x80000000
   14128:	mvn	r4, #-2147483648	; 0x80000000
   1412c:	sdiv	r6, r6, r7
   14130:	cmp	r6, r0
   14134:	bge	1414c <__assert_fail@plt+0x3214>
   14138:	b	1415c <__assert_fail@plt+0x3224>
   1413c:	mvn	r4, #-2147483648	; 0x80000000
   14140:	sdiv	r6, r4, r0
   14144:	cmp	r7, r6
   14148:	blt	1415c <__assert_fail@plt+0x3224>
   1414c:	mul	r6, r7, r0
   14150:	mov	r4, #64	; 0x40
   14154:	cmp	r6, #63	; 0x3f
   14158:	bgt	14164 <__assert_fail@plt+0x322c>
   1415c:	sdiv	r7, r4, r0
   14160:	mul	r6, r7, r0
   14164:	cmp	r5, #0
   14168:	moveq	r4, #0
   1416c:	streq	r4, [r8]
   14170:	sub	r4, r7, r1
   14174:	cmp	r4, r2
   14178:	bge	14224 <__assert_fail@plt+0x32ec>
   1417c:	add	r7, r1, r2
   14180:	mov	r6, #0
   14184:	mov	r2, #0
   14188:	cmp	r7, r3
   1418c:	movwgt	r6, #1
   14190:	cmn	r3, #1
   14194:	movwgt	r2, #1
   14198:	cmp	r7, r1
   1419c:	bvs	14258 <__assert_fail@plt+0x3320>
   141a0:	ands	r1, r2, r6
   141a4:	bne	14258 <__assert_fail@plt+0x3320>
   141a8:	cmn	r0, #1
   141ac:	ble	141d4 <__assert_fail@plt+0x329c>
   141b0:	cmp	r0, #0
   141b4:	beq	14220 <__assert_fail@plt+0x32e8>
   141b8:	cmn	r7, #1
   141bc:	ble	141f8 <__assert_fail@plt+0x32c0>
   141c0:	mvn	r1, #-2147483648	; 0x80000000
   141c4:	udiv	r1, r1, r0
   141c8:	cmp	r1, r7
   141cc:	bge	14220 <__assert_fail@plt+0x32e8>
   141d0:	b	14258 <__assert_fail@plt+0x3320>
   141d4:	cmn	r7, #1
   141d8:	ble	14210 <__assert_fail@plt+0x32d8>
   141dc:	cmn	r0, #1
   141e0:	beq	14220 <__assert_fail@plt+0x32e8>
   141e4:	mov	r1, #-2147483648	; 0x80000000
   141e8:	sdiv	r1, r1, r0
   141ec:	cmp	r1, r7
   141f0:	bge	14220 <__assert_fail@plt+0x32e8>
   141f4:	b	14258 <__assert_fail@plt+0x3320>
   141f8:	beq	14220 <__assert_fail@plt+0x32e8>
   141fc:	mov	r1, #-2147483648	; 0x80000000
   14200:	sdiv	r1, r1, r7
   14204:	cmp	r1, r0
   14208:	bge	14220 <__assert_fail@plt+0x32e8>
   1420c:	b	14258 <__assert_fail@plt+0x3320>
   14210:	mvn	r1, #-2147483648	; 0x80000000
   14214:	sdiv	r1, r1, r0
   14218:	cmp	r7, r1
   1421c:	blt	14258 <__assert_fail@plt+0x3320>
   14220:	mul	r6, r7, r0
   14224:	mov	r0, r5
   14228:	mov	r1, r6
   1422c:	bl	15020 <__assert_fail@plt+0x40e8>
   14230:	cmp	r6, #0
   14234:	movwne	r6, #1
   14238:	cmp	r0, #0
   1423c:	bne	14250 <__assert_fail@plt+0x3318>
   14240:	clz	r1, r5
   14244:	lsr	r1, r1, #5
   14248:	orrs	r1, r1, r6
   1424c:	bne	14258 <__assert_fail@plt+0x3320>
   14250:	str	r7, [r8]
   14254:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14258:	bl	143c4 <__assert_fail@plt+0x348c>
   1425c:	push	{fp, lr}
   14260:	mov	fp, sp
   14264:	mov	r1, #1
   14268:	bl	14f9c <__assert_fail@plt+0x4064>
   1426c:	cmp	r0, #0
   14270:	popne	{fp, pc}
   14274:	bl	143c4 <__assert_fail@plt+0x348c>
   14278:	push	{fp, lr}
   1427c:	mov	fp, sp
   14280:	bl	14f9c <__assert_fail@plt+0x4064>
   14284:	cmp	r0, #0
   14288:	popne	{fp, pc}
   1428c:	bl	143c4 <__assert_fail@plt+0x348c>
   14290:	push	{fp, lr}
   14294:	mov	fp, sp
   14298:	mov	r1, #1
   1429c:	bl	14f9c <__assert_fail@plt+0x4064>
   142a0:	cmp	r0, #0
   142a4:	popne	{fp, pc}
   142a8:	bl	143c4 <__assert_fail@plt+0x348c>
   142ac:	push	{fp, lr}
   142b0:	mov	fp, sp
   142b4:	bl	14f9c <__assert_fail@plt+0x4064>
   142b8:	cmp	r0, #0
   142bc:	popne	{fp, pc}
   142c0:	bl	143c4 <__assert_fail@plt+0x348c>
   142c4:	push	{r4, r5, r6, sl, fp, lr}
   142c8:	add	fp, sp, #16
   142cc:	mov	r5, r0
   142d0:	mov	r0, r1
   142d4:	mov	r4, r1
   142d8:	bl	14ff0 <__assert_fail@plt+0x40b8>
   142dc:	cmp	r0, #0
   142e0:	beq	142fc <__assert_fail@plt+0x33c4>
   142e4:	mov	r1, r5
   142e8:	mov	r2, r4
   142ec:	mov	r6, r0
   142f0:	bl	10d64 <memcpy@plt>
   142f4:	mov	r0, r6
   142f8:	pop	{r4, r5, r6, sl, fp, pc}
   142fc:	bl	143c4 <__assert_fail@plt+0x348c>
   14300:	push	{r4, r5, r6, sl, fp, lr}
   14304:	add	fp, sp, #16
   14308:	mov	r5, r0
   1430c:	mov	r0, r1
   14310:	mov	r4, r1
   14314:	bl	14ff0 <__assert_fail@plt+0x40b8>
   14318:	cmp	r0, #0
   1431c:	beq	14338 <__assert_fail@plt+0x3400>
   14320:	mov	r1, r5
   14324:	mov	r2, r4
   14328:	mov	r6, r0
   1432c:	bl	10d64 <memcpy@plt>
   14330:	mov	r0, r6
   14334:	pop	{r4, r5, r6, sl, fp, pc}
   14338:	bl	143c4 <__assert_fail@plt+0x348c>
   1433c:	push	{r4, r5, r6, sl, fp, lr}
   14340:	add	fp, sp, #16
   14344:	mov	r5, r0
   14348:	add	r0, r1, #1
   1434c:	mov	r4, r1
   14350:	bl	14ff0 <__assert_fail@plt+0x40b8>
   14354:	cmp	r0, #0
   14358:	beq	14380 <__assert_fail@plt+0x3448>
   1435c:	mov	r6, r0
   14360:	mov	r0, #0
   14364:	mov	r1, r5
   14368:	mov	r2, r4
   1436c:	strb	r0, [r6, r4]
   14370:	mov	r0, r6
   14374:	bl	10d64 <memcpy@plt>
   14378:	mov	r0, r6
   1437c:	pop	{r4, r5, r6, sl, fp, pc}
   14380:	bl	143c4 <__assert_fail@plt+0x348c>
   14384:	push	{r4, r5, r6, sl, fp, lr}
   14388:	add	fp, sp, #16
   1438c:	mov	r4, r0
   14390:	bl	10e78 <strlen@plt>
   14394:	add	r5, r0, #1
   14398:	mov	r0, r5
   1439c:	bl	14ff0 <__assert_fail@plt+0x40b8>
   143a0:	cmp	r0, #0
   143a4:	beq	143c0 <__assert_fail@plt+0x3488>
   143a8:	mov	r1, r4
   143ac:	mov	r2, r5
   143b0:	mov	r6, r0
   143b4:	bl	10d64 <memcpy@plt>
   143b8:	mov	r0, r6
   143bc:	pop	{r4, r5, r6, sl, fp, pc}
   143c0:	bl	143c4 <__assert_fail@plt+0x348c>
   143c4:	push	{fp, lr}
   143c8:	mov	fp, sp
   143cc:	movw	r0, #28892	; 0x70dc
   143d0:	movw	r1, #24220	; 0x5e9c
   143d4:	mov	r2, #5
   143d8:	movt	r0, #2
   143dc:	movt	r1, #1
   143e0:	ldr	r4, [r0]
   143e4:	mov	r0, #0
   143e8:	bl	10d94 <dcgettext@plt>
   143ec:	movw	r2, #23183	; 0x5a8f
   143f0:	mov	r3, r0
   143f4:	mov	r0, r4
   143f8:	mov	r1, #0
   143fc:	movt	r2, #1
   14400:	bl	10e0c <error@plt>
   14404:	bl	10f2c <abort@plt>
   14408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1440c:	add	fp, sp, #28
   14410:	sub	sp, sp, #12
   14414:	cmp	r2, #37	; 0x25
   14418:	bcs	14f7c <__assert_fail@plt+0x4044>
   1441c:	ldr	r8, [fp, #8]
   14420:	mov	r9, r3
   14424:	mov	r7, r2
   14428:	mov	r4, r1
   1442c:	mov	r5, r0
   14430:	bl	10e90 <__errno_location@plt>
   14434:	add	sl, sp, #8
   14438:	cmp	r4, #0
   1443c:	mov	r6, r0
   14440:	mov	r0, #0
   14444:	mov	r2, r7
   14448:	movne	sl, r4
   1444c:	str	r0, [r6]
   14450:	mov	r0, r5
   14454:	mov	r1, sl
   14458:	bl	10d34 <strtol@plt>
   1445c:	ldr	r4, [sl]
   14460:	str	r9, [sp, #4]
   14464:	cmp	r4, r5
   14468:	beq	145cc <__assert_fail@plt+0x3694>
   1446c:	mov	r7, r0
   14470:	ldr	r0, [r6]
   14474:	cmp	r0, #0
   14478:	beq	145ec <__assert_fail@plt+0x36b4>
   1447c:	mov	r9, #4
   14480:	cmp	r0, #34	; 0x22
   14484:	bne	145e0 <__assert_fail@plt+0x36a8>
   14488:	mov	r9, #1
   1448c:	cmp	r8, #0
   14490:	beq	14f50 <__assert_fail@plt+0x4018>
   14494:	ldrb	r5, [r4]
   14498:	cmp	r5, #0
   1449c:	beq	14f50 <__assert_fail@plt+0x4018>
   144a0:	mov	r0, r8
   144a4:	mov	r1, r5
   144a8:	bl	10e84 <strchr@plt>
   144ac:	cmp	r0, #0
   144b0:	beq	147cc <__assert_fail@plt+0x3894>
   144b4:	sub	r0, r5, #69	; 0x45
   144b8:	mov	ip, #1
   144bc:	mov	r6, #1024	; 0x400
   144c0:	cmp	r0, #47	; 0x2f
   144c4:	bhi	14628 <__assert_fail@plt+0x36f0>
   144c8:	add	r1, pc, #0
   144cc:	ldr	pc, [r1, r0, lsl #2]
   144d0:	muleq	r1, r0, r5
   144d4:	andeq	r4, r1, r8, lsr #12
   144d8:	muleq	r1, r0, r5
   144dc:	andeq	r4, r1, r8, lsr #12
   144e0:	andeq	r4, r1, r8, lsr #12
   144e4:	andeq	r4, r1, r8, lsr #12
   144e8:	muleq	r1, r0, r5
   144ec:	andeq	r4, r1, r8, lsr #12
   144f0:	muleq	r1, r0, r5
   144f4:	andeq	r4, r1, r8, lsr #12
   144f8:	andeq	r4, r1, r8, lsr #12
   144fc:	muleq	r1, r0, r5
   14500:	andeq	r4, r1, r8, lsr #12
   14504:	andeq	r4, r1, r8, lsr #12
   14508:	andeq	r4, r1, r8, lsr #12
   1450c:	muleq	r1, r0, r5
   14510:	andeq	r4, r1, r8, lsr #12
   14514:	andeq	r4, r1, r8, lsr #12
   14518:	andeq	r4, r1, r8, lsr #12
   1451c:	andeq	r4, r1, r8, lsr #12
   14520:	muleq	r1, r0, r5
   14524:	muleq	r1, r0, r5
   14528:	andeq	r4, r1, r8, lsr #12
   1452c:	andeq	r4, r1, r8, lsr #12
   14530:	andeq	r4, r1, r8, lsr #12
   14534:	andeq	r4, r1, r8, lsr #12
   14538:	andeq	r4, r1, r8, lsr #12
   1453c:	andeq	r4, r1, r8, lsr #12
   14540:	andeq	r4, r1, r8, lsr #12
   14544:	andeq	r4, r1, r8, lsr #12
   14548:	andeq	r4, r1, r8, lsr #12
   1454c:	andeq	r4, r1, r8, lsr #12
   14550:	andeq	r4, r1, r8, lsr #12
   14554:	andeq	r4, r1, r8, lsr #12
   14558:	muleq	r1, r0, r5
   1455c:	andeq	r4, r1, r8, lsr #12
   14560:	andeq	r4, r1, r8, lsr #12
   14564:	andeq	r4, r1, r8, lsr #12
   14568:	muleq	r1, r0, r5
   1456c:	andeq	r4, r1, r8, lsr #12
   14570:	muleq	r1, r0, r5
   14574:	andeq	r4, r1, r8, lsr #12
   14578:	andeq	r4, r1, r8, lsr #12
   1457c:	andeq	r4, r1, r8, lsr #12
   14580:	andeq	r4, r1, r8, lsr #12
   14584:	andeq	r4, r1, r8, lsr #12
   14588:	andeq	r4, r1, r8, lsr #12
   1458c:	muleq	r1, r0, r5
   14590:	mov	r0, r8
   14594:	mov	r1, #48	; 0x30
   14598:	bl	10e84 <strchr@plt>
   1459c:	cmp	r0, #0
   145a0:	beq	14624 <__assert_fail@plt+0x36ec>
   145a4:	ldrb	r0, [r4, #1]
   145a8:	cmp	r0, #66	; 0x42
   145ac:	cmpne	r0, #68	; 0x44
   145b0:	bne	14738 <__assert_fail@plt+0x3800>
   145b4:	mov	ip, #2
   145b8:	mov	r6, #1000	; 0x3e8
   145bc:	sub	r1, r5, #66	; 0x42
   145c0:	cmp	r1, #53	; 0x35
   145c4:	bls	14634 <__assert_fail@plt+0x36fc>
   145c8:	b	147cc <__assert_fail@plt+0x3894>
   145cc:	cmp	r8, #0
   145d0:	mov	r9, #4
   145d4:	ldrbne	r1, [r5]
   145d8:	cmpne	r1, #0
   145dc:	bne	145fc <__assert_fail@plt+0x36c4>
   145e0:	mov	r0, r9
   145e4:	sub	sp, fp, #28
   145e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145ec:	mov	r9, r0
   145f0:	cmp	r8, #0
   145f4:	bne	14494 <__assert_fail@plt+0x355c>
   145f8:	b	14f50 <__assert_fail@plt+0x4018>
   145fc:	mov	r0, r8
   14600:	bl	10e84 <strchr@plt>
   14604:	cmp	r0, #0
   14608:	beq	145e0 <__assert_fail@plt+0x36a8>
   1460c:	mov	r7, #1
   14610:	mov	r9, #0
   14614:	ldrb	r5, [r4]
   14618:	cmp	r5, #0
   1461c:	bne	144a0 <__assert_fail@plt+0x3568>
   14620:	b	14f50 <__assert_fail@plt+0x4018>
   14624:	mov	ip, #1
   14628:	sub	r1, r5, #66	; 0x42
   1462c:	cmp	r1, #53	; 0x35
   14630:	bhi	147cc <__assert_fail@plt+0x3894>
   14634:	add	r2, pc, #4
   14638:	mov	r0, #0
   1463c:	ldr	pc, [r2, r1, lsl #2]
   14640:	andeq	r4, r1, r4, lsl #16
   14644:	andeq	r4, r1, ip, asr #15
   14648:	andeq	r4, r1, ip, asr #15
   1464c:	andeq	r4, r1, r8, lsl r8
   14650:	andeq	r4, r1, ip, asr #15
   14654:	andeq	r4, r1, r8, lsl r7
   14658:	andeq	r4, r1, ip, asr #15
   1465c:	andeq	r4, r1, ip, asr #15
   14660:	andeq	r4, r1, ip, asr #15
   14664:	andeq	r4, r1, r0, ror #14
   14668:	andeq	r4, r1, ip, asr #15
   1466c:	andeq	r4, r1, ip, ror r7
   14670:	andeq	r4, r1, ip, asr #15
   14674:	andeq	r4, r1, ip, asr #15
   14678:	andeq	r4, r1, r8, lsr r8
   1467c:	andeq	r4, r1, ip, asr #15
   14680:	andeq	r4, r1, ip, asr #15
   14684:	andeq	r4, r1, ip, asr #15
   14688:	muleq	r1, ip, r7
   1468c:	andeq	r4, r1, ip, asr #15
   14690:	andeq	r4, r1, ip, asr #15
   14694:	andeq	r4, r1, ip, asr #15
   14698:	andeq	r4, r1, ip, asr #15
   1469c:	andeq	r4, r1, r8, asr r8
   146a0:	andeq	r4, r1, r4, ror #15
   146a4:	andeq	r4, r1, ip, asr #15
   146a8:	andeq	r4, r1, ip, asr #15
   146ac:	andeq	r4, r1, ip, asr #15
   146b0:	andeq	r4, r1, ip, asr #15
   146b4:	andeq	r4, r1, ip, asr #15
   146b8:	andeq	r4, r1, ip, asr #15
   146bc:	andeq	r4, r1, ip, asr #15
   146c0:	andeq	r4, r1, r8, ror r8
   146c4:	andeq	r4, r1, r8, lsr pc
   146c8:	andeq	r4, r1, ip, asr #15
   146cc:	andeq	r4, r1, ip, asr #15
   146d0:	andeq	r4, r1, ip, asr #15
   146d4:	andeq	r4, r1, r8, lsl r7
   146d8:	andeq	r4, r1, ip, asr #15
   146dc:	andeq	r4, r1, ip, asr #15
   146e0:	andeq	r4, r1, ip, asr #15
   146e4:	andeq	r4, r1, r0, ror #14
   146e8:	andeq	r4, r1, ip, asr #15
   146ec:	andeq	r4, r1, ip, ror r7
   146f0:	andeq	r4, r1, ip, asr #15
   146f4:	andeq	r4, r1, ip, asr #15
   146f8:	andeq	r4, r1, ip, asr #15
   146fc:	andeq	r4, r1, ip, asr #15
   14700:	andeq	r4, r1, ip, asr #15
   14704:	andeq	r4, r1, ip, asr #15
   14708:	muleq	r1, ip, r7
   1470c:	andeq	r4, r1, ip, asr #15
   14710:	andeq	r4, r1, ip, asr #15
   14714:	muleq	r1, r8, r8
   14718:	cmn	r7, #1
   1471c:	ble	148ac <__assert_fail@plt+0x3974>
   14720:	mvn	r2, #-2147483648	; 0x80000000
   14724:	mov	r3, #1
   14728:	udiv	r0, r2, r6
   1472c:	cmp	r0, r7
   14730:	bge	148c4 <__assert_fail@plt+0x398c>
   14734:	b	14984 <__assert_fail@plt+0x3a4c>
   14738:	cmp	r0, #105	; 0x69
   1473c:	bne	147bc <__assert_fail@plt+0x3884>
   14740:	ldrb	r0, [r4, #2]
   14744:	mov	ip, #1
   14748:	cmp	r0, #66	; 0x42
   1474c:	movweq	ip, #3
   14750:	sub	r1, r5, #66	; 0x42
   14754:	cmp	r1, #53	; 0x35
   14758:	bls	14634 <__assert_fail@plt+0x36fc>
   1475c:	b	147cc <__assert_fail@plt+0x3894>
   14760:	cmn	r7, #1
   14764:	ble	148d8 <__assert_fail@plt+0x39a0>
   14768:	mvn	r1, #-2147483648	; 0x80000000
   1476c:	udiv	r1, r1, r6
   14770:	cmp	r1, r7
   14774:	bge	148ec <__assert_fail@plt+0x39b4>
   14778:	b	14b54 <__assert_fail@plt+0x3c1c>
   1477c:	cmn	r7, #1
   14780:	ble	148f4 <__assert_fail@plt+0x39bc>
   14784:	mvn	r1, #-2147483648	; 0x80000000
   14788:	mov	r0, #1
   1478c:	udiv	r2, r1, r6
   14790:	cmp	r2, r7
   14794:	bge	1490c <__assert_fail@plt+0x39d4>
   14798:	b	149c0 <__assert_fail@plt+0x3a88>
   1479c:	cmn	r7, #1
   147a0:	ble	14920 <__assert_fail@plt+0x39e8>
   147a4:	mvn	r0, #-2147483648	; 0x80000000
   147a8:	mov	r1, #1
   147ac:	udiv	r2, r0, r6
   147b0:	cmp	r2, r7
   147b4:	bge	14938 <__assert_fail@plt+0x3a00>
   147b8:	b	14948 <__assert_fail@plt+0x3a10>
   147bc:	mov	ip, #1
   147c0:	sub	r1, r5, #66	; 0x42
   147c4:	cmp	r1, #53	; 0x35
   147c8:	bls	14634 <__assert_fail@plt+0x36fc>
   147cc:	ldr	r0, [sp, #4]
   147d0:	orr	r9, r9, #2
   147d4:	str	r7, [r0]
   147d8:	mov	r0, r9
   147dc:	sub	sp, fp, #28
   147e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147e4:	cmp	r7, #0
   147e8:	blt	149f8 <__assert_fail@plt+0x3ac0>
   147ec:	mvn	r0, #-2147483648	; 0x80000000
   147f0:	mov	r3, #1
   147f4:	udiv	r1, r0, r6
   147f8:	cmp	r1, r7
   147fc:	bge	14a14 <__assert_fail@plt+0x3adc>
   14800:	b	14a24 <__assert_fail@plt+0x3aec>
   14804:	cmn	r7, #1
   14808:	ble	14a3c <__assert_fail@plt+0x3b04>
   1480c:	cmp	r7, #2097152	; 0x200000
   14810:	blt	14a50 <__assert_fail@plt+0x3b18>
   14814:	b	14b54 <__assert_fail@plt+0x3c1c>
   14818:	cmp	r7, #0
   1481c:	blt	14a58 <__assert_fail@plt+0x3b20>
   14820:	mvn	r0, #-2147483648	; 0x80000000
   14824:	mov	r3, #1
   14828:	udiv	r1, r0, r6
   1482c:	cmp	r1, r7
   14830:	bge	14a74 <__assert_fail@plt+0x3b3c>
   14834:	b	14a84 <__assert_fail@plt+0x3b4c>
   14838:	cmp	r7, #0
   1483c:	blt	14a9c <__assert_fail@plt+0x3b64>
   14840:	mvn	r0, #-2147483648	; 0x80000000
   14844:	mov	r3, #1
   14848:	udiv	r1, r0, r6
   1484c:	cmp	r1, r7
   14850:	bge	14ab8 <__assert_fail@plt+0x3b80>
   14854:	b	14ac8 <__assert_fail@plt+0x3b90>
   14858:	cmp	r7, #0
   1485c:	blt	14ae0 <__assert_fail@plt+0x3ba8>
   14860:	mvn	r0, #-2147483648	; 0x80000000
   14864:	mov	r3, #1
   14868:	udiv	r1, r0, r6
   1486c:	cmp	r1, r7
   14870:	bge	14afc <__assert_fail@plt+0x3bc4>
   14874:	b	14b0c <__assert_fail@plt+0x3bd4>
   14878:	cmn	r7, #1
   1487c:	ble	14b24 <__assert_fail@plt+0x3bec>
   14880:	movw	r1, #65535	; 0xffff
   14884:	movt	r1, #31
   14888:	add	r1, r1, #2097152	; 0x200000
   1488c:	cmp	r7, r1
   14890:	ble	14b38 <__assert_fail@plt+0x3c00>
   14894:	b	14b54 <__assert_fail@plt+0x3c1c>
   14898:	cmn	r7, #1
   1489c:	ble	14b40 <__assert_fail@plt+0x3c08>
   148a0:	cmp	r7, #1073741824	; 0x40000000
   148a4:	bge	14b54 <__assert_fail@plt+0x3c1c>
   148a8:	b	14b6c <__assert_fail@plt+0x3c34>
   148ac:	beq	148c4 <__assert_fail@plt+0x398c>
   148b0:	mov	r2, #-2147483648	; 0x80000000
   148b4:	mov	r3, #1
   148b8:	sdiv	r0, r2, r7
   148bc:	cmp	r0, r6
   148c0:	blt	1499c <__assert_fail@plt+0x3a64>
   148c4:	mul	r2, r7, r6
   148c8:	mov	r3, #0
   148cc:	cmp	r2, #0
   148d0:	bge	14984 <__assert_fail@plt+0x3a4c>
   148d4:	b	1499c <__assert_fail@plt+0x3a64>
   148d8:	beq	148ec <__assert_fail@plt+0x39b4>
   148dc:	mov	r1, #-2147483648	; 0x80000000
   148e0:	sdiv	r1, r1, r7
   148e4:	cmp	r1, r6
   148e8:	blt	14b54 <__assert_fail@plt+0x3c1c>
   148ec:	mul	r7, r7, r6
   148f0:	b	14f38 <__assert_fail@plt+0x4000>
   148f4:	beq	1490c <__assert_fail@plt+0x39d4>
   148f8:	mov	r1, #-2147483648	; 0x80000000
   148fc:	mov	r0, #1
   14900:	sdiv	r2, r1, r7
   14904:	cmp	r2, r6
   14908:	blt	149d8 <__assert_fail@plt+0x3aa0>
   1490c:	mul	r1, r7, r6
   14910:	mov	r0, #0
   14914:	cmp	r1, #0
   14918:	bge	149c0 <__assert_fail@plt+0x3a88>
   1491c:	b	149d8 <__assert_fail@plt+0x3aa0>
   14920:	beq	14938 <__assert_fail@plt+0x3a00>
   14924:	mov	r0, #-2147483648	; 0x80000000
   14928:	mov	r1, #1
   1492c:	sdiv	r2, r0, r7
   14930:	cmp	r2, r6
   14934:	blt	14960 <__assert_fail@plt+0x3a28>
   14938:	mul	r0, r7, r6
   1493c:	mov	r1, #0
   14940:	cmp	r0, #0
   14944:	blt	14960 <__assert_fail@plt+0x3a28>
   14948:	mvn	r2, #-2147483648	; 0x80000000
   1494c:	mov	r3, #1
   14950:	udiv	r7, r2, r6
   14954:	cmp	r7, r0
   14958:	blt	14984 <__assert_fail@plt+0x3a4c>
   1495c:	b	14974 <__assert_fail@plt+0x3a3c>
   14960:	mov	r2, #-2147483648	; 0x80000000
   14964:	mov	r3, #1
   14968:	sdiv	r7, r2, r0
   1496c:	cmp	r7, r6
   14970:	blt	1499c <__assert_fail@plt+0x3a64>
   14974:	mul	r2, r0, r6
   14978:	mov	r3, r1
   1497c:	cmp	r2, #0
   14980:	blt	1499c <__assert_fail@plt+0x3a64>
   14984:	mvn	r1, #-2147483648	; 0x80000000
   14988:	mov	r0, #1
   1498c:	udiv	r7, r1, r6
   14990:	cmp	r7, r2
   14994:	blt	149c0 <__assert_fail@plt+0x3a88>
   14998:	b	149b0 <__assert_fail@plt+0x3a78>
   1499c:	mov	r1, #-2147483648	; 0x80000000
   149a0:	mov	r0, #1
   149a4:	sdiv	r7, r1, r2
   149a8:	cmp	r7, r6
   149ac:	blt	149d8 <__assert_fail@plt+0x3aa0>
   149b0:	mul	r1, r2, r6
   149b4:	mov	r0, r3
   149b8:	cmp	r1, #0
   149bc:	blt	149d8 <__assert_fail@plt+0x3aa0>
   149c0:	mvn	r7, #-2147483648	; 0x80000000
   149c4:	mov	r2, #1
   149c8:	udiv	r3, r7, r6
   149cc:	cmp	r3, r1
   149d0:	blt	14f34 <__assert_fail@plt+0x3ffc>
   149d4:	b	149ec <__assert_fail@plt+0x3ab4>
   149d8:	mov	r7, #-2147483648	; 0x80000000
   149dc:	mov	r2, #1
   149e0:	sdiv	r3, r7, r1
   149e4:	cmp	r3, r6
   149e8:	blt	14f34 <__assert_fail@plt+0x3ffc>
   149ec:	mov	r2, #0
   149f0:	mul	r7, r1, r6
   149f4:	b	14f34 <__assert_fail@plt+0x3ffc>
   149f8:	cmn	r7, #1
   149fc:	beq	14a14 <__assert_fail@plt+0x3adc>
   14a00:	mov	r0, #-2147483648	; 0x80000000
   14a04:	mov	r3, #1
   14a08:	sdiv	r1, r0, r7
   14a0c:	cmp	r1, r6
   14a10:	blt	14b74 <__assert_fail@plt+0x3c3c>
   14a14:	mul	r0, r7, r6
   14a18:	mov	r3, #0
   14a1c:	cmp	r0, #0
   14a20:	blt	14b74 <__assert_fail@plt+0x3c3c>
   14a24:	mvn	r1, #-2147483648	; 0x80000000
   14a28:	mov	r2, #1
   14a2c:	udiv	r7, r1, r6
   14a30:	cmp	r7, r0
   14a34:	bge	14b88 <__assert_fail@plt+0x3c50>
   14a38:	b	14b98 <__assert_fail@plt+0x3c60>
   14a3c:	beq	14a50 <__assert_fail@plt+0x3b18>
   14a40:	mov	r1, #-2147483648	; 0x80000000
   14a44:	sdiv	r1, r1, r7
   14a48:	cmp	r1, #1024	; 0x400
   14a4c:	blt	14b54 <__assert_fail@plt+0x3c1c>
   14a50:	lsl	r7, r7, #10
   14a54:	b	14f38 <__assert_fail@plt+0x4000>
   14a58:	cmn	r7, #1
   14a5c:	beq	14a74 <__assert_fail@plt+0x3b3c>
   14a60:	mov	r0, #-2147483648	; 0x80000000
   14a64:	mov	r3, #1
   14a68:	sdiv	r1, r0, r7
   14a6c:	cmp	r1, r6
   14a70:	blt	14c54 <__assert_fail@plt+0x3d1c>
   14a74:	mul	r0, r7, r6
   14a78:	mov	r3, #0
   14a7c:	cmp	r0, #0
   14a80:	blt	14c54 <__assert_fail@plt+0x3d1c>
   14a84:	mvn	r1, #-2147483648	; 0x80000000
   14a88:	mov	r2, #1
   14a8c:	udiv	r7, r1, r6
   14a90:	cmp	r7, r0
   14a94:	bge	14c68 <__assert_fail@plt+0x3d30>
   14a98:	b	14c78 <__assert_fail@plt+0x3d40>
   14a9c:	cmn	r7, #1
   14aa0:	beq	14ab8 <__assert_fail@plt+0x3b80>
   14aa4:	mov	r0, #-2147483648	; 0x80000000
   14aa8:	mov	r3, #1
   14aac:	sdiv	r1, r0, r7
   14ab0:	cmp	r1, r6
   14ab4:	blt	14d34 <__assert_fail@plt+0x3dfc>
   14ab8:	mul	r0, r7, r6
   14abc:	mov	r3, #0
   14ac0:	cmp	r0, #0
   14ac4:	blt	14d34 <__assert_fail@plt+0x3dfc>
   14ac8:	mvn	r1, #-2147483648	; 0x80000000
   14acc:	mov	r2, #1
   14ad0:	udiv	r7, r1, r6
   14ad4:	cmp	r7, r0
   14ad8:	bge	14d48 <__assert_fail@plt+0x3e10>
   14adc:	b	14d58 <__assert_fail@plt+0x3e20>
   14ae0:	cmn	r7, #1
   14ae4:	beq	14afc <__assert_fail@plt+0x3bc4>
   14ae8:	mov	r0, #-2147483648	; 0x80000000
   14aec:	mov	r3, #1
   14af0:	sdiv	r1, r0, r7
   14af4:	cmp	r1, r6
   14af8:	blt	14d98 <__assert_fail@plt+0x3e60>
   14afc:	mul	r0, r7, r6
   14b00:	mov	r3, #0
   14b04:	cmp	r0, #0
   14b08:	blt	14d98 <__assert_fail@plt+0x3e60>
   14b0c:	mvn	r1, #-2147483648	; 0x80000000
   14b10:	mov	r2, #1
   14b14:	udiv	r7, r1, r6
   14b18:	cmp	r7, r0
   14b1c:	bge	14dac <__assert_fail@plt+0x3e74>
   14b20:	b	14dbc <__assert_fail@plt+0x3e84>
   14b24:	beq	14b38 <__assert_fail@plt+0x3c00>
   14b28:	mov	r1, #-2147483648	; 0x80000000
   14b2c:	sdiv	r1, r1, r7
   14b30:	cmp	r1, #512	; 0x200
   14b34:	blt	14b54 <__assert_fail@plt+0x3c1c>
   14b38:	lsl	r7, r7, #9
   14b3c:	b	14f38 <__assert_fail@plt+0x4000>
   14b40:	beq	14b6c <__assert_fail@plt+0x3c34>
   14b44:	mov	r1, #-2147483648	; 0x80000000
   14b48:	sdiv	r1, r1, r7
   14b4c:	cmp	r1, #2
   14b50:	bge	14b6c <__assert_fail@plt+0x3c34>
   14b54:	mvn	r1, #-2147483648	; 0x80000000
   14b58:	cmp	r7, #0
   14b5c:	mov	r0, #1
   14b60:	movlt	r1, #-2147483648	; 0x80000000
   14b64:	mov	r7, r1
   14b68:	b	14f38 <__assert_fail@plt+0x4000>
   14b6c:	lsl	r7, r7, #1
   14b70:	b	14f38 <__assert_fail@plt+0x4000>
   14b74:	mov	r1, #-2147483648	; 0x80000000
   14b78:	mov	r2, #1
   14b7c:	sdiv	r7, r1, r0
   14b80:	cmp	r7, r6
   14b84:	blt	14bb0 <__assert_fail@plt+0x3c78>
   14b88:	mul	r1, r0, r6
   14b8c:	mov	r2, r3
   14b90:	cmp	r1, #0
   14b94:	blt	14bb0 <__assert_fail@plt+0x3c78>
   14b98:	mvn	r3, #-2147483648	; 0x80000000
   14b9c:	mov	r0, #1
   14ba0:	udiv	r7, r3, r6
   14ba4:	cmp	r7, r1
   14ba8:	bge	14bc4 <__assert_fail@plt+0x3c8c>
   14bac:	b	14bd4 <__assert_fail@plt+0x3c9c>
   14bb0:	mov	r3, #-2147483648	; 0x80000000
   14bb4:	mov	r0, #1
   14bb8:	sdiv	r7, r3, r1
   14bbc:	cmp	r7, r6
   14bc0:	blt	14bfc <__assert_fail@plt+0x3cc4>
   14bc4:	mul	r3, r1, r6
   14bc8:	mov	r0, r2
   14bcc:	cmp	r3, #0
   14bd0:	blt	14bfc <__assert_fail@plt+0x3cc4>
   14bd4:	mvn	r1, #-2147483648	; 0x80000000
   14bd8:	udiv	r2, r1, r6
   14bdc:	cmp	r2, r3
   14be0:	bge	14c14 <__assert_fail@plt+0x3cdc>
   14be4:	mov	r0, #1
   14be8:	mvn	r2, #-2147483648	; 0x80000000
   14bec:	udiv	r3, r2, r6
   14bf0:	cmp	r3, r1
   14bf4:	blt	14cc4 <__assert_fail@plt+0x3d8c>
   14bf8:	b	14c44 <__assert_fail@plt+0x3d0c>
   14bfc:	mov	r1, #-2147483648	; 0x80000000
   14c00:	sdiv	r2, r1, r3
   14c04:	cmp	r2, r6
   14c08:	bge	14c14 <__assert_fail@plt+0x3cdc>
   14c0c:	mov	r0, #1
   14c10:	b	14c34 <__assert_fail@plt+0x3cfc>
   14c14:	mul	r1, r3, r6
   14c18:	cmp	r1, #0
   14c1c:	blt	14c34 <__assert_fail@plt+0x3cfc>
   14c20:	mvn	r2, #-2147483648	; 0x80000000
   14c24:	udiv	r3, r2, r6
   14c28:	cmp	r3, r1
   14c2c:	bge	14c44 <__assert_fail@plt+0x3d0c>
   14c30:	b	14cc4 <__assert_fail@plt+0x3d8c>
   14c34:	mov	r2, #-2147483648	; 0x80000000
   14c38:	sdiv	r3, r2, r1
   14c3c:	cmp	r3, r6
   14c40:	blt	14cec <__assert_fail@plt+0x3db4>
   14c44:	mul	r2, r1, r6
   14c48:	cmp	r2, #0
   14c4c:	bge	14d00 <__assert_fail@plt+0x3dc8>
   14c50:	b	14d14 <__assert_fail@plt+0x3ddc>
   14c54:	mov	r1, #-2147483648	; 0x80000000
   14c58:	mov	r2, #1
   14c5c:	sdiv	r7, r1, r0
   14c60:	cmp	r7, r6
   14c64:	blt	14c90 <__assert_fail@plt+0x3d58>
   14c68:	mul	r1, r0, r6
   14c6c:	mov	r2, r3
   14c70:	cmp	r1, #0
   14c74:	blt	14c90 <__assert_fail@plt+0x3d58>
   14c78:	mvn	r3, #-2147483648	; 0x80000000
   14c7c:	mov	r0, #1
   14c80:	udiv	r7, r3, r6
   14c84:	cmp	r7, r1
   14c88:	bge	14ca4 <__assert_fail@plt+0x3d6c>
   14c8c:	b	14cb4 <__assert_fail@plt+0x3d7c>
   14c90:	mov	r3, #-2147483648	; 0x80000000
   14c94:	mov	r0, #1
   14c98:	sdiv	r7, r3, r1
   14c9c:	cmp	r7, r6
   14ca0:	blt	14cdc <__assert_fail@plt+0x3da4>
   14ca4:	mul	r3, r1, r6
   14ca8:	mov	r0, r2
   14cac:	cmp	r3, #0
   14cb0:	blt	14cdc <__assert_fail@plt+0x3da4>
   14cb4:	mvn	r2, #-2147483648	; 0x80000000
   14cb8:	udiv	r1, r2, r6
   14cbc:	cmp	r1, r3
   14cc0:	bge	14cf4 <__assert_fail@plt+0x3dbc>
   14cc4:	mov	r0, #1
   14cc8:	mvn	r1, #-2147483648	; 0x80000000
   14ccc:	udiv	r3, r1, r6
   14cd0:	cmp	r3, r2
   14cd4:	bge	14d24 <__assert_fail@plt+0x3dec>
   14cd8:	b	14eec <__assert_fail@plt+0x3fb4>
   14cdc:	mov	r2, #-2147483648	; 0x80000000
   14ce0:	sdiv	r1, r2, r3
   14ce4:	cmp	r1, r6
   14ce8:	bge	14cf4 <__assert_fail@plt+0x3dbc>
   14cec:	mov	r0, #1
   14cf0:	b	14d14 <__assert_fail@plt+0x3ddc>
   14cf4:	mul	r2, r3, r6
   14cf8:	cmp	r2, #0
   14cfc:	blt	14d14 <__assert_fail@plt+0x3ddc>
   14d00:	mvn	r1, #-2147483648	; 0x80000000
   14d04:	udiv	r3, r1, r6
   14d08:	cmp	r3, r2
   14d0c:	blt	14eec <__assert_fail@plt+0x3fb4>
   14d10:	b	14d24 <__assert_fail@plt+0x3dec>
   14d14:	mov	r1, #-2147483648	; 0x80000000
   14d18:	sdiv	r3, r1, r2
   14d1c:	cmp	r3, r6
   14d20:	blt	14f04 <__assert_fail@plt+0x3fcc>
   14d24:	mul	r1, r2, r6
   14d28:	cmp	r1, #0
   14d2c:	bge	14f18 <__assert_fail@plt+0x3fe0>
   14d30:	b	14f64 <__assert_fail@plt+0x402c>
   14d34:	mov	r1, #-2147483648	; 0x80000000
   14d38:	mov	r2, #1
   14d3c:	sdiv	r7, r1, r0
   14d40:	cmp	r7, r6
   14d44:	blt	14d70 <__assert_fail@plt+0x3e38>
   14d48:	mul	r1, r0, r6
   14d4c:	mov	r2, r3
   14d50:	cmp	r1, #0
   14d54:	blt	14d70 <__assert_fail@plt+0x3e38>
   14d58:	mvn	r3, #-2147483648	; 0x80000000
   14d5c:	mov	r0, #1
   14d60:	udiv	r7, r3, r6
   14d64:	cmp	r7, r1
   14d68:	bge	14d84 <__assert_fail@plt+0x3e4c>
   14d6c:	b	14edc <__assert_fail@plt+0x3fa4>
   14d70:	mov	r3, #-2147483648	; 0x80000000
   14d74:	mov	r0, #1
   14d78:	sdiv	r7, r3, r1
   14d7c:	cmp	r7, r6
   14d80:	blt	14ef4 <__assert_fail@plt+0x3fbc>
   14d84:	mul	r3, r1, r6
   14d88:	mov	r0, r2
   14d8c:	cmp	r3, #0
   14d90:	bge	14edc <__assert_fail@plt+0x3fa4>
   14d94:	b	14ef4 <__assert_fail@plt+0x3fbc>
   14d98:	mov	r1, #-2147483648	; 0x80000000
   14d9c:	mov	r2, #1
   14da0:	sdiv	r7, r1, r0
   14da4:	cmp	r7, r6
   14da8:	blt	14dd4 <__assert_fail@plt+0x3e9c>
   14dac:	mul	r1, r0, r6
   14db0:	mov	r2, r3
   14db4:	cmp	r1, #0
   14db8:	blt	14dd4 <__assert_fail@plt+0x3e9c>
   14dbc:	mvn	r3, #-2147483648	; 0x80000000
   14dc0:	mov	r0, #1
   14dc4:	udiv	r7, r3, r6
   14dc8:	cmp	r7, r1
   14dcc:	bge	14de8 <__assert_fail@plt+0x3eb0>
   14dd0:	b	14df8 <__assert_fail@plt+0x3ec0>
   14dd4:	mov	r3, #-2147483648	; 0x80000000
   14dd8:	mov	r0, #1
   14ddc:	sdiv	r7, r3, r1
   14de0:	cmp	r7, r6
   14de4:	blt	14e20 <__assert_fail@plt+0x3ee8>
   14de8:	mul	r3, r1, r6
   14dec:	mov	r0, r2
   14df0:	cmp	r3, #0
   14df4:	blt	14e20 <__assert_fail@plt+0x3ee8>
   14df8:	mvn	r1, #-2147483648	; 0x80000000
   14dfc:	udiv	r2, r1, r6
   14e00:	cmp	r2, r3
   14e04:	bge	14e38 <__assert_fail@plt+0x3f00>
   14e08:	mov	r0, #1
   14e0c:	mvn	r2, #-2147483648	; 0x80000000
   14e10:	udiv	r3, r2, r6
   14e14:	cmp	r3, r1
   14e18:	blt	14e54 <__assert_fail@plt+0x3f1c>
   14e1c:	b	14e84 <__assert_fail@plt+0x3f4c>
   14e20:	mov	r1, #-2147483648	; 0x80000000
   14e24:	sdiv	r2, r1, r3
   14e28:	cmp	r2, r6
   14e2c:	bge	14e38 <__assert_fail@plt+0x3f00>
   14e30:	mov	r0, #1
   14e34:	b	14e6c <__assert_fail@plt+0x3f34>
   14e38:	mul	r1, r3, r6
   14e3c:	cmp	r1, #0
   14e40:	blt	14e6c <__assert_fail@plt+0x3f34>
   14e44:	mvn	r2, #-2147483648	; 0x80000000
   14e48:	udiv	r3, r2, r6
   14e4c:	cmp	r3, r1
   14e50:	bge	14e84 <__assert_fail@plt+0x3f4c>
   14e54:	mov	r0, #1
   14e58:	mvn	r3, #-2147483648	; 0x80000000
   14e5c:	udiv	r1, r3, r6
   14e60:	cmp	r1, r2
   14e64:	bge	14ed0 <__assert_fail@plt+0x3f98>
   14e68:	b	14ea0 <__assert_fail@plt+0x3f68>
   14e6c:	mov	r2, #-2147483648	; 0x80000000
   14e70:	sdiv	r3, r2, r1
   14e74:	cmp	r3, r6
   14e78:	bge	14e84 <__assert_fail@plt+0x3f4c>
   14e7c:	mov	r0, #1
   14e80:	b	14eb8 <__assert_fail@plt+0x3f80>
   14e84:	mul	r2, r1, r6
   14e88:	cmp	r2, #0
   14e8c:	blt	14eb8 <__assert_fail@plt+0x3f80>
   14e90:	mvn	r3, #-2147483648	; 0x80000000
   14e94:	udiv	r1, r3, r6
   14e98:	cmp	r1, r2
   14e9c:	bge	14ed0 <__assert_fail@plt+0x3f98>
   14ea0:	mov	r0, #1
   14ea4:	mvn	r1, #-2147483648	; 0x80000000
   14ea8:	udiv	r2, r1, r6
   14eac:	cmp	r2, r3
   14eb0:	bge	14f0c <__assert_fail@plt+0x3fd4>
   14eb4:	b	14eec <__assert_fail@plt+0x3fb4>
   14eb8:	mov	r3, #-2147483648	; 0x80000000
   14ebc:	sdiv	r1, r3, r2
   14ec0:	cmp	r1, r6
   14ec4:	bge	14ed0 <__assert_fail@plt+0x3f98>
   14ec8:	mov	r0, #1
   14ecc:	b	14ef4 <__assert_fail@plt+0x3fbc>
   14ed0:	mul	r3, r2, r6
   14ed4:	cmp	r3, #0
   14ed8:	blt	14ef4 <__assert_fail@plt+0x3fbc>
   14edc:	mvn	r1, #-2147483648	; 0x80000000
   14ee0:	udiv	r2, r1, r6
   14ee4:	cmp	r2, r3
   14ee8:	bge	14f0c <__assert_fail@plt+0x3fd4>
   14eec:	mov	r0, #1
   14ef0:	b	14f18 <__assert_fail@plt+0x3fe0>
   14ef4:	mov	r1, #-2147483648	; 0x80000000
   14ef8:	sdiv	r2, r1, r3
   14efc:	cmp	r2, r6
   14f00:	bge	14f0c <__assert_fail@plt+0x3fd4>
   14f04:	mov	r0, #1
   14f08:	b	14f64 <__assert_fail@plt+0x402c>
   14f0c:	mul	r1, r3, r6
   14f10:	cmp	r1, #0
   14f14:	blt	14f64 <__assert_fail@plt+0x402c>
   14f18:	mvn	r7, #-2147483648	; 0x80000000
   14f1c:	mov	r2, #1
   14f20:	udiv	r3, r7, r6
   14f24:	cmp	r3, r1
   14f28:	blt	14f34 <__assert_fail@plt+0x3ffc>
   14f2c:	mul	r7, r1, r6
   14f30:	mov	r2, #0
   14f34:	orr	r0, r2, r0
   14f38:	add	r1, r4, ip
   14f3c:	orr	r9, r0, r9
   14f40:	str	r1, [sl]
   14f44:	ldrb	r1, [r4, ip]
   14f48:	cmp	r1, #0
   14f4c:	orrne	r9, r9, #2
   14f50:	ldr	r0, [sp, #4]
   14f54:	str	r7, [r0]
   14f58:	mov	r0, r9
   14f5c:	sub	sp, fp, #28
   14f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f64:	mov	r7, #-2147483648	; 0x80000000
   14f68:	mov	r2, #1
   14f6c:	sdiv	r3, r7, r1
   14f70:	cmp	r3, r6
   14f74:	bge	14f2c <__assert_fail@plt+0x3ff4>
   14f78:	b	14f34 <__assert_fail@plt+0x3ffc>
   14f7c:	movw	r0, #24237	; 0x5ead
   14f80:	movw	r1, #24275	; 0x5ed3
   14f84:	movw	r3, #24289	; 0x5ee1
   14f88:	mov	r2, #85	; 0x55
   14f8c:	movt	r0, #1
   14f90:	movt	r1, #1
   14f94:	movt	r3, #1
   14f98:	bl	10f38 <__assert_fail@plt>
   14f9c:	clz	r2, r1
   14fa0:	clz	r3, r0
   14fa4:	lsr	r2, r2, #5
   14fa8:	lsr	r3, r3, #5
   14fac:	orrs	r2, r3, r2
   14fb0:	movwne	r1, #1
   14fb4:	movwne	r0, #1
   14fb8:	cmp	r1, #0
   14fbc:	beq	14fec <__assert_fail@plt+0x40b4>
   14fc0:	mvn	r2, #-2147483648	; 0x80000000
   14fc4:	udiv	r2, r2, r1
   14fc8:	cmp	r2, r0
   14fcc:	bcs	14fec <__assert_fail@plt+0x40b4>
   14fd0:	push	{fp, lr}
   14fd4:	mov	fp, sp
   14fd8:	bl	10e90 <__errno_location@plt>
   14fdc:	mov	r1, #12
   14fe0:	str	r1, [r0]
   14fe4:	mov	r0, #0
   14fe8:	pop	{fp, pc}
   14fec:	b	10d10 <calloc@plt>
   14ff0:	cmp	r0, #0
   14ff4:	movweq	r0, #1
   14ff8:	cmn	r0, #1
   14ffc:	ble	15004 <__assert_fail@plt+0x40cc>
   15000:	b	10e24 <malloc@plt>
   15004:	push	{fp, lr}
   15008:	mov	fp, sp
   1500c:	bl	10e90 <__errno_location@plt>
   15010:	mov	r1, #12
   15014:	str	r1, [r0]
   15018:	mov	r0, #0
   1501c:	pop	{fp, pc}
   15020:	push	{fp, lr}
   15024:	mov	fp, sp
   15028:	cmp	r0, #0
   1502c:	beq	15048 <__assert_fail@plt+0x4110>
   15030:	cmp	r1, #0
   15034:	beq	15054 <__assert_fail@plt+0x411c>
   15038:	cmn	r1, #1
   1503c:	ble	15060 <__assert_fail@plt+0x4128>
   15040:	pop	{fp, lr}
   15044:	b	10da0 <realloc@plt>
   15048:	mov	r0, r1
   1504c:	pop	{fp, lr}
   15050:	b	14ff0 <__assert_fail@plt+0x40b8>
   15054:	bl	151fc <__assert_fail@plt+0x42c4>
   15058:	mov	r0, #0
   1505c:	pop	{fp, pc}
   15060:	bl	10e90 <__errno_location@plt>
   15064:	mov	r1, #12
   15068:	str	r1, [r0]
   1506c:	mov	r0, #0
   15070:	pop	{fp, pc}
   15074:	push	{r4, r5, r6, sl, fp, lr}
   15078:	add	fp, sp, #16
   1507c:	mov	r4, r0
   15080:	bl	10df4 <__fpending@plt>
   15084:	ldr	r6, [r4]
   15088:	mov	r5, r0
   1508c:	mov	r0, r4
   15090:	bl	150f8 <__assert_fail@plt+0x41c0>
   15094:	tst	r6, #32
   15098:	bne	150d0 <__assert_fail@plt+0x4198>
   1509c:	cmp	r0, #0
   150a0:	mov	r4, r0
   150a4:	mvnne	r4, #0
   150a8:	cmp	r5, #0
   150ac:	bne	150dc <__assert_fail@plt+0x41a4>
   150b0:	cmp	r0, #0
   150b4:	beq	150dc <__assert_fail@plt+0x41a4>
   150b8:	bl	10e90 <__errno_location@plt>
   150bc:	ldr	r0, [r0]
   150c0:	subs	r4, r0, #9
   150c4:	mvnne	r4, #0
   150c8:	mov	r0, r4
   150cc:	pop	{r4, r5, r6, sl, fp, pc}
   150d0:	mvn	r4, #0
   150d4:	cmp	r0, #0
   150d8:	beq	150e4 <__assert_fail@plt+0x41ac>
   150dc:	mov	r0, r4
   150e0:	pop	{r4, r5, r6, sl, fp, pc}
   150e4:	bl	10e90 <__errno_location@plt>
   150e8:	mov	r1, #0
   150ec:	str	r1, [r0]
   150f0:	mov	r0, r4
   150f4:	pop	{r4, r5, r6, sl, fp, pc}
   150f8:	push	{r4, r5, r6, sl, fp, lr}
   150fc:	add	fp, sp, #16
   15100:	sub	sp, sp, #8
   15104:	mov	r4, r0
   15108:	bl	10ec0 <fileno@plt>
   1510c:	cmn	r0, #1
   15110:	ble	15184 <__assert_fail@plt+0x424c>
   15114:	mov	r0, r4
   15118:	bl	10e3c <__freading@plt>
   1511c:	cmp	r0, #0
   15120:	beq	1514c <__assert_fail@plt+0x4214>
   15124:	mov	r0, r4
   15128:	bl	10ec0 <fileno@plt>
   1512c:	mov	r1, #1
   15130:	mov	r2, #0
   15134:	mov	r3, #0
   15138:	str	r1, [sp]
   1513c:	bl	10ddc <lseek64@plt>
   15140:	and	r0, r0, r1
   15144:	cmn	r0, #1
   15148:	beq	15184 <__assert_fail@plt+0x424c>
   1514c:	mov	r0, r4
   15150:	bl	15194 <__assert_fail@plt+0x425c>
   15154:	cmp	r0, #0
   15158:	beq	15184 <__assert_fail@plt+0x424c>
   1515c:	bl	10e90 <__errno_location@plt>
   15160:	ldr	r6, [r0]
   15164:	mov	r5, r0
   15168:	mov	r0, r4
   1516c:	bl	10ed8 <fclose@plt>
   15170:	cmp	r6, #0
   15174:	strne	r6, [r5]
   15178:	mvnne	r0, #0
   1517c:	sub	sp, fp, #16
   15180:	pop	{r4, r5, r6, sl, fp, pc}
   15184:	mov	r0, r4
   15188:	sub	sp, fp, #16
   1518c:	pop	{r4, r5, r6, sl, fp, lr}
   15190:	b	10ed8 <fclose@plt>
   15194:	push	{r4, sl, fp, lr}
   15198:	add	fp, sp, #8
   1519c:	sub	sp, sp, #8
   151a0:	mov	r4, r0
   151a4:	cmp	r0, #0
   151a8:	beq	151c4 <__assert_fail@plt+0x428c>
   151ac:	mov	r0, r4
   151b0:	bl	10e3c <__freading@plt>
   151b4:	cmp	r0, #0
   151b8:	ldrbne	r0, [r4, #1]
   151bc:	tstne	r0, #1
   151c0:	bne	151d4 <__assert_fail@plt+0x429c>
   151c4:	mov	r0, r4
   151c8:	sub	sp, fp, #8
   151cc:	pop	{r4, sl, fp, lr}
   151d0:	b	10d40 <fflush@plt>
   151d4:	mov	r0, #1
   151d8:	mov	r2, #0
   151dc:	mov	r3, #0
   151e0:	str	r0, [sp]
   151e4:	mov	r0, r4
   151e8:	bl	15224 <__assert_fail@plt+0x42ec>
   151ec:	mov	r0, r4
   151f0:	sub	sp, fp, #8
   151f4:	pop	{r4, sl, fp, lr}
   151f8:	b	10d40 <fflush@plt>
   151fc:	push	{r4, r5, r6, sl, fp, lr}
   15200:	add	fp, sp, #16
   15204:	mov	r4, r0
   15208:	bl	10e90 <__errno_location@plt>
   1520c:	ldr	r6, [r0]
   15210:	mov	r5, r0
   15214:	mov	r0, r4
   15218:	bl	10d4c <free@plt>
   1521c:	str	r6, [r5]
   15220:	pop	{r4, r5, r6, sl, fp, pc}
   15224:	push	{r4, r5, r6, r7, fp, lr}
   15228:	add	fp, sp, #16
   1522c:	sub	sp, sp, #8
   15230:	mov	r4, r0
   15234:	ldr	r0, [r0, #4]
   15238:	mov	r5, r3
   1523c:	mov	r6, r2
   15240:	ldr	r1, [r4, #8]
   15244:	cmp	r1, r0
   15248:	bne	15264 <__assert_fail@plt+0x432c>
   1524c:	ldrd	r0, [r4, #16]
   15250:	cmp	r1, r0
   15254:	bne	15264 <__assert_fail@plt+0x432c>
   15258:	ldr	r0, [r4, #36]	; 0x24
   1525c:	cmp	r0, #0
   15260:	beq	1527c <__assert_fail@plt+0x4344>
   15264:	mov	r0, r4
   15268:	mov	r2, r6
   1526c:	mov	r3, r5
   15270:	sub	sp, fp, #16
   15274:	pop	{r4, r5, r6, r7, fp, lr}
   15278:	b	10ee4 <fseeko64@plt>
   1527c:	ldr	r7, [fp, #8]
   15280:	mov	r0, r4
   15284:	bl	10ec0 <fileno@plt>
   15288:	mov	r2, r6
   1528c:	mov	r3, r5
   15290:	str	r7, [sp]
   15294:	bl	10ddc <lseek64@plt>
   15298:	and	r2, r0, r1
   1529c:	cmn	r2, #1
   152a0:	mvneq	r0, #0
   152a4:	subeq	sp, fp, #16
   152a8:	popeq	{r4, r5, r6, r7, fp, pc}
   152ac:	strd	r0, [r4, #80]	; 0x50
   152b0:	ldr	r0, [r4]
   152b4:	bic	r0, r0, #16
   152b8:	str	r0, [r4]
   152bc:	mov	r0, #0
   152c0:	sub	sp, fp, #16
   152c4:	pop	{r4, r5, r6, r7, fp, pc}
   152c8:	push	{fp, lr}
   152cc:	mov	fp, sp
   152d0:	mov	r0, #14
   152d4:	bl	10f08 <nl_langinfo@plt>
   152d8:	movw	r1, #23018	; 0x59ea
   152dc:	cmp	r0, #0
   152e0:	movt	r1, #1
   152e4:	movne	r1, r0
   152e8:	movw	r0, #24360	; 0x5f28
   152ec:	ldrb	r2, [r1]
   152f0:	movt	r0, #1
   152f4:	cmp	r2, #0
   152f8:	movne	r0, r1
   152fc:	pop	{fp, pc}
   15300:	push	{r4, r5, r6, r7, fp, lr}
   15304:	add	fp, sp, #16
   15308:	sub	sp, sp, #8
   1530c:	add	r5, sp, #4
   15310:	cmp	r0, #0
   15314:	mov	r7, r2
   15318:	mov	r4, r1
   1531c:	movne	r5, r0
   15320:	mov	r0, r5
   15324:	bl	10e00 <mbrtowc@plt>
   15328:	mov	r6, r0
   1532c:	cmp	r7, #0
   15330:	beq	15354 <__assert_fail@plt+0x441c>
   15334:	cmn	r6, #2
   15338:	bcc	15354 <__assert_fail@plt+0x441c>
   1533c:	mov	r0, #0
   15340:	bl	1539c <__assert_fail@plt+0x4464>
   15344:	cmp	r0, #0
   15348:	ldrbeq	r0, [r4]
   1534c:	moveq	r6, #1
   15350:	streq	r0, [r5]
   15354:	mov	r0, r6
   15358:	sub	sp, fp, #16
   1535c:	pop	{r4, r5, r6, r7, fp, pc}
   15360:	cmp	r2, #0
   15364:	beq	15394 <__assert_fail@plt+0x445c>
   15368:	mvn	r3, #0
   1536c:	udiv	r3, r3, r2
   15370:	cmp	r3, r1
   15374:	bcs	15394 <__assert_fail@plt+0x445c>
   15378:	push	{fp, lr}
   1537c:	mov	fp, sp
   15380:	bl	10e90 <__errno_location@plt>
   15384:	mov	r1, #12
   15388:	str	r1, [r0]
   1538c:	mov	r0, #0
   15390:	pop	{fp, pc}
   15394:	mul	r1, r2, r1
   15398:	b	15020 <__assert_fail@plt+0x40e8>
   1539c:	push	{r4, sl, fp, lr}
   153a0:	add	fp, sp, #8
   153a4:	sub	sp, sp, #264	; 0x108
   153a8:	add	r1, sp, #7
   153ac:	movw	r2, #257	; 0x101
   153b0:	bl	15400 <__assert_fail@plt+0x44c8>
   153b4:	mov	r4, #0
   153b8:	cmp	r0, #0
   153bc:	bne	153f4 <__assert_fail@plt+0x44bc>
   153c0:	movw	r1, #24366	; 0x5f2e
   153c4:	add	r0, sp, #7
   153c8:	movt	r1, #1
   153cc:	bl	10d28 <strcmp@plt>
   153d0:	cmp	r0, #0
   153d4:	beq	153f4 <__assert_fail@plt+0x44bc>
   153d8:	movw	r1, #24368	; 0x5f30
   153dc:	add	r0, sp, #7
   153e0:	movt	r1, #1
   153e4:	bl	10d28 <strcmp@plt>
   153e8:	mov	r4, r0
   153ec:	cmp	r0, #0
   153f0:	movwne	r4, #1
   153f4:	mov	r0, r4
   153f8:	sub	sp, fp, #8
   153fc:	pop	{r4, sl, fp, pc}
   15400:	push	{r4, r5, r6, r7, fp, lr}
   15404:	add	fp, sp, #16
   15408:	mov	r4, r1
   1540c:	mov	r1, #0
   15410:	mov	r6, r2
   15414:	bl	10ef0 <setlocale@plt>
   15418:	cmp	r0, #0
   1541c:	beq	1544c <__assert_fail@plt+0x4514>
   15420:	mov	r7, r0
   15424:	bl	10e78 <strlen@plt>
   15428:	cmp	r0, r6
   1542c:	bcs	1546c <__assert_fail@plt+0x4534>
   15430:	add	r2, r0, #1
   15434:	mov	r0, r4
   15438:	mov	r1, r7
   1543c:	bl	10d64 <memcpy@plt>
   15440:	mov	r5, #0
   15444:	mov	r0, r5
   15448:	pop	{r4, r5, r6, r7, fp, pc}
   1544c:	cmp	r6, #0
   15450:	mov	r5, #22
   15454:	movne	r0, #0
   15458:	strbne	r0, [r4]
   1545c:	movne	r0, r5
   15460:	popne	{r4, r5, r6, r7, fp, pc}
   15464:	mov	r0, r5
   15468:	pop	{r4, r5, r6, r7, fp, pc}
   1546c:	mov	r5, #34	; 0x22
   15470:	cmp	r6, #0
   15474:	beq	15494 <__assert_fail@plt+0x455c>
   15478:	sub	r6, r6, #1
   1547c:	mov	r0, r4
   15480:	mov	r1, r7
   15484:	mov	r2, r6
   15488:	bl	10d64 <memcpy@plt>
   1548c:	mov	r0, #0
   15490:	strb	r0, [r4, r6]
   15494:	mov	r0, r5
   15498:	pop	{r4, r5, r6, r7, fp, pc}
   1549c:	mov	r1, #0
   154a0:	b	10ef0 <setlocale@plt>
   154a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154a8:	mov	r7, r0
   154ac:	ldr	r6, [pc, #72]	; 154fc <__assert_fail@plt+0x45c4>
   154b0:	ldr	r5, [pc, #72]	; 15500 <__assert_fail@plt+0x45c8>
   154b4:	add	r6, pc, r6
   154b8:	add	r5, pc, r5
   154bc:	sub	r6, r6, r5
   154c0:	mov	r8, r1
   154c4:	mov	r9, r2
   154c8:	bl	10cf0 <calloc@plt-0x20>
   154cc:	asrs	r6, r6, #2
   154d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   154d4:	mov	r4, #0
   154d8:	add	r4, r4, #1
   154dc:	ldr	r3, [r5], #4
   154e0:	mov	r2, r9
   154e4:	mov	r1, r8
   154e8:	mov	r0, r7
   154ec:	blx	r3
   154f0:	cmp	r6, r4
   154f4:	bne	154d8 <__assert_fail@plt+0x45a0>
   154f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154fc:	andeq	r1, r1, r0, asr sl
   15500:	andeq	r1, r1, r8, asr #20
   15504:	bx	lr
   15508:	ldr	r3, [pc, #12]	; 1551c <__assert_fail@plt+0x45e4>
   1550c:	mov	r1, #0
   15510:	add	r3, pc, r3
   15514:	ldr	r2, [r3]
   15518:	b	10e9c <__cxa_atexit@plt>
   1551c:			; <UNDEFINED> instruction: 0x00011bbc

Disassembly of section .fini:

00015520 <.fini>:
   15520:	push	{r3, lr}
   15524:	pop	{r3, pc}
