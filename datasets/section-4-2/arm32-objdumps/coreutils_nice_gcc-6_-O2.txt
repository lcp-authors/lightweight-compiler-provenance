
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010bc4 <.init>:
   10bc4:	push	{r3, lr}
   10bc8:	bl	11240 <__assert_fail@plt+0x41c>
   10bcc:	pop	{r3, pc}

Disassembly of section .plt:

00010bd0 <calloc@plt-0x14>:
   10bd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10bd4:	ldr	lr, [pc, #4]	; 10be0 <calloc@plt-0x4>
   10bd8:	add	lr, pc, lr
   10bdc:	ldr	pc, [lr, #8]!
   10be0:	andeq	r5, r1, r0, lsr #8

00010be4 <calloc@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #86016	; 0x15000
   10bec:	ldr	pc, [ip, #1056]!	; 0x420

00010bf0 <fputs_unlocked@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #86016	; 0x15000
   10bf8:	ldr	pc, [ip, #1048]!	; 0x418

00010bfc <raise@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #86016	; 0x15000
   10c04:	ldr	pc, [ip, #1040]!	; 0x410

00010c08 <strcmp@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #86016	; 0x15000
   10c10:	ldr	pc, [ip, #1032]!	; 0x408

00010c14 <strtol@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #86016	; 0x15000
   10c1c:	ldr	pc, [ip, #1024]!	; 0x400

00010c20 <fflush@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #86016	; 0x15000
   10c28:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c2c <free@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #86016	; 0x15000
   10c34:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c38 <_exit@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #86016	; 0x15000
   10c40:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c44 <memcpy@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #992]!	; 0x3e0

00010c50 <execvp@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #984]!	; 0x3d8

00010c5c <mbsinit@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #976]!	; 0x3d0

00010c68 <memcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #968]!	; 0x3c8

00010c74 <fputc_unlocked@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c80 <dcgettext@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #952]!	; 0x3b8

00010c8c <realloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #944]!	; 0x3b0

00010c98 <getpriority@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #936]!	; 0x3a8

00010ca4 <textdomain@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #928]!	; 0x3a0

00010cb0 <iswprint@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #920]!	; 0x398

00010cbc <fwrite@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #912]!	; 0x390

00010cc8 <lseek64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #904]!	; 0x388

00010cd4 <__ctype_get_mb_cur_max@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #896]!	; 0x380

00010ce0 <__fpending@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #888]!	; 0x378

00010cec <mbrtowc@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #880]!	; 0x370

00010cf8 <error@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #872]!	; 0x368

00010d04 <setpriority@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #864]!	; 0x360

00010d10 <malloc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #856]!	; 0x358

00010d1c <__libc_start_main@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #848]!	; 0x350

00010d28 <__freading@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #840]!	; 0x348

00010d34 <__gmon_start__@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #832]!	; 0x340

00010d40 <getopt_long@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #824]!	; 0x338

00010d4c <__ctype_b_loc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #816]!	; 0x330

00010d58 <exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #808]!	; 0x328

00010d64 <strlen@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #800]!	; 0x320

00010d70 <strchr@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #792]!	; 0x318

00010d7c <__errno_location@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #784]!	; 0x310

00010d88 <__cxa_atexit@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #776]!	; 0x308

00010d94 <memset@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #768]!	; 0x300

00010da0 <__printf_chk@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #760]!	; 0x2f8

00010dac <fileno@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #752]!	; 0x2f0

00010db8 <__fprintf_chk@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #744]!	; 0x2e8

00010dc4 <fclose@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #736]!	; 0x2e0

00010dd0 <fseeko64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #728]!	; 0x2d8

00010ddc <setlocale@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #720]!	; 0x2d0

00010de8 <strrchr@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #712]!	; 0x2c8

00010df4 <nl_langinfo@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #704]!	; 0x2c0

00010e00 <bindtextdomain@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #696]!	; 0x2b8

00010e0c <strncmp@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #688]!	; 0x2b0

00010e18 <abort@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #680]!	; 0x2a8

00010e24 <__assert_fail@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #672]!	; 0x2a0

Disassembly of section .text:

00010e30 <.text>:
   10e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e34:	mov	r6, r0
   10e38:	sub	sp, sp, #20
   10e3c:	ldr	r0, [r1]
   10e40:	mov	r5, r1
   10e44:	bl	11760 <__assert_fail@plt+0x93c>
   10e48:	ldr	r1, [pc, #864]	; 111b0 <__assert_fail@plt+0x38c>
   10e4c:	mov	r0, #6
   10e50:	bl	10ddc <setlocale@plt>
   10e54:	ldr	r1, [pc, #856]	; 111b4 <__assert_fail@plt+0x390>
   10e58:	ldr	r0, [pc, #856]	; 111b8 <__assert_fail@plt+0x394>
   10e5c:	bl	10e00 <bindtextdomain@plt>
   10e60:	ldr	r0, [pc, #848]	; 111b8 <__assert_fail@plt+0x394>
   10e64:	bl	10ca4 <textdomain@plt>
   10e68:	ldr	r3, [pc, #844]	; 111bc <__assert_fail@plt+0x398>
   10e6c:	mov	r2, #125	; 0x7d
   10e70:	ldr	r0, [pc, #840]	; 111c0 <__assert_fail@plt+0x39c>
   10e74:	str	r2, [r3]
   10e78:	bl	1503c <__assert_fail@plt+0x4218>
   10e7c:	cmp	r6, #1
   10e80:	ble	1109c <__assert_fail@plt+0x278>
   10e84:	mov	r9, #0
   10e88:	ldr	r8, [pc, #820]	; 111c4 <__assert_fail@plt+0x3a0>
   10e8c:	ldr	fp, [pc, #820]	; 111c8 <__assert_fail@plt+0x3a4>
   10e90:	ldr	sl, [pc, #820]	; 111cc <__assert_fail@plt+0x3a8>
   10e94:	mov	r7, r9
   10e98:	mov	r4, #1
   10e9c:	ldr	r2, [r5, r4, lsl #2]
   10ea0:	lsl	r1, r4, #2
   10ea4:	ldrb	r3, [r2]
   10ea8:	cmp	r3, #45	; 0x2d
   10eac:	bne	10fd4 <__assert_fail@plt+0x1b0>
   10eb0:	ldrb	r3, [r2, #1]
   10eb4:	sub	r3, r3, #43	; 0x2b
   10eb8:	and	r3, r3, #253	; 0xfd
   10ebc:	cmp	r3, #0
   10ec0:	movne	r3, r2
   10ec4:	addeq	r3, r2, #1
   10ec8:	ldrb	r3, [r3, #1]
   10ecc:	sub	r3, r3, #48	; 0x30
   10ed0:	cmp	r3, #9
   10ed4:	addls	r9, r2, #1
   10ed8:	addls	r4, r4, #1
   10edc:	bhi	10fd4 <__assert_fail@plt+0x1b0>
   10ee0:	cmp	r6, r4
   10ee4:	bgt	10e9c <__assert_fail@plt+0x78>
   10ee8:	cmp	r9, #0
   10eec:	beq	111a0 <__assert_fail@plt+0x37c>
   10ef0:	ldr	r2, [pc, #696]	; 111b0 <__assert_fail@plt+0x38c>
   10ef4:	add	r3, sp, #12
   10ef8:	str	r2, [sp]
   10efc:	mov	r1, #0
   10f00:	mov	r2, #10
   10f04:	mov	r0, r9
   10f08:	bl	14198 <__assert_fail@plt+0x3374>
   10f0c:	cmp	r0, #1
   10f10:	bhi	11170 <__assert_fail@plt+0x34c>
   10f14:	ldr	r7, [sp, #12]
   10f18:	mvn	r3, #38	; 0x26
   10f1c:	cmp	r7, #39	; 0x27
   10f20:	movge	r7, #39	; 0x27
   10f24:	cmp	r7, r3
   10f28:	movlt	r7, r3
   10f2c:	cmp	r4, r6
   10f30:	beq	11074 <__assert_fail@plt+0x250>
   10f34:	bl	10d7c <__errno_location@plt>
   10f38:	mov	r6, #0
   10f3c:	mov	r1, r6
   10f40:	str	r6, [r0]
   10f44:	mov	r8, r0
   10f48:	mov	r0, r6
   10f4c:	bl	10c98 <getpriority@plt>
   10f50:	cmn	r0, #1
   10f54:	bne	10f64 <__assert_fail@plt+0x140>
   10f58:	ldr	r9, [r8]
   10f5c:	cmp	r9, r6
   10f60:	bne	11130 <__assert_fail@plt+0x30c>
   10f64:	mov	r1, #0
   10f68:	add	r2, r0, r7
   10f6c:	mov	r0, r1
   10f70:	bl	10d04 <setpriority@plt>
   10f74:	cmp	r0, #0
   10f78:	beq	110f0 <__assert_fail@plt+0x2cc>
   10f7c:	ldr	r6, [r8]
   10f80:	mov	r2, #5
   10f84:	cmp	r6, #1
   10f88:	cmpne	r6, #13
   10f8c:	ldr	r1, [pc, #572]	; 111d0 <__assert_fail@plt+0x3ac>
   10f90:	mov	r0, #0
   10f94:	movne	r7, #125	; 0x7d
   10f98:	moveq	r7, #0
   10f9c:	bl	10c80 <dcgettext@plt>
   10fa0:	mov	r1, r6
   10fa4:	mov	r2, r0
   10fa8:	mov	r0, r7
   10fac:	bl	10cf8 <error@plt>
   10fb0:	ldr	r3, [pc, #540]	; 111d4 <__assert_fail@plt+0x3b0>
   10fb4:	ldr	r3, [r3]
   10fb8:	ldr	r3, [r3]
   10fbc:	tst	r3, #32
   10fc0:	movne	r4, #125	; 0x7d
   10fc4:	beq	110f0 <__assert_fail@plt+0x2cc>
   10fc8:	mov	r0, r4
   10fcc:	add	sp, sp, #20
   10fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fd4:	ldr	r3, [r5]
   10fd8:	sub	r1, r1, #4
   10fdc:	sub	r0, r4, #1
   10fe0:	str	r7, [sp]
   10fe4:	sub	r0, r6, r0
   10fe8:	str	r3, [r5, r1]
   10fec:	mov	r2, sl
   10ff0:	mov	r3, fp
   10ff4:	add	r1, r5, r1
   10ff8:	str	r7, [r8]
   10ffc:	bl	10d40 <getopt_long@plt>
   11000:	ldr	r3, [r8]
   11004:	sub	r3, r3, #1
   11008:	add	r4, r4, r3
   1100c:	cmn	r0, #2
   11010:	beq	1106c <__assert_fail@plt+0x248>
   11014:	ble	11034 <__assert_fail@plt+0x210>
   11018:	cmn	r0, #1
   1101c:	beq	10ee8 <__assert_fail@plt+0xc4>
   11020:	cmp	r0, #110	; 0x6e
   11024:	bne	11094 <__assert_fail@plt+0x270>
   11028:	ldr	r3, [pc, #424]	; 111d8 <__assert_fail@plt+0x3b4>
   1102c:	ldr	r9, [r3]
   11030:	b	10ee0 <__assert_fail@plt+0xbc>
   11034:	cmn	r0, #3
   11038:	bne	11094 <__assert_fail@plt+0x270>
   1103c:	ldr	r1, [pc, #408]	; 111dc <__assert_fail@plt+0x3b8>
   11040:	ldr	r3, [pc, #408]	; 111e0 <__assert_fail@plt+0x3bc>
   11044:	ldr	r2, [pc, #408]	; 111e4 <__assert_fail@plt+0x3c0>
   11048:	str	r7, [sp, #4]
   1104c:	ldr	r0, [r1]
   11050:	ldr	r3, [r3]
   11054:	ldr	r1, [pc, #396]	; 111e8 <__assert_fail@plt+0x3c4>
   11058:	str	r2, [sp]
   1105c:	ldr	r2, [pc, #392]	; 111ec <__assert_fail@plt+0x3c8>
   11060:	bl	13a5c <__assert_fail@plt+0x2c38>
   11064:	mov	r0, #0
   11068:	bl	10d58 <exit@plt>
   1106c:	mov	r0, #0
   11070:	bl	1132c <__assert_fail@plt+0x508>
   11074:	mov	r2, #5
   11078:	ldr	r1, [pc, #368]	; 111f0 <__assert_fail@plt+0x3cc>
   1107c:	mov	r0, #0
   11080:	bl	10c80 <dcgettext@plt>
   11084:	mov	r1, #0
   11088:	mov	r2, r0
   1108c:	mov	r0, r1
   11090:	bl	10cf8 <error@plt>
   11094:	mov	r0, #125	; 0x7d
   11098:	bl	1132c <__assert_fail@plt+0x508>
   1109c:	movne	r4, #1
   110a0:	movne	r7, #10
   110a4:	bne	10f34 <__assert_fail@plt+0x110>
   110a8:	bl	10d7c <__errno_location@plt>
   110ac:	mov	r4, #0
   110b0:	mov	r1, r4
   110b4:	str	r4, [r0]
   110b8:	mov	r5, r0
   110bc:	mov	r0, r4
   110c0:	bl	10c98 <getpriority@plt>
   110c4:	cmn	r0, #1
   110c8:	mov	r2, r0
   110cc:	bne	110dc <__assert_fail@plt+0x2b8>
   110d0:	ldr	r5, [r5]
   110d4:	cmp	r5, r4
   110d8:	bne	11150 <__assert_fail@plt+0x32c>
   110dc:	ldr	r1, [pc, #272]	; 111f4 <__assert_fail@plt+0x3d0>
   110e0:	mov	r0, #1
   110e4:	bl	10da0 <__printf_chk@plt>
   110e8:	mov	r4, #0
   110ec:	b	10fc8 <__assert_fail@plt+0x1a4>
   110f0:	lsl	r6, r4, #2
   110f4:	add	r1, r5, r6
   110f8:	ldr	r0, [r5, r4, lsl #2]
   110fc:	bl	10c50 <execvp@plt>
   11100:	ldr	r0, [r5, r6]
   11104:	ldr	r4, [r8]
   11108:	bl	13620 <__assert_fail@plt+0x27fc>
   1110c:	mov	r1, r4
   11110:	cmp	r4, #2
   11114:	ldr	r2, [pc, #220]	; 111f8 <__assert_fail@plt+0x3d4>
   11118:	moveq	r4, #127	; 0x7f
   1111c:	movne	r4, #126	; 0x7e
   11120:	mov	r3, r0
   11124:	mov	r0, #0
   11128:	bl	10cf8 <error@plt>
   1112c:	b	10fc8 <__assert_fail@plt+0x1a4>
   11130:	mov	r2, #5
   11134:	ldr	r1, [pc, #192]	; 111fc <__assert_fail@plt+0x3d8>
   11138:	mov	r0, r6
   1113c:	bl	10c80 <dcgettext@plt>
   11140:	mov	r1, r9
   11144:	mov	r2, r0
   11148:	mov	r0, #125	; 0x7d
   1114c:	bl	10cf8 <error@plt>
   11150:	mov	r2, #5
   11154:	ldr	r1, [pc, #160]	; 111fc <__assert_fail@plt+0x3d8>
   11158:	mov	r0, r4
   1115c:	bl	10c80 <dcgettext@plt>
   11160:	mov	r1, r5
   11164:	mov	r2, r0
   11168:	mov	r0, #125	; 0x7d
   1116c:	bl	10cf8 <error@plt>
   11170:	mov	r2, #5
   11174:	ldr	r1, [pc, #132]	; 11200 <__assert_fail@plt+0x3dc>
   11178:	mov	r0, #0
   1117c:	bl	10c80 <dcgettext@plt>
   11180:	mov	r4, r0
   11184:	mov	r0, r9
   11188:	bl	13620 <__assert_fail@plt+0x27fc>
   1118c:	mov	r2, r4
   11190:	mov	r1, #0
   11194:	mov	r3, r0
   11198:	mov	r0, #125	; 0x7d
   1119c:	bl	10cf8 <error@plt>
   111a0:	cmp	r4, r6
   111a4:	movne	r7, #10
   111a8:	bne	10f34 <__assert_fail@plt+0x110>
   111ac:	b	110a8 <__assert_fail@plt+0x284>
   111b0:	andeq	r5, r1, ip, asr #5
   111b4:			; <UNDEFINED> instruction: 0x000154b4
   111b8:	andeq	r5, r1, ip, lsl #8
   111bc:	andeq	r6, r2, r0, ror #1
   111c0:	andeq	r1, r1, ip, ror r6
   111c4:	andeq	r6, r2, r0, lsr r1
   111c8:	muleq	r1, r8, r0
   111cc:	andeq	r5, r1, ip, asr #9
   111d0:	andeq	r5, r1, ip, lsr r5
   111d4:	andeq	r6, r2, r8, lsr r1
   111d8:	andeq	r6, r2, r0, asr #2
   111dc:	andeq	r6, r2, ip, lsr r1
   111e0:	ldrdeq	r6, [r2], -ip
   111e4:	ldrdeq	r5, [r1], -r0
   111e8:	ldrdeq	r5, [r1], -r8
   111ec:	andeq	r5, r1, r8, lsl #8
   111f0:	strdeq	r5, [r1], -r8
   111f4:	andeq	r5, r1, r8, lsr r5
   111f8:	andeq	r5, r1, ip, ror #11
   111fc:	andeq	r5, r1, r4, lsr #10
   11200:	andeq	r5, r1, r0, ror #9
   11204:	mov	fp, #0
   11208:	mov	lr, #0
   1120c:	pop	{r1}		; (ldr r1, [sp], #4)
   11210:	mov	r2, sp
   11214:	push	{r2}		; (str r2, [sp, #-4]!)
   11218:	push	{r0}		; (str r0, [sp, #-4]!)
   1121c:	ldr	ip, [pc, #16]	; 11234 <__assert_fail@plt+0x410>
   11220:	push	{ip}		; (str ip, [sp, #-4]!)
   11224:	ldr	r0, [pc, #12]	; 11238 <__assert_fail@plt+0x414>
   11228:	ldr	r3, [pc, #12]	; 1123c <__assert_fail@plt+0x418>
   1122c:	bl	10d1c <__libc_start_main@plt>
   11230:	bl	10e18 <abort@plt>
   11234:	andeq	r5, r1, r8, lsr r0
   11238:	andeq	r0, r1, r0, lsr lr
   1123c:	ldrdeq	r4, [r1], -r8
   11240:	ldr	r3, [pc, #20]	; 1125c <__assert_fail@plt+0x438>
   11244:	ldr	r2, [pc, #20]	; 11260 <__assert_fail@plt+0x43c>
   11248:	add	r3, pc, r3
   1124c:	ldr	r2, [r3, r2]
   11250:	cmp	r2, #0
   11254:	bxeq	lr
   11258:	b	10d34 <__gmon_start__@plt>
   1125c:			; <UNDEFINED> instruction: 0x00014db0
   11260:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11264:	ldr	r3, [pc, #28]	; 11288 <__assert_fail@plt+0x464>
   11268:	ldr	r0, [pc, #28]	; 1128c <__assert_fail@plt+0x468>
   1126c:	sub	r3, r3, r0
   11270:	cmp	r3, #6
   11274:	bxls	lr
   11278:	ldr	r3, [pc, #16]	; 11290 <__assert_fail@plt+0x46c>
   1127c:	cmp	r3, #0
   11280:	bxeq	lr
   11284:	bx	r3
   11288:	andeq	r6, r2, r7, lsr #2
   1128c:	andeq	r6, r2, r4, lsr #2
   11290:	andeq	r0, r0, r0
   11294:	ldr	r1, [pc, #36]	; 112c0 <__assert_fail@plt+0x49c>
   11298:	ldr	r0, [pc, #36]	; 112c4 <__assert_fail@plt+0x4a0>
   1129c:	sub	r1, r1, r0
   112a0:	asr	r1, r1, #2
   112a4:	add	r1, r1, r1, lsr #31
   112a8:	asrs	r1, r1, #1
   112ac:	bxeq	lr
   112b0:	ldr	r3, [pc, #16]	; 112c8 <__assert_fail@plt+0x4a4>
   112b4:	cmp	r3, #0
   112b8:	bxeq	lr
   112bc:	bx	r3
   112c0:	andeq	r6, r2, r4, lsr #2
   112c4:	andeq	r6, r2, r4, lsr #2
   112c8:	andeq	r0, r0, r0
   112cc:	push	{r4, lr}
   112d0:	ldr	r4, [pc, #24]	; 112f0 <__assert_fail@plt+0x4cc>
   112d4:	ldrb	r3, [r4]
   112d8:	cmp	r3, #0
   112dc:	popne	{r4, pc}
   112e0:	bl	11264 <__assert_fail@plt+0x440>
   112e4:	mov	r3, #1
   112e8:	strb	r3, [r4]
   112ec:	pop	{r4, pc}
   112f0:	andeq	r6, r2, r4, asr #2
   112f4:	ldr	r0, [pc, #40]	; 11324 <__assert_fail@plt+0x500>
   112f8:	ldr	r3, [r0]
   112fc:	cmp	r3, #0
   11300:	bne	11308 <__assert_fail@plt+0x4e4>
   11304:	b	11294 <__assert_fail@plt+0x470>
   11308:	ldr	r3, [pc, #24]	; 11328 <__assert_fail@plt+0x504>
   1130c:	cmp	r3, #0
   11310:	beq	11304 <__assert_fail@plt+0x4e0>
   11314:	push	{r4, lr}
   11318:	blx	r3
   1131c:	pop	{r4, lr}
   11320:	b	11294 <__assert_fail@plt+0x470>
   11324:	andeq	r5, r2, r4, lsl pc
   11328:	andeq	r0, r0, r0
   1132c:	subs	r6, r0, #0
   11330:	push	{r7, lr}
   11334:	sub	sp, sp, #56	; 0x38
   11338:	beq	11374 <__assert_fail@plt+0x550>
   1133c:	ldr	r3, [pc, #704]	; 11604 <__assert_fail@plt+0x7e0>
   11340:	mov	r2, #5
   11344:	ldr	r1, [pc, #700]	; 11608 <__assert_fail@plt+0x7e4>
   11348:	mov	r0, #0
   1134c:	ldr	r4, [r3]
   11350:	bl	10c80 <dcgettext@plt>
   11354:	ldr	r3, [pc, #688]	; 1160c <__assert_fail@plt+0x7e8>
   11358:	mov	r1, #1
   1135c:	ldr	r3, [r3]
   11360:	mov	r2, r0
   11364:	mov	r0, r4
   11368:	bl	10db8 <__fprintf_chk@plt>
   1136c:	mov	r0, r6
   11370:	bl	10d58 <exit@plt>
   11374:	mov	r2, #5
   11378:	ldr	r1, [pc, #656]	; 11610 <__assert_fail@plt+0x7ec>
   1137c:	bl	10c80 <dcgettext@plt>
   11380:	ldr	r3, [pc, #644]	; 1160c <__assert_fail@plt+0x7e8>
   11384:	ldr	r7, [pc, #648]	; 11614 <__assert_fail@plt+0x7f0>
   11388:	ldr	r4, [pc, #648]	; 11618 <__assert_fail@plt+0x7f4>
   1138c:	ldr	r2, [r3]
   11390:	mov	r1, r0
   11394:	mov	r0, #1
   11398:	bl	10da0 <__printf_chk@plt>
   1139c:	mov	r2, #5
   113a0:	ldr	r1, [pc, #628]	; 1161c <__assert_fail@plt+0x7f8>
   113a4:	mov	r0, r6
   113a8:	bl	10c80 <dcgettext@plt>
   113ac:	mov	r3, #19
   113b0:	mvn	r2, #19
   113b4:	mov	r1, r0
   113b8:	mov	r0, #1
   113bc:	bl	10da0 <__printf_chk@plt>
   113c0:	mov	r2, #5
   113c4:	ldr	r1, [pc, #596]	; 11620 <__assert_fail@plt+0x7fc>
   113c8:	mov	r0, r6
   113cc:	bl	10c80 <dcgettext@plt>
   113d0:	ldr	r1, [r7]
   113d4:	bl	10bf0 <fputs_unlocked@plt>
   113d8:	mov	r2, #5
   113dc:	ldr	r1, [pc, #576]	; 11624 <__assert_fail@plt+0x800>
   113e0:	mov	r0, r6
   113e4:	bl	10c80 <dcgettext@plt>
   113e8:	ldr	r1, [r7]
   113ec:	bl	10bf0 <fputs_unlocked@plt>
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #556]	; 11628 <__assert_fail@plt+0x804>
   113f8:	mov	r0, r6
   113fc:	bl	10c80 <dcgettext@plt>
   11400:	ldr	r1, [r7]
   11404:	bl	10bf0 <fputs_unlocked@plt>
   11408:	mov	r2, #5
   1140c:	ldr	r1, [pc, #536]	; 1162c <__assert_fail@plt+0x808>
   11410:	mov	r0, r6
   11414:	bl	10c80 <dcgettext@plt>
   11418:	ldr	r1, [r7]
   1141c:	bl	10bf0 <fputs_unlocked@plt>
   11420:	mov	r2, #5
   11424:	ldr	r1, [pc, #516]	; 11630 <__assert_fail@plt+0x80c>
   11428:	mov	r0, r6
   1142c:	bl	10c80 <dcgettext@plt>
   11430:	ldr	r2, [pc, #508]	; 11634 <__assert_fail@plt+0x810>
   11434:	mov	r1, r0
   11438:	mov	r0, #1
   1143c:	bl	10da0 <__printf_chk@plt>
   11440:	ldm	r4!, {r0, r1, r2, r3}
   11444:	mov	lr, sp
   11448:	stmia	lr!, {r0, r1, r2, r3}
   1144c:	ldm	r4!, {r0, r1, r2, r3}
   11450:	ldr	ip, [sp]
   11454:	stmia	lr!, {r0, r1, r2, r3}
   11458:	cmp	ip, #0
   1145c:	ldm	r4!, {r0, r1, r2, r3}
   11460:	stmia	lr!, {r0, r1, r2, r3}
   11464:	ldm	r4, {r0, r1}
   11468:	moveq	r4, sp
   1146c:	stm	lr, {r0, r1}
   11470:	beq	114a0 <__assert_fail@plt+0x67c>
   11474:	ldr	r5, [pc, #440]	; 11634 <__assert_fail@plt+0x810>
   11478:	mov	r4, sp
   1147c:	b	1148c <__assert_fail@plt+0x668>
   11480:	ldr	ip, [r4, #8]!
   11484:	cmp	ip, #0
   11488:	beq	114a0 <__assert_fail@plt+0x67c>
   1148c:	mov	r1, ip
   11490:	mov	r0, r5
   11494:	bl	10c08 <strcmp@plt>
   11498:	cmp	r0, #0
   1149c:	bne	11480 <__assert_fail@plt+0x65c>
   114a0:	ldr	r4, [r4, #4]
   114a4:	mov	r2, #5
   114a8:	cmp	r4, #0
   114ac:	ldr	r1, [pc, #388]	; 11638 <__assert_fail@plt+0x814>
   114b0:	beq	11558 <__assert_fail@plt+0x734>
   114b4:	mov	r0, #0
   114b8:	bl	10c80 <dcgettext@plt>
   114bc:	ldr	r3, [pc, #376]	; 1163c <__assert_fail@plt+0x818>
   114c0:	ldr	r2, [pc, #376]	; 11640 <__assert_fail@plt+0x81c>
   114c4:	mov	r1, r0
   114c8:	mov	r0, #1
   114cc:	bl	10da0 <__printf_chk@plt>
   114d0:	mov	r1, #0
   114d4:	mov	r0, #5
   114d8:	bl	10ddc <setlocale@plt>
   114dc:	cmp	r0, #0
   114e0:	ldreq	r5, [pc, #332]	; 11634 <__assert_fail@plt+0x810>
   114e4:	beq	11500 <__assert_fail@plt+0x6dc>
   114e8:	mov	r2, #3
   114ec:	ldr	r1, [pc, #336]	; 11644 <__assert_fail@plt+0x820>
   114f0:	bl	10e0c <strncmp@plt>
   114f4:	ldr	r5, [pc, #312]	; 11634 <__assert_fail@plt+0x810>
   114f8:	cmp	r0, #0
   114fc:	bne	115e8 <__assert_fail@plt+0x7c4>
   11500:	mov	r2, #5
   11504:	ldr	r1, [pc, #316]	; 11648 <__assert_fail@plt+0x824>
   11508:	mov	r0, #0
   1150c:	bl	10c80 <dcgettext@plt>
   11510:	ldr	r3, [pc, #284]	; 11634 <__assert_fail@plt+0x810>
   11514:	ldr	r2, [pc, #288]	; 1163c <__assert_fail@plt+0x818>
   11518:	mov	r1, r0
   1151c:	mov	r0, #1
   11520:	bl	10da0 <__printf_chk@plt>
   11524:	mov	r2, #5
   11528:	ldr	r1, [pc, #284]	; 1164c <__assert_fail@plt+0x828>
   1152c:	mov	r0, #0
   11530:	bl	10c80 <dcgettext@plt>
   11534:	ldr	r2, [pc, #276]	; 11650 <__assert_fail@plt+0x82c>
   11538:	cmp	r4, r5
   1153c:	ldr	r3, [pc, #272]	; 11654 <__assert_fail@plt+0x830>
   11540:	movne	r3, r2
   11544:	mov	r1, r0
   11548:	mov	r2, r4
   1154c:	mov	r0, #1
   11550:	bl	10da0 <__printf_chk@plt>
   11554:	b	1136c <__assert_fail@plt+0x548>
   11558:	mov	r0, r4
   1155c:	bl	10c80 <dcgettext@plt>
   11560:	ldr	r3, [pc, #212]	; 1163c <__assert_fail@plt+0x818>
   11564:	ldr	r2, [pc, #212]	; 11640 <__assert_fail@plt+0x81c>
   11568:	mov	r1, r0
   1156c:	mov	r0, #1
   11570:	bl	10da0 <__printf_chk@plt>
   11574:	mov	r1, r4
   11578:	mov	r0, #5
   1157c:	bl	10ddc <setlocale@plt>
   11580:	cmp	r0, #0
   11584:	beq	1159c <__assert_fail@plt+0x778>
   11588:	mov	r2, #3
   1158c:	ldr	r1, [pc, #176]	; 11644 <__assert_fail@plt+0x820>
   11590:	bl	10e0c <strncmp@plt>
   11594:	cmp	r0, #0
   11598:	bne	115e0 <__assert_fail@plt+0x7bc>
   1159c:	mov	r2, #5
   115a0:	ldr	r1, [pc, #160]	; 11648 <__assert_fail@plt+0x824>
   115a4:	mov	r0, #0
   115a8:	bl	10c80 <dcgettext@plt>
   115ac:	ldr	r3, [pc, #128]	; 11634 <__assert_fail@plt+0x810>
   115b0:	ldr	r2, [pc, #132]	; 1163c <__assert_fail@plt+0x818>
   115b4:	mov	r4, r3
   115b8:	mov	r1, r0
   115bc:	mov	r0, #1
   115c0:	bl	10da0 <__printf_chk@plt>
   115c4:	ldr	r1, [pc, #128]	; 1164c <__assert_fail@plt+0x828>
   115c8:	mov	r2, #5
   115cc:	mov	r0, #0
   115d0:	bl	10c80 <dcgettext@plt>
   115d4:	ldr	r3, [pc, #120]	; 11654 <__assert_fail@plt+0x830>
   115d8:	mov	r1, r0
   115dc:	b	11548 <__assert_fail@plt+0x724>
   115e0:	ldr	r5, [pc, #76]	; 11634 <__assert_fail@plt+0x810>
   115e4:	mov	r4, r5
   115e8:	mov	r2, #5
   115ec:	ldr	r1, [pc, #100]	; 11658 <__assert_fail@plt+0x834>
   115f0:	mov	r0, #0
   115f4:	bl	10c80 <dcgettext@plt>
   115f8:	ldr	r1, [r7]
   115fc:	bl	10bf0 <fputs_unlocked@plt>
   11600:	b	11500 <__assert_fail@plt+0x6dc>
   11604:	andeq	r6, r2, r8, lsr r1
   11608:	andeq	r5, r1, r0, ror #1
   1160c:	andeq	r6, r2, r0, asr r1
   11610:	andeq	r5, r1, r8, lsl #2
   11614:	andeq	r6, r2, ip, lsr r1
   11618:	andeq	r5, r1, r0, rrx
   1161c:	andeq	r5, r1, r0, lsr r1
   11620:	andeq	r5, r1, r0, lsl r2
   11624:	andeq	r5, r1, ip, asr r2
   11628:	andeq	r5, r1, r0, lsr #5
   1162c:	ldrdeq	r5, [r1], -r0
   11630:	andeq	r5, r1, r8, lsl #6
   11634:	ldrdeq	r5, [r1], -r8
   11638:	andeq	r5, r1, r8, asr #7
   1163c:	andeq	r5, r1, r0, ror #7
   11640:	andeq	r5, r1, r8, lsl #8
   11644:	andeq	r5, r1, r8, lsl r4
   11648:	andeq	r5, r1, r4, ror #8
   1164c:	andeq	r5, r1, r0, lsl #9
   11650:	andeq	r5, r1, ip, asr #5
   11654:	andeq	r5, r1, r8, asr r5
   11658:	andeq	r5, r1, ip, lsl r4
   1165c:	ldr	r3, [pc, #4]	; 11668 <__assert_fail@plt+0x844>
   11660:	str	r0, [r3]
   11664:	bx	lr
   11668:	andeq	r6, r2, r8, asr #2
   1166c:	ldr	r3, [pc, #4]	; 11678 <__assert_fail@plt+0x854>
   11670:	strb	r0, [r3, #4]
   11674:	bx	lr
   11678:	andeq	r6, r2, r8, asr #2
   1167c:	ldr	r3, [pc, #192]	; 11744 <__assert_fail@plt+0x920>
   11680:	push	{r4, r5, r6, lr}
   11684:	sub	sp, sp, #8
   11688:	ldr	r0, [r3]
   1168c:	bl	14740 <__assert_fail@plt+0x391c>
   11690:	cmp	r0, #0
   11694:	beq	116b8 <__assert_fail@plt+0x894>
   11698:	ldr	r4, [pc, #168]	; 11748 <__assert_fail@plt+0x924>
   1169c:	ldrb	r3, [r4, #4]
   116a0:	cmp	r3, #0
   116a4:	beq	116d4 <__assert_fail@plt+0x8b0>
   116a8:	bl	10d7c <__errno_location@plt>
   116ac:	ldr	r3, [r0]
   116b0:	cmp	r3, #32
   116b4:	bne	116d4 <__assert_fail@plt+0x8b0>
   116b8:	ldr	r3, [pc, #140]	; 1174c <__assert_fail@plt+0x928>
   116bc:	ldr	r0, [r3]
   116c0:	bl	14740 <__assert_fail@plt+0x391c>
   116c4:	cmp	r0, #0
   116c8:	bne	1171c <__assert_fail@plt+0x8f8>
   116cc:	add	sp, sp, #8
   116d0:	pop	{r4, r5, r6, pc}
   116d4:	mov	r2, #5
   116d8:	ldr	r1, [pc, #112]	; 11750 <__assert_fail@plt+0x92c>
   116dc:	mov	r0, #0
   116e0:	bl	10c80 <dcgettext@plt>
   116e4:	ldr	r4, [r4]
   116e8:	cmp	r4, #0
   116ec:	mov	r5, r0
   116f0:	beq	11728 <__assert_fail@plt+0x904>
   116f4:	bl	10d7c <__errno_location@plt>
   116f8:	ldr	r6, [r0]
   116fc:	mov	r0, r4
   11700:	bl	13488 <__assert_fail@plt+0x2664>
   11704:	mov	r1, r6
   11708:	str	r5, [sp]
   1170c:	ldr	r2, [pc, #64]	; 11754 <__assert_fail@plt+0x930>
   11710:	mov	r3, r0
   11714:	mov	r0, #0
   11718:	bl	10cf8 <error@plt>
   1171c:	ldr	r3, [pc, #52]	; 11758 <__assert_fail@plt+0x934>
   11720:	ldr	r0, [r3]
   11724:	bl	10c38 <_exit@plt>
   11728:	bl	10d7c <__errno_location@plt>
   1172c:	mov	r3, r5
   11730:	ldr	r2, [pc, #36]	; 1175c <__assert_fail@plt+0x938>
   11734:	ldr	r1, [r0]
   11738:	mov	r0, r4
   1173c:	bl	10cf8 <error@plt>
   11740:	b	1171c <__assert_fail@plt+0x8f8>
   11744:	andeq	r6, r2, ip, lsr r1
   11748:	andeq	r6, r2, r8, asr #2
   1174c:	andeq	r6, r2, r8, lsr r1
   11750:	ldrdeq	r5, [r1], -ip
   11754:	andeq	r5, r1, r8, ror #11
   11758:	andeq	r6, r2, r0, ror #1
   1175c:	andeq	r5, r1, ip, ror #11
   11760:	push	{r4, r5, r6, lr}
   11764:	subs	r4, r0, #0
   11768:	beq	117dc <__assert_fail@plt+0x9b8>
   1176c:	mov	r1, #47	; 0x2f
   11770:	bl	10de8 <strrchr@plt>
   11774:	subs	r5, r0, #0
   11778:	beq	117c8 <__assert_fail@plt+0x9a4>
   1177c:	add	r6, r5, #1
   11780:	sub	r3, r6, r4
   11784:	cmp	r3, #6
   11788:	ble	117c8 <__assert_fail@plt+0x9a4>
   1178c:	mov	r2, #7
   11790:	ldr	r1, [pc, #96]	; 117f8 <__assert_fail@plt+0x9d4>
   11794:	sub	r0, r5, #6
   11798:	bl	10e0c <strncmp@plt>
   1179c:	cmp	r0, #0
   117a0:	bne	117c8 <__assert_fail@plt+0x9a4>
   117a4:	mov	r2, #3
   117a8:	ldr	r1, [pc, #76]	; 117fc <__assert_fail@plt+0x9d8>
   117ac:	mov	r0, r6
   117b0:	bl	10e0c <strncmp@plt>
   117b4:	cmp	r0, #0
   117b8:	movne	r4, r6
   117bc:	ldreq	r3, [pc, #60]	; 11800 <__assert_fail@plt+0x9dc>
   117c0:	addeq	r4, r5, #4
   117c4:	streq	r4, [r3]
   117c8:	ldr	r2, [pc, #52]	; 11804 <__assert_fail@plt+0x9e0>
   117cc:	ldr	r3, [pc, #52]	; 11808 <__assert_fail@plt+0x9e4>
   117d0:	str	r4, [r2]
   117d4:	str	r4, [r3]
   117d8:	pop	{r4, r5, r6, pc}
   117dc:	ldr	r3, [pc, #40]	; 1180c <__assert_fail@plt+0x9e8>
   117e0:	mov	r2, #55	; 0x37
   117e4:	mov	r1, #1
   117e8:	ldr	r3, [r3]
   117ec:	ldr	r0, [pc, #28]	; 11810 <__assert_fail@plt+0x9ec>
   117f0:	bl	10cbc <fwrite@plt>
   117f4:	bl	10e18 <abort@plt>
   117f8:	andeq	r5, r1, r8, lsr #12
   117fc:	andeq	r5, r1, r0, lsr r6
   11800:	andeq	r6, r2, r8, lsr #2
   11804:	andeq	r6, r2, r0, asr r1
   11808:	andeq	r6, r2, ip, lsr #2
   1180c:	andeq	r6, r2, r8, lsr r1
   11810:	strdeq	r5, [r1], -r0
   11814:	push	{r4, r5, r6, lr}
   11818:	mov	r2, #48	; 0x30
   1181c:	mov	r4, r1
   11820:	mov	r1, #0
   11824:	mov	r5, r0
   11828:	bl	10d94 <memset@plt>
   1182c:	cmp	r4, #10
   11830:	beq	11840 <__assert_fail@plt+0xa1c>
   11834:	str	r4, [r5]
   11838:	mov	r0, r5
   1183c:	pop	{r4, r5, r6, pc}
   11840:	bl	10e18 <abort@plt>
   11844:	push	{r4, r5, r6, lr}
   11848:	mov	r4, r0
   1184c:	mov	r5, r1
   11850:	bl	149b4 <__assert_fail@plt+0x3b90>
   11854:	ldrb	r3, [r0]
   11858:	bic	r3, r3, #32
   1185c:	cmp	r3, #85	; 0x55
   11860:	bne	118c0 <__assert_fail@plt+0xa9c>
   11864:	ldrb	r3, [r0, #1]
   11868:	bic	r3, r3, #32
   1186c:	cmp	r3, #84	; 0x54
   11870:	bne	118fc <__assert_fail@plt+0xad8>
   11874:	ldrb	r3, [r0, #2]
   11878:	bic	r3, r3, #32
   1187c:	cmp	r3, #70	; 0x46
   11880:	bne	118fc <__assert_fail@plt+0xad8>
   11884:	ldrb	r3, [r0, #3]
   11888:	cmp	r3, #45	; 0x2d
   1188c:	bne	118fc <__assert_fail@plt+0xad8>
   11890:	ldrb	r3, [r0, #4]
   11894:	cmp	r3, #56	; 0x38
   11898:	bne	118fc <__assert_fail@plt+0xad8>
   1189c:	ldrb	r3, [r0, #5]
   118a0:	cmp	r3, #0
   118a4:	bne	118fc <__assert_fail@plt+0xad8>
   118a8:	ldrb	r2, [r4]
   118ac:	ldr	r3, [pc, #152]	; 1194c <__assert_fail@plt+0xb28>
   118b0:	ldr	r0, [pc, #152]	; 11950 <__assert_fail@plt+0xb2c>
   118b4:	cmp	r2, #96	; 0x60
   118b8:	movne	r0, r3
   118bc:	pop	{r4, r5, r6, pc}
   118c0:	cmp	r3, #71	; 0x47
   118c4:	bne	118fc <__assert_fail@plt+0xad8>
   118c8:	ldrb	r3, [r0, #1]
   118cc:	bic	r3, r3, #32
   118d0:	cmp	r3, #66	; 0x42
   118d4:	bne	118fc <__assert_fail@plt+0xad8>
   118d8:	ldrb	r3, [r0, #2]
   118dc:	cmp	r3, #49	; 0x31
   118e0:	bne	118fc <__assert_fail@plt+0xad8>
   118e4:	ldrb	r3, [r0, #3]
   118e8:	cmp	r3, #56	; 0x38
   118ec:	bne	118fc <__assert_fail@plt+0xad8>
   118f0:	ldrb	r3, [r0, #4]
   118f4:	cmp	r3, #48	; 0x30
   118f8:	beq	11910 <__assert_fail@plt+0xaec>
   118fc:	ldr	r3, [pc, #80]	; 11954 <__assert_fail@plt+0xb30>
   11900:	cmp	r5, #9
   11904:	ldr	r0, [pc, #76]	; 11958 <__assert_fail@plt+0xb34>
   11908:	movne	r0, r3
   1190c:	pop	{r4, r5, r6, pc}
   11910:	ldrb	r3, [r0, #5]
   11914:	cmp	r3, #51	; 0x33
   11918:	bne	118fc <__assert_fail@plt+0xad8>
   1191c:	ldrb	r3, [r0, #6]
   11920:	cmp	r3, #48	; 0x30
   11924:	bne	118fc <__assert_fail@plt+0xad8>
   11928:	ldrb	r3, [r0, #7]
   1192c:	cmp	r3, #0
   11930:	bne	118fc <__assert_fail@plt+0xad8>
   11934:	ldrb	r2, [r4]
   11938:	ldr	r3, [pc, #28]	; 1195c <__assert_fail@plt+0xb38>
   1193c:	ldr	r0, [pc, #28]	; 11960 <__assert_fail@plt+0xb3c>
   11940:	cmp	r2, #96	; 0x60
   11944:	movne	r0, r3
   11948:	pop	{r4, r5, r6, pc}
   1194c:	andeq	r5, r1, ip, lsl #13
   11950:	andeq	r5, r1, r8, lsl #13
   11954:	muleq	r1, ip, r6
   11958:	muleq	r1, r8, r6
   1195c:	muleq	r1, r4, r6
   11960:	muleq	r1, r0, r6
   11964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11968:	sub	sp, sp, #116	; 0x74
   1196c:	mov	sl, r0
   11970:	str	r3, [sp, #24]
   11974:	mov	r3, #1
   11978:	mov	r8, r1
   1197c:	str	r2, [sp, #56]	; 0x38
   11980:	str	r3, [sp, #36]	; 0x24
   11984:	bl	10cd4 <__ctype_get_mb_cur_max@plt>
   11988:	ldr	r3, [sp, #156]	; 0x9c
   1198c:	mov	fp, r8
   11990:	mov	r2, #0
   11994:	lsr	r3, r3, #1
   11998:	and	r3, r3, #1
   1199c:	str	r2, [sp, #68]	; 0x44
   119a0:	str	r3, [sp, #28]
   119a4:	str	r2, [sp, #40]	; 0x28
   119a8:	str	r2, [sp, #44]	; 0x2c
   119ac:	str	r2, [sp, #52]	; 0x34
   119b0:	str	r2, [sp, #64]	; 0x40
   119b4:	str	r2, [sp, #72]	; 0x48
   119b8:	str	sl, [sp, #32]
   119bc:	str	r0, [sp, #76]	; 0x4c
   119c0:	ldr	r3, [sp, #152]	; 0x98
   119c4:	cmp	r3, #10
   119c8:	ldrls	pc, [pc, r3, lsl #2]
   119cc:	b	12b8c <__assert_fail@plt+0x1d68>
   119d0:	strdeq	r1, [r1], -ip
   119d4:	andeq	r1, r1, r4, ror #25
   119d8:	andeq	r1, r1, r8, lsl #26
   119dc:	andeq	r1, r1, ip, lsr #26
   119e0:	andeq	r1, r1, r8, asr lr
   119e4:	andeq	r1, r1, ip, lsr #28
   119e8:	andeq	r1, r1, r4, lsl #28
   119ec:	andeq	r1, r1, r0, asr #26
   119f0:	andeq	r1, r1, r8, asr sp
   119f4:	andeq	r1, r1, r8, asr sp
   119f8:	andeq	r1, r1, r8, asr sp
   119fc:	mov	r3, #0
   11a00:	mov	r7, r3
   11a04:	str	r3, [sp, #28]
   11a08:	ldr	r3, [sp, #44]	; 0x2c
   11a0c:	mov	sl, #0
   11a10:	eor	r3, r3, #1
   11a14:	str	r3, [sp, #60]	; 0x3c
   11a18:	ldr	r3, [sp, #24]
   11a1c:	cmn	r3, #1
   11a20:	beq	11f84 <__assert_fail@plt+0x1160>
   11a24:	ldr	r3, [sp, #24]
   11a28:	subs	r5, r3, sl
   11a2c:	movne	r5, #1
   11a30:	cmp	r5, #0
   11a34:	beq	11f9c <__assert_fail@plt+0x1178>
   11a38:	ldr	r3, [sp, #152]	; 0x98
   11a3c:	ldr	r8, [sp, #44]	; 0x2c
   11a40:	cmp	r3, #2
   11a44:	moveq	r8, #0
   11a48:	andne	r8, r8, #1
   11a4c:	ldr	r3, [sp, #52]	; 0x34
   11a50:	adds	r9, r3, #0
   11a54:	movne	r9, #1
   11a58:	ands	r6, r9, r8
   11a5c:	beq	12404 <__assert_fail@plt+0x15e0>
   11a60:	ldr	r2, [sp, #52]	; 0x34
   11a64:	ldr	r1, [sp, #24]
   11a68:	cmp	r2, #1
   11a6c:	mov	r3, r2
   11a70:	movls	r3, #0
   11a74:	movhi	r3, #1
   11a78:	cmn	r1, #1
   11a7c:	movne	r3, #0
   11a80:	cmp	r3, #0
   11a84:	add	r4, sl, r2
   11a88:	beq	11a98 <__assert_fail@plt+0xc74>
   11a8c:	ldr	r0, [sp, #56]	; 0x38
   11a90:	bl	10d64 <strlen@plt>
   11a94:	str	r0, [sp, #24]
   11a98:	ldr	r3, [sp, #24]
   11a9c:	cmp	r3, r4
   11aa0:	ldr	r3, [sp, #56]	; 0x38
   11aa4:	add	r3, r3, sl
   11aa8:	str	r3, [sp, #48]	; 0x30
   11aac:	bcc	12410 <__assert_fail@plt+0x15ec>
   11ab0:	mov	r0, r3
   11ab4:	ldr	r2, [sp, #52]	; 0x34
   11ab8:	ldr	r1, [sp, #64]	; 0x40
   11abc:	bl	10c68 <memcmp@plt>
   11ac0:	cmp	r0, #0
   11ac4:	bne	12410 <__assert_fail@plt+0x15ec>
   11ac8:	ldr	r3, [sp, #28]
   11acc:	cmp	r3, #0
   11ad0:	bne	12c8c <__assert_fail@plt+0x1e68>
   11ad4:	ldr	r3, [sp, #48]	; 0x30
   11ad8:	ldrb	r4, [r3]
   11adc:	cmp	r4, #126	; 0x7e
   11ae0:	ldrls	pc, [pc, r4, lsl #2]
   11ae4:	b	123a4 <__assert_fail@plt+0x1580>
   11ae8:	andeq	r2, r1, r8, asr #3
   11aec:	andeq	r2, r1, r4, lsr #7
   11af0:	andeq	r2, r1, r4, lsr #7
   11af4:	andeq	r2, r1, r4, lsr #7
   11af8:	andeq	r2, r1, r4, lsr #7
   11afc:	andeq	r2, r1, r4, lsr #7
   11b00:	andeq	r2, r1, r4, lsr #7
   11b04:	andeq	r2, r1, ip, lsr #3
   11b08:	muleq	r1, r0, r1
   11b0c:	andeq	r2, r1, ip, lsl #7
   11b10:	strdeq	r2, [r1], -r0
   11b14:	ldrdeq	r2, [r1], -r4
   11b18:	andeq	r2, r1, r8, ror #6
   11b1c:	andeq	r2, r1, r4, asr #6
   11b20:	andeq	r2, r1, r4, lsr #7
   11b24:	andeq	r2, r1, r4, lsr #7
   11b28:	andeq	r2, r1, r4, lsr #7
   11b2c:	andeq	r2, r1, r4, lsr #7
   11b30:	andeq	r2, r1, r4, lsr #7
   11b34:	andeq	r2, r1, r4, lsr #7
   11b38:	andeq	r2, r1, r4, lsr #7
   11b3c:	andeq	r2, r1, r4, lsr #7
   11b40:	andeq	r2, r1, r4, lsr #7
   11b44:	andeq	r2, r1, r4, lsr #7
   11b48:	andeq	r2, r1, r4, lsr #7
   11b4c:	andeq	r2, r1, r4, lsr #7
   11b50:	andeq	r2, r1, r4, lsr #7
   11b54:	andeq	r2, r1, r4, lsr #7
   11b58:	andeq	r2, r1, r4, lsr #7
   11b5c:	andeq	r2, r1, r4, lsr #7
   11b60:	andeq	r2, r1, r4, lsr #7
   11b64:	andeq	r2, r1, r4, lsr #7
   11b68:	andeq	r2, r1, r4, lsl #7
   11b6c:			; <UNDEFINED> instruction: 0x000122b8
   11b70:			; <UNDEFINED> instruction: 0x000122b8
   11b74:	andeq	r1, r1, r8, asr #29
   11b78:			; <UNDEFINED> instruction: 0x000122b8
   11b7c:	andeq	r2, r1, r0, asr r3
   11b80:			; <UNDEFINED> instruction: 0x000122b8
   11b84:	andeq	r2, r1, r4, lsr #6
   11b88:			; <UNDEFINED> instruction: 0x000122b8
   11b8c:			; <UNDEFINED> instruction: 0x000122b8
   11b90:			; <UNDEFINED> instruction: 0x000122b8
   11b94:	andeq	r2, r1, r0, asr r3
   11b98:	andeq	r2, r1, r0, asr r3
   11b9c:	andeq	r2, r1, r0, asr r3
   11ba0:	andeq	r2, r1, r0, asr r3
   11ba4:	andeq	r2, r1, r0, asr r3
   11ba8:	andeq	r2, r1, r0, asr r3
   11bac:	andeq	r2, r1, r0, asr r3
   11bb0:	andeq	r2, r1, r0, asr r3
   11bb4:	andeq	r2, r1, r0, asr r3
   11bb8:	andeq	r2, r1, r0, asr r3
   11bbc:	andeq	r2, r1, r0, asr r3
   11bc0:	andeq	r2, r1, r0, asr r3
   11bc4:	andeq	r2, r1, r0, asr r3
   11bc8:	andeq	r2, r1, r0, asr r3
   11bcc:	andeq	r2, r1, r0, asr r3
   11bd0:	andeq	r2, r1, r0, asr r3
   11bd4:			; <UNDEFINED> instruction: 0x000122b8
   11bd8:			; <UNDEFINED> instruction: 0x000122b8
   11bdc:			; <UNDEFINED> instruction: 0x000122b8
   11be0:			; <UNDEFINED> instruction: 0x000122b8
   11be4:	strdeq	r2, [r1], -r4
   11be8:	andeq	r2, r1, r4, lsr #7
   11bec:	andeq	r2, r1, r0, asr r3
   11bf0:	andeq	r2, r1, r0, asr r3
   11bf4:	andeq	r2, r1, r0, asr r3
   11bf8:	andeq	r2, r1, r0, asr r3
   11bfc:	andeq	r2, r1, r0, asr r3
   11c00:	andeq	r2, r1, r0, asr r3
   11c04:	andeq	r2, r1, r0, asr r3
   11c08:	andeq	r2, r1, r0, asr r3
   11c0c:	andeq	r2, r1, r0, asr r3
   11c10:	andeq	r2, r1, r0, asr r3
   11c14:	andeq	r2, r1, r0, asr r3
   11c18:	andeq	r2, r1, r0, asr r3
   11c1c:	andeq	r2, r1, r0, asr r3
   11c20:	andeq	r2, r1, r0, asr r3
   11c24:	andeq	r2, r1, r0, asr r3
   11c28:	andeq	r2, r1, r0, asr r3
   11c2c:	andeq	r2, r1, r0, asr r3
   11c30:	andeq	r2, r1, r0, asr r3
   11c34:	andeq	r2, r1, r0, asr r3
   11c38:	andeq	r2, r1, r0, asr r3
   11c3c:	andeq	r2, r1, r0, asr r3
   11c40:	andeq	r2, r1, r0, asr r3
   11c44:	andeq	r2, r1, r0, asr r3
   11c48:	andeq	r2, r1, r0, asr r3
   11c4c:	andeq	r2, r1, r0, asr r3
   11c50:	andeq	r2, r1, r0, asr r3
   11c54:			; <UNDEFINED> instruction: 0x000122b8
   11c58:	andeq	r2, r1, r4, lsl r0
   11c5c:	andeq	r2, r1, r0, asr r3
   11c60:			; <UNDEFINED> instruction: 0x000122b8
   11c64:	andeq	r2, r1, r0, asr r3
   11c68:			; <UNDEFINED> instruction: 0x000122b8
   11c6c:	andeq	r2, r1, r0, asr r3
   11c70:	andeq	r2, r1, r0, asr r3
   11c74:	andeq	r2, r1, r0, asr r3
   11c78:	andeq	r2, r1, r0, asr r3
   11c7c:	andeq	r2, r1, r0, asr r3
   11c80:	andeq	r2, r1, r0, asr r3
   11c84:	andeq	r2, r1, r0, asr r3
   11c88:	andeq	r2, r1, r0, asr r3
   11c8c:	andeq	r2, r1, r0, asr r3
   11c90:	andeq	r2, r1, r0, asr r3
   11c94:	andeq	r2, r1, r0, asr r3
   11c98:	andeq	r2, r1, r0, asr r3
   11c9c:	andeq	r2, r1, r0, asr r3
   11ca0:	andeq	r2, r1, r0, asr r3
   11ca4:	andeq	r2, r1, r0, asr r3
   11ca8:	andeq	r2, r1, r0, asr r3
   11cac:	andeq	r2, r1, r0, asr r3
   11cb0:	andeq	r2, r1, r0, asr r3
   11cb4:	andeq	r2, r1, r0, asr r3
   11cb8:	andeq	r2, r1, r0, asr r3
   11cbc:	andeq	r2, r1, r0, asr r3
   11cc0:	andeq	r2, r1, r0, asr r3
   11cc4:	andeq	r2, r1, r0, asr r3
   11cc8:	andeq	r2, r1, r0, asr r3
   11ccc:	andeq	r2, r1, r0, asr r3
   11cd0:	andeq	r2, r1, r0, asr r3
   11cd4:	andeq	r1, r1, r8, lsr #29
   11cd8:			; <UNDEFINED> instruction: 0x000122b8
   11cdc:	andeq	r1, r1, r8, lsr #29
   11ce0:	andeq	r1, r1, r8, asr #29
   11ce4:	mov	r3, #1
   11ce8:	str	r3, [sp, #28]
   11cec:	str	r3, [sp, #52]	; 0x34
   11cf0:	ldr	r3, [pc, #4000]	; 12c98 <__assert_fail@plt+0x1e74>
   11cf4:	mov	r7, #0
   11cf8:	str	r3, [sp, #64]	; 0x40
   11cfc:	mov	r3, #2
   11d00:	str	r3, [sp, #152]	; 0x98
   11d04:	b	11a08 <__assert_fail@plt+0xbe4>
   11d08:	ldr	r3, [sp, #28]
   11d0c:	cmp	r3, #0
   11d10:	beq	11e6c <__assert_fail@plt+0x1048>
   11d14:	mov	r3, #1
   11d18:	str	r3, [sp, #52]	; 0x34
   11d1c:	ldr	r3, [pc, #3956]	; 12c98 <__assert_fail@plt+0x1e74>
   11d20:	mov	r7, #0
   11d24:	str	r3, [sp, #64]	; 0x40
   11d28:	b	11a08 <__assert_fail@plt+0xbe4>
   11d2c:	mov	r3, #1
   11d30:	str	r3, [sp, #44]	; 0x2c
   11d34:	str	r3, [sp, #52]	; 0x34
   11d38:	str	r3, [sp, #28]
   11d3c:	b	11cf0 <__assert_fail@plt+0xecc>
   11d40:	mov	r3, #0
   11d44:	str	r3, [sp, #28]
   11d48:	mov	r3, #1
   11d4c:	str	r3, [sp, #44]	; 0x2c
   11d50:	mov	r7, #0
   11d54:	b	11a08 <__assert_fail@plt+0xbe4>
   11d58:	ldr	r3, [sp, #152]	; 0x98
   11d5c:	cmp	r3, #10
   11d60:	beq	11da4 <__assert_fail@plt+0xf80>
   11d64:	mov	r2, #5
   11d68:	ldr	r1, [pc, #3884]	; 12c9c <__assert_fail@plt+0x1e78>
   11d6c:	mov	r0, #0
   11d70:	bl	10c80 <dcgettext@plt>
   11d74:	ldr	r2, [pc, #3872]	; 12c9c <__assert_fail@plt+0x1e78>
   11d78:	cmp	r0, r2
   11d7c:	str	r0, [sp, #164]	; 0xa4
   11d80:	beq	12d88 <__assert_fail@plt+0x1f64>
   11d84:	mov	r2, #5
   11d88:	ldr	r1, [pc, #3848]	; 12c98 <__assert_fail@plt+0x1e74>
   11d8c:	mov	r0, #0
   11d90:	bl	10c80 <dcgettext@plt>
   11d94:	ldr	r2, [pc, #3836]	; 12c98 <__assert_fail@plt+0x1e74>
   11d98:	cmp	r0, r2
   11d9c:	str	r0, [sp, #168]	; 0xa8
   11da0:	beq	12d78 <__assert_fail@plt+0x1f54>
   11da4:	ldr	r7, [sp, #28]
   11da8:	cmp	r7, #0
   11dac:	movne	r7, #0
   11db0:	bne	11de4 <__assert_fail@plt+0xfc0>
   11db4:	ldr	r3, [sp, #164]	; 0xa4
   11db8:	ldrb	r3, [r3]
   11dbc:	cmp	r3, #0
   11dc0:	beq	12d98 <__assert_fail@plt+0x1f74>
   11dc4:	ldr	r2, [sp, #164]	; 0xa4
   11dc8:	ldr	r1, [sp, #32]
   11dcc:	cmp	fp, r7
   11dd0:	strbhi	r3, [r1, r7]
   11dd4:	ldrb	r3, [r2, #1]!
   11dd8:	add	r7, r7, #1
   11ddc:	cmp	r3, #0
   11de0:	bne	11dcc <__assert_fail@plt+0xfa8>
   11de4:	ldr	r0, [sp, #168]	; 0xa8
   11de8:	bl	10d64 <strlen@plt>
   11dec:	ldr	r3, [sp, #168]	; 0xa8
   11df0:	str	r3, [sp, #64]	; 0x40
   11df4:	mov	r3, #1
   11df8:	str	r3, [sp, #44]	; 0x2c
   11dfc:	str	r0, [sp, #52]	; 0x34
   11e00:	b	11a08 <__assert_fail@plt+0xbe4>
   11e04:	mov	r3, #1
   11e08:	str	r3, [sp, #44]	; 0x2c
   11e0c:	str	r3, [sp, #52]	; 0x34
   11e10:	str	r3, [sp, #28]
   11e14:	ldr	r3, [pc, #3716]	; 12ca0 <__assert_fail@plt+0x1e7c>
   11e18:	mov	r7, #0
   11e1c:	str	r3, [sp, #64]	; 0x40
   11e20:	mov	r3, #5
   11e24:	str	r3, [sp, #152]	; 0x98
   11e28:	b	11a08 <__assert_fail@plt+0xbe4>
   11e2c:	ldr	r3, [sp, #28]
   11e30:	cmp	r3, #0
   11e34:	beq	12b34 <__assert_fail@plt+0x1d10>
   11e38:	ldr	r3, [sp, #28]
   11e3c:	mov	r7, #0
   11e40:	str	r3, [sp, #44]	; 0x2c
   11e44:	mov	r3, #1
   11e48:	str	r3, [sp, #52]	; 0x34
   11e4c:	ldr	r3, [pc, #3660]	; 12ca0 <__assert_fail@plt+0x1e7c>
   11e50:	str	r3, [sp, #64]	; 0x40
   11e54:	b	11a08 <__assert_fail@plt+0xbe4>
   11e58:	ldr	r3, [sp, #28]
   11e5c:	cmp	r3, #0
   11e60:	mov	r3, #1
   11e64:	streq	r3, [sp, #44]	; 0x2c
   11e68:	bne	11cec <__assert_fail@plt+0xec8>
   11e6c:	cmp	fp, #0
   11e70:	beq	12b64 <__assert_fail@plt+0x1d40>
   11e74:	ldr	r3, [sp, #32]
   11e78:	mov	r2, #39	; 0x27
   11e7c:	mov	r7, #1
   11e80:	strb	r2, [r3]
   11e84:	mov	r3, #0
   11e88:	str	r3, [sp, #28]
   11e8c:	mov	r3, #1
   11e90:	str	r3, [sp, #52]	; 0x34
   11e94:	ldr	r3, [pc, #3580]	; 12c98 <__assert_fail@plt+0x1e74>
   11e98:	str	r3, [sp, #64]	; 0x40
   11e9c:	mov	r3, #2
   11ea0:	str	r3, [sp, #152]	; 0x98
   11ea4:	b	11a08 <__assert_fail@plt+0xbe4>
   11ea8:	ldr	r3, [sp, #24]
   11eac:	cmn	r3, #1
   11eb0:	beq	12ac8 <__assert_fail@plt+0x1ca4>
   11eb4:	ldr	r3, [sp, #24]
   11eb8:	subs	r3, r3, #1
   11ebc:	movne	r3, #1
   11ec0:	cmp	r3, #0
   11ec4:	bne	11ed0 <__assert_fail@plt+0x10ac>
   11ec8:	cmp	sl, #0
   11ecc:	beq	122bc <__assert_fail@plt+0x1498>
   11ed0:	ldr	r3, [sp, #152]	; 0x98
   11ed4:	mov	r5, #0
   11ed8:	sub	r2, r3, #2
   11edc:	mov	r8, r5
   11ee0:	clz	r2, r2
   11ee4:	lsr	r2, r2, #5
   11ee8:	ldr	r3, [sp, #60]	; 0x3c
   11eec:	ldr	r1, [sp, #28]
   11ef0:	orr	r3, r2, r3
   11ef4:	eor	r3, r3, #1
   11ef8:	orr	r3, r1, r3
   11efc:	tst	r3, #255	; 0xff
   11f00:	bne	1262c <__assert_fail@plt+0x1808>
   11f04:	cmp	r6, #0
   11f08:	bne	12058 <__assert_fail@plt+0x1234>
   11f0c:	ldr	r3, [sp, #40]	; 0x28
   11f10:	eor	r8, r8, #1
   11f14:	and	r8, r8, r3
   11f18:	add	sl, sl, #1
   11f1c:	uxtb	r6, r8
   11f20:	cmp	r6, #0
   11f24:	beq	11f58 <__assert_fail@plt+0x1134>
   11f28:	cmp	fp, r7
   11f2c:	movhi	r2, #39	; 0x27
   11f30:	ldrhi	r3, [sp, #32]
   11f34:	strbhi	r2, [r3, r7]
   11f38:	add	r3, r7, #1
   11f3c:	cmp	fp, r3
   11f40:	movhi	r1, #39	; 0x27
   11f44:	ldrhi	r2, [sp, #32]
   11f48:	add	r7, r7, #2
   11f4c:	strbhi	r1, [r2, r3]
   11f50:	mov	r3, #0
   11f54:	str	r3, [sp, #40]	; 0x28
   11f58:	cmp	r7, fp
   11f5c:	ldrcc	r3, [sp, #32]
   11f60:	strbcc	r4, [r3, r7]
   11f64:	ldr	r3, [sp, #36]	; 0x24
   11f68:	cmp	r5, #0
   11f6c:	moveq	r3, #0
   11f70:	str	r3, [sp, #36]	; 0x24
   11f74:	ldr	r3, [sp, #24]
   11f78:	add	r7, r7, #1
   11f7c:	cmn	r3, #1
   11f80:	bne	11a24 <__assert_fail@plt+0xc00>
   11f84:	ldr	r3, [sp, #56]	; 0x38
   11f88:	ldrb	r5, [r3, sl]
   11f8c:	adds	r5, r5, #0
   11f90:	movne	r5, #1
   11f94:	cmp	r5, #0
   11f98:	bne	11a38 <__assert_fail@plt+0xc14>
   11f9c:	ldr	r3, [sp, #152]	; 0x98
   11fa0:	ldr	r1, [sp, #28]
   11fa4:	sub	r3, r3, #2
   11fa8:	clz	r3, r3
   11fac:	lsr	r3, r3, #5
   11fb0:	and	r9, r1, r3
   11fb4:	cmp	r7, #0
   11fb8:	movne	r2, #0
   11fbc:	andeq	r2, r9, #1
   11fc0:	cmp	r2, #0
   11fc4:	bne	129a0 <__assert_fail@plt+0x1b7c>
   11fc8:	eor	r2, r1, #1
   11fcc:	ands	r3, r3, r2
   11fd0:	beq	12e5c <__assert_fail@plt+0x2038>
   11fd4:	ldr	r2, [sp, #68]	; 0x44
   11fd8:	cmp	r2, #0
   11fdc:	beq	12e48 <__assert_fail@plt+0x2024>
   11fe0:	ldr	r3, [sp, #36]	; 0x24
   11fe4:	cmp	r3, #0
   11fe8:	bne	12e00 <__assert_fail@plt+0x1fdc>
   11fec:	ldr	r2, [sp, #72]	; 0x48
   11ff0:	clz	r3, fp
   11ff4:	cmp	r2, #0
   11ff8:	lsr	r3, r3, #5
   11ffc:	moveq	r3, #0
   12000:	cmp	r3, #0
   12004:	beq	12da0 <__assert_fail@plt+0x1f7c>
   12008:	str	r3, [sp, #68]	; 0x44
   1200c:	ldr	fp, [sp, #72]	; 0x48
   12010:	b	119c0 <__assert_fail@plt+0xb9c>
   12014:	ldr	r3, [sp, #152]	; 0x98
   12018:	cmp	r3, #2
   1201c:	beq	12670 <__assert_fail@plt+0x184c>
   12020:	ldr	r3, [sp, #44]	; 0x2c
   12024:	ldr	r2, [sp, #28]
   12028:	and	r2, r3, r2
   1202c:	ands	r2, r9, r2
   12030:	bne	1267c <__assert_fail@plt+0x1858>
   12034:	mov	r4, #92	; 0x5c
   12038:	mov	r3, r4
   1203c:	ldr	r1, [sp, #44]	; 0x2c
   12040:	cmp	r1, #0
   12044:	moveq	r5, #0
   12048:	moveq	r8, r1
   1204c:	beq	11ee8 <__assert_fail@plt+0x10c4>
   12050:	mov	r4, r3
   12054:	mov	r5, #0
   12058:	ldr	r3, [sp, #28]
   1205c:	cmp	r3, #0
   12060:	bne	12664 <__assert_fail@plt+0x1840>
   12064:	ldr	r3, [sp, #40]	; 0x28
   12068:	eor	r9, r3, #1
   1206c:	and	r9, r9, r2
   12070:	ands	r9, r9, #255	; 0xff
   12074:	beq	120b8 <__assert_fail@plt+0x1294>
   12078:	cmp	fp, r7
   1207c:	movhi	r2, #39	; 0x27
   12080:	ldrhi	r3, [sp, #32]
   12084:	str	r9, [sp, #40]	; 0x28
   12088:	strbhi	r2, [r3, r7]
   1208c:	add	r3, r7, #1
   12090:	cmp	fp, r3
   12094:	movhi	r1, #36	; 0x24
   12098:	ldrhi	r2, [sp, #32]
   1209c:	strbhi	r1, [r2, r3]
   120a0:	add	r3, r7, #2
   120a4:	cmp	fp, r3
   120a8:	add	r7, r7, #3
   120ac:	ldrhi	r2, [sp, #32]
   120b0:	movhi	r1, #39	; 0x27
   120b4:	strbhi	r1, [r2, r3]
   120b8:	cmp	fp, r7
   120bc:	movhi	r2, #92	; 0x5c
   120c0:	ldrhi	r3, [sp, #32]
   120c4:	add	sl, sl, #1
   120c8:	strbhi	r2, [r3, r7]
   120cc:	add	r7, r7, #1
   120d0:	b	11f58 <__assert_fail@plt+0x1134>
   120d4:	ldr	r3, [sp, #152]	; 0x98
   120d8:	mov	r4, #11
   120dc:	sub	r2, r3, #2
   120e0:	mov	r3, #118	; 0x76
   120e4:	clz	r2, r2
   120e8:	lsr	r2, r2, #5
   120ec:	b	1203c <__assert_fail@plt+0x1218>
   120f0:	mov	r4, #10
   120f4:	mov	r3, #110	; 0x6e
   120f8:	ldr	r2, [sp, #152]	; 0x98
   120fc:	ldr	r1, [sp, #28]
   12100:	sub	r2, r2, #2
   12104:	clz	r2, r2
   12108:	lsr	r2, r2, #5
   1210c:	ands	r1, r1, r2
   12110:	beq	1203c <__assert_fail@plt+0x1218>
   12114:	ldr	sl, [sp, #32]
   12118:	mov	r8, fp
   1211c:	mov	r2, r1
   12120:	mov	r3, #2
   12124:	str	r3, [sp, #152]	; 0x98
   12128:	ldr	r9, [sp, #44]	; 0x2c
   1212c:	ldr	r3, [sp, #152]	; 0x98
   12130:	and	r9, r9, r2
   12134:	tst	r9, #255	; 0xff
   12138:	movne	r3, #4
   1213c:	str	r3, [sp, #152]	; 0x98
   12140:	ldr	r3, [sp, #156]	; 0x9c
   12144:	mov	ip, #0
   12148:	bic	r3, r3, #2
   1214c:	str	r3, [sp, #4]
   12150:	ldr	r3, [sp, #168]	; 0xa8
   12154:	ldr	r2, [sp, #56]	; 0x38
   12158:	str	r3, [sp, #16]
   1215c:	ldr	r3, [sp, #164]	; 0xa4
   12160:	mov	r1, r8
   12164:	str	r3, [sp, #12]
   12168:	ldr	r3, [sp, #152]	; 0x98
   1216c:	mov	r0, sl
   12170:	str	r3, [sp]
   12174:	str	ip, [sp, #8]
   12178:	ldr	r3, [sp, #24]
   1217c:	bl	11964 <__assert_fail@plt+0xb40>
   12180:	mov	fp, r0
   12184:	mov	r0, fp
   12188:	add	sp, sp, #116	; 0x74
   1218c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12190:	ldr	r3, [sp, #152]	; 0x98
   12194:	mov	r4, #8
   12198:	sub	r2, r3, #2
   1219c:	mov	r3, #98	; 0x62
   121a0:	clz	r2, r2
   121a4:	lsr	r2, r2, #5
   121a8:	b	1203c <__assert_fail@plt+0x1218>
   121ac:	ldr	r3, [sp, #152]	; 0x98
   121b0:	mov	r4, #7
   121b4:	sub	r2, r3, #2
   121b8:	mov	r3, #97	; 0x61
   121bc:	clz	r2, r2
   121c0:	lsr	r2, r2, #5
   121c4:	b	1203c <__assert_fail@plt+0x1218>
   121c8:	ldr	r3, [sp, #44]	; 0x2c
   121cc:	cmp	r3, #0
   121d0:	beq	129b4 <__assert_fail@plt+0x1b90>
   121d4:	ldr	r3, [sp, #28]
   121d8:	cmp	r3, #0
   121dc:	bne	12c8c <__assert_fail@plt+0x1e68>
   121e0:	ldr	r3, [sp, #152]	; 0x98
   121e4:	sub	r2, r3, #2
   121e8:	ldr	r3, [sp, #40]	; 0x28
   121ec:	clz	r2, r2
   121f0:	eor	r3, r3, #1
   121f4:	lsr	r2, r2, #5
   121f8:	ands	r3, r2, r3
   121fc:	moveq	r1, r7
   12200:	beq	12244 <__assert_fail@plt+0x1420>
   12204:	cmp	fp, r7
   12208:	movhi	r0, #39	; 0x27
   1220c:	ldrhi	r1, [sp, #32]
   12210:	str	r3, [sp, #40]	; 0x28
   12214:	strbhi	r0, [r1, r7]
   12218:	add	r1, r7, #1
   1221c:	cmp	fp, r1
   12220:	movhi	ip, #36	; 0x24
   12224:	ldrhi	r0, [sp, #32]
   12228:	strbhi	ip, [r0, r1]
   1222c:	add	r1, r7, #2
   12230:	cmp	fp, r1
   12234:	movhi	ip, #39	; 0x27
   12238:	ldrhi	r0, [sp, #32]
   1223c:	strbhi	ip, [r0, r1]
   12240:	add	r1, r7, #3
   12244:	cmp	fp, r1
   12248:	movhi	r0, #92	; 0x5c
   1224c:	ldrhi	r3, [sp, #32]
   12250:	add	r7, r1, #1
   12254:	strbhi	r0, [r3, r1]
   12258:	cmp	r8, #0
   1225c:	beq	12ba0 <__assert_fail@plt+0x1d7c>
   12260:	ldr	r0, [sp, #24]
   12264:	add	r3, sl, #1
   12268:	cmp	r3, r0
   1226c:	bcs	12adc <__assert_fail@plt+0x1cb8>
   12270:	ldr	r0, [sp, #56]	; 0x38
   12274:	ldrb	r3, [r0, r3]
   12278:	sub	r3, r3, #48	; 0x30
   1227c:	cmp	r3, #9
   12280:	bhi	12adc <__assert_fail@plt+0x1cb8>
   12284:	cmp	fp, r7
   12288:	movhi	r3, #48	; 0x30
   1228c:	ldrhi	r0, [sp, #32]
   12290:	ldr	r5, [sp, #28]
   12294:	mov	r4, #48	; 0x30
   12298:	strbhi	r3, [r0, r7]
   1229c:	add	r3, r1, #2
   122a0:	cmp	fp, r3
   122a4:	movhi	r0, #48	; 0x30
   122a8:	ldrhi	ip, [sp, #32]
   122ac:	add	r7, r1, #3
   122b0:	strbhi	r0, [ip, r3]
   122b4:	b	11ee8 <__assert_fail@plt+0x10c4>
   122b8:	mov	r5, #0
   122bc:	ldr	r3, [sp, #152]	; 0x98
   122c0:	sub	r2, r3, #2
   122c4:	ldr	r3, [sp, #28]
   122c8:	clz	r2, r2
   122cc:	lsr	r2, r2, #5
   122d0:	ands	r8, r3, r2
   122d4:	beq	11ee8 <__assert_fail@plt+0x10c4>
   122d8:	mov	r3, r8
   122dc:	mov	r2, r3
   122e0:	mov	r3, #2
   122e4:	ldr	sl, [sp, #32]
   122e8:	mov	r8, fp
   122ec:	str	r3, [sp, #152]	; 0x98
   122f0:	b	12128 <__assert_fail@plt+0x1304>
   122f4:	ldr	r3, [sp, #152]	; 0x98
   122f8:	cmp	r3, #2
   122fc:	beq	12a20 <__assert_fail@plt+0x1bfc>
   12300:	cmp	r3, #5
   12304:	beq	129e0 <__assert_fail@plt+0x1bbc>
   12308:	mov	r5, #0
   1230c:	sub	r2, r3, #2
   12310:	mov	r8, r5
   12314:	clz	r2, r2
   12318:	mov	r4, #63	; 0x3f
   1231c:	lsr	r2, r2, #5
   12320:	b	11ee8 <__assert_fail@plt+0x10c4>
   12324:	ldr	r3, [sp, #152]	; 0x98
   12328:	cmp	r3, #2
   1232c:	beq	12a40 <__assert_fail@plt+0x1c1c>
   12330:	mov	r2, #0
   12334:	str	r5, [sp, #68]	; 0x44
   12338:	mov	r8, r2
   1233c:	mov	r4, #39	; 0x27
   12340:	b	11ee8 <__assert_fail@plt+0x10c4>
   12344:	mov	r4, #13
   12348:	mov	r3, #114	; 0x72
   1234c:	b	120f8 <__assert_fail@plt+0x12d4>
   12350:	ldr	r3, [sp, #152]	; 0x98
   12354:	mov	r8, #0
   12358:	sub	r2, r3, #2
   1235c:	clz	r2, r2
   12360:	lsr	r2, r2, #5
   12364:	b	11ee8 <__assert_fail@plt+0x10c4>
   12368:	ldr	r3, [sp, #152]	; 0x98
   1236c:	mov	r4, #12
   12370:	sub	r2, r3, #2
   12374:	mov	r3, #102	; 0x66
   12378:	clz	r2, r2
   1237c:	lsr	r2, r2, #5
   12380:	b	1203c <__assert_fail@plt+0x1218>
   12384:	mov	r5, r6
   12388:	b	122bc <__assert_fail@plt+0x1498>
   1238c:	ldr	r3, [sp, #152]	; 0x98
   12390:	sub	r2, r3, #2
   12394:	mov	r3, #116	; 0x74
   12398:	clz	r2, r2
   1239c:	lsr	r2, r2, #5
   123a0:	b	1203c <__assert_fail@plt+0x1218>
   123a4:	ldr	r8, [sp, #76]	; 0x4c
   123a8:	cmp	r8, #1
   123ac:	bne	1285c <__assert_fail@plt+0x1a38>
   123b0:	bl	10d4c <__ctype_b_loc@plt>
   123b4:	sxth	r3, r4
   123b8:	mov	ip, r8
   123bc:	lsl	r3, r3, #1
   123c0:	ldr	r2, [r0]
   123c4:	ldrh	r3, [r2, r3]
   123c8:	and	r3, r3, #16384	; 0x4000
   123cc:	cmp	r3, #0
   123d0:	movne	r5, #1
   123d4:	moveq	r5, #0
   123d8:	moveq	r3, #1
   123dc:	movne	r3, #0
   123e0:	ldr	r2, [sp, #44]	; 0x2c
   123e4:	and	r3, r3, r2
   123e8:	ands	r8, r3, #255	; 0xff
   123ec:	bne	126f0 <__assert_fail@plt+0x18cc>
   123f0:	ldr	r3, [sp, #152]	; 0x98
   123f4:	sub	r2, r3, #2
   123f8:	clz	r2, r2
   123fc:	lsr	r2, r2, #5
   12400:	b	11ee8 <__assert_fail@plt+0x10c4>
   12404:	ldr	r3, [sp, #56]	; 0x38
   12408:	add	r3, r3, sl
   1240c:	str	r3, [sp, #48]	; 0x30
   12410:	ldr	r3, [sp, #48]	; 0x30
   12414:	mov	r6, #0
   12418:	ldrb	r4, [r3]
   1241c:	cmp	r4, #126	; 0x7e
   12420:	ldrls	pc, [pc, r4, lsl #2]
   12424:	b	123a4 <__assert_fail@plt+0x1580>
   12428:	andeq	r2, r1, r8, asr #3
   1242c:	andeq	r2, r1, r4, lsr #7
   12430:	andeq	r2, r1, r4, lsr #7
   12434:	andeq	r2, r1, r4, lsr #7
   12438:	andeq	r2, r1, r4, lsr #7
   1243c:	andeq	r2, r1, r4, lsr #7
   12440:	andeq	r2, r1, r4, lsr #7
   12444:	andeq	r2, r1, ip, lsr #3
   12448:	muleq	r1, r0, r1
   1244c:	andeq	r2, r1, r4, lsr #12
   12450:	strdeq	r2, [r1], -r0
   12454:	ldrdeq	r2, [r1], -r4
   12458:	andeq	r2, r1, r8, ror #6
   1245c:	andeq	r2, r1, r4, asr #6
   12460:	andeq	r2, r1, r4, lsr #7
   12464:	andeq	r2, r1, r4, lsr #7
   12468:	andeq	r2, r1, r4, lsr #7
   1246c:	andeq	r2, r1, r4, lsr #7
   12470:	andeq	r2, r1, r4, lsr #7
   12474:	andeq	r2, r1, r4, lsr #7
   12478:	andeq	r2, r1, r4, lsr #7
   1247c:	andeq	r2, r1, r4, lsr #7
   12480:	andeq	r2, r1, r4, lsr #7
   12484:	andeq	r2, r1, r4, lsr #7
   12488:	andeq	r2, r1, r4, lsr #7
   1248c:	andeq	r2, r1, r4, lsr #7
   12490:	andeq	r2, r1, r4, lsr #7
   12494:	andeq	r2, r1, r4, lsr #7
   12498:	andeq	r2, r1, r4, lsr #7
   1249c:	andeq	r2, r1, r4, lsr #7
   124a0:	andeq	r2, r1, r4, lsr #7
   124a4:	andeq	r2, r1, r4, lsr #7
   124a8:			; <UNDEFINED> instruction: 0x000122bc
   124ac:			; <UNDEFINED> instruction: 0x000122b8
   124b0:			; <UNDEFINED> instruction: 0x000122b8
   124b4:	andeq	r1, r1, r8, asr #29
   124b8:			; <UNDEFINED> instruction: 0x000122b8
   124bc:	andeq	r2, r1, r0, asr r3
   124c0:			; <UNDEFINED> instruction: 0x000122b8
   124c4:	andeq	r2, r1, r4, lsr #6
   124c8:			; <UNDEFINED> instruction: 0x000122b8
   124cc:			; <UNDEFINED> instruction: 0x000122b8
   124d0:			; <UNDEFINED> instruction: 0x000122b8
   124d4:	andeq	r2, r1, r0, asr r3
   124d8:	andeq	r2, r1, r0, asr r3
   124dc:	andeq	r2, r1, r0, asr r3
   124e0:	andeq	r2, r1, r0, asr r3
   124e4:	andeq	r2, r1, r0, asr r3
   124e8:	andeq	r2, r1, r0, asr r3
   124ec:	andeq	r2, r1, r0, asr r3
   124f0:	andeq	r2, r1, r0, asr r3
   124f4:	andeq	r2, r1, r0, asr r3
   124f8:	andeq	r2, r1, r0, asr r3
   124fc:	andeq	r2, r1, r0, asr r3
   12500:	andeq	r2, r1, r0, asr r3
   12504:	andeq	r2, r1, r0, asr r3
   12508:	andeq	r2, r1, r0, asr r3
   1250c:	andeq	r2, r1, r0, asr r3
   12510:	andeq	r2, r1, r0, asr r3
   12514:			; <UNDEFINED> instruction: 0x000122b8
   12518:			; <UNDEFINED> instruction: 0x000122b8
   1251c:			; <UNDEFINED> instruction: 0x000122b8
   12520:			; <UNDEFINED> instruction: 0x000122b8
   12524:	strdeq	r2, [r1], -r4
   12528:	andeq	r2, r1, r4, lsr #7
   1252c:	andeq	r2, r1, r0, asr r3
   12530:	andeq	r2, r1, r0, asr r3
   12534:	andeq	r2, r1, r0, asr r3
   12538:	andeq	r2, r1, r0, asr r3
   1253c:	andeq	r2, r1, r0, asr r3
   12540:	andeq	r2, r1, r0, asr r3
   12544:	andeq	r2, r1, r0, asr r3
   12548:	andeq	r2, r1, r0, asr r3
   1254c:	andeq	r2, r1, r0, asr r3
   12550:	andeq	r2, r1, r0, asr r3
   12554:	andeq	r2, r1, r0, asr r3
   12558:	andeq	r2, r1, r0, asr r3
   1255c:	andeq	r2, r1, r0, asr r3
   12560:	andeq	r2, r1, r0, asr r3
   12564:	andeq	r2, r1, r0, asr r3
   12568:	andeq	r2, r1, r0, asr r3
   1256c:	andeq	r2, r1, r0, asr r3
   12570:	andeq	r2, r1, r0, asr r3
   12574:	andeq	r2, r1, r0, asr r3
   12578:	andeq	r2, r1, r0, asr r3
   1257c:	andeq	r2, r1, r0, asr r3
   12580:	andeq	r2, r1, r0, asr r3
   12584:	andeq	r2, r1, r0, asr r3
   12588:	andeq	r2, r1, r0, asr r3
   1258c:	andeq	r2, r1, r0, asr r3
   12590:	andeq	r2, r1, r0, asr r3
   12594:			; <UNDEFINED> instruction: 0x000122b8
   12598:	andeq	r2, r1, r4, lsl r0
   1259c:	andeq	r2, r1, r0, asr r3
   125a0:			; <UNDEFINED> instruction: 0x000122b8
   125a4:	andeq	r2, r1, r0, asr r3
   125a8:			; <UNDEFINED> instruction: 0x000122b8
   125ac:	andeq	r2, r1, r0, asr r3
   125b0:	andeq	r2, r1, r0, asr r3
   125b4:	andeq	r2, r1, r0, asr r3
   125b8:	andeq	r2, r1, r0, asr r3
   125bc:	andeq	r2, r1, r0, asr r3
   125c0:	andeq	r2, r1, r0, asr r3
   125c4:	andeq	r2, r1, r0, asr r3
   125c8:	andeq	r2, r1, r0, asr r3
   125cc:	andeq	r2, r1, r0, asr r3
   125d0:	andeq	r2, r1, r0, asr r3
   125d4:	andeq	r2, r1, r0, asr r3
   125d8:	andeq	r2, r1, r0, asr r3
   125dc:	andeq	r2, r1, r0, asr r3
   125e0:	andeq	r2, r1, r0, asr r3
   125e4:	andeq	r2, r1, r0, asr r3
   125e8:	andeq	r2, r1, r0, asr r3
   125ec:	andeq	r2, r1, r0, asr r3
   125f0:	andeq	r2, r1, r0, asr r3
   125f4:	andeq	r2, r1, r0, asr r3
   125f8:	andeq	r2, r1, r0, asr r3
   125fc:	andeq	r2, r1, r0, asr r3
   12600:	andeq	r2, r1, r0, asr r3
   12604:	andeq	r2, r1, r0, asr r3
   12608:	andeq	r2, r1, r0, asr r3
   1260c:	andeq	r2, r1, r0, asr r3
   12610:	andeq	r2, r1, r0, asr r3
   12614:	andeq	r1, r1, r8, lsr #29
   12618:			; <UNDEFINED> instruction: 0x000122b8
   1261c:	andeq	r1, r1, r8, lsr #29
   12620:	andeq	r1, r1, r8, asr #29
   12624:	mov	r3, #116	; 0x74
   12628:	b	120f8 <__assert_fail@plt+0x12d4>
   1262c:	ldr	r3, [sp, #160]	; 0xa0
   12630:	cmp	r3, #0
   12634:	beq	11f04 <__assert_fail@plt+0x10e0>
   12638:	lsr	r3, r4, #5
   1263c:	ldr	r0, [sp, #160]	; 0xa0
   12640:	uxtb	r3, r3
   12644:	and	r1, r4, #31
   12648:	ldr	r0, [r0, r3, lsl #2]
   1264c:	lsr	r3, r0, r1
   12650:	tst	r3, #1
   12654:	beq	11f04 <__assert_fail@plt+0x10e0>
   12658:	ldr	r3, [sp, #28]
   1265c:	cmp	r3, #0
   12660:	beq	12064 <__assert_fail@plt+0x1240>
   12664:	ldr	sl, [sp, #32]
   12668:	mov	r8, fp
   1266c:	b	12128 <__assert_fail@plt+0x1304>
   12670:	ldr	r3, [sp, #28]
   12674:	cmp	r3, #0
   12678:	bne	12bcc <__assert_fail@plt+0x1da8>
   1267c:	add	sl, sl, #1
   12680:	ldr	r6, [sp, #40]	; 0x28
   12684:	mov	r5, #0
   12688:	mov	r4, #92	; 0x5c
   1268c:	b	11f20 <__assert_fail@plt+0x10fc>
   12690:	cmp	r9, r8
   12694:	bne	12904 <__assert_fail@plt+0x1ae0>
   12698:	ldr	r0, [sp, #100]	; 0x64
   1269c:	bl	10cb0 <iswprint@plt>
   126a0:	add	r5, r5, r4
   126a4:	cmp	r0, #0
   126a8:	add	r0, sp, #104	; 0x68
   126ac:	moveq	r6, #0
   126b0:	bl	10c5c <mbsinit@plt>
   126b4:	cmp	r0, #0
   126b8:	beq	12898 <__assert_fail@plt+0x1a74>
   126bc:	mov	r2, r6
   126c0:	mov	ip, r5
   126c4:	eor	r5, r2, #1
   126c8:	ldr	r4, [sp, #80]	; 0x50
   126cc:	ldr	r6, [sp, #84]	; 0x54
   126d0:	ldr	r7, [sp, #88]	; 0x58
   126d4:	uxtb	r5, r5
   126d8:	cmp	ip, #1
   126dc:	bls	12bdc <__assert_fail@plt+0x1db8>
   126e0:	ldr	r3, [sp, #44]	; 0x2c
   126e4:	and	r8, r3, r5
   126e8:	mov	r5, r2
   126ec:	uxtb	r8, r8
   126f0:	add	r2, sl, ip
   126f4:	ldr	r0, [sp, #48]	; 0x30
   126f8:	mov	r1, #0
   126fc:	str	r5, [sp, #48]	; 0x30
   12700:	ldr	r9, [sp, #28]
   12704:	ldr	ip, [sp, #40]	; 0x28
   12708:	ldr	r3, [sp, #32]
   1270c:	ldr	r5, [sp, #152]	; 0x98
   12710:	b	127cc <__assert_fail@plt+0x19a8>
   12714:	cmp	r9, #0
   12718:	bne	12af0 <__assert_fail@plt+0x1ccc>
   1271c:	eor	r1, ip, #1
   12720:	cmp	r5, #2
   12724:	movne	r1, #0
   12728:	andeq	r1, r1, #1
   1272c:	cmp	r1, #0
   12730:	beq	12768 <__assert_fail@plt+0x1944>
   12734:	cmp	fp, r7
   12738:	movhi	ip, #39	; 0x27
   1273c:	strbhi	ip, [r3, r7]
   12740:	add	ip, r7, #1
   12744:	cmp	fp, ip
   12748:	movhi	lr, #36	; 0x24
   1274c:	strbhi	lr, [r3, ip]
   12750:	add	ip, r7, #2
   12754:	cmp	fp, ip
   12758:	movhi	lr, #39	; 0x27
   1275c:	strbhi	lr, [r3, ip]
   12760:	add	r7, r7, #3
   12764:	mov	ip, r1
   12768:	cmp	fp, r7
   1276c:	movhi	r1, #92	; 0x5c
   12770:	strbhi	r1, [r3, r7]
   12774:	add	r1, r7, #1
   12778:	cmp	fp, r1
   1277c:	lsrhi	lr, r4, #6
   12780:	addhi	lr, lr, #48	; 0x30
   12784:	strbhi	lr, [r3, r1]
   12788:	add	lr, r7, #2
   1278c:	cmp	fp, lr
   12790:	lsrhi	r1, r4, #3
   12794:	andhi	r1, r1, #7
   12798:	addhi	r1, r1, #48	; 0x30
   1279c:	add	sl, sl, #1
   127a0:	strbhi	r1, [r3, lr]
   127a4:	and	r4, r4, #7
   127a8:	cmp	r2, sl
   127ac:	add	r4, r4, #48	; 0x30
   127b0:	add	r7, r7, #3
   127b4:	bls	12b14 <__assert_fail@plt+0x1cf0>
   127b8:	mov	r1, r8
   127bc:	cmp	fp, r7
   127c0:	strbhi	r4, [r3, r7]
   127c4:	ldrb	r4, [r0, #1]!
   127c8:	add	r7, r7, #1
   127cc:	cmp	r8, #0
   127d0:	bne	12714 <__assert_fail@plt+0x18f0>
   127d4:	cmp	r6, #0
   127d8:	bne	12828 <__assert_fail@plt+0x1a04>
   127dc:	eor	r6, r1, #1
   127e0:	and	r6, r6, ip
   127e4:	add	sl, sl, #1
   127e8:	cmp	r2, sl
   127ec:	uxtb	r6, r6
   127f0:	bls	12850 <__assert_fail@plt+0x1a2c>
   127f4:	cmp	r6, #0
   127f8:	beq	127bc <__assert_fail@plt+0x1998>
   127fc:	cmp	fp, r7
   12800:	movhi	ip, #39	; 0x27
   12804:	strbhi	ip, [r3, r7]
   12808:	add	ip, r7, #1
   1280c:	cmp	fp, ip
   12810:	movhi	lr, #39	; 0x27
   12814:	strbhi	lr, [r3, ip]
   12818:	add	r7, r7, #2
   1281c:	mov	r6, r8
   12820:	mov	ip, r8
   12824:	b	127bc <__assert_fail@plt+0x1998>
   12828:	cmp	fp, r7
   1282c:	eor	r6, r1, #1
   12830:	movhi	lr, #92	; 0x5c
   12834:	and	r6, r6, ip
   12838:	add	sl, sl, #1
   1283c:	strbhi	lr, [r3, r7]
   12840:	cmp	r2, sl
   12844:	add	r7, r7, #1
   12848:	uxtb	r6, r6
   1284c:	bhi	127f4 <__assert_fail@plt+0x19d0>
   12850:	str	ip, [sp, #40]	; 0x28
   12854:	ldr	r5, [sp, #48]	; 0x30
   12858:	b	11f20 <__assert_fail@plt+0x10fc>
   1285c:	ldr	r3, [sp, #24]
   12860:	cmn	r3, #1
   12864:	mov	r3, #0
   12868:	str	r3, [sp, #104]	; 0x68
   1286c:	str	r3, [sp, #108]	; 0x6c
   12870:	beq	12b90 <__assert_fail@plt+0x1d6c>
   12874:	mov	r2, r5
   12878:	mov	r3, #0
   1287c:	str	r7, [sp, #88]	; 0x58
   12880:	ldr	r7, [sp, #152]	; 0x98
   12884:	str	r5, [sp, #92]	; 0x5c
   12888:	str	r6, [sp, #84]	; 0x54
   1288c:	mov	r5, r3
   12890:	mov	r6, r2
   12894:	str	r4, [sp, #80]	; 0x50
   12898:	ldr	r3, [sp, #56]	; 0x38
   1289c:	add	r9, sl, r5
   128a0:	add	r8, r3, r9
   128a4:	ldr	r3, [sp, #24]
   128a8:	mov	r1, r8
   128ac:	sub	r2, r3, r9
   128b0:	add	r0, sp, #100	; 0x64
   128b4:	add	r3, sp, #104	; 0x68
   128b8:	bl	149e8 <__assert_fail@plt+0x3bc4>
   128bc:	subs	r4, r0, #0
   128c0:	beq	12c68 <__assert_fail@plt+0x1e44>
   128c4:	cmn	r4, #1
   128c8:	beq	12c48 <__assert_fail@plt+0x1e24>
   128cc:	cmn	r4, #2
   128d0:	beq	12be8 <__assert_fail@plt+0x1dc4>
   128d4:	ldr	r2, [sp, #28]
   128d8:	cmp	r7, #2
   128dc:	movne	r2, #0
   128e0:	andeq	r2, r2, #1
   128e4:	cmp	r2, #0
   128e8:	beq	12698 <__assert_fail@plt+0x1874>
   128ec:	cmp	r4, #1
   128f0:	beq	12698 <__assert_fail@plt+0x1874>
   128f4:	sub	r3, r4, #1
   128f8:	add	r9, r3, r9
   128fc:	ldr	r3, [sp, #56]	; 0x38
   12900:	add	r9, r3, r9
   12904:	ldrb	r3, [r8, #1]!
   12908:	sub	r3, r3, #91	; 0x5b
   1290c:	cmp	r3, #33	; 0x21
   12910:	ldrls	pc, [pc, r3, lsl #2]
   12914:	b	12690 <__assert_fail@plt+0x186c>
   12918:	andeq	r2, r1, r0, lsr #19
   1291c:	andeq	r2, r1, r0, lsr #19
   12920:	muleq	r1, r0, r6
   12924:	andeq	r2, r1, r0, lsr #19
   12928:	muleq	r1, r0, r6
   1292c:	andeq	r2, r1, r0, lsr #19
   12930:	muleq	r1, r0, r6
   12934:	muleq	r1, r0, r6
   12938:	muleq	r1, r0, r6
   1293c:	muleq	r1, r0, r6
   12940:	muleq	r1, r0, r6
   12944:	muleq	r1, r0, r6
   12948:	muleq	r1, r0, r6
   1294c:	muleq	r1, r0, r6
   12950:	muleq	r1, r0, r6
   12954:	muleq	r1, r0, r6
   12958:	muleq	r1, r0, r6
   1295c:	muleq	r1, r0, r6
   12960:	muleq	r1, r0, r6
   12964:	muleq	r1, r0, r6
   12968:	muleq	r1, r0, r6
   1296c:	muleq	r1, r0, r6
   12970:	muleq	r1, r0, r6
   12974:	muleq	r1, r0, r6
   12978:	muleq	r1, r0, r6
   1297c:	muleq	r1, r0, r6
   12980:	muleq	r1, r0, r6
   12984:	muleq	r1, r0, r6
   12988:	muleq	r1, r0, r6
   1298c:	muleq	r1, r0, r6
   12990:	muleq	r1, r0, r6
   12994:	muleq	r1, r0, r6
   12998:	muleq	r1, r0, r6
   1299c:	andeq	r2, r1, r0, lsr #19
   129a0:	mov	r3, #2
   129a4:	ldr	sl, [sp, #32]
   129a8:	mov	r8, fp
   129ac:	str	r3, [sp, #152]	; 0x98
   129b0:	b	12128 <__assert_fail@plt+0x1304>
   129b4:	ldr	r3, [sp, #156]	; 0x9c
   129b8:	tst	r3, #1
   129bc:	bne	12ae8 <__assert_fail@plt+0x1cc4>
   129c0:	ldr	r3, [sp, #152]	; 0x98
   129c4:	ldr	r4, [sp, #44]	; 0x2c
   129c8:	sub	r2, r3, #2
   129cc:	mov	r5, #0
   129d0:	clz	r2, r2
   129d4:	mov	r8, r4
   129d8:	lsr	r2, r2, #5
   129dc:	b	11ee8 <__assert_fail@plt+0x10c4>
   129e0:	ldr	r3, [sp, #156]	; 0x9c
   129e4:	ands	r9, r3, #4
   129e8:	beq	12b20 <__assert_fail@plt+0x1cfc>
   129ec:	ldr	r2, [sp, #24]
   129f0:	add	r3, sl, #2
   129f4:	cmp	r3, r2
   129f8:	bcs	12a0c <__assert_fail@plt+0x1be8>
   129fc:	ldr	r2, [sp, #48]	; 0x30
   12a00:	ldrb	r4, [r2, #1]
   12a04:	cmp	r4, #63	; 0x3f
   12a08:	beq	12ca8 <__assert_fail@plt+0x1e84>
   12a0c:	mov	r2, #0
   12a10:	mov	r8, r2
   12a14:	mov	r5, r2
   12a18:	mov	r4, #63	; 0x3f
   12a1c:	b	11ee8 <__assert_fail@plt+0x10c4>
   12a20:	ldr	r3, [sp, #28]
   12a24:	cmp	r3, #0
   12a28:	bne	12d4c <__assert_fail@plt+0x1f28>
   12a2c:	mov	r2, r5
   12a30:	mov	r8, r3
   12a34:	mov	r5, #0
   12a38:	mov	r4, #63	; 0x3f
   12a3c:	b	11ee8 <__assert_fail@plt+0x10c4>
   12a40:	ldr	r3, [sp, #28]
   12a44:	cmp	r3, #0
   12a48:	bne	12d4c <__assert_fail@plt+0x1f28>
   12a4c:	ldr	r2, [sp, #72]	; 0x48
   12a50:	adds	r3, fp, #0
   12a54:	movne	r3, #1
   12a58:	cmp	r2, #0
   12a5c:	movne	r3, #0
   12a60:	cmp	r3, #0
   12a64:	strne	fp, [sp, #72]	; 0x48
   12a68:	movne	fp, #0
   12a6c:	bne	12aa8 <__assert_fail@plt+0x1c84>
   12a70:	cmp	fp, r7
   12a74:	movhi	r2, #39	; 0x27
   12a78:	ldrhi	r3, [sp, #32]
   12a7c:	strbhi	r2, [r3, r7]
   12a80:	add	r3, r7, #1
   12a84:	cmp	fp, r3
   12a88:	movhi	r1, #92	; 0x5c
   12a8c:	ldrhi	r2, [sp, #32]
   12a90:	strbhi	r1, [r2, r3]
   12a94:	add	r3, r7, #2
   12a98:	cmp	fp, r3
   12a9c:	movhi	r1, #39	; 0x27
   12aa0:	ldrhi	r2, [sp, #32]
   12aa4:	strbhi	r1, [r2, r3]
   12aa8:	ldr	r3, [sp, #28]
   12aac:	add	r7, r7, #3
   12ab0:	mov	r2, r5
   12ab4:	mov	r8, r3
   12ab8:	str	r5, [sp, #68]	; 0x44
   12abc:	str	r3, [sp, #40]	; 0x28
   12ac0:	mov	r4, #39	; 0x27
   12ac4:	b	11ee8 <__assert_fail@plt+0x10c4>
   12ac8:	ldr	r3, [sp, #56]	; 0x38
   12acc:	ldrb	r3, [r3, #1]
   12ad0:	adds	r3, r3, #0
   12ad4:	movne	r3, #1
   12ad8:	b	11ec0 <__assert_fail@plt+0x109c>
   12adc:	ldr	r5, [sp, #28]
   12ae0:	mov	r4, #48	; 0x30
   12ae4:	b	11ee8 <__assert_fail@plt+0x10c4>
   12ae8:	add	sl, sl, #1
   12aec:	b	11a18 <__assert_fail@plt+0xbf4>
   12af0:	mov	sl, r3
   12af4:	ldr	r3, [sp, #28]
   12af8:	mov	r8, fp
   12afc:	str	r3, [sp, #44]	; 0x2c
   12b00:	ldr	r3, [sp, #152]	; 0x98
   12b04:	sub	r2, r3, #2
   12b08:	clz	r2, r2
   12b0c:	lsr	r2, r2, #5
   12b10:	b	12128 <__assert_fail@plt+0x1304>
   12b14:	str	ip, [sp, #40]	; 0x28
   12b18:	ldr	r5, [sp, #48]	; 0x30
   12b1c:	b	11f58 <__assert_fail@plt+0x1134>
   12b20:	mov	r2, r9
   12b24:	mov	r8, r9
   12b28:	mov	r5, #0
   12b2c:	mov	r4, #63	; 0x3f
   12b30:	b	11ee8 <__assert_fail@plt+0x10c4>
   12b34:	cmp	fp, #0
   12b38:	beq	12bb0 <__assert_fail@plt+0x1d8c>
   12b3c:	ldr	r1, [sp, #32]
   12b40:	mov	r3, #34	; 0x22
   12b44:	mov	r2, #1
   12b48:	strb	r3, [r1]
   12b4c:	ldr	r3, [pc, #332]	; 12ca0 <__assert_fail@plt+0x1e7c>
   12b50:	str	r2, [sp, #52]	; 0x34
   12b54:	mov	r7, r2
   12b58:	str	r2, [sp, #44]	; 0x2c
   12b5c:	str	r3, [sp, #64]	; 0x40
   12b60:	b	11a08 <__assert_fail@plt+0xbe4>
   12b64:	ldr	r3, [pc, #300]	; 12c98 <__assert_fail@plt+0x1e74>
   12b68:	str	r3, [sp, #64]	; 0x40
   12b6c:	mov	r3, #0
   12b70:	str	r3, [sp, #28]
   12b74:	mov	r3, #1
   12b78:	str	r3, [sp, #52]	; 0x34
   12b7c:	mov	r7, r3
   12b80:	mov	r3, #2
   12b84:	str	r3, [sp, #152]	; 0x98
   12b88:	b	11a08 <__assert_fail@plt+0xbe4>
   12b8c:	bl	10e18 <abort@plt>
   12b90:	ldr	r0, [sp, #56]	; 0x38
   12b94:	bl	10d64 <strlen@plt>
   12b98:	str	r0, [sp, #24]
   12b9c:	b	12874 <__assert_fail@plt+0x1a50>
   12ba0:	mov	r5, r8
   12ba4:	mov	r4, #48	; 0x30
   12ba8:	ldr	r8, [sp, #44]	; 0x2c
   12bac:	b	11ee8 <__assert_fail@plt+0x10c4>
   12bb0:	mov	r3, #1
   12bb4:	str	r3, [sp, #52]	; 0x34
   12bb8:	mov	r7, r3
   12bbc:	str	r3, [sp, #44]	; 0x2c
   12bc0:	ldr	r3, [pc, #216]	; 12ca0 <__assert_fail@plt+0x1e7c>
   12bc4:	str	r3, [sp, #64]	; 0x40
   12bc8:	b	11a08 <__assert_fail@plt+0xbe4>
   12bcc:	ldr	sl, [sp, #32]
   12bd0:	mov	r8, fp
   12bd4:	mov	r2, r3
   12bd8:	b	12128 <__assert_fail@plt+0x1304>
   12bdc:	mov	r3, r5
   12be0:	mov	r5, r2
   12be4:	b	123e0 <__assert_fail@plt+0x15bc>
   12be8:	ldr	r1, [sp, #24]
   12bec:	mov	r2, r5
   12bf0:	cmp	r1, r9
   12bf4:	mov	ip, r5
   12bf8:	ldr	r4, [sp, #80]	; 0x50
   12bfc:	ldr	r5, [sp, #92]	; 0x5c
   12c00:	ldr	r6, [sp, #84]	; 0x54
   12c04:	ldr	r7, [sp, #88]	; 0x58
   12c08:	bls	12c3c <__assert_fail@plt+0x1e18>
   12c0c:	ldrb	r3, [r8]
   12c10:	cmp	r3, #0
   12c14:	bne	12c28 <__assert_fail@plt+0x1e04>
   12c18:	b	12c40 <__assert_fail@plt+0x1e1c>
   12c1c:	ldrb	r3, [r8, #1]!
   12c20:	cmp	r3, #0
   12c24:	beq	12d40 <__assert_fail@plt+0x1f1c>
   12c28:	add	r2, r2, #1
   12c2c:	add	r3, sl, r2
   12c30:	cmp	r1, r3
   12c34:	bhi	12c1c <__assert_fail@plt+0x1df8>
   12c38:	mov	ip, r2
   12c3c:	mov	r3, #0
   12c40:	mov	r2, r3
   12c44:	b	126d8 <__assert_fail@plt+0x18b4>
   12c48:	mov	r3, #0
   12c4c:	mov	ip, r5
   12c50:	ldr	r4, [sp, #80]	; 0x50
   12c54:	ldr	r5, [sp, #92]	; 0x5c
   12c58:	ldr	r6, [sp, #84]	; 0x54
   12c5c:	ldr	r7, [sp, #88]	; 0x58
   12c60:	mov	r2, r3
   12c64:	b	126d8 <__assert_fail@plt+0x18b4>
   12c68:	mov	r3, r6
   12c6c:	mov	ip, r5
   12c70:	eor	r5, r3, #1
   12c74:	mov	r2, r6
   12c78:	ldr	r4, [sp, #80]	; 0x50
   12c7c:	ldr	r6, [sp, #84]	; 0x54
   12c80:	ldr	r7, [sp, #88]	; 0x58
   12c84:	uxtb	r5, r5
   12c88:	b	126d8 <__assert_fail@plt+0x18b4>
   12c8c:	ldr	sl, [sp, #32]
   12c90:	mov	r8, fp
   12c94:	b	12afc <__assert_fail@plt+0x1cd8>
   12c98:	muleq	r1, ip, r6
   12c9c:	andeq	r5, r1, r0, lsr #13
   12ca0:	muleq	r1, r8, r6
   12ca4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12ca8:	ldr	r2, [sp, #56]	; 0x38
   12cac:	ldrb	r1, [r2, r3]
   12cb0:	sub	r2, r1, #33	; 0x21
   12cb4:	uxtb	r2, r2
   12cb8:	cmp	r2, #29
   12cbc:	bhi	12d5c <__assert_fail@plt+0x1f38>
   12cc0:	ldr	r0, [pc, #-36]	; 12ca4 <__assert_fail@plt+0x1e80>
   12cc4:	mov	ip, #1
   12cc8:	ands	r2, r0, ip, lsl r2
   12ccc:	beq	12d6c <__assert_fail@plt+0x1f48>
   12cd0:	ldr	r2, [sp, #28]
   12cd4:	cmp	r2, #0
   12cd8:	bne	12e6c <__assert_fail@plt+0x2048>
   12cdc:	cmp	fp, r7
   12ce0:	ldr	r8, [sp, #28]
   12ce4:	ldrhi	r2, [sp, #32]
   12ce8:	mov	sl, r3
   12cec:	mov	r5, r8
   12cf0:	strbhi	r4, [r2, r7]
   12cf4:	add	r2, r7, #1
   12cf8:	cmp	fp, r2
   12cfc:	movhi	r0, #34	; 0x22
   12d00:	ldrhi	ip, [sp, #32]
   12d04:	mov	r4, r1
   12d08:	strbhi	r0, [ip, r2]
   12d0c:	add	r2, r7, #2
   12d10:	cmp	fp, r2
   12d14:	movhi	r0, #34	; 0x22
   12d18:	ldrhi	ip, [sp, #32]
   12d1c:	strbhi	r0, [ip, r2]
   12d20:	add	r2, r7, #3
   12d24:	cmp	fp, r2
   12d28:	movhi	r0, #63	; 0x3f
   12d2c:	ldrhi	ip, [sp, #32]
   12d30:	add	r7, r7, #4
   12d34:	strbhi	r0, [ip, r2]
   12d38:	mov	r2, r8
   12d3c:	b	11ee8 <__assert_fail@plt+0x10c4>
   12d40:	mov	ip, r2
   12d44:	mov	r2, r3
   12d48:	b	126d8 <__assert_fail@plt+0x18b4>
   12d4c:	ldr	sl, [sp, #32]
   12d50:	mov	r8, fp
   12d54:	ldr	r2, [sp, #28]
   12d58:	b	12128 <__assert_fail@plt+0x1304>
   12d5c:	mov	r2, #0
   12d60:	mov	r8, r2
   12d64:	mov	r5, r2
   12d68:	b	11ee8 <__assert_fail@plt+0x10c4>
   12d6c:	mov	r8, r2
   12d70:	mov	r5, #0
   12d74:	b	11ee8 <__assert_fail@plt+0x10c4>
   12d78:	ldr	r1, [sp, #152]	; 0x98
   12d7c:	bl	11844 <__assert_fail@plt+0xa20>
   12d80:	str	r0, [sp, #168]	; 0xa8
   12d84:	b	11da4 <__assert_fail@plt+0xf80>
   12d88:	ldr	r1, [sp, #152]	; 0x98
   12d8c:	bl	11844 <__assert_fail@plt+0xa20>
   12d90:	str	r0, [sp, #164]	; 0xa4
   12d94:	b	11d84 <__assert_fail@plt+0xf60>
   12d98:	ldr	r7, [sp, #28]
   12d9c:	b	11de4 <__assert_fail@plt+0xfc0>
   12da0:	ldr	sl, [sp, #32]
   12da4:	ldr	r2, [sp, #68]	; 0x44
   12da8:	mov	r8, fp
   12dac:	mov	fp, r7
   12db0:	ldr	r3, [sp, #64]	; 0x40
   12db4:	cmp	r3, #0
   12db8:	moveq	r2, #0
   12dbc:	andne	r2, r2, #1
   12dc0:	cmp	r2, #0
   12dc4:	beq	12df0 <__assert_fail@plt+0x1fcc>
   12dc8:	mov	r2, r3
   12dcc:	ldrb	r3, [r3]
   12dd0:	cmp	r3, #0
   12dd4:	beq	12df0 <__assert_fail@plt+0x1fcc>
   12dd8:	cmp	r8, fp
   12ddc:	strbhi	r3, [sl, fp]
   12de0:	ldrb	r3, [r2, #1]!
   12de4:	add	fp, fp, #1
   12de8:	cmp	r3, #0
   12dec:	bne	12dd8 <__assert_fail@plt+0x1fb4>
   12df0:	cmp	r8, fp
   12df4:	movhi	r3, #0
   12df8:	strbhi	r3, [sl, fp]
   12dfc:	b	12184 <__assert_fail@plt+0x1360>
   12e00:	ldr	r3, [sp, #168]	; 0xa8
   12e04:	ldr	sl, [sp, #32]
   12e08:	str	r3, [sp, #16]
   12e0c:	ldr	r3, [sp, #164]	; 0xa4
   12e10:	mov	ip, #5
   12e14:	str	r3, [sp, #12]
   12e18:	ldr	r3, [sp, #160]	; 0xa0
   12e1c:	ldr	r2, [sp, #56]	; 0x38
   12e20:	str	r3, [sp, #8]
   12e24:	ldr	r3, [sp, #156]	; 0x9c
   12e28:	ldr	r1, [sp, #72]	; 0x48
   12e2c:	str	r3, [sp, #4]
   12e30:	mov	r0, sl
   12e34:	ldr	r3, [sp, #24]
   12e38:	str	ip, [sp]
   12e3c:	bl	11964 <__assert_fail@plt+0xb40>
   12e40:	mov	fp, r0
   12e44:	b	12184 <__assert_fail@plt+0x1360>
   12e48:	mov	r8, fp
   12e4c:	ldr	sl, [sp, #32]
   12e50:	mov	fp, r7
   12e54:	mov	r2, r3
   12e58:	b	12db0 <__assert_fail@plt+0x1f8c>
   12e5c:	mov	r8, fp
   12e60:	ldr	sl, [sp, #32]
   12e64:	mov	fp, r7
   12e68:	b	12db0 <__assert_fail@plt+0x1f8c>
   12e6c:	ldr	sl, [sp, #32]
   12e70:	mov	r8, fp
   12e74:	b	12140 <__assert_fail@plt+0x131c>
   12e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e7c:	sub	sp, sp, #52	; 0x34
   12e80:	mov	r4, r0
   12e84:	mov	r5, r3
   12e88:	mov	sl, r1
   12e8c:	mov	fp, r2
   12e90:	bl	10d7c <__errno_location@plt>
   12e94:	ldr	r7, [pc, #412]	; 13038 <__assert_fail@plt+0x2214>
   12e98:	cmn	r4, #-2147483647	; 0x80000001
   12e9c:	ldr	r6, [r7]
   12ea0:	mov	r8, r0
   12ea4:	movne	r0, #0
   12ea8:	moveq	r0, #1
   12eac:	ldr	r3, [r8]
   12eb0:	orrs	r0, r0, r4, lsr #31
   12eb4:	str	r3, [sp, #24]
   12eb8:	bne	13034 <__assert_fail@plt+0x2210>
   12ebc:	ldr	r2, [r7, #4]
   12ec0:	cmp	r4, r2
   12ec4:	blt	12f24 <__assert_fail@plt+0x2100>
   12ec8:	add	r9, r7, #8
   12ecc:	cmp	r6, r9
   12ed0:	str	r2, [sp, #44]	; 0x2c
   12ed4:	beq	13004 <__assert_fail@plt+0x21e0>
   12ed8:	mov	r3, #8
   12edc:	sub	r2, r4, r2
   12ee0:	mov	r0, r6
   12ee4:	str	r3, [sp]
   12ee8:	add	r2, r2, #1
   12eec:	mvn	r3, #-2147483648	; 0x80000000
   12ef0:	add	r1, sp, #44	; 0x2c
   12ef4:	bl	13ce4 <__assert_fail@plt+0x2ec0>
   12ef8:	mov	r6, r0
   12efc:	str	r0, [r7]
   12f00:	ldr	r0, [r7, #4]
   12f04:	ldr	r2, [sp, #44]	; 0x2c
   12f08:	mov	r1, #0
   12f0c:	sub	r2, r2, r0
   12f10:	add	r0, r6, r0, lsl #3
   12f14:	lsl	r2, r2, #3
   12f18:	bl	10d94 <memset@plt>
   12f1c:	ldr	r3, [sp, #44]	; 0x2c
   12f20:	str	r3, [r7, #4]
   12f24:	add	r3, r6, r4, lsl #3
   12f28:	ldr	r1, [r5, #4]
   12f2c:	ldr	r7, [r3, #4]
   12f30:	ldr	r9, [r6, r4, lsl #3]
   12f34:	ldr	r2, [r5, #40]	; 0x28
   12f38:	ldr	ip, [r5, #44]	; 0x2c
   12f3c:	add	r0, r5, #8
   12f40:	str	r3, [sp, #28]
   12f44:	ldr	r3, [r5]
   12f48:	orr	r1, r1, #1
   12f4c:	mov	lr, r0
   12f50:	str	r1, [sp, #32]
   12f54:	str	r0, [sp, #36]	; 0x24
   12f58:	str	r1, [sp, #4]
   12f5c:	str	r2, [sp, #12]
   12f60:	str	r3, [sp]
   12f64:	mov	r0, r7
   12f68:	mov	r1, r9
   12f6c:	str	ip, [sp, #16]
   12f70:	str	lr, [sp, #8]
   12f74:	mov	r3, fp
   12f78:	mov	r2, sl
   12f7c:	bl	11964 <__assert_fail@plt+0xb40>
   12f80:	cmp	r9, r0
   12f84:	bhi	12ff0 <__assert_fail@plt+0x21cc>
   12f88:	ldr	r3, [pc, #172]	; 1303c <__assert_fail@plt+0x2218>
   12f8c:	add	r9, r0, #1
   12f90:	cmp	r7, r3
   12f94:	str	r9, [r6, r4, lsl #3]
   12f98:	beq	12fa4 <__assert_fail@plt+0x2180>
   12f9c:	mov	r0, r7
   12fa0:	bl	148bc <__assert_fail@plt+0x3a98>
   12fa4:	mov	r0, r9
   12fa8:	bl	13b80 <__assert_fail@plt+0x2d5c>
   12fac:	ldr	lr, [sp, #28]
   12fb0:	ldr	ip, [r5, #44]	; 0x2c
   12fb4:	ldr	r4, [r5, #40]	; 0x28
   12fb8:	mov	r3, fp
   12fbc:	mov	r2, sl
   12fc0:	mov	r1, r9
   12fc4:	str	r0, [lr, #4]
   12fc8:	ldr	lr, [r5]
   12fcc:	ldr	r5, [sp, #36]	; 0x24
   12fd0:	str	ip, [sp, #16]
   12fd4:	str	r5, [sp, #8]
   12fd8:	ldr	r5, [sp, #32]
   12fdc:	str	r4, [sp, #12]
   12fe0:	str	r5, [sp, #4]
   12fe4:	str	lr, [sp]
   12fe8:	mov	r7, r0
   12fec:	bl	11964 <__assert_fail@plt+0xb40>
   12ff0:	ldr	r3, [sp, #24]
   12ff4:	mov	r0, r7
   12ff8:	str	r3, [r8]
   12ffc:	add	sp, sp, #52	; 0x34
   13000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13004:	mov	r3, #8
   13008:	sub	r2, r4, r2
   1300c:	str	r3, [sp]
   13010:	add	r1, sp, #44	; 0x2c
   13014:	add	r2, r2, #1
   13018:	mvn	r3, #-2147483648	; 0x80000000
   1301c:	bl	13ce4 <__assert_fail@plt+0x2ec0>
   13020:	mov	r6, r0
   13024:	ldm	r9, {r0, r1}
   13028:	str	r6, [r7]
   1302c:	stm	r6, {r0, r1}
   13030:	b	12f00 <__assert_fail@plt+0x20dc>
   13034:	bl	10e18 <abort@plt>
   13038:	andeq	r6, r2, r4, ror #1
   1303c:	andeq	r6, r2, r4, asr r1
   13040:	push	{r4, r5, r6, lr}
   13044:	mov	r5, r0
   13048:	bl	10d7c <__errno_location@plt>
   1304c:	cmp	r5, #0
   13050:	mov	r1, #48	; 0x30
   13054:	mov	r4, r0
   13058:	ldr	r0, [pc, #16]	; 13070 <__assert_fail@plt+0x224c>
   1305c:	ldr	r6, [r4]
   13060:	movne	r0, r5
   13064:	bl	13fe0 <__assert_fail@plt+0x31bc>
   13068:	str	r6, [r4]
   1306c:	pop	{r4, r5, r6, pc}
   13070:	andeq	r6, r2, r4, asr r2
   13074:	ldr	r3, [pc, #12]	; 13088 <__assert_fail@plt+0x2264>
   13078:	cmp	r0, #0
   1307c:	moveq	r0, r3
   13080:	ldr	r0, [r0]
   13084:	bx	lr
   13088:	andeq	r6, r2, r4, asr r2
   1308c:	ldr	r3, [pc, #12]	; 130a0 <__assert_fail@plt+0x227c>
   13090:	cmp	r0, #0
   13094:	moveq	r0, r3
   13098:	str	r1, [r0]
   1309c:	bx	lr
   130a0:	andeq	r6, r2, r4, asr r2
   130a4:	ldr	r3, [pc, #52]	; 130e0 <__assert_fail@plt+0x22bc>
   130a8:	cmp	r0, #0
   130ac:	moveq	r0, r3
   130b0:	add	r3, r0, #8
   130b4:	push	{lr}		; (str lr, [sp, #-4]!)
   130b8:	lsr	lr, r1, #5
   130bc:	and	r1, r1, #31
   130c0:	ldr	ip, [r3, lr, lsl #2]
   130c4:	lsr	r0, ip, r1
   130c8:	eor	r2, r2, r0
   130cc:	and	r2, r2, #1
   130d0:	and	r0, r0, #1
   130d4:	eor	r1, ip, r2, lsl r1
   130d8:	str	r1, [r3, lr, lsl #2]
   130dc:	pop	{pc}		; (ldr pc, [sp], #4)
   130e0:	andeq	r6, r2, r4, asr r2
   130e4:	ldr	r3, [pc, #16]	; 130fc <__assert_fail@plt+0x22d8>
   130e8:	cmp	r0, #0
   130ec:	movne	r3, r0
   130f0:	ldr	r0, [r3, #4]
   130f4:	str	r1, [r3, #4]
   130f8:	bx	lr
   130fc:	andeq	r6, r2, r4, asr r2
   13100:	ldr	r3, [pc, #44]	; 13134 <__assert_fail@plt+0x2310>
   13104:	cmp	r0, #0
   13108:	moveq	r0, r3
   1310c:	mov	ip, #10
   13110:	cmp	r2, #0
   13114:	cmpne	r1, #0
   13118:	str	ip, [r0]
   1311c:	beq	1312c <__assert_fail@plt+0x2308>
   13120:	str	r1, [r0, #40]	; 0x28
   13124:	str	r2, [r0, #44]	; 0x2c
   13128:	bx	lr
   1312c:	push	{r4, lr}
   13130:	bl	10e18 <abort@plt>
   13134:	andeq	r6, r2, r4, asr r2
   13138:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1313c:	sub	sp, sp, #24
   13140:	ldr	ip, [pc, #108]	; 131b4 <__assert_fail@plt+0x2390>
   13144:	ldr	r4, [sp, #56]	; 0x38
   13148:	mov	r9, r2
   1314c:	cmp	r4, #0
   13150:	moveq	r4, ip
   13154:	mov	sl, r3
   13158:	mov	r7, r0
   1315c:	mov	r8, r1
   13160:	bl	10d7c <__errno_location@plt>
   13164:	ldr	r3, [r4, #44]	; 0x2c
   13168:	mov	r1, r8
   1316c:	ldr	r6, [r0]
   13170:	str	r3, [sp, #16]
   13174:	ldr	r2, [r4, #40]	; 0x28
   13178:	add	r3, r4, #8
   1317c:	str	r3, [sp, #8]
   13180:	str	r2, [sp, #12]
   13184:	ldr	r2, [r4, #4]
   13188:	mov	r5, r0
   1318c:	str	r2, [sp, #4]
   13190:	ldr	ip, [r4]
   13194:	mov	r3, sl
   13198:	mov	r2, r9
   1319c:	mov	r0, r7
   131a0:	str	ip, [sp]
   131a4:	bl	11964 <__assert_fail@plt+0xb40>
   131a8:	str	r6, [r5]
   131ac:	add	sp, sp, #24
   131b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131b4:	andeq	r6, r2, r4, asr r2
   131b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131bc:	cmp	r3, #0
   131c0:	sub	sp, sp, #44	; 0x2c
   131c4:	ldr	r4, [pc, #192]	; 1328c <__assert_fail@plt+0x2468>
   131c8:	mov	r6, r2
   131cc:	movne	r4, r3
   131d0:	mov	r9, r1
   131d4:	mov	r8, r0
   131d8:	bl	10d7c <__errno_location@plt>
   131dc:	ldr	r3, [r4, #44]	; 0x2c
   131e0:	ldr	r5, [r4, #4]
   131e4:	add	sl, r4, #8
   131e8:	cmp	r6, #0
   131ec:	orreq	r5, r5, #1
   131f0:	mov	r1, #0
   131f4:	ldr	r2, [r0]
   131f8:	str	r3, [sp, #16]
   131fc:	ldr	r3, [r4, #40]	; 0x28
   13200:	stmib	sp, {r5, sl}
   13204:	str	r3, [sp, #12]
   13208:	ldr	r3, [r4]
   1320c:	mov	r7, r0
   13210:	str	r2, [sp, #28]
   13214:	str	r3, [sp]
   13218:	mov	r2, r8
   1321c:	mov	r3, r9
   13220:	mov	r0, r1
   13224:	bl	11964 <__assert_fail@plt+0xb40>
   13228:	add	r1, r0, #1
   1322c:	mov	fp, r0
   13230:	mov	r0, r1
   13234:	str	r1, [sp, #36]	; 0x24
   13238:	bl	13b80 <__assert_fail@plt+0x2d5c>
   1323c:	ldr	r3, [r4, #44]	; 0x2c
   13240:	mov	r2, r8
   13244:	str	r3, [sp, #16]
   13248:	ldr	r3, [r4, #40]	; 0x28
   1324c:	str	r5, [sp, #4]
   13250:	str	r3, [sp, #12]
   13254:	str	sl, [sp, #8]
   13258:	ldr	ip, [r4]
   1325c:	ldr	r1, [sp, #36]	; 0x24
   13260:	mov	r3, r9
   13264:	str	ip, [sp]
   13268:	str	r0, [sp, #32]
   1326c:	bl	11964 <__assert_fail@plt+0xb40>
   13270:	ldr	r2, [sp, #28]
   13274:	cmp	r6, #0
   13278:	str	r2, [r7]
   1327c:	ldr	r0, [sp, #32]
   13280:	strne	fp, [r6]
   13284:	add	sp, sp, #44	; 0x2c
   13288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1328c:	andeq	r6, r2, r4, asr r2
   13290:	mov	r3, r2
   13294:	mov	r2, #0
   13298:	b	131b8 <__assert_fail@plt+0x2394>
   1329c:	push	{r4, r5, r6, r7, r8, lr}
   132a0:	ldr	r6, [pc, #116]	; 1331c <__assert_fail@plt+0x24f8>
   132a4:	ldr	r3, [r6, #4]
   132a8:	ldr	r7, [r6]
   132ac:	cmp	r3, #1
   132b0:	movgt	r5, r7
   132b4:	movgt	r4, #1
   132b8:	ble	132d8 <__assert_fail@plt+0x24b4>
   132bc:	ldr	r0, [r5, #12]
   132c0:	bl	148bc <__assert_fail@plt+0x3a98>
   132c4:	ldr	r3, [r6, #4]
   132c8:	add	r4, r4, #1
   132cc:	cmp	r3, r4
   132d0:	add	r5, r5, #8
   132d4:	bgt	132bc <__assert_fail@plt+0x2498>
   132d8:	ldr	r0, [r7, #4]
   132dc:	ldr	r4, [pc, #60]	; 13320 <__assert_fail@plt+0x24fc>
   132e0:	cmp	r0, r4
   132e4:	beq	132f8 <__assert_fail@plt+0x24d4>
   132e8:	bl	148bc <__assert_fail@plt+0x3a98>
   132ec:	mov	r3, #256	; 0x100
   132f0:	str	r4, [r6, #12]
   132f4:	str	r3, [r6, #8]
   132f8:	ldr	r4, [pc, #36]	; 13324 <__assert_fail@plt+0x2500>
   132fc:	cmp	r7, r4
   13300:	beq	13310 <__assert_fail@plt+0x24ec>
   13304:	mov	r0, r7
   13308:	bl	148bc <__assert_fail@plt+0x3a98>
   1330c:	str	r4, [r6]
   13310:	mov	r3, #1
   13314:	str	r3, [r6, #4]
   13318:	pop	{r4, r5, r6, r7, r8, pc}
   1331c:	andeq	r6, r2, r4, ror #1
   13320:	andeq	r6, r2, r4, asr r1
   13324:	andeq	r6, r2, ip, ror #1
   13328:	ldr	r3, [pc, #4]	; 13334 <__assert_fail@plt+0x2510>
   1332c:	mvn	r2, #0
   13330:	b	12e78 <__assert_fail@plt+0x2054>
   13334:	andeq	r6, r2, r4, asr r2
   13338:	ldr	r3, [pc]	; 13340 <__assert_fail@plt+0x251c>
   1333c:	b	12e78 <__assert_fail@plt+0x2054>
   13340:	andeq	r6, r2, r4, asr r2
   13344:	mov	r1, r0
   13348:	ldr	r3, [pc, #8]	; 13358 <__assert_fail@plt+0x2534>
   1334c:	mvn	r2, #0
   13350:	mov	r0, #0
   13354:	b	12e78 <__assert_fail@plt+0x2054>
   13358:	andeq	r6, r2, r4, asr r2
   1335c:	mov	r2, r1
   13360:	ldr	r3, [pc, #8]	; 13370 <__assert_fail@plt+0x254c>
   13364:	mov	r1, r0
   13368:	mov	r0, #0
   1336c:	b	12e78 <__assert_fail@plt+0x2054>
   13370:	andeq	r6, r2, r4, asr r2
   13374:	push	{r4, r5, lr}
   13378:	sub	sp, sp, #52	; 0x34
   1337c:	mov	r5, r2
   13380:	mov	r4, r0
   13384:	mov	r0, sp
   13388:	bl	11814 <__assert_fail@plt+0x9f0>
   1338c:	mov	r3, sp
   13390:	mov	r1, r5
   13394:	mov	r0, r4
   13398:	mvn	r2, #0
   1339c:	bl	12e78 <__assert_fail@plt+0x2054>
   133a0:	add	sp, sp, #52	; 0x34
   133a4:	pop	{r4, r5, pc}
   133a8:	push	{r4, r5, r6, lr}
   133ac:	sub	sp, sp, #48	; 0x30
   133b0:	mov	r5, r2
   133b4:	mov	r6, r3
   133b8:	mov	r4, r0
   133bc:	mov	r0, sp
   133c0:	bl	11814 <__assert_fail@plt+0x9f0>
   133c4:	mov	r3, sp
   133c8:	mov	r2, r6
   133cc:	mov	r1, r5
   133d0:	mov	r0, r4
   133d4:	bl	12e78 <__assert_fail@plt+0x2054>
   133d8:	add	sp, sp, #48	; 0x30
   133dc:	pop	{r4, r5, r6, pc}
   133e0:	mov	r2, r1
   133e4:	mov	r1, r0
   133e8:	mov	r0, #0
   133ec:	b	13374 <__assert_fail@plt+0x2550>
   133f0:	mov	r3, r2
   133f4:	mov	r2, r1
   133f8:	mov	r1, r0
   133fc:	mov	r0, #0
   13400:	b	133a8 <__assert_fail@plt+0x2584>
   13404:	push	{r4, r5, r6, r7, r8, lr}
   13408:	mov	r7, r0
   1340c:	ldr	lr, [pc, #100]	; 13478 <__assert_fail@plt+0x2654>
   13410:	mov	r8, r1
   13414:	mov	r4, r2
   13418:	ldm	lr!, {r0, r1, r2, r3}
   1341c:	sub	sp, sp, #48	; 0x30
   13420:	mov	ip, sp
   13424:	lsr	r5, r4, #5
   13428:	stmia	ip!, {r0, r1, r2, r3}
   1342c:	add	r6, sp, #8
   13430:	ldm	lr!, {r0, r1, r2, r3}
   13434:	and	r4, r4, #31
   13438:	stmia	ip!, {r0, r1, r2, r3}
   1343c:	ldm	lr, {r0, r1, r2, r3}
   13440:	stm	ip, {r0, r1, r2, r3}
   13444:	mov	r2, r8
   13448:	ldr	lr, [r6, r5, lsl #2]
   1344c:	mov	r1, r7
   13450:	mov	r3, sp
   13454:	lsr	ip, lr, r4
   13458:	eor	ip, ip, #1
   1345c:	and	ip, ip, #1
   13460:	mov	r0, #0
   13464:	eor	r4, lr, ip, lsl r4
   13468:	str	r4, [r6, r5, lsl #2]
   1346c:	bl	12e78 <__assert_fail@plt+0x2054>
   13470:	add	sp, sp, #48	; 0x30
   13474:	pop	{r4, r5, r6, r7, r8, pc}
   13478:	andeq	r6, r2, r4, asr r2
   1347c:	mov	r2, r1
   13480:	mvn	r1, #0
   13484:	b	13404 <__assert_fail@plt+0x25e0>
   13488:	mov	r2, #58	; 0x3a
   1348c:	mvn	r1, #0
   13490:	b	13404 <__assert_fail@plt+0x25e0>
   13494:	mov	r2, #58	; 0x3a
   13498:	b	13404 <__assert_fail@plt+0x25e0>
   1349c:	push	{r4, r5, r6, r7, lr}
   134a0:	sub	sp, sp, #100	; 0x64
   134a4:	mov	r6, r0
   134a8:	mov	r0, sp
   134ac:	mov	r7, r2
   134b0:	bl	11814 <__assert_fail@plt+0x9f0>
   134b4:	mov	ip, sp
   134b8:	add	lr, sp, #48	; 0x30
   134bc:	ldm	ip!, {r0, r1, r2, r3}
   134c0:	stmia	lr!, {r0, r1, r2, r3}
   134c4:	ldm	ip!, {r0, r1, r2, r3}
   134c8:	ldr	r5, [sp, #60]	; 0x3c
   134cc:	stmia	lr!, {r0, r1, r2, r3}
   134d0:	mvn	r4, r5
   134d4:	ldm	ip, {r0, r1, r2, r3}
   134d8:	and	ip, r4, #67108864	; 0x4000000
   134dc:	eor	ip, ip, r5
   134e0:	str	ip, [sp, #60]	; 0x3c
   134e4:	stm	lr, {r0, r1, r2, r3}
   134e8:	mov	r1, r7
   134ec:	mov	r0, r6
   134f0:	add	r3, sp, #48	; 0x30
   134f4:	mvn	r2, #0
   134f8:	bl	12e78 <__assert_fail@plt+0x2054>
   134fc:	add	sp, sp, #100	; 0x64
   13500:	pop	{r4, r5, r6, r7, pc}
   13504:	push	{r4, r5, r6, r7, r8, lr}
   13508:	mov	r5, r1
   1350c:	ldr	lr, [pc, #100]	; 13578 <__assert_fail@plt+0x2754>
   13510:	mov	r4, r2
   13514:	mov	r7, r0
   13518:	mov	r8, r3
   1351c:	ldm	lr!, {r0, r1, r2, r3}
   13520:	sub	sp, sp, #48	; 0x30
   13524:	mov	ip, sp
   13528:	mov	r6, #10
   1352c:	stmia	ip!, {r0, r1, r2, r3}
   13530:	cmp	r4, #0
   13534:	cmpne	r5, #0
   13538:	ldm	lr!, {r0, r1, r2, r3}
   1353c:	str	r6, [sp]
   13540:	stmia	ip!, {r0, r1, r2, r3}
   13544:	ldm	lr, {r0, r1, r2, r3}
   13548:	stm	ip, {r0, r1, r2, r3}
   1354c:	beq	13574 <__assert_fail@plt+0x2750>
   13550:	mov	r3, sp
   13554:	mov	r1, r8
   13558:	mov	r0, r7
   1355c:	ldr	r2, [sp, #72]	; 0x48
   13560:	str	r5, [sp, #40]	; 0x28
   13564:	str	r4, [sp, #44]	; 0x2c
   13568:	bl	12e78 <__assert_fail@plt+0x2054>
   1356c:	add	sp, sp, #48	; 0x30
   13570:	pop	{r4, r5, r6, r7, r8, pc}
   13574:	bl	10e18 <abort@plt>
   13578:	andeq	r6, r2, r4, asr r2
   1357c:	push	{lr}		; (str lr, [sp, #-4]!)
   13580:	sub	sp, sp, #12
   13584:	mvn	ip, #0
   13588:	str	ip, [sp]
   1358c:	bl	13504 <__assert_fail@plt+0x26e0>
   13590:	add	sp, sp, #12
   13594:	pop	{pc}		; (ldr pc, [sp], #4)
   13598:	push	{lr}		; (str lr, [sp, #-4]!)
   1359c:	sub	sp, sp, #12
   135a0:	mvn	ip, #0
   135a4:	mov	r3, r2
   135a8:	str	ip, [sp]
   135ac:	mov	r2, r1
   135b0:	mov	r1, r0
   135b4:	mov	r0, #0
   135b8:	bl	13504 <__assert_fail@plt+0x26e0>
   135bc:	add	sp, sp, #12
   135c0:	pop	{pc}		; (ldr pc, [sp], #4)
   135c4:	push	{lr}		; (str lr, [sp, #-4]!)
   135c8:	sub	sp, sp, #12
   135cc:	str	r3, [sp]
   135d0:	mov	r3, r2
   135d4:	mov	r2, r1
   135d8:	mov	r1, r0
   135dc:	mov	r0, #0
   135e0:	bl	13504 <__assert_fail@plt+0x26e0>
   135e4:	add	sp, sp, #12
   135e8:	pop	{pc}		; (ldr pc, [sp], #4)
   135ec:	ldr	r3, [pc]	; 135f4 <__assert_fail@plt+0x27d0>
   135f0:	b	12e78 <__assert_fail@plt+0x2054>
   135f4:	strdeq	r6, [r2], -r4
   135f8:	mov	r2, r1
   135fc:	ldr	r3, [pc, #8]	; 1360c <__assert_fail@plt+0x27e8>
   13600:	mov	r1, r0
   13604:	mov	r0, #0
   13608:	b	12e78 <__assert_fail@plt+0x2054>
   1360c:	strdeq	r6, [r2], -r4
   13610:	ldr	r3, [pc, #4]	; 1361c <__assert_fail@plt+0x27f8>
   13614:	mvn	r2, #0
   13618:	b	12e78 <__assert_fail@plt+0x2054>
   1361c:	strdeq	r6, [r2], -r4
   13620:	mov	r1, r0
   13624:	ldr	r3, [pc, #8]	; 13634 <__assert_fail@plt+0x2810>
   13628:	mvn	r2, #0
   1362c:	mov	r0, #0
   13630:	b	12e78 <__assert_fail@plt+0x2054>
   13634:	strdeq	r6, [r2], -r4
   13638:	push	{r4, r5, r6, lr}
   1363c:	sub	sp, sp, #32
   13640:	cmp	r1, #0
   13644:	mov	r4, r0
   13648:	ldr	r5, [sp, #48]	; 0x30
   1364c:	ldr	r6, [sp, #52]	; 0x34
   13650:	beq	13968 <__assert_fail@plt+0x2b44>
   13654:	stm	sp, {r2, r3}
   13658:	mov	r3, r1
   1365c:	ldr	r2, [pc, #808]	; 1398c <__assert_fail@plt+0x2b68>
   13660:	mov	r1, #1
   13664:	bl	10db8 <__fprintf_chk@plt>
   13668:	mov	r2, #5
   1366c:	ldr	r1, [pc, #796]	; 13990 <__assert_fail@plt+0x2b6c>
   13670:	mov	r0, #0
   13674:	bl	10c80 <dcgettext@plt>
   13678:	ldr	r3, [pc, #788]	; 13994 <__assert_fail@plt+0x2b70>
   1367c:	ldr	r2, [pc, #788]	; 13998 <__assert_fail@plt+0x2b74>
   13680:	str	r3, [sp]
   13684:	mov	r1, #1
   13688:	mov	r3, r0
   1368c:	mov	r0, r4
   13690:	bl	10db8 <__fprintf_chk@plt>
   13694:	mov	r1, r4
   13698:	mov	r0, #10
   1369c:	bl	10c74 <fputc_unlocked@plt>
   136a0:	mov	r2, #5
   136a4:	ldr	r1, [pc, #752]	; 1399c <__assert_fail@plt+0x2b78>
   136a8:	mov	r0, #0
   136ac:	bl	10c80 <dcgettext@plt>
   136b0:	mov	r1, #1
   136b4:	ldr	r3, [pc, #740]	; 139a0 <__assert_fail@plt+0x2b7c>
   136b8:	mov	r2, r0
   136bc:	mov	r0, r4
   136c0:	bl	10db8 <__fprintf_chk@plt>
   136c4:	mov	r1, r4
   136c8:	mov	r0, #10
   136cc:	bl	10c74 <fputc_unlocked@plt>
   136d0:	cmp	r6, #9
   136d4:	ldrls	pc, [pc, r6, lsl #2]
   136d8:	b	13980 <__assert_fail@plt+0x2b5c>
   136dc:	andeq	r3, r1, r0, ror #14
   136e0:	andeq	r3, r1, r8, ror #14
   136e4:	muleq	r1, r4, r7
   136e8:	andeq	r3, r1, r8, asr #15
   136ec:	andeq	r3, r1, r4, lsl #16
   136f0:	andeq	r3, r1, r0, asr #16
   136f4:	andeq	r3, r1, ip, ror r8
   136f8:	andeq	r3, r1, r0, asr #17
   136fc:	andeq	r3, r1, r0, lsl r9
   13700:	andeq	r3, r1, r4, lsl #14
   13704:	ldr	r1, [pc, #664]	; 139a4 <__assert_fail@plt+0x2b80>
   13708:	mov	r2, #5
   1370c:	mov	r0, #0
   13710:	bl	10c80 <dcgettext@plt>
   13714:	ldr	ip, [r5, #32]
   13718:	ldr	r1, [r5, #28]
   1371c:	ldr	r2, [r5, #24]
   13720:	ldr	r3, [r5]
   13724:	ldr	r6, [r5, #20]
   13728:	str	ip, [sp, #28]
   1372c:	ldr	lr, [r5, #16]
   13730:	str	r1, [sp, #24]
   13734:	ldr	ip, [r5, #12]
   13738:	str	r2, [sp, #20]
   1373c:	ldr	r1, [r5, #8]
   13740:	ldr	r2, [r5, #4]
   13744:	str	r6, [sp, #16]
   13748:	stmib	sp, {r1, ip, lr}
   1374c:	mov	r1, #1
   13750:	str	r2, [sp]
   13754:	mov	r2, r0
   13758:	mov	r0, r4
   1375c:	bl	10db8 <__fprintf_chk@plt>
   13760:	add	sp, sp, #32
   13764:	pop	{r4, r5, r6, pc}
   13768:	mov	r2, #5
   1376c:	ldr	r1, [pc, #564]	; 139a8 <__assert_fail@plt+0x2b84>
   13770:	mov	r0, #0
   13774:	bl	10c80 <dcgettext@plt>
   13778:	ldr	r3, [r5]
   1377c:	mov	r1, #1
   13780:	mov	r2, r0
   13784:	mov	r0, r4
   13788:	add	sp, sp, #32
   1378c:	pop	{r4, r5, r6, lr}
   13790:	b	10db8 <__fprintf_chk@plt>
   13794:	mov	r2, #5
   13798:	ldr	r1, [pc, #524]	; 139ac <__assert_fail@plt+0x2b88>
   1379c:	mov	r0, #0
   137a0:	bl	10c80 <dcgettext@plt>
   137a4:	ldr	r2, [r5, #4]
   137a8:	ldr	r3, [r5]
   137ac:	mov	r1, #1
   137b0:	str	r2, [sp, #48]	; 0x30
   137b4:	mov	r2, r0
   137b8:	mov	r0, r4
   137bc:	add	sp, sp, #32
   137c0:	pop	{r4, r5, r6, lr}
   137c4:	b	10db8 <__fprintf_chk@plt>
   137c8:	mov	r2, #5
   137cc:	ldr	r1, [pc, #476]	; 139b0 <__assert_fail@plt+0x2b8c>
   137d0:	mov	r0, #0
   137d4:	bl	10c80 <dcgettext@plt>
   137d8:	ldr	r1, [r5, #8]
   137dc:	ldr	r2, [r5, #4]
   137e0:	ldr	r3, [r5]
   137e4:	str	r1, [sp, #52]	; 0x34
   137e8:	str	r2, [sp, #48]	; 0x30
   137ec:	mov	r1, #1
   137f0:	mov	r2, r0
   137f4:	mov	r0, r4
   137f8:	add	sp, sp, #32
   137fc:	pop	{r4, r5, r6, lr}
   13800:	b	10db8 <__fprintf_chk@plt>
   13804:	mov	r2, #5
   13808:	ldr	r1, [pc, #420]	; 139b4 <__assert_fail@plt+0x2b90>
   1380c:	mov	r0, #0
   13810:	bl	10c80 <dcgettext@plt>
   13814:	ldr	r1, [r5, #8]
   13818:	ldr	ip, [r5, #12]
   1381c:	ldr	r2, [r5, #4]
   13820:	ldr	r3, [r5]
   13824:	stmib	sp, {r1, ip}
   13828:	str	r2, [sp]
   1382c:	mov	r1, #1
   13830:	mov	r2, r0
   13834:	mov	r0, r4
   13838:	bl	10db8 <__fprintf_chk@plt>
   1383c:	b	13760 <__assert_fail@plt+0x293c>
   13840:	mov	r2, #5
   13844:	ldr	r1, [pc, #364]	; 139b8 <__assert_fail@plt+0x2b94>
   13848:	mov	r0, #0
   1384c:	bl	10c80 <dcgettext@plt>
   13850:	add	r1, r5, #8
   13854:	ldr	r2, [r5, #4]
   13858:	ldm	r1, {r1, ip, lr}
   1385c:	ldr	r3, [r5]
   13860:	str	r2, [sp]
   13864:	stmib	sp, {r1, ip, lr}
   13868:	mov	r1, #1
   1386c:	mov	r2, r0
   13870:	mov	r0, r4
   13874:	bl	10db8 <__fprintf_chk@plt>
   13878:	b	13760 <__assert_fail@plt+0x293c>
   1387c:	mov	r2, #5
   13880:	ldr	r1, [pc, #308]	; 139bc <__assert_fail@plt+0x2b98>
   13884:	mov	r0, #0
   13888:	bl	10c80 <dcgettext@plt>
   1388c:	add	r1, r5, #8
   13890:	ldr	r2, [r5, #4]
   13894:	ldm	r1, {r1, ip, lr}
   13898:	ldr	r6, [r5, #20]
   1389c:	ldr	r3, [r5]
   138a0:	stmib	sp, {r1, ip, lr}
   138a4:	mov	r1, #1
   138a8:	str	r2, [sp]
   138ac:	str	r6, [sp, #16]
   138b0:	mov	r2, r0
   138b4:	mov	r0, r4
   138b8:	bl	10db8 <__fprintf_chk@plt>
   138bc:	b	13760 <__assert_fail@plt+0x293c>
   138c0:	mov	r2, #5
   138c4:	ldr	r1, [pc, #244]	; 139c0 <__assert_fail@plt+0x2b9c>
   138c8:	mov	r0, #0
   138cc:	bl	10c80 <dcgettext@plt>
   138d0:	ldr	r2, [r5, #24]
   138d4:	ldr	r3, [r5]
   138d8:	ldr	r6, [r5, #20]
   138dc:	ldr	lr, [r5, #16]
   138e0:	ldr	ip, [r5, #12]
   138e4:	str	r2, [sp, #20]
   138e8:	ldr	r1, [r5, #8]
   138ec:	ldr	r2, [r5, #4]
   138f0:	str	r6, [sp, #16]
   138f4:	stmib	sp, {r1, ip, lr}
   138f8:	mov	r1, #1
   138fc:	str	r2, [sp]
   13900:	mov	r2, r0
   13904:	mov	r0, r4
   13908:	bl	10db8 <__fprintf_chk@plt>
   1390c:	b	13760 <__assert_fail@plt+0x293c>
   13910:	mov	r2, #5
   13914:	ldr	r1, [pc, #168]	; 139c4 <__assert_fail@plt+0x2ba0>
   13918:	mov	r0, #0
   1391c:	bl	10c80 <dcgettext@plt>
   13920:	ldr	r1, [r5, #28]
   13924:	ldr	r2, [r5, #24]
   13928:	ldr	r3, [r5]
   1392c:	ldr	r6, [r5, #20]
   13930:	ldr	lr, [r5, #16]
   13934:	str	r1, [sp, #24]
   13938:	ldr	ip, [r5, #12]
   1393c:	str	r2, [sp, #20]
   13940:	ldr	r1, [r5, #8]
   13944:	ldr	r2, [r5, #4]
   13948:	str	r6, [sp, #16]
   1394c:	stmib	sp, {r1, ip, lr}
   13950:	mov	r1, #1
   13954:	str	r2, [sp]
   13958:	mov	r2, r0
   1395c:	mov	r0, r4
   13960:	bl	10db8 <__fprintf_chk@plt>
   13964:	b	13760 <__assert_fail@plt+0x293c>
   13968:	str	r3, [sp]
   1396c:	mov	r1, #1
   13970:	mov	r3, r2
   13974:	ldr	r2, [pc, #76]	; 139c8 <__assert_fail@plt+0x2ba4>
   13978:	bl	10db8 <__fprintf_chk@plt>
   1397c:	b	13668 <__assert_fail@plt+0x2844>
   13980:	mov	r2, #5
   13984:	ldr	r1, [pc, #64]	; 139cc <__assert_fail@plt+0x2ba8>
   13988:	b	1370c <__assert_fail@plt+0x28e8>
   1398c:	andeq	r5, r1, r8, lsl #14
   13990:	andeq	r5, r1, ip, lsl r7
   13994:	andeq	r0, r0, r6, ror #15
   13998:	strdeq	r5, [r1], -r4
   1399c:	andeq	r5, r1, r0, lsr #14
   139a0:	andeq	r5, r1, ip, asr #15
   139a4:	strdeq	r5, [r1], -ip
   139a8:	strdeq	r5, [r1], -r0
   139ac:	andeq	r5, r1, r0, lsl #16
   139b0:	andeq	r5, r1, r8, lsl r8
   139b4:	andeq	r5, r1, r4, lsr r8
   139b8:	andeq	r5, r1, r4, asr r8
   139bc:	andeq	r5, r1, r8, ror r8
   139c0:	andeq	r5, r1, r0, lsr #17
   139c4:	andeq	r5, r1, ip, asr #17
   139c8:	andeq	r5, r1, r4, lsl r7
   139cc:	andeq	r5, r1, r0, lsr r9
   139d0:	push	{r4, r5, lr}
   139d4:	sub	sp, sp, #12
   139d8:	ldr	r5, [sp, #24]
   139dc:	ldr	ip, [r5]
   139e0:	cmp	ip, #0
   139e4:	beq	13a00 <__assert_fail@plt+0x2bdc>
   139e8:	mov	lr, r5
   139ec:	mov	ip, #0
   139f0:	ldr	r4, [lr, #4]!
   139f4:	add	ip, ip, #1
   139f8:	cmp	r4, #0
   139fc:	bne	139f0 <__assert_fail@plt+0x2bcc>
   13a00:	stm	sp, {r5, ip}
   13a04:	bl	13638 <__assert_fail@plt+0x2814>
   13a08:	add	sp, sp, #12
   13a0c:	pop	{r4, r5, pc}
   13a10:	push	{r4, r5, lr}
   13a14:	sub	sp, sp, #52	; 0x34
   13a18:	add	r5, sp, #4
   13a1c:	ldr	r4, [sp, #64]	; 0x40
   13a20:	mov	ip, #0
   13a24:	sub	r4, r4, #4
   13a28:	ldr	lr, [r4, #4]!
   13a2c:	cmp	lr, #0
   13a30:	str	lr, [r5, #4]!
   13a34:	beq	13a44 <__assert_fail@plt+0x2c20>
   13a38:	add	ip, ip, #1
   13a3c:	cmp	ip, #10
   13a40:	bne	13a28 <__assert_fail@plt+0x2c04>
   13a44:	add	lr, sp, #8
   13a48:	str	ip, [sp, #4]
   13a4c:	str	lr, [sp]
   13a50:	bl	13638 <__assert_fail@plt+0x2814>
   13a54:	add	sp, sp, #52	; 0x34
   13a58:	pop	{r4, r5, pc}
   13a5c:	push	{r3}		; (str r3, [sp, #-4]!)
   13a60:	push	{r4, lr}
   13a64:	sub	sp, sp, #60	; 0x3c
   13a68:	add	lr, sp, #56	; 0x38
   13a6c:	add	r3, sp, #72	; 0x48
   13a70:	str	r3, [lr, #-44]!	; 0xffffffd4
   13a74:	add	r4, sp, #68	; 0x44
   13a78:	mov	r3, #0
   13a7c:	ldr	ip, [r4, #4]!
   13a80:	cmp	ip, #0
   13a84:	str	ip, [lr, #4]!
   13a88:	beq	13a98 <__assert_fail@plt+0x2c74>
   13a8c:	add	r3, r3, #1
   13a90:	cmp	r3, #10
   13a94:	bne	13a7c <__assert_fail@plt+0x2c58>
   13a98:	add	ip, sp, #16
   13a9c:	str	r3, [sp, #4]
   13aa0:	str	ip, [sp]
   13aa4:	ldr	r3, [sp, #68]	; 0x44
   13aa8:	bl	13638 <__assert_fail@plt+0x2814>
   13aac:	add	sp, sp, #60	; 0x3c
   13ab0:	pop	{r4, lr}
   13ab4:	add	sp, sp, #4
   13ab8:	bx	lr
   13abc:	ldr	r3, [pc, #116]	; 13b38 <__assert_fail@plt+0x2d14>
   13ac0:	push	{r4, lr}
   13ac4:	mov	r0, #10
   13ac8:	ldr	r1, [r3]
   13acc:	bl	10c74 <fputc_unlocked@plt>
   13ad0:	mov	r2, #5
   13ad4:	ldr	r1, [pc, #96]	; 13b3c <__assert_fail@plt+0x2d18>
   13ad8:	mov	r0, #0
   13adc:	bl	10c80 <dcgettext@plt>
   13ae0:	ldr	r2, [pc, #88]	; 13b40 <__assert_fail@plt+0x2d1c>
   13ae4:	mov	r1, r0
   13ae8:	mov	r0, #1
   13aec:	bl	10da0 <__printf_chk@plt>
   13af0:	mov	r2, #5
   13af4:	ldr	r1, [pc, #72]	; 13b44 <__assert_fail@plt+0x2d20>
   13af8:	mov	r0, #0
   13afc:	bl	10c80 <dcgettext@plt>
   13b00:	ldr	r3, [pc, #64]	; 13b48 <__assert_fail@plt+0x2d24>
   13b04:	ldr	r2, [pc, #64]	; 13b4c <__assert_fail@plt+0x2d28>
   13b08:	mov	r1, r0
   13b0c:	mov	r0, #1
   13b10:	bl	10da0 <__printf_chk@plt>
   13b14:	mov	r2, #5
   13b18:	ldr	r1, [pc, #48]	; 13b50 <__assert_fail@plt+0x2d2c>
   13b1c:	mov	r0, #0
   13b20:	bl	10c80 <dcgettext@plt>
   13b24:	ldr	r2, [pc, #40]	; 13b54 <__assert_fail@plt+0x2d30>
   13b28:	pop	{r4, lr}
   13b2c:	mov	r1, r0
   13b30:	mov	r0, #1
   13b34:	b	10da0 <__printf_chk@plt>
   13b38:	andeq	r6, r2, ip, lsr r1
   13b3c:	andeq	r5, r1, ip, ror #18
   13b40:	andeq	r5, r1, r0, lsl #19
   13b44:	muleq	r1, r8, r9
   13b48:	andeq	r5, r1, r0, ror #7
   13b4c:	andeq	r5, r1, r8, lsl #8
   13b50:	andeq	r5, r1, ip, lsr #19
   13b54:	ldrdeq	r5, [r1], -r4
   13b58:	push	{r4, lr}
   13b5c:	bl	146b8 <__assert_fail@plt+0x3894>
   13b60:	cmp	r0, #0
   13b64:	popne	{r4, pc}
   13b68:	bl	140a0 <__assert_fail@plt+0x327c>
   13b6c:	push	{r4, lr}
   13b70:	bl	146b8 <__assert_fail@plt+0x3894>
   13b74:	cmp	r0, #0
   13b78:	popne	{r4, pc}
   13b7c:	bl	140a0 <__assert_fail@plt+0x327c>
   13b80:	push	{r4, lr}
   13b84:	bl	146b8 <__assert_fail@plt+0x3894>
   13b88:	cmp	r0, #0
   13b8c:	popne	{r4, pc}
   13b90:	bl	140a0 <__assert_fail@plt+0x327c>
   13b94:	push	{r4, r5, r6, lr}
   13b98:	mov	r5, r0
   13b9c:	mov	r4, r1
   13ba0:	bl	146e4 <__assert_fail@plt+0x38c0>
   13ba4:	cmp	r0, #0
   13ba8:	popne	{r4, r5, r6, pc}
   13bac:	adds	r4, r4, #0
   13bb0:	movne	r4, #1
   13bb4:	cmp	r5, #0
   13bb8:	orreq	r4, r4, #1
   13bbc:	cmp	r4, #0
   13bc0:	popeq	{r4, r5, r6, pc}
   13bc4:	bl	140a0 <__assert_fail@plt+0x327c>
   13bc8:	push	{r4, lr}
   13bcc:	cmp	r1, #0
   13bd0:	orreq	r1, r1, #1
   13bd4:	bl	146e4 <__assert_fail@plt+0x38c0>
   13bd8:	cmp	r0, #0
   13bdc:	popne	{r4, pc}
   13be0:	bl	140a0 <__assert_fail@plt+0x327c>
   13be4:	push	{r4, r5, r6, lr}
   13be8:	mov	r6, r0
   13bec:	mov	r5, r1
   13bf0:	mov	r4, r2
   13bf4:	bl	14a3c <__assert_fail@plt+0x3c18>
   13bf8:	cmp	r0, #0
   13bfc:	popne	{r4, r5, r6, pc}
   13c00:	cmp	r6, #0
   13c04:	beq	13c14 <__assert_fail@plt+0x2df0>
   13c08:	cmp	r5, #0
   13c0c:	cmpne	r4, #0
   13c10:	popeq	{r4, r5, r6, pc}
   13c14:	bl	140a0 <__assert_fail@plt+0x327c>
   13c18:	b	13be4 <__assert_fail@plt+0x2dc0>
   13c1c:	cmp	r2, #0
   13c20:	cmpne	r1, #0
   13c24:	moveq	r2, #1
   13c28:	moveq	r1, r2
   13c2c:	push	{r4, lr}
   13c30:	bl	14a3c <__assert_fail@plt+0x3c18>
   13c34:	cmp	r0, #0
   13c38:	popne	{r4, pc}
   13c3c:	bl	140a0 <__assert_fail@plt+0x327c>
   13c40:	mov	r2, r1
   13c44:	mov	r1, r0
   13c48:	mov	r0, #0
   13c4c:	b	13be4 <__assert_fail@plt+0x2dc0>
   13c50:	mov	r2, r1
   13c54:	mov	r1, r0
   13c58:	mov	r0, #0
   13c5c:	b	13c1c <__assert_fail@plt+0x2df8>
   13c60:	push	{r4, r5, r6, lr}
   13c64:	subs	r6, r0, #0
   13c68:	sub	sp, sp, #8
   13c6c:	mov	r5, r1
   13c70:	ldr	r4, [r1]
   13c74:	beq	13cb0 <__assert_fail@plt+0x2e8c>
   13c78:	lsr	r1, r4, #1
   13c7c:	add	r3, r1, #1
   13c80:	mvn	r3, r3
   13c84:	cmp	r4, r3
   13c88:	bhi	13cac <__assert_fail@plt+0x2e88>
   13c8c:	add	r4, r4, #1
   13c90:	add	r4, r4, r1
   13c94:	mov	r0, r6
   13c98:	mov	r1, r4
   13c9c:	bl	13be4 <__assert_fail@plt+0x2dc0>
   13ca0:	str	r4, [r5]
   13ca4:	add	sp, sp, #8
   13ca8:	pop	{r4, r5, r6, pc}
   13cac:	bl	140a0 <__assert_fail@plt+0x327c>
   13cb0:	cmp	r4, #0
   13cb4:	bne	13c94 <__assert_fail@plt+0x2e70>
   13cb8:	mov	r1, r2
   13cbc:	mov	r0, #64	; 0x40
   13cc0:	str	r2, [sp, #4]
   13cc4:	bl	14b7c <__assert_fail@plt+0x3d58>
   13cc8:	ldr	r2, [sp, #4]
   13ccc:	cmp	r0, #0
   13cd0:	movne	r4, r0
   13cd4:	addeq	r4, r0, #1
   13cd8:	b	13c94 <__assert_fail@plt+0x2e70>
   13cdc:	mov	r2, #1
   13ce0:	b	13c60 <__assert_fail@plt+0x2e3c>
   13ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ce8:	sub	sp, sp, #12
   13cec:	ldr	r6, [r1]
   13cf0:	mov	sl, r1
   13cf4:	mov	r9, r0
   13cf8:	asrs	r4, r6, #1
   13cfc:	mov	r5, r2
   13d00:	mov	fp, r3
   13d04:	ldr	r7, [sp, #48]	; 0x30
   13d08:	bmi	13e74 <__assert_fail@plt+0x3050>
   13d0c:	mvn	r3, #-2147483648	; 0x80000000
   13d10:	sub	r3, r3, r4
   13d14:	cmp	r6, r3
   13d18:	movle	r3, #0
   13d1c:	movgt	r3, #1
   13d20:	mvn	r8, fp
   13d24:	cmp	r3, #0
   13d28:	addeq	r4, r4, r6
   13d2c:	mvnne	r4, #-2147483648	; 0x80000000
   13d30:	lsr	r8, r8, #31
   13d34:	cmp	fp, r4
   13d38:	movge	r3, #0
   13d3c:	andlt	r3, r8, #1
   13d40:	cmp	r3, #0
   13d44:	beq	13e2c <__assert_fail@plt+0x3008>
   13d48:	cmp	r7, #0
   13d4c:	blt	13efc <__assert_fail@plt+0x30d8>
   13d50:	bne	13ef4 <__assert_fail@plt+0x30d0>
   13d54:	mov	r2, #64	; 0x40
   13d58:	mov	r1, r7
   13d5c:	mov	r0, r2
   13d60:	str	r2, [sp, #4]
   13d64:	bl	14d88 <__assert_fail@plt+0x3f64>
   13d68:	ldr	r2, [sp, #4]
   13d6c:	mov	r1, r7
   13d70:	mov	r4, r0
   13d74:	mov	r0, r2
   13d78:	bl	14fa8 <__assert_fail@plt+0x4184>
   13d7c:	ldr	r2, [sp, #4]
   13d80:	sub	r1, r2, r1
   13d84:	cmp	r9, #0
   13d88:	sub	r3, r4, r6
   13d8c:	streq	r9, [sl]
   13d90:	cmp	r3, r5
   13d94:	bge	13e18 <__assert_fail@plt+0x2ff4>
   13d98:	cmp	r5, #0
   13d9c:	blt	13e88 <__assert_fail@plt+0x3064>
   13da0:	cmp	r6, #0
   13da4:	blt	13dc4 <__assert_fail@plt+0x2fa0>
   13da8:	mvn	r3, #-2147483648	; 0x80000000
   13dac:	sub	r3, r3, r5
   13db0:	cmp	r6, r3
   13db4:	movle	r3, #0
   13db8:	movgt	r3, #1
   13dbc:	cmp	r3, #0
   13dc0:	bne	13f84 <__assert_fail@plt+0x3160>
   13dc4:	add	r5, r6, r5
   13dc8:	cmp	fp, r5
   13dcc:	movge	r8, #0
   13dd0:	andlt	r8, r8, #1
   13dd4:	cmp	r8, #0
   13dd8:	mov	r4, r5
   13ddc:	bne	13f84 <__assert_fail@plt+0x3160>
   13de0:	cmp	r7, #0
   13de4:	blt	13e9c <__assert_fail@plt+0x3078>
   13de8:	beq	13e14 <__assert_fail@plt+0x2ff0>
   13dec:	cmp	r5, #0
   13df0:	blt	13f44 <__assert_fail@plt+0x3120>
   13df4:	mov	r1, r7
   13df8:	mvn	r0, #-2147483648	; 0x80000000
   13dfc:	bl	14d88 <__assert_fail@plt+0x3f64>
   13e00:	cmp	r5, r0
   13e04:	movle	r0, #0
   13e08:	movgt	r0, #1
   13e0c:	cmp	r0, #0
   13e10:	bne	13f84 <__assert_fail@plt+0x3160>
   13e14:	mul	r1, r5, r7
   13e18:	mov	r0, r9
   13e1c:	bl	13b94 <__assert_fail@plt+0x2d70>
   13e20:	str	r4, [sl]
   13e24:	add	sp, sp, #12
   13e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e2c:	cmp	r7, #0
   13e30:	blt	13ec8 <__assert_fail@plt+0x30a4>
   13e34:	beq	13d54 <__assert_fail@plt+0x2f30>
   13e38:	cmp	r4, #0
   13e3c:	blt	13f04 <__assert_fail@plt+0x30e0>
   13e40:	mov	r1, r7
   13e44:	mvn	r0, #-2147483648	; 0x80000000
   13e48:	bl	14d88 <__assert_fail@plt+0x3f64>
   13e4c:	cmp	r0, r4
   13e50:	movge	r0, #0
   13e54:	movlt	r0, #1
   13e58:	cmp	r0, #0
   13e5c:	mvnne	r2, #-2147483648	; 0x80000000
   13e60:	bne	13d58 <__assert_fail@plt+0x2f34>
   13e64:	mul	r1, r7, r4
   13e68:	cmp	r1, #63	; 0x3f
   13e6c:	bgt	13d84 <__assert_fail@plt+0x2f60>
   13e70:	b	13d54 <__assert_fail@plt+0x2f30>
   13e74:	rsb	r3, r4, #-2147483648	; 0x80000000
   13e78:	cmp	r6, r3
   13e7c:	movge	r3, #0
   13e80:	movlt	r3, #1
   13e84:	b	13d20 <__assert_fail@plt+0x2efc>
   13e88:	rsb	r3, r5, #-2147483648	; 0x80000000
   13e8c:	cmp	r6, r3
   13e90:	movge	r3, #0
   13e94:	movlt	r3, #1
   13e98:	b	13dbc <__assert_fail@plt+0x2f98>
   13e9c:	cmp	r5, #0
   13ea0:	blt	13f28 <__assert_fail@plt+0x3104>
   13ea4:	cmn	r7, #1
   13ea8:	beq	13e14 <__assert_fail@plt+0x2ff0>
   13eac:	mov	r1, r7
   13eb0:	mov	r0, #-2147483648	; 0x80000000
   13eb4:	bl	14d88 <__assert_fail@plt+0x3f64>
   13eb8:	cmp	r5, r0
   13ebc:	movle	r0, #0
   13ec0:	movgt	r0, #1
   13ec4:	b	13e0c <__assert_fail@plt+0x2fe8>
   13ec8:	cmp	r4, #0
   13ecc:	blt	13f68 <__assert_fail@plt+0x3144>
   13ed0:	cmn	r7, #1
   13ed4:	beq	13e64 <__assert_fail@plt+0x3040>
   13ed8:	mov	r1, r7
   13edc:	mov	r0, #-2147483648	; 0x80000000
   13ee0:	bl	14d88 <__assert_fail@plt+0x3f64>
   13ee4:	cmp	r0, r4
   13ee8:	movge	r0, #0
   13eec:	movlt	r0, #1
   13ef0:	b	13e58 <__assert_fail@plt+0x3034>
   13ef4:	mov	r4, fp
   13ef8:	b	13e40 <__assert_fail@plt+0x301c>
   13efc:	mov	r4, fp
   13f00:	b	13ed0 <__assert_fail@plt+0x30ac>
   13f04:	cmn	r4, #1
   13f08:	beq	13e64 <__assert_fail@plt+0x3040>
   13f0c:	mov	r1, r4
   13f10:	mov	r0, #-2147483648	; 0x80000000
   13f14:	bl	14d88 <__assert_fail@plt+0x3f64>
   13f18:	cmp	r7, r0
   13f1c:	movle	r0, #0
   13f20:	movgt	r0, #1
   13f24:	b	13e58 <__assert_fail@plt+0x3034>
   13f28:	mov	r1, r7
   13f2c:	mvn	r0, #-2147483648	; 0x80000000
   13f30:	bl	14d88 <__assert_fail@plt+0x3f64>
   13f34:	cmp	r5, r0
   13f38:	movge	r0, #0
   13f3c:	movlt	r0, #1
   13f40:	b	13e0c <__assert_fail@plt+0x2fe8>
   13f44:	cmn	r5, #1
   13f48:	beq	13e14 <__assert_fail@plt+0x2ff0>
   13f4c:	mov	r1, r5
   13f50:	mov	r0, #-2147483648	; 0x80000000
   13f54:	bl	14d88 <__assert_fail@plt+0x3f64>
   13f58:	cmp	r7, r0
   13f5c:	movle	r0, #0
   13f60:	movgt	r0, #1
   13f64:	b	13e0c <__assert_fail@plt+0x2fe8>
   13f68:	mov	r1, r7
   13f6c:	mvn	r0, #-2147483648	; 0x80000000
   13f70:	bl	14d88 <__assert_fail@plt+0x3f64>
   13f74:	cmp	r0, r4
   13f78:	movle	r0, #0
   13f7c:	movgt	r0, #1
   13f80:	b	13e58 <__assert_fail@plt+0x3034>
   13f84:	bl	140a0 <__assert_fail@plt+0x327c>
   13f88:	push	{r4, lr}
   13f8c:	mov	r1, #1
   13f90:	bl	14670 <__assert_fail@plt+0x384c>
   13f94:	cmp	r0, #0
   13f98:	popne	{r4, pc}
   13f9c:	bl	140a0 <__assert_fail@plt+0x327c>
   13fa0:	push	{r4, lr}
   13fa4:	mov	r1, #1
   13fa8:	bl	14670 <__assert_fail@plt+0x384c>
   13fac:	cmp	r0, #0
   13fb0:	popne	{r4, pc}
   13fb4:	bl	140a0 <__assert_fail@plt+0x327c>
   13fb8:	push	{r4, lr}
   13fbc:	bl	14670 <__assert_fail@plt+0x384c>
   13fc0:	cmp	r0, #0
   13fc4:	popne	{r4, pc}
   13fc8:	bl	140a0 <__assert_fail@plt+0x327c>
   13fcc:	push	{r4, lr}
   13fd0:	bl	14670 <__assert_fail@plt+0x384c>
   13fd4:	cmp	r0, #0
   13fd8:	popne	{r4, pc}
   13fdc:	bl	140a0 <__assert_fail@plt+0x327c>
   13fe0:	push	{r4, r5, r6, lr}
   13fe4:	mov	r6, r0
   13fe8:	mov	r0, r1
   13fec:	mov	r4, r1
   13ff0:	bl	146b8 <__assert_fail@plt+0x3894>
   13ff4:	subs	r5, r0, #0
   13ff8:	beq	14010 <__assert_fail@plt+0x31ec>
   13ffc:	mov	r2, r4
   14000:	mov	r1, r6
   14004:	bl	10c44 <memcpy@plt>
   14008:	mov	r0, r5
   1400c:	pop	{r4, r5, r6, pc}
   14010:	bl	140a0 <__assert_fail@plt+0x327c>
   14014:	push	{r4, r5, r6, lr}
   14018:	mov	r6, r0
   1401c:	mov	r0, r1
   14020:	mov	r4, r1
   14024:	bl	146b8 <__assert_fail@plt+0x3894>
   14028:	subs	r5, r0, #0
   1402c:	beq	14044 <__assert_fail@plt+0x3220>
   14030:	mov	r2, r4
   14034:	mov	r1, r6
   14038:	bl	10c44 <memcpy@plt>
   1403c:	mov	r0, r5
   14040:	pop	{r4, r5, r6, pc}
   14044:	bl	140a0 <__assert_fail@plt+0x327c>
   14048:	push	{r4, r5, r6, lr}
   1404c:	mov	r6, r0
   14050:	add	r0, r1, #1
   14054:	mov	r4, r1
   14058:	bl	146b8 <__assert_fail@plt+0x3894>
   1405c:	subs	r5, r0, #0
   14060:	beq	14080 <__assert_fail@plt+0x325c>
   14064:	mov	r3, #0
   14068:	mov	r1, r6
   1406c:	strb	r3, [r5, r4]
   14070:	mov	r2, r4
   14074:	bl	10c44 <memcpy@plt>
   14078:	mov	r0, r5
   1407c:	pop	{r4, r5, r6, pc}
   14080:	bl	140a0 <__assert_fail@plt+0x327c>
   14084:	push	{r4, lr}
   14088:	mov	r4, r0
   1408c:	bl	10d64 <strlen@plt>
   14090:	add	r1, r0, #1
   14094:	mov	r0, r4
   14098:	pop	{r4, lr}
   1409c:	b	13fe0 <__assert_fail@plt+0x31bc>
   140a0:	ldr	r3, [pc, #44]	; 140d4 <__assert_fail@plt+0x32b0>
   140a4:	push	{r4, lr}
   140a8:	mov	r2, #5
   140ac:	ldr	r1, [pc, #36]	; 140d8 <__assert_fail@plt+0x32b4>
   140b0:	mov	r0, #0
   140b4:	ldr	r4, [r3]
   140b8:	bl	10c80 <dcgettext@plt>
   140bc:	ldr	r2, [pc, #24]	; 140dc <__assert_fail@plt+0x32b8>
   140c0:	mov	r1, #0
   140c4:	mov	r3, r0
   140c8:	mov	r0, r4
   140cc:	bl	10cf8 <error@plt>
   140d0:	bl	10e18 <abort@plt>
   140d4:	andeq	r6, r2, r0, ror #1
   140d8:	andeq	r5, r1, r4, lsr #20
   140dc:	andeq	r5, r1, ip, ror #11
   140e0:	push	{r4, r5, r6, lr}
   140e4:	subs	r6, r1, #0
   140e8:	mov	r4, r0
   140ec:	ldr	r5, [r0]
   140f0:	blt	14120 <__assert_fail@plt+0x32fc>
   140f4:	beq	14140 <__assert_fail@plt+0x331c>
   140f8:	cmp	r5, #0
   140fc:	blt	14174 <__assert_fail@plt+0x3350>
   14100:	mvn	r0, #-2147483648	; 0x80000000
   14104:	bl	14d88 <__assert_fail@plt+0x3f64>
   14108:	cmp	r5, r0
   1410c:	ble	14140 <__assert_fail@plt+0x331c>
   14110:	mvn	r3, #-2147483648	; 0x80000000
   14114:	str	r3, [r4]
   14118:	mov	r0, #1
   1411c:	pop	{r4, r5, r6, pc}
   14120:	cmp	r5, #0
   14124:	blt	14150 <__assert_fail@plt+0x332c>
   14128:	cmn	r6, #1
   1412c:	beq	14140 <__assert_fail@plt+0x331c>
   14130:	mov	r0, #-2147483648	; 0x80000000
   14134:	bl	14d88 <__assert_fail@plt+0x3f64>
   14138:	cmp	r5, r0
   1413c:	bgt	14110 <__assert_fail@plt+0x32ec>
   14140:	mul	r5, r6, r5
   14144:	mov	r0, #0
   14148:	str	r5, [r4]
   1414c:	pop	{r4, r5, r6, pc}
   14150:	mvn	r0, #-2147483648	; 0x80000000
   14154:	bl	14d88 <__assert_fail@plt+0x3f64>
   14158:	cmp	r5, r0
   1415c:	movge	r0, #0
   14160:	movlt	r0, #1
   14164:	cmp	r0, #0
   14168:	movne	r3, #-2147483648	; 0x80000000
   1416c:	bne	14114 <__assert_fail@plt+0x32f0>
   14170:	b	14140 <__assert_fail@plt+0x331c>
   14174:	cmn	r5, #1
   14178:	beq	14140 <__assert_fail@plt+0x331c>
   1417c:	mov	r1, r5
   14180:	mov	r0, #-2147483648	; 0x80000000
   14184:	bl	14d88 <__assert_fail@plt+0x3f64>
   14188:	cmp	r6, r0
   1418c:	movle	r0, #0
   14190:	movgt	r0, #1
   14194:	b	14164 <__assert_fail@plt+0x3340>
   14198:	cmp	r2, #36	; 0x24
   1419c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a0:	sub	sp, sp, #12
   141a4:	bhi	14650 <__assert_fail@plt+0x382c>
   141a8:	cmp	r1, #0
   141ac:	mov	r8, r1
   141b0:	mov	r5, r2
   141b4:	moveq	r8, sp
   141b8:	mov	r6, r0
   141bc:	mov	r9, r3
   141c0:	bl	10d7c <__errno_location@plt>
   141c4:	mov	r4, #0
   141c8:	mov	r2, r5
   141cc:	mov	r1, r8
   141d0:	str	r4, [r0]
   141d4:	mov	r7, r0
   141d8:	mov	r0, r6
   141dc:	bl	10c14 <strtol@plt>
   141e0:	ldr	r5, [r8]
   141e4:	cmp	r6, r5
   141e8:	str	r0, [sp, #4]
   141ec:	beq	1423c <__assert_fail@plt+0x3418>
   141f0:	ldr	r4, [r7]
   141f4:	cmp	r4, #0
   141f8:	bne	14224 <__assert_fail@plt+0x3400>
   141fc:	ldr	r3, [sp, #48]	; 0x30
   14200:	cmp	r3, #0
   14204:	beq	14214 <__assert_fail@plt+0x33f0>
   14208:	ldrb	r6, [r5]
   1420c:	cmp	r6, #0
   14210:	bne	14270 <__assert_fail@plt+0x344c>
   14214:	str	r0, [r9]
   14218:	mov	r0, r4
   1421c:	add	sp, sp, #12
   14220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14224:	cmp	r4, #34	; 0x22
   14228:	beq	14480 <__assert_fail@plt+0x365c>
   1422c:	mov	r4, #4
   14230:	mov	r0, r4
   14234:	add	sp, sp, #12
   14238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1423c:	ldr	r3, [sp, #48]	; 0x30
   14240:	cmp	r3, r4
   14244:	beq	1422c <__assert_fail@plt+0x3408>
   14248:	ldrb	r1, [r5]
   1424c:	cmp	r1, r4
   14250:	beq	1422c <__assert_fail@plt+0x3408>
   14254:	mov	r0, r3
   14258:	bl	10d70 <strchr@plt>
   1425c:	cmp	r0, r4
   14260:	beq	1422c <__assert_fail@plt+0x3408>
   14264:	ldrb	r6, [r5]
   14268:	mov	r3, #1
   1426c:	str	r3, [sp, #4]
   14270:	mov	r1, r6
   14274:	ldr	r0, [sp, #48]	; 0x30
   14278:	bl	10d70 <strchr@plt>
   1427c:	cmp	r0, #0
   14280:	beq	14640 <__assert_fail@plt+0x381c>
   14284:	sub	r3, r6, #69	; 0x45
   14288:	cmp	r3, #47	; 0x2f
   1428c:	ldrls	pc, [pc, r3, lsl #2]
   14290:	b	14354 <__assert_fail@plt+0x3530>
   14294:	andeq	r4, r1, r4, asr #8
   14298:	andeq	r4, r1, r4, asr r3
   1429c:	andeq	r4, r1, r4, asr #8
   142a0:	andeq	r4, r1, r4, asr r3
   142a4:	andeq	r4, r1, r4, asr r3
   142a8:	andeq	r4, r1, r4, asr r3
   142ac:	andeq	r4, r1, r4, asr #8
   142b0:	andeq	r4, r1, r4, asr r3
   142b4:	andeq	r4, r1, r4, asr #8
   142b8:	andeq	r4, r1, r4, asr r3
   142bc:	andeq	r4, r1, r4, asr r3
   142c0:	andeq	r4, r1, r4, asr #8
   142c4:	andeq	r4, r1, r4, asr r3
   142c8:	andeq	r4, r1, r4, asr r3
   142cc:	andeq	r4, r1, r4, asr r3
   142d0:	andeq	r4, r1, r4, asr #8
   142d4:	andeq	r4, r1, r4, asr r3
   142d8:	andeq	r4, r1, r4, asr r3
   142dc:	andeq	r4, r1, r4, asr r3
   142e0:	andeq	r4, r1, r4, asr r3
   142e4:	andeq	r4, r1, r4, asr #8
   142e8:	andeq	r4, r1, r4, asr #8
   142ec:	andeq	r4, r1, r4, asr r3
   142f0:	andeq	r4, r1, r4, asr r3
   142f4:	andeq	r4, r1, r4, asr r3
   142f8:	andeq	r4, r1, r4, asr r3
   142fc:	andeq	r4, r1, r4, asr r3
   14300:	andeq	r4, r1, r4, asr r3
   14304:	andeq	r4, r1, r4, asr r3
   14308:	andeq	r4, r1, r4, asr r3
   1430c:	andeq	r4, r1, r4, asr r3
   14310:	andeq	r4, r1, r4, asr r3
   14314:	andeq	r4, r1, r4, asr r3
   14318:	andeq	r4, r1, r4, asr r3
   1431c:	andeq	r4, r1, r4, asr #8
   14320:	andeq	r4, r1, r4, asr r3
   14324:	andeq	r4, r1, r4, asr r3
   14328:	andeq	r4, r1, r4, asr r3
   1432c:	andeq	r4, r1, r4, asr #8
   14330:	andeq	r4, r1, r4, asr r3
   14334:	andeq	r4, r1, r4, asr #8
   14338:	andeq	r4, r1, r4, asr r3
   1433c:	andeq	r4, r1, r4, asr r3
   14340:	andeq	r4, r1, r4, asr r3
   14344:	andeq	r4, r1, r4, asr r3
   14348:	andeq	r4, r1, r4, asr r3
   1434c:	andeq	r4, r1, r4, asr r3
   14350:	andeq	r4, r1, r4, asr #8
   14354:	mov	sl, #1
   14358:	mov	r7, #1024	; 0x400
   1435c:	sub	r6, r6, #66	; 0x42
   14360:	cmp	r6, #53	; 0x35
   14364:	ldrls	pc, [pc, r6, lsl #2]
   14368:	b	14640 <__assert_fail@plt+0x381c>
   1436c:	andeq	r4, r1, r8, asr r5
   14370:	andeq	r4, r1, r0, asr #12
   14374:	andeq	r4, r1, r0, asr #12
   14378:	andeq	r4, r1, r0, lsr r5
   1437c:	andeq	r4, r1, r0, asr #12
   14380:	andeq	r4, r1, r4, lsl #10
   14384:	andeq	r4, r1, r0, asr #12
   14388:	andeq	r4, r1, r0, asr #12
   1438c:	andeq	r4, r1, r0, asr #12
   14390:	andeq	r4, r1, ip, ror #9
   14394:	andeq	r4, r1, r0, asr #12
   14398:	andeq	r4, r1, r4, asr #9
   1439c:	andeq	r4, r1, r0, asr #12
   143a0:	andeq	r4, r1, r0, asr #12
   143a4:	andeq	r4, r1, r8, lsl r6
   143a8:	andeq	r4, r1, r0, asr #12
   143ac:	andeq	r4, r1, r0, asr #12
   143b0:	andeq	r4, r1, r0, asr #12
   143b4:	strdeq	r4, [r1], -r0
   143b8:	andeq	r4, r1, r0, asr #12
   143bc:	andeq	r4, r1, r0, asr #12
   143c0:	andeq	r4, r1, r0, asr #12
   143c4:	andeq	r4, r1, r0, asr #12
   143c8:	andeq	r4, r1, r8, asr #11
   143cc:	andeq	r4, r1, r0, lsr #11
   143d0:	andeq	r4, r1, r0, asr #12
   143d4:	andeq	r4, r1, r0, asr #12
   143d8:	andeq	r4, r1, r0, asr #12
   143dc:	andeq	r4, r1, r0, asr #12
   143e0:	andeq	r4, r1, r0, asr #12
   143e4:	andeq	r4, r1, r0, asr #12
   143e8:	andeq	r4, r1, r0, asr #12
   143ec:	andeq	r4, r1, r8, lsl #11
   143f0:	andeq	r4, r1, r0, lsr #9
   143f4:	andeq	r4, r1, r0, asr #12
   143f8:	andeq	r4, r1, r0, asr #12
   143fc:	andeq	r4, r1, r0, asr #12
   14400:	andeq	r4, r1, r4, lsl #10
   14404:	andeq	r4, r1, r0, asr #12
   14408:	andeq	r4, r1, r0, asr #12
   1440c:	andeq	r4, r1, r0, asr #12
   14410:	andeq	r4, r1, ip, ror #9
   14414:	andeq	r4, r1, r0, asr #12
   14418:	andeq	r4, r1, r4, asr #9
   1441c:	andeq	r4, r1, r0, asr #12
   14420:	andeq	r4, r1, r0, asr #12
   14424:	andeq	r4, r1, r0, asr #12
   14428:	andeq	r4, r1, r0, asr #12
   1442c:	andeq	r4, r1, r0, asr #12
   14430:	andeq	r4, r1, r0, asr #12
   14434:	strdeq	r4, [r1], -r0
   14438:	andeq	r4, r1, r0, asr #12
   1443c:	andeq	r4, r1, r0, asr #12
   14440:	andeq	r4, r1, r0, ror r5
   14444:	mov	r1, #48	; 0x30
   14448:	ldr	r0, [sp, #48]	; 0x30
   1444c:	bl	10d70 <strchr@plt>
   14450:	cmp	r0, #0
   14454:	beq	14354 <__assert_fail@plt+0x3530>
   14458:	ldrb	r3, [r5, #1]
   1445c:	cmp	r3, #68	; 0x44
   14460:	beq	14474 <__assert_fail@plt+0x3650>
   14464:	cmp	r3, #105	; 0x69
   14468:	beq	14488 <__assert_fail@plt+0x3664>
   1446c:	cmp	r3, #66	; 0x42
   14470:	bne	14354 <__assert_fail@plt+0x3530>
   14474:	mov	sl, #2
   14478:	mov	r7, #1000	; 0x3e8
   1447c:	b	1435c <__assert_fail@plt+0x3538>
   14480:	mov	r4, #1
   14484:	b	141fc <__assert_fail@plt+0x33d8>
   14488:	ldrb	sl, [r5, #2]
   1448c:	mov	r7, #1024	; 0x400
   14490:	cmp	sl, #66	; 0x42
   14494:	movne	sl, #1
   14498:	moveq	sl, #3
   1449c:	b	1435c <__assert_fail@plt+0x3538>
   144a0:	mov	r6, #0
   144a4:	add	r3, r5, sl
   144a8:	str	r3, [r8]
   144ac:	ldrb	r3, [r5, sl]
   144b0:	orr	r4, r4, r6
   144b4:	ldr	r0, [sp, #4]
   144b8:	cmp	r3, #0
   144bc:	orrne	r4, r4, #2
   144c0:	b	14214 <__assert_fail@plt+0x33f0>
   144c4:	mov	r1, r7
   144c8:	add	r0, sp, #4
   144cc:	bl	140e0 <__assert_fail@plt+0x32bc>
   144d0:	mov	r1, r7
   144d4:	mov	r6, r0
   144d8:	add	r0, sp, #4
   144dc:	bl	140e0 <__assert_fail@plt+0x32bc>
   144e0:	ldr	r5, [r8]
   144e4:	orr	r6, r6, r0
   144e8:	b	144a4 <__assert_fail@plt+0x3680>
   144ec:	mov	r1, r7
   144f0:	add	r0, sp, #4
   144f4:	bl	140e0 <__assert_fail@plt+0x32bc>
   144f8:	ldr	r5, [r8]
   144fc:	mov	r6, r0
   14500:	b	144a4 <__assert_fail@plt+0x3680>
   14504:	mov	fp, #3
   14508:	mov	r6, #0
   1450c:	add	r5, sp, #4
   14510:	mov	r1, r7
   14514:	mov	r0, r5
   14518:	bl	140e0 <__assert_fail@plt+0x32bc>
   1451c:	subs	fp, fp, #1
   14520:	orr	r6, r6, r0
   14524:	bne	14510 <__assert_fail@plt+0x36ec>
   14528:	ldr	r5, [r8]
   1452c:	b	144a4 <__assert_fail@plt+0x3680>
   14530:	mov	fp, #6
   14534:	mov	r6, #0
   14538:	add	r5, sp, #4
   1453c:	mov	r1, r7
   14540:	mov	r0, r5
   14544:	bl	140e0 <__assert_fail@plt+0x32bc>
   14548:	subs	fp, fp, #1
   1454c:	orr	r6, r6, r0
   14550:	bne	1453c <__assert_fail@plt+0x3718>
   14554:	b	14528 <__assert_fail@plt+0x3704>
   14558:	mov	r1, #1024	; 0x400
   1455c:	add	r0, sp, #4
   14560:	bl	140e0 <__assert_fail@plt+0x32bc>
   14564:	ldr	r5, [r8]
   14568:	mov	r6, r0
   1456c:	b	144a4 <__assert_fail@plt+0x3680>
   14570:	mov	r1, #2
   14574:	add	r0, sp, #4
   14578:	bl	140e0 <__assert_fail@plt+0x32bc>
   1457c:	ldr	r5, [r8]
   14580:	mov	r6, r0
   14584:	b	144a4 <__assert_fail@plt+0x3680>
   14588:	mov	r1, #512	; 0x200
   1458c:	add	r0, sp, #4
   14590:	bl	140e0 <__assert_fail@plt+0x32bc>
   14594:	ldr	r5, [r8]
   14598:	mov	r6, r0
   1459c:	b	144a4 <__assert_fail@plt+0x3680>
   145a0:	mov	fp, #7
   145a4:	mov	r6, #0
   145a8:	add	r5, sp, #4
   145ac:	mov	r1, r7
   145b0:	mov	r0, r5
   145b4:	bl	140e0 <__assert_fail@plt+0x32bc>
   145b8:	subs	fp, fp, #1
   145bc:	orr	r6, r6, r0
   145c0:	bne	145ac <__assert_fail@plt+0x3788>
   145c4:	b	14528 <__assert_fail@plt+0x3704>
   145c8:	mov	fp, #8
   145cc:	mov	r6, #0
   145d0:	add	r5, sp, #4
   145d4:	mov	r1, r7
   145d8:	mov	r0, r5
   145dc:	bl	140e0 <__assert_fail@plt+0x32bc>
   145e0:	subs	fp, fp, #1
   145e4:	orr	r6, r6, r0
   145e8:	bne	145d4 <__assert_fail@plt+0x37b0>
   145ec:	b	14528 <__assert_fail@plt+0x3704>
   145f0:	mov	fp, #4
   145f4:	mov	r6, #0
   145f8:	add	r5, sp, fp
   145fc:	mov	r1, r7
   14600:	mov	r0, r5
   14604:	bl	140e0 <__assert_fail@plt+0x32bc>
   14608:	subs	fp, fp, #1
   1460c:	orr	r6, r6, r0
   14610:	bne	145fc <__assert_fail@plt+0x37d8>
   14614:	b	14528 <__assert_fail@plt+0x3704>
   14618:	mov	fp, #5
   1461c:	mov	r6, #0
   14620:	add	r5, sp, #4
   14624:	mov	r1, r7
   14628:	mov	r0, r5
   1462c:	bl	140e0 <__assert_fail@plt+0x32bc>
   14630:	subs	fp, fp, #1
   14634:	orr	r6, r6, r0
   14638:	bne	14624 <__assert_fail@plt+0x3800>
   1463c:	b	14528 <__assert_fail@plt+0x3704>
   14640:	ldr	r3, [sp, #4]
   14644:	orr	r4, r4, #2
   14648:	str	r3, [r9]
   1464c:	b	14218 <__assert_fail@plt+0x33f4>
   14650:	ldr	r3, [pc, #12]	; 14664 <__assert_fail@plt+0x3840>
   14654:	mov	r2, #85	; 0x55
   14658:	ldr	r1, [pc, #8]	; 14668 <__assert_fail@plt+0x3844>
   1465c:	ldr	r0, [pc, #8]	; 1466c <__assert_fail@plt+0x3848>
   14660:	bl	10e24 <__assert_fail@plt>
   14664:	andeq	r5, r1, r8, lsr sl
   14668:	andeq	r5, r1, r0, asr #20
   1466c:	andeq	r5, r1, r0, asr sl
   14670:	cmp	r1, #0
   14674:	cmpne	r0, #0
   14678:	moveq	r1, #1
   1467c:	moveq	r0, r1
   14680:	umull	r2, r3, r0, r1
   14684:	adds	r3, r3, #0
   14688:	movne	r3, #1
   1468c:	cmp	r2, #0
   14690:	blt	146a0 <__assert_fail@plt+0x387c>
   14694:	cmp	r3, #0
   14698:	bne	146a0 <__assert_fail@plt+0x387c>
   1469c:	b	10be4 <calloc@plt>
   146a0:	push	{r4, lr}
   146a4:	bl	10d7c <__errno_location@plt>
   146a8:	mov	r3, #12
   146ac:	str	r3, [r0]
   146b0:	mov	r0, #0
   146b4:	pop	{r4, pc}
   146b8:	cmp	r0, #0
   146bc:	moveq	r0, #1
   146c0:	cmp	r0, #0
   146c4:	blt	146cc <__assert_fail@plt+0x38a8>
   146c8:	b	10d10 <malloc@plt>
   146cc:	push	{r4, lr}
   146d0:	bl	10d7c <__errno_location@plt>
   146d4:	mov	r3, #12
   146d8:	str	r3, [r0]
   146dc:	mov	r0, #0
   146e0:	pop	{r4, pc}
   146e4:	cmp	r0, #0
   146e8:	beq	1470c <__assert_fail@plt+0x38e8>
   146ec:	cmp	r1, #0
   146f0:	push	{lr}		; (str lr, [sp, #-4]!)
   146f4:	sub	sp, sp, #12
   146f8:	beq	14714 <__assert_fail@plt+0x38f0>
   146fc:	blt	1472c <__assert_fail@plt+0x3908>
   14700:	add	sp, sp, #12
   14704:	pop	{lr}		; (ldr lr, [sp], #4)
   14708:	b	10c8c <realloc@plt>
   1470c:	mov	r0, r1
   14710:	b	146b8 <__assert_fail@plt+0x3894>
   14714:	str	r1, [sp, #4]
   14718:	bl	148bc <__assert_fail@plt+0x3a98>
   1471c:	ldr	r3, [sp, #4]
   14720:	mov	r0, r3
   14724:	add	sp, sp, #12
   14728:	pop	{pc}		; (ldr pc, [sp], #4)
   1472c:	bl	10d7c <__errno_location@plt>
   14730:	mov	r2, #12
   14734:	mov	r3, #0
   14738:	str	r2, [r0]
   1473c:	b	14720 <__assert_fail@plt+0x38fc>
   14740:	push	{r4, r5, r6, lr}
   14744:	mov	r4, r0
   14748:	bl	10ce0 <__fpending@plt>
   1474c:	ldr	r5, [r4]
   14750:	and	r5, r5, #32
   14754:	mov	r6, r0
   14758:	mov	r0, r4
   1475c:	bl	147bc <__assert_fail@plt+0x3998>
   14760:	cmp	r5, #0
   14764:	mov	r4, r0
   14768:	bne	14788 <__assert_fail@plt+0x3964>
   1476c:	cmp	r0, #0
   14770:	beq	14780 <__assert_fail@plt+0x395c>
   14774:	cmp	r6, #0
   14778:	beq	147a4 <__assert_fail@plt+0x3980>
   1477c:	mvn	r4, #0
   14780:	mov	r0, r4
   14784:	pop	{r4, r5, r6, pc}
   14788:	cmp	r0, #0
   1478c:	bne	1477c <__assert_fail@plt+0x3958>
   14790:	bl	10d7c <__errno_location@plt>
   14794:	str	r4, [r0]
   14798:	mvn	r4, #0
   1479c:	mov	r0, r4
   147a0:	pop	{r4, r5, r6, pc}
   147a4:	bl	10d7c <__errno_location@plt>
   147a8:	ldr	r4, [r0]
   147ac:	subs	r4, r4, #9
   147b0:	mvnne	r4, #0
   147b4:	mov	r0, r4
   147b8:	pop	{r4, r5, r6, pc}
   147bc:	push	{r4, r5, lr}
   147c0:	sub	sp, sp, #12
   147c4:	mov	r4, r0
   147c8:	bl	10dac <fileno@plt>
   147cc:	cmp	r0, #0
   147d0:	mov	r0, r4
   147d4:	blt	14850 <__assert_fail@plt+0x3a2c>
   147d8:	bl	10d28 <__freading@plt>
   147dc:	cmp	r0, #0
   147e0:	bne	1481c <__assert_fail@plt+0x39f8>
   147e4:	mov	r0, r4
   147e8:	bl	1485c <__assert_fail@plt+0x3a38>
   147ec:	cmp	r0, #0
   147f0:	beq	1484c <__assert_fail@plt+0x3a28>
   147f4:	bl	10d7c <__errno_location@plt>
   147f8:	mov	r5, r0
   147fc:	mov	r0, r4
   14800:	ldr	r4, [r5]
   14804:	bl	10dc4 <fclose@plt>
   14808:	cmp	r4, #0
   1480c:	mvnne	r0, #0
   14810:	strne	r4, [r5]
   14814:	add	sp, sp, #12
   14818:	pop	{r4, r5, pc}
   1481c:	mov	r0, r4
   14820:	bl	10dac <fileno@plt>
   14824:	mov	r3, #1
   14828:	str	r3, [sp]
   1482c:	mov	r2, #0
   14830:	mov	r3, #0
   14834:	bl	10cc8 <lseek64@plt>
   14838:	mvn	r3, #0
   1483c:	mvn	r2, #0
   14840:	cmp	r1, r3
   14844:	cmpeq	r0, r2
   14848:	bne	147e4 <__assert_fail@plt+0x39c0>
   1484c:	mov	r0, r4
   14850:	add	sp, sp, #12
   14854:	pop	{r4, r5, lr}
   14858:	b	10dc4 <fclose@plt>
   1485c:	push	{r4, lr}
   14860:	subs	r4, r0, #0
   14864:	sub	sp, sp, #8
   14868:	beq	14884 <__assert_fail@plt+0x3a60>
   1486c:	bl	10d28 <__freading@plt>
   14870:	cmp	r0, #0
   14874:	beq	14884 <__assert_fail@plt+0x3a60>
   14878:	ldr	r3, [r4]
   1487c:	tst	r3, #256	; 0x100
   14880:	bne	14894 <__assert_fail@plt+0x3a70>
   14884:	mov	r0, r4
   14888:	add	sp, sp, #8
   1488c:	pop	{r4, lr}
   14890:	b	10c20 <fflush@plt>
   14894:	mov	r3, #1
   14898:	str	r3, [sp]
   1489c:	mov	r2, #0
   148a0:	mov	r3, #0
   148a4:	mov	r0, r4
   148a8:	bl	14914 <__assert_fail@plt+0x3af0>
   148ac:	mov	r0, r4
   148b0:	add	sp, sp, #8
   148b4:	pop	{r4, lr}
   148b8:	b	10c20 <fflush@plt>
   148bc:	push	{r4, r5, lr}
   148c0:	sub	sp, sp, #12
   148c4:	mov	r5, r0
   148c8:	bl	10d7c <__errno_location@plt>
   148cc:	mov	r2, #0
   148d0:	mov	r4, r0
   148d4:	ldr	r3, [r0]
   148d8:	str	r2, [r4]
   148dc:	mov	r0, r5
   148e0:	str	r3, [sp]
   148e4:	str	r3, [sp, #4]
   148e8:	bl	10c2c <free@plt>
   148ec:	ldr	r3, [r4]
   148f0:	add	r2, sp, #8
   148f4:	cmp	r3, #0
   148f8:	moveq	r3, #4
   148fc:	movne	r3, #0
   14900:	add	r3, r2, r3
   14904:	ldr	r3, [r3, #-8]
   14908:	str	r3, [r4]
   1490c:	add	sp, sp, #12
   14910:	pop	{r4, r5, pc}
   14914:	push	{r4, r5, r6, r7, r8, lr}
   14918:	sub	sp, sp, #8
   1491c:	ldmib	r0, {ip, lr}
   14920:	mov	r4, r0
   14924:	ldr	r5, [sp, #32]
   14928:	cmp	lr, ip
   1492c:	beq	14944 <__assert_fail@plt+0x3b20>
   14930:	str	r5, [sp, #32]
   14934:	mov	r0, r4
   14938:	add	sp, sp, #8
   1493c:	pop	{r4, r5, r6, r7, r8, lr}
   14940:	b	10dd0 <fseeko64@plt>
   14944:	ldr	lr, [r0, #20]
   14948:	ldr	ip, [r0, #16]
   1494c:	cmp	lr, ip
   14950:	bne	14930 <__assert_fail@plt+0x3b0c>
   14954:	ldr	r8, [r0, #36]	; 0x24
   14958:	cmp	r8, #0
   1495c:	bne	14930 <__assert_fail@plt+0x3b0c>
   14960:	mov	r6, r2
   14964:	mov	r7, r3
   14968:	bl	10dac <fileno@plt>
   1496c:	mov	r2, r6
   14970:	mov	r3, r7
   14974:	str	r5, [sp]
   14978:	bl	10cc8 <lseek64@plt>
   1497c:	mvn	r3, #0
   14980:	mvn	r2, #0
   14984:	cmp	r1, r3
   14988:	cmpeq	r0, r2
   1498c:	beq	149ac <__assert_fail@plt+0x3b88>
   14990:	ldr	r3, [r4]
   14994:	strd	r0, [r4, #80]	; 0x50
   14998:	mov	r0, r8
   1499c:	bic	r3, r3, #16
   149a0:	str	r3, [r4]
   149a4:	add	sp, sp, #8
   149a8:	pop	{r4, r5, r6, r7, r8, pc}
   149ac:	mvn	r0, #0
   149b0:	b	149a4 <__assert_fail@plt+0x3b80>
   149b4:	push	{r4, lr}
   149b8:	mov	r0, #14
   149bc:	bl	10df4 <nl_langinfo@plt>
   149c0:	cmp	r0, #0
   149c4:	beq	149dc <__assert_fail@plt+0x3bb8>
   149c8:	ldrb	r2, [r0]
   149cc:	ldr	r3, [pc, #16]	; 149e4 <__assert_fail@plt+0x3bc0>
   149d0:	cmp	r2, #0
   149d4:	moveq	r0, r3
   149d8:	pop	{r4, pc}
   149dc:	ldr	r0, [pc]	; 149e4 <__assert_fail@plt+0x3bc0>
   149e0:	pop	{r4, pc}
   149e4:	andeq	r5, r1, r8, ror sl
   149e8:	push	{r4, r5, r6, r7, lr}
   149ec:	subs	r6, r0, #0
   149f0:	sub	sp, sp, #12
   149f4:	addeq	r6, sp, #4
   149f8:	mov	r0, r6
   149fc:	mov	r5, r2
   14a00:	mov	r7, r1
   14a04:	bl	10cec <mbrtowc@plt>
   14a08:	cmp	r5, #0
   14a0c:	cmnne	r0, #3
   14a10:	mov	r4, r0
   14a14:	bls	14a30 <__assert_fail@plt+0x3c0c>
   14a18:	mov	r0, #0
   14a1c:	bl	14a88 <__assert_fail@plt+0x3c64>
   14a20:	cmp	r0, #0
   14a24:	moveq	r4, #1
   14a28:	ldrbeq	r3, [r7]
   14a2c:	streq	r3, [r6]
   14a30:	mov	r0, r4
   14a34:	add	sp, sp, #12
   14a38:	pop	{r4, r5, r6, r7, pc}
   14a3c:	push	{r4, r5, r6, lr}
   14a40:	subs	r4, r2, #0
   14a44:	mov	r6, r0
   14a48:	mov	r5, r1
   14a4c:	beq	14a78 <__assert_fail@plt+0x3c54>
   14a50:	mov	r1, r4
   14a54:	mvn	r0, #0
   14a58:	bl	14b7c <__assert_fail@plt+0x3d58>
   14a5c:	cmp	r0, r5
   14a60:	bcs	14a78 <__assert_fail@plt+0x3c54>
   14a64:	bl	10d7c <__errno_location@plt>
   14a68:	mov	r3, #12
   14a6c:	str	r3, [r0]
   14a70:	mov	r0, #0
   14a74:	pop	{r4, r5, r6, pc}
   14a78:	mul	r1, r5, r4
   14a7c:	mov	r0, r6
   14a80:	pop	{r4, r5, r6, lr}
   14a84:	b	146e4 <__assert_fail@plt+0x38c0>
   14a88:	push	{lr}		; (str lr, [sp, #-4]!)
   14a8c:	sub	sp, sp, #268	; 0x10c
   14a90:	add	r1, sp, #4
   14a94:	ldr	r2, [pc, #60]	; 14ad8 <__assert_fail@plt+0x3cb4>
   14a98:	bl	14ae4 <__assert_fail@plt+0x3cc0>
   14a9c:	cmp	r0, #0
   14aa0:	movne	r0, #0
   14aa4:	bne	14ad0 <__assert_fail@plt+0x3cac>
   14aa8:	ldr	r1, [pc, #44]	; 14adc <__assert_fail@plt+0x3cb8>
   14aac:	add	r0, sp, #4
   14ab0:	bl	10c08 <strcmp@plt>
   14ab4:	cmp	r0, #0
   14ab8:	beq	14ad0 <__assert_fail@plt+0x3cac>
   14abc:	add	r0, sp, #4
   14ac0:	ldr	r1, [pc, #24]	; 14ae0 <__assert_fail@plt+0x3cbc>
   14ac4:	bl	10c08 <strcmp@plt>
   14ac8:	adds	r0, r0, #0
   14acc:	movne	r0, #1
   14ad0:	add	sp, sp, #268	; 0x10c
   14ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad8:	andeq	r0, r0, r1, lsl #2
   14adc:	andeq	r5, r1, r0, lsl #21
   14ae0:	andeq	r5, r1, r4, lsl #21
   14ae4:	push	{r4, r5, r6, lr}
   14ae8:	mov	r5, r1
   14aec:	mov	r1, #0
   14af0:	mov	r4, r2
   14af4:	bl	10ddc <setlocale@plt>
   14af8:	subs	r6, r0, #0
   14afc:	beq	14b58 <__assert_fail@plt+0x3d34>
   14b00:	bl	10d64 <strlen@plt>
   14b04:	cmp	r4, r0
   14b08:	bhi	14b40 <__assert_fail@plt+0x3d1c>
   14b0c:	cmp	r4, #0
   14b10:	bne	14b1c <__assert_fail@plt+0x3cf8>
   14b14:	mov	r0, #34	; 0x22
   14b18:	pop	{r4, r5, r6, pc}
   14b1c:	sub	r4, r4, #1
   14b20:	mov	r1, r6
   14b24:	mov	r2, r4
   14b28:	mov	r0, r5
   14b2c:	bl	10c44 <memcpy@plt>
   14b30:	mov	r3, #0
   14b34:	strb	r3, [r5, r4]
   14b38:	mov	r0, #34	; 0x22
   14b3c:	pop	{r4, r5, r6, pc}
   14b40:	add	r2, r0, #1
   14b44:	mov	r1, r6
   14b48:	mov	r0, r5
   14b4c:	bl	10c44 <memcpy@plt>
   14b50:	mov	r0, #0
   14b54:	pop	{r4, r5, r6, pc}
   14b58:	cmp	r4, #0
   14b5c:	beq	14b6c <__assert_fail@plt+0x3d48>
   14b60:	strb	r6, [r5]
   14b64:	mov	r0, #22
   14b68:	pop	{r4, r5, r6, pc}
   14b6c:	mov	r0, #22
   14b70:	pop	{r4, r5, r6, pc}
   14b74:	mov	r1, #0
   14b78:	b	10ddc <setlocale@plt>
   14b7c:	subs	r2, r1, #1
   14b80:	bxeq	lr
   14b84:	bcc	14d5c <__assert_fail@plt+0x3f38>
   14b88:	cmp	r0, r1
   14b8c:	bls	14d40 <__assert_fail@plt+0x3f1c>
   14b90:	tst	r1, r2
   14b94:	beq	14d4c <__assert_fail@plt+0x3f28>
   14b98:	clz	r3, r0
   14b9c:	clz	r2, r1
   14ba0:	sub	r3, r2, r3
   14ba4:	rsbs	r3, r3, #31
   14ba8:	addne	r3, r3, r3, lsl #1
   14bac:	mov	r2, #0
   14bb0:	addne	pc, pc, r3, lsl #2
   14bb4:	nop			; (mov r0, r0)
   14bb8:	cmp	r0, r1, lsl #31
   14bbc:	adc	r2, r2, r2
   14bc0:	subcs	r0, r0, r1, lsl #31
   14bc4:	cmp	r0, r1, lsl #30
   14bc8:	adc	r2, r2, r2
   14bcc:	subcs	r0, r0, r1, lsl #30
   14bd0:	cmp	r0, r1, lsl #29
   14bd4:	adc	r2, r2, r2
   14bd8:	subcs	r0, r0, r1, lsl #29
   14bdc:	cmp	r0, r1, lsl #28
   14be0:	adc	r2, r2, r2
   14be4:	subcs	r0, r0, r1, lsl #28
   14be8:	cmp	r0, r1, lsl #27
   14bec:	adc	r2, r2, r2
   14bf0:	subcs	r0, r0, r1, lsl #27
   14bf4:	cmp	r0, r1, lsl #26
   14bf8:	adc	r2, r2, r2
   14bfc:	subcs	r0, r0, r1, lsl #26
   14c00:	cmp	r0, r1, lsl #25
   14c04:	adc	r2, r2, r2
   14c08:	subcs	r0, r0, r1, lsl #25
   14c0c:	cmp	r0, r1, lsl #24
   14c10:	adc	r2, r2, r2
   14c14:	subcs	r0, r0, r1, lsl #24
   14c18:	cmp	r0, r1, lsl #23
   14c1c:	adc	r2, r2, r2
   14c20:	subcs	r0, r0, r1, lsl #23
   14c24:	cmp	r0, r1, lsl #22
   14c28:	adc	r2, r2, r2
   14c2c:	subcs	r0, r0, r1, lsl #22
   14c30:	cmp	r0, r1, lsl #21
   14c34:	adc	r2, r2, r2
   14c38:	subcs	r0, r0, r1, lsl #21
   14c3c:	cmp	r0, r1, lsl #20
   14c40:	adc	r2, r2, r2
   14c44:	subcs	r0, r0, r1, lsl #20
   14c48:	cmp	r0, r1, lsl #19
   14c4c:	adc	r2, r2, r2
   14c50:	subcs	r0, r0, r1, lsl #19
   14c54:	cmp	r0, r1, lsl #18
   14c58:	adc	r2, r2, r2
   14c5c:	subcs	r0, r0, r1, lsl #18
   14c60:	cmp	r0, r1, lsl #17
   14c64:	adc	r2, r2, r2
   14c68:	subcs	r0, r0, r1, lsl #17
   14c6c:	cmp	r0, r1, lsl #16
   14c70:	adc	r2, r2, r2
   14c74:	subcs	r0, r0, r1, lsl #16
   14c78:	cmp	r0, r1, lsl #15
   14c7c:	adc	r2, r2, r2
   14c80:	subcs	r0, r0, r1, lsl #15
   14c84:	cmp	r0, r1, lsl #14
   14c88:	adc	r2, r2, r2
   14c8c:	subcs	r0, r0, r1, lsl #14
   14c90:	cmp	r0, r1, lsl #13
   14c94:	adc	r2, r2, r2
   14c98:	subcs	r0, r0, r1, lsl #13
   14c9c:	cmp	r0, r1, lsl #12
   14ca0:	adc	r2, r2, r2
   14ca4:	subcs	r0, r0, r1, lsl #12
   14ca8:	cmp	r0, r1, lsl #11
   14cac:	adc	r2, r2, r2
   14cb0:	subcs	r0, r0, r1, lsl #11
   14cb4:	cmp	r0, r1, lsl #10
   14cb8:	adc	r2, r2, r2
   14cbc:	subcs	r0, r0, r1, lsl #10
   14cc0:	cmp	r0, r1, lsl #9
   14cc4:	adc	r2, r2, r2
   14cc8:	subcs	r0, r0, r1, lsl #9
   14ccc:	cmp	r0, r1, lsl #8
   14cd0:	adc	r2, r2, r2
   14cd4:	subcs	r0, r0, r1, lsl #8
   14cd8:	cmp	r0, r1, lsl #7
   14cdc:	adc	r2, r2, r2
   14ce0:	subcs	r0, r0, r1, lsl #7
   14ce4:	cmp	r0, r1, lsl #6
   14ce8:	adc	r2, r2, r2
   14cec:	subcs	r0, r0, r1, lsl #6
   14cf0:	cmp	r0, r1, lsl #5
   14cf4:	adc	r2, r2, r2
   14cf8:	subcs	r0, r0, r1, lsl #5
   14cfc:	cmp	r0, r1, lsl #4
   14d00:	adc	r2, r2, r2
   14d04:	subcs	r0, r0, r1, lsl #4
   14d08:	cmp	r0, r1, lsl #3
   14d0c:	adc	r2, r2, r2
   14d10:	subcs	r0, r0, r1, lsl #3
   14d14:	cmp	r0, r1, lsl #2
   14d18:	adc	r2, r2, r2
   14d1c:	subcs	r0, r0, r1, lsl #2
   14d20:	cmp	r0, r1, lsl #1
   14d24:	adc	r2, r2, r2
   14d28:	subcs	r0, r0, r1, lsl #1
   14d2c:	cmp	r0, r1
   14d30:	adc	r2, r2, r2
   14d34:	subcs	r0, r0, r1
   14d38:	mov	r0, r2
   14d3c:	bx	lr
   14d40:	moveq	r0, #1
   14d44:	movne	r0, #0
   14d48:	bx	lr
   14d4c:	clz	r2, r1
   14d50:	rsb	r2, r2, #31
   14d54:	lsr	r0, r0, r2
   14d58:	bx	lr
   14d5c:	cmp	r0, #0
   14d60:	mvnne	r0, #0
   14d64:	b	14fc8 <__assert_fail@plt+0x41a4>
   14d68:	cmp	r1, #0
   14d6c:	beq	14d5c <__assert_fail@plt+0x3f38>
   14d70:	push	{r0, r1, lr}
   14d74:	bl	14b7c <__assert_fail@plt+0x3d58>
   14d78:	pop	{r1, r2, lr}
   14d7c:	mul	r3, r2, r0
   14d80:	sub	r1, r1, r3
   14d84:	bx	lr
   14d88:	cmp	r1, #0
   14d8c:	beq	14f98 <__assert_fail@plt+0x4174>
   14d90:	eor	ip, r0, r1
   14d94:	rsbmi	r1, r1, #0
   14d98:	subs	r2, r1, #1
   14d9c:	beq	14f64 <__assert_fail@plt+0x4140>
   14da0:	movs	r3, r0
   14da4:	rsbmi	r3, r0, #0
   14da8:	cmp	r3, r1
   14dac:	bls	14f70 <__assert_fail@plt+0x414c>
   14db0:	tst	r1, r2
   14db4:	beq	14f80 <__assert_fail@plt+0x415c>
   14db8:	clz	r2, r3
   14dbc:	clz	r0, r1
   14dc0:	sub	r2, r0, r2
   14dc4:	rsbs	r2, r2, #31
   14dc8:	addne	r2, r2, r2, lsl #1
   14dcc:	mov	r0, #0
   14dd0:	addne	pc, pc, r2, lsl #2
   14dd4:	nop			; (mov r0, r0)
   14dd8:	cmp	r3, r1, lsl #31
   14ddc:	adc	r0, r0, r0
   14de0:	subcs	r3, r3, r1, lsl #31
   14de4:	cmp	r3, r1, lsl #30
   14de8:	adc	r0, r0, r0
   14dec:	subcs	r3, r3, r1, lsl #30
   14df0:	cmp	r3, r1, lsl #29
   14df4:	adc	r0, r0, r0
   14df8:	subcs	r3, r3, r1, lsl #29
   14dfc:	cmp	r3, r1, lsl #28
   14e00:	adc	r0, r0, r0
   14e04:	subcs	r3, r3, r1, lsl #28
   14e08:	cmp	r3, r1, lsl #27
   14e0c:	adc	r0, r0, r0
   14e10:	subcs	r3, r3, r1, lsl #27
   14e14:	cmp	r3, r1, lsl #26
   14e18:	adc	r0, r0, r0
   14e1c:	subcs	r3, r3, r1, lsl #26
   14e20:	cmp	r3, r1, lsl #25
   14e24:	adc	r0, r0, r0
   14e28:	subcs	r3, r3, r1, lsl #25
   14e2c:	cmp	r3, r1, lsl #24
   14e30:	adc	r0, r0, r0
   14e34:	subcs	r3, r3, r1, lsl #24
   14e38:	cmp	r3, r1, lsl #23
   14e3c:	adc	r0, r0, r0
   14e40:	subcs	r3, r3, r1, lsl #23
   14e44:	cmp	r3, r1, lsl #22
   14e48:	adc	r0, r0, r0
   14e4c:	subcs	r3, r3, r1, lsl #22
   14e50:	cmp	r3, r1, lsl #21
   14e54:	adc	r0, r0, r0
   14e58:	subcs	r3, r3, r1, lsl #21
   14e5c:	cmp	r3, r1, lsl #20
   14e60:	adc	r0, r0, r0
   14e64:	subcs	r3, r3, r1, lsl #20
   14e68:	cmp	r3, r1, lsl #19
   14e6c:	adc	r0, r0, r0
   14e70:	subcs	r3, r3, r1, lsl #19
   14e74:	cmp	r3, r1, lsl #18
   14e78:	adc	r0, r0, r0
   14e7c:	subcs	r3, r3, r1, lsl #18
   14e80:	cmp	r3, r1, lsl #17
   14e84:	adc	r0, r0, r0
   14e88:	subcs	r3, r3, r1, lsl #17
   14e8c:	cmp	r3, r1, lsl #16
   14e90:	adc	r0, r0, r0
   14e94:	subcs	r3, r3, r1, lsl #16
   14e98:	cmp	r3, r1, lsl #15
   14e9c:	adc	r0, r0, r0
   14ea0:	subcs	r3, r3, r1, lsl #15
   14ea4:	cmp	r3, r1, lsl #14
   14ea8:	adc	r0, r0, r0
   14eac:	subcs	r3, r3, r1, lsl #14
   14eb0:	cmp	r3, r1, lsl #13
   14eb4:	adc	r0, r0, r0
   14eb8:	subcs	r3, r3, r1, lsl #13
   14ebc:	cmp	r3, r1, lsl #12
   14ec0:	adc	r0, r0, r0
   14ec4:	subcs	r3, r3, r1, lsl #12
   14ec8:	cmp	r3, r1, lsl #11
   14ecc:	adc	r0, r0, r0
   14ed0:	subcs	r3, r3, r1, lsl #11
   14ed4:	cmp	r3, r1, lsl #10
   14ed8:	adc	r0, r0, r0
   14edc:	subcs	r3, r3, r1, lsl #10
   14ee0:	cmp	r3, r1, lsl #9
   14ee4:	adc	r0, r0, r0
   14ee8:	subcs	r3, r3, r1, lsl #9
   14eec:	cmp	r3, r1, lsl #8
   14ef0:	adc	r0, r0, r0
   14ef4:	subcs	r3, r3, r1, lsl #8
   14ef8:	cmp	r3, r1, lsl #7
   14efc:	adc	r0, r0, r0
   14f00:	subcs	r3, r3, r1, lsl #7
   14f04:	cmp	r3, r1, lsl #6
   14f08:	adc	r0, r0, r0
   14f0c:	subcs	r3, r3, r1, lsl #6
   14f10:	cmp	r3, r1, lsl #5
   14f14:	adc	r0, r0, r0
   14f18:	subcs	r3, r3, r1, lsl #5
   14f1c:	cmp	r3, r1, lsl #4
   14f20:	adc	r0, r0, r0
   14f24:	subcs	r3, r3, r1, lsl #4
   14f28:	cmp	r3, r1, lsl #3
   14f2c:	adc	r0, r0, r0
   14f30:	subcs	r3, r3, r1, lsl #3
   14f34:	cmp	r3, r1, lsl #2
   14f38:	adc	r0, r0, r0
   14f3c:	subcs	r3, r3, r1, lsl #2
   14f40:	cmp	r3, r1, lsl #1
   14f44:	adc	r0, r0, r0
   14f48:	subcs	r3, r3, r1, lsl #1
   14f4c:	cmp	r3, r1
   14f50:	adc	r0, r0, r0
   14f54:	subcs	r3, r3, r1
   14f58:	cmp	ip, #0
   14f5c:	rsbmi	r0, r0, #0
   14f60:	bx	lr
   14f64:	teq	ip, r0
   14f68:	rsbmi	r0, r0, #0
   14f6c:	bx	lr
   14f70:	movcc	r0, #0
   14f74:	asreq	r0, ip, #31
   14f78:	orreq	r0, r0, #1
   14f7c:	bx	lr
   14f80:	clz	r2, r1
   14f84:	rsb	r2, r2, #31
   14f88:	cmp	ip, #0
   14f8c:	lsr	r0, r3, r2
   14f90:	rsbmi	r0, r0, #0
   14f94:	bx	lr
   14f98:	cmp	r0, #0
   14f9c:	mvngt	r0, #-2147483648	; 0x80000000
   14fa0:	movlt	r0, #-2147483648	; 0x80000000
   14fa4:	b	14fc8 <__assert_fail@plt+0x41a4>
   14fa8:	cmp	r1, #0
   14fac:	beq	14f98 <__assert_fail@plt+0x4174>
   14fb0:	push	{r0, r1, lr}
   14fb4:	bl	14d90 <__assert_fail@plt+0x3f6c>
   14fb8:	pop	{r1, r2, lr}
   14fbc:	mul	r3, r2, r0
   14fc0:	sub	r1, r1, r3
   14fc4:	bx	lr
   14fc8:	push	{r1, lr}
   14fcc:	mov	r0, #8
   14fd0:	bl	10bfc <raise@plt>
   14fd4:	pop	{r1, pc}
   14fd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14fdc:	mov	r7, r0
   14fe0:	ldr	r6, [pc, #72]	; 15030 <__assert_fail@plt+0x420c>
   14fe4:	ldr	r5, [pc, #72]	; 15034 <__assert_fail@plt+0x4210>
   14fe8:	add	r6, pc, r6
   14fec:	add	r5, pc, r5
   14ff0:	sub	r6, r6, r5
   14ff4:	mov	r8, r1
   14ff8:	mov	r9, r2
   14ffc:	bl	10bc4 <calloc@plt-0x20>
   15000:	asrs	r6, r6, #2
   15004:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15008:	mov	r4, #0
   1500c:	add	r4, r4, #1
   15010:	ldr	r3, [r5], #4
   15014:	mov	r2, r9
   15018:	mov	r1, r8
   1501c:	mov	r0, r7
   15020:	blx	r3
   15024:	cmp	r6, r4
   15028:	bne	1500c <__assert_fail@plt+0x41e8>
   1502c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15030:	andeq	r0, r1, r0, lsr #30
   15034:	andeq	r0, r1, r8, lsl pc
   15038:	bx	lr
   1503c:	ldr	r3, [pc, #12]	; 15050 <__assert_fail@plt+0x422c>
   15040:	mov	r1, #0
   15044:	add	r3, pc, r3
   15048:	ldr	r2, [r3]
   1504c:	b	10d88 <__cxa_atexit@plt>
   15050:	andeq	r1, r1, ip, lsl #1

Disassembly of section .fini:

00015054 <.fini>:
   15054:	push	{r3, lr}
   15058:	pop	{r3, pc}
