
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

000111f8 <.init>:
   111f8:	push	{r3, lr}
   111fc:	bl	115ac <__assert_fail@plt+0x4c>
   11200:	pop	{r3, pc}

Disassembly of section .plt:

00011204 <fstatfs64@plt-0x14>:
   11204:	push	{lr}		; (str lr, [sp, #-4]!)
   11208:	ldr	lr, [pc, #4]	; 11214 <fstatfs64@plt-0x4>
   1120c:	add	lr, pc, lr
   11210:	ldr	pc, [lr, #8]!
   11214:	andeq	sl, r1, ip, ror #27

00011218 <fstatfs64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3564]!	; 0xdec

00011224 <calloc@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3556]!	; 0xde4

00011230 <endgrent@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3548]!	; 0xddc

0001123c <fputs_unlocked@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3540]!	; 0xdd4

00011248 <raise@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3532]!	; 0xdcc

00011254 <getpwnam@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011260 <strcmp@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3516]!	; 0xdbc

0001126c <getpwuid@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3508]!	; 0xdb4

00011278 <fflush@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3500]!	; 0xdac

00011284 <memmove@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3492]!	; 0xda4

00011290 <free@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3484]!	; 0xd9c

0001129c <_exit@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3476]!	; 0xd94

000112a8 <memcpy@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112b4 <mbsinit@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3460]!	; 0xd84

000112c0 <memcmp@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3452]!	; 0xd7c

000112cc <stpcpy@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3444]!	; 0xd74

000112d8 <dcgettext@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3436]!	; 0xd6c

000112e4 <realloc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3428]!	; 0xd64

000112f0 <textdomain@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3420]!	; 0xd5c

000112fc <__fxstatat64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3412]!	; 0xd54

00011308 <iswprint@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3404]!	; 0xd4c

00011314 <__fxstat64@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3396]!	; 0xd44

00011320 <fwrite@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3388]!	; 0xd3c

0001132c <lseek64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3380]!	; 0xd34

00011338 <__ctype_get_mb_cur_max@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3372]!	; 0xd2c

00011344 <__fpending@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3364]!	; 0xd24

00011350 <ferror_unlocked@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3356]!	; 0xd1c

0001135c <mbrtowc@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3348]!	; 0xd14

00011368 <error@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3340]!	; 0xd0c

00011374 <open64@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3332]!	; 0xd04

00011380 <malloc@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3324]!	; 0xcfc

0001138c <__libc_start_main@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3316]!	; 0xcf4

00011398 <__freading@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3308]!	; 0xcec

000113a4 <__gmon_start__@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3300]!	; 0xce4

000113b0 <getopt_long@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113bc <__ctype_b_loc@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3284]!	; 0xcd4

000113c8 <exit@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3276]!	; 0xccc

000113d4 <strtoul@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3268]!	; 0xcc4

000113e0 <strlen@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #106496	; 0x1a000
   113e8:	ldr	pc, [ip, #3260]!	; 0xcbc

000113ec <strchr@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #106496	; 0x1a000
   113f4:	ldr	pc, [ip, #3252]!	; 0xcb4

000113f8 <openat64@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #106496	; 0x1a000
   11400:	ldr	pc, [ip, #3244]!	; 0xcac

00011404 <fchown@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #106496	; 0x1a000
   1140c:	ldr	pc, [ip, #3236]!	; 0xca4

00011410 <__errno_location@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #106496	; 0x1a000
   11418:	ldr	pc, [ip, #3228]!	; 0xc9c

0001141c <__cxa_atexit@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #106496	; 0x1a000
   11424:	ldr	pc, [ip, #3220]!	; 0xc94

00011428 <memset@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #106496	; 0x1a000
   11430:	ldr	pc, [ip, #3212]!	; 0xc8c

00011434 <__printf_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #106496	; 0x1a000
   1143c:	ldr	pc, [ip, #3204]!	; 0xc84

00011440 <fileno@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #106496	; 0x1a000
   11448:	ldr	pc, [ip, #3196]!	; 0xc7c

0001144c <__fprintf_chk@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #106496	; 0x1a000
   11454:	ldr	pc, [ip, #3188]!	; 0xc74

00011458 <fclose@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #106496	; 0x1a000
   11460:	ldr	pc, [ip, #3180]!	; 0xc6c

00011464 <fseeko64@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #106496	; 0x1a000
   1146c:	ldr	pc, [ip, #3172]!	; 0xc64

00011470 <fcntl64@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #106496	; 0x1a000
   11478:	ldr	pc, [ip, #3164]!	; 0xc5c

0001147c <setlocale@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #106496	; 0x1a000
   11484:	ldr	pc, [ip, #3156]!	; 0xc54

00011488 <endpwent@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #106496	; 0x1a000
   11490:	ldr	pc, [ip, #3148]!	; 0xc4c

00011494 <strrchr@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #106496	; 0x1a000
   1149c:	ldr	pc, [ip, #3140]!	; 0xc44

000114a0 <nl_langinfo@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #106496	; 0x1a000
   114a8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ac <readdir64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #106496	; 0x1a000
   114b4:	ldr	pc, [ip, #3124]!	; 0xc34

000114b8 <fdopendir@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #3116]!	; 0xc2c

000114c4 <dirfd@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #3108]!	; 0xc24

000114d0 <fchdir@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #3100]!	; 0xc1c

000114dc <qsort@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #3092]!	; 0xc14

000114e8 <fchownat@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #3084]!	; 0xc0c

000114f4 <bindtextdomain@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #106496	; 0x1a000
   114fc:	ldr	pc, [ip, #3076]!	; 0xc04

00011500 <__xstat64@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #106496	; 0x1a000
   11508:	ldr	pc, [ip, #3068]!	; 0xbfc

0001150c <strncmp@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #106496	; 0x1a000
   11514:	ldr	pc, [ip, #3060]!	; 0xbf4

00011518 <abort@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #106496	; 0x1a000
   11520:	ldr	pc, [ip, #3052]!	; 0xbec

00011524 <close@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #106496	; 0x1a000
   1152c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011530 <__lxstat64@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #106496	; 0x1a000
   11538:	ldr	pc, [ip, #3036]!	; 0xbdc

0001153c <closedir@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #106496	; 0x1a000
   11544:	ldr	pc, [ip, #3028]!	; 0xbd4

00011548 <getgrgid@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #106496	; 0x1a000
   11550:	ldr	pc, [ip, #3020]!	; 0xbcc

00011554 <getgrnam@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #106496	; 0x1a000
   1155c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011560 <__assert_fail@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #106496	; 0x1a000
   11568:	ldr	pc, [ip, #3004]!	; 0xbbc

Disassembly of section .text:

00011570 <.text>:
   11570:	mov	fp, #0
   11574:	mov	lr, #0
   11578:	pop	{r1}		; (ldr r1, [sp], #4)
   1157c:	mov	r2, sp
   11580:	push	{r2}		; (str r2, [sp, #-4]!)
   11584:	push	{r0}		; (str r0, [sp, #-4]!)
   11588:	ldr	ip, [pc, #16]	; 115a0 <__assert_fail@plt+0x40>
   1158c:	push	{ip}		; (str ip, [sp, #-4]!)
   11590:	ldr	r0, [pc, #12]	; 115a4 <__assert_fail@plt+0x44>
   11594:	ldr	r3, [pc, #12]	; 115a8 <__assert_fail@plt+0x48>
   11598:	bl	1138c <__libc_start_main@plt>
   1159c:	bl	11518 <abort@plt>
   115a0:	andeq	r9, r1, ip, asr #30
   115a4:	andeq	r1, r1, r0, lsl #20
   115a8:	andeq	r9, r1, ip, ror #29
   115ac:	ldr	r3, [pc, #20]	; 115c8 <__assert_fail@plt+0x68>
   115b0:	ldr	r2, [pc, #20]	; 115cc <__assert_fail@plt+0x6c>
   115b4:	add	r3, pc, r3
   115b8:	ldr	r2, [r3, r2]
   115bc:	cmp	r2, #0
   115c0:	bxeq	lr
   115c4:	b	113a4 <__gmon_start__@plt>
   115c8:	andeq	sl, r1, r4, asr #20
   115cc:	andeq	r0, r0, r8, lsr #2
   115d0:	ldr	r0, [pc, #24]	; 115f0 <__assert_fail@plt+0x90>
   115d4:	ldr	r3, [pc, #24]	; 115f4 <__assert_fail@plt+0x94>
   115d8:	cmp	r3, r0
   115dc:	bxeq	lr
   115e0:	ldr	r3, [pc, #16]	; 115f8 <__assert_fail@plt+0x98>
   115e4:	cmp	r3, #0
   115e8:	bxeq	lr
   115ec:	bx	r3
   115f0:	andeq	ip, r2, r0, lsl #3
   115f4:	andeq	ip, r2, r0, lsl #3
   115f8:	andeq	r0, r0, r0
   115fc:	ldr	r0, [pc, #36]	; 11628 <__assert_fail@plt+0xc8>
   11600:	ldr	r1, [pc, #36]	; 1162c <__assert_fail@plt+0xcc>
   11604:	sub	r1, r1, r0
   11608:	asr	r1, r1, #2
   1160c:	add	r1, r1, r1, lsr #31
   11610:	asrs	r1, r1, #1
   11614:	bxeq	lr
   11618:	ldr	r3, [pc, #16]	; 11630 <__assert_fail@plt+0xd0>
   1161c:	cmp	r3, #0
   11620:	bxeq	lr
   11624:	bx	r3
   11628:	andeq	ip, r2, r0, lsl #3
   1162c:	andeq	ip, r2, r0, lsl #3
   11630:	andeq	r0, r0, r0
   11634:	push	{r4, lr}
   11638:	ldr	r4, [pc, #24]	; 11658 <__assert_fail@plt+0xf8>
   1163c:	ldrb	r3, [r4]
   11640:	cmp	r3, #0
   11644:	popne	{r4, pc}
   11648:	bl	115d0 <__assert_fail@plt+0x70>
   1164c:	mov	r3, #1
   11650:	strb	r3, [r4]
   11654:	pop	{r4, pc}
   11658:	muleq	r2, ip, r1
   1165c:	b	115fc <__assert_fail@plt+0x9c>
   11660:	push	{fp, lr}
   11664:	mov	fp, sp
   11668:	sub	sp, sp, #8
   1166c:	mov	r4, r0
   11670:	cmp	r0, #0
   11674:	bne	11838 <__assert_fail@plt+0x2d8>
   11678:	movw	r1, #40955	; 0x9ffb
   1167c:	movt	r1, #1
   11680:	mov	r0, #0
   11684:	mov	r2, #5
   11688:	bl	112d8 <dcgettext@plt>
   1168c:	mov	r1, r0
   11690:	movw	r5, #49600	; 0xc1c0
   11694:	movt	r5, #2
   11698:	ldr	r2, [r5]
   1169c:	mov	r0, #1
   116a0:	mov	r3, r2
   116a4:	bl	11434 <__printf_chk@plt>
   116a8:	movw	r1, #41052	; 0xa05c
   116ac:	movt	r1, #1
   116b0:	mov	r0, #0
   116b4:	mov	r2, #5
   116b8:	bl	112d8 <dcgettext@plt>
   116bc:	movw	r6, #49556	; 0xc194
   116c0:	movt	r6, #2
   116c4:	ldr	r1, [r6]
   116c8:	bl	1123c <fputs_unlocked@plt>
   116cc:	movw	r1, #41197	; 0xa0ed
   116d0:	movt	r1, #1
   116d4:	mov	r0, #0
   116d8:	mov	r2, #5
   116dc:	bl	112d8 <dcgettext@plt>
   116e0:	ldr	r1, [r6]
   116e4:	bl	1123c <fputs_unlocked@plt>
   116e8:	movw	r1, #41398	; 0xa1b6
   116ec:	movt	r1, #1
   116f0:	mov	r0, #0
   116f4:	mov	r2, #5
   116f8:	bl	112d8 <dcgettext@plt>
   116fc:	ldr	r1, [r6]
   11700:	bl	1123c <fputs_unlocked@plt>
   11704:	movw	r1, #41629	; 0xa29d
   11708:	movt	r1, #1
   1170c:	mov	r0, #0
   11710:	mov	r2, #5
   11714:	bl	112d8 <dcgettext@plt>
   11718:	ldr	r1, [r6]
   1171c:	bl	1123c <fputs_unlocked@plt>
   11720:	movw	r1, #41748	; 0xa314
   11724:	movt	r1, #1
   11728:	mov	r0, #0
   1172c:	mov	r2, #5
   11730:	bl	112d8 <dcgettext@plt>
   11734:	ldr	r1, [r6]
   11738:	bl	1123c <fputs_unlocked@plt>
   1173c:	movw	r1, #42088	; 0xa468
   11740:	movt	r1, #1
   11744:	mov	r0, #0
   11748:	mov	r2, #5
   1174c:	bl	112d8 <dcgettext@plt>
   11750:	ldr	r1, [r6]
   11754:	bl	1123c <fputs_unlocked@plt>
   11758:	movw	r1, #42216	; 0xa4e8
   1175c:	movt	r1, #1
   11760:	mov	r0, #0
   11764:	mov	r2, #5
   11768:	bl	112d8 <dcgettext@plt>
   1176c:	ldr	r1, [r6]
   11770:	bl	1123c <fputs_unlocked@plt>
   11774:	movw	r1, #42337	; 0xa561
   11778:	movt	r1, #1
   1177c:	mov	r0, #0
   11780:	mov	r2, #5
   11784:	bl	112d8 <dcgettext@plt>
   11788:	ldr	r1, [r6]
   1178c:	bl	1123c <fputs_unlocked@plt>
   11790:	movw	r1, #42408	; 0xa5a8
   11794:	movt	r1, #1
   11798:	mov	r0, #0
   1179c:	mov	r2, #5
   117a0:	bl	112d8 <dcgettext@plt>
   117a4:	ldr	r1, [r6]
   117a8:	bl	1123c <fputs_unlocked@plt>
   117ac:	movw	r1, #42873	; 0xa779
   117b0:	movt	r1, #1
   117b4:	mov	r0, #0
   117b8:	mov	r2, #5
   117bc:	bl	112d8 <dcgettext@plt>
   117c0:	ldr	r1, [r6]
   117c4:	bl	1123c <fputs_unlocked@plt>
   117c8:	movw	r1, #42918	; 0xa7a6
   117cc:	movt	r1, #1
   117d0:	mov	r0, #0
   117d4:	mov	r2, #5
   117d8:	bl	112d8 <dcgettext@plt>
   117dc:	ldr	r1, [r6]
   117e0:	bl	1123c <fputs_unlocked@plt>
   117e4:	movw	r1, #42972	; 0xa7dc
   117e8:	movt	r1, #1
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	bl	112d8 <dcgettext@plt>
   117f8:	ldr	r1, [r6]
   117fc:	bl	1123c <fputs_unlocked@plt>
   11800:	movw	r1, #43164	; 0xa89c
   11804:	movt	r1, #1
   11808:	mov	r0, #0
   1180c:	mov	r2, #5
   11810:	bl	112d8 <dcgettext@plt>
   11814:	mov	r1, r0
   11818:	ldr	r2, [r5]
   1181c:	str	r2, [sp]
   11820:	mov	r0, #1
   11824:	mov	r3, r2
   11828:	bl	11434 <__printf_chk@plt>
   1182c:	bl	1187c <__assert_fail@plt+0x31c>
   11830:	mov	r0, r4
   11834:	bl	113c8 <exit@plt>
   11838:	movw	r0, #49552	; 0xc190
   1183c:	movt	r0, #2
   11840:	ldr	r5, [r0]
   11844:	movw	r1, #40916	; 0x9fd4
   11848:	movt	r1, #1
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	bl	112d8 <dcgettext@plt>
   11858:	mov	r2, r0
   1185c:	movw	r0, #49600	; 0xc1c0
   11860:	movt	r0, #2
   11864:	ldr	r3, [r0]
   11868:	mov	r0, r5
   1186c:	mov	r1, #1
   11870:	bl	1144c <__fprintf_chk@plt>
   11874:	mov	r0, r4
   11878:	bl	113c8 <exit@plt>
   1187c:	push	{r4, r5, fp, lr}
   11880:	add	fp, sp, #8
   11884:	sub	sp, sp, #56	; 0x38
   11888:	movw	r0, #44192	; 0xaca0
   1188c:	movt	r0, #1
   11890:	add	r1, r0, #32
   11894:	mov	r5, sp
   11898:	mov	r2, #48	; 0x30
   1189c:	vld1.64	{d16-d17}, [r1]
   118a0:	add	r1, r5, #32
   118a4:	add	r3, r0, #16
   118a8:	vld1.64	{d18-d19}, [r0], r2
   118ac:	vld1.64	{d20-d21}, [r3]
   118b0:	vldr	d22, [r0]
   118b4:	vst1.64	{d16-d17}, [r1]
   118b8:	add	r0, r5, #16
   118bc:	vst1.64	{d20-d21}, [r0]
   118c0:	mov	r0, r5
   118c4:	vst1.64	{d18-d19}, [r0], r2
   118c8:	vstr	d22, [r0]
   118cc:	ldr	r1, [sp]
   118d0:	cmp	r1, #0
   118d4:	beq	118fc <__assert_fail@plt+0x39c>
   118d8:	mov	r5, sp
   118dc:	movw	r4, #43365	; 0xa965
   118e0:	movt	r4, #1
   118e4:	mov	r0, r4
   118e8:	bl	11260 <strcmp@plt>
   118ec:	cmp	r0, #0
   118f0:	ldrne	r1, [r5, #8]!
   118f4:	cmpne	r1, #0
   118f8:	bne	118e4 <__assert_fail@plt+0x384>
   118fc:	ldr	r4, [r5, #4]
   11900:	movw	r1, #43663	; 0xaa8f
   11904:	movt	r1, #1
   11908:	mov	r0, #0
   1190c:	mov	r2, #5
   11910:	bl	112d8 <dcgettext@plt>
   11914:	mov	r1, r0
   11918:	movw	r2, #43411	; 0xa993
   1191c:	movt	r2, #1
   11920:	movw	r3, #43686	; 0xaaa6
   11924:	movt	r3, #1
   11928:	mov	r0, #1
   1192c:	bl	11434 <__printf_chk@plt>
   11930:	movw	r5, #43365	; 0xa965
   11934:	movt	r5, #1
   11938:	cmp	r4, #0
   1193c:	moveq	r4, r5
   11940:	mov	r0, #5
   11944:	mov	r1, #0
   11948:	bl	1147c <setlocale@plt>
   1194c:	cmp	r0, #0
   11950:	beq	11990 <__assert_fail@plt+0x430>
   11954:	movw	r1, #43726	; 0xaace
   11958:	movt	r1, #1
   1195c:	mov	r2, #3
   11960:	bl	1150c <strncmp@plt>
   11964:	cmp	r0, #0
   11968:	beq	11990 <__assert_fail@plt+0x430>
   1196c:	movw	r1, #43730	; 0xaad2
   11970:	movt	r1, #1
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	bl	112d8 <dcgettext@plt>
   11980:	movw	r1, #49556	; 0xc194
   11984:	movt	r1, #2
   11988:	ldr	r1, [r1]
   1198c:	bl	1123c <fputs_unlocked@plt>
   11990:	movw	r1, #43801	; 0xab19
   11994:	movt	r1, #1
   11998:	mov	r0, #0
   1199c:	mov	r2, #5
   119a0:	bl	112d8 <dcgettext@plt>
   119a4:	mov	r1, r0
   119a8:	movw	r2, #43686	; 0xaaa6
   119ac:	movt	r2, #1
   119b0:	mov	r0, #1
   119b4:	mov	r3, r5
   119b8:	bl	11434 <__printf_chk@plt>
   119bc:	movw	r1, #43828	; 0xab34
   119c0:	movt	r1, #1
   119c4:	mov	r0, #0
   119c8:	mov	r2, #5
   119cc:	bl	112d8 <dcgettext@plt>
   119d0:	mov	r1, r0
   119d4:	movw	r0, #43596	; 0xaa4c
   119d8:	movt	r0, #1
   119dc:	movw	r3, #42872	; 0xa778
   119e0:	movt	r3, #1
   119e4:	cmp	r4, r5
   119e8:	moveq	r3, r0
   119ec:	mov	r0, #1
   119f0:	mov	r2, r4
   119f4:	bl	11434 <__printf_chk@plt>
   119f8:	sub	sp, fp, #8
   119fc:	pop	{r4, r5, fp, pc}
   11a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a04:	add	fp, sp, #28
   11a08:	sub	sp, sp, #164	; 0xa4
   11a0c:	mov	sl, r1
   11a10:	mov	r6, r0
   11a14:	mvn	r9, #0
   11a18:	str	r9, [fp, #-32]	; 0xffffffe0
   11a1c:	str	r9, [fp, #-36]	; 0xffffffdc
   11a20:	str	r9, [fp, #-40]	; 0xffffffd8
   11a24:	str	r9, [fp, #-44]	; 0xffffffd4
   11a28:	ldr	r0, [r1]
   11a2c:	bl	161a8 <__assert_fail@plt+0x4c48>
   11a30:	movw	r1, #42872	; 0xa778
   11a34:	movt	r1, #1
   11a38:	mov	r0, #6
   11a3c:	bl	1147c <setlocale@plt>
   11a40:	movw	r5, #43415	; 0xa997
   11a44:	movt	r5, #1
   11a48:	movw	r1, #43371	; 0xa96b
   11a4c:	movt	r1, #1
   11a50:	mov	r0, r5
   11a54:	bl	114f4 <bindtextdomain@plt>
   11a58:	mov	r0, r5
   11a5c:	bl	112f0 <textdomain@plt>
   11a60:	movw	r0, #12012	; 0x2eec
   11a64:	movt	r0, #1
   11a68:	bl	19f50 <__assert_fail@plt+0x89f0>
   11a6c:	sub	r0, fp, #68	; 0x44
   11a70:	bl	11fd0 <__assert_fail@plt+0xa70>
   11a74:	mov	r8, #0
   11a78:	mov	r0, #16
   11a7c:	movw	r7, #43395	; 0xa983
   11a80:	movt	r7, #1
   11a84:	movw	r5, #43968	; 0xabc0
   11a88:	movt	r5, #1
   11a8c:	b	11a94 <__assert_fail@plt+0x534>
   11a90:	mov	r0, r4
   11a94:	mov	r1, #0
   11a98:	str	r1, [sp, #12]
   11a9c:	b	11aac <__assert_fail@plt+0x54c>
   11aa0:	mov	r0, #1
   11aa4:	str	r0, [fp, #-68]	; 0xffffffbc
   11aa8:	mov	r0, r4
   11aac:	mov	r4, r0
   11ab0:	str	r8, [sp]
   11ab4:	mov	r0, r6
   11ab8:	mov	r1, sl
   11abc:	mov	r2, r7
   11ac0:	mov	r3, r5
   11ac4:	bl	113b0 <getopt_long@plt>
   11ac8:	cmp	r0, #71	; 0x47
   11acc:	ble	11c84 <__assert_fail@plt+0x724>
   11ad0:	sub	r1, r0, #72	; 0x48
   11ad4:	cmp	r1, #46	; 0x2e
   11ad8:	bhi	11bac <__assert_fail@plt+0x64c>
   11adc:	mov	r0, #17
   11ae0:	add	r2, pc, #0
   11ae4:	ldr	pc, [r2, r1, lsl #2]
   11ae8:	andeq	r1, r1, ip, lsr #21
   11aec:	strdeq	r1, [r1], -ip
   11af0:	strdeq	r1, [r1], -ip
   11af4:	strdeq	r1, [r1], -ip
   11af8:	andeq	r1, r1, r4, lsr #23
   11afc:	strdeq	r1, [r1], -ip
   11b00:	strdeq	r1, [r1], -ip
   11b04:	strdeq	r1, [r1], -ip
   11b08:	andeq	r1, r1, r0, lsl ip
   11b0c:	strdeq	r1, [r1], -ip
   11b10:	andeq	r1, r1, r0, ror #23
   11b14:	strdeq	r1, [r1], -ip
   11b18:	strdeq	r1, [r1], -ip
   11b1c:	strdeq	r1, [r1], -ip
   11b20:	strdeq	r1, [r1], -ip
   11b24:	strdeq	r1, [r1], -ip
   11b28:	strdeq	r1, [r1], -ip
   11b2c:	strdeq	r1, [r1], -ip
   11b30:	strdeq	r1, [r1], -ip
   11b34:	strdeq	r1, [r1], -ip
   11b38:	strdeq	r1, [r1], -ip
   11b3c:	strdeq	r1, [r1], -ip
   11b40:	strdeq	r1, [r1], -ip
   11b44:	strdeq	r1, [r1], -ip
   11b48:	strdeq	r1, [r1], -ip
   11b4c:	strdeq	r1, [r1], -ip
   11b50:	strdeq	r1, [r1], -ip
   11b54:	andeq	r1, r1, r0, lsr #21
   11b58:	strdeq	r1, [r1], -ip
   11b5c:	strdeq	r1, [r1], -ip
   11b60:	andeq	r1, r1, r8, lsl ip
   11b64:	strdeq	r1, [r1], -ip
   11b68:	andeq	r1, r1, r8, lsr #24
   11b6c:	strdeq	r1, [r1], -ip
   11b70:	strdeq	r1, [r1], -ip
   11b74:	strdeq	r1, [r1], -ip
   11b78:	strdeq	r1, [r1], -ip
   11b7c:	strdeq	r1, [r1], -ip
   11b80:	strdeq	r1, [r1], -ip
   11b84:	strdeq	r1, [r1], -ip
   11b88:	strdeq	r1, [r1], -ip
   11b8c:	strdeq	r1, [r1], -ip
   11b90:	strdeq	r1, [r1], -ip
   11b94:	strdeq	r1, [r1], -ip
   11b98:	strdeq	r1, [r1], -ip
   11b9c:	strdeq	r1, [r1], -ip
   11ba0:	andeq	r1, r1, r4, lsr ip
   11ba4:	mov	r0, #2
   11ba8:	b	11aac <__assert_fail@plt+0x54c>
   11bac:	sub	r0, r0, #256	; 0x100
   11bb0:	cmp	r0, #4
   11bb4:	bhi	11efc <__assert_fail@plt+0x99c>
   11bb8:	add	r1, pc, #0
   11bbc:	ldr	pc, [r1, r0, lsl #2]
   11bc0:	ldrdeq	r1, [r1], -r4
   11bc4:	andeq	r1, r1, r0, asr #24
   11bc8:	muleq	r1, r0, sl
   11bcc:	andeq	r1, r1, r4, ror ip
   11bd0:	strdeq	r1, [r1], -r0
   11bd4:	mov	r9, #1
   11bd8:	mov	r0, r4
   11bdc:	b	11aac <__assert_fail@plt+0x54c>
   11be0:	mov	r0, #1
   11be4:	strb	r0, [fp, #-64]	; 0xffffffc0
   11be8:	mov	r0, r4
   11bec:	b	11aac <__assert_fail@plt+0x54c>
   11bf0:	movw	r0, #49560	; 0xc198
   11bf4:	movt	r0, #2
   11bf8:	ldr	r0, [r0]
   11bfc:	movw	r1, #49568	; 0xc1a0
   11c00:	movt	r1, #2
   11c04:	str	r0, [r1]
   11c08:	mov	r0, r4
   11c0c:	b	11aac <__assert_fail@plt+0x54c>
   11c10:	mov	r0, #16
   11c14:	b	11aac <__assert_fail@plt+0x54c>
   11c18:	mov	r0, #1
   11c1c:	strb	r0, [fp, #-55]	; 0xffffffc9
   11c20:	mov	r0, r4
   11c24:	b	11aac <__assert_fail@plt+0x54c>
   11c28:	mov	r9, #0
   11c2c:	mov	r0, r4
   11c30:	b	11aac <__assert_fail@plt+0x54c>
   11c34:	str	r8, [fp, #-68]	; 0xffffffbc
   11c38:	mov	r0, r4
   11c3c:	b	11aac <__assert_fail@plt+0x54c>
   11c40:	movw	r0, #49560	; 0xc198
   11c44:	movt	r0, #2
   11c48:	ldr	r0, [r0]
   11c4c:	str	r8, [sp]
   11c50:	sub	r1, fp, #40	; 0x28
   11c54:	sub	r2, fp, #44	; 0x2c
   11c58:	mov	r3, #0
   11c5c:	bl	17e8c <__assert_fail@plt+0x692c>
   11c60:	mov	r1, r0
   11c64:	cmp	r0, #0
   11c68:	mov	r0, r4
   11c6c:	beq	11aac <__assert_fail@plt+0x54c>
   11c70:	b	11e8c <__assert_fail@plt+0x92c>
   11c74:	mov	r0, #1
   11c78:	str	r0, [sp, #12]
   11c7c:	mov	r0, r4
   11c80:	b	11aac <__assert_fail@plt+0x54c>
   11c84:	cmn	r0, #1
   11c88:	bne	11e20 <__assert_fail@plt+0x8c0>
   11c8c:	mov	r7, #16
   11c90:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11c94:	cmp	r0, #0
   11c98:	beq	11cd4 <__assert_fail@plt+0x774>
   11c9c:	cmp	r4, #16
   11ca0:	bne	11cdc <__assert_fail@plt+0x77c>
   11ca4:	mov	r0, #0
   11ca8:	cmp	r9, #1
   11cac:	bne	11ce4 <__assert_fail@plt+0x784>
   11cb0:	movw	r1, #43454	; 0xa9be
   11cb4:	movt	r1, #1
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	bl	112d8 <dcgettext@plt>
   11cc4:	mov	r2, r0
   11cc8:	mov	r0, #1
   11ccc:	mov	r1, #0
   11cd0:	bl	11368 <error@plt>
   11cd4:	mov	r0, r9
   11cd8:	b	11ce4 <__assert_fail@plt+0x784>
   11cdc:	mov	r0, r9
   11ce0:	mov	r7, r4
   11ce4:	cmp	r0, #0
   11ce8:	movwne	r0, #1
   11cec:	strb	r0, [fp, #-56]	; 0xffffffc8
   11cf0:	movw	r0, #49568	; 0xc1a0
   11cf4:	movt	r0, #2
   11cf8:	ldr	r0, [r0]
   11cfc:	mov	r2, #2
   11d00:	cmp	r0, #0
   11d04:	movwne	r2, #1
   11d08:	movw	r4, #49544	; 0xc188
   11d0c:	movt	r4, #2
   11d10:	ldr	r1, [r4]
   11d14:	sub	r3, r6, r1
   11d18:	cmp	r3, r2
   11d1c:	sub	r8, fp, #68	; 0x44
   11d20:	blt	11ebc <__assert_fail@plt+0x95c>
   11d24:	cmp	r0, #0
   11d28:	beq	11d64 <__assert_fail@plt+0x804>
   11d2c:	add	r1, sp, #16
   11d30:	bl	19f68 <__assert_fail@plt+0x8a08>
   11d34:	cmp	r0, #0
   11d38:	bne	11f04 <__assert_fail@plt+0x9a4>
   11d3c:	ldr	r0, [sp, #40]	; 0x28
   11d40:	ldr	r1, [sp, #44]	; 0x2c
   11d44:	str	r0, [fp, #-32]	; 0xffffffe0
   11d48:	str	r1, [fp, #-36]	; 0xffffffdc
   11d4c:	bl	12058 <__assert_fail@plt+0xaf8>
   11d50:	str	r0, [fp, #-52]	; 0xffffffcc
   11d54:	ldr	r0, [sp, #44]	; 0x2c
   11d58:	bl	12018 <__assert_fail@plt+0xab8>
   11d5c:	str	r0, [fp, #-48]	; 0xffffffd0
   11d60:	b	11dbc <__assert_fail@plt+0x85c>
   11d64:	ldr	r0, [sl, r1, lsl #2]
   11d68:	add	r1, r8, #20
   11d6c:	str	r1, [sp]
   11d70:	add	r3, r8, #16
   11d74:	sub	r1, fp, #32
   11d78:	sub	r2, fp, #36	; 0x24
   11d7c:	bl	17e8c <__assert_fail@plt+0x692c>
   11d80:	cmp	r0, #0
   11d84:	bne	11fa4 <__assert_fail@plt+0xa44>
   11d88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d8c:	cmp	r0, #0
   11d90:	bne	11db0 <__assert_fail@plt+0x850>
   11d94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d98:	cmp	r0, #0
   11d9c:	beq	11db0 <__assert_fail@plt+0x850>
   11da0:	movw	r0, #42872	; 0xa778
   11da4:	movt	r0, #1
   11da8:	bl	18a90 <__assert_fail@plt+0x7530>
   11dac:	str	r0, [fp, #-52]	; 0xffffffcc
   11db0:	ldr	r0, [r4]
   11db4:	add	r0, r0, #1
   11db8:	str	r0, [r4]
   11dbc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11dc0:	cmp	r0, #0
   11dc4:	beq	11df0 <__assert_fail@plt+0x890>
   11dc8:	ldr	r0, [sp, #12]
   11dcc:	eor	r0, r0, #1
   11dd0:	tst	r0, #1
   11dd4:	bne	11df0 <__assert_fail@plt+0x890>
   11dd8:	movw	r0, #49576	; 0xc1a8
   11ddc:	movt	r0, #2
   11de0:	bl	17df4 <__assert_fail@plt+0x6894>
   11de4:	str	r0, [fp, #-60]	; 0xffffffc4
   11de8:	cmp	r0, #0
   11dec:	beq	11f34 <__assert_fail@plt+0x9d4>
   11df0:	ldr	r0, [r4]
   11df4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11df8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11dfc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11e00:	ldr	r6, [fp, #-44]	; 0xffffffd4
   11e04:	stm	sp, {r1, r6, r8}
   11e08:	add	r0, sl, r0, lsl #2
   11e0c:	orr	r1, r7, #1024	; 0x400
   11e10:	bl	12098 <__assert_fail@plt+0xb38>
   11e14:	eor	r0, r0, #1
   11e18:	sub	sp, fp, #28
   11e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e20:	cmn	r0, #3
   11e24:	bne	11e7c <__assert_fail@plt+0x91c>
   11e28:	movw	r0, #49464	; 0xc138
   11e2c:	movt	r0, #2
   11e30:	ldr	r3, [r0]
   11e34:	movw	r0, #49556	; 0xc194
   11e38:	movt	r0, #2
   11e3c:	ldr	r0, [r0]
   11e40:	mov	r1, #0
   11e44:	movw	r2, #43441	; 0xa9b1
   11e48:	movt	r2, #1
   11e4c:	movw	r7, #43425	; 0xa9a1
   11e50:	movt	r7, #1
   11e54:	str	r7, [sp]
   11e58:	str	r2, [sp, #4]
   11e5c:	str	r1, [sp, #8]
   11e60:	movw	r1, #43365	; 0xa965
   11e64:	movt	r1, #1
   11e68:	movw	r2, #43411	; 0xa993
   11e6c:	movt	r2, #1
   11e70:	bl	185f8 <__assert_fail@plt+0x7098>
   11e74:	mov	r0, #0
   11e78:	bl	113c8 <exit@plt>
   11e7c:	cmn	r0, #2
   11e80:	bne	11efc <__assert_fail@plt+0x99c>
   11e84:	mov	r0, #0
   11e88:	bl	11660 <__assert_fail@plt+0x100>
   11e8c:	movw	r0, #49560	; 0xc198
   11e90:	movt	r0, #2
   11e94:	ldr	r0, [r0]
   11e98:	mov	r4, r1
   11e9c:	bl	179e0 <__assert_fail@plt+0x6480>
   11ea0:	str	r0, [sp]
   11ea4:	movw	r2, #43404	; 0xa98c
   11ea8:	movt	r2, #1
   11eac:	mov	r0, #1
   11eb0:	mov	r1, #0
   11eb4:	mov	r3, r4
   11eb8:	bl	11368 <error@plt>
   11ebc:	cmp	r1, r6
   11ec0:	bge	11f78 <__assert_fail@plt+0xa18>
   11ec4:	movw	r1, #43512	; 0xa9f8
   11ec8:	movt	r1, #1
   11ecc:	mov	r0, #0
   11ed0:	mov	r2, #5
   11ed4:	bl	112d8 <dcgettext@plt>
   11ed8:	mov	r5, r0
   11edc:	add	r0, sl, r6, lsl #2
   11ee0:	ldr	r0, [r0, #-4]
   11ee4:	bl	179e0 <__assert_fail@plt+0x6480>
   11ee8:	mov	r3, r0
   11eec:	mov	r0, #0
   11ef0:	mov	r1, #0
   11ef4:	mov	r2, r5
   11ef8:	bl	11368 <error@plt>
   11efc:	mov	r0, #1
   11f00:	bl	11660 <__assert_fail@plt+0x100>
   11f04:	bl	11410 <__errno_location@plt>
   11f08:	ldr	r4, [r0]
   11f0c:	movw	r1, #43537	; 0xaa11
   11f10:	movt	r1, #1
   11f14:	mov	r0, #0
   11f18:	mov	r2, #5
   11f1c:	bl	112d8 <dcgettext@plt>
   11f20:	mov	r5, r0
   11f24:	movw	r0, #49568	; 0xc1a0
   11f28:	movt	r0, #2
   11f2c:	ldr	r1, [r0]
   11f30:	b	11f5c <__assert_fail@plt+0x9fc>
   11f34:	bl	11410 <__errno_location@plt>
   11f38:	ldr	r4, [r0]
   11f3c:	movw	r1, #43537	; 0xaa11
   11f40:	movt	r1, #1
   11f44:	mov	r0, #0
   11f48:	mov	r2, #5
   11f4c:	bl	112d8 <dcgettext@plt>
   11f50:	mov	r5, r0
   11f54:	movw	r1, #46423	; 0xb557
   11f58:	movt	r1, #1
   11f5c:	mov	r0, #4
   11f60:	bl	177ec <__assert_fail@plt+0x628c>
   11f64:	mov	r3, r0
   11f68:	mov	r0, #1
   11f6c:	mov	r1, r4
   11f70:	mov	r2, r5
   11f74:	bl	11368 <error@plt>
   11f78:	movw	r1, #43496	; 0xa9e8
   11f7c:	movt	r1, #1
   11f80:	mov	r0, #0
   11f84:	mov	r2, #5
   11f88:	bl	112d8 <dcgettext@plt>
   11f8c:	mov	r2, r0
   11f90:	mov	r0, #0
   11f94:	mov	r1, #0
   11f98:	bl	11368 <error@plt>
   11f9c:	mov	r0, #1
   11fa0:	bl	11660 <__assert_fail@plt+0x100>
   11fa4:	mov	r5, r0
   11fa8:	ldr	r0, [r4]
   11fac:	ldr	r0, [sl, r0, lsl #2]
   11fb0:	bl	179e0 <__assert_fail@plt+0x6480>
   11fb4:	str	r0, [sp]
   11fb8:	movw	r2, #43404	; 0xa98c
   11fbc:	movt	r2, #1
   11fc0:	mov	r0, #1
   11fc4:	mov	r1, #0
   11fc8:	mov	r3, r5
   11fcc:	bl	11368 <error@plt>
   11fd0:	mov	r1, #0
   11fd4:	str	r1, [r0, #8]
   11fd8:	mov	r2, #2
   11fdc:	str	r2, [r0]
   11fe0:	strb	r1, [r0, #4]
   11fe4:	mov	r2, #1
   11fe8:	strh	r2, [r0, #12]
   11fec:	str	r1, [r0, #16]
   11ff0:	str	r1, [r0, #20]
   11ff4:	bx	lr
   11ff8:	push	{r4, sl, fp, lr}
   11ffc:	add	fp, sp, #8
   12000:	mov	r4, r0
   12004:	ldr	r0, [r0, #16]
   12008:	bl	12fd4 <__assert_fail@plt+0x1a74>
   1200c:	ldr	r0, [r4, #20]
   12010:	pop	{r4, sl, fp, lr}
   12014:	b	12fd4 <__assert_fail@plt+0x1a74>
   12018:	push	{r4, sl, fp, lr}
   1201c:	add	fp, sp, #8
   12020:	sub	sp, sp, #24
   12024:	mov	r4, r0
   12028:	bl	11548 <getgrgid@plt>
   1202c:	cmp	r0, #0
   12030:	beq	1203c <__assert_fail@plt+0xadc>
   12034:	ldr	r0, [r0]
   12038:	b	1204c <__assert_fail@plt+0xaec>
   1203c:	add	r2, sp, #3
   12040:	mov	r0, r4
   12044:	mov	r1, #0
   12048:	bl	160ac <__assert_fail@plt+0x4b4c>
   1204c:	bl	18a90 <__assert_fail@plt+0x7530>
   12050:	sub	sp, fp, #8
   12054:	pop	{r4, sl, fp, pc}
   12058:	push	{r4, sl, fp, lr}
   1205c:	add	fp, sp, #8
   12060:	sub	sp, sp, #24
   12064:	mov	r4, r0
   12068:	bl	1126c <getpwuid@plt>
   1206c:	cmp	r0, #0
   12070:	beq	1207c <__assert_fail@plt+0xb1c>
   12074:	ldr	r0, [r0]
   12078:	b	1208c <__assert_fail@plt+0xb2c>
   1207c:	add	r2, sp, #3
   12080:	mov	r0, r4
   12084:	mov	r1, #0
   12088:	bl	160ac <__assert_fail@plt+0x4b4c>
   1208c:	bl	18a90 <__assert_fail@plt+0x7530>
   12090:	sub	sp, fp, #8
   12094:	pop	{r4, sl, fp, pc}
   12098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1209c:	add	fp, sp, #28
   120a0:	sub	sp, sp, #12
   120a4:	mov	r6, r3
   120a8:	mov	r7, r2
   120ac:	ldr	r9, [fp, #8]
   120b0:	ldr	sl, [fp, #12]
   120b4:	and	r3, sl, r9
   120b8:	mov	r2, #0
   120bc:	ldr	r8, [fp, #16]
   120c0:	cmn	r3, #1
   120c4:	bne	120e8 <__assert_fail@plt+0xb88>
   120c8:	ldrb	r3, [r8, #12]
   120cc:	cmp	r3, #0
   120d0:	bne	120e8 <__assert_fail@plt+0xb88>
   120d4:	ldr	r2, [r8]
   120d8:	sub	r2, r2, #2
   120dc:	clz	r2, r2
   120e0:	lsr	r2, r2, #5
   120e4:	lsl	r2, r2, #3
   120e8:	orr	r1, r2, r1
   120ec:	mov	r2, #0
   120f0:	bl	18af4 <__assert_fail@plt+0x7594>
   120f4:	mov	r5, r0
   120f8:	bl	13934 <__assert_fail@plt+0x23d4>
   120fc:	cmp	r0, #0
   12100:	beq	12140 <__assert_fail@plt+0xbe0>
   12104:	mov	r1, r0
   12108:	mov	r4, #1
   1210c:	stm	sp, {r9, sl}
   12110:	str	r8, [sp, #8]
   12114:	mov	r0, r5
   12118:	mov	r2, r7
   1211c:	mov	r3, r6
   12120:	bl	121d8 <__assert_fail@plt+0xc78>
   12124:	and	r4, r4, r0
   12128:	mov	r0, r5
   1212c:	bl	13934 <__assert_fail@plt+0x23d4>
   12130:	mov	r1, r0
   12134:	cmp	r0, #0
   12138:	bne	1210c <__assert_fail@plt+0xbac>
   1213c:	b	12144 <__assert_fail@plt+0xbe4>
   12140:	mov	r4, #1
   12144:	bl	11410 <__errno_location@plt>
   12148:	ldr	r6, [r0]
   1214c:	cmp	r6, #0
   12150:	beq	1218c <__assert_fail@plt+0xc2c>
   12154:	ldrb	r0, [r8, #13]
   12158:	mov	r4, #0
   1215c:	cmp	r0, #0
   12160:	bne	1218c <__assert_fail@plt+0xc2c>
   12164:	mov	r4, #0
   12168:	movw	r1, #44248	; 0xacd8
   1216c:	movt	r1, #1
   12170:	mov	r0, #0
   12174:	mov	r2, #5
   12178:	bl	112d8 <dcgettext@plt>
   1217c:	mov	r2, r0
   12180:	mov	r0, #0
   12184:	mov	r1, r6
   12188:	bl	11368 <error@plt>
   1218c:	mov	r0, r5
   12190:	bl	137a8 <__assert_fail@plt+0x2248>
   12194:	cmp	r0, #0
   12198:	beq	121cc <__assert_fail@plt+0xc6c>
   1219c:	bl	11410 <__errno_location@plt>
   121a0:	ldr	r5, [r0]
   121a4:	mov	r4, #0
   121a8:	movw	r1, #44264	; 0xace8
   121ac:	movt	r1, #1
   121b0:	mov	r0, #0
   121b4:	mov	r2, #5
   121b8:	bl	112d8 <dcgettext@plt>
   121bc:	mov	r2, r0
   121c0:	mov	r0, #0
   121c4:	mov	r1, r5
   121c8:	bl	11368 <error@plt>
   121cc:	mov	r0, r4
   121d0:	sub	sp, fp, #28
   121d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121dc:	add	fp, sp, #28
   121e0:	sub	sp, sp, #148	; 0x94
   121e4:	mov	ip, r3
   121e8:	str	r2, [sp, #32]
   121ec:	mov	r8, r1
   121f0:	mov	r9, r0
   121f4:	ldr	r7, [r1, #24]
   121f8:	ldr	r6, [r1, #28]
   121fc:	ldrh	r0, [r1, #56]	; 0x38
   12200:	sub	r0, r0, #1
   12204:	ldr	r4, [fp, #16]
   12208:	cmp	r0, #9
   1220c:	bhi	12428 <__assert_fail@plt+0xec8>
   12210:	add	r1, pc, #0
   12214:	ldr	pc, [r1, r0, lsl #2]
   12218:	andeq	r2, r1, r0, asr #4
   1221c:			; <UNDEFINED> instruction: 0x000123bc
   12220:	andeq	r2, r1, r8, lsr #8
   12224:	strdeq	r2, [r1], -ip
   12228:	andeq	r2, r1, r8, lsr #8
   1222c:	andeq	r2, r1, ip, lsl r4
   12230:	andeq	r2, r1, r8, asr #10
   12234:	andeq	r2, r1, r8, lsr #8
   12238:	andeq	r2, r1, r8, lsr #8
   1223c:	andeq	r2, r1, ip, lsr #6
   12240:	ldrb	r0, [r4, #4]
   12244:	cmp	r0, #0
   12248:	beq	12428 <__assert_fail@plt+0xec8>
   1224c:	ldr	r0, [r4, #8]
   12250:	mov	sl, #1
   12254:	cmp	r0, #0
   12258:	beq	127a4 <__assert_fail@plt+0x1244>
   1225c:	ldrd	r2, [r0]
   12260:	ldrd	r4, [r8, #160]	; 0xa0
   12264:	eor	r1, r5, r3
   12268:	eor	r2, r4, r2
   1226c:	orrs	r1, r2, r1
   12270:	bne	127a4 <__assert_fail@plt+0x1244>
   12274:	ldrd	r0, [r0, #8]
   12278:	ldrd	r2, [r8, #64]	; 0x40
   1227c:	eor	r1, r3, r1
   12280:	eor	r0, r2, r0
   12284:	orrs	r0, r0, r1
   12288:	bne	127a4 <__assert_fail@plt+0x1244>
   1228c:	movw	r1, #46423	; 0xb557
   12290:	movt	r1, #1
   12294:	mov	r0, r6
   12298:	bl	11260 <strcmp@plt>
   1229c:	cmp	r0, #0
   122a0:	beq	129e0 <__assert_fail@plt+0x1480>
   122a4:	movw	r1, #44326	; 0xad26
   122a8:	movt	r1, #1
   122ac:	mov	r0, #0
   122b0:	mov	r2, #5
   122b4:	bl	112d8 <dcgettext@plt>
   122b8:	mov	r4, r0
   122bc:	mov	r0, #0
   122c0:	mov	r1, #4
   122c4:	mov	r2, r6
   122c8:	bl	1773c <__assert_fail@plt+0x61dc>
   122cc:	mov	r5, r0
   122d0:	movw	r2, #46423	; 0xb557
   122d4:	movt	r2, #1
   122d8:	mov	r0, #1
   122dc:	mov	r1, #4
   122e0:	bl	1773c <__assert_fail@plt+0x61dc>
   122e4:	str	r0, [sp]
   122e8:	mov	r0, #0
   122ec:	mov	r1, #0
   122f0:	mov	r2, r4
   122f4:	mov	r3, r5
   122f8:	b	12a14 <__assert_fail@plt+0x14b4>
   122fc:	str	r6, [sp, #28]
   12300:	str	r9, [sp, #24]
   12304:	ldrb	r0, [r4, #13]
   12308:	mov	r1, #0
   1230c:	str	r1, [sp, #36]	; 0x24
   12310:	mov	r5, #1
   12314:	cmp	r0, #0
   12318:	bne	125a4 <__assert_fail@plt+0x1044>
   1231c:	ldr	r6, [r8, #32]
   12320:	movw	r1, #44450	; 0xada2
   12324:	movt	r1, #1
   12328:	b	12370 <__assert_fail@plt+0xe10>
   1232c:	ldr	r0, [r8, #48]	; 0x30
   12330:	cmp	r0, #0
   12334:	bne	12344 <__assert_fail@plt+0xde4>
   12338:	ldr	r0, [r8, #16]
   1233c:	cmp	r0, #0
   12340:	beq	128a0 <__assert_fail@plt+0x1340>
   12344:	str	r6, [sp, #28]
   12348:	str	r9, [sp, #24]
   1234c:	ldrb	r0, [r4, #13]
   12350:	mov	r1, #0
   12354:	str	r1, [sp, #36]	; 0x24
   12358:	mov	r5, #1
   1235c:	cmp	r0, #0
   12360:	bne	125a4 <__assert_fail@plt+0x1044>
   12364:	ldr	r6, [r8, #32]
   12368:	movw	r1, #44433	; 0xad91
   1236c:	movt	r1, #1
   12370:	mov	r0, #0
   12374:	mov	r2, #5
   12378:	mov	sl, r4
   1237c:	mov	r7, ip
   12380:	bl	112d8 <dcgettext@plt>
   12384:	mov	r4, r0
   12388:	mov	r0, #4
   1238c:	ldr	r1, [sp, #28]
   12390:	bl	177ec <__assert_fail@plt+0x628c>
   12394:	mov	r3, r0
   12398:	mov	r0, #0
   1239c:	mov	r1, r6
   123a0:	mov	r2, #0
   123a4:	str	r2, [sp, #36]	; 0x24
   123a8:	mov	r2, r4
   123ac:	bl	11368 <error@plt>
   123b0:	mov	ip, r7
   123b4:	mov	r4, sl
   123b8:	b	125a4 <__assert_fail@plt+0x1044>
   123bc:	mov	r0, r9
   123c0:	mov	r1, r8
   123c4:	mov	r5, ip
   123c8:	bl	18b40 <__assert_fail@plt+0x75e0>
   123cc:	mov	ip, r5
   123d0:	cmp	r0, #0
   123d4:	beq	12428 <__assert_fail@plt+0xec8>
   123d8:	mov	sl, #0
   123dc:	movw	r1, #44475	; 0xadbb
   123e0:	movt	r1, #1
   123e4:	mov	r0, #0
   123e8:	mov	r2, #5
   123ec:	bl	112d8 <dcgettext@plt>
   123f0:	mov	r4, r0
   123f4:	mov	r0, #0
   123f8:	mov	r1, #3
   123fc:	mov	r2, r6
   12400:	bl	178a0 <__assert_fail@plt+0x6340>
   12404:	mov	r3, r0
   12408:	mov	r0, #0
   1240c:	mov	r1, #0
   12410:	mov	r2, r4
   12414:	bl	11368 <error@plt>
   12418:	b	127a4 <__assert_fail@plt+0x1244>
   1241c:	ldrb	r0, [r4, #4]
   12420:	cmp	r0, #0
   12424:	beq	125d0 <__assert_fail@plt+0x1070>
   12428:	str	r7, [sp, #20]
   1242c:	str	r6, [sp, #28]
   12430:	ldr	r5, [fp, #12]
   12434:	ldr	r6, [fp, #8]
   12438:	and	r0, r5, r6
   1243c:	cmn	r0, #1
   12440:	bne	12458 <__assert_fail@plt+0xef8>
   12444:	ldr	r0, [r4]
   12448:	cmp	r0, #2
   1244c:	ldreq	r0, [r4, #8]
   12450:	cmpeq	r0, #0
   12454:	beq	125d8 <__assert_fail@plt+0x1078>
   12458:	ldrb	r0, [r4, #12]
   1245c:	add	r1, r8, #64	; 0x40
   12460:	str	r1, [sp, #36]	; 0x24
   12464:	cmp	r0, #0
   12468:	beq	12518 <__assert_fail@plt+0xfb8>
   1246c:	ldr	r0, [r8, #80]	; 0x50
   12470:	and	r0, r0, #61440	; 0xf000
   12474:	cmp	r0, #40960	; 0xa000
   12478:	bne	12518 <__assert_fail@plt+0xfb8>
   1247c:	ldr	r0, [r9, #32]
   12480:	add	r2, sp, #40	; 0x28
   12484:	mov	sl, #0
   12488:	ldr	r1, [sp, #20]
   1248c:	str	r2, [sp, #36]	; 0x24
   12490:	mov	r3, #0
   12494:	str	ip, [sp, #16]
   12498:	bl	19f98 <__assert_fail@plt+0x8a38>
   1249c:	ldr	ip, [sp, #16]
   124a0:	ldr	r4, [fp, #16]
   124a4:	cmp	r0, #0
   124a8:	beq	12518 <__assert_fail@plt+0xfb8>
   124ac:	str	r9, [sp, #24]
   124b0:	ldrb	r0, [r4, #13]
   124b4:	mov	r5, #1
   124b8:	add	r1, sp, #40	; 0x28
   124bc:	str	r1, [sp, #36]	; 0x24
   124c0:	cmp	r0, #0
   124c4:	bne	1269c <__assert_fail@plt+0x113c>
   124c8:	bl	11410 <__errno_location@plt>
   124cc:	ldr	r6, [r0]
   124d0:	mov	sl, #0
   124d4:	movw	r1, #44661	; 0xae75
   124d8:	movt	r1, #1
   124dc:	mov	r0, #0
   124e0:	mov	r2, #5
   124e4:	bl	112d8 <dcgettext@plt>
   124e8:	mov	r4, r0
   124ec:	mov	r0, #4
   124f0:	ldr	r1, [sp, #28]
   124f4:	bl	177ec <__assert_fail@plt+0x628c>
   124f8:	mov	r3, r0
   124fc:	mov	r0, #0
   12500:	mov	r1, r6
   12504:	mov	r2, r4
   12508:	bl	11368 <error@plt>
   1250c:	ldr	ip, [sp, #16]
   12510:	ldr	r4, [fp, #16]
   12514:	b	1269c <__assert_fail@plt+0x113c>
   12518:	cmn	r6, #1
   1251c:	beq	125b0 <__assert_fail@plt+0x1050>
   12520:	ldr	r0, [sp, #36]	; 0x24
   12524:	ldr	r1, [r0, #24]
   12528:	sub	r0, r1, r6
   1252c:	clz	r0, r0
   12530:	lsr	lr, r0, #5
   12534:	cmn	r5, #1
   12538:	beq	125f0 <__assert_fail@plt+0x1090>
   1253c:	cmp	r1, r6
   12540:	beq	125b8 <__assert_fail@plt+0x1058>
   12544:	b	125f0 <__assert_fail@plt+0x1090>
   12548:	str	r6, [sp, #28]
   1254c:	str	r9, [sp, #24]
   12550:	ldrb	r0, [r4, #13]
   12554:	mov	r1, #0
   12558:	str	r1, [sp, #36]	; 0x24
   1255c:	mov	r5, #1
   12560:	cmp	r0, #0
   12564:	bne	125a4 <__assert_fail@plt+0x1044>
   12568:	ldr	r6, [r8, #32]
   1256c:	mov	r0, #0
   12570:	mov	r1, #3
   12574:	ldr	r2, [sp, #28]
   12578:	mov	r7, ip
   1257c:	bl	178a0 <__assert_fail@plt+0x6340>
   12580:	mov	r3, r0
   12584:	movw	r2, #43408	; 0xa990
   12588:	movt	r2, #1
   1258c:	mov	r0, #0
   12590:	mov	r1, r6
   12594:	mov	r6, #0
   12598:	str	r6, [sp, #36]	; 0x24
   1259c:	bl	11368 <error@plt>
   125a0:	mov	ip, r7
   125a4:	mov	r7, #1
   125a8:	mov	sl, #0
   125ac:	b	126a0 <__assert_fail@plt+0x1140>
   125b0:	cmn	r5, #1
   125b4:	beq	125ec <__assert_fail@plt+0x108c>
   125b8:	ldr	r0, [sp, #36]	; 0x24
   125bc:	ldr	r0, [r0, #28]
   125c0:	sub	r0, r0, r5
   125c4:	clz	r0, r0
   125c8:	lsr	lr, r0, #5
   125cc:	b	125f0 <__assert_fail@plt+0x1090>
   125d0:	mov	sl, #1
   125d4:	b	127a4 <__assert_fail@plt+0x1244>
   125d8:	ldrb	r0, [r4, #12]
   125dc:	cmp	r0, #0
   125e0:	bne	12458 <__assert_fail@plt+0xef8>
   125e4:	add	r0, r8, #64	; 0x40
   125e8:	str	r0, [sp, #36]	; 0x24
   125ec:	mov	lr, #1
   125f0:	ldrh	r1, [r8, #56]	; 0x38
   125f4:	cmp	r1, #6
   125f8:	bhi	12614 <__assert_fail@plt+0x10b4>
   125fc:	mov	r2, #1
   12600:	mov	r3, #86	; 0x56
   12604:	tst	r3, r2, lsl r1
   12608:	ldrne	r1, [r4, #8]
   1260c:	cmpne	r1, #0
   12610:	bne	127b0 <__assert_fail@plt+0x1250>
   12614:	mov	sl, #1
   12618:	cmp	lr, #0
   1261c:	str	r9, [sp, #24]
   12620:	beq	12698 <__assert_fail@plt+0x1138>
   12624:	ldr	r0, [r9, #32]
   12628:	ldrb	r1, [r4, #12]
   1262c:	cmp	r1, #0
   12630:	beq	12860 <__assert_fail@plt+0x1300>
   12634:	str	ip, [sp, #16]
   12638:	str	ip, [sp]
   1263c:	ldr	r1, [fp, #8]
   12640:	str	r1, [sp, #4]
   12644:	ldr	r1, [fp, #12]
   12648:	str	r1, [sp, #8]
   1264c:	ldr	r1, [sp, #20]
   12650:	ldr	r2, [sp, #36]	; 0x24
   12654:	ldr	r3, [sp, #32]
   12658:	bl	12a60 <__assert_fail@plt+0x1500>
   1265c:	sub	r0, r0, #2
   12660:	cmp	r0, #4
   12664:	bhi	12a5c <__assert_fail@plt+0x14fc>
   12668:	mov	r7, #0
   1266c:	add	r1, pc, #12
   12670:	mov	r5, #1
   12674:	ldr	r4, [fp, #16]
   12678:	ldr	ip, [sp, #16]
   1267c:	ldr	pc, [r1, r0, lsl #2]
   12680:	andeq	r2, r1, r0, lsr #13
   12684:	muleq	r1, r4, r6
   12688:	muleq	r1, r4, r6
   1268c:	andeq	r2, r1, ip, asr #17
   12690:	strdeq	r2, [r1], -r4
   12694:	mov	sl, #0
   12698:	mov	r5, #1
   1269c:	mov	r7, #1
   126a0:	ldr	r0, [r4]
   126a4:	cmp	r0, #2
   126a8:	beq	12788 <__assert_fail@plt+0x1228>
   126ac:	eor	r1, sl, #1
   126b0:	orrs	r1, r7, r1
   126b4:	eorseq	r1, r5, #1
   126b8:	beq	126f0 <__assert_fail@plt+0x1190>
   126bc:	cmp	r0, #0
   126c0:	bne	12788 <__assert_fail@plt+0x1228>
   126c4:	mov	r7, #1
   126c8:	cmp	r5, #0
   126cc:	movwne	r7, #4
   126d0:	cmp	sl, #0
   126d4:	moveq	r7, #3
   126d8:	ldr	r0, [sp, #36]	; 0x24
   126dc:	cmp	r0, #0
   126e0:	bne	1273c <__assert_fail@plt+0x11dc>
   126e4:	mov	r9, #0
   126e8:	mov	r5, #0
   126ec:	b	12758 <__assert_fail@plt+0x11f8>
   126f0:	ldr	r1, [sp, #32]
   126f4:	cmn	r1, #1
   126f8:	beq	12710 <__assert_fail@plt+0x11b0>
   126fc:	ldr	r1, [sp, #36]	; 0x24
   12700:	ldr	r1, [r1, #24]
   12704:	ldr	r2, [sp, #32]
   12708:	cmp	r1, r2
   1270c:	bne	12728 <__assert_fail@plt+0x11c8>
   12710:	cmn	ip, #1
   12714:	beq	126bc <__assert_fail@plt+0x115c>
   12718:	ldr	r1, [sp, #36]	; 0x24
   1271c:	ldr	r1, [r1, #28]
   12720:	cmp	r1, ip
   12724:	beq	126bc <__assert_fail@plt+0x115c>
   12728:	mov	r7, #1
   1272c:	cmp	r5, #0
   12730:	movwne	r7, #2
   12734:	cmp	sl, #0
   12738:	moveq	r7, #3
   1273c:	ldr	r5, [sp, #36]	; 0x24
   12740:	ldr	r0, [r5, #24]
   12744:	bl	12058 <__assert_fail@plt+0xaf8>
   12748:	mov	r9, r0
   1274c:	ldr	r0, [r5, #28]
   12750:	bl	12018 <__assert_fail@plt+0xab8>
   12754:	mov	r5, r0
   12758:	ldr	r0, [r4, #16]
   1275c:	ldr	r1, [r4, #20]
   12760:	stm	sp, {r0, r1}
   12764:	ldr	r0, [sp, #28]
   12768:	mov	r1, r7
   1276c:	mov	r2, r9
   12770:	mov	r3, r5
   12774:	bl	12c10 <__assert_fail@plt+0x16b0>
   12778:	mov	r0, r9
   1277c:	bl	12fd4 <__assert_fail@plt+0x1a74>
   12780:	mov	r0, r5
   12784:	bl	12fd4 <__assert_fail@plt+0x1a74>
   12788:	ldrb	r0, [r4, #4]
   1278c:	cmp	r0, #0
   12790:	bne	127a4 <__assert_fail@plt+0x1244>
   12794:	ldr	r0, [sp, #24]
   12798:	mov	r1, r8
   1279c:	mov	r2, #4
   127a0:	bl	14c0c <__assert_fail@plt+0x36ac>
   127a4:	mov	r0, sl
   127a8:	sub	sp, fp, #28
   127ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127b0:	ldrd	r2, [r1]
   127b4:	ldr	r6, [sp, #36]	; 0x24
   127b8:	ldr	r0, [r6, #96]	; 0x60
   127bc:	ldr	r7, [r6, #100]	; 0x64
   127c0:	eor	r3, r7, r3
   127c4:	eor	r2, r0, r2
   127c8:	orrs	r2, r2, r3
   127cc:	bne	12614 <__assert_fail@plt+0x10b4>
   127d0:	mov	r5, r9
   127d4:	ldrd	r2, [r1, #8]
   127d8:	ldm	r6, {r0, r7}
   127dc:	eor	r1, r7, r3
   127e0:	eor	r2, r0, r2
   127e4:	orrs	r1, r2, r1
   127e8:	bne	12614 <__assert_fail@plt+0x10b4>
   127ec:	movw	r1, #46423	; 0xb557
   127f0:	movt	r1, #1
   127f4:	ldr	r5, [sp, #28]
   127f8:	mov	r0, r5
   127fc:	bl	11260 <strcmp@plt>
   12800:	cmp	r0, #0
   12804:	beq	12974 <__assert_fail@plt+0x1414>
   12808:	movw	r1, #44326	; 0xad26
   1280c:	movt	r1, #1
   12810:	mov	r0, #0
   12814:	mov	r2, #5
   12818:	bl	112d8 <dcgettext@plt>
   1281c:	mov	r4, r0
   12820:	mov	r0, #0
   12824:	mov	r1, #4
   12828:	mov	r2, r5
   1282c:	bl	1773c <__assert_fail@plt+0x61dc>
   12830:	mov	r5, r0
   12834:	movw	r2, #46423	; 0xb557
   12838:	movt	r2, #1
   1283c:	mov	r0, #1
   12840:	mov	r1, #4
   12844:	bl	1773c <__assert_fail@plt+0x61dc>
   12848:	str	r0, [sp]
   1284c:	mov	r0, #0
   12850:	mov	r1, #0
   12854:	mov	r2, r4
   12858:	mov	r3, r5
   1285c:	b	129a8 <__assert_fail@plt+0x1448>
   12860:	ldr	r1, [sp, #20]
   12864:	ldr	r2, [sp, #32]
   12868:	mov	r6, ip
   1286c:	mov	r3, ip
   12870:	bl	12eac <__assert_fail@plt+0x194c>
   12874:	cmp	r0, #0
   12878:	beq	128b8 <__assert_fail@plt+0x1358>
   1287c:	bl	11410 <__errno_location@plt>
   12880:	ldr	r0, [r0]
   12884:	mov	r5, #0
   12888:	cmp	r0, #95	; 0x5f
   1288c:	ldr	r4, [fp, #16]
   12890:	mov	ip, r6
   12894:	bne	128f4 <__assert_fail@plt+0x1394>
   12898:	mov	r7, #0
   1289c:	b	126a0 <__assert_fail@plt+0x1140>
   128a0:	mov	sl, #1
   128a4:	str	sl, [r8, #16]
   128a8:	mov	r0, r9
   128ac:	mov	r1, r8
   128b0:	mov	r2, #1
   128b4:	b	127a0 <__assert_fail@plt+0x1240>
   128b8:	mov	r7, #0
   128bc:	mov	r5, #1
   128c0:	ldr	r4, [fp, #16]
   128c4:	mov	ip, r6
   128c8:	b	126a0 <__assert_fail@plt+0x1140>
   128cc:	ldr	r0, [sp, #24]
   128d0:	ldr	r0, [r0, #32]
   128d4:	ldr	r1, [sp, #20]
   128d8:	ldr	r2, [sp, #32]
   128dc:	mov	r3, ip
   128e0:	bl	12e8c <__assert_fail@plt+0x192c>
   128e4:	ldr	ip, [sp, #16]
   128e8:	ldr	r4, [fp, #16]
   128ec:	cmp	r0, #0
   128f0:	beq	129d8 <__assert_fail@plt+0x1478>
   128f4:	ldrb	r0, [r4, #13]
   128f8:	mov	r7, #0
   128fc:	cmp	r0, #0
   12900:	bne	1296c <__assert_fail@plt+0x140c>
   12904:	movw	r0, #44708	; 0xaea4
   12908:	movt	r0, #1
   1290c:	movw	r4, #44683	; 0xae8b
   12910:	movt	r4, #1
   12914:	ldr	r1, [sp, #32]
   12918:	cmn	r1, #1
   1291c:	moveq	r4, r0
   12920:	mov	r6, ip
   12924:	bl	11410 <__errno_location@plt>
   12928:	ldr	r5, [r0]
   1292c:	mov	r7, #0
   12930:	mov	r0, #0
   12934:	mov	r1, r4
   12938:	mov	r2, #5
   1293c:	bl	112d8 <dcgettext@plt>
   12940:	mov	r4, r0
   12944:	mov	r0, #4
   12948:	ldr	r1, [sp, #28]
   1294c:	bl	177ec <__assert_fail@plt+0x628c>
   12950:	mov	r3, r0
   12954:	mov	r0, #0
   12958:	mov	r1, r5
   1295c:	mov	r2, r4
   12960:	bl	11368 <error@plt>
   12964:	mov	ip, r6
   12968:	ldr	r4, [fp, #16]
   1296c:	mov	r5, #1
   12970:	b	125a8 <__assert_fail@plt+0x1048>
   12974:	movw	r1, #44281	; 0xacf9
   12978:	movt	r1, #1
   1297c:	mov	r0, #0
   12980:	mov	r2, #5
   12984:	bl	112d8 <dcgettext@plt>
   12988:	mov	r4, r0
   1298c:	mov	r0, #4
   12990:	mov	r1, r5
   12994:	bl	177ec <__assert_fail@plt+0x628c>
   12998:	mov	r3, r0
   1299c:	mov	r0, #0
   129a0:	mov	r1, #0
   129a4:	mov	r2, r4
   129a8:	bl	11368 <error@plt>
   129ac:	mov	sl, #0
   129b0:	movw	r1, #44384	; 0xad60
   129b4:	movt	r1, #1
   129b8:	mov	r0, #0
   129bc:	mov	r2, #5
   129c0:	bl	112d8 <dcgettext@plt>
   129c4:	mov	r2, r0
   129c8:	mov	r0, #0
   129cc:	mov	r1, #0
   129d0:	bl	11368 <error@plt>
   129d4:	b	127a4 <__assert_fail@plt+0x1244>
   129d8:	mov	r5, #1
   129dc:	b	126a0 <__assert_fail@plt+0x1140>
   129e0:	movw	r1, #44281	; 0xacf9
   129e4:	movt	r1, #1
   129e8:	mov	r0, #0
   129ec:	mov	r2, #5
   129f0:	bl	112d8 <dcgettext@plt>
   129f4:	mov	r4, r0
   129f8:	mov	r0, #4
   129fc:	mov	r1, r6
   12a00:	bl	177ec <__assert_fail@plt+0x628c>
   12a04:	mov	r3, r0
   12a08:	mov	r0, #0
   12a0c:	mov	r1, #0
   12a10:	mov	r2, r4
   12a14:	bl	11368 <error@plt>
   12a18:	mov	sl, #0
   12a1c:	movw	r1, #44384	; 0xad60
   12a20:	movt	r1, #1
   12a24:	mov	r0, #0
   12a28:	mov	r2, #5
   12a2c:	bl	112d8 <dcgettext@plt>
   12a30:	mov	r2, r0
   12a34:	mov	r0, #0
   12a38:	mov	r1, #0
   12a3c:	bl	11368 <error@plt>
   12a40:	mov	r0, r9
   12a44:	mov	r1, r8
   12a48:	mov	r2, #4
   12a4c:	bl	14c0c <__assert_fail@plt+0x36ac>
   12a50:	mov	r0, r9
   12a54:	bl	13934 <__assert_fail@plt+0x23d4>
   12a58:	b	127a4 <__assert_fail@plt+0x1244>
   12a5c:	bl	11518 <abort@plt>
   12a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a64:	add	fp, sp, #28
   12a68:	sub	sp, sp, #116	; 0x74
   12a6c:	mov	r5, r0
   12a70:	ldr	r8, [fp, #12]
   12a74:	ldr	r0, [fp, #16]
   12a78:	and	r0, r0, r8
   12a7c:	mov	r7, #5
   12a80:	cmn	r0, #1
   12a84:	beq	12bec <__assert_fail@plt+0x168c>
   12a88:	mov	r6, r2
   12a8c:	mov	r4, r1
   12a90:	ldr	r0, [r2, #16]
   12a94:	and	r0, r0, #61440	; 0xf000
   12a98:	cmp	r0, #32768	; 0x8000
   12a9c:	beq	12ab4 <__assert_fail@plt+0x1554>
   12aa0:	cmp	r0, #16384	; 0x4000
   12aa4:	bne	12bec <__assert_fail@plt+0x168c>
   12aa8:	str	r3, [sp, #4]
   12aac:	mov	r7, #18688	; 0x4900
   12ab0:	b	12abc <__assert_fail@plt+0x155c>
   12ab4:	str	r3, [sp, #4]
   12ab8:	mov	r7, #2304	; 0x900
   12abc:	mov	r0, r5
   12ac0:	mov	r1, r4
   12ac4:	mov	r2, r7
   12ac8:	bl	113f8 <openat64@plt>
   12acc:	mov	r9, r0
   12ad0:	cmn	r0, #1
   12ad4:	ble	12b9c <__assert_fail@plt+0x163c>
   12ad8:	add	r1, sp, #8
   12adc:	mov	r0, r9
   12ae0:	bl	19f78 <__assert_fail@plt+0x8a18>
   12ae4:	mov	r7, #6
   12ae8:	cmp	r0, #0
   12aec:	bne	12b80 <__assert_fail@plt+0x1620>
   12af0:	ldrd	r0, [r6, #96]	; 0x60
   12af4:	ldr	r2, [sp, #104]	; 0x68
   12af8:	ldr	r3, [sp, #108]	; 0x6c
   12afc:	eor	r1, r1, r3
   12b00:	eor	r0, r0, r2
   12b04:	orrs	r0, r0, r1
   12b08:	mov	r7, #4
   12b0c:	bne	12b80 <__assert_fail@plt+0x1620>
   12b10:	ldrd	r0, [r6]
   12b14:	ldr	r2, [sp, #8]
   12b18:	ldr	r3, [sp, #12]
   12b1c:	eor	r1, r1, r3
   12b20:	eor	r0, r0, r2
   12b24:	orrs	r0, r0, r1
   12b28:	bne	12b80 <__assert_fail@plt+0x1620>
   12b2c:	cmn	r8, #1
   12b30:	beq	12b44 <__assert_fail@plt+0x15e4>
   12b34:	mov	r7, #2
   12b38:	ldr	r0, [sp, #32]
   12b3c:	cmp	r0, r8
   12b40:	bne	12b80 <__assert_fail@plt+0x1620>
   12b44:	ldr	r0, [fp, #16]
   12b48:	cmn	r0, #1
   12b4c:	beq	12b64 <__assert_fail@plt+0x1604>
   12b50:	mov	r7, #2
   12b54:	ldr	r0, [sp, #36]	; 0x24
   12b58:	ldr	r1, [fp, #16]
   12b5c:	cmp	r0, r1
   12b60:	bne	12b80 <__assert_fail@plt+0x1620>
   12b64:	ldr	r2, [fp, #8]
   12b68:	mov	r0, r9
   12b6c:	ldr	r1, [sp, #4]
   12b70:	bl	11404 <fchown@plt>
   12b74:	cmp	r0, #0
   12b78:	mov	r7, #6
   12b7c:	beq	12bf8 <__assert_fail@plt+0x1698>
   12b80:	bl	11410 <__errno_location@plt>
   12b84:	mov	r4, r0
   12b88:	ldr	r5, [r0]
   12b8c:	mov	r0, r9
   12b90:	bl	11524 <close@plt>
   12b94:	str	r5, [r4]
   12b98:	b	12bec <__assert_fail@plt+0x168c>
   12b9c:	bl	11410 <__errno_location@plt>
   12ba0:	mov	sl, r0
   12ba4:	ldr	r0, [r0]
   12ba8:	cmp	r0, #13
   12bac:	bne	12bdc <__assert_fail@plt+0x167c>
   12bb0:	ldr	r0, [r6, #16]
   12bb4:	and	r0, r0, #61440	; 0xf000
   12bb8:	cmp	r0, #32768	; 0x8000
   12bbc:	bne	12bdc <__assert_fail@plt+0x167c>
   12bc0:	orr	r2, r7, #1
   12bc4:	mov	r0, r5
   12bc8:	mov	r1, r4
   12bcc:	bl	113f8 <openat64@plt>
   12bd0:	mov	r9, r0
   12bd4:	cmn	r0, #1
   12bd8:	bgt	12ad8 <__assert_fail@plt+0x1578>
   12bdc:	ldr	r0, [sl]
   12be0:	mov	r7, #6
   12be4:	cmp	r0, #13
   12be8:	movweq	r7, #5
   12bec:	mov	r0, r7
   12bf0:	sub	sp, fp, #28
   12bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bf8:	mov	r0, r9
   12bfc:	bl	11524 <close@plt>
   12c00:	mov	r7, #6
   12c04:	cmp	r0, #0
   12c08:	movweq	r7, #2
   12c0c:	b	12bec <__assert_fail@plt+0x168c>
   12c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c14:	add	fp, sp, #28
   12c18:	sub	sp, sp, #12
   12c1c:	mov	sl, r0
   12c20:	cmp	r1, #1
   12c24:	bne	12c64 <__assert_fail@plt+0x1704>
   12c28:	movw	r1, #44729	; 0xaeb9
   12c2c:	movt	r1, #1
   12c30:	mov	r0, #0
   12c34:	mov	r2, #5
   12c38:	bl	112d8 <dcgettext@plt>
   12c3c:	mov	r4, r0
   12c40:	mov	r0, #4
   12c44:	mov	r1, sl
   12c48:	bl	177ec <__assert_fail@plt+0x628c>
   12c4c:	mov	r2, r0
   12c50:	mov	r0, #1
   12c54:	mov	r1, r4
   12c58:	sub	sp, fp, #28
   12c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c60:	b	11434 <__printf_chk@plt>
   12c64:	mov	r4, r3
   12c68:	mov	r7, r2
   12c6c:	mov	r6, r1
   12c70:	ldr	r8, [fp, #12]
   12c74:	ldr	r5, [fp, #8]
   12c78:	mov	r0, r5
   12c7c:	mov	r1, r8
   12c80:	bl	12e00 <__assert_fail@plt+0x18a0>
   12c84:	str	r0, [sp, #8]
   12c88:	cmp	r5, #0
   12c8c:	moveq	r7, r5
   12c90:	cmp	r8, #0
   12c94:	moveq	r4, r8
   12c98:	mov	r0, r7
   12c9c:	mov	r1, r4
   12ca0:	bl	12e00 <__assert_fail@plt+0x18a0>
   12ca4:	mov	r9, r0
   12ca8:	cmp	r6, #4
   12cac:	beq	12cf0 <__assert_fail@plt+0x1790>
   12cb0:	cmp	r6, #3
   12cb4:	beq	12cd4 <__assert_fail@plt+0x1774>
   12cb8:	cmp	r6, #2
   12cbc:	bne	12dfc <__assert_fail@plt+0x189c>
   12cc0:	cmp	r5, #0
   12cc4:	beq	12d04 <__assert_fail@plt+0x17a4>
   12cc8:	movw	r1, #44785	; 0xaef1
   12ccc:	movt	r1, #1
   12cd0:	b	12dac <__assert_fail@plt+0x184c>
   12cd4:	cmp	r9, #0
   12cd8:	beq	12d18 <__assert_fail@plt+0x17b8>
   12cdc:	cmp	r5, #0
   12ce0:	beq	12d78 <__assert_fail@plt+0x1818>
   12ce4:	movw	r1, #44889	; 0xaf59
   12ce8:	movt	r1, #1
   12cec:	b	12dac <__assert_fail@plt+0x184c>
   12cf0:	cmp	r5, #0
   12cf4:	beq	12d64 <__assert_fail@plt+0x1804>
   12cf8:	movw	r1, #45091	; 0xb023
   12cfc:	movt	r1, #1
   12d00:	b	12dac <__assert_fail@plt+0x184c>
   12d04:	cmp	r8, #0
   12d08:	beq	12d8c <__assert_fail@plt+0x182c>
   12d0c:	movw	r1, #44824	; 0xaf18
   12d10:	movt	r1, #1
   12d14:	b	12dac <__assert_fail@plt+0x184c>
   12d18:	movw	r0, #45055	; 0xafff
   12d1c:	movt	r0, #1
   12d20:	movw	r2, #44981	; 0xafb5
   12d24:	movt	r2, #1
   12d28:	cmp	r8, #0
   12d2c:	movne	r2, r0
   12d30:	movw	r1, #45015	; 0xafd7
   12d34:	movt	r1, #1
   12d38:	cmp	r5, #0
   12d3c:	moveq	r1, r2
   12d40:	mov	r0, #0
   12d44:	mov	r2, #5
   12d48:	bl	112d8 <dcgettext@plt>
   12d4c:	mov	r7, r0
   12d50:	mov	r0, r9
   12d54:	bl	12fd4 <__assert_fail@plt+0x1a74>
   12d58:	ldr	r9, [sp, #8]
   12d5c:	mov	r4, #0
   12d60:	b	12dc0 <__assert_fail@plt+0x1860>
   12d64:	cmp	r8, #0
   12d68:	beq	12d98 <__assert_fail@plt+0x1838>
   12d6c:	movw	r1, #45123	; 0xb043
   12d70:	movt	r1, #1
   12d74:	b	12dac <__assert_fail@plt+0x184c>
   12d78:	cmp	r8, #0
   12d7c:	beq	12da4 <__assert_fail@plt+0x1844>
   12d80:	movw	r1, #44937	; 0xaf89
   12d84:	movt	r1, #1
   12d88:	b	12dac <__assert_fail@plt+0x184c>
   12d8c:	movw	r1, #44859	; 0xaf3b
   12d90:	movt	r1, #1
   12d94:	b	12dac <__assert_fail@plt+0x184c>
   12d98:	movw	r1, #45151	; 0xb05f
   12d9c:	movt	r1, #1
   12da0:	b	12dac <__assert_fail@plt+0x184c>
   12da4:	movw	r1, #44981	; 0xafb5
   12da8:	movt	r1, #1
   12dac:	mov	r0, #0
   12db0:	mov	r2, #5
   12db4:	bl	112d8 <dcgettext@plt>
   12db8:	mov	r7, r0
   12dbc:	ldr	r4, [sp, #8]
   12dc0:	mov	r0, #4
   12dc4:	mov	r1, sl
   12dc8:	bl	177ec <__assert_fail@plt+0x628c>
   12dcc:	mov	r2, r0
   12dd0:	str	r4, [sp]
   12dd4:	mov	r0, #1
   12dd8:	mov	r1, r7
   12ddc:	mov	r3, r9
   12de0:	bl	11434 <__printf_chk@plt>
   12de4:	mov	r0, r9
   12de8:	bl	12fd4 <__assert_fail@plt+0x1a74>
   12dec:	mov	r0, r4
   12df0:	sub	sp, fp, #28
   12df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12df8:	b	12fd4 <__assert_fail@plt+0x1a74>
   12dfc:	bl	11518 <abort@plt>
   12e00:	push	{r4, r5, r6, sl, fp, lr}
   12e04:	add	fp, sp, #16
   12e08:	mov	r4, r1
   12e0c:	cmp	r0, #0
   12e10:	beq	12e64 <__assert_fail@plt+0x1904>
   12e14:	mov	r5, r0
   12e18:	cmp	r4, #0
   12e1c:	beq	12e80 <__assert_fail@plt+0x1920>
   12e20:	mov	r0, r5
   12e24:	bl	113e0 <strlen@plt>
   12e28:	mov	r6, r0
   12e2c:	mov	r0, r4
   12e30:	bl	113e0 <strlen@plt>
   12e34:	add	r0, r6, r0
   12e38:	add	r0, r0, #2
   12e3c:	bl	18700 <__assert_fail@plt+0x71a0>
   12e40:	mov	r6, r0
   12e44:	mov	r1, r5
   12e48:	bl	112cc <stpcpy@plt>
   12e4c:	mov	r1, #58	; 0x3a
   12e50:	strh	r1, [r0], #1
   12e54:	mov	r1, r4
   12e58:	bl	112cc <stpcpy@plt>
   12e5c:	mov	r0, r6
   12e60:	pop	{r4, r5, r6, sl, fp, pc}
   12e64:	cmp	r4, #0
   12e68:	moveq	r6, #0
   12e6c:	moveq	r0, r6
   12e70:	popeq	{r4, r5, r6, sl, fp, pc}
   12e74:	mov	r0, r4
   12e78:	bl	18a90 <__assert_fail@plt+0x7530>
   12e7c:	pop	{r4, r5, r6, sl, fp, pc}
   12e80:	mov	r0, r5
   12e84:	bl	18a90 <__assert_fail@plt+0x7530>
   12e88:	pop	{r4, r5, r6, sl, fp, pc}
   12e8c:	push	{fp, lr}
   12e90:	mov	fp, sp
   12e94:	sub	sp, sp, #8
   12e98:	mov	ip, #0
   12e9c:	str	ip, [sp]
   12ea0:	bl	114e8 <fchownat@plt>
   12ea4:	mov	sp, fp
   12ea8:	pop	{fp, pc}
   12eac:	push	{fp, lr}
   12eb0:	mov	fp, sp
   12eb4:	sub	sp, sp, #8
   12eb8:	mov	ip, #256	; 0x100
   12ebc:	str	ip, [sp]
   12ec0:	bl	114e8 <fchownat@plt>
   12ec4:	mov	sp, fp
   12ec8:	pop	{fp, pc}
   12ecc:	movw	r1, #49592	; 0xc1b8
   12ed0:	movt	r1, #2
   12ed4:	str	r0, [r1]
   12ed8:	bx	lr
   12edc:	movw	r1, #49596	; 0xc1bc
   12ee0:	movt	r1, #2
   12ee4:	strb	r0, [r1]
   12ee8:	bx	lr
   12eec:	push	{r4, r5, r6, sl, fp, lr}
   12ef0:	add	fp, sp, #16
   12ef4:	sub	sp, sp, #8
   12ef8:	movw	r0, #49556	; 0xc194
   12efc:	movt	r0, #2
   12f00:	ldr	r0, [r0]
   12f04:	bl	195c0 <__assert_fail@plt+0x8060>
   12f08:	cmp	r0, #0
   12f0c:	beq	12f34 <__assert_fail@plt+0x19d4>
   12f10:	movw	r0, #49596	; 0xc1bc
   12f14:	movt	r0, #2
   12f18:	ldrb	r0, [r0]
   12f1c:	cmp	r0, #0
   12f20:	beq	12f54 <__assert_fail@plt+0x19f4>
   12f24:	bl	11410 <__errno_location@plt>
   12f28:	ldr	r0, [r0]
   12f2c:	cmp	r0, #32
   12f30:	bne	12f54 <__assert_fail@plt+0x19f4>
   12f34:	movw	r0, #49552	; 0xc190
   12f38:	movt	r0, #2
   12f3c:	ldr	r0, [r0]
   12f40:	bl	195c0 <__assert_fail@plt+0x8060>
   12f44:	cmp	r0, #0
   12f48:	subeq	sp, fp, #16
   12f4c:	popeq	{r4, r5, r6, sl, fp, pc}
   12f50:	b	12fc4 <__assert_fail@plt+0x1a64>
   12f54:	movw	r1, #45192	; 0xb088
   12f58:	movt	r1, #1
   12f5c:	mov	r0, #0
   12f60:	mov	r2, #5
   12f64:	bl	112d8 <dcgettext@plt>
   12f68:	mov	r4, r0
   12f6c:	movw	r0, #49592	; 0xc1b8
   12f70:	movt	r0, #2
   12f74:	ldr	r6, [r0]
   12f78:	bl	11410 <__errno_location@plt>
   12f7c:	ldr	r5, [r0]
   12f80:	cmp	r6, #0
   12f84:	bne	12fa0 <__assert_fail@plt+0x1a40>
   12f88:	movw	r2, #43408	; 0xa990
   12f8c:	movt	r2, #1
   12f90:	mov	r0, #0
   12f94:	mov	r1, r5
   12f98:	mov	r3, r4
   12f9c:	b	12fc0 <__assert_fail@plt+0x1a60>
   12fa0:	mov	r0, r6
   12fa4:	bl	17890 <__assert_fail@plt+0x6330>
   12fa8:	mov	r3, r0
   12fac:	str	r4, [sp]
   12fb0:	movw	r2, #43404	; 0xa98c
   12fb4:	movt	r2, #1
   12fb8:	mov	r0, #0
   12fbc:	mov	r1, r5
   12fc0:	bl	11368 <error@plt>
   12fc4:	movw	r0, #49468	; 0xc13c
   12fc8:	movt	r0, #2
   12fcc:	ldr	r0, [r0]
   12fd0:	bl	1129c <_exit@plt>
   12fd4:	push	{r4, r5, r6, sl, fp, lr}
   12fd8:	add	fp, sp, #16
   12fdc:	mov	r4, r0
   12fe0:	bl	11410 <__errno_location@plt>
   12fe4:	mov	r5, r0
   12fe8:	ldr	r6, [r0]
   12fec:	mov	r0, r4
   12ff0:	bl	11290 <free@plt>
   12ff4:	str	r6, [r5]
   12ff8:	pop	{r4, r5, r6, sl, fp, pc}
   12ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13000:	add	fp, sp, #28
   13004:	sub	sp, sp, #12
   13008:	cmp	r1, #4096	; 0x1000
   1300c:	bcs	13028 <__assert_fail@plt+0x1ac8>
   13010:	mov	r6, r1
   13014:	mov	r7, r0
   13018:	and	r0, r1, #516	; 0x204
   1301c:	cmp	r0, #516	; 0x204
   13020:	tstne	r6, #18
   13024:	bne	13044 <__assert_fail@plt+0x1ae4>
   13028:	bl	11410 <__errno_location@plt>
   1302c:	mov	r1, #22
   13030:	str	r1, [r0]
   13034:	mov	r4, #0
   13038:	mov	r0, r4
   1303c:	sub	sp, fp, #28
   13040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13044:	mov	sl, r2
   13048:	mov	r0, #1
   1304c:	mov	r1, #96	; 0x60
   13050:	bl	19070 <__assert_fail@plt+0x7b10>
   13054:	cmp	r0, #0
   13058:	beq	13034 <__assert_fail@plt+0x1ad4>
   1305c:	mov	r4, r0
   13060:	mvn	r0, #99	; 0x63
   13064:	str	r0, [r4, #32]
   13068:	bic	r0, r6, #516	; 0x204
   1306c:	tst	r6, #2
   13070:	mov	r1, r6
   13074:	orrne	r1, r0, #4
   13078:	str	sl, [r4, #44]	; 0x2c
   1307c:	str	r1, [r4, #48]	; 0x30
   13080:	mov	r0, r7
   13084:	bl	132f8 <__assert_fail@plt+0x1d98>
   13088:	mov	r1, r0
   1308c:	cmp	r0, #4096	; 0x1000
   13090:	movls	r1, #4096	; 0x1000
   13094:	mov	r0, r4
   13098:	bl	1333c <__assert_fail@plt+0x1ddc>
   1309c:	cmp	r0, #0
   130a0:	beq	132ec <__assert_fail@plt+0x1d8c>
   130a4:	ldr	r0, [r7]
   130a8:	cmp	r0, #0
   130ac:	beq	130dc <__assert_fail@plt+0x1b7c>
   130b0:	movw	r1, #42872	; 0xa778
   130b4:	movt	r1, #1
   130b8:	mov	r0, r4
   130bc:	mov	r2, #0
   130c0:	bl	133b4 <__assert_fail@plt+0x1e54>
   130c4:	cmp	r0, #0
   130c8:	beq	132e4 <__assert_fail@plt+0x1d84>
   130cc:	mov	r8, r0
   130d0:	mvn	r0, #0
   130d4:	str	r0, [r8, #48]	; 0x30
   130d8:	b	130e0 <__assert_fail@plt+0x1b80>
   130dc:	mov	r8, #0
   130e0:	cmp	sl, #0
   130e4:	ldrbne	r0, [r4, #49]	; 0x31
   130e8:	ubfxne	r0, r0, #2, #1
   130ec:	moveq	r0, #1
   130f0:	ldr	r5, [r7]
   130f4:	cmp	r5, #0
   130f8:	beq	13224 <__assert_fail@plt+0x1cc4>
   130fc:	and	r1, r6, #2048	; 0x800
   13100:	str	r1, [sp, #8]
   13104:	eor	r0, r0, #1
   13108:	str	r0, [sp, #4]
   1310c:	mov	r9, #0
   13110:	mov	r0, #0
   13114:	str	r0, [sp]
   13118:	mov	r6, #0
   1311c:	mov	r0, r5
   13120:	bl	113e0 <strlen@plt>
   13124:	mov	r2, r0
   13128:	ldr	r0, [sp, #8]
   1312c:	cmp	r0, #0
   13130:	bne	13168 <__assert_fail@plt+0x1c08>
   13134:	cmp	r2, #3
   13138:	bcc	13168 <__assert_fail@plt+0x1c08>
   1313c:	add	r0, r5, r2
   13140:	ldrb	r0, [r0, #-1]
   13144:	cmp	r0, #47	; 0x2f
   13148:	bne	13168 <__assert_fail@plt+0x1c08>
   1314c:	sub	r0, r5, #2
   13150:	ldrb	r1, [r0, r2]
   13154:	cmp	r1, #47	; 0x2f
   13158:	bne	13168 <__assert_fail@plt+0x1c08>
   1315c:	sub	r2, r2, #1
   13160:	cmp	r2, #1
   13164:	bhi	13150 <__assert_fail@plt+0x1bf0>
   13168:	mov	r0, r4
   1316c:	mov	r1, r5
   13170:	bl	133b4 <__assert_fail@plt+0x1e54>
   13174:	cmp	r0, #0
   13178:	beq	132d4 <__assert_fail@plt+0x1d74>
   1317c:	mov	r5, r0
   13180:	str	r8, [r0, #4]
   13184:	mov	r0, #0
   13188:	str	r0, [r5, #48]	; 0x30
   1318c:	add	r0, r5, #168	; 0xa8
   13190:	str	r0, [r5, #24]
   13194:	clz	r0, r9
   13198:	lsr	r0, r0, #5
   1319c:	ldr	r1, [sp, #4]
   131a0:	orrs	r0, r1, r0
   131a4:	bne	131d0 <__assert_fail@plt+0x1c70>
   131a8:	mov	r0, #11
   131ac:	strh	r0, [r5, #56]	; 0x38
   131b0:	mov	r0, r5
   131b4:	mov	r1, #1
   131b8:	bl	13434 <__assert_fail@plt+0x1ed4>
   131bc:	cmp	sl, #0
   131c0:	beq	131ec <__assert_fail@plt+0x1c8c>
   131c4:	str	r9, [r5, #8]
   131c8:	mov	r9, r5
   131cc:	b	13208 <__assert_fail@plt+0x1ca8>
   131d0:	mov	r0, r4
   131d4:	mov	r1, r5
   131d8:	mov	r2, #0
   131dc:	bl	13464 <__assert_fail@plt+0x1f04>
   131e0:	strh	r0, [r5, #56]	; 0x38
   131e4:	cmp	sl, #0
   131e8:	bne	131c4 <__assert_fail@plt+0x1c64>
   131ec:	mov	r0, #0
   131f0:	str	r0, [r5, #8]
   131f4:	cmp	r9, #0
   131f8:	beq	1321c <__assert_fail@plt+0x1cbc>
   131fc:	ldr	r0, [sp]
   13200:	str	r5, [r0, #8]
   13204:	str	r5, [sp]
   13208:	add	r6, r6, #1
   1320c:	ldr	r5, [r7, #4]!
   13210:	cmp	r5, #0
   13214:	bne	1311c <__assert_fail@plt+0x1bbc>
   13218:	b	1322c <__assert_fail@plt+0x1ccc>
   1321c:	str	r5, [sp]
   13220:	b	131c8 <__assert_fail@plt+0x1c68>
   13224:	mov	r9, #0
   13228:	b	13250 <__assert_fail@plt+0x1cf0>
   1322c:	cmp	sl, #0
   13230:	beq	13250 <__assert_fail@plt+0x1cf0>
   13234:	cmp	r6, #2
   13238:	bcc	13250 <__assert_fail@plt+0x1cf0>
   1323c:	mov	r0, r4
   13240:	mov	r1, r9
   13244:	mov	r2, r6
   13248:	bl	135cc <__assert_fail@plt+0x206c>
   1324c:	mov	r9, r0
   13250:	movw	r1, #42872	; 0xa778
   13254:	movt	r1, #1
   13258:	mov	r0, r4
   1325c:	mov	r2, #0
   13260:	bl	133b4 <__assert_fail@plt+0x1e54>
   13264:	str	r0, [r4]
   13268:	cmp	r0, #0
   1326c:	beq	132d4 <__assert_fail@plt+0x1d74>
   13270:	mov	r1, #9
   13274:	strh	r1, [r0, #56]	; 0x38
   13278:	str	r9, [r0, #8]
   1327c:	mov	r1, #1
   13280:	str	r1, [r0, #48]	; 0x30
   13284:	mov	r0, r4
   13288:	bl	136ac <__assert_fail@plt+0x214c>
   1328c:	cmp	r0, #0
   13290:	beq	132d4 <__assert_fail@plt+0x1d74>
   13294:	ldrh	r0, [r4, #48]	; 0x30
   13298:	tst	r0, #516	; 0x204
   1329c:	bne	132c4 <__assert_fail@plt+0x1d64>
   132a0:	movw	r1, #45205	; 0xb095
   132a4:	movt	r1, #1
   132a8:	mov	r0, r4
   132ac:	bl	13738 <__assert_fail@plt+0x21d8>
   132b0:	str	r0, [r4, #28]
   132b4:	cmn	r0, #1
   132b8:	ldrle	r0, [r4, #48]	; 0x30
   132bc:	orrle	r0, r0, #4
   132c0:	strle	r0, [r4, #48]	; 0x30
   132c4:	add	r0, r4, #60	; 0x3c
   132c8:	mvn	r1, #0
   132cc:	bl	15fe0 <__assert_fail@plt+0x4a80>
   132d0:	b	13038 <__assert_fail@plt+0x1ad8>
   132d4:	mov	r0, r9
   132d8:	bl	13768 <__assert_fail@plt+0x2208>
   132dc:	mov	r0, r8
   132e0:	bl	12fd4 <__assert_fail@plt+0x1a74>
   132e4:	ldr	r0, [r4, #24]
   132e8:	bl	12fd4 <__assert_fail@plt+0x1a74>
   132ec:	mov	r0, r4
   132f0:	bl	12fd4 <__assert_fail@plt+0x1a74>
   132f4:	b	13034 <__assert_fail@plt+0x1ad4>
   132f8:	mov	r1, r0
   132fc:	ldr	r0, [r0]
   13300:	cmp	r0, #0
   13304:	moveq	r0, #1
   13308:	bxeq	lr
   1330c:	push	{r4, r5, fp, lr}
   13310:	add	fp, sp, #8
   13314:	add	r5, r1, #4
   13318:	mov	r4, #0
   1331c:	bl	113e0 <strlen@plt>
   13320:	cmp	r0, r4
   13324:	movhi	r4, r0
   13328:	ldr	r0, [r5], #4
   1332c:	cmp	r0, #0
   13330:	bne	1331c <__assert_fail@plt+0x1dbc>
   13334:	add	r0, r4, #1
   13338:	pop	{r4, r5, fp, pc}
   1333c:	push	{r4, r5, fp, lr}
   13340:	add	fp, sp, #8
   13344:	mov	r4, r0
   13348:	ldr	r0, [r0, #36]	; 0x24
   1334c:	add	r1, r1, #256	; 0x100
   13350:	adds	r1, r1, r0
   13354:	bcc	1337c <__assert_fail@plt+0x1e1c>
   13358:	ldr	r0, [r4, #24]
   1335c:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13360:	mov	r5, #0
   13364:	str	r5, [r4, #24]
   13368:	bl	11410 <__errno_location@plt>
   1336c:	mov	r1, #36	; 0x24
   13370:	str	r1, [r0]
   13374:	mov	r0, r5
   13378:	pop	{r4, r5, fp, pc}
   1337c:	str	r1, [r4, #36]	; 0x24
   13380:	ldr	r0, [r4, #24]
   13384:	bl	190f4 <__assert_fail@plt+0x7b94>
   13388:	cmp	r0, #0
   1338c:	strne	r0, [r4, #24]
   13390:	movne	r5, #1
   13394:	movne	r0, r5
   13398:	popne	{r4, r5, fp, pc}
   1339c:	ldr	r0, [r4, #24]
   133a0:	bl	12fd4 <__assert_fail@plt+0x1a74>
   133a4:	mov	r5, #0
   133a8:	str	r5, [r4, #24]
   133ac:	mov	r0, r5
   133b0:	pop	{r4, r5, fp, pc}
   133b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   133b8:	add	fp, sp, #24
   133bc:	mov	r6, r2
   133c0:	mov	r8, r1
   133c4:	mov	r5, r0
   133c8:	add	r0, r2, #176	; 0xb0
   133cc:	bic	r0, r0, #7
   133d0:	bl	190c4 <__assert_fail@plt+0x7b64>
   133d4:	cmp	r0, #0
   133d8:	moveq	r4, #0
   133dc:	moveq	r0, r4
   133e0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   133e4:	mov	r4, r0
   133e8:	add	r7, r0, #168	; 0xa8
   133ec:	mov	r0, r7
   133f0:	mov	r1, r8
   133f4:	mov	r2, r6
   133f8:	bl	112a8 <memcpy@plt>
   133fc:	mov	r0, #0
   13400:	strb	r0, [r7, r6]
   13404:	str	r6, [r4, #52]	; 0x34
   13408:	str	r5, [r4, #44]	; 0x2c
   1340c:	ldr	r1, [r5, #24]
   13410:	mov	r2, #196608	; 0x30000
   13414:	str	r2, [r4, #58]	; 0x3a
   13418:	str	r0, [r4, #12]
   1341c:	str	r0, [r4, #16]
   13420:	str	r0, [r4, #20]
   13424:	str	r1, [r4, #28]
   13428:	str	r0, [r4, #32]
   1342c:	mov	r0, r4
   13430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13434:	ldrh	r2, [r0, #56]	; 0x38
   13438:	cmp	r2, #11
   1343c:	bne	13458 <__assert_fail@plt+0x1ef8>
   13440:	mov	r3, #0
   13444:	mov	r2, #1
   13448:	cmp	r1, #0
   1344c:	movwne	r2, #2
   13450:	strd	r2, [r0, #112]	; 0x70
   13454:	bx	lr
   13458:	push	{fp, lr}
   1345c:	mov	fp, sp
   13460:	bl	11518 <abort@plt>
   13464:	push	{r4, r5, r6, sl, fp, lr}
   13468:	add	fp, sp, #16
   1346c:	mov	r4, r1
   13470:	ldr	r1, [r1, #48]	; 0x30
   13474:	cmp	r1, #0
   13478:	ldrbeq	r1, [r0, #48]	; 0x30
   1347c:	andeq	r1, r1, #1
   13480:	orreq	r2, r1, r2
   13484:	add	r5, r4, #64	; 0x40
   13488:	cmp	r2, #0
   1348c:	ldreq	r1, [r0, #48]	; 0x30
   13490:	andseq	r1, r1, #2
   13494:	beq	134e4 <__assert_fail@plt+0x1f84>
   13498:	ldr	r0, [r4, #24]
   1349c:	mov	r1, r5
   134a0:	bl	19f68 <__assert_fail@plt+0x8a08>
   134a4:	cmp	r0, #0
   134a8:	beq	13558 <__assert_fail@plt+0x1ff8>
   134ac:	bl	11410 <__errno_location@plt>
   134b0:	mov	r6, r0
   134b4:	ldr	r0, [r0]
   134b8:	cmp	r0, #2
   134bc:	bne	13508 <__assert_fail@plt+0x1fa8>
   134c0:	ldr	r0, [r4, #24]
   134c4:	mov	r1, r5
   134c8:	bl	19f88 <__assert_fail@plt+0x8a28>
   134cc:	cmp	r0, #0
   134d0:	bne	13508 <__assert_fail@plt+0x1fa8>
   134d4:	mov	r0, #0
   134d8:	str	r0, [r6]
   134dc:	mov	r0, #13
   134e0:	pop	{r4, r5, r6, sl, fp, pc}
   134e4:	ldr	r1, [r4, #24]
   134e8:	ldr	r0, [r0, #32]
   134ec:	mov	r2, r5
   134f0:	mov	r3, #256	; 0x100
   134f4:	bl	19f98 <__assert_fail@plt+0x8a38>
   134f8:	cmp	r0, #0
   134fc:	beq	13558 <__assert_fail@plt+0x1ff8>
   13500:	bl	11410 <__errno_location@plt>
   13504:	mov	r6, r0
   13508:	ldr	r0, [r6]
   1350c:	str	r0, [r4, #32]
   13510:	mov	r0, #0
   13514:	vmov.i32	q8, #0	; 0x00000000
   13518:	str	r0, [r5, #96]	; 0x60
   1351c:	add	r1, r5, #80	; 0x50
   13520:	vst1.64	{d16-d17}, [r1]
   13524:	add	r1, r5, #64	; 0x40
   13528:	vst1.64	{d16-d17}, [r1]
   1352c:	add	r1, r5, #48	; 0x30
   13530:	vst1.64	{d16-d17}, [r1]
   13534:	add	r1, r5, #32
   13538:	vst1.64	{d16-d17}, [r1]
   1353c:	add	r1, r5, #16
   13540:	vst1.64	{d16-d17}, [r1]
   13544:	mov	r1, #100	; 0x64
   13548:	vst1.64	{d16-d17}, [r5], r1
   1354c:	str	r0, [r5]
   13550:	mov	r0, #10
   13554:	pop	{r4, r5, r6, sl, fp, pc}
   13558:	ldr	r0, [r4, #80]	; 0x50
   1355c:	and	r0, r0, #61440	; 0xf000
   13560:	cmp	r0, #40960	; 0xa000
   13564:	moveq	r0, #12
   13568:	popeq	{r4, r5, r6, sl, fp, pc}
   1356c:	cmp	r0, #32768	; 0x8000
   13570:	moveq	r0, #8
   13574:	popeq	{r4, r5, r6, sl, fp, pc}
   13578:	cmp	r0, #16384	; 0x4000
   1357c:	bne	135b0 <__assert_fail@plt+0x2050>
   13580:	ldrb	r1, [r4, #168]	; 0xa8
   13584:	mov	r0, #1
   13588:	cmp	r1, #46	; 0x2e
   1358c:	popne	{r4, r5, r6, sl, fp, pc}
   13590:	ldrb	r1, [r4, #169]	; 0xa9
   13594:	cmp	r1, #0
   13598:	beq	135b8 <__assert_fail@plt+0x2058>
   1359c:	cmp	r1, #46	; 0x2e
   135a0:	ldrbeq	r1, [r4, #170]	; 0xaa
   135a4:	cmpeq	r1, #0
   135a8:	beq	135b8 <__assert_fail@plt+0x2058>
   135ac:	pop	{r4, r5, r6, sl, fp, pc}
   135b0:	mov	r0, #3
   135b4:	pop	{r4, r5, r6, sl, fp, pc}
   135b8:	ldr	r1, [r4, #48]	; 0x30
   135bc:	mov	r0, #5
   135c0:	cmp	r1, #0
   135c4:	movweq	r0, #1
   135c8:	pop	{r4, r5, r6, sl, fp, pc}
   135cc:	push	{r4, r5, r6, r7, fp, lr}
   135d0:	add	fp, sp, #16
   135d4:	mov	r6, r2
   135d8:	mov	r4, r1
   135dc:	mov	r5, r0
   135e0:	ldr	r7, [r0, #44]	; 0x2c
   135e4:	ldr	r0, [r0, #40]	; 0x28
   135e8:	cmp	r0, r2
   135ec:	bcs	13618 <__assert_fail@plt+0x20b8>
   135f0:	add	r1, r6, #40	; 0x28
   135f4:	str	r1, [r5, #40]	; 0x28
   135f8:	cmn	r1, #-1073741823	; 0xc0000001
   135fc:	bhi	13690 <__assert_fail@plt+0x2130>
   13600:	ldr	r0, [r5, #8]
   13604:	lsl	r1, r1, #2
   13608:	bl	190f4 <__assert_fail@plt+0x7b94>
   1360c:	cmp	r0, #0
   13610:	beq	13690 <__assert_fail@plt+0x2130>
   13614:	str	r0, [r5, #8]
   13618:	cmp	r4, #0
   1361c:	beq	13634 <__assert_fail@plt+0x20d4>
   13620:	ldr	r0, [r5, #8]
   13624:	str	r4, [r0], #4
   13628:	ldr	r4, [r4, #8]
   1362c:	cmp	r4, #0
   13630:	bne	13624 <__assert_fail@plt+0x20c4>
   13634:	ldr	r0, [r5, #8]
   13638:	mov	r1, r6
   1363c:	mov	r2, #4
   13640:	mov	r3, r7
   13644:	bl	114dc <qsort@plt>
   13648:	subs	r1, r6, #1
   1364c:	ldr	r0, [r5, #8]
   13650:	ldr	r4, [r0]
   13654:	beq	1367c <__assert_fail@plt+0x211c>
   13658:	add	r2, r0, #4
   1365c:	rsb	r3, r6, #1
   13660:	ldr	r7, [r2, #-4]
   13664:	ldr	r6, [r2]
   13668:	str	r6, [r7, #8]
   1366c:	add	r2, r2, #4
   13670:	adds	r3, r3, #1
   13674:	bne	13660 <__assert_fail@plt+0x2100>
   13678:	add	r0, r0, r1, lsl #2
   1367c:	ldr	r0, [r0]
   13680:	mov	r1, #0
   13684:	str	r1, [r0, #8]
   13688:	mov	r0, r4
   1368c:	pop	{r4, r5, r6, r7, fp, pc}
   13690:	ldr	r0, [r5, #8]
   13694:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13698:	mov	r0, #0
   1369c:	str	r0, [r5, #40]	; 0x28
   136a0:	str	r0, [r5, #8]
   136a4:	mov	r0, r4
   136a8:	pop	{r4, r5, r6, r7, fp, pc}
   136ac:	push	{r4, r5, fp, lr}
   136b0:	add	fp, sp, #8
   136b4:	sub	sp, sp, #8
   136b8:	mov	r4, r0
   136bc:	ldrh	r0, [r0, #48]	; 0x30
   136c0:	movw	r1, #258	; 0x102
   136c4:	tst	r0, r1
   136c8:	beq	13708 <__assert_fail@plt+0x21a8>
   136cc:	movw	r0, #12244	; 0x2fd4
   136d0:	movt	r0, #1
   136d4:	str	r0, [sp]
   136d8:	mov	r5, #0
   136dc:	movw	r2, #19868	; 0x4d9c
   136e0:	movt	r2, #1
   136e4:	movw	r3, #19900	; 0x4dbc
   136e8:	movt	r3, #1
   136ec:	mov	r0, #31
   136f0:	mov	r1, #0
   136f4:	bl	15548 <__assert_fail@plt+0x3fe8>
   136f8:	str	r0, [r4, #56]	; 0x38
   136fc:	cmp	r0, #0
   13700:	movne	r5, #1
   13704:	b	1372c <__assert_fail@plt+0x21cc>
   13708:	mov	r0, #32
   1370c:	bl	190c4 <__assert_fail@plt+0x7b64>
   13710:	str	r0, [r4, #56]	; 0x38
   13714:	cmp	r0, #0
   13718:	beq	13728 <__assert_fail@plt+0x21c8>
   1371c:	bl	19648 <__assert_fail@plt+0x80e8>
   13720:	mov	r5, #1
   13724:	b	1372c <__assert_fail@plt+0x21cc>
   13728:	mov	r5, #0
   1372c:	mov	r0, r5
   13730:	sub	sp, fp, #8
   13734:	pop	{r4, r5, fp, pc}
   13738:	ldr	r3, [r0, #48]	; 0x30
   1373c:	mov	r2, #32768	; 0x8000
   13740:	and	r2, r2, r3, lsl #11
   13744:	orr	r2, r2, #18688	; 0x4900
   13748:	orr	r2, r2, #524288	; 0x80000
   1374c:	tst	r3, #512	; 0x200
   13750:	bne	13760 <__assert_fail@plt+0x2200>
   13754:	mov	r0, r1
   13758:	mov	r1, r2
   1375c:	b	199e8 <__assert_fail@plt+0x8488>
   13760:	ldr	r0, [r0, #32]
   13764:	b	16108 <__assert_fail@plt+0x4ba8>
   13768:	push	{r4, r6, r7, sl, fp, lr}
   1376c:	add	fp, sp, #16
   13770:	cmp	r0, #0
   13774:	popeq	{r4, r6, r7, sl, fp, pc}
   13778:	mov	r4, r0
   1377c:	ldrd	r6, [r4, #8]
   13780:	cmp	r7, #0
   13784:	beq	13790 <__assert_fail@plt+0x2230>
   13788:	mov	r0, r7
   1378c:	bl	1153c <closedir@plt>
   13790:	mov	r0, r4
   13794:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13798:	cmp	r6, #0
   1379c:	mov	r4, r6
   137a0:	bne	1377c <__assert_fail@plt+0x221c>
   137a4:	pop	{r4, r6, r7, sl, fp, pc}
   137a8:	push	{r4, r5, fp, lr}
   137ac:	add	fp, sp, #8
   137b0:	mov	r4, r0
   137b4:	ldr	r0, [r0]
   137b8:	cmp	r0, #0
   137bc:	beq	137fc <__assert_fail@plt+0x229c>
   137c0:	ldr	r1, [r0, #48]	; 0x30
   137c4:	cmp	r1, #0
   137c8:	blt	137f0 <__assert_fail@plt+0x2290>
   137cc:	ldr	r5, [r0, #8]
   137d0:	cmp	r5, #0
   137d4:	ldreq	r5, [r0, #4]
   137d8:	bl	12fd4 <__assert_fail@plt+0x1a74>
   137dc:	ldr	r0, [r5, #48]	; 0x30
   137e0:	cmn	r0, #1
   137e4:	mov	r0, r5
   137e8:	bgt	137cc <__assert_fail@plt+0x226c>
   137ec:	b	137f4 <__assert_fail@plt+0x2294>
   137f0:	mov	r5, r0
   137f4:	mov	r0, r5
   137f8:	bl	12fd4 <__assert_fail@plt+0x1a74>
   137fc:	ldr	r0, [r4, #4]
   13800:	cmp	r0, #0
   13804:	blne	13768 <__assert_fail@plt+0x2208>
   13808:	ldr	r0, [r4, #8]
   1380c:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13810:	ldr	r0, [r4, #24]
   13814:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13818:	ldr	r0, [r4, #48]	; 0x30
   1381c:	tst	r0, #512	; 0x200
   13820:	bne	1384c <__assert_fail@plt+0x22ec>
   13824:	mov	r5, #0
   13828:	tst	r0, #4
   1382c:	bne	13890 <__assert_fail@plt+0x2330>
   13830:	ldr	r0, [r4, #28]
   13834:	bl	114d0 <fchdir@plt>
   13838:	cmp	r0, #0
   1383c:	beq	1386c <__assert_fail@plt+0x230c>
   13840:	bl	11410 <__errno_location@plt>
   13844:	ldr	r5, [r0]
   13848:	b	13870 <__assert_fail@plt+0x2310>
   1384c:	ldr	r0, [r4, #32]
   13850:	mov	r5, #0
   13854:	cmp	r0, #0
   13858:	blt	13890 <__assert_fail@plt+0x2330>
   1385c:	bl	11524 <close@plt>
   13860:	cmp	r0, #0
   13864:	bne	13888 <__assert_fail@plt+0x2328>
   13868:	b	13890 <__assert_fail@plt+0x2330>
   1386c:	mov	r5, #0
   13870:	ldr	r0, [r4, #28]
   13874:	bl	11524 <close@plt>
   13878:	cmp	r5, #0
   1387c:	bne	13890 <__assert_fail@plt+0x2330>
   13880:	cmp	r0, #0
   13884:	beq	13890 <__assert_fail@plt+0x2330>
   13888:	bl	11410 <__errno_location@plt>
   1388c:	ldr	r5, [r0]
   13890:	add	r0, r4, #60	; 0x3c
   13894:	bl	138d4 <__assert_fail@plt+0x2374>
   13898:	ldr	r0, [r4, #52]	; 0x34
   1389c:	cmp	r0, #0
   138a0:	beq	138a8 <__assert_fail@plt+0x2348>
   138a4:	bl	1581c <__assert_fail@plt+0x42bc>
   138a8:	mov	r0, r4
   138ac:	bl	1390c <__assert_fail@plt+0x23ac>
   138b0:	mov	r0, r4
   138b4:	bl	12fd4 <__assert_fail@plt+0x1a74>
   138b8:	cmp	r5, #0
   138bc:	moveq	r0, #0
   138c0:	popeq	{r4, r5, fp, pc}
   138c4:	bl	11410 <__errno_location@plt>
   138c8:	str	r5, [r0]
   138cc:	mvn	r0, #0
   138d0:	pop	{r4, r5, fp, pc}
   138d4:	push	{r4, sl, fp, lr}
   138d8:	add	fp, sp, #8
   138dc:	mov	r4, r0
   138e0:	b	138e8 <__assert_fail@plt+0x2388>
   138e4:	mov	r0, r4
   138e8:	bl	1600c <__assert_fail@plt+0x4aac>
   138ec:	cmp	r0, #0
   138f0:	popne	{r4, sl, fp, pc}
   138f4:	mov	r0, r4
   138f8:	bl	16058 <__assert_fail@plt+0x4af8>
   138fc:	cmp	r0, #0
   13900:	blt	138e4 <__assert_fail@plt+0x2384>
   13904:	bl	11524 <close@plt>
   13908:	b	138e4 <__assert_fail@plt+0x2384>
   1390c:	ldrh	r1, [r0, #48]	; 0x30
   13910:	movw	r2, #258	; 0x102
   13914:	tst	r1, r2
   13918:	beq	1392c <__assert_fail@plt+0x23cc>
   1391c:	ldr	r0, [r0, #56]	; 0x38
   13920:	cmp	r0, #0
   13924:	bxeq	lr
   13928:	b	1581c <__assert_fail@plt+0x42bc>
   1392c:	ldr	r0, [r0, #56]	; 0x38
   13930:	b	12fd4 <__assert_fail@plt+0x1a74>
   13934:	push	{r4, r5, r6, r7, fp, lr}
   13938:	add	fp, sp, #16
   1393c:	ldr	r6, [r0]
   13940:	mov	r5, #0
   13944:	cmp	r6, #0
   13948:	beq	13ee0 <__assert_fail@plt+0x2980>
   1394c:	mov	r4, r0
   13950:	ldr	r1, [r0, #48]	; 0x30
   13954:	tst	r1, #8192	; 0x2000
   13958:	bne	13ee0 <__assert_fail@plt+0x2980>
   1395c:	ldrh	r0, [r6, #60]	; 0x3c
   13960:	mov	r2, #3
   13964:	strh	r2, [r6, #60]	; 0x3c
   13968:	cmp	r0, #2
   1396c:	beq	13994 <__assert_fail@plt+0x2434>
   13970:	cmp	r0, #1
   13974:	bne	13a00 <__assert_fail@plt+0x24a0>
   13978:	mov	r0, r4
   1397c:	mov	r1, r6
   13980:	mov	r2, #0
   13984:	bl	13464 <__assert_fail@plt+0x1f04>
   13988:	strh	r0, [r6, #56]	; 0x38
   1398c:	mov	r0, r6
   13990:	pop	{r4, r5, r6, r7, fp, pc}
   13994:	ldrh	r2, [r6, #56]	; 0x38
   13998:	movw	r3, #65534	; 0xfffe
   1399c:	and	r2, r2, r3
   139a0:	cmp	r2, #12
   139a4:	bne	13a00 <__assert_fail@plt+0x24a0>
   139a8:	mov	r0, r4
   139ac:	mov	r1, r6
   139b0:	mov	r2, #1
   139b4:	bl	13464 <__assert_fail@plt+0x1f04>
   139b8:	strh	r0, [r6, #56]	; 0x38
   139bc:	cmp	r0, #1
   139c0:	bne	13ac8 <__assert_fail@plt+0x2568>
   139c4:	ldrb	r0, [r4, #48]	; 0x30
   139c8:	tst	r0, #4
   139cc:	bne	13ac8 <__assert_fail@plt+0x2568>
   139d0:	movw	r1, #45205	; 0xb095
   139d4:	movt	r1, #1
   139d8:	mov	r0, r4
   139dc:	bl	13738 <__assert_fail@plt+0x21d8>
   139e0:	str	r0, [r6, #36]	; 0x24
   139e4:	cmn	r0, #1
   139e8:	ble	13dc0 <__assert_fail@plt+0x2860>
   139ec:	ldrh	r0, [r6, #58]	; 0x3a
   139f0:	orr	r0, r0, #2
   139f4:	strh	r0, [r6, #58]	; 0x3a
   139f8:	mov	r5, r6
   139fc:	b	13c68 <__assert_fail@plt+0x2708>
   13a00:	ldrh	r2, [r6, #56]	; 0x38
   13a04:	cmp	r2, #1
   13a08:	bne	13a5c <__assert_fail@plt+0x24fc>
   13a0c:	cmp	r0, #4
   13a10:	bne	13ad0 <__assert_fail@plt+0x2570>
   13a14:	ldrb	r0, [r6, #58]	; 0x3a
   13a18:	tst	r0, #2
   13a1c:	beq	13a28 <__assert_fail@plt+0x24c8>
   13a20:	ldr	r0, [r6, #36]	; 0x24
   13a24:	bl	11524 <close@plt>
   13a28:	ldr	r0, [r4, #4]
   13a2c:	cmp	r0, #0
   13a30:	beq	13a40 <__assert_fail@plt+0x24e0>
   13a34:	bl	13768 <__assert_fail@plt+0x2208>
   13a38:	mov	r0, #0
   13a3c:	str	r0, [r4, #4]
   13a40:	mov	r0, #6
   13a44:	strh	r0, [r6, #56]	; 0x38
   13a48:	mov	r0, r4
   13a4c:	mov	r1, r6
   13a50:	bl	13eec <__assert_fail@plt+0x298c>
   13a54:	mov	r0, r6
   13a58:	pop	{r4, r5, r6, r7, fp, pc}
   13a5c:	ldr	r5, [r6, #8]
   13a60:	cmp	r5, #0
   13a64:	beq	13b68 <__assert_fail@plt+0x2608>
   13a68:	str	r5, [r4]
   13a6c:	mov	r0, r6
   13a70:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13a74:	ldr	r0, [r5, #48]	; 0x30
   13a78:	cmp	r0, #0
   13a7c:	beq	13bb4 <__assert_fail@plt+0x2654>
   13a80:	ldrh	r0, [r5, #60]	; 0x3c
   13a84:	cmp	r0, #4
   13a88:	mov	r6, r5
   13a8c:	beq	13a5c <__assert_fail@plt+0x24fc>
   13a90:	cmp	r0, #2
   13a94:	bne	13c2c <__assert_fail@plt+0x26cc>
   13a98:	mov	r0, r4
   13a9c:	mov	r1, r5
   13aa0:	mov	r2, #1
   13aa4:	bl	13464 <__assert_fail@plt+0x1f04>
   13aa8:	strh	r0, [r5, #56]	; 0x38
   13aac:	cmp	r0, #1
   13ab0:	ldrbeq	r0, [r4, #48]	; 0x30
   13ab4:	tsteq	r0, #4
   13ab8:	beq	13e4c <__assert_fail@plt+0x28ec>
   13abc:	mov	r0, #3
   13ac0:	strh	r0, [r5, #60]	; 0x3c
   13ac4:	b	13c2c <__assert_fail@plt+0x26cc>
   13ac8:	mov	r5, r6
   13acc:	b	13c68 <__assert_fail@plt+0x2708>
   13ad0:	tst	r1, #64	; 0x40
   13ad4:	beq	13af8 <__assert_fail@plt+0x2598>
   13ad8:	ldr	r0, [r4, #16]
   13adc:	ldr	r3, [r4, #20]
   13ae0:	ldr	r2, [r6, #64]	; 0x40
   13ae4:	ldr	r5, [r6, #68]	; 0x44
   13ae8:	eor	r3, r5, r3
   13aec:	eor	r0, r2, r0
   13af0:	orrs	r0, r0, r3
   13af4:	bne	13a14 <__assert_fail@plt+0x24b4>
   13af8:	ldr	r0, [r4, #4]
   13afc:	cmp	r0, #0
   13b00:	beq	13c08 <__assert_fail@plt+0x26a8>
   13b04:	tst	r1, #4096	; 0x1000
   13b08:	bne	13bf4 <__assert_fail@plt+0x2694>
   13b0c:	ldr	r3, [r6, #24]
   13b10:	mov	r0, r4
   13b14:	mov	r1, r6
   13b18:	mvn	r2, #0
   13b1c:	bl	13fbc <__assert_fail@plt+0x2a5c>
   13b20:	cmp	r0, #0
   13b24:	beq	13c20 <__assert_fail@plt+0x26c0>
   13b28:	bl	11410 <__errno_location@plt>
   13b2c:	ldr	r0, [r0]
   13b30:	str	r0, [r6, #32]
   13b34:	ldrh	r0, [r6, #58]	; 0x3a
   13b38:	orr	r0, r0, #1
   13b3c:	strh	r0, [r6, #58]	; 0x3a
   13b40:	ldr	r0, [r4, #4]
   13b44:	cmp	r0, #0
   13b48:	beq	13c20 <__assert_fail@plt+0x26c0>
   13b4c:	ldmib	r0, {r1, r2}
   13b50:	ldr	r1, [r1, #24]
   13b54:	str	r1, [r0, #24]
   13b58:	cmp	r2, #0
   13b5c:	mov	r0, r2
   13b60:	bne	13b4c <__assert_fail@plt+0x25ec>
   13b64:	b	13c20 <__assert_fail@plt+0x26c0>
   13b68:	ldr	r0, [r6, #4]
   13b6c:	ldr	r1, [r0, #12]
   13b70:	cmp	r1, #0
   13b74:	beq	13d24 <__assert_fail@plt+0x27c4>
   13b78:	str	r0, [r4]
   13b7c:	ldr	r1, [r4, #24]
   13b80:	ldr	r0, [r0, #40]	; 0x28
   13b84:	mov	r5, #0
   13b88:	strb	r5, [r1, r0]
   13b8c:	mov	r0, r4
   13b90:	mov	r1, #3
   13b94:	bl	1419c <__assert_fail@plt+0x2c3c>
   13b98:	cmp	r0, #0
   13b9c:	beq	13d18 <__assert_fail@plt+0x27b8>
   13ba0:	mov	r7, r0
   13ba4:	mov	r0, r6
   13ba8:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13bac:	mov	r5, r7
   13bb0:	b	13c2c <__assert_fail@plt+0x26cc>
   13bb4:	mov	r0, r4
   13bb8:	bl	14a08 <__assert_fail@plt+0x34a8>
   13bbc:	cmp	r0, #0
   13bc0:	beq	13bd4 <__assert_fail@plt+0x2674>
   13bc4:	ldr	r0, [r4, #48]	; 0x30
   13bc8:	orr	r0, r0, #8192	; 0x2000
   13bcc:	str	r0, [r4, #48]	; 0x30
   13bd0:	b	13ce0 <__assert_fail@plt+0x2780>
   13bd4:	mov	r0, r4
   13bd8:	bl	1390c <__assert_fail@plt+0x23ac>
   13bdc:	mov	r0, r4
   13be0:	mov	r1, r5
   13be4:	bl	14a64 <__assert_fail@plt+0x3504>
   13be8:	mov	r0, r4
   13bec:	bl	136ac <__assert_fail@plt+0x214c>
   13bf0:	b	13c68 <__assert_fail@plt+0x2708>
   13bf4:	bic	r1, r1, #4096	; 0x1000
   13bf8:	str	r1, [r4, #48]	; 0x30
   13bfc:	bl	13768 <__assert_fail@plt+0x2208>
   13c00:	mov	r0, #0
   13c04:	str	r0, [r4, #4]
   13c08:	mov	r0, r4
   13c0c:	mov	r1, #3
   13c10:	bl	1419c <__assert_fail@plt+0x2c3c>
   13c14:	str	r0, [r4, #4]
   13c18:	cmp	r0, #0
   13c1c:	beq	13cec <__assert_fail@plt+0x278c>
   13c20:	ldr	r5, [r4, #4]
   13c24:	mov	r0, #0
   13c28:	str	r0, [r4, #4]
   13c2c:	ldr	r0, [r5, #4]
   13c30:	ldr	r1, [r0, #28]
   13c34:	ldr	r0, [r0, #40]	; 0x28
   13c38:	sub	r2, r0, #1
   13c3c:	ldrb	r1, [r1, r2]
   13c40:	cmp	r1, #47	; 0x2f
   13c44:	moveq	r0, r2
   13c48:	ldr	r1, [r4, #24]
   13c4c:	mov	r2, #47	; 0x2f
   13c50:	strb	r2, [r1, r0]!
   13c54:	add	r0, r1, #1
   13c58:	add	r1, r5, #168	; 0xa8
   13c5c:	ldr	r2, [r5, #52]	; 0x34
   13c60:	add	r2, r2, #1
   13c64:	bl	11284 <memmove@plt>
   13c68:	str	r5, [r4]
   13c6c:	ldrh	r0, [r5, #56]	; 0x38
   13c70:	cmp	r0, #11
   13c74:	bne	13ca8 <__assert_fail@plt+0x2748>
   13c78:	ldrd	r0, [r5, #112]	; 0x70
   13c7c:	eor	r2, r0, #1
   13c80:	orrs	r2, r2, r1
   13c84:	beq	13ee0 <__assert_fail@plt+0x2980>
   13c88:	eor	r0, r0, #2
   13c8c:	orrs	r0, r0, r1
   13c90:	bne	13ee8 <__assert_fail@plt+0x2988>
   13c94:	mov	r0, r4
   13c98:	mov	r1, r5
   13c9c:	mov	r2, #0
   13ca0:	bl	13464 <__assert_fail@plt+0x1f04>
   13ca4:	strh	r0, [r5, #56]	; 0x38
   13ca8:	cmp	r0, #1
   13cac:	bne	13ee0 <__assert_fail@plt+0x2980>
   13cb0:	ldr	r0, [r5, #48]	; 0x30
   13cb4:	cmp	r0, #0
   13cb8:	ldrdeq	r0, [r5, #64]	; 0x40
   13cbc:	strdeq	r0, [r4, #16]
   13cc0:	mov	r0, r4
   13cc4:	mov	r1, r5
   13cc8:	bl	14aec <__assert_fail@plt+0x358c>
   13ccc:	cmp	r0, #0
   13cd0:	bne	13ee0 <__assert_fail@plt+0x2980>
   13cd4:	bl	11410 <__errno_location@plt>
   13cd8:	mov	r1, #12
   13cdc:	str	r1, [r0]
   13ce0:	mov	r5, #0
   13ce4:	mov	r0, r5
   13ce8:	pop	{r4, r5, r6, r7, fp, pc}
   13cec:	ldrb	r0, [r4, #49]	; 0x31
   13cf0:	tst	r0, #32
   13cf4:	mov	r5, #0
   13cf8:	bne	13ee0 <__assert_fail@plt+0x2980>
   13cfc:	ldr	r0, [r6, #32]
   13d00:	cmp	r0, #0
   13d04:	ldrhne	r0, [r6, #56]	; 0x38
   13d08:	cmpne	r0, #4
   13d0c:	beq	13a48 <__assert_fail@plt+0x24e8>
   13d10:	mov	r0, #7
   13d14:	b	13a44 <__assert_fail@plt+0x24e4>
   13d18:	ldrb	r0, [r4, #49]	; 0x31
   13d1c:	tst	r0, #32
   13d20:	bne	13ee0 <__assert_fail@plt+0x2980>
   13d24:	ldr	r5, [r6, #4]
   13d28:	str	r5, [r4]
   13d2c:	mov	r0, r6
   13d30:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13d34:	ldr	r0, [r5, #48]	; 0x30
   13d38:	cmn	r0, #1
   13d3c:	beq	13da0 <__assert_fail@plt+0x2840>
   13d40:	ldrh	r0, [r5, #56]	; 0x38
   13d44:	cmp	r0, #11
   13d48:	beq	13ee8 <__assert_fail@plt+0x2988>
   13d4c:	ldr	r0, [r5, #40]	; 0x28
   13d50:	ldr	r1, [r4, #24]
   13d54:	mov	r2, #0
   13d58:	strb	r2, [r1, r0]
   13d5c:	ldr	r0, [r5, #48]	; 0x30
   13d60:	cmp	r0, #0
   13d64:	beq	13ddc <__assert_fail@plt+0x287c>
   13d68:	ldrh	r0, [r5, #58]	; 0x3a
   13d6c:	tst	r0, #2
   13d70:	bne	13e08 <__assert_fail@plt+0x28a8>
   13d74:	tst	r0, #1
   13d78:	bne	13ea4 <__assert_fail@plt+0x2944>
   13d7c:	ldr	r1, [r5, #4]
   13d80:	movw	r3, #45204	; 0xb094
   13d84:	movt	r3, #1
   13d88:	mov	r0, r4
   13d8c:	mvn	r2, #0
   13d90:	bl	13fbc <__assert_fail@plt+0x2a5c>
   13d94:	cmp	r0, #0
   13d98:	bne	13dec <__assert_fail@plt+0x288c>
   13d9c:	b	13ea4 <__assert_fail@plt+0x2944>
   13da0:	mov	r0, r5
   13da4:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13da8:	bl	11410 <__errno_location@plt>
   13dac:	mov	r5, #0
   13db0:	str	r5, [r0]
   13db4:	str	r5, [r4]
   13db8:	mov	r0, r5
   13dbc:	pop	{r4, r5, r6, r7, fp, pc}
   13dc0:	bl	11410 <__errno_location@plt>
   13dc4:	ldr	r0, [r0]
   13dc8:	mov	r1, #7
   13dcc:	strh	r1, [r6, #56]	; 0x38
   13dd0:	str	r0, [r6, #32]
   13dd4:	mov	r5, r6
   13dd8:	b	13c68 <__assert_fail@plt+0x2708>
   13ddc:	mov	r0, r4
   13de0:	bl	14a08 <__assert_fail@plt+0x34a8>
   13de4:	cmp	r0, #0
   13de8:	beq	13ea4 <__assert_fail@plt+0x2944>
   13dec:	bl	11410 <__errno_location@plt>
   13df0:	ldr	r0, [r0]
   13df4:	str	r0, [r5, #32]
   13df8:	ldr	r0, [r4, #48]	; 0x30
   13dfc:	orr	r0, r0, #8192	; 0x2000
   13e00:	str	r0, [r4, #48]	; 0x30
   13e04:	b	13ea4 <__assert_fail@plt+0x2944>
   13e08:	ldr	r0, [r4, #48]	; 0x30
   13e0c:	tst	r0, #4
   13e10:	bne	13e9c <__assert_fail@plt+0x293c>
   13e14:	ldr	r1, [r5, #36]	; 0x24
   13e18:	tst	r0, #512	; 0x200
   13e1c:	bne	13e90 <__assert_fail@plt+0x2930>
   13e20:	mov	r0, r1
   13e24:	bl	114d0 <fchdir@plt>
   13e28:	cmp	r0, #0
   13e2c:	beq	13e9c <__assert_fail@plt+0x293c>
   13e30:	bl	11410 <__errno_location@plt>
   13e34:	ldr	r0, [r0]
   13e38:	str	r0, [r5, #32]
   13e3c:	ldr	r0, [r4, #48]	; 0x30
   13e40:	orr	r0, r0, #8192	; 0x2000
   13e44:	str	r0, [r4, #48]	; 0x30
   13e48:	b	13e9c <__assert_fail@plt+0x293c>
   13e4c:	movw	r1, #45205	; 0xb095
   13e50:	movt	r1, #1
   13e54:	mov	r0, r4
   13e58:	bl	13738 <__assert_fail@plt+0x21d8>
   13e5c:	str	r0, [r5, #36]	; 0x24
   13e60:	cmn	r0, #1
   13e64:	ble	13e78 <__assert_fail@plt+0x2918>
   13e68:	ldrh	r0, [r5, #58]	; 0x3a
   13e6c:	orr	r0, r0, #2
   13e70:	strh	r0, [r5, #58]	; 0x3a
   13e74:	b	13abc <__assert_fail@plt+0x255c>
   13e78:	bl	11410 <__errno_location@plt>
   13e7c:	ldr	r0, [r0]
   13e80:	mov	r1, #7
   13e84:	strh	r1, [r5, #56]	; 0x38
   13e88:	str	r0, [r5, #32]
   13e8c:	b	13abc <__assert_fail@plt+0x255c>
   13e90:	mov	r0, r4
   13e94:	mov	r2, #1
   13e98:	bl	14ba4 <__assert_fail@plt+0x3644>
   13e9c:	ldr	r0, [r5, #36]	; 0x24
   13ea0:	bl	11524 <close@plt>
   13ea4:	ldrh	r0, [r5, #56]	; 0x38
   13ea8:	cmp	r0, #2
   13eac:	beq	13ed4 <__assert_fail@plt+0x2974>
   13eb0:	ldr	r0, [r5, #32]
   13eb4:	mov	r1, #7
   13eb8:	cmp	r0, #0
   13ebc:	movweq	r1, #6
   13ec0:	strh	r1, [r5, #56]	; 0x38
   13ec4:	bne	13ed4 <__assert_fail@plt+0x2974>
   13ec8:	mov	r0, r4
   13ecc:	mov	r1, r5
   13ed0:	bl	13eec <__assert_fail@plt+0x298c>
   13ed4:	ldrb	r0, [r4, #49]	; 0x31
   13ed8:	tst	r0, #32
   13edc:	movne	r5, #0
   13ee0:	mov	r0, r5
   13ee4:	pop	{r4, r5, r6, r7, fp, pc}
   13ee8:	bl	11518 <abort@plt>
   13eec:	push	{r4, r5, r6, r7, fp, lr}
   13ef0:	add	fp, sp, #16
   13ef4:	sub	sp, sp, #24
   13ef8:	add	lr, r1, #64	; 0x40
   13efc:	ldrh	r2, [r0, #48]	; 0x30
   13f00:	movw	r3, #258	; 0x102
   13f04:	tst	r2, r3
   13f08:	beq	13f40 <__assert_fail@plt+0x29e0>
   13f0c:	ldrd	r2, [lr]
   13f10:	stm	sp, {r2, r3}
   13f14:	ldrd	r2, [r1, #160]	; 0xa0
   13f18:	str	r3, [sp, #12]
   13f1c:	str	r2, [sp, #8]
   13f20:	ldr	r0, [r0, #56]	; 0x38
   13f24:	mov	r1, sp
   13f28:	bl	15e18 <__assert_fail@plt+0x48b8>
   13f2c:	cmp	r0, #0
   13f30:	beq	13fb8 <__assert_fail@plt+0x2a58>
   13f34:	bl	12fd4 <__assert_fail@plt+0x1a74>
   13f38:	sub	sp, fp, #16
   13f3c:	pop	{r4, r5, r6, r7, fp, pc}
   13f40:	ldr	r2, [r1, #4]
   13f44:	cmp	r2, #0
   13f48:	beq	13fb0 <__assert_fail@plt+0x2a50>
   13f4c:	ldr	r3, [r2, #48]	; 0x30
   13f50:	cmp	r3, #0
   13f54:	blt	13fb0 <__assert_fail@plt+0x2a50>
   13f58:	ldr	ip, [r0, #56]	; 0x38
   13f5c:	ldrd	r4, [ip, #16]
   13f60:	orrs	r3, r4, r5
   13f64:	beq	13fb8 <__assert_fail@plt+0x2a58>
   13f68:	ldrd	r4, [r1, #160]	; 0xa0
   13f6c:	ldrd	r6, [ip]
   13f70:	eor	r1, r7, r5
   13f74:	eor	r3, r6, r4
   13f78:	orrs	r1, r3, r1
   13f7c:	bne	13fb0 <__assert_fail@plt+0x2a50>
   13f80:	ldrd	r4, [lr]
   13f84:	ldr	r1, [ip, #8]!
   13f88:	eor	r1, r1, r4
   13f8c:	ldr	r3, [ip, #4]
   13f90:	eor	r3, r3, r5
   13f94:	orrs	r1, r1, r3
   13f98:	bne	13fb0 <__assert_fail@plt+0x2a50>
   13f9c:	ldrd	r4, [r2, #64]	; 0x40
   13fa0:	strd	r4, [ip]
   13fa4:	ldr	r0, [r0, #56]	; 0x38
   13fa8:	ldrd	r2, [r2, #160]	; 0xa0
   13fac:	strd	r2, [r0]
   13fb0:	sub	sp, fp, #16
   13fb4:	pop	{r4, r5, r6, r7, fp, pc}
   13fb8:	bl	11518 <abort@plt>
   13fbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13fc0:	add	fp, sp, #24
   13fc4:	sub	sp, sp, #104	; 0x68
   13fc8:	mov	r7, r3
   13fcc:	mov	r4, r2
   13fd0:	mov	r8, r1
   13fd4:	mov	r5, r0
   13fd8:	cmp	r3, #0
   13fdc:	beq	14000 <__assert_fail@plt+0x2aa0>
   13fe0:	movw	r1, #45204	; 0xb094
   13fe4:	movt	r1, #1
   13fe8:	mov	r0, r7
   13fec:	bl	11260 <strcmp@plt>
   13ff0:	mov	r6, r0
   13ff4:	cmp	r0, #0
   13ff8:	movwne	r6, #1
   13ffc:	b	14004 <__assert_fail@plt+0x2aa4>
   14000:	mov	r6, #1
   14004:	ldr	r0, [r5, #48]	; 0x30
   14008:	tst	r0, #4
   1400c:	bne	14064 <__assert_fail@plt+0x2b04>
   14010:	mov	r9, #0
   14014:	cmn	r4, #1
   14018:	mov	r1, #0
   1401c:	movwgt	r1, #1
   14020:	orrs	r1, r1, r6
   14024:	bne	14084 <__assert_fail@plt+0x2b24>
   14028:	ands	r0, r0, #512	; 0x200
   1402c:	beq	14084 <__assert_fail@plt+0x2b24>
   14030:	add	r4, r5, #60	; 0x3c
   14034:	mov	r0, r4
   14038:	bl	1600c <__assert_fail@plt+0x4aac>
   1403c:	cmp	r0, #0
   14040:	bne	1408c <__assert_fail@plt+0x2b2c>
   14044:	mov	r0, r4
   14048:	bl	16058 <__assert_fail@plt+0x4af8>
   1404c:	cmn	r0, #1
   14050:	ble	1408c <__assert_fail@plt+0x2b2c>
   14054:	mov	r4, r0
   14058:	mov	r9, #0
   1405c:	mov	r7, #0
   14060:	b	140a8 <__assert_fail@plt+0x2b48>
   14064:	mov	r5, #0
   14068:	cmp	r4, #0
   1406c:	blt	14190 <__assert_fail@plt+0x2c30>
   14070:	ands	r0, r0, #512	; 0x200
   14074:	beq	14190 <__assert_fail@plt+0x2c30>
   14078:	mov	r0, r4
   1407c:	bl	11524 <close@plt>
   14080:	b	14190 <__assert_fail@plt+0x2c30>
   14084:	cmn	r4, #1
   14088:	bgt	140a8 <__assert_fail@plt+0x2b48>
   1408c:	mov	r0, r5
   14090:	mov	r1, r7
   14094:	bl	13738 <__assert_fail@plt+0x21d8>
   14098:	cmp	r0, #0
   1409c:	blt	14140 <__assert_fail@plt+0x2be0>
   140a0:	mov	r4, r0
   140a4:	mov	r9, #1
   140a8:	ldrb	r0, [r5, #48]	; 0x30
   140ac:	tst	r0, #2
   140b0:	bne	140d4 <__assert_fail@plt+0x2b74>
   140b4:	cmp	r7, #0
   140b8:	beq	1411c <__assert_fail@plt+0x2bbc>
   140bc:	movw	r1, #45204	; 0xb094
   140c0:	movt	r1, #1
   140c4:	mov	r0, r7
   140c8:	bl	11260 <strcmp@plt>
   140cc:	cmp	r0, #0
   140d0:	bne	1411c <__assert_fail@plt+0x2bbc>
   140d4:	mov	r1, sp
   140d8:	mov	r0, r4
   140dc:	bl	19f78 <__assert_fail@plt+0x8a18>
   140e0:	cmp	r0, #0
   140e4:	bne	1416c <__assert_fail@plt+0x2c0c>
   140e8:	ldrd	r0, [r8, #64]	; 0x40
   140ec:	ldm	sp, {r2, r3}
   140f0:	eor	r1, r1, r3
   140f4:	eor	r0, r0, r2
   140f8:	orrs	r0, r0, r1
   140fc:	bne	14160 <__assert_fail@plt+0x2c00>
   14100:	ldrd	r0, [r8, #160]	; 0xa0
   14104:	ldr	r2, [sp, #96]	; 0x60
   14108:	ldr	r3, [sp, #100]	; 0x64
   1410c:	eor	r1, r1, r3
   14110:	eor	r0, r0, r2
   14114:	orrs	r0, r0, r1
   14118:	bne	14160 <__assert_fail@plt+0x2c00>
   1411c:	ldrb	r0, [r5, #49]	; 0x31
   14120:	tst	r0, #2
   14124:	bne	14148 <__assert_fail@plt+0x2be8>
   14128:	mov	r0, r4
   1412c:	bl	114d0 <fchdir@plt>
   14130:	mov	r5, r0
   14134:	cmp	r9, #0
   14138:	bne	14178 <__assert_fail@plt+0x2c18>
   1413c:	b	14190 <__assert_fail@plt+0x2c30>
   14140:	mvn	r5, #0
   14144:	b	14190 <__assert_fail@plt+0x2c30>
   14148:	mov	r0, r5
   1414c:	mov	r1, r4
   14150:	mov	r2, r6
   14154:	bl	14ba4 <__assert_fail@plt+0x3644>
   14158:	mov	r5, #0
   1415c:	b	14190 <__assert_fail@plt+0x2c30>
   14160:	bl	11410 <__errno_location@plt>
   14164:	mov	r1, #2
   14168:	str	r1, [r0]
   1416c:	mvn	r5, #0
   14170:	cmp	r9, #0
   14174:	beq	14190 <__assert_fail@plt+0x2c30>
   14178:	bl	11410 <__errno_location@plt>
   1417c:	mov	r6, r0
   14180:	ldr	r7, [r0]
   14184:	mov	r0, r4
   14188:	bl	11524 <close@plt>
   1418c:	str	r7, [r6]
   14190:	mov	r0, r5
   14194:	sub	sp, fp, #24
   14198:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1419c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a0:	add	fp, sp, #28
   141a4:	sub	sp, sp, #68	; 0x44
   141a8:	mov	r4, r1
   141ac:	ldr	sl, [r0]
   141b0:	ldr	r7, [sl, #12]
   141b4:	cmp	r7, #0
   141b8:	str	r0, [fp, #-36]	; 0xffffffdc
   141bc:	beq	14530 <__assert_fail@plt+0x2fd0>
   141c0:	mov	r0, r7
   141c4:	bl	114c4 <dirfd@plt>
   141c8:	str	r0, [fp, #-32]	; 0xffffffe0
   141cc:	cmn	r0, #1
   141d0:	ble	14568 <__assert_fail@plt+0x3008>
   141d4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   141d8:	mov	r1, ip
   141dc:	ldr	r0, [r1, #44]!	; 0x2c
   141e0:	str	r1, [fp, #-44]	; 0xffffffd4
   141e4:	mvn	r1, #0
   141e8:	cmp	r0, #0
   141ec:	movweq	r1, #34464	; 0x86a0
   141f0:	movteq	r1, #1
   141f4:	str	r1, [sp, #28]
   141f8:	mov	r0, #1
   141fc:	str	r0, [sp, #4]
   14200:	str	r4, [sp, #8]
   14204:	ldr	r1, [sl, #28]
   14208:	ldr	r0, [sl, #40]	; 0x28
   1420c:	sub	r2, r0, #1
   14210:	ldrb	r1, [r1, r2]
   14214:	cmp	r1, #47	; 0x2f
   14218:	moveq	r0, r2
   1421c:	ldrb	r1, [ip, #48]	; 0x30
   14220:	mov	r9, #0
   14224:	tst	r1, #4
   14228:	mov	r1, #0
   1422c:	str	r1, [sp, #40]	; 0x28
   14230:	beq	14248 <__assert_fail@plt+0x2ce8>
   14234:	ldr	r1, [ip, #24]
   14238:	mov	r2, #47	; 0x2f
   1423c:	strb	r2, [r1, r0]!
   14240:	add	r1, r1, #1
   14244:	str	r1, [sp, #40]	; 0x28
   14248:	str	r7, [sp, #12]
   1424c:	add	r1, r0, #1
   14250:	ldr	r4, [sl, #12]
   14254:	cmp	r4, #0
   14258:	str	r1, [fp, #-40]	; 0xffffffd8
   1425c:	beq	14584 <__assert_fail@plt+0x3024>
   14260:	ldr	r0, [sl, #48]	; 0x30
   14264:	add	r0, r0, #1
   14268:	str	r0, [sp, #24]
   1426c:	ldr	r0, [ip, #36]	; 0x24
   14270:	sub	r0, r0, r1
   14274:	str	r0, [sp, #44]	; 0x2c
   14278:	mov	r6, #0
   1427c:	bl	11410 <__errno_location@plt>
   14280:	str	r0, [sp, #36]	; 0x24
   14284:	mov	r9, #0
   14288:	mov	r7, #0
   1428c:	mov	r0, #0
   14290:	str	r0, [sp, #48]	; 0x30
   14294:	mov	r0, #0
   14298:	str	r0, [sp, #20]
   1429c:	mov	r0, #0
   142a0:	str	r0, [sp, #16]
   142a4:	str	sl, [sp, #32]
   142a8:	ldr	r0, [sp, #36]	; 0x24
   142ac:	str	r6, [r0]
   142b0:	mov	r0, r4
   142b4:	bl	114ac <readdir64@plt>
   142b8:	cmp	r0, #0
   142bc:	beq	147bc <__assert_fail@plt+0x325c>
   142c0:	mov	r8, r0
   142c4:	mov	r6, r9
   142c8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   142cc:	ldrb	r0, [r5, #48]	; 0x30
   142d0:	tst	r0, #32
   142d4:	ldrbeq	r0, [r8, #19]
   142d8:	cmpeq	r0, #46	; 0x2e
   142dc:	beq	14384 <__assert_fail@plt+0x2e24>
   142e0:	add	r4, r8, #19
   142e4:	mov	r0, r4
   142e8:	bl	113e0 <strlen@plt>
   142ec:	mov	sl, r0
   142f0:	mov	r0, r5
   142f4:	mov	r1, r4
   142f8:	mov	r2, sl
   142fc:	bl	133b4 <__assert_fail@plt+0x1e54>
   14300:	mov	r9, r0
   14304:	cmp	r0, #0
   14308:	beq	14598 <__assert_fail@plt+0x3038>
   1430c:	ldr	r0, [sp, #44]	; 0x2c
   14310:	cmp	sl, r0
   14314:	bcs	1432c <__assert_fail@plt+0x2dcc>
   14318:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1431c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14320:	adds	r0, sl, r3
   14324:	bcc	143c8 <__assert_fail@plt+0x2e68>
   14328:	b	1492c <__assert_fail@plt+0x33cc>
   1432c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14330:	add	r0, sl, r0
   14334:	add	r1, r0, #1
   14338:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1433c:	ldr	r4, [r5, #24]
   14340:	mov	r0, r5
   14344:	bl	1333c <__assert_fail@plt+0x1ddc>
   14348:	cmp	r0, #0
   1434c:	beq	14598 <__assert_fail@plt+0x3038>
   14350:	ldr	r0, [r5, #24]
   14354:	cmp	r4, r0
   14358:	mov	r2, r5
   1435c:	beq	143b0 <__assert_fail@plt+0x2e50>
   14360:	ldrb	r1, [r2, #48]	; 0x30
   14364:	tst	r1, #4
   14368:	ldr	r1, [sp, #40]	; 0x28
   1436c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14370:	addne	r1, r0, r3
   14374:	str	r1, [sp, #40]	; 0x28
   14378:	mov	r0, #1
   1437c:	str	r0, [sp, #16]
   14380:	b	143b4 <__assert_fail@plt+0x2e54>
   14384:	ldrb	r0, [r8, #20]
   14388:	cmp	r0, #0
   1438c:	beq	143a0 <__assert_fail@plt+0x2e40>
   14390:	cmp	r0, #46	; 0x2e
   14394:	ldrbeq	r0, [r8, #21]
   14398:	cmpeq	r0, #0
   1439c:	bne	142e0 <__assert_fail@plt+0x2d80>
   143a0:	ldr	sl, [sp, #32]
   143a4:	mov	r9, r6
   143a8:	mov	r6, #0
   143ac:	b	14514 <__assert_fail@plt+0x2fb4>
   143b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   143b4:	ldr	r0, [r2, #36]	; 0x24
   143b8:	sub	r0, r0, r3
   143bc:	str	r0, [sp, #44]	; 0x2c
   143c0:	adds	r0, sl, r3
   143c4:	bcs	1492c <__assert_fail@plt+0x33cc>
   143c8:	ldr	r1, [sp, #24]
   143cc:	str	r1, [r9, #48]	; 0x30
   143d0:	ldr	r1, [r2]
   143d4:	str	r0, [r9, #40]	; 0x28
   143d8:	str	r1, [r9, #4]
   143dc:	ldrd	r0, [r8]
   143e0:	strd	r0, [r9, #160]	; 0xa0
   143e4:	ldrb	r0, [r2, #48]	; 0x30
   143e8:	tst	r0, #4
   143ec:	ldr	sl, [sp, #32]
   143f0:	mov	r5, r6
   143f4:	bne	14404 <__assert_fail@plt+0x2ea4>
   143f8:	add	r0, r9, #168	; 0xa8
   143fc:	str	r0, [r9, #24]
   14400:	b	14424 <__assert_fail@plt+0x2ec4>
   14404:	ldr	r0, [r9, #28]
   14408:	ldr	r2, [r9, #52]	; 0x34
   1440c:	str	r0, [r9, #24]
   14410:	add	r1, r9, #168	; 0xa8
   14414:	add	r2, r2, #1
   14418:	ldr	r0, [sp, #40]	; 0x28
   1441c:	bl	11284 <memmove@plt>
   14420:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14424:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14428:	ldr	r0, [r0]
   1442c:	cmp	r0, #0
   14430:	beq	14458 <__assert_fail@plt+0x2ef8>
   14434:	ldrb	r0, [r2, #49]	; 0x31
   14438:	tst	r0, #4
   1443c:	bne	14458 <__assert_fail@plt+0x2ef8>
   14440:	mov	r0, r2
   14444:	mov	r1, r9
   14448:	mov	r2, #0
   1444c:	bl	13464 <__assert_fail@plt+0x1f04>
   14450:	strh	r0, [r9, #56]	; 0x38
   14454:	b	144a8 <__assert_fail@plt+0x2f48>
   14458:	add	r0, r9, #64	; 0x40
   1445c:	ldr	r1, [r2, #48]	; 0x30
   14460:	mov	r4, #0
   14464:	tst	r1, #8
   14468:	beq	1448c <__assert_fail@plt+0x2f2c>
   1446c:	ldrb	r2, [r8, #18]
   14470:	orr	r3, r2, #4
   14474:	cmp	r3, #4
   14478:	beq	1448c <__assert_fail@plt+0x2f2c>
   1447c:	eor	r2, r2, #10
   14480:	and	r1, r1, #16
   14484:	orrs	r4, r1, r2
   14488:	movwne	r4, #1
   1448c:	mov	r1, #11
   14490:	strh	r1, [r9, #56]	; 0x38
   14494:	ldrb	r1, [r8, #18]
   14498:	bl	14e6c <__assert_fail@plt+0x390c>
   1449c:	eor	r1, r4, #1
   144a0:	mov	r0, r9
   144a4:	bl	13434 <__assert_fail@plt+0x1ed4>
   144a8:	mov	r6, #0
   144ac:	str	r6, [r9, #8]
   144b0:	cmp	r5, #0
   144b4:	mov	r4, r9
   144b8:	ldrne	r0, [sp, #48]	; 0x30
   144bc:	strne	r9, [r0, #8]
   144c0:	movne	r4, r5
   144c4:	movw	r0, #10000	; 0x2710
   144c8:	cmp	r7, r0
   144cc:	bne	144f0 <__assert_fail@plt+0x2f90>
   144d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   144d4:	ldr	r0, [r0]
   144d8:	cmp	r0, #0
   144dc:	bne	144f0 <__assert_fail@plt+0x2f90>
   144e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   144e4:	mov	r0, sl
   144e8:	bl	14e8c <__assert_fail@plt+0x392c>
   144ec:	str	r0, [sp, #20]
   144f0:	add	r7, r7, #1
   144f4:	ldr	r0, [sp, #28]
   144f8:	cmp	r0, r7
   144fc:	mov	r0, #0
   14500:	movwls	r0, #15
   14504:	cmp	r0, #0
   14508:	bne	14978 <__assert_fail@plt+0x3418>
   1450c:	str	r9, [sp, #48]	; 0x30
   14510:	mov	r9, r4
   14514:	ldr	r4, [sl, #12]
   14518:	cmp	r4, #0
   1451c:	bne	142a8 <__assert_fail@plt+0x2d48>
   14520:	ldr	r0, [sp, #16]
   14524:	tst	r0, #1
   14528:	ldr	r4, [sp, #8]
   1452c:	b	14808 <__assert_fail@plt+0x32a8>
   14530:	mov	r2, r0
   14534:	ldr	r3, [r0, #48]	; 0x30
   14538:	and	r1, r3, #516	; 0x204
   1453c:	mvn	r0, #99	; 0x63
   14540:	cmp	r1, #512	; 0x200
   14544:	ldreq	r0, [r2, #32]
   14548:	ldr	r1, [sl, #24]
   1454c:	mov	r2, #0
   14550:	tst	r3, #16
   14554:	beq	145ec <__assert_fail@plt+0x308c>
   14558:	tst	r3, #1
   1455c:	bne	145e0 <__assert_fail@plt+0x3080>
   14560:	mov	r2, #32768	; 0x8000
   14564:	b	145ec <__assert_fail@plt+0x308c>
   14568:	ldr	r0, [sl, #12]
   1456c:	bl	1153c <closedir@plt>
   14570:	mov	r9, #0
   14574:	str	r9, [sl, #12]
   14578:	cmp	r4, #3
   1457c:	beq	14638 <__assert_fail@plt+0x30d8>
   14580:	b	149e0 <__assert_fail@plt+0x3480>
   14584:	mov	r7, #0
   14588:	mov	r0, #0
   1458c:	str	r0, [sp, #20]
   14590:	ldr	r4, [sp, #8]
   14594:	b	14820 <__assert_fail@plt+0x32c0>
   14598:	ldr	r4, [sp, #36]	; 0x24
   1459c:	ldr	r8, [r4]
   145a0:	mov	r0, r9
   145a4:	bl	12fd4 <__assert_fail@plt+0x1a74>
   145a8:	mov	r0, r6
   145ac:	bl	13768 <__assert_fail@plt+0x2208>
   145b0:	ldr	r7, [sp, #32]
   145b4:	ldr	r0, [r7, #12]
   145b8:	bl	1153c <closedir@plt>
   145bc:	mov	r9, #0
   145c0:	str	r9, [r7, #12]
   145c4:	mov	r0, #7
   145c8:	strh	r0, [r7, #56]	; 0x38
   145cc:	ldr	r0, [r5, #48]	; 0x30
   145d0:	orr	r0, r0, #8192	; 0x2000
   145d4:	str	r0, [r5, #48]	; 0x30
   145d8:	str	r8, [r4]
   145dc:	b	149e0 <__assert_fail@plt+0x3480>
   145e0:	ldr	r3, [sl, #48]	; 0x30
   145e4:	cmp	r3, #0
   145e8:	movne	r2, #32768	; 0x8000
   145ec:	sub	r3, fp, #32
   145f0:	bl	1614c <__assert_fail@plt+0x4bec>
   145f4:	str	r0, [sl, #12]
   145f8:	cmp	r0, #0
   145fc:	beq	1462c <__assert_fail@plt+0x30cc>
   14600:	ldrh	r0, [sl, #56]	; 0x38
   14604:	cmp	r0, #11
   14608:	bne	14650 <__assert_fail@plt+0x30f0>
   1460c:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14610:	mov	r0, r6
   14614:	mov	r1, sl
   14618:	mov	r2, #0
   1461c:	bl	13464 <__assert_fail@plt+0x1f04>
   14620:	mov	ip, r6
   14624:	strh	r0, [sl, #56]	; 0x38
   14628:	b	14698 <__assert_fail@plt+0x3138>
   1462c:	mov	r9, #0
   14630:	cmp	r4, #3
   14634:	bne	149e0 <__assert_fail@plt+0x3480>
   14638:	mov	r0, #4
   1463c:	strh	r0, [sl, #56]	; 0x38
   14640:	bl	11410 <__errno_location@plt>
   14644:	ldr	r0, [r0]
   14648:	str	r0, [sl, #32]
   1464c:	b	149e0 <__assert_fail@plt+0x3480>
   14650:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14654:	ldrb	r0, [ip, #49]	; 0x31
   14658:	tst	r0, #1
   1465c:	beq	14698 <__assert_fail@plt+0x3138>
   14660:	mov	r0, ip
   14664:	mov	r1, sl
   14668:	bl	13eec <__assert_fail@plt+0x298c>
   1466c:	mov	r9, #0
   14670:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14674:	mov	r1, sl
   14678:	mov	r2, #0
   1467c:	bl	13464 <__assert_fail@plt+0x1f04>
   14680:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14684:	mov	r1, sl
   14688:	bl	14aec <__assert_fail@plt+0x358c>
   1468c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14690:	cmp	r0, #0
   14694:	beq	1499c <__assert_fail@plt+0x343c>
   14698:	mov	r1, ip
   1469c:	ldr	r0, [r1, #44]!	; 0x2c
   146a0:	str	r1, [fp, #-44]	; 0xffffffd4
   146a4:	mvn	r1, #0
   146a8:	cmp	r0, #0
   146ac:	movweq	r1, #34464	; 0x86a0
   146b0:	movteq	r1, #1
   146b4:	str	r1, [sp, #28]
   146b8:	mov	r6, #0
   146bc:	cmp	r4, #2
   146c0:	beq	146e4 <__assert_fail@plt+0x3184>
   146c4:	ldr	r0, [ip, #48]	; 0x30
   146c8:	and	r1, r0, #56	; 0x38
   146cc:	mov	r0, #0
   146d0:	cmp	r1, #24
   146d4:	ldreq	r1, [sl, #84]	; 0x54
   146d8:	cmpeq	r1, #2
   146dc:	beq	149ec <__assert_fail@plt+0x348c>
   146e0:	eor	r6, r0, #1
   146e4:	cmp	r4, #3
   146e8:	beq	146fc <__assert_fail@plt+0x319c>
   146ec:	cmp	r6, #0
   146f0:	bne	146fc <__assert_fail@plt+0x319c>
   146f4:	str	r6, [sp, #4]
   146f8:	b	14200 <__assert_fail@plt+0x2ca0>
   146fc:	ldrb	r0, [ip, #49]	; 0x31
   14700:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14704:	tst	r0, #2
   14708:	beq	14728 <__assert_fail@plt+0x31c8>
   1470c:	mov	r0, r2
   14710:	movw	r1, #1030	; 0x406
   14714:	mov	r2, #3
   14718:	bl	19804 <__assert_fail@plt+0x82a4>
   1471c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14720:	mov	r2, r0
   14724:	str	r0, [fp, #-32]	; 0xffffffe0
   14728:	cmp	r2, #0
   1472c:	blt	1474c <__assert_fail@plt+0x31ec>
   14730:	mov	r0, ip
   14734:	mov	r1, sl
   14738:	mov	r3, #0
   1473c:	bl	13fbc <__assert_fail@plt+0x2a5c>
   14740:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14744:	cmp	r0, #0
   14748:	beq	141f8 <__assert_fail@plt+0x2c98>
   1474c:	subs	r0, r4, #3
   14750:	movwne	r0, #1
   14754:	eor	r1, r6, #1
   14758:	orrs	r0, r0, r1
   1475c:	bne	1476c <__assert_fail@plt+0x320c>
   14760:	bl	11410 <__errno_location@plt>
   14764:	ldr	r0, [r0]
   14768:	str	r0, [sl, #32]
   1476c:	ldrh	r0, [sl, #58]	; 0x3a
   14770:	orr	r0, r0, #1
   14774:	strh	r0, [sl, #58]	; 0x3a
   14778:	ldr	r0, [sl, #12]
   1477c:	bl	1153c <closedir@plt>
   14780:	mov	r6, #0
   14784:	str	r6, [sl, #12]
   14788:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1478c:	ldr	r0, [ip, #48]	; 0x30
   14790:	tst	r0, #512	; 0x200
   14794:	beq	147ac <__assert_fail@plt+0x324c>
   14798:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1479c:	cmp	r0, #0
   147a0:	blt	147ac <__assert_fail@plt+0x324c>
   147a4:	bl	11524 <close@plt>
   147a8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   147ac:	mov	r0, #0
   147b0:	str	r0, [sp, #4]
   147b4:	str	r6, [sl, #12]
   147b8:	b	14200 <__assert_fail@plt+0x2ca0>
   147bc:	ldr	r0, [sp, #36]	; 0x24
   147c0:	ldr	r0, [r0]
   147c4:	cmp	r0, #0
   147c8:	beq	147e4 <__assert_fail@plt+0x3284>
   147cc:	str	r0, [sl, #32]
   147d0:	ldr	r0, [sp, #12]
   147d4:	orrs	r0, r0, r7
   147d8:	mov	r0, #4
   147dc:	movwne	r0, #7
   147e0:	strh	r0, [sl, #56]	; 0x38
   147e4:	ldr	r0, [sl, #12]
   147e8:	cmp	r0, #0
   147ec:	ldr	r4, [sp, #8]
   147f0:	beq	14988 <__assert_fail@plt+0x3428>
   147f4:	bl	1153c <closedir@plt>
   147f8:	mov	r0, #0
   147fc:	str	r0, [sl, #12]
   14800:	ldr	r0, [sp, #16]
   14804:	tst	r0, #1
   14808:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1480c:	beq	14820 <__assert_fail@plt+0x32c0>
   14810:	mov	r0, ip
   14814:	mov	r1, r9
   14818:	bl	14ed0 <__assert_fail@plt+0x3970>
   1481c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14820:	ldrb	r0, [ip, #48]	; 0x30
   14824:	tst	r0, #4
   14828:	beq	14854 <__assert_fail@plt+0x32f4>
   1482c:	ldr	r0, [ip, #36]	; 0x24
   14830:	ldr	r2, [sp, #40]	; 0x28
   14834:	sub	r1, r2, #1
   14838:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1483c:	cmp	r3, r0
   14840:	moveq	r2, r1
   14844:	cmp	r7, #0
   14848:	moveq	r2, r1
   1484c:	mov	r0, #0
   14850:	strb	r0, [r2]
   14854:	ldr	r0, [sp, #12]
   14858:	cmp	r0, #0
   1485c:	ldreq	r0, [sp, #4]
   14860:	eorseq	r0, r0, #1
   14864:	beq	14890 <__assert_fail@plt+0x3330>
   14868:	cmp	r7, #0
   1486c:	bne	148c4 <__assert_fail@plt+0x3364>
   14870:	cmp	r4, #3
   14874:	bne	149d4 <__assert_fail@plt+0x3474>
   14878:	ldrh	r0, [sl, #56]	; 0x38
   1487c:	cmp	r0, #4
   14880:	cmpne	r0, #7
   14884:	movne	r0, #6
   14888:	strhne	r0, [sl, #56]	; 0x38
   1488c:	b	149d4 <__assert_fail@plt+0x3474>
   14890:	cmp	r4, #1
   14894:	cmpne	r7, #0
   14898:	bne	148c4 <__assert_fail@plt+0x3364>
   1489c:	ldr	r0, [sl, #48]	; 0x30
   148a0:	cmp	r0, #0
   148a4:	beq	149ac <__assert_fail@plt+0x344c>
   148a8:	ldr	r1, [sl, #4]
   148ac:	movw	r3, #45204	; 0xb094
   148b0:	movt	r3, #1
   148b4:	mov	r0, ip
   148b8:	mvn	r2, #0
   148bc:	bl	13fbc <__assert_fail@plt+0x2a5c>
   148c0:	b	149b4 <__assert_fail@plt+0x3454>
   148c4:	ldr	r0, [sp, #20]
   148c8:	tst	r0, #1
   148cc:	beq	148fc <__assert_fail@plt+0x339c>
   148d0:	movw	r0, #20312	; 0x4f58
   148d4:	movt	r0, #1
   148d8:	str	r0, [ip, #44]	; 0x2c
   148dc:	mov	r0, ip
   148e0:	mov	r1, r9
   148e4:	mov	r2, r7
   148e8:	bl	135cc <__assert_fail@plt+0x206c>
   148ec:	ldr	ip, [fp, #-36]	; 0xffffffdc
   148f0:	mov	r9, r0
   148f4:	mov	r0, #0
   148f8:	str	r0, [ip, #44]	; 0x2c
   148fc:	cmp	r7, #2
   14900:	bcc	149e0 <__assert_fail@plt+0x3480>
   14904:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14908:	ldr	r0, [r0]
   1490c:	cmp	r0, #0
   14910:	beq	149e0 <__assert_fail@plt+0x3480>
   14914:	mov	r0, ip
   14918:	mov	r1, r9
   1491c:	mov	r2, r7
   14920:	bl	135cc <__assert_fail@plt+0x206c>
   14924:	mov	r9, r0
   14928:	b	149e0 <__assert_fail@plt+0x3480>
   1492c:	mov	r0, r9
   14930:	mov	r4, r2
   14934:	bl	12fd4 <__assert_fail@plt+0x1a74>
   14938:	mov	r0, r6
   1493c:	bl	13768 <__assert_fail@plt+0x2208>
   14940:	ldr	r5, [sp, #32]
   14944:	ldr	r0, [r5, #12]
   14948:	bl	1153c <closedir@plt>
   1494c:	mov	r9, #0
   14950:	str	r9, [r5, #12]
   14954:	mov	r0, #7
   14958:	strh	r0, [r5, #56]	; 0x38
   1495c:	ldr	r0, [r4, #48]	; 0x30
   14960:	orr	r0, r0, #8192	; 0x2000
   14964:	str	r0, [r4, #48]	; 0x30
   14968:	mov	r0, #36	; 0x24
   1496c:	ldr	r1, [sp, #36]	; 0x24
   14970:	str	r0, [r1]
   14974:	b	149e0 <__assert_fail@plt+0x3480>
   14978:	cmp	r0, #15
   1497c:	bne	149dc <__assert_fail@plt+0x347c>
   14980:	mov	r9, r4
   14984:	ldr	r4, [sp, #8]
   14988:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1498c:	ldr	r0, [sp, #16]
   14990:	tst	r0, #1
   14994:	bne	14810 <__assert_fail@plt+0x32b0>
   14998:	b	14820 <__assert_fail@plt+0x32c0>
   1499c:	bl	11410 <__errno_location@plt>
   149a0:	mov	r1, #12
   149a4:	str	r1, [r0]
   149a8:	b	149e0 <__assert_fail@plt+0x3480>
   149ac:	mov	r0, ip
   149b0:	bl	14a08 <__assert_fail@plt+0x34a8>
   149b4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   149b8:	cmp	r0, #0
   149bc:	beq	14868 <__assert_fail@plt+0x3308>
   149c0:	mov	r0, #7
   149c4:	strh	r0, [sl, #56]	; 0x38
   149c8:	ldr	r0, [ip, #48]	; 0x30
   149cc:	orr	r0, r0, #8192	; 0x2000
   149d0:	str	r0, [ip, #48]	; 0x30
   149d4:	mov	r0, r9
   149d8:	bl	13768 <__assert_fail@plt+0x2208>
   149dc:	mov	r9, #0
   149e0:	mov	r0, r9
   149e4:	sub	sp, fp, #28
   149e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   149f0:	mov	r0, sl
   149f4:	bl	14e04 <__assert_fail@plt+0x38a4>
   149f8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   149fc:	cmp	r0, #0
   14a00:	movwne	r0, #1
   14a04:	b	146e0 <__assert_fail@plt+0x3180>
   14a08:	push	{r4, r5, fp, lr}
   14a0c:	add	fp, sp, #8
   14a10:	mov	r4, r0
   14a14:	ldr	r0, [r0, #48]	; 0x30
   14a18:	mov	r5, #0
   14a1c:	tst	r0, #4
   14a20:	bne	14a54 <__assert_fail@plt+0x34f4>
   14a24:	tst	r0, #512	; 0x200
   14a28:	bne	14a44 <__assert_fail@plt+0x34e4>
   14a2c:	ldr	r0, [r4, #28]
   14a30:	bl	114d0 <fchdir@plt>
   14a34:	mov	r5, r0
   14a38:	cmp	r0, #0
   14a3c:	movwne	r5, #1
   14a40:	b	14a54 <__assert_fail@plt+0x34f4>
   14a44:	mov	r0, r4
   14a48:	mvn	r1, #99	; 0x63
   14a4c:	mov	r2, #1
   14a50:	bl	14ba4 <__assert_fail@plt+0x3644>
   14a54:	add	r0, r4, #60	; 0x3c
   14a58:	bl	138d4 <__assert_fail@plt+0x2374>
   14a5c:	mov	r0, r5
   14a60:	pop	{r4, r5, fp, pc}
   14a64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a68:	add	fp, sp, #24
   14a6c:	mov	r4, r1
   14a70:	mov	r8, r0
   14a74:	ldr	r1, [r1, #52]	; 0x34
   14a78:	str	r1, [r4, #40]	; 0x28
   14a7c:	ldr	r0, [r0, #24]
   14a80:	add	r6, r4, #168	; 0xa8
   14a84:	add	r2, r1, #1
   14a88:	mov	r1, r6
   14a8c:	bl	11284 <memmove@plt>
   14a90:	mov	r0, r6
   14a94:	mov	r1, #47	; 0x2f
   14a98:	bl	11494 <strrchr@plt>
   14a9c:	cmp	r0, #0
   14aa0:	beq	14adc <__assert_fail@plt+0x357c>
   14aa4:	cmp	r0, r6
   14aa8:	bne	14ab8 <__assert_fail@plt+0x3558>
   14aac:	ldrb	r1, [r0, #1]
   14ab0:	cmp	r1, #0
   14ab4:	beq	14adc <__assert_fail@plt+0x357c>
   14ab8:	add	r7, r0, #1
   14abc:	mov	r0, r7
   14ac0:	bl	113e0 <strlen@plt>
   14ac4:	mov	r5, r0
   14ac8:	add	r2, r0, #1
   14acc:	mov	r0, r6
   14ad0:	mov	r1, r7
   14ad4:	bl	11284 <memmove@plt>
   14ad8:	str	r5, [r4, #52]	; 0x34
   14adc:	ldr	r0, [r8, #24]
   14ae0:	str	r0, [r4, #24]
   14ae4:	str	r0, [r4, #28]
   14ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14aec:	push	{r4, r5, r6, r7, fp, lr}
   14af0:	add	fp, sp, #16
   14af4:	mov	r4, r1
   14af8:	mov	r6, r0
   14afc:	ldrh	r0, [r0, #48]	; 0x30
   14b00:	movw	r1, #258	; 0x102
   14b04:	tst	r0, r1
   14b08:	beq	14b7c <__assert_fail@plt+0x361c>
   14b0c:	mov	r0, #24
   14b10:	bl	190c4 <__assert_fail@plt+0x7b64>
   14b14:	mov	r5, #0
   14b18:	cmp	r0, #0
   14b1c:	beq	14b9c <__assert_fail@plt+0x363c>
   14b20:	mov	r7, r0
   14b24:	ldrd	r0, [r4, #64]	; 0x40
   14b28:	stm	r7, {r0, r1}
   14b2c:	ldrd	r0, [r4, #160]	; 0xa0
   14b30:	add	r2, r7, #8
   14b34:	stm	r2, {r0, r1, r4}
   14b38:	ldr	r0, [r6, #56]	; 0x38
   14b3c:	mov	r1, r7
   14b40:	bl	15dd8 <__assert_fail@plt+0x4878>
   14b44:	cmp	r0, r7
   14b48:	beq	14b70 <__assert_fail@plt+0x3610>
   14b4c:	mov	r6, r0
   14b50:	mov	r0, r7
   14b54:	bl	12fd4 <__assert_fail@plt+0x1a74>
   14b58:	cmp	r6, #0
   14b5c:	beq	14b9c <__assert_fail@plt+0x363c>
   14b60:	ldr	r0, [r6, #16]
   14b64:	mov	r1, #2
   14b68:	strh	r1, [r4, #56]	; 0x38
   14b6c:	str	r0, [r4]
   14b70:	mov	r5, #1
   14b74:	mov	r0, r5
   14b78:	pop	{r4, r5, r6, r7, fp, pc}
   14b7c:	ldr	r0, [r6, #56]	; 0x38
   14b80:	add	r1, r4, #64	; 0x40
   14b84:	bl	19664 <__assert_fail@plt+0x8104>
   14b88:	mov	r5, #1
   14b8c:	cmp	r0, #0
   14b90:	movne	r0, #2
   14b94:	strhne	r0, [r4, #56]	; 0x38
   14b98:	strne	r4, [r4]
   14b9c:	mov	r0, r5
   14ba0:	pop	{r4, r5, r6, r7, fp, pc}
   14ba4:	push	{r4, r5, fp, lr}
   14ba8:	add	fp, sp, #8
   14bac:	mov	r4, r1
   14bb0:	mov	r5, r0
   14bb4:	ldr	r1, [r0, #32]
   14bb8:	cmp	r1, r4
   14bbc:	bne	14bc8 <__assert_fail@plt+0x3668>
   14bc0:	cmn	r1, #100	; 0x64
   14bc4:	bne	14c08 <__assert_fail@plt+0x36a8>
   14bc8:	cmp	r2, #0
   14bcc:	beq	14be4 <__assert_fail@plt+0x3684>
   14bd0:	add	r0, r5, #60	; 0x3c
   14bd4:	bl	16014 <__assert_fail@plt+0x4ab4>
   14bd8:	cmp	r0, #0
   14bdc:	bge	14bfc <__assert_fail@plt+0x369c>
   14be0:	b	14c00 <__assert_fail@plt+0x36a0>
   14be4:	cmp	r1, #0
   14be8:	blt	14c00 <__assert_fail@plt+0x36a0>
   14bec:	ldr	r0, [r5, #48]	; 0x30
   14bf0:	ands	r0, r0, #4
   14bf4:	bne	14c00 <__assert_fail@plt+0x36a0>
   14bf8:	mov	r0, r1
   14bfc:	bl	11524 <close@plt>
   14c00:	str	r4, [r5, #32]
   14c04:	pop	{r4, r5, fp, pc}
   14c08:	bl	11518 <abort@plt>
   14c0c:	cmp	r2, #5
   14c10:	strhcc	r2, [r1, #60]	; 0x3c
   14c14:	movcc	r0, #0
   14c18:	bxcc	lr
   14c1c:	push	{fp, lr}
   14c20:	mov	fp, sp
   14c24:	bl	11410 <__errno_location@plt>
   14c28:	mov	r1, #22
   14c2c:	str	r1, [r0]
   14c30:	mov	r0, #1
   14c34:	pop	{fp, pc}
   14c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c3c:	add	fp, sp, #28
   14c40:	sub	sp, sp, #4
   14c44:	mov	r5, r0
   14c48:	orr	r0, r1, #4096	; 0x1000
   14c4c:	cmp	r0, #4096	; 0x1000
   14c50:	bne	14c90 <__assert_fail@plt+0x3730>
   14c54:	mov	r7, r1
   14c58:	ldr	r6, [r5]
   14c5c:	bl	11410 <__errno_location@plt>
   14c60:	mov	sl, r0
   14c64:	mov	r4, #0
   14c68:	str	r4, [r0]
   14c6c:	ldrb	r0, [r5, #49]	; 0x31
   14c70:	tst	r0, #32
   14c74:	bne	14ca0 <__assert_fail@plt+0x3740>
   14c78:	ldrh	r0, [r6, #56]	; 0x38
   14c7c:	cmp	r0, #1
   14c80:	beq	14cac <__assert_fail@plt+0x374c>
   14c84:	cmp	r0, #9
   14c88:	ldreq	r4, [r6, #8]
   14c8c:	b	14ca0 <__assert_fail@plt+0x3740>
   14c90:	bl	11410 <__errno_location@plt>
   14c94:	mov	r1, #22
   14c98:	str	r1, [r0]
   14c9c:	mov	r4, #0
   14ca0:	mov	r0, r4
   14ca4:	sub	sp, fp, #28
   14ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cac:	ldr	r0, [r5, #4]
   14cb0:	cmp	r0, #0
   14cb4:	blne	13768 <__assert_fail@plt+0x2208>
   14cb8:	mov	r9, #1
   14cbc:	cmp	r7, #4096	; 0x1000
   14cc0:	ldreq	r0, [r5, #48]	; 0x30
   14cc4:	orreq	r0, r0, #4096	; 0x1000
   14cc8:	streq	r0, [r5, #48]	; 0x30
   14ccc:	moveq	r9, #2
   14cd0:	ldr	r0, [r6, #48]	; 0x30
   14cd4:	cmp	r0, #0
   14cd8:	bne	14d54 <__assert_fail@plt+0x37f4>
   14cdc:	ldr	r0, [r6, #24]
   14ce0:	ldrb	r0, [r0]
   14ce4:	cmp	r0, #47	; 0x2f
   14ce8:	beq	14d54 <__assert_fail@plt+0x37f4>
   14cec:	ldrb	r0, [r5, #48]	; 0x30
   14cf0:	tst	r0, #4
   14cf4:	bne	14d54 <__assert_fail@plt+0x37f4>
   14cf8:	movw	r1, #45205	; 0xb095
   14cfc:	movt	r1, #1
   14d00:	mov	r0, r5
   14d04:	bl	13738 <__assert_fail@plt+0x21d8>
   14d08:	cmn	r0, #1
   14d0c:	ble	14d6c <__assert_fail@plt+0x380c>
   14d10:	mov	r8, r0
   14d14:	mov	r0, r5
   14d18:	mov	r1, r9
   14d1c:	bl	1419c <__assert_fail@plt+0x2c3c>
   14d20:	str	r0, [r5, #4]
   14d24:	ldrb	r0, [r5, #49]	; 0x31
   14d28:	tst	r0, #2
   14d2c:	bne	14d78 <__assert_fail@plt+0x3818>
   14d30:	mov	r0, r8
   14d34:	bl	114d0 <fchdir@plt>
   14d38:	cmp	r0, #0
   14d3c:	beq	14d8c <__assert_fail@plt+0x382c>
   14d40:	ldr	r5, [sl]
   14d44:	mov	r0, r8
   14d48:	bl	11524 <close@plt>
   14d4c:	str	r5, [sl]
   14d50:	b	14ca0 <__assert_fail@plt+0x3740>
   14d54:	mov	r0, r5
   14d58:	mov	r1, r9
   14d5c:	bl	1419c <__assert_fail@plt+0x2c3c>
   14d60:	mov	r4, r0
   14d64:	str	r0, [r5, #4]
   14d68:	b	14ca0 <__assert_fail@plt+0x3740>
   14d6c:	mov	r4, #0
   14d70:	str	r4, [r5, #4]
   14d74:	b	14ca0 <__assert_fail@plt+0x3740>
   14d78:	mov	r0, r5
   14d7c:	mov	r1, r8
   14d80:	mov	r2, #1
   14d84:	bl	14ba4 <__assert_fail@plt+0x3644>
   14d88:	b	14d94 <__assert_fail@plt+0x3834>
   14d8c:	mov	r0, r8
   14d90:	bl	11524 <close@plt>
   14d94:	ldr	r4, [r5, #4]
   14d98:	b	14ca0 <__assert_fail@plt+0x3740>
   14d9c:	push	{fp, lr}
   14da0:	mov	fp, sp
   14da4:	mov	r2, r1
   14da8:	ldrd	r0, [r0, #8]
   14dac:	mov	r3, #0
   14db0:	bl	19d78 <__assert_fail@plt+0x8818>
   14db4:	mov	r0, r2
   14db8:	pop	{fp, pc}
   14dbc:	push	{r4, r5, fp, lr}
   14dc0:	add	fp, sp, #8
   14dc4:	ldrd	r2, [r1, #8]
   14dc8:	ldrd	r4, [r0, #8]
   14dcc:	eor	r3, r5, r3
   14dd0:	eor	r2, r4, r2
   14dd4:	orrs	r2, r2, r3
   14dd8:	mov	r2, #0
   14ddc:	bne	14dfc <__assert_fail@plt+0x389c>
   14de0:	ldrd	r2, [r1]
   14de4:	ldrd	r0, [r0]
   14de8:	eor	r1, r1, r3
   14dec:	eor	r0, r0, r2
   14df0:	orr	r0, r0, r1
   14df4:	clz	r0, r0
   14df8:	lsr	r2, r0, #5
   14dfc:	mov	r0, r2
   14e00:	pop	{r4, r5, fp, pc}
   14e04:	push	{fp, lr}
   14e08:	mov	fp, sp
   14e0c:	bl	14f90 <__assert_fail@plt+0x3a30>
   14e10:	mov	r1, r0
   14e14:	mov	r0, #0
   14e18:	movw	r2, #26984	; 0x6968
   14e1c:	cmp	r1, r2
   14e20:	ble	14e50 <__assert_fail@plt+0x38f0>
   14e24:	movw	r2, #26985	; 0x6969
   14e28:	cmp	r1, r2
   14e2c:	movwne	r2, #40864	; 0x9fa0
   14e30:	cmpne	r1, r2
   14e34:	beq	14e68 <__assert_fail@plt+0x3908>
   14e38:	movw	r2, #16719	; 0x414f
   14e3c:	movt	r2, #21318	; 0x5346
   14e40:	cmp	r1, r2
   14e44:	popeq	{fp, pc}
   14e48:	mov	r0, #1
   14e4c:	pop	{fp, pc}
   14e50:	movw	r2, #19778	; 0x4d42
   14e54:	movt	r2, #65363	; 0xff53
   14e58:	cmp	r1, r2
   14e5c:	beq	14e68 <__assert_fail@plt+0x3908>
   14e60:	cmp	r1, #0
   14e64:	movne	r0, #1
   14e68:	pop	{fp, pc}
   14e6c:	sub	r2, r1, #1
   14e70:	mov	r1, #0
   14e74:	cmp	r2, #11
   14e78:	movwls	r1, #45216	; 0xb0a0
   14e7c:	movtls	r1, #1
   14e80:	ldrls	r1, [r1, r2, lsl #2]
   14e84:	str	r1, [r0, #16]
   14e88:	bx	lr
   14e8c:	push	{fp, lr}
   14e90:	mov	fp, sp
   14e94:	bl	14f90 <__assert_fail@plt+0x3a30>
   14e98:	mov	r1, r0
   14e9c:	mov	r0, #0
   14ea0:	movw	r2, #19778	; 0x4d42
   14ea4:	movt	r2, #65363	; 0xff53
   14ea8:	cmp	r1, r2
   14eac:	movwne	r2, #26985	; 0x6969
   14eb0:	cmpne	r1, r2
   14eb4:	bne	14ebc <__assert_fail@plt+0x395c>
   14eb8:	pop	{fp, pc}
   14ebc:	movw	r2, #6548	; 0x1994
   14ec0:	movt	r2, #258	; 0x102
   14ec4:	cmp	r1, r2
   14ec8:	movne	r0, #1
   14ecc:	pop	{fp, pc}
   14ed0:	ldr	r2, [r0, #4]
   14ed4:	ldr	ip, [r0, #24]
   14ed8:	cmp	r2, #0
   14edc:	beq	14f0c <__assert_fail@plt+0x39ac>
   14ee0:	ldr	r3, [r2, #24]
   14ee4:	add	r0, r2, #168	; 0xa8
   14ee8:	cmp	r3, r0
   14eec:	ldrne	r0, [r2, #28]
   14ef0:	subne	r0, r3, r0
   14ef4:	addne	r0, ip, r0
   14ef8:	strne	r0, [r2, #24]
   14efc:	str	ip, [r2, #28]
   14f00:	ldr	r2, [r2, #8]
   14f04:	cmp	r2, #0
   14f08:	bne	14ee0 <__assert_fail@plt+0x3980>
   14f0c:	ldr	r2, [r1, #48]	; 0x30
   14f10:	cmp	r2, #0
   14f14:	bxlt	lr
   14f18:	ldr	r2, [r1, #24]
   14f1c:	add	r0, r1, #168	; 0xa8
   14f20:	cmp	r2, r0
   14f24:	ldrne	r0, [r1, #28]
   14f28:	subne	r0, r2, r0
   14f2c:	addne	r0, ip, r0
   14f30:	strne	r0, [r1, #24]
   14f34:	str	ip, [r1, #28]
   14f38:	ldr	r2, [r1, #8]
   14f3c:	cmp	r2, #0
   14f40:	ldreq	r2, [r1, #4]
   14f44:	ldr	r0, [r2, #48]	; 0x30
   14f48:	cmn	r0, #1
   14f4c:	mov	r1, r2
   14f50:	bgt	14f18 <__assert_fail@plt+0x39b8>
   14f54:	bx	lr
   14f58:	push	{r4, r5, fp, lr}
   14f5c:	add	fp, sp, #8
   14f60:	ldr	r0, [r0]
   14f64:	ldrd	r2, [r0, #160]	; 0xa0
   14f68:	ldr	r0, [r1]
   14f6c:	ldrd	r4, [r0, #160]	; 0xa0
   14f70:	mov	r0, #0
   14f74:	subs	r1, r4, r2
   14f78:	sbcs	r1, r5, r3
   14f7c:	movwcc	r0, #1
   14f80:	subs	r1, r2, r4
   14f84:	sbcs	r1, r3, r5
   14f88:	subcc	r0, r0, #1
   14f8c:	pop	{r4, r5, fp, pc}
   14f90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f94:	add	fp, sp, #24
   14f98:	sub	sp, sp, #96	; 0x60
   14f9c:	mov	r4, r0
   14fa0:	ldr	r7, [r0, #44]	; 0x2c
   14fa4:	ldrb	r0, [r7, #49]	; 0x31
   14fa8:	mov	r5, #0
   14fac:	tst	r0, #2
   14fb0:	beq	150ac <__assert_fail@plt+0x3b4c>
   14fb4:	mov	r9, r1
   14fb8:	ldr	r6, [r7, #52]	; 0x34
   14fbc:	cmp	r6, #0
   14fc0:	bne	15000 <__assert_fail@plt+0x3aa0>
   14fc4:	movw	r0, #12244	; 0x2fd4
   14fc8:	movt	r0, #1
   14fcc:	str	r0, [sp]
   14fd0:	mov	r8, #0
   14fd4:	movw	r2, #20664	; 0x50b8
   14fd8:	movt	r2, #1
   14fdc:	movw	r3, #20696	; 0x50d8
   14fe0:	movt	r3, #1
   14fe4:	mov	r0, #13
   14fe8:	mov	r1, #0
   14fec:	bl	15548 <__assert_fail@plt+0x3fe8>
   14ff0:	mov	r6, r0
   14ff4:	str	r0, [r7, #52]	; 0x34
   14ff8:	cmp	r0, #0
   14ffc:	beq	15038 <__assert_fail@plt+0x3ad8>
   15000:	ldrd	r0, [r4, #64]	; 0x40
   15004:	str	r1, [sp, #12]
   15008:	str	r0, [sp, #8]
   1500c:	add	r1, sp, #8
   15010:	mov	r0, r6
   15014:	bl	152c0 <__assert_fail@plt+0x3d60>
   15018:	cmp	r0, #0
   1501c:	beq	15028 <__assert_fail@plt+0x3ac8>
   15020:	ldr	r5, [r0, #8]
   15024:	b	150ac <__assert_fail@plt+0x3b4c>
   15028:	mov	r8, #1
   1502c:	cmp	r9, #0
   15030:	bge	15044 <__assert_fail@plt+0x3ae4>
   15034:	b	150ac <__assert_fail@plt+0x3b4c>
   15038:	mov	r6, #0
   1503c:	cmp	r9, #0
   15040:	blt	150ac <__assert_fail@plt+0x3b4c>
   15044:	add	r1, sp, #8
   15048:	mov	r0, r9
   1504c:	bl	11218 <fstatfs64@plt>
   15050:	cmp	r0, #0
   15054:	bne	150ac <__assert_fail@plt+0x3b4c>
   15058:	cmp	r8, #0
   1505c:	beq	150a8 <__assert_fail@plt+0x3b48>
   15060:	mov	r0, #16
   15064:	bl	190c4 <__assert_fail@plt+0x7b64>
   15068:	cmp	r0, #0
   1506c:	beq	150a8 <__assert_fail@plt+0x3b48>
   15070:	mov	r5, r0
   15074:	ldrd	r0, [r4, #64]	; 0x40
   15078:	ldr	r2, [sp, #8]
   1507c:	stm	r5, {r0, r1, r2}
   15080:	mov	r0, r6
   15084:	mov	r1, r5
   15088:	bl	15dd8 <__assert_fail@plt+0x4878>
   1508c:	cmp	r0, #0
   15090:	beq	150a0 <__assert_fail@plt+0x3b40>
   15094:	cmp	r0, r5
   15098:	beq	150a8 <__assert_fail@plt+0x3b48>
   1509c:	bl	11518 <abort@plt>
   150a0:	mov	r0, r5
   150a4:	bl	12fd4 <__assert_fail@plt+0x1a74>
   150a8:	ldr	r5, [sp, #8]
   150ac:	mov	r0, r5
   150b0:	sub	sp, fp, #24
   150b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   150b8:	push	{fp, lr}
   150bc:	mov	fp, sp
   150c0:	mov	r2, r1
   150c4:	ldrd	r0, [r0]
   150c8:	mov	r3, #0
   150cc:	bl	19d78 <__assert_fail@plt+0x8818>
   150d0:	mov	r0, r2
   150d4:	pop	{fp, pc}
   150d8:	ldrd	r2, [r1]
   150dc:	ldrd	r0, [r0]
   150e0:	eor	r1, r1, r3
   150e4:	eor	r0, r0, r2
   150e8:	orr	r0, r0, r1
   150ec:	clz	r0, r0
   150f0:	lsr	r0, r0, #5
   150f4:	bx	lr
   150f8:	ldr	r0, [r0, #8]
   150fc:	bx	lr
   15100:	ldr	r0, [r0, #12]
   15104:	bx	lr
   15108:	ldr	r0, [r0, #16]
   1510c:	bx	lr
   15110:	mov	r2, r0
   15114:	ldm	r0, {r1, r3}
   15118:	mov	r0, #0
   1511c:	cmp	r1, r3
   15120:	bxcs	lr
   15124:	ldr	ip, [r2, #4]
   15128:	mov	r0, #0
   1512c:	ldr	r2, [r1]
   15130:	cmp	r2, #0
   15134:	beq	15158 <__assert_fail@plt+0x3bf8>
   15138:	mov	r3, #0
   1513c:	mov	r2, r1
   15140:	add	r3, r3, #1
   15144:	ldr	r2, [r2, #4]
   15148:	cmp	r2, #0
   1514c:	bne	15140 <__assert_fail@plt+0x3be0>
   15150:	cmp	r3, r0
   15154:	movhi	r0, r3
   15158:	add	r1, r1, #8
   1515c:	cmp	r1, ip
   15160:	bcc	1512c <__assert_fail@plt+0x3bcc>
   15164:	bx	lr
   15168:	push	{fp, lr}
   1516c:	mov	fp, sp
   15170:	ldr	r3, [r0]
   15174:	ldr	r1, [r0, #4]
   15178:	mov	lr, #0
   1517c:	cmp	r3, r1
   15180:	mov	r1, #0
   15184:	bcs	151c4 <__assert_fail@plt+0x3c64>
   15188:	ldr	ip, [r0, #4]
   1518c:	mov	r1, #0
   15190:	mov	lr, #0
   15194:	ldr	r2, [r3]
   15198:	cmp	r2, #0
   1519c:	beq	151b8 <__assert_fail@plt+0x3c58>
   151a0:	mov	r2, r3
   151a4:	add	r1, r1, #1
   151a8:	ldr	r2, [r2, #4]
   151ac:	cmp	r2, #0
   151b0:	bne	151a4 <__assert_fail@plt+0x3c44>
   151b4:	add	lr, lr, #1
   151b8:	add	r3, r3, #8
   151bc:	cmp	r3, ip
   151c0:	bcc	15194 <__assert_fail@plt+0x3c34>
   151c4:	ldr	r2, [r0, #12]
   151c8:	cmp	lr, r2
   151cc:	bne	151e4 <__assert_fail@plt+0x3c84>
   151d0:	ldr	r2, [r0, #16]
   151d4:	mov	r0, #1
   151d8:	cmp	r1, r2
   151dc:	movne	r0, #0
   151e0:	pop	{fp, pc}
   151e4:	mov	r0, #0
   151e8:	pop	{fp, pc}
   151ec:	nop	{0}
   151f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   151f4:	add	fp, sp, #24
   151f8:	sub	sp, sp, #8
   151fc:	mov	r4, r1
   15200:	mov	r5, r0
   15204:	bl	15108 <__assert_fail@plt+0x3ba8>
   15208:	mov	r8, r0
   1520c:	mov	r0, r5
   15210:	bl	150f8 <__assert_fail@plt+0x3b98>
   15214:	mov	r7, r0
   15218:	mov	r0, r5
   1521c:	bl	15100 <__assert_fail@plt+0x3ba0>
   15220:	mov	r6, r0
   15224:	mov	r0, r5
   15228:	bl	15110 <__assert_fail@plt+0x3bb0>
   1522c:	mov	r5, r0
   15230:	movw	r2, #45264	; 0xb0d0
   15234:	movt	r2, #1
   15238:	mov	r0, r4
   1523c:	mov	r1, #1
   15240:	mov	r3, r8
   15244:	bl	1144c <__fprintf_chk@plt>
   15248:	movw	r2, #45288	; 0xb0e8
   1524c:	movt	r2, #1
   15250:	mov	r0, r4
   15254:	mov	r1, #1
   15258:	mov	r3, r7
   1525c:	bl	1144c <__fprintf_chk@plt>
   15260:	vldr	d16, [pc, #80]	; 152b8 <__assert_fail@plt+0x3d58>
   15264:	vmov	s0, r6
   15268:	vmov	s2, r7
   1526c:	vcvt.f64.u32	d17, s0
   15270:	vcvt.f64.u32	d18, s2
   15274:	vmul.f64	d16, d17, d16
   15278:	vdiv.f64	d16, d16, d18
   1527c:	vstr	d16, [sp]
   15280:	movw	r2, #45312	; 0xb100
   15284:	movt	r2, #1
   15288:	mov	r0, r4
   1528c:	mov	r1, #1
   15290:	mov	r3, r6
   15294:	bl	1144c <__fprintf_chk@plt>
   15298:	movw	r2, #45345	; 0xb121
   1529c:	movt	r2, #1
   152a0:	mov	r0, r4
   152a4:	mov	r1, #1
   152a8:	mov	r3, r5
   152ac:	sub	sp, fp, #24
   152b0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   152b4:	b	1144c <__fprintf_chk@plt>
   152b8:	andeq	r0, r0, r0
   152bc:	subsmi	r0, r9, r0
   152c0:	push	{r4, r5, r6, r7, fp, lr}
   152c4:	add	fp, sp, #16
   152c8:	mov	r5, r1
   152cc:	mov	r6, r0
   152d0:	bl	15324 <__assert_fail@plt+0x3dc4>
   152d4:	mov	r7, r0
   152d8:	ldr	r0, [r0]
   152dc:	mov	r4, #0
   152e0:	cmp	r0, #0
   152e4:	bne	152f0 <__assert_fail@plt+0x3d90>
   152e8:	b	1531c <__assert_fail@plt+0x3dbc>
   152ec:	ldr	r7, [r7, #4]
   152f0:	cmp	r7, #0
   152f4:	beq	1531c <__assert_fail@plt+0x3dbc>
   152f8:	ldr	r1, [r7]
   152fc:	cmp	r1, r5
   15300:	beq	15318 <__assert_fail@plt+0x3db8>
   15304:	ldr	r2, [r6, #28]
   15308:	mov	r0, r5
   1530c:	blx	r2
   15310:	cmp	r0, #0
   15314:	beq	152ec <__assert_fail@plt+0x3d8c>
   15318:	ldr	r4, [r7]
   1531c:	mov	r0, r4
   15320:	pop	{r4, r5, r6, r7, fp, pc}
   15324:	push	{r4, sl, fp, lr}
   15328:	add	fp, sp, #8
   1532c:	mov	r2, r1
   15330:	mov	r4, r0
   15334:	ldr	r1, [r0, #8]
   15338:	ldr	r3, [r0, #24]
   1533c:	mov	r0, r2
   15340:	blx	r3
   15344:	ldr	r1, [r4, #8]
   15348:	cmp	r0, r1
   1534c:	ldrcc	r1, [r4]
   15350:	addcc	r0, r1, r0, lsl #3
   15354:	popcc	{r4, sl, fp, pc}
   15358:	bl	11518 <abort@plt>
   1535c:	ldr	r1, [r0, #16]
   15360:	cmp	r1, #0
   15364:	moveq	r1, #0
   15368:	moveq	r0, r1
   1536c:	bxeq	lr
   15370:	ldr	r2, [r0]
   15374:	b	15388 <__assert_fail@plt+0x3e28>
   15378:	ldr	r1, [r2], #8
   1537c:	cmp	r1, #0
   15380:	movne	r0, r1
   15384:	bxne	lr
   15388:	ldr	r1, [r0, #4]
   1538c:	cmp	r2, r1
   15390:	bcc	15378 <__assert_fail@plt+0x3e18>
   15394:	push	{fp, lr}
   15398:	mov	fp, sp
   1539c:	bl	11518 <abort@plt>
   153a0:	push	{r4, r5, fp, lr}
   153a4:	add	fp, sp, #8
   153a8:	mov	r5, r1
   153ac:	mov	r4, r0
   153b0:	bl	15324 <__assert_fail@plt+0x3dc4>
   153b4:	mov	r1, r0
   153b8:	ldr	r2, [r1]
   153bc:	cmp	r2, r5
   153c0:	bne	153d4 <__assert_fail@plt+0x3e74>
   153c4:	ldr	r2, [r1, #4]
   153c8:	cmp	r2, #0
   153cc:	ldrne	r0, [r2]
   153d0:	popne	{r4, r5, fp, pc}
   153d4:	ldr	r1, [r1, #4]
   153d8:	cmp	r1, #0
   153dc:	bne	153b8 <__assert_fail@plt+0x3e58>
   153e0:	add	r1, r0, #8
   153e4:	ldr	r2, [r4, #4]
   153e8:	cmp	r1, r2
   153ec:	movcs	r0, #0
   153f0:	popcs	{r4, r5, fp, pc}
   153f4:	ldr	r0, [r1], #8
   153f8:	cmp	r0, #0
   153fc:	popne	{r4, r5, fp, pc}
   15400:	b	153e8 <__assert_fail@plt+0x3e88>
   15404:	push	{r4, sl, fp, lr}
   15408:	add	fp, sp, #8
   1540c:	mov	ip, r0
   15410:	ldr	lr, [r0]
   15414:	ldr	r3, [r0, #4]
   15418:	mov	r0, #0
   1541c:	cmp	lr, r3
   15420:	bcs	1546c <__assert_fail@plt+0x3f0c>
   15424:	mov	r0, #0
   15428:	ldr	r3, [lr]
   1542c:	cmp	r3, #0
   15430:	cmpne	lr, #0
   15434:	beq	1545c <__assert_fail@plt+0x3efc>
   15438:	mov	r3, lr
   1543c:	cmp	r0, r2
   15440:	popcs	{r4, sl, fp, pc}
   15444:	ldr	r4, [r3]
   15448:	str	r4, [r1, r0, lsl #2]
   1544c:	add	r0, r0, #1
   15450:	ldr	r3, [r3, #4]
   15454:	cmp	r3, #0
   15458:	bne	1543c <__assert_fail@plt+0x3edc>
   1545c:	ldr	r3, [ip, #4]
   15460:	add	lr, lr, #8
   15464:	cmp	lr, r3
   15468:	bcc	15428 <__assert_fail@plt+0x3ec8>
   1546c:	pop	{r4, sl, fp, pc}
   15470:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15474:	add	fp, sp, #24
   15478:	mov	r8, r0
   1547c:	ldr	r9, [r0]
   15480:	ldr	r0, [r0, #4]
   15484:	mov	r6, #0
   15488:	cmp	r9, r0
   1548c:	bcs	154ec <__assert_fail@plt+0x3f8c>
   15490:	mov	r4, r2
   15494:	mov	r5, r1
   15498:	mov	r6, #0
   1549c:	b	154cc <__assert_fail@plt+0x3f6c>
   154a0:	mov	r7, r9
   154a4:	ldr	r0, [r7]
   154a8:	mov	r1, r4
   154ac:	blx	r5
   154b0:	cmp	r0, #0
   154b4:	beq	154ec <__assert_fail@plt+0x3f8c>
   154b8:	add	r6, r6, #1
   154bc:	ldr	r7, [r7, #4]
   154c0:	cmp	r7, #0
   154c4:	bne	154a4 <__assert_fail@plt+0x3f44>
   154c8:	b	154dc <__assert_fail@plt+0x3f7c>
   154cc:	ldr	r0, [r9]
   154d0:	cmp	r0, #0
   154d4:	cmpne	r9, #0
   154d8:	bne	154a0 <__assert_fail@plt+0x3f40>
   154dc:	ldr	r0, [r8, #4]
   154e0:	add	r9, r9, #8
   154e4:	cmp	r9, r0
   154e8:	bcc	154cc <__assert_fail@plt+0x3f6c>
   154ec:	mov	r0, r6
   154f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154f4:	ldrb	r2, [r0]
   154f8:	cmp	r2, #0
   154fc:	moveq	r0, #0
   15500:	bxeq	lr
   15504:	add	r3, r0, #1
   15508:	mov	r0, #0
   1550c:	rsb	r0, r0, r0, lsl #5
   15510:	uxtab	r0, r0, r2
   15514:	udiv	r2, r0, r1
   15518:	mls	r0, r2, r1, r0
   1551c:	ldrb	r2, [r3], #1
   15520:	cmp	r2, #0
   15524:	bne	1550c <__assert_fail@plt+0x3fac>
   15528:	bx	lr
   1552c:	movw	r1, #45376	; 0xb140
   15530:	movt	r1, #1
   15534:	vld1.32	{d16-d17}, [r1]!
   15538:	vst1.32	{d16-d17}, [r0]!
   1553c:	ldr	r1, [r1]
   15540:	str	r1, [r0]
   15544:	bx	lr
   15548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1554c:	add	fp, sp, #28
   15550:	sub	sp, sp, #4
   15554:	mov	r7, r1
   15558:	mov	r8, r0
   1555c:	movw	sl, #22088	; 0x5648
   15560:	movt	sl, #1
   15564:	cmp	r3, #0
   15568:	movne	sl, r3
   1556c:	movw	r5, #22056	; 0x5628
   15570:	movt	r5, #1
   15574:	cmp	r2, #0
   15578:	movne	r5, r2
   1557c:	mov	r0, #40	; 0x28
   15580:	bl	190c4 <__assert_fail@plt+0x7b64>
   15584:	mov	r9, #0
   15588:	cmp	r0, #0
   1558c:	beq	1561c <__assert_fail@plt+0x40bc>
   15590:	mov	r4, r0
   15594:	movw	r6, #45376	; 0xb140
   15598:	movt	r6, #1
   1559c:	cmp	r7, #0
   155a0:	movne	r6, r7
   155a4:	str	r6, [r0, #20]
   155a8:	bl	15658 <__assert_fail@plt+0x40f8>
   155ac:	cmp	r0, #0
   155b0:	beq	15614 <__assert_fail@plt+0x40b4>
   155b4:	mov	r0, r8
   155b8:	mov	r1, r6
   155bc:	bl	15704 <__assert_fail@plt+0x41a4>
   155c0:	str	r0, [r4, #8]
   155c4:	cmp	r0, #0
   155c8:	beq	15614 <__assert_fail@plt+0x40b4>
   155cc:	mov	r1, #8
   155d0:	bl	19070 <__assert_fail@plt+0x7b10>
   155d4:	str	r0, [r4]
   155d8:	cmp	r0, #0
   155dc:	beq	15614 <__assert_fail@plt+0x40b4>
   155e0:	ldr	r1, [fp, #8]
   155e4:	mov	r2, #0
   155e8:	str	r2, [r4, #12]
   155ec:	str	r2, [r4, #16]
   155f0:	str	r5, [r4, #24]
   155f4:	str	sl, [r4, #28]
   155f8:	str	r1, [r4, #32]
   155fc:	str	r2, [r4, #36]	; 0x24
   15600:	ldr	r1, [r4, #8]
   15604:	add	r0, r0, r1, lsl #3
   15608:	str	r0, [r4, #4]
   1560c:	mov	r9, r4
   15610:	b	1561c <__assert_fail@plt+0x40bc>
   15614:	mov	r0, r4
   15618:	bl	12fd4 <__assert_fail@plt+0x1a74>
   1561c:	mov	r0, r9
   15620:	sub	sp, fp, #28
   15624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15628:	push	{r4, sl, fp, lr}
   1562c:	add	fp, sp, #8
   15630:	mov	r4, r1
   15634:	mov	r1, #3
   15638:	bl	19224 <__assert_fail@plt+0x7cc4>
   1563c:	udiv	r1, r0, r4
   15640:	mls	r0, r1, r4, r0
   15644:	pop	{r4, sl, fp, pc}
   15648:	sub	r0, r0, r1
   1564c:	clz	r0, r0
   15650:	lsr	r0, r0, #5
   15654:	bx	lr
   15658:	mov	r1, r0
   1565c:	ldr	r3, [r0, #20]
   15660:	mov	r0, #1
   15664:	movw	r2, #45376	; 0xb140
   15668:	movt	r2, #1
   1566c:	cmp	r3, r2
   15670:	beq	156f4 <__assert_fail@plt+0x4194>
   15674:	vldr	s2, [pc, #124]	; 156f8 <__assert_fail@plt+0x4198>
   15678:	vldr	s0, [r3, #8]
   1567c:	vcmpe.f32	s0, s2
   15680:	vmrs	APSR_nzcv, fpscr
   15684:	ble	156ec <__assert_fail@plt+0x418c>
   15688:	vldr	s4, [pc, #108]	; 156fc <__assert_fail@plt+0x419c>
   1568c:	vcmpe.f32	s0, s4
   15690:	vmrs	APSR_nzcv, fpscr
   15694:	bpl	156ec <__assert_fail@plt+0x418c>
   15698:	vldr	s4, [pc, #96]	; 15700 <__assert_fail@plt+0x41a0>
   1569c:	vldr	s6, [r3, #12]
   156a0:	vcmpe.f32	s6, s4
   156a4:	vmrs	APSR_nzcv, fpscr
   156a8:	ble	156ec <__assert_fail@plt+0x418c>
   156ac:	vldr	s4, [r3]
   156b0:	vcmpe.f32	s4, #0.0
   156b4:	vmrs	APSR_nzcv, fpscr
   156b8:	blt	156ec <__assert_fail@plt+0x418c>
   156bc:	vadd.f32	s2, s4, s2
   156c0:	vcmpe.f32	s2, s0
   156c4:	vmrs	APSR_nzcv, fpscr
   156c8:	bpl	156ec <__assert_fail@plt+0x418c>
   156cc:	vldr	s0, [r3, #4]
   156d0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   156d4:	vcmpe.f32	s0, s4
   156d8:	vmrs	APSR_nzcv, fpscr
   156dc:	bhi	156ec <__assert_fail@plt+0x418c>
   156e0:	vcmpe.f32	s2, s0
   156e4:	vmrs	APSR_nzcv, fpscr
   156e8:	bxmi	lr
   156ec:	str	r2, [r1, #20]
   156f0:	mov	r0, #0
   156f4:	bx	lr
   156f8:	stclcc	12, cr12, [ip, #820]	; 0x334
   156fc:	svccc	0x00666666
   15700:	svccc	0x008ccccd
   15704:	ldrb	r2, [r1, #16]
   15708:	cmp	r2, #0
   1570c:	bne	1573c <__assert_fail@plt+0x41dc>
   15710:	vldr	s0, [r1, #8]
   15714:	vmov	s2, r0
   15718:	vcvt.f32.u32	s2, s2
   1571c:	vdiv.f32	s2, s2, s0
   15720:	vcvt.u32.f32	s0, s2
   15724:	vldr	s4, [pc, #44]	; 15758 <__assert_fail@plt+0x41f8>
   15728:	mov	r0, #0
   1572c:	vcmpe.f32	s2, s4
   15730:	vmrs	APSR_nzcv, fpscr
   15734:	bxge	lr
   15738:	vmov	r0, s0
   1573c:	push	{fp, lr}
   15740:	mov	fp, sp
   15744:	bl	15f28 <__assert_fail@plt+0x49c8>
   15748:	cmn	r0, #-536870911	; 0xe0000001
   1574c:	movwhi	r0, #0
   15750:	pop	{fp, lr}
   15754:	bx	lr
   15758:	svcmi	0x00800000
   1575c:	push	{r4, r5, r6, r7, fp, lr}
   15760:	add	fp, sp, #16
   15764:	mov	r4, r0
   15768:	ldr	r5, [r0]
   1576c:	ldr	r0, [r0, #4]
   15770:	cmp	r5, r0
   15774:	bcs	1580c <__assert_fail@plt+0x42ac>
   15778:	mov	r6, #0
   1577c:	ldr	r0, [r5]
   15780:	cmp	r0, #0
   15784:	beq	157fc <__assert_fail@plt+0x429c>
   15788:	ldr	r7, [r5, #4]
   1578c:	ldr	r1, [r4, #32]
   15790:	cmp	r1, #0
   15794:	mov	r0, r1
   15798:	movwne	r0, #1
   1579c:	cmp	r7, #0
   157a0:	beq	157e4 <__assert_fail@plt+0x4284>
   157a4:	tst	r0, #1
   157a8:	beq	157b4 <__assert_fail@plt+0x4254>
   157ac:	ldr	r0, [r7]
   157b0:	blx	r1
   157b4:	str	r6, [r7]
   157b8:	ldr	r2, [r7, #4]
   157bc:	ldr	r0, [r4, #36]	; 0x24
   157c0:	str	r0, [r7, #4]
   157c4:	str	r7, [r4, #36]	; 0x24
   157c8:	ldr	r1, [r4, #32]
   157cc:	cmp	r1, #0
   157d0:	mov	r0, r1
   157d4:	movwne	r0, #1
   157d8:	cmp	r2, #0
   157dc:	mov	r7, r2
   157e0:	bne	157a4 <__assert_fail@plt+0x4244>
   157e4:	cmp	r0, #0
   157e8:	beq	157f4 <__assert_fail@plt+0x4294>
   157ec:	ldr	r0, [r5]
   157f0:	blx	r1
   157f4:	str	r6, [r5]
   157f8:	str	r6, [r5, #4]
   157fc:	ldr	r0, [r4, #4]
   15800:	add	r5, r5, #8
   15804:	cmp	r5, r0
   15808:	bcc	1577c <__assert_fail@plt+0x421c>
   1580c:	mov	r0, #0
   15810:	str	r0, [r4, #12]
   15814:	str	r0, [r4, #16]
   15818:	pop	{r4, r5, r6, r7, fp, pc}
   1581c:	push	{r4, r5, r6, sl, fp, lr}
   15820:	add	fp, sp, #16
   15824:	mov	r4, r0
   15828:	ldr	r0, [r0, #32]
   1582c:	cmp	r0, #0
   15830:	ldrne	r0, [r4, #16]
   15834:	cmpne	r0, #0
   15838:	beq	15890 <__assert_fail@plt+0x4330>
   1583c:	ldr	r5, [r4]
   15840:	ldr	r0, [r4, #4]
   15844:	cmp	r5, r0
   15848:	bcc	15860 <__assert_fail@plt+0x4300>
   1584c:	b	15890 <__assert_fail@plt+0x4330>
   15850:	ldr	r0, [r4, #4]
   15854:	add	r5, r5, #8
   15858:	cmp	r5, r0
   1585c:	bcs	15890 <__assert_fail@plt+0x4330>
   15860:	ldr	r0, [r5]
   15864:	cmp	r0, #0
   15868:	cmpne	r5, #0
   1586c:	beq	15850 <__assert_fail@plt+0x42f0>
   15870:	mov	r6, r5
   15874:	ldr	r0, [r6]
   15878:	ldr	r1, [r4, #32]
   1587c:	blx	r1
   15880:	ldr	r6, [r6, #4]
   15884:	cmp	r6, #0
   15888:	bne	15874 <__assert_fail@plt+0x4314>
   1588c:	b	15850 <__assert_fail@plt+0x42f0>
   15890:	ldr	r5, [r4]
   15894:	ldr	r0, [r4, #4]
   15898:	cmp	r5, r0
   1589c:	bcc	158b4 <__assert_fail@plt+0x4354>
   158a0:	b	158d8 <__assert_fail@plt+0x4378>
   158a4:	ldr	r0, [r4, #4]
   158a8:	add	r5, r5, #8
   158ac:	cmp	r5, r0
   158b0:	bcs	158d8 <__assert_fail@plt+0x4378>
   158b4:	ldr	r0, [r5, #4]
   158b8:	cmp	r0, #0
   158bc:	beq	158a4 <__assert_fail@plt+0x4344>
   158c0:	ldr	r6, [r0, #4]
   158c4:	bl	12fd4 <__assert_fail@plt+0x1a74>
   158c8:	cmp	r6, #0
   158cc:	mov	r0, r6
   158d0:	bne	158c0 <__assert_fail@plt+0x4360>
   158d4:	b	158a4 <__assert_fail@plt+0x4344>
   158d8:	ldr	r0, [r4, #36]	; 0x24
   158dc:	cmp	r0, #0
   158e0:	beq	158f8 <__assert_fail@plt+0x4398>
   158e4:	ldr	r5, [r0, #4]
   158e8:	bl	12fd4 <__assert_fail@plt+0x1a74>
   158ec:	cmp	r5, #0
   158f0:	mov	r0, r5
   158f4:	bne	158e4 <__assert_fail@plt+0x4384>
   158f8:	ldr	r0, [r4]
   158fc:	bl	12fd4 <__assert_fail@plt+0x1a74>
   15900:	mov	r0, r4
   15904:	pop	{r4, r5, r6, sl, fp, lr}
   15908:	b	12fd4 <__assert_fail@plt+0x1a74>
   1590c:	push	{r4, r5, r6, sl, fp, lr}
   15910:	add	fp, sp, #16
   15914:	sub	sp, sp, #40	; 0x28
   15918:	mov	r2, r1
   1591c:	mov	r4, r0
   15920:	ldr	r1, [r0, #20]
   15924:	mov	r0, r2
   15928:	bl	15704 <__assert_fail@plt+0x41a4>
   1592c:	mov	r5, #0
   15930:	cmp	r0, #0
   15934:	beq	15a10 <__assert_fail@plt+0x44b0>
   15938:	mov	r6, r0
   1593c:	ldr	r0, [r4, #8]
   15940:	cmp	r6, r0
   15944:	bne	15950 <__assert_fail@plt+0x43f0>
   15948:	mov	r5, #1
   1594c:	b	15a10 <__assert_fail@plt+0x44b0>
   15950:	mov	r0, r6
   15954:	mov	r1, #8
   15958:	bl	19070 <__assert_fail@plt+0x7b10>
   1595c:	str	r0, [sp]
   15960:	cmp	r0, #0
   15964:	beq	15a10 <__assert_fail@plt+0x44b0>
   15968:	str	r6, [sp, #8]
   1596c:	mov	r0, #0
   15970:	str	r0, [sp, #12]
   15974:	str	r0, [sp, #16]
   15978:	ldr	r0, [sp]
   1597c:	add	r0, r0, r6, lsl #3
   15980:	str	r0, [sp, #4]
   15984:	add	r6, r4, #20
   15988:	ldm	r6, {r0, r1, r2, r3, r6}
   1598c:	add	ip, sp, #20
   15990:	stm	ip, {r0, r1, r2, r3, r6}
   15994:	mov	r0, sp
   15998:	mov	r1, r4
   1599c:	mov	r2, #0
   159a0:	bl	15a20 <__assert_fail@plt+0x44c0>
   159a4:	cmp	r0, #0
   159a8:	beq	159cc <__assert_fail@plt+0x446c>
   159ac:	ldr	r0, [r4]
   159b0:	bl	12fd4 <__assert_fail@plt+0x1a74>
   159b4:	ldm	sp, {r0, r1, r2, r3}
   159b8:	stm	r4, {r0, r1, r2, r3}
   159bc:	ldr	r0, [sp, #36]	; 0x24
   159c0:	str	r0, [r4, #36]	; 0x24
   159c4:	mov	r5, #1
   159c8:	b	15a10 <__assert_fail@plt+0x44b0>
   159cc:	ldr	r0, [sp, #36]	; 0x24
   159d0:	str	r0, [r4, #36]	; 0x24
   159d4:	mov	r1, sp
   159d8:	mov	r0, r4
   159dc:	mov	r2, #1
   159e0:	bl	15a20 <__assert_fail@plt+0x44c0>
   159e4:	cmp	r0, #0
   159e8:	beq	15a1c <__assert_fail@plt+0x44bc>
   159ec:	mov	r1, sp
   159f0:	mov	r5, #0
   159f4:	mov	r0, r4
   159f8:	mov	r2, #0
   159fc:	bl	15a20 <__assert_fail@plt+0x44c0>
   15a00:	cmp	r0, #0
   15a04:	beq	15a1c <__assert_fail@plt+0x44bc>
   15a08:	ldr	r0, [sp]
   15a0c:	bl	12fd4 <__assert_fail@plt+0x1a74>
   15a10:	mov	r0, r5
   15a14:	sub	sp, fp, #16
   15a18:	pop	{r4, r5, r6, sl, fp, pc}
   15a1c:	bl	11518 <abort@plt>
   15a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a24:	add	fp, sp, #28
   15a28:	sub	sp, sp, #4
   15a2c:	mov	r7, r0
   15a30:	ldr	r6, [r1]
   15a34:	ldr	r0, [r1, #4]
   15a38:	cmp	r6, r0
   15a3c:	bcs	15b40 <__assert_fail@plt+0x45e0>
   15a40:	mov	r9, r2
   15a44:	mov	sl, r1
   15a48:	ldr	r0, [r6]
   15a4c:	cmp	r0, #0
   15a50:	beq	15b30 <__assert_fail@plt+0x45d0>
   15a54:	ldr	r4, [r6, #4]
   15a58:	cmp	r4, #0
   15a5c:	beq	15ab8 <__assert_fail@plt+0x4558>
   15a60:	ldr	r5, [r4]
   15a64:	mov	r0, r7
   15a68:	mov	r1, r5
   15a6c:	bl	15324 <__assert_fail@plt+0x3dc4>
   15a70:	ldr	r1, [r0]
   15a74:	ldr	r8, [r4, #4]
   15a78:	cmp	r1, #0
   15a7c:	beq	15a90 <__assert_fail@plt+0x4530>
   15a80:	ldr	r1, [r0, #4]
   15a84:	str	r1, [r4, #4]
   15a88:	str	r4, [r0, #4]
   15a8c:	b	15aac <__assert_fail@plt+0x454c>
   15a90:	str	r5, [r0]
   15a94:	ldr	r0, [r7, #12]
   15a98:	add	r0, r0, #1
   15a9c:	str	r0, [r7, #12]
   15aa0:	mov	r0, r7
   15aa4:	mov	r1, r4
   15aa8:	bl	15fc8 <__assert_fail@plt+0x4a68>
   15aac:	cmp	r8, #0
   15ab0:	mov	r4, r8
   15ab4:	bne	15a60 <__assert_fail@plt+0x4500>
   15ab8:	mov	r0, #0
   15abc:	str	r0, [r6, #4]
   15ac0:	cmp	r9, #0
   15ac4:	bne	15b30 <__assert_fail@plt+0x45d0>
   15ac8:	ldr	r4, [r6]
   15acc:	mov	r0, r7
   15ad0:	mov	r1, r4
   15ad4:	bl	15324 <__assert_fail@plt+0x3dc4>
   15ad8:	mov	r5, r0
   15adc:	ldr	r0, [r0]
   15ae0:	cmp	r0, #0
   15ae4:	beq	15b0c <__assert_fail@plt+0x45ac>
   15ae8:	mov	r0, r7
   15aec:	bl	15dac <__assert_fail@plt+0x484c>
   15af0:	cmp	r0, #0
   15af4:	beq	15b4c <__assert_fail@plt+0x45ec>
   15af8:	str	r4, [r0]
   15afc:	ldr	r1, [r5, #4]
   15b00:	str	r1, [r0, #4]
   15b04:	str	r0, [r5, #4]
   15b08:	b	15b1c <__assert_fail@plt+0x45bc>
   15b0c:	str	r4, [r5]
   15b10:	ldr	r0, [r7, #12]
   15b14:	add	r0, r0, #1
   15b18:	str	r0, [r7, #12]
   15b1c:	mov	r0, #0
   15b20:	str	r0, [r6]
   15b24:	ldr	r0, [sl, #12]
   15b28:	sub	r0, r0, #1
   15b2c:	str	r0, [sl, #12]
   15b30:	add	r6, r6, #8
   15b34:	ldr	r0, [sl, #4]
   15b38:	cmp	r6, r0
   15b3c:	bcc	15a48 <__assert_fail@plt+0x44e8>
   15b40:	mov	r0, #1
   15b44:	sub	sp, fp, #28
   15b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b4c:	mov	r0, #0
   15b50:	sub	sp, fp, #28
   15b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b58:	push	{r4, r5, r6, r7, fp, lr}
   15b5c:	add	fp, sp, #16
   15b60:	sub	sp, sp, #8
   15b64:	cmp	r1, #0
   15b68:	beq	15cc8 <__assert_fail@plt+0x4768>
   15b6c:	mov	r7, r2
   15b70:	mov	r5, r1
   15b74:	mov	r4, r0
   15b78:	add	r2, sp, #4
   15b7c:	mov	r6, #0
   15b80:	mov	r3, #0
   15b84:	bl	15cd0 <__assert_fail@plt+0x4770>
   15b88:	cmp	r0, #0
   15b8c:	beq	15b9c <__assert_fail@plt+0x463c>
   15b90:	cmp	r7, #0
   15b94:	strne	r0, [r7]
   15b98:	b	15cbc <__assert_fail@plt+0x475c>
   15b9c:	vldr	s0, [r4, #8]
   15ba0:	vldr	s2, [r4, #12]
   15ba4:	ldr	r0, [r4, #20]
   15ba8:	vldr	s4, [r0, #8]
   15bac:	vcvt.f32.u32	s0, s0
   15bb0:	vcvt.f32.u32	s2, s2
   15bb4:	vmul.f32	s0, s4, s0
   15bb8:	vcmpe.f32	s0, s2
   15bbc:	vmrs	APSR_nzcv, fpscr
   15bc0:	bpl	15c54 <__assert_fail@plt+0x46f4>
   15bc4:	mov	r0, r4
   15bc8:	bl	15658 <__assert_fail@plt+0x40f8>
   15bcc:	vldr	s0, [r4, #8]
   15bd0:	vldr	s4, [r4, #12]
   15bd4:	ldr	r0, [r4, #20]
   15bd8:	vcvt.f32.u32	s2, s0
   15bdc:	vldr	s0, [r0, #8]
   15be0:	vcvt.f32.u32	s4, s4
   15be4:	vmul.f32	s6, s0, s2
   15be8:	vcmpe.f32	s6, s4
   15bec:	vmrs	APSR_nzcv, fpscr
   15bf0:	bpl	15c54 <__assert_fail@plt+0x46f4>
   15bf4:	vldr	s4, [r0, #12]
   15bf8:	vmul.f32	s2, s4, s2
   15bfc:	ldrb	r0, [r0, #16]
   15c00:	vmul.f32	s0, s0, s2
   15c04:	mvn	r6, #0
   15c08:	vldr	s4, [pc, #188]	; 15ccc <__assert_fail@plt+0x476c>
   15c0c:	cmp	r0, #0
   15c10:	vseleq.f32	s0, s0, s2
   15c14:	vcmpe.f32	s0, s4
   15c18:	vmrs	APSR_nzcv, fpscr
   15c1c:	bge	15cbc <__assert_fail@plt+0x475c>
   15c20:	vcvt.u32.f32	s0, s0
   15c24:	vmov	r1, s0
   15c28:	mov	r0, r4
   15c2c:	bl	1590c <__assert_fail@plt+0x43ac>
   15c30:	cmp	r0, #0
   15c34:	beq	15cbc <__assert_fail@plt+0x475c>
   15c38:	add	r2, sp, #4
   15c3c:	mov	r0, r4
   15c40:	mov	r1, r5
   15c44:	mov	r3, #0
   15c48:	bl	15cd0 <__assert_fail@plt+0x4770>
   15c4c:	cmp	r0, #0
   15c50:	bne	15cc8 <__assert_fail@plt+0x4768>
   15c54:	ldr	r6, [sp, #4]
   15c58:	ldr	r0, [r6]
   15c5c:	cmp	r0, #0
   15c60:	beq	15c94 <__assert_fail@plt+0x4734>
   15c64:	mov	r0, r4
   15c68:	bl	15dac <__assert_fail@plt+0x484c>
   15c6c:	cmp	r0, #0
   15c70:	beq	15cb8 <__assert_fail@plt+0x4758>
   15c74:	str	r5, [r0]
   15c78:	ldr	r1, [r6, #4]
   15c7c:	str	r1, [r0, #4]
   15c80:	str	r0, [r6, #4]
   15c84:	ldr	r0, [r4, #16]
   15c88:	add	r0, r0, #1
   15c8c:	str	r0, [r4, #16]
   15c90:	b	15cb0 <__assert_fail@plt+0x4750>
   15c94:	str	r5, [r6]
   15c98:	ldr	r0, [r4, #12]
   15c9c:	ldr	r1, [r4, #16]
   15ca0:	add	r1, r1, #1
   15ca4:	add	r0, r0, #1
   15ca8:	str	r0, [r4, #12]
   15cac:	str	r1, [r4, #16]
   15cb0:	mov	r6, #1
   15cb4:	b	15cbc <__assert_fail@plt+0x475c>
   15cb8:	mvn	r6, #0
   15cbc:	mov	r0, r6
   15cc0:	sub	sp, fp, #16
   15cc4:	pop	{r4, r5, r6, r7, fp, pc}
   15cc8:	bl	11518 <abort@plt>
   15ccc:	svcmi	0x00800000
   15cd0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cd4:	add	fp, sp, #24
   15cd8:	mov	r8, r3
   15cdc:	mov	r4, r2
   15ce0:	mov	r7, r1
   15ce4:	mov	r5, r0
   15ce8:	bl	15324 <__assert_fail@plt+0x3dc4>
   15cec:	str	r0, [r4]
   15cf0:	ldr	r1, [r0]
   15cf4:	mov	r4, #0
   15cf8:	cmp	r1, #0
   15cfc:	beq	15da4 <__assert_fail@plt+0x4844>
   15d00:	mov	r6, r0
   15d04:	cmp	r1, r7
   15d08:	beq	15d20 <__assert_fail@plt+0x47c0>
   15d0c:	ldr	r2, [r5, #28]
   15d10:	mov	r0, r7
   15d14:	blx	r2
   15d18:	cmp	r0, #0
   15d1c:	beq	15d48 <__assert_fail@plt+0x47e8>
   15d20:	ldr	r4, [r6]
   15d24:	cmp	r8, #0
   15d28:	beq	15da4 <__assert_fail@plt+0x4844>
   15d2c:	ldr	r1, [r6, #4]
   15d30:	cmp	r1, #0
   15d34:	beq	15d9c <__assert_fail@plt+0x483c>
   15d38:	ldm	r1, {r0, r2}
   15d3c:	stm	r6, {r0, r2}
   15d40:	b	15d8c <__assert_fail@plt+0x482c>
   15d44:	ldr	r6, [r6]
   15d48:	ldr	r0, [r6, #4]!
   15d4c:	cmp	r0, #0
   15d50:	beq	15da4 <__assert_fail@plt+0x4844>
   15d54:	ldr	r1, [r0]
   15d58:	cmp	r1, r7
   15d5c:	beq	15d74 <__assert_fail@plt+0x4814>
   15d60:	ldr	r2, [r5, #28]
   15d64:	mov	r0, r7
   15d68:	blx	r2
   15d6c:	cmp	r0, #0
   15d70:	beq	15d44 <__assert_fail@plt+0x47e4>
   15d74:	ldr	r1, [r6]
   15d78:	ldr	r4, [r1]
   15d7c:	cmp	r8, #0
   15d80:	beq	15da4 <__assert_fail@plt+0x4844>
   15d84:	ldr	r0, [r1, #4]
   15d88:	str	r0, [r6]
   15d8c:	mov	r0, r5
   15d90:	bl	15fc8 <__assert_fail@plt+0x4a68>
   15d94:	mov	r0, r4
   15d98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d9c:	mov	r0, #0
   15da0:	str	r0, [r6]
   15da4:	mov	r0, r4
   15da8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15dac:	mov	r1, r0
   15db0:	ldr	r0, [r0, #36]	; 0x24
   15db4:	cmp	r0, #0
   15db8:	ldrne	r2, [r0, #4]
   15dbc:	strne	r2, [r1, #36]	; 0x24
   15dc0:	bxne	lr
   15dc4:	push	{fp, lr}
   15dc8:	mov	fp, sp
   15dcc:	mov	r0, #8
   15dd0:	bl	190c4 <__assert_fail@plt+0x7b64>
   15dd4:	pop	{fp, pc}
   15dd8:	push	{r4, sl, fp, lr}
   15ddc:	add	fp, sp, #8
   15de0:	sub	sp, sp, #8
   15de4:	mov	r4, r1
   15de8:	add	r2, sp, #4
   15dec:	bl	15b58 <__assert_fail@plt+0x45f8>
   15df0:	cmn	r0, #1
   15df4:	beq	15e08 <__assert_fail@plt+0x48a8>
   15df8:	ldr	r1, [sp, #4]
   15dfc:	cmp	r0, #0
   15e00:	moveq	r4, r1
   15e04:	b	15e0c <__assert_fail@plt+0x48ac>
   15e08:	mov	r4, #0
   15e0c:	mov	r0, r4
   15e10:	sub	sp, fp, #8
   15e14:	pop	{r4, sl, fp, pc}
   15e18:	push	{r4, r5, r6, sl, fp, lr}
   15e1c:	add	fp, sp, #16
   15e20:	sub	sp, sp, #8
   15e24:	mov	r4, r0
   15e28:	add	r2, sp, #4
   15e2c:	mov	r3, #1
   15e30:	bl	15cd0 <__assert_fail@plt+0x4770>
   15e34:	mov	r5, r0
   15e38:	cmp	r0, #0
   15e3c:	beq	15f18 <__assert_fail@plt+0x49b8>
   15e40:	ldr	r0, [r4, #16]
   15e44:	sub	r0, r0, #1
   15e48:	str	r0, [r4, #16]
   15e4c:	ldr	r0, [sp, #4]
   15e50:	ldr	r0, [r0]
   15e54:	cmp	r0, #0
   15e58:	bne	15f18 <__assert_fail@plt+0x49b8>
   15e5c:	ldr	r0, [r4, #12]
   15e60:	sub	r0, r0, #1
   15e64:	vldr	s0, [r4, #8]
   15e68:	str	r0, [r4, #12]
   15e6c:	ldr	r1, [r4, #20]
   15e70:	vldr	s2, [r1]
   15e74:	vcvt.f32.u32	s0, s0
   15e78:	vmov	s4, r0
   15e7c:	vcvt.f32.u32	s4, s4
   15e80:	vmul.f32	s0, s2, s0
   15e84:	vcmpe.f32	s0, s4
   15e88:	vmrs	APSR_nzcv, fpscr
   15e8c:	ble	15f18 <__assert_fail@plt+0x49b8>
   15e90:	mov	r0, r4
   15e94:	bl	15658 <__assert_fail@plt+0x40f8>
   15e98:	vldr	s0, [r4, #8]
   15e9c:	vldr	s2, [r4, #12]
   15ea0:	ldr	r0, [r4, #20]
   15ea4:	vcvt.f32.u32	s0, s0
   15ea8:	vldr	s4, [r0]
   15eac:	vcvt.f32.u32	s2, s2
   15eb0:	vmul.f32	s4, s4, s0
   15eb4:	vcmpe.f32	s4, s2
   15eb8:	vmrs	APSR_nzcv, fpscr
   15ebc:	ble	15f18 <__assert_fail@plt+0x49b8>
   15ec0:	vldr	s2, [r0, #4]
   15ec4:	ldrb	r1, [r0, #16]
   15ec8:	vmul.f32	s0, s2, s0
   15ecc:	cmp	r1, #0
   15ed0:	vldreq	s2, [r0, #8]
   15ed4:	vmuleq.f32	s0, s0, s2
   15ed8:	vcvt.u32.f32	s0, s0
   15edc:	vmov	r1, s0
   15ee0:	mov	r0, r4
   15ee4:	bl	1590c <__assert_fail@plt+0x43ac>
   15ee8:	cmp	r0, #0
   15eec:	bne	15f18 <__assert_fail@plt+0x49b8>
   15ef0:	ldr	r0, [r4, #36]	; 0x24
   15ef4:	cmp	r0, #0
   15ef8:	beq	15f10 <__assert_fail@plt+0x49b0>
   15efc:	ldr	r6, [r0, #4]
   15f00:	bl	12fd4 <__assert_fail@plt+0x1a74>
   15f04:	cmp	r6, #0
   15f08:	mov	r0, r6
   15f0c:	bne	15efc <__assert_fail@plt+0x499c>
   15f10:	mov	r0, #0
   15f14:	str	r0, [r4, #36]	; 0x24
   15f18:	mov	r0, r5
   15f1c:	sub	sp, fp, #16
   15f20:	pop	{r4, r5, r6, sl, fp, pc}
   15f24:	b	15e18 <__assert_fail@plt+0x48b8>
   15f28:	push	{r4, r5, fp, lr}
   15f2c:	add	fp, sp, #8
   15f30:	cmp	r0, #10
   15f34:	movls	r0, #10
   15f38:	orr	r5, r0, #1
   15f3c:	mvn	r4, #0
   15f40:	cmn	r5, #1
   15f44:	bne	15f5c <__assert_fail@plt+0x49fc>
   15f48:	mov	r0, r4
   15f4c:	pop	{r4, r5, fp, pc}
   15f50:	add	r5, r5, #2
   15f54:	cmn	r5, #1
   15f58:	beq	15f48 <__assert_fail@plt+0x49e8>
   15f5c:	mov	r0, r5
   15f60:	bl	15f78 <__assert_fail@plt+0x4a18>
   15f64:	cmp	r0, #0
   15f68:	beq	15f50 <__assert_fail@plt+0x49f0>
   15f6c:	mov	r4, r5
   15f70:	mov	r0, r4
   15f74:	pop	{r4, r5, fp, pc}
   15f78:	mov	ip, #3
   15f7c:	cmp	r0, #10
   15f80:	bcc	15fb4 <__assert_fail@plt+0x4a54>
   15f84:	mov	ip, #3
   15f88:	mov	r2, #9
   15f8c:	mov	r3, #16
   15f90:	udiv	r1, r0, ip
   15f94:	mls	r1, r1, ip, r0
   15f98:	cmp	r1, #0
   15f9c:	beq	15fb4 <__assert_fail@plt+0x4a54>
   15fa0:	add	r2, r3, r2
   15fa4:	add	r3, r3, #8
   15fa8:	add	ip, ip, #2
   15fac:	cmp	r2, r0
   15fb0:	bcc	15f90 <__assert_fail@plt+0x4a30>
   15fb4:	udiv	r1, r0, ip
   15fb8:	mls	r0, r1, ip, r0
   15fbc:	cmp	r0, #0
   15fc0:	movwne	r0, #1
   15fc4:	bx	lr
   15fc8:	mov	r2, #0
   15fcc:	str	r2, [r1]
   15fd0:	ldr	r2, [r0, #36]	; 0x24
   15fd4:	str	r2, [r1, #4]
   15fd8:	str	r1, [r0, #36]	; 0x24
   15fdc:	bx	lr
   15fe0:	mov	r2, #0
   15fe4:	mov	r3, #1
   15fe8:	strb	r3, [r0, #28]
   15fec:	str	r2, [r0, #20]
   15ff0:	str	r2, [r0, #24]
   15ff4:	str	r1, [r0, r2, lsl #2]
   15ff8:	add	r2, r2, #1
   15ffc:	cmp	r2, #4
   16000:	bne	15ff4 <__assert_fail@plt+0x4a94>
   16004:	str	r1, [r0, #16]
   16008:	bx	lr
   1600c:	ldrb	r0, [r0, #28]
   16010:	bx	lr
   16014:	ldr	r2, [r0, #20]
   16018:	ldrb	r3, [r0, #28]
   1601c:	eor	r3, r3, #1
   16020:	add	r2, r2, r3
   16024:	and	r2, r2, #3
   16028:	ldr	ip, [r0, r2, lsl #2]
   1602c:	str	r1, [r0, r2, lsl #2]
   16030:	str	r2, [r0, #20]
   16034:	ldr	r1, [r0, #24]
   16038:	cmp	r2, r1
   1603c:	addeq	r1, r1, r3
   16040:	andeq	r1, r1, #3
   16044:	streq	r1, [r0, #24]
   16048:	mov	r1, #0
   1604c:	strb	r1, [r0, #28]
   16050:	mov	r0, ip
   16054:	bx	lr
   16058:	push	{r4, sl, fp, lr}
   1605c:	add	fp, sp, #8
   16060:	mov	r4, r0
   16064:	bl	1600c <__assert_fail@plt+0x4aac>
   16068:	cmp	r0, #0
   1606c:	bne	160a8 <__assert_fail@plt+0x4b48>
   16070:	ldr	r1, [r4, #16]
   16074:	ldr	r2, [r4, #20]
   16078:	ldr	r0, [r4, r2, lsl #2]
   1607c:	str	r1, [r4, r2, lsl #2]
   16080:	ldr	r1, [r4, #20]
   16084:	ldr	r2, [r4, #24]
   16088:	cmp	r1, r2
   1608c:	moveq	r1, #1
   16090:	strbeq	r1, [r4, #28]
   16094:	popeq	{r4, sl, fp, pc}
   16098:	sub	r1, r1, #1
   1609c:	and	r1, r1, #3
   160a0:	str	r1, [r4, #20]
   160a4:	pop	{r4, sl, fp, pc}
   160a8:	bl	11518 <abort@plt>
   160ac:	push	{r4, r5, r6, sl, fp, lr}
   160b0:	add	fp, sp, #16
   160b4:	mov	r4, r1
   160b8:	mov	r5, r0
   160bc:	mov	r0, #0
   160c0:	strb	r0, [r2, #20]
   160c4:	add	r6, r2, #19
   160c8:	mov	r0, r5
   160cc:	mov	r1, r4
   160d0:	mov	r2, #10
   160d4:	mov	r3, #0
   160d8:	bl	19d78 <__assert_fail@plt+0x8818>
   160dc:	add	r2, r0, r0, lsl #2
   160e0:	sub	r2, r5, r2, lsl #1
   160e4:	orr	r2, r2, #48	; 0x30
   160e8:	strb	r2, [r6], #-1
   160ec:	rsbs	r2, r5, #9
   160f0:	rscs	r2, r4, #0
   160f4:	mov	r5, r0
   160f8:	mov	r4, r1
   160fc:	bcc	160c8 <__assert_fail@plt+0x4b68>
   16100:	add	r0, r6, #1
   16104:	pop	{r4, r5, r6, sl, fp, pc}
   16108:	sub	sp, sp, #4
   1610c:	push	{fp, lr}
   16110:	mov	fp, sp
   16114:	sub	sp, sp, #4
   16118:	str	r3, [fp, #8]
   1611c:	mov	r3, #0
   16120:	tst	r2, #64	; 0x40
   16124:	addne	r3, fp, #8
   16128:	addne	r3, r3, #4
   1612c:	strne	r3, [sp]
   16130:	ldrne	r3, [fp, #8]
   16134:	bl	113f8 <openat64@plt>
   16138:	bl	17e48 <__assert_fail@plt+0x68e8>
   1613c:	mov	sp, fp
   16140:	pop	{fp, lr}
   16144:	add	sp, sp, #4
   16148:	bx	lr
   1614c:	push	{r4, r5, r6, sl, fp, lr}
   16150:	add	fp, sp, #16
   16154:	mov	r4, r3
   16158:	orr	r2, r2, #18688	; 0x4900
   1615c:	orr	r2, r2, #524288	; 0x80000
   16160:	bl	16108 <__assert_fail@plt+0x4ba8>
   16164:	mov	r5, r0
   16168:	mov	r0, #0
   1616c:	cmp	r5, #0
   16170:	poplt	{r4, r5, r6, sl, fp, pc}
   16174:	mov	r0, r5
   16178:	bl	114b8 <fdopendir@plt>
   1617c:	cmp	r0, #0
   16180:	strne	r5, [r4]
   16184:	popne	{r4, r5, r6, sl, fp, pc}
   16188:	bl	11410 <__errno_location@plt>
   1618c:	mov	r4, r0
   16190:	ldr	r6, [r0]
   16194:	mov	r0, r5
   16198:	bl	11524 <close@plt>
   1619c:	str	r6, [r4]
   161a0:	mov	r0, #0
   161a4:	pop	{r4, r5, r6, sl, fp, pc}
   161a8:	push	{r4, r5, fp, lr}
   161ac:	add	fp, sp, #8
   161b0:	cmp	r0, #0
   161b4:	beq	16248 <__assert_fail@plt+0x4ce8>
   161b8:	mov	r4, r0
   161bc:	mov	r1, #47	; 0x2f
   161c0:	bl	11494 <strrchr@plt>
   161c4:	cmp	r0, #0
   161c8:	mov	r5, r4
   161cc:	addne	r5, r0, #1
   161d0:	sub	r0, r5, r4
   161d4:	cmp	r0, #7
   161d8:	blt	1622c <__assert_fail@plt+0x4ccc>
   161dc:	sub	r0, r5, #7
   161e0:	movw	r1, #45452	; 0xb18c
   161e4:	movt	r1, #1
   161e8:	mov	r2, #7
   161ec:	bl	1150c <strncmp@plt>
   161f0:	cmp	r0, #0
   161f4:	bne	1622c <__assert_fail@plt+0x4ccc>
   161f8:	movw	r1, #45460	; 0xb194
   161fc:	movt	r1, #1
   16200:	mov	r0, r5
   16204:	mov	r2, #3
   16208:	bl	1150c <strncmp@plt>
   1620c:	cmp	r0, #0
   16210:	beq	1621c <__assert_fail@plt+0x4cbc>
   16214:	mov	r4, r5
   16218:	b	1622c <__assert_fail@plt+0x4ccc>
   1621c:	add	r4, r5, #3
   16220:	movw	r0, #49536	; 0xc180
   16224:	movt	r0, #2
   16228:	str	r4, [r0]
   1622c:	movw	r0, #49540	; 0xc184
   16230:	movt	r0, #2
   16234:	str	r4, [r0]
   16238:	movw	r0, #49600	; 0xc1c0
   1623c:	movt	r0, #2
   16240:	str	r4, [r0]
   16244:	pop	{r4, r5, fp, pc}
   16248:	movw	r0, #49552	; 0xc190
   1624c:	movt	r0, #2
   16250:	ldr	r3, [r0]
   16254:	movw	r0, #45396	; 0xb154
   16258:	movt	r0, #1
   1625c:	mov	r1, #55	; 0x37
   16260:	mov	r2, #1
   16264:	bl	11320 <fwrite@plt>
   16268:	bl	11518 <abort@plt>
   1626c:	push	{r4, r5, r6, sl, fp, lr}
   16270:	add	fp, sp, #16
   16274:	mov	r4, r0
   16278:	movw	r0, #49608	; 0xc1c8
   1627c:	movt	r0, #2
   16280:	cmp	r4, #0
   16284:	moveq	r4, r0
   16288:	bl	11410 <__errno_location@plt>
   1628c:	mov	r5, r0
   16290:	ldr	r6, [r0]
   16294:	mov	r0, r4
   16298:	mov	r1, #48	; 0x30
   1629c:	bl	189f4 <__assert_fail@plt+0x7494>
   162a0:	str	r6, [r5]
   162a4:	pop	{r4, r5, r6, sl, fp, pc}
   162a8:	movw	r1, #49608	; 0xc1c8
   162ac:	movt	r1, #2
   162b0:	cmp	r0, #0
   162b4:	movne	r1, r0
   162b8:	ldr	r0, [r1]
   162bc:	bx	lr
   162c0:	movw	r2, #49608	; 0xc1c8
   162c4:	movt	r2, #2
   162c8:	cmp	r0, #0
   162cc:	movne	r2, r0
   162d0:	str	r1, [r2]
   162d4:	bx	lr
   162d8:	movw	r3, #49608	; 0xc1c8
   162dc:	movt	r3, #2
   162e0:	cmp	r0, #0
   162e4:	movne	r3, r0
   162e8:	ubfx	r0, r1, #5, #3
   162ec:	add	r0, r3, r0, lsl #2
   162f0:	ldr	r3, [r0, #8]
   162f4:	and	r1, r1, #31
   162f8:	eor	r2, r2, r3, lsr r1
   162fc:	and	r2, r2, #1
   16300:	eor	r2, r3, r2, lsl r1
   16304:	str	r2, [r0, #8]
   16308:	mov	r0, #1
   1630c:	and	r0, r0, r3, lsr r1
   16310:	bx	lr
   16314:	movw	r2, #49608	; 0xc1c8
   16318:	movt	r2, #2
   1631c:	cmp	r0, #0
   16320:	movne	r2, r0
   16324:	ldr	r0, [r2, #4]
   16328:	str	r1, [r2, #4]
   1632c:	bx	lr
   16330:	movw	r3, #49608	; 0xc1c8
   16334:	movt	r3, #2
   16338:	cmp	r0, #0
   1633c:	movne	r3, r0
   16340:	mov	r0, #10
   16344:	str	r0, [r3]
   16348:	cmp	r1, #0
   1634c:	cmpne	r2, #0
   16350:	bne	16360 <__assert_fail@plt+0x4e00>
   16354:	push	{fp, lr}
   16358:	mov	fp, sp
   1635c:	bl	11518 <abort@plt>
   16360:	str	r1, [r3, #40]	; 0x28
   16364:	str	r2, [r3, #44]	; 0x2c
   16368:	bx	lr
   1636c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16370:	add	fp, sp, #28
   16374:	sub	sp, sp, #20
   16378:	mov	r8, r3
   1637c:	mov	r9, r2
   16380:	mov	sl, r1
   16384:	mov	r7, r0
   16388:	ldr	r0, [fp, #8]
   1638c:	movw	r5, #49608	; 0xc1c8
   16390:	movt	r5, #2
   16394:	cmp	r0, #0
   16398:	movne	r5, r0
   1639c:	bl	11410 <__errno_location@plt>
   163a0:	mov	r4, r0
   163a4:	ldm	r5, {r0, r1}
   163a8:	ldr	r2, [r5, #40]	; 0x28
   163ac:	ldr	r3, [r5, #44]	; 0x2c
   163b0:	ldr	r6, [r4]
   163b4:	add	r5, r5, #8
   163b8:	stm	sp, {r0, r1, r5}
   163bc:	str	r2, [sp, #12]
   163c0:	str	r3, [sp, #16]
   163c4:	mov	r0, r7
   163c8:	mov	r1, sl
   163cc:	mov	r2, r9
   163d0:	mov	r3, r8
   163d4:	bl	163e4 <__assert_fail@plt+0x4e84>
   163d8:	str	r6, [r4]
   163dc:	sub	sp, fp, #28
   163e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163e8:	add	fp, sp, #28
   163ec:	sub	sp, sp, #156	; 0x9c
   163f0:	mov	r9, r3
   163f4:	str	r2, [fp, #-84]	; 0xffffffac
   163f8:	mov	r6, r1
   163fc:	mov	r7, r0
   16400:	ldr	r0, [fp, #12]
   16404:	and	r1, r0, #4
   16408:	str	r1, [sp, #32]
   1640c:	and	r1, r0, #1
   16410:	str	r1, [sp, #36]	; 0x24
   16414:	ubfx	sl, r0, #1, #1
   16418:	bl	11338 <__ctype_get_mb_cur_max@plt>
   1641c:	str	r0, [sp, #40]	; 0x28
   16420:	ldr	r0, [fp, #24]
   16424:	str	r0, [sp, #76]	; 0x4c
   16428:	ldr	r0, [fp, #20]
   1642c:	str	r0, [sp, #68]	; 0x44
   16430:	ldr	r0, [fp, #8]
   16434:	str	r0, [fp, #-60]	; 0xffffffc4
   16438:	mov	r0, #0
   1643c:	str	r0, [sp, #72]	; 0x48
   16440:	mov	r0, #0
   16444:	str	r0, [sp, #92]	; 0x5c
   16448:	mov	r0, #0
   1644c:	str	r0, [fp, #-72]	; 0xffffffb8
   16450:	mov	r0, #0
   16454:	mov	r1, #0
   16458:	str	r1, [fp, #-56]	; 0xffffffc8
   1645c:	mov	r1, #0
   16460:	str	r1, [sp, #56]	; 0x38
   16464:	mov	r5, #1
   16468:	str	r7, [sp, #80]	; 0x50
   1646c:	mov	r4, r6
   16470:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16474:	cmp	r6, #10
   16478:	bhi	173e0 <__assert_fail@plt+0x5e80>
   1647c:	add	r1, pc, #20
   16480:	mov	r8, #0
   16484:	mov	r2, #1
   16488:	mov	r3, #0
   1648c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16490:	mov	lr, r9
   16494:	ldr	pc, [r1, r6, lsl #2]
   16498:	andeq	r6, r1, r0, ror r5
   1649c:	andeq	r6, r1, r0, lsr #11
   164a0:	andeq	r6, r1, r0, ror #10
   164a4:	andeq	r6, r1, r8, asr r5
   164a8:	muleq	r1, r4, r5
   164ac:	strdeq	r6, [r1], -r4
   164b0:	andeq	r6, r1, r0, lsl #11
   164b4:	andeq	r6, r1, r0, asr r6
   164b8:	andeq	r6, r1, r4, asr #9
   164bc:	andeq	r6, r1, r4, asr #9
   164c0:	andeq	r6, r1, ip, ror #9
   164c4:	movw	r0, #45542	; 0xb1e6
   164c8:	movt	r0, #1
   164cc:	mov	r1, r6
   164d0:	bl	179ec <__assert_fail@plt+0x648c>
   164d4:	str	r0, [sp, #68]	; 0x44
   164d8:	movw	r0, #45544	; 0xb1e8
   164dc:	movt	r0, #1
   164e0:	mov	r1, r6
   164e4:	bl	179ec <__assert_fail@plt+0x648c>
   164e8:	str	r0, [sp, #76]	; 0x4c
   164ec:	mov	r8, #0
   164f0:	tst	sl, #1
   164f4:	bne	1652c <__assert_fail@plt+0x4fcc>
   164f8:	ldr	r0, [sp, #68]	; 0x44
   164fc:	ldrb	r0, [r0]
   16500:	cmp	r0, #0
   16504:	beq	1652c <__assert_fail@plt+0x4fcc>
   16508:	ldr	r1, [sp, #68]	; 0x44
   1650c:	add	r1, r1, #1
   16510:	mov	r8, #0
   16514:	cmp	r8, r4
   16518:	strbcc	r0, [r7, r8]
   1651c:	ldrb	r0, [r1, r8]
   16520:	add	r8, r8, #1
   16524:	cmp	r0, #0
   16528:	bne	16514 <__assert_fail@plt+0x4fb4>
   1652c:	ldr	r6, [sp, #76]	; 0x4c
   16530:	mov	r0, r6
   16534:	bl	113e0 <strlen@plt>
   16538:	str	r0, [fp, #-72]	; 0xffffffb8
   1653c:	str	r6, [sp, #92]	; 0x5c
   16540:	mov	r2, #1
   16544:	mov	r3, sl
   16548:	ldr	ip, [fp, #-84]	; 0xffffffac
   1654c:	mov	lr, r9
   16550:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16554:	b	16650 <__assert_fail@plt+0x50f0>
   16558:	mov	r0, #1
   1655c:	b	165a0 <__assert_fail@plt+0x5040>
   16560:	tst	sl, #1
   16564:	bne	165a0 <__assert_fail@plt+0x5040>
   16568:	mov	r2, r0
   1656c:	b	165c8 <__assert_fail@plt+0x5068>
   16570:	mov	r6, #0
   16574:	mov	r8, #0
   16578:	mov	r2, r0
   1657c:	b	1664c <__assert_fail@plt+0x50ec>
   16580:	mov	r0, #1
   16584:	str	r0, [fp, #-72]	; 0xffffffb8
   16588:	mov	r8, #0
   1658c:	mov	r6, #5
   16590:	b	1660c <__assert_fail@plt+0x50ac>
   16594:	mov	r2, #1
   16598:	tst	sl, #1
   1659c:	beq	165c8 <__assert_fail@plt+0x5068>
   165a0:	mov	r1, #1
   165a4:	str	r1, [fp, #-72]	; 0xffffffb8
   165a8:	mov	r8, #0
   165ac:	mov	r6, #2
   165b0:	movw	r1, #45544	; 0xb1e8
   165b4:	movt	r1, #1
   165b8:	str	r1, [sp, #92]	; 0x5c
   165bc:	mov	r2, r0
   165c0:	mov	r3, #1
   165c4:	b	16650 <__assert_fail@plt+0x50f0>
   165c8:	mov	r8, #1
   165cc:	mov	r6, #2
   165d0:	cmp	r4, #0
   165d4:	movne	r0, #39	; 0x27
   165d8:	strbne	r0, [r7]
   165dc:	movw	r0, #45544	; 0xb1e8
   165e0:	movt	r0, #1
   165e4:	str	r0, [sp, #92]	; 0x5c
   165e8:	mov	r0, #1
   165ec:	str	r0, [fp, #-72]	; 0xffffffb8
   165f0:	b	1664c <__assert_fail@plt+0x50ec>
   165f4:	mov	r6, #5
   165f8:	tst	sl, #1
   165fc:	beq	16624 <__assert_fail@plt+0x50c4>
   16600:	mov	r0, #1
   16604:	str	r0, [fp, #-72]	; 0xffffffb8
   16608:	mov	r8, #0
   1660c:	movw	r0, #45540	; 0xb1e4
   16610:	movt	r0, #1
   16614:	str	r0, [sp, #92]	; 0x5c
   16618:	mov	r2, #1
   1661c:	mov	r3, #1
   16620:	b	16650 <__assert_fail@plt+0x50f0>
   16624:	cmp	r4, #0
   16628:	movne	r0, #34	; 0x22
   1662c:	strbne	r0, [r7]
   16630:	mov	r8, #1
   16634:	movw	r0, #45540	; 0xb1e4
   16638:	movt	r0, #1
   1663c:	str	r0, [sp, #92]	; 0x5c
   16640:	mov	r0, #1
   16644:	str	r0, [fp, #-72]	; 0xffffffb8
   16648:	mov	r2, #1
   1664c:	mov	r3, #0
   16650:	ldr	r0, [fp, #16]
   16654:	cmp	r0, #0
   16658:	movwne	r0, #1
   1665c:	and	r0, r0, r3
   16660:	str	r0, [fp, #-88]	; 0xffffffa8
   16664:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16668:	cmp	r0, #0
   1666c:	movwne	r0, #1
   16670:	and	r1, r0, r3
   16674:	and	r1, r2, r1
   16678:	str	r1, [sp, #48]	; 0x30
   1667c:	str	r6, [fp, #-60]	; 0xffffffc4
   16680:	subs	r6, r6, #2
   16684:	clz	r1, r6
   16688:	lsr	r1, r1, #5
   1668c:	and	r1, r1, r3
   16690:	str	r1, [sp, #60]	; 0x3c
   16694:	str	r6, [fp, #-80]	; 0xffffffb0
   16698:	mov	r1, r6
   1669c:	movwne	r1, #1
   166a0:	str	r3, [fp, #-76]	; 0xffffffb4
   166a4:	eor	r3, r3, #1
   166a8:	str	r3, [sp, #88]	; 0x58
   166ac:	orr	r3, r1, r3
   166b0:	str	r3, [sp, #64]	; 0x40
   166b4:	and	r1, r1, r2
   166b8:	str	r1, [fp, #-68]	; 0xffffffbc
   166bc:	and	r0, r0, r1
   166c0:	str	r0, [fp, #-64]	; 0xffffffc0
   166c4:	str	r2, [sp, #84]	; 0x54
   166c8:	eor	r0, r2, #1
   166cc:	str	r0, [sp, #52]	; 0x34
   166d0:	mov	r6, #0
   166d4:	cmn	lr, #1
   166d8:	beq	166e8 <__assert_fail@plt+0x5188>
   166dc:	cmp	r6, lr
   166e0:	bne	166f4 <__assert_fail@plt+0x5194>
   166e4:	b	17260 <__assert_fail@plt+0x5d00>
   166e8:	ldrb	r0, [ip, r6]
   166ec:	cmp	r0, #0
   166f0:	beq	17260 <__assert_fail@plt+0x5d00>
   166f4:	str	r5, [fp, #-48]	; 0xffffffd0
   166f8:	mov	sl, #0
   166fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16700:	cmp	r0, #0
   16704:	beq	16738 <__assert_fail@plt+0x51d8>
   16708:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1670c:	add	r5, r6, r0
   16710:	cmp	r0, #2
   16714:	bcc	16730 <__assert_fail@plt+0x51d0>
   16718:	cmn	lr, #1
   1671c:	bne	16730 <__assert_fail@plt+0x51d0>
   16720:	mov	r0, ip
   16724:	bl	113e0 <strlen@plt>
   16728:	ldr	ip, [fp, #-84]	; 0xffffffac
   1672c:	mov	lr, r0
   16730:	cmp	r5, lr
   16734:	bls	16744 <__assert_fail@plt+0x51e4>
   16738:	mov	r0, #0
   1673c:	str	r0, [fp, #-52]	; 0xffffffcc
   16740:	b	16790 <__assert_fail@plt+0x5230>
   16744:	mov	r5, r4
   16748:	mov	r4, lr
   1674c:	add	r0, ip, r6
   16750:	ldr	r1, [sp, #92]	; 0x5c
   16754:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16758:	bl	112c0 <memcmp@plt>
   1675c:	cmp	r0, #0
   16760:	mov	r1, r0
   16764:	movwne	r1, #1
   16768:	ldr	r2, [sp, #88]	; 0x58
   1676c:	orr	r1, r1, r2
   16770:	tst	r1, #1
   16774:	beq	17324 <__assert_fail@plt+0x5dc4>
   16778:	clz	r0, r0
   1677c:	lsr	r0, r0, #5
   16780:	str	r0, [fp, #-52]	; 0xffffffcc
   16784:	ldr	ip, [fp, #-84]	; 0xffffffac
   16788:	mov	lr, r4
   1678c:	mov	r4, r5
   16790:	ldrb	r5, [ip, r6]
   16794:	cmp	r5, #126	; 0x7e
   16798:	bhi	16b54 <__assert_fail@plt+0x55f4>
   1679c:	mov	r9, #1
   167a0:	mov	r2, #110	; 0x6e
   167a4:	mov	r0, #97	; 0x61
   167a8:	add	r3, pc, #4
   167ac:	mov	r1, #0
   167b0:	ldr	pc, [r3, r5, lsl #2]
   167b4:	andeq	r6, r1, ip, asr #20
   167b8:	andeq	r6, r1, r4, asr fp
   167bc:	andeq	r6, r1, r4, asr fp
   167c0:	andeq	r6, r1, r4, asr fp
   167c4:	andeq	r6, r1, r4, asr fp
   167c8:	andeq	r6, r1, r4, asr fp
   167cc:	andeq	r6, r1, r4, asr fp
   167d0:	andeq	r6, r1, r8, lsl ip
   167d4:	andeq	r6, r1, ip, lsr #20
   167d8:	andeq	r6, r1, r4, lsr #20
   167dc:	andeq	r6, r1, r8, lsr sl
   167e0:			; <UNDEFINED> instruction: 0x00016abc
   167e4:	andeq	r6, r1, ip, lsl sl
   167e8:	andeq	r6, r1, r4, lsr sl
   167ec:	andeq	r6, r1, r4, asr fp
   167f0:	andeq	r6, r1, r4, asr fp
   167f4:	andeq	r6, r1, r4, asr fp
   167f8:	andeq	r6, r1, r4, asr fp
   167fc:	andeq	r6, r1, r4, asr fp
   16800:	andeq	r6, r1, r4, asr fp
   16804:	andeq	r6, r1, r4, asr fp
   16808:	andeq	r6, r1, r4, asr fp
   1680c:	andeq	r6, r1, r4, asr fp
   16810:	andeq	r6, r1, r4, asr fp
   16814:	andeq	r6, r1, r4, asr fp
   16818:	andeq	r6, r1, r4, asr fp
   1681c:	andeq	r6, r1, r4, asr fp
   16820:	andeq	r6, r1, r4, asr fp
   16824:	andeq	r6, r1, r4, asr fp
   16828:	andeq	r6, r1, r4, asr fp
   1682c:	andeq	r6, r1, r4, asr fp
   16830:	andeq	r6, r1, r4, asr fp
   16834:	andeq	r6, r1, r8, asr #23
   16838:	andeq	r6, r1, ip, asr #23
   1683c:	andeq	r6, r1, ip, asr #23
   16840:	andeq	r6, r1, r4, asr #19
   16844:	andeq	r6, r1, ip, asr #23
   16848:			; <UNDEFINED> instruction: 0x000169b0
   1684c:	andeq	r6, r1, ip, asr #23
   16850:	andeq	r6, r1, r4, asr #21
   16854:	andeq	r6, r1, ip, asr #23
   16858:	andeq	r6, r1, ip, asr #23
   1685c:	andeq	r6, r1, ip, asr #23
   16860:			; <UNDEFINED> instruction: 0x000169b0
   16864:			; <UNDEFINED> instruction: 0x000169b0
   16868:			; <UNDEFINED> instruction: 0x000169b0
   1686c:			; <UNDEFINED> instruction: 0x000169b0
   16870:			; <UNDEFINED> instruction: 0x000169b0
   16874:			; <UNDEFINED> instruction: 0x000169b0
   16878:			; <UNDEFINED> instruction: 0x000169b0
   1687c:			; <UNDEFINED> instruction: 0x000169b0
   16880:			; <UNDEFINED> instruction: 0x000169b0
   16884:			; <UNDEFINED> instruction: 0x000169b0
   16888:			; <UNDEFINED> instruction: 0x000169b0
   1688c:			; <UNDEFINED> instruction: 0x000169b0
   16890:			; <UNDEFINED> instruction: 0x000169b0
   16894:			; <UNDEFINED> instruction: 0x000169b0
   16898:			; <UNDEFINED> instruction: 0x000169b0
   1689c:			; <UNDEFINED> instruction: 0x000169b0
   168a0:	andeq	r6, r1, ip, asr #23
   168a4:	andeq	r6, r1, ip, asr #23
   168a8:	andeq	r6, r1, ip, asr #23
   168ac:	andeq	r6, r1, ip, asr #23
   168b0:	andeq	r6, r1, ip, lsl #21
   168b4:	andeq	r6, r1, r4, asr fp
   168b8:			; <UNDEFINED> instruction: 0x000169b0
   168bc:			; <UNDEFINED> instruction: 0x000169b0
   168c0:			; <UNDEFINED> instruction: 0x000169b0
   168c4:			; <UNDEFINED> instruction: 0x000169b0
   168c8:			; <UNDEFINED> instruction: 0x000169b0
   168cc:			; <UNDEFINED> instruction: 0x000169b0
   168d0:			; <UNDEFINED> instruction: 0x000169b0
   168d4:			; <UNDEFINED> instruction: 0x000169b0
   168d8:			; <UNDEFINED> instruction: 0x000169b0
   168dc:			; <UNDEFINED> instruction: 0x000169b0
   168e0:			; <UNDEFINED> instruction: 0x000169b0
   168e4:			; <UNDEFINED> instruction: 0x000169b0
   168e8:			; <UNDEFINED> instruction: 0x000169b0
   168ec:			; <UNDEFINED> instruction: 0x000169b0
   168f0:			; <UNDEFINED> instruction: 0x000169b0
   168f4:			; <UNDEFINED> instruction: 0x000169b0
   168f8:			; <UNDEFINED> instruction: 0x000169b0
   168fc:			; <UNDEFINED> instruction: 0x000169b0
   16900:			; <UNDEFINED> instruction: 0x000169b0
   16904:			; <UNDEFINED> instruction: 0x000169b0
   16908:			; <UNDEFINED> instruction: 0x000169b0
   1690c:			; <UNDEFINED> instruction: 0x000169b0
   16910:			; <UNDEFINED> instruction: 0x000169b0
   16914:			; <UNDEFINED> instruction: 0x000169b0
   16918:			; <UNDEFINED> instruction: 0x000169b0
   1691c:			; <UNDEFINED> instruction: 0x000169b0
   16920:	andeq	r6, r1, ip, asr #23
   16924:	strdeq	r6, [r1], -r8
   16928:			; <UNDEFINED> instruction: 0x000169b0
   1692c:	andeq	r6, r1, ip, asr #23
   16930:			; <UNDEFINED> instruction: 0x000169b0
   16934:	andeq	r6, r1, ip, asr #23
   16938:			; <UNDEFINED> instruction: 0x000169b0
   1693c:			; <UNDEFINED> instruction: 0x000169b0
   16940:			; <UNDEFINED> instruction: 0x000169b0
   16944:			; <UNDEFINED> instruction: 0x000169b0
   16948:			; <UNDEFINED> instruction: 0x000169b0
   1694c:			; <UNDEFINED> instruction: 0x000169b0
   16950:			; <UNDEFINED> instruction: 0x000169b0
   16954:			; <UNDEFINED> instruction: 0x000169b0
   16958:			; <UNDEFINED> instruction: 0x000169b0
   1695c:			; <UNDEFINED> instruction: 0x000169b0
   16960:			; <UNDEFINED> instruction: 0x000169b0
   16964:			; <UNDEFINED> instruction: 0x000169b0
   16968:			; <UNDEFINED> instruction: 0x000169b0
   1696c:			; <UNDEFINED> instruction: 0x000169b0
   16970:			; <UNDEFINED> instruction: 0x000169b0
   16974:			; <UNDEFINED> instruction: 0x000169b0
   16978:			; <UNDEFINED> instruction: 0x000169b0
   1697c:			; <UNDEFINED> instruction: 0x000169b0
   16980:			; <UNDEFINED> instruction: 0x000169b0
   16984:			; <UNDEFINED> instruction: 0x000169b0
   16988:			; <UNDEFINED> instruction: 0x000169b0
   1698c:			; <UNDEFINED> instruction: 0x000169b0
   16990:			; <UNDEFINED> instruction: 0x000169b0
   16994:			; <UNDEFINED> instruction: 0x000169b0
   16998:			; <UNDEFINED> instruction: 0x000169b0
   1699c:			; <UNDEFINED> instruction: 0x000169b0
   169a0:	ldrdeq	r6, [r1], -r8
   169a4:	andeq	r6, r1, ip, asr #23
   169a8:	ldrdeq	r6, [r1], -r8
   169ac:	andeq	r6, r1, r4, asr #19
   169b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   169b4:	cmp	r0, #0
   169b8:	beq	16c2c <__assert_fail@plt+0x56cc>
   169bc:	ldr	r0, [fp, #16]
   169c0:	b	16c30 <__assert_fail@plt+0x56d0>
   169c4:	mov	r9, #0
   169c8:	cmp	r6, #0
   169cc:	beq	16bc8 <__assert_fail@plt+0x5668>
   169d0:	mov	sl, #0
   169d4:	b	169b0 <__assert_fail@plt+0x5450>
   169d8:	mov	r9, #0
   169dc:	cmn	lr, #1
   169e0:	beq	16bac <__assert_fail@plt+0x564c>
   169e4:	cmp	r6, #0
   169e8:	bne	169d0 <__assert_fail@plt+0x5470>
   169ec:	cmp	lr, #1
   169f0:	beq	16bc8 <__assert_fail@plt+0x5668>
   169f4:	b	169d0 <__assert_fail@plt+0x5470>
   169f8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   169fc:	cmp	r0, #2
   16a00:	bne	16bf4 <__assert_fail@plt+0x5694>
   16a04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a08:	tst	r0, #1
   16a0c:	bne	1733c <__assert_fail@plt+0x5ddc>
   16a10:	mov	sl, #0
   16a14:	mov	r0, #92	; 0x5c
   16a18:	b	16c08 <__assert_fail@plt+0x56a8>
   16a1c:	mov	r0, #102	; 0x66
   16a20:	b	16c18 <__assert_fail@plt+0x56b8>
   16a24:	mov	r2, #116	; 0x74
   16a28:	b	16a38 <__assert_fail@plt+0x54d8>
   16a2c:	mov	r0, #98	; 0x62
   16a30:	b	16c18 <__assert_fail@plt+0x56b8>
   16a34:	mov	r2, #114	; 0x72
   16a38:	ldr	r0, [sp, #64]	; 0x40
   16a3c:	tst	r0, #1
   16a40:	mov	r0, r2
   16a44:	bne	16c18 <__assert_fail@plt+0x56b8>
   16a48:	b	1733c <__assert_fail@plt+0x5ddc>
   16a4c:	ldr	r0, [sp, #84]	; 0x54
   16a50:	tst	r0, #1
   16a54:	beq	16d08 <__assert_fail@plt+0x57a8>
   16a58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a5c:	tst	r0, #1
   16a60:	bne	1733c <__assert_fail@plt+0x5ddc>
   16a64:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a68:	cmp	r0, #2
   16a6c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16a70:	movwne	r0, #1
   16a74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16a78:	orr	r0, r0, r2
   16a7c:	tst	r0, #1
   16a80:	beq	170fc <__assert_fail@plt+0x5b9c>
   16a84:	mov	r0, r8
   16a88:	b	17130 <__assert_fail@plt+0x5bd0>
   16a8c:	mov	sl, #0
   16a90:	mov	r5, #63	; 0x3f
   16a94:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a98:	cmp	r0, #5
   16a9c:	beq	16ebc <__assert_fail@plt+0x595c>
   16aa0:	cmp	r0, #2
   16aa4:	bne	16f5c <__assert_fail@plt+0x59fc>
   16aa8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16aac:	tst	r0, #1
   16ab0:	mov	r9, #0
   16ab4:	beq	169b0 <__assert_fail@plt+0x5450>
   16ab8:	b	1733c <__assert_fail@plt+0x5ddc>
   16abc:	mov	r0, #118	; 0x76
   16ac0:	b	16c18 <__assert_fail@plt+0x56b8>
   16ac4:	mov	r5, #39	; 0x27
   16ac8:	mov	r0, #1
   16acc:	str	r0, [sp, #56]	; 0x38
   16ad0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16ad4:	cmp	r0, #2
   16ad8:	bne	16d28 <__assert_fail@plt+0x57c8>
   16adc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16ae0:	tst	r0, #1
   16ae4:	bne	1733c <__assert_fail@plt+0x5ddc>
   16ae8:	ldr	r2, [sp, #72]	; 0x48
   16aec:	cmp	r2, #0
   16af0:	mov	r0, r2
   16af4:	movwne	r0, #1
   16af8:	clz	r1, r4
   16afc:	lsr	r1, r1, #5
   16b00:	orrs	r0, r0, r1
   16b04:	moveq	r2, r4
   16b08:	str	r2, [sp, #72]	; 0x48
   16b0c:	moveq	r4, r0
   16b10:	cmp	r8, r4
   16b14:	movcc	r0, #39	; 0x27
   16b18:	strbcc	r0, [r7, r8]
   16b1c:	add	r0, r8, #1
   16b20:	cmp	r0, r4
   16b24:	movcc	r1, #92	; 0x5c
   16b28:	strbcc	r1, [r7, r0]
   16b2c:	add	r0, r8, #2
   16b30:	cmp	r0, r4
   16b34:	movcc	r1, #39	; 0x27
   16b38:	strbcc	r1, [r7, r0]
   16b3c:	add	r8, r8, #3
   16b40:	mov	r0, #0
   16b44:	str	r0, [fp, #-56]	; 0xffffffc8
   16b48:	mov	sl, #0
   16b4c:	mov	r9, #1
   16b50:	b	169b0 <__assert_fail@plt+0x5450>
   16b54:	str	r4, [sp, #24]
   16b58:	ldr	r0, [sp, #40]	; 0x28
   16b5c:	cmp	r0, #1
   16b60:	bne	16d30 <__assert_fail@plt+0x57d0>
   16b64:	str	lr, [sp, #28]
   16b68:	bl	113bc <__ctype_b_loc@plt>
   16b6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16b70:	ldr	r0, [r0]
   16b74:	add	r0, r0, r5, lsl #1
   16b78:	ldrb	r0, [r0, #1]
   16b7c:	ubfx	r9, r0, #6, #1
   16b80:	mov	r1, #1
   16b84:	ldr	r4, [sp, #24]
   16b88:	ldr	r0, [sp, #52]	; 0x34
   16b8c:	orr	r0, r9, r0
   16b90:	mov	r2, r1
   16b94:	cmp	r1, #1
   16b98:	bhi	16f64 <__assert_fail@plt+0x5a04>
   16b9c:	tst	r0, #1
   16ba0:	beq	16f64 <__assert_fail@plt+0x5a04>
   16ba4:	ldr	lr, [sp, #28]
   16ba8:	b	169b0 <__assert_fail@plt+0x5450>
   16bac:	cmp	r6, #0
   16bb0:	ldrbeq	r0, [ip, #1]
   16bb4:	cmpeq	r0, #0
   16bb8:	beq	16bc8 <__assert_fail@plt+0x5668>
   16bbc:	mvn	lr, #0
   16bc0:	mov	sl, #0
   16bc4:	b	169b0 <__assert_fail@plt+0x5450>
   16bc8:	mov	r1, #1
   16bcc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16bd0:	cmp	r0, #2
   16bd4:	bne	16bec <__assert_fail@plt+0x568c>
   16bd8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16bdc:	tst	r0, #1
   16be0:	mov	r9, r1
   16be4:	beq	169b0 <__assert_fail@plt+0x5450>
   16be8:	b	1733c <__assert_fail@plt+0x5ddc>
   16bec:	mov	r9, r1
   16bf0:	b	169b0 <__assert_fail@plt+0x5450>
   16bf4:	mov	sl, #0
   16bf8:	mov	r0, #92	; 0x5c
   16bfc:	ldr	r1, [sp, #48]	; 0x30
   16c00:	cmp	r1, #0
   16c04:	beq	16c18 <__assert_fail@plt+0x56b8>
   16c08:	mov	r9, #0
   16c0c:	cmp	sl, #0
   16c10:	beq	171c8 <__assert_fail@plt+0x5c68>
   16c14:	b	17204 <__assert_fail@plt+0x5ca4>
   16c18:	mov	r9, #0
   16c1c:	ldr	r1, [sp, #84]	; 0x54
   16c20:	tst	r1, #1
   16c24:	mov	sl, #0
   16c28:	bne	16c68 <__assert_fail@plt+0x5708>
   16c2c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16c30:	cmp	r0, #0
   16c34:	mov	r0, r5
   16c38:	beq	16c5c <__assert_fail@plt+0x56fc>
   16c3c:	ubfx	r0, r5, #5, #3
   16c40:	ldr	r1, [fp, #16]
   16c44:	ldr	r0, [r1, r0, lsl #2]
   16c48:	and	r1, r5, #31
   16c4c:	mov	r2, #1
   16c50:	tst	r0, r2, lsl r1
   16c54:	mov	r0, r5
   16c58:	bne	16c68 <__assert_fail@plt+0x5708>
   16c5c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16c60:	cmp	r1, #0
   16c64:	beq	171c0 <__assert_fail@plt+0x5c60>
   16c68:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16c6c:	tst	r1, #1
   16c70:	bne	1733c <__assert_fail@plt+0x5ddc>
   16c74:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16c78:	cmp	r1, #2
   16c7c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16c80:	movwne	r1, #1
   16c84:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16c88:	orr	r1, r1, r2
   16c8c:	tst	r1, #1
   16c90:	beq	16c9c <__assert_fail@plt+0x573c>
   16c94:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16c98:	b	16cd8 <__assert_fail@plt+0x5778>
   16c9c:	cmp	r8, r4
   16ca0:	movcc	r1, #39	; 0x27
   16ca4:	strbcc	r1, [r7, r8]
   16ca8:	add	r1, r8, #1
   16cac:	cmp	r1, r4
   16cb0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16cb4:	movcc	r2, #36	; 0x24
   16cb8:	strbcc	r2, [r7, r1]
   16cbc:	add	r1, r8, #2
   16cc0:	cmp	r1, r4
   16cc4:	movcc	r2, #39	; 0x27
   16cc8:	strbcc	r2, [r7, r1]
   16ccc:	add	r8, r8, #3
   16cd0:	mov	r1, #1
   16cd4:	str	r1, [fp, #-56]	; 0xffffffc8
   16cd8:	cmp	r8, r4
   16cdc:	movcc	r1, #92	; 0x5c
   16ce0:	strbcc	r1, [r7, r8]
   16ce4:	add	r8, r8, #1
   16ce8:	cmp	r8, r4
   16cec:	strbcc	r0, [r7, r8]
   16cf0:	and	r5, r5, r9
   16cf4:	add	r8, r8, #1
   16cf8:	add	r6, r6, #1
   16cfc:	cmn	lr, #1
   16d00:	bne	166dc <__assert_fail@plt+0x517c>
   16d04:	b	166e8 <__assert_fail@plt+0x5188>
   16d08:	mov	r9, #0
   16d0c:	ldr	r0, [sp, #36]	; 0x24
   16d10:	cmp	r0, #0
   16d14:	mov	sl, #0
   16d18:	mov	r5, #0
   16d1c:	beq	16c2c <__assert_fail@plt+0x56cc>
   16d20:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16d24:	b	16cf8 <__assert_fail@plt+0x5798>
   16d28:	mov	r9, #1
   16d2c:	b	169b0 <__assert_fail@plt+0x5450>
   16d30:	mov	r0, #0
   16d34:	str	r0, [fp, #-36]	; 0xffffffdc
   16d38:	str	r0, [fp, #-40]	; 0xffffffd8
   16d3c:	cmn	lr, #1
   16d40:	bne	16d54 <__assert_fail@plt+0x57f4>
   16d44:	mov	r0, ip
   16d48:	bl	113e0 <strlen@plt>
   16d4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16d50:	mov	lr, r0
   16d54:	add	r0, ip, r6
   16d58:	str	r0, [sp, #20]
   16d5c:	mov	r9, #1
   16d60:	mov	r7, #0
   16d64:	sub	r4, fp, #40	; 0x28
   16d68:	str	lr, [sp, #28]
   16d6c:	str	r7, [sp, #44]	; 0x2c
   16d70:	add	r7, r7, r6
   16d74:	add	r1, ip, r7
   16d78:	sub	r2, lr, r7
   16d7c:	sub	r0, fp, #44	; 0x2c
   16d80:	mov	r3, r4
   16d84:	bl	19bc4 <__assert_fail@plt+0x8664>
   16d88:	cmp	r0, #0
   16d8c:	beq	1724c <__assert_fail@plt+0x5cec>
   16d90:	cmn	r0, #1
   16d94:	beq	1720c <__assert_fail@plt+0x5cac>
   16d98:	cmn	r0, #2
   16d9c:	ldr	lr, [sp, #28]
   16da0:	beq	17214 <__assert_fail@plt+0x5cb4>
   16da4:	cmp	r0, #2
   16da8:	mov	r1, #0
   16dac:	movwcc	r1, #1
   16db0:	ldr	r2, [sp, #60]	; 0x3c
   16db4:	eor	r2, r2, #1
   16db8:	orrs	r1, r2, r1
   16dbc:	ldr	r4, [sp, #24]
   16dc0:	bne	16e80 <__assert_fail@plt+0x5920>
   16dc4:	ldr	r1, [sp, #44]	; 0x2c
   16dc8:	ldr	r2, [sp, #20]
   16dcc:	add	r1, r2, r1
   16dd0:	mov	r2, #1
   16dd4:	ldrb	r3, [r1, r2]
   16dd8:	sub	r3, r3, #91	; 0x5b
   16ddc:	cmp	r3, #33	; 0x21
   16de0:	bhi	16e74 <__assert_fail@plt+0x5914>
   16de4:	add	r7, pc, #0
   16de8:	ldr	pc, [r7, r3, lsl #2]
   16dec:	andeq	r7, r1, r4, lsr r3
   16df0:	andeq	r7, r1, r4, lsr r3
   16df4:	andeq	r6, r1, r4, ror lr
   16df8:	andeq	r7, r1, r4, lsr r3
   16dfc:	andeq	r6, r1, r4, ror lr
   16e00:	andeq	r7, r1, r4, lsr r3
   16e04:	andeq	r6, r1, r4, ror lr
   16e08:	andeq	r6, r1, r4, ror lr
   16e0c:	andeq	r6, r1, r4, ror lr
   16e10:	andeq	r6, r1, r4, ror lr
   16e14:	andeq	r6, r1, r4, ror lr
   16e18:	andeq	r6, r1, r4, ror lr
   16e1c:	andeq	r6, r1, r4, ror lr
   16e20:	andeq	r6, r1, r4, ror lr
   16e24:	andeq	r6, r1, r4, ror lr
   16e28:	andeq	r6, r1, r4, ror lr
   16e2c:	andeq	r6, r1, r4, ror lr
   16e30:	andeq	r6, r1, r4, ror lr
   16e34:	andeq	r6, r1, r4, ror lr
   16e38:	andeq	r6, r1, r4, ror lr
   16e3c:	andeq	r6, r1, r4, ror lr
   16e40:	andeq	r6, r1, r4, ror lr
   16e44:	andeq	r6, r1, r4, ror lr
   16e48:	andeq	r6, r1, r4, ror lr
   16e4c:	andeq	r6, r1, r4, ror lr
   16e50:	andeq	r6, r1, r4, ror lr
   16e54:	andeq	r6, r1, r4, ror lr
   16e58:	andeq	r6, r1, r4, ror lr
   16e5c:	andeq	r6, r1, r4, ror lr
   16e60:	andeq	r6, r1, r4, ror lr
   16e64:	andeq	r6, r1, r4, ror lr
   16e68:	andeq	r6, r1, r4, ror lr
   16e6c:	andeq	r6, r1, r4, ror lr
   16e70:	andeq	r7, r1, r4, lsr r3
   16e74:	add	r2, r2, #1
   16e78:	cmp	r2, r0
   16e7c:	bcc	16dd4 <__assert_fail@plt+0x5874>
   16e80:	ldr	r7, [sp, #44]	; 0x2c
   16e84:	add	r7, r0, r7
   16e88:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16e8c:	bl	11308 <iswprint@plt>
   16e90:	cmp	r0, #0
   16e94:	movwne	r0, #1
   16e98:	and	r9, r9, r0
   16e9c:	sub	r4, fp, #40	; 0x28
   16ea0:	mov	r0, r4
   16ea4:	bl	112b4 <mbsinit@plt>
   16ea8:	ldr	lr, [sp, #28]
   16eac:	cmp	r0, #0
   16eb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16eb4:	beq	16d6c <__assert_fail@plt+0x580c>
   16eb8:	b	17254 <__assert_fail@plt+0x5cf4>
   16ebc:	ldr	r0, [sp, #32]
   16ec0:	cmp	r0, #0
   16ec4:	beq	16f5c <__assert_fail@plt+0x59fc>
   16ec8:	add	r0, r6, #2
   16ecc:	cmp	r0, lr
   16ed0:	bcs	16f5c <__assert_fail@plt+0x59fc>
   16ed4:	add	r1, ip, r6
   16ed8:	ldrb	r1, [r1, #1]
   16edc:	cmp	r1, #63	; 0x3f
   16ee0:	bne	16f5c <__assert_fail@plt+0x59fc>
   16ee4:	ldrb	r9, [ip, r0]
   16ee8:	sub	r2, r9, #33	; 0x21
   16eec:	cmp	r2, #29
   16ef0:	bhi	16f5c <__assert_fail@plt+0x59fc>
   16ef4:	mov	r3, #1
   16ef8:	movw	r1, #20929	; 0x51c1
   16efc:	movt	r1, #14336	; 0x3800
   16f00:	tst	r1, r3, lsl r2
   16f04:	beq	16f5c <__assert_fail@plt+0x59fc>
   16f08:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16f0c:	tst	r1, #1
   16f10:	bne	1733c <__assert_fail@plt+0x5ddc>
   16f14:	cmp	r8, r4
   16f18:	movcc	r1, #63	; 0x3f
   16f1c:	strbcc	r1, [r7, r8]
   16f20:	add	r2, r8, #1
   16f24:	cmp	r2, r4
   16f28:	movcc	r1, #34	; 0x22
   16f2c:	strbcc	r1, [r7, r2]
   16f30:	add	r2, r8, #2
   16f34:	cmp	r2, r4
   16f38:	movcc	r1, #34	; 0x22
   16f3c:	strbcc	r1, [r7, r2]
   16f40:	add	r2, r8, #3
   16f44:	cmp	r2, r4
   16f48:	movcc	r1, #63	; 0x3f
   16f4c:	strbcc	r1, [r7, r2]
   16f50:	add	r8, r8, #4
   16f54:	mov	r6, r0
   16f58:	mov	r5, r9
   16f5c:	mov	r9, #0
   16f60:	b	169b0 <__assert_fail@plt+0x5450>
   16f64:	add	r1, r2, r6
   16f68:	str	r1, [sp, #44]	; 0x2c
   16f6c:	add	r1, r6, #1
   16f70:	mov	r3, #0
   16f74:	ldr	lr, [sp, #28]
   16f78:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16f7c:	tst	r0, #1
   16f80:	bne	17074 <__assert_fail@plt+0x5b14>
   16f84:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16f88:	tst	r2, #1
   16f8c:	bne	1733c <__assert_fail@plt+0x5ddc>
   16f90:	cmp	r6, #2
   16f94:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16f98:	movwne	r3, #1
   16f9c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16fa0:	orr	r3, r3, r2
   16fa4:	tst	r3, #1
   16fa8:	bne	16fe4 <__assert_fail@plt+0x5a84>
   16fac:	cmp	r8, r4
   16fb0:	movcc	r2, #39	; 0x27
   16fb4:	strbcc	r2, [r7, r8]
   16fb8:	add	r3, r8, #1
   16fbc:	cmp	r3, r4
   16fc0:	movcc	r2, #36	; 0x24
   16fc4:	strbcc	r2, [r7, r3]
   16fc8:	add	r3, r8, #2
   16fcc:	cmp	r3, r4
   16fd0:	movcc	r2, #39	; 0x27
   16fd4:	strbcc	r2, [r7, r3]
   16fd8:	add	r8, r8, #3
   16fdc:	mov	r2, #1
   16fe0:	str	r2, [fp, #-56]	; 0xffffffc8
   16fe4:	cmp	r8, r4
   16fe8:	movcc	r2, #92	; 0x5c
   16fec:	strbcc	r2, [r7, r8]
   16ff0:	add	r3, r8, #1
   16ff4:	cmp	r3, r4
   16ff8:	bcs	17018 <__assert_fail@plt+0x5ab8>
   16ffc:	and	r7, r5, #192	; 0xc0
   17000:	mov	r2, #48	; 0x30
   17004:	orr	r7, r2, r7, lsr #6
   17008:	ldr	r6, [sp, #80]	; 0x50
   1700c:	strb	r7, [r6, r3]
   17010:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17014:	ldr	r7, [sp, #80]	; 0x50
   17018:	add	r3, r8, #2
   1701c:	cmp	r3, r4
   17020:	bcs	17040 <__assert_fail@plt+0x5ae0>
   17024:	lsr	r7, r5, #3
   17028:	mov	r2, #6
   1702c:	bfi	r7, r2, #3, #29
   17030:	ldr	r6, [sp, #80]	; 0x50
   17034:	strb	r7, [r6, r3]
   17038:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1703c:	ldr	r7, [sp, #80]	; 0x50
   17040:	mov	r2, #6
   17044:	bfi	r5, r2, #3, #29
   17048:	add	r8, r8, #3
   1704c:	mov	r3, #1
   17050:	b	17098 <__assert_fail@plt+0x5b38>
   17054:	ldr	r7, [sp, #80]	; 0x50
   17058:	cmp	r8, r4
   1705c:	strbcc	r5, [r7, r8]
   17060:	ldrb	r5, [ip, r1]
   17064:	add	r1, r1, #1
   17068:	add	r8, r8, #1
   1706c:	tst	r0, #1
   17070:	beq	16f84 <__assert_fail@plt+0x5a24>
   17074:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17078:	tst	r2, #1
   1707c:	beq	17090 <__assert_fail@plt+0x5b30>
   17080:	cmp	r8, r4
   17084:	movcc	r2, #92	; 0x5c
   17088:	strbcc	r2, [r7, r8]
   1708c:	add	r8, r8, #1
   17090:	mov	r2, #0
   17094:	str	r2, [fp, #-52]	; 0xffffffcc
   17098:	and	sl, r3, #1
   1709c:	ldr	r2, [sp, #44]	; 0x2c
   170a0:	cmp	r2, r1
   170a4:	bls	171b0 <__assert_fail@plt+0x5c50>
   170a8:	cmp	sl, #0
   170ac:	movwne	sl, #1
   170b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   170b4:	mvn	r7, r2
   170b8:	orr	r7, r7, sl
   170bc:	tst	r7, #1
   170c0:	bne	17054 <__assert_fail@plt+0x5af4>
   170c4:	cmp	r8, r4
   170c8:	ldrcc	r7, [sp, #80]	; 0x50
   170cc:	movcc	r2, #39	; 0x27
   170d0:	strbcc	r2, [r7, r8]
   170d4:	add	r7, r8, #1
   170d8:	cmp	r7, r4
   170dc:	ldrcc	r6, [sp, #80]	; 0x50
   170e0:	movcc	r2, #39	; 0x27
   170e4:	strbcc	r2, [r6, r7]
   170e8:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   170ec:	add	r8, r8, #2
   170f0:	mov	r2, #0
   170f4:	str	r2, [fp, #-56]	; 0xffffffc8
   170f8:	b	17054 <__assert_fail@plt+0x5af4>
   170fc:	cmp	r8, r4
   17100:	movcc	r0, #39	; 0x27
   17104:	strbcc	r0, [r7, r8]
   17108:	add	r0, r8, #1
   1710c:	cmp	r0, r4
   17110:	movcc	r1, #36	; 0x24
   17114:	strbcc	r1, [r7, r0]
   17118:	add	r0, r8, #2
   1711c:	cmp	r0, r4
   17120:	movcc	r1, #39	; 0x27
   17124:	strbcc	r1, [r7, r0]
   17128:	add	r0, r8, #3
   1712c:	mov	r2, #1
   17130:	cmp	r0, r4
   17134:	movcc	r1, #92	; 0x5c
   17138:	strbcc	r1, [r7, r0]
   1713c:	str	r2, [fp, #-56]	; 0xffffffc8
   17140:	add	r8, r0, #1
   17144:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17148:	cmp	r1, #2
   1714c:	beq	171a0 <__assert_fail@plt+0x5c40>
   17150:	add	r1, r6, #1
   17154:	mov	r9, #0
   17158:	mov	sl, #1
   1715c:	mov	r5, #48	; 0x30
   17160:	cmp	r1, lr
   17164:	bcs	169b0 <__assert_fail@plt+0x5450>
   17168:	ldrb	r1, [ip, r1]
   1716c:	sub	r1, r1, #48	; 0x30
   17170:	uxtb	r1, r1
   17174:	cmp	r1, #9
   17178:	bhi	169b0 <__assert_fail@plt+0x5450>
   1717c:	cmp	r8, r4
   17180:	movcc	r1, #48	; 0x30
   17184:	strbcc	r1, [r7, r8]
   17188:	add	r1, r0, #2
   1718c:	cmp	r1, r4
   17190:	movcc	r2, #48	; 0x30
   17194:	strbcc	r2, [r7, r1]
   17198:	add	r8, r0, #3
   1719c:	b	169b0 <__assert_fail@plt+0x5450>
   171a0:	mov	r0, #48	; 0x30
   171a4:	mov	sl, #1
   171a8:	mov	r9, #0
   171ac:	b	16c5c <__assert_fail@plt+0x56fc>
   171b0:	sub	r6, r1, #1
   171b4:	cmp	sl, #0
   171b8:	movwne	sl, #1
   171bc:	mov	r0, r5
   171c0:	cmp	sl, #0
   171c4:	bne	17204 <__assert_fail@plt+0x5ca4>
   171c8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   171cc:	tst	r1, #1
   171d0:	beq	17204 <__assert_fail@plt+0x5ca4>
   171d4:	cmp	r8, r4
   171d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   171dc:	movcc	r1, #39	; 0x27
   171e0:	strbcc	r1, [r7, r8]
   171e4:	add	r1, r8, #1
   171e8:	cmp	r1, r4
   171ec:	movcc	r2, #39	; 0x27
   171f0:	strbcc	r2, [r7, r1]
   171f4:	add	r8, r8, #2
   171f8:	mov	r1, #0
   171fc:	str	r1, [fp, #-56]	; 0xffffffc8
   17200:	b	16ce8 <__assert_fail@plt+0x5788>
   17204:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17208:	b	16ce8 <__assert_fail@plt+0x5788>
   1720c:	mov	r9, #0
   17210:	b	1724c <__assert_fail@plt+0x5cec>
   17214:	mov	r9, #0
   17218:	cmp	r7, lr
   1721c:	bcs	1724c <__assert_fail@plt+0x5cec>
   17220:	ldr	ip, [fp, #-84]	; 0xffffffac
   17224:	ldr	r7, [sp, #44]	; 0x2c
   17228:	ldr	r0, [sp, #20]
   1722c:	ldrb	r0, [r0, r7]
   17230:	cmp	r0, #0
   17234:	beq	17254 <__assert_fail@plt+0x5cf4>
   17238:	add	r7, r7, #1
   1723c:	add	r0, r6, r7
   17240:	cmp	r0, lr
   17244:	bcc	17228 <__assert_fail@plt+0x5cc8>
   17248:	b	17254 <__assert_fail@plt+0x5cf4>
   1724c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17250:	ldr	r7, [sp, #44]	; 0x2c
   17254:	mov	r1, r7
   17258:	ldr	r7, [sp, #80]	; 0x50
   1725c:	b	16b84 <__assert_fail@plt+0x5624>
   17260:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17264:	eor	r0, r1, #2
   17268:	orr	r0, r0, r8
   1726c:	clz	r0, r0
   17270:	lsr	r0, r0, #5
   17274:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17278:	tst	r2, r0
   1727c:	bne	1733c <__assert_fail@plt+0x5ddc>
   17280:	cmp	r1, #2
   17284:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17288:	movwne	r0, #1
   1728c:	orr	r0, r2, r0
   17290:	tst	r0, #1
   17294:	ldreq	r0, [sp, #56]	; 0x38
   17298:	eoreq	r0, r0, #1
   1729c:	tsteq	r0, #1
   172a0:	bne	172d4 <__assert_fail@plt+0x5d74>
   172a4:	mov	r9, lr
   172a8:	tst	r5, #1
   172ac:	bne	173a4 <__assert_fail@plt+0x5e44>
   172b0:	ldr	r0, [sp, #72]	; 0x48
   172b4:	cmp	r0, #0
   172b8:	beq	172d4 <__assert_fail@plt+0x5d74>
   172bc:	mov	r5, #0
   172c0:	cmp	r4, #0
   172c4:	ldr	r0, [sp, #84]	; 0x54
   172c8:	mov	sl, r2
   172cc:	ldr	r6, [sp, #72]	; 0x48
   172d0:	beq	1646c <__assert_fail@plt+0x4f0c>
   172d4:	ldr	r1, [sp, #92]	; 0x5c
   172d8:	clz	r0, r1
   172dc:	lsr	r0, r0, #5
   172e0:	orr	r0, r0, r2
   172e4:	tst	r0, #1
   172e8:	bne	17314 <__assert_fail@plt+0x5db4>
   172ec:	ldrb	r0, [r1]
   172f0:	cmp	r0, #0
   172f4:	beq	17314 <__assert_fail@plt+0x5db4>
   172f8:	add	r1, r1, #1
   172fc:	cmp	r8, r4
   17300:	strbcc	r0, [r7, r8]
   17304:	add	r8, r8, #1
   17308:	ldrb	r0, [r1], #1
   1730c:	cmp	r0, #0
   17310:	bne	172fc <__assert_fail@plt+0x5d9c>
   17314:	cmp	r8, r4
   17318:	movcc	r0, #0
   1731c:	strbcc	r0, [r7, r8]
   17320:	b	17398 <__assert_fail@plt+0x5e38>
   17324:	ldr	ip, [fp, #-84]	; 0xffffffac
   17328:	mov	lr, r4
   1732c:	mov	r4, r5
   17330:	b	1733c <__assert_fail@plt+0x5ddc>
   17334:	ldr	r7, [sp, #80]	; 0x50
   17338:	ldr	ip, [fp, #-84]	; 0xffffffac
   1733c:	mov	r0, #0
   17340:	ldr	r1, [fp, #12]
   17344:	bic	r1, r1, #2
   17348:	ldr	r2, [sp, #84]	; 0x54
   1734c:	tst	r2, #1
   17350:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17354:	mov	r2, r3
   17358:	movwne	r2, #4
   1735c:	cmp	r3, #2
   17360:	movne	r2, r3
   17364:	str	r2, [sp]
   17368:	str	r1, [sp, #4]
   1736c:	str	r0, [sp, #8]
   17370:	ldr	r0, [sp, #68]	; 0x44
   17374:	str	r0, [sp, #12]
   17378:	ldr	r0, [sp, #76]	; 0x4c
   1737c:	str	r0, [sp, #16]
   17380:	mov	r0, r7
   17384:	mov	r1, r4
   17388:	mov	r2, ip
   1738c:	mov	r3, lr
   17390:	bl	163e4 <__assert_fail@plt+0x4e84>
   17394:	mov	r8, r0
   17398:	mov	r0, r8
   1739c:	sub	sp, fp, #28
   173a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173a4:	mov	r0, #5
   173a8:	str	r0, [sp]
   173ac:	ldr	r0, [fp, #12]
   173b0:	str	r0, [sp, #4]
   173b4:	ldr	r0, [fp, #16]
   173b8:	str	r0, [sp, #8]
   173bc:	ldr	r0, [sp, #68]	; 0x44
   173c0:	str	r0, [sp, #12]
   173c4:	ldr	r0, [sp, #76]	; 0x4c
   173c8:	str	r0, [sp, #16]
   173cc:	mov	r0, r7
   173d0:	ldr	r1, [sp, #72]	; 0x48
   173d4:	ldr	r2, [fp, #-84]	; 0xffffffac
   173d8:	mov	r3, r9
   173dc:	b	17390 <__assert_fail@plt+0x5e30>
   173e0:	bl	11518 <abort@plt>
   173e4:	mov	r3, r2
   173e8:	mov	r2, #0
   173ec:	b	173f0 <__assert_fail@plt+0x5e90>
   173f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173f4:	add	fp, sp, #28
   173f8:	sub	sp, sp, #36	; 0x24
   173fc:	mov	r4, r2
   17400:	str	r2, [sp, #24]
   17404:	mov	r5, r1
   17408:	mov	r6, r0
   1740c:	str	r0, [sp, #20]
   17410:	movw	r8, #49608	; 0xc1c8
   17414:	movt	r8, #2
   17418:	cmp	r3, #0
   1741c:	movne	r8, r3
   17420:	bl	11410 <__errno_location@plt>
   17424:	str	r0, [sp, #28]
   17428:	ldm	r8, {r3, r9}
   1742c:	ldr	r1, [r8, #40]	; 0x28
   17430:	ldr	r2, [r8, #44]	; 0x2c
   17434:	ldr	r7, [r0]
   17438:	str	r7, [sp, #32]
   1743c:	add	sl, r8, #8
   17440:	cmp	r4, #0
   17444:	orreq	r9, r9, #1
   17448:	stm	sp, {r3, r9, sl}
   1744c:	str	r1, [sp, #12]
   17450:	str	r2, [sp, #16]
   17454:	mov	r0, #0
   17458:	mov	r1, #0
   1745c:	mov	r2, r6
   17460:	mov	r3, r5
   17464:	mov	r7, r5
   17468:	bl	163e4 <__assert_fail@plt+0x4e84>
   1746c:	mov	r5, r0
   17470:	add	r4, r0, #1
   17474:	mov	r0, r4
   17478:	bl	1873c <__assert_fail@plt+0x71dc>
   1747c:	mov	r6, r0
   17480:	ldr	r0, [r8]
   17484:	ldr	r1, [r8, #40]	; 0x28
   17488:	ldr	r2, [r8, #44]	; 0x2c
   1748c:	stm	sp, {r0, r9, sl}
   17490:	str	r1, [sp, #12]
   17494:	str	r2, [sp, #16]
   17498:	mov	r0, r6
   1749c:	mov	r1, r4
   174a0:	ldr	r2, [sp, #20]
   174a4:	mov	r3, r7
   174a8:	bl	163e4 <__assert_fail@plt+0x4e84>
   174ac:	ldr	r0, [sp, #24]
   174b0:	ldr	r1, [sp, #32]
   174b4:	ldr	r2, [sp, #28]
   174b8:	str	r1, [r2]
   174bc:	cmp	r0, #0
   174c0:	strne	r5, [r0]
   174c4:	mov	r0, r6
   174c8:	sub	sp, fp, #28
   174cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174d4:	add	fp, sp, #24
   174d8:	movw	r8, #49472	; 0xc140
   174dc:	movt	r8, #2
   174e0:	ldr	r4, [r8]
   174e4:	movw	r5, #49476	; 0xc144
   174e8:	movt	r5, #2
   174ec:	ldr	r0, [r5]
   174f0:	cmp	r0, #2
   174f4:	blt	17520 <__assert_fail@plt+0x5fc0>
   174f8:	add	r7, r4, #12
   174fc:	mov	r6, #0
   17500:	ldr	r0, [r7, r6, lsl #3]
   17504:	bl	12fd4 <__assert_fail@plt+0x1a74>
   17508:	add	r0, r6, #1
   1750c:	ldr	r1, [r5]
   17510:	add	r2, r6, #2
   17514:	cmp	r2, r1
   17518:	mov	r6, r0
   1751c:	blt	17500 <__assert_fail@plt+0x5fa0>
   17520:	ldr	r0, [r4, #4]
   17524:	movw	r7, #49656	; 0xc1f8
   17528:	movt	r7, #2
   1752c:	cmp	r0, r7
   17530:	beq	17548 <__assert_fail@plt+0x5fe8>
   17534:	bl	12fd4 <__assert_fail@plt+0x1a74>
   17538:	movw	r0, #49480	; 0xc148
   1753c:	movt	r0, #2
   17540:	mov	r6, #256	; 0x100
   17544:	strd	r6, [r0]
   17548:	movw	r6, #49480	; 0xc148
   1754c:	movt	r6, #2
   17550:	cmp	r4, r6
   17554:	beq	17564 <__assert_fail@plt+0x6004>
   17558:	mov	r0, r4
   1755c:	bl	12fd4 <__assert_fail@plt+0x1a74>
   17560:	str	r6, [r8]
   17564:	mov	r0, #1
   17568:	str	r0, [r5]
   1756c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17570:	movw	r3, #49608	; 0xc1c8
   17574:	movt	r3, #2
   17578:	mvn	r2, #0
   1757c:	b	17580 <__assert_fail@plt+0x6020>
   17580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17584:	add	fp, sp, #28
   17588:	sub	sp, sp, #44	; 0x2c
   1758c:	mov	r7, r3
   17590:	str	r2, [sp, #36]	; 0x24
   17594:	str	r1, [sp, #32]
   17598:	mov	r5, r0
   1759c:	bl	11410 <__errno_location@plt>
   175a0:	cmp	r5, #0
   175a4:	blt	17710 <__assert_fail@plt+0x61b0>
   175a8:	cmn	r5, #-2147483647	; 0x80000001
   175ac:	beq	17710 <__assert_fail@plt+0x61b0>
   175b0:	movw	r4, #49472	; 0xc140
   175b4:	movt	r4, #2
   175b8:	ldr	r6, [r4]
   175bc:	str	r0, [sp, #28]
   175c0:	ldr	r0, [r0]
   175c4:	str	r0, [sp, #24]
   175c8:	movw	r8, #49476	; 0xc144
   175cc:	movt	r8, #2
   175d0:	ldr	r1, [r8]
   175d4:	cmp	r1, r5
   175d8:	ble	175e4 <__assert_fail@plt+0x6084>
   175dc:	mov	sl, r6
   175e0:	b	1764c <__assert_fail@plt+0x60ec>
   175e4:	str	r1, [fp, #-32]	; 0xffffffe0
   175e8:	mov	r0, #8
   175ec:	str	r0, [sp]
   175f0:	movw	r9, #49480	; 0xc148
   175f4:	movt	r9, #2
   175f8:	subs	r0, r6, r9
   175fc:	movne	r0, r6
   17600:	add	r2, r5, #1
   17604:	sub	r2, r2, r1
   17608:	sub	r1, fp, #32
   1760c:	mvn	r3, #-2147483648	; 0x80000000
   17610:	bl	18824 <__assert_fail@plt+0x72c4>
   17614:	mov	sl, r0
   17618:	str	r0, [r4]
   1761c:	cmp	r6, r9
   17620:	ldrdeq	r0, [r9]
   17624:	stmeq	sl, {r0, r1}
   17628:	ldr	r1, [r8]
   1762c:	add	r0, sl, r1, lsl #3
   17630:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17634:	sub	r1, r2, r1
   17638:	lsl	r2, r1, #3
   1763c:	mov	r1, #0
   17640:	bl	11428 <memset@plt>
   17644:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17648:	str	r0, [r8]
   1764c:	mov	r9, sl
   17650:	ldr	r6, [r9, r5, lsl #3]!
   17654:	ldr	r4, [r9, #4]!
   17658:	ldm	r7, {r0, r1}
   1765c:	ldr	r2, [r7, #40]	; 0x28
   17660:	ldr	r3, [r7, #44]	; 0x2c
   17664:	orr	r8, r1, #1
   17668:	add	r1, r7, #8
   1766c:	stm	sp, {r0, r8}
   17670:	str	r1, [sp, #20]
   17674:	add	r0, sp, #8
   17678:	stm	r0, {r1, r2, r3}
   1767c:	mov	r0, r4
   17680:	mov	r1, r6
   17684:	ldr	r2, [sp, #32]
   17688:	ldr	r3, [sp, #36]	; 0x24
   1768c:	bl	163e4 <__assert_fail@plt+0x4e84>
   17690:	cmp	r6, r0
   17694:	bhi	176f8 <__assert_fail@plt+0x6198>
   17698:	add	r6, r0, #1
   1769c:	str	r6, [sl, r5, lsl #3]
   176a0:	movw	r0, #49656	; 0xc1f8
   176a4:	movt	r0, #2
   176a8:	cmp	r4, r0
   176ac:	beq	176b8 <__assert_fail@plt+0x6158>
   176b0:	mov	r0, r4
   176b4:	bl	12fd4 <__assert_fail@plt+0x1a74>
   176b8:	mov	r0, r6
   176bc:	bl	1873c <__assert_fail@plt+0x71dc>
   176c0:	mov	r4, r0
   176c4:	str	r0, [r9]
   176c8:	ldr	r0, [r7]
   176cc:	ldr	r1, [r7, #40]	; 0x28
   176d0:	ldr	r2, [r7, #44]	; 0x2c
   176d4:	stm	sp, {r0, r8}
   176d8:	ldr	r0, [sp, #20]
   176dc:	add	r3, sp, #8
   176e0:	stm	r3, {r0, r1, r2}
   176e4:	mov	r0, r4
   176e8:	mov	r1, r6
   176ec:	ldr	r2, [sp, #32]
   176f0:	ldr	r3, [sp, #36]	; 0x24
   176f4:	bl	163e4 <__assert_fail@plt+0x4e84>
   176f8:	ldr	r0, [sp, #28]
   176fc:	ldr	r1, [sp, #24]
   17700:	str	r1, [r0]
   17704:	mov	r0, r4
   17708:	sub	sp, fp, #28
   1770c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17710:	bl	11518 <abort@plt>
   17714:	movw	r3, #49608	; 0xc1c8
   17718:	movt	r3, #2
   1771c:	b	17580 <__assert_fail@plt+0x6020>
   17720:	mov	r1, r0
   17724:	mov	r0, #0
   17728:	b	17570 <__assert_fail@plt+0x6010>
   1772c:	mov	r2, r1
   17730:	mov	r1, r0
   17734:	mov	r0, #0
   17738:	b	17714 <__assert_fail@plt+0x61b4>
   1773c:	push	{r4, r5, r6, sl, fp, lr}
   17740:	add	fp, sp, #16
   17744:	sub	sp, sp, #48	; 0x30
   17748:	mov	r4, r2
   1774c:	mov	r5, r0
   17750:	mov	r6, sp
   17754:	mov	r0, r6
   17758:	bl	17778 <__assert_fail@plt+0x6218>
   1775c:	mov	r0, r5
   17760:	mov	r1, r4
   17764:	mvn	r2, #0
   17768:	mov	r3, r6
   1776c:	bl	17580 <__assert_fail@plt+0x6020>
   17770:	sub	sp, fp, #16
   17774:	pop	{r4, r5, r6, sl, fp, pc}
   17778:	vmov.i32	q8, #0	; 0x00000000
   1777c:	mov	r2, #32
   17780:	mov	r3, r0
   17784:	vst1.32	{d16-d17}, [r3], r2
   17788:	vst1.32	{d16-d17}, [r3]
   1778c:	add	r2, r0, #16
   17790:	vst1.32	{d16-d17}, [r2]
   17794:	cmp	r1, #10
   17798:	strne	r1, [r0]
   1779c:	bxne	lr
   177a0:	push	{fp, lr}
   177a4:	mov	fp, sp
   177a8:	bl	11518 <abort@plt>
   177ac:	push	{r4, r5, r6, r7, fp, lr}
   177b0:	add	fp, sp, #16
   177b4:	sub	sp, sp, #48	; 0x30
   177b8:	mov	r4, r3
   177bc:	mov	r5, r2
   177c0:	mov	r6, r0
   177c4:	mov	r7, sp
   177c8:	mov	r0, r7
   177cc:	bl	17778 <__assert_fail@plt+0x6218>
   177d0:	mov	r0, r6
   177d4:	mov	r1, r5
   177d8:	mov	r2, r4
   177dc:	mov	r3, r7
   177e0:	bl	17580 <__assert_fail@plt+0x6020>
   177e4:	sub	sp, fp, #16
   177e8:	pop	{r4, r5, r6, r7, fp, pc}
   177ec:	mov	r2, r1
   177f0:	mov	r1, r0
   177f4:	mov	r0, #0
   177f8:	b	1773c <__assert_fail@plt+0x61dc>
   177fc:	mov	r3, r2
   17800:	mov	r2, r1
   17804:	mov	r1, r0
   17808:	mov	r0, #0
   1780c:	b	177ac <__assert_fail@plt+0x624c>
   17810:	push	{r4, r5, r6, sl, fp, lr}
   17814:	add	fp, sp, #16
   17818:	sub	sp, sp, #48	; 0x30
   1781c:	mov	r4, r1
   17820:	mov	r5, r0
   17824:	mov	r0, #32
   17828:	movw	r1, #49608	; 0xc1c8
   1782c:	movt	r1, #2
   17830:	add	r3, r1, #16
   17834:	vld1.64	{d16-d17}, [r1], r0
   17838:	mov	r6, sp
   1783c:	vld1.64	{d18-d19}, [r3]
   17840:	add	r3, r6, #16
   17844:	vld1.64	{d20-d21}, [r1]
   17848:	vst1.64	{d18-d19}, [r3]
   1784c:	mov	r1, r6
   17850:	vst1.64	{d16-d17}, [r1], r0
   17854:	vst1.64	{d20-d21}, [r1]
   17858:	mov	r0, r6
   1785c:	mov	r1, r2
   17860:	mov	r2, #1
   17864:	bl	162d8 <__assert_fail@plt+0x4d78>
   17868:	mov	r0, #0
   1786c:	mov	r1, r5
   17870:	mov	r2, r4
   17874:	mov	r3, r6
   17878:	bl	17580 <__assert_fail@plt+0x6020>
   1787c:	sub	sp, fp, #16
   17880:	pop	{r4, r5, r6, sl, fp, pc}
   17884:	mov	r2, r1
   17888:	mvn	r1, #0
   1788c:	b	17810 <__assert_fail@plt+0x62b0>
   17890:	mov	r1, #58	; 0x3a
   17894:	b	17884 <__assert_fail@plt+0x6324>
   17898:	mov	r2, #58	; 0x3a
   1789c:	b	17810 <__assert_fail@plt+0x62b0>
   178a0:	push	{r4, r5, r6, sl, fp, lr}
   178a4:	add	fp, sp, #16
   178a8:	sub	sp, sp, #48	; 0x30
   178ac:	mov	r4, r2
   178b0:	mov	r5, r0
   178b4:	mov	r6, sp
   178b8:	mov	r0, r6
   178bc:	bl	17778 <__assert_fail@plt+0x6218>
   178c0:	mov	r0, r6
   178c4:	mov	r1, #58	; 0x3a
   178c8:	mov	r2, #1
   178cc:	bl	162d8 <__assert_fail@plt+0x4d78>
   178d0:	mov	r0, r5
   178d4:	mov	r1, r4
   178d8:	mvn	r2, #0
   178dc:	mov	r3, r6
   178e0:	bl	17580 <__assert_fail@plt+0x6020>
   178e4:	sub	sp, fp, #16
   178e8:	pop	{r4, r5, r6, sl, fp, pc}
   178ec:	push	{fp, lr}
   178f0:	mov	fp, sp
   178f4:	sub	sp, sp, #8
   178f8:	mvn	ip, #0
   178fc:	str	ip, [sp]
   17900:	bl	1790c <__assert_fail@plt+0x63ac>
   17904:	mov	sp, fp
   17908:	pop	{fp, pc}
   1790c:	push	{r4, r5, r6, r7, fp, lr}
   17910:	add	fp, sp, #16
   17914:	sub	sp, sp, #48	; 0x30
   17918:	mov	r7, r3
   1791c:	mov	r5, r0
   17920:	mov	r0, #32
   17924:	movw	r3, #49608	; 0xc1c8
   17928:	movt	r3, #2
   1792c:	add	r4, r3, #16
   17930:	vld1.64	{d16-d17}, [r3], r0
   17934:	mov	r6, sp
   17938:	vld1.64	{d18-d19}, [r4]
   1793c:	add	r4, r6, #16
   17940:	vld1.64	{d20-d21}, [r3]
   17944:	vst1.64	{d18-d19}, [r4]
   17948:	mov	r3, r6
   1794c:	vst1.64	{d16-d17}, [r3], r0
   17950:	vst1.64	{d20-d21}, [r3]
   17954:	mov	r0, r6
   17958:	bl	16330 <__assert_fail@plt+0x4dd0>
   1795c:	ldr	r2, [fp, #8]
   17960:	mov	r0, r5
   17964:	mov	r1, r7
   17968:	mov	r3, r6
   1796c:	bl	17580 <__assert_fail@plt+0x6020>
   17970:	sub	sp, fp, #16
   17974:	pop	{r4, r5, r6, r7, fp, pc}
   17978:	mov	r3, r2
   1797c:	mov	r2, r1
   17980:	mov	r1, r0
   17984:	mov	r0, #0
   17988:	b	178ec <__assert_fail@plt+0x638c>
   1798c:	push	{fp, lr}
   17990:	mov	fp, sp
   17994:	sub	sp, sp, #8
   17998:	mov	ip, r2
   1799c:	mov	r2, r1
   179a0:	mov	r1, r0
   179a4:	str	r3, [sp]
   179a8:	mov	r0, #0
   179ac:	mov	r3, ip
   179b0:	bl	1790c <__assert_fail@plt+0x63ac>
   179b4:	mov	sp, fp
   179b8:	pop	{fp, pc}
   179bc:	movw	r3, #49488	; 0xc150
   179c0:	movt	r3, #2
   179c4:	b	17580 <__assert_fail@plt+0x6020>
   179c8:	mov	r2, r1
   179cc:	mov	r1, r0
   179d0:	mov	r0, #0
   179d4:	b	179bc <__assert_fail@plt+0x645c>
   179d8:	mvn	r2, #0
   179dc:	b	179bc <__assert_fail@plt+0x645c>
   179e0:	mov	r1, r0
   179e4:	mov	r0, #0
   179e8:	b	179d8 <__assert_fail@plt+0x6478>
   179ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179f0:	add	fp, sp, #24
   179f4:	sub	sp, sp, #16
   179f8:	mov	r4, r1
   179fc:	mov	r5, r0
   17a00:	mov	r7, #0
   17a04:	mov	r0, #0
   17a08:	mov	r1, r5
   17a0c:	mov	r2, #5
   17a10:	bl	112d8 <dcgettext@plt>
   17a14:	cmp	r0, r5
   17a18:	beq	17a24 <__assert_fail@plt+0x64c4>
   17a1c:	sub	sp, fp, #24
   17a20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a24:	bl	19b8c <__assert_fail@plt+0x862c>
   17a28:	mov	r6, r0
   17a2c:	mov	r8, #56	; 0x38
   17a30:	mov	r0, #45	; 0x2d
   17a34:	stm	sp, {r0, r8}
   17a38:	str	r7, [sp, #8]
   17a3c:	str	r7, [sp, #12]
   17a40:	mov	r0, r6
   17a44:	mov	r1, #85	; 0x55
   17a48:	mov	r2, #84	; 0x54
   17a4c:	mov	r3, #70	; 0x46
   17a50:	bl	17ae8 <__assert_fail@plt+0x6588>
   17a54:	cmp	r0, #0
   17a58:	beq	17a74 <__assert_fail@plt+0x6514>
   17a5c:	ldrb	r1, [r5]
   17a60:	movw	r2, #45546	; 0xb1ea
   17a64:	movt	r2, #1
   17a68:	movw	r0, #45550	; 0xb1ee
   17a6c:	movt	r0, #1
   17a70:	b	17ab8 <__assert_fail@plt+0x6558>
   17a74:	mov	r0, #48	; 0x30
   17a78:	mov	r1, #51	; 0x33
   17a7c:	str	r8, [sp]
   17a80:	stmib	sp, {r0, r1}
   17a84:	str	r0, [sp, #12]
   17a88:	mov	r0, r6
   17a8c:	mov	r1, #71	; 0x47
   17a90:	mov	r2, #66	; 0x42
   17a94:	mov	r3, #49	; 0x31
   17a98:	bl	17ae8 <__assert_fail@plt+0x6588>
   17a9c:	cmp	r0, #0
   17aa0:	beq	17ac8 <__assert_fail@plt+0x6568>
   17aa4:	ldrb	r1, [r5]
   17aa8:	movw	r2, #45554	; 0xb1f2
   17aac:	movt	r2, #1
   17ab0:	movw	r0, #45558	; 0xb1f6
   17ab4:	movt	r0, #1
   17ab8:	cmp	r1, #96	; 0x60
   17abc:	moveq	r0, r2
   17ac0:	sub	sp, fp, #24
   17ac4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ac8:	movw	r1, #45540	; 0xb1e4
   17acc:	movt	r1, #1
   17ad0:	movw	r0, #45544	; 0xb1e8
   17ad4:	movt	r0, #1
   17ad8:	cmp	r4, #9
   17adc:	moveq	r0, r1
   17ae0:	sub	sp, fp, #24
   17ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ae8:	push	{r4, r5, r6, r7, fp, lr}
   17aec:	add	fp, sp, #16
   17af0:	sub	sp, sp, #16
   17af4:	mov	r4, r3
   17af8:	mov	r5, r2
   17afc:	mov	r7, r1
   17b00:	mov	r6, r0
   17b04:	mov	r0, r1
   17b08:	bl	19550 <__assert_fail@plt+0x7ff0>
   17b0c:	ldrb	r1, [r6]
   17b10:	cmp	r0, #0
   17b14:	andne	r1, r1, #223	; 0xdf
   17b18:	mov	r0, #0
   17b1c:	cmp	r1, r7
   17b20:	bne	17b60 <__assert_fail@plt+0x6600>
   17b24:	cmp	r7, #0
   17b28:	moveq	r0, #1
   17b2c:	subeq	sp, fp, #16
   17b30:	popeq	{r4, r5, r6, r7, fp, pc}
   17b34:	ldr	r0, [fp, #20]
   17b38:	ldr	r1, [fp, #16]
   17b3c:	ldr	r2, [fp, #12]
   17b40:	ldr	r3, [fp, #8]
   17b44:	str	r2, [sp]
   17b48:	str	r1, [sp, #4]
   17b4c:	str	r0, [sp, #8]
   17b50:	mov	r0, r6
   17b54:	mov	r1, r5
   17b58:	mov	r2, r4
   17b5c:	bl	17b68 <__assert_fail@plt+0x6608>
   17b60:	sub	sp, fp, #16
   17b64:	pop	{r4, r5, r6, r7, fp, pc}
   17b68:	push	{r4, r5, r6, r7, fp, lr}
   17b6c:	add	fp, sp, #16
   17b70:	sub	sp, sp, #8
   17b74:	mov	r4, r3
   17b78:	mov	r5, r2
   17b7c:	mov	r7, r1
   17b80:	mov	r6, r0
   17b84:	mov	r0, r1
   17b88:	bl	19550 <__assert_fail@plt+0x7ff0>
   17b8c:	ldrb	r1, [r6, #1]
   17b90:	cmp	r0, #0
   17b94:	andne	r1, r1, #223	; 0xdf
   17b98:	mov	r0, #0
   17b9c:	cmp	r1, r7
   17ba0:	bne	17bd8 <__assert_fail@plt+0x6678>
   17ba4:	cmp	r7, #0
   17ba8:	moveq	r0, #1
   17bac:	subeq	sp, fp, #16
   17bb0:	popeq	{r4, r5, r6, r7, fp, pc}
   17bb4:	ldr	r0, [fp, #16]
   17bb8:	ldr	r1, [fp, #12]
   17bbc:	ldr	r3, [fp, #8]
   17bc0:	str	r1, [sp]
   17bc4:	str	r0, [sp, #4]
   17bc8:	mov	r0, r6
   17bcc:	mov	r1, r5
   17bd0:	mov	r2, r4
   17bd4:	bl	17be0 <__assert_fail@plt+0x6680>
   17bd8:	sub	sp, fp, #16
   17bdc:	pop	{r4, r5, r6, r7, fp, pc}
   17be0:	push	{r4, r5, r6, r7, fp, lr}
   17be4:	add	fp, sp, #16
   17be8:	sub	sp, sp, #8
   17bec:	mov	r4, r3
   17bf0:	mov	r5, r2
   17bf4:	mov	r7, r1
   17bf8:	mov	r6, r0
   17bfc:	mov	r0, r1
   17c00:	bl	19550 <__assert_fail@plt+0x7ff0>
   17c04:	ldrb	r1, [r6, #2]
   17c08:	cmp	r0, #0
   17c0c:	andne	r1, r1, #223	; 0xdf
   17c10:	mov	r0, #0
   17c14:	cmp	r1, r7
   17c18:	bne	17c48 <__assert_fail@plt+0x66e8>
   17c1c:	cmp	r7, #0
   17c20:	moveq	r0, #1
   17c24:	subeq	sp, fp, #16
   17c28:	popeq	{r4, r5, r6, r7, fp, pc}
   17c2c:	ldr	r0, [fp, #12]
   17c30:	ldr	r3, [fp, #8]
   17c34:	str	r0, [sp]
   17c38:	mov	r0, r6
   17c3c:	mov	r1, r5
   17c40:	mov	r2, r4
   17c44:	bl	17c50 <__assert_fail@plt+0x66f0>
   17c48:	sub	sp, fp, #16
   17c4c:	pop	{r4, r5, r6, r7, fp, pc}
   17c50:	push	{r4, r5, r6, r7, fp, lr}
   17c54:	add	fp, sp, #16
   17c58:	mov	r4, r3
   17c5c:	mov	r5, r2
   17c60:	mov	r7, r1
   17c64:	mov	r6, r0
   17c68:	mov	r0, r1
   17c6c:	bl	19550 <__assert_fail@plt+0x7ff0>
   17c70:	ldrb	r1, [r6, #3]
   17c74:	ldr	r3, [fp, #8]
   17c78:	cmp	r0, #0
   17c7c:	andne	r1, r1, #223	; 0xdf
   17c80:	mov	r0, #0
   17c84:	cmp	r1, r7
   17c88:	popne	{r4, r5, r6, r7, fp, pc}
   17c8c:	cmp	r7, #0
   17c90:	beq	17ca8 <__assert_fail@plt+0x6748>
   17c94:	mov	r0, r6
   17c98:	mov	r1, r5
   17c9c:	mov	r2, r4
   17ca0:	pop	{r4, r5, r6, r7, fp, lr}
   17ca4:	b	17cb0 <__assert_fail@plt+0x6750>
   17ca8:	mov	r0, #1
   17cac:	pop	{r4, r5, r6, r7, fp, pc}
   17cb0:	push	{r4, r5, r6, r7, fp, lr}
   17cb4:	add	fp, sp, #16
   17cb8:	mov	r4, r3
   17cbc:	mov	r5, r2
   17cc0:	mov	r7, r1
   17cc4:	mov	r6, r0
   17cc8:	mov	r0, r1
   17ccc:	bl	19550 <__assert_fail@plt+0x7ff0>
   17cd0:	ldrb	r1, [r6, #4]
   17cd4:	cmp	r0, #0
   17cd8:	andne	r1, r1, #223	; 0xdf
   17cdc:	mov	r0, #0
   17ce0:	cmp	r1, r7
   17ce4:	popne	{r4, r5, r6, r7, fp, pc}
   17ce8:	cmp	r7, #0
   17cec:	beq	17d04 <__assert_fail@plt+0x67a4>
   17cf0:	mov	r0, r6
   17cf4:	mov	r1, r5
   17cf8:	mov	r2, r4
   17cfc:	pop	{r4, r5, r6, r7, fp, lr}
   17d00:	b	17d0c <__assert_fail@plt+0x67ac>
   17d04:	mov	r0, #1
   17d08:	pop	{r4, r5, r6, r7, fp, pc}
   17d0c:	push	{r4, r5, r6, sl, fp, lr}
   17d10:	add	fp, sp, #16
   17d14:	mov	r4, r2
   17d18:	mov	r6, r1
   17d1c:	mov	r5, r0
   17d20:	mov	r0, r1
   17d24:	bl	19550 <__assert_fail@plt+0x7ff0>
   17d28:	ldrb	r1, [r5, #5]
   17d2c:	cmp	r0, #0
   17d30:	andne	r1, r1, #223	; 0xdf
   17d34:	mov	r0, #0
   17d38:	cmp	r1, r6
   17d3c:	popne	{r4, r5, r6, sl, fp, pc}
   17d40:	cmp	r6, #0
   17d44:	beq	17d58 <__assert_fail@plt+0x67f8>
   17d48:	mov	r0, r5
   17d4c:	mov	r1, r4
   17d50:	pop	{r4, r5, r6, sl, fp, lr}
   17d54:	b	17d60 <__assert_fail@plt+0x6800>
   17d58:	mov	r0, #1
   17d5c:	pop	{r4, r5, r6, sl, fp, pc}
   17d60:	push	{r4, r5, fp, lr}
   17d64:	add	fp, sp, #8
   17d68:	mov	r5, r1
   17d6c:	mov	r4, r0
   17d70:	mov	r0, r1
   17d74:	bl	19550 <__assert_fail@plt+0x7ff0>
   17d78:	ldrb	r1, [r4, #6]
   17d7c:	cmp	r0, #0
   17d80:	andne	r1, r1, #223	; 0xdf
   17d84:	mov	r0, #0
   17d88:	cmp	r1, r5
   17d8c:	popne	{r4, r5, fp, pc}
   17d90:	cmp	r5, #0
   17d94:	beq	17da4 <__assert_fail@plt+0x6844>
   17d98:	mov	r0, r4
   17d9c:	pop	{r4, r5, fp, lr}
   17da0:	b	17dac <__assert_fail@plt+0x684c>
   17da4:	mov	r0, #1
   17da8:	pop	{r4, r5, fp, pc}
   17dac:	push	{r4, sl, fp, lr}
   17db0:	add	fp, sp, #8
   17db4:	mov	r4, r0
   17db8:	mov	r0, #0
   17dbc:	bl	19550 <__assert_fail@plt+0x7ff0>
   17dc0:	ldrb	r1, [r4, #7]
   17dc4:	cmp	r0, #0
   17dc8:	beq	17de0 <__assert_fail@plt+0x6880>
   17dcc:	tst	r1, #223	; 0xdf
   17dd0:	moveq	r0, #1
   17dd4:	popeq	{r4, sl, fp, pc}
   17dd8:	mov	r0, #0
   17ddc:	pop	{r4, sl, fp, pc}
   17de0:	cmp	r1, #0
   17de4:	moveq	r0, #1
   17de8:	popeq	{r4, sl, fp, pc}
   17dec:	mov	r0, #0
   17df0:	pop	{r4, sl, fp, pc}
   17df4:	push	{r4, sl, fp, lr}
   17df8:	add	fp, sp, #8
   17dfc:	sub	sp, sp, #104	; 0x68
   17e00:	mov	r4, r0
   17e04:	movw	r0, #46423	; 0xb557
   17e08:	movt	r0, #1
   17e0c:	mov	r1, sp
   17e10:	bl	19f88 <__assert_fail@plt+0x8a28>
   17e14:	mov	r1, r0
   17e18:	mov	r0, #0
   17e1c:	cmp	r1, #0
   17e20:	beq	17e2c <__assert_fail@plt+0x68cc>
   17e24:	sub	sp, fp, #8
   17e28:	pop	{r4, sl, fp, pc}
   17e2c:	ldr	r0, [sp, #96]	; 0x60
   17e30:	ldr	r1, [sp, #100]	; 0x64
   17e34:	ldm	sp, {r2, r3}
   17e38:	stm	r4, {r0, r1, r2, r3}
   17e3c:	mov	r0, r4
   17e40:	sub	sp, fp, #8
   17e44:	pop	{r4, sl, fp, pc}
   17e48:	push	{r4, r5, r6, r7, fp, lr}
   17e4c:	add	fp, sp, #16
   17e50:	mov	r4, r0
   17e54:	cmp	r0, #2
   17e58:	movhi	r0, r4
   17e5c:	pophi	{r4, r5, r6, r7, fp, pc}
   17e60:	mov	r0, r4
   17e64:	bl	19c60 <__assert_fail@plt+0x8700>
   17e68:	mov	r5, r0
   17e6c:	bl	11410 <__errno_location@plt>
   17e70:	mov	r6, r0
   17e74:	ldr	r7, [r0]
   17e78:	mov	r0, r4
   17e7c:	bl	11524 <close@plt>
   17e80:	str	r7, [r6]
   17e84:	mov	r0, r5
   17e88:	pop	{r4, r5, r6, r7, fp, pc}
   17e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e90:	add	fp, sp, #28
   17e94:	sub	sp, sp, #12
   17e98:	mov	r9, r3
   17e9c:	mov	r4, r2
   17ea0:	mov	r8, r1
   17ea4:	mov	r7, r0
   17ea8:	ldr	sl, [fp, #8]
   17eac:	cmp	r2, #0
   17eb0:	beq	17ec8 <__assert_fail@plt+0x6968>
   17eb4:	mov	r0, r7
   17eb8:	mov	r1, #58	; 0x3a
   17ebc:	bl	113ec <strchr@plt>
   17ec0:	mov	r6, r0
   17ec4:	b	17ecc <__assert_fail@plt+0x696c>
   17ec8:	mov	r6, #0
   17ecc:	stm	sp, {r9, sl}
   17ed0:	mov	r0, r7
   17ed4:	mov	r1, r6
   17ed8:	mov	r2, r8
   17edc:	mov	r3, r4
   17ee0:	bl	17f48 <__assert_fail@plt+0x69e8>
   17ee4:	mov	r5, r0
   17ee8:	cmp	r4, #0
   17eec:	beq	17f3c <__assert_fail@plt+0x69dc>
   17ef0:	cmp	r6, #0
   17ef4:	bne	17f3c <__assert_fail@plt+0x69dc>
   17ef8:	cmp	r5, #0
   17efc:	beq	17f3c <__assert_fail@plt+0x69dc>
   17f00:	mov	r0, r7
   17f04:	mov	r1, #46	; 0x2e
   17f08:	bl	113ec <strchr@plt>
   17f0c:	cmp	r0, #0
   17f10:	beq	17f3c <__assert_fail@plt+0x69dc>
   17f14:	mov	r1, r0
   17f18:	stm	sp, {r9, sl}
   17f1c:	mov	r0, r7
   17f20:	mov	r2, r8
   17f24:	mov	r3, r4
   17f28:	bl	17f48 <__assert_fail@plt+0x69e8>
   17f2c:	cmp	r0, #0
   17f30:	movne	r0, r5
   17f34:	sub	sp, fp, #28
   17f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f3c:	mov	r0, r5
   17f40:	sub	sp, fp, #28
   17f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f4c:	add	fp, sp, #28
   17f50:	sub	sp, sp, #36	; 0x24
   17f54:	mov	sl, r3
   17f58:	mov	r9, r2
   17f5c:	mov	r4, r1
   17f60:	ldr	r3, [r2]
   17f64:	ldr	r2, [fp, #8]
   17f68:	cmp	sl, #0
   17f6c:	ldrne	r1, [sl]
   17f70:	mvneq	r1, #0
   17f74:	str	r1, [sp, #8]
   17f78:	ldr	r8, [fp, #12]
   17f7c:	cmp	r2, #0
   17f80:	movne	r1, #0
   17f84:	strne	r1, [r2]
   17f88:	cmp	r8, #0
   17f8c:	movne	r1, #0
   17f90:	strne	r1, [r8]
   17f94:	cmp	r4, #0
   17f98:	str	r3, [sp, #4]
   17f9c:	beq	17fd0 <__assert_fail@plt+0x6a70>
   17fa0:	subs	r5, r4, r0
   17fa4:	beq	18060 <__assert_fail@plt+0x6b00>
   17fa8:	add	r1, r5, #1
   17fac:	bl	18a24 <__assert_fail@plt+0x74c4>
   17fb0:	mov	r7, r0
   17fb4:	mov	r0, #0
   17fb8:	strb	r0, [r7, r5]
   17fbc:	mov	r6, r4
   17fc0:	ldrb	r0, [r6, #1]!
   17fc4:	cmp	r0, #0
   17fc8:	moveq	r6, r0
   17fcc:	b	17fe8 <__assert_fail@plt+0x6a88>
   17fd0:	ldrb	r1, [r0]
   17fd4:	cmp	r1, #0
   17fd8:	beq	1817c <__assert_fail@plt+0x6c1c>
   17fdc:	bl	18a90 <__assert_fail@plt+0x7530>
   17fe0:	mov	r7, r0
   17fe4:	mov	r6, #0
   17fe8:	ldrb	r0, [r7]
   17fec:	cmp	r0, #43	; 0x2b
   17ff0:	beq	18040 <__assert_fail@plt+0x6ae0>
   17ff4:	mov	r0, r7
   17ff8:	bl	11254 <getpwnam@plt>
   17ffc:	cmp	r0, #0
   18000:	beq	18040 <__assert_fail@plt+0x6ae0>
   18004:	ldr	r1, [r0, #8]
   18008:	str	r1, [sp, #4]
   1800c:	mov	r5, #0
   18010:	cmp	r4, #0
   18014:	beq	18188 <__assert_fail@plt+0x6c28>
   18018:	cmp	r6, #0
   1801c:	bne	18188 <__assert_fail@plt+0x6c28>
   18020:	ldr	r4, [r0, #12]
   18024:	mov	r0, r4
   18028:	bl	11548 <getgrgid@plt>
   1802c:	cmp	r0, #0
   18030:	str	r4, [sp, #8]
   18034:	beq	18190 <__assert_fail@plt+0x6c30>
   18038:	ldr	r0, [r0]
   1803c:	b	181a0 <__assert_fail@plt+0x6c40>
   18040:	cmp	r4, #0
   18044:	beq	18120 <__assert_fail@plt+0x6bc0>
   18048:	cmp	r6, #0
   1804c:	bne	18120 <__assert_fail@plt+0x6bc0>
   18050:	movw	r5, #45675	; 0xb26b
   18054:	movt	r5, #1
   18058:	mov	r4, #0
   1805c:	b	181ac <__assert_fail@plt+0x6c4c>
   18060:	ldrb	r0, [r4, #1]!
   18064:	cmp	r0, #0
   18068:	moveq	r4, r0
   1806c:	mov	r7, #0
   18070:	mov	r6, r4
   18074:	mov	r4, #0
   18078:	mov	r5, #0
   1807c:	cmp	r6, #0
   18080:	beq	181b8 <__assert_fail@plt+0x6c58>
   18084:	cmp	r5, #0
   18088:	bne	181b8 <__assert_fail@plt+0x6c58>
   1808c:	ldrb	r0, [r6]
   18090:	cmp	r0, #43	; 0x2b
   18094:	beq	180b8 <__assert_fail@plt+0x6b58>
   18098:	mov	r0, r6
   1809c:	bl	11554 <getgrnam@plt>
   180a0:	cmp	r0, #0
   180a4:	beq	180b8 <__assert_fail@plt+0x6b58>
   180a8:	ldr	r0, [r0, #8]
   180ac:	str	r0, [sp, #8]
   180b0:	mov	r5, #0
   180b4:	b	1810c <__assert_fail@plt+0x6bac>
   180b8:	movw	r0, #42872	; 0xa778
   180bc:	movt	r0, #1
   180c0:	str	r0, [sp]
   180c4:	add	r3, sp, #12
   180c8:	mov	r0, r6
   180cc:	mov	r1, #0
   180d0:	mov	r2, #10
   180d4:	bl	18b70 <__assert_fail@plt+0x7610>
   180d8:	clz	r0, r0
   180dc:	lsr	r0, r0, #5
   180e0:	ldr	r1, [sp, #12]
   180e4:	add	r2, r1, #1
   180e8:	cmn	r1, #1
   180ec:	movwne	r2, #1
   180f0:	ands	r0, r0, r2
   180f4:	ldr	r0, [sp, #8]
   180f8:	movne	r0, r1
   180fc:	str	r0, [sp, #8]
   18100:	movw	r5, #45661	; 0xb25d
   18104:	movt	r5, #1
   18108:	movwne	r5, #0
   1810c:	bl	11230 <endgrent@plt>
   18110:	mov	r0, r6
   18114:	bl	18a90 <__assert_fail@plt+0x7530>
   18118:	mov	r4, r0
   1811c:	b	181b8 <__assert_fail@plt+0x6c58>
   18120:	movw	r0, #42872	; 0xa778
   18124:	movt	r0, #1
   18128:	str	r0, [sp]
   1812c:	mov	r4, #0
   18130:	add	r3, sp, #12
   18134:	mov	r0, r7
   18138:	mov	r1, #0
   1813c:	mov	r2, #10
   18140:	bl	18b70 <__assert_fail@plt+0x7610>
   18144:	clz	r0, r0
   18148:	lsr	r0, r0, #5
   1814c:	ldr	r1, [sp, #12]
   18150:	add	r2, r1, #1
   18154:	cmn	r1, #1
   18158:	movwne	r2, #1
   1815c:	ands	r0, r0, r2
   18160:	ldr	r0, [sp, #4]
   18164:	movne	r0, r1
   18168:	str	r0, [sp, #4]
   1816c:	movw	r5, #45648	; 0xb250
   18170:	movt	r5, #1
   18174:	movwne	r5, #0
   18178:	b	181ac <__assert_fail@plt+0x6c4c>
   1817c:	mov	r4, #0
   18180:	mov	r7, #0
   18184:	b	181c4 <__assert_fail@plt+0x6c64>
   18188:	mov	r4, #0
   1818c:	b	181ac <__assert_fail@plt+0x6c4c>
   18190:	add	r2, sp, #12
   18194:	mov	r0, r4
   18198:	mov	r1, #0
   1819c:	bl	160ac <__assert_fail@plt+0x4b4c>
   181a0:	bl	18a90 <__assert_fail@plt+0x7530>
   181a4:	mov	r4, r0
   181a8:	bl	11230 <endgrent@plt>
   181ac:	bl	11488 <endpwent@plt>
   181b0:	cmp	r6, #0
   181b4:	bne	18084 <__assert_fail@plt+0x6b24>
   181b8:	mov	r6, #0
   181bc:	cmp	r5, #0
   181c0:	bne	18208 <__assert_fail@plt+0x6ca8>
   181c4:	ldr	r0, [sp, #4]
   181c8:	str	r0, [r9]
   181cc:	cmp	sl, #0
   181d0:	ldrne	r0, [sp, #8]
   181d4:	strne	r0, [sl]
   181d8:	ldr	r0, [fp, #8]
   181dc:	cmp	r0, #0
   181e0:	strne	r7, [r0]
   181e4:	movne	r7, #0
   181e8:	mov	r6, #1
   181ec:	cmp	r8, #0
   181f0:	beq	18204 <__assert_fail@plt+0x6ca4>
   181f4:	str	r4, [r8]
   181f8:	mov	r5, #0
   181fc:	mov	r4, #0
   18200:	b	18208 <__assert_fail@plt+0x6ca8>
   18204:	mov	r5, #0
   18208:	mov	r0, r7
   1820c:	bl	12fd4 <__assert_fail@plt+0x1a74>
   18210:	mov	r0, r4
   18214:	bl	12fd4 <__assert_fail@plt+0x1a74>
   18218:	mov	r0, #0
   1821c:	cmp	r6, #0
   18220:	bne	18234 <__assert_fail@plt+0x6cd4>
   18224:	mov	r0, #0
   18228:	mov	r1, r5
   1822c:	mov	r2, #5
   18230:	bl	112d8 <dcgettext@plt>
   18234:	sub	sp, fp, #28
   18238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1823c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18240:	add	fp, sp, #24
   18244:	sub	sp, sp, #32
   18248:	mov	r4, r2
   1824c:	mov	r8, r0
   18250:	ldr	r6, [fp, #12]
   18254:	ldr	r7, [fp, #8]
   18258:	cmp	r1, #0
   1825c:	beq	18284 <__assert_fail@plt+0x6d24>
   18260:	mov	r5, r1
   18264:	str	r4, [sp]
   18268:	str	r3, [sp, #4]
   1826c:	movw	r2, #45688	; 0xb278
   18270:	movt	r2, #1
   18274:	mov	r0, r8
   18278:	mov	r1, #1
   1827c:	mov	r3, r5
   18280:	b	1829c <__assert_fail@plt+0x6d3c>
   18284:	str	r3, [sp]
   18288:	movw	r2, #45700	; 0xb284
   1828c:	movt	r2, #1
   18290:	mov	r0, r8
   18294:	mov	r1, #1
   18298:	mov	r3, r4
   1829c:	bl	1144c <__fprintf_chk@plt>
   182a0:	movw	r1, #45707	; 0xb28b
   182a4:	movt	r1, #1
   182a8:	mov	r0, #0
   182ac:	mov	r2, #5
   182b0:	bl	112d8 <dcgettext@plt>
   182b4:	mov	r3, r0
   182b8:	movw	r0, #2022	; 0x7e6
   182bc:	str	r0, [sp]
   182c0:	movw	r2, #46425	; 0xb559
   182c4:	movt	r2, #1
   182c8:	mov	r0, r8
   182cc:	mov	r1, #1
   182d0:	bl	1144c <__fprintf_chk@plt>
   182d4:	movw	r4, #42871	; 0xa777
   182d8:	movt	r4, #1
   182dc:	mov	r0, r4
   182e0:	mov	r1, r8
   182e4:	bl	1123c <fputs_unlocked@plt>
   182e8:	movw	r1, #45711	; 0xb28f
   182ec:	movt	r1, #1
   182f0:	mov	r0, #0
   182f4:	mov	r2, #5
   182f8:	bl	112d8 <dcgettext@plt>
   182fc:	mov	r2, r0
   18300:	movw	r3, #45882	; 0xb33a
   18304:	movt	r3, #1
   18308:	mov	r0, r8
   1830c:	mov	r1, #1
   18310:	bl	1144c <__fprintf_chk@plt>
   18314:	mov	r0, r4
   18318:	mov	r1, r8
   1831c:	bl	1123c <fputs_unlocked@plt>
   18320:	cmp	r6, #9
   18324:	bhi	18360 <__assert_fail@plt+0x6e00>
   18328:	add	r0, pc, #0
   1832c:	ldr	pc, [r0, r6, lsl #2]
   18330:	andeq	r8, r1, r8, asr r3
   18334:	andeq	r8, r1, ip, ror #6
   18338:	muleq	r1, ip, r3
   1833c:	andeq	r8, r1, r4, asr #7
   18340:	andeq	r8, r1, ip, ror #7
   18344:	andeq	r8, r1, r4, lsl r4
   18348:	andeq	r8, r1, ip, lsr r4
   1834c:	andeq	r8, r1, r4, ror r4
   18350:	andeq	r8, r1, r4, lsl r5
   18354:			; <UNDEFINED> instruction: 0x000184bc
   18358:	sub	sp, fp, #24
   1835c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18360:	movw	r1, #46235	; 0xb49b
   18364:	movt	r1, #1
   18368:	b	184c4 <__assert_fail@plt+0x6f64>
   1836c:	movw	r1, #45916	; 0xb35c
   18370:	movt	r1, #1
   18374:	mov	r0, #0
   18378:	mov	r2, #5
   1837c:	bl	112d8 <dcgettext@plt>
   18380:	mov	r2, r0
   18384:	ldr	r3, [r7]
   18388:	mov	r0, r8
   1838c:	mov	r1, #1
   18390:	sub	sp, fp, #24
   18394:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18398:	b	1144c <__fprintf_chk@plt>
   1839c:	movw	r1, #45932	; 0xb36c
   183a0:	movt	r1, #1
   183a4:	mov	r0, #0
   183a8:	mov	r2, #5
   183ac:	bl	112d8 <dcgettext@plt>
   183b0:	mov	r2, r0
   183b4:	ldr	r3, [r7]
   183b8:	ldr	r0, [r7, #4]
   183bc:	str	r0, [sp]
   183c0:	b	184b0 <__assert_fail@plt+0x6f50>
   183c4:	movw	r1, #45955	; 0xb383
   183c8:	movt	r1, #1
   183cc:	mov	r0, #0
   183d0:	mov	r2, #5
   183d4:	bl	112d8 <dcgettext@plt>
   183d8:	mov	r2, r0
   183dc:	ldr	r3, [r7]
   183e0:	ldmib	r7, {r0, r1}
   183e4:	stm	sp, {r0, r1}
   183e8:	b	184b0 <__assert_fail@plt+0x6f50>
   183ec:	movw	r1, #45983	; 0xb39f
   183f0:	movt	r1, #1
   183f4:	mov	r0, #0
   183f8:	mov	r2, #5
   183fc:	bl	112d8 <dcgettext@plt>
   18400:	mov	r2, r0
   18404:	ldr	r3, [r7]
   18408:	ldmib	r7, {r0, r1, r7}
   1840c:	stm	sp, {r0, r1, r7}
   18410:	b	184b0 <__assert_fail@plt+0x6f50>
   18414:	movw	r1, #46015	; 0xb3bf
   18418:	movt	r1, #1
   1841c:	mov	r0, #0
   18420:	mov	r2, #5
   18424:	bl	112d8 <dcgettext@plt>
   18428:	mov	r2, r0
   1842c:	ldr	r3, [r7]
   18430:	ldmib	r7, {r0, r1, r6, r7}
   18434:	stm	sp, {r0, r1, r6, r7}
   18438:	b	184b0 <__assert_fail@plt+0x6f50>
   1843c:	movw	r1, #46051	; 0xb3e3
   18440:	movt	r1, #1
   18444:	mov	r0, #0
   18448:	mov	r2, #5
   1844c:	bl	112d8 <dcgettext@plt>
   18450:	mov	r2, r0
   18454:	ldr	r3, [r7]
   18458:	ldmib	r7, {r0, r1, r6}
   1845c:	ldr	r5, [r7, #16]
   18460:	ldr	r7, [r7, #20]
   18464:	stm	sp, {r0, r1, r6}
   18468:	str	r5, [sp, #12]
   1846c:	str	r7, [sp, #16]
   18470:	b	184b0 <__assert_fail@plt+0x6f50>
   18474:	movw	r1, #46091	; 0xb40b
   18478:	movt	r1, #1
   1847c:	mov	r0, #0
   18480:	mov	r2, #5
   18484:	bl	112d8 <dcgettext@plt>
   18488:	mov	r2, r0
   1848c:	ldr	r3, [r7]
   18490:	ldmib	r7, {r0, r1, r6}
   18494:	ldr	r5, [r7, #16]
   18498:	ldr	r4, [r7, #20]
   1849c:	ldr	r7, [r7, #24]
   184a0:	stm	sp, {r0, r1, r6}
   184a4:	str	r5, [sp, #12]
   184a8:	str	r4, [sp, #16]
   184ac:	str	r7, [sp, #20]
   184b0:	mov	r0, r8
   184b4:	mov	r1, #1
   184b8:	b	18564 <__assert_fail@plt+0x7004>
   184bc:	movw	r1, #46183	; 0xb467
   184c0:	movt	r1, #1
   184c4:	mov	r0, #0
   184c8:	mov	r2, #5
   184cc:	bl	112d8 <dcgettext@plt>
   184d0:	mov	ip, r0
   184d4:	ldr	r3, [r7]
   184d8:	ldr	r0, [r7, #4]
   184dc:	ldr	r1, [r7, #8]
   184e0:	ldr	r6, [r7, #12]
   184e4:	ldr	r5, [r7, #16]
   184e8:	ldr	r4, [r7, #20]
   184ec:	ldr	r2, [r7, #24]
   184f0:	ldr	lr, [r7, #28]
   184f4:	ldr	r7, [r7, #32]
   184f8:	stm	sp, {r0, r1, r6}
   184fc:	str	r5, [sp, #12]
   18500:	str	r4, [sp, #16]
   18504:	str	r2, [sp, #20]
   18508:	str	lr, [sp, #24]
   1850c:	str	r7, [sp, #28]
   18510:	b	18558 <__assert_fail@plt+0x6ff8>
   18514:	movw	r1, #46135	; 0xb437
   18518:	movt	r1, #1
   1851c:	mov	r0, #0
   18520:	mov	r2, #5
   18524:	bl	112d8 <dcgettext@plt>
   18528:	mov	ip, r0
   1852c:	ldr	r3, [r7]
   18530:	ldmib	r7, {r0, r1, r6}
   18534:	ldr	r5, [r7, #16]
   18538:	ldr	r4, [r7, #20]
   1853c:	ldr	r2, [r7, #24]
   18540:	ldr	r7, [r7, #28]
   18544:	stm	sp, {r0, r1, r6}
   18548:	str	r5, [sp, #12]
   1854c:	str	r4, [sp, #16]
   18550:	str	r2, [sp, #20]
   18554:	str	r7, [sp, #24]
   18558:	mov	r0, r8
   1855c:	mov	r1, #1
   18560:	mov	r2, ip
   18564:	bl	1144c <__fprintf_chk@plt>
   18568:	sub	sp, fp, #24
   1856c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18570:	push	{r4, sl, fp, lr}
   18574:	add	fp, sp, #8
   18578:	sub	sp, sp, #8
   1857c:	mov	lr, #0
   18580:	ldr	ip, [fp, #8]
   18584:	ldr	r4, [ip, lr, lsl #2]
   18588:	add	lr, lr, #1
   1858c:	cmp	r4, #0
   18590:	bne	18584 <__assert_fail@plt+0x7024>
   18594:	sub	r4, lr, #1
   18598:	str	ip, [sp]
   1859c:	str	r4, [sp, #4]
   185a0:	bl	1823c <__assert_fail@plt+0x6cdc>
   185a4:	sub	sp, fp, #8
   185a8:	pop	{r4, sl, fp, pc}
   185ac:	push	{r4, r5, fp, lr}
   185b0:	add	fp, sp, #8
   185b4:	sub	sp, sp, #48	; 0x30
   185b8:	mov	ip, #0
   185bc:	ldr	r4, [fp, #8]
   185c0:	add	lr, sp, #8
   185c4:	ldr	r5, [r4]
   185c8:	str	r5, [lr, ip, lsl #2]
   185cc:	cmp	r5, #0
   185d0:	beq	185e4 <__assert_fail@plt+0x7084>
   185d4:	add	ip, ip, #1
   185d8:	add	r4, r4, #4
   185dc:	cmp	ip, #10
   185e0:	bcc	185c4 <__assert_fail@plt+0x7064>
   185e4:	str	lr, [sp]
   185e8:	str	ip, [sp, #4]
   185ec:	bl	1823c <__assert_fail@plt+0x6cdc>
   185f0:	sub	sp, fp, #8
   185f4:	pop	{r4, r5, fp, pc}
   185f8:	push	{fp, lr}
   185fc:	mov	fp, sp
   18600:	sub	sp, sp, #8
   18604:	add	ip, fp, #8
   18608:	str	ip, [sp, #4]
   1860c:	str	ip, [sp]
   18610:	bl	185ac <__assert_fail@plt+0x704c>
   18614:	mov	sp, fp
   18618:	pop	{fp, pc}
   1861c:	push	{fp, lr}
   18620:	mov	fp, sp
   18624:	movw	r0, #49556	; 0xc194
   18628:	movt	r0, #2
   1862c:	ldr	r1, [r0]
   18630:	movw	r0, #42871	; 0xa777
   18634:	movt	r0, #1
   18638:	bl	1123c <fputs_unlocked@plt>
   1863c:	movw	r1, #46295	; 0xb4d7
   18640:	movt	r1, #1
   18644:	mov	r0, #0
   18648:	mov	r2, #5
   1864c:	bl	112d8 <dcgettext@plt>
   18650:	mov	r1, r0
   18654:	movw	r2, #46315	; 0xb4eb
   18658:	movt	r2, #1
   1865c:	mov	r0, #1
   18660:	bl	11434 <__printf_chk@plt>
   18664:	movw	r1, #46337	; 0xb501
   18668:	movt	r1, #1
   1866c:	mov	r0, #0
   18670:	mov	r2, #5
   18674:	bl	112d8 <dcgettext@plt>
   18678:	mov	r1, r0
   1867c:	movw	r2, #43411	; 0xa993
   18680:	movt	r2, #1
   18684:	movw	r3, #43686	; 0xaaa6
   18688:	movt	r3, #1
   1868c:	mov	r0, #1
   18690:	bl	11434 <__printf_chk@plt>
   18694:	movw	r1, #46357	; 0xb515
   18698:	movt	r1, #1
   1869c:	mov	r0, #0
   186a0:	mov	r2, #5
   186a4:	bl	112d8 <dcgettext@plt>
   186a8:	mov	r1, r0
   186ac:	movw	r2, #46396	; 0xb53c
   186b0:	movt	r2, #1
   186b4:	mov	r0, #1
   186b8:	pop	{fp, lr}
   186bc:	b	11434 <__printf_chk@plt>
   186c0:	b	186c4 <__assert_fail@plt+0x7164>
   186c4:	push	{r4, r5, r6, sl, fp, lr}
   186c8:	add	fp, sp, #16
   186cc:	mov	r4, r2
   186d0:	mov	r5, r1
   186d4:	mov	r6, r0
   186d8:	bl	19c24 <__assert_fail@plt+0x86c4>
   186dc:	cmp	r0, #0
   186e0:	popne	{r4, r5, r6, sl, fp, pc}
   186e4:	cmp	r6, #0
   186e8:	beq	186fc <__assert_fail@plt+0x719c>
   186ec:	cmp	r5, #0
   186f0:	cmpne	r4, #0
   186f4:	bne	186fc <__assert_fail@plt+0x719c>
   186f8:	pop	{r4, r5, r6, sl, fp, pc}
   186fc:	bl	18ab0 <__assert_fail@plt+0x7550>
   18700:	push	{fp, lr}
   18704:	mov	fp, sp
   18708:	bl	190c4 <__assert_fail@plt+0x7b64>
   1870c:	bl	18714 <__assert_fail@plt+0x71b4>
   18710:	pop	{fp, pc}
   18714:	cmp	r0, #0
   18718:	bxne	lr
   1871c:	push	{fp, lr}
   18720:	mov	fp, sp
   18724:	bl	18ab0 <__assert_fail@plt+0x7550>
   18728:	push	{fp, lr}
   1872c:	mov	fp, sp
   18730:	bl	19b58 <__assert_fail@plt+0x85f8>
   18734:	bl	18714 <__assert_fail@plt+0x71b4>
   18738:	pop	{fp, pc}
   1873c:	b	18700 <__assert_fail@plt+0x71a0>
   18740:	push	{r4, r5, fp, lr}
   18744:	add	fp, sp, #8
   18748:	mov	r4, r1
   1874c:	mov	r5, r0
   18750:	bl	190f4 <__assert_fail@plt+0x7b94>
   18754:	cmp	r0, #0
   18758:	popne	{r4, r5, fp, pc}
   1875c:	cmp	r5, #0
   18760:	beq	18770 <__assert_fail@plt+0x7210>
   18764:	cmp	r4, #0
   18768:	bne	18770 <__assert_fail@plt+0x7210>
   1876c:	pop	{r4, r5, fp, pc}
   18770:	bl	18ab0 <__assert_fail@plt+0x7550>
   18774:	push	{fp, lr}
   18778:	mov	fp, sp
   1877c:	bl	19b5c <__assert_fail@plt+0x85fc>
   18780:	bl	18714 <__assert_fail@plt+0x71b4>
   18784:	pop	{fp, pc}
   18788:	push	{fp, lr}
   1878c:	mov	fp, sp
   18790:	bl	19b6c <__assert_fail@plt+0x860c>
   18794:	bl	18714 <__assert_fail@plt+0x71b4>
   18798:	pop	{fp, pc}
   1879c:	push	{fp, lr}
   187a0:	mov	fp, sp
   187a4:	mov	r2, r1
   187a8:	mov	r1, r0
   187ac:	mov	r0, #0
   187b0:	bl	186c4 <__assert_fail@plt+0x7164>
   187b4:	pop	{fp, pc}
   187b8:	mov	r2, r1
   187bc:	mov	r1, r0
   187c0:	mov	r0, #0
   187c4:	b	18788 <__assert_fail@plt+0x7228>
   187c8:	mov	r2, #1
   187cc:	b	187d0 <__assert_fail@plt+0x7270>
   187d0:	push	{r4, r5, fp, lr}
   187d4:	add	fp, sp, #8
   187d8:	mov	r4, r1
   187dc:	ldr	r5, [r1]
   187e0:	cmp	r0, #0
   187e4:	beq	187fc <__assert_fail@plt+0x729c>
   187e8:	mov	r1, #1
   187ec:	add	r1, r1, r5, lsr #1
   187f0:	adds	r5, r5, r1
   187f4:	bcc	18814 <__assert_fail@plt+0x72b4>
   187f8:	bl	18ab0 <__assert_fail@plt+0x7550>
   187fc:	cmp	r5, #0
   18800:	bne	18814 <__assert_fail@plt+0x72b4>
   18804:	mov	r1, #64	; 0x40
   18808:	udiv	r5, r1, r2
   1880c:	cmp	r2, #64	; 0x40
   18810:	addhi	r5, r5, #1
   18814:	mov	r1, r5
   18818:	bl	186c4 <__assert_fail@plt+0x7164>
   1881c:	str	r5, [r4]
   18820:	pop	{r4, r5, fp, pc}
   18824:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18828:	add	fp, sp, #24
   1882c:	mov	r8, r1
   18830:	ldr	r6, [r1]
   18834:	add	r1, r6, r6, asr #1
   18838:	cmp	r1, r6
   1883c:	mvnvs	r1, #-2147483648	; 0x80000000
   18840:	cmp	r1, r3
   18844:	mov	r5, r1
   18848:	movgt	r5, r3
   1884c:	cmn	r3, #1
   18850:	movle	r5, r1
   18854:	ldr	r4, [fp, #8]
   18858:	cmn	r4, #1
   1885c:	ble	18884 <__assert_fail@plt+0x7324>
   18860:	cmp	r4, #0
   18864:	beq	188d8 <__assert_fail@plt+0x7378>
   18868:	cmn	r5, #1
   1886c:	ble	188ac <__assert_fail@plt+0x734c>
   18870:	mvn	r7, #-2147483648	; 0x80000000
   18874:	udiv	r1, r7, r4
   18878:	cmp	r1, r5
   1887c:	bge	188d8 <__assert_fail@plt+0x7378>
   18880:	b	188e8 <__assert_fail@plt+0x7388>
   18884:	cmn	r5, #1
   18888:	ble	188c8 <__assert_fail@plt+0x7368>
   1888c:	cmn	r4, #1
   18890:	beq	188d8 <__assert_fail@plt+0x7378>
   18894:	mov	r1, #-2147483648	; 0x80000000
   18898:	sdiv	r1, r1, r4
   1889c:	mvn	r7, #-2147483648	; 0x80000000
   188a0:	cmp	r1, r5
   188a4:	bge	188d8 <__assert_fail@plt+0x7378>
   188a8:	b	188e8 <__assert_fail@plt+0x7388>
   188ac:	beq	188d8 <__assert_fail@plt+0x7378>
   188b0:	mov	r1, #-2147483648	; 0x80000000
   188b4:	sdiv	r1, r1, r5
   188b8:	mvn	r7, #-2147483648	; 0x80000000
   188bc:	cmp	r1, r4
   188c0:	bge	188d8 <__assert_fail@plt+0x7378>
   188c4:	b	188e8 <__assert_fail@plt+0x7388>
   188c8:	mvn	r7, #-2147483648	; 0x80000000
   188cc:	sdiv	r1, r7, r4
   188d0:	cmp	r5, r1
   188d4:	blt	188e8 <__assert_fail@plt+0x7388>
   188d8:	mul	r1, r5, r4
   188dc:	mov	r7, #64	; 0x40
   188e0:	cmp	r1, #63	; 0x3f
   188e4:	bgt	188f0 <__assert_fail@plt+0x7390>
   188e8:	sdiv	r5, r7, r4
   188ec:	mul	r1, r5, r4
   188f0:	cmp	r0, #0
   188f4:	moveq	r7, #0
   188f8:	streq	r7, [r8]
   188fc:	sub	r7, r5, r6
   18900:	cmp	r7, r2
   18904:	bge	189b0 <__assert_fail@plt+0x7450>
   18908:	add	r5, r6, r2
   1890c:	mov	r1, #0
   18910:	cmp	r5, r3
   18914:	mov	r2, #0
   18918:	movwgt	r2, #1
   1891c:	cmn	r3, #1
   18920:	movwgt	r1, #1
   18924:	cmp	r5, r6
   18928:	bvs	18998 <__assert_fail@plt+0x7438>
   1892c:	ands	r1, r1, r2
   18930:	bne	18998 <__assert_fail@plt+0x7438>
   18934:	cmn	r4, #1
   18938:	ble	18960 <__assert_fail@plt+0x7400>
   1893c:	cmp	r4, #0
   18940:	beq	189ac <__assert_fail@plt+0x744c>
   18944:	cmn	r5, #1
   18948:	ble	18984 <__assert_fail@plt+0x7424>
   1894c:	mvn	r1, #-2147483648	; 0x80000000
   18950:	udiv	r1, r1, r4
   18954:	cmp	r1, r5
   18958:	bge	189ac <__assert_fail@plt+0x744c>
   1895c:	b	18998 <__assert_fail@plt+0x7438>
   18960:	cmn	r5, #1
   18964:	ble	1899c <__assert_fail@plt+0x743c>
   18968:	cmn	r4, #1
   1896c:	beq	189ac <__assert_fail@plt+0x744c>
   18970:	mov	r1, #-2147483648	; 0x80000000
   18974:	sdiv	r1, r1, r4
   18978:	cmp	r1, r5
   1897c:	bge	189ac <__assert_fail@plt+0x744c>
   18980:	b	18998 <__assert_fail@plt+0x7438>
   18984:	beq	189ac <__assert_fail@plt+0x744c>
   18988:	mov	r1, #-2147483648	; 0x80000000
   1898c:	sdiv	r1, r1, r5
   18990:	cmp	r1, r4
   18994:	bge	189ac <__assert_fail@plt+0x744c>
   18998:	bl	18ab0 <__assert_fail@plt+0x7550>
   1899c:	mvn	r1, #-2147483648	; 0x80000000
   189a0:	sdiv	r1, r1, r4
   189a4:	cmp	r5, r1
   189a8:	blt	18998 <__assert_fail@plt+0x7438>
   189ac:	mul	r1, r5, r4
   189b0:	bl	18740 <__assert_fail@plt+0x71e0>
   189b4:	str	r5, [r8]
   189b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   189bc:	mov	r1, #1
   189c0:	b	189c4 <__assert_fail@plt+0x7464>
   189c4:	push	{fp, lr}
   189c8:	mov	fp, sp
   189cc:	bl	19070 <__assert_fail@plt+0x7b10>
   189d0:	bl	18714 <__assert_fail@plt+0x71b4>
   189d4:	pop	{fp, pc}
   189d8:	mov	r1, #1
   189dc:	b	189e0 <__assert_fail@plt+0x7480>
   189e0:	push	{fp, lr}
   189e4:	mov	fp, sp
   189e8:	bl	19b68 <__assert_fail@plt+0x8608>
   189ec:	bl	18714 <__assert_fail@plt+0x71b4>
   189f0:	pop	{fp, pc}
   189f4:	push	{r4, r5, r6, sl, fp, lr}
   189f8:	add	fp, sp, #16
   189fc:	mov	r4, r1
   18a00:	mov	r5, r0
   18a04:	mov	r0, r1
   18a08:	bl	18700 <__assert_fail@plt+0x71a0>
   18a0c:	mov	r6, r0
   18a10:	mov	r1, r5
   18a14:	mov	r2, r4
   18a18:	bl	112a8 <memcpy@plt>
   18a1c:	mov	r0, r6
   18a20:	pop	{r4, r5, r6, sl, fp, pc}
   18a24:	push	{r4, r5, r6, sl, fp, lr}
   18a28:	add	fp, sp, #16
   18a2c:	mov	r4, r1
   18a30:	mov	r5, r0
   18a34:	mov	r0, r1
   18a38:	bl	18728 <__assert_fail@plt+0x71c8>
   18a3c:	mov	r6, r0
   18a40:	mov	r1, r5
   18a44:	mov	r2, r4
   18a48:	bl	112a8 <memcpy@plt>
   18a4c:	mov	r0, r6
   18a50:	pop	{r4, r5, r6, sl, fp, pc}
   18a54:	push	{r4, r5, r6, sl, fp, lr}
   18a58:	add	fp, sp, #16
   18a5c:	mov	r4, r1
   18a60:	mov	r5, r0
   18a64:	add	r0, r1, #1
   18a68:	bl	18728 <__assert_fail@plt+0x71c8>
   18a6c:	mov	r6, r0
   18a70:	mov	r0, #0
   18a74:	strb	r0, [r6, r4]
   18a78:	mov	r0, r6
   18a7c:	mov	r1, r5
   18a80:	mov	r2, r4
   18a84:	bl	112a8 <memcpy@plt>
   18a88:	mov	r0, r6
   18a8c:	pop	{r4, r5, r6, sl, fp, pc}
   18a90:	push	{r4, sl, fp, lr}
   18a94:	add	fp, sp, #8
   18a98:	mov	r4, r0
   18a9c:	bl	113e0 <strlen@plt>
   18aa0:	add	r1, r0, #1
   18aa4:	mov	r0, r4
   18aa8:	pop	{r4, sl, fp, lr}
   18aac:	b	189f4 <__assert_fail@plt+0x7494>
   18ab0:	push	{fp, lr}
   18ab4:	mov	fp, sp
   18ab8:	movw	r0, #49468	; 0xc13c
   18abc:	movt	r0, #2
   18ac0:	ldr	r4, [r0]
   18ac4:	movw	r1, #46472	; 0xb588
   18ac8:	movt	r1, #1
   18acc:	mov	r0, #0
   18ad0:	mov	r2, #5
   18ad4:	bl	112d8 <dcgettext@plt>
   18ad8:	mov	r3, r0
   18adc:	movw	r2, #43408	; 0xa990
   18ae0:	movt	r2, #1
   18ae4:	mov	r0, r4
   18ae8:	mov	r1, #0
   18aec:	bl	11368 <error@plt>
   18af0:	bl	11518 <abort@plt>
   18af4:	push	{fp, lr}
   18af8:	mov	fp, sp
   18afc:	orr	r1, r1, #512	; 0x200
   18b00:	bl	12ffc <__assert_fail@plt+0x1a9c>
   18b04:	cmp	r0, #0
   18b08:	popne	{fp, pc}
   18b0c:	bl	11410 <__errno_location@plt>
   18b10:	ldr	r0, [r0]
   18b14:	cmp	r0, #22
   18b18:	bne	18b3c <__assert_fail@plt+0x75dc>
   18b1c:	movw	r0, #46489	; 0xb599
   18b20:	movt	r0, #1
   18b24:	movw	r1, #46505	; 0xb5a9
   18b28:	movt	r1, #1
   18b2c:	movw	r3, #46516	; 0xb5b4
   18b30:	movt	r3, #1
   18b34:	mov	r2, #41	; 0x29
   18b38:	bl	11560 <__assert_fail@plt>
   18b3c:	bl	18ab0 <__assert_fail@plt+0x7550>
   18b40:	ldr	r0, [r0, #48]	; 0x30
   18b44:	and	r2, r0, #17
   18b48:	mov	r0, #1
   18b4c:	cmp	r2, #16
   18b50:	beq	18b6c <__assert_fail@plt+0x760c>
   18b54:	mov	r0, #0
   18b58:	cmp	r2, #17
   18b5c:	bxne	lr
   18b60:	ldr	r0, [r1, #48]	; 0x30
   18b64:	cmp	r0, #0
   18b68:	movwne	r0, #1
   18b6c:	bx	lr
   18b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b74:	add	fp, sp, #28
   18b78:	sub	sp, sp, #12
   18b7c:	cmp	r2, #37	; 0x25
   18b80:	bcs	18fa0 <__assert_fail@plt+0x7a40>
   18b84:	mov	r7, r2
   18b88:	mov	r6, r1
   18b8c:	mov	r4, r0
   18b90:	str	r3, [sp]
   18b94:	ldr	sl, [fp, #8]
   18b98:	bl	11410 <__errno_location@plt>
   18b9c:	mov	r5, r0
   18ba0:	mov	r0, #0
   18ba4:	str	r0, [r5]
   18ba8:	bl	113bc <__ctype_b_loc@plt>
   18bac:	ldr	r1, [r0]
   18bb0:	mov	r2, r4
   18bb4:	ldrb	r0, [r2], #1
   18bb8:	add	r3, r1, r0, lsl #1
   18bbc:	ldrb	r3, [r3, #1]
   18bc0:	tst	r3, #32
   18bc4:	bne	18bb4 <__assert_fail@plt+0x7654>
   18bc8:	add	r9, sp, #8
   18bcc:	cmp	r6, #0
   18bd0:	movne	r9, r6
   18bd4:	mov	r8, #4
   18bd8:	cmp	r0, #45	; 0x2d
   18bdc:	beq	18f94 <__assert_fail@plt+0x7a34>
   18be0:	mov	r0, r4
   18be4:	mov	r1, r9
   18be8:	mov	r2, r7
   18bec:	bl	113d4 <strtoul@plt>
   18bf0:	str	r0, [sp, #4]
   18bf4:	ldr	r7, [r9]
   18bf8:	cmp	r7, r4
   18bfc:	beq	18c24 <__assert_fail@plt+0x76c4>
   18c00:	ldr	r0, [r5]
   18c04:	cmp	r0, #0
   18c08:	beq	18c54 <__assert_fail@plt+0x76f4>
   18c0c:	cmp	r0, #34	; 0x22
   18c10:	bne	18f94 <__assert_fail@plt+0x7a34>
   18c14:	mov	r8, #1
   18c18:	cmp	sl, #0
   18c1c:	bne	18c60 <__assert_fail@plt+0x7700>
   18c20:	b	18f88 <__assert_fail@plt+0x7a28>
   18c24:	cmp	sl, #0
   18c28:	ldrbne	r1, [r7]
   18c2c:	cmpne	r1, #0
   18c30:	beq	18f94 <__assert_fail@plt+0x7a34>
   18c34:	mov	r0, sl
   18c38:	bl	113ec <strchr@plt>
   18c3c:	cmp	r0, #0
   18c40:	beq	18f94 <__assert_fail@plt+0x7a34>
   18c44:	mov	r0, #1
   18c48:	str	r0, [sp, #4]
   18c4c:	mov	r8, #0
   18c50:	b	18c60 <__assert_fail@plt+0x7700>
   18c54:	mov	r8, r0
   18c58:	cmp	sl, #0
   18c5c:	beq	18f88 <__assert_fail@plt+0x7a28>
   18c60:	ldrb	r4, [r7]
   18c64:	cmp	r4, #0
   18c68:	beq	18f88 <__assert_fail@plt+0x7a28>
   18c6c:	mov	r0, sl
   18c70:	mov	r1, r4
   18c74:	bl	113ec <strchr@plt>
   18c78:	cmp	r0, #0
   18c7c:	beq	18e8c <__assert_fail@plt+0x792c>
   18c80:	sub	r0, r4, #69	; 0x45
   18c84:	mov	r6, #1
   18c88:	mov	r5, #1024	; 0x400
   18c8c:	cmp	r0, #47	; 0x2f
   18c90:	bhi	18d88 <__assert_fail@plt+0x7828>
   18c94:	add	r1, pc, #0
   18c98:	ldr	pc, [r1, r0, lsl #2]
   18c9c:	andeq	r8, r1, ip, asr sp
   18ca0:	andeq	r8, r1, r8, lsl #27
   18ca4:	andeq	r8, r1, ip, asr sp
   18ca8:	andeq	r8, r1, r8, lsl #27
   18cac:	andeq	r8, r1, r8, lsl #27
   18cb0:	andeq	r8, r1, r8, lsl #27
   18cb4:	andeq	r8, r1, ip, asr sp
   18cb8:	andeq	r8, r1, r8, lsl #27
   18cbc:	andeq	r8, r1, ip, asr sp
   18cc0:	andeq	r8, r1, r8, lsl #27
   18cc4:	andeq	r8, r1, r8, lsl #27
   18cc8:	andeq	r8, r1, ip, asr sp
   18ccc:	andeq	r8, r1, r8, lsl #27
   18cd0:	andeq	r8, r1, r8, lsl #27
   18cd4:	andeq	r8, r1, r8, lsl #27
   18cd8:	andeq	r8, r1, ip, asr sp
   18cdc:	andeq	r8, r1, r8, lsl #27
   18ce0:	andeq	r8, r1, r8, lsl #27
   18ce4:	andeq	r8, r1, r8, lsl #27
   18ce8:	andeq	r8, r1, r8, lsl #27
   18cec:	andeq	r8, r1, ip, asr sp
   18cf0:	andeq	r8, r1, ip, asr sp
   18cf4:	andeq	r8, r1, r8, lsl #27
   18cf8:	andeq	r8, r1, r8, lsl #27
   18cfc:	andeq	r8, r1, r8, lsl #27
   18d00:	andeq	r8, r1, r8, lsl #27
   18d04:	andeq	r8, r1, r8, lsl #27
   18d08:	andeq	r8, r1, r8, lsl #27
   18d0c:	andeq	r8, r1, r8, lsl #27
   18d10:	andeq	r8, r1, r8, lsl #27
   18d14:	andeq	r8, r1, r8, lsl #27
   18d18:	andeq	r8, r1, r8, lsl #27
   18d1c:	andeq	r8, r1, r8, lsl #27
   18d20:	andeq	r8, r1, r8, lsl #27
   18d24:	andeq	r8, r1, ip, asr sp
   18d28:	andeq	r8, r1, r8, lsl #27
   18d2c:	andeq	r8, r1, r8, lsl #27
   18d30:	andeq	r8, r1, r8, lsl #27
   18d34:	andeq	r8, r1, ip, asr sp
   18d38:	andeq	r8, r1, r8, lsl #27
   18d3c:	andeq	r8, r1, ip, asr sp
   18d40:	andeq	r8, r1, r8, lsl #27
   18d44:	andeq	r8, r1, r8, lsl #27
   18d48:	andeq	r8, r1, r8, lsl #27
   18d4c:	andeq	r8, r1, r8, lsl #27
   18d50:	andeq	r8, r1, r8, lsl #27
   18d54:	andeq	r8, r1, r8, lsl #27
   18d58:	andeq	r8, r1, ip, asr sp
   18d5c:	mov	r0, sl
   18d60:	mov	r1, #48	; 0x30
   18d64:	bl	113ec <strchr@plt>
   18d68:	cmp	r0, #0
   18d6c:	beq	18d88 <__assert_fail@plt+0x7828>
   18d70:	ldrb	r0, [r7, #1]
   18d74:	cmp	r0, #66	; 0x42
   18d78:	cmpne	r0, #68	; 0x44
   18d7c:	bne	18ea0 <__assert_fail@plt+0x7940>
   18d80:	mov	r6, #2
   18d84:	mov	r5, #1000	; 0x3e8
   18d88:	sub	r1, r4, #66	; 0x42
   18d8c:	cmp	r1, #53	; 0x35
   18d90:	bhi	18e8c <__assert_fail@plt+0x792c>
   18d94:	mov	r0, #0
   18d98:	add	r2, pc, #0
   18d9c:	ldr	pc, [r2, r1, lsl #2]
   18da0:	andeq	r8, r1, ip, lsl #30
   18da4:	andeq	r8, r1, ip, lsl #29
   18da8:	andeq	r8, r1, ip, lsl #29
   18dac:	andeq	r8, r1, r8, lsl pc
   18db0:	andeq	r8, r1, ip, lsl #29
   18db4:	andeq	r8, r1, r8, ror lr
   18db8:	andeq	r8, r1, ip, lsl #29
   18dbc:	andeq	r8, r1, ip, lsl #29
   18dc0:	andeq	r8, r1, ip, lsl #29
   18dc4:			; <UNDEFINED> instruction: 0x00018ebc
   18dc8:	andeq	r8, r1, ip, lsl #29
   18dcc:	ldrdeq	r8, [r1], -r0
   18dd0:	andeq	r8, r1, ip, lsl #29
   18dd4:	andeq	r8, r1, ip, lsl #29
   18dd8:	andeq	r8, r1, ip, lsr #30
   18ddc:	andeq	r8, r1, ip, lsl #29
   18de0:	andeq	r8, r1, ip, lsl #29
   18de4:	andeq	r8, r1, ip, lsl #29
   18de8:	andeq	r8, r1, r4, ror #29
   18dec:	andeq	r8, r1, ip, lsl #29
   18df0:	andeq	r8, r1, ip, lsl #29
   18df4:	andeq	r8, r1, ip, lsl #29
   18df8:	andeq	r8, r1, ip, lsl #29
   18dfc:	andeq	r8, r1, r0, asr #30
   18e00:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e04:	andeq	r8, r1, ip, lsl #29
   18e08:	andeq	r8, r1, ip, lsl #29
   18e0c:	andeq	r8, r1, ip, lsl #29
   18e10:	andeq	r8, r1, ip, lsl #29
   18e14:	andeq	r8, r1, ip, lsl #29
   18e18:	andeq	r8, r1, ip, lsl #29
   18e1c:	andeq	r8, r1, ip, lsl #29
   18e20:	andeq	r8, r1, r4, asr pc
   18e24:	andeq	r8, r1, ip, ror #30
   18e28:	andeq	r8, r1, ip, lsl #29
   18e2c:	andeq	r8, r1, ip, lsl #29
   18e30:	andeq	r8, r1, ip, lsl #29
   18e34:	andeq	r8, r1, r8, ror lr
   18e38:	andeq	r8, r1, ip, lsl #29
   18e3c:	andeq	r8, r1, ip, lsl #29
   18e40:	andeq	r8, r1, ip, lsl #29
   18e44:			; <UNDEFINED> instruction: 0x00018ebc
   18e48:	andeq	r8, r1, ip, lsl #29
   18e4c:	ldrdeq	r8, [r1], -r0
   18e50:	andeq	r8, r1, ip, lsl #29
   18e54:	andeq	r8, r1, ip, lsl #29
   18e58:	andeq	r8, r1, ip, lsl #29
   18e5c:	andeq	r8, r1, ip, lsl #29
   18e60:	andeq	r8, r1, ip, lsl #29
   18e64:	andeq	r8, r1, ip, lsl #29
   18e68:	andeq	r8, r1, r4, ror #29
   18e6c:	andeq	r8, r1, ip, lsl #29
   18e70:	andeq	r8, r1, ip, lsl #29
   18e74:	andeq	r8, r1, r0, ror #30
   18e78:	add	r0, sp, #4
   18e7c:	mov	r1, r5
   18e80:	mov	r2, #3
   18e84:	bl	19028 <__assert_fail@plt+0x7ac8>
   18e88:	b	18f6c <__assert_fail@plt+0x7a0c>
   18e8c:	ldr	r0, [sp, #4]
   18e90:	ldr	r1, [sp]
   18e94:	str	r0, [r1]
   18e98:	orr	r8, r8, #2
   18e9c:	b	18f94 <__assert_fail@plt+0x7a34>
   18ea0:	cmp	r0, #105	; 0x69
   18ea4:	bne	18d88 <__assert_fail@plt+0x7828>
   18ea8:	ldrb	r0, [r7, #2]
   18eac:	mov	r6, #1
   18eb0:	cmp	r0, #66	; 0x42
   18eb4:	movweq	r6, #3
   18eb8:	b	18d88 <__assert_fail@plt+0x7828>
   18ebc:	add	r0, sp, #4
   18ec0:	mov	r1, r5
   18ec4:	mov	r2, #1
   18ec8:	bl	19028 <__assert_fail@plt+0x7ac8>
   18ecc:	b	18f6c <__assert_fail@plt+0x7a0c>
   18ed0:	add	r0, sp, #4
   18ed4:	mov	r1, r5
   18ed8:	mov	r2, #2
   18edc:	bl	19028 <__assert_fail@plt+0x7ac8>
   18ee0:	b	18f6c <__assert_fail@plt+0x7a0c>
   18ee4:	add	r0, sp, #4
   18ee8:	mov	r1, r5
   18eec:	mov	r2, #4
   18ef0:	bl	19028 <__assert_fail@plt+0x7ac8>
   18ef4:	b	18f6c <__assert_fail@plt+0x7a0c>
   18ef8:	add	r0, sp, #4
   18efc:	mov	r1, r5
   18f00:	mov	r2, #7
   18f04:	bl	19028 <__assert_fail@plt+0x7ac8>
   18f08:	b	18f6c <__assert_fail@plt+0x7a0c>
   18f0c:	add	r0, sp, #4
   18f10:	mov	r1, #1024	; 0x400
   18f14:	b	18f68 <__assert_fail@plt+0x7a08>
   18f18:	add	r0, sp, #4
   18f1c:	mov	r1, r5
   18f20:	mov	r2, #6
   18f24:	bl	19028 <__assert_fail@plt+0x7ac8>
   18f28:	b	18f6c <__assert_fail@plt+0x7a0c>
   18f2c:	add	r0, sp, #4
   18f30:	mov	r1, r5
   18f34:	mov	r2, #5
   18f38:	bl	19028 <__assert_fail@plt+0x7ac8>
   18f3c:	b	18f6c <__assert_fail@plt+0x7a0c>
   18f40:	add	r0, sp, #4
   18f44:	mov	r1, r5
   18f48:	mov	r2, #8
   18f4c:	bl	19028 <__assert_fail@plt+0x7ac8>
   18f50:	b	18f6c <__assert_fail@plt+0x7a0c>
   18f54:	add	r0, sp, #4
   18f58:	mov	r1, #512	; 0x200
   18f5c:	b	18f68 <__assert_fail@plt+0x7a08>
   18f60:	add	r0, sp, #4
   18f64:	mov	r1, #2
   18f68:	bl	18fc0 <__assert_fail@plt+0x7a60>
   18f6c:	ldr	r1, [r9]
   18f70:	add	r2, r1, r6
   18f74:	str	r2, [r9]
   18f78:	ldrb	r1, [r1, r6]
   18f7c:	orr	r8, r0, r8
   18f80:	cmp	r1, #0
   18f84:	orrne	r8, r8, #2
   18f88:	ldr	r0, [sp, #4]
   18f8c:	ldr	r1, [sp]
   18f90:	str	r0, [r1]
   18f94:	mov	r0, r8
   18f98:	sub	sp, fp, #28
   18f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fa0:	movw	r0, #46594	; 0xb602
   18fa4:	movt	r0, #1
   18fa8:	movw	r1, #46632	; 0xb628
   18fac:	movt	r1, #1
   18fb0:	movw	r3, #46648	; 0xb638
   18fb4:	movt	r3, #1
   18fb8:	mov	r2, #85	; 0x55
   18fbc:	bl	11560 <__assert_fail@plt>
   18fc0:	cmn	r1, #1
   18fc4:	ble	18ff8 <__assert_fail@plt+0x7a98>
   18fc8:	cmp	r1, #0
   18fcc:	beq	19010 <__assert_fail@plt+0x7ab0>
   18fd0:	push	{fp, lr}
   18fd4:	mov	fp, sp
   18fd8:	mvn	r3, #0
   18fdc:	udiv	ip, r3, r1
   18fe0:	ldr	lr, [r0]
   18fe4:	mov	r2, #1
   18fe8:	cmp	ip, lr
   18fec:	pop	{fp, lr}
   18ff0:	bcs	19010 <__assert_fail@plt+0x7ab0>
   18ff4:	b	1901c <__assert_fail@plt+0x7abc>
   18ff8:	ldr	r2, [r0]
   18ffc:	cmp	r2, #0
   19000:	beq	19010 <__assert_fail@plt+0x7ab0>
   19004:	mov	r2, #1
   19008:	mvn	r3, #0
   1900c:	b	1901c <__assert_fail@plt+0x7abc>
   19010:	ldr	r2, [r0]
   19014:	mul	r3, r2, r1
   19018:	mov	r2, #0
   1901c:	str	r3, [r0]
   19020:	mov	r0, r2
   19024:	bx	lr
   19028:	push	{r4, r5, r6, r7, fp, lr}
   1902c:	add	fp, sp, #16
   19030:	cmp	r2, #0
   19034:	moveq	r6, #0
   19038:	moveq	r0, r6
   1903c:	popeq	{r4, r5, r6, r7, fp, pc}
   19040:	mov	r4, r2
   19044:	mov	r5, r1
   19048:	mov	r7, r0
   1904c:	mov	r6, #0
   19050:	mov	r0, r7
   19054:	mov	r1, r5
   19058:	bl	18fc0 <__assert_fail@plt+0x7a60>
   1905c:	orr	r6, r0, r6
   19060:	subs	r4, r4, #1
   19064:	bne	19050 <__assert_fail@plt+0x7af0>
   19068:	mov	r0, r6
   1906c:	pop	{r4, r5, r6, r7, fp, pc}
   19070:	clz	r2, r1
   19074:	lsr	r2, r2, #5
   19078:	clz	r3, r0
   1907c:	lsr	r3, r3, #5
   19080:	orrs	r2, r3, r2
   19084:	movwne	r1, #1
   19088:	movwne	r0, #1
   1908c:	cmp	r1, #0
   19090:	beq	190c0 <__assert_fail@plt+0x7b60>
   19094:	mvn	r2, #-2147483648	; 0x80000000
   19098:	udiv	r2, r2, r1
   1909c:	cmp	r2, r0
   190a0:	bcs	190c0 <__assert_fail@plt+0x7b60>
   190a4:	push	{fp, lr}
   190a8:	mov	fp, sp
   190ac:	bl	11410 <__errno_location@plt>
   190b0:	mov	r1, #12
   190b4:	str	r1, [r0]
   190b8:	mov	r0, #0
   190bc:	pop	{fp, pc}
   190c0:	b	11224 <calloc@plt>
   190c4:	cmp	r0, #0
   190c8:	movweq	r0, #1
   190cc:	cmn	r0, #1
   190d0:	ble	190d8 <__assert_fail@plt+0x7b78>
   190d4:	b	11380 <malloc@plt>
   190d8:	push	{fp, lr}
   190dc:	mov	fp, sp
   190e0:	bl	11410 <__errno_location@plt>
   190e4:	mov	r1, #12
   190e8:	str	r1, [r0]
   190ec:	mov	r0, #0
   190f0:	pop	{fp, pc}
   190f4:	push	{fp, lr}
   190f8:	mov	fp, sp
   190fc:	cmp	r0, #0
   19100:	beq	1911c <__assert_fail@plt+0x7bbc>
   19104:	cmp	r1, #0
   19108:	beq	19128 <__assert_fail@plt+0x7bc8>
   1910c:	cmn	r1, #1
   19110:	ble	19134 <__assert_fail@plt+0x7bd4>
   19114:	pop	{fp, lr}
   19118:	b	112e4 <realloc@plt>
   1911c:	mov	r0, r1
   19120:	pop	{fp, lr}
   19124:	b	190c4 <__assert_fail@plt+0x7b64>
   19128:	bl	12fd4 <__assert_fail@plt+0x1a74>
   1912c:	mov	r0, #0
   19130:	pop	{fp, pc}
   19134:	bl	11410 <__errno_location@plt>
   19138:	mov	r1, #12
   1913c:	str	r1, [r0]
   19140:	mov	r0, #0
   19144:	pop	{fp, pc}
   19148:	push	{r4, r5, fp, lr}
   1914c:	add	fp, sp, #8
   19150:	rsb	lr, r2, #64	; 0x40
   19154:	lsr	ip, r0, lr
   19158:	rsb	r3, lr, #32
   1915c:	orr	ip, ip, r1, lsl r3
   19160:	rsb	r4, r2, #32
   19164:	cmp	r4, #0
   19168:	lsrge	ip, r1, r4
   1916c:	lsl	r3, r0, r2
   19170:	sub	r5, r2, #32
   19174:	cmp	r5, #0
   19178:	movwge	r3, #0
   1917c:	orr	ip, ip, r3
   19180:	lsr	r3, r0, r4
   19184:	orr	r2, r3, r1, lsl r2
   19188:	lslge	r2, r0, r5
   1918c:	lsr	r0, r1, lr
   19190:	cmp	r4, #0
   19194:	movwge	r0, #0
   19198:	orr	r1, r0, r2
   1919c:	mov	r0, ip
   191a0:	pop	{r4, r5, fp, pc}
   191a4:	push	{r4, r5, fp, lr}
   191a8:	add	fp, sp, #8
   191ac:	lsr	ip, r0, r2
   191b0:	rsb	r3, r2, #32
   191b4:	orr	ip, ip, r1, lsl r3
   191b8:	sub	lr, r2, #32
   191bc:	cmp	lr, #0
   191c0:	lsrge	ip, r1, lr
   191c4:	rsb	r4, r2, #64	; 0x40
   191c8:	lsl	r5, r0, r4
   191cc:	cmp	r3, #0
   191d0:	movwge	r5, #0
   191d4:	orr	ip, r5, ip
   191d8:	rsb	r5, r4, #32
   191dc:	lsr	r5, r0, r5
   191e0:	orr	r4, r5, r1, lsl r4
   191e4:	cmp	r3, #0
   191e8:	lslge	r4, r0, r3
   191ec:	lsr	r0, r1, r2
   191f0:	cmp	lr, #0
   191f4:	movwge	r0, #0
   191f8:	orr	r1, r4, r0
   191fc:	mov	r0, ip
   19200:	pop	{r4, r5, fp, pc}
   19204:	rsb	r1, r1, #32
   19208:	ror	r0, r0, r1
   1920c:	bx	lr
   19210:	ror	r0, r0, r1
   19214:	bx	lr
   19218:	rsb	r1, r1, #32
   1921c:	ror	r0, r0, r1
   19220:	bx	lr
   19224:	ror	r0, r0, r1
   19228:	bx	lr
   1922c:	and	r2, r1, #15
   19230:	lsl	r2, r0, r2
   19234:	rsb	r1, r1, #0
   19238:	and	r1, r1, #15
   1923c:	orr	r0, r2, r0, lsr r1
   19240:	uxth	r0, r0
   19244:	bx	lr
   19248:	and	r2, r1, #15
   1924c:	lsr	r2, r0, r2
   19250:	rsb	r1, r1, #0
   19254:	and	r1, r1, #15
   19258:	orr	r0, r2, r0, lsl r1
   1925c:	uxth	r0, r0
   19260:	bx	lr
   19264:	and	r2, r1, #7
   19268:	lsl	r2, r0, r2
   1926c:	rsb	r1, r1, #0
   19270:	and	r1, r1, #7
   19274:	orr	r0, r2, r0, lsr r1
   19278:	uxtb	r0, r0
   1927c:	bx	lr
   19280:	and	r2, r1, #7
   19284:	lsr	r2, r0, r2
   19288:	rsb	r1, r1, #0
   1928c:	and	r1, r1, #7
   19290:	orr	r0, r2, r0, lsl r1
   19294:	uxtb	r0, r0
   19298:	bx	lr
   1929c:	mov	r1, r0
   192a0:	sub	r2, r0, #65	; 0x41
   192a4:	mov	r0, #1
   192a8:	cmp	r2, #26
   192ac:	subcs	r2, r1, #97	; 0x61
   192b0:	cmpcs	r2, #26
   192b4:	bcs	192bc <__assert_fail@plt+0x7d5c>
   192b8:	bx	lr
   192bc:	sub	r1, r1, #48	; 0x30
   192c0:	cmp	r1, #10
   192c4:	movcs	r0, #0
   192c8:	bx	lr
   192cc:	mov	r1, r0
   192d0:	sub	r2, r0, #65	; 0x41
   192d4:	mov	r0, #1
   192d8:	cmp	r2, #26
   192dc:	subcs	r1, r1, #97	; 0x61
   192e0:	cmpcs	r1, #26
   192e4:	movcs	r0, #0
   192e8:	bx	lr
   192ec:	mov	r1, #0
   192f0:	cmp	r0, #128	; 0x80
   192f4:	movwcc	r1, #1
   192f8:	mov	r0, r1
   192fc:	bx	lr
   19300:	sub	r1, r0, #9
   19304:	clz	r1, r1
   19308:	lsr	r1, r1, #5
   1930c:	sub	r0, r0, #32
   19310:	clz	r0, r0
   19314:	lsr	r0, r0, #5
   19318:	orr	r0, r0, r1
   1931c:	bx	lr
   19320:	mov	r1, r0
   19324:	mov	r0, #1
   19328:	cmp	r1, #32
   1932c:	bxcc	lr
   19330:	cmp	r1, #127	; 0x7f
   19334:	movne	r0, #0
   19338:	bx	lr
   1933c:	sub	r1, r0, #48	; 0x30
   19340:	mov	r0, #0
   19344:	cmp	r1, #10
   19348:	movwcc	r0, #1
   1934c:	bx	lr
   19350:	sub	r1, r0, #33	; 0x21
   19354:	mov	r0, #0
   19358:	cmp	r1, #94	; 0x5e
   1935c:	movwcc	r0, #1
   19360:	bx	lr
   19364:	sub	r1, r0, #97	; 0x61
   19368:	mov	r0, #0
   1936c:	cmp	r1, #26
   19370:	movwcc	r0, #1
   19374:	bx	lr
   19378:	sub	r1, r0, #32
   1937c:	mov	r0, #0
   19380:	cmp	r1, #95	; 0x5f
   19384:	movwcc	r0, #1
   19388:	bx	lr
   1938c:	sub	r1, r0, #33	; 0x21
   19390:	cmp	r1, #93	; 0x5d
   19394:	bhi	19520 <__assert_fail@plt+0x7fc0>
   19398:	mov	r0, #1
   1939c:	add	r2, pc, #0
   193a0:	ldr	pc, [r2, r1, lsl #2]
   193a4:	andeq	r9, r1, ip, lsl r5
   193a8:	andeq	r9, r1, ip, lsl r5
   193ac:	andeq	r9, r1, ip, lsl r5
   193b0:	andeq	r9, r1, ip, lsl r5
   193b4:	andeq	r9, r1, ip, lsl r5
   193b8:	andeq	r9, r1, ip, lsl r5
   193bc:	andeq	r9, r1, ip, lsl r5
   193c0:	andeq	r9, r1, ip, lsl r5
   193c4:	andeq	r9, r1, ip, lsl r5
   193c8:	andeq	r9, r1, ip, lsl r5
   193cc:	andeq	r9, r1, ip, lsl r5
   193d0:	andeq	r9, r1, ip, lsl r5
   193d4:	andeq	r9, r1, ip, lsl r5
   193d8:	andeq	r9, r1, ip, lsl r5
   193dc:	andeq	r9, r1, ip, lsl r5
   193e0:	andeq	r9, r1, r0, lsr #10
   193e4:	andeq	r9, r1, r0, lsr #10
   193e8:	andeq	r9, r1, r0, lsr #10
   193ec:	andeq	r9, r1, r0, lsr #10
   193f0:	andeq	r9, r1, r0, lsr #10
   193f4:	andeq	r9, r1, r0, lsr #10
   193f8:	andeq	r9, r1, r0, lsr #10
   193fc:	andeq	r9, r1, r0, lsr #10
   19400:	andeq	r9, r1, r0, lsr #10
   19404:	andeq	r9, r1, r0, lsr #10
   19408:	andeq	r9, r1, ip, lsl r5
   1940c:	andeq	r9, r1, ip, lsl r5
   19410:	andeq	r9, r1, ip, lsl r5
   19414:	andeq	r9, r1, ip, lsl r5
   19418:	andeq	r9, r1, ip, lsl r5
   1941c:	andeq	r9, r1, ip, lsl r5
   19420:	andeq	r9, r1, ip, lsl r5
   19424:	andeq	r9, r1, r0, lsr #10
   19428:	andeq	r9, r1, r0, lsr #10
   1942c:	andeq	r9, r1, r0, lsr #10
   19430:	andeq	r9, r1, r0, lsr #10
   19434:	andeq	r9, r1, r0, lsr #10
   19438:	andeq	r9, r1, r0, lsr #10
   1943c:	andeq	r9, r1, r0, lsr #10
   19440:	andeq	r9, r1, r0, lsr #10
   19444:	andeq	r9, r1, r0, lsr #10
   19448:	andeq	r9, r1, r0, lsr #10
   1944c:	andeq	r9, r1, r0, lsr #10
   19450:	andeq	r9, r1, r0, lsr #10
   19454:	andeq	r9, r1, r0, lsr #10
   19458:	andeq	r9, r1, r0, lsr #10
   1945c:	andeq	r9, r1, r0, lsr #10
   19460:	andeq	r9, r1, r0, lsr #10
   19464:	andeq	r9, r1, r0, lsr #10
   19468:	andeq	r9, r1, r0, lsr #10
   1946c:	andeq	r9, r1, r0, lsr #10
   19470:	andeq	r9, r1, r0, lsr #10
   19474:	andeq	r9, r1, r0, lsr #10
   19478:	andeq	r9, r1, r0, lsr #10
   1947c:	andeq	r9, r1, r0, lsr #10
   19480:	andeq	r9, r1, r0, lsr #10
   19484:	andeq	r9, r1, r0, lsr #10
   19488:	andeq	r9, r1, r0, lsr #10
   1948c:	andeq	r9, r1, ip, lsl r5
   19490:	andeq	r9, r1, ip, lsl r5
   19494:	andeq	r9, r1, ip, lsl r5
   19498:	andeq	r9, r1, ip, lsl r5
   1949c:	andeq	r9, r1, ip, lsl r5
   194a0:	andeq	r9, r1, ip, lsl r5
   194a4:	andeq	r9, r1, r0, lsr #10
   194a8:	andeq	r9, r1, r0, lsr #10
   194ac:	andeq	r9, r1, r0, lsr #10
   194b0:	andeq	r9, r1, r0, lsr #10
   194b4:	andeq	r9, r1, r0, lsr #10
   194b8:	andeq	r9, r1, r0, lsr #10
   194bc:	andeq	r9, r1, r0, lsr #10
   194c0:	andeq	r9, r1, r0, lsr #10
   194c4:	andeq	r9, r1, r0, lsr #10
   194c8:	andeq	r9, r1, r0, lsr #10
   194cc:	andeq	r9, r1, r0, lsr #10
   194d0:	andeq	r9, r1, r0, lsr #10
   194d4:	andeq	r9, r1, r0, lsr #10
   194d8:	andeq	r9, r1, r0, lsr #10
   194dc:	andeq	r9, r1, r0, lsr #10
   194e0:	andeq	r9, r1, r0, lsr #10
   194e4:	andeq	r9, r1, r0, lsr #10
   194e8:	andeq	r9, r1, r0, lsr #10
   194ec:	andeq	r9, r1, r0, lsr #10
   194f0:	andeq	r9, r1, r0, lsr #10
   194f4:	andeq	r9, r1, r0, lsr #10
   194f8:	andeq	r9, r1, r0, lsr #10
   194fc:	andeq	r9, r1, r0, lsr #10
   19500:	andeq	r9, r1, r0, lsr #10
   19504:	andeq	r9, r1, r0, lsr #10
   19508:	andeq	r9, r1, r0, lsr #10
   1950c:	andeq	r9, r1, ip, lsl r5
   19510:	andeq	r9, r1, ip, lsl r5
   19514:	andeq	r9, r1, ip, lsl r5
   19518:	andeq	r9, r1, ip, lsl r5
   1951c:	bx	lr
   19520:	mov	r0, #0
   19524:	bx	lr
   19528:	sub	r0, r0, #9
   1952c:	cmp	r0, #23
   19530:	movhi	r0, #0
   19534:	bxhi	lr
   19538:	bic	r0, r0, #-16777216	; 0xff000000
   1953c:	movw	r1, #31
   19540:	movt	r1, #128	; 0x80
   19544:	mov	r2, #1
   19548:	and	r0, r2, r1, lsr r0
   1954c:	bx	lr
   19550:	sub	r1, r0, #65	; 0x41
   19554:	mov	r0, #0
   19558:	cmp	r1, #26
   1955c:	movwcc	r0, #1
   19560:	bx	lr
   19564:	mov	r1, r0
   19568:	sub	r2, r0, #48	; 0x30
   1956c:	mov	r0, #1
   19570:	cmp	r2, #22
   19574:	bhi	1958c <__assert_fail@plt+0x802c>
   19578:	mov	ip, #1
   1957c:	movw	r3, #1023	; 0x3ff
   19580:	movt	r3, #126	; 0x7e
   19584:	tst	r3, ip, lsl r2
   19588:	bxne	lr
   1958c:	sub	r1, r1, #97	; 0x61
   19590:	cmp	r1, #6
   19594:	movcs	r0, #0
   19598:	bxcs	lr
   1959c:	bx	lr
   195a0:	sub	r1, r0, #65	; 0x41
   195a4:	cmp	r1, #26
   195a8:	addcc	r0, r0, #32
   195ac:	bx	lr
   195b0:	sub	r1, r0, #97	; 0x61
   195b4:	cmp	r1, #26
   195b8:	subcc	r0, r0, #32
   195bc:	bx	lr
   195c0:	push	{r4, r5, r6, sl, fp, lr}
   195c4:	add	fp, sp, #16
   195c8:	mov	r4, r0
   195cc:	bl	11344 <__fpending@plt>
   195d0:	mov	r5, r0
   195d4:	mov	r0, r4
   195d8:	bl	11350 <ferror_unlocked@plt>
   195dc:	mov	r6, r0
   195e0:	mov	r0, r4
   195e4:	bl	19764 <__assert_fail@plt+0x8204>
   195e8:	cmp	r6, #0
   195ec:	beq	1960c <__assert_fail@plt+0x80ac>
   195f0:	mvn	r4, #0
   195f4:	cmp	r0, #0
   195f8:	bne	19640 <__assert_fail@plt+0x80e0>
   195fc:	bl	11410 <__errno_location@plt>
   19600:	mov	r1, #0
   19604:	str	r1, [r0]
   19608:	b	19640 <__assert_fail@plt+0x80e0>
   1960c:	cmp	r0, #0
   19610:	mov	r4, r0
   19614:	mvnne	r4, #0
   19618:	cmp	r5, #0
   1961c:	bne	19640 <__assert_fail@plt+0x80e0>
   19620:	cmp	r0, #0
   19624:	beq	19640 <__assert_fail@plt+0x80e0>
   19628:	bl	11410 <__errno_location@plt>
   1962c:	ldr	r0, [r0]
   19630:	subs	r4, r0, #9
   19634:	mvnne	r4, #0
   19638:	mov	r0, r4
   1963c:	pop	{r4, r5, r6, sl, fp, pc}
   19640:	mov	r0, r4
   19644:	pop	{r4, r5, r6, sl, fp, pc}
   19648:	mov	r1, #0
   1964c:	movw	r2, #62998	; 0xf616
   19650:	movt	r2, #149	; 0x95
   19654:	str	r1, [r0, #16]
   19658:	str	r1, [r0, #20]
   1965c:	str	r2, [r0, #24]
   19660:	bx	lr
   19664:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   19668:	add	fp, sp, #24
   1966c:	mov	r5, r1
   19670:	mov	r4, r0
   19674:	ldr	r0, [r0, #24]
   19678:	movw	r1, #62998	; 0xf616
   1967c:	movt	r1, #149	; 0x95
   19680:	cmp	r0, r1
   19684:	bne	19724 <__assert_fail@plt+0x81c4>
   19688:	mov	r1, r4
   1968c:	ldr	r2, [r1, #16]!
   19690:	ldr	r3, [r1, #4]
   19694:	orrs	r0, r2, r3
   19698:	beq	196d8 <__assert_fail@plt+0x8178>
   1969c:	ldm	r4, {r0, r7}
   196a0:	ldr	r6, [r5, #96]	; 0x60
   196a4:	ldr	r9, [r5, #100]	; 0x64
   196a8:	eor	r7, r9, r7
   196ac:	eor	r0, r6, r0
   196b0:	orrs	r0, r0, r7
   196b4:	bne	196d8 <__assert_fail@plt+0x8178>
   196b8:	ldr	r0, [r4, #8]
   196bc:	ldr	r7, [r4, #12]
   196c0:	ldm	r5, {r6, r9}
   196c4:	eor	r7, r9, r7
   196c8:	eor	r0, r6, r0
   196cc:	orrs	r0, r0, r7
   196d0:	mov	r0, #1
   196d4:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   196d8:	adds	r6, r2, #1
   196dc:	adc	r7, r3, #0
   196e0:	strd	r6, [r1]
   196e4:	mov	r0, r6
   196e8:	mov	r1, r7
   196ec:	bl	19744 <__assert_fail@plt+0x81e4>
   196f0:	mov	r1, r0
   196f4:	mov	r0, #0
   196f8:	cmp	r1, #0
   196fc:	beq	19720 <__assert_fail@plt+0x81c0>
   19700:	orrs	r1, r6, r7
   19704:	moveq	r0, #1
   19708:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   1970c:	ldrd	r2, [r5]
   19710:	str	r3, [r4, #12]
   19714:	str	r2, [r4, #8]
   19718:	ldrd	r2, [r5, #96]	; 0x60
   1971c:	stm	r4, {r2, r3}
   19720:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   19724:	movw	r0, #46729	; 0xb689
   19728:	movt	r0, #1
   1972c:	movw	r1, #46753	; 0xb6a1
   19730:	movt	r1, #1
   19734:	movw	r3, #46771	; 0xb6b3
   19738:	movt	r3, #1
   1973c:	mov	r2, #60	; 0x3c
   19740:	bl	11560 <__assert_fail@plt>
   19744:	subs	r2, r0, #1
   19748:	and	r0, r2, r0
   1974c:	sbc	r2, r1, #0
   19750:	and	r1, r2, r1
   19754:	orr	r0, r0, r1
   19758:	clz	r0, r0
   1975c:	lsr	r0, r0, #5
   19760:	bx	lr
   19764:	push	{r4, r5, fp, lr}
   19768:	add	fp, sp, #8
   1976c:	sub	sp, sp, #8
   19770:	mov	r4, r0
   19774:	bl	11440 <fileno@plt>
   19778:	cmn	r0, #1
   1977c:	ble	197f4 <__assert_fail@plt+0x8294>
   19780:	mov	r0, r4
   19784:	bl	11398 <__freading@plt>
   19788:	cmp	r0, #0
   1978c:	beq	197b8 <__assert_fail@plt+0x8258>
   19790:	mov	r0, r4
   19794:	bl	11440 <fileno@plt>
   19798:	mov	r1, #1
   1979c:	str	r1, [sp]
   197a0:	mov	r2, #0
   197a4:	mov	r3, #0
   197a8:	bl	1132c <lseek64@plt>
   197ac:	and	r0, r0, r1
   197b0:	cmn	r0, #1
   197b4:	beq	197f4 <__assert_fail@plt+0x8294>
   197b8:	mov	r0, r4
   197bc:	bl	19a30 <__assert_fail@plt+0x84d0>
   197c0:	cmp	r0, #0
   197c4:	beq	197f4 <__assert_fail@plt+0x8294>
   197c8:	bl	11410 <__errno_location@plt>
   197cc:	ldr	r5, [r0]
   197d0:	mov	r0, r4
   197d4:	bl	11458 <fclose@plt>
   197d8:	cmp	r5, #0
   197dc:	beq	197ec <__assert_fail@plt+0x828c>
   197e0:	bl	11410 <__errno_location@plt>
   197e4:	str	r5, [r0]
   197e8:	mvn	r0, #0
   197ec:	sub	sp, fp, #8
   197f0:	pop	{r4, r5, fp, pc}
   197f4:	mov	r0, r4
   197f8:	sub	sp, fp, #8
   197fc:	pop	{r4, r5, fp, lr}
   19800:	b	11458 <fclose@plt>
   19804:	sub	sp, sp, #8
   19808:	push	{fp, lr}
   1980c:	mov	fp, sp
   19810:	sub	sp, sp, #8
   19814:	str	r3, [fp, #12]
   19818:	str	r2, [fp, #8]
   1981c:	add	r2, fp, #8
   19820:	str	r2, [sp, #4]
   19824:	cmp	r1, #11
   19828:	bhi	19868 <__assert_fail@plt+0x8308>
   1982c:	mov	r2, #1
   19830:	movw	r3, #1300	; 0x514
   19834:	tst	r3, r2, lsl r1
   19838:	bne	198b8 <__assert_fail@plt+0x8358>
   1983c:	movw	r3, #2570	; 0xa0a
   19840:	tst	r3, r2, lsl r1
   19844:	bne	19890 <__assert_fail@plt+0x8330>
   19848:	cmp	r1, #0
   1984c:	bne	19868 <__assert_fail@plt+0x8308>
   19850:	ldr	r1, [sp, #4]
   19854:	add	r2, r1, #4
   19858:	str	r2, [sp, #4]
   1985c:	ldr	r1, [r1]
   19860:	bl	198dc <__assert_fail@plt+0x837c>
   19864:	b	198cc <__assert_fail@plt+0x836c>
   19868:	sub	r2, r1, #1024	; 0x400
   1986c:	cmp	r2, #10
   19870:	bhi	198b8 <__assert_fail@plt+0x8358>
   19874:	mov	ip, #1
   19878:	movw	r3, #645	; 0x285
   1987c:	tst	r3, ip, lsl r2
   19880:	bne	198b8 <__assert_fail@plt+0x8358>
   19884:	movw	r3, #1282	; 0x502
   19888:	tst	r3, ip, lsl r2
   1988c:	beq	19898 <__assert_fail@plt+0x8338>
   19890:	bl	11470 <fcntl64@plt>
   19894:	b	198cc <__assert_fail@plt+0x836c>
   19898:	cmp	r2, #6
   1989c:	bne	198b8 <__assert_fail@plt+0x8358>
   198a0:	ldr	r1, [sp, #4]
   198a4:	add	r2, r1, #4
   198a8:	str	r2, [sp, #4]
   198ac:	ldr	r1, [r1]
   198b0:	bl	198e8 <__assert_fail@plt+0x8388>
   198b4:	b	198cc <__assert_fail@plt+0x836c>
   198b8:	ldr	r2, [sp, #4]
   198bc:	add	r3, r2, #4
   198c0:	str	r3, [sp, #4]
   198c4:	ldr	r2, [r2]
   198c8:	bl	11470 <fcntl64@plt>
   198cc:	mov	sp, fp
   198d0:	pop	{fp, lr}
   198d4:	add	sp, sp, #8
   198d8:	bx	lr
   198dc:	mov	r2, r1
   198e0:	mov	r1, #0
   198e4:	b	11470 <fcntl64@plt>
   198e8:	push	{r4, r5, r6, r7, fp, lr}
   198ec:	add	fp, sp, #16
   198f0:	mov	r5, r1
   198f4:	mov	r6, r0
   198f8:	movw	r7, #49912	; 0xc2f8
   198fc:	movt	r7, #2
   19900:	ldr	r0, [r7]
   19904:	cmp	r0, #0
   19908:	blt	1996c <__assert_fail@plt+0x840c>
   1990c:	mov	r0, r6
   19910:	movw	r1, #1030	; 0x406
   19914:	mov	r2, r5
   19918:	bl	11470 <fcntl64@plt>
   1991c:	mov	r4, r0
   19920:	cmn	r0, #1
   19924:	bgt	19958 <__assert_fail@plt+0x83f8>
   19928:	bl	11410 <__errno_location@plt>
   1992c:	ldr	r0, [r0]
   19930:	cmp	r0, #22
   19934:	bne	19958 <__assert_fail@plt+0x83f8>
   19938:	mov	r0, r6
   1993c:	mov	r1, r5
   19940:	bl	198dc <__assert_fail@plt+0x837c>
   19944:	mov	r4, r0
   19948:	cmp	r0, #0
   1994c:	blt	199bc <__assert_fail@plt+0x845c>
   19950:	mvn	r0, #0
   19954:	b	1995c <__assert_fail@plt+0x83fc>
   19958:	mov	r0, #1
   1995c:	str	r0, [r7]
   19960:	cmp	r4, #0
   19964:	bge	19984 <__assert_fail@plt+0x8424>
   19968:	b	199bc <__assert_fail@plt+0x845c>
   1996c:	mov	r0, r6
   19970:	mov	r1, r5
   19974:	bl	198dc <__assert_fail@plt+0x837c>
   19978:	mov	r4, r0
   1997c:	cmp	r4, #0
   19980:	blt	199bc <__assert_fail@plt+0x845c>
   19984:	ldr	r0, [r7]
   19988:	cmn	r0, #1
   1998c:	bne	199bc <__assert_fail@plt+0x845c>
   19990:	mov	r0, r4
   19994:	mov	r1, #1
   19998:	bl	11470 <fcntl64@plt>
   1999c:	cmp	r0, #0
   199a0:	blt	199c4 <__assert_fail@plt+0x8464>
   199a4:	orr	r2, r0, #1
   199a8:	mov	r0, r4
   199ac:	mov	r1, #2
   199b0:	bl	11470 <fcntl64@plt>
   199b4:	cmn	r0, #1
   199b8:	beq	199c4 <__assert_fail@plt+0x8464>
   199bc:	mov	r0, r4
   199c0:	pop	{r4, r5, r6, r7, fp, pc}
   199c4:	bl	11410 <__errno_location@plt>
   199c8:	mov	r5, r0
   199cc:	ldr	r6, [r0]
   199d0:	mov	r0, r4
   199d4:	bl	11524 <close@plt>
   199d8:	str	r6, [r5]
   199dc:	mvn	r4, #0
   199e0:	mov	r0, r4
   199e4:	pop	{r4, r5, r6, r7, fp, pc}
   199e8:	sub	sp, sp, #8
   199ec:	push	{fp, lr}
   199f0:	mov	fp, sp
   199f4:	sub	sp, sp, #8
   199f8:	str	r3, [fp, #12]
   199fc:	str	r2, [fp, #8]
   19a00:	mov	r2, #0
   19a04:	tst	r1, #64	; 0x40
   19a08:	addne	r2, fp, #8
   19a0c:	orrne	r2, r2, #4
   19a10:	strne	r2, [sp, #4]
   19a14:	ldrne	r2, [fp, #8]
   19a18:	bl	11374 <open64@plt>
   19a1c:	bl	17e48 <__assert_fail@plt+0x68e8>
   19a20:	mov	sp, fp
   19a24:	pop	{fp, lr}
   19a28:	add	sp, sp, #8
   19a2c:	bx	lr
   19a30:	push	{r4, sl, fp, lr}
   19a34:	add	fp, sp, #8
   19a38:	mov	r4, r0
   19a3c:	cmp	r0, #0
   19a40:	beq	19a58 <__assert_fail@plt+0x84f8>
   19a44:	mov	r0, r4
   19a48:	bl	11398 <__freading@plt>
   19a4c:	cmp	r0, #0
   19a50:	movne	r0, r4
   19a54:	blne	19a64 <__assert_fail@plt+0x8504>
   19a58:	mov	r0, r4
   19a5c:	pop	{r4, sl, fp, lr}
   19a60:	b	11278 <fflush@plt>
   19a64:	ldrb	r1, [r0, #1]
   19a68:	tst	r1, #1
   19a6c:	bxeq	lr
   19a70:	push	{fp, lr}
   19a74:	mov	fp, sp
   19a78:	sub	sp, sp, #8
   19a7c:	mov	r1, #1
   19a80:	str	r1, [sp]
   19a84:	mov	r2, #0
   19a88:	mov	r3, #0
   19a8c:	bl	19a98 <__assert_fail@plt+0x8538>
   19a90:	mov	sp, fp
   19a94:	pop	{fp, pc}
   19a98:	push	{r4, r5, r6, r7, fp, lr}
   19a9c:	add	fp, sp, #16
   19aa0:	sub	sp, sp, #8
   19aa4:	mov	r5, r3
   19aa8:	mov	r6, r2
   19aac:	mov	r4, r0
   19ab0:	ldr	r0, [r0, #4]
   19ab4:	ldr	r1, [r4, #8]
   19ab8:	cmp	r1, r0
   19abc:	bne	19ad8 <__assert_fail@plt+0x8578>
   19ac0:	ldrd	r0, [r4, #16]
   19ac4:	cmp	r1, r0
   19ac8:	bne	19ad8 <__assert_fail@plt+0x8578>
   19acc:	ldr	r0, [r4, #36]	; 0x24
   19ad0:	cmp	r0, #0
   19ad4:	beq	19af0 <__assert_fail@plt+0x8590>
   19ad8:	mov	r0, r4
   19adc:	mov	r2, r6
   19ae0:	mov	r3, r5
   19ae4:	sub	sp, fp, #16
   19ae8:	pop	{r4, r5, r6, r7, fp, lr}
   19aec:	b	11464 <fseeko64@plt>
   19af0:	ldr	r7, [fp, #8]
   19af4:	mov	r0, r4
   19af8:	bl	11440 <fileno@plt>
   19afc:	str	r7, [sp]
   19b00:	mov	r2, r6
   19b04:	mov	r3, r5
   19b08:	bl	1132c <lseek64@plt>
   19b0c:	and	r2, r0, r1
   19b10:	cmn	r2, #1
   19b14:	mvneq	r0, #0
   19b18:	subeq	sp, fp, #16
   19b1c:	popeq	{r4, r5, r6, r7, fp, pc}
   19b20:	strd	r0, [r4, #80]	; 0x50
   19b24:	ldr	r0, [r4]
   19b28:	bic	r0, r0, #16
   19b2c:	str	r0, [r4]
   19b30:	mov	r0, #0
   19b34:	sub	sp, fp, #16
   19b38:	pop	{r4, r5, r6, r7, fp, pc}
   19b3c:	push	{fp, lr}
   19b40:	mov	fp, sp
   19b44:	bl	11410 <__errno_location@plt>
   19b48:	mov	r1, #12
   19b4c:	str	r1, [r0]
   19b50:	mov	r0, #0
   19b54:	pop	{fp, pc}
   19b58:	b	190c4 <__assert_fail@plt+0x7b64>
   19b5c:	cmp	r1, #0
   19b60:	orreq	r1, r1, #1
   19b64:	b	190f4 <__assert_fail@plt+0x7b94>
   19b68:	b	19070 <__assert_fail@plt+0x7b10>
   19b6c:	clz	r3, r2
   19b70:	lsr	ip, r3, #5
   19b74:	clz	r3, r1
   19b78:	lsr	r3, r3, #5
   19b7c:	orrs	r3, r3, ip
   19b80:	movwne	r1, #1
   19b84:	movwne	r2, #1
   19b88:	b	19c24 <__assert_fail@plt+0x86c4>
   19b8c:	push	{fp, lr}
   19b90:	mov	fp, sp
   19b94:	mov	r0, #14
   19b98:	bl	114a0 <nl_langinfo@plt>
   19b9c:	movw	r1, #42872	; 0xa778
   19ba0:	movt	r1, #1
   19ba4:	cmp	r0, #0
   19ba8:	movne	r1, r0
   19bac:	ldrb	r2, [r1]
   19bb0:	movw	r0, #46838	; 0xb6f6
   19bb4:	movt	r0, #1
   19bb8:	cmp	r2, #0
   19bbc:	movne	r0, r1
   19bc0:	pop	{fp, pc}
   19bc4:	push	{r4, r5, r6, r7, fp, lr}
   19bc8:	add	fp, sp, #16
   19bcc:	sub	sp, sp, #8
   19bd0:	mov	r7, r2
   19bd4:	mov	r4, r1
   19bd8:	add	r5, sp, #4
   19bdc:	cmp	r0, #0
   19be0:	movne	r5, r0
   19be4:	mov	r0, r5
   19be8:	bl	1135c <mbrtowc@plt>
   19bec:	mov	r6, r0
   19bf0:	cmp	r7, #0
   19bf4:	beq	19c18 <__assert_fail@plt+0x86b8>
   19bf8:	cmn	r6, #2
   19bfc:	bcc	19c18 <__assert_fail@plt+0x86b8>
   19c00:	mov	r0, #0
   19c04:	bl	19c6c <__assert_fail@plt+0x870c>
   19c08:	cmp	r0, #0
   19c0c:	ldrbeq	r0, [r4]
   19c10:	streq	r0, [r5]
   19c14:	moveq	r6, #1
   19c18:	mov	r0, r6
   19c1c:	sub	sp, fp, #16
   19c20:	pop	{r4, r5, r6, r7, fp, pc}
   19c24:	cmp	r2, #0
   19c28:	beq	19c58 <__assert_fail@plt+0x86f8>
   19c2c:	mvn	r3, #0
   19c30:	udiv	r3, r3, r2
   19c34:	cmp	r3, r1
   19c38:	bcs	19c58 <__assert_fail@plt+0x86f8>
   19c3c:	push	{fp, lr}
   19c40:	mov	fp, sp
   19c44:	bl	11410 <__errno_location@plt>
   19c48:	mov	r1, #12
   19c4c:	str	r1, [r0]
   19c50:	mov	r0, #0
   19c54:	pop	{fp, pc}
   19c58:	mul	r1, r2, r1
   19c5c:	b	190f4 <__assert_fail@plt+0x7b94>
   19c60:	mov	r1, #0
   19c64:	mov	r2, #3
   19c68:	b	19804 <__assert_fail@plt+0x82a4>
   19c6c:	push	{r4, sl, fp, lr}
   19c70:	add	fp, sp, #8
   19c74:	sub	sp, sp, #264	; 0x108
   19c78:	add	r1, sp, #7
   19c7c:	movw	r2, #257	; 0x101
   19c80:	bl	19cd0 <__assert_fail@plt+0x8770>
   19c84:	mov	r4, #0
   19c88:	cmp	r0, #0
   19c8c:	bne	19cc4 <__assert_fail@plt+0x8764>
   19c90:	add	r0, sp, #7
   19c94:	movw	r1, #46844	; 0xb6fc
   19c98:	movt	r1, #1
   19c9c:	bl	11260 <strcmp@plt>
   19ca0:	cmp	r0, #0
   19ca4:	beq	19cc4 <__assert_fail@plt+0x8764>
   19ca8:	add	r0, sp, #7
   19cac:	movw	r1, #46846	; 0xb6fe
   19cb0:	movt	r1, #1
   19cb4:	bl	11260 <strcmp@plt>
   19cb8:	mov	r4, r0
   19cbc:	cmp	r0, #0
   19cc0:	movwne	r4, #1
   19cc4:	mov	r0, r4
   19cc8:	sub	sp, fp, #8
   19ccc:	pop	{r4, sl, fp, pc}
   19cd0:	b	19cd4 <__assert_fail@plt+0x8774>
   19cd4:	push	{r4, r5, r6, r7, fp, lr}
   19cd8:	add	fp, sp, #16
   19cdc:	mov	r6, r2
   19ce0:	mov	r4, r1
   19ce4:	bl	19d70 <__assert_fail@plt+0x8810>
   19ce8:	cmp	r0, #0
   19cec:	beq	19d1c <__assert_fail@plt+0x87bc>
   19cf0:	mov	r7, r0
   19cf4:	bl	113e0 <strlen@plt>
   19cf8:	cmp	r0, r6
   19cfc:	bcs	19d3c <__assert_fail@plt+0x87dc>
   19d00:	add	r2, r0, #1
   19d04:	mov	r0, r4
   19d08:	mov	r1, r7
   19d0c:	bl	112a8 <memcpy@plt>
   19d10:	mov	r5, #0
   19d14:	mov	r0, r5
   19d18:	pop	{r4, r5, r6, r7, fp, pc}
   19d1c:	mov	r5, #22
   19d20:	cmp	r6, #0
   19d24:	movne	r0, #0
   19d28:	strbne	r0, [r4]
   19d2c:	movne	r0, r5
   19d30:	popne	{r4, r5, r6, r7, fp, pc}
   19d34:	mov	r0, r5
   19d38:	pop	{r4, r5, r6, r7, fp, pc}
   19d3c:	mov	r5, #34	; 0x22
   19d40:	cmp	r6, #0
   19d44:	beq	19d64 <__assert_fail@plt+0x8804>
   19d48:	sub	r6, r6, #1
   19d4c:	mov	r0, r4
   19d50:	mov	r1, r7
   19d54:	mov	r2, r6
   19d58:	bl	112a8 <memcpy@plt>
   19d5c:	mov	r0, #0
   19d60:	strb	r0, [r4, r6]
   19d64:	mov	r0, r5
   19d68:	pop	{r4, r5, r6, r7, fp, pc}
   19d6c:	b	19d70 <__assert_fail@plt+0x8810>
   19d70:	mov	r1, #0
   19d74:	b	1147c <setlocale@plt>
   19d78:	cmp	r3, #0
   19d7c:	cmpeq	r2, #0
   19d80:	bne	19d98 <__assert_fail@plt+0x8838>
   19d84:	cmp	r1, #0
   19d88:	cmpeq	r0, #0
   19d8c:	mvnne	r1, #0
   19d90:	mvnne	r0, #0
   19d94:	b	19db4 <__assert_fail@plt+0x8854>
   19d98:	sub	sp, sp, #8
   19d9c:	push	{sp, lr}
   19da0:	bl	19dc4 <__assert_fail@plt+0x8864>
   19da4:	ldr	lr, [sp, #4]
   19da8:	add	sp, sp, #8
   19dac:	pop	{r2, r3}
   19db0:	bx	lr
   19db4:	push	{r1, lr}
   19db8:	mov	r0, #8
   19dbc:	bl	11248 <raise@plt>
   19dc0:	pop	{r1, pc}
   19dc4:	cmp	r1, r3
   19dc8:	cmpeq	r0, r2
   19dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dd0:	mov	r4, r0
   19dd4:	movcc	r0, #0
   19dd8:	mov	r5, r1
   19ddc:	ldr	lr, [sp, #36]	; 0x24
   19de0:	movcc	r1, r0
   19de4:	bcc	19ee0 <__assert_fail@plt+0x8980>
   19de8:	cmp	r3, #0
   19dec:	clzeq	ip, r2
   19df0:	clzne	ip, r3
   19df4:	addeq	ip, ip, #32
   19df8:	cmp	r5, #0
   19dfc:	clzeq	r1, r4
   19e00:	addeq	r1, r1, #32
   19e04:	clzne	r1, r5
   19e08:	sub	ip, ip, r1
   19e0c:	sub	sl, ip, #32
   19e10:	lsl	r9, r3, ip
   19e14:	rsb	fp, ip, #32
   19e18:	orr	r9, r9, r2, lsl sl
   19e1c:	orr	r9, r9, r2, lsr fp
   19e20:	lsl	r8, r2, ip
   19e24:	cmp	r5, r9
   19e28:	cmpeq	r4, r8
   19e2c:	movcc	r0, #0
   19e30:	movcc	r1, r0
   19e34:	bcc	19e50 <__assert_fail@plt+0x88f0>
   19e38:	mov	r0, #1
   19e3c:	subs	r4, r4, r8
   19e40:	lsl	r1, r0, sl
   19e44:	orr	r1, r1, r0, lsr fp
   19e48:	lsl	r0, r0, ip
   19e4c:	sbc	r5, r5, r9
   19e50:	cmp	ip, #0
   19e54:	beq	19ee0 <__assert_fail@plt+0x8980>
   19e58:	lsr	r6, r8, #1
   19e5c:	orr	r6, r6, r9, lsl #31
   19e60:	lsr	r7, r9, #1
   19e64:	mov	r2, ip
   19e68:	b	19e8c <__assert_fail@plt+0x892c>
   19e6c:	subs	r3, r4, r6
   19e70:	sbc	r8, r5, r7
   19e74:	adds	r3, r3, r3
   19e78:	adc	r8, r8, r8
   19e7c:	adds	r4, r3, #1
   19e80:	adc	r5, r8, #0
   19e84:	subs	r2, r2, #1
   19e88:	beq	19ea8 <__assert_fail@plt+0x8948>
   19e8c:	cmp	r5, r7
   19e90:	cmpeq	r4, r6
   19e94:	bcs	19e6c <__assert_fail@plt+0x890c>
   19e98:	adds	r4, r4, r4
   19e9c:	adc	r5, r5, r5
   19ea0:	subs	r2, r2, #1
   19ea4:	bne	19e8c <__assert_fail@plt+0x892c>
   19ea8:	lsr	r3, r4, ip
   19eac:	orr	r3, r3, r5, lsl fp
   19eb0:	lsr	r2, r5, ip
   19eb4:	orr	r3, r3, r5, lsr sl
   19eb8:	adds	r0, r0, r4
   19ebc:	mov	r4, r3
   19ec0:	lsl	r3, r2, ip
   19ec4:	orr	r3, r3, r4, lsl sl
   19ec8:	lsl	ip, r4, ip
   19ecc:	orr	r3, r3, r4, lsr fp
   19ed0:	adc	r1, r1, r5
   19ed4:	subs	r0, r0, ip
   19ed8:	mov	r5, r2
   19edc:	sbc	r1, r1, r3
   19ee0:	cmp	lr, #0
   19ee4:	strdne	r4, [lr]
   19ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ef0:	mov	r7, r0
   19ef4:	ldr	r6, [pc, #72]	; 19f44 <__assert_fail@plt+0x89e4>
   19ef8:	ldr	r5, [pc, #72]	; 19f48 <__assert_fail@plt+0x89e8>
   19efc:	add	r6, pc, r6
   19f00:	add	r5, pc, r5
   19f04:	sub	r6, r6, r5
   19f08:	mov	r8, r1
   19f0c:	mov	r9, r2
   19f10:	bl	111f8 <fstatfs64@plt-0x20>
   19f14:	asrs	r6, r6, #2
   19f18:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f1c:	mov	r4, #0
   19f20:	add	r4, r4, #1
   19f24:	ldr	r3, [r5], #4
   19f28:	mov	r2, r9
   19f2c:	mov	r1, r8
   19f30:	mov	r0, r7
   19f34:	blx	r3
   19f38:	cmp	r6, r4
   19f3c:	bne	19f20 <__assert_fail@plt+0x89c0>
   19f40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f44:	andeq	r2, r1, r8
   19f48:	andeq	r2, r1, r0
   19f4c:	bx	lr
   19f50:	ldr	r3, [pc, #12]	; 19f64 <__assert_fail@plt+0x8a04>
   19f54:	mov	r1, #0
   19f58:	add	r3, pc, r3
   19f5c:	ldr	r2, [r3]
   19f60:	b	1141c <__cxa_atexit@plt>
   19f64:	ldrdeq	r2, [r1], -r4
   19f68:	mov	r2, r1
   19f6c:	mov	r1, r0
   19f70:	mov	r0, #3
   19f74:	b	11500 <__xstat64@plt>
   19f78:	mov	r2, r1
   19f7c:	mov	r1, r0
   19f80:	mov	r0, #3
   19f84:	b	11314 <__fxstat64@plt>
   19f88:	mov	r2, r1
   19f8c:	mov	r1, r0
   19f90:	mov	r0, #3
   19f94:	b	11530 <__lxstat64@plt>
   19f98:	push	{lr}		; (str lr, [sp, #-4]!)
   19f9c:	sub	sp, sp, #12
   19fa0:	str	r3, [sp]
   19fa4:	mov	r3, r2
   19fa8:	mov	r2, r1
   19fac:	mov	r1, r0
   19fb0:	mov	r0, #3
   19fb4:	bl	112fc <__fxstatat64@plt>
   19fb8:	add	sp, sp, #12
   19fbc:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019fc0 <.fini>:
   19fc0:	push	{r3, lr}
   19fc4:	pop	{r3, pc}
