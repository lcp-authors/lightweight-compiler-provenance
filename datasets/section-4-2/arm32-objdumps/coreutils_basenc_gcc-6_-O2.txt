
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	11934 <__assert_fail@plt+0xa04>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r8, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f3c <.text>:
   10f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f40:	mov	r8, r0
   10f44:	sub	sp, sp, #76	; 0x4c
   10f48:	ldr	r0, [r1]
   10f4c:	mov	r5, r1
   10f50:	bl	13b6c <__assert_fail@plt+0x2c3c>
   10f54:	ldr	r1, [pc, #2208]	; 117fc <__assert_fail@plt+0x8cc>
   10f58:	mov	r0, #6
   10f5c:	bl	10ec4 <setlocale@plt>
   10f60:	ldr	r1, [pc, #2200]	; 11800 <__assert_fail@plt+0x8d0>
   10f64:	ldr	r0, [pc, #2200]	; 11804 <__assert_fail@plt+0x8d4>
   10f68:	bl	10f00 <bindtextdomain@plt>
   10f6c:	mov	r7, #0
   10f70:	ldr	r0, [pc, #2188]	; 11804 <__assert_fail@plt+0x8d4>
   10f74:	ldr	sl, [pc, #2188]	; 11808 <__assert_fail@plt+0x8d8>
   10f78:	ldr	r9, [pc, #2188]	; 1180c <__assert_fail@plt+0x8dc>
   10f7c:	ldr	fp, [pc, #2188]	; 11810 <__assert_fail@plt+0x8e0>
   10f80:	bl	10d80 <textdomain@plt>
   10f84:	mov	r6, r7
   10f88:	ldr	r0, [pc, #2180]	; 11814 <__assert_fail@plt+0x8e4>
   10f8c:	bl	174ec <__assert_fail@plt+0x65bc>
   10f90:	mov	r3, #76	; 0x4c
   10f94:	str	r7, [sp, #16]
   10f98:	str	r3, [sp, #20]
   10f9c:	mov	r4, #0
   10fa0:	str	r4, [sp]
   10fa4:	mov	r3, sl
   10fa8:	mov	r2, r9
   10fac:	mov	r1, r5
   10fb0:	mov	r0, r8
   10fb4:	bl	10e10 <getopt_long@plt>
   10fb8:	cmn	r0, #1
   10fbc:	beq	110c0 <__assert_fail@plt+0x190>
   10fc0:	cmp	r0, #105	; 0x69
   10fc4:	beq	110b4 <__assert_fail@plt+0x184>
   10fc8:	bgt	10fec <__assert_fail@plt+0xbc>
   10fcc:	cmn	r0, #2
   10fd0:	beq	11074 <__assert_fail@plt+0x144>
   10fd4:	cmp	r0, #100	; 0x64
   10fd8:	beq	1100c <__assert_fail@plt+0xdc>
   10fdc:	cmn	r0, #3
   10fe0:	beq	1107c <__assert_fail@plt+0x14c>
   10fe4:	mov	r0, #1
   10fe8:	bl	12570 <__assert_fail@plt+0x1640>
   10fec:	cmp	r0, #119	; 0x77
   10ff0:	beq	11014 <__assert_fail@plt+0xe4>
   10ff4:	blt	10fe4 <__assert_fail@plt+0xb4>
   10ff8:	sub	r3, r0, #256	; 0x100
   10ffc:	cmp	r3, #7
   11000:	bhi	10fe4 <__assert_fail@plt+0xb4>
   11004:	mov	r7, r0
   11008:	b	10f9c <__assert_fail@plt+0x6c>
   1100c:	mov	r6, #1
   11010:	b	10f9c <__assert_fail@plt+0x6c>
   11014:	ldr	r3, [pc, #2016]	; 117fc <__assert_fail@plt+0x8cc>
   11018:	mov	r1, r4
   1101c:	str	r3, [sp]
   11020:	mov	r2, #10
   11024:	add	r3, sp, #48	; 0x30
   11028:	ldr	r0, [fp]
   1102c:	bl	1663c <__assert_fail@plt+0x570c>
   11030:	cmp	r0, #1
   11034:	bhi	114d8 <__assert_fail@plt+0x5a8>
   11038:	ldrd	r2, [sp, #48]	; 0x30
   1103c:	cmp	r2, #0
   11040:	sbcs	r1, r3, #0
   11044:	blt	114d8 <__assert_fail@plt+0x5a8>
   11048:	eor	ip, r0, #1
   1104c:	mvn	r0, #-2147483648	; 0x80000000
   11050:	cmp	r0, r2
   11054:	mov	r1, #0
   11058:	sbcs	r1, r1, r3
   1105c:	movlt	r0, #0
   11060:	andge	r0, ip, #1
   11064:	cmp	r0, #0
   11068:	moveq	r2, #0
   1106c:	str	r2, [sp, #20]
   11070:	b	10f9c <__assert_fail@plt+0x6c>
   11074:	mov	r0, r4
   11078:	bl	12570 <__assert_fail@plt+0x1640>
   1107c:	ldr	r3, [pc, #1940]	; 11818 <__assert_fail@plt+0x8e8>
   11080:	ldr	r0, [pc, #1940]	; 1181c <__assert_fail@plt+0x8ec>
   11084:	ldr	r1, [pc, #1940]	; 11820 <__assert_fail@plt+0x8f0>
   11088:	ldr	r2, [pc, #1940]	; 11824 <__assert_fail@plt+0x8f4>
   1108c:	str	r4, [sp, #8]
   11090:	ldr	r0, [r0]
   11094:	ldr	r3, [r3]
   11098:	str	r1, [sp, #4]
   1109c:	str	r2, [sp]
   110a0:	ldr	r1, [pc, #1920]	; 11828 <__assert_fail@plt+0x8f8>
   110a4:	ldr	r2, [pc, #1920]	; 1182c <__assert_fail@plt+0x8fc>
   110a8:	bl	15e68 <__assert_fail@plt+0x4f38>
   110ac:	mov	r0, r4
   110b0:	bl	10e28 <exit@plt>
   110b4:	mov	r3, #1
   110b8:	str	r3, [sp, #16]
   110bc:	b	10f9c <__assert_fail@plt+0x6c>
   110c0:	sub	r7, r7, #256	; 0x100
   110c4:	cmp	r7, #7
   110c8:	ldrls	pc, [pc, r7, lsl #2]
   110cc:	b	11730 <__assert_fail@plt+0x800>
   110d0:	muleq	r1, r0, r2
   110d4:	andeq	r1, r1, r0, ror #4
   110d8:	andeq	r1, r1, r0, lsr r2
   110dc:	andeq	r1, r1, r0, lsl #4
   110e0:	ldrdeq	r1, [r1], -r0
   110e4:	andeq	r1, r1, r0, lsr #3
   110e8:	andeq	r1, r1, r0, ror r1
   110ec:	strdeq	r1, [r1], -r0
   110f0:	ldr	sl, [pc, #1848]	; 11830 <__assert_fail@plt+0x900>
   110f4:	ldr	r3, [pc, #1848]	; 11834 <__assert_fail@plt+0x904>
   110f8:	ldr	r2, [pc, #1848]	; 11838 <__assert_fail@plt+0x908>
   110fc:	str	r3, [sl]
   11100:	ldr	r3, [pc, #1844]	; 1183c <__assert_fail@plt+0x90c>
   11104:	str	r2, [sl, #4]
   11108:	str	r3, [sl, #8]
   1110c:	ldr	r2, [pc, #1836]	; 11840 <__assert_fail@plt+0x910>
   11110:	ldr	r3, [pc, #1836]	; 11844 <__assert_fail@plt+0x914>
   11114:	str	r2, [sl, #12]
   11118:	str	r3, [sl, #16]
   1111c:	ldr	r4, [pc, #1828]	; 11848 <__assert_fail@plt+0x918>
   11120:	ldr	r3, [r4]
   11124:	sub	r2, r8, r3
   11128:	cmp	r2, #1
   1112c:	ble	112c0 <__assert_fail@plt+0x390>
   11130:	mov	r2, #5
   11134:	ldr	r1, [pc, #1808]	; 1184c <__assert_fail@plt+0x91c>
   11138:	mov	r0, #0
   1113c:	bl	10d68 <dcgettext@plt>
   11140:	ldr	r3, [r4]
   11144:	add	r3, r3, #1
   11148:	mov	r6, r0
   1114c:	ldr	r0, [r5, r3, lsl #2]
   11150:	bl	15a2c <__assert_fail@plt+0x4afc>
   11154:	mov	r1, #0
   11158:	mov	r2, r6
   1115c:	mov	r3, r0
   11160:	mov	r0, r1
   11164:	bl	10dd4 <error@plt>
   11168:	mov	r0, #1
   1116c:	bl	12570 <__assert_fail@plt+0x1640>
   11170:	ldr	sl, [pc, #1720]	; 11830 <__assert_fail@plt+0x900>
   11174:	ldr	r3, [pc, #1748]	; 11850 <__assert_fail@plt+0x920>
   11178:	ldr	r2, [pc, #1748]	; 11854 <__assert_fail@plt+0x924>
   1117c:	str	r3, [sl]
   11180:	ldr	r3, [pc, #1744]	; 11858 <__assert_fail@plt+0x928>
   11184:	str	r2, [sl, #4]
   11188:	str	r3, [sl, #8]
   1118c:	ldr	r2, [pc, #1736]	; 1185c <__assert_fail@plt+0x92c>
   11190:	ldr	r3, [pc, #1736]	; 11860 <__assert_fail@plt+0x930>
   11194:	str	r2, [sl, #12]
   11198:	str	r3, [sl, #16]
   1119c:	b	1111c <__assert_fail@plt+0x1ec>
   111a0:	ldr	sl, [pc, #1672]	; 11830 <__assert_fail@plt+0x900>
   111a4:	ldr	r3, [pc, #1700]	; 11850 <__assert_fail@plt+0x920>
   111a8:	ldr	r2, [pc, #1700]	; 11854 <__assert_fail@plt+0x924>
   111ac:	str	r3, [sl]
   111b0:	ldr	r3, [pc, #1708]	; 11864 <__assert_fail@plt+0x934>
   111b4:	str	r2, [sl, #4]
   111b8:	str	r3, [sl, #8]
   111bc:	ldr	r2, [pc, #1688]	; 1185c <__assert_fail@plt+0x92c>
   111c0:	ldr	r3, [pc, #1696]	; 11868 <__assert_fail@plt+0x938>
   111c4:	str	r2, [sl, #12]
   111c8:	str	r3, [sl, #16]
   111cc:	b	1111c <__assert_fail@plt+0x1ec>
   111d0:	ldr	sl, [pc, #1624]	; 11830 <__assert_fail@plt+0x900>
   111d4:	ldr	r3, [pc, #1680]	; 1186c <__assert_fail@plt+0x93c>
   111d8:	ldr	r2, [pc, #1680]	; 11870 <__assert_fail@plt+0x940>
   111dc:	str	r3, [sl]
   111e0:	ldr	r3, [pc, #1676]	; 11874 <__assert_fail@plt+0x944>
   111e4:	str	r2, [sl, #4]
   111e8:	str	r3, [sl, #8]
   111ec:	ldr	r2, [pc, #1668]	; 11878 <__assert_fail@plt+0x948>
   111f0:	ldr	r3, [pc, #1668]	; 1187c <__assert_fail@plt+0x94c>
   111f4:	str	r2, [sl, #12]
   111f8:	str	r3, [sl, #16]
   111fc:	b	1111c <__assert_fail@plt+0x1ec>
   11200:	ldr	sl, [pc, #1576]	; 11830 <__assert_fail@plt+0x900>
   11204:	ldr	r3, [pc, #1652]	; 11880 <__assert_fail@plt+0x950>
   11208:	ldr	r2, [pc, #1652]	; 11884 <__assert_fail@plt+0x954>
   1120c:	str	r3, [sl]
   11210:	ldr	r3, [pc, #1648]	; 11888 <__assert_fail@plt+0x958>
   11214:	str	r2, [sl, #4]
   11218:	str	r3, [sl, #8]
   1121c:	ldr	r2, [pc, #1640]	; 1188c <__assert_fail@plt+0x95c>
   11220:	ldr	r3, [pc, #1640]	; 11890 <__assert_fail@plt+0x960>
   11224:	str	r2, [sl, #12]
   11228:	str	r3, [sl, #16]
   1122c:	b	1111c <__assert_fail@plt+0x1ec>
   11230:	ldr	sl, [pc, #1528]	; 11830 <__assert_fail@plt+0x900>
   11234:	ldr	r3, [pc, #1604]	; 11880 <__assert_fail@plt+0x950>
   11238:	ldr	r2, [pc, #1620]	; 11894 <__assert_fail@plt+0x964>
   1123c:	str	r3, [sl]
   11240:	ldr	r3, [pc, #1616]	; 11898 <__assert_fail@plt+0x968>
   11244:	str	r2, [sl, #4]
   11248:	str	r3, [sl, #8]
   1124c:	ldr	r2, [pc, #1608]	; 1189c <__assert_fail@plt+0x96c>
   11250:	ldr	r3, [pc, #1608]	; 118a0 <__assert_fail@plt+0x970>
   11254:	str	r2, [sl, #12]
   11258:	str	r3, [sl, #16]
   1125c:	b	1111c <__assert_fail@plt+0x1ec>
   11260:	ldr	sl, [pc, #1480]	; 11830 <__assert_fail@plt+0x900>
   11264:	ldr	r3, [pc, #1592]	; 118a4 <__assert_fail@plt+0x974>
   11268:	ldr	r2, [pc, #1592]	; 118a8 <__assert_fail@plt+0x978>
   1126c:	str	r3, [sl]
   11270:	ldr	r3, [pc, #1588]	; 118ac <__assert_fail@plt+0x97c>
   11274:	str	r2, [sl, #4]
   11278:	str	r3, [sl, #8]
   1127c:	ldr	r2, [pc, #1580]	; 118b0 <__assert_fail@plt+0x980>
   11280:	ldr	r3, [pc, #1580]	; 118b4 <__assert_fail@plt+0x984>
   11284:	str	r2, [sl, #12]
   11288:	str	r3, [sl, #16]
   1128c:	b	1111c <__assert_fail@plt+0x1ec>
   11290:	ldr	sl, [pc, #1432]	; 11830 <__assert_fail@plt+0x900>
   11294:	ldr	r3, [pc, #1544]	; 118a4 <__assert_fail@plt+0x974>
   11298:	ldr	r2, [pc, #1560]	; 118b8 <__assert_fail@plt+0x988>
   1129c:	str	r3, [sl]
   112a0:	ldr	r3, [pc, #1556]	; 118bc <__assert_fail@plt+0x98c>
   112a4:	str	r2, [sl, #4]
   112a8:	str	r3, [sl, #8]
   112ac:	ldr	r2, [pc, #1548]	; 118c0 <__assert_fail@plt+0x990>
   112b0:	ldr	r3, [pc, #1548]	; 118c4 <__assert_fail@plt+0x994>
   112b4:	str	r2, [sl, #12]
   112b8:	str	r3, [sl, #16]
   112bc:	b	1111c <__assert_fail@plt+0x1ec>
   112c0:	cmp	r8, r3
   112c4:	ble	114c4 <__assert_fail@plt+0x594>
   112c8:	ldr	r3, [r5, r3, lsl #2]
   112cc:	ldr	r1, [pc, #1524]	; 118c8 <__assert_fail@plt+0x998>
   112d0:	mov	r0, r3
   112d4:	str	r3, [sp, #36]	; 0x24
   112d8:	bl	10ce4 <strcmp@plt>
   112dc:	cmp	r0, #0
   112e0:	beq	114cc <__assert_fail@plt+0x59c>
   112e4:	ldr	r1, [pc, #1504]	; 118cc <__assert_fail@plt+0x99c>
   112e8:	ldr	r0, [sp, #36]	; 0x24
   112ec:	bl	10ef4 <fopen64@plt>
   112f0:	subs	r8, r0, #0
   112f4:	beq	117a8 <__assert_fail@plt+0x878>
   112f8:	mov	r1, #2
   112fc:	mov	r0, r8
   11300:	bl	13940 <__assert_fail@plt+0x2a10>
   11304:	cmp	r6, #0
   11308:	beq	1150c <__assert_fail@plt+0x5dc>
   1130c:	ldr	r2, [pc, #1288]	; 1181c <__assert_fail@plt+0x8ec>
   11310:	ldr	r3, [sl]
   11314:	ldr	r0, [pc, #1460]	; 118d0 <__assert_fail@plt+0x9a0>
   11318:	ldr	r2, [r2]
   1131c:	ldr	fp, [pc, #1452]	; 118d0 <__assert_fail@plt+0x9a0>
   11320:	str	r2, [sp, #28]
   11324:	blx	r3
   11328:	bl	15f64 <__assert_fail@plt+0x5034>
   1132c:	mov	r4, r0
   11330:	ldr	r0, [pc, #1432]	; 118d0 <__assert_fail@plt+0x9a0>
   11334:	bl	15f64 <__assert_fail@plt+0x5034>
   11338:	mov	r3, #0
   1133c:	str	r3, [sp, #64]	; 0x40
   11340:	ldr	r3, [sl, #12]
   11344:	str	r0, [sp, #32]
   11348:	add	r0, sp, #48	; 0x30
   1134c:	blx	r3
   11350:	mov	r5, #0
   11354:	ldr	r3, [sl]
   11358:	mov	r0, fp
   1135c:	blx	r3
   11360:	add	ip, r4, r5
   11364:	mov	r3, r8
   11368:	mov	r1, #1
   1136c:	sub	r2, r0, r5
   11370:	mov	r0, ip
   11374:	bl	10f0c <fread_unlocked@plt>
   11378:	ldr	r3, [sp, #16]
   1137c:	cmp	r3, #0
   11380:	mov	r7, r0
   11384:	beq	113e8 <__assert_fail@plt+0x4b8>
   11388:	cmp	r0, #0
   1138c:	ble	113e8 <__assert_fail@plt+0x4b8>
   11390:	mov	r9, #0
   11394:	b	113c4 <__assert_fail@plt+0x494>
   11398:	ldrb	r2, [r4, r6]
   1139c:	cmp	r2, #61	; 0x3d
   113a0:	beq	113e0 <__assert_fail@plt+0x4b0>
   113a4:	sub	r7, r7, #1
   113a8:	add	r1, r6, #1
   113ac:	add	r1, r4, r1
   113b0:	mov	r0, r3
   113b4:	sub	r2, r7, r9
   113b8:	bl	10d08 <memmove@plt>
   113bc:	cmp	r7, r9
   113c0:	ble	113e8 <__assert_fail@plt+0x4b8>
   113c4:	add	r6, r5, r9
   113c8:	ldr	r3, [sl, #4]
   113cc:	ldrb	r0, [r4, r6]
   113d0:	blx	r3
   113d4:	add	r3, r4, r6
   113d8:	cmp	r0, #0
   113dc:	beq	11398 <__assert_fail@plt+0x468>
   113e0:	add	r9, r9, #1
   113e4:	b	113bc <__assert_fail@plt+0x48c>
   113e8:	ldr	r3, [r8]
   113ec:	add	r5, r5, r7
   113f0:	ands	r6, r3, #32
   113f4:	bne	11720 <__assert_fail@plt+0x7f0>
   113f8:	ldr	r3, [sl]
   113fc:	mov	r0, fp
   11400:	blx	r3
   11404:	cmp	r5, r0
   11408:	bge	11754 <__assert_fail@plt+0x824>
   1140c:	ldr	r3, [r8]
   11410:	tst	r3, #16
   11414:	beq	11354 <__assert_fail@plt+0x424>
   11418:	mov	r7, r6
   1141c:	str	r5, [sp, #20]
   11420:	str	r6, [sp, #24]
   11424:	ldr	r5, [sp, #28]
   11428:	ldr	r6, [sp, #32]
   1142c:	b	11490 <__assert_fail@plt+0x560>
   11430:	cmp	r7, #0
   11434:	bne	11350 <__assert_fail@plt+0x420>
   11438:	ldr	r9, [sl, #16]
   1143c:	ldr	r2, [sp, #20]
   11440:	str	fp, [sp, #44]	; 0x2c
   11444:	add	r3, sp, #44	; 0x2c
   11448:	str	r3, [sp]
   1144c:	mov	r1, r4
   11450:	mov	r3, r6
   11454:	add	r0, sp, #48	; 0x30
   11458:	blx	r9
   1145c:	mov	r3, r5
   11460:	ldr	r2, [sp, #44]	; 0x2c
   11464:	mov	r1, #1
   11468:	mov	r9, r0
   1146c:	mov	r0, r6
   11470:	bl	10d44 <fwrite_unlocked@plt>
   11474:	ldr	r3, [sp, #44]	; 0x2c
   11478:	cmp	r0, r3
   1147c:	bcc	116f8 <__assert_fail@plt+0x7c8>
   11480:	cmp	r9, #0
   11484:	beq	11770 <__assert_fail@plt+0x840>
   11488:	ldr	r3, [r8]
   1148c:	add	r7, r7, #1
   11490:	tst	r3, #16
   11494:	beq	11430 <__assert_fail@plt+0x500>
   11498:	cmp	r7, #2
   1149c:	beq	115bc <__assert_fail@plt+0x68c>
   114a0:	cmp	r7, #1
   114a4:	bne	11438 <__assert_fail@plt+0x508>
   114a8:	ldr	r3, [sp, #48]	; 0x30
   114ac:	cmp	r3, #0
   114b0:	beq	115bc <__assert_fail@plt+0x68c>
   114b4:	str	fp, [sp, #44]	; 0x2c
   114b8:	ldr	r9, [sl, #16]
   114bc:	ldr	r2, [sp, #24]
   114c0:	b	11444 <__assert_fail@plt+0x514>
   114c4:	ldr	r3, [pc, #1020]	; 118c8 <__assert_fail@plt+0x998>
   114c8:	str	r3, [sp, #36]	; 0x24
   114cc:	ldr	r3, [pc, #1024]	; 118d4 <__assert_fail@plt+0x9a4>
   114d0:	ldr	r8, [r3]
   114d4:	b	112f8 <__assert_fail@plt+0x3c8>
   114d8:	mov	r2, #5
   114dc:	ldr	r1, [pc, #1012]	; 118d8 <__assert_fail@plt+0x9a8>
   114e0:	mov	r0, #0
   114e4:	bl	10d68 <dcgettext@plt>
   114e8:	mov	r4, r0
   114ec:	ldr	r0, [fp]
   114f0:	bl	15a2c <__assert_fail@plt+0x4afc>
   114f4:	mov	r3, r4
   114f8:	ldr	r2, [pc, #988]	; 118dc <__assert_fail@plt+0x9ac>
   114fc:	mov	r1, #0
   11500:	str	r0, [sp]
   11504:	mov	r0, #1
   11508:	bl	10dd4 <error@plt>
   1150c:	ldr	r3, [pc, #776]	; 1181c <__assert_fail@plt+0x8ec>
   11510:	mov	r0, #30720	; 0x7800
   11514:	ldr	fp, [r3]
   11518:	bl	15f64 <__assert_fail@plt+0x5034>
   1151c:	ldr	r3, [sl]
   11520:	mov	r4, r0
   11524:	mov	r0, #30720	; 0x7800
   11528:	blx	r3
   1152c:	bl	15f64 <__assert_fail@plt+0x5034>
   11530:	str	sl, [sp, #24]
   11534:	mov	sl, r4
   11538:	str	r0, [sp, #16]
   1153c:	mov	r5, #0
   11540:	mov	r4, #1
   11544:	b	11554 <__assert_fail@plt+0x624>
   11548:	ldr	r3, [pc, #912]	; 118e0 <__assert_fail@plt+0x9b0>
   1154c:	cmp	r5, r3
   11550:	bgt	115c8 <__assert_fail@plt+0x698>
   11554:	mov	r3, r8
   11558:	rsb	r2, r5, #30720	; 0x7800
   1155c:	add	r0, sl, r5
   11560:	mov	r1, r4
   11564:	bl	10f0c <fread_unlocked@plt>
   11568:	ldr	r3, [r8]
   1156c:	tst	r3, #48	; 0x30
   11570:	add	r5, r5, r0
   11574:	beq	11548 <__assert_fail@plt+0x618>
   11578:	cmp	r5, #0
   1157c:	bgt	115c8 <__assert_fail@plt+0x698>
   11580:	ldr	r2, [sp, #20]
   11584:	cmp	r2, #0
   11588:	cmpne	r6, #0
   1158c:	ble	115b4 <__assert_fail@plt+0x684>
   11590:	ldr	r3, [fp, #20]
   11594:	ldr	r2, [fp, #24]
   11598:	cmp	r3, r2
   1159c:	addcc	r1, r3, #1
   115a0:	movcc	r2, #10
   115a4:	strcc	r1, [fp, #20]
   115a8:	strbcc	r2, [r3]
   115ac:	bcs	11790 <__assert_fail@plt+0x860>
   115b0:	ldr	r3, [r8]
   115b4:	tst	r3, #32
   115b8:	bne	11720 <__assert_fail@plt+0x7f0>
   115bc:	ldr	r1, [sp, #36]	; 0x24
   115c0:	mov	r0, r8
   115c4:	bl	11dbc <__assert_fail@plt+0xe8c>
   115c8:	ldr	r7, [sp, #24]
   115cc:	mov	r0, r5
   115d0:	ldr	r3, [r7]
   115d4:	ldr	r4, [r7, #8]
   115d8:	blx	r3
   115dc:	ldr	r2, [sp, #16]
   115e0:	mov	r1, r5
   115e4:	mov	r3, r0
   115e8:	mov	r0, sl
   115ec:	blx	r4
   115f0:	ldr	r3, [r7]
   115f4:	mov	r0, r5
   115f8:	blx	r3
   115fc:	ldr	r3, [sp, #20]
   11600:	cmp	r3, #0
   11604:	mov	r9, r0
   11608:	beq	116d8 <__assert_fail@plt+0x7a8>
   1160c:	cmp	r0, #0
   11610:	ble	116a4 <__assert_fail@plt+0x774>
   11614:	str	r8, [sp, #28]
   11618:	str	sl, [sp, #32]
   1161c:	mov	r7, #0
   11620:	ldr	r8, [sp, #20]
   11624:	ldr	sl, [sp, #16]
   11628:	b	11658 <__assert_fail@plt+0x728>
   1162c:	ldr	r3, [fp, #20]
   11630:	ldr	r2, [fp, #24]
   11634:	cmp	r3, r2
   11638:	bcs	116bc <__assert_fail@plt+0x78c>
   1163c:	add	r2, r3, #1
   11640:	mov	r6, r4
   11644:	str	r2, [fp, #20]
   11648:	mov	r2, #10
   1164c:	strb	r2, [r3]
   11650:	cmp	r9, r7
   11654:	ble	1169c <__assert_fail@plt+0x76c>
   11658:	sub	r4, r9, r7
   1165c:	sub	r3, r8, r6
   11660:	cmp	r4, r3
   11664:	movge	r4, r3
   11668:	cmp	r4, #0
   1166c:	beq	1162c <__assert_fail@plt+0x6fc>
   11670:	ldr	r3, [pc, #420]	; 1181c <__assert_fail@plt+0x8ec>
   11674:	mov	r2, r4
   11678:	mov	r1, #1
   1167c:	ldr	r3, [r3]
   11680:	add	r0, sl, r7
   11684:	bl	10d44 <fwrite_unlocked@plt>
   11688:	cmp	r4, r0
   1168c:	bhi	116f8 <__assert_fail@plt+0x7c8>
   11690:	add	r6, r6, r4
   11694:	add	r7, r7, r4
   11698:	b	11650 <__assert_fail@plt+0x720>
   1169c:	ldr	r8, [sp, #28]
   116a0:	ldr	sl, [sp, #32]
   116a4:	ldr	r3, [r8]
   116a8:	and	r2, r3, #48	; 0x30
   116ac:	cmp	r5, #30720	; 0x7800
   116b0:	cmpeq	r2, #0
   116b4:	beq	1153c <__assert_fail@plt+0x60c>
   116b8:	b	11580 <__assert_fail@plt+0x650>
   116bc:	mov	r1, #10
   116c0:	mov	r0, fp
   116c4:	bl	10eb8 <__overflow@plt>
   116c8:	cmn	r0, #1
   116cc:	beq	117d4 <__assert_fail@plt+0x8a4>
   116d0:	mov	r6, r4
   116d4:	b	11650 <__assert_fail@plt+0x720>
   116d8:	ldr	r3, [pc, #316]	; 1181c <__assert_fail@plt+0x8ec>
   116dc:	mov	r2, r0
   116e0:	mov	r1, #1
   116e4:	ldr	r3, [r3]
   116e8:	ldr	r0, [sp, #16]
   116ec:	bl	10d44 <fwrite_unlocked@plt>
   116f0:	cmp	r9, r0
   116f4:	bls	116a4 <__assert_fail@plt+0x774>
   116f8:	bl	10e4c <__errno_location@plt>
   116fc:	ldr	r1, [pc, #480]	; 118e4 <__assert_fail@plt+0x9b4>
   11700:	mov	r2, #5
   11704:	ldr	r4, [r0]
   11708:	mov	r0, #0
   1170c:	bl	10d68 <dcgettext@plt>
   11710:	mov	r1, r4
   11714:	mov	r2, r0
   11718:	mov	r0, #1
   1171c:	bl	10dd4 <error@plt>
   11720:	bl	10e4c <__errno_location@plt>
   11724:	mov	r2, #5
   11728:	ldr	r1, [pc, #440]	; 118e8 <__assert_fail@plt+0x9b8>
   1172c:	b	11704 <__assert_fail@plt+0x7d4>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #432]	; 118ec <__assert_fail@plt+0x9bc>
   11738:	mov	r0, #0
   1173c:	bl	10d68 <dcgettext@plt>
   11740:	mov	r1, #0
   11744:	mov	r2, r0
   11748:	mov	r0, r1
   1174c:	bl	10dd4 <error@plt>
   11750:	b	10fe4 <__assert_fail@plt+0xb4>
   11754:	mov	r7, r6
   11758:	str	r5, [sp, #20]
   1175c:	str	r6, [sp, #24]
   11760:	ldr	r3, [r8]
   11764:	ldr	r5, [sp, #28]
   11768:	ldr	r6, [sp, #32]
   1176c:	b	11490 <__assert_fail@plt+0x560>
   11770:	mov	r2, #5
   11774:	ldr	r1, [pc, #372]	; 118f0 <__assert_fail@plt+0x9c0>
   11778:	mov	r0, r9
   1177c:	bl	10d68 <dcgettext@plt>
   11780:	mov	r1, r9
   11784:	mov	r2, r0
   11788:	mov	r0, #1
   1178c:	bl	10dd4 <error@plt>
   11790:	mov	r0, fp
   11794:	mov	r1, #10
   11798:	bl	10eb8 <__overflow@plt>
   1179c:	cmn	r0, #1
   117a0:	beq	116f8 <__assert_fail@plt+0x7c8>
   117a4:	b	115b0 <__assert_fail@plt+0x680>
   117a8:	bl	10e4c <__errno_location@plt>
   117ac:	ldr	r2, [sp, #36]	; 0x24
   117b0:	mov	r1, #3
   117b4:	ldr	r4, [r0]
   117b8:	mov	r0, r8
   117bc:	bl	158a8 <__assert_fail@plt+0x4978>
   117c0:	mov	r1, r4
   117c4:	ldr	r2, [pc, #296]	; 118f4 <__assert_fail@plt+0x9c4>
   117c8:	mov	r3, r0
   117cc:	mov	r0, #1
   117d0:	bl	10dd4 <error@plt>
   117d4:	bl	10e4c <__errno_location@plt>
   117d8:	mov	r2, #5
   117dc:	ldr	r1, [pc, #256]	; 118e4 <__assert_fail@plt+0x9b4>
   117e0:	ldr	r5, [r0]
   117e4:	mov	r0, r4
   117e8:	bl	10d68 <dcgettext@plt>
   117ec:	mov	r1, r5
   117f0:	mov	r2, r0
   117f4:	mov	r0, #1
   117f8:	bl	10dd4 <error@plt>
   117fc:	andeq	r7, r1, r8, lsl #26
   11800:	strdeq	r7, [r1], -r8
   11804:	andeq	r7, r1, r0, asr lr
   11808:	andeq	r7, r1, ip, ror r6
   1180c:	andeq	r7, r1, ip, asr #30
   11810:	andeq	r9, r2, r8, asr r1
   11814:	andeq	r3, r1, r0, asr r8
   11818:	andeq	r9, r2, ip, ror #1
   1181c:	andeq	r9, r2, r4, asr r1
   11820:	andeq	r7, r1, ip, lsr #30
   11824:	andeq	r7, r1, ip, lsr pc
   11828:	strdeq	r7, [r1], -r4
   1182c:	andeq	r7, r1, ip, asr #28
   11830:	andeq	r9, r2, r0, ror #2
   11834:	andeq	r1, r1, r8, ror #21
   11838:			; <UNDEFINED> instruction: 0x00011cb4
   1183c:			; <UNDEFINED> instruction: 0x000121bc
   11840:	andeq	r1, r1, ip, lsr #24
   11844:	andeq	r1, r1, r4, ror #29
   11848:	andeq	r9, r2, r0, asr #2
   1184c:	andeq	r7, r1, ip, ror #30
   11850:	andeq	r1, r1, r4, lsl fp
   11854:	andeq	r1, r1, r0, lsl #22
   11858:	andeq	r1, r1, r8, ror #22
   1185c:	andeq	r1, r1, r8, asr ip
   11860:	andeq	r2, r1, r0, asr #32
   11864:	andeq	r1, r1, ip, lsl fp
   11868:	strdeq	r2, [r1], -r0
   1186c:	muleq	r1, r4, sl
   11870:	andeq	r1, r1, r8, ror sl
   11874:	muleq	r1, ip, sl
   11878:	andeq	r1, r1, r4, lsl #25
   1187c:	andeq	r1, r1, r8, asr #28
   11880:	andeq	r1, r1, ip, lsr sl
   11884:	andeq	r1, r1, ip, asr sl
   11888:	andeq	r2, r1, r8, asr #6
   1188c:	andeq	r1, r1, r0, lsr sp
   11890:			; <UNDEFINED> instruction: 0x000124b8
   11894:	andeq	r2, r1, r8, ror #28
   11898:	andeq	r2, r1, r4, ror #22
   1189c:	andeq	r1, r1, r8, asr sp
   118a0:	andeq	r1, r1, r4, lsl #26
   118a4:	andeq	r1, r1, r0, lsr #20
   118a8:			; <UNDEFINED> instruction: 0x00011bb0
   118ac:	ldrdeq	r1, [r1], -ip
   118b0:	andeq	r1, r1, ip, lsl #27
   118b4:	ldrdeq	r2, [r1], -r0
   118b8:	andeq	r3, r1, ip, lsr #10
   118bc:	muleq	r1, r8, r2
   118c0:			; <UNDEFINED> instruction: 0x00011db4
   118c4:	andeq	r1, r1, r0, ror #26
   118c8:	andeq	r7, r1, r4, ror r7
   118cc:	andeq	r7, r1, r0, lsl #31
   118d0:	andeq	r1, r0, r8, rrx
   118d4:	andeq	r9, r2, r0, asr r1
   118d8:	andeq	r7, r1, r0, lsl pc
   118dc:	andeq	r7, r1, r4, lsr #30
   118e0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   118e4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   118e8:	andeq	r7, r1, r4, lsl #31
   118ec:	andeq	r7, r1, r4, asr pc
   118f0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   118f4:	andeq	r7, r1, r8, lsr #30
   118f8:	mov	fp, #0
   118fc:	mov	lr, #0
   11900:	pop	{r1}		; (ldr r1, [sp], #4)
   11904:	mov	r2, sp
   11908:	push	{r2}		; (str r2, [sp, #-4]!)
   1190c:	push	{r0}		; (str r0, [sp, #-4]!)
   11910:	ldr	ip, [pc, #16]	; 11928 <__assert_fail@plt+0x9f8>
   11914:	push	{ip}		; (str ip, [sp, #-4]!)
   11918:	ldr	r0, [pc, #12]	; 1192c <__assert_fail@plt+0x9fc>
   1191c:	ldr	r3, [pc, #12]	; 11930 <__assert_fail@plt+0xa00>
   11920:	bl	10dec <__libc_start_main@plt>
   11924:	bl	10f24 <abort@plt>
   11928:	andeq	r7, r1, r8, ror #9
   1192c:	andeq	r0, r1, ip, lsr pc
   11930:	andeq	r7, r1, r8, lsl #9
   11934:	ldr	r3, [pc, #20]	; 11950 <__assert_fail@plt+0xa20>
   11938:	ldr	r2, [pc, #20]	; 11954 <__assert_fail@plt+0xa24>
   1193c:	add	r3, pc, r3
   11940:	ldr	r2, [r3, r2]
   11944:	cmp	r2, #0
   11948:	bxeq	lr
   1194c:	b	10e04 <__gmon_start__@plt>
   11950:			; <UNDEFINED> instruction: 0x000176bc
   11954:	andeq	r0, r0, r0, ror #1
   11958:	ldr	r3, [pc, #28]	; 1197c <__assert_fail@plt+0xa4c>
   1195c:	ldr	r0, [pc, #28]	; 11980 <__assert_fail@plt+0xa50>
   11960:	sub	r3, r3, r0
   11964:	cmp	r3, #6
   11968:	bxls	lr
   1196c:	ldr	r3, [pc, #16]	; 11984 <__assert_fail@plt+0xa54>
   11970:	cmp	r3, #0
   11974:	bxeq	lr
   11978:	bx	r3
   1197c:	andeq	r9, r2, r7, lsr r1
   11980:	andeq	r9, r2, r4, lsr r1
   11984:	andeq	r0, r0, r0
   11988:	ldr	r1, [pc, #36]	; 119b4 <__assert_fail@plt+0xa84>
   1198c:	ldr	r0, [pc, #36]	; 119b8 <__assert_fail@plt+0xa88>
   11990:	sub	r1, r1, r0
   11994:	asr	r1, r1, #2
   11998:	add	r1, r1, r1, lsr #31
   1199c:	asrs	r1, r1, #1
   119a0:	bxeq	lr
   119a4:	ldr	r3, [pc, #16]	; 119bc <__assert_fail@plt+0xa8c>
   119a8:	cmp	r3, #0
   119ac:	bxeq	lr
   119b0:	bx	r3
   119b4:	andeq	r9, r2, r4, lsr r1
   119b8:	andeq	r9, r2, r4, lsr r1
   119bc:	andeq	r0, r0, r0
   119c0:	push	{r4, lr}
   119c4:	ldr	r4, [pc, #24]	; 119e4 <__assert_fail@plt+0xab4>
   119c8:	ldrb	r3, [r4]
   119cc:	cmp	r3, #0
   119d0:	popne	{r4, pc}
   119d4:	bl	11958 <__assert_fail@plt+0xa28>
   119d8:	mov	r3, #1
   119dc:	strb	r3, [r4]
   119e0:	pop	{r4, pc}
   119e4:	andeq	r9, r2, ip, asr r1
   119e8:	ldr	r0, [pc, #40]	; 11a18 <__assert_fail@plt+0xae8>
   119ec:	ldr	r3, [r0]
   119f0:	cmp	r3, #0
   119f4:	bne	119fc <__assert_fail@plt+0xacc>
   119f8:	b	11988 <__assert_fail@plt+0xa58>
   119fc:	ldr	r3, [pc, #24]	; 11a1c <__assert_fail@plt+0xaec>
   11a00:	cmp	r3, #0
   11a04:	beq	119f8 <__assert_fail@plt+0xac8>
   11a08:	push	{r4, lr}
   11a0c:	blx	r3
   11a10:	pop	{r4, lr}
   11a14:	b	11988 <__assert_fail@plt+0xa58>
   11a18:	andeq	r8, r2, r4, lsl pc
   11a1c:	andeq	r0, r0, r0
   11a20:	ldr	r3, [pc, #16]	; 11a38 <__assert_fail@plt+0xb08>
   11a24:	add	r0, r0, #2
   11a28:	smull	r2, r3, r3, r0
   11a2c:	sub	r0, r3, r0, asr #31
   11a30:	lsl	r0, r0, #2
   11a34:	bx	lr
   11a38:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   11a3c:	ldr	r3, [pc, #20]	; 11a58 <__assert_fail@plt+0xb28>
   11a40:	add	r0, r0, #4
   11a44:	smull	r2, r3, r3, r0
   11a48:	asr	r0, r0, #31
   11a4c:	rsb	r0, r0, r3, asr #1
   11a50:	lsl	r0, r0, #3
   11a54:	bx	lr
   11a58:	strbtvs	r6, [r6], -r7, ror #12
   11a5c:	sub	r3, r0, #48	; 0x30
   11a60:	sub	r0, r0, #65	; 0x41
   11a64:	cmp	r0, #21
   11a68:	cmphi	r3, #9
   11a6c:	movls	r0, #1
   11a70:	movhi	r0, #0
   11a74:	bx	lr
   11a78:	sub	r3, r0, #48	; 0x30
   11a7c:	sub	r0, r0, #65	; 0x41
   11a80:	cmp	r0, #5
   11a84:	cmphi	r3, #9
   11a88:	movls	r0, #1
   11a8c:	movhi	r0, #0
   11a90:	bx	lr
   11a94:	lsl	r0, r0, #1
   11a98:	bx	lr
   11a9c:	cmp	r1, #0
   11aa0:	bxeq	lr
   11aa4:	add	r1, r1, #1
   11aa8:	ldr	ip, [pc, #52]	; 11ae4 <__assert_fail@plt+0xbb4>
   11aac:	push	{r4, lr}
   11ab0:	sub	r0, r0, #1
   11ab4:	add	r4, r2, r1, lsl #1
   11ab8:	add	r2, r2, #2
   11abc:	ldrb	r3, [r0, #1]!
   11ac0:	add	r2, r2, #2
   11ac4:	and	lr, r3, #15
   11ac8:	ldrb	r1, [ip, r3, lsr #4]
   11acc:	ldrb	r3, [ip, lr]
   11ad0:	strb	r1, [r2, #-4]
   11ad4:	strb	r3, [r2, #-3]
   11ad8:	cmp	r2, r4
   11adc:	bne	11abc <__assert_fail@plt+0xb8c>
   11ae0:	pop	{r4, pc}
   11ae4:	andeq	r7, r1, r0, lsl r5
   11ae8:	add	r0, r0, r0, lsl #2
   11aec:	add	r3, r0, #3
   11af0:	cmp	r0, #0
   11af4:	movlt	r0, r3
   11af8:	asr	r0, r0, #2
   11afc:	bx	lr
   11b00:	sub	r0, r0, #48	; 0x30
   11b04:	cmp	r0, #1
   11b08:	movhi	r0, #0
   11b0c:	movls	r0, #1
   11b10:	bx	lr
   11b14:	lsl	r0, r0, #3
   11b18:	bx	lr
   11b1c:	cmp	r1, #0
   11b20:	bxeq	lr
   11b24:	push	{lr}		; (str lr, [sp, #-4]!)
   11b28:	add	ip, r2, #7
   11b2c:	add	lr, r0, r1
   11b30:	ldrb	r3, [r0], #1
   11b34:	sub	r2, ip, #8
   11b38:	tst	r3, #128	; 0x80
   11b3c:	movne	r1, #49	; 0x31
   11b40:	moveq	r1, #48	; 0x30
   11b44:	lsl	r3, r3, #1
   11b48:	strb	r1, [r2, #1]!
   11b4c:	cmp	r2, ip
   11b50:	uxtb	r3, r3
   11b54:	bne	11b38 <__assert_fail@plt+0xc08>
   11b58:	cmp	r0, lr
   11b5c:	add	ip, ip, #8
   11b60:	bne	11b30 <__assert_fail@plt+0xc00>
   11b64:	pop	{pc}		; (ldr pc, [sp], #4)
   11b68:	cmp	r1, #0
   11b6c:	bxeq	lr
   11b70:	push	{lr}		; (str lr, [sp, #-4]!)
   11b74:	add	ip, r2, #7
   11b78:	add	lr, r0, r1
   11b7c:	ldrb	r2, [r0], #1
   11b80:	sub	r3, ip, #8
   11b84:	tst	r2, #1
   11b88:	movne	r1, #49	; 0x31
   11b8c:	moveq	r1, #48	; 0x30
   11b90:	strb	r1, [r3, #1]!
   11b94:	cmp	r3, ip
   11b98:	lsr	r2, r2, #1
   11b9c:	bne	11b84 <__assert_fail@plt+0xc54>
   11ba0:	cmp	r0, lr
   11ba4:	add	ip, ip, #8
   11ba8:	bne	11b7c <__assert_fail@plt+0xc4c>
   11bac:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb0:	cmp	r0, #95	; 0x5f
   11bb4:	cmpne	r0, #45	; 0x2d
   11bb8:	moveq	r2, #1
   11bbc:	movne	r2, #0
   11bc0:	beq	11bd4 <__assert_fail@plt+0xca4>
   11bc4:	and	r3, r0, #251	; 0xfb
   11bc8:	cmp	r3, #43	; 0x2b
   11bcc:	beq	11bd4 <__assert_fail@plt+0xca4>
   11bd0:	b	1352c <__assert_fail@plt+0x25fc>
   11bd4:	mov	r0, r2
   11bd8:	bx	lr
   11bdc:	push	{r4, r5, r6, lr}
   11be0:	mov	r5, r3
   11be4:	mov	r4, r2
   11be8:	bl	13298 <__assert_fail@plt+0x2368>
   11bec:	cmp	r5, #0
   11bf0:	popeq	{r4, r5, r6, pc}
   11bf4:	add	r3, r4, r5
   11bf8:	mov	r2, r4
   11bfc:	mov	ip, #95	; 0x5f
   11c00:	mov	r0, #45	; 0x2d
   11c04:	ldrb	r1, [r2]
   11c08:	cmp	r1, #43	; 0x2b
   11c0c:	strbeq	r0, [r2]
   11c10:	beq	11c1c <__assert_fail@plt+0xcec>
   11c14:	cmp	r1, #47	; 0x2f
   11c18:	strbeq	ip, [r2]
   11c1c:	add	r2, r2, #1
   11c20:	cmp	r3, r2
   11c24:	bne	11c04 <__assert_fail@plt+0xcd4>
   11c28:	pop	{r4, r5, r6, pc}
   11c2c:	push	{r4, lr}
   11c30:	mov	r4, r0
   11c34:	ldr	r0, [pc, #24]	; 11c54 <__assert_fail@plt+0xd24>
   11c38:	str	r0, [r4, #20]
   11c3c:	bl	15f8c <__assert_fail@plt+0x505c>
   11c40:	mov	r2, #1
   11c44:	mov	r3, #0
   11c48:	stm	r4, {r2, r3}
   11c4c:	str	r0, [r4, #16]
   11c50:	pop	{r4, pc}
   11c54:	andeq	r1, r0, r8, rrx
   11c58:	push	{r4, lr}
   11c5c:	mov	r4, r0
   11c60:	ldr	r0, [pc, #24]	; 11c80 <__assert_fail@plt+0xd50>
   11c64:	str	r0, [r4, #20]
   11c68:	bl	15f8c <__assert_fail@plt+0x505c>
   11c6c:	mov	r3, #0
   11c70:	strb	r3, [r4, #4]
   11c74:	str	r3, [r4]
   11c78:	str	r0, [r4, #16]
   11c7c:	pop	{r4, pc}
   11c80:	andeq	r1, r0, r8, rrx
   11c84:	push	{r4, lr}
   11c88:	mov	r4, r0
   11c8c:	ldr	r0, [pc, #28]	; 11cb0 <__assert_fail@plt+0xd80>
   11c90:	str	r0, [r4, #20]
   11c94:	bl	15f8c <__assert_fail@plt+0x505c>
   11c98:	mov	r2, #0
   11c9c:	mov	r3, #1
   11ca0:	strb	r2, [r4, #5]
   11ca4:	str	r3, [r4]
   11ca8:	str	r0, [r4, #16]
   11cac:	pop	{r4, pc}
   11cb0:	andeq	r1, r0, r8, rrx
   11cb4:	cmp	r0, #90	; 0x5a
   11cb8:	bhi	11cec <__assert_fail@plt+0xdbc>
   11cbc:	cmp	r0, #65	; 0x41
   11cc0:	bcs	11cf8 <__assert_fail@plt+0xdc8>
   11cc4:	sub	r3, r0, #48	; 0x30
   11cc8:	cmp	r3, #9
   11ccc:	bls	11cf8 <__assert_fail@plt+0xdc8>
   11cd0:	mov	r1, r0
   11cd4:	push	{r4, lr}
   11cd8:	ldr	r0, [pc, #32]	; 11d00 <__assert_fail@plt+0xdd0>
   11cdc:	bl	10e40 <strchr@plt>
   11ce0:	adds	r0, r0, #0
   11ce4:	movne	r0, #1
   11ce8:	pop	{r4, pc}
   11cec:	sub	r3, r0, #97	; 0x61
   11cf0:	cmp	r3, #25
   11cf4:	bhi	11cd0 <__assert_fail@plt+0xda0>
   11cf8:	mov	r0, #1
   11cfc:	bx	lr
   11d00:	andeq	r7, r1, ip, asr r7
   11d04:	push	{r4, lr}
   11d08:	sub	sp, sp, #8
   11d0c:	mov	r4, r0
   11d10:	ldr	ip, [sp, #16]
   11d14:	add	r0, r0, #4
   11d18:	str	ip, [sp]
   11d1c:	bl	12e8c <__assert_fail@plt+0x1f5c>
   11d20:	ldr	r3, [r4, #4]
   11d24:	str	r3, [r4]
   11d28:	add	sp, sp, #8
   11d2c:	pop	{r4, pc}
   11d30:	push	{r4, lr}
   11d34:	mov	r4, r0
   11d38:	add	r0, r0, #4
   11d3c:	bl	12e80 <__assert_fail@plt+0x1f50>
   11d40:	ldr	r0, [pc, #12]	; 11d54 <__assert_fail@plt+0xe24>
   11d44:	str	r0, [r4, #20]
   11d48:	bl	15f8c <__assert_fail@plt+0x505c>
   11d4c:	str	r0, [r4, #16]
   11d50:	pop	{r4, pc}
   11d54:	andeq	r1, r0, r8, rrx
   11d58:	add	r0, r0, #4
   11d5c:	b	12e80 <__assert_fail@plt+0x1f50>
   11d60:	push	{r4, lr}
   11d64:	sub	sp, sp, #8
   11d68:	mov	r4, r0
   11d6c:	ldr	ip, [sp, #16]
   11d70:	add	r0, r0, #4
   11d74:	str	ip, [sp]
   11d78:	bl	13550 <__assert_fail@plt+0x2620>
   11d7c:	ldr	r3, [r4, #4]
   11d80:	str	r3, [r4]
   11d84:	add	sp, sp, #8
   11d88:	pop	{r4, pc}
   11d8c:	push	{r4, lr}
   11d90:	mov	r4, r0
   11d94:	add	r0, r0, #4
   11d98:	bl	13544 <__assert_fail@plt+0x2614>
   11d9c:	ldr	r0, [pc, #12]	; 11db0 <__assert_fail@plt+0xe80>
   11da0:	str	r0, [r4, #20]
   11da4:	bl	15f8c <__assert_fail@plt+0x505c>
   11da8:	str	r0, [r4, #16]
   11dac:	pop	{r4, pc}
   11db0:	andeq	r1, r0, r8, rrx
   11db4:	add	r0, r0, #4
   11db8:	b	13544 <__assert_fail@plt+0x2614>
   11dbc:	push	{r4, lr}
   11dc0:	mov	r4, r1
   11dc4:	bl	13974 <__assert_fail@plt+0x2a44>
   11dc8:	cmp	r0, #0
   11dcc:	beq	11e38 <__assert_fail@plt+0xf08>
   11dd0:	ldr	r1, [pc, #100]	; 11e3c <__assert_fail@plt+0xf0c>
   11dd4:	mov	r0, r4
   11dd8:	bl	10ce4 <strcmp@plt>
   11ddc:	subs	r5, r0, #0
   11de0:	bne	11e0c <__assert_fail@plt+0xedc>
   11de4:	bl	10e4c <__errno_location@plt>
   11de8:	mov	r2, #5
   11dec:	ldr	r1, [pc, #76]	; 11e40 <__assert_fail@plt+0xf10>
   11df0:	ldr	r4, [r0]
   11df4:	mov	r0, r5
   11df8:	bl	10d68 <dcgettext@plt>
   11dfc:	mov	r1, r4
   11e00:	mov	r2, r0
   11e04:	mov	r0, #1
   11e08:	bl	10dd4 <error@plt>
   11e0c:	bl	10e4c <__errno_location@plt>
   11e10:	mov	r2, r4
   11e14:	mov	r1, #3
   11e18:	ldr	r4, [r0]
   11e1c:	mov	r0, #0
   11e20:	bl	158a8 <__assert_fail@plt+0x4978>
   11e24:	mov	r1, r4
   11e28:	ldr	r2, [pc, #20]	; 11e44 <__assert_fail@plt+0xf14>
   11e2c:	mov	r3, r0
   11e30:	mov	r0, #1
   11e34:	bl	10dd4 <error@plt>
   11e38:	bl	10e28 <exit@plt>
   11e3c:	andeq	r7, r1, r4, ror r7
   11e40:	andeq	r7, r1, r8, ror r7
   11e44:	andeq	r7, r1, r8, lsr #30
   11e48:	push	{r4, r5, lr}
   11e4c:	mov	ip, #0
   11e50:	ldr	r4, [sp, #12]
   11e54:	cmp	r2, #0
   11e58:	str	ip, [r4]
   11e5c:	beq	11ed0 <__assert_fail@plt+0xfa0>
   11e60:	ldrb	ip, [r1], #1
   11e64:	cmp	ip, #10
   11e68:	sub	lr, ip, #48	; 0x30
   11e6c:	beq	11ec0 <__assert_fail@plt+0xf90>
   11e70:	cmp	lr, #9
   11e74:	sub	r5, ip, #65	; 0x41
   11e78:	sub	ip, ip, #55	; 0x37
   11e7c:	movls	ip, lr
   11e80:	bls	11e8c <__assert_fail@plt+0xf5c>
   11e84:	cmp	r5, #5
   11e88:	bhi	11edc <__assert_fail@plt+0xfac>
   11e8c:	ldrb	lr, [r0, #5]
   11e90:	cmp	lr, #0
   11e94:	strbeq	ip, [r0, #4]
   11e98:	ldrne	lr, [r4]
   11e9c:	ldrbne	r5, [r0, #4]
   11ea0:	addne	lr, lr, #1
   11ea4:	strne	lr, [r4]
   11ea8:	ldrbne	lr, [r0, #5]
   11eac:	addne	ip, ip, r5, lsl #4
   11eb0:	strbne	ip, [r3]
   11eb4:	addne	r3, r3, #1
   11eb8:	eor	lr, lr, #1
   11ebc:	strb	lr, [r0, #5]
   11ec0:	subs	r2, r2, #1
   11ec4:	bne	11e60 <__assert_fail@plt+0xf30>
   11ec8:	mov	r0, #1
   11ecc:	pop	{r4, r5, pc}
   11ed0:	ldrb	r0, [r0, #5]
   11ed4:	eor	r0, r0, #1
   11ed8:	pop	{r4, r5, pc}
   11edc:	mov	r0, #0
   11ee0:	pop	{r4, r5, pc}
   11ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee8:	sub	sp, sp, #12
   11eec:	mov	lr, #0
   11ef0:	ldr	ip, [sp, #48]	; 0x30
   11ef4:	cmp	r2, #0
   11ef8:	str	lr, [ip]
   11efc:	bne	11f1c <__assert_fail@plt+0xfec>
   11f00:	ldr	r3, [r0, #4]
   11f04:	cmp	r3, #0
   11f08:	movgt	r3, #0
   11f0c:	movle	r3, #1
   11f10:	mov	r0, r3
   11f14:	add	sp, sp, #12
   11f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f1c:	str	lr, [sp, #4]
   11f20:	ldr	lr, [pc, #268]	; 12034 <__assert_fail@plt+0x1104>
   11f24:	b	11f30 <__assert_fail@plt+0x1000>
   11f28:	subs	r2, r2, #1
   11f2c:	beq	1200c <__assert_fail@plt+0x10dc>
   11f30:	ldrb	r4, [r1], #1
   11f34:	cmp	r4, #10
   11f38:	add	r6, lr, r4
   11f3c:	sub	r5, r4, #33	; 0x21
   11f40:	beq	11f28 <__assert_fail@plt+0xff8>
   11f44:	cmp	r5, #92	; 0x5c
   11f48:	bhi	12024 <__assert_fail@plt+0x10f4>
   11f4c:	ldrsb	r5, [r6, #-17]	; 0xffffffef
   11f50:	cmp	r5, #0
   11f54:	blt	12024 <__assert_fail@plt+0x10f4>
   11f58:	ldr	r4, [r0, #4]
   11f5c:	add	r6, r4, #1
   11f60:	add	r4, r0, r4
   11f64:	cmp	r6, #5
   11f68:	str	r6, [r0, #4]
   11f6c:	strb	r5, [r4, #8]
   11f70:	bne	11f28 <__assert_fail@plt+0xff8>
   11f74:	ldrb	r4, [r0, #10]
   11f78:	ldrb	sl, [r0, #9]
   11f7c:	ldrb	r6, [r0, #11]
   11f80:	mov	fp, #85	; 0x55
   11f84:	rsb	r5, r4, r4, lsl #3
   11f88:	ldrb	r7, [r0, #12]
   11f8c:	add	r5, r5, r5, lsl #7
   11f90:	add	r4, r4, r5, lsl #3
   11f94:	ldr	r5, [pc, #156]	; 12038 <__assert_fail@plt+0x1108>
   11f98:	mla	sl, r5, sl, r4
   11f9c:	ldrb	r4, [r0, #8]
   11fa0:	smlabb	r6, fp, r6, sl
   11fa4:	ldr	sl, [pc, #144]	; 1203c <__assert_fail@plt+0x110c>
   11fa8:	add	r6, r6, r7
   11fac:	umull	r4, r5, r4, sl
   11fb0:	adds	r4, r4, r6
   11fb4:	adc	r5, r5, r6, asr #31
   11fb8:	lsr	r8, r4, #24
   11fbc:	orr	r8, r8, r5, lsl #8
   11fc0:	asr	r9, r5, #24
   11fc4:	bic	r6, r8, #255	; 0xff
   11fc8:	mov	r7, r9
   11fcc:	orrs	r6, r6, r7
   11fd0:	lsr	fp, r4, #16
   11fd4:	lsr	sl, r4, #8
   11fd8:	bne	12024 <__assert_fail@plt+0x10f4>
   11fdc:	ldr	r5, [ip]
   11fe0:	strb	r4, [r3, #3]
   11fe4:	add	r4, r5, #4
   11fe8:	str	r4, [ip]
   11fec:	ldr	r4, [sp, #4]
   11ff0:	subs	r2, r2, #1
   11ff4:	strb	r8, [r3]
   11ff8:	strb	fp, [r3, #1]
   11ffc:	strb	sl, [r3, #2]
   12000:	str	r4, [r0, #4]
   12004:	add	r3, r3, #4
   12008:	bne	11f30 <__assert_fail@plt+0x1000>
   1200c:	ldr	r2, [r0, #4]
   12010:	mov	r3, #1
   12014:	str	r2, [r0]
   12018:	mov	r0, r3
   1201c:	add	sp, sp, #12
   12020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12024:	mov	r3, #0
   12028:	mov	r0, r3
   1202c:	add	sp, sp, #12
   12030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12034:	andeq	r7, r1, r0, lsl r5
   12038:	andeq	r5, r9, sp, ror #29
   1203c:	tsteq	ip, #-1325400064	; 0xb1000000
   12040:	push	{r4, r5, r6, r7, lr}
   12044:	cmp	r2, #0
   12048:	ldr	r5, [sp, #20]
   1204c:	mov	r7, #0
   12050:	str	r7, [r5]
   12054:	bne	12064 <__assert_fail@plt+0x1134>
   12058:	b	120d8 <__assert_fail@plt+0x11a8>
   1205c:	subs	r2, r2, #1
   12060:	beq	120d0 <__assert_fail@plt+0x11a0>
   12064:	ldrb	ip, [r1], #1
   12068:	cmp	ip, #10
   1206c:	sub	lr, ip, #48	; 0x30
   12070:	beq	1205c <__assert_fail@plt+0x112c>
   12074:	cmp	lr, #1
   12078:	bhi	120e8 <__assert_fail@plt+0x11b8>
   1207c:	ldr	r6, [r0]
   12080:	ldrb	lr, [r0, #4]
   12084:	sub	ip, ip, #49	; 0x31
   12088:	clz	ip, ip
   1208c:	lsr	ip, ip, #5
   12090:	add	r4, r6, #1
   12094:	orr	ip, lr, ip, lsl r6
   12098:	cmp	r4, #8
   1209c:	uxtb	ip, ip
   120a0:	strb	ip, [r0, #4]
   120a4:	str	r4, [r0]
   120a8:	bne	1205c <__assert_fail@plt+0x112c>
   120ac:	strb	r7, [r0, #4]
   120b0:	ldr	lr, [r5]
   120b4:	strb	ip, [r3]
   120b8:	subs	r2, r2, #1
   120bc:	add	ip, lr, #1
   120c0:	str	ip, [r5]
   120c4:	add	r3, r3, #1
   120c8:	str	r7, [r0]
   120cc:	bne	12064 <__assert_fail@plt+0x1134>
   120d0:	mov	r0, #1
   120d4:	pop	{r4, r5, r6, r7, pc}
   120d8:	ldr	r0, [r0]
   120dc:	clz	r0, r0
   120e0:	lsr	r0, r0, #5
   120e4:	pop	{r4, r5, r6, r7, pc}
   120e8:	mov	r0, #0
   120ec:	pop	{r4, r5, r6, r7, pc}
   120f0:	push	{r4, r5, r6, lr}
   120f4:	cmp	r2, #0
   120f8:	ldr	r5, [sp, #16]
   120fc:	mov	ip, #0
   12100:	movne	r6, #7
   12104:	str	ip, [r5]
   12108:	bne	12128 <__assert_fail@plt+0x11f8>
   1210c:	b	121a4 <__assert_fail@plt+0x1274>
   12110:	ldrb	lr, [r0, #4]
   12114:	str	r6, [r0]
   12118:	orr	ip, lr, ip, lsl #7
   1211c:	strb	ip, [r0, #4]
   12120:	subs	r2, r2, #1
   12124:	beq	1219c <__assert_fail@plt+0x126c>
   12128:	ldrb	ip, [r1], #1
   1212c:	cmp	ip, #10
   12130:	sub	lr, ip, #48	; 0x30
   12134:	beq	12120 <__assert_fail@plt+0x11f0>
   12138:	cmp	lr, #1
   1213c:	bhi	121b4 <__assert_fail@plt+0x1284>
   12140:	ldr	r4, [r0]
   12144:	sub	ip, ip, #49	; 0x31
   12148:	cmp	r4, #0
   1214c:	clz	ip, ip
   12150:	sub	lr, r4, #1
   12154:	lsr	ip, ip, #5
   12158:	beq	12110 <__assert_fail@plt+0x11e0>
   1215c:	ldrb	r4, [r0, #4]
   12160:	cmp	lr, #0
   12164:	str	lr, [r0]
   12168:	orr	ip, r4, ip, lsl lr
   1216c:	uxtb	ip, ip
   12170:	strb	ip, [r0, #4]
   12174:	bne	12120 <__assert_fail@plt+0x11f0>
   12178:	strb	lr, [r0, #4]
   1217c:	ldr	r4, [r5]
   12180:	strb	ip, [r3]
   12184:	subs	r2, r2, #1
   12188:	add	ip, r4, #1
   1218c:	str	ip, [r5]
   12190:	add	r3, r3, #1
   12194:	str	lr, [r0]
   12198:	bne	12128 <__assert_fail@plt+0x11f8>
   1219c:	mov	r0, #1
   121a0:	pop	{r4, r5, r6, pc}
   121a4:	ldr	r0, [r0]
   121a8:	clz	r0, r0
   121ac:	lsr	r0, r0, #5
   121b0:	pop	{r4, r5, r6, pc}
   121b4:	mov	r0, #0
   121b8:	pop	{r4, r5, r6, pc}
   121bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121c0:	sub	sp, sp, #44	; 0x2c
   121c4:	cmp	r1, #0
   121c8:	str	r2, [sp, #16]
   121cc:	str	r3, [sp, #28]
   121d0:	beq	12318 <__assert_fail@plt+0x13e8>
   121d4:	mov	r2, r0
   121d8:	mov	r3, #0
   121dc:	str	r3, [sp, #20]
   121e0:	ldrb	r3, [r2], r1
   121e4:	add	r7, r0, #1
   121e8:	strb	r3, [sp, #36]	; 0x24
   121ec:	mov	r3, #1
   121f0:	str	r2, [sp, #12]
   121f4:	ldr	r2, [sp, #12]
   121f8:	cmp	r2, r7
   121fc:	beq	12310 <__assert_fail@plt+0x13e0>
   12200:	ldrb	r1, [r7], #1
   12204:	add	r2, sp, #40	; 0x28
   12208:	add	r2, r2, r3
   1220c:	add	r3, r3, #1
   12210:	cmp	r3, #4
   12214:	strb	r1, [r2, #-4]
   12218:	bne	121f4 <__assert_fail@plt+0x12c4>
   1221c:	ldrb	r0, [sp, #36]	; 0x24
   12220:	ldrb	r2, [sp, #37]	; 0x25
   12224:	ldrb	r3, [sp, #38]	; 0x26
   12228:	str	r7, [sp, #24]
   1222c:	lsr	ip, r0, #8
   12230:	lsl	r1, r0, #24
   12234:	str	ip, [sp, #4]
   12238:	str	r1, [sp]
   1223c:	ldrd	r4, [sp]
   12240:	lsl	r2, r2, #16
   12244:	lsl	r3, r3, #8
   12248:	adds	r4, r4, r2
   1224c:	adc	r5, r5, r2, asr #31
   12250:	ldrb	r2, [sp, #39]	; 0x27
   12254:	adds	r4, r4, r3
   12258:	adc	r5, r5, r3, asr #31
   1225c:	mov	r3, #0
   12260:	adds	r4, r4, r2
   12264:	adc	r5, r5, r3
   12268:	ldr	r2, [sp, #20]
   1226c:	ldr	r3, [sp, #16]
   12270:	sub	sl, r2, r3
   12274:	mov	r7, sl
   12278:	ldr	sl, [sp, #28]
   1227c:	add	r6, r3, #4
   12280:	sub	fp, r3, #1
   12284:	mov	r3, #0
   12288:	mov	r2, #85	; 0x55
   1228c:	mov	r0, r4
   12290:	mov	r1, r5
   12294:	bl	1727c <__assert_fail@plt+0x634c>
   12298:	add	r3, r7, r6
   1229c:	cmp	r3, sl
   122a0:	mov	r9, r0
   122a4:	mov	r8, r1
   122a8:	bge	122d0 <__assert_fail@plt+0x13a0>
   122ac:	mov	r0, r4
   122b0:	mov	r1, r5
   122b4:	mov	r2, #85	; 0x55
   122b8:	mov	r3, #0
   122bc:	bl	1727c <__assert_fail@plt+0x634c>
   122c0:	ldr	r3, [pc, #120]	; 12340 <__assert_fail@plt+0x1410>
   122c4:	add	r2, r3, r2
   122c8:	ldrb	r3, [r2, #112]	; 0x70
   122cc:	strb	r3, [r6]
   122d0:	sub	r6, r6, #1
   122d4:	cmp	fp, r6
   122d8:	mov	r4, r9
   122dc:	mov	r5, r8
   122e0:	bne	12284 <__assert_fail@plt+0x1354>
   122e4:	ldr	r3, [sp, #16]
   122e8:	ldr	r7, [sp, #24]
   122ec:	add	r3, r3, #5
   122f0:	str	r3, [sp, #16]
   122f4:	ldr	r2, [sp, #12]
   122f8:	ldr	r3, [sp, #20]
   122fc:	cmp	r2, r7
   12300:	add	r3, r3, #5
   12304:	str	r3, [sp, #20]
   12308:	mov	r3, #0
   1230c:	bne	12200 <__assert_fail@plt+0x12d0>
   12310:	cmp	r3, #0
   12314:	bne	12320 <__assert_fail@plt+0x13f0>
   12318:	add	sp, sp, #44	; 0x2c
   1231c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12320:	mov	r2, #5
   12324:	ldr	r1, [pc, #24]	; 12344 <__assert_fail@plt+0x1414>
   12328:	mov	r0, #0
   1232c:	bl	10d68 <dcgettext@plt>
   12330:	mov	r1, #0
   12334:	mov	r2, r0
   12338:	mov	r0, #1
   1233c:	bl	10dd4 <error@plt>
   12340:	andeq	r7, r1, r0, lsl r5
   12344:	muleq	r1, r0, r7
   12348:	push	{r4, r5, r6, lr}
   1234c:	mov	r5, r3
   12350:	mov	r4, r2
   12354:	bl	12b64 <__assert_fail@plt+0x1c34>
   12358:	cmp	r5, #0
   1235c:	popeq	{r4, r5, r6, pc}
   12360:	ldrb	r3, [r4]
   12364:	sub	r2, r3, #50	; 0x32
   12368:	cmp	r2, #40	; 0x28
   1236c:	bhi	123ac <__assert_fail@plt+0x147c>
   12370:	sub	r0, r5, #1
   12374:	mov	r2, r4
   12378:	ldr	ip, [pc, #64]	; 123c0 <__assert_fail@plt+0x1490>
   1237c:	add	r0, r4, r0
   12380:	b	12394 <__assert_fail@plt+0x1464>
   12384:	ldrb	r3, [r2, #1]!
   12388:	sub	r1, r3, #50	; 0x32
   1238c:	cmp	r1, #40	; 0x28
   12390:	bhi	123ac <__assert_fail@plt+0x147c>
   12394:	add	r3, ip, r3
   12398:	cmp	r2, r0
   1239c:	ldrb	r3, [r3, #170]	; 0xaa
   123a0:	strb	r3, [r2]
   123a4:	bne	12384 <__assert_fail@plt+0x1454>
   123a8:	pop	{r4, r5, r6, pc}
   123ac:	ldr	r3, [pc, #16]	; 123c4 <__assert_fail@plt+0x1494>
   123b0:	mov	r2, #452	; 0x1c4
   123b4:	ldr	r1, [pc, #12]	; 123c8 <__assert_fail@plt+0x1498>
   123b8:	ldr	r0, [pc, #12]	; 123cc <__assert_fail@plt+0x149c>
   123bc:	bl	10f30 <__assert_fail@plt>
   123c0:	andeq	r7, r1, r0, lsl r5
   123c4:	ldrdeq	r7, [r1], -r8
   123c8:	andeq	r7, r1, r8, asr #15
   123cc:	ldrdeq	r7, [r1], -r8
   123d0:	push	{r4, r5, r6, r7, r8, lr}
   123d4:	mov	r5, r2
   123d8:	ldr	r2, [r0, #20]
   123dc:	sub	sp, sp, #8
   123e0:	cmp	r5, r2
   123e4:	mov	r4, r0
   123e8:	mov	r8, r1
   123ec:	mov	r7, r3
   123f0:	ldr	r6, [sp, #32]
   123f4:	bgt	1249c <__assert_fail@plt+0x156c>
   123f8:	ldr	r0, [r0, #16]
   123fc:	mov	r1, r8
   12400:	mov	r2, r5
   12404:	bl	10d2c <memcpy@plt>
   12408:	cmp	r5, #0
   1240c:	ldr	r1, [r4, #16]
   12410:	beq	12468 <__assert_fail@plt+0x1538>
   12414:	ldrb	r3, [r1]
   12418:	and	r2, r3, #251	; 0xfb
   1241c:	cmp	r2, #43	; 0x2b
   12420:	subne	r0, r5, #1
   12424:	addne	r0, r1, r0
   12428:	movne	lr, #47	; 0x2f
   1242c:	movne	ip, #43	; 0x2b
   12430:	bne	12448 <__assert_fail@plt+0x1518>
   12434:	b	1248c <__assert_fail@plt+0x155c>
   12438:	ldrb	r3, [r1, #1]!
   1243c:	and	r2, r3, #251	; 0xfb
   12440:	cmp	r2, #43	; 0x2b
   12444:	beq	1248c <__assert_fail@plt+0x155c>
   12448:	cmp	r3, #45	; 0x2d
   1244c:	strbeq	ip, [r1]
   12450:	beq	1245c <__assert_fail@plt+0x152c>
   12454:	cmp	r3, #95	; 0x5f
   12458:	strbeq	lr, [r1]
   1245c:	cmp	r1, r0
   12460:	bne	12438 <__assert_fail@plt+0x1508>
   12464:	ldr	r1, [r4, #16]
   12468:	mov	r3, r7
   1246c:	str	r6, [sp]
   12470:	mov	r2, r5
   12474:	add	r0, r4, #4
   12478:	bl	13550 <__assert_fail@plt+0x2620>
   1247c:	ldr	r3, [r4, #4]
   12480:	str	r3, [r4]
   12484:	add	sp, sp, #8
   12488:	pop	{r4, r5, r6, r7, r8, pc}
   1248c:	mov	r0, #0
   12490:	str	r0, [r6]
   12494:	add	sp, sp, #8
   12498:	pop	{r4, r5, r6, r7, r8, pc}
   1249c:	lsl	r1, r5, #1
   124a0:	str	r1, [r0, #20]
   124a4:	mov	r2, #1
   124a8:	ldr	r0, [r0, #16]
   124ac:	bl	15ff0 <__assert_fail@plt+0x50c0>
   124b0:	str	r0, [r4, #16]
   124b4:	b	123fc <__assert_fail@plt+0x14cc>
   124b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   124bc:	mov	r6, r2
   124c0:	ldr	r2, [r0, #20]
   124c4:	sub	sp, sp, #20
   124c8:	cmp	r6, r2
   124cc:	mov	r5, r0
   124d0:	mov	r4, r1
   124d4:	ldr	r7, [sp, #48]	; 0x30
   124d8:	bgt	12544 <__assert_fail@plt+0x1614>
   124dc:	ldr	r1, [r0, #16]
   124e0:	cmp	r6, #0
   124e4:	beq	12524 <__assert_fail@plt+0x15f4>
   124e8:	ldr	r9, [pc, #124]	; 1256c <__assert_fail@plt+0x163c>
   124ec:	sub	r0, r4, #1
   124f0:	add	r8, r1, r6
   124f4:	ldrb	r2, [r0, #1]!
   124f8:	add	r1, r1, #1
   124fc:	sub	lr, r2, #48	; 0x30
   12500:	sub	ip, r2, #65	; 0x41
   12504:	cmp	ip, #21
   12508:	cmphi	lr, #9
   1250c:	add	r4, r9, r2
   12510:	ldrbls	r2, [r4, #216]	; 0xd8
   12514:	strb	r2, [r1, #-1]
   12518:	cmp	r8, r1
   1251c:	bne	124f4 <__assert_fail@plt+0x15c4>
   12520:	ldr	r1, [r5, #16]
   12524:	str	r7, [sp]
   12528:	mov	r2, r6
   1252c:	add	r0, r5, #4
   12530:	bl	12e8c <__assert_fail@plt+0x1f5c>
   12534:	ldr	r3, [r5, #4]
   12538:	str	r3, [r5]
   1253c:	add	sp, sp, #20
   12540:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12544:	lsl	r1, r6, #1
   12548:	str	r1, [r0, #20]
   1254c:	mov	r2, #1
   12550:	ldr	r0, [r0, #16]
   12554:	str	r3, [sp, #12]
   12558:	bl	15ff0 <__assert_fail@plt+0x50c0>
   1255c:	ldr	r3, [sp, #12]
   12560:	mov	r1, r0
   12564:	str	r0, [r5, #16]
   12568:	b	124e0 <__assert_fail@plt+0x15b0>
   1256c:	andeq	r7, r1, r0, lsl r5
   12570:	subs	r5, r0, #0
   12574:	push	{r7, lr}
   12578:	sub	sp, sp, #56	; 0x38
   1257c:	beq	125b8 <__assert_fail@plt+0x1688>
   12580:	ldr	r3, [pc, #900]	; 1290c <__assert_fail@plt+0x19dc>
   12584:	mov	r2, #5
   12588:	ldr	r1, [pc, #896]	; 12910 <__assert_fail@plt+0x19e0>
   1258c:	mov	r0, #0
   12590:	ldr	r4, [r3]
   12594:	bl	10d68 <dcgettext@plt>
   12598:	ldr	r3, [pc, #884]	; 12914 <__assert_fail@plt+0x19e4>
   1259c:	mov	r1, #1
   125a0:	ldr	r3, [r3]
   125a4:	mov	r2, r0
   125a8:	mov	r0, r4
   125ac:	bl	10e88 <__fprintf_chk@plt>
   125b0:	mov	r0, r5
   125b4:	bl	10e28 <exit@plt>
   125b8:	mov	r2, #5
   125bc:	ldr	r1, [pc, #852]	; 12918 <__assert_fail@plt+0x19e8>
   125c0:	bl	10d68 <dcgettext@plt>
   125c4:	ldr	r3, [pc, #840]	; 12914 <__assert_fail@plt+0x19e4>
   125c8:	ldr	r6, [pc, #844]	; 1291c <__assert_fail@plt+0x19ec>
   125cc:	ldr	r4, [pc, #844]	; 12920 <__assert_fail@plt+0x19f0>
   125d0:	ldr	r2, [r3]
   125d4:	mov	r1, r0
   125d8:	mov	r0, #1
   125dc:	bl	10e70 <__printf_chk@plt>
   125e0:	mov	r2, #5
   125e4:	ldr	r1, [pc, #824]	; 12924 <__assert_fail@plt+0x19f4>
   125e8:	mov	r0, r5
   125ec:	bl	10d68 <dcgettext@plt>
   125f0:	ldr	r1, [r6]
   125f4:	bl	10ccc <fputs_unlocked@plt>
   125f8:	mov	r2, #5
   125fc:	ldr	r1, [pc, #804]	; 12928 <__assert_fail@plt+0x19f8>
   12600:	mov	r0, r5
   12604:	bl	10d68 <dcgettext@plt>
   12608:	ldr	r1, [r6]
   1260c:	bl	10ccc <fputs_unlocked@plt>
   12610:	mov	r2, #5
   12614:	ldr	r1, [pc, #784]	; 1292c <__assert_fail@plt+0x19fc>
   12618:	mov	r0, r5
   1261c:	bl	10d68 <dcgettext@plt>
   12620:	ldr	r1, [r6]
   12624:	bl	10ccc <fputs_unlocked@plt>
   12628:	mov	r2, #5
   1262c:	ldr	r1, [pc, #764]	; 12930 <__assert_fail@plt+0x1a00>
   12630:	mov	r0, r5
   12634:	bl	10d68 <dcgettext@plt>
   12638:	ldr	r1, [r6]
   1263c:	bl	10ccc <fputs_unlocked@plt>
   12640:	mov	r2, #5
   12644:	ldr	r1, [pc, #744]	; 12934 <__assert_fail@plt+0x1a04>
   12648:	mov	r0, r5
   1264c:	bl	10d68 <dcgettext@plt>
   12650:	ldr	r1, [r6]
   12654:	bl	10ccc <fputs_unlocked@plt>
   12658:	mov	r2, #5
   1265c:	ldr	r1, [pc, #724]	; 12938 <__assert_fail@plt+0x1a08>
   12660:	mov	r0, r5
   12664:	bl	10d68 <dcgettext@plt>
   12668:	ldr	r1, [r6]
   1266c:	bl	10ccc <fputs_unlocked@plt>
   12670:	mov	r2, #5
   12674:	ldr	r1, [pc, #704]	; 1293c <__assert_fail@plt+0x1a0c>
   12678:	mov	r0, r5
   1267c:	bl	10d68 <dcgettext@plt>
   12680:	ldr	r1, [r6]
   12684:	bl	10ccc <fputs_unlocked@plt>
   12688:	mov	r2, #5
   1268c:	ldr	r1, [pc, #684]	; 12940 <__assert_fail@plt+0x1a10>
   12690:	mov	r0, r5
   12694:	bl	10d68 <dcgettext@plt>
   12698:	ldr	r1, [r6]
   1269c:	bl	10ccc <fputs_unlocked@plt>
   126a0:	mov	r2, #5
   126a4:	ldr	r1, [pc, #664]	; 12944 <__assert_fail@plt+0x1a14>
   126a8:	mov	r0, r5
   126ac:	bl	10d68 <dcgettext@plt>
   126b0:	ldr	r1, [r6]
   126b4:	bl	10ccc <fputs_unlocked@plt>
   126b8:	mov	r2, #5
   126bc:	ldr	r1, [pc, #644]	; 12948 <__assert_fail@plt+0x1a18>
   126c0:	mov	r0, r5
   126c4:	bl	10d68 <dcgettext@plt>
   126c8:	ldr	r1, [r6]
   126cc:	bl	10ccc <fputs_unlocked@plt>
   126d0:	mov	r2, #5
   126d4:	ldr	r1, [pc, #624]	; 1294c <__assert_fail@plt+0x1a1c>
   126d8:	mov	r0, r5
   126dc:	bl	10d68 <dcgettext@plt>
   126e0:	ldr	r1, [r6]
   126e4:	bl	10ccc <fputs_unlocked@plt>
   126e8:	mov	r2, #5
   126ec:	ldr	r1, [pc, #604]	; 12950 <__assert_fail@plt+0x1a20>
   126f0:	mov	r0, r5
   126f4:	bl	10d68 <dcgettext@plt>
   126f8:	ldr	r1, [r6]
   126fc:	bl	10ccc <fputs_unlocked@plt>
   12700:	mov	r2, #5
   12704:	ldr	r1, [pc, #584]	; 12954 <__assert_fail@plt+0x1a24>
   12708:	mov	r0, r5
   1270c:	bl	10d68 <dcgettext@plt>
   12710:	ldr	r1, [r6]
   12714:	bl	10ccc <fputs_unlocked@plt>
   12718:	mov	r2, #5
   1271c:	ldr	r1, [pc, #564]	; 12958 <__assert_fail@plt+0x1a28>
   12720:	mov	r0, r5
   12724:	bl	10d68 <dcgettext@plt>
   12728:	ldr	r1, [r6]
   1272c:	bl	10ccc <fputs_unlocked@plt>
   12730:	mov	r2, #5
   12734:	ldr	r1, [pc, #544]	; 1295c <__assert_fail@plt+0x1a2c>
   12738:	mov	r0, r5
   1273c:	bl	10d68 <dcgettext@plt>
   12740:	ldr	r1, [r6]
   12744:	bl	10ccc <fputs_unlocked@plt>
   12748:	ldm	r4!, {r0, r1, r2, r3}
   1274c:	mov	lr, sp
   12750:	stmia	lr!, {r0, r1, r2, r3}
   12754:	ldm	r4!, {r0, r1, r2, r3}
   12758:	ldr	ip, [sp]
   1275c:	stmia	lr!, {r0, r1, r2, r3}
   12760:	cmp	ip, #0
   12764:	ldm	r4!, {r0, r1, r2, r3}
   12768:	stmia	lr!, {r0, r1, r2, r3}
   1276c:	ldm	r4, {r0, r1}
   12770:	moveq	r4, sp
   12774:	stm	lr, {r0, r1}
   12778:	beq	127a8 <__assert_fail@plt+0x1878>
   1277c:	ldr	r7, [pc, #476]	; 12960 <__assert_fail@plt+0x1a30>
   12780:	mov	r4, sp
   12784:	b	12794 <__assert_fail@plt+0x1864>
   12788:	ldr	ip, [r4, #8]!
   1278c:	cmp	ip, #0
   12790:	beq	127a8 <__assert_fail@plt+0x1878>
   12794:	mov	r1, ip
   12798:	mov	r0, r7
   1279c:	bl	10ce4 <strcmp@plt>
   127a0:	cmp	r0, #0
   127a4:	bne	12788 <__assert_fail@plt+0x1858>
   127a8:	ldr	r4, [r4, #4]
   127ac:	mov	r2, #5
   127b0:	cmp	r4, #0
   127b4:	ldr	r1, [pc, #424]	; 12964 <__assert_fail@plt+0x1a34>
   127b8:	beq	12860 <__assert_fail@plt+0x1930>
   127bc:	mov	r0, #0
   127c0:	bl	10d68 <dcgettext@plt>
   127c4:	ldr	r3, [pc, #412]	; 12968 <__assert_fail@plt+0x1a38>
   127c8:	ldr	r2, [pc, #412]	; 1296c <__assert_fail@plt+0x1a3c>
   127cc:	mov	r1, r0
   127d0:	mov	r0, #1
   127d4:	bl	10e70 <__printf_chk@plt>
   127d8:	mov	r1, #0
   127dc:	mov	r0, #5
   127e0:	bl	10ec4 <setlocale@plt>
   127e4:	cmp	r0, #0
   127e8:	ldreq	r7, [pc, #368]	; 12960 <__assert_fail@plt+0x1a30>
   127ec:	beq	12808 <__assert_fail@plt+0x18d8>
   127f0:	mov	r2, #3
   127f4:	ldr	r1, [pc, #372]	; 12970 <__assert_fail@plt+0x1a40>
   127f8:	bl	10f18 <strncmp@plt>
   127fc:	ldr	r7, [pc, #348]	; 12960 <__assert_fail@plt+0x1a30>
   12800:	cmp	r0, #0
   12804:	bne	128f0 <__assert_fail@plt+0x19c0>
   12808:	mov	r2, #5
   1280c:	ldr	r1, [pc, #352]	; 12974 <__assert_fail@plt+0x1a44>
   12810:	mov	r0, #0
   12814:	bl	10d68 <dcgettext@plt>
   12818:	ldr	r3, [pc, #320]	; 12960 <__assert_fail@plt+0x1a30>
   1281c:	ldr	r2, [pc, #324]	; 12968 <__assert_fail@plt+0x1a38>
   12820:	mov	r1, r0
   12824:	mov	r0, #1
   12828:	bl	10e70 <__printf_chk@plt>
   1282c:	mov	r2, #5
   12830:	ldr	r1, [pc, #320]	; 12978 <__assert_fail@plt+0x1a48>
   12834:	mov	r0, #0
   12838:	bl	10d68 <dcgettext@plt>
   1283c:	ldr	r2, [pc, #312]	; 1297c <__assert_fail@plt+0x1a4c>
   12840:	cmp	r4, r7
   12844:	ldr	r3, [pc, #308]	; 12980 <__assert_fail@plt+0x1a50>
   12848:	movne	r3, r2
   1284c:	mov	r1, r0
   12850:	mov	r2, r4
   12854:	mov	r0, #1
   12858:	bl	10e70 <__printf_chk@plt>
   1285c:	b	125b0 <__assert_fail@plt+0x1680>
   12860:	mov	r0, r4
   12864:	bl	10d68 <dcgettext@plt>
   12868:	ldr	r3, [pc, #248]	; 12968 <__assert_fail@plt+0x1a38>
   1286c:	ldr	r2, [pc, #248]	; 1296c <__assert_fail@plt+0x1a3c>
   12870:	mov	r1, r0
   12874:	mov	r0, #1
   12878:	bl	10e70 <__printf_chk@plt>
   1287c:	mov	r1, r4
   12880:	mov	r0, #5
   12884:	bl	10ec4 <setlocale@plt>
   12888:	cmp	r0, #0
   1288c:	beq	128a4 <__assert_fail@plt+0x1974>
   12890:	mov	r2, #3
   12894:	ldr	r1, [pc, #212]	; 12970 <__assert_fail@plt+0x1a40>
   12898:	bl	10f18 <strncmp@plt>
   1289c:	cmp	r0, #0
   128a0:	bne	128e8 <__assert_fail@plt+0x19b8>
   128a4:	mov	r2, #5
   128a8:	ldr	r1, [pc, #196]	; 12974 <__assert_fail@plt+0x1a44>
   128ac:	mov	r0, #0
   128b0:	bl	10d68 <dcgettext@plt>
   128b4:	ldr	r3, [pc, #164]	; 12960 <__assert_fail@plt+0x1a30>
   128b8:	ldr	r2, [pc, #168]	; 12968 <__assert_fail@plt+0x1a38>
   128bc:	mov	r4, r3
   128c0:	mov	r1, r0
   128c4:	mov	r0, #1
   128c8:	bl	10e70 <__printf_chk@plt>
   128cc:	ldr	r1, [pc, #164]	; 12978 <__assert_fail@plt+0x1a48>
   128d0:	mov	r2, #5
   128d4:	mov	r0, #0
   128d8:	bl	10d68 <dcgettext@plt>
   128dc:	ldr	r3, [pc, #156]	; 12980 <__assert_fail@plt+0x1a50>
   128e0:	mov	r1, r0
   128e4:	b	12850 <__assert_fail@plt+0x1920>
   128e8:	ldr	r7, [pc, #112]	; 12960 <__assert_fail@plt+0x1a30>
   128ec:	mov	r4, r7
   128f0:	mov	r2, #5
   128f4:	ldr	r1, [pc, #136]	; 12984 <__assert_fail@plt+0x1a54>
   128f8:	mov	r0, #0
   128fc:	bl	10d68 <dcgettext@plt>
   12900:	ldr	r1, [r6]
   12904:	bl	10ccc <fputs_unlocked@plt>
   12908:	b	12808 <__assert_fail@plt+0x18d8>
   1290c:	andeq	r9, r2, r8, asr #2
   12910:	strdeq	r7, [r1], -ip
   12914:	andeq	r9, r2, ip, ror r1
   12918:	andeq	r7, r1, r4, lsr #16
   1291c:	andeq	r9, r2, r4, asr r1
   12920:	andeq	r7, r1, r4, asr #12
   12924:	andeq	r7, r1, r4, asr #16
   12928:	andeq	r7, r1, ip, lsl #17
   1292c:	andeq	r7, r1, r4, asr #17
   12930:	andeq	r7, r1, r0, lsl r9
   12934:	andeq	r7, r1, r8, asr r9
   12938:	andeq	r7, r1, r0, lsr #19
   1293c:	andeq	r7, r1, r8, ror #19
   12940:	andeq	r7, r1, r4, lsr sl
   12944:	andeq	r7, r1, r0, ror sl
   12948:			; <UNDEFINED> instruction: 0x00017abc
   1294c:	andeq	r7, r1, r8, lsl #22
   12950:	strdeq	r7, [r1], -ip
   12954:	ldrdeq	r7, [r1], -ip
   12958:	andeq	r7, r1, ip, lsl #26
   1295c:	andeq	r7, r1, r4, asr #26
   12960:	strdeq	r7, [r1], -r4
   12964:	andeq	r7, r1, ip, lsl #28
   12968:	andeq	r7, r1, r4, lsr #28
   1296c:	andeq	r7, r1, ip, asr #28
   12970:	andeq	r7, r1, ip, asr lr
   12974:	andeq	r7, r1, r8, lsr #29
   12978:	andeq	r7, r1, r4, asr #29
   1297c:	andeq	r7, r1, r8, lsl #26
   12980:			; <UNDEFINED> instruction: 0x00017fb4
   12984:	andeq	r7, r1, r0, ror #28
   12988:	cmp	r1, #7
   1298c:	ble	12b38 <__assert_fail@plt+0x1c08>
   12990:	push	{r4, r5, r6, lr}
   12994:	ldrb	r1, [r0]
   12998:	ldr	ip, [pc, #448]	; 12b60 <__assert_fail@plt+0x1c30>
   1299c:	ldrsb	r4, [ip, r1]
   129a0:	cmp	r4, #0
   129a4:	blt	12ae8 <__assert_fail@plt+0x1bb8>
   129a8:	ldrb	r1, [r0, #1]
   129ac:	ldrsb	r5, [ip, r1]
   129b0:	cmp	r5, #0
   129b4:	blt	12ae8 <__assert_fail@plt+0x1bb8>
   129b8:	ldr	r1, [r3]
   129bc:	ldr	lr, [r2]
   129c0:	cmp	r1, #0
   129c4:	bne	12b40 <__assert_fail@plt+0x1c10>
   129c8:	ldrb	r4, [r0, #2]
   129cc:	cmp	r4, #61	; 0x3d
   129d0:	beq	12af0 <__assert_fail@plt+0x1bc0>
   129d4:	ldrsb	r4, [ip, r4]
   129d8:	cmp	r4, #0
   129dc:	blt	12b2c <__assert_fail@plt+0x1bfc>
   129e0:	ldrb	r6, [r0, #3]
   129e4:	ldrsb	r6, [ip, r6]
   129e8:	cmp	r6, #0
   129ec:	blt	12b2c <__assert_fail@plt+0x1bfc>
   129f0:	cmp	r1, #0
   129f4:	beq	12a18 <__assert_fail@plt+0x1ae8>
   129f8:	lsl	r4, r4, #1
   129fc:	orr	r5, r4, r5, lsl #6
   12a00:	orr	r5, r5, r6, asr #4
   12a04:	strb	r5, [lr]
   12a08:	ldr	r1, [r3]
   12a0c:	add	lr, lr, #1
   12a10:	sub	r1, r1, #1
   12a14:	str	r1, [r3]
   12a18:	ldrb	r4, [r0, #4]
   12a1c:	cmp	r4, #61	; 0x3d
   12a20:	beq	12b08 <__assert_fail@plt+0x1bd8>
   12a24:	ldrsb	r4, [ip, r4]
   12a28:	cmp	r4, #0
   12a2c:	blt	12b2c <__assert_fail@plt+0x1bfc>
   12a30:	cmp	r1, #0
   12a34:	beq	12a54 <__assert_fail@plt+0x1b24>
   12a38:	asr	r1, r4, #1
   12a3c:	orr	r6, r1, r6, lsl #4
   12a40:	strb	r6, [lr]
   12a44:	ldr	r1, [r3]
   12a48:	add	lr, lr, #1
   12a4c:	sub	r1, r1, #1
   12a50:	str	r1, [r3]
   12a54:	ldrb	r5, [r0, #5]
   12a58:	cmp	r5, #61	; 0x3d
   12a5c:	beq	12b14 <__assert_fail@plt+0x1be4>
   12a60:	ldrsb	r5, [ip, r5]
   12a64:	cmp	r5, #0
   12a68:	blt	12b2c <__assert_fail@plt+0x1bfc>
   12a6c:	ldrb	r6, [r0, #6]
   12a70:	ldrsb	r6, [ip, r6]
   12a74:	cmp	r6, #0
   12a78:	blt	12b2c <__assert_fail@plt+0x1bfc>
   12a7c:	cmp	r1, #0
   12a80:	beq	12aa4 <__assert_fail@plt+0x1b74>
   12a84:	lsl	r5, r5, #2
   12a88:	orr	r4, r5, r4, lsl #7
   12a8c:	orr	r4, r4, r6, asr #3
   12a90:	strb	r4, [lr]
   12a94:	ldr	r1, [r3]
   12a98:	add	lr, lr, #1
   12a9c:	sub	r1, r1, #1
   12aa0:	str	r1, [r3]
   12aa4:	ldrb	r0, [r0, #7]
   12aa8:	cmp	r0, #61	; 0x3d
   12aac:	beq	12adc <__assert_fail@plt+0x1bac>
   12ab0:	ldrsb	r0, [ip, r0]
   12ab4:	cmp	r0, #0
   12ab8:	blt	12b2c <__assert_fail@plt+0x1bfc>
   12abc:	cmp	r1, #0
   12ac0:	beq	12adc <__assert_fail@plt+0x1bac>
   12ac4:	orr	r0, r0, r6, lsl #5
   12ac8:	strb	r0, [lr]
   12acc:	ldr	r1, [r3]
   12ad0:	add	lr, lr, #1
   12ad4:	sub	r1, r1, #1
   12ad8:	str	r1, [r3]
   12adc:	str	lr, [r2]
   12ae0:	mov	r0, #1
   12ae4:	pop	{r4, r5, r6, pc}
   12ae8:	mov	r0, #0
   12aec:	pop	{r4, r5, r6, pc}
   12af0:	ldrb	r3, [r0, #3]
   12af4:	cmp	r3, #61	; 0x3d
   12af8:	bne	12b2c <__assert_fail@plt+0x1bfc>
   12afc:	ldrb	r3, [r0, #4]
   12b00:	cmp	r3, #61	; 0x3d
   12b04:	bne	12b2c <__assert_fail@plt+0x1bfc>
   12b08:	ldrb	r3, [r0, #5]
   12b0c:	cmp	r3, #61	; 0x3d
   12b10:	bne	12b2c <__assert_fail@plt+0x1bfc>
   12b14:	ldrb	r3, [r0, #6]
   12b18:	cmp	r3, #61	; 0x3d
   12b1c:	bne	12b2c <__assert_fail@plt+0x1bfc>
   12b20:	ldrb	r3, [r0, #7]
   12b24:	cmp	r3, #61	; 0x3d
   12b28:	beq	12adc <__assert_fail@plt+0x1bac>
   12b2c:	str	lr, [r2]
   12b30:	mov	r0, #0
   12b34:	pop	{r4, r5, r6, pc}
   12b38:	mov	r0, #0
   12b3c:	bx	lr
   12b40:	asr	r1, r5, #2
   12b44:	orr	r4, r1, r4, lsl #3
   12b48:	strb	r4, [lr]
   12b4c:	ldr	r1, [r3]
   12b50:	add	lr, lr, #1
   12b54:	sub	r1, r1, #1
   12b58:	str	r1, [r3]
   12b5c:	b	129c8 <__assert_fail@plt+0x1a98>
   12b60:	andeq	r8, r1, r4, lsr #1
   12b64:	push	{r4, r5, r6, lr}
   12b68:	add	r2, r2, #8
   12b6c:	sub	r5, r3, #8
   12b70:	ldr	lr, [pc, #568]	; 12db0 <__assert_fail@plt+0x1e80>
   12b74:	mov	r4, #61	; 0x3d
   12b78:	b	12c7c <__assert_fail@plt+0x1d4c>
   12b7c:	ldrb	r6, [r0, #1]
   12b80:	cmp	r3, #2
   12b84:	add	ip, ip, r6, lsr #6
   12b88:	and	ip, ip, #31
   12b8c:	add	ip, lr, ip
   12b90:	ldrb	ip, [ip, #256]	; 0x100
   12b94:	strb	ip, [r2, #-7]
   12b98:	beq	12d84 <__assert_fail@plt+0x1e54>
   12b9c:	lsl	ip, r6, #26
   12ba0:	cmp	r3, #3
   12ba4:	add	ip, lr, ip, lsr #27
   12ba8:	ldrb	ip, [ip, #256]	; 0x100
   12bac:	strb	ip, [r2, #-6]
   12bb0:	beq	12d90 <__assert_fail@plt+0x1e60>
   12bb4:	cmp	r1, #2
   12bb8:	lsl	r6, r6, #4
   12bbc:	beq	12d1c <__assert_fail@plt+0x1dec>
   12bc0:	ldrb	ip, [r0, #2]
   12bc4:	cmp	r3, #4
   12bc8:	add	r6, r6, ip, lsr #4
   12bcc:	and	r6, r6, #31
   12bd0:	add	r6, lr, r6
   12bd4:	ldrb	r6, [r6, #256]	; 0x100
   12bd8:	strb	r6, [r2, #-5]
   12bdc:	beq	12da4 <__assert_fail@plt+0x1e74>
   12be0:	cmp	r1, #3
   12be4:	lsl	r6, ip, #1
   12be8:	beq	12d38 <__assert_fail@plt+0x1e08>
   12bec:	ldrb	ip, [r0, #3]
   12bf0:	cmp	r3, #5
   12bf4:	add	r6, r6, ip, lsr #7
   12bf8:	and	r6, r6, #31
   12bfc:	add	r6, lr, r6
   12c00:	ldrb	r6, [r6, #256]	; 0x100
   12c04:	strb	r6, [r2, #-4]
   12c08:	beq	12da8 <__assert_fail@plt+0x1e78>
   12c0c:	lsl	r6, ip, #25
   12c10:	cmp	r3, #6
   12c14:	add	r6, lr, r6, lsr #27
   12c18:	ldrb	r6, [r6, #256]	; 0x100
   12c1c:	strb	r6, [r2, #-3]
   12c20:	beq	12d98 <__assert_fail@plt+0x1e68>
   12c24:	cmp	r1, #4
   12c28:	lsl	ip, ip, #3
   12c2c:	beq	12d54 <__assert_fail@plt+0x1e24>
   12c30:	ldrb	r6, [r0, #4]
   12c34:	cmp	r3, #7
   12c38:	add	ip, ip, r6, lsr #5
   12c3c:	and	ip, ip, #31
   12c40:	add	ip, lr, ip
   12c44:	ldrb	ip, [ip, #256]	; 0x100
   12c48:	strb	ip, [r2, #-2]
   12c4c:	beq	12dac <__assert_fail@plt+0x1e7c>
   12c50:	and	r6, r6, #31
   12c54:	add	r6, lr, r6
   12c58:	cmp	r5, #0
   12c5c:	ldrb	ip, [r6, #256]	; 0x100
   12c60:	strb	ip, [r2, #-1]
   12c64:	beq	12da0 <__assert_fail@plt+0x1e70>
   12c68:	subs	r1, r1, #5
   12c6c:	addne	r0, r0, #5
   12c70:	sub	r3, r3, #8
   12c74:	sub	r5, r5, #8
   12c78:	add	r2, r2, #8
   12c7c:	cmp	r1, #0
   12c80:	cmpne	r3, #0
   12c84:	movne	r6, #1
   12c88:	moveq	r6, #0
   12c8c:	beq	12d70 <__assert_fail@plt+0x1e40>
   12c90:	ldrb	ip, [r0]
   12c94:	cmp	r3, #1
   12c98:	add	r6, lr, ip, lsr #3
   12c9c:	ldrb	r6, [r6, #256]	; 0x100
   12ca0:	strb	r6, [r2, #-8]
   12ca4:	popeq	{r4, r5, r6, pc}
   12ca8:	cmp	r1, #1
   12cac:	lsl	ip, ip, #2
   12cb0:	bne	12b7c <__assert_fail@plt+0x1c4c>
   12cb4:	and	ip, ip, #31
   12cb8:	add	ip, lr, ip
   12cbc:	cmp	r3, #2
   12cc0:	ldrb	r1, [ip, #256]	; 0x100
   12cc4:	strb	r1, [r2, #-7]
   12cc8:	beq	12d88 <__assert_fail@plt+0x1e58>
   12ccc:	cmp	r3, #3
   12cd0:	strb	r4, [r2, #-6]
   12cd4:	beq	12d8c <__assert_fail@plt+0x1e5c>
   12cd8:	cmp	r3, #4
   12cdc:	strb	r4, [r2, #-5]
   12ce0:	beq	12d94 <__assert_fail@plt+0x1e64>
   12ce4:	cmp	r3, #5
   12ce8:	strb	r4, [r2, #-4]
   12cec:	beq	12d7c <__assert_fail@plt+0x1e4c>
   12cf0:	cmp	r3, #6
   12cf4:	strb	r4, [r2, #-3]
   12cf8:	beq	12d80 <__assert_fail@plt+0x1e50>
   12cfc:	cmp	r3, #7
   12d00:	strb	r4, [r2, #-2]
   12d04:	beq	12d9c <__assert_fail@plt+0x1e6c>
   12d08:	cmp	r5, #0
   12d0c:	strb	r4, [r2, #-1]
   12d10:	popeq	{r4, r5, r6, pc}
   12d14:	mov	r1, #0
   12d18:	b	12c70 <__assert_fail@plt+0x1d40>
   12d1c:	and	r6, r6, #31
   12d20:	add	r6, lr, r6
   12d24:	cmp	r3, #4
   12d28:	ldrb	r1, [r6, #256]	; 0x100
   12d2c:	strb	r1, [r2, #-5]
   12d30:	bne	12ce4 <__assert_fail@plt+0x1db4>
   12d34:	pop	{r4, r5, r6, pc}
   12d38:	and	ip, r6, #31
   12d3c:	add	ip, lr, ip
   12d40:	cmp	r3, #5
   12d44:	ldrb	r1, [ip, #256]	; 0x100
   12d48:	strb	r1, [r2, #-4]
   12d4c:	bne	12cf0 <__assert_fail@plt+0x1dc0>
   12d50:	pop	{r4, r5, r6, pc}
   12d54:	and	ip, ip, #31
   12d58:	add	ip, lr, ip
   12d5c:	cmp	r3, #7
   12d60:	ldrb	r1, [ip, #256]	; 0x100
   12d64:	strb	r1, [r2, #-2]
   12d68:	bne	12d08 <__assert_fail@plt+0x1dd8>
   12d6c:	pop	{r4, r5, r6, pc}
   12d70:	cmp	r3, #0
   12d74:	strbne	r6, [r2, #-8]
   12d78:	pop	{r4, r5, r6, pc}
   12d7c:	pop	{r4, r5, r6, pc}
   12d80:	pop	{r4, r5, r6, pc}
   12d84:	pop	{r4, r5, r6, pc}
   12d88:	pop	{r4, r5, r6, pc}
   12d8c:	pop	{r4, r5, r6, pc}
   12d90:	pop	{r4, r5, r6, pc}
   12d94:	pop	{r4, r5, r6, pc}
   12d98:	pop	{r4, r5, r6, pc}
   12d9c:	pop	{r4, r5, r6, pc}
   12da0:	pop	{r4, r5, r6, pc}
   12da4:	pop	{r4, r5, r6, pc}
   12da8:	pop	{r4, r5, r6, pc}
   12dac:	pop	{r4, r5, r6, pc}
   12db0:	andeq	r8, r1, r4, lsr #1
   12db4:	ldr	r3, [pc, #168]	; 12e64 <__assert_fail@plt+0x1f34>
   12db8:	push	{r4, r5, r6, r7, r8, lr}
   12dbc:	mov	r5, r1
   12dc0:	smull	r3, r1, r3, r1
   12dc4:	asr	r3, r5, #31
   12dc8:	rsb	r3, r3, r1, asr #1
   12dcc:	mov	r6, r0
   12dd0:	add	r4, r3, r3, lsl #2
   12dd4:	cmp	r5, r4
   12dd8:	moveq	r4, r3
   12ddc:	addne	r4, r3, #1
   12de0:	cmp	r4, #0
   12de4:	mov	r7, r2
   12de8:	blt	12e38 <__assert_fail@plt+0x1f08>
   12dec:	cmn	r4, #-268435455	; 0xf0000001
   12df0:	bgt	12e54 <__assert_fail@plt+0x1f24>
   12df4:	cmp	r5, #0
   12df8:	blt	12e54 <__assert_fail@plt+0x1f24>
   12dfc:	lsl	r4, r4, #3
   12e00:	add	r8, r4, #1
   12e04:	mov	r0, r8
   12e08:	bl	16b64 <__assert_fail@plt+0x5c34>
   12e0c:	cmp	r0, #0
   12e10:	str	r0, [r7]
   12e14:	moveq	r4, r8
   12e18:	beq	12e5c <__assert_fail@plt+0x1f2c>
   12e1c:	mov	r2, r0
   12e20:	mov	r3, r8
   12e24:	mov	r0, r6
   12e28:	mov	r1, r5
   12e2c:	bl	12b64 <__assert_fail@plt+0x1c34>
   12e30:	mov	r0, r4
   12e34:	pop	{r4, r5, r6, r7, r8, pc}
   12e38:	cmn	r4, #1
   12e3c:	beq	12df4 <__assert_fail@plt+0x1ec4>
   12e40:	mov	r1, r4
   12e44:	mov	r0, #-2147483648	; 0x80000000
   12e48:	bl	1703c <__assert_fail@plt+0x610c>
   12e4c:	cmp	r0, #7
   12e50:	bgt	12df4 <__assert_fail@plt+0x1ec4>
   12e54:	mov	r4, #0
   12e58:	str	r4, [r7]
   12e5c:	mov	r0, r4
   12e60:	pop	{r4, r5, r6, r7, r8, pc}
   12e64:	strbtvs	r6, [r6], -r7, ror #12
   12e68:	ldr	r3, [pc, #12]	; 12e7c <__assert_fail@plt+0x1f4c>
   12e6c:	ldrb	r0, [r3, r0]
   12e70:	eor	r0, r0, #128	; 0x80
   12e74:	lsr	r0, r0, #7
   12e78:	bx	lr
   12e7c:	andeq	r8, r1, r4, lsr #1
   12e80:	mov	r3, #0
   12e84:	str	r3, [r0]
   12e88:	bx	lr
   12e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e90:	sub	sp, sp, #20
   12e94:	mov	r5, r1
   12e98:	ldr	r1, [sp, #56]	; 0x38
   12e9c:	subs	r6, r0, #0
   12ea0:	mov	r4, r2
   12ea4:	ldr	r7, [r1]
   12ea8:	str	r3, [sp, #4]
   12eac:	str	r7, [sp, #12]
   12eb0:	movne	sl, #1
   12eb4:	moveq	sl, #0
   12eb8:	beq	130b8 <__assert_fail@plt+0x2188>
   12ebc:	adds	r8, r2, #0
   12ec0:	ldr	r9, [r6]
   12ec4:	movne	r8, #1
   12ec8:	cmp	r9, #0
   12ecc:	movne	r9, #0
   12ed0:	andeq	r9, r8, #1
   12ed4:	and	sl, sl, r8
   12ed8:	cmp	r9, #0
   12edc:	moveq	r3, r7
   12ee0:	bne	13014 <__assert_fail@plt+0x20e4>
   12ee4:	cmp	r4, #0
   12ee8:	movne	r0, #0
   12eec:	andeq	r0, r8, #1
   12ef0:	cmp	r0, #0
   12ef4:	bne	1304c <__assert_fail@plt+0x211c>
   12ef8:	cmp	r4, #0
   12efc:	beq	12f0c <__assert_fail@plt+0x1fdc>
   12f00:	ldrb	r2, [r5]
   12f04:	cmp	r2, #10
   12f08:	beq	13074 <__assert_fail@plt+0x2144>
   12f0c:	ldr	r2, [sp, #4]
   12f10:	sub	r3, r7, r3
   12f14:	sub	r3, r2, r3
   12f18:	cmp	r6, #0
   12f1c:	str	r7, [sp, #12]
   12f20:	str	r3, [sp, #4]
   12f24:	add	r7, r5, r4
   12f28:	beq	13038 <__assert_fail@plt+0x2108>
   12f2c:	ldr	fp, [r6]
   12f30:	cmp	fp, #8
   12f34:	moveq	r2, #0
   12f38:	clzne	r3, fp
   12f3c:	moveq	r3, #1
   12f40:	lsrne	r3, r3, #5
   12f44:	moveq	fp, r2
   12f48:	streq	r2, [r6]
   12f4c:	cmp	r4, #7
   12f50:	movle	r4, #0
   12f54:	andgt	r4, r3, #1
   12f58:	cmp	r4, #0
   12f5c:	beq	12f84 <__assert_fail@plt+0x2054>
   12f60:	mov	r0, r5
   12f64:	mov	r2, #8
   12f68:	mov	r1, #10
   12f6c:	bl	10e94 <memchr@plt>
   12f70:	cmp	r0, #0
   12f74:	moveq	r4, #8
   12f78:	moveq	r0, r5
   12f7c:	addeq	r5, r5, r4
   12f80:	beq	12fe4 <__assert_fail@plt+0x20b4>
   12f84:	cmp	r7, r5
   12f88:	mov	r0, r5
   12f8c:	bls	12fc0 <__assert_fail@plt+0x2090>
   12f90:	ldrb	r2, [r0], #1
   12f94:	add	r4, fp, #1
   12f98:	mov	r3, r6
   12f9c:	cmp	r2, #10
   12fa0:	beq	12fb8 <__assert_fail@plt+0x2088>
   12fa4:	cmp	r4, #8
   12fa8:	str	r4, [r3], fp
   12fac:	mov	fp, r4
   12fb0:	strb	r2, [r3, #4]
   12fb4:	beq	13068 <__assert_fail@plt+0x2138>
   12fb8:	cmp	r7, r0
   12fbc:	bne	12f90 <__assert_fail@plt+0x2060>
   12fc0:	mov	r4, fp
   12fc4:	cmp	r4, #0
   12fc8:	mov	r5, r0
   12fcc:	add	r0, r6, #4
   12fd0:	beq	13044 <__assert_fail@plt+0x2114>
   12fd4:	cmp	r4, #7
   12fd8:	bgt	12fe4 <__assert_fail@plt+0x20b4>
   12fdc:	cmp	sl, #0
   12fe0:	bne	13044 <__assert_fail@plt+0x2114>
   12fe4:	add	r3, sp, #12
   12fe8:	add	r2, sp, #4
   12fec:	mov	r1, r4
   12ff0:	bl	12988 <__assert_fail@plt+0x1a58>
   12ff4:	cmp	r0, #0
   12ff8:	beq	130a8 <__assert_fail@plt+0x2178>
   12ffc:	sub	r4, r7, r5
   13000:	ldr	r7, [sp, #12]
   13004:	b	12ed8 <__assert_fail@plt+0x1fa8>
   13008:	ldr	r7, [sp, #12]
   1300c:	sub	r4, r4, #8
   13010:	add	r5, r5, #8
   13014:	add	r3, sp, #12
   13018:	add	r2, sp, #4
   1301c:	mov	r1, r4
   13020:	mov	r0, r5
   13024:	bl	12988 <__assert_fail@plt+0x1a58>
   13028:	cmp	r0, #0
   1302c:	bne	13008 <__assert_fail@plt+0x20d8>
   13030:	ldr	r3, [sp, #12]
   13034:	b	12ee4 <__assert_fail@plt+0x1fb4>
   13038:	cmp	r4, #0
   1303c:	mov	r0, r5
   13040:	bne	12fd4 <__assert_fail@plt+0x20a4>
   13044:	ldr	r3, [sp, #12]
   13048:	mov	r0, #1
   1304c:	ldr	r2, [sp, #56]	; 0x38
   13050:	ldr	r2, [r2]
   13054:	sub	r3, r2, r3
   13058:	ldr	r2, [sp, #56]	; 0x38
   1305c:	str	r3, [r2]
   13060:	add	sp, sp, #20
   13064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13068:	mov	r5, r0
   1306c:	add	r0, r6, #4
   13070:	b	12fe4 <__assert_fail@plt+0x20b4>
   13074:	cmp	r6, #0
   13078:	subne	r4, r4, #1
   1307c:	movne	r7, r3
   13080:	addne	r5, r5, #1
   13084:	bne	12ed8 <__assert_fail@plt+0x1fa8>
   13088:	ldr	r2, [sp, #4]
   1308c:	sub	r3, r7, r3
   13090:	sub	r3, r2, r3
   13094:	str	r7, [sp, #12]
   13098:	str	r3, [sp, #4]
   1309c:	add	r7, r5, r4
   130a0:	mov	r0, r5
   130a4:	b	12fd4 <__assert_fail@plt+0x20a4>
   130a8:	clz	r0, r4
   130ac:	ldr	r3, [sp, #12]
   130b0:	lsr	r0, r0, #5
   130b4:	b	1304c <__assert_fail@plt+0x211c>
   130b8:	mov	r9, #1
   130bc:	mov	r8, r9
   130c0:	b	12ed4 <__assert_fail@plt+0x1fa4>
   130c4:	asr	ip, r2, #3
   130c8:	add	ip, ip, #1
   130cc:	push	{r4, r5, r6, r7, r8, lr}
   130d0:	add	ip, ip, ip, lsl #2
   130d4:	sub	sp, sp, #16
   130d8:	mov	r7, r0
   130dc:	mov	r0, ip
   130e0:	mov	r5, r3
   130e4:	mov	r4, r2
   130e8:	mov	r8, r1
   130ec:	str	ip, [sp, #12]
   130f0:	ldr	r6, [sp, #40]	; 0x28
   130f4:	bl	16b64 <__assert_fail@plt+0x5c34>
   130f8:	cmp	r0, #0
   130fc:	str	r0, [r5]
   13100:	beq	13144 <__assert_fail@plt+0x2214>
   13104:	add	ip, sp, #12
   13108:	mov	r3, r0
   1310c:	mov	r2, r4
   13110:	mov	r1, r8
   13114:	mov	r0, r7
   13118:	str	ip, [sp]
   1311c:	bl	12e8c <__assert_fail@plt+0x1f5c>
   13120:	subs	r4, r0, #0
   13124:	beq	13154 <__assert_fail@plt+0x2224>
   13128:	cmp	r6, #0
   1312c:	beq	13144 <__assert_fail@plt+0x2214>
   13130:	ldr	r3, [sp, #12]
   13134:	mov	r0, r4
   13138:	str	r3, [r6]
   1313c:	add	sp, sp, #16
   13140:	pop	{r4, r5, r6, r7, r8, pc}
   13144:	mov	r4, #1
   13148:	mov	r0, r4
   1314c:	add	sp, sp, #16
   13150:	pop	{r4, r5, r6, r7, r8, pc}
   13154:	ldr	r0, [r5]
   13158:	bl	13a74 <__assert_fail@plt+0x2b44>
   1315c:	mov	r0, r4
   13160:	str	r4, [r5]
   13164:	add	sp, sp, #16
   13168:	pop	{r4, r5, r6, r7, r8, pc}
   1316c:	cmp	r1, #1
   13170:	ble	13274 <__assert_fail@plt+0x2344>
   13174:	push	{r4, r5, r6, lr}
   13178:	ldrb	ip, [r0]
   1317c:	ldr	lr, [pc, #272]	; 13294 <__assert_fail@plt+0x2364>
   13180:	ldrsb	r5, [lr, ip]
   13184:	cmp	r5, #0
   13188:	blt	1326c <__assert_fail@plt+0x233c>
   1318c:	ldrb	ip, [r0, #1]
   13190:	ldrsb	r6, [lr, ip]
   13194:	cmp	r6, #0
   13198:	blt	1326c <__assert_fail@plt+0x233c>
   1319c:	ldr	ip, [r3]
   131a0:	ldr	r4, [r2]
   131a4:	cmp	ip, #0
   131a8:	beq	131c8 <__assert_fail@plt+0x2298>
   131ac:	asr	ip, r6, #4
   131b0:	orr	r5, ip, r5, lsl #2
   131b4:	strb	r5, [r4]
   131b8:	ldr	ip, [r3]
   131bc:	add	r4, r4, #1
   131c0:	sub	ip, ip, #1
   131c4:	str	ip, [r3]
   131c8:	cmp	r1, #2
   131cc:	beq	13260 <__assert_fail@plt+0x2330>
   131d0:	ldrb	r5, [r0, #2]
   131d4:	cmp	r5, #61	; 0x3d
   131d8:	beq	1327c <__assert_fail@plt+0x234c>
   131dc:	ldrsb	r5, [lr, r5]
   131e0:	cmp	r5, #0
   131e4:	blt	13260 <__assert_fail@plt+0x2330>
   131e8:	cmp	ip, #0
   131ec:	beq	1320c <__assert_fail@plt+0x22dc>
   131f0:	asr	ip, r5, #2
   131f4:	orr	r6, ip, r6, lsl #4
   131f8:	strb	r6, [r4]
   131fc:	ldr	ip, [r3]
   13200:	add	r4, r4, #1
   13204:	sub	ip, ip, #1
   13208:	str	ip, [r3]
   1320c:	cmp	r1, #3
   13210:	beq	13260 <__assert_fail@plt+0x2330>
   13214:	ldrb	r0, [r0, #3]
   13218:	cmp	r0, #61	; 0x3d
   1321c:	beq	13258 <__assert_fail@plt+0x2328>
   13220:	ldrsb	r1, [lr, r0]
   13224:	cmp	r1, #0
   13228:	blt	13260 <__assert_fail@plt+0x2330>
   1322c:	cmp	ip, #0
   13230:	beq	1324c <__assert_fail@plt+0x231c>
   13234:	orr	r5, r1, r5, lsl #6
   13238:	strb	r5, [r4]
   1323c:	ldr	r1, [r3]
   13240:	add	r4, r4, #1
   13244:	sub	r1, r1, #1
   13248:	str	r1, [r3]
   1324c:	str	r4, [r2]
   13250:	mov	r0, #1
   13254:	pop	{r4, r5, r6, pc}
   13258:	cmp	r1, #4
   1325c:	beq	1324c <__assert_fail@plt+0x231c>
   13260:	str	r4, [r2]
   13264:	mov	r0, #0
   13268:	pop	{r4, r5, r6, pc}
   1326c:	mov	r0, #0
   13270:	pop	{r4, r5, r6, pc}
   13274:	mov	r0, #0
   13278:	bx	lr
   1327c:	cmp	r1, #4
   13280:	bne	13260 <__assert_fail@plt+0x2330>
   13284:	ldrb	r3, [r0, #3]
   13288:	cmp	r3, #61	; 0x3d
   1328c:	bne	13260 <__assert_fail@plt+0x2330>
   13290:	b	1324c <__assert_fail@plt+0x231c>
   13294:	andeq	r8, r1, r4, asr #3
   13298:	tst	r3, #3
   1329c:	push	{r4, r5, r6, lr}
   132a0:	mov	lr, r3
   132a4:	bne	132b8 <__assert_fail@plt+0x2388>
   132a8:	asr	ip, r3, #2
   132ac:	add	ip, ip, ip, lsl #1
   132b0:	cmp	r1, ip
   132b4:	beq	133ec <__assert_fail@plt+0x24bc>
   132b8:	sub	r3, r3, #4
   132bc:	add	r2, r2, #4
   132c0:	ldr	r4, [pc, #432]	; 13478 <__assert_fail@plt+0x2548>
   132c4:	mov	r5, #61	; 0x3d
   132c8:	b	13344 <__assert_fail@plt+0x2414>
   132cc:	ldrb	r6, [r0, #1]
   132d0:	cmp	lr, #2
   132d4:	add	ip, ip, r6, lsr #4
   132d8:	and	ip, ip, #63	; 0x3f
   132dc:	add	ip, r4, ip
   132e0:	ldrb	ip, [ip, #256]	; 0x100
   132e4:	strb	ip, [r2, #-3]
   132e8:	beq	133e0 <__assert_fail@plt+0x24b0>
   132ec:	cmp	r1, #2
   132f0:	lsl	r6, r6, #2
   132f4:	beq	133b4 <__assert_fail@plt+0x2484>
   132f8:	ldrb	ip, [r0, #2]
   132fc:	cmp	lr, #3
   13300:	add	r6, r6, ip, lsr #6
   13304:	and	r6, r6, #63	; 0x3f
   13308:	add	r6, r4, r6
   1330c:	ldrb	r6, [r6, #256]	; 0x100
   13310:	strb	r6, [r2, #-2]
   13314:	beq	13474 <__assert_fail@plt+0x2544>
   13318:	and	ip, ip, #63	; 0x3f
   1331c:	add	ip, r4, ip
   13320:	cmp	r3, #0
   13324:	ldrb	ip, [ip, #256]	; 0x100
   13328:	strb	ip, [r2, #-1]
   1332c:	beq	133e8 <__assert_fail@plt+0x24b8>
   13330:	subs	r1, r1, #3
   13334:	addne	r0, r0, #3
   13338:	sub	lr, lr, #4
   1333c:	sub	r3, r3, #4
   13340:	add	r2, r2, #4
   13344:	cmp	r1, #0
   13348:	cmpne	lr, #0
   1334c:	movne	r6, #1
   13350:	moveq	r6, #0
   13354:	beq	133d0 <__assert_fail@plt+0x24a0>
   13358:	ldrb	ip, [r0]
   1335c:	cmp	lr, #1
   13360:	add	r6, r4, ip, lsr #2
   13364:	ldrb	r6, [r6, #256]	; 0x100
   13368:	strb	r6, [r2, #-4]
   1336c:	popeq	{r4, r5, r6, pc}
   13370:	cmp	r1, #1
   13374:	lsl	ip, ip, #4
   13378:	bne	132cc <__assert_fail@plt+0x239c>
   1337c:	and	ip, ip, #63	; 0x3f
   13380:	add	ip, r4, ip
   13384:	cmp	lr, #2
   13388:	ldrb	r1, [ip, #256]	; 0x100
   1338c:	strb	r1, [r2, #-3]
   13390:	beq	133dc <__assert_fail@plt+0x24ac>
   13394:	cmp	lr, #3
   13398:	strb	r5, [r2, #-2]
   1339c:	beq	133e4 <__assert_fail@plt+0x24b4>
   133a0:	cmp	r3, #0
   133a4:	strb	r5, [r2, #-1]
   133a8:	popeq	{r4, r5, r6, pc}
   133ac:	mov	r1, #0
   133b0:	b	13338 <__assert_fail@plt+0x2408>
   133b4:	and	r6, r6, #63	; 0x3f
   133b8:	add	r6, r4, r6
   133bc:	cmp	lr, #3
   133c0:	ldrb	r1, [r6, #256]	; 0x100
   133c4:	strb	r1, [r2, #-2]
   133c8:	bne	133a0 <__assert_fail@plt+0x2470>
   133cc:	pop	{r4, r5, r6, pc}
   133d0:	cmp	lr, #0
   133d4:	strbne	r6, [r2, #-4]
   133d8:	pop	{r4, r5, r6, pc}
   133dc:	pop	{r4, r5, r6, pc}
   133e0:	pop	{r4, r5, r6, pc}
   133e4:	pop	{r4, r5, r6, pc}
   133e8:	pop	{r4, r5, r6, pc}
   133ec:	cmp	r1, #0
   133f0:	popeq	{r4, r5, r6, pc}
   133f4:	add	r1, r1, #3
   133f8:	ldr	lr, [pc, #120]	; 13478 <__assert_fail@plt+0x2548>
   133fc:	add	r1, r0, r1
   13400:	add	r3, r2, #4
   13404:	add	r0, r0, #3
   13408:	ldrb	r6, [r0, #-2]
   1340c:	ldrb	r4, [r0, #-1]
   13410:	ldrb	r5, [r0, #-3]
   13414:	add	r0, r0, #3
   13418:	lsr	r2, r6, #4
   1341c:	lsr	ip, r4, #6
   13420:	add	ip, ip, r6, lsl #2
   13424:	add	r2, r2, r5, lsl #4
   13428:	and	ip, ip, #63	; 0x3f
   1342c:	and	r4, r4, #63	; 0x3f
   13430:	and	r2, r2, #63	; 0x3f
   13434:	add	ip, lr, ip
   13438:	add	r2, lr, r2
   1343c:	add	r4, lr, r4
   13440:	add	r5, lr, r5, lsr #2
   13444:	ldrb	r6, [ip, #256]	; 0x100
   13448:	ldrb	r4, [r4, #256]	; 0x100
   1344c:	ldrb	ip, [r2, #256]	; 0x100
   13450:	ldrb	r2, [r5, #256]	; 0x100
   13454:	cmp	r0, r1
   13458:	strb	r6, [r3, #-2]
   1345c:	strb	r4, [r3, #-1]
   13460:	strb	ip, [r3, #-3]
   13464:	strb	r2, [r3, #-4]
   13468:	add	r3, r3, #4
   1346c:	bne	13408 <__assert_fail@plt+0x24d8>
   13470:	pop	{r4, r5, r6, pc}
   13474:	pop	{r4, r5, r6, pc}
   13478:	andeq	r8, r1, r4, asr #3
   1347c:	ldr	r3, [pc, #164]	; 13528 <__assert_fail@plt+0x25f8>
   13480:	push	{r4, r5, r6, r7, r8, lr}
   13484:	mov	r5, r1
   13488:	mov	r6, r0
   1348c:	smull	r1, r3, r3, r5
   13490:	sub	r3, r3, r5, asr #31
   13494:	mov	r7, r2
   13498:	add	r4, r3, r3, lsl #1
   1349c:	cmp	r5, r4
   134a0:	moveq	r4, r3
   134a4:	addne	r4, r3, #1
   134a8:	cmp	r4, #0
   134ac:	blt	134fc <__assert_fail@plt+0x25cc>
   134b0:	cmn	r4, #-536870911	; 0xe0000001
   134b4:	bgt	13518 <__assert_fail@plt+0x25e8>
   134b8:	cmp	r5, #0
   134bc:	blt	13518 <__assert_fail@plt+0x25e8>
   134c0:	lsl	r4, r4, #2
   134c4:	add	r8, r4, #1
   134c8:	mov	r0, r8
   134cc:	bl	16b64 <__assert_fail@plt+0x5c34>
   134d0:	cmp	r0, #0
   134d4:	str	r0, [r7]
   134d8:	moveq	r4, r8
   134dc:	beq	13520 <__assert_fail@plt+0x25f0>
   134e0:	mov	r2, r0
   134e4:	mov	r3, r8
   134e8:	mov	r0, r6
   134ec:	mov	r1, r5
   134f0:	bl	13298 <__assert_fail@plt+0x2368>
   134f4:	mov	r0, r4
   134f8:	pop	{r4, r5, r6, r7, r8, pc}
   134fc:	cmn	r4, #1
   13500:	beq	134b8 <__assert_fail@plt+0x2588>
   13504:	mov	r1, r4
   13508:	mov	r0, #-2147483648	; 0x80000000
   1350c:	bl	1703c <__assert_fail@plt+0x610c>
   13510:	cmp	r0, #3
   13514:	bne	134b8 <__assert_fail@plt+0x2588>
   13518:	mov	r4, #0
   1351c:	str	r4, [r7]
   13520:	mov	r0, r4
   13524:	pop	{r4, r5, r6, r7, r8, pc}
   13528:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   1352c:	ldr	r3, [pc, #12]	; 13540 <__assert_fail@plt+0x2610>
   13530:	ldrb	r0, [r3, r0]
   13534:	eor	r0, r0, #128	; 0x80
   13538:	lsr	r0, r0, #7
   1353c:	bx	lr
   13540:	andeq	r8, r1, r4, asr #3
   13544:	mov	r3, #0
   13548:	str	r3, [r0]
   1354c:	bx	lr
   13550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13554:	sub	sp, sp, #20
   13558:	mov	r5, r1
   1355c:	ldr	r1, [sp, #56]	; 0x38
   13560:	subs	r6, r0, #0
   13564:	mov	r4, r2
   13568:	ldr	r7, [r1]
   1356c:	str	r3, [sp, #4]
   13570:	str	r7, [sp, #12]
   13574:	movne	sl, #1
   13578:	moveq	sl, #0
   1357c:	beq	1377c <__assert_fail@plt+0x284c>
   13580:	adds	r8, r2, #0
   13584:	ldr	r9, [r6]
   13588:	movne	r8, #1
   1358c:	cmp	r9, #0
   13590:	movne	r9, #0
   13594:	andeq	r9, r8, #1
   13598:	and	sl, sl, r8
   1359c:	cmp	r9, #0
   135a0:	moveq	r3, r7
   135a4:	bne	136d8 <__assert_fail@plt+0x27a8>
   135a8:	cmp	r4, #0
   135ac:	movne	r0, #0
   135b0:	andeq	r0, r8, #1
   135b4:	cmp	r0, #0
   135b8:	bne	13710 <__assert_fail@plt+0x27e0>
   135bc:	cmp	r4, #0
   135c0:	beq	135d0 <__assert_fail@plt+0x26a0>
   135c4:	ldrb	r2, [r5]
   135c8:	cmp	r2, #10
   135cc:	beq	13738 <__assert_fail@plt+0x2808>
   135d0:	ldr	r2, [sp, #4]
   135d4:	sub	r3, r7, r3
   135d8:	sub	r3, r2, r3
   135dc:	cmp	r6, #0
   135e0:	str	r7, [sp, #12]
   135e4:	str	r3, [sp, #4]
   135e8:	add	r7, r5, r4
   135ec:	beq	136fc <__assert_fail@plt+0x27cc>
   135f0:	ldr	fp, [r6]
   135f4:	cmp	fp, #4
   135f8:	moveq	r2, #0
   135fc:	clzne	r3, fp
   13600:	moveq	r3, #1
   13604:	lsrne	r3, r3, #5
   13608:	moveq	fp, r2
   1360c:	streq	r2, [r6]
   13610:	cmp	r4, #3
   13614:	movle	r4, #0
   13618:	andgt	r4, r3, #1
   1361c:	cmp	r4, #0
   13620:	beq	13648 <__assert_fail@plt+0x2718>
   13624:	mov	r0, r5
   13628:	mov	r2, #4
   1362c:	mov	r1, #10
   13630:	bl	10e94 <memchr@plt>
   13634:	cmp	r0, #0
   13638:	moveq	r4, #4
   1363c:	moveq	r0, r5
   13640:	addeq	r5, r5, r4
   13644:	beq	136a8 <__assert_fail@plt+0x2778>
   13648:	cmp	r7, r5
   1364c:	mov	r0, r5
   13650:	bls	13684 <__assert_fail@plt+0x2754>
   13654:	ldrb	r2, [r0], #1
   13658:	add	r4, fp, #1
   1365c:	mov	r3, r6
   13660:	cmp	r2, #10
   13664:	beq	1367c <__assert_fail@plt+0x274c>
   13668:	cmp	r4, #4
   1366c:	str	r4, [r3], fp
   13670:	mov	fp, r4
   13674:	strb	r2, [r3, #4]
   13678:	beq	1372c <__assert_fail@plt+0x27fc>
   1367c:	cmp	r7, r0
   13680:	bne	13654 <__assert_fail@plt+0x2724>
   13684:	mov	r4, fp
   13688:	cmp	r4, #0
   1368c:	mov	r5, r0
   13690:	add	r0, r6, #4
   13694:	beq	13708 <__assert_fail@plt+0x27d8>
   13698:	cmp	r4, #3
   1369c:	bgt	136a8 <__assert_fail@plt+0x2778>
   136a0:	cmp	sl, #0
   136a4:	bne	13708 <__assert_fail@plt+0x27d8>
   136a8:	add	r3, sp, #12
   136ac:	add	r2, sp, #4
   136b0:	mov	r1, r4
   136b4:	bl	1316c <__assert_fail@plt+0x223c>
   136b8:	cmp	r0, #0
   136bc:	beq	1376c <__assert_fail@plt+0x283c>
   136c0:	sub	r4, r7, r5
   136c4:	ldr	r7, [sp, #12]
   136c8:	b	1359c <__assert_fail@plt+0x266c>
   136cc:	ldr	r7, [sp, #12]
   136d0:	sub	r4, r4, #4
   136d4:	add	r5, r5, #4
   136d8:	add	r3, sp, #12
   136dc:	add	r2, sp, #4
   136e0:	mov	r1, r4
   136e4:	mov	r0, r5
   136e8:	bl	1316c <__assert_fail@plt+0x223c>
   136ec:	cmp	r0, #0
   136f0:	bne	136cc <__assert_fail@plt+0x279c>
   136f4:	ldr	r3, [sp, #12]
   136f8:	b	135a8 <__assert_fail@plt+0x2678>
   136fc:	cmp	r4, #0
   13700:	mov	r0, r5
   13704:	bne	13698 <__assert_fail@plt+0x2768>
   13708:	ldr	r3, [sp, #12]
   1370c:	mov	r0, #1
   13710:	ldr	r2, [sp, #56]	; 0x38
   13714:	ldr	r2, [r2]
   13718:	sub	r3, r2, r3
   1371c:	ldr	r2, [sp, #56]	; 0x38
   13720:	str	r3, [r2]
   13724:	add	sp, sp, #20
   13728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1372c:	mov	r5, r0
   13730:	add	r0, r6, #4
   13734:	b	136a8 <__assert_fail@plt+0x2778>
   13738:	cmp	r6, #0
   1373c:	subne	r4, r4, #1
   13740:	movne	r7, r3
   13744:	addne	r5, r5, #1
   13748:	bne	1359c <__assert_fail@plt+0x266c>
   1374c:	ldr	r2, [sp, #4]
   13750:	sub	r3, r7, r3
   13754:	sub	r3, r2, r3
   13758:	str	r7, [sp, #12]
   1375c:	str	r3, [sp, #4]
   13760:	add	r7, r5, r4
   13764:	mov	r0, r5
   13768:	b	13698 <__assert_fail@plt+0x2768>
   1376c:	clz	r0, r4
   13770:	ldr	r3, [sp, #12]
   13774:	lsr	r0, r0, #5
   13778:	b	13710 <__assert_fail@plt+0x27e0>
   1377c:	mov	r9, #1
   13780:	mov	r8, r9
   13784:	b	13598 <__assert_fail@plt+0x2668>
   13788:	asr	ip, r2, #2
   1378c:	add	ip, ip, #1
   13790:	push	{r4, r5, r6, r7, r8, lr}
   13794:	add	ip, ip, ip, lsl #1
   13798:	sub	sp, sp, #16
   1379c:	mov	r7, r0
   137a0:	mov	r0, ip
   137a4:	mov	r5, r3
   137a8:	mov	r4, r2
   137ac:	mov	r8, r1
   137b0:	str	ip, [sp, #12]
   137b4:	ldr	r6, [sp, #40]	; 0x28
   137b8:	bl	16b64 <__assert_fail@plt+0x5c34>
   137bc:	cmp	r0, #0
   137c0:	str	r0, [r5]
   137c4:	beq	13808 <__assert_fail@plt+0x28d8>
   137c8:	add	ip, sp, #12
   137cc:	mov	r3, r0
   137d0:	mov	r2, r4
   137d4:	mov	r1, r8
   137d8:	mov	r0, r7
   137dc:	str	ip, [sp]
   137e0:	bl	13550 <__assert_fail@plt+0x2620>
   137e4:	subs	r4, r0, #0
   137e8:	beq	13818 <__assert_fail@plt+0x28e8>
   137ec:	cmp	r6, #0
   137f0:	beq	13808 <__assert_fail@plt+0x28d8>
   137f4:	ldr	r3, [sp, #12]
   137f8:	mov	r0, r4
   137fc:	str	r3, [r6]
   13800:	add	sp, sp, #16
   13804:	pop	{r4, r5, r6, r7, r8, pc}
   13808:	mov	r4, #1
   1380c:	mov	r0, r4
   13810:	add	sp, sp, #16
   13814:	pop	{r4, r5, r6, r7, r8, pc}
   13818:	ldr	r0, [r5]
   1381c:	bl	13a74 <__assert_fail@plt+0x2b44>
   13820:	mov	r0, r4
   13824:	str	r4, [r5]
   13828:	add	sp, sp, #16
   1382c:	pop	{r4, r5, r6, r7, r8, pc}
   13830:	ldr	r3, [pc, #4]	; 1383c <__assert_fail@plt+0x290c>
   13834:	str	r0, [r3]
   13838:	bx	lr
   1383c:	andeq	r9, r2, r4, ror r1
   13840:	ldr	r3, [pc, #4]	; 1384c <__assert_fail@plt+0x291c>
   13844:	strb	r0, [r3, #4]
   13848:	bx	lr
   1384c:	andeq	r9, r2, r4, ror r1
   13850:	ldr	r3, [pc, #192]	; 13918 <__assert_fail@plt+0x29e8>
   13854:	push	{r4, r5, r6, lr}
   13858:	sub	sp, sp, #8
   1385c:	ldr	r0, [r3]
   13860:	bl	16bec <__assert_fail@plt+0x5cbc>
   13864:	cmp	r0, #0
   13868:	beq	1388c <__assert_fail@plt+0x295c>
   1386c:	ldr	r4, [pc, #168]	; 1391c <__assert_fail@plt+0x29ec>
   13870:	ldrb	r3, [r4, #4]
   13874:	cmp	r3, #0
   13878:	beq	138a8 <__assert_fail@plt+0x2978>
   1387c:	bl	10e4c <__errno_location@plt>
   13880:	ldr	r3, [r0]
   13884:	cmp	r3, #32
   13888:	bne	138a8 <__assert_fail@plt+0x2978>
   1388c:	ldr	r3, [pc, #140]	; 13920 <__assert_fail@plt+0x29f0>
   13890:	ldr	r0, [r3]
   13894:	bl	16bec <__assert_fail@plt+0x5cbc>
   13898:	cmp	r0, #0
   1389c:	bne	138f0 <__assert_fail@plt+0x29c0>
   138a0:	add	sp, sp, #8
   138a4:	pop	{r4, r5, r6, pc}
   138a8:	mov	r2, #5
   138ac:	ldr	r1, [pc, #112]	; 13924 <__assert_fail@plt+0x29f4>
   138b0:	mov	r0, #0
   138b4:	bl	10d68 <dcgettext@plt>
   138b8:	ldr	r4, [r4]
   138bc:	cmp	r4, #0
   138c0:	mov	r5, r0
   138c4:	beq	138fc <__assert_fail@plt+0x29cc>
   138c8:	bl	10e4c <__errno_location@plt>
   138cc:	ldr	r6, [r0]
   138d0:	mov	r0, r4
   138d4:	bl	15894 <__assert_fail@plt+0x4964>
   138d8:	mov	r1, r6
   138dc:	str	r5, [sp]
   138e0:	ldr	r2, [pc, #64]	; 13928 <__assert_fail@plt+0x29f8>
   138e4:	mov	r3, r0
   138e8:	mov	r0, #0
   138ec:	bl	10dd4 <error@plt>
   138f0:	ldr	r3, [pc, #52]	; 1392c <__assert_fail@plt+0x29fc>
   138f4:	ldr	r0, [r3]
   138f8:	bl	10d20 <_exit@plt>
   138fc:	bl	10e4c <__errno_location@plt>
   13900:	mov	r3, r5
   13904:	ldr	r2, [pc, #36]	; 13930 <__assert_fail@plt+0x2a00>
   13908:	ldr	r1, [r0]
   1390c:	mov	r0, r4
   13910:	bl	10dd4 <error@plt>
   13914:	b	138f0 <__assert_fail@plt+0x29c0>
   13918:	andeq	r9, r2, r4, asr r1
   1391c:	andeq	r9, r2, r4, ror r1
   13920:	andeq	r9, r2, r8, asr #2
   13924:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13928:	andeq	r7, r1, r4, lsr #30
   1392c:	strdeq	r9, [r2], -r0
   13930:	andeq	r7, r1, r8, lsr #30
   13934:	push	{r4, r5}
   13938:	pop	{r4, r5}
   1393c:	b	10cf0 <posix_fadvise64@plt>
   13940:	cmp	r0, #0
   13944:	bxeq	lr
   13948:	push	{r4, lr}
   1394c:	sub	sp, sp, #16
   13950:	mov	r4, r1
   13954:	bl	10e7c <fileno@plt>
   13958:	mov	r2, #0
   1395c:	mov	r3, #0
   13960:	str	r4, [sp, #8]
   13964:	strd	r2, [sp]
   13968:	bl	10cf0 <posix_fadvise64@plt>
   1396c:	add	sp, sp, #16
   13970:	pop	{r4, pc}
   13974:	push	{r4, r5, lr}
   13978:	sub	sp, sp, #12
   1397c:	mov	r4, r0
   13980:	bl	10e7c <fileno@plt>
   13984:	cmp	r0, #0
   13988:	mov	r0, r4
   1398c:	blt	13a08 <__assert_fail@plt+0x2ad8>
   13990:	bl	10df8 <__freading@plt>
   13994:	cmp	r0, #0
   13998:	bne	139d4 <__assert_fail@plt+0x2aa4>
   1399c:	mov	r0, r4
   139a0:	bl	13a14 <__assert_fail@plt+0x2ae4>
   139a4:	cmp	r0, #0
   139a8:	beq	13a04 <__assert_fail@plt+0x2ad4>
   139ac:	bl	10e4c <__errno_location@plt>
   139b0:	mov	r5, r0
   139b4:	mov	r0, r4
   139b8:	ldr	r4, [r5]
   139bc:	bl	10ea0 <fclose@plt>
   139c0:	cmp	r4, #0
   139c4:	mvnne	r0, #0
   139c8:	strne	r4, [r5]
   139cc:	add	sp, sp, #12
   139d0:	pop	{r4, r5, pc}
   139d4:	mov	r0, r4
   139d8:	bl	10e7c <fileno@plt>
   139dc:	mov	r3, #1
   139e0:	str	r3, [sp]
   139e4:	mov	r2, #0
   139e8:	mov	r3, #0
   139ec:	bl	10da4 <lseek64@plt>
   139f0:	mvn	r3, #0
   139f4:	mvn	r2, #0
   139f8:	cmp	r1, r3
   139fc:	cmpeq	r0, r2
   13a00:	bne	1399c <__assert_fail@plt+0x2a6c>
   13a04:	mov	r0, r4
   13a08:	add	sp, sp, #12
   13a0c:	pop	{r4, r5, lr}
   13a10:	b	10ea0 <fclose@plt>
   13a14:	push	{r4, lr}
   13a18:	subs	r4, r0, #0
   13a1c:	sub	sp, sp, #8
   13a20:	beq	13a3c <__assert_fail@plt+0x2b0c>
   13a24:	bl	10df8 <__freading@plt>
   13a28:	cmp	r0, #0
   13a2c:	beq	13a3c <__assert_fail@plt+0x2b0c>
   13a30:	ldr	r3, [r4]
   13a34:	tst	r3, #256	; 0x100
   13a38:	bne	13a4c <__assert_fail@plt+0x2b1c>
   13a3c:	mov	r0, r4
   13a40:	add	sp, sp, #8
   13a44:	pop	{r4, lr}
   13a48:	b	10cfc <fflush@plt>
   13a4c:	mov	r3, #1
   13a50:	str	r3, [sp]
   13a54:	mov	r2, #0
   13a58:	mov	r3, #0
   13a5c:	mov	r0, r4
   13a60:	bl	13acc <__assert_fail@plt+0x2b9c>
   13a64:	mov	r0, r4
   13a68:	add	sp, sp, #8
   13a6c:	pop	{r4, lr}
   13a70:	b	10cfc <fflush@plt>
   13a74:	push	{r4, r5, lr}
   13a78:	sub	sp, sp, #12
   13a7c:	mov	r5, r0
   13a80:	bl	10e4c <__errno_location@plt>
   13a84:	mov	r2, #0
   13a88:	mov	r4, r0
   13a8c:	ldr	r3, [r0]
   13a90:	str	r2, [r4]
   13a94:	mov	r0, r5
   13a98:	str	r3, [sp]
   13a9c:	str	r3, [sp, #4]
   13aa0:	bl	10d14 <free@plt>
   13aa4:	ldr	r3, [r4]
   13aa8:	add	r2, sp, #8
   13aac:	cmp	r3, #0
   13ab0:	moveq	r3, #4
   13ab4:	movne	r3, #0
   13ab8:	add	r3, r2, r3
   13abc:	ldr	r3, [r3, #-8]
   13ac0:	str	r3, [r4]
   13ac4:	add	sp, sp, #12
   13ac8:	pop	{r4, r5, pc}
   13acc:	push	{r4, r5, r6, r7, r8, lr}
   13ad0:	sub	sp, sp, #8
   13ad4:	ldmib	r0, {ip, lr}
   13ad8:	mov	r4, r0
   13adc:	ldr	r5, [sp, #32]
   13ae0:	cmp	lr, ip
   13ae4:	beq	13afc <__assert_fail@plt+0x2bcc>
   13ae8:	str	r5, [sp, #32]
   13aec:	mov	r0, r4
   13af0:	add	sp, sp, #8
   13af4:	pop	{r4, r5, r6, r7, r8, lr}
   13af8:	b	10eac <fseeko64@plt>
   13afc:	ldr	lr, [r0, #20]
   13b00:	ldr	ip, [r0, #16]
   13b04:	cmp	lr, ip
   13b08:	bne	13ae8 <__assert_fail@plt+0x2bb8>
   13b0c:	ldr	r8, [r0, #36]	; 0x24
   13b10:	cmp	r8, #0
   13b14:	bne	13ae8 <__assert_fail@plt+0x2bb8>
   13b18:	mov	r6, r2
   13b1c:	mov	r7, r3
   13b20:	bl	10e7c <fileno@plt>
   13b24:	mov	r2, r6
   13b28:	mov	r3, r7
   13b2c:	str	r5, [sp]
   13b30:	bl	10da4 <lseek64@plt>
   13b34:	mvn	r3, #0
   13b38:	mvn	r2, #0
   13b3c:	cmp	r1, r3
   13b40:	cmpeq	r0, r2
   13b44:	beq	13b64 <__assert_fail@plt+0x2c34>
   13b48:	ldr	r3, [r4]
   13b4c:	strd	r0, [r4, #80]	; 0x50
   13b50:	mov	r0, r8
   13b54:	bic	r3, r3, #16
   13b58:	str	r3, [r4]
   13b5c:	add	sp, sp, #8
   13b60:	pop	{r4, r5, r6, r7, r8, pc}
   13b64:	mvn	r0, #0
   13b68:	b	13b5c <__assert_fail@plt+0x2c2c>
   13b6c:	push	{r4, r5, r6, lr}
   13b70:	subs	r4, r0, #0
   13b74:	beq	13be8 <__assert_fail@plt+0x2cb8>
   13b78:	mov	r1, #47	; 0x2f
   13b7c:	bl	10ed0 <strrchr@plt>
   13b80:	subs	r5, r0, #0
   13b84:	beq	13bd4 <__assert_fail@plt+0x2ca4>
   13b88:	add	r6, r5, #1
   13b8c:	sub	r3, r6, r4
   13b90:	cmp	r3, #6
   13b94:	ble	13bd4 <__assert_fail@plt+0x2ca4>
   13b98:	mov	r2, #7
   13b9c:	ldr	r1, [pc, #96]	; 13c04 <__assert_fail@plt+0x2cd4>
   13ba0:	sub	r0, r5, #6
   13ba4:	bl	10f18 <strncmp@plt>
   13ba8:	cmp	r0, #0
   13bac:	bne	13bd4 <__assert_fail@plt+0x2ca4>
   13bb0:	mov	r2, #3
   13bb4:	ldr	r1, [pc, #76]	; 13c08 <__assert_fail@plt+0x2cd8>
   13bb8:	mov	r0, r6
   13bbc:	bl	10f18 <strncmp@plt>
   13bc0:	cmp	r0, #0
   13bc4:	movne	r4, r6
   13bc8:	ldreq	r3, [pc, #60]	; 13c0c <__assert_fail@plt+0x2cdc>
   13bcc:	addeq	r4, r5, #4
   13bd0:	streq	r4, [r3]
   13bd4:	ldr	r2, [pc, #52]	; 13c10 <__assert_fail@plt+0x2ce0>
   13bd8:	ldr	r3, [pc, #52]	; 13c14 <__assert_fail@plt+0x2ce4>
   13bdc:	str	r4, [r2]
   13be0:	str	r4, [r3]
   13be4:	pop	{r4, r5, r6, pc}
   13be8:	ldr	r3, [pc, #40]	; 13c18 <__assert_fail@plt+0x2ce8>
   13bec:	mov	r2, #55	; 0x37
   13bf0:	mov	r1, #1
   13bf4:	ldr	r3, [r3]
   13bf8:	ldr	r0, [pc, #28]	; 13c1c <__assert_fail@plt+0x2cec>
   13bfc:	bl	10d98 <fwrite@plt>
   13c00:	bl	10f24 <abort@plt>
   13c04:	andeq	r8, r1, ip, lsr r3
   13c08:	andeq	r8, r1, r4, asr #6
   13c0c:	andeq	r9, r2, r8, lsr r1
   13c10:	andeq	r9, r2, ip, ror r1
   13c14:	andeq	r9, r2, ip, lsr r1
   13c18:	andeq	r9, r2, r8, asr #2
   13c1c:	andeq	r8, r1, r4, lsl #6
   13c20:	push	{r4, r5, r6, lr}
   13c24:	mov	r2, #48	; 0x30
   13c28:	mov	r4, r1
   13c2c:	mov	r1, #0
   13c30:	mov	r5, r0
   13c34:	bl	10e64 <memset@plt>
   13c38:	cmp	r4, #10
   13c3c:	beq	13c4c <__assert_fail@plt+0x2d1c>
   13c40:	str	r4, [r5]
   13c44:	mov	r0, r5
   13c48:	pop	{r4, r5, r6, pc}
   13c4c:	bl	10f24 <abort@plt>
   13c50:	push	{r4, r5, r6, lr}
   13c54:	mov	r4, r0
   13c58:	mov	r5, r1
   13c5c:	bl	16c68 <__assert_fail@plt+0x5d38>
   13c60:	ldrb	r3, [r0]
   13c64:	bic	r3, r3, #32
   13c68:	cmp	r3, #85	; 0x55
   13c6c:	bne	13ccc <__assert_fail@plt+0x2d9c>
   13c70:	ldrb	r3, [r0, #1]
   13c74:	bic	r3, r3, #32
   13c78:	cmp	r3, #84	; 0x54
   13c7c:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13c80:	ldrb	r3, [r0, #2]
   13c84:	bic	r3, r3, #32
   13c88:	cmp	r3, #70	; 0x46
   13c8c:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13c90:	ldrb	r3, [r0, #3]
   13c94:	cmp	r3, #45	; 0x2d
   13c98:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13c9c:	ldrb	r3, [r0, #4]
   13ca0:	cmp	r3, #56	; 0x38
   13ca4:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13ca8:	ldrb	r3, [r0, #5]
   13cac:	cmp	r3, #0
   13cb0:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13cb4:	ldrb	r2, [r4]
   13cb8:	ldr	r3, [pc, #152]	; 13d58 <__assert_fail@plt+0x2e28>
   13cbc:	ldr	r0, [pc, #152]	; 13d5c <__assert_fail@plt+0x2e2c>
   13cc0:	cmp	r2, #96	; 0x60
   13cc4:	movne	r0, r3
   13cc8:	pop	{r4, r5, r6, pc}
   13ccc:	cmp	r3, #71	; 0x47
   13cd0:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13cd4:	ldrb	r3, [r0, #1]
   13cd8:	bic	r3, r3, #32
   13cdc:	cmp	r3, #66	; 0x42
   13ce0:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13ce4:	ldrb	r3, [r0, #2]
   13ce8:	cmp	r3, #49	; 0x31
   13cec:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13cf0:	ldrb	r3, [r0, #3]
   13cf4:	cmp	r3, #56	; 0x38
   13cf8:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13cfc:	ldrb	r3, [r0, #4]
   13d00:	cmp	r3, #48	; 0x30
   13d04:	beq	13d1c <__assert_fail@plt+0x2dec>
   13d08:	ldr	r3, [pc, #80]	; 13d60 <__assert_fail@plt+0x2e30>
   13d0c:	cmp	r5, #9
   13d10:	ldr	r0, [pc, #76]	; 13d64 <__assert_fail@plt+0x2e34>
   13d14:	movne	r0, r3
   13d18:	pop	{r4, r5, r6, pc}
   13d1c:	ldrb	r3, [r0, #5]
   13d20:	cmp	r3, #51	; 0x33
   13d24:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13d28:	ldrb	r3, [r0, #6]
   13d2c:	cmp	r3, #48	; 0x30
   13d30:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13d34:	ldrb	r3, [r0, #7]
   13d38:	cmp	r3, #0
   13d3c:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13d40:	ldrb	r2, [r4]
   13d44:	ldr	r3, [pc, #28]	; 13d68 <__assert_fail@plt+0x2e38>
   13d48:	ldr	r0, [pc, #28]	; 13d6c <__assert_fail@plt+0x2e3c>
   13d4c:	cmp	r2, #96	; 0x60
   13d50:	movne	r0, r3
   13d54:	pop	{r4, r5, r6, pc}
   13d58:	andeq	r8, r1, r0, lsr #7
   13d5c:	muleq	r1, ip, r3
   13d60:			; <UNDEFINED> instruction: 0x000183b0
   13d64:	andeq	r8, r1, ip, lsr #7
   13d68:	andeq	r8, r1, r8, lsr #7
   13d6c:	andeq	r8, r1, r4, lsr #7
   13d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d74:	sub	sp, sp, #116	; 0x74
   13d78:	mov	sl, r0
   13d7c:	str	r3, [sp, #24]
   13d80:	mov	r3, #1
   13d84:	mov	r8, r1
   13d88:	str	r2, [sp, #56]	; 0x38
   13d8c:	str	r3, [sp, #36]	; 0x24
   13d90:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   13d94:	ldr	r3, [sp, #156]	; 0x9c
   13d98:	mov	fp, r8
   13d9c:	mov	r2, #0
   13da0:	lsr	r3, r3, #1
   13da4:	and	r3, r3, #1
   13da8:	str	r2, [sp, #68]	; 0x44
   13dac:	str	r3, [sp, #28]
   13db0:	str	r2, [sp, #40]	; 0x28
   13db4:	str	r2, [sp, #44]	; 0x2c
   13db8:	str	r2, [sp, #52]	; 0x34
   13dbc:	str	r2, [sp, #64]	; 0x40
   13dc0:	str	r2, [sp, #72]	; 0x48
   13dc4:	str	sl, [sp, #32]
   13dc8:	str	r0, [sp, #76]	; 0x4c
   13dcc:	ldr	r3, [sp, #152]	; 0x98
   13dd0:	cmp	r3, #10
   13dd4:	ldrls	pc, [pc, r3, lsl #2]
   13dd8:	b	14f98 <__assert_fail@plt+0x4068>
   13ddc:	andeq	r3, r1, r8, lsl #28
   13de0:	strdeq	r4, [r1], -r0
   13de4:	andeq	r4, r1, r4, lsl r1
   13de8:	andeq	r4, r1, r8, lsr r1
   13dec:	andeq	r4, r1, r4, ror #4
   13df0:	andeq	r4, r1, r8, lsr r2
   13df4:	andeq	r4, r1, r0, lsl r2
   13df8:	andeq	r4, r1, ip, asr #2
   13dfc:	andeq	r4, r1, r4, ror #2
   13e00:	andeq	r4, r1, r4, ror #2
   13e04:	andeq	r4, r1, r4, ror #2
   13e08:	mov	r3, #0
   13e0c:	mov	r7, r3
   13e10:	str	r3, [sp, #28]
   13e14:	ldr	r3, [sp, #44]	; 0x2c
   13e18:	mov	sl, #0
   13e1c:	eor	r3, r3, #1
   13e20:	str	r3, [sp, #60]	; 0x3c
   13e24:	ldr	r3, [sp, #24]
   13e28:	cmn	r3, #1
   13e2c:	beq	14390 <__assert_fail@plt+0x3460>
   13e30:	ldr	r3, [sp, #24]
   13e34:	subs	r5, r3, sl
   13e38:	movne	r5, #1
   13e3c:	cmp	r5, #0
   13e40:	beq	143a8 <__assert_fail@plt+0x3478>
   13e44:	ldr	r3, [sp, #152]	; 0x98
   13e48:	ldr	r8, [sp, #44]	; 0x2c
   13e4c:	cmp	r3, #2
   13e50:	moveq	r8, #0
   13e54:	andne	r8, r8, #1
   13e58:	ldr	r3, [sp, #52]	; 0x34
   13e5c:	adds	r9, r3, #0
   13e60:	movne	r9, #1
   13e64:	ands	r6, r9, r8
   13e68:	beq	14810 <__assert_fail@plt+0x38e0>
   13e6c:	ldr	r2, [sp, #52]	; 0x34
   13e70:	ldr	r1, [sp, #24]
   13e74:	cmp	r2, #1
   13e78:	mov	r3, r2
   13e7c:	movls	r3, #0
   13e80:	movhi	r3, #1
   13e84:	cmn	r1, #1
   13e88:	movne	r3, #0
   13e8c:	cmp	r3, #0
   13e90:	add	r4, sl, r2
   13e94:	beq	13ea4 <__assert_fail@plt+0x2f74>
   13e98:	ldr	r0, [sp, #56]	; 0x38
   13e9c:	bl	10e34 <strlen@plt>
   13ea0:	str	r0, [sp, #24]
   13ea4:	ldr	r3, [sp, #24]
   13ea8:	cmp	r3, r4
   13eac:	ldr	r3, [sp, #56]	; 0x38
   13eb0:	add	r3, r3, sl
   13eb4:	str	r3, [sp, #48]	; 0x30
   13eb8:	bcc	1481c <__assert_fail@plt+0x38ec>
   13ebc:	mov	r0, r3
   13ec0:	ldr	r2, [sp, #52]	; 0x34
   13ec4:	ldr	r1, [sp, #64]	; 0x40
   13ec8:	bl	10d50 <memcmp@plt>
   13ecc:	cmp	r0, #0
   13ed0:	bne	1481c <__assert_fail@plt+0x38ec>
   13ed4:	ldr	r3, [sp, #28]
   13ed8:	cmp	r3, #0
   13edc:	bne	15098 <__assert_fail@plt+0x4168>
   13ee0:	ldr	r3, [sp, #48]	; 0x30
   13ee4:	ldrb	r4, [r3]
   13ee8:	cmp	r4, #126	; 0x7e
   13eec:	ldrls	pc, [pc, r4, lsl #2]
   13ef0:	b	147b0 <__assert_fail@plt+0x3880>
   13ef4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ef8:			; <UNDEFINED> instruction: 0x000147b0
   13efc:			; <UNDEFINED> instruction: 0x000147b0
   13f00:			; <UNDEFINED> instruction: 0x000147b0
   13f04:			; <UNDEFINED> instruction: 0x000147b0
   13f08:			; <UNDEFINED> instruction: 0x000147b0
   13f0c:			; <UNDEFINED> instruction: 0x000147b0
   13f10:			; <UNDEFINED> instruction: 0x000145b8
   13f14:	muleq	r1, ip, r5
   13f18:	muleq	r1, r8, r7
   13f1c:	strdeq	r4, [r1], -ip
   13f20:	andeq	r4, r1, r0, ror #9
   13f24:	andeq	r4, r1, r4, ror r7
   13f28:	andeq	r4, r1, r0, asr r7
   13f2c:			; <UNDEFINED> instruction: 0x000147b0
   13f30:			; <UNDEFINED> instruction: 0x000147b0
   13f34:			; <UNDEFINED> instruction: 0x000147b0
   13f38:			; <UNDEFINED> instruction: 0x000147b0
   13f3c:			; <UNDEFINED> instruction: 0x000147b0
   13f40:			; <UNDEFINED> instruction: 0x000147b0
   13f44:			; <UNDEFINED> instruction: 0x000147b0
   13f48:			; <UNDEFINED> instruction: 0x000147b0
   13f4c:			; <UNDEFINED> instruction: 0x000147b0
   13f50:			; <UNDEFINED> instruction: 0x000147b0
   13f54:			; <UNDEFINED> instruction: 0x000147b0
   13f58:			; <UNDEFINED> instruction: 0x000147b0
   13f5c:			; <UNDEFINED> instruction: 0x000147b0
   13f60:			; <UNDEFINED> instruction: 0x000147b0
   13f64:			; <UNDEFINED> instruction: 0x000147b0
   13f68:			; <UNDEFINED> instruction: 0x000147b0
   13f6c:			; <UNDEFINED> instruction: 0x000147b0
   13f70:			; <UNDEFINED> instruction: 0x000147b0
   13f74:	muleq	r1, r0, r7
   13f78:	andeq	r4, r1, r4, asr #13
   13f7c:	andeq	r4, r1, r4, asr #13
   13f80:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f84:	andeq	r4, r1, r4, asr #13
   13f88:	andeq	r4, r1, ip, asr r7
   13f8c:	andeq	r4, r1, r4, asr #13
   13f90:	andeq	r4, r1, r0, lsr r7
   13f94:	andeq	r4, r1, r4, asr #13
   13f98:	andeq	r4, r1, r4, asr #13
   13f9c:	andeq	r4, r1, r4, asr #13
   13fa0:	andeq	r4, r1, ip, asr r7
   13fa4:	andeq	r4, r1, ip, asr r7
   13fa8:	andeq	r4, r1, ip, asr r7
   13fac:	andeq	r4, r1, ip, asr r7
   13fb0:	andeq	r4, r1, ip, asr r7
   13fb4:	andeq	r4, r1, ip, asr r7
   13fb8:	andeq	r4, r1, ip, asr r7
   13fbc:	andeq	r4, r1, ip, asr r7
   13fc0:	andeq	r4, r1, ip, asr r7
   13fc4:	andeq	r4, r1, ip, asr r7
   13fc8:	andeq	r4, r1, ip, asr r7
   13fcc:	andeq	r4, r1, ip, asr r7
   13fd0:	andeq	r4, r1, ip, asr r7
   13fd4:	andeq	r4, r1, ip, asr r7
   13fd8:	andeq	r4, r1, ip, asr r7
   13fdc:	andeq	r4, r1, ip, asr r7
   13fe0:	andeq	r4, r1, r4, asr #13
   13fe4:	andeq	r4, r1, r4, asr #13
   13fe8:	andeq	r4, r1, r4, asr #13
   13fec:	andeq	r4, r1, r4, asr #13
   13ff0:	andeq	r4, r1, r0, lsl #14
   13ff4:			; <UNDEFINED> instruction: 0x000147b0
   13ff8:	andeq	r4, r1, ip, asr r7
   13ffc:	andeq	r4, r1, ip, asr r7
   14000:	andeq	r4, r1, ip, asr r7
   14004:	andeq	r4, r1, ip, asr r7
   14008:	andeq	r4, r1, ip, asr r7
   1400c:	andeq	r4, r1, ip, asr r7
   14010:	andeq	r4, r1, ip, asr r7
   14014:	andeq	r4, r1, ip, asr r7
   14018:	andeq	r4, r1, ip, asr r7
   1401c:	andeq	r4, r1, ip, asr r7
   14020:	andeq	r4, r1, ip, asr r7
   14024:	andeq	r4, r1, ip, asr r7
   14028:	andeq	r4, r1, ip, asr r7
   1402c:	andeq	r4, r1, ip, asr r7
   14030:	andeq	r4, r1, ip, asr r7
   14034:	andeq	r4, r1, ip, asr r7
   14038:	andeq	r4, r1, ip, asr r7
   1403c:	andeq	r4, r1, ip, asr r7
   14040:	andeq	r4, r1, ip, asr r7
   14044:	andeq	r4, r1, ip, asr r7
   14048:	andeq	r4, r1, ip, asr r7
   1404c:	andeq	r4, r1, ip, asr r7
   14050:	andeq	r4, r1, ip, asr r7
   14054:	andeq	r4, r1, ip, asr r7
   14058:	andeq	r4, r1, ip, asr r7
   1405c:	andeq	r4, r1, ip, asr r7
   14060:	andeq	r4, r1, r4, asr #13
   14064:	andeq	r4, r1, r0, lsr #8
   14068:	andeq	r4, r1, ip, asr r7
   1406c:	andeq	r4, r1, r4, asr #13
   14070:	andeq	r4, r1, ip, asr r7
   14074:	andeq	r4, r1, r4, asr #13
   14078:	andeq	r4, r1, ip, asr r7
   1407c:	andeq	r4, r1, ip, asr r7
   14080:	andeq	r4, r1, ip, asr r7
   14084:	andeq	r4, r1, ip, asr r7
   14088:	andeq	r4, r1, ip, asr r7
   1408c:	andeq	r4, r1, ip, asr r7
   14090:	andeq	r4, r1, ip, asr r7
   14094:	andeq	r4, r1, ip, asr r7
   14098:	andeq	r4, r1, ip, asr r7
   1409c:	andeq	r4, r1, ip, asr r7
   140a0:	andeq	r4, r1, ip, asr r7
   140a4:	andeq	r4, r1, ip, asr r7
   140a8:	andeq	r4, r1, ip, asr r7
   140ac:	andeq	r4, r1, ip, asr r7
   140b0:	andeq	r4, r1, ip, asr r7
   140b4:	andeq	r4, r1, ip, asr r7
   140b8:	andeq	r4, r1, ip, asr r7
   140bc:	andeq	r4, r1, ip, asr r7
   140c0:	andeq	r4, r1, ip, asr r7
   140c4:	andeq	r4, r1, ip, asr r7
   140c8:	andeq	r4, r1, ip, asr r7
   140cc:	andeq	r4, r1, ip, asr r7
   140d0:	andeq	r4, r1, ip, asr r7
   140d4:	andeq	r4, r1, ip, asr r7
   140d8:	andeq	r4, r1, ip, asr r7
   140dc:	andeq	r4, r1, ip, asr r7
   140e0:			; <UNDEFINED> instruction: 0x000142b4
   140e4:	andeq	r4, r1, r4, asr #13
   140e8:			; <UNDEFINED> instruction: 0x000142b4
   140ec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140f0:	mov	r3, #1
   140f4:	str	r3, [sp, #28]
   140f8:	str	r3, [sp, #52]	; 0x34
   140fc:	ldr	r3, [pc, #4000]	; 150a4 <__assert_fail@plt+0x4174>
   14100:	mov	r7, #0
   14104:	str	r3, [sp, #64]	; 0x40
   14108:	mov	r3, #2
   1410c:	str	r3, [sp, #152]	; 0x98
   14110:	b	13e14 <__assert_fail@plt+0x2ee4>
   14114:	ldr	r3, [sp, #28]
   14118:	cmp	r3, #0
   1411c:	beq	14278 <__assert_fail@plt+0x3348>
   14120:	mov	r3, #1
   14124:	str	r3, [sp, #52]	; 0x34
   14128:	ldr	r3, [pc, #3956]	; 150a4 <__assert_fail@plt+0x4174>
   1412c:	mov	r7, #0
   14130:	str	r3, [sp, #64]	; 0x40
   14134:	b	13e14 <__assert_fail@plt+0x2ee4>
   14138:	mov	r3, #1
   1413c:	str	r3, [sp, #44]	; 0x2c
   14140:	str	r3, [sp, #52]	; 0x34
   14144:	str	r3, [sp, #28]
   14148:	b	140fc <__assert_fail@plt+0x31cc>
   1414c:	mov	r3, #0
   14150:	str	r3, [sp, #28]
   14154:	mov	r3, #1
   14158:	str	r3, [sp, #44]	; 0x2c
   1415c:	mov	r7, #0
   14160:	b	13e14 <__assert_fail@plt+0x2ee4>
   14164:	ldr	r3, [sp, #152]	; 0x98
   14168:	cmp	r3, #10
   1416c:	beq	141b0 <__assert_fail@plt+0x3280>
   14170:	mov	r2, #5
   14174:	ldr	r1, [pc, #3884]	; 150a8 <__assert_fail@plt+0x4178>
   14178:	mov	r0, #0
   1417c:	bl	10d68 <dcgettext@plt>
   14180:	ldr	r2, [pc, #3872]	; 150a8 <__assert_fail@plt+0x4178>
   14184:	cmp	r0, r2
   14188:	str	r0, [sp, #164]	; 0xa4
   1418c:	beq	15194 <__assert_fail@plt+0x4264>
   14190:	mov	r2, #5
   14194:	ldr	r1, [pc, #3848]	; 150a4 <__assert_fail@plt+0x4174>
   14198:	mov	r0, #0
   1419c:	bl	10d68 <dcgettext@plt>
   141a0:	ldr	r2, [pc, #3836]	; 150a4 <__assert_fail@plt+0x4174>
   141a4:	cmp	r0, r2
   141a8:	str	r0, [sp, #168]	; 0xa8
   141ac:	beq	15184 <__assert_fail@plt+0x4254>
   141b0:	ldr	r7, [sp, #28]
   141b4:	cmp	r7, #0
   141b8:	movne	r7, #0
   141bc:	bne	141f0 <__assert_fail@plt+0x32c0>
   141c0:	ldr	r3, [sp, #164]	; 0xa4
   141c4:	ldrb	r3, [r3]
   141c8:	cmp	r3, #0
   141cc:	beq	151a4 <__assert_fail@plt+0x4274>
   141d0:	ldr	r2, [sp, #164]	; 0xa4
   141d4:	ldr	r1, [sp, #32]
   141d8:	cmp	fp, r7
   141dc:	strbhi	r3, [r1, r7]
   141e0:	ldrb	r3, [r2, #1]!
   141e4:	add	r7, r7, #1
   141e8:	cmp	r3, #0
   141ec:	bne	141d8 <__assert_fail@plt+0x32a8>
   141f0:	ldr	r0, [sp, #168]	; 0xa8
   141f4:	bl	10e34 <strlen@plt>
   141f8:	ldr	r3, [sp, #168]	; 0xa8
   141fc:	str	r3, [sp, #64]	; 0x40
   14200:	mov	r3, #1
   14204:	str	r3, [sp, #44]	; 0x2c
   14208:	str	r0, [sp, #52]	; 0x34
   1420c:	b	13e14 <__assert_fail@plt+0x2ee4>
   14210:	mov	r3, #1
   14214:	str	r3, [sp, #44]	; 0x2c
   14218:	str	r3, [sp, #52]	; 0x34
   1421c:	str	r3, [sp, #28]
   14220:	ldr	r3, [pc, #3716]	; 150ac <__assert_fail@plt+0x417c>
   14224:	mov	r7, #0
   14228:	str	r3, [sp, #64]	; 0x40
   1422c:	mov	r3, #5
   14230:	str	r3, [sp, #152]	; 0x98
   14234:	b	13e14 <__assert_fail@plt+0x2ee4>
   14238:	ldr	r3, [sp, #28]
   1423c:	cmp	r3, #0
   14240:	beq	14f40 <__assert_fail@plt+0x4010>
   14244:	ldr	r3, [sp, #28]
   14248:	mov	r7, #0
   1424c:	str	r3, [sp, #44]	; 0x2c
   14250:	mov	r3, #1
   14254:	str	r3, [sp, #52]	; 0x34
   14258:	ldr	r3, [pc, #3660]	; 150ac <__assert_fail@plt+0x417c>
   1425c:	str	r3, [sp, #64]	; 0x40
   14260:	b	13e14 <__assert_fail@plt+0x2ee4>
   14264:	ldr	r3, [sp, #28]
   14268:	cmp	r3, #0
   1426c:	mov	r3, #1
   14270:	streq	r3, [sp, #44]	; 0x2c
   14274:	bne	140f8 <__assert_fail@plt+0x31c8>
   14278:	cmp	fp, #0
   1427c:	beq	14f70 <__assert_fail@plt+0x4040>
   14280:	ldr	r3, [sp, #32]
   14284:	mov	r2, #39	; 0x27
   14288:	mov	r7, #1
   1428c:	strb	r2, [r3]
   14290:	mov	r3, #0
   14294:	str	r3, [sp, #28]
   14298:	mov	r3, #1
   1429c:	str	r3, [sp, #52]	; 0x34
   142a0:	ldr	r3, [pc, #3580]	; 150a4 <__assert_fail@plt+0x4174>
   142a4:	str	r3, [sp, #64]	; 0x40
   142a8:	mov	r3, #2
   142ac:	str	r3, [sp, #152]	; 0x98
   142b0:	b	13e14 <__assert_fail@plt+0x2ee4>
   142b4:	ldr	r3, [sp, #24]
   142b8:	cmn	r3, #1
   142bc:	beq	14ed4 <__assert_fail@plt+0x3fa4>
   142c0:	ldr	r3, [sp, #24]
   142c4:	subs	r3, r3, #1
   142c8:	movne	r3, #1
   142cc:	cmp	r3, #0
   142d0:	bne	142dc <__assert_fail@plt+0x33ac>
   142d4:	cmp	sl, #0
   142d8:	beq	146c8 <__assert_fail@plt+0x3798>
   142dc:	ldr	r3, [sp, #152]	; 0x98
   142e0:	mov	r5, #0
   142e4:	sub	r2, r3, #2
   142e8:	mov	r8, r5
   142ec:	clz	r2, r2
   142f0:	lsr	r2, r2, #5
   142f4:	ldr	r3, [sp, #60]	; 0x3c
   142f8:	ldr	r1, [sp, #28]
   142fc:	orr	r3, r2, r3
   14300:	eor	r3, r3, #1
   14304:	orr	r3, r1, r3
   14308:	tst	r3, #255	; 0xff
   1430c:	bne	14a38 <__assert_fail@plt+0x3b08>
   14310:	cmp	r6, #0
   14314:	bne	14464 <__assert_fail@plt+0x3534>
   14318:	ldr	r3, [sp, #40]	; 0x28
   1431c:	eor	r8, r8, #1
   14320:	and	r8, r8, r3
   14324:	add	sl, sl, #1
   14328:	uxtb	r6, r8
   1432c:	cmp	r6, #0
   14330:	beq	14364 <__assert_fail@plt+0x3434>
   14334:	cmp	fp, r7
   14338:	movhi	r2, #39	; 0x27
   1433c:	ldrhi	r3, [sp, #32]
   14340:	strbhi	r2, [r3, r7]
   14344:	add	r3, r7, #1
   14348:	cmp	fp, r3
   1434c:	movhi	r1, #39	; 0x27
   14350:	ldrhi	r2, [sp, #32]
   14354:	add	r7, r7, #2
   14358:	strbhi	r1, [r2, r3]
   1435c:	mov	r3, #0
   14360:	str	r3, [sp, #40]	; 0x28
   14364:	cmp	r7, fp
   14368:	ldrcc	r3, [sp, #32]
   1436c:	strbcc	r4, [r3, r7]
   14370:	ldr	r3, [sp, #36]	; 0x24
   14374:	cmp	r5, #0
   14378:	moveq	r3, #0
   1437c:	str	r3, [sp, #36]	; 0x24
   14380:	ldr	r3, [sp, #24]
   14384:	add	r7, r7, #1
   14388:	cmn	r3, #1
   1438c:	bne	13e30 <__assert_fail@plt+0x2f00>
   14390:	ldr	r3, [sp, #56]	; 0x38
   14394:	ldrb	r5, [r3, sl]
   14398:	adds	r5, r5, #0
   1439c:	movne	r5, #1
   143a0:	cmp	r5, #0
   143a4:	bne	13e44 <__assert_fail@plt+0x2f14>
   143a8:	ldr	r3, [sp, #152]	; 0x98
   143ac:	ldr	r1, [sp, #28]
   143b0:	sub	r3, r3, #2
   143b4:	clz	r3, r3
   143b8:	lsr	r3, r3, #5
   143bc:	and	r9, r1, r3
   143c0:	cmp	r7, #0
   143c4:	movne	r2, #0
   143c8:	andeq	r2, r9, #1
   143cc:	cmp	r2, #0
   143d0:	bne	14dac <__assert_fail@plt+0x3e7c>
   143d4:	eor	r2, r1, #1
   143d8:	ands	r3, r3, r2
   143dc:	beq	15268 <__assert_fail@plt+0x4338>
   143e0:	ldr	r2, [sp, #68]	; 0x44
   143e4:	cmp	r2, #0
   143e8:	beq	15254 <__assert_fail@plt+0x4324>
   143ec:	ldr	r3, [sp, #36]	; 0x24
   143f0:	cmp	r3, #0
   143f4:	bne	1520c <__assert_fail@plt+0x42dc>
   143f8:	ldr	r2, [sp, #72]	; 0x48
   143fc:	clz	r3, fp
   14400:	cmp	r2, #0
   14404:	lsr	r3, r3, #5
   14408:	moveq	r3, #0
   1440c:	cmp	r3, #0
   14410:	beq	151ac <__assert_fail@plt+0x427c>
   14414:	str	r3, [sp, #68]	; 0x44
   14418:	ldr	fp, [sp, #72]	; 0x48
   1441c:	b	13dcc <__assert_fail@plt+0x2e9c>
   14420:	ldr	r3, [sp, #152]	; 0x98
   14424:	cmp	r3, #2
   14428:	beq	14a7c <__assert_fail@plt+0x3b4c>
   1442c:	ldr	r3, [sp, #44]	; 0x2c
   14430:	ldr	r2, [sp, #28]
   14434:	and	r2, r3, r2
   14438:	ands	r2, r9, r2
   1443c:	bne	14a88 <__assert_fail@plt+0x3b58>
   14440:	mov	r4, #92	; 0x5c
   14444:	mov	r3, r4
   14448:	ldr	r1, [sp, #44]	; 0x2c
   1444c:	cmp	r1, #0
   14450:	moveq	r5, #0
   14454:	moveq	r8, r1
   14458:	beq	142f4 <__assert_fail@plt+0x33c4>
   1445c:	mov	r4, r3
   14460:	mov	r5, #0
   14464:	ldr	r3, [sp, #28]
   14468:	cmp	r3, #0
   1446c:	bne	14a70 <__assert_fail@plt+0x3b40>
   14470:	ldr	r3, [sp, #40]	; 0x28
   14474:	eor	r9, r3, #1
   14478:	and	r9, r9, r2
   1447c:	ands	r9, r9, #255	; 0xff
   14480:	beq	144c4 <__assert_fail@plt+0x3594>
   14484:	cmp	fp, r7
   14488:	movhi	r2, #39	; 0x27
   1448c:	ldrhi	r3, [sp, #32]
   14490:	str	r9, [sp, #40]	; 0x28
   14494:	strbhi	r2, [r3, r7]
   14498:	add	r3, r7, #1
   1449c:	cmp	fp, r3
   144a0:	movhi	r1, #36	; 0x24
   144a4:	ldrhi	r2, [sp, #32]
   144a8:	strbhi	r1, [r2, r3]
   144ac:	add	r3, r7, #2
   144b0:	cmp	fp, r3
   144b4:	add	r7, r7, #3
   144b8:	ldrhi	r2, [sp, #32]
   144bc:	movhi	r1, #39	; 0x27
   144c0:	strbhi	r1, [r2, r3]
   144c4:	cmp	fp, r7
   144c8:	movhi	r2, #92	; 0x5c
   144cc:	ldrhi	r3, [sp, #32]
   144d0:	add	sl, sl, #1
   144d4:	strbhi	r2, [r3, r7]
   144d8:	add	r7, r7, #1
   144dc:	b	14364 <__assert_fail@plt+0x3434>
   144e0:	ldr	r3, [sp, #152]	; 0x98
   144e4:	mov	r4, #11
   144e8:	sub	r2, r3, #2
   144ec:	mov	r3, #118	; 0x76
   144f0:	clz	r2, r2
   144f4:	lsr	r2, r2, #5
   144f8:	b	14448 <__assert_fail@plt+0x3518>
   144fc:	mov	r4, #10
   14500:	mov	r3, #110	; 0x6e
   14504:	ldr	r2, [sp, #152]	; 0x98
   14508:	ldr	r1, [sp, #28]
   1450c:	sub	r2, r2, #2
   14510:	clz	r2, r2
   14514:	lsr	r2, r2, #5
   14518:	ands	r1, r1, r2
   1451c:	beq	14448 <__assert_fail@plt+0x3518>
   14520:	ldr	sl, [sp, #32]
   14524:	mov	r8, fp
   14528:	mov	r2, r1
   1452c:	mov	r3, #2
   14530:	str	r3, [sp, #152]	; 0x98
   14534:	ldr	r9, [sp, #44]	; 0x2c
   14538:	ldr	r3, [sp, #152]	; 0x98
   1453c:	and	r9, r9, r2
   14540:	tst	r9, #255	; 0xff
   14544:	movne	r3, #4
   14548:	str	r3, [sp, #152]	; 0x98
   1454c:	ldr	r3, [sp, #156]	; 0x9c
   14550:	mov	ip, #0
   14554:	bic	r3, r3, #2
   14558:	str	r3, [sp, #4]
   1455c:	ldr	r3, [sp, #168]	; 0xa8
   14560:	ldr	r2, [sp, #56]	; 0x38
   14564:	str	r3, [sp, #16]
   14568:	ldr	r3, [sp, #164]	; 0xa4
   1456c:	mov	r1, r8
   14570:	str	r3, [sp, #12]
   14574:	ldr	r3, [sp, #152]	; 0x98
   14578:	mov	r0, sl
   1457c:	str	r3, [sp]
   14580:	str	ip, [sp, #8]
   14584:	ldr	r3, [sp, #24]
   14588:	bl	13d70 <__assert_fail@plt+0x2e40>
   1458c:	mov	fp, r0
   14590:	mov	r0, fp
   14594:	add	sp, sp, #116	; 0x74
   14598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1459c:	ldr	r3, [sp, #152]	; 0x98
   145a0:	mov	r4, #8
   145a4:	sub	r2, r3, #2
   145a8:	mov	r3, #98	; 0x62
   145ac:	clz	r2, r2
   145b0:	lsr	r2, r2, #5
   145b4:	b	14448 <__assert_fail@plt+0x3518>
   145b8:	ldr	r3, [sp, #152]	; 0x98
   145bc:	mov	r4, #7
   145c0:	sub	r2, r3, #2
   145c4:	mov	r3, #97	; 0x61
   145c8:	clz	r2, r2
   145cc:	lsr	r2, r2, #5
   145d0:	b	14448 <__assert_fail@plt+0x3518>
   145d4:	ldr	r3, [sp, #44]	; 0x2c
   145d8:	cmp	r3, #0
   145dc:	beq	14dc0 <__assert_fail@plt+0x3e90>
   145e0:	ldr	r3, [sp, #28]
   145e4:	cmp	r3, #0
   145e8:	bne	15098 <__assert_fail@plt+0x4168>
   145ec:	ldr	r3, [sp, #152]	; 0x98
   145f0:	sub	r2, r3, #2
   145f4:	ldr	r3, [sp, #40]	; 0x28
   145f8:	clz	r2, r2
   145fc:	eor	r3, r3, #1
   14600:	lsr	r2, r2, #5
   14604:	ands	r3, r2, r3
   14608:	moveq	r1, r7
   1460c:	beq	14650 <__assert_fail@plt+0x3720>
   14610:	cmp	fp, r7
   14614:	movhi	r0, #39	; 0x27
   14618:	ldrhi	r1, [sp, #32]
   1461c:	str	r3, [sp, #40]	; 0x28
   14620:	strbhi	r0, [r1, r7]
   14624:	add	r1, r7, #1
   14628:	cmp	fp, r1
   1462c:	movhi	ip, #36	; 0x24
   14630:	ldrhi	r0, [sp, #32]
   14634:	strbhi	ip, [r0, r1]
   14638:	add	r1, r7, #2
   1463c:	cmp	fp, r1
   14640:	movhi	ip, #39	; 0x27
   14644:	ldrhi	r0, [sp, #32]
   14648:	strbhi	ip, [r0, r1]
   1464c:	add	r1, r7, #3
   14650:	cmp	fp, r1
   14654:	movhi	r0, #92	; 0x5c
   14658:	ldrhi	r3, [sp, #32]
   1465c:	add	r7, r1, #1
   14660:	strbhi	r0, [r3, r1]
   14664:	cmp	r8, #0
   14668:	beq	14fac <__assert_fail@plt+0x407c>
   1466c:	ldr	r0, [sp, #24]
   14670:	add	r3, sl, #1
   14674:	cmp	r3, r0
   14678:	bcs	14ee8 <__assert_fail@plt+0x3fb8>
   1467c:	ldr	r0, [sp, #56]	; 0x38
   14680:	ldrb	r3, [r0, r3]
   14684:	sub	r3, r3, #48	; 0x30
   14688:	cmp	r3, #9
   1468c:	bhi	14ee8 <__assert_fail@plt+0x3fb8>
   14690:	cmp	fp, r7
   14694:	movhi	r3, #48	; 0x30
   14698:	ldrhi	r0, [sp, #32]
   1469c:	ldr	r5, [sp, #28]
   146a0:	mov	r4, #48	; 0x30
   146a4:	strbhi	r3, [r0, r7]
   146a8:	add	r3, r1, #2
   146ac:	cmp	fp, r3
   146b0:	movhi	r0, #48	; 0x30
   146b4:	ldrhi	ip, [sp, #32]
   146b8:	add	r7, r1, #3
   146bc:	strbhi	r0, [ip, r3]
   146c0:	b	142f4 <__assert_fail@plt+0x33c4>
   146c4:	mov	r5, #0
   146c8:	ldr	r3, [sp, #152]	; 0x98
   146cc:	sub	r2, r3, #2
   146d0:	ldr	r3, [sp, #28]
   146d4:	clz	r2, r2
   146d8:	lsr	r2, r2, #5
   146dc:	ands	r8, r3, r2
   146e0:	beq	142f4 <__assert_fail@plt+0x33c4>
   146e4:	mov	r3, r8
   146e8:	mov	r2, r3
   146ec:	mov	r3, #2
   146f0:	ldr	sl, [sp, #32]
   146f4:	mov	r8, fp
   146f8:	str	r3, [sp, #152]	; 0x98
   146fc:	b	14534 <__assert_fail@plt+0x3604>
   14700:	ldr	r3, [sp, #152]	; 0x98
   14704:	cmp	r3, #2
   14708:	beq	14e2c <__assert_fail@plt+0x3efc>
   1470c:	cmp	r3, #5
   14710:	beq	14dec <__assert_fail@plt+0x3ebc>
   14714:	mov	r5, #0
   14718:	sub	r2, r3, #2
   1471c:	mov	r8, r5
   14720:	clz	r2, r2
   14724:	mov	r4, #63	; 0x3f
   14728:	lsr	r2, r2, #5
   1472c:	b	142f4 <__assert_fail@plt+0x33c4>
   14730:	ldr	r3, [sp, #152]	; 0x98
   14734:	cmp	r3, #2
   14738:	beq	14e4c <__assert_fail@plt+0x3f1c>
   1473c:	mov	r2, #0
   14740:	str	r5, [sp, #68]	; 0x44
   14744:	mov	r8, r2
   14748:	mov	r4, #39	; 0x27
   1474c:	b	142f4 <__assert_fail@plt+0x33c4>
   14750:	mov	r4, #13
   14754:	mov	r3, #114	; 0x72
   14758:	b	14504 <__assert_fail@plt+0x35d4>
   1475c:	ldr	r3, [sp, #152]	; 0x98
   14760:	mov	r8, #0
   14764:	sub	r2, r3, #2
   14768:	clz	r2, r2
   1476c:	lsr	r2, r2, #5
   14770:	b	142f4 <__assert_fail@plt+0x33c4>
   14774:	ldr	r3, [sp, #152]	; 0x98
   14778:	mov	r4, #12
   1477c:	sub	r2, r3, #2
   14780:	mov	r3, #102	; 0x66
   14784:	clz	r2, r2
   14788:	lsr	r2, r2, #5
   1478c:	b	14448 <__assert_fail@plt+0x3518>
   14790:	mov	r5, r6
   14794:	b	146c8 <__assert_fail@plt+0x3798>
   14798:	ldr	r3, [sp, #152]	; 0x98
   1479c:	sub	r2, r3, #2
   147a0:	mov	r3, #116	; 0x74
   147a4:	clz	r2, r2
   147a8:	lsr	r2, r2, #5
   147ac:	b	14448 <__assert_fail@plt+0x3518>
   147b0:	ldr	r8, [sp, #76]	; 0x4c
   147b4:	cmp	r8, #1
   147b8:	bne	14c68 <__assert_fail@plt+0x3d38>
   147bc:	bl	10e1c <__ctype_b_loc@plt>
   147c0:	sxth	r3, r4
   147c4:	mov	ip, r8
   147c8:	lsl	r3, r3, #1
   147cc:	ldr	r2, [r0]
   147d0:	ldrh	r3, [r2, r3]
   147d4:	and	r3, r3, #16384	; 0x4000
   147d8:	cmp	r3, #0
   147dc:	movne	r5, #1
   147e0:	moveq	r5, #0
   147e4:	moveq	r3, #1
   147e8:	movne	r3, #0
   147ec:	ldr	r2, [sp, #44]	; 0x2c
   147f0:	and	r3, r3, r2
   147f4:	ands	r8, r3, #255	; 0xff
   147f8:	bne	14afc <__assert_fail@plt+0x3bcc>
   147fc:	ldr	r3, [sp, #152]	; 0x98
   14800:	sub	r2, r3, #2
   14804:	clz	r2, r2
   14808:	lsr	r2, r2, #5
   1480c:	b	142f4 <__assert_fail@plt+0x33c4>
   14810:	ldr	r3, [sp, #56]	; 0x38
   14814:	add	r3, r3, sl
   14818:	str	r3, [sp, #48]	; 0x30
   1481c:	ldr	r3, [sp, #48]	; 0x30
   14820:	mov	r6, #0
   14824:	ldrb	r4, [r3]
   14828:	cmp	r4, #126	; 0x7e
   1482c:	ldrls	pc, [pc, r4, lsl #2]
   14830:	b	147b0 <__assert_fail@plt+0x3880>
   14834:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14838:			; <UNDEFINED> instruction: 0x000147b0
   1483c:			; <UNDEFINED> instruction: 0x000147b0
   14840:			; <UNDEFINED> instruction: 0x000147b0
   14844:			; <UNDEFINED> instruction: 0x000147b0
   14848:			; <UNDEFINED> instruction: 0x000147b0
   1484c:			; <UNDEFINED> instruction: 0x000147b0
   14850:			; <UNDEFINED> instruction: 0x000145b8
   14854:	muleq	r1, ip, r5
   14858:	andeq	r4, r1, r0, lsr sl
   1485c:	strdeq	r4, [r1], -ip
   14860:	andeq	r4, r1, r0, ror #9
   14864:	andeq	r4, r1, r4, ror r7
   14868:	andeq	r4, r1, r0, asr r7
   1486c:			; <UNDEFINED> instruction: 0x000147b0
   14870:			; <UNDEFINED> instruction: 0x000147b0
   14874:			; <UNDEFINED> instruction: 0x000147b0
   14878:			; <UNDEFINED> instruction: 0x000147b0
   1487c:			; <UNDEFINED> instruction: 0x000147b0
   14880:			; <UNDEFINED> instruction: 0x000147b0
   14884:			; <UNDEFINED> instruction: 0x000147b0
   14888:			; <UNDEFINED> instruction: 0x000147b0
   1488c:			; <UNDEFINED> instruction: 0x000147b0
   14890:			; <UNDEFINED> instruction: 0x000147b0
   14894:			; <UNDEFINED> instruction: 0x000147b0
   14898:			; <UNDEFINED> instruction: 0x000147b0
   1489c:			; <UNDEFINED> instruction: 0x000147b0
   148a0:			; <UNDEFINED> instruction: 0x000147b0
   148a4:			; <UNDEFINED> instruction: 0x000147b0
   148a8:			; <UNDEFINED> instruction: 0x000147b0
   148ac:			; <UNDEFINED> instruction: 0x000147b0
   148b0:			; <UNDEFINED> instruction: 0x000147b0
   148b4:	andeq	r4, r1, r8, asr #13
   148b8:	andeq	r4, r1, r4, asr #13
   148bc:	andeq	r4, r1, r4, asr #13
   148c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148c4:	andeq	r4, r1, r4, asr #13
   148c8:	andeq	r4, r1, ip, asr r7
   148cc:	andeq	r4, r1, r4, asr #13
   148d0:	andeq	r4, r1, r0, lsr r7
   148d4:	andeq	r4, r1, r4, asr #13
   148d8:	andeq	r4, r1, r4, asr #13
   148dc:	andeq	r4, r1, r4, asr #13
   148e0:	andeq	r4, r1, ip, asr r7
   148e4:	andeq	r4, r1, ip, asr r7
   148e8:	andeq	r4, r1, ip, asr r7
   148ec:	andeq	r4, r1, ip, asr r7
   148f0:	andeq	r4, r1, ip, asr r7
   148f4:	andeq	r4, r1, ip, asr r7
   148f8:	andeq	r4, r1, ip, asr r7
   148fc:	andeq	r4, r1, ip, asr r7
   14900:	andeq	r4, r1, ip, asr r7
   14904:	andeq	r4, r1, ip, asr r7
   14908:	andeq	r4, r1, ip, asr r7
   1490c:	andeq	r4, r1, ip, asr r7
   14910:	andeq	r4, r1, ip, asr r7
   14914:	andeq	r4, r1, ip, asr r7
   14918:	andeq	r4, r1, ip, asr r7
   1491c:	andeq	r4, r1, ip, asr r7
   14920:	andeq	r4, r1, r4, asr #13
   14924:	andeq	r4, r1, r4, asr #13
   14928:	andeq	r4, r1, r4, asr #13
   1492c:	andeq	r4, r1, r4, asr #13
   14930:	andeq	r4, r1, r0, lsl #14
   14934:			; <UNDEFINED> instruction: 0x000147b0
   14938:	andeq	r4, r1, ip, asr r7
   1493c:	andeq	r4, r1, ip, asr r7
   14940:	andeq	r4, r1, ip, asr r7
   14944:	andeq	r4, r1, ip, asr r7
   14948:	andeq	r4, r1, ip, asr r7
   1494c:	andeq	r4, r1, ip, asr r7
   14950:	andeq	r4, r1, ip, asr r7
   14954:	andeq	r4, r1, ip, asr r7
   14958:	andeq	r4, r1, ip, asr r7
   1495c:	andeq	r4, r1, ip, asr r7
   14960:	andeq	r4, r1, ip, asr r7
   14964:	andeq	r4, r1, ip, asr r7
   14968:	andeq	r4, r1, ip, asr r7
   1496c:	andeq	r4, r1, ip, asr r7
   14970:	andeq	r4, r1, ip, asr r7
   14974:	andeq	r4, r1, ip, asr r7
   14978:	andeq	r4, r1, ip, asr r7
   1497c:	andeq	r4, r1, ip, asr r7
   14980:	andeq	r4, r1, ip, asr r7
   14984:	andeq	r4, r1, ip, asr r7
   14988:	andeq	r4, r1, ip, asr r7
   1498c:	andeq	r4, r1, ip, asr r7
   14990:	andeq	r4, r1, ip, asr r7
   14994:	andeq	r4, r1, ip, asr r7
   14998:	andeq	r4, r1, ip, asr r7
   1499c:	andeq	r4, r1, ip, asr r7
   149a0:	andeq	r4, r1, r4, asr #13
   149a4:	andeq	r4, r1, r0, lsr #8
   149a8:	andeq	r4, r1, ip, asr r7
   149ac:	andeq	r4, r1, r4, asr #13
   149b0:	andeq	r4, r1, ip, asr r7
   149b4:	andeq	r4, r1, r4, asr #13
   149b8:	andeq	r4, r1, ip, asr r7
   149bc:	andeq	r4, r1, ip, asr r7
   149c0:	andeq	r4, r1, ip, asr r7
   149c4:	andeq	r4, r1, ip, asr r7
   149c8:	andeq	r4, r1, ip, asr r7
   149cc:	andeq	r4, r1, ip, asr r7
   149d0:	andeq	r4, r1, ip, asr r7
   149d4:	andeq	r4, r1, ip, asr r7
   149d8:	andeq	r4, r1, ip, asr r7
   149dc:	andeq	r4, r1, ip, asr r7
   149e0:	andeq	r4, r1, ip, asr r7
   149e4:	andeq	r4, r1, ip, asr r7
   149e8:	andeq	r4, r1, ip, asr r7
   149ec:	andeq	r4, r1, ip, asr r7
   149f0:	andeq	r4, r1, ip, asr r7
   149f4:	andeq	r4, r1, ip, asr r7
   149f8:	andeq	r4, r1, ip, asr r7
   149fc:	andeq	r4, r1, ip, asr r7
   14a00:	andeq	r4, r1, ip, asr r7
   14a04:	andeq	r4, r1, ip, asr r7
   14a08:	andeq	r4, r1, ip, asr r7
   14a0c:	andeq	r4, r1, ip, asr r7
   14a10:	andeq	r4, r1, ip, asr r7
   14a14:	andeq	r4, r1, ip, asr r7
   14a18:	andeq	r4, r1, ip, asr r7
   14a1c:	andeq	r4, r1, ip, asr r7
   14a20:			; <UNDEFINED> instruction: 0x000142b4
   14a24:	andeq	r4, r1, r4, asr #13
   14a28:			; <UNDEFINED> instruction: 0x000142b4
   14a2c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a30:	mov	r3, #116	; 0x74
   14a34:	b	14504 <__assert_fail@plt+0x35d4>
   14a38:	ldr	r3, [sp, #160]	; 0xa0
   14a3c:	cmp	r3, #0
   14a40:	beq	14310 <__assert_fail@plt+0x33e0>
   14a44:	lsr	r3, r4, #5
   14a48:	ldr	r0, [sp, #160]	; 0xa0
   14a4c:	uxtb	r3, r3
   14a50:	and	r1, r4, #31
   14a54:	ldr	r0, [r0, r3, lsl #2]
   14a58:	lsr	r3, r0, r1
   14a5c:	tst	r3, #1
   14a60:	beq	14310 <__assert_fail@plt+0x33e0>
   14a64:	ldr	r3, [sp, #28]
   14a68:	cmp	r3, #0
   14a6c:	beq	14470 <__assert_fail@plt+0x3540>
   14a70:	ldr	sl, [sp, #32]
   14a74:	mov	r8, fp
   14a78:	b	14534 <__assert_fail@plt+0x3604>
   14a7c:	ldr	r3, [sp, #28]
   14a80:	cmp	r3, #0
   14a84:	bne	14fd8 <__assert_fail@plt+0x40a8>
   14a88:	add	sl, sl, #1
   14a8c:	ldr	r6, [sp, #40]	; 0x28
   14a90:	mov	r5, #0
   14a94:	mov	r4, #92	; 0x5c
   14a98:	b	1432c <__assert_fail@plt+0x33fc>
   14a9c:	cmp	r9, r8
   14aa0:	bne	14d10 <__assert_fail@plt+0x3de0>
   14aa4:	ldr	r0, [sp, #100]	; 0x64
   14aa8:	bl	10d8c <iswprint@plt>
   14aac:	add	r5, r5, r4
   14ab0:	cmp	r0, #0
   14ab4:	add	r0, sp, #104	; 0x68
   14ab8:	moveq	r6, #0
   14abc:	bl	10d38 <mbsinit@plt>
   14ac0:	cmp	r0, #0
   14ac4:	beq	14ca4 <__assert_fail@plt+0x3d74>
   14ac8:	mov	r2, r6
   14acc:	mov	ip, r5
   14ad0:	eor	r5, r2, #1
   14ad4:	ldr	r4, [sp, #80]	; 0x50
   14ad8:	ldr	r6, [sp, #84]	; 0x54
   14adc:	ldr	r7, [sp, #88]	; 0x58
   14ae0:	uxtb	r5, r5
   14ae4:	cmp	ip, #1
   14ae8:	bls	14fe8 <__assert_fail@plt+0x40b8>
   14aec:	ldr	r3, [sp, #44]	; 0x2c
   14af0:	and	r8, r3, r5
   14af4:	mov	r5, r2
   14af8:	uxtb	r8, r8
   14afc:	add	r2, sl, ip
   14b00:	ldr	r0, [sp, #48]	; 0x30
   14b04:	mov	r1, #0
   14b08:	str	r5, [sp, #48]	; 0x30
   14b0c:	ldr	r9, [sp, #28]
   14b10:	ldr	ip, [sp, #40]	; 0x28
   14b14:	ldr	r3, [sp, #32]
   14b18:	ldr	r5, [sp, #152]	; 0x98
   14b1c:	b	14bd8 <__assert_fail@plt+0x3ca8>
   14b20:	cmp	r9, #0
   14b24:	bne	14efc <__assert_fail@plt+0x3fcc>
   14b28:	eor	r1, ip, #1
   14b2c:	cmp	r5, #2
   14b30:	movne	r1, #0
   14b34:	andeq	r1, r1, #1
   14b38:	cmp	r1, #0
   14b3c:	beq	14b74 <__assert_fail@plt+0x3c44>
   14b40:	cmp	fp, r7
   14b44:	movhi	ip, #39	; 0x27
   14b48:	strbhi	ip, [r3, r7]
   14b4c:	add	ip, r7, #1
   14b50:	cmp	fp, ip
   14b54:	movhi	lr, #36	; 0x24
   14b58:	strbhi	lr, [r3, ip]
   14b5c:	add	ip, r7, #2
   14b60:	cmp	fp, ip
   14b64:	movhi	lr, #39	; 0x27
   14b68:	strbhi	lr, [r3, ip]
   14b6c:	add	r7, r7, #3
   14b70:	mov	ip, r1
   14b74:	cmp	fp, r7
   14b78:	movhi	r1, #92	; 0x5c
   14b7c:	strbhi	r1, [r3, r7]
   14b80:	add	r1, r7, #1
   14b84:	cmp	fp, r1
   14b88:	lsrhi	lr, r4, #6
   14b8c:	addhi	lr, lr, #48	; 0x30
   14b90:	strbhi	lr, [r3, r1]
   14b94:	add	lr, r7, #2
   14b98:	cmp	fp, lr
   14b9c:	lsrhi	r1, r4, #3
   14ba0:	andhi	r1, r1, #7
   14ba4:	addhi	r1, r1, #48	; 0x30
   14ba8:	add	sl, sl, #1
   14bac:	strbhi	r1, [r3, lr]
   14bb0:	and	r4, r4, #7
   14bb4:	cmp	r2, sl
   14bb8:	add	r4, r4, #48	; 0x30
   14bbc:	add	r7, r7, #3
   14bc0:	bls	14f20 <__assert_fail@plt+0x3ff0>
   14bc4:	mov	r1, r8
   14bc8:	cmp	fp, r7
   14bcc:	strbhi	r4, [r3, r7]
   14bd0:	ldrb	r4, [r0, #1]!
   14bd4:	add	r7, r7, #1
   14bd8:	cmp	r8, #0
   14bdc:	bne	14b20 <__assert_fail@plt+0x3bf0>
   14be0:	cmp	r6, #0
   14be4:	bne	14c34 <__assert_fail@plt+0x3d04>
   14be8:	eor	r6, r1, #1
   14bec:	and	r6, r6, ip
   14bf0:	add	sl, sl, #1
   14bf4:	cmp	r2, sl
   14bf8:	uxtb	r6, r6
   14bfc:	bls	14c5c <__assert_fail@plt+0x3d2c>
   14c00:	cmp	r6, #0
   14c04:	beq	14bc8 <__assert_fail@plt+0x3c98>
   14c08:	cmp	fp, r7
   14c0c:	movhi	ip, #39	; 0x27
   14c10:	strbhi	ip, [r3, r7]
   14c14:	add	ip, r7, #1
   14c18:	cmp	fp, ip
   14c1c:	movhi	lr, #39	; 0x27
   14c20:	strbhi	lr, [r3, ip]
   14c24:	add	r7, r7, #2
   14c28:	mov	r6, r8
   14c2c:	mov	ip, r8
   14c30:	b	14bc8 <__assert_fail@plt+0x3c98>
   14c34:	cmp	fp, r7
   14c38:	eor	r6, r1, #1
   14c3c:	movhi	lr, #92	; 0x5c
   14c40:	and	r6, r6, ip
   14c44:	add	sl, sl, #1
   14c48:	strbhi	lr, [r3, r7]
   14c4c:	cmp	r2, sl
   14c50:	add	r7, r7, #1
   14c54:	uxtb	r6, r6
   14c58:	bhi	14c00 <__assert_fail@plt+0x3cd0>
   14c5c:	str	ip, [sp, #40]	; 0x28
   14c60:	ldr	r5, [sp, #48]	; 0x30
   14c64:	b	1432c <__assert_fail@plt+0x33fc>
   14c68:	ldr	r3, [sp, #24]
   14c6c:	cmn	r3, #1
   14c70:	mov	r3, #0
   14c74:	str	r3, [sp, #104]	; 0x68
   14c78:	str	r3, [sp, #108]	; 0x6c
   14c7c:	beq	14f9c <__assert_fail@plt+0x406c>
   14c80:	mov	r2, r5
   14c84:	mov	r3, #0
   14c88:	str	r7, [sp, #88]	; 0x58
   14c8c:	ldr	r7, [sp, #152]	; 0x98
   14c90:	str	r5, [sp, #92]	; 0x5c
   14c94:	str	r6, [sp, #84]	; 0x54
   14c98:	mov	r5, r3
   14c9c:	mov	r6, r2
   14ca0:	str	r4, [sp, #80]	; 0x50
   14ca4:	ldr	r3, [sp, #56]	; 0x38
   14ca8:	add	r9, sl, r5
   14cac:	add	r8, r3, r9
   14cb0:	ldr	r3, [sp, #24]
   14cb4:	mov	r1, r8
   14cb8:	sub	r2, r3, r9
   14cbc:	add	r0, sp, #100	; 0x64
   14cc0:	add	r3, sp, #104	; 0x68
   14cc4:	bl	16c9c <__assert_fail@plt+0x5d6c>
   14cc8:	subs	r4, r0, #0
   14ccc:	beq	15074 <__assert_fail@plt+0x4144>
   14cd0:	cmn	r4, #1
   14cd4:	beq	15054 <__assert_fail@plt+0x4124>
   14cd8:	cmn	r4, #2
   14cdc:	beq	14ff4 <__assert_fail@plt+0x40c4>
   14ce0:	ldr	r2, [sp, #28]
   14ce4:	cmp	r7, #2
   14ce8:	movne	r2, #0
   14cec:	andeq	r2, r2, #1
   14cf0:	cmp	r2, #0
   14cf4:	beq	14aa4 <__assert_fail@plt+0x3b74>
   14cf8:	cmp	r4, #1
   14cfc:	beq	14aa4 <__assert_fail@plt+0x3b74>
   14d00:	sub	r3, r4, #1
   14d04:	add	r9, r3, r9
   14d08:	ldr	r3, [sp, #56]	; 0x38
   14d0c:	add	r9, r3, r9
   14d10:	ldrb	r3, [r8, #1]!
   14d14:	sub	r3, r3, #91	; 0x5b
   14d18:	cmp	r3, #33	; 0x21
   14d1c:	ldrls	pc, [pc, r3, lsl #2]
   14d20:	b	14a9c <__assert_fail@plt+0x3b6c>
   14d24:	andeq	r4, r1, ip, lsr #27
   14d28:	andeq	r4, r1, ip, lsr #27
   14d2c:	muleq	r1, ip, sl
   14d30:	andeq	r4, r1, ip, lsr #27
   14d34:	muleq	r1, ip, sl
   14d38:	andeq	r4, r1, ip, lsr #27
   14d3c:	muleq	r1, ip, sl
   14d40:	muleq	r1, ip, sl
   14d44:	muleq	r1, ip, sl
   14d48:	muleq	r1, ip, sl
   14d4c:	muleq	r1, ip, sl
   14d50:	muleq	r1, ip, sl
   14d54:	muleq	r1, ip, sl
   14d58:	muleq	r1, ip, sl
   14d5c:	muleq	r1, ip, sl
   14d60:	muleq	r1, ip, sl
   14d64:	muleq	r1, ip, sl
   14d68:	muleq	r1, ip, sl
   14d6c:	muleq	r1, ip, sl
   14d70:	muleq	r1, ip, sl
   14d74:	muleq	r1, ip, sl
   14d78:	muleq	r1, ip, sl
   14d7c:	muleq	r1, ip, sl
   14d80:	muleq	r1, ip, sl
   14d84:	muleq	r1, ip, sl
   14d88:	muleq	r1, ip, sl
   14d8c:	muleq	r1, ip, sl
   14d90:	muleq	r1, ip, sl
   14d94:	muleq	r1, ip, sl
   14d98:	muleq	r1, ip, sl
   14d9c:	muleq	r1, ip, sl
   14da0:	muleq	r1, ip, sl
   14da4:	muleq	r1, ip, sl
   14da8:	andeq	r4, r1, ip, lsr #27
   14dac:	mov	r3, #2
   14db0:	ldr	sl, [sp, #32]
   14db4:	mov	r8, fp
   14db8:	str	r3, [sp, #152]	; 0x98
   14dbc:	b	14534 <__assert_fail@plt+0x3604>
   14dc0:	ldr	r3, [sp, #156]	; 0x9c
   14dc4:	tst	r3, #1
   14dc8:	bne	14ef4 <__assert_fail@plt+0x3fc4>
   14dcc:	ldr	r3, [sp, #152]	; 0x98
   14dd0:	ldr	r4, [sp, #44]	; 0x2c
   14dd4:	sub	r2, r3, #2
   14dd8:	mov	r5, #0
   14ddc:	clz	r2, r2
   14de0:	mov	r8, r4
   14de4:	lsr	r2, r2, #5
   14de8:	b	142f4 <__assert_fail@plt+0x33c4>
   14dec:	ldr	r3, [sp, #156]	; 0x9c
   14df0:	ands	r9, r3, #4
   14df4:	beq	14f2c <__assert_fail@plt+0x3ffc>
   14df8:	ldr	r2, [sp, #24]
   14dfc:	add	r3, sl, #2
   14e00:	cmp	r3, r2
   14e04:	bcs	14e18 <__assert_fail@plt+0x3ee8>
   14e08:	ldr	r2, [sp, #48]	; 0x30
   14e0c:	ldrb	r4, [r2, #1]
   14e10:	cmp	r4, #63	; 0x3f
   14e14:	beq	150b4 <__assert_fail@plt+0x4184>
   14e18:	mov	r2, #0
   14e1c:	mov	r8, r2
   14e20:	mov	r5, r2
   14e24:	mov	r4, #63	; 0x3f
   14e28:	b	142f4 <__assert_fail@plt+0x33c4>
   14e2c:	ldr	r3, [sp, #28]
   14e30:	cmp	r3, #0
   14e34:	bne	15158 <__assert_fail@plt+0x4228>
   14e38:	mov	r2, r5
   14e3c:	mov	r8, r3
   14e40:	mov	r5, #0
   14e44:	mov	r4, #63	; 0x3f
   14e48:	b	142f4 <__assert_fail@plt+0x33c4>
   14e4c:	ldr	r3, [sp, #28]
   14e50:	cmp	r3, #0
   14e54:	bne	15158 <__assert_fail@plt+0x4228>
   14e58:	ldr	r2, [sp, #72]	; 0x48
   14e5c:	adds	r3, fp, #0
   14e60:	movne	r3, #1
   14e64:	cmp	r2, #0
   14e68:	movne	r3, #0
   14e6c:	cmp	r3, #0
   14e70:	strne	fp, [sp, #72]	; 0x48
   14e74:	movne	fp, #0
   14e78:	bne	14eb4 <__assert_fail@plt+0x3f84>
   14e7c:	cmp	fp, r7
   14e80:	movhi	r2, #39	; 0x27
   14e84:	ldrhi	r3, [sp, #32]
   14e88:	strbhi	r2, [r3, r7]
   14e8c:	add	r3, r7, #1
   14e90:	cmp	fp, r3
   14e94:	movhi	r1, #92	; 0x5c
   14e98:	ldrhi	r2, [sp, #32]
   14e9c:	strbhi	r1, [r2, r3]
   14ea0:	add	r3, r7, #2
   14ea4:	cmp	fp, r3
   14ea8:	movhi	r1, #39	; 0x27
   14eac:	ldrhi	r2, [sp, #32]
   14eb0:	strbhi	r1, [r2, r3]
   14eb4:	ldr	r3, [sp, #28]
   14eb8:	add	r7, r7, #3
   14ebc:	mov	r2, r5
   14ec0:	mov	r8, r3
   14ec4:	str	r5, [sp, #68]	; 0x44
   14ec8:	str	r3, [sp, #40]	; 0x28
   14ecc:	mov	r4, #39	; 0x27
   14ed0:	b	142f4 <__assert_fail@plt+0x33c4>
   14ed4:	ldr	r3, [sp, #56]	; 0x38
   14ed8:	ldrb	r3, [r3, #1]
   14edc:	adds	r3, r3, #0
   14ee0:	movne	r3, #1
   14ee4:	b	142cc <__assert_fail@plt+0x339c>
   14ee8:	ldr	r5, [sp, #28]
   14eec:	mov	r4, #48	; 0x30
   14ef0:	b	142f4 <__assert_fail@plt+0x33c4>
   14ef4:	add	sl, sl, #1
   14ef8:	b	13e24 <__assert_fail@plt+0x2ef4>
   14efc:	mov	sl, r3
   14f00:	ldr	r3, [sp, #28]
   14f04:	mov	r8, fp
   14f08:	str	r3, [sp, #44]	; 0x2c
   14f0c:	ldr	r3, [sp, #152]	; 0x98
   14f10:	sub	r2, r3, #2
   14f14:	clz	r2, r2
   14f18:	lsr	r2, r2, #5
   14f1c:	b	14534 <__assert_fail@plt+0x3604>
   14f20:	str	ip, [sp, #40]	; 0x28
   14f24:	ldr	r5, [sp, #48]	; 0x30
   14f28:	b	14364 <__assert_fail@plt+0x3434>
   14f2c:	mov	r2, r9
   14f30:	mov	r8, r9
   14f34:	mov	r5, #0
   14f38:	mov	r4, #63	; 0x3f
   14f3c:	b	142f4 <__assert_fail@plt+0x33c4>
   14f40:	cmp	fp, #0
   14f44:	beq	14fbc <__assert_fail@plt+0x408c>
   14f48:	ldr	r1, [sp, #32]
   14f4c:	mov	r3, #34	; 0x22
   14f50:	mov	r2, #1
   14f54:	strb	r3, [r1]
   14f58:	ldr	r3, [pc, #332]	; 150ac <__assert_fail@plt+0x417c>
   14f5c:	str	r2, [sp, #52]	; 0x34
   14f60:	mov	r7, r2
   14f64:	str	r2, [sp, #44]	; 0x2c
   14f68:	str	r3, [sp, #64]	; 0x40
   14f6c:	b	13e14 <__assert_fail@plt+0x2ee4>
   14f70:	ldr	r3, [pc, #300]	; 150a4 <__assert_fail@plt+0x4174>
   14f74:	str	r3, [sp, #64]	; 0x40
   14f78:	mov	r3, #0
   14f7c:	str	r3, [sp, #28]
   14f80:	mov	r3, #1
   14f84:	str	r3, [sp, #52]	; 0x34
   14f88:	mov	r7, r3
   14f8c:	mov	r3, #2
   14f90:	str	r3, [sp, #152]	; 0x98
   14f94:	b	13e14 <__assert_fail@plt+0x2ee4>
   14f98:	bl	10f24 <abort@plt>
   14f9c:	ldr	r0, [sp, #56]	; 0x38
   14fa0:	bl	10e34 <strlen@plt>
   14fa4:	str	r0, [sp, #24]
   14fa8:	b	14c80 <__assert_fail@plt+0x3d50>
   14fac:	mov	r5, r8
   14fb0:	mov	r4, #48	; 0x30
   14fb4:	ldr	r8, [sp, #44]	; 0x2c
   14fb8:	b	142f4 <__assert_fail@plt+0x33c4>
   14fbc:	mov	r3, #1
   14fc0:	str	r3, [sp, #52]	; 0x34
   14fc4:	mov	r7, r3
   14fc8:	str	r3, [sp, #44]	; 0x2c
   14fcc:	ldr	r3, [pc, #216]	; 150ac <__assert_fail@plt+0x417c>
   14fd0:	str	r3, [sp, #64]	; 0x40
   14fd4:	b	13e14 <__assert_fail@plt+0x2ee4>
   14fd8:	ldr	sl, [sp, #32]
   14fdc:	mov	r8, fp
   14fe0:	mov	r2, r3
   14fe4:	b	14534 <__assert_fail@plt+0x3604>
   14fe8:	mov	r3, r5
   14fec:	mov	r5, r2
   14ff0:	b	147ec <__assert_fail@plt+0x38bc>
   14ff4:	ldr	r1, [sp, #24]
   14ff8:	mov	r2, r5
   14ffc:	cmp	r1, r9
   15000:	mov	ip, r5
   15004:	ldr	r4, [sp, #80]	; 0x50
   15008:	ldr	r5, [sp, #92]	; 0x5c
   1500c:	ldr	r6, [sp, #84]	; 0x54
   15010:	ldr	r7, [sp, #88]	; 0x58
   15014:	bls	15048 <__assert_fail@plt+0x4118>
   15018:	ldrb	r3, [r8]
   1501c:	cmp	r3, #0
   15020:	bne	15034 <__assert_fail@plt+0x4104>
   15024:	b	1504c <__assert_fail@plt+0x411c>
   15028:	ldrb	r3, [r8, #1]!
   1502c:	cmp	r3, #0
   15030:	beq	1514c <__assert_fail@plt+0x421c>
   15034:	add	r2, r2, #1
   15038:	add	r3, sl, r2
   1503c:	cmp	r1, r3
   15040:	bhi	15028 <__assert_fail@plt+0x40f8>
   15044:	mov	ip, r2
   15048:	mov	r3, #0
   1504c:	mov	r2, r3
   15050:	b	14ae4 <__assert_fail@plt+0x3bb4>
   15054:	mov	r3, #0
   15058:	mov	ip, r5
   1505c:	ldr	r4, [sp, #80]	; 0x50
   15060:	ldr	r5, [sp, #92]	; 0x5c
   15064:	ldr	r6, [sp, #84]	; 0x54
   15068:	ldr	r7, [sp, #88]	; 0x58
   1506c:	mov	r2, r3
   15070:	b	14ae4 <__assert_fail@plt+0x3bb4>
   15074:	mov	r3, r6
   15078:	mov	ip, r5
   1507c:	eor	r5, r3, #1
   15080:	mov	r2, r6
   15084:	ldr	r4, [sp, #80]	; 0x50
   15088:	ldr	r6, [sp, #84]	; 0x54
   1508c:	ldr	r7, [sp, #88]	; 0x58
   15090:	uxtb	r5, r5
   15094:	b	14ae4 <__assert_fail@plt+0x3bb4>
   15098:	ldr	sl, [sp, #32]
   1509c:	mov	r8, fp
   150a0:	b	14f08 <__assert_fail@plt+0x3fd8>
   150a4:			; <UNDEFINED> instruction: 0x000183b0
   150a8:			; <UNDEFINED> instruction: 0x000183b4
   150ac:	andeq	r8, r1, ip, lsr #7
   150b0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   150b4:	ldr	r2, [sp, #56]	; 0x38
   150b8:	ldrb	r1, [r2, r3]
   150bc:	sub	r2, r1, #33	; 0x21
   150c0:	uxtb	r2, r2
   150c4:	cmp	r2, #29
   150c8:	bhi	15168 <__assert_fail@plt+0x4238>
   150cc:	ldr	r0, [pc, #-36]	; 150b0 <__assert_fail@plt+0x4180>
   150d0:	mov	ip, #1
   150d4:	ands	r2, r0, ip, lsl r2
   150d8:	beq	15178 <__assert_fail@plt+0x4248>
   150dc:	ldr	r2, [sp, #28]
   150e0:	cmp	r2, #0
   150e4:	bne	15278 <__assert_fail@plt+0x4348>
   150e8:	cmp	fp, r7
   150ec:	ldr	r8, [sp, #28]
   150f0:	ldrhi	r2, [sp, #32]
   150f4:	mov	sl, r3
   150f8:	mov	r5, r8
   150fc:	strbhi	r4, [r2, r7]
   15100:	add	r2, r7, #1
   15104:	cmp	fp, r2
   15108:	movhi	r0, #34	; 0x22
   1510c:	ldrhi	ip, [sp, #32]
   15110:	mov	r4, r1
   15114:	strbhi	r0, [ip, r2]
   15118:	add	r2, r7, #2
   1511c:	cmp	fp, r2
   15120:	movhi	r0, #34	; 0x22
   15124:	ldrhi	ip, [sp, #32]
   15128:	strbhi	r0, [ip, r2]
   1512c:	add	r2, r7, #3
   15130:	cmp	fp, r2
   15134:	movhi	r0, #63	; 0x3f
   15138:	ldrhi	ip, [sp, #32]
   1513c:	add	r7, r7, #4
   15140:	strbhi	r0, [ip, r2]
   15144:	mov	r2, r8
   15148:	b	142f4 <__assert_fail@plt+0x33c4>
   1514c:	mov	ip, r2
   15150:	mov	r2, r3
   15154:	b	14ae4 <__assert_fail@plt+0x3bb4>
   15158:	ldr	sl, [sp, #32]
   1515c:	mov	r8, fp
   15160:	ldr	r2, [sp, #28]
   15164:	b	14534 <__assert_fail@plt+0x3604>
   15168:	mov	r2, #0
   1516c:	mov	r8, r2
   15170:	mov	r5, r2
   15174:	b	142f4 <__assert_fail@plt+0x33c4>
   15178:	mov	r8, r2
   1517c:	mov	r5, #0
   15180:	b	142f4 <__assert_fail@plt+0x33c4>
   15184:	ldr	r1, [sp, #152]	; 0x98
   15188:	bl	13c50 <__assert_fail@plt+0x2d20>
   1518c:	str	r0, [sp, #168]	; 0xa8
   15190:	b	141b0 <__assert_fail@plt+0x3280>
   15194:	ldr	r1, [sp, #152]	; 0x98
   15198:	bl	13c50 <__assert_fail@plt+0x2d20>
   1519c:	str	r0, [sp, #164]	; 0xa4
   151a0:	b	14190 <__assert_fail@plt+0x3260>
   151a4:	ldr	r7, [sp, #28]
   151a8:	b	141f0 <__assert_fail@plt+0x32c0>
   151ac:	ldr	sl, [sp, #32]
   151b0:	ldr	r2, [sp, #68]	; 0x44
   151b4:	mov	r8, fp
   151b8:	mov	fp, r7
   151bc:	ldr	r3, [sp, #64]	; 0x40
   151c0:	cmp	r3, #0
   151c4:	moveq	r2, #0
   151c8:	andne	r2, r2, #1
   151cc:	cmp	r2, #0
   151d0:	beq	151fc <__assert_fail@plt+0x42cc>
   151d4:	mov	r2, r3
   151d8:	ldrb	r3, [r3]
   151dc:	cmp	r3, #0
   151e0:	beq	151fc <__assert_fail@plt+0x42cc>
   151e4:	cmp	r8, fp
   151e8:	strbhi	r3, [sl, fp]
   151ec:	ldrb	r3, [r2, #1]!
   151f0:	add	fp, fp, #1
   151f4:	cmp	r3, #0
   151f8:	bne	151e4 <__assert_fail@plt+0x42b4>
   151fc:	cmp	r8, fp
   15200:	movhi	r3, #0
   15204:	strbhi	r3, [sl, fp]
   15208:	b	14590 <__assert_fail@plt+0x3660>
   1520c:	ldr	r3, [sp, #168]	; 0xa8
   15210:	ldr	sl, [sp, #32]
   15214:	str	r3, [sp, #16]
   15218:	ldr	r3, [sp, #164]	; 0xa4
   1521c:	mov	ip, #5
   15220:	str	r3, [sp, #12]
   15224:	ldr	r3, [sp, #160]	; 0xa0
   15228:	ldr	r2, [sp, #56]	; 0x38
   1522c:	str	r3, [sp, #8]
   15230:	ldr	r3, [sp, #156]	; 0x9c
   15234:	ldr	r1, [sp, #72]	; 0x48
   15238:	str	r3, [sp, #4]
   1523c:	mov	r0, sl
   15240:	ldr	r3, [sp, #24]
   15244:	str	ip, [sp]
   15248:	bl	13d70 <__assert_fail@plt+0x2e40>
   1524c:	mov	fp, r0
   15250:	b	14590 <__assert_fail@plt+0x3660>
   15254:	mov	r8, fp
   15258:	ldr	sl, [sp, #32]
   1525c:	mov	fp, r7
   15260:	mov	r2, r3
   15264:	b	151bc <__assert_fail@plt+0x428c>
   15268:	mov	r8, fp
   1526c:	ldr	sl, [sp, #32]
   15270:	mov	fp, r7
   15274:	b	151bc <__assert_fail@plt+0x428c>
   15278:	ldr	sl, [sp, #32]
   1527c:	mov	r8, fp
   15280:	b	1454c <__assert_fail@plt+0x361c>
   15284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15288:	sub	sp, sp, #52	; 0x34
   1528c:	mov	r4, r0
   15290:	mov	r5, r3
   15294:	mov	sl, r1
   15298:	mov	fp, r2
   1529c:	bl	10e4c <__errno_location@plt>
   152a0:	ldr	r7, [pc, #412]	; 15444 <__assert_fail@plt+0x4514>
   152a4:	cmn	r4, #-2147483647	; 0x80000001
   152a8:	ldr	r6, [r7]
   152ac:	mov	r8, r0
   152b0:	movne	r0, #0
   152b4:	moveq	r0, #1
   152b8:	ldr	r3, [r8]
   152bc:	orrs	r0, r0, r4, lsr #31
   152c0:	str	r3, [sp, #24]
   152c4:	bne	15440 <__assert_fail@plt+0x4510>
   152c8:	ldr	r2, [r7, #4]
   152cc:	cmp	r4, r2
   152d0:	blt	15330 <__assert_fail@plt+0x4400>
   152d4:	add	r9, r7, #8
   152d8:	cmp	r6, r9
   152dc:	str	r2, [sp, #44]	; 0x2c
   152e0:	beq	15410 <__assert_fail@plt+0x44e0>
   152e4:	mov	r3, #8
   152e8:	sub	r2, r4, r2
   152ec:	mov	r0, r6
   152f0:	str	r3, [sp]
   152f4:	add	r2, r2, #1
   152f8:	mvn	r3, #-2147483648	; 0x80000000
   152fc:	add	r1, sp, #44	; 0x2c
   15300:	bl	160f0 <__assert_fail@plt+0x51c0>
   15304:	mov	r6, r0
   15308:	str	r0, [r7]
   1530c:	ldr	r0, [r7, #4]
   15310:	ldr	r2, [sp, #44]	; 0x2c
   15314:	mov	r1, #0
   15318:	sub	r2, r2, r0
   1531c:	add	r0, r6, r0, lsl #3
   15320:	lsl	r2, r2, #3
   15324:	bl	10e64 <memset@plt>
   15328:	ldr	r3, [sp, #44]	; 0x2c
   1532c:	str	r3, [r7, #4]
   15330:	add	r3, r6, r4, lsl #3
   15334:	ldr	r1, [r5, #4]
   15338:	ldr	r7, [r3, #4]
   1533c:	ldr	r9, [r6, r4, lsl #3]
   15340:	ldr	r2, [r5, #40]	; 0x28
   15344:	ldr	ip, [r5, #44]	; 0x2c
   15348:	add	r0, r5, #8
   1534c:	str	r3, [sp, #28]
   15350:	ldr	r3, [r5]
   15354:	orr	r1, r1, #1
   15358:	mov	lr, r0
   1535c:	str	r1, [sp, #32]
   15360:	str	r0, [sp, #36]	; 0x24
   15364:	str	r1, [sp, #4]
   15368:	str	r2, [sp, #12]
   1536c:	str	r3, [sp]
   15370:	mov	r0, r7
   15374:	mov	r1, r9
   15378:	str	ip, [sp, #16]
   1537c:	str	lr, [sp, #8]
   15380:	mov	r3, fp
   15384:	mov	r2, sl
   15388:	bl	13d70 <__assert_fail@plt+0x2e40>
   1538c:	cmp	r9, r0
   15390:	bhi	153fc <__assert_fail@plt+0x44cc>
   15394:	ldr	r3, [pc, #172]	; 15448 <__assert_fail@plt+0x4518>
   15398:	add	r9, r0, #1
   1539c:	cmp	r7, r3
   153a0:	str	r9, [r6, r4, lsl #3]
   153a4:	beq	153b0 <__assert_fail@plt+0x4480>
   153a8:	mov	r0, r7
   153ac:	bl	13a74 <__assert_fail@plt+0x2b44>
   153b0:	mov	r0, r9
   153b4:	bl	15f8c <__assert_fail@plt+0x505c>
   153b8:	ldr	lr, [sp, #28]
   153bc:	ldr	ip, [r5, #44]	; 0x2c
   153c0:	ldr	r4, [r5, #40]	; 0x28
   153c4:	mov	r3, fp
   153c8:	mov	r2, sl
   153cc:	mov	r1, r9
   153d0:	str	r0, [lr, #4]
   153d4:	ldr	lr, [r5]
   153d8:	ldr	r5, [sp, #36]	; 0x24
   153dc:	str	ip, [sp, #16]
   153e0:	str	r5, [sp, #8]
   153e4:	ldr	r5, [sp, #32]
   153e8:	str	r4, [sp, #12]
   153ec:	str	r5, [sp, #4]
   153f0:	str	lr, [sp]
   153f4:	mov	r7, r0
   153f8:	bl	13d70 <__assert_fail@plt+0x2e40>
   153fc:	ldr	r3, [sp, #24]
   15400:	mov	r0, r7
   15404:	str	r3, [r8]
   15408:	add	sp, sp, #52	; 0x34
   1540c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15410:	mov	r3, #8
   15414:	sub	r2, r4, r2
   15418:	str	r3, [sp]
   1541c:	add	r1, sp, #44	; 0x2c
   15420:	add	r2, r2, #1
   15424:	mvn	r3, #-2147483648	; 0x80000000
   15428:	bl	160f0 <__assert_fail@plt+0x51c0>
   1542c:	mov	r6, r0
   15430:	ldm	r9, {r0, r1}
   15434:	str	r6, [r7]
   15438:	stm	r6, {r0, r1}
   1543c:	b	1530c <__assert_fail@plt+0x43dc>
   15440:	bl	10f24 <abort@plt>
   15444:	strdeq	r9, [r2], -r4
   15448:	andeq	r9, r2, r0, lsl #3
   1544c:	push	{r4, r5, r6, lr}
   15450:	mov	r5, r0
   15454:	bl	10e4c <__errno_location@plt>
   15458:	cmp	r5, #0
   1545c:	mov	r1, #48	; 0x30
   15460:	mov	r4, r0
   15464:	ldr	r0, [pc, #16]	; 1547c <__assert_fail@plt+0x454c>
   15468:	ldr	r6, [r4]
   1546c:	movne	r0, r5
   15470:	bl	163ec <__assert_fail@plt+0x54bc>
   15474:	str	r6, [r4]
   15478:	pop	{r4, r5, r6, pc}
   1547c:	andeq	r9, r2, r0, lsl #5
   15480:	ldr	r3, [pc, #12]	; 15494 <__assert_fail@plt+0x4564>
   15484:	cmp	r0, #0
   15488:	moveq	r0, r3
   1548c:	ldr	r0, [r0]
   15490:	bx	lr
   15494:	andeq	r9, r2, r0, lsl #5
   15498:	ldr	r3, [pc, #12]	; 154ac <__assert_fail@plt+0x457c>
   1549c:	cmp	r0, #0
   154a0:	moveq	r0, r3
   154a4:	str	r1, [r0]
   154a8:	bx	lr
   154ac:	andeq	r9, r2, r0, lsl #5
   154b0:	ldr	r3, [pc, #52]	; 154ec <__assert_fail@plt+0x45bc>
   154b4:	cmp	r0, #0
   154b8:	moveq	r0, r3
   154bc:	add	r3, r0, #8
   154c0:	push	{lr}		; (str lr, [sp, #-4]!)
   154c4:	lsr	lr, r1, #5
   154c8:	and	r1, r1, #31
   154cc:	ldr	ip, [r3, lr, lsl #2]
   154d0:	lsr	r0, ip, r1
   154d4:	eor	r2, r2, r0
   154d8:	and	r2, r2, #1
   154dc:	and	r0, r0, #1
   154e0:	eor	r1, ip, r2, lsl r1
   154e4:	str	r1, [r3, lr, lsl #2]
   154e8:	pop	{pc}		; (ldr pc, [sp], #4)
   154ec:	andeq	r9, r2, r0, lsl #5
   154f0:	ldr	r3, [pc, #16]	; 15508 <__assert_fail@plt+0x45d8>
   154f4:	cmp	r0, #0
   154f8:	movne	r3, r0
   154fc:	ldr	r0, [r3, #4]
   15500:	str	r1, [r3, #4]
   15504:	bx	lr
   15508:	andeq	r9, r2, r0, lsl #5
   1550c:	ldr	r3, [pc, #44]	; 15540 <__assert_fail@plt+0x4610>
   15510:	cmp	r0, #0
   15514:	moveq	r0, r3
   15518:	mov	ip, #10
   1551c:	cmp	r2, #0
   15520:	cmpne	r1, #0
   15524:	str	ip, [r0]
   15528:	beq	15538 <__assert_fail@plt+0x4608>
   1552c:	str	r1, [r0, #40]	; 0x28
   15530:	str	r2, [r0, #44]	; 0x2c
   15534:	bx	lr
   15538:	push	{r4, lr}
   1553c:	bl	10f24 <abort@plt>
   15540:	andeq	r9, r2, r0, lsl #5
   15544:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15548:	sub	sp, sp, #24
   1554c:	ldr	ip, [pc, #108]	; 155c0 <__assert_fail@plt+0x4690>
   15550:	ldr	r4, [sp, #56]	; 0x38
   15554:	mov	r9, r2
   15558:	cmp	r4, #0
   1555c:	moveq	r4, ip
   15560:	mov	sl, r3
   15564:	mov	r7, r0
   15568:	mov	r8, r1
   1556c:	bl	10e4c <__errno_location@plt>
   15570:	ldr	r3, [r4, #44]	; 0x2c
   15574:	mov	r1, r8
   15578:	ldr	r6, [r0]
   1557c:	str	r3, [sp, #16]
   15580:	ldr	r2, [r4, #40]	; 0x28
   15584:	add	r3, r4, #8
   15588:	str	r3, [sp, #8]
   1558c:	str	r2, [sp, #12]
   15590:	ldr	r2, [r4, #4]
   15594:	mov	r5, r0
   15598:	str	r2, [sp, #4]
   1559c:	ldr	ip, [r4]
   155a0:	mov	r3, sl
   155a4:	mov	r2, r9
   155a8:	mov	r0, r7
   155ac:	str	ip, [sp]
   155b0:	bl	13d70 <__assert_fail@plt+0x2e40>
   155b4:	str	r6, [r5]
   155b8:	add	sp, sp, #24
   155bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155c0:	andeq	r9, r2, r0, lsl #5
   155c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155c8:	cmp	r3, #0
   155cc:	sub	sp, sp, #44	; 0x2c
   155d0:	ldr	r4, [pc, #192]	; 15698 <__assert_fail@plt+0x4768>
   155d4:	mov	r6, r2
   155d8:	movne	r4, r3
   155dc:	mov	r9, r1
   155e0:	mov	r8, r0
   155e4:	bl	10e4c <__errno_location@plt>
   155e8:	ldr	r3, [r4, #44]	; 0x2c
   155ec:	ldr	r5, [r4, #4]
   155f0:	add	sl, r4, #8
   155f4:	cmp	r6, #0
   155f8:	orreq	r5, r5, #1
   155fc:	mov	r1, #0
   15600:	ldr	r2, [r0]
   15604:	str	r3, [sp, #16]
   15608:	ldr	r3, [r4, #40]	; 0x28
   1560c:	stmib	sp, {r5, sl}
   15610:	str	r3, [sp, #12]
   15614:	ldr	r3, [r4]
   15618:	mov	r7, r0
   1561c:	str	r2, [sp, #28]
   15620:	str	r3, [sp]
   15624:	mov	r2, r8
   15628:	mov	r3, r9
   1562c:	mov	r0, r1
   15630:	bl	13d70 <__assert_fail@plt+0x2e40>
   15634:	add	r1, r0, #1
   15638:	mov	fp, r0
   1563c:	mov	r0, r1
   15640:	str	r1, [sp, #36]	; 0x24
   15644:	bl	15f8c <__assert_fail@plt+0x505c>
   15648:	ldr	r3, [r4, #44]	; 0x2c
   1564c:	mov	r2, r8
   15650:	str	r3, [sp, #16]
   15654:	ldr	r3, [r4, #40]	; 0x28
   15658:	str	r5, [sp, #4]
   1565c:	str	r3, [sp, #12]
   15660:	str	sl, [sp, #8]
   15664:	ldr	ip, [r4]
   15668:	ldr	r1, [sp, #36]	; 0x24
   1566c:	mov	r3, r9
   15670:	str	ip, [sp]
   15674:	str	r0, [sp, #32]
   15678:	bl	13d70 <__assert_fail@plt+0x2e40>
   1567c:	ldr	r2, [sp, #28]
   15680:	cmp	r6, #0
   15684:	str	r2, [r7]
   15688:	ldr	r0, [sp, #32]
   1568c:	strne	fp, [r6]
   15690:	add	sp, sp, #44	; 0x2c
   15694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15698:	andeq	r9, r2, r0, lsl #5
   1569c:	mov	r3, r2
   156a0:	mov	r2, #0
   156a4:	b	155c4 <__assert_fail@plt+0x4694>
   156a8:	push	{r4, r5, r6, r7, r8, lr}
   156ac:	ldr	r6, [pc, #116]	; 15728 <__assert_fail@plt+0x47f8>
   156b0:	ldr	r3, [r6, #4]
   156b4:	ldr	r7, [r6]
   156b8:	cmp	r3, #1
   156bc:	movgt	r5, r7
   156c0:	movgt	r4, #1
   156c4:	ble	156e4 <__assert_fail@plt+0x47b4>
   156c8:	ldr	r0, [r5, #12]
   156cc:	bl	13a74 <__assert_fail@plt+0x2b44>
   156d0:	ldr	r3, [r6, #4]
   156d4:	add	r4, r4, #1
   156d8:	cmp	r3, r4
   156dc:	add	r5, r5, #8
   156e0:	bgt	156c8 <__assert_fail@plt+0x4798>
   156e4:	ldr	r0, [r7, #4]
   156e8:	ldr	r4, [pc, #60]	; 1572c <__assert_fail@plt+0x47fc>
   156ec:	cmp	r0, r4
   156f0:	beq	15704 <__assert_fail@plt+0x47d4>
   156f4:	bl	13a74 <__assert_fail@plt+0x2b44>
   156f8:	mov	r3, #256	; 0x100
   156fc:	str	r4, [r6, #12]
   15700:	str	r3, [r6, #8]
   15704:	ldr	r4, [pc, #36]	; 15730 <__assert_fail@plt+0x4800>
   15708:	cmp	r7, r4
   1570c:	beq	1571c <__assert_fail@plt+0x47ec>
   15710:	mov	r0, r7
   15714:	bl	13a74 <__assert_fail@plt+0x2b44>
   15718:	str	r4, [r6]
   1571c:	mov	r3, #1
   15720:	str	r3, [r6, #4]
   15724:	pop	{r4, r5, r6, r7, r8, pc}
   15728:	strdeq	r9, [r2], -r4
   1572c:	andeq	r9, r2, r0, lsl #3
   15730:	strdeq	r9, [r2], -ip
   15734:	ldr	r3, [pc, #4]	; 15740 <__assert_fail@plt+0x4810>
   15738:	mvn	r2, #0
   1573c:	b	15284 <__assert_fail@plt+0x4354>
   15740:	andeq	r9, r2, r0, lsl #5
   15744:	ldr	r3, [pc]	; 1574c <__assert_fail@plt+0x481c>
   15748:	b	15284 <__assert_fail@plt+0x4354>
   1574c:	andeq	r9, r2, r0, lsl #5
   15750:	mov	r1, r0
   15754:	ldr	r3, [pc, #8]	; 15764 <__assert_fail@plt+0x4834>
   15758:	mvn	r2, #0
   1575c:	mov	r0, #0
   15760:	b	15284 <__assert_fail@plt+0x4354>
   15764:	andeq	r9, r2, r0, lsl #5
   15768:	mov	r2, r1
   1576c:	ldr	r3, [pc, #8]	; 1577c <__assert_fail@plt+0x484c>
   15770:	mov	r1, r0
   15774:	mov	r0, #0
   15778:	b	15284 <__assert_fail@plt+0x4354>
   1577c:	andeq	r9, r2, r0, lsl #5
   15780:	push	{r4, r5, lr}
   15784:	sub	sp, sp, #52	; 0x34
   15788:	mov	r5, r2
   1578c:	mov	r4, r0
   15790:	mov	r0, sp
   15794:	bl	13c20 <__assert_fail@plt+0x2cf0>
   15798:	mov	r3, sp
   1579c:	mov	r1, r5
   157a0:	mov	r0, r4
   157a4:	mvn	r2, #0
   157a8:	bl	15284 <__assert_fail@plt+0x4354>
   157ac:	add	sp, sp, #52	; 0x34
   157b0:	pop	{r4, r5, pc}
   157b4:	push	{r4, r5, r6, lr}
   157b8:	sub	sp, sp, #48	; 0x30
   157bc:	mov	r5, r2
   157c0:	mov	r6, r3
   157c4:	mov	r4, r0
   157c8:	mov	r0, sp
   157cc:	bl	13c20 <__assert_fail@plt+0x2cf0>
   157d0:	mov	r3, sp
   157d4:	mov	r2, r6
   157d8:	mov	r1, r5
   157dc:	mov	r0, r4
   157e0:	bl	15284 <__assert_fail@plt+0x4354>
   157e4:	add	sp, sp, #48	; 0x30
   157e8:	pop	{r4, r5, r6, pc}
   157ec:	mov	r2, r1
   157f0:	mov	r1, r0
   157f4:	mov	r0, #0
   157f8:	b	15780 <__assert_fail@plt+0x4850>
   157fc:	mov	r3, r2
   15800:	mov	r2, r1
   15804:	mov	r1, r0
   15808:	mov	r0, #0
   1580c:	b	157b4 <__assert_fail@plt+0x4884>
   15810:	push	{r4, r5, r6, r7, r8, lr}
   15814:	mov	r7, r0
   15818:	ldr	lr, [pc, #100]	; 15884 <__assert_fail@plt+0x4954>
   1581c:	mov	r8, r1
   15820:	mov	r4, r2
   15824:	ldm	lr!, {r0, r1, r2, r3}
   15828:	sub	sp, sp, #48	; 0x30
   1582c:	mov	ip, sp
   15830:	lsr	r5, r4, #5
   15834:	stmia	ip!, {r0, r1, r2, r3}
   15838:	add	r6, sp, #8
   1583c:	ldm	lr!, {r0, r1, r2, r3}
   15840:	and	r4, r4, #31
   15844:	stmia	ip!, {r0, r1, r2, r3}
   15848:	ldm	lr, {r0, r1, r2, r3}
   1584c:	stm	ip, {r0, r1, r2, r3}
   15850:	mov	r2, r8
   15854:	ldr	lr, [r6, r5, lsl #2]
   15858:	mov	r1, r7
   1585c:	mov	r3, sp
   15860:	lsr	ip, lr, r4
   15864:	eor	ip, ip, #1
   15868:	and	ip, ip, #1
   1586c:	mov	r0, #0
   15870:	eor	r4, lr, ip, lsl r4
   15874:	str	r4, [r6, r5, lsl #2]
   15878:	bl	15284 <__assert_fail@plt+0x4354>
   1587c:	add	sp, sp, #48	; 0x30
   15880:	pop	{r4, r5, r6, r7, r8, pc}
   15884:	andeq	r9, r2, r0, lsl #5
   15888:	mov	r2, r1
   1588c:	mvn	r1, #0
   15890:	b	15810 <__assert_fail@plt+0x48e0>
   15894:	mov	r2, #58	; 0x3a
   15898:	mvn	r1, #0
   1589c:	b	15810 <__assert_fail@plt+0x48e0>
   158a0:	mov	r2, #58	; 0x3a
   158a4:	b	15810 <__assert_fail@plt+0x48e0>
   158a8:	push	{r4, r5, r6, r7, lr}
   158ac:	sub	sp, sp, #100	; 0x64
   158b0:	mov	r6, r0
   158b4:	mov	r0, sp
   158b8:	mov	r7, r2
   158bc:	bl	13c20 <__assert_fail@plt+0x2cf0>
   158c0:	mov	ip, sp
   158c4:	add	lr, sp, #48	; 0x30
   158c8:	ldm	ip!, {r0, r1, r2, r3}
   158cc:	stmia	lr!, {r0, r1, r2, r3}
   158d0:	ldm	ip!, {r0, r1, r2, r3}
   158d4:	ldr	r5, [sp, #60]	; 0x3c
   158d8:	stmia	lr!, {r0, r1, r2, r3}
   158dc:	mvn	r4, r5
   158e0:	ldm	ip, {r0, r1, r2, r3}
   158e4:	and	ip, r4, #67108864	; 0x4000000
   158e8:	eor	ip, ip, r5
   158ec:	str	ip, [sp, #60]	; 0x3c
   158f0:	stm	lr, {r0, r1, r2, r3}
   158f4:	mov	r1, r7
   158f8:	mov	r0, r6
   158fc:	add	r3, sp, #48	; 0x30
   15900:	mvn	r2, #0
   15904:	bl	15284 <__assert_fail@plt+0x4354>
   15908:	add	sp, sp, #100	; 0x64
   1590c:	pop	{r4, r5, r6, r7, pc}
   15910:	push	{r4, r5, r6, r7, r8, lr}
   15914:	mov	r5, r1
   15918:	ldr	lr, [pc, #100]	; 15984 <__assert_fail@plt+0x4a54>
   1591c:	mov	r4, r2
   15920:	mov	r7, r0
   15924:	mov	r8, r3
   15928:	ldm	lr!, {r0, r1, r2, r3}
   1592c:	sub	sp, sp, #48	; 0x30
   15930:	mov	ip, sp
   15934:	mov	r6, #10
   15938:	stmia	ip!, {r0, r1, r2, r3}
   1593c:	cmp	r4, #0
   15940:	cmpne	r5, #0
   15944:	ldm	lr!, {r0, r1, r2, r3}
   15948:	str	r6, [sp]
   1594c:	stmia	ip!, {r0, r1, r2, r3}
   15950:	ldm	lr, {r0, r1, r2, r3}
   15954:	stm	ip, {r0, r1, r2, r3}
   15958:	beq	15980 <__assert_fail@plt+0x4a50>
   1595c:	mov	r3, sp
   15960:	mov	r1, r8
   15964:	mov	r0, r7
   15968:	ldr	r2, [sp, #72]	; 0x48
   1596c:	str	r5, [sp, #40]	; 0x28
   15970:	str	r4, [sp, #44]	; 0x2c
   15974:	bl	15284 <__assert_fail@plt+0x4354>
   15978:	add	sp, sp, #48	; 0x30
   1597c:	pop	{r4, r5, r6, r7, r8, pc}
   15980:	bl	10f24 <abort@plt>
   15984:	andeq	r9, r2, r0, lsl #5
   15988:	push	{lr}		; (str lr, [sp, #-4]!)
   1598c:	sub	sp, sp, #12
   15990:	mvn	ip, #0
   15994:	str	ip, [sp]
   15998:	bl	15910 <__assert_fail@plt+0x49e0>
   1599c:	add	sp, sp, #12
   159a0:	pop	{pc}		; (ldr pc, [sp], #4)
   159a4:	push	{lr}		; (str lr, [sp, #-4]!)
   159a8:	sub	sp, sp, #12
   159ac:	mvn	ip, #0
   159b0:	mov	r3, r2
   159b4:	str	ip, [sp]
   159b8:	mov	r2, r1
   159bc:	mov	r1, r0
   159c0:	mov	r0, #0
   159c4:	bl	15910 <__assert_fail@plt+0x49e0>
   159c8:	add	sp, sp, #12
   159cc:	pop	{pc}		; (ldr pc, [sp], #4)
   159d0:	push	{lr}		; (str lr, [sp, #-4]!)
   159d4:	sub	sp, sp, #12
   159d8:	str	r3, [sp]
   159dc:	mov	r3, r2
   159e0:	mov	r2, r1
   159e4:	mov	r1, r0
   159e8:	mov	r0, #0
   159ec:	bl	15910 <__assert_fail@plt+0x49e0>
   159f0:	add	sp, sp, #12
   159f4:	pop	{pc}		; (ldr pc, [sp], #4)
   159f8:	ldr	r3, [pc]	; 15a00 <__assert_fail@plt+0x4ad0>
   159fc:	b	15284 <__assert_fail@plt+0x4354>
   15a00:	andeq	r9, r2, r4, lsl #2
   15a04:	mov	r2, r1
   15a08:	ldr	r3, [pc, #8]	; 15a18 <__assert_fail@plt+0x4ae8>
   15a0c:	mov	r1, r0
   15a10:	mov	r0, #0
   15a14:	b	15284 <__assert_fail@plt+0x4354>
   15a18:	andeq	r9, r2, r4, lsl #2
   15a1c:	ldr	r3, [pc, #4]	; 15a28 <__assert_fail@plt+0x4af8>
   15a20:	mvn	r2, #0
   15a24:	b	15284 <__assert_fail@plt+0x4354>
   15a28:	andeq	r9, r2, r4, lsl #2
   15a2c:	mov	r1, r0
   15a30:	ldr	r3, [pc, #8]	; 15a40 <__assert_fail@plt+0x4b10>
   15a34:	mvn	r2, #0
   15a38:	mov	r0, #0
   15a3c:	b	15284 <__assert_fail@plt+0x4354>
   15a40:	andeq	r9, r2, r4, lsl #2
   15a44:	push	{r4, r5, r6, lr}
   15a48:	sub	sp, sp, #32
   15a4c:	cmp	r1, #0
   15a50:	mov	r4, r0
   15a54:	ldr	r5, [sp, #48]	; 0x30
   15a58:	ldr	r6, [sp, #52]	; 0x34
   15a5c:	beq	15d74 <__assert_fail@plt+0x4e44>
   15a60:	stm	sp, {r2, r3}
   15a64:	mov	r3, r1
   15a68:	ldr	r2, [pc, #808]	; 15d98 <__assert_fail@plt+0x4e68>
   15a6c:	mov	r1, #1
   15a70:	bl	10e88 <__fprintf_chk@plt>
   15a74:	mov	r2, #5
   15a78:	ldr	r1, [pc, #796]	; 15d9c <__assert_fail@plt+0x4e6c>
   15a7c:	mov	r0, #0
   15a80:	bl	10d68 <dcgettext@plt>
   15a84:	ldr	r3, [pc, #788]	; 15da0 <__assert_fail@plt+0x4e70>
   15a88:	ldr	r2, [pc, #788]	; 15da4 <__assert_fail@plt+0x4e74>
   15a8c:	str	r3, [sp]
   15a90:	mov	r1, #1
   15a94:	mov	r3, r0
   15a98:	mov	r0, r4
   15a9c:	bl	10e88 <__fprintf_chk@plt>
   15aa0:	mov	r1, r4
   15aa4:	mov	r0, #10
   15aa8:	bl	10d5c <fputc_unlocked@plt>
   15aac:	mov	r2, #5
   15ab0:	ldr	r1, [pc, #752]	; 15da8 <__assert_fail@plt+0x4e78>
   15ab4:	mov	r0, #0
   15ab8:	bl	10d68 <dcgettext@plt>
   15abc:	mov	r1, #1
   15ac0:	ldr	r3, [pc, #740]	; 15dac <__assert_fail@plt+0x4e7c>
   15ac4:	mov	r2, r0
   15ac8:	mov	r0, r4
   15acc:	bl	10e88 <__fprintf_chk@plt>
   15ad0:	mov	r1, r4
   15ad4:	mov	r0, #10
   15ad8:	bl	10d5c <fputc_unlocked@plt>
   15adc:	cmp	r6, #9
   15ae0:	ldrls	pc, [pc, r6, lsl #2]
   15ae4:	b	15d8c <__assert_fail@plt+0x4e5c>
   15ae8:	andeq	r5, r1, ip, ror #22
   15aec:	andeq	r5, r1, r4, ror fp
   15af0:	andeq	r5, r1, r0, lsr #23
   15af4:	ldrdeq	r5, [r1], -r4
   15af8:	andeq	r5, r1, r0, lsl ip
   15afc:	andeq	r5, r1, ip, asr #24
   15b00:	andeq	r5, r1, r8, lsl #25
   15b04:	andeq	r5, r1, ip, asr #25
   15b08:	andeq	r5, r1, ip, lsl sp
   15b0c:	andeq	r5, r1, r0, lsl fp
   15b10:	ldr	r1, [pc, #664]	; 15db0 <__assert_fail@plt+0x4e80>
   15b14:	mov	r2, #5
   15b18:	mov	r0, #0
   15b1c:	bl	10d68 <dcgettext@plt>
   15b20:	ldr	ip, [r5, #32]
   15b24:	ldr	r1, [r5, #28]
   15b28:	ldr	r2, [r5, #24]
   15b2c:	ldr	r3, [r5]
   15b30:	ldr	r6, [r5, #20]
   15b34:	str	ip, [sp, #28]
   15b38:	ldr	lr, [r5, #16]
   15b3c:	str	r1, [sp, #24]
   15b40:	ldr	ip, [r5, #12]
   15b44:	str	r2, [sp, #20]
   15b48:	ldr	r1, [r5, #8]
   15b4c:	ldr	r2, [r5, #4]
   15b50:	str	r6, [sp, #16]
   15b54:	stmib	sp, {r1, ip, lr}
   15b58:	mov	r1, #1
   15b5c:	str	r2, [sp]
   15b60:	mov	r2, r0
   15b64:	mov	r0, r4
   15b68:	bl	10e88 <__fprintf_chk@plt>
   15b6c:	add	sp, sp, #32
   15b70:	pop	{r4, r5, r6, pc}
   15b74:	mov	r2, #5
   15b78:	ldr	r1, [pc, #564]	; 15db4 <__assert_fail@plt+0x4e84>
   15b7c:	mov	r0, #0
   15b80:	bl	10d68 <dcgettext@plt>
   15b84:	ldr	r3, [r5]
   15b88:	mov	r1, #1
   15b8c:	mov	r2, r0
   15b90:	mov	r0, r4
   15b94:	add	sp, sp, #32
   15b98:	pop	{r4, r5, r6, lr}
   15b9c:	b	10e88 <__fprintf_chk@plt>
   15ba0:	mov	r2, #5
   15ba4:	ldr	r1, [pc, #524]	; 15db8 <__assert_fail@plt+0x4e88>
   15ba8:	mov	r0, #0
   15bac:	bl	10d68 <dcgettext@plt>
   15bb0:	ldr	r2, [r5, #4]
   15bb4:	ldr	r3, [r5]
   15bb8:	mov	r1, #1
   15bbc:	str	r2, [sp, #48]	; 0x30
   15bc0:	mov	r2, r0
   15bc4:	mov	r0, r4
   15bc8:	add	sp, sp, #32
   15bcc:	pop	{r4, r5, r6, lr}
   15bd0:	b	10e88 <__fprintf_chk@plt>
   15bd4:	mov	r2, #5
   15bd8:	ldr	r1, [pc, #476]	; 15dbc <__assert_fail@plt+0x4e8c>
   15bdc:	mov	r0, #0
   15be0:	bl	10d68 <dcgettext@plt>
   15be4:	ldr	r1, [r5, #8]
   15be8:	ldr	r2, [r5, #4]
   15bec:	ldr	r3, [r5]
   15bf0:	str	r1, [sp, #52]	; 0x34
   15bf4:	str	r2, [sp, #48]	; 0x30
   15bf8:	mov	r1, #1
   15bfc:	mov	r2, r0
   15c00:	mov	r0, r4
   15c04:	add	sp, sp, #32
   15c08:	pop	{r4, r5, r6, lr}
   15c0c:	b	10e88 <__fprintf_chk@plt>
   15c10:	mov	r2, #5
   15c14:	ldr	r1, [pc, #420]	; 15dc0 <__assert_fail@plt+0x4e90>
   15c18:	mov	r0, #0
   15c1c:	bl	10d68 <dcgettext@plt>
   15c20:	ldr	r1, [r5, #8]
   15c24:	ldr	ip, [r5, #12]
   15c28:	ldr	r2, [r5, #4]
   15c2c:	ldr	r3, [r5]
   15c30:	stmib	sp, {r1, ip}
   15c34:	str	r2, [sp]
   15c38:	mov	r1, #1
   15c3c:	mov	r2, r0
   15c40:	mov	r0, r4
   15c44:	bl	10e88 <__fprintf_chk@plt>
   15c48:	b	15b6c <__assert_fail@plt+0x4c3c>
   15c4c:	mov	r2, #5
   15c50:	ldr	r1, [pc, #364]	; 15dc4 <__assert_fail@plt+0x4e94>
   15c54:	mov	r0, #0
   15c58:	bl	10d68 <dcgettext@plt>
   15c5c:	add	r1, r5, #8
   15c60:	ldr	r2, [r5, #4]
   15c64:	ldm	r1, {r1, ip, lr}
   15c68:	ldr	r3, [r5]
   15c6c:	str	r2, [sp]
   15c70:	stmib	sp, {r1, ip, lr}
   15c74:	mov	r1, #1
   15c78:	mov	r2, r0
   15c7c:	mov	r0, r4
   15c80:	bl	10e88 <__fprintf_chk@plt>
   15c84:	b	15b6c <__assert_fail@plt+0x4c3c>
   15c88:	mov	r2, #5
   15c8c:	ldr	r1, [pc, #308]	; 15dc8 <__assert_fail@plt+0x4e98>
   15c90:	mov	r0, #0
   15c94:	bl	10d68 <dcgettext@plt>
   15c98:	add	r1, r5, #8
   15c9c:	ldr	r2, [r5, #4]
   15ca0:	ldm	r1, {r1, ip, lr}
   15ca4:	ldr	r6, [r5, #20]
   15ca8:	ldr	r3, [r5]
   15cac:	stmib	sp, {r1, ip, lr}
   15cb0:	mov	r1, #1
   15cb4:	str	r2, [sp]
   15cb8:	str	r6, [sp, #16]
   15cbc:	mov	r2, r0
   15cc0:	mov	r0, r4
   15cc4:	bl	10e88 <__fprintf_chk@plt>
   15cc8:	b	15b6c <__assert_fail@plt+0x4c3c>
   15ccc:	mov	r2, #5
   15cd0:	ldr	r1, [pc, #244]	; 15dcc <__assert_fail@plt+0x4e9c>
   15cd4:	mov	r0, #0
   15cd8:	bl	10d68 <dcgettext@plt>
   15cdc:	ldr	r2, [r5, #24]
   15ce0:	ldr	r3, [r5]
   15ce4:	ldr	r6, [r5, #20]
   15ce8:	ldr	lr, [r5, #16]
   15cec:	ldr	ip, [r5, #12]
   15cf0:	str	r2, [sp, #20]
   15cf4:	ldr	r1, [r5, #8]
   15cf8:	ldr	r2, [r5, #4]
   15cfc:	str	r6, [sp, #16]
   15d00:	stmib	sp, {r1, ip, lr}
   15d04:	mov	r1, #1
   15d08:	str	r2, [sp]
   15d0c:	mov	r2, r0
   15d10:	mov	r0, r4
   15d14:	bl	10e88 <__fprintf_chk@plt>
   15d18:	b	15b6c <__assert_fail@plt+0x4c3c>
   15d1c:	mov	r2, #5
   15d20:	ldr	r1, [pc, #168]	; 15dd0 <__assert_fail@plt+0x4ea0>
   15d24:	mov	r0, #0
   15d28:	bl	10d68 <dcgettext@plt>
   15d2c:	ldr	r1, [r5, #28]
   15d30:	ldr	r2, [r5, #24]
   15d34:	ldr	r3, [r5]
   15d38:	ldr	r6, [r5, #20]
   15d3c:	ldr	lr, [r5, #16]
   15d40:	str	r1, [sp, #24]
   15d44:	ldr	ip, [r5, #12]
   15d48:	str	r2, [sp, #20]
   15d4c:	ldr	r1, [r5, #8]
   15d50:	ldr	r2, [r5, #4]
   15d54:	str	r6, [sp, #16]
   15d58:	stmib	sp, {r1, ip, lr}
   15d5c:	mov	r1, #1
   15d60:	str	r2, [sp]
   15d64:	mov	r2, r0
   15d68:	mov	r0, r4
   15d6c:	bl	10e88 <__fprintf_chk@plt>
   15d70:	b	15b6c <__assert_fail@plt+0x4c3c>
   15d74:	str	r3, [sp]
   15d78:	mov	r1, #1
   15d7c:	mov	r3, r2
   15d80:	ldr	r2, [pc, #76]	; 15dd4 <__assert_fail@plt+0x4ea4>
   15d84:	bl	10e88 <__fprintf_chk@plt>
   15d88:	b	15a74 <__assert_fail@plt+0x4b44>
   15d8c:	mov	r2, #5
   15d90:	ldr	r1, [pc, #64]	; 15dd8 <__assert_fail@plt+0x4ea8>
   15d94:	b	15b18 <__assert_fail@plt+0x4be8>
   15d98:	andeq	r8, r1, ip, lsl r4
   15d9c:	andeq	r8, r1, r0, lsr r4
   15da0:	andeq	r0, r0, r6, ror #15
   15da4:	andeq	r8, r1, r8, lsl #14
   15da8:	andeq	r8, r1, r4, lsr r4
   15dac:	andeq	r8, r1, r0, ror #9
   15db0:	andeq	r8, r1, r0, lsl r6
   15db4:	andeq	r8, r1, r4, lsl #10
   15db8:	andeq	r8, r1, r4, lsl r5
   15dbc:	andeq	r8, r1, ip, lsr #10
   15dc0:	andeq	r8, r1, r8, asr #10
   15dc4:	andeq	r8, r1, r8, ror #10
   15dc8:	andeq	r8, r1, ip, lsl #11
   15dcc:			; <UNDEFINED> instruction: 0x000185b4
   15dd0:	andeq	r8, r1, r0, ror #11
   15dd4:	andeq	r8, r1, r8, lsr #8
   15dd8:	andeq	r8, r1, r4, asr #12
   15ddc:	push	{r4, r5, lr}
   15de0:	sub	sp, sp, #12
   15de4:	ldr	r5, [sp, #24]
   15de8:	ldr	ip, [r5]
   15dec:	cmp	ip, #0
   15df0:	beq	15e0c <__assert_fail@plt+0x4edc>
   15df4:	mov	lr, r5
   15df8:	mov	ip, #0
   15dfc:	ldr	r4, [lr, #4]!
   15e00:	add	ip, ip, #1
   15e04:	cmp	r4, #0
   15e08:	bne	15dfc <__assert_fail@plt+0x4ecc>
   15e0c:	stm	sp, {r5, ip}
   15e10:	bl	15a44 <__assert_fail@plt+0x4b14>
   15e14:	add	sp, sp, #12
   15e18:	pop	{r4, r5, pc}
   15e1c:	push	{r4, r5, lr}
   15e20:	sub	sp, sp, #52	; 0x34
   15e24:	add	r5, sp, #4
   15e28:	ldr	r4, [sp, #64]	; 0x40
   15e2c:	mov	ip, #0
   15e30:	sub	r4, r4, #4
   15e34:	ldr	lr, [r4, #4]!
   15e38:	cmp	lr, #0
   15e3c:	str	lr, [r5, #4]!
   15e40:	beq	15e50 <__assert_fail@plt+0x4f20>
   15e44:	add	ip, ip, #1
   15e48:	cmp	ip, #10
   15e4c:	bne	15e34 <__assert_fail@plt+0x4f04>
   15e50:	add	lr, sp, #8
   15e54:	str	ip, [sp, #4]
   15e58:	str	lr, [sp]
   15e5c:	bl	15a44 <__assert_fail@plt+0x4b14>
   15e60:	add	sp, sp, #52	; 0x34
   15e64:	pop	{r4, r5, pc}
   15e68:	push	{r3}		; (str r3, [sp, #-4]!)
   15e6c:	push	{r4, lr}
   15e70:	sub	sp, sp, #60	; 0x3c
   15e74:	add	lr, sp, #56	; 0x38
   15e78:	add	r3, sp, #72	; 0x48
   15e7c:	str	r3, [lr, #-44]!	; 0xffffffd4
   15e80:	add	r4, sp, #68	; 0x44
   15e84:	mov	r3, #0
   15e88:	ldr	ip, [r4, #4]!
   15e8c:	cmp	ip, #0
   15e90:	str	ip, [lr, #4]!
   15e94:	beq	15ea4 <__assert_fail@plt+0x4f74>
   15e98:	add	r3, r3, #1
   15e9c:	cmp	r3, #10
   15ea0:	bne	15e88 <__assert_fail@plt+0x4f58>
   15ea4:	add	ip, sp, #16
   15ea8:	str	r3, [sp, #4]
   15eac:	str	ip, [sp]
   15eb0:	ldr	r3, [sp, #68]	; 0x44
   15eb4:	bl	15a44 <__assert_fail@plt+0x4b14>
   15eb8:	add	sp, sp, #60	; 0x3c
   15ebc:	pop	{r4, lr}
   15ec0:	add	sp, sp, #4
   15ec4:	bx	lr
   15ec8:	ldr	r3, [pc, #116]	; 15f44 <__assert_fail@plt+0x5014>
   15ecc:	push	{r4, lr}
   15ed0:	mov	r0, #10
   15ed4:	ldr	r1, [r3]
   15ed8:	bl	10d5c <fputc_unlocked@plt>
   15edc:	mov	r2, #5
   15ee0:	ldr	r1, [pc, #96]	; 15f48 <__assert_fail@plt+0x5018>
   15ee4:	mov	r0, #0
   15ee8:	bl	10d68 <dcgettext@plt>
   15eec:	ldr	r2, [pc, #88]	; 15f4c <__assert_fail@plt+0x501c>
   15ef0:	mov	r1, r0
   15ef4:	mov	r0, #1
   15ef8:	bl	10e70 <__printf_chk@plt>
   15efc:	mov	r2, #5
   15f00:	ldr	r1, [pc, #72]	; 15f50 <__assert_fail@plt+0x5020>
   15f04:	mov	r0, #0
   15f08:	bl	10d68 <dcgettext@plt>
   15f0c:	ldr	r3, [pc, #64]	; 15f54 <__assert_fail@plt+0x5024>
   15f10:	ldr	r2, [pc, #64]	; 15f58 <__assert_fail@plt+0x5028>
   15f14:	mov	r1, r0
   15f18:	mov	r0, #1
   15f1c:	bl	10e70 <__printf_chk@plt>
   15f20:	mov	r2, #5
   15f24:	ldr	r1, [pc, #48]	; 15f5c <__assert_fail@plt+0x502c>
   15f28:	mov	r0, #0
   15f2c:	bl	10d68 <dcgettext@plt>
   15f30:	ldr	r2, [pc, #40]	; 15f60 <__assert_fail@plt+0x5030>
   15f34:	pop	{r4, lr}
   15f38:	mov	r1, r0
   15f3c:	mov	r0, #1
   15f40:	b	10e70 <__printf_chk@plt>
   15f44:	andeq	r9, r2, r4, asr r1
   15f48:	andeq	r8, r1, r0, lsl #13
   15f4c:	muleq	r1, r4, r6
   15f50:	andeq	r8, r1, ip, lsr #13
   15f54:	andeq	r7, r1, r4, lsr #28
   15f58:	andeq	r7, r1, ip, asr #28
   15f5c:	andeq	r8, r1, r0, asr #13
   15f60:	andeq	r8, r1, r8, ror #13
   15f64:	push	{r4, lr}
   15f68:	bl	16b64 <__assert_fail@plt+0x5c34>
   15f6c:	cmp	r0, #0
   15f70:	popne	{r4, pc}
   15f74:	bl	164ac <__assert_fail@plt+0x557c>
   15f78:	push	{r4, lr}
   15f7c:	bl	16b64 <__assert_fail@plt+0x5c34>
   15f80:	cmp	r0, #0
   15f84:	popne	{r4, pc}
   15f88:	bl	164ac <__assert_fail@plt+0x557c>
   15f8c:	push	{r4, lr}
   15f90:	bl	16b64 <__assert_fail@plt+0x5c34>
   15f94:	cmp	r0, #0
   15f98:	popne	{r4, pc}
   15f9c:	bl	164ac <__assert_fail@plt+0x557c>
   15fa0:	push	{r4, r5, r6, lr}
   15fa4:	mov	r5, r0
   15fa8:	mov	r4, r1
   15fac:	bl	16b90 <__assert_fail@plt+0x5c60>
   15fb0:	cmp	r0, #0
   15fb4:	popne	{r4, r5, r6, pc}
   15fb8:	adds	r4, r4, #0
   15fbc:	movne	r4, #1
   15fc0:	cmp	r5, #0
   15fc4:	orreq	r4, r4, #1
   15fc8:	cmp	r4, #0
   15fcc:	popeq	{r4, r5, r6, pc}
   15fd0:	bl	164ac <__assert_fail@plt+0x557c>
   15fd4:	push	{r4, lr}
   15fd8:	cmp	r1, #0
   15fdc:	orreq	r1, r1, #1
   15fe0:	bl	16b90 <__assert_fail@plt+0x5c60>
   15fe4:	cmp	r0, #0
   15fe8:	popne	{r4, pc}
   15fec:	bl	164ac <__assert_fail@plt+0x557c>
   15ff0:	push	{r4, r5, r6, lr}
   15ff4:	mov	r6, r0
   15ff8:	mov	r5, r1
   15ffc:	mov	r4, r2
   16000:	bl	16cf0 <__assert_fail@plt+0x5dc0>
   16004:	cmp	r0, #0
   16008:	popne	{r4, r5, r6, pc}
   1600c:	cmp	r6, #0
   16010:	beq	16020 <__assert_fail@plt+0x50f0>
   16014:	cmp	r5, #0
   16018:	cmpne	r4, #0
   1601c:	popeq	{r4, r5, r6, pc}
   16020:	bl	164ac <__assert_fail@plt+0x557c>
   16024:	b	15ff0 <__assert_fail@plt+0x50c0>
   16028:	cmp	r2, #0
   1602c:	cmpne	r1, #0
   16030:	moveq	r2, #1
   16034:	moveq	r1, r2
   16038:	push	{r4, lr}
   1603c:	bl	16cf0 <__assert_fail@plt+0x5dc0>
   16040:	cmp	r0, #0
   16044:	popne	{r4, pc}
   16048:	bl	164ac <__assert_fail@plt+0x557c>
   1604c:	mov	r2, r1
   16050:	mov	r1, r0
   16054:	mov	r0, #0
   16058:	b	15ff0 <__assert_fail@plt+0x50c0>
   1605c:	mov	r2, r1
   16060:	mov	r1, r0
   16064:	mov	r0, #0
   16068:	b	16028 <__assert_fail@plt+0x50f8>
   1606c:	push	{r4, r5, r6, lr}
   16070:	subs	r6, r0, #0
   16074:	sub	sp, sp, #8
   16078:	mov	r5, r1
   1607c:	ldr	r4, [r1]
   16080:	beq	160bc <__assert_fail@plt+0x518c>
   16084:	lsr	r1, r4, #1
   16088:	add	r3, r1, #1
   1608c:	mvn	r3, r3
   16090:	cmp	r4, r3
   16094:	bhi	160b8 <__assert_fail@plt+0x5188>
   16098:	add	r4, r4, #1
   1609c:	add	r4, r4, r1
   160a0:	mov	r0, r6
   160a4:	mov	r1, r4
   160a8:	bl	15ff0 <__assert_fail@plt+0x50c0>
   160ac:	str	r4, [r5]
   160b0:	add	sp, sp, #8
   160b4:	pop	{r4, r5, r6, pc}
   160b8:	bl	164ac <__assert_fail@plt+0x557c>
   160bc:	cmp	r4, #0
   160c0:	bne	160a0 <__assert_fail@plt+0x5170>
   160c4:	mov	r1, r2
   160c8:	mov	r0, #64	; 0x40
   160cc:	str	r2, [sp, #4]
   160d0:	bl	16e30 <__assert_fail@plt+0x5f00>
   160d4:	ldr	r2, [sp, #4]
   160d8:	cmp	r0, #0
   160dc:	movne	r4, r0
   160e0:	addeq	r4, r0, #1
   160e4:	b	160a0 <__assert_fail@plt+0x5170>
   160e8:	mov	r2, #1
   160ec:	b	1606c <__assert_fail@plt+0x513c>
   160f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160f4:	sub	sp, sp, #12
   160f8:	ldr	r6, [r1]
   160fc:	mov	sl, r1
   16100:	mov	r9, r0
   16104:	asrs	r4, r6, #1
   16108:	mov	r5, r2
   1610c:	mov	fp, r3
   16110:	ldr	r7, [sp, #48]	; 0x30
   16114:	bmi	16280 <__assert_fail@plt+0x5350>
   16118:	mvn	r3, #-2147483648	; 0x80000000
   1611c:	sub	r3, r3, r4
   16120:	cmp	r6, r3
   16124:	movle	r3, #0
   16128:	movgt	r3, #1
   1612c:	mvn	r8, fp
   16130:	cmp	r3, #0
   16134:	addeq	r4, r4, r6
   16138:	mvnne	r4, #-2147483648	; 0x80000000
   1613c:	lsr	r8, r8, #31
   16140:	cmp	fp, r4
   16144:	movge	r3, #0
   16148:	andlt	r3, r8, #1
   1614c:	cmp	r3, #0
   16150:	beq	16238 <__assert_fail@plt+0x5308>
   16154:	cmp	r7, #0
   16158:	blt	16308 <__assert_fail@plt+0x53d8>
   1615c:	bne	16300 <__assert_fail@plt+0x53d0>
   16160:	mov	r2, #64	; 0x40
   16164:	mov	r1, r7
   16168:	mov	r0, r2
   1616c:	str	r2, [sp, #4]
   16170:	bl	1703c <__assert_fail@plt+0x610c>
   16174:	ldr	r2, [sp, #4]
   16178:	mov	r1, r7
   1617c:	mov	r4, r0
   16180:	mov	r0, r2
   16184:	bl	1725c <__assert_fail@plt+0x632c>
   16188:	ldr	r2, [sp, #4]
   1618c:	sub	r1, r2, r1
   16190:	cmp	r9, #0
   16194:	sub	r3, r4, r6
   16198:	streq	r9, [sl]
   1619c:	cmp	r3, r5
   161a0:	bge	16224 <__assert_fail@plt+0x52f4>
   161a4:	cmp	r5, #0
   161a8:	blt	16294 <__assert_fail@plt+0x5364>
   161ac:	cmp	r6, #0
   161b0:	blt	161d0 <__assert_fail@plt+0x52a0>
   161b4:	mvn	r3, #-2147483648	; 0x80000000
   161b8:	sub	r3, r3, r5
   161bc:	cmp	r6, r3
   161c0:	movle	r3, #0
   161c4:	movgt	r3, #1
   161c8:	cmp	r3, #0
   161cc:	bne	16390 <__assert_fail@plt+0x5460>
   161d0:	add	r5, r6, r5
   161d4:	cmp	fp, r5
   161d8:	movge	r8, #0
   161dc:	andlt	r8, r8, #1
   161e0:	cmp	r8, #0
   161e4:	mov	r4, r5
   161e8:	bne	16390 <__assert_fail@plt+0x5460>
   161ec:	cmp	r7, #0
   161f0:	blt	162a8 <__assert_fail@plt+0x5378>
   161f4:	beq	16220 <__assert_fail@plt+0x52f0>
   161f8:	cmp	r5, #0
   161fc:	blt	16350 <__assert_fail@plt+0x5420>
   16200:	mov	r1, r7
   16204:	mvn	r0, #-2147483648	; 0x80000000
   16208:	bl	1703c <__assert_fail@plt+0x610c>
   1620c:	cmp	r5, r0
   16210:	movle	r0, #0
   16214:	movgt	r0, #1
   16218:	cmp	r0, #0
   1621c:	bne	16390 <__assert_fail@plt+0x5460>
   16220:	mul	r1, r5, r7
   16224:	mov	r0, r9
   16228:	bl	15fa0 <__assert_fail@plt+0x5070>
   1622c:	str	r4, [sl]
   16230:	add	sp, sp, #12
   16234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16238:	cmp	r7, #0
   1623c:	blt	162d4 <__assert_fail@plt+0x53a4>
   16240:	beq	16160 <__assert_fail@plt+0x5230>
   16244:	cmp	r4, #0
   16248:	blt	16310 <__assert_fail@plt+0x53e0>
   1624c:	mov	r1, r7
   16250:	mvn	r0, #-2147483648	; 0x80000000
   16254:	bl	1703c <__assert_fail@plt+0x610c>
   16258:	cmp	r0, r4
   1625c:	movge	r0, #0
   16260:	movlt	r0, #1
   16264:	cmp	r0, #0
   16268:	mvnne	r2, #-2147483648	; 0x80000000
   1626c:	bne	16164 <__assert_fail@plt+0x5234>
   16270:	mul	r1, r7, r4
   16274:	cmp	r1, #63	; 0x3f
   16278:	bgt	16190 <__assert_fail@plt+0x5260>
   1627c:	b	16160 <__assert_fail@plt+0x5230>
   16280:	rsb	r3, r4, #-2147483648	; 0x80000000
   16284:	cmp	r6, r3
   16288:	movge	r3, #0
   1628c:	movlt	r3, #1
   16290:	b	1612c <__assert_fail@plt+0x51fc>
   16294:	rsb	r3, r5, #-2147483648	; 0x80000000
   16298:	cmp	r6, r3
   1629c:	movge	r3, #0
   162a0:	movlt	r3, #1
   162a4:	b	161c8 <__assert_fail@plt+0x5298>
   162a8:	cmp	r5, #0
   162ac:	blt	16334 <__assert_fail@plt+0x5404>
   162b0:	cmn	r7, #1
   162b4:	beq	16220 <__assert_fail@plt+0x52f0>
   162b8:	mov	r1, r7
   162bc:	mov	r0, #-2147483648	; 0x80000000
   162c0:	bl	1703c <__assert_fail@plt+0x610c>
   162c4:	cmp	r5, r0
   162c8:	movle	r0, #0
   162cc:	movgt	r0, #1
   162d0:	b	16218 <__assert_fail@plt+0x52e8>
   162d4:	cmp	r4, #0
   162d8:	blt	16374 <__assert_fail@plt+0x5444>
   162dc:	cmn	r7, #1
   162e0:	beq	16270 <__assert_fail@plt+0x5340>
   162e4:	mov	r1, r7
   162e8:	mov	r0, #-2147483648	; 0x80000000
   162ec:	bl	1703c <__assert_fail@plt+0x610c>
   162f0:	cmp	r0, r4
   162f4:	movge	r0, #0
   162f8:	movlt	r0, #1
   162fc:	b	16264 <__assert_fail@plt+0x5334>
   16300:	mov	r4, fp
   16304:	b	1624c <__assert_fail@plt+0x531c>
   16308:	mov	r4, fp
   1630c:	b	162dc <__assert_fail@plt+0x53ac>
   16310:	cmn	r4, #1
   16314:	beq	16270 <__assert_fail@plt+0x5340>
   16318:	mov	r1, r4
   1631c:	mov	r0, #-2147483648	; 0x80000000
   16320:	bl	1703c <__assert_fail@plt+0x610c>
   16324:	cmp	r7, r0
   16328:	movle	r0, #0
   1632c:	movgt	r0, #1
   16330:	b	16264 <__assert_fail@plt+0x5334>
   16334:	mov	r1, r7
   16338:	mvn	r0, #-2147483648	; 0x80000000
   1633c:	bl	1703c <__assert_fail@plt+0x610c>
   16340:	cmp	r5, r0
   16344:	movge	r0, #0
   16348:	movlt	r0, #1
   1634c:	b	16218 <__assert_fail@plt+0x52e8>
   16350:	cmn	r5, #1
   16354:	beq	16220 <__assert_fail@plt+0x52f0>
   16358:	mov	r1, r5
   1635c:	mov	r0, #-2147483648	; 0x80000000
   16360:	bl	1703c <__assert_fail@plt+0x610c>
   16364:	cmp	r7, r0
   16368:	movle	r0, #0
   1636c:	movgt	r0, #1
   16370:	b	16218 <__assert_fail@plt+0x52e8>
   16374:	mov	r1, r7
   16378:	mvn	r0, #-2147483648	; 0x80000000
   1637c:	bl	1703c <__assert_fail@plt+0x610c>
   16380:	cmp	r0, r4
   16384:	movle	r0, #0
   16388:	movgt	r0, #1
   1638c:	b	16264 <__assert_fail@plt+0x5334>
   16390:	bl	164ac <__assert_fail@plt+0x557c>
   16394:	push	{r4, lr}
   16398:	mov	r1, #1
   1639c:	bl	16b1c <__assert_fail@plt+0x5bec>
   163a0:	cmp	r0, #0
   163a4:	popne	{r4, pc}
   163a8:	bl	164ac <__assert_fail@plt+0x557c>
   163ac:	push	{r4, lr}
   163b0:	mov	r1, #1
   163b4:	bl	16b1c <__assert_fail@plt+0x5bec>
   163b8:	cmp	r0, #0
   163bc:	popne	{r4, pc}
   163c0:	bl	164ac <__assert_fail@plt+0x557c>
   163c4:	push	{r4, lr}
   163c8:	bl	16b1c <__assert_fail@plt+0x5bec>
   163cc:	cmp	r0, #0
   163d0:	popne	{r4, pc}
   163d4:	bl	164ac <__assert_fail@plt+0x557c>
   163d8:	push	{r4, lr}
   163dc:	bl	16b1c <__assert_fail@plt+0x5bec>
   163e0:	cmp	r0, #0
   163e4:	popne	{r4, pc}
   163e8:	bl	164ac <__assert_fail@plt+0x557c>
   163ec:	push	{r4, r5, r6, lr}
   163f0:	mov	r6, r0
   163f4:	mov	r0, r1
   163f8:	mov	r4, r1
   163fc:	bl	16b64 <__assert_fail@plt+0x5c34>
   16400:	subs	r5, r0, #0
   16404:	beq	1641c <__assert_fail@plt+0x54ec>
   16408:	mov	r2, r4
   1640c:	mov	r1, r6
   16410:	bl	10d2c <memcpy@plt>
   16414:	mov	r0, r5
   16418:	pop	{r4, r5, r6, pc}
   1641c:	bl	164ac <__assert_fail@plt+0x557c>
   16420:	push	{r4, r5, r6, lr}
   16424:	mov	r6, r0
   16428:	mov	r0, r1
   1642c:	mov	r4, r1
   16430:	bl	16b64 <__assert_fail@plt+0x5c34>
   16434:	subs	r5, r0, #0
   16438:	beq	16450 <__assert_fail@plt+0x5520>
   1643c:	mov	r2, r4
   16440:	mov	r1, r6
   16444:	bl	10d2c <memcpy@plt>
   16448:	mov	r0, r5
   1644c:	pop	{r4, r5, r6, pc}
   16450:	bl	164ac <__assert_fail@plt+0x557c>
   16454:	push	{r4, r5, r6, lr}
   16458:	mov	r6, r0
   1645c:	add	r0, r1, #1
   16460:	mov	r4, r1
   16464:	bl	16b64 <__assert_fail@plt+0x5c34>
   16468:	subs	r5, r0, #0
   1646c:	beq	1648c <__assert_fail@plt+0x555c>
   16470:	mov	r3, #0
   16474:	mov	r1, r6
   16478:	strb	r3, [r5, r4]
   1647c:	mov	r2, r4
   16480:	bl	10d2c <memcpy@plt>
   16484:	mov	r0, r5
   16488:	pop	{r4, r5, r6, pc}
   1648c:	bl	164ac <__assert_fail@plt+0x557c>
   16490:	push	{r4, lr}
   16494:	mov	r4, r0
   16498:	bl	10e34 <strlen@plt>
   1649c:	add	r1, r0, #1
   164a0:	mov	r0, r4
   164a4:	pop	{r4, lr}
   164a8:	b	163ec <__assert_fail@plt+0x54bc>
   164ac:	ldr	r3, [pc, #44]	; 164e0 <__assert_fail@plt+0x55b0>
   164b0:	push	{r4, lr}
   164b4:	mov	r2, #5
   164b8:	ldr	r1, [pc, #36]	; 164e4 <__assert_fail@plt+0x55b4>
   164bc:	mov	r0, #0
   164c0:	ldr	r4, [r3]
   164c4:	bl	10d68 <dcgettext@plt>
   164c8:	ldr	r2, [pc, #24]	; 164e8 <__assert_fail@plt+0x55b8>
   164cc:	mov	r1, #0
   164d0:	mov	r3, r0
   164d4:	mov	r0, r4
   164d8:	bl	10dd4 <error@plt>
   164dc:	bl	10f24 <abort@plt>
   164e0:	strdeq	r9, [r2], -r0
   164e4:	andeq	r8, r1, r8, lsr r7
   164e8:	andeq	r7, r1, r8, lsr #30
   164ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164f0:	subs	r5, r1, #0
   164f4:	mov	r4, r0
   164f8:	blt	16554 <__assert_fail@plt+0x5624>
   164fc:	moveq	r6, #0
   16500:	moveq	r7, #0
   16504:	beq	1659c <__assert_fail@plt+0x566c>
   16508:	ldrd	r8, [r0]
   1650c:	cmp	r8, #0
   16510:	sbcs	r3, r9, #0
   16514:	blt	165f4 <__assert_fail@plt+0x56c4>
   16518:	asr	r7, r5, #31
   1651c:	mov	r3, r7
   16520:	mov	r2, r5
   16524:	mvn	r0, #0
   16528:	mvn	r1, #-2147483648	; 0x80000000
   1652c:	bl	1727c <__assert_fail@plt+0x634c>
   16530:	mov	r6, r5
   16534:	cmp	r0, r8
   16538:	sbcs	r3, r1, r9
   1653c:	bge	1659c <__assert_fail@plt+0x566c>
   16540:	mvn	r2, #0
   16544:	mvn	r3, #-2147483648	; 0x80000000
   16548:	mov	r0, #1
   1654c:	strd	r2, [r4]
   16550:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16554:	ldrd	r8, [r0]
   16558:	cmp	r8, #0
   1655c:	sbcs	r3, r9, #0
   16560:	blt	165c0 <__assert_fail@plt+0x5690>
   16564:	cmn	r5, #1
   16568:	mvneq	r6, #0
   1656c:	mvneq	r7, #0
   16570:	beq	1659c <__assert_fail@plt+0x566c>
   16574:	asr	r7, r5, #31
   16578:	mov	r3, r7
   1657c:	mov	r2, r5
   16580:	mov	r0, #0
   16584:	mov	r1, #-2147483648	; 0x80000000
   16588:	bl	1727c <__assert_fail@plt+0x634c>
   1658c:	mov	r6, r5
   16590:	cmp	r0, r8
   16594:	sbcs	r3, r1, r9
   16598:	blt	16540 <__assert_fail@plt+0x5610>
   1659c:	ldr	r2, [r4]
   165a0:	ldr	r1, [r4, #4]
   165a4:	mov	r0, #0
   165a8:	mul	ip, r2, r7
   165ac:	umull	r2, r3, r2, r5
   165b0:	mla	r5, r5, r1, ip
   165b4:	add	r3, r5, r3
   165b8:	strd	r2, [r4]
   165bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165c0:	asr	r7, r5, #31
   165c4:	mov	r3, r7
   165c8:	mov	r2, r5
   165cc:	mvn	r0, #0
   165d0:	mvn	r1, #-2147483648	; 0x80000000
   165d4:	bl	1727c <__assert_fail@plt+0x634c>
   165d8:	mov	r6, r5
   165dc:	cmp	r8, r0
   165e0:	sbcs	r3, r9, r1
   165e4:	bge	1659c <__assert_fail@plt+0x566c>
   165e8:	mov	r2, #0
   165ec:	mov	r3, #-2147483648	; 0x80000000
   165f0:	b	16548 <__assert_fail@plt+0x5618>
   165f4:	mvn	r3, #0
   165f8:	cmp	r9, r3
   165fc:	mvn	r2, #0
   16600:	cmpeq	r8, r2
   16604:	moveq	r6, r5
   16608:	asreq	r7, r6, #31
   1660c:	beq	1659c <__assert_fail@plt+0x566c>
   16610:	mov	r3, r9
   16614:	mov	r2, r8
   16618:	mov	r0, #0
   1661c:	mov	r1, #-2147483648	; 0x80000000
   16620:	bl	1727c <__assert_fail@plt+0x634c>
   16624:	asr	r7, r5, #31
   16628:	mov	r6, r5
   1662c:	cmp	r0, r5
   16630:	sbcs	r3, r1, r7
   16634:	blt	165e8 <__assert_fail@plt+0x56b8>
   16638:	b	1659c <__assert_fail@plt+0x566c>
   1663c:	cmp	r2, #36	; 0x24
   16640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16644:	sub	sp, sp, #20
   16648:	bhi	16afc <__assert_fail@plt+0x5bcc>
   1664c:	cmp	r1, #0
   16650:	mov	r6, r1
   16654:	mov	r5, r2
   16658:	addeq	r6, sp, #4
   1665c:	mov	r8, r0
   16660:	mov	r7, r3
   16664:	bl	10e4c <__errno_location@plt>
   16668:	mov	r4, #0
   1666c:	mov	r2, r5
   16670:	mov	r3, r4
   16674:	mov	r1, r6
   16678:	str	r4, [r0]
   1667c:	mov	r9, r0
   16680:	mov	r0, r8
   16684:	bl	10ee8 <__strtoll_internal@plt>
   16688:	ldr	r5, [r6]
   1668c:	cmp	r8, r5
   16690:	strd	r0, [sp, #8]
   16694:	beq	166e4 <__assert_fail@plt+0x57b4>
   16698:	ldr	r4, [r9]
   1669c:	cmp	r4, #0
   166a0:	bne	166cc <__assert_fail@plt+0x579c>
   166a4:	ldr	r3, [sp, #56]	; 0x38
   166a8:	cmp	r3, #0
   166ac:	beq	166bc <__assert_fail@plt+0x578c>
   166b0:	ldrb	r8, [r5]
   166b4:	cmp	r8, #0
   166b8:	bne	1671c <__assert_fail@plt+0x57ec>
   166bc:	strd	r0, [r7]
   166c0:	mov	r0, r4
   166c4:	add	sp, sp, #20
   166c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166cc:	cmp	r4, #34	; 0x22
   166d0:	beq	1692c <__assert_fail@plt+0x59fc>
   166d4:	mov	r4, #4
   166d8:	mov	r0, r4
   166dc:	add	sp, sp, #20
   166e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166e4:	ldr	r3, [sp, #56]	; 0x38
   166e8:	cmp	r3, r4
   166ec:	beq	166d4 <__assert_fail@plt+0x57a4>
   166f0:	ldrb	r1, [r5]
   166f4:	cmp	r1, r4
   166f8:	beq	166d4 <__assert_fail@plt+0x57a4>
   166fc:	mov	r0, r3
   16700:	bl	10e40 <strchr@plt>
   16704:	cmp	r0, r4
   16708:	beq	166d4 <__assert_fail@plt+0x57a4>
   1670c:	ldrb	r8, [r5]
   16710:	mov	r2, #1
   16714:	mov	r3, #0
   16718:	strd	r2, [sp, #8]
   1671c:	mov	r1, r8
   16720:	ldr	r0, [sp, #56]	; 0x38
   16724:	bl	10e40 <strchr@plt>
   16728:	cmp	r0, #0
   1672c:	beq	16aec <__assert_fail@plt+0x5bbc>
   16730:	sub	r3, r8, #69	; 0x45
   16734:	cmp	r3, #47	; 0x2f
   16738:	ldrls	pc, [pc, r3, lsl #2]
   1673c:	b	16800 <__assert_fail@plt+0x58d0>
   16740:	strdeq	r6, [r1], -r0
   16744:	andeq	r6, r1, r0, lsl #16
   16748:	strdeq	r6, [r1], -r0
   1674c:	andeq	r6, r1, r0, lsl #16
   16750:	andeq	r6, r1, r0, lsl #16
   16754:	andeq	r6, r1, r0, lsl #16
   16758:	strdeq	r6, [r1], -r0
   1675c:	andeq	r6, r1, r0, lsl #16
   16760:	strdeq	r6, [r1], -r0
   16764:	andeq	r6, r1, r0, lsl #16
   16768:	andeq	r6, r1, r0, lsl #16
   1676c:	strdeq	r6, [r1], -r0
   16770:	andeq	r6, r1, r0, lsl #16
   16774:	andeq	r6, r1, r0, lsl #16
   16778:	andeq	r6, r1, r0, lsl #16
   1677c:	strdeq	r6, [r1], -r0
   16780:	andeq	r6, r1, r0, lsl #16
   16784:	andeq	r6, r1, r0, lsl #16
   16788:	andeq	r6, r1, r0, lsl #16
   1678c:	andeq	r6, r1, r0, lsl #16
   16790:	strdeq	r6, [r1], -r0
   16794:	strdeq	r6, [r1], -r0
   16798:	andeq	r6, r1, r0, lsl #16
   1679c:	andeq	r6, r1, r0, lsl #16
   167a0:	andeq	r6, r1, r0, lsl #16
   167a4:	andeq	r6, r1, r0, lsl #16
   167a8:	andeq	r6, r1, r0, lsl #16
   167ac:	andeq	r6, r1, r0, lsl #16
   167b0:	andeq	r6, r1, r0, lsl #16
   167b4:	andeq	r6, r1, r0, lsl #16
   167b8:	andeq	r6, r1, r0, lsl #16
   167bc:	andeq	r6, r1, r0, lsl #16
   167c0:	andeq	r6, r1, r0, lsl #16
   167c4:	andeq	r6, r1, r0, lsl #16
   167c8:	strdeq	r6, [r1], -r0
   167cc:	andeq	r6, r1, r0, lsl #16
   167d0:	andeq	r6, r1, r0, lsl #16
   167d4:	andeq	r6, r1, r0, lsl #16
   167d8:	strdeq	r6, [r1], -r0
   167dc:	andeq	r6, r1, r0, lsl #16
   167e0:	strdeq	r6, [r1], -r0
   167e4:	andeq	r6, r1, r0, lsl #16
   167e8:	andeq	r6, r1, r0, lsl #16
   167ec:	andeq	r6, r1, r0, lsl #16
   167f0:	andeq	r6, r1, r0, lsl #16
   167f4:	andeq	r6, r1, r0, lsl #16
   167f8:	andeq	r6, r1, r0, lsl #16
   167fc:	strdeq	r6, [r1], -r0
   16800:	mov	sl, #1
   16804:	mov	r9, #1024	; 0x400
   16808:	sub	r8, r8, #66	; 0x42
   1680c:	cmp	r8, #53	; 0x35
   16810:	ldrls	pc, [pc, r8, lsl #2]
   16814:	b	16aec <__assert_fail@plt+0x5bbc>
   16818:	andeq	r6, r1, r4, lsl #20
   1681c:	andeq	r6, r1, ip, ror #21
   16820:	andeq	r6, r1, ip, ror #21
   16824:	ldrdeq	r6, [r1], -ip
   16828:	andeq	r6, r1, ip, ror #21
   1682c:			; <UNDEFINED> instruction: 0x000169b0
   16830:	andeq	r6, r1, ip, ror #21
   16834:	andeq	r6, r1, ip, ror #21
   16838:	andeq	r6, r1, ip, ror #21
   1683c:	muleq	r1, r8, r9
   16840:	andeq	r6, r1, ip, ror #21
   16844:	andeq	r6, r1, r0, ror r9
   16848:	andeq	r6, r1, ip, ror #21
   1684c:	andeq	r6, r1, ip, ror #21
   16850:	andeq	r6, r1, r4, asr #21
   16854:	andeq	r6, r1, ip, ror #21
   16858:	andeq	r6, r1, ip, ror #21
   1685c:	andeq	r6, r1, ip, ror #21
   16860:	muleq	r1, ip, sl
   16864:	andeq	r6, r1, ip, ror #21
   16868:	andeq	r6, r1, ip, ror #21
   1686c:	andeq	r6, r1, ip, ror #21
   16870:	andeq	r6, r1, ip, ror #21
   16874:	andeq	r6, r1, r4, ror sl
   16878:	andeq	r6, r1, ip, asr #20
   1687c:	andeq	r6, r1, ip, ror #21
   16880:	andeq	r6, r1, ip, ror #21
   16884:	andeq	r6, r1, ip, ror #21
   16888:	andeq	r6, r1, ip, ror #21
   1688c:	andeq	r6, r1, ip, ror #21
   16890:	andeq	r6, r1, ip, ror #21
   16894:	andeq	r6, r1, ip, ror #21
   16898:	andeq	r6, r1, r4, lsr sl
   1689c:	andeq	r6, r1, ip, asr #18
   168a0:	andeq	r6, r1, ip, ror #21
   168a4:	andeq	r6, r1, ip, ror #21
   168a8:	andeq	r6, r1, ip, ror #21
   168ac:			; <UNDEFINED> instruction: 0x000169b0
   168b0:	andeq	r6, r1, ip, ror #21
   168b4:	andeq	r6, r1, ip, ror #21
   168b8:	andeq	r6, r1, ip, ror #21
   168bc:	muleq	r1, r8, r9
   168c0:	andeq	r6, r1, ip, ror #21
   168c4:	andeq	r6, r1, r0, ror r9
   168c8:	andeq	r6, r1, ip, ror #21
   168cc:	andeq	r6, r1, ip, ror #21
   168d0:	andeq	r6, r1, ip, ror #21
   168d4:	andeq	r6, r1, ip, ror #21
   168d8:	andeq	r6, r1, ip, ror #21
   168dc:	andeq	r6, r1, ip, ror #21
   168e0:	muleq	r1, ip, sl
   168e4:	andeq	r6, r1, ip, ror #21
   168e8:	andeq	r6, r1, ip, ror #21
   168ec:	andeq	r6, r1, ip, lsl sl
   168f0:	mov	r1, #48	; 0x30
   168f4:	ldr	r0, [sp, #56]	; 0x38
   168f8:	bl	10e40 <strchr@plt>
   168fc:	cmp	r0, #0
   16900:	beq	16800 <__assert_fail@plt+0x58d0>
   16904:	ldrb	r3, [r5, #1]
   16908:	cmp	r3, #68	; 0x44
   1690c:	beq	16920 <__assert_fail@plt+0x59f0>
   16910:	cmp	r3, #105	; 0x69
   16914:	beq	16934 <__assert_fail@plt+0x5a04>
   16918:	cmp	r3, #66	; 0x42
   1691c:	bne	16800 <__assert_fail@plt+0x58d0>
   16920:	mov	sl, #2
   16924:	mov	r9, #1000	; 0x3e8
   16928:	b	16808 <__assert_fail@plt+0x58d8>
   1692c:	mov	r4, #1
   16930:	b	166a4 <__assert_fail@plt+0x5774>
   16934:	ldrb	sl, [r5, #2]
   16938:	mov	r9, #1024	; 0x400
   1693c:	cmp	sl, #66	; 0x42
   16940:	movne	sl, #1
   16944:	moveq	sl, #3
   16948:	b	16808 <__assert_fail@plt+0x58d8>
   1694c:	mov	r8, #0
   16950:	add	r3, r5, sl
   16954:	str	r3, [r6]
   16958:	ldrb	r3, [r5, sl]
   1695c:	orr	r4, r4, r8
   16960:	ldrd	r0, [sp, #8]
   16964:	cmp	r3, #0
   16968:	orrne	r4, r4, #2
   1696c:	b	166bc <__assert_fail@plt+0x578c>
   16970:	mov	r1, r9
   16974:	add	r0, sp, #8
   16978:	bl	164ec <__assert_fail@plt+0x55bc>
   1697c:	mov	r1, r9
   16980:	mov	r8, r0
   16984:	add	r0, sp, #8
   16988:	bl	164ec <__assert_fail@plt+0x55bc>
   1698c:	ldr	r5, [r6]
   16990:	orr	r8, r8, r0
   16994:	b	16950 <__assert_fail@plt+0x5a20>
   16998:	mov	r1, r9
   1699c:	add	r0, sp, #8
   169a0:	bl	164ec <__assert_fail@plt+0x55bc>
   169a4:	ldr	r5, [r6]
   169a8:	mov	r8, r0
   169ac:	b	16950 <__assert_fail@plt+0x5a20>
   169b0:	mov	fp, #3
   169b4:	mov	r8, #0
   169b8:	add	r5, sp, #8
   169bc:	mov	r1, r9
   169c0:	mov	r0, r5
   169c4:	bl	164ec <__assert_fail@plt+0x55bc>
   169c8:	subs	fp, fp, #1
   169cc:	orr	r8, r8, r0
   169d0:	bne	169bc <__assert_fail@plt+0x5a8c>
   169d4:	ldr	r5, [r6]
   169d8:	b	16950 <__assert_fail@plt+0x5a20>
   169dc:	mov	fp, #6
   169e0:	mov	r8, #0
   169e4:	add	r5, sp, #8
   169e8:	mov	r1, r9
   169ec:	mov	r0, r5
   169f0:	bl	164ec <__assert_fail@plt+0x55bc>
   169f4:	subs	fp, fp, #1
   169f8:	orr	r8, r8, r0
   169fc:	bne	169e8 <__assert_fail@plt+0x5ab8>
   16a00:	b	169d4 <__assert_fail@plt+0x5aa4>
   16a04:	mov	r1, #1024	; 0x400
   16a08:	add	r0, sp, #8
   16a0c:	bl	164ec <__assert_fail@plt+0x55bc>
   16a10:	ldr	r5, [r6]
   16a14:	mov	r8, r0
   16a18:	b	16950 <__assert_fail@plt+0x5a20>
   16a1c:	mov	r1, #2
   16a20:	add	r0, sp, #8
   16a24:	bl	164ec <__assert_fail@plt+0x55bc>
   16a28:	ldr	r5, [r6]
   16a2c:	mov	r8, r0
   16a30:	b	16950 <__assert_fail@plt+0x5a20>
   16a34:	mov	r1, #512	; 0x200
   16a38:	add	r0, sp, #8
   16a3c:	bl	164ec <__assert_fail@plt+0x55bc>
   16a40:	ldr	r5, [r6]
   16a44:	mov	r8, r0
   16a48:	b	16950 <__assert_fail@plt+0x5a20>
   16a4c:	mov	fp, #7
   16a50:	mov	r8, #0
   16a54:	add	r5, sp, #8
   16a58:	mov	r1, r9
   16a5c:	mov	r0, r5
   16a60:	bl	164ec <__assert_fail@plt+0x55bc>
   16a64:	subs	fp, fp, #1
   16a68:	orr	r8, r8, r0
   16a6c:	bne	16a58 <__assert_fail@plt+0x5b28>
   16a70:	b	169d4 <__assert_fail@plt+0x5aa4>
   16a74:	mov	fp, #8
   16a78:	mov	r8, #0
   16a7c:	add	r5, sp, fp
   16a80:	mov	r1, r9
   16a84:	mov	r0, r5
   16a88:	bl	164ec <__assert_fail@plt+0x55bc>
   16a8c:	subs	fp, fp, #1
   16a90:	orr	r8, r8, r0
   16a94:	bne	16a80 <__assert_fail@plt+0x5b50>
   16a98:	b	169d4 <__assert_fail@plt+0x5aa4>
   16a9c:	mov	fp, #4
   16aa0:	mov	r8, #0
   16aa4:	add	r5, sp, #8
   16aa8:	mov	r1, r9
   16aac:	mov	r0, r5
   16ab0:	bl	164ec <__assert_fail@plt+0x55bc>
   16ab4:	subs	fp, fp, #1
   16ab8:	orr	r8, r8, r0
   16abc:	bne	16aa8 <__assert_fail@plt+0x5b78>
   16ac0:	b	169d4 <__assert_fail@plt+0x5aa4>
   16ac4:	mov	fp, #5
   16ac8:	mov	r8, #0
   16acc:	add	r5, sp, #8
   16ad0:	mov	r1, r9
   16ad4:	mov	r0, r5
   16ad8:	bl	164ec <__assert_fail@plt+0x55bc>
   16adc:	subs	fp, fp, #1
   16ae0:	orr	r8, r8, r0
   16ae4:	bne	16ad0 <__assert_fail@plt+0x5ba0>
   16ae8:	b	169d4 <__assert_fail@plt+0x5aa4>
   16aec:	ldrd	r2, [sp, #8]
   16af0:	orr	r4, r4, #2
   16af4:	strd	r2, [r7]
   16af8:	b	166c0 <__assert_fail@plt+0x5790>
   16afc:	ldr	r3, [pc, #12]	; 16b10 <__assert_fail@plt+0x5be0>
   16b00:	mov	r2, #85	; 0x55
   16b04:	ldr	r1, [pc, #8]	; 16b14 <__assert_fail@plt+0x5be4>
   16b08:	ldr	r0, [pc, #8]	; 16b18 <__assert_fail@plt+0x5be8>
   16b0c:	bl	10f30 <__assert_fail@plt>
   16b10:	andeq	r8, r1, ip, asr #14
   16b14:	andeq	r8, r1, r8, asr r7
   16b18:	andeq	r8, r1, r8, ror #14
   16b1c:	cmp	r1, #0
   16b20:	cmpne	r0, #0
   16b24:	moveq	r1, #1
   16b28:	moveq	r0, r1
   16b2c:	umull	r2, r3, r0, r1
   16b30:	adds	r3, r3, #0
   16b34:	movne	r3, #1
   16b38:	cmp	r2, #0
   16b3c:	blt	16b4c <__assert_fail@plt+0x5c1c>
   16b40:	cmp	r3, #0
   16b44:	bne	16b4c <__assert_fail@plt+0x5c1c>
   16b48:	b	10cc0 <calloc@plt>
   16b4c:	push	{r4, lr}
   16b50:	bl	10e4c <__errno_location@plt>
   16b54:	mov	r3, #12
   16b58:	str	r3, [r0]
   16b5c:	mov	r0, #0
   16b60:	pop	{r4, pc}
   16b64:	cmp	r0, #0
   16b68:	moveq	r0, #1
   16b6c:	cmp	r0, #0
   16b70:	blt	16b78 <__assert_fail@plt+0x5c48>
   16b74:	b	10de0 <malloc@plt>
   16b78:	push	{r4, lr}
   16b7c:	bl	10e4c <__errno_location@plt>
   16b80:	mov	r3, #12
   16b84:	str	r3, [r0]
   16b88:	mov	r0, #0
   16b8c:	pop	{r4, pc}
   16b90:	cmp	r0, #0
   16b94:	beq	16bb8 <__assert_fail@plt+0x5c88>
   16b98:	cmp	r1, #0
   16b9c:	push	{lr}		; (str lr, [sp, #-4]!)
   16ba0:	sub	sp, sp, #12
   16ba4:	beq	16bc0 <__assert_fail@plt+0x5c90>
   16ba8:	blt	16bd8 <__assert_fail@plt+0x5ca8>
   16bac:	add	sp, sp, #12
   16bb0:	pop	{lr}		; (ldr lr, [sp], #4)
   16bb4:	b	10d74 <realloc@plt>
   16bb8:	mov	r0, r1
   16bbc:	b	16b64 <__assert_fail@plt+0x5c34>
   16bc0:	str	r1, [sp, #4]
   16bc4:	bl	13a74 <__assert_fail@plt+0x2b44>
   16bc8:	ldr	r3, [sp, #4]
   16bcc:	mov	r0, r3
   16bd0:	add	sp, sp, #12
   16bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bd8:	bl	10e4c <__errno_location@plt>
   16bdc:	mov	r2, #12
   16be0:	mov	r3, #0
   16be4:	str	r2, [r0]
   16be8:	b	16bcc <__assert_fail@plt+0x5c9c>
   16bec:	push	{r4, r5, r6, lr}
   16bf0:	mov	r4, r0
   16bf4:	bl	10dbc <__fpending@plt>
   16bf8:	ldr	r5, [r4]
   16bfc:	and	r5, r5, #32
   16c00:	mov	r6, r0
   16c04:	mov	r0, r4
   16c08:	bl	13974 <__assert_fail@plt+0x2a44>
   16c0c:	cmp	r5, #0
   16c10:	mov	r4, r0
   16c14:	bne	16c34 <__assert_fail@plt+0x5d04>
   16c18:	cmp	r0, #0
   16c1c:	beq	16c2c <__assert_fail@plt+0x5cfc>
   16c20:	cmp	r6, #0
   16c24:	beq	16c50 <__assert_fail@plt+0x5d20>
   16c28:	mvn	r4, #0
   16c2c:	mov	r0, r4
   16c30:	pop	{r4, r5, r6, pc}
   16c34:	cmp	r0, #0
   16c38:	bne	16c28 <__assert_fail@plt+0x5cf8>
   16c3c:	bl	10e4c <__errno_location@plt>
   16c40:	str	r4, [r0]
   16c44:	mvn	r4, #0
   16c48:	mov	r0, r4
   16c4c:	pop	{r4, r5, r6, pc}
   16c50:	bl	10e4c <__errno_location@plt>
   16c54:	ldr	r4, [r0]
   16c58:	subs	r4, r4, #9
   16c5c:	mvnne	r4, #0
   16c60:	mov	r0, r4
   16c64:	pop	{r4, r5, r6, pc}
   16c68:	push	{r4, lr}
   16c6c:	mov	r0, #14
   16c70:	bl	10edc <nl_langinfo@plt>
   16c74:	cmp	r0, #0
   16c78:	beq	16c90 <__assert_fail@plt+0x5d60>
   16c7c:	ldrb	r2, [r0]
   16c80:	ldr	r3, [pc, #16]	; 16c98 <__assert_fail@plt+0x5d68>
   16c84:	cmp	r2, #0
   16c88:	moveq	r0, r3
   16c8c:	pop	{r4, pc}
   16c90:	ldr	r0, [pc]	; 16c98 <__assert_fail@plt+0x5d68>
   16c94:	pop	{r4, pc}
   16c98:	muleq	r1, r0, r7
   16c9c:	push	{r4, r5, r6, r7, lr}
   16ca0:	subs	r6, r0, #0
   16ca4:	sub	sp, sp, #12
   16ca8:	addeq	r6, sp, #4
   16cac:	mov	r0, r6
   16cb0:	mov	r5, r2
   16cb4:	mov	r7, r1
   16cb8:	bl	10dc8 <mbrtowc@plt>
   16cbc:	cmp	r5, #0
   16cc0:	cmnne	r0, #3
   16cc4:	mov	r4, r0
   16cc8:	bls	16ce4 <__assert_fail@plt+0x5db4>
   16ccc:	mov	r0, #0
   16cd0:	bl	16d3c <__assert_fail@plt+0x5e0c>
   16cd4:	cmp	r0, #0
   16cd8:	moveq	r4, #1
   16cdc:	ldrbeq	r3, [r7]
   16ce0:	streq	r3, [r6]
   16ce4:	mov	r0, r4
   16ce8:	add	sp, sp, #12
   16cec:	pop	{r4, r5, r6, r7, pc}
   16cf0:	push	{r4, r5, r6, lr}
   16cf4:	subs	r4, r2, #0
   16cf8:	mov	r6, r0
   16cfc:	mov	r5, r1
   16d00:	beq	16d2c <__assert_fail@plt+0x5dfc>
   16d04:	mov	r1, r4
   16d08:	mvn	r0, #0
   16d0c:	bl	16e30 <__assert_fail@plt+0x5f00>
   16d10:	cmp	r0, r5
   16d14:	bcs	16d2c <__assert_fail@plt+0x5dfc>
   16d18:	bl	10e4c <__errno_location@plt>
   16d1c:	mov	r3, #12
   16d20:	str	r3, [r0]
   16d24:	mov	r0, #0
   16d28:	pop	{r4, r5, r6, pc}
   16d2c:	mul	r1, r5, r4
   16d30:	mov	r0, r6
   16d34:	pop	{r4, r5, r6, lr}
   16d38:	b	16b90 <__assert_fail@plt+0x5c60>
   16d3c:	push	{lr}		; (str lr, [sp, #-4]!)
   16d40:	sub	sp, sp, #268	; 0x10c
   16d44:	add	r1, sp, #4
   16d48:	ldr	r2, [pc, #60]	; 16d8c <__assert_fail@plt+0x5e5c>
   16d4c:	bl	16d98 <__assert_fail@plt+0x5e68>
   16d50:	cmp	r0, #0
   16d54:	movne	r0, #0
   16d58:	bne	16d84 <__assert_fail@plt+0x5e54>
   16d5c:	ldr	r1, [pc, #44]	; 16d90 <__assert_fail@plt+0x5e60>
   16d60:	add	r0, sp, #4
   16d64:	bl	10ce4 <strcmp@plt>
   16d68:	cmp	r0, #0
   16d6c:	beq	16d84 <__assert_fail@plt+0x5e54>
   16d70:	add	r0, sp, #4
   16d74:	ldr	r1, [pc, #24]	; 16d94 <__assert_fail@plt+0x5e64>
   16d78:	bl	10ce4 <strcmp@plt>
   16d7c:	adds	r0, r0, #0
   16d80:	movne	r0, #1
   16d84:	add	sp, sp, #268	; 0x10c
   16d88:	pop	{pc}		; (ldr pc, [sp], #4)
   16d8c:	andeq	r0, r0, r1, lsl #2
   16d90:	muleq	r1, r8, r7
   16d94:	muleq	r1, ip, r7
   16d98:	push	{r4, r5, r6, lr}
   16d9c:	mov	r5, r1
   16da0:	mov	r1, #0
   16da4:	mov	r4, r2
   16da8:	bl	10ec4 <setlocale@plt>
   16dac:	subs	r6, r0, #0
   16db0:	beq	16e0c <__assert_fail@plt+0x5edc>
   16db4:	bl	10e34 <strlen@plt>
   16db8:	cmp	r4, r0
   16dbc:	bhi	16df4 <__assert_fail@plt+0x5ec4>
   16dc0:	cmp	r4, #0
   16dc4:	bne	16dd0 <__assert_fail@plt+0x5ea0>
   16dc8:	mov	r0, #34	; 0x22
   16dcc:	pop	{r4, r5, r6, pc}
   16dd0:	sub	r4, r4, #1
   16dd4:	mov	r1, r6
   16dd8:	mov	r2, r4
   16ddc:	mov	r0, r5
   16de0:	bl	10d2c <memcpy@plt>
   16de4:	mov	r3, #0
   16de8:	strb	r3, [r5, r4]
   16dec:	mov	r0, #34	; 0x22
   16df0:	pop	{r4, r5, r6, pc}
   16df4:	add	r2, r0, #1
   16df8:	mov	r1, r6
   16dfc:	mov	r0, r5
   16e00:	bl	10d2c <memcpy@plt>
   16e04:	mov	r0, #0
   16e08:	pop	{r4, r5, r6, pc}
   16e0c:	cmp	r4, #0
   16e10:	beq	16e20 <__assert_fail@plt+0x5ef0>
   16e14:	strb	r6, [r5]
   16e18:	mov	r0, #22
   16e1c:	pop	{r4, r5, r6, pc}
   16e20:	mov	r0, #22
   16e24:	pop	{r4, r5, r6, pc}
   16e28:	mov	r1, #0
   16e2c:	b	10ec4 <setlocale@plt>
   16e30:	subs	r2, r1, #1
   16e34:	bxeq	lr
   16e38:	bcc	17010 <__assert_fail@plt+0x60e0>
   16e3c:	cmp	r0, r1
   16e40:	bls	16ff4 <__assert_fail@plt+0x60c4>
   16e44:	tst	r1, r2
   16e48:	beq	17000 <__assert_fail@plt+0x60d0>
   16e4c:	clz	r3, r0
   16e50:	clz	r2, r1
   16e54:	sub	r3, r2, r3
   16e58:	rsbs	r3, r3, #31
   16e5c:	addne	r3, r3, r3, lsl #1
   16e60:	mov	r2, #0
   16e64:	addne	pc, pc, r3, lsl #2
   16e68:	nop			; (mov r0, r0)
   16e6c:	cmp	r0, r1, lsl #31
   16e70:	adc	r2, r2, r2
   16e74:	subcs	r0, r0, r1, lsl #31
   16e78:	cmp	r0, r1, lsl #30
   16e7c:	adc	r2, r2, r2
   16e80:	subcs	r0, r0, r1, lsl #30
   16e84:	cmp	r0, r1, lsl #29
   16e88:	adc	r2, r2, r2
   16e8c:	subcs	r0, r0, r1, lsl #29
   16e90:	cmp	r0, r1, lsl #28
   16e94:	adc	r2, r2, r2
   16e98:	subcs	r0, r0, r1, lsl #28
   16e9c:	cmp	r0, r1, lsl #27
   16ea0:	adc	r2, r2, r2
   16ea4:	subcs	r0, r0, r1, lsl #27
   16ea8:	cmp	r0, r1, lsl #26
   16eac:	adc	r2, r2, r2
   16eb0:	subcs	r0, r0, r1, lsl #26
   16eb4:	cmp	r0, r1, lsl #25
   16eb8:	adc	r2, r2, r2
   16ebc:	subcs	r0, r0, r1, lsl #25
   16ec0:	cmp	r0, r1, lsl #24
   16ec4:	adc	r2, r2, r2
   16ec8:	subcs	r0, r0, r1, lsl #24
   16ecc:	cmp	r0, r1, lsl #23
   16ed0:	adc	r2, r2, r2
   16ed4:	subcs	r0, r0, r1, lsl #23
   16ed8:	cmp	r0, r1, lsl #22
   16edc:	adc	r2, r2, r2
   16ee0:	subcs	r0, r0, r1, lsl #22
   16ee4:	cmp	r0, r1, lsl #21
   16ee8:	adc	r2, r2, r2
   16eec:	subcs	r0, r0, r1, lsl #21
   16ef0:	cmp	r0, r1, lsl #20
   16ef4:	adc	r2, r2, r2
   16ef8:	subcs	r0, r0, r1, lsl #20
   16efc:	cmp	r0, r1, lsl #19
   16f00:	adc	r2, r2, r2
   16f04:	subcs	r0, r0, r1, lsl #19
   16f08:	cmp	r0, r1, lsl #18
   16f0c:	adc	r2, r2, r2
   16f10:	subcs	r0, r0, r1, lsl #18
   16f14:	cmp	r0, r1, lsl #17
   16f18:	adc	r2, r2, r2
   16f1c:	subcs	r0, r0, r1, lsl #17
   16f20:	cmp	r0, r1, lsl #16
   16f24:	adc	r2, r2, r2
   16f28:	subcs	r0, r0, r1, lsl #16
   16f2c:	cmp	r0, r1, lsl #15
   16f30:	adc	r2, r2, r2
   16f34:	subcs	r0, r0, r1, lsl #15
   16f38:	cmp	r0, r1, lsl #14
   16f3c:	adc	r2, r2, r2
   16f40:	subcs	r0, r0, r1, lsl #14
   16f44:	cmp	r0, r1, lsl #13
   16f48:	adc	r2, r2, r2
   16f4c:	subcs	r0, r0, r1, lsl #13
   16f50:	cmp	r0, r1, lsl #12
   16f54:	adc	r2, r2, r2
   16f58:	subcs	r0, r0, r1, lsl #12
   16f5c:	cmp	r0, r1, lsl #11
   16f60:	adc	r2, r2, r2
   16f64:	subcs	r0, r0, r1, lsl #11
   16f68:	cmp	r0, r1, lsl #10
   16f6c:	adc	r2, r2, r2
   16f70:	subcs	r0, r0, r1, lsl #10
   16f74:	cmp	r0, r1, lsl #9
   16f78:	adc	r2, r2, r2
   16f7c:	subcs	r0, r0, r1, lsl #9
   16f80:	cmp	r0, r1, lsl #8
   16f84:	adc	r2, r2, r2
   16f88:	subcs	r0, r0, r1, lsl #8
   16f8c:	cmp	r0, r1, lsl #7
   16f90:	adc	r2, r2, r2
   16f94:	subcs	r0, r0, r1, lsl #7
   16f98:	cmp	r0, r1, lsl #6
   16f9c:	adc	r2, r2, r2
   16fa0:	subcs	r0, r0, r1, lsl #6
   16fa4:	cmp	r0, r1, lsl #5
   16fa8:	adc	r2, r2, r2
   16fac:	subcs	r0, r0, r1, lsl #5
   16fb0:	cmp	r0, r1, lsl #4
   16fb4:	adc	r2, r2, r2
   16fb8:	subcs	r0, r0, r1, lsl #4
   16fbc:	cmp	r0, r1, lsl #3
   16fc0:	adc	r2, r2, r2
   16fc4:	subcs	r0, r0, r1, lsl #3
   16fc8:	cmp	r0, r1, lsl #2
   16fcc:	adc	r2, r2, r2
   16fd0:	subcs	r0, r0, r1, lsl #2
   16fd4:	cmp	r0, r1, lsl #1
   16fd8:	adc	r2, r2, r2
   16fdc:	subcs	r0, r0, r1, lsl #1
   16fe0:	cmp	r0, r1
   16fe4:	adc	r2, r2, r2
   16fe8:	subcs	r0, r0, r1
   16fec:	mov	r0, r2
   16ff0:	bx	lr
   16ff4:	moveq	r0, #1
   16ff8:	movne	r0, #0
   16ffc:	bx	lr
   17000:	clz	r2, r1
   17004:	rsb	r2, r2, #31
   17008:	lsr	r0, r0, r2
   1700c:	bx	lr
   17010:	cmp	r0, #0
   17014:	mvnne	r0, #0
   17018:	b	17350 <__assert_fail@plt+0x6420>
   1701c:	cmp	r1, #0
   17020:	beq	17010 <__assert_fail@plt+0x60e0>
   17024:	push	{r0, r1, lr}
   17028:	bl	16e30 <__assert_fail@plt+0x5f00>
   1702c:	pop	{r1, r2, lr}
   17030:	mul	r3, r2, r0
   17034:	sub	r1, r1, r3
   17038:	bx	lr
   1703c:	cmp	r1, #0
   17040:	beq	1724c <__assert_fail@plt+0x631c>
   17044:	eor	ip, r0, r1
   17048:	rsbmi	r1, r1, #0
   1704c:	subs	r2, r1, #1
   17050:	beq	17218 <__assert_fail@plt+0x62e8>
   17054:	movs	r3, r0
   17058:	rsbmi	r3, r0, #0
   1705c:	cmp	r3, r1
   17060:	bls	17224 <__assert_fail@plt+0x62f4>
   17064:	tst	r1, r2
   17068:	beq	17234 <__assert_fail@plt+0x6304>
   1706c:	clz	r2, r3
   17070:	clz	r0, r1
   17074:	sub	r2, r0, r2
   17078:	rsbs	r2, r2, #31
   1707c:	addne	r2, r2, r2, lsl #1
   17080:	mov	r0, #0
   17084:	addne	pc, pc, r2, lsl #2
   17088:	nop			; (mov r0, r0)
   1708c:	cmp	r3, r1, lsl #31
   17090:	adc	r0, r0, r0
   17094:	subcs	r3, r3, r1, lsl #31
   17098:	cmp	r3, r1, lsl #30
   1709c:	adc	r0, r0, r0
   170a0:	subcs	r3, r3, r1, lsl #30
   170a4:	cmp	r3, r1, lsl #29
   170a8:	adc	r0, r0, r0
   170ac:	subcs	r3, r3, r1, lsl #29
   170b0:	cmp	r3, r1, lsl #28
   170b4:	adc	r0, r0, r0
   170b8:	subcs	r3, r3, r1, lsl #28
   170bc:	cmp	r3, r1, lsl #27
   170c0:	adc	r0, r0, r0
   170c4:	subcs	r3, r3, r1, lsl #27
   170c8:	cmp	r3, r1, lsl #26
   170cc:	adc	r0, r0, r0
   170d0:	subcs	r3, r3, r1, lsl #26
   170d4:	cmp	r3, r1, lsl #25
   170d8:	adc	r0, r0, r0
   170dc:	subcs	r3, r3, r1, lsl #25
   170e0:	cmp	r3, r1, lsl #24
   170e4:	adc	r0, r0, r0
   170e8:	subcs	r3, r3, r1, lsl #24
   170ec:	cmp	r3, r1, lsl #23
   170f0:	adc	r0, r0, r0
   170f4:	subcs	r3, r3, r1, lsl #23
   170f8:	cmp	r3, r1, lsl #22
   170fc:	adc	r0, r0, r0
   17100:	subcs	r3, r3, r1, lsl #22
   17104:	cmp	r3, r1, lsl #21
   17108:	adc	r0, r0, r0
   1710c:	subcs	r3, r3, r1, lsl #21
   17110:	cmp	r3, r1, lsl #20
   17114:	adc	r0, r0, r0
   17118:	subcs	r3, r3, r1, lsl #20
   1711c:	cmp	r3, r1, lsl #19
   17120:	adc	r0, r0, r0
   17124:	subcs	r3, r3, r1, lsl #19
   17128:	cmp	r3, r1, lsl #18
   1712c:	adc	r0, r0, r0
   17130:	subcs	r3, r3, r1, lsl #18
   17134:	cmp	r3, r1, lsl #17
   17138:	adc	r0, r0, r0
   1713c:	subcs	r3, r3, r1, lsl #17
   17140:	cmp	r3, r1, lsl #16
   17144:	adc	r0, r0, r0
   17148:	subcs	r3, r3, r1, lsl #16
   1714c:	cmp	r3, r1, lsl #15
   17150:	adc	r0, r0, r0
   17154:	subcs	r3, r3, r1, lsl #15
   17158:	cmp	r3, r1, lsl #14
   1715c:	adc	r0, r0, r0
   17160:	subcs	r3, r3, r1, lsl #14
   17164:	cmp	r3, r1, lsl #13
   17168:	adc	r0, r0, r0
   1716c:	subcs	r3, r3, r1, lsl #13
   17170:	cmp	r3, r1, lsl #12
   17174:	adc	r0, r0, r0
   17178:	subcs	r3, r3, r1, lsl #12
   1717c:	cmp	r3, r1, lsl #11
   17180:	adc	r0, r0, r0
   17184:	subcs	r3, r3, r1, lsl #11
   17188:	cmp	r3, r1, lsl #10
   1718c:	adc	r0, r0, r0
   17190:	subcs	r3, r3, r1, lsl #10
   17194:	cmp	r3, r1, lsl #9
   17198:	adc	r0, r0, r0
   1719c:	subcs	r3, r3, r1, lsl #9
   171a0:	cmp	r3, r1, lsl #8
   171a4:	adc	r0, r0, r0
   171a8:	subcs	r3, r3, r1, lsl #8
   171ac:	cmp	r3, r1, lsl #7
   171b0:	adc	r0, r0, r0
   171b4:	subcs	r3, r3, r1, lsl #7
   171b8:	cmp	r3, r1, lsl #6
   171bc:	adc	r0, r0, r0
   171c0:	subcs	r3, r3, r1, lsl #6
   171c4:	cmp	r3, r1, lsl #5
   171c8:	adc	r0, r0, r0
   171cc:	subcs	r3, r3, r1, lsl #5
   171d0:	cmp	r3, r1, lsl #4
   171d4:	adc	r0, r0, r0
   171d8:	subcs	r3, r3, r1, lsl #4
   171dc:	cmp	r3, r1, lsl #3
   171e0:	adc	r0, r0, r0
   171e4:	subcs	r3, r3, r1, lsl #3
   171e8:	cmp	r3, r1, lsl #2
   171ec:	adc	r0, r0, r0
   171f0:	subcs	r3, r3, r1, lsl #2
   171f4:	cmp	r3, r1, lsl #1
   171f8:	adc	r0, r0, r0
   171fc:	subcs	r3, r3, r1, lsl #1
   17200:	cmp	r3, r1
   17204:	adc	r0, r0, r0
   17208:	subcs	r3, r3, r1
   1720c:	cmp	ip, #0
   17210:	rsbmi	r0, r0, #0
   17214:	bx	lr
   17218:	teq	ip, r0
   1721c:	rsbmi	r0, r0, #0
   17220:	bx	lr
   17224:	movcc	r0, #0
   17228:	asreq	r0, ip, #31
   1722c:	orreq	r0, r0, #1
   17230:	bx	lr
   17234:	clz	r2, r1
   17238:	rsb	r2, r2, #31
   1723c:	cmp	ip, #0
   17240:	lsr	r0, r3, r2
   17244:	rsbmi	r0, r0, #0
   17248:	bx	lr
   1724c:	cmp	r0, #0
   17250:	mvngt	r0, #-2147483648	; 0x80000000
   17254:	movlt	r0, #-2147483648	; 0x80000000
   17258:	b	17350 <__assert_fail@plt+0x6420>
   1725c:	cmp	r1, #0
   17260:	beq	1724c <__assert_fail@plt+0x631c>
   17264:	push	{r0, r1, lr}
   17268:	bl	17044 <__assert_fail@plt+0x6114>
   1726c:	pop	{r1, r2, lr}
   17270:	mul	r3, r2, r0
   17274:	sub	r1, r1, r3
   17278:	bx	lr
   1727c:	cmp	r3, #0
   17280:	cmpeq	r2, #0
   17284:	bne	172a8 <__assert_fail@plt+0x6378>
   17288:	cmp	r1, #0
   1728c:	movlt	r1, #-2147483648	; 0x80000000
   17290:	movlt	r0, #0
   17294:	blt	172a4 <__assert_fail@plt+0x6374>
   17298:	cmpeq	r0, #0
   1729c:	mvnne	r1, #-2147483648	; 0x80000000
   172a0:	mvnne	r0, #0
   172a4:	b	17350 <__assert_fail@plt+0x6420>
   172a8:	sub	sp, sp, #8
   172ac:	push	{sp, lr}
   172b0:	cmp	r1, #0
   172b4:	blt	172d4 <__assert_fail@plt+0x63a4>
   172b8:	cmp	r3, #0
   172bc:	blt	17308 <__assert_fail@plt+0x63d8>
   172c0:	bl	17360 <__assert_fail@plt+0x6430>
   172c4:	ldr	lr, [sp, #4]
   172c8:	add	sp, sp, #8
   172cc:	pop	{r2, r3}
   172d0:	bx	lr
   172d4:	rsbs	r0, r0, #0
   172d8:	sbc	r1, r1, r1, lsl #1
   172dc:	cmp	r3, #0
   172e0:	blt	1732c <__assert_fail@plt+0x63fc>
   172e4:	bl	17360 <__assert_fail@plt+0x6430>
   172e8:	ldr	lr, [sp, #4]
   172ec:	add	sp, sp, #8
   172f0:	pop	{r2, r3}
   172f4:	rsbs	r0, r0, #0
   172f8:	sbc	r1, r1, r1, lsl #1
   172fc:	rsbs	r2, r2, #0
   17300:	sbc	r3, r3, r3, lsl #1
   17304:	bx	lr
   17308:	rsbs	r2, r2, #0
   1730c:	sbc	r3, r3, r3, lsl #1
   17310:	bl	17360 <__assert_fail@plt+0x6430>
   17314:	ldr	lr, [sp, #4]
   17318:	add	sp, sp, #8
   1731c:	pop	{r2, r3}
   17320:	rsbs	r0, r0, #0
   17324:	sbc	r1, r1, r1, lsl #1
   17328:	bx	lr
   1732c:	rsbs	r2, r2, #0
   17330:	sbc	r3, r3, r3, lsl #1
   17334:	bl	17360 <__assert_fail@plt+0x6430>
   17338:	ldr	lr, [sp, #4]
   1733c:	add	sp, sp, #8
   17340:	pop	{r2, r3}
   17344:	rsbs	r2, r2, #0
   17348:	sbc	r3, r3, r3, lsl #1
   1734c:	bx	lr
   17350:	push	{r1, lr}
   17354:	mov	r0, #8
   17358:	bl	10cd8 <raise@plt>
   1735c:	pop	{r1, pc}
   17360:	cmp	r1, r3
   17364:	push	{r4, r5, r6, r7, r8, r9, lr}
   17368:	cmpeq	r0, r2
   1736c:	mov	r4, r0
   17370:	mov	r5, r1
   17374:	ldr	r9, [sp, #28]
   17378:	movcc	r0, #0
   1737c:	movcc	r1, #0
   17380:	bcc	17478 <__assert_fail@plt+0x6548>
   17384:	cmp	r3, #0
   17388:	clzeq	ip, r2
   1738c:	clzne	ip, r3
   17390:	addeq	ip, ip, #32
   17394:	cmp	r5, #0
   17398:	clzeq	r1, r4
   1739c:	addeq	r1, r1, #32
   173a0:	clzne	r1, r5
   173a4:	sub	ip, ip, r1
   173a8:	sub	lr, ip, #32
   173ac:	lsl	r7, r3, ip
   173b0:	rsb	r8, ip, #32
   173b4:	orr	r7, r7, r2, lsl lr
   173b8:	orr	r7, r7, r2, lsr r8
   173bc:	lsl	r6, r2, ip
   173c0:	cmp	r5, r7
   173c4:	cmpeq	r4, r6
   173c8:	movcc	r0, #0
   173cc:	movcc	r1, #0
   173d0:	bcc	173ec <__assert_fail@plt+0x64bc>
   173d4:	mov	r3, #1
   173d8:	subs	r4, r4, r6
   173dc:	lsl	r1, r3, lr
   173e0:	lsl	r0, r3, ip
   173e4:	orr	r1, r1, r3, lsr r8
   173e8:	sbc	r5, r5, r7
   173ec:	cmp	ip, #0
   173f0:	beq	17478 <__assert_fail@plt+0x6548>
   173f4:	lsrs	r3, r7, #1
   173f8:	rrx	r2, r6
   173fc:	mov	r6, ip
   17400:	b	17424 <__assert_fail@plt+0x64f4>
   17404:	subs	r4, r4, r2
   17408:	sbc	r5, r5, r3
   1740c:	adds	r4, r4, r4
   17410:	adc	r5, r5, r5
   17414:	adds	r4, r4, #1
   17418:	adc	r5, r5, #0
   1741c:	subs	r6, r6, #1
   17420:	beq	17440 <__assert_fail@plt+0x6510>
   17424:	cmp	r5, r3
   17428:	cmpeq	r4, r2
   1742c:	bcs	17404 <__assert_fail@plt+0x64d4>
   17430:	adds	r4, r4, r4
   17434:	adc	r5, r5, r5
   17438:	subs	r6, r6, #1
   1743c:	bne	17424 <__assert_fail@plt+0x64f4>
   17440:	lsr	r6, r4, ip
   17444:	lsr	r7, r5, ip
   17448:	orr	r6, r6, r5, lsl r8
   1744c:	adds	r2, r0, r4
   17450:	orr	r6, r6, r5, lsr lr
   17454:	adc	r3, r1, r5
   17458:	lsl	r1, r7, ip
   1745c:	orr	r1, r1, r6, lsl lr
   17460:	lsl	r0, r6, ip
   17464:	orr	r1, r1, r6, lsr r8
   17468:	subs	r0, r2, r0
   1746c:	mov	r4, r6
   17470:	mov	r5, r7
   17474:	sbc	r1, r3, r1
   17478:	cmp	r9, #0
   1747c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17480:	strd	r4, [r9]
   17484:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1748c:	mov	r7, r0
   17490:	ldr	r6, [pc, #72]	; 174e0 <__assert_fail@plt+0x65b0>
   17494:	ldr	r5, [pc, #72]	; 174e4 <__assert_fail@plt+0x65b4>
   17498:	add	r6, pc, r6
   1749c:	add	r5, pc, r5
   174a0:	sub	r6, r6, r5
   174a4:	mov	r8, r1
   174a8:	mov	r9, r2
   174ac:	bl	10ca0 <calloc@plt-0x20>
   174b0:	asrs	r6, r6, #2
   174b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   174b8:	mov	r4, #0
   174bc:	add	r4, r4, #1
   174c0:	ldr	r3, [r5], #4
   174c4:	mov	r2, r9
   174c8:	mov	r1, r8
   174cc:	mov	r0, r7
   174d0:	blx	r3
   174d4:	cmp	r6, r4
   174d8:	bne	174bc <__assert_fail@plt+0x658c>
   174dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174e0:	andeq	r1, r1, r0, ror sl
   174e4:	andeq	r1, r1, r8, ror #20
   174e8:	bx	lr
   174ec:	ldr	r3, [pc, #12]	; 17500 <__assert_fail@plt+0x65d0>
   174f0:	mov	r1, #0
   174f4:	add	r3, pc, r3
   174f8:	ldr	r2, [r3]
   174fc:	b	10e58 <__cxa_atexit@plt>
   17500:	andeq	r1, r1, ip, ror #23

Disassembly of section .fini:

00017504 <.fini>:
   17504:	push	{r3, lr}
   17508:	pop	{r3, pc}
