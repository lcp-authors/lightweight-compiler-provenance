
../repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/reflection_test:     file format elf32-littlearm


Disassembly of section .init:

0001075c <.init>:
   1075c:	push	{r3, lr}
   10760:	bl	108d0 <_start@@Base+0x3c>
   10764:	pop	{r3, pc}

Disassembly of section .plt:

00010768 <strcmp@plt-0x14>:
   10768:	push	{lr}		; (str lr, [sp, #-4]!)
   1076c:	ldr	lr, [pc, #4]	; 10778 <strcmp@plt-0x4>
   10770:	add	lr, pc, lr
   10774:	ldr	pc, [lr, #8]!
   10778:	andeq	r1, r1, r8, lsl #17

0001077c <strcmp@plt>:
   1077c:	add	ip, pc, #0, 12
   10780:	add	ip, ip, #69632	; 0x11000
   10784:	ldr	pc, [ip, #2184]!	; 0x888

00010788 <printf@plt>:
   10788:	add	ip, pc, #0, 12
   1078c:	add	ip, ip, #69632	; 0x11000
   10790:	ldr	pc, [ip, #2176]!	; 0x880

00010794 <fopen@plt>:
   10794:	add	ip, pc, #0, 12
   10798:	add	ip, ip, #69632	; 0x11000
   1079c:	ldr	pc, [ip, #2168]!	; 0x878

000107a0 <free@plt>:
   107a0:	add	ip, pc, #0, 12
   107a4:	add	ip, ip, #69632	; 0x11000
   107a8:	ldr	pc, [ip, #2160]!	; 0x870

000107ac <ftell@plt>:
   107ac:	add	ip, pc, #0, 12
   107b0:	add	ip, ip, #69632	; 0x11000
   107b4:	ldr	pc, [ip, #2152]!	; 0x868

000107b8 <rewind@plt>:
   107b8:	add	ip, pc, #0, 12
   107bc:	add	ip, ip, #69632	; 0x11000
   107c0:	ldr	pc, [ip, #2144]!	; 0x860

000107c4 <fread@plt>:
   107c4:	add	ip, pc, #0, 12
   107c8:	add	ip, ip, #69632	; 0x11000
   107cc:	ldr	pc, [ip, #2136]!	; 0x858

000107d0 <puts@plt>:
   107d0:	add	ip, pc, #0, 12
   107d4:	add	ip, ip, #69632	; 0x11000
   107d8:	ldr	pc, [ip, #2128]!	; 0x850

000107dc <malloc@plt>:
   107dc:	add	ip, pc, #0, 12
   107e0:	add	ip, ip, #69632	; 0x11000
   107e4:	ldr	pc, [ip, #2120]!	; 0x848

000107e8 <__libc_start_main@plt>:
   107e8:	add	ip, pc, #0, 12
   107ec:	add	ip, ip, #69632	; 0x11000
   107f0:	ldr	pc, [ip, #2112]!	; 0x840

000107f4 <__gmon_start__@plt>:
   107f4:	add	ip, pc, #0, 12
   107f8:	add	ip, ip, #69632	; 0x11000
   107fc:	ldr	pc, [ip, #2104]!	; 0x838

00010800 <exit@plt>:
   10800:	add	ip, pc, #0, 12
   10804:	add	ip, ip, #69632	; 0x11000
   10808:	ldr	pc, [ip, #2096]!	; 0x830

0001080c <fclose@plt>:
   1080c:	add	ip, pc, #0, 12
   10810:	add	ip, ip, #69632	; 0x11000
   10814:	ldr	pc, [ip, #2088]!	; 0x828

00010818 <fseek@plt>:
   10818:	add	ip, pc, #0, 12
   1081c:	add	ip, ip, #69632	; 0x11000
   10820:	ldr	pc, [ip, #2080]!	; 0x820

00010824 <fputs@plt>:
   10824:	add	ip, pc, #0, 12
   10828:	add	ip, ip, #69632	; 0x11000
   1082c:	ldr	pc, [ip, #2072]!	; 0x818

00010830 <abort@plt>:
   10830:	add	ip, pc, #0, 12
   10834:	add	ip, ip, #69632	; 0x11000
   10838:	ldr	pc, [ip, #2064]!	; 0x810

0001083c <__assert_fail@plt>:
   1083c:	add	ip, pc, #0, 12
   10840:	add	ip, ip, #69632	; 0x11000
   10844:	ldr	pc, [ip, #2056]!	; 0x808

Disassembly of section .text:

00010848 <main@@Base>:
   10848:	sub	r3, r0, #1
   1084c:	cmp	r3, #1
   10850:	bls	10870 <main@@Base+0x28>
   10854:	ldr	r3, [pc, #44]	; 10888 <main@@Base+0x40>
   10858:	push	{r4, lr}
   1085c:	ldr	r0, [pc, #40]	; 1088c <main@@Base+0x44>
   10860:	ldr	r1, [r3]
   10864:	bl	10824 <fputs@plt>
   10868:	mov	r0, #1
   1086c:	bl	10800 <exit@plt>
   10870:	cmp	r0, #2
   10874:	ldr	r3, [pc, #20]	; 10890 <main@@Base+0x48>
   10878:	ldreq	r2, [r1, #4]
   1087c:	streq	r2, [r3]
   10880:	ldr	r0, [r3]
   10884:	b	10d18 <test_schema@@Base>
   10888:	andeq	r2, r2, r0, rrx
   1088c:	andeq	r1, r1, r3, lsr #11
   10890:	andeq	r2, r2, ip, asr r0

00010894 <_start@@Base>:
   10894:	mov	fp, #0
   10898:	mov	lr, #0
   1089c:	pop	{r1}		; (ldr r1, [sp], #4)
   108a0:	mov	r2, sp
   108a4:	push	{r2}		; (str r2, [sp, #-4]!)
   108a8:	push	{r0}		; (str r0, [sp, #-4]!)
   108ac:	ldr	ip, [pc, #16]	; 108c4 <_start@@Base+0x30>
   108b0:	push	{ip}		; (str ip, [sp, #-4]!)
   108b4:	ldr	r0, [pc, #12]	; 108c8 <_start@@Base+0x34>
   108b8:	ldr	r3, [pc, #12]	; 108cc <_start@@Base+0x38>
   108bc:	bl	107e8 <__libc_start_main@plt>
   108c0:	bl	10830 <abort@plt>
   108c4:	andeq	r1, r1, r8, asr #3
   108c8:	andeq	r0, r1, r8, asr #16
   108cc:	andeq	r1, r1, r8, ror #2
   108d0:	ldr	r3, [pc, #20]	; 108ec <_start@@Base+0x58>
   108d4:	ldr	r2, [pc, #20]	; 108f0 <_start@@Base+0x5c>
   108d8:	add	r3, pc, r3
   108dc:	ldr	r2, [r3, r2]
   108e0:	cmp	r2, #0
   108e4:	bxeq	lr
   108e8:	b	107f4 <__gmon_start__@plt>
   108ec:	andeq	r1, r1, r0, lsr #14
   108f0:	andeq	r0, r0, r0, asr r0
   108f4:	ldr	r0, [pc, #24]	; 10914 <_start@@Base+0x80>
   108f8:	ldr	r3, [pc, #24]	; 10918 <_start@@Base+0x84>
   108fc:	cmp	r3, r0
   10900:	bxeq	lr
   10904:	ldr	r3, [pc, #16]	; 1091c <_start@@Base+0x88>
   10908:	cmp	r3, #0
   1090c:	bxeq	lr
   10910:	bx	r3
   10914:	andeq	r2, r2, r0, rrx
   10918:	andeq	r2, r2, r0, rrx
   1091c:	andeq	r0, r0, r0
   10920:	ldr	r0, [pc, #36]	; 1094c <_start@@Base+0xb8>
   10924:	ldr	r1, [pc, #36]	; 10950 <_start@@Base+0xbc>
   10928:	sub	r1, r1, r0
   1092c:	asr	r1, r1, #2
   10930:	add	r1, r1, r1, lsr #31
   10934:	asrs	r1, r1, #1
   10938:	bxeq	lr
   1093c:	ldr	r3, [pc, #16]	; 10954 <_start@@Base+0xc0>
   10940:	cmp	r3, #0
   10944:	bxeq	lr
   10948:	bx	r3
   1094c:	andeq	r2, r2, r0, rrx
   10950:	andeq	r2, r2, r0, rrx
   10954:	andeq	r0, r0, r0
   10958:	push	{r4, lr}
   1095c:	ldr	r4, [pc, #24]	; 1097c <_start@@Base+0xe8>
   10960:	ldrb	r3, [r4]
   10964:	cmp	r3, #0
   10968:	popne	{r4, pc}
   1096c:	bl	108f4 <_start@@Base+0x60>
   10970:	mov	r3, #1
   10974:	strb	r3, [r4]
   10978:	pop	{r4, pc}
   1097c:	andeq	r2, r2, r4, rrx
   10980:	b	10920 <_start@@Base+0x8c>
   10984:	cmp	r0, #0
   10988:	add	r2, r0, r1, lsl #2
   1098c:	beq	1099c <_start@@Base+0x108>
   10990:	ldr	r3, [r0, #-4]
   10994:	cmp	r1, r3
   10998:	bcc	109b4 <_start@@Base+0x120>
   1099c:	push	{r4, lr}
   109a0:	mov	r2, #215	; 0xd7
   109a4:	ldr	r3, [pc, #20]	; 109c0 <_start@@Base+0x12c>
   109a8:	ldr	r1, [pc, #20]	; 109c4 <_start@@Base+0x130>
   109ac:	ldr	r0, [pc, #20]	; 109c8 <_start@@Base+0x134>
   109b0:	bl	1083c <__assert_fail@plt>
   109b4:	ldr	r0, [r0, r1, lsl #2]
   109b8:	add	r0, r2, r0
   109bc:	bx	lr
   109c0:	ldrdeq	r1, [r1], -r8
   109c4:	andeq	r1, r1, r8, ror #5
   109c8:	andeq	r1, r1, r6, asr #6
   109cc:	cmp	r0, #0
   109d0:	push	{r4, lr}
   109d4:	bne	109ec <_start@@Base+0x158>
   109d8:	ldr	r3, [pc, #84]	; 10a34 <_start@@Base+0x1a0>
   109dc:	mov	r2, #218	; 0xda
   109e0:	ldr	r1, [pc, #80]	; 10a38 <_start@@Base+0x1a4>
   109e4:	ldr	r0, [pc, #80]	; 10a3c <_start@@Base+0x1a8>
   109e8:	bl	1083c <__assert_fail@plt>
   109ec:	ldr	r3, [r0]
   109f0:	sub	r3, r0, r3
   109f4:	ldrh	r2, [r3]
   109f8:	cmp	r2, #5
   109fc:	bls	10a0c <_start@@Base+0x178>
   10a00:	ldrh	r2, [r3, #4]
   10a04:	cmp	r2, #0
   10a08:	bne	10a20 <_start@@Base+0x18c>
   10a0c:	ldr	r3, [pc, #32]	; 10a34 <_start@@Base+0x1a0>
   10a10:	mov	r2, #218	; 0xda
   10a14:	ldr	r1, [pc, #28]	; 10a38 <_start@@Base+0x1a4>
   10a18:	ldr	r0, [pc, #32]	; 10a40 <_start@@Base+0x1ac>
   10a1c:	b	109e8 <_start@@Base+0x154>
   10a20:	add	r3, r0, r2
   10a24:	ldr	r0, [r0, r2]
   10a28:	add	r0, r0, #4
   10a2c:	add	r0, r3, r0
   10a30:	pop	{r4, pc}
   10a34:	strdeq	r1, [r1], -r1	; <UNPREDICTABLE>
   10a38:	andeq	r1, r1, r8, ror #5
   10a3c:	andeq	r1, r1, sp, ror r3
   10a40:	andeq	r1, r1, r3, lsr #7
   10a44:	cmp	r0, #0
   10a48:	push	{r4, lr}
   10a4c:	bne	10a64 <_start@@Base+0x1d0>
   10a50:	ldr	r3, [pc, #84]	; 10aac <_start@@Base+0x218>
   10a54:	mov	r2, #195	; 0xc3
   10a58:	ldr	r1, [pc, #80]	; 10ab0 <_start@@Base+0x21c>
   10a5c:	ldr	r0, [pc, #80]	; 10ab4 <_start@@Base+0x220>
   10a60:	bl	1083c <__assert_fail@plt>
   10a64:	ldr	r3, [r0]
   10a68:	sub	r3, r0, r3
   10a6c:	ldrh	r2, [r3]
   10a70:	cmp	r2, #5
   10a74:	bls	10a84 <_start@@Base+0x1f0>
   10a78:	ldrh	r2, [r3, #4]
   10a7c:	cmp	r2, #0
   10a80:	bne	10a98 <_start@@Base+0x204>
   10a84:	ldr	r3, [pc, #32]	; 10aac <_start@@Base+0x218>
   10a88:	mov	r2, #195	; 0xc3
   10a8c:	ldr	r1, [pc, #28]	; 10ab0 <_start@@Base+0x21c>
   10a90:	ldr	r0, [pc, #32]	; 10ab8 <_start@@Base+0x224>
   10a94:	b	10a60 <_start@@Base+0x1cc>
   10a98:	add	r3, r0, r2
   10a9c:	ldr	r0, [r0, r2]
   10aa0:	add	r0, r0, #4
   10aa4:	add	r0, r3, r0
   10aa8:	pop	{r4, pc}
   10aac:	andeq	r1, r1, r8, lsl #4
   10ab0:	andeq	r1, r1, r8, ror #5
   10ab4:	andeq	r1, r1, sp, ror r3
   10ab8:	andeq	r1, r1, r3, lsr #7
   10abc:	cmp	r0, #0
   10ac0:	bne	10adc <_start@@Base+0x248>
   10ac4:	push	{r4, lr}
   10ac8:	mov	r2, #204	; 0xcc
   10acc:	ldr	r3, [pc, #60]	; 10b10 <_start@@Base+0x27c>
   10ad0:	ldr	r1, [pc, #60]	; 10b14 <_start@@Base+0x280>
   10ad4:	ldr	r0, [pc, #60]	; 10b18 <_start@@Base+0x284>
   10ad8:	bl	1083c <__assert_fail@plt>
   10adc:	ldr	r3, [r0]
   10ae0:	sub	r3, r0, r3
   10ae4:	ldrh	r2, [r3]
   10ae8:	cmp	r2, #13
   10aec:	bls	10b04 <_start@@Base+0x270>
   10af0:	ldrh	r3, [r3, #12]
   10af4:	cmp	r3, #0
   10af8:	beq	10b04 <_start@@Base+0x270>
   10afc:	ldrd	r0, [r0, r3]
   10b00:	bx	lr
   10b04:	mov	r0, #0
   10b08:	mov	r1, #0
   10b0c:	bx	lr
   10b10:	andeq	r1, r1, lr, lsl r2
   10b14:	andeq	r1, r1, r8, ror #5
   10b18:	andeq	r1, r1, sp, ror r3
   10b1c:	cmp	r0, #0
   10b20:	add	r2, r0, r1, lsl #2
   10b24:	beq	10b34 <_start@@Base+0x2a0>
   10b28:	ldr	r3, [r0, #-4]
   10b2c:	cmp	r1, r3
   10b30:	bcc	10b4c <_start@@Base+0x2b8>
   10b34:	push	{r4, lr}
   10b38:	mov	r2, #192	; 0xc0
   10b3c:	ldr	r3, [pc, #20]	; 10b58 <_start@@Base+0x2c4>
   10b40:	ldr	r1, [pc, #20]	; 10b5c <_start@@Base+0x2c8>
   10b44:	ldr	r0, [pc, #20]	; 10b60 <_start@@Base+0x2cc>
   10b48:	bl	1083c <__assert_fail@plt>
   10b4c:	ldr	r0, [r0, r1, lsl #2]
   10b50:	add	r0, r2, r0
   10b54:	bx	lr
   10b58:	andeq	r1, r1, pc, lsr r2
   10b5c:	andeq	r1, r1, r8, ror #5
   10b60:	andeq	r1, r1, r6, asr #6
   10b64:	push	{r4, r5, r6, r7, r8, lr}
   10b68:	subs	r6, r0, #0
   10b6c:	beq	10b88 <_start@@Base+0x2f4>
   10b70:	ldr	r5, [r6, #-4]
   10b74:	cmp	r5, #0
   10b78:	movne	r8, r1
   10b7c:	subne	r5, r5, #1
   10b80:	movne	r4, #0
   10b84:	bne	10bbc <_start@@Base+0x328>
   10b88:	mvn	r4, #0
   10b8c:	b	10be8 <_start@@Base+0x354>
   10b90:	sub	r7, r5, r4
   10b94:	mov	r0, r6
   10b98:	add	r7, r4, r7, lsr #1
   10b9c:	mov	r1, r7
   10ba0:	bl	10b1c <_start@@Base+0x288>
   10ba4:	bl	10a44 <_start@@Base+0x1b0>
   10ba8:	mov	r1, r8
   10bac:	bl	1077c <strcmp@plt>
   10bb0:	cmp	r0, #0
   10bb4:	addlt	r4, r7, #1
   10bb8:	movge	r5, r7
   10bbc:	cmp	r5, r4
   10bc0:	bhi	10b90 <_start@@Base+0x2fc>
   10bc4:	bne	10b88 <_start@@Base+0x2f4>
   10bc8:	mov	r1, r4
   10bcc:	mov	r0, r6
   10bd0:	bl	10b1c <_start@@Base+0x288>
   10bd4:	bl	10a44 <_start@@Base+0x1b0>
   10bd8:	mov	r1, r8
   10bdc:	bl	1077c <strcmp@plt>
   10be0:	cmp	r0, #0
   10be4:	mvnne	r4, #0
   10be8:	mov	r0, r4
   10bec:	pop	{r4, r5, r6, r7, r8, pc}
   10bf0:	cmp	r0, #0
   10bf4:	push	{r4, lr}
   10bf8:	bne	10c10 <_start@@Base+0x37c>
   10bfc:	ldr	r3, [pc, #80]	; 10c54 <_start@@Base+0x3c0>
   10c00:	mov	r2, #201	; 0xc9
   10c04:	ldr	r1, [pc, #76]	; 10c58 <_start@@Base+0x3c4>
   10c08:	ldr	r0, [pc, #76]	; 10c5c <_start@@Base+0x3c8>
   10c0c:	bl	1083c <__assert_fail@plt>
   10c10:	ldr	r3, [r0]
   10c14:	sub	r3, r0, r3
   10c18:	ldrh	r2, [r3]
   10c1c:	cmp	r2, #7
   10c20:	bls	10c30 <_start@@Base+0x39c>
   10c24:	ldrh	r2, [r3, #6]
   10c28:	cmp	r2, #0
   10c2c:	bne	10c44 <_start@@Base+0x3b0>
   10c30:	ldr	r3, [pc, #28]	; 10c54 <_start@@Base+0x3c0>
   10c34:	mov	r2, #201	; 0xc9
   10c38:	ldr	r1, [pc, #24]	; 10c58 <_start@@Base+0x3c4>
   10c3c:	ldr	r0, [pc, #28]	; 10c60 <_start@@Base+0x3cc>
   10c40:	b	10c0c <_start@@Base+0x378>
   10c44:	add	r3, r0, r2
   10c48:	ldr	r0, [r0, r2]
   10c4c:	add	r0, r3, r0
   10c50:	pop	{r4, pc}
   10c54:	andeq	r1, r1, r7, asr r2
   10c58:	andeq	r1, r1, r8, ror #5
   10c5c:	andeq	r1, r1, sp, ror r3
   10c60:	andeq	r1, r1, r3, lsr #7
   10c64:	subs	r2, r0, #0
   10c68:	bne	10c84 <_start@@Base+0x3f0>
   10c6c:	push	{r4, lr}
   10c70:	mov	r2, #147	; 0x93
   10c74:	ldr	r3, [pc, #52]	; 10cb0 <_start@@Base+0x41c>
   10c78:	ldr	r1, [pc, #52]	; 10cb4 <_start@@Base+0x420>
   10c7c:	ldr	r0, [pc, #52]	; 10cb8 <_start@@Base+0x424>
   10c80:	bl	1083c <__assert_fail@plt>
   10c84:	ldr	r3, [r2]
   10c88:	sub	r3, r2, r3
   10c8c:	ldrh	r1, [r3]
   10c90:	cmp	r1, #5
   10c94:	bls	10ca8 <_start@@Base+0x414>
   10c98:	ldrh	r0, [r3, #4]
   10c9c:	cmp	r0, #0
   10ca0:	ldrsbne	r0, [r2, r0]
   10ca4:	bx	lr
   10ca8:	mov	r0, #0
   10cac:	bx	lr
   10cb0:	andeq	r1, r1, sp, ror #4
   10cb4:	andeq	r1, r1, r8, ror #5
   10cb8:	andeq	r1, r1, sp, ror r3
   10cbc:	cmp	r0, #0
   10cc0:	bne	10cdc <_start@@Base+0x448>
   10cc4:	push	{r4, lr}
   10cc8:	mov	r2, #149	; 0x95
   10ccc:	ldr	r3, [pc, #56]	; 10d0c <_start@@Base+0x478>
   10cd0:	ldr	r1, [pc, #56]	; 10d10 <_start@@Base+0x47c>
   10cd4:	ldr	r0, [pc, #56]	; 10d14 <_start@@Base+0x480>
   10cd8:	bl	1083c <__assert_fail@plt>
   10cdc:	ldr	r3, [r0]
   10ce0:	sub	r3, r0, r3
   10ce4:	ldrh	r2, [r3]
   10ce8:	cmp	r2, #9
   10cec:	bls	10d04 <_start@@Base+0x470>
   10cf0:	ldrh	r3, [r3, #8]
   10cf4:	cmp	r3, #0
   10cf8:	beq	10d04 <_start@@Base+0x470>
   10cfc:	ldr	r0, [r0, r3]
   10d00:	bx	lr
   10d04:	mvn	r0, #0
   10d08:	bx	lr
   10d0c:	andeq	r1, r1, r7, lsl #5
   10d10:	andeq	r1, r1, r8, ror #5
   10d14:	andeq	r1, r1, sp, ror r3

00010d18 <test_schema@@Base>:
   10d18:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10d1c:	ldr	r1, [pc, #984]	; 110fc <test_schema@@Base+0x3e4>
   10d20:	bl	10794 <fopen@plt>
   10d24:	subs	r4, r0, #0
   10d28:	beq	10d90 <test_schema@@Base+0x78>
   10d2c:	mov	r2, #2
   10d30:	mov	r1, #0
   10d34:	bl	10818 <fseek@plt>
   10d38:	mov	r0, r4
   10d3c:	bl	107ac <ftell@plt>
   10d40:	movw	r3, #10000	; 0x2710
   10d44:	mov	r8, r0
   10d48:	cmp	r0, r3
   10d4c:	bhi	10d74 <test_schema@@Base+0x5c>
   10d50:	mov	r0, r4
   10d54:	bl	107b8 <rewind@plt>
   10d58:	cmp	r8, #0
   10d5c:	movne	r0, r8
   10d60:	moveq	r0, #1
   10d64:	bl	107dc <malloc@plt>
   10d68:	subs	r5, r0, #0
   10d6c:	movne	r7, #0
   10d70:	bne	10dac <test_schema@@Base+0x94>
   10d74:	mov	r5, #0
   10d78:	mov	r0, r4
   10d7c:	bl	1080c <fclose@plt>
   10d80:	cmp	r5, #0
   10d84:	beq	10d90 <test_schema@@Base+0x78>
   10d88:	mov	r0, r5
   10d8c:	bl	107a0 <free@plt>
   10d90:	ldr	r0, [pc, #872]	; 11100 <test_schema@@Base+0x3e8>
   10d94:	mvn	r4, #0
   10d98:	bl	107d0 <puts@plt>
   10d9c:	mov	r0, r4
   10da0:	add	sp, sp, #12
   10da4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10da8:	add	r7, r7, r6
   10dac:	mov	r3, r4
   10db0:	sub	r2, r8, r7
   10db4:	mov	r1, #1
   10db8:	add	r0, r5, r7
   10dbc:	bl	107c4 <fread@plt>
   10dc0:	subs	r6, r0, #0
   10dc4:	bne	10da8 <test_schema@@Base+0x90>
   10dc8:	cmp	r8, r7
   10dcc:	bne	10d78 <test_schema@@Base+0x60>
   10dd0:	mov	r0, r4
   10dd4:	bl	1080c <fclose@plt>
   10dd8:	ldr	r3, [pc, #804]	; 11104 <test_schema@@Base+0x3ec>
   10ddc:	ldr	r2, [r5, #4]
   10de0:	str	r3, [sp, #4]
   10de4:	cmp	r2, r3
   10de8:	bne	10df8 <test_schema@@Base+0xe0>
   10dec:	ldr	r3, [r5]
   10df0:	adds	r2, r5, r3
   10df4:	bne	10e0c <test_schema@@Base+0xf4>
   10df8:	ldr	r3, [pc, #776]	; 11108 <test_schema@@Base+0x3f0>
   10dfc:	mov	r2, #237	; 0xed
   10e00:	ldr	r1, [pc, #772]	; 1110c <test_schema@@Base+0x3f4>
   10e04:	ldr	r0, [pc, #772]	; 11110 <test_schema@@Base+0x3f8>
   10e08:	b	10e84 <test_schema@@Base+0x16c>
   10e0c:	ldr	r3, [r5, r3]
   10e10:	sub	r3, r2, r3
   10e14:	ldrh	r1, [r3]
   10e18:	cmp	r1, #5
   10e1c:	bls	10e74 <test_schema@@Base+0x15c>
   10e20:	ldrh	r3, [r3, #4]
   10e24:	cmp	r3, #0
   10e28:	beq	10e74 <test_schema@@Base+0x15c>
   10e2c:	add	r7, r2, r3
   10e30:	ldr	r3, [r2, r3]
   10e34:	mov	r8, r6
   10e38:	ldr	r9, [pc, #724]	; 11114 <test_schema@@Base+0x3fc>
   10e3c:	add	r3, r3, #4
   10e40:	add	r7, r7, r3
   10e44:	cmp	r7, #0
   10e48:	beq	10e68 <test_schema@@Base+0x150>
   10e4c:	ldr	r4, [r7, #-4]
   10e50:	cmp	r8, r4
   10e54:	bcc	10e88 <test_schema@@Base+0x170>
   10e58:	cmp	r4, #0
   10e5c:	subne	r4, r4, #1
   10e60:	ldrne	r9, [pc, #688]	; 11118 <test_schema@@Base+0x400>
   10e64:	bne	10edc <test_schema@@Base+0x1c4>
   10e68:	ldr	r0, [pc, #684]	; 1111c <test_schema@@Base+0x404>
   10e6c:	bl	107d0 <puts@plt>
   10e70:	b	10fec <test_schema@@Base+0x2d4>
   10e74:	ldr	r3, [pc, #652]	; 11108 <test_schema@@Base+0x3f0>
   10e78:	mov	r2, #237	; 0xed
   10e7c:	ldr	r1, [pc, #648]	; 1110c <test_schema@@Base+0x3f4>
   10e80:	ldr	r0, [pc, #664]	; 11120 <test_schema@@Base+0x408>
   10e84:	bl	1083c <__assert_fail@plt>
   10e88:	mov	r1, r8
   10e8c:	mov	r0, r7
   10e90:	bl	10984 <_start@@Base+0xf0>
   10e94:	bl	109cc <_start@@Base+0x138>
   10e98:	mov	r2, r0
   10e9c:	mov	r1, r8
   10ea0:	mov	r0, r9
   10ea4:	add	r8, r8, #1
   10ea8:	bl	10788 <printf@plt>
   10eac:	b	10e44 <test_schema@@Base+0x12c>
   10eb0:	sub	r8, r4, r6
   10eb4:	mov	r0, r7
   10eb8:	add	r8, r6, r8, lsr #1
   10ebc:	mov	r1, r8
   10ec0:	bl	10984 <_start@@Base+0xf0>
   10ec4:	bl	109cc <_start@@Base+0x138>
   10ec8:	mov	r1, r9
   10ecc:	bl	1077c <strcmp@plt>
   10ed0:	cmp	r0, #0
   10ed4:	addlt	r6, r8, #1
   10ed8:	movge	r4, r8
   10edc:	cmp	r4, r6
   10ee0:	bhi	10eb0 <test_schema@@Base+0x198>
   10ee4:	bne	10e68 <test_schema@@Base+0x150>
   10ee8:	mov	r1, r4
   10eec:	mov	r0, r7
   10ef0:	bl	10984 <_start@@Base+0xf0>
   10ef4:	mov	r8, r0
   10ef8:	bl	109cc <_start@@Base+0x138>
   10efc:	ldr	r1, [pc, #532]	; 11118 <test_schema@@Base+0x400>
   10f00:	bl	1077c <strcmp@plt>
   10f04:	cmn	r4, #1
   10f08:	movne	r4, #0
   10f0c:	moveq	r4, #1
   10f10:	cmp	r0, #0
   10f14:	movne	r4, #1
   10f18:	cmp	r4, #0
   10f1c:	bne	10e68 <test_schema@@Base+0x150>
   10f20:	cmp	r8, #0
   10f24:	ldreq	r3, [pc, #504]	; 11124 <test_schema@@Base+0x40c>
   10f28:	moveq	r2, #224	; 0xe0
   10f2c:	beq	10e00 <test_schema@@Base+0xe8>
   10f30:	ldr	r3, [r8]
   10f34:	sub	r3, r8, r3
   10f38:	ldrh	r2, [r3]
   10f3c:	cmp	r2, #7
   10f40:	bls	10f8c <test_schema@@Base+0x274>
   10f44:	ldrh	r3, [r3, #6]
   10f48:	cmp	r3, #0
   10f4c:	beq	10f8c <test_schema@@Base+0x274>
   10f50:	add	r7, r8, r3
   10f54:	ldr	r3, [r8, r3]
   10f58:	ldr	r1, [pc, #456]	; 11128 <test_schema@@Base+0x410>
   10f5c:	add	r3, r3, #4
   10f60:	add	r7, r7, r3
   10f64:	mov	r0, r7
   10f68:	bl	10b64 <_start@@Base+0x2d0>
   10f6c:	cmn	r0, #1
   10f70:	mov	r4, r0
   10f74:	bne	10f98 <test_schema@@Base+0x280>
   10f78:	ldr	r0, [pc, #428]	; 1112c <test_schema@@Base+0x414>
   10f7c:	bl	107d0 <puts@plt>
   10f80:	mov	r0, r5
   10f84:	bl	107a0 <free@plt>
   10f88:	b	10d9c <test_schema@@Base+0x84>
   10f8c:	ldr	r3, [pc, #400]	; 11124 <test_schema@@Base+0x40c>
   10f90:	mov	r2, #224	; 0xe0
   10f94:	b	10e7c <test_schema@@Base+0x164>
   10f98:	mov	r1, r0
   10f9c:	mov	r0, r7
   10fa0:	bl	10b1c <_start@@Base+0x288>
   10fa4:	mov	r4, r0
   10fa8:	bl	10abc <_start@@Base+0x228>
   10fac:	cmp	r1, #0
   10fb0:	cmpeq	r0, #150	; 0x96
   10fb4:	beq	10ff4 <test_schema@@Base+0x2dc>
   10fb8:	ldr	r0, [pc, #368]	; 11130 <test_schema@@Base+0x418>
   10fbc:	bl	107d0 <puts@plt>
   10fc0:	mov	r0, r4
   10fc4:	bl	10a44 <_start@@Base+0x1b0>
   10fc8:	mov	r1, r0
   10fcc:	ldr	r0, [pc, #352]	; 11134 <test_schema@@Base+0x41c>
   10fd0:	bl	10788 <printf@plt>
   10fd4:	mov	r0, r4
   10fd8:	bl	10abc <_start@@Base+0x228>
   10fdc:	mov	r2, r0
   10fe0:	mov	r3, r1
   10fe4:	ldr	r0, [pc, #332]	; 11138 <test_schema@@Base+0x420>
   10fe8:	bl	10788 <printf@plt>
   10fec:	mvn	r4, #0
   10ff0:	b	10f80 <test_schema@@Base+0x268>
   10ff4:	mov	r0, r4
   10ff8:	bl	10bf0 <_start@@Base+0x35c>
   10ffc:	bl	10c64 <_start@@Base+0x3d0>
   11000:	cmp	r0, #5
   11004:	ldrne	r0, [pc, #304]	; 1113c <test_schema@@Base+0x424>
   11008:	bne	10e6c <test_schema@@Base+0x154>
   1100c:	mov	r0, r7
   11010:	ldr	r1, [pc, #296]	; 11140 <test_schema@@Base+0x428>
   11014:	bl	10b64 <_start@@Base+0x2d0>
   11018:	cmn	r0, #1
   1101c:	mov	r1, r0
   11020:	ldreq	r0, [pc, #284]	; 11144 <test_schema@@Base+0x42c>
   11024:	beq	10e6c <test_schema@@Base+0x154>
   11028:	mov	r0, r7
   1102c:	bl	10b1c <_start@@Base+0x288>
   11030:	bl	10bf0 <_start@@Base+0x35c>
   11034:	mov	r4, r0
   11038:	bl	10c64 <_start@@Base+0x3d0>
   1103c:	cmp	r0, #15
   11040:	ldrne	r0, [pc, #256]	; 11148 <test_schema@@Base+0x430>
   11044:	bne	10e6c <test_schema@@Base+0x154>
   11048:	mov	r0, r4
   1104c:	bl	10cbc <_start@@Base+0x428>
   11050:	cmp	r0, r6
   11054:	ldrne	r0, [pc, #240]	; 1114c <test_schema@@Base+0x434>
   11058:	bne	10e6c <test_schema@@Base+0x154>
   1105c:	mov	r0, r7
   11060:	ldr	r1, [pc, #232]	; 11150 <test_schema@@Base+0x438>
   11064:	bl	10b64 <_start@@Base+0x2d0>
   11068:	cmn	r0, #1
   1106c:	mov	r4, r0
   11070:	ldreq	r0, [pc, #220]	; 11154 <test_schema@@Base+0x43c>
   11074:	beq	10f7c <test_schema@@Base+0x264>
   11078:	mov	r1, r0
   1107c:	mov	r0, r7
   11080:	bl	10b1c <_start@@Base+0x288>
   11084:	bl	10bf0 <_start@@Base+0x35c>
   11088:	mov	r4, r0
   1108c:	bl	10c64 <_start@@Base+0x3d0>
   11090:	cmp	r0, #14
   11094:	ldrne	r0, [pc, #188]	; 11158 <test_schema@@Base+0x440>
   11098:	bne	10e6c <test_schema@@Base+0x154>
   1109c:	cmp	r4, #0
   110a0:	ldreq	r3, [pc, #180]	; 1115c <test_schema@@Base+0x444>
   110a4:	moveq	r2, #148	; 0x94
   110a8:	beq	10e00 <test_schema@@Base+0xe8>
   110ac:	ldr	r3, [r4]
   110b0:	sub	r3, r4, r3
   110b4:	ldrh	r2, [r3]
   110b8:	cmp	r2, #7
   110bc:	bls	110d8 <test_schema@@Base+0x3c0>
   110c0:	ldrh	r3, [r3, #6]
   110c4:	cmp	r3, #0
   110c8:	beq	110d8 <test_schema@@Base+0x3c0>
   110cc:	ldrsb	r3, [r4, r3]
   110d0:	cmp	r3, #15
   110d4:	beq	110e0 <test_schema@@Base+0x3c8>
   110d8:	ldr	r0, [pc, #128]	; 11160 <test_schema@@Base+0x448>
   110dc:	b	10e6c <test_schema@@Base+0x154>
   110e0:	mov	r0, r4
   110e4:	bl	10cbc <_start@@Base+0x428>
   110e8:	cmp	r6, r0
   110ec:	moveq	r4, #0
   110f0:	beq	10f80 <test_schema@@Base+0x268>
   110f4:	ldr	r0, [pc, #104]	; 11164 <test_schema@@Base+0x44c>
   110f8:	b	10e6c <test_schema@@Base+0x154>
   110fc:	andeq	r1, r1, r4, asr #7
   11100:	andeq	r1, r1, r7, asr #7
   11104:	movtpl	r4, #9794	; 0x2642
   11108:	muleq	r1, sp, r2
   1110c:	andeq	r1, r1, r8, ror #5
   11110:	andeq	r1, r1, sp, ror r3
   11114:	andeq	r1, r1, r4, ror #7
   11118:	strdeq	r1, [r1], -r7
   1111c:	andeq	r1, r1, lr, lsl #8
   11120:	andeq	r1, r1, r3, lsr #7
   11124:			; <UNDEFINED> instruction: 0x000112b7
   11128:	andeq	r1, r1, pc, lsr #8
   1112c:	andeq	r1, r1, r4, lsr r4
   11130:	andeq	r1, r1, lr, asr r4
   11134:	andeq	r1, r1, r1, lsl #9
   11138:	muleq	r1, r1, r4
   1113c:	muleq	r1, r7, r4
   11140:			; <UNDEFINED> instruction: 0x000114b1
   11144:			; <UNDEFINED> instruction: 0x000114b7
   11148:	andeq	r1, r1, sp, asr #9
   1114c:	andeq	r1, r1, r4, ror #9
   11150:	strdeq	r1, [r1], -fp
   11154:	andeq	r1, r1, sp, lsl #10
   11158:	andeq	r1, r1, r7, lsr #10
   1115c:	ldrdeq	r1, [r1], -r0
   11160:	andeq	r1, r1, sp, asr #10
   11164:	andeq	r1, r1, fp, ror r5

00011168 <__libc_csu_init@@Base>:
   11168:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1116c:	mov	r7, r0
   11170:	ldr	r6, [pc, #72]	; 111c0 <__libc_csu_init@@Base+0x58>
   11174:	ldr	r5, [pc, #72]	; 111c4 <__libc_csu_init@@Base+0x5c>
   11178:	add	r6, pc, r6
   1117c:	add	r5, pc, r5
   11180:	sub	r6, r6, r5
   11184:	mov	r8, r1
   11188:	mov	r9, r2
   1118c:	bl	1075c <strcmp@plt-0x20>
   11190:	asrs	r6, r6, #2
   11194:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11198:	mov	r4, #0
   1119c:	add	r4, r4, #1
   111a0:	ldr	r3, [r5], #4
   111a4:	mov	r2, r9
   111a8:	mov	r1, r8
   111ac:	mov	r0, r7
   111b0:	blx	r3
   111b4:	cmp	r6, r4
   111b8:	bne	1119c <__libc_csu_init@@Base+0x34>
   111bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   111c0:	muleq	r1, r4, sp
   111c4:	andeq	r0, r1, ip, lsl #27

000111c8 <__libc_csu_fini@@Base>:
   111c8:	bx	lr

Disassembly of section .fini:

000111cc <.fini>:
   111cc:	push	{r3, lr}
   111d0:	pop	{r3, pc}
