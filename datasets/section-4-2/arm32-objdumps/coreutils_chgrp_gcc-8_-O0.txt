
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010f94 <.init>:
   10f94:	push	{r3, lr}
   10f98:	bl	11344 <__assert_fail@plt+0x48>
   10f9c:	pop	{r3, pc}

Disassembly of section .plt:

00010fa0 <fstatfs64@plt-0x14>:
   10fa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fa4:	ldr	lr, [pc, #4]	; 10fb0 <fstatfs64@plt-0x4>
   10fa8:	add	lr, pc, lr
   10fac:	ldr	pc, [lr, #8]!
   10fb0:	andeq	r0, r2, r0, asr r0

00010fb4 <fstatfs64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #32, 20	; 0x20000
   10fbc:	ldr	pc, [ip, #80]!	; 0x50

00010fc0 <calloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #32, 20	; 0x20000
   10fc8:	ldr	pc, [ip, #72]!	; 0x48

00010fcc <endgrent@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #32, 20	; 0x20000
   10fd4:	ldr	pc, [ip, #64]!	; 0x40

00010fd8 <fputs_unlocked@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #32, 20	; 0x20000
   10fe0:	ldr	pc, [ip, #56]!	; 0x38

00010fe4 <raise@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #32, 20	; 0x20000
   10fec:	ldr	pc, [ip, #48]!	; 0x30

00010ff0 <strcmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #32, 20	; 0x20000
   10ff8:	ldr	pc, [ip, #40]!	; 0x28

00010ffc <getpwuid@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #32, 20	; 0x20000
   11004:	ldr	pc, [ip, #32]!

00011008 <printf@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #32, 20	; 0x20000
   11010:	ldr	pc, [ip, #24]!

00011014 <fflush@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #32, 20	; 0x20000
   1101c:	ldr	pc, [ip, #16]!

00011020 <memmove@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #32, 20	; 0x20000
   11028:	ldr	pc, [ip, #8]!

0001102c <free@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #32, 20	; 0x20000
   11034:	ldr	pc, [ip, #0]!

00011038 <_exit@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #126976	; 0x1f000
   11040:	ldr	pc, [ip, #4088]!	; 0xff8

00011044 <memcpy@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #126976	; 0x1f000
   1104c:	ldr	pc, [ip, #4080]!	; 0xff0

00011050 <mbsinit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #126976	; 0x1f000
   11058:	ldr	pc, [ip, #4072]!	; 0xfe8

0001105c <memcmp@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #126976	; 0x1f000
   11064:	ldr	pc, [ip, #4064]!	; 0xfe0

00011068 <stpcpy@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #126976	; 0x1f000
   11070:	ldr	pc, [ip, #4056]!	; 0xfd8

00011074 <fputc_unlocked@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #126976	; 0x1f000
   1107c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011080 <realloc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #126976	; 0x1f000
   11088:	ldr	pc, [ip, #4040]!	; 0xfc8

0001108c <textdomain@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #126976	; 0x1f000
   11094:	ldr	pc, [ip, #4032]!	; 0xfc0

00011098 <__fxstatat64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #126976	; 0x1f000
   110a0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110a4 <iswprint@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #126976	; 0x1f000
   110ac:	ldr	pc, [ip, #4016]!	; 0xfb0

000110b0 <__fxstat64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #126976	; 0x1f000
   110b8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110bc <fwrite@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #126976	; 0x1f000
   110c4:	ldr	pc, [ip, #4000]!	; 0xfa0

000110c8 <lseek64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #126976	; 0x1f000
   110d0:	ldr	pc, [ip, #3992]!	; 0xf98

000110d4 <__ctype_get_mb_cur_max@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #126976	; 0x1f000
   110dc:	ldr	pc, [ip, #3984]!	; 0xf90

000110e0 <strcpy@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #126976	; 0x1f000
   110e8:	ldr	pc, [ip, #3976]!	; 0xf88

000110ec <__fpending@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #126976	; 0x1f000
   110f4:	ldr	pc, [ip, #3968]!	; 0xf80

000110f8 <ferror_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #126976	; 0x1f000
   11100:	ldr	pc, [ip, #3960]!	; 0xf78

00011104 <mbrtowc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #126976	; 0x1f000
   1110c:	ldr	pc, [ip, #3952]!	; 0xf70

00011110 <error@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #126976	; 0x1f000
   11118:	ldr	pc, [ip, #3944]!	; 0xf68

0001111c <open64@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #126976	; 0x1f000
   11124:	ldr	pc, [ip, #3936]!	; 0xf60

00011128 <malloc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #126976	; 0x1f000
   11130:	ldr	pc, [ip, #3928]!	; 0xf58

00011134 <__libc_start_main@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #126976	; 0x1f000
   1113c:	ldr	pc, [ip, #3920]!	; 0xf50

00011140 <__freading@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #126976	; 0x1f000
   11148:	ldr	pc, [ip, #3912]!	; 0xf48

0001114c <__gmon_start__@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #126976	; 0x1f000
   11154:	ldr	pc, [ip, #3904]!	; 0xf40

00011158 <getopt_long@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #126976	; 0x1f000
   11160:	ldr	pc, [ip, #3896]!	; 0xf38

00011164 <__ctype_b_loc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #126976	; 0x1f000
   1116c:	ldr	pc, [ip, #3888]!	; 0xf30

00011170 <exit@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #126976	; 0x1f000
   11178:	ldr	pc, [ip, #3880]!	; 0xf28

0001117c <gettext@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #126976	; 0x1f000
   11184:	ldr	pc, [ip, #3872]!	; 0xf20

00011188 <strlen@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #126976	; 0x1f000
   11190:	ldr	pc, [ip, #3864]!	; 0xf18

00011194 <strchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #126976	; 0x1f000
   1119c:	ldr	pc, [ip, #3856]!	; 0xf10

000111a0 <openat64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #126976	; 0x1f000
   111a8:	ldr	pc, [ip, #3848]!	; 0xf08

000111ac <fchown@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #126976	; 0x1f000
   111b4:	ldr	pc, [ip, #3840]!	; 0xf00

000111b8 <fprintf@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #126976	; 0x1f000
   111c0:	ldr	pc, [ip, #3832]!	; 0xef8

000111c4 <__errno_location@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #126976	; 0x1f000
   111cc:	ldr	pc, [ip, #3824]!	; 0xef0

000111d0 <__cxa_atexit@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #126976	; 0x1f000
   111d8:	ldr	pc, [ip, #3816]!	; 0xee8

000111dc <memset@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #126976	; 0x1f000
   111e4:	ldr	pc, [ip, #3808]!	; 0xee0

000111e8 <fileno@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #126976	; 0x1f000
   111f0:	ldr	pc, [ip, #3800]!	; 0xed8

000111f4 <strtoumax@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #126976	; 0x1f000
   111fc:	ldr	pc, [ip, #3792]!	; 0xed0

00011200 <fclose@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #126976	; 0x1f000
   11208:	ldr	pc, [ip, #3784]!	; 0xec8

0001120c <fseeko64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #126976	; 0x1f000
   11214:	ldr	pc, [ip, #3776]!	; 0xec0

00011218 <fcntl64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #126976	; 0x1f000
   11220:	ldr	pc, [ip, #3768]!	; 0xeb8

00011224 <setlocale@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #126976	; 0x1f000
   1122c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011230 <strrchr@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #126976	; 0x1f000
   11238:	ldr	pc, [ip, #3752]!	; 0xea8

0001123c <nl_langinfo@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #126976	; 0x1f000
   11244:	ldr	pc, [ip, #3744]!	; 0xea0

00011248 <readdir64@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #126976	; 0x1f000
   11250:	ldr	pc, [ip, #3736]!	; 0xe98

00011254 <fdopendir@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #126976	; 0x1f000
   1125c:	ldr	pc, [ip, #3728]!	; 0xe90

00011260 <dirfd@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #126976	; 0x1f000
   11268:	ldr	pc, [ip, #3720]!	; 0xe88

0001126c <fchdir@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #126976	; 0x1f000
   11274:	ldr	pc, [ip, #3712]!	; 0xe80

00011278 <qsort@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #126976	; 0x1f000
   11280:	ldr	pc, [ip, #3704]!	; 0xe78

00011284 <fchownat@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #126976	; 0x1f000
   1128c:	ldr	pc, [ip, #3696]!	; 0xe70

00011290 <bindtextdomain@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #126976	; 0x1f000
   11298:	ldr	pc, [ip, #3688]!	; 0xe68

0001129c <__xstat64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #126976	; 0x1f000
   112a4:	ldr	pc, [ip, #3680]!	; 0xe60

000112a8 <strncmp@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #126976	; 0x1f000
   112b0:	ldr	pc, [ip, #3672]!	; 0xe58

000112b4 <abort@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #126976	; 0x1f000
   112bc:	ldr	pc, [ip, #3664]!	; 0xe50

000112c0 <close@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #126976	; 0x1f000
   112c8:	ldr	pc, [ip, #3656]!	; 0xe48

000112cc <__lxstat64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #126976	; 0x1f000
   112d4:	ldr	pc, [ip, #3648]!	; 0xe40

000112d8 <closedir@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #126976	; 0x1f000
   112e0:	ldr	pc, [ip, #3640]!	; 0xe38

000112e4 <getgrgid@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #126976	; 0x1f000
   112ec:	ldr	pc, [ip, #3632]!	; 0xe30

000112f0 <getgrnam@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #126976	; 0x1f000
   112f8:	ldr	pc, [ip, #3624]!	; 0xe28

000112fc <__assert_fail@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #126976	; 0x1f000
   11304:	ldr	pc, [ip, #3616]!	; 0xe20

Disassembly of section .text:

00011308 <.text>:
   11308:	mov	fp, #0
   1130c:	mov	lr, #0
   11310:	pop	{r1}		; (ldr r1, [sp], #4)
   11314:	mov	r2, sp
   11318:	push	{r2}		; (str r2, [sp, #-4]!)
   1131c:	push	{r0}		; (str r0, [sp, #-4]!)
   11320:	ldr	ip, [pc, #16]	; 11338 <__assert_fail@plt+0x3c>
   11324:	push	{ip}		; (str ip, [sp, #-4]!)
   11328:	ldr	r0, [pc, #12]	; 1133c <__assert_fail@plt+0x40>
   1132c:	ldr	r3, [pc, #12]	; 11340 <__assert_fail@plt+0x44>
   11330:	bl	11134 <__libc_start_main@plt>
   11334:	bl	112b4 <abort@plt>
   11338:	strdeq	lr, [r1], -r0
   1133c:	andeq	r1, r1, ip, lsl #18
   11340:	muleq	r1, r0, fp
   11344:	ldr	r3, [pc, #20]	; 11360 <__assert_fail@plt+0x64>
   11348:	ldr	r2, [pc, #20]	; 11364 <__assert_fail@plt+0x68>
   1134c:	add	r3, pc, r3
   11350:	ldr	r2, [r3, r2]
   11354:	cmp	r2, #0
   11358:	bxeq	lr
   1135c:	b	1114c <__gmon_start__@plt>
   11360:	andeq	pc, r1, ip, lsr #25
   11364:	andeq	r0, r0, r8, lsr #2
   11368:	ldr	r0, [pc, #24]	; 11388 <__assert_fail@plt+0x8c>
   1136c:	ldr	r3, [pc, #24]	; 1138c <__assert_fail@plt+0x90>
   11370:	cmp	r3, r0
   11374:	bxeq	lr
   11378:	ldr	r3, [pc, #16]	; 11390 <__assert_fail@plt+0x94>
   1137c:	cmp	r3, #0
   11380:	bxeq	lr
   11384:	bx	r3
   11388:	andeq	r1, r3, ip, ror r1
   1138c:	andeq	r1, r3, ip, ror r1
   11390:	andeq	r0, r0, r0
   11394:	ldr	r0, [pc, #36]	; 113c0 <__assert_fail@plt+0xc4>
   11398:	ldr	r1, [pc, #36]	; 113c4 <__assert_fail@plt+0xc8>
   1139c:	sub	r1, r1, r0
   113a0:	asr	r1, r1, #2
   113a4:	add	r1, r1, r1, lsr #31
   113a8:	asrs	r1, r1, #1
   113ac:	bxeq	lr
   113b0:	ldr	r3, [pc, #16]	; 113c8 <__assert_fail@plt+0xcc>
   113b4:	cmp	r3, #0
   113b8:	bxeq	lr
   113bc:	bx	r3
   113c0:	andeq	r1, r3, ip, ror r1
   113c4:	andeq	r1, r3, ip, ror r1
   113c8:	andeq	r0, r0, r0
   113cc:	push	{r4, lr}
   113d0:	ldr	r4, [pc, #24]	; 113f0 <__assert_fail@plt+0xf4>
   113d4:	ldrb	r3, [r4]
   113d8:	cmp	r3, #0
   113dc:	popne	{r4, pc}
   113e0:	bl	11368 <__assert_fail@plt+0x6c>
   113e4:	mov	r3, #1
   113e8:	strb	r3, [r4]
   113ec:	pop	{r4, pc}
   113f0:	muleq	r3, ip, r1
   113f4:	b	11394 <__assert_fail@plt+0x98>
   113f8:	str	fp, [sp, #-8]!
   113fc:	str	lr, [sp, #4]
   11400:	add	fp, sp, #4
   11404:	sub	sp, sp, #80	; 0x50
   11408:	str	r0, [fp, #-80]	; 0xffffffb0
   1140c:	movw	r2, #60900	; 0xede4
   11410:	movt	r2, #1
   11414:	sub	r3, fp, #72	; 0x48
   11418:	ldrd	r0, [r2]
   1141c:	strd	r0, [r3]
   11420:	ldrd	r0, [r2, #8]
   11424:	strd	r0, [r3, #8]
   11428:	ldrd	r0, [r2, #16]
   1142c:	strd	r0, [r3, #16]
   11430:	ldrd	r0, [r2, #24]
   11434:	strd	r0, [r3, #24]
   11438:	ldrd	r0, [r2, #32]
   1143c:	strd	r0, [r3, #32]
   11440:	ldrd	r0, [r2, #40]	; 0x28
   11444:	strd	r0, [r3, #40]	; 0x28
   11448:	ldrd	r0, [r2, #48]	; 0x30
   1144c:	strd	r0, [r3, #48]	; 0x30
   11450:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11454:	str	r3, [fp, #-8]
   11458:	sub	r3, fp, #72	; 0x48
   1145c:	str	r3, [fp, #-12]
   11460:	b	11470 <__assert_fail@plt+0x174>
   11464:	ldr	r3, [fp, #-12]
   11468:	add	r3, r3, #8
   1146c:	str	r3, [fp, #-12]
   11470:	ldr	r3, [fp, #-12]
   11474:	ldr	r3, [r3]
   11478:	cmp	r3, #0
   1147c:	beq	114a0 <__assert_fail@plt+0x1a4>
   11480:	ldr	r3, [fp, #-12]
   11484:	ldr	r3, [r3]
   11488:	mov	r1, r3
   1148c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11490:	bl	10ff0 <strcmp@plt>
   11494:	mov	r3, r0
   11498:	cmp	r3, #0
   1149c:	bne	11464 <__assert_fail@plt+0x168>
   114a0:	ldr	r3, [fp, #-12]
   114a4:	ldr	r3, [r3, #4]
   114a8:	cmp	r3, #0
   114ac:	beq	114bc <__assert_fail@plt+0x1c0>
   114b0:	ldr	r3, [fp, #-12]
   114b4:	ldr	r3, [r3, #4]
   114b8:	str	r3, [fp, #-8]
   114bc:	movw	r0, #60528	; 0xec70
   114c0:	movt	r0, #1
   114c4:	bl	1117c <gettext@plt>
   114c8:	mov	r3, r0
   114cc:	movw	r2, #60552	; 0xec88
   114d0:	movt	r2, #1
   114d4:	movw	r1, #60592	; 0xecb0
   114d8:	movt	r1, #1
   114dc:	mov	r0, r3
   114e0:	bl	11008 <printf@plt>
   114e4:	mov	r1, #0
   114e8:	mov	r0, #5
   114ec:	bl	11224 <setlocale@plt>
   114f0:	str	r0, [fp, #-16]
   114f4:	ldr	r3, [fp, #-16]
   114f8:	cmp	r3, #0
   114fc:	beq	11548 <__assert_fail@plt+0x24c>
   11500:	mov	r2, #3
   11504:	movw	r1, #60608	; 0xecc0
   11508:	movt	r1, #1
   1150c:	ldr	r0, [fp, #-16]
   11510:	bl	112a8 <strncmp@plt>
   11514:	mov	r3, r0
   11518:	cmp	r3, #0
   1151c:	beq	11548 <__assert_fail@plt+0x24c>
   11520:	movw	r0, #60612	; 0xecc4
   11524:	movt	r0, #1
   11528:	bl	1117c <gettext@plt>
   1152c:	mov	r2, r0
   11530:	movw	r3, #4500	; 0x1194
   11534:	movt	r3, #3
   11538:	ldr	r3, [r3]
   1153c:	mov	r1, r3
   11540:	mov	r0, r2
   11544:	bl	10fd8 <fputs_unlocked@plt>
   11548:	movw	r0, #60684	; 0xed0c
   1154c:	movt	r0, #1
   11550:	bl	1117c <gettext@plt>
   11554:	mov	r3, r0
   11558:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1155c:	movw	r1, #60552	; 0xec88
   11560:	movt	r1, #1
   11564:	mov	r0, r3
   11568:	bl	11008 <printf@plt>
   1156c:	movw	r0, #60712	; 0xed28
   11570:	movt	r0, #1
   11574:	bl	1117c <gettext@plt>
   11578:	ldr	r2, [fp, #-8]
   1157c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11580:	cmp	r2, r3
   11584:	bne	11594 <__assert_fail@plt+0x298>
   11588:	movw	r3, #60764	; 0xed5c
   1158c:	movt	r3, #1
   11590:	b	1159c <__assert_fail@plt+0x2a0>
   11594:	movw	r3, #60776	; 0xed68
   11598:	movt	r3, #1
   1159c:	mov	r2, r3
   115a0:	ldr	r1, [fp, #-8]
   115a4:	bl	11008 <printf@plt>
   115a8:	nop	{0}
   115ac:	sub	sp, fp, #4
   115b0:	ldr	fp, [sp]
   115b4:	add	sp, sp, #4
   115b8:	pop	{pc}		; (ldr pc, [sp], #4)
   115bc:	str	r4, [sp, #-12]!
   115c0:	str	fp, [sp, #4]
   115c4:	str	lr, [sp, #8]
   115c8:	add	fp, sp, #8
   115cc:	sub	sp, sp, #36	; 0x24
   115d0:	str	r0, [fp, #-32]	; 0xffffffe0
   115d4:	mvn	r3, #0
   115d8:	str	r3, [fp, #-16]
   115dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115e0:	ldrb	r3, [r3]
   115e4:	cmp	r3, #0
   115e8:	beq	11698 <__assert_fail@plt+0x39c>
   115ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   115f0:	bl	112f0 <getgrnam@plt>
   115f4:	str	r0, [fp, #-20]	; 0xffffffec
   115f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   115fc:	cmp	r3, #0
   11600:	beq	11614 <__assert_fail@plt+0x318>
   11604:	ldr	r3, [fp, #-20]	; 0xffffffec
   11608:	ldr	r3, [r3, #8]
   1160c:	str	r3, [fp, #-16]
   11610:	b	11694 <__assert_fail@plt+0x398>
   11614:	sub	r2, fp, #28
   11618:	movw	r3, #60776	; 0xed68
   1161c:	movt	r3, #1
   11620:	str	r3, [sp]
   11624:	mov	r3, r2
   11628:	mov	r2, #10
   1162c:	mov	r1, #0
   11630:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11634:	bl	1c900 <__assert_fail@plt+0xb604>
   11638:	mov	r3, r0
   1163c:	cmp	r3, #0
   11640:	bne	1165c <__assert_fail@plt+0x360>
   11644:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11648:	mvn	r0, #0
   1164c:	mov	r1, #0
   11650:	cmp	r3, r1
   11654:	cmpeq	r2, r0
   11658:	bls	11688 <__assert_fail@plt+0x38c>
   1165c:	movw	r0, #61300	; 0xef74
   11660:	movt	r0, #1
   11664:	bl	1117c <gettext@plt>
   11668:	mov	r4, r0
   1166c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11670:	bl	1b35c <__assert_fail@plt+0xa060>
   11674:	mov	r3, r0
   11678:	mov	r2, r4
   1167c:	mov	r1, #0
   11680:	mov	r0, #1
   11684:	bl	11110 <error@plt>
   11688:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1168c:	mov	r3, r2
   11690:	str	r3, [fp, #-16]
   11694:	bl	10fcc <endgrent@plt>
   11698:	ldr	r3, [fp, #-16]
   1169c:	mov	r0, r3
   116a0:	sub	sp, fp, #8
   116a4:	ldr	r4, [sp]
   116a8:	ldr	fp, [sp, #4]
   116ac:	add	sp, sp, #8
   116b0:	pop	{pc}		; (ldr pc, [sp], #4)
   116b4:	str	r4, [sp, #-12]!
   116b8:	str	fp, [sp, #4]
   116bc:	str	lr, [sp, #8]
   116c0:	add	fp, sp, #8
   116c4:	sub	sp, sp, #12
   116c8:	str	r0, [fp, #-16]
   116cc:	ldr	r3, [fp, #-16]
   116d0:	cmp	r3, #0
   116d4:	beq	11710 <__assert_fail@plt+0x414>
   116d8:	movw	r3, #4496	; 0x1190
   116dc:	movt	r3, #3
   116e0:	ldr	r4, [r3]
   116e4:	movw	r0, #61320	; 0xef88
   116e8:	movt	r0, #1
   116ec:	bl	1117c <gettext@plt>
   116f0:	mov	r1, r0
   116f4:	movw	r3, #4544	; 0x11c0
   116f8:	movt	r3, #3
   116fc:	ldr	r3, [r3]
   11700:	mov	r2, r3
   11704:	mov	r0, r4
   11708:	bl	111b8 <fprintf@plt>
   1170c:	b	11904 <__assert_fail@plt+0x608>
   11710:	movw	r0, #61360	; 0xefb0
   11714:	movt	r0, #1
   11718:	bl	1117c <gettext@plt>
   1171c:	movw	r3, #4544	; 0x11c0
   11720:	movt	r3, #3
   11724:	ldr	r1, [r3]
   11728:	movw	r3, #4544	; 0x11c0
   1172c:	movt	r3, #3
   11730:	ldr	r3, [r3]
   11734:	mov	r2, r3
   11738:	bl	11008 <printf@plt>
   1173c:	movw	r0, #61448	; 0xf008
   11740:	movt	r0, #1
   11744:	bl	1117c <gettext@plt>
   11748:	mov	r2, r0
   1174c:	movw	r3, #4500	; 0x1194
   11750:	movt	r3, #3
   11754:	ldr	r3, [r3]
   11758:	mov	r1, r3
   1175c:	mov	r0, r2
   11760:	bl	10fd8 <fputs_unlocked@plt>
   11764:	movw	r0, #61556	; 0xf074
   11768:	movt	r0, #1
   1176c:	bl	1117c <gettext@plt>
   11770:	mov	r2, r0
   11774:	movw	r3, #4500	; 0x1194
   11778:	movt	r3, #3
   1177c:	ldr	r3, [r3]
   11780:	mov	r1, r3
   11784:	mov	r0, r2
   11788:	bl	10fd8 <fputs_unlocked@plt>
   1178c:	movw	r0, #61760	; 0xf140
   11790:	movt	r0, #1
   11794:	bl	1117c <gettext@plt>
   11798:	mov	r2, r0
   1179c:	movw	r3, #4500	; 0x1194
   117a0:	movt	r3, #3
   117a4:	ldr	r3, [r3]
   117a8:	mov	r1, r3
   117ac:	mov	r0, r2
   117b0:	bl	10fd8 <fputs_unlocked@plt>
   117b4:	movw	r0, #61992	; 0xf228
   117b8:	movt	r0, #1
   117bc:	bl	1117c <gettext@plt>
   117c0:	mov	r2, r0
   117c4:	movw	r3, #4500	; 0x1194
   117c8:	movt	r3, #3
   117cc:	ldr	r3, [r3]
   117d0:	mov	r1, r3
   117d4:	mov	r0, r2
   117d8:	bl	10fd8 <fputs_unlocked@plt>
   117dc:	movw	r0, #62112	; 0xf2a0
   117e0:	movt	r0, #1
   117e4:	bl	1117c <gettext@plt>
   117e8:	mov	r2, r0
   117ec:	movw	r3, #4500	; 0x1194
   117f0:	movt	r3, #3
   117f4:	ldr	r3, [r3]
   117f8:	mov	r1, r3
   117fc:	mov	r0, r2
   11800:	bl	10fd8 <fputs_unlocked@plt>
   11804:	movw	r0, #62240	; 0xf320
   11808:	movt	r0, #1
   1180c:	bl	1117c <gettext@plt>
   11810:	mov	r2, r0
   11814:	movw	r3, #4500	; 0x1194
   11818:	movt	r3, #3
   1181c:	ldr	r3, [r3]
   11820:	mov	r1, r3
   11824:	mov	r0, r2
   11828:	bl	10fd8 <fputs_unlocked@plt>
   1182c:	movw	r0, #62348	; 0xf38c
   11830:	movt	r0, #1
   11834:	bl	1117c <gettext@plt>
   11838:	mov	r2, r0
   1183c:	movw	r3, #4500	; 0x1194
   11840:	movt	r3, #3
   11844:	ldr	r3, [r3]
   11848:	mov	r1, r3
   1184c:	mov	r0, r2
   11850:	bl	10fd8 <fputs_unlocked@plt>
   11854:	movw	r0, #62420	; 0xf3d4
   11858:	movt	r0, #1
   1185c:	bl	1117c <gettext@plt>
   11860:	mov	r2, r0
   11864:	movw	r3, #4500	; 0x1194
   11868:	movt	r3, #3
   1186c:	ldr	r3, [r3]
   11870:	mov	r1, r3
   11874:	mov	r0, r2
   11878:	bl	10fd8 <fputs_unlocked@plt>
   1187c:	movw	r0, #62888	; 0xf5a8
   11880:	movt	r0, #1
   11884:	bl	1117c <gettext@plt>
   11888:	mov	r2, r0
   1188c:	movw	r3, #4500	; 0x1194
   11890:	movt	r3, #3
   11894:	ldr	r3, [r3]
   11898:	mov	r1, r3
   1189c:	mov	r0, r2
   118a0:	bl	10fd8 <fputs_unlocked@plt>
   118a4:	movw	r0, #62936	; 0xf5d8
   118a8:	movt	r0, #1
   118ac:	bl	1117c <gettext@plt>
   118b0:	mov	r2, r0
   118b4:	movw	r3, #4500	; 0x1194
   118b8:	movt	r3, #3
   118bc:	ldr	r3, [r3]
   118c0:	mov	r1, r3
   118c4:	mov	r0, r2
   118c8:	bl	10fd8 <fputs_unlocked@plt>
   118cc:	movw	r0, #62992	; 0xf610
   118d0:	movt	r0, #1
   118d4:	bl	1117c <gettext@plt>
   118d8:	movw	r3, #4544	; 0x11c0
   118dc:	movt	r3, #3
   118e0:	ldr	r1, [r3]
   118e4:	movw	r3, #4544	; 0x11c0
   118e8:	movt	r3, #3
   118ec:	ldr	r3, [r3]
   118f0:	mov	r2, r3
   118f4:	bl	11008 <printf@plt>
   118f8:	movw	r0, #63128	; 0xf698
   118fc:	movt	r0, #1
   11900:	bl	113f8 <__assert_fail@plt+0xfc>
   11904:	ldr	r0, [fp, #-16]
   11908:	bl	11170 <exit@plt>
   1190c:	strd	r4, [sp, #-16]!
   11910:	str	fp, [sp, #8]
   11914:	str	lr, [sp, #12]
   11918:	add	fp, sp, #12
   1191c:	sub	sp, sp, #184	; 0xb8
   11920:	str	r0, [fp, #-176]	; 0xffffff50
   11924:	str	r1, [fp, #-180]	; 0xffffff4c
   11928:	mov	r3, #0
   1192c:	strb	r3, [fp, #-13]
   11930:	mov	r3, #16
   11934:	str	r3, [fp, #-24]	; 0xffffffe8
   11938:	mvn	r3, #0
   1193c:	str	r3, [fp, #-28]	; 0xffffffe4
   11940:	ldr	r3, [fp, #-180]	; 0xffffff4c
   11944:	ldr	r3, [r3]
   11948:	mov	r0, r3
   1194c:	bl	189fc <__assert_fail@plt+0x7700>
   11950:	movw	r1, #60776	; 0xed68
   11954:	movt	r1, #1
   11958:	mov	r0, #6
   1195c:	bl	11224 <setlocale@plt>
   11960:	movw	r1, #63136	; 0xf6a0
   11964:	movt	r1, #1
   11968:	movw	r0, #60800	; 0xed80
   1196c:	movt	r0, #1
   11970:	bl	11290 <bindtextdomain@plt>
   11974:	movw	r0, #60800	; 0xed80
   11978:	movt	r0, #1
   1197c:	bl	1108c <textdomain@plt>
   11980:	movw	r0, #13252	; 0x33c4
   11984:	movt	r0, #1
   11988:	bl	1ebf4 <__assert_fail@plt+0xd8f8>
   1198c:	sub	r3, fp, #64	; 0x40
   11990:	mov	r0, r3
   11994:	bl	11ee0 <__assert_fail@plt+0xbe4>
   11998:	b	11b8c <__assert_fail@plt+0x890>
   1199c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119a0:	cmp	r3, #99	; 0x63
   119a4:	beq	11b00 <__assert_fail@plt+0x804>
   119a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119ac:	cmp	r3, #99	; 0x63
   119b0:	bgt	11a10 <__assert_fail@plt+0x714>
   119b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119b8:	cmp	r3, #72	; 0x48
   119bc:	beq	11a84 <__assert_fail@plt+0x788>
   119c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119c4:	cmp	r3, #72	; 0x48
   119c8:	bgt	119e8 <__assert_fail@plt+0x6ec>
   119cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119d0:	cmn	r3, #3
   119d4:	beq	11b2c <__assert_fail@plt+0x830>
   119d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119dc:	cmn	r3, #2
   119e0:	beq	11b24 <__assert_fail@plt+0x828>
   119e4:	b	11b84 <__assert_fail@plt+0x888>
   119e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119ec:	cmp	r3, #80	; 0x50
   119f0:	beq	11a9c <__assert_fail@plt+0x7a0>
   119f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119f8:	cmp	r3, #82	; 0x52
   119fc:	beq	11af4 <__assert_fail@plt+0x7f8>
   11a00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a04:	cmp	r3, #76	; 0x4c
   11a08:	beq	11a90 <__assert_fail@plt+0x794>
   11a0c:	b	11b84 <__assert_fail@plt+0x888>
   11a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a14:	cmp	r3, #256	; 0x100
   11a18:	beq	11ab4 <__assert_fail@plt+0x7b8>
   11a1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a20:	cmp	r3, #256	; 0x100
   11a24:	bgt	11a50 <__assert_fail@plt+0x754>
   11a28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a2c:	cmp	r3, #104	; 0x68
   11a30:	beq	11aa8 <__assert_fail@plt+0x7ac>
   11a34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a38:	cmp	r3, #118	; 0x76
   11a3c:	beq	11b18 <__assert_fail@plt+0x81c>
   11a40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a44:	cmp	r3, #102	; 0x66
   11a48:	beq	11b0c <__assert_fail@plt+0x810>
   11a4c:	b	11b84 <__assert_fail@plt+0x888>
   11a50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a54:	movw	r2, #258	; 0x102
   11a58:	cmp	r3, r2
   11a5c:	beq	11acc <__assert_fail@plt+0x7d0>
   11a60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a64:	movw	r2, #258	; 0x102
   11a68:	cmp	r3, r2
   11a6c:	blt	11ac0 <__assert_fail@plt+0x7c4>
   11a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a74:	movw	r2, #259	; 0x103
   11a78:	cmp	r3, r2
   11a7c:	beq	11ad8 <__assert_fail@plt+0x7dc>
   11a80:	b	11b84 <__assert_fail@plt+0x888>
   11a84:	mov	r3, #17
   11a88:	str	r3, [fp, #-24]	; 0xffffffe8
   11a8c:	b	11b8c <__assert_fail@plt+0x890>
   11a90:	mov	r3, #2
   11a94:	str	r3, [fp, #-24]	; 0xffffffe8
   11a98:	b	11b8c <__assert_fail@plt+0x890>
   11a9c:	mov	r3, #16
   11aa0:	str	r3, [fp, #-24]	; 0xffffffe8
   11aa4:	b	11b8c <__assert_fail@plt+0x890>
   11aa8:	mov	r3, #0
   11aac:	str	r3, [fp, #-28]	; 0xffffffe4
   11ab0:	b	11b8c <__assert_fail@plt+0x890>
   11ab4:	mov	r3, #1
   11ab8:	str	r3, [fp, #-28]	; 0xffffffe4
   11abc:	b	11b8c <__assert_fail@plt+0x890>
   11ac0:	mov	r3, #0
   11ac4:	strb	r3, [fp, #-13]
   11ac8:	b	11b8c <__assert_fail@plt+0x890>
   11acc:	mov	r3, #1
   11ad0:	strb	r3, [fp, #-13]
   11ad4:	b	11b8c <__assert_fail@plt+0x890>
   11ad8:	movw	r3, #4504	; 0x1198
   11adc:	movt	r3, #3
   11ae0:	ldr	r2, [r3]
   11ae4:	movw	r3, #4512	; 0x11a0
   11ae8:	movt	r3, #3
   11aec:	str	r2, [r3]
   11af0:	b	11b8c <__assert_fail@plt+0x890>
   11af4:	mov	r3, #1
   11af8:	strb	r3, [fp, #-60]	; 0xffffffc4
   11afc:	b	11b8c <__assert_fail@plt+0x890>
   11b00:	mov	r3, #1
   11b04:	str	r3, [fp, #-64]	; 0xffffffc0
   11b08:	b	11b8c <__assert_fail@plt+0x890>
   11b0c:	mov	r3, #1
   11b10:	strb	r3, [fp, #-51]	; 0xffffffcd
   11b14:	b	11b8c <__assert_fail@plt+0x890>
   11b18:	mov	r3, #0
   11b1c:	str	r3, [fp, #-64]	; 0xffffffc0
   11b20:	b	11b8c <__assert_fail@plt+0x890>
   11b24:	mov	r0, #0
   11b28:	bl	116b4 <__assert_fail@plt+0x3b8>
   11b2c:	movw	r3, #4500	; 0x1194
   11b30:	movt	r3, #3
   11b34:	ldr	r0, [r3]
   11b38:	movw	r3, #4404	; 0x1134
   11b3c:	movt	r3, #3
   11b40:	ldr	r2, [r3]
   11b44:	mov	r3, #0
   11b48:	str	r3, [sp, #8]
   11b4c:	movw	r3, #63160	; 0xf6b8
   11b50:	movt	r3, #1
   11b54:	str	r3, [sp, #4]
   11b58:	movw	r3, #63176	; 0xf6c8
   11b5c:	movt	r3, #1
   11b60:	str	r3, [sp]
   11b64:	mov	r3, r2
   11b68:	movw	r2, #60592	; 0xecb0
   11b6c:	movt	r2, #1
   11b70:	movw	r1, #63128	; 0xf698
   11b74:	movt	r1, #1
   11b78:	bl	1bb50 <__assert_fail@plt+0xa854>
   11b7c:	mov	r0, #0
   11b80:	bl	11170 <exit@plt>
   11b84:	mov	r0, #1
   11b88:	bl	116b4 <__assert_fail@plt+0x3b8>
   11b8c:	mov	r3, #0
   11b90:	str	r3, [sp]
   11b94:	movw	r3, #61092	; 0xeea4
   11b98:	movt	r3, #1
   11b9c:	movw	r2, #63192	; 0xf6d8
   11ba0:	movt	r2, #1
   11ba4:	ldr	r1, [fp, #-180]	; 0xffffff4c
   11ba8:	ldr	r0, [fp, #-176]	; 0xffffff50
   11bac:	bl	11158 <getopt_long@plt>
   11bb0:	str	r0, [fp, #-32]	; 0xffffffe0
   11bb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11bb8:	cmn	r3, #1
   11bbc:	bne	1199c <__assert_fail@plt+0x6a0>
   11bc0:	ldrb	r3, [fp, #-60]	; 0xffffffc4
   11bc4:	cmp	r3, #0
   11bc8:	beq	11c10 <__assert_fail@plt+0x914>
   11bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bd0:	cmp	r3, #16
   11bd4:	bne	11c18 <__assert_fail@plt+0x91c>
   11bd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11bdc:	cmp	r3, #1
   11be0:	bne	11c04 <__assert_fail@plt+0x908>
   11be4:	movw	r0, #63204	; 0xf6e4
   11be8:	movt	r0, #1
   11bec:	bl	1117c <gettext@plt>
   11bf0:	mov	r3, r0
   11bf4:	mov	r2, r3
   11bf8:	mov	r1, #0
   11bfc:	mov	r0, #1
   11c00:	bl	11110 <error@plt>
   11c04:	mov	r3, #0
   11c08:	str	r3, [fp, #-28]	; 0xffffffe4
   11c0c:	b	11c18 <__assert_fail@plt+0x91c>
   11c10:	mov	r3, #16
   11c14:	str	r3, [fp, #-24]	; 0xffffffe8
   11c18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c1c:	cmp	r3, #0
   11c20:	movne	r3, #1
   11c24:	moveq	r3, #0
   11c28:	uxtb	r3, r3
   11c2c:	strb	r3, [fp, #-52]	; 0xffffffcc
   11c30:	movw	r3, #4488	; 0x1188
   11c34:	movt	r3, #3
   11c38:	ldr	r3, [r3]
   11c3c:	ldr	r2, [fp, #-176]	; 0xffffff50
   11c40:	sub	r2, r2, r3
   11c44:	movw	r3, #4512	; 0x11a0
   11c48:	movt	r3, #3
   11c4c:	ldr	r3, [r3]
   11c50:	cmp	r3, #0
   11c54:	beq	11c60 <__assert_fail@plt+0x964>
   11c58:	mov	r3, #1
   11c5c:	b	11c64 <__assert_fail@plt+0x968>
   11c60:	mov	r3, #2
   11c64:	cmp	r3, r2
   11c68:	ble	11cf4 <__assert_fail@plt+0x9f8>
   11c6c:	movw	r3, #4488	; 0x1188
   11c70:	movt	r3, #3
   11c74:	ldr	r3, [r3]
   11c78:	ldr	r2, [fp, #-176]	; 0xffffff50
   11c7c:	cmp	r2, r3
   11c80:	bgt	11ca8 <__assert_fail@plt+0x9ac>
   11c84:	movw	r0, #63248	; 0xf710
   11c88:	movt	r0, #1
   11c8c:	bl	1117c <gettext@plt>
   11c90:	mov	r3, r0
   11c94:	mov	r2, r3
   11c98:	mov	r1, #0
   11c9c:	mov	r0, #0
   11ca0:	bl	11110 <error@plt>
   11ca4:	b	11cec <__assert_fail@plt+0x9f0>
   11ca8:	movw	r0, #63264	; 0xf720
   11cac:	movt	r0, #1
   11cb0:	bl	1117c <gettext@plt>
   11cb4:	mov	r4, r0
   11cb8:	ldr	r3, [fp, #-176]	; 0xffffff50
   11cbc:	sub	r3, r3, #-1073741823	; 0xc0000001
   11cc0:	lsl	r3, r3, #2
   11cc4:	ldr	r2, [fp, #-180]	; 0xffffff4c
   11cc8:	add	r3, r2, r3
   11ccc:	ldr	r3, [r3]
   11cd0:	mov	r0, r3
   11cd4:	bl	1b35c <__assert_fail@plt+0xa060>
   11cd8:	mov	r3, r0
   11cdc:	mov	r2, r4
   11ce0:	mov	r1, #0
   11ce4:	mov	r0, #0
   11ce8:	bl	11110 <error@plt>
   11cec:	mov	r0, #1
   11cf0:	bl	116b4 <__assert_fail@plt+0x3b8>
   11cf4:	movw	r3, #4512	; 0x11a0
   11cf8:	movt	r3, #3
   11cfc:	ldr	r3, [r3]
   11d00:	cmp	r3, #0
   11d04:	beq	11d98 <__assert_fail@plt+0xa9c>
   11d08:	movw	r3, #4512	; 0x11a0
   11d0c:	movt	r3, #3
   11d10:	ldr	r3, [r3]
   11d14:	sub	r2, fp, #172	; 0xac
   11d18:	mov	r1, r2
   11d1c:	mov	r0, r3
   11d20:	bl	1ec0c <__assert_fail@plt+0xd910>
   11d24:	mov	r3, r0
   11d28:	cmp	r3, #0
   11d2c:	beq	11d78 <__assert_fail@plt+0xa7c>
   11d30:	bl	111c4 <__errno_location@plt>
   11d34:	mov	r3, r0
   11d38:	ldr	r4, [r3]
   11d3c:	movw	r0, #63292	; 0xf73c
   11d40:	movt	r0, #1
   11d44:	bl	1117c <gettext@plt>
   11d48:	mov	r5, r0
   11d4c:	movw	r3, #4512	; 0x11a0
   11d50:	movt	r3, #3
   11d54:	ldr	r3, [r3]
   11d58:	mov	r1, r3
   11d5c:	mov	r0, #4
   11d60:	bl	1ae7c <__assert_fail@plt+0x9b80>
   11d64:	mov	r3, r0
   11d68:	mov	r2, r5
   11d6c:	mov	r1, r4
   11d70:	mov	r0, #1
   11d74:	bl	11110 <error@plt>
   11d78:	ldr	r3, [fp, #-144]	; 0xffffff70
   11d7c:	str	r3, [fp, #-20]	; 0xffffffec
   11d80:	ldr	r3, [fp, #-144]	; 0xffffff70
   11d84:	mov	r0, r3
   11d88:	bl	11f9c <__assert_fail@plt+0xca0>
   11d8c:	mov	r3, r0
   11d90:	str	r3, [fp, #-44]	; 0xffffffd4
   11d94:	b	11e00 <__assert_fail@plt+0xb04>
   11d98:	movw	r3, #4488	; 0x1188
   11d9c:	movt	r3, #3
   11da0:	ldr	r2, [r3]
   11da4:	add	r1, r2, #1
   11da8:	movw	r3, #4488	; 0x1188
   11dac:	movt	r3, #3
   11db0:	str	r1, [r3]
   11db4:	mov	r3, r2
   11db8:	lsl	r3, r3, #2
   11dbc:	ldr	r2, [fp, #-180]	; 0xffffff4c
   11dc0:	add	r3, r2, r3
   11dc4:	ldr	r3, [r3]
   11dc8:	str	r3, [fp, #-36]	; 0xffffffdc
   11dcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11dd0:	ldrb	r3, [r3]
   11dd4:	cmp	r3, #0
   11dd8:	beq	11dec <__assert_fail@plt+0xaf0>
   11ddc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11de0:	bl	1c4fc <__assert_fail@plt+0xb200>
   11de4:	mov	r3, r0
   11de8:	b	11df0 <__assert_fail@plt+0xaf4>
   11dec:	mov	r3, #0
   11df0:	str	r3, [fp, #-44]	; 0xffffffd4
   11df4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11df8:	bl	115bc <__assert_fail@plt+0x2c0>
   11dfc:	str	r0, [fp, #-20]	; 0xffffffec
   11e00:	ldrb	r3, [fp, #-60]	; 0xffffffc4
   11e04:	cmp	r3, #0
   11e08:	beq	11e78 <__assert_fail@plt+0xb7c>
   11e0c:	ldrb	r3, [fp, #-13]
   11e10:	cmp	r3, #0
   11e14:	beq	11e78 <__assert_fail@plt+0xb7c>
   11e18:	movw	r0, #4520	; 0x11a8
   11e1c:	movt	r0, #3
   11e20:	bl	1b394 <__assert_fail@plt+0xa098>
   11e24:	mov	r3, r0
   11e28:	str	r3, [fp, #-56]	; 0xffffffc8
   11e2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11e30:	cmp	r3, #0
   11e34:	bne	11e78 <__assert_fail@plt+0xb7c>
   11e38:	bl	111c4 <__errno_location@plt>
   11e3c:	mov	r3, r0
   11e40:	ldr	r4, [r3]
   11e44:	movw	r0, #63292	; 0xf73c
   11e48:	movt	r0, #1
   11e4c:	bl	1117c <gettext@plt>
   11e50:	mov	r5, r0
   11e54:	movw	r1, #63324	; 0xf75c
   11e58:	movt	r1, #1
   11e5c:	mov	r0, #4
   11e60:	bl	1ae7c <__assert_fail@plt+0x9b80>
   11e64:	mov	r3, r0
   11e68:	mov	r2, r5
   11e6c:	mov	r1, r4
   11e70:	mov	r0, #1
   11e74:	bl	11110 <error@plt>
   11e78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e7c:	orr	r3, r3, #1024	; 0x400
   11e80:	str	r3, [fp, #-24]	; 0xffffffe8
   11e84:	movw	r3, #4488	; 0x1188
   11e88:	movt	r3, #3
   11e8c:	ldr	r3, [r3]
   11e90:	lsl	r3, r3, #2
   11e94:	ldr	r2, [fp, #-180]	; 0xffffff4c
   11e98:	add	r0, r2, r3
   11e9c:	sub	r3, fp, #64	; 0x40
   11ea0:	str	r3, [sp, #8]
   11ea4:	mvn	r3, #0
   11ea8:	str	r3, [sp, #4]
   11eac:	mvn	r3, #0
   11eb0:	str	r3, [sp]
   11eb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   11eb8:	mvn	r2, #0
   11ebc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11ec0:	bl	130ec <__assert_fail@plt+0x1df0>
   11ec4:	mov	r3, r0
   11ec8:	strb	r3, [fp, #-37]	; 0xffffffdb
   11ecc:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11ed0:	eor	r3, r3, #1
   11ed4:	uxtb	r3, r3
   11ed8:	mov	r0, r3
   11edc:	bl	11170 <exit@plt>
   11ee0:	push	{fp}		; (str fp, [sp, #-4]!)
   11ee4:	add	fp, sp, #0
   11ee8:	sub	sp, sp, #12
   11eec:	str	r0, [fp, #-8]
   11ef0:	ldr	r3, [fp, #-8]
   11ef4:	mov	r2, #2
   11ef8:	str	r2, [r3]
   11efc:	ldr	r3, [fp, #-8]
   11f00:	mov	r2, #0
   11f04:	str	r2, [r3, #8]
   11f08:	ldr	r3, [fp, #-8]
   11f0c:	mov	r2, #1
   11f10:	strb	r2, [r3, #12]
   11f14:	ldr	r3, [fp, #-8]
   11f18:	mov	r2, #0
   11f1c:	strb	r2, [r3, #4]
   11f20:	ldr	r3, [fp, #-8]
   11f24:	mov	r2, #0
   11f28:	strb	r2, [r3, #13]
   11f2c:	ldr	r3, [fp, #-8]
   11f30:	mov	r2, #0
   11f34:	str	r2, [r3, #16]
   11f38:	ldr	r3, [fp, #-8]
   11f3c:	mov	r2, #0
   11f40:	str	r2, [r3, #20]
   11f44:	nop	{0}
   11f48:	add	sp, fp, #0
   11f4c:	pop	{fp}		; (ldr fp, [sp], #4)
   11f50:	bx	lr
   11f54:	str	fp, [sp, #-8]!
   11f58:	str	lr, [sp, #4]
   11f5c:	add	fp, sp, #4
   11f60:	sub	sp, sp, #8
   11f64:	str	r0, [fp, #-8]
   11f68:	ldr	r3, [fp, #-8]
   11f6c:	ldr	r3, [r3, #16]
   11f70:	mov	r0, r3
   11f74:	bl	13514 <__assert_fail@plt+0x2218>
   11f78:	ldr	r3, [fp, #-8]
   11f7c:	ldr	r3, [r3, #20]
   11f80:	mov	r0, r3
   11f84:	bl	13514 <__assert_fail@plt+0x2218>
   11f88:	nop	{0}
   11f8c:	sub	sp, fp, #4
   11f90:	ldr	fp, [sp]
   11f94:	add	sp, sp, #4
   11f98:	pop	{pc}		; (ldr pc, [sp], #4)
   11f9c:	str	fp, [sp, #-8]!
   11fa0:	str	lr, [sp, #4]
   11fa4:	add	fp, sp, #4
   11fa8:	sub	sp, sp, #40	; 0x28
   11fac:	str	r0, [fp, #-40]	; 0xffffffd8
   11fb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11fb4:	bl	112e4 <getgrgid@plt>
   11fb8:	str	r0, [fp, #-8]
   11fbc:	ldr	r3, [fp, #-8]
   11fc0:	cmp	r3, #0
   11fc4:	beq	11fd4 <__assert_fail@plt+0xcd8>
   11fc8:	ldr	r3, [fp, #-8]
   11fcc:	ldr	r3, [r3]
   11fd0:	b	11ff0 <__assert_fail@plt+0xcf4>
   11fd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11fd8:	mov	r0, r3
   11fdc:	mov	r1, #0
   11fe0:	sub	r3, fp, #32
   11fe4:	mov	r2, r3
   11fe8:	bl	1880c <__assert_fail@plt+0x7510>
   11fec:	mov	r3, r0
   11ff0:	mov	r0, r3
   11ff4:	bl	1c4fc <__assert_fail@plt+0xb200>
   11ff8:	mov	r3, r0
   11ffc:	mov	r0, r3
   12000:	sub	sp, fp, #4
   12004:	ldr	fp, [sp]
   12008:	add	sp, sp, #4
   1200c:	pop	{pc}		; (ldr pc, [sp], #4)
   12010:	str	fp, [sp, #-8]!
   12014:	str	lr, [sp, #4]
   12018:	add	fp, sp, #4
   1201c:	sub	sp, sp, #40	; 0x28
   12020:	str	r0, [fp, #-40]	; 0xffffffd8
   12024:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12028:	bl	10ffc <getpwuid@plt>
   1202c:	str	r0, [fp, #-8]
   12030:	ldr	r3, [fp, #-8]
   12034:	cmp	r3, #0
   12038:	beq	12048 <__assert_fail@plt+0xd4c>
   1203c:	ldr	r3, [fp, #-8]
   12040:	ldr	r3, [r3]
   12044:	b	12064 <__assert_fail@plt+0xd68>
   12048:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1204c:	mov	r0, r3
   12050:	mov	r1, #0
   12054:	sub	r3, fp, #32
   12058:	mov	r2, r3
   1205c:	bl	1880c <__assert_fail@plt+0x7510>
   12060:	mov	r3, r0
   12064:	mov	r0, r3
   12068:	bl	1c4fc <__assert_fail@plt+0xb200>
   1206c:	mov	r3, r0
   12070:	mov	r0, r3
   12074:	sub	sp, fp, #4
   12078:	ldr	fp, [sp]
   1207c:	add	sp, sp, #4
   12080:	pop	{pc}		; (ldr pc, [sp], #4)
   12084:	str	r4, [sp, #-12]!
   12088:	str	fp, [sp, #4]
   1208c:	str	lr, [sp, #8]
   12090:	add	fp, sp, #8
   12094:	sub	sp, sp, #20
   12098:	str	r0, [fp, #-24]	; 0xffffffe8
   1209c:	str	r1, [fp, #-28]	; 0xffffffe4
   120a0:	mov	r3, #0
   120a4:	str	r3, [fp, #-16]
   120a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   120ac:	cmp	r3, #0
   120b0:	beq	1213c <__assert_fail@plt+0xe40>
   120b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120b8:	cmp	r3, #0
   120bc:	beq	12128 <__assert_fail@plt+0xe2c>
   120c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   120c4:	bl	11188 <strlen@plt>
   120c8:	mov	r4, r0
   120cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   120d0:	bl	11188 <strlen@plt>
   120d4:	mov	r3, r0
   120d8:	add	r3, r4, r3
   120dc:	add	r3, r3, #2
   120e0:	mov	r0, r3
   120e4:	bl	1bcd0 <__assert_fail@plt+0xa9d4>
   120e8:	mov	r3, r0
   120ec:	str	r3, [fp, #-16]
   120f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   120f4:	ldr	r0, [fp, #-16]
   120f8:	bl	11068 <stpcpy@plt>
   120fc:	mov	r2, r0
   12100:	movw	r3, #63328	; 0xf760
   12104:	movt	r3, #1
   12108:	mov	r1, r2
   1210c:	ldrh	r3, [r3]
   12110:	strh	r3, [r1]
   12114:	add	r3, r2, #1
   12118:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1211c:	mov	r0, r3
   12120:	bl	110e0 <strcpy@plt>
   12124:	b	12158 <__assert_fail@plt+0xe5c>
   12128:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1212c:	bl	1c4fc <__assert_fail@plt+0xb200>
   12130:	mov	r3, r0
   12134:	str	r3, [fp, #-16]
   12138:	b	12158 <__assert_fail@plt+0xe5c>
   1213c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12140:	cmp	r3, #0
   12144:	beq	12158 <__assert_fail@plt+0xe5c>
   12148:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1214c:	bl	1c4fc <__assert_fail@plt+0xb200>
   12150:	mov	r3, r0
   12154:	str	r3, [fp, #-16]
   12158:	ldr	r3, [fp, #-16]
   1215c:	mov	r0, r3
   12160:	sub	sp, fp, #8
   12164:	ldr	r4, [sp]
   12168:	ldr	fp, [sp, #4]
   1216c:	add	sp, sp, #8
   12170:	pop	{pc}		; (ldr pc, [sp], #4)
   12174:	str	r4, [sp, #-12]!
   12178:	str	fp, [sp, #4]
   1217c:	str	lr, [sp, #8]
   12180:	add	fp, sp, #8
   12184:	sub	sp, sp, #36	; 0x24
   12188:	str	r0, [fp, #-32]	; 0xffffffe0
   1218c:	str	r1, [fp, #-36]	; 0xffffffdc
   12190:	str	r2, [fp, #-40]	; 0xffffffd8
   12194:	str	r3, [fp, #-44]	; 0xffffffd4
   12198:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1219c:	cmp	r3, #1
   121a0:	bne	121d4 <__assert_fail@plt+0xed8>
   121a4:	movw	r0, #63332	; 0xf764
   121a8:	movt	r0, #1
   121ac:	bl	1117c <gettext@plt>
   121b0:	mov	r4, r0
   121b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   121b8:	mov	r0, #4
   121bc:	bl	1ae7c <__assert_fail@plt+0x9b80>
   121c0:	mov	r3, r0
   121c4:	mov	r1, r3
   121c8:	mov	r0, r4
   121cc:	bl	11008 <printf@plt>
   121d0:	b	12400 <__assert_fail@plt+0x1104>
   121d4:	ldr	r1, [fp, #8]
   121d8:	ldr	r0, [fp, #4]
   121dc:	bl	12084 <__assert_fail@plt+0xd88>
   121e0:	str	r0, [fp, #-24]	; 0xffffffe8
   121e4:	ldr	r3, [fp, #4]
   121e8:	cmp	r3, #0
   121ec:	beq	121f8 <__assert_fail@plt+0xefc>
   121f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   121f4:	b	121fc <__assert_fail@plt+0xf00>
   121f8:	mov	r2, #0
   121fc:	ldr	r3, [fp, #8]
   12200:	cmp	r3, #0
   12204:	beq	12210 <__assert_fail@plt+0xf14>
   12208:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1220c:	b	12214 <__assert_fail@plt+0xf18>
   12210:	mov	r3, #0
   12214:	mov	r1, r3
   12218:	mov	r0, r2
   1221c:	bl	12084 <__assert_fail@plt+0xd88>
   12220:	str	r0, [fp, #-20]	; 0xffffffec
   12224:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12228:	cmp	r3, #3
   1222c:	beq	122a0 <__assert_fail@plt+0xfa4>
   12230:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12234:	cmp	r3, #4
   12238:	beq	12374 <__assert_fail@plt+0x1078>
   1223c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12240:	cmp	r3, #2
   12244:	bne	123cc <__assert_fail@plt+0x10d0>
   12248:	ldr	r3, [fp, #4]
   1224c:	cmp	r3, #0
   12250:	beq	12268 <__assert_fail@plt+0xf6c>
   12254:	movw	r0, #63388	; 0xf79c
   12258:	movt	r0, #1
   1225c:	bl	1117c <gettext@plt>
   12260:	mov	r3, r0
   12264:	b	12298 <__assert_fail@plt+0xf9c>
   12268:	ldr	r3, [fp, #8]
   1226c:	cmp	r3, #0
   12270:	beq	12288 <__assert_fail@plt+0xf8c>
   12274:	movw	r0, #63428	; 0xf7c4
   12278:	movt	r0, #1
   1227c:	bl	1117c <gettext@plt>
   12280:	mov	r3, r0
   12284:	b	12298 <__assert_fail@plt+0xf9c>
   12288:	movw	r0, #63464	; 0xf7e8
   1228c:	movt	r0, #1
   12290:	bl	1117c <gettext@plt>
   12294:	mov	r3, r0
   12298:	str	r3, [fp, #-16]
   1229c:	b	123d0 <__assert_fail@plt+0x10d4>
   122a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   122a4:	cmp	r3, #0
   122a8:	beq	12304 <__assert_fail@plt+0x1008>
   122ac:	ldr	r3, [fp, #4]
   122b0:	cmp	r3, #0
   122b4:	beq	122cc <__assert_fail@plt+0xfd0>
   122b8:	movw	r0, #63496	; 0xf808
   122bc:	movt	r0, #1
   122c0:	bl	1117c <gettext@plt>
   122c4:	mov	r3, r0
   122c8:	b	122fc <__assert_fail@plt+0x1000>
   122cc:	ldr	r3, [fp, #8]
   122d0:	cmp	r3, #0
   122d4:	beq	122ec <__assert_fail@plt+0xff0>
   122d8:	movw	r0, #63544	; 0xf838
   122dc:	movt	r0, #1
   122e0:	bl	1117c <gettext@plt>
   122e4:	mov	r3, r0
   122e8:	b	122fc <__assert_fail@plt+0x1000>
   122ec:	movw	r0, #63588	; 0xf864
   122f0:	movt	r0, #1
   122f4:	bl	1117c <gettext@plt>
   122f8:	mov	r3, r0
   122fc:	str	r3, [fp, #-16]
   12300:	b	123d0 <__assert_fail@plt+0x10d4>
   12304:	ldr	r3, [fp, #4]
   12308:	cmp	r3, #0
   1230c:	beq	12324 <__assert_fail@plt+0x1028>
   12310:	movw	r0, #63624	; 0xf888
   12314:	movt	r0, #1
   12318:	bl	1117c <gettext@plt>
   1231c:	mov	r3, r0
   12320:	b	12354 <__assert_fail@plt+0x1058>
   12324:	ldr	r3, [fp, #8]
   12328:	cmp	r3, #0
   1232c:	beq	12344 <__assert_fail@plt+0x1048>
   12330:	movw	r0, #63664	; 0xf8b0
   12334:	movt	r0, #1
   12338:	bl	1117c <gettext@plt>
   1233c:	mov	r3, r0
   12340:	b	12354 <__assert_fail@plt+0x1058>
   12344:	movw	r0, #63588	; 0xf864
   12348:	movt	r0, #1
   1234c:	bl	1117c <gettext@plt>
   12350:	mov	r3, r0
   12354:	str	r3, [fp, #-16]
   12358:	ldr	r0, [fp, #-20]	; 0xffffffec
   1235c:	bl	13514 <__assert_fail@plt+0x2218>
   12360:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12364:	str	r3, [fp, #-20]	; 0xffffffec
   12368:	mov	r3, #0
   1236c:	str	r3, [fp, #-24]	; 0xffffffe8
   12370:	b	123d0 <__assert_fail@plt+0x10d4>
   12374:	ldr	r3, [fp, #4]
   12378:	cmp	r3, #0
   1237c:	beq	12394 <__assert_fail@plt+0x1098>
   12380:	movw	r0, #63700	; 0xf8d4
   12384:	movt	r0, #1
   12388:	bl	1117c <gettext@plt>
   1238c:	mov	r3, r0
   12390:	b	123c4 <__assert_fail@plt+0x10c8>
   12394:	ldr	r3, [fp, #8]
   12398:	cmp	r3, #0
   1239c:	beq	123b4 <__assert_fail@plt+0x10b8>
   123a0:	movw	r0, #63732	; 0xf8f4
   123a4:	movt	r0, #1
   123a8:	bl	1117c <gettext@plt>
   123ac:	mov	r3, r0
   123b0:	b	123c4 <__assert_fail@plt+0x10c8>
   123b4:	movw	r0, #63760	; 0xf910
   123b8:	movt	r0, #1
   123bc:	bl	1117c <gettext@plt>
   123c0:	mov	r3, r0
   123c4:	str	r3, [fp, #-16]
   123c8:	b	123d0 <__assert_fail@plt+0x10d4>
   123cc:	bl	112b4 <abort@plt>
   123d0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   123d4:	mov	r0, #4
   123d8:	bl	1ae7c <__assert_fail@plt+0x9b80>
   123dc:	mov	r1, r0
   123e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   123e8:	ldr	r0, [fp, #-16]
   123ec:	bl	11008 <printf@plt>
   123f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   123f4:	bl	13514 <__assert_fail@plt+0x2218>
   123f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   123fc:	bl	13514 <__assert_fail@plt+0x2218>
   12400:	sub	sp, fp, #8
   12404:	ldr	r4, [sp]
   12408:	ldr	fp, [sp, #4]
   1240c:	add	sp, sp, #8
   12410:	pop	{pc}		; (ldr pc, [sp], #4)
   12414:	str	fp, [sp, #-8]!
   12418:	str	lr, [sp, #4]
   1241c:	add	fp, sp, #4
   12420:	sub	sp, sp, #136	; 0x88
   12424:	str	r0, [fp, #-128]	; 0xffffff80
   12428:	str	r1, [fp, #-132]	; 0xffffff7c
   1242c:	str	r2, [fp, #-136]	; 0xffffff78
   12430:	str	r3, [fp, #-140]	; 0xffffff74
   12434:	mov	r3, #2
   12438:	str	r3, [fp, #-8]
   1243c:	mov	r3, #2304	; 0x900
   12440:	str	r3, [fp, #-12]
   12444:	ldr	r3, [fp, #8]
   12448:	cmn	r3, #1
   1244c:	bne	12464 <__assert_fail@plt+0x1168>
   12450:	ldr	r3, [fp, #12]
   12454:	cmn	r3, #1
   12458:	bne	12464 <__assert_fail@plt+0x1168>
   1245c:	mov	r3, #5
   12460:	b	12650 <__assert_fail@plt+0x1354>
   12464:	ldr	r3, [fp, #-136]	; 0xffffff78
   12468:	ldr	r3, [r3, #16]
   1246c:	and	r3, r3, #61440	; 0xf000
   12470:	cmp	r3, #32768	; 0x8000
   12474:	beq	124a4 <__assert_fail@plt+0x11a8>
   12478:	ldr	r3, [fp, #-136]	; 0xffffff78
   1247c:	ldr	r3, [r3, #16]
   12480:	and	r3, r3, #61440	; 0xf000
   12484:	cmp	r3, #16384	; 0x4000
   12488:	bne	1249c <__assert_fail@plt+0x11a0>
   1248c:	ldr	r3, [fp, #-12]
   12490:	orr	r3, r3, #16384	; 0x4000
   12494:	str	r3, [fp, #-12]
   12498:	b	124a4 <__assert_fail@plt+0x11a8>
   1249c:	mov	r3, #5
   124a0:	b	12650 <__assert_fail@plt+0x1354>
   124a4:	ldr	r2, [fp, #-12]
   124a8:	ldr	r1, [fp, #-132]	; 0xffffff7c
   124ac:	ldr	r0, [fp, #-128]	; 0xffffff80
   124b0:	bl	111a0 <openat64@plt>
   124b4:	str	r0, [fp, #-16]
   124b8:	ldr	r3, [fp, #-16]
   124bc:	cmp	r3, #0
   124c0:	bge	12538 <__assert_fail@plt+0x123c>
   124c4:	bl	111c4 <__errno_location@plt>
   124c8:	mov	r3, r0
   124cc:	ldr	r3, [r3]
   124d0:	cmp	r3, #13
   124d4:	bne	12514 <__assert_fail@plt+0x1218>
   124d8:	ldr	r3, [fp, #-136]	; 0xffffff78
   124dc:	ldr	r3, [r3, #16]
   124e0:	and	r3, r3, #61440	; 0xf000
   124e4:	cmp	r3, #32768	; 0x8000
   124e8:	bne	12514 <__assert_fail@plt+0x1218>
   124ec:	ldr	r3, [fp, #-12]
   124f0:	orr	r3, r3, #1
   124f4:	mov	r2, r3
   124f8:	ldr	r1, [fp, #-132]	; 0xffffff7c
   124fc:	ldr	r0, [fp, #-128]	; 0xffffff80
   12500:	bl	111a0 <openat64@plt>
   12504:	str	r0, [fp, #-16]
   12508:	ldr	r3, [fp, #-16]
   1250c:	cmp	r3, #0
   12510:	bge	12538 <__assert_fail@plt+0x123c>
   12514:	bl	111c4 <__errno_location@plt>
   12518:	mov	r3, r0
   1251c:	ldr	r3, [r3]
   12520:	cmp	r3, #13
   12524:	bne	12530 <__assert_fail@plt+0x1234>
   12528:	mov	r3, #5
   1252c:	b	12650 <__assert_fail@plt+0x1354>
   12530:	mov	r3, #6
   12534:	b	12650 <__assert_fail@plt+0x1354>
   12538:	sub	r3, fp, #124	; 0x7c
   1253c:	mov	r1, r3
   12540:	ldr	r0, [fp, #-16]
   12544:	bl	1ec1c <__assert_fail@plt+0xd920>
   12548:	mov	r3, r0
   1254c:	cmp	r3, #0
   12550:	beq	12560 <__assert_fail@plt+0x1264>
   12554:	mov	r3, #6
   12558:	str	r3, [fp, #-8]
   1255c:	b	12624 <__assert_fail@plt+0x1328>
   12560:	ldr	r3, [fp, #-136]	; 0xffffff78
   12564:	ldrd	r0, [r3, #96]	; 0x60
   12568:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1256c:	cmp	r1, r3
   12570:	cmpeq	r0, r2
   12574:	bne	12590 <__assert_fail@plt+0x1294>
   12578:	ldr	r3, [fp, #-136]	; 0xffffff78
   1257c:	ldrd	r0, [r3]
   12580:	ldrd	r2, [fp, #-124]	; 0xffffff84
   12584:	cmp	r1, r3
   12588:	cmpeq	r0, r2
   1258c:	beq	1259c <__assert_fail@plt+0x12a0>
   12590:	mov	r3, #4
   12594:	str	r3, [fp, #-8]
   12598:	b	12624 <__assert_fail@plt+0x1328>
   1259c:	ldr	r3, [fp, #8]
   125a0:	cmn	r3, #1
   125a4:	beq	125b8 <__assert_fail@plt+0x12bc>
   125a8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   125ac:	ldr	r2, [fp, #8]
   125b0:	cmp	r2, r3
   125b4:	bne	12624 <__assert_fail@plt+0x1328>
   125b8:	ldr	r3, [fp, #12]
   125bc:	cmn	r3, #1
   125c0:	beq	125d4 <__assert_fail@plt+0x12d8>
   125c4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   125c8:	ldr	r2, [fp, #12]
   125cc:	cmp	r2, r3
   125d0:	bne	12624 <__assert_fail@plt+0x1328>
   125d4:	ldr	r2, [fp, #4]
   125d8:	ldr	r1, [fp, #-140]	; 0xffffff74
   125dc:	ldr	r0, [fp, #-16]
   125e0:	bl	111ac <fchown@plt>
   125e4:	mov	r3, r0
   125e8:	cmp	r3, #0
   125ec:	bne	1261c <__assert_fail@plt+0x1320>
   125f0:	ldr	r0, [fp, #-16]
   125f4:	bl	112c0 <close@plt>
   125f8:	mov	r3, r0
   125fc:	cmp	r3, #0
   12600:	bne	1260c <__assert_fail@plt+0x1310>
   12604:	mov	r3, #2
   12608:	b	12610 <__assert_fail@plt+0x1314>
   1260c:	mov	r3, #6
   12610:	str	r3, [fp, #-8]
   12614:	ldr	r3, [fp, #-8]
   12618:	b	12650 <__assert_fail@plt+0x1354>
   1261c:	mov	r3, #6
   12620:	str	r3, [fp, #-8]
   12624:	bl	111c4 <__errno_location@plt>
   12628:	mov	r3, r0
   1262c:	ldr	r3, [r3]
   12630:	str	r3, [fp, #-20]	; 0xffffffec
   12634:	ldr	r0, [fp, #-16]
   12638:	bl	112c0 <close@plt>
   1263c:	bl	111c4 <__errno_location@plt>
   12640:	mov	r2, r0
   12644:	ldr	r3, [fp, #-20]	; 0xffffffec
   12648:	str	r3, [r2]
   1264c:	ldr	r3, [fp, #-8]
   12650:	mov	r0, r3
   12654:	sub	sp, fp, #4
   12658:	ldr	fp, [sp]
   1265c:	add	sp, sp, #4
   12660:	pop	{pc}		; (ldr pc, [sp], #4)
   12664:	strd	r4, [sp, #-16]!
   12668:	str	fp, [sp, #8]
   1266c:	str	lr, [sp, #12]
   12670:	add	fp, sp, #12
   12674:	sub	sp, sp, #176	; 0xb0
   12678:	str	r0, [fp, #-160]	; 0xffffff60
   1267c:	str	r1, [fp, #-164]	; 0xffffff5c
   12680:	str	r2, [fp, #-168]	; 0xffffff58
   12684:	str	r3, [fp, #-172]	; 0xffffff54
   12688:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1268c:	ldr	r3, [r3, #28]
   12690:	str	r3, [fp, #-24]	; 0xffffffe8
   12694:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12698:	ldr	r3, [r3, #24]
   1269c:	str	r3, [fp, #-28]	; 0xffffffe4
   126a0:	mov	r3, #1
   126a4:	strb	r3, [fp, #-17]	; 0xffffffef
   126a8:	mov	r3, #1
   126ac:	strb	r3, [fp, #-19]	; 0xffffffed
   126b0:	ldr	r3, [fp, #-164]	; 0xffffff5c
   126b4:	ldrh	r3, [r3, #56]	; 0x38
   126b8:	sub	r3, r3, #1
   126bc:	cmp	r3, #9
   126c0:	ldrls	pc, [pc, r3, lsl #2]
   126c4:	b	12a04 <__assert_fail@plt+0x1708>
   126c8:	strdeq	r2, [r1], -r0
   126cc:			; <UNDEFINED> instruction: 0x000129b0
   126d0:	andeq	r2, r1, r4, lsl #20
   126d4:	andeq	r2, r1, r4, asr r9
   126d8:	andeq	r2, r1, r4, lsl #20
   126dc:	andeq	r2, r1, r0, asr #16
   126e0:	andeq	r2, r1, r0, lsl #18
   126e4:	andeq	r2, r1, r4, lsl #20
   126e8:	andeq	r2, r1, r4, lsl #20
   126ec:	andeq	r2, r1, r0, ror #16
   126f0:	ldr	r3, [fp, #12]
   126f4:	ldrb	r3, [r3, #4]
   126f8:	cmp	r3, #0
   126fc:	beq	12a0c <__assert_fail@plt+0x1710>
   12700:	ldr	r3, [fp, #12]
   12704:	ldr	r3, [r3, #8]
   12708:	cmp	r3, #0
   1270c:	beq	12838 <__assert_fail@plt+0x153c>
   12710:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12714:	ldrd	r0, [r3, #160]	; 0xa0
   12718:	ldr	r3, [fp, #12]
   1271c:	ldr	r3, [r3, #8]
   12720:	ldrd	r2, [r3]
   12724:	cmp	r1, r3
   12728:	cmpeq	r0, r2
   1272c:	bne	12838 <__assert_fail@plt+0x153c>
   12730:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12734:	ldrd	r0, [r3, #64]	; 0x40
   12738:	ldr	r3, [fp, #12]
   1273c:	ldr	r3, [r3, #8]
   12740:	ldrd	r2, [r3, #8]
   12744:	cmp	r1, r3
   12748:	cmpeq	r0, r2
   1274c:	bne	12838 <__assert_fail@plt+0x153c>
   12750:	movw	r1, #63788	; 0xf92c
   12754:	movt	r1, #1
   12758:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1275c:	bl	10ff0 <strcmp@plt>
   12760:	mov	r3, r0
   12764:	cmp	r3, #0
   12768:	bne	127a0 <__assert_fail@plt+0x14a4>
   1276c:	movw	r0, #63792	; 0xf930
   12770:	movt	r0, #1
   12774:	bl	1117c <gettext@plt>
   12778:	mov	r4, r0
   1277c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12780:	mov	r0, #4
   12784:	bl	1ae7c <__assert_fail@plt+0x9b80>
   12788:	mov	r3, r0
   1278c:	mov	r2, r4
   12790:	mov	r1, #0
   12794:	mov	r0, #0
   12798:	bl	11110 <error@plt>
   1279c:	b	127f4 <__assert_fail@plt+0x14f8>
   127a0:	movw	r0, #63840	; 0xf960
   127a4:	movt	r0, #1
   127a8:	bl	1117c <gettext@plt>
   127ac:	mov	r4, r0
   127b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127b4:	mov	r1, #4
   127b8:	mov	r0, #0
   127bc:	bl	1adc8 <__assert_fail@plt+0x9acc>
   127c0:	mov	r5, r0
   127c4:	movw	r2, #63788	; 0xf92c
   127c8:	movt	r2, #1
   127cc:	mov	r1, #4
   127d0:	mov	r0, #1
   127d4:	bl	1adc8 <__assert_fail@plt+0x9acc>
   127d8:	mov	r3, r0
   127dc:	str	r3, [sp]
   127e0:	mov	r3, r5
   127e4:	mov	r2, r4
   127e8:	mov	r1, #0
   127ec:	mov	r0, #0
   127f0:	bl	11110 <error@plt>
   127f4:	movw	r0, #63900	; 0xf99c
   127f8:	movt	r0, #1
   127fc:	bl	1117c <gettext@plt>
   12800:	mov	r3, r0
   12804:	mov	r2, r3
   12808:	mov	r1, #0
   1280c:	mov	r0, #0
   12810:	bl	11110 <error@plt>
   12814:	mov	r2, #4
   12818:	ldr	r1, [fp, #-164]	; 0xffffff5c
   1281c:	ldr	r0, [fp, #-160]	; 0xffffff60
   12820:	bl	15000 <__assert_fail@plt+0x3d04>
   12824:	ldr	r0, [fp, #-160]	; 0xffffff60
   12828:	bl	14854 <__assert_fail@plt+0x3558>
   1282c:	str	r0, [fp, #-32]	; 0xffffffe0
   12830:	mov	r3, #0
   12834:	b	130d4 <__assert_fail@plt+0x1dd8>
   12838:	mov	r3, #1
   1283c:	b	130d4 <__assert_fail@plt+0x1dd8>
   12840:	ldr	r3, [fp, #12]
   12844:	ldrb	r3, [r3, #4]
   12848:	eor	r3, r3, #1
   1284c:	uxtb	r3, r3
   12850:	cmp	r3, #0
   12854:	beq	12a14 <__assert_fail@plt+0x1718>
   12858:	mov	r3, #1
   1285c:	b	130d4 <__assert_fail@plt+0x1dd8>
   12860:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12864:	ldr	r3, [r3, #48]	; 0x30
   12868:	cmp	r3, #0
   1286c:	bne	128a4 <__assert_fail@plt+0x15a8>
   12870:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12874:	ldr	r3, [r3, #16]
   12878:	cmp	r3, #0
   1287c:	bne	128a4 <__assert_fail@plt+0x15a8>
   12880:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12884:	mov	r2, #1
   12888:	str	r2, [r3, #16]
   1288c:	mov	r2, #1
   12890:	ldr	r1, [fp, #-164]	; 0xffffff5c
   12894:	ldr	r0, [fp, #-160]	; 0xffffff60
   12898:	bl	15000 <__assert_fail@plt+0x3d04>
   1289c:	mov	r3, #1
   128a0:	b	130d4 <__assert_fail@plt+0x1dd8>
   128a4:	ldr	r3, [fp, #12]
   128a8:	ldrb	r3, [r3, #13]
   128ac:	eor	r3, r3, #1
   128b0:	uxtb	r3, r3
   128b4:	cmp	r3, #0
   128b8:	beq	128f4 <__assert_fail@plt+0x15f8>
   128bc:	ldr	r3, [fp, #-164]	; 0xffffff5c
   128c0:	ldr	r4, [r3, #32]
   128c4:	movw	r0, #63952	; 0xf9d0
   128c8:	movt	r0, #1
   128cc:	bl	1117c <gettext@plt>
   128d0:	mov	r5, r0
   128d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   128d8:	mov	r0, #4
   128dc:	bl	1ae7c <__assert_fail@plt+0x9b80>
   128e0:	mov	r3, r0
   128e4:	mov	r2, r5
   128e8:	mov	r1, r4
   128ec:	mov	r0, #0
   128f0:	bl	11110 <error@plt>
   128f4:	mov	r3, #0
   128f8:	strb	r3, [fp, #-17]	; 0xffffffef
   128fc:	b	12a20 <__assert_fail@plt+0x1724>
   12900:	ldr	r3, [fp, #12]
   12904:	ldrb	r3, [r3, #13]
   12908:	eor	r3, r3, #1
   1290c:	uxtb	r3, r3
   12910:	cmp	r3, #0
   12914:	beq	12948 <__assert_fail@plt+0x164c>
   12918:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1291c:	ldr	r4, [r3, #32]
   12920:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12924:	mov	r1, #3
   12928:	mov	r0, #0
   1292c:	bl	1b060 <__assert_fail@plt+0x9d64>
   12930:	mov	r3, r0
   12934:	movw	r2, #63972	; 0xf9e4
   12938:	movt	r2, #1
   1293c:	mov	r1, r4
   12940:	mov	r0, #0
   12944:	bl	11110 <error@plt>
   12948:	mov	r3, #0
   1294c:	strb	r3, [fp, #-17]	; 0xffffffef
   12950:	b	12a20 <__assert_fail@plt+0x1724>
   12954:	ldr	r3, [fp, #12]
   12958:	ldrb	r3, [r3, #13]
   1295c:	eor	r3, r3, #1
   12960:	uxtb	r3, r3
   12964:	cmp	r3, #0
   12968:	beq	129a4 <__assert_fail@plt+0x16a8>
   1296c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12970:	ldr	r4, [r3, #32]
   12974:	movw	r0, #63976	; 0xf9e8
   12978:	movt	r0, #1
   1297c:	bl	1117c <gettext@plt>
   12980:	mov	r5, r0
   12984:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12988:	mov	r0, #4
   1298c:	bl	1ae7c <__assert_fail@plt+0x9b80>
   12990:	mov	r3, r0
   12994:	mov	r2, r5
   12998:	mov	r1, r4
   1299c:	mov	r0, #0
   129a0:	bl	11110 <error@plt>
   129a4:	mov	r3, #0
   129a8:	strb	r3, [fp, #-17]	; 0xffffffef
   129ac:	b	12a20 <__assert_fail@plt+0x1724>
   129b0:	ldr	r1, [fp, #-164]	; 0xffffff5c
   129b4:	ldr	r0, [fp, #-160]	; 0xffffff60
   129b8:	bl	1c61c <__assert_fail@plt+0xb320>
   129bc:	mov	r3, r0
   129c0:	cmp	r3, #0
   129c4:	beq	12a1c <__assert_fail@plt+0x1720>
   129c8:	movw	r0, #64004	; 0xfa04
   129cc:	movt	r0, #1
   129d0:	bl	1117c <gettext@plt>
   129d4:	mov	r4, r0
   129d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   129dc:	mov	r1, #3
   129e0:	mov	r0, #0
   129e4:	bl	1b060 <__assert_fail@plt+0x9d64>
   129e8:	mov	r3, r0
   129ec:	mov	r2, r4
   129f0:	mov	r1, #0
   129f4:	mov	r0, #0
   129f8:	bl	11110 <error@plt>
   129fc:	mov	r3, #0
   12a00:	b	130d4 <__assert_fail@plt+0x1dd8>
   12a04:	nop	{0}
   12a08:	b	12a20 <__assert_fail@plt+0x1724>
   12a0c:	nop	{0}
   12a10:	b	12a20 <__assert_fail@plt+0x1724>
   12a14:	nop	{0}
   12a18:	b	12a20 <__assert_fail@plt+0x1724>
   12a1c:	nop	{0}
   12a20:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12a24:	eor	r3, r3, #1
   12a28:	uxtb	r3, r3
   12a2c:	cmp	r3, #0
   12a30:	beq	12a48 <__assert_fail@plt+0x174c>
   12a34:	mov	r3, #0
   12a38:	strb	r3, [fp, #-18]	; 0xffffffee
   12a3c:	mov	r3, #0
   12a40:	str	r3, [fp, #-16]
   12a44:	b	12bd0 <__assert_fail@plt+0x18d4>
   12a48:	ldr	r3, [fp, #4]
   12a4c:	cmn	r3, #1
   12a50:	bne	12ab0 <__assert_fail@plt+0x17b4>
   12a54:	ldr	r3, [fp, #8]
   12a58:	cmn	r3, #1
   12a5c:	bne	12ab0 <__assert_fail@plt+0x17b4>
   12a60:	ldr	r3, [fp, #12]
   12a64:	ldr	r3, [r3]
   12a68:	cmp	r3, #2
   12a6c:	bne	12ab0 <__assert_fail@plt+0x17b4>
   12a70:	ldr	r3, [fp, #12]
   12a74:	ldr	r3, [r3, #8]
   12a78:	cmp	r3, #0
   12a7c:	bne	12ab0 <__assert_fail@plt+0x17b4>
   12a80:	ldr	r3, [fp, #12]
   12a84:	ldrb	r3, [r3, #12]
   12a88:	eor	r3, r3, #1
   12a8c:	uxtb	r3, r3
   12a90:	cmp	r3, #0
   12a94:	beq	12ab0 <__assert_fail@plt+0x17b4>
   12a98:	mov	r3, #1
   12a9c:	strb	r3, [fp, #-18]	; 0xffffffee
   12aa0:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12aa4:	add	r3, r3, #64	; 0x40
   12aa8:	str	r3, [fp, #-16]
   12aac:	b	12bd0 <__assert_fail@plt+0x18d4>
   12ab0:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12ab4:	add	r3, r3, #64	; 0x40
   12ab8:	str	r3, [fp, #-16]
   12abc:	ldr	r3, [fp, #12]
   12ac0:	ldrb	r3, [r3, #12]
   12ac4:	cmp	r3, #0
   12ac8:	beq	12b68 <__assert_fail@plt+0x186c>
   12acc:	ldr	r3, [fp, #-16]
   12ad0:	ldr	r3, [r3, #16]
   12ad4:	and	r3, r3, #61440	; 0xf000
   12ad8:	cmp	r3, #40960	; 0xa000
   12adc:	bne	12b68 <__assert_fail@plt+0x186c>
   12ae0:	ldr	r3, [fp, #-160]	; 0xffffff60
   12ae4:	ldr	r0, [r3, #32]
   12ae8:	sub	r2, fp, #156	; 0x9c
   12aec:	mov	r3, #0
   12af0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12af4:	bl	1ec3c <__assert_fail@plt+0xd940>
   12af8:	mov	r3, r0
   12afc:	cmp	r3, #0
   12b00:	beq	12b60 <__assert_fail@plt+0x1864>
   12b04:	ldr	r3, [fp, #12]
   12b08:	ldrb	r3, [r3, #13]
   12b0c:	eor	r3, r3, #1
   12b10:	uxtb	r3, r3
   12b14:	cmp	r3, #0
   12b18:	beq	12b58 <__assert_fail@plt+0x185c>
   12b1c:	bl	111c4 <__errno_location@plt>
   12b20:	mov	r3, r0
   12b24:	ldr	r4, [r3]
   12b28:	movw	r0, #64192	; 0xfac0
   12b2c:	movt	r0, #1
   12b30:	bl	1117c <gettext@plt>
   12b34:	mov	r5, r0
   12b38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12b3c:	mov	r0, #4
   12b40:	bl	1ae7c <__assert_fail@plt+0x9b80>
   12b44:	mov	r3, r0
   12b48:	mov	r2, r5
   12b4c:	mov	r1, r4
   12b50:	mov	r0, #0
   12b54:	bl	11110 <error@plt>
   12b58:	mov	r3, #0
   12b5c:	strb	r3, [fp, #-17]	; 0xffffffef
   12b60:	sub	r3, fp, #156	; 0x9c
   12b64:	str	r3, [fp, #-16]
   12b68:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12b6c:	cmp	r3, #0
   12b70:	beq	12bbc <__assert_fail@plt+0x18c0>
   12b74:	ldr	r3, [fp, #4]
   12b78:	cmn	r3, #1
   12b7c:	beq	12b94 <__assert_fail@plt+0x1898>
   12b80:	ldr	r3, [fp, #-16]
   12b84:	ldr	r3, [r3, #24]
   12b88:	ldr	r2, [fp, #4]
   12b8c:	cmp	r2, r3
   12b90:	bne	12bbc <__assert_fail@plt+0x18c0>
   12b94:	ldr	r3, [fp, #8]
   12b98:	cmn	r3, #1
   12b9c:	beq	12bb4 <__assert_fail@plt+0x18b8>
   12ba0:	ldr	r3, [fp, #-16]
   12ba4:	ldr	r3, [r3, #28]
   12ba8:	ldr	r2, [fp, #8]
   12bac:	cmp	r2, r3
   12bb0:	bne	12bbc <__assert_fail@plt+0x18c0>
   12bb4:	mov	r3, #1
   12bb8:	b	12bc0 <__assert_fail@plt+0x18c4>
   12bbc:	mov	r3, #0
   12bc0:	strb	r3, [fp, #-18]	; 0xffffffee
   12bc4:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12bc8:	and	r3, r3, #1
   12bcc:	strb	r3, [fp, #-18]	; 0xffffffee
   12bd0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12bd4:	cmp	r3, #0
   12bd8:	beq	12d38 <__assert_fail@plt+0x1a3c>
   12bdc:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12be0:	ldrh	r3, [r3, #56]	; 0x38
   12be4:	cmp	r3, #1
   12be8:	beq	12c1c <__assert_fail@plt+0x1920>
   12bec:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12bf0:	ldrh	r3, [r3, #56]	; 0x38
   12bf4:	cmp	r3, #2
   12bf8:	beq	12c1c <__assert_fail@plt+0x1920>
   12bfc:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12c00:	ldrh	r3, [r3, #56]	; 0x38
   12c04:	cmp	r3, #6
   12c08:	beq	12c1c <__assert_fail@plt+0x1920>
   12c0c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12c10:	ldrh	r3, [r3, #56]	; 0x38
   12c14:	cmp	r3, #4
   12c18:	bne	12d38 <__assert_fail@plt+0x1a3c>
   12c1c:	ldr	r3, [fp, #12]
   12c20:	ldr	r3, [r3, #8]
   12c24:	cmp	r3, #0
   12c28:	beq	12d38 <__assert_fail@plt+0x1a3c>
   12c2c:	ldr	r3, [fp, #-16]
   12c30:	ldrd	r0, [r3, #96]	; 0x60
   12c34:	ldr	r3, [fp, #12]
   12c38:	ldr	r3, [r3, #8]
   12c3c:	ldrd	r2, [r3]
   12c40:	cmp	r1, r3
   12c44:	cmpeq	r0, r2
   12c48:	bne	12d38 <__assert_fail@plt+0x1a3c>
   12c4c:	ldr	r3, [fp, #-16]
   12c50:	ldrd	r0, [r3]
   12c54:	ldr	r3, [fp, #12]
   12c58:	ldr	r3, [r3, #8]
   12c5c:	ldrd	r2, [r3, #8]
   12c60:	cmp	r1, r3
   12c64:	cmpeq	r0, r2
   12c68:	bne	12d38 <__assert_fail@plt+0x1a3c>
   12c6c:	movw	r1, #63788	; 0xf92c
   12c70:	movt	r1, #1
   12c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c78:	bl	10ff0 <strcmp@plt>
   12c7c:	mov	r3, r0
   12c80:	cmp	r3, #0
   12c84:	bne	12cbc <__assert_fail@plt+0x19c0>
   12c88:	movw	r0, #63792	; 0xf930
   12c8c:	movt	r0, #1
   12c90:	bl	1117c <gettext@plt>
   12c94:	mov	r4, r0
   12c98:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12c9c:	mov	r0, #4
   12ca0:	bl	1ae7c <__assert_fail@plt+0x9b80>
   12ca4:	mov	r3, r0
   12ca8:	mov	r2, r4
   12cac:	mov	r1, #0
   12cb0:	mov	r0, #0
   12cb4:	bl	11110 <error@plt>
   12cb8:	b	12d10 <__assert_fail@plt+0x1a14>
   12cbc:	movw	r0, #63840	; 0xf960
   12cc0:	movt	r0, #1
   12cc4:	bl	1117c <gettext@plt>
   12cc8:	mov	r4, r0
   12ccc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12cd0:	mov	r1, #4
   12cd4:	mov	r0, #0
   12cd8:	bl	1adc8 <__assert_fail@plt+0x9acc>
   12cdc:	mov	r5, r0
   12ce0:	movw	r2, #63788	; 0xf92c
   12ce4:	movt	r2, #1
   12ce8:	mov	r1, #4
   12cec:	mov	r0, #1
   12cf0:	bl	1adc8 <__assert_fail@plt+0x9acc>
   12cf4:	mov	r3, r0
   12cf8:	str	r3, [sp]
   12cfc:	mov	r3, r5
   12d00:	mov	r2, r4
   12d04:	mov	r1, #0
   12d08:	mov	r0, #0
   12d0c:	bl	11110 <error@plt>
   12d10:	movw	r0, #63900	; 0xf99c
   12d14:	movt	r0, #1
   12d18:	bl	1117c <gettext@plt>
   12d1c:	mov	r3, r0
   12d20:	mov	r2, r3
   12d24:	mov	r1, #0
   12d28:	mov	r0, #0
   12d2c:	bl	11110 <error@plt>
   12d30:	mov	r3, #0
   12d34:	b	130d4 <__assert_fail@plt+0x1dd8>
   12d38:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12d3c:	cmp	r3, #0
   12d40:	beq	12f0c <__assert_fail@plt+0x1c10>
   12d44:	ldr	r3, [fp, #12]
   12d48:	ldrb	r3, [r3, #12]
   12d4c:	eor	r3, r3, #1
   12d50:	uxtb	r3, r3
   12d54:	cmp	r3, #0
   12d58:	beq	12dc4 <__assert_fail@plt+0x1ac8>
   12d5c:	ldr	r3, [fp, #-160]	; 0xffffff60
   12d60:	ldr	r0, [r3, #32]
   12d64:	ldr	r3, [fp, #-172]	; 0xffffff54
   12d68:	ldr	r2, [fp, #-168]	; 0xffffff58
   12d6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12d70:	bl	1330c <__assert_fail@plt+0x2010>
   12d74:	mov	r3, r0
   12d78:	cmp	r3, #0
   12d7c:	moveq	r3, #1
   12d80:	movne	r3, #0
   12d84:	strb	r3, [fp, #-17]	; 0xffffffef
   12d88:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12d8c:	eor	r3, r3, #1
   12d90:	uxtb	r3, r3
   12d94:	cmp	r3, #0
   12d98:	beq	12e78 <__assert_fail@plt+0x1b7c>
   12d9c:	bl	111c4 <__errno_location@plt>
   12da0:	mov	r3, r0
   12da4:	ldr	r3, [r3]
   12da8:	cmp	r3, #95	; 0x5f
   12dac:	bne	12e78 <__assert_fail@plt+0x1b7c>
   12db0:	mov	r3, #1
   12db4:	strb	r3, [fp, #-17]	; 0xffffffef
   12db8:	mov	r3, #0
   12dbc:	strb	r3, [fp, #-19]	; 0xffffffed
   12dc0:	b	12e78 <__assert_fail@plt+0x1b7c>
   12dc4:	ldr	r3, [fp, #-160]	; 0xffffff60
   12dc8:	ldr	r0, [r3, #32]
   12dcc:	ldr	r3, [fp, #8]
   12dd0:	str	r3, [sp, #8]
   12dd4:	ldr	r3, [fp, #4]
   12dd8:	str	r3, [sp, #4]
   12ddc:	ldr	r3, [fp, #-172]	; 0xffffff54
   12de0:	str	r3, [sp]
   12de4:	ldr	r3, [fp, #-168]	; 0xffffff58
   12de8:	ldr	r2, [fp, #-16]
   12dec:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12df0:	bl	12414 <__assert_fail@plt+0x1118>
   12df4:	str	r0, [fp, #-36]	; 0xffffffdc
   12df8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12dfc:	sub	r3, r3, #2
   12e00:	cmp	r3, #4
   12e04:	ldrls	pc, [pc, r3, lsl #2]
   12e08:	b	12e70 <__assert_fail@plt+0x1b74>
   12e0c:	andeq	r2, r1, r4, ror lr
   12e10:	andeq	r2, r1, ip, asr lr
   12e14:	andeq	r2, r1, ip, asr lr
   12e18:	andeq	r2, r1, r0, lsr #28
   12e1c:	andeq	r2, r1, r0, asr lr
   12e20:	ldr	r3, [fp, #-160]	; 0xffffff60
   12e24:	ldr	r0, [r3, #32]
   12e28:	ldr	r3, [fp, #-172]	; 0xffffff54
   12e2c:	ldr	r2, [fp, #-168]	; 0xffffff58
   12e30:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12e34:	bl	132b8 <__assert_fail@plt+0x1fbc>
   12e38:	mov	r3, r0
   12e3c:	cmp	r3, #0
   12e40:	moveq	r3, #1
   12e44:	movne	r3, #0
   12e48:	strb	r3, [fp, #-17]	; 0xffffffef
   12e4c:	b	12e78 <__assert_fail@plt+0x1b7c>
   12e50:	mov	r3, #0
   12e54:	strb	r3, [fp, #-17]	; 0xffffffef
   12e58:	b	12e78 <__assert_fail@plt+0x1b7c>
   12e5c:	mov	r3, #0
   12e60:	strb	r3, [fp, #-18]	; 0xffffffee
   12e64:	mov	r3, #0
   12e68:	strb	r3, [fp, #-17]	; 0xffffffef
   12e6c:	b	12e78 <__assert_fail@plt+0x1b7c>
   12e70:	bl	112b4 <abort@plt>
   12e74:	nop	{0}
   12e78:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12e7c:	cmp	r3, #0
   12e80:	beq	12f0c <__assert_fail@plt+0x1c10>
   12e84:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12e88:	eor	r3, r3, #1
   12e8c:	uxtb	r3, r3
   12e90:	cmp	r3, #0
   12e94:	beq	12f0c <__assert_fail@plt+0x1c10>
   12e98:	ldr	r3, [fp, #12]
   12e9c:	ldrb	r3, [r3, #13]
   12ea0:	eor	r3, r3, #1
   12ea4:	uxtb	r3, r3
   12ea8:	cmp	r3, #0
   12eac:	beq	12f0c <__assert_fail@plt+0x1c10>
   12eb0:	bl	111c4 <__errno_location@plt>
   12eb4:	mov	r3, r0
   12eb8:	ldr	r4, [r3]
   12ebc:	ldr	r3, [fp, #-168]	; 0xffffff58
   12ec0:	cmn	r3, #1
   12ec4:	beq	12edc <__assert_fail@plt+0x1be0>
   12ec8:	movw	r0, #64216	; 0xfad8
   12ecc:	movt	r0, #1
   12ed0:	bl	1117c <gettext@plt>
   12ed4:	mov	r5, r0
   12ed8:	b	12eec <__assert_fail@plt+0x1bf0>
   12edc:	movw	r0, #64244	; 0xfaf4
   12ee0:	movt	r0, #1
   12ee4:	bl	1117c <gettext@plt>
   12ee8:	mov	r5, r0
   12eec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12ef0:	mov	r0, #4
   12ef4:	bl	1ae7c <__assert_fail@plt+0x9b80>
   12ef8:	mov	r3, r0
   12efc:	mov	r2, r5
   12f00:	mov	r1, r4
   12f04:	mov	r0, #0
   12f08:	bl	11110 <error@plt>
   12f0c:	ldr	r3, [fp, #12]
   12f10:	ldr	r3, [r3]
   12f14:	cmp	r3, #2
   12f18:	beq	130a8 <__assert_fail@plt+0x1dac>
   12f1c:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12f20:	cmp	r3, #0
   12f24:	beq	12f88 <__assert_fail@plt+0x1c8c>
   12f28:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12f2c:	cmp	r3, #0
   12f30:	beq	12f88 <__assert_fail@plt+0x1c8c>
   12f34:	ldrb	r3, [fp, #-19]	; 0xffffffed
   12f38:	cmp	r3, #0
   12f3c:	beq	12f88 <__assert_fail@plt+0x1c8c>
   12f40:	ldr	r3, [fp, #-168]	; 0xffffff58
   12f44:	cmn	r3, #1
   12f48:	beq	12f60 <__assert_fail@plt+0x1c64>
   12f4c:	ldr	r3, [fp, #-16]
   12f50:	ldr	r3, [r3, #24]
   12f54:	ldr	r2, [fp, #-168]	; 0xffffff58
   12f58:	cmp	r2, r3
   12f5c:	bne	12f80 <__assert_fail@plt+0x1c84>
   12f60:	ldr	r3, [fp, #-172]	; 0xffffff54
   12f64:	cmn	r3, #1
   12f68:	beq	12f88 <__assert_fail@plt+0x1c8c>
   12f6c:	ldr	r3, [fp, #-16]
   12f70:	ldr	r3, [r3, #28]
   12f74:	ldr	r2, [fp, #-172]	; 0xffffff54
   12f78:	cmp	r2, r3
   12f7c:	beq	12f88 <__assert_fail@plt+0x1c8c>
   12f80:	mov	r3, #1
   12f84:	b	12f8c <__assert_fail@plt+0x1c90>
   12f88:	mov	r3, #0
   12f8c:	strb	r3, [fp, #-37]	; 0xffffffdb
   12f90:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12f94:	and	r3, r3, #1
   12f98:	strb	r3, [fp, #-37]	; 0xffffffdb
   12f9c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12fa0:	cmp	r3, #0
   12fa4:	bne	12fb8 <__assert_fail@plt+0x1cbc>
   12fa8:	ldr	r3, [fp, #12]
   12fac:	ldr	r3, [r3]
   12fb0:	cmp	r3, #0
   12fb4:	bne	130a8 <__assert_fail@plt+0x1dac>
   12fb8:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12fbc:	eor	r3, r3, #1
   12fc0:	uxtb	r3, r3
   12fc4:	cmp	r3, #0
   12fc8:	beq	12fd4 <__assert_fail@plt+0x1cd8>
   12fcc:	mov	r3, #3
   12fd0:	b	13010 <__assert_fail@plt+0x1d14>
   12fd4:	ldrb	r3, [fp, #-19]	; 0xffffffed
   12fd8:	eor	r3, r3, #1
   12fdc:	uxtb	r3, r3
   12fe0:	cmp	r3, #0
   12fe4:	beq	12ff0 <__assert_fail@plt+0x1cf4>
   12fe8:	mov	r3, #1
   12fec:	b	13010 <__assert_fail@plt+0x1d14>
   12ff0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12ff4:	eor	r3, r3, #1
   12ff8:	uxtb	r3, r3
   12ffc:	cmp	r3, #0
   13000:	beq	1300c <__assert_fail@plt+0x1d10>
   13004:	mov	r3, #4
   13008:	b	13010 <__assert_fail@plt+0x1d14>
   1300c:	mov	r3, #2
   13010:	str	r3, [fp, #-44]	; 0xffffffd4
   13014:	ldr	r3, [fp, #-16]
   13018:	cmp	r3, #0
   1301c:	beq	13038 <__assert_fail@plt+0x1d3c>
   13020:	ldr	r3, [fp, #-16]
   13024:	ldr	r3, [r3, #24]
   13028:	mov	r0, r3
   1302c:	bl	12010 <__assert_fail@plt+0xd14>
   13030:	mov	r3, r0
   13034:	b	1303c <__assert_fail@plt+0x1d40>
   13038:	mov	r3, #0
   1303c:	str	r3, [fp, #-48]	; 0xffffffd0
   13040:	ldr	r3, [fp, #-16]
   13044:	cmp	r3, #0
   13048:	beq	13064 <__assert_fail@plt+0x1d68>
   1304c:	ldr	r3, [fp, #-16]
   13050:	ldr	r3, [r3, #28]
   13054:	mov	r0, r3
   13058:	bl	11f9c <__assert_fail@plt+0xca0>
   1305c:	mov	r3, r0
   13060:	b	13068 <__assert_fail@plt+0x1d6c>
   13064:	mov	r3, #0
   13068:	str	r3, [fp, #-52]	; 0xffffffcc
   1306c:	ldr	r3, [fp, #12]
   13070:	ldr	r3, [r3, #16]
   13074:	ldr	r2, [fp, #12]
   13078:	ldr	r2, [r2, #20]
   1307c:	str	r2, [sp, #4]
   13080:	str	r3, [sp]
   13084:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13088:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1308c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13090:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13094:	bl	12174 <__assert_fail@plt+0xe78>
   13098:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1309c:	bl	13514 <__assert_fail@plt+0x2218>
   130a0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   130a4:	bl	13514 <__assert_fail@plt+0x2218>
   130a8:	ldr	r3, [fp, #12]
   130ac:	ldrb	r3, [r3, #4]
   130b0:	eor	r3, r3, #1
   130b4:	uxtb	r3, r3
   130b8:	cmp	r3, #0
   130bc:	beq	130d0 <__assert_fail@plt+0x1dd4>
   130c0:	mov	r2, #4
   130c4:	ldr	r1, [fp, #-164]	; 0xffffff5c
   130c8:	ldr	r0, [fp, #-160]	; 0xffffff60
   130cc:	bl	15000 <__assert_fail@plt+0x3d04>
   130d0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   130d4:	mov	r0, r3
   130d8:	sub	sp, fp, #12
   130dc:	ldrd	r4, [sp]
   130e0:	ldr	fp, [sp, #8]
   130e4:	add	sp, sp, #12
   130e8:	pop	{pc}		; (ldr pc, [sp], #4)
   130ec:	str	r4, [sp, #-12]!
   130f0:	str	fp, [sp, #4]
   130f4:	str	lr, [sp, #8]
   130f8:	add	fp, sp, #8
   130fc:	sub	sp, sp, #52	; 0x34
   13100:	str	r0, [fp, #-32]	; 0xffffffe0
   13104:	str	r1, [fp, #-36]	; 0xffffffdc
   13108:	str	r2, [fp, #-40]	; 0xffffffd8
   1310c:	str	r3, [fp, #-44]	; 0xffffffd4
   13110:	mov	r3, #1
   13114:	strb	r3, [fp, #-13]
   13118:	ldr	r3, [fp, #4]
   1311c:	cmn	r3, #1
   13120:	bne	13150 <__assert_fail@plt+0x1e54>
   13124:	ldr	r3, [fp, #8]
   13128:	cmn	r3, #1
   1312c:	bne	13150 <__assert_fail@plt+0x1e54>
   13130:	ldr	r3, [fp, #12]
   13134:	ldrb	r3, [r3, #12]
   13138:	cmp	r3, #0
   1313c:	bne	13150 <__assert_fail@plt+0x1e54>
   13140:	ldr	r3, [fp, #12]
   13144:	ldr	r3, [r3]
   13148:	cmp	r3, #2
   1314c:	beq	13158 <__assert_fail@plt+0x1e5c>
   13150:	mov	r3, #0
   13154:	b	1315c <__assert_fail@plt+0x1e60>
   13158:	mov	r3, #8
   1315c:	str	r3, [fp, #-20]	; 0xffffffec
   13160:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13164:	ldr	r3, [fp, #-20]	; 0xffffffec
   13168:	orr	r3, r2, r3
   1316c:	mov	r2, #0
   13170:	mov	r1, r3
   13174:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13178:	bl	1c588 <__assert_fail@plt+0xb28c>
   1317c:	mov	r3, r0
   13180:	str	r3, [fp, #-24]	; 0xffffffe8
   13184:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13188:	bl	14854 <__assert_fail@plt+0x3558>
   1318c:	str	r0, [fp, #-28]	; 0xffffffe4
   13190:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13194:	cmp	r3, #0
   13198:	bne	13200 <__assert_fail@plt+0x1f04>
   1319c:	bl	111c4 <__errno_location@plt>
   131a0:	mov	r3, r0
   131a4:	ldr	r3, [r3]
   131a8:	cmp	r3, #0
   131ac:	beq	13250 <__assert_fail@plt+0x1f54>
   131b0:	ldr	r3, [fp, #12]
   131b4:	ldrb	r3, [r3, #13]
   131b8:	eor	r3, r3, #1
   131bc:	uxtb	r3, r3
   131c0:	cmp	r3, #0
   131c4:	beq	131f4 <__assert_fail@plt+0x1ef8>
   131c8:	bl	111c4 <__errno_location@plt>
   131cc:	mov	r3, r0
   131d0:	ldr	r4, [r3]
   131d4:	movw	r0, #64268	; 0xfb0c
   131d8:	movt	r0, #1
   131dc:	bl	1117c <gettext@plt>
   131e0:	mov	r3, r0
   131e4:	mov	r2, r3
   131e8:	mov	r1, r4
   131ec:	mov	r0, #0
   131f0:	bl	11110 <error@plt>
   131f4:	mov	r3, #0
   131f8:	strb	r3, [fp, #-13]
   131fc:	b	13250 <__assert_fail@plt+0x1f54>
   13200:	ldr	r3, [fp, #12]
   13204:	str	r3, [sp, #8]
   13208:	ldr	r3, [fp, #8]
   1320c:	str	r3, [sp, #4]
   13210:	ldr	r3, [fp, #4]
   13214:	str	r3, [sp]
   13218:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1321c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13220:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13224:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13228:	bl	12664 <__assert_fail@plt+0x1368>
   1322c:	mov	r3, r0
   13230:	mov	r2, r3
   13234:	ldrb	r3, [fp, #-13]
   13238:	and	r3, r3, r2
   1323c:	cmp	r3, #0
   13240:	movne	r3, #1
   13244:	moveq	r3, #0
   13248:	strb	r3, [fp, #-13]
   1324c:	b	13184 <__assert_fail@plt+0x1e88>
   13250:	nop	{0}
   13254:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13258:	bl	142f0 <__assert_fail@plt+0x2ff4>
   1325c:	mov	r3, r0
   13260:	cmp	r3, #0
   13264:	beq	1329c <__assert_fail@plt+0x1fa0>
   13268:	bl	111c4 <__errno_location@plt>
   1326c:	mov	r3, r0
   13270:	ldr	r4, [r3]
   13274:	movw	r0, #64284	; 0xfb1c
   13278:	movt	r0, #1
   1327c:	bl	1117c <gettext@plt>
   13280:	mov	r3, r0
   13284:	mov	r2, r3
   13288:	mov	r1, r4
   1328c:	mov	r0, #0
   13290:	bl	11110 <error@plt>
   13294:	mov	r3, #0
   13298:	strb	r3, [fp, #-13]
   1329c:	ldrb	r3, [fp, #-13]
   132a0:	mov	r0, r3
   132a4:	sub	sp, fp, #8
   132a8:	ldr	r4, [sp]
   132ac:	ldr	fp, [sp, #4]
   132b0:	add	sp, sp, #8
   132b4:	pop	{pc}		; (ldr pc, [sp], #4)
   132b8:	str	fp, [sp, #-8]!
   132bc:	str	lr, [sp, #4]
   132c0:	add	fp, sp, #4
   132c4:	sub	sp, sp, #24
   132c8:	str	r0, [fp, #-8]
   132cc:	str	r1, [fp, #-12]
   132d0:	str	r2, [fp, #-16]
   132d4:	str	r3, [fp, #-20]	; 0xffffffec
   132d8:	mov	r3, #0
   132dc:	str	r3, [sp]
   132e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e4:	ldr	r2, [fp, #-16]
   132e8:	ldr	r1, [fp, #-12]
   132ec:	ldr	r0, [fp, #-8]
   132f0:	bl	11284 <fchownat@plt>
   132f4:	mov	r3, r0
   132f8:	mov	r0, r3
   132fc:	sub	sp, fp, #4
   13300:	ldr	fp, [sp]
   13304:	add	sp, sp, #4
   13308:	pop	{pc}		; (ldr pc, [sp], #4)
   1330c:	str	fp, [sp, #-8]!
   13310:	str	lr, [sp, #4]
   13314:	add	fp, sp, #4
   13318:	sub	sp, sp, #24
   1331c:	str	r0, [fp, #-8]
   13320:	str	r1, [fp, #-12]
   13324:	str	r2, [fp, #-16]
   13328:	str	r3, [fp, #-20]	; 0xffffffec
   1332c:	mov	r3, #256	; 0x100
   13330:	str	r3, [sp]
   13334:	ldr	r3, [fp, #-20]	; 0xffffffec
   13338:	ldr	r2, [fp, #-16]
   1333c:	ldr	r1, [fp, #-12]
   13340:	ldr	r0, [fp, #-8]
   13344:	bl	11284 <fchownat@plt>
   13348:	mov	r3, r0
   1334c:	mov	r0, r3
   13350:	sub	sp, fp, #4
   13354:	ldr	fp, [sp]
   13358:	add	sp, sp, #4
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	push	{fp}		; (str fp, [sp, #-4]!)
   13364:	add	fp, sp, #0
   13368:	sub	sp, sp, #12
   1336c:	str	r0, [fp, #-8]
   13370:	movw	r3, #4536	; 0x11b8
   13374:	movt	r3, #3
   13378:	ldr	r2, [fp, #-8]
   1337c:	str	r2, [r3]
   13380:	nop	{0}
   13384:	add	sp, fp, #0
   13388:	pop	{fp}		; (ldr fp, [sp], #4)
   1338c:	bx	lr
   13390:	push	{fp}		; (str fp, [sp, #-4]!)
   13394:	add	fp, sp, #0
   13398:	sub	sp, sp, #12
   1339c:	mov	r3, r0
   133a0:	strb	r3, [fp, #-5]
   133a4:	movw	r3, #4540	; 0x11bc
   133a8:	movt	r3, #3
   133ac:	ldrb	r2, [fp, #-5]
   133b0:	strb	r2, [r3]
   133b4:	nop	{0}
   133b8:	add	sp, fp, #0
   133bc:	pop	{fp}		; (ldr fp, [sp], #4)
   133c0:	bx	lr
   133c4:	str	r4, [sp, #-12]!
   133c8:	str	fp, [sp, #4]
   133cc:	str	lr, [sp, #8]
   133d0:	add	fp, sp, #8
   133d4:	sub	sp, sp, #20
   133d8:	movw	r3, #4500	; 0x1194
   133dc:	movt	r3, #3
   133e0:	ldr	r3, [r3]
   133e4:	mov	r0, r3
   133e8:	bl	1d570 <__assert_fail@plt+0xc274>
   133ec:	mov	r3, r0
   133f0:	cmp	r3, #0
   133f4:	beq	134c8 <__assert_fail@plt+0x21cc>
   133f8:	movw	r3, #4540	; 0x11bc
   133fc:	movt	r3, #3
   13400:	ldrb	r3, [r3]
   13404:	eor	r3, r3, #1
   13408:	uxtb	r3, r3
   1340c:	cmp	r3, #0
   13410:	bne	13428 <__assert_fail@plt+0x212c>
   13414:	bl	111c4 <__errno_location@plt>
   13418:	mov	r3, r0
   1341c:	ldr	r3, [r3]
   13420:	cmp	r3, #32
   13424:	beq	134c8 <__assert_fail@plt+0x21cc>
   13428:	movw	r0, #64320	; 0xfb40
   1342c:	movt	r0, #1
   13430:	bl	1117c <gettext@plt>
   13434:	str	r0, [fp, #-16]
   13438:	movw	r3, #4536	; 0x11b8
   1343c:	movt	r3, #3
   13440:	ldr	r3, [r3]
   13444:	cmp	r3, #0
   13448:	beq	13494 <__assert_fail@plt+0x2198>
   1344c:	bl	111c4 <__errno_location@plt>
   13450:	mov	r3, r0
   13454:	ldr	r4, [r3]
   13458:	movw	r3, #4536	; 0x11b8
   1345c:	movt	r3, #3
   13460:	ldr	r3, [r3]
   13464:	mov	r0, r3
   13468:	bl	1afe8 <__assert_fail@plt+0x9cec>
   1346c:	mov	r2, r0
   13470:	ldr	r3, [fp, #-16]
   13474:	str	r3, [sp]
   13478:	mov	r3, r2
   1347c:	movw	r2, #64332	; 0xfb4c
   13480:	movt	r2, #1
   13484:	mov	r1, r4
   13488:	mov	r0, #0
   1348c:	bl	11110 <error@plt>
   13490:	b	134b4 <__assert_fail@plt+0x21b8>
   13494:	bl	111c4 <__errno_location@plt>
   13498:	mov	r3, r0
   1349c:	ldr	r1, [r3]
   134a0:	ldr	r3, [fp, #-16]
   134a4:	movw	r2, #64340	; 0xfb54
   134a8:	movt	r2, #1
   134ac:	mov	r0, #0
   134b0:	bl	11110 <error@plt>
   134b4:	movw	r3, #4408	; 0x1138
   134b8:	movt	r3, #3
   134bc:	ldr	r3, [r3]
   134c0:	mov	r0, r3
   134c4:	bl	11038 <_exit@plt>
   134c8:	movw	r3, #4496	; 0x1190
   134cc:	movt	r3, #3
   134d0:	ldr	r3, [r3]
   134d4:	mov	r0, r3
   134d8:	bl	1d570 <__assert_fail@plt+0xc274>
   134dc:	mov	r3, r0
   134e0:	cmp	r3, #0
   134e4:	beq	134fc <__assert_fail@plt+0x2200>
   134e8:	movw	r3, #4408	; 0x1138
   134ec:	movt	r3, #3
   134f0:	ldr	r3, [r3]
   134f4:	mov	r0, r3
   134f8:	bl	11038 <_exit@plt>
   134fc:	nop	{0}
   13500:	sub	sp, fp, #8
   13504:	ldr	r4, [sp]
   13508:	ldr	fp, [sp, #4]
   1350c:	add	sp, sp, #8
   13510:	pop	{pc}		; (ldr pc, [sp], #4)
   13514:	str	r4, [sp, #-12]!
   13518:	str	fp, [sp, #4]
   1351c:	str	lr, [sp, #8]
   13520:	add	fp, sp, #8
   13524:	sub	sp, sp, #20
   13528:	str	r0, [fp, #-24]	; 0xffffffe8
   1352c:	bl	111c4 <__errno_location@plt>
   13530:	mov	r3, r0
   13534:	ldr	r3, [r3]
   13538:	str	r3, [fp, #-20]	; 0xffffffec
   1353c:	bl	111c4 <__errno_location@plt>
   13540:	mov	r3, r0
   13544:	ldr	r3, [r3]
   13548:	str	r3, [fp, #-16]
   1354c:	bl	111c4 <__errno_location@plt>
   13550:	mov	r2, r0
   13554:	mov	r3, #0
   13558:	str	r3, [r2]
   1355c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13560:	bl	1102c <free@plt>
   13564:	bl	111c4 <__errno_location@plt>
   13568:	mov	r3, r0
   1356c:	ldr	r3, [r3]
   13570:	cmp	r3, #0
   13574:	moveq	r3, #1
   13578:	movne	r3, #0
   1357c:	uxtb	r3, r3
   13580:	mov	r4, r3
   13584:	bl	111c4 <__errno_location@plt>
   13588:	mov	r2, r0
   1358c:	lsl	r3, r4, #2
   13590:	sub	r1, fp, #12
   13594:	add	r3, r1, r3
   13598:	ldr	r3, [r3, #-8]
   1359c:	str	r3, [r2]
   135a0:	nop	{0}
   135a4:	sub	sp, fp, #8
   135a8:	ldr	r4, [sp]
   135ac:	ldr	fp, [sp, #4]
   135b0:	add	sp, sp, #8
   135b4:	pop	{pc}		; (ldr pc, [sp], #4)
   135b8:	push	{fp}		; (str fp, [sp, #-4]!)
   135bc:	add	fp, sp, #0
   135c0:	sub	sp, sp, #20
   135c4:	str	r0, [fp, #-16]
   135c8:	str	r1, [fp, #-20]	; 0xffffffec
   135cc:	ldr	r3, [fp, #-16]
   135d0:	str	r3, [fp, #-8]
   135d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   135d8:	str	r3, [fp, #-12]
   135dc:	ldr	r3, [fp, #-8]
   135e0:	ldrd	r0, [r3, #8]
   135e4:	ldr	r3, [fp, #-12]
   135e8:	ldrd	r2, [r3, #8]
   135ec:	cmp	r1, r3
   135f0:	cmpeq	r0, r2
   135f4:	bne	1361c <__assert_fail@plt+0x2320>
   135f8:	ldr	r3, [fp, #-8]
   135fc:	ldrd	r0, [r3]
   13600:	ldr	r3, [fp, #-12]
   13604:	ldrd	r2, [r3]
   13608:	cmp	r1, r3
   1360c:	cmpeq	r0, r2
   13610:	bne	1361c <__assert_fail@plt+0x2320>
   13614:	mov	r3, #1
   13618:	b	13620 <__assert_fail@plt+0x2324>
   1361c:	mov	r3, #0
   13620:	and	r3, r3, #1
   13624:	uxtb	r3, r3
   13628:	mov	r0, r3
   1362c:	add	sp, fp, #0
   13630:	pop	{fp}		; (ldr fp, [sp], #4)
   13634:	bx	lr
   13638:	str	fp, [sp, #-8]!
   1363c:	str	lr, [sp, #4]
   13640:	add	fp, sp, #4
   13644:	sub	sp, sp, #16
   13648:	str	r0, [fp, #-16]
   1364c:	str	r1, [fp, #-20]	; 0xffffffec
   13650:	ldr	r3, [fp, #-16]
   13654:	str	r3, [fp, #-8]
   13658:	ldr	r3, [fp, #-8]
   1365c:	ldrd	r0, [r3, #8]
   13660:	ldr	r3, [fp, #-20]	; 0xffffffec
   13664:	mov	r2, r3
   13668:	mov	r3, #0
   1366c:	bl	1ea1c <__assert_fail@plt+0xd720>
   13670:	mov	r3, r2
   13674:	mov	r0, r3
   13678:	sub	sp, fp, #4
   1367c:	ldr	fp, [sp]
   13680:	add	sp, sp, #4
   13684:	pop	{pc}		; (ldr pc, [sp], #4)
   13688:	str	fp, [sp, #-8]!
   1368c:	str	lr, [sp, #4]
   13690:	add	fp, sp, #4
   13694:	sub	sp, sp, #16
   13698:	str	r0, [fp, #-8]
   1369c:	ldr	r3, [fp, #-8]
   136a0:	ldr	r2, [r3, #48]	; 0x30
   136a4:	movw	r3, #258	; 0x102
   136a8:	and	r3, r3, r2
   136ac:	cmp	r3, #0
   136b0:	beq	13704 <__assert_fail@plt+0x2408>
   136b4:	movw	r3, #13588	; 0x3514
   136b8:	movt	r3, #1
   136bc:	str	r3, [sp]
   136c0:	movw	r3, #13752	; 0x35b8
   136c4:	movt	r3, #1
   136c8:	movw	r2, #13880	; 0x3638
   136cc:	movt	r2, #1
   136d0:	mov	r1, #0
   136d4:	mov	r0, #31
   136d8:	bl	175ac <__assert_fail@plt+0x62b0>
   136dc:	mov	r3, r0
   136e0:	mov	r2, r3
   136e4:	ldr	r3, [fp, #-8]
   136e8:	str	r2, [r3, #56]	; 0x38
   136ec:	ldr	r3, [fp, #-8]
   136f0:	ldr	r3, [r3, #56]	; 0x38
   136f4:	cmp	r3, #0
   136f8:	bne	13744 <__assert_fail@plt+0x2448>
   136fc:	mov	r3, #0
   13700:	b	13748 <__assert_fail@plt+0x244c>
   13704:	mov	r0, #32
   13708:	bl	1d024 <__assert_fail@plt+0xbd28>
   1370c:	mov	r3, r0
   13710:	mov	r2, r3
   13714:	ldr	r3, [fp, #-8]
   13718:	str	r2, [r3, #56]	; 0x38
   1371c:	ldr	r3, [fp, #-8]
   13720:	ldr	r3, [r3, #56]	; 0x38
   13724:	cmp	r3, #0
   13728:	bne	13734 <__assert_fail@plt+0x2438>
   1372c:	mov	r3, #0
   13730:	b	13748 <__assert_fail@plt+0x244c>
   13734:	ldr	r3, [fp, #-8]
   13738:	ldr	r3, [r3, #56]	; 0x38
   1373c:	mov	r0, r3
   13740:	bl	1d6ac <__assert_fail@plt+0xc3b0>
   13744:	mov	r3, #1
   13748:	mov	r0, r3
   1374c:	sub	sp, fp, #4
   13750:	ldr	fp, [sp]
   13754:	add	sp, sp, #4
   13758:	pop	{pc}		; (ldr pc, [sp], #4)
   1375c:	str	fp, [sp, #-8]!
   13760:	str	lr, [sp, #4]
   13764:	add	fp, sp, #4
   13768:	sub	sp, sp, #24
   1376c:	str	r0, [fp, #-24]	; 0xffffffe8
   13770:	str	r1, [fp, #-28]	; 0xffffffe4
   13774:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13778:	ldr	r2, [r3, #48]	; 0x30
   1377c:	movw	r3, #258	; 0x102
   13780:	and	r3, r3, r2
   13784:	cmp	r3, #0
   13788:	beq	1384c <__assert_fail@plt+0x2550>
   1378c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13790:	add	r3, r3, #64	; 0x40
   13794:	str	r3, [fp, #-8]
   13798:	mov	r0, #24
   1379c:	bl	1d024 <__assert_fail@plt+0xbd28>
   137a0:	mov	r3, r0
   137a4:	str	r3, [fp, #-12]
   137a8:	ldr	r3, [fp, #-12]
   137ac:	cmp	r3, #0
   137b0:	bne	137bc <__assert_fail@plt+0x24c0>
   137b4:	mov	r3, #0
   137b8:	b	13890 <__assert_fail@plt+0x2594>
   137bc:	ldr	r3, [fp, #-8]
   137c0:	ldrd	r2, [r3]
   137c4:	ldr	r1, [fp, #-12]
   137c8:	strd	r2, [r1]
   137cc:	ldr	r3, [fp, #-8]
   137d0:	ldrd	r2, [r3, #96]	; 0x60
   137d4:	ldr	r1, [fp, #-12]
   137d8:	strd	r2, [r1, #8]
   137dc:	ldr	r3, [fp, #-12]
   137e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   137e4:	str	r2, [r3, #16]
   137e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   137ec:	ldr	r3, [r3, #56]	; 0x38
   137f0:	ldr	r1, [fp, #-12]
   137f4:	mov	r0, r3
   137f8:	bl	18358 <__assert_fail@plt+0x705c>
   137fc:	str	r0, [fp, #-16]
   13800:	ldr	r2, [fp, #-16]
   13804:	ldr	r3, [fp, #-12]
   13808:	cmp	r2, r3
   1380c:	beq	1388c <__assert_fail@plt+0x2590>
   13810:	ldr	r0, [fp, #-12]
   13814:	bl	13514 <__assert_fail@plt+0x2218>
   13818:	ldr	r3, [fp, #-16]
   1381c:	cmp	r3, #0
   13820:	bne	1382c <__assert_fail@plt+0x2530>
   13824:	mov	r3, #0
   13828:	b	13890 <__assert_fail@plt+0x2594>
   1382c:	ldr	r3, [fp, #-16]
   13830:	ldr	r2, [r3, #16]
   13834:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13838:	str	r2, [r3]
   1383c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13840:	mov	r2, #2
   13844:	strh	r2, [r3, #56]	; 0x38
   13848:	b	1388c <__assert_fail@plt+0x2590>
   1384c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13850:	ldr	r2, [r3, #56]	; 0x38
   13854:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13858:	add	r3, r3, #64	; 0x40
   1385c:	mov	r1, r3
   13860:	mov	r0, r2
   13864:	bl	1d6ec <__assert_fail@plt+0xc3f0>
   13868:	mov	r3, r0
   1386c:	cmp	r3, #0
   13870:	beq	1388c <__assert_fail@plt+0x2590>
   13874:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13878:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1387c:	str	r2, [r3]
   13880:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13884:	mov	r2, #2
   13888:	strh	r2, [r3, #56]	; 0x38
   1388c:	mov	r3, #1
   13890:	mov	r0, r3
   13894:	sub	sp, fp, #4
   13898:	ldr	fp, [sp]
   1389c:	add	sp, sp, #4
   138a0:	pop	{pc}		; (ldr pc, [sp], #4)
   138a4:	str	fp, [sp, #-8]!
   138a8:	str	lr, [sp, #4]
   138ac:	add	fp, sp, #4
   138b0:	sub	sp, sp, #48	; 0x30
   138b4:	str	r0, [fp, #-48]	; 0xffffffd0
   138b8:	str	r1, [fp, #-52]	; 0xffffffcc
   138bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   138c0:	add	r3, r3, #64	; 0x40
   138c4:	str	r3, [fp, #-8]
   138c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138cc:	ldr	r2, [r3, #48]	; 0x30
   138d0:	movw	r3, #258	; 0x102
   138d4:	and	r3, r3, r2
   138d8:	cmp	r3, #0
   138dc:	beq	13930 <__assert_fail@plt+0x2634>
   138e0:	ldr	r3, [fp, #-8]
   138e4:	ldrd	r2, [r3]
   138e8:	strd	r2, [fp, #-44]	; 0xffffffd4
   138ec:	ldr	r3, [fp, #-8]
   138f0:	ldrd	r2, [r3, #96]	; 0x60
   138f4:	strd	r2, [fp, #-36]	; 0xffffffdc
   138f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138fc:	ldr	r3, [r3, #56]	; 0x38
   13900:	sub	r2, fp, #44	; 0x2c
   13904:	mov	r1, r2
   13908:	mov	r0, r3
   1390c:	bl	183c8 <__assert_fail@plt+0x70cc>
   13910:	str	r0, [fp, #-12]
   13914:	ldr	r3, [fp, #-12]
   13918:	cmp	r3, #0
   1391c:	bne	13924 <__assert_fail@plt+0x2628>
   13920:	bl	112b4 <abort@plt>
   13924:	ldr	r0, [fp, #-12]
   13928:	bl	13514 <__assert_fail@plt+0x2218>
   1392c:	b	139d8 <__assert_fail@plt+0x26dc>
   13930:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13934:	ldr	r3, [r3, #4]
   13938:	str	r3, [fp, #-16]
   1393c:	ldr	r3, [fp, #-16]
   13940:	cmp	r3, #0
   13944:	beq	139d8 <__assert_fail@plt+0x26dc>
   13948:	ldr	r3, [fp, #-16]
   1394c:	ldr	r3, [r3, #48]	; 0x30
   13950:	cmp	r3, #0
   13954:	blt	139d8 <__assert_fail@plt+0x26dc>
   13958:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1395c:	ldr	r3, [r3, #56]	; 0x38
   13960:	ldrd	r2, [r3, #16]
   13964:	orrs	r3, r2, r3
   13968:	bne	13970 <__assert_fail@plt+0x2674>
   1396c:	bl	112b4 <abort@plt>
   13970:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13974:	ldr	r3, [r3, #56]	; 0x38
   13978:	ldrd	r0, [r3]
   1397c:	ldr	r3, [fp, #-8]
   13980:	ldrd	r2, [r3, #96]	; 0x60
   13984:	cmp	r1, r3
   13988:	cmpeq	r0, r2
   1398c:	bne	139d8 <__assert_fail@plt+0x26dc>
   13990:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13994:	ldr	r3, [r3, #56]	; 0x38
   13998:	ldrd	r0, [r3, #8]
   1399c:	ldr	r3, [fp, #-8]
   139a0:	ldrd	r2, [r3]
   139a4:	cmp	r1, r3
   139a8:	cmpeq	r0, r2
   139ac:	bne	139d8 <__assert_fail@plt+0x26dc>
   139b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139b4:	ldr	r1, [r3, #56]	; 0x38
   139b8:	ldr	r3, [fp, #-16]
   139bc:	ldrd	r2, [r3, #64]	; 0x40
   139c0:	strd	r2, [r1, #8]
   139c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139c8:	ldr	r1, [r3, #56]	; 0x38
   139cc:	ldr	r3, [fp, #-16]
   139d0:	ldrd	r2, [r3, #160]	; 0xa0
   139d4:	strd	r2, [r1]
   139d8:	nop	{0}
   139dc:	sub	sp, fp, #4
   139e0:	ldr	fp, [sp]
   139e4:	add	sp, sp, #4
   139e8:	pop	{pc}		; (ldr pc, [sp], #4)
   139ec:	str	fp, [sp, #-8]!
   139f0:	str	lr, [sp, #4]
   139f4:	add	fp, sp, #4
   139f8:	sub	sp, sp, #8
   139fc:	str	r0, [fp, #-8]
   13a00:	ldr	r3, [fp, #-8]
   13a04:	ldr	r2, [r3, #48]	; 0x30
   13a08:	movw	r3, #258	; 0x102
   13a0c:	and	r3, r3, r2
   13a10:	cmp	r3, #0
   13a14:	beq	13a3c <__assert_fail@plt+0x2740>
   13a18:	ldr	r3, [fp, #-8]
   13a1c:	ldr	r3, [r3, #56]	; 0x38
   13a20:	cmp	r3, #0
   13a24:	beq	13a4c <__assert_fail@plt+0x2750>
   13a28:	ldr	r3, [fp, #-8]
   13a2c:	ldr	r3, [r3, #56]	; 0x38
   13a30:	mov	r0, r3
   13a34:	bl	178a0 <__assert_fail@plt+0x65a4>
   13a38:	b	13a4c <__assert_fail@plt+0x2750>
   13a3c:	ldr	r3, [fp, #-8]
   13a40:	ldr	r3, [r3, #56]	; 0x38
   13a44:	mov	r0, r3
   13a48:	bl	13514 <__assert_fail@plt+0x2218>
   13a4c:	nop	{0}
   13a50:	sub	sp, fp, #4
   13a54:	ldr	fp, [sp]
   13a58:	add	sp, sp, #4
   13a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a60:	str	fp, [sp, #-8]!
   13a64:	str	lr, [sp, #4]
   13a68:	add	fp, sp, #4
   13a6c:	sub	sp, sp, #16
   13a70:	str	r0, [fp, #-16]
   13a74:	b	13a98 <__assert_fail@plt+0x279c>
   13a78:	ldr	r0, [fp, #-16]
   13a7c:	bl	1875c <__assert_fail@plt+0x7460>
   13a80:	str	r0, [fp, #-8]
   13a84:	ldr	r3, [fp, #-8]
   13a88:	cmp	r3, #0
   13a8c:	blt	13a98 <__assert_fail@plt+0x279c>
   13a90:	ldr	r0, [fp, #-8]
   13a94:	bl	112c0 <close@plt>
   13a98:	ldr	r0, [fp, #-16]
   13a9c:	bl	18674 <__assert_fail@plt+0x7378>
   13aa0:	mov	r3, r0
   13aa4:	eor	r3, r3, #1
   13aa8:	uxtb	r3, r3
   13aac:	cmp	r3, #0
   13ab0:	bne	13a78 <__assert_fail@plt+0x277c>
   13ab4:	nop	{0}
   13ab8:	sub	sp, fp, #4
   13abc:	ldr	fp, [sp]
   13ac0:	add	sp, sp, #4
   13ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ac8:	str	fp, [sp, #-8]!
   13acc:	str	lr, [sp, #4]
   13ad0:	add	fp, sp, #4
   13ad4:	sub	sp, sp, #8
   13ad8:	str	r0, [fp, #-8]
   13adc:	mov	r3, r1
   13ae0:	strb	r3, [fp, #-9]
   13ae4:	ldr	r3, [fp, #-8]
   13ae8:	ldrh	r3, [r3, #56]	; 0x38
   13aec:	cmp	r3, #11
   13af0:	beq	13af8 <__assert_fail@plt+0x27fc>
   13af4:	bl	112b4 <abort@plt>
   13af8:	ldrb	r3, [fp, #-9]
   13afc:	cmp	r3, #0
   13b00:	beq	13b10 <__assert_fail@plt+0x2814>
   13b04:	mov	r2, #2
   13b08:	mov	r3, #0
   13b0c:	b	13b18 <__assert_fail@plt+0x281c>
   13b10:	mov	r2, #1
   13b14:	mov	r3, #0
   13b18:	ldr	r1, [fp, #-8]
   13b1c:	strd	r2, [r1, #112]	; 0x70
   13b20:	nop	{0}
   13b24:	sub	sp, fp, #4
   13b28:	ldr	fp, [sp]
   13b2c:	add	sp, sp, #4
   13b30:	pop	{pc}		; (ldr pc, [sp], #4)
   13b34:	str	fp, [sp, #-8]!
   13b38:	str	lr, [sp, #4]
   13b3c:	add	fp, sp, #4
   13b40:	sub	sp, sp, #24
   13b44:	str	r0, [fp, #-16]
   13b48:	str	r1, [fp, #-20]	; 0xffffffec
   13b4c:	mov	r3, r2
   13b50:	strb	r3, [fp, #-21]	; 0xffffffeb
   13b54:	ldr	r3, [fp, #-16]
   13b58:	ldr	r3, [r3, #32]
   13b5c:	str	r3, [fp, #-8]
   13b60:	ldr	r2, [fp, #-8]
   13b64:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b68:	cmp	r2, r3
   13b6c:	bne	13b80 <__assert_fail@plt+0x2884>
   13b70:	ldr	r3, [fp, #-8]
   13b74:	cmn	r3, #100	; 0x64
   13b78:	beq	13b80 <__assert_fail@plt+0x2884>
   13b7c:	bl	112b4 <abort@plt>
   13b80:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13b84:	cmp	r3, #0
   13b88:	beq	13bbc <__assert_fail@plt+0x28c0>
   13b8c:	ldr	r3, [fp, #-16]
   13b90:	add	r3, r3, #60	; 0x3c
   13b94:	ldr	r1, [fp, #-8]
   13b98:	mov	r0, r3
   13b9c:	bl	1869c <__assert_fail@plt+0x73a0>
   13ba0:	str	r0, [fp, #-12]
   13ba4:	ldr	r3, [fp, #-12]
   13ba8:	cmp	r3, #0
   13bac:	blt	13be4 <__assert_fail@plt+0x28e8>
   13bb0:	ldr	r0, [fp, #-12]
   13bb4:	bl	112c0 <close@plt>
   13bb8:	b	13be4 <__assert_fail@plt+0x28e8>
   13bbc:	ldr	r3, [fp, #-16]
   13bc0:	ldr	r3, [r3, #48]	; 0x30
   13bc4:	and	r3, r3, #4
   13bc8:	cmp	r3, #0
   13bcc:	bne	13be4 <__assert_fail@plt+0x28e8>
   13bd0:	ldr	r3, [fp, #-8]
   13bd4:	cmp	r3, #0
   13bd8:	blt	13be4 <__assert_fail@plt+0x28e8>
   13bdc:	ldr	r0, [fp, #-8]
   13be0:	bl	112c0 <close@plt>
   13be4:	ldr	r3, [fp, #-16]
   13be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bec:	str	r2, [r3, #32]
   13bf0:	nop	{0}
   13bf4:	sub	sp, fp, #4
   13bf8:	ldr	fp, [sp]
   13bfc:	add	sp, sp, #4
   13c00:	pop	{pc}		; (ldr pc, [sp], #4)
   13c04:	str	fp, [sp, #-8]!
   13c08:	str	lr, [sp, #4]
   13c0c:	add	fp, sp, #4
   13c10:	sub	sp, sp, #16
   13c14:	str	r0, [fp, #-16]
   13c18:	ldr	r3, [fp, #-16]
   13c1c:	ldr	r3, [r3, #48]	; 0x30
   13c20:	and	r3, r3, #4
   13c24:	cmp	r3, #0
   13c28:	bne	13cb8 <__assert_fail@plt+0x29bc>
   13c2c:	ldr	r3, [fp, #-16]
   13c30:	ldr	r3, [r3, #48]	; 0x30
   13c34:	and	r3, r3, #512	; 0x200
   13c38:	cmp	r3, #0
   13c3c:	beq	13c78 <__assert_fail@plt+0x297c>
   13c40:	ldr	r3, [fp, #-16]
   13c44:	ldr	r3, [r3, #48]	; 0x30
   13c48:	and	r3, r3, #512	; 0x200
   13c4c:	cmp	r3, #0
   13c50:	bne	13c60 <__assert_fail@plt+0x2964>
   13c54:	ldr	r3, [fp, #-16]
   13c58:	ldr	r3, [r3, #28]
   13c5c:	b	13c64 <__assert_fail@plt+0x2968>
   13c60:	mvn	r3, #99	; 0x63
   13c64:	mov	r2, #1
   13c68:	mov	r1, r3
   13c6c:	ldr	r0, [fp, #-16]
   13c70:	bl	13b34 <__assert_fail@plt+0x2838>
   13c74:	b	13cb8 <__assert_fail@plt+0x29bc>
   13c78:	ldr	r3, [fp, #-16]
   13c7c:	ldr	r3, [r3, #48]	; 0x30
   13c80:	and	r3, r3, #512	; 0x200
   13c84:	cmp	r3, #0
   13c88:	bne	13c98 <__assert_fail@plt+0x299c>
   13c8c:	ldr	r3, [fp, #-16]
   13c90:	ldr	r3, [r3, #28]
   13c94:	b	13c9c <__assert_fail@plt+0x29a0>
   13c98:	mvn	r3, #99	; 0x63
   13c9c:	mov	r0, r3
   13ca0:	bl	1126c <fchdir@plt>
   13ca4:	mov	r3, r0
   13ca8:	cmp	r3, #0
   13cac:	beq	13cb8 <__assert_fail@plt+0x29bc>
   13cb0:	mov	r3, #1
   13cb4:	b	13cbc <__assert_fail@plt+0x29c0>
   13cb8:	mov	r3, #0
   13cbc:	str	r3, [fp, #-8]
   13cc0:	ldr	r3, [fp, #-16]
   13cc4:	add	r3, r3, #60	; 0x3c
   13cc8:	mov	r0, r3
   13ccc:	bl	13a60 <__assert_fail@plt+0x2764>
   13cd0:	ldr	r3, [fp, #-8]
   13cd4:	mov	r0, r3
   13cd8:	sub	sp, fp, #4
   13cdc:	ldr	fp, [sp]
   13ce0:	add	sp, sp, #4
   13ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ce8:	str	fp, [sp, #-8]!
   13cec:	str	lr, [sp, #4]
   13cf0:	add	fp, sp, #4
   13cf4:	sub	sp, sp, #16
   13cf8:	str	r0, [fp, #-16]
   13cfc:	str	r1, [fp, #-20]	; 0xffffffec
   13d00:	ldr	r3, [fp, #-16]
   13d04:	ldr	r3, [r3, #48]	; 0x30
   13d08:	lsl	r3, r3, #11
   13d0c:	and	r3, r3, #32768	; 0x8000
   13d10:	orr	r3, r3, #540672	; 0x84000
   13d14:	orr	r3, r3, #2304	; 0x900
   13d18:	str	r3, [fp, #-8]
   13d1c:	ldr	r3, [fp, #-16]
   13d20:	ldr	r3, [r3, #48]	; 0x30
   13d24:	and	r3, r3, #512	; 0x200
   13d28:	cmp	r3, #0
   13d2c:	beq	13d50 <__assert_fail@plt+0x2a54>
   13d30:	ldr	r3, [fp, #-16]
   13d34:	ldr	r3, [r3, #32]
   13d38:	ldr	r2, [fp, #-8]
   13d3c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13d40:	mov	r0, r3
   13d44:	bl	188ac <__assert_fail@plt+0x75b0>
   13d48:	mov	r3, r0
   13d4c:	b	13d60 <__assert_fail@plt+0x2a64>
   13d50:	ldr	r1, [fp, #-8]
   13d54:	ldr	r0, [fp, #-20]	; 0xffffffec
   13d58:	bl	1dd04 <__assert_fail@plt+0xca08>
   13d5c:	mov	r3, r0
   13d60:	str	r3, [fp, #-12]
   13d64:	ldr	r3, [fp, #-12]
   13d68:	mov	r0, r3
   13d6c:	sub	sp, fp, #4
   13d70:	ldr	fp, [sp]
   13d74:	add	sp, sp, #4
   13d78:	pop	{pc}		; (ldr pc, [sp], #4)
   13d7c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13d80:	strd	r6, [sp, #8]
   13d84:	str	r8, [sp, #16]
   13d88:	str	fp, [sp, #20]
   13d8c:	str	lr, [sp, #24]
   13d90:	add	fp, sp, #24
   13d94:	sub	sp, sp, #36	; 0x24
   13d98:	str	r0, [fp, #-56]	; 0xffffffc8
   13d9c:	mov	r7, r1
   13da0:	str	r2, [fp, #-60]	; 0xffffffc4
   13da4:	mov	r3, #0
   13da8:	str	r3, [fp, #-32]	; 0xffffffe0
   13dac:	mov	r3, #0
   13db0:	str	r3, [fp, #-36]	; 0xffffffdc
   13db4:	bic	r3, r7, #4080	; 0xff0
   13db8:	bic	r3, r3, #15
   13dbc:	cmp	r3, #0
   13dc0:	beq	13ddc <__assert_fail@plt+0x2ae0>
   13dc4:	bl	111c4 <__errno_location@plt>
   13dc8:	mov	r2, r0
   13dcc:	mov	r3, #22
   13dd0:	str	r3, [r2]
   13dd4:	mov	r3, #0
   13dd8:	b	141fc <__assert_fail@plt+0x2f00>
   13ddc:	and	r3, r7, #4
   13de0:	cmp	r3, #0
   13de4:	beq	13e0c <__assert_fail@plt+0x2b10>
   13de8:	and	r3, r7, #512	; 0x200
   13dec:	cmp	r3, #0
   13df0:	beq	13e0c <__assert_fail@plt+0x2b10>
   13df4:	bl	111c4 <__errno_location@plt>
   13df8:	mov	r2, r0
   13dfc:	mov	r3, #22
   13e00:	str	r3, [r2]
   13e04:	mov	r3, #0
   13e08:	b	141fc <__assert_fail@plt+0x2f00>
   13e0c:	and	r3, r7, #18
   13e10:	cmp	r3, #0
   13e14:	bne	13e30 <__assert_fail@plt+0x2b34>
   13e18:	bl	111c4 <__errno_location@plt>
   13e1c:	mov	r2, r0
   13e20:	mov	r3, #22
   13e24:	str	r3, [r2]
   13e28:	mov	r3, #0
   13e2c:	b	141fc <__assert_fail@plt+0x2f00>
   13e30:	mov	r1, #96	; 0x60
   13e34:	mov	r0, #1
   13e38:	bl	1cf54 <__assert_fail@plt+0xbc58>
   13e3c:	mov	r3, r0
   13e40:	mov	r4, r3
   13e44:	cmp	r4, #0
   13e48:	bne	13e54 <__assert_fail@plt+0x2b58>
   13e4c:	mov	r3, #0
   13e50:	b	141fc <__assert_fail@plt+0x2f00>
   13e54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13e58:	str	r3, [r4, #44]	; 0x2c
   13e5c:	str	r7, [r4, #48]	; 0x30
   13e60:	ldr	r3, [r4, #48]	; 0x30
   13e64:	and	r3, r3, #2
   13e68:	cmp	r3, #0
   13e6c:	beq	13e88 <__assert_fail@plt+0x2b8c>
   13e70:	ldr	r3, [r4, #48]	; 0x30
   13e74:	orr	r3, r3, #4
   13e78:	str	r3, [r4, #48]	; 0x30
   13e7c:	ldr	r3, [r4, #48]	; 0x30
   13e80:	bic	r3, r3, #512	; 0x200
   13e84:	str	r3, [r4, #48]	; 0x30
   13e88:	mvn	r3, #99	; 0x63
   13e8c:	str	r3, [r4, #32]
   13e90:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e94:	bl	1664c <__assert_fail@plt+0x5350>
   13e98:	str	r0, [fp, #-44]	; 0xffffffd4
   13e9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13ea0:	cmp	r3, #4096	; 0x1000
   13ea4:	movcs	r3, r3
   13ea8:	movcc	r3, #4096	; 0x1000
   13eac:	mov	r1, r3
   13eb0:	mov	r0, r4
   13eb4:	bl	16420 <__assert_fail@plt+0x5124>
   13eb8:	mov	r3, r0
   13ebc:	eor	r3, r3, #1
   13ec0:	uxtb	r3, r3
   13ec4:	cmp	r3, #0
   13ec8:	bne	141ec <__assert_fail@plt+0x2ef0>
   13ecc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ed0:	ldr	r3, [r3]
   13ed4:	cmp	r3, #0
   13ed8:	beq	13f0c <__assert_fail@plt+0x2c10>
   13edc:	mov	r2, #0
   13ee0:	movw	r1, #64344	; 0xfb58
   13ee4:	movt	r1, #1
   13ee8:	mov	r0, r4
   13eec:	bl	162f0 <__assert_fail@plt+0x4ff4>
   13ef0:	str	r0, [fp, #-32]	; 0xffffffe0
   13ef4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ef8:	cmp	r3, #0
   13efc:	beq	141d8 <__assert_fail@plt+0x2edc>
   13f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13f04:	mvn	r2, #0
   13f08:	str	r2, [r3, #48]	; 0x30
   13f0c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13f10:	cmp	r3, #0
   13f14:	beq	13f28 <__assert_fail@plt+0x2c2c>
   13f18:	ldr	r3, [r4, #48]	; 0x30
   13f1c:	and	r3, r3, #1024	; 0x400
   13f20:	cmp	r3, #0
   13f24:	beq	13f30 <__assert_fail@plt+0x2c34>
   13f28:	mov	r3, #1
   13f2c:	b	13f34 <__assert_fail@plt+0x2c38>
   13f30:	mov	r3, #0
   13f34:	strb	r3, [fp, #-45]	; 0xffffffd3
   13f38:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   13f3c:	and	r3, r3, #1
   13f40:	strb	r3, [fp, #-45]	; 0xffffffd3
   13f44:	mov	r6, #0
   13f48:	mov	r8, #0
   13f4c:	b	140ac <__assert_fail@plt+0x2db0>
   13f50:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13f54:	ldr	r3, [r3]
   13f58:	mov	r0, r3
   13f5c:	bl	11188 <strlen@plt>
   13f60:	str	r0, [fp, #-40]	; 0xffffffd8
   13f64:	and	r3, r7, #2048	; 0x800
   13f68:	cmp	r3, #0
   13f6c:	bne	13fdc <__assert_fail@plt+0x2ce0>
   13f70:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13f74:	ldr	r3, [r3]
   13f78:	str	r3, [fp, #-52]	; 0xffffffcc
   13f7c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f80:	cmp	r3, #2
   13f84:	bls	13fdc <__assert_fail@plt+0x2ce0>
   13f88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f8c:	sub	r3, r3, #1
   13f90:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13f94:	add	r3, r2, r3
   13f98:	ldrb	r3, [r3]
   13f9c:	cmp	r3, #47	; 0x2f
   13fa0:	bne	13fdc <__assert_fail@plt+0x2ce0>
   13fa4:	b	13fb4 <__assert_fail@plt+0x2cb8>
   13fa8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13fac:	sub	r3, r3, #1
   13fb0:	str	r3, [fp, #-40]	; 0xffffffd8
   13fb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13fb8:	cmp	r3, #1
   13fbc:	bls	13fdc <__assert_fail@plt+0x2ce0>
   13fc0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13fc4:	sub	r3, r3, #2
   13fc8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13fcc:	add	r3, r2, r3
   13fd0:	ldrb	r3, [r3]
   13fd4:	cmp	r3, #47	; 0x2f
   13fd8:	beq	13fa8 <__assert_fail@plt+0x2cac>
   13fdc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13fe0:	ldr	r3, [r3]
   13fe4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13fe8:	mov	r1, r3
   13fec:	mov	r0, r4
   13ff0:	bl	162f0 <__assert_fail@plt+0x4ff4>
   13ff4:	mov	r5, r0
   13ff8:	cmp	r5, #0
   13ffc:	beq	141b0 <__assert_fail@plt+0x2eb4>
   14000:	mov	r3, #0
   14004:	str	r3, [r5, #48]	; 0x30
   14008:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1400c:	str	r3, [r5, #4]
   14010:	add	r3, r5, #168	; 0xa8
   14014:	str	r3, [r5, #24]
   14018:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   1401c:	cmp	r3, #0
   14020:	beq	14044 <__assert_fail@plt+0x2d48>
   14024:	cmp	r6, #0
   14028:	beq	14044 <__assert_fail@plt+0x2d48>
   1402c:	mov	r3, #11
   14030:	strh	r3, [r5, #56]	; 0x38
   14034:	mov	r1, #1
   14038:	mov	r0, r5
   1403c:	bl	13ac8 <__assert_fail@plt+0x27cc>
   14040:	b	1405c <__assert_fail@plt+0x2d60>
   14044:	mov	r2, #0
   14048:	mov	r1, r5
   1404c:	mov	r0, r4
   14050:	bl	15f3c <__assert_fail@plt+0x4c40>
   14054:	mov	r3, r0
   14058:	strh	r3, [r5, #56]	; 0x38
   1405c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14060:	cmp	r3, #0
   14064:	beq	14074 <__assert_fail@plt+0x2d78>
   14068:	str	r6, [r5, #8]
   1406c:	mov	r6, r5
   14070:	b	1409c <__assert_fail@plt+0x2da0>
   14074:	mov	r3, #0
   14078:	str	r3, [r5, #8]
   1407c:	cmp	r6, #0
   14080:	bne	14090 <__assert_fail@plt+0x2d94>
   14084:	mov	r6, r5
   14088:	str	r6, [fp, #-36]	; 0xffffffdc
   1408c:	b	1409c <__assert_fail@plt+0x2da0>
   14090:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14094:	str	r5, [r3, #8]
   14098:	str	r5, [fp, #-36]	; 0xffffffdc
   1409c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   140a0:	add	r3, r3, #4
   140a4:	str	r3, [fp, #-56]	; 0xffffffc8
   140a8:	add	r8, r8, #1
   140ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   140b0:	ldr	r3, [r3]
   140b4:	cmp	r3, #0
   140b8:	bne	13f50 <__assert_fail@plt+0x2c54>
   140bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   140c0:	cmp	r3, #0
   140c4:	beq	140e4 <__assert_fail@plt+0x2de8>
   140c8:	cmp	r8, #1
   140cc:	bls	140e4 <__assert_fail@plt+0x2de8>
   140d0:	mov	r2, r8
   140d4:	mov	r1, r6
   140d8:	mov	r0, r4
   140dc:	bl	1618c <__assert_fail@plt+0x4e90>
   140e0:	mov	r6, r0
   140e4:	mov	r2, #0
   140e8:	movw	r1, #64344	; 0xfb58
   140ec:	movt	r1, #1
   140f0:	mov	r0, r4
   140f4:	bl	162f0 <__assert_fail@plt+0x4ff4>
   140f8:	mov	r3, r0
   140fc:	str	r3, [r4]
   14100:	ldr	r3, [r4]
   14104:	cmp	r3, #0
   14108:	beq	141b8 <__assert_fail@plt+0x2ebc>
   1410c:	ldr	r3, [r4]
   14110:	str	r6, [r3, #8]
   14114:	ldr	r3, [r4]
   14118:	mov	r2, #9
   1411c:	strh	r2, [r3, #56]	; 0x38
   14120:	ldr	r3, [r4]
   14124:	mov	r2, #1
   14128:	str	r2, [r3, #48]	; 0x30
   1412c:	mov	r0, r4
   14130:	bl	13688 <__assert_fail@plt+0x238c>
   14134:	mov	r3, r0
   14138:	eor	r3, r3, #1
   1413c:	uxtb	r3, r3
   14140:	cmp	r3, #0
   14144:	bne	141c0 <__assert_fail@plt+0x2ec4>
   14148:	ldr	r3, [r4, #48]	; 0x30
   1414c:	and	r3, r3, #4
   14150:	cmp	r3, #0
   14154:	bne	14198 <__assert_fail@plt+0x2e9c>
   14158:	ldr	r3, [r4, #48]	; 0x30
   1415c:	and	r3, r3, #512	; 0x200
   14160:	cmp	r3, #0
   14164:	bne	14198 <__assert_fail@plt+0x2e9c>
   14168:	movw	r1, #64348	; 0xfb5c
   1416c:	movt	r1, #1
   14170:	mov	r0, r4
   14174:	bl	13ce8 <__assert_fail@plt+0x29ec>
   14178:	mov	r3, r0
   1417c:	str	r3, [r4, #28]
   14180:	ldr	r3, [r4, #28]
   14184:	cmp	r3, #0
   14188:	bge	14198 <__assert_fail@plt+0x2e9c>
   1418c:	ldr	r3, [r4, #48]	; 0x30
   14190:	orr	r3, r3, #4
   14194:	str	r3, [r4, #48]	; 0x30
   14198:	add	r3, r4, #60	; 0x3c
   1419c:	mvn	r1, #0
   141a0:	mov	r0, r3
   141a4:	bl	185ec <__assert_fail@plt+0x72f0>
   141a8:	mov	r3, r4
   141ac:	b	141fc <__assert_fail@plt+0x2f00>
   141b0:	nop	{0}
   141b4:	b	141c4 <__assert_fail@plt+0x2ec8>
   141b8:	nop	{0}
   141bc:	b	141c4 <__assert_fail@plt+0x2ec8>
   141c0:	nop	{0}
   141c4:	mov	r0, r6
   141c8:	bl	163c0 <__assert_fail@plt+0x50c4>
   141cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   141d0:	bl	13514 <__assert_fail@plt+0x2218>
   141d4:	b	141dc <__assert_fail@plt+0x2ee0>
   141d8:	nop	{0}
   141dc:	ldr	r3, [r4, #24]
   141e0:	mov	r0, r3
   141e4:	bl	13514 <__assert_fail@plt+0x2218>
   141e8:	b	141f0 <__assert_fail@plt+0x2ef4>
   141ec:	nop	{0}
   141f0:	mov	r0, r4
   141f4:	bl	13514 <__assert_fail@plt+0x2218>
   141f8:	mov	r3, #0
   141fc:	mov	r0, r3
   14200:	sub	sp, fp, #24
   14204:	ldrd	r4, [sp]
   14208:	ldrd	r6, [sp, #8]
   1420c:	ldr	r8, [sp, #16]
   14210:	ldr	fp, [sp, #20]
   14214:	add	sp, sp, #24
   14218:	pop	{pc}		; (ldr pc, [sp], #4)
   1421c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14220:	str	r6, [sp, #8]
   14224:	str	fp, [sp, #12]
   14228:	str	lr, [sp, #16]
   1422c:	add	fp, sp, #16
   14230:	sub	sp, sp, #12
   14234:	str	r0, [fp, #-24]	; 0xffffffe8
   14238:	mov	r4, r1
   1423c:	ldr	r3, [r4, #52]	; 0x34
   14240:	str	r3, [r4, #40]	; 0x28
   14244:	ldr	r6, [r4, #40]	; 0x28
   14248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1424c:	ldr	r3, [r3, #24]
   14250:	add	r1, r4, #168	; 0xa8
   14254:	add	r2, r6, #1
   14258:	mov	r0, r3
   1425c:	bl	11020 <memmove@plt>
   14260:	add	r3, r4, #168	; 0xa8
   14264:	mov	r1, #47	; 0x2f
   14268:	mov	r0, r3
   1426c:	bl	11230 <strrchr@plt>
   14270:	mov	r5, r0
   14274:	cmp	r5, #0
   14278:	beq	142c0 <__assert_fail@plt+0x2fc4>
   1427c:	add	r3, r4, #168	; 0xa8
   14280:	cmp	r5, r3
   14284:	bne	14298 <__assert_fail@plt+0x2f9c>
   14288:	add	r3, r5, #1
   1428c:	ldrb	r3, [r3]
   14290:	cmp	r3, #0
   14294:	beq	142c0 <__assert_fail@plt+0x2fc4>
   14298:	add	r5, r5, #1
   1429c:	mov	r0, r5
   142a0:	bl	11188 <strlen@plt>
   142a4:	mov	r6, r0
   142a8:	add	r3, r4, #168	; 0xa8
   142ac:	add	r2, r6, #1
   142b0:	mov	r1, r5
   142b4:	mov	r0, r3
   142b8:	bl	11020 <memmove@plt>
   142bc:	str	r6, [r4, #52]	; 0x34
   142c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142c4:	ldr	r3, [r3, #24]
   142c8:	str	r3, [r4, #28]
   142cc:	ldr	r3, [r4, #28]
   142d0:	str	r3, [r4, #24]
   142d4:	nop	{0}
   142d8:	sub	sp, fp, #16
   142dc:	ldrd	r4, [sp]
   142e0:	ldr	r6, [sp, #8]
   142e4:	ldr	fp, [sp, #12]
   142e8:	add	sp, sp, #16
   142ec:	pop	{pc}		; (ldr pc, [sp], #4)
   142f0:	strd	r4, [sp, #-16]!
   142f4:	str	fp, [sp, #8]
   142f8:	str	lr, [sp, #12]
   142fc:	add	fp, sp, #12
   14300:	sub	sp, sp, #16
   14304:	str	r0, [fp, #-24]	; 0xffffffe8
   14308:	mov	r3, #0
   1430c:	str	r3, [fp, #-16]
   14310:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14314:	ldr	r3, [r3]
   14318:	cmp	r3, #0
   1431c:	beq	14368 <__assert_fail@plt+0x306c>
   14320:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14324:	ldr	r4, [r3]
   14328:	b	14354 <__assert_fail@plt+0x3058>
   1432c:	mov	r5, r4
   14330:	ldr	r3, [r4, #8]
   14334:	cmp	r3, #0
   14338:	beq	14344 <__assert_fail@plt+0x3048>
   1433c:	ldr	r3, [r4, #8]
   14340:	b	14348 <__assert_fail@plt+0x304c>
   14344:	ldr	r3, [r4, #4]
   14348:	mov	r4, r3
   1434c:	mov	r0, r5
   14350:	bl	13514 <__assert_fail@plt+0x2218>
   14354:	ldr	r3, [r4, #48]	; 0x30
   14358:	cmp	r3, #0
   1435c:	bge	1432c <__assert_fail@plt+0x3030>
   14360:	mov	r0, r4
   14364:	bl	13514 <__assert_fail@plt+0x2218>
   14368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1436c:	ldr	r3, [r3, #4]
   14370:	cmp	r3, #0
   14374:	beq	14388 <__assert_fail@plt+0x308c>
   14378:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1437c:	ldr	r3, [r3, #4]
   14380:	mov	r0, r3
   14384:	bl	163c0 <__assert_fail@plt+0x50c4>
   14388:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1438c:	ldr	r3, [r3, #8]
   14390:	mov	r0, r3
   14394:	bl	13514 <__assert_fail@plt+0x2218>
   14398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1439c:	ldr	r3, [r3, #24]
   143a0:	mov	r0, r3
   143a4:	bl	13514 <__assert_fail@plt+0x2218>
   143a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143ac:	ldr	r3, [r3, #48]	; 0x30
   143b0:	and	r3, r3, #512	; 0x200
   143b4:	cmp	r3, #0
   143b8:	beq	143fc <__assert_fail@plt+0x3100>
   143bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143c0:	ldr	r3, [r3, #32]
   143c4:	cmp	r3, #0
   143c8:	blt	14474 <__assert_fail@plt+0x3178>
   143cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143d0:	ldr	r3, [r3, #32]
   143d4:	mov	r0, r3
   143d8:	bl	112c0 <close@plt>
   143dc:	mov	r3, r0
   143e0:	cmp	r3, #0
   143e4:	beq	14474 <__assert_fail@plt+0x3178>
   143e8:	bl	111c4 <__errno_location@plt>
   143ec:	mov	r3, r0
   143f0:	ldr	r3, [r3]
   143f4:	str	r3, [fp, #-16]
   143f8:	b	14474 <__assert_fail@plt+0x3178>
   143fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14400:	ldr	r3, [r3, #48]	; 0x30
   14404:	and	r3, r3, #4
   14408:	cmp	r3, #0
   1440c:	bne	14474 <__assert_fail@plt+0x3178>
   14410:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14414:	ldr	r3, [r3, #28]
   14418:	mov	r0, r3
   1441c:	bl	1126c <fchdir@plt>
   14420:	mov	r3, r0
   14424:	cmp	r3, #0
   14428:	beq	1443c <__assert_fail@plt+0x3140>
   1442c:	bl	111c4 <__errno_location@plt>
   14430:	mov	r3, r0
   14434:	ldr	r3, [r3]
   14438:	str	r3, [fp, #-16]
   1443c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14440:	ldr	r3, [r3, #28]
   14444:	mov	r0, r3
   14448:	bl	112c0 <close@plt>
   1444c:	mov	r3, r0
   14450:	cmp	r3, #0
   14454:	beq	14474 <__assert_fail@plt+0x3178>
   14458:	ldr	r3, [fp, #-16]
   1445c:	cmp	r3, #0
   14460:	bne	14474 <__assert_fail@plt+0x3178>
   14464:	bl	111c4 <__errno_location@plt>
   14468:	mov	r3, r0
   1446c:	ldr	r3, [r3]
   14470:	str	r3, [fp, #-16]
   14474:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14478:	add	r3, r3, #60	; 0x3c
   1447c:	mov	r0, r3
   14480:	bl	13a60 <__assert_fail@plt+0x2764>
   14484:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14488:	ldr	r3, [r3, #52]	; 0x34
   1448c:	cmp	r3, #0
   14490:	beq	144a4 <__assert_fail@plt+0x31a8>
   14494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14498:	ldr	r3, [r3, #52]	; 0x34
   1449c:	mov	r0, r3
   144a0:	bl	178a0 <__assert_fail@plt+0x65a4>
   144a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144a8:	bl	139ec <__assert_fail@plt+0x26f0>
   144ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144b0:	bl	13514 <__assert_fail@plt+0x2218>
   144b4:	ldr	r3, [fp, #-16]
   144b8:	cmp	r3, #0
   144bc:	beq	144d8 <__assert_fail@plt+0x31dc>
   144c0:	bl	111c4 <__errno_location@plt>
   144c4:	mov	r2, r0
   144c8:	ldr	r3, [fp, #-16]
   144cc:	str	r3, [r2]
   144d0:	mvn	r3, #0
   144d4:	b	144dc <__assert_fail@plt+0x31e0>
   144d8:	mov	r3, #0
   144dc:	mov	r0, r3
   144e0:	sub	sp, fp, #12
   144e4:	ldrd	r4, [sp]
   144e8:	ldr	fp, [sp, #8]
   144ec:	add	sp, sp, #12
   144f0:	pop	{pc}		; (ldr pc, [sp], #4)
   144f4:	str	fp, [sp, #-8]!
   144f8:	str	lr, [sp, #4]
   144fc:	add	fp, sp, #4
   14500:	sub	sp, sp, #24
   14504:	str	r0, [fp, #-24]	; 0xffffffe8
   14508:	str	r1, [fp, #-28]	; 0xffffffe4
   1450c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14510:	str	r3, [fp, #-8]
   14514:	ldr	r3, [fp, #-8]
   14518:	ldrd	r2, [r3]
   1451c:	strd	r2, [fp, #-20]	; 0xffffffec
   14520:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14524:	mov	r2, r3
   14528:	mov	r3, #0
   1452c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14530:	bl	1ea1c <__assert_fail@plt+0xd720>
   14534:	mov	r3, r2
   14538:	mov	r0, r3
   1453c:	sub	sp, fp, #4
   14540:	ldr	fp, [sp]
   14544:	add	sp, sp, #4
   14548:	pop	{pc}		; (ldr pc, [sp], #4)
   1454c:	push	{fp}		; (str fp, [sp, #-4]!)
   14550:	add	fp, sp, #0
   14554:	sub	sp, sp, #20
   14558:	str	r0, [fp, #-16]
   1455c:	str	r1, [fp, #-20]	; 0xffffffec
   14560:	ldr	r3, [fp, #-16]
   14564:	str	r3, [fp, #-8]
   14568:	ldr	r3, [fp, #-20]	; 0xffffffec
   1456c:	str	r3, [fp, #-12]
   14570:	ldr	r3, [fp, #-8]
   14574:	ldrd	r0, [r3]
   14578:	ldr	r3, [fp, #-12]
   1457c:	ldrd	r2, [r3]
   14580:	cmp	r1, r3
   14584:	cmpeq	r0, r2
   14588:	moveq	r3, #1
   1458c:	movne	r3, #0
   14590:	uxtb	r3, r3
   14594:	mov	r0, r3
   14598:	add	sp, fp, #0
   1459c:	pop	{fp}		; (ldr fp, [sp], #4)
   145a0:	bx	lr
   145a4:	str	fp, [sp, #-8]!
   145a8:	str	lr, [sp, #4]
   145ac:	add	fp, sp, #4
   145b0:	sub	sp, sp, #136	; 0x88
   145b4:	str	r0, [fp, #-128]	; 0xffffff80
   145b8:	str	r1, [fp, #-132]	; 0xffffff7c
   145bc:	ldr	r3, [fp, #-128]	; 0xffffff80
   145c0:	ldr	r3, [r3, #44]	; 0x2c
   145c4:	str	r3, [fp, #-12]
   145c8:	ldr	r3, [fp, #-12]
   145cc:	ldr	r3, [r3, #52]	; 0x34
   145d0:	str	r3, [fp, #-8]
   145d4:	ldr	r3, [fp, #-12]
   145d8:	ldr	r3, [r3, #48]	; 0x30
   145dc:	and	r3, r3, #512	; 0x200
   145e0:	cmp	r3, #0
   145e4:	bne	145f0 <__assert_fail@plt+0x32f4>
   145e8:	mov	r3, #0
   145ec:	b	14734 <__assert_fail@plt+0x3438>
   145f0:	ldr	r3, [fp, #-8]
   145f4:	cmp	r3, #0
   145f8:	bne	14640 <__assert_fail@plt+0x3344>
   145fc:	movw	r3, #13588	; 0x3514
   14600:	movt	r3, #1
   14604:	str	r3, [sp]
   14608:	movw	r3, #17740	; 0x454c
   1460c:	movt	r3, #1
   14610:	movw	r2, #17652	; 0x44f4
   14614:	movt	r2, #1
   14618:	mov	r1, #0
   1461c:	mov	r0, #13
   14620:	bl	175ac <__assert_fail@plt+0x62b0>
   14624:	mov	r3, r0
   14628:	mov	r2, r3
   1462c:	ldr	r3, [fp, #-12]
   14630:	str	r2, [r3, #52]	; 0x34
   14634:	ldr	r3, [fp, #-12]
   14638:	ldr	r3, [r3, #52]	; 0x34
   1463c:	str	r3, [fp, #-8]
   14640:	ldr	r3, [fp, #-8]
   14644:	cmp	r3, #0
   14648:	beq	14684 <__assert_fail@plt+0x3388>
   1464c:	ldr	r3, [fp, #-128]	; 0xffffff80
   14650:	ldrd	r2, [r3, #64]	; 0x40
   14654:	strd	r2, [fp, #-124]	; 0xffffff84
   14658:	sub	r3, fp, #124	; 0x7c
   1465c:	mov	r1, r3
   14660:	ldr	r0, [fp, #-8]
   14664:	bl	16d08 <__assert_fail@plt+0x5a0c>
   14668:	str	r0, [fp, #-16]
   1466c:	ldr	r3, [fp, #-16]
   14670:	cmp	r3, #0
   14674:	beq	14684 <__assert_fail@plt+0x3388>
   14678:	ldr	r3, [fp, #-16]
   1467c:	ldr	r3, [r3, #8]
   14680:	b	14734 <__assert_fail@plt+0x3438>
   14684:	ldr	r3, [fp, #-132]	; 0xffffff7c
   14688:	cmp	r3, #0
   1468c:	blt	146ac <__assert_fail@plt+0x33b0>
   14690:	sub	r3, fp, #108	; 0x6c
   14694:	mov	r1, r3
   14698:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1469c:	bl	10fb4 <fstatfs64@plt>
   146a0:	mov	r3, r0
   146a4:	cmp	r3, #0
   146a8:	beq	146b4 <__assert_fail@plt+0x33b8>
   146ac:	mov	r3, #0
   146b0:	b	14734 <__assert_fail@plt+0x3438>
   146b4:	ldr	r3, [fp, #-8]
   146b8:	cmp	r3, #0
   146bc:	beq	14730 <__assert_fail@plt+0x3434>
   146c0:	mov	r0, #16
   146c4:	bl	1d024 <__assert_fail@plt+0xbd28>
   146c8:	mov	r3, r0
   146cc:	str	r3, [fp, #-20]	; 0xffffffec
   146d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146d4:	cmp	r3, #0
   146d8:	beq	14730 <__assert_fail@plt+0x3434>
   146dc:	ldr	r3, [fp, #-128]	; 0xffffff80
   146e0:	ldrd	r2, [r3, #64]	; 0x40
   146e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   146e8:	strd	r2, [r1]
   146ec:	ldr	r2, [fp, #-108]	; 0xffffff94
   146f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146f4:	str	r2, [r3, #8]
   146f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   146fc:	ldr	r0, [fp, #-8]
   14700:	bl	18358 <__assert_fail@plt+0x705c>
   14704:	str	r0, [fp, #-16]
   14708:	ldr	r3, [fp, #-16]
   1470c:	cmp	r3, #0
   14710:	beq	14728 <__assert_fail@plt+0x342c>
   14714:	ldr	r2, [fp, #-16]
   14718:	ldr	r3, [fp, #-20]	; 0xffffffec
   1471c:	cmp	r2, r3
   14720:	beq	14730 <__assert_fail@plt+0x3434>
   14724:	bl	112b4 <abort@plt>
   14728:	ldr	r0, [fp, #-20]	; 0xffffffec
   1472c:	bl	13514 <__assert_fail@plt+0x2218>
   14730:	ldr	r3, [fp, #-108]	; 0xffffff94
   14734:	mov	r0, r3
   14738:	sub	sp, fp, #4
   1473c:	ldr	fp, [sp]
   14740:	add	sp, sp, #4
   14744:	pop	{pc}		; (ldr pc, [sp], #4)
   14748:	str	fp, [sp, #-8]!
   1474c:	str	lr, [sp, #4]
   14750:	add	fp, sp, #4
   14754:	sub	sp, sp, #8
   14758:	str	r0, [fp, #-8]
   1475c:	str	r1, [fp, #-12]
   14760:	ldr	r1, [fp, #-12]
   14764:	ldr	r0, [fp, #-8]
   14768:	bl	145a4 <__assert_fail@plt+0x32a8>
   1476c:	mov	r2, r0
   14770:	movw	r3, #26985	; 0x6969
   14774:	cmp	r2, r3
   14778:	beq	1479c <__assert_fail@plt+0x34a0>
   1477c:	movw	r3, #6548	; 0x1994
   14780:	movt	r3, #258	; 0x102
   14784:	cmp	r2, r3
   14788:	beq	1479c <__assert_fail@plt+0x34a0>
   1478c:	movw	r3, #19778	; 0x4d42
   14790:	movt	r3, #65363	; 0xff53
   14794:	cmp	r2, r3
   14798:	bne	147a4 <__assert_fail@plt+0x34a8>
   1479c:	mov	r3, #0
   147a0:	b	147a8 <__assert_fail@plt+0x34ac>
   147a4:	mov	r3, #1
   147a8:	mov	r0, r3
   147ac:	sub	sp, fp, #4
   147b0:	ldr	fp, [sp]
   147b4:	add	sp, sp, #4
   147b8:	pop	{pc}		; (ldr pc, [sp], #4)
   147bc:	str	fp, [sp, #-8]!
   147c0:	str	lr, [sp, #4]
   147c4:	add	fp, sp, #4
   147c8:	sub	sp, sp, #8
   147cc:	str	r0, [fp, #-8]
   147d0:	str	r1, [fp, #-12]
   147d4:	ldr	r1, [fp, #-12]
   147d8:	ldr	r0, [fp, #-8]
   147dc:	bl	145a4 <__assert_fail@plt+0x32a8>
   147e0:	mov	r3, r0
   147e4:	movw	r2, #26985	; 0x6969
   147e8:	cmp	r3, r2
   147ec:	beq	14834 <__assert_fail@plt+0x3538>
   147f0:	movw	r2, #26985	; 0x6969
   147f4:	cmp	r3, r2
   147f8:	bgt	14818 <__assert_fail@plt+0x351c>
   147fc:	movw	r2, #19778	; 0x4d42
   14800:	movt	r2, #65363	; 0xff53
   14804:	cmp	r3, r2
   14808:	beq	14834 <__assert_fail@plt+0x3538>
   1480c:	cmp	r3, #0
   14810:	beq	14834 <__assert_fail@plt+0x3538>
   14814:	b	1483c <__assert_fail@plt+0x3540>
   14818:	movw	r2, #40864	; 0x9fa0
   1481c:	cmp	r3, r2
   14820:	beq	14834 <__assert_fail@plt+0x3538>
   14824:	movw	r2, #16719	; 0x414f
   14828:	movt	r2, #21318	; 0x5346
   1482c:	cmp	r3, r2
   14830:	bne	1483c <__assert_fail@plt+0x3540>
   14834:	mov	r3, #0
   14838:	b	14840 <__assert_fail@plt+0x3544>
   1483c:	mov	r3, #1
   14840:	mov	r0, r3
   14844:	sub	sp, fp, #4
   14848:	ldr	fp, [sp]
   1484c:	add	sp, sp, #4
   14850:	pop	{pc}		; (ldr pc, [sp], #4)
   14854:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14858:	strd	r6, [sp, #8]
   1485c:	str	fp, [sp, #16]
   14860:	str	lr, [sp, #20]
   14864:	add	fp, sp, #20
   14868:	mov	r5, r0
   1486c:	ldr	r3, [r5]
   14870:	cmp	r3, #0
   14874:	beq	14888 <__assert_fail@plt+0x358c>
   14878:	ldr	r3, [r5, #48]	; 0x30
   1487c:	and	r3, r3, #8192	; 0x2000
   14880:	cmp	r3, #0
   14884:	beq	14890 <__assert_fail@plt+0x3594>
   14888:	mov	r3, #0
   1488c:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14890:	ldr	r4, [r5]
   14894:	ldrh	r6, [r4, #60]	; 0x3c
   14898:	mov	r3, #3
   1489c:	strh	r3, [r4, #60]	; 0x3c
   148a0:	cmp	r6, #1
   148a4:	bne	148c8 <__assert_fail@plt+0x35cc>
   148a8:	mov	r2, #0
   148ac:	mov	r1, r4
   148b0:	mov	r0, r5
   148b4:	bl	15f3c <__assert_fail@plt+0x4c40>
   148b8:	mov	r3, r0
   148bc:	strh	r3, [r4, #56]	; 0x38
   148c0:	mov	r3, r4
   148c4:	b	14fe4 <__assert_fail@plt+0x3ce8>
   148c8:	cmp	r6, #2
   148cc:	bne	14970 <__assert_fail@plt+0x3674>
   148d0:	ldrh	r3, [r4, #56]	; 0x38
   148d4:	cmp	r3, #12
   148d8:	beq	148e8 <__assert_fail@plt+0x35ec>
   148dc:	ldrh	r3, [r4, #56]	; 0x38
   148e0:	cmp	r3, #13
   148e4:	bne	14970 <__assert_fail@plt+0x3674>
   148e8:	mov	r2, #1
   148ec:	mov	r1, r4
   148f0:	mov	r0, r5
   148f4:	bl	15f3c <__assert_fail@plt+0x4c40>
   148f8:	mov	r3, r0
   148fc:	strh	r3, [r4, #56]	; 0x38
   14900:	ldrh	r3, [r4, #56]	; 0x38
   14904:	cmp	r3, #1
   14908:	bne	14d30 <__assert_fail@plt+0x3a34>
   1490c:	ldr	r3, [r5, #48]	; 0x30
   14910:	and	r3, r3, #4
   14914:	cmp	r3, #0
   14918:	bne	14d30 <__assert_fail@plt+0x3a34>
   1491c:	movw	r1, #64348	; 0xfb5c
   14920:	movt	r1, #1
   14924:	mov	r0, r5
   14928:	bl	13ce8 <__assert_fail@plt+0x29ec>
   1492c:	mov	r3, r0
   14930:	str	r3, [r4, #36]	; 0x24
   14934:	ldr	r3, [r4, #36]	; 0x24
   14938:	cmp	r3, #0
   1493c:	bge	1495c <__assert_fail@plt+0x3660>
   14940:	bl	111c4 <__errno_location@plt>
   14944:	mov	r3, r0
   14948:	ldr	r3, [r3]
   1494c:	str	r3, [r4, #32]
   14950:	mov	r3, #7
   14954:	strh	r3, [r4, #56]	; 0x38
   14958:	b	14d30 <__assert_fail@plt+0x3a34>
   1495c:	ldrh	r3, [r4, #58]	; 0x3a
   14960:	orr	r3, r3, #2
   14964:	uxth	r3, r3
   14968:	strh	r3, [r4, #58]	; 0x3a
   1496c:	b	14d30 <__assert_fail@plt+0x3a34>
   14970:	ldrh	r3, [r4, #56]	; 0x38
   14974:	cmp	r3, #1
   14978:	bne	14b28 <__assert_fail@plt+0x382c>
   1497c:	cmp	r6, #4
   14980:	beq	149a8 <__assert_fail@plt+0x36ac>
   14984:	ldr	r3, [r5, #48]	; 0x30
   14988:	and	r3, r3, #64	; 0x40
   1498c:	cmp	r3, #0
   14990:	beq	14a00 <__assert_fail@plt+0x3704>
   14994:	ldrd	r0, [r4, #64]	; 0x40
   14998:	ldrd	r2, [r5, #16]
   1499c:	cmp	r1, r3
   149a0:	cmpeq	r0, r2
   149a4:	beq	14a00 <__assert_fail@plt+0x3704>
   149a8:	ldrh	r3, [r4, #58]	; 0x3a
   149ac:	and	r3, r3, #2
   149b0:	cmp	r3, #0
   149b4:	beq	149c4 <__assert_fail@plt+0x36c8>
   149b8:	ldr	r3, [r4, #36]	; 0x24
   149bc:	mov	r0, r3
   149c0:	bl	112c0 <close@plt>
   149c4:	ldr	r3, [r5, #4]
   149c8:	cmp	r3, #0
   149cc:	beq	149e4 <__assert_fail@plt+0x36e8>
   149d0:	ldr	r3, [r5, #4]
   149d4:	mov	r0, r3
   149d8:	bl	163c0 <__assert_fail@plt+0x50c4>
   149dc:	mov	r3, #0
   149e0:	str	r3, [r5, #4]
   149e4:	mov	r3, #6
   149e8:	strh	r3, [r4, #56]	; 0x38
   149ec:	mov	r1, r4
   149f0:	mov	r0, r5
   149f4:	bl	138a4 <__assert_fail@plt+0x25a8>
   149f8:	mov	r3, r4
   149fc:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14a00:	ldr	r3, [r5, #4]
   14a04:	cmp	r3, #0
   14a08:	beq	14a3c <__assert_fail@plt+0x3740>
   14a0c:	ldr	r3, [r5, #48]	; 0x30
   14a10:	and	r3, r3, #4096	; 0x1000
   14a14:	cmp	r3, #0
   14a18:	beq	14a3c <__assert_fail@plt+0x3740>
   14a1c:	ldr	r3, [r5, #48]	; 0x30
   14a20:	bic	r3, r3, #4096	; 0x1000
   14a24:	str	r3, [r5, #48]	; 0x30
   14a28:	ldr	r3, [r5, #4]
   14a2c:	mov	r0, r3
   14a30:	bl	163c0 <__assert_fail@plt+0x50c4>
   14a34:	mov	r3, #0
   14a38:	str	r3, [r5, #4]
   14a3c:	ldr	r3, [r5, #4]
   14a40:	cmp	r3, #0
   14a44:	beq	14aac <__assert_fail@plt+0x37b0>
   14a48:	ldr	r3, [r4, #24]
   14a4c:	mvn	r2, #0
   14a50:	mov	r1, r4
   14a54:	mov	r0, r5
   14a58:	bl	166d0 <__assert_fail@plt+0x53d4>
   14a5c:	mov	r3, r0
   14a60:	cmp	r3, #0
   14a64:	beq	14b18 <__assert_fail@plt+0x381c>
   14a68:	bl	111c4 <__errno_location@plt>
   14a6c:	mov	r3, r0
   14a70:	ldr	r3, [r3]
   14a74:	str	r3, [r4, #32]
   14a78:	ldrh	r3, [r4, #58]	; 0x3a
   14a7c:	orr	r3, r3, #1
   14a80:	uxth	r3, r3
   14a84:	strh	r3, [r4, #58]	; 0x3a
   14a88:	ldr	r4, [r5, #4]
   14a8c:	b	14aa0 <__assert_fail@plt+0x37a4>
   14a90:	ldr	r3, [r4, #4]
   14a94:	ldr	r3, [r3, #24]
   14a98:	str	r3, [r4, #24]
   14a9c:	ldr	r4, [r4, #8]
   14aa0:	cmp	r4, #0
   14aa4:	bne	14a90 <__assert_fail@plt+0x3794>
   14aa8:	b	14b18 <__assert_fail@plt+0x381c>
   14aac:	mov	r1, #3
   14ab0:	mov	r0, r5
   14ab4:	bl	153e8 <__assert_fail@plt+0x40ec>
   14ab8:	mov	r3, r0
   14abc:	str	r3, [r5, #4]
   14ac0:	ldr	r3, [r5, #4]
   14ac4:	cmp	r3, #0
   14ac8:	bne	14b18 <__assert_fail@plt+0x381c>
   14acc:	ldr	r3, [r5, #48]	; 0x30
   14ad0:	and	r3, r3, #8192	; 0x2000
   14ad4:	cmp	r3, #0
   14ad8:	beq	14ae4 <__assert_fail@plt+0x37e8>
   14adc:	mov	r3, #0
   14ae0:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14ae4:	ldr	r3, [r4, #32]
   14ae8:	cmp	r3, #0
   14aec:	beq	14b04 <__assert_fail@plt+0x3808>
   14af0:	ldrh	r3, [r4, #56]	; 0x38
   14af4:	cmp	r3, #4
   14af8:	beq	14b04 <__assert_fail@plt+0x3808>
   14afc:	mov	r3, #7
   14b00:	strh	r3, [r4, #56]	; 0x38
   14b04:	mov	r1, r4
   14b08:	mov	r0, r5
   14b0c:	bl	138a4 <__assert_fail@plt+0x25a8>
   14b10:	mov	r3, r4
   14b14:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14b18:	ldr	r4, [r5, #4]
   14b1c:	mov	r3, #0
   14b20:	str	r3, [r5, #4]
   14b24:	b	14cc0 <__assert_fail@plt+0x39c4>
   14b28:	nop	{0}
   14b2c:	mov	r6, r4
   14b30:	ldr	r3, [r4, #8]
   14b34:	cmp	r3, #0
   14b38:	bne	14ba4 <__assert_fail@plt+0x38a8>
   14b3c:	ldr	r3, [r4, #4]
   14b40:	ldr	r3, [r3, #12]
   14b44:	cmp	r3, #0
   14b48:	beq	14ba4 <__assert_fail@plt+0x38a8>
   14b4c:	ldr	r4, [r6, #4]
   14b50:	str	r4, [r5]
   14b54:	ldr	r2, [r5, #24]
   14b58:	ldr	r3, [r4, #40]	; 0x28
   14b5c:	add	r3, r2, r3
   14b60:	mov	r2, #0
   14b64:	strb	r2, [r3]
   14b68:	mov	r1, #3
   14b6c:	mov	r0, r5
   14b70:	bl	153e8 <__assert_fail@plt+0x40ec>
   14b74:	mov	r4, r0
   14b78:	cmp	r4, #0
   14b7c:	bne	14b98 <__assert_fail@plt+0x389c>
   14b80:	ldr	r3, [r5, #48]	; 0x30
   14b84:	and	r3, r3, #8192	; 0x2000
   14b88:	cmp	r3, #0
   14b8c:	beq	14de4 <__assert_fail@plt+0x3ae8>
   14b90:	mov	r3, #0
   14b94:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14b98:	mov	r0, r6
   14b9c:	bl	13514 <__assert_fail@plt+0x2218>
   14ba0:	b	14cc0 <__assert_fail@plt+0x39c4>
   14ba4:	ldr	r4, [r4, #8]
   14ba8:	cmp	r4, #0
   14bac:	beq	14dec <__assert_fail@plt+0x3af0>
   14bb0:	str	r4, [r5]
   14bb4:	mov	r0, r6
   14bb8:	bl	13514 <__assert_fail@plt+0x2218>
   14bbc:	ldr	r3, [r4, #48]	; 0x30
   14bc0:	cmp	r3, #0
   14bc4:	bne	14c10 <__assert_fail@plt+0x3914>
   14bc8:	mov	r0, r5
   14bcc:	bl	13c04 <__assert_fail@plt+0x2908>
   14bd0:	mov	r3, r0
   14bd4:	cmp	r3, #0
   14bd8:	beq	14bf0 <__assert_fail@plt+0x38f4>
   14bdc:	ldr	r3, [r5, #48]	; 0x30
   14be0:	orr	r3, r3, #8192	; 0x2000
   14be4:	str	r3, [r5, #48]	; 0x30
   14be8:	mov	r3, #0
   14bec:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14bf0:	mov	r0, r5
   14bf4:	bl	139ec <__assert_fail@plt+0x26f0>
   14bf8:	mov	r1, r4
   14bfc:	mov	r0, r5
   14c00:	bl	1421c <__assert_fail@plt+0x2f20>
   14c04:	mov	r0, r5
   14c08:	bl	13688 <__assert_fail@plt+0x238c>
   14c0c:	b	14d34 <__assert_fail@plt+0x3a38>
   14c10:	ldrh	r3, [r4, #60]	; 0x3c
   14c14:	cmp	r3, #4
   14c18:	bne	14c20 <__assert_fail@plt+0x3924>
   14c1c:	b	14b2c <__assert_fail@plt+0x3830>
   14c20:	ldrh	r3, [r4, #60]	; 0x3c
   14c24:	cmp	r3, #2
   14c28:	bne	14cbc <__assert_fail@plt+0x39c0>
   14c2c:	mov	r2, #1
   14c30:	mov	r1, r4
   14c34:	mov	r0, r5
   14c38:	bl	15f3c <__assert_fail@plt+0x4c40>
   14c3c:	mov	r3, r0
   14c40:	strh	r3, [r4, #56]	; 0x38
   14c44:	ldrh	r3, [r4, #56]	; 0x38
   14c48:	cmp	r3, #1
   14c4c:	bne	14cb0 <__assert_fail@plt+0x39b4>
   14c50:	ldr	r3, [r5, #48]	; 0x30
   14c54:	and	r3, r3, #4
   14c58:	cmp	r3, #0
   14c5c:	bne	14cb0 <__assert_fail@plt+0x39b4>
   14c60:	movw	r1, #64348	; 0xfb5c
   14c64:	movt	r1, #1
   14c68:	mov	r0, r5
   14c6c:	bl	13ce8 <__assert_fail@plt+0x29ec>
   14c70:	mov	r3, r0
   14c74:	str	r3, [r4, #36]	; 0x24
   14c78:	ldr	r3, [r4, #36]	; 0x24
   14c7c:	cmp	r3, #0
   14c80:	bge	14ca0 <__assert_fail@plt+0x39a4>
   14c84:	bl	111c4 <__errno_location@plt>
   14c88:	mov	r3, r0
   14c8c:	ldr	r3, [r3]
   14c90:	str	r3, [r4, #32]
   14c94:	mov	r3, #7
   14c98:	strh	r3, [r4, #56]	; 0x38
   14c9c:	b	14cb0 <__assert_fail@plt+0x39b4>
   14ca0:	ldrh	r3, [r4, #58]	; 0x3a
   14ca4:	orr	r3, r3, #2
   14ca8:	uxth	r3, r3
   14cac:	strh	r3, [r4, #58]	; 0x3a
   14cb0:	mov	r3, #3
   14cb4:	strh	r3, [r4, #60]	; 0x3c
   14cb8:	b	14cc0 <__assert_fail@plt+0x39c4>
   14cbc:	nop	{0}
   14cc0:	ldr	r2, [r5, #24]
   14cc4:	ldr	r3, [r4, #4]
   14cc8:	ldr	r1, [r3, #28]
   14ccc:	ldr	r3, [r4, #4]
   14cd0:	ldr	r3, [r3, #40]	; 0x28
   14cd4:	sub	r3, r3, #1
   14cd8:	add	r3, r1, r3
   14cdc:	ldrb	r3, [r3]
   14ce0:	cmp	r3, #47	; 0x2f
   14ce4:	bne	14cf8 <__assert_fail@plt+0x39fc>
   14ce8:	ldr	r3, [r4, #4]
   14cec:	ldr	r3, [r3, #40]	; 0x28
   14cf0:	sub	r3, r3, #1
   14cf4:	b	14d00 <__assert_fail@plt+0x3a04>
   14cf8:	ldr	r3, [r4, #4]
   14cfc:	ldr	r3, [r3, #40]	; 0x28
   14d00:	add	r6, r2, r3
   14d04:	mov	r3, r6
   14d08:	add	r6, r3, #1
   14d0c:	mov	r2, #47	; 0x2f
   14d10:	strb	r2, [r3]
   14d14:	add	r1, r4, #168	; 0xa8
   14d18:	ldr	r3, [r4, #52]	; 0x34
   14d1c:	add	r3, r3, #1
   14d20:	mov	r2, r3
   14d24:	mov	r0, r6
   14d28:	bl	11020 <memmove@plt>
   14d2c:	b	14d34 <__assert_fail@plt+0x3a38>
   14d30:	nop	{0}
   14d34:	str	r4, [r5]
   14d38:	ldrh	r3, [r4, #56]	; 0x38
   14d3c:	cmp	r3, #11
   14d40:	bne	14d84 <__assert_fail@plt+0x3a88>
   14d44:	ldrd	r2, [r4, #112]	; 0x70
   14d48:	cmp	r3, #0
   14d4c:	cmpeq	r2, #2
   14d50:	bne	14d70 <__assert_fail@plt+0x3a74>
   14d54:	mov	r2, #0
   14d58:	mov	r1, r4
   14d5c:	mov	r0, r5
   14d60:	bl	15f3c <__assert_fail@plt+0x4c40>
   14d64:	mov	r3, r0
   14d68:	strh	r3, [r4, #56]	; 0x38
   14d6c:	b	14d84 <__assert_fail@plt+0x3a88>
   14d70:	ldrd	r2, [r4, #112]	; 0x70
   14d74:	cmp	r3, #0
   14d78:	cmpeq	r2, #1
   14d7c:	beq	14d84 <__assert_fail@plt+0x3a88>
   14d80:	bl	112b4 <abort@plt>
   14d84:	ldrh	r3, [r4, #56]	; 0x38
   14d88:	cmp	r3, #1
   14d8c:	bne	14ddc <__assert_fail@plt+0x3ae0>
   14d90:	ldr	r3, [r4, #48]	; 0x30
   14d94:	cmp	r3, #0
   14d98:	bne	14da4 <__assert_fail@plt+0x3aa8>
   14d9c:	ldrd	r2, [r4, #64]	; 0x40
   14da0:	strd	r2, [r5, #16]
   14da4:	mov	r1, r4
   14da8:	mov	r0, r5
   14dac:	bl	1375c <__assert_fail@plt+0x2460>
   14db0:	mov	r3, r0
   14db4:	eor	r3, r3, #1
   14db8:	uxtb	r3, r3
   14dbc:	cmp	r3, #0
   14dc0:	beq	14ddc <__assert_fail@plt+0x3ae0>
   14dc4:	bl	111c4 <__errno_location@plt>
   14dc8:	mov	r2, r0
   14dcc:	mov	r3, #12
   14dd0:	str	r3, [r2]
   14dd4:	mov	r3, #0
   14dd8:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14ddc:	mov	r3, r4
   14de0:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14de4:	nop	{0}
   14de8:	b	14df0 <__assert_fail@plt+0x3af4>
   14dec:	nop	{0}
   14df0:	ldr	r4, [r6, #4]
   14df4:	str	r4, [r5]
   14df8:	mov	r0, r6
   14dfc:	bl	13514 <__assert_fail@plt+0x2218>
   14e00:	ldr	r3, [r4, #48]	; 0x30
   14e04:	cmn	r3, #1
   14e08:	bne	14e34 <__assert_fail@plt+0x3b38>
   14e0c:	mov	r0, r4
   14e10:	bl	13514 <__assert_fail@plt+0x2218>
   14e14:	bl	111c4 <__errno_location@plt>
   14e18:	mov	r2, r0
   14e1c:	mov	r3, #0
   14e20:	str	r3, [r2]
   14e24:	mov	r3, #0
   14e28:	str	r3, [r5]
   14e2c:	mov	r3, #0
   14e30:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14e34:	ldrh	r3, [r4, #56]	; 0x38
   14e38:	cmp	r3, #11
   14e3c:	bne	14e44 <__assert_fail@plt+0x3b48>
   14e40:	bl	112b4 <abort@plt>
   14e44:	ldr	r2, [r5, #24]
   14e48:	ldr	r3, [r4, #40]	; 0x28
   14e4c:	add	r3, r2, r3
   14e50:	mov	r2, #0
   14e54:	strb	r2, [r3]
   14e58:	ldr	r3, [r4, #48]	; 0x30
   14e5c:	cmp	r3, #0
   14e60:	bne	14e98 <__assert_fail@plt+0x3b9c>
   14e64:	mov	r0, r5
   14e68:	bl	13c04 <__assert_fail@plt+0x2908>
   14e6c:	mov	r3, r0
   14e70:	cmp	r3, #0
   14e74:	beq	14f88 <__assert_fail@plt+0x3c8c>
   14e78:	bl	111c4 <__errno_location@plt>
   14e7c:	mov	r3, r0
   14e80:	ldr	r3, [r3]
   14e84:	str	r3, [r4, #32]
   14e88:	ldr	r3, [r5, #48]	; 0x30
   14e8c:	orr	r3, r3, #8192	; 0x2000
   14e90:	str	r3, [r5, #48]	; 0x30
   14e94:	b	14f88 <__assert_fail@plt+0x3c8c>
   14e98:	ldrh	r3, [r4, #58]	; 0x3a
   14e9c:	and	r3, r3, #2
   14ea0:	cmp	r3, #0
   14ea4:	beq	14f38 <__assert_fail@plt+0x3c3c>
   14ea8:	ldr	r3, [r5, #48]	; 0x30
   14eac:	and	r3, r3, #4
   14eb0:	cmp	r3, #0
   14eb4:	bne	14f28 <__assert_fail@plt+0x3c2c>
   14eb8:	ldr	r3, [r5, #48]	; 0x30
   14ebc:	and	r3, r3, #512	; 0x200
   14ec0:	cmp	r3, #0
   14ec4:	beq	14ee4 <__assert_fail@plt+0x3be8>
   14ec8:	ldr	r3, [r4, #36]	; 0x24
   14ecc:	mov	r2, #1
   14ed0:	mov	r1, r3
   14ed4:	mov	r0, r5
   14ed8:	bl	13b34 <__assert_fail@plt+0x2838>
   14edc:	mov	r3, #0
   14ee0:	b	14f04 <__assert_fail@plt+0x3c08>
   14ee4:	ldr	r3, [r4, #36]	; 0x24
   14ee8:	mov	r0, r3
   14eec:	bl	1126c <fchdir@plt>
   14ef0:	mov	r3, r0
   14ef4:	cmp	r3, #0
   14ef8:	movne	r3, #1
   14efc:	moveq	r3, #0
   14f00:	uxtb	r3, r3
   14f04:	cmp	r3, #0
   14f08:	beq	14f28 <__assert_fail@plt+0x3c2c>
   14f0c:	bl	111c4 <__errno_location@plt>
   14f10:	mov	r3, r0
   14f14:	ldr	r3, [r3]
   14f18:	str	r3, [r4, #32]
   14f1c:	ldr	r3, [r5, #48]	; 0x30
   14f20:	orr	r3, r3, #8192	; 0x2000
   14f24:	str	r3, [r5, #48]	; 0x30
   14f28:	ldr	r3, [r4, #36]	; 0x24
   14f2c:	mov	r0, r3
   14f30:	bl	112c0 <close@plt>
   14f34:	b	14f88 <__assert_fail@plt+0x3c8c>
   14f38:	ldrh	r3, [r4, #58]	; 0x3a
   14f3c:	and	r3, r3, #1
   14f40:	cmp	r3, #0
   14f44:	bne	14f88 <__assert_fail@plt+0x3c8c>
   14f48:	ldr	r1, [r4, #4]
   14f4c:	movw	r3, #64352	; 0xfb60
   14f50:	movt	r3, #1
   14f54:	mvn	r2, #0
   14f58:	mov	r0, r5
   14f5c:	bl	166d0 <__assert_fail@plt+0x53d4>
   14f60:	mov	r3, r0
   14f64:	cmp	r3, #0
   14f68:	beq	14f88 <__assert_fail@plt+0x3c8c>
   14f6c:	bl	111c4 <__errno_location@plt>
   14f70:	mov	r3, r0
   14f74:	ldr	r3, [r3]
   14f78:	str	r3, [r4, #32]
   14f7c:	ldr	r3, [r5, #48]	; 0x30
   14f80:	orr	r3, r3, #8192	; 0x2000
   14f84:	str	r3, [r5, #48]	; 0x30
   14f88:	ldrh	r3, [r4, #56]	; 0x38
   14f8c:	cmp	r3, #2
   14f90:	beq	14fc8 <__assert_fail@plt+0x3ccc>
   14f94:	ldr	r3, [r4, #32]
   14f98:	cmp	r3, #0
   14f9c:	beq	14fa8 <__assert_fail@plt+0x3cac>
   14fa0:	mov	r3, #7
   14fa4:	b	14fac <__assert_fail@plt+0x3cb0>
   14fa8:	mov	r3, #6
   14fac:	strh	r3, [r4, #56]	; 0x38
   14fb0:	ldr	r3, [r4, #32]
   14fb4:	cmp	r3, #0
   14fb8:	bne	14fc8 <__assert_fail@plt+0x3ccc>
   14fbc:	mov	r1, r4
   14fc0:	mov	r0, r5
   14fc4:	bl	138a4 <__assert_fail@plt+0x25a8>
   14fc8:	ldr	r3, [r5, #48]	; 0x30
   14fcc:	and	r3, r3, #8192	; 0x2000
   14fd0:	cmp	r3, #0
   14fd4:	bne	14fe0 <__assert_fail@plt+0x3ce4>
   14fd8:	mov	r3, r4
   14fdc:	b	14fe4 <__assert_fail@plt+0x3ce8>
   14fe0:	mov	r3, #0
   14fe4:	mov	r0, r3
   14fe8:	sub	sp, fp, #20
   14fec:	ldrd	r4, [sp]
   14ff0:	ldrd	r6, [sp, #8]
   14ff4:	ldr	fp, [sp, #16]
   14ff8:	add	sp, sp, #20
   14ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   15000:	str	fp, [sp, #-8]!
   15004:	str	lr, [sp, #4]
   15008:	add	fp, sp, #4
   1500c:	sub	sp, sp, #16
   15010:	str	r0, [fp, #-8]
   15014:	str	r1, [fp, #-12]
   15018:	str	r2, [fp, #-16]
   1501c:	ldr	r3, [fp, #-16]
   15020:	cmp	r3, #0
   15024:	beq	15070 <__assert_fail@plt+0x3d74>
   15028:	ldr	r3, [fp, #-16]
   1502c:	cmp	r3, #1
   15030:	beq	15070 <__assert_fail@plt+0x3d74>
   15034:	ldr	r3, [fp, #-16]
   15038:	cmp	r3, #2
   1503c:	beq	15070 <__assert_fail@plt+0x3d74>
   15040:	ldr	r3, [fp, #-16]
   15044:	cmp	r3, #3
   15048:	beq	15070 <__assert_fail@plt+0x3d74>
   1504c:	ldr	r3, [fp, #-16]
   15050:	cmp	r3, #4
   15054:	beq	15070 <__assert_fail@plt+0x3d74>
   15058:	bl	111c4 <__errno_location@plt>
   1505c:	mov	r2, r0
   15060:	mov	r3, #22
   15064:	str	r3, [r2]
   15068:	mov	r3, #1
   1506c:	b	15084 <__assert_fail@plt+0x3d88>
   15070:	ldr	r3, [fp, #-16]
   15074:	uxth	r2, r3
   15078:	ldr	r3, [fp, #-12]
   1507c:	strh	r2, [r3, #60]	; 0x3c
   15080:	mov	r3, #0
   15084:	mov	r0, r3
   15088:	sub	sp, fp, #4
   1508c:	ldr	fp, [sp]
   15090:	add	sp, sp, #4
   15094:	pop	{pc}		; (ldr pc, [sp], #4)
   15098:	strd	r4, [sp, #-16]!
   1509c:	str	fp, [sp, #8]
   150a0:	str	lr, [sp, #12]
   150a4:	add	fp, sp, #12
   150a8:	sub	sp, sp, #16
   150ac:	mov	r4, r0
   150b0:	str	r1, [fp, #-24]	; 0xffffffe8
   150b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   150b8:	cmp	r3, #0
   150bc:	beq	150e4 <__assert_fail@plt+0x3de8>
   150c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   150c4:	cmp	r3, #4096	; 0x1000
   150c8:	beq	150e4 <__assert_fail@plt+0x3de8>
   150cc:	bl	111c4 <__errno_location@plt>
   150d0:	mov	r2, r0
   150d4:	mov	r3, #22
   150d8:	str	r3, [r2]
   150dc:	mov	r3, #0
   150e0:	b	1527c <__assert_fail@plt+0x3f80>
   150e4:	ldr	r5, [r4]
   150e8:	bl	111c4 <__errno_location@plt>
   150ec:	mov	r2, r0
   150f0:	mov	r3, #0
   150f4:	str	r3, [r2]
   150f8:	ldr	r3, [r4, #48]	; 0x30
   150fc:	and	r3, r3, #8192	; 0x2000
   15100:	cmp	r3, #0
   15104:	beq	15110 <__assert_fail@plt+0x3e14>
   15108:	mov	r3, #0
   1510c:	b	1527c <__assert_fail@plt+0x3f80>
   15110:	ldrh	r3, [r5, #56]	; 0x38
   15114:	cmp	r3, #9
   15118:	bne	15124 <__assert_fail@plt+0x3e28>
   1511c:	ldr	r3, [r5, #8]
   15120:	b	1527c <__assert_fail@plt+0x3f80>
   15124:	ldrh	r3, [r5, #56]	; 0x38
   15128:	cmp	r3, #1
   1512c:	beq	15138 <__assert_fail@plt+0x3e3c>
   15130:	mov	r3, #0
   15134:	b	1527c <__assert_fail@plt+0x3f80>
   15138:	ldr	r3, [r4, #4]
   1513c:	cmp	r3, #0
   15140:	beq	15150 <__assert_fail@plt+0x3e54>
   15144:	ldr	r3, [r4, #4]
   15148:	mov	r0, r3
   1514c:	bl	163c0 <__assert_fail@plt+0x50c4>
   15150:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15154:	cmp	r3, #4096	; 0x1000
   15158:	bne	15174 <__assert_fail@plt+0x3e78>
   1515c:	ldr	r3, [r4, #48]	; 0x30
   15160:	orr	r3, r3, #4096	; 0x1000
   15164:	str	r3, [r4, #48]	; 0x30
   15168:	mov	r3, #2
   1516c:	str	r3, [fp, #-24]	; 0xffffffe8
   15170:	b	1517c <__assert_fail@plt+0x3e80>
   15174:	mov	r3, #1
   15178:	str	r3, [fp, #-24]	; 0xffffffe8
   1517c:	ldr	r3, [r5, #48]	; 0x30
   15180:	cmp	r3, #0
   15184:	bne	151a8 <__assert_fail@plt+0x3eac>
   15188:	ldr	r3, [r5, #24]
   1518c:	ldrb	r3, [r3]
   15190:	cmp	r3, #47	; 0x2f
   15194:	beq	151a8 <__assert_fail@plt+0x3eac>
   15198:	ldr	r3, [r4, #48]	; 0x30
   1519c:	and	r3, r3, #4
   151a0:	cmp	r3, #0
   151a4:	beq	151c4 <__assert_fail@plt+0x3ec8>
   151a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   151ac:	mov	r0, r4
   151b0:	bl	153e8 <__assert_fail@plt+0x40ec>
   151b4:	mov	r3, r0
   151b8:	str	r3, [r4, #4]
   151bc:	ldr	r3, [r4, #4]
   151c0:	b	1527c <__assert_fail@plt+0x3f80>
   151c4:	movw	r1, #64348	; 0xfb5c
   151c8:	movt	r1, #1
   151cc:	mov	r0, r4
   151d0:	bl	13ce8 <__assert_fail@plt+0x29ec>
   151d4:	str	r0, [fp, #-16]
   151d8:	ldr	r3, [fp, #-16]
   151dc:	cmp	r3, #0
   151e0:	bge	151f4 <__assert_fail@plt+0x3ef8>
   151e4:	mov	r3, #0
   151e8:	str	r3, [r4, #4]
   151ec:	mov	r3, #0
   151f0:	b	1527c <__assert_fail@plt+0x3f80>
   151f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   151f8:	mov	r0, r4
   151fc:	bl	153e8 <__assert_fail@plt+0x40ec>
   15200:	mov	r3, r0
   15204:	str	r3, [r4, #4]
   15208:	ldr	r3, [r4, #48]	; 0x30
   1520c:	and	r3, r3, #512	; 0x200
   15210:	cmp	r3, #0
   15214:	beq	1522c <__assert_fail@plt+0x3f30>
   15218:	mov	r2, #1
   1521c:	ldr	r1, [fp, #-16]
   15220:	mov	r0, r4
   15224:	bl	13b34 <__assert_fail@plt+0x2838>
   15228:	b	15278 <__assert_fail@plt+0x3f7c>
   1522c:	ldr	r0, [fp, #-16]
   15230:	bl	1126c <fchdir@plt>
   15234:	mov	r3, r0
   15238:	cmp	r3, #0
   1523c:	beq	15270 <__assert_fail@plt+0x3f74>
   15240:	bl	111c4 <__errno_location@plt>
   15244:	mov	r3, r0
   15248:	ldr	r3, [r3]
   1524c:	str	r3, [fp, #-20]	; 0xffffffec
   15250:	ldr	r0, [fp, #-16]
   15254:	bl	112c0 <close@plt>
   15258:	bl	111c4 <__errno_location@plt>
   1525c:	mov	r2, r0
   15260:	ldr	r3, [fp, #-20]	; 0xffffffec
   15264:	str	r3, [r2]
   15268:	mov	r3, #0
   1526c:	b	1527c <__assert_fail@plt+0x3f80>
   15270:	ldr	r0, [fp, #-16]
   15274:	bl	112c0 <close@plt>
   15278:	ldr	r3, [r4, #4]
   1527c:	mov	r0, r3
   15280:	sub	sp, fp, #12
   15284:	ldrd	r4, [sp]
   15288:	ldr	fp, [sp, #8]
   1528c:	add	sp, sp, #12
   15290:	pop	{pc}		; (ldr pc, [sp], #4)
   15294:	push	{fp}		; (str fp, [sp, #-4]!)
   15298:	add	fp, sp, #0
   1529c:	sub	sp, sp, #12
   152a0:	str	r0, [fp, #-8]
   152a4:	str	r1, [fp, #-12]
   152a8:	ldr	r3, [fp, #-8]
   152ac:	ldr	r3, [r3]
   152b0:	ldrd	r0, [r3, #160]	; 0xa0
   152b4:	ldr	r3, [fp, #-12]
   152b8:	ldr	r3, [r3]
   152bc:	ldrd	r2, [r3, #160]	; 0xa0
   152c0:	cmp	r1, r3
   152c4:	cmpeq	r0, r2
   152c8:	movhi	r3, #1
   152cc:	movls	r3, #0
   152d0:	uxtb	r3, r3
   152d4:	mov	ip, r3
   152d8:	ldr	r3, [fp, #-8]
   152dc:	ldr	r3, [r3]
   152e0:	ldrd	r0, [r3, #160]	; 0xa0
   152e4:	ldr	r3, [fp, #-12]
   152e8:	ldr	r3, [r3]
   152ec:	ldrd	r2, [r3, #160]	; 0xa0
   152f0:	cmp	r1, r3
   152f4:	cmpeq	r0, r2
   152f8:	movcc	r3, #1
   152fc:	movcs	r3, #0
   15300:	uxtb	r3, r3
   15304:	sub	r3, ip, r3
   15308:	mov	r0, r3
   1530c:	add	sp, fp, #0
   15310:	pop	{fp}		; (ldr fp, [sp], #4)
   15314:	bx	lr
   15318:	push	{fp}		; (str fp, [sp, #-4]!)
   1531c:	add	fp, sp, #0
   15320:	sub	sp, sp, #20
   15324:	str	r0, [fp, #-16]
   15328:	str	r1, [fp, #-20]	; 0xffffffec
   1532c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15330:	sub	r3, r3, #1
   15334:	cmp	r3, #11
   15338:	ldrls	pc, [pc, r3, lsl #2]
   1533c:	b	153c4 <__assert_fail@plt+0x40c8>
   15340:	muleq	r1, r4, r3
   15344:	andeq	r5, r1, ip, ror r3
   15348:	andeq	r5, r1, r4, asr #7
   1534c:	andeq	r5, r1, r8, lsl #7
   15350:	andeq	r5, r1, r4, asr #7
   15354:	andeq	r5, r1, r0, ror r3
   15358:	andeq	r5, r1, r4, asr #7
   1535c:	andeq	r5, r1, ip, lsr #7
   15360:	andeq	r5, r1, r4, asr #7
   15364:	andeq	r5, r1, r0, lsr #7
   15368:	andeq	r5, r1, r4, asr #7
   1536c:			; <UNDEFINED> instruction: 0x000153b8
   15370:	mov	r3, #24576	; 0x6000
   15374:	str	r3, [fp, #-8]
   15378:	b	153cc <__assert_fail@plt+0x40d0>
   1537c:	mov	r3, #8192	; 0x2000
   15380:	str	r3, [fp, #-8]
   15384:	b	153cc <__assert_fail@plt+0x40d0>
   15388:	mov	r3, #16384	; 0x4000
   1538c:	str	r3, [fp, #-8]
   15390:	b	153cc <__assert_fail@plt+0x40d0>
   15394:	mov	r3, #4096	; 0x1000
   15398:	str	r3, [fp, #-8]
   1539c:	b	153cc <__assert_fail@plt+0x40d0>
   153a0:	mov	r3, #40960	; 0xa000
   153a4:	str	r3, [fp, #-8]
   153a8:	b	153cc <__assert_fail@plt+0x40d0>
   153ac:	mov	r3, #32768	; 0x8000
   153b0:	str	r3, [fp, #-8]
   153b4:	b	153cc <__assert_fail@plt+0x40d0>
   153b8:	mov	r3, #49152	; 0xc000
   153bc:	str	r3, [fp, #-8]
   153c0:	b	153cc <__assert_fail@plt+0x40d0>
   153c4:	mov	r3, #0
   153c8:	str	r3, [fp, #-8]
   153cc:	ldr	r3, [fp, #-16]
   153d0:	ldr	r2, [fp, #-8]
   153d4:	str	r2, [r3, #16]
   153d8:	nop	{0}
   153dc:	add	sp, fp, #0
   153e0:	pop	{fp}		; (ldr fp, [sp], #4)
   153e4:	bx	lr
   153e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   153ec:	strd	r6, [sp, #8]
   153f0:	str	fp, [sp, #16]
   153f4:	str	lr, [sp, #20]
   153f8:	add	fp, sp, #20
   153fc:	sub	sp, sp, #80	; 0x50
   15400:	mov	r4, r0
   15404:	str	r1, [fp, #-96]	; 0xffffffa0
   15408:	ldr	r3, [r4]
   1540c:	str	r3, [fp, #-44]	; 0xffffffd4
   15410:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15414:	ldr	r3, [r3, #12]
   15418:	cmp	r3, #0
   1541c:	movne	r3, #1
   15420:	moveq	r3, #0
   15424:	strb	r3, [fp, #-45]	; 0xffffffd3
   15428:	mov	r3, #0
   1542c:	strb	r3, [fp, #-37]	; 0xffffffdb
   15430:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15434:	cmp	r3, #0
   15438:	beq	154b4 <__assert_fail@plt+0x41b8>
   1543c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15440:	ldr	r3, [r3, #12]
   15444:	str	r3, [fp, #-52]	; 0xffffffcc
   15448:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1544c:	bl	11260 <dirfd@plt>
   15450:	mov	r3, r0
   15454:	str	r3, [fp, #-92]	; 0xffffffa4
   15458:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1545c:	cmp	r3, #0
   15460:	bge	15618 <__assert_fail@plt+0x431c>
   15464:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15468:	ldr	r3, [r3, #12]
   1546c:	mov	r0, r3
   15470:	bl	112d8 <closedir@plt>
   15474:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15478:	mov	r2, #0
   1547c:	str	r2, [r3, #12]
   15480:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15484:	cmp	r3, #3
   15488:	bne	154ac <__assert_fail@plt+0x41b0>
   1548c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15490:	mov	r2, #4
   15494:	strh	r2, [r3, #56]	; 0x38
   15498:	bl	111c4 <__errno_location@plt>
   1549c:	mov	r3, r0
   154a0:	ldr	r2, [r3]
   154a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154a8:	str	r2, [r3, #32]
   154ac:	mov	r3, #0
   154b0:	b	15f20 <__assert_fail@plt+0x4c24>
   154b4:	ldr	r3, [r4, #48]	; 0x30
   154b8:	and	r3, r3, #4
   154bc:	cmp	r3, #0
   154c0:	bne	154dc <__assert_fail@plt+0x41e0>
   154c4:	ldr	r3, [r4, #48]	; 0x30
   154c8:	and	r3, r3, #512	; 0x200
   154cc:	cmp	r3, #0
   154d0:	beq	154dc <__assert_fail@plt+0x41e0>
   154d4:	ldr	r0, [r4, #32]
   154d8:	b	154e0 <__assert_fail@plt+0x41e4>
   154dc:	mvn	r0, #99	; 0x63
   154e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154e4:	ldr	r1, [r3, #24]
   154e8:	ldr	r3, [r4, #48]	; 0x30
   154ec:	and	r3, r3, #16
   154f0:	cmp	r3, #0
   154f4:	beq	15520 <__assert_fail@plt+0x4224>
   154f8:	ldr	r3, [r4, #48]	; 0x30
   154fc:	and	r3, r3, #1
   15500:	cmp	r3, #0
   15504:	beq	15518 <__assert_fail@plt+0x421c>
   15508:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1550c:	ldr	r3, [r3, #48]	; 0x30
   15510:	cmp	r3, #0
   15514:	beq	15520 <__assert_fail@plt+0x4224>
   15518:	mov	r2, #32768	; 0x8000
   1551c:	b	15524 <__assert_fail@plt+0x4228>
   15520:	mov	r2, #0
   15524:	sub	r3, fp, #92	; 0x5c
   15528:	bl	1893c <__assert_fail@plt+0x7640>
   1552c:	mov	r3, r0
   15530:	mov	r2, r3
   15534:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15538:	str	r2, [r3, #12]
   1553c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15540:	ldr	r3, [r3, #12]
   15544:	cmp	r3, #0
   15548:	bne	15580 <__assert_fail@plt+0x4284>
   1554c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15550:	cmp	r3, #3
   15554:	bne	15578 <__assert_fail@plt+0x427c>
   15558:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1555c:	mov	r2, #4
   15560:	strh	r2, [r3, #56]	; 0x38
   15564:	bl	111c4 <__errno_location@plt>
   15568:	mov	r3, r0
   1556c:	ldr	r2, [r3]
   15570:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15574:	str	r2, [r3, #32]
   15578:	mov	r3, #0
   1557c:	b	15f20 <__assert_fail@plt+0x4c24>
   15580:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15584:	ldrh	r3, [r3, #56]	; 0x38
   15588:	cmp	r3, #11
   1558c:	bne	155b4 <__assert_fail@plt+0x42b8>
   15590:	mov	r2, #0
   15594:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15598:	mov	r0, r4
   1559c:	bl	15f3c <__assert_fail@plt+0x4c40>
   155a0:	mov	r3, r0
   155a4:	mov	r2, r3
   155a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155ac:	strh	r2, [r3, #56]	; 0x38
   155b0:	b	15618 <__assert_fail@plt+0x431c>
   155b4:	ldr	r3, [r4, #48]	; 0x30
   155b8:	and	r3, r3, #256	; 0x100
   155bc:	cmp	r3, #0
   155c0:	beq	15618 <__assert_fail@plt+0x431c>
   155c4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   155c8:	mov	r0, r4
   155cc:	bl	138a4 <__assert_fail@plt+0x25a8>
   155d0:	mov	r2, #0
   155d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   155d8:	mov	r0, r4
   155dc:	bl	15f3c <__assert_fail@plt+0x4c40>
   155e0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   155e4:	mov	r0, r4
   155e8:	bl	1375c <__assert_fail@plt+0x2460>
   155ec:	mov	r3, r0
   155f0:	eor	r3, r3, #1
   155f4:	uxtb	r3, r3
   155f8:	cmp	r3, #0
   155fc:	beq	15618 <__assert_fail@plt+0x431c>
   15600:	bl	111c4 <__errno_location@plt>
   15604:	mov	r2, r0
   15608:	mov	r3, #12
   1560c:	str	r3, [r2]
   15610:	mov	r3, #0
   15614:	b	15f20 <__assert_fail@plt+0x4c24>
   15618:	ldr	r3, [r4, #44]	; 0x2c
   1561c:	cmp	r3, #0
   15620:	beq	1562c <__assert_fail@plt+0x4330>
   15624:	mvn	r3, #0
   15628:	b	15634 <__assert_fail@plt+0x4338>
   1562c:	movw	r3, #34464	; 0x86a0
   15630:	movt	r3, #1
   15634:	str	r3, [fp, #-56]	; 0xffffffc8
   15638:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   1563c:	cmp	r3, #0
   15640:	beq	15650 <__assert_fail@plt+0x4354>
   15644:	mov	r3, #1
   15648:	strb	r3, [fp, #-25]	; 0xffffffe7
   1564c:	b	157ec <__assert_fail@plt+0x44f0>
   15650:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15654:	cmp	r3, #2
   15658:	beq	156c0 <__assert_fail@plt+0x43c4>
   1565c:	ldr	r3, [r4, #48]	; 0x30
   15660:	and	r3, r3, #8
   15664:	cmp	r3, #0
   15668:	beq	156b8 <__assert_fail@plt+0x43bc>
   1566c:	ldr	r3, [r4, #48]	; 0x30
   15670:	and	r3, r3, #16
   15674:	cmp	r3, #0
   15678:	beq	156b8 <__assert_fail@plt+0x43bc>
   1567c:	ldr	r3, [r4, #48]	; 0x30
   15680:	and	r3, r3, #32
   15684:	cmp	r3, #0
   15688:	bne	156b8 <__assert_fail@plt+0x43bc>
   1568c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15690:	ldr	r3, [r3, #84]	; 0x54
   15694:	cmp	r3, #2
   15698:	bne	156b8 <__assert_fail@plt+0x43bc>
   1569c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   156a0:	mov	r1, r3
   156a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   156a8:	bl	147bc <__assert_fail@plt+0x34c0>
   156ac:	mov	r3, r0
   156b0:	cmp	r3, #0
   156b4:	bne	156c0 <__assert_fail@plt+0x43c4>
   156b8:	mov	r3, #1
   156bc:	b	156c4 <__assert_fail@plt+0x43c8>
   156c0:	mov	r3, #0
   156c4:	strb	r3, [fp, #-25]	; 0xffffffe7
   156c8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   156cc:	and	r3, r3, #1
   156d0:	strb	r3, [fp, #-25]	; 0xffffffe7
   156d4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   156d8:	cmp	r3, #0
   156dc:	bne	156ec <__assert_fail@plt+0x43f0>
   156e0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   156e4:	cmp	r3, #3
   156e8:	bne	157ec <__assert_fail@plt+0x44f0>
   156ec:	ldr	r3, [r4, #48]	; 0x30
   156f0:	and	r3, r3, #512	; 0x200
   156f4:	cmp	r3, #0
   156f8:	beq	15718 <__assert_fail@plt+0x441c>
   156fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15700:	mov	r2, #3
   15704:	movw	r1, #1030	; 0x406
   15708:	mov	r0, r3
   1570c:	bl	1d920 <__assert_fail@plt+0xc624>
   15710:	mov	r3, r0
   15714:	str	r3, [fp, #-92]	; 0xffffffa4
   15718:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1571c:	cmp	r3, #0
   15720:	blt	15744 <__assert_fail@plt+0x4448>
   15724:	ldr	r2, [fp, #-92]	; 0xffffffa4
   15728:	mov	r3, #0
   1572c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15730:	mov	r0, r4
   15734:	bl	166d0 <__assert_fail@plt+0x53d4>
   15738:	mov	r3, r0
   1573c:	cmp	r3, #0
   15740:	beq	157e4 <__assert_fail@plt+0x44e8>
   15744:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15748:	cmp	r3, #0
   1574c:	beq	15770 <__assert_fail@plt+0x4474>
   15750:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15754:	cmp	r3, #3
   15758:	bne	15770 <__assert_fail@plt+0x4474>
   1575c:	bl	111c4 <__errno_location@plt>
   15760:	mov	r3, r0
   15764:	ldr	r2, [r3]
   15768:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1576c:	str	r2, [r3, #32]
   15770:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15774:	ldrh	r3, [r3, #58]	; 0x3a
   15778:	orr	r3, r3, #1
   1577c:	uxth	r2, r3
   15780:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15784:	strh	r2, [r3, #58]	; 0x3a
   15788:	mov	r3, #0
   1578c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15790:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15794:	ldr	r3, [r3, #12]
   15798:	mov	r0, r3
   1579c:	bl	112d8 <closedir@plt>
   157a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157a4:	mov	r2, #0
   157a8:	str	r2, [r3, #12]
   157ac:	ldr	r3, [r4, #48]	; 0x30
   157b0:	and	r3, r3, #512	; 0x200
   157b4:	cmp	r3, #0
   157b8:	beq	157d4 <__assert_fail@plt+0x44d8>
   157bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157c0:	cmp	r3, #0
   157c4:	blt	157d4 <__assert_fail@plt+0x44d8>
   157c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157cc:	mov	r0, r3
   157d0:	bl	112c0 <close@plt>
   157d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157d8:	mov	r2, #0
   157dc:	str	r2, [r3, #12]
   157e0:	b	157ec <__assert_fail@plt+0x44f0>
   157e4:	mov	r3, #1
   157e8:	strb	r3, [fp, #-25]	; 0xffffffe7
   157ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157f0:	ldr	r2, [r3, #28]
   157f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157f8:	ldr	r3, [r3, #40]	; 0x28
   157fc:	sub	r3, r3, #1
   15800:	add	r3, r2, r3
   15804:	ldrb	r3, [r3]
   15808:	cmp	r3, #47	; 0x2f
   1580c:	bne	15820 <__assert_fail@plt+0x4524>
   15810:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15814:	ldr	r3, [r3, #40]	; 0x28
   15818:	sub	r3, r3, #1
   1581c:	b	15828 <__assert_fail@plt+0x452c>
   15820:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15824:	ldr	r3, [r3, #40]	; 0x28
   15828:	str	r3, [fp, #-60]	; 0xffffffc4
   1582c:	ldr	r3, [r4, #48]	; 0x30
   15830:	and	r3, r3, #4
   15834:	cmp	r3, #0
   15838:	beq	15864 <__assert_fail@plt+0x4568>
   1583c:	ldr	r2, [r4, #24]
   15840:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15844:	add	r3, r2, r3
   15848:	str	r3, [fp, #-36]	; 0xffffffdc
   1584c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15850:	add	r2, r3, #1
   15854:	str	r2, [fp, #-36]	; 0xffffffdc
   15858:	mov	r2, #47	; 0x2f
   1585c:	strb	r2, [r3]
   15860:	b	1586c <__assert_fail@plt+0x4570>
   15864:	mov	r3, #0
   15868:	str	r3, [fp, #-36]	; 0xffffffdc
   1586c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15870:	add	r3, r3, #1
   15874:	str	r3, [fp, #-60]	; 0xffffffc4
   15878:	ldr	r2, [r4, #36]	; 0x24
   1587c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15880:	sub	r3, r2, r3
   15884:	str	r3, [fp, #-32]	; 0xffffffe0
   15888:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1588c:	ldr	r3, [r3, #48]	; 0x30
   15890:	add	r3, r3, #1
   15894:	str	r3, [fp, #-64]	; 0xffffffc0
   15898:	mov	r3, #0
   1589c:	strb	r3, [fp, #-26]	; 0xffffffe6
   158a0:	mov	r7, #0
   158a4:	mov	r3, #0
   158a8:	str	r3, [fp, #-24]	; 0xffffffe8
   158ac:	mov	r6, #0
   158b0:	b	15d00 <__assert_fail@plt+0x4a04>
   158b4:	bl	111c4 <__errno_location@plt>
   158b8:	mov	r2, r0
   158bc:	mov	r3, #0
   158c0:	str	r3, [r2]
   158c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   158c8:	ldr	r3, [r3, #12]
   158cc:	mov	r0, r3
   158d0:	bl	11248 <readdir64@plt>
   158d4:	str	r0, [fp, #-68]	; 0xffffffbc
   158d8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   158dc:	cmp	r3, #0
   158e0:	bne	15938 <__assert_fail@plt+0x463c>
   158e4:	bl	111c4 <__errno_location@plt>
   158e8:	mov	r3, r0
   158ec:	ldr	r3, [r3]
   158f0:	cmp	r3, #0
   158f4:	beq	15d14 <__assert_fail@plt+0x4a18>
   158f8:	bl	111c4 <__errno_location@plt>
   158fc:	mov	r3, r0
   15900:	ldr	r2, [r3]
   15904:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15908:	str	r2, [r3, #32]
   1590c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15910:	cmp	r3, #0
   15914:	bne	15920 <__assert_fail@plt+0x4624>
   15918:	cmp	r6, #0
   1591c:	beq	15928 <__assert_fail@plt+0x462c>
   15920:	mov	r2, #7
   15924:	b	1592c <__assert_fail@plt+0x4630>
   15928:	mov	r2, #4
   1592c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15930:	strh	r2, [r3, #56]	; 0x38
   15934:	b	15d14 <__assert_fail@plt+0x4a18>
   15938:	ldr	r3, [r4, #48]	; 0x30
   1593c:	and	r3, r3, #32
   15940:	cmp	r3, #0
   15944:	bne	1598c <__assert_fail@plt+0x4690>
   15948:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1594c:	ldrb	r3, [r3, #19]
   15950:	cmp	r3, #46	; 0x2e
   15954:	bne	1598c <__assert_fail@plt+0x4690>
   15958:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1595c:	ldrb	r3, [r3, #20]
   15960:	cmp	r3, #0
   15964:	beq	15d00 <__assert_fail@plt+0x4a04>
   15968:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1596c:	ldrb	r3, [r3, #20]
   15970:	cmp	r3, #46	; 0x2e
   15974:	bne	1598c <__assert_fail@plt+0x4690>
   15978:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1597c:	ldrb	r3, [r3, #21]
   15980:	cmp	r3, #0
   15984:	bne	1598c <__assert_fail@plt+0x4690>
   15988:	b	15d00 <__assert_fail@plt+0x4a04>
   1598c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15990:	add	r3, r3, #19
   15994:	mov	r0, r3
   15998:	bl	11188 <strlen@plt>
   1599c:	str	r0, [fp, #-72]	; 0xffffffb8
   159a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   159a4:	add	r3, r3, #19
   159a8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   159ac:	mov	r1, r3
   159b0:	mov	r0, r4
   159b4:	bl	162f0 <__assert_fail@plt+0x4ff4>
   159b8:	mov	r5, r0
   159bc:	cmp	r5, #0
   159c0:	beq	15a10 <__assert_fail@plt+0x4714>
   159c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   159c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   159cc:	cmp	r2, r3
   159d0:	bcc	15ac8 <__assert_fail@plt+0x47cc>
   159d4:	ldr	r3, [r4, #24]
   159d8:	str	r3, [fp, #-76]	; 0xffffffb4
   159dc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   159e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   159e4:	add	r3, r2, r3
   159e8:	add	r3, r3, #1
   159ec:	mov	r1, r3
   159f0:	mov	r0, r4
   159f4:	bl	16420 <__assert_fail@plt+0x5124>
   159f8:	mov	r3, r0
   159fc:	eor	r3, r3, #1
   15a00:	uxtb	r3, r3
   15a04:	cmp	r3, #0
   15a08:	beq	15a80 <__assert_fail@plt+0x4784>
   15a0c:	b	15a14 <__assert_fail@plt+0x4718>
   15a10:	nop	{0}
   15a14:	bl	111c4 <__errno_location@plt>
   15a18:	mov	r3, r0
   15a1c:	ldr	r3, [r3]
   15a20:	str	r3, [fp, #-88]	; 0xffffffa8
   15a24:	mov	r0, r5
   15a28:	bl	13514 <__assert_fail@plt+0x2218>
   15a2c:	mov	r0, r7
   15a30:	bl	163c0 <__assert_fail@plt+0x50c4>
   15a34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15a38:	ldr	r3, [r3, #12]
   15a3c:	mov	r0, r3
   15a40:	bl	112d8 <closedir@plt>
   15a44:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15a48:	mov	r2, #0
   15a4c:	str	r2, [r3, #12]
   15a50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15a54:	mov	r2, #7
   15a58:	strh	r2, [r3, #56]	; 0x38
   15a5c:	ldr	r3, [r4, #48]	; 0x30
   15a60:	orr	r3, r3, #8192	; 0x2000
   15a64:	str	r3, [r4, #48]	; 0x30
   15a68:	bl	111c4 <__errno_location@plt>
   15a6c:	mov	r2, r0
   15a70:	ldr	r3, [fp, #-88]	; 0xffffffa8
   15a74:	str	r3, [r2]
   15a78:	mov	r3, #0
   15a7c:	b	15f20 <__assert_fail@plt+0x4c24>
   15a80:	ldr	r3, [r4, #24]
   15a84:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15a88:	cmp	r2, r3
   15a8c:	beq	15ab8 <__assert_fail@plt+0x47bc>
   15a90:	mov	r3, #1
   15a94:	strb	r3, [fp, #-26]	; 0xffffffe6
   15a98:	ldr	r3, [r4, #48]	; 0x30
   15a9c:	and	r3, r3, #4
   15aa0:	cmp	r3, #0
   15aa4:	beq	15ab8 <__assert_fail@plt+0x47bc>
   15aa8:	ldr	r2, [r4, #24]
   15aac:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15ab0:	add	r3, r2, r3
   15ab4:	str	r3, [fp, #-36]	; 0xffffffdc
   15ab8:	ldr	r2, [r4, #36]	; 0x24
   15abc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15ac0:	sub	r3, r2, r3
   15ac4:	str	r3, [fp, #-32]	; 0xffffffe0
   15ac8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15acc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15ad0:	add	r3, r2, r3
   15ad4:	str	r3, [fp, #-80]	; 0xffffffb0
   15ad8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15adc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15ae0:	cmp	r2, r3
   15ae4:	bcs	15b44 <__assert_fail@plt+0x4848>
   15ae8:	mov	r0, r5
   15aec:	bl	13514 <__assert_fail@plt+0x2218>
   15af0:	mov	r0, r7
   15af4:	bl	163c0 <__assert_fail@plt+0x50c4>
   15af8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15afc:	ldr	r3, [r3, #12]
   15b00:	mov	r0, r3
   15b04:	bl	112d8 <closedir@plt>
   15b08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b0c:	mov	r2, #0
   15b10:	str	r2, [r3, #12]
   15b14:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b18:	mov	r2, #7
   15b1c:	strh	r2, [r3, #56]	; 0x38
   15b20:	ldr	r3, [r4, #48]	; 0x30
   15b24:	orr	r3, r3, #8192	; 0x2000
   15b28:	str	r3, [r4, #48]	; 0x30
   15b2c:	bl	111c4 <__errno_location@plt>
   15b30:	mov	r2, r0
   15b34:	mov	r3, #36	; 0x24
   15b38:	str	r3, [r2]
   15b3c:	mov	r3, #0
   15b40:	b	15f20 <__assert_fail@plt+0x4c24>
   15b44:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15b48:	str	r3, [r5, #48]	; 0x30
   15b4c:	ldr	r3, [r4]
   15b50:	str	r3, [r5, #4]
   15b54:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15b58:	str	r3, [r5, #40]	; 0x28
   15b5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15b60:	ldrd	r2, [r3]
   15b64:	strd	r2, [r5, #160]	; 0xa0
   15b68:	ldr	r3, [r4, #48]	; 0x30
   15b6c:	and	r3, r3, #4
   15b70:	cmp	r3, #0
   15b74:	beq	15b9c <__assert_fail@plt+0x48a0>
   15b78:	ldr	r3, [r5, #28]
   15b7c:	str	r3, [r5, #24]
   15b80:	add	r1, r5, #168	; 0xa8
   15b84:	ldr	r3, [r5, #52]	; 0x34
   15b88:	add	r3, r3, #1
   15b8c:	mov	r2, r3
   15b90:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15b94:	bl	11020 <memmove@plt>
   15b98:	b	15ba4 <__assert_fail@plt+0x48a8>
   15b9c:	add	r3, r5, #168	; 0xa8
   15ba0:	str	r3, [r5, #24]
   15ba4:	ldr	r3, [r4, #44]	; 0x2c
   15ba8:	cmp	r3, #0
   15bac:	beq	15bc0 <__assert_fail@plt+0x48c4>
   15bb0:	ldr	r3, [r4, #48]	; 0x30
   15bb4:	and	r3, r3, #1024	; 0x400
   15bb8:	cmp	r3, #0
   15bbc:	beq	15c80 <__assert_fail@plt+0x4984>
   15bc0:	ldr	r3, [r4, #48]	; 0x30
   15bc4:	and	r3, r3, #8
   15bc8:	cmp	r3, #0
   15bcc:	beq	15c18 <__assert_fail@plt+0x491c>
   15bd0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15bd4:	ldrb	r3, [r3, #18]
   15bd8:	cmp	r3, #0
   15bdc:	beq	15c18 <__assert_fail@plt+0x491c>
   15be0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15be4:	ldrb	r3, [r3, #18]
   15be8:	cmp	r3, #4
   15bec:	beq	15c18 <__assert_fail@plt+0x491c>
   15bf0:	ldr	r3, [r4, #48]	; 0x30
   15bf4:	and	r3, r3, #16
   15bf8:	cmp	r3, #0
   15bfc:	bne	15c10 <__assert_fail@plt+0x4914>
   15c00:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15c04:	ldrb	r3, [r3, #18]
   15c08:	cmp	r3, #10
   15c0c:	beq	15c18 <__assert_fail@plt+0x491c>
   15c10:	mov	r3, #1
   15c14:	b	15c1c <__assert_fail@plt+0x4920>
   15c18:	mov	r3, #0
   15c1c:	strb	r3, [fp, #-81]	; 0xffffffaf
   15c20:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   15c24:	and	r3, r3, #1
   15c28:	strb	r3, [fp, #-81]	; 0xffffffaf
   15c2c:	mov	r3, #11
   15c30:	strh	r3, [r5, #56]	; 0x38
   15c34:	add	r2, r5, #64	; 0x40
   15c38:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15c3c:	ldrb	r3, [r3, #18]
   15c40:	mov	r1, r3
   15c44:	mov	r0, r2
   15c48:	bl	15318 <__assert_fail@plt+0x401c>
   15c4c:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   15c50:	cmp	r3, #0
   15c54:	movne	r3, #1
   15c58:	moveq	r3, #0
   15c5c:	uxtb	r3, r3
   15c60:	eor	r3, r3, #1
   15c64:	uxtb	r3, r3
   15c68:	and	r3, r3, #1
   15c6c:	uxtb	r3, r3
   15c70:	mov	r1, r3
   15c74:	mov	r0, r5
   15c78:	bl	13ac8 <__assert_fail@plt+0x27cc>
   15c7c:	b	15c98 <__assert_fail@plt+0x499c>
   15c80:	mov	r2, #0
   15c84:	mov	r1, r5
   15c88:	mov	r0, r4
   15c8c:	bl	15f3c <__assert_fail@plt+0x4c40>
   15c90:	mov	r3, r0
   15c94:	strh	r3, [r5, #56]	; 0x38
   15c98:	mov	r3, #0
   15c9c:	str	r3, [r5, #8]
   15ca0:	cmp	r7, #0
   15ca4:	bne	15cb4 <__assert_fail@plt+0x49b8>
   15ca8:	str	r5, [fp, #-24]	; 0xffffffe8
   15cac:	ldr	r7, [fp, #-24]	; 0xffffffe8
   15cb0:	b	15cc0 <__assert_fail@plt+0x49c4>
   15cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cb8:	str	r5, [r3, #8]
   15cbc:	str	r5, [fp, #-24]	; 0xffffffe8
   15cc0:	movw	r3, #10000	; 0x2710
   15cc4:	cmp	r6, r3
   15cc8:	bne	15cf0 <__assert_fail@plt+0x49f4>
   15ccc:	ldr	r3, [r4, #44]	; 0x2c
   15cd0:	cmp	r3, #0
   15cd4:	bne	15cf0 <__assert_fail@plt+0x49f4>
   15cd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15cdc:	mov	r1, r3
   15ce0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15ce4:	bl	14748 <__assert_fail@plt+0x344c>
   15ce8:	mov	r3, r0
   15cec:	strb	r3, [fp, #-37]	; 0xffffffdb
   15cf0:	add	r6, r6, #1
   15cf4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15cf8:	cmp	r3, r6
   15cfc:	bls	15d48 <__assert_fail@plt+0x4a4c>
   15d00:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d04:	ldr	r3, [r3, #12]
   15d08:	cmp	r3, #0
   15d0c:	bne	158b4 <__assert_fail@plt+0x45b8>
   15d10:	b	15d18 <__assert_fail@plt+0x4a1c>
   15d14:	nop	{0}
   15d18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d1c:	ldr	r3, [r3, #12]
   15d20:	cmp	r3, #0
   15d24:	beq	15d50 <__assert_fail@plt+0x4a54>
   15d28:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d2c:	ldr	r3, [r3, #12]
   15d30:	mov	r0, r3
   15d34:	bl	112d8 <closedir@plt>
   15d38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d3c:	mov	r2, #0
   15d40:	str	r2, [r3, #12]
   15d44:	b	15d54 <__assert_fail@plt+0x4a58>
   15d48:	nop	{0}
   15d4c:	b	15d54 <__assert_fail@plt+0x4a58>
   15d50:	nop	{0}
   15d54:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   15d58:	cmp	r3, #0
   15d5c:	beq	15d6c <__assert_fail@plt+0x4a70>
   15d60:	mov	r1, r7
   15d64:	mov	r0, r4
   15d68:	bl	16518 <__assert_fail@plt+0x521c>
   15d6c:	ldr	r3, [r4, #48]	; 0x30
   15d70:	and	r3, r3, #4
   15d74:	cmp	r3, #0
   15d78:	beq	15dac <__assert_fail@plt+0x4ab0>
   15d7c:	ldr	r3, [r4, #36]	; 0x24
   15d80:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15d84:	cmp	r2, r3
   15d88:	beq	15d94 <__assert_fail@plt+0x4a98>
   15d8c:	cmp	r6, #0
   15d90:	bne	15da0 <__assert_fail@plt+0x4aa4>
   15d94:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15d98:	sub	r3, r3, #1
   15d9c:	str	r3, [fp, #-36]	; 0xffffffdc
   15da0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15da4:	mov	r2, #0
   15da8:	strb	r2, [r3]
   15dac:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15db0:	eor	r3, r3, #1
   15db4:	uxtb	r3, r3
   15db8:	cmp	r3, #0
   15dbc:	beq	15e70 <__assert_fail@plt+0x4b74>
   15dc0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15dc4:	cmp	r3, #0
   15dc8:	beq	15e70 <__assert_fail@plt+0x4b74>
   15dcc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15dd0:	cmp	r3, #1
   15dd4:	beq	15de0 <__assert_fail@plt+0x4ae4>
   15dd8:	cmp	r6, #0
   15ddc:	bne	15e70 <__assert_fail@plt+0x4b74>
   15de0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15de4:	ldr	r3, [r3, #48]	; 0x30
   15de8:	cmp	r3, #0
   15dec:	bne	15e10 <__assert_fail@plt+0x4b14>
   15df0:	mov	r0, r4
   15df4:	bl	13c04 <__assert_fail@plt+0x2908>
   15df8:	mov	r3, r0
   15dfc:	cmp	r3, #0
   15e00:	movne	r3, #1
   15e04:	moveq	r3, #0
   15e08:	uxtb	r3, r3
   15e0c:	b	15e40 <__assert_fail@plt+0x4b44>
   15e10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e14:	ldr	r1, [r3, #4]
   15e18:	movw	r3, #64352	; 0xfb60
   15e1c:	movt	r3, #1
   15e20:	mvn	r2, #0
   15e24:	mov	r0, r4
   15e28:	bl	166d0 <__assert_fail@plt+0x53d4>
   15e2c:	mov	r3, r0
   15e30:	cmp	r3, #0
   15e34:	movne	r3, #1
   15e38:	moveq	r3, #0
   15e3c:	uxtb	r3, r3
   15e40:	cmp	r3, #0
   15e44:	beq	15e70 <__assert_fail@plt+0x4b74>
   15e48:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e4c:	mov	r2, #7
   15e50:	strh	r2, [r3, #56]	; 0x38
   15e54:	ldr	r3, [r4, #48]	; 0x30
   15e58:	orr	r3, r3, #8192	; 0x2000
   15e5c:	str	r3, [r4, #48]	; 0x30
   15e60:	mov	r0, r7
   15e64:	bl	163c0 <__assert_fail@plt+0x50c4>
   15e68:	mov	r3, #0
   15e6c:	b	15f20 <__assert_fail@plt+0x4c24>
   15e70:	cmp	r6, #0
   15e74:	bne	15ec0 <__assert_fail@plt+0x4bc4>
   15e78:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15e7c:	cmp	r3, #3
   15e80:	bne	15eb0 <__assert_fail@plt+0x4bb4>
   15e84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e88:	ldrh	r3, [r3, #56]	; 0x38
   15e8c:	cmp	r3, #4
   15e90:	beq	15eb0 <__assert_fail@plt+0x4bb4>
   15e94:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e98:	ldrh	r3, [r3, #56]	; 0x38
   15e9c:	cmp	r3, #7
   15ea0:	beq	15eb0 <__assert_fail@plt+0x4bb4>
   15ea4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15ea8:	mov	r2, #6
   15eac:	strh	r2, [r3, #56]	; 0x38
   15eb0:	mov	r0, r7
   15eb4:	bl	163c0 <__assert_fail@plt+0x50c4>
   15eb8:	mov	r3, #0
   15ebc:	b	15f20 <__assert_fail@plt+0x4c24>
   15ec0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15ec4:	cmp	r3, #0
   15ec8:	beq	15ef4 <__assert_fail@plt+0x4bf8>
   15ecc:	movw	r3, #21140	; 0x5294
   15ed0:	movt	r3, #1
   15ed4:	str	r3, [r4, #44]	; 0x2c
   15ed8:	mov	r2, r6
   15edc:	mov	r1, r7
   15ee0:	mov	r0, r4
   15ee4:	bl	1618c <__assert_fail@plt+0x4e90>
   15ee8:	mov	r7, r0
   15eec:	mov	r3, #0
   15ef0:	str	r3, [r4, #44]	; 0x2c
   15ef4:	ldr	r3, [r4, #44]	; 0x2c
   15ef8:	cmp	r3, #0
   15efc:	beq	15f1c <__assert_fail@plt+0x4c20>
   15f00:	cmp	r6, #1
   15f04:	bls	15f1c <__assert_fail@plt+0x4c20>
   15f08:	mov	r2, r6
   15f0c:	mov	r1, r7
   15f10:	mov	r0, r4
   15f14:	bl	1618c <__assert_fail@plt+0x4e90>
   15f18:	mov	r7, r0
   15f1c:	mov	r3, r7
   15f20:	mov	r0, r3
   15f24:	sub	sp, fp, #20
   15f28:	ldrd	r4, [sp]
   15f2c:	ldrd	r6, [sp, #8]
   15f30:	ldr	fp, [sp, #16]
   15f34:	add	sp, sp, #20
   15f38:	pop	{pc}		; (ldr pc, [sp], #4)
   15f3c:	str	r4, [sp, #-12]!
   15f40:	str	fp, [sp, #4]
   15f44:	str	lr, [sp, #8]
   15f48:	add	fp, sp, #8
   15f4c:	sub	sp, sp, #20
   15f50:	str	r0, [fp, #-24]	; 0xffffffe8
   15f54:	mov	r4, r1
   15f58:	mov	r3, r2
   15f5c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15f60:	add	r3, r4, #64	; 0x40
   15f64:	str	r3, [fp, #-16]
   15f68:	ldr	r3, [r4, #48]	; 0x30
   15f6c:	cmp	r3, #0
   15f70:	bne	15f90 <__assert_fail@plt+0x4c94>
   15f74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f78:	ldr	r3, [r3, #48]	; 0x30
   15f7c:	and	r3, r3, #1
   15f80:	cmp	r3, #0
   15f84:	beq	15f90 <__assert_fail@plt+0x4c94>
   15f88:	mov	r3, #1
   15f8c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15f90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f94:	ldr	r3, [r3, #48]	; 0x30
   15f98:	and	r3, r3, #2
   15f9c:	cmp	r3, #0
   15fa0:	bne	15fb0 <__assert_fail@plt+0x4cb4>
   15fa4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15fa8:	cmp	r3, #0
   15fac:	beq	16028 <__assert_fail@plt+0x4d2c>
   15fb0:	ldr	r3, [r4, #24]
   15fb4:	ldr	r1, [fp, #-16]
   15fb8:	mov	r0, r3
   15fbc:	bl	1ec0c <__assert_fail@plt+0xd910>
   15fc0:	mov	r3, r0
   15fc4:	cmp	r3, #0
   15fc8:	beq	16074 <__assert_fail@plt+0x4d78>
   15fcc:	bl	111c4 <__errno_location@plt>
   15fd0:	mov	r3, r0
   15fd4:	ldr	r3, [r3]
   15fd8:	cmp	r3, #2
   15fdc:	bne	16014 <__assert_fail@plt+0x4d18>
   15fe0:	ldr	r3, [r4, #24]
   15fe4:	ldr	r1, [fp, #-16]
   15fe8:	mov	r0, r3
   15fec:	bl	1ec2c <__assert_fail@plt+0xd930>
   15ff0:	mov	r3, r0
   15ff4:	cmp	r3, #0
   15ff8:	bne	16014 <__assert_fail@plt+0x4d18>
   15ffc:	bl	111c4 <__errno_location@plt>
   16000:	mov	r2, r0
   16004:	mov	r3, #0
   16008:	str	r3, [r2]
   1600c:	mov	r3, #13
   16010:	b	16118 <__assert_fail@plt+0x4e1c>
   16014:	bl	111c4 <__errno_location@plt>
   16018:	mov	r3, r0
   1601c:	ldr	r3, [r3]
   16020:	str	r3, [r4, #32]
   16024:	b	1605c <__assert_fail@plt+0x4d60>
   16028:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1602c:	ldr	r0, [r3, #32]
   16030:	ldr	r1, [r4, #24]
   16034:	mov	r3, #256	; 0x100
   16038:	ldr	r2, [fp, #-16]
   1603c:	bl	1ec3c <__assert_fail@plt+0xd940>
   16040:	mov	r3, r0
   16044:	cmp	r3, #0
   16048:	beq	16074 <__assert_fail@plt+0x4d78>
   1604c:	bl	111c4 <__errno_location@plt>
   16050:	mov	r3, r0
   16054:	ldr	r3, [r3]
   16058:	str	r3, [r4, #32]
   1605c:	mov	r2, #104	; 0x68
   16060:	mov	r1, #0
   16064:	ldr	r0, [fp, #-16]
   16068:	bl	111dc <memset@plt>
   1606c:	mov	r3, #10
   16070:	b	16118 <__assert_fail@plt+0x4e1c>
   16074:	ldr	r3, [fp, #-16]
   16078:	ldr	r3, [r3, #16]
   1607c:	and	r3, r3, #61440	; 0xf000
   16080:	cmp	r3, #16384	; 0x4000
   16084:	bne	160dc <__assert_fail@plt+0x4de0>
   16088:	ldrb	r3, [r4, #168]	; 0xa8
   1608c:	cmp	r3, #46	; 0x2e
   16090:	bne	160d4 <__assert_fail@plt+0x4dd8>
   16094:	ldrb	r3, [r4, #169]	; 0xa9
   16098:	cmp	r3, #0
   1609c:	beq	160b8 <__assert_fail@plt+0x4dbc>
   160a0:	ldrb	r3, [r4, #169]	; 0xa9
   160a4:	cmp	r3, #46	; 0x2e
   160a8:	bne	160d4 <__assert_fail@plt+0x4dd8>
   160ac:	ldrb	r3, [r4, #170]	; 0xaa
   160b0:	cmp	r3, #0
   160b4:	bne	160d4 <__assert_fail@plt+0x4dd8>
   160b8:	ldr	r3, [r4, #48]	; 0x30
   160bc:	cmp	r3, #0
   160c0:	bne	160cc <__assert_fail@plt+0x4dd0>
   160c4:	mov	r3, #1
   160c8:	b	16118 <__assert_fail@plt+0x4e1c>
   160cc:	mov	r3, #5
   160d0:	b	16118 <__assert_fail@plt+0x4e1c>
   160d4:	mov	r3, #1
   160d8:	b	16118 <__assert_fail@plt+0x4e1c>
   160dc:	ldr	r3, [fp, #-16]
   160e0:	ldr	r3, [r3, #16]
   160e4:	and	r3, r3, #61440	; 0xf000
   160e8:	cmp	r3, #40960	; 0xa000
   160ec:	bne	160f8 <__assert_fail@plt+0x4dfc>
   160f0:	mov	r3, #12
   160f4:	b	16118 <__assert_fail@plt+0x4e1c>
   160f8:	ldr	r3, [fp, #-16]
   160fc:	ldr	r3, [r3, #16]
   16100:	and	r3, r3, #61440	; 0xf000
   16104:	cmp	r3, #32768	; 0x8000
   16108:	bne	16114 <__assert_fail@plt+0x4e18>
   1610c:	mov	r3, #8
   16110:	b	16118 <__assert_fail@plt+0x4e1c>
   16114:	mov	r3, #3
   16118:	mov	r0, r3
   1611c:	sub	sp, fp, #8
   16120:	ldr	r4, [sp]
   16124:	ldr	fp, [sp, #4]
   16128:	add	sp, sp, #8
   1612c:	pop	{pc}		; (ldr pc, [sp], #4)
   16130:	str	fp, [sp, #-8]!
   16134:	str	lr, [sp, #4]
   16138:	add	fp, sp, #4
   1613c:	sub	sp, sp, #16
   16140:	str	r0, [fp, #-16]
   16144:	str	r1, [fp, #-20]	; 0xffffffec
   16148:	ldr	r3, [fp, #-16]
   1614c:	str	r3, [fp, #-8]
   16150:	ldr	r3, [fp, #-20]	; 0xffffffec
   16154:	str	r3, [fp, #-12]
   16158:	ldr	r3, [fp, #-8]
   1615c:	ldr	r3, [r3]
   16160:	ldr	r3, [r3, #44]	; 0x2c
   16164:	ldr	r3, [r3, #44]	; 0x2c
   16168:	ldr	r1, [fp, #-12]
   1616c:	ldr	r0, [fp, #-8]
   16170:	blx	r3
   16174:	mov	r3, r0
   16178:	mov	r0, r3
   1617c:	sub	sp, fp, #4
   16180:	ldr	fp, [sp]
   16184:	add	sp, sp, #4
   16188:	pop	{pc}		; (ldr pc, [sp], #4)
   1618c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16190:	str	r6, [sp, #8]
   16194:	str	fp, [sp, #12]
   16198:	str	lr, [sp, #16]
   1619c:	add	fp, sp, #16
   161a0:	sub	sp, sp, #28
   161a4:	str	r0, [fp, #-40]	; 0xffffffd8
   161a8:	str	r1, [fp, #-44]	; 0xffffffd4
   161ac:	mov	r5, r2
   161b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161b4:	ldr	r3, [r3, #44]	; 0x2c
   161b8:	str	r3, [fp, #-24]	; 0xffffffe8
   161bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161c0:	ldr	r3, [r3, #40]	; 0x28
   161c4:	cmp	r5, r3
   161c8:	bls	16254 <__assert_fail@plt+0x4f58>
   161cc:	add	r2, r5, #40	; 0x28
   161d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161d4:	str	r2, [r3, #40]	; 0x28
   161d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161dc:	ldr	r3, [r3, #40]	; 0x28
   161e0:	cmn	r3, #-1073741823	; 0xc0000001
   161e4:	bhi	16218 <__assert_fail@plt+0x4f1c>
   161e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161ec:	ldr	r2, [r3, #8]
   161f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161f4:	ldr	r3, [r3, #40]	; 0x28
   161f8:	lsl	r3, r3, #2
   161fc:	mov	r1, r3
   16200:	mov	r0, r2
   16204:	bl	1d0b4 <__assert_fail@plt+0xbdb8>
   16208:	str	r0, [fp, #-28]	; 0xffffffe4
   1620c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16210:	cmp	r3, #0
   16214:	bne	16248 <__assert_fail@plt+0x4f4c>
   16218:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1621c:	ldr	r3, [r3, #8]
   16220:	mov	r0, r3
   16224:	bl	13514 <__assert_fail@plt+0x2218>
   16228:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1622c:	mov	r2, #0
   16230:	str	r2, [r3, #8]
   16234:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16238:	mov	r2, #0
   1623c:	str	r2, [r3, #40]	; 0x28
   16240:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16244:	b	162d4 <__assert_fail@plt+0x4fd8>
   16248:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1624c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16250:	str	r2, [r3, #8]
   16254:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16258:	ldr	r4, [r3, #8]
   1625c:	ldr	r6, [fp, #-44]	; 0xffffffd4
   16260:	b	16274 <__assert_fail@plt+0x4f78>
   16264:	mov	r3, r4
   16268:	add	r4, r3, #4
   1626c:	str	r6, [r3]
   16270:	ldr	r6, [r6, #8]
   16274:	cmp	r6, #0
   16278:	bne	16264 <__assert_fail@plt+0x4f68>
   1627c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16280:	ldr	r0, [r3, #8]
   16284:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16288:	mov	r2, #4
   1628c:	mov	r1, r5
   16290:	bl	11278 <qsort@plt>
   16294:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16298:	ldr	r4, [r3, #8]
   1629c:	ldr	r3, [r4]
   162a0:	str	r3, [fp, #-44]	; 0xffffffd4
   162a4:	b	162b8 <__assert_fail@plt+0x4fbc>
   162a8:	ldr	r3, [r4]
   162ac:	ldr	r2, [r4, #4]
   162b0:	str	r2, [r3, #8]
   162b4:	add	r4, r4, #4
   162b8:	sub	r5, r5, #1
   162bc:	cmp	r5, #0
   162c0:	bne	162a8 <__assert_fail@plt+0x4fac>
   162c4:	ldr	r3, [r4]
   162c8:	mov	r2, #0
   162cc:	str	r2, [r3, #8]
   162d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   162d4:	mov	r0, r3
   162d8:	sub	sp, fp, #16
   162dc:	ldrd	r4, [sp]
   162e0:	ldr	r6, [sp, #8]
   162e4:	ldr	fp, [sp, #12]
   162e8:	add	sp, sp, #16
   162ec:	pop	{pc}		; (ldr pc, [sp], #4)
   162f0:	strd	r4, [sp, #-16]!
   162f4:	str	fp, [sp, #8]
   162f8:	str	lr, [sp, #12]
   162fc:	add	fp, sp, #12
   16300:	sub	sp, sp, #16
   16304:	str	r0, [fp, #-24]	; 0xffffffe8
   16308:	str	r1, [fp, #-28]	; 0xffffffe4
   1630c:	mov	r5, r2
   16310:	add	r3, r5, #176	; 0xb0
   16314:	bic	r3, r3, #7
   16318:	str	r3, [fp, #-16]
   1631c:	ldr	r0, [fp, #-16]
   16320:	bl	1d024 <__assert_fail@plt+0xbd28>
   16324:	mov	r3, r0
   16328:	mov	r4, r3
   1632c:	cmp	r4, #0
   16330:	bne	1633c <__assert_fail@plt+0x5040>
   16334:	mov	r3, #0
   16338:	b	163a8 <__assert_fail@plt+0x50ac>
   1633c:	add	r3, r4, #168	; 0xa8
   16340:	mov	r2, r5
   16344:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16348:	mov	r0, r3
   1634c:	bl	11044 <memcpy@plt>
   16350:	add	r3, r4, r5
   16354:	mov	r2, #0
   16358:	strb	r2, [r3, #168]	; 0xa8
   1635c:	str	r5, [r4, #52]	; 0x34
   16360:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16364:	str	r3, [r4, #44]	; 0x2c
   16368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1636c:	ldr	r3, [r3, #24]
   16370:	str	r3, [r4, #28]
   16374:	mov	r3, #0
   16378:	str	r3, [r4, #32]
   1637c:	mov	r3, #0
   16380:	str	r3, [r4, #12]
   16384:	mov	r3, #0
   16388:	strh	r3, [r4, #58]	; 0x3a
   1638c:	mov	r3, #3
   16390:	strh	r3, [r4, #60]	; 0x3c
   16394:	mov	r3, #0
   16398:	str	r3, [r4, #16]
   1639c:	mov	r3, #0
   163a0:	str	r3, [r4, #20]
   163a4:	mov	r3, r4
   163a8:	mov	r0, r3
   163ac:	sub	sp, fp, #12
   163b0:	ldrd	r4, [sp]
   163b4:	ldr	fp, [sp, #8]
   163b8:	add	sp, sp, #12
   163bc:	pop	{pc}		; (ldr pc, [sp], #4)
   163c0:	strd	r4, [sp, #-16]!
   163c4:	str	fp, [sp, #8]
   163c8:	str	lr, [sp, #12]
   163cc:	add	fp, sp, #12
   163d0:	mov	r5, r0
   163d4:	b	163fc <__assert_fail@plt+0x5100>
   163d8:	ldr	r5, [r5, #8]
   163dc:	ldr	r3, [r4, #12]
   163e0:	cmp	r3, #0
   163e4:	beq	163f4 <__assert_fail@plt+0x50f8>
   163e8:	ldr	r3, [r4, #12]
   163ec:	mov	r0, r3
   163f0:	bl	112d8 <closedir@plt>
   163f4:	mov	r0, r4
   163f8:	bl	13514 <__assert_fail@plt+0x2218>
   163fc:	mov	r4, r5
   16400:	cmp	r4, #0
   16404:	bne	163d8 <__assert_fail@plt+0x50dc>
   16408:	nop	{0}
   1640c:	sub	sp, fp, #12
   16410:	ldrd	r4, [sp]
   16414:	ldr	fp, [sp, #8]
   16418:	add	sp, sp, #12
   1641c:	pop	{pc}		; (ldr pc, [sp], #4)
   16420:	str	fp, [sp, #-8]!
   16424:	str	lr, [sp, #4]
   16428:	add	fp, sp, #4
   1642c:	sub	sp, sp, #16
   16430:	str	r0, [fp, #-16]
   16434:	str	r1, [fp, #-20]	; 0xffffffec
   16438:	ldr	r3, [fp, #-16]
   1643c:	ldr	r2, [r3, #36]	; 0x24
   16440:	ldr	r3, [fp, #-20]	; 0xffffffec
   16444:	add	r3, r2, r3
   16448:	add	r3, r3, #256	; 0x100
   1644c:	str	r3, [fp, #-8]
   16450:	ldr	r3, [fp, #-16]
   16454:	ldr	r3, [r3, #36]	; 0x24
   16458:	ldr	r2, [fp, #-8]
   1645c:	cmp	r2, r3
   16460:	bcs	16498 <__assert_fail@plt+0x519c>
   16464:	ldr	r3, [fp, #-16]
   16468:	ldr	r3, [r3, #24]
   1646c:	mov	r0, r3
   16470:	bl	13514 <__assert_fail@plt+0x2218>
   16474:	ldr	r3, [fp, #-16]
   16478:	mov	r2, #0
   1647c:	str	r2, [r3, #24]
   16480:	bl	111c4 <__errno_location@plt>
   16484:	mov	r2, r0
   16488:	mov	r3, #36	; 0x24
   1648c:	str	r3, [r2]
   16490:	mov	r3, #0
   16494:	b	16504 <__assert_fail@plt+0x5208>
   16498:	ldr	r3, [fp, #-16]
   1649c:	ldr	r2, [fp, #-8]
   164a0:	str	r2, [r3, #36]	; 0x24
   164a4:	ldr	r3, [fp, #-16]
   164a8:	ldr	r2, [r3, #24]
   164ac:	ldr	r3, [fp, #-16]
   164b0:	ldr	r3, [r3, #36]	; 0x24
   164b4:	mov	r1, r3
   164b8:	mov	r0, r2
   164bc:	bl	1d0b4 <__assert_fail@plt+0xbdb8>
   164c0:	str	r0, [fp, #-12]
   164c4:	ldr	r3, [fp, #-12]
   164c8:	cmp	r3, #0
   164cc:	bne	164f4 <__assert_fail@plt+0x51f8>
   164d0:	ldr	r3, [fp, #-16]
   164d4:	ldr	r3, [r3, #24]
   164d8:	mov	r0, r3
   164dc:	bl	13514 <__assert_fail@plt+0x2218>
   164e0:	ldr	r3, [fp, #-16]
   164e4:	mov	r2, #0
   164e8:	str	r2, [r3, #24]
   164ec:	mov	r3, #0
   164f0:	b	16504 <__assert_fail@plt+0x5208>
   164f4:	ldr	r3, [fp, #-16]
   164f8:	ldr	r2, [fp, #-12]
   164fc:	str	r2, [r3, #24]
   16500:	mov	r3, #1
   16504:	mov	r0, r3
   16508:	sub	sp, fp, #4
   1650c:	ldr	fp, [sp]
   16510:	add	sp, sp, #4
   16514:	pop	{pc}		; (ldr pc, [sp], #4)
   16518:	push	{fp}		; (str fp, [sp, #-4]!)
   1651c:	add	fp, sp, #0
   16520:	sub	sp, sp, #20
   16524:	str	r0, [fp, #-16]
   16528:	str	r1, [fp, #-20]	; 0xffffffec
   1652c:	ldr	r3, [fp, #-16]
   16530:	ldr	r3, [r3, #24]
   16534:	str	r3, [fp, #-12]
   16538:	ldr	r3, [fp, #-16]
   1653c:	ldr	r3, [r3, #4]
   16540:	str	r3, [fp, #-8]
   16544:	b	165a0 <__assert_fail@plt+0x52a4>
   16548:	ldr	r3, [fp, #-8]
   1654c:	ldr	r2, [r3, #24]
   16550:	ldr	r3, [fp, #-8]
   16554:	add	r3, r3, #168	; 0xa8
   16558:	cmp	r2, r3
   1655c:	beq	16588 <__assert_fail@plt+0x528c>
   16560:	ldr	r3, [fp, #-8]
   16564:	ldr	r2, [r3, #24]
   16568:	ldr	r3, [fp, #-8]
   1656c:	ldr	r3, [r3, #28]
   16570:	sub	r3, r2, r3
   16574:	mov	r2, r3
   16578:	ldr	r3, [fp, #-12]
   1657c:	add	r2, r3, r2
   16580:	ldr	r3, [fp, #-8]
   16584:	str	r2, [r3, #24]
   16588:	ldr	r3, [fp, #-8]
   1658c:	ldr	r2, [fp, #-12]
   16590:	str	r2, [r3, #28]
   16594:	ldr	r3, [fp, #-8]
   16598:	ldr	r3, [r3, #8]
   1659c:	str	r3, [fp, #-8]
   165a0:	ldr	r3, [fp, #-8]
   165a4:	cmp	r3, #0
   165a8:	bne	16548 <__assert_fail@plt+0x524c>
   165ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   165b0:	str	r3, [fp, #-8]
   165b4:	b	1662c <__assert_fail@plt+0x5330>
   165b8:	ldr	r3, [fp, #-8]
   165bc:	ldr	r2, [r3, #24]
   165c0:	ldr	r3, [fp, #-8]
   165c4:	add	r3, r3, #168	; 0xa8
   165c8:	cmp	r2, r3
   165cc:	beq	165f8 <__assert_fail@plt+0x52fc>
   165d0:	ldr	r3, [fp, #-8]
   165d4:	ldr	r2, [r3, #24]
   165d8:	ldr	r3, [fp, #-8]
   165dc:	ldr	r3, [r3, #28]
   165e0:	sub	r3, r2, r3
   165e4:	mov	r2, r3
   165e8:	ldr	r3, [fp, #-12]
   165ec:	add	r2, r3, r2
   165f0:	ldr	r3, [fp, #-8]
   165f4:	str	r2, [r3, #24]
   165f8:	ldr	r3, [fp, #-8]
   165fc:	ldr	r2, [fp, #-12]
   16600:	str	r2, [r3, #28]
   16604:	ldr	r3, [fp, #-8]
   16608:	ldr	r3, [r3, #8]
   1660c:	cmp	r3, #0
   16610:	beq	16620 <__assert_fail@plt+0x5324>
   16614:	ldr	r3, [fp, #-8]
   16618:	ldr	r3, [r3, #8]
   1661c:	b	16628 <__assert_fail@plt+0x532c>
   16620:	ldr	r3, [fp, #-8]
   16624:	ldr	r3, [r3, #4]
   16628:	str	r3, [fp, #-8]
   1662c:	ldr	r3, [fp, #-8]
   16630:	ldr	r3, [r3, #48]	; 0x30
   16634:	cmp	r3, #0
   16638:	bge	165b8 <__assert_fail@plt+0x52bc>
   1663c:	nop	{0}
   16640:	add	sp, fp, #0
   16644:	pop	{fp}		; (ldr fp, [sp], #4)
   16648:	bx	lr
   1664c:	str	fp, [sp, #-8]!
   16650:	str	lr, [sp, #4]
   16654:	add	fp, sp, #4
   16658:	sub	sp, sp, #16
   1665c:	str	r0, [fp, #-16]
   16660:	mov	r3, #0
   16664:	str	r3, [fp, #-8]
   16668:	b	166a4 <__assert_fail@plt+0x53a8>
   1666c:	ldr	r3, [fp, #-16]
   16670:	ldr	r3, [r3]
   16674:	mov	r0, r3
   16678:	bl	11188 <strlen@plt>
   1667c:	str	r0, [fp, #-12]
   16680:	ldr	r2, [fp, #-12]
   16684:	ldr	r3, [fp, #-8]
   16688:	cmp	r2, r3
   1668c:	bls	16698 <__assert_fail@plt+0x539c>
   16690:	ldr	r3, [fp, #-12]
   16694:	str	r3, [fp, #-8]
   16698:	ldr	r3, [fp, #-16]
   1669c:	add	r3, r3, #4
   166a0:	str	r3, [fp, #-16]
   166a4:	ldr	r3, [fp, #-16]
   166a8:	ldr	r3, [r3]
   166ac:	cmp	r3, #0
   166b0:	bne	1666c <__assert_fail@plt+0x5370>
   166b4:	ldr	r3, [fp, #-8]
   166b8:	add	r3, r3, #1
   166bc:	mov	r0, r3
   166c0:	sub	sp, fp, #4
   166c4:	ldr	fp, [sp]
   166c8:	add	sp, sp, #4
   166cc:	pop	{pc}		; (ldr pc, [sp], #4)
   166d0:	str	fp, [sp, #-8]!
   166d4:	str	lr, [sp, #4]
   166d8:	add	fp, sp, #4
   166dc:	sub	sp, sp, #144	; 0x90
   166e0:	str	r0, [fp, #-136]	; 0xffffff78
   166e4:	str	r1, [fp, #-140]	; 0xffffff74
   166e8:	str	r2, [fp, #-144]	; 0xffffff70
   166ec:	str	r3, [fp, #-148]	; 0xffffff6c
   166f0:	ldr	r3, [fp, #-148]	; 0xffffff6c
   166f4:	cmp	r3, #0
   166f8:	beq	16720 <__assert_fail@plt+0x5424>
   166fc:	movw	r1, #64352	; 0xfb60
   16700:	movt	r1, #1
   16704:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16708:	bl	10ff0 <strcmp@plt>
   1670c:	mov	r3, r0
   16710:	cmp	r3, #0
   16714:	bne	16720 <__assert_fail@plt+0x5424>
   16718:	mov	r3, #1
   1671c:	b	16724 <__assert_fail@plt+0x5428>
   16720:	mov	r3, #0
   16724:	strb	r3, [fp, #-13]
   16728:	ldrb	r3, [fp, #-13]
   1672c:	and	r3, r3, #1
   16730:	strb	r3, [fp, #-13]
   16734:	ldr	r3, [fp, #-136]	; 0xffffff78
   16738:	ldr	r3, [r3, #48]	; 0x30
   1673c:	and	r3, r3, #4
   16740:	cmp	r3, #0
   16744:	beq	16778 <__assert_fail@plt+0x547c>
   16748:	ldr	r3, [fp, #-136]	; 0xffffff78
   1674c:	ldr	r3, [r3, #48]	; 0x30
   16750:	and	r3, r3, #512	; 0x200
   16754:	cmp	r3, #0
   16758:	beq	16770 <__assert_fail@plt+0x5474>
   1675c:	ldr	r3, [fp, #-144]	; 0xffffff70
   16760:	cmp	r3, #0
   16764:	blt	16770 <__assert_fail@plt+0x5474>
   16768:	ldr	r0, [fp, #-144]	; 0xffffff70
   1676c:	bl	112c0 <close@plt>
   16770:	mov	r3, #0
   16774:	b	16978 <__assert_fail@plt+0x567c>
   16778:	ldr	r3, [fp, #-144]	; 0xffffff70
   1677c:	cmp	r3, #0
   16780:	bge	167f8 <__assert_fail@plt+0x54fc>
   16784:	ldrb	r3, [fp, #-13]
   16788:	cmp	r3, #0
   1678c:	beq	167f8 <__assert_fail@plt+0x54fc>
   16790:	ldr	r3, [fp, #-136]	; 0xffffff78
   16794:	ldr	r3, [r3, #48]	; 0x30
   16798:	and	r3, r3, #512	; 0x200
   1679c:	cmp	r3, #0
   167a0:	beq	167f8 <__assert_fail@plt+0x54fc>
   167a4:	ldr	r3, [fp, #-136]	; 0xffffff78
   167a8:	add	r3, r3, #60	; 0x3c
   167ac:	mov	r0, r3
   167b0:	bl	18674 <__assert_fail@plt+0x7378>
   167b4:	mov	r3, r0
   167b8:	eor	r3, r3, #1
   167bc:	uxtb	r3, r3
   167c0:	cmp	r3, #0
   167c4:	beq	167f8 <__assert_fail@plt+0x54fc>
   167c8:	ldr	r3, [fp, #-136]	; 0xffffff78
   167cc:	add	r3, r3, #60	; 0x3c
   167d0:	mov	r0, r3
   167d4:	bl	1875c <__assert_fail@plt+0x7460>
   167d8:	str	r0, [fp, #-20]	; 0xffffffec
   167dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   167e0:	cmp	r3, #0
   167e4:	blt	167f8 <__assert_fail@plt+0x54fc>
   167e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   167ec:	str	r3, [fp, #-144]	; 0xffffff70
   167f0:	mov	r3, #0
   167f4:	str	r3, [fp, #-148]	; 0xffffff6c
   167f8:	ldr	r3, [fp, #-144]	; 0xffffff70
   167fc:	str	r3, [fp, #-12]
   16800:	ldr	r3, [fp, #-144]	; 0xffffff70
   16804:	cmp	r3, #0
   16808:	bge	16830 <__assert_fail@plt+0x5534>
   1680c:	ldr	r1, [fp, #-148]	; 0xffffff6c
   16810:	ldr	r0, [fp, #-136]	; 0xffffff78
   16814:	bl	13ce8 <__assert_fail@plt+0x29ec>
   16818:	str	r0, [fp, #-12]
   1681c:	ldr	r3, [fp, #-12]
   16820:	cmp	r3, #0
   16824:	bge	16830 <__assert_fail@plt+0x5534>
   16828:	mvn	r3, #0
   1682c:	b	16978 <__assert_fail@plt+0x567c>
   16830:	ldr	r3, [fp, #-136]	; 0xffffff78
   16834:	ldr	r3, [r3, #48]	; 0x30
   16838:	and	r3, r3, #2
   1683c:	cmp	r3, #0
   16840:	bne	1686c <__assert_fail@plt+0x5570>
   16844:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16848:	cmp	r3, #0
   1684c:	beq	168e4 <__assert_fail@plt+0x55e8>
   16850:	movw	r1, #64352	; 0xfb60
   16854:	movt	r1, #1
   16858:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1685c:	bl	10ff0 <strcmp@plt>
   16860:	mov	r3, r0
   16864:	cmp	r3, #0
   16868:	bne	168e4 <__assert_fail@plt+0x55e8>
   1686c:	sub	r3, fp, #132	; 0x84
   16870:	mov	r1, r3
   16874:	ldr	r0, [fp, #-12]
   16878:	bl	1ec1c <__assert_fail@plt+0xd920>
   1687c:	mov	r3, r0
   16880:	cmp	r3, #0
   16884:	beq	16894 <__assert_fail@plt+0x5598>
   16888:	mvn	r3, #0
   1688c:	str	r3, [fp, #-8]
   16890:	b	16940 <__assert_fail@plt+0x5644>
   16894:	ldr	r3, [fp, #-140]	; 0xffffff74
   16898:	ldrd	r0, [r3, #64]	; 0x40
   1689c:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   168a0:	cmp	r1, r3
   168a4:	cmpeq	r0, r2
   168a8:	bne	168c4 <__assert_fail@plt+0x55c8>
   168ac:	ldr	r3, [fp, #-140]	; 0xffffff74
   168b0:	ldrd	r0, [r3, #160]	; 0xa0
   168b4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   168b8:	cmp	r1, r3
   168bc:	cmpeq	r0, r2
   168c0:	beq	168e4 <__assert_fail@plt+0x55e8>
   168c4:	bl	111c4 <__errno_location@plt>
   168c8:	mov	r2, r0
   168cc:	mov	r3, #2
   168d0:	str	r3, [r2]
   168d4:	mvn	r3, #0
   168d8:	str	r3, [fp, #-8]
   168dc:	nop	{0}
   168e0:	b	16940 <__assert_fail@plt+0x5644>
   168e4:	ldr	r3, [fp, #-136]	; 0xffffff78
   168e8:	ldr	r3, [r3, #48]	; 0x30
   168ec:	and	r3, r3, #512	; 0x200
   168f0:	cmp	r3, #0
   168f4:	beq	16934 <__assert_fail@plt+0x5638>
   168f8:	ldrb	r3, [fp, #-13]
   168fc:	cmp	r3, #0
   16900:	movne	r3, #1
   16904:	moveq	r3, #0
   16908:	uxtb	r3, r3
   1690c:	eor	r3, r3, #1
   16910:	uxtb	r3, r3
   16914:	and	r3, r3, #1
   16918:	uxtb	r3, r3
   1691c:	mov	r2, r3
   16920:	ldr	r1, [fp, #-12]
   16924:	ldr	r0, [fp, #-136]	; 0xffffff78
   16928:	bl	13b34 <__assert_fail@plt+0x2838>
   1692c:	mov	r3, #0
   16930:	b	16978 <__assert_fail@plt+0x567c>
   16934:	ldr	r0, [fp, #-12]
   16938:	bl	1126c <fchdir@plt>
   1693c:	str	r0, [fp, #-8]
   16940:	ldr	r3, [fp, #-144]	; 0xffffff70
   16944:	cmp	r3, #0
   16948:	bge	16974 <__assert_fail@plt+0x5678>
   1694c:	bl	111c4 <__errno_location@plt>
   16950:	mov	r3, r0
   16954:	ldr	r3, [r3]
   16958:	str	r3, [fp, #-24]	; 0xffffffe8
   1695c:	ldr	r0, [fp, #-12]
   16960:	bl	112c0 <close@plt>
   16964:	bl	111c4 <__errno_location@plt>
   16968:	mov	r2, r0
   1696c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16970:	str	r3, [r2]
   16974:	ldr	r3, [fp, #-8]
   16978:	mov	r0, r3
   1697c:	sub	sp, fp, #4
   16980:	ldr	fp, [sp]
   16984:	add	sp, sp, #4
   16988:	pop	{pc}		; (ldr pc, [sp], #4)
   1698c:	andeq	r0, r0, r0
   16990:	push	{fp}		; (str fp, [sp, #-4]!)
   16994:	add	fp, sp, #0
   16998:	sub	sp, sp, #12
   1699c:	str	r0, [fp, #-8]
   169a0:	ldr	r3, [fp, #-8]
   169a4:	ldr	r3, [r3, #8]
   169a8:	mov	r0, r3
   169ac:	add	sp, fp, #0
   169b0:	pop	{fp}		; (ldr fp, [sp], #4)
   169b4:	bx	lr
   169b8:	push	{fp}		; (str fp, [sp, #-4]!)
   169bc:	add	fp, sp, #0
   169c0:	sub	sp, sp, #12
   169c4:	str	r0, [fp, #-8]
   169c8:	ldr	r3, [fp, #-8]
   169cc:	ldr	r3, [r3, #12]
   169d0:	mov	r0, r3
   169d4:	add	sp, fp, #0
   169d8:	pop	{fp}		; (ldr fp, [sp], #4)
   169dc:	bx	lr
   169e0:	push	{fp}		; (str fp, [sp, #-4]!)
   169e4:	add	fp, sp, #0
   169e8:	sub	sp, sp, #12
   169ec:	str	r0, [fp, #-8]
   169f0:	ldr	r3, [fp, #-8]
   169f4:	ldr	r3, [r3, #16]
   169f8:	mov	r0, r3
   169fc:	add	sp, fp, #0
   16a00:	pop	{fp}		; (ldr fp, [sp], #4)
   16a04:	bx	lr
   16a08:	push	{fp}		; (str fp, [sp, #-4]!)
   16a0c:	add	fp, sp, #0
   16a10:	sub	sp, sp, #28
   16a14:	str	r0, [fp, #-24]	; 0xffffffe8
   16a18:	mov	r3, #0
   16a1c:	str	r3, [fp, #-12]
   16a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a24:	ldr	r3, [r3]
   16a28:	str	r3, [fp, #-8]
   16a2c:	b	16a9c <__assert_fail@plt+0x57a0>
   16a30:	ldr	r3, [fp, #-8]
   16a34:	ldr	r3, [r3]
   16a38:	cmp	r3, #0
   16a3c:	beq	16a90 <__assert_fail@plt+0x5794>
   16a40:	ldr	r3, [fp, #-8]
   16a44:	str	r3, [fp, #-16]
   16a48:	mov	r3, #1
   16a4c:	str	r3, [fp, #-20]	; 0xffffffec
   16a50:	b	16a60 <__assert_fail@plt+0x5764>
   16a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a58:	add	r3, r3, #1
   16a5c:	str	r3, [fp, #-20]	; 0xffffffec
   16a60:	ldr	r3, [fp, #-16]
   16a64:	ldr	r3, [r3, #4]
   16a68:	str	r3, [fp, #-16]
   16a6c:	ldr	r3, [fp, #-16]
   16a70:	cmp	r3, #0
   16a74:	bne	16a54 <__assert_fail@plt+0x5758>
   16a78:	ldr	r2, [fp, #-20]	; 0xffffffec
   16a7c:	ldr	r3, [fp, #-12]
   16a80:	cmp	r2, r3
   16a84:	bls	16a90 <__assert_fail@plt+0x5794>
   16a88:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a8c:	str	r3, [fp, #-12]
   16a90:	ldr	r3, [fp, #-8]
   16a94:	add	r3, r3, #8
   16a98:	str	r3, [fp, #-8]
   16a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16aa0:	ldr	r3, [r3, #4]
   16aa4:	ldr	r2, [fp, #-8]
   16aa8:	cmp	r2, r3
   16aac:	bcc	16a30 <__assert_fail@plt+0x5734>
   16ab0:	ldr	r3, [fp, #-12]
   16ab4:	mov	r0, r3
   16ab8:	add	sp, fp, #0
   16abc:	pop	{fp}		; (ldr fp, [sp], #4)
   16ac0:	bx	lr
   16ac4:	push	{fp}		; (str fp, [sp, #-4]!)
   16ac8:	add	fp, sp, #0
   16acc:	sub	sp, sp, #28
   16ad0:	str	r0, [fp, #-24]	; 0xffffffe8
   16ad4:	mov	r3, #0
   16ad8:	str	r3, [fp, #-12]
   16adc:	mov	r3, #0
   16ae0:	str	r3, [fp, #-16]
   16ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ae8:	ldr	r3, [r3]
   16aec:	str	r3, [fp, #-8]
   16af0:	b	16b58 <__assert_fail@plt+0x585c>
   16af4:	ldr	r3, [fp, #-8]
   16af8:	ldr	r3, [r3]
   16afc:	cmp	r3, #0
   16b00:	beq	16b4c <__assert_fail@plt+0x5850>
   16b04:	ldr	r3, [fp, #-8]
   16b08:	str	r3, [fp, #-20]	; 0xffffffec
   16b0c:	ldr	r3, [fp, #-12]
   16b10:	add	r3, r3, #1
   16b14:	str	r3, [fp, #-12]
   16b18:	ldr	r3, [fp, #-16]
   16b1c:	add	r3, r3, #1
   16b20:	str	r3, [fp, #-16]
   16b24:	b	16b34 <__assert_fail@plt+0x5838>
   16b28:	ldr	r3, [fp, #-16]
   16b2c:	add	r3, r3, #1
   16b30:	str	r3, [fp, #-16]
   16b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b38:	ldr	r3, [r3, #4]
   16b3c:	str	r3, [fp, #-20]	; 0xffffffec
   16b40:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b44:	cmp	r3, #0
   16b48:	bne	16b28 <__assert_fail@plt+0x582c>
   16b4c:	ldr	r3, [fp, #-8]
   16b50:	add	r3, r3, #8
   16b54:	str	r3, [fp, #-8]
   16b58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b5c:	ldr	r3, [r3, #4]
   16b60:	ldr	r2, [fp, #-8]
   16b64:	cmp	r2, r3
   16b68:	bcc	16af4 <__assert_fail@plt+0x57f8>
   16b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b70:	ldr	r3, [r3, #12]
   16b74:	ldr	r2, [fp, #-12]
   16b78:	cmp	r2, r3
   16b7c:	bne	16b9c <__assert_fail@plt+0x58a0>
   16b80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b84:	ldr	r3, [r3, #16]
   16b88:	ldr	r2, [fp, #-16]
   16b8c:	cmp	r2, r3
   16b90:	bne	16b9c <__assert_fail@plt+0x58a0>
   16b94:	mov	r3, #1
   16b98:	b	16ba0 <__assert_fail@plt+0x58a4>
   16b9c:	mov	r3, #0
   16ba0:	mov	r0, r3
   16ba4:	add	sp, fp, #0
   16ba8:	pop	{fp}		; (ldr fp, [sp], #4)
   16bac:	bx	lr
   16bb0:	str	fp, [sp, #-8]!
   16bb4:	str	lr, [sp, #4]
   16bb8:	add	fp, sp, #4
   16bbc:	sub	sp, sp, #32
   16bc0:	str	r0, [fp, #-24]	; 0xffffffe8
   16bc4:	str	r1, [fp, #-28]	; 0xffffffe4
   16bc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16bcc:	bl	169e0 <__assert_fail@plt+0x56e4>
   16bd0:	str	r0, [fp, #-8]
   16bd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16bd8:	bl	16990 <__assert_fail@plt+0x5694>
   16bdc:	str	r0, [fp, #-12]
   16be0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16be4:	bl	169b8 <__assert_fail@plt+0x56bc>
   16be8:	str	r0, [fp, #-16]
   16bec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16bf0:	bl	16a08 <__assert_fail@plt+0x570c>
   16bf4:	str	r0, [fp, #-20]	; 0xffffffec
   16bf8:	ldr	r2, [fp, #-8]
   16bfc:	movw	r1, #64376	; 0xfb78
   16c00:	movt	r1, #1
   16c04:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16c08:	bl	111b8 <fprintf@plt>
   16c0c:	ldr	r2, [fp, #-12]
   16c10:	movw	r1, #64400	; 0xfb90
   16c14:	movt	r1, #1
   16c18:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16c1c:	bl	111b8 <fprintf@plt>
   16c20:	ldr	r3, [fp, #-16]
   16c24:	vmov	s15, r3
   16c28:	vcvt.f64.u32	d7, s15
   16c2c:	vldr	d6, [pc, #84]	; 16c88 <__assert_fail@plt+0x598c>
   16c30:	vmul.f64	d5, d7, d6
   16c34:	ldr	r3, [fp, #-12]
   16c38:	vmov	s15, r3
   16c3c:	vcvt.f64.u32	d6, s15
   16c40:	vdiv.f64	d7, d5, d6
   16c44:	vstr	d7, [sp]
   16c48:	ldr	r2, [fp, #-16]
   16c4c:	movw	r1, #64424	; 0xfba8
   16c50:	movt	r1, #1
   16c54:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16c58:	bl	111b8 <fprintf@plt>
   16c5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16c60:	movw	r1, #64460	; 0xfbcc
   16c64:	movt	r1, #1
   16c68:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16c6c:	bl	111b8 <fprintf@plt>
   16c70:	nop	{0}
   16c74:	sub	sp, fp, #4
   16c78:	ldr	fp, [sp]
   16c7c:	add	sp, sp, #4
   16c80:	pop	{pc}		; (ldr pc, [sp], #4)
   16c84:	nop	{0}
   16c88:	andeq	r0, r0, r0
   16c8c:	subsmi	r0, r9, r0
   16c90:	str	fp, [sp, #-8]!
   16c94:	str	lr, [sp, #4]
   16c98:	add	fp, sp, #4
   16c9c:	sub	sp, sp, #16
   16ca0:	str	r0, [fp, #-16]
   16ca4:	str	r1, [fp, #-20]	; 0xffffffec
   16ca8:	ldr	r3, [fp, #-16]
   16cac:	ldr	r3, [r3, #24]
   16cb0:	ldr	r2, [fp, #-16]
   16cb4:	ldr	r2, [r2, #8]
   16cb8:	mov	r1, r2
   16cbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   16cc0:	blx	r3
   16cc4:	str	r0, [fp, #-8]
   16cc8:	ldr	r3, [fp, #-16]
   16ccc:	ldr	r3, [r3, #8]
   16cd0:	ldr	r2, [fp, #-8]
   16cd4:	cmp	r2, r3
   16cd8:	bcc	16ce0 <__assert_fail@plt+0x59e4>
   16cdc:	bl	112b4 <abort@plt>
   16ce0:	ldr	r3, [fp, #-16]
   16ce4:	ldr	r2, [r3]
   16ce8:	ldr	r3, [fp, #-8]
   16cec:	lsl	r3, r3, #3
   16cf0:	add	r3, r2, r3
   16cf4:	mov	r0, r3
   16cf8:	sub	sp, fp, #4
   16cfc:	ldr	fp, [sp]
   16d00:	add	sp, sp, #4
   16d04:	pop	{pc}		; (ldr pc, [sp], #4)
   16d08:	str	fp, [sp, #-8]!
   16d0c:	str	lr, [sp, #4]
   16d10:	add	fp, sp, #4
   16d14:	sub	sp, sp, #16
   16d18:	str	r0, [fp, #-16]
   16d1c:	str	r1, [fp, #-20]	; 0xffffffec
   16d20:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d24:	ldr	r0, [fp, #-16]
   16d28:	bl	16c90 <__assert_fail@plt+0x5994>
   16d2c:	str	r0, [fp, #-12]
   16d30:	ldr	r3, [fp, #-12]
   16d34:	ldr	r3, [r3]
   16d38:	cmp	r3, #0
   16d3c:	bne	16d48 <__assert_fail@plt+0x5a4c>
   16d40:	mov	r3, #0
   16d44:	b	16db8 <__assert_fail@plt+0x5abc>
   16d48:	ldr	r3, [fp, #-12]
   16d4c:	str	r3, [fp, #-8]
   16d50:	b	16da8 <__assert_fail@plt+0x5aac>
   16d54:	ldr	r3, [fp, #-8]
   16d58:	ldr	r3, [r3]
   16d5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d60:	cmp	r2, r3
   16d64:	beq	16d90 <__assert_fail@plt+0x5a94>
   16d68:	ldr	r3, [fp, #-16]
   16d6c:	ldr	r3, [r3, #28]
   16d70:	ldr	r2, [fp, #-8]
   16d74:	ldr	r2, [r2]
   16d78:	mov	r1, r2
   16d7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16d80:	blx	r3
   16d84:	mov	r3, r0
   16d88:	cmp	r3, #0
   16d8c:	beq	16d9c <__assert_fail@plt+0x5aa0>
   16d90:	ldr	r3, [fp, #-8]
   16d94:	ldr	r3, [r3]
   16d98:	b	16db8 <__assert_fail@plt+0x5abc>
   16d9c:	ldr	r3, [fp, #-8]
   16da0:	ldr	r3, [r3, #4]
   16da4:	str	r3, [fp, #-8]
   16da8:	ldr	r3, [fp, #-8]
   16dac:	cmp	r3, #0
   16db0:	bne	16d54 <__assert_fail@plt+0x5a58>
   16db4:	mov	r3, #0
   16db8:	mov	r0, r3
   16dbc:	sub	sp, fp, #4
   16dc0:	ldr	fp, [sp]
   16dc4:	add	sp, sp, #4
   16dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dcc:	str	fp, [sp, #-8]!
   16dd0:	str	lr, [sp, #4]
   16dd4:	add	fp, sp, #4
   16dd8:	sub	sp, sp, #16
   16ddc:	str	r0, [fp, #-16]
   16de0:	ldr	r3, [fp, #-16]
   16de4:	ldr	r3, [r3, #16]
   16de8:	cmp	r3, #0
   16dec:	bne	16df8 <__assert_fail@plt+0x5afc>
   16df0:	mov	r3, #0
   16df4:	b	16e48 <__assert_fail@plt+0x5b4c>
   16df8:	ldr	r3, [fp, #-16]
   16dfc:	ldr	r3, [r3]
   16e00:	str	r3, [fp, #-8]
   16e04:	ldr	r3, [fp, #-16]
   16e08:	ldr	r3, [r3, #4]
   16e0c:	ldr	r2, [fp, #-8]
   16e10:	cmp	r2, r3
   16e14:	bcc	16e1c <__assert_fail@plt+0x5b20>
   16e18:	bl	112b4 <abort@plt>
   16e1c:	ldr	r3, [fp, #-8]
   16e20:	ldr	r3, [r3]
   16e24:	cmp	r3, #0
   16e28:	beq	16e38 <__assert_fail@plt+0x5b3c>
   16e2c:	ldr	r3, [fp, #-8]
   16e30:	ldr	r3, [r3]
   16e34:	b	16e48 <__assert_fail@plt+0x5b4c>
   16e38:	ldr	r3, [fp, #-8]
   16e3c:	add	r3, r3, #8
   16e40:	str	r3, [fp, #-8]
   16e44:	b	16e04 <__assert_fail@plt+0x5b08>
   16e48:	mov	r0, r3
   16e4c:	sub	sp, fp, #4
   16e50:	ldr	fp, [sp]
   16e54:	add	sp, sp, #4
   16e58:	pop	{pc}		; (ldr pc, [sp], #4)
   16e5c:	str	fp, [sp, #-8]!
   16e60:	str	lr, [sp, #4]
   16e64:	add	fp, sp, #4
   16e68:	sub	sp, sp, #16
   16e6c:	str	r0, [fp, #-16]
   16e70:	str	r1, [fp, #-20]	; 0xffffffec
   16e74:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e78:	ldr	r0, [fp, #-16]
   16e7c:	bl	16c90 <__assert_fail@plt+0x5994>
   16e80:	str	r0, [fp, #-8]
   16e84:	ldr	r3, [fp, #-8]
   16e88:	str	r3, [fp, #-12]
   16e8c:	ldr	r3, [fp, #-12]
   16e90:	ldr	r3, [r3]
   16e94:	ldr	r2, [fp, #-20]	; 0xffffffec
   16e98:	cmp	r2, r3
   16e9c:	bne	16ec0 <__assert_fail@plt+0x5bc4>
   16ea0:	ldr	r3, [fp, #-12]
   16ea4:	ldr	r3, [r3, #4]
   16ea8:	cmp	r3, #0
   16eac:	beq	16ec0 <__assert_fail@plt+0x5bc4>
   16eb0:	ldr	r3, [fp, #-12]
   16eb4:	ldr	r3, [r3, #4]
   16eb8:	ldr	r3, [r3]
   16ebc:	b	16f1c <__assert_fail@plt+0x5c20>
   16ec0:	ldr	r3, [fp, #-12]
   16ec4:	ldr	r3, [r3, #4]
   16ec8:	str	r3, [fp, #-12]
   16ecc:	ldr	r3, [fp, #-12]
   16ed0:	cmp	r3, #0
   16ed4:	bne	16e8c <__assert_fail@plt+0x5b90>
   16ed8:	b	16ef8 <__assert_fail@plt+0x5bfc>
   16edc:	ldr	r3, [fp, #-8]
   16ee0:	ldr	r3, [r3]
   16ee4:	cmp	r3, #0
   16ee8:	beq	16ef8 <__assert_fail@plt+0x5bfc>
   16eec:	ldr	r3, [fp, #-8]
   16ef0:	ldr	r3, [r3]
   16ef4:	b	16f1c <__assert_fail@plt+0x5c20>
   16ef8:	ldr	r3, [fp, #-8]
   16efc:	add	r3, r3, #8
   16f00:	str	r3, [fp, #-8]
   16f04:	ldr	r3, [fp, #-16]
   16f08:	ldr	r3, [r3, #4]
   16f0c:	ldr	r2, [fp, #-8]
   16f10:	cmp	r2, r3
   16f14:	bcc	16edc <__assert_fail@plt+0x5be0>
   16f18:	mov	r3, #0
   16f1c:	mov	r0, r3
   16f20:	sub	sp, fp, #4
   16f24:	ldr	fp, [sp]
   16f28:	add	sp, sp, #4
   16f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f30:	push	{fp}		; (str fp, [sp, #-4]!)
   16f34:	add	fp, sp, #0
   16f38:	sub	sp, sp, #36	; 0x24
   16f3c:	str	r0, [fp, #-24]	; 0xffffffe8
   16f40:	str	r1, [fp, #-28]	; 0xffffffe4
   16f44:	str	r2, [fp, #-32]	; 0xffffffe0
   16f48:	mov	r3, #0
   16f4c:	str	r3, [fp, #-8]
   16f50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f54:	ldr	r3, [r3]
   16f58:	str	r3, [fp, #-12]
   16f5c:	b	16fdc <__assert_fail@plt+0x5ce0>
   16f60:	ldr	r3, [fp, #-12]
   16f64:	ldr	r3, [r3]
   16f68:	cmp	r3, #0
   16f6c:	beq	16fd0 <__assert_fail@plt+0x5cd4>
   16f70:	ldr	r3, [fp, #-12]
   16f74:	str	r3, [fp, #-16]
   16f78:	b	16fc4 <__assert_fail@plt+0x5cc8>
   16f7c:	ldr	r2, [fp, #-8]
   16f80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f84:	cmp	r2, r3
   16f88:	bcc	16f94 <__assert_fail@plt+0x5c98>
   16f8c:	ldr	r3, [fp, #-8]
   16f90:	b	16ff4 <__assert_fail@plt+0x5cf8>
   16f94:	ldr	r3, [fp, #-8]
   16f98:	add	r2, r3, #1
   16f9c:	str	r2, [fp, #-8]
   16fa0:	lsl	r3, r3, #2
   16fa4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16fa8:	add	r3, r2, r3
   16fac:	ldr	r2, [fp, #-16]
   16fb0:	ldr	r2, [r2]
   16fb4:	str	r2, [r3]
   16fb8:	ldr	r3, [fp, #-16]
   16fbc:	ldr	r3, [r3, #4]
   16fc0:	str	r3, [fp, #-16]
   16fc4:	ldr	r3, [fp, #-16]
   16fc8:	cmp	r3, #0
   16fcc:	bne	16f7c <__assert_fail@plt+0x5c80>
   16fd0:	ldr	r3, [fp, #-12]
   16fd4:	add	r3, r3, #8
   16fd8:	str	r3, [fp, #-12]
   16fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fe0:	ldr	r3, [r3, #4]
   16fe4:	ldr	r2, [fp, #-12]
   16fe8:	cmp	r2, r3
   16fec:	bcc	16f60 <__assert_fail@plt+0x5c64>
   16ff0:	ldr	r3, [fp, #-8]
   16ff4:	mov	r0, r3
   16ff8:	add	sp, fp, #0
   16ffc:	pop	{fp}		; (ldr fp, [sp], #4)
   17000:	bx	lr
   17004:	str	fp, [sp, #-8]!
   17008:	str	lr, [sp, #4]
   1700c:	add	fp, sp, #4
   17010:	sub	sp, sp, #32
   17014:	str	r0, [fp, #-24]	; 0xffffffe8
   17018:	str	r1, [fp, #-28]	; 0xffffffe4
   1701c:	str	r2, [fp, #-32]	; 0xffffffe0
   17020:	mov	r3, #0
   17024:	str	r3, [fp, #-8]
   17028:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1702c:	ldr	r3, [r3]
   17030:	str	r3, [fp, #-12]
   17034:	b	170b8 <__assert_fail@plt+0x5dbc>
   17038:	ldr	r3, [fp, #-12]
   1703c:	ldr	r3, [r3]
   17040:	cmp	r3, #0
   17044:	beq	170ac <__assert_fail@plt+0x5db0>
   17048:	ldr	r3, [fp, #-12]
   1704c:	str	r3, [fp, #-16]
   17050:	b	170a0 <__assert_fail@plt+0x5da4>
   17054:	ldr	r3, [fp, #-16]
   17058:	ldr	r2, [r3]
   1705c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17060:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17064:	mov	r0, r2
   17068:	blx	r3
   1706c:	mov	r3, r0
   17070:	eor	r3, r3, #1
   17074:	uxtb	r3, r3
   17078:	cmp	r3, #0
   1707c:	beq	17088 <__assert_fail@plt+0x5d8c>
   17080:	ldr	r3, [fp, #-8]
   17084:	b	170d0 <__assert_fail@plt+0x5dd4>
   17088:	ldr	r3, [fp, #-8]
   1708c:	add	r3, r3, #1
   17090:	str	r3, [fp, #-8]
   17094:	ldr	r3, [fp, #-16]
   17098:	ldr	r3, [r3, #4]
   1709c:	str	r3, [fp, #-16]
   170a0:	ldr	r3, [fp, #-16]
   170a4:	cmp	r3, #0
   170a8:	bne	17054 <__assert_fail@plt+0x5d58>
   170ac:	ldr	r3, [fp, #-12]
   170b0:	add	r3, r3, #8
   170b4:	str	r3, [fp, #-12]
   170b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170bc:	ldr	r3, [r3, #4]
   170c0:	ldr	r2, [fp, #-12]
   170c4:	cmp	r2, r3
   170c8:	bcc	17038 <__assert_fail@plt+0x5d3c>
   170cc:	ldr	r3, [fp, #-8]
   170d0:	mov	r0, r3
   170d4:	sub	sp, fp, #4
   170d8:	ldr	fp, [sp]
   170dc:	add	sp, sp, #4
   170e0:	pop	{pc}		; (ldr pc, [sp], #4)
   170e4:	push	{fp}		; (str fp, [sp, #-4]!)
   170e8:	add	fp, sp, #0
   170ec:	sub	sp, sp, #20
   170f0:	str	r0, [fp, #-16]
   170f4:	str	r1, [fp, #-20]	; 0xffffffec
   170f8:	mov	r3, #0
   170fc:	str	r3, [fp, #-8]
   17100:	b	17140 <__assert_fail@plt+0x5e44>
   17104:	ldr	r2, [fp, #-8]
   17108:	mov	r3, r2
   1710c:	lsl	r3, r3, #5
   17110:	sub	r2, r3, r2
   17114:	ldrb	r3, [fp, #-9]
   17118:	add	r3, r2, r3
   1711c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17120:	udiv	r2, r3, r2
   17124:	ldr	r1, [fp, #-20]	; 0xffffffec
   17128:	mul	r2, r1, r2
   1712c:	sub	r3, r3, r2
   17130:	str	r3, [fp, #-8]
   17134:	ldr	r3, [fp, #-16]
   17138:	add	r3, r3, #1
   1713c:	str	r3, [fp, #-16]
   17140:	ldr	r3, [fp, #-16]
   17144:	ldrb	r3, [r3]
   17148:	strb	r3, [fp, #-9]
   1714c:	ldrb	r3, [fp, #-9]
   17150:	cmp	r3, #0
   17154:	bne	17104 <__assert_fail@plt+0x5e08>
   17158:	ldr	r3, [fp, #-8]
   1715c:	mov	r0, r3
   17160:	add	sp, fp, #0
   17164:	pop	{fp}		; (ldr fp, [sp], #4)
   17168:	bx	lr
   1716c:	push	{fp}		; (str fp, [sp, #-4]!)
   17170:	add	fp, sp, #0
   17174:	sub	sp, sp, #20
   17178:	str	r0, [fp, #-16]
   1717c:	mov	r3, #3
   17180:	str	r3, [fp, #-8]
   17184:	ldr	r3, [fp, #-8]
   17188:	ldr	r2, [fp, #-8]
   1718c:	mul	r3, r2, r3
   17190:	str	r3, [fp, #-12]
   17194:	b	171c4 <__assert_fail@plt+0x5ec8>
   17198:	ldr	r3, [fp, #-8]
   1719c:	add	r3, r3, #1
   171a0:	str	r3, [fp, #-8]
   171a4:	ldr	r3, [fp, #-8]
   171a8:	lsl	r3, r3, #2
   171ac:	ldr	r2, [fp, #-12]
   171b0:	add	r3, r2, r3
   171b4:	str	r3, [fp, #-12]
   171b8:	ldr	r3, [fp, #-8]
   171bc:	add	r3, r3, #1
   171c0:	str	r3, [fp, #-8]
   171c4:	ldr	r2, [fp, #-12]
   171c8:	ldr	r3, [fp, #-16]
   171cc:	cmp	r2, r3
   171d0:	bcs	171f4 <__assert_fail@plt+0x5ef8>
   171d4:	ldr	r3, [fp, #-16]
   171d8:	ldr	r2, [fp, #-8]
   171dc:	udiv	r2, r3, r2
   171e0:	ldr	r1, [fp, #-8]
   171e4:	mul	r2, r1, r2
   171e8:	sub	r3, r3, r2
   171ec:	cmp	r3, #0
   171f0:	bne	17198 <__assert_fail@plt+0x5e9c>
   171f4:	ldr	r3, [fp, #-16]
   171f8:	ldr	r2, [fp, #-8]
   171fc:	udiv	r2, r3, r2
   17200:	ldr	r1, [fp, #-8]
   17204:	mul	r2, r1, r2
   17208:	sub	r3, r3, r2
   1720c:	cmp	r3, #0
   17210:	movne	r3, #1
   17214:	moveq	r3, #0
   17218:	uxtb	r3, r3
   1721c:	mov	r0, r3
   17220:	add	sp, fp, #0
   17224:	pop	{fp}		; (ldr fp, [sp], #4)
   17228:	bx	lr
   1722c:	str	fp, [sp, #-8]!
   17230:	str	lr, [sp, #4]
   17234:	add	fp, sp, #4
   17238:	sub	sp, sp, #8
   1723c:	str	r0, [fp, #-8]
   17240:	ldr	r3, [fp, #-8]
   17244:	cmp	r3, #9
   17248:	bhi	17254 <__assert_fail@plt+0x5f58>
   1724c:	mov	r3, #10
   17250:	str	r3, [fp, #-8]
   17254:	ldr	r3, [fp, #-8]
   17258:	orr	r3, r3, #1
   1725c:	str	r3, [fp, #-8]
   17260:	b	17270 <__assert_fail@plt+0x5f74>
   17264:	ldr	r3, [fp, #-8]
   17268:	add	r3, r3, #2
   1726c:	str	r3, [fp, #-8]
   17270:	ldr	r3, [fp, #-8]
   17274:	cmn	r3, #1
   17278:	beq	17298 <__assert_fail@plt+0x5f9c>
   1727c:	ldr	r0, [fp, #-8]
   17280:	bl	1716c <__assert_fail@plt+0x5e70>
   17284:	mov	r3, r0
   17288:	eor	r3, r3, #1
   1728c:	uxtb	r3, r3
   17290:	cmp	r3, #0
   17294:	bne	17264 <__assert_fail@plt+0x5f68>
   17298:	ldr	r3, [fp, #-8]
   1729c:	mov	r0, r3
   172a0:	sub	sp, fp, #4
   172a4:	ldr	fp, [sp]
   172a8:	add	sp, sp, #4
   172ac:	pop	{pc}		; (ldr pc, [sp], #4)
   172b0:	push	{fp}		; (str fp, [sp, #-4]!)
   172b4:	add	fp, sp, #0
   172b8:	sub	sp, sp, #12
   172bc:	str	r0, [fp, #-8]
   172c0:	ldr	r3, [fp, #-8]
   172c4:	movw	r2, #64356	; 0xfb64
   172c8:	movt	r2, #1
   172cc:	ldrd	r0, [r2]
   172d0:	strd	r0, [r3]
   172d4:	ldrd	r0, [r2, #8]
   172d8:	strd	r0, [r3, #8]
   172dc:	ldr	r2, [r2, #16]
   172e0:	str	r2, [r3, #16]
   172e4:	nop	{0}
   172e8:	add	sp, fp, #0
   172ec:	pop	{fp}		; (ldr fp, [sp], #4)
   172f0:	bx	lr
   172f4:	str	fp, [sp, #-8]!
   172f8:	str	lr, [sp, #4]
   172fc:	add	fp, sp, #4
   17300:	sub	sp, sp, #16
   17304:	str	r0, [fp, #-16]
   17308:	str	r1, [fp, #-20]	; 0xffffffec
   1730c:	ldr	r3, [fp, #-16]
   17310:	mov	r1, #3
   17314:	mov	r0, r3
   17318:	bl	1d344 <__assert_fail@plt+0xc048>
   1731c:	str	r0, [fp, #-8]
   17320:	ldr	r3, [fp, #-8]
   17324:	ldr	r2, [fp, #-20]	; 0xffffffec
   17328:	udiv	r2, r3, r2
   1732c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17330:	mul	r2, r1, r2
   17334:	sub	r3, r3, r2
   17338:	mov	r0, r3
   1733c:	sub	sp, fp, #4
   17340:	ldr	fp, [sp]
   17344:	add	sp, sp, #4
   17348:	pop	{pc}		; (ldr pc, [sp], #4)
   1734c:	push	{fp}		; (str fp, [sp, #-4]!)
   17350:	add	fp, sp, #0
   17354:	sub	sp, sp, #12
   17358:	str	r0, [fp, #-8]
   1735c:	str	r1, [fp, #-12]
   17360:	ldr	r2, [fp, #-8]
   17364:	ldr	r3, [fp, #-12]
   17368:	cmp	r2, r3
   1736c:	moveq	r3, #1
   17370:	movne	r3, #0
   17374:	uxtb	r3, r3
   17378:	mov	r0, r3
   1737c:	add	sp, fp, #0
   17380:	pop	{fp}		; (ldr fp, [sp], #4)
   17384:	bx	lr
   17388:	push	{fp}		; (str fp, [sp, #-4]!)
   1738c:	add	fp, sp, #0
   17390:	sub	sp, sp, #20
   17394:	str	r0, [fp, #-16]
   17398:	ldr	r3, [fp, #-16]
   1739c:	ldr	r3, [r3, #20]
   173a0:	str	r3, [fp, #-8]
   173a4:	ldr	r2, [fp, #-8]
   173a8:	movw	r3, #64356	; 0xfb64
   173ac:	movt	r3, #1
   173b0:	cmp	r2, r3
   173b4:	bne	173c0 <__assert_fail@plt+0x60c4>
   173b8:	mov	r3, #1
   173bc:	b	174b4 <__assert_fail@plt+0x61b8>
   173c0:	movw	r3, #52429	; 0xcccd
   173c4:	movt	r3, #15820	; 0x3dcc
   173c8:	str	r3, [fp, #-12]
   173cc:	ldr	r3, [fp, #-8]
   173d0:	vldr	s15, [r3, #8]
   173d4:	vldr	s14, [fp, #-12]
   173d8:	vcmpe.f32	s14, s15
   173dc:	vmrs	APSR_nzcv, fpscr
   173e0:	bpl	174a0 <__assert_fail@plt+0x61a4>
   173e4:	ldr	r3, [fp, #-8]
   173e8:	vldr	s14, [r3, #8]
   173ec:	vldr	s13, [pc, #208]	; 174c4 <__assert_fail@plt+0x61c8>
   173f0:	vldr	s15, [fp, #-12]
   173f4:	vsub.f32	s15, s13, s15
   173f8:	vcmpe.f32	s14, s15
   173fc:	vmrs	APSR_nzcv, fpscr
   17400:	bpl	174a0 <__assert_fail@plt+0x61a4>
   17404:	vldr	s15, [fp, #-12]
   17408:	vldr	s14, [pc, #180]	; 174c4 <__assert_fail@plt+0x61c8>
   1740c:	vadd.f32	s14, s15, s14
   17410:	ldr	r3, [fp, #-8]
   17414:	vldr	s15, [r3, #12]
   17418:	vcmpe.f32	s14, s15
   1741c:	vmrs	APSR_nzcv, fpscr
   17420:	bpl	174a0 <__assert_fail@plt+0x61a4>
   17424:	ldr	r3, [fp, #-8]
   17428:	vldr	s15, [r3]
   1742c:	vcmpe.f32	s15, #0.0
   17430:	vmrs	APSR_nzcv, fpscr
   17434:	blt	174a0 <__assert_fail@plt+0x61a4>
   17438:	ldr	r3, [fp, #-8]
   1743c:	vldr	s14, [r3]
   17440:	vldr	s15, [fp, #-12]
   17444:	vadd.f32	s14, s14, s15
   17448:	ldr	r3, [fp, #-8]
   1744c:	vldr	s15, [r3, #4]
   17450:	vcmpe.f32	s14, s15
   17454:	vmrs	APSR_nzcv, fpscr
   17458:	bpl	174a0 <__assert_fail@plt+0x61a4>
   1745c:	ldr	r3, [fp, #-8]
   17460:	vldr	s15, [r3, #4]
   17464:	vldr	s14, [pc, #88]	; 174c4 <__assert_fail@plt+0x61c8>
   17468:	vcmpe.f32	s15, s14
   1746c:	vmrs	APSR_nzcv, fpscr
   17470:	bhi	174a0 <__assert_fail@plt+0x61a4>
   17474:	ldr	r3, [fp, #-8]
   17478:	vldr	s14, [r3]
   1747c:	vldr	s15, [fp, #-12]
   17480:	vadd.f32	s14, s14, s15
   17484:	ldr	r3, [fp, #-8]
   17488:	vldr	s15, [r3, #8]
   1748c:	vcmpe.f32	s14, s15
   17490:	vmrs	APSR_nzcv, fpscr
   17494:	bpl	174a0 <__assert_fail@plt+0x61a4>
   17498:	mov	r3, #1
   1749c:	b	174b4 <__assert_fail@plt+0x61b8>
   174a0:	ldr	r2, [fp, #-16]
   174a4:	movw	r3, #64356	; 0xfb64
   174a8:	movt	r3, #1
   174ac:	str	r3, [r2, #20]
   174b0:	mov	r3, #0
   174b4:	mov	r0, r3
   174b8:	add	sp, fp, #0
   174bc:	pop	{fp}		; (ldr fp, [sp], #4)
   174c0:	bx	lr
   174c4:	svccc	0x00800000
   174c8:	str	fp, [sp, #-8]!
   174cc:	str	lr, [sp, #4]
   174d0:	add	fp, sp, #4
   174d4:	sub	sp, sp, #16
   174d8:	str	r0, [fp, #-16]
   174dc:	str	r1, [fp, #-20]	; 0xffffffec
   174e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174e4:	ldrb	r3, [r3, #16]
   174e8:	eor	r3, r3, #1
   174ec:	uxtb	r3, r3
   174f0:	cmp	r3, #0
   174f4:	beq	17540 <__assert_fail@plt+0x6244>
   174f8:	ldr	r3, [fp, #-16]
   174fc:	vmov	s15, r3
   17500:	vcvt.f32.u32	s13, s15
   17504:	ldr	r3, [fp, #-20]	; 0xffffffec
   17508:	vldr	s14, [r3, #8]
   1750c:	vdiv.f32	s15, s13, s14
   17510:	vstr	s15, [fp, #-8]
   17514:	vldr	s15, [fp, #-8]
   17518:	vldr	s14, [pc, #136]	; 175a8 <__assert_fail@plt+0x62ac>
   1751c:	vcmpe.f32	s15, s14
   17520:	vmrs	APSR_nzcv, fpscr
   17524:	blt	17530 <__assert_fail@plt+0x6234>
   17528:	mov	r3, #0
   1752c:	b	17594 <__assert_fail@plt+0x6298>
   17530:	vldr	s15, [fp, #-8]
   17534:	vcvt.u32.f32	s15, s15
   17538:	vmov	r3, s15
   1753c:	str	r3, [fp, #-16]
   17540:	ldr	r0, [fp, #-16]
   17544:	bl	1722c <__assert_fail@plt+0x5f30>
   17548:	str	r0, [fp, #-16]
   1754c:	mov	r3, #0
   17550:	ldr	r2, [fp, #-16]
   17554:	lsl	r2, r2, #2
   17558:	ldr	r1, [fp, #-16]
   1755c:	lsr	r1, r1, #30
   17560:	cmp	r1, #0
   17564:	beq	1756c <__assert_fail@plt+0x6270>
   17568:	mov	r3, #1
   1756c:	cmp	r2, #0
   17570:	bge	17578 <__assert_fail@plt+0x627c>
   17574:	mov	r3, #1
   17578:	and	r3, r3, #1
   1757c:	uxtb	r3, r3
   17580:	cmp	r3, #0
   17584:	beq	17590 <__assert_fail@plt+0x6294>
   17588:	mov	r3, #0
   1758c:	b	17594 <__assert_fail@plt+0x6298>
   17590:	ldr	r3, [fp, #-16]
   17594:	mov	r0, r3
   17598:	sub	sp, fp, #4
   1759c:	ldr	fp, [sp]
   175a0:	add	sp, sp, #4
   175a4:	pop	{pc}		; (ldr pc, [sp], #4)
   175a8:	svcmi	0x00800000
   175ac:	str	fp, [sp, #-8]!
   175b0:	str	lr, [sp, #4]
   175b4:	add	fp, sp, #4
   175b8:	sub	sp, sp, #24
   175bc:	str	r0, [fp, #-16]
   175c0:	str	r1, [fp, #-20]	; 0xffffffec
   175c4:	str	r2, [fp, #-24]	; 0xffffffe8
   175c8:	str	r3, [fp, #-28]	; 0xffffffe4
   175cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175d0:	cmp	r3, #0
   175d4:	bne	175e4 <__assert_fail@plt+0x62e8>
   175d8:	movw	r3, #29428	; 0x72f4
   175dc:	movt	r3, #1
   175e0:	str	r3, [fp, #-24]	; 0xffffffe8
   175e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   175e8:	cmp	r3, #0
   175ec:	bne	175fc <__assert_fail@plt+0x6300>
   175f0:	movw	r3, #29516	; 0x734c
   175f4:	movt	r3, #1
   175f8:	str	r3, [fp, #-28]	; 0xffffffe4
   175fc:	mov	r0, #40	; 0x28
   17600:	bl	1d024 <__assert_fail@plt+0xbd28>
   17604:	mov	r3, r0
   17608:	str	r3, [fp, #-8]
   1760c:	ldr	r3, [fp, #-8]
   17610:	cmp	r3, #0
   17614:	bne	17620 <__assert_fail@plt+0x6324>
   17618:	mov	r3, #0
   1761c:	b	1774c <__assert_fail@plt+0x6450>
   17620:	ldr	r3, [fp, #-20]	; 0xffffffec
   17624:	cmp	r3, #0
   17628:	bne	17638 <__assert_fail@plt+0x633c>
   1762c:	movw	r3, #64356	; 0xfb64
   17630:	movt	r3, #1
   17634:	str	r3, [fp, #-20]	; 0xffffffec
   17638:	ldr	r3, [fp, #-8]
   1763c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17640:	str	r2, [r3, #20]
   17644:	ldr	r0, [fp, #-8]
   17648:	bl	17388 <__assert_fail@plt+0x608c>
   1764c:	mov	r3, r0
   17650:	eor	r3, r3, #1
   17654:	uxtb	r3, r3
   17658:	cmp	r3, #0
   1765c:	bne	1772c <__assert_fail@plt+0x6430>
   17660:	ldr	r1, [fp, #-20]	; 0xffffffec
   17664:	ldr	r0, [fp, #-16]
   17668:	bl	174c8 <__assert_fail@plt+0x61cc>
   1766c:	mov	r2, r0
   17670:	ldr	r3, [fp, #-8]
   17674:	str	r2, [r3, #8]
   17678:	ldr	r3, [fp, #-8]
   1767c:	ldr	r3, [r3, #8]
   17680:	cmp	r3, #0
   17684:	beq	17734 <__assert_fail@plt+0x6438>
   17688:	ldr	r3, [fp, #-8]
   1768c:	ldr	r3, [r3, #8]
   17690:	mov	r1, #8
   17694:	mov	r0, r3
   17698:	bl	1cf54 <__assert_fail@plt+0xbc58>
   1769c:	mov	r3, r0
   176a0:	mov	r2, r3
   176a4:	ldr	r3, [fp, #-8]
   176a8:	str	r2, [r3]
   176ac:	ldr	r3, [fp, #-8]
   176b0:	ldr	r3, [r3]
   176b4:	cmp	r3, #0
   176b8:	beq	1773c <__assert_fail@plt+0x6440>
   176bc:	ldr	r3, [fp, #-8]
   176c0:	ldr	r2, [r3]
   176c4:	ldr	r3, [fp, #-8]
   176c8:	ldr	r3, [r3, #8]
   176cc:	lsl	r3, r3, #3
   176d0:	add	r2, r2, r3
   176d4:	ldr	r3, [fp, #-8]
   176d8:	str	r2, [r3, #4]
   176dc:	ldr	r3, [fp, #-8]
   176e0:	mov	r2, #0
   176e4:	str	r2, [r3, #12]
   176e8:	ldr	r3, [fp, #-8]
   176ec:	mov	r2, #0
   176f0:	str	r2, [r3, #16]
   176f4:	ldr	r3, [fp, #-8]
   176f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   176fc:	str	r2, [r3, #24]
   17700:	ldr	r3, [fp, #-8]
   17704:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17708:	str	r2, [r3, #28]
   1770c:	ldr	r3, [fp, #-8]
   17710:	ldr	r2, [fp, #4]
   17714:	str	r2, [r3, #32]
   17718:	ldr	r3, [fp, #-8]
   1771c:	mov	r2, #0
   17720:	str	r2, [r3, #36]	; 0x24
   17724:	ldr	r3, [fp, #-8]
   17728:	b	1774c <__assert_fail@plt+0x6450>
   1772c:	nop	{0}
   17730:	b	17740 <__assert_fail@plt+0x6444>
   17734:	nop	{0}
   17738:	b	17740 <__assert_fail@plt+0x6444>
   1773c:	nop	{0}
   17740:	ldr	r0, [fp, #-8]
   17744:	bl	13514 <__assert_fail@plt+0x2218>
   17748:	mov	r3, #0
   1774c:	mov	r0, r3
   17750:	sub	sp, fp, #4
   17754:	ldr	fp, [sp]
   17758:	add	sp, sp, #4
   1775c:	pop	{pc}		; (ldr pc, [sp], #4)
   17760:	str	fp, [sp, #-8]!
   17764:	str	lr, [sp, #4]
   17768:	add	fp, sp, #4
   1776c:	sub	sp, sp, #24
   17770:	str	r0, [fp, #-24]	; 0xffffffe8
   17774:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17778:	ldr	r3, [r3]
   1777c:	str	r3, [fp, #-8]
   17780:	b	17860 <__assert_fail@plt+0x6564>
   17784:	ldr	r3, [fp, #-8]
   17788:	ldr	r3, [r3]
   1778c:	cmp	r3, #0
   17790:	beq	17854 <__assert_fail@plt+0x6558>
   17794:	ldr	r3, [fp, #-8]
   17798:	ldr	r3, [r3, #4]
   1779c:	str	r3, [fp, #-12]
   177a0:	b	17808 <__assert_fail@plt+0x650c>
   177a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177a8:	ldr	r3, [r3, #32]
   177ac:	cmp	r3, #0
   177b0:	beq	177cc <__assert_fail@plt+0x64d0>
   177b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177b8:	ldr	r3, [r3, #32]
   177bc:	ldr	r2, [fp, #-12]
   177c0:	ldr	r2, [r2]
   177c4:	mov	r0, r2
   177c8:	blx	r3
   177cc:	ldr	r3, [fp, #-12]
   177d0:	mov	r2, #0
   177d4:	str	r2, [r3]
   177d8:	ldr	r3, [fp, #-12]
   177dc:	ldr	r3, [r3, #4]
   177e0:	str	r3, [fp, #-16]
   177e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177e8:	ldr	r2, [r3, #36]	; 0x24
   177ec:	ldr	r3, [fp, #-12]
   177f0:	str	r2, [r3, #4]
   177f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177f8:	ldr	r2, [fp, #-12]
   177fc:	str	r2, [r3, #36]	; 0x24
   17800:	ldr	r3, [fp, #-16]
   17804:	str	r3, [fp, #-12]
   17808:	ldr	r3, [fp, #-12]
   1780c:	cmp	r3, #0
   17810:	bne	177a4 <__assert_fail@plt+0x64a8>
   17814:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17818:	ldr	r3, [r3, #32]
   1781c:	cmp	r3, #0
   17820:	beq	1783c <__assert_fail@plt+0x6540>
   17824:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17828:	ldr	r3, [r3, #32]
   1782c:	ldr	r2, [fp, #-8]
   17830:	ldr	r2, [r2]
   17834:	mov	r0, r2
   17838:	blx	r3
   1783c:	ldr	r3, [fp, #-8]
   17840:	mov	r2, #0
   17844:	str	r2, [r3]
   17848:	ldr	r3, [fp, #-8]
   1784c:	mov	r2, #0
   17850:	str	r2, [r3, #4]
   17854:	ldr	r3, [fp, #-8]
   17858:	add	r3, r3, #8
   1785c:	str	r3, [fp, #-8]
   17860:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17864:	ldr	r3, [r3, #4]
   17868:	ldr	r2, [fp, #-8]
   1786c:	cmp	r2, r3
   17870:	bcc	17784 <__assert_fail@plt+0x6488>
   17874:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17878:	mov	r2, #0
   1787c:	str	r2, [r3, #12]
   17880:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17884:	mov	r2, #0
   17888:	str	r2, [r3, #16]
   1788c:	nop	{0}
   17890:	sub	sp, fp, #4
   17894:	ldr	fp, [sp]
   17898:	add	sp, sp, #4
   1789c:	pop	{pc}		; (ldr pc, [sp], #4)
   178a0:	str	fp, [sp, #-8]!
   178a4:	str	lr, [sp, #4]
   178a8:	add	fp, sp, #4
   178ac:	sub	sp, sp, #24
   178b0:	str	r0, [fp, #-24]	; 0xffffffe8
   178b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178b8:	ldr	r3, [r3, #32]
   178bc:	cmp	r3, #0
   178c0:	beq	17950 <__assert_fail@plt+0x6654>
   178c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178c8:	ldr	r3, [r3, #16]
   178cc:	cmp	r3, #0
   178d0:	beq	17950 <__assert_fail@plt+0x6654>
   178d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178d8:	ldr	r3, [r3]
   178dc:	str	r3, [fp, #-8]
   178e0:	b	1793c <__assert_fail@plt+0x6640>
   178e4:	ldr	r3, [fp, #-8]
   178e8:	ldr	r3, [r3]
   178ec:	cmp	r3, #0
   178f0:	beq	17930 <__assert_fail@plt+0x6634>
   178f4:	ldr	r3, [fp, #-8]
   178f8:	str	r3, [fp, #-12]
   178fc:	b	17924 <__assert_fail@plt+0x6628>
   17900:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17904:	ldr	r3, [r3, #32]
   17908:	ldr	r2, [fp, #-12]
   1790c:	ldr	r2, [r2]
   17910:	mov	r0, r2
   17914:	blx	r3
   17918:	ldr	r3, [fp, #-12]
   1791c:	ldr	r3, [r3, #4]
   17920:	str	r3, [fp, #-12]
   17924:	ldr	r3, [fp, #-12]
   17928:	cmp	r3, #0
   1792c:	bne	17900 <__assert_fail@plt+0x6604>
   17930:	ldr	r3, [fp, #-8]
   17934:	add	r3, r3, #8
   17938:	str	r3, [fp, #-8]
   1793c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17940:	ldr	r3, [r3, #4]
   17944:	ldr	r2, [fp, #-8]
   17948:	cmp	r2, r3
   1794c:	bcc	178e4 <__assert_fail@plt+0x65e8>
   17950:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17954:	ldr	r3, [r3]
   17958:	str	r3, [fp, #-8]
   1795c:	b	179a4 <__assert_fail@plt+0x66a8>
   17960:	ldr	r3, [fp, #-8]
   17964:	ldr	r3, [r3, #4]
   17968:	str	r3, [fp, #-12]
   1796c:	b	1798c <__assert_fail@plt+0x6690>
   17970:	ldr	r3, [fp, #-12]
   17974:	ldr	r3, [r3, #4]
   17978:	str	r3, [fp, #-16]
   1797c:	ldr	r0, [fp, #-12]
   17980:	bl	13514 <__assert_fail@plt+0x2218>
   17984:	ldr	r3, [fp, #-16]
   17988:	str	r3, [fp, #-12]
   1798c:	ldr	r3, [fp, #-12]
   17990:	cmp	r3, #0
   17994:	bne	17970 <__assert_fail@plt+0x6674>
   17998:	ldr	r3, [fp, #-8]
   1799c:	add	r3, r3, #8
   179a0:	str	r3, [fp, #-8]
   179a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179a8:	ldr	r3, [r3, #4]
   179ac:	ldr	r2, [fp, #-8]
   179b0:	cmp	r2, r3
   179b4:	bcc	17960 <__assert_fail@plt+0x6664>
   179b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179bc:	ldr	r3, [r3, #36]	; 0x24
   179c0:	str	r3, [fp, #-12]
   179c4:	b	179e4 <__assert_fail@plt+0x66e8>
   179c8:	ldr	r3, [fp, #-12]
   179cc:	ldr	r3, [r3, #4]
   179d0:	str	r3, [fp, #-16]
   179d4:	ldr	r0, [fp, #-12]
   179d8:	bl	13514 <__assert_fail@plt+0x2218>
   179dc:	ldr	r3, [fp, #-16]
   179e0:	str	r3, [fp, #-12]
   179e4:	ldr	r3, [fp, #-12]
   179e8:	cmp	r3, #0
   179ec:	bne	179c8 <__assert_fail@plt+0x66cc>
   179f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179f4:	ldr	r3, [r3]
   179f8:	mov	r0, r3
   179fc:	bl	13514 <__assert_fail@plt+0x2218>
   17a00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a04:	bl	13514 <__assert_fail@plt+0x2218>
   17a08:	nop	{0}
   17a0c:	sub	sp, fp, #4
   17a10:	ldr	fp, [sp]
   17a14:	add	sp, sp, #4
   17a18:	pop	{pc}		; (ldr pc, [sp], #4)
   17a1c:	str	fp, [sp, #-8]!
   17a20:	str	lr, [sp, #4]
   17a24:	add	fp, sp, #4
   17a28:	sub	sp, sp, #16
   17a2c:	str	r0, [fp, #-16]
   17a30:	ldr	r3, [fp, #-16]
   17a34:	ldr	r3, [r3, #36]	; 0x24
   17a38:	cmp	r3, #0
   17a3c:	beq	17a60 <__assert_fail@plt+0x6764>
   17a40:	ldr	r3, [fp, #-16]
   17a44:	ldr	r3, [r3, #36]	; 0x24
   17a48:	str	r3, [fp, #-8]
   17a4c:	ldr	r3, [fp, #-8]
   17a50:	ldr	r2, [r3, #4]
   17a54:	ldr	r3, [fp, #-16]
   17a58:	str	r2, [r3, #36]	; 0x24
   17a5c:	b	17a70 <__assert_fail@plt+0x6774>
   17a60:	mov	r0, #8
   17a64:	bl	1d024 <__assert_fail@plt+0xbd28>
   17a68:	mov	r3, r0
   17a6c:	str	r3, [fp, #-8]
   17a70:	ldr	r3, [fp, #-8]
   17a74:	mov	r0, r3
   17a78:	sub	sp, fp, #4
   17a7c:	ldr	fp, [sp]
   17a80:	add	sp, sp, #4
   17a84:	pop	{pc}		; (ldr pc, [sp], #4)
   17a88:	push	{fp}		; (str fp, [sp, #-4]!)
   17a8c:	add	fp, sp, #0
   17a90:	sub	sp, sp, #12
   17a94:	str	r0, [fp, #-8]
   17a98:	str	r1, [fp, #-12]
   17a9c:	ldr	r3, [fp, #-12]
   17aa0:	mov	r2, #0
   17aa4:	str	r2, [r3]
   17aa8:	ldr	r3, [fp, #-8]
   17aac:	ldr	r2, [r3, #36]	; 0x24
   17ab0:	ldr	r3, [fp, #-12]
   17ab4:	str	r2, [r3, #4]
   17ab8:	ldr	r3, [fp, #-8]
   17abc:	ldr	r2, [fp, #-12]
   17ac0:	str	r2, [r3, #36]	; 0x24
   17ac4:	nop	{0}
   17ac8:	add	sp, fp, #0
   17acc:	pop	{fp}		; (ldr fp, [sp], #4)
   17ad0:	bx	lr
   17ad4:	str	fp, [sp, #-8]!
   17ad8:	str	lr, [sp, #4]
   17adc:	add	fp, sp, #4
   17ae0:	sub	sp, sp, #40	; 0x28
   17ae4:	str	r0, [fp, #-32]	; 0xffffffe0
   17ae8:	str	r1, [fp, #-36]	; 0xffffffdc
   17aec:	str	r2, [fp, #-40]	; 0xffffffd8
   17af0:	strb	r3, [fp, #-41]	; 0xffffffd7
   17af4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17af8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17afc:	bl	16c90 <__assert_fail@plt+0x5994>
   17b00:	str	r0, [fp, #-12]
   17b04:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17b08:	ldr	r2, [fp, #-12]
   17b0c:	str	r2, [r3]
   17b10:	ldr	r3, [fp, #-12]
   17b14:	ldr	r3, [r3]
   17b18:	cmp	r3, #0
   17b1c:	bne	17b28 <__assert_fail@plt+0x682c>
   17b20:	mov	r3, #0
   17b24:	b	17c8c <__assert_fail@plt+0x6990>
   17b28:	ldr	r3, [fp, #-12]
   17b2c:	ldr	r3, [r3]
   17b30:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17b34:	cmp	r2, r3
   17b38:	beq	17b64 <__assert_fail@plt+0x6868>
   17b3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b40:	ldr	r3, [r3, #28]
   17b44:	ldr	r2, [fp, #-12]
   17b48:	ldr	r2, [r2]
   17b4c:	mov	r1, r2
   17b50:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17b54:	blx	r3
   17b58:	mov	r3, r0
   17b5c:	cmp	r3, #0
   17b60:	beq	17bd0 <__assert_fail@plt+0x68d4>
   17b64:	ldr	r3, [fp, #-12]
   17b68:	ldr	r3, [r3]
   17b6c:	str	r3, [fp, #-24]	; 0xffffffe8
   17b70:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17b74:	cmp	r3, #0
   17b78:	beq	17bc8 <__assert_fail@plt+0x68cc>
   17b7c:	ldr	r3, [fp, #-12]
   17b80:	ldr	r3, [r3, #4]
   17b84:	cmp	r3, #0
   17b88:	beq	17bbc <__assert_fail@plt+0x68c0>
   17b8c:	ldr	r3, [fp, #-12]
   17b90:	ldr	r3, [r3, #4]
   17b94:	str	r3, [fp, #-28]	; 0xffffffe4
   17b98:	ldr	r2, [fp, #-12]
   17b9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ba0:	mov	r1, r2
   17ba4:	ldrd	r2, [r3]
   17ba8:	strd	r2, [r1]
   17bac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17bb0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17bb4:	bl	17a88 <__assert_fail@plt+0x678c>
   17bb8:	b	17bc8 <__assert_fail@plt+0x68cc>
   17bbc:	ldr	r3, [fp, #-12]
   17bc0:	mov	r2, #0
   17bc4:	str	r2, [r3]
   17bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17bcc:	b	17c8c <__assert_fail@plt+0x6990>
   17bd0:	ldr	r3, [fp, #-12]
   17bd4:	str	r3, [fp, #-8]
   17bd8:	b	17c78 <__assert_fail@plt+0x697c>
   17bdc:	ldr	r3, [fp, #-8]
   17be0:	ldr	r3, [r3, #4]
   17be4:	ldr	r3, [r3]
   17be8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17bec:	cmp	r2, r3
   17bf0:	beq	17c20 <__assert_fail@plt+0x6924>
   17bf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bf8:	ldr	r3, [r3, #28]
   17bfc:	ldr	r2, [fp, #-8]
   17c00:	ldr	r2, [r2, #4]
   17c04:	ldr	r2, [r2]
   17c08:	mov	r1, r2
   17c0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17c10:	blx	r3
   17c14:	mov	r3, r0
   17c18:	cmp	r3, #0
   17c1c:	beq	17c6c <__assert_fail@plt+0x6970>
   17c20:	ldr	r3, [fp, #-8]
   17c24:	ldr	r3, [r3, #4]
   17c28:	ldr	r3, [r3]
   17c2c:	str	r3, [fp, #-16]
   17c30:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17c34:	cmp	r3, #0
   17c38:	beq	17c64 <__assert_fail@plt+0x6968>
   17c3c:	ldr	r3, [fp, #-8]
   17c40:	ldr	r3, [r3, #4]
   17c44:	str	r3, [fp, #-20]	; 0xffffffec
   17c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c4c:	ldr	r2, [r3, #4]
   17c50:	ldr	r3, [fp, #-8]
   17c54:	str	r2, [r3, #4]
   17c58:	ldr	r1, [fp, #-20]	; 0xffffffec
   17c5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c60:	bl	17a88 <__assert_fail@plt+0x678c>
   17c64:	ldr	r3, [fp, #-16]
   17c68:	b	17c8c <__assert_fail@plt+0x6990>
   17c6c:	ldr	r3, [fp, #-8]
   17c70:	ldr	r3, [r3, #4]
   17c74:	str	r3, [fp, #-8]
   17c78:	ldr	r3, [fp, #-8]
   17c7c:	ldr	r3, [r3, #4]
   17c80:	cmp	r3, #0
   17c84:	bne	17bdc <__assert_fail@plt+0x68e0>
   17c88:	mov	r3, #0
   17c8c:	mov	r0, r3
   17c90:	sub	sp, fp, #4
   17c94:	ldr	fp, [sp]
   17c98:	add	sp, sp, #4
   17c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17ca0:	str	fp, [sp, #-8]!
   17ca4:	str	lr, [sp, #4]
   17ca8:	add	fp, sp, #4
   17cac:	sub	sp, sp, #40	; 0x28
   17cb0:	str	r0, [fp, #-32]	; 0xffffffe0
   17cb4:	str	r1, [fp, #-36]	; 0xffffffdc
   17cb8:	mov	r3, r2
   17cbc:	strb	r3, [fp, #-37]	; 0xffffffdb
   17cc0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17cc4:	ldr	r3, [r3]
   17cc8:	str	r3, [fp, #-8]
   17ccc:	b	17e6c <__assert_fail@plt+0x6b70>
   17cd0:	ldr	r3, [fp, #-8]
   17cd4:	ldr	r3, [r3]
   17cd8:	cmp	r3, #0
   17cdc:	beq	17e60 <__assert_fail@plt+0x6b64>
   17ce0:	ldr	r3, [fp, #-8]
   17ce4:	ldr	r3, [r3, #4]
   17ce8:	str	r3, [fp, #-12]
   17cec:	b	17d7c <__assert_fail@plt+0x6a80>
   17cf0:	ldr	r3, [fp, #-12]
   17cf4:	ldr	r3, [r3]
   17cf8:	str	r3, [fp, #-16]
   17cfc:	ldr	r1, [fp, #-16]
   17d00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17d04:	bl	16c90 <__assert_fail@plt+0x5994>
   17d08:	str	r0, [fp, #-20]	; 0xffffffec
   17d0c:	ldr	r3, [fp, #-12]
   17d10:	ldr	r3, [r3, #4]
   17d14:	str	r3, [fp, #-24]	; 0xffffffe8
   17d18:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d1c:	ldr	r3, [r3]
   17d20:	cmp	r3, #0
   17d24:	beq	17d48 <__assert_fail@plt+0x6a4c>
   17d28:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d2c:	ldr	r2, [r3, #4]
   17d30:	ldr	r3, [fp, #-12]
   17d34:	str	r2, [r3, #4]
   17d38:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d3c:	ldr	r2, [fp, #-12]
   17d40:	str	r2, [r3, #4]
   17d44:	b	17d74 <__assert_fail@plt+0x6a78>
   17d48:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d4c:	ldr	r2, [fp, #-16]
   17d50:	str	r2, [r3]
   17d54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d58:	ldr	r3, [r3, #12]
   17d5c:	add	r2, r3, #1
   17d60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d64:	str	r2, [r3, #12]
   17d68:	ldr	r1, [fp, #-12]
   17d6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17d70:	bl	17a88 <__assert_fail@plt+0x678c>
   17d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d78:	str	r3, [fp, #-12]
   17d7c:	ldr	r3, [fp, #-12]
   17d80:	cmp	r3, #0
   17d84:	bne	17cf0 <__assert_fail@plt+0x69f4>
   17d88:	ldr	r3, [fp, #-8]
   17d8c:	ldr	r3, [r3]
   17d90:	str	r3, [fp, #-16]
   17d94:	ldr	r3, [fp, #-8]
   17d98:	mov	r2, #0
   17d9c:	str	r2, [r3, #4]
   17da0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   17da4:	cmp	r3, #0
   17da8:	bne	17e5c <__assert_fail@plt+0x6b60>
   17dac:	ldr	r1, [fp, #-16]
   17db0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17db4:	bl	16c90 <__assert_fail@plt+0x5994>
   17db8:	str	r0, [fp, #-20]	; 0xffffffec
   17dbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17dc0:	ldr	r3, [r3]
   17dc4:	cmp	r3, #0
   17dc8:	beq	17e18 <__assert_fail@plt+0x6b1c>
   17dcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17dd0:	bl	17a1c <__assert_fail@plt+0x6720>
   17dd4:	str	r0, [fp, #-28]	; 0xffffffe4
   17dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ddc:	cmp	r3, #0
   17de0:	bne	17dec <__assert_fail@plt+0x6af0>
   17de4:	mov	r3, #0
   17de8:	b	17e84 <__assert_fail@plt+0x6b88>
   17dec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17df0:	ldr	r2, [fp, #-16]
   17df4:	str	r2, [r3]
   17df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17dfc:	ldr	r2, [r3, #4]
   17e00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17e04:	str	r2, [r3, #4]
   17e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e0c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17e10:	str	r2, [r3, #4]
   17e14:	b	17e38 <__assert_fail@plt+0x6b3c>
   17e18:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e1c:	ldr	r2, [fp, #-16]
   17e20:	str	r2, [r3]
   17e24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e28:	ldr	r3, [r3, #12]
   17e2c:	add	r2, r3, #1
   17e30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e34:	str	r2, [r3, #12]
   17e38:	ldr	r3, [fp, #-8]
   17e3c:	mov	r2, #0
   17e40:	str	r2, [r3]
   17e44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17e48:	ldr	r3, [r3, #12]
   17e4c:	sub	r2, r3, #1
   17e50:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17e54:	str	r2, [r3, #12]
   17e58:	b	17e60 <__assert_fail@plt+0x6b64>
   17e5c:	nop	{0}
   17e60:	ldr	r3, [fp, #-8]
   17e64:	add	r3, r3, #8
   17e68:	str	r3, [fp, #-8]
   17e6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17e70:	ldr	r3, [r3, #4]
   17e74:	ldr	r2, [fp, #-8]
   17e78:	cmp	r2, r3
   17e7c:	bcc	17cd0 <__assert_fail@plt+0x69d4>
   17e80:	mov	r3, #1
   17e84:	mov	r0, r3
   17e88:	sub	sp, fp, #4
   17e8c:	ldr	fp, [sp]
   17e90:	add	sp, sp, #4
   17e94:	pop	{pc}		; (ldr pc, [sp], #4)
   17e98:	str	fp, [sp, #-8]!
   17e9c:	str	lr, [sp, #4]
   17ea0:	add	fp, sp, #4
   17ea4:	sub	sp, sp, #56	; 0x38
   17ea8:	str	r0, [fp, #-56]	; 0xffffffc8
   17eac:	str	r1, [fp, #-60]	; 0xffffffc4
   17eb0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17eb4:	ldr	r3, [r3, #20]
   17eb8:	mov	r1, r3
   17ebc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17ec0:	bl	174c8 <__assert_fail@plt+0x61cc>
   17ec4:	str	r0, [fp, #-8]
   17ec8:	ldr	r3, [fp, #-8]
   17ecc:	cmp	r3, #0
   17ed0:	bne	17edc <__assert_fail@plt+0x6be0>
   17ed4:	mov	r3, #0
   17ed8:	b	180b8 <__assert_fail@plt+0x6dbc>
   17edc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ee0:	ldr	r3, [r3, #8]
   17ee4:	ldr	r2, [fp, #-8]
   17ee8:	cmp	r2, r3
   17eec:	bne	17ef8 <__assert_fail@plt+0x6bfc>
   17ef0:	mov	r3, #1
   17ef4:	b	180b8 <__assert_fail@plt+0x6dbc>
   17ef8:	sub	r3, fp, #52	; 0x34
   17efc:	str	r3, [fp, #-12]
   17f00:	mov	r1, #8
   17f04:	ldr	r0, [fp, #-8]
   17f08:	bl	1cf54 <__assert_fail@plt+0xbc58>
   17f0c:	mov	r3, r0
   17f10:	mov	r2, r3
   17f14:	ldr	r3, [fp, #-12]
   17f18:	str	r2, [r3]
   17f1c:	ldr	r3, [fp, #-12]
   17f20:	ldr	r3, [r3]
   17f24:	cmp	r3, #0
   17f28:	bne	17f34 <__assert_fail@plt+0x6c38>
   17f2c:	mov	r3, #0
   17f30:	b	180b8 <__assert_fail@plt+0x6dbc>
   17f34:	ldr	r3, [fp, #-12]
   17f38:	ldr	r2, [fp, #-8]
   17f3c:	str	r2, [r3, #8]
   17f40:	ldr	r3, [fp, #-12]
   17f44:	ldr	r2, [r3]
   17f48:	ldr	r3, [fp, #-8]
   17f4c:	lsl	r3, r3, #3
   17f50:	add	r2, r2, r3
   17f54:	ldr	r3, [fp, #-12]
   17f58:	str	r2, [r3, #4]
   17f5c:	ldr	r3, [fp, #-12]
   17f60:	mov	r2, #0
   17f64:	str	r2, [r3, #12]
   17f68:	ldr	r3, [fp, #-12]
   17f6c:	mov	r2, #0
   17f70:	str	r2, [r3, #16]
   17f74:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17f78:	ldr	r2, [r3, #20]
   17f7c:	ldr	r3, [fp, #-12]
   17f80:	str	r2, [r3, #20]
   17f84:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17f88:	ldr	r2, [r3, #24]
   17f8c:	ldr	r3, [fp, #-12]
   17f90:	str	r2, [r3, #24]
   17f94:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17f98:	ldr	r2, [r3, #28]
   17f9c:	ldr	r3, [fp, #-12]
   17fa0:	str	r2, [r3, #28]
   17fa4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17fa8:	ldr	r2, [r3, #32]
   17fac:	ldr	r3, [fp, #-12]
   17fb0:	str	r2, [r3, #32]
   17fb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17fb8:	ldr	r2, [r3, #36]	; 0x24
   17fbc:	ldr	r3, [fp, #-12]
   17fc0:	str	r2, [r3, #36]	; 0x24
   17fc4:	mov	r2, #0
   17fc8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17fcc:	ldr	r0, [fp, #-12]
   17fd0:	bl	17ca0 <__assert_fail@plt+0x69a4>
   17fd4:	mov	r3, r0
   17fd8:	cmp	r3, #0
   17fdc:	beq	18048 <__assert_fail@plt+0x6d4c>
   17fe0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17fe4:	ldr	r3, [r3]
   17fe8:	mov	r0, r3
   17fec:	bl	13514 <__assert_fail@plt+0x2218>
   17ff0:	ldr	r3, [fp, #-12]
   17ff4:	ldr	r2, [r3]
   17ff8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ffc:	str	r2, [r3]
   18000:	ldr	r3, [fp, #-12]
   18004:	ldr	r2, [r3, #4]
   18008:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1800c:	str	r2, [r3, #4]
   18010:	ldr	r3, [fp, #-12]
   18014:	ldr	r2, [r3, #8]
   18018:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1801c:	str	r2, [r3, #8]
   18020:	ldr	r3, [fp, #-12]
   18024:	ldr	r2, [r3, #12]
   18028:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1802c:	str	r2, [r3, #12]
   18030:	ldr	r3, [fp, #-12]
   18034:	ldr	r2, [r3, #36]	; 0x24
   18038:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1803c:	str	r2, [r3, #36]	; 0x24
   18040:	mov	r3, #1
   18044:	b	180b8 <__assert_fail@plt+0x6dbc>
   18048:	ldr	r3, [fp, #-12]
   1804c:	ldr	r2, [r3, #36]	; 0x24
   18050:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18054:	str	r2, [r3, #36]	; 0x24
   18058:	mov	r2, #1
   1805c:	ldr	r1, [fp, #-12]
   18060:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18064:	bl	17ca0 <__assert_fail@plt+0x69a4>
   18068:	mov	r3, r0
   1806c:	eor	r3, r3, #1
   18070:	uxtb	r3, r3
   18074:	cmp	r3, #0
   18078:	bne	180a0 <__assert_fail@plt+0x6da4>
   1807c:	mov	r2, #0
   18080:	ldr	r1, [fp, #-12]
   18084:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18088:	bl	17ca0 <__assert_fail@plt+0x69a4>
   1808c:	mov	r3, r0
   18090:	eor	r3, r3, #1
   18094:	uxtb	r3, r3
   18098:	cmp	r3, #0
   1809c:	beq	180a4 <__assert_fail@plt+0x6da8>
   180a0:	bl	112b4 <abort@plt>
   180a4:	ldr	r3, [fp, #-12]
   180a8:	ldr	r3, [r3]
   180ac:	mov	r0, r3
   180b0:	bl	13514 <__assert_fail@plt+0x2218>
   180b4:	mov	r3, #0
   180b8:	mov	r0, r3
   180bc:	sub	sp, fp, #4
   180c0:	ldr	fp, [sp]
   180c4:	add	sp, sp, #4
   180c8:	pop	{pc}		; (ldr pc, [sp], #4)
   180cc:	str	fp, [sp, #-8]!
   180d0:	str	lr, [sp, #4]
   180d4:	add	fp, sp, #4
   180d8:	sub	sp, sp, #40	; 0x28
   180dc:	str	r0, [fp, #-32]	; 0xffffffe0
   180e0:	str	r1, [fp, #-36]	; 0xffffffdc
   180e4:	str	r2, [fp, #-40]	; 0xffffffd8
   180e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180ec:	cmp	r3, #0
   180f0:	bne	180f8 <__assert_fail@plt+0x6dfc>
   180f4:	bl	112b4 <abort@plt>
   180f8:	sub	r2, fp, #24
   180fc:	mov	r3, #0
   18100:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18104:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18108:	bl	17ad4 <__assert_fail@plt+0x67d8>
   1810c:	str	r0, [fp, #-8]
   18110:	ldr	r3, [fp, #-8]
   18114:	cmp	r3, #0
   18118:	beq	1813c <__assert_fail@plt+0x6e40>
   1811c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18120:	cmp	r3, #0
   18124:	beq	18134 <__assert_fail@plt+0x6e38>
   18128:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1812c:	ldr	r2, [fp, #-8]
   18130:	str	r2, [r3]
   18134:	mov	r3, #0
   18138:	b	18340 <__assert_fail@plt+0x7044>
   1813c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18140:	ldr	r3, [r3, #12]
   18144:	vmov	s15, r3
   18148:	vcvt.f32.u32	s14, s15
   1814c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18150:	ldr	r3, [r3, #20]
   18154:	vldr	s13, [r3, #8]
   18158:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1815c:	ldr	r3, [r3, #8]
   18160:	vmov	s15, r3
   18164:	vcvt.f32.u32	s15, s15
   18168:	vmul.f32	s15, s13, s15
   1816c:	vcmpe.f32	s14, s15
   18170:	vmrs	APSR_nzcv, fpscr
   18174:	ble	18294 <__assert_fail@plt+0x6f98>
   18178:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1817c:	bl	17388 <__assert_fail@plt+0x608c>
   18180:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18184:	ldr	r3, [r3, #12]
   18188:	vmov	s15, r3
   1818c:	vcvt.f32.u32	s14, s15
   18190:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18194:	ldr	r3, [r3, #20]
   18198:	vldr	s13, [r3, #8]
   1819c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   181a0:	ldr	r3, [r3, #8]
   181a4:	vmov	s15, r3
   181a8:	vcvt.f32.u32	s15, s15
   181ac:	vmul.f32	s15, s13, s15
   181b0:	vcmpe.f32	s14, s15
   181b4:	vmrs	APSR_nzcv, fpscr
   181b8:	ble	18294 <__assert_fail@plt+0x6f98>
   181bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   181c0:	ldr	r3, [r3, #20]
   181c4:	str	r3, [fp, #-12]
   181c8:	ldr	r3, [fp, #-12]
   181cc:	ldrb	r3, [r3, #16]
   181d0:	cmp	r3, #0
   181d4:	beq	181f8 <__assert_fail@plt+0x6efc>
   181d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   181dc:	ldr	r3, [r3, #8]
   181e0:	vmov	s15, r3
   181e4:	vcvt.f32.u32	s14, s15
   181e8:	ldr	r3, [fp, #-12]
   181ec:	vldr	s15, [r3, #12]
   181f0:	vmul.f32	s15, s14, s15
   181f4:	b	18220 <__assert_fail@plt+0x6f24>
   181f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   181fc:	ldr	r3, [r3, #8]
   18200:	vmov	s15, r3
   18204:	vcvt.f32.u32	s14, s15
   18208:	ldr	r3, [fp, #-12]
   1820c:	vldr	s15, [r3, #12]
   18210:	vmul.f32	s14, s14, s15
   18214:	ldr	r3, [fp, #-12]
   18218:	vldr	s15, [r3, #8]
   1821c:	vmul.f32	s15, s14, s15
   18220:	vstr	s15, [fp, #-16]
   18224:	vldr	s15, [fp, #-16]
   18228:	vldr	s14, [pc, #292]	; 18354 <__assert_fail@plt+0x7058>
   1822c:	vcmpe.f32	s15, s14
   18230:	vmrs	APSR_nzcv, fpscr
   18234:	blt	18240 <__assert_fail@plt+0x6f44>
   18238:	mvn	r3, #0
   1823c:	b	18340 <__assert_fail@plt+0x7044>
   18240:	vldr	s15, [fp, #-16]
   18244:	vcvt.u32.f32	s15, s15
   18248:	vmov	r1, s15
   1824c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18250:	bl	17e98 <__assert_fail@plt+0x6b9c>
   18254:	mov	r3, r0
   18258:	eor	r3, r3, #1
   1825c:	uxtb	r3, r3
   18260:	cmp	r3, #0
   18264:	beq	18270 <__assert_fail@plt+0x6f74>
   18268:	mvn	r3, #0
   1826c:	b	18340 <__assert_fail@plt+0x7044>
   18270:	sub	r2, fp, #24
   18274:	mov	r3, #0
   18278:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1827c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18280:	bl	17ad4 <__assert_fail@plt+0x67d8>
   18284:	mov	r3, r0
   18288:	cmp	r3, #0
   1828c:	beq	18294 <__assert_fail@plt+0x6f98>
   18290:	bl	112b4 <abort@plt>
   18294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18298:	ldr	r3, [r3]
   1829c:	cmp	r3, #0
   182a0:	beq	18308 <__assert_fail@plt+0x700c>
   182a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   182a8:	bl	17a1c <__assert_fail@plt+0x6720>
   182ac:	str	r0, [fp, #-20]	; 0xffffffec
   182b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   182b4:	cmp	r3, #0
   182b8:	bne	182c4 <__assert_fail@plt+0x6fc8>
   182bc:	mvn	r3, #0
   182c0:	b	18340 <__assert_fail@plt+0x7044>
   182c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   182c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   182cc:	str	r2, [r3]
   182d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182d4:	ldr	r2, [r3, #4]
   182d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   182dc:	str	r2, [r3, #4]
   182e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   182e8:	str	r2, [r3, #4]
   182ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   182f0:	ldr	r3, [r3, #16]
   182f4:	add	r2, r3, #1
   182f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   182fc:	str	r2, [r3, #16]
   18300:	mov	r3, #1
   18304:	b	18340 <__assert_fail@plt+0x7044>
   18308:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1830c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18310:	str	r2, [r3]
   18314:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18318:	ldr	r3, [r3, #16]
   1831c:	add	r2, r3, #1
   18320:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18324:	str	r2, [r3, #16]
   18328:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1832c:	ldr	r3, [r3, #12]
   18330:	add	r2, r3, #1
   18334:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18338:	str	r2, [r3, #12]
   1833c:	mov	r3, #1
   18340:	mov	r0, r3
   18344:	sub	sp, fp, #4
   18348:	ldr	fp, [sp]
   1834c:	add	sp, sp, #4
   18350:	pop	{pc}		; (ldr pc, [sp], #4)
   18354:	svcmi	0x00800000
   18358:	str	fp, [sp, #-8]!
   1835c:	str	lr, [sp, #4]
   18360:	add	fp, sp, #4
   18364:	sub	sp, sp, #16
   18368:	str	r0, [fp, #-16]
   1836c:	str	r1, [fp, #-20]	; 0xffffffec
   18370:	sub	r3, fp, #12
   18374:	mov	r2, r3
   18378:	ldr	r1, [fp, #-20]	; 0xffffffec
   1837c:	ldr	r0, [fp, #-16]
   18380:	bl	180cc <__assert_fail@plt+0x6dd0>
   18384:	str	r0, [fp, #-8]
   18388:	ldr	r3, [fp, #-8]
   1838c:	cmn	r3, #1
   18390:	beq	183b0 <__assert_fail@plt+0x70b4>
   18394:	ldr	r3, [fp, #-8]
   18398:	cmp	r3, #0
   1839c:	bne	183a8 <__assert_fail@plt+0x70ac>
   183a0:	ldr	r3, [fp, #-12]
   183a4:	b	183b4 <__assert_fail@plt+0x70b8>
   183a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   183ac:	b	183b4 <__assert_fail@plt+0x70b8>
   183b0:	mov	r3, #0
   183b4:	mov	r0, r3
   183b8:	sub	sp, fp, #4
   183bc:	ldr	fp, [sp]
   183c0:	add	sp, sp, #4
   183c4:	pop	{pc}		; (ldr pc, [sp], #4)
   183c8:	str	fp, [sp, #-8]!
   183cc:	str	lr, [sp, #4]
   183d0:	add	fp, sp, #4
   183d4:	sub	sp, sp, #32
   183d8:	str	r0, [fp, #-32]	; 0xffffffe0
   183dc:	str	r1, [fp, #-36]	; 0xffffffdc
   183e0:	sub	r2, fp, #28
   183e4:	mov	r3, #1
   183e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   183ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   183f0:	bl	17ad4 <__assert_fail@plt+0x67d8>
   183f4:	str	r0, [fp, #-12]
   183f8:	ldr	r3, [fp, #-12]
   183fc:	cmp	r3, #0
   18400:	bne	1840c <__assert_fail@plt+0x7110>
   18404:	mov	r3, #0
   18408:	b	1859c <__assert_fail@plt+0x72a0>
   1840c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18410:	ldr	r3, [r3, #16]
   18414:	sub	r2, r3, #1
   18418:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1841c:	str	r2, [r3, #16]
   18420:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18424:	ldr	r3, [r3]
   18428:	cmp	r3, #0
   1842c:	bne	18598 <__assert_fail@plt+0x729c>
   18430:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18434:	ldr	r3, [r3, #12]
   18438:	sub	r2, r3, #1
   1843c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18440:	str	r2, [r3, #12]
   18444:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18448:	ldr	r3, [r3, #12]
   1844c:	vmov	s15, r3
   18450:	vcvt.f32.u32	s14, s15
   18454:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18458:	ldr	r3, [r3, #20]
   1845c:	vldr	s13, [r3]
   18460:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18464:	ldr	r3, [r3, #8]
   18468:	vmov	s15, r3
   1846c:	vcvt.f32.u32	s15, s15
   18470:	vmul.f32	s15, s13, s15
   18474:	vcmpe.f32	s14, s15
   18478:	vmrs	APSR_nzcv, fpscr
   1847c:	bpl	18598 <__assert_fail@plt+0x729c>
   18480:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18484:	bl	17388 <__assert_fail@plt+0x608c>
   18488:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1848c:	ldr	r3, [r3, #12]
   18490:	vmov	s15, r3
   18494:	vcvt.f32.u32	s14, s15
   18498:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1849c:	ldr	r3, [r3, #20]
   184a0:	vldr	s13, [r3]
   184a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   184a8:	ldr	r3, [r3, #8]
   184ac:	vmov	s15, r3
   184b0:	vcvt.f32.u32	s15, s15
   184b4:	vmul.f32	s15, s13, s15
   184b8:	vcmpe.f32	s14, s15
   184bc:	vmrs	APSR_nzcv, fpscr
   184c0:	bpl	18598 <__assert_fail@plt+0x729c>
   184c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   184c8:	ldr	r3, [r3, #20]
   184cc:	str	r3, [fp, #-16]
   184d0:	ldr	r3, [fp, #-16]
   184d4:	ldrb	r3, [r3, #16]
   184d8:	cmp	r3, #0
   184dc:	beq	18504 <__assert_fail@plt+0x7208>
   184e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   184e4:	ldr	r3, [r3, #8]
   184e8:	vmov	s15, r3
   184ec:	vcvt.f32.u32	s14, s15
   184f0:	ldr	r3, [fp, #-16]
   184f4:	vldr	s15, [r3, #4]
   184f8:	vmul.f32	s15, s14, s15
   184fc:	vcvt.u32.f32	s15, s15
   18500:	b	18530 <__assert_fail@plt+0x7234>
   18504:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18508:	ldr	r3, [r3, #8]
   1850c:	vmov	s15, r3
   18510:	vcvt.f32.u32	s14, s15
   18514:	ldr	r3, [fp, #-16]
   18518:	vldr	s15, [r3, #4]
   1851c:	vmul.f32	s14, s14, s15
   18520:	ldr	r3, [fp, #-16]
   18524:	vldr	s15, [r3, #8]
   18528:	vmul.f32	s15, s14, s15
   1852c:	vcvt.u32.f32	s15, s15
   18530:	vstr	s15, [fp, #-20]	; 0xffffffec
   18534:	ldr	r1, [fp, #-20]	; 0xffffffec
   18538:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1853c:	bl	17e98 <__assert_fail@plt+0x6b9c>
   18540:	mov	r3, r0
   18544:	eor	r3, r3, #1
   18548:	uxtb	r3, r3
   1854c:	cmp	r3, #0
   18550:	beq	18598 <__assert_fail@plt+0x729c>
   18554:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18558:	ldr	r3, [r3, #36]	; 0x24
   1855c:	str	r3, [fp, #-8]
   18560:	b	18580 <__assert_fail@plt+0x7284>
   18564:	ldr	r3, [fp, #-8]
   18568:	ldr	r3, [r3, #4]
   1856c:	str	r3, [fp, #-24]	; 0xffffffe8
   18570:	ldr	r0, [fp, #-8]
   18574:	bl	13514 <__assert_fail@plt+0x2218>
   18578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1857c:	str	r3, [fp, #-8]
   18580:	ldr	r3, [fp, #-8]
   18584:	cmp	r3, #0
   18588:	bne	18564 <__assert_fail@plt+0x7268>
   1858c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18590:	mov	r2, #0
   18594:	str	r2, [r3, #36]	; 0x24
   18598:	ldr	r3, [fp, #-12]
   1859c:	mov	r0, r3
   185a0:	sub	sp, fp, #4
   185a4:	ldr	fp, [sp]
   185a8:	add	sp, sp, #4
   185ac:	pop	{pc}		; (ldr pc, [sp], #4)
   185b0:	str	fp, [sp, #-8]!
   185b4:	str	lr, [sp, #4]
   185b8:	add	fp, sp, #4
   185bc:	sub	sp, sp, #8
   185c0:	str	r0, [fp, #-8]
   185c4:	str	r1, [fp, #-12]
   185c8:	ldr	r1, [fp, #-12]
   185cc:	ldr	r0, [fp, #-8]
   185d0:	bl	183c8 <__assert_fail@plt+0x70cc>
   185d4:	mov	r3, r0
   185d8:	mov	r0, r3
   185dc:	sub	sp, fp, #4
   185e0:	ldr	fp, [sp]
   185e4:	add	sp, sp, #4
   185e8:	pop	{pc}		; (ldr pc, [sp], #4)
   185ec:	push	{fp}		; (str fp, [sp, #-4]!)
   185f0:	add	fp, sp, #0
   185f4:	sub	sp, sp, #20
   185f8:	str	r0, [fp, #-16]
   185fc:	str	r1, [fp, #-20]	; 0xffffffec
   18600:	ldr	r3, [fp, #-16]
   18604:	mov	r2, #1
   18608:	strb	r2, [r3, #28]
   1860c:	ldr	r3, [fp, #-16]
   18610:	mov	r2, #0
   18614:	str	r2, [r3, #20]
   18618:	ldr	r3, [fp, #-16]
   1861c:	mov	r2, #0
   18620:	str	r2, [r3, #24]
   18624:	mov	r3, #0
   18628:	str	r3, [fp, #-8]
   1862c:	b	1864c <__assert_fail@plt+0x7350>
   18630:	ldr	r3, [fp, #-16]
   18634:	ldr	r2, [fp, #-8]
   18638:	ldr	r1, [fp, #-20]	; 0xffffffec
   1863c:	str	r1, [r3, r2, lsl #2]
   18640:	ldr	r3, [fp, #-8]
   18644:	add	r3, r3, #1
   18648:	str	r3, [fp, #-8]
   1864c:	ldr	r3, [fp, #-8]
   18650:	cmp	r3, #3
   18654:	ble	18630 <__assert_fail@plt+0x7334>
   18658:	ldr	r3, [fp, #-16]
   1865c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18660:	str	r2, [r3, #16]
   18664:	nop	{0}
   18668:	add	sp, fp, #0
   1866c:	pop	{fp}		; (ldr fp, [sp], #4)
   18670:	bx	lr
   18674:	push	{fp}		; (str fp, [sp, #-4]!)
   18678:	add	fp, sp, #0
   1867c:	sub	sp, sp, #12
   18680:	str	r0, [fp, #-8]
   18684:	ldr	r3, [fp, #-8]
   18688:	ldrb	r3, [r3, #28]
   1868c:	mov	r0, r3
   18690:	add	sp, fp, #0
   18694:	pop	{fp}		; (ldr fp, [sp], #4)
   18698:	bx	lr
   1869c:	push	{fp}		; (str fp, [sp, #-4]!)
   186a0:	add	fp, sp, #0
   186a4:	sub	sp, sp, #20
   186a8:	str	r0, [fp, #-16]
   186ac:	str	r1, [fp, #-20]	; 0xffffffec
   186b0:	ldr	r3, [fp, #-16]
   186b4:	ldr	r3, [r3, #20]
   186b8:	ldr	r2, [fp, #-16]
   186bc:	ldrb	r2, [r2, #28]
   186c0:	eor	r2, r2, #1
   186c4:	uxtb	r2, r2
   186c8:	add	r3, r3, r2
   186cc:	and	r3, r3, #3
   186d0:	str	r3, [fp, #-8]
   186d4:	ldr	r3, [fp, #-16]
   186d8:	ldr	r2, [fp, #-8]
   186dc:	ldr	r3, [r3, r2, lsl #2]
   186e0:	str	r3, [fp, #-12]
   186e4:	ldr	r3, [fp, #-16]
   186e8:	ldr	r2, [fp, #-8]
   186ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   186f0:	str	r1, [r3, r2, lsl #2]
   186f4:	ldr	r3, [fp, #-16]
   186f8:	ldr	r2, [fp, #-8]
   186fc:	str	r2, [r3, #20]
   18700:	ldr	r3, [fp, #-16]
   18704:	ldr	r3, [r3, #24]
   18708:	ldr	r2, [fp, #-8]
   1870c:	cmp	r2, r3
   18710:	bne	1873c <__assert_fail@plt+0x7440>
   18714:	ldr	r3, [fp, #-16]
   18718:	ldr	r3, [r3, #24]
   1871c:	ldr	r2, [fp, #-16]
   18720:	ldrb	r2, [r2, #28]
   18724:	eor	r2, r2, #1
   18728:	uxtb	r2, r2
   1872c:	add	r3, r3, r2
   18730:	and	r2, r3, #3
   18734:	ldr	r3, [fp, #-16]
   18738:	str	r2, [r3, #24]
   1873c:	ldr	r3, [fp, #-16]
   18740:	mov	r2, #0
   18744:	strb	r2, [r3, #28]
   18748:	ldr	r3, [fp, #-12]
   1874c:	mov	r0, r3
   18750:	add	sp, fp, #0
   18754:	pop	{fp}		; (ldr fp, [sp], #4)
   18758:	bx	lr
   1875c:	str	fp, [sp, #-8]!
   18760:	str	lr, [sp, #4]
   18764:	add	fp, sp, #4
   18768:	sub	sp, sp, #16
   1876c:	str	r0, [fp, #-16]
   18770:	ldr	r0, [fp, #-16]
   18774:	bl	18674 <__assert_fail@plt+0x7378>
   18778:	mov	r3, r0
   1877c:	cmp	r3, #0
   18780:	beq	18788 <__assert_fail@plt+0x748c>
   18784:	bl	112b4 <abort@plt>
   18788:	ldr	r3, [fp, #-16]
   1878c:	ldr	r2, [r3, #20]
   18790:	ldr	r3, [fp, #-16]
   18794:	ldr	r3, [r3, r2, lsl #2]
   18798:	str	r3, [fp, #-8]
   1879c:	ldr	r3, [fp, #-16]
   187a0:	ldr	r2, [r3, #20]
   187a4:	ldr	r3, [fp, #-16]
   187a8:	ldr	r1, [r3, #16]
   187ac:	ldr	r3, [fp, #-16]
   187b0:	str	r1, [r3, r2, lsl #2]
   187b4:	ldr	r3, [fp, #-16]
   187b8:	ldr	r2, [r3, #20]
   187bc:	ldr	r3, [fp, #-16]
   187c0:	ldr	r3, [r3, #24]
   187c4:	cmp	r2, r3
   187c8:	bne	187dc <__assert_fail@plt+0x74e0>
   187cc:	ldr	r3, [fp, #-16]
   187d0:	mov	r2, #1
   187d4:	strb	r2, [r3, #28]
   187d8:	b	187f4 <__assert_fail@plt+0x74f8>
   187dc:	ldr	r3, [fp, #-16]
   187e0:	ldr	r3, [r3, #20]
   187e4:	add	r3, r3, #3
   187e8:	and	r2, r3, #3
   187ec:	ldr	r3, [fp, #-16]
   187f0:	str	r2, [r3, #20]
   187f4:	ldr	r3, [fp, #-8]
   187f8:	mov	r0, r3
   187fc:	sub	sp, fp, #4
   18800:	ldr	fp, [sp]
   18804:	add	sp, sp, #4
   18808:	pop	{pc}		; (ldr pc, [sp], #4)
   1880c:	str	fp, [sp, #-8]!
   18810:	str	lr, [sp, #4]
   18814:	add	fp, sp, #4
   18818:	sub	sp, sp, #24
   1881c:	strd	r0, [fp, #-20]	; 0xffffffec
   18820:	str	r2, [fp, #-24]	; 0xffffffe8
   18824:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18828:	add	r3, r3, #20
   1882c:	str	r3, [fp, #-8]
   18830:	ldr	r3, [fp, #-8]
   18834:	mov	r2, #0
   18838:	strb	r2, [r3]
   1883c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   18840:	mov	r2, #10
   18844:	mov	r3, #0
   18848:	bl	1ea1c <__assert_fail@plt+0xd720>
   1884c:	uxtb	r3, r2
   18850:	ldr	r2, [fp, #-8]
   18854:	sub	r2, r2, #1
   18858:	str	r2, [fp, #-8]
   1885c:	add	r3, r3, #48	; 0x30
   18860:	uxtb	r2, r3
   18864:	ldr	r3, [fp, #-8]
   18868:	strb	r2, [r3]
   1886c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   18870:	mov	r2, #10
   18874:	mov	r3, #0
   18878:	bl	1ea1c <__assert_fail@plt+0xd720>
   1887c:	mov	r2, r0
   18880:	mov	r3, r1
   18884:	strd	r2, [fp, #-20]	; 0xffffffec
   18888:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1888c:	orrs	r3, r2, r3
   18890:	bne	1883c <__assert_fail@plt+0x7540>
   18894:	ldr	r3, [fp, #-8]
   18898:	mov	r0, r3
   1889c:	sub	sp, fp, #4
   188a0:	ldr	fp, [sp]
   188a4:	add	sp, sp, #4
   188a8:	pop	{pc}		; (ldr pc, [sp], #4)
   188ac:	push	{r2, r3}
   188b0:	str	fp, [sp, #-8]!
   188b4:	str	lr, [sp, #4]
   188b8:	add	fp, sp, #4
   188bc:	sub	sp, sp, #16
   188c0:	str	r0, [fp, #-16]
   188c4:	str	r1, [fp, #-20]	; 0xffffffec
   188c8:	mov	r3, #0
   188cc:	str	r3, [fp, #-8]
   188d0:	ldr	r3, [fp, #4]
   188d4:	and	r3, r3, #64	; 0x40
   188d8:	cmp	r3, #0
   188dc:	beq	188fc <__assert_fail@plt+0x7600>
   188e0:	add	r3, fp, #8
   188e4:	str	r3, [fp, #-12]
   188e8:	ldr	r3, [fp, #-12]
   188ec:	add	r2, r3, #4
   188f0:	str	r2, [fp, #-12]
   188f4:	ldr	r3, [r3]
   188f8:	str	r3, [fp, #-8]
   188fc:	ldr	r3, [fp, #-8]
   18900:	ldr	r2, [fp, #4]
   18904:	ldr	r1, [fp, #-20]	; 0xffffffec
   18908:	ldr	r0, [fp, #-16]
   1890c:	bl	111a0 <openat64@plt>
   18910:	mov	r3, r0
   18914:	mov	r0, r3
   18918:	bl	1b400 <__assert_fail@plt+0xa104>
   1891c:	mov	r3, r0
   18920:	mov	r0, r3
   18924:	sub	sp, fp, #4
   18928:	ldr	fp, [sp]
   1892c:	ldr	lr, [sp, #4]
   18930:	add	sp, sp, #8
   18934:	add	sp, sp, #8
   18938:	bx	lr
   1893c:	str	fp, [sp, #-8]!
   18940:	str	lr, [sp, #4]
   18944:	add	fp, sp, #4
   18948:	sub	sp, sp, #32
   1894c:	str	r0, [fp, #-24]	; 0xffffffe8
   18950:	str	r1, [fp, #-28]	; 0xffffffe4
   18954:	str	r2, [fp, #-32]	; 0xffffffe0
   18958:	str	r3, [fp, #-36]	; 0xffffffdc
   1895c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18960:	orr	r3, r3, #540672	; 0x84000
   18964:	orr	r3, r3, #2304	; 0x900
   18968:	str	r3, [fp, #-8]
   1896c:	ldr	r2, [fp, #-8]
   18970:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18974:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18978:	bl	188ac <__assert_fail@plt+0x75b0>
   1897c:	str	r0, [fp, #-12]
   18980:	ldr	r3, [fp, #-12]
   18984:	cmp	r3, #0
   18988:	bge	18994 <__assert_fail@plt+0x7698>
   1898c:	mov	r3, #0
   18990:	b	189e8 <__assert_fail@plt+0x76ec>
   18994:	ldr	r0, [fp, #-12]
   18998:	bl	11254 <fdopendir@plt>
   1899c:	str	r0, [fp, #-16]
   189a0:	ldr	r3, [fp, #-16]
   189a4:	cmp	r3, #0
   189a8:	beq	189bc <__assert_fail@plt+0x76c0>
   189ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   189b0:	ldr	r2, [fp, #-12]
   189b4:	str	r2, [r3]
   189b8:	b	189e4 <__assert_fail@plt+0x76e8>
   189bc:	bl	111c4 <__errno_location@plt>
   189c0:	mov	r3, r0
   189c4:	ldr	r3, [r3]
   189c8:	str	r3, [fp, #-20]	; 0xffffffec
   189cc:	ldr	r0, [fp, #-12]
   189d0:	bl	112c0 <close@plt>
   189d4:	bl	111c4 <__errno_location@plt>
   189d8:	mov	r2, r0
   189dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   189e0:	str	r3, [r2]
   189e4:	ldr	r3, [fp, #-16]
   189e8:	mov	r0, r3
   189ec:	sub	sp, fp, #4
   189f0:	ldr	fp, [sp]
   189f4:	add	sp, sp, #4
   189f8:	pop	{pc}		; (ldr pc, [sp], #4)
   189fc:	str	fp, [sp, #-8]!
   18a00:	str	lr, [sp, #4]
   18a04:	add	fp, sp, #4
   18a08:	sub	sp, sp, #16
   18a0c:	str	r0, [fp, #-16]
   18a10:	ldr	r3, [fp, #-16]
   18a14:	cmp	r3, #0
   18a18:	bne	18a40 <__assert_fail@plt+0x7744>
   18a1c:	movw	r3, #4496	; 0x1190
   18a20:	movt	r3, #3
   18a24:	ldr	r3, [r3]
   18a28:	mov	r2, #55	; 0x37
   18a2c:	mov	r1, #1
   18a30:	movw	r0, #64484	; 0xfbe4
   18a34:	movt	r0, #1
   18a38:	bl	110bc <fwrite@plt>
   18a3c:	bl	112b4 <abort@plt>
   18a40:	mov	r1, #47	; 0x2f
   18a44:	ldr	r0, [fp, #-16]
   18a48:	bl	11230 <strrchr@plt>
   18a4c:	str	r0, [fp, #-8]
   18a50:	ldr	r3, [fp, #-8]
   18a54:	cmp	r3, #0
   18a58:	beq	18a68 <__assert_fail@plt+0x776c>
   18a5c:	ldr	r3, [fp, #-8]
   18a60:	add	r3, r3, #1
   18a64:	b	18a6c <__assert_fail@plt+0x7770>
   18a68:	ldr	r3, [fp, #-16]
   18a6c:	str	r3, [fp, #-12]
   18a70:	ldr	r2, [fp, #-12]
   18a74:	ldr	r3, [fp, #-16]
   18a78:	sub	r3, r2, r3
   18a7c:	cmp	r3, #6
   18a80:	ble	18af0 <__assert_fail@plt+0x77f4>
   18a84:	ldr	r3, [fp, #-12]
   18a88:	sub	r3, r3, #7
   18a8c:	mov	r2, #7
   18a90:	movw	r1, #64540	; 0xfc1c
   18a94:	movt	r1, #1
   18a98:	mov	r0, r3
   18a9c:	bl	112a8 <strncmp@plt>
   18aa0:	mov	r3, r0
   18aa4:	cmp	r3, #0
   18aa8:	bne	18af0 <__assert_fail@plt+0x77f4>
   18aac:	ldr	r3, [fp, #-12]
   18ab0:	str	r3, [fp, #-16]
   18ab4:	mov	r2, #3
   18ab8:	movw	r1, #64548	; 0xfc24
   18abc:	movt	r1, #1
   18ac0:	ldr	r0, [fp, #-12]
   18ac4:	bl	112a8 <strncmp@plt>
   18ac8:	mov	r3, r0
   18acc:	cmp	r3, #0
   18ad0:	bne	18af0 <__assert_fail@plt+0x77f4>
   18ad4:	ldr	r3, [fp, #-12]
   18ad8:	add	r3, r3, #3
   18adc:	str	r3, [fp, #-16]
   18ae0:	movw	r3, #4480	; 0x1180
   18ae4:	movt	r3, #3
   18ae8:	ldr	r2, [fp, #-16]
   18aec:	str	r2, [r3]
   18af0:	movw	r3, #4544	; 0x11c0
   18af4:	movt	r3, #3
   18af8:	ldr	r2, [fp, #-16]
   18afc:	str	r2, [r3]
   18b00:	movw	r3, #4484	; 0x1184
   18b04:	movt	r3, #3
   18b08:	ldr	r2, [fp, #-16]
   18b0c:	str	r2, [r3]
   18b10:	nop	{0}
   18b14:	sub	sp, fp, #4
   18b18:	ldr	fp, [sp]
   18b1c:	add	sp, sp, #4
   18b20:	pop	{pc}		; (ldr pc, [sp], #4)
   18b24:	str	fp, [sp, #-8]!
   18b28:	str	lr, [sp, #4]
   18b2c:	add	fp, sp, #4
   18b30:	sub	sp, sp, #16
   18b34:	str	r0, [fp, #-16]
   18b38:	bl	111c4 <__errno_location@plt>
   18b3c:	mov	r3, r0
   18b40:	ldr	r3, [r3]
   18b44:	str	r3, [fp, #-8]
   18b48:	ldr	r3, [fp, #-16]
   18b4c:	cmp	r3, #0
   18b50:	beq	18b5c <__assert_fail@plt+0x7860>
   18b54:	ldr	r3, [fp, #-16]
   18b58:	b	18b64 <__assert_fail@plt+0x7868>
   18b5c:	movw	r3, #4548	; 0x11c4
   18b60:	movt	r3, #3
   18b64:	mov	r1, #48	; 0x30
   18b68:	mov	r0, r3
   18b6c:	bl	1c3f0 <__assert_fail@plt+0xb0f4>
   18b70:	mov	r3, r0
   18b74:	str	r3, [fp, #-12]
   18b78:	bl	111c4 <__errno_location@plt>
   18b7c:	mov	r2, r0
   18b80:	ldr	r3, [fp, #-8]
   18b84:	str	r3, [r2]
   18b88:	ldr	r3, [fp, #-12]
   18b8c:	mov	r0, r3
   18b90:	sub	sp, fp, #4
   18b94:	ldr	fp, [sp]
   18b98:	add	sp, sp, #4
   18b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18ba0:	push	{fp}		; (str fp, [sp, #-4]!)
   18ba4:	add	fp, sp, #0
   18ba8:	sub	sp, sp, #12
   18bac:	str	r0, [fp, #-8]
   18bb0:	ldr	r3, [fp, #-8]
   18bb4:	cmp	r3, #0
   18bb8:	beq	18bc4 <__assert_fail@plt+0x78c8>
   18bbc:	ldr	r3, [fp, #-8]
   18bc0:	b	18bcc <__assert_fail@plt+0x78d0>
   18bc4:	movw	r3, #4548	; 0x11c4
   18bc8:	movt	r3, #3
   18bcc:	ldr	r3, [r3]
   18bd0:	mov	r0, r3
   18bd4:	add	sp, fp, #0
   18bd8:	pop	{fp}		; (ldr fp, [sp], #4)
   18bdc:	bx	lr
   18be0:	push	{fp}		; (str fp, [sp, #-4]!)
   18be4:	add	fp, sp, #0
   18be8:	sub	sp, sp, #12
   18bec:	str	r0, [fp, #-8]
   18bf0:	str	r1, [fp, #-12]
   18bf4:	ldr	r3, [fp, #-8]
   18bf8:	cmp	r3, #0
   18bfc:	beq	18c08 <__assert_fail@plt+0x790c>
   18c00:	ldr	r3, [fp, #-8]
   18c04:	b	18c10 <__assert_fail@plt+0x7914>
   18c08:	movw	r3, #4548	; 0x11c4
   18c0c:	movt	r3, #3
   18c10:	ldr	r2, [fp, #-12]
   18c14:	str	r2, [r3]
   18c18:	nop	{0}
   18c1c:	add	sp, fp, #0
   18c20:	pop	{fp}		; (ldr fp, [sp], #4)
   18c24:	bx	lr
   18c28:	push	{fp}		; (str fp, [sp, #-4]!)
   18c2c:	add	fp, sp, #0
   18c30:	sub	sp, sp, #36	; 0x24
   18c34:	str	r0, [fp, #-24]	; 0xffffffe8
   18c38:	mov	r3, r1
   18c3c:	str	r2, [fp, #-32]	; 0xffffffe0
   18c40:	strb	r3, [fp, #-25]	; 0xffffffe7
   18c44:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   18c48:	strb	r3, [fp, #-5]
   18c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c50:	cmp	r3, #0
   18c54:	beq	18c60 <__assert_fail@plt+0x7964>
   18c58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c5c:	b	18c68 <__assert_fail@plt+0x796c>
   18c60:	movw	r3, #4548	; 0x11c4
   18c64:	movt	r3, #3
   18c68:	add	r2, r3, #8
   18c6c:	ldrb	r3, [fp, #-5]
   18c70:	lsr	r3, r3, #5
   18c74:	uxtb	r3, r3
   18c78:	lsl	r3, r3, #2
   18c7c:	add	r3, r2, r3
   18c80:	str	r3, [fp, #-12]
   18c84:	ldrb	r3, [fp, #-5]
   18c88:	and	r3, r3, #31
   18c8c:	str	r3, [fp, #-16]
   18c90:	ldr	r3, [fp, #-12]
   18c94:	ldr	r2, [r3]
   18c98:	ldr	r3, [fp, #-16]
   18c9c:	lsr	r3, r2, r3
   18ca0:	and	r3, r3, #1
   18ca4:	str	r3, [fp, #-20]	; 0xffffffec
   18ca8:	ldr	r3, [fp, #-12]
   18cac:	ldr	r3, [r3]
   18cb0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18cb4:	and	r1, r2, #1
   18cb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   18cbc:	eor	r1, r1, r2
   18cc0:	ldr	r2, [fp, #-16]
   18cc4:	lsl	r2, r1, r2
   18cc8:	eor	r2, r2, r3
   18ccc:	ldr	r3, [fp, #-12]
   18cd0:	str	r2, [r3]
   18cd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   18cd8:	mov	r0, r3
   18cdc:	add	sp, fp, #0
   18ce0:	pop	{fp}		; (ldr fp, [sp], #4)
   18ce4:	bx	lr
   18ce8:	push	{fp}		; (str fp, [sp, #-4]!)
   18cec:	add	fp, sp, #0
   18cf0:	sub	sp, sp, #20
   18cf4:	str	r0, [fp, #-16]
   18cf8:	str	r1, [fp, #-20]	; 0xffffffec
   18cfc:	ldr	r3, [fp, #-16]
   18d00:	cmp	r3, #0
   18d04:	bne	18d14 <__assert_fail@plt+0x7a18>
   18d08:	movw	r3, #4548	; 0x11c4
   18d0c:	movt	r3, #3
   18d10:	str	r3, [fp, #-16]
   18d14:	ldr	r3, [fp, #-16]
   18d18:	ldr	r3, [r3, #4]
   18d1c:	str	r3, [fp, #-8]
   18d20:	ldr	r3, [fp, #-16]
   18d24:	ldr	r2, [fp, #-20]	; 0xffffffec
   18d28:	str	r2, [r3, #4]
   18d2c:	ldr	r3, [fp, #-8]
   18d30:	mov	r0, r3
   18d34:	add	sp, fp, #0
   18d38:	pop	{fp}		; (ldr fp, [sp], #4)
   18d3c:	bx	lr
   18d40:	str	fp, [sp, #-8]!
   18d44:	str	lr, [sp, #4]
   18d48:	add	fp, sp, #4
   18d4c:	sub	sp, sp, #16
   18d50:	str	r0, [fp, #-8]
   18d54:	str	r1, [fp, #-12]
   18d58:	str	r2, [fp, #-16]
   18d5c:	ldr	r3, [fp, #-8]
   18d60:	cmp	r3, #0
   18d64:	bne	18d74 <__assert_fail@plt+0x7a78>
   18d68:	movw	r3, #4548	; 0x11c4
   18d6c:	movt	r3, #3
   18d70:	str	r3, [fp, #-8]
   18d74:	ldr	r3, [fp, #-8]
   18d78:	mov	r2, #10
   18d7c:	str	r2, [r3]
   18d80:	ldr	r3, [fp, #-12]
   18d84:	cmp	r3, #0
   18d88:	beq	18d98 <__assert_fail@plt+0x7a9c>
   18d8c:	ldr	r3, [fp, #-16]
   18d90:	cmp	r3, #0
   18d94:	bne	18d9c <__assert_fail@plt+0x7aa0>
   18d98:	bl	112b4 <abort@plt>
   18d9c:	ldr	r3, [fp, #-8]
   18da0:	ldr	r2, [fp, #-12]
   18da4:	str	r2, [r3, #40]	; 0x28
   18da8:	ldr	r3, [fp, #-8]
   18dac:	ldr	r2, [fp, #-16]
   18db0:	str	r2, [r3, #44]	; 0x2c
   18db4:	nop	{0}
   18db8:	sub	sp, fp, #4
   18dbc:	ldr	fp, [sp]
   18dc0:	add	sp, sp, #4
   18dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   18dc8:	str	fp, [sp, #-8]!
   18dcc:	str	lr, [sp, #4]
   18dd0:	add	fp, sp, #4
   18dd4:	sub	sp, sp, #56	; 0x38
   18dd8:	str	r0, [fp, #-56]	; 0xffffffc8
   18ddc:	str	r1, [fp, #-60]	; 0xffffffc4
   18de0:	sub	r1, fp, #52	; 0x34
   18de4:	mov	r2, #0
   18de8:	mov	r3, #0
   18dec:	strd	r2, [r1]
   18df0:	strd	r2, [r1, #8]
   18df4:	strd	r2, [r1, #16]
   18df8:	strd	r2, [r1, #24]
   18dfc:	strd	r2, [r1, #32]
   18e00:	strd	r2, [r1, #40]	; 0x28
   18e04:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18e08:	cmp	r3, #10
   18e0c:	bne	18e14 <__assert_fail@plt+0x7b18>
   18e10:	bl	112b4 <abort@plt>
   18e14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18e18:	str	r3, [fp, #-52]	; 0xffffffcc
   18e1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18e20:	mov	r2, r3
   18e24:	sub	r3, fp, #52	; 0x34
   18e28:	ldrd	r0, [r3]
   18e2c:	strd	r0, [r2]
   18e30:	ldrd	r0, [r3, #8]
   18e34:	strd	r0, [r2, #8]
   18e38:	ldrd	r0, [r3, #16]
   18e3c:	strd	r0, [r2, #16]
   18e40:	ldrd	r0, [r3, #24]
   18e44:	strd	r0, [r2, #24]
   18e48:	ldrd	r0, [r3, #32]
   18e4c:	strd	r0, [r2, #32]
   18e50:	ldrd	r0, [r3, #40]	; 0x28
   18e54:	strd	r0, [r2, #40]	; 0x28
   18e58:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18e5c:	sub	sp, fp, #4
   18e60:	ldr	fp, [sp]
   18e64:	add	sp, sp, #4
   18e68:	pop	{pc}		; (ldr pc, [sp], #4)
   18e6c:	str	fp, [sp, #-8]!
   18e70:	str	lr, [sp, #4]
   18e74:	add	fp, sp, #4
   18e78:	sub	sp, sp, #16
   18e7c:	str	r0, [fp, #-16]
   18e80:	str	r1, [fp, #-20]	; 0xffffffec
   18e84:	ldr	r0, [fp, #-16]
   18e88:	bl	1117c <gettext@plt>
   18e8c:	str	r0, [fp, #-8]
   18e90:	ldr	r2, [fp, #-8]
   18e94:	ldr	r3, [fp, #-16]
   18e98:	cmp	r2, r3
   18e9c:	beq	18ea8 <__assert_fail@plt+0x7bac>
   18ea0:	ldr	r3, [fp, #-8]
   18ea4:	b	18f58 <__assert_fail@plt+0x7c5c>
   18ea8:	bl	1e0b8 <__assert_fail@plt+0xcdbc>
   18eac:	str	r0, [fp, #-12]
   18eb0:	movw	r1, #64740	; 0xfce4
   18eb4:	movt	r1, #1
   18eb8:	ldr	r0, [fp, #-12]
   18ebc:	bl	1d4c4 <__assert_fail@plt+0xc1c8>
   18ec0:	mov	r3, r0
   18ec4:	cmp	r3, #0
   18ec8:	bne	18ef4 <__assert_fail@plt+0x7bf8>
   18ecc:	ldr	r3, [fp, #-16]
   18ed0:	ldrb	r3, [r3]
   18ed4:	cmp	r3, #96	; 0x60
   18ed8:	bne	18ee8 <__assert_fail@plt+0x7bec>
   18edc:	movw	r3, #64748	; 0xfcec
   18ee0:	movt	r3, #1
   18ee4:	b	18f58 <__assert_fail@plt+0x7c5c>
   18ee8:	movw	r3, #64752	; 0xfcf0
   18eec:	movt	r3, #1
   18ef0:	b	18f58 <__assert_fail@plt+0x7c5c>
   18ef4:	movw	r1, #64756	; 0xfcf4
   18ef8:	movt	r1, #1
   18efc:	ldr	r0, [fp, #-12]
   18f00:	bl	1d4c4 <__assert_fail@plt+0xc1c8>
   18f04:	mov	r3, r0
   18f08:	cmp	r3, #0
   18f0c:	bne	18f38 <__assert_fail@plt+0x7c3c>
   18f10:	ldr	r3, [fp, #-16]
   18f14:	ldrb	r3, [r3]
   18f18:	cmp	r3, #96	; 0x60
   18f1c:	bne	18f2c <__assert_fail@plt+0x7c30>
   18f20:	movw	r3, #64764	; 0xfcfc
   18f24:	movt	r3, #1
   18f28:	b	18f58 <__assert_fail@plt+0x7c5c>
   18f2c:	movw	r3, #64768	; 0xfd00
   18f30:	movt	r3, #1
   18f34:	b	18f58 <__assert_fail@plt+0x7c5c>
   18f38:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f3c:	cmp	r3, #9
   18f40:	bne	18f50 <__assert_fail@plt+0x7c54>
   18f44:	movw	r3, #64772	; 0xfd04
   18f48:	movt	r3, #1
   18f4c:	b	18f58 <__assert_fail@plt+0x7c5c>
   18f50:	movw	r3, #64776	; 0xfd08
   18f54:	movt	r3, #1
   18f58:	mov	r0, r3
   18f5c:	sub	sp, fp, #4
   18f60:	ldr	fp, [sp]
   18f64:	add	sp, sp, #4
   18f68:	pop	{pc}		; (ldr pc, [sp], #4)
   18f6c:	str	r4, [sp, #-12]!
   18f70:	str	fp, [sp, #4]
   18f74:	str	lr, [sp, #8]
   18f78:	add	fp, sp, #8
   18f7c:	sub	sp, sp, #116	; 0x74
   18f80:	str	r0, [fp, #-88]	; 0xffffffa8
   18f84:	str	r1, [fp, #-92]	; 0xffffffa4
   18f88:	str	r2, [fp, #-96]	; 0xffffffa0
   18f8c:	str	r3, [fp, #-100]	; 0xffffff9c
   18f90:	mov	r3, #0
   18f94:	str	r3, [fp, #-20]	; 0xffffffec
   18f98:	mov	r3, #0
   18f9c:	str	r3, [fp, #-24]	; 0xffffffe8
   18fa0:	mov	r3, #0
   18fa4:	str	r3, [fp, #-28]	; 0xffffffe4
   18fa8:	mov	r3, #0
   18fac:	str	r3, [fp, #-32]	; 0xffffffe0
   18fb0:	mov	r3, #0
   18fb4:	strb	r3, [fp, #-33]	; 0xffffffdf
   18fb8:	bl	110d4 <__ctype_get_mb_cur_max@plt>
   18fbc:	mov	r3, r0
   18fc0:	cmp	r3, #1
   18fc4:	moveq	r3, #1
   18fc8:	movne	r3, #0
   18fcc:	strb	r3, [fp, #-57]	; 0xffffffc7
   18fd0:	ldr	r3, [fp, #8]
   18fd4:	and	r3, r3, #2
   18fd8:	cmp	r3, #0
   18fdc:	movne	r3, #1
   18fe0:	moveq	r3, #0
   18fe4:	strb	r3, [fp, #-34]	; 0xffffffde
   18fe8:	mov	r3, #0
   18fec:	strb	r3, [fp, #-35]	; 0xffffffdd
   18ff0:	mov	r3, #0
   18ff4:	strb	r3, [fp, #-36]	; 0xffffffdc
   18ff8:	mov	r3, #1
   18ffc:	strb	r3, [fp, #-37]	; 0xffffffdb
   19000:	ldr	r3, [fp, #4]
   19004:	cmp	r3, #10
   19008:	ldrls	pc, [pc, r3, lsl #2]
   1900c:	b	19224 <__assert_fail@plt+0x7f28>
   19010:	andeq	r9, r1, r8, lsl r2
   19014:	muleq	r1, r0, r1
   19018:			; <UNDEFINED> instruction: 0x000191b4
   1901c:	andeq	r9, r1, r8, lsl #3
   19020:	muleq	r1, r8, r1
   19024:	andeq	r9, r1, ip, asr #32
   19028:	andeq	r9, r1, ip, lsr r0
   1902c:	strheq	r9, [r1], -r0
   19030:	andeq	r9, r1, r4, asr #1
   19034:	andeq	r9, r1, r4, asr #1
   19038:	andeq	r9, r1, r4, asr #1
   1903c:	mov	r3, #5
   19040:	str	r3, [fp, #4]
   19044:	mov	r3, #1
   19048:	strb	r3, [fp, #-34]	; 0xffffffde
   1904c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19050:	eor	r3, r3, #1
   19054:	uxtb	r3, r3
   19058:	cmp	r3, #0
   1905c:	beq	19090 <__assert_fail@plt+0x7d94>
   19060:	ldr	r2, [fp, #-20]	; 0xffffffec
   19064:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19068:	cmp	r2, r3
   1906c:	bcs	19084 <__assert_fail@plt+0x7d88>
   19070:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19074:	ldr	r3, [fp, #-20]	; 0xffffffec
   19078:	add	r3, r2, r3
   1907c:	mov	r2, #34	; 0x22
   19080:	strb	r2, [r3]
   19084:	ldr	r3, [fp, #-20]	; 0xffffffec
   19088:	add	r3, r3, #1
   1908c:	str	r3, [fp, #-20]	; 0xffffffec
   19090:	mov	r3, #1
   19094:	strb	r3, [fp, #-33]	; 0xffffffdf
   19098:	movw	r3, #64772	; 0xfd04
   1909c:	movt	r3, #1
   190a0:	str	r3, [fp, #-28]	; 0xffffffe4
   190a4:	mov	r3, #1
   190a8:	str	r3, [fp, #-32]	; 0xffffffe0
   190ac:	b	19228 <__assert_fail@plt+0x7f2c>
   190b0:	mov	r3, #1
   190b4:	strb	r3, [fp, #-33]	; 0xffffffdf
   190b8:	mov	r3, #0
   190bc:	strb	r3, [fp, #-34]	; 0xffffffde
   190c0:	b	19228 <__assert_fail@plt+0x7f2c>
   190c4:	ldr	r3, [fp, #4]
   190c8:	cmp	r3, #10
   190cc:	beq	190f8 <__assert_fail@plt+0x7dfc>
   190d0:	ldr	r1, [fp, #4]
   190d4:	movw	r0, #64780	; 0xfd0c
   190d8:	movt	r0, #1
   190dc:	bl	18e6c <__assert_fail@plt+0x7b70>
   190e0:	str	r0, [fp, #16]
   190e4:	ldr	r1, [fp, #4]
   190e8:	movw	r0, #64776	; 0xfd08
   190ec:	movt	r0, #1
   190f0:	bl	18e6c <__assert_fail@plt+0x7b70>
   190f4:	str	r0, [fp, #20]
   190f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   190fc:	eor	r3, r3, #1
   19100:	uxtb	r3, r3
   19104:	cmp	r3, #0
   19108:	beq	19168 <__assert_fail@plt+0x7e6c>
   1910c:	ldr	r3, [fp, #16]
   19110:	str	r3, [fp, #-28]	; 0xffffffe4
   19114:	b	19158 <__assert_fail@plt+0x7e5c>
   19118:	ldr	r2, [fp, #-20]	; 0xffffffec
   1911c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19120:	cmp	r2, r3
   19124:	bcs	19140 <__assert_fail@plt+0x7e44>
   19128:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1912c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19130:	add	r3, r2, r3
   19134:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19138:	ldrb	r2, [r2]
   1913c:	strb	r2, [r3]
   19140:	ldr	r3, [fp, #-20]	; 0xffffffec
   19144:	add	r3, r3, #1
   19148:	str	r3, [fp, #-20]	; 0xffffffec
   1914c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19150:	add	r3, r3, #1
   19154:	str	r3, [fp, #-28]	; 0xffffffe4
   19158:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1915c:	ldrb	r3, [r3]
   19160:	cmp	r3, #0
   19164:	bne	19118 <__assert_fail@plt+0x7e1c>
   19168:	mov	r3, #1
   1916c:	strb	r3, [fp, #-33]	; 0xffffffdf
   19170:	ldr	r3, [fp, #20]
   19174:	str	r3, [fp, #-28]	; 0xffffffe4
   19178:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1917c:	bl	11188 <strlen@plt>
   19180:	str	r0, [fp, #-32]	; 0xffffffe0
   19184:	b	19228 <__assert_fail@plt+0x7f2c>
   19188:	mov	r3, #1
   1918c:	strb	r3, [fp, #-33]	; 0xffffffdf
   19190:	mov	r3, #1
   19194:	strb	r3, [fp, #-34]	; 0xffffffde
   19198:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1919c:	eor	r3, r3, #1
   191a0:	uxtb	r3, r3
   191a4:	cmp	r3, #0
   191a8:	beq	191b4 <__assert_fail@plt+0x7eb8>
   191ac:	mov	r3, #1
   191b0:	strb	r3, [fp, #-33]	; 0xffffffdf
   191b4:	mov	r3, #2
   191b8:	str	r3, [fp, #4]
   191bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   191c0:	eor	r3, r3, #1
   191c4:	uxtb	r3, r3
   191c8:	cmp	r3, #0
   191cc:	beq	19200 <__assert_fail@plt+0x7f04>
   191d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   191d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   191d8:	cmp	r2, r3
   191dc:	bcs	191f4 <__assert_fail@plt+0x7ef8>
   191e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   191e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   191e8:	add	r3, r2, r3
   191ec:	mov	r2, #39	; 0x27
   191f0:	strb	r2, [r3]
   191f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   191f8:	add	r3, r3, #1
   191fc:	str	r3, [fp, #-20]	; 0xffffffec
   19200:	movw	r3, #64776	; 0xfd08
   19204:	movt	r3, #1
   19208:	str	r3, [fp, #-28]	; 0xffffffe4
   1920c:	mov	r3, #1
   19210:	str	r3, [fp, #-32]	; 0xffffffe0
   19214:	b	19228 <__assert_fail@plt+0x7f2c>
   19218:	mov	r3, #0
   1921c:	strb	r3, [fp, #-34]	; 0xffffffde
   19220:	b	19228 <__assert_fail@plt+0x7f2c>
   19224:	bl	112b4 <abort@plt>
   19228:	mov	r3, #0
   1922c:	str	r3, [fp, #-16]
   19230:	b	1a3cc <__assert_fail@plt+0x90d0>
   19234:	mov	r3, #0
   19238:	strb	r3, [fp, #-40]	; 0xffffffd8
   1923c:	mov	r3, #0
   19240:	strb	r3, [fp, #-41]	; 0xffffffd7
   19244:	mov	r3, #0
   19248:	strb	r3, [fp, #-42]	; 0xffffffd6
   1924c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19250:	cmp	r3, #0
   19254:	beq	192f0 <__assert_fail@plt+0x7ff4>
   19258:	ldr	r3, [fp, #4]
   1925c:	cmp	r3, #2
   19260:	beq	192f0 <__assert_fail@plt+0x7ff4>
   19264:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19268:	cmp	r3, #0
   1926c:	beq	192f0 <__assert_fail@plt+0x7ff4>
   19270:	ldr	r2, [fp, #-16]
   19274:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19278:	add	r4, r2, r3
   1927c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19280:	cmn	r3, #1
   19284:	bne	192a8 <__assert_fail@plt+0x7fac>
   19288:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1928c:	cmp	r3, #1
   19290:	bls	192a8 <__assert_fail@plt+0x7fac>
   19294:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19298:	bl	11188 <strlen@plt>
   1929c:	str	r0, [fp, #-100]	; 0xffffff9c
   192a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   192a4:	b	192ac <__assert_fail@plt+0x7fb0>
   192a8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   192ac:	cmp	r3, r4
   192b0:	bcc	192f0 <__assert_fail@plt+0x7ff4>
   192b4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   192b8:	ldr	r3, [fp, #-16]
   192bc:	add	r3, r2, r3
   192c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   192c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   192c8:	mov	r0, r3
   192cc:	bl	1105c <memcmp@plt>
   192d0:	mov	r3, r0
   192d4:	cmp	r3, #0
   192d8:	bne	192f0 <__assert_fail@plt+0x7ff4>
   192dc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   192e0:	cmp	r3, #0
   192e4:	bne	1a588 <__assert_fail@plt+0x928c>
   192e8:	mov	r3, #1
   192ec:	strb	r3, [fp, #-40]	; 0xffffffd8
   192f0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   192f4:	ldr	r3, [fp, #-16]
   192f8:	add	r3, r2, r3
   192fc:	ldrb	r3, [r3]
   19300:	strb	r3, [fp, #-38]	; 0xffffffda
   19304:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19308:	cmp	r3, #126	; 0x7e
   1930c:	ldrls	pc, [pc, r3, lsl #2]
   19310:	b	19b48 <__assert_fail@plt+0x884c>
   19314:	andeq	r9, r1, r0, lsl r5
   19318:	andeq	r9, r1, r8, asr #22
   1931c:	andeq	r9, r1, r8, asr #22
   19320:	andeq	r9, r1, r8, asr #22
   19324:	andeq	r9, r1, r8, asr #22
   19328:	andeq	r9, r1, r8, asr #22
   1932c:	andeq	r9, r1, r8, asr #22
   19330:	andeq	r9, r1, r4, lsl #18
   19334:	andeq	r9, r1, r0, lsl r9
   19338:	andeq	r9, r1, r0, asr #18
   1933c:	andeq	r9, r1, r8, lsr #18
   19340:	andeq	r9, r1, ip, asr #18
   19344:	andeq	r9, r1, ip, lsl r9
   19348:	andeq	r9, r1, r4, lsr r9
   1934c:	andeq	r9, r1, r8, asr #22
   19350:	andeq	r9, r1, r8, asr #22
   19354:	andeq	r9, r1, r8, asr #22
   19358:	andeq	r9, r1, r8, asr #22
   1935c:	andeq	r9, r1, r8, asr #22
   19360:	andeq	r9, r1, r8, asr #22
   19364:	andeq	r9, r1, r8, asr #22
   19368:	andeq	r9, r1, r8, asr #22
   1936c:	andeq	r9, r1, r8, asr #22
   19370:	andeq	r9, r1, r8, asr #22
   19374:	andeq	r9, r1, r8, asr #22
   19378:	andeq	r9, r1, r8, asr #22
   1937c:	andeq	r9, r1, r8, asr #22
   19380:	andeq	r9, r1, r8, asr #22
   19384:	andeq	r9, r1, r8, asr #22
   19388:	andeq	r9, r1, r8, asr #22
   1938c:	andeq	r9, r1, r8, asr #22
   19390:	andeq	r9, r1, r8, asr #22
   19394:	andeq	r9, r1, ip, lsr #20
   19398:	andeq	r9, r1, r4, lsr sl
   1939c:	andeq	r9, r1, r4, lsr sl
   193a0:	andeq	r9, r1, r0, lsr #20
   193a4:	andeq	r9, r1, r4, lsr sl
   193a8:	andeq	r9, r1, ip, lsr fp
   193ac:	andeq	r9, r1, r4, lsr sl
   193b0:	andeq	r9, r1, r0, asr sl
   193b4:	andeq	r9, r1, r4, lsr sl
   193b8:	andeq	r9, r1, r4, lsr sl
   193bc:	andeq	r9, r1, r4, lsr sl
   193c0:	andeq	r9, r1, ip, lsr fp
   193c4:	andeq	r9, r1, ip, lsr fp
   193c8:	andeq	r9, r1, ip, lsr fp
   193cc:	andeq	r9, r1, ip, lsr fp
   193d0:	andeq	r9, r1, ip, lsr fp
   193d4:	andeq	r9, r1, ip, lsr fp
   193d8:	andeq	r9, r1, ip, lsr fp
   193dc:	andeq	r9, r1, ip, lsr fp
   193e0:	andeq	r9, r1, ip, lsr fp
   193e4:	andeq	r9, r1, ip, lsr fp
   193e8:	andeq	r9, r1, ip, lsr fp
   193ec:	andeq	r9, r1, ip, lsr fp
   193f0:	andeq	r9, r1, ip, lsr fp
   193f4:	andeq	r9, r1, ip, lsr fp
   193f8:	andeq	r9, r1, ip, lsr fp
   193fc:	andeq	r9, r1, ip, lsr fp
   19400:	andeq	r9, r1, r4, lsr sl
   19404:	andeq	r9, r1, r4, lsr sl
   19408:	andeq	r9, r1, r4, lsr sl
   1940c:	andeq	r9, r1, r4, lsr sl
   19410:	strdeq	r9, [r1], -r0
   19414:	andeq	r9, r1, r8, asr #22
   19418:	andeq	r9, r1, ip, lsr fp
   1941c:	andeq	r9, r1, ip, lsr fp
   19420:	andeq	r9, r1, ip, lsr fp
   19424:	andeq	r9, r1, ip, lsr fp
   19428:	andeq	r9, r1, ip, lsr fp
   1942c:	andeq	r9, r1, ip, lsr fp
   19430:	andeq	r9, r1, ip, lsr fp
   19434:	andeq	r9, r1, ip, lsr fp
   19438:	andeq	r9, r1, ip, lsr fp
   1943c:	andeq	r9, r1, ip, lsr fp
   19440:	andeq	r9, r1, ip, lsr fp
   19444:	andeq	r9, r1, ip, lsr fp
   19448:	andeq	r9, r1, ip, lsr fp
   1944c:	andeq	r9, r1, ip, lsr fp
   19450:	andeq	r9, r1, ip, lsr fp
   19454:	andeq	r9, r1, ip, lsr fp
   19458:	andeq	r9, r1, ip, lsr fp
   1945c:	andeq	r9, r1, ip, lsr fp
   19460:	andeq	r9, r1, ip, lsr fp
   19464:	andeq	r9, r1, ip, lsr fp
   19468:	andeq	r9, r1, ip, lsr fp
   1946c:	andeq	r9, r1, ip, lsr fp
   19470:	andeq	r9, r1, ip, lsr fp
   19474:	andeq	r9, r1, ip, lsr fp
   19478:	andeq	r9, r1, ip, lsr fp
   1947c:	andeq	r9, r1, ip, lsr fp
   19480:	andeq	r9, r1, r4, lsr sl
   19484:	andeq	r9, r1, r8, asr r9
   19488:	andeq	r9, r1, ip, lsr fp
   1948c:	andeq	r9, r1, r4, lsr sl
   19490:	andeq	r9, r1, ip, lsr fp
   19494:	andeq	r9, r1, r4, lsr sl
   19498:	andeq	r9, r1, ip, lsr fp
   1949c:	andeq	r9, r1, ip, lsr fp
   194a0:	andeq	r9, r1, ip, lsr fp
   194a4:	andeq	r9, r1, ip, lsr fp
   194a8:	andeq	r9, r1, ip, lsr fp
   194ac:	andeq	r9, r1, ip, lsr fp
   194b0:	andeq	r9, r1, ip, lsr fp
   194b4:	andeq	r9, r1, ip, lsr fp
   194b8:	andeq	r9, r1, ip, lsr fp
   194bc:	andeq	r9, r1, ip, lsr fp
   194c0:	andeq	r9, r1, ip, lsr fp
   194c4:	andeq	r9, r1, ip, lsr fp
   194c8:	andeq	r9, r1, ip, lsr fp
   194cc:	andeq	r9, r1, ip, lsr fp
   194d0:	andeq	r9, r1, ip, lsr fp
   194d4:	andeq	r9, r1, ip, lsr fp
   194d8:	andeq	r9, r1, ip, lsr fp
   194dc:	andeq	r9, r1, ip, lsr fp
   194e0:	andeq	r9, r1, ip, lsr fp
   194e4:	andeq	r9, r1, ip, lsr fp
   194e8:	andeq	r9, r1, ip, lsr fp
   194ec:	andeq	r9, r1, ip, lsr fp
   194f0:	andeq	r9, r1, ip, lsr fp
   194f4:	andeq	r9, r1, ip, lsr fp
   194f8:	andeq	r9, r1, ip, lsr fp
   194fc:	andeq	r9, r1, ip, lsr fp
   19500:	ldrdeq	r9, [r1], -r8
   19504:	andeq	r9, r1, r4, lsr sl
   19508:	ldrdeq	r9, [r1], -r8
   1950c:	andeq	r9, r1, r0, lsr #20
   19510:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19514:	cmp	r3, #0
   19518:	beq	196dc <__assert_fail@plt+0x83e0>
   1951c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19520:	cmp	r3, #0
   19524:	bne	1a590 <__assert_fail@plt+0x9294>
   19528:	mov	r3, #1
   1952c:	strb	r3, [fp, #-41]	; 0xffffffd7
   19530:	ldr	r3, [fp, #4]
   19534:	cmp	r3, #2
   19538:	bne	195e8 <__assert_fail@plt+0x82ec>
   1953c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19540:	eor	r3, r3, #1
   19544:	uxtb	r3, r3
   19548:	cmp	r3, #0
   1954c:	beq	195e8 <__assert_fail@plt+0x82ec>
   19550:	ldr	r2, [fp, #-20]	; 0xffffffec
   19554:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19558:	cmp	r2, r3
   1955c:	bcs	19574 <__assert_fail@plt+0x8278>
   19560:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19564:	ldr	r3, [fp, #-20]	; 0xffffffec
   19568:	add	r3, r2, r3
   1956c:	mov	r2, #39	; 0x27
   19570:	strb	r2, [r3]
   19574:	ldr	r3, [fp, #-20]	; 0xffffffec
   19578:	add	r3, r3, #1
   1957c:	str	r3, [fp, #-20]	; 0xffffffec
   19580:	ldr	r2, [fp, #-20]	; 0xffffffec
   19584:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19588:	cmp	r2, r3
   1958c:	bcs	195a4 <__assert_fail@plt+0x82a8>
   19590:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19594:	ldr	r3, [fp, #-20]	; 0xffffffec
   19598:	add	r3, r2, r3
   1959c:	mov	r2, #36	; 0x24
   195a0:	strb	r2, [r3]
   195a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   195a8:	add	r3, r3, #1
   195ac:	str	r3, [fp, #-20]	; 0xffffffec
   195b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   195b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   195b8:	cmp	r2, r3
   195bc:	bcs	195d4 <__assert_fail@plt+0x82d8>
   195c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   195c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   195c8:	add	r3, r2, r3
   195cc:	mov	r2, #39	; 0x27
   195d0:	strb	r2, [r3]
   195d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   195d8:	add	r3, r3, #1
   195dc:	str	r3, [fp, #-20]	; 0xffffffec
   195e0:	mov	r3, #1
   195e4:	strb	r3, [fp, #-35]	; 0xffffffdd
   195e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   195ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   195f0:	cmp	r2, r3
   195f4:	bcs	1960c <__assert_fail@plt+0x8310>
   195f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   195fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19600:	add	r3, r2, r3
   19604:	mov	r2, #92	; 0x5c
   19608:	strb	r2, [r3]
   1960c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19610:	add	r3, r3, #1
   19614:	str	r3, [fp, #-20]	; 0xffffffec
   19618:	ldr	r3, [fp, #4]
   1961c:	cmp	r3, #2
   19620:	beq	196d0 <__assert_fail@plt+0x83d4>
   19624:	ldr	r3, [fp, #-16]
   19628:	add	r3, r3, #1
   1962c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19630:	cmp	r2, r3
   19634:	bls	196d0 <__assert_fail@plt+0x83d4>
   19638:	ldr	r3, [fp, #-16]
   1963c:	add	r3, r3, #1
   19640:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19644:	add	r3, r2, r3
   19648:	ldrb	r3, [r3]
   1964c:	cmp	r3, #47	; 0x2f
   19650:	bls	196d0 <__assert_fail@plt+0x83d4>
   19654:	ldr	r3, [fp, #-16]
   19658:	add	r3, r3, #1
   1965c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19660:	add	r3, r2, r3
   19664:	ldrb	r3, [r3]
   19668:	cmp	r3, #57	; 0x39
   1966c:	bhi	196d0 <__assert_fail@plt+0x83d4>
   19670:	ldr	r2, [fp, #-20]	; 0xffffffec
   19674:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19678:	cmp	r2, r3
   1967c:	bcs	19694 <__assert_fail@plt+0x8398>
   19680:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19684:	ldr	r3, [fp, #-20]	; 0xffffffec
   19688:	add	r3, r2, r3
   1968c:	mov	r2, #48	; 0x30
   19690:	strb	r2, [r3]
   19694:	ldr	r3, [fp, #-20]	; 0xffffffec
   19698:	add	r3, r3, #1
   1969c:	str	r3, [fp, #-20]	; 0xffffffec
   196a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   196a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   196a8:	cmp	r2, r3
   196ac:	bcs	196c4 <__assert_fail@plt+0x83c8>
   196b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   196b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   196b8:	add	r3, r2, r3
   196bc:	mov	r2, #48	; 0x30
   196c0:	strb	r2, [r3]
   196c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   196c8:	add	r3, r3, #1
   196cc:	str	r3, [fp, #-20]	; 0xffffffec
   196d0:	mov	r3, #48	; 0x30
   196d4:	strb	r3, [fp, #-38]	; 0xffffffda
   196d8:	b	1a118 <__assert_fail@plt+0x8e1c>
   196dc:	ldr	r3, [fp, #8]
   196e0:	and	r3, r3, #1
   196e4:	cmp	r3, #0
   196e8:	beq	1a118 <__assert_fail@plt+0x8e1c>
   196ec:	b	1a3c0 <__assert_fail@plt+0x90c4>
   196f0:	ldr	r3, [fp, #4]
   196f4:	cmp	r3, #2
   196f8:	beq	1970c <__assert_fail@plt+0x8410>
   196fc:	ldr	r3, [fp, #4]
   19700:	cmp	r3, #5
   19704:	beq	1971c <__assert_fail@plt+0x8420>
   19708:	b	19900 <__assert_fail@plt+0x8604>
   1970c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19710:	cmp	r3, #0
   19714:	beq	198f4 <__assert_fail@plt+0x85f8>
   19718:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1971c:	ldr	r3, [fp, #8]
   19720:	and	r3, r3, #4
   19724:	cmp	r3, #0
   19728:	beq	198fc <__assert_fail@plt+0x8600>
   1972c:	ldr	r3, [fp, #-16]
   19730:	add	r3, r3, #2
   19734:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19738:	cmp	r2, r3
   1973c:	bls	198fc <__assert_fail@plt+0x8600>
   19740:	ldr	r3, [fp, #-16]
   19744:	add	r3, r3, #1
   19748:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1974c:	add	r3, r2, r3
   19750:	ldrb	r3, [r3]
   19754:	cmp	r3, #63	; 0x3f
   19758:	bne	198fc <__assert_fail@plt+0x8600>
   1975c:	ldr	r3, [fp, #-16]
   19760:	add	r3, r3, #2
   19764:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19768:	add	r3, r2, r3
   1976c:	ldrb	r3, [r3]
   19770:	sub	r3, r3, #33	; 0x21
   19774:	cmp	r3, #29
   19778:	ldrls	pc, [pc, r3, lsl #2]
   1977c:	b	198ec <__assert_fail@plt+0x85f0>
   19780:	strdeq	r9, [r1], -r8
   19784:	andeq	r9, r1, ip, ror #17
   19788:	andeq	r9, r1, ip, ror #17
   1978c:	andeq	r9, r1, ip, ror #17
   19790:	andeq	r9, r1, ip, ror #17
   19794:	andeq	r9, r1, ip, ror #17
   19798:	strdeq	r9, [r1], -r8
   1979c:	strdeq	r9, [r1], -r8
   197a0:	strdeq	r9, [r1], -r8
   197a4:	andeq	r9, r1, ip, ror #17
   197a8:	andeq	r9, r1, ip, ror #17
   197ac:	andeq	r9, r1, ip, ror #17
   197b0:	strdeq	r9, [r1], -r8
   197b4:	andeq	r9, r1, ip, ror #17
   197b8:	strdeq	r9, [r1], -r8
   197bc:	andeq	r9, r1, ip, ror #17
   197c0:	andeq	r9, r1, ip, ror #17
   197c4:	andeq	r9, r1, ip, ror #17
   197c8:	andeq	r9, r1, ip, ror #17
   197cc:	andeq	r9, r1, ip, ror #17
   197d0:	andeq	r9, r1, ip, ror #17
   197d4:	andeq	r9, r1, ip, ror #17
   197d8:	andeq	r9, r1, ip, ror #17
   197dc:	andeq	r9, r1, ip, ror #17
   197e0:	andeq	r9, r1, ip, ror #17
   197e4:	andeq	r9, r1, ip, ror #17
   197e8:	andeq	r9, r1, ip, ror #17
   197ec:	strdeq	r9, [r1], -r8
   197f0:	strdeq	r9, [r1], -r8
   197f4:	strdeq	r9, [r1], -r8
   197f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   197fc:	cmp	r3, #0
   19800:	bne	1a598 <__assert_fail@plt+0x929c>
   19804:	ldr	r3, [fp, #-16]
   19808:	add	r3, r3, #2
   1980c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19810:	add	r3, r2, r3
   19814:	ldrb	r3, [r3]
   19818:	strb	r3, [fp, #-38]	; 0xffffffda
   1981c:	ldr	r3, [fp, #-16]
   19820:	add	r3, r3, #2
   19824:	str	r3, [fp, #-16]
   19828:	ldr	r2, [fp, #-20]	; 0xffffffec
   1982c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19830:	cmp	r2, r3
   19834:	bcs	1984c <__assert_fail@plt+0x8550>
   19838:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1983c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19840:	add	r3, r2, r3
   19844:	mov	r2, #63	; 0x3f
   19848:	strb	r2, [r3]
   1984c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19850:	add	r3, r3, #1
   19854:	str	r3, [fp, #-20]	; 0xffffffec
   19858:	ldr	r2, [fp, #-20]	; 0xffffffec
   1985c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19860:	cmp	r2, r3
   19864:	bcs	1987c <__assert_fail@plt+0x8580>
   19868:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1986c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19870:	add	r3, r2, r3
   19874:	mov	r2, #34	; 0x22
   19878:	strb	r2, [r3]
   1987c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19880:	add	r3, r3, #1
   19884:	str	r3, [fp, #-20]	; 0xffffffec
   19888:	ldr	r2, [fp, #-20]	; 0xffffffec
   1988c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19890:	cmp	r2, r3
   19894:	bcs	198ac <__assert_fail@plt+0x85b0>
   19898:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1989c:	ldr	r3, [fp, #-20]	; 0xffffffec
   198a0:	add	r3, r2, r3
   198a4:	mov	r2, #34	; 0x22
   198a8:	strb	r2, [r3]
   198ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   198b0:	add	r3, r3, #1
   198b4:	str	r3, [fp, #-20]	; 0xffffffec
   198b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   198bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198c0:	cmp	r2, r3
   198c4:	bcs	198dc <__assert_fail@plt+0x85e0>
   198c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   198cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   198d0:	add	r3, r2, r3
   198d4:	mov	r2, #63	; 0x3f
   198d8:	strb	r2, [r3]
   198dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   198e0:	add	r3, r3, #1
   198e4:	str	r3, [fp, #-20]	; 0xffffffec
   198e8:	b	198f0 <__assert_fail@plt+0x85f4>
   198ec:	nop	{0}
   198f0:	b	198fc <__assert_fail@plt+0x8600>
   198f4:	nop	{0}
   198f8:	b	1a14c <__assert_fail@plt+0x8e50>
   198fc:	nop	{0}
   19900:	b	1a14c <__assert_fail@plt+0x8e50>
   19904:	mov	r3, #97	; 0x61
   19908:	strb	r3, [fp, #-39]	; 0xffffffd9
   1990c:	b	199c0 <__assert_fail@plt+0x86c4>
   19910:	mov	r3, #98	; 0x62
   19914:	strb	r3, [fp, #-39]	; 0xffffffd9
   19918:	b	199c0 <__assert_fail@plt+0x86c4>
   1991c:	mov	r3, #102	; 0x66
   19920:	strb	r3, [fp, #-39]	; 0xffffffd9
   19924:	b	199c0 <__assert_fail@plt+0x86c4>
   19928:	mov	r3, #110	; 0x6e
   1992c:	strb	r3, [fp, #-39]	; 0xffffffd9
   19930:	b	199a4 <__assert_fail@plt+0x86a8>
   19934:	mov	r3, #114	; 0x72
   19938:	strb	r3, [fp, #-39]	; 0xffffffd9
   1993c:	b	199a4 <__assert_fail@plt+0x86a8>
   19940:	mov	r3, #116	; 0x74
   19944:	strb	r3, [fp, #-39]	; 0xffffffd9
   19948:	b	199a4 <__assert_fail@plt+0x86a8>
   1994c:	mov	r3, #118	; 0x76
   19950:	strb	r3, [fp, #-39]	; 0xffffffd9
   19954:	b	199c0 <__assert_fail@plt+0x86c4>
   19958:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1995c:	strb	r3, [fp, #-39]	; 0xffffffd9
   19960:	ldr	r3, [fp, #4]
   19964:	cmp	r3, #2
   19968:	bne	1997c <__assert_fail@plt+0x8680>
   1996c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19970:	cmp	r3, #0
   19974:	beq	1a2d8 <__assert_fail@plt+0x8fdc>
   19978:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1997c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19980:	cmp	r3, #0
   19984:	beq	199a0 <__assert_fail@plt+0x86a4>
   19988:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1998c:	cmp	r3, #0
   19990:	beq	199a0 <__assert_fail@plt+0x86a4>
   19994:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19998:	cmp	r3, #0
   1999c:	bne	1a2e0 <__assert_fail@plt+0x8fe4>
   199a0:	nop	{0}
   199a4:	ldr	r3, [fp, #4]
   199a8:	cmp	r3, #2
   199ac:	bne	199bc <__assert_fail@plt+0x86c0>
   199b0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   199b4:	cmp	r3, #0
   199b8:	bne	1a5a0 <__assert_fail@plt+0x92a4>
   199bc:	nop	{0}
   199c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   199c4:	cmp	r3, #0
   199c8:	beq	1a120 <__assert_fail@plt+0x8e24>
   199cc:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   199d0:	strb	r3, [fp, #-38]	; 0xffffffda
   199d4:	b	1a1d8 <__assert_fail@plt+0x8edc>
   199d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   199dc:	cmn	r3, #1
   199e0:	bne	19a04 <__assert_fail@plt+0x8708>
   199e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   199e8:	add	r3, r3, #1
   199ec:	ldrb	r3, [r3]
   199f0:	cmp	r3, #0
   199f4:	movne	r3, #1
   199f8:	moveq	r3, #0
   199fc:	uxtb	r3, r3
   19a00:	b	19a18 <__assert_fail@plt+0x871c>
   19a04:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19a08:	cmp	r3, #1
   19a0c:	movne	r3, #1
   19a10:	moveq	r3, #0
   19a14:	uxtb	r3, r3
   19a18:	cmp	r3, #0
   19a1c:	bne	1a128 <__assert_fail@plt+0x8e2c>
   19a20:	ldr	r3, [fp, #-16]
   19a24:	cmp	r3, #0
   19a28:	bne	1a130 <__assert_fail@plt+0x8e34>
   19a2c:	mov	r3, #1
   19a30:	strb	r3, [fp, #-42]	; 0xffffffd6
   19a34:	ldr	r3, [fp, #4]
   19a38:	cmp	r3, #2
   19a3c:	bne	1a138 <__assert_fail@plt+0x8e3c>
   19a40:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19a44:	cmp	r3, #0
   19a48:	beq	1a138 <__assert_fail@plt+0x8e3c>
   19a4c:	b	1a5c4 <__assert_fail@plt+0x92c8>
   19a50:	mov	r3, #1
   19a54:	strb	r3, [fp, #-36]	; 0xffffffdc
   19a58:	mov	r3, #1
   19a5c:	strb	r3, [fp, #-42]	; 0xffffffd6
   19a60:	ldr	r3, [fp, #4]
   19a64:	cmp	r3, #2
   19a68:	bne	1a140 <__assert_fail@plt+0x8e44>
   19a6c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19a70:	cmp	r3, #0
   19a74:	bne	1a5a8 <__assert_fail@plt+0x92ac>
   19a78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a7c:	cmp	r3, #0
   19a80:	beq	19aa0 <__assert_fail@plt+0x87a4>
   19a84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19a88:	cmp	r3, #0
   19a8c:	bne	19aa0 <__assert_fail@plt+0x87a4>
   19a90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a94:	str	r3, [fp, #-24]	; 0xffffffe8
   19a98:	mov	r3, #0
   19a9c:	str	r3, [fp, #-92]	; 0xffffffa4
   19aa0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19aa4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19aa8:	cmp	r2, r3
   19aac:	bcs	19ac4 <__assert_fail@plt+0x87c8>
   19ab0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ab8:	add	r3, r2, r3
   19abc:	mov	r2, #39	; 0x27
   19ac0:	strb	r2, [r3]
   19ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ac8:	add	r3, r3, #1
   19acc:	str	r3, [fp, #-20]	; 0xffffffec
   19ad0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ad4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ad8:	cmp	r2, r3
   19adc:	bcs	19af4 <__assert_fail@plt+0x87f8>
   19ae0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ae8:	add	r3, r2, r3
   19aec:	mov	r2, #92	; 0x5c
   19af0:	strb	r2, [r3]
   19af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19af8:	add	r3, r3, #1
   19afc:	str	r3, [fp, #-20]	; 0xffffffec
   19b00:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19b08:	cmp	r2, r3
   19b0c:	bcs	19b24 <__assert_fail@plt+0x8828>
   19b10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19b14:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b18:	add	r3, r2, r3
   19b1c:	mov	r2, #39	; 0x27
   19b20:	strb	r2, [r3]
   19b24:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b28:	add	r3, r3, #1
   19b2c:	str	r3, [fp, #-20]	; 0xffffffec
   19b30:	mov	r3, #0
   19b34:	strb	r3, [fp, #-35]	; 0xffffffdd
   19b38:	b	1a140 <__assert_fail@plt+0x8e44>
   19b3c:	mov	r3, #1
   19b40:	strb	r3, [fp, #-42]	; 0xffffffd6
   19b44:	b	1a14c <__assert_fail@plt+0x8e50>
   19b48:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   19b4c:	cmp	r3, #0
   19b50:	beq	19b90 <__assert_fail@plt+0x8894>
   19b54:	mov	r3, #1
   19b58:	str	r3, [fp, #-48]	; 0xffffffd0
   19b5c:	bl	11164 <__ctype_b_loc@plt>
   19b60:	mov	r3, r0
   19b64:	ldr	r2, [r3]
   19b68:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19b6c:	lsl	r3, r3, #1
   19b70:	add	r3, r2, r3
   19b74:	ldrh	r3, [r3]
   19b78:	and	r3, r3, #16384	; 0x4000
   19b7c:	cmp	r3, #0
   19b80:	movne	r3, #1
   19b84:	moveq	r3, #0
   19b88:	strb	r3, [fp, #-49]	; 0xffffffcf
   19b8c:	b	19ddc <__assert_fail@plt+0x8ae0>
   19b90:	sub	r3, fp, #76	; 0x4c
   19b94:	mov	r2, #8
   19b98:	mov	r1, #0
   19b9c:	mov	r0, r3
   19ba0:	bl	111dc <memset@plt>
   19ba4:	mov	r3, #0
   19ba8:	str	r3, [fp, #-48]	; 0xffffffd0
   19bac:	mov	r3, #1
   19bb0:	strb	r3, [fp, #-49]	; 0xffffffcf
   19bb4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19bb8:	cmn	r3, #1
   19bbc:	bne	19bcc <__assert_fail@plt+0x88d0>
   19bc0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19bc4:	bl	11188 <strlen@plt>
   19bc8:	str	r0, [fp, #-100]	; 0xffffff9c
   19bcc:	ldr	r2, [fp, #-16]
   19bd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19bd4:	add	r3, r2, r3
   19bd8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19bdc:	add	r1, r2, r3
   19be0:	ldr	r2, [fp, #-16]
   19be4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19be8:	add	r3, r2, r3
   19bec:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19bf0:	sub	r2, r2, r3
   19bf4:	sub	r3, fp, #76	; 0x4c
   19bf8:	sub	r0, fp, #80	; 0x50
   19bfc:	bl	1e120 <__assert_fail@plt+0xce24>
   19c00:	str	r0, [fp, #-64]	; 0xffffffc0
   19c04:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19c08:	cmp	r3, #0
   19c0c:	beq	19dd0 <__assert_fail@plt+0x8ad4>
   19c10:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19c14:	cmn	r3, #1
   19c18:	bne	19c28 <__assert_fail@plt+0x892c>
   19c1c:	mov	r3, #0
   19c20:	strb	r3, [fp, #-49]	; 0xffffffcf
   19c24:	b	19ddc <__assert_fail@plt+0x8ae0>
   19c28:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19c2c:	cmn	r3, #2
   19c30:	bne	19c88 <__assert_fail@plt+0x898c>
   19c34:	mov	r3, #0
   19c38:	strb	r3, [fp, #-49]	; 0xffffffcf
   19c3c:	b	19c4c <__assert_fail@plt+0x8950>
   19c40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19c44:	add	r3, r3, #1
   19c48:	str	r3, [fp, #-48]	; 0xffffffd0
   19c4c:	ldr	r2, [fp, #-16]
   19c50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19c54:	add	r3, r2, r3
   19c58:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19c5c:	cmp	r2, r3
   19c60:	bls	19dd8 <__assert_fail@plt+0x8adc>
   19c64:	ldr	r2, [fp, #-16]
   19c68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19c6c:	add	r3, r2, r3
   19c70:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19c74:	add	r3, r2, r3
   19c78:	ldrb	r3, [r3]
   19c7c:	cmp	r3, #0
   19c80:	bne	19c40 <__assert_fail@plt+0x8944>
   19c84:	b	19dd8 <__assert_fail@plt+0x8adc>
   19c88:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19c8c:	cmp	r3, #0
   19c90:	beq	19d84 <__assert_fail@plt+0x8a88>
   19c94:	ldr	r3, [fp, #4]
   19c98:	cmp	r3, #2
   19c9c:	bne	19d84 <__assert_fail@plt+0x8a88>
   19ca0:	mov	r3, #1
   19ca4:	str	r3, [fp, #-56]	; 0xffffffc8
   19ca8:	b	19d74 <__assert_fail@plt+0x8a78>
   19cac:	ldr	r2, [fp, #-16]
   19cb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19cb4:	add	r2, r2, r3
   19cb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19cbc:	add	r3, r2, r3
   19cc0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19cc4:	add	r3, r2, r3
   19cc8:	ldrb	r3, [r3]
   19ccc:	sub	r3, r3, #91	; 0x5b
   19cd0:	cmp	r3, #33	; 0x21
   19cd4:	ldrls	pc, [pc, r3, lsl #2]
   19cd8:	b	19d64 <__assert_fail@plt+0x8a68>
   19cdc:	andeq	sl, r1, r4, asr #11
   19ce0:	andeq	sl, r1, r4, asr #11
   19ce4:	andeq	r9, r1, r4, ror #26
   19ce8:	andeq	sl, r1, r4, asr #11
   19cec:	andeq	r9, r1, r4, ror #26
   19cf0:	andeq	sl, r1, r4, asr #11
   19cf4:	andeq	r9, r1, r4, ror #26
   19cf8:	andeq	r9, r1, r4, ror #26
   19cfc:	andeq	r9, r1, r4, ror #26
   19d00:	andeq	r9, r1, r4, ror #26
   19d04:	andeq	r9, r1, r4, ror #26
   19d08:	andeq	r9, r1, r4, ror #26
   19d0c:	andeq	r9, r1, r4, ror #26
   19d10:	andeq	r9, r1, r4, ror #26
   19d14:	andeq	r9, r1, r4, ror #26
   19d18:	andeq	r9, r1, r4, ror #26
   19d1c:	andeq	r9, r1, r4, ror #26
   19d20:	andeq	r9, r1, r4, ror #26
   19d24:	andeq	r9, r1, r4, ror #26
   19d28:	andeq	r9, r1, r4, ror #26
   19d2c:	andeq	r9, r1, r4, ror #26
   19d30:	andeq	r9, r1, r4, ror #26
   19d34:	andeq	r9, r1, r4, ror #26
   19d38:	andeq	r9, r1, r4, ror #26
   19d3c:	andeq	r9, r1, r4, ror #26
   19d40:	andeq	r9, r1, r4, ror #26
   19d44:	andeq	r9, r1, r4, ror #26
   19d48:	andeq	r9, r1, r4, ror #26
   19d4c:	andeq	r9, r1, r4, ror #26
   19d50:	andeq	r9, r1, r4, ror #26
   19d54:	andeq	r9, r1, r4, ror #26
   19d58:	andeq	r9, r1, r4, ror #26
   19d5c:	andeq	r9, r1, r4, ror #26
   19d60:	andeq	sl, r1, r4, asr #11
   19d64:	nop	{0}
   19d68:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19d6c:	add	r3, r3, #1
   19d70:	str	r3, [fp, #-56]	; 0xffffffc8
   19d74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19d78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19d7c:	cmp	r2, r3
   19d80:	bcc	19cac <__assert_fail@plt+0x89b0>
   19d84:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19d88:	mov	r0, r3
   19d8c:	bl	110a4 <iswprint@plt>
   19d90:	mov	r3, r0
   19d94:	cmp	r3, #0
   19d98:	bne	19da4 <__assert_fail@plt+0x8aa8>
   19d9c:	mov	r3, #0
   19da0:	strb	r3, [fp, #-49]	; 0xffffffcf
   19da4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19da8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19dac:	add	r3, r2, r3
   19db0:	str	r3, [fp, #-48]	; 0xffffffd0
   19db4:	sub	r3, fp, #76	; 0x4c
   19db8:	mov	r0, r3
   19dbc:	bl	11050 <mbsinit@plt>
   19dc0:	mov	r3, r0
   19dc4:	cmp	r3, #0
   19dc8:	beq	19bcc <__assert_fail@plt+0x88d0>
   19dcc:	b	19ddc <__assert_fail@plt+0x8ae0>
   19dd0:	nop	{0}
   19dd4:	b	19ddc <__assert_fail@plt+0x8ae0>
   19dd8:	nop	{0}
   19ddc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19de0:	strb	r3, [fp, #-42]	; 0xffffffd6
   19de4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19de8:	cmp	r3, #1
   19dec:	bhi	19e10 <__assert_fail@plt+0x8b14>
   19df0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19df4:	cmp	r3, #0
   19df8:	beq	1a148 <__assert_fail@plt+0x8e4c>
   19dfc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19e00:	eor	r3, r3, #1
   19e04:	uxtb	r3, r3
   19e08:	cmp	r3, #0
   19e0c:	beq	1a148 <__assert_fail@plt+0x8e4c>
   19e10:	ldr	r2, [fp, #-16]
   19e14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19e18:	add	r3, r2, r3
   19e1c:	str	r3, [fp, #-68]	; 0xffffffbc
   19e20:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19e24:	cmp	r3, #0
   19e28:	beq	19fdc <__assert_fail@plt+0x8ce0>
   19e2c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19e30:	eor	r3, r3, #1
   19e34:	uxtb	r3, r3
   19e38:	cmp	r3, #0
   19e3c:	beq	19fdc <__assert_fail@plt+0x8ce0>
   19e40:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19e44:	cmp	r3, #0
   19e48:	bne	1a5b0 <__assert_fail@plt+0x92b4>
   19e4c:	mov	r3, #1
   19e50:	strb	r3, [fp, #-41]	; 0xffffffd7
   19e54:	ldr	r3, [fp, #4]
   19e58:	cmp	r3, #2
   19e5c:	bne	19f0c <__assert_fail@plt+0x8c10>
   19e60:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19e64:	eor	r3, r3, #1
   19e68:	uxtb	r3, r3
   19e6c:	cmp	r3, #0
   19e70:	beq	19f0c <__assert_fail@plt+0x8c10>
   19e74:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e7c:	cmp	r2, r3
   19e80:	bcs	19e98 <__assert_fail@plt+0x8b9c>
   19e84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e88:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e8c:	add	r3, r2, r3
   19e90:	mov	r2, #39	; 0x27
   19e94:	strb	r2, [r3]
   19e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e9c:	add	r3, r3, #1
   19ea0:	str	r3, [fp, #-20]	; 0xffffffec
   19ea4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ea8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19eac:	cmp	r2, r3
   19eb0:	bcs	19ec8 <__assert_fail@plt+0x8bcc>
   19eb4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ebc:	add	r3, r2, r3
   19ec0:	mov	r2, #36	; 0x24
   19ec4:	strb	r2, [r3]
   19ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ecc:	add	r3, r3, #1
   19ed0:	str	r3, [fp, #-20]	; 0xffffffec
   19ed4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ed8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19edc:	cmp	r2, r3
   19ee0:	bcs	19ef8 <__assert_fail@plt+0x8bfc>
   19ee4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19eec:	add	r3, r2, r3
   19ef0:	mov	r2, #39	; 0x27
   19ef4:	strb	r2, [r3]
   19ef8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19efc:	add	r3, r3, #1
   19f00:	str	r3, [fp, #-20]	; 0xffffffec
   19f04:	mov	r3, #1
   19f08:	strb	r3, [fp, #-35]	; 0xffffffdd
   19f0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19f14:	cmp	r2, r3
   19f18:	bcs	19f30 <__assert_fail@plt+0x8c34>
   19f1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f24:	add	r3, r2, r3
   19f28:	mov	r2, #92	; 0x5c
   19f2c:	strb	r2, [r3]
   19f30:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f34:	add	r3, r3, #1
   19f38:	str	r3, [fp, #-20]	; 0xffffffec
   19f3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19f44:	cmp	r2, r3
   19f48:	bcs	19f70 <__assert_fail@plt+0x8c74>
   19f4c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19f50:	lsr	r3, r3, #6
   19f54:	uxtb	r2, r3
   19f58:	ldr	r1, [fp, #-88]	; 0xffffffa8
   19f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f60:	add	r3, r1, r3
   19f64:	add	r2, r2, #48	; 0x30
   19f68:	uxtb	r2, r2
   19f6c:	strb	r2, [r3]
   19f70:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f74:	add	r3, r3, #1
   19f78:	str	r3, [fp, #-20]	; 0xffffffec
   19f7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19f84:	cmp	r2, r3
   19f88:	bcs	19fb8 <__assert_fail@plt+0x8cbc>
   19f8c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19f90:	lsr	r3, r3, #3
   19f94:	uxtb	r3, r3
   19f98:	and	r3, r3, #7
   19f9c:	uxtb	r2, r3
   19fa0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   19fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19fa8:	add	r3, r1, r3
   19fac:	add	r2, r2, #48	; 0x30
   19fb0:	uxtb	r2, r2
   19fb4:	strb	r2, [r3]
   19fb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19fbc:	add	r3, r3, #1
   19fc0:	str	r3, [fp, #-20]	; 0xffffffec
   19fc4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19fc8:	and	r3, r3, #7
   19fcc:	uxtb	r3, r3
   19fd0:	add	r3, r3, #48	; 0x30
   19fd4:	strb	r3, [fp, #-38]	; 0xffffffda
   19fd8:	b	1a020 <__assert_fail@plt+0x8d24>
   19fdc:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19fe0:	cmp	r3, #0
   19fe4:	beq	1a020 <__assert_fail@plt+0x8d24>
   19fe8:	ldr	r2, [fp, #-20]	; 0xffffffec
   19fec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ff0:	cmp	r2, r3
   19ff4:	bcs	1a00c <__assert_fail@plt+0x8d10>
   19ff8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ffc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a000:	add	r3, r2, r3
   1a004:	mov	r2, #92	; 0x5c
   1a008:	strb	r2, [r3]
   1a00c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a010:	add	r3, r3, #1
   1a014:	str	r3, [fp, #-20]	; 0xffffffec
   1a018:	mov	r3, #0
   1a01c:	strb	r3, [fp, #-40]	; 0xffffffd8
   1a020:	ldr	r3, [fp, #-16]
   1a024:	add	r3, r3, #1
   1a028:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a02c:	cmp	r2, r3
   1a030:	bls	1a110 <__assert_fail@plt+0x8e14>
   1a034:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a038:	cmp	r3, #0
   1a03c:	beq	1a0bc <__assert_fail@plt+0x8dc0>
   1a040:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1a044:	eor	r3, r3, #1
   1a048:	uxtb	r3, r3
   1a04c:	cmp	r3, #0
   1a050:	beq	1a0bc <__assert_fail@plt+0x8dc0>
   1a054:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a058:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a05c:	cmp	r2, r3
   1a060:	bcs	1a078 <__assert_fail@plt+0x8d7c>
   1a064:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a06c:	add	r3, r2, r3
   1a070:	mov	r2, #39	; 0x27
   1a074:	strb	r2, [r3]
   1a078:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a07c:	add	r3, r3, #1
   1a080:	str	r3, [fp, #-20]	; 0xffffffec
   1a084:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a088:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a08c:	cmp	r2, r3
   1a090:	bcs	1a0a8 <__assert_fail@plt+0x8dac>
   1a094:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a09c:	add	r3, r2, r3
   1a0a0:	mov	r2, #39	; 0x27
   1a0a4:	strb	r2, [r3]
   1a0a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0ac:	add	r3, r3, #1
   1a0b0:	str	r3, [fp, #-20]	; 0xffffffec
   1a0b4:	mov	r3, #0
   1a0b8:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a0bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a0c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a0c4:	cmp	r2, r3
   1a0c8:	bcs	1a0e0 <__assert_fail@plt+0x8de4>
   1a0cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a0d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0d4:	add	r3, r2, r3
   1a0d8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1a0dc:	strb	r2, [r3]
   1a0e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0e4:	add	r3, r3, #1
   1a0e8:	str	r3, [fp, #-20]	; 0xffffffec
   1a0ec:	ldr	r3, [fp, #-16]
   1a0f0:	add	r3, r3, #1
   1a0f4:	str	r3, [fp, #-16]
   1a0f8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a0fc:	ldr	r3, [fp, #-16]
   1a100:	add	r3, r2, r3
   1a104:	ldrb	r3, [r3]
   1a108:	strb	r3, [fp, #-38]	; 0xffffffda
   1a10c:	b	19e20 <__assert_fail@plt+0x8b24>
   1a110:	nop	{0}
   1a114:	b	1a2ec <__assert_fail@plt+0x8ff0>
   1a118:	nop	{0}
   1a11c:	b	1a14c <__assert_fail@plt+0x8e50>
   1a120:	nop	{0}
   1a124:	b	1a14c <__assert_fail@plt+0x8e50>
   1a128:	nop	{0}
   1a12c:	b	1a14c <__assert_fail@plt+0x8e50>
   1a130:	nop	{0}
   1a134:	b	1a14c <__assert_fail@plt+0x8e50>
   1a138:	nop	{0}
   1a13c:	b	1a14c <__assert_fail@plt+0x8e50>
   1a140:	nop	{0}
   1a144:	b	1a14c <__assert_fail@plt+0x8e50>
   1a148:	nop	{0}
   1a14c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a150:	eor	r3, r3, #1
   1a154:	uxtb	r3, r3
   1a158:	cmp	r3, #0
   1a15c:	bne	1a16c <__assert_fail@plt+0x8e70>
   1a160:	ldr	r3, [fp, #4]
   1a164:	cmp	r3, #2
   1a168:	bne	1a180 <__assert_fail@plt+0x8e84>
   1a16c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a170:	eor	r3, r3, #1
   1a174:	uxtb	r3, r3
   1a178:	cmp	r3, #0
   1a17c:	bne	1a1c0 <__assert_fail@plt+0x8ec4>
   1a180:	ldr	r3, [fp, #12]
   1a184:	cmp	r3, #0
   1a188:	beq	1a1c0 <__assert_fail@plt+0x8ec4>
   1a18c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1a190:	lsr	r3, r3, #5
   1a194:	uxtb	r3, r3
   1a198:	lsl	r3, r3, #2
   1a19c:	ldr	r2, [fp, #12]
   1a1a0:	add	r3, r2, r3
   1a1a4:	ldr	r2, [r3]
   1a1a8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1a1ac:	and	r3, r3, #31
   1a1b0:	lsr	r3, r2, r3
   1a1b4:	and	r3, r3, #1
   1a1b8:	cmp	r3, #0
   1a1bc:	bne	1a1d4 <__assert_fail@plt+0x8ed8>
   1a1c0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1a1c4:	eor	r3, r3, #1
   1a1c8:	uxtb	r3, r3
   1a1cc:	cmp	r3, #0
   1a1d0:	bne	1a2e8 <__assert_fail@plt+0x8fec>
   1a1d4:	nop	{0}
   1a1d8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a1dc:	cmp	r3, #0
   1a1e0:	bne	1a5b8 <__assert_fail@plt+0x92bc>
   1a1e4:	mov	r3, #1
   1a1e8:	strb	r3, [fp, #-41]	; 0xffffffd7
   1a1ec:	ldr	r3, [fp, #4]
   1a1f0:	cmp	r3, #2
   1a1f4:	bne	1a2a4 <__assert_fail@plt+0x8fa8>
   1a1f8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a1fc:	eor	r3, r3, #1
   1a200:	uxtb	r3, r3
   1a204:	cmp	r3, #0
   1a208:	beq	1a2a4 <__assert_fail@plt+0x8fa8>
   1a20c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a210:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a214:	cmp	r2, r3
   1a218:	bcs	1a230 <__assert_fail@plt+0x8f34>
   1a21c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a220:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a224:	add	r3, r2, r3
   1a228:	mov	r2, #39	; 0x27
   1a22c:	strb	r2, [r3]
   1a230:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a234:	add	r3, r3, #1
   1a238:	str	r3, [fp, #-20]	; 0xffffffec
   1a23c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a240:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a244:	cmp	r2, r3
   1a248:	bcs	1a260 <__assert_fail@plt+0x8f64>
   1a24c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a250:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a254:	add	r3, r2, r3
   1a258:	mov	r2, #36	; 0x24
   1a25c:	strb	r2, [r3]
   1a260:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a264:	add	r3, r3, #1
   1a268:	str	r3, [fp, #-20]	; 0xffffffec
   1a26c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a270:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a274:	cmp	r2, r3
   1a278:	bcs	1a290 <__assert_fail@plt+0x8f94>
   1a27c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a280:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a284:	add	r3, r2, r3
   1a288:	mov	r2, #39	; 0x27
   1a28c:	strb	r2, [r3]
   1a290:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a294:	add	r3, r3, #1
   1a298:	str	r3, [fp, #-20]	; 0xffffffec
   1a29c:	mov	r3, #1
   1a2a0:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a2a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a2a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a2ac:	cmp	r2, r3
   1a2b0:	bcs	1a2c8 <__assert_fail@plt+0x8fcc>
   1a2b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a2b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2bc:	add	r3, r2, r3
   1a2c0:	mov	r2, #92	; 0x5c
   1a2c4:	strb	r2, [r3]
   1a2c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2cc:	add	r3, r3, #1
   1a2d0:	str	r3, [fp, #-20]	; 0xffffffec
   1a2d4:	b	1a2ec <__assert_fail@plt+0x8ff0>
   1a2d8:	nop	{0}
   1a2dc:	b	1a2ec <__assert_fail@plt+0x8ff0>
   1a2e0:	nop	{0}
   1a2e4:	b	1a2ec <__assert_fail@plt+0x8ff0>
   1a2e8:	nop	{0}
   1a2ec:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a2f0:	cmp	r3, #0
   1a2f4:	beq	1a374 <__assert_fail@plt+0x9078>
   1a2f8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1a2fc:	eor	r3, r3, #1
   1a300:	uxtb	r3, r3
   1a304:	cmp	r3, #0
   1a308:	beq	1a374 <__assert_fail@plt+0x9078>
   1a30c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a310:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a314:	cmp	r2, r3
   1a318:	bcs	1a330 <__assert_fail@plt+0x9034>
   1a31c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a320:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a324:	add	r3, r2, r3
   1a328:	mov	r2, #39	; 0x27
   1a32c:	strb	r2, [r3]
   1a330:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a334:	add	r3, r3, #1
   1a338:	str	r3, [fp, #-20]	; 0xffffffec
   1a33c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a340:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a344:	cmp	r2, r3
   1a348:	bcs	1a360 <__assert_fail@plt+0x9064>
   1a34c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a350:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a354:	add	r3, r2, r3
   1a358:	mov	r2, #39	; 0x27
   1a35c:	strb	r2, [r3]
   1a360:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a364:	add	r3, r3, #1
   1a368:	str	r3, [fp, #-20]	; 0xffffffec
   1a36c:	mov	r3, #0
   1a370:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a374:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a378:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a37c:	cmp	r2, r3
   1a380:	bcs	1a398 <__assert_fail@plt+0x909c>
   1a384:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a38c:	add	r3, r2, r3
   1a390:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1a394:	strb	r2, [r3]
   1a398:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a39c:	add	r3, r3, #1
   1a3a0:	str	r3, [fp, #-20]	; 0xffffffec
   1a3a4:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1a3a8:	eor	r3, r3, #1
   1a3ac:	uxtb	r3, r3
   1a3b0:	cmp	r3, #0
   1a3b4:	beq	1a3c0 <__assert_fail@plt+0x90c4>
   1a3b8:	mov	r3, #0
   1a3bc:	strb	r3, [fp, #-37]	; 0xffffffdb
   1a3c0:	ldr	r3, [fp, #-16]
   1a3c4:	add	r3, r3, #1
   1a3c8:	str	r3, [fp, #-16]
   1a3cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a3d0:	cmn	r3, #1
   1a3d4:	bne	1a3fc <__assert_fail@plt+0x9100>
   1a3d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a3dc:	ldr	r3, [fp, #-16]
   1a3e0:	add	r3, r2, r3
   1a3e4:	ldrb	r3, [r3]
   1a3e8:	cmp	r3, #0
   1a3ec:	movne	r3, #1
   1a3f0:	moveq	r3, #0
   1a3f4:	uxtb	r3, r3
   1a3f8:	b	1a414 <__assert_fail@plt+0x9118>
   1a3fc:	ldr	r2, [fp, #-16]
   1a400:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a404:	cmp	r2, r3
   1a408:	movne	r3, #1
   1a40c:	moveq	r3, #0
   1a410:	uxtb	r3, r3
   1a414:	cmp	r3, #0
   1a418:	bne	19234 <__assert_fail@plt+0x7f38>
   1a41c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a420:	cmp	r3, #0
   1a424:	bne	1a440 <__assert_fail@plt+0x9144>
   1a428:	ldr	r3, [fp, #4]
   1a42c:	cmp	r3, #2
   1a430:	bne	1a440 <__assert_fail@plt+0x9144>
   1a434:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a438:	cmp	r3, #0
   1a43c:	bne	1a5c0 <__assert_fail@plt+0x92c4>
   1a440:	ldr	r3, [fp, #4]
   1a444:	cmp	r3, #2
   1a448:	bne	1a4e8 <__assert_fail@plt+0x91ec>
   1a44c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a450:	eor	r3, r3, #1
   1a454:	uxtb	r3, r3
   1a458:	cmp	r3, #0
   1a45c:	beq	1a4e8 <__assert_fail@plt+0x91ec>
   1a460:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   1a464:	cmp	r3, #0
   1a468:	beq	1a4e8 <__assert_fail@plt+0x91ec>
   1a46c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1a470:	cmp	r3, #0
   1a474:	beq	1a4bc <__assert_fail@plt+0x91c0>
   1a478:	ldr	r3, [fp, #20]
   1a47c:	str	r3, [sp, #16]
   1a480:	ldr	r3, [fp, #16]
   1a484:	str	r3, [sp, #12]
   1a488:	ldr	r3, [fp, #12]
   1a48c:	str	r3, [sp, #8]
   1a490:	ldr	r3, [fp, #8]
   1a494:	str	r3, [sp, #4]
   1a498:	mov	r3, #5
   1a49c:	str	r3, [sp]
   1a4a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a4a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a4a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a4ac:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a4b0:	bl	18f6c <__assert_fail@plt+0x7c70>
   1a4b4:	mov	r3, r0
   1a4b8:	b	1a628 <__assert_fail@plt+0x932c>
   1a4bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a4c0:	cmp	r3, #0
   1a4c4:	bne	1a4e8 <__assert_fail@plt+0x91ec>
   1a4c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a4cc:	cmp	r3, #0
   1a4d0:	beq	1a4e8 <__assert_fail@plt+0x91ec>
   1a4d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a4d8:	str	r3, [fp, #-92]	; 0xffffffa4
   1a4dc:	mov	r3, #0
   1a4e0:	str	r3, [fp, #-20]	; 0xffffffec
   1a4e4:	b	19000 <__assert_fail@plt+0x7d04>
   1a4e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a4ec:	cmp	r3, #0
   1a4f0:	beq	1a55c <__assert_fail@plt+0x9260>
   1a4f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a4f8:	eor	r3, r3, #1
   1a4fc:	uxtb	r3, r3
   1a500:	cmp	r3, #0
   1a504:	beq	1a55c <__assert_fail@plt+0x9260>
   1a508:	b	1a54c <__assert_fail@plt+0x9250>
   1a50c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a510:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a514:	cmp	r2, r3
   1a518:	bcs	1a534 <__assert_fail@plt+0x9238>
   1a51c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a520:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a524:	add	r3, r2, r3
   1a528:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a52c:	ldrb	r2, [r2]
   1a530:	strb	r2, [r3]
   1a534:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a538:	add	r3, r3, #1
   1a53c:	str	r3, [fp, #-20]	; 0xffffffec
   1a540:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a544:	add	r3, r3, #1
   1a548:	str	r3, [fp, #-28]	; 0xffffffe4
   1a54c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a550:	ldrb	r3, [r3]
   1a554:	cmp	r3, #0
   1a558:	bne	1a50c <__assert_fail@plt+0x9210>
   1a55c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a560:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a564:	cmp	r2, r3
   1a568:	bcs	1a580 <__assert_fail@plt+0x9284>
   1a56c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a570:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a574:	add	r3, r2, r3
   1a578:	mov	r2, #0
   1a57c:	strb	r2, [r3]
   1a580:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a584:	b	1a628 <__assert_fail@plt+0x932c>
   1a588:	nop	{0}
   1a58c:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1a590:	nop	{0}
   1a594:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1a598:	nop	{0}
   1a59c:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1a5a0:	nop	{0}
   1a5a4:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1a5a8:	nop	{0}
   1a5ac:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1a5b0:	nop	{0}
   1a5b4:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1a5b8:	nop	{0}
   1a5bc:	b	1a5c4 <__assert_fail@plt+0x92c8>
   1a5c0:	nop	{0}
   1a5c4:	ldr	r3, [fp, #4]
   1a5c8:	cmp	r3, #2
   1a5cc:	bne	1a5e4 <__assert_fail@plt+0x92e8>
   1a5d0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a5d4:	cmp	r3, #0
   1a5d8:	beq	1a5e4 <__assert_fail@plt+0x92e8>
   1a5dc:	mov	r3, #4
   1a5e0:	str	r3, [fp, #4]
   1a5e4:	ldr	r3, [fp, #8]
   1a5e8:	bic	r3, r3, #2
   1a5ec:	ldr	r2, [fp, #20]
   1a5f0:	str	r2, [sp, #16]
   1a5f4:	ldr	r2, [fp, #16]
   1a5f8:	str	r2, [sp, #12]
   1a5fc:	mov	r2, #0
   1a600:	str	r2, [sp, #8]
   1a604:	str	r3, [sp, #4]
   1a608:	ldr	r3, [fp, #4]
   1a60c:	str	r3, [sp]
   1a610:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a614:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a618:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1a61c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a620:	bl	18f6c <__assert_fail@plt+0x7c70>
   1a624:	mov	r3, r0
   1a628:	mov	r0, r3
   1a62c:	sub	sp, fp, #8
   1a630:	ldr	r4, [sp]
   1a634:	ldr	fp, [sp, #4]
   1a638:	add	sp, sp, #8
   1a63c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a640:	str	fp, [sp, #-8]!
   1a644:	str	lr, [sp, #4]
   1a648:	add	fp, sp, #4
   1a64c:	sub	sp, sp, #56	; 0x38
   1a650:	str	r0, [fp, #-24]	; 0xffffffe8
   1a654:	str	r1, [fp, #-28]	; 0xffffffe4
   1a658:	str	r2, [fp, #-32]	; 0xffffffe0
   1a65c:	str	r3, [fp, #-36]	; 0xffffffdc
   1a660:	ldr	r3, [fp, #4]
   1a664:	cmp	r3, #0
   1a668:	beq	1a674 <__assert_fail@plt+0x9378>
   1a66c:	ldr	r3, [fp, #4]
   1a670:	b	1a67c <__assert_fail@plt+0x9380>
   1a674:	movw	r3, #4548	; 0x11c4
   1a678:	movt	r3, #3
   1a67c:	str	r3, [fp, #-8]
   1a680:	bl	111c4 <__errno_location@plt>
   1a684:	mov	r3, r0
   1a688:	ldr	r3, [r3]
   1a68c:	str	r3, [fp, #-12]
   1a690:	ldr	r3, [fp, #-8]
   1a694:	ldr	r3, [r3]
   1a698:	ldr	r2, [fp, #-8]
   1a69c:	ldr	r2, [r2, #4]
   1a6a0:	ldr	r1, [fp, #-8]
   1a6a4:	add	r1, r1, #8
   1a6a8:	ldr	r0, [fp, #-8]
   1a6ac:	ldr	r0, [r0, #40]	; 0x28
   1a6b0:	ldr	ip, [fp, #-8]
   1a6b4:	ldr	ip, [ip, #44]	; 0x2c
   1a6b8:	str	ip, [sp, #16]
   1a6bc:	str	r0, [sp, #12]
   1a6c0:	str	r1, [sp, #8]
   1a6c4:	str	r2, [sp, #4]
   1a6c8:	str	r3, [sp]
   1a6cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a6d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a6d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a6d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a6dc:	bl	18f6c <__assert_fail@plt+0x7c70>
   1a6e0:	str	r0, [fp, #-16]
   1a6e4:	bl	111c4 <__errno_location@plt>
   1a6e8:	mov	r2, r0
   1a6ec:	ldr	r3, [fp, #-12]
   1a6f0:	str	r3, [r2]
   1a6f4:	ldr	r3, [fp, #-16]
   1a6f8:	mov	r0, r3
   1a6fc:	sub	sp, fp, #4
   1a700:	ldr	fp, [sp]
   1a704:	add	sp, sp, #4
   1a708:	pop	{pc}		; (ldr pc, [sp], #4)
   1a70c:	str	fp, [sp, #-8]!
   1a710:	str	lr, [sp, #4]
   1a714:	add	fp, sp, #4
   1a718:	sub	sp, sp, #16
   1a71c:	str	r0, [fp, #-8]
   1a720:	str	r1, [fp, #-12]
   1a724:	str	r2, [fp, #-16]
   1a728:	ldr	r3, [fp, #-16]
   1a72c:	mov	r2, #0
   1a730:	ldr	r1, [fp, #-12]
   1a734:	ldr	r0, [fp, #-8]
   1a738:	bl	1a754 <__assert_fail@plt+0x9458>
   1a73c:	mov	r3, r0
   1a740:	mov	r0, r3
   1a744:	sub	sp, fp, #4
   1a748:	ldr	fp, [sp]
   1a74c:	add	sp, sp, #4
   1a750:	pop	{pc}		; (ldr pc, [sp], #4)
   1a754:	str	fp, [sp, #-8]!
   1a758:	str	lr, [sp, #4]
   1a75c:	add	fp, sp, #4
   1a760:	sub	sp, sp, #64	; 0x40
   1a764:	str	r0, [fp, #-32]	; 0xffffffe0
   1a768:	str	r1, [fp, #-36]	; 0xffffffdc
   1a76c:	str	r2, [fp, #-40]	; 0xffffffd8
   1a770:	str	r3, [fp, #-44]	; 0xffffffd4
   1a774:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a778:	cmp	r3, #0
   1a77c:	beq	1a788 <__assert_fail@plt+0x948c>
   1a780:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a784:	b	1a790 <__assert_fail@plt+0x9494>
   1a788:	movw	r3, #4548	; 0x11c4
   1a78c:	movt	r3, #3
   1a790:	str	r3, [fp, #-8]
   1a794:	bl	111c4 <__errno_location@plt>
   1a798:	mov	r3, r0
   1a79c:	ldr	r3, [r3]
   1a7a0:	str	r3, [fp, #-12]
   1a7a4:	ldr	r3, [fp, #-8]
   1a7a8:	ldr	r3, [r3, #4]
   1a7ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a7b0:	cmp	r2, #0
   1a7b4:	moveq	r2, #1
   1a7b8:	movne	r2, #0
   1a7bc:	uxtb	r2, r2
   1a7c0:	orr	r3, r3, r2
   1a7c4:	str	r3, [fp, #-16]
   1a7c8:	ldr	r3, [fp, #-8]
   1a7cc:	ldr	r3, [r3]
   1a7d0:	ldr	r2, [fp, #-8]
   1a7d4:	add	r2, r2, #8
   1a7d8:	ldr	r1, [fp, #-8]
   1a7dc:	ldr	r1, [r1, #40]	; 0x28
   1a7e0:	ldr	r0, [fp, #-8]
   1a7e4:	ldr	r0, [r0, #44]	; 0x2c
   1a7e8:	str	r0, [sp, #16]
   1a7ec:	str	r1, [sp, #12]
   1a7f0:	str	r2, [sp, #8]
   1a7f4:	ldr	r2, [fp, #-16]
   1a7f8:	str	r2, [sp, #4]
   1a7fc:	str	r3, [sp]
   1a800:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a804:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a808:	mov	r1, #0
   1a80c:	mov	r0, #0
   1a810:	bl	18f6c <__assert_fail@plt+0x7c70>
   1a814:	mov	r3, r0
   1a818:	add	r3, r3, #1
   1a81c:	str	r3, [fp, #-20]	; 0xffffffec
   1a820:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a824:	bl	1bd50 <__assert_fail@plt+0xaa54>
   1a828:	mov	r3, r0
   1a82c:	str	r3, [fp, #-24]	; 0xffffffe8
   1a830:	ldr	r3, [fp, #-8]
   1a834:	ldr	r3, [r3]
   1a838:	ldr	r2, [fp, #-8]
   1a83c:	add	r2, r2, #8
   1a840:	ldr	r1, [fp, #-8]
   1a844:	ldr	r1, [r1, #40]	; 0x28
   1a848:	ldr	r0, [fp, #-8]
   1a84c:	ldr	r0, [r0, #44]	; 0x2c
   1a850:	str	r0, [sp, #16]
   1a854:	str	r1, [sp, #12]
   1a858:	str	r2, [sp, #8]
   1a85c:	ldr	r2, [fp, #-16]
   1a860:	str	r2, [sp, #4]
   1a864:	str	r3, [sp]
   1a868:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a86c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a870:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a874:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a878:	bl	18f6c <__assert_fail@plt+0x7c70>
   1a87c:	bl	111c4 <__errno_location@plt>
   1a880:	mov	r2, r0
   1a884:	ldr	r3, [fp, #-12]
   1a888:	str	r3, [r2]
   1a88c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a890:	cmp	r3, #0
   1a894:	beq	1a8a8 <__assert_fail@plt+0x95ac>
   1a898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a89c:	sub	r2, r3, #1
   1a8a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a8a4:	str	r2, [r3]
   1a8a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a8ac:	mov	r0, r3
   1a8b0:	sub	sp, fp, #4
   1a8b4:	ldr	fp, [sp]
   1a8b8:	add	sp, sp, #4
   1a8bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8c0:	str	fp, [sp, #-8]!
   1a8c4:	str	lr, [sp, #4]
   1a8c8:	add	fp, sp, #4
   1a8cc:	sub	sp, sp, #8
   1a8d0:	movw	r3, #4424	; 0x1148
   1a8d4:	movt	r3, #3
   1a8d8:	ldr	r3, [r3]
   1a8dc:	str	r3, [fp, #-12]
   1a8e0:	mov	r3, #1
   1a8e4:	str	r3, [fp, #-8]
   1a8e8:	b	1a914 <__assert_fail@plt+0x9618>
   1a8ec:	ldr	r3, [fp, #-8]
   1a8f0:	lsl	r3, r3, #3
   1a8f4:	ldr	r2, [fp, #-12]
   1a8f8:	add	r3, r2, r3
   1a8fc:	ldr	r3, [r3, #4]
   1a900:	mov	r0, r3
   1a904:	bl	13514 <__assert_fail@plt+0x2218>
   1a908:	ldr	r3, [fp, #-8]
   1a90c:	add	r3, r3, #1
   1a910:	str	r3, [fp, #-8]
   1a914:	movw	r3, #4412	; 0x113c
   1a918:	movt	r3, #3
   1a91c:	ldr	r3, [r3]
   1a920:	ldr	r2, [fp, #-8]
   1a924:	cmp	r2, r3
   1a928:	blt	1a8ec <__assert_fail@plt+0x95f0>
   1a92c:	ldr	r3, [fp, #-12]
   1a930:	ldr	r2, [r3, #4]
   1a934:	movw	r3, #4596	; 0x11f4
   1a938:	movt	r3, #3
   1a93c:	cmp	r2, r3
   1a940:	beq	1a978 <__assert_fail@plt+0x967c>
   1a944:	ldr	r3, [fp, #-12]
   1a948:	ldr	r3, [r3, #4]
   1a94c:	mov	r0, r3
   1a950:	bl	13514 <__assert_fail@plt+0x2218>
   1a954:	movw	r3, #4416	; 0x1140
   1a958:	movt	r3, #3
   1a95c:	mov	r2, #256	; 0x100
   1a960:	str	r2, [r3]
   1a964:	movw	r3, #4416	; 0x1140
   1a968:	movt	r3, #3
   1a96c:	movw	r2, #4596	; 0x11f4
   1a970:	movt	r2, #3
   1a974:	str	r2, [r3, #4]
   1a978:	ldr	r2, [fp, #-12]
   1a97c:	movw	r3, #4416	; 0x1140
   1a980:	movt	r3, #3
   1a984:	cmp	r2, r3
   1a988:	beq	1a9a8 <__assert_fail@plt+0x96ac>
   1a98c:	ldr	r0, [fp, #-12]
   1a990:	bl	13514 <__assert_fail@plt+0x2218>
   1a994:	movw	r3, #4424	; 0x1148
   1a998:	movt	r3, #3
   1a99c:	movw	r2, #4416	; 0x1140
   1a9a0:	movt	r2, #3
   1a9a4:	str	r2, [r3]
   1a9a8:	movw	r3, #4412	; 0x113c
   1a9ac:	movt	r3, #3
   1a9b0:	mov	r2, #1
   1a9b4:	str	r2, [r3]
   1a9b8:	nop	{0}
   1a9bc:	sub	sp, fp, #4
   1a9c0:	ldr	fp, [sp]
   1a9c4:	add	sp, sp, #4
   1a9c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9cc:	str	fp, [sp, #-8]!
   1a9d0:	str	lr, [sp, #4]
   1a9d4:	add	fp, sp, #4
   1a9d8:	sub	sp, sp, #80	; 0x50
   1a9dc:	str	r0, [fp, #-48]	; 0xffffffd0
   1a9e0:	str	r1, [fp, #-52]	; 0xffffffcc
   1a9e4:	str	r2, [fp, #-56]	; 0xffffffc8
   1a9e8:	str	r3, [fp, #-60]	; 0xffffffc4
   1a9ec:	bl	111c4 <__errno_location@plt>
   1a9f0:	mov	r3, r0
   1a9f4:	ldr	r3, [r3]
   1a9f8:	str	r3, [fp, #-16]
   1a9fc:	movw	r3, #4424	; 0x1148
   1aa00:	movt	r3, #3
   1aa04:	ldr	r3, [r3]
   1aa08:	str	r3, [fp, #-8]
   1aa0c:	mvn	r3, #-2147483648	; 0x80000000
   1aa10:	str	r3, [fp, #-20]	; 0xffffffec
   1aa14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1aa18:	cmp	r3, #0
   1aa1c:	blt	1aa30 <__assert_fail@plt+0x9734>
   1aa20:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1aa24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa28:	cmp	r2, r3
   1aa2c:	blt	1aa34 <__assert_fail@plt+0x9738>
   1aa30:	bl	112b4 <abort@plt>
   1aa34:	movw	r3, #4412	; 0x113c
   1aa38:	movt	r3, #3
   1aa3c:	ldr	r3, [r3]
   1aa40:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1aa44:	cmp	r2, r3
   1aa48:	blt	1ab40 <__assert_fail@plt+0x9844>
   1aa4c:	ldr	r2, [fp, #-8]
   1aa50:	movw	r3, #4416	; 0x1140
   1aa54:	movt	r3, #3
   1aa58:	cmp	r2, r3
   1aa5c:	moveq	r3, #1
   1aa60:	movne	r3, #0
   1aa64:	strb	r3, [fp, #-21]	; 0xffffffeb
   1aa68:	movw	r3, #4412	; 0x113c
   1aa6c:	movt	r3, #3
   1aa70:	ldr	r3, [r3]
   1aa74:	str	r3, [fp, #-40]	; 0xffffffd8
   1aa78:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1aa7c:	cmp	r3, #0
   1aa80:	beq	1aa8c <__assert_fail@plt+0x9790>
   1aa84:	mov	r0, #0
   1aa88:	b	1aa90 <__assert_fail@plt+0x9794>
   1aa8c:	ldr	r0, [fp, #-8]
   1aa90:	movw	r3, #4412	; 0x113c
   1aa94:	movt	r3, #3
   1aa98:	ldr	r3, [r3]
   1aa9c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1aaa0:	sub	r3, r2, r3
   1aaa4:	add	r2, r3, #1
   1aaa8:	sub	r1, fp, #40	; 0x28
   1aaac:	mov	r3, #8
   1aab0:	str	r3, [sp]
   1aab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aab8:	bl	1c0b0 <__assert_fail@plt+0xadb4>
   1aabc:	str	r0, [fp, #-8]
   1aac0:	movw	r3, #4424	; 0x1148
   1aac4:	movt	r3, #3
   1aac8:	ldr	r2, [fp, #-8]
   1aacc:	str	r2, [r3]
   1aad0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1aad4:	cmp	r3, #0
   1aad8:	beq	1aaf4 <__assert_fail@plt+0x97f8>
   1aadc:	ldr	r2, [fp, #-8]
   1aae0:	movw	r3, #4416	; 0x1140
   1aae4:	movt	r3, #3
   1aae8:	mov	r1, r2
   1aaec:	ldrd	r2, [r3]
   1aaf0:	strd	r2, [r1]
   1aaf4:	movw	r3, #4412	; 0x113c
   1aaf8:	movt	r3, #3
   1aafc:	ldr	r3, [r3]
   1ab00:	lsl	r3, r3, #3
   1ab04:	ldr	r2, [fp, #-8]
   1ab08:	add	r0, r2, r3
   1ab0c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1ab10:	movw	r3, #4412	; 0x113c
   1ab14:	movt	r3, #3
   1ab18:	ldr	r3, [r3]
   1ab1c:	sub	r3, r2, r3
   1ab20:	lsl	r3, r3, #3
   1ab24:	mov	r2, r3
   1ab28:	mov	r1, #0
   1ab2c:	bl	111dc <memset@plt>
   1ab30:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1ab34:	movw	r3, #4412	; 0x113c
   1ab38:	movt	r3, #3
   1ab3c:	str	r2, [r3]
   1ab40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ab44:	lsl	r3, r3, #3
   1ab48:	ldr	r2, [fp, #-8]
   1ab4c:	add	r3, r2, r3
   1ab50:	ldr	r3, [r3]
   1ab54:	str	r3, [fp, #-28]	; 0xffffffe4
   1ab58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ab5c:	lsl	r3, r3, #3
   1ab60:	ldr	r2, [fp, #-8]
   1ab64:	add	r3, r2, r3
   1ab68:	ldr	r3, [r3, #4]
   1ab6c:	str	r3, [fp, #-12]
   1ab70:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ab74:	ldr	r3, [r3, #4]
   1ab78:	orr	r3, r3, #1
   1ab7c:	str	r3, [fp, #-32]	; 0xffffffe0
   1ab80:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ab84:	ldr	r3, [r3]
   1ab88:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1ab8c:	add	r2, r2, #8
   1ab90:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ab94:	ldr	r1, [r1, #40]	; 0x28
   1ab98:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1ab9c:	ldr	r0, [r0, #44]	; 0x2c
   1aba0:	str	r0, [sp, #16]
   1aba4:	str	r1, [sp, #12]
   1aba8:	str	r2, [sp, #8]
   1abac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1abb0:	str	r2, [sp, #4]
   1abb4:	str	r3, [sp]
   1abb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1abbc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1abc0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1abc4:	ldr	r0, [fp, #-12]
   1abc8:	bl	18f6c <__assert_fail@plt+0x7c70>
   1abcc:	str	r0, [fp, #-36]	; 0xffffffdc
   1abd0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1abd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1abd8:	cmp	r2, r3
   1abdc:	bhi	1ac94 <__assert_fail@plt+0x9998>
   1abe0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1abe4:	add	r3, r3, #1
   1abe8:	str	r3, [fp, #-28]	; 0xffffffe4
   1abec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1abf0:	lsl	r3, r3, #3
   1abf4:	ldr	r2, [fp, #-8]
   1abf8:	add	r3, r2, r3
   1abfc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ac00:	str	r2, [r3]
   1ac04:	ldr	r2, [fp, #-12]
   1ac08:	movw	r3, #4596	; 0x11f4
   1ac0c:	movt	r3, #3
   1ac10:	cmp	r2, r3
   1ac14:	beq	1ac20 <__assert_fail@plt+0x9924>
   1ac18:	ldr	r0, [fp, #-12]
   1ac1c:	bl	13514 <__assert_fail@plt+0x2218>
   1ac20:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ac24:	bl	1bd50 <__assert_fail@plt+0xaa54>
   1ac28:	mov	r3, r0
   1ac2c:	str	r3, [fp, #-12]
   1ac30:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ac34:	lsl	r3, r3, #3
   1ac38:	ldr	r2, [fp, #-8]
   1ac3c:	add	r3, r2, r3
   1ac40:	ldr	r2, [fp, #-12]
   1ac44:	str	r2, [r3, #4]
   1ac48:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ac4c:	ldr	r3, [r3]
   1ac50:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1ac54:	add	r2, r2, #8
   1ac58:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ac5c:	ldr	r1, [r1, #40]	; 0x28
   1ac60:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1ac64:	ldr	r0, [r0, #44]	; 0x2c
   1ac68:	str	r0, [sp, #16]
   1ac6c:	str	r1, [sp, #12]
   1ac70:	str	r2, [sp, #8]
   1ac74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ac78:	str	r2, [sp, #4]
   1ac7c:	str	r3, [sp]
   1ac80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ac84:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ac88:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ac8c:	ldr	r0, [fp, #-12]
   1ac90:	bl	18f6c <__assert_fail@plt+0x7c70>
   1ac94:	bl	111c4 <__errno_location@plt>
   1ac98:	mov	r2, r0
   1ac9c:	ldr	r3, [fp, #-16]
   1aca0:	str	r3, [r2]
   1aca4:	ldr	r3, [fp, #-12]
   1aca8:	mov	r0, r3
   1acac:	sub	sp, fp, #4
   1acb0:	ldr	fp, [sp]
   1acb4:	add	sp, sp, #4
   1acb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1acbc:	str	fp, [sp, #-8]!
   1acc0:	str	lr, [sp, #4]
   1acc4:	add	fp, sp, #4
   1acc8:	sub	sp, sp, #8
   1accc:	str	r0, [fp, #-8]
   1acd0:	str	r1, [fp, #-12]
   1acd4:	movw	r3, #4548	; 0x11c4
   1acd8:	movt	r3, #3
   1acdc:	mvn	r2, #0
   1ace0:	ldr	r1, [fp, #-12]
   1ace4:	ldr	r0, [fp, #-8]
   1ace8:	bl	1a9cc <__assert_fail@plt+0x96d0>
   1acec:	mov	r3, r0
   1acf0:	mov	r0, r3
   1acf4:	sub	sp, fp, #4
   1acf8:	ldr	fp, [sp]
   1acfc:	add	sp, sp, #4
   1ad00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad04:	str	fp, [sp, #-8]!
   1ad08:	str	lr, [sp, #4]
   1ad0c:	add	fp, sp, #4
   1ad10:	sub	sp, sp, #16
   1ad14:	str	r0, [fp, #-8]
   1ad18:	str	r1, [fp, #-12]
   1ad1c:	str	r2, [fp, #-16]
   1ad20:	movw	r3, #4548	; 0x11c4
   1ad24:	movt	r3, #3
   1ad28:	ldr	r2, [fp, #-16]
   1ad2c:	ldr	r1, [fp, #-12]
   1ad30:	ldr	r0, [fp, #-8]
   1ad34:	bl	1a9cc <__assert_fail@plt+0x96d0>
   1ad38:	mov	r3, r0
   1ad3c:	mov	r0, r3
   1ad40:	sub	sp, fp, #4
   1ad44:	ldr	fp, [sp]
   1ad48:	add	sp, sp, #4
   1ad4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad50:	str	fp, [sp, #-8]!
   1ad54:	str	lr, [sp, #4]
   1ad58:	add	fp, sp, #4
   1ad5c:	sub	sp, sp, #8
   1ad60:	str	r0, [fp, #-8]
   1ad64:	ldr	r1, [fp, #-8]
   1ad68:	mov	r0, #0
   1ad6c:	bl	1acbc <__assert_fail@plt+0x99c0>
   1ad70:	mov	r3, r0
   1ad74:	mov	r0, r3
   1ad78:	sub	sp, fp, #4
   1ad7c:	ldr	fp, [sp]
   1ad80:	add	sp, sp, #4
   1ad84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad88:	str	fp, [sp, #-8]!
   1ad8c:	str	lr, [sp, #4]
   1ad90:	add	fp, sp, #4
   1ad94:	sub	sp, sp, #8
   1ad98:	str	r0, [fp, #-8]
   1ad9c:	str	r1, [fp, #-12]
   1ada0:	ldr	r2, [fp, #-12]
   1ada4:	ldr	r1, [fp, #-8]
   1ada8:	mov	r0, #0
   1adac:	bl	1ad04 <__assert_fail@plt+0x9a08>
   1adb0:	mov	r3, r0
   1adb4:	mov	r0, r3
   1adb8:	sub	sp, fp, #4
   1adbc:	ldr	fp, [sp]
   1adc0:	add	sp, sp, #4
   1adc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adc8:	str	fp, [sp, #-8]!
   1adcc:	str	lr, [sp, #4]
   1add0:	add	fp, sp, #4
   1add4:	sub	sp, sp, #64	; 0x40
   1add8:	str	r0, [fp, #-56]	; 0xffffffc8
   1addc:	str	r1, [fp, #-60]	; 0xffffffc4
   1ade0:	str	r2, [fp, #-64]	; 0xffffffc0
   1ade4:	sub	r3, fp, #52	; 0x34
   1ade8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1adec:	mov	r0, r3
   1adf0:	bl	18dc8 <__assert_fail@plt+0x7acc>
   1adf4:	sub	r3, fp, #52	; 0x34
   1adf8:	mvn	r2, #0
   1adfc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1ae00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ae04:	bl	1a9cc <__assert_fail@plt+0x96d0>
   1ae08:	mov	r3, r0
   1ae0c:	mov	r0, r3
   1ae10:	sub	sp, fp, #4
   1ae14:	ldr	fp, [sp]
   1ae18:	add	sp, sp, #4
   1ae1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae20:	str	fp, [sp, #-8]!
   1ae24:	str	lr, [sp, #4]
   1ae28:	add	fp, sp, #4
   1ae2c:	sub	sp, sp, #64	; 0x40
   1ae30:	str	r0, [fp, #-56]	; 0xffffffc8
   1ae34:	str	r1, [fp, #-60]	; 0xffffffc4
   1ae38:	str	r2, [fp, #-64]	; 0xffffffc0
   1ae3c:	str	r3, [fp, #-68]	; 0xffffffbc
   1ae40:	sub	r3, fp, #52	; 0x34
   1ae44:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ae48:	mov	r0, r3
   1ae4c:	bl	18dc8 <__assert_fail@plt+0x7acc>
   1ae50:	sub	r3, fp, #52	; 0x34
   1ae54:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1ae58:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1ae5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ae60:	bl	1a9cc <__assert_fail@plt+0x96d0>
   1ae64:	mov	r3, r0
   1ae68:	mov	r0, r3
   1ae6c:	sub	sp, fp, #4
   1ae70:	ldr	fp, [sp]
   1ae74:	add	sp, sp, #4
   1ae78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae7c:	str	fp, [sp, #-8]!
   1ae80:	str	lr, [sp, #4]
   1ae84:	add	fp, sp, #4
   1ae88:	sub	sp, sp, #8
   1ae8c:	str	r0, [fp, #-8]
   1ae90:	str	r1, [fp, #-12]
   1ae94:	ldr	r2, [fp, #-12]
   1ae98:	ldr	r1, [fp, #-8]
   1ae9c:	mov	r0, #0
   1aea0:	bl	1adc8 <__assert_fail@plt+0x9acc>
   1aea4:	mov	r3, r0
   1aea8:	mov	r0, r3
   1aeac:	sub	sp, fp, #4
   1aeb0:	ldr	fp, [sp]
   1aeb4:	add	sp, sp, #4
   1aeb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aebc:	str	fp, [sp, #-8]!
   1aec0:	str	lr, [sp, #4]
   1aec4:	add	fp, sp, #4
   1aec8:	sub	sp, sp, #16
   1aecc:	str	r0, [fp, #-8]
   1aed0:	str	r1, [fp, #-12]
   1aed4:	str	r2, [fp, #-16]
   1aed8:	ldr	r3, [fp, #-16]
   1aedc:	ldr	r2, [fp, #-12]
   1aee0:	ldr	r1, [fp, #-8]
   1aee4:	mov	r0, #0
   1aee8:	bl	1ae20 <__assert_fail@plt+0x9b24>
   1aeec:	mov	r3, r0
   1aef0:	mov	r0, r3
   1aef4:	sub	sp, fp, #4
   1aef8:	ldr	fp, [sp]
   1aefc:	add	sp, sp, #4
   1af00:	pop	{pc}		; (ldr pc, [sp], #4)
   1af04:	str	fp, [sp, #-8]!
   1af08:	str	lr, [sp, #4]
   1af0c:	add	fp, sp, #4
   1af10:	sub	sp, sp, #64	; 0x40
   1af14:	str	r0, [fp, #-56]	; 0xffffffc8
   1af18:	str	r1, [fp, #-60]	; 0xffffffc4
   1af1c:	mov	r3, r2
   1af20:	strb	r3, [fp, #-61]	; 0xffffffc3
   1af24:	movw	r2, #4548	; 0x11c4
   1af28:	movt	r2, #3
   1af2c:	sub	r3, fp, #52	; 0x34
   1af30:	ldrd	r0, [r2]
   1af34:	strd	r0, [r3]
   1af38:	ldrd	r0, [r2, #8]
   1af3c:	strd	r0, [r3, #8]
   1af40:	ldrd	r0, [r2, #16]
   1af44:	strd	r0, [r3, #16]
   1af48:	ldrd	r0, [r2, #24]
   1af4c:	strd	r0, [r3, #24]
   1af50:	ldrd	r0, [r2, #32]
   1af54:	strd	r0, [r3, #32]
   1af58:	ldrd	r0, [r2, #40]	; 0x28
   1af5c:	strd	r0, [r3, #40]	; 0x28
   1af60:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1af64:	sub	r3, fp, #52	; 0x34
   1af68:	mov	r2, #1
   1af6c:	mov	r0, r3
   1af70:	bl	18c28 <__assert_fail@plt+0x792c>
   1af74:	sub	r3, fp, #52	; 0x34
   1af78:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1af7c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1af80:	mov	r0, #0
   1af84:	bl	1a9cc <__assert_fail@plt+0x96d0>
   1af88:	mov	r3, r0
   1af8c:	mov	r0, r3
   1af90:	sub	sp, fp, #4
   1af94:	ldr	fp, [sp]
   1af98:	add	sp, sp, #4
   1af9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1afa0:	str	fp, [sp, #-8]!
   1afa4:	str	lr, [sp, #4]
   1afa8:	add	fp, sp, #4
   1afac:	sub	sp, sp, #8
   1afb0:	str	r0, [fp, #-8]
   1afb4:	mov	r3, r1
   1afb8:	strb	r3, [fp, #-9]
   1afbc:	ldrb	r3, [fp, #-9]
   1afc0:	mov	r2, r3
   1afc4:	mvn	r1, #0
   1afc8:	ldr	r0, [fp, #-8]
   1afcc:	bl	1af04 <__assert_fail@plt+0x9c08>
   1afd0:	mov	r3, r0
   1afd4:	mov	r0, r3
   1afd8:	sub	sp, fp, #4
   1afdc:	ldr	fp, [sp]
   1afe0:	add	sp, sp, #4
   1afe4:	pop	{pc}		; (ldr pc, [sp], #4)
   1afe8:	str	fp, [sp, #-8]!
   1afec:	str	lr, [sp, #4]
   1aff0:	add	fp, sp, #4
   1aff4:	sub	sp, sp, #8
   1aff8:	str	r0, [fp, #-8]
   1affc:	mov	r1, #58	; 0x3a
   1b000:	ldr	r0, [fp, #-8]
   1b004:	bl	1afa0 <__assert_fail@plt+0x9ca4>
   1b008:	mov	r3, r0
   1b00c:	mov	r0, r3
   1b010:	sub	sp, fp, #4
   1b014:	ldr	fp, [sp]
   1b018:	add	sp, sp, #4
   1b01c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b020:	str	fp, [sp, #-8]!
   1b024:	str	lr, [sp, #4]
   1b028:	add	fp, sp, #4
   1b02c:	sub	sp, sp, #8
   1b030:	str	r0, [fp, #-8]
   1b034:	str	r1, [fp, #-12]
   1b038:	mov	r2, #58	; 0x3a
   1b03c:	ldr	r1, [fp, #-12]
   1b040:	ldr	r0, [fp, #-8]
   1b044:	bl	1af04 <__assert_fail@plt+0x9c08>
   1b048:	mov	r3, r0
   1b04c:	mov	r0, r3
   1b050:	sub	sp, fp, #4
   1b054:	ldr	fp, [sp]
   1b058:	add	sp, sp, #4
   1b05c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b060:	str	fp, [sp, #-8]!
   1b064:	str	lr, [sp, #4]
   1b068:	add	fp, sp, #4
   1b06c:	sub	sp, sp, #112	; 0x70
   1b070:	str	r0, [fp, #-56]	; 0xffffffc8
   1b074:	str	r1, [fp, #-60]	; 0xffffffc4
   1b078:	str	r2, [fp, #-64]	; 0xffffffc0
   1b07c:	sub	r3, fp, #116	; 0x74
   1b080:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b084:	mov	r0, r3
   1b088:	bl	18dc8 <__assert_fail@plt+0x7acc>
   1b08c:	sub	r3, fp, #52	; 0x34
   1b090:	sub	r2, fp, #116	; 0x74
   1b094:	ldrd	r0, [r2]
   1b098:	strd	r0, [r3]
   1b09c:	ldrd	r0, [r2, #8]
   1b0a0:	strd	r0, [r3, #8]
   1b0a4:	ldrd	r0, [r2, #16]
   1b0a8:	strd	r0, [r3, #16]
   1b0ac:	ldrd	r0, [r2, #24]
   1b0b0:	strd	r0, [r3, #24]
   1b0b4:	ldrd	r0, [r2, #32]
   1b0b8:	strd	r0, [r3, #32]
   1b0bc:	ldrd	r0, [r2, #40]	; 0x28
   1b0c0:	strd	r0, [r3, #40]	; 0x28
   1b0c4:	sub	r3, fp, #52	; 0x34
   1b0c8:	mov	r2, #1
   1b0cc:	mov	r1, #58	; 0x3a
   1b0d0:	mov	r0, r3
   1b0d4:	bl	18c28 <__assert_fail@plt+0x792c>
   1b0d8:	sub	r3, fp, #52	; 0x34
   1b0dc:	mvn	r2, #0
   1b0e0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1b0e4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b0e8:	bl	1a9cc <__assert_fail@plt+0x96d0>
   1b0ec:	mov	r3, r0
   1b0f0:	mov	r0, r3
   1b0f4:	sub	sp, fp, #4
   1b0f8:	ldr	fp, [sp]
   1b0fc:	add	sp, sp, #4
   1b100:	pop	{pc}		; (ldr pc, [sp], #4)
   1b104:	str	fp, [sp, #-8]!
   1b108:	str	lr, [sp, #4]
   1b10c:	add	fp, sp, #4
   1b110:	sub	sp, sp, #24
   1b114:	str	r0, [fp, #-8]
   1b118:	str	r1, [fp, #-12]
   1b11c:	str	r2, [fp, #-16]
   1b120:	str	r3, [fp, #-20]	; 0xffffffec
   1b124:	mvn	r3, #0
   1b128:	str	r3, [sp]
   1b12c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b130:	ldr	r2, [fp, #-16]
   1b134:	ldr	r1, [fp, #-12]
   1b138:	ldr	r0, [fp, #-8]
   1b13c:	bl	1b158 <__assert_fail@plt+0x9e5c>
   1b140:	mov	r3, r0
   1b144:	mov	r0, r3
   1b148:	sub	sp, fp, #4
   1b14c:	ldr	fp, [sp]
   1b150:	add	sp, sp, #4
   1b154:	pop	{pc}		; (ldr pc, [sp], #4)
   1b158:	str	fp, [sp, #-8]!
   1b15c:	str	lr, [sp, #4]
   1b160:	add	fp, sp, #4
   1b164:	sub	sp, sp, #64	; 0x40
   1b168:	str	r0, [fp, #-56]	; 0xffffffc8
   1b16c:	str	r1, [fp, #-60]	; 0xffffffc4
   1b170:	str	r2, [fp, #-64]	; 0xffffffc0
   1b174:	str	r3, [fp, #-68]	; 0xffffffbc
   1b178:	movw	r2, #4548	; 0x11c4
   1b17c:	movt	r2, #3
   1b180:	sub	r3, fp, #52	; 0x34
   1b184:	ldrd	r0, [r2]
   1b188:	strd	r0, [r3]
   1b18c:	ldrd	r0, [r2, #8]
   1b190:	strd	r0, [r3, #8]
   1b194:	ldrd	r0, [r2, #16]
   1b198:	strd	r0, [r3, #16]
   1b19c:	ldrd	r0, [r2, #24]
   1b1a0:	strd	r0, [r3, #24]
   1b1a4:	ldrd	r0, [r2, #32]
   1b1a8:	strd	r0, [r3, #32]
   1b1ac:	ldrd	r0, [r2, #40]	; 0x28
   1b1b0:	strd	r0, [r3, #40]	; 0x28
   1b1b4:	sub	r3, fp, #52	; 0x34
   1b1b8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1b1bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b1c0:	mov	r0, r3
   1b1c4:	bl	18d40 <__assert_fail@plt+0x7a44>
   1b1c8:	sub	r3, fp, #52	; 0x34
   1b1cc:	ldr	r2, [fp, #4]
   1b1d0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b1d4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b1d8:	bl	1a9cc <__assert_fail@plt+0x96d0>
   1b1dc:	mov	r3, r0
   1b1e0:	mov	r0, r3
   1b1e4:	sub	sp, fp, #4
   1b1e8:	ldr	fp, [sp]
   1b1ec:	add	sp, sp, #4
   1b1f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1f4:	str	fp, [sp, #-8]!
   1b1f8:	str	lr, [sp, #4]
   1b1fc:	add	fp, sp, #4
   1b200:	sub	sp, sp, #16
   1b204:	str	r0, [fp, #-8]
   1b208:	str	r1, [fp, #-12]
   1b20c:	str	r2, [fp, #-16]
   1b210:	ldr	r3, [fp, #-16]
   1b214:	ldr	r2, [fp, #-12]
   1b218:	ldr	r1, [fp, #-8]
   1b21c:	mov	r0, #0
   1b220:	bl	1b104 <__assert_fail@plt+0x9e08>
   1b224:	mov	r3, r0
   1b228:	mov	r0, r3
   1b22c:	sub	sp, fp, #4
   1b230:	ldr	fp, [sp]
   1b234:	add	sp, sp, #4
   1b238:	pop	{pc}		; (ldr pc, [sp], #4)
   1b23c:	str	fp, [sp, #-8]!
   1b240:	str	lr, [sp, #4]
   1b244:	add	fp, sp, #4
   1b248:	sub	sp, sp, #24
   1b24c:	str	r0, [fp, #-8]
   1b250:	str	r1, [fp, #-12]
   1b254:	str	r2, [fp, #-16]
   1b258:	str	r3, [fp, #-20]	; 0xffffffec
   1b25c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b260:	str	r3, [sp]
   1b264:	ldr	r3, [fp, #-16]
   1b268:	ldr	r2, [fp, #-12]
   1b26c:	ldr	r1, [fp, #-8]
   1b270:	mov	r0, #0
   1b274:	bl	1b158 <__assert_fail@plt+0x9e5c>
   1b278:	mov	r3, r0
   1b27c:	mov	r0, r3
   1b280:	sub	sp, fp, #4
   1b284:	ldr	fp, [sp]
   1b288:	add	sp, sp, #4
   1b28c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b290:	str	fp, [sp, #-8]!
   1b294:	str	lr, [sp, #4]
   1b298:	add	fp, sp, #4
   1b29c:	sub	sp, sp, #16
   1b2a0:	str	r0, [fp, #-8]
   1b2a4:	str	r1, [fp, #-12]
   1b2a8:	str	r2, [fp, #-16]
   1b2ac:	movw	r3, #4428	; 0x114c
   1b2b0:	movt	r3, #3
   1b2b4:	ldr	r2, [fp, #-16]
   1b2b8:	ldr	r1, [fp, #-12]
   1b2bc:	ldr	r0, [fp, #-8]
   1b2c0:	bl	1a9cc <__assert_fail@plt+0x96d0>
   1b2c4:	mov	r3, r0
   1b2c8:	mov	r0, r3
   1b2cc:	sub	sp, fp, #4
   1b2d0:	ldr	fp, [sp]
   1b2d4:	add	sp, sp, #4
   1b2d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2dc:	str	fp, [sp, #-8]!
   1b2e0:	str	lr, [sp, #4]
   1b2e4:	add	fp, sp, #4
   1b2e8:	sub	sp, sp, #8
   1b2ec:	str	r0, [fp, #-8]
   1b2f0:	str	r1, [fp, #-12]
   1b2f4:	ldr	r2, [fp, #-12]
   1b2f8:	ldr	r1, [fp, #-8]
   1b2fc:	mov	r0, #0
   1b300:	bl	1b290 <__assert_fail@plt+0x9f94>
   1b304:	mov	r3, r0
   1b308:	mov	r0, r3
   1b30c:	sub	sp, fp, #4
   1b310:	ldr	fp, [sp]
   1b314:	add	sp, sp, #4
   1b318:	pop	{pc}		; (ldr pc, [sp], #4)
   1b31c:	str	fp, [sp, #-8]!
   1b320:	str	lr, [sp, #4]
   1b324:	add	fp, sp, #4
   1b328:	sub	sp, sp, #8
   1b32c:	str	r0, [fp, #-8]
   1b330:	str	r1, [fp, #-12]
   1b334:	mvn	r2, #0
   1b338:	ldr	r1, [fp, #-12]
   1b33c:	ldr	r0, [fp, #-8]
   1b340:	bl	1b290 <__assert_fail@plt+0x9f94>
   1b344:	mov	r3, r0
   1b348:	mov	r0, r3
   1b34c:	sub	sp, fp, #4
   1b350:	ldr	fp, [sp]
   1b354:	add	sp, sp, #4
   1b358:	pop	{pc}		; (ldr pc, [sp], #4)
   1b35c:	str	fp, [sp, #-8]!
   1b360:	str	lr, [sp, #4]
   1b364:	add	fp, sp, #4
   1b368:	sub	sp, sp, #8
   1b36c:	str	r0, [fp, #-8]
   1b370:	ldr	r1, [fp, #-8]
   1b374:	mov	r0, #0
   1b378:	bl	1b31c <__assert_fail@plt+0xa020>
   1b37c:	mov	r3, r0
   1b380:	mov	r0, r3
   1b384:	sub	sp, fp, #4
   1b388:	ldr	fp, [sp]
   1b38c:	add	sp, sp, #4
   1b390:	pop	{pc}		; (ldr pc, [sp], #4)
   1b394:	str	fp, [sp, #-8]!
   1b398:	str	lr, [sp, #4]
   1b39c:	add	fp, sp, #4
   1b3a0:	sub	sp, sp, #112	; 0x70
   1b3a4:	str	r0, [fp, #-112]	; 0xffffff90
   1b3a8:	sub	r3, fp, #108	; 0x6c
   1b3ac:	mov	r1, r3
   1b3b0:	movw	r0, #64784	; 0xfd10
   1b3b4:	movt	r0, #1
   1b3b8:	bl	1ec2c <__assert_fail@plt+0xd930>
   1b3bc:	mov	r3, r0
   1b3c0:	cmp	r3, #0
   1b3c4:	beq	1b3d0 <__assert_fail@plt+0xa0d4>
   1b3c8:	mov	r3, #0
   1b3cc:	b	1b3ec <__assert_fail@plt+0xa0f0>
   1b3d0:	ldrd	r2, [fp, #-12]
   1b3d4:	ldr	r1, [fp, #-112]	; 0xffffff90
   1b3d8:	strd	r2, [r1]
   1b3dc:	ldrd	r2, [fp, #-108]	; 0xffffff94
   1b3e0:	ldr	r1, [fp, #-112]	; 0xffffff90
   1b3e4:	strd	r2, [r1, #8]
   1b3e8:	ldr	r3, [fp, #-112]	; 0xffffff90
   1b3ec:	mov	r0, r3
   1b3f0:	sub	sp, fp, #4
   1b3f4:	ldr	fp, [sp]
   1b3f8:	add	sp, sp, #4
   1b3fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b400:	str	fp, [sp, #-8]!
   1b404:	str	lr, [sp, #4]
   1b408:	add	fp, sp, #4
   1b40c:	sub	sp, sp, #16
   1b410:	str	r0, [fp, #-16]
   1b414:	ldr	r3, [fp, #-16]
   1b418:	cmp	r3, #0
   1b41c:	blt	1b468 <__assert_fail@plt+0xa16c>
   1b420:	ldr	r3, [fp, #-16]
   1b424:	cmp	r3, #2
   1b428:	bgt	1b468 <__assert_fail@plt+0xa16c>
   1b42c:	ldr	r0, [fp, #-16]
   1b430:	bl	1e27c <__assert_fail@plt+0xcf80>
   1b434:	str	r0, [fp, #-8]
   1b438:	bl	111c4 <__errno_location@plt>
   1b43c:	mov	r3, r0
   1b440:	ldr	r3, [r3]
   1b444:	str	r3, [fp, #-12]
   1b448:	ldr	r0, [fp, #-16]
   1b44c:	bl	112c0 <close@plt>
   1b450:	bl	111c4 <__errno_location@plt>
   1b454:	mov	r2, r0
   1b458:	ldr	r3, [fp, #-12]
   1b45c:	str	r3, [r2]
   1b460:	ldr	r3, [fp, #-8]
   1b464:	str	r3, [fp, #-16]
   1b468:	ldr	r3, [fp, #-16]
   1b46c:	mov	r0, r3
   1b470:	sub	sp, fp, #4
   1b474:	ldr	fp, [sp]
   1b478:	add	sp, sp, #4
   1b47c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b480:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b484:	strd	r6, [sp, #8]
   1b488:	str	fp, [sp, #16]
   1b48c:	str	lr, [sp, #20]
   1b490:	add	fp, sp, #20
   1b494:	sub	sp, sp, #48	; 0x30
   1b498:	str	r0, [fp, #-24]	; 0xffffffe8
   1b49c:	str	r1, [fp, #-28]	; 0xffffffe4
   1b4a0:	str	r2, [fp, #-32]	; 0xffffffe0
   1b4a4:	str	r3, [fp, #-36]	; 0xffffffdc
   1b4a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b4ac:	cmp	r3, #0
   1b4b0:	beq	1b4d8 <__assert_fail@plt+0xa1dc>
   1b4b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b4b8:	str	r3, [sp]
   1b4bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b4c0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b4c4:	movw	r1, #64788	; 0xfd14
   1b4c8:	movt	r1, #1
   1b4cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b4d0:	bl	111b8 <fprintf@plt>
   1b4d4:	b	1b4f0 <__assert_fail@plt+0xa1f4>
   1b4d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b4dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b4e0:	movw	r1, #64800	; 0xfd20
   1b4e4:	movt	r1, #1
   1b4e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b4ec:	bl	111b8 <fprintf@plt>
   1b4f0:	movw	r0, #64808	; 0xfd28
   1b4f4:	movt	r0, #1
   1b4f8:	bl	1117c <gettext@plt>
   1b4fc:	mov	r2, r0
   1b500:	movw	r3, #2022	; 0x7e6
   1b504:	movw	r1, #56	; 0x38
   1b508:	movt	r1, #2
   1b50c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b510:	bl	111b8 <fprintf@plt>
   1b514:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b518:	mov	r0, #10
   1b51c:	bl	11074 <fputc_unlocked@plt>
   1b520:	movw	r0, #64812	; 0xfd2c
   1b524:	movt	r0, #1
   1b528:	bl	1117c <gettext@plt>
   1b52c:	mov	r3, r0
   1b530:	movw	r2, #64984	; 0xfdd8
   1b534:	movt	r2, #1
   1b538:	mov	r1, r3
   1b53c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b540:	bl	111b8 <fprintf@plt>
   1b544:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b548:	mov	r0, #10
   1b54c:	bl	11074 <fputc_unlocked@plt>
   1b550:	ldr	r3, [fp, #8]
   1b554:	cmp	r3, #9
   1b558:	ldrls	pc, [pc, r3, lsl #2]
   1b55c:	b	1b93c <__assert_fail@plt+0xa640>
   1b560:	andeq	fp, r1, r8, ror #19
   1b564:	andeq	fp, r1, r8, lsl #11
   1b568:			; <UNDEFINED> instruction: 0x0001b5b0
   1b56c:	andeq	fp, r1, r0, ror #11
   1b570:	andeq	fp, r1, r4, lsr #12
   1b574:	andeq	fp, r1, r0, lsl #13
   1b578:	andeq	fp, r1, ip, ror #13
   1b57c:	andeq	fp, r1, r8, ror #14
   1b580:	strdeq	fp, [r1], -r4
   1b584:	muleq	r1, r0, r8
   1b588:	movw	r0, #65020	; 0xfdfc
   1b58c:	movt	r0, #1
   1b590:	bl	1117c <gettext@plt>
   1b594:	mov	r1, r0
   1b598:	ldr	r3, [fp, #4]
   1b59c:	ldr	r3, [r3]
   1b5a0:	mov	r2, r3
   1b5a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b5a8:	bl	111b8 <fprintf@plt>
   1b5ac:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b5b0:	movw	r0, #65036	; 0xfe0c
   1b5b4:	movt	r0, #1
   1b5b8:	bl	1117c <gettext@plt>
   1b5bc:	mov	r1, r0
   1b5c0:	ldr	r3, [fp, #4]
   1b5c4:	ldr	r2, [r3]
   1b5c8:	ldr	r3, [fp, #4]
   1b5cc:	add	r3, r3, #4
   1b5d0:	ldr	r3, [r3]
   1b5d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b5d8:	bl	111b8 <fprintf@plt>
   1b5dc:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b5e0:	movw	r0, #65060	; 0xfe24
   1b5e4:	movt	r0, #1
   1b5e8:	bl	1117c <gettext@plt>
   1b5ec:	ldr	r3, [fp, #4]
   1b5f0:	ldr	r2, [r3]
   1b5f4:	ldr	r3, [fp, #4]
   1b5f8:	add	r3, r3, #4
   1b5fc:	ldr	r1, [r3]
   1b600:	ldr	r3, [fp, #4]
   1b604:	add	r3, r3, #8
   1b608:	ldr	r3, [r3]
   1b60c:	str	r3, [sp]
   1b610:	mov	r3, r1
   1b614:	mov	r1, r0
   1b618:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b61c:	bl	111b8 <fprintf@plt>
   1b620:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b624:	movw	r0, #65088	; 0xfe40
   1b628:	movt	r0, #1
   1b62c:	bl	1117c <gettext@plt>
   1b630:	mov	ip, r0
   1b634:	ldr	r3, [fp, #4]
   1b638:	ldr	r1, [r3]
   1b63c:	ldr	r3, [fp, #4]
   1b640:	add	r3, r3, #4
   1b644:	ldr	r0, [r3]
   1b648:	ldr	r3, [fp, #4]
   1b64c:	add	r3, r3, #8
   1b650:	ldr	r3, [r3]
   1b654:	ldr	r2, [fp, #4]
   1b658:	add	r2, r2, #12
   1b65c:	ldr	r2, [r2]
   1b660:	str	r2, [sp, #4]
   1b664:	str	r3, [sp]
   1b668:	mov	r3, r0
   1b66c:	mov	r2, r1
   1b670:	mov	r1, ip
   1b674:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b678:	bl	111b8 <fprintf@plt>
   1b67c:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b680:	movw	r0, #65120	; 0xfe60
   1b684:	movt	r0, #1
   1b688:	bl	1117c <gettext@plt>
   1b68c:	mov	lr, r0
   1b690:	ldr	r3, [fp, #4]
   1b694:	ldr	r0, [r3]
   1b698:	ldr	r3, [fp, #4]
   1b69c:	add	r3, r3, #4
   1b6a0:	ldr	ip, [r3]
   1b6a4:	ldr	r3, [fp, #4]
   1b6a8:	add	r3, r3, #8
   1b6ac:	ldr	r3, [r3]
   1b6b0:	ldr	r2, [fp, #4]
   1b6b4:	add	r2, r2, #12
   1b6b8:	ldr	r2, [r2]
   1b6bc:	ldr	r1, [fp, #4]
   1b6c0:	add	r1, r1, #16
   1b6c4:	ldr	r1, [r1]
   1b6c8:	str	r1, [sp, #8]
   1b6cc:	str	r2, [sp, #4]
   1b6d0:	str	r3, [sp]
   1b6d4:	mov	r3, ip
   1b6d8:	mov	r2, r0
   1b6dc:	mov	r1, lr
   1b6e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b6e4:	bl	111b8 <fprintf@plt>
   1b6e8:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b6ec:	movw	r0, #65156	; 0xfe84
   1b6f0:	movt	r0, #1
   1b6f4:	bl	1117c <gettext@plt>
   1b6f8:	mov	r4, r0
   1b6fc:	ldr	r3, [fp, #4]
   1b700:	ldr	ip, [r3]
   1b704:	ldr	r3, [fp, #4]
   1b708:	add	r3, r3, #4
   1b70c:	ldr	lr, [r3]
   1b710:	ldr	r3, [fp, #4]
   1b714:	add	r3, r3, #8
   1b718:	ldr	r3, [r3]
   1b71c:	ldr	r2, [fp, #4]
   1b720:	add	r2, r2, #12
   1b724:	ldr	r2, [r2]
   1b728:	ldr	r1, [fp, #4]
   1b72c:	add	r1, r1, #16
   1b730:	ldr	r1, [r1]
   1b734:	ldr	r0, [fp, #4]
   1b738:	add	r0, r0, #20
   1b73c:	ldr	r0, [r0]
   1b740:	str	r0, [sp, #12]
   1b744:	str	r1, [sp, #8]
   1b748:	str	r2, [sp, #4]
   1b74c:	str	r3, [sp]
   1b750:	mov	r3, lr
   1b754:	mov	r2, ip
   1b758:	mov	r1, r4
   1b75c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b760:	bl	111b8 <fprintf@plt>
   1b764:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b768:	movw	r0, #65196	; 0xfeac
   1b76c:	movt	r0, #1
   1b770:	bl	1117c <gettext@plt>
   1b774:	mov	r5, r0
   1b778:	ldr	r3, [fp, #4]
   1b77c:	ldr	lr, [r3]
   1b780:	ldr	r3, [fp, #4]
   1b784:	add	r3, r3, #4
   1b788:	ldr	r4, [r3]
   1b78c:	ldr	r3, [fp, #4]
   1b790:	add	r3, r3, #8
   1b794:	ldr	r3, [r3]
   1b798:	ldr	r2, [fp, #4]
   1b79c:	add	r2, r2, #12
   1b7a0:	ldr	r2, [r2]
   1b7a4:	ldr	r1, [fp, #4]
   1b7a8:	add	r1, r1, #16
   1b7ac:	ldr	r1, [r1]
   1b7b0:	ldr	r0, [fp, #4]
   1b7b4:	add	r0, r0, #20
   1b7b8:	ldr	r0, [r0]
   1b7bc:	ldr	ip, [fp, #4]
   1b7c0:	add	ip, ip, #24
   1b7c4:	ldr	ip, [ip]
   1b7c8:	str	ip, [sp, #16]
   1b7cc:	str	r0, [sp, #12]
   1b7d0:	str	r1, [sp, #8]
   1b7d4:	str	r2, [sp, #4]
   1b7d8:	str	r3, [sp]
   1b7dc:	mov	r3, r4
   1b7e0:	mov	r2, lr
   1b7e4:	mov	r1, r5
   1b7e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b7ec:	bl	111b8 <fprintf@plt>
   1b7f0:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b7f4:	movw	r0, #65240	; 0xfed8
   1b7f8:	movt	r0, #1
   1b7fc:	bl	1117c <gettext@plt>
   1b800:	mov	r6, r0
   1b804:	ldr	r3, [fp, #4]
   1b808:	ldr	r4, [r3]
   1b80c:	ldr	r3, [fp, #4]
   1b810:	add	r3, r3, #4
   1b814:	ldr	r5, [r3]
   1b818:	ldr	r3, [fp, #4]
   1b81c:	add	r3, r3, #8
   1b820:	ldr	r3, [r3]
   1b824:	ldr	r2, [fp, #4]
   1b828:	add	r2, r2, #12
   1b82c:	ldr	r2, [r2]
   1b830:	ldr	r1, [fp, #4]
   1b834:	add	r1, r1, #16
   1b838:	ldr	r1, [r1]
   1b83c:	ldr	r0, [fp, #4]
   1b840:	add	r0, r0, #20
   1b844:	ldr	r0, [r0]
   1b848:	ldr	ip, [fp, #4]
   1b84c:	add	ip, ip, #24
   1b850:	ldr	ip, [ip]
   1b854:	ldr	lr, [fp, #4]
   1b858:	add	lr, lr, #28
   1b85c:	ldr	lr, [lr]
   1b860:	str	lr, [sp, #20]
   1b864:	str	ip, [sp, #16]
   1b868:	str	r0, [sp, #12]
   1b86c:	str	r1, [sp, #8]
   1b870:	str	r2, [sp, #4]
   1b874:	str	r3, [sp]
   1b878:	mov	r3, r5
   1b87c:	mov	r2, r4
   1b880:	mov	r1, r6
   1b884:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b888:	bl	111b8 <fprintf@plt>
   1b88c:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b890:	movw	r0, #65288	; 0xff08
   1b894:	movt	r0, #1
   1b898:	bl	1117c <gettext@plt>
   1b89c:	mov	r7, r0
   1b8a0:	ldr	r3, [fp, #4]
   1b8a4:	ldr	r5, [r3]
   1b8a8:	ldr	r3, [fp, #4]
   1b8ac:	add	r3, r3, #4
   1b8b0:	ldr	r6, [r3]
   1b8b4:	ldr	r3, [fp, #4]
   1b8b8:	add	r3, r3, #8
   1b8bc:	ldr	r3, [r3]
   1b8c0:	ldr	r2, [fp, #4]
   1b8c4:	add	r2, r2, #12
   1b8c8:	ldr	r2, [r2]
   1b8cc:	ldr	r1, [fp, #4]
   1b8d0:	add	r1, r1, #16
   1b8d4:	ldr	r1, [r1]
   1b8d8:	ldr	r0, [fp, #4]
   1b8dc:	add	r0, r0, #20
   1b8e0:	ldr	r0, [r0]
   1b8e4:	ldr	ip, [fp, #4]
   1b8e8:	add	ip, ip, #24
   1b8ec:	ldr	ip, [ip]
   1b8f0:	ldr	lr, [fp, #4]
   1b8f4:	add	lr, lr, #28
   1b8f8:	ldr	lr, [lr]
   1b8fc:	ldr	r4, [fp, #4]
   1b900:	add	r4, r4, #32
   1b904:	ldr	r4, [r4]
   1b908:	str	r4, [sp, #24]
   1b90c:	str	lr, [sp, #20]
   1b910:	str	ip, [sp, #16]
   1b914:	str	r0, [sp, #12]
   1b918:	str	r1, [sp, #8]
   1b91c:	str	r2, [sp, #4]
   1b920:	str	r3, [sp]
   1b924:	mov	r3, r6
   1b928:	mov	r2, r5
   1b92c:	mov	r1, r7
   1b930:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b934:	bl	111b8 <fprintf@plt>
   1b938:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b93c:	movw	r0, #65340	; 0xff3c
   1b940:	movt	r0, #1
   1b944:	bl	1117c <gettext@plt>
   1b948:	mov	r7, r0
   1b94c:	ldr	r3, [fp, #4]
   1b950:	ldr	r5, [r3]
   1b954:	ldr	r3, [fp, #4]
   1b958:	add	r3, r3, #4
   1b95c:	ldr	r6, [r3]
   1b960:	ldr	r3, [fp, #4]
   1b964:	add	r3, r3, #8
   1b968:	ldr	r3, [r3]
   1b96c:	ldr	r2, [fp, #4]
   1b970:	add	r2, r2, #12
   1b974:	ldr	r2, [r2]
   1b978:	ldr	r1, [fp, #4]
   1b97c:	add	r1, r1, #16
   1b980:	ldr	r1, [r1]
   1b984:	ldr	r0, [fp, #4]
   1b988:	add	r0, r0, #20
   1b98c:	ldr	r0, [r0]
   1b990:	ldr	ip, [fp, #4]
   1b994:	add	ip, ip, #24
   1b998:	ldr	ip, [ip]
   1b99c:	ldr	lr, [fp, #4]
   1b9a0:	add	lr, lr, #28
   1b9a4:	ldr	lr, [lr]
   1b9a8:	ldr	r4, [fp, #4]
   1b9ac:	add	r4, r4, #32
   1b9b0:	ldr	r4, [r4]
   1b9b4:	str	r4, [sp, #24]
   1b9b8:	str	lr, [sp, #20]
   1b9bc:	str	ip, [sp, #16]
   1b9c0:	str	r0, [sp, #12]
   1b9c4:	str	r1, [sp, #8]
   1b9c8:	str	r2, [sp, #4]
   1b9cc:	str	r3, [sp]
   1b9d0:	mov	r3, r6
   1b9d4:	mov	r2, r5
   1b9d8:	mov	r1, r7
   1b9dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b9e0:	bl	111b8 <fprintf@plt>
   1b9e4:	b	1b9ec <__assert_fail@plt+0xa6f0>
   1b9e8:	nop	{0}
   1b9ec:	nop	{0}
   1b9f0:	sub	sp, fp, #20
   1b9f4:	ldrd	r4, [sp]
   1b9f8:	ldrd	r6, [sp, #8]
   1b9fc:	ldr	fp, [sp, #16]
   1ba00:	add	sp, sp, #20
   1ba04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba08:	str	fp, [sp, #-8]!
   1ba0c:	str	lr, [sp, #4]
   1ba10:	add	fp, sp, #4
   1ba14:	sub	sp, sp, #32
   1ba18:	str	r0, [fp, #-16]
   1ba1c:	str	r1, [fp, #-20]	; 0xffffffec
   1ba20:	str	r2, [fp, #-24]	; 0xffffffe8
   1ba24:	str	r3, [fp, #-28]	; 0xffffffe4
   1ba28:	mov	r3, #0
   1ba2c:	str	r3, [fp, #-8]
   1ba30:	b	1ba40 <__assert_fail@plt+0xa744>
   1ba34:	ldr	r3, [fp, #-8]
   1ba38:	add	r3, r3, #1
   1ba3c:	str	r3, [fp, #-8]
   1ba40:	ldr	r3, [fp, #-8]
   1ba44:	lsl	r3, r3, #2
   1ba48:	ldr	r2, [fp, #4]
   1ba4c:	add	r3, r2, r3
   1ba50:	ldr	r3, [r3]
   1ba54:	cmp	r3, #0
   1ba58:	bne	1ba34 <__assert_fail@plt+0xa738>
   1ba5c:	ldr	r3, [fp, #-8]
   1ba60:	str	r3, [sp, #4]
   1ba64:	ldr	r3, [fp, #4]
   1ba68:	str	r3, [sp]
   1ba6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ba70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ba74:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ba78:	ldr	r0, [fp, #-16]
   1ba7c:	bl	1b480 <__assert_fail@plt+0xa184>
   1ba80:	nop	{0}
   1ba84:	sub	sp, fp, #4
   1ba88:	ldr	fp, [sp]
   1ba8c:	add	sp, sp, #4
   1ba90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba94:	str	fp, [sp, #-8]!
   1ba98:	str	lr, [sp, #4]
   1ba9c:	add	fp, sp, #4
   1baa0:	sub	sp, sp, #72	; 0x48
   1baa4:	str	r0, [fp, #-56]	; 0xffffffc8
   1baa8:	str	r1, [fp, #-60]	; 0xffffffc4
   1baac:	str	r2, [fp, #-64]	; 0xffffffc0
   1bab0:	str	r3, [fp, #-68]	; 0xffffffbc
   1bab4:	mov	r3, #0
   1bab8:	str	r3, [fp, #-8]
   1babc:	b	1bacc <__assert_fail@plt+0xa7d0>
   1bac0:	ldr	r3, [fp, #-8]
   1bac4:	add	r3, r3, #1
   1bac8:	str	r3, [fp, #-8]
   1bacc:	ldr	r3, [fp, #-8]
   1bad0:	cmp	r3, #9
   1bad4:	bhi	1bb18 <__assert_fail@plt+0xa81c>
   1bad8:	ldr	r3, [fp, #4]
   1badc:	add	r2, r3, #4
   1bae0:	str	r2, [fp, #4]
   1bae4:	ldr	r2, [r3]
   1bae8:	ldr	r3, [fp, #-8]
   1baec:	lsl	r3, r3, #2
   1baf0:	sub	r1, fp, #4
   1baf4:	add	r3, r1, r3
   1baf8:	str	r2, [r3, #-44]	; 0xffffffd4
   1bafc:	ldr	r3, [fp, #-8]
   1bb00:	lsl	r3, r3, #2
   1bb04:	sub	r2, fp, #4
   1bb08:	add	r3, r2, r3
   1bb0c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1bb10:	cmp	r3, #0
   1bb14:	bne	1bac0 <__assert_fail@plt+0xa7c4>
   1bb18:	ldr	r3, [fp, #-8]
   1bb1c:	str	r3, [sp, #4]
   1bb20:	sub	r3, fp, #48	; 0x30
   1bb24:	str	r3, [sp]
   1bb28:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1bb2c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1bb30:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1bb34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1bb38:	bl	1b480 <__assert_fail@plt+0xa184>
   1bb3c:	nop	{0}
   1bb40:	sub	sp, fp, #4
   1bb44:	ldr	fp, [sp]
   1bb48:	add	sp, sp, #4
   1bb4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb50:	push	{r3}		; (str r3, [sp, #-4]!)
   1bb54:	str	fp, [sp, #-8]!
   1bb58:	str	lr, [sp, #4]
   1bb5c:	add	fp, sp, #4
   1bb60:	sub	sp, sp, #36	; 0x24
   1bb64:	str	r0, [fp, #-20]	; 0xffffffec
   1bb68:	str	r1, [fp, #-24]	; 0xffffffe8
   1bb6c:	str	r2, [fp, #-28]	; 0xffffffe4
   1bb70:	add	r3, fp, #8
   1bb74:	str	r3, [fp, #-12]
   1bb78:	ldr	r3, [fp, #-12]
   1bb7c:	str	r3, [sp]
   1bb80:	ldr	r3, [fp, #4]
   1bb84:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bb88:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bb8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1bb90:	bl	1ba94 <__assert_fail@plt+0xa798>
   1bb94:	nop	{0}
   1bb98:	sub	sp, fp, #4
   1bb9c:	ldr	fp, [sp]
   1bba0:	ldr	lr, [sp, #4]
   1bba4:	add	sp, sp, #8
   1bba8:	add	sp, sp, #4
   1bbac:	bx	lr
   1bbb0:	str	fp, [sp, #-8]!
   1bbb4:	str	lr, [sp, #4]
   1bbb8:	add	fp, sp, #4
   1bbbc:	movw	r3, #4500	; 0x1194
   1bbc0:	movt	r3, #3
   1bbc4:	ldr	r3, [r3]
   1bbc8:	mov	r1, r3
   1bbcc:	mov	r0, #10
   1bbd0:	bl	11074 <fputc_unlocked@plt>
   1bbd4:	movw	r0, #65400	; 0xff78
   1bbd8:	movt	r0, #1
   1bbdc:	bl	1117c <gettext@plt>
   1bbe0:	mov	r3, r0
   1bbe4:	movw	r1, #65420	; 0xff8c
   1bbe8:	movt	r1, #1
   1bbec:	mov	r0, r3
   1bbf0:	bl	11008 <printf@plt>
   1bbf4:	movw	r0, #65444	; 0xffa4
   1bbf8:	movt	r0, #1
   1bbfc:	bl	1117c <gettext@plt>
   1bc00:	mov	r3, r0
   1bc04:	movw	r2, #65464	; 0xffb8
   1bc08:	movt	r2, #1
   1bc0c:	movw	r1, #65504	; 0xffe0
   1bc10:	movt	r1, #1
   1bc14:	mov	r0, r3
   1bc18:	bl	11008 <printf@plt>
   1bc1c:	movw	r0, #65520	; 0xfff0
   1bc20:	movt	r0, #1
   1bc24:	bl	1117c <gettext@plt>
   1bc28:	mov	r3, r0
   1bc2c:	movw	r1, #24
   1bc30:	movt	r1, #2
   1bc34:	mov	r0, r3
   1bc38:	bl	11008 <printf@plt>
   1bc3c:	nop	{0}
   1bc40:	sub	sp, fp, #4
   1bc44:	ldr	fp, [sp]
   1bc48:	add	sp, sp, #4
   1bc4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc50:	str	fp, [sp, #-8]!
   1bc54:	str	lr, [sp, #4]
   1bc58:	add	fp, sp, #4
   1bc5c:	sub	sp, sp, #16
   1bc60:	str	r0, [fp, #-8]
   1bc64:	str	r1, [fp, #-12]
   1bc68:	str	r2, [fp, #-16]
   1bc6c:	ldr	r2, [fp, #-16]
   1bc70:	ldr	r1, [fp, #-12]
   1bc74:	ldr	r0, [fp, #-8]
   1bc78:	bl	1be34 <__assert_fail@plt+0xab38>
   1bc7c:	mov	r3, r0
   1bc80:	mov	r0, r3
   1bc84:	sub	sp, fp, #4
   1bc88:	ldr	fp, [sp]
   1bc8c:	add	sp, sp, #4
   1bc90:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc94:	str	fp, [sp, #-8]!
   1bc98:	str	lr, [sp, #4]
   1bc9c:	add	fp, sp, #4
   1bca0:	sub	sp, sp, #8
   1bca4:	str	r0, [fp, #-8]
   1bca8:	ldr	r3, [fp, #-8]
   1bcac:	cmp	r3, #0
   1bcb0:	bne	1bcb8 <__assert_fail@plt+0xa9bc>
   1bcb4:	bl	1c544 <__assert_fail@plt+0xb248>
   1bcb8:	ldr	r3, [fp, #-8]
   1bcbc:	mov	r0, r3
   1bcc0:	sub	sp, fp, #4
   1bcc4:	ldr	fp, [sp]
   1bcc8:	add	sp, sp, #4
   1bccc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcd0:	str	fp, [sp, #-8]!
   1bcd4:	str	lr, [sp, #4]
   1bcd8:	add	fp, sp, #4
   1bcdc:	sub	sp, sp, #8
   1bce0:	str	r0, [fp, #-8]
   1bce4:	ldr	r0, [fp, #-8]
   1bce8:	bl	1d024 <__assert_fail@plt+0xbd28>
   1bcec:	mov	r3, r0
   1bcf0:	mov	r0, r3
   1bcf4:	bl	1bc94 <__assert_fail@plt+0xa998>
   1bcf8:	mov	r3, r0
   1bcfc:	mov	r0, r3
   1bd00:	sub	sp, fp, #4
   1bd04:	ldr	fp, [sp]
   1bd08:	add	sp, sp, #4
   1bd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd10:	str	fp, [sp, #-8]!
   1bd14:	str	lr, [sp, #4]
   1bd18:	add	fp, sp, #4
   1bd1c:	sub	sp, sp, #8
   1bd20:	str	r0, [fp, #-8]
   1bd24:	ldr	r0, [fp, #-8]
   1bd28:	bl	1df70 <__assert_fail@plt+0xcc74>
   1bd2c:	mov	r3, r0
   1bd30:	mov	r0, r3
   1bd34:	bl	1bc94 <__assert_fail@plt+0xa998>
   1bd38:	mov	r3, r0
   1bd3c:	mov	r0, r3
   1bd40:	sub	sp, fp, #4
   1bd44:	ldr	fp, [sp]
   1bd48:	add	sp, sp, #4
   1bd4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd50:	str	fp, [sp, #-8]!
   1bd54:	str	lr, [sp, #4]
   1bd58:	add	fp, sp, #4
   1bd5c:	sub	sp, sp, #8
   1bd60:	str	r0, [fp, #-8]
   1bd64:	ldr	r0, [fp, #-8]
   1bd68:	bl	1bcd0 <__assert_fail@plt+0xa9d4>
   1bd6c:	mov	r3, r0
   1bd70:	mov	r0, r3
   1bd74:	sub	sp, fp, #4
   1bd78:	ldr	fp, [sp]
   1bd7c:	add	sp, sp, #4
   1bd80:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd84:	str	fp, [sp, #-8]!
   1bd88:	str	lr, [sp, #4]
   1bd8c:	add	fp, sp, #4
   1bd90:	sub	sp, sp, #16
   1bd94:	str	r0, [fp, #-16]
   1bd98:	str	r1, [fp, #-20]	; 0xffffffec
   1bd9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bda0:	ldr	r0, [fp, #-16]
   1bda4:	bl	1d0b4 <__assert_fail@plt+0xbdb8>
   1bda8:	str	r0, [fp, #-8]
   1bdac:	ldr	r3, [fp, #-8]
   1bdb0:	cmp	r3, #0
   1bdb4:	bne	1bdd4 <__assert_fail@plt+0xaad8>
   1bdb8:	ldr	r3, [fp, #-16]
   1bdbc:	cmp	r3, #0
   1bdc0:	beq	1bdd0 <__assert_fail@plt+0xaad4>
   1bdc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bdc8:	cmp	r3, #0
   1bdcc:	beq	1bdd4 <__assert_fail@plt+0xaad8>
   1bdd0:	bl	1c544 <__assert_fail@plt+0xb248>
   1bdd4:	ldr	r3, [fp, #-8]
   1bdd8:	mov	r0, r3
   1bddc:	sub	sp, fp, #4
   1bde0:	ldr	fp, [sp]
   1bde4:	add	sp, sp, #4
   1bde8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdec:	str	fp, [sp, #-8]!
   1bdf0:	str	lr, [sp, #4]
   1bdf4:	add	fp, sp, #4
   1bdf8:	sub	sp, sp, #8
   1bdfc:	str	r0, [fp, #-8]
   1be00:	str	r1, [fp, #-12]
   1be04:	ldr	r1, [fp, #-12]
   1be08:	ldr	r0, [fp, #-8]
   1be0c:	bl	1dfa8 <__assert_fail@plt+0xccac>
   1be10:	mov	r3, r0
   1be14:	mov	r0, r3
   1be18:	bl	1bc94 <__assert_fail@plt+0xa998>
   1be1c:	mov	r3, r0
   1be20:	mov	r0, r3
   1be24:	sub	sp, fp, #4
   1be28:	ldr	fp, [sp]
   1be2c:	add	sp, sp, #4
   1be30:	pop	{pc}		; (ldr pc, [sp], #4)
   1be34:	str	fp, [sp, #-8]!
   1be38:	str	lr, [sp, #4]
   1be3c:	add	fp, sp, #4
   1be40:	sub	sp, sp, #24
   1be44:	str	r0, [fp, #-16]
   1be48:	str	r1, [fp, #-20]	; 0xffffffec
   1be4c:	str	r2, [fp, #-24]	; 0xffffffe8
   1be50:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1be54:	ldr	r1, [fp, #-20]	; 0xffffffec
   1be58:	ldr	r0, [fp, #-16]
   1be5c:	bl	1e1d8 <__assert_fail@plt+0xcedc>
   1be60:	str	r0, [fp, #-8]
   1be64:	ldr	r3, [fp, #-8]
   1be68:	cmp	r3, #0
   1be6c:	bne	1be98 <__assert_fail@plt+0xab9c>
   1be70:	ldr	r3, [fp, #-16]
   1be74:	cmp	r3, #0
   1be78:	beq	1be94 <__assert_fail@plt+0xab98>
   1be7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1be80:	cmp	r3, #0
   1be84:	beq	1be98 <__assert_fail@plt+0xab9c>
   1be88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1be8c:	cmp	r3, #0
   1be90:	beq	1be98 <__assert_fail@plt+0xab9c>
   1be94:	bl	1c544 <__assert_fail@plt+0xb248>
   1be98:	ldr	r3, [fp, #-8]
   1be9c:	mov	r0, r3
   1bea0:	sub	sp, fp, #4
   1bea4:	ldr	fp, [sp]
   1bea8:	add	sp, sp, #4
   1beac:	pop	{pc}		; (ldr pc, [sp], #4)
   1beb0:	str	fp, [sp, #-8]!
   1beb4:	str	lr, [sp, #4]
   1beb8:	add	fp, sp, #4
   1bebc:	sub	sp, sp, #16
   1bec0:	str	r0, [fp, #-8]
   1bec4:	str	r1, [fp, #-12]
   1bec8:	str	r2, [fp, #-16]
   1becc:	ldr	r2, [fp, #-16]
   1bed0:	ldr	r1, [fp, #-12]
   1bed4:	ldr	r0, [fp, #-8]
   1bed8:	bl	1e048 <__assert_fail@plt+0xcd4c>
   1bedc:	mov	r3, r0
   1bee0:	mov	r0, r3
   1bee4:	bl	1bc94 <__assert_fail@plt+0xa998>
   1bee8:	mov	r3, r0
   1beec:	mov	r0, r3
   1bef0:	sub	sp, fp, #4
   1bef4:	ldr	fp, [sp]
   1bef8:	add	sp, sp, #4
   1befc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf00:	str	fp, [sp, #-8]!
   1bf04:	str	lr, [sp, #4]
   1bf08:	add	fp, sp, #4
   1bf0c:	sub	sp, sp, #8
   1bf10:	str	r0, [fp, #-8]
   1bf14:	str	r1, [fp, #-12]
   1bf18:	ldr	r2, [fp, #-12]
   1bf1c:	ldr	r1, [fp, #-8]
   1bf20:	mov	r0, #0
   1bf24:	bl	1be34 <__assert_fail@plt+0xab38>
   1bf28:	mov	r3, r0
   1bf2c:	mov	r0, r3
   1bf30:	sub	sp, fp, #4
   1bf34:	ldr	fp, [sp]
   1bf38:	add	sp, sp, #4
   1bf3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf40:	str	fp, [sp, #-8]!
   1bf44:	str	lr, [sp, #4]
   1bf48:	add	fp, sp, #4
   1bf4c:	sub	sp, sp, #8
   1bf50:	str	r0, [fp, #-8]
   1bf54:	str	r1, [fp, #-12]
   1bf58:	ldr	r2, [fp, #-12]
   1bf5c:	ldr	r1, [fp, #-8]
   1bf60:	mov	r0, #0
   1bf64:	bl	1beb0 <__assert_fail@plt+0xabb4>
   1bf68:	mov	r3, r0
   1bf6c:	mov	r0, r3
   1bf70:	sub	sp, fp, #4
   1bf74:	ldr	fp, [sp]
   1bf78:	add	sp, sp, #4
   1bf7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf80:	str	fp, [sp, #-8]!
   1bf84:	str	lr, [sp, #4]
   1bf88:	add	fp, sp, #4
   1bf8c:	sub	sp, sp, #8
   1bf90:	str	r0, [fp, #-8]
   1bf94:	str	r1, [fp, #-12]
   1bf98:	mov	r2, #1
   1bf9c:	ldr	r1, [fp, #-12]
   1bfa0:	ldr	r0, [fp, #-8]
   1bfa4:	bl	1bfc0 <__assert_fail@plt+0xacc4>
   1bfa8:	mov	r3, r0
   1bfac:	mov	r0, r3
   1bfb0:	sub	sp, fp, #4
   1bfb4:	ldr	fp, [sp]
   1bfb8:	add	sp, sp, #4
   1bfbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfc0:	str	fp, [sp, #-8]!
   1bfc4:	str	lr, [sp, #4]
   1bfc8:	add	fp, sp, #4
   1bfcc:	sub	sp, sp, #24
   1bfd0:	str	r0, [fp, #-16]
   1bfd4:	str	r1, [fp, #-20]	; 0xffffffec
   1bfd8:	str	r2, [fp, #-24]	; 0xffffffe8
   1bfdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bfe0:	ldr	r3, [r3]
   1bfe4:	str	r3, [fp, #-8]
   1bfe8:	ldr	r3, [fp, #-16]
   1bfec:	cmp	r3, #0
   1bff0:	bne	1c038 <__assert_fail@plt+0xad3c>
   1bff4:	ldr	r3, [fp, #-8]
   1bff8:	cmp	r3, #0
   1bffc:	bne	1c074 <__assert_fail@plt+0xad78>
   1c000:	mov	r2, #64	; 0x40
   1c004:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c008:	udiv	r3, r2, r3
   1c00c:	str	r3, [fp, #-8]
   1c010:	ldr	r3, [fp, #-8]
   1c014:	cmp	r3, #0
   1c018:	moveq	r3, #1
   1c01c:	movne	r3, #0
   1c020:	uxtb	r3, r3
   1c024:	mov	r2, r3
   1c028:	ldr	r3, [fp, #-8]
   1c02c:	add	r3, r2, r3
   1c030:	str	r3, [fp, #-8]
   1c034:	b	1c074 <__assert_fail@plt+0xad78>
   1c038:	ldr	r2, [fp, #-8]
   1c03c:	ldr	r3, [fp, #-8]
   1c040:	lsr	r3, r3, #1
   1c044:	add	r3, r3, #1
   1c048:	mov	r1, #0
   1c04c:	adds	r3, r2, r3
   1c050:	bcc	1c058 <__assert_fail@plt+0xad5c>
   1c054:	mov	r1, #1
   1c058:	str	r3, [fp, #-8]
   1c05c:	mov	r3, r1
   1c060:	and	r3, r3, #1
   1c064:	uxtb	r3, r3
   1c068:	cmp	r3, #0
   1c06c:	beq	1c074 <__assert_fail@plt+0xad78>
   1c070:	bl	1c544 <__assert_fail@plt+0xb248>
   1c074:	ldr	r3, [fp, #-8]
   1c078:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c07c:	mov	r1, r3
   1c080:	ldr	r0, [fp, #-16]
   1c084:	bl	1be34 <__assert_fail@plt+0xab38>
   1c088:	str	r0, [fp, #-16]
   1c08c:	ldr	r2, [fp, #-8]
   1c090:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c094:	str	r2, [r3]
   1c098:	ldr	r3, [fp, #-16]
   1c09c:	mov	r0, r3
   1c0a0:	sub	sp, fp, #4
   1c0a4:	ldr	fp, [sp]
   1c0a8:	add	sp, sp, #4
   1c0ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0b0:	str	fp, [sp, #-8]!
   1c0b4:	str	lr, [sp, #4]
   1c0b8:	add	fp, sp, #4
   1c0bc:	sub	sp, sp, #32
   1c0c0:	str	r0, [fp, #-24]	; 0xffffffe8
   1c0c4:	str	r1, [fp, #-28]	; 0xffffffe4
   1c0c8:	str	r2, [fp, #-32]	; 0xffffffe0
   1c0cc:	str	r3, [fp, #-36]	; 0xffffffdc
   1c0d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c0d4:	ldr	r3, [r3]
   1c0d8:	str	r3, [fp, #-8]
   1c0dc:	ldr	r3, [fp, #-8]
   1c0e0:	asr	r3, r3, #1
   1c0e4:	mov	r1, #0
   1c0e8:	ldr	r2, [fp, #-8]
   1c0ec:	adds	r3, r2, r3
   1c0f0:	bvc	1c0f8 <__assert_fail@plt+0xadfc>
   1c0f4:	mov	r1, #1
   1c0f8:	str	r3, [fp, #-16]
   1c0fc:	mov	r3, r1
   1c100:	and	r3, r3, #1
   1c104:	uxtb	r3, r3
   1c108:	cmp	r3, #0
   1c10c:	beq	1c118 <__assert_fail@plt+0xae1c>
   1c110:	mvn	r3, #-2147483648	; 0x80000000
   1c114:	str	r3, [fp, #-16]
   1c118:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c11c:	cmp	r3, #0
   1c120:	blt	1c13c <__assert_fail@plt+0xae40>
   1c124:	ldr	r3, [fp, #-16]
   1c128:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c12c:	cmp	r2, r3
   1c130:	bge	1c13c <__assert_fail@plt+0xae40>
   1c134:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c138:	str	r3, [fp, #-16]
   1c13c:	ldr	r2, [fp, #-16]
   1c140:	mov	lr, #0
   1c144:	ldr	r3, [fp, #4]
   1c148:	smull	r2, r3, r2, r3
   1c14c:	mov	r0, #0
   1c150:	mov	r1, #0
   1c154:	mov	r0, r3
   1c158:	asr	r1, r3, #31
   1c15c:	asr	ip, r2, #31
   1c160:	cmp	ip, r0
   1c164:	beq	1c16c <__assert_fail@plt+0xae70>
   1c168:	mov	lr, #1
   1c16c:	mov	r3, r2
   1c170:	str	r3, [fp, #-20]	; 0xffffffec
   1c174:	mov	r3, lr
   1c178:	and	r3, r3, #1
   1c17c:	uxtb	r3, r3
   1c180:	cmp	r3, #0
   1c184:	beq	1c190 <__assert_fail@plt+0xae94>
   1c188:	mvn	r3, #-2147483648	; 0x80000000
   1c18c:	b	1c1a8 <__assert_fail@plt+0xaeac>
   1c190:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c194:	cmp	r3, #63	; 0x3f
   1c198:	bgt	1c1a4 <__assert_fail@plt+0xaea8>
   1c19c:	mov	r3, #64	; 0x40
   1c1a0:	b	1c1a8 <__assert_fail@plt+0xaeac>
   1c1a4:	mov	r3, #0
   1c1a8:	str	r3, [fp, #-12]
   1c1ac:	ldr	r3, [fp, #-12]
   1c1b0:	cmp	r3, #0
   1c1b4:	beq	1c1ec <__assert_fail@plt+0xaef0>
   1c1b8:	ldr	r2, [fp, #-12]
   1c1bc:	ldr	r3, [fp, #4]
   1c1c0:	sdiv	r3, r2, r3
   1c1c4:	str	r3, [fp, #-16]
   1c1c8:	ldr	r3, [fp, #-12]
   1c1cc:	ldr	r2, [fp, #4]
   1c1d0:	sdiv	r2, r3, r2
   1c1d4:	ldr	r1, [fp, #4]
   1c1d8:	mul	r2, r1, r2
   1c1dc:	sub	r3, r3, r2
   1c1e0:	ldr	r2, [fp, #-12]
   1c1e4:	sub	r3, r2, r3
   1c1e8:	str	r3, [fp, #-20]	; 0xffffffec
   1c1ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c1f0:	cmp	r3, #0
   1c1f4:	bne	1c204 <__assert_fail@plt+0xaf08>
   1c1f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c1fc:	mov	r2, #0
   1c200:	str	r2, [r3]
   1c204:	ldr	r2, [fp, #-16]
   1c208:	ldr	r3, [fp, #-8]
   1c20c:	sub	r3, r2, r3
   1c210:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c214:	cmp	r2, r3
   1c218:	ble	1c2b8 <__assert_fail@plt+0xafbc>
   1c21c:	mov	r1, #0
   1c220:	ldr	r2, [fp, #-8]
   1c224:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c228:	adds	r3, r2, r3
   1c22c:	bvc	1c234 <__assert_fail@plt+0xaf38>
   1c230:	mov	r1, #1
   1c234:	str	r3, [fp, #-16]
   1c238:	mov	r3, r1
   1c23c:	and	r3, r3, #1
   1c240:	uxtb	r3, r3
   1c244:	cmp	r3, #0
   1c248:	bne	1c2b4 <__assert_fail@plt+0xafb8>
   1c24c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c250:	cmp	r3, #0
   1c254:	blt	1c268 <__assert_fail@plt+0xaf6c>
   1c258:	ldr	r3, [fp, #-16]
   1c25c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c260:	cmp	r2, r3
   1c264:	blt	1c2b4 <__assert_fail@plt+0xafb8>
   1c268:	ldr	r2, [fp, #-16]
   1c26c:	mov	lr, #0
   1c270:	ldr	r3, [fp, #4]
   1c274:	smull	r2, r3, r2, r3
   1c278:	mov	r0, #0
   1c27c:	mov	r1, #0
   1c280:	mov	r0, r3
   1c284:	asr	r1, r3, #31
   1c288:	asr	ip, r2, #31
   1c28c:	cmp	ip, r0
   1c290:	beq	1c298 <__assert_fail@plt+0xaf9c>
   1c294:	mov	lr, #1
   1c298:	mov	r3, r2
   1c29c:	str	r3, [fp, #-20]	; 0xffffffec
   1c2a0:	mov	r3, lr
   1c2a4:	and	r3, r3, #1
   1c2a8:	uxtb	r3, r3
   1c2ac:	cmp	r3, #0
   1c2b0:	beq	1c2b8 <__assert_fail@plt+0xafbc>
   1c2b4:	bl	1c544 <__assert_fail@plt+0xb248>
   1c2b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c2bc:	mov	r1, r3
   1c2c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c2c4:	bl	1bd84 <__assert_fail@plt+0xaa88>
   1c2c8:	str	r0, [fp, #-24]	; 0xffffffe8
   1c2cc:	ldr	r2, [fp, #-16]
   1c2d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c2d4:	str	r2, [r3]
   1c2d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c2dc:	mov	r0, r3
   1c2e0:	sub	sp, fp, #4
   1c2e4:	ldr	fp, [sp]
   1c2e8:	add	sp, sp, #4
   1c2ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2f0:	str	fp, [sp, #-8]!
   1c2f4:	str	lr, [sp, #4]
   1c2f8:	add	fp, sp, #4
   1c2fc:	sub	sp, sp, #8
   1c300:	str	r0, [fp, #-8]
   1c304:	mov	r1, #1
   1c308:	ldr	r0, [fp, #-8]
   1c30c:	bl	1c360 <__assert_fail@plt+0xb064>
   1c310:	mov	r3, r0
   1c314:	mov	r0, r3
   1c318:	sub	sp, fp, #4
   1c31c:	ldr	fp, [sp]
   1c320:	add	sp, sp, #4
   1c324:	pop	{pc}		; (ldr pc, [sp], #4)
   1c328:	str	fp, [sp, #-8]!
   1c32c:	str	lr, [sp, #4]
   1c330:	add	fp, sp, #4
   1c334:	sub	sp, sp, #8
   1c338:	str	r0, [fp, #-8]
   1c33c:	mov	r1, #1
   1c340:	ldr	r0, [fp, #-8]
   1c344:	bl	1c3a8 <__assert_fail@plt+0xb0ac>
   1c348:	mov	r3, r0
   1c34c:	mov	r0, r3
   1c350:	sub	sp, fp, #4
   1c354:	ldr	fp, [sp]
   1c358:	add	sp, sp, #4
   1c35c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c360:	str	fp, [sp, #-8]!
   1c364:	str	lr, [sp, #4]
   1c368:	add	fp, sp, #4
   1c36c:	sub	sp, sp, #8
   1c370:	str	r0, [fp, #-8]
   1c374:	str	r1, [fp, #-12]
   1c378:	ldr	r1, [fp, #-12]
   1c37c:	ldr	r0, [fp, #-8]
   1c380:	bl	1cf54 <__assert_fail@plt+0xbc58>
   1c384:	mov	r3, r0
   1c388:	mov	r0, r3
   1c38c:	bl	1bc94 <__assert_fail@plt+0xa998>
   1c390:	mov	r3, r0
   1c394:	mov	r0, r3
   1c398:	sub	sp, fp, #4
   1c39c:	ldr	fp, [sp]
   1c3a0:	add	sp, sp, #4
   1c3a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3a8:	str	fp, [sp, #-8]!
   1c3ac:	str	lr, [sp, #4]
   1c3b0:	add	fp, sp, #4
   1c3b4:	sub	sp, sp, #8
   1c3b8:	str	r0, [fp, #-8]
   1c3bc:	str	r1, [fp, #-12]
   1c3c0:	ldr	r1, [fp, #-12]
   1c3c4:	ldr	r0, [fp, #-8]
   1c3c8:	bl	1e004 <__assert_fail@plt+0xcd08>
   1c3cc:	mov	r3, r0
   1c3d0:	mov	r0, r3
   1c3d4:	bl	1bc94 <__assert_fail@plt+0xa998>
   1c3d8:	mov	r3, r0
   1c3dc:	mov	r0, r3
   1c3e0:	sub	sp, fp, #4
   1c3e4:	ldr	fp, [sp]
   1c3e8:	add	sp, sp, #4
   1c3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3f0:	str	fp, [sp, #-8]!
   1c3f4:	str	lr, [sp, #4]
   1c3f8:	add	fp, sp, #4
   1c3fc:	sub	sp, sp, #8
   1c400:	str	r0, [fp, #-8]
   1c404:	str	r1, [fp, #-12]
   1c408:	ldr	r0, [fp, #-12]
   1c40c:	bl	1bcd0 <__assert_fail@plt+0xa9d4>
   1c410:	mov	r3, r0
   1c414:	ldr	r2, [fp, #-12]
   1c418:	ldr	r1, [fp, #-8]
   1c41c:	mov	r0, r3
   1c420:	bl	11044 <memcpy@plt>
   1c424:	mov	r3, r0
   1c428:	mov	r0, r3
   1c42c:	sub	sp, fp, #4
   1c430:	ldr	fp, [sp]
   1c434:	add	sp, sp, #4
   1c438:	pop	{pc}		; (ldr pc, [sp], #4)
   1c43c:	str	fp, [sp, #-8]!
   1c440:	str	lr, [sp, #4]
   1c444:	add	fp, sp, #4
   1c448:	sub	sp, sp, #8
   1c44c:	str	r0, [fp, #-8]
   1c450:	str	r1, [fp, #-12]
   1c454:	ldr	r0, [fp, #-12]
   1c458:	bl	1bd10 <__assert_fail@plt+0xaa14>
   1c45c:	mov	r3, r0
   1c460:	mov	r0, r3
   1c464:	ldr	r3, [fp, #-12]
   1c468:	mov	r2, r3
   1c46c:	ldr	r1, [fp, #-8]
   1c470:	bl	11044 <memcpy@plt>
   1c474:	mov	r3, r0
   1c478:	mov	r0, r3
   1c47c:	sub	sp, fp, #4
   1c480:	ldr	fp, [sp]
   1c484:	add	sp, sp, #4
   1c488:	pop	{pc}		; (ldr pc, [sp], #4)
   1c48c:	str	fp, [sp, #-8]!
   1c490:	str	lr, [sp, #4]
   1c494:	add	fp, sp, #4
   1c498:	sub	sp, sp, #16
   1c49c:	str	r0, [fp, #-16]
   1c4a0:	str	r1, [fp, #-20]	; 0xffffffec
   1c4a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c4a8:	add	r3, r3, #1
   1c4ac:	mov	r0, r3
   1c4b0:	bl	1bd10 <__assert_fail@plt+0xaa14>
   1c4b4:	mov	r3, r0
   1c4b8:	str	r3, [fp, #-8]
   1c4bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c4c0:	ldr	r2, [fp, #-8]
   1c4c4:	add	r3, r2, r3
   1c4c8:	mov	r2, #0
   1c4cc:	strb	r2, [r3]
   1c4d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c4d4:	mov	r2, r3
   1c4d8:	ldr	r1, [fp, #-16]
   1c4dc:	ldr	r0, [fp, #-8]
   1c4e0:	bl	11044 <memcpy@plt>
   1c4e4:	mov	r3, r0
   1c4e8:	mov	r0, r3
   1c4ec:	sub	sp, fp, #4
   1c4f0:	ldr	fp, [sp]
   1c4f4:	add	sp, sp, #4
   1c4f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4fc:	str	fp, [sp, #-8]!
   1c500:	str	lr, [sp, #4]
   1c504:	add	fp, sp, #4
   1c508:	sub	sp, sp, #8
   1c50c:	str	r0, [fp, #-8]
   1c510:	ldr	r0, [fp, #-8]
   1c514:	bl	11188 <strlen@plt>
   1c518:	mov	r3, r0
   1c51c:	add	r3, r3, #1
   1c520:	mov	r1, r3
   1c524:	ldr	r0, [fp, #-8]
   1c528:	bl	1c3f0 <__assert_fail@plt+0xb0f4>
   1c52c:	mov	r3, r0
   1c530:	mov	r0, r3
   1c534:	sub	sp, fp, #4
   1c538:	ldr	fp, [sp]
   1c53c:	add	sp, sp, #4
   1c540:	pop	{pc}		; (ldr pc, [sp], #4)
   1c544:	strd	r4, [sp, #-16]!
   1c548:	str	fp, [sp, #8]
   1c54c:	str	lr, [sp, #12]
   1c550:	add	fp, sp, #12
   1c554:	movw	r3, #4408	; 0x1138
   1c558:	movt	r3, #3
   1c55c:	ldr	r4, [r3]
   1c560:	movw	r0, #104	; 0x68
   1c564:	movt	r0, #2
   1c568:	bl	1117c <gettext@plt>
   1c56c:	mov	r3, r0
   1c570:	movw	r2, #124	; 0x7c
   1c574:	movt	r2, #2
   1c578:	mov	r1, #0
   1c57c:	mov	r0, r4
   1c580:	bl	11110 <error@plt>
   1c584:	bl	112b4 <abort@plt>
   1c588:	str	fp, [sp, #-8]!
   1c58c:	str	lr, [sp, #4]
   1c590:	add	fp, sp, #4
   1c594:	sub	sp, sp, #24
   1c598:	str	r0, [fp, #-16]
   1c59c:	str	r1, [fp, #-20]	; 0xffffffec
   1c5a0:	str	r2, [fp, #-24]	; 0xffffffe8
   1c5a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c5a8:	orr	r3, r3, #512	; 0x200
   1c5ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c5b0:	mov	r1, r3
   1c5b4:	ldr	r0, [fp, #-16]
   1c5b8:	bl	13d7c <__assert_fail@plt+0x2a80>
   1c5bc:	str	r0, [fp, #-8]
   1c5c0:	ldr	r3, [fp, #-8]
   1c5c4:	cmp	r3, #0
   1c5c8:	bne	1c604 <__assert_fail@plt+0xb308>
   1c5cc:	bl	111c4 <__errno_location@plt>
   1c5d0:	mov	r3, r0
   1c5d4:	ldr	r3, [r3]
   1c5d8:	cmp	r3, #22
   1c5dc:	bne	1c600 <__assert_fail@plt+0xb304>
   1c5e0:	movw	r3, #156	; 0x9c
   1c5e4:	movt	r3, #2
   1c5e8:	mov	r2, #41	; 0x29
   1c5ec:	movw	r1, #128	; 0x80
   1c5f0:	movt	r1, #2
   1c5f4:	movw	r0, #140	; 0x8c
   1c5f8:	movt	r0, #2
   1c5fc:	bl	112fc <__assert_fail@plt>
   1c600:	bl	1c544 <__assert_fail@plt+0xb248>
   1c604:	ldr	r3, [fp, #-8]
   1c608:	mov	r0, r3
   1c60c:	sub	sp, fp, #4
   1c610:	ldr	fp, [sp]
   1c614:	add	sp, sp, #4
   1c618:	pop	{pc}		; (ldr pc, [sp], #4)
   1c61c:	push	{fp}		; (str fp, [sp, #-4]!)
   1c620:	add	fp, sp, #0
   1c624:	sub	sp, sp, #12
   1c628:	str	r0, [fp, #-8]
   1c62c:	str	r1, [fp, #-12]
   1c630:	ldr	r3, [fp, #-8]
   1c634:	ldr	r3, [r3, #48]	; 0x30
   1c638:	and	r3, r3, #16
   1c63c:	cmp	r3, #0
   1c640:	beq	1c658 <__assert_fail@plt+0xb35c>
   1c644:	ldr	r3, [fp, #-8]
   1c648:	ldr	r3, [r3, #48]	; 0x30
   1c64c:	and	r3, r3, #1
   1c650:	cmp	r3, #0
   1c654:	beq	1c690 <__assert_fail@plt+0xb394>
   1c658:	ldr	r3, [fp, #-8]
   1c65c:	ldr	r3, [r3, #48]	; 0x30
   1c660:	and	r3, r3, #16
   1c664:	cmp	r3, #0
   1c668:	beq	1c698 <__assert_fail@plt+0xb39c>
   1c66c:	ldr	r3, [fp, #-8]
   1c670:	ldr	r3, [r3, #48]	; 0x30
   1c674:	and	r3, r3, #1
   1c678:	cmp	r3, #0
   1c67c:	beq	1c698 <__assert_fail@plt+0xb39c>
   1c680:	ldr	r3, [fp, #-12]
   1c684:	ldr	r3, [r3, #48]	; 0x30
   1c688:	cmp	r3, #0
   1c68c:	beq	1c698 <__assert_fail@plt+0xb39c>
   1c690:	mov	r3, #1
   1c694:	b	1c69c <__assert_fail@plt+0xb3a0>
   1c698:	mov	r3, #0
   1c69c:	and	r3, r3, #1
   1c6a0:	uxtb	r3, r3
   1c6a4:	mov	r0, r3
   1c6a8:	add	sp, fp, #0
   1c6ac:	pop	{fp}		; (ldr fp, [sp], #4)
   1c6b0:	bx	lr
   1c6b4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1c6b8:	strd	r6, [sp, #8]
   1c6bc:	strd	r8, [sp, #16]
   1c6c0:	str	fp, [sp, #24]
   1c6c4:	add	fp, sp, #24
   1c6c8:	sub	sp, sp, #44	; 0x2c
   1c6cc:	str	r0, [fp, #-40]	; 0xffffffd8
   1c6d0:	str	r1, [fp, #-44]	; 0xffffffd4
   1c6d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c6d8:	ldrd	r4, [r3]
   1c6dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1c6e0:	mov	r6, r3
   1c6e4:	asr	r7, r6, #31
   1c6e8:	mov	r2, #0
   1c6ec:	mov	r3, #0
   1c6f0:	strd	r2, [fp, #-60]	; 0xffffffc4
   1c6f4:	cmp	r6, #0
   1c6f8:	sbcs	r3, r7, #0
   1c6fc:	bge	1c714 <__assert_fail@plt+0xb418>
   1c700:	orrs	r3, r4, r5
   1c704:	beq	1c714 <__assert_fail@plt+0xb418>
   1c708:	mov	r2, #1
   1c70c:	mov	r3, #0
   1c710:	strd	r2, [fp, #-60]	; 0xffffffc4
   1c714:	mov	r0, #0
   1c718:	mov	r1, #0
   1c71c:	mov	r0, r7
   1c720:	mov	r1, #0
   1c724:	mov	r2, #0
   1c728:	mov	r3, #0
   1c72c:	mov	r2, r5
   1c730:	mov	r3, #0
   1c734:	cmp	r0, #0
   1c738:	bne	1c75c <__assert_fail@plt+0xb460>
   1c73c:	cmp	r2, #0
   1c740:	bne	1c750 <__assert_fail@plt+0xb454>
   1c744:	umull	r2, r3, r6, r4
   1c748:	strd	r2, [fp, #-52]	; 0xffffffcc
   1c74c:	b	1c828 <__assert_fail@plt+0xb52c>
   1c750:	mov	r3, r2
   1c754:	mov	r2, r6
   1c758:	b	1c76c <__assert_fail@plt+0xb470>
   1c75c:	cmp	r2, #0
   1c760:	bne	1c7e4 <__assert_fail@plt+0xb4e8>
   1c764:	mov	r3, r0
   1c768:	mov	r2, r4
   1c76c:	umull	r8, r9, r6, r4
   1c770:	umull	r2, r3, r2, r3
   1c774:	mov	r0, r2
   1c778:	mov	r1, r3
   1c77c:	mov	r2, #0
   1c780:	mov	r3, #0
   1c784:	mov	r2, r9
   1c788:	mov	r3, #0
   1c78c:	adds	ip, r0, r2
   1c790:	str	ip, [fp, #-68]	; 0xffffffbc
   1c794:	adc	r3, r1, r3
   1c798:	str	r3, [fp, #-64]	; 0xffffffc0
   1c79c:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   1c7a0:	mov	r2, #0
   1c7a4:	mov	r3, #0
   1c7a8:	mov	r2, r1
   1c7ac:	asr	r3, r1, #31
   1c7b0:	cmp	r2, #0
   1c7b4:	bne	1c800 <__assert_fail@plt+0xb504>
   1c7b8:	mov	r2, #0
   1c7bc:	mov	r3, #0
   1c7c0:	mov	r3, r0
   1c7c4:	mov	r2, #0
   1c7c8:	mov	r0, r8
   1c7cc:	mov	r1, #0
   1c7d0:	orr	ip, r2, r0
   1c7d4:	str	ip, [fp, #-52]	; 0xffffffcc
   1c7d8:	orr	r3, r3, r1
   1c7dc:	str	r3, [fp, #-48]	; 0xffffffd0
   1c7e0:	b	1c828 <__assert_fail@plt+0xb52c>
   1c7e4:	mul	r2, r4, r7
   1c7e8:	mul	r3, r6, r5
   1c7ec:	add	r1, r2, r3
   1c7f0:	umull	r2, r3, r6, r4
   1c7f4:	add	r1, r1, r3
   1c7f8:	mov	r3, r1
   1c7fc:	strd	r2, [fp, #-52]	; 0xffffffcc
   1c800:	mul	r2, r4, r7
   1c804:	mul	r3, r6, r5
   1c808:	add	r1, r2, r3
   1c80c:	umull	r2, r3, r6, r4
   1c810:	add	r1, r1, r3
   1c814:	mov	r3, r1
   1c818:	strd	r2, [fp, #-52]	; 0xffffffcc
   1c81c:	mov	r2, #1
   1c820:	mov	r3, #0
   1c824:	strd	r2, [fp, #-60]	; 0xffffffc4
   1c828:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1c82c:	strd	r2, [fp, #-36]	; 0xffffffdc
   1c830:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1c834:	mov	r3, r2
   1c838:	and	r3, r3, #1
   1c83c:	uxtb	r3, r3
   1c840:	cmp	r3, #0
   1c844:	beq	1c860 <__assert_fail@plt+0xb564>
   1c848:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1c84c:	mvn	r2, #0
   1c850:	mvn	r3, #0
   1c854:	strd	r2, [r1]
   1c858:	mov	r3, #1
   1c85c:	b	1c870 <__assert_fail@plt+0xb574>
   1c860:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1c864:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1c868:	strd	r2, [r1]
   1c86c:	mov	r3, #0
   1c870:	mov	r0, r3
   1c874:	sub	sp, fp, #24
   1c878:	ldrd	r4, [sp]
   1c87c:	ldrd	r6, [sp, #8]
   1c880:	ldrd	r8, [sp, #16]
   1c884:	ldr	fp, [sp, #24]
   1c888:	add	sp, sp, #28
   1c88c:	bx	lr
   1c890:	str	fp, [sp, #-8]!
   1c894:	str	lr, [sp, #4]
   1c898:	add	fp, sp, #4
   1c89c:	sub	sp, sp, #24
   1c8a0:	str	r0, [fp, #-16]
   1c8a4:	str	r1, [fp, #-20]	; 0xffffffec
   1c8a8:	str	r2, [fp, #-24]	; 0xffffffe8
   1c8ac:	mov	r3, #0
   1c8b0:	str	r3, [fp, #-8]
   1c8b4:	b	1c8d4 <__assert_fail@plt+0xb5d8>
   1c8b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c8bc:	ldr	r0, [fp, #-16]
   1c8c0:	bl	1c6b4 <__assert_fail@plt+0xb3b8>
   1c8c4:	mov	r2, r0
   1c8c8:	ldr	r3, [fp, #-8]
   1c8cc:	orr	r3, r3, r2
   1c8d0:	str	r3, [fp, #-8]
   1c8d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c8d8:	sub	r2, r3, #1
   1c8dc:	str	r2, [fp, #-24]	; 0xffffffe8
   1c8e0:	cmp	r3, #0
   1c8e4:	bne	1c8b8 <__assert_fail@plt+0xb5bc>
   1c8e8:	ldr	r3, [fp, #-8]
   1c8ec:	mov	r0, r3
   1c8f0:	sub	sp, fp, #4
   1c8f4:	ldr	fp, [sp]
   1c8f8:	add	sp, sp, #4
   1c8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c900:	str	fp, [sp, #-8]!
   1c904:	str	lr, [sp, #4]
   1c908:	add	fp, sp, #4
   1c90c:	sub	sp, sp, #56	; 0x38
   1c910:	str	r0, [fp, #-48]	; 0xffffffd0
   1c914:	str	r1, [fp, #-52]	; 0xffffffcc
   1c918:	str	r2, [fp, #-56]	; 0xffffffc8
   1c91c:	str	r3, [fp, #-60]	; 0xffffffc4
   1c920:	mov	r3, #0
   1c924:	str	r3, [fp, #-8]
   1c928:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c92c:	cmp	r3, #0
   1c930:	blt	1c940 <__assert_fail@plt+0xb644>
   1c934:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c938:	cmp	r3, #36	; 0x24
   1c93c:	ble	1c960 <__assert_fail@plt+0xb664>
   1c940:	movw	r3, #224	; 0xe0
   1c944:	movt	r3, #2
   1c948:	mov	r2, #85	; 0x55
   1c94c:	movw	r1, #168	; 0xa8
   1c950:	movt	r1, #2
   1c954:	movw	r0, #184	; 0xb8
   1c958:	movt	r0, #2
   1c95c:	bl	112fc <__assert_fail@plt>
   1c960:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c964:	cmp	r3, #0
   1c968:	bne	1c974 <__assert_fail@plt+0xb678>
   1c96c:	sub	r3, fp, #36	; 0x24
   1c970:	b	1c978 <__assert_fail@plt+0xb67c>
   1c974:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c978:	str	r3, [fp, #-32]	; 0xffffffe0
   1c97c:	bl	111c4 <__errno_location@plt>
   1c980:	mov	r2, r0
   1c984:	mov	r3, #0
   1c988:	str	r3, [r2]
   1c98c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c990:	str	r3, [fp, #-12]
   1c994:	ldr	r3, [fp, #-12]
   1c998:	ldrb	r3, [r3]
   1c99c:	strb	r3, [fp, #-13]
   1c9a0:	b	1c9bc <__assert_fail@plt+0xb6c0>
   1c9a4:	ldr	r3, [fp, #-12]
   1c9a8:	add	r3, r3, #1
   1c9ac:	str	r3, [fp, #-12]
   1c9b0:	ldr	r3, [fp, #-12]
   1c9b4:	ldrb	r3, [r3]
   1c9b8:	strb	r3, [fp, #-13]
   1c9bc:	bl	11164 <__ctype_b_loc@plt>
   1c9c0:	mov	r3, r0
   1c9c4:	ldr	r2, [r3]
   1c9c8:	ldrb	r3, [fp, #-13]
   1c9cc:	lsl	r3, r3, #1
   1c9d0:	add	r3, r2, r3
   1c9d4:	ldrh	r3, [r3]
   1c9d8:	and	r3, r3, #8192	; 0x2000
   1c9dc:	cmp	r3, #0
   1c9e0:	bne	1c9a4 <__assert_fail@plt+0xb6a8>
   1c9e4:	ldrb	r3, [fp, #-13]
   1c9e8:	cmp	r3, #45	; 0x2d
   1c9ec:	bne	1c9f8 <__assert_fail@plt+0xb6fc>
   1c9f0:	mov	r3, #4
   1c9f4:	b	1cf40 <__assert_fail@plt+0xbc44>
   1c9f8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1c9fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ca00:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ca04:	bl	111f4 <strtoumax@plt>
   1ca08:	mov	r2, r0
   1ca0c:	mov	r3, r1
   1ca10:	strd	r2, [fp, #-44]	; 0xffffffd4
   1ca14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ca18:	ldr	r3, [r3]
   1ca1c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ca20:	cmp	r2, r3
   1ca24:	bne	1ca84 <__assert_fail@plt+0xb788>
   1ca28:	ldr	r3, [fp, #4]
   1ca2c:	cmp	r3, #0
   1ca30:	beq	1ca7c <__assert_fail@plt+0xb780>
   1ca34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ca38:	ldr	r3, [r3]
   1ca3c:	ldrb	r3, [r3]
   1ca40:	cmp	r3, #0
   1ca44:	beq	1ca7c <__assert_fail@plt+0xb780>
   1ca48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ca4c:	ldr	r3, [r3]
   1ca50:	ldrb	r3, [r3]
   1ca54:	mov	r1, r3
   1ca58:	ldr	r0, [fp, #4]
   1ca5c:	bl	11194 <strchr@plt>
   1ca60:	mov	r3, r0
   1ca64:	cmp	r3, #0
   1ca68:	beq	1ca7c <__assert_fail@plt+0xb780>
   1ca6c:	mov	r2, #1
   1ca70:	mov	r3, #0
   1ca74:	strd	r2, [fp, #-44]	; 0xffffffd4
   1ca78:	b	1cabc <__assert_fail@plt+0xb7c0>
   1ca7c:	mov	r3, #4
   1ca80:	b	1cf40 <__assert_fail@plt+0xbc44>
   1ca84:	bl	111c4 <__errno_location@plt>
   1ca88:	mov	r3, r0
   1ca8c:	ldr	r3, [r3]
   1ca90:	cmp	r3, #0
   1ca94:	beq	1cabc <__assert_fail@plt+0xb7c0>
   1ca98:	bl	111c4 <__errno_location@plt>
   1ca9c:	mov	r3, r0
   1caa0:	ldr	r3, [r3]
   1caa4:	cmp	r3, #34	; 0x22
   1caa8:	beq	1cab4 <__assert_fail@plt+0xb7b8>
   1caac:	mov	r3, #4
   1cab0:	b	1cf40 <__assert_fail@plt+0xbc44>
   1cab4:	mov	r3, #1
   1cab8:	str	r3, [fp, #-8]
   1cabc:	ldr	r3, [fp, #4]
   1cac0:	cmp	r3, #0
   1cac4:	bne	1cadc <__assert_fail@plt+0xb7e0>
   1cac8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1cacc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1cad0:	strd	r2, [r1]
   1cad4:	ldr	r3, [fp, #-8]
   1cad8:	b	1cf40 <__assert_fail@plt+0xbc44>
   1cadc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cae0:	ldr	r3, [r3]
   1cae4:	ldrb	r3, [r3]
   1cae8:	cmp	r3, #0
   1caec:	beq	1cf30 <__assert_fail@plt+0xbc34>
   1caf0:	mov	r3, #1024	; 0x400
   1caf4:	str	r3, [fp, #-20]	; 0xffffffec
   1caf8:	mov	r3, #1
   1cafc:	str	r3, [fp, #-24]	; 0xffffffe8
   1cb00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cb04:	ldr	r3, [r3]
   1cb08:	ldrb	r3, [r3]
   1cb0c:	mov	r1, r3
   1cb10:	ldr	r0, [fp, #4]
   1cb14:	bl	11194 <strchr@plt>
   1cb18:	mov	r3, r0
   1cb1c:	cmp	r3, #0
   1cb20:	bne	1cb3c <__assert_fail@plt+0xb840>
   1cb24:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1cb28:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1cb2c:	strd	r2, [r1]
   1cb30:	ldr	r3, [fp, #-8]
   1cb34:	orr	r3, r3, #2
   1cb38:	b	1cf40 <__assert_fail@plt+0xbc44>
   1cb3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cb40:	ldr	r3, [r3]
   1cb44:	ldrb	r3, [r3]
   1cb48:	sub	r3, r3, #69	; 0x45
   1cb4c:	cmp	r3, #47	; 0x2f
   1cb50:	ldrls	pc, [pc, r3, lsl #2]
   1cb54:	b	1cca8 <__assert_fail@plt+0xb9ac>
   1cb58:	andeq	ip, r1, r8, lsl ip
   1cb5c:	andeq	ip, r1, r8, lsr #25
   1cb60:	andeq	ip, r1, r8, lsl ip
   1cb64:	andeq	ip, r1, r8, lsr #25
   1cb68:	andeq	ip, r1, r8, lsr #25
   1cb6c:	andeq	ip, r1, r8, lsr #25
   1cb70:	andeq	ip, r1, r8, lsl ip
   1cb74:	andeq	ip, r1, r8, lsr #25
   1cb78:	andeq	ip, r1, r8, lsl ip
   1cb7c:	andeq	ip, r1, r8, lsr #25
   1cb80:	andeq	ip, r1, r8, lsr #25
   1cb84:	andeq	ip, r1, r8, lsl ip
   1cb88:	andeq	ip, r1, r8, lsr #25
   1cb8c:	andeq	ip, r1, r8, lsr #25
   1cb90:	andeq	ip, r1, r8, lsr #25
   1cb94:	andeq	ip, r1, r8, lsl ip
   1cb98:	andeq	ip, r1, r8, lsr #25
   1cb9c:	andeq	ip, r1, r8, lsr #25
   1cba0:	andeq	ip, r1, r8, lsr #25
   1cba4:	andeq	ip, r1, r8, lsr #25
   1cba8:	andeq	ip, r1, r8, lsl ip
   1cbac:	andeq	ip, r1, r8, lsl ip
   1cbb0:	andeq	ip, r1, r8, lsr #25
   1cbb4:	andeq	ip, r1, r8, lsr #25
   1cbb8:	andeq	ip, r1, r8, lsr #25
   1cbbc:	andeq	ip, r1, r8, lsr #25
   1cbc0:	andeq	ip, r1, r8, lsr #25
   1cbc4:	andeq	ip, r1, r8, lsr #25
   1cbc8:	andeq	ip, r1, r8, lsr #25
   1cbcc:	andeq	ip, r1, r8, lsr #25
   1cbd0:	andeq	ip, r1, r8, lsr #25
   1cbd4:	andeq	ip, r1, r8, lsr #25
   1cbd8:	andeq	ip, r1, r8, lsr #25
   1cbdc:	andeq	ip, r1, r8, lsr #25
   1cbe0:	andeq	ip, r1, r8, lsl ip
   1cbe4:	andeq	ip, r1, r8, lsr #25
   1cbe8:	andeq	ip, r1, r8, lsr #25
   1cbec:	andeq	ip, r1, r8, lsr #25
   1cbf0:	andeq	ip, r1, r8, lsl ip
   1cbf4:	andeq	ip, r1, r8, lsr #25
   1cbf8:	andeq	ip, r1, r8, lsl ip
   1cbfc:	andeq	ip, r1, r8, lsr #25
   1cc00:	andeq	ip, r1, r8, lsr #25
   1cc04:	andeq	ip, r1, r8, lsr #25
   1cc08:	andeq	ip, r1, r8, lsr #25
   1cc0c:	andeq	ip, r1, r8, lsr #25
   1cc10:	andeq	ip, r1, r8, lsr #25
   1cc14:	andeq	ip, r1, r8, lsl ip
   1cc18:	mov	r1, #48	; 0x30
   1cc1c:	ldr	r0, [fp, #4]
   1cc20:	bl	11194 <strchr@plt>
   1cc24:	mov	r3, r0
   1cc28:	cmp	r3, #0
   1cc2c:	beq	1cc9c <__assert_fail@plt+0xb9a0>
   1cc30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc34:	ldr	r3, [r3]
   1cc38:	add	r3, r3, #1
   1cc3c:	ldrb	r3, [r3]
   1cc40:	cmp	r3, #68	; 0x44
   1cc44:	beq	1cc84 <__assert_fail@plt+0xb988>
   1cc48:	cmp	r3, #105	; 0x69
   1cc4c:	beq	1cc5c <__assert_fail@plt+0xb960>
   1cc50:	cmp	r3, #66	; 0x42
   1cc54:	beq	1cc84 <__assert_fail@plt+0xb988>
   1cc58:	b	1cca8 <__assert_fail@plt+0xb9ac>
   1cc5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc60:	ldr	r3, [r3]
   1cc64:	add	r3, r3, #2
   1cc68:	ldrb	r3, [r3]
   1cc6c:	cmp	r3, #66	; 0x42
   1cc70:	bne	1cca4 <__assert_fail@plt+0xb9a8>
   1cc74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cc78:	add	r3, r3, #2
   1cc7c:	str	r3, [fp, #-24]	; 0xffffffe8
   1cc80:	b	1cca4 <__assert_fail@plt+0xb9a8>
   1cc84:	mov	r3, #1000	; 0x3e8
   1cc88:	str	r3, [fp, #-20]	; 0xffffffec
   1cc8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cc90:	add	r3, r3, #1
   1cc94:	str	r3, [fp, #-24]	; 0xffffffe8
   1cc98:	b	1cca8 <__assert_fail@plt+0xb9ac>
   1cc9c:	nop	{0}
   1cca0:	b	1cca8 <__assert_fail@plt+0xb9ac>
   1cca4:	nop	{0}
   1cca8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ccac:	ldr	r3, [r3]
   1ccb0:	ldrb	r3, [r3]
   1ccb4:	sub	r3, r3, #66	; 0x42
   1ccb8:	cmp	r3, #53	; 0x35
   1ccbc:	ldrls	pc, [pc, r3, lsl #2]
   1ccc0:	b	1ced0 <__assert_fail@plt+0xbbd4>
   1ccc4:			; <UNDEFINED> instruction: 0x0001cdb4
   1ccc8:	ldrdeq	ip, [r1], -r0
   1cccc:	ldrdeq	ip, [r1], -r0
   1ccd0:	ldrdeq	ip, [r1], -r8
   1ccd4:	ldrdeq	ip, [r1], -r0
   1ccd8:	strdeq	ip, [r1], -r4
   1ccdc:	ldrdeq	ip, [r1], -r0
   1cce0:	ldrdeq	ip, [r1], -r0
   1cce4:	ldrdeq	ip, [r1], -r0
   1cce8:	andeq	ip, r1, r0, lsl lr
   1ccec:	ldrdeq	ip, [r1], -r0
   1ccf0:	andeq	ip, r1, ip, lsr #28
   1ccf4:	ldrdeq	ip, [r1], -r0
   1ccf8:	ldrdeq	ip, [r1], -r0
   1ccfc:	andeq	ip, r1, r8, asr #28
   1cd00:	ldrdeq	ip, [r1], -r0
   1cd04:	ldrdeq	ip, [r1], -r0
   1cd08:	ldrdeq	ip, [r1], -r0
   1cd0c:	andeq	ip, r1, r4, ror #28
   1cd10:	ldrdeq	ip, [r1], -r0
   1cd14:	ldrdeq	ip, [r1], -r0
   1cd18:	ldrdeq	ip, [r1], -r0
   1cd1c:	ldrdeq	ip, [r1], -r0
   1cd20:	muleq	r1, r8, lr
   1cd24:			; <UNDEFINED> instruction: 0x0001ceb4
   1cd28:	ldrdeq	ip, [r1], -r0
   1cd2c:	ldrdeq	ip, [r1], -r0
   1cd30:	ldrdeq	ip, [r1], -r0
   1cd34:	ldrdeq	ip, [r1], -r0
   1cd38:	ldrdeq	ip, [r1], -r0
   1cd3c:	ldrdeq	ip, [r1], -r0
   1cd40:	ldrdeq	ip, [r1], -r0
   1cd44:	muleq	r1, ip, sp
   1cd48:	andeq	ip, r1, ip, asr #27
   1cd4c:	ldrdeq	ip, [r1], -r0
   1cd50:	ldrdeq	ip, [r1], -r0
   1cd54:	ldrdeq	ip, [r1], -r0
   1cd58:	strdeq	ip, [r1], -r4
   1cd5c:	ldrdeq	ip, [r1], -r0
   1cd60:	ldrdeq	ip, [r1], -r0
   1cd64:	ldrdeq	ip, [r1], -r0
   1cd68:	andeq	ip, r1, r0, lsl lr
   1cd6c:	ldrdeq	ip, [r1], -r0
   1cd70:	andeq	ip, r1, ip, lsr #28
   1cd74:	ldrdeq	ip, [r1], -r0
   1cd78:	ldrdeq	ip, [r1], -r0
   1cd7c:	ldrdeq	ip, [r1], -r0
   1cd80:	ldrdeq	ip, [r1], -r0
   1cd84:	ldrdeq	ip, [r1], -r0
   1cd88:	ldrdeq	ip, [r1], -r0
   1cd8c:	andeq	ip, r1, r4, ror #28
   1cd90:	ldrdeq	ip, [r1], -r0
   1cd94:	ldrdeq	ip, [r1], -r0
   1cd98:	andeq	ip, r1, r0, lsl #29
   1cd9c:	sub	r3, fp, #44	; 0x2c
   1cda0:	mov	r1, #512	; 0x200
   1cda4:	mov	r0, r3
   1cda8:	bl	1c6b4 <__assert_fail@plt+0xb3b8>
   1cdac:	str	r0, [fp, #-28]	; 0xffffffe4
   1cdb0:	b	1cee8 <__assert_fail@plt+0xbbec>
   1cdb4:	sub	r3, fp, #44	; 0x2c
   1cdb8:	mov	r1, #1024	; 0x400
   1cdbc:	mov	r0, r3
   1cdc0:	bl	1c6b4 <__assert_fail@plt+0xb3b8>
   1cdc4:	str	r0, [fp, #-28]	; 0xffffffe4
   1cdc8:	b	1cee8 <__assert_fail@plt+0xbbec>
   1cdcc:	mov	r3, #0
   1cdd0:	str	r3, [fp, #-28]	; 0xffffffe4
   1cdd4:	b	1cee8 <__assert_fail@plt+0xbbec>
   1cdd8:	sub	r3, fp, #44	; 0x2c
   1cddc:	mov	r2, #6
   1cde0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cde4:	mov	r0, r3
   1cde8:	bl	1c890 <__assert_fail@plt+0xb594>
   1cdec:	str	r0, [fp, #-28]	; 0xffffffe4
   1cdf0:	b	1cee8 <__assert_fail@plt+0xbbec>
   1cdf4:	sub	r3, fp, #44	; 0x2c
   1cdf8:	mov	r2, #3
   1cdfc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce00:	mov	r0, r3
   1ce04:	bl	1c890 <__assert_fail@plt+0xb594>
   1ce08:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce0c:	b	1cee8 <__assert_fail@plt+0xbbec>
   1ce10:	sub	r3, fp, #44	; 0x2c
   1ce14:	mov	r2, #1
   1ce18:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce1c:	mov	r0, r3
   1ce20:	bl	1c890 <__assert_fail@plt+0xb594>
   1ce24:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce28:	b	1cee8 <__assert_fail@plt+0xbbec>
   1ce2c:	sub	r3, fp, #44	; 0x2c
   1ce30:	mov	r2, #2
   1ce34:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce38:	mov	r0, r3
   1ce3c:	bl	1c890 <__assert_fail@plt+0xb594>
   1ce40:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce44:	b	1cee8 <__assert_fail@plt+0xbbec>
   1ce48:	sub	r3, fp, #44	; 0x2c
   1ce4c:	mov	r2, #5
   1ce50:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce54:	mov	r0, r3
   1ce58:	bl	1c890 <__assert_fail@plt+0xb594>
   1ce5c:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce60:	b	1cee8 <__assert_fail@plt+0xbbec>
   1ce64:	sub	r3, fp, #44	; 0x2c
   1ce68:	mov	r2, #4
   1ce6c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce70:	mov	r0, r3
   1ce74:	bl	1c890 <__assert_fail@plt+0xb594>
   1ce78:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce7c:	b	1cee8 <__assert_fail@plt+0xbbec>
   1ce80:	sub	r3, fp, #44	; 0x2c
   1ce84:	mov	r1, #2
   1ce88:	mov	r0, r3
   1ce8c:	bl	1c6b4 <__assert_fail@plt+0xb3b8>
   1ce90:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce94:	b	1cee8 <__assert_fail@plt+0xbbec>
   1ce98:	sub	r3, fp, #44	; 0x2c
   1ce9c:	mov	r2, #8
   1cea0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cea4:	mov	r0, r3
   1cea8:	bl	1c890 <__assert_fail@plt+0xb594>
   1ceac:	str	r0, [fp, #-28]	; 0xffffffe4
   1ceb0:	b	1cee8 <__assert_fail@plt+0xbbec>
   1ceb4:	sub	r3, fp, #44	; 0x2c
   1ceb8:	mov	r2, #7
   1cebc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cec0:	mov	r0, r3
   1cec4:	bl	1c890 <__assert_fail@plt+0xb594>
   1cec8:	str	r0, [fp, #-28]	; 0xffffffe4
   1cecc:	b	1cee8 <__assert_fail@plt+0xbbec>
   1ced0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1ced4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ced8:	strd	r2, [r1]
   1cedc:	ldr	r3, [fp, #-8]
   1cee0:	orr	r3, r3, #2
   1cee4:	b	1cf40 <__assert_fail@plt+0xbc44>
   1cee8:	ldr	r2, [fp, #-8]
   1ceec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cef0:	orr	r3, r2, r3
   1cef4:	str	r3, [fp, #-8]
   1cef8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cefc:	ldr	r2, [r3]
   1cf00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cf04:	add	r2, r2, r3
   1cf08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cf0c:	str	r2, [r3]
   1cf10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cf14:	ldr	r3, [r3]
   1cf18:	ldrb	r3, [r3]
   1cf1c:	cmp	r3, #0
   1cf20:	beq	1cf30 <__assert_fail@plt+0xbc34>
   1cf24:	ldr	r3, [fp, #-8]
   1cf28:	orr	r3, r3, #2
   1cf2c:	str	r3, [fp, #-8]
   1cf30:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1cf34:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1cf38:	strd	r2, [r1]
   1cf3c:	ldr	r3, [fp, #-8]
   1cf40:	mov	r0, r3
   1cf44:	sub	sp, fp, #4
   1cf48:	ldr	fp, [sp]
   1cf4c:	add	sp, sp, #4
   1cf50:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf54:	str	fp, [sp, #-8]!
   1cf58:	str	lr, [sp, #4]
   1cf5c:	add	fp, sp, #4
   1cf60:	sub	sp, sp, #16
   1cf64:	str	r0, [fp, #-16]
   1cf68:	str	r1, [fp, #-20]	; 0xffffffec
   1cf6c:	ldr	r3, [fp, #-16]
   1cf70:	cmp	r3, #0
   1cf74:	beq	1cf84 <__assert_fail@plt+0xbc88>
   1cf78:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf7c:	cmp	r3, #0
   1cf80:	bne	1cf94 <__assert_fail@plt+0xbc98>
   1cf84:	mov	r3, #1
   1cf88:	str	r3, [fp, #-20]	; 0xffffffec
   1cf8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf90:	str	r3, [fp, #-16]
   1cf94:	mov	ip, #0
   1cf98:	ldr	r2, [fp, #-16]
   1cf9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cfa0:	umull	r0, r1, r2, r3
   1cfa4:	mov	r2, #0
   1cfa8:	mov	r3, #0
   1cfac:	mov	r2, r1
   1cfb0:	mov	r3, #0
   1cfb4:	cmp	r2, #0
   1cfb8:	beq	1cfc0 <__assert_fail@plt+0xbcc4>
   1cfbc:	mov	ip, #1
   1cfc0:	cmp	r0, #0
   1cfc4:	bge	1cfcc <__assert_fail@plt+0xbcd0>
   1cfc8:	mov	ip, #1
   1cfcc:	mov	r3, ip
   1cfd0:	and	r3, r3, #1
   1cfd4:	uxtb	r3, r3
   1cfd8:	cmp	r3, #0
   1cfdc:	beq	1cff8 <__assert_fail@plt+0xbcfc>
   1cfe0:	bl	111c4 <__errno_location@plt>
   1cfe4:	mov	r2, r0
   1cfe8:	mov	r3, #12
   1cfec:	str	r3, [r2]
   1cff0:	mov	r3, #0
   1cff4:	b	1d010 <__assert_fail@plt+0xbd14>
   1cff8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cffc:	ldr	r0, [fp, #-16]
   1d000:	bl	10fc0 <calloc@plt>
   1d004:	mov	r3, r0
   1d008:	str	r3, [fp, #-8]
   1d00c:	ldr	r3, [fp, #-8]
   1d010:	mov	r0, r3
   1d014:	sub	sp, fp, #4
   1d018:	ldr	fp, [sp]
   1d01c:	add	sp, sp, #4
   1d020:	pop	{pc}		; (ldr pc, [sp], #4)
   1d024:	str	fp, [sp, #-8]!
   1d028:	str	lr, [sp, #4]
   1d02c:	add	fp, sp, #4
   1d030:	sub	sp, sp, #16
   1d034:	str	r0, [fp, #-16]
   1d038:	ldr	r3, [fp, #-16]
   1d03c:	cmp	r3, #0
   1d040:	bne	1d04c <__assert_fail@plt+0xbd50>
   1d044:	mov	r3, #1
   1d048:	str	r3, [fp, #-16]
   1d04c:	mov	r2, #0
   1d050:	ldr	r3, [fp, #-16]
   1d054:	cmp	r3, #0
   1d058:	bge	1d060 <__assert_fail@plt+0xbd64>
   1d05c:	mov	r2, #1
   1d060:	mov	r3, r2
   1d064:	and	r3, r3, #1
   1d068:	uxtb	r3, r3
   1d06c:	cmp	r3, #0
   1d070:	beq	1d08c <__assert_fail@plt+0xbd90>
   1d074:	bl	111c4 <__errno_location@plt>
   1d078:	mov	r2, r0
   1d07c:	mov	r3, #12
   1d080:	str	r3, [r2]
   1d084:	mov	r3, #0
   1d088:	b	1d0a0 <__assert_fail@plt+0xbda4>
   1d08c:	ldr	r0, [fp, #-16]
   1d090:	bl	11128 <malloc@plt>
   1d094:	mov	r3, r0
   1d098:	str	r3, [fp, #-8]
   1d09c:	ldr	r3, [fp, #-8]
   1d0a0:	mov	r0, r3
   1d0a4:	sub	sp, fp, #4
   1d0a8:	ldr	fp, [sp]
   1d0ac:	add	sp, sp, #4
   1d0b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0b4:	str	fp, [sp, #-8]!
   1d0b8:	str	lr, [sp, #4]
   1d0bc:	add	fp, sp, #4
   1d0c0:	sub	sp, sp, #16
   1d0c4:	str	r0, [fp, #-16]
   1d0c8:	str	r1, [fp, #-20]	; 0xffffffec
   1d0cc:	ldr	r3, [fp, #-16]
   1d0d0:	cmp	r3, #0
   1d0d4:	bne	1d0e8 <__assert_fail@plt+0xbdec>
   1d0d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d0dc:	bl	1d024 <__assert_fail@plt+0xbd28>
   1d0e0:	mov	r3, r0
   1d0e4:	b	1d158 <__assert_fail@plt+0xbe5c>
   1d0e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d0ec:	cmp	r3, #0
   1d0f0:	bne	1d104 <__assert_fail@plt+0xbe08>
   1d0f4:	ldr	r0, [fp, #-16]
   1d0f8:	bl	13514 <__assert_fail@plt+0x2218>
   1d0fc:	mov	r3, #0
   1d100:	b	1d158 <__assert_fail@plt+0xbe5c>
   1d104:	mov	r2, #0
   1d108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d10c:	cmp	r3, #0
   1d110:	bge	1d118 <__assert_fail@plt+0xbe1c>
   1d114:	mov	r2, #1
   1d118:	mov	r3, r2
   1d11c:	and	r3, r3, #1
   1d120:	uxtb	r3, r3
   1d124:	cmp	r3, #0
   1d128:	beq	1d144 <__assert_fail@plt+0xbe48>
   1d12c:	bl	111c4 <__errno_location@plt>
   1d130:	mov	r2, r0
   1d134:	mov	r3, #12
   1d138:	str	r3, [r2]
   1d13c:	mov	r3, #0
   1d140:	b	1d158 <__assert_fail@plt+0xbe5c>
   1d144:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d148:	ldr	r0, [fp, #-16]
   1d14c:	bl	11080 <realloc@plt>
   1d150:	str	r0, [fp, #-8]
   1d154:	ldr	r3, [fp, #-8]
   1d158:	mov	r0, r3
   1d15c:	sub	sp, fp, #4
   1d160:	ldr	fp, [sp]
   1d164:	add	sp, sp, #4
   1d168:	pop	{pc}		; (ldr pc, [sp], #4)
   1d16c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d170:	strd	r6, [sp, #8]
   1d174:	strd	r8, [sp, #16]
   1d178:	str	fp, [sp, #24]
   1d17c:	add	fp, sp, #24
   1d180:	sub	sp, sp, #20
   1d184:	strd	r0, [fp, #-36]	; 0xffffffdc
   1d188:	str	r2, [fp, #-40]	; 0xffffffd8
   1d18c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1d190:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1d194:	sub	ip, r1, #32
   1d198:	rsb	r0, r1, #32
   1d19c:	lsl	r7, r3, r1
   1d1a0:	orr	r7, r7, r2, lsl ip
   1d1a4:	orr	r7, r7, r2, lsr r0
   1d1a8:	lsl	r6, r2, r1
   1d1ac:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1d1b0:	rsb	r1, r1, #0
   1d1b4:	and	r1, r1, #63	; 0x3f
   1d1b8:	rsb	ip, r1, #32
   1d1bc:	sub	r0, r1, #32
   1d1c0:	lsr	r4, r2, r1
   1d1c4:	orr	r4, r4, r3, lsl ip
   1d1c8:	orr	r4, r4, r3, lsr r0
   1d1cc:	lsr	r5, r3, r1
   1d1d0:	orr	r8, r6, r4
   1d1d4:	orr	r9, r7, r5
   1d1d8:	mov	r4, r8
   1d1dc:	mov	r5, r9
   1d1e0:	mov	r2, r4
   1d1e4:	mov	r3, r5
   1d1e8:	mov	r0, r2
   1d1ec:	mov	r1, r3
   1d1f0:	sub	sp, fp, #24
   1d1f4:	ldrd	r4, [sp]
   1d1f8:	ldrd	r6, [sp, #8]
   1d1fc:	ldrd	r8, [sp, #16]
   1d200:	ldr	fp, [sp, #24]
   1d204:	add	sp, sp, #28
   1d208:	bx	lr
   1d20c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d210:	strd	r6, [sp, #8]
   1d214:	strd	r8, [sp, #16]
   1d218:	str	fp, [sp, #24]
   1d21c:	add	fp, sp, #24
   1d220:	sub	sp, sp, #20
   1d224:	strd	r0, [fp, #-36]	; 0xffffffdc
   1d228:	str	r2, [fp, #-40]	; 0xffffffd8
   1d22c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1d230:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1d234:	rsb	ip, r1, #32
   1d238:	sub	r0, r1, #32
   1d23c:	lsr	r6, r2, r1
   1d240:	orr	r6, r6, r3, lsl ip
   1d244:	orr	r6, r6, r3, lsr r0
   1d248:	lsr	r7, r3, r1
   1d24c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1d250:	rsb	r1, r1, #0
   1d254:	and	r1, r1, #63	; 0x3f
   1d258:	sub	ip, r1, #32
   1d25c:	rsb	r0, r1, #32
   1d260:	lsl	r5, r3, r1
   1d264:	orr	r5, r5, r2, lsl ip
   1d268:	orr	r5, r5, r2, lsr r0
   1d26c:	lsl	r4, r2, r1
   1d270:	orr	r8, r6, r4
   1d274:	orr	r9, r7, r5
   1d278:	mov	r4, r8
   1d27c:	mov	r5, r9
   1d280:	mov	r2, r4
   1d284:	mov	r3, r5
   1d288:	mov	r0, r2
   1d28c:	mov	r1, r3
   1d290:	sub	sp, fp, #24
   1d294:	ldrd	r4, [sp]
   1d298:	ldrd	r6, [sp, #8]
   1d29c:	ldrd	r8, [sp, #16]
   1d2a0:	ldr	fp, [sp, #24]
   1d2a4:	add	sp, sp, #28
   1d2a8:	bx	lr
   1d2ac:	push	{fp}		; (str fp, [sp, #-4]!)
   1d2b0:	add	fp, sp, #0
   1d2b4:	sub	sp, sp, #12
   1d2b8:	str	r0, [fp, #-8]
   1d2bc:	str	r1, [fp, #-12]
   1d2c0:	ldr	r2, [fp, #-8]
   1d2c4:	ldr	r3, [fp, #-12]
   1d2c8:	rsb	r3, r3, #32
   1d2cc:	ror	r3, r2, r3
   1d2d0:	mov	r0, r3
   1d2d4:	add	sp, fp, #0
   1d2d8:	pop	{fp}		; (ldr fp, [sp], #4)
   1d2dc:	bx	lr
   1d2e0:	push	{fp}		; (str fp, [sp, #-4]!)
   1d2e4:	add	fp, sp, #0
   1d2e8:	sub	sp, sp, #12
   1d2ec:	str	r0, [fp, #-8]
   1d2f0:	str	r1, [fp, #-12]
   1d2f4:	ldr	r2, [fp, #-8]
   1d2f8:	ldr	r3, [fp, #-12]
   1d2fc:	ror	r3, r2, r3
   1d300:	mov	r0, r3
   1d304:	add	sp, fp, #0
   1d308:	pop	{fp}		; (ldr fp, [sp], #4)
   1d30c:	bx	lr
   1d310:	push	{fp}		; (str fp, [sp, #-4]!)
   1d314:	add	fp, sp, #0
   1d318:	sub	sp, sp, #12
   1d31c:	str	r0, [fp, #-8]
   1d320:	str	r1, [fp, #-12]
   1d324:	ldr	r2, [fp, #-8]
   1d328:	ldr	r3, [fp, #-12]
   1d32c:	rsb	r3, r3, #32
   1d330:	ror	r3, r2, r3
   1d334:	mov	r0, r3
   1d338:	add	sp, fp, #0
   1d33c:	pop	{fp}		; (ldr fp, [sp], #4)
   1d340:	bx	lr
   1d344:	push	{fp}		; (str fp, [sp, #-4]!)
   1d348:	add	fp, sp, #0
   1d34c:	sub	sp, sp, #12
   1d350:	str	r0, [fp, #-8]
   1d354:	str	r1, [fp, #-12]
   1d358:	ldr	r2, [fp, #-8]
   1d35c:	ldr	r3, [fp, #-12]
   1d360:	ror	r3, r2, r3
   1d364:	mov	r0, r3
   1d368:	add	sp, fp, #0
   1d36c:	pop	{fp}		; (ldr fp, [sp], #4)
   1d370:	bx	lr
   1d374:	push	{fp}		; (str fp, [sp, #-4]!)
   1d378:	add	fp, sp, #0
   1d37c:	sub	sp, sp, #12
   1d380:	mov	r3, r0
   1d384:	str	r1, [fp, #-12]
   1d388:	strh	r3, [fp, #-6]
   1d38c:	ldrh	r2, [fp, #-6]
   1d390:	ldr	r3, [fp, #-12]
   1d394:	lsl	r3, r2, r3
   1d398:	uxth	r2, r3
   1d39c:	ldrh	r1, [fp, #-6]
   1d3a0:	ldr	r3, [fp, #-12]
   1d3a4:	rsb	r3, r3, #16
   1d3a8:	lsr	r3, r1, r3
   1d3ac:	uxth	r3, r3
   1d3b0:	orr	r3, r2, r3
   1d3b4:	uxth	r3, r3
   1d3b8:	mov	r0, r3
   1d3bc:	add	sp, fp, #0
   1d3c0:	pop	{fp}		; (ldr fp, [sp], #4)
   1d3c4:	bx	lr
   1d3c8:	push	{fp}		; (str fp, [sp, #-4]!)
   1d3cc:	add	fp, sp, #0
   1d3d0:	sub	sp, sp, #12
   1d3d4:	mov	r3, r0
   1d3d8:	str	r1, [fp, #-12]
   1d3dc:	strh	r3, [fp, #-6]
   1d3e0:	ldrh	r2, [fp, #-6]
   1d3e4:	ldr	r3, [fp, #-12]
   1d3e8:	lsr	r3, r2, r3
   1d3ec:	uxth	r2, r3
   1d3f0:	ldrh	r1, [fp, #-6]
   1d3f4:	ldr	r3, [fp, #-12]
   1d3f8:	rsb	r3, r3, #16
   1d3fc:	lsl	r3, r1, r3
   1d400:	uxth	r3, r3
   1d404:	orr	r3, r2, r3
   1d408:	uxth	r3, r3
   1d40c:	mov	r0, r3
   1d410:	add	sp, fp, #0
   1d414:	pop	{fp}		; (ldr fp, [sp], #4)
   1d418:	bx	lr
   1d41c:	push	{fp}		; (str fp, [sp, #-4]!)
   1d420:	add	fp, sp, #0
   1d424:	sub	sp, sp, #12
   1d428:	mov	r3, r0
   1d42c:	str	r1, [fp, #-12]
   1d430:	strb	r3, [fp, #-5]
   1d434:	ldrb	r2, [fp, #-5]
   1d438:	ldr	r3, [fp, #-12]
   1d43c:	lsl	r3, r2, r3
   1d440:	uxtb	r2, r3
   1d444:	ldrb	r1, [fp, #-5]
   1d448:	ldr	r3, [fp, #-12]
   1d44c:	rsb	r3, r3, #8
   1d450:	lsr	r3, r1, r3
   1d454:	uxtb	r3, r3
   1d458:	orr	r3, r2, r3
   1d45c:	uxtb	r3, r3
   1d460:	mov	r0, r3
   1d464:	add	sp, fp, #0
   1d468:	pop	{fp}		; (ldr fp, [sp], #4)
   1d46c:	bx	lr
   1d470:	push	{fp}		; (str fp, [sp, #-4]!)
   1d474:	add	fp, sp, #0
   1d478:	sub	sp, sp, #12
   1d47c:	mov	r3, r0
   1d480:	str	r1, [fp, #-12]
   1d484:	strb	r3, [fp, #-5]
   1d488:	ldrb	r2, [fp, #-5]
   1d48c:	ldr	r3, [fp, #-12]
   1d490:	lsr	r3, r2, r3
   1d494:	uxtb	r2, r3
   1d498:	ldrb	r1, [fp, #-5]
   1d49c:	ldr	r3, [fp, #-12]
   1d4a0:	rsb	r3, r3, #8
   1d4a4:	lsl	r3, r1, r3
   1d4a8:	uxtb	r3, r3
   1d4ac:	orr	r3, r2, r3
   1d4b0:	uxtb	r3, r3
   1d4b4:	mov	r0, r3
   1d4b8:	add	sp, fp, #0
   1d4bc:	pop	{fp}		; (ldr fp, [sp], #4)
   1d4c0:	bx	lr
   1d4c4:	strd	r4, [sp, #-16]!
   1d4c8:	str	fp, [sp, #8]
   1d4cc:	str	lr, [sp, #12]
   1d4d0:	add	fp, sp, #12
   1d4d4:	sub	sp, sp, #16
   1d4d8:	str	r0, [fp, #-24]	; 0xffffffe8
   1d4dc:	str	r1, [fp, #-28]	; 0xffffffe4
   1d4e0:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1d4e4:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1d4e8:	cmp	r5, r4
   1d4ec:	bne	1d4f8 <__assert_fail@plt+0xc1fc>
   1d4f0:	mov	r3, #0
   1d4f4:	b	1d558 <__assert_fail@plt+0xc25c>
   1d4f8:	ldrb	r3, [r5]
   1d4fc:	mov	r0, r3
   1d500:	bl	1e760 <__assert_fail@plt+0xd464>
   1d504:	mov	r3, r0
   1d508:	strb	r3, [fp, #-13]
   1d50c:	ldrb	r3, [r4]
   1d510:	mov	r0, r3
   1d514:	bl	1e760 <__assert_fail@plt+0xd464>
   1d518:	mov	r3, r0
   1d51c:	strb	r3, [fp, #-14]
   1d520:	ldrb	r3, [fp, #-13]
   1d524:	cmp	r3, #0
   1d528:	beq	1d548 <__assert_fail@plt+0xc24c>
   1d52c:	add	r5, r5, #1
   1d530:	add	r4, r4, #1
   1d534:	ldrb	r2, [fp, #-13]
   1d538:	ldrb	r3, [fp, #-14]
   1d53c:	cmp	r2, r3
   1d540:	beq	1d4f8 <__assert_fail@plt+0xc1fc>
   1d544:	b	1d54c <__assert_fail@plt+0xc250>
   1d548:	nop	{0}
   1d54c:	ldrb	r2, [fp, #-13]
   1d550:	ldrb	r3, [fp, #-14]
   1d554:	sub	r3, r2, r3
   1d558:	mov	r0, r3
   1d55c:	sub	sp, fp, #12
   1d560:	ldrd	r4, [sp]
   1d564:	ldr	fp, [sp, #8]
   1d568:	add	sp, sp, #12
   1d56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d570:	str	fp, [sp, #-8]!
   1d574:	str	lr, [sp, #4]
   1d578:	add	fp, sp, #4
   1d57c:	sub	sp, sp, #16
   1d580:	str	r0, [fp, #-16]
   1d584:	ldr	r0, [fp, #-16]
   1d588:	bl	110ec <__fpending@plt>
   1d58c:	mov	r3, r0
   1d590:	cmp	r3, #0
   1d594:	movne	r3, #1
   1d598:	moveq	r3, #0
   1d59c:	strb	r3, [fp, #-5]
   1d5a0:	ldr	r0, [fp, #-16]
   1d5a4:	bl	110f8 <ferror_unlocked@plt>
   1d5a8:	mov	r3, r0
   1d5ac:	cmp	r3, #0
   1d5b0:	movne	r3, #1
   1d5b4:	moveq	r3, #0
   1d5b8:	strb	r3, [fp, #-6]
   1d5bc:	ldr	r0, [fp, #-16]
   1d5c0:	bl	1d81c <__assert_fail@plt+0xc520>
   1d5c4:	mov	r3, r0
   1d5c8:	cmp	r3, #0
   1d5cc:	movne	r3, #1
   1d5d0:	moveq	r3, #0
   1d5d4:	strb	r3, [fp, #-7]
   1d5d8:	ldrb	r3, [fp, #-6]
   1d5dc:	cmp	r3, #0
   1d5e0:	bne	1d610 <__assert_fail@plt+0xc314>
   1d5e4:	ldrb	r3, [fp, #-7]
   1d5e8:	cmp	r3, #0
   1d5ec:	beq	1d63c <__assert_fail@plt+0xc340>
   1d5f0:	ldrb	r3, [fp, #-5]
   1d5f4:	cmp	r3, #0
   1d5f8:	bne	1d610 <__assert_fail@plt+0xc314>
   1d5fc:	bl	111c4 <__errno_location@plt>
   1d600:	mov	r3, r0
   1d604:	ldr	r3, [r3]
   1d608:	cmp	r3, #9
   1d60c:	beq	1d63c <__assert_fail@plt+0xc340>
   1d610:	ldrb	r3, [fp, #-7]
   1d614:	eor	r3, r3, #1
   1d618:	uxtb	r3, r3
   1d61c:	cmp	r3, #0
   1d620:	beq	1d634 <__assert_fail@plt+0xc338>
   1d624:	bl	111c4 <__errno_location@plt>
   1d628:	mov	r2, r0
   1d62c:	mov	r3, #0
   1d630:	str	r3, [r2]
   1d634:	mvn	r3, #0
   1d638:	b	1d640 <__assert_fail@plt+0xc344>
   1d63c:	mov	r3, #0
   1d640:	mov	r0, r3
   1d644:	sub	sp, fp, #4
   1d648:	ldr	fp, [sp]
   1d64c:	add	sp, sp, #4
   1d650:	pop	{pc}		; (ldr pc, [sp], #4)
   1d654:	strd	r4, [sp, #-12]!
   1d658:	str	fp, [sp, #8]
   1d65c:	add	fp, sp, #8
   1d660:	sub	sp, sp, #12
   1d664:	strd	r0, [fp, #-20]	; 0xffffffec
   1d668:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1d66c:	subs	r4, r0, #1
   1d670:	sbc	r5, r1, #0
   1d674:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1d678:	and	r2, r4, r0
   1d67c:	and	r3, r5, r1
   1d680:	orr	r3, r2, r3
   1d684:	cmp	r3, #0
   1d688:	moveq	r3, #1
   1d68c:	movne	r3, #0
   1d690:	uxtb	r3, r3
   1d694:	mov	r0, r3
   1d698:	sub	sp, fp, #8
   1d69c:	ldrd	r4, [sp]
   1d6a0:	ldr	fp, [sp, #8]
   1d6a4:	add	sp, sp, #12
   1d6a8:	bx	lr
   1d6ac:	push	{fp}		; (str fp, [sp, #-4]!)
   1d6b0:	add	fp, sp, #0
   1d6b4:	sub	sp, sp, #12
   1d6b8:	str	r0, [fp, #-8]
   1d6bc:	ldr	r1, [fp, #-8]
   1d6c0:	mov	r2, #0
   1d6c4:	mov	r3, #0
   1d6c8:	strd	r2, [r1, #16]
   1d6cc:	ldr	r2, [fp, #-8]
   1d6d0:	movw	r3, #62998	; 0xf616
   1d6d4:	movt	r3, #149	; 0x95
   1d6d8:	str	r3, [r2, #24]
   1d6dc:	nop	{0}
   1d6e0:	add	sp, fp, #0
   1d6e4:	pop	{fp}		; (ldr fp, [sp], #4)
   1d6e8:	bx	lr
   1d6ec:	strd	r4, [sp, #-16]!
   1d6f0:	str	fp, [sp, #8]
   1d6f4:	str	lr, [sp, #12]
   1d6f8:	add	fp, sp, #12
   1d6fc:	sub	sp, sp, #8
   1d700:	str	r0, [fp, #-16]
   1d704:	str	r1, [fp, #-20]	; 0xffffffec
   1d708:	ldr	r3, [fp, #-16]
   1d70c:	ldr	r2, [r3, #24]
   1d710:	movw	r3, #62998	; 0xf616
   1d714:	movt	r3, #149	; 0x95
   1d718:	cmp	r2, r3
   1d71c:	beq	1d740 <__assert_fail@plt+0xc444>
   1d720:	movw	r3, #280	; 0x118
   1d724:	movt	r3, #2
   1d728:	mov	r2, #60	; 0x3c
   1d72c:	movw	r1, #236	; 0xec
   1d730:	movt	r1, #2
   1d734:	movw	r0, #256	; 0x100
   1d738:	movt	r0, #2
   1d73c:	bl	112fc <__assert_fail@plt>
   1d740:	ldr	r3, [fp, #-16]
   1d744:	ldrd	r2, [r3, #16]
   1d748:	orrs	r3, r2, r3
   1d74c:	beq	1d790 <__assert_fail@plt+0xc494>
   1d750:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d754:	ldrd	r0, [r3, #96]	; 0x60
   1d758:	ldr	r3, [fp, #-16]
   1d75c:	ldrd	r2, [r3]
   1d760:	cmp	r1, r3
   1d764:	cmpeq	r0, r2
   1d768:	bne	1d790 <__assert_fail@plt+0xc494>
   1d76c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d770:	ldrd	r0, [r3]
   1d774:	ldr	r3, [fp, #-16]
   1d778:	ldrd	r2, [r3, #8]
   1d77c:	cmp	r1, r3
   1d780:	cmpeq	r0, r2
   1d784:	bne	1d790 <__assert_fail@plt+0xc494>
   1d788:	mov	r3, #1
   1d78c:	b	1d804 <__assert_fail@plt+0xc508>
   1d790:	ldr	r3, [fp, #-16]
   1d794:	ldrd	r2, [r3, #16]
   1d798:	adds	r4, r2, #1
   1d79c:	adc	r5, r3, #0
   1d7a0:	ldr	r3, [fp, #-16]
   1d7a4:	strd	r4, [r3, #16]
   1d7a8:	ldr	r3, [fp, #-16]
   1d7ac:	ldrd	r2, [r3, #16]
   1d7b0:	mov	r0, r2
   1d7b4:	mov	r1, r3
   1d7b8:	bl	1d654 <__assert_fail@plt+0xc358>
   1d7bc:	mov	r3, r0
   1d7c0:	cmp	r3, #0
   1d7c4:	beq	1d800 <__assert_fail@plt+0xc504>
   1d7c8:	ldr	r3, [fp, #-16]
   1d7cc:	ldrd	r2, [r3, #16]
   1d7d0:	orrs	r3, r2, r3
   1d7d4:	bne	1d7e0 <__assert_fail@plt+0xc4e4>
   1d7d8:	mov	r3, #1
   1d7dc:	b	1d804 <__assert_fail@plt+0xc508>
   1d7e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d7e4:	ldrd	r2, [r3]
   1d7e8:	ldr	r1, [fp, #-16]
   1d7ec:	strd	r2, [r1, #8]
   1d7f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d7f4:	ldrd	r2, [r3, #96]	; 0x60
   1d7f8:	ldr	r1, [fp, #-16]
   1d7fc:	strd	r2, [r1]
   1d800:	mov	r3, #0
   1d804:	mov	r0, r3
   1d808:	sub	sp, fp, #12
   1d80c:	ldrd	r4, [sp]
   1d810:	ldr	fp, [sp, #8]
   1d814:	add	sp, sp, #12
   1d818:	pop	{pc}		; (ldr pc, [sp], #4)
   1d81c:	str	fp, [sp, #-8]!
   1d820:	str	lr, [sp, #4]
   1d824:	add	fp, sp, #4
   1d828:	sub	sp, sp, #32
   1d82c:	str	r0, [fp, #-24]	; 0xffffffe8
   1d830:	mov	r3, #0
   1d834:	str	r3, [fp, #-8]
   1d838:	mov	r3, #0
   1d83c:	str	r3, [fp, #-12]
   1d840:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d844:	bl	111e8 <fileno@plt>
   1d848:	str	r0, [fp, #-16]
   1d84c:	ldr	r3, [fp, #-16]
   1d850:	cmp	r3, #0
   1d854:	bge	1d868 <__assert_fail@plt+0xc56c>
   1d858:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d85c:	bl	11200 <fclose@plt>
   1d860:	mov	r3, r0
   1d864:	b	1d90c <__assert_fail@plt+0xc610>
   1d868:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d86c:	bl	11140 <__freading@plt>
   1d870:	mov	r3, r0
   1d874:	cmp	r3, #0
   1d878:	beq	1d8b4 <__assert_fail@plt+0xc5b8>
   1d87c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d880:	bl	111e8 <fileno@plt>
   1d884:	mov	r1, r0
   1d888:	mov	r3, #1
   1d88c:	str	r3, [sp]
   1d890:	mov	r2, #0
   1d894:	mov	r3, #0
   1d898:	mov	r0, r1
   1d89c:	bl	110c8 <lseek64@plt>
   1d8a0:	mvn	r2, #0
   1d8a4:	mvn	r3, #0
   1d8a8:	cmp	r1, r3
   1d8ac:	cmpeq	r0, r2
   1d8b0:	beq	1d8d8 <__assert_fail@plt+0xc5dc>
   1d8b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d8b8:	bl	1dde0 <__assert_fail@plt+0xcae4>
   1d8bc:	mov	r3, r0
   1d8c0:	cmp	r3, #0
   1d8c4:	beq	1d8d8 <__assert_fail@plt+0xc5dc>
   1d8c8:	bl	111c4 <__errno_location@plt>
   1d8cc:	mov	r3, r0
   1d8d0:	ldr	r3, [r3]
   1d8d4:	str	r3, [fp, #-8]
   1d8d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d8dc:	bl	11200 <fclose@plt>
   1d8e0:	str	r0, [fp, #-12]
   1d8e4:	ldr	r3, [fp, #-8]
   1d8e8:	cmp	r3, #0
   1d8ec:	beq	1d908 <__assert_fail@plt+0xc60c>
   1d8f0:	bl	111c4 <__errno_location@plt>
   1d8f4:	mov	r2, r0
   1d8f8:	ldr	r3, [fp, #-8]
   1d8fc:	str	r3, [r2]
   1d900:	mvn	r3, #0
   1d904:	str	r3, [fp, #-12]
   1d908:	ldr	r3, [fp, #-12]
   1d90c:	mov	r0, r3
   1d910:	sub	sp, fp, #4
   1d914:	ldr	fp, [sp]
   1d918:	add	sp, sp, #4
   1d91c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d920:	push	{r1, r2, r3}
   1d924:	str	fp, [sp, #-8]!
   1d928:	str	lr, [sp, #4]
   1d92c:	add	fp, sp, #4
   1d930:	sub	sp, sp, #36	; 0x24
   1d934:	str	r0, [fp, #-36]	; 0xffffffdc
   1d938:	mvn	r3, #0
   1d93c:	str	r3, [fp, #-12]
   1d940:	add	r3, fp, #8
   1d944:	str	r3, [fp, #-32]	; 0xffffffe0
   1d948:	ldr	r3, [fp, #4]
   1d94c:	cmp	r3, #0
   1d950:	beq	1d968 <__assert_fail@plt+0xc66c>
   1d954:	ldr	r3, [fp, #4]
   1d958:	movw	r2, #1030	; 0x406
   1d95c:	cmp	r3, r2
   1d960:	beq	1d990 <__assert_fail@plt+0xc694>
   1d964:	b	1d9b8 <__assert_fail@plt+0xc6bc>
   1d968:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d96c:	add	r2, r3, #4
   1d970:	str	r2, [fp, #-32]	; 0xffffffe0
   1d974:	ldr	r3, [r3]
   1d978:	str	r3, [fp, #-16]
   1d97c:	ldr	r1, [fp, #-16]
   1d980:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d984:	bl	1db64 <__assert_fail@plt+0xc868>
   1d988:	str	r0, [fp, #-12]
   1d98c:	b	1db44 <__assert_fail@plt+0xc848>
   1d990:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d994:	add	r2, r3, #4
   1d998:	str	r2, [fp, #-32]	; 0xffffffe0
   1d99c:	ldr	r3, [r3]
   1d9a0:	str	r3, [fp, #-20]	; 0xffffffec
   1d9a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d9a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d9ac:	bl	1dba8 <__assert_fail@plt+0xc8ac>
   1d9b0:	str	r0, [fp, #-12]
   1d9b4:	b	1db44 <__assert_fail@plt+0xc848>
   1d9b8:	ldr	r3, [fp, #4]
   1d9bc:	cmp	r3, #11
   1d9c0:	beq	1dad4 <__assert_fail@plt+0xc7d8>
   1d9c4:	ldr	r3, [fp, #4]
   1d9c8:	cmp	r3, #11
   1d9cc:	bgt	1da54 <__assert_fail@plt+0xc758>
   1d9d0:	ldr	r3, [fp, #4]
   1d9d4:	cmp	r3, #3
   1d9d8:	beq	1dad4 <__assert_fail@plt+0xc7d8>
   1d9dc:	ldr	r3, [fp, #4]
   1d9e0:	cmp	r3, #3
   1d9e4:	bgt	1da10 <__assert_fail@plt+0xc714>
   1d9e8:	ldr	r3, [fp, #4]
   1d9ec:	cmp	r3, #1
   1d9f0:	beq	1dad4 <__assert_fail@plt+0xc7d8>
   1d9f4:	ldr	r3, [fp, #4]
   1d9f8:	cmp	r3, #1
   1d9fc:	bgt	1dae8 <__assert_fail@plt+0xc7ec>
   1da00:	ldr	r3, [fp, #4]
   1da04:	cmp	r3, #0
   1da08:	beq	1dae8 <__assert_fail@plt+0xc7ec>
   1da0c:	b	1db14 <__assert_fail@plt+0xc818>
   1da10:	ldr	r3, [fp, #4]
   1da14:	cmp	r3, #8
   1da18:	beq	1dae8 <__assert_fail@plt+0xc7ec>
   1da1c:	ldr	r3, [fp, #4]
   1da20:	cmp	r3, #8
   1da24:	bgt	1da38 <__assert_fail@plt+0xc73c>
   1da28:	ldr	r3, [fp, #4]
   1da2c:	cmp	r3, #4
   1da30:	beq	1dae8 <__assert_fail@plt+0xc7ec>
   1da34:	b	1db14 <__assert_fail@plt+0xc818>
   1da38:	ldr	r3, [fp, #4]
   1da3c:	cmp	r3, #9
   1da40:	beq	1dad4 <__assert_fail@plt+0xc7d8>
   1da44:	ldr	r3, [fp, #4]
   1da48:	cmp	r3, #10
   1da4c:	beq	1dae8 <__assert_fail@plt+0xc7ec>
   1da50:	b	1db14 <__assert_fail@plt+0xc818>
   1da54:	ldr	r3, [fp, #4]
   1da58:	movw	r2, #1031	; 0x407
   1da5c:	cmp	r3, r2
   1da60:	bgt	1daa4 <__assert_fail@plt+0xc7a8>
   1da64:	ldr	r3, [fp, #4]
   1da68:	movw	r2, #1030	; 0x406
   1da6c:	cmp	r3, r2
   1da70:	bge	1dae8 <__assert_fail@plt+0xc7ec>
   1da74:	ldr	r3, [fp, #4]
   1da78:	movw	r2, #1025	; 0x401
   1da7c:	cmp	r3, r2
   1da80:	beq	1dad4 <__assert_fail@plt+0xc7d8>
   1da84:	ldr	r3, [fp, #4]
   1da88:	movw	r2, #1026	; 0x402
   1da8c:	cmp	r3, r2
   1da90:	beq	1dae8 <__assert_fail@plt+0xc7ec>
   1da94:	ldr	r3, [fp, #4]
   1da98:	cmp	r3, #1024	; 0x400
   1da9c:	beq	1dae8 <__assert_fail@plt+0xc7ec>
   1daa0:	b	1db14 <__assert_fail@plt+0xc818>
   1daa4:	ldr	r3, [fp, #4]
   1daa8:	movw	r2, #1033	; 0x409
   1daac:	cmp	r3, r2
   1dab0:	beq	1dae8 <__assert_fail@plt+0xc7ec>
   1dab4:	ldr	r3, [fp, #4]
   1dab8:	movw	r2, #1033	; 0x409
   1dabc:	cmp	r3, r2
   1dac0:	blt	1dad4 <__assert_fail@plt+0xc7d8>
   1dac4:	ldr	r3, [fp, #4]
   1dac8:	movw	r2, #1034	; 0x40a
   1dacc:	cmp	r3, r2
   1dad0:	bne	1db14 <__assert_fail@plt+0xc818>
   1dad4:	ldr	r1, [fp, #4]
   1dad8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1dadc:	bl	11218 <fcntl64@plt>
   1dae0:	str	r0, [fp, #-12]
   1dae4:	b	1db40 <__assert_fail@plt+0xc844>
   1dae8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1daec:	add	r2, r3, #4
   1daf0:	str	r2, [fp, #-32]	; 0xffffffe0
   1daf4:	ldr	r3, [r3]
   1daf8:	str	r3, [fp, #-24]	; 0xffffffe8
   1dafc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1db00:	ldr	r1, [fp, #4]
   1db04:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1db08:	bl	11218 <fcntl64@plt>
   1db0c:	str	r0, [fp, #-12]
   1db10:	b	1db40 <__assert_fail@plt+0xc844>
   1db14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1db18:	add	r2, r3, #4
   1db1c:	str	r2, [fp, #-32]	; 0xffffffe0
   1db20:	ldr	r3, [r3]
   1db24:	str	r3, [fp, #-28]	; 0xffffffe4
   1db28:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1db2c:	ldr	r1, [fp, #4]
   1db30:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1db34:	bl	11218 <fcntl64@plt>
   1db38:	str	r0, [fp, #-12]
   1db3c:	nop	{0}
   1db40:	nop	{0}
   1db44:	ldr	r3, [fp, #-12]
   1db48:	mov	r0, r3
   1db4c:	sub	sp, fp, #4
   1db50:	ldr	fp, [sp]
   1db54:	ldr	lr, [sp, #4]
   1db58:	add	sp, sp, #8
   1db5c:	add	sp, sp, #12
   1db60:	bx	lr
   1db64:	str	fp, [sp, #-8]!
   1db68:	str	lr, [sp, #4]
   1db6c:	add	fp, sp, #4
   1db70:	sub	sp, sp, #16
   1db74:	str	r0, [fp, #-16]
   1db78:	str	r1, [fp, #-20]	; 0xffffffec
   1db7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1db80:	mov	r1, #0
   1db84:	ldr	r0, [fp, #-16]
   1db88:	bl	11218 <fcntl64@plt>
   1db8c:	str	r0, [fp, #-8]
   1db90:	ldr	r3, [fp, #-8]
   1db94:	mov	r0, r3
   1db98:	sub	sp, fp, #4
   1db9c:	ldr	fp, [sp]
   1dba0:	add	sp, sp, #4
   1dba4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dba8:	str	fp, [sp, #-8]!
   1dbac:	str	lr, [sp, #4]
   1dbb0:	add	fp, sp, #4
   1dbb4:	sub	sp, sp, #24
   1dbb8:	str	r0, [fp, #-24]	; 0xffffffe8
   1dbbc:	str	r1, [fp, #-28]	; 0xffffffe4
   1dbc0:	movw	r3, #4852	; 0x12f4
   1dbc4:	movt	r3, #3
   1dbc8:	ldr	r3, [r3]
   1dbcc:	cmp	r3, #0
   1dbd0:	blt	1dc4c <__assert_fail@plt+0xc950>
   1dbd4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1dbd8:	movw	r1, #1030	; 0x406
   1dbdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dbe0:	bl	11218 <fcntl64@plt>
   1dbe4:	str	r0, [fp, #-8]
   1dbe8:	ldr	r3, [fp, #-8]
   1dbec:	cmp	r3, #0
   1dbf0:	bge	1dc08 <__assert_fail@plt+0xc90c>
   1dbf4:	bl	111c4 <__errno_location@plt>
   1dbf8:	mov	r3, r0
   1dbfc:	ldr	r3, [r3]
   1dc00:	cmp	r3, #22
   1dc04:	beq	1dc1c <__assert_fail@plt+0xc920>
   1dc08:	movw	r3, #4852	; 0x12f4
   1dc0c:	movt	r3, #3
   1dc10:	mov	r2, #1
   1dc14:	str	r2, [r3]
   1dc18:	b	1dc5c <__assert_fail@plt+0xc960>
   1dc1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1dc20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dc24:	bl	1db64 <__assert_fail@plt+0xc868>
   1dc28:	str	r0, [fp, #-8]
   1dc2c:	ldr	r3, [fp, #-8]
   1dc30:	cmp	r3, #0
   1dc34:	blt	1dc5c <__assert_fail@plt+0xc960>
   1dc38:	movw	r3, #4852	; 0x12f4
   1dc3c:	movt	r3, #3
   1dc40:	mvn	r2, #0
   1dc44:	str	r2, [r3]
   1dc48:	b	1dc5c <__assert_fail@plt+0xc960>
   1dc4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1dc50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dc54:	bl	1db64 <__assert_fail@plt+0xc868>
   1dc58:	str	r0, [fp, #-8]
   1dc5c:	ldr	r3, [fp, #-8]
   1dc60:	cmp	r3, #0
   1dc64:	blt	1dcec <__assert_fail@plt+0xc9f0>
   1dc68:	movw	r3, #4852	; 0x12f4
   1dc6c:	movt	r3, #3
   1dc70:	ldr	r3, [r3]
   1dc74:	cmn	r3, #1
   1dc78:	bne	1dcec <__assert_fail@plt+0xc9f0>
   1dc7c:	mov	r1, #1
   1dc80:	ldr	r0, [fp, #-8]
   1dc84:	bl	11218 <fcntl64@plt>
   1dc88:	str	r0, [fp, #-12]
   1dc8c:	ldr	r3, [fp, #-12]
   1dc90:	cmp	r3, #0
   1dc94:	blt	1dcbc <__assert_fail@plt+0xc9c0>
   1dc98:	ldr	r3, [fp, #-12]
   1dc9c:	orr	r3, r3, #1
   1dca0:	mov	r2, r3
   1dca4:	mov	r1, #2
   1dca8:	ldr	r0, [fp, #-8]
   1dcac:	bl	11218 <fcntl64@plt>
   1dcb0:	mov	r3, r0
   1dcb4:	cmn	r3, #1
   1dcb8:	bne	1dcec <__assert_fail@plt+0xc9f0>
   1dcbc:	bl	111c4 <__errno_location@plt>
   1dcc0:	mov	r3, r0
   1dcc4:	ldr	r3, [r3]
   1dcc8:	str	r3, [fp, #-16]
   1dccc:	ldr	r0, [fp, #-8]
   1dcd0:	bl	112c0 <close@plt>
   1dcd4:	bl	111c4 <__errno_location@plt>
   1dcd8:	mov	r2, r0
   1dcdc:	ldr	r3, [fp, #-16]
   1dce0:	str	r3, [r2]
   1dce4:	mvn	r3, #0
   1dce8:	str	r3, [fp, #-8]
   1dcec:	ldr	r3, [fp, #-8]
   1dcf0:	mov	r0, r3
   1dcf4:	sub	sp, fp, #4
   1dcf8:	ldr	fp, [sp]
   1dcfc:	add	sp, sp, #4
   1dd00:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd04:	push	{r1, r2, r3}
   1dd08:	str	fp, [sp, #-8]!
   1dd0c:	str	lr, [sp, #4]
   1dd10:	add	fp, sp, #4
   1dd14:	sub	sp, sp, #20
   1dd18:	str	r0, [fp, #-20]	; 0xffffffec
   1dd1c:	mov	r3, #0
   1dd20:	str	r3, [fp, #-12]
   1dd24:	ldr	r3, [fp, #4]
   1dd28:	and	r3, r3, #64	; 0x40
   1dd2c:	cmp	r3, #0
   1dd30:	beq	1dd50 <__assert_fail@plt+0xca54>
   1dd34:	add	r3, fp, #8
   1dd38:	str	r3, [fp, #-16]
   1dd3c:	ldr	r3, [fp, #-16]
   1dd40:	add	r2, r3, #4
   1dd44:	str	r2, [fp, #-16]
   1dd48:	ldr	r3, [r3]
   1dd4c:	str	r3, [fp, #-12]
   1dd50:	ldr	r2, [fp, #-12]
   1dd54:	ldr	r1, [fp, #4]
   1dd58:	ldr	r0, [fp, #-20]	; 0xffffffec
   1dd5c:	bl	1111c <open64@plt>
   1dd60:	mov	r3, r0
   1dd64:	mov	r0, r3
   1dd68:	bl	1b400 <__assert_fail@plt+0xa104>
   1dd6c:	mov	r3, r0
   1dd70:	mov	r0, r3
   1dd74:	sub	sp, fp, #4
   1dd78:	ldr	fp, [sp]
   1dd7c:	ldr	lr, [sp, #4]
   1dd80:	add	sp, sp, #8
   1dd84:	add	sp, sp, #12
   1dd88:	bx	lr
   1dd8c:	str	fp, [sp, #-8]!
   1dd90:	str	lr, [sp, #4]
   1dd94:	add	fp, sp, #4
   1dd98:	sub	sp, sp, #16
   1dd9c:	str	r0, [fp, #-8]
   1dda0:	ldr	r3, [fp, #-8]
   1dda4:	ldr	r3, [r3]
   1dda8:	and	r3, r3, #256	; 0x100
   1ddac:	cmp	r3, #0
   1ddb0:	beq	1ddcc <__assert_fail@plt+0xcad0>
   1ddb4:	mov	r3, #1
   1ddb8:	str	r3, [sp]
   1ddbc:	mov	r2, #0
   1ddc0:	mov	r3, #0
   1ddc4:	ldr	r0, [fp, #-8]
   1ddc8:	bl	1de4c <__assert_fail@plt+0xcb50>
   1ddcc:	nop	{0}
   1ddd0:	sub	sp, fp, #4
   1ddd4:	ldr	fp, [sp]
   1ddd8:	add	sp, sp, #4
   1dddc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dde0:	str	fp, [sp, #-8]!
   1dde4:	str	lr, [sp, #4]
   1dde8:	add	fp, sp, #4
   1ddec:	sub	sp, sp, #8
   1ddf0:	str	r0, [fp, #-8]
   1ddf4:	ldr	r3, [fp, #-8]
   1ddf8:	cmp	r3, #0
   1ddfc:	beq	1de14 <__assert_fail@plt+0xcb18>
   1de00:	ldr	r0, [fp, #-8]
   1de04:	bl	11140 <__freading@plt>
   1de08:	mov	r3, r0
   1de0c:	cmp	r3, #0
   1de10:	bne	1de24 <__assert_fail@plt+0xcb28>
   1de14:	ldr	r0, [fp, #-8]
   1de18:	bl	11014 <fflush@plt>
   1de1c:	mov	r3, r0
   1de20:	b	1de38 <__assert_fail@plt+0xcb3c>
   1de24:	ldr	r0, [fp, #-8]
   1de28:	bl	1dd8c <__assert_fail@plt+0xca90>
   1de2c:	ldr	r0, [fp, #-8]
   1de30:	bl	11014 <fflush@plt>
   1de34:	mov	r3, r0
   1de38:	mov	r0, r3
   1de3c:	sub	sp, fp, #4
   1de40:	ldr	fp, [sp]
   1de44:	add	sp, sp, #4
   1de48:	pop	{pc}		; (ldr pc, [sp], #4)
   1de4c:	str	fp, [sp, #-8]!
   1de50:	str	lr, [sp, #4]
   1de54:	add	fp, sp, #4
   1de58:	sub	sp, sp, #32
   1de5c:	str	r0, [fp, #-16]
   1de60:	strd	r2, [fp, #-28]	; 0xffffffe4
   1de64:	ldr	r3, [fp, #-16]
   1de68:	ldr	r2, [r3, #8]
   1de6c:	ldr	r3, [fp, #-16]
   1de70:	ldr	r3, [r3, #4]
   1de74:	cmp	r2, r3
   1de78:	bne	1df10 <__assert_fail@plt+0xcc14>
   1de7c:	ldr	r3, [fp, #-16]
   1de80:	ldr	r2, [r3, #20]
   1de84:	ldr	r3, [fp, #-16]
   1de88:	ldr	r3, [r3, #16]
   1de8c:	cmp	r2, r3
   1de90:	bne	1df10 <__assert_fail@plt+0xcc14>
   1de94:	ldr	r3, [fp, #-16]
   1de98:	ldr	r3, [r3, #36]	; 0x24
   1de9c:	cmp	r3, #0
   1dea0:	bne	1df10 <__assert_fail@plt+0xcc14>
   1dea4:	ldr	r0, [fp, #-16]
   1dea8:	bl	111e8 <fileno@plt>
   1deac:	mov	r1, r0
   1deb0:	ldr	r3, [fp, #4]
   1deb4:	str	r3, [sp]
   1deb8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1debc:	mov	r0, r1
   1dec0:	bl	110c8 <lseek64@plt>
   1dec4:	strd	r0, [fp, #-12]
   1dec8:	ldrd	r2, [fp, #-12]
   1decc:	mvn	r0, #0
   1ded0:	mvn	r1, #0
   1ded4:	cmp	r3, r1
   1ded8:	cmpeq	r2, r0
   1dedc:	bne	1dee8 <__assert_fail@plt+0xcbec>
   1dee0:	mvn	r3, #0
   1dee4:	b	1df28 <__assert_fail@plt+0xcc2c>
   1dee8:	ldr	r3, [fp, #-16]
   1deec:	ldr	r3, [r3]
   1def0:	bic	r2, r3, #16
   1def4:	ldr	r3, [fp, #-16]
   1def8:	str	r2, [r3]
   1defc:	ldr	r1, [fp, #-16]
   1df00:	ldrd	r2, [fp, #-12]
   1df04:	strd	r2, [r1, #80]	; 0x50
   1df08:	mov	r3, #0
   1df0c:	b	1df28 <__assert_fail@plt+0xcc2c>
   1df10:	ldr	r3, [fp, #4]
   1df14:	str	r3, [sp]
   1df18:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1df1c:	ldr	r0, [fp, #-16]
   1df20:	bl	1120c <fseeko64@plt>
   1df24:	mov	r3, r0
   1df28:	mov	r0, r3
   1df2c:	sub	sp, fp, #4
   1df30:	ldr	fp, [sp]
   1df34:	add	sp, sp, #4
   1df38:	pop	{pc}		; (ldr pc, [sp], #4)
   1df3c:	str	fp, [sp, #-8]!
   1df40:	str	lr, [sp, #4]
   1df44:	add	fp, sp, #4
   1df48:	bl	111c4 <__errno_location@plt>
   1df4c:	mov	r2, r0
   1df50:	mov	r3, #12
   1df54:	str	r3, [r2]
   1df58:	mov	r3, #0
   1df5c:	mov	r0, r3
   1df60:	sub	sp, fp, #4
   1df64:	ldr	fp, [sp]
   1df68:	add	sp, sp, #4
   1df6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1df70:	str	fp, [sp, #-8]!
   1df74:	str	lr, [sp, #4]
   1df78:	add	fp, sp, #4
   1df7c:	sub	sp, sp, #8
   1df80:	str	r0, [fp, #-8]
   1df84:	ldr	r3, [fp, #-8]
   1df88:	mov	r0, r3
   1df8c:	bl	1d024 <__assert_fail@plt+0xbd28>
   1df90:	mov	r3, r0
   1df94:	mov	r0, r3
   1df98:	sub	sp, fp, #4
   1df9c:	ldr	fp, [sp]
   1dfa0:	add	sp, sp, #4
   1dfa4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dfa8:	str	fp, [sp, #-8]!
   1dfac:	str	lr, [sp, #4]
   1dfb0:	add	fp, sp, #4
   1dfb4:	sub	sp, sp, #8
   1dfb8:	str	r0, [fp, #-8]
   1dfbc:	str	r1, [fp, #-12]
   1dfc0:	ldr	r3, [fp, #-12]
   1dfc4:	cmp	r3, #0
   1dfc8:	moveq	r3, #1
   1dfcc:	movne	r3, #0
   1dfd0:	uxtb	r3, r3
   1dfd4:	mov	r2, r3
   1dfd8:	ldr	r3, [fp, #-12]
   1dfdc:	orr	r3, r2, r3
   1dfe0:	mov	r1, r3
   1dfe4:	ldr	r0, [fp, #-8]
   1dfe8:	bl	1d0b4 <__assert_fail@plt+0xbdb8>
   1dfec:	mov	r3, r0
   1dff0:	mov	r0, r3
   1dff4:	sub	sp, fp, #4
   1dff8:	ldr	fp, [sp]
   1dffc:	add	sp, sp, #4
   1e000:	pop	{pc}		; (ldr pc, [sp], #4)
   1e004:	str	fp, [sp, #-8]!
   1e008:	str	lr, [sp, #4]
   1e00c:	add	fp, sp, #4
   1e010:	sub	sp, sp, #8
   1e014:	str	r0, [fp, #-8]
   1e018:	str	r1, [fp, #-12]
   1e01c:	ldr	r3, [fp, #-8]
   1e020:	ldr	r2, [fp, #-12]
   1e024:	mov	r1, r2
   1e028:	mov	r0, r3
   1e02c:	bl	1cf54 <__assert_fail@plt+0xbc58>
   1e030:	mov	r3, r0
   1e034:	mov	r0, r3
   1e038:	sub	sp, fp, #4
   1e03c:	ldr	fp, [sp]
   1e040:	add	sp, sp, #4
   1e044:	pop	{pc}		; (ldr pc, [sp], #4)
   1e048:	str	fp, [sp, #-8]!
   1e04c:	str	lr, [sp, #4]
   1e050:	add	fp, sp, #4
   1e054:	sub	sp, sp, #16
   1e058:	str	r0, [fp, #-8]
   1e05c:	str	r1, [fp, #-12]
   1e060:	str	r2, [fp, #-16]
   1e064:	ldr	r3, [fp, #-12]
   1e068:	cmp	r3, #0
   1e06c:	beq	1e07c <__assert_fail@plt+0xcd80>
   1e070:	ldr	r3, [fp, #-16]
   1e074:	cmp	r3, #0
   1e078:	bne	1e08c <__assert_fail@plt+0xcd90>
   1e07c:	mov	r3, #1
   1e080:	str	r3, [fp, #-16]
   1e084:	ldr	r3, [fp, #-16]
   1e088:	str	r3, [fp, #-12]
   1e08c:	ldr	r3, [fp, #-12]
   1e090:	ldr	r2, [fp, #-16]
   1e094:	mov	r1, r3
   1e098:	ldr	r0, [fp, #-8]
   1e09c:	bl	1e1d8 <__assert_fail@plt+0xcedc>
   1e0a0:	mov	r3, r0
   1e0a4:	mov	r0, r3
   1e0a8:	sub	sp, fp, #4
   1e0ac:	ldr	fp, [sp]
   1e0b0:	add	sp, sp, #4
   1e0b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0b8:	str	fp, [sp, #-8]!
   1e0bc:	str	lr, [sp, #4]
   1e0c0:	add	fp, sp, #4
   1e0c4:	sub	sp, sp, #8
   1e0c8:	mov	r0, #14
   1e0cc:	bl	1123c <nl_langinfo@plt>
   1e0d0:	str	r0, [fp, #-8]
   1e0d4:	ldr	r3, [fp, #-8]
   1e0d8:	cmp	r3, #0
   1e0dc:	bne	1e0ec <__assert_fail@plt+0xcdf0>
   1e0e0:	movw	r3, #292	; 0x124
   1e0e4:	movt	r3, #2
   1e0e8:	str	r3, [fp, #-8]
   1e0ec:	ldr	r3, [fp, #-8]
   1e0f0:	ldrb	r3, [r3]
   1e0f4:	cmp	r3, #0
   1e0f8:	bne	1e108 <__assert_fail@plt+0xce0c>
   1e0fc:	movw	r3, #296	; 0x128
   1e100:	movt	r3, #2
   1e104:	str	r3, [fp, #-8]
   1e108:	ldr	r3, [fp, #-8]
   1e10c:	mov	r0, r3
   1e110:	sub	sp, fp, #4
   1e114:	ldr	fp, [sp]
   1e118:	add	sp, sp, #4
   1e11c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e120:	str	fp, [sp, #-8]!
   1e124:	str	lr, [sp, #4]
   1e128:	add	fp, sp, #4
   1e12c:	sub	sp, sp, #32
   1e130:	str	r0, [fp, #-24]	; 0xffffffe8
   1e134:	str	r1, [fp, #-28]	; 0xffffffe4
   1e138:	str	r2, [fp, #-32]	; 0xffffffe0
   1e13c:	str	r3, [fp, #-36]	; 0xffffffdc
   1e140:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e144:	cmp	r3, #0
   1e148:	bne	1e154 <__assert_fail@plt+0xce58>
   1e14c:	sub	r3, fp, #16
   1e150:	str	r3, [fp, #-24]	; 0xffffffe8
   1e154:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e158:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e15c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1e160:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e164:	bl	11104 <mbrtowc@plt>
   1e168:	str	r0, [fp, #-8]
   1e16c:	ldr	r3, [fp, #-8]
   1e170:	cmn	r3, #3
   1e174:	bls	1e1c0 <__assert_fail@plt+0xcec4>
   1e178:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e17c:	cmp	r3, #0
   1e180:	beq	1e1c0 <__assert_fail@plt+0xcec4>
   1e184:	mov	r0, #0
   1e188:	bl	1e7e0 <__assert_fail@plt+0xd4e4>
   1e18c:	mov	r3, r0
   1e190:	eor	r3, r3, #1
   1e194:	uxtb	r3, r3
   1e198:	cmp	r3, #0
   1e19c:	beq	1e1c0 <__assert_fail@plt+0xcec4>
   1e1a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1e1a4:	ldrb	r3, [r3]
   1e1a8:	strb	r3, [fp, #-9]
   1e1ac:	ldrb	r2, [fp, #-9]
   1e1b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e1b4:	str	r2, [r3]
   1e1b8:	mov	r3, #1
   1e1bc:	b	1e1c4 <__assert_fail@plt+0xcec8>
   1e1c0:	ldr	r3, [fp, #-8]
   1e1c4:	mov	r0, r3
   1e1c8:	sub	sp, fp, #4
   1e1cc:	ldr	fp, [sp]
   1e1d0:	add	sp, sp, #4
   1e1d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e1d8:	str	fp, [sp, #-8]!
   1e1dc:	str	lr, [sp, #4]
   1e1e0:	add	fp, sp, #4
   1e1e4:	sub	sp, sp, #24
   1e1e8:	str	r0, [fp, #-16]
   1e1ec:	str	r1, [fp, #-20]	; 0xffffffec
   1e1f0:	str	r2, [fp, #-24]	; 0xffffffe8
   1e1f4:	mov	ip, #0
   1e1f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e1fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e200:	umull	r0, r1, r2, r3
   1e204:	mov	r2, #0
   1e208:	mov	r3, #0
   1e20c:	mov	r2, r1
   1e210:	mov	r3, #0
   1e214:	cmp	r2, #0
   1e218:	beq	1e220 <__assert_fail@plt+0xcf24>
   1e21c:	mov	ip, #1
   1e220:	mov	r3, r0
   1e224:	str	r3, [fp, #-8]
   1e228:	mov	r3, ip
   1e22c:	and	r3, r3, #1
   1e230:	uxtb	r3, r3
   1e234:	cmp	r3, #0
   1e238:	beq	1e254 <__assert_fail@plt+0xcf58>
   1e23c:	bl	111c4 <__errno_location@plt>
   1e240:	mov	r2, r0
   1e244:	mov	r3, #12
   1e248:	str	r3, [r2]
   1e24c:	mov	r3, #0
   1e250:	b	1e268 <__assert_fail@plt+0xcf6c>
   1e254:	ldr	r3, [fp, #-8]
   1e258:	mov	r1, r3
   1e25c:	ldr	r0, [fp, #-16]
   1e260:	bl	1d0b4 <__assert_fail@plt+0xbdb8>
   1e264:	mov	r3, r0
   1e268:	mov	r0, r3
   1e26c:	sub	sp, fp, #4
   1e270:	ldr	fp, [sp]
   1e274:	add	sp, sp, #4
   1e278:	pop	{pc}		; (ldr pc, [sp], #4)
   1e27c:	str	fp, [sp, #-8]!
   1e280:	str	lr, [sp, #4]
   1e284:	add	fp, sp, #4
   1e288:	sub	sp, sp, #8
   1e28c:	str	r0, [fp, #-8]
   1e290:	mov	r2, #3
   1e294:	mov	r1, #0
   1e298:	ldr	r0, [fp, #-8]
   1e29c:	bl	1d920 <__assert_fail@plt+0xc624>
   1e2a0:	mov	r3, r0
   1e2a4:	mov	r0, r3
   1e2a8:	sub	sp, fp, #4
   1e2ac:	ldr	fp, [sp]
   1e2b0:	add	sp, sp, #4
   1e2b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e2b8:	push	{fp}		; (str fp, [sp, #-4]!)
   1e2bc:	add	fp, sp, #0
   1e2c0:	sub	sp, sp, #12
   1e2c4:	str	r0, [fp, #-8]
   1e2c8:	ldr	r3, [fp, #-8]
   1e2cc:	cmp	r3, #90	; 0x5a
   1e2d0:	bgt	1e2f4 <__assert_fail@plt+0xcff8>
   1e2d4:	ldr	r3, [fp, #-8]
   1e2d8:	cmp	r3, #65	; 0x41
   1e2dc:	bge	1e304 <__assert_fail@plt+0xd008>
   1e2e0:	ldr	r3, [fp, #-8]
   1e2e4:	sub	r3, r3, #48	; 0x30
   1e2e8:	cmp	r3, #9
   1e2ec:	bhi	1e30c <__assert_fail@plt+0xd010>
   1e2f0:	b	1e304 <__assert_fail@plt+0xd008>
   1e2f4:	ldr	r3, [fp, #-8]
   1e2f8:	sub	r3, r3, #97	; 0x61
   1e2fc:	cmp	r3, #25
   1e300:	bhi	1e30c <__assert_fail@plt+0xd010>
   1e304:	mov	r3, #1
   1e308:	b	1e310 <__assert_fail@plt+0xd014>
   1e30c:	mov	r3, #0
   1e310:	mov	r0, r3
   1e314:	add	sp, fp, #0
   1e318:	pop	{fp}		; (ldr fp, [sp], #4)
   1e31c:	bx	lr
   1e320:	push	{fp}		; (str fp, [sp, #-4]!)
   1e324:	add	fp, sp, #0
   1e328:	sub	sp, sp, #12
   1e32c:	str	r0, [fp, #-8]
   1e330:	ldr	r3, [fp, #-8]
   1e334:	cmp	r3, #65	; 0x41
   1e338:	blt	1e360 <__assert_fail@plt+0xd064>
   1e33c:	ldr	r3, [fp, #-8]
   1e340:	cmp	r3, #90	; 0x5a
   1e344:	ble	1e358 <__assert_fail@plt+0xd05c>
   1e348:	ldr	r3, [fp, #-8]
   1e34c:	sub	r3, r3, #97	; 0x61
   1e350:	cmp	r3, #25
   1e354:	bhi	1e360 <__assert_fail@plt+0xd064>
   1e358:	mov	r3, #1
   1e35c:	b	1e364 <__assert_fail@plt+0xd068>
   1e360:	mov	r3, #0
   1e364:	mov	r0, r3
   1e368:	add	sp, fp, #0
   1e36c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e370:	bx	lr
   1e374:	push	{fp}		; (str fp, [sp, #-4]!)
   1e378:	add	fp, sp, #0
   1e37c:	sub	sp, sp, #12
   1e380:	str	r0, [fp, #-8]
   1e384:	ldr	r3, [fp, #-8]
   1e388:	cmp	r3, #127	; 0x7f
   1e38c:	bhi	1e398 <__assert_fail@plt+0xd09c>
   1e390:	mov	r3, #1
   1e394:	b	1e39c <__assert_fail@plt+0xd0a0>
   1e398:	mov	r3, #0
   1e39c:	mov	r0, r3
   1e3a0:	add	sp, fp, #0
   1e3a4:	pop	{fp}		; (ldr fp, [sp], #4)
   1e3a8:	bx	lr
   1e3ac:	push	{fp}		; (str fp, [sp, #-4]!)
   1e3b0:	add	fp, sp, #0
   1e3b4:	sub	sp, sp, #12
   1e3b8:	str	r0, [fp, #-8]
   1e3bc:	ldr	r3, [fp, #-8]
   1e3c0:	cmp	r3, #32
   1e3c4:	beq	1e3d4 <__assert_fail@plt+0xd0d8>
   1e3c8:	ldr	r3, [fp, #-8]
   1e3cc:	cmp	r3, #9
   1e3d0:	bne	1e3dc <__assert_fail@plt+0xd0e0>
   1e3d4:	mov	r3, #1
   1e3d8:	b	1e3e0 <__assert_fail@plt+0xd0e4>
   1e3dc:	mov	r3, #0
   1e3e0:	and	r3, r3, #1
   1e3e4:	uxtb	r3, r3
   1e3e8:	mov	r0, r3
   1e3ec:	add	sp, fp, #0
   1e3f0:	pop	{fp}		; (ldr fp, [sp], #4)
   1e3f4:	bx	lr
   1e3f8:	push	{fp}		; (str fp, [sp, #-4]!)
   1e3fc:	add	fp, sp, #0
   1e400:	sub	sp, sp, #12
   1e404:	str	r0, [fp, #-8]
   1e408:	ldr	r3, [fp, #-8]
   1e40c:	cmp	r3, #0
   1e410:	blt	1e434 <__assert_fail@plt+0xd138>
   1e414:	ldr	r3, [fp, #-8]
   1e418:	cmp	r3, #31
   1e41c:	ble	1e42c <__assert_fail@plt+0xd130>
   1e420:	ldr	r3, [fp, #-8]
   1e424:	cmp	r3, #127	; 0x7f
   1e428:	bne	1e434 <__assert_fail@plt+0xd138>
   1e42c:	mov	r3, #1
   1e430:	b	1e438 <__assert_fail@plt+0xd13c>
   1e434:	mov	r3, #0
   1e438:	mov	r0, r3
   1e43c:	add	sp, fp, #0
   1e440:	pop	{fp}		; (ldr fp, [sp], #4)
   1e444:	bx	lr
   1e448:	push	{fp}		; (str fp, [sp, #-4]!)
   1e44c:	add	fp, sp, #0
   1e450:	sub	sp, sp, #12
   1e454:	str	r0, [fp, #-8]
   1e458:	ldr	r3, [fp, #-8]
   1e45c:	sub	r3, r3, #48	; 0x30
   1e460:	cmp	r3, #9
   1e464:	bhi	1e470 <__assert_fail@plt+0xd174>
   1e468:	mov	r3, #1
   1e46c:	b	1e474 <__assert_fail@plt+0xd178>
   1e470:	mov	r3, #0
   1e474:	mov	r0, r3
   1e478:	add	sp, fp, #0
   1e47c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e480:	bx	lr
   1e484:	push	{fp}		; (str fp, [sp, #-4]!)
   1e488:	add	fp, sp, #0
   1e48c:	sub	sp, sp, #12
   1e490:	str	r0, [fp, #-8]
   1e494:	ldr	r3, [fp, #-8]
   1e498:	sub	r3, r3, #33	; 0x21
   1e49c:	cmp	r3, #93	; 0x5d
   1e4a0:	bhi	1e4ac <__assert_fail@plt+0xd1b0>
   1e4a4:	mov	r3, #1
   1e4a8:	b	1e4b0 <__assert_fail@plt+0xd1b4>
   1e4ac:	mov	r3, #0
   1e4b0:	mov	r0, r3
   1e4b4:	add	sp, fp, #0
   1e4b8:	pop	{fp}		; (ldr fp, [sp], #4)
   1e4bc:	bx	lr
   1e4c0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e4c4:	add	fp, sp, #0
   1e4c8:	sub	sp, sp, #12
   1e4cc:	str	r0, [fp, #-8]
   1e4d0:	ldr	r3, [fp, #-8]
   1e4d4:	sub	r3, r3, #97	; 0x61
   1e4d8:	cmp	r3, #25
   1e4dc:	bhi	1e4e8 <__assert_fail@plt+0xd1ec>
   1e4e0:	mov	r3, #1
   1e4e4:	b	1e4ec <__assert_fail@plt+0xd1f0>
   1e4e8:	mov	r3, #0
   1e4ec:	mov	r0, r3
   1e4f0:	add	sp, fp, #0
   1e4f4:	pop	{fp}		; (ldr fp, [sp], #4)
   1e4f8:	bx	lr
   1e4fc:	push	{fp}		; (str fp, [sp, #-4]!)
   1e500:	add	fp, sp, #0
   1e504:	sub	sp, sp, #12
   1e508:	str	r0, [fp, #-8]
   1e50c:	ldr	r3, [fp, #-8]
   1e510:	sub	r3, r3, #32
   1e514:	cmp	r3, #94	; 0x5e
   1e518:	bhi	1e524 <__assert_fail@plt+0xd228>
   1e51c:	mov	r3, #1
   1e520:	b	1e528 <__assert_fail@plt+0xd22c>
   1e524:	mov	r3, #0
   1e528:	mov	r0, r3
   1e52c:	add	sp, fp, #0
   1e530:	pop	{fp}		; (ldr fp, [sp], #4)
   1e534:	bx	lr
   1e538:	push	{fp}		; (str fp, [sp, #-4]!)
   1e53c:	add	fp, sp, #0
   1e540:	sub	sp, sp, #12
   1e544:	str	r0, [fp, #-8]
   1e548:	ldr	r3, [fp, #-8]
   1e54c:	cmp	r3, #64	; 0x40
   1e550:	bgt	1e574 <__assert_fail@plt+0xd278>
   1e554:	ldr	r3, [fp, #-8]
   1e558:	cmp	r3, #58	; 0x3a
   1e55c:	bge	1e59c <__assert_fail@plt+0xd2a0>
   1e560:	ldr	r3, [fp, #-8]
   1e564:	sub	r3, r3, #33	; 0x21
   1e568:	cmp	r3, #14
   1e56c:	bhi	1e5a4 <__assert_fail@plt+0xd2a8>
   1e570:	b	1e59c <__assert_fail@plt+0xd2a0>
   1e574:	ldr	r3, [fp, #-8]
   1e578:	cmp	r3, #91	; 0x5b
   1e57c:	blt	1e5a4 <__assert_fail@plt+0xd2a8>
   1e580:	ldr	r3, [fp, #-8]
   1e584:	cmp	r3, #96	; 0x60
   1e588:	ble	1e59c <__assert_fail@plt+0xd2a0>
   1e58c:	ldr	r3, [fp, #-8]
   1e590:	sub	r3, r3, #123	; 0x7b
   1e594:	cmp	r3, #3
   1e598:	bhi	1e5a4 <__assert_fail@plt+0xd2a8>
   1e59c:	mov	r3, #1
   1e5a0:	b	1e5a8 <__assert_fail@plt+0xd2ac>
   1e5a4:	mov	r3, #0
   1e5a8:	mov	r0, r3
   1e5ac:	add	sp, fp, #0
   1e5b0:	pop	{fp}		; (ldr fp, [sp], #4)
   1e5b4:	bx	lr
   1e5b8:	push	{fp}		; (str fp, [sp, #-4]!)
   1e5bc:	add	fp, sp, #0
   1e5c0:	sub	sp, sp, #12
   1e5c4:	str	r0, [fp, #-8]
   1e5c8:	ldr	r3, [fp, #-8]
   1e5cc:	cmp	r3, #9
   1e5d0:	blt	1e5f4 <__assert_fail@plt+0xd2f8>
   1e5d4:	ldr	r3, [fp, #-8]
   1e5d8:	cmp	r3, #13
   1e5dc:	ble	1e5ec <__assert_fail@plt+0xd2f0>
   1e5e0:	ldr	r3, [fp, #-8]
   1e5e4:	cmp	r3, #32
   1e5e8:	bne	1e5f4 <__assert_fail@plt+0xd2f8>
   1e5ec:	mov	r3, #1
   1e5f0:	b	1e5f8 <__assert_fail@plt+0xd2fc>
   1e5f4:	mov	r3, #0
   1e5f8:	mov	r0, r3
   1e5fc:	add	sp, fp, #0
   1e600:	pop	{fp}		; (ldr fp, [sp], #4)
   1e604:	bx	lr
   1e608:	push	{fp}		; (str fp, [sp, #-4]!)
   1e60c:	add	fp, sp, #0
   1e610:	sub	sp, sp, #12
   1e614:	str	r0, [fp, #-8]
   1e618:	ldr	r3, [fp, #-8]
   1e61c:	sub	r3, r3, #65	; 0x41
   1e620:	cmp	r3, #25
   1e624:	bhi	1e630 <__assert_fail@plt+0xd334>
   1e628:	mov	r3, #1
   1e62c:	b	1e634 <__assert_fail@plt+0xd338>
   1e630:	mov	r3, #0
   1e634:	mov	r0, r3
   1e638:	add	sp, fp, #0
   1e63c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e640:	bx	lr
   1e644:	push	{fp}		; (str fp, [sp, #-4]!)
   1e648:	add	fp, sp, #0
   1e64c:	sub	sp, sp, #12
   1e650:	str	r0, [fp, #-8]
   1e654:	ldr	r3, [fp, #-8]
   1e658:	sub	r3, r3, #48	; 0x30
   1e65c:	cmp	r3, #54	; 0x36
   1e660:	ldrls	pc, [pc, r3, lsl #2]
   1e664:	b	1e74c <__assert_fail@plt+0xd450>
   1e668:	andeq	lr, r1, r4, asr #14
   1e66c:	andeq	lr, r1, r4, asr #14
   1e670:	andeq	lr, r1, r4, asr #14
   1e674:	andeq	lr, r1, r4, asr #14
   1e678:	andeq	lr, r1, r4, asr #14
   1e67c:	andeq	lr, r1, r4, asr #14
   1e680:	andeq	lr, r1, r4, asr #14
   1e684:	andeq	lr, r1, r4, asr #14
   1e688:	andeq	lr, r1, r4, asr #14
   1e68c:	andeq	lr, r1, r4, asr #14
   1e690:	andeq	lr, r1, ip, asr #14
   1e694:	andeq	lr, r1, ip, asr #14
   1e698:	andeq	lr, r1, ip, asr #14
   1e69c:	andeq	lr, r1, ip, asr #14
   1e6a0:	andeq	lr, r1, ip, asr #14
   1e6a4:	andeq	lr, r1, ip, asr #14
   1e6a8:	andeq	lr, r1, ip, asr #14
   1e6ac:	andeq	lr, r1, r4, asr #14
   1e6b0:	andeq	lr, r1, r4, asr #14
   1e6b4:	andeq	lr, r1, r4, asr #14
   1e6b8:	andeq	lr, r1, r4, asr #14
   1e6bc:	andeq	lr, r1, r4, asr #14
   1e6c0:	andeq	lr, r1, r4, asr #14
   1e6c4:	andeq	lr, r1, ip, asr #14
   1e6c8:	andeq	lr, r1, ip, asr #14
   1e6cc:	andeq	lr, r1, ip, asr #14
   1e6d0:	andeq	lr, r1, ip, asr #14
   1e6d4:	andeq	lr, r1, ip, asr #14
   1e6d8:	andeq	lr, r1, ip, asr #14
   1e6dc:	andeq	lr, r1, ip, asr #14
   1e6e0:	andeq	lr, r1, ip, asr #14
   1e6e4:	andeq	lr, r1, ip, asr #14
   1e6e8:	andeq	lr, r1, ip, asr #14
   1e6ec:	andeq	lr, r1, ip, asr #14
   1e6f0:	andeq	lr, r1, ip, asr #14
   1e6f4:	andeq	lr, r1, ip, asr #14
   1e6f8:	andeq	lr, r1, ip, asr #14
   1e6fc:	andeq	lr, r1, ip, asr #14
   1e700:	andeq	lr, r1, ip, asr #14
   1e704:	andeq	lr, r1, ip, asr #14
   1e708:	andeq	lr, r1, ip, asr #14
   1e70c:	andeq	lr, r1, ip, asr #14
   1e710:	andeq	lr, r1, ip, asr #14
   1e714:	andeq	lr, r1, ip, asr #14
   1e718:	andeq	lr, r1, ip, asr #14
   1e71c:	andeq	lr, r1, ip, asr #14
   1e720:	andeq	lr, r1, ip, asr #14
   1e724:	andeq	lr, r1, ip, asr #14
   1e728:	andeq	lr, r1, ip, asr #14
   1e72c:	andeq	lr, r1, r4, asr #14
   1e730:	andeq	lr, r1, r4, asr #14
   1e734:	andeq	lr, r1, r4, asr #14
   1e738:	andeq	lr, r1, r4, asr #14
   1e73c:	andeq	lr, r1, r4, asr #14
   1e740:	andeq	lr, r1, r4, asr #14
   1e744:	mov	r3, #1
   1e748:	b	1e750 <__assert_fail@plt+0xd454>
   1e74c:	mov	r3, #0
   1e750:	mov	r0, r3
   1e754:	add	sp, fp, #0
   1e758:	pop	{fp}		; (ldr fp, [sp], #4)
   1e75c:	bx	lr
   1e760:	push	{fp}		; (str fp, [sp, #-4]!)
   1e764:	add	fp, sp, #0
   1e768:	sub	sp, sp, #12
   1e76c:	str	r0, [fp, #-8]
   1e770:	ldr	r3, [fp, #-8]
   1e774:	sub	r3, r3, #65	; 0x41
   1e778:	cmp	r3, #25
   1e77c:	bhi	1e78c <__assert_fail@plt+0xd490>
   1e780:	ldr	r3, [fp, #-8]
   1e784:	add	r3, r3, #32
   1e788:	b	1e790 <__assert_fail@plt+0xd494>
   1e78c:	ldr	r3, [fp, #-8]
   1e790:	mov	r0, r3
   1e794:	add	sp, fp, #0
   1e798:	pop	{fp}		; (ldr fp, [sp], #4)
   1e79c:	bx	lr
   1e7a0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e7a4:	add	fp, sp, #0
   1e7a8:	sub	sp, sp, #12
   1e7ac:	str	r0, [fp, #-8]
   1e7b0:	ldr	r3, [fp, #-8]
   1e7b4:	sub	r3, r3, #97	; 0x61
   1e7b8:	cmp	r3, #25
   1e7bc:	bhi	1e7cc <__assert_fail@plt+0xd4d0>
   1e7c0:	ldr	r3, [fp, #-8]
   1e7c4:	sub	r3, r3, #32
   1e7c8:	b	1e7d0 <__assert_fail@plt+0xd4d4>
   1e7cc:	ldr	r3, [fp, #-8]
   1e7d0:	mov	r0, r3
   1e7d4:	add	sp, fp, #0
   1e7d8:	pop	{fp}		; (ldr fp, [sp], #4)
   1e7dc:	bx	lr
   1e7e0:	str	fp, [sp, #-8]!
   1e7e4:	str	lr, [sp, #4]
   1e7e8:	add	fp, sp, #4
   1e7ec:	sub	sp, sp, #272	; 0x110
   1e7f0:	str	r0, [fp, #-272]	; 0xfffffef0
   1e7f4:	sub	r3, fp, #264	; 0x108
   1e7f8:	movw	r2, #257	; 0x101
   1e7fc:	mov	r1, r3
   1e800:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1e804:	bl	1e9a4 <__assert_fail@plt+0xd6a8>
   1e808:	mov	r3, r0
   1e80c:	cmp	r3, #0
   1e810:	beq	1e81c <__assert_fail@plt+0xd520>
   1e814:	mov	r3, #0
   1e818:	b	1e870 <__assert_fail@plt+0xd574>
   1e81c:	sub	r3, fp, #264	; 0x108
   1e820:	movw	r1, #304	; 0x130
   1e824:	movt	r1, #2
   1e828:	mov	r0, r3
   1e82c:	bl	10ff0 <strcmp@plt>
   1e830:	mov	r3, r0
   1e834:	cmp	r3, #0
   1e838:	beq	1e864 <__assert_fail@plt+0xd568>
   1e83c:	sub	r3, fp, #264	; 0x108
   1e840:	movw	r1, #308	; 0x134
   1e844:	movt	r1, #2
   1e848:	mov	r0, r3
   1e84c:	bl	10ff0 <strcmp@plt>
   1e850:	mov	r3, r0
   1e854:	cmp	r3, #0
   1e858:	beq	1e864 <__assert_fail@plt+0xd568>
   1e85c:	mov	r3, #1
   1e860:	b	1e868 <__assert_fail@plt+0xd56c>
   1e864:	mov	r3, #0
   1e868:	and	r3, r3, #1
   1e86c:	uxtb	r3, r3
   1e870:	mov	r0, r3
   1e874:	sub	sp, fp, #4
   1e878:	ldr	fp, [sp]
   1e87c:	add	sp, sp, #4
   1e880:	pop	{pc}		; (ldr pc, [sp], #4)
   1e884:	str	fp, [sp, #-8]!
   1e888:	str	lr, [sp, #4]
   1e88c:	add	fp, sp, #4
   1e890:	sub	sp, sp, #16
   1e894:	str	r0, [fp, #-16]
   1e898:	mov	r1, #0
   1e89c:	ldr	r0, [fp, #-16]
   1e8a0:	bl	11224 <setlocale@plt>
   1e8a4:	str	r0, [fp, #-8]
   1e8a8:	ldr	r3, [fp, #-8]
   1e8ac:	mov	r0, r3
   1e8b0:	sub	sp, fp, #4
   1e8b4:	ldr	fp, [sp]
   1e8b8:	add	sp, sp, #4
   1e8bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8c0:	str	fp, [sp, #-8]!
   1e8c4:	str	lr, [sp, #4]
   1e8c8:	add	fp, sp, #4
   1e8cc:	sub	sp, sp, #24
   1e8d0:	str	r0, [fp, #-16]
   1e8d4:	str	r1, [fp, #-20]	; 0xffffffec
   1e8d8:	str	r2, [fp, #-24]	; 0xffffffe8
   1e8dc:	ldr	r0, [fp, #-16]
   1e8e0:	bl	1e884 <__assert_fail@plt+0xd588>
   1e8e4:	str	r0, [fp, #-8]
   1e8e8:	ldr	r3, [fp, #-8]
   1e8ec:	cmp	r3, #0
   1e8f0:	bne	1e914 <__assert_fail@plt+0xd618>
   1e8f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e8f8:	cmp	r3, #0
   1e8fc:	beq	1e90c <__assert_fail@plt+0xd610>
   1e900:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e904:	mov	r2, #0
   1e908:	strb	r2, [r3]
   1e90c:	mov	r3, #22
   1e910:	b	1e990 <__assert_fail@plt+0xd694>
   1e914:	ldr	r0, [fp, #-8]
   1e918:	bl	11188 <strlen@plt>
   1e91c:	str	r0, [fp, #-12]
   1e920:	ldr	r2, [fp, #-12]
   1e924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e928:	cmp	r2, r3
   1e92c:	bcs	1e950 <__assert_fail@plt+0xd654>
   1e930:	ldr	r3, [fp, #-12]
   1e934:	add	r3, r3, #1
   1e938:	mov	r2, r3
   1e93c:	ldr	r1, [fp, #-8]
   1e940:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e944:	bl	11044 <memcpy@plt>
   1e948:	mov	r3, #0
   1e94c:	b	1e990 <__assert_fail@plt+0xd694>
   1e950:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e954:	cmp	r3, #0
   1e958:	beq	1e98c <__assert_fail@plt+0xd690>
   1e95c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e960:	sub	r3, r3, #1
   1e964:	mov	r2, r3
   1e968:	ldr	r1, [fp, #-8]
   1e96c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e970:	bl	11044 <memcpy@plt>
   1e974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e978:	sub	r3, r3, #1
   1e97c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e980:	add	r3, r2, r3
   1e984:	mov	r2, #0
   1e988:	strb	r2, [r3]
   1e98c:	mov	r3, #34	; 0x22
   1e990:	mov	r0, r3
   1e994:	sub	sp, fp, #4
   1e998:	ldr	fp, [sp]
   1e99c:	add	sp, sp, #4
   1e9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9a4:	str	fp, [sp, #-8]!
   1e9a8:	str	lr, [sp, #4]
   1e9ac:	add	fp, sp, #4
   1e9b0:	sub	sp, sp, #16
   1e9b4:	str	r0, [fp, #-8]
   1e9b8:	str	r1, [fp, #-12]
   1e9bc:	str	r2, [fp, #-16]
   1e9c0:	ldr	r2, [fp, #-16]
   1e9c4:	ldr	r1, [fp, #-12]
   1e9c8:	ldr	r0, [fp, #-8]
   1e9cc:	bl	1e8c0 <__assert_fail@plt+0xd5c4>
   1e9d0:	mov	r3, r0
   1e9d4:	mov	r0, r3
   1e9d8:	sub	sp, fp, #4
   1e9dc:	ldr	fp, [sp]
   1e9e0:	add	sp, sp, #4
   1e9e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9e8:	str	fp, [sp, #-8]!
   1e9ec:	str	lr, [sp, #4]
   1e9f0:	add	fp, sp, #4
   1e9f4:	sub	sp, sp, #8
   1e9f8:	str	r0, [fp, #-8]
   1e9fc:	ldr	r0, [fp, #-8]
   1ea00:	bl	1e884 <__assert_fail@plt+0xd588>
   1ea04:	mov	r3, r0
   1ea08:	mov	r0, r3
   1ea0c:	sub	sp, fp, #4
   1ea10:	ldr	fp, [sp]
   1ea14:	add	sp, sp, #4
   1ea18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea1c:	cmp	r3, #0
   1ea20:	cmpeq	r2, #0
   1ea24:	bne	1ea3c <__assert_fail@plt+0xd740>
   1ea28:	cmp	r1, #0
   1ea2c:	cmpeq	r0, #0
   1ea30:	mvnne	r1, #0
   1ea34:	mvnne	r0, #0
   1ea38:	b	1ea58 <__assert_fail@plt+0xd75c>
   1ea3c:	sub	sp, sp, #8
   1ea40:	push	{sp, lr}
   1ea44:	bl	1ea68 <__assert_fail@plt+0xd76c>
   1ea48:	ldr	lr, [sp, #4]
   1ea4c:	add	sp, sp, #8
   1ea50:	pop	{r2, r3}
   1ea54:	bx	lr
   1ea58:	push	{r1, lr}
   1ea5c:	mov	r0, #8
   1ea60:	bl	10fe4 <raise@plt>
   1ea64:	pop	{r1, pc}
   1ea68:	cmp	r1, r3
   1ea6c:	cmpeq	r0, r2
   1ea70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea74:	mov	r4, r0
   1ea78:	movcc	r0, #0
   1ea7c:	mov	r5, r1
   1ea80:	ldr	lr, [sp, #36]	; 0x24
   1ea84:	movcc	r1, r0
   1ea88:	bcc	1eb84 <__assert_fail@plt+0xd888>
   1ea8c:	cmp	r3, #0
   1ea90:	clzeq	ip, r2
   1ea94:	clzne	ip, r3
   1ea98:	addeq	ip, ip, #32
   1ea9c:	cmp	r5, #0
   1eaa0:	clzeq	r1, r4
   1eaa4:	addeq	r1, r1, #32
   1eaa8:	clzne	r1, r5
   1eaac:	sub	ip, ip, r1
   1eab0:	sub	sl, ip, #32
   1eab4:	lsl	r9, r3, ip
   1eab8:	rsb	fp, ip, #32
   1eabc:	orr	r9, r9, r2, lsl sl
   1eac0:	orr	r9, r9, r2, lsr fp
   1eac4:	lsl	r8, r2, ip
   1eac8:	cmp	r5, r9
   1eacc:	cmpeq	r4, r8
   1ead0:	movcc	r0, #0
   1ead4:	movcc	r1, r0
   1ead8:	bcc	1eaf4 <__assert_fail@plt+0xd7f8>
   1eadc:	mov	r0, #1
   1eae0:	subs	r4, r4, r8
   1eae4:	lsl	r1, r0, sl
   1eae8:	orr	r1, r1, r0, lsr fp
   1eaec:	lsl	r0, r0, ip
   1eaf0:	sbc	r5, r5, r9
   1eaf4:	cmp	ip, #0
   1eaf8:	beq	1eb84 <__assert_fail@plt+0xd888>
   1eafc:	lsr	r6, r8, #1
   1eb00:	orr	r6, r6, r9, lsl #31
   1eb04:	lsr	r7, r9, #1
   1eb08:	mov	r2, ip
   1eb0c:	b	1eb30 <__assert_fail@plt+0xd834>
   1eb10:	subs	r3, r4, r6
   1eb14:	sbc	r8, r5, r7
   1eb18:	adds	r3, r3, r3
   1eb1c:	adc	r8, r8, r8
   1eb20:	adds	r4, r3, #1
   1eb24:	adc	r5, r8, #0
   1eb28:	subs	r2, r2, #1
   1eb2c:	beq	1eb4c <__assert_fail@plt+0xd850>
   1eb30:	cmp	r5, r7
   1eb34:	cmpeq	r4, r6
   1eb38:	bcs	1eb10 <__assert_fail@plt+0xd814>
   1eb3c:	adds	r4, r4, r4
   1eb40:	adc	r5, r5, r5
   1eb44:	subs	r2, r2, #1
   1eb48:	bne	1eb30 <__assert_fail@plt+0xd834>
   1eb4c:	lsr	r3, r4, ip
   1eb50:	orr	r3, r3, r5, lsl fp
   1eb54:	lsr	r2, r5, ip
   1eb58:	orr	r3, r3, r5, lsr sl
   1eb5c:	adds	r0, r0, r4
   1eb60:	mov	r4, r3
   1eb64:	lsl	r3, r2, ip
   1eb68:	orr	r3, r3, r4, lsl sl
   1eb6c:	lsl	ip, r4, ip
   1eb70:	orr	r3, r3, r4, lsr fp
   1eb74:	adc	r1, r1, r5
   1eb78:	subs	r0, r0, ip
   1eb7c:	mov	r5, r2
   1eb80:	sbc	r1, r1, r3
   1eb84:	cmp	lr, #0
   1eb88:	strdne	r4, [lr]
   1eb8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1eb94:	mov	r7, r0
   1eb98:	ldr	r6, [pc, #72]	; 1ebe8 <__assert_fail@plt+0xd8ec>
   1eb9c:	ldr	r5, [pc, #72]	; 1ebec <__assert_fail@plt+0xd8f0>
   1eba0:	add	r6, pc, r6
   1eba4:	add	r5, pc, r5
   1eba8:	sub	r6, r6, r5
   1ebac:	mov	r8, r1
   1ebb0:	mov	r9, r2
   1ebb4:	bl	10f94 <fstatfs64@plt-0x20>
   1ebb8:	asrs	r6, r6, #2
   1ebbc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ebc0:	mov	r4, #0
   1ebc4:	add	r4, r4, #1
   1ebc8:	ldr	r3, [r5], #4
   1ebcc:	mov	r2, r9
   1ebd0:	mov	r1, r8
   1ebd4:	mov	r0, r7
   1ebd8:	blx	r3
   1ebdc:	cmp	r6, r4
   1ebe0:	bne	1ebc4 <__assert_fail@plt+0xd8c8>
   1ebe4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ebe8:	andeq	r2, r1, ip, ror #6
   1ebec:	andeq	r2, r1, r4, ror #6
   1ebf0:	bx	lr
   1ebf4:	ldr	r3, [pc, #12]	; 1ec08 <__assert_fail@plt+0xd90c>
   1ebf8:	mov	r1, #0
   1ebfc:	add	r3, pc, r3
   1ec00:	ldr	r2, [r3]
   1ec04:	b	111d0 <__cxa_atexit@plt>
   1ec08:	andeq	r2, r1, ip, lsr #10
   1ec0c:	mov	r2, r1
   1ec10:	mov	r1, r0
   1ec14:	mov	r0, #3
   1ec18:	b	1129c <__xstat64@plt>
   1ec1c:	mov	r2, r1
   1ec20:	mov	r1, r0
   1ec24:	mov	r0, #3
   1ec28:	b	110b0 <__fxstat64@plt>
   1ec2c:	mov	r2, r1
   1ec30:	mov	r1, r0
   1ec34:	mov	r0, #3
   1ec38:	b	112cc <__lxstat64@plt>
   1ec3c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ec40:	sub	sp, sp, #12
   1ec44:	str	r3, [sp]
   1ec48:	mov	r3, r2
   1ec4c:	mov	r2, r1
   1ec50:	mov	r1, r0
   1ec54:	mov	r0, #3
   1ec58:	bl	11098 <__fxstatat64@plt>
   1ec5c:	add	sp, sp, #12
   1ec60:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001ec64 <.fini>:
   1ec64:	push	{r3, lr}
   1ec68:	pop	{r3, pc}
