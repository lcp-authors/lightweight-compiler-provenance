
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00012350 <.init>:
   12350:	push	{r3, lr}
   12354:	bl	12460 <_start@@Base+0x3c>
   12358:	pop	{r3, pc}

Disassembly of section .plt:

0001235c <strcmp@plt-0x14>:
   1235c:	push	{lr}		; (str lr, [sp, #-4]!)
   12360:	ldr	lr, [pc, #4]	; 1236c <strcmp@plt-0x4>
   12364:	add	lr, pc, lr
   12368:	ldr	pc, [lr, #8]!
   1236c:	muleq	r1, r4, ip

00012370 <strcmp@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #90112	; 0x16000
   12378:	ldr	pc, [ip, #3220]!	; 0xc94

0001237c <free@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #90112	; 0x16000
   12384:	ldr	pc, [ip, #3212]!	; 0xc8c

00012388 <memcpy@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #90112	; 0x16000
   12390:	ldr	pc, [ip, #3204]!	; 0xc84

00012394 <realloc@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #90112	; 0x16000
   1239c:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a0 <puts@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #90112	; 0x16000
   123a8:	ldr	pc, [ip, #3188]!	; 0xc74

000123ac <malloc@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #90112	; 0x16000
   123b4:	ldr	pc, [ip, #3180]!	; 0xc6c

000123b8 <__libc_start_main@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #90112	; 0x16000
   123c0:	ldr	pc, [ip, #3172]!	; 0xc64

000123c4 <__gmon_start__@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #90112	; 0x16000
   123cc:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d0 <bcmp@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #90112	; 0x16000
   123d8:	ldr	pc, [ip, #3156]!	; 0xc54

000123dc <strlen@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #90112	; 0x16000
   123e4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123e8 <posix_memalign@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #90112	; 0x16000
   123f0:	ldr	pc, [ip, #3140]!	; 0xc44

000123f4 <memset@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #90112	; 0x16000
   123fc:	ldr	pc, [ip, #3132]!	; 0xc3c

00012400 <memchr@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #90112	; 0x16000
   12408:	ldr	pc, [ip, #3124]!	; 0xc34

0001240c <abort@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #90112	; 0x16000
   12414:	ldr	pc, [ip, #3116]!	; 0xc2c

00012418 <__assert_fail@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #90112	; 0x16000
   12420:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00012424 <_start@@Base>:
   12424:	mov	fp, #0
   12428:	mov	lr, #0
   1242c:	pop	{r1}		; (ldr r1, [sp], #4)
   12430:	mov	r2, sp
   12434:	push	{r2}		; (str r2, [sp, #-4]!)
   12438:	push	{r0}		; (str r0, [sp, #-4]!)
   1243c:	ldr	ip, [pc, #16]	; 12454 <_start@@Base+0x30>
   12440:	push	{ip}		; (str ip, [sp, #-4]!)
   12444:	ldr	r0, [pc, #12]	; 12458 <_start@@Base+0x34>
   12448:	ldr	r3, [pc, #12]	; 1245c <_start@@Base+0x38>
   1244c:	bl	123b8 <__libc_start_main@plt>
   12450:	bl	1240c <abort@plt>
   12454:	andeq	r7, r1, ip, lsr #10
   12458:	andeq	r3, r1, r8, lsl #3
   1245c:	andeq	r7, r1, ip, asr #9
   12460:	ldr	r3, [pc, #20]	; 1247c <_start@@Base+0x58>
   12464:	ldr	r2, [pc, #20]	; 12480 <_start@@Base+0x5c>
   12468:	add	r3, pc, r3
   1246c:	ldr	r2, [r3, r2]
   12470:	cmp	r2, #0
   12474:	bxeq	lr
   12478:	b	123c4 <__gmon_start__@plt>
   1247c:	muleq	r1, r0, fp
   12480:	andeq	r0, r0, r8, asr #32
   12484:	ldr	r0, [pc, #24]	; 124a4 <_start@@Base+0x80>
   12488:	ldr	r3, [pc, #24]	; 124a8 <_start@@Base+0x84>
   1248c:	cmp	r3, r0
   12490:	bxeq	lr
   12494:	ldr	r3, [pc, #16]	; 124ac <_start@@Base+0x88>
   12498:	cmp	r3, #0
   1249c:	bxeq	lr
   124a0:	bx	r3
   124a4:	andeq	r9, r2, r4, asr r0
   124a8:	andeq	r9, r2, r4, asr r0
   124ac:	andeq	r0, r0, r0
   124b0:	ldr	r0, [pc, #36]	; 124dc <_start@@Base+0xb8>
   124b4:	ldr	r1, [pc, #36]	; 124e0 <_start@@Base+0xbc>
   124b8:	sub	r1, r1, r0
   124bc:	asr	r1, r1, #2
   124c0:	add	r1, r1, r1, lsr #31
   124c4:	asrs	r1, r1, #1
   124c8:	bxeq	lr
   124cc:	ldr	r3, [pc, #16]	; 124e4 <_start@@Base+0xc0>
   124d0:	cmp	r3, #0
   124d4:	bxeq	lr
   124d8:	bx	r3
   124dc:	andeq	r9, r2, r4, asr r0
   124e0:	andeq	r9, r2, r4, asr r0
   124e4:	andeq	r0, r0, r0
   124e8:	push	{r4, lr}
   124ec:	ldr	r4, [pc, #24]	; 1250c <_start@@Base+0xe8>
   124f0:	ldrb	r3, [r4]
   124f4:	cmp	r3, #0
   124f8:	popne	{r4, pc}
   124fc:	bl	12484 <_start@@Base+0x60>
   12500:	mov	r3, #1
   12504:	strb	r3, [r4]
   12508:	pop	{r4, pc}
   1250c:	andeq	r9, r2, r4, asr r0
   12510:	b	124b0 <_start@@Base+0x8c>

00012514 <create_monster_bottom_up@@Base>:
   12514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12518:	add	fp, sp, #28
   1251c:	sub	sp, sp, #20
   12520:	mov	r9, r1
   12524:	movw	r1, #30012	; 0x753c
   12528:	mov	r4, r0
   1252c:	movt	r1, #1
   12530:	bl	169dc <flatcc_builder_create_string_str@@Base>
   12534:	movw	r1, #30018	; 0x7542
   12538:	mov	r5, r0
   1253c:	mov	r0, r4
   12540:	movt	r1, #1
   12544:	bl	169dc <flatcc_builder_create_string_str@@Base>
   12548:	mov	r6, r0
   1254c:	mov	r0, r4
   12550:	mov	r1, #2
   12554:	bl	14e18 <flatcc_builder_start_table@@Base>
   12558:	mov	r8, #0
   1255c:	cmp	r5, #0
   12560:	mov	r7, #0
   12564:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   12568:	cmp	r0, #0
   1256c:	mov	r7, #0
   12570:	bne	125dc <create_monster_bottom_up@@Base+0xc8>
   12574:	mov	r0, r4
   12578:	mov	r1, #0
   1257c:	mov	r7, #0
   12580:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12584:	cmp	r0, #0
   12588:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   1258c:	str	r5, [r0]
   12590:	mov	r0, r4
   12594:	mov	r1, #1
   12598:	mov	r2, #2
   1259c:	mov	r3, #2
   125a0:	bl	16064 <flatcc_builder_table_add@@Base>
   125a4:	cmp	r0, #0
   125a8:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   125ac:	mov	r1, #3
   125b0:	mov	r2, #0
   125b4:	strh	r1, [r0]
   125b8:	movw	r1, #30978	; 0x7902
   125bc:	mov	r0, r4
   125c0:	movt	r1, #1
   125c4:	bl	156f8 <flatcc_builder_check_required@@Base>
   125c8:	cmp	r0, #0
   125cc:	beq	129d0 <create_monster_bottom_up@@Base+0x4bc>
   125d0:	mov	r0, r4
   125d4:	bl	15778 <flatcc_builder_end_table@@Base>
   125d8:	mov	r7, r0
   125dc:	mov	r0, r4
   125e0:	mov	r1, #2
   125e4:	bl	14e18 <flatcc_builder_start_table@@Base>
   125e8:	cmp	r6, #0
   125ec:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   125f0:	cmp	r0, #0
   125f4:	bne	12660 <create_monster_bottom_up@@Base+0x14c>
   125f8:	mov	r0, r4
   125fc:	mov	r1, #0
   12600:	mov	r8, #0
   12604:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12608:	cmp	r0, #0
   1260c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12610:	str	r6, [r0]
   12614:	mov	r0, r4
   12618:	mov	r1, #1
   1261c:	mov	r2, #2
   12620:	mov	r3, #2
   12624:	bl	16064 <flatcc_builder_table_add@@Base>
   12628:	cmp	r0, #0
   1262c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12630:	mov	r1, #5
   12634:	mov	r2, #0
   12638:	strh	r1, [r0]
   1263c:	movw	r1, #30978	; 0x7902
   12640:	mov	r0, r4
   12644:	movt	r1, #1
   12648:	bl	156f8 <flatcc_builder_check_required@@Base>
   1264c:	cmp	r0, #0
   12650:	beq	129d0 <create_monster_bottom_up@@Base+0x4bc>
   12654:	mov	r0, r4
   12658:	bl	15778 <flatcc_builder_end_table@@Base>
   1265c:	mov	r8, r0
   12660:	movw	r1, #30022	; 0x7546
   12664:	mov	r0, r4
   12668:	movt	r1, #1
   1266c:	bl	169dc <flatcc_builder_create_string_str@@Base>
   12670:	mov	r6, r0
   12674:	movw	r0, #30968	; 0x78f8
   12678:	mov	r1, #1
   1267c:	mov	r2, #10
   12680:	mov	r3, #1
   12684:	movt	r0, #1
   12688:	str	r1, [sp]
   1268c:	add	r1, sp, #8
   12690:	vldr	d16, [r0]
   12694:	movw	r0, #2312	; 0x908
   12698:	strh	r0, [sp, #16]
   1269c:	mvn	r0, #0
   126a0:	str	r0, [sp, #4]
   126a4:	mov	r0, r4
   126a8:	vstr	d16, [sp, #8]
   126ac:	bl	15930 <flatcc_builder_create_vector@@Base>
   126b0:	mov	sl, r0
   126b4:	mov	r0, r4
   126b8:	bl	14ad8 <flatcc_builder_start_offset_vector@@Base>
   126bc:	cmp	r7, #0
   126c0:	beq	126d0 <create_monster_bottom_up@@Base+0x1bc>
   126c4:	mov	r0, r4
   126c8:	mov	r1, r7
   126cc:	bl	14534 <flatcc_builder_offset_vector_push@@Base>
   126d0:	cmp	r8, #0
   126d4:	beq	126e4 <create_monster_bottom_up@@Base+0x1d0>
   126d8:	mov	r0, r4
   126dc:	mov	r1, r8
   126e0:	bl	14534 <flatcc_builder_offset_vector_push@@Base>
   126e4:	mov	r0, r4
   126e8:	bl	14ba4 <flatcc_builder_end_offset_vector@@Base>
   126ec:	mov	r5, r0
   126f0:	mov	r0, r4
   126f4:	mov	r1, #0
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	bl	13dbc <flatcc_builder_start_buffer@@Base>
   12704:	cmp	r9, #0
   12708:	beq	12868 <create_monster_bottom_up@@Base+0x354>
   1270c:	cmp	r0, #0
   12710:	bne	12720 <create_monster_bottom_up@@Base+0x20c>
   12714:	mov	r0, r4
   12718:	mov	r1, #10
   1271c:	bl	14e18 <flatcc_builder_start_table@@Base>
   12720:	mov	r0, r4
   12724:	mov	r1, #0
   12728:	mov	r2, #12
   1272c:	mov	r3, #4
   12730:	bl	16064 <flatcc_builder_table_add@@Base>
   12734:	cmp	r0, #0
   12738:	beq	12758 <create_monster_bottom_up@@Base+0x244>
   1273c:	movw	r1, #0
   12740:	mov	r3, #1065353216	; 0x3f800000
   12744:	mov	r2, #1073741824	; 0x40000000
   12748:	movt	r1, #16448	; 0x4040
   1274c:	str	r3, [r0]
   12750:	str	r2, [r0, #4]
   12754:	str	r1, [r0, #8]
   12758:	mov	r0, r4
   1275c:	mov	r1, #2
   12760:	mov	r2, #2
   12764:	mov	r3, #2
   12768:	bl	16064 <flatcc_builder_table_add@@Base>
   1276c:	cmp	r0, #0
   12770:	movne	r1, #300	; 0x12c
   12774:	strhne	r1, [r0]
   12778:	cmp	r6, #0
   1277c:	beq	12794 <create_monster_bottom_up@@Base+0x280>
   12780:	mov	r0, r4
   12784:	mov	r1, #3
   12788:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   1278c:	cmp	r0, #0
   12790:	strne	r6, [r0]
   12794:	cmp	sl, #0
   12798:	beq	127b0 <create_monster_bottom_up@@Base+0x29c>
   1279c:	mov	r0, r4
   127a0:	mov	r1, #5
   127a4:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   127a8:	cmp	r0, #0
   127ac:	strne	sl, [r0]
   127b0:	mov	r0, r4
   127b4:	mov	r1, #6
   127b8:	mov	r2, #1
   127bc:	mov	r3, #1
   127c0:	bl	16064 <flatcc_builder_table_add@@Base>
   127c4:	cmp	r0, #0
   127c8:	movne	r1, #0
   127cc:	strbne	r1, [r0]
   127d0:	cmp	r5, #0
   127d4:	beq	127ec <create_monster_bottom_up@@Base+0x2d8>
   127d8:	mov	r0, r4
   127dc:	mov	r1, #7
   127e0:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   127e4:	cmp	r0, #0
   127e8:	strne	r5, [r0]
   127ec:	cmp	r8, #0
   127f0:	beq	12830 <create_monster_bottom_up@@Base+0x31c>
   127f4:	mov	r0, r4
   127f8:	mov	r1, #8
   127fc:	mov	r2, #1
   12800:	mov	r3, #1
   12804:	bl	16064 <flatcc_builder_table_add@@Base>
   12808:	cmp	r0, #0
   1280c:	beq	12830 <create_monster_bottom_up@@Base+0x31c>
   12810:	mov	r5, r0
   12814:	mov	r0, r4
   12818:	mov	r1, #9
   1281c:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12820:	cmp	r0, #0
   12824:	movne	r1, #1
   12828:	strbne	r1, [r5]
   1282c:	strne	r8, [r0]
   12830:	movw	r1, #30980	; 0x7904
   12834:	mov	r0, r4
   12838:	mov	r2, #0
   1283c:	movt	r1, #1
   12840:	bl	156f8 <flatcc_builder_check_required@@Base>
   12844:	cmp	r0, #0
   12848:	beq	129b0 <create_monster_bottom_up@@Base+0x49c>
   1284c:	mov	r0, r4
   12850:	bl	15778 <flatcc_builder_end_table@@Base>
   12854:	mov	r9, r0
   12858:	mov	r0, r4
   1285c:	mov	r1, r9
   12860:	bl	13fac <flatcc_builder_end_buffer@@Base>
   12864:	b	12870 <create_monster_bottom_up@@Base+0x35c>
   12868:	cmp	r0, #0
   1286c:	beq	1287c <create_monster_bottom_up@@Base+0x368>
   12870:	mov	r0, #0
   12874:	sub	sp, fp, #28
   12878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1287c:	mov	r0, r4
   12880:	mov	r1, #10
   12884:	bl	14e18 <flatcc_builder_start_table@@Base>
   12888:	mov	r9, #0
   1288c:	cmp	r0, #0
   12890:	bne	12858 <create_monster_bottom_up@@Base+0x344>
   12894:	mov	r0, r4
   12898:	mov	r1, #0
   1289c:	mov	r2, #12
   128a0:	mov	r3, #4
   128a4:	mov	r9, #0
   128a8:	bl	16064 <flatcc_builder_table_add@@Base>
   128ac:	cmp	r0, #0
   128b0:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128b4:	movw	r1, #0
   128b8:	mov	r3, #1065353216	; 0x3f800000
   128bc:	cmp	r6, #0
   128c0:	mov	r2, #1073741824	; 0x40000000
   128c4:	movt	r1, #16448	; 0x4040
   128c8:	str	r3, [r0]
   128cc:	str	r2, [r0, #4]
   128d0:	str	r1, [r0, #8]
   128d4:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128d8:	mov	r0, r4
   128dc:	mov	r1, #3
   128e0:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   128e4:	cmp	r0, #0
   128e8:	strne	r6, [r0]
   128ec:	cmpne	sl, #0
   128f0:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128f4:	mov	r0, r4
   128f8:	mov	r1, #5
   128fc:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12900:	cmp	r0, #0
   12904:	strne	sl, [r0]
   12908:	cmpne	r5, #0
   1290c:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12910:	mov	r0, r4
   12914:	mov	r1, #7
   12918:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   1291c:	cmp	r0, #0
   12920:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12924:	str	r5, [r0]
   12928:	mov	r0, r4
   1292c:	mov	r1, #9
   12930:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12934:	cmp	r0, #0
   12938:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   1293c:	str	r8, [r0]
   12940:	mov	r0, r4
   12944:	mov	r1, #2
   12948:	mov	r2, #2
   1294c:	mov	r3, #2
   12950:	bl	16064 <flatcc_builder_table_add@@Base>
   12954:	cmp	r0, #0
   12958:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   1295c:	mov	r1, #300	; 0x12c
   12960:	mov	r2, #1
   12964:	mov	r3, #1
   12968:	strh	r1, [r0]
   1296c:	mov	r0, r4
   12970:	mov	r1, #6
   12974:	bl	16064 <flatcc_builder_table_add@@Base>
   12978:	cmp	r0, #0
   1297c:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12980:	mov	r9, #0
   12984:	mov	r1, #8
   12988:	mov	r2, #1
   1298c:	mov	r3, #1
   12990:	mov	r5, #1
   12994:	strb	r9, [r0]
   12998:	mov	r0, r4
   1299c:	bl	16064 <flatcc_builder_table_add@@Base>
   129a0:	cmp	r0, #0
   129a4:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   129a8:	strb	r5, [r0]
   129ac:	b	12830 <create_monster_bottom_up@@Base+0x31c>
   129b0:	movw	r0, #30468	; 0x7704
   129b4:	movw	r1, #30299	; 0x765b
   129b8:	movw	r3, #30627	; 0x77a3
   129bc:	mov	r2, #50	; 0x32
   129c0:	movt	r0, #1
   129c4:	movt	r1, #1
   129c8:	movt	r3, #1
   129cc:	bl	12418 <__assert_fail@plt>
   129d0:	movw	r0, #30143	; 0x75bf
   129d4:	movw	r1, #30299	; 0x765b
   129d8:	movw	r3, #30391	; 0x76b7
   129dc:	mov	r2, #52	; 0x34
   129e0:	movt	r0, #1
   129e4:	movt	r1, #1
   129e8:	movt	r3, #1
   129ec:	bl	12418 <__assert_fail@plt>

000129f0 <create_monster_top_down@@Base>:
   129f0:	push	{r4, r5, r6, sl, fp, lr}
   129f4:	add	fp, sp, #16
   129f8:	sub	sp, sp, #24
   129fc:	mov	r4, r0
   12a00:	movw	r0, #30968	; 0x78f8
   12a04:	mov	r1, #0
   12a08:	mov	r2, #0
   12a0c:	mov	r3, #0
   12a10:	movt	r0, #1
   12a14:	vldr	d16, [r0]
   12a18:	movw	r0, #2312	; 0x908
   12a1c:	strh	r0, [sp, #16]
   12a20:	mov	r0, r4
   12a24:	vstr	d16, [sp, #8]
   12a28:	bl	13dbc <flatcc_builder_start_buffer@@Base>
   12a2c:	cmp	r0, #0
   12a30:	bne	12a40 <create_monster_top_down@@Base+0x50>
   12a34:	mov	r0, r4
   12a38:	mov	r1, #10
   12a3c:	bl	14e18 <flatcc_builder_start_table@@Base>
   12a40:	mov	r0, r4
   12a44:	mov	r1, #0
   12a48:	mov	r2, #12
   12a4c:	mov	r3, #4
   12a50:	bl	16064 <flatcc_builder_table_add@@Base>
   12a54:	cmp	r0, #0
   12a58:	beq	12a78 <create_monster_top_down@@Base+0x88>
   12a5c:	movw	r1, #0
   12a60:	mov	r3, #1065353216	; 0x3f800000
   12a64:	mov	r2, #1073741824	; 0x40000000
   12a68:	movt	r1, #16448	; 0x4040
   12a6c:	str	r3, [r0]
   12a70:	str	r2, [r0, #4]
   12a74:	str	r1, [r0, #8]
   12a78:	mov	r0, r4
   12a7c:	mov	r1, #2
   12a80:	mov	r2, #2
   12a84:	mov	r3, #2
   12a88:	bl	16064 <flatcc_builder_table_add@@Base>
   12a8c:	cmp	r0, #0
   12a90:	movne	r1, #300	; 0x12c
   12a94:	strhne	r1, [r0]
   12a98:	movw	r1, #30022	; 0x7546
   12a9c:	mov	r0, r4
   12aa0:	movt	r1, #1
   12aa4:	bl	169dc <flatcc_builder_create_string_str@@Base>
   12aa8:	cmp	r0, #0
   12aac:	beq	12ac8 <create_monster_top_down@@Base+0xd8>
   12ab0:	mov	r5, r0
   12ab4:	mov	r0, r4
   12ab8:	mov	r1, #3
   12abc:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12ac0:	cmp	r0, #0
   12ac4:	strne	r5, [r0]
   12ac8:	mvn	r0, #0
   12acc:	mov	r1, #1
   12ad0:	mov	r2, #10
   12ad4:	mov	r3, #1
   12ad8:	str	r1, [sp]
   12adc:	str	r0, [sp, #4]
   12ae0:	add	r1, sp, #8
   12ae4:	mov	r0, r4
   12ae8:	bl	15930 <flatcc_builder_create_vector@@Base>
   12aec:	cmp	r0, #0
   12af0:	beq	12b0c <create_monster_top_down@@Base+0x11c>
   12af4:	mov	r5, r0
   12af8:	mov	r0, r4
   12afc:	mov	r1, #5
   12b00:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12b04:	cmp	r0, #0
   12b08:	strne	r5, [r0]
   12b0c:	mov	r0, r4
   12b10:	mov	r1, #6
   12b14:	mov	r2, #1
   12b18:	mov	r3, #1
   12b1c:	bl	16064 <flatcc_builder_table_add@@Base>
   12b20:	cmp	r0, #0
   12b24:	movne	r1, #0
   12b28:	strbne	r1, [r0]
   12b2c:	mov	r0, r4
   12b30:	bl	14ad8 <flatcc_builder_start_offset_vector@@Base>
   12b34:	movw	r1, #30012	; 0x753c
   12b38:	mov	r0, r4
   12b3c:	movt	r1, #1
   12b40:	bl	169dc <flatcc_builder_create_string_str@@Base>
   12b44:	mov	r1, r0
   12b48:	mov	r0, r4
   12b4c:	mov	r2, #3
   12b50:	bl	12c40 <create_monster_top_down@@Base+0x250>
   12b54:	movw	r1, #30018	; 0x7542
   12b58:	mov	r0, r4
   12b5c:	movt	r1, #1
   12b60:	bl	169dc <flatcc_builder_create_string_str@@Base>
   12b64:	mov	r1, r0
   12b68:	mov	r0, r4
   12b6c:	mov	r2, #5
   12b70:	bl	12c40 <create_monster_top_down@@Base+0x250>
   12b74:	ldr	r6, [r0]
   12b78:	mov	r0, r4
   12b7c:	bl	14ba4 <flatcc_builder_end_offset_vector@@Base>
   12b80:	cmp	r0, #0
   12b84:	beq	12ba0 <create_monster_top_down@@Base+0x1b0>
   12b88:	mov	r5, r0
   12b8c:	mov	r0, r4
   12b90:	mov	r1, #7
   12b94:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12b98:	cmp	r0, #0
   12b9c:	strne	r5, [r0]
   12ba0:	cmp	r6, #0
   12ba4:	beq	12be4 <create_monster_top_down@@Base+0x1f4>
   12ba8:	mov	r0, r4
   12bac:	mov	r1, #8
   12bb0:	mov	r2, #1
   12bb4:	mov	r3, #1
   12bb8:	bl	16064 <flatcc_builder_table_add@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	beq	12be4 <create_monster_top_down@@Base+0x1f4>
   12bc4:	mov	r5, r0
   12bc8:	mov	r0, r4
   12bcc:	mov	r1, #9
   12bd0:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12bd4:	cmp	r0, #0
   12bd8:	movne	r1, #1
   12bdc:	strbne	r1, [r5]
   12be0:	strne	r6, [r0]
   12be4:	movw	r1, #30980	; 0x7904
   12be8:	mov	r0, r4
   12bec:	mov	r2, #0
   12bf0:	movt	r1, #1
   12bf4:	bl	156f8 <flatcc_builder_check_required@@Base>
   12bf8:	cmp	r0, #0
   12bfc:	beq	12c20 <create_monster_top_down@@Base+0x230>
   12c00:	mov	r0, r4
   12c04:	bl	15778 <flatcc_builder_end_table@@Base>
   12c08:	mov	r1, r0
   12c0c:	mov	r0, r4
   12c10:	bl	13fac <flatcc_builder_end_buffer@@Base>
   12c14:	mov	r0, #0
   12c18:	sub	sp, fp, #16
   12c1c:	pop	{r4, r5, r6, sl, fp, pc}
   12c20:	movw	r0, #30468	; 0x7704
   12c24:	movw	r1, #30299	; 0x765b
   12c28:	movw	r3, #30627	; 0x77a3
   12c2c:	mov	r2, #50	; 0x32
   12c30:	movt	r0, #1
   12c34:	movt	r1, #1
   12c38:	movt	r3, #1
   12c3c:	bl	12418 <__assert_fail@plt>
   12c40:	push	{r4, r5, r6, sl, fp, lr}
   12c44:	add	fp, sp, #16
   12c48:	mov	r6, r1
   12c4c:	mov	r1, #2
   12c50:	mov	r5, r2
   12c54:	mov	r4, r0
   12c58:	bl	14e18 <flatcc_builder_start_table@@Base>
   12c5c:	cmp	r6, #0
   12c60:	beq	12ce8 <create_monster_top_down@@Base+0x2f8>
   12c64:	cmp	r0, #0
   12c68:	bne	12ce8 <create_monster_top_down@@Base+0x2f8>
   12c6c:	mov	r0, r4
   12c70:	mov	r1, #0
   12c74:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   12c78:	cmp	r0, #0
   12c7c:	beq	12ce8 <create_monster_top_down@@Base+0x2f8>
   12c80:	cmp	r5, #0
   12c84:	str	r6, [r0]
   12c88:	beq	12cac <create_monster_top_down@@Base+0x2bc>
   12c8c:	mov	r0, r4
   12c90:	mov	r1, #1
   12c94:	mov	r2, #2
   12c98:	mov	r3, #2
   12c9c:	bl	16064 <flatcc_builder_table_add@@Base>
   12ca0:	cmp	r0, #0
   12ca4:	beq	12ce8 <create_monster_top_down@@Base+0x2f8>
   12ca8:	strh	r5, [r0]
   12cac:	movw	r1, #30978	; 0x7902
   12cb0:	mov	r0, r4
   12cb4:	mov	r2, #0
   12cb8:	movt	r1, #1
   12cbc:	bl	156f8 <flatcc_builder_check_required@@Base>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12cf0 <create_monster_top_down@@Base+0x300>
   12cc8:	mov	r0, r4
   12ccc:	bl	15778 <flatcc_builder_end_table@@Base>
   12cd0:	cmp	r0, #0
   12cd4:	beq	12ce8 <create_monster_top_down@@Base+0x2f8>
   12cd8:	mov	r1, r0
   12cdc:	mov	r0, r4
   12ce0:	pop	{r4, r5, r6, sl, fp, lr}
   12ce4:	b	14534 <flatcc_builder_offset_vector_push@@Base>
   12ce8:	mov	r0, #0
   12cec:	pop	{r4, r5, r6, sl, fp, pc}
   12cf0:	movw	r0, #30143	; 0x75bf
   12cf4:	movw	r1, #30299	; 0x765b
   12cf8:	movw	r3, #30391	; 0x76b7
   12cfc:	mov	r2, #52	; 0x34
   12d00:	movt	r0, #1
   12d04:	movt	r1, #1
   12d08:	movt	r3, #1
   12d0c:	bl	12418 <__assert_fail@plt>

00012d10 <access_monster_buffer@@Base>:
   12d10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d14:	add	fp, sp, #24
   12d18:	cmp	r0, #0
   12d1c:	beq	13044 <access_monster_buffer@@Base+0x334>
   12d20:	mov	r4, r0
   12d24:	ldr	r0, [r0]
   12d28:	ldr	r0, [r4, r0]!
   12d2c:	mov	r5, r4
   12d30:	ldrh	r8, [r5, -r0]!
   12d34:	cmp	r8, #9
   12d38:	bls	12d54 <access_monster_buffer@@Base+0x44>
   12d3c:	ldrh	r0, [r5, #8]
   12d40:	cmp	r0, #0
   12d44:	beq	12d64 <access_monster_buffer@@Base+0x54>
   12d48:	add	r0, r4, r0
   12d4c:	ldrh	r1, [r0]
   12d50:	b	12d68 <access_monster_buffer@@Base+0x58>
   12d54:	mov	r1, #100	; 0x64
   12d58:	cmp	r8, #8
   12d5c:	bcs	12d68 <access_monster_buffer@@Base+0x58>
   12d60:	b	13030 <access_monster_buffer@@Base+0x320>
   12d64:	mov	r1, #100	; 0x64
   12d68:	ldrh	r7, [r5, #6]
   12d6c:	cmp	r7, #0
   12d70:	beq	12d80 <access_monster_buffer@@Base+0x70>
   12d74:	add	r0, r4, r7
   12d78:	ldrh	r2, [r0]
   12d7c:	b	12d84 <access_monster_buffer@@Base+0x74>
   12d80:	mov	r2, #150	; 0x96
   12d84:	mov	r0, #0
   12d88:	cmp	r8, #12
   12d8c:	mov	r6, #0
   12d90:	bcc	12dbc <access_monster_buffer@@Base+0xac>
   12d94:	ldrh	r0, [r5, #10]
   12d98:	cmp	r0, #0
   12d9c:	beq	12db4 <access_monster_buffer@@Base+0xa4>
   12da0:	mov	r3, r4
   12da4:	ldr	r0, [r3, r0]!
   12da8:	ldr	r6, [r3, r0]!
   12dac:	add	r0, r3, #4
   12db0:	b	12dbc <access_monster_buffer@@Base+0xac>
   12db4:	mov	r0, #0
   12db8:	mov	r6, #0
   12dbc:	cmp	r1, #300	; 0x12c
   12dc0:	bne	13030 <access_monster_buffer@@Base+0x320>
   12dc4:	cmp	r2, #150	; 0x96
   12dc8:	bne	13058 <access_monster_buffer@@Base+0x348>
   12dcc:	movw	r1, #30022	; 0x7546
   12dd0:	movt	r1, #1
   12dd4:	bl	12370 <strcmp@plt>
   12dd8:	cmp	r0, #0
   12ddc:	bne	1306c <access_monster_buffer@@Base+0x35c>
   12de0:	cmp	r6, #3
   12de4:	bne	13080 <access_monster_buffer@@Base+0x370>
   12de8:	cmp	r8, #10
   12dec:	bcc	13008 <access_monster_buffer@@Base+0x2f8>
   12df0:	ldrh	r0, [r5, #8]
   12df4:	cmp	r0, #0
   12df8:	beq	13008 <access_monster_buffer@@Base+0x2f8>
   12dfc:	cmp	r7, #0
   12e00:	bne	13094 <access_monster_buffer@@Base+0x384>
   12e04:	ldrh	r0, [r5, #4]
   12e08:	cmp	r0, #0
   12e0c:	beq	130a8 <access_monster_buffer@@Base+0x398>
   12e10:	add	r0, r4, r0
   12e14:	vmov.f32	s2, #112	; 0x3f800000  1.0
   12e18:	vldr	s0, [r0]
   12e1c:	vcmp.f32	s0, s2
   12e20:	vmrs	APSR_nzcv, fpscr
   12e24:	bne	130bc <access_monster_buffer@@Base+0x3ac>
   12e28:	vldr	s0, [r0, #4]
   12e2c:	vmov.f32	s2, #0	; 0x40000000  2.0
   12e30:	vcmp.f32	s0, s2
   12e34:	vmrs	APSR_nzcv, fpscr
   12e38:	bne	130d0 <access_monster_buffer@@Base+0x3c0>
   12e3c:	vldr	s0, [r0, #8]
   12e40:	vmov.f32	s2, #8	; 0x40400000  3.0
   12e44:	vcmp.f32	s0, s2
   12e48:	vmrs	APSR_nzcv, fpscr
   12e4c:	bne	130e4 <access_monster_buffer@@Base+0x3d4>
   12e50:	cmp	r8, #16
   12e54:	bcc	1301c <access_monster_buffer@@Base+0x30c>
   12e58:	ldrh	r1, [r5, #14]
   12e5c:	cmp	r1, #0
   12e60:	beq	1301c <access_monster_buffer@@Base+0x30c>
   12e64:	mov	r0, r4
   12e68:	ldr	r1, [r0, r1]!
   12e6c:	ldr	r1, [r0, r1]!
   12e70:	cmp	r1, #10
   12e74:	bne	130f8 <access_monster_buffer@@Base+0x3e8>
   12e78:	add	r0, r0, #4
   12e7c:	ldrb	r0, [r0, #2]
   12e80:	cmp	r0, #2
   12e84:	bne	1310c <access_monster_buffer@@Base+0x3fc>
   12e88:	cmp	r8, #20
   12e8c:	bcc	12fe0 <access_monster_buffer@@Base+0x2d0>
   12e90:	ldrh	r1, [r5, #18]
   12e94:	cmp	r1, #0
   12e98:	beq	12fe0 <access_monster_buffer@@Base+0x2d0>
   12e9c:	mov	r0, r4
   12ea0:	ldr	r1, [r0, r1]!
   12ea4:	ldr	r1, [r0, r1]!
   12ea8:	cmp	r1, #2
   12eac:	bne	12fe0 <access_monster_buffer@@Base+0x2d0>
   12eb0:	add	r1, r0, #4
   12eb4:	ldr	r0, [r1, #4]!
   12eb8:	ldr	r0, [r1, r0]!
   12ebc:	mov	r2, r1
   12ec0:	ldrh	r3, [r2, -r0]!
   12ec4:	cmp	r3, #6
   12ec8:	bcc	12ff4 <access_monster_buffer@@Base+0x2e4>
   12ecc:	ldrh	r6, [r2, #4]
   12ed0:	mov	r7, #0
   12ed4:	mov	r0, #0
   12ed8:	cmp	r6, #0
   12edc:	beq	12ef0 <access_monster_buffer@@Base+0x1e0>
   12ee0:	mov	r0, r1
   12ee4:	ldr	r6, [r0, r6]!
   12ee8:	add	r0, r0, r6
   12eec:	add	r0, r0, #4
   12ef0:	cmp	r3, #8
   12ef4:	bcc	12f08 <access_monster_buffer@@Base+0x1f8>
   12ef8:	ldrh	r2, [r2, #6]
   12efc:	cmp	r2, #0
   12f00:	addne	r1, r1, r2
   12f04:	ldrhne	r7, [r1]
   12f08:	cmp	r0, #0
   12f0c:	beq	12ff4 <access_monster_buffer@@Base+0x2e4>
   12f10:	movw	r1, #30018	; 0x7542
   12f14:	movt	r1, #1
   12f18:	bl	12370 <strcmp@plt>
   12f1c:	cmp	r0, #0
   12f20:	bne	12ff4 <access_monster_buffer@@Base+0x2e4>
   12f24:	cmp	r7, #5
   12f28:	bne	13120 <access_monster_buffer@@Base+0x410>
   12f2c:	cmp	r8, #22
   12f30:	bcc	12fd8 <access_monster_buffer@@Base+0x2c8>
   12f34:	ldrh	r0, [r5, #20]
   12f38:	cmp	r0, #0
   12f3c:	beq	12fd8 <access_monster_buffer@@Base+0x2c8>
   12f40:	ldrb	r0, [r4, r0]
   12f44:	cmp	r0, #1
   12f48:	bne	12fd8 <access_monster_buffer@@Base+0x2c8>
   12f4c:	cmp	r8, #24
   12f50:	bcc	13140 <access_monster_buffer@@Base+0x430>
   12f54:	ldrh	r0, [r5, #22]
   12f58:	cmp	r0, #0
   12f5c:	beq	13140 <access_monster_buffer@@Base+0x430>
   12f60:	ldr	r0, [r4, r0]!
   12f64:	mov	r5, #0
   12f68:	ldr	r0, [r4, r0]!
   12f6c:	mov	r1, r4
   12f70:	ldrh	r2, [r1, -r0]!
   12f74:	mov	r0, #0
   12f78:	cmp	r2, #5
   12f7c:	bls	12fbc <access_monster_buffer@@Base+0x2ac>
   12f80:	ldrh	r3, [r1, #4]
   12f84:	mov	r5, #0
   12f88:	mov	r0, #0
   12f8c:	cmp	r3, #0
   12f90:	beq	12fa4 <access_monster_buffer@@Base+0x294>
   12f94:	mov	r0, r4
   12f98:	ldr	r3, [r0, r3]!
   12f9c:	add	r0, r0, r3
   12fa0:	add	r0, r0, #4
   12fa4:	cmp	r2, #8
   12fa8:	bcc	12fbc <access_monster_buffer@@Base+0x2ac>
   12fac:	ldrh	r1, [r1, #6]
   12fb0:	cmp	r1, #0
   12fb4:	addne	r1, r4, r1
   12fb8:	ldrhne	r5, [r1]
   12fbc:	movw	r1, #30018	; 0x7542
   12fc0:	movt	r1, #1
   12fc4:	bl	12370 <strcmp@plt>
   12fc8:	cmp	r0, #0
   12fcc:	bne	13160 <access_monster_buffer@@Base+0x450>
   12fd0:	cmp	r5, #5
   12fd4:	bne	13174 <access_monster_buffer@@Base+0x464>
   12fd8:	mov	r0, #0
   12fdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fe0:	movw	r0, #36030	; 0x8cbe
   12fe4:	movw	r1, #30026	; 0x754a
   12fe8:	movw	r3, #30100	; 0x7594
   12fec:	movw	r2, #271	; 0x10f
   12ff0:	b	13130 <access_monster_buffer@@Base+0x420>
   12ff4:	movw	r0, #36030	; 0x8cbe
   12ff8:	movw	r1, #30026	; 0x754a
   12ffc:	movw	r3, #30100	; 0x7594
   13000:	movw	r2, #275	; 0x113
   13004:	b	13130 <access_monster_buffer@@Base+0x420>
   13008:	movw	r0, #36030	; 0x8cbe
   1300c:	movw	r1, #30026	; 0x754a
   13010:	movw	r3, #30100	; 0x7594
   13014:	mov	r2, #227	; 0xe3
   13018:	b	13130 <access_monster_buffer@@Base+0x420>
   1301c:	movw	r0, #36030	; 0x8cbe
   13020:	movw	r1, #30026	; 0x754a
   13024:	movw	r3, #30100	; 0x7594
   13028:	movw	r2, #261	; 0x105
   1302c:	b	13130 <access_monster_buffer@@Base+0x420>
   13030:	movw	r0, #36030	; 0x8cbe
   13034:	movw	r1, #30026	; 0x754a
   13038:	movw	r3, #30100	; 0x7594
   1303c:	mov	r2, #219	; 0xdb
   13040:	b	13130 <access_monster_buffer@@Base+0x420>
   13044:	movw	r0, #36030	; 0x8cbe
   13048:	movw	r1, #30026	; 0x754a
   1304c:	movw	r3, #30100	; 0x7594
   13050:	mov	r2, #211	; 0xd3
   13054:	b	13130 <access_monster_buffer@@Base+0x420>
   13058:	movw	r0, #36030	; 0x8cbe
   1305c:	movw	r1, #30026	; 0x754a
   13060:	movw	r3, #30100	; 0x7594
   13064:	mov	r2, #221	; 0xdd
   13068:	b	13130 <access_monster_buffer@@Base+0x420>
   1306c:	movw	r0, #36030	; 0x8cbe
   13070:	movw	r1, #30026	; 0x754a
   13074:	movw	r3, #30100	; 0x7594
   13078:	mov	r2, #222	; 0xde
   1307c:	b	13130 <access_monster_buffer@@Base+0x420>
   13080:	movw	r0, #36030	; 0x8cbe
   13084:	movw	r1, #30026	; 0x754a
   13088:	movw	r3, #30100	; 0x7594
   1308c:	mov	r2, #223	; 0xdf
   13090:	b	13130 <access_monster_buffer@@Base+0x420>
   13094:	movw	r0, #36030	; 0x8cbe
   13098:	movw	r1, #30026	; 0x754a
   1309c:	movw	r3, #30100	; 0x7594
   130a0:	mov	r2, #228	; 0xe4
   130a4:	b	13130 <access_monster_buffer@@Base+0x420>
   130a8:	movw	r0, #36030	; 0x8cbe
   130ac:	movw	r1, #30026	; 0x754a
   130b0:	movw	r3, #30100	; 0x7594
   130b4:	mov	r2, #232	; 0xe8
   130b8:	b	13130 <access_monster_buffer@@Base+0x420>
   130bc:	movw	r0, #36030	; 0x8cbe
   130c0:	movw	r1, #30026	; 0x754a
   130c4:	movw	r3, #30100	; 0x7594
   130c8:	mov	r2, #240	; 0xf0
   130cc:	b	13130 <access_monster_buffer@@Base+0x420>
   130d0:	movw	r0, #36030	; 0x8cbe
   130d4:	movw	r1, #30026	; 0x754a
   130d8:	movw	r3, #30100	; 0x7594
   130dc:	mov	r2, #241	; 0xf1
   130e0:	b	13130 <access_monster_buffer@@Base+0x420>
   130e4:	movw	r0, #36030	; 0x8cbe
   130e8:	movw	r1, #30026	; 0x754a
   130ec:	movw	r3, #30100	; 0x7594
   130f0:	mov	r2, #242	; 0xf2
   130f4:	b	13130 <access_monster_buffer@@Base+0x420>
   130f8:	movw	r0, #36030	; 0x8cbe
   130fc:	movw	r1, #30026	; 0x754a
   13100:	movw	r3, #30100	; 0x7594
   13104:	movw	r2, #263	; 0x107
   13108:	b	13130 <access_monster_buffer@@Base+0x420>
   1310c:	movw	r0, #36030	; 0x8cbe
   13110:	movw	r1, #30026	; 0x754a
   13114:	movw	r3, #30100	; 0x7594
   13118:	movw	r2, #267	; 0x10b
   1311c:	b	13130 <access_monster_buffer@@Base+0x420>
   13120:	movw	r0, #36030	; 0x8cbe
   13124:	movw	r1, #30026	; 0x754a
   13128:	movw	r3, #30100	; 0x7594
   1312c:	mov	r2, #276	; 0x114
   13130:	movt	r0, #1
   13134:	movt	r1, #1
   13138:	movt	r3, #1
   1313c:	bl	12418 <__assert_fail@plt>
   13140:	movw	r0, #30706	; 0x77f2
   13144:	movw	r1, #30744	; 0x7818
   13148:	movw	r3, #30835	; 0x7873
   1314c:	mov	r2, #148	; 0x94
   13150:	movt	r0, #1
   13154:	movt	r1, #1
   13158:	movt	r3, #1
   1315c:	bl	12418 <__assert_fail@plt>
   13160:	movw	r0, #36030	; 0x8cbe
   13164:	movw	r1, #30026	; 0x754a
   13168:	movw	r3, #30100	; 0x7594
   1316c:	movw	r2, #286	; 0x11e
   13170:	b	13130 <access_monster_buffer@@Base+0x420>
   13174:	movw	r0, #36030	; 0x8cbe
   13178:	movw	r1, #30026	; 0x754a
   1317c:	movw	r3, #30100	; 0x7594
   13180:	movw	r2, #287	; 0x11f
   13184:	b	13130 <access_monster_buffer@@Base+0x420>

00013188 <main@@Base>:
   13188:	push	{r4, r5, r6, sl, fp, lr}
   1318c:	add	fp, sp, #16
   13190:	sub	sp, sp, #240	; 0xf0
   13194:	add	r4, sp, #8
   13198:	mov	r0, r4
   1319c:	bl	133f0 <flatcc_builder_init@@Base>
   131a0:	mov	r0, r4
   131a4:	mov	r1, #0
   131a8:	bl	12514 <create_monster_bottom_up@@Base>
   131ac:	add	r5, sp, #4
   131b0:	mov	r0, r4
   131b4:	mov	r1, r5
   131b8:	bl	16de0 <flatcc_builder_finalize_aligned_buffer@@Base>
   131bc:	bl	16ee0 <flatcc_builder_aligned_free@@Base>
   131c0:	mov	r0, r4
   131c4:	bl	13584 <flatcc_builder_reset@@Base>
   131c8:	mov	r0, r4
   131cc:	mov	r1, #1
   131d0:	bl	12514 <create_monster_bottom_up@@Base>
   131d4:	mov	r0, r4
   131d8:	mov	r1, r5
   131dc:	bl	16de0 <flatcc_builder_finalize_aligned_buffer@@Base>
   131e0:	mov	r6, r0
   131e4:	bl	12d10 <access_monster_buffer@@Base>
   131e8:	mov	r0, r6
   131ec:	bl	16ee0 <flatcc_builder_aligned_free@@Base>
   131f0:	mov	r0, r4
   131f4:	bl	13584 <flatcc_builder_reset@@Base>
   131f8:	mov	r0, r4
   131fc:	bl	129f0 <create_monster_top_down@@Base>
   13200:	mov	r0, r4
   13204:	mov	r1, r5
   13208:	bl	16d50 <flatcc_builder_finalize_buffer@@Base>
   1320c:	mov	r5, r0
   13210:	bl	12d10 <access_monster_buffer@@Base>
   13214:	mov	r0, r5
   13218:	bl	1237c <free@plt>
   1321c:	mov	r0, r4
   13220:	bl	13590 <flatcc_builder_clear@@Base>
   13224:	movw	r0, #30912	; 0x78c0
   13228:	movt	r0, #1
   1322c:	bl	123a0 <puts@plt>
   13230:	mov	r0, #0
   13234:	sub	sp, fp, #16
   13238:	pop	{r4, r5, r6, sl, fp, pc}

0001323c <flatcc_builder_default_alloc@@Base>:
   1323c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13240:	add	fp, sp, #24
   13244:	mov	r4, r1
   13248:	cmp	r2, #0
   1324c:	beq	13294 <flatcc_builder_default_alloc@@Base+0x58>
   13250:	ldr	r0, [fp, #8]
   13254:	mov	r8, r3
   13258:	sub	r1, r0, #1
   1325c:	cmp	r1, #6
   13260:	bhi	132bc <flatcc_builder_default_alloc@@Base+0x80>
   13264:	add	r3, pc, #4
   13268:	mov	r0, #256	; 0x100
   1326c:	ldr	pc, [r3, r1, lsl #2]
   13270:	ldrdeq	r3, [r1], -r0
   13274:			; <UNDEFINED> instruction: 0x000132bc
   13278:			; <UNDEFINED> instruction: 0x000132bc
   1327c:	andeq	r3, r1, ip, lsl #5
   13280:	andeq	r3, r1, r4, asr #5
   13284:			; <UNDEFINED> instruction: 0x000132bc
   13288:	andeq	r3, r1, ip, asr #5
   1328c:	mov	r0, #288	; 0x120
   13290:	b	132d0 <flatcc_builder_default_alloc@@Base+0x94>
   13294:	ldr	r0, [r4]
   13298:	cmp	r0, #0
   1329c:	beq	132b4 <flatcc_builder_default_alloc@@Base+0x78>
   132a0:	bl	1237c <free@plt>
   132a4:	mov	r6, #0
   132a8:	str	r6, [r4]
   132ac:	str	r6, [r4, #4]
   132b0:	b	13340 <flatcc_builder_default_alloc@@Base+0x104>
   132b4:	mov	r6, #0
   132b8:	b	13340 <flatcc_builder_default_alloc@@Base+0x104>
   132bc:	mov	r0, #32
   132c0:	b	132d0 <flatcc_builder_default_alloc@@Base+0x94>
   132c4:	mov	r0, r2
   132c8:	b	132d0 <flatcc_builder_default_alloc@@Base+0x94>
   132cc:	mov	r0, #64	; 0x40
   132d0:	mov	r7, r0
   132d4:	lsl	r0, r0, #1
   132d8:	cmp	r7, r2
   132dc:	bcc	132d0 <flatcc_builder_default_alloc@@Base+0x94>
   132e0:	ldr	r0, [r4, #4]
   132e4:	mov	r6, #0
   132e8:	cmp	r0, r2
   132ec:	lsrcs	r0, r0, #1
   132f0:	cmpcs	r0, r7
   132f4:	bcs	13340 <flatcc_builder_default_alloc@@Base+0x104>
   132f8:	ldr	r0, [r4]
   132fc:	mov	r1, r7
   13300:	bl	12394 <realloc@plt>
   13304:	cmp	r0, #0
   13308:	beq	1333c <flatcc_builder_default_alloc@@Base+0x100>
   1330c:	mov	r5, r0
   13310:	cmp	r8, #0
   13314:	beq	13334 <flatcc_builder_default_alloc@@Base+0xf8>
   13318:	ldr	r1, [r4, #4]
   1331c:	cmp	r7, r1
   13320:	bls	13334 <flatcc_builder_default_alloc@@Base+0xf8>
   13324:	add	r0, r5, r1
   13328:	sub	r2, r7, r1
   1332c:	mov	r1, #0
   13330:	bl	123f4 <memset@plt>
   13334:	stm	r4, {r5, r7}
   13338:	b	13340 <flatcc_builder_default_alloc@@Base+0x104>
   1333c:	mvn	r6, #0
   13340:	mov	r0, r6
   13344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013348 <flatcc_builder_flush_vtable_cache@@Base>:
   13348:	push	{r4, r5, fp, lr}
   1334c:	add	fp, sp, #8
   13350:	mov	r4, r0
   13354:	ldr	r0, [r0, #116]	; 0x74
   13358:	cmp	r0, #0
   1335c:	popeq	{r4, r5, fp, pc}
   13360:	ldr	r0, [r4, #92]	; 0x5c
   13364:	ldr	r2, [r4, #96]	; 0x60
   13368:	mov	r1, #0
   1336c:	mov	r5, #0
   13370:	bl	123f4 <memset@plt>
   13374:	mov	r0, #16
   13378:	str	r5, [r4, #120]	; 0x78
   1337c:	str	r0, [r4, #124]	; 0x7c
   13380:	pop	{r4, r5, fp, pc}

00013384 <flatcc_builder_custom_init@@Base>:
   13384:	push	{r4, r5, r6, r7, fp, lr}
   13388:	add	fp, sp, #16
   1338c:	mov	r6, r2
   13390:	mov	r7, r1
   13394:	mov	r1, #0
   13398:	mov	r2, #232	; 0xe8
   1339c:	mov	r5, r3
   133a0:	mov	r4, r0
   133a4:	bl	123f4 <memset@plt>
   133a8:	ldr	r0, [fp, #8]
   133ac:	cmp	r7, #0
   133b0:	bne	133c8 <flatcc_builder_custom_init@@Base+0x44>
   133b4:	movw	r7, #28912	; 0x70f0
   133b8:	mov	r1, #1
   133bc:	add	r6, r4, #188	; 0xbc
   133c0:	movt	r7, #1
   133c4:	str	r1, [r4, #184]	; 0xb8
   133c8:	movw	r1, #12860	; 0x323c
   133cc:	cmp	r5, #0
   133d0:	str	r6, [r4, #36]	; 0x24
   133d4:	str	r0, [r4, #40]	; 0x28
   133d8:	mov	r0, #0
   133dc:	str	r7, [r4, #44]	; 0x2c
   133e0:	movt	r1, #1
   133e4:	movne	r1, r5
   133e8:	str	r1, [r4, #48]	; 0x30
   133ec:	pop	{r4, r5, r6, r7, fp, pc}

000133f0 <flatcc_builder_init@@Base>:
   133f0:	push	{r4, r5, fp, lr}
   133f4:	add	fp, sp, #8
   133f8:	mov	r1, #0
   133fc:	mov	r2, #232	; 0xe8
   13400:	mov	r4, r0
   13404:	mov	r5, #0
   13408:	bl	123f4 <memset@plt>
   1340c:	mov	r0, #1
   13410:	movw	r1, #28912	; 0x70f0
   13414:	add	r2, r4, #188	; 0xbc
   13418:	str	r0, [r4, #184]	; 0xb8
   1341c:	movw	r0, #12860	; 0x323c
   13420:	movt	r1, #1
   13424:	str	r2, [r4, #36]	; 0x24
   13428:	str	r5, [r4, #40]	; 0x28
   1342c:	movt	r0, #1
   13430:	str	r1, [r4, #44]	; 0x2c
   13434:	str	r0, [r4, #48]	; 0x30
   13438:	mov	r0, #0
   1343c:	pop	{r4, r5, fp, pc}

00013440 <flatcc_builder_custom_reset@@Base>:
   13440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13444:	add	fp, sp, #28
   13448:	sub	sp, sp, #4
   1344c:	mov	r9, r2
   13450:	mov	r8, r1
   13454:	mov	sl, r0
   13458:	add	r7, r0, #52	; 0x34
   1345c:	mov	r5, #0
   13460:	add	r6, sl, r5, lsl #3
   13464:	ldr	r0, [r6, #52]	; 0x34
   13468:	cmp	r0, #0
   1346c:	beq	134b4 <flatcc_builder_custom_reset@@Base+0x74>
   13470:	cmp	r9, #0
   13474:	cmpne	r5, #5
   13478:	beq	134a4 <flatcc_builder_custom_reset@@Base+0x64>
   1347c:	ldr	r0, [sl, #40]	; 0x28
   13480:	ldr	r4, [sl, #48]	; 0x30
   13484:	mov	r1, r7
   13488:	mov	r2, #1
   1348c:	mov	r3, #1
   13490:	str	r5, [sp]
   13494:	blx	r4
   13498:	cmp	r0, #0
   1349c:	bne	13554 <flatcc_builder_custom_reset@@Base+0x114>
   134a0:	ldr	r0, [r6, #52]	; 0x34
   134a4:	ldr	r2, [r6, #56]	; 0x38
   134a8:	mov	r1, #0
   134ac:	bl	123f4 <memset@plt>
   134b0:	b	134c0 <flatcc_builder_custom_reset@@Base+0x80>
   134b4:	ldr	r0, [r6, #56]	; 0x38
   134b8:	cmp	r0, #0
   134bc:	bne	13564 <flatcc_builder_custom_reset@@Base+0x124>
   134c0:	add	r5, r5, #1
   134c4:	add	r7, r7, #8
   134c8:	cmp	r5, #8
   134cc:	bne	13460 <flatcc_builder_custom_reset@@Base+0x20>
   134d0:	mov	r0, #0
   134d4:	vmov.i32	q8, #0	; 0x00000000
   134d8:	mov	r5, #0
   134dc:	str	r0, [sl, #120]	; 0x78
   134e0:	ldr	r1, [sl, #124]	; 0x7c
   134e4:	cmp	r1, #0
   134e8:	movne	r1, #16
   134ec:	strne	r1, [sl, #124]	; 0x7c
   134f0:	add	r1, sl, #148	; 0x94
   134f4:	str	r0, [sl, #136]	; 0x88
   134f8:	str	r0, [sl, #140]	; 0x8c
   134fc:	strh	r0, [sl, #128]	; 0x80
   13500:	str	r0, [sl, #32]
   13504:	cmp	r8, #0
   13508:	vst1.32	{d16-d17}, [r1]
   1350c:	ldr	r2, [sl, #60]	; 0x3c
   13510:	ldr	r1, [sl, #52]	; 0x34
   13514:	ldr	r3, [sl, #76]	; 0x4c
   13518:	str	r2, [sl, #16]
   1351c:	str	r0, [sl, #20]
   13520:	str	r0, [sl, #24]
   13524:	movne	r0, #0
   13528:	str	r3, [sl]
   1352c:	str	r1, [sl, #4]
   13530:	strne	r0, [sl, #172]	; 0xac
   13534:	strne	r0, [sl, #176]	; 0xb0
   13538:	strne	r0, [sl, #180]	; 0xb4
   1353c:	ldr	r0, [sl, #184]	; 0xb8
   13540:	cmp	r0, #0
   13544:	beq	13558 <flatcc_builder_custom_reset@@Base+0x118>
   13548:	add	r0, sl, #188	; 0xbc
   1354c:	bl	16fc0 <flatcc_emitter_reset@@Base>
   13550:	b	13558 <flatcc_builder_custom_reset@@Base+0x118>
   13554:	mvn	r5, #0
   13558:	mov	r0, r5
   1355c:	sub	sp, fp, #28
   13560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13564:	movw	r0, #31494	; 0x7b06
   13568:	movw	r1, #31512	; 0x7b18
   1356c:	movw	r3, #31582	; 0x7b5e
   13570:	movw	r2, #434	; 0x1b2
   13574:	movt	r0, #1
   13578:	movt	r1, #1
   1357c:	movt	r3, #1
   13580:	bl	12418 <__assert_fail@plt>

00013584 <flatcc_builder_reset@@Base>:
   13584:	mov	r1, #0
   13588:	mov	r2, #0
   1358c:	b	13440 <flatcc_builder_custom_reset@@Base>

00013590 <flatcc_builder_clear@@Base>:
   13590:	push	{r4, r5, r6, r7, fp, lr}
   13594:	add	fp, sp, #16
   13598:	sub	sp, sp, #8
   1359c:	mov	r7, r0
   135a0:	add	r5, r0, #52	; 0x34
   135a4:	mov	r6, #0
   135a8:	ldr	r0, [r7, #40]	; 0x28
   135ac:	ldr	r4, [r7, #48]	; 0x30
   135b0:	mov	r1, r5
   135b4:	mov	r2, #0
   135b8:	mov	r3, #0
   135bc:	str	r6, [sp]
   135c0:	blx	r4
   135c4:	add	r6, r6, #1
   135c8:	add	r5, r5, #8
   135cc:	cmp	r6, #8
   135d0:	bne	135a8 <flatcc_builder_clear@@Base+0x18>
   135d4:	ldr	r0, [r7, #184]	; 0xb8
   135d8:	cmp	r0, #0
   135dc:	beq	135e8 <flatcc_builder_clear@@Base+0x58>
   135e0:	add	r0, r7, #188	; 0xbc
   135e4:	bl	1708c <flatcc_emitter_clear@@Base>
   135e8:	mov	r0, r7
   135ec:	mov	r1, #0
   135f0:	mov	r2, #232	; 0xe8
   135f4:	sub	sp, fp, #16
   135f8:	pop	{r4, r5, r6, r7, fp, lr}
   135fc:	b	123f4 <memset@plt>

00013600 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13600:	push	{r4, r5, r6, r7, fp, lr}
   13604:	add	fp, sp, #16
   13608:	sub	sp, sp, #8
   1360c:	mov	r4, r0
   13610:	ldr	r0, [r0, #112]	; 0x70
   13614:	add	r1, r1, #7
   13618:	ldr	r7, [r4, #228]	; 0xe4
   1361c:	bic	r5, r1, #3
   13620:	add	r6, r4, #108	; 0x6c
   13624:	add	r2, r7, r5
   13628:	cmp	r2, r0
   1362c:	bls	13654 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13630:	ldr	r0, [r4, #40]	; 0x28
   13634:	ldr	ip, [r4, #48]	; 0x30
   13638:	mov	r1, #7
   1363c:	mov	r3, #0
   13640:	str	r1, [sp]
   13644:	mov	r1, r6
   13648:	blx	ip
   1364c:	cmp	r0, #0
   13650:	bne	136a0 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13654:	ldr	r0, [r6]
   13658:	adds	r6, r0, r7
   1365c:	beq	13690 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13660:	mov	r0, r6
   13664:	mov	r1, #0
   13668:	mov	r2, r5
   1366c:	bl	123f4 <memset@plt>
   13670:	ldr	r0, [r4, #224]	; 0xe0
   13674:	str	r0, [r6], #4
   13678:	ldr	r0, [r4, #228]	; 0xe4
   1367c:	add	r1, r0, #4
   13680:	add	r0, r0, r5
   13684:	str	r1, [r4, #224]	; 0xe0
   13688:	str	r0, [r4, #228]	; 0xe4
   1368c:	b	13694 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13690:	mov	r6, #0
   13694:	mov	r0, r6
   13698:	sub	sp, fp, #16
   1369c:	pop	{r4, r5, r6, r7, fp, pc}
   136a0:	movw	r0, #36030	; 0x8cbe
   136a4:	movw	r1, #31512	; 0x7b18
   136a8:	movw	r3, #35576	; 0x8af8
   136ac:	mov	r2, #308	; 0x134
   136b0:	movt	r0, #1
   136b4:	movt	r1, #1
   136b8:	movt	r3, #1
   136bc:	bl	12418 <__assert_fail@plt>

000136c0 <flatcc_builder_enter_user_frame@@Base>:
   136c0:	push	{r4, r5, r6, r7, fp, lr}
   136c4:	add	fp, sp, #16
   136c8:	sub	sp, sp, #8
   136cc:	mov	r4, r0
   136d0:	ldr	r0, [r0, #112]	; 0x70
   136d4:	add	r1, r1, #7
   136d8:	ldr	r7, [r4, #228]	; 0xe4
   136dc:	bic	r5, r1, #3
   136e0:	add	r6, r4, #108	; 0x6c
   136e4:	add	r2, r7, r5
   136e8:	cmp	r2, r0
   136ec:	bls	13714 <flatcc_builder_enter_user_frame@@Base+0x54>
   136f0:	ldr	r0, [r4, #40]	; 0x28
   136f4:	ldr	ip, [r4, #48]	; 0x30
   136f8:	mov	r1, #7
   136fc:	mov	r3, #0
   13700:	str	r1, [sp]
   13704:	mov	r1, r6
   13708:	blx	ip
   1370c:	cmp	r0, #0
   13710:	bne	1375c <flatcc_builder_enter_user_frame@@Base+0x9c>
   13714:	ldr	r0, [r6]
   13718:	adds	r6, r0, r7
   1371c:	beq	13750 <flatcc_builder_enter_user_frame@@Base+0x90>
   13720:	mov	r0, r6
   13724:	mov	r1, #0
   13728:	mov	r2, r5
   1372c:	bl	123f4 <memset@plt>
   13730:	ldr	r0, [r4, #224]	; 0xe0
   13734:	str	r0, [r6]
   13738:	ldr	r1, [r4, #228]	; 0xe4
   1373c:	add	r0, r1, #4
   13740:	add	r1, r1, r5
   13744:	str	r0, [r4, #224]	; 0xe0
   13748:	str	r1, [r4, #228]	; 0xe4
   1374c:	b	13754 <flatcc_builder_enter_user_frame@@Base+0x94>
   13750:	mov	r0, #0
   13754:	sub	sp, fp, #16
   13758:	pop	{r4, r5, r6, r7, fp, pc}
   1375c:	movw	r0, #36030	; 0x8cbe
   13760:	movw	r1, #31512	; 0x7b18
   13764:	movw	r3, #35576	; 0x8af8
   13768:	mov	r2, #308	; 0x134
   1376c:	movt	r0, #1
   13770:	movt	r1, #1
   13774:	movt	r3, #1
   13778:	bl	12418 <__assert_fail@plt>

0001377c <flatcc_builder_exit_user_frame@@Base>:
   1377c:	push	{fp, lr}
   13780:	mov	fp, sp
   13784:	ldr	r1, [r0, #224]	; 0xe0
   13788:	cmp	r1, #0
   1378c:	subne	r2, r1, #4
   13790:	strne	r2, [r0, #228]	; 0xe4
   13794:	ldrne	r2, [r0, #108]	; 0x6c
   13798:	addne	r1, r2, r1
   1379c:	ldrne	r1, [r1, #-4]
   137a0:	strne	r1, [r0, #224]	; 0xe0
   137a4:	movne	r0, r1
   137a8:	popne	{fp, pc}
   137ac:	movw	r0, #31644	; 0x7b9c
   137b0:	movw	r1, #31512	; 0x7b18
   137b4:	movw	r3, #31669	; 0x7bb5
   137b8:	movw	r2, #542	; 0x21e
   137bc:	movt	r0, #1
   137c0:	movt	r1, #1
   137c4:	movt	r3, #1
   137c8:	bl	12418 <__assert_fail@plt>

000137cc <flatcc_builder_exit_user_frame_at@@Base>:
   137cc:	push	{fp, lr}
   137d0:	mov	fp, sp
   137d4:	ldr	r2, [r0, #224]	; 0xe0
   137d8:	cmp	r2, r1
   137dc:	bcc	137ec <flatcc_builder_exit_user_frame_at@@Base+0x20>
   137e0:	str	r1, [r0, #224]	; 0xe0
   137e4:	pop	{fp, lr}
   137e8:	b	1377c <flatcc_builder_exit_user_frame@@Base>
   137ec:	movw	r0, #31727	; 0x7bef
   137f0:	movw	r1, #31512	; 0x7b18
   137f4:	movw	r3, #31758	; 0x7c0e
   137f8:	movw	r2, #551	; 0x227
   137fc:	movt	r0, #1
   13800:	movt	r1, #1
   13804:	movt	r3, #1
   13808:	bl	12418 <__assert_fail@plt>

0001380c <flatcc_builder_get_current_user_frame@@Base>:
   1380c:	ldr	r0, [r0, #224]	; 0xe0
   13810:	bx	lr

00013814 <flatcc_builder_get_user_frame_ptr@@Base>:
   13814:	ldr	r0, [r0, #108]	; 0x6c
   13818:	add	r0, r0, r1
   1381c:	bx	lr

00013820 <flatcc_builder_embed_buffer@@Base>:
   13820:	push	{r4, r5, r6, r7, fp, lr}
   13824:	add	fp, sp, #16
   13828:	sub	sp, sp, #88	; 0x58
   1382c:	mov	r4, r0
   13830:	ldr	r0, [fp, #8]
   13834:	mov	r5, r3
   13838:	mov	r7, r2
   1383c:	mov	r2, r1
   13840:	sub	r1, fp, #18
   13844:	strh	r0, [fp, #-18]	; 0xffffffee
   13848:	mov	r0, r4
   1384c:	ldr	r3, [r4, #152]	; 0x98
   13850:	cmp	r3, #0
   13854:	movwne	r3, #1
   13858:	bl	13984 <flatcc_builder_embed_buffer@@Base+0x164>
   1385c:	ldr	r1, [fp, #12]
   13860:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13864:	ldr	r0, [r4, #136]	; 0x88
   13868:	mov	r2, #0
   1386c:	str	r2, [sp, #12]
   13870:	str	r2, [sp, #8]
   13874:	and	r1, r1, #2
   13878:	sub	r3, r3, #1
   1387c:	add	r1, r5, r1, lsl #1
   13880:	sub	r1, r0, r1
   13884:	and	r3, r1, r3
   13888:	add	r1, r3, r5
   1388c:	str	r1, [fp, #-24]	; 0xffffffe8
   13890:	ldr	r1, [r4, #152]	; 0x98
   13894:	cmp	r1, #0
   13898:	mov	r1, #0
   1389c:	beq	138bc <flatcc_builder_embed_buffer@@Base+0x9c>
   138a0:	mov	r1, #4
   138a4:	sub	r2, fp, #24
   138a8:	str	r1, [sp, #20]
   138ac:	str	r2, [sp, #16]
   138b0:	mov	r2, #1
   138b4:	str	r1, [sp, #8]
   138b8:	str	r2, [sp, #12]
   138bc:	cmp	r5, #0
   138c0:	beq	138e4 <flatcc_builder_embed_buffer@@Base+0xc4>
   138c4:	add	r6, sp, #8
   138c8:	add	r1, r1, r5
   138cc:	add	r6, r6, r2, lsl #3
   138d0:	add	r2, r2, #1
   138d4:	str	r1, [sp, #8]
   138d8:	str	r7, [r6, #8]
   138dc:	str	r5, [r6, #12]
   138e0:	str	r2, [sp, #12]
   138e4:	cmp	r3, #0
   138e8:	beq	13914 <flatcc_builder_embed_buffer@@Base+0xf4>
   138ec:	add	r7, sp, #8
   138f0:	movw	r6, #30982	; 0x7906
   138f4:	add	r1, r1, r3
   138f8:	add	r7, r7, r2, lsl #3
   138fc:	movt	r6, #1
   13900:	add	r2, r2, #1
   13904:	str	r1, [sp, #8]
   13908:	str	r6, [r7, #8]
   1390c:	str	r3, [r7, #12]
   13910:	str	r2, [sp, #12]
   13914:	cmp	r1, #0
   13918:	ble	13970 <flatcc_builder_embed_buffer@@Base+0x150>
   1391c:	sub	r5, r0, r1
   13920:	ldr	r0, [r4, #36]	; 0x24
   13924:	ldr	r7, [r4, #44]	; 0x2c
   13928:	str	r1, [sp]
   1392c:	add	r1, sp, #8
   13930:	add	r1, r1, #8
   13934:	mov	r3, r5
   13938:	blx	r7
   1393c:	cmp	r0, #0
   13940:	streq	r5, [r4, #136]	; 0x88
   13944:	moveq	r0, r5
   13948:	subeq	sp, fp, #16
   1394c:	popeq	{r4, r5, r6, r7, fp, pc}
   13950:	movw	r0, #36030	; 0x8cbe
   13954:	movw	r1, #31512	; 0x7b18
   13958:	movw	r3, #35709	; 0x8b7d
   1395c:	movw	r2, #651	; 0x28b
   13960:	movt	r0, #1
   13964:	movt	r1, #1
   13968:	movt	r3, #1
   1396c:	bl	12418 <__assert_fail@plt>
   13970:	movw	r0, #36030	; 0x8cbe
   13974:	movw	r1, #31512	; 0x7b18
   13978:	movw	r3, #35709	; 0x8b7d
   1397c:	movw	r2, #647	; 0x287
   13980:	b	13960 <flatcc_builder_embed_buffer@@Base+0x140>
   13984:	push	{r4, sl, fp, lr}
   13988:	add	fp, sp, #8
   1398c:	sub	sp, sp, #80	; 0x50
   13990:	cmp	r2, #0
   13994:	bne	139a4 <flatcc_builder_embed_buffer@@Base+0x184>
   13998:	ldrh	r2, [r0, #132]	; 0x84
   1399c:	cmp	r2, #0
   139a0:	movweq	r2, #1
   139a4:	ldrh	r4, [r1]
   139a8:	cmp	r4, #4
   139ac:	movwcc	r4, #4
   139b0:	cmpcs	r4, r2
   139b4:	bcs	139c4 <flatcc_builder_embed_buffer@@Base+0x1a4>
   139b8:	cmp	r4, r2
   139bc:	movcc	r4, r2
   139c0:	strh	r4, [r1]
   139c4:	cmp	r3, #0
   139c8:	bne	13a3c <flatcc_builder_embed_buffer@@Base+0x21c>
   139cc:	ldr	r4, [r0, #140]	; 0x8c
   139d0:	sub	r1, r2, #1
   139d4:	ands	r1, r4, r1
   139d8:	beq	13a3c <flatcc_builder_embed_buffer@@Base+0x21c>
   139dc:	movw	r2, #30982	; 0x7906
   139e0:	str	r1, [sp, #20]
   139e4:	cmn	r1, #1
   139e8:	movt	r2, #1
   139ec:	str	r2, [sp, #16]
   139f0:	mov	r2, #1
   139f4:	str	r1, [sp, #8]
   139f8:	str	r2, [sp, #12]
   139fc:	add	r2, r1, r4
   13a00:	str	r2, [r0, #140]	; 0x8c
   13a04:	ble	13a44 <flatcc_builder_embed_buffer@@Base+0x224>
   13a08:	ldr	r2, [r0, #36]	; 0x24
   13a0c:	ldr	ip, [r0, #44]	; 0x2c
   13a10:	add	r0, sp, #8
   13a14:	str	r1, [sp]
   13a18:	mov	r3, r4
   13a1c:	add	r1, r0, #8
   13a20:	mov	r0, r2
   13a24:	mov	r2, #1
   13a28:	blx	ip
   13a2c:	cmp	r0, #0
   13a30:	bne	13a58 <flatcc_builder_embed_buffer@@Base+0x238>
   13a34:	cmn	r4, #1
   13a38:	beq	13a78 <flatcc_builder_embed_buffer@@Base+0x258>
   13a3c:	sub	sp, fp, #8
   13a40:	pop	{r4, sl, fp, pc}
   13a44:	movw	r0, #36030	; 0x8cbe
   13a48:	movw	r1, #31512	; 0x7b18
   13a4c:	movw	r3, #35897	; 0x8c39
   13a50:	movw	r2, #673	; 0x2a1
   13a54:	b	13a68 <flatcc_builder_embed_buffer@@Base+0x248>
   13a58:	movw	r0, #36030	; 0x8cbe
   13a5c:	movw	r1, #31512	; 0x7b18
   13a60:	movw	r3, #35897	; 0x8c39
   13a64:	movw	r2, #677	; 0x2a5
   13a68:	movt	r0, #1
   13a6c:	movt	r1, #1
   13a70:	movt	r3, #1
   13a74:	bl	12418 <__assert_fail@plt>
   13a78:	movw	r0, #36030	; 0x8cbe
   13a7c:	movw	r1, #31512	; 0x7b18
   13a80:	movw	r3, #35643	; 0x8b3b
   13a84:	movw	r2, #702	; 0x2be
   13a88:	movt	r0, #1
   13a8c:	movt	r1, #1
   13a90:	movt	r3, #1
   13a94:	bl	12418 <__assert_fail@plt>

00013a98 <flatcc_builder_create_buffer@@Base>:
   13a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a9c:	add	fp, sp, #28
   13aa0:	sub	sp, sp, #100	; 0x64
   13aa4:	ldr	sl, [fp, #12]
   13aa8:	mov	r4, r0
   13aac:	ldr	r0, [fp, #8]
   13ab0:	mov	r7, r1
   13ab4:	mov	r5, #0
   13ab8:	mov	r6, r3
   13abc:	sub	r1, fp, #30
   13ac0:	str	r5, [sp, #12]
   13ac4:	and	r9, sl, #1
   13ac8:	strh	r0, [fp, #-30]	; 0xffffffe2
   13acc:	mov	r0, r4
   13ad0:	mov	r3, r9
   13ad4:	bl	13984 <flatcc_builder_embed_buffer@@Base+0x164>
   13ad8:	ldrh	r0, [r4, #128]	; 0x80
   13adc:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13ae0:	str	r6, [sp, #8]
   13ae4:	cmp	r0, r1
   13ae8:	strhcc	r1, [r4, #128]	; 0x80
   13aec:	cmp	r7, #0
   13af0:	beq	13b0c <flatcc_builder_create_buffer@@Base+0x74>
   13af4:	ldr	r5, [r7]
   13af8:	cmp	r5, #0
   13afc:	str	r5, [sp, #12]
   13b00:	movwne	r5, #1
   13b04:	lsl	r7, r5, #2
   13b08:	b	13b10 <flatcc_builder_create_buffer@@Base+0x78>
   13b0c:	mov	r7, #0
   13b10:	ldr	r0, [r4, #136]	; 0x88
   13b14:	and	r2, sl, #2
   13b18:	mov	r3, #0
   13b1c:	sub	r6, r1, #1
   13b20:	ands	ip, sl, #3
   13b24:	mov	sl, #4
   13b28:	mov	r1, #4
   13b2c:	str	r3, [sp, #20]
   13b30:	str	r3, [sp, #16]
   13b34:	sub	r2, r0, r2, lsl #1
   13b38:	sub	r2, r2, r7
   13b3c:	sub	r2, r2, #4
   13b40:	beq	13b64 <flatcc_builder_create_buffer@@Base+0xcc>
   13b44:	mov	r1, #4
   13b48:	sub	r3, fp, #40	; 0x28
   13b4c:	str	r1, [sp, #28]
   13b50:	str	r3, [sp, #24]
   13b54:	str	r1, [sp, #16]
   13b58:	mov	r3, #1
   13b5c:	mov	r1, #8
   13b60:	str	r3, [sp, #20]
   13b64:	add	lr, sp, #16
   13b68:	and	r6, r2, r6
   13b6c:	sub	r8, fp, #36	; 0x24
   13b70:	str	r1, [sp, #16]
   13b74:	cmp	r5, #0
   13b78:	add	r2, lr, r3, lsl #3
   13b7c:	str	r8, [r2, #8]
   13b80:	str	sl, [r2, #12]
   13b84:	add	r2, r3, #1
   13b88:	str	r2, [sp, #20]
   13b8c:	beq	13bb0 <flatcc_builder_create_buffer@@Base+0x118>
   13b90:	add	r2, lr, r2, lsl #3
   13b94:	add	r1, r1, r7
   13b98:	add	r5, sp, #12
   13b9c:	str	r1, [sp, #16]
   13ba0:	str	r5, [r2, #8]
   13ba4:	str	r7, [r2, #12]
   13ba8:	orr	r2, r3, #2
   13bac:	str	r2, [sp, #20]
   13bb0:	cmp	r6, #0
   13bb4:	beq	13bdc <flatcc_builder_create_buffer@@Base+0x144>
   13bb8:	movw	r5, #30982	; 0x7906
   13bbc:	add	r3, lr, r2, lsl #3
   13bc0:	add	r1, r1, r6
   13bc4:	add	r2, r2, #1
   13bc8:	movt	r5, #1
   13bcc:	str	r1, [sp, #16]
   13bd0:	str	r5, [r3, #8]
   13bd4:	str	r6, [r3, #12]
   13bd8:	str	r2, [sp, #20]
   13bdc:	sub	r7, r0, r1
   13be0:	cmp	ip, #0
   13be4:	mov	r6, #144	; 0x90
   13be8:	ldr	r3, [sp, #8]
   13bec:	mov	r0, r7
   13bf0:	addne	r0, r0, #4
   13bf4:	cmp	r9, #0
   13bf8:	movweq	r6, #140	; 0x8c
   13bfc:	cmp	r1, #0
   13c00:	ldr	r6, [r4, r6]
   13c04:	sub	r3, r3, r0
   13c08:	str	r3, [fp, #-36]	; 0xffffffdc
   13c0c:	sub	r0, r6, r0
   13c10:	str	r0, [fp, #-40]	; 0xffffffd8
   13c14:	ble	13c6c <flatcc_builder_create_buffer@@Base+0x1d4>
   13c18:	ldr	r0, [r4, #36]	; 0x24
   13c1c:	ldr	r6, [r4, #44]	; 0x2c
   13c20:	str	r1, [sp]
   13c24:	add	r1, lr, #8
   13c28:	mov	r3, r7
   13c2c:	blx	r6
   13c30:	cmp	r0, #0
   13c34:	bne	13c80 <flatcc_builder_create_buffer@@Base+0x1e8>
   13c38:	cmp	r7, #0
   13c3c:	str	r7, [r4, #136]	; 0x88
   13c40:	movne	r0, r7
   13c44:	subne	sp, fp, #28
   13c48:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c4c:	movw	r0, #36030	; 0x8cbe
   13c50:	movw	r1, #31512	; 0x7b18
   13c54:	movw	r3, #31827	; 0x7c53
   13c58:	mov	r2, #772	; 0x304
   13c5c:	movt	r0, #1
   13c60:	movt	r1, #1
   13c64:	movt	r3, #1
   13c68:	bl	12418 <__assert_fail@plt>
   13c6c:	movw	r0, #36030	; 0x8cbe
   13c70:	movw	r1, #31512	; 0x7b18
   13c74:	movw	r3, #35709	; 0x8b7d
   13c78:	movw	r2, #647	; 0x287
   13c7c:	b	13c90 <flatcc_builder_create_buffer@@Base+0x1f8>
   13c80:	movw	r0, #36030	; 0x8cbe
   13c84:	movw	r1, #31512	; 0x7b18
   13c88:	movw	r3, #35709	; 0x8b7d
   13c8c:	movw	r2, #651	; 0x28b
   13c90:	movt	r0, #1
   13c94:	movt	r1, #1
   13c98:	movt	r3, #1
   13c9c:	bl	12418 <__assert_fail@plt>

00013ca0 <flatcc_builder_create_struct@@Base>:
   13ca0:	push	{r4, r5, r6, sl, fp, lr}
   13ca4:	add	fp, sp, #16
   13ca8:	sub	sp, sp, #80	; 0x50
   13cac:	cmp	r3, #0
   13cb0:	beq	13d88 <flatcc_builder_create_struct@@Base+0xe8>
   13cb4:	mov	r5, r0
   13cb8:	ldrh	r0, [r0, #128]	; 0x80
   13cbc:	mov	r4, #0
   13cc0:	cmp	r0, r3
   13cc4:	strhcc	r3, [r5, #128]	; 0x80
   13cc8:	sub	r3, r3, #1
   13ccc:	cmp	r2, #0
   13cd0:	ldr	r0, [r5, #136]	; 0x88
   13cd4:	str	r4, [sp, #12]
   13cd8:	str	r4, [sp, #8]
   13cdc:	movne	r4, #1
   13ce0:	strne	r2, [sp, #20]
   13ce4:	strne	r1, [sp, #16]
   13ce8:	strne	r2, [sp, #8]
   13cec:	strne	r4, [sp, #12]
   13cf0:	sub	r6, r0, r2
   13cf4:	and	r3, r6, r3
   13cf8:	cmp	r3, #0
   13cfc:	beq	13d28 <flatcc_builder_create_struct@@Base+0x88>
   13d00:	add	r1, sp, #8
   13d04:	movw	r6, #30982	; 0x7906
   13d08:	add	r2, r3, r2
   13d0c:	add	r1, r1, r4, lsl #3
   13d10:	movt	r6, #1
   13d14:	add	r4, r4, #1
   13d18:	str	r2, [sp, #8]
   13d1c:	str	r6, [r1, #8]
   13d20:	str	r3, [r1, #12]
   13d24:	str	r4, [sp, #12]
   13d28:	cmp	r2, #0
   13d2c:	ble	13da8 <flatcc_builder_create_struct@@Base+0x108>
   13d30:	sub	r6, r0, r2
   13d34:	ldr	r0, [r5, #36]	; 0x24
   13d38:	ldr	ip, [r5, #44]	; 0x2c
   13d3c:	add	r1, sp, #8
   13d40:	str	r2, [sp]
   13d44:	mov	r2, r4
   13d48:	add	r1, r1, #8
   13d4c:	mov	r3, r6
   13d50:	blx	ip
   13d54:	cmp	r0, #0
   13d58:	streq	r6, [r5, #136]	; 0x88
   13d5c:	moveq	r0, r6
   13d60:	subeq	sp, fp, #16
   13d64:	popeq	{r4, r5, r6, sl, fp, pc}
   13d68:	movw	r0, #36030	; 0x8cbe
   13d6c:	movw	r1, #31512	; 0x7b18
   13d70:	movw	r3, #35709	; 0x8b7d
   13d74:	movw	r2, #651	; 0x28b
   13d78:	movt	r0, #1
   13d7c:	movt	r1, #1
   13d80:	movt	r3, #1
   13d84:	bl	12418 <__assert_fail@plt>
   13d88:	movw	r0, #31958	; 0x7cd6
   13d8c:	movw	r1, #31512	; 0x7b18
   13d90:	movw	r3, #31969	; 0x7ce1
   13d94:	movw	r2, #783	; 0x30f
   13d98:	movt	r0, #1
   13d9c:	movt	r1, #1
   13da0:	movt	r3, #1
   13da4:	bl	12418 <__assert_fail@plt>
   13da8:	movw	r0, #36030	; 0x8cbe
   13dac:	movw	r1, #31512	; 0x7b18
   13db0:	movw	r3, #35709	; 0x8b7d
   13db4:	movw	r2, #647	; 0x287
   13db8:	b	13d78 <flatcc_builder_create_struct@@Base+0xd8>

00013dbc <flatcc_builder_start_buffer@@Base>:
   13dbc:	push	{r4, r5, r6, r7, fp, lr}
   13dc0:	add	fp, sp, #16
   13dc4:	mov	r5, r1
   13dc8:	ldrh	r1, [r0, #128]	; 0x80
   13dcc:	mov	r6, r3
   13dd0:	mov	r7, r2
   13dd4:	mov	r4, r0
   13dd8:	bl	13e78 <flatcc_builder_start_buffer@@Base+0xbc>
   13ddc:	mov	r1, r0
   13de0:	mvn	r0, #0
   13de4:	cmp	r1, #0
   13de8:	popne	{r4, r5, r6, r7, fp, pc}
   13dec:	mov	r0, #1
   13df0:	cmp	r5, #0
   13df4:	strh	r0, [r4, #128]	; 0x80
   13df8:	ldrh	r1, [r4, #132]	; 0x84
   13dfc:	ldr	r2, [r4, #32]
   13e00:	strh	r1, [r2, #34]	; 0x22
   13e04:	strh	r7, [r4, #132]	; 0x84
   13e08:	ldrh	r1, [r4, #164]	; 0xa4
   13e0c:	ldr	r2, [r4, #32]
   13e10:	strh	r1, [r2, #32]
   13e14:	strh	r6, [r4, #164]	; 0xa4
   13e18:	ldr	r1, [r4, #32]
   13e1c:	ldr	r2, [r4, #144]	; 0x90
   13e20:	str	r2, [r1, #20]
   13e24:	ldr	r1, [r4, #32]
   13e28:	ldr	r2, [r4, #152]	; 0x98
   13e2c:	str	r2, [r1, #28]
   13e30:	ldr	r3, [r4, #148]	; 0x94
   13e34:	ldr	r1, [r4, #32]
   13e38:	ldr	r2, [r4, #136]	; 0x88
   13e3c:	ldr	r7, [r4, #168]	; 0xa8
   13e40:	add	r6, r3, #1
   13e44:	str	r2, [r4, #144]	; 0x90
   13e48:	str	r6, [r4, #148]	; 0x94
   13e4c:	str	r3, [r4, #152]	; 0x98
   13e50:	str	r7, [r1, #16]
   13e54:	movw	r1, #30982	; 0x7906
   13e58:	movt	r1, #1
   13e5c:	movne	r1, r5
   13e60:	ldr	r1, [r1]
   13e64:	str	r1, [r4, #168]	; 0xa8
   13e68:	ldr	r1, [r4, #32]
   13e6c:	strh	r0, [r1, #14]
   13e70:	mov	r0, #0
   13e74:	pop	{r4, r5, r6, r7, fp, pc}
   13e78:	push	{r4, r5, r6, r7, fp, lr}
   13e7c:	add	fp, sp, #16
   13e80:	sub	sp, sp, #8
   13e84:	mov	r5, r1
   13e88:	ldr	r1, [r0, #156]	; 0x9c
   13e8c:	ldr	r2, [r0, #160]	; 0xa0
   13e90:	mov	r4, r0
   13e94:	add	r0, r1, #1
   13e98:	cmp	r1, r2
   13e9c:	str	r0, [r4, #156]	; 0x9c
   13ea0:	bge	13eb4 <flatcc_builder_start_buffer@@Base+0xf8>
   13ea4:	ldr	r0, [r4, #32]
   13ea8:	add	r0, r0, #36	; 0x24
   13eac:	str	r0, [r4, #32]
   13eb0:	b	13f48 <flatcc_builder_start_buffer@@Base+0x18c>
   13eb4:	ldr	r2, [r4, #176]	; 0xb0
   13eb8:	mvn	r6, #0
   13ebc:	cmp	r2, #1
   13ec0:	cmpge	r1, r2
   13ec4:	bge	13f80 <flatcc_builder_start_buffer@@Base+0x1c4>
   13ec8:	add	r7, r0, r0, lsl #3
   13ecc:	ldr	r0, [r4, #88]	; 0x58
   13ed0:	lsl	r2, r7, #2
   13ed4:	cmp	r2, r0
   13ed8:	bls	13f00 <flatcc_builder_start_buffer@@Base+0x144>
   13edc:	ldr	r0, [r4, #40]	; 0x28
   13ee0:	ldr	ip, [r4, #48]	; 0x30
   13ee4:	mov	r3, #4
   13ee8:	add	r1, r4, #84	; 0x54
   13eec:	str	r3, [sp]
   13ef0:	mov	r3, #0
   13ef4:	blx	ip
   13ef8:	cmp	r0, #0
   13efc:	bne	13f8c <flatcc_builder_start_buffer@@Base+0x1d0>
   13f00:	ldr	r1, [r4, #84]	; 0x54
   13f04:	mvn	r0, #35	; 0x23
   13f08:	add	r0, r0, r7, lsl #2
   13f0c:	adds	r0, r0, r1
   13f10:	str	r0, [r4, #32]
   13f14:	beq	13f80 <flatcc_builder_start_buffer@@Base+0x1c4>
   13f18:	ldr	r1, [r4, #88]	; 0x58
   13f1c:	movw	r3, #36409	; 0x8e39
   13f20:	ldr	r2, [r4, #176]	; 0xb0
   13f24:	movt	r3, #14563	; 0x38e3
   13f28:	umull	r1, r3, r1, r3
   13f2c:	cmp	r2, r3, lsr #3
   13f30:	lsr	r1, r3, #3
   13f34:	mov	r3, r1
   13f38:	movlt	r3, r2
   13f3c:	cmp	r2, #0
   13f40:	movle	r3, r1
   13f44:	str	r3, [r4, #160]	; 0xa0
   13f48:	ldr	r1, [r4, #20]
   13f4c:	mvn	r3, #3
   13f50:	mov	r6, #0
   13f54:	str	r1, [r0, #8]
   13f58:	ldrh	r2, [r4, #130]	; 0x82
   13f5c:	strh	r2, [r0, #12]
   13f60:	strh	r5, [r4, #130]	; 0x82
   13f64:	ldr	r2, [r4, #28]
   13f68:	stm	r0, {r2, r3}
   13f6c:	add	r0, r1, r2
   13f70:	str	r6, [r4, #20]
   13f74:	add	r0, r0, #7
   13f78:	bic	r0, r0, #7
   13f7c:	str	r0, [r4, #28]
   13f80:	mov	r0, r6
   13f84:	sub	sp, fp, #16
   13f88:	pop	{r4, r5, r6, r7, fp, pc}
   13f8c:	movw	r0, #36030	; 0x8cbe
   13f90:	movw	r1, #31512	; 0x7b18
   13f94:	movw	r3, #35576	; 0x8af8
   13f98:	mov	r2, #308	; 0x134
   13f9c:	movt	r0, #1
   13fa0:	movt	r1, #1
   13fa4:	movt	r3, #1
   13fa8:	bl	12418 <__assert_fail@plt>

00013fac <flatcc_builder_end_buffer@@Base>:
   13fac:	push	{r4, r5, r6, sl, fp, lr}
   13fb0:	add	fp, sp, #16
   13fb4:	sub	sp, sp, #8
   13fb8:	mov	r4, r0
   13fbc:	ldr	r0, [r0, #32]
   13fc0:	ldrh	r0, [r0, #14]
   13fc4:	cmp	r0, #1
   13fc8:	bne	140bc <flatcc_builder_end_buffer@@Base+0x110>
   13fcc:	mov	r3, r1
   13fd0:	ldr	r1, [r4, #152]	; 0x98
   13fd4:	ldrh	r0, [r4, #164]	; 0xa4
   13fd8:	ldrh	r2, [r4, #132]	; 0x84
   13fdc:	cmp	r1, #0
   13fe0:	ldrh	r1, [r4, #128]	; 0x80
   13fe4:	and	r0, r0, #2
   13fe8:	orrne	r0, r0, #1
   13fec:	cmp	r1, r2
   13ff0:	movcc	r1, r2
   13ff4:	strhcc	r2, [r4, #128]	; 0x80
   13ff8:	str	r0, [sp, #4]
   13ffc:	mov	r0, r4
   14000:	str	r1, [sp]
   14004:	add	r1, r4, #168	; 0xa8
   14008:	bl	13a98 <flatcc_builder_create_buffer@@Base>
   1400c:	mov	r6, r0
   14010:	cmp	r0, #0
   14014:	beq	140b0 <flatcc_builder_end_buffer@@Base+0x104>
   14018:	ldr	r1, [r4, #32]
   1401c:	ldr	r0, [r4, #16]
   14020:	ldr	r2, [r4, #20]
   14024:	ldr	r3, [r1, #20]
   14028:	str	r3, [r4, #144]	; 0x90
   1402c:	ldr	r3, [r1, #28]
   14030:	str	r3, [r4, #152]	; 0x98
   14034:	ldr	r3, [r1, #16]
   14038:	str	r3, [r4, #168]	; 0xa8
   1403c:	ldrh	r1, [r1, #32]
   14040:	strh	r1, [r4, #164]	; 0xa4
   14044:	mov	r1, #0
   14048:	bl	123f4 <memset@plt>
   1404c:	ldr	r0, [r4, #32]
   14050:	ldr	r1, [r4, #60]	; 0x3c
   14054:	ldr	r2, [r4, #64]	; 0x40
   14058:	ldr	r3, [r0, #8]
   1405c:	str	r3, [r4, #20]
   14060:	ldr	r3, [r0]
   14064:	str	r3, [r4, #28]
   14068:	add	r1, r1, r3
   1406c:	ldr	r5, [r0, #4]
   14070:	str	r1, [r4, #16]
   14074:	sub	r1, r2, r3
   14078:	cmp	r1, r5
   1407c:	movhi	r1, r5
   14080:	str	r1, [r4, #24]
   14084:	ldrh	r1, [r4, #130]	; 0x82
   14088:	ldrh	r2, [r4, #128]	; 0x80
   1408c:	cmp	r2, r1
   14090:	strhcc	r1, [r4, #128]	; 0x80
   14094:	ldrh	r1, [r0, #12]
   14098:	sub	r0, r0, #36	; 0x24
   1409c:	str	r0, [r4, #32]
   140a0:	strh	r1, [r4, #130]	; 0x82
   140a4:	ldr	r0, [r4, #156]	; 0x9c
   140a8:	sub	r0, r0, #1
   140ac:	str	r0, [r4, #156]	; 0x9c
   140b0:	mov	r0, r6
   140b4:	sub	sp, fp, #16
   140b8:	pop	{r4, r5, r6, sl, fp, pc}
   140bc:	movw	r0, #32071	; 0x7d47
   140c0:	movw	r1, #31512	; 0x7b18
   140c4:	movw	r3, #32115	; 0x7d73
   140c8:	movw	r2, #838	; 0x346
   140cc:	movt	r0, #1
   140d0:	movt	r1, #1
   140d4:	movt	r3, #1
   140d8:	bl	12418 <__assert_fail@plt>

000140dc <flatcc_builder_start_struct@@Base>:
   140dc:	push	{r4, r5, r6, r7, fp, lr}
   140e0:	add	fp, sp, #16
   140e4:	mov	r6, r1
   140e8:	mov	r1, r2
   140ec:	mov	r4, r0
   140f0:	bl	13e78 <flatcc_builder_start_buffer@@Base+0xbc>
   140f4:	mov	r5, #0
   140f8:	cmp	r0, #0
   140fc:	bne	1416c <flatcc_builder_start_struct@@Base+0x90>
   14100:	ldr	r1, [r4, #32]
   14104:	mov	r0, #2
   14108:	strh	r0, [r1, #14]
   1410c:	ldr	r2, [r4, #28]
   14110:	ldr	r0, [r4, #60]	; 0x3c
   14114:	ldr	r3, [r4, #64]	; 0x40
   14118:	add	r0, r0, r2
   1411c:	sub	r2, r3, r2
   14120:	mvn	r3, #3
   14124:	cmn	r2, #4
   14128:	str	r0, [r4, #16]
   1412c:	movcs	r2, r3
   14130:	str	r2, [r4, #24]
   14134:	str	r3, [r1, #4]
   14138:	ldr	r7, [r4, #20]
   1413c:	add	r1, r7, r6
   14140:	cmp	r1, r2
   14144:	str	r1, [r4, #20]
   14148:	bcc	14168 <flatcc_builder_start_struct@@Base+0x8c>
   1414c:	add	r1, r1, #1
   14150:	mov	r0, r4
   14154:	mvn	r2, #3
   14158:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   1415c:	cmp	r0, #0
   14160:	bne	1416c <flatcc_builder_start_struct@@Base+0x90>
   14164:	ldr	r0, [r4, #16]
   14168:	add	r5, r0, r7
   1416c:	mov	r0, r5
   14170:	pop	{r4, r5, r6, r7, fp, pc}

00014174 <flatcc_builder_struct_edit@@Base>:
   14174:	ldr	r0, [r0, #16]
   14178:	bx	lr

0001417c <flatcc_builder_end_struct@@Base>:
   1417c:	push	{r4, r5, fp, lr}
   14180:	add	fp, sp, #8
   14184:	mov	r4, r0
   14188:	ldr	r0, [r0, #32]
   1418c:	ldrh	r0, [r0, #14]
   14190:	cmp	r0, #2
   14194:	bne	14234 <flatcc_builder_end_struct@@Base+0xb8>
   14198:	ldrh	r3, [r4, #130]	; 0x82
   1419c:	ldr	r1, [r4, #16]
   141a0:	ldr	r2, [r4, #20]
   141a4:	mov	r0, r4
   141a8:	bl	13ca0 <flatcc_builder_create_struct@@Base>
   141ac:	mov	r5, r0
   141b0:	cmp	r0, #0
   141b4:	beq	1422c <flatcc_builder_end_struct@@Base+0xb0>
   141b8:	ldr	r0, [r4, #16]
   141bc:	ldr	r2, [r4, #20]
   141c0:	mov	r1, #0
   141c4:	bl	123f4 <memset@plt>
   141c8:	ldr	r0, [r4, #32]
   141cc:	ldr	r1, [r4, #60]	; 0x3c
   141d0:	ldr	ip, [r4, #64]	; 0x40
   141d4:	ldr	r3, [r0, #8]
   141d8:	str	r3, [r4, #20]
   141dc:	ldr	r3, [r0]
   141e0:	str	r3, [r4, #28]
   141e4:	add	r1, r1, r3
   141e8:	ldr	r2, [r0, #4]
   141ec:	str	r1, [r4, #16]
   141f0:	sub	r1, ip, r3
   141f4:	cmp	r1, r2
   141f8:	movhi	r1, r2
   141fc:	str	r1, [r4, #24]
   14200:	ldrh	r1, [r4, #130]	; 0x82
   14204:	ldrh	r2, [r4, #128]	; 0x80
   14208:	cmp	r2, r1
   1420c:	strhcc	r1, [r4, #128]	; 0x80
   14210:	ldrh	r1, [r0, #12]
   14214:	sub	r0, r0, #36	; 0x24
   14218:	str	r0, [r4, #32]
   1421c:	strh	r1, [r4, #130]	; 0x82
   14220:	ldr	r0, [r4, #156]	; 0x9c
   14224:	sub	r0, r0, #1
   14228:	str	r0, [r4, #156]	; 0x9c
   1422c:	mov	r0, r5
   14230:	pop	{r4, r5, fp, pc}
   14234:	movw	r0, #32204	; 0x7dcc
   14238:	movw	r1, #31512	; 0x7b18
   1423c:	movw	r3, #32248	; 0x7df8
   14240:	mov	r2, #872	; 0x368
   14244:	movt	r0, #1
   14248:	movt	r1, #1
   1424c:	movt	r3, #1
   14250:	bl	12418 <__assert_fail@plt>

00014254 <flatcc_builder_extend_vector@@Base>:
   14254:	push	{r4, r5, fp, lr}
   14258:	add	fp, sp, #8
   1425c:	mov	r4, r0
   14260:	ldr	r0, [r0, #32]
   14264:	ldr	r2, [r0, #20]
   14268:	adds	r2, r2, r1
   1426c:	bcs	142cc <flatcc_builder_extend_vector@@Base+0x78>
   14270:	ldr	r3, [r0, #24]
   14274:	cmp	r2, r3
   14278:	bhi	142cc <flatcc_builder_extend_vector@@Base+0x78>
   1427c:	str	r2, [r0, #20]
   14280:	ldr	r0, [r4, #32]
   14284:	ldr	r5, [r4, #20]
   14288:	ldr	r2, [r4, #24]
   1428c:	ldr	r0, [r0, #16]
   14290:	mla	r0, r0, r1, r5
   14294:	cmp	r0, r2
   14298:	str	r0, [r4, #20]
   1429c:	bcc	142c0 <flatcc_builder_extend_vector@@Base+0x6c>
   142a0:	add	r1, r0, #1
   142a4:	mov	r0, r4
   142a8:	mvn	r2, #3
   142ac:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   142b0:	mov	r1, r0
   142b4:	mov	r0, #0
   142b8:	cmp	r1, #0
   142bc:	popne	{r4, r5, fp, pc}
   142c0:	ldr	r0, [r4, #16]
   142c4:	add	r0, r0, r5
   142c8:	pop	{r4, r5, fp, pc}
   142cc:	movw	r0, #35783	; 0x8bc7
   142d0:	movw	r1, #31512	; 0x7b18
   142d4:	movw	r3, #35810	; 0x8be2
   142d8:	mov	r2, #892	; 0x37c
   142dc:	movt	r0, #1
   142e0:	movt	r1, #1
   142e4:	movt	r3, #1
   142e8:	bl	12418 <__assert_fail@plt>

000142ec <flatcc_builder_vector_push@@Base>:
   142ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142f0:	add	fp, sp, #24
   142f4:	mov	r5, r0
   142f8:	ldr	r0, [r0, #32]
   142fc:	mov	r8, r1
   14300:	ldrh	r1, [r0, #14]
   14304:	cmp	r1, #4
   14308:	bne	1438c <flatcc_builder_vector_push@@Base+0xa0>
   1430c:	ldr	r1, [r0, #20]
   14310:	ldr	r2, [r0, #24]
   14314:	cmp	r1, r2
   14318:	bhi	143a4 <flatcc_builder_vector_push@@Base+0xb8>
   1431c:	add	r1, r1, #1
   14320:	str	r1, [r0, #20]
   14324:	ldr	r0, [r5, #32]
   14328:	ldr	r4, [r5, #20]
   1432c:	ldr	r1, [r5, #24]
   14330:	ldr	r6, [r0, #16]
   14334:	add	r0, r4, r6
   14338:	cmp	r0, r1
   1433c:	str	r0, [r5, #20]
   14340:	bcc	14360 <flatcc_builder_vector_push@@Base+0x74>
   14344:	add	r1, r0, #1
   14348:	mov	r0, r5
   1434c:	mvn	r2, #3
   14350:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   14354:	mov	r7, #0
   14358:	cmp	r0, #0
   1435c:	bne	14384 <flatcc_builder_vector_push@@Base+0x98>
   14360:	ldr	r0, [r5, #16]
   14364:	adds	r7, r0, r4
   14368:	beq	14380 <flatcc_builder_vector_push@@Base+0x94>
   1436c:	mov	r0, r7
   14370:	mov	r1, r8
   14374:	mov	r2, r6
   14378:	bl	12388 <memcpy@plt>
   1437c:	b	14384 <flatcc_builder_vector_push@@Base+0x98>
   14380:	mov	r7, #0
   14384:	mov	r0, r7
   14388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1438c:	movw	r0, #32315	; 0x7e3b
   14390:	movw	r1, #31512	; 0x7b18
   14394:	movw	r3, #32359	; 0x7e67
   14398:	movw	r2, #907	; 0x38b
   1439c:	movt	r0, #1
   143a0:	b	143b8 <flatcc_builder_vector_push@@Base+0xcc>
   143a4:	movw	r0, #32426	; 0x7eaa
   143a8:	movw	r1, #31512	; 0x7b18
   143ac:	movw	r3, #32359	; 0x7e67
   143b0:	mov	r2, #908	; 0x38c
   143b4:	movt	r0, #1
   143b8:	movt	r1, #1
   143bc:	movt	r3, #1
   143c0:	bl	12418 <__assert_fail@plt>

000143c4 <flatcc_builder_append_vector@@Base>:
   143c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   143c8:	add	fp, sp, #24
   143cc:	mov	r6, r0
   143d0:	ldr	r0, [r0, #32]
   143d4:	mov	r8, r1
   143d8:	ldrh	r1, [r0, #14]
   143dc:	cmp	r1, #4
   143e0:	bne	1448c <flatcc_builder_append_vector@@Base+0xc8>
   143e4:	ldr	r1, [r0, #20]
   143e8:	mov	r9, r2
   143ec:	adds	r1, r1, r2
   143f0:	bcs	1446c <flatcc_builder_append_vector@@Base+0xa8>
   143f4:	ldr	r2, [r0, #24]
   143f8:	cmp	r1, r2
   143fc:	bhi	1446c <flatcc_builder_append_vector@@Base+0xa8>
   14400:	str	r1, [r0, #20]
   14404:	ldr	r0, [r6, #32]
   14408:	ldr	r4, [r6, #20]
   1440c:	ldr	r1, [r6, #24]
   14410:	ldr	r5, [r0, #16]
   14414:	mla	r0, r5, r9, r4
   14418:	cmp	r0, r1
   1441c:	str	r0, [r6, #20]
   14420:	bcc	14440 <flatcc_builder_append_vector@@Base+0x7c>
   14424:	add	r1, r0, #1
   14428:	mov	r0, r6
   1442c:	mvn	r2, #3
   14430:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   14434:	mov	r7, #0
   14438:	cmp	r0, #0
   1443c:	bne	14464 <flatcc_builder_append_vector@@Base+0xa0>
   14440:	ldr	r0, [r6, #16]
   14444:	adds	r7, r0, r4
   14448:	beq	14460 <flatcc_builder_append_vector@@Base+0x9c>
   1444c:	mul	r2, r5, r9
   14450:	mov	r0, r7
   14454:	mov	r1, r8
   14458:	bl	12388 <memcpy@plt>
   1445c:	b	14464 <flatcc_builder_append_vector@@Base+0xa0>
   14460:	mov	r7, #0
   14464:	mov	r0, r7
   14468:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1446c:	movw	r0, #35783	; 0x8bc7
   14470:	movw	r1, #31512	; 0x7b18
   14474:	movw	r3, #35810	; 0x8be2
   14478:	mov	r2, #892	; 0x37c
   1447c:	movt	r0, #1
   14480:	movt	r1, #1
   14484:	movt	r3, #1
   14488:	bl	12418 <__assert_fail@plt>
   1448c:	movw	r0, #32315	; 0x7e3b
   14490:	movw	r1, #31512	; 0x7b18
   14494:	movw	r3, #32487	; 0x7ee7
   14498:	movw	r2, #915	; 0x393
   1449c:	movt	r0, #1
   144a0:	movt	r1, #1
   144a4:	movt	r3, #1
   144a8:	bl	12418 <__assert_fail@plt>

000144ac <flatcc_builder_extend_offset_vector@@Base>:
   144ac:	push	{r4, r5, fp, lr}
   144b0:	add	fp, sp, #8
   144b4:	mov	r4, r0
   144b8:	ldr	r0, [r0, #32]
   144bc:	ldr	r2, [r0, #20]
   144c0:	adds	r2, r2, r1
   144c4:	cmpcc	r2, #1073741824	; 0x40000000
   144c8:	bcc	144ec <flatcc_builder_extend_offset_vector@@Base+0x40>
   144cc:	movw	r0, #35783	; 0x8bc7
   144d0:	movw	r1, #31512	; 0x7b18
   144d4:	movw	r3, #35810	; 0x8be2
   144d8:	mov	r2, #892	; 0x37c
   144dc:	movt	r0, #1
   144e0:	movt	r1, #1
   144e4:	movt	r3, #1
   144e8:	bl	12418 <__assert_fail@plt>
   144ec:	str	r2, [r0, #20]
   144f0:	ldr	r5, [r4, #20]
   144f4:	ldr	r2, [r4, #24]
   144f8:	add	r0, r5, r1, lsl #2
   144fc:	cmp	r0, r2
   14500:	str	r0, [r4, #20]
   14504:	bcc	14528 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   14508:	add	r1, r0, #1
   1450c:	mov	r0, r4
   14510:	mvn	r2, #3
   14514:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   14518:	mov	r1, r0
   1451c:	mov	r0, #0
   14520:	cmp	r1, #0
   14524:	popne	{r4, r5, fp, pc}
   14528:	ldr	r0, [r4, #16]
   1452c:	add	r0, r0, r5
   14530:	pop	{r4, r5, fp, pc}

00014534 <flatcc_builder_offset_vector_push@@Base>:
   14534:	push	{r4, r5, r6, r7, fp, lr}
   14538:	add	fp, sp, #16
   1453c:	mov	r6, r0
   14540:	ldr	r0, [r0, #32]
   14544:	mov	r4, r1
   14548:	ldrh	r1, [r0, #14]
   1454c:	cmp	r1, #5
   14550:	bne	145b4 <flatcc_builder_offset_vector_push@@Base+0x80>
   14554:	ldr	r1, [r0, #20]
   14558:	mov	r5, #0
   1455c:	cmn	r1, #-1073741823	; 0xc0000001
   14560:	beq	145ac <flatcc_builder_offset_vector_push@@Base+0x78>
   14564:	add	r1, r1, #1
   14568:	str	r1, [r0, #20]
   1456c:	ldr	r7, [r6, #20]
   14570:	ldr	r0, [r6, #24]
   14574:	add	r1, r7, #4
   14578:	cmp	r1, r0
   1457c:	str	r1, [r6, #20]
   14580:	bcc	1459c <flatcc_builder_offset_vector_push@@Base+0x68>
   14584:	add	r1, r7, #5
   14588:	mov	r0, r6
   1458c:	mvn	r2, #3
   14590:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   14594:	cmp	r0, #0
   14598:	bne	145ac <flatcc_builder_offset_vector_push@@Base+0x78>
   1459c:	ldr	r0, [r6, #16]
   145a0:	adds	r0, r0, r7
   145a4:	movne	r5, r0
   145a8:	strne	r4, [r0]
   145ac:	mov	r0, r5
   145b0:	pop	{r4, r5, r6, r7, fp, pc}
   145b4:	movw	r0, #32564	; 0x7f34
   145b8:	movw	r1, #31512	; 0x7b18
   145bc:	movw	r3, #32615	; 0x7f67
   145c0:	movw	r2, #934	; 0x3a6
   145c4:	movt	r0, #1
   145c8:	movt	r1, #1
   145cc:	movt	r3, #1
   145d0:	bl	12418 <__assert_fail@plt>

000145d4 <flatcc_builder_append_offset_vector@@Base>:
   145d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145d8:	add	fp, sp, #24
   145dc:	mov	r6, r0
   145e0:	ldr	r0, [r0, #32]
   145e4:	mov	r8, r1
   145e8:	ldrh	r1, [r0, #14]
   145ec:	cmp	r1, #5
   145f0:	bne	1468c <flatcc_builder_append_offset_vector@@Base+0xb8>
   145f4:	ldr	r1, [r0, #20]
   145f8:	mov	r5, r2
   145fc:	adds	r1, r1, r2
   14600:	cmpcc	r1, #1073741824	; 0x40000000
   14604:	bcc	14628 <flatcc_builder_append_offset_vector@@Base+0x54>
   14608:	movw	r0, #35783	; 0x8bc7
   1460c:	movw	r1, #31512	; 0x7b18
   14610:	movw	r3, #35810	; 0x8be2
   14614:	mov	r2, #892	; 0x37c
   14618:	movt	r0, #1
   1461c:	movt	r1, #1
   14620:	movt	r3, #1
   14624:	bl	12418 <__assert_fail@plt>
   14628:	str	r1, [r0, #20]
   1462c:	ldr	r4, [r6, #20]
   14630:	ldr	r1, [r6, #24]
   14634:	add	r0, r4, r5, lsl #2
   14638:	cmp	r0, r1
   1463c:	str	r0, [r6, #20]
   14640:	bcc	14660 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14644:	add	r1, r0, #1
   14648:	mov	r0, r6
   1464c:	mvn	r2, #3
   14650:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   14654:	mov	r7, #0
   14658:	cmp	r0, #0
   1465c:	bne	14684 <flatcc_builder_append_offset_vector@@Base+0xb0>
   14660:	ldr	r0, [r6, #16]
   14664:	adds	r7, r0, r4
   14668:	beq	14680 <flatcc_builder_append_offset_vector@@Base+0xac>
   1466c:	lsl	r2, r5, #2
   14670:	mov	r0, r7
   14674:	mov	r1, r8
   14678:	bl	12388 <memcpy@plt>
   1467c:	b	14684 <flatcc_builder_append_offset_vector@@Base+0xb0>
   14680:	mov	r7, #0
   14684:	mov	r0, r7
   14688:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1468c:	movw	r0, #32564	; 0x7f34
   14690:	movw	r1, #31512	; 0x7b18
   14694:	movw	r3, #32713	; 0x7fc9
   14698:	mov	r2, #948	; 0x3b4
   1469c:	movt	r0, #1
   146a0:	movt	r1, #1
   146a4:	movt	r3, #1
   146a8:	bl	12418 <__assert_fail@plt>

000146ac <flatcc_builder_extend_string@@Base>:
   146ac:	push	{r4, r5, fp, lr}
   146b0:	add	fp, sp, #8
   146b4:	mov	r4, r0
   146b8:	ldr	r0, [r0, #32]
   146bc:	ldrh	r2, [r0, #14]
   146c0:	cmp	r2, #6
   146c4:	bne	1471c <flatcc_builder_extend_string@@Base+0x70>
   146c8:	ldr	r2, [r0, #20]
   146cc:	adds	r2, r2, r1
   146d0:	bcs	1473c <flatcc_builder_extend_string@@Base+0x90>
   146d4:	str	r2, [r0, #20]
   146d8:	ldr	r5, [r4, #20]
   146dc:	ldr	r2, [r4, #24]
   146e0:	add	r0, r5, r1
   146e4:	cmp	r0, r2
   146e8:	str	r0, [r4, #20]
   146ec:	bcc	14710 <flatcc_builder_extend_string@@Base+0x64>
   146f0:	add	r1, r0, #1
   146f4:	mov	r0, r4
   146f8:	mvn	r2, #3
   146fc:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   14700:	mov	r1, r0
   14704:	mov	r0, #0
   14708:	cmp	r1, #0
   1470c:	popne	{r4, r5, fp, pc}
   14710:	ldr	r0, [r4, #16]
   14714:	add	r0, r0, r5
   14718:	pop	{r4, r5, fp, pc}
   1471c:	movw	r0, #32829	; 0x803d
   14720:	movw	r1, #31512	; 0x7b18
   14724:	movw	r3, #32873	; 0x8069
   14728:	movw	r2, #957	; 0x3bd
   1472c:	movt	r0, #1
   14730:	movt	r1, #1
   14734:	movt	r3, #1
   14738:	bl	12418 <__assert_fail@plt>
   1473c:	movw	r0, #35783	; 0x8bc7
   14740:	movw	r1, #31512	; 0x7b18
   14744:	movw	r3, #35810	; 0x8be2
   14748:	mov	r2, #892	; 0x37c
   1474c:	movt	r0, #1
   14750:	movt	r1, #1
   14754:	movt	r3, #1
   14758:	bl	12418 <__assert_fail@plt>

0001475c <flatcc_builder_append_string@@Base>:
   1475c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14760:	add	fp, sp, #24
   14764:	mov	r6, r0
   14768:	ldr	r0, [r0, #32]
   1476c:	mov	r8, r1
   14770:	ldrh	r1, [r0, #14]
   14774:	cmp	r1, #6
   14778:	bne	147f0 <flatcc_builder_append_string@@Base+0x94>
   1477c:	ldr	r1, [r0, #20]
   14780:	mov	r4, r2
   14784:	adds	r1, r1, r2
   14788:	bcs	14810 <flatcc_builder_append_string@@Base+0xb4>
   1478c:	str	r1, [r0, #20]
   14790:	ldr	r5, [r6, #20]
   14794:	ldr	r1, [r6, #24]
   14798:	add	r0, r5, r4
   1479c:	cmp	r0, r1
   147a0:	str	r0, [r6, #20]
   147a4:	bcc	147c4 <flatcc_builder_append_string@@Base+0x68>
   147a8:	add	r1, r0, #1
   147ac:	mov	r0, r6
   147b0:	mvn	r2, #3
   147b4:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   147b8:	mov	r7, #0
   147bc:	cmp	r0, #0
   147c0:	bne	147e8 <flatcc_builder_append_string@@Base+0x8c>
   147c4:	ldr	r0, [r6, #16]
   147c8:	adds	r7, r0, r5
   147cc:	beq	147e4 <flatcc_builder_append_string@@Base+0x88>
   147d0:	mov	r0, r7
   147d4:	mov	r1, r8
   147d8:	mov	r2, r4
   147dc:	bl	12388 <memcpy@plt>
   147e0:	b	147e8 <flatcc_builder_append_string@@Base+0x8c>
   147e4:	mov	r7, #0
   147e8:	mov	r0, r7
   147ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147f0:	movw	r0, #32829	; 0x803d
   147f4:	movw	r1, #31512	; 0x7b18
   147f8:	movw	r3, #32936	; 0x80a8
   147fc:	movw	r2, #966	; 0x3c6
   14800:	movt	r0, #1
   14804:	movt	r1, #1
   14808:	movt	r3, #1
   1480c:	bl	12418 <__assert_fail@plt>
   14810:	movw	r0, #35783	; 0x8bc7
   14814:	movw	r1, #31512	; 0x7b18
   14818:	movw	r3, #35810	; 0x8be2
   1481c:	mov	r2, #892	; 0x37c
   14820:	movt	r0, #1
   14824:	movt	r1, #1
   14828:	movt	r3, #1
   1482c:	bl	12418 <__assert_fail@plt>

00014830 <flatcc_builder_append_string_str@@Base>:
   14830:	push	{r4, r5, fp, lr}
   14834:	add	fp, sp, #8
   14838:	mov	r5, r0
   1483c:	mov	r0, r1
   14840:	mov	r4, r1
   14844:	bl	123dc <strlen@plt>
   14848:	mov	r2, r0
   1484c:	mov	r0, r5
   14850:	mov	r1, r4
   14854:	pop	{r4, r5, fp, lr}
   14858:	b	1475c <flatcc_builder_append_string@@Base>

0001485c <flatcc_builder_append_string_strn@@Base>:
   1485c:	push	{r4, r5, r6, sl, fp, lr}
   14860:	add	fp, sp, #16
   14864:	mov	r6, r0
   14868:	mov	r5, r1
   1486c:	mov	r0, r1
   14870:	mov	r1, #0
   14874:	mov	r4, r2
   14878:	bl	12400 <memchr@plt>
   1487c:	cmp	r0, #0
   14880:	mov	r1, r5
   14884:	subne	r4, r0, r5
   14888:	mov	r0, r6
   1488c:	mov	r2, r4
   14890:	pop	{r4, r5, r6, sl, fp, lr}
   14894:	b	1475c <flatcc_builder_append_string@@Base>

00014898 <flatcc_builder_truncate_vector@@Base>:
   14898:	push	{fp, lr}
   1489c:	mov	fp, sp
   148a0:	ldr	r2, [r0, #32]
   148a4:	ldrh	r3, [r2, #14]
   148a8:	cmp	r3, #4
   148ac:	bne	148f4 <flatcc_builder_truncate_vector@@Base+0x5c>
   148b0:	ldr	r3, [r2, #20]
   148b4:	cmp	r3, r1
   148b8:	bcc	1490c <flatcc_builder_truncate_vector@@Base+0x74>
   148bc:	sub	r3, r3, r1
   148c0:	str	r3, [r2, #20]
   148c4:	ldr	r2, [r0, #32]
   148c8:	ldr	r3, [r0, #20]
   148cc:	ldr	ip, [r0, #16]
   148d0:	ldr	r2, [r2, #16]
   148d4:	mls	r3, r2, r1, r3
   148d8:	mul	r2, r2, r1
   148dc:	mov	r1, #0
   148e0:	str	r3, [r0, #20]
   148e4:	add	r0, ip, r3
   148e8:	bl	123f4 <memset@plt>
   148ec:	mov	r0, #0
   148f0:	pop	{fp, pc}
   148f4:	movw	r0, #32315	; 0x7e3b
   148f8:	movw	r1, #31512	; 0x7b18
   148fc:	movw	r3, #33013	; 0x80f5
   14900:	movw	r2, #985	; 0x3d9
   14904:	movt	r0, #1
   14908:	b	14920 <flatcc_builder_truncate_vector@@Base+0x88>
   1490c:	movw	r0, #33076	; 0x8134
   14910:	movw	r1, #31512	; 0x7b18
   14914:	movw	r3, #33013	; 0x80f5
   14918:	movw	r2, #986	; 0x3da
   1491c:	movt	r0, #1
   14920:	movt	r1, #1
   14924:	movt	r3, #1
   14928:	bl	12418 <__assert_fail@plt>

0001492c <flatcc_builder_truncate_offset_vector@@Base>:
   1492c:	push	{fp, lr}
   14930:	mov	fp, sp
   14934:	ldr	r2, [r0, #32]
   14938:	ldrh	r3, [r2, #14]
   1493c:	cmp	r3, #5
   14940:	bne	14988 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14944:	ldr	r3, [r2, #20]
   14948:	cmp	r3, r1
   1494c:	bcc	149a0 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   14950:	sub	r3, r3, r1
   14954:	str	r3, [r2, #20]
   14958:	ldr	r2, [r0, #32]
   1495c:	ldr	r3, [r0, #20]
   14960:	ldr	ip, [r0, #16]
   14964:	ldr	r2, [r2, #16]
   14968:	mls	r3, r2, r1, r3
   1496c:	mul	r2, r2, r1
   14970:	mov	r1, #0
   14974:	str	r3, [r0, #20]
   14978:	add	r0, ip, r3
   1497c:	bl	123f4 <memset@plt>
   14980:	mov	r0, #0
   14984:	pop	{fp, pc}
   14988:	movw	r0, #32564	; 0x7f34
   1498c:	movw	r1, #31512	; 0x7b18
   14990:	movw	r3, #33112	; 0x8158
   14994:	movw	r2, #994	; 0x3e2
   14998:	movt	r0, #1
   1499c:	b	149b4 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   149a0:	movw	r0, #33182	; 0x819e
   149a4:	movw	r1, #31512	; 0x7b18
   149a8:	movw	r3, #33112	; 0x8158
   149ac:	movw	r2, #995	; 0x3e3
   149b0:	movt	r0, #1
   149b4:	movt	r1, #1
   149b8:	movt	r3, #1
   149bc:	bl	12418 <__assert_fail@plt>

000149c0 <flatcc_builder_truncate_string@@Base>:
   149c0:	push	{fp, lr}
   149c4:	mov	fp, sp
   149c8:	mov	r2, r1
   149cc:	ldr	r1, [r0, #32]
   149d0:	ldrh	r3, [r1, #14]
   149d4:	cmp	r3, #6
   149d8:	bne	14a14 <flatcc_builder_truncate_string@@Base+0x54>
   149dc:	ldr	r3, [r1, #20]
   149e0:	cmp	r3, r2
   149e4:	bcc	14a2c <flatcc_builder_truncate_string@@Base+0x6c>
   149e8:	sub	r3, r3, r2
   149ec:	str	r3, [r1, #20]
   149f0:	ldr	r3, [r0, #20]
   149f4:	ldr	r1, [r0, #16]
   149f8:	sub	r3, r3, r2
   149fc:	str	r3, [r0, #20]
   14a00:	add	r0, r1, r3
   14a04:	mov	r1, #0
   14a08:	bl	123f4 <memset@plt>
   14a0c:	mov	r0, #0
   14a10:	pop	{fp, pc}
   14a14:	movw	r0, #32829	; 0x803d
   14a18:	movw	r1, #31512	; 0x7b18
   14a1c:	movw	r3, #33241	; 0x81d9
   14a20:	movw	r2, #1003	; 0x3eb
   14a24:	movt	r0, #1
   14a28:	b	14a40 <flatcc_builder_truncate_string@@Base+0x80>
   14a2c:	movw	r0, #33304	; 0x8218
   14a30:	movw	r1, #31512	; 0x7b18
   14a34:	movw	r3, #33241	; 0x81d9
   14a38:	mov	r2, #1004	; 0x3ec
   14a3c:	movt	r0, #1
   14a40:	movt	r1, #1
   14a44:	movt	r3, #1
   14a48:	bl	12418 <__assert_fail@plt>

00014a4c <flatcc_builder_start_vector@@Base>:
   14a4c:	push	{r4, r5, r6, r7, fp, lr}
   14a50:	add	fp, sp, #16
   14a54:	mov	r7, #4
   14a58:	cmp	r2, #4
   14a5c:	mov	r6, r1
   14a60:	mov	r5, r3
   14a64:	mov	r4, r0
   14a68:	movls	r2, r7
   14a6c:	mov	r1, r2
   14a70:	bl	13e78 <flatcc_builder_start_buffer@@Base+0xbc>
   14a74:	mov	r1, r0
   14a78:	mvn	r0, #0
   14a7c:	cmp	r1, #0
   14a80:	popne	{r4, r5, r6, r7, fp, pc}
   14a84:	ldr	r0, [r4, #32]
   14a88:	str	r6, [r0, #16]
   14a8c:	mov	r0, #0
   14a90:	ldr	r1, [r4, #32]
   14a94:	str	r0, [r1, #20]
   14a98:	ldr	r1, [r4, #32]
   14a9c:	str	r5, [r1, #24]
   14aa0:	ldr	r1, [r4, #32]
   14aa4:	strh	r7, [r1, #14]
   14aa8:	ldr	r2, [r4, #28]
   14aac:	ldr	r3, [r4, #60]	; 0x3c
   14ab0:	ldr	r7, [r4, #64]	; 0x40
   14ab4:	add	r3, r3, r2
   14ab8:	sub	r2, r7, r2
   14abc:	str	r3, [r4, #16]
   14ac0:	mvn	r3, #3
   14ac4:	cmn	r2, #4
   14ac8:	movcs	r2, r3
   14acc:	str	r2, [r4, #24]
   14ad0:	str	r3, [r1, #4]
   14ad4:	pop	{r4, r5, r6, r7, fp, pc}

00014ad8 <flatcc_builder_start_offset_vector@@Base>:
   14ad8:	push	{r4, r5, fp, lr}
   14adc:	add	fp, sp, #8
   14ae0:	mov	r1, #4
   14ae4:	mov	r4, r0
   14ae8:	mov	r5, #4
   14aec:	bl	13e78 <flatcc_builder_start_buffer@@Base+0xbc>
   14af0:	mov	r1, r0
   14af4:	mvn	r0, #0
   14af8:	cmp	r1, #0
   14afc:	popne	{r4, r5, fp, pc}
   14b00:	ldr	r0, [r4, #32]
   14b04:	mov	r2, #5
   14b08:	str	r5, [r0, #16]
   14b0c:	mov	r0, #0
   14b10:	ldr	r1, [r4, #32]
   14b14:	str	r0, [r1, #20]
   14b18:	ldr	r1, [r4, #32]
   14b1c:	strh	r2, [r1, #14]
   14b20:	ldr	r2, [r4, #28]
   14b24:	ldr	r3, [r4, #60]	; 0x3c
   14b28:	ldr	r5, [r4, #64]	; 0x40
   14b2c:	add	r3, r3, r2
   14b30:	sub	r2, r5, r2
   14b34:	str	r3, [r4, #16]
   14b38:	mvn	r3, #3
   14b3c:	cmn	r2, #4
   14b40:	movcs	r2, r3
   14b44:	str	r2, [r4, #24]
   14b48:	str	r3, [r1, #4]
   14b4c:	pop	{r4, r5, fp, pc}

00014b50 <flatcc_builder_create_offset_vector@@Base>:
   14b50:	push	{r4, r5, r6, sl, fp, lr}
   14b54:	add	fp, sp, #16
   14b58:	mov	r6, r2
   14b5c:	mov	r5, r1
   14b60:	mov	r4, r0
   14b64:	bl	14ad8 <flatcc_builder_start_offset_vector@@Base>
   14b68:	cmp	r0, #0
   14b6c:	beq	14b78 <flatcc_builder_create_offset_vector@@Base+0x28>
   14b70:	mov	r0, #0
   14b74:	pop	{r4, r5, r6, sl, fp, pc}
   14b78:	mov	r0, r4
   14b7c:	mov	r1, r6
   14b80:	bl	144ac <flatcc_builder_extend_offset_vector@@Base>
   14b84:	cmp	r0, #0
   14b88:	beq	14b70 <flatcc_builder_create_offset_vector@@Base+0x20>
   14b8c:	lsl	r2, r6, #2
   14b90:	mov	r1, r5
   14b94:	bl	12388 <memcpy@plt>
   14b98:	mov	r0, r4
   14b9c:	pop	{r4, r5, r6, sl, fp, lr}
   14ba0:	b	14ba4 <flatcc_builder_end_offset_vector@@Base>

00014ba4 <flatcc_builder_end_offset_vector@@Base>:
   14ba4:	push	{r4, r5, fp, lr}
   14ba8:	add	fp, sp, #8
   14bac:	mov	r4, r0
   14bb0:	ldr	r0, [r0, #32]
   14bb4:	ldrh	r1, [r0, #14]
   14bb8:	cmp	r1, #5
   14bbc:	bne	14c5c <flatcc_builder_end_offset_vector@@Base+0xb8>
   14bc0:	ldr	r2, [r0, #20]
   14bc4:	ldr	r1, [r4, #16]
   14bc8:	mov	r0, r4
   14bcc:	mov	r3, #0
   14bd0:	bl	15b84 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14bd4:	mov	r5, r0
   14bd8:	cmp	r0, #0
   14bdc:	beq	14c54 <flatcc_builder_end_offset_vector@@Base+0xb0>
   14be0:	ldr	r0, [r4, #16]
   14be4:	ldr	r2, [r4, #20]
   14be8:	mov	r1, #0
   14bec:	bl	123f4 <memset@plt>
   14bf0:	ldr	r0, [r4, #32]
   14bf4:	ldr	r1, [r4, #60]	; 0x3c
   14bf8:	ldr	ip, [r4, #64]	; 0x40
   14bfc:	ldr	r3, [r0, #8]
   14c00:	str	r3, [r4, #20]
   14c04:	ldr	r3, [r0]
   14c08:	str	r3, [r4, #28]
   14c0c:	add	r1, r1, r3
   14c10:	ldr	r2, [r0, #4]
   14c14:	str	r1, [r4, #16]
   14c18:	sub	r1, ip, r3
   14c1c:	cmp	r1, r2
   14c20:	movhi	r1, r2
   14c24:	str	r1, [r4, #24]
   14c28:	ldrh	r1, [r4, #130]	; 0x82
   14c2c:	ldrh	r2, [r4, #128]	; 0x80
   14c30:	cmp	r2, r1
   14c34:	strhcc	r1, [r4, #128]	; 0x80
   14c38:	ldrh	r1, [r0, #12]
   14c3c:	sub	r0, r0, #36	; 0x24
   14c40:	str	r0, [r4, #32]
   14c44:	strh	r1, [r4, #130]	; 0x82
   14c48:	ldr	r0, [r4, #156]	; 0x9c
   14c4c:	sub	r0, r0, #1
   14c50:	str	r0, [r4, #156]	; 0x9c
   14c54:	mov	r0, r5
   14c58:	pop	{r4, r5, fp, pc}
   14c5c:	movw	r0, #32564	; 0x7f34
   14c60:	movw	r1, #31512	; 0x7b18
   14c64:	movw	r3, #34147	; 0x8563
   14c68:	movw	r2, #1480	; 0x5c8
   14c6c:	movt	r0, #1
   14c70:	movt	r1, #1
   14c74:	movt	r3, #1
   14c78:	bl	12418 <__assert_fail@plt>

00014c7c <flatcc_builder_start_string@@Base>:
   14c7c:	push	{r4, r5, fp, lr}
   14c80:	add	fp, sp, #8
   14c84:	mov	r1, #1
   14c88:	mov	r4, r0
   14c8c:	mov	r5, #1
   14c90:	bl	13e78 <flatcc_builder_start_buffer@@Base+0xbc>
   14c94:	mov	r1, r0
   14c98:	mvn	r0, #0
   14c9c:	cmp	r1, #0
   14ca0:	popne	{r4, r5, fp, pc}
   14ca4:	ldr	r0, [r4, #32]
   14ca8:	mov	r2, #6
   14cac:	str	r5, [r0, #16]
   14cb0:	mov	r0, #0
   14cb4:	ldr	r1, [r4, #32]
   14cb8:	str	r0, [r1, #20]
   14cbc:	ldr	r1, [r4, #32]
   14cc0:	strh	r2, [r1, #14]
   14cc4:	ldr	r2, [r4, #28]
   14cc8:	ldr	r3, [r4, #60]	; 0x3c
   14ccc:	ldr	r5, [r4, #64]	; 0x40
   14cd0:	add	r3, r3, r2
   14cd4:	sub	r2, r5, r2
   14cd8:	str	r3, [r4, #16]
   14cdc:	mvn	r3, #3
   14ce0:	cmn	r2, #4
   14ce4:	movcs	r2, r3
   14ce8:	str	r2, [r4, #24]
   14cec:	str	r3, [r1, #4]
   14cf0:	pop	{r4, r5, fp, pc}

00014cf4 <flatcc_builder_reserve_table@@Base>:
   14cf4:	push	{r4, r5, r6, sl, fp, lr}
   14cf8:	add	fp, sp, #16
   14cfc:	sub	sp, sp, #8
   14d00:	cmn	r1, #1
   14d04:	ble	14dd8 <flatcc_builder_reserve_table@@Base+0xe4>
   14d08:	mov	r4, r0
   14d0c:	ldr	r0, [r0, #32]
   14d10:	mov	r5, r1
   14d14:	ldr	r1, [r4, #56]	; 0x38
   14d18:	ldrh	r2, [r0, #28]
   14d1c:	ldr	r0, [r0, #16]
   14d20:	add	r6, r0, r2, lsl #1
   14d24:	add	r0, r6, r5, lsl #1
   14d28:	add	r2, r0, #4
   14d2c:	cmp	r2, r1
   14d30:	bls	14d58 <flatcc_builder_reserve_table@@Base+0x64>
   14d34:	ldr	r0, [r4, #40]	; 0x28
   14d38:	ldr	ip, [r4, #48]	; 0x30
   14d3c:	mov	r3, #0
   14d40:	add	r1, r4, #52	; 0x34
   14d44:	str	r3, [sp]
   14d48:	mov	r3, #1
   14d4c:	blx	ip
   14d50:	cmp	r0, #0
   14d54:	bne	14df8 <flatcc_builder_reserve_table@@Base+0x104>
   14d58:	ldr	r0, [r4, #52]	; 0x34
   14d5c:	adds	r0, r0, r6
   14d60:	str	r0, [r4, #4]
   14d64:	beq	14dcc <flatcc_builder_reserve_table@@Base+0xd8>
   14d68:	add	r0, r0, #4
   14d6c:	lsl	r1, r5, #1
   14d70:	str	r0, [r4, #4]
   14d74:	ldr	r0, [r4, #32]
   14d78:	ldr	r3, [r4, #80]	; 0x50
   14d7c:	ldr	r5, [r0, #20]
   14d80:	orr	r0, r1, #1
   14d84:	add	r2, r5, r0
   14d88:	cmp	r2, r3
   14d8c:	bls	14db4 <flatcc_builder_reserve_table@@Base+0xc0>
   14d90:	ldr	r0, [r4, #40]	; 0x28
   14d94:	ldr	r6, [r4, #48]	; 0x30
   14d98:	mov	r3, #3
   14d9c:	add	r1, r4, #76	; 0x4c
   14da0:	str	r3, [sp]
   14da4:	mov	r3, #0
   14da8:	blx	r6
   14dac:	cmp	r0, #0
   14db0:	bne	14df8 <flatcc_builder_reserve_table@@Base+0x104>
   14db4:	ldr	r0, [r4, #76]	; 0x4c
   14db8:	adds	r0, r0, r5
   14dbc:	str	r0, [r4]
   14dc0:	mov	r0, #0
   14dc4:	mvneq	r0, #0
   14dc8:	b	14dd0 <flatcc_builder_reserve_table@@Base+0xdc>
   14dcc:	mvn	r0, #0
   14dd0:	sub	sp, fp, #16
   14dd4:	pop	{r4, r5, r6, sl, fp, pc}
   14dd8:	movw	r0, #33403	; 0x827b
   14ddc:	movw	r1, #31512	; 0x7b18
   14de0:	movw	r3, #33338	; 0x823a
   14de4:	movw	r2, #1065	; 0x429
   14de8:	movt	r0, #1
   14dec:	movt	r1, #1
   14df0:	movt	r3, #1
   14df4:	bl	12418 <__assert_fail@plt>
   14df8:	movw	r0, #36030	; 0x8cbe
   14dfc:	movw	r1, #31512	; 0x7b18
   14e00:	movw	r3, #35576	; 0x8af8
   14e04:	mov	r2, #308	; 0x134
   14e08:	movt	r0, #1
   14e0c:	movt	r1, #1
   14e10:	movt	r3, #1
   14e14:	bl	12418 <__assert_fail@plt>

00014e18 <flatcc_builder_start_table@@Base>:
   14e18:	push	{r4, r5, r6, r7, fp, lr}
   14e1c:	add	fp, sp, #16
   14e20:	sub	sp, sp, #8
   14e24:	mov	r6, r1
   14e28:	mov	r1, #4
   14e2c:	mov	r4, r0
   14e30:	bl	13e78 <flatcc_builder_start_buffer@@Base+0xbc>
   14e34:	mvn	r5, #0
   14e38:	cmp	r0, #0
   14e3c:	beq	14e4c <flatcc_builder_start_table@@Base+0x34>
   14e40:	mov	r0, r5
   14e44:	sub	sp, fp, #16
   14e48:	pop	{r4, r5, r6, r7, fp, pc}
   14e4c:	mov	r1, r4
   14e50:	ldr	r2, [r4, #4]
   14e54:	ldr	r3, [r4, #32]
   14e58:	ldr	r0, [r1, #52]!	; 0x34
   14e5c:	sub	r0, r2, r0
   14e60:	str	r0, [r3, #16]
   14e64:	ldr	r0, [r4]
   14e68:	ldr	r3, [r4, #76]	; 0x4c
   14e6c:	ldr	r2, [r4, #32]
   14e70:	sub	r0, r0, r3
   14e74:	mov	r3, #0
   14e78:	str	r0, [r2, #20]
   14e7c:	ldr	r0, [r4, #12]
   14e80:	ldr	r2, [r4, #32]
   14e84:	str	r0, [r2, #24]
   14e88:	ldr	r0, [r4, #32]
   14e8c:	ldrh	r2, [r4, #8]
   14e90:	strh	r2, [r0, #28]
   14e94:	movw	r0, #15186	; 0x3b52
   14e98:	strh	r3, [r4, #8]
   14e9c:	mov	r2, #3
   14ea0:	movt	r0, #12137	; 0x2f69
   14ea4:	str	r0, [r4, #12]
   14ea8:	ldr	r0, [r4, #32]
   14eac:	strh	r2, [r0, #14]
   14eb0:	ldrh	r2, [r0, #28]
   14eb4:	ldr	r0, [r0, #16]
   14eb8:	add	r7, r0, r2, lsl #1
   14ebc:	add	r0, r7, r6, lsl #1
   14ec0:	add	r2, r0, #4
   14ec4:	ldr	r0, [r4, #56]	; 0x38
   14ec8:	cmp	r2, r0
   14ecc:	bls	14eec <flatcc_builder_start_table@@Base+0xd4>
   14ed0:	ldr	r0, [r4, #40]	; 0x28
   14ed4:	ldr	ip, [r4, #48]	; 0x30
   14ed8:	str	r3, [sp]
   14edc:	mov	r3, #1
   14ee0:	blx	ip
   14ee4:	cmp	r0, #0
   14ee8:	bne	14f90 <flatcc_builder_start_table@@Base+0x178>
   14eec:	ldr	r0, [r4, #52]	; 0x34
   14ef0:	adds	r0, r0, r7
   14ef4:	str	r0, [r4, #4]
   14ef8:	beq	14e40 <flatcc_builder_start_table@@Base+0x28>
   14efc:	add	r0, r0, #4
   14f00:	lsl	r1, r6, #1
   14f04:	str	r0, [r4, #4]
   14f08:	ldr	r0, [r4, #32]
   14f0c:	ldr	r3, [r4, #80]	; 0x50
   14f10:	ldr	r6, [r0, #20]
   14f14:	orr	r0, r1, #1
   14f18:	add	r2, r6, r0
   14f1c:	cmp	r2, r3
   14f20:	bls	14f48 <flatcc_builder_start_table@@Base+0x130>
   14f24:	ldr	r0, [r4, #40]	; 0x28
   14f28:	ldr	r7, [r4, #48]	; 0x30
   14f2c:	mov	r3, #3
   14f30:	add	r1, r4, #76	; 0x4c
   14f34:	str	r3, [sp]
   14f38:	mov	r3, #0
   14f3c:	blx	r7
   14f40:	cmp	r0, #0
   14f44:	bne	14f90 <flatcc_builder_start_table@@Base+0x178>
   14f48:	ldr	r0, [r4, #76]	; 0x4c
   14f4c:	adds	r0, r0, r6
   14f50:	str	r0, [r4]
   14f54:	beq	14e40 <flatcc_builder_start_table@@Base+0x28>
   14f58:	ldr	r0, [r4, #28]
   14f5c:	ldr	r2, [r4, #60]	; 0x3c
   14f60:	ldr	r3, [r4, #64]	; 0x40
   14f64:	ldr	r1, [r4, #32]
   14f68:	mov	r5, #0
   14f6c:	add	r2, r2, r0
   14f70:	sub	r0, r3, r0
   14f74:	str	r2, [r4, #16]
   14f78:	movw	r2, #65532	; 0xfffc
   14f7c:	cmp	r0, r2
   14f80:	movcs	r0, r2
   14f84:	str	r0, [r4, #24]
   14f88:	str	r2, [r1, #4]
   14f8c:	b	14e40 <flatcc_builder_start_table@@Base+0x28>
   14f90:	movw	r0, #36030	; 0x8cbe
   14f94:	movw	r1, #31512	; 0x7b18
   14f98:	movw	r3, #35576	; 0x8af8
   14f9c:	mov	r2, #308	; 0x134
   14fa0:	movt	r0, #1
   14fa4:	movt	r1, #1
   14fa8:	movt	r3, #1
   14fac:	bl	12418 <__assert_fail@plt>

00014fb0 <flatcc_builder_create_vtable@@Base>:
   14fb0:	push	{r4, r5, fp, lr}
   14fb4:	add	fp, sp, #8
   14fb8:	sub	sp, sp, #80	; 0x50
   14fbc:	mov	r3, r2
   14fc0:	mov	r2, #0
   14fc4:	mov	r4, r0
   14fc8:	cmp	r3, #0
   14fcc:	str	r2, [sp, #12]
   14fd0:	str	r2, [sp, #8]
   14fd4:	movne	r2, #1
   14fd8:	strne	r3, [sp, #20]
   14fdc:	strne	r1, [sp, #16]
   14fe0:	strne	r3, [sp, #8]
   14fe4:	strne	r2, [sp, #12]
   14fe8:	ldr	r0, [r4, #152]	; 0x98
   14fec:	cmp	r0, #0
   14ff0:	bne	15000 <flatcc_builder_create_vtable@@Base+0x50>
   14ff4:	ldr	r0, [r4, #180]	; 0xb4
   14ff8:	cmp	r0, #0
   14ffc:	beq	15054 <flatcc_builder_create_vtable@@Base+0xa4>
   15000:	cmp	r3, #0
   15004:	beq	15098 <flatcc_builder_create_vtable@@Base+0xe8>
   15008:	ldr	r0, [r4, #136]	; 0x88
   1500c:	ldr	ip, [r4, #44]	; 0x2c
   15010:	add	r1, sp, #8
   15014:	add	r1, r1, #8
   15018:	sub	r5, r0, r3
   1501c:	ldr	r0, [r4, #36]	; 0x24
   15020:	str	r3, [sp]
   15024:	mov	r3, r5
   15028:	blx	ip
   1502c:	cmp	r0, #0
   15030:	bne	150ac <flatcc_builder_create_vtable@@Base+0xfc>
   15034:	cmp	r5, #0
   15038:	str	r5, [r4, #136]	; 0x88
   1503c:	beq	1504c <flatcc_builder_create_vtable@@Base+0x9c>
   15040:	add	r1, r5, #1
   15044:	mov	r0, r1
   15048:	b	15090 <flatcc_builder_create_vtable@@Base+0xe0>
   1504c:	mov	r0, #0
   15050:	b	15090 <flatcc_builder_create_vtable@@Base+0xe0>
   15054:	ldr	r5, [r4, #140]	; 0x8c
   15058:	ldr	r0, [r4, #36]	; 0x24
   1505c:	ldr	ip, [r4, #44]	; 0x2c
   15060:	add	r1, r5, r3
   15064:	str	r1, [r4, #140]	; 0x8c
   15068:	add	r1, sp, #8
   1506c:	str	r3, [sp]
   15070:	mov	r3, r5
   15074:	add	r1, r1, #8
   15078:	blx	ip
   1507c:	cmp	r0, #0
   15080:	bne	150cc <flatcc_builder_create_vtable@@Base+0x11c>
   15084:	adds	r1, r5, #1
   15088:	mov	r0, #0
   1508c:	movcc	r0, r1
   15090:	sub	sp, fp, #8
   15094:	pop	{r4, r5, fp, pc}
   15098:	movw	r0, #36030	; 0x8cbe
   1509c:	movw	r1, #31512	; 0x7b18
   150a0:	movw	r3, #35709	; 0x8b7d
   150a4:	movw	r2, #647	; 0x287
   150a8:	b	150bc <flatcc_builder_create_vtable@@Base+0x10c>
   150ac:	movw	r0, #36030	; 0x8cbe
   150b0:	movw	r1, #31512	; 0x7b18
   150b4:	movw	r3, #35709	; 0x8b7d
   150b8:	movw	r2, #651	; 0x28b
   150bc:	movt	r0, #1
   150c0:	movt	r1, #1
   150c4:	movt	r3, #1
   150c8:	bl	12418 <__assert_fail@plt>
   150cc:	movw	r0, #36030	; 0x8cbe
   150d0:	movw	r1, #31512	; 0x7b18
   150d4:	movw	r3, #35897	; 0x8c39
   150d8:	movw	r2, #677	; 0x2a5
   150dc:	movt	r0, #1
   150e0:	movt	r1, #1
   150e4:	movt	r3, #1
   150e8:	bl	12418 <__assert_fail@plt>

000150ec <flatcc_builder_create_cached_vtable@@Base>:
   150ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f0:	add	fp, sp, #28
   150f4:	sub	sp, sp, #20
   150f8:	mov	sl, r0
   150fc:	ldr	r0, [r0, #116]	; 0x74
   15100:	mov	r8, r3
   15104:	mov	r5, r2
   15108:	str	r1, [sp, #16]
   1510c:	cmp	r0, #0
   15110:	beq	151b4 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15114:	ldr	r1, [sl, #92]	; 0x5c
   15118:	rsb	r0, r0, #32
   1511c:	lsr	r0, r8, r0
   15120:	add	r6, r1, r0, lsl #2
   15124:	cmp	r6, #0
   15128:	beq	15278 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   1512c:	ldr	r7, [r6]
   15130:	str	r6, [sp, #12]
   15134:	cmp	r7, #0
   15138:	beq	15280 <flatcc_builder_create_cached_vtable@@Base+0x194>
   1513c:	ldr	r4, [sl, #68]	; 0x44
   15140:	ldr	r8, [sl, #100]	; 0x64
   15144:	mov	r0, #0
   15148:	str	r0, [sp, #8]
   1514c:	add	r9, r8, r7
   15150:	mov	r1, r4
   15154:	ldr	r0, [r9, #8]
   15158:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   1515c:	cmp	r0, r5
   15160:	bne	15178 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15164:	ldr	r0, [sp, #16]
   15168:	mov	r2, r5
   1516c:	bl	123d0 <bcmp@plt>
   15170:	cmp	r0, #0
   15174:	beq	1518c <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15178:	ldr	r7, [r9, #12]!
   1517c:	mov	r6, r9
   15180:	cmp	r7, #0
   15184:	bne	1514c <flatcc_builder_create_cached_vtable@@Base+0x60>
   15188:	b	15270 <flatcc_builder_create_cached_vtable@@Base+0x184>
   1518c:	ldr	r0, [sl, #152]	; 0x98
   15190:	ldr	r1, [r9, #4]
   15194:	cmp	r1, r0
   15198:	beq	153e4 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   1519c:	mov	r6, r9
   151a0:	mov	r0, r9
   151a4:	ldr	r7, [r6, #12]!
   151a8:	cmp	r7, #0
   151ac:	bne	15148 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   151b0:	b	15284 <flatcc_builder_create_cached_vtable@@Base+0x198>
   151b4:	ldr	r0, [sl, #124]	; 0x7c
   151b8:	cmp	r0, #0
   151bc:	bne	15430 <flatcc_builder_create_cached_vtable@@Base+0x344>
   151c0:	ldr	r0, [sl, #104]	; 0x68
   151c4:	add	r7, sl, #100	; 0x64
   151c8:	cmp	r0, #15
   151cc:	bhi	151f8 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   151d0:	ldr	r0, [sl, #40]	; 0x28
   151d4:	ldr	r6, [sl, #48]	; 0x30
   151d8:	mov	r1, #6
   151dc:	mov	r2, #16
   151e0:	mov	r3, #0
   151e4:	str	r1, [sp]
   151e8:	mov	r1, r7
   151ec:	blx	r6
   151f0:	cmp	r0, #0
   151f4:	bne	15410 <flatcc_builder_create_cached_vtable@@Base+0x324>
   151f8:	ldr	r0, [r7]
   151fc:	mov	r7, #0
   15200:	cmp	r0, #0
   15204:	beq	15324 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15208:	mov	r0, #16
   1520c:	mov	r2, #5
   15210:	add	r1, sl, #92	; 0x5c
   15214:	mov	r3, #1
   15218:	mov	r4, #256	; 0x100
   1521c:	str	r0, [sl, #124]	; 0x7c
   15220:	ldr	r0, [sl, #40]	; 0x28
   15224:	ldr	r6, [sl, #48]	; 0x30
   15228:	str	r2, [sp]
   1522c:	mov	r2, #256	; 0x100
   15230:	blx	r6
   15234:	cmp	r0, #0
   15238:	bne	15324 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1523c:	ldr	r0, [sl, #96]	; 0x60
   15240:	mov	r1, r4
   15244:	lsl	r4, r4, #1
   15248:	cmp	r0, r1, lsl #1
   1524c:	bcs	15240 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15250:	lsr	r1, r1, #2
   15254:	mvn	r0, #0
   15258:	mov	r2, #1
   1525c:	add	r0, r0, #1
   15260:	cmp	r1, r2, lsl r0
   15264:	bhi	1525c <flatcc_builder_create_cached_vtable@@Base+0x170>
   15268:	str	r0, [sl, #116]	; 0x74
   1526c:	b	15114 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15270:	ldr	r9, [sp, #8]
   15274:	b	15284 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15278:	mov	r7, #0
   1527c:	b	15324 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15280:	mov	r9, #0
   15284:	ldr	r4, [sl, #124]	; 0x7c
   15288:	ldr	r0, [sl, #104]	; 0x68
   1528c:	add	r7, sl, #100	; 0x64
   15290:	add	r2, r4, #16
   15294:	cmp	r2, r0
   15298:	bls	152c0 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   1529c:	ldr	r0, [sl, #40]	; 0x28
   152a0:	ldr	r6, [sl, #48]	; 0x30
   152a4:	mov	r1, #6
   152a8:	mov	r3, #0
   152ac:	str	r1, [sp]
   152b0:	mov	r1, r7
   152b4:	blx	r6
   152b8:	cmp	r0, #0
   152bc:	bne	15410 <flatcc_builder_create_cached_vtable@@Base+0x324>
   152c0:	ldr	r0, [r7]
   152c4:	mov	r7, #0
   152c8:	adds	r4, r0, r4
   152cc:	beq	15324 <flatcc_builder_create_cached_vtable@@Base+0x238>
   152d0:	ldr	r0, [sl, #124]	; 0x7c
   152d4:	ldr	r1, [sl, #152]	; 0x98
   152d8:	add	r2, r0, #16
   152dc:	str	r2, [sl, #124]	; 0x7c
   152e0:	ldr	r2, [sp, #12]
   152e4:	str	r1, [r4, #4]
   152e8:	ldr	r1, [r2]
   152ec:	str	r1, [r4, #12]
   152f0:	ldr	r1, [sp, #16]
   152f4:	str	r0, [r2]
   152f8:	mov	r0, sl
   152fc:	mov	r2, r5
   15300:	bl	14fb0 <flatcc_builder_create_vtable@@Base>
   15304:	cmp	r0, #0
   15308:	str	r0, [r4]
   1530c:	beq	15324 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15310:	cmp	r9, #0
   15314:	beq	15330 <flatcc_builder_create_cached_vtable@@Base+0x244>
   15318:	ldr	r0, [r9, #8]
   1531c:	str	r0, [r4, #8]
   15320:	ldr	r7, [r4]
   15324:	mov	r0, r7
   15328:	sub	sp, fp, #28
   1532c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15330:	ldr	r6, [sl, #120]	; 0x78
   15334:	ldr	r0, [sl, #172]	; 0xac
   15338:	add	r2, r6, r5
   1533c:	cmp	r0, #0
   15340:	beq	1537c <flatcc_builder_create_cached_vtable@@Base+0x290>
   15344:	cmp	r0, r2
   15348:	bcs	1537c <flatcc_builder_create_cached_vtable@@Base+0x290>
   1534c:	ldr	r0, [sl, #116]	; 0x74
   15350:	cmp	r0, #0
   15354:	beq	15320 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15358:	ldr	r0, [sl, #92]	; 0x5c
   1535c:	ldr	r2, [sl, #96]	; 0x60
   15360:	mov	r1, #0
   15364:	mov	r5, #0
   15368:	bl	123f4 <memset@plt>
   1536c:	mov	r0, #16
   15370:	str	r5, [sl, #120]	; 0x78
   15374:	str	r0, [sl, #124]	; 0x7c
   15378:	b	15320 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1537c:	ldr	r0, [sl, #72]	; 0x48
   15380:	add	r7, sl, #68	; 0x44
   15384:	cmp	r2, r0
   15388:	bls	153b0 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   1538c:	ldr	r0, [sl, #40]	; 0x28
   15390:	ldr	ip, [sl, #48]	; 0x30
   15394:	mov	r1, #2
   15398:	mov	r3, #0
   1539c:	str	r1, [sp]
   153a0:	mov	r1, r7
   153a4:	blx	ip
   153a8:	cmp	r0, #0
   153ac:	bne	15410 <flatcc_builder_create_cached_vtable@@Base+0x324>
   153b0:	ldr	r0, [r7]
   153b4:	adds	r0, r0, r6
   153b8:	beq	153dc <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   153bc:	ldr	r1, [sl, #120]	; 0x78
   153c0:	mov	r2, r5
   153c4:	str	r1, [r4, #8]
   153c8:	add	r1, r1, r5
   153cc:	str	r1, [sl, #120]	; 0x78
   153d0:	ldr	r1, [sp, #16]
   153d4:	bl	12388 <memcpy@plt>
   153d8:	b	15320 <flatcc_builder_create_cached_vtable@@Base+0x234>
   153dc:	mvn	r7, #0
   153e0:	b	15324 <flatcc_builder_create_cached_vtable@@Base+0x238>
   153e4:	ldr	r0, [sp, #12]
   153e8:	cmp	r6, r0
   153ec:	beq	15408 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   153f0:	mov	r1, r0
   153f4:	ldr	r0, [r9, #12]
   153f8:	str	r0, [r6]
   153fc:	ldr	r0, [r1]
   15400:	str	r0, [r9, #12]
   15404:	str	r7, [r1]
   15408:	ldr	r7, [r9]
   1540c:	b	15324 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15410:	movw	r0, #36030	; 0x8cbe
   15414:	movw	r1, #31512	; 0x7b18
   15418:	movw	r3, #35576	; 0x8af8
   1541c:	mov	r2, #308	; 0x134
   15420:	movt	r0, #1
   15424:	movt	r1, #1
   15428:	movt	r3, #1
   1542c:	bl	12418 <__assert_fail@plt>
   15430:	movw	r0, #35970	; 0x8c82
   15434:	movw	r1, #31512	; 0x7b18
   15438:	movw	r3, #35985	; 0x8c91
   1543c:	movw	r2, #342	; 0x156
   15440:	movt	r0, #1
   15444:	movt	r1, #1
   15448:	movt	r3, #1
   1544c:	bl	12418 <__assert_fail@plt>

00015450 <flatcc_builder_create_table@@Base>:
   15450:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15454:	add	fp, sp, #24
   15458:	sub	sp, sp, #80	; 0x50
   1545c:	ldr	r5, [fp, #12]
   15460:	cmn	r5, #1
   15464:	ble	155b0 <flatcc_builder_create_table@@Base+0x160>
   15468:	ldr	ip, [fp, #16]
   1546c:	tst	ip, #1
   15470:	beq	155c8 <flatcc_builder_create_table@@Base+0x178>
   15474:	mov	r8, r0
   15478:	ldrh	r0, [r0, #128]	; 0x80
   1547c:	cmp	r3, #4
   15480:	movls	r3, #4
   15484:	cmp	r0, r3
   15488:	strhcc	r3, [r8, #128]	; 0x80
   1548c:	cmp	r5, #1
   15490:	ldr	r0, [r8, #136]	; 0x88
   15494:	sub	r4, r0, r2
   15498:	sub	r0, r3, #1
   1549c:	and	r0, r4, r0
   154a0:	sub	r4, r4, #4
   154a4:	add	r3, ip, r0
   154a8:	sub	r3, r4, r3
   154ac:	add	r3, r3, #1
   154b0:	str	r3, [fp, #-28]	; 0xffffffe4
   154b4:	blt	154e4 <flatcc_builder_create_table@@Base+0x94>
   154b8:	ldr	r3, [fp, #8]
   154bc:	sub	ip, r4, r0
   154c0:	mvn	r4, #3
   154c4:	sub	r4, r4, ip
   154c8:	ldrh	r6, [r3], #2
   154cc:	subs	r5, r5, #1
   154d0:	ldr	r7, [r6, r1]
   154d4:	add	r7, r4, r7
   154d8:	sub	r7, r7, r6
   154dc:	str	r7, [r6, r1]
   154e0:	bne	154c8 <flatcc_builder_create_table@@Base+0x78>
   154e4:	mov	r4, #4
   154e8:	sub	r3, fp, #28
   154ec:	cmp	r2, #0
   154f0:	str	r4, [sp, #16]
   154f4:	str	r3, [sp, #12]
   154f8:	mov	r3, #1
   154fc:	str	r4, [sp, #4]
   15500:	addne	r4, r2, #4
   15504:	str	r3, [sp, #8]
   15508:	movne	r3, #2
   1550c:	strne	r2, [sp, #24]
   15510:	strne	r1, [sp, #20]
   15514:	strne	r3, [sp, #8]
   15518:	strne	r4, [sp, #4]
   1551c:	cmp	r0, #0
   15520:	beq	1554c <flatcc_builder_create_table@@Base+0xfc>
   15524:	add	r1, sp, #4
   15528:	movw	r2, #30982	; 0x7906
   1552c:	add	r4, r4, r0
   15530:	add	r1, r1, r3, lsl #3
   15534:	movt	r2, #1
   15538:	add	r3, r3, #1
   1553c:	str	r4, [sp, #4]
   15540:	str	r2, [r1, #8]
   15544:	str	r0, [r1, #12]
   15548:	str	r3, [sp, #8]
   1554c:	cmp	r4, #0
   15550:	ble	155e8 <flatcc_builder_create_table@@Base+0x198>
   15554:	ldr	r0, [r8, #136]	; 0x88
   15558:	ldr	r7, [r8, #44]	; 0x2c
   1555c:	add	r1, sp, #4
   15560:	mov	r2, r3
   15564:	add	r1, r1, #8
   15568:	sub	r5, r0, r4
   1556c:	ldr	r0, [r8, #36]	; 0x24
   15570:	str	r4, [sp]
   15574:	mov	r3, r5
   15578:	blx	r7
   1557c:	cmp	r0, #0
   15580:	streq	r5, [r8, #136]	; 0x88
   15584:	moveq	r0, r5
   15588:	subeq	sp, fp, #24
   1558c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15590:	movw	r0, #36030	; 0x8cbe
   15594:	movw	r1, #31512	; 0x7b18
   15598:	movw	r3, #35709	; 0x8b7d
   1559c:	movw	r2, #651	; 0x28b
   155a0:	movt	r0, #1
   155a4:	movt	r1, #1
   155a8:	movt	r3, #1
   155ac:	bl	12418 <__assert_fail@plt>
   155b0:	movw	r0, #33396	; 0x8274
   155b4:	movw	r1, #31512	; 0x7b18
   155b8:	movw	r3, #33414	; 0x8286
   155bc:	movw	r2, #1237	; 0x4d5
   155c0:	movt	r0, #1
   155c4:	b	155dc <flatcc_builder_create_table@@Base+0x18c>
   155c8:	movw	r0, #33570	; 0x8322
   155cc:	movw	r1, #31512	; 0x7b18
   155d0:	movw	r3, #33414	; 0x8286
   155d4:	movw	r2, #1243	; 0x4db
   155d8:	movt	r0, #1
   155dc:	movt	r1, #1
   155e0:	movt	r3, #1
   155e4:	bl	12418 <__assert_fail@plt>
   155e8:	movw	r0, #36030	; 0x8cbe
   155ec:	movw	r1, #31512	; 0x7b18
   155f0:	movw	r3, #35709	; 0x8b7d
   155f4:	movw	r2, #647	; 0x287
   155f8:	b	155a0 <flatcc_builder_create_table@@Base+0x150>

000155fc <flatcc_builder_check_required_field@@Base>:
   155fc:	push	{fp, lr}
   15600:	mov	fp, sp
   15604:	ldr	r2, [r0, #32]
   15608:	ldrh	r2, [r2, #14]
   1560c:	cmp	r2, #3
   15610:	bne	15640 <flatcc_builder_check_required_field@@Base+0x44>
   15614:	ldrh	r3, [r0, #8]
   15618:	mov	r2, #0
   1561c:	cmp	r3, r1
   15620:	bls	15638 <flatcc_builder_check_required_field@@Base+0x3c>
   15624:	ldr	r0, [r0, #4]
   15628:	add	r0, r0, r1, lsl #1
   1562c:	ldrh	r2, [r0]
   15630:	cmp	r2, #0
   15634:	movwne	r2, #1
   15638:	mov	r0, r2
   1563c:	pop	{fp, pc}
   15640:	movw	r0, #33581	; 0x832d
   15644:	movw	r1, #31512	; 0x7b18
   15648:	movw	r3, #33624	; 0x8358
   1564c:	movw	r2, #1272	; 0x4f8
   15650:	movt	r0, #1
   15654:	movt	r1, #1
   15658:	movt	r3, #1
   1565c:	bl	12418 <__assert_fail@plt>

00015660 <flatcc_builder_check_union_field@@Base>:
   15660:	push	{fp, lr}
   15664:	mov	fp, sp
   15668:	mov	r2, r0
   1566c:	ldr	r0, [r0, #32]
   15670:	ldrh	r0, [r0, #14]
   15674:	cmp	r0, #3
   15678:	bne	156d8 <flatcc_builder_check_union_field@@Base+0x78>
   1567c:	mov	r0, #0
   15680:	cmp	r1, #0
   15684:	beq	156c4 <flatcc_builder_check_union_field@@Base+0x64>
   15688:	ldrh	r3, [r2, #8]
   1568c:	cmp	r3, r1
   15690:	popls	{fp, pc}
   15694:	ldr	r0, [r2, #4]
   15698:	add	r0, r0, r1, lsl #1
   1569c:	ldrh	r1, [r0, #-2]
   156a0:	cmp	r1, #0
   156a4:	beq	156c8 <flatcc_builder_check_union_field@@Base+0x68>
   156a8:	ldr	r2, [r2, #16]
   156ac:	ldrh	r0, [r0]
   156b0:	ldrb	r1, [r2, r1]
   156b4:	cmp	r1, #0
   156b8:	beq	156cc <flatcc_builder_check_union_field@@Base+0x6c>
   156bc:	cmp	r0, #0
   156c0:	movwne	r0, #1
   156c4:	pop	{fp, pc}
   156c8:	ldrh	r0, [r0]
   156cc:	clz	r0, r0
   156d0:	lsr	r0, r0, #5
   156d4:	pop	{fp, pc}
   156d8:	movw	r0, #33581	; 0x832d
   156dc:	movw	r1, #31512	; 0x7b18
   156e0:	movw	r3, #33707	; 0x83ab
   156e4:	movw	r2, #1279	; 0x4ff
   156e8:	movt	r0, #1
   156ec:	movt	r1, #1
   156f0:	movt	r3, #1
   156f4:	bl	12418 <__assert_fail@plt>

000156f8 <flatcc_builder_check_required@@Base>:
   156f8:	push	{fp, lr}
   156fc:	mov	fp, sp
   15700:	mov	r3, r0
   15704:	ldr	r0, [r0, #32]
   15708:	ldrh	r0, [r0, #14]
   1570c:	cmp	r0, #3
   15710:	bne	15758 <flatcc_builder_check_required@@Base+0x60>
   15714:	ldrh	ip, [r3, #8]
   15718:	mov	r0, #0
   1571c:	cmp	ip, r2
   15720:	poplt	{fp, pc}
   15724:	cmp	r2, #1
   15728:	blt	15750 <flatcc_builder_check_required@@Base+0x58>
   1572c:	ldr	ip, [r3, #4]
   15730:	ldrh	r3, [r1]
   15734:	add	r3, ip, r3, lsl #1
   15738:	ldrh	r3, [r3]
   1573c:	cmp	r3, #0
   15740:	beq	15754 <flatcc_builder_check_required@@Base+0x5c>
   15744:	add	r1, r1, #2
   15748:	subs	r2, r2, #1
   1574c:	bne	15730 <flatcc_builder_check_required@@Base+0x38>
   15750:	mov	r0, #1
   15754:	pop	{fp, pc}
   15758:	movw	r0, #33581	; 0x832d
   1575c:	movw	r1, #31512	; 0x7b18
   15760:	movw	r3, #33787	; 0x83fb
   15764:	movw	r2, #1297	; 0x511
   15768:	movt	r0, #1
   1576c:	movt	r1, #1
   15770:	movt	r3, #1
   15774:	bl	12418 <__assert_fail@plt>

00015778 <flatcc_builder_end_table@@Base>:
   15778:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1577c:	add	fp, sp, #24
   15780:	sub	sp, sp, #16
   15784:	mov	r4, r0
   15788:	ldr	r0, [r0, #32]
   1578c:	ldrh	r0, [r0, #14]
   15790:	cmp	r0, #3
   15794:	bne	15910 <flatcc_builder_end_table@@Base+0x198>
   15798:	ldrh	r0, [r4, #8]
   1579c:	ldr	r5, [r4, #4]
   157a0:	mov	r1, #4
   157a4:	movw	r2, #31153	; 0x79b1
   157a8:	movt	r2, #40503	; 0x9e37
   157ac:	add	r0, r1, r0, lsl #1
   157b0:	strh	r0, [r5, #-4]!
   157b4:	ldrh	r1, [r4, #20]
   157b8:	uxth	r6, r0
   157bc:	add	r1, r1, #4
   157c0:	strh	r1, [r5, #2]
   157c4:	uxth	r1, r1
   157c8:	ldr	r0, [r4, #12]
   157cc:	eor	r0, r0, r6
   157d0:	mul	r0, r0, r2
   157d4:	eor	r0, r0, r1
   157d8:	mov	r1, r5
   157dc:	mul	r3, r0, r2
   157e0:	mov	r0, r4
   157e4:	mov	r2, r6
   157e8:	str	r3, [r4, #12]
   157ec:	bl	150ec <flatcc_builder_create_cached_vtable@@Base>
   157f0:	cmp	r0, #0
   157f4:	beq	15900 <flatcc_builder_end_table@@Base+0x188>
   157f8:	mov	r7, r0
   157fc:	mov	r0, r5
   15800:	mov	r1, #0
   15804:	mov	r2, r6
   15808:	mov	r8, #0
   1580c:	bl	123f4 <memset@plt>
   15810:	ldr	r5, [r4, #32]
   15814:	ldr	r0, [r4, #76]	; 0x4c
   15818:	ldr	r6, [r4]
   1581c:	ldrh	r3, [r4, #130]	; 0x82
   15820:	ldr	r1, [r4, #16]
   15824:	ldr	r2, [r4, #20]
   15828:	ldr	r5, [r5, #20]
   1582c:	add	r0, r0, r5
   15830:	sub	r6, r6, r0
   15834:	asr	r6, r6, #1
   15838:	stm	sp, {r0, r6, r7}
   1583c:	mov	r0, r4
   15840:	bl	15450 <flatcc_builder_create_table@@Base>
   15844:	cmp	r0, #0
   15848:	beq	15904 <flatcc_builder_end_table@@Base+0x18c>
   1584c:	ldr	r1, [r4, #32]
   15850:	mov	r5, r0
   15854:	ldr	r0, [r4, #16]
   15858:	ldr	r2, [r4, #20]
   1585c:	ldr	r3, [r4, #52]	; 0x34
   15860:	ldr	r7, [r1, #24]
   15864:	str	r7, [r4, #12]
   15868:	ldrh	r7, [r1, #28]
   1586c:	strh	r7, [r4, #8]
   15870:	ldr	r7, [r1, #16]
   15874:	add	r3, r3, r7
   15878:	str	r3, [r4, #4]
   1587c:	ldr	r3, [r4, #76]	; 0x4c
   15880:	ldr	r1, [r1, #20]
   15884:	add	r1, r3, r1
   15888:	str	r1, [r4]
   1588c:	mov	r1, #0
   15890:	bl	123f4 <memset@plt>
   15894:	ldr	r0, [r4, #32]
   15898:	ldr	r1, [r4, #60]	; 0x3c
   1589c:	ldr	r2, [r4, #64]	; 0x40
   158a0:	mov	r8, r5
   158a4:	ldr	r3, [r0, #8]
   158a8:	str	r3, [r4, #20]
   158ac:	ldr	r3, [r0]
   158b0:	str	r3, [r4, #28]
   158b4:	add	r1, r1, r3
   158b8:	ldr	r7, [r0, #4]
   158bc:	str	r1, [r4, #16]
   158c0:	sub	r1, r2, r3
   158c4:	cmp	r1, r7
   158c8:	movhi	r1, r7
   158cc:	str	r1, [r4, #24]
   158d0:	ldrh	r1, [r4, #130]	; 0x82
   158d4:	ldrh	r2, [r4, #128]	; 0x80
   158d8:	cmp	r2, r1
   158dc:	strhcc	r1, [r4, #128]	; 0x80
   158e0:	ldrh	r1, [r0, #12]
   158e4:	sub	r0, r0, #36	; 0x24
   158e8:	str	r0, [r4, #32]
   158ec:	strh	r1, [r4, #130]	; 0x82
   158f0:	ldr	r0, [r4, #156]	; 0x9c
   158f4:	sub	r0, r0, #1
   158f8:	str	r0, [r4, #156]	; 0x9c
   158fc:	b	15904 <flatcc_builder_end_table@@Base+0x18c>
   15900:	mov	r8, #0
   15904:	mov	r0, r8
   15908:	sub	sp, fp, #24
   1590c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15910:	movw	r0, #33581	; 0x832d
   15914:	movw	r1, #31512	; 0x7b18
   15918:	movw	r3, #33877	; 0x8455
   1591c:	movw	r2, #1317	; 0x525
   15920:	movt	r0, #1
   15924:	movt	r1, #1
   15928:	movt	r3, #1
   1592c:	bl	12418 <__assert_fail@plt>

00015930 <flatcc_builder_create_vector@@Base>:
   15930:	push	{r4, r5, r6, r7, fp, lr}
   15934:	add	fp, sp, #16
   15938:	sub	sp, sp, #80	; 0x50
   1593c:	mov	r7, r0
   15940:	ldr	r0, [fp, #12]
   15944:	cmp	r2, r0
   15948:	bhi	15a44 <flatcc_builder_create_vector@@Base+0x114>
   1594c:	ldr	r0, [fp, #8]
   15950:	mov	r4, r2
   15954:	ldrh	r2, [r7, #128]	; 0x80
   15958:	mov	r5, #4
   1595c:	cmp	r0, #4
   15960:	movls	r0, r5
   15964:	cmp	r2, r0
   15968:	sub	r2, fp, #20
   1596c:	strhcc	r0, [r7, #128]	; 0x80
   15970:	str	r4, [fp, #-20]	; 0xffffffec
   15974:	sub	r0, r0, #1
   15978:	ldr	ip, [r7, #136]	; 0x88
   1597c:	str	r5, [sp, #16]
   15980:	str	r2, [sp, #12]
   15984:	mov	r2, #1
   15988:	str	r5, [sp, #4]
   1598c:	str	r2, [sp, #8]
   15990:	mls	r6, r3, r4, ip
   15994:	mul	r3, r3, r4
   15998:	cmp	r3, #0
   1599c:	and	r0, r6, r0
   159a0:	movne	r2, #2
   159a4:	addne	r5, r3, #4
   159a8:	strne	r3, [sp, #24]
   159ac:	strne	r1, [sp, #20]
   159b0:	strne	r2, [sp, #8]
   159b4:	strne	r5, [sp, #4]
   159b8:	cmp	r0, #0
   159bc:	beq	159e8 <flatcc_builder_create_vector@@Base+0xb8>
   159c0:	add	r1, sp, #4
   159c4:	movw	r3, #30982	; 0x7906
   159c8:	add	r5, r5, r0
   159cc:	add	r1, r1, r2, lsl #3
   159d0:	movt	r3, #1
   159d4:	add	r2, r2, #1
   159d8:	str	r5, [sp, #4]
   159dc:	str	r3, [r1, #8]
   159e0:	str	r0, [r1, #12]
   159e4:	str	r2, [sp, #8]
   159e8:	cmp	r5, #0
   159ec:	ble	15a64 <flatcc_builder_create_vector@@Base+0x134>
   159f0:	ldr	r0, [r7, #36]	; 0x24
   159f4:	ldr	r6, [r7, #44]	; 0x2c
   159f8:	add	r1, sp, #4
   159fc:	sub	r4, ip, r5
   15a00:	str	r5, [sp]
   15a04:	add	r1, r1, #8
   15a08:	mov	r3, r4
   15a0c:	blx	r6
   15a10:	cmp	r0, #0
   15a14:	streq	r4, [r7, #136]	; 0x88
   15a18:	moveq	r0, r4
   15a1c:	subeq	sp, fp, #16
   15a20:	popeq	{r4, r5, r6, r7, fp, pc}
   15a24:	movw	r0, #36030	; 0x8cbe
   15a28:	movw	r1, #31512	; 0x7b18
   15a2c:	movw	r3, #35709	; 0x8b7d
   15a30:	movw	r2, #651	; 0x28b
   15a34:	movt	r0, #1
   15a38:	movt	r1, #1
   15a3c:	movt	r3, #1
   15a40:	bl	12418 <__assert_fail@plt>
   15a44:	movw	r0, #33943	; 0x8497
   15a48:	movw	r1, #31512	; 0x7b18
   15a4c:	movw	r3, #33962	; 0x84aa
   15a50:	movw	r2, #1365	; 0x555
   15a54:	movt	r0, #1
   15a58:	movt	r1, #1
   15a5c:	movt	r3, #1
   15a60:	bl	12418 <__assert_fail@plt>
   15a64:	movw	r0, #36030	; 0x8cbe
   15a68:	movw	r1, #31512	; 0x7b18
   15a6c:	movw	r3, #35709	; 0x8b7d
   15a70:	movw	r2, #647	; 0x287
   15a74:	b	15a34 <flatcc_builder_create_vector@@Base+0x104>

00015a78 <flatcc_builder_end_vector@@Base>:
   15a78:	push	{r4, r5, fp, lr}
   15a7c:	add	fp, sp, #8
   15a80:	sub	sp, sp, #8
   15a84:	mov	r4, r0
   15a88:	ldr	r0, [r0, #32]
   15a8c:	ldrh	r1, [r0, #14]
   15a90:	cmp	r1, #4
   15a94:	bne	15b48 <flatcc_builder_end_vector@@Base+0xd0>
   15a98:	ldr	r3, [r0, #16]
   15a9c:	ldr	r2, [r0, #20]
   15aa0:	ldr	r0, [r0, #24]
   15aa4:	ldr	r1, [r4, #16]
   15aa8:	ldrh	r5, [r4, #130]	; 0x82
   15aac:	str	r0, [sp, #4]
   15ab0:	mov	r0, r4
   15ab4:	str	r5, [sp]
   15ab8:	bl	15930 <flatcc_builder_create_vector@@Base>
   15abc:	mov	r5, r0
   15ac0:	cmp	r0, #0
   15ac4:	beq	15b3c <flatcc_builder_end_vector@@Base+0xc4>
   15ac8:	ldr	r0, [r4, #16]
   15acc:	ldr	r2, [r4, #20]
   15ad0:	mov	r1, #0
   15ad4:	bl	123f4 <memset@plt>
   15ad8:	ldr	r0, [r4, #32]
   15adc:	ldr	r1, [r4, #60]	; 0x3c
   15ae0:	ldr	ip, [r4, #64]	; 0x40
   15ae4:	ldr	r3, [r0, #8]
   15ae8:	str	r3, [r4, #20]
   15aec:	ldr	r3, [r0]
   15af0:	str	r3, [r4, #28]
   15af4:	add	r1, r1, r3
   15af8:	ldr	r2, [r0, #4]
   15afc:	str	r1, [r4, #16]
   15b00:	sub	r1, ip, r3
   15b04:	cmp	r1, r2
   15b08:	movhi	r1, r2
   15b0c:	str	r1, [r4, #24]
   15b10:	ldrh	r1, [r4, #130]	; 0x82
   15b14:	ldrh	r2, [r4, #128]	; 0x80
   15b18:	cmp	r2, r1
   15b1c:	strhcc	r1, [r4, #128]	; 0x80
   15b20:	ldrh	r1, [r0, #12]
   15b24:	sub	r0, r0, #36	; 0x24
   15b28:	str	r0, [r4, #32]
   15b2c:	strh	r1, [r4, #130]	; 0x82
   15b30:	ldr	r0, [r4, #156]	; 0x9c
   15b34:	sub	r0, r0, #1
   15b38:	str	r0, [r4, #156]	; 0x9c
   15b3c:	mov	r0, r5
   15b40:	sub	sp, fp, #8
   15b44:	pop	{r4, r5, fp, pc}
   15b48:	movw	r0, #32315	; 0x7e3b
   15b4c:	movw	r1, #31512	; 0x7b18
   15b50:	movw	r3, #34080	; 0x8520
   15b54:	movw	r2, #1400	; 0x578
   15b58:	movt	r0, #1
   15b5c:	movt	r1, #1
   15b60:	movt	r3, #1
   15b64:	bl	12418 <__assert_fail@plt>

00015b68 <flatcc_builder_vector_count@@Base>:
   15b68:	ldr	r0, [r0, #32]
   15b6c:	ldr	r0, [r0, #20]
   15b70:	bx	lr

00015b74 <flatcc_builder_vector_edit@@Base>:
   15b74:	ldr	r0, [r0, #16]
   15b78:	bx	lr

00015b7c <flatcc_builder_create_offset_vector_direct@@Base>:
   15b7c:	mov	r3, #0
   15b80:	b	15b84 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15b84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b88:	add	fp, sp, #24
   15b8c:	sub	sp, sp, #80	; 0x50
   15b90:	mov	r6, #0
   15b94:	cmn	r2, #-1073741823	; 0xc0000001
   15b98:	bhi	15cd4 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   15b9c:	mov	r8, r0
   15ba0:	ldrh	r0, [r0, #128]	; 0x80
   15ba4:	mov	r5, #4
   15ba8:	sub	r7, fp, #28
   15bac:	mov	r4, #1
   15bb0:	cmp	r0, #3
   15bb4:	movls	r0, #4
   15bb8:	strhls	r0, [r8, #128]	; 0x80
   15bbc:	str	r2, [fp, #-28]	; 0xffffffe4
   15bc0:	ldr	ip, [r8, #136]	; 0x88
   15bc4:	str	r5, [sp, #16]
   15bc8:	str	r7, [sp, #12]
   15bcc:	mov	r7, #0
   15bd0:	str	r5, [sp, #4]
   15bd4:	str	r4, [sp, #8]
   15bd8:	cmp	r7, r2, lsl #2
   15bdc:	and	r6, ip, #3
   15be0:	beq	15c00 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   15be4:	lsl	r7, r2, #2
   15be8:	mov	r4, #2
   15bec:	add	r5, r7, #4
   15bf0:	str	r7, [sp, #24]
   15bf4:	str	r1, [sp, #20]
   15bf8:	str	r4, [sp, #8]
   15bfc:	str	r5, [sp, #4]
   15c00:	cmp	r6, #0
   15c04:	beq	15c30 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   15c08:	add	r7, sp, #4
   15c0c:	movw	r0, #30982	; 0x7906
   15c10:	add	r5, r5, r6
   15c14:	add	r7, r7, r4, lsl #3
   15c18:	movt	r0, #1
   15c1c:	add	r4, r4, #1
   15c20:	str	r5, [sp, #4]
   15c24:	str	r0, [r7, #8]
   15c28:	str	r6, [r7, #12]
   15c2c:	str	r4, [sp, #8]
   15c30:	cmp	r2, #0
   15c34:	beq	15c9c <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15c38:	sub	r0, r5, ip
   15c3c:	mov	r6, r3
   15c40:	sub	r0, r0, #4
   15c44:	ldr	r7, [r1]
   15c48:	cmp	r7, #0
   15c4c:	beq	15c70 <flatcc_builder_create_offset_vector_direct@@Base+0xf4>
   15c50:	add	r7, r0, r7
   15c54:	cmp	r3, #0
   15c58:	str	r7, [r1]
   15c5c:	beq	15c84 <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   15c60:	ldrb	r7, [r6]
   15c64:	cmp	r7, #0
   15c68:	bne	15c84 <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   15c6c:	b	15ce0 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15c70:	cmp	r3, #0
   15c74:	beq	15d10 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   15c78:	ldrb	r7, [r6]
   15c7c:	cmp	r7, #0
   15c80:	bne	15cf8 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   15c84:	sub	r0, r0, #4
   15c88:	add	r1, r1, #4
   15c8c:	add	r6, r6, #1
   15c90:	subs	r2, r2, #1
   15c94:	bne	15c44 <flatcc_builder_create_offset_vector_direct@@Base+0xc8>
   15c98:	ldr	ip, [r8, #136]	; 0x88
   15c9c:	cmp	r5, #0
   15ca0:	ble	15d30 <flatcc_builder_create_offset_vector_direct@@Base+0x1b4>
   15ca4:	ldr	r0, [r8, #36]	; 0x24
   15ca8:	ldr	r7, [r8, #44]	; 0x2c
   15cac:	add	r1, sp, #4
   15cb0:	sub	r6, ip, r5
   15cb4:	mov	r2, r4
   15cb8:	str	r5, [sp]
   15cbc:	add	r1, r1, #8
   15cc0:	mov	r3, r6
   15cc4:	blx	r7
   15cc8:	cmp	r0, #0
   15ccc:	bne	15d44 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   15cd0:	str	r6, [r8, #136]	; 0x88
   15cd4:	mov	r0, r6
   15cd8:	sub	sp, fp, #24
   15cdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ce0:	movw	r0, #36018	; 0x8cb2
   15ce4:	movw	r1, #31512	; 0x7b18
   15ce8:	movw	r3, #36032	; 0x8cc0
   15cec:	movw	r2, #1457	; 0x5b1
   15cf0:	movt	r0, #1
   15cf4:	b	15d24 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   15cf8:	movw	r0, #36163	; 0x8d43
   15cfc:	movw	r1, #31512	; 0x7b18
   15d00:	movw	r3, #36032	; 0x8cc0
   15d04:	movw	r2, #1461	; 0x5b5
   15d08:	movt	r0, #1
   15d0c:	b	15d24 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   15d10:	movw	r0, #36030	; 0x8cbe
   15d14:	movw	r1, #31512	; 0x7b18
   15d18:	movw	r3, #36032	; 0x8cc0
   15d1c:	movw	r2, #1463	; 0x5b7
   15d20:	movt	r0, #1
   15d24:	movt	r1, #1
   15d28:	movt	r3, #1
   15d2c:	bl	12418 <__assert_fail@plt>
   15d30:	movw	r0, #36030	; 0x8cbe
   15d34:	movw	r1, #31512	; 0x7b18
   15d38:	movw	r3, #35709	; 0x8b7d
   15d3c:	movw	r2, #647	; 0x287
   15d40:	b	15d54 <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   15d44:	movw	r0, #36030	; 0x8cbe
   15d48:	movw	r1, #31512	; 0x7b18
   15d4c:	movw	r3, #35709	; 0x8b7d
   15d50:	movw	r2, #651	; 0x28b
   15d54:	movt	r0, #1
   15d58:	movt	r1, #1
   15d5c:	movt	r3, #1
   15d60:	bl	12418 <__assert_fail@plt>

00015d64 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15d64:	push	{r4, r5, fp, lr}
   15d68:	add	fp, sp, #8
   15d6c:	mov	r4, r0
   15d70:	ldr	r0, [r0, #32]
   15d74:	mov	r3, r1
   15d78:	ldrh	r1, [r0, #14]
   15d7c:	cmp	r1, #5
   15d80:	bne	15e1c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   15d84:	ldr	r2, [r0, #20]
   15d88:	ldr	r1, [r4, #16]
   15d8c:	mov	r0, r4
   15d90:	bl	15b84 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15d94:	mov	r5, r0
   15d98:	cmp	r0, #0
   15d9c:	beq	15e14 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   15da0:	ldr	r0, [r4, #16]
   15da4:	ldr	r2, [r4, #20]
   15da8:	mov	r1, #0
   15dac:	bl	123f4 <memset@plt>
   15db0:	ldr	r0, [r4, #32]
   15db4:	ldr	r1, [r4, #60]	; 0x3c
   15db8:	ldr	ip, [r4, #64]	; 0x40
   15dbc:	ldr	r3, [r0, #8]
   15dc0:	str	r3, [r4, #20]
   15dc4:	ldr	r3, [r0]
   15dc8:	str	r3, [r4, #28]
   15dcc:	add	r1, r1, r3
   15dd0:	ldr	r2, [r0, #4]
   15dd4:	str	r1, [r4, #16]
   15dd8:	sub	r1, ip, r3
   15ddc:	cmp	r1, r2
   15de0:	movhi	r1, r2
   15de4:	str	r1, [r4, #24]
   15de8:	ldrh	r1, [r4, #130]	; 0x82
   15dec:	ldrh	r2, [r4, #128]	; 0x80
   15df0:	cmp	r2, r1
   15df4:	strhcc	r1, [r4, #128]	; 0x80
   15df8:	ldrh	r1, [r0, #12]
   15dfc:	sub	r0, r0, #36	; 0x24
   15e00:	str	r0, [r4, #32]
   15e04:	strh	r1, [r4, #130]	; 0x82
   15e08:	ldr	r0, [r4, #156]	; 0x9c
   15e0c:	sub	r0, r0, #1
   15e10:	str	r0, [r4, #156]	; 0x9c
   15e14:	mov	r0, r5
   15e18:	pop	{r4, r5, fp, pc}
   15e1c:	movw	r0, #32564	; 0x7f34
   15e20:	movw	r1, #31512	; 0x7b18
   15e24:	movw	r3, #34221	; 0x85ad
   15e28:	movw	r2, #1493	; 0x5d5
   15e2c:	movt	r0, #1
   15e30:	movt	r1, #1
   15e34:	movt	r3, #1
   15e38:	bl	12418 <__assert_fail@plt>

00015e3c <flatcc_builder_offset_vector_edit@@Base>:
   15e3c:	ldr	r0, [r0, #16]
   15e40:	bx	lr

00015e44 <flatcc_builder_offset_vector_count@@Base>:
   15e44:	ldr	r0, [r0, #32]
   15e48:	ldr	r0, [r0, #20]
   15e4c:	bx	lr

00015e50 <flatcc_builder_table_add_union@@Base>:
   15e50:	push	{r4, r5, r6, r7, fp, lr}
   15e54:	add	fp, sp, #16
   15e58:	mov	r5, r0
   15e5c:	ldr	r0, [r0, #32]
   15e60:	ldrh	r0, [r0, #14]
   15e64:	cmp	r0, #3
   15e68:	bne	15ef0 <flatcc_builder_table_add_union@@Base+0xa0>
   15e6c:	mov	r7, r3
   15e70:	mov	r4, r2
   15e74:	mov	r6, r1
   15e78:	cmp	r3, #0
   15e7c:	beq	15e8c <flatcc_builder_table_add_union@@Base+0x3c>
   15e80:	uxtb	r0, r4
   15e84:	cmp	r0, #0
   15e88:	beq	15f08 <flatcc_builder_table_add_union@@Base+0xb8>
   15e8c:	cmp	r7, #0
   15e90:	beq	15eac <flatcc_builder_table_add_union@@Base+0x5c>
   15e94:	mov	r0, r5
   15e98:	mov	r1, r6
   15e9c:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   15ea0:	cmp	r0, #0
   15ea4:	beq	15f20 <flatcc_builder_table_add_union@@Base+0xd0>
   15ea8:	str	r7, [r0]
   15eac:	sub	r1, r6, #1
   15eb0:	mov	r0, r5
   15eb4:	mov	r2, #1
   15eb8:	mov	r3, #1
   15ebc:	bl	16064 <flatcc_builder_table_add@@Base>
   15ec0:	cmp	r0, #0
   15ec4:	strbne	r4, [r0]
   15ec8:	movne	r0, #0
   15ecc:	popne	{r4, r5, r6, r7, fp, pc}
   15ed0:	movw	r0, #34467	; 0x86a3
   15ed4:	movw	r1, #31512	; 0x7b18
   15ed8:	movw	r3, #34335	; 0x861f
   15edc:	movw	r2, #1526	; 0x5f6
   15ee0:	movt	r0, #1
   15ee4:	movt	r1, #1
   15ee8:	movt	r3, #1
   15eec:	bl	12418 <__assert_fail@plt>
   15ef0:	movw	r0, #33581	; 0x832d
   15ef4:	movw	r1, #31512	; 0x7b18
   15ef8:	movw	r3, #34335	; 0x861f
   15efc:	movw	r2, #1518	; 0x5ee
   15f00:	movt	r0, #1
   15f04:	b	15ee4 <flatcc_builder_table_add_union@@Base+0x94>
   15f08:	movw	r0, #34423	; 0x8677
   15f0c:	movw	r1, #31512	; 0x7b18
   15f10:	movw	r3, #34335	; 0x861f
   15f14:	movw	r2, #1519	; 0x5ef
   15f18:	movt	r0, #1
   15f1c:	b	15ee4 <flatcc_builder_table_add_union@@Base+0x94>
   15f20:	movw	r0, #34457	; 0x8699
   15f24:	movw	r1, #31512	; 0x7b18
   15f28:	movw	r3, #34335	; 0x861f
   15f2c:	movw	r2, #1522	; 0x5f2
   15f30:	movt	r0, #1
   15f34:	b	15ee4 <flatcc_builder_table_add_union@@Base+0x94>

00015f38 <flatcc_builder_table_add_offset@@Base>:
   15f38:	push	{r4, r5, r6, r7, fp, lr}
   15f3c:	add	fp, sp, #16
   15f40:	mov	r4, r0
   15f44:	ldr	r0, [r0, #32]
   15f48:	ldrh	r0, [r0, #14]
   15f4c:	cmp	r0, #3
   15f50:	bne	16014 <flatcc_builder_table_add_offset@@Base+0xdc>
   15f54:	movw	r0, #32765	; 0x7ffd
   15f58:	mov	r5, r1
   15f5c:	cmp	r1, r0
   15f60:	bcs	1602c <flatcc_builder_table_add_offset@@Base+0xf4>
   15f64:	ldr	r0, [r4, #4]
   15f68:	add	r1, r0, r5, lsl #1
   15f6c:	ldrh	r1, [r1]
   15f70:	cmp	r1, #0
   15f74:	bne	16044 <flatcc_builder_table_add_offset@@Base+0x10c>
   15f78:	ldr	r2, [r4, #20]
   15f7c:	ldr	r1, [r4, #12]
   15f80:	ldr	r3, [r4, #24]
   15f84:	add	r2, r2, #3
   15f88:	eor	r1, r1, r5
   15f8c:	bic	r7, r2, #3
   15f90:	movw	r2, #31153	; 0x79b1
   15f94:	movt	r2, #40503	; 0x9e37
   15f98:	add	r6, r7, #4
   15f9c:	cmp	r6, r3
   15fa0:	str	r6, [r4, #20]
   15fa4:	mul	r1, r1, r2
   15fa8:	eor	r1, r1, #4
   15fac:	mul	r1, r1, r2
   15fb0:	str	r1, [r4, #12]
   15fb4:	bls	15fdc <flatcc_builder_table_add_offset@@Base+0xa4>
   15fb8:	mov	r0, r4
   15fbc:	mov	r1, r6
   15fc0:	movw	r2, #65532	; 0xfffc
   15fc4:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   15fc8:	mov	r1, r0
   15fcc:	mov	r0, #0
   15fd0:	cmp	r1, #0
   15fd4:	popne	{r4, r5, r6, r7, fp, pc}
   15fd8:	ldr	r0, [r4, #4]
   15fdc:	uxth	r1, r5
   15fe0:	add	r0, r0, r1, lsl #1
   15fe4:	strh	r6, [r0]
   15fe8:	ldrh	r0, [r4, #8]
   15fec:	cmp	r0, r1
   15ff0:	addls	r0, r5, #1
   15ff4:	strhls	r0, [r4, #8]
   15ff8:	ldr	r0, [r4]
   15ffc:	add	r1, r0, #2
   16000:	str	r1, [r4]
   16004:	strh	r7, [r0]
   16008:	ldr	r0, [r4, #16]
   1600c:	add	r0, r0, r7
   16010:	pop	{r4, r5, r6, r7, fp, pc}
   16014:	movw	r0, #33581	; 0x832d
   16018:	movw	r1, #31512	; 0x7b18
   1601c:	movw	r3, #35361	; 0x8a21
   16020:	movw	r2, #1811	; 0x713
   16024:	movt	r0, #1
   16028:	b	16058 <flatcc_builder_table_add_offset@@Base+0x120>
   1602c:	movw	r0, #35233	; 0x89a1
   16030:	movw	r1, #31512	; 0x7b18
   16034:	movw	r3, #35361	; 0x8a21
   16038:	movw	r2, #1812	; 0x714
   1603c:	movt	r0, #1
   16040:	b	16058 <flatcc_builder_table_add_offset@@Base+0x120>
   16044:	movw	r0, #36030	; 0x8cbe
   16048:	movw	r1, #31512	; 0x7b18
   1604c:	movw	r3, #35361	; 0x8a21
   16050:	movw	r2, #1819	; 0x71b
   16054:	movt	r0, #1
   16058:	movt	r1, #1
   1605c:	movt	r3, #1
   16060:	bl	12418 <__assert_fail@plt>

00016064 <flatcc_builder_table_add@@Base>:
   16064:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16068:	add	fp, sp, #24
   1606c:	mov	r4, r0
   16070:	ldr	r0, [r0, #32]
   16074:	ldrh	r0, [r0, #14]
   16078:	cmp	r0, #3
   1607c:	bne	1614c <flatcc_builder_table_add@@Base+0xe8>
   16080:	movw	r0, #32765	; 0x7ffd
   16084:	mov	r8, r1
   16088:	cmp	r1, r0
   1608c:	bcs	16164 <flatcc_builder_table_add@@Base+0x100>
   16090:	ldrh	r0, [r4, #130]	; 0x82
   16094:	cmp	r0, r3
   16098:	strhcc	r3, [r4, #130]	; 0x82
   1609c:	ldr	r0, [r4, #4]
   160a0:	add	r1, r0, r8, lsl #1
   160a4:	ldrh	r1, [r1]
   160a8:	cmp	r1, #0
   160ac:	bne	1617c <flatcc_builder_table_add@@Base+0x118>
   160b0:	ldr	r1, [r4, #12]
   160b4:	movw	r7, #31153	; 0x79b1
   160b8:	ldr	r6, [r4, #20]
   160bc:	ldr	r5, [r4, #24]
   160c0:	movt	r7, #40503	; 0x9e37
   160c4:	eor	r1, r1, r8
   160c8:	mul	r1, r1, r7
   160cc:	eor	r1, r1, r2
   160d0:	mul	r1, r1, r7
   160d4:	str	r1, [r4, #12]
   160d8:	add	r1, r3, r6
   160dc:	rsb	r3, r3, #0
   160e0:	sub	r1, r1, #1
   160e4:	and	r6, r1, r3
   160e8:	add	r1, r6, r2
   160ec:	cmp	r1, r5
   160f0:	str	r1, [r4, #20]
   160f4:	bcc	16120 <flatcc_builder_table_add@@Base+0xbc>
   160f8:	add	r1, r1, #1
   160fc:	mov	r0, r4
   16100:	movw	r2, #65532	; 0xfffc
   16104:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   16108:	mov	r1, r0
   1610c:	mov	r0, #0
   16110:	cmp	r1, #0
   16114:	beq	1611c <flatcc_builder_table_add@@Base+0xb8>
   16118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1611c:	ldr	r0, [r4, #4]
   16120:	uxth	r1, r8
   16124:	add	r2, r6, #4
   16128:	add	r0, r0, r1, lsl #1
   1612c:	strh	r2, [r0]
   16130:	ldrh	r0, [r4, #8]
   16134:	cmp	r0, r1
   16138:	addls	r0, r8, #1
   1613c:	strhls	r0, [r4, #8]
   16140:	ldr	r0, [r4, #16]
   16144:	add	r0, r0, r6
   16148:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1614c:	movw	r0, #33581	; 0x832d
   16150:	movw	r1, #31512	; 0x7b18
   16154:	movw	r3, #35159	; 0x8957
   16158:	movw	r2, #1773	; 0x6ed
   1615c:	movt	r0, #1
   16160:	b	16190 <flatcc_builder_table_add@@Base+0x12c>
   16164:	movw	r0, #35233	; 0x89a1
   16168:	movw	r1, #31512	; 0x7b18
   1616c:	movw	r3, #35159	; 0x8957
   16170:	movw	r2, #1774	; 0x6ee
   16174:	movt	r0, #1
   16178:	b	16190 <flatcc_builder_table_add@@Base+0x12c>
   1617c:	movw	r0, #36030	; 0x8cbe
   16180:	movw	r1, #31512	; 0x7b18
   16184:	movw	r3, #35159	; 0x8957
   16188:	movw	r2, #1784	; 0x6f8
   1618c:	movt	r0, #1
   16190:	movt	r1, #1
   16194:	movt	r3, #1
   16198:	bl	12418 <__assert_fail@plt>

0001619c <flatcc_builder_table_add_union_vector@@Base>:
   1619c:	push	{r4, r5, r6, r7, fp, lr}
   161a0:	add	fp, sp, #16
   161a4:	mov	r6, r0
   161a8:	ldr	r0, [r0, #32]
   161ac:	ldrh	r0, [r0, #14]
   161b0:	cmp	r0, #3
   161b4:	bne	16220 <flatcc_builder_table_add_union_vector@@Base+0x84>
   161b8:	mov	r5, r1
   161bc:	clz	r1, r3
   161c0:	cmp	r2, #0
   161c4:	mov	r0, r2
   161c8:	mov	r4, r3
   161cc:	mov	r7, r2
   161d0:	movwne	r0, #1
   161d4:	lsr	r1, r1, #5
   161d8:	teq	r1, r0
   161dc:	beq	16238 <flatcc_builder_table_add_union_vector@@Base+0x9c>
   161e0:	cmp	r7, #0
   161e4:	beq	16218 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   161e8:	sub	r1, r5, #1
   161ec:	mov	r0, r6
   161f0:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   161f4:	cmp	r0, #0
   161f8:	beq	16250 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   161fc:	str	r7, [r0]
   16200:	mov	r0, r6
   16204:	mov	r1, r5
   16208:	bl	15f38 <flatcc_builder_table_add_offset@@Base>
   1620c:	cmp	r0, #0
   16210:	beq	16264 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   16214:	str	r4, [r0]
   16218:	mov	r0, #0
   1621c:	pop	{r4, r5, r6, r7, fp, pc}
   16220:	movw	r0, #33581	; 0x832d
   16224:	movw	r1, #31512	; 0x7b18
   16228:	movw	r3, #34479	; 0x86af
   1622c:	mov	r2, #1536	; 0x600
   16230:	movt	r0, #1
   16234:	b	16278 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   16238:	movw	r0, #34578	; 0x8712
   1623c:	movw	r1, #31512	; 0x7b18
   16240:	movw	r3, #34479	; 0x86af
   16244:	movw	r2, #1537	; 0x601
   16248:	movt	r0, #1
   1624c:	b	16278 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   16250:	movw	r0, #34457	; 0x8699
   16254:	movw	r1, #31512	; 0x7b18
   16258:	movw	r3, #34479	; 0x86af
   1625c:	movw	r2, #1540	; 0x604
   16260:	b	16274 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   16264:	movw	r0, #34457	; 0x8699
   16268:	movw	r1, #31512	; 0x7b18
   1626c:	movw	r3, #34479	; 0x86af
   16270:	movw	r2, #1544	; 0x608
   16274:	movt	r0, #1
   16278:	movt	r1, #1
   1627c:	movt	r3, #1
   16280:	bl	12418 <__assert_fail@plt>

00016284 <flatcc_builder_create_union_vector@@Base>:
   16284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16288:	add	fp, sp, #28
   1628c:	sub	sp, sp, #20
   16290:	mov	sl, r0
   16294:	mov	r0, #0
   16298:	mov	r9, r3
   1629c:	mov	r7, r2
   162a0:	mov	r4, r1
   162a4:	str	r0, [sl]
   162a8:	str	r0, [sl, #4]
   162ac:	mov	r0, r1
   162b0:	bl	14ad8 <flatcc_builder_start_offset_vector@@Base>
   162b4:	cmp	r0, #0
   162b8:	beq	162c4 <flatcc_builder_create_union_vector@@Base+0x40>
   162bc:	sub	sp, fp, #28
   162c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162c4:	mov	r0, r4
   162c8:	mov	r1, r9
   162cc:	bl	144ac <flatcc_builder_extend_offset_vector@@Base>
   162d0:	cmp	r0, #0
   162d4:	beq	162bc <flatcc_builder_create_union_vector@@Base+0x38>
   162d8:	ldr	r8, [r4, #20]
   162dc:	ldr	r1, [r4, #24]
   162e0:	add	r0, r8, r9
   162e4:	cmp	r0, r1
   162e8:	str	r0, [r4, #20]
   162ec:	bcc	16308 <flatcc_builder_create_union_vector@@Base+0x84>
   162f0:	add	r1, r0, #1
   162f4:	mov	r0, r4
   162f8:	mvn	r2, #3
   162fc:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   16300:	cmp	r0, #0
   16304:	bne	162bc <flatcc_builder_create_union_vector@@Base+0x38>
   16308:	ldr	r3, [r4, #16]
   1630c:	adds	r2, r3, r8
   16310:	beq	162bc <flatcc_builder_create_union_vector@@Base+0x38>
   16314:	cmp	r9, #0
   16318:	beq	16348 <flatcc_builder_create_union_vector@@Base+0xc4>
   1631c:	add	r0, r7, #4
   16320:	mov	r1, r2
   16324:	mov	r7, r3
   16328:	mov	r6, r9
   1632c:	ldrb	r5, [r0, #-4]
   16330:	subs	r6, r6, #1
   16334:	strb	r5, [r1], #1
   16338:	ldr	r5, [r0]
   1633c:	add	r0, r0, #8
   16340:	str	r5, [r7], #4
   16344:	bne	1632c <flatcc_builder_create_union_vector@@Base+0xa8>
   16348:	add	r0, sp, #8
   1634c:	mov	r1, r4
   16350:	str	r9, [sp]
   16354:	bl	163dc <flatcc_builder_create_union_vector_direct@@Base>
   16358:	ldr	r0, [sp, #8]
   1635c:	ldr	r1, [sp, #12]
   16360:	stm	sl, {r0, r1}
   16364:	mov	r1, #0
   16368:	ldr	r0, [r4, #16]
   1636c:	ldr	r2, [r4, #20]
   16370:	bl	123f4 <memset@plt>
   16374:	ldr	r0, [r4, #32]
   16378:	ldr	r1, [r4, #60]	; 0x3c
   1637c:	ldr	r2, [r4, #64]	; 0x40
   16380:	ldr	r3, [r0, #8]
   16384:	str	r3, [r4, #20]
   16388:	ldr	r3, [r0]
   1638c:	str	r3, [r4, #28]
   16390:	add	r1, r1, r3
   16394:	ldr	r7, [r0, #4]
   16398:	str	r1, [r4, #16]
   1639c:	sub	r1, r2, r3
   163a0:	cmp	r1, r7
   163a4:	movhi	r1, r7
   163a8:	str	r1, [r4, #24]
   163ac:	ldrh	r1, [r4, #130]	; 0x82
   163b0:	ldrh	r2, [r4, #128]	; 0x80
   163b4:	cmp	r2, r1
   163b8:	strhcc	r1, [r4, #128]	; 0x80
   163bc:	ldrh	r1, [r0, #12]
   163c0:	sub	r0, r0, #36	; 0x24
   163c4:	str	r0, [r4, #32]
   163c8:	strh	r1, [r4, #130]	; 0x82
   163cc:	ldr	r0, [r4, #156]	; 0x9c
   163d0:	sub	r0, r0, #1
   163d4:	str	r0, [r4, #156]	; 0x9c
   163d8:	b	162bc <flatcc_builder_create_union_vector@@Base+0x38>

000163dc <flatcc_builder_create_union_vector_direct@@Base>:
   163dc:	push	{r4, r5, r6, r7, fp, lr}
   163e0:	add	fp, sp, #16
   163e4:	sub	sp, sp, #8
   163e8:	ldr	r7, [fp, #8]
   163ec:	mov	r5, r2
   163f0:	mov	r4, r0
   163f4:	mov	r0, #0
   163f8:	mov	r6, r1
   163fc:	str	r0, [r4]
   16400:	str	r0, [r4, #4]
   16404:	mov	r0, r1
   16408:	mov	r1, r3
   1640c:	mov	r3, r5
   16410:	mov	r2, r7
   16414:	bl	15b84 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16418:	cmp	r0, #0
   1641c:	str	r0, [r4, #4]
   16420:	beq	1644c <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16424:	mvn	r0, #0
   16428:	mov	r1, #1
   1642c:	mov	r2, r7
   16430:	mov	r3, #1
   16434:	str	r1, [sp]
   16438:	str	r0, [sp, #4]
   1643c:	mov	r0, r6
   16440:	mov	r1, r5
   16444:	bl	15930 <flatcc_builder_create_vector@@Base>
   16448:	str	r0, [r4]
   1644c:	sub	sp, fp, #16
   16450:	pop	{r4, r5, r6, r7, fp, pc}

00016454 <flatcc_builder_start_union_vector@@Base>:
   16454:	push	{r4, sl, fp, lr}
   16458:	add	fp, sp, #8
   1645c:	mov	r1, #4
   16460:	mov	r4, r0
   16464:	bl	13e78 <flatcc_builder_start_buffer@@Base+0xbc>
   16468:	mov	r1, r0
   1646c:	mvn	r0, #0
   16470:	cmp	r1, #0
   16474:	popne	{r4, sl, fp, pc}
   16478:	ldr	r0, [r4, #32]
   1647c:	mov	r1, #8
   16480:	mov	r2, #7
   16484:	str	r1, [r0, #16]
   16488:	mov	r0, #0
   1648c:	ldr	r1, [r4, #32]
   16490:	str	r0, [r1, #20]
   16494:	ldr	r1, [r4, #32]
   16498:	strh	r2, [r1, #14]
   1649c:	ldr	r2, [r4, #28]
   164a0:	ldr	r3, [r4, #60]	; 0x3c
   164a4:	ldr	ip, [r4, #64]	; 0x40
   164a8:	add	r3, r3, r2
   164ac:	sub	r2, ip, r2
   164b0:	str	r3, [r4, #16]
   164b4:	mvn	r3, #3
   164b8:	cmn	r2, #4
   164bc:	movcs	r2, r3
   164c0:	str	r2, [r4, #24]
   164c4:	str	r3, [r1, #4]
   164c8:	pop	{r4, sl, fp, pc}

000164cc <flatcc_builder_end_union_vector@@Base>:
   164cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   164d0:	add	fp, sp, #24
   164d4:	sub	sp, sp, #16
   164d8:	mov	r8, r0
   164dc:	mov	r0, #0
   164e0:	mov	r4, r1
   164e4:	str	r0, [r8]
   164e8:	str	r0, [r8, #4]
   164ec:	ldr	r0, [r1, #32]
   164f0:	ldrh	r1, [r0, #14]
   164f4:	cmp	r1, #7
   164f8:	bne	16610 <flatcc_builder_end_union_vector@@Base+0x144>
   164fc:	ldr	r9, [r0, #20]
   16500:	ldr	r7, [r4, #20]
   16504:	ldr	r1, [r4, #24]
   16508:	add	r0, r9, r9, lsl #2
   1650c:	add	r0, r7, r0
   16510:	cmp	r0, r1
   16514:	str	r0, [r4, #20]
   16518:	bcc	16534 <flatcc_builder_end_union_vector@@Base+0x68>
   1651c:	add	r1, r0, #1
   16520:	mov	r0, r4
   16524:	mvn	r2, #3
   16528:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   1652c:	cmp	r0, #0
   16530:	bne	16608 <flatcc_builder_end_union_vector@@Base+0x13c>
   16534:	ldr	r0, [r4, #16]
   16538:	adds	r3, r0, r7
   1653c:	beq	16608 <flatcc_builder_end_union_vector@@Base+0x13c>
   16540:	add	r2, r3, r9, lsl #2
   16544:	cmp	r9, #0
   16548:	beq	16578 <flatcc_builder_end_union_vector@@Base+0xac>
   1654c:	add	r0, r0, #4
   16550:	mov	r1, r2
   16554:	mov	r7, r3
   16558:	mov	r6, r9
   1655c:	ldrb	r5, [r0, #-4]
   16560:	subs	r6, r6, #1
   16564:	strb	r5, [r1], #1
   16568:	ldr	r5, [r0]
   1656c:	add	r0, r0, #8
   16570:	str	r5, [r7], #4
   16574:	bne	1655c <flatcc_builder_end_union_vector@@Base+0x90>
   16578:	add	r0, sp, #8
   1657c:	mov	r1, r4
   16580:	str	r9, [sp]
   16584:	bl	163dc <flatcc_builder_create_union_vector_direct@@Base>
   16588:	ldr	r0, [sp, #8]
   1658c:	ldr	r1, [sp, #12]
   16590:	stm	r8, {r0, r1}
   16594:	mov	r1, #0
   16598:	ldr	r0, [r4, #16]
   1659c:	ldr	r2, [r4, #20]
   165a0:	bl	123f4 <memset@plt>
   165a4:	ldr	r0, [r4, #32]
   165a8:	ldr	r1, [r4, #60]	; 0x3c
   165ac:	ldr	r2, [r4, #64]	; 0x40
   165b0:	ldr	r3, [r0, #8]
   165b4:	str	r3, [r4, #20]
   165b8:	ldr	r3, [r0]
   165bc:	str	r3, [r4, #28]
   165c0:	add	r1, r1, r3
   165c4:	ldr	r7, [r0, #4]
   165c8:	str	r1, [r4, #16]
   165cc:	sub	r1, r2, r3
   165d0:	cmp	r1, r7
   165d4:	movhi	r1, r7
   165d8:	str	r1, [r4, #24]
   165dc:	ldrh	r1, [r4, #130]	; 0x82
   165e0:	ldrh	r2, [r4, #128]	; 0x80
   165e4:	cmp	r2, r1
   165e8:	strhcc	r1, [r4, #128]	; 0x80
   165ec:	ldrh	r1, [r0, #12]
   165f0:	sub	r0, r0, #36	; 0x24
   165f4:	str	r0, [r4, #32]
   165f8:	strh	r1, [r4, #130]	; 0x82
   165fc:	ldr	r0, [r4, #156]	; 0x9c
   16600:	sub	r0, r0, #1
   16604:	str	r0, [r4, #156]	; 0x9c
   16608:	sub	sp, fp, #24
   1660c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16610:	movw	r0, #34618	; 0x873a
   16614:	movw	r1, #31512	; 0x7b18
   16618:	movw	r3, #34668	; 0x876c
   1661c:	movw	r2, #1617	; 0x651
   16620:	movt	r0, #1
   16624:	movt	r1, #1
   16628:	movt	r3, #1
   1662c:	bl	12418 <__assert_fail@plt>

00016630 <flatcc_builder_union_vector_count@@Base>:
   16630:	ldr	r0, [r0, #32]
   16634:	ldr	r0, [r0, #20]
   16638:	bx	lr

0001663c <flatcc_builder_union_vector_edit@@Base>:
   1663c:	ldr	r0, [r0, #16]
   16640:	bx	lr

00016644 <flatcc_builder_extend_union_vector@@Base>:
   16644:	push	{r4, r5, fp, lr}
   16648:	add	fp, sp, #8
   1664c:	mov	r4, r0
   16650:	ldr	r0, [r0, #32]
   16654:	ldr	r2, [r0, #20]
   16658:	adds	r2, r2, r1
   1665c:	cmpcc	r2, #536870912	; 0x20000000
   16660:	bcc	16684 <flatcc_builder_extend_union_vector@@Base+0x40>
   16664:	movw	r0, #35783	; 0x8bc7
   16668:	movw	r1, #31512	; 0x7b18
   1666c:	movw	r3, #35810	; 0x8be2
   16670:	mov	r2, #892	; 0x37c
   16674:	movt	r0, #1
   16678:	movt	r1, #1
   1667c:	movt	r3, #1
   16680:	bl	12418 <__assert_fail@plt>
   16684:	str	r2, [r0, #20]
   16688:	ldr	r5, [r4, #20]
   1668c:	ldr	r2, [r4, #24]
   16690:	add	r0, r5, r1, lsl #3
   16694:	cmp	r0, r2
   16698:	str	r0, [r4, #20]
   1669c:	bcc	166c0 <flatcc_builder_extend_union_vector@@Base+0x7c>
   166a0:	add	r1, r0, #1
   166a4:	mov	r0, r4
   166a8:	mvn	r2, #3
   166ac:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   166b0:	mov	r1, r0
   166b4:	mov	r0, #0
   166b8:	cmp	r1, #0
   166bc:	popne	{r4, r5, fp, pc}
   166c0:	ldr	r0, [r4, #16]
   166c4:	add	r0, r0, r5
   166c8:	pop	{r4, r5, fp, pc}

000166cc <flatcc_builder_truncate_union_vector@@Base>:
   166cc:	push	{fp, lr}
   166d0:	mov	fp, sp
   166d4:	ldr	r2, [r0, #32]
   166d8:	ldrh	r3, [r2, #14]
   166dc:	cmp	r3, #7
   166e0:	bne	16728 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   166e4:	ldr	r3, [r2, #20]
   166e8:	cmp	r3, r1
   166ec:	bcc	16740 <flatcc_builder_truncate_union_vector@@Base+0x74>
   166f0:	sub	r3, r3, r1
   166f4:	str	r3, [r2, #20]
   166f8:	ldr	r2, [r0, #32]
   166fc:	ldr	r3, [r0, #20]
   16700:	ldr	ip, [r0, #16]
   16704:	ldr	r2, [r2, #16]
   16708:	mls	r3, r2, r1, r3
   1670c:	mul	r2, r2, r1
   16710:	mov	r1, #0
   16714:	str	r3, [r0, #20]
   16718:	add	r0, ip, r3
   1671c:	bl	123f4 <memset@plt>
   16720:	mov	r0, #0
   16724:	pop	{fp, pc}
   16728:	movw	r0, #34618	; 0x873a
   1672c:	movw	r1, #31512	; 0x7b18
   16730:	movw	r3, #34751	; 0x87bf
   16734:	movw	r2, #1665	; 0x681
   16738:	movt	r0, #1
   1673c:	b	16754 <flatcc_builder_truncate_union_vector@@Base+0x88>
   16740:	movw	r0, #33182	; 0x819e
   16744:	movw	r1, #31512	; 0x7b18
   16748:	movw	r3, #34751	; 0x87bf
   1674c:	movw	r2, #1666	; 0x682
   16750:	movt	r0, #1
   16754:	movt	r1, #1
   16758:	movt	r3, #1
   1675c:	bl	12418 <__assert_fail@plt>

00016760 <flatcc_builder_union_vector_push@@Base>:
   16760:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16764:	add	fp, sp, #24
   16768:	mov	r7, r0
   1676c:	ldr	r0, [r0, #32]
   16770:	mov	r5, r1
   16774:	ldrh	r1, [r0, #14]
   16778:	cmp	r1, #7
   1677c:	bne	167e4 <flatcc_builder_union_vector_push@@Base+0x84>
   16780:	ldr	r1, [r0, #20]
   16784:	mov	r6, #0
   16788:	cmn	r1, #-536870911	; 0xe0000001
   1678c:	beq	167dc <flatcc_builder_union_vector_push@@Base+0x7c>
   16790:	add	r1, r1, #1
   16794:	mov	r8, r2
   16798:	str	r1, [r0, #20]
   1679c:	ldr	r4, [r7, #20]
   167a0:	ldr	r0, [r7, #24]
   167a4:	add	r1, r4, #8
   167a8:	cmp	r1, r0
   167ac:	str	r1, [r7, #20]
   167b0:	bcc	167cc <flatcc_builder_union_vector_push@@Base+0x6c>
   167b4:	add	r1, r4, #9
   167b8:	mov	r0, r7
   167bc:	mvn	r2, #3
   167c0:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   167c4:	cmp	r0, #0
   167c8:	bne	167dc <flatcc_builder_union_vector_push@@Base+0x7c>
   167cc:	ldr	r0, [r7, #16]
   167d0:	adds	r0, r0, r4
   167d4:	movne	r6, r0
   167d8:	stmne	r0, {r5, r8}
   167dc:	mov	r0, r6
   167e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   167e4:	movw	r0, #34618	; 0x873a
   167e8:	movw	r1, #31512	; 0x7b18
   167ec:	movw	r3, #34820	; 0x8804
   167f0:	movw	r2, #1677	; 0x68d
   167f4:	movt	r0, #1
   167f8:	movt	r1, #1
   167fc:	movt	r3, #1
   16800:	bl	12418 <__assert_fail@plt>

00016804 <flatcc_builder_append_union_vector@@Base>:
   16804:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16808:	add	fp, sp, #24
   1680c:	mov	r6, r0
   16810:	ldr	r0, [r0, #32]
   16814:	mov	r8, r1
   16818:	ldrh	r1, [r0, #14]
   1681c:	cmp	r1, #7
   16820:	bne	168bc <flatcc_builder_append_union_vector@@Base+0xb8>
   16824:	ldr	r1, [r0, #20]
   16828:	mov	r5, r2
   1682c:	adds	r1, r1, r2
   16830:	cmpcc	r1, #536870912	; 0x20000000
   16834:	bcc	16858 <flatcc_builder_append_union_vector@@Base+0x54>
   16838:	movw	r0, #35783	; 0x8bc7
   1683c:	movw	r1, #31512	; 0x7b18
   16840:	movw	r3, #35810	; 0x8be2
   16844:	mov	r2, #892	; 0x37c
   16848:	movt	r0, #1
   1684c:	movt	r1, #1
   16850:	movt	r3, #1
   16854:	bl	12418 <__assert_fail@plt>
   16858:	str	r1, [r0, #20]
   1685c:	ldr	r4, [r6, #20]
   16860:	ldr	r1, [r6, #24]
   16864:	add	r0, r4, r5, lsl #3
   16868:	cmp	r0, r1
   1686c:	str	r0, [r6, #20]
   16870:	bcc	16890 <flatcc_builder_append_union_vector@@Base+0x8c>
   16874:	add	r1, r0, #1
   16878:	mov	r0, r6
   1687c:	mvn	r2, #3
   16880:	bl	16eec <flatcc_builder_get_emit_context@@Base+0x8>
   16884:	mov	r7, #0
   16888:	cmp	r0, #0
   1688c:	bne	168b4 <flatcc_builder_append_union_vector@@Base+0xb0>
   16890:	ldr	r0, [r6, #16]
   16894:	adds	r7, r0, r4
   16898:	beq	168b0 <flatcc_builder_append_union_vector@@Base+0xac>
   1689c:	lsl	r2, r5, #3
   168a0:	mov	r0, r7
   168a4:	mov	r1, r8
   168a8:	bl	12388 <memcpy@plt>
   168ac:	b	168b4 <flatcc_builder_append_union_vector@@Base+0xb0>
   168b0:	mov	r7, #0
   168b4:	mov	r0, r7
   168b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168bc:	movw	r0, #34618	; 0x873a
   168c0:	movw	r1, #31512	; 0x7b18
   168c4:	movw	r3, #34929	; 0x8871
   168c8:	movw	r2, #1692	; 0x69c
   168cc:	movt	r0, #1
   168d0:	movt	r1, #1
   168d4:	movt	r3, #1
   168d8:	bl	12418 <__assert_fail@plt>

000168dc <flatcc_builder_create_string@@Base>:
   168dc:	push	{r4, r5, r6, sl, fp, lr}
   168e0:	add	fp, sp, #16
   168e4:	sub	sp, sp, #80	; 0x50
   168e8:	str	r2, [fp, #-20]	; 0xffffffec
   168ec:	mvn	r5, r2
   168f0:	mov	r6, r0
   168f4:	sub	r3, fp, #20
   168f8:	cmp	r2, #0
   168fc:	add	lr, sp, #4
   16900:	ldr	ip, [r0, #136]	; 0x88
   16904:	mov	r0, #4
   16908:	str	r0, [sp, #16]
   1690c:	str	r3, [sp, #12]
   16910:	mov	r3, #1
   16914:	str	r0, [sp, #4]
   16918:	addne	r0, r2, #4
   1691c:	str	r3, [sp, #8]
   16920:	strne	r2, [sp, #24]
   16924:	movw	r2, #30982	; 0x7906
   16928:	movne	r3, #2
   1692c:	strne	r1, [sp, #20]
   16930:	strne	r3, [sp, #8]
   16934:	strne	r0, [sp, #4]
   16938:	movt	r2, #1
   1693c:	add	r5, ip, r5
   16940:	and	r5, r5, #3
   16944:	add	r5, r5, #1
   16948:	add	r1, r0, r5
   1694c:	add	r0, lr, r3, lsl #3
   16950:	str	r1, [sp, #4]
   16954:	cmp	r1, #0
   16958:	str	r2, [r0, #8]
   1695c:	add	r2, r3, #1
   16960:	str	r5, [r0, #12]
   16964:	str	r2, [sp, #8]
   16968:	ble	169bc <flatcc_builder_create_string@@Base+0xe0>
   1696c:	ldr	r0, [r6, #36]	; 0x24
   16970:	ldr	r4, [r6, #44]	; 0x2c
   16974:	sub	r5, ip, r1
   16978:	str	r1, [sp]
   1697c:	add	r1, lr, #8
   16980:	mov	r3, r5
   16984:	blx	r4
   16988:	cmp	r0, #0
   1698c:	streq	r5, [r6, #136]	; 0x88
   16990:	moveq	r0, r5
   16994:	subeq	sp, fp, #16
   16998:	popeq	{r4, r5, r6, sl, fp, pc}
   1699c:	movw	r0, #36030	; 0x8cbe
   169a0:	movw	r1, #31512	; 0x7b18
   169a4:	movw	r3, #35709	; 0x8b7d
   169a8:	movw	r2, #651	; 0x28b
   169ac:	movt	r0, #1
   169b0:	movt	r1, #1
   169b4:	movt	r3, #1
   169b8:	bl	12418 <__assert_fail@plt>
   169bc:	movw	r0, #36030	; 0x8cbe
   169c0:	movw	r1, #31512	; 0x7b18
   169c4:	movw	r3, #35709	; 0x8b7d
   169c8:	movw	r2, #647	; 0x287
   169cc:	movt	r0, #1
   169d0:	movt	r1, #1
   169d4:	movt	r3, #1
   169d8:	bl	12418 <__assert_fail@plt>

000169dc <flatcc_builder_create_string_str@@Base>:
   169dc:	push	{r4, r5, fp, lr}
   169e0:	add	fp, sp, #8
   169e4:	mov	r5, r0
   169e8:	mov	r0, r1
   169ec:	mov	r4, r1
   169f0:	bl	123dc <strlen@plt>
   169f4:	mov	r2, r0
   169f8:	mov	r0, r5
   169fc:	mov	r1, r4
   16a00:	pop	{r4, r5, fp, lr}
   16a04:	b	168dc <flatcc_builder_create_string@@Base>

00016a08 <flatcc_builder_create_string_strn@@Base>:
   16a08:	push	{r4, r5, r6, sl, fp, lr}
   16a0c:	add	fp, sp, #16
   16a10:	mov	r6, r0
   16a14:	mov	r5, r1
   16a18:	mov	r0, r1
   16a1c:	mov	r1, #0
   16a20:	mov	r4, r2
   16a24:	bl	12400 <memchr@plt>
   16a28:	cmp	r0, #0
   16a2c:	mov	r1, r5
   16a30:	subne	r4, r0, r5
   16a34:	mov	r0, r6
   16a38:	mov	r2, r4
   16a3c:	pop	{r4, r5, r6, sl, fp, lr}
   16a40:	b	168dc <flatcc_builder_create_string@@Base>

00016a44 <flatcc_builder_end_string@@Base>:
   16a44:	push	{r4, r5, fp, lr}
   16a48:	add	fp, sp, #8
   16a4c:	mov	r4, r0
   16a50:	ldr	r0, [r0, #32]
   16a54:	ldrh	r1, [r0, #14]
   16a58:	cmp	r1, #6
   16a5c:	bne	16b04 <flatcc_builder_end_string@@Base+0xc0>
   16a60:	ldr	r2, [r0, #20]
   16a64:	ldr	r0, [r4, #20]
   16a68:	cmp	r2, r0
   16a6c:	bne	16b1c <flatcc_builder_end_string@@Base+0xd8>
   16a70:	ldr	r1, [r4, #16]
   16a74:	mov	r0, r4
   16a78:	bl	168dc <flatcc_builder_create_string@@Base>
   16a7c:	mov	r5, r0
   16a80:	cmp	r0, #0
   16a84:	beq	16afc <flatcc_builder_end_string@@Base+0xb8>
   16a88:	ldr	r0, [r4, #16]
   16a8c:	ldr	r2, [r4, #20]
   16a90:	mov	r1, #0
   16a94:	bl	123f4 <memset@plt>
   16a98:	ldr	r0, [r4, #32]
   16a9c:	ldr	r1, [r4, #60]	; 0x3c
   16aa0:	ldr	ip, [r4, #64]	; 0x40
   16aa4:	ldr	r3, [r0, #8]
   16aa8:	str	r3, [r4, #20]
   16aac:	ldr	r3, [r0]
   16ab0:	str	r3, [r4, #28]
   16ab4:	add	r1, r1, r3
   16ab8:	ldr	r2, [r0, #4]
   16abc:	str	r1, [r4, #16]
   16ac0:	sub	r1, ip, r3
   16ac4:	cmp	r1, r2
   16ac8:	movhi	r1, r2
   16acc:	str	r1, [r4, #24]
   16ad0:	ldrh	r1, [r4, #130]	; 0x82
   16ad4:	ldrh	r2, [r4, #128]	; 0x80
   16ad8:	cmp	r2, r1
   16adc:	strhcc	r1, [r4, #128]	; 0x80
   16ae0:	ldrh	r1, [r0, #12]
   16ae4:	sub	r0, r0, #36	; 0x24
   16ae8:	str	r0, [r4, #32]
   16aec:	strh	r1, [r4, #130]	; 0x82
   16af0:	ldr	r0, [r4, #156]	; 0x9c
   16af4:	sub	r0, r0, #1
   16af8:	str	r0, [r4, #156]	; 0x9c
   16afc:	mov	r0, r5
   16b00:	pop	{r4, r5, fp, pc}
   16b04:	movw	r0, #32829	; 0x803d
   16b08:	movw	r1, #31512	; 0x7b18
   16b0c:	movw	r3, #35056	; 0x88f0
   16b10:	movw	r2, #1732	; 0x6c4
   16b14:	movt	r0, #1
   16b18:	b	16b30 <flatcc_builder_end_string@@Base+0xec>
   16b1c:	movw	r0, #35123	; 0x8933
   16b20:	movw	r1, #31512	; 0x7b18
   16b24:	movw	r3, #35056	; 0x88f0
   16b28:	movw	r2, #1733	; 0x6c5
   16b2c:	movt	r0, #1
   16b30:	movt	r1, #1
   16b34:	movt	r3, #1
   16b38:	bl	12418 <__assert_fail@plt>

00016b3c <flatcc_builder_string_edit@@Base>:
   16b3c:	ldr	r0, [r0, #16]
   16b40:	bx	lr

00016b44 <flatcc_builder_string_len@@Base>:
   16b44:	ldr	r0, [r0, #32]
   16b48:	ldr	r0, [r0, #20]
   16b4c:	bx	lr

00016b50 <flatcc_builder_table_edit@@Base>:
   16b50:	push	{fp, lr}
   16b54:	mov	fp, sp
   16b58:	ldr	r2, [r0, #32]
   16b5c:	ldrh	r2, [r2, #14]
   16b60:	cmp	r2, #3
   16b64:	ldreq	r2, [r0, #16]
   16b68:	ldreq	r0, [r0, #20]
   16b6c:	addeq	r0, r2, r0
   16b70:	subeq	r0, r0, r1
   16b74:	popeq	{fp, pc}
   16b78:	movw	r0, #33581	; 0x832d
   16b7c:	movw	r1, #31512	; 0x7b18
   16b80:	movw	r3, #35301	; 0x89e5
   16b84:	movw	r2, #1794	; 0x702
   16b88:	movt	r0, #1
   16b8c:	movt	r1, #1
   16b90:	movt	r3, #1
   16b94:	bl	12418 <__assert_fail@plt>

00016b98 <flatcc_builder_table_add_copy@@Base>:
   16b98:	push	{r4, r5, r6, sl, fp, lr}
   16b9c:	add	fp, sp, #16
   16ba0:	mov	r4, r3
   16ba4:	ldr	r3, [fp, #8]
   16ba8:	mov	r5, r2
   16bac:	mov	r2, r4
   16bb0:	bl	16064 <flatcc_builder_table_add@@Base>
   16bb4:	mov	r6, r0
   16bb8:	cmp	r0, #0
   16bbc:	beq	16bd0 <flatcc_builder_table_add_copy@@Base+0x38>
   16bc0:	mov	r0, r6
   16bc4:	mov	r1, r5
   16bc8:	mov	r2, r4
   16bcc:	bl	12388 <memcpy@plt>
   16bd0:	mov	r0, r6
   16bd4:	pop	{r4, r5, r6, sl, fp, pc}

00016bd8 <flatcc_builder_push_buffer_alignment@@Base>:
   16bd8:	ldrh	r1, [r0, #128]	; 0x80
   16bdc:	mov	r2, #4
   16be0:	strh	r2, [r0, #128]	; 0x80
   16be4:	mov	r0, r1
   16be8:	bx	lr

00016bec <flatcc_builder_pop_buffer_alignment@@Base>:
   16bec:	ldrh	r2, [r0, #128]	; 0x80
   16bf0:	cmp	r2, r1
   16bf4:	strhcc	r1, [r0, #128]	; 0x80
   16bf8:	bx	lr

00016bfc <flatcc_builder_get_buffer_alignment@@Base>:
   16bfc:	ldrh	r0, [r0, #128]	; 0x80
   16c00:	bx	lr

00016c04 <flatcc_builder_set_vtable_clustering@@Base>:
   16c04:	clz	r1, r1
   16c08:	lsr	r1, r1, #5
   16c0c:	str	r1, [r0, #180]	; 0xb4
   16c10:	bx	lr

00016c14 <flatcc_builder_set_block_align@@Base>:
   16c14:	strh	r1, [r0, #132]	; 0x84
   16c18:	bx	lr

00016c1c <flatcc_builder_get_level@@Base>:
   16c1c:	ldr	r0, [r0, #156]	; 0x9c
   16c20:	bx	lr

00016c24 <flatcc_builder_set_max_level@@Base>:
   16c24:	str	r1, [r0, #176]	; 0xb0
   16c28:	ldr	r2, [r0, #160]	; 0xa0
   16c2c:	cmp	r2, r1
   16c30:	strlt	r1, [r0, #160]	; 0xa0
   16c34:	bx	lr

00016c38 <flatcc_builder_get_buffer_size@@Base>:
   16c38:	ldr	r1, [r0, #136]	; 0x88
   16c3c:	ldr	r0, [r0, #140]	; 0x8c
   16c40:	sub	r0, r0, r1
   16c44:	bx	lr

00016c48 <flatcc_builder_get_buffer_start@@Base>:
   16c48:	ldr	r0, [r0, #136]	; 0x88
   16c4c:	bx	lr

00016c50 <flatcc_builder_get_buffer_end@@Base>:
   16c50:	ldr	r0, [r0, #140]	; 0x8c
   16c54:	bx	lr

00016c58 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16c58:	str	r1, [r0, #172]	; 0xac
   16c5c:	bx	lr

00016c60 <flatcc_builder_set_identifier@@Base>:
   16c60:	movw	r2, #30982	; 0x7906
   16c64:	cmp	r1, #0
   16c68:	movt	r2, #1
   16c6c:	movne	r2, r1
   16c70:	ldr	r1, [r2]
   16c74:	str	r1, [r0, #168]	; 0xa8
   16c78:	bx	lr

00016c7c <flatcc_builder_get_type@@Base>:
   16c7c:	ldr	r0, [r0, #32]
   16c80:	cmp	r0, #0
   16c84:	ldrhne	r0, [r0, #14]
   16c88:	moveq	r0, #0
   16c8c:	bx	lr

00016c90 <flatcc_builder_get_type_at@@Base>:
   16c90:	mov	r2, r0
   16c94:	mov	r0, #0
   16c98:	cmp	r1, #1
   16c9c:	blt	16cc0 <flatcc_builder_get_type_at@@Base+0x30>
   16ca0:	ldr	r3, [r2, #156]	; 0x9c
   16ca4:	cmp	r3, r1
   16ca8:	bxlt	lr
   16cac:	sub	r0, r1, r3
   16cb0:	ldr	r1, [r2, #32]
   16cb4:	add	r0, r0, r0, lsl #3
   16cb8:	add	r0, r1, r0, lsl #2
   16cbc:	ldrh	r0, [r0, #14]
   16cc0:	bx	lr

00016cc4 <flatcc_builder_get_direct_buffer@@Base>:
   16cc4:	ldr	r2, [r0, #184]	; 0xb8
   16cc8:	cmp	r2, #0
   16ccc:	beq	16ce0 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   16cd0:	ldr	r2, [r0, #188]	; 0xbc
   16cd4:	ldr	r3, [r0, #192]	; 0xc0
   16cd8:	cmp	r2, r3
   16cdc:	beq	16cf0 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   16ce0:	mov	r0, #0
   16ce4:	cmp	r1, #0
   16ce8:	strne	r0, [r1]
   16cec:	bx	lr
   16cf0:	cmp	r1, #0
   16cf4:	ldrne	r2, [r0, #212]	; 0xd4
   16cf8:	strne	r2, [r1]
   16cfc:	ldr	r0, [r0, #196]	; 0xc4
   16d00:	bx	lr

00016d04 <flatcc_builder_copy_buffer@@Base>:
   16d04:	push	{fp, lr}
   16d08:	mov	fp, sp
   16d0c:	ldr	r3, [r0, #184]	; 0xb8
   16d10:	cmp	r3, #0
   16d14:	beq	16d48 <flatcc_builder_copy_buffer@@Base+0x44>
   16d18:	add	r0, r0, #188	; 0xbc
   16d1c:	bl	17410 <flatcc_emitter_copy_buffer@@Base>
   16d20:	cmp	r0, #0
   16d24:	popne	{fp, pc}
   16d28:	movw	r0, #32108	; 0x7d6c
   16d2c:	movw	r1, #31512	; 0x7b18
   16d30:	movw	r3, #35440	; 0x8a70
   16d34:	movw	r2, #1926	; 0x786
   16d38:	movt	r0, #1
   16d3c:	movt	r1, #1
   16d40:	movt	r3, #1
   16d44:	bl	12418 <__assert_fail@plt>
   16d48:	mov	r0, #0
   16d4c:	pop	{fp, pc}

00016d50 <flatcc_builder_finalize_buffer@@Base>:
   16d50:	push	{r4, r5, r6, sl, fp, lr}
   16d54:	add	fp, sp, #16
   16d58:	mov	r4, r0
   16d5c:	ldr	r0, [r0, #136]	; 0x88
   16d60:	cmp	r1, #0
   16d64:	ldr	r2, [r4, #140]	; 0x8c
   16d68:	sub	r5, r2, r0
   16d6c:	mov	r0, r5
   16d70:	strne	r5, [r1]
   16d74:	bl	123ac <malloc@plt>
   16d78:	cmp	r0, #0
   16d7c:	beq	16dc0 <flatcc_builder_finalize_buffer@@Base+0x70>
   16d80:	mov	r6, r0
   16d84:	mov	r0, r4
   16d88:	mov	r2, r5
   16d8c:	mov	r1, r6
   16d90:	bl	16d04 <flatcc_builder_copy_buffer@@Base>
   16d94:	cmp	r0, #0
   16d98:	movne	r0, r6
   16d9c:	popne	{r4, r5, r6, sl, fp, pc}
   16da0:	movw	r0, #36030	; 0x8cbe
   16da4:	movw	r1, #31512	; 0x7b18
   16da8:	movw	r3, #35509	; 0x8ab5
   16dac:	movw	r2, #1948	; 0x79c
   16db0:	movt	r0, #1
   16db4:	movt	r1, #1
   16db8:	movt	r3, #1
   16dbc:	bl	12418 <__assert_fail@plt>
   16dc0:	movw	r0, #36030	; 0x8cbe
   16dc4:	movw	r1, #31512	; 0x7b18
   16dc8:	movw	r3, #35509	; 0x8ab5
   16dcc:	movw	r2, #1944	; 0x798
   16dd0:	movt	r0, #1
   16dd4:	movt	r1, #1
   16dd8:	movt	r3, #1
   16ddc:	bl	12418 <__assert_fail@plt>

00016de0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16de0:	push	{r4, r5, r6, r7, fp, lr}
   16de4:	add	fp, sp, #16
   16de8:	sub	sp, sp, #8
   16dec:	mov	r5, r0
   16df0:	mov	r4, r1
   16df4:	ldr	r0, [r0, #136]	; 0x88
   16df8:	ldr	r1, [r5, #140]	; 0x8c
   16dfc:	cmp	r4, #0
   16e00:	sub	r0, r1, r0
   16e04:	mov	r1, #0
   16e08:	strne	r0, [r4]
   16e0c:	ldrh	r2, [r5, #128]	; 0x80
   16e10:	str	r1, [sp, #4]
   16e14:	add	r0, r0, r2
   16e18:	cmp	r2, #4
   16e1c:	mov	r1, r2
   16e20:	rsb	r2, r2, #0
   16e24:	sub	r0, r0, #1
   16e28:	movls	r1, #4
   16e2c:	and	r7, r0, r2
   16e30:	add	r0, sp, #4
   16e34:	mov	r2, r7
   16e38:	bl	123e8 <posix_memalign@plt>
   16e3c:	ldr	r6, [sp, #4]
   16e40:	cmp	r0, #0
   16e44:	cmpne	r6, #0
   16e48:	bne	16e6c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   16e4c:	cmp	r6, #0
   16e50:	beq	16e74 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   16e54:	mov	r0, r5
   16e58:	mov	r1, r6
   16e5c:	mov	r2, r7
   16e60:	bl	16d04 <flatcc_builder_copy_buffer@@Base>
   16e64:	cmp	r0, #0
   16e68:	bne	16e80 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   16e6c:	mov	r0, r6
   16e70:	bl	1237c <free@plt>
   16e74:	mov	r6, #0
   16e78:	cmp	r4, #0
   16e7c:	strne	r6, [r4]
   16e80:	mov	r0, r6
   16e84:	sub	sp, fp, #16
   16e88:	pop	{r4, r5, r6, r7, fp, pc}

00016e8c <flatcc_builder_aligned_alloc@@Base>:
   16e8c:	push	{fp, lr}
   16e90:	mov	fp, sp
   16e94:	sub	sp, sp, #8
   16e98:	mov	r2, r1
   16e9c:	mov	r1, r0
   16ea0:	mov	r0, #0
   16ea4:	cmp	r1, #4
   16ea8:	str	r0, [sp, #4]
   16eac:	add	r0, sp, #4
   16eb0:	movls	r1, #4
   16eb4:	bl	123e8 <posix_memalign@plt>
   16eb8:	mov	r1, r0
   16ebc:	ldr	r0, [sp, #4]
   16ec0:	cmp	r1, #0
   16ec4:	cmpne	r0, #0
   16ec8:	beq	16ed8 <flatcc_builder_aligned_alloc@@Base+0x4c>
   16ecc:	bl	1237c <free@plt>
   16ed0:	mov	r0, #0
   16ed4:	str	r0, [sp, #4]
   16ed8:	mov	sp, fp
   16edc:	pop	{fp, pc}

00016ee0 <flatcc_builder_aligned_free@@Base>:
   16ee0:	b	1237c <free@plt>

00016ee4 <flatcc_builder_get_emit_context@@Base>:
   16ee4:	ldr	r0, [r0, #36]	; 0x24
   16ee8:	bx	lr
   16eec:	push	{r4, r5, r6, sl, fp, lr}
   16ef0:	add	fp, sp, #16
   16ef4:	sub	sp, sp, #8
   16ef8:	mov	r6, r2
   16efc:	ldr	r2, [r0, #28]
   16f00:	mov	r5, r0
   16f04:	ldr	r0, [r0, #40]	; 0x28
   16f08:	mov	r3, #1
   16f0c:	ldr	r4, [r5, #48]	; 0x30
   16f10:	str	r3, [sp]
   16f14:	mov	r3, #1
   16f18:	add	r2, r2, r1
   16f1c:	add	r1, r5, #60	; 0x3c
   16f20:	blx	r4
   16f24:	mov	r1, r0
   16f28:	mvn	r0, #0
   16f2c:	cmp	r1, #0
   16f30:	bne	16f64 <flatcc_builder_get_emit_context@@Base+0x80>
   16f34:	ldr	r0, [r5, #28]
   16f38:	ldr	r2, [r5, #60]	; 0x3c
   16f3c:	ldr	r3, [r5, #64]	; 0x40
   16f40:	ldr	r1, [r5, #32]
   16f44:	add	r2, r2, r0
   16f48:	sub	r0, r3, r0
   16f4c:	cmp	r0, r6
   16f50:	str	r2, [r5, #16]
   16f54:	movhi	r0, r6
   16f58:	str	r0, [r5, #24]
   16f5c:	mov	r0, #0
   16f60:	str	r6, [r1, #4]
   16f64:	sub	sp, fp, #16
   16f68:	pop	{r4, r5, r6, sl, fp, pc}

00016f6c <flatcc_emitter_recycle_page@@Base>:
   16f6c:	ldr	r3, [r0]
   16f70:	mov	r2, r0
   16f74:	mvn	r0, #0
   16f78:	cmp	r3, r1
   16f7c:	beq	16fbc <flatcc_emitter_recycle_page@@Base+0x50>
   16f80:	ldr	r2, [r2, #4]
   16f84:	cmp	r2, r1
   16f88:	bxeq	lr
   16f8c:	ldr	r0, [r1, #2944]	; 0xb80
   16f90:	ldr	r2, [r1, #2948]	; 0xb84
   16f94:	str	r2, [r0, #2948]	; 0xb84
   16f98:	ldr	r2, [r1, #2948]	; 0xb84
   16f9c:	str	r0, [r2, #2944]	; 0xb80
   16fa0:	ldr	r0, [r3, #2948]	; 0xb84
   16fa4:	str	r3, [r1, #2944]	; 0xb80
   16fa8:	str	r0, [r1, #2948]	; 0xb84
   16fac:	str	r1, [r0, #2944]	; 0xb80
   16fb0:	ldr	r0, [r1, #2944]	; 0xb80
   16fb4:	str	r1, [r0, #2948]	; 0xb84
   16fb8:	mov	r0, #0
   16fbc:	bx	lr

00016fc0 <flatcc_emitter_reset@@Base>:
   16fc0:	push	{r4, sl, fp, lr}
   16fc4:	add	fp, sp, #8
   16fc8:	ldr	r1, [r0]
   16fcc:	cmp	r1, #0
   16fd0:	beq	17088 <flatcc_emitter_reset@@Base+0xc8>
   16fd4:	mov	r4, r0
   16fd8:	add	r2, r1, #1472	; 0x5c0
   16fdc:	mov	r0, #1472	; 0x5c0
   16fe0:	mov	r3, #0
   16fe4:	stmib	r4, {r1, r2}
   16fe8:	str	r0, [r4, #12]
   16fec:	str	r2, [r4, #16]
   16ff0:	str	r0, [r4, #20]
   16ff4:	movw	r0, #64064	; 0xfa40
   16ff8:	movt	r0, #65535	; 0xffff
   16ffc:	str	r0, [r1, #2952]	; 0xb88
   17000:	ldr	r2, [r4, #32]
   17004:	ldr	r0, [r4, #24]
   17008:	cmp	r2, #0
   1700c:	moveq	r2, r0
   17010:	streq	r0, [r4, #32]
   17014:	str	r3, [r4, #24]
   17018:	add	r2, r2, r2, lsl #1
   1701c:	lsr	r2, r2, #2
   17020:	add	r0, r2, r0, lsr #2
   17024:	str	r0, [r4, #32]
   17028:	ldr	r2, [r4, #28]
   1702c:	cmp	r2, r0, lsl #1
   17030:	bls	17088 <flatcc_emitter_reset@@Base+0xc8>
   17034:	mov	r2, r1
   17038:	ldr	r0, [r2, #2944]!	; 0xb80
   1703c:	cmp	r0, r1
   17040:	popeq	{r4, sl, fp, pc}
   17044:	ldr	r3, [r0, #2944]	; 0xb80
   17048:	str	r3, [r2]
   1704c:	ldr	r2, [r0, #2944]	; 0xb80
   17050:	str	r1, [r2, #2948]	; 0xb84
   17054:	bl	1237c <free@plt>
   17058:	ldr	r0, [r4, #28]
   1705c:	ldr	r1, [r4, #32]
   17060:	sub	r0, r0, #2944	; 0xb80
   17064:	cmp	r0, r1, lsl #1
   17068:	str	r0, [r4, #28]
   1706c:	bls	17088 <flatcc_emitter_reset@@Base+0xc8>
   17070:	ldr	r1, [r4, #4]
   17074:	ldr	r3, [r4]
   17078:	mov	r2, r1
   1707c:	ldr	r0, [r2, #2944]!	; 0xb80
   17080:	cmp	r0, r3
   17084:	bne	17044 <flatcc_emitter_reset@@Base+0x84>
   17088:	pop	{r4, sl, fp, pc}

0001708c <flatcc_emitter_clear@@Base>:
   1708c:	push	{r4, r5, r6, sl, fp, lr}
   17090:	add	fp, sp, #16
   17094:	ldr	r5, [r0]
   17098:	cmp	r5, #0
   1709c:	beq	170ec <flatcc_emitter_clear@@Base+0x60>
   170a0:	mov	r4, r0
   170a4:	ldr	r0, [r5, #2948]	; 0xb84
   170a8:	mov	r6, #0
   170ac:	str	r6, [r0, #2944]	; 0xb80
   170b0:	ldr	r0, [r5, #2944]	; 0xb80
   170b4:	cmp	r0, #0
   170b8:	beq	170cc <flatcc_emitter_clear@@Base+0x40>
   170bc:	mov	r5, r0
   170c0:	ldr	r0, [r0, #2948]	; 0xb84
   170c4:	bl	1237c <free@plt>
   170c8:	b	170b0 <flatcc_emitter_clear@@Base+0x24>
   170cc:	mov	r0, r5
   170d0:	bl	1237c <free@plt>
   170d4:	vmov.i32	q8, #0	; 0x00000000
   170d8:	add	r0, r4, #16
   170dc:	vst1.32	{d16-d17}, [r0]
   170e0:	mov	r0, #32
   170e4:	vst1.32	{d16-d17}, [r4], r0
   170e8:	str	r6, [r4]
   170ec:	pop	{r4, r5, r6, sl, fp, pc}

000170f0 <flatcc_emitter@@Base>:
   170f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170f4:	add	fp, sp, #28
   170f8:	sub	sp, sp, #4
   170fc:	mov	r6, r0
   17100:	mov	r7, r1
   17104:	ldr	r0, [r0, #24]
   17108:	ldr	r1, [fp, #8]
   1710c:	mov	r4, r2
   17110:	cmn	r3, #1
   17114:	mov	r9, r6
   17118:	add	r0, r0, r1
   1711c:	str	r0, [r6, #24]
   17120:	ble	1725c <flatcc_emitter@@Base+0x16c>
   17124:	ldr	r0, [r9, #20]!
   17128:	cmp	r0, r1
   1712c:	bcs	173ac <flatcc_emitter@@Base+0x2bc>
   17130:	mov	r8, #0
   17134:	cmp	r4, #0
   17138:	beq	17404 <flatcc_emitter@@Base+0x314>
   1713c:	movw	sl, #64064	; 0xfa40
   17140:	movt	sl, #65535	; 0xffff
   17144:	ldr	r8, [r7, #4]
   17148:	cmp	r8, #0
   1714c:	beq	17248 <flatcc_emitter@@Base+0x158>
   17150:	ldr	r9, [r7]
   17154:	cmp	r8, r0
   17158:	mov	r5, r8
   1715c:	bls	17214 <flatcc_emitter@@Base+0x124>
   17160:	mov	r5, r0
   17164:	cmp	r5, #0
   17168:	bne	17214 <flatcc_emitter@@Base+0x124>
   1716c:	ldr	r5, [r6, #4]
   17170:	cmp	r5, #0
   17174:	beq	17188 <flatcc_emitter@@Base+0x98>
   17178:	ldr	r0, [r5, #2944]	; 0xb80
   1717c:	ldr	r1, [r6]
   17180:	cmp	r0, r1
   17184:	bne	171c0 <flatcc_emitter@@Base+0xd0>
   17188:	movw	r0, #2956	; 0xb8c
   1718c:	bl	123ac <malloc@plt>
   17190:	cmp	r0, #0
   17194:	beq	173bc <flatcc_emitter@@Base+0x2cc>
   17198:	ldr	r1, [r6, #28]
   1719c:	cmp	r5, #0
   171a0:	add	r1, r1, #2944	; 0xb80
   171a4:	str	r1, [r6, #28]
   171a8:	beq	171e4 <flatcc_emitter@@Base+0xf4>
   171ac:	ldr	r1, [r6]
   171b0:	str	r1, [r0, #2944]	; 0xb80
   171b4:	str	r5, [r0, #2948]	; 0xb84
   171b8:	str	r0, [r1, #2948]	; 0xb84
   171bc:	str	r0, [r5, #2944]	; 0xb80
   171c0:	mov	r5, #2944	; 0xb80
   171c4:	str	r0, [r6, #4]
   171c8:	str	r0, [r6, #16]
   171cc:	str	r5, [r6, #20]
   171d0:	ldr	r1, [r0, #2948]	; 0xb84
   171d4:	ldr	r1, [r1, #2952]	; 0xb88
   171d8:	add	r1, r1, #2944	; 0xb80
   171dc:	str	r1, [r0, #2952]	; 0xb88
   171e0:	b	17208 <flatcc_emitter@@Base+0x118>
   171e4:	mov	r5, #1472	; 0x5c0
   171e8:	add	r1, r0, #1472	; 0x5c0
   171ec:	str	r0, [r6]
   171f0:	stmib	r6, {r0, r1, r5}
   171f4:	str	r1, [r6, #16]
   171f8:	str	r5, [r6, #20]
   171fc:	str	r0, [r0, #2944]	; 0xb80
   17200:	str	r0, [r0, #2948]	; 0xb84
   17204:	str	sl, [r0, #2952]	; 0xb88
   17208:	cmp	r8, r5
   1720c:	bhi	17164 <flatcc_emitter@@Base+0x74>
   17210:	mov	r5, r8
   17214:	ldr	r0, [r6, #16]
   17218:	mov	r1, r9
   1721c:	mov	r2, r5
   17220:	bl	12388 <memcpy@plt>
   17224:	ldr	r0, [r6, #16]
   17228:	ldr	r1, [r6, #20]
   1722c:	add	r9, r9, r5
   17230:	subs	r8, r8, r5
   17234:	add	r2, r0, r5
   17238:	sub	r0, r1, r5
   1723c:	str	r2, [r6, #16]
   17240:	str	r0, [r6, #20]
   17244:	bne	17154 <flatcc_emitter@@Base+0x64>
   17248:	subs	r4, r4, #1
   1724c:	add	r7, r7, #8
   17250:	bne	17144 <flatcc_emitter@@Base+0x54>
   17254:	mov	r8, #0
   17258:	b	17404 <flatcc_emitter@@Base+0x314>
   1725c:	ldr	r0, [r9, #12]!
   17260:	cmp	r0, r1
   17264:	bcs	173c4 <flatcc_emitter@@Base+0x2d4>
   17268:	mov	r8, #0
   1726c:	cmp	r4, #0
   17270:	beq	17404 <flatcc_emitter@@Base+0x314>
   17274:	add	r0, r7, r4, lsl #3
   17278:	ldr	sl, [r0, #-4]
   1727c:	sub	r1, r0, #8
   17280:	str	r1, [sp]
   17284:	cmp	sl, #0
   17288:	beq	1739c <flatcc_emitter@@Base+0x2ac>
   1728c:	ldr	r0, [sp]
   17290:	ldr	r0, [r0]
   17294:	add	r7, r0, sl
   17298:	ldr	r1, [r9]
   1729c:	cmp	sl, r1
   172a0:	bls	1736c <flatcc_emitter@@Base+0x27c>
   172a4:	cmp	r1, #0
   172a8:	mov	r5, r1
   172ac:	bne	17370 <flatcc_emitter@@Base+0x280>
   172b0:	ldr	r5, [r6]
   172b4:	cmp	r5, #0
   172b8:	beq	172dc <flatcc_emitter@@Base+0x1ec>
   172bc:	ldr	r0, [r5, #2948]	; 0xb84
   172c0:	ldr	r1, [r6, #4]
   172c4:	cmp	r0, r1
   172c8:	beq	172dc <flatcc_emitter@@Base+0x1ec>
   172cc:	ldr	r1, [r5, #2952]	; 0xb88
   172d0:	sub	r1, r1, #2944	; 0xb80
   172d4:	str	r1, [r0, #2952]	; 0xb88
   172d8:	b	17314 <flatcc_emitter@@Base+0x224>
   172dc:	movw	r0, #2956	; 0xb8c
   172e0:	bl	123ac <malloc@plt>
   172e4:	cmp	r0, #0
   172e8:	beq	173bc <flatcc_emitter@@Base+0x2cc>
   172ec:	ldr	r1, [r6, #28]
   172f0:	cmp	r5, #0
   172f4:	add	r1, r1, #2944	; 0xb80
   172f8:	str	r1, [r6, #28]
   172fc:	beq	17338 <flatcc_emitter@@Base+0x248>
   17300:	ldr	r1, [r6, #4]
   17304:	str	r5, [r0, #2944]	; 0xb80
   17308:	str	r1, [r0, #2948]	; 0xb84
   1730c:	str	r0, [r5, #2948]	; 0xb84
   17310:	str	r0, [r1, #2944]	; 0xb80
   17314:	mov	r1, #2944	; 0xb80
   17318:	add	r2, r0, #2944	; 0xb80
   1731c:	str	r0, [r6]
   17320:	str	r2, [r6, #8]
   17324:	str	r1, [r6, #12]
   17328:	ldr	r2, [r0, #2944]	; 0xb80
   1732c:	ldr	r2, [r2, #2952]	; 0xb88
   17330:	sub	r2, r2, #2944	; 0xb80
   17334:	b	17364 <flatcc_emitter@@Base+0x274>
   17338:	add	r2, r0, #1472	; 0x5c0
   1733c:	mov	r1, #1472	; 0x5c0
   17340:	str	r0, [r6]
   17344:	stmib	r6, {r0, r2}
   17348:	str	r1, [r6, #12]
   1734c:	str	r2, [r6, #16]
   17350:	movw	r2, #64064	; 0xfa40
   17354:	str	r1, [r6, #20]
   17358:	str	r0, [r0, #2944]	; 0xb80
   1735c:	str	r0, [r0, #2948]	; 0xb84
   17360:	movt	r2, #65535	; 0xffff
   17364:	str	r2, [r0, #2952]	; 0xb88
   17368:	b	1729c <flatcc_emitter@@Base+0x1ac>
   1736c:	mov	r5, sl
   17370:	sub	r0, r1, r5
   17374:	sub	r7, r7, r5
   17378:	mov	r2, r5
   1737c:	str	r0, [r6, #12]
   17380:	mov	r1, r7
   17384:	ldr	r0, [r6, #8]
   17388:	sub	r0, r0, r5
   1738c:	str	r0, [r6, #8]
   17390:	bl	12388 <memcpy@plt>
   17394:	subs	sl, sl, r5
   17398:	bne	17298 <flatcc_emitter@@Base+0x1a8>
   1739c:	ldr	r0, [sp]
   173a0:	subs	r4, r4, #1
   173a4:	bne	17278 <flatcc_emitter@@Base+0x188>
   173a8:	b	17404 <flatcc_emitter@@Base+0x314>
   173ac:	ldr	r5, [r6, #16]
   173b0:	add	r2, r5, r1
   173b4:	str	r2, [r6, #16]
   173b8:	b	173d0 <flatcc_emitter@@Base+0x2e0>
   173bc:	mvn	r8, #0
   173c0:	b	17404 <flatcc_emitter@@Base+0x314>
   173c4:	ldr	r2, [r6, #8]
   173c8:	sub	r5, r2, r1
   173cc:	str	r5, [r6, #8]
   173d0:	sub	r0, r0, r1
   173d4:	mov	r8, #0
   173d8:	cmp	r4, #0
   173dc:	str	r0, [r9]
   173e0:	beq	17404 <flatcc_emitter@@Base+0x314>
   173e4:	ldm	r7, {r1, r2}
   173e8:	mov	r0, r5
   173ec:	bl	12388 <memcpy@plt>
   173f0:	ldr	r0, [r7, #4]
   173f4:	add	r7, r7, #8
   173f8:	subs	r4, r4, #1
   173fc:	add	r5, r5, r0
   17400:	bne	173e4 <flatcc_emitter@@Base+0x2f4>
   17404:	mov	r0, r8
   17408:	sub	sp, fp, #28
   1740c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017410 <flatcc_emitter_copy_buffer@@Base>:
   17410:	push	{r4, r5, r6, sl, fp, lr}
   17414:	add	fp, sp, #16
   17418:	mov	r3, r2
   1741c:	ldr	r2, [r0, #24]
   17420:	mov	r5, #0
   17424:	cmp	r2, r3
   17428:	bhi	174c4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   1742c:	mov	r4, r0
   17430:	ldr	r0, [r0]
   17434:	cmp	r0, #0
   17438:	beq	174c4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   1743c:	mov	r6, r1
   17440:	ldr	r1, [r4, #4]
   17444:	cmp	r0, r1
   17448:	beq	174b4 <flatcc_emitter_copy_buffer@@Base+0xa4>
   1744c:	ldr	r0, [r4, #12]
   17450:	ldr	r1, [r4, #8]
   17454:	rsb	r5, r0, #2944	; 0xb80
   17458:	mov	r0, r6
   1745c:	mov	r2, r5
   17460:	bl	12388 <memcpy@plt>
   17464:	ldm	r4, {r0, r1}
   17468:	add	r5, r6, r5
   1746c:	ldr	r6, [r0, #2944]	; 0xb80
   17470:	cmp	r6, r1
   17474:	beq	1749c <flatcc_emitter_copy_buffer@@Base+0x8c>
   17478:	mov	r0, r5
   1747c:	mov	r1, r6
   17480:	mov	r2, #2944	; 0xb80
   17484:	bl	12388 <memcpy@plt>
   17488:	ldr	r6, [r6, #2944]	; 0xb80
   1748c:	ldr	r0, [r4, #4]
   17490:	add	r5, r5, #2944	; 0xb80
   17494:	cmp	r6, r0
   17498:	bne	17478 <flatcc_emitter_copy_buffer@@Base+0x68>
   1749c:	ldr	r0, [r4, #20]
   174a0:	mov	r1, r6
   174a4:	rsb	r2, r0, #2944	; 0xb80
   174a8:	mov	r0, r5
   174ac:	bl	12388 <memcpy@plt>
   174b0:	b	174c4 <flatcc_emitter_copy_buffer@@Base+0xb4>
   174b4:	ldr	r1, [r4, #8]
   174b8:	mov	r0, r6
   174bc:	bl	12388 <memcpy@plt>
   174c0:	mov	r5, r6
   174c4:	mov	r0, r5
   174c8:	pop	{r4, r5, r6, sl, fp, pc}

000174cc <__libc_csu_init@@Base>:
   174cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174d0:	mov	r7, r0
   174d4:	ldr	r6, [pc, #72]	; 17524 <__libc_csu_init@@Base+0x58>
   174d8:	ldr	r5, [pc, #72]	; 17528 <__libc_csu_init@@Base+0x5c>
   174dc:	add	r6, pc, r6
   174e0:	add	r5, pc, r5
   174e4:	sub	r6, r6, r5
   174e8:	mov	r8, r1
   174ec:	mov	r9, r2
   174f0:	bl	12350 <strcmp@plt-0x20>
   174f4:	asrs	r6, r6, #2
   174f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   174fc:	mov	r4, #0
   17500:	add	r4, r4, #1
   17504:	ldr	r3, [r5], #4
   17508:	mov	r2, r9
   1750c:	mov	r1, r8
   17510:	mov	r0, r7
   17514:	blx	r3
   17518:	cmp	r6, r4
   1751c:	bne	17500 <__libc_csu_init@@Base+0x34>
   17520:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17524:	andeq	r1, r1, r8, lsr #20
   17528:	andeq	r1, r1, r0, lsr #20

0001752c <__libc_csu_fini@@Base>:
   1752c:	bx	lr

Disassembly of section .fini:

00017530 <.fini>:
   17530:	push	{r3, lr}
   17534:	pop	{r3, pc}
