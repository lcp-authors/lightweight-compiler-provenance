
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

000144f4 <.init>:
   144f4:	push	{r3, lr}
   144f8:	bl	15218 <_start@@Base+0x3c>
   144fc:	pop	{r3, pc}

Disassembly of section .plt:

00014500 <raise@plt-0x14>:
   14500:	push	{lr}		; (str lr, [sp, #-4]!)
   14504:	ldr	lr, [pc, #4]	; 14510 <raise@plt-0x4>
   14508:	add	lr, pc, lr
   1450c:	ldr	pc, [lr, #8]!
   14510:	strdeq	pc, [r3], -r0

00014514 <raise@plt>:
   14514:	add	ip, pc, #0, 12
   14518:	add	ip, ip, #258048	; 0x3f000
   1451c:	ldr	pc, [ip, #2800]!	; 0xaf0

00014520 <strcmp@plt>:
   14520:	add	ip, pc, #0, 12
   14524:	add	ip, ip, #258048	; 0x3f000
   14528:	ldr	pc, [ip, #2792]!	; 0xae8

0001452c <memmove@plt>:
   1452c:	add	ip, pc, #0, 12
   14530:	add	ip, ip, #258048	; 0x3f000
   14534:	ldr	pc, [ip, #2784]!	; 0xae0

00014538 <free@plt>:
   14538:	add	ip, pc, #0, 12
   1453c:	add	ip, ip, #258048	; 0x3f000
   14540:	ldr	pc, [ip, #2776]!	; 0xad8

00014544 <memcpy@plt>:
   14544:	add	ip, pc, #0, 12
   14548:	add	ip, ip, #258048	; 0x3f000
   1454c:	ldr	pc, [ip, #2768]!	; 0xad0

00014550 <memcmp@plt>:
   14550:	add	ip, pc, #0, 12
   14554:	add	ip, ip, #258048	; 0x3f000
   14558:	ldr	pc, [ip, #2760]!	; 0xac8

0001455c <realloc@plt>:
   1455c:	add	ip, pc, #0, 12
   14560:	add	ip, ip, #258048	; 0x3f000
   14564:	ldr	pc, [ip, #2752]!	; 0xac0

00014568 <fwrite@plt>:
   14568:	add	ip, pc, #0, 12
   1456c:	add	ip, ip, #258048	; 0x3f000
   14570:	ldr	pc, [ip, #2744]!	; 0xab8

00014574 <malloc@plt>:
   14574:	add	ip, pc, #0, 12
   14578:	add	ip, ip, #258048	; 0x3f000
   1457c:	ldr	pc, [ip, #2736]!	; 0xab0

00014580 <__libc_start_main@plt>:
   14580:	add	ip, pc, #0, 12
   14584:	add	ip, ip, #258048	; 0x3f000
   14588:	ldr	pc, [ip, #2728]!	; 0xaa8

0001458c <__gmon_start__@plt>:
   1458c:	add	ip, pc, #0, 12
   14590:	add	ip, ip, #258048	; 0x3f000
   14594:	ldr	pc, [ip, #2720]!	; 0xaa0

00014598 <strlen@plt>:
   14598:	add	ip, pc, #0, 12
   1459c:	add	ip, ip, #258048	; 0x3f000
   145a0:	ldr	pc, [ip, #2712]!	; 0xa98

000145a4 <fprintf@plt>:
   145a4:	add	ip, pc, #0, 12
   145a8:	add	ip, ip, #258048	; 0x3f000
   145ac:	ldr	pc, [ip, #2704]!	; 0xa90

000145b0 <posix_memalign@plt>:
   145b0:	add	ip, pc, #0, 12
   145b4:	add	ip, ip, #258048	; 0x3f000
   145b8:	ldr	pc, [ip, #2696]!	; 0xa88

000145bc <memset@plt>:
   145bc:	add	ip, pc, #0, 12
   145c0:	add	ip, ip, #258048	; 0x3f000
   145c4:	ldr	pc, [ip, #2688]!	; 0xa80

000145c8 <strncpy@plt>:
   145c8:	add	ip, pc, #0, 12
   145cc:	add	ip, ip, #258048	; 0x3f000
   145d0:	ldr	pc, [ip, #2680]!	; 0xa78

000145d4 <strtod@plt>:
   145d4:	add	ip, pc, #0, 12
   145d8:	add	ip, ip, #258048	; 0x3f000
   145dc:	ldr	pc, [ip, #2672]!	; 0xa70

000145e0 <memchr@plt>:
   145e0:	add	ip, pc, #0, 12
   145e4:	add	ip, ip, #258048	; 0x3f000
   145e8:	ldr	pc, [ip, #2664]!	; 0xa68

000145ec <fputc@plt>:
   145ec:	add	ip, pc, #0, 12
   145f0:	add	ip, ip, #258048	; 0x3f000
   145f4:	ldr	pc, [ip, #2656]!	; 0xa60

000145f8 <sprintf@plt>:
   145f8:	add	ip, pc, #0, 12
   145fc:	add	ip, ip, #258048	; 0x3f000
   14600:	ldr	pc, [ip, #2648]!	; 0xa58

00014604 <abort@plt>:
   14604:	add	ip, pc, #0, 12
   14608:	add	ip, ip, #258048	; 0x3f000
   1460c:	ldr	pc, [ip, #2640]!	; 0xa50

00014610 <__assert_fail@plt>:
   14610:	add	ip, pc, #0, 12
   14614:	add	ip, ip, #258048	; 0x3f000
   14618:	ldr	pc, [ip, #2632]!	; 0xa48

Disassembly of section .text:

00014620 <main@@Base-0x2cc>:
   14620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14624:	sub	sp, sp, #44	; 0x2c
   14628:	mov	r7, #0
   1462c:	ldr	r8, [sp, #80]	; 0x50
   14630:	mov	r6, #0
   14634:	cmp	r1, r2
   14638:	strd	r6, [r8]
   1463c:	mov	r5, r2
   14640:	mov	fp, r3
   14644:	mov	r7, r0
   14648:	moveq	r4, r2
   1464c:	beq	14670 <__assert_fail@plt+0x60>
   14650:	ldrb	r3, [r1]
   14654:	mov	r4, r1
   14658:	cmp	r3, #34	; 0x22
   1465c:	addeq	r4, r1, #1
   14660:	beq	14670 <__assert_fail@plt+0x60>
   14664:	mov	r3, #5
   14668:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1466c:	mov	r4, r0
   14670:	sub	r3, r5, r4
   14674:	cmp	r3, #1
   14678:	ble	1469c <__assert_fail@plt+0x8c>
   1467c:	ldrb	r3, [r4]
   14680:	cmp	r3, #32
   14684:	bhi	146b0 <__assert_fail@plt+0xa0>
   14688:	bne	1469c <__assert_fail@plt+0x8c>
   1468c:	ldrb	r3, [r4, #1]
   14690:	cmp	r3, #32
   14694:	addhi	r4, r4, #1
   14698:	bhi	146b0 <__assert_fail@plt+0xa0>
   1469c:	mov	r1, r4
   146a0:	mov	r2, r5
   146a4:	mov	r0, r7
   146a8:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   146ac:	mov	r4, r0
   146b0:	cmp	r5, r4
   146b4:	beq	147a8 <__assert_fail@plt+0x198>
   146b8:	mov	r3, #0
   146bc:	mov	r2, #0
   146c0:	add	sl, sp, #24
   146c4:	strd	r2, [sp, #8]
   146c8:	add	r3, sp, #28
   146cc:	str	r3, [sp, #16]
   146d0:	add	r3, sp, #32
   146d4:	str	r3, [sp, #20]
   146d8:	mov	r9, fp
   146dc:	ldr	r3, [sp, #16]
   146e0:	mov	r2, r5
   146e4:	str	r3, [sp, #4]
   146e8:	ldr	r3, [sp, #20]
   146ec:	mov	r1, r4
   146f0:	str	r3, [sp]
   146f4:	mov	r0, r7
   146f8:	ldr	r6, [r9]
   146fc:	mov	r3, sl
   14700:	blx	r6
   14704:	cmp	r5, r0
   14708:	beq	147a8 <__assert_fail@plt+0x198>
   1470c:	cmp	r4, r0
   14710:	bne	1473c <__assert_fail@plt+0x12c>
   14714:	ldr	r3, [r9, #4]!
   14718:	cmp	r3, #0
   1471c:	bne	146dc <__assert_fail@plt+0xcc>
   14720:	mov	r2, r5
   14724:	mov	r1, r4
   14728:	mov	r0, r7
   1472c:	mov	r3, #23
   14730:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   14734:	mov	r5, r0
   14738:	b	147a8 <__assert_fail@plt+0x198>
   1473c:	ldr	r3, [sp, #24]
   14740:	mov	r6, r0
   14744:	cmp	r3, #0
   14748:	beq	1479c <__assert_fail@plt+0x18c>
   1474c:	mov	r3, #8
   14750:	mov	r2, r5
   14754:	mov	r1, r6
   14758:	mov	r0, r7
   1475c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   14760:	cmp	r5, r0
   14764:	beq	147a8 <__assert_fail@plt+0x198>
   14768:	ldrd	r2, [r8]
   1476c:	ldrd	r0, [sp, #8]
   14770:	ldr	ip, [sp, #28]
   14774:	adds	r0, r0, r2
   14778:	adc	r1, r1, r3
   1477c:	mov	r2, r0
   14780:	mov	r3, r1
   14784:	cmp	ip, #0
   14788:	strd	r2, [r8]
   1478c:	movne	r4, r6
   14790:	bne	146d8 <__assert_fail@plt+0xc8>
   14794:	mov	r5, r6
   14798:	b	147a8 <__assert_fail@plt+0x198>
   1479c:	ldrd	r2, [sp, #32]
   147a0:	strd	r2, [sp, #8]
   147a4:	b	14768 <__assert_fail@plt+0x158>
   147a8:	mov	r0, r5
   147ac:	add	sp, sp, #44	; 0x2c
   147b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147b4:	ldr	r3, [pc, #28]	; 147d8 <__assert_fail@plt+0x1c8>
   147b8:	ldr	r1, [pc, #28]	; 147dc <__assert_fail@plt+0x1cc>
   147bc:	ldr	r0, [pc, #28]	; 147e0 <__assert_fail@plt+0x1d0>
   147c0:	push	{r4, lr}
   147c4:	add	r3, pc, r3
   147c8:	mov	r2, #308	; 0x134
   147cc:	add	r1, pc, r1
   147d0:	add	r0, pc, r0
   147d4:	bl	14610 <__assert_fail@plt>
   147d8:	ldrdeq	ip, [r2], -r8
   147dc:	andeq	ip, r2, r0, lsr #26
   147e0:	andeq	ip, r2, r4, lsr #27
   147e4:	ldr	r3, [pc, #32]	; 1480c <__assert_fail@plt+0x1fc>
   147e8:	ldr	r1, [pc, #32]	; 14810 <__assert_fail@plt+0x200>
   147ec:	ldr	r0, [pc, #32]	; 14814 <__assert_fail@plt+0x204>
   147f0:	add	r3, pc, r3
   147f4:	push	{r4, lr}
   147f8:	add	r3, r3, #16
   147fc:	ldr	r2, [pc, #20]	; 14818 <__assert_fail@plt+0x208>
   14800:	add	r1, pc, r1
   14804:	add	r0, pc, r0
   14808:	bl	14610 <__assert_fail@plt>
   1480c:	andeq	ip, r2, ip, lsr #11
   14810:	andeq	ip, r2, ip, ror #25
   14814:	andeq	ip, r2, r0, ror sp
   14818:	andeq	r0, r0, r1, lsr #5
   1481c:	ldr	r3, [pc, #32]	; 14844 <__assert_fail@plt+0x234>
   14820:	ldr	r1, [pc, #32]	; 14848 <__assert_fail@plt+0x238>
   14824:	ldr	r0, [pc, #32]	; 1484c <__assert_fail@plt+0x23c>
   14828:	add	r3, pc, r3
   1482c:	push	{r4, lr}
   14830:	add	r3, r3, #28
   14834:	ldr	r2, [pc, #20]	; 14850 <__assert_fail@plt+0x240>
   14838:	add	r1, pc, r1
   1483c:	add	r0, pc, r0
   14840:	bl	14610 <__assert_fail@plt>
   14844:	andeq	ip, r2, r4, ror r5
   14848:			; <UNDEFINED> instruction: 0x0002ccb4
   1484c:	andeq	ip, r2, r8, lsr sp
   14850:	andeq	r0, r0, r7, lsl #5
   14854:	ldr	r3, [pc, #32]	; 1487c <__assert_fail@plt+0x26c>
   14858:	ldr	r1, [pc, #32]	; 14880 <__assert_fail@plt+0x270>
   1485c:	ldr	r0, [pc, #32]	; 14884 <__assert_fail@plt+0x274>
   14860:	add	r3, pc, r3
   14864:	push	{r4, lr}
   14868:	mov	r2, #892	; 0x37c
   1486c:	add	r3, r3, #40	; 0x28
   14870:	add	r1, pc, r1
   14874:	add	r0, pc, r0
   14878:	bl	14610 <__assert_fail@plt>
   1487c:	andeq	ip, r2, ip, lsr r5
   14880:	andeq	ip, r2, ip, ror ip
   14884:	ldrdeq	ip, [r2], -r8
   14888:	ldr	r3, [pc, #28]	; 148ac <__assert_fail@plt+0x29c>
   1488c:	ldr	r1, [pc, #28]	; 148b0 <__assert_fail@plt+0x2a0>
   14890:	ldr	r0, [pc, #28]	; 148b4 <__assert_fail@plt+0x2a4>
   14894:	push	{r4, lr}
   14898:	add	r3, pc, r3
   1489c:	mov	r2, #260	; 0x104
   148a0:	add	r1, pc, r1
   148a4:	add	r0, pc, r0
   148a8:	bl	14610 <__assert_fail@plt>
   148ac:	andeq	sp, r2, r8, lsl #10
   148b0:	andeq	sp, r2, ip, lsl #26
   148b4:	andeq	sp, r2, r8, ror sp
   148b8:	ldr	r3, [pc, #32]	; 148e0 <__assert_fail@plt+0x2d0>
   148bc:	ldr	r1, [pc, #32]	; 148e4 <__assert_fail@plt+0x2d4>
   148c0:	ldr	r0, [pc, #32]	; 148e8 <__assert_fail@plt+0x2d8>
   148c4:	add	r3, pc, r3
   148c8:	push	{r4, lr}
   148cc:	mov	r2, #260	; 0x104
   148d0:	add	r3, r3, #204	; 0xcc
   148d4:	add	r1, pc, r1
   148d8:	add	r0, pc, r0
   148dc:	bl	14610 <__assert_fail@plt>
   148e0:	andeq	lr, r2, ip, asr r1
   148e4:	ldrdeq	sp, [r2], -r8
   148e8:	andeq	sp, r2, r4, asr #26

000148ec <main@@Base>:
   148ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148f0:	sub	sp, sp, #20
   148f4:	bl	2526c <edge_case_tests@@Base>
   148f8:	ldr	r7, [pc, #1892]	; 15064 <main@@Base+0x778>
   148fc:	ldr	r6, [pc, #1892]	; 15068 <main@@Base+0x77c>
   14900:	mov	r4, #0
   14904:	add	r6, pc, r6
   14908:	add	r7, pc, r7
   1490c:	ldr	r8, [pc, #1880]	; 1506c <main@@Base+0x780>
   14910:	ldr	sl, [pc, #1880]	; 15070 <main@@Base+0x784>
   14914:	add	r8, pc, r8
   14918:	add	sl, pc, sl
   1491c:	ldr	r9, [pc, #1872]	; 15074 <main@@Base+0x788>
   14920:	ldr	fp, [pc, #1872]	; 15078 <main@@Base+0x78c>
   14924:	add	r9, pc, r9
   14928:	add	fp, pc, fp
   1492c:	mov	r5, r0
   14930:	bl	25480 <error_case_tests@@Base>
   14934:	orr	r5, r5, r0
   14938:	bl	25aa0 <union_vector_tests@@Base>
   1493c:	orr	r5, r5, r0
   14940:	bl	2570c <base64_tests@@Base>
   14944:	orr	r5, r5, r0
   14948:	bl	258e8 <mixed_type_union_tests@@Base>
   1494c:	ldr	r3, [pc, #1832]	; 1507c <main@@Base+0x790>
   14950:	ldr	r1, [pc, #1832]	; 15080 <main@@Base+0x794>
   14954:	mov	r2, r7
   14958:	str	r3, [sp, #8]
   1495c:	str	r4, [sp, #4]
   14960:	mov	r3, r4
   14964:	str	r4, [sp]
   14968:	add	r1, pc, r1
   1496c:	orr	r5, r5, r0
   14970:	mov	r0, r6
   14974:	bl	24d60 <test_json@@Base>
   14978:	mov	r1, #528	; 0x210
   1497c:	str	r1, [sp, #8]
   14980:	ldr	r1, [pc, #1788]	; 15084 <main@@Base+0x798>
   14984:	mov	r3, r4
   14988:	mov	r2, r8
   1498c:	str	r4, [sp, #4]
   14990:	str	r4, [sp]
   14994:	add	r1, pc, r1
   14998:	orr	r5, r5, r0
   1499c:	mov	r0, r6
   149a0:	bl	24d60 <test_json@@Base>
   149a4:	ldr	r1, [pc, #1756]	; 15088 <main@@Base+0x79c>
   149a8:	mov	r3, r4
   149ac:	str	r1, [sp, #8]
   149b0:	ldr	r1, [pc, #1748]	; 1508c <main@@Base+0x7a0>
   149b4:	mov	r2, sl
   149b8:	str	r4, [sp, #4]
   149bc:	str	r4, [sp]
   149c0:	add	r1, pc, r1
   149c4:	orr	r5, r5, r0
   149c8:	mov	r0, r6
   149cc:	bl	24d60 <test_json@@Base>
   149d0:	ldr	r1, [pc, #1720]	; 15090 <main@@Base+0x7a4>
   149d4:	mov	r3, r4
   149d8:	str	r1, [sp, #8]
   149dc:	ldr	r1, [pc, #1712]	; 15094 <main@@Base+0x7a8>
   149e0:	mov	r2, r9
   149e4:	str	r4, [sp, #4]
   149e8:	str	r4, [sp]
   149ec:	add	r1, pc, r1
   149f0:	orr	r5, r5, r0
   149f4:	mov	r0, r6
   149f8:	bl	24d60 <test_json@@Base>
   149fc:	ldr	r1, [pc, #1684]	; 15098 <main@@Base+0x7ac>
   14a00:	mov	r3, r4
   14a04:	str	r1, [sp, #8]
   14a08:	ldr	r1, [pc, #1676]	; 1509c <main@@Base+0x7b0>
   14a0c:	mov	r2, r9
   14a10:	str	r4, [sp, #4]
   14a14:	str	r4, [sp]
   14a18:	add	r1, pc, r1
   14a1c:	orr	r5, r5, r0
   14a20:	mov	r0, r6
   14a24:	bl	24d60 <test_json@@Base>
   14a28:	mov	r1, #540	; 0x21c
   14a2c:	str	r1, [sp, #8]
   14a30:	ldr	r1, [pc, #1640]	; 150a0 <main@@Base+0x7b4>
   14a34:	mov	r3, r4
   14a38:	mov	r2, r8
   14a3c:	str	r4, [sp, #4]
   14a40:	str	r4, [sp]
   14a44:	add	r1, pc, r1
   14a48:	orr	r5, r5, r0
   14a4c:	mov	r0, r6
   14a50:	bl	24d60 <test_json@@Base>
   14a54:	ldr	r1, [pc, #1608]	; 150a4 <main@@Base+0x7b8>
   14a58:	mov	r3, r4
   14a5c:	str	r1, [sp, #8]
   14a60:	ldr	r1, [pc, #1600]	; 150a8 <main@@Base+0x7bc>
   14a64:	mov	r2, sl
   14a68:	str	r4, [sp, #4]
   14a6c:	str	r4, [sp]
   14a70:	add	r1, pc, r1
   14a74:	orr	r5, r5, r0
   14a78:	mov	r0, r6
   14a7c:	bl	24d60 <test_json@@Base>
   14a80:	ldr	r1, [pc, #1572]	; 150ac <main@@Base+0x7c0>
   14a84:	mov	r3, r4
   14a88:	str	r1, [sp, #8]
   14a8c:	ldr	r1, [pc, #1564]	; 150b0 <main@@Base+0x7c4>
   14a90:	mov	r2, r7
   14a94:	str	r4, [sp, #4]
   14a98:	str	r4, [sp]
   14a9c:	add	r1, pc, r1
   14aa0:	orr	r5, r5, r0
   14aa4:	mov	r0, r6
   14aa8:	bl	24d60 <test_json@@Base>
   14aac:	ldr	r1, [pc, #1536]	; 150b4 <main@@Base+0x7c8>
   14ab0:	mov	r3, r4
   14ab4:	str	r1, [sp, #8]
   14ab8:	ldr	r1, [pc, #1528]	; 150b8 <main@@Base+0x7cc>
   14abc:	mov	r2, r7
   14ac0:	str	r4, [sp, #4]
   14ac4:	str	r4, [sp]
   14ac8:	add	r1, pc, r1
   14acc:	orr	r5, r5, r0
   14ad0:	mov	r0, r6
   14ad4:	bl	24d60 <test_json@@Base>
   14ad8:	ldr	r1, [pc, #1500]	; 150bc <main@@Base+0x7d0>
   14adc:	mov	r3, r4
   14ae0:	str	r1, [sp, #8]
   14ae4:	ldr	r1, [pc, #1492]	; 150c0 <main@@Base+0x7d4>
   14ae8:	mov	r2, r8
   14aec:	str	r4, [sp, #4]
   14af0:	str	r4, [sp]
   14af4:	add	r1, pc, r1
   14af8:	orr	r5, r5, r0
   14afc:	mov	r0, r6
   14b00:	bl	24d60 <test_json@@Base>
   14b04:	mov	r1, #604	; 0x25c
   14b08:	str	r1, [sp, #8]
   14b0c:	ldr	r1, [pc, #1456]	; 150c4 <main@@Base+0x7d8>
   14b10:	mov	r2, sl
   14b14:	mov	r3, r4
   14b18:	str	r4, [sp, #4]
   14b1c:	str	r4, [sp]
   14b20:	add	r1, pc, r1
   14b24:	orr	r5, r5, r0
   14b28:	mov	r0, r6
   14b2c:	bl	24d60 <test_json@@Base>
   14b30:	ldr	r2, [pc, #1424]	; 150c8 <main@@Base+0x7dc>
   14b34:	ldr	r1, [pc, #1424]	; 150cc <main@@Base+0x7e0>
   14b38:	str	r2, [sp, #8]
   14b3c:	ldr	r2, [pc, #1420]	; 150d0 <main@@Base+0x7e4>
   14b40:	mov	r3, r4
   14b44:	str	r4, [sp, #4]
   14b48:	str	r4, [sp]
   14b4c:	add	r2, pc, r2
   14b50:	add	r1, pc, r1
   14b54:	orr	r5, r5, r0
   14b58:	mov	r0, r6
   14b5c:	bl	24d60 <test_json@@Base>
   14b60:	ldr	r1, [pc, #1388]	; 150d4 <main@@Base+0x7e8>
   14b64:	mov	r2, r9
   14b68:	str	r1, [sp, #8]
   14b6c:	ldr	r1, [pc, #1380]	; 150d8 <main@@Base+0x7ec>
   14b70:	mov	r3, r4
   14b74:	str	r4, [sp, #4]
   14b78:	str	r4, [sp]
   14b7c:	add	r1, pc, r1
   14b80:	orr	r5, r5, r0
   14b84:	mov	r0, r6
   14b88:	bl	24d60 <test_json@@Base>
   14b8c:	ldr	r2, [pc, #1352]	; 150dc <main@@Base+0x7f0>
   14b90:	ldr	r1, [pc, #1352]	; 150e0 <main@@Base+0x7f4>
   14b94:	str	r2, [sp, #8]
   14b98:	ldr	r2, [pc, #1348]	; 150e4 <main@@Base+0x7f8>
   14b9c:	mov	r3, r4
   14ba0:	str	r4, [sp, #4]
   14ba4:	str	r4, [sp]
   14ba8:	add	r2, pc, r2
   14bac:	add	r1, pc, r1
   14bb0:	orr	r5, r5, r0
   14bb4:	mov	r0, r6
   14bb8:	bl	24d60 <test_json@@Base>
   14bbc:	mov	r2, #616	; 0x268
   14bc0:	str	r2, [sp, #8]
   14bc4:	ldr	r1, [pc, #1308]	; 150e8 <main@@Base+0x7fc>
   14bc8:	ldr	r2, [pc, #1308]	; 150ec <main@@Base+0x800>
   14bcc:	mov	r3, r4
   14bd0:	str	r4, [sp, #4]
   14bd4:	str	r4, [sp]
   14bd8:	add	r2, pc, r2
   14bdc:	add	r1, pc, r1
   14be0:	orr	r5, r5, r0
   14be4:	mov	r0, r6
   14be8:	bl	24d60 <test_json@@Base>
   14bec:	ldr	r2, [pc, #1276]	; 150f0 <main@@Base+0x804>
   14bf0:	ldr	r1, [pc, #1276]	; 150f4 <main@@Base+0x808>
   14bf4:	str	r2, [sp, #8]
   14bf8:	ldr	r2, [pc, #1272]	; 150f8 <main@@Base+0x80c>
   14bfc:	mov	r3, r4
   14c00:	str	r4, [sp, #4]
   14c04:	str	r4, [sp]
   14c08:	add	r2, pc, r2
   14c0c:	add	r1, pc, r1
   14c10:	orr	r5, r5, r0
   14c14:	mov	r0, r6
   14c18:	bl	24d60 <test_json@@Base>
   14c1c:	ldr	r1, [pc, #1240]	; 150fc <main@@Base+0x810>
   14c20:	mov	r3, r4
   14c24:	str	r1, [sp, #8]
   14c28:	ldr	r1, [pc, #1232]	; 15100 <main@@Base+0x814>
   14c2c:	mov	r2, r8
   14c30:	str	r4, [sp, #4]
   14c34:	str	r4, [sp]
   14c38:	add	r1, pc, r1
   14c3c:	orr	r5, r5, r0
   14c40:	mov	r0, r6
   14c44:	bl	24d60 <test_json@@Base>
   14c48:	ldr	r1, [pc, #1204]	; 15104 <main@@Base+0x818>
   14c4c:	mov	r2, r8
   14c50:	str	r1, [sp, #8]
   14c54:	ldr	r1, [pc, #1196]	; 15108 <main@@Base+0x81c>
   14c58:	mov	r3, r4
   14c5c:	str	r4, [sp, #4]
   14c60:	str	r4, [sp]
   14c64:	add	r1, pc, r1
   14c68:	ldr	r8, [pc, #1180]	; 1510c <main@@Base+0x820>
   14c6c:	add	r8, pc, r8
   14c70:	orr	r5, r5, r0
   14c74:	mov	r0, r6
   14c78:	bl	24d60 <test_json@@Base>
   14c7c:	mov	ip, #628	; 0x274
   14c80:	mov	r3, r4
   14c84:	mov	r2, fp
   14c88:	mov	r1, r8
   14c8c:	str	ip, [sp, #8]
   14c90:	str	r4, [sp, #4]
   14c94:	str	r4, [sp]
   14c98:	orr	r5, r5, r0
   14c9c:	mov	r0, r6
   14ca0:	bl	24d60 <test_json@@Base>
   14ca4:	ldr	ip, [pc, #1124]	; 15110 <main@@Base+0x824>
   14ca8:	mov	r2, fp
   14cac:	str	ip, [sp, #8]
   14cb0:	mov	r1, r8
   14cb4:	mov	r3, r4
   14cb8:	str	r4, [sp, #4]
   14cbc:	str	r4, [sp]
   14cc0:	ldr	r8, [pc, #1100]	; 15114 <main@@Base+0x828>
   14cc4:	add	r8, pc, r8
   14cc8:	orr	r5, r5, r0
   14ccc:	mov	r0, r6
   14cd0:	bl	24d60 <test_json@@Base>
   14cd4:	ldr	r2, [pc, #1084]	; 15118 <main@@Base+0x82c>
   14cd8:	ldr	r1, [pc, #1084]	; 1511c <main@@Base+0x830>
   14cdc:	str	r2, [sp, #8]
   14ce0:	ldr	r2, [pc, #1080]	; 15120 <main@@Base+0x834>
   14ce4:	mov	r3, r4
   14ce8:	str	r4, [sp, #4]
   14cec:	str	r4, [sp]
   14cf0:	add	r2, pc, r2
   14cf4:	add	r1, pc, r1
   14cf8:	orr	r5, r5, r0
   14cfc:	mov	r0, r6
   14d00:	bl	24d60 <test_json@@Base>
   14d04:	ldr	r2, [pc, #1048]	; 15124 <main@@Base+0x838>
   14d08:	ldr	r1, [pc, #1048]	; 15128 <main@@Base+0x83c>
   14d0c:	str	r2, [sp, #8]
   14d10:	ldr	r2, [pc, #1044]	; 1512c <main@@Base+0x840>
   14d14:	mov	r3, r4
   14d18:	str	r4, [sp, #4]
   14d1c:	str	r4, [sp]
   14d20:	add	r2, pc, r2
   14d24:	add	r1, pc, r1
   14d28:	orr	r5, r5, r0
   14d2c:	mov	r0, r6
   14d30:	bl	24d60 <test_json@@Base>
   14d34:	ldr	r2, [pc, #1012]	; 15130 <main@@Base+0x844>
   14d38:	ldr	r1, [pc, #1012]	; 15134 <main@@Base+0x848>
   14d3c:	str	r2, [sp, #8]
   14d40:	ldr	r2, [pc, #1008]	; 15138 <main@@Base+0x84c>
   14d44:	mov	r3, r4
   14d48:	str	r4, [sp, #4]
   14d4c:	str	r4, [sp]
   14d50:	add	r2, pc, r2
   14d54:	add	r1, pc, r1
   14d58:	orr	r5, r5, r0
   14d5c:	mov	r0, r6
   14d60:	bl	24d60 <test_json@@Base>
   14d64:	ldr	r1, [pc, #976]	; 1513c <main@@Base+0x850>
   14d68:	mov	r3, r4
   14d6c:	str	r1, [sp, #8]
   14d70:	ldr	r1, [pc, #968]	; 15140 <main@@Base+0x854>
   14d74:	mov	r2, r7
   14d78:	str	r4, [sp, #4]
   14d7c:	str	r4, [sp]
   14d80:	add	r1, pc, r1
   14d84:	orr	r5, r5, r0
   14d88:	mov	r0, r6
   14d8c:	bl	24d60 <test_json@@Base>
   14d90:	ldr	r1, [pc, #940]	; 15144 <main@@Base+0x858>
   14d94:	mov	r3, r4
   14d98:	str	r1, [sp, #8]
   14d9c:	ldr	r1, [pc, #932]	; 15148 <main@@Base+0x85c>
   14da0:	mov	r2, r7
   14da4:	str	r4, [sp, #4]
   14da8:	str	r4, [sp]
   14dac:	add	r1, pc, r1
   14db0:	orr	r5, r5, r0
   14db4:	mov	r0, r6
   14db8:	bl	24d60 <test_json@@Base>
   14dbc:	mov	r2, #716	; 0x2cc
   14dc0:	str	r2, [sp, #8]
   14dc4:	ldr	r1, [pc, #896]	; 1514c <main@@Base+0x860>
   14dc8:	ldr	r2, [pc, #896]	; 15150 <main@@Base+0x864>
   14dcc:	mov	r3, r4
   14dd0:	str	r4, [sp, #4]
   14dd4:	str	r4, [sp]
   14dd8:	add	r2, pc, r2
   14ddc:	add	r1, pc, r1
   14de0:	orr	r5, r5, r0
   14de4:	mov	r0, r6
   14de8:	bl	24d60 <test_json@@Base>
   14dec:	ldr	r2, [pc, #864]	; 15154 <main@@Base+0x868>
   14df0:	ldr	r1, [pc, #864]	; 15158 <main@@Base+0x86c>
   14df4:	str	r2, [sp, #8]
   14df8:	ldr	r2, [pc, #860]	; 1515c <main@@Base+0x870>
   14dfc:	mov	r3, r4
   14e00:	str	r4, [sp, #4]
   14e04:	str	r4, [sp]
   14e08:	add	r2, pc, r2
   14e0c:	add	r1, pc, r1
   14e10:	orr	r5, r5, r0
   14e14:	mov	r0, r6
   14e18:	bl	24d60 <test_json@@Base>
   14e1c:	ldr	r2, [pc, #828]	; 15160 <main@@Base+0x874>
   14e20:	ldr	r1, [pc, #828]	; 15164 <main@@Base+0x878>
   14e24:	str	r2, [sp, #8]
   14e28:	ldr	r2, [pc, #824]	; 15168 <main@@Base+0x87c>
   14e2c:	mov	r3, r4
   14e30:	str	r4, [sp, #4]
   14e34:	str	r4, [sp]
   14e38:	add	r2, pc, r2
   14e3c:	add	r1, pc, r1
   14e40:	orr	r5, r5, r0
   14e44:	mov	r0, r6
   14e48:	bl	24d60 <test_json@@Base>
   14e4c:	ldr	r1, [pc, #792]	; 1516c <main@@Base+0x880>
   14e50:	mov	r3, r4
   14e54:	str	r1, [sp, #8]
   14e58:	ldr	r1, [pc, #784]	; 15170 <main@@Base+0x884>
   14e5c:	mov	r2, r8
   14e60:	str	r4, [sp, #4]
   14e64:	str	r4, [sp]
   14e68:	add	r1, pc, r1
   14e6c:	orr	r5, r5, r0
   14e70:	mov	r0, r6
   14e74:	bl	24d60 <test_json@@Base>
   14e78:	ldr	r1, [pc, #756]	; 15174 <main@@Base+0x888>
   14e7c:	mov	r2, r8
   14e80:	str	r1, [sp, #8]
   14e84:	ldr	r1, [pc, #748]	; 15178 <main@@Base+0x88c>
   14e88:	mov	r3, r4
   14e8c:	str	r4, [sp, #4]
   14e90:	str	r4, [sp]
   14e94:	add	r1, pc, r1
   14e98:	orr	r5, r5, r0
   14e9c:	mov	r0, r6
   14ea0:	bl	24d60 <test_json@@Base>
   14ea4:	ldr	r2, [pc, #720]	; 1517c <main@@Base+0x890>
   14ea8:	ldr	r1, [pc, #720]	; 15180 <main@@Base+0x894>
   14eac:	str	r2, [sp, #8]
   14eb0:	ldr	r2, [pc, #716]	; 15184 <main@@Base+0x898>
   14eb4:	mov	r3, r4
   14eb8:	str	r4, [sp, #4]
   14ebc:	str	r4, [sp]
   14ec0:	add	r2, pc, r2
   14ec4:	add	r1, pc, r1
   14ec8:	orr	r5, r5, r0
   14ecc:	mov	r0, r6
   14ed0:	bl	24d60 <test_json@@Base>
   14ed4:	ldr	r2, [pc, #684]	; 15188 <main@@Base+0x89c>
   14ed8:	ldr	r1, [pc, #684]	; 1518c <main@@Base+0x8a0>
   14edc:	str	r2, [sp, #8]
   14ee0:	ldr	r2, [pc, #680]	; 15190 <main@@Base+0x8a4>
   14ee4:	mov	r3, r4
   14ee8:	str	r4, [sp, #4]
   14eec:	str	r4, [sp]
   14ef0:	add	r2, pc, r2
   14ef4:	add	r1, pc, r1
   14ef8:	orr	r5, r5, r0
   14efc:	mov	r0, r6
   14f00:	bl	24d60 <test_json@@Base>
   14f04:	mov	r2, #776	; 0x308
   14f08:	str	r2, [sp, #8]
   14f0c:	ldr	r1, [pc, #640]	; 15194 <main@@Base+0x8a8>
   14f10:	ldr	r2, [pc, #640]	; 15198 <main@@Base+0x8ac>
   14f14:	mov	r3, r4
   14f18:	str	r4, [sp, #4]
   14f1c:	str	r4, [sp]
   14f20:	add	r2, pc, r2
   14f24:	add	r1, pc, r1
   14f28:	orr	r5, r5, r0
   14f2c:	mov	r0, r6
   14f30:	bl	24d60 <test_json@@Base>
   14f34:	ldr	r1, [pc, #608]	; 1519c <main@@Base+0x8b0>
   14f38:	mov	r2, r7
   14f3c:	str	r1, [sp, #8]
   14f40:	ldr	r1, [pc, #600]	; 151a0 <main@@Base+0x8b4>
   14f44:	mov	r3, r4
   14f48:	str	r4, [sp, #4]
   14f4c:	str	r4, [sp]
   14f50:	add	r1, pc, r1
   14f54:	orr	r5, r5, r0
   14f58:	mov	r0, r6
   14f5c:	bl	24d60 <test_json@@Base>
   14f60:	ldr	r2, [pc, #572]	; 151a4 <main@@Base+0x8b8>
   14f64:	ldr	r1, [pc, #572]	; 151a8 <main@@Base+0x8bc>
   14f68:	str	r2, [sp, #8]
   14f6c:	ldr	r2, [pc, #568]	; 151ac <main@@Base+0x8c0>
   14f70:	mov	r3, r4
   14f74:	str	r4, [sp, #4]
   14f78:	str	r4, [sp]
   14f7c:	add	r2, pc, r2
   14f80:	add	r1, pc, r1
   14f84:	orr	r5, r5, r0
   14f88:	mov	r0, r6
   14f8c:	bl	24d60 <test_json@@Base>
   14f90:	ldr	r2, [pc, #536]	; 151b0 <main@@Base+0x8c4>
   14f94:	ldr	r1, [pc, #536]	; 151b4 <main@@Base+0x8c8>
   14f98:	str	r2, [sp, #8]
   14f9c:	ldr	r2, [pc, #532]	; 151b8 <main@@Base+0x8cc>
   14fa0:	mov	r3, r4
   14fa4:	str	r4, [sp, #4]
   14fa8:	str	r4, [sp]
   14fac:	add	r2, pc, r2
   14fb0:	add	r1, pc, r1
   14fb4:	orr	r5, r5, r0
   14fb8:	mov	r0, r6
   14fbc:	bl	24d60 <test_json@@Base>
   14fc0:	mov	r2, #796	; 0x31c
   14fc4:	str	r2, [sp, #8]
   14fc8:	ldr	r1, [pc, #492]	; 151bc <main@@Base+0x8d0>
   14fcc:	ldr	r2, [pc, #492]	; 151c0 <main@@Base+0x8d4>
   14fd0:	mov	r3, r4
   14fd4:	str	r4, [sp, #4]
   14fd8:	str	r4, [sp]
   14fdc:	add	r2, pc, r2
   14fe0:	add	r1, pc, r1
   14fe4:	orr	r5, r5, r0
   14fe8:	mov	r0, r6
   14fec:	bl	24d60 <test_json@@Base>
   14ff0:	ldr	r2, [pc, #460]	; 151c4 <main@@Base+0x8d8>
   14ff4:	ldr	r1, [pc, #460]	; 151c8 <main@@Base+0x8dc>
   14ff8:	str	r2, [sp, #8]
   14ffc:	ldr	r2, [pc, #456]	; 151cc <main@@Base+0x8e0>
   15000:	mov	r3, r4
   15004:	str	r4, [sp, #4]
   15008:	str	r4, [sp]
   1500c:	add	r2, pc, r2
   15010:	add	r1, pc, r1
   15014:	orr	r5, r5, r0
   15018:	mov	r0, r6
   1501c:	bl	24d60 <test_json@@Base>
   15020:	ldr	r2, [pc, #424]	; 151d0 <main@@Base+0x8e4>
   15024:	ldr	r1, [pc, #424]	; 151d4 <main@@Base+0x8e8>
   15028:	str	r2, [sp, #8]
   1502c:	ldr	r2, [pc, #420]	; 151d8 <main@@Base+0x8ec>
   15030:	mov	r3, r4
   15034:	str	r4, [sp, #4]
   15038:	str	r4, [sp]
   1503c:	add	r2, pc, r2
   15040:	add	r1, pc, r1
   15044:	orr	r5, r5, r0
   15048:	mov	r0, r6
   1504c:	bl	24d60 <test_json@@Base>
   15050:	orrs	r3, r5, r0
   15054:	mvnne	r0, #0
   15058:	moveq	r0, r4
   1505c:	add	sp, sp, #20
   15060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15064:	andeq	r9, r2, ip, lsr #21
   15068:	ldrdeq	pc, [r3], -ip
   1506c:	andeq	fp, r2, r8, ror r4
   15070:	andeq	fp, r2, r0, asr #9
   15074:	andeq	fp, r2, r0, lsl #10
   15078:	andeq	fp, r2, r0, lsl #16
   1507c:	andeq	r0, r0, sp, lsl #4
   15080:	andeq	fp, r2, ip, lsl #8
   15084:	andeq	fp, r2, ip, lsl r4
   15088:	andeq	r0, r0, r3, lsl r2
   1508c:	andeq	fp, r2, ip, lsr r4
   15090:	andeq	r0, r0, r6, lsl r2
   15094:	andeq	fp, r2, r4, ror #8
   15098:	andeq	r0, r0, r9, lsl r2
   1509c:	andeq	fp, r2, ip, ror #8
   150a0:	andeq	fp, r2, ip, ror r4
   150a4:	andeq	r0, r0, pc, lsl r2
   150a8:	andeq	fp, r2, r8, ror r4
   150ac:	andeq	r0, r0, r3, lsr #4
   150b0:	andeq	fp, r2, r8, ror r4
   150b4:	andeq	r0, r0, r7, lsr #4
   150b8:	andeq	r9, r2, r0, lsl #17
   150bc:	andeq	r0, r0, r9, asr r2
   150c0:	andeq	fp, r2, r8, asr #8
   150c4:	andeq	fp, r2, r0, asr #8
   150c8:	andeq	r0, r0, pc, asr r2
   150cc:	andeq	fp, r2, ip, asr r4
   150d0:	andeq	fp, r2, r8, lsr r4
   150d4:	andeq	r0, r0, r2, ror #4
   150d8:	andeq	fp, r2, r4, asr r4
   150dc:	andeq	r0, r0, r5, ror #4
   150e0:	andeq	fp, r2, r8, ror #8
   150e4:	andeq	fp, r2, ip, asr #8
   150e8:	andeq	fp, r2, ip, ror r4
   150ec:	andeq	fp, r2, r0, ror #8
   150f0:	andeq	r0, r0, fp, ror #4
   150f4:	muleq	r2, r0, r4
   150f8:	andeq	fp, r2, r4, ror r4
   150fc:	andeq	r0, r0, lr, ror #4
   15100:	andeq	fp, r2, r8, lsl #9
   15104:	andeq	r0, r0, r1, ror r2
   15108:	andeq	fp, r2, r8, lsl #9
   1510c:	ldrdeq	fp, [r2], -r8
   15110:	andeq	r0, r0, r7, ror r2
   15114:	andeq	fp, r2, r4, lsl #17
   15118:	andeq	r0, r0, sl, ror r2
   1511c:	andeq	fp, r2, r4, asr #9
   15120:	andeq	fp, r2, r0, lsl #9
   15124:	andeq	r0, r0, lr, ror r2
   15128:	andeq	fp, r2, r4, lsr r5
   1512c:	andeq	fp, r2, ip, ror #9
   15130:	andeq	r0, r0, r2, lsl #5
   15134:	andeq	fp, r2, r0, asr #11
   15138:	andeq	fp, r2, r0, ror #10
   1513c:	andeq	r0, r0, r6, lsl #5
   15140:	andeq	fp, r2, r4, lsl #12
   15144:	andeq	r0, r0, r9, lsl #5
   15148:	andeq	fp, r2, r4, lsl #12
   1514c:	andeq	fp, r2, ip, asr r6
   15150:	andeq	fp, r2, r0, lsl #12
   15154:	ldrdeq	r0, [r0], -fp
   15158:	andeq	fp, r2, ip, asr #13
   1515c:	andeq	fp, r2, r0, lsr #13
   15160:	ldrdeq	r0, [r0], -lr
   15164:	strdeq	fp, [r2], -r0
   15168:	andeq	fp, r2, r0, ror #13
   1516c:	andeq	r0, r0, r2, ror #5
   15170:	andeq	fp, r2, r4, lsr #14
   15174:	andeq	r0, r0, lr, ror #5
   15178:	andeq	fp, r2, r0, asr #14
   1517c:	strdeq	r0, [r0], -lr
   15180:	ldrdeq	fp, [r2], -r4
   15184:			; <UNDEFINED> instruction: 0x0002b7b4
   15188:	andeq	r0, r0, r2, lsl #6
   1518c:	strdeq	fp, [r2], -r8
   15190:	ldrdeq	fp, [r2], -r0
   15194:	andeq	fp, r2, r8, ror #16
   15198:	strdeq	fp, [r2], -ip
   1519c:	andeq	r0, r0, sp, lsl #6
   151a0:			; <UNDEFINED> instruction: 0x0002b8b8
   151a4:	andeq	r0, r0, r2, lsl r3
   151a8:	andeq	fp, r2, r0, ror r9
   151ac:	andeq	fp, r2, r4, lsl #18
   151b0:	andeq	r0, r0, r7, lsl r3
   151b4:	andeq	fp, r2, ip, lsr sl
   151b8:	andeq	fp, r2, r0, asr #19
   151bc:	andeq	fp, r2, r8, lsl #22
   151c0:	muleq	r2, ip, sl
   151c4:	andeq	r0, r0, r1, lsr #6
   151c8:	ldrdeq	fp, [r2], -r4
   151cc:	andeq	fp, r2, r8, asr fp
   151d0:	andeq	r0, r0, r6, lsr #6
   151d4:			; <UNDEFINED> instruction: 0x0002bcb4
   151d8:	andeq	fp, r2, r4, lsr ip

000151dc <_start@@Base>:
   151dc:	mov	fp, #0
   151e0:	mov	lr, #0
   151e4:	pop	{r1}		; (ldr r1, [sp], #4)
   151e8:	mov	r2, sp
   151ec:	push	{r2}		; (str r2, [sp, #-4]!)
   151f0:	push	{r0}		; (str r0, [sp, #-4]!)
   151f4:	ldr	ip, [pc, #16]	; 1520c <_start@@Base+0x30>
   151f8:	push	{ip}		; (str ip, [sp, #-4]!)
   151fc:	ldr	r0, [pc, #12]	; 15210 <_start@@Base+0x34>
   15200:	ldr	r3, [pc, #12]	; 15214 <_start@@Base+0x38>
   15204:	bl	14580 <__libc_start_main@plt>
   15208:	bl	14604 <abort@plt>
   1520c:	andeq	sp, r3, r8, asr #25
   15210:	andeq	r4, r1, ip, ror #17
   15214:	andeq	sp, r3, r8, ror #24
   15218:	ldr	r3, [pc, #20]	; 15234 <_start@@Base+0x58>
   1521c:	ldr	r2, [pc, #20]	; 15238 <_start@@Base+0x5c>
   15220:	add	r3, pc, r3
   15224:	ldr	r2, [r3, r2]
   15228:	cmp	r2, #0
   1522c:	bxeq	lr
   15230:	b	1458c <__gmon_start__@plt>
   15234:	ldrdeq	lr, [r3], -r8
   15238:	andeq	r0, r0, ip, rrx
   1523c:	ldr	r3, [pc, #28]	; 15260 <_start@@Base+0x84>
   15240:	ldr	r0, [pc, #28]	; 15264 <_start@@Base+0x88>
   15244:	sub	r3, r3, r0
   15248:	cmp	r3, #6
   1524c:	bxls	lr
   15250:	ldr	r3, [pc, #16]	; 15268 <_start@@Base+0x8c>
   15254:	cmp	r3, #0
   15258:	bxeq	lr
   1525c:	bx	r3
   15260:	andeq	r4, r5, fp, asr #7
   15264:	andeq	r4, r5, r8, asr #7
   15268:	andeq	r0, r0, r0
   1526c:	ldr	r1, [pc, #36]	; 15298 <_start@@Base+0xbc>
   15270:	ldr	r0, [pc, #36]	; 1529c <_start@@Base+0xc0>
   15274:	sub	r1, r1, r0
   15278:	asr	r1, r1, #2
   1527c:	add	r1, r1, r1, lsr #31
   15280:	asrs	r1, r1, #1
   15284:	bxeq	lr
   15288:	ldr	r3, [pc, #16]	; 152a0 <_start@@Base+0xc4>
   1528c:	cmp	r3, #0
   15290:	bxeq	lr
   15294:	bx	r3
   15298:	andeq	r4, r5, r8, asr #7
   1529c:	andeq	r4, r5, r8, asr #7
   152a0:	andeq	r0, r0, r0
   152a4:	push	{r4, lr}
   152a8:	ldr	r4, [pc, #24]	; 152c8 <_start@@Base+0xec>
   152ac:	ldrb	r3, [r4]
   152b0:	cmp	r3, #0
   152b4:	popne	{r4, pc}
   152b8:	bl	1523c <_start@@Base+0x60>
   152bc:	mov	r3, #1
   152c0:	strb	r3, [r4]
   152c4:	pop	{r4, pc}
   152c8:	andeq	r4, r5, r8, asr #7
   152cc:	ldr	r0, [pc, #40]	; 152fc <_start@@Base+0x120>
   152d0:	ldr	r3, [r0]
   152d4:	cmp	r3, #0
   152d8:	bne	152e0 <_start@@Base+0x104>
   152dc:	b	1526c <_start@@Base+0x90>
   152e0:	ldr	r3, [pc, #24]	; 15300 <_start@@Base+0x124>
   152e4:	cmp	r3, #0
   152e8:	beq	152dc <_start@@Base+0x100>
   152ec:	push	{r4, lr}
   152f0:	blx	r3
   152f4:	pop	{r4, lr}
   152f8:	b	1526c <_start@@Base+0x90>
   152fc:	andeq	r3, r5, r4, ror #29
	...
   15308:	sub	r1, r1, r0
   1530c:	cmp	r1, #8
   15310:	push	{r4, r5, r6, r7}
   15314:	bls	153b0 <_start@@Base+0x1d4>
   15318:	ldrb	r4, [r0, #7]
   1531c:	mov	r5, #0
   15320:	ldrb	r6, [r0, #6]
   15324:	lsr	r3, r6, #24
   15328:	lsl	r2, r6, #8
   1532c:	orr	r4, r4, r2
   15330:	orr	r5, r5, r3
   15334:	ldrb	r6, [r0, #5]
   15338:	lsr	r3, r6, #16
   1533c:	lsl	r2, r6, #16
   15340:	orr	r4, r4, r2
   15344:	orr	r5, r5, r3
   15348:	ldrb	r6, [r0, #4]
   1534c:	lsr	r3, r6, #8
   15350:	lsl	r2, r6, #24
   15354:	orr	r4, r4, r2
   15358:	orr	r5, r5, r3
   1535c:	ldrb	r3, [r0, #3]
   15360:	mov	r2, #0
   15364:	orr	r4, r4, r2
   15368:	orr	r5, r5, r3
   1536c:	ldrb	r6, [r0, #2]
   15370:	mov	r2, #0
   15374:	orr	r4, r4, r2
   15378:	lsl	r3, r6, #8
   1537c:	orr	r5, r5, r3
   15380:	ldrb	r6, [r0, #1]
   15384:	mov	r2, #0
   15388:	orr	r2, r2, r4
   1538c:	lsl	r3, r6, #16
   15390:	orr	r3, r3, r5
   15394:	ldrb	r4, [r0]
   15398:	mov	r0, #0
   1539c:	orr	r0, r0, r2
   153a0:	lsl	r1, r4, #24
   153a4:	orr	r1, r1, r3
   153a8:	pop	{r4, r5, r6, r7}
   153ac:	bx	lr
   153b0:	sub	r1, r1, #1
   153b4:	cmp	r1, #7
   153b8:	addls	pc, pc, r1, lsl #2
   153bc:	b	15434 <_start@@Base+0x258>
   153c0:	b	153ec <_start@@Base+0x210>
   153c4:	b	153f8 <_start@@Base+0x21c>
   153c8:	b	15404 <_start@@Base+0x228>
   153cc:	b	15410 <_start@@Base+0x234>
   153d0:	b	1541c <_start@@Base+0x240>
   153d4:	b	15428 <_start@@Base+0x24c>
   153d8:	b	153e0 <_start@@Base+0x204>
   153dc:	b	15318 <_start@@Base+0x13c>
   153e0:	mov	r4, #0
   153e4:	mov	r5, #0
   153e8:	b	15320 <_start@@Base+0x144>
   153ec:	mov	r2, #0
   153f0:	mov	r3, #0
   153f4:	b	15394 <_start@@Base+0x1b8>
   153f8:	mov	r4, #0
   153fc:	mov	r5, #0
   15400:	b	15380 <_start@@Base+0x1a4>
   15404:	mov	r4, #0
   15408:	mov	r5, #0
   1540c:	b	1536c <_start@@Base+0x190>
   15410:	mov	r4, #0
   15414:	mov	r5, #0
   15418:	b	1535c <_start@@Base+0x180>
   1541c:	mov	r4, #0
   15420:	mov	r5, #0
   15424:	b	15348 <_start@@Base+0x16c>
   15428:	mov	r4, #0
   1542c:	mov	r5, #0
   15430:	b	15334 <_start@@Base+0x158>
   15434:	mov	r0, #0
   15438:	mov	r1, #0
   1543c:	b	153a8 <_start@@Base+0x1cc>
   15440:	cmp	r0, #4
   15444:	movhi	r0, #0
   15448:	movls	r0, #1
   1544c:	bx	lr
   15450:	cmp	r0, #11
   15454:	bhi	15478 <_start@@Base+0x29c>
   15458:	cmp	r0, #8
   1545c:	bcs	15480 <_start@@Base+0x2a4>
   15460:	cmp	r0, #0
   15464:	beq	15480 <_start@@Base+0x2a4>
   15468:	cmp	r0, #2
   1546c:	beq	15480 <_start@@Base+0x2a4>
   15470:	mov	r0, #0
   15474:	bx	lr
   15478:	cmp	r0, #255	; 0xff
   1547c:	bne	15470 <_start@@Base+0x294>
   15480:	mov	r0, #1
   15484:	bx	lr
   15488:	bx	lr
   1548c:	mov	r0, #0
   15490:	bx	lr
   15494:	mov	r3, #4
   15498:	mov	r2, r3
   1549c:	mov	r1, #0
   154a0:	b	2a7ac <flatcc_verify_field@@Base>
   154a4:	ldr	r3, [pc, #132]	; 15530 <_start@@Base+0x354>
   154a8:	push	{r4, r5, r6, lr}
   154ac:	add	r3, pc, r3
   154b0:	sub	sp, sp, #8
   154b4:	mov	r2, #21
   154b8:	mov	r4, r0
   154bc:	stm	sp, {r2, r3}
   154c0:	ldr	r3, [pc, #108]	; 15534 <_start@@Base+0x358>
   154c4:	mov	r2, #0
   154c8:	add	r3, pc, r3
   154cc:	mov	r5, r1
   154d0:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   154d4:	ldr	r3, [pc, #92]	; 15538 <_start@@Base+0x35c>
   154d8:	mov	r6, #22
   154dc:	add	r3, pc, r3
   154e0:	str	r3, [sp, #4]
   154e4:	ldr	r3, [pc, #80]	; 1553c <_start@@Base+0x360>
   154e8:	mov	r1, r5
   154ec:	mov	r0, r4
   154f0:	str	r6, [sp]
   154f4:	add	r3, pc, r3
   154f8:	mov	r2, #1
   154fc:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   15500:	ldr	r3, [pc, #56]	; 15540 <_start@@Base+0x364>
   15504:	str	r6, [sp]
   15508:	add	r3, pc, r3
   1550c:	str	r3, [sp, #4]
   15510:	ldr	r3, [pc, #44]	; 15544 <_start@@Base+0x368>
   15514:	mov	r1, r5
   15518:	mov	r0, r4
   1551c:	add	r3, pc, r3
   15520:	mov	r2, #2
   15524:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   15528:	add	sp, sp, #8
   1552c:	pop	{r4, r5, r6, pc}
   15530:	muleq	r0, ip, r1
   15534:	andeq	r8, r2, ip, lsl #16
   15538:	andeq	r0, r0, r0, lsl #2
   1553c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   15540:	andeq	r0, r0, r8, rrx
   15544:	andeq	r8, r2, r8, ror #15
   15548:	push	{lr}		; (str lr, [sp, #-4]!)
   1554c:	sub	sp, sp, #12
   15550:	mov	r3, #19
   15554:	str	r3, [sp]
   15558:	ldr	r3, [pc, #20]	; 15574 <_start@@Base+0x398>
   1555c:	mov	r2, #0
   15560:	str	r2, [sp, #4]
   15564:	add	r3, pc, r3
   15568:	bl	33920 <flatcc_json_printer_int32_field@@Base>
   1556c:	add	sp, sp, #12
   15570:	pop	{pc}		; (ldr pc, [sp], #4)
   15574:			; <UNDEFINED> instruction: 0x000287b8
   15578:	push	{r4, r5, lr}
   1557c:	sub	sp, sp, #20
   15580:	mov	r3, #15
   15584:	str	r3, [sp]
   15588:	mov	r4, #0
   1558c:	mov	r5, #0
   15590:	ldr	r3, [pc, #68]	; 155dc <_start@@Base+0x400>
   15594:	strd	r4, [sp, #8]
   15598:	add	r3, pc, r3
   1559c:	mov	r2, #0
   155a0:	mov	r4, r0
   155a4:	mov	r5, r1
   155a8:	bl	33b24 <flatcc_json_printer_int64_field@@Base>
   155ac:	mov	r3, #21
   155b0:	str	r3, [sp]
   155b4:	ldr	r3, [pc, #36]	; 155e0 <_start@@Base+0x404>
   155b8:	mov	r2, #0
   155bc:	str	r2, [sp, #4]
   155c0:	mov	r1, r5
   155c4:	mov	r0, r4
   155c8:	add	r3, pc, r3
   155cc:	mov	r2, #1
   155d0:	bl	33140 <flatcc_json_printer_uint32_field@@Base>
   155d4:	add	sp, sp, #20
   155d8:	pop	{r4, r5, pc}
   155dc:	muleq	r2, r8, r7
   155e0:	andeq	r8, r2, r8, ror r7
   155e4:	push	{r4, r5, lr}
   155e8:	sub	sp, sp, #20
   155ec:	mov	r3, #15
   155f0:	str	r3, [sp]
   155f4:	mov	r4, #0
   155f8:	mov	r5, #0
   155fc:	ldr	r3, [pc, #68]	; 15648 <_start@@Base+0x46c>
   15600:	strd	r4, [sp, #8]
   15604:	add	r3, pc, r3
   15608:	mov	r2, #0
   1560c:	mov	r4, r0
   15610:	mov	r5, r1
   15614:	bl	33b24 <flatcc_json_printer_int64_field@@Base>
   15618:	mov	r3, #16
   1561c:	str	r3, [sp]
   15620:	ldr	r3, [pc, #36]	; 1564c <_start@@Base+0x470>
   15624:	mov	r2, #0
   15628:	str	r2, [sp, #4]
   1562c:	mov	r1, r5
   15630:	mov	r0, r4
   15634:	add	r3, pc, r3
   15638:	mov	r2, #1
   1563c:	bl	33140 <flatcc_json_printer_uint32_field@@Base>
   15640:	add	sp, sp, #20
   15644:	pop	{r4, r5, pc}
   15648:	andeq	r8, r2, ip, lsr #14
   1564c:	andeq	r8, r2, r4, lsr #14
   15650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15654:	sub	sp, sp, #20
   15658:	ldr	r3, [pc, #288]	; 15780 <_start@@Base+0x5a4>
   1565c:	mov	r7, #4
   15660:	mov	r2, #0
   15664:	str	r7, [sp]
   15668:	add	r3, pc, r3
   1566c:	mov	r4, r0
   15670:	mov	r5, r1
   15674:	mov	fp, r2
   15678:	mov	sl, #9
   1567c:	bl	32884 <flatcc_json_printer_string_field@@Base>
   15680:	ldr	r3, [pc, #252]	; 15784 <_start@@Base+0x5a8>
   15684:	mov	r1, r5
   15688:	mov	r0, r4
   1568c:	stm	sp, {sl, fp}
   15690:	add	r3, pc, r3
   15694:	mov	r2, #1
   15698:	bl	33140 <flatcc_json_printer_uint32_field@@Base>
   1569c:	ldr	r3, [pc, #228]	; 15788 <_start@@Base+0x5ac>
   156a0:	mov	r1, r5
   156a4:	mov	r0, r4
   156a8:	str	r7, [sp]
   156ac:	add	r3, pc, r3
   156b0:	mov	r2, #2
   156b4:	bl	32884 <flatcc_json_printer_string_field@@Base>
   156b8:	mov	r8, #0
   156bc:	mov	r9, #0
   156c0:	ldr	r3, [pc, #196]	; 1578c <_start@@Base+0x5b0>
   156c4:	mov	r6, #8
   156c8:	mov	r1, r5
   156cc:	mov	r0, r4
   156d0:	strd	r8, [sp, #8]
   156d4:	str	r6, [sp]
   156d8:	add	r3, pc, r3
   156dc:	mov	r2, #3
   156e0:	bl	33b24 <flatcc_json_printer_int64_field@@Base>
   156e4:	ldr	r3, [pc, #164]	; 15790 <_start@@Base+0x5b4>
   156e8:	mov	r2, r7
   156ec:	mov	r1, r5
   156f0:	mov	r0, r4
   156f4:	str	r7, [sp]
   156f8:	add	r3, pc, r3
   156fc:	bl	32884 <flatcc_json_printer_string_field@@Base>
   15700:	ldr	r3, [pc, #140]	; 15794 <_start@@Base+0x5b8>
   15704:	mov	r1, r5
   15708:	mov	r0, r4
   1570c:	strd	r8, [sp, #8]
   15710:	str	r6, [sp]
   15714:	add	r3, pc, r3
   15718:	mov	r2, #5
   1571c:	bl	33b24 <flatcc_json_printer_int64_field@@Base>
   15720:	ldr	r3, [pc, #112]	; 15798 <_start@@Base+0x5bc>
   15724:	mov	r1, r5
   15728:	mov	r0, r4
   1572c:	stm	sp, {sl, fp}
   15730:	add	r3, pc, r3
   15734:	mov	r2, #6
   15738:	bl	33140 <flatcc_json_printer_uint32_field@@Base>
   1573c:	ldr	r3, [pc, #88]	; 1579c <_start@@Base+0x5c0>
   15740:	mov	r1, r5
   15744:	mov	r0, r4
   15748:	strd	r8, [sp, #8]
   1574c:	str	r6, [sp]
   15750:	add	r3, pc, r3
   15754:	mov	r2, #7
   15758:	bl	33b24 <flatcc_json_printer_int64_field@@Base>
   1575c:	ldr	r3, [pc, #60]	; 157a0 <_start@@Base+0x5c4>
   15760:	stm	sp, {sl, fp}
   15764:	mov	r2, r6
   15768:	mov	r1, r5
   1576c:	mov	r0, r4
   15770:	add	r3, pc, r3
   15774:	bl	33140 <flatcc_json_printer_uint32_field@@Base>
   15778:	add	sp, sp, #20
   1577c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15780:	andeq	r8, r2, r4, lsl #14
   15784:	andeq	r8, r2, r4, ror #13
   15788:	ldrdeq	r8, [r2], -r4
   1578c:			; <UNDEFINED> instruction: 0x000286b0
   15790:	muleq	r2, ip, r6
   15794:	andeq	r8, r2, r8, lsl #13
   15798:	andeq	r8, r2, r8, ror r6
   1579c:	andeq	r8, r2, r4, ror #12
   157a0:	andeq	r8, r2, r0, asr r6
   157a4:	ldr	r3, [pc, #1264]	; 15c9c <_start@@Base+0xac0>
   157a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157ac:	sub	sp, sp, #28
   157b0:	add	r3, pc, r3
   157b4:	str	r3, [sp, #4]
   157b8:	ldr	r3, [pc, #1248]	; 15ca0 <_start@@Base+0xac4>
   157bc:	mov	r6, #3
   157c0:	str	r6, [sp]
   157c4:	add	r3, pc, r3
   157c8:	mov	r2, #0
   157cc:	mov	r4, r0
   157d0:	mov	r5, r1
   157d4:	bl	3c8d8 <flatcc_json_printer_struct_field@@Base>
   157d8:	mov	r3, #150	; 0x96
   157dc:	str	r3, [sp, #4]
   157e0:	ldr	r3, [pc, #1212]	; 15ca4 <_start@@Base+0xac8>
   157e4:	mov	r7, #4
   157e8:	mov	r1, r5
   157ec:	mov	r0, r4
   157f0:	str	r7, [sp]
   157f4:	add	r3, pc, r3
   157f8:	mov	r2, #1
   157fc:	bl	33718 <flatcc_json_printer_int16_field@@Base>
   15800:	mov	r2, #2
   15804:	mov	r3, #100	; 0x64
   15808:	mov	r1, r5
   1580c:	stm	sp, {r2, r3}
   15810:	ldr	r3, [pc, #1168]	; 15ca8 <_start@@Base+0xacc>
   15814:	mov	r0, r4
   15818:	add	r3, pc, r3
   1581c:	bl	33718 <flatcc_json_printer_int16_field@@Base>
   15820:	ldr	r3, [pc, #1156]	; 15cac <_start@@Base+0xad0>
   15824:	mov	r2, r6
   15828:	mov	r1, r5
   1582c:	mov	r0, r4
   15830:	str	r7, [sp]
   15834:	add	r3, pc, r3
   15838:	bl	32884 <flatcc_json_printer_string_field@@Base>
   1583c:	mov	r3, #9
   15840:	str	r3, [sp]
   15844:	ldr	r3, [pc, #1124]	; 15cb0 <_start@@Base+0xad4>
   15848:	mov	r1, r5
   1584c:	mov	r0, r4
   15850:	add	r3, pc, r3
   15854:	mov	r2, #5
   15858:	bl	375d4 <flatcc_json_printer_uint8_vector_field@@Base>
   1585c:	ldr	r3, [pc, #1104]	; 15cb4 <_start@@Base+0xad8>
   15860:	mov	r8, #5
   15864:	add	r3, pc, r3
   15868:	mov	fp, #8
   1586c:	str	r3, [sp, #8]
   15870:	ldr	r3, [pc, #1088]	; 15cb8 <_start@@Base+0xadc>
   15874:	mov	r1, r5
   15878:	mov	r0, r4
   1587c:	stm	sp, {r8, fp}
   15880:	add	r3, pc, r3
   15884:	mov	r2, #6
   15888:	bl	34b30 <flatcc_json_printer_int8_enum_field@@Base>
   1588c:	ldr	ip, [pc, #1064]	; 15cbc <_start@@Base+0xae0>
   15890:	ldr	r3, [pc, #1064]	; 15cc0 <_start@@Base+0xae4>
   15894:	add	ip, pc, ip
   15898:	add	r3, pc, r3
   1589c:	mov	r2, fp
   158a0:	stmib	sp, {r3, ip}
   158a4:	ldr	r3, [pc, #1048]	; 15cc4 <_start@@Base+0xae8>
   158a8:	mov	r1, r5
   158ac:	mov	r0, r4
   158b0:	str	r7, [sp]
   158b4:	add	r3, pc, r3
   158b8:	ldr	r9, [pc, #1032]	; 15cc8 <_start@@Base+0xaec>
   158bc:	bl	3c214 <flatcc_json_printer_union_field@@Base>
   158c0:	ldr	r3, [pc, #1028]	; 15ccc <_start@@Base+0xaf0>
   158c4:	add	r9, pc, r9
   158c8:	mov	r1, r5
   158cc:	mov	r0, r4
   158d0:	str	r9, [sp, #8]
   158d4:	str	r7, [sp, #4]
   158d8:	str	r8, [sp]
   158dc:	mov	r2, #9
   158e0:	add	r3, pc, r3
   158e4:	str	r9, [sp, #20]
   158e8:	bl	3b06c <flatcc_json_printer_struct_vector_field@@Base>
   158ec:	ldr	r3, [pc, #988]	; 15cd0 <_start@@Base+0xaf4>
   158f0:	mov	r6, #17
   158f4:	mov	r1, r5
   158f8:	mov	r0, r4
   158fc:	str	r6, [sp]
   15900:	add	r3, pc, r3
   15904:	mov	r2, #10
   15908:	ldr	sl, [pc, #964]	; 15cd4 <_start@@Base+0xaf8>
   1590c:	bl	3b3ec <flatcc_json_printer_string_vector_field@@Base>
   15910:	ldr	r3, [pc, #960]	; 15cd8 <_start@@Base+0xafc>
   15914:	add	sl, pc, sl
   15918:	mov	r1, r5
   1591c:	mov	r0, r4
   15920:	str	sl, [sp, #4]
   15924:	str	r6, [sp]
   15928:	add	r3, pc, r3
   1592c:	mov	r2, #11
   15930:	bl	3b7cc <flatcc_json_printer_table_vector_field@@Base>
   15934:	ldr	r3, [pc, #928]	; 15cdc <_start@@Base+0xb00>
   15938:	stm	sp, {r8, sl}
   1593c:	mov	r1, r5
   15940:	mov	r0, r4
   15944:	add	r3, pc, r3
   15948:	mov	r2, #12
   1594c:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   15950:	ldr	r3, [pc, #904]	; 15ce0 <_start@@Base+0xb04>
   15954:	mov	r9, #0
   15958:	mov	r2, #20
   1595c:	str	sl, [sp, #8]
   15960:	mov	r1, r5
   15964:	mov	r0, r4
   15968:	str	r9, [sp, #4]
   1596c:	str	r2, [sp]
   15970:	add	r3, pc, r3
   15974:	mov	r2, #13
   15978:	bl	3cf1c <flatcc_json_printer_table_as_nested_root@@Base>
   1597c:	ldr	r3, [pc, #864]	; 15ce4 <_start@@Base+0xb08>
   15980:	mov	r2, #9
   15984:	add	r3, pc, r3
   15988:	str	r3, [sp, #4]
   1598c:	ldr	r3, [pc, #852]	; 15ce8 <_start@@Base+0xb0c>
   15990:	str	r2, [sp]
   15994:	mov	r1, r5
   15998:	mov	r0, r4
   1599c:	add	r3, pc, r3
   159a0:	mov	r2, #14
   159a4:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   159a8:	mov	r3, #1
   159ac:	str	r3, [sp, #4]
   159b0:	ldr	r3, [pc, #820]	; 15cec <_start@@Base+0xb10>
   159b4:	mov	r1, r5
   159b8:	mov	r0, r4
   159bc:	str	fp, [sp]
   159c0:	add	r3, pc, r3
   159c4:	mov	r2, #15
   159c8:	bl	33d40 <flatcc_json_printer_bool_field@@Base>
   159cc:	ldr	r3, [pc, #796]	; 15cf0 <_start@@Base+0xb14>
   159d0:	mov	sl, #16
   159d4:	str	r9, [sp, #4]
   159d8:	mov	r1, r5
   159dc:	mov	r0, r4
   159e0:	mov	r2, sl
   159e4:	str	sl, [sp]
   159e8:	add	r3, pc, r3
   159ec:	bl	33920 <flatcc_json_printer_int32_field@@Base>
   159f0:	ldr	r3, [pc, #764]	; 15cf4 <_start@@Base+0xb18>
   159f4:	str	r9, [sp, #4]
   159f8:	mov	r2, r6
   159fc:	mov	r1, r5
   15a00:	mov	r0, r4
   15a04:	str	sl, [sp]
   15a08:	add	r3, pc, r3
   15a0c:	bl	33140 <flatcc_json_printer_uint32_field@@Base>
   15a10:	mov	r2, #0
   15a14:	mov	r3, #0
   15a18:	mov	r1, r5
   15a1c:	strd	r2, [sp, #8]
   15a20:	ldr	r3, [pc, #720]	; 15cf8 <_start@@Base+0xb1c>
   15a24:	mov	r0, r4
   15a28:	str	sl, [sp]
   15a2c:	add	r3, pc, r3
   15a30:	mov	r2, #18
   15a34:	bl	33b24 <flatcc_json_printer_int64_field@@Base>
   15a38:	mov	r2, #0
   15a3c:	mov	r3, #0
   15a40:	mov	r1, r5
   15a44:	strd	r2, [sp, #8]
   15a48:	ldr	r3, [pc, #684]	; 15cfc <_start@@Base+0xb20>
   15a4c:	mov	r0, r4
   15a50:	str	sl, [sp]
   15a54:	add	r3, pc, r3
   15a58:	mov	r2, #19
   15a5c:	bl	33324 <flatcc_json_printer_uint64_field@@Base>
   15a60:	ldr	r3, [pc, #664]	; 15d00 <_start@@Base+0xb24>
   15a64:	stm	sp, {r6, r9}
   15a68:	mov	r1, r5
   15a6c:	mov	r0, r4
   15a70:	mov	r2, #20
   15a74:	add	r3, pc, r3
   15a78:	bl	33920 <flatcc_json_printer_int32_field@@Base>
   15a7c:	ldr	r3, [pc, #640]	; 15d04 <_start@@Base+0xb28>
   15a80:	stm	sp, {r6, r9}
   15a84:	mov	r1, r5
   15a88:	mov	r0, r4
   15a8c:	add	r3, pc, r3
   15a90:	mov	r2, #21
   15a94:	bl	33140 <flatcc_json_printer_uint32_field@@Base>
   15a98:	mov	r2, #0
   15a9c:	mov	r3, #0
   15aa0:	mov	r1, r5
   15aa4:	strd	r2, [sp, #8]
   15aa8:	ldr	r3, [pc, #600]	; 15d08 <_start@@Base+0xb2c>
   15aac:	mov	r0, r4
   15ab0:	str	r6, [sp]
   15ab4:	add	r3, pc, r3
   15ab8:	mov	r2, #22
   15abc:	bl	33b24 <flatcc_json_printer_int64_field@@Base>
   15ac0:	mov	r2, #0
   15ac4:	mov	r3, #0
   15ac8:	mov	r1, r5
   15acc:	strd	r2, [sp, #8]
   15ad0:	ldr	r3, [pc, #564]	; 15d0c <_start@@Base+0xb30>
   15ad4:	mov	r0, r4
   15ad8:	str	r6, [sp]
   15adc:	add	r3, pc, r3
   15ae0:	mov	r2, #23
   15ae4:	bl	33324 <flatcc_json_printer_uint64_field@@Base>
   15ae8:	ldr	r3, [pc, #544]	; 15d10 <_start@@Base+0xb34>
   15aec:	mov	r1, r5
   15af0:	mov	r0, r4
   15af4:	str	sl, [sp]
   15af8:	add	r3, pc, r3
   15afc:	mov	r2, #24
   15b00:	bl	38e14 <flatcc_json_printer_bool_vector_field@@Base>
   15b04:	ldr	r3, [pc, #520]	; 15d14 <_start@@Base+0xb38>
   15b08:	mov	r1, r5
   15b0c:	mov	r0, r4
   15b10:	str	r8, [sp]
   15b14:	vldr	s0, [pc, #372]	; 15c90 <_start@@Base+0xab4>
   15b18:	add	r3, pc, r3
   15b1c:	mov	r2, #25
   15b20:	bl	33f24 <flatcc_json_printer_float_field@@Base>
   15b24:	ldr	r3, [pc, #492]	; 15d18 <_start@@Base+0xb3c>
   15b28:	mov	r9, #6
   15b2c:	mov	r1, r5
   15b30:	mov	r0, r4
   15b34:	str	r9, [sp]
   15b38:	vldr	s0, [pc, #340]	; 15c94 <_start@@Base+0xab8>
   15b3c:	add	r3, pc, r3
   15b40:	mov	r2, #26
   15b44:	bl	33f24 <flatcc_json_printer_float_field@@Base>
   15b48:	ldr	r3, [pc, #460]	; 15d1c <_start@@Base+0xb40>
   15b4c:	vldr	s0, [pc, #324]	; 15c98 <_start@@Base+0xabc>
   15b50:	mov	r1, r5
   15b54:	mov	r0, r4
   15b58:	str	r9, [sp]
   15b5c:	add	r3, pc, r3
   15b60:	mov	r2, #27
   15b64:	bl	33f24 <flatcc_json_printer_float_field@@Base>
   15b68:	mov	r3, #18
   15b6c:	str	r3, [sp]
   15b70:	ldr	r3, [pc, #424]	; 15d20 <_start@@Base+0xb44>
   15b74:	mov	r1, r5
   15b78:	mov	r0, r4
   15b7c:	add	r3, pc, r3
   15b80:	mov	r2, #28
   15b84:	bl	3b3ec <flatcc_json_printer_string_vector_field@@Base>
   15b88:	ldr	r3, [pc, #404]	; 15d24 <_start@@Base+0xb48>
   15b8c:	mov	r2, #23
   15b90:	add	r3, pc, r3
   15b94:	str	r3, [sp, #8]
   15b98:	ldr	r3, [pc, #392]	; 15d28 <_start@@Base+0xb4c>
   15b9c:	mov	r1, r5
   15ba0:	mov	r0, r4
   15ba4:	str	r2, [sp]
   15ba8:	str	fp, [sp, #4]
   15bac:	add	r3, pc, r3
   15bb0:	mov	r2, #29
   15bb4:	bl	3b06c <flatcc_json_printer_struct_vector_field@@Base>
   15bb8:	ldr	r3, [pc, #364]	; 15d2c <_start@@Base+0xb50>
   15bbc:	mov	r1, r5
   15bc0:	mov	r0, r4
   15bc4:	str	r7, [sp]
   15bc8:	add	r3, pc, r3
   15bcc:	mov	r2, #30
   15bd0:	bl	375d4 <flatcc_json_printer_uint8_vector_field@@Base>
   15bd4:	ldr	r3, [sp, #20]
   15bd8:	mov	r1, r5
   15bdc:	str	r3, [sp, #8]
   15be0:	ldr	r3, [pc, #328]	; 15d30 <_start@@Base+0xb54>
   15be4:	mov	r0, r4
   15be8:	str	r7, [sp, #4]
   15bec:	str	r8, [sp]
   15bf0:	add	r3, pc, r3
   15bf4:	mov	r2, #31
   15bf8:	bl	3b06c <flatcc_json_printer_struct_vector_field@@Base>
   15bfc:	mov	r3, #15
   15c00:	str	r3, [sp]
   15c04:	ldr	r3, [pc, #296]	; 15d34 <_start@@Base+0xb58>
   15c08:	mov	r1, r5
   15c0c:	mov	r0, r4
   15c10:	add	r3, pc, r3
   15c14:	mov	r2, #32
   15c18:	bl	38b4c <flatcc_json_printer_int64_vector_field@@Base>
   15c1c:	ldr	r3, [pc, #276]	; 15d38 <_start@@Base+0xb5c>
   15c20:	mov	r1, r5
   15c24:	mov	r0, r4
   15c28:	str	r6, [sp]
   15c2c:	add	r3, pc, r3
   15c30:	mov	r2, #33	; 0x21
   15c34:	bl	39468 <flatcc_json_printer_double_vector_field@@Base>
   15c38:	ldr	r3, [pc, #252]	; 15d3c <_start@@Base+0xb60>
   15c3c:	mov	r2, #21
   15c40:	add	r3, pc, r3
   15c44:	mov	r1, r5
   15c48:	stm	sp, {r2, r3}
   15c4c:	ldr	r3, [pc, #236]	; 15d40 <_start@@Base+0xb64>
   15c50:	mov	r0, r4
   15c54:	add	r3, pc, r3
   15c58:	mov	r2, #34	; 0x22
   15c5c:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   15c60:	ldr	r3, [pc, #220]	; 15d44 <_start@@Base+0xb68>
   15c64:	mov	r2, #10
   15c68:	add	r3, pc, r3
   15c6c:	mov	r1, r5
   15c70:	stm	sp, {r2, r3}
   15c74:	ldr	r3, [pc, #204]	; 15d48 <_start@@Base+0xb6c>
   15c78:	mov	r0, r4
   15c7c:	add	r3, pc, r3
   15c80:	mov	r2, #35	; 0x23
   15c84:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   15c88:	add	sp, sp, #28
   15c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c90:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15c94:	submi	r0, r0, r0
   15c98:	andeq	r0, r0, r0
   15c9c:			; <UNDEFINED> instruction: 0x00000cb8
   15ca0:	andeq	r8, r2, r8, lsl #12
   15ca4:	ldrdeq	r8, [r2], -ip
   15ca8:	andeq	r8, r2, r0, asr #11
   15cac:	andeq	r8, r2, r8, lsr #11
   15cb0:	muleq	r2, r4, r5
   15cb4:	andeq	r0, r0, r0, lsr fp
   15cb8:	andeq	r8, r2, r0, ror r5
   15cbc:	muleq	r0, ip, r6
   15cc0:	ldrdeq	r1, [r0], -r0
   15cc4:	andeq	r8, r2, r4, asr #10
   15cc8:	andeq	r0, r0, r4, lsl #12
   15ccc:	andeq	r8, r2, r0, lsr #10
   15cd0:	andeq	r8, r2, r8, lsl #10
   15cd4:			; <UNDEFINED> instruction: 0xfffffe88
   15cd8:	strdeq	r8, [r2], -r4
   15cdc:	andeq	r8, r2, ip, ror #9
   15ce0:	andeq	r8, r2, r8, asr #9
   15ce4:			; <UNDEFINED> instruction: 0x000004b8
   15ce8:			; <UNDEFINED> instruction: 0x000284b4
   15cec:	muleq	r2, ip, r4
   15cf0:	andeq	r8, r2, r0, lsl #9
   15cf4:	andeq	r8, r2, r4, ror r4
   15cf8:	andeq	r8, r2, r4, ror #8
   15cfc:	andeq	r8, r2, r0, asr r4
   15d00:	andeq	r8, r2, r4, asr #8
   15d04:	andeq	r8, r2, r0, asr #8
   15d08:	andeq	r8, r2, ip, lsr #8
   15d0c:	andeq	r8, r2, r8, lsl r4
   15d10:	andeq	r8, r2, r0, lsl r4
   15d14:	andeq	r8, r2, r4, lsl #8
   15d18:	andeq	r8, r2, r8, ror #7
   15d1c:	ldrdeq	r8, [r2], -r0
   15d20:			; <UNDEFINED> instruction: 0x000283b8
   15d24:	andeq	r0, r0, r0, asr #4
   15d28:	muleq	r2, ip, r3
   15d2c:	muleq	r2, r8, r3
   15d30:	andeq	r8, r2, r8, ror r3
   15d34:	andeq	r8, r2, r0, ror #6
   15d38:	andeq	r8, r2, r4, asr r3
   15d3c:	andeq	r1, r0, r4, lsl #26
   15d40:	andeq	r8, r2, r0, asr #6
   15d44:	ldrdeq	r0, [r0], -ip
   15d48:	andeq	r8, r2, r0, lsr r3
   15d4c:	push	{r4, r5, r6, lr}
   15d50:	sub	sp, sp, #8
   15d54:	mov	r3, #4
   15d58:	str	r3, [sp]
   15d5c:	ldr	r3, [pc, #104]	; 15dcc <_start@@Base+0xbf0>
   15d60:	mov	r4, #0
   15d64:	mov	r2, r4
   15d68:	str	r4, [sp, #4]
   15d6c:	add	r3, pc, r3
   15d70:	mov	r5, r0
   15d74:	mov	r6, r1
   15d78:	bl	32a38 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15d7c:	mov	r3, #7
   15d80:	str	r3, [sp]
   15d84:	ldr	r3, [pc, #68]	; 15dd0 <_start@@Base+0xbf4>
   15d88:	mov	r2, #1
   15d8c:	mov	r1, r6
   15d90:	mov	r0, r5
   15d94:	str	r2, [sp, #4]
   15d98:	add	r3, pc, r3
   15d9c:	bl	32a38 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15da0:	mov	r3, #6
   15da4:	str	r3, [sp]
   15da8:	ldr	r3, [pc, #36]	; 15dd4 <_start@@Base+0xbf8>
   15dac:	str	r4, [sp, #4]
   15db0:	mov	r1, r6
   15db4:	mov	r0, r5
   15db8:	add	r3, pc, r3
   15dbc:	mov	r2, #2
   15dc0:	bl	32a38 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15dc4:	add	sp, sp, #8
   15dc8:	pop	{r4, r5, r6, pc}
   15dcc:	andeq	r8, r2, ip, asr #4
   15dd0:	andeq	r8, r2, r8, lsr #4
   15dd4:	andeq	r8, r2, r0, lsl r2
   15dd8:	ldr	ip, [pc, #92]	; 15e3c <_start@@Base+0xc60>
   15ddc:	push	{r4, r5, lr}
   15de0:	sub	sp, sp, #12
   15de4:	add	ip, pc, ip
   15de8:	mov	r4, r1
   15dec:	mov	r3, #0
   15df0:	mov	r1, #2
   15df4:	mov	r2, r4
   15df8:	str	ip, [sp]
   15dfc:	str	r1, [sp, #4]
   15e00:	mov	r1, r3
   15e04:	mov	r5, r0
   15e08:	bl	358e8 <flatcc_json_printer_uint32_struct_field@@Base>
   15e0c:	ldr	r3, [pc, #44]	; 15e40 <_start@@Base+0xc64>
   15e10:	mov	r1, #8
   15e14:	add	r3, pc, r3
   15e18:	str	r3, [sp]
   15e1c:	str	r1, [sp, #4]
   15e20:	mov	r2, r4
   15e24:	mov	r0, r5
   15e28:	mov	r3, #4
   15e2c:	mov	r1, #1
   15e30:	bl	358e8 <flatcc_json_printer_uint32_struct_field@@Base>
   15e34:	add	sp, sp, #12
   15e38:	pop	{r4, r5, pc}
   15e3c:	andeq	r8, r2, ip, ror #3
   15e40:	andeq	r8, r2, r0, asr #3
   15e44:	push	{r4, r5, r6, r8, r9, lr}
   15e48:	sub	sp, sp, #16
   15e4c:	ldr	r3, [pc, #112]	; 15ec4 <_start@@Base+0xce8>
   15e50:	mov	r6, #2
   15e54:	str	r6, [sp]
   15e58:	add	r3, pc, r3
   15e5c:	mov	r2, #0
   15e60:	mov	r4, r0
   15e64:	mov	r5, r1
   15e68:	bl	32884 <flatcc_json_printer_string_field@@Base>
   15e6c:	mov	r3, #3
   15e70:	str	r3, [sp]
   15e74:	mov	r8, #0
   15e78:	mov	r9, #0
   15e7c:	ldr	r3, [pc, #68]	; 15ec8 <_start@@Base+0xcec>
   15e80:	mov	r1, r5
   15e84:	mov	r0, r4
   15e88:	strd	r8, [sp, #8]
   15e8c:	add	r3, pc, r3
   15e90:	mov	r2, #1
   15e94:	bl	33b24 <flatcc_json_printer_int64_field@@Base>
   15e98:	mov	ip, #0
   15e9c:	mov	r3, #5
   15ea0:	mov	r2, r6
   15ea4:	stm	sp, {r3, ip}
   15ea8:	ldr	r3, [pc, #28]	; 15ecc <_start@@Base+0xcf0>
   15eac:	mov	r1, r5
   15eb0:	mov	r0, r4
   15eb4:	add	r3, pc, r3
   15eb8:	bl	32f5c <flatcc_json_printer_uint16_field@@Base>
   15ebc:	add	sp, sp, #16
   15ec0:	pop	{r4, r5, r6, r8, r9, pc}
   15ec4:	andeq	r8, r2, r8, ror r1
   15ec8:	andeq	r8, r2, r4, asr r1
   15ecc:	andeq	r8, r2, r0, lsr r1
   15ed0:	ldr	ip, [pc, #88]	; 15f30 <_start@@Base+0xd54>
   15ed4:	push	{r4, r5, r6, lr}
   15ed8:	sub	sp, sp, #8
   15edc:	add	ip, pc, ip
   15ee0:	mov	r4, #1
   15ee4:	mov	r3, #0
   15ee8:	mov	r5, r1
   15eec:	mov	r2, r1
   15ef0:	str	ip, [sp]
   15ef4:	mov	r1, r3
   15ef8:	str	r4, [sp, #4]
   15efc:	mov	r6, r0
   15f00:	bl	35d60 <flatcc_json_printer_int16_struct_field@@Base>
   15f04:	ldr	r3, [pc, #40]	; 15f34 <_start@@Base+0xd58>
   15f08:	str	r4, [sp, #4]
   15f0c:	add	r3, pc, r3
   15f10:	str	r3, [sp]
   15f14:	mov	r2, r5
   15f18:	mov	r1, r4
   15f1c:	mov	r0, r6
   15f20:	mov	r3, #2
   15f24:	bl	35bcc <flatcc_json_printer_int8_struct_field@@Base>
   15f28:	add	sp, sp, #8
   15f2c:	pop	{r4, r5, r6, pc}
   15f30:	andeq	r7, r2, ip, ror #31
   15f34:	andeq	r8, r2, r0, ror #1
   15f38:	ldrb	r3, [r1, #8]
   15f3c:	sub	r3, r3, #1
   15f40:	cmp	r3, #3
   15f44:	addls	pc, pc, r3, lsl #2
   15f48:	b	15f8c <_start@@Base+0xdb0>
   15f4c:	b	15f80 <_start@@Base+0xda4>
   15f50:	b	15f74 <_start@@Base+0xd98>
   15f54:	b	15f68 <_start@@Base+0xd8c>
   15f58:	b	15f5c <_start@@Base+0xd80>
   15f5c:	ldr	r2, [pc, #44]	; 15f90 <_start@@Base+0xdb4>
   15f60:	add	r2, pc, r2
   15f64:	b	3c4e4 <flatcc_json_printer_union_table@@Base>
   15f68:	ldr	r2, [pc, #36]	; 15f94 <_start@@Base+0xdb8>
   15f6c:	add	r2, pc, r2
   15f70:	b	3c4e4 <flatcc_json_printer_union_table@@Base>
   15f74:	ldr	r2, [pc, #28]	; 15f98 <_start@@Base+0xdbc>
   15f78:	add	r2, pc, r2
   15f7c:	b	3c4e4 <flatcc_json_printer_union_table@@Base>
   15f80:	ldr	r2, [pc, #20]	; 15f9c <_start@@Base+0xdc0>
   15f84:	add	r2, pc, r2
   15f88:	b	3c4e4 <flatcc_json_printer_union_table@@Base>
   15f8c:	bx	lr
   15f90:	andeq	r0, r0, r8, lsr r0
   15f94:			; <UNDEFINED> instruction: 0xfffff514
   15f98:	andeq	r0, r0, r8, ror #6
   15f9c:			; <UNDEFINED> instruction: 0xfffff818
   15fa0:	ldr	r3, [pc, #144]	; 16038 <_start@@Base+0xe5c>
   15fa4:	push	{r4, r5, lr}
   15fa8:	add	r3, pc, r3
   15fac:	sub	sp, sp, #20
   15fb0:	mov	r2, #6
   15fb4:	mov	r4, r0
   15fb8:	stm	sp, {r2, r3}
   15fbc:	ldr	r3, [pc, #120]	; 1603c <_start@@Base+0xe60>
   15fc0:	mov	r2, #0
   15fc4:	add	r3, pc, r3
   15fc8:	mov	r5, r1
   15fcc:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   15fd0:	ldr	r3, [pc, #104]	; 16040 <_start@@Base+0xe64>
   15fd4:	mov	r2, #5
   15fd8:	add	r3, pc, r3
   15fdc:	mov	r1, r5
   15fe0:	stm	sp, {r2, r3}
   15fe4:	ldr	r3, [pc, #88]	; 16044 <_start@@Base+0xe68>
   15fe8:	mov	r0, r4
   15fec:	add	r3, pc, r3
   15ff0:	mov	r2, #1
   15ff4:	bl	3bf68 <flatcc_json_printer_table_field@@Base>
   15ff8:	ldr	r3, [pc, #72]	; 16048 <_start@@Base+0xe6c>
   15ffc:	ldr	r2, [pc, #72]	; 1604c <_start@@Base+0xe70>
   16000:	add	r3, pc, r3
   16004:	str	r3, [sp, #4]
   16008:	ldr	r3, [pc, #64]	; 16050 <_start@@Base+0xe74>
   1600c:	mov	ip, #7
   16010:	add	r2, pc, r2
   16014:	str	r2, [sp, #8]
   16018:	mov	r1, r5
   1601c:	mov	r0, r4
   16020:	str	ip, [sp]
   16024:	add	r3, pc, r3
   16028:	mov	r2, #3
   1602c:	bl	3bc30 <flatcc_json_printer_union_vector_field@@Base>
   16030:	add	sp, sp, #20
   16034:	pop	{r4, r5, pc}
   16038:			; <UNDEFINED> instruction: 0xfffff4f4
   1603c:	andeq	r8, r2, ip, lsr #32
   16040:	andeq	r0, r0, r4, ror r0
   16044:	andeq	r8, r2, ip
   16048:	andeq	r1, r0, r8, ror #14
   1604c:			; <UNDEFINED> instruction: 0xffffff20
   16050:	ldrdeq	r7, [r2], -ip
   16054:	push	{r4, r5, r6, r7, r8, r9, lr}
   16058:	mov	r3, #14
   1605c:	ldr	r5, [pc, #188]	; 16120 <_start@@Base+0xf44>
   16060:	ldr	r4, [pc, #188]	; 16124 <_start@@Base+0xf48>
   16064:	sub	sp, sp, #20
   16068:	add	r5, pc, r5
   1606c:	add	r4, pc, r4
   16070:	mov	r2, #1
   16074:	stm	sp, {r3, r4, r5}
   16078:	mov	r6, r0
   1607c:	ldr	r3, [pc, #164]	; 16128 <_start@@Base+0xf4c>
   16080:	mov	r7, r1
   16084:	add	r3, pc, r3
   16088:	bl	3c214 <flatcc_json_printer_union_field@@Base>
   1608c:	ldr	r3, [pc, #152]	; 1612c <_start@@Base+0xf50>
   16090:	mov	r9, #10
   16094:	mov	r1, r7
   16098:	mov	r0, r6
   1609c:	stmib	sp, {r4, r5}
   160a0:	str	r9, [sp]
   160a4:	add	r3, pc, r3
   160a8:	mov	r2, #3
   160ac:	bl	3c214 <flatcc_json_printer_union_field@@Base>
   160b0:	ldr	r3, [pc, #120]	; 16130 <_start@@Base+0xf54>
   160b4:	mov	r8, #9
   160b8:	mov	r1, r7
   160bc:	mov	r0, r6
   160c0:	stmib	sp, {r4, r5}
   160c4:	str	r8, [sp]
   160c8:	add	r3, pc, r3
   160cc:	mov	r2, #5
   160d0:	bl	3c214 <flatcc_json_printer_union_field@@Base>
   160d4:	mov	r3, #5
   160d8:	str	r3, [sp]
   160dc:	ldr	r3, [pc, #80]	; 16134 <_start@@Base+0xf58>
   160e0:	mov	r1, r7
   160e4:	mov	r0, r6
   160e8:	stmib	sp, {r4, r5}
   160ec:	add	r3, pc, r3
   160f0:	mov	r2, #7
   160f4:	bl	3c214 <flatcc_json_printer_union_field@@Base>
   160f8:	ldr	r3, [pc, #56]	; 16138 <_start@@Base+0xf5c>
   160fc:	stmib	sp, {r4, r5}
   16100:	str	r9, [sp]
   16104:	mov	r2, r8
   16108:	mov	r1, r7
   1610c:	mov	r0, r6
   16110:	add	r3, pc, r3
   16114:	bl	3bc30 <flatcc_json_printer_union_vector_field@@Base>
   16118:	add	sp, sp, #20
   1611c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16120:	andeq	r0, r0, ip, asr #1
   16124:			; <UNDEFINED> instruction: 0x000001b0
   16128:	andeq	r7, r2, r4, lsl #31
   1612c:	andeq	r7, r2, r4, ror pc
   16130:	andeq	r7, r2, ip, asr pc
   16134:	andeq	r7, r2, r4, asr #30
   16138:	andeq	r7, r2, r8, lsr #30
   1613c:	ldrb	r3, [r1, #8]
   16140:	cmp	r3, #9
   16144:	beq	16188 <_start@@Base+0xfac>
   16148:	bls	16164 <_start@@Base+0xf88>
   1614c:	cmp	r3, #11
   16150:	beq	16160 <_start@@Base+0xf84>
   16154:	bcc	161a0 <_start@@Base+0xfc4>
   16158:	cmp	r3, #255	; 0xff
   1615c:	bne	16180 <_start@@Base+0xfa4>
   16160:	b	3c6b0 <flatcc_json_printer_union_string@@Base>
   16164:	cmp	r3, #2
   16168:	beq	16194 <_start@@Base+0xfb8>
   1616c:	cmp	r3, #8
   16170:	bne	16184 <_start@@Base+0xfa8>
   16174:	ldr	r2, [pc, #48]	; 161ac <_start@@Base+0xfd0>
   16178:	add	r2, pc, r2
   1617c:	b	3c5f0 <flatcc_json_printer_union_struct@@Base>
   16180:	bx	lr
   16184:	bx	lr
   16188:	ldr	r2, [pc, #32]	; 161b0 <_start@@Base+0xfd4>
   1618c:	add	r2, pc, r2
   16190:	b	3c5f0 <flatcc_json_printer_union_struct@@Base>
   16194:	ldr	r2, [pc, #24]	; 161b4 <_start@@Base+0xfd8>
   16198:	add	r2, pc, r2
   1619c:	b	3c4e4 <flatcc_json_printer_union_table@@Base>
   161a0:	ldr	r2, [pc, #16]	; 161b8 <_start@@Base+0xfdc>
   161a4:	add	r2, pc, r2
   161a8:	b	3c5f0 <flatcc_json_printer_union_struct@@Base>
   161ac:	andeq	r0, r0, r0, ror r0
   161b0:	andeq	r0, r0, r8, lsr #32
   161b4:			; <UNDEFINED> instruction: 0xfffff3a8
   161b8:	andeq	r0, r0, r0, lsl r0
   161bc:	ldr	ip, [pc, #40]	; 161ec <_start@@Base+0x1010>
   161c0:	push	{lr}		; (str lr, [sp, #-4]!)
   161c4:	add	ip, pc, ip
   161c8:	sub	sp, sp, #12
   161cc:	mov	lr, #10
   161d0:	mov	r3, #0
   161d4:	mov	r2, r1
   161d8:	stm	sp, {ip, lr}
   161dc:	mov	r1, r3
   161e0:	bl	35ef4 <flatcc_json_printer_int32_struct_field@@Base>
   161e4:	add	sp, sp, #12
   161e8:	pop	{pc}		; (ldr pc, [sp], #4)
   161ec:	andeq	r7, r2, r0, lsl #29
   161f0:	ldr	ip, [pc, #40]	; 16220 <_start@@Base+0x1044>
   161f4:	push	{lr}		; (str lr, [sp, #-4]!)
   161f8:	add	ip, pc, ip
   161fc:	sub	sp, sp, #12
   16200:	mov	lr, #11
   16204:	mov	r3, #0
   16208:	mov	r2, r1
   1620c:	stm	sp, {ip, lr}
   16210:	mov	r1, r3
   16214:	bl	35778 <flatcc_json_printer_uint16_struct_field@@Base>
   16218:	add	sp, sp, #12
   1621c:	pop	{pc}		; (ldr pc, [sp], #4)
   16220:	andeq	r7, r2, r8, asr lr
   16224:	cmp	r1, #9
   16228:	mov	r3, r0
   1622c:	beq	162bc <_start@@Base+0x10e0>
   16230:	bls	16258 <_start@@Base+0x107c>
   16234:	cmp	r1, #11
   16238:	beq	16278 <_start@@Base+0x109c>
   1623c:	bcc	162ac <_start@@Base+0x10d0>
   16240:	cmp	r1, #255	; 0xff
   16244:	bne	16288 <_start@@Base+0x10ac>
   16248:	ldr	r1, [pc, #124]	; 162cc <_start@@Base+0x10f0>
   1624c:	mov	r2, #6
   16250:	add	r1, pc, r1
   16254:	b	3276c <flatcc_json_printer_enum@@Base>
   16258:	cmp	r1, #2
   1625c:	beq	1629c <_start@@Base+0x10c0>
   16260:	cmp	r1, #8
   16264:	bne	16288 <_start@@Base+0x10ac>
   16268:	mov	r2, r1
   1626c:	ldr	r1, [pc, #92]	; 162d0 <_start@@Base+0x10f4>
   16270:	add	r1, pc, r1
   16274:	b	3276c <flatcc_json_printer_enum@@Base>
   16278:	ldr	r1, [pc, #84]	; 162d4 <_start@@Base+0x10f8>
   1627c:	mov	r2, #5
   16280:	add	r1, pc, r1
   16284:	b	3276c <flatcc_json_printer_enum@@Base>
   16288:	ldr	r1, [pc, #72]	; 162d8 <_start@@Base+0x10fc>
   1628c:	mov	r0, r3
   16290:	mov	r2, #4
   16294:	add	r1, pc, r1
   16298:	b	3276c <flatcc_json_printer_enum@@Base>
   1629c:	ldr	r1, [pc, #56]	; 162dc <_start@@Base+0x1100>
   162a0:	mov	r2, #5
   162a4:	add	r1, pc, r1
   162a8:	b	3276c <flatcc_json_printer_enum@@Base>
   162ac:	ldr	r1, [pc, #44]	; 162e0 <_start@@Base+0x1104>
   162b0:	mov	r2, #7
   162b4:	add	r1, pc, r1
   162b8:	b	3276c <flatcc_json_printer_enum@@Base>
   162bc:	ldr	r1, [pc, #32]	; 162e4 <_start@@Base+0x1108>
   162c0:	mov	r2, #5
   162c4:	add	r1, pc, r1
   162c8:	b	3276c <flatcc_json_printer_enum@@Base>
   162cc:	andeq	r7, r2, r8, lsr lr
   162d0:	strdeq	r7, [r2], -r4
   162d4:	andeq	r7, r2, r0, lsl #28
   162d8:	andeq	fp, r2, r0, ror #18
   162dc:			; <UNDEFINED> instruction: 0x00027db8
   162e0:	andeq	r7, r2, r4, asr #27
   162e4:	andeq	r7, r2, ip, lsr #27
   162e8:	push	{r4, r5, r6, r7, lr}
   162ec:	mov	r3, #5
   162f0:	ldr	r5, [pc, #144]	; 16388 <_start@@Base+0x11ac>
   162f4:	sub	sp, sp, #20
   162f8:	mov	r4, #2
   162fc:	add	r5, pc, r5
   16300:	mov	r2, #0
   16304:	stm	sp, {r3, r4, r5}
   16308:	mov	r6, r0
   1630c:	ldr	r3, [pc, #120]	; 1638c <_start@@Base+0x11b0>
   16310:	mov	r7, r1
   16314:	add	r3, pc, r3
   16318:	bl	34b30 <flatcc_json_printer_int8_enum_field@@Base>
   1631c:	mov	r3, #6
   16320:	str	r3, [sp]
   16324:	ldr	r3, [pc, #100]	; 16390 <_start@@Base+0x11b4>
   16328:	mov	r1, r7
   1632c:	mov	r0, r6
   16330:	stmib	sp, {r4, r5}
   16334:	add	r3, pc, r3
   16338:	mov	r2, #1
   1633c:	bl	34b30 <flatcc_json_printer_int8_enum_field@@Base>
   16340:	ldr	r3, [pc, #76]	; 16394 <_start@@Base+0x11b8>
   16344:	mov	r2, r4
   16348:	mov	r1, r7
   1634c:	mov	r0, r6
   16350:	str	r4, [sp, #4]
   16354:	str	r4, [sp]
   16358:	add	r3, pc, r3
   1635c:	bl	32d78 <flatcc_json_printer_uint8_field@@Base>
   16360:	ldr	r3, [pc, #48]	; 16398 <_start@@Base+0x11bc>
   16364:	mov	r2, #3
   16368:	str	r4, [sp, #4]
   1636c:	mov	r1, r7
   16370:	mov	r0, r6
   16374:	str	r2, [sp]
   16378:	add	r3, pc, r3
   1637c:	bl	32d78 <flatcc_json_printer_uint8_field@@Base>
   16380:	add	sp, sp, #20
   16384:	pop	{r4, r5, r6, r7, pc}
   16388:	muleq	r0, r8, r0
   1638c:	ldrdeq	r7, [r2], -ip
   16390:	andeq	r7, r2, ip, asr sp
   16394:	andeq	r7, r2, r0, asr #26
   16398:	andeq	r7, r2, r4, lsr #26
   1639c:	push	{r4, r5, r6, r7, r8, lr}
   163a0:	uxtb	r4, r1
   163a4:	tst	r4, #244	; 0xf4
   163a8:	movne	r5, #1
   163ac:	moveq	r5, #0
   163b0:	cmp	r4, #0
   163b4:	orreq	r5, r5, #1
   163b8:	cmp	r5, #0
   163bc:	beq	163c8 <_start@@Base+0x11ec>
   163c0:	pop	{r4, r5, r6, r7, r8, lr}
   163c4:	b	32614 <flatcc_json_printer_int8@@Base>
   163c8:	sub	r3, r4, #1
   163cc:	tst	r3, r4
   163d0:	movne	r7, #1
   163d4:	moveq	r7, #0
   163d8:	mov	r1, r7
   163dc:	mov	r6, r0
   163e0:	bl	327e8 <flatcc_json_printer_delimit_enum_flags@@Base>
   163e4:	ands	r1, r4, #1
   163e8:	bne	1640c <_start@@Base+0x1230>
   163ec:	tst	r4, #2
   163f0:	bne	16444 <_start@@Base+0x1268>
   163f4:	tst	r4, #8
   163f8:	bne	1642c <_start@@Base+0x1250>
   163fc:	mov	r1, r7
   16400:	mov	r0, r6
   16404:	pop	{r4, r5, r6, r7, r8, lr}
   16408:	b	327e8 <flatcc_json_printer_delimit_enum_flags@@Base>
   1640c:	ldr	r2, [pc, #80]	; 16464 <_start@@Base+0x1288>
   16410:	mov	r1, r5
   16414:	mov	r3, #3
   16418:	add	r2, pc, r2
   1641c:	mov	r0, r6
   16420:	bl	32818 <flatcc_json_printer_enum_flag@@Base>
   16424:	mov	r1, #1
   16428:	b	163ec <_start@@Base+0x1210>
   1642c:	ldr	r2, [pc, #52]	; 16468 <_start@@Base+0x128c>
   16430:	mov	r3, #4
   16434:	add	r2, pc, r2
   16438:	mov	r0, r6
   1643c:	bl	32818 <flatcc_json_printer_enum_flag@@Base>
   16440:	b	163fc <_start@@Base+0x1220>
   16444:	ldr	r2, [pc, #32]	; 1646c <_start@@Base+0x1290>
   16448:	add	r5, r1, #1
   1644c:	mov	r3, #5
   16450:	add	r2, pc, r2
   16454:	mov	r0, r6
   16458:	bl	32818 <flatcc_json_printer_enum_flag@@Base>
   1645c:	mov	r1, r5
   16460:	b	163f4 <_start@@Base+0x1218>
   16464:	andeq	r7, r2, r8, lsl #25
   16468:	andeq	r7, r2, r8, ror ip
   1646c:	andeq	r7, r2, r4, asr ip
   16470:	ldr	ip, [pc, #256]	; 16578 <_start@@Base+0x139c>
   16474:	push	{r4, r5, r6, lr}
   16478:	sub	sp, sp, #16
   1647c:	add	ip, pc, ip
   16480:	mov	r6, #1
   16484:	mov	r3, #0
   16488:	mov	r4, r1
   1648c:	str	ip, [sp]
   16490:	mov	r2, r1
   16494:	str	r6, [sp, #4]
   16498:	mov	r1, r3
   1649c:	mov	r5, r0
   164a0:	bl	36394 <flatcc_json_printer_float_struct_field@@Base>
   164a4:	ldr	r3, [pc, #208]	; 1657c <_start@@Base+0x13a0>
   164a8:	str	r6, [sp, #4]
   164ac:	add	r3, pc, r3
   164b0:	mov	r2, r4
   164b4:	mov	r1, r6
   164b8:	mov	r0, r5
   164bc:	str	r3, [sp]
   164c0:	mov	r3, #4
   164c4:	bl	36394 <flatcc_json_printer_float_struct_field@@Base>
   164c8:	ldr	r3, [pc, #176]	; 16580 <_start@@Base+0x13a4>
   164cc:	str	r6, [sp, #4]
   164d0:	add	r3, pc, r3
   164d4:	mov	r2, r4
   164d8:	mov	r0, r5
   164dc:	str	r3, [sp]
   164e0:	mov	r1, #2
   164e4:	mov	r3, #8
   164e8:	bl	36394 <flatcc_json_printer_float_struct_field@@Base>
   164ec:	ldr	r3, [pc, #144]	; 16584 <_start@@Base+0x13a8>
   164f0:	mov	r6, #5
   164f4:	add	r3, pc, r3
   164f8:	mov	r2, r4
   164fc:	mov	r0, r5
   16500:	stm	sp, {r3, r6}
   16504:	mov	r1, #3
   16508:	mov	r3, #16
   1650c:	bl	36510 <flatcc_json_printer_double_struct_field@@Base>
   16510:	ldr	r1, [pc, #112]	; 16588 <_start@@Base+0x13ac>
   16514:	ldr	r3, [pc, #112]	; 1658c <_start@@Base+0x13b0>
   16518:	add	r1, pc, r1
   1651c:	add	r3, pc, r3
   16520:	mov	r2, r4
   16524:	mov	r0, r5
   16528:	str	r1, [sp, #8]
   1652c:	str	r3, [sp]
   16530:	str	r6, [sp, #4]
   16534:	mov	r3, #24
   16538:	mov	r1, #4
   1653c:	bl	36d14 <flatcc_json_printer_int8_enum_struct_field@@Base>
   16540:	ldr	ip, [pc, #72]	; 16590 <_start@@Base+0x13b4>
   16544:	ldr	r3, [pc, #72]	; 16594 <_start@@Base+0x13b8>
   16548:	add	ip, pc, ip
   1654c:	add	r3, pc, r3
   16550:	str	r3, [sp]
   16554:	str	r6, [sp, #4]
   16558:	mov	r2, r4
   1655c:	mov	r1, r6
   16560:	mov	r0, r5
   16564:	str	ip, [sp, #8]
   16568:	mov	r3, #26
   1656c:	bl	3c6c8 <flatcc_json_printer_embedded_struct_field@@Base>
   16570:	add	sp, sp, #16
   16574:	pop	{r4, r5, r6, pc}
   16578:	andeq	r7, r2, r8, asr #28
   1657c:	andeq	r7, r2, r8, lsl #19
   16580:	andeq	r7, r2, r4, ror #23
   16584:	andeq	r7, r2, r4, asr #23
   16588:			; <UNDEFINED> instruction: 0xfffffe7c
   1658c:	andeq	r7, r2, r4, lsr #23
   16590:			; <UNDEFINED> instruction: 0xfffff980
   16594:	andeq	r7, r2, ip, ror fp
   16598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1659c:	mov	r4, r1
   165a0:	sub	sp, sp, #12
   165a4:	mov	r1, r2
   165a8:	mov	r5, r0
   165ac:	mov	r0, r4
   165b0:	mov	sl, r2
   165b4:	mov	fp, r3
   165b8:	bl	15308 <_start@@Base+0x12c>
   165bc:	add	r3, pc, #628	; 0x274
   165c0:	ldrd	r2, [r3]
   165c4:	cmp	r1, r3
   165c8:	cmpeq	r0, r2
   165cc:	bhi	16640 <_start@@Base+0x1464>
   165d0:	add	r3, pc, #616	; 0x268
   165d4:	ldrd	r2, [r3]
   165d8:	cmp	r1, r3
   165dc:	cmpeq	r0, r2
   165e0:	bls	16708 <_start@@Base+0x152c>
   165e4:	add	r7, pc, #604	; 0x25c
   165e8:	ldrd	r6, [r7]
   165ec:	and	r8, r0, #-16777216	; 0xff000000
   165f0:	cmp	r1, r7
   165f4:	cmpeq	r8, r6
   165f8:	beq	167dc <_start@@Base+0x1600>
   165fc:	add	r3, pc, #588	; 0x24c
   16600:	ldrd	r2, [r3]
   16604:	bic	r0, r0, #255	; 0xff
   16608:	cmp	r1, r3
   1660c:	cmpeq	r0, r2
   16610:	bne	1666c <_start@@Base+0x1490>
   16614:	ldr	r3, [sp, #52]	; 0x34
   16618:	mov	r2, sl
   1661c:	str	r3, [sp]
   16620:	mov	r0, r5
   16624:	mov	r3, #7
   16628:	mov	r1, r4
   1662c:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16630:	cmp	r4, r0
   16634:	movne	r6, #10
   16638:	bne	16748 <_start@@Base+0x156c>
   1663c:	b	1666c <_start@@Base+0x1490>
   16640:	add	r3, pc, #528	; 0x210
   16644:	ldrd	r2, [r3]
   16648:	cmp	r1, r3
   1664c:	cmpeq	r0, r2
   16650:	bhi	16678 <_start@@Base+0x149c>
   16654:	add	r3, pc, #516	; 0x204
   16658:	ldrd	r2, [r3]
   1665c:	mov	r0, #0
   16660:	cmp	r1, r3
   16664:	cmpeq	r0, r2
   16668:	beq	167b0 <_start@@Base+0x15d4>
   1666c:	mov	r0, r4
   16670:	add	sp, sp, #12
   16674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16678:	add	r3, pc, #488	; 0x1e8
   1667c:	ldrd	r2, [r3]
   16680:	cmp	r1, r3
   16684:	cmpeq	r0, r2
   16688:	bls	1676c <_start@@Base+0x1590>
   1668c:	add	r7, pc, #476	; 0x1dc
   16690:	ldrd	r6, [r7]
   16694:	ldr	r2, [pc, #500]	; 16890 <_start@@Base+0x16b4>
   16698:	mvn	r3, #0
   1669c:	and	r3, r3, r1
   166a0:	and	r2, r2, r0
   166a4:	cmp	r3, r7
   166a8:	cmpeq	r2, r6
   166ac:	beq	16808 <_start@@Base+0x162c>
   166b0:	add	r3, pc, #448	; 0x1c0
   166b4:	ldrd	r2, [r3]
   166b8:	cmp	r1, r3
   166bc:	cmpeq	r0, r2
   166c0:	bne	1666c <_start@@Base+0x1490>
   166c4:	ldr	r3, [sp, #52]	; 0x34
   166c8:	mov	r2, sl
   166cc:	str	r3, [sp]
   166d0:	mov	r0, r5
   166d4:	mov	r3, #8
   166d8:	mov	r1, r4
   166dc:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   166e0:	cmp	r4, r0
   166e4:	beq	1666c <_start@@Base+0x1490>
   166e8:	ldr	r2, [sp, #48]	; 0x30
   166ec:	mov	r4, r0
   166f0:	mov	r1, #0
   166f4:	mov	r0, #8
   166f8:	mov	r3, #0
   166fc:	strd	r0, [r2]
   16700:	str	r3, [fp]
   16704:	b	1666c <_start@@Base+0x1490>
   16708:	add	r3, pc, #368	; 0x170
   1670c:	ldrd	r2, [r3]
   16710:	and	r0, r0, #-16777216	; 0xff000000
   16714:	cmp	r1, r3
   16718:	cmpeq	r0, r2
   1671c:	bne	1666c <_start@@Base+0x1490>
   16720:	ldr	r3, [sp, #52]	; 0x34
   16724:	mov	r2, sl
   16728:	str	r3, [sp]
   1672c:	mov	r0, r5
   16730:	mov	r3, #5
   16734:	mov	r1, r4
   16738:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   1673c:	cmp	r4, r0
   16740:	movne	r6, #9
   16744:	beq	1666c <_start@@Base+0x1490>
   16748:	ldr	r2, [sp, #48]	; 0x30
   1674c:	mov	r7, #0
   16750:	mov	r3, #0
   16754:	mov	r4, r0
   16758:	strd	r6, [r2]
   1675c:	mov	r0, r4
   16760:	str	r3, [fp]
   16764:	add	sp, sp, #12
   16768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1676c:	add	r3, pc, #276	; 0x114
   16770:	ldrd	r2, [r3]
   16774:	and	r0, r0, #-16777216	; 0xff000000
   16778:	cmp	r1, r3
   1677c:	cmpeq	r0, r2
   16780:	bne	1666c <_start@@Base+0x1490>
   16784:	ldr	r3, [sp, #52]	; 0x34
   16788:	mov	r2, sl
   1678c:	str	r3, [sp]
   16790:	mov	r0, r5
   16794:	mov	r3, #5
   16798:	mov	r1, r4
   1679c:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   167a0:	cmp	r4, r0
   167a4:	beq	1666c <_start@@Base+0x1490>
   167a8:	mov	r6, #11
   167ac:	b	16748 <_start@@Base+0x156c>
   167b0:	ldr	r3, [sp, #52]	; 0x34
   167b4:	mov	r2, sl
   167b8:	str	r3, [sp]
   167bc:	mov	r0, r5
   167c0:	mov	r3, #4
   167c4:	mov	r1, r4
   167c8:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   167cc:	cmp	r4, r0
   167d0:	movne	r6, #0
   167d4:	bne	16748 <_start@@Base+0x156c>
   167d8:	b	1666c <_start@@Base+0x1490>
   167dc:	ldr	r3, [sp, #52]	; 0x34
   167e0:	mov	r2, sl
   167e4:	str	r3, [sp]
   167e8:	mov	r0, r5
   167ec:	mov	r3, #5
   167f0:	mov	r1, r4
   167f4:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   167f8:	cmp	r4, r0
   167fc:	movne	r6, #2
   16800:	bne	16748 <_start@@Base+0x156c>
   16804:	b	1666c <_start@@Base+0x1490>
   16808:	ldr	r3, [sp, #52]	; 0x34
   1680c:	mov	r2, sl
   16810:	str	r3, [sp]
   16814:	mov	r0, r5
   16818:	mov	r3, #6
   1681c:	mov	r1, r4
   16820:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16824:	cmp	r4, r0
   16828:	movne	r6, #255	; 0xff
   1682c:	bne	16748 <_start@@Base+0x156c>
   16830:	b	1666c <_start@@Base+0x1490>
   16834:	nop			; (mov r0, r0)
   16838:			; <UNDEFINED> instruction: 0xffffffff
   1683c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16840:			; <UNDEFINED> instruction: 0x46616dff
   16844:	rsbmi	r6, pc, #428	; 0x1ac
   16848:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1684c:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16850:	strbtmi	r6, [r1], -r0, lsl #28
   16854:	rsbmi	r6, pc, #428	; 0x1ac
   16858:	ldrshvc	pc, [pc, #255]	; 1695f <_start@@Base+0x1783>	; <UNPREDICTABLE>
   1685c:	svcmi	0x00746865
   16860:	andeq	r0, r0, r0
   16864:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16868:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   1686c:	rsbpl	r7, r1, #117	; 0x75
   16870:	strbvs	r0, [r4, #-0]!
   16874:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16878:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   1687c:	rsbpl	r7, r1, #117	; 0x75
   16880:	strvs	r0, [r0, #-0]
   16884:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16888:	andvc	r0, r0, #0
   1688c:	svcmi	0x00746865
   16890:			; <UNDEFINED> instruction: 0xffff0000
   16894:	push	{r4, r5, r6, r7, r8, r9, lr}
   16898:	mov	r6, r1
   1689c:	sub	sp, sp, #12
   168a0:	mov	r1, r2
   168a4:	mov	r8, r0
   168a8:	mov	r0, r6
   168ac:	mov	r7, r2
   168b0:	mov	r9, r3
   168b4:	bl	15308 <_start@@Base+0x12c>
   168b8:	add	r3, pc, #464	; 0x1d0
   168bc:	ldrd	r2, [r3]
   168c0:	cmp	r1, r3
   168c4:	cmpeq	r0, r2
   168c8:	mov	r5, r1
   168cc:	bhi	168f8 <_start@@Base+0x171c>
   168d0:	add	r3, pc, #448	; 0x1c0
   168d4:	ldrd	r2, [r3]
   168d8:	bic	r5, r1, #255	; 0xff
   168dc:	mov	r4, #0
   168e0:	cmp	r5, r3
   168e4:	cmpeq	r4, r2
   168e8:	beq	169c8 <_start@@Base+0x17ec>
   168ec:	mov	r0, r6
   168f0:	add	sp, sp, #12
   168f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   168f8:	add	r3, pc, #416	; 0x1a0
   168fc:	ldrd	r2, [r3]
   16900:	mov	r4, r0
   16904:	cmp	r1, r3
   16908:	cmpeq	r0, r2
   1690c:	beq	16a0c <_start@@Base+0x1830>
   16910:	add	r3, pc, #400	; 0x190
   16914:	ldrd	r2, [r3]
   16918:	bic	r0, r0, #255	; 0xff
   1691c:	cmp	r1, r3
   16920:	cmpeq	r0, r2
   16924:	beq	16a38 <_start@@Base+0x185c>
   16928:	add	r3, pc, #384	; 0x180
   1692c:	ldrd	r2, [r3]
   16930:	mov	r0, #0
   16934:	cmp	r5, r3
   16938:	cmpeq	r0, r2
   1693c:	beq	16a64 <_start@@Base+0x1888>
   16940:	add	r3, pc, #368	; 0x170
   16944:	ldrd	r2, [r3]
   16948:	cmp	r5, r3
   1694c:	cmpeq	r4, r2
   16950:	bne	168ec <_start@@Base+0x1710>
   16954:	mov	r1, r7
   16958:	add	r0, r6, #8
   1695c:	bl	15308 <_start@@Base+0x12c>
   16960:	add	r3, pc, #344	; 0x158
   16964:	ldrd	r2, [r3]
   16968:	cmp	r1, r3
   1696c:	cmpeq	r0, r2
   16970:	bne	168ec <_start@@Base+0x1710>
   16974:	add	r4, r6, #16
   16978:	mov	r0, r4
   1697c:	mov	r1, r7
   16980:	bl	15308 <_start@@Base+0x12c>
   16984:	add	r3, pc, #316	; 0x13c
   16988:	ldrd	r2, [r3]
   1698c:	bic	r0, r0, #255	; 0xff
   16990:	cmp	r1, r3
   16994:	cmpeq	r0, r2
   16998:	bne	168ec <_start@@Base+0x1710>
   1699c:	ldr	r3, [sp, #44]	; 0x2c
   169a0:	mov	r2, r7
   169a4:	str	r3, [sp]
   169a8:	mov	r0, r8
   169ac:	mov	r3, #7
   169b0:	mov	r1, r4
   169b4:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   169b8:	cmp	r4, r0
   169bc:	beq	168ec <_start@@Base+0x1710>
   169c0:	mov	r4, #2
   169c4:	b	169f0 <_start@@Base+0x1814>
   169c8:	ldr	r3, [sp, #44]	; 0x2c
   169cc:	mov	r2, r7
   169d0:	str	r3, [sp]
   169d4:	mov	r0, r8
   169d8:	mov	r3, #3
   169dc:	mov	r1, r6
   169e0:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   169e4:	cmp	r6, r0
   169e8:	movne	r4, #4
   169ec:	beq	168f0 <_start@@Base+0x1714>
   169f0:	ldr	r2, [sp, #40]	; 0x28
   169f4:	mov	r5, #0
   169f8:	mov	r3, #0
   169fc:	strd	r4, [r2]
   16a00:	str	r3, [r9]
   16a04:	add	sp, sp, #12
   16a08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16a0c:	ldr	r3, [sp, #44]	; 0x2c
   16a10:	mov	r2, r7
   16a14:	str	r3, [sp]
   16a18:	mov	r0, r8
   16a1c:	mov	r3, #8
   16a20:	mov	r1, r6
   16a24:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16a28:	cmp	r6, r0
   16a2c:	movne	r4, #3
   16a30:	bne	169f0 <_start@@Base+0x1814>
   16a34:	b	168ec <_start@@Base+0x1710>
   16a38:	ldr	r3, [sp, #44]	; 0x2c
   16a3c:	mov	r2, r7
   16a40:	str	r3, [sp]
   16a44:	mov	r1, r6
   16a48:	mov	r3, #7
   16a4c:	mov	r0, r8
   16a50:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16a54:	cmp	r6, r0
   16a58:	movne	r4, #1
   16a5c:	bne	169f0 <_start@@Base+0x1814>
   16a60:	b	16928 <_start@@Base+0x174c>
   16a64:	ldr	r3, [sp, #44]	; 0x2c
   16a68:	mov	r2, r7
   16a6c:	str	r3, [sp]
   16a70:	mov	r0, r8
   16a74:	mov	r3, #4
   16a78:	mov	r1, r6
   16a7c:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16a80:	cmp	r6, r0
   16a84:	movne	r4, #0
   16a88:	bne	169f0 <_start@@Base+0x1814>
   16a8c:	b	168ec <_start@@Base+0x1710>
   16a90:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16a94:	stclmi	14, cr6, [pc, #-460]!	; 168d0 <_start@@Base+0x16f4>
   16a98:	andeq	r0, r0, r0
   16a9c:	cmnmi	ip, r0, lsl #8
   16aa0:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16aa4:	stclmi	14, cr6, [pc, #-460]!	; 168e0 <_start@@Base+0x1704>
   16aa8:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16aac:	stclmi	14, cr6, [pc, #-460]!	; 168e8 <_start@@Base+0x170c>
   16ab0:	andeq	r0, r0, r0
   16ab4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16ab8:	cmnpl	r9, #112, 26	; 0x1c00
   16abc:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16ac0:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16ac4:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16ac8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16acc:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad4:	mov	r4, r1
   16ad8:	sub	sp, sp, #12
   16adc:	mov	r1, r2
   16ae0:	mov	r5, r0
   16ae4:	mov	r0, r4
   16ae8:	mov	sl, r2
   16aec:	mov	fp, r3
   16af0:	bl	15308 <_start@@Base+0x12c>
   16af4:	add	r3, pc, #412	; 0x19c
   16af8:	ldrd	r2, [r3]
   16afc:	cmp	r1, r3
   16b00:	cmpeq	r0, r2
   16b04:	bhi	16b2c <_start@@Base+0x1950>
   16b08:	add	r3, pc, #400	; 0x190
   16b0c:	ldrd	r2, [r3]
   16b10:	mov	r0, #0
   16b14:	cmp	r1, r3
   16b18:	cmpeq	r0, r2
   16b1c:	beq	16c04 <_start@@Base+0x1a28>
   16b20:	mov	r0, r4
   16b24:	add	sp, sp, #12
   16b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b2c:	add	r3, pc, #372	; 0x174
   16b30:	ldrd	r2, [r3]
   16b34:	cmp	r1, r3
   16b38:	cmpeq	r0, r2
   16b3c:	bls	16bc0 <_start@@Base+0x19e4>
   16b40:	add	r7, pc, #360	; 0x168
   16b44:	ldrd	r6, [r7]
   16b48:	bic	r8, r0, #255	; 0xff
   16b4c:	cmp	r1, r7
   16b50:	cmpeq	r8, r6
   16b54:	beq	16c50 <_start@@Base+0x1a74>
   16b58:	add	r7, pc, #344	; 0x158
   16b5c:	ldrd	r6, [r7]
   16b60:	ldr	r2, [pc, #352]	; 16cc8 <_start@@Base+0x1aec>
   16b64:	mvn	r3, #0
   16b68:	and	r1, r1, r3
   16b6c:	and	r0, r0, r2
   16b70:	cmp	r1, r7
   16b74:	cmpeq	r0, r6
   16b78:	bne	16b20 <_start@@Base+0x1944>
   16b7c:	ldr	r3, [sp, #52]	; 0x34
   16b80:	mov	r2, sl
   16b84:	str	r3, [sp]
   16b88:	mov	r0, r5
   16b8c:	mov	r3, #6
   16b90:	mov	r1, r4
   16b94:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16b98:	cmp	r4, r0
   16b9c:	beq	16b20 <_start@@Base+0x1944>
   16ba0:	ldr	r2, [sp, #48]	; 0x30
   16ba4:	mov	r4, r0
   16ba8:	mvn	r1, #0
   16bac:	mvn	r0, #1
   16bb0:	mov	r3, #1
   16bb4:	strd	r0, [r2]
   16bb8:	str	r3, [fp]
   16bbc:	b	16b20 <_start@@Base+0x1944>
   16bc0:	add	r3, pc, #248	; 0xf8
   16bc4:	ldrd	r2, [r3]
   16bc8:	mov	r0, #0
   16bcc:	cmp	r1, r3
   16bd0:	cmpeq	r0, r2
   16bd4:	bne	16b20 <_start@@Base+0x1944>
   16bd8:	ldr	r3, [sp, #52]	; 0x34
   16bdc:	mov	r2, sl
   16be0:	str	r3, [sp]
   16be4:	mov	r0, r5
   16be8:	mov	r3, #4
   16bec:	mov	r1, r4
   16bf0:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16bf4:	cmp	r4, r0
   16bf8:	beq	16b20 <_start@@Base+0x1944>
   16bfc:	mov	r6, #42	; 0x2a
   16c00:	b	16c2c <_start@@Base+0x1a50>
   16c04:	ldr	r3, [sp, #52]	; 0x34
   16c08:	mov	r2, sl
   16c0c:	str	r3, [sp]
   16c10:	mov	r0, r5
   16c14:	mov	r3, #4
   16c18:	mov	r1, r4
   16c1c:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16c20:	cmp	r4, r0
   16c24:	movne	r6, #2
   16c28:	beq	16b20 <_start@@Base+0x1944>
   16c2c:	ldr	r2, [sp, #48]	; 0x30
   16c30:	mov	r7, #0
   16c34:	mov	r3, #0
   16c38:	mov	r4, r0
   16c3c:	strd	r6, [r2]
   16c40:	mov	r0, r4
   16c44:	str	r3, [fp]
   16c48:	add	sp, sp, #12
   16c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c50:	ldr	r3, [sp, #52]	; 0x34
   16c54:	mov	r2, sl
   16c58:	str	r3, [sp]
   16c5c:	mov	r0, r5
   16c60:	mov	r3, #7
   16c64:	mov	r1, r4
   16c68:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16c6c:	cmp	r4, r0
   16c70:	beq	16b20 <_start@@Base+0x1944>
   16c74:	ldr	r2, [sp, #48]	; 0x30
   16c78:	mvn	r6, #0
   16c7c:	mvn	r7, #0
   16c80:	mov	r3, #1
   16c84:	strd	r6, [r2]
   16c88:	mov	r4, r0
   16c8c:	str	r3, [fp]
   16c90:	b	16b20 <_start@@Base+0x1944>
   16c94:	nop			; (mov r0, r0)
   16c98:			; <UNDEFINED> instruction: 0xffffffff
   16c9c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16ca0:	andeq	r0, r0, r0
   16ca4:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16ca8:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16cac:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16cb0:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16cb4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16cb8:	strbvs	r0, [r7, #-0]!
   16cbc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16cc0:	andeq	r0, r0, r0
   16cc4:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16cc8:			; <UNDEFINED> instruction: 0xffff0000
   16ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cd0:	mov	r4, r1
   16cd4:	sub	sp, sp, #12
   16cd8:	mov	r1, r2
   16cdc:	mov	r5, r0
   16ce0:	mov	r0, r4
   16ce4:	mov	sl, r2
   16ce8:	mov	fp, r3
   16cec:	bl	15308 <_start@@Base+0x12c>
   16cf0:	add	r3, pc, #288	; 0x120
   16cf4:	ldrd	r2, [r3]
   16cf8:	cmp	r1, r3
   16cfc:	cmpeq	r0, r2
   16d00:	bhi	16d28 <_start@@Base+0x1b4c>
   16d04:	add	r3, pc, #276	; 0x114
   16d08:	ldrd	r2, [r3]
   16d0c:	mov	r0, #0
   16d10:	cmp	r1, r3
   16d14:	cmpeq	r0, r2
   16d18:	beq	16da0 <_start@@Base+0x1bc4>
   16d1c:	mov	r0, r4
   16d20:	add	sp, sp, #12
   16d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d28:	add	r7, pc, #248	; 0xf8
   16d2c:	ldrd	r6, [r7]
   16d30:	bic	r9, r1, #255	; 0xff
   16d34:	mov	r8, #0
   16d38:	cmp	r9, r7
   16d3c:	cmpeq	r8, r6
   16d40:	beq	16dec <_start@@Base+0x1c10>
   16d44:	add	r3, pc, #228	; 0xe4
   16d48:	ldrd	r2, [r3]
   16d4c:	and	r0, r0, #-16777216	; 0xff000000
   16d50:	cmp	r1, r3
   16d54:	cmpeq	r0, r2
   16d58:	bne	16d1c <_start@@Base+0x1b40>
   16d5c:	ldr	r3, [sp, #52]	; 0x34
   16d60:	mov	r2, sl
   16d64:	str	r3, [sp]
   16d68:	mov	r0, r5
   16d6c:	mov	r3, #5
   16d70:	mov	r1, r4
   16d74:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16d78:	cmp	r4, r0
   16d7c:	beq	16d1c <_start@@Base+0x1b40>
   16d80:	ldr	r2, [sp, #48]	; 0x30
   16d84:	mov	r4, r0
   16d88:	mov	r1, #0
   16d8c:	mov	r0, #2
   16d90:	mov	r3, #0
   16d94:	strd	r0, [r2]
   16d98:	str	r3, [fp]
   16d9c:	b	16d1c <_start@@Base+0x1b40>
   16da0:	ldr	r3, [sp, #52]	; 0x34
   16da4:	mov	r2, sl
   16da8:	str	r3, [sp]
   16dac:	mov	r0, r5
   16db0:	mov	r3, #4
   16db4:	mov	r1, r4
   16db8:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16dbc:	cmp	r4, r0
   16dc0:	movne	r6, #8
   16dc4:	beq	16d1c <_start@@Base+0x1b40>
   16dc8:	ldr	r2, [sp, #48]	; 0x30
   16dcc:	mov	r7, #0
   16dd0:	mov	r3, #0
   16dd4:	mov	r4, r0
   16dd8:	strd	r6, [r2]
   16ddc:	mov	r0, r4
   16de0:	str	r3, [fp]
   16de4:	add	sp, sp, #12
   16de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dec:	ldr	r3, [sp, #52]	; 0x34
   16df0:	mov	r2, sl
   16df4:	str	r3, [sp]
   16df8:	mov	r0, r5
   16dfc:	mov	r3, #3
   16e00:	mov	r1, r4
   16e04:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   16e08:	cmp	r4, r0
   16e0c:	beq	16d1c <_start@@Base+0x1b40>
   16e10:	mov	r6, #1
   16e14:	b	16dc8 <_start@@Base+0x1bec>
   16e18:	ldclvs	15, cr15, [pc, #1020]!	; 1721c <_start@@Base+0x2040>
   16e1c:	ldrbmi	r6, [r2, -r5, ror #10]!
   16e20:	andeq	r0, r0, r0
   16e24:	rsbmi	r7, ip, #423624704	; 0x19400000
   16e28:	andeq	r0, r0, r0
   16e2c:	rsbpl	r6, r5, #0, 8
   16e30:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16e34:	ldrbmi	r6, [r2, -r5, ror #10]!
   16e38:	sub	r3, r2, r1
   16e3c:	cmp	r3, #1
   16e40:	ble	16e54 <_start@@Base+0x1c78>
   16e44:	ldrb	r3, [r1]
   16e48:	cmp	r3, #32
   16e4c:	bhi	16e58 <_start@@Base+0x1c7c>
   16e50:	beq	16e60 <_start@@Base+0x1c84>
   16e54:	b	2ce58 <flatcc_json_parser_space_ext@@Base>
   16e58:	mov	r0, r1
   16e5c:	bx	lr
   16e60:	ldrb	r3, [r1, #1]
   16e64:	cmp	r3, #32
   16e68:	bls	16e54 <_start@@Base+0x1c78>
   16e6c:	add	r0, r1, #1
   16e70:	bx	lr
   16e74:	mov	r3, #8
   16e78:	push	{r4, lr}
   16e7c:	mov	r2, r3
   16e80:	mov	r1, #0
   16e84:	mov	r4, r0
   16e88:	bl	2a7ac <flatcc_verify_field@@Base>
   16e8c:	cmp	r0, #0
   16e90:	popne	{r4, pc}
   16e94:	mov	r3, #4
   16e98:	mov	r0, r4
   16e9c:	mov	r2, r3
   16ea0:	mov	r1, #1
   16ea4:	pop	{r4, lr}
   16ea8:	b	2a7ac <flatcc_verify_field@@Base>
   16eac:	mov	r3, #1
   16eb0:	push	{r4, lr}
   16eb4:	mov	r2, r3
   16eb8:	mov	r1, #0
   16ebc:	mov	r4, r0
   16ec0:	bl	2a7ac <flatcc_verify_field@@Base>
   16ec4:	cmp	r0, #0
   16ec8:	popne	{r4, pc}
   16ecc:	mov	r3, #1
   16ed0:	mov	r2, r3
   16ed4:	mov	r1, r3
   16ed8:	mov	r0, r4
   16edc:	bl	2a7ac <flatcc_verify_field@@Base>
   16ee0:	cmp	r0, #0
   16ee4:	popne	{r4, pc}
   16ee8:	mov	r3, #1
   16eec:	mov	r2, r3
   16ef0:	mov	r1, #2
   16ef4:	mov	r0, r4
   16ef8:	bl	2a7ac <flatcc_verify_field@@Base>
   16efc:	cmp	r0, #0
   16f00:	popne	{r4, pc}
   16f04:	mov	r3, #1
   16f08:	mov	r0, r4
   16f0c:	mov	r2, r3
   16f10:	mov	r1, #3
   16f14:	pop	{r4, lr}
   16f18:	b	2a7ac <flatcc_verify_field@@Base>
   16f1c:	mov	r2, #0
   16f20:	push	{r4, lr}
   16f24:	mov	r1, r2
   16f28:	mov	r4, r0
   16f2c:	bl	2a81c <flatcc_verify_string_field@@Base>
   16f30:	cmp	r0, #0
   16f34:	popne	{r4, pc}
   16f38:	mov	r3, #8
   16f3c:	mov	r2, r3
   16f40:	mov	r1, #1
   16f44:	mov	r0, r4
   16f48:	bl	2a7ac <flatcc_verify_field@@Base>
   16f4c:	cmp	r0, #0
   16f50:	popne	{r4, pc}
   16f54:	mov	r3, #2
   16f58:	mov	r0, r4
   16f5c:	mov	r2, r3
   16f60:	mov	r1, r3
   16f64:	pop	{r4, lr}
   16f68:	b	2a7ac <flatcc_verify_field@@Base>
   16f6c:	mov	r2, #0
   16f70:	push	{r4, lr}
   16f74:	mov	r1, r2
   16f78:	mov	r4, r0
   16f7c:	bl	2a81c <flatcc_verify_string_field@@Base>
   16f80:	cmp	r0, #0
   16f84:	popne	{r4, pc}
   16f88:	mov	r3, #4
   16f8c:	mov	r2, r3
   16f90:	mov	r1, #1
   16f94:	mov	r0, r4
   16f98:	bl	2a7ac <flatcc_verify_field@@Base>
   16f9c:	cmp	r0, #0
   16fa0:	popne	{r4, pc}
   16fa4:	mov	r2, r0
   16fa8:	mov	r1, #2
   16fac:	mov	r0, r4
   16fb0:	bl	2a81c <flatcc_verify_string_field@@Base>
   16fb4:	cmp	r0, #0
   16fb8:	popne	{r4, pc}
   16fbc:	mov	r3, #8
   16fc0:	mov	r2, r3
   16fc4:	mov	r1, #3
   16fc8:	mov	r0, r4
   16fcc:	bl	2a7ac <flatcc_verify_field@@Base>
   16fd0:	cmp	r0, #0
   16fd4:	popne	{r4, pc}
   16fd8:	mov	r2, r0
   16fdc:	mov	r1, #4
   16fe0:	mov	r0, r4
   16fe4:	bl	2a81c <flatcc_verify_string_field@@Base>
   16fe8:	cmp	r0, #0
   16fec:	popne	{r4, pc}
   16ff0:	mov	r3, #8
   16ff4:	mov	r2, r3
   16ff8:	mov	r1, #5
   16ffc:	mov	r0, r4
   17000:	bl	2a7ac <flatcc_verify_field@@Base>
   17004:	cmp	r0, #0
   17008:	popne	{r4, pc}
   1700c:	mov	r3, #4
   17010:	mov	r2, r3
   17014:	mov	r1, #6
   17018:	mov	r0, r4
   1701c:	bl	2a7ac <flatcc_verify_field@@Base>
   17020:	cmp	r0, #0
   17024:	popne	{r4, pc}
   17028:	mov	r3, #8
   1702c:	mov	r2, r3
   17030:	mov	r1, #7
   17034:	mov	r0, r4
   17038:	bl	2a7ac <flatcc_verify_field@@Base>
   1703c:	cmp	r0, #0
   17040:	popne	{r4, pc}
   17044:	mov	r3, #4
   17048:	mov	r0, r4
   1704c:	mov	r2, r3
   17050:	mov	r1, #8
   17054:	pop	{r4, lr}
   17058:	b	2a7ac <flatcc_verify_field@@Base>
   1705c:	ldr	r3, [pc, #88]	; 170bc <_start@@Base+0x1ee0>
   17060:	mov	r2, #0
   17064:	push	{r4, lr}
   17068:	mov	r1, r2
   1706c:	add	r3, pc, r3
   17070:	mov	r4, r0
   17074:	bl	2aab8 <flatcc_verify_table_field@@Base>
   17078:	cmp	r0, #0
   1707c:	popne	{r4, pc}
   17080:	ldr	r3, [pc, #56]	; 170c0 <_start@@Base+0x1ee4>
   17084:	mov	r2, r0
   17088:	add	r3, pc, r3
   1708c:	mov	r1, #1
   17090:	mov	r0, r4
   17094:	bl	2aab8 <flatcc_verify_table_field@@Base>
   17098:	cmp	r0, #0
   1709c:	popne	{r4, pc}
   170a0:	ldr	r3, [pc, #28]	; 170c4 <_start@@Base+0x1ee8>
   170a4:	mov	r2, r0
   170a8:	add	r3, pc, r3
   170ac:	mov	r0, r4
   170b0:	mov	r1, #2
   170b4:	pop	{r4, lr}
   170b8:	b	2aab8 <flatcc_verify_table_field@@Base>
   170bc:			; <UNDEFINED> instruction: 0xfffffef8
   170c0:	andeq	r0, r0, r4, asr #23
   170c4:			; <UNDEFINED> instruction: 0xfffffdc4
   170c8:	push	{r4, r5, r6, r7, r8, lr}
   170cc:	mov	r3, #16
   170d0:	sub	sp, sp, #8
   170d4:	mov	r2, #32
   170d8:	mov	r1, #0
   170dc:	mov	r4, r0
   170e0:	bl	2a7ac <flatcc_verify_field@@Base>
   170e4:	cmp	r0, #0
   170e8:	beq	170f4 <_start@@Base+0x1f18>
   170ec:	add	sp, sp, #8
   170f0:	pop	{r4, r5, r6, r7, r8, pc}
   170f4:	mov	r3, #2
   170f8:	mov	r2, r3
   170fc:	mov	r1, r3
   17100:	mov	r0, r4
   17104:	bl	2a7ac <flatcc_verify_field@@Base>
   17108:	cmp	r0, #0
   1710c:	bne	170ec <_start@@Base+0x1f10>
   17110:	mov	r3, #2
   17114:	mov	r2, r3
   17118:	mov	r1, #1
   1711c:	mov	r0, r4
   17120:	bl	2a7ac <flatcc_verify_field@@Base>
   17124:	cmp	r0, #0
   17128:	bne	170ec <_start@@Base+0x1f10>
   1712c:	mov	r2, #1
   17130:	mov	r1, #3
   17134:	mov	r0, r4
   17138:	bl	2a81c <flatcc_verify_string_field@@Base>
   1713c:	cmp	r0, #0
   17140:	bne	170ec <_start@@Base+0x1f10>
   17144:	mov	r3, #1
   17148:	mov	r2, r3
   1714c:	mov	r1, #6
   17150:	mov	r0, r4
   17154:	bl	2a7ac <flatcc_verify_field@@Base>
   17158:	cmp	r0, #0
   1715c:	bne	170ec <_start@@Base+0x1f10>
   17160:	mov	r5, #1
   17164:	mvn	r6, #0
   17168:	mov	r2, r0
   1716c:	stm	sp, {r5, r6}
   17170:	mov	r3, r5
   17174:	mov	r1, #5
   17178:	mov	r0, r4
   1717c:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   17180:	cmp	r0, #0
   17184:	bne	170ec <_start@@Base+0x1f10>
   17188:	ldr	r3, [pc, #868]	; 174f4 <_start@@Base+0x2318>
   1718c:	mov	r2, r0
   17190:	add	r3, pc, r3
   17194:	mov	r1, #11
   17198:	mov	r0, r4
   1719c:	bl	2abcc <flatcc_verify_table_vector_field@@Base>
   171a0:	cmp	r0, #0
   171a4:	bne	170ec <_start@@Base+0x1f10>
   171a8:	mov	r2, r0
   171ac:	mov	r1, #10
   171b0:	mov	r0, r4
   171b4:	bl	2a958 <flatcc_verify_string_vector_field@@Base>
   171b8:	cmp	r0, #0
   171bc:	bne	170ec <_start@@Base+0x1f10>
   171c0:	mov	r2, r0
   171c4:	mov	r1, #28
   171c8:	mov	r0, r4
   171cc:	bl	2a958 <flatcc_verify_string_vector_field@@Base>
   171d0:	cmp	r0, #0
   171d4:	bne	170ec <_start@@Base+0x1f10>
   171d8:	mov	r2, r0
   171dc:	stm	sp, {r5, r6}
   171e0:	mov	r3, r5
   171e4:	mov	r1, #24
   171e8:	mov	r0, r4
   171ec:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   171f0:	cmp	r0, #0
   171f4:	bne	170ec <_start@@Base+0x1f10>
   171f8:	mvn	r3, #-536870912	; 0xe0000000
   171fc:	mov	r5, #4
   17200:	str	r3, [sp, #4]
   17204:	str	r5, [sp]
   17208:	mov	r3, #8
   1720c:	mov	r2, #0
   17210:	mov	r1, #29
   17214:	mov	r0, r4
   17218:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   1721c:	cmp	r0, #0
   17220:	bne	170ec <_start@@Base+0x1f10>
   17224:	ldr	r7, [pc, #716]	; 174f8 <_start@@Base+0x231c>
   17228:	mov	r2, r0
   1722c:	add	r7, pc, r7
   17230:	mov	r3, r7
   17234:	mov	r1, #12
   17238:	mov	r0, r4
   1723c:	bl	2aab8 <flatcc_verify_table_field@@Base>
   17240:	cmp	r0, #0
   17244:	bne	170ec <_start@@Base+0x1f10>
   17248:	ldr	r3, [pc, #684]	; 174fc <_start@@Base+0x2320>
   1724c:	mov	r2, r0
   17250:	add	r3, pc, r3
   17254:	mov	r1, #8
   17258:	mov	r0, r4
   1725c:	bl	2b6c4 <flatcc_verify_union_field@@Base>
   17260:	cmp	r0, #0
   17264:	bne	170ec <_start@@Base+0x1f10>
   17268:	mvn	r8, #-1073741824	; 0xc0000000
   1726c:	mov	r6, #2
   17270:	mov	r2, r0
   17274:	stm	sp, {r6, r8}
   17278:	mov	r3, r5
   1727c:	mov	r1, #9
   17280:	mov	r0, r4
   17284:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   17288:	cmp	r0, #0
   1728c:	bne	170ec <_start@@Base+0x1f10>
   17290:	mov	r2, r0
   17294:	stm	sp, {r6, r8}
   17298:	mov	r3, r5
   1729c:	mov	r1, #31
   172a0:	mov	r0, r4
   172a4:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   172a8:	cmp	r0, #0
   172ac:	bne	170ec <_start@@Base+0x1f10>
   172b0:	mov	r6, #1
   172b4:	mov	r3, r0
   172b8:	mov	r2, r0
   172bc:	stm	sp, {r6, r7}
   172c0:	mov	r1, #13
   172c4:	mov	r0, r4
   172c8:	bl	2b508 <flatcc_verify_table_as_nested_root@@Base>
   172cc:	cmp	r0, #0
   172d0:	bne	170ec <_start@@Base+0x1f10>
   172d4:	ldr	r3, [pc, #548]	; 17500 <_start@@Base+0x2324>
   172d8:	mov	r2, r0
   172dc:	add	r3, pc, r3
   172e0:	mov	r1, #14
   172e4:	mov	r0, r4
   172e8:	bl	2aab8 <flatcc_verify_table_field@@Base>
   172ec:	cmp	r0, #0
   172f0:	bne	170ec <_start@@Base+0x1f10>
   172f4:	mov	r3, r6
   172f8:	mov	r2, r6
   172fc:	mov	r1, #15
   17300:	mov	r0, r4
   17304:	bl	2a7ac <flatcc_verify_field@@Base>
   17308:	cmp	r0, #0
   1730c:	bne	170ec <_start@@Base+0x1f10>
   17310:	mov	r3, r5
   17314:	mov	r2, r5
   17318:	mov	r1, #16
   1731c:	mov	r0, r4
   17320:	bl	2a7ac <flatcc_verify_field@@Base>
   17324:	cmp	r0, #0
   17328:	bne	170ec <_start@@Base+0x1f10>
   1732c:	mov	r3, r5
   17330:	mov	r2, r5
   17334:	mov	r1, #17
   17338:	mov	r0, r4
   1733c:	bl	2a7ac <flatcc_verify_field@@Base>
   17340:	cmp	r0, #0
   17344:	bne	170ec <_start@@Base+0x1f10>
   17348:	mov	r3, #8
   1734c:	mov	r2, r3
   17350:	mov	r1, #18
   17354:	mov	r0, r4
   17358:	bl	2a7ac <flatcc_verify_field@@Base>
   1735c:	cmp	r0, #0
   17360:	bne	170ec <_start@@Base+0x1f10>
   17364:	mov	r3, #8
   17368:	mov	r2, r3
   1736c:	mov	r1, #19
   17370:	mov	r0, r4
   17374:	bl	2a7ac <flatcc_verify_field@@Base>
   17378:	cmp	r0, #0
   1737c:	bne	170ec <_start@@Base+0x1f10>
   17380:	mov	r3, r5
   17384:	mov	r2, r5
   17388:	mov	r1, #20
   1738c:	mov	r0, r4
   17390:	bl	2a7ac <flatcc_verify_field@@Base>
   17394:	cmp	r0, #0
   17398:	bne	170ec <_start@@Base+0x1f10>
   1739c:	mov	r3, r5
   173a0:	mov	r2, r5
   173a4:	mov	r1, #21
   173a8:	mov	r0, r4
   173ac:	bl	2a7ac <flatcc_verify_field@@Base>
   173b0:	cmp	r0, #0
   173b4:	bne	170ec <_start@@Base+0x1f10>
   173b8:	mov	r3, #8
   173bc:	mov	r2, r3
   173c0:	mov	r1, #22
   173c4:	mov	r0, r4
   173c8:	bl	2a7ac <flatcc_verify_field@@Base>
   173cc:	cmp	r0, #0
   173d0:	bne	170ec <_start@@Base+0x1f10>
   173d4:	mov	r3, #8
   173d8:	mov	r2, r3
   173dc:	mov	r1, #23
   173e0:	mov	r0, r4
   173e4:	bl	2a7ac <flatcc_verify_field@@Base>
   173e8:	cmp	r0, #0
   173ec:	bne	170ec <_start@@Base+0x1f10>
   173f0:	mov	r3, r5
   173f4:	mov	r2, r5
   173f8:	mov	r1, #25
   173fc:	mov	r0, r4
   17400:	bl	2a7ac <flatcc_verify_field@@Base>
   17404:	cmp	r0, #0
   17408:	bne	170ec <_start@@Base+0x1f10>
   1740c:	mov	r3, r5
   17410:	mov	r2, r5
   17414:	mov	r1, #26
   17418:	mov	r0, r4
   1741c:	bl	2a7ac <flatcc_verify_field@@Base>
   17420:	cmp	r0, #0
   17424:	bne	170ec <_start@@Base+0x1f10>
   17428:	mov	r3, r5
   1742c:	mov	r2, r5
   17430:	mov	r1, #27
   17434:	mov	r0, r4
   17438:	bl	2a7ac <flatcc_verify_field@@Base>
   1743c:	cmp	r0, #0
   17440:	bne	170ec <_start@@Base+0x1f10>
   17444:	mvn	r1, #0
   17448:	mov	r2, r0
   1744c:	str	r1, [sp, #4]
   17450:	mov	r3, r6
   17454:	str	r6, [sp]
   17458:	mov	r1, #30
   1745c:	mov	r0, r4
   17460:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   17464:	cmp	r0, #0
   17468:	bne	170ec <_start@@Base+0x1f10>
   1746c:	mov	r5, #8
   17470:	mvn	r6, #-536870912	; 0xe0000000
   17474:	mov	r3, r5
   17478:	stm	sp, {r5, r6}
   1747c:	mov	r2, #0
   17480:	mov	r1, #32
   17484:	mov	r0, r4
   17488:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   1748c:	cmp	r0, #0
   17490:	bne	170ec <_start@@Base+0x1f10>
   17494:	mov	r2, r0
   17498:	stm	sp, {r5, r6}
   1749c:	mov	r3, r5
   174a0:	mov	r1, #33	; 0x21
   174a4:	mov	r0, r4
   174a8:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   174ac:	cmp	r0, #0
   174b0:	bne	170ec <_start@@Base+0x1f10>
   174b4:	ldr	r3, [pc, #72]	; 17504 <_start@@Base+0x2328>
   174b8:	mov	r2, r0
   174bc:	add	r3, pc, r3
   174c0:	mov	r1, #34	; 0x22
   174c4:	mov	r0, r4
   174c8:	bl	2aab8 <flatcc_verify_table_field@@Base>
   174cc:	cmp	r0, #0
   174d0:	bne	170ec <_start@@Base+0x1f10>
   174d4:	ldr	r3, [pc, #44]	; 17508 <_start@@Base+0x232c>
   174d8:	mov	r2, r0
   174dc:	add	r3, pc, r3
   174e0:	mov	r0, r4
   174e4:	mov	r1, #35	; 0x23
   174e8:	add	sp, sp, #8
   174ec:	pop	{r4, r5, r6, r7, r8, lr}
   174f0:	b	2aab8 <flatcc_verify_table_field@@Base>
   174f4:			; <UNDEFINED> instruction: 0xffffff30
   174f8:			; <UNDEFINED> instruction: 0xfffffe94
   174fc:	andeq	r0, r0, r0, asr #6
   17500:			; <UNDEFINED> instruction: 0xfffffc38
   17504:	andeq	r0, r0, r0, lsl #9
   17508:	andeq	r0, r0, r8, lsr #32
   1750c:	push	{r4, r5, r6, lr}
   17510:	mov	r4, #1
   17514:	sub	sp, sp, #8
   17518:	mvn	r5, #0
   1751c:	mov	r2, #0
   17520:	mov	r1, r2
   17524:	stm	sp, {r4, r5}
   17528:	mov	r3, r4
   1752c:	mov	r6, r0
   17530:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   17534:	subs	r2, r0, #0
   17538:	beq	17548 <_start@@Base+0x236c>
   1753c:	mov	r0, r2
   17540:	add	sp, sp, #8
   17544:	pop	{r4, r5, r6, pc}
   17548:	stm	sp, {r4, r5}
   1754c:	mov	r3, r4
   17550:	mov	r1, r4
   17554:	mov	r0, r6
   17558:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   1755c:	subs	r2, r0, #0
   17560:	bne	1753c <_start@@Base+0x2360>
   17564:	ldr	r3, [pc, #40]	; 17594 <_start@@Base+0x23b8>
   17568:	str	r4, [sp]
   1756c:	add	r3, pc, r3
   17570:	str	r3, [sp, #4]
   17574:	mov	r0, r6
   17578:	mov	r3, r2
   1757c:	mov	r1, #2
   17580:	bl	2b508 <flatcc_verify_table_as_nested_root@@Base>
   17584:	mov	r2, r0
   17588:	mov	r0, r2
   1758c:	add	sp, sp, #8
   17590:	pop	{r4, r5, r6, pc}
   17594:			; <UNDEFINED> instruction: 0xfffffb54
   17598:	ldrb	r3, [r0, #12]
   1759c:	sub	r3, r3, #1
   175a0:	cmp	r3, #3
   175a4:	addls	pc, pc, r3, lsl #2
   175a8:	b	175ec <_start@@Base+0x2410>
   175ac:	b	175e0 <_start@@Base+0x2404>
   175b0:	b	175d4 <_start@@Base+0x23f8>
   175b4:	b	175c8 <_start@@Base+0x23ec>
   175b8:	b	175bc <_start@@Base+0x23e0>
   175bc:	ldr	r1, [pc, #48]	; 175f4 <_start@@Base+0x2418>
   175c0:	add	r1, pc, r1
   175c4:	b	2ae84 <flatcc_verify_union_table@@Base>
   175c8:	ldr	r1, [pc, #40]	; 175f8 <_start@@Base+0x241c>
   175cc:	add	r1, pc, r1
   175d0:	b	2ae84 <flatcc_verify_union_table@@Base>
   175d4:	ldr	r1, [pc, #32]	; 175fc <_start@@Base+0x2420>
   175d8:	add	r1, pc, r1
   175dc:	b	2ae84 <flatcc_verify_union_table@@Base>
   175e0:	ldr	r1, [pc, #24]	; 17600 <_start@@Base+0x2424>
   175e4:	add	r1, pc, r1
   175e8:	b	2ae84 <flatcc_verify_union_table@@Base>
   175ec:	mov	r0, #0
   175f0:	bx	lr
   175f4:	andeq	r0, r0, ip, lsr r0
   175f8:			; <UNDEFINED> instruction: 0xffffdeb8
   175fc:			; <UNDEFINED> instruction: 0xfffff8cc
   17600:			; <UNDEFINED> instruction: 0xfffffadc
   17604:	ldr	r3, [pc, #88]	; 17664 <_start@@Base+0x2488>
   17608:	mov	r2, #0
   1760c:	push	{r4, lr}
   17610:	mov	r1, r2
   17614:	add	r3, pc, r3
   17618:	mov	r4, r0
   1761c:	bl	2aab8 <flatcc_verify_table_field@@Base>
   17620:	cmp	r0, #0
   17624:	popne	{r4, pc}
   17628:	ldr	r3, [pc, #56]	; 17668 <_start@@Base+0x248c>
   1762c:	mov	r2, r0
   17630:	add	r3, pc, r3
   17634:	mov	r1, #1
   17638:	mov	r0, r4
   1763c:	bl	2aab8 <flatcc_verify_table_field@@Base>
   17640:	cmp	r0, #0
   17644:	popne	{r4, pc}
   17648:	ldr	r3, [pc, #28]	; 1766c <_start@@Base+0x2490>
   1764c:	mov	r2, r0
   17650:	add	r3, pc, r3
   17654:	mov	r0, r4
   17658:	mov	r1, #3
   1765c:	pop	{r4, lr}
   17660:	b	2b81c <flatcc_verify_union_vector_field@@Base>
   17664:			; <UNDEFINED> instruction: 0xfffffa40
   17668:	andeq	r0, r0, r8, lsr r0
   1766c:			; <UNDEFINED> instruction: 0xffffff40
   17670:	push	{r4, r5, r6, lr}
   17674:	mov	r2, #0
   17678:	ldr	r4, [pc, #132]	; 17704 <_start@@Base+0x2528>
   1767c:	mov	r1, #1
   17680:	add	r4, pc, r4
   17684:	mov	r3, r4
   17688:	mov	r5, r0
   1768c:	bl	2b6c4 <flatcc_verify_union_field@@Base>
   17690:	cmp	r0, #0
   17694:	popne	{r4, r5, r6, pc}
   17698:	mov	r2, r0
   1769c:	mov	r3, r4
   176a0:	mov	r1, #3
   176a4:	mov	r0, r5
   176a8:	bl	2b6c4 <flatcc_verify_union_field@@Base>
   176ac:	cmp	r0, #0
   176b0:	popne	{r4, r5, r6, pc}
   176b4:	mov	r2, r0
   176b8:	mov	r3, r4
   176bc:	mov	r1, #5
   176c0:	mov	r0, r5
   176c4:	bl	2b6c4 <flatcc_verify_union_field@@Base>
   176c8:	cmp	r0, #0
   176cc:	popne	{r4, r5, r6, pc}
   176d0:	mov	r2, r0
   176d4:	mov	r3, r4
   176d8:	mov	r1, #7
   176dc:	mov	r0, r5
   176e0:	bl	2b6c4 <flatcc_verify_union_field@@Base>
   176e4:	cmp	r0, #0
   176e8:	popne	{r4, r5, r6, pc}
   176ec:	mov	r3, r4
   176f0:	mov	r2, r0
   176f4:	mov	r1, #9
   176f8:	mov	r0, r5
   176fc:	pop	{r4, r5, r6, lr}
   17700:	b	2b81c <flatcc_verify_union_vector_field@@Base>
   17704:	andeq	r0, r0, r0, lsl #1
   17708:	ldrb	r3, [r0, #12]
   1770c:	cmp	r3, #9
   17710:	beq	1774c <_start@@Base+0x2570>
   17714:	bls	17730 <_start@@Base+0x2554>
   17718:	cmp	r3, #11
   1771c:	beq	1772c <_start@@Base+0x2550>
   17720:	bcc	1774c <_start@@Base+0x2570>
   17724:	cmp	r3, #255	; 0xff
   17728:	bne	17758 <_start@@Base+0x257c>
   1772c:	b	2afd8 <flatcc_verify_union_string@@Base>
   17730:	cmp	r3, #2
   17734:	beq	17760 <_start@@Base+0x2584>
   17738:	cmp	r3, #8
   1773c:	bne	17758 <_start@@Base+0x257c>
   17740:	mov	r2, #2
   17744:	mov	r1, r2
   17748:	b	2af7c <flatcc_verify_union_struct@@Base>
   1774c:	mov	r2, #4
   17750:	mov	r1, r2
   17754:	b	2af7c <flatcc_verify_union_struct@@Base>
   17758:	mov	r0, #0
   1775c:	bx	lr
   17760:	ldr	r1, [pc, #4]	; 1776c <_start@@Base+0x2590>
   17764:	add	r1, pc, r1
   17768:	b	2ae84 <flatcc_verify_union_table@@Base>
   1776c:			; <UNDEFINED> instruction: 0xffffdd28
   17770:	sub	r1, r1, #1
   17774:	cmp	r1, #3
   17778:	addls	pc, pc, r1, lsl #2
   1777c:	b	177d0 <_start@@Base+0x25f4>
   17780:	b	177c0 <_start@@Base+0x25e4>
   17784:	b	177b0 <_start@@Base+0x25d4>
   17788:	b	177a0 <_start@@Base+0x25c4>
   1778c:	b	17790 <_start@@Base+0x25b4>
   17790:	ldr	r1, [pc, #72]	; 177e0 <_start@@Base+0x2604>
   17794:	mov	r2, #3
   17798:	add	r1, pc, r1
   1779c:	b	3276c <flatcc_json_printer_enum@@Base>
   177a0:	ldr	r1, [pc, #60]	; 177e4 <_start@@Base+0x2608>
   177a4:	mov	r2, #8
   177a8:	add	r1, pc, r1
   177ac:	b	3276c <flatcc_json_printer_enum@@Base>
   177b0:	ldr	r1, [pc, #48]	; 177e8 <_start@@Base+0x260c>
   177b4:	mov	r2, #23
   177b8:	add	r1, pc, r1
   177bc:	b	3276c <flatcc_json_printer_enum@@Base>
   177c0:	ldr	r1, [pc, #36]	; 177ec <_start@@Base+0x2610>
   177c4:	mov	r2, #7
   177c8:	add	r1, pc, r1
   177cc:	b	3276c <flatcc_json_printer_enum@@Base>
   177d0:	ldr	r1, [pc, #24]	; 177f0 <_start@@Base+0x2614>
   177d4:	mov	r2, #4
   177d8:	add	r1, pc, r1
   177dc:	b	3276c <flatcc_json_printer_enum@@Base>
   177e0:	andeq	r6, r2, r4, ror #18
   177e4:	andeq	r6, r2, r8, asr #18
   177e8:	andeq	r6, r2, r0, lsr #18
   177ec:	andeq	r6, r2, r8, lsl #18
   177f0:	andeq	sl, r2, ip, lsl r4
   177f4:	push	{r4, r5, r6, r7, lr}
   177f8:	mov	r4, #0
   177fc:	sub	sp, sp, #28
   17800:	mov	r5, #0
   17804:	cmp	r1, r2
   17808:	strd	r4, [r3]
   1780c:	strd	r4, [sp, #16]
   17810:	str	r4, [sp, #12]
   17814:	moveq	r0, r1
   17818:	beq	1786c <_start@@Base+0x2690>
   1781c:	mov	r5, r3
   17820:	add	r3, sp, #16
   17824:	str	r3, [sp]
   17828:	add	r3, sp, #12
   1782c:	mov	r4, r1
   17830:	mov	r6, r2
   17834:	mov	r7, r0
   17838:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1783c:	cmp	r4, r0
   17840:	beq	1786c <_start@@Base+0x2690>
   17844:	ldr	r1, [sp, #12]
   17848:	ldrd	r2, [sp, #16]
   1784c:	cmp	r1, #0
   17850:	beq	17874 <_start@@Base+0x2698>
   17854:	cmp	r3, #-2147483648	; 0x80000000
   17858:	cmpeq	r2, #0
   1785c:	bhi	1788c <_start@@Base+0x26b0>
   17860:	rsbs	r2, r2, #0
   17864:	rsc	r3, r3, #0
   17868:	strd	r2, [r5]
   1786c:	add	sp, sp, #28
   17870:	pop	{r4, r5, r6, r7, pc}
   17874:	cmp	r2, #0
   17878:	sbcs	r1, r3, #0
   1787c:	blt	178a4 <_start@@Base+0x26c8>
   17880:	strd	r2, [r5]
   17884:	add	sp, sp, #28
   17888:	pop	{r4, r5, r6, r7, pc}
   1788c:	mov	r1, r0
   17890:	mov	r2, r6
   17894:	mov	r0, r7
   17898:	mov	r3, #8
   1789c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   178a0:	b	1786c <_start@@Base+0x2690>
   178a4:	mov	r1, r0
   178a8:	mov	r2, r6
   178ac:	mov	r0, r7
   178b0:	mov	r3, #7
   178b4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   178b8:	b	1786c <_start@@Base+0x2690>
   178bc:	push	{r4, r5, r6, r7, lr}
   178c0:	mov	r4, #0
   178c4:	sub	sp, sp, #28
   178c8:	mov	r5, #0
   178cc:	cmp	r1, r2
   178d0:	strd	r4, [r3]
   178d4:	strd	r4, [sp, #16]
   178d8:	str	r4, [sp, #12]
   178dc:	moveq	r0, r1
   178e0:	beq	17920 <_start@@Base+0x2744>
   178e4:	mov	r5, r3
   178e8:	add	r3, sp, #16
   178ec:	str	r3, [sp]
   178f0:	add	r3, sp, #12
   178f4:	mov	r4, r1
   178f8:	mov	r6, r2
   178fc:	mov	r7, r0
   17900:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   17904:	cmp	r4, r0
   17908:	beq	17920 <_start@@Base+0x2744>
   1790c:	ldr	r3, [sp, #12]
   17910:	cmp	r3, #0
   17914:	bne	17928 <_start@@Base+0x274c>
   17918:	ldrd	r2, [sp, #16]
   1791c:	strd	r2, [r5]
   17920:	add	sp, sp, #28
   17924:	pop	{r4, r5, r6, r7, pc}
   17928:	mov	r1, r0
   1792c:	mov	r2, r6
   17930:	mov	r0, r7
   17934:	mov	r3, #8
   17938:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1793c:	add	sp, sp, #28
   17940:	pop	{r4, r5, r6, r7, pc}
   17944:	mov	r0, #0
   17948:	bx	lr
   1794c:	bx	lr
   17950:	push	{r4, r5, r6, r7, r8, r9, lr}
   17954:	mov	r6, #0
   17958:	sub	sp, sp, #28
   1795c:	mov	r7, #0
   17960:	mov	lr, #0
   17964:	cmp	r1, r2
   17968:	str	lr, [r3]
   1796c:	str	lr, [sp, #12]
   17970:	strd	r6, [sp, #16]
   17974:	moveq	r0, r1
   17978:	beq	179cc <_start@@Base+0x27f0>
   1797c:	mov	r5, r3
   17980:	add	r3, sp, #16
   17984:	str	r3, [sp]
   17988:	add	r3, sp, #12
   1798c:	mov	r4, r1
   17990:	mov	r7, r0
   17994:	mov	r6, r2
   17998:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1799c:	cmp	r4, r0
   179a0:	beq	179cc <_start@@Base+0x27f0>
   179a4:	ldr	r3, [sp, #12]
   179a8:	cmp	r3, #0
   179ac:	bne	179d4 <_start@@Base+0x27f8>
   179b0:	ldrd	r2, [sp, #16]
   179b4:	mov	r9, #0
   179b8:	mvn	r8, #0
   179bc:	cmp	r3, r9
   179c0:	cmpeq	r2, r8
   179c4:	strls	r2, [r5]
   179c8:	bhi	179f0 <_start@@Base+0x2814>
   179cc:	add	sp, sp, #28
   179d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   179d4:	mov	r1, r0
   179d8:	mov	r2, r6
   179dc:	mov	r0, r7
   179e0:	mov	r3, #8
   179e4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   179e8:	add	sp, sp, #28
   179ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   179f0:	mov	r1, r0
   179f4:	mov	r2, r6
   179f8:	mov	r0, r7
   179fc:	mov	r3, #7
   17a00:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17a04:	add	sp, sp, #28
   17a08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17a0c:	push	{r4, r5, r6, r7, lr}
   17a10:	mov	r6, #0
   17a14:	sub	sp, sp, #28
   17a18:	mov	r7, #0
   17a1c:	mov	lr, #0
   17a20:	cmp	r1, r2
   17a24:	strb	lr, [r3]
   17a28:	str	lr, [sp, #12]
   17a2c:	strd	r6, [sp, #16]
   17a30:	moveq	r0, r1
   17a34:	beq	17a80 <_start@@Base+0x28a4>
   17a38:	mov	r5, r3
   17a3c:	add	r3, sp, #16
   17a40:	str	r3, [sp]
   17a44:	add	r3, sp, #12
   17a48:	mov	r4, r1
   17a4c:	mov	r7, r0
   17a50:	mov	r6, r2
   17a54:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   17a58:	cmp	r4, r0
   17a5c:	beq	17a80 <_start@@Base+0x28a4>
   17a60:	ldr	r3, [sp, #12]
   17a64:	cmp	r3, #0
   17a68:	bne	17a88 <_start@@Base+0x28ac>
   17a6c:	ldrd	r2, [sp, #16]
   17a70:	cmp	r3, #0
   17a74:	cmpeq	r2, #255	; 0xff
   17a78:	strbls	r2, [r5]
   17a7c:	bhi	17aa4 <_start@@Base+0x28c8>
   17a80:	add	sp, sp, #28
   17a84:	pop	{r4, r5, r6, r7, pc}
   17a88:	mov	r1, r0
   17a8c:	mov	r2, r6
   17a90:	mov	r0, r7
   17a94:	mov	r3, #8
   17a98:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17a9c:	add	sp, sp, #28
   17aa0:	pop	{r4, r5, r6, r7, pc}
   17aa4:	mov	r1, r0
   17aa8:	mov	r2, r6
   17aac:	mov	r0, r7
   17ab0:	mov	r3, #7
   17ab4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17ab8:	add	sp, sp, #28
   17abc:	pop	{r4, r5, r6, r7, pc}
   17ac0:	push	{r4, r5, r6, r7, r8, r9, lr}
   17ac4:	mov	r6, #0
   17ac8:	sub	sp, sp, #28
   17acc:	mov	r7, #0
   17ad0:	mov	lr, #0
   17ad4:	cmp	r1, r2
   17ad8:	str	lr, [r3]
   17adc:	str	lr, [sp, #12]
   17ae0:	strd	r6, [sp, #16]
   17ae4:	moveq	r0, r1
   17ae8:	beq	17b38 <_start@@Base+0x295c>
   17aec:	mov	r5, r3
   17af0:	add	r3, sp, #16
   17af4:	str	r3, [sp]
   17af8:	add	r3, sp, #12
   17afc:	mov	r4, r1
   17b00:	mov	r7, r0
   17b04:	mov	r6, r2
   17b08:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   17b0c:	cmp	r4, r0
   17b10:	beq	17b38 <_start@@Base+0x295c>
   17b14:	ldr	r1, [sp, #12]
   17b18:	ldrd	r2, [sp, #16]
   17b1c:	cmp	r1, #0
   17b20:	beq	17b40 <_start@@Base+0x2964>
   17b24:	cmp	r3, #0
   17b28:	cmpeq	r2, #-2147483648	; 0x80000000
   17b2c:	rsbls	r2, r2, #0
   17b30:	strls	r2, [r5]
   17b34:	bhi	17b70 <_start@@Base+0x2994>
   17b38:	add	sp, sp, #28
   17b3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17b40:	mov	r9, #0
   17b44:	cmp	r3, r9
   17b48:	mvn	r8, #-2147483648	; 0x80000000
   17b4c:	cmpeq	r2, r8
   17b50:	strls	r2, [r5]
   17b54:	bls	17b38 <_start@@Base+0x295c>
   17b58:	mov	r1, r0
   17b5c:	mov	r2, r6
   17b60:	mov	r0, r7
   17b64:	mov	r3, #7
   17b68:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17b6c:	b	17b38 <_start@@Base+0x295c>
   17b70:	mov	r1, r0
   17b74:	mov	r2, r6
   17b78:	mov	r0, r7
   17b7c:	mov	r3, #8
   17b80:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17b84:	b	17b38 <_start@@Base+0x295c>
   17b88:	push	{r4, r5, r6, r7, r8, r9, lr}
   17b8c:	mov	r6, #0
   17b90:	sub	sp, sp, #28
   17b94:	mov	r7, #0
   17b98:	mov	lr, #0
   17b9c:	cmp	r1, r2
   17ba0:	strh	lr, [r3]
   17ba4:	str	lr, [sp, #12]
   17ba8:	strd	r6, [sp, #16]
   17bac:	moveq	r0, r1
   17bb0:	beq	17c00 <_start@@Base+0x2a24>
   17bb4:	mov	r5, r3
   17bb8:	add	r3, sp, #16
   17bbc:	str	r3, [sp]
   17bc0:	add	r3, sp, #12
   17bc4:	mov	r4, r1
   17bc8:	mov	r7, r0
   17bcc:	mov	r6, r2
   17bd0:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   17bd4:	cmp	r4, r0
   17bd8:	beq	17c00 <_start@@Base+0x2a24>
   17bdc:	ldr	r1, [sp, #12]
   17be0:	ldrd	r2, [sp, #16]
   17be4:	cmp	r1, #0
   17be8:	beq	17c08 <_start@@Base+0x2a2c>
   17bec:	cmp	r3, #0
   17bf0:	cmpeq	r2, #32768	; 0x8000
   17bf4:	rsbls	r2, r2, #0
   17bf8:	strhls	r2, [r5]
   17bfc:	bhi	17c38 <_start@@Base+0x2a5c>
   17c00:	add	sp, sp, #28
   17c04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17c08:	ldr	r8, [pc, #64]	; 17c50 <_start@@Base+0x2a74>
   17c0c:	mov	r9, #0
   17c10:	cmp	r3, r9
   17c14:	cmpeq	r2, r8
   17c18:	strhls	r2, [r5]
   17c1c:	bls	17c00 <_start@@Base+0x2a24>
   17c20:	mov	r1, r0
   17c24:	mov	r2, r6
   17c28:	mov	r0, r7
   17c2c:	mov	r3, #7
   17c30:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17c34:	b	17c00 <_start@@Base+0x2a24>
   17c38:	mov	r1, r0
   17c3c:	mov	r2, r6
   17c40:	mov	r0, r7
   17c44:	mov	r3, #8
   17c48:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17c4c:	b	17c00 <_start@@Base+0x2a24>
   17c50:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   17c54:	mov	r3, #8
   17c58:	push	{r4, lr}
   17c5c:	mov	r2, r3
   17c60:	mov	r1, #0
   17c64:	mov	r4, r0
   17c68:	bl	2a7ac <flatcc_verify_field@@Base>
   17c6c:	cmp	r0, #0
   17c70:	popne	{r4, pc}
   17c74:	mov	r3, #4
   17c78:	mov	r0, r4
   17c7c:	mov	r2, r3
   17c80:	mov	r1, #1
   17c84:	pop	{r4, lr}
   17c88:	b	2a7ac <flatcc_verify_field@@Base>
   17c8c:	cmp	r1, r2
   17c90:	beq	17ca0 <_start@@Base+0x2ac4>
   17c94:	ldrb	ip, [r1]
   17c98:	cmp	ip, #123	; 0x7b
   17c9c:	beq	17cb0 <_start@@Base+0x2ad4>
   17ca0:	mov	ip, #0
   17ca4:	str	ip, [r3]
   17ca8:	mov	r3, #21
   17cac:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   17cb0:	push	{r4, r5, r6, lr}
   17cb4:	mov	r5, r0
   17cb8:	add	r0, r1, #1
   17cbc:	mov	r6, r3
   17cc0:	sub	r3, r2, r0
   17cc4:	cmp	r3, #1
   17cc8:	mov	r4, r2
   17ccc:	ble	17ce0 <_start@@Base+0x2b04>
   17cd0:	ldrb	r3, [r1, #1]
   17cd4:	cmp	r3, #32
   17cd8:	bhi	17cf0 <_start@@Base+0x2b14>
   17cdc:	beq	17d10 <_start@@Base+0x2b34>
   17ce0:	mov	r1, r0
   17ce4:	mov	r2, r4
   17ce8:	mov	r0, r5
   17cec:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   17cf0:	cmp	r4, r0
   17cf4:	beq	17d04 <_start@@Base+0x2b28>
   17cf8:	ldrb	r3, [r0]
   17cfc:	cmp	r3, #125	; 0x7d
   17d00:	beq	17d24 <_start@@Base+0x2b48>
   17d04:	mov	r3, #1
   17d08:	str	r3, [r6]
   17d0c:	pop	{r4, r5, r6, pc}
   17d10:	ldrb	r3, [r1, #2]
   17d14:	cmp	r3, #32
   17d18:	addhi	r0, r1, #2
   17d1c:	bls	17ce0 <_start@@Base+0x2b04>
   17d20:	b	17cf0 <_start@@Base+0x2b14>
   17d24:	mov	r3, #0
   17d28:	mov	r2, r4
   17d2c:	add	r1, r0, #1
   17d30:	str	r3, [r6]
   17d34:	mov	r0, r5
   17d38:	pop	{r4, r5, r6, lr}
   17d3c:	b	16e38 <_start@@Base+0x1c5c>
   17d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d44:	sub	sp, sp, #36	; 0x24
   17d48:	mov	ip, #0
   17d4c:	str	r3, [sp, #12]
   17d50:	ldr	r3, [sp, #72]	; 0x48
   17d54:	cmp	r1, r2
   17d58:	mov	r6, r2
   17d5c:	str	ip, [r3]
   17d60:	mov	r8, r0
   17d64:	beq	17eac <_start@@Base+0x2cd0>
   17d68:	ldrb	r3, [r1]
   17d6c:	cmp	r3, #34	; 0x22
   17d70:	beq	17e8c <_start@@Base+0x2cb0>
   17d74:	mov	r3, #5
   17d78:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17d7c:	mov	r5, r0
   17d80:	sub	r3, r6, r0
   17d84:	cmp	r3, #1
   17d88:	ble	17d9c <_start@@Base+0x2bc0>
   17d8c:	ldrb	r3, [r5]
   17d90:	cmp	r3, #32
   17d94:	bhi	17db0 <_start@@Base+0x2bd4>
   17d98:	beq	17e98 <_start@@Base+0x2cbc>
   17d9c:	mov	r1, r5
   17da0:	mov	r2, r6
   17da4:	mov	r0, r8
   17da8:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   17dac:	mov	r5, r0
   17db0:	cmp	r6, r5
   17db4:	beq	17e08 <_start@@Base+0x2c2c>
   17db8:	add	fp, sp, #16
   17dbc:	add	sl, sp, #20
   17dc0:	add	r9, sp, #24
   17dc4:	ldr	r3, [sp, #12]
   17dc8:	mov	r7, r3
   17dcc:	ldr	r4, [r3]
   17dd0:	b	17de8 <_start@@Base+0x2c0c>
   17dd4:	cmp	r5, r0
   17dd8:	bne	17e14 <_start@@Base+0x2c38>
   17ddc:	ldr	r4, [r7, #4]!
   17de0:	cmp	r4, #0
   17de4:	beq	17e5c <_start@@Base+0x2c80>
   17de8:	stm	sp, {r9, sl}
   17dec:	mov	r3, fp
   17df0:	mov	r2, r6
   17df4:	mov	r1, r5
   17df8:	mov	r0, r8
   17dfc:	blx	r4
   17e00:	cmp	r6, r0
   17e04:	bne	17dd4 <_start@@Base+0x2bf8>
   17e08:	mov	r0, r6
   17e0c:	add	sp, sp, #36	; 0x24
   17e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e14:	ldr	r3, [sp, #16]
   17e18:	mov	r4, r0
   17e1c:	cmp	r3, #0
   17e20:	ldrd	r0, [sp, #24]
   17e24:	beq	17e80 <_start@@Base+0x2ca4>
   17e28:	bl	3da68 <flatcc_json_printer_clear@@Base+0x7c0>
   17e2c:	vmov	s15, r0
   17e30:	vneg.f32	s14, s15
   17e34:	ldr	r3, [sp, #72]	; 0x48
   17e38:	vldr	s15, [r3]
   17e3c:	ldr	r3, [sp, #20]
   17e40:	cmp	r3, #0
   17e44:	vadd.f32	s15, s15, s14
   17e48:	ldr	r3, [sp, #72]	; 0x48
   17e4c:	vstr	s15, [r3]
   17e50:	beq	17eb4 <_start@@Base+0x2cd8>
   17e54:	mov	r5, r4
   17e58:	b	17dc4 <_start@@Base+0x2be8>
   17e5c:	mov	r2, r6
   17e60:	mov	r1, r5
   17e64:	mov	r0, r8
   17e68:	mov	r3, #23
   17e6c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17e70:	mov	r6, r0
   17e74:	mov	r0, r6
   17e78:	add	sp, sp, #36	; 0x24
   17e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e80:	bl	3da68 <flatcc_json_printer_clear@@Base+0x7c0>
   17e84:	vmov	s14, r0
   17e88:	b	17e34 <_start@@Base+0x2c58>
   17e8c:	add	r5, r1, #1
   17e90:	sub	r3, r2, r5
   17e94:	b	17d84 <_start@@Base+0x2ba8>
   17e98:	ldrb	r3, [r5, #1]
   17e9c:	cmp	r3, #32
   17ea0:	addhi	r5, r5, #1
   17ea4:	bls	17d9c <_start@@Base+0x2bc0>
   17ea8:	b	17db0 <_start@@Base+0x2bd4>
   17eac:	mov	r5, r2
   17eb0:	b	17d9c <_start@@Base+0x2bc0>
   17eb4:	mov	r6, r4
   17eb8:	b	17e08 <_start@@Base+0x2c2c>
   17ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ec0:	sub	sp, sp, #36	; 0x24
   17ec4:	mov	r8, #0
   17ec8:	str	r3, [sp, #12]
   17ecc:	ldr	r3, [sp, #72]	; 0x48
   17ed0:	mov	r9, #0
   17ed4:	cmp	r1, r2
   17ed8:	strd	r8, [r3]
   17edc:	mov	r6, r2
   17ee0:	mov	r8, r0
   17ee4:	beq	1802c <_start@@Base+0x2e50>
   17ee8:	ldrb	r3, [r1]
   17eec:	cmp	r3, #34	; 0x22
   17ef0:	beq	1800c <_start@@Base+0x2e30>
   17ef4:	mov	r3, #5
   17ef8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17efc:	mov	r5, r0
   17f00:	sub	r3, r6, r0
   17f04:	cmp	r3, #1
   17f08:	ble	17f1c <_start@@Base+0x2d40>
   17f0c:	ldrb	r3, [r5]
   17f10:	cmp	r3, #32
   17f14:	bhi	17f30 <_start@@Base+0x2d54>
   17f18:	beq	18018 <_start@@Base+0x2e3c>
   17f1c:	mov	r1, r5
   17f20:	mov	r2, r6
   17f24:	mov	r0, r8
   17f28:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   17f2c:	mov	r5, r0
   17f30:	cmp	r6, r5
   17f34:	beq	17f88 <_start@@Base+0x2dac>
   17f38:	add	fp, sp, #16
   17f3c:	add	sl, sp, #20
   17f40:	add	r9, sp, #24
   17f44:	ldr	r3, [sp, #12]
   17f48:	mov	r7, r3
   17f4c:	ldr	r4, [r3]
   17f50:	b	17f68 <_start@@Base+0x2d8c>
   17f54:	cmp	r5, r0
   17f58:	bne	17f94 <_start@@Base+0x2db8>
   17f5c:	ldr	r4, [r7, #4]!
   17f60:	cmp	r4, #0
   17f64:	beq	17fdc <_start@@Base+0x2e00>
   17f68:	stm	sp, {r9, sl}
   17f6c:	mov	r3, fp
   17f70:	mov	r2, r6
   17f74:	mov	r1, r5
   17f78:	mov	r0, r8
   17f7c:	blx	r4
   17f80:	cmp	r6, r0
   17f84:	bne	17f54 <_start@@Base+0x2d78>
   17f88:	mov	r0, r6
   17f8c:	add	sp, sp, #36	; 0x24
   17f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f94:	ldr	r3, [sp, #16]
   17f98:	mov	r4, r0
   17f9c:	cmp	r3, #0
   17fa0:	ldrd	r0, [sp, #24]
   17fa4:	beq	18000 <_start@@Base+0x2e24>
   17fa8:	bl	3d830 <flatcc_json_printer_clear@@Base+0x588>
   17fac:	vmov	d7, r0, r1
   17fb0:	vneg.f64	d6, d7
   17fb4:	ldr	r3, [sp, #72]	; 0x48
   17fb8:	vldr	d7, [r3]
   17fbc:	ldr	r3, [sp, #20]
   17fc0:	cmp	r3, #0
   17fc4:	vadd.f64	d7, d7, d6
   17fc8:	ldr	r3, [sp, #72]	; 0x48
   17fcc:	vstr	d7, [r3]
   17fd0:	beq	18034 <_start@@Base+0x2e58>
   17fd4:	mov	r5, r4
   17fd8:	b	17f44 <_start@@Base+0x2d68>
   17fdc:	mov	r2, r6
   17fe0:	mov	r1, r5
   17fe4:	mov	r0, r8
   17fe8:	mov	r3, #23
   17fec:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   17ff0:	mov	r6, r0
   17ff4:	mov	r0, r6
   17ff8:	add	sp, sp, #36	; 0x24
   17ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18000:	bl	3d830 <flatcc_json_printer_clear@@Base+0x588>
   18004:	vmov	d6, r0, r1
   18008:	b	17fb4 <_start@@Base+0x2dd8>
   1800c:	add	r5, r1, #1
   18010:	sub	r3, r2, r5
   18014:	b	17f04 <_start@@Base+0x2d28>
   18018:	ldrb	r3, [r5, #1]
   1801c:	cmp	r3, #32
   18020:	addhi	r5, r5, #1
   18024:	bls	17f1c <_start@@Base+0x2d40>
   18028:	b	17f30 <_start@@Base+0x2d54>
   1802c:	mov	r5, r2
   18030:	b	17f1c <_start@@Base+0x2d40>
   18034:	mov	r6, r4
   18038:	b	17f88 <_start@@Base+0x2dac>
   1803c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18040:	sub	sp, sp, #36	; 0x24
   18044:	mov	ip, #0
   18048:	str	r3, [sp, #12]
   1804c:	ldr	r3, [sp, #72]	; 0x48
   18050:	cmp	r1, r2
   18054:	mov	r6, r2
   18058:	strb	ip, [r3]
   1805c:	mov	r8, r0
   18060:	beq	181d0 <_start@@Base+0x2ff4>
   18064:	ldrb	r3, [r1]
   18068:	cmp	r3, #34	; 0x22
   1806c:	beq	181b0 <_start@@Base+0x2fd4>
   18070:	mov	r3, #5
   18074:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18078:	mov	r5, r0
   1807c:	sub	r3, r6, r0
   18080:	cmp	r3, #1
   18084:	ble	18098 <_start@@Base+0x2ebc>
   18088:	ldrb	r3, [r5]
   1808c:	cmp	r3, #32
   18090:	bhi	180ac <_start@@Base+0x2ed0>
   18094:	beq	181bc <_start@@Base+0x2fe0>
   18098:	mov	r1, r5
   1809c:	mov	r2, r6
   180a0:	mov	r0, r8
   180a4:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   180a8:	mov	r5, r0
   180ac:	cmp	r6, r5
   180b0:	beq	1810c <_start@@Base+0x2f30>
   180b4:	add	fp, sp, #16
   180b8:	add	sl, sp, #20
   180bc:	add	r9, sp, #24
   180c0:	mov	r3, #0
   180c4:	str	r3, [sp, #8]
   180c8:	ldr	r3, [sp, #12]
   180cc:	mov	r7, r3
   180d0:	ldr	r4, [r3]
   180d4:	b	180ec <_start@@Base+0x2f10>
   180d8:	cmp	r5, r0
   180dc:	bne	18118 <_start@@Base+0x2f3c>
   180e0:	ldr	r4, [r7, #4]!
   180e4:	cmp	r4, #0
   180e8:	beq	1816c <_start@@Base+0x2f90>
   180ec:	stm	sp, {r9, sl}
   180f0:	mov	r3, fp
   180f4:	mov	r2, r6
   180f8:	mov	r1, r5
   180fc:	mov	r0, r8
   18100:	blx	r4
   18104:	cmp	r6, r0
   18108:	bne	180d8 <_start@@Base+0x2efc>
   1810c:	mov	r0, r6
   18110:	add	sp, sp, #36	; 0x24
   18114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18118:	ldr	r3, [sp, #16]
   1811c:	mov	r4, r0
   18120:	cmp	r3, #0
   18124:	bne	18190 <_start@@Base+0x2fb4>
   18128:	ldr	r3, [sp, #28]
   1812c:	ldr	r2, [sp, #24]
   18130:	orrs	r3, r2, r3
   18134:	movne	r3, #1
   18138:	moveq	r3, #0
   1813c:	str	r3, [sp, #8]
   18140:	ldr	r3, [sp, #72]	; 0x48
   18144:	ldr	r2, [sp, #20]
   18148:	ldr	r1, [sp, #8]
   1814c:	ldrb	r3, [r3]
   18150:	cmp	r2, #0
   18154:	ldr	r2, [sp, #72]	; 0x48
   18158:	add	r3, r1, r3
   1815c:	strb	r3, [r2]
   18160:	beq	181d8 <_start@@Base+0x2ffc>
   18164:	mov	r5, r4
   18168:	b	180c8 <_start@@Base+0x2eec>
   1816c:	mov	r2, r6
   18170:	mov	r1, r5
   18174:	mov	r0, r8
   18178:	mov	r3, #23
   1817c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18180:	mov	r6, r0
   18184:	mov	r0, r6
   18188:	add	sp, sp, #36	; 0x24
   1818c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18190:	mov	r3, #8
   18194:	mov	r2, r6
   18198:	mov	r1, r4
   1819c:	mov	r0, r8
   181a0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   181a4:	cmp	r6, r0
   181a8:	bne	18140 <_start@@Base+0x2f64>
   181ac:	b	1810c <_start@@Base+0x2f30>
   181b0:	add	r5, r1, #1
   181b4:	sub	r3, r2, r5
   181b8:	b	18080 <_start@@Base+0x2ea4>
   181bc:	ldrb	r3, [r5, #1]
   181c0:	cmp	r3, #32
   181c4:	addhi	r5, r5, #1
   181c8:	bls	18098 <_start@@Base+0x2ebc>
   181cc:	b	180ac <_start@@Base+0x2ed0>
   181d0:	mov	r5, r2
   181d4:	b	18098 <_start@@Base+0x2ebc>
   181d8:	mov	r6, r4
   181dc:	b	1810c <_start@@Base+0x2f30>
   181e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181e4:	sub	sp, sp, #36	; 0x24
   181e8:	mov	ip, #0
   181ec:	str	r3, [sp, #8]
   181f0:	ldr	r3, [sp, #72]	; 0x48
   181f4:	cmp	r1, r2
   181f8:	mov	r6, r2
   181fc:	strh	ip, [r3]
   18200:	mov	r8, r0
   18204:	beq	18390 <_start@@Base+0x31b4>
   18208:	ldrb	r3, [r1]
   1820c:	cmp	r3, #34	; 0x22
   18210:	beq	18338 <_start@@Base+0x315c>
   18214:	mov	r3, #5
   18218:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1821c:	mov	r5, r0
   18220:	sub	r3, r6, r0
   18224:	cmp	r3, #1
   18228:	ble	1823c <_start@@Base+0x3060>
   1822c:	ldrb	r3, [r5]
   18230:	cmp	r3, #32
   18234:	bhi	18250 <_start@@Base+0x3074>
   18238:	beq	1837c <_start@@Base+0x31a0>
   1823c:	mov	r1, r5
   18240:	mov	r2, r6
   18244:	mov	r0, r8
   18248:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1824c:	mov	r5, r0
   18250:	cmp	r6, r5
   18254:	beq	182ac <_start@@Base+0x30d0>
   18258:	add	fp, sp, #16
   1825c:	add	sl, sp, #20
   18260:	add	r9, sp, #24
   18264:	mov	r3, #0
   18268:	str	r3, [sp, #12]
   1826c:	ldr	r7, [sp, #8]
   18270:	ldr	r4, [r7]
   18274:	b	1828c <_start@@Base+0x30b0>
   18278:	cmp	r5, r0
   1827c:	bne	182b8 <_start@@Base+0x30dc>
   18280:	ldr	r4, [r7, #4]!
   18284:	cmp	r4, #0
   18288:	beq	18314 <_start@@Base+0x3138>
   1828c:	stm	sp, {r9, sl}
   18290:	mov	r3, fp
   18294:	mov	r2, r6
   18298:	mov	r1, r5
   1829c:	mov	r0, r8
   182a0:	blx	r4
   182a4:	cmp	r6, r0
   182a8:	bne	18278 <_start@@Base+0x309c>
   182ac:	mov	r0, r6
   182b0:	add	sp, sp, #36	; 0x24
   182b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182b8:	ldr	r3, [sp, #16]
   182bc:	mov	r4, r0
   182c0:	cmp	r3, #0
   182c4:	bne	18344 <_start@@Base+0x3168>
   182c8:	ldrd	r2, [sp, #24]
   182cc:	ldr	r0, [pc, #204]	; 183a0 <_start@@Base+0x31c4>
   182d0:	mov	r1, #0
   182d4:	cmp	r3, r1
   182d8:	cmpeq	r2, r0
   182dc:	uxthls	r3, r2
   182e0:	strls	r3, [sp, #12]
   182e4:	bhi	18364 <_start@@Base+0x3188>
   182e8:	ldr	r3, [sp, #72]	; 0x48
   182ec:	ldr	r2, [sp, #20]
   182f0:	ldr	r1, [sp, #12]
   182f4:	ldrh	r3, [r3]
   182f8:	cmp	r2, #0
   182fc:	ldr	r2, [sp, #72]	; 0x48
   18300:	add	r3, r1, r3
   18304:	strh	r3, [r2]
   18308:	beq	18398 <_start@@Base+0x31bc>
   1830c:	mov	r5, r4
   18310:	b	1826c <_start@@Base+0x3090>
   18314:	mov	r2, r6
   18318:	mov	r1, r5
   1831c:	mov	r0, r8
   18320:	mov	r3, #23
   18324:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18328:	mov	r6, r0
   1832c:	mov	r0, r6
   18330:	add	sp, sp, #36	; 0x24
   18334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18338:	add	r5, r1, #1
   1833c:	sub	r3, r2, r5
   18340:	b	18224 <_start@@Base+0x3048>
   18344:	mov	r3, #8
   18348:	mov	r2, r6
   1834c:	mov	r1, r4
   18350:	mov	r0, r8
   18354:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18358:	cmp	r6, r0
   1835c:	bne	182e8 <_start@@Base+0x310c>
   18360:	b	182ac <_start@@Base+0x30d0>
   18364:	mov	r3, #7
   18368:	mov	r2, r6
   1836c:	mov	r1, r4
   18370:	mov	r0, r8
   18374:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18378:	b	18358 <_start@@Base+0x317c>
   1837c:	ldrb	r3, [r5, #1]
   18380:	cmp	r3, #32
   18384:	addhi	r5, r5, #1
   18388:	bls	1823c <_start@@Base+0x3060>
   1838c:	b	18250 <_start@@Base+0x3074>
   18390:	mov	r5, r2
   18394:	b	1823c <_start@@Base+0x3060>
   18398:	mov	r6, r4
   1839c:	b	182ac <_start@@Base+0x30d0>
   183a0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   183a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183a8:	sub	sp, sp, #36	; 0x24
   183ac:	mov	ip, #0
   183b0:	str	r3, [sp, #8]
   183b4:	ldr	r3, [sp, #72]	; 0x48
   183b8:	cmp	r1, r2
   183bc:	mov	r6, r2
   183c0:	strb	ip, [r3]
   183c4:	mov	r8, r0
   183c8:	beq	18550 <_start@@Base+0x3374>
   183cc:	ldrb	r3, [r1]
   183d0:	cmp	r3, #34	; 0x22
   183d4:	beq	184f8 <_start@@Base+0x331c>
   183d8:	mov	r3, #5
   183dc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   183e0:	mov	r5, r0
   183e4:	sub	r3, r6, r0
   183e8:	cmp	r3, #1
   183ec:	ble	18400 <_start@@Base+0x3224>
   183f0:	ldrb	r3, [r5]
   183f4:	cmp	r3, #32
   183f8:	bhi	18414 <_start@@Base+0x3238>
   183fc:	beq	1853c <_start@@Base+0x3360>
   18400:	mov	r1, r5
   18404:	mov	r2, r6
   18408:	mov	r0, r8
   1840c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   18410:	mov	r5, r0
   18414:	cmp	r6, r5
   18418:	beq	18474 <_start@@Base+0x3298>
   1841c:	add	fp, sp, #16
   18420:	add	sl, sp, #20
   18424:	add	r9, sp, #24
   18428:	mov	r3, #0
   1842c:	str	r3, [sp, #12]
   18430:	ldr	r3, [sp, #8]
   18434:	mov	r7, r3
   18438:	ldr	r4, [r3]
   1843c:	b	18454 <_start@@Base+0x3278>
   18440:	cmp	r5, r0
   18444:	bne	18480 <_start@@Base+0x32a4>
   18448:	ldr	r4, [r7, #4]!
   1844c:	cmp	r4, #0
   18450:	beq	184d4 <_start@@Base+0x32f8>
   18454:	stm	sp, {r9, sl}
   18458:	mov	r3, fp
   1845c:	mov	r2, r6
   18460:	mov	r1, r5
   18464:	mov	r0, r8
   18468:	blx	r4
   1846c:	cmp	r6, r0
   18470:	bne	18440 <_start@@Base+0x3264>
   18474:	mov	r0, r6
   18478:	add	sp, sp, #36	; 0x24
   1847c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18480:	ldr	r3, [sp, #16]
   18484:	mov	r4, r0
   18488:	cmp	r3, #0
   1848c:	bne	18504 <_start@@Base+0x3328>
   18490:	ldrd	r2, [sp, #24]
   18494:	cmp	r3, #0
   18498:	cmpeq	r2, #255	; 0xff
   1849c:	uxtbls	r3, r2
   184a0:	strls	r3, [sp, #12]
   184a4:	bhi	18524 <_start@@Base+0x3348>
   184a8:	ldr	r3, [sp, #72]	; 0x48
   184ac:	ldr	r2, [sp, #20]
   184b0:	ldr	r1, [sp, #12]
   184b4:	ldrb	r3, [r3]
   184b8:	cmp	r2, #0
   184bc:	ldr	r2, [sp, #72]	; 0x48
   184c0:	add	r3, r1, r3
   184c4:	strb	r3, [r2]
   184c8:	beq	18558 <_start@@Base+0x337c>
   184cc:	mov	r5, r4
   184d0:	b	18430 <_start@@Base+0x3254>
   184d4:	mov	r2, r6
   184d8:	mov	r1, r5
   184dc:	mov	r0, r8
   184e0:	mov	r3, #23
   184e4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   184e8:	mov	r6, r0
   184ec:	mov	r0, r6
   184f0:	add	sp, sp, #36	; 0x24
   184f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184f8:	add	r5, r1, #1
   184fc:	sub	r3, r2, r5
   18500:	b	183e8 <_start@@Base+0x320c>
   18504:	mov	r3, #8
   18508:	mov	r2, r6
   1850c:	mov	r1, r4
   18510:	mov	r0, r8
   18514:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18518:	cmp	r6, r0
   1851c:	bne	184a8 <_start@@Base+0x32cc>
   18520:	b	18474 <_start@@Base+0x3298>
   18524:	mov	r3, #7
   18528:	mov	r2, r6
   1852c:	mov	r1, r4
   18530:	mov	r0, r8
   18534:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18538:	b	18518 <_start@@Base+0x333c>
   1853c:	ldrb	r3, [r5, #1]
   18540:	cmp	r3, #32
   18544:	addhi	r5, r5, #1
   18548:	bls	18400 <_start@@Base+0x3224>
   1854c:	b	18414 <_start@@Base+0x3238>
   18550:	mov	r5, r2
   18554:	b	18400 <_start@@Base+0x3224>
   18558:	mov	r6, r4
   1855c:	b	18474 <_start@@Base+0x3298>
   18560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18564:	sub	sp, sp, #36	; 0x24
   18568:	mov	ip, #0
   1856c:	str	r3, [sp, #12]
   18570:	ldr	r3, [sp, #72]	; 0x48
   18574:	cmp	r1, r2
   18578:	mov	r6, r2
   1857c:	str	ip, [r3]
   18580:	mov	r8, r0
   18584:	beq	18724 <_start@@Base+0x3548>
   18588:	ldrb	r3, [r1]
   1858c:	cmp	r3, #34	; 0x22
   18590:	beq	186e4 <_start@@Base+0x3508>
   18594:	mov	r3, #5
   18598:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1859c:	mov	r5, r0
   185a0:	sub	r3, r6, r0
   185a4:	cmp	r3, #1
   185a8:	ble	185bc <_start@@Base+0x33e0>
   185ac:	ldrb	r3, [r5]
   185b0:	cmp	r3, #32
   185b4:	bhi	185d0 <_start@@Base+0x33f4>
   185b8:	beq	18710 <_start@@Base+0x3534>
   185bc:	mov	r1, r5
   185c0:	mov	r2, r6
   185c4:	mov	r0, r8
   185c8:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   185cc:	mov	r5, r0
   185d0:	cmp	r6, r5
   185d4:	beq	18630 <_start@@Base+0x3454>
   185d8:	add	fp, sp, #16
   185dc:	add	sl, sp, #20
   185e0:	add	r9, sp, #24
   185e4:	mov	r3, #0
   185e8:	str	r3, [sp, #8]
   185ec:	ldr	r3, [sp, #12]
   185f0:	mov	r7, r3
   185f4:	ldr	r4, [r3]
   185f8:	b	18610 <_start@@Base+0x3434>
   185fc:	cmp	r5, r0
   18600:	bne	1863c <_start@@Base+0x3460>
   18604:	ldr	r4, [r7, #4]!
   18608:	cmp	r4, #0
   1860c:	beq	18690 <_start@@Base+0x34b4>
   18610:	stm	sp, {r9, sl}
   18614:	mov	r3, fp
   18618:	mov	r2, r6
   1861c:	mov	r1, r5
   18620:	mov	r0, r8
   18624:	blx	r4
   18628:	cmp	r6, r0
   1862c:	bne	185fc <_start@@Base+0x3420>
   18630:	mov	r0, r6
   18634:	add	sp, sp, #36	; 0x24
   18638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1863c:	ldr	r1, [sp, #16]
   18640:	mov	r4, r0
   18644:	cmp	r1, #0
   18648:	ldrd	r2, [sp, #24]
   1864c:	beq	186b4 <_start@@Base+0x34d8>
   18650:	cmp	r3, #0
   18654:	cmpeq	r2, #-2147483648	; 0x80000000
   18658:	rsbls	r3, r2, #0
   1865c:	strls	r3, [sp, #8]
   18660:	bhi	186f0 <_start@@Base+0x3514>
   18664:	ldr	r3, [sp, #72]	; 0x48
   18668:	ldr	r2, [sp, #20]
   1866c:	ldr	r1, [sp, #8]
   18670:	ldr	r3, [r3]
   18674:	cmp	r2, #0
   18678:	ldr	r2, [sp, #72]	; 0x48
   1867c:	add	r3, r3, r1
   18680:	str	r3, [r2]
   18684:	beq	1872c <_start@@Base+0x3550>
   18688:	mov	r5, r4
   1868c:	b	185ec <_start@@Base+0x3410>
   18690:	mov	r2, r6
   18694:	mov	r1, r5
   18698:	mov	r0, r8
   1869c:	mov	r3, #23
   186a0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   186a4:	mov	r6, r0
   186a8:	mov	r0, r6
   186ac:	add	sp, sp, #36	; 0x24
   186b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186b4:	mov	r1, #0
   186b8:	cmp	r3, r1
   186bc:	mvn	r0, #-2147483648	; 0x80000000
   186c0:	cmpeq	r2, r0
   186c4:	strls	r2, [sp, #8]
   186c8:	bls	18664 <_start@@Base+0x3488>
   186cc:	mov	r3, #7
   186d0:	mov	r2, r6
   186d4:	mov	r1, r4
   186d8:	mov	r0, r8
   186dc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   186e0:	b	18704 <_start@@Base+0x3528>
   186e4:	add	r5, r1, #1
   186e8:	sub	r3, r2, r5
   186ec:	b	185a4 <_start@@Base+0x33c8>
   186f0:	mov	r3, #8
   186f4:	mov	r2, r6
   186f8:	mov	r1, r4
   186fc:	mov	r0, r8
   18700:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18704:	cmp	r6, r0
   18708:	bne	18664 <_start@@Base+0x3488>
   1870c:	b	18630 <_start@@Base+0x3454>
   18710:	ldrb	r3, [r5, #1]
   18714:	cmp	r3, #32
   18718:	addhi	r5, r5, #1
   1871c:	bls	185bc <_start@@Base+0x33e0>
   18720:	b	185d0 <_start@@Base+0x33f4>
   18724:	mov	r5, r2
   18728:	b	185bc <_start@@Base+0x33e0>
   1872c:	mov	r6, r4
   18730:	b	18630 <_start@@Base+0x3454>
   18734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18738:	sub	sp, sp, #36	; 0x24
   1873c:	mov	ip, #0
   18740:	str	r3, [sp, #12]
   18744:	ldr	r3, [sp, #72]	; 0x48
   18748:	cmp	r1, r2
   1874c:	mov	r6, r2
   18750:	strh	ip, [r3]
   18754:	mov	r8, r0
   18758:	beq	188fc <_start@@Base+0x3720>
   1875c:	ldrb	r3, [r1]
   18760:	cmp	r3, #34	; 0x22
   18764:	beq	188bc <_start@@Base+0x36e0>
   18768:	mov	r3, #5
   1876c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18770:	mov	r5, r0
   18774:	sub	r3, r6, r0
   18778:	cmp	r3, #1
   1877c:	ble	18790 <_start@@Base+0x35b4>
   18780:	ldrb	r3, [r5]
   18784:	cmp	r3, #32
   18788:	bhi	187a4 <_start@@Base+0x35c8>
   1878c:	beq	188e8 <_start@@Base+0x370c>
   18790:	mov	r1, r5
   18794:	mov	r2, r6
   18798:	mov	r0, r8
   1879c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   187a0:	mov	r5, r0
   187a4:	cmp	r6, r5
   187a8:	beq	18800 <_start@@Base+0x3624>
   187ac:	add	fp, sp, #16
   187b0:	add	sl, sp, #20
   187b4:	add	r9, sp, #24
   187b8:	mov	r3, #0
   187bc:	str	r3, [sp, #8]
   187c0:	ldr	r7, [sp, #12]
   187c4:	ldr	r4, [r7]
   187c8:	b	187e0 <_start@@Base+0x3604>
   187cc:	cmp	r5, r0
   187d0:	bne	1880c <_start@@Base+0x3630>
   187d4:	ldr	r4, [r7, #4]!
   187d8:	cmp	r4, #0
   187dc:	beq	18864 <_start@@Base+0x3688>
   187e0:	stm	sp, {r9, sl}
   187e4:	mov	r3, fp
   187e8:	mov	r2, r6
   187ec:	mov	r1, r5
   187f0:	mov	r0, r8
   187f4:	blx	r4
   187f8:	cmp	r6, r0
   187fc:	bne	187cc <_start@@Base+0x35f0>
   18800:	mov	r0, r6
   18804:	add	sp, sp, #36	; 0x24
   18808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1880c:	ldr	r1, [sp, #16]
   18810:	mov	r4, r0
   18814:	cmp	r1, #0
   18818:	ldrd	r2, [sp, #24]
   1881c:	beq	18888 <_start@@Base+0x36ac>
   18820:	cmp	r3, #0
   18824:	cmpeq	r2, #32768	; 0x8000
   18828:	rsbls	r2, r2, #0
   1882c:	sxthls	r3, r2
   18830:	strls	r3, [sp, #8]
   18834:	bhi	188c8 <_start@@Base+0x36ec>
   18838:	ldr	r3, [sp, #72]	; 0x48
   1883c:	ldr	r2, [sp, #20]
   18840:	ldr	r1, [sp, #8]
   18844:	ldrh	r3, [r3]
   18848:	cmp	r2, #0
   1884c:	ldr	r2, [sp, #72]	; 0x48
   18850:	add	r3, r3, r1
   18854:	strh	r3, [r2]
   18858:	beq	18904 <_start@@Base+0x3728>
   1885c:	mov	r5, r4
   18860:	b	187c0 <_start@@Base+0x35e4>
   18864:	mov	r2, r6
   18868:	mov	r1, r5
   1886c:	mov	r0, r8
   18870:	mov	r3, #23
   18874:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18878:	mov	r6, r0
   1887c:	mov	r0, r6
   18880:	add	sp, sp, #36	; 0x24
   18884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18888:	ldr	r0, [pc, #124]	; 1890c <_start@@Base+0x3730>
   1888c:	mov	r1, #0
   18890:	cmp	r3, r1
   18894:	cmpeq	r2, r0
   18898:	sxthls	r3, r2
   1889c:	strls	r3, [sp, #8]
   188a0:	bls	18838 <_start@@Base+0x365c>
   188a4:	mov	r3, #7
   188a8:	mov	r2, r6
   188ac:	mov	r1, r4
   188b0:	mov	r0, r8
   188b4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   188b8:	b	188dc <_start@@Base+0x3700>
   188bc:	add	r5, r1, #1
   188c0:	sub	r3, r2, r5
   188c4:	b	18778 <_start@@Base+0x359c>
   188c8:	mov	r3, #8
   188cc:	mov	r2, r6
   188d0:	mov	r1, r4
   188d4:	mov	r0, r8
   188d8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   188dc:	cmp	r6, r0
   188e0:	bne	18838 <_start@@Base+0x365c>
   188e4:	b	18800 <_start@@Base+0x3624>
   188e8:	ldrb	r3, [r5, #1]
   188ec:	cmp	r3, #32
   188f0:	addhi	r5, r5, #1
   188f4:	bls	18790 <_start@@Base+0x35b4>
   188f8:	b	187a4 <_start@@Base+0x35c8>
   188fc:	mov	r5, r2
   18900:	b	18790 <_start@@Base+0x35b4>
   18904:	mov	r6, r4
   18908:	b	18800 <_start@@Base+0x3624>
   1890c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   18910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18914:	sub	sp, sp, #36	; 0x24
   18918:	mov	ip, #0
   1891c:	str	r3, [sp, #12]
   18920:	ldr	r3, [sp, #72]	; 0x48
   18924:	cmp	r1, r2
   18928:	mov	r6, r2
   1892c:	strb	ip, [r3]
   18930:	mov	r8, r0
   18934:	beq	18ad4 <_start@@Base+0x38f8>
   18938:	ldrb	r3, [r1]
   1893c:	cmp	r3, #34	; 0x22
   18940:	beq	18a94 <_start@@Base+0x38b8>
   18944:	mov	r3, #5
   18948:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1894c:	mov	r5, r0
   18950:	sub	r3, r6, r0
   18954:	cmp	r3, #1
   18958:	ble	1896c <_start@@Base+0x3790>
   1895c:	ldrb	r3, [r5]
   18960:	cmp	r3, #32
   18964:	bhi	18980 <_start@@Base+0x37a4>
   18968:	beq	18ac0 <_start@@Base+0x38e4>
   1896c:	mov	r1, r5
   18970:	mov	r2, r6
   18974:	mov	r0, r8
   18978:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1897c:	mov	r5, r0
   18980:	cmp	r6, r5
   18984:	beq	189e0 <_start@@Base+0x3804>
   18988:	add	fp, sp, #16
   1898c:	add	sl, sp, #20
   18990:	add	r9, sp, #24
   18994:	mov	r3, #0
   18998:	str	r3, [sp, #8]
   1899c:	ldr	r3, [sp, #12]
   189a0:	mov	r7, r3
   189a4:	ldr	r4, [r3]
   189a8:	b	189c0 <_start@@Base+0x37e4>
   189ac:	cmp	r5, r0
   189b0:	bne	189ec <_start@@Base+0x3810>
   189b4:	ldr	r4, [r7, #4]!
   189b8:	cmp	r4, #0
   189bc:	beq	18a44 <_start@@Base+0x3868>
   189c0:	stm	sp, {r9, sl}
   189c4:	mov	r3, fp
   189c8:	mov	r2, r6
   189cc:	mov	r1, r5
   189d0:	mov	r0, r8
   189d4:	blx	r4
   189d8:	cmp	r6, r0
   189dc:	bne	189ac <_start@@Base+0x37d0>
   189e0:	mov	r0, r6
   189e4:	add	sp, sp, #36	; 0x24
   189e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189ec:	ldr	r1, [sp, #16]
   189f0:	mov	r4, r0
   189f4:	cmp	r1, #0
   189f8:	ldrd	r2, [sp, #24]
   189fc:	beq	18a68 <_start@@Base+0x388c>
   18a00:	cmp	r3, #0
   18a04:	cmpeq	r2, #128	; 0x80
   18a08:	rsbls	r2, r2, #0
   18a0c:	sxtbls	r3, r2
   18a10:	strls	r3, [sp, #8]
   18a14:	bhi	18aa0 <_start@@Base+0x38c4>
   18a18:	ldr	r3, [sp, #72]	; 0x48
   18a1c:	ldr	r2, [sp, #20]
   18a20:	ldr	r1, [sp, #8]
   18a24:	ldrb	r3, [r3]
   18a28:	cmp	r2, #0
   18a2c:	ldr	r2, [sp, #72]	; 0x48
   18a30:	add	r3, r3, r1
   18a34:	strb	r3, [r2]
   18a38:	beq	18adc <_start@@Base+0x3900>
   18a3c:	mov	r5, r4
   18a40:	b	1899c <_start@@Base+0x37c0>
   18a44:	mov	r2, r6
   18a48:	mov	r1, r5
   18a4c:	mov	r0, r8
   18a50:	mov	r3, #23
   18a54:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18a58:	mov	r6, r0
   18a5c:	mov	r0, r6
   18a60:	add	sp, sp, #36	; 0x24
   18a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a68:	cmp	r3, #0
   18a6c:	cmpeq	r2, #127	; 0x7f
   18a70:	sxtbls	r3, r2
   18a74:	strls	r3, [sp, #8]
   18a78:	bls	18a18 <_start@@Base+0x383c>
   18a7c:	mov	r3, #7
   18a80:	mov	r2, r6
   18a84:	mov	r1, r4
   18a88:	mov	r0, r8
   18a8c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18a90:	b	18ab4 <_start@@Base+0x38d8>
   18a94:	add	r5, r1, #1
   18a98:	sub	r3, r2, r5
   18a9c:	b	18954 <_start@@Base+0x3778>
   18aa0:	mov	r3, #8
   18aa4:	mov	r2, r6
   18aa8:	mov	r1, r4
   18aac:	mov	r0, r8
   18ab0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18ab4:	cmp	r6, r0
   18ab8:	bne	18a18 <_start@@Base+0x383c>
   18abc:	b	189e0 <_start@@Base+0x3804>
   18ac0:	ldrb	r3, [r5, #1]
   18ac4:	cmp	r3, #32
   18ac8:	addhi	r5, r5, #1
   18acc:	bls	1896c <_start@@Base+0x3790>
   18ad0:	b	18980 <_start@@Base+0x37a4>
   18ad4:	mov	r5, r2
   18ad8:	b	1896c <_start@@Base+0x3790>
   18adc:	mov	r6, r4
   18ae0:	b	189e0 <_start@@Base+0x3804>
   18ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ae8:	sub	sp, sp, #36	; 0x24
   18aec:	mov	ip, #0
   18af0:	str	r3, [sp, #8]
   18af4:	ldr	r3, [sp, #72]	; 0x48
   18af8:	cmp	r1, r2
   18afc:	mov	r6, r2
   18b00:	str	ip, [r3]
   18b04:	mov	r8, r0
   18b08:	beq	18c90 <_start@@Base+0x3ab4>
   18b0c:	ldrb	r3, [r1]
   18b10:	cmp	r3, #34	; 0x22
   18b14:	beq	18c38 <_start@@Base+0x3a5c>
   18b18:	mov	r3, #5
   18b1c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18b20:	mov	r5, r0
   18b24:	sub	r3, r6, r0
   18b28:	cmp	r3, #1
   18b2c:	ble	18b40 <_start@@Base+0x3964>
   18b30:	ldrb	r3, [r5]
   18b34:	cmp	r3, #32
   18b38:	bhi	18b54 <_start@@Base+0x3978>
   18b3c:	beq	18c7c <_start@@Base+0x3aa0>
   18b40:	mov	r1, r5
   18b44:	mov	r2, r6
   18b48:	mov	r0, r8
   18b4c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   18b50:	mov	r5, r0
   18b54:	cmp	r6, r5
   18b58:	beq	18bb0 <_start@@Base+0x39d4>
   18b5c:	add	fp, sp, #16
   18b60:	add	sl, sp, #20
   18b64:	add	r9, sp, #24
   18b68:	mov	r3, #0
   18b6c:	str	r3, [sp, #12]
   18b70:	ldr	r7, [sp, #8]
   18b74:	ldr	r4, [r7]
   18b78:	b	18b90 <_start@@Base+0x39b4>
   18b7c:	cmp	r5, r0
   18b80:	bne	18bbc <_start@@Base+0x39e0>
   18b84:	ldr	r4, [r7, #4]!
   18b88:	cmp	r4, #0
   18b8c:	beq	18c14 <_start@@Base+0x3a38>
   18b90:	stm	sp, {r9, sl}
   18b94:	mov	r3, fp
   18b98:	mov	r2, r6
   18b9c:	mov	r1, r5
   18ba0:	mov	r0, r8
   18ba4:	blx	r4
   18ba8:	cmp	r6, r0
   18bac:	bne	18b7c <_start@@Base+0x39a0>
   18bb0:	mov	r0, r6
   18bb4:	add	sp, sp, #36	; 0x24
   18bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bbc:	ldr	r3, [sp, #16]
   18bc0:	mov	r4, r0
   18bc4:	cmp	r3, #0
   18bc8:	bne	18c44 <_start@@Base+0x3a68>
   18bcc:	ldrd	r2, [sp, #24]
   18bd0:	mov	r1, #0
   18bd4:	mvn	r0, #0
   18bd8:	cmp	r3, r1
   18bdc:	cmpeq	r2, r0
   18be0:	strls	r2, [sp, #12]
   18be4:	bhi	18c64 <_start@@Base+0x3a88>
   18be8:	ldr	r3, [sp, #72]	; 0x48
   18bec:	ldr	r2, [sp, #20]
   18bf0:	ldr	r1, [sp, #12]
   18bf4:	ldr	r3, [r3]
   18bf8:	cmp	r2, #0
   18bfc:	ldr	r2, [sp, #72]	; 0x48
   18c00:	add	r3, r3, r1
   18c04:	str	r3, [r2]
   18c08:	beq	18c98 <_start@@Base+0x3abc>
   18c0c:	mov	r5, r4
   18c10:	b	18b70 <_start@@Base+0x3994>
   18c14:	mov	r2, r6
   18c18:	mov	r1, r5
   18c1c:	mov	r0, r8
   18c20:	mov	r3, #23
   18c24:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18c28:	mov	r6, r0
   18c2c:	mov	r0, r6
   18c30:	add	sp, sp, #36	; 0x24
   18c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c38:	add	r5, r1, #1
   18c3c:	sub	r3, r2, r5
   18c40:	b	18b28 <_start@@Base+0x394c>
   18c44:	mov	r3, #8
   18c48:	mov	r2, r6
   18c4c:	mov	r1, r4
   18c50:	mov	r0, r8
   18c54:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18c58:	cmp	r6, r0
   18c5c:	bne	18be8 <_start@@Base+0x3a0c>
   18c60:	b	18bb0 <_start@@Base+0x39d4>
   18c64:	mov	r3, #7
   18c68:	mov	r2, r6
   18c6c:	mov	r1, r4
   18c70:	mov	r0, r8
   18c74:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18c78:	b	18c58 <_start@@Base+0x3a7c>
   18c7c:	ldrb	r3, [r5, #1]
   18c80:	cmp	r3, #32
   18c84:	addhi	r5, r5, #1
   18c88:	bls	18b40 <_start@@Base+0x3964>
   18c8c:	b	18b54 <_start@@Base+0x3978>
   18c90:	mov	r5, r2
   18c94:	b	18b40 <_start@@Base+0x3964>
   18c98:	mov	r6, r4
   18c9c:	b	18bb0 <_start@@Base+0x39d4>
   18ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ca4:	sub	sp, sp, #44	; 0x2c
   18ca8:	mov	r4, #0
   18cac:	str	r3, [sp, #20]
   18cb0:	ldr	r3, [sp, #80]	; 0x50
   18cb4:	mov	r5, #0
   18cb8:	cmp	r1, r2
   18cbc:	mov	r6, r2
   18cc0:	strd	r4, [r3]
   18cc4:	mov	r8, r0
   18cc8:	beq	18e5c <_start@@Base+0x3c80>
   18ccc:	ldrb	r3, [r1]
   18cd0:	cmp	r3, #34	; 0x22
   18cd4:	beq	18e1c <_start@@Base+0x3c40>
   18cd8:	mov	r3, #5
   18cdc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18ce0:	mov	r5, r0
   18ce4:	sub	r3, r6, r0
   18ce8:	cmp	r3, #1
   18cec:	ble	18d00 <_start@@Base+0x3b24>
   18cf0:	ldrb	r3, [r5]
   18cf4:	cmp	r3, #32
   18cf8:	bhi	18d14 <_start@@Base+0x3b38>
   18cfc:	beq	18e48 <_start@@Base+0x3c6c>
   18d00:	mov	r1, r5
   18d04:	mov	r2, r6
   18d08:	mov	r0, r8
   18d0c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   18d10:	mov	r5, r0
   18d14:	cmp	r6, r5
   18d18:	beq	18d74 <_start@@Base+0x3b98>
   18d1c:	mov	r2, #0
   18d20:	mov	r3, #0
   18d24:	add	fp, sp, #24
   18d28:	add	sl, sp, #28
   18d2c:	add	r9, sp, #32
   18d30:	strd	r2, [sp, #8]
   18d34:	ldr	r7, [sp, #20]
   18d38:	ldr	r4, [r7]
   18d3c:	b	18d54 <_start@@Base+0x3b78>
   18d40:	cmp	r5, r0
   18d44:	bne	18d80 <_start@@Base+0x3ba4>
   18d48:	ldr	r4, [r7, #4]!
   18d4c:	cmp	r4, #0
   18d50:	beq	18de4 <_start@@Base+0x3c08>
   18d54:	stm	sp, {r9, sl}
   18d58:	mov	r3, fp
   18d5c:	mov	r2, r6
   18d60:	mov	r1, r5
   18d64:	mov	r0, r8
   18d68:	blx	r4
   18d6c:	cmp	r6, r0
   18d70:	bne	18d40 <_start@@Base+0x3b64>
   18d74:	mov	r0, r6
   18d78:	add	sp, sp, #44	; 0x2c
   18d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d80:	ldr	r1, [sp, #24]
   18d84:	mov	r4, r0
   18d88:	cmp	r1, #0
   18d8c:	ldrd	r2, [sp, #32]
   18d90:	beq	18e08 <_start@@Base+0x3c2c>
   18d94:	cmp	r3, #-2147483648	; 0x80000000
   18d98:	cmpeq	r2, #0
   18d9c:	bhi	18e28 <_start@@Base+0x3c4c>
   18da0:	rsbs	r2, r2, #0
   18da4:	rsc	r3, r3, #0
   18da8:	strd	r2, [sp, #8]
   18dac:	ldr	r3, [sp, #80]	; 0x50
   18db0:	ldrd	r0, [sp, #8]
   18db4:	ldr	ip, [sp, #28]
   18db8:	ldrd	r2, [r3]
   18dbc:	adds	r0, r0, r2
   18dc0:	adc	r1, r1, r3
   18dc4:	mov	r3, r1
   18dc8:	ldr	r1, [sp, #80]	; 0x50
   18dcc:	mov	r2, r0
   18dd0:	cmp	ip, #0
   18dd4:	strd	r2, [r1]
   18dd8:	beq	18e7c <_start@@Base+0x3ca0>
   18ddc:	mov	r5, r4
   18de0:	b	18d34 <_start@@Base+0x3b58>
   18de4:	mov	r2, r6
   18de8:	mov	r1, r5
   18dec:	mov	r0, r8
   18df0:	mov	r3, #23
   18df4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18df8:	mov	r6, r0
   18dfc:	mov	r0, r6
   18e00:	add	sp, sp, #44	; 0x2c
   18e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e08:	cmp	r2, #0
   18e0c:	sbcs	r1, r3, #0
   18e10:	blt	18e64 <_start@@Base+0x3c88>
   18e14:	strd	r2, [sp, #8]
   18e18:	b	18dac <_start@@Base+0x3bd0>
   18e1c:	add	r5, r1, #1
   18e20:	sub	r3, r2, r5
   18e24:	b	18ce8 <_start@@Base+0x3b0c>
   18e28:	mov	r3, #8
   18e2c:	mov	r2, r6
   18e30:	mov	r1, r4
   18e34:	mov	r0, r8
   18e38:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18e3c:	cmp	r6, r0
   18e40:	bne	18dac <_start@@Base+0x3bd0>
   18e44:	b	18d74 <_start@@Base+0x3b98>
   18e48:	ldrb	r3, [r5, #1]
   18e4c:	cmp	r3, #32
   18e50:	addhi	r5, r5, #1
   18e54:	bls	18d00 <_start@@Base+0x3b24>
   18e58:	b	18d14 <_start@@Base+0x3b38>
   18e5c:	mov	r5, r2
   18e60:	b	18d00 <_start@@Base+0x3b24>
   18e64:	mov	r3, #7
   18e68:	mov	r2, r6
   18e6c:	mov	r1, r4
   18e70:	mov	r0, r8
   18e74:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   18e78:	b	18e3c <_start@@Base+0x3c60>
   18e7c:	mov	r6, r4
   18e80:	b	18d74 <_start@@Base+0x3b98>
   18e84:	cmp	r1, r2
   18e88:	beq	18e98 <_start@@Base+0x3cbc>
   18e8c:	ldrb	ip, [r1]
   18e90:	cmp	ip, #91	; 0x5b
   18e94:	beq	18ea8 <_start@@Base+0x3ccc>
   18e98:	mov	ip, #0
   18e9c:	str	ip, [r3]
   18ea0:	mov	r3, #22
   18ea4:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   18ea8:	push	{r4, r5, r6, lr}
   18eac:	mov	r5, r0
   18eb0:	add	r0, r1, #1
   18eb4:	mov	r6, r3
   18eb8:	sub	r3, r2, r0
   18ebc:	cmp	r3, #1
   18ec0:	mov	r4, r2
   18ec4:	ble	18ed8 <_start@@Base+0x3cfc>
   18ec8:	ldrb	r3, [r1, #1]
   18ecc:	cmp	r3, #32
   18ed0:	bhi	18ee8 <_start@@Base+0x3d0c>
   18ed4:	beq	18f08 <_start@@Base+0x3d2c>
   18ed8:	mov	r1, r0
   18edc:	mov	r2, r4
   18ee0:	mov	r0, r5
   18ee4:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   18ee8:	cmp	r4, r0
   18eec:	beq	18efc <_start@@Base+0x3d20>
   18ef0:	ldrb	r3, [r0]
   18ef4:	cmp	r3, #93	; 0x5d
   18ef8:	beq	18f1c <_start@@Base+0x3d40>
   18efc:	mov	r3, #1
   18f00:	str	r3, [r6]
   18f04:	pop	{r4, r5, r6, pc}
   18f08:	ldrb	r3, [r1, #2]
   18f0c:	cmp	r3, #32
   18f10:	addhi	r0, r1, #2
   18f14:	bls	18ed8 <_start@@Base+0x3cfc>
   18f18:	b	18ee8 <_start@@Base+0x3d0c>
   18f1c:	mov	r3, #0
   18f20:	mov	r2, r4
   18f24:	add	r1, r0, #1
   18f28:	str	r3, [r6]
   18f2c:	mov	r0, r5
   18f30:	pop	{r4, r5, r6, lr}
   18f34:	b	16e38 <_start@@Base+0x1c5c>
   18f38:	ldrb	ip, [r1, r3]
   18f3c:	cmp	ip, #34	; 0x22
   18f40:	beq	18f4c <_start@@Base+0x3d70>
   18f44:	mov	r0, r1
   18f48:	bx	lr
   18f4c:	add	r3, r3, #1
   18f50:	mov	ip, r1
   18f54:	add	r1, r1, r3
   18f58:	push	{r4, r5, r6, lr}
   18f5c:	mov	r5, r2
   18f60:	sub	r2, r2, r1
   18f64:	cmp	r2, #1
   18f68:	mov	r4, r0
   18f6c:	ble	18f80 <_start@@Base+0x3da4>
   18f70:	ldrb	r3, [ip, r3]
   18f74:	cmp	r3, #32
   18f78:	bhi	18f90 <_start@@Base+0x3db4>
   18f7c:	beq	18fb8 <_start@@Base+0x3ddc>
   18f80:	mov	r2, r5
   18f84:	mov	r0, r4
   18f88:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   18f8c:	mov	r1, r0
   18f90:	cmp	r5, r1
   18f94:	mov	r2, r5
   18f98:	beq	18fa8 <_start@@Base+0x3dcc>
   18f9c:	ldrb	r3, [r1]
   18fa0:	cmp	r3, #58	; 0x3a
   18fa4:	beq	18fcc <_start@@Base+0x3df0>
   18fa8:	mov	r0, r4
   18fac:	mov	r3, #4
   18fb0:	pop	{r4, r5, r6, lr}
   18fb4:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   18fb8:	ldrb	r3, [r1, #1]
   18fbc:	cmp	r3, #32
   18fc0:	addhi	r1, r1, #1
   18fc4:	bls	18f80 <_start@@Base+0x3da4>
   18fc8:	b	18f90 <_start@@Base+0x3db4>
   18fcc:	mov	r0, r4
   18fd0:	add	r1, r1, #1
   18fd4:	pop	{r4, r5, r6, lr}
   18fd8:	b	16e38 <_start@@Base+0x1c5c>
   18fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fe0:	sub	sp, sp, #156	; 0x9c
   18fe4:	mov	r8, r0
   18fe8:	mov	r0, r3
   18fec:	str	r3, [sp, #120]	; 0x78
   18ff0:	mov	r4, r2
   18ff4:	mov	r3, #0
   18ff8:	mov	r2, #4
   18ffc:	str	r3, [r0]
   19000:	mov	r5, r1
   19004:	ldr	r0, [r8]
   19008:	mov	r1, r2
   1900c:	bl	26e0c <flatcc_builder_start_struct@@Base>
   19010:	subs	r3, r0, #0
   19014:	str	r3, [sp, #112]	; 0x70
   19018:	beq	197b8 <_start@@Base+0x45dc>
   1901c:	cmp	r5, r4
   19020:	beq	19030 <_start@@Base+0x3e54>
   19024:	ldrb	r3, [r5]
   19028:	cmp	r3, #123	; 0x7b
   1902c:	beq	19090 <_start@@Base+0x3eb4>
   19030:	mov	r1, r5
   19034:	mov	r3, #21
   19038:	mov	r2, r4
   1903c:	mov	r0, r8
   19040:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   19044:	mov	r1, r0
   19048:	cmp	r4, r1
   1904c:	beq	19070 <_start@@Base+0x3e94>
   19050:	ldr	r0, [r8]
   19054:	str	r1, [sp, #8]
   19058:	bl	26eb4 <flatcc_builder_end_struct@@Base>
   1905c:	ldr	r3, [sp, #120]	; 0x78
   19060:	ldr	r1, [sp, #8]
   19064:	cmp	r0, #0
   19068:	str	r0, [r3]
   1906c:	bne	19084 <_start@@Base+0x3ea8>
   19070:	mov	r2, r4
   19074:	mov	r0, r8
   19078:	mov	r3, #33	; 0x21
   1907c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   19080:	mov	r1, r0
   19084:	mov	r0, r1
   19088:	add	sp, sp, #156	; 0x9c
   1908c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19090:	add	r3, r5, #1
   19094:	sub	r2, r4, r3
   19098:	cmp	r2, #1
   1909c:	ble	190b0 <_start@@Base+0x3ed4>
   190a0:	ldrb	r2, [r5, #1]
   190a4:	cmp	r2, #32
   190a8:	bhi	190c4 <_start@@Base+0x3ee8>
   190ac:	beq	197f0 <_start@@Base+0x4614>
   190b0:	mov	r1, r3
   190b4:	mov	r2, r4
   190b8:	mov	r0, r8
   190bc:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   190c0:	mov	r3, r0
   190c4:	cmp	r4, r3
   190c8:	beq	190d8 <_start@@Base+0x3efc>
   190cc:	ldrb	r2, [r3]
   190d0:	cmp	r2, #125	; 0x7d
   190d4:	beq	1981c <_start@@Base+0x4640>
   190d8:	ldr	r2, [pc, #1312]	; 19600 <_start@@Base+0x4424>
   190dc:	mov	r9, #0
   190e0:	add	r2, pc, r2
   190e4:	str	r2, [sp, #128]	; 0x80
   190e8:	mov	r1, r3
   190ec:	add	r2, sp, #136	; 0x88
   190f0:	str	r2, [sp, #132]	; 0x84
   190f4:	add	r2, sp, #140	; 0x8c
   190f8:	str	r2, [sp, #116]	; 0x74
   190fc:	cmp	r4, r1
   19100:	beq	1940c <_start@@Base+0x4230>
   19104:	ldrb	r3, [r1]
   19108:	cmp	r3, #34	; 0x22
   1910c:	addeq	r1, r1, #1
   19110:	beq	19128 <_start@@Base+0x3f4c>
   19114:	mov	r3, #5
   19118:	mov	r2, r4
   1911c:	mov	r0, r8
   19120:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   19124:	mov	r1, r0
   19128:	sub	r3, r4, r1
   1912c:	cmp	r3, #8
   19130:	bls	1941c <_start@@Base+0x4240>
   19134:	ldrb	r6, [r1, #7]
   19138:	mov	r7, #0
   1913c:	ldrb	r2, [r1, #6]
   19140:	lsr	r0, r2, #24
   19144:	lsl	r3, r2, #8
   19148:	str	r0, [sp, #76]	; 0x4c
   1914c:	str	r3, [sp, #72]	; 0x48
   19150:	ldrd	r2, [sp, #72]	; 0x48
   19154:	orr	r2, r2, r6
   19158:	orr	r3, r3, r7
   1915c:	ldrb	r6, [r1, #5]
   19160:	lsr	r0, r6, #16
   19164:	str	r0, [sp, #52]	; 0x34
   19168:	lsl	r0, r6, #16
   1916c:	str	r0, [sp, #48]	; 0x30
   19170:	ldrd	r6, [sp, #48]	; 0x30
   19174:	orr	r6, r6, r2
   19178:	orr	r7, r7, r3
   1917c:	mov	r2, r6
   19180:	mov	r3, r7
   19184:	ldrb	r6, [r1, #4]
   19188:	lsr	r0, r6, #8
   1918c:	str	r0, [sp, #28]
   19190:	lsl	r0, r6, #24
   19194:	str	r0, [sp, #24]
   19198:	ldrd	r6, [sp, #24]
   1919c:	orr	r6, r6, r2
   191a0:	orr	r7, r7, r3
   191a4:	mov	r2, r6
   191a8:	mov	r3, r7
   191ac:	ldrb	r0, [r1, #3]
   191b0:	str	r0, [sp, #36]	; 0x24
   191b4:	mov	r0, #0
   191b8:	str	r0, [sp, #32]
   191bc:	ldrd	r6, [sp, #32]
   191c0:	orr	r6, r6, r2
   191c4:	orr	r7, r7, r3
   191c8:	mov	r2, r6
   191cc:	mov	r3, r7
   191d0:	ldrb	r6, [r1, #2]
   191d4:	lsl	r0, r6, #8
   191d8:	str	r0, [sp, #20]
   191dc:	mov	r0, #0
   191e0:	str	r0, [sp, #16]
   191e4:	ldrd	r6, [sp, #16]
   191e8:	orr	r6, r6, r2
   191ec:	orr	r7, r7, r3
   191f0:	mov	r2, r6
   191f4:	mov	r3, r7
   191f8:	ldrb	r6, [r1, #1]
   191fc:	lsl	r0, r6, #16
   19200:	str	r0, [sp, #12]
   19204:	mov	r0, #0
   19208:	str	r0, [sp, #8]
   1920c:	ldrd	r6, [sp, #8]
   19210:	orr	r6, r6, r2
   19214:	orr	r7, r7, r3
   19218:	mov	r2, r6
   1921c:	mov	r3, r7
   19220:	ldrb	r6, [r1]
   19224:	mov	sl, #0
   19228:	orr	r2, r2, sl
   1922c:	lsl	fp, r6, #24
   19230:	add	r7, pc, #960	; 0x3c0
   19234:	ldrd	r6, [r7]
   19238:	orr	r3, r3, fp
   1923c:	cmp	r3, r7
   19240:	cmpeq	r2, r6
   19244:	bne	1940c <_start@@Base+0x4230>
   19248:	add	r5, r1, #8
   1924c:	sub	r0, r4, r5
   19250:	cmp	r0, #8
   19254:	bls	194a0 <_start@@Base+0x42c4>
   19258:	ldrb	r6, [r1, #15]
   1925c:	mov	r7, #0
   19260:	ldrb	r2, [r1, #14]
   19264:	lsr	ip, r2, #24
   19268:	lsl	r3, r2, #8
   1926c:	str	ip, [sp, #108]	; 0x6c
   19270:	str	r3, [sp, #104]	; 0x68
   19274:	ldrd	r2, [sp, #104]	; 0x68
   19278:	orr	r2, r2, r6
   1927c:	orr	r3, r3, r7
   19280:	mov	r6, r2
   19284:	mov	r7, r3
   19288:	ldrb	r2, [r1, #13]
   1928c:	lsr	ip, r2, #16
   19290:	lsl	r3, r2, #16
   19294:	str	ip, [sp, #100]	; 0x64
   19298:	str	r3, [sp, #96]	; 0x60
   1929c:	ldrd	r2, [sp, #96]	; 0x60
   192a0:	orr	r2, r2, r6
   192a4:	orr	r3, r3, r7
   192a8:	mov	r6, r2
   192ac:	mov	r7, r3
   192b0:	ldrb	r2, [r1, #12]
   192b4:	lsr	ip, r2, #8
   192b8:	lsl	r3, r2, #24
   192bc:	str	ip, [sp, #84]	; 0x54
   192c0:	str	r3, [sp, #80]	; 0x50
   192c4:	ldrd	r2, [sp, #80]	; 0x50
   192c8:	orr	r2, r2, r6
   192cc:	orr	r3, r3, r7
   192d0:	mov	r6, r2
   192d4:	mov	r7, r3
   192d8:	ldrb	r3, [r1, #11]
   192dc:	str	r3, [sp, #92]	; 0x5c
   192e0:	mov	r3, #0
   192e4:	str	r3, [sp, #88]	; 0x58
   192e8:	ldrd	r2, [sp, #88]	; 0x58
   192ec:	orr	r2, r2, r6
   192f0:	orr	r3, r3, r7
   192f4:	mov	r6, r2
   192f8:	mov	r7, r3
   192fc:	ldrb	r2, [r1, #10]
   19300:	lsl	r3, r2, #8
   19304:	str	r3, [sp, #68]	; 0x44
   19308:	mov	r3, #0
   1930c:	str	r3, [sp, #64]	; 0x40
   19310:	ldrd	r2, [sp, #64]	; 0x40
   19314:	orr	r2, r2, r6
   19318:	orr	r3, r3, r7
   1931c:	ldrb	r6, [r1, #9]
   19320:	lsl	ip, r6, #16
   19324:	str	ip, [sp, #60]	; 0x3c
   19328:	mov	ip, #0
   1932c:	str	ip, [sp, #56]	; 0x38
   19330:	ldrd	r6, [sp, #56]	; 0x38
   19334:	orr	r6, r6, r2
   19338:	orr	r7, r7, r3
   1933c:	mov	r2, r6
   19340:	mov	r3, r7
   19344:	ldrb	r6, [r1, #8]
   19348:	lsl	ip, r6, #24
   1934c:	str	ip, [sp, #44]	; 0x2c
   19350:	mov	ip, #0
   19354:	str	ip, [sp, #40]	; 0x28
   19358:	ldrd	r6, [sp, #40]	; 0x28
   1935c:	orr	r7, r7, r3
   19360:	mov	r3, r7
   19364:	ldr	r7, [pc, #664]	; 19604 <_start@@Base+0x4428>
   19368:	orr	r6, r6, r2
   1936c:	and	r3, r3, r7
   19370:	ldr	r7, [pc, #656]	; 19608 <_start@@Base+0x442c>
   19374:	mov	r2, r6
   19378:	mov	r6, #0
   1937c:	and	r2, r2, r6
   19380:	cmp	r3, r7
   19384:	mov	r6, #0
   19388:	cmpeq	r2, r6
   1938c:	bne	19398 <_start@@Base+0x41bc>
   19390:	cmp	r0, #2
   19394:	bgt	1960c <_start@@Base+0x4430>
   19398:	mov	r1, r5
   1939c:	mov	r2, r4
   193a0:	mov	r0, r8
   193a4:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   193a8:	sub	r3, r4, r0
   193ac:	cmp	r3, #1
   193b0:	ble	193c4 <_start@@Base+0x41e8>
   193b4:	ldrb	r3, [r0]
   193b8:	cmp	r3, #32
   193bc:	bhi	193d4 <_start@@Base+0x41f8>
   193c0:	beq	19558 <_start@@Base+0x437c>
   193c4:	mov	r1, r0
   193c8:	mov	r2, r4
   193cc:	mov	r0, r8
   193d0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   193d4:	cmp	r4, r0
   193d8:	beq	19570 <_start@@Base+0x4394>
   193dc:	ldrb	r3, [r0]
   193e0:	cmp	r3, #44	; 0x2c
   193e4:	beq	19578 <_start@@Base+0x439c>
   193e8:	cmp	r3, #125	; 0x7d
   193ec:	beq	19524 <_start@@Base+0x4348>
   193f0:	mov	r1, r0
   193f4:	mov	r3, #10
   193f8:	mov	r2, r4
   193fc:	mov	r0, r8
   19400:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   19404:	mov	r1, r0
   19408:	b	19048 <_start@@Base+0x3e6c>
   1940c:	mov	r2, r4
   19410:	mov	r0, r8
   19414:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   19418:	b	193a8 <_start@@Base+0x41cc>
   1941c:	sub	r3, r3, #1
   19420:	cmp	r3, #7
   19424:	addls	pc, pc, r3, lsl #2
   19428:	b	1940c <_start@@Base+0x4230>
   1942c:	b	19494 <_start@@Base+0x42b8>
   19430:	b	19488 <_start@@Base+0x42ac>
   19434:	b	1947c <_start@@Base+0x42a0>
   19438:	b	19470 <_start@@Base+0x4294>
   1943c:	b	19464 <_start@@Base+0x4288>
   19440:	b	19458 <_start@@Base+0x427c>
   19444:	b	1944c <_start@@Base+0x4270>
   19448:	b	19134 <_start@@Base+0x3f58>
   1944c:	mov	r6, r9
   19450:	mov	r7, #0
   19454:	b	1913c <_start@@Base+0x3f60>
   19458:	mov	r2, r9
   1945c:	mov	r3, #0
   19460:	b	1915c <_start@@Base+0x3f80>
   19464:	mov	r2, r9
   19468:	mov	r3, #0
   1946c:	b	19184 <_start@@Base+0x3fa8>
   19470:	mov	r2, r9
   19474:	mov	r3, #0
   19478:	b	191ac <_start@@Base+0x3fd0>
   1947c:	mov	r2, r9
   19480:	mov	r3, #0
   19484:	b	191d0 <_start@@Base+0x3ff4>
   19488:	mov	r2, r9
   1948c:	mov	r3, #0
   19490:	b	191f8 <_start@@Base+0x401c>
   19494:	mov	r2, r9
   19498:	mov	r3, #0
   1949c:	b	19220 <_start@@Base+0x4044>
   194a0:	sub	r3, r0, #1
   194a4:	cmp	r3, #7
   194a8:	addls	pc, pc, r3, lsl #2
   194ac:	b	19398 <_start@@Base+0x41bc>
   194b0:	b	19518 <_start@@Base+0x433c>
   194b4:	b	1950c <_start@@Base+0x4330>
   194b8:	b	19500 <_start@@Base+0x4324>
   194bc:	b	194f4 <_start@@Base+0x4318>
   194c0:	b	194e8 <_start@@Base+0x430c>
   194c4:	b	194dc <_start@@Base+0x4300>
   194c8:	b	194d0 <_start@@Base+0x42f4>
   194cc:	b	19258 <_start@@Base+0x407c>
   194d0:	mov	r6, r9
   194d4:	mov	r7, #0
   194d8:	b	19260 <_start@@Base+0x4084>
   194dc:	mov	r6, r9
   194e0:	mov	r7, #0
   194e4:	b	19288 <_start@@Base+0x40ac>
   194e8:	mov	r6, r9
   194ec:	mov	r7, #0
   194f0:	b	192b0 <_start@@Base+0x40d4>
   194f4:	mov	r6, r9
   194f8:	mov	r7, #0
   194fc:	b	192d8 <_start@@Base+0x40fc>
   19500:	mov	r6, r9
   19504:	mov	r7, #0
   19508:	b	192fc <_start@@Base+0x4120>
   1950c:	mov	r2, r9
   19510:	mov	r3, #0
   19514:	b	1931c <_start@@Base+0x4140>
   19518:	mov	r2, r9
   1951c:	mov	r3, #0
   19520:	b	19344 <_start@@Base+0x4168>
   19524:	add	r1, r0, #1
   19528:	sub	r3, r4, r1
   1952c:	cmp	r3, #1
   19530:	ble	19544 <_start@@Base+0x4368>
   19534:	ldrb	r3, [r0, #1]
   19538:	cmp	r3, #32
   1953c:	bhi	19048 <_start@@Base+0x3e6c>
   19540:	beq	19730 <_start@@Base+0x4554>
   19544:	mov	r2, r4
   19548:	mov	r0, r8
   1954c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   19550:	mov	r1, r0
   19554:	b	19048 <_start@@Base+0x3e6c>
   19558:	ldrb	r3, [r0, #1]
   1955c:	cmp	r3, #32
   19560:	addhi	r0, r0, #1
   19564:	bls	193c4 <_start@@Base+0x41e8>
   19568:	cmp	r4, r0
   1956c:	bne	193dc <_start@@Base+0x4200>
   19570:	mov	r1, r4
   19574:	b	19070 <_start@@Base+0x3e94>
   19578:	add	r1, r0, #1
   1957c:	sub	r3, r4, r1
   19580:	cmp	r3, #1
   19584:	ble	19598 <_start@@Base+0x43bc>
   19588:	ldrb	r3, [r0, #1]
   1958c:	cmp	r3, #32
   19590:	bhi	195a8 <_start@@Base+0x43cc>
   19594:	beq	19744 <_start@@Base+0x4568>
   19598:	mov	r2, r4
   1959c:	mov	r0, r8
   195a0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   195a4:	mov	r1, r0
   195a8:	cmp	r4, r1
   195ac:	beq	197c0 <_start@@Base+0x45e4>
   195b0:	ldrb	r3, [r1]
   195b4:	cmp	r3, #125	; 0x7d
   195b8:	bne	190fc <_start@@Base+0x3f20>
   195bc:	mov	r3, r1
   195c0:	add	r1, r1, #1
   195c4:	sub	r2, r4, r1
   195c8:	cmp	r2, #1
   195cc:	ble	19544 <_start@@Base+0x4368>
   195d0:	ldrb	r2, [r3, #1]
   195d4:	cmp	r2, #32
   195d8:	bhi	19048 <_start@@Base+0x3e6c>
   195dc:	bne	19544 <_start@@Base+0x4368>
   195e0:	ldrb	r2, [r3, #2]
   195e4:	cmp	r2, #32
   195e8:	addhi	r1, r3, #2
   195ec:	bls	19544 <_start@@Base+0x4368>
   195f0:	b	19048 <_start@@Base+0x3e6c>
   195f4:	nop			; (mov r0, r0)
   195f8:	cmpvc	pc, #1342177286	; 0x50000006
   195fc:	rsbvs	r6, pc, #428	; 0x1ac
   19600:	andeq	sl, r3, r0, lsr #31
   19604:			; <UNDEFINED> instruction: 0xffff0000
   19608:	cmnvs	r4, r0
   1960c:	ldrb	r3, [r1, #10]
   19610:	cmp	r3, #34	; 0x22
   19614:	bne	19398 <_start@@Base+0x41bc>
   19618:	add	r0, r1, #11
   1961c:	sub	r3, r4, r0
   19620:	cmp	r3, #1
   19624:	ble	19638 <_start@@Base+0x445c>
   19628:	ldrb	r3, [r1, #11]
   1962c:	cmp	r3, #32
   19630:	bhi	19648 <_start@@Base+0x446c>
   19634:	beq	197dc <_start@@Base+0x4600>
   19638:	mov	r1, r0
   1963c:	mov	r2, r4
   19640:	mov	r0, r8
   19644:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   19648:	cmp	r4, r0
   1964c:	beq	1965c <_start@@Base+0x4480>
   19650:	ldrb	r3, [r0]
   19654:	cmp	r3, #58	; 0x3a
   19658:	beq	19804 <_start@@Base+0x4628>
   1965c:	mov	r1, r0
   19660:	mov	r3, #4
   19664:	mov	r2, r4
   19668:	mov	r0, r8
   1966c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   19670:	str	r0, [sp, #124]	; 0x7c
   19674:	ldr	r3, [sp, #124]	; 0x7c
   19678:	cmp	r5, r3
   1967c:	beq	19398 <_start@@Base+0x41bc>
   19680:	mov	r5, r3
   19684:	cmp	r4, r3
   19688:	mov	r3, #0
   1968c:	str	r3, [sp, #136]	; 0x88
   19690:	str	r9, [sp, #144]	; 0x90
   19694:	str	r3, [sp, #148]	; 0x94
   19698:	str	r3, [sp, #140]	; 0x8c
   1969c:	beq	19770 <_start@@Base+0x4594>
   196a0:	add	r3, sp, #144	; 0x90
   196a4:	str	r3, [sp]
   196a8:	mov	r2, r4
   196ac:	ldr	r3, [sp, #116]	; 0x74
   196b0:	mov	r1, r5
   196b4:	mov	r0, r8
   196b8:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   196bc:	cmp	r5, r0
   196c0:	beq	19770 <_start@@Base+0x4594>
   196c4:	ldr	r1, [sp, #140]	; 0x8c
   196c8:	ldrd	r2, [sp, #144]	; 0x90
   196cc:	cmp	r1, #0
   196d0:	beq	196f0 <_start@@Base+0x4514>
   196d4:	cmp	r3, #0
   196d8:	cmpeq	r2, #-2147483648	; 0x80000000
   196dc:	rsbls	r3, r2, #0
   196e0:	bhi	19758 <_start@@Base+0x457c>
   196e4:	ldr	r2, [sp, #112]	; 0x70
   196e8:	str	r3, [r2]
   196ec:	b	193a8 <_start@@Base+0x41cc>
   196f0:	mov	r7, #0
   196f4:	cmp	r3, r7
   196f8:	mvn	r6, #-2147483648	; 0x80000000
   196fc:	cmpeq	r2, r6
   19700:	movls	r3, r2
   19704:	bls	196e4 <_start@@Base+0x4508>
   19708:	mov	r1, r0
   1970c:	mov	r3, #7
   19710:	mov	r2, r4
   19714:	mov	r0, r8
   19718:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1971c:	ldr	r3, [sp, #124]	; 0x7c
   19720:	cmp	r3, r0
   19724:	beq	19770 <_start@@Base+0x4594>
   19728:	ldr	r3, [sp, #136]	; 0x88
   1972c:	b	196e4 <_start@@Base+0x4508>
   19730:	ldrb	r3, [r0, #2]
   19734:	cmp	r3, #32
   19738:	addhi	r1, r0, #2
   1973c:	bls	19544 <_start@@Base+0x4368>
   19740:	b	19048 <_start@@Base+0x3e6c>
   19744:	ldrb	r3, [r0, #2]
   19748:	cmp	r3, #32
   1974c:	addhi	r1, r0, #2
   19750:	bls	19598 <_start@@Base+0x43bc>
   19754:	b	195a8 <_start@@Base+0x43cc>
   19758:	mov	r1, r0
   1975c:	mov	r3, #8
   19760:	mov	r2, r4
   19764:	mov	r0, r8
   19768:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1976c:	b	1971c <_start@@Base+0x4540>
   19770:	ldr	r3, [sp, #132]	; 0x84
   19774:	ldr	r5, [sp, #124]	; 0x7c
   19778:	str	r3, [sp]
   1977c:	mov	r2, r4
   19780:	ldr	r3, [sp, #128]	; 0x80
   19784:	mov	r1, r5
   19788:	mov	r0, r8
   1978c:	bl	18560 <_start@@Base+0x3384>
   19790:	cmp	r4, r0
   19794:	cmpne	r0, r5
   19798:	bne	19728 <_start@@Base+0x454c>
   1979c:	mov	r1, r0
   197a0:	mov	r3, #33	; 0x21
   197a4:	mov	r2, r4
   197a8:	mov	r0, r8
   197ac:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   197b0:	mov	r1, r0
   197b4:	b	19048 <_start@@Base+0x3e6c>
   197b8:	mov	r1, r5
   197bc:	b	19070 <_start@@Base+0x3e94>
   197c0:	mov	r1, r4
   197c4:	mov	r3, #10
   197c8:	mov	r2, r4
   197cc:	mov	r0, r8
   197d0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   197d4:	mov	r1, r0
   197d8:	b	19048 <_start@@Base+0x3e6c>
   197dc:	ldrb	r3, [r1, #12]
   197e0:	cmp	r3, #32
   197e4:	addhi	r0, r1, #12
   197e8:	bls	19638 <_start@@Base+0x445c>
   197ec:	b	19648 <_start@@Base+0x446c>
   197f0:	ldrb	r2, [r5, #2]
   197f4:	cmp	r2, #32
   197f8:	addhi	r3, r5, #2
   197fc:	bls	190b0 <_start@@Base+0x3ed4>
   19800:	b	190c4 <_start@@Base+0x3ee8>
   19804:	add	r1, r0, #1
   19808:	mov	r2, r4
   1980c:	mov	r0, r8
   19810:	bl	16e38 <_start@@Base+0x1c5c>
   19814:	str	r0, [sp, #124]	; 0x7c
   19818:	b	19674 <_start@@Base+0x4498>
   1981c:	add	r1, r3, #1
   19820:	mov	r2, r4
   19824:	mov	r0, r8
   19828:	bl	16e38 <_start@@Base+0x1c5c>
   1982c:	mov	r1, r0
   19830:	b	19048 <_start@@Base+0x3e6c>
   19834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19838:	sub	sp, sp, #12
   1983c:	mov	sl, r2
   19840:	str	r3, [sp]
   19844:	sub	r2, r2, r1
   19848:	ldr	r3, [sp, #48]	; 0x30
   1984c:	cmp	r2, #8
   19850:	mov	r4, r1
   19854:	mov	r5, r0
   19858:	str	r3, [sp, #4]
   1985c:	ldr	fp, [sp, #52]	; 0x34
   19860:	bls	19938 <_start@@Base+0x475c>
   19864:	ldrb	r6, [r4, #7]
   19868:	mov	r7, #0
   1986c:	ldrb	r0, [r4, #6]
   19870:	lsr	r3, r0, #24
   19874:	lsl	r2, r0, #8
   19878:	orr	r6, r6, r2
   1987c:	orr	r7, r7, r3
   19880:	ldrb	r0, [r4, #5]
   19884:	lsr	r3, r0, #16
   19888:	lsl	r2, r0, #16
   1988c:	orr	r6, r6, r2
   19890:	orr	r7, r7, r3
   19894:	ldrb	r0, [r4, #4]
   19898:	lsr	r3, r0, #8
   1989c:	lsl	r2, r0, #24
   198a0:	orr	r6, r6, r2
   198a4:	orr	r7, r7, r3
   198a8:	ldrb	r3, [r4, #3]
   198ac:	mov	r2, #0
   198b0:	orr	r2, r2, r6
   198b4:	orr	r3, r3, r7
   198b8:	ldrb	r0, [r4, #2]
   198bc:	mov	r6, #0
   198c0:	orr	r2, r2, r6
   198c4:	lsl	r7, r0, #8
   198c8:	orr	r3, r3, r7
   198cc:	ldrb	r0, [r4, #1]
   198d0:	mov	r6, #0
   198d4:	orr	r6, r6, r2
   198d8:	lsl	r7, r0, #16
   198dc:	orr	r7, r7, r3
   198e0:	ldrb	r2, [r4]
   198e4:	add	r9, pc, #284	; 0x11c
   198e8:	ldrd	r8, [r9]
   198ec:	mov	r0, #0
   198f0:	orr	r0, r0, r6
   198f4:	lsl	r1, r2, #24
   198f8:	orr	r1, r1, r7
   198fc:	cmp	r1, r9
   19900:	cmpeq	r0, r8
   19904:	bne	1992c <_start@@Base+0x4750>
   19908:	add	r6, r4, #8
   1990c:	mov	r0, r6
   19910:	mov	r1, sl
   19914:	bl	15308 <_start@@Base+0x12c>
   19918:	mov	r0, #0
   1991c:	and	r1, r1, #-16777216	; 0xff000000
   19920:	cmp	r1, #1912602624	; 0x72000000
   19924:	cmpeq	r0, #0
   19928:	beq	19968 <_start@@Base+0x478c>
   1992c:	mov	r0, r4
   19930:	add	sp, sp, #12
   19934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19938:	sub	r2, r2, #1
   1993c:	cmp	r2, #7
   19940:	addls	pc, pc, r2, lsl #2
   19944:	b	1992c <_start@@Base+0x4750>
   19948:	b	199b0 <_start@@Base+0x47d4>
   1994c:	b	199bc <_start@@Base+0x47e0>
   19950:	b	199c8 <_start@@Base+0x47ec>
   19954:	b	199d4 <_start@@Base+0x47f8>
   19958:	b	199e0 <_start@@Base+0x4804>
   1995c:	b	199ec <_start@@Base+0x4810>
   19960:	b	199f8 <_start@@Base+0x481c>
   19964:	b	19864 <_start@@Base+0x4688>
   19968:	sub	r3, sl, r6
   1996c:	cmp	r3, #1
   19970:	ble	1992c <_start@@Base+0x4750>
   19974:	ldrb	r3, [r4, #9]
   19978:	cmp	r3, #46	; 0x2e
   1997c:	bne	1992c <_start@@Base+0x4750>
   19980:	add	r1, r4, #10
   19984:	cmp	r6, r1
   19988:	beq	1992c <_start@@Base+0x4750>
   1998c:	ldr	r3, [sp, #4]
   19990:	str	fp, [sp, #52]	; 0x34
   19994:	str	r3, [sp, #48]	; 0x30
   19998:	mov	r2, sl
   1999c:	ldr	r3, [sp]
   199a0:	mov	r0, r5
   199a4:	add	sp, sp, #12
   199a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199ac:	b	16598 <_start@@Base+0x13bc>
   199b0:	mov	r6, #0
   199b4:	mov	r7, #0
   199b8:	b	198e0 <_start@@Base+0x4704>
   199bc:	mov	r2, #0
   199c0:	mov	r3, #0
   199c4:	b	198cc <_start@@Base+0x46f0>
   199c8:	mov	r2, #0
   199cc:	mov	r3, #0
   199d0:	b	198b8 <_start@@Base+0x46dc>
   199d4:	mov	r6, #0
   199d8:	mov	r7, #0
   199dc:	b	198a8 <_start@@Base+0x46cc>
   199e0:	mov	r6, #0
   199e4:	mov	r7, #0
   199e8:	b	19894 <_start@@Base+0x46b8>
   199ec:	mov	r6, #0
   199f0:	mov	r7, #0
   199f4:	b	19880 <_start@@Base+0x46a4>
   199f8:	mov	r6, #0
   199fc:	mov	r7, #0
   19a00:	b	1986c <_start@@Base+0x4690>
   19a04:	nop			; (mov r0, r0)
   19a08:	cmnvs	r3, r5, ror #8
   19a0c:	cmnmi	r8, #-2147483620	; 0x8000001c
   19a10:	push	{r4, r5, r6, lr}
   19a14:	mov	r4, r2
   19a18:	sub	r2, r2, r1
   19a1c:	cmp	r2, #1
   19a20:	mov	r5, r0
   19a24:	mov	r6, r3
   19a28:	ble	19a3c <_start@@Base+0x4860>
   19a2c:	ldrb	r3, [r1]
   19a30:	cmp	r3, #32
   19a34:	bhi	19a4c <_start@@Base+0x4870>
   19a38:	beq	19abc <_start@@Base+0x48e0>
   19a3c:	mov	r2, r4
   19a40:	mov	r0, r5
   19a44:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   19a48:	mov	r1, r0
   19a4c:	cmp	r4, r1
   19a50:	beq	19b20 <_start@@Base+0x4944>
   19a54:	ldrb	r3, [r1]
   19a58:	cmp	r3, #44	; 0x2c
   19a5c:	beq	19ad0 <_start@@Base+0x48f4>
   19a60:	mov	r3, #0
   19a64:	str	r3, [r6]
   19a68:	ldrb	r3, [r1]
   19a6c:	cmp	r3, #93	; 0x5d
   19a70:	beq	19a88 <_start@@Base+0x48ac>
   19a74:	mov	r2, r4
   19a78:	mov	r0, r5
   19a7c:	mov	r3, #9
   19a80:	pop	{r4, r5, r6, lr}
   19a84:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   19a88:	add	r0, r1, #1
   19a8c:	sub	r3, r4, r0
   19a90:	cmp	r3, #1
   19a94:	ble	19aa8 <_start@@Base+0x48cc>
   19a98:	ldrb	r3, [r1, #1]
   19a9c:	cmp	r3, #32
   19aa0:	pophi	{r4, r5, r6, pc}
   19aa4:	beq	19b44 <_start@@Base+0x4968>
   19aa8:	mov	r2, r4
   19aac:	mov	r1, r0
   19ab0:	mov	r0, r5
   19ab4:	pop	{r4, r5, r6, lr}
   19ab8:	b	2ce58 <flatcc_json_parser_space_ext@@Base>
   19abc:	ldrb	r3, [r1, #1]
   19ac0:	cmp	r3, #32
   19ac4:	addhi	r1, r1, #1
   19ac8:	bls	19a3c <_start@@Base+0x4860>
   19acc:	b	19a4c <_start@@Base+0x4870>
   19ad0:	add	r0, r1, #1
   19ad4:	sub	r3, r4, r0
   19ad8:	cmp	r3, #1
   19adc:	ble	19af0 <_start@@Base+0x4914>
   19ae0:	ldrb	r3, [r1, #1]
   19ae4:	cmp	r3, #32
   19ae8:	bhi	19b00 <_start@@Base+0x4924>
   19aec:	beq	19b30 <_start@@Base+0x4954>
   19af0:	mov	r1, r0
   19af4:	mov	r2, r4
   19af8:	mov	r0, r5
   19afc:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   19b00:	cmp	r4, r0
   19b04:	beq	19b74 <_start@@Base+0x4998>
   19b08:	ldrb	r3, [r0]
   19b0c:	cmp	r3, #93	; 0x5d
   19b10:	beq	19b58 <_start@@Base+0x497c>
   19b14:	mov	r3, #1
   19b18:	str	r3, [r6]
   19b1c:	pop	{r4, r5, r6, pc}
   19b20:	mov	r3, #0
   19b24:	mov	r0, r4
   19b28:	str	r3, [r6]
   19b2c:	pop	{r4, r5, r6, pc}
   19b30:	ldrb	r3, [r1, #2]
   19b34:	cmp	r3, #32
   19b38:	addhi	r0, r1, #2
   19b3c:	bls	19af0 <_start@@Base+0x4914>
   19b40:	b	19b00 <_start@@Base+0x4924>
   19b44:	ldrb	r3, [r1, #2]
   19b48:	cmp	r3, #32
   19b4c:	bls	19aa8 <_start@@Base+0x48cc>
   19b50:	add	r0, r1, #2
   19b54:	pop	{r4, r5, r6, pc}
   19b58:	mov	r3, #0
   19b5c:	mov	r2, r4
   19b60:	add	r1, r0, #1
   19b64:	str	r3, [r6]
   19b68:	mov	r0, r5
   19b6c:	pop	{r4, r5, r6, lr}
   19b70:	b	16e38 <_start@@Base+0x1c5c>
   19b74:	mov	r3, #0
   19b78:	str	r3, [r6]
   19b7c:	mov	r0, r5
   19b80:	mov	r2, r4
   19b84:	mov	r1, r4
   19b88:	mov	r3, #9
   19b8c:	pop	{r4, r5, r6, lr}
   19b90:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   19b94:	push	{r4, r5, r6, lr}
   19b98:	mov	r4, r2
   19b9c:	sub	r2, r2, r1
   19ba0:	cmp	r2, #1
   19ba4:	mov	r5, r0
   19ba8:	mov	r6, r3
   19bac:	ble	19bc0 <_start@@Base+0x49e4>
   19bb0:	ldrb	r3, [r1]
   19bb4:	cmp	r3, #32
   19bb8:	bhi	19bd0 <_start@@Base+0x49f4>
   19bbc:	beq	19c40 <_start@@Base+0x4a64>
   19bc0:	mov	r2, r4
   19bc4:	mov	r0, r5
   19bc8:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   19bcc:	mov	r1, r0
   19bd0:	cmp	r4, r1
   19bd4:	beq	19ca4 <_start@@Base+0x4ac8>
   19bd8:	ldrb	r3, [r1]
   19bdc:	cmp	r3, #44	; 0x2c
   19be0:	beq	19c54 <_start@@Base+0x4a78>
   19be4:	mov	r3, #0
   19be8:	str	r3, [r6]
   19bec:	ldrb	r3, [r1]
   19bf0:	cmp	r3, #125	; 0x7d
   19bf4:	beq	19c0c <_start@@Base+0x4a30>
   19bf8:	mov	r2, r4
   19bfc:	mov	r0, r5
   19c00:	mov	r3, #10
   19c04:	pop	{r4, r5, r6, lr}
   19c08:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   19c0c:	add	r0, r1, #1
   19c10:	sub	r3, r4, r0
   19c14:	cmp	r3, #1
   19c18:	ble	19c2c <_start@@Base+0x4a50>
   19c1c:	ldrb	r3, [r1, #1]
   19c20:	cmp	r3, #32
   19c24:	pophi	{r4, r5, r6, pc}
   19c28:	beq	19cc8 <_start@@Base+0x4aec>
   19c2c:	mov	r2, r4
   19c30:	mov	r1, r0
   19c34:	mov	r0, r5
   19c38:	pop	{r4, r5, r6, lr}
   19c3c:	b	2ce58 <flatcc_json_parser_space_ext@@Base>
   19c40:	ldrb	r3, [r1, #1]
   19c44:	cmp	r3, #32
   19c48:	addhi	r1, r1, #1
   19c4c:	bls	19bc0 <_start@@Base+0x49e4>
   19c50:	b	19bd0 <_start@@Base+0x49f4>
   19c54:	add	r0, r1, #1
   19c58:	sub	r3, r4, r0
   19c5c:	cmp	r3, #1
   19c60:	ble	19c74 <_start@@Base+0x4a98>
   19c64:	ldrb	r3, [r1, #1]
   19c68:	cmp	r3, #32
   19c6c:	bhi	19c84 <_start@@Base+0x4aa8>
   19c70:	beq	19cb4 <_start@@Base+0x4ad8>
   19c74:	mov	r1, r0
   19c78:	mov	r2, r4
   19c7c:	mov	r0, r5
   19c80:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   19c84:	cmp	r4, r0
   19c88:	beq	19cf8 <_start@@Base+0x4b1c>
   19c8c:	ldrb	r3, [r0]
   19c90:	cmp	r3, #125	; 0x7d
   19c94:	beq	19cdc <_start@@Base+0x4b00>
   19c98:	mov	r3, #1
   19c9c:	str	r3, [r6]
   19ca0:	pop	{r4, r5, r6, pc}
   19ca4:	mov	r3, #0
   19ca8:	mov	r0, r4
   19cac:	str	r3, [r6]
   19cb0:	pop	{r4, r5, r6, pc}
   19cb4:	ldrb	r3, [r1, #2]
   19cb8:	cmp	r3, #32
   19cbc:	addhi	r0, r1, #2
   19cc0:	bls	19c74 <_start@@Base+0x4a98>
   19cc4:	b	19c84 <_start@@Base+0x4aa8>
   19cc8:	ldrb	r3, [r1, #2]
   19ccc:	cmp	r3, #32
   19cd0:	bls	19c2c <_start@@Base+0x4a50>
   19cd4:	add	r0, r1, #2
   19cd8:	pop	{r4, r5, r6, pc}
   19cdc:	mov	r3, #0
   19ce0:	mov	r2, r4
   19ce4:	add	r1, r0, #1
   19ce8:	str	r3, [r6]
   19cec:	mov	r0, r5
   19cf0:	pop	{r4, r5, r6, lr}
   19cf4:	b	16e38 <_start@@Base+0x1c5c>
   19cf8:	mov	r3, #0
   19cfc:	str	r3, [r6]
   19d00:	mov	r0, r5
   19d04:	mov	r2, r4
   19d08:	mov	r1, r4
   19d0c:	mov	r3, #10
   19d10:	pop	{r4, r5, r6, lr}
   19d14:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   19d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d1c:	sub	sp, sp, #44	; 0x2c
   19d20:	mov	sl, r0
   19d24:	mov	r0, r3
   19d28:	str	r3, [sp, #24]
   19d2c:	mov	r3, #0
   19d30:	str	r3, [r0]
   19d34:	mov	r4, r1
   19d38:	ldr	r0, [sl]
   19d3c:	mov	r1, #10
   19d40:	mov	r5, r2
   19d44:	bl	27a48 <flatcc_builder_start_table@@Base>
   19d48:	cmp	r0, #0
   19d4c:	bne	19f5c <_start@@Base+0x4d80>
   19d50:	add	r3, sp, #36	; 0x24
   19d54:	str	r3, [sp]
   19d58:	mov	r2, r5
   19d5c:	mov	r3, #5
   19d60:	mov	r1, r4
   19d64:	mov	r0, sl
   19d68:	bl	2f3fc <flatcc_json_parser_prepare_unions@@Base>
   19d6c:	cmp	r5, r0
   19d70:	beq	19f5c <_start@@Base+0x4d80>
   19d74:	add	fp, sp, #32
   19d78:	mov	r1, r4
   19d7c:	mov	r3, fp
   19d80:	mov	r2, r5
   19d84:	mov	r0, sl
   19d88:	bl	17c8c <_start@@Base+0x2ab0>
   19d8c:	ldr	r3, [sp, #32]
   19d90:	cmp	r3, #0
   19d94:	mov	r4, r0
   19d98:	beq	19f50 <_start@@Base+0x4d74>
   19d9c:	ldr	r3, [pc, #1100]	; 1a1f0 <_start@@Base+0x5014>
   19da0:	add	r9, pc, #1008	; 0x3f0
   19da4:	ldrd	r8, [r9]
   19da8:	add	r3, pc, r3
   19dac:	add	r3, r3, #76	; 0x4c
   19db0:	str	r3, [sp, #28]
   19db4:	b	19e38 <_start@@Base+0x4c5c>
   19db8:	add	r3, pc, #992	; 0x3e0
   19dbc:	ldrd	r2, [r3]
   19dc0:	cmp	r1, r3
   19dc4:	cmpeq	r0, r2
   19dc8:	beq	1a04c <_start@@Base+0x4e70>
   19dcc:	add	r3, pc, #980	; 0x3d4
   19dd0:	ldrd	r2, [r3]
   19dd4:	cmp	r1, r3
   19dd8:	cmpeq	r0, r2
   19ddc:	beq	1a0f4 <_start@@Base+0x4f18>
   19de0:	add	r3, pc, #968	; 0x3c8
   19de4:	ldrd	r2, [r3]
   19de8:	and	r0, r0, #-16777216	; 0xff000000
   19dec:	cmp	r1, r3
   19df0:	cmpeq	r0, r2
   19df4:	bne	19e04 <_start@@Base+0x4c28>
   19df8:	sub	r3, r5, r4
   19dfc:	cmp	r3, #5
   19e00:	bgt	1a3c8 <_start@@Base+0x51ec>
   19e04:	mov	r1, r4
   19e08:	mov	r2, r5
   19e0c:	mov	r0, sl
   19e10:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   19e14:	mov	r1, r0
   19e18:	mov	r3, fp
   19e1c:	mov	r2, r5
   19e20:	mov	r0, sl
   19e24:	bl	19b94 <_start@@Base+0x49b8>
   19e28:	ldr	r3, [sp, #32]
   19e2c:	cmp	r3, #0
   19e30:	mov	r4, r0
   19e34:	beq	19f50 <_start@@Base+0x4d74>
   19e38:	cmp	r5, r4
   19e3c:	beq	19e68 <_start@@Base+0x4c8c>
   19e40:	ldrb	r3, [r4]
   19e44:	cmp	r3, #34	; 0x22
   19e48:	addeq	r4, r4, #1
   19e4c:	beq	19e68 <_start@@Base+0x4c8c>
   19e50:	mov	r1, r4
   19e54:	mov	r3, #5
   19e58:	mov	r2, r5
   19e5c:	mov	r0, sl
   19e60:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   19e64:	mov	r4, r0
   19e68:	mov	r1, r5
   19e6c:	mov	r0, r4
   19e70:	bl	15308 <_start@@Base+0x12c>
   19e74:	cmp	r1, r9
   19e78:	cmpeq	r0, r8
   19e7c:	bls	19db8 <_start@@Base+0x4bdc>
   19e80:	add	r3, pc, #816	; 0x330
   19e84:	ldrd	r2, [r3]
   19e88:	cmp	r1, r3
   19e8c:	cmpeq	r0, r2
   19e90:	bhi	19f78 <_start@@Base+0x4d9c>
   19e94:	add	r3, pc, #804	; 0x324
   19e98:	ldrd	r2, [r3]
   19e9c:	cmp	r1, r3
   19ea0:	cmpeq	r0, r2
   19ea4:	bne	19e04 <_start@@Base+0x4c28>
   19ea8:	add	r4, r4, #8
   19eac:	mov	r0, r4
   19eb0:	mov	r1, r5
   19eb4:	bl	15308 <_start@@Base+0x12c>
   19eb8:	add	r3, pc, #776	; 0x308
   19ebc:	ldrd	r2, [r3]
   19ec0:	bic	r6, r0, #255	; 0xff
   19ec4:	cmp	r1, r3
   19ec8:	cmpeq	r6, r2
   19ecc:	beq	1a418 <_start@@Base+0x523c>
   19ed0:	ldr	r3, [pc, #796]	; 1a1f4 <_start@@Base+0x5018>
   19ed4:	mov	r2, #0
   19ed8:	and	r1, r1, r3
   19edc:	ldr	r3, [pc, #788]	; 1a1f8 <_start@@Base+0x501c>
   19ee0:	and	r0, r0, r2
   19ee4:	cmp	r1, r3
   19ee8:	mov	r2, #0
   19eec:	cmpeq	r0, r2
   19ef0:	bne	19e04 <_start@@Base+0x4c28>
   19ef4:	sub	r3, r5, r4
   19ef8:	cmp	r3, #2
   19efc:	ble	19e04 <_start@@Base+0x4c28>
   19f00:	mov	r1, r4
   19f04:	mov	r3, #2
   19f08:	mov	r2, r5
   19f0c:	mov	r0, sl
   19f10:	bl	18f38 <_start@@Base+0x3d5c>
   19f14:	cmp	r4, r0
   19f18:	mov	r1, r0
   19f1c:	beq	19e04 <_start@@Base+0x4c28>
   19f20:	ldr	ip, [sp, #36]	; 0x24
   19f24:	ldr	r3, [pc, #720]	; 1a1fc <_start@@Base+0x5020>
   19f28:	mov	r2, #9
   19f2c:	add	r3, pc, r3
   19f30:	str	r3, [sp, #8]
   19f34:	stm	sp, {r2, ip}
   19f38:	mov	r3, #4
   19f3c:	mov	r2, r5
   19f40:	mov	r0, sl
   19f44:	bl	2f848 <flatcc_json_parser_union_vector@@Base>
   19f48:	mov	r1, r0
   19f4c:	b	19e18 <_start@@Base+0x4c3c>
   19f50:	ldr	r3, [sl, #20]
   19f54:	cmp	r3, #0
   19f58:	beq	1a28c <_start@@Base+0x50b0>
   19f5c:	mov	r2, r5
   19f60:	mov	r1, r4
   19f64:	mov	r0, sl
   19f68:	mov	r3, #33	; 0x21
   19f6c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   19f70:	add	sp, sp, #44	; 0x2c
   19f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f78:	add	r3, pc, #592	; 0x250
   19f7c:	ldrd	r2, [r3]
   19f80:	cmp	r1, r3
   19f84:	cmpeq	r0, r2
   19f88:	beq	1a218 <_start@@Base+0x503c>
   19f8c:	add	r3, pc, #580	; 0x244
   19f90:	ldrd	r2, [r3]
   19f94:	cmp	r1, r3
   19f98:	cmpeq	r0, r2
   19f9c:	bne	19e04 <_start@@Base+0x4c28>
   19fa0:	add	r4, r4, #8
   19fa4:	mov	r0, r4
   19fa8:	mov	r1, r5
   19fac:	bl	15308 <_start@@Base+0x12c>
   19fb0:	ldr	r2, [pc, #572]	; 1a1f4 <_start@@Base+0x5018>
   19fb4:	mvn	r3, #0
   19fb8:	mov	r6, r0
   19fbc:	mov	r7, r1
   19fc0:	add	r1, pc, #536	; 0x218
   19fc4:	ldrd	r0, [r1]
   19fc8:	and	r3, r3, r7
   19fcc:	and	r2, r2, r6
   19fd0:	cmp	r3, r1
   19fd4:	cmpeq	r2, r0
   19fd8:	beq	1a490 <_start@@Base+0x52b4>
   19fdc:	and	r7, r7, #-16777216	; 0xff000000
   19fe0:	mov	r6, #0
   19fe4:	cmp	r7, #1795162112	; 0x6b000000
   19fe8:	cmpeq	r6, #0
   19fec:	bne	19e04 <_start@@Base+0x4c28>
   19ff0:	sub	r3, r5, r4
   19ff4:	cmp	r3, #1
   19ff8:	ble	19e04 <_start@@Base+0x4c28>
   19ffc:	mov	r1, r4
   1a000:	mov	r3, #1
   1a004:	mov	r2, r5
   1a008:	mov	r0, sl
   1a00c:	bl	18f38 <_start@@Base+0x3d5c>
   1a010:	cmp	r4, r0
   1a014:	mov	r1, r0
   1a018:	beq	19e04 <_start@@Base+0x4c28>
   1a01c:	ldr	r3, [pc, #476]	; 1a200 <_start@@Base+0x5024>
   1a020:	ldr	r0, [sp, #36]	; 0x24
   1a024:	add	r3, pc, r3
   1a028:	mov	r2, #5
   1a02c:	stmib	sp, {r0, r3}
   1a030:	str	r2, [sp]
   1a034:	mov	r3, #2
   1a038:	mov	r2, r5
   1a03c:	mov	r0, sl
   1a040:	bl	2f4bc <flatcc_json_parser_union@@Base>
   1a044:	mov	r1, r0
   1a048:	b	19e18 <_start@@Base+0x4c3c>
   1a04c:	add	r4, r4, #8
   1a050:	mov	r0, r4
   1a054:	mov	r1, r5
   1a058:	bl	15308 <_start@@Base+0x12c>
   1a05c:	add	r3, pc, #388	; 0x184
   1a060:	ldrd	r2, [r3]
   1a064:	bic	r6, r0, #255	; 0xff
   1a068:	cmp	r1, r3
   1a06c:	cmpeq	r6, r2
   1a070:	beq	1a35c <_start@@Base+0x5180>
   1a074:	ldr	r3, [pc, #376]	; 1a1f4 <_start@@Base+0x5018>
   1a078:	mov	r2, #0
   1a07c:	and	r1, r1, r3
   1a080:	ldr	r3, [pc, #380]	; 1a204 <_start@@Base+0x5028>
   1a084:	and	r0, r0, r2
   1a088:	cmp	r1, r3
   1a08c:	mov	r2, #0
   1a090:	cmpeq	r0, r2
   1a094:	bne	19e04 <_start@@Base+0x4c28>
   1a098:	sub	r3, r5, r4
   1a09c:	cmp	r3, #2
   1a0a0:	ble	19e04 <_start@@Base+0x4c28>
   1a0a4:	mov	r1, r4
   1a0a8:	mov	r3, #2
   1a0ac:	mov	r2, r5
   1a0b0:	mov	r0, sl
   1a0b4:	bl	18f38 <_start@@Base+0x3d5c>
   1a0b8:	cmp	r4, r0
   1a0bc:	mov	r1, r0
   1a0c0:	beq	19e04 <_start@@Base+0x4c28>
   1a0c4:	ldr	ip, [sp, #36]	; 0x24
   1a0c8:	ldr	r3, [pc, #312]	; 1a208 <_start@@Base+0x502c>
   1a0cc:	mov	r2, #3
   1a0d0:	add	r3, pc, r3
   1a0d4:	str	r3, [sp, #8]
   1a0d8:	stm	sp, {r2, ip}
   1a0dc:	mov	r3, #1
   1a0e0:	mov	r2, r5
   1a0e4:	mov	r0, sl
   1a0e8:	bl	2f4bc <flatcc_json_parser_union@@Base>
   1a0ec:	mov	r1, r0
   1a0f0:	b	19e18 <_start@@Base+0x4c3c>
   1a0f4:	add	r4, r4, #8
   1a0f8:	mov	r0, r4
   1a0fc:	mov	r1, r5
   1a100:	bl	15308 <_start@@Base+0x12c>
   1a104:	ldr	r3, [pc, #232]	; 1a1f4 <_start@@Base+0x5018>
   1a108:	ldr	r7, [pc, #252]	; 1a20c <_start@@Base+0x5030>
   1a10c:	mov	r2, #0
   1a110:	mov	r6, #0
   1a114:	and	r1, r1, r3
   1a118:	and	r0, r0, r2
   1a11c:	cmp	r1, r7
   1a120:	cmpeq	r0, r6
   1a124:	bne	19e04 <_start@@Base+0x4c28>
   1a128:	sub	r3, r5, r4
   1a12c:	cmp	r3, #2
   1a130:	ble	19e04 <_start@@Base+0x4c28>
   1a134:	mov	r1, r4
   1a138:	mov	r3, #2
   1a13c:	mov	r2, r5
   1a140:	mov	r0, sl
   1a144:	bl	18f38 <_start@@Base+0x3d5c>
   1a148:	cmp	r4, r0
   1a14c:	mov	r1, r0
   1a150:	beq	19e04 <_start@@Base+0x4c28>
   1a154:	ldr	r3, [pc, #180]	; 1a210 <_start@@Base+0x5034>
   1a158:	ldr	lr, [sp, #36]	; 0x24
   1a15c:	ldr	r2, [pc, #176]	; 1a214 <_start@@Base+0x5038>
   1a160:	mov	ip, #7
   1a164:	add	r3, pc, r3
   1a168:	add	r2, pc, r2
   1a16c:	add	r3, r3, #28
   1a170:	str	r3, [sp, #8]
   1a174:	str	r2, [sp, #12]
   1a178:	stm	sp, {ip, lr}
   1a17c:	mov	r3, #3
   1a180:	mov	r2, r5
   1a184:	mov	r0, sl
   1a188:	bl	2f600 <flatcc_json_parser_union_type@@Base>
   1a18c:	mov	r1, r0
   1a190:	b	19e18 <_start@@Base+0x4c3c>
   1a194:	nop			; (mov r0, r0)
   1a198:	cmnvs	r3, r4, ror #8
   1a19c:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a1a0:	strbvs	r6, [pc, -r9, ror #28]!
   1a1a4:	cmnvs	lr, r1, ror #8
   1a1a8:	svcvs	0x005f7479
   1a1ac:	cmnvs	r1, #6464	; 0x1940
   1a1b0:	svcvs	0x00000000
   1a1b4:	cmnvs	r1, #6464	; 0x1940
   1a1b8:	svcpl	0x00636860
   1a1bc:			; <UNDEFINED> instruction: 0x6d61696e
   1a1c0:	cmnvs	r3, r5, ror #8
   1a1c4:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a1c8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a1cc:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1a1d0:	svcpl	0x00636861
   1a1d4:			; <UNDEFINED> instruction: 0x6d61696e
   1a1d8:	svcpl	0x006b6963
   1a1dc:	cmnvc	r9, #1694498816	; 0x65000000
   1a1e0:	rsbvc	r0, r5, r0
   1a1e4:	blvs	17f73d0 <__bss_end__@@Base+0x17a3004>
   1a1e8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a1ec:	cmnvc	r4, #116, 30	; 0x1d0
   1a1f0:	ldrdeq	sl, [r3], -r8
   1a1f4:			; <UNDEFINED> instruction: 0xffff0000
   1a1f8:	rsbsvc	r0, r3, #0
   1a1fc:	andeq	r0, r0, r8, asr r6
   1a200:	andeq	r0, r0, r0, ror #10
   1a204:	cmnvc	r4, #0
   1a208:			; <UNDEFINED> instruction: 0x000004b4
   1a20c:	rsbvc	r0, r5, r0
   1a210:	andeq	r9, r3, ip, lsl pc
   1a214:	andeq	r0, r0, ip, lsl r4
   1a218:	add	r6, r4, #8
   1a21c:	mov	r0, r6
   1a220:	mov	r1, r5
   1a224:	bl	15308 <_start@@Base+0x12c>
   1a228:	add	r3, pc, #792	; 0x318
   1a22c:	ldrd	r2, [r3]
   1a230:	cmp	r1, r3
   1a234:	cmpeq	r0, r2
   1a238:	beq	1a2c4 <_start@@Base+0x50e8>
   1a23c:	ldr	r2, [pc, #796]	; 1a560 <_start@@Base+0x5384>
   1a240:	mvn	r3, #0
   1a244:	and	r2, r2, r0
   1a248:	and	r3, r3, r1
   1a24c:	mov	r0, r2
   1a250:	mov	r1, r3
   1a254:	add	r3, pc, #756	; 0x2f4
   1a258:	ldrd	r2, [r3]
   1a25c:	cmp	r1, r3
   1a260:	cmpeq	r0, r2
   1a264:	bne	1a274 <_start@@Base+0x5098>
   1a268:	sub	r3, r5, r6
   1a26c:	cmp	r3, #6
   1a270:	bgt	1a4f4 <_start@@Base+0x5318>
   1a274:	mov	r1, r6
   1a278:	mov	r2, r5
   1a27c:	mov	r0, sl
   1a280:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1a284:	mov	r1, r0
   1a288:	b	19e18 <_start@@Base+0x4c3c>
   1a28c:	mov	r1, r4
   1a290:	ldr	r3, [sp, #36]	; 0x24
   1a294:	mov	r2, r5
   1a298:	mov	r0, sl
   1a29c:	bl	2f464 <flatcc_json_parser_finalize_unions@@Base>
   1a2a0:	mov	r4, r0
   1a2a4:	ldr	r0, [sl]
   1a2a8:	bl	2843c <flatcc_builder_end_table@@Base>
   1a2ac:	ldr	r3, [sp, #24]
   1a2b0:	cmp	r0, #0
   1a2b4:	str	r0, [r3]
   1a2b8:	movne	r0, r4
   1a2bc:	beq	19f5c <_start@@Base+0x4d80>
   1a2c0:	b	19f70 <_start@@Base+0x4d94>
   1a2c4:	add	r4, r4, #16
   1a2c8:	mov	r0, r4
   1a2cc:	mov	r1, r5
   1a2d0:	bl	15308 <_start@@Base+0x12c>
   1a2d4:	add	r3, pc, #636	; 0x27c
   1a2d8:	ldrd	r2, [r3]
   1a2dc:	mov	r0, #0
   1a2e0:	bic	r1, r1, #255	; 0xff
   1a2e4:	cmp	r1, r3
   1a2e8:	cmpeq	r0, r2
   1a2ec:	bne	19e04 <_start@@Base+0x4c28>
   1a2f0:	sub	r3, r5, r4
   1a2f4:	cmp	r3, #3
   1a2f8:	ble	19e04 <_start@@Base+0x4c28>
   1a2fc:	mov	r1, r4
   1a300:	mov	r3, #3
   1a304:	mov	r2, r5
   1a308:	mov	r0, sl
   1a30c:	bl	18f38 <_start@@Base+0x3d5c>
   1a310:	cmp	r4, r0
   1a314:	mov	r1, r0
   1a318:	beq	19e04 <_start@@Base+0x4c28>
   1a31c:	ldr	r3, [pc, #576]	; 1a564 <_start@@Base+0x5388>
   1a320:	ldr	lr, [sp, #36]	; 0x24
   1a324:	ldr	r2, [pc, #572]	; 1a568 <_start@@Base+0x538c>
   1a328:	mov	ip, #1
   1a32c:	add	r3, pc, r3
   1a330:	add	r2, pc, r2
   1a334:	add	r3, r3, #60	; 0x3c
   1a338:	str	r3, [sp, #8]
   1a33c:	str	r2, [sp, #12]
   1a340:	stm	sp, {ip, lr}
   1a344:	mov	r3, #0
   1a348:	mov	r2, r5
   1a34c:	mov	r0, sl
   1a350:	bl	2f600 <flatcc_json_parser_union_type@@Base>
   1a354:	mov	r1, r0
   1a358:	b	19e18 <_start@@Base+0x4c3c>
   1a35c:	sub	r3, r5, r4
   1a360:	cmp	r3, #7
   1a364:	ble	19e04 <_start@@Base+0x4c28>
   1a368:	mov	r1, r4
   1a36c:	mov	r3, #7
   1a370:	mov	r2, r5
   1a374:	mov	r0, sl
   1a378:	bl	18f38 <_start@@Base+0x3d5c>
   1a37c:	cmp	r4, r0
   1a380:	mov	r1, r0
   1a384:	beq	19e04 <_start@@Base+0x4c28>
   1a388:	ldr	r3, [pc, #476]	; 1a56c <_start@@Base+0x5390>
   1a38c:	ldr	lr, [sp, #36]	; 0x24
   1a390:	ldr	r2, [pc, #472]	; 1a570 <_start@@Base+0x5394>
   1a394:	mov	ip, #3
   1a398:	add	r3, pc, r3
   1a39c:	add	r2, pc, r2
   1a3a0:	add	r3, r3, #12
   1a3a4:	str	r3, [sp, #8]
   1a3a8:	str	r2, [sp, #12]
   1a3ac:	stm	sp, {ip, lr}
   1a3b0:	mov	r3, #1
   1a3b4:	mov	r2, r5
   1a3b8:	mov	r0, sl
   1a3bc:	bl	2f600 <flatcc_json_parser_union_type@@Base>
   1a3c0:	mov	r1, r0
   1a3c4:	b	19e18 <_start@@Base+0x4c3c>
   1a3c8:	mov	r1, r4
   1a3cc:	mov	r3, #5
   1a3d0:	mov	r2, r5
   1a3d4:	mov	r0, sl
   1a3d8:	bl	18f38 <_start@@Base+0x3d5c>
   1a3dc:	cmp	r4, r0
   1a3e0:	mov	r1, r0
   1a3e4:	beq	19e04 <_start@@Base+0x4c28>
   1a3e8:	ldr	ip, [sp, #36]	; 0x24
   1a3ec:	ldr	r3, [pc, #384]	; 1a574 <_start@@Base+0x5398>
   1a3f0:	mov	r2, #7
   1a3f4:	add	r3, pc, r3
   1a3f8:	str	r3, [sp, #8]
   1a3fc:	stm	sp, {r2, ip}
   1a400:	mov	r3, #3
   1a404:	mov	r2, r5
   1a408:	mov	r0, sl
   1a40c:	bl	2f4bc <flatcc_json_parser_union@@Base>
   1a410:	mov	r1, r0
   1a414:	b	19e18 <_start@@Base+0x4c3c>
   1a418:	sub	r3, r5, r4
   1a41c:	cmp	r3, #7
   1a420:	ble	19e04 <_start@@Base+0x4c28>
   1a424:	mov	r1, r4
   1a428:	mov	r3, #7
   1a42c:	mov	r2, r5
   1a430:	mov	r0, sl
   1a434:	bl	18f38 <_start@@Base+0x3d5c>
   1a438:	cmp	r4, r0
   1a43c:	mov	r1, r0
   1a440:	beq	19e04 <_start@@Base+0x4c28>
   1a444:	ldr	r3, [pc, #300]	; 1a578 <_start@@Base+0x539c>
   1a448:	ldr	lr, [sp, #36]	; 0x24
   1a44c:	ldr	ip, [pc, #296]	; 1a57c <_start@@Base+0x53a0>
   1a450:	ldr	r2, [pc, #296]	; 1a580 <_start@@Base+0x53a4>
   1a454:	mov	r0, #9
   1a458:	add	r3, pc, r3
   1a45c:	add	ip, pc, ip
   1a460:	add	r2, pc, r2
   1a464:	add	r3, r3, #44	; 0x2c
   1a468:	str	r3, [sp, #8]
   1a46c:	str	r2, [sp, #12]
   1a470:	stm	sp, {r0, lr}
   1a474:	str	ip, [sp, #16]
   1a478:	mov	r3, #4
   1a47c:	mov	r2, r5
   1a480:	mov	r0, sl
   1a484:	bl	2f914 <flatcc_json_parser_union_type_vector@@Base>
   1a488:	mov	r1, r0
   1a48c:	b	19e18 <_start@@Base+0x4c3c>
   1a490:	sub	r3, r5, r4
   1a494:	cmp	r3, #6
   1a498:	ble	19e04 <_start@@Base+0x4c28>
   1a49c:	mov	r1, r4
   1a4a0:	mov	r3, #6
   1a4a4:	mov	r2, r5
   1a4a8:	mov	r0, sl
   1a4ac:	bl	18f38 <_start@@Base+0x3d5c>
   1a4b0:	cmp	r4, r0
   1a4b4:	mov	r1, r0
   1a4b8:	beq	19e04 <_start@@Base+0x4c28>
   1a4bc:	ldr	ip, [sp, #36]	; 0x24
   1a4c0:	ldr	r3, [pc, #188]	; 1a584 <_start@@Base+0x53a8>
   1a4c4:	ldr	r0, [sp, #28]
   1a4c8:	mov	r2, #5
   1a4cc:	add	r3, pc, r3
   1a4d0:	str	r0, [sp, #8]
   1a4d4:	str	r3, [sp, #12]
   1a4d8:	stm	sp, {r2, ip}
   1a4dc:	mov	r3, #2
   1a4e0:	mov	r2, r5
   1a4e4:	mov	r0, sl
   1a4e8:	bl	2f600 <flatcc_json_parser_union_type@@Base>
   1a4ec:	mov	r1, r0
   1a4f0:	b	19e18 <_start@@Base+0x4c3c>
   1a4f4:	mov	r1, r6
   1a4f8:	mov	r3, #6
   1a4fc:	mov	r2, r5
   1a500:	mov	r0, sl
   1a504:	bl	18f38 <_start@@Base+0x3d5c>
   1a508:	cmp	r6, r0
   1a50c:	mov	r1, r0
   1a510:	beq	1a274 <_start@@Base+0x5098>
   1a514:	ldr	ip, [sp, #36]	; 0x24
   1a518:	ldr	r3, [pc, #104]	; 1a588 <_start@@Base+0x53ac>
   1a51c:	mov	r2, #1
   1a520:	add	r3, pc, r3
   1a524:	str	r3, [sp, #8]
   1a528:	stm	sp, {r2, ip}
   1a52c:	mov	r3, #0
   1a530:	mov	r2, r5
   1a534:	mov	r0, sl
   1a538:	bl	2f4bc <flatcc_json_parser_union@@Base>
   1a53c:	mov	r1, r0
   1a540:	b	19e18 <_start@@Base+0x4c3c>
   1a544:	nop			; (mov r0, r0)
   1a548:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1a54c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1a550:	ldrbvs	r0, [r2, #-0]!
   1a554:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1a558:	andeq	r0, r0, r0
   1a55c:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a560:			; <UNDEFINED> instruction: 0xffff0000
   1a564:	andeq	r9, r3, r4, asr sp
   1a568:	andeq	r0, r0, r4, asr r2
   1a56c:	andeq	r9, r3, r8, ror #25
   1a570:	andeq	r0, r0, r8, ror #3
   1a574:	muleq	r0, r0, r1
   1a578:	andeq	r9, r3, r8, lsr #24
   1a57c:			; <UNDEFINED> instruction: 0xffffafec
   1a580:	andeq	r0, r0, r4, lsr #2
   1a584:	strheq	r0, [r0], -r8
   1a588:	andeq	r0, r0, r4, rrx
   1a58c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a590:	sub	sp, sp, #132	; 0x84
   1a594:	mov	ip, #0
   1a598:	ldr	lr, [sp, #168]	; 0xa8
   1a59c:	cmp	r3, #9
   1a5a0:	mov	r5, r0
   1a5a4:	str	ip, [lr]
   1a5a8:	mov	r4, r2
   1a5ac:	beq	1a65c <_start@@Base+0x5480>
   1a5b0:	mov	r8, r1
   1a5b4:	bls	1a5fc <_start@@Base+0x5420>
   1a5b8:	cmp	r3, #11
   1a5bc:	beq	1a6a4 <_start@@Base+0x54c8>
   1a5c0:	bcc	1a65c <_start@@Base+0x5480>
   1a5c4:	cmp	r3, #255	; 0xff
   1a5c8:	beq	1a6a4 <_start@@Base+0x54c8>
   1a5cc:	ldr	r3, [r5, #8]
   1a5d0:	mov	r2, r4
   1a5d4:	tst	r3, #1
   1a5d8:	mov	r1, r8
   1a5dc:	mov	r0, r5
   1a5e0:	bne	1ae64 <_start@@Base+0x5c88>
   1a5e4:	mov	r3, #15
   1a5e8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1a5ec:	mov	r1, r0
   1a5f0:	mov	r0, r1
   1a5f4:	add	sp, sp, #132	; 0x84
   1a5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5fc:	cmp	r3, #2
   1a600:	beq	1aa28 <_start@@Base+0x584c>
   1a604:	cmp	r3, #8
   1a608:	beq	1a6b4 <_start@@Base+0x54d8>
   1a60c:	cmp	r3, ip
   1a610:	bne	1a5cc <_start@@Base+0x53f0>
   1a614:	sub	r3, r2, r1
   1a618:	cmp	r3, #3
   1a61c:	ble	1a640 <_start@@Base+0x5464>
   1a620:	ldr	r1, [pc, #1128]	; 1aa90 <_start@@Base+0x58b4>
   1a624:	mov	r2, #4
   1a628:	add	r1, pc, r1
   1a62c:	mov	r0, r8
   1a630:	bl	14550 <memcmp@plt>
   1a634:	cmp	r0, #0
   1a638:	addeq	r1, r8, #4
   1a63c:	beq	1a5f0 <_start@@Base+0x5414>
   1a640:	mov	r1, r8
   1a644:	mov	r2, r4
   1a648:	mov	r0, r5
   1a64c:	mov	r3, #26
   1a650:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1a654:	mov	r1, r0
   1a658:	b	1a5f0 <_start@@Base+0x5414>
   1a65c:	ldr	r3, [sp, #168]	; 0xa8
   1a660:	bl	18fdc <_start@@Base+0x3e00>
   1a664:	mov	r1, r0
   1a668:	ldr	r3, [r5, #20]
   1a66c:	cmp	r3, #0
   1a670:	bne	1a5f0 <_start@@Base+0x5414>
   1a674:	ldr	r3, [sp, #168]	; 0xa8
   1a678:	ldr	r3, [r3]
   1a67c:	cmp	r3, #0
   1a680:	bne	1a5f0 <_start@@Base+0x5414>
   1a684:	mov	r2, r4
   1a688:	mov	r0, r5
   1a68c:	mov	r3, #33	; 0x21
   1a690:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1a694:	mov	r1, r0
   1a698:	mov	r0, r1
   1a69c:	add	sp, sp, #132	; 0x84
   1a6a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6a4:	ldr	r3, [sp, #168]	; 0xa8
   1a6a8:	bl	2f254 <flatcc_json_parser_build_string@@Base>
   1a6ac:	mov	r1, r0
   1a6b0:	b	1a668 <_start@@Base+0x548c>
   1a6b4:	mov	r2, #2
   1a6b8:	mov	r1, r2
   1a6bc:	ldr	r0, [r0]
   1a6c0:	bl	26e0c <flatcc_builder_start_struct@@Base>
   1a6c4:	subs	r3, r0, #0
   1a6c8:	str	r3, [sp, #48]	; 0x30
   1a6cc:	beq	1aa0c <_start@@Base+0x5830>
   1a6d0:	add	r6, sp, #112	; 0x70
   1a6d4:	mov	r1, r8
   1a6d8:	mov	r3, r6
   1a6dc:	mov	r2, r4
   1a6e0:	mov	r0, r5
   1a6e4:	bl	17c8c <_start@@Base+0x2ab0>
   1a6e8:	ldr	r3, [sp, #112]	; 0x70
   1a6ec:	cmp	r3, #0
   1a6f0:	mov	r1, r0
   1a6f4:	beq	1ad64 <_start@@Base+0x5b88>
   1a6f8:	ldr	r3, [pc, #916]	; 1aa94 <_start@@Base+0x58b8>
   1a6fc:	str	r6, [sp, #32]
   1a700:	add	r3, pc, r3
   1a704:	add	r3, r3, #104	; 0x68
   1a708:	str	r3, [sp, #72]	; 0x48
   1a70c:	mov	r7, #0
   1a710:	mov	r6, r5
   1a714:	b	1a780 <_start@@Base+0x55a4>
   1a718:	add	r5, r0, #8
   1a71c:	mov	r0, r5
   1a720:	mov	r1, r4
   1a724:	bl	15308 <_start@@Base+0x12c>
   1a728:	add	r3, pc, #848	; 0x350
   1a72c:	ldrd	r2, [r3]
   1a730:	mov	r0, #0
   1a734:	bic	r1, r1, #255	; 0xff
   1a738:	cmp	r1, r3
   1a73c:	cmpeq	r0, r2
   1a740:	bne	1a750 <_start@@Base+0x5574>
   1a744:	sub	r3, r4, r5
   1a748:	cmp	r3, #3
   1a74c:	bgt	1a968 <_start@@Base+0x578c>
   1a750:	mov	r1, r5
   1a754:	mov	r2, r4
   1a758:	mov	r0, r6
   1a75c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1a760:	mov	r1, r0
   1a764:	ldr	r3, [sp, #32]
   1a768:	mov	r2, r4
   1a76c:	mov	r0, r6
   1a770:	bl	19b94 <_start@@Base+0x49b8>
   1a774:	ldr	r3, [sp, #112]	; 0x70
   1a778:	cmp	r3, #0
   1a77c:	beq	1ad90 <_start@@Base+0x5bb4>
   1a780:	cmp	r4, r0
   1a784:	beq	1a8cc <_start@@Base+0x56f0>
   1a788:	ldrb	r3, [r0]
   1a78c:	cmp	r3, #34	; 0x22
   1a790:	addeq	r0, r0, #1
   1a794:	beq	1a7ac <_start@@Base+0x55d0>
   1a798:	mov	r1, r0
   1a79c:	mov	r3, #5
   1a7a0:	mov	r2, r4
   1a7a4:	mov	r0, r6
   1a7a8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1a7ac:	sub	r3, r4, r0
   1a7b0:	cmp	r3, #8
   1a7b4:	bls	1a8e4 <_start@@Base+0x5708>
   1a7b8:	ldrb	r8, [r0, #7]
   1a7bc:	mov	r9, #0
   1a7c0:	ldrb	r2, [r0, #6]
   1a7c4:	lsr	r1, r2, #24
   1a7c8:	lsl	r3, r2, #8
   1a7cc:	str	r1, [sp, #84]	; 0x54
   1a7d0:	str	r3, [sp, #80]	; 0x50
   1a7d4:	ldrd	r2, [sp, #80]	; 0x50
   1a7d8:	orr	r2, r2, r8
   1a7dc:	orr	r3, r3, r9
   1a7e0:	ldrb	r8, [r0, #5]
   1a7e4:	lsr	r1, r8, #16
   1a7e8:	str	r1, [sp, #68]	; 0x44
   1a7ec:	lsl	r1, r8, #16
   1a7f0:	str	r1, [sp, #64]	; 0x40
   1a7f4:	ldrd	r8, [sp, #64]	; 0x40
   1a7f8:	orr	r8, r8, r2
   1a7fc:	orr	r9, r9, r3
   1a800:	mov	r2, r8
   1a804:	mov	r3, r9
   1a808:	ldrb	r8, [r0, #4]
   1a80c:	lsr	r1, r8, #8
   1a810:	str	r1, [sp, #28]
   1a814:	lsl	r1, r8, #24
   1a818:	str	r1, [sp, #24]
   1a81c:	ldrd	r8, [sp, #24]
   1a820:	orr	r8, r8, r2
   1a824:	orr	r9, r9, r3
   1a828:	mov	r2, r8
   1a82c:	mov	r3, r9
   1a830:	ldrb	r1, [r0, #3]
   1a834:	str	r1, [sp, #44]	; 0x2c
   1a838:	mov	r1, #0
   1a83c:	str	r1, [sp, #40]	; 0x28
   1a840:	ldrd	r8, [sp, #40]	; 0x28
   1a844:	orr	r8, r8, r2
   1a848:	orr	r9, r9, r3
   1a84c:	mov	r2, r8
   1a850:	mov	r3, r9
   1a854:	ldrb	r8, [r0, #2]
   1a858:	lsl	r1, r8, #8
   1a85c:	str	r1, [sp, #20]
   1a860:	mov	r1, #0
   1a864:	str	r1, [sp, #16]
   1a868:	ldrd	r8, [sp, #16]
   1a86c:	orr	r8, r8, r2
   1a870:	orr	r9, r9, r3
   1a874:	mov	r2, r8
   1a878:	mov	r3, r9
   1a87c:	ldrb	r8, [r0, #1]
   1a880:	lsl	r1, r8, #16
   1a884:	str	r1, [sp, #12]
   1a888:	mov	r1, #0
   1a88c:	str	r1, [sp, #8]
   1a890:	ldrd	r8, [sp, #8]
   1a894:	orr	r8, r8, r2
   1a898:	orr	r9, r9, r3
   1a89c:	mov	r2, r8
   1a8a0:	mov	r3, r9
   1a8a4:	ldrb	r8, [r0]
   1a8a8:	mov	sl, #0
   1a8ac:	orr	r2, r2, sl
   1a8b0:	lsl	fp, r8, #24
   1a8b4:	add	r9, pc, #460	; 0x1cc
   1a8b8:	ldrd	r8, [r9]
   1a8bc:	orr	r3, r3, fp
   1a8c0:	cmp	r3, r9
   1a8c4:	cmpeq	r2, r8
   1a8c8:	beq	1a718 <_start@@Base+0x553c>
   1a8cc:	mov	r1, r0
   1a8d0:	mov	r2, r4
   1a8d4:	mov	r0, r6
   1a8d8:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1a8dc:	mov	r1, r0
   1a8e0:	b	1a764 <_start@@Base+0x5588>
   1a8e4:	sub	r3, r3, #1
   1a8e8:	cmp	r3, #7
   1a8ec:	addls	pc, pc, r3, lsl #2
   1a8f0:	b	1a8cc <_start@@Base+0x56f0>
   1a8f4:	b	1a95c <_start@@Base+0x5780>
   1a8f8:	b	1a950 <_start@@Base+0x5774>
   1a8fc:	b	1a944 <_start@@Base+0x5768>
   1a900:	b	1a938 <_start@@Base+0x575c>
   1a904:	b	1a92c <_start@@Base+0x5750>
   1a908:	b	1a920 <_start@@Base+0x5744>
   1a90c:	b	1a914 <_start@@Base+0x5738>
   1a910:	b	1a7b8 <_start@@Base+0x55dc>
   1a914:	mov	r8, r7
   1a918:	mov	r9, #0
   1a91c:	b	1a7c0 <_start@@Base+0x55e4>
   1a920:	mov	r2, r7
   1a924:	mov	r3, #0
   1a928:	b	1a7e0 <_start@@Base+0x5604>
   1a92c:	mov	r2, r7
   1a930:	mov	r3, #0
   1a934:	b	1a808 <_start@@Base+0x562c>
   1a938:	mov	r2, r7
   1a93c:	mov	r3, #0
   1a940:	b	1a830 <_start@@Base+0x5654>
   1a944:	mov	r2, r7
   1a948:	mov	r3, #0
   1a94c:	b	1a854 <_start@@Base+0x5678>
   1a950:	mov	r2, r7
   1a954:	mov	r3, #0
   1a958:	b	1a87c <_start@@Base+0x56a0>
   1a95c:	mov	r2, r7
   1a960:	mov	r3, #0
   1a964:	b	1a8a4 <_start@@Base+0x56c8>
   1a968:	mov	r3, #3
   1a96c:	mov	r2, r4
   1a970:	mov	r1, r5
   1a974:	mov	r0, r6
   1a978:	bl	18f38 <_start@@Base+0x3d5c>
   1a97c:	cmp	r5, r0
   1a980:	str	r0, [sp, #56]	; 0x38
   1a984:	beq	1a750 <_start@@Base+0x5574>
   1a988:	cmp	r4, r0
   1a98c:	mov	r5, r0
   1a990:	strh	sl, [sp, #108]	; 0x6c
   1a994:	str	r7, [sp, #120]	; 0x78
   1a998:	str	sl, [sp, #124]	; 0x7c
   1a99c:	str	sl, [sp, #116]	; 0x74
   1a9a0:	beq	1ad1c <_start@@Base+0x5b40>
   1a9a4:	add	r3, sp, #120	; 0x78
   1a9a8:	mov	r1, r0
   1a9ac:	str	r3, [sp]
   1a9b0:	mov	r2, r4
   1a9b4:	add	r3, sp, #116	; 0x74
   1a9b8:	mov	r0, r6
   1a9bc:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1a9c0:	cmp	r5, r0
   1a9c4:	mov	r1, r0
   1a9c8:	beq	1ad1c <_start@@Base+0x5b40>
   1a9cc:	ldr	r3, [sp, #116]	; 0x74
   1a9d0:	cmp	r3, sl
   1a9d4:	bne	1aea4 <_start@@Base+0x5cc8>
   1a9d8:	ldrd	r2, [sp, #120]	; 0x78
   1a9dc:	ldr	r8, [pc, #180]	; 1aa98 <_start@@Base+0x58bc>
   1a9e0:	mov	r9, #0
   1a9e4:	cmp	r3, r9
   1a9e8:	cmpeq	r2, r8
   1a9ec:	uxthls	r2, r2
   1a9f0:	bhi	1af18 <_start@@Base+0x5d3c>
   1a9f4:	ldr	r3, [sp, #48]	; 0x30
   1a9f8:	strh	r2, [r3]
   1a9fc:	b	1a764 <_start@@Base+0x5588>
   1aa00:	ldr	r3, [r5, #20]
   1aa04:	cmp	r3, #0
   1aa08:	beq	1aecc <_start@@Base+0x5cf0>
   1aa0c:	mov	r1, r8
   1aa10:	mov	r3, #33	; 0x21
   1aa14:	mov	r2, r4
   1aa18:	mov	r0, r5
   1aa1c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1aa20:	mov	r1, r0
   1aa24:	b	1a668 <_start@@Base+0x548c>
   1aa28:	mov	r1, #1
   1aa2c:	ldr	r0, [r0]
   1aa30:	bl	27a48 <flatcc_builder_start_table@@Base>
   1aa34:	cmp	r0, #0
   1aa38:	bne	1aa0c <_start@@Base+0x5830>
   1aa3c:	add	r9, sp, #108	; 0x6c
   1aa40:	mov	r1, r8
   1aa44:	mov	r3, r9
   1aa48:	mov	r2, r4
   1aa4c:	mov	r0, r5
   1aa50:	bl	17c8c <_start@@Base+0x2ab0>
   1aa54:	ldr	r3, [sp, #108]	; 0x6c
   1aa58:	cmp	r3, #0
   1aa5c:	mov	r8, r0
   1aa60:	beq	1aa00 <_start@@Base+0x5824>
   1aa64:	ldr	r3, [pc, #48]	; 1aa9c <_start@@Base+0x58c0>
   1aa68:	mov	fp, #0
   1aa6c:	add	r3, pc, r3
   1aa70:	add	r3, r3, #92	; 0x5c
   1aa74:	str	r3, [sp, #24]
   1aa78:	str	fp, [sp, #16]
   1aa7c:	b	1ac44 <_start@@Base+0x5a68>
   1aa80:	andeq	r0, r0, r0
   1aa84:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1aa88:	svcpl	0x006c656e
   1aa8c:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1aa90:	ldrdeq	r3, [r2], -r8
   1aa94:	andeq	r9, r3, r0, lsl #19
   1aa98:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1aa9c:	andeq	r9, r3, r4, lsl r6
   1aaa0:	ldrb	r2, [r8, #7]
   1aaa4:	mov	r3, #0
   1aaa8:	ldrb	r0, [r8, #6]
   1aaac:	lsr	ip, r0, #24
   1aab0:	lsl	r1, r0, #8
   1aab4:	str	ip, [sp, #92]	; 0x5c
   1aab8:	str	r1, [sp, #88]	; 0x58
   1aabc:	ldrd	r0, [sp, #88]	; 0x58
   1aac0:	orr	r0, r0, r2
   1aac4:	orr	r1, r1, r3
   1aac8:	mov	r2, r0
   1aacc:	mov	r3, r1
   1aad0:	ldrb	r0, [r8, #5]
   1aad4:	lsr	ip, r0, #16
   1aad8:	lsl	r1, r0, #16
   1aadc:	str	ip, [sp, #76]	; 0x4c
   1aae0:	str	r1, [sp, #72]	; 0x48
   1aae4:	ldrd	r0, [sp, #72]	; 0x48
   1aae8:	orr	r0, r0, r2
   1aaec:	orr	r1, r1, r3
   1aaf0:	mov	r2, r0
   1aaf4:	mov	r3, r1
   1aaf8:	ldrb	r0, [r8, #4]
   1aafc:	lsr	ip, r0, #8
   1ab00:	lsl	r1, r0, #24
   1ab04:	str	ip, [sp, #52]	; 0x34
   1ab08:	str	r1, [sp, #48]	; 0x30
   1ab0c:	ldrd	r0, [sp, #48]	; 0x30
   1ab10:	orr	r0, r0, r2
   1ab14:	orr	r1, r1, r3
   1ab18:	mov	r2, r0
   1ab1c:	mov	r3, r1
   1ab20:	ldrb	r1, [r8, #3]
   1ab24:	str	r1, [sp, #60]	; 0x3c
   1ab28:	mov	r1, #0
   1ab2c:	str	r1, [sp, #56]	; 0x38
   1ab30:	ldrd	r0, [sp, #56]	; 0x38
   1ab34:	orr	r0, r0, r2
   1ab38:	orr	r1, r1, r3
   1ab3c:	mov	r2, r0
   1ab40:	mov	r3, r1
   1ab44:	ldrb	r0, [r8, #2]
   1ab48:	lsl	r1, r0, #8
   1ab4c:	str	r1, [sp, #36]	; 0x24
   1ab50:	mov	r1, #0
   1ab54:	str	r1, [sp, #32]
   1ab58:	ldrd	r0, [sp, #32]
   1ab5c:	orr	r0, r0, r2
   1ab60:	orr	r1, r1, r3
   1ab64:	mov	r2, r0
   1ab68:	mov	r3, r1
   1ab6c:	ldrb	r0, [r8, #1]
   1ab70:	mov	sl, #0
   1ab74:	orr	r2, r2, sl
   1ab78:	lsl	fp, r0, #16
   1ab7c:	orr	r3, r3, fp
   1ab80:	ldrb	r0, [r8]
   1ab84:	mov	r6, #0
   1ab88:	orr	r2, r2, r6
   1ab8c:	lsl	r7, r0, #24
   1ab90:	add	r1, pc, #976	; 0x3d0
   1ab94:	ldrd	r0, [r1]
   1ab98:	orr	r3, r3, r7
   1ab9c:	cmp	r3, r1
   1aba0:	cmpeq	r2, r0
   1aba4:	bne	1ac0c <_start@@Base+0x5a30>
   1aba8:	add	r3, r8, #8
   1abac:	mov	r0, r3
   1abb0:	mov	r1, r4
   1abb4:	str	r3, [sp, #8]
   1abb8:	bl	15308 <_start@@Base+0x12c>
   1abbc:	add	r3, pc, #940	; 0x3ac
   1abc0:	ldrd	r2, [r3]
   1abc4:	cmp	r1, r3
   1abc8:	cmpeq	r0, r2
   1abcc:	ldr	r3, [sp, #8]
   1abd0:	bne	1ad04 <_start@@Base+0x5b28>
   1abd4:	add	r8, r8, #16
   1abd8:	mov	r0, r8
   1abdc:	mov	r1, r4
   1abe0:	bl	15308 <_start@@Base+0x12c>
   1abe4:	add	r3, pc, #908	; 0x38c
   1abe8:	ldrd	r2, [r3]
   1abec:	mov	r0, #0
   1abf0:	bic	r1, r1, #255	; 0xff
   1abf4:	cmp	r1, r3
   1abf8:	cmpeq	r0, r2
   1abfc:	bne	1ac0c <_start@@Base+0x5a30>
   1ac00:	sub	r3, r4, r8
   1ac04:	cmp	r3, #3
   1ac08:	bgt	1ad9c <_start@@Base+0x5bc0>
   1ac0c:	mov	r1, r8
   1ac10:	mov	r2, r4
   1ac14:	mov	r0, r5
   1ac18:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ac1c:	mov	r8, r0
   1ac20:	mov	r1, r8
   1ac24:	mov	r3, r9
   1ac28:	mov	r2, r4
   1ac2c:	mov	r0, r5
   1ac30:	bl	19b94 <_start@@Base+0x49b8>
   1ac34:	ldr	r3, [sp, #108]	; 0x6c
   1ac38:	cmp	r3, #0
   1ac3c:	mov	r8, r0
   1ac40:	beq	1aa00 <_start@@Base+0x5824>
   1ac44:	cmp	r4, r8
   1ac48:	beq	1ac0c <_start@@Base+0x5a30>
   1ac4c:	ldrb	r3, [r8]
   1ac50:	cmp	r3, #34	; 0x22
   1ac54:	addeq	r8, r8, #1
   1ac58:	beq	1ac74 <_start@@Base+0x5a98>
   1ac5c:	mov	r1, r8
   1ac60:	mov	r3, #5
   1ac64:	mov	r2, r4
   1ac68:	mov	r0, r5
   1ac6c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1ac70:	mov	r8, r0
   1ac74:	sub	r3, r4, r8
   1ac78:	cmp	r3, #8
   1ac7c:	bhi	1aaa0 <_start@@Base+0x58c4>
   1ac80:	sub	r3, r3, #1
   1ac84:	cmp	r3, #7
   1ac88:	addls	pc, pc, r3, lsl #2
   1ac8c:	b	1ac0c <_start@@Base+0x5a30>
   1ac90:	b	1acf8 <_start@@Base+0x5b1c>
   1ac94:	b	1acec <_start@@Base+0x5b10>
   1ac98:	b	1ace0 <_start@@Base+0x5b04>
   1ac9c:	b	1acd4 <_start@@Base+0x5af8>
   1aca0:	b	1acc8 <_start@@Base+0x5aec>
   1aca4:	b	1acbc <_start@@Base+0x5ae0>
   1aca8:	b	1acb0 <_start@@Base+0x5ad4>
   1acac:	b	1aaa0 <_start@@Base+0x58c4>
   1acb0:	ldr	r2, [sp, #16]
   1acb4:	mov	r3, #0
   1acb8:	b	1aaa8 <_start@@Base+0x58cc>
   1acbc:	ldr	r2, [sp, #16]
   1acc0:	mov	r3, #0
   1acc4:	b	1aad0 <_start@@Base+0x58f4>
   1acc8:	ldr	r2, [sp, #16]
   1accc:	mov	r3, #0
   1acd0:	b	1aaf8 <_start@@Base+0x591c>
   1acd4:	ldr	r2, [sp, #16]
   1acd8:	mov	r3, #0
   1acdc:	b	1ab20 <_start@@Base+0x5944>
   1ace0:	ldr	r2, [sp, #16]
   1ace4:	mov	r3, #0
   1ace8:	b	1ab44 <_start@@Base+0x5968>
   1acec:	ldr	r2, [sp, #16]
   1acf0:	mov	r3, #0
   1acf4:	b	1ab6c <_start@@Base+0x5990>
   1acf8:	ldr	r2, [sp, #16]
   1acfc:	mov	r3, #0
   1ad00:	b	1ab80 <_start@@Base+0x59a4>
   1ad04:	mov	r1, r3
   1ad08:	mov	r2, r4
   1ad0c:	mov	r0, r5
   1ad10:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ad14:	mov	r8, r0
   1ad18:	b	1ac20 <_start@@Base+0x5a44>
   1ad1c:	ldr	r5, [sp, #56]	; 0x38
   1ad20:	add	r3, sp, #108	; 0x6c
   1ad24:	str	r3, [sp]
   1ad28:	mov	r1, r5
   1ad2c:	ldr	r3, [sp, #72]	; 0x48
   1ad30:	mov	r2, r4
   1ad34:	mov	r0, r6
   1ad38:	bl	181e0 <_start@@Base+0x3004>
   1ad3c:	cmp	r4, r0
   1ad40:	cmpne	r0, r5
   1ad44:	mov	r1, r0
   1ad48:	bne	1aec4 <_start@@Base+0x5ce8>
   1ad4c:	mov	r3, #33	; 0x21
   1ad50:	mov	r2, r4
   1ad54:	mov	r0, r6
   1ad58:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1ad5c:	mov	r5, r6
   1ad60:	mov	r1, r0
   1ad64:	cmp	r4, r1
   1ad68:	beq	1aa10 <_start@@Base+0x5834>
   1ad6c:	ldr	r0, [r5]
   1ad70:	str	r1, [sp, #8]
   1ad74:	bl	26eb4 <flatcc_builder_end_struct@@Base>
   1ad78:	ldr	r3, [sp, #168]	; 0xa8
   1ad7c:	ldr	r1, [sp, #8]
   1ad80:	cmp	r0, #0
   1ad84:	str	r0, [r3]
   1ad88:	beq	1aa10 <_start@@Base+0x5834>
   1ad8c:	b	1a5f0 <_start@@Base+0x5414>
   1ad90:	mov	r1, r0
   1ad94:	mov	r5, r6
   1ad98:	b	1ad64 <_start@@Base+0x5b88>
   1ad9c:	mov	r1, r8
   1ada0:	mov	r3, #3
   1ada4:	mov	r2, r4
   1ada8:	mov	r0, r5
   1adac:	bl	18f38 <_start@@Base+0x3d5c>
   1adb0:	cmp	r8, r0
   1adb4:	mov	r1, r0
   1adb8:	str	r0, [sp, #8]
   1adbc:	beq	1ac0c <_start@@Base+0x5a30>
   1adc0:	ldr	r3, [sp, #16]
   1adc4:	cmp	r4, r0
   1adc8:	str	r6, [sp, #112]	; 0x70
   1adcc:	str	r3, [sp, #120]	; 0x78
   1add0:	str	r6, [sp, #124]	; 0x7c
   1add4:	str	r6, [sp, #116]	; 0x74
   1add8:	beq	1af34 <_start@@Base+0x5d58>
   1addc:	add	r3, sp, #120	; 0x78
   1ade0:	str	r3, [sp]
   1ade4:	mov	r2, r4
   1ade8:	add	r3, sp, #116	; 0x74
   1adec:	mov	r0, r5
   1adf0:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1adf4:	ldr	r3, [sp, #8]
   1adf8:	cmp	r3, r0
   1adfc:	mov	r8, r0
   1ae00:	beq	1af30 <_start@@Base+0x5d54>
   1ae04:	ldr	r1, [sp, #116]	; 0x74
   1ae08:	ldrd	r2, [sp, #120]	; 0x78
   1ae0c:	cmp	r1, r6
   1ae10:	beq	1ae70 <_start@@Base+0x5c94>
   1ae14:	cmp	r3, #0
   1ae18:	cmpeq	r2, #-2147483648	; 0x80000000
   1ae1c:	rsbls	r2, r2, #0
   1ae20:	strls	r2, [sp, #112]	; 0x70
   1ae24:	bhi	1aeec <_start@@Base+0x5d10>
   1ae28:	cmp	r2, #0
   1ae2c:	bne	1ae3c <_start@@Base+0x5c60>
   1ae30:	ldr	r3, [r5, #8]
   1ae34:	tst	r3, #2
   1ae38:	beq	1ac20 <_start@@Base+0x5a44>
   1ae3c:	mov	r3, #4
   1ae40:	mov	r2, r3
   1ae44:	mov	r1, #0
   1ae48:	ldr	r0, [r5]
   1ae4c:	bl	29488 <flatcc_builder_table_add@@Base>
   1ae50:	cmp	r0, #0
   1ae54:	beq	1aa0c <_start@@Base+0x5830>
   1ae58:	ldr	r3, [sp, #112]	; 0x70
   1ae5c:	str	r3, [r0]
   1ae60:	b	1ac20 <_start@@Base+0x5a44>
   1ae64:	bl	2de74 <flatcc_json_parser_generic_json@@Base>
   1ae68:	mov	r1, r0
   1ae6c:	b	1a5f0 <_start@@Base+0x5414>
   1ae70:	mov	r1, #0
   1ae74:	cmp	r3, r1
   1ae78:	mvn	r0, #-2147483648	; 0x80000000
   1ae7c:	cmpeq	r2, r0
   1ae80:	strls	r2, [sp, #112]	; 0x70
   1ae84:	bls	1ae28 <_start@@Base+0x5c4c>
   1ae88:	mov	r1, r8
   1ae8c:	mov	r3, #7
   1ae90:	mov	r2, r4
   1ae94:	mov	r0, r5
   1ae98:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1ae9c:	mov	r8, r0
   1aea0:	b	1af04 <_start@@Base+0x5d28>
   1aea4:	mov	r3, #8
   1aea8:	mov	r2, r4
   1aeac:	mov	r0, r6
   1aeb0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1aeb4:	mov	r1, r0
   1aeb8:	ldr	r3, [sp, #56]	; 0x38
   1aebc:	cmp	r3, r1
   1aec0:	beq	1ad1c <_start@@Base+0x5b40>
   1aec4:	ldrh	r2, [sp, #108]	; 0x6c
   1aec8:	b	1a9f4 <_start@@Base+0x5818>
   1aecc:	ldr	r0, [r5]
   1aed0:	bl	2843c <flatcc_builder_end_table@@Base>
   1aed4:	ldr	r3, [sp, #168]	; 0xa8
   1aed8:	cmp	r0, #0
   1aedc:	str	r0, [r3]
   1aee0:	movne	r1, r8
   1aee4:	beq	1aa0c <_start@@Base+0x5830>
   1aee8:	b	1a668 <_start@@Base+0x548c>
   1aeec:	mov	r1, r0
   1aef0:	mov	r3, #8
   1aef4:	mov	r2, r4
   1aef8:	mov	r0, r5
   1aefc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1af00:	mov	r8, r0
   1af04:	ldr	r3, [sp, #8]
   1af08:	cmp	r3, r8
   1af0c:	beq	1af34 <_start@@Base+0x5d58>
   1af10:	ldr	r2, [sp, #112]	; 0x70
   1af14:	b	1ae28 <_start@@Base+0x5c4c>
   1af18:	mov	r3, #7
   1af1c:	mov	r2, r4
   1af20:	mov	r0, r6
   1af24:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1af28:	mov	r1, r0
   1af2c:	b	1aeb8 <_start@@Base+0x5cdc>
   1af30:	str	r0, [sp, #8]
   1af34:	add	r3, sp, #112	; 0x70
   1af38:	str	r3, [sp]
   1af3c:	mov	r2, r4
   1af40:	ldr	r3, [sp, #24]
   1af44:	ldr	r1, [sp, #8]
   1af48:	mov	r0, r5
   1af4c:	bl	18560 <_start@@Base+0x3384>
   1af50:	ldr	r3, [sp, #8]
   1af54:	cmp	r4, r0
   1af58:	cmpne	r0, r3
   1af5c:	mov	r8, r0
   1af60:	bne	1af10 <_start@@Base+0x5d34>
   1af64:	b	1aa0c <_start@@Base+0x5830>
   1af68:	ldrbvs	r6, [pc], #-372	; 1af70 <_start@@Base+0x5d94>
   1af6c:	cmnvc	r7, #456	; 0x1c8
   1af70:	svcpl	0x0064616d
   1af74:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1af78:	andeq	r0, r0, r0
   1af7c:	cmnvs	r7, r0, lsl #10
   1af80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af84:	sub	sp, sp, #100	; 0x64
   1af88:	cmp	r1, r2
   1af8c:	mov	r5, r2
   1af90:	mov	r6, r0
   1af94:	str	r3, [sp, #64]	; 0x40
   1af98:	beq	1afa8 <_start@@Base+0x5dcc>
   1af9c:	ldrb	r3, [r1]
   1afa0:	cmp	r3, #123	; 0x7b
   1afa4:	beq	1afc8 <_start@@Base+0x5dec>
   1afa8:	mov	r2, r5
   1afac:	mov	r0, r6
   1afb0:	mov	r3, #21
   1afb4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1afb8:	mov	r5, r0
   1afbc:	mov	r0, r5
   1afc0:	add	sp, sp, #100	; 0x64
   1afc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afc8:	add	r4, r1, #1
   1afcc:	sub	r3, r2, r4
   1afd0:	cmp	r3, #1
   1afd4:	ble	1afe8 <_start@@Base+0x5e0c>
   1afd8:	ldrb	r3, [r1, #1]
   1afdc:	cmp	r3, #32
   1afe0:	bhi	1affc <_start@@Base+0x5e20>
   1afe4:	beq	1b6bc <_start@@Base+0x64e0>
   1afe8:	mov	r1, r4
   1afec:	mov	r2, r5
   1aff0:	mov	r0, r6
   1aff4:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1aff8:	mov	r4, r0
   1affc:	cmp	r5, r4
   1b000:	beq	1b010 <_start@@Base+0x5e34>
   1b004:	ldrb	r3, [r4]
   1b008:	cmp	r3, #125	; 0x7d
   1b00c:	beq	1b6d0 <_start@@Base+0x64f4>
   1b010:	ldr	r2, [pc, #1744]	; 1b6e8 <_start@@Base+0x650c>
   1b014:	ldr	r3, [pc, #1744]	; 1b6ec <_start@@Base+0x6510>
   1b018:	add	r2, pc, r2
   1b01c:	add	r3, pc, r3
   1b020:	mov	r7, #0
   1b024:	add	r2, r2, #128	; 0x80
   1b028:	add	r3, r3, #116	; 0x74
   1b02c:	str	r2, [sp, #72]	; 0x48
   1b030:	str	r3, [sp, #76]	; 0x4c
   1b034:	strd	r8, [sp, #32]
   1b038:	cmp	r5, r4
   1b03c:	beq	1b160 <_start@@Base+0x5f84>
   1b040:	ldrb	r3, [r4]
   1b044:	cmp	r3, #34	; 0x22
   1b048:	bne	1b1dc <_start@@Base+0x6000>
   1b04c:	add	r4, r4, #1
   1b050:	sub	ip, r5, r4
   1b054:	cmp	ip, #8
   1b058:	bls	1b200 <_start@@Base+0x6024>
   1b05c:	ldrb	r2, [r4, #6]
   1b060:	mov	r9, #0
   1b064:	lsr	r1, r2, #24
   1b068:	lsl	r3, r2, #8
   1b06c:	str	r1, [sp, #60]	; 0x3c
   1b070:	str	r3, [sp, #56]	; 0x38
   1b074:	ldrd	r2, [sp, #56]	; 0x38
   1b078:	orr	r3, r3, r9
   1b07c:	mov	r9, r3
   1b080:	ldrb	r2, [r4, #5]
   1b084:	lsr	r1, r2, #16
   1b088:	lsl	r3, r2, #16
   1b08c:	str	r1, [sp, #52]	; 0x34
   1b090:	str	r3, [sp, #48]	; 0x30
   1b094:	ldrd	r2, [sp, #48]	; 0x30
   1b098:	orr	r3, r3, r9
   1b09c:	mov	r9, r3
   1b0a0:	ldrb	r2, [r4, #4]
   1b0a4:	lsr	r1, r2, #8
   1b0a8:	lsl	r3, r2, #24
   1b0ac:	str	r1, [sp, #28]
   1b0b0:	str	r3, [sp, #24]
   1b0b4:	ldrd	r2, [sp, #24]
   1b0b8:	orr	r3, r3, r9
   1b0bc:	mov	r9, r3
   1b0c0:	ldrb	r3, [r4, #3]
   1b0c4:	str	r3, [sp, #44]	; 0x2c
   1b0c8:	mov	r3, #0
   1b0cc:	str	r3, [sp, #40]	; 0x28
   1b0d0:	ldrd	r2, [sp, #40]	; 0x28
   1b0d4:	orr	r3, r3, r9
   1b0d8:	mov	r9, r3
   1b0dc:	ldrb	r2, [r4, #2]
   1b0e0:	lsl	r3, r2, #8
   1b0e4:	str	r3, [sp, #20]
   1b0e8:	mov	r3, #0
   1b0ec:	str	r3, [sp, #16]
   1b0f0:	ldrd	r2, [sp, #16]
   1b0f4:	orr	r3, r3, r9
   1b0f8:	mov	r9, r3
   1b0fc:	ldrb	r2, [r4]
   1b100:	ldrb	r0, [r4, #1]
   1b104:	mov	sl, #0
   1b108:	str	sl, [sp, #8]
   1b10c:	lsl	r3, r2, #24
   1b110:	str	r3, [sp, #12]
   1b114:	ldrd	r2, [sp, #8]
   1b118:	lsl	fp, r0, #16
   1b11c:	orr	r9, r9, fp
   1b120:	orr	r3, r3, r9
   1b124:	and	r3, r3, #-16777216	; 0xff000000
   1b128:	mov	r2, #0
   1b12c:	cmp	r3, #1644167168	; 0x62000000
   1b130:	cmpeq	r2, #0
   1b134:	strd	r2, [sp, #32]
   1b138:	beq	1b280 <_start@@Base+0x60a4>
   1b13c:	ldrd	r2, [sp, #32]
   1b140:	cmp	r3, #1627389952	; 0x61000000
   1b144:	cmpeq	r2, #0
   1b148:	bne	1b160 <_start@@Base+0x5f84>
   1b14c:	cmp	ip, #1
   1b150:	ble	1b160 <_start@@Base+0x5f84>
   1b154:	ldrb	r3, [r4, #1]
   1b158:	cmp	r3, #34	; 0x22
   1b15c:	beq	1b464 <_start@@Base+0x6288>
   1b160:	mov	r1, r4
   1b164:	mov	r2, r5
   1b168:	mov	r0, r6
   1b16c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1b170:	sub	r3, r5, r0
   1b174:	cmp	r3, #1
   1b178:	ble	1b18c <_start@@Base+0x5fb0>
   1b17c:	ldrb	r3, [r0]
   1b180:	cmp	r3, #32
   1b184:	bhi	1b19c <_start@@Base+0x5fc0>
   1b188:	beq	1b398 <_start@@Base+0x61bc>
   1b18c:	mov	r1, r0
   1b190:	mov	r2, r5
   1b194:	mov	r0, r6
   1b198:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b19c:	cmp	r5, r0
   1b1a0:	beq	1afbc <_start@@Base+0x5de0>
   1b1a4:	ldrb	r3, [r0]
   1b1a8:	cmp	r3, #44	; 0x2c
   1b1ac:	beq	1b3ac <_start@@Base+0x61d0>
   1b1b0:	cmp	r3, #125	; 0x7d
   1b1b4:	beq	1b364 <_start@@Base+0x6188>
   1b1b8:	mov	r2, r5
   1b1bc:	mov	r1, r0
   1b1c0:	mov	r3, #10
   1b1c4:	mov	r0, r6
   1b1c8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b1cc:	mov	r5, r0
   1b1d0:	mov	r0, r5
   1b1d4:	add	sp, sp, #100	; 0x64
   1b1d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1dc:	mov	r1, r4
   1b1e0:	mov	r3, #5
   1b1e4:	mov	r2, r5
   1b1e8:	mov	r0, r6
   1b1ec:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b1f0:	sub	ip, r5, r0
   1b1f4:	cmp	ip, #8
   1b1f8:	mov	r4, r0
   1b1fc:	bhi	1b05c <_start@@Base+0x5e80>
   1b200:	sub	r3, ip, #1
   1b204:	cmp	r3, #7
   1b208:	addls	pc, pc, r3, lsl #2
   1b20c:	b	1b160 <_start@@Base+0x5f84>
   1b210:	b	1b230 <_start@@Base+0x6054>
   1b214:	b	1b278 <_start@@Base+0x609c>
   1b218:	b	1b270 <_start@@Base+0x6094>
   1b21c:	b	1b268 <_start@@Base+0x608c>
   1b220:	b	1b260 <_start@@Base+0x6084>
   1b224:	b	1b258 <_start@@Base+0x607c>
   1b228:	b	1b05c <_start@@Base+0x5e80>
   1b22c:	b	1b05c <_start@@Base+0x5e80>
   1b230:	ldrb	r2, [r4]
   1b234:	lsl	r3, r2, #24
   1b238:	str	r3, [sp, #36]	; 0x24
   1b23c:	mov	r3, #0
   1b240:	str	r3, [sp, #32]
   1b244:	ldrd	r2, [sp, #32]
   1b248:	cmp	r3, #1644167168	; 0x62000000
   1b24c:	cmpeq	r2, #0
   1b250:	bne	1b13c <_start@@Base+0x5f60>
   1b254:	b	1b160 <_start@@Base+0x5f84>
   1b258:	mov	r9, #0
   1b25c:	b	1b080 <_start@@Base+0x5ea4>
   1b260:	mov	r9, #0
   1b264:	b	1b0a0 <_start@@Base+0x5ec4>
   1b268:	mov	r9, #0
   1b26c:	b	1b0c0 <_start@@Base+0x5ee4>
   1b270:	mov	r9, #0
   1b274:	b	1b0dc <_start@@Base+0x5f00>
   1b278:	mov	r9, #0
   1b27c:	b	1b0fc <_start@@Base+0x5f20>
   1b280:	cmp	ip, #1
   1b284:	ble	1b160 <_start@@Base+0x5f84>
   1b288:	ldrb	r3, [r4, #1]
   1b28c:	cmp	r3, #34	; 0x22
   1b290:	bne	1b160 <_start@@Base+0x5f84>
   1b294:	add	r1, r4, #2
   1b298:	sub	r3, r5, r1
   1b29c:	cmp	r3, #1
   1b2a0:	ble	1b2b4 <_start@@Base+0x60d8>
   1b2a4:	ldrb	r3, [r4, #2]
   1b2a8:	cmp	r3, #32
   1b2ac:	bhi	1b2c4 <_start@@Base+0x60e8>
   1b2b0:	beq	1b678 <_start@@Base+0x649c>
   1b2b4:	mov	r2, r5
   1b2b8:	mov	r0, r6
   1b2bc:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b2c0:	mov	r1, r0
   1b2c4:	cmp	r5, r1
   1b2c8:	beq	1b2d8 <_start@@Base+0x60fc>
   1b2cc:	ldrb	r3, [r1]
   1b2d0:	cmp	r3, #58	; 0x3a
   1b2d4:	beq	1b6a4 <_start@@Base+0x64c8>
   1b2d8:	mov	r3, #4
   1b2dc:	mov	r2, r5
   1b2e0:	mov	r0, r6
   1b2e4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b2e8:	mov	r8, r0
   1b2ec:	cmp	r4, r8
   1b2f0:	mov	r1, r8
   1b2f4:	beq	1b160 <_start@@Base+0x5f84>
   1b2f8:	mov	r2, #0
   1b2fc:	mov	r3, #0
   1b300:	cmp	r5, r8
   1b304:	strb	r7, [sp, #82]	; 0x52
   1b308:	str	r7, [sp, #84]	; 0x54
   1b30c:	strd	r2, [sp, #88]	; 0x58
   1b310:	beq	1b638 <_start@@Base+0x645c>
   1b314:	add	r3, sp, #88	; 0x58
   1b318:	str	r3, [sp]
   1b31c:	mov	r2, r5
   1b320:	add	r3, sp, #84	; 0x54
   1b324:	mov	r0, r6
   1b328:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1b32c:	cmp	r8, r0
   1b330:	beq	1b638 <_start@@Base+0x645c>
   1b334:	ldr	r1, [sp, #84]	; 0x54
   1b338:	ldrd	r2, [sp, #88]	; 0x58
   1b33c:	cmp	r1, #0
   1b340:	beq	1b430 <_start@@Base+0x6254>
   1b344:	cmp	r3, #0
   1b348:	cmpeq	r2, #128	; 0x80
   1b34c:	rsbls	r2, r2, #0
   1b350:	sxtbls	r2, r2
   1b354:	bhi	1b5a4 <_start@@Base+0x63c8>
   1b358:	ldr	r3, [sp, #64]	; 0x40
   1b35c:	strb	r2, [r3, #2]
   1b360:	b	1b170 <_start@@Base+0x5f94>
   1b364:	add	r1, r0, #1
   1b368:	sub	r3, r5, r1
   1b36c:	cmp	r3, #1
   1b370:	ble	1b384 <_start@@Base+0x61a8>
   1b374:	ldrb	r3, [r0, #1]
   1b378:	cmp	r3, #32
   1b37c:	bhi	1b428 <_start@@Base+0x624c>
   1b380:	beq	1b578 <_start@@Base+0x639c>
   1b384:	mov	r2, r5
   1b388:	mov	r0, r6
   1b38c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b390:	mov	r5, r0
   1b394:	b	1afbc <_start@@Base+0x5de0>
   1b398:	ldrb	r3, [r0, #1]
   1b39c:	cmp	r3, #32
   1b3a0:	addhi	r0, r0, #1
   1b3a4:	bls	1b18c <_start@@Base+0x5fb0>
   1b3a8:	b	1b19c <_start@@Base+0x5fc0>
   1b3ac:	add	r4, r0, #1
   1b3b0:	sub	r3, r5, r4
   1b3b4:	cmp	r3, #1
   1b3b8:	ble	1b3cc <_start@@Base+0x61f0>
   1b3bc:	ldrb	r3, [r0, #1]
   1b3c0:	cmp	r3, #32
   1b3c4:	bhi	1b3e0 <_start@@Base+0x6204>
   1b3c8:	beq	1b604 <_start@@Base+0x6428>
   1b3cc:	mov	r1, r4
   1b3d0:	mov	r2, r5
   1b3d4:	mov	r0, r6
   1b3d8:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b3dc:	mov	r4, r0
   1b3e0:	cmp	r5, r4
   1b3e4:	beq	1b61c <_start@@Base+0x6440>
   1b3e8:	ldrb	r3, [r4]
   1b3ec:	cmp	r3, #125	; 0x7d
   1b3f0:	bne	1b038 <_start@@Base+0x5e5c>
   1b3f4:	add	r1, r4, #1
   1b3f8:	sub	r3, r5, r1
   1b3fc:	cmp	r3, #1
   1b400:	ble	1b384 <_start@@Base+0x61a8>
   1b404:	ldrb	r3, [r4, #1]
   1b408:	cmp	r3, #32
   1b40c:	bhi	1b428 <_start@@Base+0x624c>
   1b410:	bne	1b384 <_start@@Base+0x61a8>
   1b414:	ldrb	r3, [r4, #2]
   1b418:	cmp	r3, #32
   1b41c:	addhi	r5, r4, #2
   1b420:	bls	1b384 <_start@@Base+0x61a8>
   1b424:	b	1afbc <_start@@Base+0x5de0>
   1b428:	mov	r5, r1
   1b42c:	b	1afbc <_start@@Base+0x5de0>
   1b430:	cmp	r3, #0
   1b434:	cmpeq	r2, #127	; 0x7f
   1b438:	sxtbls	r2, r2
   1b43c:	bls	1b358 <_start@@Base+0x617c>
   1b440:	mov	r1, r0
   1b444:	mov	r3, #7
   1b448:	mov	r2, r5
   1b44c:	mov	r0, r6
   1b450:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b454:	cmp	r8, r0
   1b458:	beq	1b638 <_start@@Base+0x645c>
   1b45c:	ldrsb	r2, [sp, #82]	; 0x52
   1b460:	b	1b358 <_start@@Base+0x617c>
   1b464:	add	r1, r4, #2
   1b468:	sub	r3, r5, r1
   1b46c:	cmp	r3, #1
   1b470:	ble	1b484 <_start@@Base+0x62a8>
   1b474:	ldrb	r3, [r4, #2]
   1b478:	cmp	r3, #32
   1b47c:	bhi	1b494 <_start@@Base+0x62b8>
   1b480:	beq	1b664 <_start@@Base+0x6488>
   1b484:	mov	r2, r5
   1b488:	mov	r0, r6
   1b48c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b490:	mov	r1, r0
   1b494:	cmp	r5, r1
   1b498:	beq	1b4a8 <_start@@Base+0x62cc>
   1b49c:	ldrb	r3, [r1]
   1b4a0:	cmp	r3, #58	; 0x3a
   1b4a4:	beq	1b68c <_start@@Base+0x64b0>
   1b4a8:	mov	r3, #4
   1b4ac:	mov	r2, r5
   1b4b0:	mov	r0, r6
   1b4b4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b4b8:	str	r0, [sp, #68]	; 0x44
   1b4bc:	ldr	r1, [sp, #68]	; 0x44
   1b4c0:	cmp	r4, r1
   1b4c4:	beq	1b160 <_start@@Base+0x5f84>
   1b4c8:	mov	r2, #0
   1b4cc:	mov	r3, #0
   1b4d0:	cmp	r5, r1
   1b4d4:	mov	r4, r1
   1b4d8:	strh	r7, [sp, #82]	; 0x52
   1b4dc:	str	r7, [sp, #84]	; 0x54
   1b4e0:	strd	r2, [sp, #88]	; 0x58
   1b4e4:	beq	1b5bc <_start@@Base+0x63e0>
   1b4e8:	add	r3, sp, #88	; 0x58
   1b4ec:	str	r3, [sp]
   1b4f0:	mov	r2, r5
   1b4f4:	add	r3, sp, #84	; 0x54
   1b4f8:	mov	r0, r6
   1b4fc:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1b500:	cmp	r4, r0
   1b504:	beq	1b5bc <_start@@Base+0x63e0>
   1b508:	ldr	r1, [sp, #84]	; 0x54
   1b50c:	ldrd	r2, [sp, #88]	; 0x58
   1b510:	cmp	r1, #0
   1b514:	beq	1b538 <_start@@Base+0x635c>
   1b518:	cmp	r3, #0
   1b51c:	cmpeq	r2, #32768	; 0x8000
   1b520:	rsbls	r2, r2, #0
   1b524:	sxthls	r2, r2
   1b528:	bhi	1b58c <_start@@Base+0x63b0>
   1b52c:	ldr	r3, [sp, #64]	; 0x40
   1b530:	strh	r2, [r3]
   1b534:	b	1b170 <_start@@Base+0x5f94>
   1b538:	ldr	r8, [pc, #432]	; 1b6f0 <_start@@Base+0x6514>
   1b53c:	mov	r9, #0
   1b540:	cmp	r3, r9
   1b544:	cmpeq	r2, r8
   1b548:	sxthls	r2, r2
   1b54c:	bls	1b52c <_start@@Base+0x6350>
   1b550:	mov	r1, r0
   1b554:	mov	r3, #7
   1b558:	mov	r2, r5
   1b55c:	mov	r0, r6
   1b560:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b564:	ldr	r3, [sp, #68]	; 0x44
   1b568:	cmp	r3, r0
   1b56c:	beq	1b5bc <_start@@Base+0x63e0>
   1b570:	ldrsh	r2, [sp, #82]	; 0x52
   1b574:	b	1b52c <_start@@Base+0x6350>
   1b578:	ldrb	r3, [r0, #2]
   1b57c:	cmp	r3, #32
   1b580:	addhi	r5, r0, #2
   1b584:	bls	1b384 <_start@@Base+0x61a8>
   1b588:	b	1afbc <_start@@Base+0x5de0>
   1b58c:	mov	r1, r0
   1b590:	mov	r3, #8
   1b594:	mov	r2, r5
   1b598:	mov	r0, r6
   1b59c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b5a0:	b	1b564 <_start@@Base+0x6388>
   1b5a4:	mov	r1, r0
   1b5a8:	mov	r3, #8
   1b5ac:	mov	r2, r5
   1b5b0:	mov	r0, r6
   1b5b4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b5b8:	b	1b454 <_start@@Base+0x6278>
   1b5bc:	ldr	r4, [sp, #68]	; 0x44
   1b5c0:	add	r3, sp, #82	; 0x52
   1b5c4:	str	r3, [sp]
   1b5c8:	mov	r2, r5
   1b5cc:	ldr	r3, [sp, #72]	; 0x48
   1b5d0:	mov	r1, r4
   1b5d4:	mov	r0, r6
   1b5d8:	bl	18734 <_start@@Base+0x3558>
   1b5dc:	cmp	r5, r0
   1b5e0:	cmpne	r0, r4
   1b5e4:	bne	1b570 <_start@@Base+0x6394>
   1b5e8:	mov	r2, r5
   1b5ec:	mov	r1, r0
   1b5f0:	mov	r3, #33	; 0x21
   1b5f4:	mov	r0, r6
   1b5f8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b5fc:	mov	r5, r0
   1b600:	b	1afbc <_start@@Base+0x5de0>
   1b604:	ldrb	r3, [r0, #2]
   1b608:	cmp	r3, #32
   1b60c:	addhi	r4, r0, #2
   1b610:	bls	1b3cc <_start@@Base+0x61f0>
   1b614:	cmp	r5, r4
   1b618:	bne	1b3e8 <_start@@Base+0x620c>
   1b61c:	mov	r2, r5
   1b620:	mov	r1, r5
   1b624:	mov	r0, r6
   1b628:	mov	r3, #10
   1b62c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b630:	mov	r5, r0
   1b634:	b	1afbc <_start@@Base+0x5de0>
   1b638:	add	r3, sp, #82	; 0x52
   1b63c:	str	r3, [sp]
   1b640:	mov	r2, r5
   1b644:	ldr	r3, [sp, #76]	; 0x4c
   1b648:	mov	r1, r8
   1b64c:	mov	r0, r6
   1b650:	bl	18910 <_start@@Base+0x3734>
   1b654:	cmp	r5, r0
   1b658:	cmpne	r0, r8
   1b65c:	bne	1b45c <_start@@Base+0x6280>
   1b660:	b	1b5e8 <_start@@Base+0x640c>
   1b664:	ldrb	r3, [r4, #3]
   1b668:	cmp	r3, #32
   1b66c:	addhi	r1, r4, #3
   1b670:	bls	1b484 <_start@@Base+0x62a8>
   1b674:	b	1b494 <_start@@Base+0x62b8>
   1b678:	ldrb	r3, [r4, #3]
   1b67c:	cmp	r3, #32
   1b680:	addhi	r1, r4, #3
   1b684:	bls	1b2b4 <_start@@Base+0x60d8>
   1b688:	b	1b2c4 <_start@@Base+0x60e8>
   1b68c:	add	r1, r1, #1
   1b690:	mov	r2, r5
   1b694:	mov	r0, r6
   1b698:	bl	16e38 <_start@@Base+0x1c5c>
   1b69c:	str	r0, [sp, #68]	; 0x44
   1b6a0:	b	1b4bc <_start@@Base+0x62e0>
   1b6a4:	add	r1, r1, #1
   1b6a8:	mov	r2, r5
   1b6ac:	mov	r0, r6
   1b6b0:	bl	16e38 <_start@@Base+0x1c5c>
   1b6b4:	mov	r8, r0
   1b6b8:	b	1b2ec <_start@@Base+0x6110>
   1b6bc:	ldrb	r3, [r1, #2]
   1b6c0:	cmp	r3, #32
   1b6c4:	addhi	r4, r1, #2
   1b6c8:	bls	1afe8 <_start@@Base+0x5e0c>
   1b6cc:	b	1affc <_start@@Base+0x5e20>
   1b6d0:	mov	r2, r5
   1b6d4:	add	r1, r4, #1
   1b6d8:	mov	r0, r6
   1b6dc:	bl	16e38 <_start@@Base+0x1c5c>
   1b6e0:	mov	r5, r0
   1b6e4:	b	1afbc <_start@@Base+0x5de0>
   1b6e8:	andeq	r9, r3, r8, rrx
   1b6ec:	andeq	r9, r3, r4, rrx
   1b6f0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1b6f4:	push	{r4, r5, r6, r7, r8, lr}
   1b6f8:	mov	r7, r3
   1b6fc:	mov	r3, #0
   1b700:	mov	r5, r0
   1b704:	mov	r6, r1
   1b708:	str	r3, [r7]
   1b70c:	mov	r1, r3
   1b710:	ldr	r0, [r0]
   1b714:	mov	r4, r2
   1b718:	bl	27a48 <flatcc_builder_start_table@@Base>
   1b71c:	cmp	r0, #0
   1b720:	bne	1b75c <_start@@Base+0x6580>
   1b724:	cmp	r6, r4
   1b728:	beq	1b738 <_start@@Base+0x655c>
   1b72c:	ldrb	r3, [r6]
   1b730:	cmp	r3, #123	; 0x7b
   1b734:	beq	1b790 <_start@@Base+0x65b4>
   1b738:	mov	r1, r6
   1b73c:	mov	r3, #21
   1b740:	mov	r2, r4
   1b744:	mov	r0, r5
   1b748:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b74c:	mov	r6, r0
   1b750:	ldr	r3, [r5, #20]
   1b754:	cmp	r3, #0
   1b758:	beq	1b774 <_start@@Base+0x6598>
   1b75c:	mov	r2, r4
   1b760:	mov	r1, r6
   1b764:	mov	r0, r5
   1b768:	mov	r3, #33	; 0x21
   1b76c:	pop	{r4, r5, r6, r7, r8, lr}
   1b770:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   1b774:	ldr	r0, [r5]
   1b778:	bl	2843c <flatcc_builder_end_table@@Base>
   1b77c:	cmp	r0, #0
   1b780:	str	r0, [r7]
   1b784:	beq	1b75c <_start@@Base+0x6580>
   1b788:	mov	r0, r6
   1b78c:	pop	{r4, r5, r6, r7, r8, pc}
   1b790:	add	r1, r6, #1
   1b794:	sub	r3, r4, r1
   1b798:	cmp	r3, #1
   1b79c:	ble	1b7b0 <_start@@Base+0x65d4>
   1b7a0:	ldrb	r3, [r6, #1]
   1b7a4:	cmp	r3, #32
   1b7a8:	bhi	1b7c0 <_start@@Base+0x65e4>
   1b7ac:	beq	1b950 <_start@@Base+0x6774>
   1b7b0:	mov	r2, r4
   1b7b4:	mov	r0, r5
   1b7b8:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b7bc:	mov	r1, r0
   1b7c0:	cmp	r4, r1
   1b7c4:	beq	1b7d4 <_start@@Base+0x65f8>
   1b7c8:	ldrb	r3, [r1]
   1b7cc:	cmp	r3, #125	; 0x7d
   1b7d0:	beq	1b910 <_start@@Base+0x6734>
   1b7d4:	mov	r6, #5
   1b7d8:	cmp	r4, r1
   1b7dc:	beq	1b804 <_start@@Base+0x6628>
   1b7e0:	ldrb	r3, [r1]
   1b7e4:	cmp	r3, #34	; 0x22
   1b7e8:	addeq	r1, r1, #1
   1b7ec:	beq	1b804 <_start@@Base+0x6628>
   1b7f0:	mov	r3, r6
   1b7f4:	mov	r2, r4
   1b7f8:	mov	r0, r5
   1b7fc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b800:	mov	r1, r0
   1b804:	mov	r2, r4
   1b808:	mov	r0, r5
   1b80c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1b810:	sub	r3, r4, r0
   1b814:	cmp	r3, #1
   1b818:	ble	1b82c <_start@@Base+0x6650>
   1b81c:	ldrb	r3, [r0]
   1b820:	cmp	r3, #32
   1b824:	bhi	1b83c <_start@@Base+0x6660>
   1b828:	beq	1b8ac <_start@@Base+0x66d0>
   1b82c:	mov	r1, r0
   1b830:	mov	r2, r4
   1b834:	mov	r0, r5
   1b838:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b83c:	cmp	r4, r0
   1b840:	beq	1b8c4 <_start@@Base+0x66e8>
   1b844:	ldrb	r3, [r0]
   1b848:	cmp	r3, #44	; 0x2c
   1b84c:	beq	1b8cc <_start@@Base+0x66f0>
   1b850:	cmp	r3, #125	; 0x7d
   1b854:	beq	1b874 <_start@@Base+0x6698>
   1b858:	mov	r1, r0
   1b85c:	mov	r3, #10
   1b860:	mov	r2, r4
   1b864:	mov	r0, r5
   1b868:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b86c:	mov	r6, r0
   1b870:	b	1b750 <_start@@Base+0x6574>
   1b874:	add	r6, r0, #1
   1b878:	sub	r3, r4, r6
   1b87c:	cmp	r3, #1
   1b880:	ble	1b894 <_start@@Base+0x66b8>
   1b884:	ldrb	r3, [r0, #1]
   1b888:	cmp	r3, #32
   1b88c:	bhi	1b750 <_start@@Base+0x6574>
   1b890:	beq	1b928 <_start@@Base+0x674c>
   1b894:	mov	r1, r6
   1b898:	mov	r2, r4
   1b89c:	mov	r0, r5
   1b8a0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b8a4:	mov	r6, r0
   1b8a8:	b	1b750 <_start@@Base+0x6574>
   1b8ac:	ldrb	r3, [r0, #1]
   1b8b0:	cmp	r3, #32
   1b8b4:	addhi	r0, r0, #1
   1b8b8:	bls	1b82c <_start@@Base+0x6650>
   1b8bc:	cmp	r4, r0
   1b8c0:	bne	1b844 <_start@@Base+0x6668>
   1b8c4:	mov	r6, r4
   1b8c8:	b	1b750 <_start@@Base+0x6574>
   1b8cc:	add	r1, r0, #1
   1b8d0:	sub	r3, r4, r1
   1b8d4:	cmp	r3, #1
   1b8d8:	ble	1b8ec <_start@@Base+0x6710>
   1b8dc:	ldrb	r3, [r0, #1]
   1b8e0:	cmp	r3, #32
   1b8e4:	bhi	1b8fc <_start@@Base+0x6720>
   1b8e8:	beq	1b93c <_start@@Base+0x6760>
   1b8ec:	mov	r2, r4
   1b8f0:	mov	r0, r5
   1b8f4:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   1b8f8:	mov	r1, r0
   1b8fc:	cmp	r4, r1
   1b900:	beq	1b964 <_start@@Base+0x6788>
   1b904:	ldrb	r3, [r1]
   1b908:	cmp	r3, #125	; 0x7d
   1b90c:	bne	1b7d8 <_start@@Base+0x65fc>
   1b910:	add	r1, r1, #1
   1b914:	mov	r2, r4
   1b918:	mov	r0, r5
   1b91c:	bl	16e38 <_start@@Base+0x1c5c>
   1b920:	mov	r6, r0
   1b924:	b	1b750 <_start@@Base+0x6574>
   1b928:	ldrb	r3, [r0, #2]
   1b92c:	cmp	r3, #32
   1b930:	addhi	r6, r0, #2
   1b934:	bls	1b894 <_start@@Base+0x66b8>
   1b938:	b	1b750 <_start@@Base+0x6574>
   1b93c:	ldrb	r3, [r0, #2]
   1b940:	cmp	r3, #32
   1b944:	addhi	r1, r0, #2
   1b948:	bls	1b8ec <_start@@Base+0x6710>
   1b94c:	b	1b8fc <_start@@Base+0x6720>
   1b950:	ldrb	r3, [r6, #2]
   1b954:	cmp	r3, #32
   1b958:	addhi	r1, r6, #2
   1b95c:	bls	1b7b0 <_start@@Base+0x65d4>
   1b960:	b	1b7c0 <_start@@Base+0x65e4>
   1b964:	mov	r3, #10
   1b968:	mov	r2, r4
   1b96c:	mov	r1, r4
   1b970:	mov	r0, r5
   1b974:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1b978:	mov	r6, r0
   1b97c:	b	1b750 <_start@@Base+0x6574>
   1b980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b984:	vpush	{d8-d9}
   1b988:	mov	sl, r0
   1b98c:	mov	r0, r3
   1b990:	mov	fp, r1
   1b994:	sub	sp, sp, #148	; 0x94
   1b998:	mov	r1, #36	; 0x24
   1b99c:	str	r3, [sp, #76]	; 0x4c
   1b9a0:	mov	r3, #0
   1b9a4:	str	r3, [r0]
   1b9a8:	ldr	r0, [sl]
   1b9ac:	mov	r9, r2
   1b9b0:	bl	27a48 <flatcc_builder_start_table@@Base>
   1b9b4:	cmp	r0, #0
   1b9b8:	bne	1bb50 <_start@@Base+0x6974>
   1b9bc:	add	r3, sp, #120	; 0x78
   1b9c0:	str	r3, [sp]
   1b9c4:	mov	r2, r9
   1b9c8:	mov	r3, #1
   1b9cc:	mov	r1, fp
   1b9d0:	mov	r0, sl
   1b9d4:	bl	2f3fc <flatcc_json_parser_prepare_unions@@Base>
   1b9d8:	cmp	r9, r0
   1b9dc:	beq	1bb50 <_start@@Base+0x6974>
   1b9e0:	add	r8, sp, #112	; 0x70
   1b9e4:	mov	r1, fp
   1b9e8:	mov	r3, r8
   1b9ec:	mov	r2, r9
   1b9f0:	mov	r0, sl
   1b9f4:	bl	17c8c <_start@@Base+0x2ab0>
   1b9f8:	ldr	r3, [sp, #112]	; 0x70
   1b9fc:	cmp	r3, #0
   1ba00:	mov	fp, r0
   1ba04:	beq	1c064 <_start@@Base+0x6e88>
   1ba08:	ldr	r3, [pc, #1288]	; 1bf18 <_start@@Base+0x6d3c>
   1ba0c:	ldr	r1, [pc, #1288]	; 1bf1c <_start@@Base+0x6d40>
   1ba10:	add	r3, pc, r3
   1ba14:	add	r3, r3, #428	; 0x1ac
   1ba18:	ldr	r2, [pc, #1280]	; 1bf20 <_start@@Base+0x6d44>
   1ba1c:	str	r3, [sp, #88]	; 0x58
   1ba20:	mov	r3, r9
   1ba24:	add	r1, pc, r1
   1ba28:	add	r2, pc, r2
   1ba2c:	mov	r9, sl
   1ba30:	mov	sl, r3
   1ba34:	add	r1, r1, #476	; 0x1dc
   1ba38:	add	r2, r2, #452	; 0x1c4
   1ba3c:	str	r1, [sp, #80]	; 0x50
   1ba40:	str	r2, [sp, #84]	; 0x54
   1ba44:	str	r8, [sp, #72]	; 0x48
   1ba48:	cmp	sl, fp
   1ba4c:	beq	1ba78 <_start@@Base+0x689c>
   1ba50:	ldrb	r3, [fp]
   1ba54:	cmp	r3, #34	; 0x22
   1ba58:	addeq	fp, fp, #1
   1ba5c:	beq	1ba78 <_start@@Base+0x689c>
   1ba60:	mov	r1, fp
   1ba64:	mov	r3, #5
   1ba68:	mov	r2, sl
   1ba6c:	mov	r0, r9
   1ba70:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1ba74:	mov	fp, r0
   1ba78:	mov	r1, sl
   1ba7c:	mov	r0, fp
   1ba80:	bl	15308 <_start@@Base+0x12c>
   1ba84:	add	r3, pc, #972	; 0x3cc
   1ba88:	ldrd	r2, [r3]
   1ba8c:	cmp	r1, r3
   1ba90:	cmpeq	r0, r2
   1ba94:	mov	r4, r0
   1ba98:	mov	r5, r1
   1ba9c:	bhi	1bb70 <_start@@Base+0x6994>
   1baa0:	add	r3, pc, #952	; 0x3b8
   1baa4:	ldrd	r2, [r3]
   1baa8:	cmp	r1, r3
   1baac:	cmpeq	r0, r2
   1bab0:	bhi	1bbec <_start@@Base+0x6a10>
   1bab4:	add	r3, pc, #940	; 0x3ac
   1bab8:	ldrd	r2, [r3]
   1babc:	cmp	r1, r3
   1bac0:	cmpeq	r0, r2
   1bac4:	bhi	1bca0 <_start@@Base+0x6ac4>
   1bac8:	add	r3, pc, #928	; 0x3a0
   1bacc:	ldrd	r2, [r3]
   1bad0:	and	r4, r0, #-16777216	; 0xff000000
   1bad4:	cmp	r1, r3
   1bad8:	cmpeq	r4, r2
   1badc:	beq	1c4ec <_start@@Base+0x7310>
   1bae0:	add	r3, pc, #912	; 0x390
   1bae4:	ldrd	r2, [r3]
   1bae8:	cmp	r1, r3
   1baec:	cmpeq	r4, r2
   1baf0:	beq	1c1f0 <_start@@Base+0x7014>
   1baf4:	mov	r1, fp
   1baf8:	mov	r2, sl
   1bafc:	mov	r0, r9
   1bb00:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bb04:	mov	fp, r0
   1bb08:	b	1c034 <_start@@Base+0x6e58>
   1bb0c:	mov	r4, r0
   1bb10:	ldr	r3, [pc, #1036]	; 1bf24 <_start@@Base+0x6d48>
   1bb14:	add	r2, sp, #128	; 0x80
   1bb18:	add	r3, pc, r3
   1bb1c:	str	r2, [sp]
   1bb20:	add	r3, r3, #140	; 0x8c
   1bb24:	mov	r2, sl
   1bb28:	mov	r1, r4
   1bb2c:	mov	r0, r9
   1bb30:	bl	18910 <_start@@Base+0x3734>
   1bb34:	cmp	sl, r0
   1bb38:	cmpne	r0, r4
   1bb3c:	mov	fp, r0
   1bb40:	bne	1c970 <_start@@Base+0x7794>
   1bb44:	mov	r3, sl
   1bb48:	mov	sl, r9
   1bb4c:	mov	r9, r3
   1bb50:	mov	r2, r9
   1bb54:	mov	r1, fp
   1bb58:	mov	r0, sl
   1bb5c:	mov	r3, #33	; 0x21
   1bb60:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1bb64:	add	sp, sp, #148	; 0x94
   1bb68:	vpop	{d8-d9}
   1bb6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb70:	add	r3, pc, #776	; 0x308
   1bb74:	ldrd	r2, [r3]
   1bb78:	cmp	r1, r3
   1bb7c:	cmpeq	r0, r2
   1bb80:	bhi	1bc44 <_start@@Base+0x6a68>
   1bb84:	add	r3, pc, #764	; 0x2fc
   1bb88:	ldrd	r2, [r3]
   1bb8c:	cmp	r1, r3
   1bb90:	cmpeq	r0, r2
   1bb94:	beq	1bf94 <_start@@Base+0x6db8>
   1bb98:	add	r3, pc, #752	; 0x2f0
   1bb9c:	ldrd	r2, [r3]
   1bba0:	cmp	r1, r3
   1bba4:	cmpeq	r0, r2
   1bba8:	bhi	1bf38 <_start@@Base+0x6d5c>
   1bbac:	add	r3, pc, #740	; 0x2e4
   1bbb0:	ldrd	r2, [r3]
   1bbb4:	cmp	r1, r3
   1bbb8:	cmpeq	r0, r2
   1bbbc:	beq	1c5dc <_start@@Base+0x7400>
   1bbc0:	add	r3, pc, #728	; 0x2d8
   1bbc4:	ldrd	r2, [r3]
   1bbc8:	cmp	r1, r3
   1bbcc:	cmpeq	r0, r2
   1bbd0:	beq	1c278 <_start@@Base+0x709c>
   1bbd4:	mov	r1, fp
   1bbd8:	mov	r2, sl
   1bbdc:	mov	r0, r9
   1bbe0:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bbe4:	mov	fp, r0
   1bbe8:	b	1c034 <_start@@Base+0x6e58>
   1bbec:	add	r3, pc, #692	; 0x2b4
   1bbf0:	ldrd	r2, [r3]
   1bbf4:	cmp	r1, r3
   1bbf8:	cmpeq	r0, r2
   1bbfc:	bhi	1bce4 <_start@@Base+0x6b08>
   1bc00:	add	r3, pc, #680	; 0x2a8
   1bc04:	ldrd	r2, [r3]
   1bc08:	cmp	r1, r3
   1bc0c:	cmpeq	r0, r2
   1bc10:	bhi	1c0a0 <_start@@Base+0x6ec4>
   1bc14:	add	r3, pc, #668	; 0x29c
   1bc18:	ldrd	r2, [r3]
   1bc1c:	mov	r4, #0
   1bc20:	cmp	r1, r3
   1bc24:	cmpeq	r4, r2
   1bc28:	beq	1c2e0 <_start@@Base+0x7104>
   1bc2c:	mov	r1, fp
   1bc30:	mov	r2, sl
   1bc34:	mov	r0, r9
   1bc38:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bc3c:	mov	fp, r0
   1bc40:	b	1c034 <_start@@Base+0x6e58>
   1bc44:	add	r3, pc, #628	; 0x274
   1bc48:	ldrd	r2, [r3]
   1bc4c:	cmp	r1, r3
   1bc50:	cmpeq	r0, r2
   1bc54:	bhi	1bdc4 <_start@@Base+0x6be8>
   1bc58:	add	r3, pc, #616	; 0x268
   1bc5c:	ldrd	r2, [r3]
   1bc60:	ldr	r0, [pc, #704]	; 1bf28 <_start@@Base+0x6d4c>
   1bc64:	mvn	r1, #0
   1bc68:	and	r5, r5, r1
   1bc6c:	and	r4, r4, r0
   1bc70:	cmp	r5, r3
   1bc74:	cmpeq	r4, r2
   1bc78:	bne	1c020 <_start@@Base+0x6e44>
   1bc7c:	sub	r3, sl, fp
   1bc80:	cmp	r3, #6
   1bc84:	bgt	1c3b0 <_start@@Base+0x71d4>
   1bc88:	mov	r1, fp
   1bc8c:	mov	r2, sl
   1bc90:	mov	r0, r9
   1bc94:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bc98:	mov	fp, r0
   1bc9c:	b	1c034 <_start@@Base+0x6e58>
   1bca0:	ldr	r3, [pc, #644]	; 1bf2c <_start@@Base+0x6d50>
   1bca4:	mvn	r2, #0
   1bca8:	cmp	r1, r3
   1bcac:	cmpeq	r0, r2
   1bcb0:	bhi	1c0f4 <_start@@Base+0x6f18>
   1bcb4:	add	r3, pc, #532	; 0x214
   1bcb8:	ldrd	r2, [r3]
   1bcbc:	mov	r4, #0
   1bcc0:	cmp	r1, r3
   1bcc4:	cmpeq	r4, r2
   1bcc8:	beq	1c304 <_start@@Base+0x7128>
   1bccc:	mov	r1, fp
   1bcd0:	mov	r2, sl
   1bcd4:	mov	r0, r9
   1bcd8:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bcdc:	mov	fp, r0
   1bce0:	b	1c034 <_start@@Base+0x6e58>
   1bce4:	add	r3, pc, #492	; 0x1ec
   1bce8:	ldrd	r2, [r3]
   1bcec:	and	r6, r0, #-16777216	; 0xff000000
   1bcf0:	mov	r7, r1
   1bcf4:	cmp	r1, r3
   1bcf8:	cmpeq	r6, r2
   1bcfc:	beq	1c510 <_start@@Base+0x7334>
   1bd00:	sub	r8, sl, fp
   1bd04:	cmp	r8, #4
   1bd08:	bgt	1dde0 <_start@@Base+0x8c04>
   1bd0c:	add	r3, pc, #460	; 0x1cc
   1bd10:	ldrd	r2, [r3]
   1bd14:	cmp	r7, r3
   1bd18:	cmpeq	r6, r2
   1bd1c:	beq	1c47c <_start@@Base+0x72a0>
   1bd20:	add	r3, pc, #448	; 0x1c0
   1bd24:	ldrd	r2, [r3]
   1bd28:	cmp	r5, r3
   1bd2c:	cmpeq	r4, r2
   1bd30:	bne	1c484 <_start@@Base+0x72a8>
   1bd34:	add	fp, fp, #8
   1bd38:	mov	r0, fp
   1bd3c:	mov	r1, sl
   1bd40:	bl	15308 <_start@@Base+0x12c>
   1bd44:	mov	r0, #0
   1bd48:	and	r1, r1, #-16777216	; 0xff000000
   1bd4c:	cmp	r1, #1694498816	; 0x65000000
   1bd50:	cmpeq	r0, #0
   1bd54:	bne	1c79c <_start@@Base+0x75c0>
   1bd58:	sub	r3, sl, fp
   1bd5c:	cmp	r3, #1
   1bd60:	ble	1ce2c <_start@@Base+0x7c50>
   1bd64:	mov	r1, fp
   1bd68:	mov	r3, #1
   1bd6c:	mov	r2, sl
   1bd70:	mov	r0, r9
   1bd74:	bl	18f38 <_start@@Base+0x3d5c>
   1bd78:	cmp	fp, r0
   1bd7c:	mov	r1, r0
   1bd80:	beq	1ce2c <_start@@Base+0x7c50>
   1bd84:	ldr	r3, [pc, #420]	; 1bf30 <_start@@Base+0x6d54>
   1bd88:	ldr	ip, [sp, #120]	; 0x78
   1bd8c:	ldr	r2, [pc, #416]	; 1bf34 <_start@@Base+0x6d58>
   1bd90:	mov	r0, #8
   1bd94:	add	r3, pc, r3
   1bd98:	add	r2, pc, r2
   1bd9c:	add	r3, r3, #268	; 0x10c
   1bda0:	str	r3, [sp, #8]
   1bda4:	str	r2, [sp, #12]
   1bda8:	stm	sp, {r0, ip}
   1bdac:	mov	r3, #0
   1bdb0:	mov	r2, sl
   1bdb4:	mov	r0, r9
   1bdb8:	bl	2f600 <flatcc_json_parser_union_type@@Base>
   1bdbc:	mov	fp, r0
   1bdc0:	b	1c034 <_start@@Base+0x6e58>
   1bdc4:	add	r3, pc, #292	; 0x124
   1bdc8:	ldrd	r2, [r3]
   1bdcc:	cmp	r1, r3
   1bdd0:	cmpeq	r0, r2
   1bdd4:	beq	1c49c <_start@@Base+0x72c0>
   1bdd8:	add	r3, pc, #280	; 0x118
   1bddc:	ldrd	r2, [r3]
   1bde0:	cmp	r1, r3
   1bde4:	cmpeq	r0, r2
   1bde8:	bls	1c1a0 <_start@@Base+0x6fc4>
   1bdec:	add	r3, pc, #268	; 0x10c
   1bdf0:	ldrd	r2, [r3]
   1bdf4:	cmp	r1, r3
   1bdf8:	cmpeq	r0, r2
   1bdfc:	bne	1c64c <_start@@Base+0x7470>
   1be00:	add	r4, fp, #8
   1be04:	mov	r0, r4
   1be08:	mov	r1, sl
   1be0c:	bl	15308 <_start@@Base+0x12c>
   1be10:	add	r3, pc, #240	; 0xf0
   1be14:	ldrd	r2, [r3]
   1be18:	cmp	r1, r3
   1be1c:	cmpeq	r0, r2
   1be20:	beq	1e4ec <_start@@Base+0x9310>
   1be24:	add	r3, pc, #228	; 0xe4
   1be28:	ldrd	r2, [r3]
   1be2c:	bic	r0, r0, #255	; 0xff
   1be30:	cmp	r1, r3
   1be34:	cmpeq	r0, r2
   1be38:	beq	1ce08 <_start@@Base+0x7c2c>
   1be3c:	mov	r1, r4
   1be40:	mov	r2, sl
   1be44:	mov	r0, r9
   1be48:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1be4c:	mov	fp, r0
   1be50:	b	1c034 <_start@@Base+0x6e58>
   1be54:	nop			; (mov r0, r0)
   1be58:	cmnvs	r2, r0, ror #4
   1be5c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1be60:			; <UNDEFINED> instruction: 0xffffffff
   1be64:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1be68:			; <UNDEFINED> instruction: 0xffffffff
   1be6c:			; <UNDEFINED> instruction: 0x666c6577
   1be70:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1be74:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1be78:	andvc	r0, r0, #0
   1be7c:	cmnvs	pc, #28416	; 0x6f00
   1be80:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1be84:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1be88:	cmnvs	r2, r1, ror #4
   1be8c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1be90:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1be94:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1be98:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1be9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bea0:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1bea4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bea8:			; <UNDEFINED> instruction: 0xffffffff
   1beac:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1beb0:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1beb4:	rsbvc	r7, r1, r5, ror #4
   1beb8:	andeq	r0, r0, r0
   1bebc:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1bec0:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1bec4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bec8:	ldrtvs	r0, [r3], -r0
   1becc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bed0:	andeq	r0, r0, r0
   1bed4:			; <UNDEFINED> instruction: 0x666c6578
   1bed8:	strcc	r0, [r0], #-0
   1bedc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bee0:	strcc	r0, [r0, #-0]
   1bee4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bee8:	svcpl	0x00747970
   1beec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bef0:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1bef4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bef8:	svcvs	0x00725f6e
   1befc:			; <UNDEFINED> instruction: 0x76656374
   1bf00:	svcvs	0x00725f6f
   1bf04:			; <UNDEFINED> instruction: 0x76656374
   1bf08:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1bf0c:	ldrbvs	r6, [pc], -pc, ror #8
   1bf10:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1bf14:	ldrbvs	r6, [pc], -pc, ror #24
   1bf18:	andeq	r8, r3, r0, ror r6
   1bf1c:	andeq	r8, r3, ip, asr r6
   1bf20:	andeq	r8, r3, r8, asr r6
   1bf24:	andeq	r8, r3, r8, ror #10
   1bf28:			; <UNDEFINED> instruction: 0xffff0000
   1bf2c:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1bf30:	andeq	r8, r3, ip, ror #5
   1bf34:	muleq	r0, r8, r4
   1bf38:	add	r3, pc, #1000	; 0x3e8
   1bf3c:	ldrd	r2, [r3]
   1bf40:	cmp	r1, r3
   1bf44:	cmpeq	r0, r2
   1bf48:	bls	1c150 <_start@@Base+0x6f74>
   1bf4c:	add	r3, pc, #988	; 0x3dc
   1bf50:	ldrd	r2, [r3]
   1bf54:	ldr	r0, [pc, #1100]	; 1c3a8 <_start@@Base+0x71cc>
   1bf58:	mvn	r1, #0
   1bf5c:	and	r5, r5, r1
   1bf60:	cmp	r5, r3
   1bf64:	and	r4, r4, r0
   1bf68:	cmpeq	r4, r2
   1bf6c:	sub	r3, sl, fp
   1bf70:	beq	1c850 <_start@@Base+0x7674>
   1bf74:	cmp	r3, #5
   1bf78:	bgt	1e6d8 <_start@@Base+0x94fc>
   1bf7c:	mov	r1, fp
   1bf80:	mov	r2, sl
   1bf84:	mov	r0, r9
   1bf88:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bf8c:	mov	fp, r0
   1bf90:	b	1c034 <_start@@Base+0x6e58>
   1bf94:	add	r4, fp, #8
   1bf98:	mov	r0, r4
   1bf9c:	mov	r1, sl
   1bfa0:	bl	15308 <_start@@Base+0x12c>
   1bfa4:	add	r3, pc, #908	; 0x38c
   1bfa8:	ldrd	r2, [r3]
   1bfac:	cmp	r1, r3
   1bfb0:	cmpeq	r0, r2
   1bfb4:	bhi	1c214 <_start@@Base+0x7038>
   1bfb8:	add	r3, pc, #896	; 0x380
   1bfbc:	ldrd	r2, [r3]
   1bfc0:	cmp	r1, r3
   1bfc4:	cmpeq	r0, r2
   1bfc8:	beq	1d72c <_start@@Base+0x8550>
   1bfcc:	add	r3, pc, #884	; 0x374
   1bfd0:	ldrd	r2, [r3]
   1bfd4:	cmp	r1, r3
   1bfd8:	cmpeq	r0, r2
   1bfdc:	bne	1c7d0 <_start@@Base+0x75f4>
   1bfe0:	add	r4, fp, #16
   1bfe4:	mov	r0, r4
   1bfe8:	mov	r1, sl
   1bfec:	bl	15308 <_start@@Base+0x12c>
   1bff0:	add	r3, pc, #856	; 0x358
   1bff4:	ldrd	r2, [r3]
   1bff8:	bic	r0, r0, #255	; 0xff
   1bffc:	cmp	r1, r3
   1c000:	cmpeq	r0, r2
   1c004:	beq	1ce44 <_start@@Base+0x7c68>
   1c008:	mov	r1, r4
   1c00c:	mov	r2, sl
   1c010:	mov	r0, r9
   1c014:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c018:	mov	fp, r0
   1c01c:	b	1c034 <_start@@Base+0x6e58>
   1c020:	mov	r1, fp
   1c024:	mov	r2, sl
   1c028:	mov	r0, r9
   1c02c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c030:	mov	fp, r0
   1c034:	mov	r1, fp
   1c038:	ldr	r3, [sp, #72]	; 0x48
   1c03c:	mov	r2, sl
   1c040:	mov	r0, r9
   1c044:	bl	19b94 <_start@@Base+0x49b8>
   1c048:	ldr	r3, [sp, #112]	; 0x70
   1c04c:	cmp	r3, #0
   1c050:	mov	fp, r0
   1c054:	bne	1ba48 <_start@@Base+0x686c>
   1c058:	mov	r3, sl
   1c05c:	mov	sl, r9
   1c060:	mov	r9, r3
   1c064:	ldr	r3, [sl, #20]
   1c068:	cmp	r3, #0
   1c06c:	bne	1bb50 <_start@@Base+0x6974>
   1c070:	mov	r1, #3
   1c074:	ldr	r0, [sl]
   1c078:	bl	28264 <flatcc_builder_check_required_field@@Base>
   1c07c:	mov	r1, fp
   1c080:	cmp	r0, #0
   1c084:	bne	1e99c <_start@@Base+0x97c0>
   1c088:	mov	r3, #29
   1c08c:	mov	r2, r9
   1c090:	mov	r0, sl
   1c094:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1c098:	mov	fp, r0
   1c09c:	b	1bb50 <_start@@Base+0x6974>
   1c0a0:	add	r3, pc, #688	; 0x2b0
   1c0a4:	ldrd	r2, [r3]
   1c0a8:	cmp	r1, r3
   1c0ac:	cmpeq	r0, r2
   1c0b0:	beq	1c440 <_start@@Base+0x7264>
   1c0b4:	add	r3, pc, #676	; 0x2a4
   1c0b8:	ldrd	r2, [r3]
   1c0bc:	bic	r5, r1, #255	; 0xff
   1c0c0:	mov	r4, #0
   1c0c4:	cmp	r5, r3
   1c0c8:	cmpeq	r4, r2
   1c0cc:	bne	1c634 <_start@@Base+0x7458>
   1c0d0:	sub	r3, sl, fp
   1c0d4:	cmp	r3, #3
   1c0d8:	bgt	1de30 <_start@@Base+0x8c54>
   1c0dc:	mov	r1, fp
   1c0e0:	mov	r2, sl
   1c0e4:	mov	r0, r9
   1c0e8:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c0ec:	mov	fp, r0
   1c0f0:	b	1c034 <_start@@Base+0x6e58>
   1c0f4:	add	r3, pc, #620	; 0x26c
   1c0f8:	ldrd	r2, [r3]
   1c0fc:	cmp	r1, r3
   1c100:	cmpeq	r0, r2
   1c104:	bhi	1c29c <_start@@Base+0x70c0>
   1c108:	ldr	r3, [pc, #664]	; 1c3a8 <_start@@Base+0x71cc>
   1c10c:	mov	r2, #0
   1c110:	and	r5, r5, r3
   1c114:	ldr	r3, [pc, #656]	; 1c3ac <_start@@Base+0x71d0>
   1c118:	and	r4, r4, r2
   1c11c:	cmp	r5, r3
   1c120:	mov	r2, #0
   1c124:	cmpeq	r4, r2
   1c128:	bne	1c7b4 <_start@@Base+0x75d8>
   1c12c:	sub	r3, sl, fp
   1c130:	cmp	r3, #2
   1c134:	bgt	1d00c <_start@@Base+0x7e30>
   1c138:	mov	r1, fp
   1c13c:	mov	r2, sl
   1c140:	mov	r0, r9
   1c144:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c148:	mov	fp, r0
   1c14c:	b	1c034 <_start@@Base+0x6e58>
   1c150:	add	r3, pc, #536	; 0x218
   1c154:	ldrd	r2, [r3]
   1c158:	cmp	r1, r3
   1c15c:	cmpeq	r0, r2
   1c160:	bne	1c67c <_start@@Base+0x74a0>
   1c164:	add	r4, fp, #8
   1c168:	mov	r0, r4
   1c16c:	mov	r1, sl
   1c170:	bl	15308 <_start@@Base+0x12c>
   1c174:	mov	r0, #0
   1c178:	and	r1, r1, #-16777216	; 0xff000000
   1c17c:	cmp	r1, #2030043136	; 0x79000000
   1c180:	cmpeq	r0, #0
   1c184:	beq	1c9e8 <_start@@Base+0x780c>
   1c188:	mov	r1, r4
   1c18c:	mov	r2, sl
   1c190:	mov	r0, r9
   1c194:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c198:	mov	fp, r0
   1c19c:	b	1c034 <_start@@Base+0x6e58>
   1c1a0:	add	r3, pc, #464	; 0x1d0
   1c1a4:	ldrd	r2, [r3]
   1c1a8:	cmp	r1, r3
   1c1ac:	cmpeq	r0, r2
   1c1b0:	bne	1c664 <_start@@Base+0x7488>
   1c1b4:	add	r4, fp, #8
   1c1b8:	mov	r0, r4
   1c1bc:	mov	r1, sl
   1c1c0:	bl	15308 <_start@@Base+0x12c>
   1c1c4:	add	r3, pc, #436	; 0x1b4
   1c1c8:	ldrd	r2, [r3]
   1c1cc:	cmp	r1, r3
   1c1d0:	cmpeq	r0, r2
   1c1d4:	beq	1c99c <_start@@Base+0x77c0>
   1c1d8:	mov	r1, r4
   1c1dc:	mov	r2, sl
   1c1e0:	mov	r0, r9
   1c1e4:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c1e8:	mov	fp, r0
   1c1ec:	b	1c034 <_start@@Base+0x6e58>
   1c1f0:	sub	r3, sl, fp
   1c1f4:	cmp	r3, #5
   1c1f8:	bgt	1c870 <_start@@Base+0x7694>
   1c1fc:	mov	r1, fp
   1c200:	mov	r2, sl
   1c204:	mov	r0, r9
   1c208:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c20c:	mov	fp, r0
   1c210:	b	1c034 <_start@@Base+0x6e58>
   1c214:	add	r3, pc, #364	; 0x16c
   1c218:	ldrd	r2, [r3]
   1c21c:	cmp	r1, r3
   1c220:	cmpeq	r0, r2
   1c224:	beq	1d5fc <_start@@Base+0x8420>
   1c228:	add	r3, pc, #352	; 0x160
   1c22c:	ldrd	r2, [r3]
   1c230:	cmp	r1, r3
   1c234:	cmpeq	r0, r2
   1c238:	bne	1c800 <_start@@Base+0x7624>
   1c23c:	add	r4, fp, #16
   1c240:	mov	r0, r4
   1c244:	mov	r1, sl
   1c248:	bl	15308 <_start@@Base+0x12c>
   1c24c:	mov	r0, #0
   1c250:	and	r1, r1, #-16777216	; 0xff000000
   1c254:	cmp	r1, #1929379840	; 0x73000000
   1c258:	cmpeq	r0, #0
   1c25c:	beq	1cf28 <_start@@Base+0x7d4c>
   1c260:	mov	r1, r4
   1c264:	mov	r2, sl
   1c268:	mov	r0, r9
   1c26c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c270:	mov	fp, r0
   1c274:	b	1c034 <_start@@Base+0x6e58>
   1c278:	sub	r3, sl, fp
   1c27c:	cmp	r3, #8
   1c280:	bgt	1d91c <_start@@Base+0x8740>
   1c284:	mov	r1, fp
   1c288:	mov	r2, sl
   1c28c:	mov	r0, r9
   1c290:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c294:	mov	fp, r0
   1c298:	b	1c034 <_start@@Base+0x6e58>
   1c29c:	add	r3, pc, #244	; 0xf4
   1c2a0:	ldrd	r2, [r3]
   1c2a4:	cmp	r1, r3
   1c2a8:	cmpeq	r0, r2
   1c2ac:	beq	1dbf8 <_start@@Base+0x8a1c>
   1c2b0:	add	r3, pc, #232	; 0xe8
   1c2b4:	ldrd	r2, [r3]
   1c2b8:	mov	r4, #0
   1c2bc:	cmp	r1, r3
   1c2c0:	cmpeq	r4, r2
   1c2c4:	beq	1c978 <_start@@Base+0x779c>
   1c2c8:	mov	r1, fp
   1c2cc:	mov	r2, sl
   1c2d0:	mov	r0, r9
   1c2d4:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c2d8:	mov	fp, r0
   1c2dc:	b	1c034 <_start@@Base+0x6e58>
   1c2e0:	sub	r3, sl, fp
   1c2e4:	cmp	r3, #4
   1c2e8:	bgt	1db98 <_start@@Base+0x89bc>
   1c2ec:	mov	r1, fp
   1c2f0:	mov	r2, sl
   1c2f4:	mov	r0, r9
   1c2f8:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c2fc:	mov	fp, r0
   1c300:	b	1c034 <_start@@Base+0x6e58>
   1c304:	sub	r3, sl, fp
   1c308:	cmp	r3, #4
   1c30c:	bgt	1da3c <_start@@Base+0x8860>
   1c310:	mov	r1, fp
   1c314:	mov	r2, sl
   1c318:	mov	r0, r9
   1c31c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c320:	mov	fp, r0
   1c324:	b	1c034 <_start@@Base+0x6e58>
   1c328:	ldrbvs	pc, [pc, #4095]!	; 1d32f <_start@@Base+0x8153>	; <UNPREDICTABLE>
   1c32c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c330:	ldrtvs	r0, [r2], -r0
   1c334:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c338:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1c33c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c340:	svcvs	0x006f6c73
   1c344:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c348:	svcvs	0x00727465
   1c34c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c350:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1c354:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1c358:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1c35c:	rsbvc	r7, r1, r5, ror #4
   1c360:	andeq	r0, r0, r0
   1c364:	rsbvc	r7, pc, r0, lsl #6
   1c368:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1c36c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c370:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1c374:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c378:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1c37c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c380:	cmnvs	r4, r5, ror r2
   1c384:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1c388:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1c38c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c390:	cmnvs	r2, r5, ror #24
   1c394:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c398:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1c39c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c3a0:	andeq	r0, r0, r0
   1c3a4:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1c3a8:			; <UNDEFINED> instruction: 0xffff0000
   1c3ac:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1c3b0:	mov	r3, #6
   1c3b4:	mov	r2, sl
   1c3b8:	mov	r1, fp
   1c3bc:	mov	r0, r9
   1c3c0:	bl	18f38 <_start@@Base+0x3d5c>
   1c3c4:	cmp	fp, r0
   1c3c8:	mov	r5, r0
   1c3cc:	beq	1bc88 <_start@@Base+0x6aac>
   1c3d0:	add	r4, sp, #144	; 0x90
   1c3d4:	mov	r3, #0
   1c3d8:	mov	r1, r0
   1c3dc:	str	r3, [r4, #-8]!
   1c3e0:	mov	r2, sl
   1c3e4:	mov	r0, r9
   1c3e8:	mov	r3, r4
   1c3ec:	bl	2dc58 <flatcc_json_parser_float@@Base>
   1c3f0:	cmp	r0, r5
   1c3f4:	mov	fp, r0
   1c3f8:	beq	1e7d8 <_start@@Base+0x95fc>
   1c3fc:	vldr	s15, [sp, #136]	; 0x88
   1c400:	vcmp.f32	s15, #0.0
   1c404:	vmrs	APSR_nzcv, fpscr
   1c408:	bne	1c418 <_start@@Base+0x723c>
   1c40c:	ldr	r3, [r9, #8]
   1c410:	tst	r3, #2
   1c414:	beq	1c034 <_start@@Base+0x6e58>
   1c418:	mov	r3, #4
   1c41c:	mov	r2, r3
   1c420:	mov	r1, #27
   1c424:	ldr	r0, [r9]
   1c428:	bl	29488 <flatcc_builder_table_add@@Base>
   1c42c:	cmp	r0, #0
   1c430:	beq	1f700 <_start@@Base+0xa524>
   1c434:	ldr	r3, [sp, #136]	; 0x88
   1c438:	str	r3, [r0]
   1c43c:	b	1c034 <_start@@Base+0x6e58>
   1c440:	add	r4, fp, #8
   1c444:	mov	r0, r4
   1c448:	mov	r1, sl
   1c44c:	bl	15308 <_start@@Base+0x12c>
   1c450:	add	r3, pc, #960	; 0x3c0
   1c454:	ldrd	r2, [r3]
   1c458:	cmp	r1, r3
   1c45c:	cmpeq	r0, r2
   1c460:	beq	1ccb4 <_start@@Base+0x7ad8>
   1c464:	mov	r1, r4
   1c468:	mov	r2, sl
   1c46c:	mov	r0, r9
   1c470:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c474:	mov	fp, r0
   1c478:	b	1c034 <_start@@Base+0x6e58>
   1c47c:	cmp	r8, #5
   1c480:	bgt	1ce68 <_start@@Base+0x7c8c>
   1c484:	mov	r1, fp
   1c488:	mov	r2, sl
   1c48c:	mov	r0, r9
   1c490:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c494:	mov	fp, r0
   1c498:	b	1c034 <_start@@Base+0x6e58>
   1c49c:	add	fp, fp, #8
   1c4a0:	mov	r0, fp
   1c4a4:	mov	r1, sl
   1c4a8:	bl	15308 <_start@@Base+0x12c>
   1c4ac:	add	r3, pc, #876	; 0x36c
   1c4b0:	ldrd	r2, [r3]
   1c4b4:	cmp	r1, r3
   1c4b8:	cmpeq	r0, r2
   1c4bc:	bhi	1c694 <_start@@Base+0x74b8>
   1c4c0:	add	r3, pc, #864	; 0x360
   1c4c4:	ldrd	r2, [r3]
   1c4c8:	cmp	r1, r3
   1c4cc:	cmpeq	r0, r2
   1c4d0:	beq	1cd40 <_start@@Base+0x7b64>
   1c4d4:	mov	r1, fp
   1c4d8:	mov	r2, sl
   1c4dc:	mov	r0, r9
   1c4e0:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c4e4:	mov	fp, r0
   1c4e8:	b	1c034 <_start@@Base+0x6e58>
   1c4ec:	sub	r3, sl, fp
   1c4f0:	cmp	r3, #5
   1c4f4:	bgt	1d59c <_start@@Base+0x83c0>
   1c4f8:	mov	r1, fp
   1c4fc:	mov	r2, sl
   1c500:	mov	r0, r9
   1c504:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c508:	mov	fp, r0
   1c50c:	b	1c034 <_start@@Base+0x6e58>
   1c510:	sub	r3, sl, fp
   1c514:	cmp	r3, #5
   1c518:	ble	1c484 <_start@@Base+0x72a8>
   1c51c:	mov	r3, #5
   1c520:	mov	r2, sl
   1c524:	mov	r1, fp
   1c528:	mov	r0, r9
   1c52c:	bl	18f38 <_start@@Base+0x3d5c>
   1c530:	cmp	fp, r0
   1c534:	mov	r4, r0
   1c538:	beq	1c484 <_start@@Base+0x72a8>
   1c53c:	mvn	r3, #-1073741824	; 0xc0000000
   1c540:	mov	r2, #2
   1c544:	mov	r1, #4
   1c548:	ldr	r0, [r9]
   1c54c:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1c550:	cmp	r0, #0
   1c554:	bne	1f834 <_start@@Base+0xa658>
   1c558:	ldr	r5, [sp, #72]	; 0x48
   1c55c:	mov	r1, r4
   1c560:	mov	r3, r5
   1c564:	mov	r2, sl
   1c568:	mov	r0, r9
   1c56c:	bl	18e84 <_start@@Base+0x3ca8>
   1c570:	ldr	r3, [sp, #112]	; 0x70
   1c574:	cmp	r3, #0
   1c578:	mov	fp, r0
   1c57c:	beq	1d444 <_start@@Base+0x8268>
   1c580:	mov	r4, #1
   1c584:	b	1c5b0 <_start@@Base+0x73d4>
   1c588:	bl	1af80 <_start@@Base+0x5da4>
   1c58c:	mov	r3, r5
   1c590:	mov	r2, sl
   1c594:	mov	r1, r0
   1c598:	mov	r0, r9
   1c59c:	bl	19a10 <_start@@Base+0x4834>
   1c5a0:	ldr	r3, [sp, #112]	; 0x70
   1c5a4:	cmp	r3, #0
   1c5a8:	mov	fp, r0
   1c5ac:	beq	1d444 <_start@@Base+0x8268>
   1c5b0:	mov	r1, r4
   1c5b4:	ldr	r0, [r9]
   1c5b8:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1c5bc:	mov	r1, fp
   1c5c0:	mov	r2, sl
   1c5c4:	subs	r3, r0, #0
   1c5c8:	mov	r0, r9
   1c5cc:	bne	1c588 <_start@@Base+0x73ac>
   1c5d0:	mov	sl, r9
   1c5d4:	mov	r9, r2
   1c5d8:	b	1bb50 <_start@@Base+0x6974>
   1c5dc:	add	r4, fp, #8
   1c5e0:	mov	r0, r4
   1c5e4:	mov	r1, sl
   1c5e8:	bl	15308 <_start@@Base+0x12c>
   1c5ec:	ldr	r3, [pc, #596]	; 1c848 <_start@@Base+0x766c>
   1c5f0:	ldr	r7, [pc, #596]	; 1c84c <_start@@Base+0x7670>
   1c5f4:	mov	r2, #0
   1c5f8:	mov	r6, #0
   1c5fc:	and	r3, r3, r1
   1c600:	and	r2, r2, r0
   1c604:	cmp	r3, r7
   1c608:	cmpeq	r2, r6
   1c60c:	bne	1c7e8 <_start@@Base+0x760c>
   1c610:	sub	r3, sl, r4
   1c614:	cmp	r3, #2
   1c618:	bgt	1d12c <_start@@Base+0x7f50>
   1c61c:	mov	r1, r4
   1c620:	mov	r2, sl
   1c624:	mov	r0, r9
   1c628:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c62c:	mov	fp, r0
   1c630:	b	1c034 <_start@@Base+0x6e58>
   1c634:	mov	r1, fp
   1c638:	mov	r2, sl
   1c63c:	mov	r0, r9
   1c640:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c644:	mov	fp, r0
   1c648:	b	1c034 <_start@@Base+0x6e58>
   1c64c:	mov	r1, fp
   1c650:	mov	r2, sl
   1c654:	mov	r0, r9
   1c658:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c65c:	mov	fp, r0
   1c660:	b	1c034 <_start@@Base+0x6e58>
   1c664:	mov	r1, fp
   1c668:	mov	r2, sl
   1c66c:	mov	r0, r9
   1c670:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c674:	mov	fp, r0
   1c678:	b	1c034 <_start@@Base+0x6e58>
   1c67c:	mov	r1, fp
   1c680:	mov	r2, sl
   1c684:	mov	r0, r9
   1c688:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c68c:	mov	fp, r0
   1c690:	b	1c034 <_start@@Base+0x6e58>
   1c694:	add	r3, pc, #404	; 0x194
   1c698:	ldrd	r2, [r3]
   1c69c:	cmp	r1, r3
   1c6a0:	cmpeq	r0, r2
   1c6a4:	bls	1cbd4 <_start@@Base+0x79f8>
   1c6a8:	add	r3, pc, #392	; 0x188
   1c6ac:	ldrd	r2, [r3]
   1c6b0:	cmp	r1, r3
   1c6b4:	cmpeq	r0, r2
   1c6b8:	beq	1ea18 <_start@@Base+0x983c>
   1c6bc:	add	r3, pc, #380	; 0x17c
   1c6c0:	ldrd	r2, [r3]
   1c6c4:	cmp	r1, r3
   1c6c8:	cmpeq	r0, r2
   1c6cc:	bne	1e824 <_start@@Base+0x9648>
   1c6d0:	sub	r3, sl, fp
   1c6d4:	cmp	r3, #8
   1c6d8:	bgt	1f424 <_start@@Base+0xa248>
   1c6dc:	add	fp, fp, #8
   1c6e0:	mov	r0, fp
   1c6e4:	mov	r1, sl
   1c6e8:	bl	15308 <_start@@Base+0x12c>
   1c6ec:	mov	r0, #0
   1c6f0:	and	r1, r1, #-16777216	; 0xff000000
   1c6f4:	cmp	r1, #1627389952	; 0x61000000
   1c6f8:	cmpeq	r0, #0
   1c6fc:	bne	1f710 <_start@@Base+0xa534>
   1c700:	sub	r3, sl, fp
   1c704:	cmp	r3, #1
   1c708:	ble	1fbc4 <_start@@Base+0xa9e8>
   1c70c:	mov	r3, #1
   1c710:	mov	r2, sl
   1c714:	mov	r1, fp
   1c718:	mov	r0, r9
   1c71c:	bl	18f38 <_start@@Base+0x3d5c>
   1c720:	cmp	fp, r0
   1c724:	mov	r4, r0
   1c728:	beq	1fbc8 <_start@@Base+0xa9ec>
   1c72c:	mov	r0, #0
   1c730:	mov	r1, #0
   1c734:	add	r5, sp, #144	; 0x90
   1c738:	mov	r2, sl
   1c73c:	strd	r0, [r5, #-8]!
   1c740:	mov	r1, r4
   1c744:	mov	r3, r5
   1c748:	mov	r0, r9
   1c74c:	bl	178bc <_start@@Base+0x26e0>
   1c750:	cmp	r0, r4
   1c754:	mov	fp, r0
   1c758:	beq	1fc10 <_start@@Base+0xaa34>
   1c75c:	ldrd	r2, [sp, #136]	; 0x88
   1c760:	orrs	r3, r2, r3
   1c764:	bne	1c774 <_start@@Base+0x7598>
   1c768:	ldr	r3, [r9, #8]
   1c76c:	tst	r3, #2
   1c770:	beq	1c034 <_start@@Base+0x6e58>
   1c774:	mov	r3, #8
   1c778:	mov	r2, r3
   1c77c:	mov	r1, #23
   1c780:	ldr	r0, [r9]
   1c784:	bl	29488 <flatcc_builder_table_add@@Base>
   1c788:	cmp	r0, #0
   1c78c:	beq	1fcf4 <_start@@Base+0xab18>
   1c790:	ldrd	r2, [sp, #136]	; 0x88
   1c794:	strd	r2, [r0]
   1c798:	b	1c034 <_start@@Base+0x6e58>
   1c79c:	mov	r1, fp
   1c7a0:	mov	r2, sl
   1c7a4:	mov	r0, r9
   1c7a8:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c7ac:	mov	fp, r0
   1c7b0:	b	1c034 <_start@@Base+0x6e58>
   1c7b4:	mov	r1, fp
   1c7b8:	mov	r2, sl
   1c7bc:	mov	r0, r9
   1c7c0:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c7c4:	mov	fp, r0
   1c7c8:	b	1c034 <_start@@Base+0x6e58>
   1c7cc:	mov	r4, r0
   1c7d0:	mov	r1, r4
   1c7d4:	mov	r2, sl
   1c7d8:	mov	r0, r9
   1c7dc:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c7e0:	mov	fp, r0
   1c7e4:	b	1c034 <_start@@Base+0x6e58>
   1c7e8:	mov	r1, r4
   1c7ec:	mov	r2, sl
   1c7f0:	mov	r0, r9
   1c7f4:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c7f8:	mov	fp, r0
   1c7fc:	b	1c034 <_start@@Base+0x6e58>
   1c800:	mov	r1, r4
   1c804:	mov	r2, sl
   1c808:	mov	r0, r9
   1c80c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c810:	mov	fp, r0
   1c814:	b	1c034 <_start@@Base+0x6e58>
   1c818:	rsbvc	r6, r1, r5, ror #6
   1c81c:	smcvs	54867	; 0xd653
   1c820:			; <UNDEFINED> instruction: 0x666e7630
   1c824:	teqvc	r6, #1593835520	; 0x5f000000
   1c828:			; <UNDEFINED> instruction: 0x666e7631
   1c82c:	teqvc	r3, #-268435451	; 0xf0000005
   1c830:			; <UNDEFINED> instruction: 0x666e7630
   1c834:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1c838:			; <UNDEFINED> instruction: 0x666e7631
   1c83c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1c840:			; <UNDEFINED> instruction: 0x666e7631
   1c844:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1c848:			; <UNDEFINED> instruction: 0xffff0000
   1c84c:	ldrtcc	r0, [r4], -r0
   1c850:	cmp	r3, #6
   1c854:	bgt	1d098 <_start@@Base+0x7ebc>
   1c858:	mov	r1, fp
   1c85c:	mov	r2, sl
   1c860:	mov	r0, r9
   1c864:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c868:	mov	fp, r0
   1c86c:	b	1c034 <_start@@Base+0x6e58>
   1c870:	mov	r3, #5
   1c874:	mov	r2, sl
   1c878:	mov	r1, fp
   1c87c:	mov	r0, r9
   1c880:	bl	18f38 <_start@@Base+0x3d5c>
   1c884:	cmp	r0, fp
   1c888:	mov	r4, r0
   1c88c:	beq	1c1fc <_start@@Base+0x7020>
   1c890:	mov	r0, #0
   1c894:	mov	r1, #0
   1c898:	mov	r3, #0
   1c89c:	cmp	sl, r4
   1c8a0:	strd	r0, [sp, #136]	; 0x88
   1c8a4:	strb	r3, [sp, #128]	; 0x80
   1c8a8:	str	r3, [sp, #132]	; 0x84
   1c8ac:	beq	1bb10 <_start@@Base+0x6934>
   1c8b0:	add	r3, sp, #136	; 0x88
   1c8b4:	str	r3, [sp]
   1c8b8:	mov	r2, sl
   1c8bc:	add	r3, sp, #132	; 0x84
   1c8c0:	mov	r1, r4
   1c8c4:	mov	r0, r9
   1c8c8:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1c8cc:	cmp	r4, r0
   1c8d0:	mov	fp, r0
   1c8d4:	beq	1bb0c <_start@@Base+0x6930>
   1c8d8:	ldr	r1, [sp, #132]	; 0x84
   1c8dc:	ldrd	r2, [sp, #136]	; 0x88
   1c8e0:	cmp	r1, #0
   1c8e4:	bne	1c938 <_start@@Base+0x775c>
   1c8e8:	cmp	r3, #0
   1c8ec:	cmpeq	r2, #127	; 0x7f
   1c8f0:	sxtbls	r2, r2
   1c8f4:	strbls	r2, [sp, #128]	; 0x80
   1c8f8:	bhi	1eae0 <_start@@Base+0x9904>
   1c8fc:	cmp	r2, #8
   1c900:	bne	1c910 <_start@@Base+0x7734>
   1c904:	ldr	r3, [r9, #8]
   1c908:	tst	r3, #2
   1c90c:	beq	1c034 <_start@@Base+0x6e58>
   1c910:	mov	r3, #1
   1c914:	mov	r2, r3
   1c918:	mov	r1, #6
   1c91c:	ldr	r0, [r9]
   1c920:	bl	29488 <flatcc_builder_table_add@@Base>
   1c924:	cmp	r0, #0
   1c928:	beq	1f8b8 <_start@@Base+0xa6dc>
   1c92c:	ldrsb	r3, [sp, #128]	; 0x80
   1c930:	strb	r3, [r0]
   1c934:	b	1c034 <_start@@Base+0x6e58>
   1c938:	cmp	r3, #0
   1c93c:	cmpeq	r2, #128	; 0x80
   1c940:	rsbls	r2, r2, #0
   1c944:	sxtbls	r2, r2
   1c948:	strbls	r2, [sp, #128]	; 0x80
   1c94c:	bls	1c8fc <_start@@Base+0x7720>
   1c950:	mov	r1, r0
   1c954:	mov	r3, #8
   1c958:	mov	r2, sl
   1c95c:	mov	r0, r9
   1c960:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1c964:	mov	fp, r0
   1c968:	cmp	r4, fp
   1c96c:	beq	1bb10 <_start@@Base+0x6934>
   1c970:	ldrsb	r2, [sp, #128]	; 0x80
   1c974:	b	1c8fc <_start@@Base+0x7720>
   1c978:	sub	r3, sl, fp
   1c97c:	cmp	r3, #4
   1c980:	bgt	1e898 <_start@@Base+0x96bc>
   1c984:	mov	r1, fp
   1c988:	mov	r2, sl
   1c98c:	mov	r0, r9
   1c990:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c994:	mov	fp, r0
   1c998:	b	1c034 <_start@@Base+0x6e58>
   1c99c:	add	r4, fp, #16
   1c9a0:	mov	r0, r4
   1c9a4:	mov	r1, sl
   1c9a8:	bl	15308 <_start@@Base+0x12c>
   1c9ac:	add	r3, pc, #844	; 0x34c
   1c9b0:	ldrd	r2, [r3]
   1c9b4:	mov	r0, #0
   1c9b8:	cmp	r1, r3
   1c9bc:	cmpeq	r0, r2
   1c9c0:	bne	1e678 <_start@@Base+0x949c>
   1c9c4:	sub	r3, sl, r4
   1c9c8:	cmp	r3, #4
   1c9cc:	bgt	1f1a0 <_start@@Base+0x9fc4>
   1c9d0:	mov	r1, r4
   1c9d4:	mov	r2, sl
   1c9d8:	mov	r0, r9
   1c9dc:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c9e0:	mov	fp, r0
   1c9e4:	b	1c034 <_start@@Base+0x6e58>
   1c9e8:	sub	r3, sl, r4
   1c9ec:	cmp	r3, #1
   1c9f0:	ble	1f0c4 <_start@@Base+0x9ee8>
   1c9f4:	mov	r3, #1
   1c9f8:	mov	r2, sl
   1c9fc:	mov	r1, r4
   1ca00:	mov	r0, r9
   1ca04:	bl	18f38 <_start@@Base+0x3d5c>
   1ca08:	cmp	r4, r0
   1ca0c:	mov	fp, r0
   1ca10:	beq	1f0c0 <_start@@Base+0x9ee4>
   1ca14:	mov	r3, #0
   1ca18:	mov	r1, #3
   1ca1c:	ldr	r0, [r9]
   1ca20:	str	r3, [sp, #116]	; 0x74
   1ca24:	bl	27a48 <flatcc_builder_start_table@@Base>
   1ca28:	cmp	r0, #0
   1ca2c:	bne	1dd68 <_start@@Base+0x8b8c>
   1ca30:	add	r6, sp, #124	; 0x7c
   1ca34:	mov	r1, fp
   1ca38:	mov	r3, r6
   1ca3c:	mov	r2, sl
   1ca40:	mov	r0, r9
   1ca44:	bl	17c8c <_start@@Base+0x2ab0>
   1ca48:	ldr	r3, [sp, #124]	; 0x7c
   1ca4c:	cmp	r3, #0
   1ca50:	mov	fp, r0
   1ca54:	beq	1dd48 <_start@@Base+0x8b6c>
   1ca58:	ldr	r2, [pc, #712]	; 1cd28 <_start@@Base+0x7b4c>
   1ca5c:	ldr	r3, [pc, #712]	; 1cd2c <_start@@Base+0x7b50>
   1ca60:	add	r2, pc, r2
   1ca64:	add	r3, pc, r3
   1ca68:	add	r2, r2, #344	; 0x158
   1ca6c:	str	r2, [sp, #92]	; 0x5c
   1ca70:	add	r8, r3, #332	; 0x14c
   1ca74:	mov	r7, #5
   1ca78:	b	1cad8 <_start@@Base+0x78fc>
   1ca7c:	add	r3, pc, #644	; 0x284
   1ca80:	ldrd	r2, [r3]
   1ca84:	and	r0, r0, #-16777216	; 0xff000000
   1ca88:	cmp	r1, r3
   1ca8c:	cmpeq	r0, r2
   1ca90:	bne	1caa0 <_start@@Base+0x78c4>
   1ca94:	sub	r3, sl, fp
   1ca98:	cmp	r3, #5
   1ca9c:	bgt	1d478 <_start@@Base+0x829c>
   1caa0:	mov	r1, fp
   1caa4:	mov	r2, sl
   1caa8:	mov	r0, r9
   1caac:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cab0:	mov	fp, r0
   1cab4:	mov	r1, fp
   1cab8:	mov	r3, r6
   1cabc:	mov	r2, sl
   1cac0:	mov	r0, r9
   1cac4:	bl	19b94 <_start@@Base+0x49b8>
   1cac8:	ldr	r3, [sp, #124]	; 0x7c
   1cacc:	cmp	r3, #0
   1cad0:	mov	fp, r0
   1cad4:	beq	1dd48 <_start@@Base+0x8b6c>
   1cad8:	cmp	sl, fp
   1cadc:	beq	1cb08 <_start@@Base+0x792c>
   1cae0:	ldrb	r3, [fp]
   1cae4:	cmp	r3, #34	; 0x22
   1cae8:	addeq	fp, fp, #1
   1caec:	beq	1cb08 <_start@@Base+0x792c>
   1caf0:	mov	r1, fp
   1caf4:	mov	r3, r7
   1caf8:	mov	r2, sl
   1cafc:	mov	r0, r9
   1cb00:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1cb04:	mov	fp, r0
   1cb08:	mov	r1, sl
   1cb0c:	mov	r0, fp
   1cb10:	bl	15308 <_start@@Base+0x12c>
   1cb14:	ldr	r3, [pc, #532]	; 1cd30 <_start@@Base+0x7b54>
   1cb18:	mvn	r2, #0
   1cb1c:	cmp	r1, r3
   1cb20:	cmpeq	r0, r2
   1cb24:	bls	1ca7c <_start@@Base+0x78a0>
   1cb28:	add	r3, pc, #480	; 0x1e0
   1cb2c:	ldrd	r2, [r3]
   1cb30:	bic	r5, r1, #255	; 0xff
   1cb34:	mov	r4, #0
   1cb38:	cmp	r5, r3
   1cb3c:	cmpeq	r4, r2
   1cb40:	beq	1d2fc <_start@@Base+0x8120>
   1cb44:	ldr	r3, [pc, #488]	; 1cd34 <_start@@Base+0x7b58>
   1cb48:	mov	r2, #0
   1cb4c:	and	r1, r1, r3
   1cb50:	ldr	r3, [pc, #480]	; 1cd38 <_start@@Base+0x7b5c>
   1cb54:	and	r0, r0, r2
   1cb58:	cmp	r1, r3
   1cb5c:	mov	r2, #0
   1cb60:	cmpeq	r0, r2
   1cb64:	bne	1caa0 <_start@@Base+0x78c4>
   1cb68:	sub	r3, sl, fp
   1cb6c:	cmp	r3, #2
   1cb70:	ble	1caa0 <_start@@Base+0x78c4>
   1cb74:	mov	r1, fp
   1cb78:	mov	r3, #2
   1cb7c:	mov	r2, sl
   1cb80:	mov	r0, r9
   1cb84:	bl	18f38 <_start@@Base+0x3d5c>
   1cb88:	cmp	fp, r0
   1cb8c:	mov	r1, r0
   1cb90:	beq	1caa0 <_start@@Base+0x78c4>
   1cb94:	add	r3, sp, #128	; 0x80
   1cb98:	mov	r2, sl
   1cb9c:	mov	r0, r9
   1cba0:	bl	2f254 <flatcc_json_parser_build_string@@Base>
   1cba4:	ldr	r3, [sp, #128]	; 0x80
   1cba8:	cmp	r3, #0
   1cbac:	mov	fp, r0
   1cbb0:	beq	1dd68 <_start@@Base+0x8b8c>
   1cbb4:	mov	r1, #0
   1cbb8:	ldr	r0, [r9]
   1cbbc:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1cbc0:	cmp	r0, #0
   1cbc4:	beq	1dd68 <_start@@Base+0x8b8c>
   1cbc8:	ldr	r3, [sp, #128]	; 0x80
   1cbcc:	str	r3, [r0]
   1cbd0:	b	1cab4 <_start@@Base+0x78d8>
   1cbd4:	add	r3, pc, #316	; 0x13c
   1cbd8:	ldrd	r2, [r3]
   1cbdc:	cmp	r1, r3
   1cbe0:	cmpeq	r0, r2
   1cbe4:	bne	1e784 <_start@@Base+0x95a8>
   1cbe8:	sub	r3, sl, fp
   1cbec:	cmp	r3, #8
   1cbf0:	bgt	1f260 <_start@@Base+0xa084>
   1cbf4:	add	fp, fp, #8
   1cbf8:	mov	r0, fp
   1cbfc:	mov	r1, sl
   1cc00:	bl	15308 <_start@@Base+0x12c>
   1cc04:	mov	r0, #0
   1cc08:	and	r1, r1, #-16777216	; 0xff000000
   1cc0c:	cmp	r1, #1627389952	; 0x61000000
   1cc10:	cmpeq	r0, #0
   1cc14:	bne	1f59c <_start@@Base+0xa3c0>
   1cc18:	sub	r3, sl, fp
   1cc1c:	cmp	r3, #1
   1cc20:	ble	1f9fc <_start@@Base+0xa820>
   1cc24:	mov	r3, #1
   1cc28:	mov	r2, sl
   1cc2c:	mov	r1, fp
   1cc30:	mov	r0, r9
   1cc34:	bl	18f38 <_start@@Base+0x3d5c>
   1cc38:	cmp	fp, r0
   1cc3c:	mov	r4, r0
   1cc40:	beq	1fa00 <_start@@Base+0xa824>
   1cc44:	mov	r0, #0
   1cc48:	mov	r1, #0
   1cc4c:	add	r5, sp, #144	; 0x90
   1cc50:	mov	r2, sl
   1cc54:	strd	r0, [r5, #-8]!
   1cc58:	mov	r1, r4
   1cc5c:	mov	r3, r5
   1cc60:	mov	r0, r9
   1cc64:	bl	177f4 <_start@@Base+0x2618>
   1cc68:	cmp	r0, r4
   1cc6c:	mov	fp, r0
   1cc70:	beq	1fee0 <_start@@Base+0xad04>
   1cc74:	ldrd	r2, [sp, #136]	; 0x88
   1cc78:	orrs	r3, r2, r3
   1cc7c:	bne	1cc8c <_start@@Base+0x7ab0>
   1cc80:	ldr	r3, [r9, #8]
   1cc84:	tst	r3, #2
   1cc88:	beq	1c034 <_start@@Base+0x6e58>
   1cc8c:	mov	r3, #8
   1cc90:	mov	r2, r3
   1cc94:	mov	r1, #22
   1cc98:	ldr	r0, [r9]
   1cc9c:	bl	29488 <flatcc_builder_table_add@@Base>
   1cca0:	cmp	r0, #0
   1cca4:	beq	1fe1c <_start@@Base+0xac40>
   1cca8:	ldrd	r2, [sp, #136]	; 0x88
   1ccac:	strd	r2, [r0]
   1ccb0:	b	1c034 <_start@@Base+0x6e58>
   1ccb4:	add	fp, fp, #16
   1ccb8:	mov	r0, fp
   1ccbc:	mov	r1, sl
   1ccc0:	bl	15308 <_start@@Base+0x12c>
   1ccc4:	add	r3, pc, #84	; 0x54
   1ccc8:	ldrd	r2, [r3]
   1cccc:	and	r0, r0, #-16777216	; 0xff000000
   1ccd0:	cmp	r1, r3
   1ccd4:	cmpeq	r0, r2
   1ccd8:	bne	1e79c <_start@@Base+0x95c0>
   1ccdc:	sub	r3, sl, fp
   1cce0:	cmp	r3, #5
   1cce4:	bgt	1f35c <_start@@Base+0xa180>
   1cce8:	mov	r1, fp
   1ccec:	mov	r2, sl
   1ccf0:	mov	r0, r9
   1ccf4:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ccf8:	mov	fp, r0
   1ccfc:	b	1c034 <_start@@Base+0x6e58>
   1cd00:	andeq	r0, r0, r0
   1cd04:			; <UNDEFINED> instruction: 0x66666572
   1cd08:	strvc	r0, [r0], #-0
   1cd0c:	cmnvs	pc, #461373440	; 0x1b800000
   1cd10:	andeq	r0, r0, r0
   1cd14:	strbtvc	r6, [r1], -r0, lsl #24
   1cd18:			; <UNDEFINED> instruction: 0x666e7631
   1cd1c:	teqvc	r6, #1593835520	; 0x5f000000
   1cd20:	strvc	r0, [r0], #-0
   1cd24:	svcpl	0x00746573
   1cd28:	andeq	r7, r3, r0, lsr #12
   1cd2c:	andeq	r7, r3, ip, lsl r6
   1cd30:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1cd34:			; <UNDEFINED> instruction: 0xffff0000
   1cd38:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1cd3c:	submi	r0, r0, r0
   1cd40:	sub	r3, sl, fp
   1cd44:	cmp	r3, #8
   1cd48:	bgt	1eafc <_start@@Base+0x9920>
   1cd4c:	add	fp, fp, #8
   1cd50:	mov	r0, fp
   1cd54:	mov	r1, sl
   1cd58:	bl	15308 <_start@@Base+0x12c>
   1cd5c:	mov	r0, #0
   1cd60:	and	r1, r1, #-16777216	; 0xff000000
   1cd64:	cmp	r1, #1627389952	; 0x61000000
   1cd68:	cmpeq	r0, #0
   1cd6c:	bne	1f248 <_start@@Base+0xa06c>
   1cd70:	sub	r3, sl, fp
   1cd74:	cmp	r3, #1
   1cd78:	ble	1fa88 <_start@@Base+0xa8ac>
   1cd7c:	mov	r3, #1
   1cd80:	mov	r2, sl
   1cd84:	mov	r1, fp
   1cd88:	mov	r0, r9
   1cd8c:	bl	18f38 <_start@@Base+0x3d5c>
   1cd90:	cmp	fp, r0
   1cd94:	mov	r4, r0
   1cd98:	beq	1fa88 <_start@@Base+0xa8ac>
   1cd9c:	add	r5, sp, #144	; 0x90
   1cda0:	mov	r3, #0
   1cda4:	str	r3, [r5, #-8]!
   1cda8:	mov	r1, r0
   1cdac:	mov	r2, sl
   1cdb0:	mov	r3, r5
   1cdb4:	mov	r0, r9
   1cdb8:	bl	17ac0 <_start@@Base+0x28e4>
   1cdbc:	cmp	r0, r4
   1cdc0:	mov	fp, r0
   1cdc4:	beq	1ff40 <_start@@Base+0xad64>
   1cdc8:	ldr	r3, [sp, #136]	; 0x88
   1cdcc:	cmp	r3, #0
   1cdd0:	bne	1cde0 <_start@@Base+0x7c04>
   1cdd4:	ldr	r3, [r9, #8]
   1cdd8:	tst	r3, #2
   1cddc:	beq	1c034 <_start@@Base+0x6e58>
   1cde0:	mov	r3, #4
   1cde4:	mov	r2, r3
   1cde8:	mov	r1, #20
   1cdec:	ldr	r0, [r9]
   1cdf0:	bl	29488 <flatcc_builder_table_add@@Base>
   1cdf4:	cmp	r0, #0
   1cdf8:	beq	1fc98 <_start@@Base+0xaabc>
   1cdfc:	ldr	r3, [sp, #136]	; 0x88
   1ce00:	str	r3, [r0]
   1ce04:	b	1c034 <_start@@Base+0x6e58>
   1ce08:	sub	r3, sl, r4
   1ce0c:	cmp	r3, #7
   1ce10:	bgt	1eb88 <_start@@Base+0x99ac>
   1ce14:	mov	r1, r4
   1ce18:	mov	r2, sl
   1ce1c:	mov	r0, r9
   1ce20:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce24:	mov	fp, r0
   1ce28:	b	1c034 <_start@@Base+0x6e58>
   1ce2c:	mov	r1, fp
   1ce30:	mov	r2, sl
   1ce34:	mov	r0, r9
   1ce38:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce3c:	mov	fp, r0
   1ce40:	b	1c034 <_start@@Base+0x6e58>
   1ce44:	sub	r3, sl, r4
   1ce48:	cmp	r3, #7
   1ce4c:	bgt	1ed3c <_start@@Base+0x9b60>
   1ce50:	mov	r1, r4
   1ce54:	mov	r2, sl
   1ce58:	mov	r0, r9
   1ce5c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce60:	mov	fp, r0
   1ce64:	b	1c034 <_start@@Base+0x6e58>
   1ce68:	mov	r3, #5
   1ce6c:	mov	r2, sl
   1ce70:	mov	r1, fp
   1ce74:	mov	r0, r9
   1ce78:	bl	18f38 <_start@@Base+0x3d5c>
   1ce7c:	cmp	fp, r0
   1ce80:	mov	r4, r0
   1ce84:	beq	1c484 <_start@@Base+0x72a8>
   1ce88:	mvn	r3, #-1073741824	; 0xc0000000
   1ce8c:	mov	r2, #2
   1ce90:	mov	r1, #4
   1ce94:	ldr	r0, [r9]
   1ce98:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1ce9c:	cmp	r0, #0
   1cea0:	bne	1f9a4 <_start@@Base+0xa7c8>
   1cea4:	ldr	r5, [sp, #72]	; 0x48
   1cea8:	mov	r1, r4
   1ceac:	mov	r3, r5
   1ceb0:	mov	r2, sl
   1ceb4:	mov	r0, r9
   1ceb8:	bl	18e84 <_start@@Base+0x3ca8>
   1cebc:	ldr	r3, [sp, #112]	; 0x70
   1cec0:	cmp	r3, #0
   1cec4:	mov	fp, r0
   1cec8:	beq	1ddac <_start@@Base+0x8bd0>
   1cecc:	mov	r4, #1
   1ced0:	b	1cefc <_start@@Base+0x7d20>
   1ced4:	bl	1af80 <_start@@Base+0x5da4>
   1ced8:	mov	r3, r5
   1cedc:	mov	r2, sl
   1cee0:	mov	r1, r0
   1cee4:	mov	r0, r9
   1cee8:	bl	19a10 <_start@@Base+0x4834>
   1ceec:	ldr	r3, [sp, #112]	; 0x70
   1cef0:	cmp	r3, #0
   1cef4:	mov	fp, r0
   1cef8:	beq	1ddac <_start@@Base+0x8bd0>
   1cefc:	mov	r1, r4
   1cf00:	ldr	r0, [r9]
   1cf04:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1cf08:	mov	r1, fp
   1cf0c:	mov	r2, sl
   1cf10:	subs	r3, r0, #0
   1cf14:	mov	r0, r9
   1cf18:	bne	1ced4 <_start@@Base+0x7cf8>
   1cf1c:	mov	sl, r9
   1cf20:	mov	r9, r2
   1cf24:	b	1bb50 <_start@@Base+0x6974>
   1cf28:	sub	r3, sl, r4
   1cf2c:	cmp	r3, #1
   1cf30:	ble	1f4b8 <_start@@Base+0xa2dc>
   1cf34:	mov	r3, #1
   1cf38:	mov	r2, sl
   1cf3c:	mov	r1, r4
   1cf40:	mov	r0, r9
   1cf44:	bl	18f38 <_start@@Base+0x3d5c>
   1cf48:	cmp	r4, r0
   1cf4c:	mov	fp, r0
   1cf50:	beq	1f4b4 <_start@@Base+0xa2d8>
   1cf54:	ldr	r0, [r9]
   1cf58:	bl	27860 <flatcc_builder_start_offset_vector@@Base>
   1cf5c:	cmp	r0, #0
   1cf60:	bne	1f9ec <_start@@Base+0xa810>
   1cf64:	ldr	r6, [sp, #72]	; 0x48
   1cf68:	mov	r1, fp
   1cf6c:	mov	r3, r6
   1cf70:	mov	r2, sl
   1cf74:	mov	r0, r9
   1cf78:	bl	18e84 <_start@@Base+0x3ca8>
   1cf7c:	ldr	r3, [sp, #112]	; 0x70
   1cf80:	cmp	r3, #0
   1cf84:	mov	fp, r0
   1cf88:	beq	1f08c <_start@@Base+0x9eb0>
   1cf8c:	add	r4, sp, #116	; 0x74
   1cf90:	mov	r5, #1
   1cf94:	b	1cfd4 <_start@@Base+0x7df8>
   1cf98:	ldr	r0, [r9]
   1cf9c:	bl	271f8 <flatcc_builder_extend_offset_vector@@Base>
   1cfa0:	mov	r3, r6
   1cfa4:	mov	r2, sl
   1cfa8:	mov	r1, fp
   1cfac:	subs	ip, r0, #0
   1cfb0:	mov	r0, r9
   1cfb4:	beq	1f080 <_start@@Base+0x9ea4>
   1cfb8:	ldr	lr, [sp, #116]	; 0x74
   1cfbc:	str	lr, [ip]
   1cfc0:	bl	19a10 <_start@@Base+0x4834>
   1cfc4:	ldr	r3, [sp, #112]	; 0x70
   1cfc8:	cmp	r3, #0
   1cfcc:	mov	fp, r0
   1cfd0:	beq	1f08c <_start@@Base+0x9eb0>
   1cfd4:	mov	r1, fp
   1cfd8:	mov	r3, r4
   1cfdc:	mov	r2, sl
   1cfe0:	mov	r0, r9
   1cfe4:	bl	1b980 <_start@@Base+0x67a4>
   1cfe8:	ldr	r3, [sp, #116]	; 0x74
   1cfec:	mov	r1, r5
   1cff0:	cmp	r3, #0
   1cff4:	mov	fp, r0
   1cff8:	bne	1cf98 <_start@@Base+0x7dbc>
   1cffc:	mov	r3, sl
   1d000:	mov	sl, r9
   1d004:	mov	r9, r3
   1d008:	b	1bb50 <_start@@Base+0x6974>
   1d00c:	mov	r3, #2
   1d010:	mov	r2, sl
   1d014:	mov	r1, fp
   1d018:	mov	r0, r9
   1d01c:	bl	18f38 <_start@@Base+0x3d5c>
   1d020:	cmp	fp, r0
   1d024:	mov	r5, r0
   1d028:	beq	1c138 <_start@@Base+0x6f5c>
   1d02c:	add	r4, sp, #144	; 0x90
   1d030:	mov	r3, #0
   1d034:	strh	r3, [r4, #-8]!
   1d038:	mov	r1, r0
   1d03c:	mov	r2, sl
   1d040:	mov	r3, r4
   1d044:	mov	r0, r9
   1d048:	bl	17b88 <_start@@Base+0x29ac>
   1d04c:	cmp	r0, r5
   1d050:	mov	fp, r0
   1d054:	beq	1f3f0 <_start@@Base+0xa214>
   1d058:	ldrsh	r3, [sp, #136]	; 0x88
   1d05c:	cmp	r3, #100	; 0x64
   1d060:	bne	1d070 <_start@@Base+0x7e94>
   1d064:	ldr	r3, [r9, #8]
   1d068:	tst	r3, #2
   1d06c:	beq	1c034 <_start@@Base+0x6e58>
   1d070:	mov	r3, #2
   1d074:	mov	r2, r3
   1d078:	mov	r1, r3
   1d07c:	ldr	r0, [r9]
   1d080:	bl	29488 <flatcc_builder_table_add@@Base>
   1d084:	cmp	r0, #0
   1d088:	beq	1fb74 <_start@@Base+0xa998>
   1d08c:	ldrsh	r3, [sp, #136]	; 0x88
   1d090:	strh	r3, [r0]
   1d094:	b	1c034 <_start@@Base+0x6e58>
   1d098:	mov	r3, #6
   1d09c:	mov	r2, sl
   1d0a0:	mov	r1, fp
   1d0a4:	mov	r0, r9
   1d0a8:	bl	18f38 <_start@@Base+0x3d5c>
   1d0ac:	cmp	fp, r0
   1d0b0:	mov	r5, r0
   1d0b4:	beq	1c858 <_start@@Base+0x767c>
   1d0b8:	add	r4, sp, #144	; 0x90
   1d0bc:	mov	r3, #0
   1d0c0:	mov	r1, r0
   1d0c4:	str	r3, [r4, #-8]!
   1d0c8:	mov	r2, sl
   1d0cc:	mov	r0, r9
   1d0d0:	mov	r3, r4
   1d0d4:	bl	2dc58 <flatcc_json_parser_float@@Base>
   1d0d8:	cmp	r0, r5
   1d0dc:	mov	fp, r0
   1d0e0:	beq	1f5b4 <_start@@Base+0xa3d8>
   1d0e4:	vldr	s15, [pc, #-944]	; 1cd3c <_start@@Base+0x7b60>
   1d0e8:	vldr	s14, [sp, #136]	; 0x88
   1d0ec:	vcmp.f32	s14, s15
   1d0f0:	vmrs	APSR_nzcv, fpscr
   1d0f4:	bne	1d104 <_start@@Base+0x7f28>
   1d0f8:	ldr	r3, [r9, #8]
   1d0fc:	tst	r3, #2
   1d100:	beq	1c034 <_start@@Base+0x6e58>
   1d104:	mov	r3, #4
   1d108:	mov	r2, r3
   1d10c:	mov	r1, #26
   1d110:	ldr	r0, [r9]
   1d114:	bl	29488 <flatcc_builder_table_add@@Base>
   1d118:	cmp	r0, #0
   1d11c:	beq	1fb94 <_start@@Base+0xa9b8>
   1d120:	ldr	r3, [sp, #136]	; 0x88
   1d124:	str	r3, [r0]
   1d128:	b	1c034 <_start@@Base+0x6e58>
   1d12c:	mov	r3, #2
   1d130:	mov	r2, sl
   1d134:	mov	r1, r4
   1d138:	mov	r0, r9
   1d13c:	bl	18f38 <_start@@Base+0x3d5c>
   1d140:	cmp	r4, r0
   1d144:	mov	fp, r0
   1d148:	beq	1fd20 <_start@@Base+0xab44>
   1d14c:	mov	r3, #0
   1d150:	mov	r1, #3
   1d154:	ldr	r0, [r9]
   1d158:	str	r3, [sp, #116]	; 0x74
   1d15c:	bl	27a48 <flatcc_builder_start_table@@Base>
   1d160:	cmp	r0, #0
   1d164:	bne	1d400 <_start@@Base+0x8224>
   1d168:	add	r4, sp, #132	; 0x84
   1d16c:	mov	r1, fp
   1d170:	mov	r3, r4
   1d174:	mov	r2, sl
   1d178:	mov	r0, r9
   1d17c:	bl	17c8c <_start@@Base+0x2ab0>
   1d180:	ldr	r3, [sp, #132]	; 0x84
   1d184:	cmp	r3, #0
   1d188:	mov	fp, r0
   1d18c:	beq	1e9d0 <_start@@Base+0x97f4>
   1d190:	mov	r8, #5
   1d194:	b	1d1f4 <_start@@Base+0x8018>
   1d198:	add	r3, pc, #936	; 0x3a8
   1d19c:	ldrd	r2, [r3]
   1d1a0:	mov	r0, #0
   1d1a4:	cmp	r1, r3
   1d1a8:	cmpeq	r0, r2
   1d1ac:	bne	1d1bc <_start@@Base+0x7fe0>
   1d1b0:	sub	r3, sl, fp
   1d1b4:	cmp	r3, #4
   1d1b8:	bgt	1d8d0 <_start@@Base+0x86f4>
   1d1bc:	mov	r1, fp
   1d1c0:	mov	r2, sl
   1d1c4:	mov	r0, r9
   1d1c8:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d1cc:	mov	fp, r0
   1d1d0:	mov	r1, fp
   1d1d4:	mov	r3, r4
   1d1d8:	mov	r2, sl
   1d1dc:	mov	r0, r9
   1d1e0:	bl	19b94 <_start@@Base+0x49b8>
   1d1e4:	ldr	r3, [sp, #132]	; 0x84
   1d1e8:	cmp	r3, #0
   1d1ec:	mov	fp, r0
   1d1f0:	beq	1e9d0 <_start@@Base+0x97f4>
   1d1f4:	cmp	sl, fp
   1d1f8:	beq	1d224 <_start@@Base+0x8048>
   1d1fc:	ldrb	r3, [fp]
   1d200:	cmp	r3, #34	; 0x22
   1d204:	addeq	fp, fp, #1
   1d208:	beq	1d224 <_start@@Base+0x8048>
   1d20c:	mov	r1, fp
   1d210:	mov	r3, r8
   1d214:	mov	r2, sl
   1d218:	mov	r0, r9
   1d21c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1d220:	mov	fp, r0
   1d224:	mov	r1, sl
   1d228:	mov	r0, fp
   1d22c:	bl	15308 <_start@@Base+0x12c>
   1d230:	add	r3, pc, #792	; 0x318
   1d234:	ldrd	r2, [r3]
   1d238:	cmp	r1, r3
   1d23c:	cmpeq	r0, r2
   1d240:	bls	1d198 <_start@@Base+0x7fbc>
   1d244:	add	r7, pc, #780	; 0x30c
   1d248:	ldrd	r6, [r7]
   1d24c:	bic	r2, r0, #255	; 0xff
   1d250:	cmp	r1, r7
   1d254:	cmpeq	r2, r6
   1d258:	beq	1d398 <_start@@Base+0x81bc>
   1d25c:	ldr	r2, [pc, #776]	; 1d56c <_start@@Base+0x8390>
   1d260:	mvn	r3, #0
   1d264:	and	r2, r2, r0
   1d268:	and	r3, r3, r1
   1d26c:	mov	r0, r2
   1d270:	mov	r1, r3
   1d274:	add	r3, pc, #740	; 0x2e4
   1d278:	ldrd	r2, [r3]
   1d27c:	cmp	r1, r3
   1d280:	cmpeq	r0, r2
   1d284:	bne	1d1bc <_start@@Base+0x7fe0>
   1d288:	sub	r3, sl, fp
   1d28c:	cmp	r3, #6
   1d290:	ble	1d1bc <_start@@Base+0x7fe0>
   1d294:	mov	r1, fp
   1d298:	mov	r3, #6
   1d29c:	mov	r2, sl
   1d2a0:	mov	r0, r9
   1d2a4:	bl	18f38 <_start@@Base+0x3d5c>
   1d2a8:	cmp	fp, r0
   1d2ac:	mov	r1, r0
   1d2b0:	beq	1d1bc <_start@@Base+0x7fe0>
   1d2b4:	mov	r3, #0
   1d2b8:	str	r3, [sp]
   1d2bc:	mov	r2, sl
   1d2c0:	add	r3, sp, #136	; 0x88
   1d2c4:	mov	r0, r9
   1d2c8:	bl	2ee5c <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d2cc:	ldr	r3, [sp, #136]	; 0x88
   1d2d0:	cmp	r3, #0
   1d2d4:	mov	fp, r0
   1d2d8:	beq	1d400 <_start@@Base+0x8224>
   1d2dc:	mov	r1, #2
   1d2e0:	ldr	r0, [r9]
   1d2e4:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1d2e8:	cmp	r0, #0
   1d2ec:	beq	1d400 <_start@@Base+0x8224>
   1d2f0:	ldr	r3, [sp, #136]	; 0x88
   1d2f4:	str	r3, [r0]
   1d2f8:	b	1d1d0 <_start@@Base+0x7ff4>
   1d2fc:	sub	r3, sl, fp
   1d300:	cmp	r3, #3
   1d304:	ble	1caa0 <_start@@Base+0x78c4>
   1d308:	mov	r3, #3
   1d30c:	mov	r2, sl
   1d310:	mov	r1, fp
   1d314:	mov	r0, r9
   1d318:	bl	18f38 <_start@@Base+0x3d5c>
   1d31c:	cmp	fp, r0
   1d320:	mov	r5, r0
   1d324:	beq	1caa0 <_start@@Base+0x78c4>
   1d328:	mov	r0, #0
   1d32c:	mov	r1, #0
   1d330:	add	r4, sp, #144	; 0x90
   1d334:	mov	r2, sl
   1d338:	strd	r0, [r4, #-8]!
   1d33c:	mov	r1, r5
   1d340:	mov	r3, r4
   1d344:	mov	r0, r9
   1d348:	bl	177f4 <_start@@Base+0x2618>
   1d34c:	cmp	r5, r0
   1d350:	mov	fp, r0
   1d354:	beq	1f2fc <_start@@Base+0xa120>
   1d358:	ldrd	r2, [sp, #136]	; 0x88
   1d35c:	orrs	r3, r2, r3
   1d360:	bne	1d370 <_start@@Base+0x8194>
   1d364:	ldr	r3, [r9, #8]
   1d368:	tst	r3, #2
   1d36c:	beq	1cab4 <_start@@Base+0x78d8>
   1d370:	mov	r3, #8
   1d374:	mov	r2, r3
   1d378:	mov	r1, #1
   1d37c:	ldr	r0, [r9]
   1d380:	bl	29488 <flatcc_builder_table_add@@Base>
   1d384:	cmp	r0, #0
   1d388:	beq	1dd68 <_start@@Base+0x8b8c>
   1d38c:	ldrd	r2, [sp, #136]	; 0x88
   1d390:	strd	r2, [r0]
   1d394:	b	1cab4 <_start@@Base+0x78d8>
   1d398:	sub	r3, sl, fp
   1d39c:	cmp	r3, #7
   1d3a0:	ble	1d1bc <_start@@Base+0x7fe0>
   1d3a4:	mov	r1, fp
   1d3a8:	mov	r3, #7
   1d3ac:	mov	r2, sl
   1d3b0:	mov	r0, r9
   1d3b4:	bl	18f38 <_start@@Base+0x3d5c>
   1d3b8:	cmp	fp, r0
   1d3bc:	mov	r1, r0
   1d3c0:	beq	1d1bc <_start@@Base+0x7fe0>
   1d3c4:	mov	r5, #1
   1d3c8:	add	r3, sp, #136	; 0x88
   1d3cc:	str	r5, [sp]
   1d3d0:	mov	r2, sl
   1d3d4:	mov	r0, r9
   1d3d8:	bl	2ee5c <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d3dc:	ldr	r3, [sp, #136]	; 0x88
   1d3e0:	cmp	r3, #0
   1d3e4:	mov	fp, r0
   1d3e8:	beq	1d400 <_start@@Base+0x8224>
   1d3ec:	mov	r1, r5
   1d3f0:	ldr	r0, [r9]
   1d3f4:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1d3f8:	cmp	r0, #0
   1d3fc:	bne	1d2f0 <_start@@Base+0x8114>
   1d400:	mov	r1, fp
   1d404:	mov	r3, #33	; 0x21
   1d408:	mov	r2, sl
   1d40c:	mov	r0, r9
   1d410:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1d414:	ldr	r3, [sp, #116]	; 0x74
   1d418:	cmp	r3, #0
   1d41c:	mov	fp, r0
   1d420:	beq	1fbb4 <_start@@Base+0xa9d8>
   1d424:	mov	r1, #35	; 0x23
   1d428:	ldr	r0, [r9]
   1d42c:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1d430:	cmp	r0, #0
   1d434:	beq	1fba4 <_start@@Base+0xa9c8>
   1d438:	ldr	r3, [sp, #116]	; 0x74
   1d43c:	str	r3, [r0]
   1d440:	b	1c034 <_start@@Base+0x6e58>
   1d444:	ldr	r0, [r9]
   1d448:	bl	28784 <flatcc_builder_end_vector@@Base>
   1d44c:	cmp	r0, #0
   1d450:	str	r0, [sp, #116]	; 0x74
   1d454:	beq	1fa28 <_start@@Base+0xa84c>
   1d458:	mov	r1, #9
   1d45c:	ldr	r0, [r9]
   1d460:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1d464:	cmp	r0, #0
   1d468:	beq	1fa18 <_start@@Base+0xa83c>
   1d46c:	ldr	r3, [sp, #116]	; 0x74
   1d470:	str	r3, [r0]
   1d474:	b	1c034 <_start@@Base+0x6e58>
   1d478:	mov	r3, r7
   1d47c:	mov	r2, sl
   1d480:	mov	r1, fp
   1d484:	mov	r0, r9
   1d488:	bl	18f38 <_start@@Base+0x3d5c>
   1d48c:	cmp	fp, r0
   1d490:	mov	r4, r0
   1d494:	beq	1caa0 <_start@@Base+0x78c4>
   1d498:	mov	r0, #0
   1d49c:	mov	r1, #0
   1d4a0:	mov	r3, #0
   1d4a4:	cmp	sl, r4
   1d4a8:	strd	r0, [sp, #136]	; 0x88
   1d4ac:	strh	r3, [sp, #110]	; 0x6e
   1d4b0:	str	r3, [sp, #132]	; 0x84
   1d4b4:	beq	1e694 <_start@@Base+0x94b8>
   1d4b8:	add	r3, sp, #136	; 0x88
   1d4bc:	str	r3, [sp]
   1d4c0:	mov	r2, sl
   1d4c4:	add	r3, sp, #132	; 0x84
   1d4c8:	mov	r1, r4
   1d4cc:	mov	r0, r9
   1d4d0:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1d4d4:	cmp	r4, r0
   1d4d8:	mov	fp, r0
   1d4dc:	beq	1e690 <_start@@Base+0x94b4>
   1d4e0:	ldr	r3, [sp, #132]	; 0x84
   1d4e4:	cmp	r3, #0
   1d4e8:	bne	1e7b4 <_start@@Base+0x95d8>
   1d4ec:	ldrd	r2, [sp, #136]	; 0x88
   1d4f0:	ldr	r0, [pc, #112]	; 1d568 <_start@@Base+0x838c>
   1d4f4:	mov	r1, #0
   1d4f8:	cmp	r3, r1
   1d4fc:	cmpeq	r2, r0
   1d500:	uxthls	r2, r2
   1d504:	strhls	r2, [sp, #110]	; 0x6e
   1d508:	bhi	1e924 <_start@@Base+0x9748>
   1d50c:	cmp	r2, #0
   1d510:	bne	1d520 <_start@@Base+0x8344>
   1d514:	ldr	r3, [r9, #8]
   1d518:	tst	r3, #2
   1d51c:	beq	1cab4 <_start@@Base+0x78d8>
   1d520:	mov	r3, #2
   1d524:	mov	r2, r3
   1d528:	mov	r1, r3
   1d52c:	ldr	r0, [r9]
   1d530:	bl	29488 <flatcc_builder_table_add@@Base>
   1d534:	cmp	r0, #0
   1d538:	beq	1dd68 <_start@@Base+0x8b8c>
   1d53c:	ldrh	r3, [sp, #110]	; 0x6e
   1d540:	strh	r3, [r0]
   1d544:	b	1cab4 <_start@@Base+0x78d8>
   1d548:	andeq	r0, r0, r0
   1d54c:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1d550:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1d554:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d558:	cmnvs	r4, r0, lsl #2
   1d55c:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1d560:	strbvs	r0, [r4, #-0]!
   1d564:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d568:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1d56c:			; <UNDEFINED> instruction: 0xffff0000
   1d570:	ldrvs	r0, [r2, -r0]!
   1d574:	ldrdeq	r6, [r3], -r8
   1d578:	andeq	r0, r2, ip, asr r9
   1d57c:	andeq	r0, r2, r0, ror #18
   1d580:			; <UNDEFINED> instruction: 0x000207b0
   1d584:	muleq	r2, r8, r7
   1d588:	ldrdeq	r6, [r3], -r8
   1d58c:	andeq	r6, r3, ip, ror #7
   1d590:	andeq	r5, r0, r4, lsr #8
   1d594:	andeq	r6, r3, r4, ror #3
   1d598:	andeq	r6, r3, r0, ror #3
   1d59c:	mov	r1, fp
   1d5a0:	mov	r3, #5
   1d5a4:	mov	r2, sl
   1d5a8:	mov	r0, r9
   1d5ac:	bl	18f38 <_start@@Base+0x3d5c>
   1d5b0:	cmp	r0, fp
   1d5b4:	mov	r1, r0
   1d5b8:	beq	1c4f8 <_start@@Base+0x731c>
   1d5bc:	add	r3, sp, #116	; 0x74
   1d5c0:	mov	r2, sl
   1d5c4:	mov	r0, r9
   1d5c8:	bl	1b980 <_start@@Base+0x67a4>
   1d5cc:	ldr	r3, [sp, #116]	; 0x74
   1d5d0:	cmp	r3, #0
   1d5d4:	mov	fp, r0
   1d5d8:	beq	1f8a8 <_start@@Base+0xa6cc>
   1d5dc:	mov	r1, #12
   1d5e0:	ldr	r0, [r9]
   1d5e4:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1d5e8:	cmp	r0, #0
   1d5ec:	beq	1f898 <_start@@Base+0xa6bc>
   1d5f0:	ldr	r3, [sp, #116]	; 0x74
   1d5f4:	str	r3, [r0]
   1d5f8:	b	1c034 <_start@@Base+0x6e58>
   1d5fc:	add	r4, fp, #16
   1d600:	mov	r0, r4
   1d604:	mov	r1, sl
   1d608:	bl	15308 <_start@@Base+0x12c>
   1d60c:	ldr	r3, [pc, #-168]	; 1d56c <_start@@Base+0x8390>
   1d610:	mov	r2, #0
   1d614:	and	r3, r3, r1
   1d618:	mov	r7, r1
   1d61c:	ldr	r1, [pc, #-180]	; 1d570 <_start@@Base+0x8394>
   1d620:	and	r2, r2, r0
   1d624:	cmp	r3, r1
   1d628:	mov	r0, #0
   1d62c:	cmpeq	r2, r0
   1d630:	beq	1e9f4 <_start@@Base+0x9818>
   1d634:	and	r7, r7, #-16777216	; 0xff000000
   1d638:	mov	r6, #0
   1d63c:	cmp	r7, #1728053248	; 0x67000000
   1d640:	cmpeq	r6, #0
   1d644:	bne	1e80c <_start@@Base+0x9630>
   1d648:	sub	r3, sl, r4
   1d64c:	cmp	r3, #1
   1d650:	ble	1f81c <_start@@Base+0xa640>
   1d654:	mov	r3, #1
   1d658:	mov	r2, sl
   1d65c:	mov	r1, r4
   1d660:	mov	r0, r9
   1d664:	bl	18f38 <_start@@Base+0x3d5c>
   1d668:	cmp	r4, r0
   1d66c:	mov	fp, r0
   1d670:	beq	1f818 <_start@@Base+0xa63c>
   1d674:	ldr	r0, [r9]
   1d678:	bl	27860 <flatcc_builder_start_offset_vector@@Base>
   1d67c:	cmp	r0, #0
   1d680:	bne	1ffcc <_start@@Base+0xadf0>
   1d684:	ldr	r6, [sp, #72]	; 0x48
   1d688:	mov	r1, fp
   1d68c:	mov	r3, r6
   1d690:	mov	r2, sl
   1d694:	mov	r0, r9
   1d698:	bl	18e84 <_start@@Base+0x3ca8>
   1d69c:	ldr	r3, [sp, #112]	; 0x70
   1d6a0:	cmp	r3, #0
   1d6a4:	mov	fp, r0
   1d6a8:	beq	1f4dc <_start@@Base+0xa300>
   1d6ac:	add	r4, sp, #116	; 0x74
   1d6b0:	mov	r5, #1
   1d6b4:	b	1d6f4 <_start@@Base+0x8518>
   1d6b8:	ldr	r0, [r9]
   1d6bc:	bl	271f8 <flatcc_builder_extend_offset_vector@@Base>
   1d6c0:	mov	r3, r6
   1d6c4:	mov	r2, sl
   1d6c8:	mov	r1, fp
   1d6cc:	subs	ip, r0, #0
   1d6d0:	mov	r0, r9
   1d6d4:	beq	1f4d0 <_start@@Base+0xa2f4>
   1d6d8:	ldr	lr, [sp, #116]	; 0x74
   1d6dc:	str	lr, [ip]
   1d6e0:	bl	19a10 <_start@@Base+0x4834>
   1d6e4:	ldr	r3, [sp, #112]	; 0x70
   1d6e8:	cmp	r3, #0
   1d6ec:	mov	fp, r0
   1d6f0:	beq	1f4dc <_start@@Base+0xa300>
   1d6f4:	mov	r1, fp
   1d6f8:	mov	r3, r4
   1d6fc:	mov	r2, sl
   1d700:	mov	r0, r9
   1d704:	bl	2f254 <flatcc_json_parser_build_string@@Base>
   1d708:	ldr	r3, [sp, #116]	; 0x74
   1d70c:	mov	r1, r5
   1d710:	cmp	r3, #0
   1d714:	mov	fp, r0
   1d718:	bne	1d6b8 <_start@@Base+0x84dc>
   1d71c:	mov	r3, sl
   1d720:	mov	sl, r9
   1d724:	mov	r9, r3
   1d728:	b	1bb50 <_start@@Base+0x6974>
   1d72c:	sub	r3, sl, r4
   1d730:	cmp	r3, #8
   1d734:	ble	1c7d0 <_start@@Base+0x75f4>
   1d738:	mov	r3, #8
   1d73c:	mov	r2, sl
   1d740:	mov	r1, r4
   1d744:	mov	r0, r9
   1d748:	bl	18f38 <_start@@Base+0x3d5c>
   1d74c:	cmp	r4, r0
   1d750:	mov	fp, r0
   1d754:	beq	1c7cc <_start@@Base+0x75f0>
   1d758:	mov	r2, #1
   1d75c:	mov	r1, r2
   1d760:	mvn	r3, #0
   1d764:	ldr	r0, [r9]
   1d768:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1d76c:	subs	r6, r0, #0
   1d770:	bne	1fa78 <_start@@Base+0xa89c>
   1d774:	ldr	r8, [sp, #72]	; 0x48
   1d778:	mov	r1, fp
   1d77c:	mov	r3, r8
   1d780:	mov	r2, sl
   1d784:	mov	r0, r9
   1d788:	bl	18e84 <_start@@Base+0x3ca8>
   1d78c:	ldr	r3, [sp, #112]	; 0x70
   1d790:	cmp	r3, #0
   1d794:	mov	fp, r0
   1d798:	beq	1e84c <_start@@Base+0x9670>
   1d79c:	ldr	r3, [pc, #-560]	; 1d574 <_start@@Base+0x8398>
   1d7a0:	ldr	r2, [pc, #-560]	; 1d578 <_start@@Base+0x839c>
   1d7a4:	ldr	r7, [pc, #-560]	; 1d57c <_start@@Base+0x83a0>
   1d7a8:	add	r3, pc, r3
   1d7ac:	add	r2, pc, r2
   1d7b0:	add	r7, pc, r7
   1d7b4:	add	r3, r3, #284	; 0x11c
   1d7b8:	str	r2, [sp, #96]	; 0x60
   1d7bc:	str	r3, [sp, #100]	; 0x64
   1d7c0:	mov	r5, #1
   1d7c4:	str	r7, [sp, #92]	; 0x5c
   1d7c8:	b	1d7f4 <_start@@Base+0x8618>
   1d7cc:	ldrb	r2, [sp, #132]	; 0x84
   1d7d0:	mov	r3, r8
   1d7d4:	mov	r0, r9
   1d7d8:	strb	r2, [r4]
   1d7dc:	mov	r2, sl
   1d7e0:	bl	19a10 <_start@@Base+0x4834>
   1d7e4:	ldr	r3, [sp, #112]	; 0x70
   1d7e8:	cmp	r3, #0
   1d7ec:	mov	fp, r0
   1d7f0:	beq	1e84c <_start@@Base+0x9670>
   1d7f4:	mov	r1, r5
   1d7f8:	ldr	r0, [r9]
   1d7fc:	strb	r6, [sp, #132]	; 0x84
   1d800:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1d804:	subs	r4, r0, #0
   1d808:	beq	1e83c <_start@@Base+0x9660>
   1d80c:	sub	r7, sl, fp
   1d810:	cmp	r7, #3
   1d814:	ble	1d860 <_start@@Base+0x8684>
   1d818:	ldr	r1, [sp, #96]	; 0x60
   1d81c:	mov	r2, #4
   1d820:	mov	r0, fp
   1d824:	bl	14550 <memcmp@plt>
   1d828:	cmp	r0, #0
   1d82c:	strbeq	r5, [sp, #132]	; 0x84
   1d830:	addeq	r1, fp, #4
   1d834:	beq	1d888 <_start@@Base+0x86ac>
   1d838:	cmp	r7, #4
   1d83c:	beq	1d860 <_start@@Base+0x8684>
   1d840:	ldr	r1, [sp, #92]	; 0x5c
   1d844:	mov	r2, #5
   1d848:	mov	r0, fp
   1d84c:	bl	14550 <memcmp@plt>
   1d850:	cmp	r0, #0
   1d854:	strbeq	r0, [sp, #132]	; 0x84
   1d858:	addeq	r1, fp, #5
   1d85c:	beq	1d888 <_start@@Base+0x86ac>
   1d860:	add	r3, sp, #136	; 0x88
   1d864:	mov	r1, fp
   1d868:	mov	r2, sl
   1d86c:	mov	r0, r9
   1d870:	bl	17a0c <_start@@Base+0x2830>
   1d874:	ldrb	r3, [sp, #136]	; 0x88
   1d878:	adds	r3, r3, #0
   1d87c:	movne	r3, #1
   1d880:	strb	r3, [sp, #132]	; 0x84
   1d884:	mov	r1, r0
   1d888:	cmp	r1, fp
   1d88c:	bne	1d7cc <_start@@Base+0x85f0>
   1d890:	add	r3, sp, #132	; 0x84
   1d894:	str	r3, [sp]
   1d898:	mov	r1, fp
   1d89c:	ldr	r3, [sp, #100]	; 0x64
   1d8a0:	mov	r2, sl
   1d8a4:	mov	r0, r9
   1d8a8:	bl	1803c <_start@@Base+0x2e60>
   1d8ac:	cmp	sl, r0
   1d8b0:	cmpne	r0, fp
   1d8b4:	mov	r1, r0
   1d8b8:	bne	1d7cc <_start@@Base+0x85f0>
   1d8bc:	mov	r3, sl
   1d8c0:	mov	fp, r0
   1d8c4:	mov	sl, r9
   1d8c8:	mov	r9, r3
   1d8cc:	b	1bb50 <_start@@Base+0x6974>
   1d8d0:	mov	r1, fp
   1d8d4:	mov	r3, #4
   1d8d8:	mov	r2, sl
   1d8dc:	mov	r0, r9
   1d8e0:	bl	18f38 <_start@@Base+0x3d5c>
   1d8e4:	cmp	fp, r0
   1d8e8:	mov	r1, r0
   1d8ec:	beq	1d1bc <_start@@Base+0x7fe0>
   1d8f0:	mov	r5, #0
   1d8f4:	add	r3, sp, #136	; 0x88
   1d8f8:	str	r5, [sp]
   1d8fc:	mov	r2, sl
   1d900:	mov	r0, r9
   1d904:	bl	2ee5c <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d908:	ldr	r3, [sp, #136]	; 0x88
   1d90c:	cmp	r3, r5
   1d910:	mov	fp, r0
   1d914:	bne	1d3ec <_start@@Base+0x8210>
   1d918:	b	1d400 <_start@@Base+0x8224>
   1d91c:	mov	r3, #8
   1d920:	mov	r2, sl
   1d924:	mov	r1, fp
   1d928:	mov	r0, r9
   1d92c:	bl	18f38 <_start@@Base+0x3d5c>
   1d930:	cmp	fp, r0
   1d934:	mov	r4, r0
   1d938:	beq	1c284 <_start@@Base+0x70a8>
   1d93c:	sub	r5, sl, r0
   1d940:	mov	r3, #0
   1d944:	cmp	r5, #3
   1d948:	strb	r3, [sp, #128]	; 0x80
   1d94c:	ble	1d990 <_start@@Base+0x87b4>
   1d950:	ldr	r1, [pc, #-984]	; 1d580 <_start@@Base+0x83a4>
   1d954:	mov	r2, #4
   1d958:	add	r1, pc, r1
   1d95c:	bl	14550 <memcmp@plt>
   1d960:	cmp	r0, #0
   1d964:	beq	1e6c8 <_start@@Base+0x94ec>
   1d968:	cmp	r5, #4
   1d96c:	beq	1d990 <_start@@Base+0x87b4>
   1d970:	ldr	r1, [pc, #-1012]	; 1d584 <_start@@Base+0x83a8>
   1d974:	mov	r2, #5
   1d978:	add	r1, pc, r1
   1d97c:	mov	r0, r4
   1d980:	bl	14550 <memcmp@plt>
   1d984:	cmp	r0, #0
   1d988:	addeq	fp, r4, #5
   1d98c:	beq	1da14 <_start@@Base+0x8838>
   1d990:	mov	r0, #0
   1d994:	mov	r1, #0
   1d998:	mov	r3, #0
   1d99c:	cmp	sl, r4
   1d9a0:	strd	r0, [sp, #136]	; 0x88
   1d9a4:	str	r3, [sp, #132]	; 0x84
   1d9a8:	beq	1e634 <_start@@Base+0x9458>
   1d9ac:	add	r3, sp, #136	; 0x88
   1d9b0:	str	r3, [sp]
   1d9b4:	mov	r2, sl
   1d9b8:	add	r3, sp, #132	; 0x84
   1d9bc:	mov	r1, r4
   1d9c0:	mov	r0, r9
   1d9c4:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1d9c8:	cmp	r4, r0
   1d9cc:	mov	fp, r0
   1d9d0:	beq	1e634 <_start@@Base+0x9458>
   1d9d4:	ldr	r3, [sp, #132]	; 0x84
   1d9d8:	cmp	r3, #0
   1d9dc:	bne	1ed10 <_start@@Base+0x9b34>
   1d9e0:	ldrd	r2, [sp, #136]	; 0x88
   1d9e4:	cmp	r3, #0
   1d9e8:	cmpeq	r2, #255	; 0xff
   1d9ec:	bhi	1f148 <_start@@Base+0x9f6c>
   1d9f0:	tst	r2, #255	; 0xff
   1d9f4:	movne	r3, #1
   1d9f8:	moveq	r3, #0
   1d9fc:	strb	r3, [sp, #128]	; 0x80
   1da00:	cmp	r3, #1
   1da04:	bne	1da14 <_start@@Base+0x8838>
   1da08:	ldr	r3, [r9, #8]
   1da0c:	tst	r3, #2
   1da10:	beq	1c034 <_start@@Base+0x6e58>
   1da14:	mov	r3, #1
   1da18:	mov	r2, r3
   1da1c:	mov	r1, #15
   1da20:	ldr	r0, [r9]
   1da24:	bl	29488 <flatcc_builder_table_add@@Base>
   1da28:	cmp	r0, #0
   1da2c:	beq	1f960 <_start@@Base+0xa784>
   1da30:	ldrb	r3, [sp, #128]	; 0x80
   1da34:	strb	r3, [r0]
   1da38:	b	1c034 <_start@@Base+0x6e58>
   1da3c:	mov	r3, #4
   1da40:	mov	r2, sl
   1da44:	mov	r1, fp
   1da48:	mov	r0, r9
   1da4c:	bl	18f38 <_start@@Base+0x3d5c>
   1da50:	cmp	r0, fp
   1da54:	mov	r4, r0
   1da58:	beq	1c310 <_start@@Base+0x7134>
   1da5c:	mov	r2, #1
   1da60:	mov	r1, r2
   1da64:	mvn	r3, #0
   1da68:	ldr	r0, [r9]
   1da6c:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1da70:	subs	r6, r0, #0
   1da74:	bne	1f864 <_start@@Base+0xa688>
   1da78:	mov	r1, r4
   1da7c:	ldr	r4, [sp, #72]	; 0x48
   1da80:	mov	r2, sl
   1da84:	mov	r3, r4
   1da88:	mov	r0, r9
   1da8c:	bl	18e84 <_start@@Base+0x3ca8>
   1da90:	ldr	r3, [sp, #112]	; 0x70
   1da94:	cmp	r3, #0
   1da98:	mov	fp, r0
   1da9c:	beq	1db58 <_start@@Base+0x897c>
   1daa0:	ldr	r8, [pc, #-1312]	; 1d588 <_start@@Base+0x83ac>
   1daa4:	mov	r7, #1
   1daa8:	add	r8, pc, r8
   1daac:	add	r8, r8, #156	; 0x9c
   1dab0:	str	r8, [sp, #92]	; 0x5c
   1dab4:	add	r5, sp, #136	; 0x88
   1dab8:	mov	r8, r4
   1dabc:	b	1daec <_start@@Base+0x8910>
   1dac0:	ldrb	r2, [sp, #136]	; 0x88
   1dac4:	mov	r1, r0
   1dac8:	mov	r3, r8
   1dacc:	strb	r2, [r4]
   1dad0:	mov	r0, r9
   1dad4:	mov	r2, sl
   1dad8:	bl	19a10 <_start@@Base+0x4834>
   1dadc:	ldr	r3, [sp, #112]	; 0x70
   1dae0:	cmp	r3, #0
   1dae4:	mov	fp, r0
   1dae8:	beq	1db58 <_start@@Base+0x897c>
   1daec:	mov	r1, r7
   1daf0:	ldr	r0, [r9]
   1daf4:	strb	r6, [sp, #136]	; 0x88
   1daf8:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1dafc:	mov	r1, fp
   1db00:	mov	r3, r5
   1db04:	mov	r2, sl
   1db08:	subs	r4, r0, #0
   1db0c:	mov	r0, r9
   1db10:	beq	1db8c <_start@@Base+0x89b0>
   1db14:	bl	17a0c <_start@@Base+0x2830>
   1db18:	cmp	r0, fp
   1db1c:	bne	1dac0 <_start@@Base+0x88e4>
   1db20:	str	r5, [sp]
   1db24:	ldr	r3, [sp, #92]	; 0x5c
   1db28:	mov	r2, sl
   1db2c:	mov	r1, fp
   1db30:	mov	r0, r9
   1db34:	bl	183a4 <_start@@Base+0x31c8>
   1db38:	cmp	sl, r0
   1db3c:	cmpne	r0, fp
   1db40:	bne	1dac0 <_start@@Base+0x88e4>
   1db44:	mov	r3, sl
   1db48:	mov	fp, r0
   1db4c:	mov	sl, r9
   1db50:	mov	r9, r3
   1db54:	b	1bb50 <_start@@Base+0x6974>
   1db58:	ldr	r0, [r9]
   1db5c:	bl	28784 <flatcc_builder_end_vector@@Base>
   1db60:	cmp	r0, #0
   1db64:	str	r0, [sp, #116]	; 0x74
   1db68:	beq	1fac0 <_start@@Base+0xa8e4>
   1db6c:	mov	r1, #30
   1db70:	ldr	r0, [r9]
   1db74:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1db78:	cmp	r0, #0
   1db7c:	beq	1fab0 <_start@@Base+0xa8d4>
   1db80:	ldr	r3, [sp, #116]	; 0x74
   1db84:	str	r3, [r0]
   1db88:	b	1c034 <_start@@Base+0x6e58>
   1db8c:	mov	sl, r9
   1db90:	mov	r9, r2
   1db94:	b	1bb50 <_start@@Base+0x6974>
   1db98:	mov	r1, fp
   1db9c:	mov	r3, #4
   1dba0:	mov	r2, sl
   1dba4:	mov	r0, r9
   1dba8:	bl	18f38 <_start@@Base+0x3d5c>
   1dbac:	cmp	fp, r0
   1dbb0:	mov	r1, r0
   1dbb4:	beq	1c2ec <_start@@Base+0x7110>
   1dbb8:	add	r3, sp, #116	; 0x74
   1dbbc:	mov	r2, sl
   1dbc0:	mov	r0, r9
   1dbc4:	bl	2f254 <flatcc_json_parser_build_string@@Base>
   1dbc8:	ldr	r3, [sp, #116]	; 0x74
   1dbcc:	cmp	r3, #0
   1dbd0:	mov	fp, r0
   1dbd4:	beq	1f888 <_start@@Base+0xa6ac>
   1dbd8:	mov	r1, #3
   1dbdc:	ldr	r0, [r9]
   1dbe0:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1dbe4:	cmp	r0, #0
   1dbe8:	beq	1f878 <_start@@Base+0xa69c>
   1dbec:	ldr	r3, [sp, #116]	; 0x74
   1dbf0:	str	r3, [r0]
   1dbf4:	b	1c034 <_start@@Base+0x6e58>
   1dbf8:	add	r4, fp, #8
   1dbfc:	mov	r0, r4
   1dc00:	mov	r1, sl
   1dc04:	bl	15308 <_start@@Base+0x12c>
   1dc08:	mov	r0, #0
   1dc0c:	and	r1, r1, #-16777216	; 0xff000000
   1dc10:	cmp	r1, #2030043136	; 0x79000000
   1dc14:	cmpeq	r0, #0
   1dc18:	bne	1e76c <_start@@Base+0x9590>
   1dc1c:	sub	r3, sl, r4
   1dc20:	cmp	r3, #1
   1dc24:	ble	1f84c <_start@@Base+0xa670>
   1dc28:	mov	r3, #1
   1dc2c:	mov	r2, sl
   1dc30:	mov	r1, r4
   1dc34:	mov	r0, r9
   1dc38:	bl	18f38 <_start@@Base+0x3d5c>
   1dc3c:	cmp	r4, r0
   1dc40:	mov	fp, r0
   1dc44:	beq	1f848 <_start@@Base+0xa66c>
   1dc48:	mov	r2, #1
   1dc4c:	mov	r1, r2
   1dc50:	mvn	r3, #0
   1dc54:	ldr	r0, [r9]
   1dc58:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1dc5c:	cmp	r0, #0
   1dc60:	bne	1fe74 <_start@@Base+0xac98>
   1dc64:	ldr	r4, [sp, #72]	; 0x48
   1dc68:	mov	r1, fp
   1dc6c:	mov	r3, r4
   1dc70:	mov	r2, sl
   1dc74:	mov	r0, r9
   1dc78:	bl	18e84 <_start@@Base+0x3ca8>
   1dc7c:	ldr	r3, [sp, #112]	; 0x70
   1dc80:	cmp	r3, #0
   1dc84:	mov	fp, r0
   1dc88:	beq	1f114 <_start@@Base+0x9f38>
   1dc8c:	ldr	r8, [pc, #-1800]	; 1d58c <_start@@Base+0x83b0>
   1dc90:	mov	r7, #0
   1dc94:	add	r8, pc, r8
   1dc98:	add	r8, r8, #180	; 0xb4
   1dc9c:	str	r8, [sp, #92]	; 0x5c
   1dca0:	mov	r6, #1
   1dca4:	add	r5, sp, #136	; 0x88
   1dca8:	mov	r8, r4
   1dcac:	b	1dcdc <_start@@Base+0x8b00>
   1dcb0:	ldrb	r2, [sp, #136]	; 0x88
   1dcb4:	mov	r1, r0
   1dcb8:	mov	r3, r8
   1dcbc:	strb	r2, [r4]
   1dcc0:	mov	r0, r9
   1dcc4:	mov	r2, sl
   1dcc8:	bl	19a10 <_start@@Base+0x4834>
   1dccc:	ldr	r3, [sp, #112]	; 0x70
   1dcd0:	cmp	r3, #0
   1dcd4:	mov	fp, r0
   1dcd8:	beq	1f114 <_start@@Base+0x9f38>
   1dcdc:	mov	r1, r6
   1dce0:	ldr	r0, [r9]
   1dce4:	strb	r7, [sp, #136]	; 0x88
   1dce8:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1dcec:	mov	r1, fp
   1dcf0:	mov	r3, r5
   1dcf4:	mov	r2, sl
   1dcf8:	subs	r4, r0, #0
   1dcfc:	mov	r0, r9
   1dd00:	beq	1f108 <_start@@Base+0x9f2c>
   1dd04:	bl	17a0c <_start@@Base+0x2830>
   1dd08:	cmp	r0, fp
   1dd0c:	bne	1dcb0 <_start@@Base+0x8ad4>
   1dd10:	str	r5, [sp]
   1dd14:	ldr	r3, [sp, #92]	; 0x5c
   1dd18:	mov	r2, sl
   1dd1c:	mov	r1, fp
   1dd20:	mov	r0, r9
   1dd24:	bl	183a4 <_start@@Base+0x31c8>
   1dd28:	cmp	sl, r0
   1dd2c:	cmpne	r0, fp
   1dd30:	bne	1dcb0 <_start@@Base+0x8ad4>
   1dd34:	mov	r3, sl
   1dd38:	mov	fp, r0
   1dd3c:	mov	sl, r9
   1dd40:	mov	r9, r3
   1dd44:	b	1bb50 <_start@@Base+0x6974>
   1dd48:	ldr	r3, [r9, #20]
   1dd4c:	cmp	r3, #0
   1dd50:	bne	1dd68 <_start@@Base+0x8b8c>
   1dd54:	ldr	r0, [r9]
   1dd58:	bl	2843c <flatcc_builder_end_table@@Base>
   1dd5c:	cmp	r0, #0
   1dd60:	str	r0, [sp, #116]	; 0x74
   1dd64:	bne	1dd8c <_start@@Base+0x8bb0>
   1dd68:	mov	r1, fp
   1dd6c:	mov	r3, #33	; 0x21
   1dd70:	mov	r2, sl
   1dd74:	mov	r0, r9
   1dd78:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1dd7c:	ldr	r3, [sp, #116]	; 0x74
   1dd80:	cmp	r3, #0
   1dd84:	mov	fp, r0
   1dd88:	beq	1fa48 <_start@@Base+0xa86c>
   1dd8c:	mov	r1, #14
   1dd90:	ldr	r0, [r9]
   1dd94:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1dd98:	cmp	r0, #0
   1dd9c:	beq	1fa38 <_start@@Base+0xa85c>
   1dda0:	ldr	r3, [sp, #116]	; 0x74
   1dda4:	str	r3, [r0]
   1dda8:	b	1c034 <_start@@Base+0x6e58>
   1ddac:	ldr	r0, [r9]
   1ddb0:	bl	28784 <flatcc_builder_end_vector@@Base>
   1ddb4:	cmp	r0, #0
   1ddb8:	str	r0, [sp, #116]	; 0x74
   1ddbc:	beq	1fa68 <_start@@Base+0xa88c>
   1ddc0:	mov	r1, #31
   1ddc4:	ldr	r0, [r9]
   1ddc8:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1ddcc:	cmp	r0, #0
   1ddd0:	beq	1fa58 <_start@@Base+0xa87c>
   1ddd4:	ldr	r3, [sp, #116]	; 0x74
   1ddd8:	str	r3, [r0]
   1dddc:	b	1c034 <_start@@Base+0x6e58>
   1dde0:	mov	r1, fp
   1dde4:	mov	r3, #4
   1dde8:	mov	r2, sl
   1ddec:	mov	r0, r9
   1ddf0:	bl	18f38 <_start@@Base+0x3d5c>
   1ddf4:	cmp	fp, r0
   1ddf8:	mov	r1, r0
   1ddfc:	beq	1bd0c <_start@@Base+0x6b30>
   1de00:	ldr	ip, [sp, #120]	; 0x78
   1de04:	ldr	r3, [pc, #-2172]	; 1d590 <_start@@Base+0x83b4>
   1de08:	mov	r2, #8
   1de0c:	add	r3, pc, r3
   1de10:	str	r3, [sp, #8]
   1de14:	stm	sp, {r2, ip}
   1de18:	mov	r3, #0
   1de1c:	mov	r2, sl
   1de20:	mov	r0, r9
   1de24:	bl	2f4bc <flatcc_json_parser_union@@Base>
   1de28:	mov	fp, r0
   1de2c:	b	1c034 <_start@@Base+0x6e58>
   1de30:	mov	r3, #3
   1de34:	mov	r2, sl
   1de38:	mov	r1, fp
   1de3c:	mov	r0, r9
   1de40:	bl	18f38 <_start@@Base+0x3d5c>
   1de44:	cmp	fp, r0
   1de48:	mov	r4, r0
   1de4c:	beq	1c0dc <_start@@Base+0x6f00>
   1de50:	mov	r3, #16
   1de54:	mov	r2, #32
   1de58:	mov	r1, #0
   1de5c:	ldr	r0, [r9]
   1de60:	bl	29488 <flatcc_builder_table_add@@Base>
   1de64:	subs	r7, r0, #0
   1de68:	beq	1f8fc <_start@@Base+0xa720>
   1de6c:	add	r6, sp, #128	; 0x80
   1de70:	mov	r3, r6
   1de74:	mov	r1, r4
   1de78:	mov	r2, sl
   1de7c:	mov	r0, r9
   1de80:	bl	17c8c <_start@@Base+0x2ab0>
   1de84:	ldr	r3, [sp, #128]	; 0x80
   1de88:	cmp	r3, #0
   1de8c:	mov	fp, r0
   1de90:	beq	1c034 <_start@@Base+0x6e58>
   1de94:	ldr	r2, [pc, #-2312]	; 1d594 <_start@@Base+0x83b8>
   1de98:	ldr	r3, [pc, #-2312]	; 1d598 <_start@@Base+0x83bc>
   1de9c:	add	r2, pc, r2
   1dea0:	add	r3, pc, r3
   1dea4:	add	r2, r2, #256	; 0x100
   1dea8:	add	r3, r3, #244	; 0xf4
   1deac:	vldr	s18, [pc, #916]	; 1e248 <_start@@Base+0x906c>
   1deb0:	vldr	d8, [pc, #872]	; 1e220 <_start@@Base+0x9044>
   1deb4:	str	r2, [sp, #92]	; 0x5c
   1deb8:	str	r3, [sp, #96]	; 0x60
   1debc:	mov	r8, r7
   1dec0:	mov	r5, r6
   1dec4:	b	1df30 <_start@@Base+0x8d54>
   1dec8:	mvn	r1, #-2013265920	; 0x88000000
   1decc:	mvn	r0, #0
   1ded0:	cmp	r7, r1
   1ded4:	cmpeq	r6, r0
   1ded8:	bhi	1e1a0 <_start@@Base+0x8fc4>
   1dedc:	add	r1, pc, #836	; 0x344
   1dee0:	ldrd	r0, [r1]
   1dee4:	and	r2, r6, #-16777216	; 0xff000000
   1dee8:	cmp	r7, r1
   1deec:	cmpeq	r2, r0
   1def0:	bne	1defc <_start@@Base+0x8d20>
   1def4:	cmp	ip, #5
   1def8:	bgt	1e3ac <_start@@Base+0x91d0>
   1defc:	mov	r1, r4
   1df00:	mov	r2, sl
   1df04:	mov	r0, r9
   1df08:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1df0c:	mov	r4, r0
   1df10:	mov	r3, r5
   1df14:	mov	r1, r4
   1df18:	mov	r2, sl
   1df1c:	mov	r0, r9
   1df20:	bl	19b94 <_start@@Base+0x49b8>
   1df24:	ldr	r3, [sp, #128]	; 0x80
   1df28:	cmp	r3, #0
   1df2c:	beq	1e444 <_start@@Base+0x9268>
   1df30:	cmp	sl, r0
   1df34:	beq	1e214 <_start@@Base+0x9038>
   1df38:	ldrb	r3, [r0]
   1df3c:	cmp	r3, #34	; 0x22
   1df40:	addeq	r4, r0, #1
   1df44:	beq	1df60 <_start@@Base+0x8d84>
   1df48:	mov	r1, r0
   1df4c:	mov	r3, #5
   1df50:	mov	r2, sl
   1df54:	mov	r0, r9
   1df58:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1df5c:	mov	r4, r0
   1df60:	sub	ip, sl, r4
   1df64:	cmp	ip, #8
   1df68:	bls	1e11c <_start@@Base+0x8f40>
   1df6c:	ldrb	r2, [r4, #7]
   1df70:	mov	r3, #0
   1df74:	ldrb	r0, [r4, #6]
   1df78:	lsr	lr, r0, #24
   1df7c:	lsl	r1, r0, #8
   1df80:	str	lr, [sp, #68]	; 0x44
   1df84:	str	r1, [sp, #64]	; 0x40
   1df88:	ldrd	r0, [sp, #64]	; 0x40
   1df8c:	orr	r0, r0, r2
   1df90:	orr	r1, r1, r3
   1df94:	mov	r2, r0
   1df98:	mov	r3, r1
   1df9c:	ldrb	r0, [r4, #5]
   1dfa0:	lsr	lr, r0, #16
   1dfa4:	lsl	r1, r0, #16
   1dfa8:	str	lr, [sp, #60]	; 0x3c
   1dfac:	str	r1, [sp, #56]	; 0x38
   1dfb0:	ldrd	r0, [sp, #56]	; 0x38
   1dfb4:	orr	r0, r0, r2
   1dfb8:	orr	r1, r1, r3
   1dfbc:	mov	r2, r0
   1dfc0:	mov	r3, r1
   1dfc4:	ldrb	r0, [r4, #4]
   1dfc8:	lsr	lr, r0, #8
   1dfcc:	lsl	r1, r0, #24
   1dfd0:	str	lr, [sp, #44]	; 0x2c
   1dfd4:	str	r1, [sp, #40]	; 0x28
   1dfd8:	ldrd	r0, [sp, #40]	; 0x28
   1dfdc:	orr	r0, r0, r2
   1dfe0:	orr	r1, r1, r3
   1dfe4:	mov	r2, r0
   1dfe8:	mov	r3, r1
   1dfec:	ldrb	r1, [r4, #3]
   1dff0:	str	r1, [sp, #52]	; 0x34
   1dff4:	mov	r1, #0
   1dff8:	str	r1, [sp, #48]	; 0x30
   1dffc:	ldrd	r0, [sp, #48]	; 0x30
   1e000:	orr	r0, r0, r2
   1e004:	orr	r1, r1, r3
   1e008:	mov	r2, r0
   1e00c:	mov	r3, r1
   1e010:	ldrb	r0, [r4, #2]
   1e014:	lsl	r1, r0, #8
   1e018:	str	r1, [sp, #36]	; 0x24
   1e01c:	mov	r1, #0
   1e020:	str	r1, [sp, #32]
   1e024:	ldrd	r0, [sp, #32]
   1e028:	orr	r0, r0, r2
   1e02c:	orr	r1, r1, r3
   1e030:	mov	r2, r0
   1e034:	mov	r3, r1
   1e038:	ldrb	r0, [r4, #1]
   1e03c:	lsl	r1, r0, #16
   1e040:	str	r1, [sp, #28]
   1e044:	mov	r1, #0
   1e048:	str	r1, [sp, #24]
   1e04c:	ldrd	r0, [sp, #24]
   1e050:	orr	r0, r0, r2
   1e054:	orr	r1, r1, r3
   1e058:	mov	r2, r0
   1e05c:	mov	r3, r1
   1e060:	ldrb	r6, [r4]
   1e064:	add	r1, pc, #452	; 0x1c4
   1e068:	ldrd	r0, [r1]
   1e06c:	lsl	lr, r6, #24
   1e070:	str	lr, [sp, #20]
   1e074:	mov	lr, #0
   1e078:	str	lr, [sp, #16]
   1e07c:	ldrd	r6, [sp, #16]
   1e080:	orr	r7, r7, r3
   1e084:	orr	r6, r6, r2
   1e088:	cmp	r7, r1
   1e08c:	cmpeq	r6, r0
   1e090:	bhi	1dec8 <_start@@Base+0x8cec>
   1e094:	add	r1, pc, #412	; 0x19c
   1e098:	ldrd	r0, [r1]
   1e09c:	and	r2, r6, #-16777216	; 0xff000000
   1e0a0:	cmp	r7, r1
   1e0a4:	cmpeq	r2, r0
   1e0a8:	beq	1e258 <_start@@Base+0x907c>
   1e0ac:	add	r1, pc, #396	; 0x18c
   1e0b0:	ldrd	r0, [r1]
   1e0b4:	cmp	r7, r1
   1e0b8:	cmpeq	r2, r0
   1e0bc:	bne	1defc <_start@@Base+0x8d20>
   1e0c0:	cmp	ip, #5
   1e0c4:	ble	1defc <_start@@Base+0x8d20>
   1e0c8:	mov	r3, #5
   1e0cc:	mov	r2, sl
   1e0d0:	mov	r1, r4
   1e0d4:	mov	r0, r9
   1e0d8:	bl	18f38 <_start@@Base+0x3d5c>
   1e0dc:	cmp	r4, r0
   1e0e0:	mov	r6, r0
   1e0e4:	beq	1defc <_start@@Base+0x8d20>
   1e0e8:	add	r7, sp, #144	; 0x90
   1e0ec:	mov	r1, r0
   1e0f0:	vstmdb	r7!, {d8}
   1e0f4:	mov	r2, sl
   1e0f8:	mov	r0, r9
   1e0fc:	mov	r3, r7
   1e100:	bl	2db84 <flatcc_json_parser_double@@Base>
   1e104:	cmp	r6, r0
   1e108:	mov	r4, r0
   1e10c:	beq	1e468 <_start@@Base+0x928c>
   1e110:	ldrd	r2, [sp, #136]	; 0x88
   1e114:	strd	r2, [r8, #16]
   1e118:	b	1df10 <_start@@Base+0x8d34>
   1e11c:	sub	r3, ip, #1
   1e120:	cmp	r3, #7
   1e124:	addls	pc, pc, r3, lsl #2
   1e128:	b	1defc <_start@@Base+0x8d20>
   1e12c:	b	1e194 <_start@@Base+0x8fb8>
   1e130:	b	1e188 <_start@@Base+0x8fac>
   1e134:	b	1e17c <_start@@Base+0x8fa0>
   1e138:	b	1e170 <_start@@Base+0x8f94>
   1e13c:	b	1e164 <_start@@Base+0x8f88>
   1e140:	b	1e158 <_start@@Base+0x8f7c>
   1e144:	b	1e14c <_start@@Base+0x8f70>
   1e148:	b	1df6c <_start@@Base+0x8d90>
   1e14c:	mov	r2, #0
   1e150:	mov	r3, #0
   1e154:	b	1df74 <_start@@Base+0x8d98>
   1e158:	mov	r2, #0
   1e15c:	mov	r3, #0
   1e160:	b	1df9c <_start@@Base+0x8dc0>
   1e164:	mov	r2, #0
   1e168:	mov	r3, #0
   1e16c:	b	1dfc4 <_start@@Base+0x8de8>
   1e170:	mov	r2, #0
   1e174:	mov	r3, #0
   1e178:	b	1dfec <_start@@Base+0x8e10>
   1e17c:	mov	r2, #0
   1e180:	mov	r3, #0
   1e184:	b	1e010 <_start@@Base+0x8e34>
   1e188:	mov	r2, #0
   1e18c:	mov	r3, #0
   1e190:	b	1e038 <_start@@Base+0x8e5c>
   1e194:	mov	r2, #0
   1e198:	mov	r3, #0
   1e19c:	b	1e060 <_start@@Base+0x8e84>
   1e1a0:	mvn	r1, #-2030043136	; 0x87000000
   1e1a4:	mvn	r0, #0
   1e1a8:	cmp	r7, r1
   1e1ac:	cmpeq	r6, r0
   1e1b0:	bhi	1e2f4 <_start@@Base+0x9118>
   1e1b4:	cmp	ip, #1
   1e1b8:	ble	1defc <_start@@Base+0x8d20>
   1e1bc:	mov	r3, #1
   1e1c0:	mov	r2, sl
   1e1c4:	mov	r1, r4
   1e1c8:	mov	r0, r9
   1e1cc:	bl	18f38 <_start@@Base+0x3d5c>
   1e1d0:	cmp	r4, r0
   1e1d4:	mov	r6, r0
   1e1d8:	beq	1defc <_start@@Base+0x8d20>
   1e1dc:	vmov	r3, s18
   1e1e0:	add	r7, sp, #144	; 0x90
   1e1e4:	mov	r1, r0
   1e1e8:	mov	r2, sl
   1e1ec:	str	r3, [r7, #-8]!
   1e1f0:	mov	r0, r9
   1e1f4:	mov	r3, r7
   1e1f8:	bl	2dc58 <flatcc_json_parser_float@@Base>
   1e1fc:	cmp	r6, r0
   1e200:	mov	r4, r0
   1e204:	beq	1e940 <_start@@Base+0x9764>
   1e208:	ldr	r3, [sp, #136]	; 0x88
   1e20c:	str	r3, [r8]
   1e210:	b	1df10 <_start@@Base+0x8d34>
   1e214:	mov	r4, sl
   1e218:	b	1defc <_start@@Base+0x8d20>
   1e21c:	nop			; (mov r0, r0)
	...
   1e228:	movwcc	r0, #0
   1e22c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e230:	rscscc	pc, pc, #1020	; 0x3fc
   1e234:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e238:	andcc	r0, r0, #0
   1e23c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e240:	mrscc	r0, (UNDEF: 0)
   1e244:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e248:	andeq	r0, r0, r0
   1e24c:	andeq	r5, r3, r0, lsl ip
   1e250:	andeq	r5, r3, r4, asr #23
   1e254:	strdeq	r5, [r3], -r8
   1e258:	cmp	ip, #5
   1e25c:	ble	1defc <_start@@Base+0x8d20>
   1e260:	mov	r3, #5
   1e264:	mov	r2, sl
   1e268:	mov	r1, r4
   1e26c:	mov	r0, r9
   1e270:	bl	18f38 <_start@@Base+0x3d5c>
   1e274:	cmp	r4, r0
   1e278:	mov	r6, r0
   1e27c:	beq	1defc <_start@@Base+0x8d20>
   1e280:	cmp	sl, r0
   1e284:	ldrd	r0, [sp, #16]
   1e288:	mov	r2, #0
   1e28c:	mov	r3, #0
   1e290:	strb	r0, [sp, #124]	; 0x7c
   1e294:	str	r0, [sp, #132]	; 0x84
   1e298:	strd	r2, [sp, #136]	; 0x88
   1e29c:	beq	1e4b4 <_start@@Base+0x92d8>
   1e2a0:	add	r3, sp, #136	; 0x88
   1e2a4:	str	r3, [sp]
   1e2a8:	mov	r2, sl
   1e2ac:	add	r3, sp, #132	; 0x84
   1e2b0:	mov	r1, r6
   1e2b4:	mov	r0, r9
   1e2b8:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   1e2bc:	cmp	r6, r0
   1e2c0:	mov	r4, r0
   1e2c4:	beq	1e4b4 <_start@@Base+0x92d8>
   1e2c8:	ldr	r1, [sp, #132]	; 0x84
   1e2cc:	ldrd	r2, [sp, #136]	; 0x88
   1e2d0:	cmp	r1, #0
   1e2d4:	beq	1e374 <_start@@Base+0x9198>
   1e2d8:	cmp	r3, #0
   1e2dc:	cmpeq	r2, #128	; 0x80
   1e2e0:	rsbls	r2, r2, #0
   1e2e4:	sxtbls	r2, r2
   1e2e8:	bhi	1e44c <_start@@Base+0x9270>
   1e2ec:	strb	r2, [r8, #24]
   1e2f0:	b	1df10 <_start@@Base+0x8d34>
   1e2f4:	and	r3, r7, #-16777216	; 0xff000000
   1e2f8:	mov	r2, #0
   1e2fc:	cmp	r3, #2046820352	; 0x7a000000
   1e300:	cmpeq	r2, #0
   1e304:	beq	1e3e4 <_start@@Base+0x9208>
   1e308:	cmp	r3, #2030043136	; 0x79000000
   1e30c:	cmpeq	r2, #0
   1e310:	bne	1defc <_start@@Base+0x8d20>
   1e314:	cmp	ip, #1
   1e318:	ble	1defc <_start@@Base+0x8d20>
   1e31c:	mov	r3, #1
   1e320:	mov	r2, sl
   1e324:	mov	r1, r4
   1e328:	mov	r0, r9
   1e32c:	bl	18f38 <_start@@Base+0x3d5c>
   1e330:	cmp	r4, r0
   1e334:	mov	r6, r0
   1e338:	beq	1defc <_start@@Base+0x8d20>
   1e33c:	vmov	r3, s18
   1e340:	add	r7, sp, #144	; 0x90
   1e344:	mov	r1, r0
   1e348:	mov	r2, sl
   1e34c:	str	r3, [r7, #-8]!
   1e350:	mov	r0, r9
   1e354:	mov	r3, r7
   1e358:	bl	2dc58 <flatcc_json_parser_float@@Base>
   1e35c:	cmp	r6, r0
   1e360:	mov	r4, r0
   1e364:	beq	1ece4 <_start@@Base+0x9b08>
   1e368:	ldr	r3, [sp, #136]	; 0x88
   1e36c:	str	r3, [r8, #4]
   1e370:	b	1df10 <_start@@Base+0x8d34>
   1e374:	cmp	r3, #0
   1e378:	cmpeq	r2, #127	; 0x7f
   1e37c:	sxtbls	r2, r2
   1e380:	bls	1e2ec <_start@@Base+0x9110>
   1e384:	mov	r1, r0
   1e388:	mov	r3, #7
   1e38c:	mov	r2, sl
   1e390:	mov	r0, r9
   1e394:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1e398:	mov	r4, r0
   1e39c:	cmp	r6, r4
   1e3a0:	beq	1e4b4 <_start@@Base+0x92d8>
   1e3a4:	ldrsb	r2, [sp, #124]	; 0x7c
   1e3a8:	b	1e2ec <_start@@Base+0x9110>
   1e3ac:	mov	r1, r4
   1e3b0:	mov	r3, #5
   1e3b4:	mov	r2, sl
   1e3b8:	mov	r0, r9
   1e3bc:	bl	18f38 <_start@@Base+0x3d5c>
   1e3c0:	cmp	r4, r0
   1e3c4:	mov	r1, r0
   1e3c8:	beq	1defc <_start@@Base+0x8d20>
   1e3cc:	add	r3, r8, #26
   1e3d0:	mov	r2, sl
   1e3d4:	mov	r0, r9
   1e3d8:	bl	1af80 <_start@@Base+0x5da4>
   1e3dc:	mov	r4, r0
   1e3e0:	b	1df10 <_start@@Base+0x8d34>
   1e3e4:	cmp	ip, #1
   1e3e8:	ble	1defc <_start@@Base+0x8d20>
   1e3ec:	mov	r3, #1
   1e3f0:	mov	r2, sl
   1e3f4:	mov	r1, r4
   1e3f8:	mov	r0, r9
   1e3fc:	bl	18f38 <_start@@Base+0x3d5c>
   1e400:	cmp	r4, r0
   1e404:	mov	r6, r0
   1e408:	beq	1defc <_start@@Base+0x8d20>
   1e40c:	vmov	r3, s18
   1e410:	add	r7, sp, #144	; 0x90
   1e414:	mov	r1, r0
   1e418:	mov	r2, sl
   1e41c:	str	r3, [r7, #-8]!
   1e420:	mov	r0, r9
   1e424:	mov	r3, r7
   1e428:	bl	2dc58 <flatcc_json_parser_float@@Base>
   1e42c:	cmp	r6, r0
   1e430:	mov	r4, r0
   1e434:	beq	1f0dc <_start@@Base+0x9f00>
   1e438:	ldr	r3, [sp, #136]	; 0x88
   1e43c:	str	r3, [r8, #8]
   1e440:	b	1df10 <_start@@Base+0x8d34>
   1e444:	mov	fp, r0
   1e448:	b	1c034 <_start@@Base+0x6e58>
   1e44c:	mov	r1, r0
   1e450:	mov	r3, #8
   1e454:	mov	r2, sl
   1e458:	mov	r0, r9
   1e45c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1e460:	mov	r4, r0
   1e464:	b	1e39c <_start@@Base+0x91c0>
   1e468:	ldr	r3, [pc, #-548]	; 1e24c <_start@@Base+0x9070>
   1e46c:	mov	r1, r0
   1e470:	add	r3, pc, r3
   1e474:	str	r7, [sp]
   1e478:	add	r3, r3, #220	; 0xdc
   1e47c:	mov	r2, sl
   1e480:	mov	r0, r9
   1e484:	bl	17ebc <_start@@Base+0x2ce0>
   1e488:	cmp	sl, r0
   1e48c:	cmpne	r4, r0
   1e490:	mov	r4, r0
   1e494:	bne	1e110 <_start@@Base+0x8f34>
   1e498:	mov	r1, r4
   1e49c:	mov	r3, #33	; 0x21
   1e4a0:	mov	r2, sl
   1e4a4:	mov	r0, r9
   1e4a8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1e4ac:	mov	fp, r0
   1e4b0:	b	1c034 <_start@@Base+0x6e58>
   1e4b4:	ldr	r3, [pc, #-620]	; 1e250 <_start@@Base+0x9074>
   1e4b8:	add	r2, sp, #124	; 0x7c
   1e4bc:	add	r3, pc, r3
   1e4c0:	str	r2, [sp]
   1e4c4:	add	r3, r3, #204	; 0xcc
   1e4c8:	mov	r2, sl
   1e4cc:	mov	r1, r6
   1e4d0:	mov	r0, r9
   1e4d4:	bl	18910 <_start@@Base+0x3734>
   1e4d8:	cmp	sl, r0
   1e4dc:	cmpne	r0, r6
   1e4e0:	mov	r4, r0
   1e4e4:	bne	1e3a4 <_start@@Base+0x91c8>
   1e4e8:	b	1e498 <_start@@Base+0x92bc>
   1e4ec:	add	r4, fp, #16
   1e4f0:	mov	r0, r4
   1e4f4:	mov	r1, sl
   1e4f8:	bl	15308 <_start@@Base+0x12c>
   1e4fc:	mov	r0, #0
   1e500:	and	r1, r1, #-16777216	; 0xff000000
   1e504:	cmp	r1, #1929379840	; 0x73000000
   1e508:	cmpeq	r0, #0
   1e50c:	bne	1e880 <_start@@Base+0x96a4>
   1e510:	sub	r3, sl, r4
   1e514:	cmp	r3, #1
   1e518:	ble	1f914 <_start@@Base+0xa738>
   1e51c:	mov	r3, #1
   1e520:	mov	r2, sl
   1e524:	mov	r1, r4
   1e528:	mov	r0, r9
   1e52c:	bl	18f38 <_start@@Base+0x3d5c>
   1e530:	cmp	r4, r0
   1e534:	mov	fp, r0
   1e538:	beq	1f910 <_start@@Base+0xa734>
   1e53c:	mov	r2, #8
   1e540:	mov	r1, r2
   1e544:	mvn	r3, #-536870912	; 0xe0000000
   1e548:	ldr	r0, [r9]
   1e54c:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1e550:	cmp	r0, #0
   1e554:	bne	1fdfc <_start@@Base+0xac20>
   1e558:	ldr	r8, [sp, #72]	; 0x48
   1e55c:	mov	r1, fp
   1e560:	mov	r3, r8
   1e564:	mov	r2, sl
   1e568:	mov	r0, r9
   1e56c:	bl	18e84 <_start@@Base+0x3ca8>
   1e570:	ldr	r3, [sp, #112]	; 0x70
   1e574:	cmp	r3, #0
   1e578:	mov	fp, r0
   1e57c:	beq	1f328 <_start@@Base+0xa14c>
   1e580:	ldr	r7, [pc, #-820]	; 1e254 <_start@@Base+0x9078>
   1e584:	vldr	d8, [pc, #1004]	; 1e978 <_start@@Base+0x979c>
   1e588:	add	r7, pc, r7
   1e58c:	add	r7, r7, #500	; 0x1f4
   1e590:	mov	r6, #1
   1e594:	add	r5, sp, #136	; 0x88
   1e598:	b	1e5c8 <_start@@Base+0x93ec>
   1e59c:	vldr	d7, [sp, #136]	; 0x88
   1e5a0:	mov	r1, r0
   1e5a4:	mov	r3, r8
   1e5a8:	mov	r2, sl
   1e5ac:	vstr	d7, [r4]
   1e5b0:	mov	r0, r9
   1e5b4:	bl	19a10 <_start@@Base+0x4834>
   1e5b8:	ldr	r3, [sp, #112]	; 0x70
   1e5bc:	cmp	r3, #0
   1e5c0:	mov	fp, r0
   1e5c4:	beq	1f328 <_start@@Base+0xa14c>
   1e5c8:	mov	r1, r6
   1e5cc:	ldr	r0, [r9]
   1e5d0:	vstr	d8, [sp, #136]	; 0x88
   1e5d4:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1e5d8:	mov	r1, fp
   1e5dc:	mov	r3, r5
   1e5e0:	mov	r2, sl
   1e5e4:	subs	r4, r0, #0
   1e5e8:	mov	r0, r9
   1e5ec:	beq	1f2f0 <_start@@Base+0xa114>
   1e5f0:	bl	2db84 <flatcc_json_parser_double@@Base>
   1e5f4:	cmp	r0, fp
   1e5f8:	bne	1e59c <_start@@Base+0x93c0>
   1e5fc:	str	r5, [sp]
   1e600:	mov	r3, r7
   1e604:	mov	r2, sl
   1e608:	mov	r1, fp
   1e60c:	mov	r0, r9
   1e610:	bl	17ebc <_start@@Base+0x2ce0>
   1e614:	cmp	sl, r0
   1e618:	cmpne	r0, fp
   1e61c:	bne	1e59c <_start@@Base+0x93c0>
   1e620:	mov	r3, sl
   1e624:	mov	fp, r0
   1e628:	mov	sl, r9
   1e62c:	mov	r9, r3
   1e630:	b	1bb50 <_start@@Base+0x6974>
   1e634:	mov	r3, #0
   1e638:	strb	r3, [sp, #128]	; 0x80
   1e63c:	ldr	r3, [pc, #832]	; 1e984 <_start@@Base+0x97a8>
   1e640:	add	r2, sp, #128	; 0x80
   1e644:	add	r3, pc, r3
   1e648:	str	r2, [sp]
   1e64c:	add	r3, r3, #320	; 0x140
   1e650:	mov	r2, sl
   1e654:	mov	r1, r4
   1e658:	mov	r0, r9
   1e65c:	bl	1803c <_start@@Base+0x2e60>
   1e660:	cmp	sl, r0
   1e664:	cmpne	r0, r4
   1e668:	mov	fp, r0
   1e66c:	beq	1ffa8 <_start@@Base+0xadcc>
   1e670:	ldrb	r3, [sp, #128]	; 0x80
   1e674:	b	1da00 <_start@@Base+0x8824>
   1e678:	mov	r1, r4
   1e67c:	mov	r2, sl
   1e680:	mov	r0, r9
   1e684:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e688:	mov	fp, r0
   1e68c:	b	1c034 <_start@@Base+0x6e58>
   1e690:	mov	r4, r0
   1e694:	add	r3, sp, #110	; 0x6e
   1e698:	str	r3, [sp]
   1e69c:	mov	r2, sl
   1e6a0:	mov	r3, r8
   1e6a4:	mov	r1, r4
   1e6a8:	mov	r0, r9
   1e6ac:	bl	181e0 <_start@@Base+0x3004>
   1e6b0:	cmp	sl, r0
   1e6b4:	cmpne	r0, r4
   1e6b8:	mov	fp, r0
   1e6bc:	beq	1dd68 <_start@@Base+0x8b8c>
   1e6c0:	ldrh	r2, [sp, #110]	; 0x6e
   1e6c4:	b	1d50c <_start@@Base+0x8330>
   1e6c8:	mov	r3, #1
   1e6cc:	add	fp, r4, #4
   1e6d0:	strb	r3, [sp, #128]	; 0x80
   1e6d4:	b	1da08 <_start@@Base+0x882c>
   1e6d8:	mov	r3, #5
   1e6dc:	mov	r2, sl
   1e6e0:	mov	r1, fp
   1e6e4:	mov	r0, r9
   1e6e8:	bl	18f38 <_start@@Base+0x3d5c>
   1e6ec:	cmp	fp, r0
   1e6f0:	mov	r5, r0
   1e6f4:	beq	1bf7c <_start@@Base+0x6da0>
   1e6f8:	add	r4, sp, #144	; 0x90
   1e6fc:	mov	r3, #0
   1e700:	mov	r1, r0
   1e704:	str	r3, [r4, #-8]!
   1e708:	mov	r2, sl
   1e70c:	mov	r0, r9
   1e710:	mov	r3, r4
   1e714:	bl	2dc58 <flatcc_json_parser_float@@Base>
   1e718:	cmp	r0, r5
   1e71c:	mov	fp, r0
   1e720:	beq	1f3bc <_start@@Base+0xa1e0>
   1e724:	vldr	s15, [pc, #596]	; 1e980 <_start@@Base+0x97a4>
   1e728:	vldr	s14, [sp, #136]	; 0x88
   1e72c:	vcmp.f32	s14, s15
   1e730:	vmrs	APSR_nzcv, fpscr
   1e734:	bne	1e744 <_start@@Base+0x9568>
   1e738:	ldr	r3, [r9, #8]
   1e73c:	tst	r3, #2
   1e740:	beq	1c034 <_start@@Base+0x6e58>
   1e744:	mov	r3, #4
   1e748:	mov	r2, r3
   1e74c:	mov	r1, #25
   1e750:	ldr	r0, [r9]
   1e754:	bl	29488 <flatcc_builder_table_add@@Base>
   1e758:	cmp	r0, #0
   1e75c:	beq	1faa0 <_start@@Base+0xa8c4>
   1e760:	ldr	r3, [sp, #136]	; 0x88
   1e764:	str	r3, [r0]
   1e768:	b	1c034 <_start@@Base+0x6e58>
   1e76c:	mov	r1, r4
   1e770:	mov	r2, sl
   1e774:	mov	r0, r9
   1e778:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e77c:	mov	fp, r0
   1e780:	b	1c034 <_start@@Base+0x6e58>
   1e784:	mov	r1, fp
   1e788:	mov	r2, sl
   1e78c:	mov	r0, r9
   1e790:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e794:	mov	fp, r0
   1e798:	b	1c034 <_start@@Base+0x6e58>
   1e79c:	mov	r1, fp
   1e7a0:	mov	r2, sl
   1e7a4:	mov	r0, r9
   1e7a8:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7ac:	mov	fp, r0
   1e7b0:	b	1c034 <_start@@Base+0x6e58>
   1e7b4:	mov	r1, r0
   1e7b8:	mov	r3, #8
   1e7bc:	mov	r2, sl
   1e7c0:	mov	r0, r9
   1e7c4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1e7c8:	mov	fp, r0
   1e7cc:	cmp	r4, fp
   1e7d0:	bne	1e6c0 <_start@@Base+0x94e4>
   1e7d4:	b	1e694 <_start@@Base+0x94b8>
   1e7d8:	ldr	r3, [pc, #424]	; 1e988 <_start@@Base+0x97ac>
   1e7dc:	mov	r1, r0
   1e7e0:	add	r3, pc, r3
   1e7e4:	str	r4, [sp]
   1e7e8:	add	r3, r3, #380	; 0x17c
   1e7ec:	mov	r2, sl
   1e7f0:	mov	r0, r9
   1e7f4:	bl	17d40 <_start@@Base+0x2b64>
   1e7f8:	cmp	sl, r0
   1e7fc:	cmpne	fp, r0
   1e800:	beq	1fdc8 <_start@@Base+0xabec>
   1e804:	mov	fp, r0
   1e808:	b	1c3fc <_start@@Base+0x7220>
   1e80c:	mov	r1, r4
   1e810:	mov	r2, sl
   1e814:	mov	r0, r9
   1e818:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e81c:	mov	fp, r0
   1e820:	b	1c034 <_start@@Base+0x6e58>
   1e824:	mov	r1, fp
   1e828:	mov	r2, sl
   1e82c:	mov	r0, r9
   1e830:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e834:	mov	fp, r0
   1e838:	b	1c034 <_start@@Base+0x6e58>
   1e83c:	mov	r3, sl
   1e840:	mov	sl, r9
   1e844:	mov	r9, r3
   1e848:	b	1bb50 <_start@@Base+0x6974>
   1e84c:	ldr	r0, [r9]
   1e850:	bl	28784 <flatcc_builder_end_vector@@Base>
   1e854:	cmp	r0, #0
   1e858:	str	r0, [sp, #116]	; 0x74
   1e85c:	beq	1ff84 <_start@@Base+0xada8>
   1e860:	mov	r1, #24
   1e864:	ldr	r0, [r9]
   1e868:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1e86c:	cmp	r0, #0
   1e870:	beq	1ff74 <_start@@Base+0xad98>
   1e874:	ldr	r3, [sp, #116]	; 0x74
   1e878:	str	r3, [r0]
   1e87c:	b	1c034 <_start@@Base+0x6e58>
   1e880:	mov	r1, r4
   1e884:	mov	r2, sl
   1e888:	mov	r0, r9
   1e88c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e890:	mov	fp, r0
   1e894:	b	1c034 <_start@@Base+0x6e58>
   1e898:	mov	r3, #4
   1e89c:	mov	r2, sl
   1e8a0:	mov	r1, fp
   1e8a4:	mov	r0, r9
   1e8a8:	bl	18f38 <_start@@Base+0x3d5c>
   1e8ac:	cmp	fp, r0
   1e8b0:	mov	r5, r0
   1e8b4:	beq	1c984 <_start@@Base+0x77a8>
   1e8b8:	add	r4, sp, #144	; 0x90
   1e8bc:	mov	r3, #0
   1e8c0:	strh	r3, [r4, #-8]!
   1e8c4:	mov	r1, r0
   1e8c8:	mov	r2, sl
   1e8cc:	mov	r3, r4
   1e8d0:	mov	r0, r9
   1e8d4:	bl	17b88 <_start@@Base+0x29ac>
   1e8d8:	cmp	r0, r5
   1e8dc:	mov	fp, r0
   1e8e0:	beq	1f8c8 <_start@@Base+0xa6ec>
   1e8e4:	ldrsh	r3, [sp, #136]	; 0x88
   1e8e8:	cmp	r3, #150	; 0x96
   1e8ec:	bne	1e8fc <_start@@Base+0x9720>
   1e8f0:	ldr	r3, [r9, #8]
   1e8f4:	tst	r3, #2
   1e8f8:	beq	1c034 <_start@@Base+0x6e58>
   1e8fc:	mov	r3, #2
   1e900:	mov	r2, r3
   1e904:	mov	r1, #1
   1e908:	ldr	r0, [r9]
   1e90c:	bl	29488 <flatcc_builder_table_add@@Base>
   1e910:	cmp	r0, #0
   1e914:	beq	1fb84 <_start@@Base+0xa9a8>
   1e918:	ldrsh	r3, [sp, #136]	; 0x88
   1e91c:	strh	r3, [r0]
   1e920:	b	1c034 <_start@@Base+0x6e58>
   1e924:	mov	r1, fp
   1e928:	mov	r3, #7
   1e92c:	mov	r2, sl
   1e930:	mov	r0, r9
   1e934:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1e938:	mov	fp, r0
   1e93c:	b	1e7cc <_start@@Base+0x95f0>
   1e940:	ldr	r3, [pc, #68]	; 1e98c <_start@@Base+0x97b0>
   1e944:	mov	r1, r0
   1e948:	add	r3, pc, r3
   1e94c:	str	r7, [sp]
   1e950:	add	r3, r3, #232	; 0xe8
   1e954:	mov	r2, sl
   1e958:	mov	r0, r9
   1e95c:	bl	17d40 <_start@@Base+0x2b64>
   1e960:	cmp	sl, r0
   1e964:	cmpne	r4, r0
   1e968:	mov	r4, r0
   1e96c:	bne	1e208 <_start@@Base+0x902c>
   1e970:	b	1e498 <_start@@Base+0x92bc>
   1e974:	nop			; (mov r0, r0)
	...
   1e980:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1e984:	andeq	r5, r3, ip, lsr sl
   1e988:	andeq	r5, r3, r0, lsr #17
   1e98c:	andeq	r5, r3, r8, lsr r7
   1e990:	andeq	r5, r3, ip, lsl #9
   1e994:	ldrdeq	r5, [r3], -ip
   1e998:	ldrdeq	r5, [r3], -r8
   1e99c:	ldr	r3, [sp, #120]	; 0x78
   1e9a0:	mov	r2, r9
   1e9a4:	mov	r0, sl
   1e9a8:	bl	2f464 <flatcc_json_parser_finalize_unions@@Base>
   1e9ac:	mov	fp, r0
   1e9b0:	ldr	r0, [sl]
   1e9b4:	bl	2843c <flatcc_builder_end_table@@Base>
   1e9b8:	ldr	r3, [sp, #76]	; 0x4c
   1e9bc:	cmp	r0, #0
   1e9c0:	str	r0, [r3]
   1e9c4:	beq	1bb50 <_start@@Base+0x6974>
   1e9c8:	mov	r0, fp
   1e9cc:	b	1bb64 <_start@@Base+0x6988>
   1e9d0:	ldr	r3, [r9, #20]
   1e9d4:	cmp	r3, #0
   1e9d8:	bne	1d400 <_start@@Base+0x8224>
   1e9dc:	ldr	r0, [r9]
   1e9e0:	bl	2843c <flatcc_builder_end_table@@Base>
   1e9e4:	cmp	r0, #0
   1e9e8:	str	r0, [sp, #116]	; 0x74
   1e9ec:	beq	1d400 <_start@@Base+0x8224>
   1e9f0:	b	1d424 <_start@@Base+0x8248>
   1e9f4:	sub	r3, sl, r4
   1e9f8:	cmp	r3, #2
   1e9fc:	bgt	1f5e8 <_start@@Base+0xa40c>
   1ea00:	mov	r1, r4
   1ea04:	mov	r2, sl
   1ea08:	mov	r0, r9
   1ea0c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea10:	mov	fp, r0
   1ea14:	b	1c034 <_start@@Base+0x6e58>
   1ea18:	sub	r3, sl, fp
   1ea1c:	cmp	r3, #8
   1ea20:	bgt	1f510 <_start@@Base+0xa334>
   1ea24:	add	fp, fp, #8
   1ea28:	mov	r0, fp
   1ea2c:	mov	r1, sl
   1ea30:	bl	15308 <_start@@Base+0x12c>
   1ea34:	mov	r0, #0
   1ea38:	and	r1, r1, #-16777216	; 0xff000000
   1ea3c:	cmp	r1, #1627389952	; 0x61000000
   1ea40:	cmpeq	r0, #0
   1ea44:	bne	1f98c <_start@@Base+0xa7b0>
   1ea48:	sub	r3, sl, fp
   1ea4c:	cmp	r3, #1
   1ea50:	ble	1fb14 <_start@@Base+0xa938>
   1ea54:	mov	r3, #1
   1ea58:	mov	r2, sl
   1ea5c:	mov	r1, fp
   1ea60:	mov	r0, r9
   1ea64:	bl	18f38 <_start@@Base+0x3d5c>
   1ea68:	cmp	fp, r0
   1ea6c:	mov	r4, r0
   1ea70:	beq	1fb18 <_start@@Base+0xa93c>
   1ea74:	add	r5, sp, #144	; 0x90
   1ea78:	mov	r3, #0
   1ea7c:	str	r3, [r5, #-8]!
   1ea80:	mov	r1, r0
   1ea84:	mov	r2, sl
   1ea88:	mov	r3, r5
   1ea8c:	mov	r0, r9
   1ea90:	bl	17950 <_start@@Base+0x2774>
   1ea94:	cmp	r0, r4
   1ea98:	mov	fp, r0
   1ea9c:	beq	1fc6c <_start@@Base+0xaa90>
   1eaa0:	ldr	r3, [sp, #136]	; 0x88
   1eaa4:	cmp	r3, #0
   1eaa8:	bne	1eab8 <_start@@Base+0x98dc>
   1eaac:	ldr	r3, [r9, #8]
   1eab0:	tst	r3, #2
   1eab4:	beq	1c034 <_start@@Base+0x6e58>
   1eab8:	mov	r3, #4
   1eabc:	mov	r2, r3
   1eac0:	mov	r1, #21
   1eac4:	ldr	r0, [r9]
   1eac8:	bl	29488 <flatcc_builder_table_add@@Base>
   1eacc:	cmp	r0, #0
   1ead0:	beq	1fdb8 <_start@@Base+0xabdc>
   1ead4:	ldr	r3, [sp, #136]	; 0x88
   1ead8:	str	r3, [r0]
   1eadc:	b	1c034 <_start@@Base+0x6e58>
   1eae0:	mov	r1, r0
   1eae4:	mov	r3, #7
   1eae8:	mov	r2, sl
   1eaec:	mov	r0, r9
   1eaf0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1eaf4:	mov	fp, r0
   1eaf8:	b	1c968 <_start@@Base+0x778c>
   1eafc:	mov	r3, #8
   1eb00:	mov	r2, sl
   1eb04:	mov	r1, fp
   1eb08:	mov	r0, r9
   1eb0c:	bl	18f38 <_start@@Base+0x3d5c>
   1eb10:	cmp	fp, r0
   1eb14:	mov	r4, r0
   1eb18:	beq	1cd4c <_start@@Base+0x7b70>
   1eb1c:	add	r5, sp, #144	; 0x90
   1eb20:	mov	r3, #0
   1eb24:	str	r3, [r5, #-8]!
   1eb28:	mov	r1, r0
   1eb2c:	mov	r2, sl
   1eb30:	mov	r3, r5
   1eb34:	mov	r0, r9
   1eb38:	bl	17ac0 <_start@@Base+0x28e4>
   1eb3c:	cmp	r0, r4
   1eb40:	mov	fp, r0
   1eb44:	beq	1f92c <_start@@Base+0xa750>
   1eb48:	ldr	r3, [sp, #136]	; 0x88
   1eb4c:	cmp	r3, #0
   1eb50:	bne	1eb60 <_start@@Base+0x9984>
   1eb54:	ldr	r3, [r9, #8]
   1eb58:	tst	r3, #2
   1eb5c:	beq	1c034 <_start@@Base+0x6e58>
   1eb60:	mov	r3, #4
   1eb64:	mov	r2, r3
   1eb68:	mov	r1, #16
   1eb6c:	ldr	r0, [r9]
   1eb70:	bl	29488 <flatcc_builder_table_add@@Base>
   1eb74:	cmp	r0, #0
   1eb78:	beq	1fca8 <_start@@Base+0xaacc>
   1eb7c:	ldr	r3, [sp, #136]	; 0x88
   1eb80:	str	r3, [r0]
   1eb84:	b	1c034 <_start@@Base+0x6e58>
   1eb88:	mov	r3, #7
   1eb8c:	mov	r2, sl
   1eb90:	mov	r1, r4
   1eb94:	mov	r0, r9
   1eb98:	bl	18f38 <_start@@Base+0x3d5c>
   1eb9c:	cmp	r4, r0
   1eba0:	mov	fp, r0
   1eba4:	beq	1fe2c <_start@@Base+0xac50>
   1eba8:	mov	r2, #8
   1ebac:	mov	r1, r2
   1ebb0:	mvn	r3, #-536870912	; 0xe0000000
   1ebb4:	ldr	r0, [r9]
   1ebb8:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1ebbc:	cmp	r0, #0
   1ebc0:	bne	1fb04 <_start@@Base+0xa928>
   1ebc4:	ldr	r8, [sp, #72]	; 0x48
   1ebc8:	mov	r1, fp
   1ebcc:	mov	r3, r8
   1ebd0:	mov	r2, sl
   1ebd4:	mov	r0, r9
   1ebd8:	bl	18e84 <_start@@Base+0x3ca8>
   1ebdc:	ldr	r3, [sp, #112]	; 0x70
   1ebe0:	cmp	r3, #0
   1ebe4:	mov	fp, r0
   1ebe8:	beq	1ecb0 <_start@@Base+0x9ad4>
   1ebec:	ldr	r7, [pc, #-612]	; 1e990 <_start@@Base+0x97b4>
   1ebf0:	add	r5, sp, #136	; 0x88
   1ebf4:	add	r7, pc, r7
   1ebf8:	add	r7, r7, #512	; 0x200
   1ebfc:	str	r7, [sp, #92]	; 0x5c
   1ec00:	b	1ec30 <_start@@Base+0x9a54>
   1ec04:	ldrd	r6, [sp, #136]	; 0x88
   1ec08:	mov	r1, r0
   1ec0c:	mov	r3, r8
   1ec10:	strd	r6, [r4]
   1ec14:	mov	r2, sl
   1ec18:	mov	r0, r9
   1ec1c:	bl	19a10 <_start@@Base+0x4834>
   1ec20:	ldr	r3, [sp, #112]	; 0x70
   1ec24:	cmp	r3, #0
   1ec28:	mov	fp, r0
   1ec2c:	beq	1ecb0 <_start@@Base+0x9ad4>
   1ec30:	mov	r2, #0
   1ec34:	mov	r3, #0
   1ec38:	mov	r1, #1
   1ec3c:	ldr	r0, [r9]
   1ec40:	strd	r2, [sp, #136]	; 0x88
   1ec44:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1ec48:	mov	r1, fp
   1ec4c:	mov	r3, r5
   1ec50:	mov	r2, sl
   1ec54:	subs	r4, r0, #0
   1ec58:	mov	r0, r9
   1ec5c:	beq	1eca4 <_start@@Base+0x9ac8>
   1ec60:	bl	177f4 <_start@@Base+0x2618>
   1ec64:	cmp	r0, fp
   1ec68:	bne	1ec04 <_start@@Base+0x9a28>
   1ec6c:	str	r5, [sp]
   1ec70:	ldr	r3, [sp, #92]	; 0x5c
   1ec74:	mov	r2, sl
   1ec78:	mov	r1, fp
   1ec7c:	mov	r0, r9
   1ec80:	bl	18ca0 <_start@@Base+0x3ac4>
   1ec84:	cmp	sl, r0
   1ec88:	cmpne	r0, fp
   1ec8c:	bne	1ec04 <_start@@Base+0x9a28>
   1ec90:	mov	r3, sl
   1ec94:	mov	fp, r0
   1ec98:	mov	sl, r9
   1ec9c:	mov	r9, r3
   1eca0:	b	1bb50 <_start@@Base+0x6974>
   1eca4:	mov	sl, r9
   1eca8:	mov	r9, r2
   1ecac:	b	1bb50 <_start@@Base+0x6974>
   1ecb0:	ldr	r0, [r9]
   1ecb4:	bl	28784 <flatcc_builder_end_vector@@Base>
   1ecb8:	cmp	r0, #0
   1ecbc:	str	r0, [sp, #116]	; 0x74
   1ecc0:	beq	1fe64 <_start@@Base+0xac88>
   1ecc4:	mov	r1, #32
   1ecc8:	ldr	r0, [r9]
   1eccc:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1ecd0:	cmp	r0, #0
   1ecd4:	beq	1fe54 <_start@@Base+0xac78>
   1ecd8:	ldr	r3, [sp, #116]	; 0x74
   1ecdc:	str	r3, [r0]
   1ece0:	b	1c034 <_start@@Base+0x6e58>
   1ece4:	mov	r1, r0
   1ece8:	str	r7, [sp]
   1ecec:	ldr	r3, [sp, #92]	; 0x5c
   1ecf0:	mov	r2, sl
   1ecf4:	mov	r0, r9
   1ecf8:	bl	17d40 <_start@@Base+0x2b64>
   1ecfc:	cmp	sl, r0
   1ed00:	cmpne	r4, r0
   1ed04:	mov	r4, r0
   1ed08:	bne	1e368 <_start@@Base+0x918c>
   1ed0c:	b	1e498 <_start@@Base+0x92bc>
   1ed10:	mov	r1, r0
   1ed14:	mov	r3, #8
   1ed18:	mov	r2, sl
   1ed1c:	mov	r0, r9
   1ed20:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1ed24:	mov	fp, r0
   1ed28:	mov	r3, #0
   1ed2c:	cmp	r4, fp
   1ed30:	strb	r3, [sp, #128]	; 0x80
   1ed34:	bne	1da14 <_start@@Base+0x8838>
   1ed38:	b	1e63c <_start@@Base+0x9460>
   1ed3c:	mov	r3, #7
   1ed40:	mov	r2, sl
   1ed44:	mov	r1, r4
   1ed48:	mov	r0, r9
   1ed4c:	bl	18f38 <_start@@Base+0x3d5c>
   1ed50:	cmp	r4, r0
   1ed54:	mov	fp, r0
   1ed58:	beq	1fd18 <_start@@Base+0xab3c>
   1ed5c:	mvn	r3, #-536870912	; 0xe0000000
   1ed60:	mov	r2, #4
   1ed64:	mov	r1, #8
   1ed68:	ldr	r0, [r9]
   1ed6c:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1ed70:	cmp	r0, #0
   1ed74:	bne	1fb30 <_start@@Base+0xa954>
   1ed78:	mov	r1, fp
   1ed7c:	ldr	r3, [sp, #72]	; 0x48
   1ed80:	mov	r2, sl
   1ed84:	mov	r0, r9
   1ed88:	bl	18e84 <_start@@Base+0x3ca8>
   1ed8c:	ldr	r3, [sp, #112]	; 0x70
   1ed90:	cmp	r3, #0
   1ed94:	mov	fp, r0
   1ed98:	beq	1efe0 <_start@@Base+0x9e04>
   1ed9c:	ldr	r2, [pc, #-1040]	; 1e994 <_start@@Base+0x97b8>
   1eda0:	ldr	r3, [pc, #-1040]	; 1e998 <_start@@Base+0x97bc>
   1eda4:	add	r2, pc, r2
   1eda8:	add	r3, pc, r3
   1edac:	mov	r4, r0
   1edb0:	add	r2, r2, #308	; 0x134
   1edb4:	add	r3, r3, #296	; 0x128
   1edb8:	str	r2, [sp, #92]	; 0x5c
   1edbc:	str	r3, [sp, #96]	; 0x60
   1edc0:	mov	r1, #1
   1edc4:	ldr	r0, [r9]
   1edc8:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1edcc:	subs	fp, r0, #0
   1edd0:	beq	1f06c <_start@@Base+0x9e90>
   1edd4:	add	r8, sp, #132	; 0x84
   1edd8:	mov	r3, r8
   1eddc:	mov	r1, r4
   1ede0:	mov	r2, sl
   1ede4:	mov	r0, r9
   1ede8:	bl	17c8c <_start@@Base+0x2ab0>
   1edec:	ldr	r3, [sp, #132]	; 0x84
   1edf0:	cmp	r3, #0
   1edf4:	bne	1ee50 <_start@@Base+0x9c74>
   1edf8:	b	1efb8 <_start@@Base+0x9ddc>
   1edfc:	add	r3, pc, #868	; 0x364
   1ee00:	ldrd	r2, [r3]
   1ee04:	cmp	r1, r3
   1ee08:	cmpeq	r0, r2
   1ee0c:	bne	1ee1c <_start@@Base+0x9c40>
   1ee10:	sub	r3, sl, r4
   1ee14:	cmp	r3, #8
   1ee18:	bgt	1ef4c <_start@@Base+0x9d70>
   1ee1c:	mov	r1, r4
   1ee20:	mov	r2, sl
   1ee24:	mov	r0, r9
   1ee28:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ee2c:	mov	r4, r0
   1ee30:	mov	r3, r8
   1ee34:	mov	r1, r4
   1ee38:	mov	r2, sl
   1ee3c:	mov	r0, r9
   1ee40:	bl	19b94 <_start@@Base+0x49b8>
   1ee44:	ldr	r3, [sp, #132]	; 0x84
   1ee48:	cmp	r3, #0
   1ee4c:	beq	1efb8 <_start@@Base+0x9ddc>
   1ee50:	cmp	sl, r0
   1ee54:	beq	1ef14 <_start@@Base+0x9d38>
   1ee58:	ldrb	r3, [r0]
   1ee5c:	cmp	r3, #34	; 0x22
   1ee60:	addeq	r4, r0, #1
   1ee64:	beq	1ee80 <_start@@Base+0x9ca4>
   1ee68:	mov	r1, r0
   1ee6c:	mov	r3, #5
   1ee70:	mov	r2, sl
   1ee74:	mov	r0, r9
   1ee78:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1ee7c:	mov	r4, r0
   1ee80:	mov	r1, sl
   1ee84:	mov	r0, r4
   1ee88:	bl	15308 <_start@@Base+0x12c>
   1ee8c:	ldr	r3, [pc, #732]	; 1f170 <_start@@Base+0x9f94>
   1ee90:	ldr	r7, [pc, #732]	; 1f174 <_start@@Base+0x9f98>
   1ee94:	mov	r2, #0
   1ee98:	mov	r6, #0
   1ee9c:	and	r3, r3, r1
   1eea0:	and	r2, r2, r0
   1eea4:	cmp	r3, r7
   1eea8:	cmpeq	r2, r6
   1eeac:	bne	1edfc <_start@@Base+0x9c20>
   1eeb0:	sub	r3, sl, r4
   1eeb4:	cmp	r3, #2
   1eeb8:	ble	1ee1c <_start@@Base+0x9c40>
   1eebc:	mov	r3, #2
   1eec0:	mov	r2, sl
   1eec4:	mov	r1, r4
   1eec8:	mov	r0, r9
   1eecc:	bl	18f38 <_start@@Base+0x3d5c>
   1eed0:	cmp	r4, r0
   1eed4:	mov	r6, r0
   1eed8:	beq	1ee1c <_start@@Base+0x9c40>
   1eedc:	add	r5, sp, #144	; 0x90
   1eee0:	mov	r3, #0
   1eee4:	str	r3, [r5, #-8]!
   1eee8:	mov	r1, r0
   1eeec:	mov	r2, sl
   1eef0:	mov	r3, r5
   1eef4:	mov	r0, r9
   1eef8:	bl	17950 <_start@@Base+0x2774>
   1eefc:	cmp	r6, r0
   1ef00:	mov	r4, r0
   1ef04:	beq	1f040 <_start@@Base+0x9e64>
   1ef08:	ldr	r3, [sp, #136]	; 0x88
   1ef0c:	str	r3, [fp]
   1ef10:	b	1ee30 <_start@@Base+0x9c54>
   1ef14:	mov	r1, sl
   1ef18:	mov	r0, sl
   1ef1c:	bl	15308 <_start@@Base+0x12c>
   1ef20:	ldr	r3, [pc, #584]	; 1f170 <_start@@Base+0x9f94>
   1ef24:	ldr	r5, [pc, #584]	; 1f174 <_start@@Base+0x9f98>
   1ef28:	mov	r2, #0
   1ef2c:	mov	r4, #0
   1ef30:	and	r3, r3, r1
   1ef34:	and	r2, r2, r0
   1ef38:	cmp	r3, r5
   1ef3c:	cmpeq	r2, r4
   1ef40:	mov	r4, sl
   1ef44:	bne	1edfc <_start@@Base+0x9c20>
   1ef48:	b	1ee1c <_start@@Base+0x9c40>
   1ef4c:	mov	r3, #8
   1ef50:	mov	r2, sl
   1ef54:	mov	r1, r4
   1ef58:	mov	r0, r9
   1ef5c:	bl	18f38 <_start@@Base+0x3d5c>
   1ef60:	cmp	r4, r0
   1ef64:	mov	r6, r0
   1ef68:	beq	1ee1c <_start@@Base+0x9c40>
   1ef6c:	add	r5, sp, #144	; 0x90
   1ef70:	mov	r3, #0
   1ef74:	str	r3, [r5, #-8]!
   1ef78:	mov	r1, r0
   1ef7c:	mov	r2, sl
   1ef80:	mov	r3, r5
   1ef84:	mov	r0, r9
   1ef88:	bl	17950 <_start@@Base+0x2774>
   1ef8c:	cmp	r6, r0
   1ef90:	mov	r4, r0
   1ef94:	beq	1f014 <_start@@Base+0x9e38>
   1ef98:	ldr	r3, [sp, #136]	; 0x88
   1ef9c:	str	r3, [fp, #4]
   1efa0:	b	1ee30 <_start@@Base+0x9c54>
   1efa4:	mov	r1, r0
   1efa8:	mov	r3, #33	; 0x21
   1efac:	mov	r2, sl
   1efb0:	mov	r0, r9
   1efb4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1efb8:	mov	r1, r0
   1efbc:	ldr	r3, [sp, #72]	; 0x48
   1efc0:	mov	r2, sl
   1efc4:	mov	r0, r9
   1efc8:	bl	19a10 <_start@@Base+0x4834>
   1efcc:	ldr	r3, [sp, #112]	; 0x70
   1efd0:	cmp	r3, #0
   1efd4:	mov	r4, r0
   1efd8:	bne	1edc0 <_start@@Base+0x9be4>
   1efdc:	mov	fp, r0
   1efe0:	ldr	r0, [r9]
   1efe4:	bl	28784 <flatcc_builder_end_vector@@Base>
   1efe8:	cmp	r0, #0
   1efec:	str	r0, [sp, #116]	; 0x74
   1eff0:	beq	1fe44 <_start@@Base+0xac68>
   1eff4:	mov	r1, #29
   1eff8:	ldr	r0, [r9]
   1effc:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1f000:	cmp	r0, #0
   1f004:	beq	1fe34 <_start@@Base+0xac58>
   1f008:	ldr	r3, [sp, #116]	; 0x74
   1f00c:	str	r3, [r0]
   1f010:	b	1c034 <_start@@Base+0x6e58>
   1f014:	mov	r1, r0
   1f018:	str	r5, [sp]
   1f01c:	ldr	r3, [sp, #92]	; 0x5c
   1f020:	mov	r2, sl
   1f024:	mov	r0, r9
   1f028:	bl	18ae4 <_start@@Base+0x3908>
   1f02c:	cmp	sl, r0
   1f030:	cmpne	r4, r0
   1f034:	beq	1efa4 <_start@@Base+0x9dc8>
   1f038:	mov	r4, r0
   1f03c:	b	1ef98 <_start@@Base+0x9dbc>
   1f040:	mov	r1, r0
   1f044:	str	r5, [sp]
   1f048:	ldr	r3, [sp, #96]	; 0x60
   1f04c:	mov	r2, sl
   1f050:	mov	r0, r9
   1f054:	bl	18ae4 <_start@@Base+0x3908>
   1f058:	cmp	sl, r0
   1f05c:	cmpne	r4, r0
   1f060:	beq	1efa4 <_start@@Base+0x9dc8>
   1f064:	mov	r4, r0
   1f068:	b	1ef08 <_start@@Base+0x9d2c>
   1f06c:	mov	r3, sl
   1f070:	mov	fp, r4
   1f074:	mov	sl, r9
   1f078:	mov	r9, r3
   1f07c:	b	1bb50 <_start@@Base+0x6974>
   1f080:	mov	sl, r9
   1f084:	mov	r9, r2
   1f088:	b	1bb50 <_start@@Base+0x6974>
   1f08c:	ldr	r0, [r9]
   1f090:	bl	288ac <flatcc_builder_end_offset_vector@@Base>
   1f094:	cmp	r0, #0
   1f098:	str	r0, [sp, #116]	; 0x74
   1f09c:	beq	1fdec <_start@@Base+0xac10>
   1f0a0:	mov	r1, #11
   1f0a4:	ldr	r0, [r9]
   1f0a8:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1f0ac:	cmp	r0, #0
   1f0b0:	beq	1fddc <_start@@Base+0xac00>
   1f0b4:	ldr	r3, [sp, #116]	; 0x74
   1f0b8:	str	r3, [r0]
   1f0bc:	b	1c034 <_start@@Base+0x6e58>
   1f0c0:	mov	r4, r0
   1f0c4:	mov	r1, r4
   1f0c8:	mov	r2, sl
   1f0cc:	mov	r0, r9
   1f0d0:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f0d4:	mov	fp, r0
   1f0d8:	b	1c034 <_start@@Base+0x6e58>
   1f0dc:	mov	r1, r0
   1f0e0:	str	r7, [sp]
   1f0e4:	ldr	r3, [sp, #96]	; 0x60
   1f0e8:	mov	r2, sl
   1f0ec:	mov	r0, r9
   1f0f0:	bl	17d40 <_start@@Base+0x2b64>
   1f0f4:	cmp	sl, r0
   1f0f8:	cmpne	r4, r0
   1f0fc:	mov	r4, r0
   1f100:	bne	1e438 <_start@@Base+0x925c>
   1f104:	b	1e498 <_start@@Base+0x92bc>
   1f108:	mov	sl, r9
   1f10c:	mov	r9, r2
   1f110:	b	1bb50 <_start@@Base+0x6974>
   1f114:	ldr	r0, [r9]
   1f118:	bl	28784 <flatcc_builder_end_vector@@Base>
   1f11c:	cmp	r0, #0
   1f120:	str	r0, [sp, #116]	; 0x74
   1f124:	beq	1ff1c <_start@@Base+0xad40>
   1f128:	mov	r1, #5
   1f12c:	ldr	r0, [r9]
   1f130:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1f134:	cmp	r0, #0
   1f138:	beq	1ff0c <_start@@Base+0xad30>
   1f13c:	ldr	r3, [sp, #116]	; 0x74
   1f140:	str	r3, [r0]
   1f144:	b	1c034 <_start@@Base+0x6e58>
   1f148:	mov	r1, r0
   1f14c:	mov	r3, #7
   1f150:	mov	r2, sl
   1f154:	mov	r0, r9
   1f158:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   1f15c:	mov	fp, r0
   1f160:	b	1ed28 <_start@@Base+0x9b4c>
   1f164:	nop			; (mov r0, r0)
   1f168:	cmnvs	lr, r5, ror #6
   1f16c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1f170:			; <UNDEFINED> instruction: 0xffff0000
   1f174:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1f178:			; <UNDEFINED> instruction: 0x00034cbc
   1f17c:	andeq	r4, r3, r8, lsl #25
   1f180:	andeq	r4, r3, r4, asr #21
   1f184:	andeq	r4, r3, r0, lsl r9
   1f188:			; <UNDEFINED> instruction: 0x000347b0
   1f18c:	andeq	r4, r3, ip, asr #14
   1f190:	andeq	r4, r3, r0, asr #13
   1f194:	andeq	r4, r3, r8, lsr #11
   1f198:	andeq	r4, r3, r8, lsr r5
   1f19c:	andeq	r4, r3, r8, lsr r1
   1f1a0:	mov	r3, #4
   1f1a4:	mov	r2, sl
   1f1a8:	mov	r1, r4
   1f1ac:	mov	r0, r9
   1f1b0:	bl	18f38 <_start@@Base+0x3d5c>
   1f1b4:	cmp	r4, r0
   1f1b8:	mov	fp, r0
   1f1bc:	beq	1ffec <_start@@Base+0xae10>
   1f1c0:	cmp	sl, r0
   1f1c4:	beq	1f1d4 <_start@@Base+0x9ff8>
   1f1c8:	ldrb	r3, [r0]
   1f1cc:	cmp	r3, #91	; 0x5b
   1f1d0:	beq	1f728 <_start@@Base+0xa54c>
   1f1d4:	mov	r3, #0
   1f1d8:	mov	r2, r3
   1f1dc:	mov	r1, r3
   1f1e0:	ldr	r0, [r9]
   1f1e4:	bl	26c10 <flatcc_builder_start_buffer@@Base>
   1f1e8:	cmp	r0, #0
   1f1ec:	bne	1fd78 <_start@@Base+0xab9c>
   1f1f0:	mov	r1, fp
   1f1f4:	add	r3, sp, #116	; 0x74
   1f1f8:	mov	r2, sl
   1f1fc:	mov	r0, r9
   1f200:	bl	1b980 <_start@@Base+0x67a4>
   1f204:	ldr	r1, [sp, #116]	; 0x74
   1f208:	cmp	r1, #0
   1f20c:	mov	fp, r0
   1f210:	beq	1fd68 <_start@@Base+0xab8c>
   1f214:	ldr	r0, [r9]
   1f218:	bl	26cc8 <flatcc_builder_end_buffer@@Base>
   1f21c:	str	r0, [sp, #116]	; 0x74
   1f220:	cmp	r0, #0
   1f224:	beq	1fd58 <_start@@Base+0xab7c>
   1f228:	mov	r1, #13
   1f22c:	ldr	r0, [r9]
   1f230:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1f234:	cmp	r0, #0
   1f238:	beq	1fd48 <_start@@Base+0xab6c>
   1f23c:	ldr	r3, [sp, #116]	; 0x74
   1f240:	str	r3, [r0]
   1f244:	b	1c034 <_start@@Base+0x6e58>
   1f248:	mov	r1, fp
   1f24c:	mov	r2, sl
   1f250:	mov	r0, r9
   1f254:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f258:	mov	fp, r0
   1f25c:	b	1c034 <_start@@Base+0x6e58>
   1f260:	mov	r3, #8
   1f264:	mov	r2, sl
   1f268:	mov	r1, fp
   1f26c:	mov	r0, r9
   1f270:	bl	18f38 <_start@@Base+0x3d5c>
   1f274:	cmp	fp, r0
   1f278:	mov	r5, r0
   1f27c:	beq	1cbf4 <_start@@Base+0x7a18>
   1f280:	mov	r0, #0
   1f284:	mov	r1, #0
   1f288:	add	r4, sp, #144	; 0x90
   1f28c:	mov	r2, sl
   1f290:	strd	r0, [r4, #-8]!
   1f294:	mov	r1, r5
   1f298:	mov	r3, r4
   1f29c:	mov	r0, r9
   1f2a0:	bl	177f4 <_start@@Base+0x2618>
   1f2a4:	cmp	r0, r5
   1f2a8:	mov	fp, r0
   1f2ac:	beq	1f9b8 <_start@@Base+0xa7dc>
   1f2b0:	ldrd	r2, [sp, #136]	; 0x88
   1f2b4:	orrs	r3, r2, r3
   1f2b8:	bne	1f2c8 <_start@@Base+0xa0ec>
   1f2bc:	ldr	r3, [r9, #8]
   1f2c0:	tst	r3, #2
   1f2c4:	beq	1c034 <_start@@Base+0x6e58>
   1f2c8:	mov	r3, #8
   1f2cc:	mov	r2, r3
   1f2d0:	mov	r1, #18
   1f2d4:	ldr	r0, [r9]
   1f2d8:	bl	29488 <flatcc_builder_table_add@@Base>
   1f2dc:	cmp	r0, #0
   1f2e0:	beq	1fe0c <_start@@Base+0xac30>
   1f2e4:	ldrd	r2, [sp, #136]	; 0x88
   1f2e8:	strd	r2, [r0]
   1f2ec:	b	1c034 <_start@@Base+0x6e58>
   1f2f0:	mov	sl, r9
   1f2f4:	mov	r9, r2
   1f2f8:	b	1bb50 <_start@@Base+0x6974>
   1f2fc:	mov	r1, r0
   1f300:	str	r4, [sp]
   1f304:	ldr	r3, [sp, #92]	; 0x5c
   1f308:	mov	r2, sl
   1f30c:	mov	r0, r9
   1f310:	bl	18ca0 <_start@@Base+0x3ac4>
   1f314:	cmp	sl, r0
   1f318:	cmpne	fp, r0
   1f31c:	mov	fp, r0
   1f320:	bne	1d358 <_start@@Base+0x817c>
   1f324:	b	1dd68 <_start@@Base+0x8b8c>
   1f328:	ldr	r0, [r9]
   1f32c:	bl	28784 <flatcc_builder_end_vector@@Base>
   1f330:	cmp	r0, #0
   1f334:	str	r0, [sp, #116]	; 0x74
   1f338:	beq	1fe94 <_start@@Base+0xacb8>
   1f33c:	mov	r1, #33	; 0x21
   1f340:	ldr	r0, [r9]
   1f344:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1f348:	cmp	r0, #0
   1f34c:	beq	1fe84 <_start@@Base+0xaca8>
   1f350:	ldr	r3, [sp, #116]	; 0x74
   1f354:	str	r3, [r0]
   1f358:	b	1c034 <_start@@Base+0x6e58>
   1f35c:	mov	r1, fp
   1f360:	mov	r3, #5
   1f364:	mov	r2, sl
   1f368:	mov	r0, r9
   1f36c:	bl	18f38 <_start@@Base+0x3d5c>
   1f370:	cmp	fp, r0
   1f374:	mov	r1, r0
   1f378:	beq	1cce8 <_start@@Base+0x7b0c>
   1f37c:	add	r3, sp, #116	; 0x74
   1f380:	mov	r2, sl
   1f384:	mov	r0, r9
   1f388:	bl	1b6f4 <_start@@Base+0x6518>
   1f38c:	ldr	r3, [sp, #116]	; 0x74
   1f390:	cmp	r3, #0
   1f394:	mov	fp, r0
   1f398:	beq	1fbf0 <_start@@Base+0xaa14>
   1f39c:	mov	r1, #34	; 0x22
   1f3a0:	ldr	r0, [r9]
   1f3a4:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1f3a8:	cmp	r0, #0
   1f3ac:	beq	1fbe0 <_start@@Base+0xaa04>
   1f3b0:	ldr	r3, [sp, #116]	; 0x74
   1f3b4:	str	r3, [r0]
   1f3b8:	b	1c034 <_start@@Base+0x6e58>
   1f3bc:	ldr	r3, [pc, #-588]	; 1f178 <_start@@Base+0x9f9c>
   1f3c0:	mov	r1, r0
   1f3c4:	add	r3, pc, r3
   1f3c8:	str	r4, [sp]
   1f3cc:	add	r3, r3, #368	; 0x170
   1f3d0:	mov	r2, sl
   1f3d4:	mov	r0, r9
   1f3d8:	bl	17d40 <_start@@Base+0x2b64>
   1f3dc:	cmp	sl, r0
   1f3e0:	cmpne	fp, r0
   1f3e4:	beq	1fccc <_start@@Base+0xaaf0>
   1f3e8:	mov	fp, r0
   1f3ec:	b	1e724 <_start@@Base+0x9548>
   1f3f0:	ldr	r3, [pc, #-636]	; 1f17c <_start@@Base+0x9fa0>
   1f3f4:	mov	r1, r0
   1f3f8:	add	r3, pc, r3
   1f3fc:	str	r4, [sp]
   1f400:	add	r3, r3, #168	; 0xa8
   1f404:	mov	r2, sl
   1f408:	mov	r0, r9
   1f40c:	bl	18734 <_start@@Base+0x3558>
   1f410:	cmp	sl, r0
   1f414:	cmpne	fp, r0
   1f418:	beq	1fce0 <_start@@Base+0xab04>
   1f41c:	mov	fp, r0
   1f420:	b	1d058 <_start@@Base+0x7e7c>
   1f424:	mov	r3, #8
   1f428:	mov	r2, sl
   1f42c:	mov	r1, fp
   1f430:	mov	r0, r9
   1f434:	bl	18f38 <_start@@Base+0x3d5c>
   1f438:	cmp	fp, r0
   1f43c:	mov	r4, r0
   1f440:	beq	1fc64 <_start@@Base+0xaa88>
   1f444:	mov	r0, #0
   1f448:	mov	r1, #0
   1f44c:	add	r5, sp, #144	; 0x90
   1f450:	mov	r2, sl
   1f454:	strd	r0, [r5, #-8]!
   1f458:	mov	r1, r4
   1f45c:	mov	r3, r5
   1f460:	mov	r0, r9
   1f464:	bl	178bc <_start@@Base+0x26e0>
   1f468:	cmp	r0, r4
   1f46c:	mov	fp, r0
   1f470:	beq	1fad0 <_start@@Base+0xa8f4>
   1f474:	ldrd	r2, [sp, #136]	; 0x88
   1f478:	orrs	r3, r2, r3
   1f47c:	bne	1f48c <_start@@Base+0xa2b0>
   1f480:	ldr	r3, [r9, #8]
   1f484:	tst	r3, #2
   1f488:	beq	1c034 <_start@@Base+0x6e58>
   1f48c:	mov	r3, #8
   1f490:	mov	r2, r3
   1f494:	mov	r1, #19
   1f498:	ldr	r0, [r9]
   1f49c:	bl	29488 <flatcc_builder_table_add@@Base>
   1f4a0:	cmp	r0, #0
   1f4a4:	beq	1fda8 <_start@@Base+0xabcc>
   1f4a8:	ldrd	r2, [sp, #136]	; 0x88
   1f4ac:	strd	r2, [r0]
   1f4b0:	b	1c034 <_start@@Base+0x6e58>
   1f4b4:	mov	r4, r0
   1f4b8:	mov	r1, r4
   1f4bc:	mov	r2, sl
   1f4c0:	mov	r0, r9
   1f4c4:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f4c8:	mov	fp, r0
   1f4cc:	b	1c034 <_start@@Base+0x6e58>
   1f4d0:	mov	sl, r9
   1f4d4:	mov	r9, r2
   1f4d8:	b	1bb50 <_start@@Base+0x6974>
   1f4dc:	ldr	r0, [r9]
   1f4e0:	bl	288ac <flatcc_builder_end_offset_vector@@Base>
   1f4e4:	cmp	r0, #0
   1f4e8:	str	r0, [sp, #116]	; 0x74
   1f4ec:	beq	1fd38 <_start@@Base+0xab5c>
   1f4f0:	mov	r1, #10
   1f4f4:	ldr	r0, [r9]
   1f4f8:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1f4fc:	cmp	r0, #0
   1f500:	beq	1fd28 <_start@@Base+0xab4c>
   1f504:	ldr	r3, [sp, #116]	; 0x74
   1f508:	str	r3, [r0]
   1f50c:	b	1c034 <_start@@Base+0x6e58>
   1f510:	mov	r3, #8
   1f514:	mov	r2, sl
   1f518:	mov	r1, fp
   1f51c:	mov	r0, r9
   1f520:	bl	18f38 <_start@@Base+0x3d5c>
   1f524:	cmp	fp, r0
   1f528:	mov	r5, r0
   1f52c:	beq	1ea24 <_start@@Base+0x9848>
   1f530:	add	r4, sp, #144	; 0x90
   1f534:	mov	r3, #0
   1f538:	str	r3, [r4, #-8]!
   1f53c:	mov	r1, r0
   1f540:	mov	r2, sl
   1f544:	mov	r3, r4
   1f548:	mov	r0, r9
   1f54c:	bl	17950 <_start@@Base+0x2774>
   1f550:	cmp	r0, r5
   1f554:	mov	fp, r0
   1f558:	beq	1fb40 <_start@@Base+0xa964>
   1f55c:	ldr	r3, [sp, #136]	; 0x88
   1f560:	cmp	r3, #0
   1f564:	bne	1f574 <_start@@Base+0xa398>
   1f568:	ldr	r3, [r9, #8]
   1f56c:	tst	r3, #2
   1f570:	beq	1c034 <_start@@Base+0x6e58>
   1f574:	mov	r3, #4
   1f578:	mov	r2, r3
   1f57c:	mov	r1, #17
   1f580:	ldr	r0, [r9]
   1f584:	bl	29488 <flatcc_builder_table_add@@Base>
   1f588:	cmp	r0, #0
   1f58c:	beq	1fc00 <_start@@Base+0xaa24>
   1f590:	ldr	r3, [sp, #136]	; 0x88
   1f594:	str	r3, [r0]
   1f598:	b	1c034 <_start@@Base+0x6e58>
   1f59c:	mov	r1, fp
   1f5a0:	mov	r2, sl
   1f5a4:	mov	r0, r9
   1f5a8:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f5ac:	mov	fp, r0
   1f5b0:	b	1c034 <_start@@Base+0x6e58>
   1f5b4:	ldr	r3, [pc, #-1084]	; 1f180 <_start@@Base+0x9fa4>
   1f5b8:	mov	r1, r0
   1f5bc:	add	r3, pc, r3
   1f5c0:	str	r4, [sp]
   1f5c4:	add	r3, r3, #356	; 0x164
   1f5c8:	mov	r2, sl
   1f5cc:	mov	r0, r9
   1f5d0:	bl	17d40 <_start@@Base+0x2b64>
   1f5d4:	cmp	sl, r0
   1f5d8:	cmpne	fp, r0
   1f5dc:	beq	1fd04 <_start@@Base+0xab28>
   1f5e0:	mov	fp, r0
   1f5e4:	b	1d0e4 <_start@@Base+0x7f08>
   1f5e8:	mov	r3, #2
   1f5ec:	mov	r2, sl
   1f5f0:	mov	r1, r4
   1f5f4:	mov	r0, r9
   1f5f8:	bl	18f38 <_start@@Base+0x3d5c>
   1f5fc:	cmp	r4, r0
   1f600:	mov	fp, r0
   1f604:	beq	20004 <_start@@Base+0xae28>
   1f608:	ldr	r0, [r9]
   1f60c:	bl	27860 <flatcc_builder_start_offset_vector@@Base>
   1f610:	cmp	r0, #0
   1f614:	bne	1fff4 <_start@@Base+0xae18>
   1f618:	ldr	r6, [sp, #72]	; 0x48
   1f61c:	mov	r1, fp
   1f620:	mov	r3, r6
   1f624:	mov	r2, sl
   1f628:	mov	r0, r9
   1f62c:	bl	18e84 <_start@@Base+0x3ca8>
   1f630:	ldr	r3, [sp, #112]	; 0x70
   1f634:	cmp	r3, #0
   1f638:	mov	fp, r0
   1f63c:	beq	1f6c0 <_start@@Base+0xa4e4>
   1f640:	add	r4, sp, #116	; 0x74
   1f644:	mov	r5, #1
   1f648:	b	1f688 <_start@@Base+0xa4ac>
   1f64c:	ldr	r0, [r9]
   1f650:	bl	271f8 <flatcc_builder_extend_offset_vector@@Base>
   1f654:	mov	r3, r6
   1f658:	mov	r2, sl
   1f65c:	mov	r1, fp
   1f660:	subs	ip, r0, #0
   1f664:	mov	r0, r9
   1f668:	beq	1f6f4 <_start@@Base+0xa518>
   1f66c:	ldr	lr, [sp, #116]	; 0x74
   1f670:	str	lr, [ip]
   1f674:	bl	19a10 <_start@@Base+0x4834>
   1f678:	ldr	r3, [sp, #112]	; 0x70
   1f67c:	cmp	r3, #0
   1f680:	mov	fp, r0
   1f684:	beq	1f6c0 <_start@@Base+0xa4e4>
   1f688:	mov	r1, fp
   1f68c:	mov	r3, r4
   1f690:	mov	r2, sl
   1f694:	mov	r0, r9
   1f698:	bl	2f254 <flatcc_json_parser_build_string@@Base>
   1f69c:	ldr	r3, [sp, #116]	; 0x74
   1f6a0:	mov	r1, r5
   1f6a4:	cmp	r3, #0
   1f6a8:	mov	fp, r0
   1f6ac:	bne	1f64c <_start@@Base+0xa470>
   1f6b0:	mov	r3, sl
   1f6b4:	mov	sl, r9
   1f6b8:	mov	r9, r3
   1f6bc:	b	1bb50 <_start@@Base+0x6974>
   1f6c0:	ldr	r0, [r9]
   1f6c4:	bl	288ac <flatcc_builder_end_offset_vector@@Base>
   1f6c8:	cmp	r0, #0
   1f6cc:	str	r0, [sp, #116]	; 0x74
   1f6d0:	beq	1fd98 <_start@@Base+0xabbc>
   1f6d4:	mov	r1, #28
   1f6d8:	ldr	r0, [r9]
   1f6dc:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   1f6e0:	cmp	r0, #0
   1f6e4:	beq	1fd88 <_start@@Base+0xabac>
   1f6e8:	ldr	r3, [sp, #116]	; 0x74
   1f6ec:	str	r3, [r0]
   1f6f0:	b	1c034 <_start@@Base+0x6e58>
   1f6f4:	mov	sl, r9
   1f6f8:	mov	r9, r2
   1f6fc:	b	1bb50 <_start@@Base+0x6974>
   1f700:	mov	r3, sl
   1f704:	mov	sl, r9
   1f708:	mov	r9, r3
   1f70c:	b	1bb50 <_start@@Base+0x6974>
   1f710:	mov	r1, fp
   1f714:	mov	r2, sl
   1f718:	mov	r0, r9
   1f71c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f720:	mov	fp, r0
   1f724:	b	1c034 <_start@@Base+0x6e58>
   1f728:	mov	r2, #1
   1f72c:	mov	r1, r2
   1f730:	mvn	r3, #0
   1f734:	ldr	r0, [r9]
   1f738:	bl	277e8 <flatcc_builder_start_vector@@Base>
   1f73c:	subs	r6, r0, #0
   1f740:	bne	1ffdc <_start@@Base+0xae00>
   1f744:	mov	r1, fp
   1f748:	ldr	r3, [sp, #72]	; 0x48
   1f74c:	mov	r2, sl
   1f750:	mov	r0, r9
   1f754:	bl	18e84 <_start@@Base+0x3ca8>
   1f758:	ldr	r3, [sp, #112]	; 0x70
   1f75c:	cmp	r3, #0
   1f760:	mov	fp, r0
   1f764:	beq	1f97c <_start@@Base+0xa7a0>
   1f768:	ldr	r8, [pc, #-1516]	; 1f184 <_start@@Base+0x9fa8>
   1f76c:	mov	r7, #1
   1f770:	add	r8, pc, r8
   1f774:	add	r8, r8, #488	; 0x1e8
   1f778:	add	r5, sp, #136	; 0x88
   1f77c:	b	1f7ac <_start@@Base+0xa5d0>
   1f780:	ldrb	r2, [sp, #136]	; 0x88
   1f784:	mov	r1, r0
   1f788:	ldr	r3, [sp, #72]	; 0x48
   1f78c:	strb	r2, [r4]
   1f790:	mov	r0, r9
   1f794:	mov	r2, sl
   1f798:	bl	19a10 <_start@@Base+0x4834>
   1f79c:	ldr	r3, [sp, #112]	; 0x70
   1f7a0:	cmp	r3, #0
   1f7a4:	mov	fp, r0
   1f7a8:	beq	1f97c <_start@@Base+0xa7a0>
   1f7ac:	mov	r1, r7
   1f7b0:	ldr	r0, [r9]
   1f7b4:	strb	r6, [sp, #136]	; 0x88
   1f7b8:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   1f7bc:	mov	r1, fp
   1f7c0:	mov	r3, r5
   1f7c4:	mov	r2, sl
   1f7c8:	subs	r4, r0, #0
   1f7cc:	mov	r0, r9
   1f7d0:	beq	1f970 <_start@@Base+0xa794>
   1f7d4:	bl	17a0c <_start@@Base+0x2830>
   1f7d8:	cmp	r0, fp
   1f7dc:	bne	1f780 <_start@@Base+0xa5a4>
   1f7e0:	str	r5, [sp]
   1f7e4:	mov	r3, r8
   1f7e8:	mov	r2, sl
   1f7ec:	mov	r1, fp
   1f7f0:	mov	r0, r9
   1f7f4:	bl	183a4 <_start@@Base+0x31c8>
   1f7f8:	cmp	sl, r0
   1f7fc:	cmpne	r0, fp
   1f800:	bne	1f780 <_start@@Base+0xa5a4>
   1f804:	mov	r3, sl
   1f808:	mov	fp, r0
   1f80c:	mov	sl, r9
   1f810:	mov	r9, r3
   1f814:	b	1bb50 <_start@@Base+0x6974>
   1f818:	mov	r4, r0
   1f81c:	mov	r1, r4
   1f820:	mov	r2, sl
   1f824:	mov	r0, r9
   1f828:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f82c:	mov	fp, r0
   1f830:	b	1c034 <_start@@Base+0x6e58>
   1f834:	mov	r3, sl
   1f838:	mov	fp, r4
   1f83c:	mov	sl, r9
   1f840:	mov	r9, r3
   1f844:	b	1bb50 <_start@@Base+0x6974>
   1f848:	mov	r4, r0
   1f84c:	mov	r1, r4
   1f850:	mov	r2, sl
   1f854:	mov	r0, r9
   1f858:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f85c:	mov	fp, r0
   1f860:	b	1c034 <_start@@Base+0x6e58>
   1f864:	mov	r3, sl
   1f868:	mov	fp, r4
   1f86c:	mov	sl, r9
   1f870:	mov	r9, r3
   1f874:	b	1bb50 <_start@@Base+0x6974>
   1f878:	mov	r3, sl
   1f87c:	mov	sl, r9
   1f880:	mov	r9, r3
   1f884:	b	1bb50 <_start@@Base+0x6974>
   1f888:	mov	r3, sl
   1f88c:	mov	sl, r9
   1f890:	mov	r9, r3
   1f894:	b	1bb50 <_start@@Base+0x6974>
   1f898:	mov	r3, sl
   1f89c:	mov	sl, r9
   1f8a0:	mov	r9, r3
   1f8a4:	b	1bb50 <_start@@Base+0x6974>
   1f8a8:	mov	r3, sl
   1f8ac:	mov	sl, r9
   1f8b0:	mov	r9, r3
   1f8b4:	b	1bb50 <_start@@Base+0x6974>
   1f8b8:	mov	r3, sl
   1f8bc:	mov	sl, r9
   1f8c0:	mov	r9, r3
   1f8c4:	b	1bb50 <_start@@Base+0x6974>
   1f8c8:	ldr	r3, [pc, #-1864]	; 1f188 <_start@@Base+0x9fac>
   1f8cc:	mov	r1, r0
   1f8d0:	add	r3, pc, r3
   1f8d4:	str	r4, [sp]
   1f8d8:	add	r3, r3, #192	; 0xc0
   1f8dc:	mov	r2, sl
   1f8e0:	mov	r0, r9
   1f8e4:	bl	18734 <_start@@Base+0x3558>
   1f8e8:	cmp	sl, r0
   1f8ec:	cmpne	fp, r0
   1f8f0:	beq	1ffb8 <_start@@Base+0xaddc>
   1f8f4:	mov	fp, r0
   1f8f8:	b	1e8e4 <_start@@Base+0x9708>
   1f8fc:	mov	r3, sl
   1f900:	mov	fp, r4
   1f904:	mov	sl, r9
   1f908:	mov	r9, r3
   1f90c:	b	1bb50 <_start@@Base+0x6974>
   1f910:	mov	r4, r0
   1f914:	mov	r1, r4
   1f918:	mov	r2, sl
   1f91c:	mov	r0, r9
   1f920:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f924:	mov	fp, r0
   1f928:	b	1c034 <_start@@Base+0x6e58>
   1f92c:	ldr	r3, [pc, #-1960]	; 1f18c <_start@@Base+0x9fb0>
   1f930:	mov	r1, r0
   1f934:	add	r3, pc, r3
   1f938:	str	r5, [sp]
   1f93c:	add	r3, r3, #392	; 0x188
   1f940:	mov	r2, sl
   1f944:	mov	r0, r9
   1f948:	bl	18560 <_start@@Base+0x3384>
   1f94c:	cmp	sl, r0
   1f950:	cmpne	fp, r0
   1f954:	beq	1fea4 <_start@@Base+0xacc8>
   1f958:	mov	fp, r0
   1f95c:	b	1eb48 <_start@@Base+0x996c>
   1f960:	mov	r3, sl
   1f964:	mov	sl, r9
   1f968:	mov	r9, r3
   1f96c:	b	1bb50 <_start@@Base+0x6974>
   1f970:	mov	sl, r9
   1f974:	mov	r9, r2
   1f978:	b	1bb50 <_start@@Base+0x6974>
   1f97c:	ldr	r0, [r9]
   1f980:	bl	28784 <flatcc_builder_end_vector@@Base>
   1f984:	str	r0, [sp, #116]	; 0x74
   1f988:	b	1f220 <_start@@Base+0xa044>
   1f98c:	mov	r1, fp
   1f990:	mov	r2, sl
   1f994:	mov	r0, r9
   1f998:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f99c:	mov	fp, r0
   1f9a0:	b	1c034 <_start@@Base+0x6e58>
   1f9a4:	mov	r3, sl
   1f9a8:	mov	fp, r4
   1f9ac:	mov	sl, r9
   1f9b0:	mov	r9, r3
   1f9b4:	b	1bb50 <_start@@Base+0x6974>
   1f9b8:	ldr	r3, [pc, #-2096]	; 1f190 <_start@@Base+0x9fb4>
   1f9bc:	mov	r1, r0
   1f9c0:	add	r3, pc, r3
   1f9c4:	str	r4, [sp]
   1f9c8:	add	r3, r3, #416	; 0x1a0
   1f9cc:	mov	r2, sl
   1f9d0:	mov	r0, r9
   1f9d4:	bl	18ca0 <_start@@Base+0x3ac4>
   1f9d8:	cmp	sl, r0
   1f9dc:	cmpne	fp, r0
   1f9e0:	beq	1fecc <_start@@Base+0xacf0>
   1f9e4:	mov	fp, r0
   1f9e8:	b	1f2b0 <_start@@Base+0xa0d4>
   1f9ec:	mov	r3, sl
   1f9f0:	mov	sl, r9
   1f9f4:	mov	r9, r3
   1f9f8:	b	1bb50 <_start@@Base+0x6974>
   1f9fc:	mov	r4, fp
   1fa00:	mov	r1, r4
   1fa04:	mov	r2, sl
   1fa08:	mov	r0, r9
   1fa0c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa10:	mov	fp, r0
   1fa14:	b	1c034 <_start@@Base+0x6e58>
   1fa18:	mov	r3, sl
   1fa1c:	mov	sl, r9
   1fa20:	mov	r9, r3
   1fa24:	b	1bb50 <_start@@Base+0x6974>
   1fa28:	mov	r3, sl
   1fa2c:	mov	sl, r9
   1fa30:	mov	r9, r3
   1fa34:	b	1bb50 <_start@@Base+0x6974>
   1fa38:	mov	r3, sl
   1fa3c:	mov	sl, r9
   1fa40:	mov	r9, r3
   1fa44:	b	1bb50 <_start@@Base+0x6974>
   1fa48:	mov	r3, sl
   1fa4c:	mov	sl, r9
   1fa50:	mov	r9, r3
   1fa54:	b	1bb50 <_start@@Base+0x6974>
   1fa58:	mov	r3, sl
   1fa5c:	mov	sl, r9
   1fa60:	mov	r9, r3
   1fa64:	b	1bb50 <_start@@Base+0x6974>
   1fa68:	mov	r3, sl
   1fa6c:	mov	sl, r9
   1fa70:	mov	r9, r3
   1fa74:	b	1bb50 <_start@@Base+0x6974>
   1fa78:	mov	r3, sl
   1fa7c:	mov	sl, r9
   1fa80:	mov	r9, r3
   1fa84:	b	1bb50 <_start@@Base+0x6974>
   1fa88:	mov	r1, fp
   1fa8c:	mov	r2, sl
   1fa90:	mov	r0, r9
   1fa94:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa98:	mov	fp, r0
   1fa9c:	b	1c034 <_start@@Base+0x6e58>
   1faa0:	mov	r3, sl
   1faa4:	mov	sl, r9
   1faa8:	mov	r9, r3
   1faac:	b	1bb50 <_start@@Base+0x6974>
   1fab0:	mov	r3, sl
   1fab4:	mov	sl, r9
   1fab8:	mov	r9, r3
   1fabc:	b	1bb50 <_start@@Base+0x6974>
   1fac0:	mov	r3, sl
   1fac4:	mov	sl, r9
   1fac8:	mov	r9, r3
   1facc:	b	1bb50 <_start@@Base+0x6974>
   1fad0:	ldr	r3, [pc, #-2372]	; 1f194 <_start@@Base+0x9fb8>
   1fad4:	str	r5, [sp]
   1fad8:	add	r3, pc, r3
   1fadc:	add	r3, r3, #464	; 0x1d0
   1fae0:	mov	r2, sl
   1fae4:	mov	r1, r4
   1fae8:	mov	r0, r9
   1faec:	bl	14620 <__assert_fail@plt+0x10>
   1faf0:	cmp	sl, r0
   1faf4:	cmpne	r4, r0
   1faf8:	beq	1feb8 <_start@@Base+0xacdc>
   1fafc:	mov	fp, r0
   1fb00:	b	1f474 <_start@@Base+0xa298>
   1fb04:	mov	r3, sl
   1fb08:	mov	sl, r9
   1fb0c:	mov	r9, r3
   1fb10:	b	1bb50 <_start@@Base+0x6974>
   1fb14:	mov	r4, fp
   1fb18:	mov	r1, r4
   1fb1c:	mov	r2, sl
   1fb20:	mov	r0, r9
   1fb24:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1fb28:	mov	fp, r0
   1fb2c:	b	1c034 <_start@@Base+0x6e58>
   1fb30:	mov	r3, sl
   1fb34:	mov	sl, r9
   1fb38:	mov	r9, r3
   1fb3c:	b	1bb50 <_start@@Base+0x6974>
   1fb40:	ldr	r3, [pc, #-2480]	; 1f198 <_start@@Base+0x9fbc>
   1fb44:	mov	r1, r0
   1fb48:	add	r3, pc, r3
   1fb4c:	str	r4, [sp]
   1fb50:	add	r3, r3, #440	; 0x1b8
   1fb54:	mov	r2, sl
   1fb58:	mov	r0, r9
   1fb5c:	bl	18ae4 <_start@@Base+0x3908>
   1fb60:	cmp	sl, r0
   1fb64:	cmpne	fp, r0
   1fb68:	beq	1fc3c <_start@@Base+0xaa60>
   1fb6c:	mov	fp, r0
   1fb70:	b	1f55c <_start@@Base+0xa380>
   1fb74:	mov	r3, sl
   1fb78:	mov	sl, r9
   1fb7c:	mov	r9, r3
   1fb80:	b	1bb50 <_start@@Base+0x6974>
   1fb84:	mov	r3, sl
   1fb88:	mov	sl, r9
   1fb8c:	mov	r9, r3
   1fb90:	b	1bb50 <_start@@Base+0x6974>
   1fb94:	mov	r3, sl
   1fb98:	mov	sl, r9
   1fb9c:	mov	r9, r3
   1fba0:	b	1bb50 <_start@@Base+0x6974>
   1fba4:	mov	r3, sl
   1fba8:	mov	sl, r9
   1fbac:	mov	r9, r3
   1fbb0:	b	1bb50 <_start@@Base+0x6974>
   1fbb4:	mov	r3, sl
   1fbb8:	mov	sl, r9
   1fbbc:	mov	r9, r3
   1fbc0:	b	1bb50 <_start@@Base+0x6974>
   1fbc4:	mov	r4, fp
   1fbc8:	mov	r1, r4
   1fbcc:	mov	r2, sl
   1fbd0:	mov	r0, r9
   1fbd4:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   1fbd8:	mov	fp, r0
   1fbdc:	b	1c034 <_start@@Base+0x6e58>
   1fbe0:	mov	r3, sl
   1fbe4:	mov	sl, r9
   1fbe8:	mov	r9, r3
   1fbec:	b	1bb50 <_start@@Base+0x6974>
   1fbf0:	mov	r3, sl
   1fbf4:	mov	sl, r9
   1fbf8:	mov	r9, r3
   1fbfc:	b	1bb50 <_start@@Base+0x6974>
   1fc00:	mov	r3, sl
   1fc04:	mov	sl, r9
   1fc08:	mov	r9, r3
   1fc0c:	b	1bb50 <_start@@Base+0x6974>
   1fc10:	mov	r1, r0
   1fc14:	str	r5, [sp]
   1fc18:	ldr	r3, [sp, #80]	; 0x50
   1fc1c:	mov	r2, sl
   1fc20:	mov	r0, r9
   1fc24:	bl	14620 <__assert_fail@plt+0x10>
   1fc28:	cmp	sl, r0
   1fc2c:	cmpne	fp, r0
   1fc30:	beq	1fc50 <_start@@Base+0xaa74>
   1fc34:	mov	fp, r0
   1fc38:	b	1c75c <_start@@Base+0x7580>
   1fc3c:	mov	r3, sl
   1fc40:	mov	fp, r0
   1fc44:	mov	sl, r9
   1fc48:	mov	r9, r3
   1fc4c:	b	1bb50 <_start@@Base+0x6974>
   1fc50:	mov	r3, sl
   1fc54:	mov	fp, r0
   1fc58:	mov	sl, r9
   1fc5c:	mov	r9, r3
   1fc60:	b	1bb50 <_start@@Base+0x6974>
   1fc64:	mov	fp, r0
   1fc68:	b	1c6dc <_start@@Base+0x7500>
   1fc6c:	mov	r1, r0
   1fc70:	str	r5, [sp]
   1fc74:	ldr	r3, [sp, #84]	; 0x54
   1fc78:	mov	r2, sl
   1fc7c:	mov	r0, r9
   1fc80:	bl	18ae4 <_start@@Base+0x3908>
   1fc84:	cmp	sl, r0
   1fc88:	cmpne	fp, r0
   1fc8c:	beq	1fcb8 <_start@@Base+0xaadc>
   1fc90:	mov	fp, r0
   1fc94:	b	1eaa0 <_start@@Base+0x98c4>
   1fc98:	mov	r3, sl
   1fc9c:	mov	sl, r9
   1fca0:	mov	r9, r3
   1fca4:	b	1bb50 <_start@@Base+0x6974>
   1fca8:	mov	r3, sl
   1fcac:	mov	sl, r9
   1fcb0:	mov	r9, r3
   1fcb4:	b	1bb50 <_start@@Base+0x6974>
   1fcb8:	mov	r3, sl
   1fcbc:	mov	fp, r0
   1fcc0:	mov	sl, r9
   1fcc4:	mov	r9, r3
   1fcc8:	b	1bb50 <_start@@Base+0x6974>
   1fccc:	mov	r3, sl
   1fcd0:	mov	fp, r0
   1fcd4:	mov	sl, r9
   1fcd8:	mov	r9, r3
   1fcdc:	b	1bb50 <_start@@Base+0x6974>
   1fce0:	mov	r3, sl
   1fce4:	mov	fp, r0
   1fce8:	mov	sl, r9
   1fcec:	mov	r9, r3
   1fcf0:	b	1bb50 <_start@@Base+0x6974>
   1fcf4:	mov	r3, sl
   1fcf8:	mov	sl, r9
   1fcfc:	mov	r9, r3
   1fd00:	b	1bb50 <_start@@Base+0x6974>
   1fd04:	mov	r3, sl
   1fd08:	mov	fp, r0
   1fd0c:	mov	sl, r9
   1fd10:	mov	r9, r3
   1fd14:	b	1bb50 <_start@@Base+0x6974>
   1fd18:	mov	r4, r0
   1fd1c:	b	1ce50 <_start@@Base+0x7c74>
   1fd20:	mov	r4, r0
   1fd24:	b	1c61c <_start@@Base+0x7440>
   1fd28:	mov	r3, sl
   1fd2c:	mov	sl, r9
   1fd30:	mov	r9, r3
   1fd34:	b	1bb50 <_start@@Base+0x6974>
   1fd38:	mov	r3, sl
   1fd3c:	mov	sl, r9
   1fd40:	mov	r9, r3
   1fd44:	b	1bb50 <_start@@Base+0x6974>
   1fd48:	mov	r3, sl
   1fd4c:	mov	sl, r9
   1fd50:	mov	r9, r3
   1fd54:	b	1bb50 <_start@@Base+0x6974>
   1fd58:	mov	r3, sl
   1fd5c:	mov	sl, r9
   1fd60:	mov	r9, r3
   1fd64:	b	1bb50 <_start@@Base+0x6974>
   1fd68:	mov	r3, sl
   1fd6c:	mov	sl, r9
   1fd70:	mov	r9, r3
   1fd74:	b	1bb50 <_start@@Base+0x6974>
   1fd78:	mov	r3, sl
   1fd7c:	mov	sl, r9
   1fd80:	mov	r9, r3
   1fd84:	b	1bb50 <_start@@Base+0x6974>
   1fd88:	mov	r3, sl
   1fd8c:	mov	sl, r9
   1fd90:	mov	r9, r3
   1fd94:	b	1bb50 <_start@@Base+0x6974>
   1fd98:	mov	r3, sl
   1fd9c:	mov	sl, r9
   1fda0:	mov	r9, r3
   1fda4:	b	1bb50 <_start@@Base+0x6974>
   1fda8:	mov	r3, sl
   1fdac:	mov	sl, r9
   1fdb0:	mov	r9, r3
   1fdb4:	b	1bb50 <_start@@Base+0x6974>
   1fdb8:	mov	r3, sl
   1fdbc:	mov	sl, r9
   1fdc0:	mov	r9, r3
   1fdc4:	b	1bb50 <_start@@Base+0x6974>
   1fdc8:	mov	r3, sl
   1fdcc:	mov	fp, r0
   1fdd0:	mov	sl, r9
   1fdd4:	mov	r9, r3
   1fdd8:	b	1bb50 <_start@@Base+0x6974>
   1fddc:	mov	r3, sl
   1fde0:	mov	sl, r9
   1fde4:	mov	r9, r3
   1fde8:	b	1bb50 <_start@@Base+0x6974>
   1fdec:	mov	r3, sl
   1fdf0:	mov	sl, r9
   1fdf4:	mov	r9, r3
   1fdf8:	b	1bb50 <_start@@Base+0x6974>
   1fdfc:	mov	r3, sl
   1fe00:	mov	sl, r9
   1fe04:	mov	r9, r3
   1fe08:	b	1bb50 <_start@@Base+0x6974>
   1fe0c:	mov	r3, sl
   1fe10:	mov	sl, r9
   1fe14:	mov	r9, r3
   1fe18:	b	1bb50 <_start@@Base+0x6974>
   1fe1c:	mov	r3, sl
   1fe20:	mov	sl, r9
   1fe24:	mov	r9, r3
   1fe28:	b	1bb50 <_start@@Base+0x6974>
   1fe2c:	mov	r4, r0
   1fe30:	b	1ce14 <_start@@Base+0x7c38>
   1fe34:	mov	r3, sl
   1fe38:	mov	sl, r9
   1fe3c:	mov	r9, r3
   1fe40:	b	1bb50 <_start@@Base+0x6974>
   1fe44:	mov	r3, sl
   1fe48:	mov	sl, r9
   1fe4c:	mov	r9, r3
   1fe50:	b	1bb50 <_start@@Base+0x6974>
   1fe54:	mov	r3, sl
   1fe58:	mov	sl, r9
   1fe5c:	mov	r9, r3
   1fe60:	b	1bb50 <_start@@Base+0x6974>
   1fe64:	mov	r3, sl
   1fe68:	mov	sl, r9
   1fe6c:	mov	r9, r3
   1fe70:	b	1bb50 <_start@@Base+0x6974>
   1fe74:	mov	r3, sl
   1fe78:	mov	sl, r9
   1fe7c:	mov	r9, r3
   1fe80:	b	1bb50 <_start@@Base+0x6974>
   1fe84:	mov	r3, sl
   1fe88:	mov	sl, r9
   1fe8c:	mov	r9, r3
   1fe90:	b	1bb50 <_start@@Base+0x6974>
   1fe94:	mov	r3, sl
   1fe98:	mov	sl, r9
   1fe9c:	mov	r9, r3
   1fea0:	b	1bb50 <_start@@Base+0x6974>
   1fea4:	mov	r3, sl
   1fea8:	mov	fp, r0
   1feac:	mov	sl, r9
   1feb0:	mov	r9, r3
   1feb4:	b	1bb50 <_start@@Base+0x6974>
   1feb8:	mov	r3, sl
   1febc:	mov	fp, r0
   1fec0:	mov	sl, r9
   1fec4:	mov	r9, r3
   1fec8:	b	1bb50 <_start@@Base+0x6974>
   1fecc:	mov	r3, sl
   1fed0:	mov	fp, r0
   1fed4:	mov	sl, r9
   1fed8:	mov	r9, r3
   1fedc:	b	1bb50 <_start@@Base+0x6974>
   1fee0:	mov	r1, r0
   1fee4:	str	r5, [sp]
   1fee8:	ldr	r3, [sp, #88]	; 0x58
   1feec:	mov	r2, sl
   1fef0:	mov	r0, r9
   1fef4:	bl	18ca0 <_start@@Base+0x3ac4>
   1fef8:	cmp	sl, r0
   1fefc:	cmpne	fp, r0
   1ff00:	beq	1ff2c <_start@@Base+0xad50>
   1ff04:	mov	fp, r0
   1ff08:	b	1cc74 <_start@@Base+0x7a98>
   1ff0c:	mov	r3, sl
   1ff10:	mov	sl, r9
   1ff14:	mov	r9, r3
   1ff18:	b	1bb50 <_start@@Base+0x6974>
   1ff1c:	mov	r3, sl
   1ff20:	mov	sl, r9
   1ff24:	mov	r9, r3
   1ff28:	b	1bb50 <_start@@Base+0x6974>
   1ff2c:	mov	r3, sl
   1ff30:	mov	fp, r0
   1ff34:	mov	sl, r9
   1ff38:	mov	r9, r3
   1ff3c:	b	1bb50 <_start@@Base+0x6974>
   1ff40:	ldr	r3, [pc, #-3500]	; 1f19c <_start@@Base+0x9fc0>
   1ff44:	mov	r1, r0
   1ff48:	add	r3, pc, r3
   1ff4c:	str	r5, [sp]
   1ff50:	add	r3, r3, #404	; 0x194
   1ff54:	mov	r2, sl
   1ff58:	mov	r0, r9
   1ff5c:	bl	18560 <_start@@Base+0x3384>
   1ff60:	cmp	sl, r0
   1ff64:	cmpne	fp, r0
   1ff68:	beq	1ff94 <_start@@Base+0xadb8>
   1ff6c:	mov	fp, r0
   1ff70:	b	1cdc8 <_start@@Base+0x7bec>
   1ff74:	mov	r3, sl
   1ff78:	mov	sl, r9
   1ff7c:	mov	r9, r3
   1ff80:	b	1bb50 <_start@@Base+0x6974>
   1ff84:	mov	r3, sl
   1ff88:	mov	sl, r9
   1ff8c:	mov	r9, r3
   1ff90:	b	1bb50 <_start@@Base+0x6974>
   1ff94:	mov	r3, sl
   1ff98:	mov	fp, r0
   1ff9c:	mov	sl, r9
   1ffa0:	mov	r9, r3
   1ffa4:	b	1bb50 <_start@@Base+0x6974>
   1ffa8:	mov	r3, sl
   1ffac:	mov	sl, r9
   1ffb0:	mov	r9, r3
   1ffb4:	b	1bb50 <_start@@Base+0x6974>
   1ffb8:	mov	r3, sl
   1ffbc:	mov	fp, r0
   1ffc0:	mov	sl, r9
   1ffc4:	mov	r9, r3
   1ffc8:	b	1bb50 <_start@@Base+0x6974>
   1ffcc:	mov	r3, sl
   1ffd0:	mov	sl, r9
   1ffd4:	mov	r9, r3
   1ffd8:	b	1bb50 <_start@@Base+0x6974>
   1ffdc:	mov	r3, sl
   1ffe0:	mov	sl, r9
   1ffe4:	mov	r9, r3
   1ffe8:	b	1bb50 <_start@@Base+0x6974>
   1ffec:	mov	r4, r0
   1fff0:	b	1c9d0 <_start@@Base+0x77f4>
   1fff4:	mov	r3, sl
   1fff8:	mov	sl, r9
   1fffc:	mov	r9, r3
   20000:	b	1bb50 <_start@@Base+0x6974>
   20004:	mov	r4, r0
   20008:	b	1ea00 <_start@@Base+0x9824>
   2000c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20010:	mov	r5, r2
   20014:	sub	r2, r2, r1
   20018:	cmp	r2, #8
   2001c:	sub	sp, sp, #8
   20020:	mov	r4, r1
   20024:	mov	r8, r0
   20028:	mov	r9, r3
   2002c:	bls	200f8 <_start@@Base+0xaf1c>
   20030:	ldrb	r6, [r4, #7]
   20034:	mov	r7, #0
   20038:	ldrb	r2, [r4, #6]
   2003c:	lsr	r1, r2, #24
   20040:	lsl	r0, r2, #8
   20044:	orr	r6, r6, r0
   20048:	orr	r7, r7, r1
   2004c:	ldrb	r2, [r4, #5]
   20050:	lsr	r1, r2, #16
   20054:	lsl	r0, r2, #16
   20058:	orr	r0, r0, r6
   2005c:	orr	r1, r1, r7
   20060:	ldrb	r2, [r4, #4]
   20064:	lsr	r7, r2, #8
   20068:	lsl	r6, r2, #24
   2006c:	orr	r6, r6, r0
   20070:	orr	r7, r7, r1
   20074:	ldrb	r1, [r4, #3]
   20078:	mov	r0, #0
   2007c:	orr	r6, r6, r0
   20080:	orr	r7, r7, r1
   20084:	ldrb	r2, [r4, #2]
   20088:	mov	r0, #0
   2008c:	orr	r6, r6, r0
   20090:	lsl	r1, r2, #8
   20094:	orr	r7, r7, r1
   20098:	ldrb	r2, [r4, #1]
   2009c:	mov	r0, #0
   200a0:	orr	r0, r0, r6
   200a4:	lsl	r1, r2, #16
   200a8:	orr	r1, r1, r7
   200ac:	ldrb	r2, [r4]
   200b0:	mov	r6, #0
   200b4:	orr	r0, r0, r6
   200b8:	lsl	r7, r2, #24
   200bc:	add	r3, pc, #380	; 0x17c
   200c0:	ldrd	r2, [r3]
   200c4:	orr	r1, r1, r7
   200c8:	cmp	r1, r3
   200cc:	cmpeq	r0, r2
   200d0:	beq	20128 <_start@@Base+0xaf4c>
   200d4:	add	r3, pc, #364	; 0x16c
   200d8:	ldrd	r2, [r3]
   200dc:	mov	r0, #0
   200e0:	cmp	r1, r3
   200e4:	cmpeq	r0, r2
   200e8:	beq	201a8 <_start@@Base+0xafcc>
   200ec:	mov	r0, r4
   200f0:	add	sp, sp, #8
   200f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   200f8:	sub	r2, r2, #1
   200fc:	cmp	r2, #7
   20100:	addls	pc, pc, r2, lsl #2
   20104:	b	200ec <_start@@Base+0xaf10>
   20108:	b	201e8 <_start@@Base+0xb00c>
   2010c:	b	201f4 <_start@@Base+0xb018>
   20110:	b	20200 <_start@@Base+0xb024>
   20114:	b	2020c <_start@@Base+0xb030>
   20118:	b	20218 <_start@@Base+0xb03c>
   2011c:	b	20224 <_start@@Base+0xb048>
   20120:	b	20230 <_start@@Base+0xb054>
   20124:	b	20030 <_start@@Base+0xae54>
   20128:	mov	r1, r5
   2012c:	add	r0, r4, #8
   20130:	bl	15308 <_start@@Base+0x12c>
   20134:	add	r3, pc, #276	; 0x114
   20138:	ldrd	r2, [r3]
   2013c:	cmp	r1, r3
   20140:	cmpeq	r0, r2
   20144:	bne	200ec <_start@@Base+0xaf10>
   20148:	add	sl, r4, #16
   2014c:	mov	r0, sl
   20150:	mov	r1, r5
   20154:	bl	15308 <_start@@Base+0x12c>
   20158:	mov	r0, #0
   2015c:	and	r1, r1, #-16777216	; 0xff000000
   20160:	cmp	r1, #1694498816	; 0x65000000
   20164:	cmpeq	r0, #0
   20168:	bne	200ec <_start@@Base+0xaf10>
   2016c:	ldr	r3, [sp, #44]	; 0x2c
   20170:	mov	r2, r5
   20174:	str	r3, [sp]
   20178:	mov	r0, r8
   2017c:	mov	r3, #1
   20180:	mov	r1, sl
   20184:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   20188:	cmp	sl, r0
   2018c:	beq	200ec <_start@@Base+0xaf10>
   20190:	ldr	r1, [sp, #40]	; 0x28
   20194:	mov	r2, #1
   20198:	mov	r3, #0
   2019c:	strd	r2, [r1]
   201a0:	str	r6, [r9]
   201a4:	b	200f0 <_start@@Base+0xaf14>
   201a8:	ldr	r3, [sp, #44]	; 0x2c
   201ac:	mov	r2, r5
   201b0:	str	r3, [sp]
   201b4:	mov	r0, r8
   201b8:	mov	r3, #4
   201bc:	mov	r1, r4
   201c0:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   201c4:	cmp	r4, r0
   201c8:	beq	200f0 <_start@@Base+0xaf14>
   201cc:	ldr	r1, [sp, #40]	; 0x28
   201d0:	mov	r2, #0
   201d4:	mov	r3, #0
   201d8:	strd	r2, [r1]
   201dc:	str	r6, [r9]
   201e0:	add	sp, sp, #8
   201e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   201e8:	mov	r0, #0
   201ec:	mov	r1, #0
   201f0:	b	200ac <_start@@Base+0xaed0>
   201f4:	mov	r6, #0
   201f8:	mov	r7, #0
   201fc:	b	20098 <_start@@Base+0xaebc>
   20200:	mov	r6, #0
   20204:	mov	r7, #0
   20208:	b	20084 <_start@@Base+0xaea8>
   2020c:	mov	r6, #0
   20210:	mov	r7, #0
   20214:	b	20074 <_start@@Base+0xae98>
   20218:	mov	r0, #0
   2021c:	mov	r1, #0
   20220:	b	20060 <_start@@Base+0xae84>
   20224:	mov	r6, #0
   20228:	mov	r7, #0
   2022c:	b	2004c <_start@@Base+0xae70>
   20230:	mov	r6, #0
   20234:	mov	r7, #0
   20238:	b	20038 <_start@@Base+0xae5c>
   2023c:	nop			; (mov r0, r0)
   20240:	rsbvc	r6, r5, #116, 28	; 0x740
   20244:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   20248:	andeq	r0, r0, r0
   2024c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   20250:	cmnvc	r0, #-1073741800	; 0xc0000018
   20254:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   20258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2025c:	sub	sp, sp, #700	; 0x2bc
   20260:	mov	fp, r0
   20264:	mov	r0, r3
   20268:	str	r3, [sp, #644]	; 0x284
   2026c:	mov	r3, #0
   20270:	str	r3, [r0]
   20274:	mov	r4, r1
   20278:	ldr	r0, [fp]
   2027c:	mov	r1, #4
   20280:	mov	sl, r2
   20284:	bl	27a48 <flatcc_builder_start_table@@Base>
   20288:	cmp	r0, #0
   2028c:	bne	2055c <_start@@Base+0xb380>
   20290:	add	r3, sp, #664	; 0x298
   20294:	str	r3, [sp]
   20298:	mov	r2, sl
   2029c:	mov	r3, #1
   202a0:	mov	r1, r4
   202a4:	mov	r0, fp
   202a8:	bl	2f3fc <flatcc_json_parser_prepare_unions@@Base>
   202ac:	cmp	sl, r0
   202b0:	beq	2055c <_start@@Base+0xb380>
   202b4:	mov	r1, r4
   202b8:	add	r3, sp, #656	; 0x290
   202bc:	mov	r2, sl
   202c0:	mov	r0, fp
   202c4:	bl	17c8c <_start@@Base+0x2ab0>
   202c8:	ldr	r3, [sp, #656]	; 0x290
   202cc:	mov	r4, r0
   202d0:	cmp	r3, #0
   202d4:	beq	20550 <_start@@Base+0xb374>
   202d8:	cmp	sl, r4
   202dc:	beq	218dc <_start@@Base+0xc700>
   202e0:	ldrb	r3, [r4]
   202e4:	cmp	r3, #34	; 0x22
   202e8:	bne	20578 <_start@@Base+0xb39c>
   202ec:	add	r4, r4, #1
   202f0:	sub	r5, sl, r4
   202f4:	cmp	r5, #8
   202f8:	bls	2059c <_start@@Base+0xb3c0>
   202fc:	ldrb	r6, [r4, #7]
   20300:	mov	r7, #0
   20304:	ldrb	r2, [r4, #6]
   20308:	lsl	r3, r2, #8
   2030c:	str	r3, [sp, #536]	; 0x218
   20310:	add	r3, sp, #536	; 0x218
   20314:	lsr	r1, r2, #24
   20318:	str	r1, [sp, #540]	; 0x21c
   2031c:	ldrd	r2, [r3]
   20320:	orr	r2, r2, r6
   20324:	orr	r3, r3, r7
   20328:	mov	r6, r2
   2032c:	mov	r7, r3
   20330:	ldrb	r2, [r4, #5]
   20334:	lsl	r3, r2, #16
   20338:	str	r3, [sp, #448]	; 0x1c0
   2033c:	add	r3, sp, #448	; 0x1c0
   20340:	lsr	r1, r2, #16
   20344:	str	r1, [sp, #452]	; 0x1c4
   20348:	ldrd	r2, [r3]
   2034c:	orr	r2, r2, r6
   20350:	orr	r3, r3, r7
   20354:	mov	r6, r2
   20358:	mov	r7, r3
   2035c:	ldrb	r2, [r4, #4]
   20360:	lsl	r3, r2, #24
   20364:	str	r3, [sp, #376]	; 0x178
   20368:	add	r3, sp, #376	; 0x178
   2036c:	lsr	r1, r2, #8
   20370:	str	r1, [sp, #380]	; 0x17c
   20374:	ldrd	r2, [r3]
   20378:	orr	r2, r2, r6
   2037c:	orr	r3, r3, r7
   20380:	mov	r6, r2
   20384:	mov	r7, r3
   20388:	ldrb	r3, [r4, #3]
   2038c:	str	r3, [sp, #404]	; 0x194
   20390:	mov	r3, #0
   20394:	str	r3, [sp, #400]	; 0x190
   20398:	add	r3, sp, #400	; 0x190
   2039c:	ldrd	r2, [r3]
   203a0:	orr	r2, r2, r6
   203a4:	orr	r3, r3, r7
   203a8:	mov	r6, r2
   203ac:	mov	r7, r3
   203b0:	ldrb	r2, [r4, #2]
   203b4:	lsl	r3, r2, #8
   203b8:	str	r3, [sp, #372]	; 0x174
   203bc:	mov	r3, #0
   203c0:	str	r3, [sp, #368]	; 0x170
   203c4:	add	r3, sp, #368	; 0x170
   203c8:	ldrd	r2, [r3]
   203cc:	orr	r2, r2, r6
   203d0:	orr	r3, r3, r7
   203d4:	mov	r6, r2
   203d8:	mov	r7, r3
   203dc:	ldrb	r2, [r4, #1]
   203e0:	lsl	r3, r2, #16
   203e4:	str	r3, [sp, #300]	; 0x12c
   203e8:	mov	r3, #0
   203ec:	str	r3, [sp, #296]	; 0x128
   203f0:	add	r3, sp, #296	; 0x128
   203f4:	ldrd	r2, [r3]
   203f8:	orr	r2, r2, r6
   203fc:	orr	r3, r3, r7
   20400:	mov	r6, r2
   20404:	mov	r7, r3
   20408:	ldrb	r2, [r4]
   2040c:	lsl	r3, r2, #24
   20410:	str	r3, [sp, #260]	; 0x104
   20414:	mov	r3, #0
   20418:	str	r3, [sp, #256]	; 0x100
   2041c:	add	r3, sp, #256	; 0x100
   20420:	ldrd	r2, [r3]
   20424:	orr	r2, r2, r6
   20428:	orr	r3, r3, r7
   2042c:	mov	r6, r2
   20430:	mov	r7, r3
   20434:	add	r3, pc, #860	; 0x35c
   20438:	ldrd	r2, [r3]
   2043c:	cmp	r7, r3
   20440:	cmpeq	r6, r2
   20444:	beq	20620 <_start@@Base+0xb444>
   20448:	add	r3, pc, #848	; 0x350
   2044c:	ldrd	r2, [r3]
   20450:	bic	r0, r6, #255	; 0xff
   20454:	cmp	r7, r3
   20458:	cmpeq	r0, r2
   2045c:	movne	r3, #1
   20460:	moveq	r3, #0
   20464:	cmp	r5, #7
   20468:	orrle	r3, r3, #1
   2046c:	cmp	r3, #0
   20470:	str	r3, [sp, #528]	; 0x210
   20474:	beq	21984 <_start@@Base+0xc7a8>
   20478:	add	r1, pc, #808	; 0x328
   2047c:	ldrd	r0, [r1]
   20480:	ldr	r2, [pc, #824]	; 207c0 <_start@@Base+0xb5e4>
   20484:	mvn	r3, #0
   20488:	and	r3, r3, r7
   2048c:	and	r2, r2, r6
   20490:	cmp	r3, r1
   20494:	cmpeq	r2, r0
   20498:	beq	207c8 <_start@@Base+0xb5ec>
   2049c:	add	r3, pc, #780	; 0x30c
   204a0:	ldrd	r2, [r3]
   204a4:	and	r6, r6, #-16777216	; 0xff000000
   204a8:	cmp	r7, r3
   204ac:	cmpeq	r6, r2
   204b0:	bne	204c0 <_start@@Base+0xb2e4>
   204b4:	sub	r3, sl, r4
   204b8:	cmp	r3, #5
   204bc:	bgt	21928 <_start@@Base+0xc74c>
   204c0:	mov	r1, r4
   204c4:	mov	r2, sl
   204c8:	mov	r0, fp
   204cc:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   204d0:	mov	r6, r0
   204d4:	sub	r3, sl, r6
   204d8:	cmp	r3, #1
   204dc:	ble	204f0 <_start@@Base+0xb314>
   204e0:	ldrb	r3, [r6]
   204e4:	cmp	r3, #32
   204e8:	bhi	20504 <_start@@Base+0xb328>
   204ec:	beq	21750 <_start@@Base+0xc574>
   204f0:	mov	r1, r6
   204f4:	mov	r2, sl
   204f8:	mov	r0, fp
   204fc:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   20500:	mov	r6, r0
   20504:	cmp	sl, r6
   20508:	beq	21768 <_start@@Base+0xc58c>
   2050c:	ldrb	r3, [r6]
   20510:	cmp	r3, #44	; 0x2c
   20514:	beq	21884 <_start@@Base+0xc6a8>
   20518:	mov	r3, #0
   2051c:	str	r3, [sp, #656]	; 0x290
   20520:	ldrb	r3, [r6]
   20524:	cmp	r3, #125	; 0x7d
   20528:	beq	2075c <_start@@Base+0xb580>
   2052c:	mov	r3, #10
   20530:	mov	r1, r6
   20534:	mov	r2, sl
   20538:	mov	r0, fp
   2053c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   20540:	ldr	r3, [sp, #656]	; 0x290
   20544:	cmp	r3, #0
   20548:	mov	r4, r0
   2054c:	bne	202d8 <_start@@Base+0xb0fc>
   20550:	ldr	r3, [fp, #20]
   20554:	cmp	r3, #0
   20558:	beq	22fac <_start@@Base+0xddd0>
   2055c:	mov	r2, sl
   20560:	mov	r1, r4
   20564:	mov	r0, fp
   20568:	mov	r3, #33	; 0x21
   2056c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   20570:	add	sp, sp, #700	; 0x2bc
   20574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20578:	mov	r1, r4
   2057c:	mov	r3, #5
   20580:	mov	r2, sl
   20584:	mov	r0, fp
   20588:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2058c:	sub	r5, sl, r0
   20590:	cmp	r5, #8
   20594:	mov	r4, r0
   20598:	bhi	202fc <_start@@Base+0xb120>
   2059c:	sub	r3, r5, #1
   205a0:	cmp	r3, #7
   205a4:	addls	pc, pc, r3, lsl #2
   205a8:	b	218dc <_start@@Base+0xc700>
   205ac:	b	20614 <_start@@Base+0xb438>
   205b0:	b	20608 <_start@@Base+0xb42c>
   205b4:	b	205fc <_start@@Base+0xb420>
   205b8:	b	205f0 <_start@@Base+0xb414>
   205bc:	b	205e4 <_start@@Base+0xb408>
   205c0:	b	205d8 <_start@@Base+0xb3fc>
   205c4:	b	205cc <_start@@Base+0xb3f0>
   205c8:	b	202fc <_start@@Base+0xb120>
   205cc:	mov	r6, #0
   205d0:	mov	r7, #0
   205d4:	b	20304 <_start@@Base+0xb128>
   205d8:	mov	r6, #0
   205dc:	mov	r7, #0
   205e0:	b	20330 <_start@@Base+0xb154>
   205e4:	mov	r6, #0
   205e8:	mov	r7, #0
   205ec:	b	2035c <_start@@Base+0xb180>
   205f0:	mov	r6, #0
   205f4:	mov	r7, #0
   205f8:	b	20388 <_start@@Base+0xb1ac>
   205fc:	mov	r6, #0
   20600:	mov	r7, #0
   20604:	b	203b0 <_start@@Base+0xb1d4>
   20608:	mov	r6, #0
   2060c:	mov	r7, #0
   20610:	b	203dc <_start@@Base+0xb200>
   20614:	mov	r6, #0
   20618:	mov	r7, #0
   2061c:	b	20408 <_start@@Base+0xb22c>
   20620:	add	r5, r4, #8
   20624:	sub	ip, sl, r5
   20628:	cmp	ip, #8
   2062c:	bls	21784 <_start@@Base+0xc5a8>
   20630:	ldrb	r2, [r4, #14]
   20634:	mov	r1, #0
   20638:	lsl	r3, r2, #8
   2063c:	str	r3, [sp, #632]	; 0x278
   20640:	add	r3, sp, #632	; 0x278
   20644:	lsr	lr, r2, #24
   20648:	str	lr, [sp, #636]	; 0x27c
   2064c:	ldrd	r2, [r3]
   20650:	orr	r3, r3, r1
   20654:	mov	r1, r3
   20658:	ldrb	r2, [r4, #13]
   2065c:	lsl	r3, r2, #16
   20660:	str	r3, [sp, #624]	; 0x270
   20664:	add	r3, sp, #624	; 0x270
   20668:	lsr	lr, r2, #16
   2066c:	str	lr, [sp, #628]	; 0x274
   20670:	ldrd	r2, [r3]
   20674:	orr	r3, r3, r1
   20678:	mov	r1, r3
   2067c:	ldrb	r2, [r4, #12]
   20680:	lsl	r3, r2, #24
   20684:	str	r3, [sp, #600]	; 0x258
   20688:	add	r3, sp, #600	; 0x258
   2068c:	lsr	lr, r2, #8
   20690:	str	lr, [sp, #604]	; 0x25c
   20694:	ldrd	r2, [r3]
   20698:	orr	r3, r3, r1
   2069c:	ldrb	r1, [r4, #11]
   206a0:	str	r1, [sp, #612]	; 0x264
   206a4:	mov	r1, #0
   206a8:	str	r1, [sp, #608]	; 0x260
   206ac:	add	r1, sp, #608	; 0x260
   206b0:	ldrd	r0, [r1]
   206b4:	orr	r1, r1, r3
   206b8:	mov	r3, r1
   206bc:	ldrb	r0, [r4, #10]
   206c0:	lsl	r1, r0, #8
   206c4:	str	r1, [sp, #588]	; 0x24c
   206c8:	mov	r1, #0
   206cc:	str	r1, [sp, #584]	; 0x248
   206d0:	add	r1, sp, #584	; 0x248
   206d4:	ldrd	r0, [r1]
   206d8:	orr	r1, r1, r3
   206dc:	mov	r3, r1
   206e0:	ldrb	r0, [r4, #9]
   206e4:	lsl	r1, r0, #16
   206e8:	str	r1, [sp, #572]	; 0x23c
   206ec:	mov	r1, #0
   206f0:	str	r1, [sp, #568]	; 0x238
   206f4:	add	r1, sp, #568	; 0x238
   206f8:	ldrd	r0, [r1]
   206fc:	orr	r1, r1, r3
   20700:	mov	r3, r1
   20704:	ldrb	r0, [r4, #8]
   20708:	add	lr, sp, #520	; 0x208
   2070c:	mov	r2, #0
   20710:	lsl	r1, r0, #24
   20714:	str	r1, [sp, #524]	; 0x20c
   20718:	mov	r1, #0
   2071c:	str	r1, [sp, #520]	; 0x208
   20720:	ldrd	r6, [lr]
   20724:	add	r1, pc, #140	; 0x8c
   20728:	ldrd	r0, [r1]
   2072c:	orr	r7, r7, r3
   20730:	cmp	r7, r1
   20734:	cmpeq	r2, r0
   20738:	bne	20744 <_start@@Base+0xb568>
   2073c:	cmp	ip, #4
   20740:	bgt	22480 <_start@@Base+0xd2a4>
   20744:	mov	r1, r5
   20748:	mov	r2, sl
   2074c:	mov	r0, fp
   20750:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   20754:	mov	r6, r0
   20758:	b	204d4 <_start@@Base+0xb2f8>
   2075c:	add	r4, r6, #1
   20760:	sub	r3, sl, r4
   20764:	cmp	r3, #1
   20768:	ble	2077c <_start@@Base+0xb5a0>
   2076c:	ldrb	r3, [r6, #1]
   20770:	cmp	r3, #32
   20774:	bhi	20550 <_start@@Base+0xb374>
   20778:	beq	22e64 <_start@@Base+0xdc88>
   2077c:	mov	r1, r4
   20780:	mov	r2, sl
   20784:	mov	r0, fp
   20788:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2078c:	ldr	r3, [sp, #656]	; 0x290
   20790:	mov	r4, r0
   20794:	b	202d0 <_start@@Base+0xb0f4>
   20798:	cmnvs	lr, pc, asr r9
   2079c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   207a0:	cmnvs	lr, r0, lsl #18
   207a4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   207a8:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   207ac:	rsbsvc	r6, r2, r6, ror #10
   207b0:	strvs	r0, [r0, #-0]
   207b4:	stclvs	6, cr7, [pc, #-420]!	; 20618 <_start@@Base+0xb43c>
   207b8:	andeq	r0, r0, r0
   207bc:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   207c0:			; <UNDEFINED> instruction: 0xffff0000
   207c4:	andeq	r3, r3, r8, asr r8
   207c8:	cmp	r5, #6
   207cc:	ble	204c0 <_start@@Base+0xb2e4>
   207d0:	mov	r3, #6
   207d4:	mov	r2, sl
   207d8:	mov	r1, r4
   207dc:	mov	r0, fp
   207e0:	bl	18f38 <_start@@Base+0x3d5c>
   207e4:	cmp	r4, r0
   207e8:	mov	r6, r0
   207ec:	beq	204c0 <_start@@Base+0xb2e4>
   207f0:	mov	r3, #0
   207f4:	mov	r1, #3
   207f8:	ldr	r0, [fp]
   207fc:	str	r3, [sp, #660]	; 0x294
   20800:	bl	27a48 <flatcc_builder_start_table@@Base>
   20804:	cmp	r0, #0
   20808:	bne	20d84 <_start@@Base+0xbba8>
   2080c:	add	r3, sp, #668	; 0x29c
   20810:	mov	r2, sl
   20814:	mov	r1, r6
   20818:	mov	r0, fp
   2081c:	bl	17c8c <_start@@Base+0x2ab0>
   20820:	ldr	r2, [pc, #-100]	; 207c4 <_start@@Base+0xb5e8>
   20824:	ldr	r3, [sp, #668]	; 0x29c
   20828:	add	r2, pc, r2
   2082c:	add	r2, r2, #648	; 0x288
   20830:	str	r2, [sp, #648]	; 0x288
   20834:	cmp	r3, #0
   20838:	beq	20d74 <_start@@Base+0xbb98>
   2083c:	cmp	sl, r0
   20840:	beq	20dc8 <_start@@Base+0xbbec>
   20844:	ldrb	r3, [r0]
   20848:	cmp	r3, #34	; 0x22
   2084c:	addeq	r0, r0, #1
   20850:	beq	20868 <_start@@Base+0xb68c>
   20854:	mov	r1, r0
   20858:	mov	r3, #5
   2085c:	mov	r2, sl
   20860:	mov	r0, fp
   20864:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   20868:	sub	r3, sl, r0
   2086c:	cmp	r3, #8
   20870:	bls	20de0 <_start@@Base+0xbc04>
   20874:	ldrb	r2, [r0, #7]
   20878:	mov	r3, #0
   2087c:	ldrb	r4, [r0, #6]
   20880:	lsr	r1, r4, #24
   20884:	str	r1, [sp, #308]	; 0x134
   20888:	lsl	r1, r4, #8
   2088c:	str	r1, [sp, #304]	; 0x130
   20890:	add	r1, sp, #304	; 0x130
   20894:	ldrd	r4, [r1]
   20898:	orr	r4, r4, r2
   2089c:	orr	r5, r5, r3
   208a0:	mov	r2, r4
   208a4:	mov	r3, r5
   208a8:	ldrb	r4, [r0, #5]
   208ac:	lsr	r1, r4, #16
   208b0:	str	r1, [sp, #188]	; 0xbc
   208b4:	lsl	r1, r4, #16
   208b8:	str	r1, [sp, #184]	; 0xb8
   208bc:	ldrd	r4, [sp, #184]	; 0xb8
   208c0:	orr	r4, r4, r2
   208c4:	orr	r5, r5, r3
   208c8:	mov	r2, r4
   208cc:	mov	r3, r5
   208d0:	ldrb	r4, [r0, #4]
   208d4:	lsr	r1, r4, #8
   208d8:	str	r1, [sp, #124]	; 0x7c
   208dc:	lsl	r1, r4, #24
   208e0:	str	r1, [sp, #120]	; 0x78
   208e4:	ldrd	r4, [sp, #120]	; 0x78
   208e8:	orr	r4, r4, r2
   208ec:	orr	r5, r5, r3
   208f0:	mov	r2, r4
   208f4:	mov	r3, r5
   208f8:	ldrb	r1, [r0, #3]
   208fc:	str	r1, [sp, #140]	; 0x8c
   20900:	mov	r1, #0
   20904:	str	r1, [sp, #136]	; 0x88
   20908:	ldrd	r4, [sp, #136]	; 0x88
   2090c:	orr	r4, r4, r2
   20910:	orr	r5, r5, r3
   20914:	mov	r2, r4
   20918:	mov	r3, r5
   2091c:	ldrb	r4, [r0, #2]
   20920:	lsl	r1, r4, #8
   20924:	str	r1, [sp, #100]	; 0x64
   20928:	mov	r1, #0
   2092c:	str	r1, [sp, #96]	; 0x60
   20930:	ldrd	r4, [sp, #96]	; 0x60
   20934:	orr	r4, r4, r2
   20938:	orr	r5, r5, r3
   2093c:	mov	r2, r4
   20940:	mov	r3, r5
   20944:	ldrb	r4, [r0, #1]
   20948:	lsl	r1, r4, #16
   2094c:	str	r1, [sp, #68]	; 0x44
   20950:	mov	r1, #0
   20954:	str	r1, [sp, #64]	; 0x40
   20958:	ldrd	r4, [sp, #64]	; 0x40
   2095c:	orr	r4, r4, r2
   20960:	orr	r5, r5, r3
   20964:	mov	r2, r4
   20968:	mov	r3, r5
   2096c:	ldrb	r4, [r0]
   20970:	lsl	r1, r4, #24
   20974:	str	r1, [sp, #44]	; 0x2c
   20978:	mov	r1, #0
   2097c:	str	r1, [sp, #40]	; 0x28
   20980:	ldrd	r4, [sp, #40]	; 0x28
   20984:	orr	r4, r4, r2
   20988:	orr	r5, r5, r3
   2098c:	mov	r2, r4
   20990:	mov	r3, r5
   20994:	add	r5, pc, #932	; 0x3a4
   20998:	ldrd	r4, [r5]
   2099c:	cmp	r3, r5
   209a0:	cmpeq	r2, r4
   209a4:	bne	20dc8 <_start@@Base+0xbbec>
   209a8:	add	r1, r0, #8
   209ac:	sub	r3, sl, r1
   209b0:	cmp	r3, #8
   209b4:	bls	20e64 <_start@@Base+0xbc88>
   209b8:	ldrb	r4, [r0, #15]
   209bc:	mov	r5, #0
   209c0:	ldrb	r2, [r0, #14]
   209c4:	lsl	r3, r2, #8
   209c8:	str	r3, [sp, #472]	; 0x1d8
   209cc:	add	r3, sp, #472	; 0x1d8
   209d0:	lsr	ip, r2, #24
   209d4:	str	ip, [sp, #476]	; 0x1dc
   209d8:	ldrd	r2, [r3]
   209dc:	orr	r2, r2, r4
   209e0:	orr	r3, r3, r5
   209e4:	ldrb	r4, [r0, #13]
   209e8:	lsr	ip, r4, #16
   209ec:	str	ip, [sp, #396]	; 0x18c
   209f0:	lsl	ip, r4, #16
   209f4:	str	ip, [sp, #392]	; 0x188
   209f8:	add	ip, sp, #392	; 0x188
   209fc:	ldrd	r4, [ip]
   20a00:	orr	r4, r4, r2
   20a04:	orr	r5, r5, r3
   20a08:	mov	r2, r4
   20a0c:	mov	r3, r5
   20a10:	ldrb	r4, [r0, #12]
   20a14:	lsr	ip, r4, #8
   20a18:	str	ip, [sp, #316]	; 0x13c
   20a1c:	lsl	ip, r4, #24
   20a20:	str	ip, [sp, #312]	; 0x138
   20a24:	add	ip, sp, #312	; 0x138
   20a28:	ldrd	r4, [ip]
   20a2c:	orr	r4, r4, r2
   20a30:	orr	r5, r5, r3
   20a34:	mov	r2, r4
   20a38:	mov	r3, r5
   20a3c:	ldrb	ip, [r0, #11]
   20a40:	str	ip, [sp, #348]	; 0x15c
   20a44:	mov	ip, #0
   20a48:	str	ip, [sp, #344]	; 0x158
   20a4c:	add	ip, sp, #344	; 0x158
   20a50:	ldrd	r4, [ip]
   20a54:	orr	r4, r4, r2
   20a58:	orr	r5, r5, r3
   20a5c:	mov	r2, r4
   20a60:	mov	r3, r5
   20a64:	ldrb	r4, [r0, #10]
   20a68:	lsl	ip, r4, #8
   20a6c:	str	ip, [sp, #268]	; 0x10c
   20a70:	mov	ip, #0
   20a74:	str	ip, [sp, #264]	; 0x108
   20a78:	add	ip, sp, #264	; 0x108
   20a7c:	ldrd	r4, [ip]
   20a80:	orr	r4, r4, r2
   20a84:	orr	r5, r5, r3
   20a88:	mov	r2, r4
   20a8c:	mov	r3, r5
   20a90:	ldrb	r4, [r0, #9]
   20a94:	lsl	ip, r4, #16
   20a98:	str	ip, [sp, #228]	; 0xe4
   20a9c:	mov	ip, #0
   20aa0:	str	ip, [sp, #224]	; 0xe0
   20aa4:	ldrd	r4, [sp, #224]	; 0xe0
   20aa8:	orr	r4, r4, r2
   20aac:	orr	r5, r5, r3
   20ab0:	mov	r2, r4
   20ab4:	mov	r3, r5
   20ab8:	ldrb	r4, [r0, #8]
   20abc:	lsl	ip, r4, #24
   20ac0:	str	ip, [sp, #196]	; 0xc4
   20ac4:	mov	ip, #0
   20ac8:	str	ip, [sp, #192]	; 0xc0
   20acc:	ldrd	r4, [sp, #192]	; 0xc0
   20ad0:	orr	r4, r4, r2
   20ad4:	orr	r5, r5, r3
   20ad8:	mov	r2, r4
   20adc:	mov	r3, r5
   20ae0:	add	r5, pc, #608	; 0x260
   20ae4:	ldrd	r4, [r5]
   20ae8:	cmp	r3, r5
   20aec:	cmpeq	r2, r4
   20af0:	bne	20dcc <_start@@Base+0xbbf0>
   20af4:	add	r7, r0, #16
   20af8:	sub	r6, sl, r7
   20afc:	cmp	r6, #8
   20b00:	bls	20fb8 <_start@@Base+0xbddc>
   20b04:	ldrb	r4, [r0, #23]
   20b08:	mov	r5, #0
   20b0c:	ldrb	r2, [r0, #22]
   20b10:	lsl	r3, r2, #8
   20b14:	str	r3, [sp, #592]	; 0x250
   20b18:	add	r3, sp, #592	; 0x250
   20b1c:	lsr	r1, r2, #24
   20b20:	str	r1, [sp, #596]	; 0x254
   20b24:	ldrd	r2, [r3]
   20b28:	orr	r2, r2, r4
   20b2c:	orr	r3, r3, r5
   20b30:	mov	r4, r2
   20b34:	mov	r5, r3
   20b38:	ldrb	r2, [r0, #21]
   20b3c:	lsl	r3, r2, #16
   20b40:	str	r3, [sp, #560]	; 0x230
   20b44:	add	r3, sp, #560	; 0x230
   20b48:	lsr	r1, r2, #16
   20b4c:	str	r1, [sp, #564]	; 0x234
   20b50:	ldrd	r2, [r3]
   20b54:	orr	r2, r2, r4
   20b58:	orr	r3, r3, r5
   20b5c:	mov	r4, r2
   20b60:	mov	r5, r3
   20b64:	ldrb	r2, [r0, #20]
   20b68:	lsl	r3, r2, #24
   20b6c:	str	r3, [sp, #488]	; 0x1e8
   20b70:	add	r3, sp, #488	; 0x1e8
   20b74:	lsr	r1, r2, #8
   20b78:	str	r1, [sp, #492]	; 0x1ec
   20b7c:	ldrd	r2, [r3]
   20b80:	orr	r2, r2, r4
   20b84:	orr	r3, r3, r5
   20b88:	ldrb	r1, [r0, #19]
   20b8c:	str	r1, [sp, #508]	; 0x1fc
   20b90:	mov	r1, #0
   20b94:	str	r1, [sp, #504]	; 0x1f8
   20b98:	add	r1, sp, #504	; 0x1f8
   20b9c:	ldrd	r4, [r1]
   20ba0:	orr	r4, r4, r2
   20ba4:	orr	r5, r5, r3
   20ba8:	mov	r2, r4
   20bac:	mov	r3, r5
   20bb0:	ldrb	r4, [r0, #18]
   20bb4:	lsl	r1, r4, #8
   20bb8:	str	r1, [sp, #460]	; 0x1cc
   20bbc:	mov	r1, #0
   20bc0:	str	r1, [sp, #456]	; 0x1c8
   20bc4:	add	r1, sp, #456	; 0x1c8
   20bc8:	ldrd	r4, [r1]
   20bcc:	orr	r4, r4, r2
   20bd0:	orr	r5, r5, r3
   20bd4:	mov	r2, r4
   20bd8:	mov	r3, r5
   20bdc:	ldrb	r4, [r0, #17]
   20be0:	lsl	r1, r4, #16
   20be4:	str	r1, [sp, #444]	; 0x1bc
   20be8:	mov	r1, #0
   20bec:	str	r1, [sp, #440]	; 0x1b8
   20bf0:	add	r1, sp, #440	; 0x1b8
   20bf4:	ldrd	r4, [r1]
   20bf8:	orr	r4, r4, r2
   20bfc:	orr	r5, r5, r3
   20c00:	mov	r2, r4
   20c04:	mov	r3, r5
   20c08:	ldrb	r4, [r0, #16]
   20c0c:	add	ip, sp, #528	; 0x210
   20c10:	lsl	r1, r4, #24
   20c14:	str	r1, [sp, #388]	; 0x184
   20c18:	mov	r1, #0
   20c1c:	str	r1, [sp, #384]	; 0x180
   20c20:	add	r1, sp, #384	; 0x180
   20c24:	ldrd	r4, [r1]
   20c28:	orr	r4, r4, r2
   20c2c:	orr	r5, r5, r3
   20c30:	mov	r2, r4
   20c34:	ldr	r4, [pc, #300]	; 20d68 <_start@@Base+0xbb8c>
   20c38:	mov	r3, r5
   20c3c:	mvn	r5, #0
   20c40:	and	r0, r2, r4
   20c44:	and	r1, r3, r5
   20c48:	add	r5, pc, #256	; 0x100
   20c4c:	ldrd	r4, [r5]
   20c50:	strd	r0, [ip]
   20c54:	cmp	r1, r5
   20c58:	cmpeq	r0, r4
   20c5c:	beq	2103c <_start@@Base+0xbe60>
   20c60:	add	r1, pc, #240	; 0xf0
   20c64:	ldrd	r0, [r1]
   20c68:	and	r2, r2, #-16777216	; 0xff000000
   20c6c:	cmp	r3, r1
   20c70:	cmpeq	r2, r0
   20c74:	movne	r3, #1
   20c78:	moveq	r3, #0
   20c7c:	cmp	r6, #5
   20c80:	orrle	r3, r3, #1
   20c84:	cmp	r3, #0
   20c88:	beq	2252c <_start@@Base+0xd350>
   20c8c:	add	r1, sp, #528	; 0x210
   20c90:	add	r3, pc, #200	; 0xc8
   20c94:	ldrd	r2, [r3]
   20c98:	ldrd	r0, [r1]
   20c9c:	cmp	r1, r3
   20ca0:	cmpeq	r0, r2
   20ca4:	bne	20cb0 <_start@@Base+0xbad4>
   20ca8:	cmp	r6, #6
   20cac:	bgt	219d4 <_start@@Base+0xc7f8>
   20cb0:	mov	r1, r7
   20cb4:	mov	r2, sl
   20cb8:	mov	r0, fp
   20cbc:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   20cc0:	mov	r5, r0
   20cc4:	sub	r3, sl, r5
   20cc8:	cmp	r3, #1
   20ccc:	ble	20ce0 <_start@@Base+0xbb04>
   20cd0:	ldrb	r3, [r5]
   20cd4:	cmp	r3, #32
   20cd8:	bhi	20cf4 <_start@@Base+0xbb18>
   20cdc:	beq	20f20 <_start@@Base+0xbd44>
   20ce0:	mov	r1, r5
   20ce4:	mov	r2, sl
   20ce8:	mov	r0, fp
   20cec:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   20cf0:	mov	r5, r0
   20cf4:	cmp	sl, r5
   20cf8:	beq	20f38 <_start@@Base+0xbd5c>
   20cfc:	ldrb	r3, [r5]
   20d00:	cmp	r3, #44	; 0x2c
   20d04:	beq	20f68 <_start@@Base+0xbd8c>
   20d08:	mov	r3, #0
   20d0c:	str	r3, [sp, #668]	; 0x29c
   20d10:	ldrb	r3, [r5]
   20d14:	cmp	r3, #125	; 0x7d
   20d18:	beq	20ee8 <_start@@Base+0xbd0c>
   20d1c:	mov	r3, #10
   20d20:	mov	r1, r5
   20d24:	mov	r2, sl
   20d28:	mov	r0, fp
   20d2c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   20d30:	ldr	r3, [sp, #668]	; 0x29c
   20d34:	cmp	r3, #0
   20d38:	bne	2083c <_start@@Base+0xb660>
   20d3c:	b	20d74 <_start@@Base+0xbb98>
   20d40:	bvs	1cfcb00 <__bss_end__@@Base+0x1ca8734>
   20d44:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20d48:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   20d4c:	rsbsvc	r6, r2, r6, ror #10
   20d50:	ldrvs	r0, [r2, -r0]!
   20d54:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   20d58:	strvs	r0, [r0, -r0]
   20d5c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   20d60:	ldrvs	r0, [r3, -r0]!
   20d64:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   20d68:			; <UNDEFINED> instruction: 0xffff0000
   20d6c:	andeq	r2, r3, ip, ror #31
   20d70:	andeq	r2, r3, r4, ror #31
   20d74:	mov	r6, r0
   20d78:	ldr	r3, [fp, #20]
   20d7c:	cmp	r3, #0
   20d80:	beq	20f50 <_start@@Base+0xbd74>
   20d84:	mov	r1, r6
   20d88:	mov	r3, #33	; 0x21
   20d8c:	mov	r2, sl
   20d90:	mov	r0, fp
   20d94:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   20d98:	ldr	r3, [sp, #660]	; 0x294
   20d9c:	cmp	r3, #0
   20da0:	mov	r6, r0
   20da4:	beq	2197c <_start@@Base+0xc7a0>
   20da8:	mov	r1, #0
   20dac:	ldr	r0, [fp]
   20db0:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   20db4:	cmp	r0, #0
   20db8:	beq	2197c <_start@@Base+0xc7a0>
   20dbc:	ldr	r3, [sp, #660]	; 0x294
   20dc0:	str	r3, [r0]
   20dc4:	b	204d4 <_start@@Base+0xb2f8>
   20dc8:	mov	r1, r0
   20dcc:	mov	r2, sl
   20dd0:	mov	r0, fp
   20dd4:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   20dd8:	mov	r5, r0
   20ddc:	b	20cc4 <_start@@Base+0xbae8>
   20de0:	sub	r3, r3, #1
   20de4:	cmp	r3, #7
   20de8:	addls	pc, pc, r3, lsl #2
   20dec:	b	20dc8 <_start@@Base+0xbbec>
   20df0:	b	20e58 <_start@@Base+0xbc7c>
   20df4:	b	20e4c <_start@@Base+0xbc70>
   20df8:	b	20e40 <_start@@Base+0xbc64>
   20dfc:	b	20e34 <_start@@Base+0xbc58>
   20e00:	b	20e28 <_start@@Base+0xbc4c>
   20e04:	b	20e1c <_start@@Base+0xbc40>
   20e08:	b	20e10 <_start@@Base+0xbc34>
   20e0c:	b	20874 <_start@@Base+0xb698>
   20e10:	mov	r2, #0
   20e14:	mov	r3, #0
   20e18:	b	2087c <_start@@Base+0xb6a0>
   20e1c:	mov	r2, #0
   20e20:	mov	r3, #0
   20e24:	b	208a8 <_start@@Base+0xb6cc>
   20e28:	mov	r2, #0
   20e2c:	mov	r3, #0
   20e30:	b	208d0 <_start@@Base+0xb6f4>
   20e34:	mov	r2, #0
   20e38:	mov	r3, #0
   20e3c:	b	208f8 <_start@@Base+0xb71c>
   20e40:	mov	r2, #0
   20e44:	mov	r3, #0
   20e48:	b	2091c <_start@@Base+0xb740>
   20e4c:	mov	r2, #0
   20e50:	mov	r3, #0
   20e54:	b	20944 <_start@@Base+0xb768>
   20e58:	mov	r2, #0
   20e5c:	mov	r3, #0
   20e60:	b	2096c <_start@@Base+0xb790>
   20e64:	sub	r3, r3, #1
   20e68:	cmp	r3, #7
   20e6c:	addls	pc, pc, r3, lsl #2
   20e70:	b	20dcc <_start@@Base+0xbbf0>
   20e74:	b	20edc <_start@@Base+0xbd00>
   20e78:	b	20ed0 <_start@@Base+0xbcf4>
   20e7c:	b	20ec4 <_start@@Base+0xbce8>
   20e80:	b	20eb8 <_start@@Base+0xbcdc>
   20e84:	b	20eac <_start@@Base+0xbcd0>
   20e88:	b	20ea0 <_start@@Base+0xbcc4>
   20e8c:	b	20e94 <_start@@Base+0xbcb8>
   20e90:	b	209b8 <_start@@Base+0xb7dc>
   20e94:	mov	r4, #0
   20e98:	mov	r5, #0
   20e9c:	b	209c0 <_start@@Base+0xb7e4>
   20ea0:	mov	r2, #0
   20ea4:	mov	r3, #0
   20ea8:	b	209e4 <_start@@Base+0xb808>
   20eac:	mov	r2, #0
   20eb0:	mov	r3, #0
   20eb4:	b	20a10 <_start@@Base+0xb834>
   20eb8:	mov	r2, #0
   20ebc:	mov	r3, #0
   20ec0:	b	20a3c <_start@@Base+0xb860>
   20ec4:	mov	r2, #0
   20ec8:	mov	r3, #0
   20ecc:	b	20a64 <_start@@Base+0xb888>
   20ed0:	mov	r2, #0
   20ed4:	mov	r3, #0
   20ed8:	b	20a90 <_start@@Base+0xb8b4>
   20edc:	mov	r2, #0
   20ee0:	mov	r3, #0
   20ee4:	b	20ab8 <_start@@Base+0xb8dc>
   20ee8:	add	r0, r5, #1
   20eec:	sub	r3, sl, r0
   20ef0:	cmp	r3, #1
   20ef4:	ble	20f08 <_start@@Base+0xbd2c>
   20ef8:	ldrb	r3, [r5, #1]
   20efc:	cmp	r3, #32
   20f00:	bhi	20d74 <_start@@Base+0xbb98>
   20f04:	beq	21900 <_start@@Base+0xc724>
   20f08:	mov	r1, r0
   20f0c:	mov	r2, sl
   20f10:	mov	r0, fp
   20f14:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   20f18:	ldr	r3, [sp, #668]	; 0x29c
   20f1c:	b	20834 <_start@@Base+0xb658>
   20f20:	ldrb	r3, [r5, #1]
   20f24:	cmp	r3, #32
   20f28:	addhi	r5, r5, #1
   20f2c:	bls	20ce0 <_start@@Base+0xbb04>
   20f30:	cmp	sl, r5
   20f34:	bne	20cfc <_start@@Base+0xbb20>
   20f38:	mov	r3, #0
   20f3c:	str	r3, [sp, #668]	; 0x29c
   20f40:	ldr	r3, [fp, #20]
   20f44:	mov	r6, sl
   20f48:	cmp	r3, #0
   20f4c:	bne	20d84 <_start@@Base+0xbba8>
   20f50:	ldr	r0, [fp]
   20f54:	bl	2843c <flatcc_builder_end_table@@Base>
   20f58:	cmp	r0, #0
   20f5c:	str	r0, [sp, #660]	; 0x294
   20f60:	beq	20d84 <_start@@Base+0xbba8>
   20f64:	b	20da8 <_start@@Base+0xbbcc>
   20f68:	add	r0, r5, #1
   20f6c:	sub	r3, sl, r0
   20f70:	cmp	r3, #1
   20f74:	ble	20f88 <_start@@Base+0xbdac>
   20f78:	ldrb	r3, [r5, #1]
   20f7c:	cmp	r3, #32
   20f80:	bhi	20f98 <_start@@Base+0xbdbc>
   20f84:	beq	223b4 <_start@@Base+0xd1d8>
   20f88:	mov	r1, r0
   20f8c:	mov	r2, sl
   20f90:	mov	r0, fp
   20f94:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   20f98:	cmp	sl, r0
   20f9c:	beq	223cc <_start@@Base+0xd1f0>
   20fa0:	ldrb	r3, [r0]
   20fa4:	cmp	r3, #125	; 0x7d
   20fa8:	beq	22e78 <_start@@Base+0xdc9c>
   20fac:	mov	r3, #1
   20fb0:	str	r3, [sp, #668]	; 0x29c
   20fb4:	b	2083c <_start@@Base+0xb660>
   20fb8:	sub	r3, r6, #1
   20fbc:	cmp	r3, #7
   20fc0:	addls	pc, pc, r3, lsl #2
   20fc4:	b	20cb0 <_start@@Base+0xbad4>
   20fc8:	b	21030 <_start@@Base+0xbe54>
   20fcc:	b	21024 <_start@@Base+0xbe48>
   20fd0:	b	21018 <_start@@Base+0xbe3c>
   20fd4:	b	2100c <_start@@Base+0xbe30>
   20fd8:	b	21000 <_start@@Base+0xbe24>
   20fdc:	b	20ff4 <_start@@Base+0xbe18>
   20fe0:	b	20fe8 <_start@@Base+0xbe0c>
   20fe4:	b	20b04 <_start@@Base+0xb928>
   20fe8:	mov	r4, #0
   20fec:	mov	r5, #0
   20ff0:	b	20b0c <_start@@Base+0xb930>
   20ff4:	mov	r4, #0
   20ff8:	mov	r5, #0
   20ffc:	b	20b38 <_start@@Base+0xb95c>
   21000:	mov	r4, #0
   21004:	mov	r5, #0
   21008:	b	20b64 <_start@@Base+0xb988>
   2100c:	mov	r2, #0
   21010:	mov	r3, #0
   21014:	b	20b88 <_start@@Base+0xb9ac>
   21018:	mov	r2, #0
   2101c:	mov	r3, #0
   21020:	b	20bb0 <_start@@Base+0xb9d4>
   21024:	mov	r2, #0
   21028:	mov	r3, #0
   2102c:	b	20bdc <_start@@Base+0xba00>
   21030:	mov	r2, #0
   21034:	mov	r3, #0
   21038:	b	20c08 <_start@@Base+0xba2c>
   2103c:	cmp	r6, #6
   21040:	ble	20cb0 <_start@@Base+0xbad4>
   21044:	mov	r3, #6
   21048:	mov	r2, sl
   2104c:	mov	r1, r7
   21050:	mov	r0, fp
   21054:	bl	18f38 <_start@@Base+0x3d5c>
   21058:	cmp	r7, r0
   2105c:	mov	r5, r0
   21060:	beq	20cb0 <_start@@Base+0xbad4>
   21064:	mov	r1, #2
   21068:	ldr	r0, [fp]
   2106c:	bl	27a48 <flatcc_builder_start_table@@Base>
   21070:	cmp	r0, #0
   21074:	bne	2142c <_start@@Base+0xc250>
   21078:	add	r3, sp, #672	; 0x2a0
   2107c:	mov	r2, sl
   21080:	mov	r1, r5
   21084:	mov	r0, fp
   21088:	bl	17c8c <_start@@Base+0x2ab0>
   2108c:	ldr	r3, [pc, #-808]	; 20d6c <_start@@Base+0xbb90>
   21090:	ldr	r2, [pc, #-808]	; 20d70 <_start@@Base+0xbb94>
   21094:	add	r3, pc, r3
   21098:	add	r3, r3, #540	; 0x21c
   2109c:	add	r2, pc, r2
   210a0:	add	r2, r2, #552	; 0x228
   210a4:	str	r3, [sp, #528]	; 0x210
   210a8:	ldr	r3, [sp, #672]	; 0x2a0
   210ac:	mov	r7, r2
   210b0:	cmp	r3, #0
   210b4:	beq	2141c <_start@@Base+0xc240>
   210b8:	mov	r1, r0
   210bc:	cmp	sl, r1
   210c0:	beq	21448 <_start@@Base+0xc26c>
   210c4:	ldrb	r3, [r1]
   210c8:	cmp	r3, #34	; 0x22
   210cc:	addeq	r1, r1, #1
   210d0:	beq	210e8 <_start@@Base+0xbf0c>
   210d4:	mov	r3, #5
   210d8:	mov	r2, sl
   210dc:	mov	r0, fp
   210e0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   210e4:	mov	r1, r0
   210e8:	sub	r3, sl, r1
   210ec:	cmp	r3, #8
   210f0:	bls	2145c <_start@@Base+0xc280>
   210f4:	ldrb	r2, [r1, #7]
   210f8:	mov	r3, #0
   210fc:	ldrb	r4, [r1, #6]
   21100:	lsr	r0, r4, #24
   21104:	str	r0, [sp, #332]	; 0x14c
   21108:	lsl	r0, r4, #8
   2110c:	str	r0, [sp, #328]	; 0x148
   21110:	add	r0, sp, #328	; 0x148
   21114:	ldrd	r4, [r0]
   21118:	orr	r4, r4, r2
   2111c:	orr	r5, r5, r3
   21120:	mov	r2, r4
   21124:	mov	r3, r5
   21128:	ldrb	r4, [r1, #5]
   2112c:	lsr	r0, r4, #16
   21130:	str	r0, [sp, #204]	; 0xcc
   21134:	lsl	r0, r4, #16
   21138:	str	r0, [sp, #200]	; 0xc8
   2113c:	ldrd	r4, [sp, #200]	; 0xc8
   21140:	orr	r4, r4, r2
   21144:	orr	r5, r5, r3
   21148:	mov	r2, r4
   2114c:	mov	r3, r5
   21150:	ldrb	r4, [r1, #4]
   21154:	lsr	r0, r4, #8
   21158:	str	r0, [sp, #132]	; 0x84
   2115c:	lsl	r0, r4, #24
   21160:	str	r0, [sp, #128]	; 0x80
   21164:	ldrd	r4, [sp, #128]	; 0x80
   21168:	orr	r4, r4, r2
   2116c:	orr	r5, r5, r3
   21170:	mov	r2, r4
   21174:	mov	r3, r5
   21178:	ldrb	r0, [r1, #3]
   2117c:	str	r0, [sp, #148]	; 0x94
   21180:	mov	r0, #0
   21184:	str	r0, [sp, #144]	; 0x90
   21188:	ldrd	r4, [sp, #144]	; 0x90
   2118c:	orr	r4, r4, r2
   21190:	orr	r5, r5, r3
   21194:	mov	r2, r4
   21198:	mov	r3, r5
   2119c:	ldrb	r4, [r1, #2]
   211a0:	lsl	r0, r4, #8
   211a4:	str	r0, [sp, #108]	; 0x6c
   211a8:	mov	r0, #0
   211ac:	str	r0, [sp, #104]	; 0x68
   211b0:	ldrd	r4, [sp, #104]	; 0x68
   211b4:	orr	r4, r4, r2
   211b8:	orr	r5, r5, r3
   211bc:	mov	r2, r4
   211c0:	mov	r3, r5
   211c4:	ldrb	r4, [r1, #1]
   211c8:	lsl	r0, r4, #16
   211cc:	str	r0, [sp, #84]	; 0x54
   211d0:	mov	r0, #0
   211d4:	str	r0, [sp, #80]	; 0x50
   211d8:	ldrd	r4, [sp, #80]	; 0x50
   211dc:	orr	r4, r4, r2
   211e0:	orr	r5, r5, r3
   211e4:	mov	r2, r4
   211e8:	mov	r3, r5
   211ec:	ldrb	r4, [r1]
   211f0:	lsl	r0, r4, #24
   211f4:	str	r0, [sp, #52]	; 0x34
   211f8:	mov	r0, #0
   211fc:	str	r0, [sp, #48]	; 0x30
   21200:	ldrd	r4, [sp, #48]	; 0x30
   21204:	orr	r4, r4, r2
   21208:	orr	r5, r5, r3
   2120c:	mov	r2, r4
   21210:	mov	r3, r5
   21214:	add	r5, pc, #900	; 0x384
   21218:	ldrd	r4, [r5]
   2121c:	cmp	r3, r5
   21220:	cmpeq	r2, r4
   21224:	bne	21448 <_start@@Base+0xc26c>
   21228:	add	r6, r1, #8
   2122c:	sub	ip, sl, r6
   21230:	cmp	ip, #8
   21234:	bls	214e0 <_start@@Base+0xc304>
   21238:	ldrb	r4, [r1, #15]
   2123c:	mov	r5, #0
   21240:	ldrb	r2, [r1, #14]
   21244:	lsl	r3, r2, #8
   21248:	str	r3, [sp, #496]	; 0x1f0
   2124c:	add	r3, sp, #496	; 0x1f0
   21250:	lsr	r0, r2, #24
   21254:	str	r0, [sp, #500]	; 0x1f4
   21258:	ldrd	r2, [r3]
   2125c:	orr	r2, r2, r4
   21260:	orr	r3, r3, r5
   21264:	mov	r4, r2
   21268:	mov	r5, r3
   2126c:	ldrb	r2, [r1, #13]
   21270:	lsl	r3, r2, #16
   21274:	str	r3, [sp, #416]	; 0x1a0
   21278:	add	r3, sp, #416	; 0x1a0
   2127c:	lsr	r0, r2, #16
   21280:	str	r0, [sp, #420]	; 0x1a4
   21284:	ldrd	r2, [r3]
   21288:	orr	r2, r2, r4
   2128c:	orr	r3, r3, r5
   21290:	mov	r4, r2
   21294:	mov	r5, r3
   21298:	ldrb	r2, [r1, #12]
   2129c:	lsl	r3, r2, #24
   212a0:	str	r3, [sp, #336]	; 0x150
   212a4:	add	r3, sp, #336	; 0x150
   212a8:	lsr	r0, r2, #8
   212ac:	str	r0, [sp, #340]	; 0x154
   212b0:	ldrd	r2, [r3]
   212b4:	orr	r2, r2, r4
   212b8:	orr	r3, r3, r5
   212bc:	ldrb	r0, [r1, #11]
   212c0:	str	r0, [sp, #364]	; 0x16c
   212c4:	mov	r0, #0
   212c8:	str	r0, [sp, #360]	; 0x168
   212cc:	add	r0, sp, #360	; 0x168
   212d0:	ldrd	r4, [r0]
   212d4:	orr	r4, r4, r2
   212d8:	orr	r5, r5, r3
   212dc:	mov	r2, r4
   212e0:	mov	r3, r5
   212e4:	ldrb	r4, [r1, #10]
   212e8:	lsl	r0, r4, #8
   212ec:	str	r0, [sp, #284]	; 0x11c
   212f0:	mov	r0, #0
   212f4:	str	r0, [sp, #280]	; 0x118
   212f8:	add	r0, sp, #280	; 0x118
   212fc:	ldrd	r4, [r0]
   21300:	orr	r4, r4, r2
   21304:	orr	r5, r5, r3
   21308:	mov	r2, r4
   2130c:	mov	r3, r5
   21310:	ldrb	r4, [r1, #9]
   21314:	lsl	r0, r4, #16
   21318:	str	r0, [sp, #252]	; 0xfc
   2131c:	mov	r0, #0
   21320:	str	r0, [sp, #248]	; 0xf8
   21324:	ldrd	r4, [sp, #248]	; 0xf8
   21328:	orr	r4, r4, r2
   2132c:	orr	r5, r5, r3
   21330:	mov	r2, r4
   21334:	mov	r3, r5
   21338:	ldrb	r4, [r1, #8]
   2133c:	add	r1, pc, #612	; 0x264
   21340:	ldrd	r0, [r1]
   21344:	lsl	lr, r4, #24
   21348:	str	lr, [sp, #164]	; 0xa4
   2134c:	mov	lr, #0
   21350:	str	lr, [sp, #160]	; 0xa0
   21354:	ldrd	r4, [sp, #160]	; 0xa0
   21358:	orr	r4, r4, r2
   2135c:	orr	r5, r5, r3
   21360:	mov	r2, r4
   21364:	cmp	r5, r1
   21368:	bic	r4, r4, #255	; 0xff
   2136c:	cmpeq	r4, r0
   21370:	beq	2161c <_start@@Base+0xc440>
   21374:	add	r1, pc, #564	; 0x234
   21378:	ldrd	r0, [r1]
   2137c:	cmp	r5, r1
   21380:	cmpeq	r2, r0
   21384:	bne	21390 <_start@@Base+0xc1b4>
   21388:	cmp	ip, #8
   2138c:	bgt	217b4 <_start@@Base+0xc5d8>
   21390:	mov	r1, r6
   21394:	mov	r2, sl
   21398:	mov	r0, fp
   2139c:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   213a0:	mov	r4, r0
   213a4:	sub	r3, sl, r4
   213a8:	cmp	r3, #1
   213ac:	ble	213c0 <_start@@Base+0xc1e4>
   213b0:	ldrb	r3, [r4]
   213b4:	cmp	r3, #32
   213b8:	bhi	213d4 <_start@@Base+0xc1f8>
   213bc:	beq	215c0 <_start@@Base+0xc3e4>
   213c0:	mov	r1, r4
   213c4:	mov	r2, sl
   213c8:	mov	r0, fp
   213cc:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   213d0:	mov	r4, r0
   213d4:	cmp	sl, r4
   213d8:	beq	215d8 <_start@@Base+0xc3fc>
   213dc:	ldrb	r3, [r4]
   213e0:	cmp	r3, #44	; 0x2c
   213e4:	beq	21700 <_start@@Base+0xc524>
   213e8:	mov	r3, #0
   213ec:	str	r3, [sp, #672]	; 0x2a0
   213f0:	ldrb	r3, [r4]
   213f4:	cmp	r3, #125	; 0x7d
   213f8:	beq	21564 <_start@@Base+0xc388>
   213fc:	mov	r3, #10
   21400:	mov	r1, r4
   21404:	mov	r2, sl
   21408:	mov	r0, fp
   2140c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   21410:	ldr	r3, [sp, #672]	; 0x2a0
   21414:	cmp	r3, #0
   21418:	bne	210b8 <_start@@Base+0xbedc>
   2141c:	mov	r5, r0
   21420:	ldr	r3, [fp, #20]
   21424:	cmp	r3, #0
   21428:	beq	215f0 <_start@@Base+0xc414>
   2142c:	mov	r1, r5
   21430:	mov	r3, #33	; 0x21
   21434:	mov	r2, sl
   21438:	mov	r0, fp
   2143c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   21440:	mov	r6, r0
   21444:	b	20d84 <_start@@Base+0xbba8>
   21448:	mov	r2, sl
   2144c:	mov	r0, fp
   21450:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   21454:	mov	r4, r0
   21458:	b	213a4 <_start@@Base+0xc1c8>
   2145c:	sub	r3, r3, #1
   21460:	cmp	r3, #7
   21464:	addls	pc, pc, r3, lsl #2
   21468:	b	21448 <_start@@Base+0xc26c>
   2146c:	b	214d4 <_start@@Base+0xc2f8>
   21470:	b	214c8 <_start@@Base+0xc2ec>
   21474:	b	214bc <_start@@Base+0xc2e0>
   21478:	b	214b0 <_start@@Base+0xc2d4>
   2147c:	b	214a4 <_start@@Base+0xc2c8>
   21480:	b	21498 <_start@@Base+0xc2bc>
   21484:	b	2148c <_start@@Base+0xc2b0>
   21488:	b	210f4 <_start@@Base+0xbf18>
   2148c:	mov	r2, #0
   21490:	mov	r3, #0
   21494:	b	210fc <_start@@Base+0xbf20>
   21498:	mov	r2, #0
   2149c:	mov	r3, #0
   214a0:	b	21128 <_start@@Base+0xbf4c>
   214a4:	mov	r2, #0
   214a8:	mov	r3, #0
   214ac:	b	21150 <_start@@Base+0xbf74>
   214b0:	mov	r2, #0
   214b4:	mov	r3, #0
   214b8:	b	21178 <_start@@Base+0xbf9c>
   214bc:	mov	r2, #0
   214c0:	mov	r3, #0
   214c4:	b	2119c <_start@@Base+0xbfc0>
   214c8:	mov	r2, #0
   214cc:	mov	r3, #0
   214d0:	b	211c4 <_start@@Base+0xbfe8>
   214d4:	mov	r2, #0
   214d8:	mov	r3, #0
   214dc:	b	211ec <_start@@Base+0xc010>
   214e0:	sub	r3, ip, #1
   214e4:	cmp	r3, #7
   214e8:	addls	pc, pc, r3, lsl #2
   214ec:	b	21390 <_start@@Base+0xc1b4>
   214f0:	b	21558 <_start@@Base+0xc37c>
   214f4:	b	2154c <_start@@Base+0xc370>
   214f8:	b	21540 <_start@@Base+0xc364>
   214fc:	b	21534 <_start@@Base+0xc358>
   21500:	b	21528 <_start@@Base+0xc34c>
   21504:	b	2151c <_start@@Base+0xc340>
   21508:	b	21510 <_start@@Base+0xc334>
   2150c:	b	21238 <_start@@Base+0xc05c>
   21510:	mov	r4, #0
   21514:	mov	r5, #0
   21518:	b	21240 <_start@@Base+0xc064>
   2151c:	mov	r4, #0
   21520:	mov	r5, #0
   21524:	b	2126c <_start@@Base+0xc090>
   21528:	mov	r4, #0
   2152c:	mov	r5, #0
   21530:	b	21298 <_start@@Base+0xc0bc>
   21534:	mov	r2, #0
   21538:	mov	r3, #0
   2153c:	b	212bc <_start@@Base+0xc0e0>
   21540:	mov	r2, #0
   21544:	mov	r3, #0
   21548:	b	212e4 <_start@@Base+0xc108>
   2154c:	mov	r2, #0
   21550:	mov	r3, #0
   21554:	b	21310 <_start@@Base+0xc134>
   21558:	mov	r2, #0
   2155c:	mov	r3, #0
   21560:	b	21338 <_start@@Base+0xc15c>
   21564:	add	r0, r4, #1
   21568:	sub	r3, sl, r0
   2156c:	cmp	r3, #1
   21570:	ble	21584 <_start@@Base+0xc3a8>
   21574:	ldrb	r3, [r4, #1]
   21578:	cmp	r3, #32
   2157c:	bhi	2141c <_start@@Base+0xc240>
   21580:	beq	21914 <_start@@Base+0xc738>
   21584:	mov	r1, r0
   21588:	mov	r2, sl
   2158c:	mov	r0, fp
   21590:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   21594:	ldr	r3, [sp, #672]	; 0x2a0
   21598:	b	210b0 <_start@@Base+0xbed4>
   2159c:	nop			; (mov r0, r0)
   215a0:	svcpl	0x00626262
   215a4:	cmnvs	r1, r1, ror #2
   215a8:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   215ac:	subsvs	r7, pc, #116, 6	; 0xd0000001
   215b0:	cmnvs	r2, pc, asr r4
   215b4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   215b8:	andeq	r1, r0, r0, lsl #17
   215bc:	andeq	r2, r3, ip, asr r6
   215c0:	ldrb	r3, [r4, #1]
   215c4:	cmp	r3, #32
   215c8:	addhi	r4, r4, #1
   215cc:	bls	213c0 <_start@@Base+0xc1e4>
   215d0:	cmp	sl, r4
   215d4:	bne	213dc <_start@@Base+0xc200>
   215d8:	mov	r3, #0
   215dc:	str	r3, [sp, #672]	; 0x2a0
   215e0:	ldr	r3, [fp, #20]
   215e4:	mov	r5, sl
   215e8:	cmp	r3, #0
   215ec:	bne	2142c <_start@@Base+0xc250>
   215f0:	ldr	r0, [fp]
   215f4:	bl	2843c <flatcc_builder_end_table@@Base>
   215f8:	subs	r4, r0, #0
   215fc:	beq	2142c <_start@@Base+0xc250>
   21600:	mov	r1, #1
   21604:	ldr	r0, [fp]
   21608:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   2160c:	cmp	r0, #0
   21610:	bne	21db0 <_start@@Base+0xcbd4>
   21614:	mov	r6, r5
   21618:	b	20d84 <_start@@Base+0xbba8>
   2161c:	cmp	ip, #7
   21620:	ble	21390 <_start@@Base+0xc1b4>
   21624:	mov	r3, #7
   21628:	mov	r2, sl
   2162c:	mov	r1, r6
   21630:	mov	r0, fp
   21634:	bl	18f38 <_start@@Base+0x3d5c>
   21638:	cmp	r6, r0
   2163c:	mov	r5, r0
   21640:	beq	21390 <_start@@Base+0xc1b4>
   21644:	ldr	r1, [sp, #160]	; 0xa0
   21648:	mov	r2, #0
   2164c:	mov	r3, #0
   21650:	str	r1, [sp, #676]	; 0x2a4
   21654:	add	r1, sp, #680	; 0x2a8
   21658:	cmp	sl, r0
   2165c:	strd	r2, [r1]
   21660:	add	r1, sp, #688	; 0x2b0
   21664:	strd	r2, [r1]
   21668:	beq	22ff8 <_start@@Base+0xde1c>
   2166c:	str	r1, [sp]
   21670:	add	r3, sp, #676	; 0x2a4
   21674:	mov	r1, r0
   21678:	mov	r2, sl
   2167c:	mov	r0, fp
   21680:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   21684:	cmp	r5, r0
   21688:	mov	r4, r0
   2168c:	beq	22ff8 <_start@@Base+0xde1c>
   21690:	ldr	r1, [sp, #676]	; 0x2a4
   21694:	add	r3, sp, #688	; 0x2b0
   21698:	cmp	r1, #0
   2169c:	ldrd	r2, [r3]
   216a0:	beq	218e8 <_start@@Base+0xc70c>
   216a4:	cmp	r3, #-2147483648	; 0x80000000
   216a8:	cmpeq	r2, #0
   216ac:	bhi	22efc <_start@@Base+0xdd20>
   216b0:	rsbs	r2, r2, #0
   216b4:	rsc	r3, r3, #0
   216b8:	add	r1, sp, #680	; 0x2a8
   216bc:	strd	r2, [r1]
   216c0:	orrs	r3, r2, r3
   216c4:	bne	216d4 <_start@@Base+0xc4f8>
   216c8:	ldr	r3, [fp, #8]
   216cc:	tst	r3, #2
   216d0:	beq	213a4 <_start@@Base+0xc1c8>
   216d4:	mov	r3, #8
   216d8:	mov	r2, r3
   216dc:	mov	r1, #0
   216e0:	ldr	r0, [fp]
   216e4:	bl	29488 <flatcc_builder_table_add@@Base>
   216e8:	cmp	r0, #0
   216ec:	beq	22824 <_start@@Base+0xd648>
   216f0:	add	r3, sp, #680	; 0x2a8
   216f4:	ldrd	r2, [r3]
   216f8:	strd	r2, [r0]
   216fc:	b	213a4 <_start@@Base+0xc1c8>
   21700:	add	r1, r4, #1
   21704:	sub	r3, sl, r1
   21708:	cmp	r3, #1
   2170c:	ble	21720 <_start@@Base+0xc544>
   21710:	ldrb	r3, [r4, #1]
   21714:	cmp	r3, #32
   21718:	bhi	21730 <_start@@Base+0xc554>
   2171c:	beq	22444 <_start@@Base+0xd268>
   21720:	mov	r2, sl
   21724:	mov	r0, fp
   21728:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2172c:	mov	r1, r0
   21730:	cmp	sl, r1
   21734:	beq	2245c <_start@@Base+0xd280>
   21738:	ldrb	r3, [r1]
   2173c:	cmp	r3, #125	; 0x7d
   21740:	beq	22eb4 <_start@@Base+0xdcd8>
   21744:	mov	r3, #1
   21748:	str	r3, [sp, #672]	; 0x2a0
   2174c:	b	210bc <_start@@Base+0xbee0>
   21750:	ldrb	r3, [r6, #1]
   21754:	cmp	r3, #32
   21758:	addhi	r6, r6, #1
   2175c:	bls	204f0 <_start@@Base+0xb314>
   21760:	cmp	sl, r6
   21764:	bne	2050c <_start@@Base+0xb330>
   21768:	mov	r3, #0
   2176c:	str	r3, [sp, #656]	; 0x290
   21770:	ldr	r3, [fp, #20]
   21774:	mov	r4, sl
   21778:	cmp	r3, #0
   2177c:	bne	2055c <_start@@Base+0xb380>
   21780:	b	22fac <_start@@Base+0xddd0>
   21784:	sub	r3, ip, #1
   21788:	cmp	r3, #7
   2178c:	addls	pc, pc, r3, lsl #2
   21790:	b	20744 <_start@@Base+0xb568>
   21794:	b	22f9c <_start@@Base+0xddc0>
   21798:	b	22f94 <_start@@Base+0xddb8>
   2179c:	b	22f8c <_start@@Base+0xddb0>
   217a0:	b	22f84 <_start@@Base+0xdda8>
   217a4:	b	22f7c <_start@@Base+0xdda0>
   217a8:	b	22f74 <_start@@Base+0xdd98>
   217ac:	b	20630 <_start@@Base+0xb454>
   217b0:	b	20630 <_start@@Base+0xb454>
   217b4:	mov	r3, #8
   217b8:	mov	r2, sl
   217bc:	mov	r1, r6
   217c0:	mov	r0, fp
   217c4:	bl	18f38 <_start@@Base+0x3d5c>
   217c8:	cmp	r6, r0
   217cc:	mov	r5, r0
   217d0:	beq	21390 <_start@@Base+0xc1b4>
   217d4:	cmp	sl, r0
   217d8:	ldrd	r0, [sp, #160]	; 0xa0
   217dc:	mov	r2, #0
   217e0:	mov	r3, #0
   217e4:	add	r1, sp, #688	; 0x2b0
   217e8:	str	r0, [sp, #676]	; 0x2a4
   217ec:	str	r0, [sp, #680]	; 0x2a8
   217f0:	strd	r2, [r1]
   217f4:	beq	22f28 <_start@@Base+0xdd4c>
   217f8:	str	r1, [sp]
   217fc:	add	r3, sp, #680	; 0x2a8
   21800:	mov	r2, sl
   21804:	mov	r1, r5
   21808:	mov	r0, fp
   2180c:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   21810:	cmp	r5, r0
   21814:	mov	r4, r0
   21818:	beq	22f28 <_start@@Base+0xdd4c>
   2181c:	ldr	r3, [sp, #680]	; 0x2a8
   21820:	cmp	r3, #0
   21824:	bne	2241c <_start@@Base+0xd240>
   21828:	add	r3, sp, #688	; 0x2b0
   2182c:	mov	r1, #0
   21830:	ldrd	r2, [r3]
   21834:	mvn	r0, #0
   21838:	cmp	r3, r1
   2183c:	cmpeq	r2, r0
   21840:	strls	r2, [sp, #676]	; 0x2a4
   21844:	bhi	2282c <_start@@Base+0xd650>
   21848:	cmp	r2, #0
   2184c:	bne	2185c <_start@@Base+0xc680>
   21850:	ldr	r3, [fp, #8]
   21854:	tst	r3, #2
   21858:	beq	213a4 <_start@@Base+0xc1c8>
   2185c:	mov	r3, #4
   21860:	mov	r2, r3
   21864:	mov	r1, #1
   21868:	ldr	r0, [fp]
   2186c:	bl	29488 <flatcc_builder_table_add@@Base>
   21870:	cmp	r0, #0
   21874:	beq	22824 <_start@@Base+0xd648>
   21878:	ldr	r3, [sp, #676]	; 0x2a4
   2187c:	str	r3, [r0]
   21880:	b	213a4 <_start@@Base+0xc1c8>
   21884:	add	r4, r6, #1
   21888:	sub	r3, sl, r4
   2188c:	cmp	r3, #1
   21890:	ble	218a4 <_start@@Base+0xc6c8>
   21894:	ldrb	r3, [r6, #1]
   21898:	cmp	r3, #32
   2189c:	bhi	218b8 <_start@@Base+0xc6dc>
   218a0:	beq	23028 <_start@@Base+0xde4c>
   218a4:	mov	r1, r4
   218a8:	mov	r2, sl
   218ac:	mov	r0, fp
   218b0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   218b4:	mov	r4, r0
   218b8:	cmp	sl, r4
   218bc:	beq	23164 <_start@@Base+0xdf88>
   218c0:	ldrb	r3, [r4]
   218c4:	cmp	r3, #125	; 0x7d
   218c8:	beq	23090 <_start@@Base+0xdeb4>
   218cc:	mov	r3, #1
   218d0:	cmp	sl, r4
   218d4:	str	r3, [sp, #656]	; 0x290
   218d8:	bne	202e0 <_start@@Base+0xb104>
   218dc:	mov	r6, #0
   218e0:	mov	r7, #0
   218e4:	b	2049c <_start@@Base+0xb2c0>
   218e8:	cmp	r2, #0
   218ec:	sbcs	r1, r3, #0
   218f0:	blt	23114 <_start@@Base+0xdf38>
   218f4:	add	r1, sp, #680	; 0x2a8
   218f8:	strd	r2, [r1]
   218fc:	b	216c0 <_start@@Base+0xc4e4>
   21900:	ldrb	r3, [r5, #2]
   21904:	cmp	r3, #32
   21908:	bls	20f08 <_start@@Base+0xbd2c>
   2190c:	add	r6, r5, #2
   21910:	b	20d78 <_start@@Base+0xbb9c>
   21914:	ldrb	r3, [r4, #2]
   21918:	cmp	r3, #32
   2191c:	bls	21584 <_start@@Base+0xc3a8>
   21920:	add	r5, r4, #2
   21924:	b	21420 <_start@@Base+0xc244>
   21928:	mov	r1, r4
   2192c:	mov	r3, #5
   21930:	mov	r2, sl
   21934:	mov	r0, fp
   21938:	bl	18f38 <_start@@Base+0x3d5c>
   2193c:	cmp	r0, r4
   21940:	mov	r1, r0
   21944:	beq	204c0 <_start@@Base+0xb2e4>
   21948:	add	r3, sp, #660	; 0x294
   2194c:	mov	r2, sl
   21950:	mov	r0, fp
   21954:	bl	19d18 <_start@@Base+0x4b3c>
   21958:	ldr	r3, [sp, #660]	; 0x294
   2195c:	cmp	r3, #0
   21960:	mov	r6, r0
   21964:	beq	2197c <_start@@Base+0xc7a0>
   21968:	mov	r1, #1
   2196c:	ldr	r0, [fp]
   21970:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   21974:	cmp	r0, #0
   21978:	bne	20dbc <_start@@Base+0xbbe0>
   2197c:	mov	r4, r6
   21980:	b	2055c <_start@@Base+0xb380>
   21984:	mov	r1, r4
   21988:	mov	r3, #7
   2198c:	mov	r2, sl
   21990:	mov	r0, fp
   21994:	bl	18f38 <_start@@Base+0x3d5c>
   21998:	cmp	r4, r0
   2199c:	mov	r1, r0
   219a0:	beq	20478 <_start@@Base+0xb29c>
   219a4:	ldr	lr, [sp, #664]	; 0x298
   219a8:	ldr	r2, [pc, #-1016]	; 215b8 <_start@@Base+0xc3dc>
   219ac:	mov	ip, #3
   219b0:	add	r2, pc, r2
   219b4:	str	r2, [sp, #8]
   219b8:	ldr	r3, [sp, #528]	; 0x210
   219bc:	stm	sp, {ip, lr}
   219c0:	mov	r2, sl
   219c4:	mov	r0, fp
   219c8:	bl	2f848 <flatcc_json_parser_union_vector@@Base>
   219cc:	mov	r6, r0
   219d0:	b	204d4 <_start@@Base+0xb2f8>
   219d4:	mov	r3, #6
   219d8:	mov	r2, sl
   219dc:	mov	r1, r7
   219e0:	mov	r0, fp
   219e4:	bl	18f38 <_start@@Base+0x3d5c>
   219e8:	cmp	r7, r0
   219ec:	mov	r5, r0
   219f0:	beq	20cb0 <_start@@Base+0xbad4>
   219f4:	mov	r1, #2
   219f8:	ldr	r0, [fp]
   219fc:	bl	27a48 <flatcc_builder_start_table@@Base>
   21a00:	cmp	r0, #0
   21a04:	bne	2142c <_start@@Base+0xc250>
   21a08:	add	r3, sp, #672	; 0x2a0
   21a0c:	mov	r2, sl
   21a10:	mov	r1, r5
   21a14:	mov	r0, fp
   21a18:	bl	17c8c <_start@@Base+0x2ab0>
   21a1c:	ldr	r2, [pc, #-1128]	; 215bc <_start@@Base+0xc3e0>
   21a20:	ldr	r3, [sp, #672]	; 0x2a0
   21a24:	add	r2, pc, r2
   21a28:	add	r2, r2, #636	; 0x27c
   21a2c:	mov	r7, r2
   21a30:	cmp	r3, #0
   21a34:	beq	21d7c <_start@@Base+0xcba0>
   21a38:	mov	r1, r0
   21a3c:	cmp	sl, r1
   21a40:	beq	21db8 <_start@@Base+0xcbdc>
   21a44:	ldrb	r3, [r1]
   21a48:	cmp	r3, #34	; 0x22
   21a4c:	addeq	r1, r1, #1
   21a50:	beq	21a68 <_start@@Base+0xc88c>
   21a54:	mov	r3, #5
   21a58:	mov	r2, sl
   21a5c:	mov	r0, fp
   21a60:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   21a64:	mov	r1, r0
   21a68:	sub	r3, sl, r1
   21a6c:	cmp	r3, #8
   21a70:	bls	21dcc <_start@@Base+0xcbf0>
   21a74:	ldrb	r2, [r1, #7]
   21a78:	mov	r3, #0
   21a7c:	ldrb	r4, [r1, #6]
   21a80:	lsr	r0, r4, #24
   21a84:	str	r0, [sp, #212]	; 0xd4
   21a88:	lsl	r0, r4, #8
   21a8c:	str	r0, [sp, #208]	; 0xd0
   21a90:	ldrd	r4, [sp, #208]	; 0xd0
   21a94:	orr	r4, r4, r2
   21a98:	orr	r5, r5, r3
   21a9c:	mov	r2, r4
   21aa0:	mov	r3, r5
   21aa4:	ldrb	r4, [r1, #5]
   21aa8:	lsr	r0, r4, #16
   21aac:	str	r0, [sp, #116]	; 0x74
   21ab0:	lsl	r0, r4, #16
   21ab4:	str	r0, [sp, #112]	; 0x70
   21ab8:	ldrd	r4, [sp, #112]	; 0x70
   21abc:	orr	r4, r4, r2
   21ac0:	orr	r5, r5, r3
   21ac4:	mov	r2, r4
   21ac8:	mov	r3, r5
   21acc:	ldrb	r4, [r1, #4]
   21ad0:	lsr	r0, r4, #8
   21ad4:	str	r0, [sp, #60]	; 0x3c
   21ad8:	lsl	r0, r4, #24
   21adc:	str	r0, [sp, #56]	; 0x38
   21ae0:	ldrd	r4, [sp, #56]	; 0x38
   21ae4:	orr	r4, r4, r2
   21ae8:	orr	r5, r5, r3
   21aec:	mov	r2, r4
   21af0:	mov	r3, r5
   21af4:	ldrb	r0, [r1, #3]
   21af8:	str	r0, [sp, #76]	; 0x4c
   21afc:	mov	r0, #0
   21b00:	str	r0, [sp, #72]	; 0x48
   21b04:	ldrd	r4, [sp, #72]	; 0x48
   21b08:	orr	r4, r4, r2
   21b0c:	orr	r5, r5, r3
   21b10:	mov	r2, r4
   21b14:	mov	r3, r5
   21b18:	ldrb	r4, [r1, #2]
   21b1c:	lsl	r0, r4, #8
   21b20:	str	r0, [sp, #36]	; 0x24
   21b24:	mov	r0, #0
   21b28:	str	r0, [sp, #32]
   21b2c:	ldrd	r4, [sp, #32]
   21b30:	orr	r4, r4, r2
   21b34:	orr	r5, r5, r3
   21b38:	mov	r2, r4
   21b3c:	mov	r3, r5
   21b40:	ldrb	r4, [r1, #1]
   21b44:	lsl	r0, r4, #16
   21b48:	str	r0, [sp, #28]
   21b4c:	mov	r0, #0
   21b50:	str	r0, [sp, #24]
   21b54:	ldrd	r4, [sp, #24]
   21b58:	orr	r4, r4, r2
   21b5c:	orr	r5, r5, r3
   21b60:	mov	r2, r4
   21b64:	mov	r3, r5
   21b68:	ldrb	r4, [r1]
   21b6c:	mov	r8, #0
   21b70:	orr	r2, r2, r8
   21b74:	lsl	r9, r4, #24
   21b78:	add	r5, pc, #952	; 0x3b8
   21b7c:	ldrd	r4, [r5]
   21b80:	orr	r3, r3, r9
   21b84:	cmp	r3, r5
   21b88:	cmpeq	r2, r4
   21b8c:	bne	21db8 <_start@@Base+0xcbdc>
   21b90:	add	r6, r1, #8
   21b94:	sub	r0, sl, r6
   21b98:	cmp	r0, #8
   21b9c:	bls	21e50 <_start@@Base+0xcc74>
   21ba0:	ldrb	r4, [r1, #15]
   21ba4:	mov	r5, #0
   21ba8:	ldrb	r2, [r1, #14]
   21bac:	lsl	r3, r2, #8
   21bb0:	str	r3, [sp, #432]	; 0x1b0
   21bb4:	add	r3, sp, #432	; 0x1b0
   21bb8:	lsr	ip, r2, #24
   21bbc:	str	ip, [sp, #436]	; 0x1b4
   21bc0:	ldrd	r2, [r3]
   21bc4:	orr	r2, r2, r4
   21bc8:	orr	r3, r3, r5
   21bcc:	mov	r4, r2
   21bd0:	mov	r5, r3
   21bd4:	ldrb	r2, [r1, #13]
   21bd8:	lsl	r3, r2, #16
   21bdc:	str	r3, [sp, #288]	; 0x120
   21be0:	add	r3, sp, #288	; 0x120
   21be4:	lsr	ip, r2, #16
   21be8:	str	ip, [sp, #292]	; 0x124
   21bec:	ldrd	r2, [r3]
   21bf0:	orr	r2, r2, r4
   21bf4:	orr	r3, r3, r5
   21bf8:	mov	r4, r2
   21bfc:	mov	r5, r3
   21c00:	ldrb	r2, [r1, #12]
   21c04:	lsr	ip, r2, #8
   21c08:	lsl	r3, r2, #24
   21c0c:	str	ip, [sp, #220]	; 0xdc
   21c10:	str	r3, [sp, #216]	; 0xd8
   21c14:	ldrd	r2, [sp, #216]	; 0xd8
   21c18:	orr	r2, r2, r4
   21c1c:	orr	r3, r3, r5
   21c20:	ldrb	ip, [r1, #11]
   21c24:	str	ip, [sp, #236]	; 0xec
   21c28:	mov	ip, #0
   21c2c:	str	ip, [sp, #232]	; 0xe8
   21c30:	ldrd	r4, [sp, #232]	; 0xe8
   21c34:	orr	r4, r4, r2
   21c38:	orr	r5, r5, r3
   21c3c:	mov	r2, r4
   21c40:	mov	r3, r5
   21c44:	ldrb	r4, [r1, #10]
   21c48:	lsl	ip, r4, #8
   21c4c:	str	ip, [sp, #172]	; 0xac
   21c50:	mov	ip, #0
   21c54:	str	ip, [sp, #168]	; 0xa8
   21c58:	ldrd	r4, [sp, #168]	; 0xa8
   21c5c:	orr	r4, r4, r2
   21c60:	orr	r5, r5, r3
   21c64:	mov	r2, r4
   21c68:	mov	r3, r5
   21c6c:	ldrb	r4, [r1, #9]
   21c70:	lsl	ip, r4, #16
   21c74:	str	ip, [sp, #156]	; 0x9c
   21c78:	mov	ip, #0
   21c7c:	str	ip, [sp, #152]	; 0x98
   21c80:	ldrd	r4, [sp, #152]	; 0x98
   21c84:	orr	r4, r4, r2
   21c88:	orr	r5, r5, r3
   21c8c:	mov	r2, r4
   21c90:	mov	r3, r5
   21c94:	ldrb	r4, [r1, #8]
   21c98:	lsl	ip, r4, #24
   21c9c:	str	ip, [sp, #92]	; 0x5c
   21ca0:	mov	ip, #0
   21ca4:	str	ip, [sp, #88]	; 0x58
   21ca8:	ldrd	r4, [sp, #88]	; 0x58
   21cac:	orr	r4, r4, r2
   21cb0:	orr	r5, r5, r3
   21cb4:	mov	r2, r4
   21cb8:	mov	r3, r5
   21cbc:	add	r5, pc, #636	; 0x27c
   21cc0:	ldrd	r4, [r5]
   21cc4:	cmp	r3, r5
   21cc8:	cmpeq	r2, r4
   21ccc:	beq	21f6c <_start@@Base+0xcd90>
   21cd0:	add	r5, pc, #624	; 0x270
   21cd4:	ldrd	r4, [r5]
   21cd8:	bic	r2, r2, #255	; 0xff
   21cdc:	cmp	r3, r5
   21ce0:	cmpeq	r2, r4
   21ce4:	bne	21cf0 <_start@@Base+0xcb14>
   21ce8:	cmp	r0, #7
   21cec:	bgt	22270 <_start@@Base+0xd094>
   21cf0:	mov	r1, r6
   21cf4:	mov	r2, sl
   21cf8:	mov	r0, fp
   21cfc:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   21d00:	mov	r4, r0
   21d04:	sub	r3, sl, r4
   21d08:	cmp	r3, #1
   21d0c:	ble	21d20 <_start@@Base+0xcb44>
   21d10:	ldrb	r3, [r4]
   21d14:	cmp	r3, #32
   21d18:	bhi	21d34 <_start@@Base+0xcb58>
   21d1c:	beq	21f0c <_start@@Base+0xcd30>
   21d20:	mov	r1, r4
   21d24:	mov	r2, sl
   21d28:	mov	r0, fp
   21d2c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   21d30:	mov	r4, r0
   21d34:	cmp	sl, r4
   21d38:	beq	21f24 <_start@@Base+0xcd48>
   21d3c:	ldrb	r3, [r4]
   21d40:	cmp	r3, #44	; 0x2c
   21d44:	beq	2219c <_start@@Base+0xcfc0>
   21d48:	mov	r3, #0
   21d4c:	str	r3, [sp, #672]	; 0x2a0
   21d50:	ldrb	r3, [r4]
   21d54:	cmp	r3, #125	; 0x7d
   21d58:	beq	21ed4 <_start@@Base+0xccf8>
   21d5c:	mov	r3, #10
   21d60:	mov	r1, r4
   21d64:	mov	r2, sl
   21d68:	mov	r0, fp
   21d6c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   21d70:	ldr	r3, [sp, #672]	; 0x2a0
   21d74:	cmp	r3, #0
   21d78:	bne	21a38 <_start@@Base+0xc85c>
   21d7c:	mov	r5, r0
   21d80:	ldr	r3, [fp, #20]
   21d84:	cmp	r3, #0
   21d88:	bne	2142c <_start@@Base+0xc250>
   21d8c:	ldr	r0, [fp]
   21d90:	bl	2843c <flatcc_builder_end_table@@Base>
   21d94:	subs	r4, r0, #0
   21d98:	beq	2142c <_start@@Base+0xc250>
   21d9c:	mov	r1, #2
   21da0:	ldr	r0, [fp]
   21da4:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   21da8:	cmp	r0, #0
   21dac:	beq	21614 <_start@@Base+0xc438>
   21db0:	str	r4, [r0]
   21db4:	b	20cc4 <_start@@Base+0xbae8>
   21db8:	mov	r2, sl
   21dbc:	mov	r0, fp
   21dc0:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   21dc4:	mov	r4, r0
   21dc8:	b	21d04 <_start@@Base+0xcb28>
   21dcc:	sub	r3, r3, #1
   21dd0:	cmp	r3, #7
   21dd4:	addls	pc, pc, r3, lsl #2
   21dd8:	b	21db8 <_start@@Base+0xcbdc>
   21ddc:	b	21e44 <_start@@Base+0xcc68>
   21de0:	b	21e38 <_start@@Base+0xcc5c>
   21de4:	b	21e2c <_start@@Base+0xcc50>
   21de8:	b	21e20 <_start@@Base+0xcc44>
   21dec:	b	21e14 <_start@@Base+0xcc38>
   21df0:	b	21e08 <_start@@Base+0xcc2c>
   21df4:	b	21dfc <_start@@Base+0xcc20>
   21df8:	b	21a74 <_start@@Base+0xc898>
   21dfc:	mov	r2, #0
   21e00:	mov	r3, #0
   21e04:	b	21a7c <_start@@Base+0xc8a0>
   21e08:	mov	r2, #0
   21e0c:	mov	r3, #0
   21e10:	b	21aa4 <_start@@Base+0xc8c8>
   21e14:	mov	r2, #0
   21e18:	mov	r3, #0
   21e1c:	b	21acc <_start@@Base+0xc8f0>
   21e20:	mov	r2, #0
   21e24:	mov	r3, #0
   21e28:	b	21af4 <_start@@Base+0xc918>
   21e2c:	mov	r2, #0
   21e30:	mov	r3, #0
   21e34:	b	21b18 <_start@@Base+0xc93c>
   21e38:	mov	r2, #0
   21e3c:	mov	r3, #0
   21e40:	b	21b40 <_start@@Base+0xc964>
   21e44:	mov	r2, #0
   21e48:	mov	r3, #0
   21e4c:	b	21b68 <_start@@Base+0xc98c>
   21e50:	sub	r3, r0, #1
   21e54:	cmp	r3, #7
   21e58:	addls	pc, pc, r3, lsl #2
   21e5c:	b	21cf0 <_start@@Base+0xcb14>
   21e60:	b	21ec8 <_start@@Base+0xccec>
   21e64:	b	21ebc <_start@@Base+0xcce0>
   21e68:	b	21eb0 <_start@@Base+0xccd4>
   21e6c:	b	21ea4 <_start@@Base+0xccc8>
   21e70:	b	21e98 <_start@@Base+0xccbc>
   21e74:	b	21e8c <_start@@Base+0xccb0>
   21e78:	b	21e80 <_start@@Base+0xcca4>
   21e7c:	b	21ba0 <_start@@Base+0xc9c4>
   21e80:	mov	r4, #0
   21e84:	mov	r5, #0
   21e88:	b	21ba8 <_start@@Base+0xc9cc>
   21e8c:	mov	r4, #0
   21e90:	mov	r5, #0
   21e94:	b	21bd4 <_start@@Base+0xc9f8>
   21e98:	mov	r4, #0
   21e9c:	mov	r5, #0
   21ea0:	b	21c00 <_start@@Base+0xca24>
   21ea4:	mov	r2, #0
   21ea8:	mov	r3, #0
   21eac:	b	21c20 <_start@@Base+0xca44>
   21eb0:	mov	r2, #0
   21eb4:	mov	r3, #0
   21eb8:	b	21c44 <_start@@Base+0xca68>
   21ebc:	mov	r2, #0
   21ec0:	mov	r3, #0
   21ec4:	b	21c6c <_start@@Base+0xca90>
   21ec8:	mov	r2, #0
   21ecc:	mov	r3, #0
   21ed0:	b	21c94 <_start@@Base+0xcab8>
   21ed4:	add	r0, r4, #1
   21ed8:	sub	r3, sl, r0
   21edc:	cmp	r3, #1
   21ee0:	ble	21ef4 <_start@@Base+0xcd18>
   21ee4:	ldrb	r3, [r4, #1]
   21ee8:	cmp	r3, #32
   21eec:	bhi	21d7c <_start@@Base+0xcba0>
   21ef0:	beq	22364 <_start@@Base+0xd188>
   21ef4:	mov	r1, r0
   21ef8:	mov	r2, sl
   21efc:	mov	r0, fp
   21f00:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   21f04:	ldr	r3, [sp, #672]	; 0x2a0
   21f08:	b	21a30 <_start@@Base+0xc854>
   21f0c:	ldrb	r3, [r4, #1]
   21f10:	cmp	r3, #32
   21f14:	addhi	r4, r4, #1
   21f18:	bls	21d20 <_start@@Base+0xcb44>
   21f1c:	cmp	sl, r4
   21f20:	bne	21d3c <_start@@Base+0xcb60>
   21f24:	mov	r3, #0
   21f28:	str	r3, [sp, #672]	; 0x2a0
   21f2c:	mov	r5, sl
   21f30:	b	21d80 <_start@@Base+0xcba4>
   21f34:	nop			; (mov r0, r0)
   21f38:	svcpl	0x00626262
   21f3c:	cmnvs	r1, r1, ror #2
   21f40:	cmnvs	r2, pc, asr r4
   21f44:	subsvs	r7, pc, #116, 6	; 0xd0000001
   21f48:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   21f4c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   21f50:	movwvc	r0, #0
   21f54:	cmnvc	r4, #112, 10	; 0x1c000000
   21f58:	andeq	r1, r3, ip, ror #21
   21f5c:	strdeq	r1, [r3], -r0
   21f60:	andeq	r0, r0, ip, ror #26
   21f64:			; <UNDEFINED> instruction: 0xffff2f78
   21f68:	ldrdeq	r1, [r3], -r8
   21f6c:	add	r6, r1, #16
   21f70:	sub	r0, sl, r6
   21f74:	cmp	r0, #8
   21f78:	bls	221ec <_start@@Base+0xd010>
   21f7c:	ldrb	r4, [r1, #23]
   21f80:	mov	r5, #0
   21f84:	ldrb	r2, [r1, #22]
   21f88:	lsl	r3, r2, #8
   21f8c:	str	r3, [sp, #616]	; 0x268
   21f90:	add	r3, sp, #616	; 0x268
   21f94:	lsr	ip, r2, #24
   21f98:	str	ip, [sp, #620]	; 0x26c
   21f9c:	ldrd	r2, [r3]
   21fa0:	orr	r2, r2, r4
   21fa4:	orr	r3, r3, r5
   21fa8:	mov	r4, r2
   21fac:	mov	r5, r3
   21fb0:	ldrb	r2, [r1, #21]
   21fb4:	lsl	r3, r2, #16
   21fb8:	str	r3, [sp, #576]	; 0x240
   21fbc:	add	r3, sp, #576	; 0x240
   21fc0:	lsr	ip, r2, #16
   21fc4:	str	ip, [sp, #580]	; 0x244
   21fc8:	ldrd	r2, [r3]
   21fcc:	orr	r2, r2, r4
   21fd0:	orr	r3, r3, r5
   21fd4:	mov	r4, r2
   21fd8:	mov	r5, r3
   21fdc:	ldrb	r2, [r1, #20]
   21fe0:	lsl	r3, r2, #24
   21fe4:	str	r3, [sp, #544]	; 0x220
   21fe8:	add	r3, sp, #544	; 0x220
   21fec:	lsr	ip, r2, #8
   21ff0:	str	ip, [sp, #548]	; 0x224
   21ff4:	ldrd	r2, [r3]
   21ff8:	orr	r2, r2, r4
   21ffc:	orr	r3, r3, r5
   22000:	ldrb	ip, [r1, #19]
   22004:	str	ip, [sp, #556]	; 0x22c
   22008:	mov	ip, #0
   2200c:	str	ip, [sp, #552]	; 0x228
   22010:	add	ip, sp, #552	; 0x228
   22014:	ldrd	r4, [ip]
   22018:	orr	r4, r4, r2
   2201c:	orr	r5, r5, r3
   22020:	mov	r2, r4
   22024:	mov	r3, r5
   22028:	ldrb	r4, [r1, #18]
   2202c:	lsl	ip, r4, #8
   22030:	str	ip, [sp, #516]	; 0x204
   22034:	mov	ip, #0
   22038:	str	ip, [sp, #512]	; 0x200
   2203c:	add	ip, sp, #512	; 0x200
   22040:	ldrd	r4, [ip]
   22044:	orr	r4, r4, r2
   22048:	orr	r5, r5, r3
   2204c:	mov	r2, r4
   22050:	mov	r3, r5
   22054:	ldrb	r4, [r1, #17]
   22058:	lsl	ip, r4, #16
   2205c:	str	ip, [sp, #468]	; 0x1d4
   22060:	mov	ip, #0
   22064:	str	ip, [sp, #464]	; 0x1d0
   22068:	add	ip, sp, #464	; 0x1d0
   2206c:	ldrd	r4, [ip]
   22070:	orr	r4, r4, r2
   22074:	orr	r5, r5, r3
   22078:	mov	r2, r4
   2207c:	mov	r3, r5
   22080:	ldrb	r4, [r1, #16]
   22084:	lsl	r1, r4, #24
   22088:	str	r1, [sp, #428]	; 0x1ac
   2208c:	mov	r1, #0
   22090:	str	r1, [sp, #424]	; 0x1a8
   22094:	add	r1, sp, #424	; 0x1a8
   22098:	ldrd	r4, [r1]
   2209c:	orr	r4, r4, r2
   220a0:	orr	r5, r5, r3
   220a4:	mov	r3, r5
   220a8:	and	r2, r4, #-16777216	; 0xff000000
   220ac:	sub	r5, pc, #356	; 0x164
   220b0:	ldrd	r4, [r5]
   220b4:	cmp	r3, r5
   220b8:	cmpeq	r2, r4
   220bc:	bne	21cf0 <_start@@Base+0xcb14>
   220c0:	cmp	r0, #5
   220c4:	ble	21cf0 <_start@@Base+0xcb14>
   220c8:	mov	r3, #5
   220cc:	mov	r2, sl
   220d0:	mov	r1, r6
   220d4:	mov	r0, fp
   220d8:	bl	18f38 <_start@@Base+0x3d5c>
   220dc:	cmp	r6, r0
   220e0:	mov	r5, r0
   220e4:	beq	21cf0 <_start@@Base+0xcb14>
   220e8:	add	r1, sp, #424	; 0x1a8
   220ec:	cmp	sl, r0
   220f0:	ldrd	r0, [r1]
   220f4:	mov	r2, #0
   220f8:	mov	r3, #0
   220fc:	add	r1, sp, #688	; 0x2b0
   22100:	str	r0, [sp, #676]	; 0x2a4
   22104:	str	r0, [sp, #680]	; 0x2a8
   22108:	strd	r2, [r1]
   2210c:	beq	23058 <_start@@Base+0xde7c>
   22110:	str	r1, [sp]
   22114:	add	r3, sp, #680	; 0x2a8
   22118:	mov	r2, sl
   2211c:	mov	r1, r5
   22120:	mov	r0, fp
   22124:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   22128:	cmp	r5, r0
   2212c:	mov	r4, r0
   22130:	beq	23058 <_start@@Base+0xde7c>
   22134:	ldr	r3, [sp, #680]	; 0x2a8
   22138:	cmp	r3, #0
   2213c:	bne	22ed4 <_start@@Base+0xdcf8>
   22140:	add	r3, sp, #688	; 0x2b0
   22144:	mov	r1, #0
   22148:	ldrd	r2, [r3]
   2214c:	mvn	r0, #0
   22150:	cmp	r3, r1
   22154:	cmpeq	r2, r0
   22158:	strls	r2, [sp, #676]	; 0x2a4
   2215c:	bhi	22f58 <_start@@Base+0xdd7c>
   22160:	cmp	r2, #0
   22164:	bne	22174 <_start@@Base+0xcf98>
   22168:	ldr	r3, [fp, #8]
   2216c:	tst	r3, #2
   22170:	beq	21d04 <_start@@Base+0xcb28>
   22174:	mov	r3, #4
   22178:	mov	r2, r3
   2217c:	mov	r1, #1
   22180:	ldr	r0, [fp]
   22184:	bl	29488 <flatcc_builder_table_add@@Base>
   22188:	cmp	r0, #0
   2218c:	beq	22824 <_start@@Base+0xd648>
   22190:	ldr	r3, [sp, #676]	; 0x2a4
   22194:	str	r3, [r0]
   22198:	b	21d04 <_start@@Base+0xcb28>
   2219c:	add	r1, r4, #1
   221a0:	sub	r3, sl, r1
   221a4:	cmp	r3, #1
   221a8:	ble	221bc <_start@@Base+0xcfe0>
   221ac:	ldrb	r3, [r4, #1]
   221b0:	cmp	r3, #32
   221b4:	bhi	221cc <_start@@Base+0xcff0>
   221b8:	beq	22378 <_start@@Base+0xd19c>
   221bc:	mov	r2, sl
   221c0:	mov	r0, fp
   221c4:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   221c8:	mov	r1, r0
   221cc:	cmp	sl, r1
   221d0:	beq	22390 <_start@@Base+0xd1b4>
   221d4:	ldrb	r3, [r1]
   221d8:	cmp	r3, #125	; 0x7d
   221dc:	beq	224ec <_start@@Base+0xd310>
   221e0:	mov	r3, #1
   221e4:	str	r3, [sp, #672]	; 0x2a0
   221e8:	b	21a3c <_start@@Base+0xc860>
   221ec:	sub	r3, r0, #1
   221f0:	cmp	r3, #7
   221f4:	addls	pc, pc, r3, lsl #2
   221f8:	b	21cf0 <_start@@Base+0xcb14>
   221fc:	b	22264 <_start@@Base+0xd088>
   22200:	b	22258 <_start@@Base+0xd07c>
   22204:	b	2224c <_start@@Base+0xd070>
   22208:	b	22240 <_start@@Base+0xd064>
   2220c:	b	22234 <_start@@Base+0xd058>
   22210:	b	22228 <_start@@Base+0xd04c>
   22214:	b	2221c <_start@@Base+0xd040>
   22218:	b	21f7c <_start@@Base+0xcda0>
   2221c:	mov	r4, #0
   22220:	mov	r5, #0
   22224:	b	21f84 <_start@@Base+0xcda8>
   22228:	mov	r4, #0
   2222c:	mov	r5, #0
   22230:	b	21fb0 <_start@@Base+0xcdd4>
   22234:	mov	r4, #0
   22238:	mov	r5, #0
   2223c:	b	21fdc <_start@@Base+0xce00>
   22240:	mov	r2, #0
   22244:	mov	r3, #0
   22248:	b	22000 <_start@@Base+0xce24>
   2224c:	mov	r2, #0
   22250:	mov	r3, #0
   22254:	b	22028 <_start@@Base+0xce4c>
   22258:	mov	r2, #0
   2225c:	mov	r3, #0
   22260:	b	22054 <_start@@Base+0xce78>
   22264:	mov	r2, #0
   22268:	mov	r3, #0
   2226c:	b	22080 <_start@@Base+0xcea4>
   22270:	mov	r3, #7
   22274:	mov	r2, sl
   22278:	mov	r1, r6
   2227c:	mov	r0, fp
   22280:	bl	18f38 <_start@@Base+0x3d5c>
   22284:	cmp	r6, r0
   22288:	mov	r5, r0
   2228c:	beq	21cf0 <_start@@Base+0xcb14>
   22290:	ldr	r1, [sp, #88]	; 0x58
   22294:	mov	r2, #0
   22298:	mov	r3, #0
   2229c:	str	r1, [sp, #676]	; 0x2a4
   222a0:	add	r1, sp, #680	; 0x2a8
   222a4:	cmp	sl, r0
   222a8:	strd	r2, [r1]
   222ac:	add	r1, sp, #688	; 0x2b0
   222b0:	strd	r2, [r1]
   222b4:	beq	22e34 <_start@@Base+0xdc58>
   222b8:	str	r1, [sp]
   222bc:	add	r3, sp, #676	; 0x2a4
   222c0:	mov	r1, r0
   222c4:	mov	r2, sl
   222c8:	mov	r0, fp
   222cc:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   222d0:	cmp	r5, r0
   222d4:	mov	r4, r0
   222d8:	beq	22e34 <_start@@Base+0xdc58>
   222dc:	ldr	r1, [sp, #676]	; 0x2a4
   222e0:	add	r3, sp, #688	; 0x2b0
   222e4:	cmp	r1, #0
   222e8:	ldrd	r2, [r3]
   222ec:	beq	2234c <_start@@Base+0xd170>
   222f0:	cmp	r3, #-2147483648	; 0x80000000
   222f4:	cmpeq	r2, #0
   222f8:	bhi	223f0 <_start@@Base+0xd214>
   222fc:	rsbs	r2, r2, #0
   22300:	rsc	r3, r3, #0
   22304:	add	r1, sp, #680	; 0x2a8
   22308:	strd	r2, [r1]
   2230c:	orrs	r3, r2, r3
   22310:	bne	22320 <_start@@Base+0xd144>
   22314:	ldr	r3, [fp, #8]
   22318:	tst	r3, #2
   2231c:	beq	21d04 <_start@@Base+0xcb28>
   22320:	mov	r3, #8
   22324:	mov	r2, r3
   22328:	mov	r1, #0
   2232c:	ldr	r0, [fp]
   22330:	bl	29488 <flatcc_builder_table_add@@Base>
   22334:	cmp	r0, #0
   22338:	beq	22824 <_start@@Base+0xd648>
   2233c:	add	r3, sp, #680	; 0x2a8
   22340:	ldrd	r2, [r3]
   22344:	strd	r2, [r0]
   22348:	b	21d04 <_start@@Base+0xcb28>
   2234c:	cmp	r2, #0
   22350:	sbcs	r1, r3, #0
   22354:	blt	2303c <_start@@Base+0xde60>
   22358:	add	r1, sp, #680	; 0x2a8
   2235c:	strd	r2, [r1]
   22360:	b	2230c <_start@@Base+0xd130>
   22364:	ldrb	r3, [r4, #2]
   22368:	cmp	r3, #32
   2236c:	bls	21ef4 <_start@@Base+0xcd18>
   22370:	add	r5, r4, #2
   22374:	b	21d80 <_start@@Base+0xcba4>
   22378:	ldrb	r3, [r4, #2]
   2237c:	cmp	r3, #32
   22380:	addhi	r1, r4, #2
   22384:	bls	221bc <_start@@Base+0xcfe0>
   22388:	cmp	sl, r1
   2238c:	bne	221d4 <_start@@Base+0xcff8>
   22390:	mov	ip, #0
   22394:	mov	r3, #10
   22398:	mov	r2, sl
   2239c:	mov	r1, sl
   223a0:	mov	r0, fp
   223a4:	str	ip, [sp, #672]	; 0x2a0
   223a8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   223ac:	ldr	r3, [sp, #672]	; 0x2a0
   223b0:	b	21a30 <_start@@Base+0xc854>
   223b4:	ldrb	r3, [r5, #2]
   223b8:	cmp	r3, #32
   223bc:	addhi	r0, r5, #2
   223c0:	bls	20f88 <_start@@Base+0xbdac>
   223c4:	cmp	sl, r0
   223c8:	bne	20fa0 <_start@@Base+0xbdc4>
   223cc:	mov	ip, #0
   223d0:	mov	r3, #10
   223d4:	mov	r2, sl
   223d8:	mov	r1, sl
   223dc:	mov	r0, fp
   223e0:	str	ip, [sp, #668]	; 0x29c
   223e4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   223e8:	ldr	r3, [sp, #668]	; 0x29c
   223ec:	b	20834 <_start@@Base+0xb658>
   223f0:	mov	r1, r0
   223f4:	mov	r3, #8
   223f8:	mov	r2, sl
   223fc:	mov	r0, fp
   22400:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   22404:	mov	r4, r0
   22408:	cmp	r5, r4
   2240c:	beq	22e34 <_start@@Base+0xdc58>
   22410:	add	r3, sp, #680	; 0x2a8
   22414:	ldrd	r2, [r3]
   22418:	b	2230c <_start@@Base+0xd130>
   2241c:	mov	r1, r0
   22420:	mov	r3, #8
   22424:	mov	r2, sl
   22428:	mov	r0, fp
   2242c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   22430:	mov	r4, r0
   22434:	cmp	r5, r4
   22438:	beq	22f28 <_start@@Base+0xdd4c>
   2243c:	ldr	r2, [sp, #676]	; 0x2a4
   22440:	b	21848 <_start@@Base+0xc66c>
   22444:	ldrb	r3, [r4, #2]
   22448:	cmp	r3, #32
   2244c:	addhi	r1, r4, #2
   22450:	bls	21720 <_start@@Base+0xc544>
   22454:	cmp	sl, r1
   22458:	bne	21738 <_start@@Base+0xc55c>
   2245c:	mov	ip, #0
   22460:	mov	r3, #10
   22464:	mov	r2, sl
   22468:	mov	r1, sl
   2246c:	mov	r0, fp
   22470:	str	ip, [sp, #672]	; 0x2a0
   22474:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   22478:	ldr	r3, [sp, #672]	; 0x2a0
   2247c:	b	210b0 <_start@@Base+0xbed4>
   22480:	mov	r1, r5
   22484:	mov	r3, #4
   22488:	mov	r2, sl
   2248c:	mov	r0, fp
   22490:	bl	18f38 <_start@@Base+0x3d5c>
   22494:	cmp	r5, r0
   22498:	mov	r1, r0
   2249c:	beq	20744 <_start@@Base+0xb568>
   224a0:	ldr	r3, [pc, #-1344]	; 21f68 <_start@@Base+0xcd8c>
   224a4:	ldr	lr, [sp, #664]	; 0x298
   224a8:	add	r3, pc, r3
   224ac:	add	r3, r3, #524	; 0x20c
   224b0:	ldr	ip, [pc, #-1364]	; 21f64 <_start@@Base+0xcd88>
   224b4:	ldr	r2, [pc, #-1372]	; 21f60 <_start@@Base+0xcd84>
   224b8:	str	r3, [sp, #8]
   224bc:	mov	r3, #3
   224c0:	add	ip, pc, ip
   224c4:	add	r2, pc, r2
   224c8:	str	r2, [sp, #12]
   224cc:	stm	sp, {r3, lr}
   224d0:	str	ip, [sp, #16]
   224d4:	ldr	r3, [sp, #520]	; 0x208
   224d8:	mov	r2, sl
   224dc:	mov	r0, fp
   224e0:	bl	2f914 <flatcc_json_parser_union_type_vector@@Base>
   224e4:	mov	r6, r0
   224e8:	b	204d4 <_start@@Base+0xb2f8>
   224ec:	mov	r0, r1
   224f0:	add	r1, r1, #1
   224f4:	sub	r3, sl, r1
   224f8:	cmp	r3, #1
   224fc:	mov	r3, #0
   22500:	str	r3, [sp, #672]	; 0x2a0
   22504:	ble	22518 <_start@@Base+0xd33c>
   22508:	ldrb	r3, [r0, #1]
   2250c:	cmp	r3, #32
   22510:	bhi	23088 <_start@@Base+0xdeac>
   22514:	beq	22fe4 <_start@@Base+0xde08>
   22518:	mov	r2, sl
   2251c:	mov	r0, fp
   22520:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   22524:	ldr	r3, [sp, #672]	; 0x2a0
   22528:	b	21a30 <_start@@Base+0xc854>
   2252c:	mov	r3, #5
   22530:	mov	r2, sl
   22534:	mov	r1, r7
   22538:	mov	r0, fp
   2253c:	bl	18f38 <_start@@Base+0x3d5c>
   22540:	cmp	r7, r0
   22544:	mov	r5, r0
   22548:	beq	20c8c <_start@@Base+0xbab0>
   2254c:	mov	r1, #9
   22550:	ldr	r0, [fp]
   22554:	bl	27a48 <flatcc_builder_start_table@@Base>
   22558:	cmp	r0, #0
   2255c:	bne	2142c <_start@@Base+0xc250>
   22560:	add	r3, sp, #676	; 0x2a4
   22564:	mov	r1, r5
   22568:	mov	r2, sl
   2256c:	mov	r0, fp
   22570:	mov	r6, r3
   22574:	bl	17c8c <_start@@Base+0x2ab0>
   22578:	ldr	r3, [sp, #676]	; 0x2a4
   2257c:	cmp	r3, #0
   22580:	mov	r5, r0
   22584:	beq	22888 <_start@@Base+0xd6ac>
   22588:	ldr	r2, [pc, #-1588]	; 21f5c <_start@@Base+0xcd80>
   2258c:	ldr	r3, [pc, #-1596]	; 21f58 <_start@@Base+0xcd7c>
   22590:	add	r2, pc, r2
   22594:	add	r3, pc, r3
   22598:	mov	r4, r0
   2259c:	mov	r5, r6
   225a0:	add	r2, r2, #624	; 0x270
   225a4:	add	r3, r3, #612	; 0x264
   225a8:	str	r2, [sp, #652]	; 0x28c
   225ac:	str	r3, [sp, #528]	; 0x210
   225b0:	cmp	sl, r4
   225b4:	beq	22848 <_start@@Base+0xd66c>
   225b8:	ldrb	r3, [r4]
   225bc:	cmp	r3, #34	; 0x22
   225c0:	addeq	r4, r4, #1
   225c4:	beq	225e0 <_start@@Base+0xd404>
   225c8:	mov	r1, r4
   225cc:	mov	r3, #5
   225d0:	mov	r2, sl
   225d4:	mov	r0, fp
   225d8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   225dc:	mov	r4, r0
   225e0:	sub	ip, sl, r4
   225e4:	cmp	ip, #8
   225e8:	bls	2296c <_start@@Base+0xd790>
   225ec:	ldrb	r2, [r4, #7]
   225f0:	mov	r3, #0
   225f4:	ldrb	r0, [r4, #6]
   225f8:	lsl	r1, r0, #8
   225fc:	str	r1, [sp, #480]	; 0x1e0
   22600:	add	r1, sp, #480	; 0x1e0
   22604:	lsr	lr, r0, #24
   22608:	str	lr, [sp, #484]	; 0x1e4
   2260c:	ldrd	r0, [r1]
   22610:	orr	r0, r0, r2
   22614:	orr	r1, r1, r3
   22618:	mov	r2, r0
   2261c:	mov	r3, r1
   22620:	ldrb	r0, [r4, #5]
   22624:	lsl	r1, r0, #16
   22628:	str	r1, [sp, #408]	; 0x198
   2262c:	add	r1, sp, #408	; 0x198
   22630:	lsr	lr, r0, #16
   22634:	str	lr, [sp, #412]	; 0x19c
   22638:	ldrd	r0, [r1]
   2263c:	orr	r0, r0, r2
   22640:	orr	r1, r1, r3
   22644:	mov	r2, r0
   22648:	mov	r3, r1
   2264c:	ldrb	r0, [r4, #4]
   22650:	lsl	r1, r0, #24
   22654:	str	r1, [sp, #320]	; 0x140
   22658:	add	r1, sp, #320	; 0x140
   2265c:	lsr	lr, r0, #8
   22660:	str	lr, [sp, #324]	; 0x144
   22664:	ldrd	r0, [r1]
   22668:	orr	r0, r0, r2
   2266c:	orr	r1, r1, r3
   22670:	mov	r2, r0
   22674:	mov	r3, r1
   22678:	ldrb	r1, [r4, #3]
   2267c:	str	r1, [sp, #356]	; 0x164
   22680:	mov	r1, #0
   22684:	str	r1, [sp, #352]	; 0x160
   22688:	add	r1, sp, #352	; 0x160
   2268c:	ldrd	r0, [r1]
   22690:	orr	r0, r0, r2
   22694:	orr	r1, r1, r3
   22698:	mov	r2, r0
   2269c:	mov	r3, r1
   226a0:	ldrb	r0, [r4, #2]
   226a4:	lsl	r1, r0, #8
   226a8:	str	r1, [sp, #276]	; 0x114
   226ac:	mov	r1, #0
   226b0:	str	r1, [sp, #272]	; 0x110
   226b4:	add	r1, sp, #272	; 0x110
   226b8:	ldrd	r0, [r1]
   226bc:	orr	r0, r0, r2
   226c0:	orr	r1, r1, r3
   226c4:	mov	r2, r0
   226c8:	mov	r3, r1
   226cc:	ldrb	r0, [r4, #1]
   226d0:	lsl	r1, r0, #16
   226d4:	str	r1, [sp, #244]	; 0xf4
   226d8:	mov	r1, #0
   226dc:	str	r1, [sp, #240]	; 0xf0
   226e0:	ldrd	r0, [sp, #240]	; 0xf0
   226e4:	orr	r0, r0, r2
   226e8:	orr	r1, r1, r3
   226ec:	mov	r2, r0
   226f0:	mov	r3, r1
   226f4:	ldrb	r6, [r4]
   226f8:	add	r1, pc, #944	; 0x3b0
   226fc:	ldrd	r0, [r1]
   22700:	lsl	lr, r6, #24
   22704:	str	lr, [sp, #180]	; 0xb4
   22708:	mov	lr, #0
   2270c:	str	lr, [sp, #176]	; 0xb0
   22710:	ldrd	r6, [sp, #176]	; 0xb0
   22714:	orr	r7, r7, r3
   22718:	orr	r6, r6, r2
   2271c:	cmp	r7, r1
   22720:	cmpeq	r6, r0
   22724:	mov	r2, r6
   22728:	bls	228b0 <_start@@Base+0xd6d4>
   2272c:	add	r1, pc, #900	; 0x384
   22730:	ldrd	r0, [r1]
   22734:	cmp	r7, r1
   22738:	cmpeq	r6, r0
   2273c:	beq	229f0 <_start@@Base+0xd814>
   22740:	add	r1, pc, #888	; 0x378
   22744:	ldrd	r0, [r1]
   22748:	mov	r6, #0
   2274c:	cmp	r7, r1
   22750:	cmpeq	r6, r0
   22754:	beq	22bbc <_start@@Base+0xd9e0>
   22758:	add	r1, pc, #872	; 0x368
   2275c:	ldrd	r0, [r1]
   22760:	cmp	r7, r1
   22764:	cmpeq	r2, r0
   22768:	bne	2284c <_start@@Base+0xd670>
   2276c:	cmp	ip, #8
   22770:	bgt	22d1c <_start@@Base+0xdb40>
   22774:	add	r4, r4, #8
   22778:	mov	r0, r4
   2277c:	mov	r1, sl
   22780:	bl	15308 <_start@@Base+0x12c>
   22784:	mov	r0, #0
   22788:	and	r1, r1, #-16777216	; 0xff000000
   2278c:	cmp	r1, #889192448	; 0x35000000
   22790:	cmpeq	r0, #0
   22794:	bne	2284c <_start@@Base+0xd670>
   22798:	sub	r3, sl, r4
   2279c:	cmp	r3, #1
   227a0:	ble	2284c <_start@@Base+0xd670>
   227a4:	mov	r3, #1
   227a8:	mov	r2, sl
   227ac:	mov	r1, r4
   227b0:	mov	r0, fp
   227b4:	bl	18f38 <_start@@Base+0x3d5c>
   227b8:	cmp	r4, r0
   227bc:	mov	r7, r0
   227c0:	beq	2284c <_start@@Base+0xd670>
   227c4:	add	r6, sp, #696	; 0x2b8
   227c8:	mov	r3, #0
   227cc:	str	r3, [r6, #-8]!
   227d0:	mov	r1, r0
   227d4:	mov	r2, sl
   227d8:	mov	r3, r6
   227dc:	mov	r0, fp
   227e0:	bl	17950 <_start@@Base+0x2774>
   227e4:	cmp	r7, r0
   227e8:	mov	r4, r0
   227ec:	beq	231d4 <_start@@Base+0xdff8>
   227f0:	ldr	r3, [sp, #688]	; 0x2b0
   227f4:	cmp	r3, #0
   227f8:	bne	22808 <_start@@Base+0xd62c>
   227fc:	ldr	r3, [fp, #8]
   22800:	tst	r3, #2
   22804:	beq	22860 <_start@@Base+0xd684>
   22808:	mov	r3, #4
   2280c:	mov	r2, r3
   22810:	mov	r1, #8
   22814:	ldr	r0, [fp]
   22818:	bl	29488 <flatcc_builder_table_add@@Base>
   2281c:	cmp	r0, #0
   22820:	bne	22bb0 <_start@@Base+0xd9d4>
   22824:	mov	r5, r4
   22828:	b	2142c <_start@@Base+0xc250>
   2282c:	mov	r1, r4
   22830:	mov	r3, #7
   22834:	mov	r2, sl
   22838:	mov	r0, fp
   2283c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   22840:	mov	r4, r0
   22844:	b	22434 <_start@@Base+0xd258>
   22848:	mov	r4, sl
   2284c:	mov	r1, r4
   22850:	mov	r2, sl
   22854:	mov	r0, fp
   22858:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   2285c:	mov	r4, r0
   22860:	mov	r1, r4
   22864:	mov	r3, r5
   22868:	mov	r2, sl
   2286c:	mov	r0, fp
   22870:	bl	19b94 <_start@@Base+0x49b8>
   22874:	ldr	r3, [sp, #676]	; 0x2a4
   22878:	cmp	r3, #0
   2287c:	mov	r4, r0
   22880:	bne	225b0 <_start@@Base+0xd3d4>
   22884:	mov	r5, r0
   22888:	ldr	r1, [fp, #20]
   2288c:	cmp	r1, #0
   22890:	bne	2142c <_start@@Base+0xc250>
   22894:	ldr	r0, [fp]
   22898:	str	r1, [sp, #528]	; 0x210
   2289c:	bl	2843c <flatcc_builder_end_table@@Base>
   228a0:	ldr	r1, [sp, #528]	; 0x210
   228a4:	subs	r4, r0, #0
   228a8:	beq	2142c <_start@@Base+0xc250>
   228ac:	b	21da0 <_start@@Base+0xcbc4>
   228b0:	add	r1, pc, #536	; 0x218
   228b4:	ldrd	r0, [r1]
   228b8:	cmp	r7, r1
   228bc:	cmpeq	r6, r0
   228c0:	beq	22b00 <_start@@Base+0xd924>
   228c4:	add	r1, pc, #524	; 0x20c
   228c8:	ldrd	r0, [r1]
   228cc:	mov	r6, #0
   228d0:	cmp	r7, r1
   228d4:	cmpeq	r6, r0
   228d8:	beq	22c1c <_start@@Base+0xda40>
   228dc:	add	r1, pc, #508	; 0x1fc
   228e0:	ldrd	r0, [r1]
   228e4:	cmp	r7, r1
   228e8:	cmpeq	r2, r0
   228ec:	beq	22c7c <_start@@Base+0xdaa0>
   228f0:	add	r3, pc, #496	; 0x1f0
   228f4:	ldrd	r2, [r3]
   228f8:	cmp	r7, r3
   228fc:	cmpeq	r6, r2
   22900:	bne	2284c <_start@@Base+0xd670>
   22904:	cmp	ip, #4
   22908:	ble	2284c <_start@@Base+0xd670>
   2290c:	mov	r1, r4
   22910:	mov	r3, #4
   22914:	mov	r2, sl
   22918:	mov	r0, fp
   2291c:	bl	18f38 <_start@@Base+0x3d5c>
   22920:	cmp	r4, r0
   22924:	mov	r1, r0
   22928:	beq	2284c <_start@@Base+0xd670>
   2292c:	add	r3, sp, #680	; 0x2a8
   22930:	mov	r2, sl
   22934:	mov	r0, fp
   22938:	bl	2f254 <flatcc_json_parser_build_string@@Base>
   2293c:	ldr	r3, [sp, #680]	; 0x2a8
   22940:	cmp	r3, #0
   22944:	mov	r4, r0
   22948:	beq	22824 <_start@@Base+0xd648>
   2294c:	mov	r1, #2
   22950:	ldr	r0, [fp]
   22954:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   22958:	cmp	r0, #0
   2295c:	beq	22824 <_start@@Base+0xd648>
   22960:	ldr	r3, [sp, #680]	; 0x2a8
   22964:	str	r3, [r0]
   22968:	b	22860 <_start@@Base+0xd684>
   2296c:	sub	r3, ip, #1
   22970:	cmp	r3, #7
   22974:	addls	pc, pc, r3, lsl #2
   22978:	b	2284c <_start@@Base+0xd670>
   2297c:	b	229e4 <_start@@Base+0xd808>
   22980:	b	229d8 <_start@@Base+0xd7fc>
   22984:	b	229cc <_start@@Base+0xd7f0>
   22988:	b	229c0 <_start@@Base+0xd7e4>
   2298c:	b	229b4 <_start@@Base+0xd7d8>
   22990:	b	229a8 <_start@@Base+0xd7cc>
   22994:	b	2299c <_start@@Base+0xd7c0>
   22998:	b	225ec <_start@@Base+0xd410>
   2299c:	mov	r2, #0
   229a0:	mov	r3, #0
   229a4:	b	225f4 <_start@@Base+0xd418>
   229a8:	mov	r2, #0
   229ac:	mov	r3, #0
   229b0:	b	22620 <_start@@Base+0xd444>
   229b4:	mov	r2, #0
   229b8:	mov	r3, #0
   229bc:	b	2264c <_start@@Base+0xd470>
   229c0:	mov	r2, #0
   229c4:	mov	r3, #0
   229c8:	b	22678 <_start@@Base+0xd49c>
   229cc:	mov	r2, #0
   229d0:	mov	r3, #0
   229d4:	b	226a0 <_start@@Base+0xd4c4>
   229d8:	mov	r2, #0
   229dc:	mov	r3, #0
   229e0:	b	226cc <_start@@Base+0xd4f0>
   229e4:	mov	r2, #0
   229e8:	mov	r3, #0
   229ec:	b	226f4 <_start@@Base+0xd518>
   229f0:	cmp	ip, #8
   229f4:	bgt	22da8 <_start@@Base+0xdbcc>
   229f8:	add	r4, r4, #8
   229fc:	mov	r0, r4
   22a00:	mov	r1, sl
   22a04:	bl	15308 <_start@@Base+0x12c>
   22a08:	mov	r0, #0
   22a0c:	and	r1, r1, #-16777216	; 0xff000000
   22a10:	cmp	r1, #889192448	; 0x35000000
   22a14:	cmpeq	r0, #0
   22a18:	bne	2284c <_start@@Base+0xd670>
   22a1c:	sub	r3, sl, r4
   22a20:	cmp	r3, #1
   22a24:	ble	2284c <_start@@Base+0xd670>
   22a28:	mov	r3, #1
   22a2c:	mov	r2, sl
   22a30:	mov	r1, r4
   22a34:	mov	r0, fp
   22a38:	bl	18f38 <_start@@Base+0x3d5c>
   22a3c:	cmp	r4, r0
   22a40:	mov	r7, r0
   22a44:	beq	2284c <_start@@Base+0xd670>
   22a48:	add	r6, sp, #696	; 0x2b8
   22a4c:	mov	r3, #0
   22a50:	str	r3, [r6, #-8]!
   22a54:	mov	r1, r0
   22a58:	mov	r2, sl
   22a5c:	mov	r3, r6
   22a60:	mov	r0, fp
   22a64:	bl	17950 <_start@@Base+0x2774>
   22a68:	cmp	r7, r0
   22a6c:	mov	r4, r0
   22a70:	beq	23200 <_start@@Base+0xe024>
   22a74:	ldr	r3, [sp, #688]	; 0x2b0
   22a78:	cmp	r3, #0
   22a7c:	bne	22a8c <_start@@Base+0xd8b0>
   22a80:	ldr	r3, [fp, #8]
   22a84:	tst	r3, #2
   22a88:	beq	22860 <_start@@Base+0xd684>
   22a8c:	mov	r3, #4
   22a90:	mov	r2, r3
   22a94:	mov	r1, #6
   22a98:	ldr	r0, [fp]
   22a9c:	bl	29488 <flatcc_builder_table_add@@Base>
   22aa0:	cmp	r0, #0
   22aa4:	bne	22bb0 <_start@@Base+0xd9d4>
   22aa8:	b	22824 <_start@@Base+0xd648>
   22aac:	nop			; (mov r0, r0)
   22ab0:			; <UNDEFINED> instruction: 0xffffffff
   22ab4:	cmnvs	r3, #-2013265919	; 0x88000001
   22ab8:	teqcc	r2, r4, lsr r3
   22abc:	cmnvs	r3, #-1946157055	; 0x8c000001
   22ac0:	andeq	r0, r0, r0
   22ac4:	cmnvs	r3, #-1946157055	; 0x8c000001
   22ac8:	teqcc	r2, r4, lsr r3
   22acc:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   22ad0:	teqcc	r2, r4, lsr r3
   22ad4:	cmnvs	r1, r1, ror #2
   22ad8:	andeq	r0, r0, r0
   22adc:	cmnvs	r1, r1, ror #2
   22ae0:	teqcc	r2, r4, lsr r3
   22ae4:	rsbvs	r6, r2, #536870918	; 0x20000006
   22ae8:	andeq	r0, r0, r0
   22aec:	rsbvs	r6, r2, #536870918	; 0x20000006
   22af0:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   22af4:	andeq	r0, r3, r8, asr #30
   22af8:	andeq	r0, r3, ip, ror #29
   22afc:	andeq	r0, r3, r8, ror lr
   22b00:	add	r4, r4, #8
   22b04:	mov	r0, r4
   22b08:	mov	r1, sl
   22b0c:	bl	15308 <_start@@Base+0x12c>
   22b10:	mov	r0, #0
   22b14:	and	r1, r1, #-16777216	; 0xff000000
   22b18:	cmp	r1, #889192448	; 0x35000000
   22b1c:	cmpeq	r0, #0
   22b20:	bne	2284c <_start@@Base+0xd670>
   22b24:	sub	r3, sl, r4
   22b28:	cmp	r3, #1
   22b2c:	ble	2284c <_start@@Base+0xd670>
   22b30:	mov	r3, #1
   22b34:	mov	r2, sl
   22b38:	mov	r1, r4
   22b3c:	mov	r0, fp
   22b40:	bl	18f38 <_start@@Base+0x3d5c>
   22b44:	cmp	r4, r0
   22b48:	mov	r7, r0
   22b4c:	beq	2284c <_start@@Base+0xd670>
   22b50:	ldr	r3, [sp, #176]	; 0xb0
   22b54:	add	r6, sp, #696	; 0x2b8
   22b58:	mov	r1, r0
   22b5c:	str	r3, [r6, #-8]!
   22b60:	mov	r2, sl
   22b64:	mov	r3, r6
   22b68:	mov	r0, fp
   22b6c:	bl	17950 <_start@@Base+0x2774>
   22b70:	cmp	r7, r0
   22b74:	mov	r4, r0
   22b78:	beq	2318c <_start@@Base+0xdfb0>
   22b7c:	ldr	r3, [sp, #688]	; 0x2b0
   22b80:	cmp	r3, #0
   22b84:	bne	22b94 <_start@@Base+0xd9b8>
   22b88:	ldr	r3, [fp, #8]
   22b8c:	tst	r3, #2
   22b90:	beq	22860 <_start@@Base+0xd684>
   22b94:	mov	r3, #4
   22b98:	mov	r2, r3
   22b9c:	mov	r1, #1
   22ba0:	ldr	r0, [fp]
   22ba4:	bl	29488 <flatcc_builder_table_add@@Base>
   22ba8:	cmp	r0, #0
   22bac:	beq	22824 <_start@@Base+0xd648>
   22bb0:	ldr	r3, [sp, #688]	; 0x2b0
   22bb4:	str	r3, [r0]
   22bb8:	b	22860 <_start@@Base+0xd684>
   22bbc:	cmp	ip, #4
   22bc0:	ble	2284c <_start@@Base+0xd670>
   22bc4:	mov	r1, r4
   22bc8:	mov	r3, #4
   22bcc:	mov	r2, sl
   22bd0:	mov	r0, fp
   22bd4:	bl	18f38 <_start@@Base+0x3d5c>
   22bd8:	cmp	r4, r0
   22bdc:	mov	r1, r0
   22be0:	beq	2284c <_start@@Base+0xd670>
   22be4:	add	r3, sp, #680	; 0x2a8
   22be8:	mov	r2, sl
   22bec:	mov	r0, fp
   22bf0:	bl	2f254 <flatcc_json_parser_build_string@@Base>
   22bf4:	ldr	r3, [sp, #680]	; 0x2a8
   22bf8:	cmp	r3, #0
   22bfc:	mov	r4, r0
   22c00:	beq	22824 <_start@@Base+0xd648>
   22c04:	mov	r1, #4
   22c08:	ldr	r0, [fp]
   22c0c:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   22c10:	cmp	r0, #0
   22c14:	bne	22960 <_start@@Base+0xd784>
   22c18:	b	22824 <_start@@Base+0xd648>
   22c1c:	cmp	ip, #4
   22c20:	ble	2284c <_start@@Base+0xd670>
   22c24:	mov	r1, r4
   22c28:	mov	r3, #4
   22c2c:	mov	r2, sl
   22c30:	mov	r0, fp
   22c34:	bl	18f38 <_start@@Base+0x3d5c>
   22c38:	cmp	r4, r0
   22c3c:	mov	r1, r0
   22c40:	beq	2284c <_start@@Base+0xd670>
   22c44:	add	r3, sp, #680	; 0x2a8
   22c48:	mov	r2, sl
   22c4c:	mov	r0, fp
   22c50:	bl	2f254 <flatcc_json_parser_build_string@@Base>
   22c54:	ldr	r3, [sp, #680]	; 0x2a8
   22c58:	cmp	r3, #0
   22c5c:	mov	r4, r0
   22c60:	beq	22824 <_start@@Base+0xd648>
   22c64:	ldr	r1, [sp, #176]	; 0xb0
   22c68:	ldr	r0, [fp]
   22c6c:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   22c70:	cmp	r0, #0
   22c74:	bne	22960 <_start@@Base+0xd784>
   22c78:	b	22824 <_start@@Base+0xd648>
   22c7c:	cmp	ip, #8
   22c80:	ble	2284c <_start@@Base+0xd670>
   22c84:	mov	r3, #8
   22c88:	mov	r2, sl
   22c8c:	mov	r1, r4
   22c90:	mov	r0, fp
   22c94:	bl	18f38 <_start@@Base+0x3d5c>
   22c98:	cmp	r4, r0
   22c9c:	mov	r7, r0
   22ca0:	beq	2284c <_start@@Base+0xd670>
   22ca4:	mov	r0, #0
   22ca8:	mov	r1, #0
   22cac:	add	r6, sp, #696	; 0x2b8
   22cb0:	mov	r2, sl
   22cb4:	strd	r0, [r6, #-8]!
   22cb8:	mov	r1, r7
   22cbc:	mov	r3, r6
   22cc0:	mov	r0, fp
   22cc4:	bl	177f4 <_start@@Base+0x2618>
   22cc8:	cmp	r7, r0
   22ccc:	mov	r4, r0
   22cd0:	beq	23130 <_start@@Base+0xdf54>
   22cd4:	add	r3, sp, #688	; 0x2b0
   22cd8:	ldrd	r2, [r3]
   22cdc:	orrs	r3, r2, r3
   22ce0:	bne	22cf0 <_start@@Base+0xdb14>
   22ce4:	ldr	r3, [fp, #8]
   22ce8:	tst	r3, #2
   22cec:	beq	22860 <_start@@Base+0xd684>
   22cf0:	mov	r3, #8
   22cf4:	mov	r2, r3
   22cf8:	mov	r1, #3
   22cfc:	ldr	r0, [fp]
   22d00:	bl	29488 <flatcc_builder_table_add@@Base>
   22d04:	cmp	r0, #0
   22d08:	beq	22824 <_start@@Base+0xd648>
   22d0c:	add	r3, sp, #688	; 0x2b0
   22d10:	ldrd	r2, [r3]
   22d14:	strd	r2, [r0]
   22d18:	b	22860 <_start@@Base+0xd684>
   22d1c:	mov	r3, #8
   22d20:	mov	r2, sl
   22d24:	mov	r1, r4
   22d28:	mov	r0, fp
   22d2c:	bl	18f38 <_start@@Base+0x3d5c>
   22d30:	cmp	r4, r0
   22d34:	mov	r7, r0
   22d38:	beq	22774 <_start@@Base+0xd598>
   22d3c:	mov	r0, #0
   22d40:	mov	r1, #0
   22d44:	add	r6, sp, #696	; 0x2b8
   22d48:	mov	r2, sl
   22d4c:	strd	r0, [r6, #-8]!
   22d50:	mov	r1, r7
   22d54:	mov	r3, r6
   22d58:	mov	r0, fp
   22d5c:	bl	177f4 <_start@@Base+0x2618>
   22d60:	cmp	r7, r0
   22d64:	mov	r4, r0
   22d68:	beq	230b4 <_start@@Base+0xded8>
   22d6c:	add	r3, sp, #688	; 0x2b0
   22d70:	ldrd	r2, [r3]
   22d74:	orrs	r3, r2, r3
   22d78:	bne	22d88 <_start@@Base+0xdbac>
   22d7c:	ldr	r3, [fp, #8]
   22d80:	tst	r3, #2
   22d84:	beq	22860 <_start@@Base+0xd684>
   22d88:	mov	r3, #8
   22d8c:	mov	r2, r3
   22d90:	mov	r1, #7
   22d94:	ldr	r0, [fp]
   22d98:	bl	29488 <flatcc_builder_table_add@@Base>
   22d9c:	cmp	r0, #0
   22da0:	bne	22d0c <_start@@Base+0xdb30>
   22da4:	b	22824 <_start@@Base+0xd648>
   22da8:	mov	r3, #8
   22dac:	mov	r2, sl
   22db0:	mov	r1, r4
   22db4:	mov	r0, fp
   22db8:	bl	18f38 <_start@@Base+0x3d5c>
   22dbc:	cmp	r4, r0
   22dc0:	mov	r7, r0
   22dc4:	beq	229f8 <_start@@Base+0xd81c>
   22dc8:	mov	r0, #0
   22dcc:	mov	r1, #0
   22dd0:	add	r6, sp, #696	; 0x2b8
   22dd4:	mov	r2, sl
   22dd8:	strd	r0, [r6, #-8]!
   22ddc:	mov	r1, r7
   22de0:	mov	r3, r6
   22de4:	mov	r0, fp
   22de8:	bl	177f4 <_start@@Base+0x2618>
   22dec:	cmp	r7, r0
   22df0:	mov	r4, r0
   22df4:	beq	230e0 <_start@@Base+0xdf04>
   22df8:	add	r3, sp, #688	; 0x2b0
   22dfc:	ldrd	r2, [r3]
   22e00:	orrs	r3, r2, r3
   22e04:	bne	22e14 <_start@@Base+0xdc38>
   22e08:	ldr	r3, [fp, #8]
   22e0c:	tst	r3, #2
   22e10:	beq	22860 <_start@@Base+0xd684>
   22e14:	mov	r3, #8
   22e18:	mov	r2, r3
   22e1c:	mov	r1, #5
   22e20:	ldr	r0, [fp]
   22e24:	bl	29488 <flatcc_builder_table_add@@Base>
   22e28:	cmp	r0, #0
   22e2c:	bne	22d0c <_start@@Base+0xdb30>
   22e30:	b	22824 <_start@@Base+0xd648>
   22e34:	add	r3, sp, #680	; 0x2a8
   22e38:	str	r3, [sp]
   22e3c:	mov	r2, sl
   22e40:	ldr	r3, [sp, #648]	; 0x288
   22e44:	mov	r1, r5
   22e48:	mov	r0, fp
   22e4c:	bl	18ca0 <_start@@Base+0x3ac4>
   22e50:	cmp	sl, r0
   22e54:	cmpne	r0, r5
   22e58:	mov	r4, r0
   22e5c:	bne	22410 <_start@@Base+0xd234>
   22e60:	b	22824 <_start@@Base+0xd648>
   22e64:	ldrb	r3, [r6, #2]
   22e68:	cmp	r3, #32
   22e6c:	bls	2077c <_start@@Base+0xb5a0>
   22e70:	add	r4, r6, #2
   22e74:	b	20550 <_start@@Base+0xb374>
   22e78:	add	r1, r0, #1
   22e7c:	sub	r3, sl, r1
   22e80:	cmp	r3, #1
   22e84:	mov	r3, #0
   22e88:	str	r3, [sp, #668]	; 0x29c
   22e8c:	ble	22ea0 <_start@@Base+0xdcc4>
   22e90:	ldrb	r3, [r0, #1]
   22e94:	cmp	r3, #32
   22e98:	bhi	22fa4 <_start@@Base+0xddc8>
   22e9c:	beq	231c0 <_start@@Base+0xdfe4>
   22ea0:	mov	r2, sl
   22ea4:	mov	r0, fp
   22ea8:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   22eac:	ldr	r3, [sp, #668]	; 0x29c
   22eb0:	b	20834 <_start@@Base+0xb658>
   22eb4:	mov	r3, #0
   22eb8:	add	r1, r1, #1
   22ebc:	mov	r2, sl
   22ec0:	mov	r0, fp
   22ec4:	str	r3, [sp, #672]	; 0x2a0
   22ec8:	bl	16e38 <_start@@Base+0x1c5c>
   22ecc:	ldr	r3, [sp, #672]	; 0x2a0
   22ed0:	b	210b0 <_start@@Base+0xbed4>
   22ed4:	mov	r1, r0
   22ed8:	mov	r3, #8
   22edc:	mov	r2, sl
   22ee0:	mov	r0, fp
   22ee4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   22ee8:	mov	r4, r0
   22eec:	cmp	r5, r4
   22ef0:	beq	23058 <_start@@Base+0xde7c>
   22ef4:	ldr	r2, [sp, #676]	; 0x2a4
   22ef8:	b	22160 <_start@@Base+0xcf84>
   22efc:	mov	r1, r0
   22f00:	mov	r3, #8
   22f04:	mov	r2, sl
   22f08:	mov	r0, fp
   22f0c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   22f10:	mov	r4, r0
   22f14:	cmp	r5, r4
   22f18:	beq	22ff8 <_start@@Base+0xde1c>
   22f1c:	add	r3, sp, #680	; 0x2a8
   22f20:	ldrd	r2, [r3]
   22f24:	b	216c0 <_start@@Base+0xc4e4>
   22f28:	add	r3, sp, #676	; 0x2a4
   22f2c:	str	r3, [sp]
   22f30:	mov	r2, sl
   22f34:	mov	r3, r7
   22f38:	mov	r1, r5
   22f3c:	mov	r0, fp
   22f40:	bl	18ae4 <_start@@Base+0x3908>
   22f44:	cmp	sl, r0
   22f48:	cmpne	r0, r5
   22f4c:	mov	r4, r0
   22f50:	bne	2243c <_start@@Base+0xd260>
   22f54:	b	22824 <_start@@Base+0xd648>
   22f58:	mov	r1, r4
   22f5c:	mov	r3, #7
   22f60:	mov	r2, sl
   22f64:	mov	r0, fp
   22f68:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   22f6c:	mov	r4, r0
   22f70:	b	22eec <_start@@Base+0xdd10>
   22f74:	mov	r1, #0
   22f78:	b	20658 <_start@@Base+0xb47c>
   22f7c:	mov	r1, #0
   22f80:	b	2067c <_start@@Base+0xb4a0>
   22f84:	mov	r3, #0
   22f88:	b	2069c <_start@@Base+0xb4c0>
   22f8c:	mov	r3, #0
   22f90:	b	206bc <_start@@Base+0xb4e0>
   22f94:	mov	r3, #0
   22f98:	b	206e0 <_start@@Base+0xb504>
   22f9c:	mov	r3, #0
   22fa0:	b	20704 <_start@@Base+0xb528>
   22fa4:	mov	r6, r1
   22fa8:	b	20d78 <_start@@Base+0xbb9c>
   22fac:	mov	r1, r4
   22fb0:	ldr	r3, [sp, #664]	; 0x298
   22fb4:	mov	r2, sl
   22fb8:	mov	r0, fp
   22fbc:	bl	2f464 <flatcc_json_parser_finalize_unions@@Base>
   22fc0:	mov	r4, r0
   22fc4:	ldr	r0, [fp]
   22fc8:	bl	2843c <flatcc_builder_end_table@@Base>
   22fcc:	ldr	r3, [sp, #644]	; 0x284
   22fd0:	cmp	r0, #0
   22fd4:	str	r0, [r3]
   22fd8:	beq	2055c <_start@@Base+0xb380>
   22fdc:	mov	r0, r4
   22fe0:	b	20570 <_start@@Base+0xb394>
   22fe4:	ldrb	r3, [r0, #2]
   22fe8:	cmp	r3, #32
   22fec:	bls	22518 <_start@@Base+0xd33c>
   22ff0:	add	r5, r0, #2
   22ff4:	b	21d80 <_start@@Base+0xcba4>
   22ff8:	add	r3, sp, #680	; 0x2a8
   22ffc:	str	r3, [sp]
   23000:	mov	r2, sl
   23004:	ldr	r3, [sp, #528]	; 0x210
   23008:	mov	r1, r5
   2300c:	mov	r0, fp
   23010:	bl	18ca0 <_start@@Base+0x3ac4>
   23014:	cmp	sl, r0
   23018:	cmpne	r0, r5
   2301c:	mov	r4, r0
   23020:	bne	22f1c <_start@@Base+0xdd40>
   23024:	b	22824 <_start@@Base+0xd648>
   23028:	ldrb	r3, [r6, #2]
   2302c:	cmp	r3, #32
   23030:	addhi	r4, r6, #2
   23034:	bls	218a4 <_start@@Base+0xc6c8>
   23038:	b	218b8 <_start@@Base+0xc6dc>
   2303c:	mov	r1, r0
   23040:	mov	r3, #7
   23044:	mov	r2, sl
   23048:	mov	r0, fp
   2304c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23050:	mov	r4, r0
   23054:	b	22408 <_start@@Base+0xd22c>
   23058:	add	r3, sp, #676	; 0x2a4
   2305c:	str	r3, [sp]
   23060:	mov	r2, sl
   23064:	mov	r3, r7
   23068:	mov	r1, r5
   2306c:	mov	r0, fp
   23070:	bl	18ae4 <_start@@Base+0x3908>
   23074:	cmp	sl, r0
   23078:	cmpne	r0, r5
   2307c:	mov	r4, r0
   23080:	bne	22ef4 <_start@@Base+0xdd18>
   23084:	b	22824 <_start@@Base+0xd648>
   23088:	mov	r5, r1
   2308c:	b	21d80 <_start@@Base+0xcba4>
   23090:	mov	r3, #0
   23094:	add	r1, r4, #1
   23098:	mov	r2, sl
   2309c:	mov	r0, fp
   230a0:	str	r3, [sp, #656]	; 0x290
   230a4:	bl	16e38 <_start@@Base+0x1c5c>
   230a8:	ldr	r3, [sp, #656]	; 0x290
   230ac:	mov	r4, r0
   230b0:	b	202d0 <_start@@Base+0xb0f4>
   230b4:	mov	r1, r0
   230b8:	str	r6, [sp]
   230bc:	ldr	r3, [sp, #528]	; 0x210
   230c0:	mov	r2, sl
   230c4:	mov	r0, fp
   230c8:	bl	18ca0 <_start@@Base+0x3ac4>
   230cc:	cmp	sl, r0
   230d0:	cmpne	r4, r0
   230d4:	beq	23230 <_start@@Base+0xe054>
   230d8:	mov	r4, r0
   230dc:	b	22d6c <_start@@Base+0xdb90>
   230e0:	ldr	r3, [pc, #-1528]	; 22af0 <_start@@Base+0xd914>
   230e4:	mov	r1, r0
   230e8:	add	r3, pc, r3
   230ec:	str	r6, [sp]
   230f0:	add	r3, r3, #588	; 0x24c
   230f4:	mov	r2, sl
   230f8:	mov	r0, fp
   230fc:	bl	18ca0 <_start@@Base+0x3ac4>
   23100:	cmp	sl, r0
   23104:	cmpne	r4, r0
   23108:	beq	23230 <_start@@Base+0xe054>
   2310c:	mov	r4, r0
   23110:	b	22df8 <_start@@Base+0xdc1c>
   23114:	mov	r1, r0
   23118:	mov	r3, #7
   2311c:	mov	r2, sl
   23120:	mov	r0, fp
   23124:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23128:	mov	r4, r0
   2312c:	b	22f14 <_start@@Base+0xdd38>
   23130:	ldr	r3, [pc, #-1604]	; 22af4 <_start@@Base+0xd918>
   23134:	mov	r1, r0
   23138:	add	r3, pc, r3
   2313c:	str	r6, [sp]
   23140:	add	r3, r3, #576	; 0x240
   23144:	mov	r2, sl
   23148:	mov	r0, fp
   2314c:	bl	18ca0 <_start@@Base+0x3ac4>
   23150:	cmp	sl, r0
   23154:	cmpne	r4, r0
   23158:	beq	23230 <_start@@Base+0xe054>
   2315c:	mov	r4, r0
   23160:	b	22cd4 <_start@@Base+0xdaf8>
   23164:	mov	ip, #0
   23168:	mov	r3, #10
   2316c:	mov	r2, sl
   23170:	mov	r1, sl
   23174:	mov	r0, fp
   23178:	str	ip, [sp, #656]	; 0x290
   2317c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23180:	ldr	r3, [sp, #656]	; 0x290
   23184:	mov	r4, r0
   23188:	b	202d0 <_start@@Base+0xb0f4>
   2318c:	ldr	r3, [pc, #-1692]	; 22af8 <_start@@Base+0xd91c>
   23190:	mov	r1, r0
   23194:	add	r3, pc, r3
   23198:	str	r6, [sp]
   2319c:	add	r3, r3, #564	; 0x234
   231a0:	mov	r2, sl
   231a4:	mov	r0, fp
   231a8:	bl	18ae4 <_start@@Base+0x3908>
   231ac:	cmp	sl, r0
   231b0:	cmpne	r4, r0
   231b4:	beq	23230 <_start@@Base+0xe054>
   231b8:	mov	r4, r0
   231bc:	b	22b7c <_start@@Base+0xd9a0>
   231c0:	ldrb	r3, [r0, #2]
   231c4:	cmp	r3, #32
   231c8:	bls	22ea0 <_start@@Base+0xdcc4>
   231cc:	add	r6, r0, #2
   231d0:	b	20d78 <_start@@Base+0xbb9c>
   231d4:	mov	r1, r0
   231d8:	str	r6, [sp]
   231dc:	ldr	r3, [sp, #652]	; 0x28c
   231e0:	mov	r2, sl
   231e4:	mov	r0, fp
   231e8:	bl	18ae4 <_start@@Base+0x3908>
   231ec:	cmp	sl, r0
   231f0:	cmpne	r4, r0
   231f4:	beq	23230 <_start@@Base+0xe054>
   231f8:	mov	r4, r0
   231fc:	b	227f0 <_start@@Base+0xd614>
   23200:	ldr	r3, [pc, #-1804]	; 22afc <_start@@Base+0xd920>
   23204:	mov	r1, r0
   23208:	add	r3, pc, r3
   2320c:	str	r6, [sp]
   23210:	add	r3, r3, #600	; 0x258
   23214:	mov	r2, sl
   23218:	mov	r0, fp
   2321c:	bl	18ae4 <_start@@Base+0x3908>
   23220:	cmp	sl, r0
   23224:	cmpne	r4, r0
   23228:	movne	r4, r0
   2322c:	bne	22a74 <_start@@Base+0xd898>
   23230:	mov	r5, r0
   23234:	b	2142c <_start@@Base+0xc250>
   23238:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2323c:	sub	sp, sp, #108	; 0x6c
   23240:	mov	r5, r2
   23244:	ldr	r2, [sp, #144]	; 0x90
   23248:	mov	ip, #0
   2324c:	mov	r9, r0
   23250:	mov	r4, r1
   23254:	str	ip, [r2]
   23258:	cmp	r3, #4
   2325c:	addls	pc, pc, r3, lsl #2
   23260:	b	238f0 <_start@@Base+0xe714>
   23264:	b	232bc <_start@@Base+0xe0e0>
   23268:	b	23304 <_start@@Base+0xe128>
   2326c:	b	23314 <_start@@Base+0xe138>
   23270:	b	235e0 <_start@@Base+0xe404>
   23274:	b	23278 <_start@@Base+0xe09c>
   23278:	ldr	r3, [sp, #144]	; 0x90
   2327c:	mov	r2, r5
   23280:	bl	20258 <_start@@Base+0xb07c>
   23284:	ldr	r3, [r9, #20]
   23288:	cmp	r3, #0
   2328c:	bne	232b4 <_start@@Base+0xe0d8>
   23290:	ldr	r3, [sp, #144]	; 0x90
   23294:	ldr	r3, [r3]
   23298:	cmp	r3, #0
   2329c:	bne	232b4 <_start@@Base+0xe0d8>
   232a0:	mov	r1, r0
   232a4:	mov	r2, r5
   232a8:	mov	r0, r9
   232ac:	mov	r3, #33	; 0x21
   232b0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   232b4:	add	sp, sp, #108	; 0x6c
   232b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   232bc:	sub	r3, r5, r1
   232c0:	cmp	r3, #3
   232c4:	ble	232e8 <_start@@Base+0xe10c>
   232c8:	ldr	r1, [pc, #1328]	; 23800 <_start@@Base+0xe624>
   232cc:	mov	r2, #4
   232d0:	add	r1, pc, r1
   232d4:	mov	r0, r4
   232d8:	bl	14550 <memcmp@plt>
   232dc:	cmp	r0, #0
   232e0:	addeq	r0, r4, #4
   232e4:	beq	232b4 <_start@@Base+0xe0d8>
   232e8:	mov	r2, r5
   232ec:	mov	r1, r4
   232f0:	mov	r0, r9
   232f4:	mov	r3, #26
   232f8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   232fc:	add	sp, sp, #108	; 0x6c
   23300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23304:	ldr	r3, [sp, #144]	; 0x90
   23308:	mov	r2, r5
   2330c:	bl	1b980 <_start@@Base+0x67a4>
   23310:	b	23284 <_start@@Base+0xe0a8>
   23314:	mov	r1, #4
   23318:	ldr	r0, [r0]
   2331c:	bl	27a48 <flatcc_builder_start_table@@Base>
   23320:	cmp	r0, #0
   23324:	bne	238d8 <_start@@Base+0xe6fc>
   23328:	add	fp, sp, #88	; 0x58
   2332c:	mov	r1, r4
   23330:	mov	r3, fp
   23334:	mov	r2, r5
   23338:	mov	r0, r9
   2333c:	bl	17c8c <_start@@Base+0x2ab0>
   23340:	ldr	r3, [sp, #88]	; 0x58
   23344:	cmp	r3, #0
   23348:	mov	r4, r0
   2334c:	beq	23b6c <_start@@Base+0xe990>
   23350:	ldr	r1, [pc, #1196]	; 23804 <_start@@Base+0xe628>
   23354:	ldr	r2, [pc, #1196]	; 23808 <_start@@Base+0xe62c>
   23358:	ldr	r3, [pc, #1196]	; 2380c <_start@@Base+0xe630>
   2335c:	add	r1, pc, r1
   23360:	add	r2, pc, r2
   23364:	add	r3, pc, r3
   23368:	add	r1, r1, #704	; 0x2c0
   2336c:	add	r2, r2, #660	; 0x294
   23370:	add	r3, r3, #692	; 0x2b4
   23374:	str	r1, [sp, #68]	; 0x44
   23378:	str	r2, [sp, #72]	; 0x48
   2337c:	str	r3, [sp, #76]	; 0x4c
   23380:	b	23574 <_start@@Base+0xe398>
   23384:	ldrb	r6, [r4, #7]
   23388:	mov	r7, #0
   2338c:	ldrb	r2, [r4, #6]
   23390:	lsr	r1, r2, #24
   23394:	lsl	r3, r2, #8
   23398:	str	r1, [sp, #60]	; 0x3c
   2339c:	str	r3, [sp, #56]	; 0x38
   233a0:	ldrd	r2, [sp, #56]	; 0x38
   233a4:	orr	r2, r2, r6
   233a8:	orr	r3, r3, r7
   233ac:	mov	r6, r2
   233b0:	mov	r7, r3
   233b4:	ldrb	r2, [r4, #5]
   233b8:	lsr	r1, r2, #16
   233bc:	lsl	r3, r2, #16
   233c0:	str	r1, [sp, #52]	; 0x34
   233c4:	str	r3, [sp, #48]	; 0x30
   233c8:	ldrd	r2, [sp, #48]	; 0x30
   233cc:	orr	r2, r2, r6
   233d0:	orr	r3, r3, r7
   233d4:	mov	r6, r2
   233d8:	mov	r7, r3
   233dc:	ldrb	r2, [r4, #4]
   233e0:	lsr	r1, r2, #8
   233e4:	lsl	r3, r2, #24
   233e8:	str	r1, [sp, #36]	; 0x24
   233ec:	str	r3, [sp, #32]
   233f0:	ldrd	r2, [sp, #32]
   233f4:	orr	r2, r2, r6
   233f8:	orr	r3, r3, r7
   233fc:	mov	r6, r2
   23400:	mov	r7, r3
   23404:	ldrb	r3, [r4, #3]
   23408:	str	r3, [sp, #44]	; 0x2c
   2340c:	mov	r3, #0
   23410:	str	r3, [sp, #40]	; 0x28
   23414:	ldrd	r2, [sp, #40]	; 0x28
   23418:	orr	r2, r2, r6
   2341c:	orr	r3, r3, r7
   23420:	mov	r6, r2
   23424:	mov	r7, r3
   23428:	ldrb	r2, [r4, #2]
   2342c:	lsl	r3, r2, #8
   23430:	str	r3, [sp, #28]
   23434:	mov	r3, #0
   23438:	str	r3, [sp, #24]
   2343c:	ldrd	r2, [sp, #24]
   23440:	orr	r2, r2, r6
   23444:	orr	r3, r3, r7
   23448:	mov	r6, r2
   2344c:	mov	r7, r3
   23450:	ldrb	r2, [r4, #1]
   23454:	lsl	r3, r2, #16
   23458:	str	r3, [sp, #20]
   2345c:	mov	r3, #0
   23460:	str	r3, [sp, #16]
   23464:	ldrd	r2, [sp, #16]
   23468:	orr	r2, r2, r6
   2346c:	orr	r3, r3, r7
   23470:	mov	r6, r2
   23474:	mov	r7, r3
   23478:	ldrb	r0, [r4]
   2347c:	add	r3, pc, #868	; 0x364
   23480:	ldrd	r2, [r3]
   23484:	lsl	r1, r0, #24
   23488:	str	r1, [sp, #12]
   2348c:	mov	r1, #0
   23490:	str	r1, [sp, #8]
   23494:	ldrd	r0, [sp, #8]
   23498:	orr	r0, r0, r6
   2349c:	orr	r1, r1, r7
   234a0:	mov	r6, r0
   234a4:	mov	r7, r1
   234a8:	ldr	r0, [pc, #864]	; 23810 <_start@@Base+0xe634>
   234ac:	mvn	r1, #0
   234b0:	and	r1, r1, r7
   234b4:	and	r0, r0, r6
   234b8:	cmp	r1, r3
   234bc:	cmpeq	r0, r2
   234c0:	beq	23644 <_start@@Base+0xe468>
   234c4:	add	r3, pc, #804	; 0x324
   234c8:	ldrd	r2, [r3]
   234cc:	and	r0, r6, #-16777216	; 0xff000000
   234d0:	cmp	r7, r3
   234d4:	cmpeq	r0, r2
   234d8:	movne	sl, #1
   234dc:	moveq	sl, #0
   234e0:	cmp	r8, #5
   234e4:	orrle	sl, sl, #1
   234e8:	cmp	sl, #0
   234ec:	beq	23948 <_start@@Base+0xe76c>
   234f0:	add	r3, pc, #768	; 0x300
   234f4:	ldrd	r2, [r3]
   234f8:	bic	r1, r7, #255	; 0xff
   234fc:	mov	r0, #0
   23500:	cmp	r1, r3
   23504:	cmpeq	r0, r2
   23508:	beq	23718 <_start@@Base+0xe53c>
   2350c:	ldr	r3, [pc, #764]	; 23810 <_start@@Base+0xe634>
   23510:	mov	r2, #0
   23514:	and	r7, r7, r3
   23518:	ldr	r3, [pc, #756]	; 23814 <_start@@Base+0xe638>
   2351c:	and	r6, r6, r2
   23520:	cmp	r7, r3
   23524:	mov	r2, #0
   23528:	cmpeq	r6, r2
   2352c:	bne	2353c <_start@@Base+0xe360>
   23530:	sub	r3, r5, r4
   23534:	cmp	r3, #2
   23538:	bgt	2381c <_start@@Base+0xe640>
   2353c:	mov	r1, r4
   23540:	mov	r2, r5
   23544:	mov	r0, r9
   23548:	bl	2ece0 <flatcc_json_parser_unmatched_symbol@@Base>
   2354c:	mov	r4, r0
   23550:	mov	r1, r4
   23554:	mov	r3, fp
   23558:	mov	r2, r5
   2355c:	mov	r0, r9
   23560:	bl	19b94 <_start@@Base+0x49b8>
   23564:	ldr	r3, [sp, #88]	; 0x58
   23568:	cmp	r3, #0
   2356c:	mov	r4, r0
   23570:	beq	23b6c <_start@@Base+0xe990>
   23574:	cmp	r5, r4
   23578:	beq	23a0c <_start@@Base+0xe830>
   2357c:	ldrb	r3, [r4]
   23580:	cmp	r3, #34	; 0x22
   23584:	addeq	r4, r4, #1
   23588:	beq	235a4 <_start@@Base+0xe3c8>
   2358c:	mov	r1, r4
   23590:	mov	r3, #5
   23594:	mov	r2, r5
   23598:	mov	r0, r9
   2359c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   235a0:	mov	r4, r0
   235a4:	sub	r8, r5, r4
   235a8:	cmp	r8, #8
   235ac:	bhi	23384 <_start@@Base+0xe1a8>
   235b0:	sub	r3, r8, #1
   235b4:	cmp	r3, #7
   235b8:	addls	pc, pc, r3, lsl #2
   235bc:	b	23a0c <_start@@Base+0xe830>
   235c0:	b	23638 <_start@@Base+0xe45c>
   235c4:	b	2362c <_start@@Base+0xe450>
   235c8:	b	23620 <_start@@Base+0xe444>
   235cc:	b	23614 <_start@@Base+0xe438>
   235d0:	b	23608 <_start@@Base+0xe42c>
   235d4:	b	235fc <_start@@Base+0xe420>
   235d8:	b	235f0 <_start@@Base+0xe414>
   235dc:	b	23384 <_start@@Base+0xe1a8>
   235e0:	ldr	r3, [sp, #144]	; 0x90
   235e4:	mov	r2, r5
   235e8:	bl	1b6f4 <_start@@Base+0x6518>
   235ec:	b	23284 <_start@@Base+0xe0a8>
   235f0:	mov	r6, #0
   235f4:	mov	r7, #0
   235f8:	b	2338c <_start@@Base+0xe1b0>
   235fc:	mov	r6, #0
   23600:	mov	r7, #0
   23604:	b	233b4 <_start@@Base+0xe1d8>
   23608:	mov	r6, #0
   2360c:	mov	r7, #0
   23610:	b	233dc <_start@@Base+0xe200>
   23614:	mov	r6, #0
   23618:	mov	r7, #0
   2361c:	b	23404 <_start@@Base+0xe228>
   23620:	mov	r6, #0
   23624:	mov	r7, #0
   23628:	b	23428 <_start@@Base+0xe24c>
   2362c:	mov	r6, #0
   23630:	mov	r7, #0
   23634:	b	23450 <_start@@Base+0xe274>
   23638:	mov	r6, #0
   2363c:	mov	r7, #0
   23640:	b	23478 <_start@@Base+0xe29c>
   23644:	cmp	r8, #6
   23648:	ble	2350c <_start@@Base+0xe330>
   2364c:	mov	r3, #6
   23650:	mov	r2, r5
   23654:	mov	r1, r4
   23658:	mov	r0, r9
   2365c:	bl	18f38 <_start@@Base+0x3d5c>
   23660:	cmp	r4, r0
   23664:	mov	r8, r0
   23668:	beq	2350c <_start@@Base+0xe330>
   2366c:	cmp	r5, r0
   23670:	ldrd	r0, [sp, #8]
   23674:	mov	r2, #0
   23678:	mov	r3, #0
   2367c:	strb	r0, [sp, #87]	; 0x57
   23680:	str	r0, [sp, #92]	; 0x5c
   23684:	strd	r2, [sp, #96]	; 0x60
   23688:	beq	23a94 <_start@@Base+0xe8b8>
   2368c:	add	r3, sp, #96	; 0x60
   23690:	str	r3, [sp]
   23694:	mov	r2, r5
   23698:	add	r3, sp, #92	; 0x5c
   2369c:	mov	r1, r8
   236a0:	mov	r0, r9
   236a4:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   236a8:	cmp	r8, r0
   236ac:	mov	r4, r0
   236b0:	beq	23a90 <_start@@Base+0xe8b4>
   236b4:	ldr	r1, [sp, #92]	; 0x5c
   236b8:	ldrd	r2, [sp, #96]	; 0x60
   236bc:	cmp	r1, #0
   236c0:	beq	2390c <_start@@Base+0xe730>
   236c4:	cmp	r3, #0
   236c8:	cmpeq	r2, #128	; 0x80
   236cc:	rsbls	r2, r2, #0
   236d0:	sxtbls	r2, r2
   236d4:	strbls	r2, [sp, #87]	; 0x57
   236d8:	bhi	23bd8 <_start@@Base+0xe9fc>
   236dc:	cmp	r2, #2
   236e0:	bne	236f0 <_start@@Base+0xe514>
   236e4:	ldr	r3, [r9, #8]
   236e8:	tst	r3, #2
   236ec:	beq	23550 <_start@@Base+0xe374>
   236f0:	mov	r3, #1
   236f4:	mov	r2, r3
   236f8:	mov	r1, r3
   236fc:	ldr	r0, [r9]
   23700:	bl	29488 <flatcc_builder_table_add@@Base>
   23704:	cmp	r0, #0
   23708:	beq	238d8 <_start@@Base+0xe6fc>
   2370c:	ldrsb	r3, [sp, #87]	; 0x57
   23710:	strb	r3, [r0]
   23714:	b	23550 <_start@@Base+0xe374>
   23718:	cmp	r8, #3
   2371c:	ble	2353c <_start@@Base+0xe360>
   23720:	mov	r3, #3
   23724:	mov	r2, r5
   23728:	mov	r1, r4
   2372c:	mov	r0, r9
   23730:	bl	18f38 <_start@@Base+0x3d5c>
   23734:	cmp	r4, r0
   23738:	mov	r6, r0
   2373c:	beq	2353c <_start@@Base+0xe360>
   23740:	mov	r0, #0
   23744:	mov	r1, #0
   23748:	mov	r3, #0
   2374c:	cmp	r5, r6
   23750:	strd	r0, [sp, #96]	; 0x60
   23754:	strb	r3, [sp, #87]	; 0x57
   23758:	str	r3, [sp, #92]	; 0x5c
   2375c:	beq	23ad0 <_start@@Base+0xe8f4>
   23760:	add	r3, sp, #96	; 0x60
   23764:	str	r3, [sp]
   23768:	mov	r2, r5
   2376c:	add	r3, sp, #92	; 0x5c
   23770:	mov	r1, r6
   23774:	mov	r0, r9
   23778:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   2377c:	cmp	r6, r0
   23780:	mov	r4, r0
   23784:	beq	23acc <_start@@Base+0xe8f0>
   23788:	ldr	r3, [sp, #92]	; 0x5c
   2378c:	cmp	r3, #0
   23790:	bne	23b98 <_start@@Base+0xe9bc>
   23794:	ldrd	r2, [sp, #96]	; 0x60
   23798:	cmp	r3, #0
   2379c:	cmpeq	r2, #255	; 0xff
   237a0:	uxtbls	r2, r2
   237a4:	strbls	r2, [sp, #87]	; 0x57
   237a8:	bhi	23bf4 <_start@@Base+0xea18>
   237ac:	cmp	r2, #2
   237b0:	bne	237c0 <_start@@Base+0xe5e4>
   237b4:	ldr	r3, [r9, #8]
   237b8:	tst	r3, #2
   237bc:	beq	23550 <_start@@Base+0xe374>
   237c0:	mov	r3, #1
   237c4:	mov	r2, r3
   237c8:	mov	r1, #3
   237cc:	ldr	r0, [r9]
   237d0:	bl	29488 <flatcc_builder_table_add@@Base>
   237d4:	cmp	r0, #0
   237d8:	beq	238d8 <_start@@Base+0xe6fc>
   237dc:	ldrb	r3, [sp, #87]	; 0x57
   237e0:	strb	r3, [r0]
   237e4:	b	23550 <_start@@Base+0xe374>
   237e8:	eorsvc	r0, r2, #0
   237ec:	cmnvs	pc, #28416	; 0x6f00
   237f0:	andvc	r0, r0, #0
   237f4:	cmnvs	pc, #28416	; 0x6f00
   237f8:	andeq	r0, r0, r0
   237fc:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   23800:	andeq	sl, r1, r0, lsr lr
   23804:	andeq	r0, r3, r4, lsr #26
   23808:	andeq	r0, r3, r0, lsr #26
   2380c:	andeq	r0, r3, ip, lsl sp
   23810:			; <UNDEFINED> instruction: 0xffff0000
   23814:	strbvc	r0, [r3, #-0]!
   23818:	andeq	r0, r3, r4, asr #10
   2381c:	mov	r3, #2
   23820:	mov	r2, r5
   23824:	mov	r1, r4
   23828:	mov	r0, r9
   2382c:	bl	18f38 <_start@@Base+0x3d5c>
   23830:	cmp	r0, r4
   23834:	mov	r6, r0
   23838:	beq	2353c <_start@@Base+0xe360>
   2383c:	mov	r0, #0
   23840:	mov	r1, #0
   23844:	mov	r3, #0
   23848:	cmp	r5, r6
   2384c:	strd	r0, [sp, #96]	; 0x60
   23850:	strb	r3, [sp, #87]	; 0x57
   23854:	str	r3, [sp, #92]	; 0x5c
   23858:	beq	23a5c <_start@@Base+0xe880>
   2385c:	add	r3, sp, #96	; 0x60
   23860:	str	r3, [sp]
   23864:	mov	r2, r5
   23868:	add	r3, sp, #92	; 0x5c
   2386c:	mov	r1, r6
   23870:	mov	r0, r9
   23874:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   23878:	cmp	r6, r0
   2387c:	mov	r4, r0
   23880:	beq	23a58 <_start@@Base+0xe87c>
   23884:	ldr	r3, [sp, #92]	; 0x5c
   23888:	cmp	r3, #0
   2388c:	bne	23b04 <_start@@Base+0xe928>
   23890:	ldrd	r2, [sp, #96]	; 0x60
   23894:	cmp	r3, #0
   23898:	cmpeq	r2, #255	; 0xff
   2389c:	uxtbls	r2, r2
   238a0:	strbls	r2, [sp, #87]	; 0x57
   238a4:	bhi	23bbc <_start@@Base+0xe9e0>
   238a8:	cmp	r2, #2
   238ac:	bne	238bc <_start@@Base+0xe6e0>
   238b0:	ldr	r3, [r9, #8]
   238b4:	tst	r3, #2
   238b8:	beq	23550 <_start@@Base+0xe374>
   238bc:	mov	r3, #1
   238c0:	mov	r2, r3
   238c4:	mov	r1, #2
   238c8:	ldr	r0, [r9]
   238cc:	bl	29488 <flatcc_builder_table_add@@Base>
   238d0:	cmp	r0, #0
   238d4:	bne	237dc <_start@@Base+0xe600>
   238d8:	mov	r1, r4
   238dc:	mov	r3, #33	; 0x21
   238e0:	mov	r2, r5
   238e4:	mov	r0, r9
   238e8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   238ec:	b	23284 <_start@@Base+0xe0a8>
   238f0:	ldr	r3, [r0, #8]
   238f4:	mov	r2, r5
   238f8:	tst	r3, #1
   238fc:	bne	23ac4 <_start@@Base+0xe8e8>
   23900:	mov	r3, #15
   23904:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23908:	b	232b4 <_start@@Base+0xe0d8>
   2390c:	cmp	r3, #0
   23910:	cmpeq	r2, #127	; 0x7f
   23914:	sxtbls	r2, r2
   23918:	strbls	r2, [sp, #87]	; 0x57
   2391c:	bls	236dc <_start@@Base+0xe500>
   23920:	mov	r1, r0
   23924:	mov	r3, #7
   23928:	mov	r2, r5
   2392c:	mov	r0, r9
   23930:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23934:	mov	r4, r0
   23938:	cmp	r8, r4
   2393c:	beq	23a94 <_start@@Base+0xe8b8>
   23940:	ldrsb	r2, [sp, #87]	; 0x57
   23944:	b	236dc <_start@@Base+0xe500>
   23948:	mov	r1, r4
   2394c:	mov	r3, #5
   23950:	mov	r2, r5
   23954:	mov	r0, r9
   23958:	bl	18f38 <_start@@Base+0x3d5c>
   2395c:	cmp	r4, r0
   23960:	mov	r1, r0
   23964:	str	r0, [sp, #64]	; 0x40
   23968:	beq	234f0 <_start@@Base+0xe314>
   2396c:	mov	r2, #0
   23970:	mov	r3, #0
   23974:	cmp	r5, r0
   23978:	strb	sl, [sp, #87]	; 0x57
   2397c:	str	sl, [sp, #92]	; 0x5c
   23980:	strd	r2, [sp, #96]	; 0x60
   23984:	beq	23b30 <_start@@Base+0xe954>
   23988:	add	r3, sp, #96	; 0x60
   2398c:	str	r3, [sp]
   23990:	mov	r6, r0
   23994:	add	r3, sp, #92	; 0x5c
   23998:	mov	r2, r5
   2399c:	mov	r0, r9
   239a0:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   239a4:	cmp	r6, r0
   239a8:	mov	r4, r0
   239ac:	beq	23b2c <_start@@Base+0xe950>
   239b0:	ldr	r1, [sp, #92]	; 0x5c
   239b4:	ldrd	r2, [sp, #96]	; 0x60
   239b8:	cmp	r1, #0
   239bc:	beq	23a18 <_start@@Base+0xe83c>
   239c0:	cmp	r3, #0
   239c4:	cmpeq	r2, #128	; 0x80
   239c8:	rsbls	r2, r2, #0
   239cc:	sxtbls	r2, r2
   239d0:	strbls	r2, [sp, #87]	; 0x57
   239d4:	bhi	23c10 <_start@@Base+0xea34>
   239d8:	cmp	r2, #2
   239dc:	bne	239ec <_start@@Base+0xe810>
   239e0:	ldr	r3, [r9, #8]
   239e4:	tst	r3, #2
   239e8:	beq	23550 <_start@@Base+0xe374>
   239ec:	mov	r3, #1
   239f0:	mov	r2, r3
   239f4:	mov	r1, #0
   239f8:	ldr	r0, [r9]
   239fc:	bl	29488 <flatcc_builder_table_add@@Base>
   23a00:	cmp	r0, #0
   23a04:	bne	2370c <_start@@Base+0xe530>
   23a08:	b	238d8 <_start@@Base+0xe6fc>
   23a0c:	mov	r6, #0
   23a10:	mov	r7, #0
   23a14:	b	2350c <_start@@Base+0xe330>
   23a18:	cmp	r3, #0
   23a1c:	cmpeq	r2, #127	; 0x7f
   23a20:	sxtbls	r2, r2
   23a24:	strbls	r2, [sp, #87]	; 0x57
   23a28:	bls	239d8 <_start@@Base+0xe7fc>
   23a2c:	mov	r1, r0
   23a30:	mov	r3, #7
   23a34:	mov	r2, r5
   23a38:	mov	r0, r9
   23a3c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23a40:	mov	r4, r0
   23a44:	ldr	r3, [sp, #64]	; 0x40
   23a48:	cmp	r3, r4
   23a4c:	beq	23b30 <_start@@Base+0xe954>
   23a50:	ldrsb	r2, [sp, #87]	; 0x57
   23a54:	b	239d8 <_start@@Base+0xe7fc>
   23a58:	mov	r6, r0
   23a5c:	add	r3, sp, #87	; 0x57
   23a60:	str	r3, [sp]
   23a64:	mov	r2, r5
   23a68:	ldr	r3, [sp, #68]	; 0x44
   23a6c:	mov	r1, r6
   23a70:	mov	r0, r9
   23a74:	bl	183a4 <_start@@Base+0x31c8>
   23a78:	cmp	r5, r0
   23a7c:	cmpne	r0, r6
   23a80:	mov	r4, r0
   23a84:	beq	238d8 <_start@@Base+0xe6fc>
   23a88:	ldrb	r2, [sp, #87]	; 0x57
   23a8c:	b	238a8 <_start@@Base+0xe6cc>
   23a90:	mov	r8, r0
   23a94:	add	r3, sp, #87	; 0x57
   23a98:	str	r3, [sp]
   23a9c:	mov	r2, r5
   23aa0:	ldr	r3, [sp, #72]	; 0x48
   23aa4:	mov	r1, r8
   23aa8:	mov	r0, r9
   23aac:	bl	18910 <_start@@Base+0x3734>
   23ab0:	cmp	r5, r0
   23ab4:	cmpne	r0, r8
   23ab8:	mov	r4, r0
   23abc:	bne	23940 <_start@@Base+0xe764>
   23ac0:	b	238d8 <_start@@Base+0xe6fc>
   23ac4:	bl	2de74 <flatcc_json_parser_generic_json@@Base>
   23ac8:	b	232b4 <_start@@Base+0xe0d8>
   23acc:	mov	r6, r0
   23ad0:	add	r3, sp, #87	; 0x57
   23ad4:	str	r3, [sp]
   23ad8:	mov	r2, r5
   23adc:	ldr	r3, [sp, #76]	; 0x4c
   23ae0:	mov	r1, r6
   23ae4:	mov	r0, r9
   23ae8:	bl	183a4 <_start@@Base+0x31c8>
   23aec:	cmp	r5, r0
   23af0:	cmpne	r0, r6
   23af4:	mov	r4, r0
   23af8:	beq	238d8 <_start@@Base+0xe6fc>
   23afc:	ldrb	r2, [sp, #87]	; 0x57
   23b00:	b	237ac <_start@@Base+0xe5d0>
   23b04:	mov	r1, r0
   23b08:	mov	r3, #8
   23b0c:	mov	r2, r5
   23b10:	mov	r0, r9
   23b14:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23b18:	mov	r4, r0
   23b1c:	cmp	r6, r4
   23b20:	beq	23a5c <_start@@Base+0xe880>
   23b24:	ldrb	r2, [sp, #87]	; 0x57
   23b28:	b	238a8 <_start@@Base+0xe6cc>
   23b2c:	str	r0, [sp, #64]	; 0x40
   23b30:	ldr	r3, [pc, #-800]	; 23818 <_start@@Base+0xe63c>
   23b34:	ldr	r6, [sp, #64]	; 0x40
   23b38:	add	r2, sp, #87	; 0x57
   23b3c:	add	r3, pc, r3
   23b40:	str	r2, [sp]
   23b44:	add	r3, r3, #676	; 0x2a4
   23b48:	mov	r2, r5
   23b4c:	mov	r1, r6
   23b50:	mov	r0, r9
   23b54:	bl	18910 <_start@@Base+0x3734>
   23b58:	cmp	r5, r0
   23b5c:	cmpne	r0, r6
   23b60:	mov	r4, r0
   23b64:	bne	23a50 <_start@@Base+0xe874>
   23b68:	b	238d8 <_start@@Base+0xe6fc>
   23b6c:	ldr	r3, [r9, #20]
   23b70:	cmp	r3, #0
   23b74:	bne	238d8 <_start@@Base+0xe6fc>
   23b78:	ldr	r0, [r9]
   23b7c:	bl	2843c <flatcc_builder_end_table@@Base>
   23b80:	ldr	r3, [sp, #144]	; 0x90
   23b84:	cmp	r0, #0
   23b88:	str	r0, [r3]
   23b8c:	movne	r0, r4
   23b90:	beq	238d8 <_start@@Base+0xe6fc>
   23b94:	b	23284 <_start@@Base+0xe0a8>
   23b98:	mov	r1, r0
   23b9c:	mov	r3, #8
   23ba0:	mov	r2, r5
   23ba4:	mov	r0, r9
   23ba8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23bac:	mov	r4, r0
   23bb0:	cmp	r6, r4
   23bb4:	bne	23afc <_start@@Base+0xe920>
   23bb8:	b	23ad0 <_start@@Base+0xe8f4>
   23bbc:	mov	r1, r0
   23bc0:	mov	r3, #7
   23bc4:	mov	r2, r5
   23bc8:	mov	r0, r9
   23bcc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23bd0:	mov	r4, r0
   23bd4:	b	23b1c <_start@@Base+0xe940>
   23bd8:	mov	r1, r0
   23bdc:	mov	r3, #8
   23be0:	mov	r2, r5
   23be4:	mov	r0, r9
   23be8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23bec:	mov	r4, r0
   23bf0:	b	23938 <_start@@Base+0xe75c>
   23bf4:	mov	r1, r0
   23bf8:	mov	r3, #7
   23bfc:	mov	r2, r5
   23c00:	mov	r0, r9
   23c04:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23c08:	mov	r4, r0
   23c0c:	b	23bb0 <_start@@Base+0xe9d4>
   23c10:	mov	r1, r0
   23c14:	mov	r3, #8
   23c18:	mov	r2, r5
   23c1c:	mov	r0, r9
   23c20:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   23c24:	mov	r4, r0
   23c28:	b	23a44 <_start@@Base+0xe868>
   23c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c30:	mov	r6, r1
   23c34:	sub	r1, r2, r1
   23c38:	cmp	r1, #8
   23c3c:	sub	sp, sp, #12
   23c40:	mov	r7, r3
   23c44:	bls	23d24 <_start@@Base+0xeb48>
   23c48:	ldrb	sl, [r6, #7]
   23c4c:	mov	fp, #0
   23c50:	ldrb	r4, [r6, #6]
   23c54:	lsr	r9, r4, #24
   23c58:	lsl	r8, r4, #8
   23c5c:	orr	sl, sl, r8
   23c60:	orr	fp, fp, r9
   23c64:	ldrb	r4, [r6, #5]
   23c68:	lsr	r9, r4, #16
   23c6c:	lsl	r8, r4, #16
   23c70:	orr	r8, r8, sl
   23c74:	orr	r9, r9, fp
   23c78:	ldrb	r4, [r6, #4]
   23c7c:	lsr	fp, r4, #8
   23c80:	lsl	sl, r4, #24
   23c84:	orr	sl, sl, r8
   23c88:	orr	fp, fp, r9
   23c8c:	ldrb	r9, [r6, #3]
   23c90:	mov	r8, #0
   23c94:	orr	sl, sl, r8
   23c98:	orr	fp, fp, r9
   23c9c:	ldrb	r4, [r6, #2]
   23ca0:	mov	r8, #0
   23ca4:	orr	sl, sl, r8
   23ca8:	lsl	r9, r4, #8
   23cac:	orr	fp, fp, r9
   23cb0:	ldrb	r4, [r6, #1]
   23cb4:	mov	r8, #0
   23cb8:	orr	r8, r8, sl
   23cbc:	lsl	r9, r4, #16
   23cc0:	orr	r9, r9, fp
   23cc4:	ldrb	sl, [r6]
   23cc8:	mov	r4, #0
   23ccc:	orr	r4, r4, r8
   23cd0:	lsl	r5, sl, #24
   23cd4:	add	fp, pc, #396	; 0x18c
   23cd8:	ldrd	sl, [fp]
   23cdc:	orr	r5, r5, r9
   23ce0:	cmp	r5, fp
   23ce4:	cmpeq	r4, sl
   23ce8:	bls	23d54 <_start@@Base+0xeb78>
   23cec:	add	fp, pc, #380	; 0x17c
   23cf0:	ldrd	sl, [fp]
   23cf4:	mov	r4, #0
   23cf8:	cmp	r5, fp
   23cfc:	cmpeq	r4, sl
   23d00:	beq	23e40 <_start@@Base+0xec64>
   23d04:	add	r9, pc, #364	; 0x16c
   23d08:	ldrd	r8, [r9]
   23d0c:	cmp	r5, r9
   23d10:	cmpeq	r4, r8
   23d14:	beq	23db0 <_start@@Base+0xebd4>
   23d18:	mov	r0, r6
   23d1c:	add	sp, sp, #12
   23d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d24:	sub	r1, r1, #1
   23d28:	cmp	r1, #7
   23d2c:	addls	pc, pc, r1, lsl #2
   23d30:	b	23d18 <_start@@Base+0xeb3c>
   23d34:	b	23dec <_start@@Base+0xec10>
   23d38:	b	23e10 <_start@@Base+0xec34>
   23d3c:	b	23e1c <_start@@Base+0xec40>
   23d40:	b	23e28 <_start@@Base+0xec4c>
   23d44:	b	23e34 <_start@@Base+0xec58>
   23d48:	b	23df8 <_start@@Base+0xec1c>
   23d4c:	b	23e04 <_start@@Base+0xec28>
   23d50:	b	23c48 <_start@@Base+0xea6c>
   23d54:	add	fp, pc, #292	; 0x124
   23d58:	ldrd	sl, [fp]
   23d5c:	mov	r4, #0
   23d60:	cmp	r5, fp
   23d64:	cmpeq	r4, sl
   23d68:	bne	23d18 <_start@@Base+0xeb3c>
   23d6c:	ldr	r3, [sp, #52]	; 0x34
   23d70:	mov	r1, r6
   23d74:	str	r3, [sp]
   23d78:	mov	r3, #4
   23d7c:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   23d80:	cmp	r6, r0
   23d84:	mvnne	r4, #11
   23d88:	beq	23d18 <_start@@Base+0xeb3c>
   23d8c:	ldr	r2, [sp, #48]	; 0x30
   23d90:	mvn	r5, #0
   23d94:	mov	r3, #1
   23d98:	mov	r6, r0
   23d9c:	strd	r4, [r2]
   23da0:	mov	r0, r6
   23da4:	str	r3, [r7]
   23da8:	add	sp, sp, #12
   23dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23db0:	ldr	r3, [sp, #52]	; 0x34
   23db4:	mov	r1, r6
   23db8:	str	r3, [sp]
   23dbc:	mov	r3, #4
   23dc0:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   23dc4:	cmp	r6, r0
   23dc8:	beq	23d18 <_start@@Base+0xeb3c>
   23dcc:	ldr	r2, [sp, #48]	; 0x30
   23dd0:	mov	r6, r0
   23dd4:	mvn	r1, #0
   23dd8:	mvn	r0, #10
   23ddc:	mov	r3, #1
   23de0:	strd	r0, [r2]
   23de4:	str	r3, [r7]
   23de8:	b	23d18 <_start@@Base+0xeb3c>
   23dec:	mov	r8, #0
   23df0:	mov	r9, #0
   23df4:	b	23cc4 <_start@@Base+0xeae8>
   23df8:	mov	sl, #0
   23dfc:	mov	fp, #0
   23e00:	b	23c64 <_start@@Base+0xea88>
   23e04:	mov	sl, #0
   23e08:	mov	fp, #0
   23e0c:	b	23c50 <_start@@Base+0xea74>
   23e10:	mov	sl, #0
   23e14:	mov	fp, #0
   23e18:	b	23cb0 <_start@@Base+0xead4>
   23e1c:	mov	sl, #0
   23e20:	mov	fp, #0
   23e24:	b	23c9c <_start@@Base+0xeac0>
   23e28:	mov	sl, #0
   23e2c:	mov	fp, #0
   23e30:	b	23c8c <_start@@Base+0xeab0>
   23e34:	mov	r8, #0
   23e38:	mov	r9, #0
   23e3c:	b	23c78 <_start@@Base+0xea9c>
   23e40:	ldr	r3, [sp, #52]	; 0x34
   23e44:	mov	r1, r6
   23e48:	str	r3, [sp]
   23e4c:	mov	r3, #4
   23e50:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   23e54:	cmp	r6, r0
   23e58:	beq	23d18 <_start@@Base+0xeb3c>
   23e5c:	mvn	r4, #9
   23e60:	b	23d8c <_start@@Base+0xebb0>
   23e64:	nop			; (mov r0, r0)
   23e68:			; <UNDEFINED> instruction: 0xffffffff
   23e6c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   23e70:	andeq	r0, r0, r0
   23e74:	mcrvs	7, 3, r6, cr5, cr3, {1}
   23e78:	andeq	r0, r0, r0
   23e7c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   23e80:	andeq	r0, r0, r0
   23e84:	mcrvs	7, 3, r6, cr5, cr1, {1}
   23e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e8c:	mov	r6, r1
   23e90:	sub	r1, r2, r1
   23e94:	cmp	r1, #8
   23e98:	sub	sp, sp, #12
   23e9c:	mov	ip, r0
   23ea0:	mov	r7, r3
   23ea4:	bls	23f94 <_start@@Base+0xedb8>
   23ea8:	ldrb	r8, [r6, #7]
   23eac:	mov	r9, #0
   23eb0:	ldrb	r0, [r6, #6]
   23eb4:	lsr	r5, r0, #24
   23eb8:	lsl	r4, r0, #8
   23ebc:	orr	r8, r8, r4
   23ec0:	orr	r9, r9, r5
   23ec4:	ldrb	r0, [r6, #5]
   23ec8:	lsr	r5, r0, #16
   23ecc:	lsl	r4, r0, #16
   23ed0:	orr	r4, r4, r8
   23ed4:	orr	r5, r5, r9
   23ed8:	ldrb	r0, [r6, #4]
   23edc:	lsr	r9, r0, #8
   23ee0:	lsl	r8, r0, #24
   23ee4:	orr	r8, r8, r4
   23ee8:	orr	r9, r9, r5
   23eec:	ldrb	r1, [r6, #3]
   23ef0:	mov	r0, #0
   23ef4:	orr	r8, r8, r0
   23ef8:	orr	r9, r9, r1
   23efc:	ldrb	r4, [r6, #2]
   23f00:	mov	r0, #0
   23f04:	orr	r8, r8, r0
   23f08:	lsl	r1, r4, #8
   23f0c:	orr	r9, r9, r1
   23f10:	ldrb	r4, [r6, #1]
   23f14:	mov	r0, #0
   23f18:	orr	r0, r0, r8
   23f1c:	lsl	r1, r4, #16
   23f20:	orr	r1, r1, r9
   23f24:	ldrb	r8, [r6]
   23f28:	mov	r4, #0
   23f2c:	orr	r0, r0, r4
   23f30:	lsl	r5, r8, #24
   23f34:	add	r9, pc, #428	; 0x1ac
   23f38:	ldrd	r8, [r9]
   23f3c:	orr	r1, r1, r5
   23f40:	cmp	r1, r9
   23f44:	cmpeq	r0, r8
   23f48:	bls	23fc4 <_start@@Base+0xede8>
   23f4c:	add	fp, pc, #412	; 0x19c
   23f50:	ldrd	sl, [fp]
   23f54:	ldr	r8, [pc, #436]	; 24110 <_start@@Base+0xef34>
   23f58:	mvn	r9, #0
   23f5c:	and	r9, r9, r1
   23f60:	and	r8, r8, r0
   23f64:	cmp	r9, fp
   23f68:	cmpeq	r8, sl
   23f6c:	beq	240a8 <_start@@Base+0xeecc>
   23f70:	add	r9, pc, #384	; 0x180
   23f74:	ldrd	r8, [r9]
   23f78:	mov	r0, #0
   23f7c:	cmp	r1, r9
   23f80:	cmpeq	r0, r8
   23f84:	beq	24018 <_start@@Base+0xee3c>
   23f88:	mov	r0, r6
   23f8c:	add	sp, sp, #12
   23f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f94:	sub	r1, r1, #1
   23f98:	cmp	r1, #7
   23f9c:	addls	pc, pc, r1, lsl #2
   23fa0:	b	23f88 <_start@@Base+0xedac>
   23fa4:	b	24054 <_start@@Base+0xee78>
   23fa8:	b	24078 <_start@@Base+0xee9c>
   23fac:	b	24084 <_start@@Base+0xeea8>
   23fb0:	b	24090 <_start@@Base+0xeeb4>
   23fb4:	b	2409c <_start@@Base+0xeec0>
   23fb8:	b	24060 <_start@@Base+0xee84>
   23fbc:	b	2406c <_start@@Base+0xee90>
   23fc0:	b	23ea8 <_start@@Base+0xeccc>
   23fc4:	add	r9, pc, #308	; 0x134
   23fc8:	ldrd	r8, [r9]
   23fcc:	mov	r0, #0
   23fd0:	cmp	r1, r9
   23fd4:	cmpeq	r0, r8
   23fd8:	bne	23f88 <_start@@Base+0xedac>
   23fdc:	ldr	r3, [sp, #52]	; 0x34
   23fe0:	mov	r0, ip
   23fe4:	str	r3, [sp]
   23fe8:	mov	r1, r6
   23fec:	mov	r3, #4
   23ff0:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   23ff4:	cmp	r6, r0
   23ff8:	beq	23f88 <_start@@Base+0xedac>
   23ffc:	ldr	r1, [sp, #48]	; 0x30
   24000:	mov	r2, #3
   24004:	mov	r3, #0
   24008:	mov	r6, r0
   2400c:	strd	r2, [r1]
   24010:	str	r4, [r7]
   24014:	b	23f88 <_start@@Base+0xedac>
   24018:	ldr	r3, [sp, #52]	; 0x34
   2401c:	mov	r0, ip
   24020:	str	r3, [sp]
   24024:	mov	r1, r6
   24028:	mov	r3, #4
   2402c:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   24030:	cmp	r6, r0
   24034:	beq	23f88 <_start@@Base+0xedac>
   24038:	add	r3, pc, #200	; 0xc8
   2403c:	ldrd	r2, [r3]
   24040:	ldr	r1, [sp, #48]	; 0x30
   24044:	mov	r6, r0
   24048:	strd	r2, [r1]
   2404c:	str	r4, [r7]
   24050:	b	23f88 <_start@@Base+0xedac>
   24054:	mov	r0, #0
   24058:	mov	r1, #0
   2405c:	b	23f24 <_start@@Base+0xed48>
   24060:	mov	r8, #0
   24064:	mov	r9, #0
   24068:	b	23ec4 <_start@@Base+0xece8>
   2406c:	mov	r8, #0
   24070:	mov	r9, #0
   24074:	b	23eb0 <_start@@Base+0xecd4>
   24078:	mov	r8, #0
   2407c:	mov	r9, #0
   24080:	b	23f10 <_start@@Base+0xed34>
   24084:	mov	r8, #0
   24088:	mov	r9, #0
   2408c:	b	23efc <_start@@Base+0xed20>
   24090:	mov	r8, #0
   24094:	mov	r9, #0
   24098:	b	23eec <_start@@Base+0xed10>
   2409c:	mov	r4, #0
   240a0:	mov	r5, #0
   240a4:	b	23ed8 <_start@@Base+0xecfc>
   240a8:	ldr	r3, [sp, #52]	; 0x34
   240ac:	mov	r0, ip
   240b0:	str	r3, [sp]
   240b4:	mov	r1, r6
   240b8:	mov	r3, #6
   240bc:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   240c0:	cmp	r6, r0
   240c4:	beq	23f88 <_start@@Base+0xedac>
   240c8:	ldr	r2, [sp, #48]	; 0x30
   240cc:	mvn	r4, #1
   240d0:	mvn	r5, #0
   240d4:	mov	r3, #1
   240d8:	strd	r4, [r2]
   240dc:	mov	r6, r0
   240e0:	str	r3, [r7]
   240e4:	b	23f88 <_start@@Base+0xedac>
   240e8:			; <UNDEFINED> instruction: 0xffffffff
   240ec:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   240f0:	strbvs	r0, [r7, #-0]!
   240f4:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   240f8:	andeq	r0, r0, r0
   240fc:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   24100:	andeq	r0, r0, r0
   24104:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   24108:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   2410c:	andeq	r0, r0, r0
   24110:			; <UNDEFINED> instruction: 0xffff0000
   24114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24118:	mov	r4, r1
   2411c:	sub	sp, sp, #12
   24120:	mov	r1, r2
   24124:	mov	r5, r0
   24128:	mov	r0, r4
   2412c:	mov	sl, r2
   24130:	mov	fp, r3
   24134:	bl	15308 <_start@@Base+0x12c>
   24138:	add	r3, pc, #776	; 0x308
   2413c:	ldrd	r2, [r3]
   24140:	ldr	r8, [sp, #48]	; 0x30
   24144:	ldr	r9, [sp, #52]	; 0x34
   24148:	cmp	r1, r3
   2414c:	cmpeq	r0, r2
   24150:	bhi	24190 <_start@@Base+0xefb4>
   24154:	add	r3, pc, #756	; 0x2f4
   24158:	ldrd	r2, [r3]
   2415c:	cmp	r1, r3
   24160:	cmpeq	r0, r2
   24164:	bhi	242dc <_start@@Base+0xf100>
   24168:	add	r3, pc, #744	; 0x2e8
   2416c:	ldrd	r2, [r3]
   24170:	bic	r1, r1, #255	; 0xff
   24174:	mov	r0, #0
   24178:	cmp	r1, r3
   2417c:	cmpeq	r0, r2
   24180:	beq	2439c <_start@@Base+0xf1c0>
   24184:	mov	r0, r4
   24188:	add	sp, sp, #12
   2418c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24190:	add	r3, pc, #712	; 0x2c8
   24194:	ldrd	r2, [r3]
   24198:	cmp	r1, r3
   2419c:	cmpeq	r0, r2
   241a0:	bhi	241f4 <_start@@Base+0xf018>
   241a4:	add	r3, pc, #700	; 0x2bc
   241a8:	ldrd	r2, [r3]
   241ac:	cmp	r1, r3
   241b0:	cmpeq	r0, r2
   241b4:	bne	24184 <_start@@Base+0xefa8>
   241b8:	sub	r3, sl, r4
   241bc:	cmp	r3, #8
   241c0:	ble	24184 <_start@@Base+0xefa8>
   241c4:	ldrb	r3, [r4, #8]
   241c8:	cmp	r3, #46	; 0x2e
   241cc:	bne	24184 <_start@@Base+0xefa8>
   241d0:	str	r9, [sp, #52]	; 0x34
   241d4:	str	r8, [sp, #48]	; 0x30
   241d8:	mov	r3, fp
   241dc:	mov	r2, sl
   241e0:	add	r1, r4, #9
   241e4:	mov	r0, r5
   241e8:	add	sp, sp, #12
   241ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241f0:	b	23e88 <_start@@Base+0xecac>
   241f4:	add	r3, pc, #628	; 0x274
   241f8:	ldrd	r2, [r3]
   241fc:	cmp	r1, r3
   24200:	cmpeq	r0, r2
   24204:	bls	2434c <_start@@Base+0xf170>
   24208:	add	r3, pc, #616	; 0x268
   2420c:	ldrd	r2, [r3]
   24210:	cmp	r1, r3
   24214:	cmpeq	r0, r2
   24218:	beq	2440c <_start@@Base+0xf230>
   2421c:	add	r3, pc, #604	; 0x25c
   24220:	ldrd	r2, [r3]
   24224:	cmp	r1, r3
   24228:	cmpeq	r0, r2
   2422c:	bne	24184 <_start@@Base+0xefa8>
   24230:	add	r6, r4, #8
   24234:	mov	r0, r6
   24238:	mov	r1, sl
   2423c:	bl	15308 <_start@@Base+0x12c>
   24240:	add	r3, pc, #576	; 0x240
   24244:	ldrd	r2, [r3]
   24248:	mov	r0, #0
   2424c:	cmp	r1, r3
   24250:	cmpeq	r0, r2
   24254:	bne	24184 <_start@@Base+0xefa8>
   24258:	sub	r3, sl, r6
   2425c:	cmp	r3, #4
   24260:	ble	24184 <_start@@Base+0xefa8>
   24264:	ldrb	r3, [r4, #12]
   24268:	cmp	r3, #46	; 0x2e
   2426c:	bne	24184 <_start@@Base+0xefa8>
   24270:	add	r7, r4, #13
   24274:	cmp	r6, r7
   24278:	beq	24184 <_start@@Base+0xefa8>
   2427c:	mov	r1, sl
   24280:	mov	r0, r7
   24284:	bl	15308 <_start@@Base+0x12c>
   24288:	mov	r0, #0
   2428c:	and	r1, r1, #-16777216	; 0xff000000
   24290:	cmp	r1, #2013265920	; 0x78000000
   24294:	cmpeq	r0, #0
   24298:	movne	r4, r7
   2429c:	bne	24184 <_start@@Base+0xefa8>
   242a0:	str	r9, [sp]
   242a4:	mov	r2, sl
   242a8:	mov	r0, r5
   242ac:	mov	r3, #1
   242b0:	mov	r1, r7
   242b4:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   242b8:	cmp	r7, r0
   242bc:	mov	r4, r0
   242c0:	beq	24184 <_start@@Base+0xefa8>
   242c4:	mov	r0, #0
   242c8:	mov	r1, #0
   242cc:	mov	r3, #0
   242d0:	strd	r0, [r8]
   242d4:	str	r3, [fp]
   242d8:	b	24184 <_start@@Base+0xefa8>
   242dc:	add	r7, pc, #428	; 0x1ac
   242e0:	ldrd	r6, [r7]
   242e4:	bic	r3, r1, #255	; 0xff
   242e8:	mov	r2, #0
   242ec:	cmp	r3, r7
   242f0:	cmpeq	r2, r6
   242f4:	beq	243d0 <_start@@Base+0xf1f4>
   242f8:	add	r3, pc, #408	; 0x198
   242fc:	ldrd	r2, [r3]
   24300:	and	r0, r0, #-16777216	; 0xff000000
   24304:	cmp	r1, r3
   24308:	cmpeq	r0, r2
   2430c:	bne	24184 <_start@@Base+0xefa8>
   24310:	sub	r3, sl, r4
   24314:	cmp	r3, #5
   24318:	ble	24184 <_start@@Base+0xefa8>
   2431c:	ldrb	r3, [r4, #5]
   24320:	cmp	r3, #46	; 0x2e
   24324:	bne	24184 <_start@@Base+0xefa8>
   24328:	str	r9, [sp, #52]	; 0x34
   2432c:	str	r8, [sp, #48]	; 0x30
   24330:	mov	r3, fp
   24334:	mov	r2, sl
   24338:	add	r1, r4, #6
   2433c:	mov	r0, r5
   24340:	add	sp, sp, #12
   24344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24348:	b	16ccc <_start@@Base+0x1af0>
   2434c:	add	r3, pc, #332	; 0x14c
   24350:	ldrd	r2, [r3]
   24354:	cmp	r1, r3
   24358:	cmpeq	r0, r2
   2435c:	bne	24184 <_start@@Base+0xefa8>
   24360:	sub	r3, sl, r4
   24364:	cmp	r3, #8
   24368:	ble	24184 <_start@@Base+0xefa8>
   2436c:	ldrb	r3, [r4, #8]
   24370:	cmp	r3, #46	; 0x2e
   24374:	bne	24184 <_start@@Base+0xefa8>
   24378:	str	r9, [sp, #52]	; 0x34
   2437c:	str	r8, [sp, #48]	; 0x30
   24380:	mov	r3, fp
   24384:	mov	r2, sl
   24388:	add	r1, r4, #9
   2438c:	mov	r0, r5
   24390:	add	sp, sp, #12
   24394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24398:	b	16ad0 <_start@@Base+0x18f4>
   2439c:	sub	r3, sl, r4
   243a0:	cmp	r3, #3
   243a4:	ble	24184 <_start@@Base+0xefa8>
   243a8:	ldrb	r3, [r4, #3]
   243ac:	cmp	r3, #46	; 0x2e
   243b0:	bne	24184 <_start@@Base+0xefa8>
   243b4:	mov	r3, fp
   243b8:	mov	r2, sl
   243bc:	add	r1, r4, #4
   243c0:	mov	r0, r5
   243c4:	add	sp, sp, #12
   243c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243cc:	b	16894 <_start@@Base+0x16b8>
   243d0:	sub	r3, sl, r4
   243d4:	cmp	r3, #3
   243d8:	ble	24184 <_start@@Base+0xefa8>
   243dc:	ldrb	r3, [r4, #3]
   243e0:	cmp	r3, #46	; 0x2e
   243e4:	bne	24184 <_start@@Base+0xefa8>
   243e8:	str	r9, [sp, #52]	; 0x34
   243ec:	str	r8, [sp, #48]	; 0x30
   243f0:	mov	r3, fp
   243f4:	mov	r2, sl
   243f8:	add	r1, r4, #4
   243fc:	mov	r0, r5
   24400:	add	sp, sp, #12
   24404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24408:	b	2000c <_start@@Base+0xae30>
   2440c:	sub	r3, sl, r4
   24410:	cmp	r3, #8
   24414:	ble	24184 <_start@@Base+0xefa8>
   24418:	ldrb	r3, [r4, #8]
   2441c:	cmp	r3, #46	; 0x2e
   24420:	bne	24184 <_start@@Base+0xefa8>
   24424:	str	r9, [sp, #52]	; 0x34
   24428:	str	r8, [sp, #48]	; 0x30
   2442c:	mov	r3, fp
   24430:	mov	r2, sl
   24434:	add	r1, r4, #9
   24438:	mov	r0, r5
   2443c:	add	sp, sp, #12
   24440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24444:	b	23c2c <_start@@Base+0xea50>
   24448:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   2444c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   24450:	ldrshvc	pc, [pc, #255]	; 24557 <_start@@Base+0xf37b>	; <UNPREDICTABLE>
   24454:	cmnmi	pc, #28416	; 0x6f00
   24458:	andeq	r0, r0, r0
   2445c:	cmnmi	lr, r0, lsl #18
   24460:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   24464:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   24468:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   2446c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   24470:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   24474:	mcrvs	7, 3, r6, cr5, cr15, {2}
   24478:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   2447c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   24480:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   24484:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   24488:	andeq	r0, r0, r0
   2448c:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   24490:	andeq	r0, r0, r0
   24494:	strbtmi	r6, [pc], -r0, lsl #30
   24498:	andvc	r0, r0, #0
   2449c:	cmnmi	pc, #28416	; 0x6f00
   244a0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   244a4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   244a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244ac:	mov	r4, r1
   244b0:	sub	sp, sp, #28
   244b4:	mov	r1, r2
   244b8:	mov	r8, r0
   244bc:	mov	r0, r4
   244c0:	mov	r5, r2
   244c4:	mov	sl, r3
   244c8:	bl	15308 <_start@@Base+0x12c>
   244cc:	add	r3, pc, #956	; 0x3bc
   244d0:	ldrd	r2, [r3]
   244d4:	ldr	r7, [sp, #64]	; 0x40
   244d8:	ldr	fp, [sp, #68]	; 0x44
   244dc:	cmp	r1, r3
   244e0:	cmpeq	r0, r2
   244e4:	bhi	24508 <_start@@Base+0xf32c>
   244e8:	add	r3, pc, #936	; 0x3a8
   244ec:	ldrd	r2, [r3]
   244f0:	cmp	r1, r3
   244f4:	cmpeq	r0, r2
   244f8:	beq	2461c <_start@@Base+0xf440>
   244fc:	mov	r0, r4
   24500:	add	sp, sp, #28
   24504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24508:	add	r3, pc, #912	; 0x390
   2450c:	ldrd	r2, [r3]
   24510:	cmp	r1, r3
   24514:	cmpeq	r0, r2
   24518:	beq	2469c <_start@@Base+0xf4c0>
   2451c:	add	r3, pc, #900	; 0x384
   24520:	ldrd	r2, [r3]
   24524:	cmp	r1, r3
   24528:	cmpeq	r0, r2
   2452c:	bne	244fc <_start@@Base+0xf320>
   24530:	mov	r1, r5
   24534:	add	r0, r4, #8
   24538:	bl	15308 <_start@@Base+0x12c>
   2453c:	add	r3, pc, #876	; 0x36c
   24540:	ldrd	r2, [r3]
   24544:	cmp	r1, r3
   24548:	cmpeq	r0, r2
   2454c:	bne	244fc <_start@@Base+0xf320>
   24550:	mov	r1, r5
   24554:	add	r0, r4, #16
   24558:	bl	15308 <_start@@Base+0x12c>
   2455c:	add	r3, pc, #852	; 0x354
   24560:	ldrd	r2, [r3]
   24564:	cmp	r1, r3
   24568:	cmpeq	r0, r2
   2456c:	bne	244fc <_start@@Base+0xf320>
   24570:	mov	r1, r5
   24574:	add	r0, r4, #24
   24578:	bl	15308 <_start@@Base+0x12c>
   2457c:	add	r3, pc, #828	; 0x33c
   24580:	ldrd	r2, [r3]
   24584:	cmp	r1, r3
   24588:	cmpeq	r0, r2
   2458c:	bne	244fc <_start@@Base+0xf320>
   24590:	add	r6, r4, #32
   24594:	mov	r0, r6
   24598:	mov	r1, r5
   2459c:	bl	15308 <_start@@Base+0x12c>
   245a0:	mov	r0, #0
   245a4:	and	r1, r1, #-16777216	; 0xff000000
   245a8:	cmp	r1, #1694498816	; 0x65000000
   245ac:	cmpeq	r0, #0
   245b0:	bne	244fc <_start@@Base+0xf320>
   245b4:	sub	r6, r5, r6
   245b8:	cmp	r6, #1
   245bc:	ble	244fc <_start@@Base+0xf320>
   245c0:	ldrb	r3, [r4, #33]	; 0x21
   245c4:	cmp	r3, #46	; 0x2e
   245c8:	bne	244fc <_start@@Base+0xf320>
   245cc:	add	r9, r4, #34	; 0x22
   245d0:	mov	r0, r9
   245d4:	mov	r1, r5
   245d8:	bl	15308 <_start@@Base+0x12c>
   245dc:	mov	r2, #0
   245e0:	bic	r3, r1, #255	; 0xff
   245e4:	strd	r0, [sp, #8]
   245e8:	add	r1, pc, #728	; 0x2d8
   245ec:	ldrd	r0, [r1]
   245f0:	cmp	r3, r1
   245f4:	cmpeq	r2, r0
   245f8:	beq	24c2c <_start@@Base+0xfa50>
   245fc:	add	r3, pc, #716	; 0x2cc
   24600:	ldrd	r2, [r3]
   24604:	ldrd	r0, [sp, #8]
   24608:	cmp	r1, r3
   2460c:	cmpeq	r0, r2
   24610:	beq	24bbc <_start@@Base+0xf9e0>
   24614:	mov	r4, r9
   24618:	b	244fc <_start@@Base+0xf320>
   2461c:	mov	r1, r5
   24620:	add	r0, r4, #8
   24624:	bl	15308 <_start@@Base+0x12c>
   24628:	add	r3, pc, #680	; 0x2a8
   2462c:	ldrd	r2, [r3]
   24630:	cmp	r1, r3
   24634:	cmpeq	r0, r2
   24638:	bne	244fc <_start@@Base+0xf320>
   2463c:	add	r6, r4, #16
   24640:	mov	r0, r6
   24644:	mov	r1, r5
   24648:	bl	15308 <_start@@Base+0x12c>
   2464c:	mov	r0, #0
   24650:	and	r1, r1, #-16777216	; 0xff000000
   24654:	cmp	r1, #1912602624	; 0x72000000
   24658:	cmpeq	r0, #0
   2465c:	bne	244fc <_start@@Base+0xf320>
   24660:	sub	r6, r5, r6
   24664:	cmp	r6, #1
   24668:	ble	244fc <_start@@Base+0xf320>
   2466c:	ldrb	r3, [r4, #17]
   24670:	cmp	r3, #46	; 0x2e
   24674:	bne	244fc <_start@@Base+0xf320>
   24678:	str	fp, [sp, #68]	; 0x44
   2467c:	str	r7, [sp, #64]	; 0x40
   24680:	mov	r3, sl
   24684:	mov	r2, r5
   24688:	add	r1, r4, #18
   2468c:	mov	r0, r8
   24690:	add	sp, sp, #28
   24694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24698:	b	16598 <_start@@Base+0x13bc>
   2469c:	mov	r1, r5
   246a0:	add	r0, r4, #8
   246a4:	bl	15308 <_start@@Base+0x12c>
   246a8:	add	r3, pc, #560	; 0x230
   246ac:	ldrd	r2, [r3]
   246b0:	cmp	r1, r3
   246b4:	cmpeq	r0, r2
   246b8:	bhi	24768 <_start@@Base+0xf58c>
   246bc:	add	r3, pc, #548	; 0x224
   246c0:	ldrd	r2, [r3]
   246c4:	cmp	r1, r3
   246c8:	cmpeq	r0, r2
   246cc:	bls	24808 <_start@@Base+0xf62c>
   246d0:	add	r3, pc, #536	; 0x218
   246d4:	ldrd	r2, [r3]
   246d8:	cmp	r1, r3
   246dc:	cmpeq	r0, r2
   246e0:	beq	24b1c <_start@@Base+0xf940>
   246e4:	add	r3, pc, #524	; 0x20c
   246e8:	ldrd	r2, [r3]
   246ec:	cmp	r1, r3
   246f0:	cmpeq	r0, r2
   246f4:	bne	244fc <_start@@Base+0xf320>
   246f8:	add	r6, r4, #16
   246fc:	mov	r0, r6
   24700:	mov	r1, r5
   24704:	bl	15308 <_start@@Base+0x12c>
   24708:	ldr	r3, [pc, #536]	; 24928 <_start@@Base+0xf74c>
   2470c:	mov	r2, #0
   24710:	and	r3, r3, r1
   24714:	ldr	r1, [pc, #528]	; 2492c <_start@@Base+0xf750>
   24718:	and	r2, r2, r0
   2471c:	cmp	r3, r1
   24720:	mov	r0, #0
   24724:	cmpeq	r2, r0
   24728:	bne	244fc <_start@@Base+0xf320>
   2472c:	sub	r6, r5, r6
   24730:	cmp	r6, #2
   24734:	ble	244fc <_start@@Base+0xf320>
   24738:	ldrb	r3, [r4, #18]
   2473c:	cmp	r3, #46	; 0x2e
   24740:	bne	244fc <_start@@Base+0xf320>
   24744:	str	fp, [sp, #68]	; 0x44
   24748:	str	r7, [sp, #64]	; 0x40
   2474c:	mov	r3, sl
   24750:	mov	r2, r5
   24754:	add	r1, r4, #19
   24758:	mov	r0, r8
   2475c:	add	sp, sp, #28
   24760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24764:	b	2000c <_start@@Base+0xae30>
   24768:	add	r3, pc, #400	; 0x190
   2476c:	ldrd	r2, [r3]
   24770:	cmp	r1, r3
   24774:	cmpeq	r0, r2
   24778:	beq	24934 <_start@@Base+0xf758>
   2477c:	add	r3, pc, #388	; 0x184
   24780:	ldrd	r2, [r3]
   24784:	cmp	r1, r3
   24788:	cmpeq	r0, r2
   2478c:	bhi	24998 <_start@@Base+0xf7bc>
   24790:	add	r3, pc, #376	; 0x178
   24794:	ldrd	r2, [r3]
   24798:	cmp	r1, r3
   2479c:	cmpeq	r0, r2
   247a0:	bne	244fc <_start@@Base+0xf320>
   247a4:	add	r6, r4, #16
   247a8:	mov	r0, r6
   247ac:	mov	r1, r5
   247b0:	bl	15308 <_start@@Base+0x12c>
   247b4:	add	r3, pc, #348	; 0x15c
   247b8:	ldrd	r2, [r3]
   247bc:	bic	r0, r0, #255	; 0xff
   247c0:	cmp	r1, r3
   247c4:	cmpeq	r0, r2
   247c8:	bne	244fc <_start@@Base+0xf320>
   247cc:	sub	r6, r5, r6
   247d0:	cmp	r6, #7
   247d4:	ble	244fc <_start@@Base+0xf320>
   247d8:	ldrb	r3, [r4, #23]
   247dc:	cmp	r3, #46	; 0x2e
   247e0:	bne	244fc <_start@@Base+0xf320>
   247e4:	str	fp, [sp, #68]	; 0x44
   247e8:	str	r7, [sp, #64]	; 0x40
   247ec:	mov	r3, sl
   247f0:	mov	r2, r5
   247f4:	add	r1, r4, #24
   247f8:	mov	r0, r8
   247fc:	add	sp, sp, #28
   24800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24804:	b	16ad0 <_start@@Base+0x18f4>
   24808:	add	r3, pc, #272	; 0x110
   2480c:	ldrd	r2, [r3]
   24810:	cmp	r1, r3
   24814:	cmpeq	r0, r2
   24818:	bne	244fc <_start@@Base+0xf320>
   2481c:	add	r6, r4, #16
   24820:	mov	r0, r6
   24824:	mov	r1, r5
   24828:	bl	15308 <_start@@Base+0x12c>
   2482c:	ldr	r3, [pc, #244]	; 24928 <_start@@Base+0xf74c>
   24830:	mov	r2, #0
   24834:	and	r3, r3, r1
   24838:	ldr	r1, [pc, #240]	; 24930 <_start@@Base+0xf754>
   2483c:	and	r2, r2, r0
   24840:	cmp	r3, r1
   24844:	mov	r0, #0
   24848:	cmpeq	r2, r0
   2484c:	bne	244fc <_start@@Base+0xf320>
   24850:	sub	r6, r5, r6
   24854:	cmp	r6, #2
   24858:	ble	244fc <_start@@Base+0xf320>
   2485c:	ldrb	r3, [r4, #18]
   24860:	cmp	r3, #46	; 0x2e
   24864:	bne	244fc <_start@@Base+0xf320>
   24868:	str	fp, [sp, #68]	; 0x44
   2486c:	str	r7, [sp, #64]	; 0x40
   24870:	mov	r3, sl
   24874:	mov	r2, r5
   24878:	add	r1, r4, #19
   2487c:	mov	r0, r8
   24880:	add	sp, sp, #28
   24884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24888:	b	16894 <_start@@Base+0x16b8>
   2488c:	nop			; (mov r0, r0)
   24890:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   24894:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24898:	cmnvs	r3, lr, lsr #18
   2489c:			; <UNDEFINED> instruction: 0x46616e74
   248a0:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   248a4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   248a8:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   248ac:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   248b0:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   248b4:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   248b8:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   248bc:	cmnpl	r0, #-1073741800	; 0xc0000018
   248c0:	cmnvs	ip, #100, 10	; 0x19000000
   248c4:	svcvs	0x006d496e
   248c8:	andeq	r0, r0, r0
   248cc:	strbtmi	r6, [pc], -r0, lsl #30
   248d0:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   248d4:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   248d8:	cmnvs	r3, r5, ror #8
   248dc:	cmnmi	r8, #-2147483620	; 0x8000001c
   248e0:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   248e4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   248e8:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   248ec:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   248f0:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   248f4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   248f8:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   248fc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24900:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   24904:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24908:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   2490c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24910:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   24914:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24918:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   2491c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   24920:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   24924:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24928:			; <UNDEFINED> instruction: 0xffff0000
   2492c:	svcvs	0x006f0000
   24930:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   24934:	add	r6, r4, #16
   24938:	mov	r0, r6
   2493c:	mov	r1, r5
   24940:	bl	15308 <_start@@Base+0x12c>
   24944:	add	r3, pc, #940	; 0x3ac
   24948:	ldrd	r2, [r3]
   2494c:	bic	r0, r0, #255	; 0xff
   24950:	cmp	r1, r3
   24954:	cmpeq	r0, r2
   24958:	bne	244fc <_start@@Base+0xf320>
   2495c:	sub	r6, r5, r6
   24960:	cmp	r6, #7
   24964:	ble	244fc <_start@@Base+0xf320>
   24968:	ldrb	r3, [r4, #23]
   2496c:	cmp	r3, #46	; 0x2e
   24970:	bne	244fc <_start@@Base+0xf320>
   24974:	str	fp, [sp, #68]	; 0x44
   24978:	str	r7, [sp, #64]	; 0x40
   2497c:	mov	r3, sl
   24980:	mov	r2, r5
   24984:	add	r1, r4, #24
   24988:	mov	r0, r8
   2498c:	add	sp, sp, #28
   24990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24994:	b	23e88 <_start@@Base+0xecac>
   24998:	add	r3, pc, #864	; 0x360
   2499c:	ldrd	r2, [r3]
   249a0:	cmp	r1, r3
   249a4:	cmpeq	r0, r2
   249a8:	bne	244fc <_start@@Base+0xf320>
   249ac:	add	r9, r4, #16
   249b0:	mov	r0, r9
   249b4:	mov	r1, r5
   249b8:	bl	15308 <_start@@Base+0x12c>
   249bc:	mov	r3, r1
   249c0:	bic	r2, r0, #255	; 0xff
   249c4:	strd	r0, [sp, #8]
   249c8:	add	r1, pc, #824	; 0x338
   249cc:	ldrd	r0, [r1]
   249d0:	cmp	r3, r1
   249d4:	cmpeq	r2, r0
   249d8:	beq	24b80 <_start@@Base+0xf9a4>
   249dc:	add	r3, pc, #812	; 0x32c
   249e0:	ldrd	r2, [r3]
   249e4:	ldrd	r0, [sp, #8]
   249e8:	cmp	r1, r3
   249ec:	cmpeq	r0, r2
   249f0:	bne	244fc <_start@@Base+0xf320>
   249f4:	add	r6, r4, #24
   249f8:	mov	r0, r6
   249fc:	mov	r1, r5
   24a00:	bl	15308 <_start@@Base+0x12c>
   24a04:	add	r3, pc, #780	; 0x30c
   24a08:	ldrd	r2, [r3]
   24a0c:	mov	r0, #0
   24a10:	bic	r1, r1, #255	; 0xff
   24a14:	cmp	r1, r3
   24a18:	cmpeq	r0, r2
   24a1c:	bne	244fc <_start@@Base+0xf320>
   24a20:	sub	r6, r5, r6
   24a24:	cmp	r6, #3
   24a28:	ble	244fc <_start@@Base+0xf320>
   24a2c:	ldrb	r3, [r4, #27]
   24a30:	cmp	r3, #46	; 0x2e
   24a34:	bne	244fc <_start@@Base+0xf320>
   24a38:	add	r6, r4, #28
   24a3c:	sub	r3, r5, r6
   24a40:	cmp	r3, #8
   24a44:	bls	24c68 <_start@@Base+0xfa8c>
   24a48:	ldrb	r2, [r4, #35]	; 0x23
   24a4c:	mov	r3, #0
   24a50:	strd	r2, [sp, #8]
   24a54:	ldrb	r0, [r4, #34]	; 0x22
   24a58:	lsr	r3, r0, #24
   24a5c:	lsl	r2, r0, #8
   24a60:	ldrd	r0, [sp, #8]
   24a64:	orr	r0, r0, r2
   24a68:	orr	r1, r1, r3
   24a6c:	strd	r0, [sp, #8]
   24a70:	ldrb	r0, [r4, #33]	; 0x21
   24a74:	lsr	r3, r0, #16
   24a78:	lsl	r2, r0, #16
   24a7c:	ldrd	r0, [sp, #8]
   24a80:	orr	r0, r0, r2
   24a84:	orr	r1, r1, r3
   24a88:	strd	r0, [sp, #8]
   24a8c:	ldrb	r0, [r4, #32]
   24a90:	lsr	r3, r0, #8
   24a94:	ldrd	r0, [sp, #8]
   24a98:	orr	r1, r1, r3
   24a9c:	mov	r3, r1
   24aa0:	ldrb	r1, [r4, #31]
   24aa4:	orr	r1, r1, r3
   24aa8:	ldrb	r2, [r4, #30]
   24aac:	mov	r3, #0
   24ab0:	strd	r2, [sp, #8]
   24ab4:	ldr	ip, [sp, #8]
   24ab8:	lsl	r3, ip, #8
   24abc:	orr	r3, r3, r1
   24ac0:	ldrb	r0, [r4, #29]
   24ac4:	mov	r1, #0
   24ac8:	strd	r0, [sp, #8]
   24acc:	ldr	ip, [sp, #8]
   24ad0:	lsl	r1, ip, #16
   24ad4:	orr	r3, r3, r1
   24ad8:	ldrb	r0, [r4, #28]
   24adc:	mov	r1, #0
   24ae0:	mov	r2, #0
   24ae4:	strd	r0, [sp, #16]
   24ae8:	ldr	r1, [sp, #16]
   24aec:	lsl	r1, r1, #24
   24af0:	str	r1, [sp, #12]
   24af4:	mov	r1, #0
   24af8:	str	r1, [sp, #8]
   24afc:	ldrd	r0, [sp, #8]
   24b00:	orr	r1, r1, r3
   24b04:	and	r3, r1, #-16777216	; 0xff000000
   24b08:	cmp	r3, #2013265920	; 0x78000000
   24b0c:	cmpeq	r2, #0
   24b10:	beq	24c98 <_start@@Base+0xfabc>
   24b14:	mov	r4, r6
   24b18:	b	244fc <_start@@Base+0xf320>
   24b1c:	add	r6, r4, #16
   24b20:	mov	r0, r6
   24b24:	mov	r1, r5
   24b28:	bl	15308 <_start@@Base+0x12c>
   24b2c:	add	r3, pc, #492	; 0x1ec
   24b30:	ldrd	r2, [r3]
   24b34:	mov	r0, #0
   24b38:	cmp	r1, r3
   24b3c:	cmpeq	r0, r2
   24b40:	bne	244fc <_start@@Base+0xf320>
   24b44:	sub	r6, r5, r6
   24b48:	cmp	r6, #4
   24b4c:	ble	244fc <_start@@Base+0xf320>
   24b50:	ldrb	r3, [r4, #20]
   24b54:	cmp	r3, #46	; 0x2e
   24b58:	bne	244fc <_start@@Base+0xf320>
   24b5c:	str	fp, [sp, #68]	; 0x44
   24b60:	str	r7, [sp, #64]	; 0x40
   24b64:	mov	r3, sl
   24b68:	mov	r2, r5
   24b6c:	add	r1, r4, #21
   24b70:	mov	r0, r8
   24b74:	add	sp, sp, #28
   24b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b7c:	b	16ccc <_start@@Base+0x1af0>
   24b80:	sub	r9, r5, r9
   24b84:	cmp	r9, #7
   24b88:	ble	244fc <_start@@Base+0xf320>
   24b8c:	ldrb	r3, [r4, #23]
   24b90:	cmp	r3, #46	; 0x2e
   24b94:	bne	244fc <_start@@Base+0xf320>
   24b98:	str	fp, [sp, #68]	; 0x44
   24b9c:	str	r7, [sp, #64]	; 0x40
   24ba0:	mov	r3, sl
   24ba4:	mov	r2, r5
   24ba8:	add	r1, r4, #24
   24bac:	mov	r0, r8
   24bb0:	add	sp, sp, #28
   24bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bb8:	b	23c2c <_start@@Base+0xea50>
   24bbc:	add	r6, r4, #42	; 0x2a
   24bc0:	mov	r0, r6
   24bc4:	mov	r1, r5
   24bc8:	bl	15308 <_start@@Base+0x12c>
   24bcc:	ldr	r3, [pc, #340]	; 24d28 <_start@@Base+0xfb4c>
   24bd0:	mov	r2, #0
   24bd4:	and	r3, r3, r1
   24bd8:	ldr	r1, [pc, #332]	; 24d2c <_start@@Base+0xfb50>
   24bdc:	and	r2, r2, r0
   24be0:	cmp	r3, r1
   24be4:	mov	r0, #0
   24be8:	cmpeq	r2, r0
   24bec:	bne	24614 <_start@@Base+0xf438>
   24bf0:	str	fp, [sp]
   24bf4:	mov	r2, r5
   24bf8:	mov	r0, r8
   24bfc:	mov	r3, #2
   24c00:	mov	r1, r6
   24c04:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   24c08:	cmp	r6, r0
   24c0c:	mov	r4, r0
   24c10:	beq	24614 <_start@@Base+0xf438>
   24c14:	mov	r0, #0
   24c18:	mov	r1, #0
   24c1c:	mov	r3, #0
   24c20:	strd	r0, [r7]
   24c24:	str	r3, [sl]
   24c28:	b	244fc <_start@@Base+0xf320>
   24c2c:	str	fp, [sp]
   24c30:	mov	r2, r5
   24c34:	mov	r0, r8
   24c38:	mov	r3, #3
   24c3c:	mov	r1, r9
   24c40:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   24c44:	cmp	r9, r0
   24c48:	mov	r4, r0
   24c4c:	beq	244fc <_start@@Base+0xf320>
   24c50:	mov	r0, #17
   24c54:	mov	r1, #0
   24c58:	mov	r3, #0
   24c5c:	strd	r0, [r7]
   24c60:	str	r3, [sl]
   24c64:	b	244fc <_start@@Base+0xf320>
   24c68:	sub	r3, r3, #1
   24c6c:	cmp	r3, #7
   24c70:	addls	pc, pc, r3, lsl #2
   24c74:	b	24b14 <_start@@Base+0xf938>
   24c78:	b	24d58 <_start@@Base+0xfb7c>
   24c7c:	b	24d50 <_start@@Base+0xfb74>
   24c80:	b	24d48 <_start@@Base+0xfb6c>
   24c84:	b	24d40 <_start@@Base+0xfb64>
   24c88:	b	24d30 <_start@@Base+0xfb54>
   24c8c:	b	24ce4 <_start@@Base+0xfb08>
   24c90:	b	24cd4 <_start@@Base+0xfaf8>
   24c94:	b	24a48 <_start@@Base+0xf86c>
   24c98:	str	fp, [sp]
   24c9c:	mov	r2, r5
   24ca0:	mov	r0, r8
   24ca4:	mov	r3, #1
   24ca8:	mov	r1, r6
   24cac:	bl	2da68 <flatcc_json_parser_match_constant@@Base>
   24cb0:	cmp	r6, r0
   24cb4:	mov	r4, r0
   24cb8:	beq	244fc <_start@@Base+0xf320>
   24cbc:	mov	r3, #0
   24cc0:	mov	r2, #0
   24cc4:	strd	r2, [r7]
   24cc8:	ldr	r3, [sp, #8]
   24ccc:	str	r3, [sl]
   24cd0:	b	244fc <_start@@Base+0xf320>
   24cd4:	mov	r2, #0
   24cd8:	mov	r3, #0
   24cdc:	strd	r2, [sp, #8]
   24ce0:	b	24a54 <_start@@Base+0xf878>
   24ce4:	mov	r2, #0
   24ce8:	mov	r3, #0
   24cec:	strd	r2, [sp, #8]
   24cf0:	b	24a70 <_start@@Base+0xf894>
   24cf4:	nop			; (mov r0, r0)
   24cf8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24cfc:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   24d00:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   24d04:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24d08:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24d0c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   24d10:	rsbsvc	r7, r4, r5, ror #18
   24d14:	svcvs	0x0074656d
   24d18:	andeq	r0, r0, r0
   24d1c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24d20:	andeq	r0, r0, r0
   24d24:	svcvs	0x006c6f72
   24d28:			; <UNDEFINED> instruction: 0xffff0000
   24d2c:	cmnvs	ip, r0
   24d30:	mov	r2, #0
   24d34:	mov	r3, #0
   24d38:	strd	r2, [sp, #8]
   24d3c:	b	24a8c <_start@@Base+0xf8b0>
   24d40:	mov	r3, #0
   24d44:	b	24aa0 <_start@@Base+0xf8c4>
   24d48:	mov	r1, #0
   24d4c:	b	24aa8 <_start@@Base+0xf8cc>
   24d50:	mov	r3, #0
   24d54:	b	24ac0 <_start@@Base+0xf8e4>
   24d58:	mov	r3, #0
   24d5c:	b	24ad8 <_start@@Base+0xf8fc>

00024d60 <test_json@@Base>:
   24d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d64:	sub	sp, sp, #388	; 0x184
   24d68:	add	ip, sp, #152	; 0x98
   24d6c:	ldr	r4, [sp, #428]	; 0x1ac
   24d70:	mov	r6, r0
   24d74:	add	r0, sp, #104	; 0x68
   24d78:	mov	r7, r0
   24d7c:	str	r0, [sp, #28]
   24d80:	mov	r0, ip
   24d84:	mov	r8, r2
   24d88:	mov	r9, r3
   24d8c:	str	ip, [sp, #20]
   24d90:	mov	r5, r1
   24d94:	ldr	sl, [sp, #424]	; 0x1a8
   24d98:	bl	262d0 <flatcc_builder_init@@Base>
   24d9c:	mov	r0, r7
   24da0:	mov	r1, #0
   24da4:	bl	3d1b0 <flatcc_json_printer_init_dynamic_buffer@@Base>
   24da8:	lsr	r3, r4, #3
   24dac:	tst	r4, #16
   24db0:	and	r3, r3, #1
   24db4:	lsr	r1, r4, #1
   24db8:	and	r1, r1, #1
   24dbc:	lsr	r2, r4, #2
   24dc0:	strb	r3, [sp, #133]	; 0x85
   24dc4:	ldr	r7, [pc, #1096]	; 25214 <test_json@@Base+0x4b4>
   24dc8:	movne	r3, #2
   24dcc:	and	r2, r2, #1
   24dd0:	strb	r1, [sp, #131]	; 0x83
   24dd4:	strbne	r3, [sp, #129]	; 0x81
   24dd8:	and	r1, r4, #1
   24ddc:	tst	r4, #32
   24de0:	add	r7, pc, r7
   24de4:	strb	r2, [sp, #132]	; 0x84
   24de8:	strb	r1, [sp, #130]	; 0x82
   24dec:	beq	24e08 <test_json@@Base+0xa8>
   24df0:	mov	r3, #2
   24df4:	mov	r2, #1
   24df8:	strb	r3, [sp, #129]	; 0x81
   24dfc:	mov	r3, #0
   24e00:	strb	r2, [sp, #130]	; 0x82
   24e04:	strb	r3, [sp, #131]	; 0x83
   24e08:	mov	r0, r5
   24e0c:	bl	14598 <strlen@plt>
   24e10:	ldr	r2, [r6, #4]
   24e14:	ldr	r3, [r6]
   24e18:	add	r1, sp, #64	; 0x40
   24e1c:	str	r2, [sp, #8]
   24e20:	str	r3, [sp, #4]
   24e24:	str	sl, [sp]
   24e28:	mov	r2, r5
   24e2c:	mov	r3, r0
   24e30:	ldr	r0, [sp, #20]
   24e34:	bl	2ff40 <flatcc_json_parser_table_as_root@@Base>
   24e38:	cmp	r0, r9
   24e3c:	beq	24f68 <test_json@@Base+0x208>
   24e40:	cmp	r9, #0
   24e44:	beq	24f80 <test_json@@Base+0x220>
   24e48:	cmp	r0, #0
   24e4c:	ldr	r3, [pc, #964]	; 25218 <test_json@@Base+0x4b8>
   24e50:	bne	24f0c <test_json@@Base+0x1ac>
   24e54:	ldr	r4, [r7, r3]
   24e58:	mov	r0, r9
   24e5c:	ldr	r6, [r4]
   24e60:	bl	2ca8c <flatcc_json_parser_error_string@@Base>
   24e64:	ldr	r1, [pc, #944]	; 2521c <test_json@@Base+0x4bc>
   24e68:	ldr	r2, [sp, #432]	; 0x1b0
   24e6c:	add	r1, pc, r1
   24e70:	mov	r3, r0
   24e74:	mov	r0, r6
   24e78:	bl	145a4 <fprintf@plt>
   24e7c:	ldr	r1, [pc, #924]	; 25220 <test_json@@Base+0x4c0>
   24e80:	mov	r2, r5
   24e84:	ldr	r0, [r4]
   24e88:	add	r1, pc, r1
   24e8c:	bl	145a4 <fprintf@plt>
   24e90:	ldr	r3, [sp, #80]	; 0x50
   24e94:	cmp	r3, #1
   24e98:	movgt	r5, #0
   24e9c:	movgt	r6, #32
   24ea0:	ble	24ec4 <test_json@@Base+0x164>
   24ea4:	ldr	r1, [r4]
   24ea8:	mov	r0, r6
   24eac:	bl	145ec <fputc@plt>
   24eb0:	ldr	r3, [sp, #80]	; 0x50
   24eb4:	add	r5, r5, #1
   24eb8:	sub	r3, r3, #1
   24ebc:	cmp	r3, r5
   24ec0:	bgt	24ea4 <test_json@@Base+0x144>
   24ec4:	ldr	r0, [pc, #856]	; 25224 <test_json@@Base+0x4c4>
   24ec8:	ldr	r3, [r4]
   24ecc:	mov	r2, #2
   24ed0:	mov	r1, #1
   24ed4:	add	r0, pc, r0
   24ed8:	mvn	r4, #0
   24edc:	bl	14568 <fwrite@plt>
   24ee0:	mov	r3, #0
   24ee4:	str	r3, [sp, #24]
   24ee8:	ldr	r0, [sp, #24]
   24eec:	bl	29e6c <flatcc_builder_aligned_free@@Base>
   24ef0:	ldr	r0, [sp, #20]
   24ef4:	bl	26458 <flatcc_builder_clear@@Base>
   24ef8:	ldr	r0, [sp, #28]
   24efc:	bl	3d2a8 <flatcc_json_printer_clear@@Base>
   24f00:	mov	r0, r4
   24f04:	add	sp, sp, #388	; 0x184
   24f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f0c:	ldr	r4, [r7, r3]
   24f10:	ldr	r6, [r4]
   24f14:	bl	2ca8c <flatcc_json_parser_error_string@@Base>
   24f18:	ldr	r1, [pc, #776]	; 25228 <test_json@@Base+0x4c8>
   24f1c:	ldr	r2, [sp, #432]	; 0x1b0
   24f20:	add	r1, pc, r1
   24f24:	mov	r3, r0
   24f28:	mov	r0, r6
   24f2c:	bl	145a4 <fprintf@plt>
   24f30:	mov	r0, r9
   24f34:	ldr	r6, [r4]
   24f38:	bl	2ca8c <flatcc_json_parser_error_string@@Base>
   24f3c:	ldr	r1, [pc, #744]	; 2522c <test_json@@Base+0x4cc>
   24f40:	add	r1, pc, r1
   24f44:	mov	r2, r0
   24f48:	mov	r0, r6
   24f4c:	bl	145a4 <fprintf@plt>
   24f50:	ldr	r1, [pc, #728]	; 25230 <test_json@@Base+0x4d0>
   24f54:	mov	r2, r5
   24f58:	ldr	r0, [r4]
   24f5c:	add	r1, pc, r1
   24f60:	bl	145a4 <fprintf@plt>
   24f64:	b	24e90 <test_json@@Base+0x130>
   24f68:	cmp	r9, #0
   24f6c:	beq	24fc0 <test_json@@Base+0x260>
   24f70:	mov	r3, #0
   24f74:	str	r3, [sp, #24]
   24f78:	mov	r4, r3
   24f7c:	b	24ee8 <test_json@@Base+0x188>
   24f80:	ldr	r3, [pc, #656]	; 25218 <test_json@@Base+0x4b8>
   24f84:	ldr	r4, [r7, r3]
   24f88:	ldr	r6, [r4]
   24f8c:	bl	2ca8c <flatcc_json_parser_error_string@@Base>
   24f90:	ldr	r1, [pc, #668]	; 25234 <test_json@@Base+0x4d4>
   24f94:	ldr	r2, [sp, #432]	; 0x1b0
   24f98:	add	r1, pc, r1
   24f9c:	mov	r3, r0
   24fa0:	mov	r0, r6
   24fa4:	bl	145a4 <fprintf@plt>
   24fa8:	ldr	r1, [pc, #648]	; 25238 <test_json@@Base+0x4d8>
   24fac:	mov	r2, r5
   24fb0:	ldr	r0, [r4]
   24fb4:	add	r1, pc, r1
   24fb8:	bl	145a4 <fprintf@plt>
   24fbc:	b	24e90 <test_json@@Base+0x130>
   24fc0:	add	r1, sp, #36	; 0x24
   24fc4:	ldr	r0, [sp, #20]
   24fc8:	bl	29d64 <flatcc_builder_finalize_aligned_buffer@@Base>
   24fcc:	ldr	r3, [r6, #12]
   24fd0:	ldr	r2, [r6]
   24fd4:	ldr	r1, [sp, #36]	; 0x24
   24fd8:	str	r0, [sp, #24]
   24fdc:	bl	2b238 <flatcc_verify_table_as_root@@Base>
   24fe0:	cmp	r0, #0
   24fe4:	beq	2516c <test_json@@Base+0x40c>
   24fe8:	ldr	r3, [pc, #552]	; 25218 <test_json@@Base+0x4b8>
   24fec:	ldr	r4, [r7, r3]
   24ff0:	ldr	r5, [r4]
   24ff4:	bl	2a4ac <flatcc_verify_error_string@@Base>
   24ff8:	ldr	r2, [pc, #572]	; 2523c <test_json@@Base+0x4dc>
   24ffc:	ldr	r1, [pc, #572]	; 25240 <test_json@@Base+0x4e0>
   25000:	ldr	r3, [sp, #432]	; 0x1b0
   25004:	add	r2, pc, r2
   25008:	add	r1, pc, r1
   2500c:	str	r0, [sp]
   25010:	mov	r0, r5
   25014:	bl	145a4 <fprintf@plt>
   25018:	ldr	r3, [sp, #24]
   2501c:	cmp	r3, #0
   25020:	beq	25128 <test_json@@Base+0x3c8>
   25024:	ldr	r5, [r4]
   25028:	ldr	r2, [pc, #532]	; 25244 <test_json@@Base+0x4e4>
   2502c:	ldr	r1, [pc, #532]	; 25248 <test_json@@Base+0x4e8>
   25030:	ldr	r9, [sp, #36]	; 0x24
   25034:	mov	r0, r5
   25038:	add	r2, pc, r2
   2503c:	add	r1, pc, r1
   25040:	bl	145a4 <fprintf@plt>
   25044:	cmp	r9, #0
   25048:	beq	25110 <test_json@@Base+0x3b0>
   2504c:	ldr	r3, [pc, #504]	; 2524c <test_json@@Base+0x4ec>
   25050:	ldr	fp, [pc, #504]	; 25250 <test_json@@Base+0x4f0>
   25054:	add	r3, pc, r3
   25058:	str	r3, [sp, #16]
   2505c:	ldr	sl, [pc, #496]	; 25254 <test_json@@Base+0x4f4>
   25060:	ldr	r3, [sp, #24]
   25064:	mov	r4, #0
   25068:	add	fp, pc, fp
   2506c:	add	sl, pc, sl
   25070:	sub	r6, r3, #1
   25074:	add	r8, sp, #44	; 0x2c
   25078:	b	250e4 <test_json@@Base+0x384>
   2507c:	cmp	r4, #0
   25080:	beq	25088 <test_json@@Base+0x328>
   25084:	bl	145a4 <fprintf@plt>
   25088:	mov	r2, r4
   2508c:	ldr	r1, [sp, #16]
   25090:	mov	r0, r5
   25094:	bl	145a4 <fprintf@plt>
   25098:	ldrb	r2, [r6, #1]
   2509c:	mov	r1, sl
   250a0:	mov	r0, r5
   250a4:	bl	145a4 <fprintf@plt>
   250a8:	ldrb	r1, [r6, #1]!
   250ac:	add	r3, sp, #384	; 0x180
   250b0:	add	r2, r3, r7
   250b4:	sub	r0, r1, #32
   250b8:	cmp	r0, #94	; 0x5e
   250bc:	addls	r3, sp, #384	; 0x180
   250c0:	addls	r2, r3, r7
   250c4:	movhi	r3, #46	; 0x2e
   250c8:	add	r4, r4, #1
   250cc:	strbhi	r3, [r2, #-340]	; 0xfffffeac
   250d0:	strbls	r1, [r2, #-340]	; 0xfffffeac
   250d4:	mov	r3, #0
   250d8:	cmp	r9, r4
   250dc:	strb	r3, [r2, #-339]	; 0xfffffead
   250e0:	beq	25130 <test_json@@Base+0x3d0>
   250e4:	ands	r7, r4, #15
   250e8:	mov	r2, r8
   250ec:	mov	r1, fp
   250f0:	mov	r0, r5
   250f4:	beq	2507c <test_json@@Base+0x31c>
   250f8:	tst	r4, #7
   250fc:	bne	25098 <test_json@@Base+0x338>
   25100:	mov	r1, r5
   25104:	mov	r0, #32
   25108:	bl	145ec <fputc@plt>
   2510c:	b	25098 <test_json@@Base+0x338>
   25110:	add	r8, sp, #44	; 0x2c
   25114:	ldr	r1, [pc, #316]	; 25258 <test_json@@Base+0x4f8>
   25118:	mov	r2, r8
   2511c:	mov	r0, r5
   25120:	add	r1, pc, r1
   25124:	bl	145a4 <fprintf@plt>
   25128:	mvn	r4, #0
   2512c:	b	24ee8 <test_json@@Base+0x188>
   25130:	tst	r4, #15
   25134:	beq	25114 <test_json@@Base+0x3b4>
   25138:	ldr	r9, [pc, #284]	; 2525c <test_json@@Base+0x4fc>
   2513c:	mov	r7, #3
   25140:	add	r9, pc, r9
   25144:	mov	r6, #1
   25148:	add	r4, r4, #1
   2514c:	mov	r3, r5
   25150:	mov	r2, r7
   25154:	mov	r1, r6
   25158:	mov	r0, r9
   2515c:	bl	14568 <fwrite@plt>
   25160:	tst	r4, #15
   25164:	bne	25148 <test_json@@Base+0x3e8>
   25168:	b	25114 <test_json@@Base+0x3b4>
   2516c:	ldr	r1, [r6, #8]
   25170:	ldr	r4, [sp, #28]
   25174:	ldr	r3, [r6]
   25178:	ldr	r2, [sp, #36]	; 0x24
   2517c:	str	r1, [sp]
   25180:	mov	r0, r4
   25184:	ldr	r1, [sp, #24]
   25188:	bl	3cc5c <flatcc_json_printer_table_as_root@@Base>
   2518c:	add	r1, sp, #40	; 0x28
   25190:	mov	r0, r4
   25194:	bl	3d250 <flatcc_json_printer_get_buffer@@Base>
   25198:	subs	r6, r0, #0
   2519c:	beq	251b4 <test_json@@Base+0x454>
   251a0:	mov	r1, r6
   251a4:	mov	r0, r8
   251a8:	bl	14520 <strcmp@plt>
   251ac:	subs	r4, r0, #0
   251b0:	beq	24ee8 <test_json@@Base+0x188>
   251b4:	ldr	r3, [pc, #92]	; 25218 <test_json@@Base+0x4b8>
   251b8:	ldr	r5, [pc, #160]	; 25260 <test_json@@Base+0x500>
   251bc:	ldr	r1, [pc, #160]	; 25264 <test_json@@Base+0x504>
   251c0:	ldr	r4, [r7, r3]
   251c4:	add	r5, pc, r5
   251c8:	ldr	r2, [sp, #432]	; 0x1b0
   251cc:	add	r1, pc, r1
   251d0:	ldr	r0, [r4]
   251d4:	bl	145a4 <fprintf@plt>
   251d8:	mov	r2, r6
   251dc:	mov	r1, r5
   251e0:	ldr	r0, [r4]
   251e4:	bl	145a4 <fprintf@plt>
   251e8:	ldr	r0, [pc, #120]	; 25268 <test_json@@Base+0x508>
   251ec:	ldr	r3, [r4]
   251f0:	mov	r2, #10
   251f4:	mov	r1, #1
   251f8:	add	r0, pc, r0
   251fc:	bl	14568 <fwrite@plt>
   25200:	mov	r2, r8
   25204:	mov	r1, r5
   25208:	ldr	r0, [r4]
   2520c:	bl	145a4 <fprintf@plt>
   25210:	b	25018 <test_json@@Base+0x2b8>
   25214:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   25218:	andeq	r0, r0, r8, rrx
   2521c:	strdeq	r9, [r1], -r4
   25220:	andeq	r9, r1, r4, lsl r3
   25224:	strdeq	r9, [r1], -r0
   25228:	strdeq	r9, [r1], -r8
   2522c:	andeq	r9, r1, r0, lsl #4
   25230:	andeq	r9, r1, r0, asr #4
   25234:	andeq	r9, r1, r8, lsl #4
   25238:	andeq	r9, r1, r8, ror #3
   2523c:	andeq	r9, r1, r4, asr #3
   25240:	andeq	r9, r1, r4, lsr #4
   25244:	andeq	r9, r1, r0, ror #4
   25248:	andeq	r9, r1, ip, ror #4
   2524c:	andeq	r9, r1, r4, ror #4
   25250:	andeq	r9, r1, r8, asr #4
   25254:	andeq	r9, r1, r4, asr r2
   25258:	muleq	r1, r0, r1
   2525c:	andeq	r9, r1, r8, lsl #3
   25260:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   25264:	andeq	r9, r1, r8, lsl #1
   25268:	muleq	r1, r4, r0

0002526c <edge_case_tests@@Base>:
   2526c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25270:	sub	sp, sp, #20
   25274:	ldr	r6, [pc, #456]	; 25444 <edge_case_tests@@Base+0x1d8>
   25278:	ldr	r2, [pc, #456]	; 25448 <edge_case_tests@@Base+0x1dc>
   2527c:	ldr	r1, [pc, #456]	; 2544c <edge_case_tests@@Base+0x1e0>
   25280:	mov	r4, #0
   25284:	add	r6, pc, r6
   25288:	mov	r3, #158	; 0x9e
   2528c:	str	r3, [sp, #8]
   25290:	mov	r0, r6
   25294:	mov	r3, r4
   25298:	str	r4, [sp, #4]
   2529c:	str	r4, [sp]
   252a0:	add	r2, pc, r2
   252a4:	add	r1, pc, r1
   252a8:	bl	24d60 <test_json@@Base>
   252ac:	ldr	r9, [pc, #412]	; 25450 <edge_case_tests@@Base+0x1e4>
   252b0:	ldr	fp, [pc, #412]	; 25454 <edge_case_tests@@Base+0x1e8>
   252b4:	mov	ip, #168	; 0xa8
   252b8:	mov	sl, #2
   252bc:	add	r9, pc, r9
   252c0:	add	fp, pc, fp
   252c4:	str	ip, [sp, #8]
   252c8:	mov	r3, r4
   252cc:	mov	r2, r9
   252d0:	mov	r1, fp
   252d4:	str	r4, [sp, #4]
   252d8:	str	sl, [sp]
   252dc:	ldr	r7, [pc, #372]	; 25458 <edge_case_tests@@Base+0x1ec>
   252e0:	mov	r8, #1
   252e4:	add	r7, pc, r7
   252e8:	mov	r5, r0
   252ec:	mov	r0, r6
   252f0:	bl	24d60 <test_json@@Base>
   252f4:	mov	r2, #172	; 0xac
   252f8:	str	r2, [sp, #8]
   252fc:	ldr	r1, [pc, #344]	; 2545c <edge_case_tests@@Base+0x1f0>
   25300:	ldr	r2, [pc, #344]	; 25460 <edge_case_tests@@Base+0x1f4>
   25304:	mov	r3, r4
   25308:	stm	sp, {r4, sl}
   2530c:	add	r2, pc, r2
   25310:	add	r1, pc, r1
   25314:	orr	r5, r5, r0
   25318:	mov	r0, r6
   2531c:	bl	24d60 <test_json@@Base>
   25320:	mov	r2, #176	; 0xb0
   25324:	str	r2, [sp, #8]
   25328:	mov	r2, #4
   2532c:	str	r2, [sp, #4]
   25330:	ldr	r2, [pc, #300]	; 25464 <edge_case_tests@@Base+0x1f8>
   25334:	mov	r1, fp
   25338:	mov	r3, r4
   2533c:	str	sl, [sp]
   25340:	add	r2, pc, r2
   25344:	orr	r5, r5, r0
   25348:	mov	r0, r6
   2534c:	bl	24d60 <test_json@@Base>
   25350:	mov	r1, #180	; 0xb4
   25354:	mov	r2, #8
   25358:	str	r1, [sp, #8]
   2535c:	str	r2, [sp, #4]
   25360:	ldr	r1, [pc, #256]	; 25468 <edge_case_tests@@Base+0x1fc>
   25364:	ldr	r2, [pc, #256]	; 2546c <edge_case_tests@@Base+0x200>
   25368:	mov	r3, r4
   2536c:	str	r4, [sp]
   25370:	add	r2, pc, r2
   25374:	add	r1, pc, r1
   25378:	orr	r5, r5, r0
   2537c:	mov	r0, r6
   25380:	bl	24d60 <test_json@@Base>
   25384:	mov	r1, #195	; 0xc3
   25388:	str	r1, [sp, #8]
   2538c:	ldr	r1, [pc, #220]	; 25470 <edge_case_tests@@Base+0x204>
   25390:	mov	r2, r9
   25394:	mov	r3, r4
   25398:	str	r4, [sp, #4]
   2539c:	str	sl, [sp]
   253a0:	add	r1, pc, r1
   253a4:	ldr	r9, [pc, #200]	; 25474 <edge_case_tests@@Base+0x208>
   253a8:	add	r9, pc, r9
   253ac:	orr	r5, r5, r0
   253b0:	mov	r0, r6
   253b4:	bl	24d60 <test_json@@Base>
   253b8:	mov	ip, #199	; 0xc7
   253bc:	str	ip, [sp, #8]
   253c0:	mov	r3, r4
   253c4:	mov	r2, r7
   253c8:	mov	r1, r9
   253cc:	str	r4, [sp, #4]
   253d0:	str	r8, [sp]
   253d4:	orr	r5, r5, r0
   253d8:	mov	r0, r6
   253dc:	bl	24d60 <test_json@@Base>
   253e0:	mov	r2, #203	; 0xcb
   253e4:	str	r2, [sp, #8]
   253e8:	ldr	r2, [pc, #136]	; 25478 <edge_case_tests@@Base+0x20c>
   253ec:	mov	r1, r9
   253f0:	mov	r3, r4
   253f4:	str	r8, [sp, #4]
   253f8:	str	r8, [sp]
   253fc:	add	r2, pc, r2
   25400:	orr	r5, r5, r0
   25404:	mov	r0, r6
   25408:	bl	24d60 <test_json@@Base>
   2540c:	mov	r1, #209	; 0xd1
   25410:	str	r1, [sp, #8]
   25414:	ldr	r1, [pc, #96]	; 2547c <edge_case_tests@@Base+0x210>
   25418:	str	r4, [sp, #4]
   2541c:	str	r8, [sp]
   25420:	mov	r3, r4
   25424:	mov	r2, r7
   25428:	add	r1, pc, r1
   2542c:	orr	r5, r5, r0
   25430:	mov	r0, r6
   25434:	bl	24d60 <test_json@@Base>
   25438:	orr	r0, r5, r0
   2543c:	add	sp, sp, #20
   25440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25444:	andeq	lr, r2, ip, asr ip
   25448:	andeq	r9, r1, ip, lsr #32
   2544c:	andeq	r9, r1, r8, asr #32
   25450:	andeq	r9, r1, r8, rrx
   25454:	andeq	r9, r1, r8, lsl #1
   25458:	andeq	r9, r1, r4, asr #4
   2545c:	andeq	r9, r1, ip, ror r0
   25460:	andeq	r9, r1, r0, rrx
   25464:	andeq	r9, r1, r4, ror r0
   25468:	andeq	r9, r1, r8, ror #2
   2546c:	andeq	r9, r1, r8, asr r0
   25470:	andeq	r9, r1, r0, ror #2
   25474:	muleq	r1, ip, r1
   25478:	andeq	r9, r1, ip, ror r1
   2547c:	andeq	r9, r1, r8, ror #2

00025480 <error_case_tests@@Base>:
   25480:	push	{r4, r5, r6, lr}
   25484:	sub	sp, sp, #16
   25488:	ldr	r6, [pc, #540]	; 256ac <error_case_tests@@Base+0x22c>
   2548c:	ldr	r3, [pc, #540]	; 256b0 <error_case_tests@@Base+0x230>
   25490:	ldr	r1, [pc, #540]	; 256b4 <error_case_tests@@Base+0x234>
   25494:	mov	r4, #0
   25498:	add	r6, pc, r6
   2549c:	str	r3, [sp, #8]
   254a0:	mov	r2, r4
   254a4:	mov	r0, r6
   254a8:	str	r4, [sp, #4]
   254ac:	str	r4, [sp]
   254b0:	mov	r3, #13
   254b4:	add	r1, pc, r1
   254b8:	bl	24d60 <test_json@@Base>
   254bc:	ldr	r3, [pc, #500]	; 256b8 <error_case_tests@@Base+0x238>
   254c0:	ldr	r1, [pc, #500]	; 256bc <error_case_tests@@Base+0x23c>
   254c4:	mov	r2, r4
   254c8:	str	r3, [sp, #8]
   254cc:	str	r4, [sp, #4]
   254d0:	str	r4, [sp]
   254d4:	mov	r3, #13
   254d8:	add	r1, pc, r1
   254dc:	mov	r5, r0
   254e0:	mov	r0, r6
   254e4:	bl	24d60 <test_json@@Base>
   254e8:	ldr	r3, [pc, #464]	; 256c0 <error_case_tests@@Base+0x240>
   254ec:	ldr	r1, [pc, #464]	; 256c4 <error_case_tests@@Base+0x244>
   254f0:	mov	r2, r4
   254f4:	str	r3, [sp, #8]
   254f8:	str	r4, [sp, #4]
   254fc:	str	r4, [sp]
   25500:	mov	r3, #13
   25504:	add	r1, pc, r1
   25508:	orr	r5, r5, r0
   2550c:	mov	r0, r6
   25510:	bl	24d60 <test_json@@Base>
   25514:	ldr	r3, [pc, #428]	; 256c8 <error_case_tests@@Base+0x248>
   25518:	ldr	r1, [pc, #428]	; 256cc <error_case_tests@@Base+0x24c>
   2551c:	mov	r2, r4
   25520:	str	r3, [sp, #8]
   25524:	str	r4, [sp, #4]
   25528:	str	r4, [sp]
   2552c:	mov	r3, #13
   25530:	add	r1, pc, r1
   25534:	orr	r5, r5, r0
   25538:	mov	r0, r6
   2553c:	bl	24d60 <test_json@@Base>
   25540:	ldr	r3, [pc, #392]	; 256d0 <error_case_tests@@Base+0x250>
   25544:	ldr	r1, [pc, #392]	; 256d4 <error_case_tests@@Base+0x254>
   25548:	mov	r2, r4
   2554c:	str	r3, [sp, #8]
   25550:	str	r4, [sp, #4]
   25554:	str	r4, [sp]
   25558:	mov	r3, #13
   2555c:	add	r1, pc, r1
   25560:	orr	r5, r5, r0
   25564:	mov	r0, r6
   25568:	bl	24d60 <test_json@@Base>
   2556c:	ldr	r1, [pc, #356]	; 256d8 <error_case_tests@@Base+0x258>
   25570:	mov	r3, #296	; 0x128
   25574:	mov	r2, r4
   25578:	str	r3, [sp, #8]
   2557c:	str	r4, [sp, #4]
   25580:	str	r4, [sp]
   25584:	mov	r3, #13
   25588:	add	r1, pc, r1
   2558c:	orr	r5, r5, r0
   25590:	mov	r0, r6
   25594:	bl	24d60 <test_json@@Base>
   25598:	ldr	r3, [pc, #316]	; 256dc <error_case_tests@@Base+0x25c>
   2559c:	ldr	r1, [pc, #316]	; 256e0 <error_case_tests@@Base+0x260>
   255a0:	mov	r2, r4
   255a4:	str	r3, [sp, #8]
   255a8:	str	r4, [sp, #4]
   255ac:	str	r4, [sp]
   255b0:	mov	r3, #13
   255b4:	add	r1, pc, r1
   255b8:	orr	r5, r5, r0
   255bc:	mov	r0, r6
   255c0:	bl	24d60 <test_json@@Base>
   255c4:	ldr	r3, [pc, #280]	; 256e4 <error_case_tests@@Base+0x264>
   255c8:	ldr	r1, [pc, #280]	; 256e8 <error_case_tests@@Base+0x268>
   255cc:	mov	r2, r4
   255d0:	str	r3, [sp, #8]
   255d4:	str	r4, [sp, #4]
   255d8:	str	r4, [sp]
   255dc:	mov	r3, #13
   255e0:	add	r1, pc, r1
   255e4:	orr	r5, r5, r0
   255e8:	mov	r0, r6
   255ec:	bl	24d60 <test_json@@Base>
   255f0:	ldr	r3, [pc, #244]	; 256ec <error_case_tests@@Base+0x26c>
   255f4:	ldr	r1, [pc, #244]	; 256f0 <error_case_tests@@Base+0x270>
   255f8:	mov	r2, r4
   255fc:	str	r3, [sp, #8]
   25600:	str	r4, [sp, #4]
   25604:	str	r4, [sp]
   25608:	mov	r3, #13
   2560c:	add	r1, pc, r1
   25610:	orr	r5, r5, r0
   25614:	mov	r0, r6
   25618:	bl	24d60 <test_json@@Base>
   2561c:	ldr	r3, [pc, #208]	; 256f4 <error_case_tests@@Base+0x274>
   25620:	ldr	r1, [pc, #208]	; 256f8 <error_case_tests@@Base+0x278>
   25624:	mov	r2, r4
   25628:	str	r3, [sp, #8]
   2562c:	str	r4, [sp, #4]
   25630:	str	r4, [sp]
   25634:	mov	r3, #5
   25638:	add	r1, pc, r1
   2563c:	orr	r5, r5, r0
   25640:	mov	r0, r6
   25644:	bl	24d60 <test_json@@Base>
   25648:	ldr	r3, [pc, #172]	; 256fc <error_case_tests@@Base+0x27c>
   2564c:	ldr	r1, [pc, #172]	; 25700 <error_case_tests@@Base+0x280>
   25650:	mov	r2, r4
   25654:	str	r3, [sp, #8]
   25658:	str	r4, [sp, #4]
   2565c:	str	r4, [sp]
   25660:	mov	r3, #5
   25664:	add	r1, pc, r1
   25668:	orr	r5, r5, r0
   2566c:	mov	r0, r6
   25670:	bl	24d60 <test_json@@Base>
   25674:	ldr	r3, [pc, #136]	; 25704 <error_case_tests@@Base+0x284>
   25678:	ldr	r1, [pc, #136]	; 25708 <error_case_tests@@Base+0x288>
   2567c:	str	r3, [sp, #8]
   25680:	str	r4, [sp, #4]
   25684:	str	r4, [sp]
   25688:	mov	r2, r4
   2568c:	mov	r3, #5
   25690:	add	r1, pc, r1
   25694:	orr	r5, r5, r0
   25698:	mov	r0, r6
   2569c:	bl	24d60 <test_json@@Base>
   256a0:	orr	r0, r5, r0
   256a4:	add	sp, sp, #16
   256a8:	pop	{r4, r5, r6, pc}
   256ac:	andeq	lr, r2, r8, asr #20
   256b0:	andeq	r0, r0, sp, lsl r1
   256b4:	andeq	r9, r1, r0, asr r1
   256b8:	andeq	r0, r0, pc, lsl r1
   256bc:	andeq	r9, r1, r8, asr #2
   256c0:	andeq	r0, r0, r1, lsr #2
   256c4:	andeq	r9, r1, r0, lsl #3
   256c8:	andeq	r0, r0, r3, lsr #2
   256cc:			; <UNDEFINED> instruction: 0x000191b4
   256d0:	andeq	r0, r0, r5, lsr #2
   256d4:	andeq	r9, r1, r0, ror #3
   256d8:	andeq	r9, r1, ip, lsl #4
   256dc:	andeq	r0, r0, fp, lsr #2
   256e0:	andeq	r9, r1, r0, lsl #5
   256e4:	andeq	r0, r0, pc, lsr #2
   256e8:	strdeq	r9, [r1], -r0
   256ec:	andeq	r0, r0, r3, lsr r1
   256f0:	andeq	r9, r1, ip, lsl #7
   256f4:	andeq	r0, r0, r7, lsr r1
   256f8:	andeq	r9, r1, r8, lsr #8
   256fc:	andeq	r0, r0, sl, lsr r1
   25700:	andeq	r9, r1, r4, lsl r4
   25704:	andeq	r0, r0, sp, lsr r1
   25708:	andeq	r9, r1, r0, lsl r4

0002570c <base64_tests@@Base>:
   2570c:	push	{r4, r5, r6, r7, r8, lr}
   25710:	sub	sp, sp, #16
   25714:	ldr	r6, [pc, #388]	; 258a0 <base64_tests@@Base+0x194>
   25718:	ldr	r3, [pc, #388]	; 258a4 <base64_tests@@Base+0x198>
   2571c:	ldr	r2, [pc, #388]	; 258a8 <base64_tests@@Base+0x19c>
   25720:	ldr	r1, [pc, #388]	; 258ac <base64_tests@@Base+0x1a0>
   25724:	mov	r4, #0
   25728:	add	r6, pc, r6
   2572c:	str	r3, [sp, #8]
   25730:	mov	r0, r6
   25734:	mov	r3, r4
   25738:	str	r4, [sp, #4]
   2573c:	str	r4, [sp]
   25740:	add	r2, pc, r2
   25744:	add	r1, pc, r1
   25748:	bl	24d60 <test_json@@Base>
   2574c:	mov	r2, #372	; 0x174
   25750:	str	r2, [sp, #8]
   25754:	ldr	r1, [pc, #340]	; 258b0 <base64_tests@@Base+0x1a4>
   25758:	ldr	r2, [pc, #340]	; 258b4 <base64_tests@@Base+0x1a8>
   2575c:	mov	r3, r4
   25760:	str	r4, [sp, #4]
   25764:	str	r4, [sp]
   25768:	add	r2, pc, r2
   2576c:	add	r1, pc, r1
   25770:	ldr	r8, [pc, #320]	; 258b8 <base64_tests@@Base+0x1ac>
   25774:	ldr	r7, [pc, #320]	; 258bc <base64_tests@@Base+0x1b0>
   25778:	add	r8, pc, r8
   2577c:	add	r7, pc, r7
   25780:	mov	r5, r0
   25784:	mov	r0, r6
   25788:	bl	24d60 <test_json@@Base>
   2578c:	mov	r1, #376	; 0x178
   25790:	str	r1, [sp, #8]
   25794:	ldr	r1, [pc, #292]	; 258c0 <base64_tests@@Base+0x1b4>
   25798:	mov	r3, r4
   2579c:	mov	r2, r8
   257a0:	str	r4, [sp, #4]
   257a4:	str	r4, [sp]
   257a8:	add	r1, pc, r1
   257ac:	orr	r5, r5, r0
   257b0:	mov	r0, r6
   257b4:	bl	24d60 <test_json@@Base>
   257b8:	ldr	r1, [pc, #260]	; 258c4 <base64_tests@@Base+0x1b8>
   257bc:	mov	r3, r4
   257c0:	str	r1, [sp, #8]
   257c4:	ldr	r1, [pc, #252]	; 258c8 <base64_tests@@Base+0x1bc>
   257c8:	mov	r2, r7
   257cc:	str	r4, [sp, #4]
   257d0:	str	r4, [sp]
   257d4:	add	r1, pc, r1
   257d8:	orr	r5, r5, r0
   257dc:	mov	r0, r6
   257e0:	bl	24d60 <test_json@@Base>
   257e4:	ldr	r1, [pc, #224]	; 258cc <base64_tests@@Base+0x1c0>
   257e8:	mov	r2, r8
   257ec:	str	r1, [sp, #8]
   257f0:	ldr	r1, [pc, #216]	; 258d0 <base64_tests@@Base+0x1c4>
   257f4:	mov	r3, r4
   257f8:	str	r4, [sp, #4]
   257fc:	str	r4, [sp]
   25800:	add	r1, pc, r1
   25804:	orr	r5, r5, r0
   25808:	mov	r0, r6
   2580c:	bl	24d60 <test_json@@Base>
   25810:	ldr	r1, [pc, #188]	; 258d4 <base64_tests@@Base+0x1c8>
   25814:	mov	r2, r7
   25818:	str	r1, [sp, #8]
   2581c:	ldr	r1, [pc, #180]	; 258d8 <base64_tests@@Base+0x1cc>
   25820:	mov	r3, r4
   25824:	str	r4, [sp, #4]
   25828:	str	r4, [sp]
   2582c:	add	r1, pc, r1
   25830:	orr	r5, r5, r0
   25834:	mov	r0, r6
   25838:	bl	24d60 <test_json@@Base>
   2583c:	ldr	r1, [pc, #152]	; 258dc <base64_tests@@Base+0x1d0>
   25840:	mov	r3, #388	; 0x184
   25844:	mov	r2, r4
   25848:	str	r3, [sp, #8]
   2584c:	str	r4, [sp, #4]
   25850:	str	r4, [sp]
   25854:	mov	r3, #31
   25858:	add	r1, pc, r1
   2585c:	orr	r5, r5, r0
   25860:	mov	r0, r6
   25864:	bl	24d60 <test_json@@Base>
   25868:	ldr	r3, [pc, #112]	; 258e0 <base64_tests@@Base+0x1d4>
   2586c:	ldr	r1, [pc, #112]	; 258e4 <base64_tests@@Base+0x1d8>
   25870:	str	r3, [sp, #8]
   25874:	str	r4, [sp, #4]
   25878:	str	r4, [sp]
   2587c:	mov	r2, r4
   25880:	mov	r3, #32
   25884:	add	r1, pc, r1
   25888:	orr	r5, r5, r0
   2588c:	mov	r0, r6
   25890:	bl	24d60 <test_json@@Base>
   25894:	orr	r0, r5, r0
   25898:	add	sp, sp, #16
   2589c:	pop	{r4, r5, r6, r7, r8, pc}
   258a0:			; <UNDEFINED> instruction: 0x0002e7b8
   258a4:	andeq	r0, r0, r1, ror r1
   258a8:	andeq	r8, r1, r4, ror ip
   258ac:	muleq	r1, r4, r3
   258b0:	andeq	r9, r1, r8, lsr #7
   258b4:	andeq	r9, r1, r8, lsl #7
   258b8:	andeq	r9, r1, r4, asr #7
   258bc:	andeq	r9, r1, r0, lsr r5
   258c0:	andeq	r9, r1, r8, asr #8
   258c4:	andeq	r0, r0, fp, ror r1
   258c8:	muleq	r1, r0, r5
   258cc:	andeq	r0, r0, lr, ror r1
   258d0:	andeq	r9, r1, r0, lsr #12
   258d4:	andeq	r0, r0, r1, lsl #3
   258d8:	andeq	r9, r1, ip, lsr #13
   258dc:	andeq	r9, r1, ip, lsr r7
   258e0:	andeq	r0, r0, r7, lsl #3
   258e4:	andeq	r9, r1, ip, asr #15

000258e8 <mixed_type_union_tests@@Base>:
   258e8:	push	{r4, r5, r6, r7, lr}
   258ec:	sub	sp, sp, #20
   258f0:	ldr	r6, [pc, #348]	; 25a54 <mixed_type_union_tests@@Base+0x16c>
   258f4:	ldr	r2, [pc, #348]	; 25a58 <mixed_type_union_tests@@Base+0x170>
   258f8:	add	r6, pc, r6
   258fc:	ldr	r1, [pc, #344]	; 25a5c <mixed_type_union_tests@@Base+0x174>
   25900:	mov	r4, #0
   25904:	add	r6, r6, #16
   25908:	mov	r3, #432	; 0x1b0
   2590c:	str	r3, [sp, #8]
   25910:	mov	r0, r6
   25914:	mov	r3, r4
   25918:	str	r4, [sp, #4]
   2591c:	str	r4, [sp]
   25920:	add	r2, pc, r2
   25924:	add	r1, pc, r1
   25928:	bl	24d60 <test_json@@Base>
   2592c:	ldr	r1, [pc, #300]	; 25a60 <mixed_type_union_tests@@Base+0x178>
   25930:	ldr	r7, [pc, #300]	; 25a64 <mixed_type_union_tests@@Base+0x17c>
   25934:	str	r1, [sp, #8]
   25938:	ldr	r1, [pc, #296]	; 25a68 <mixed_type_union_tests@@Base+0x180>
   2593c:	add	r7, pc, r7
   25940:	mov	r3, r4
   25944:	mov	r2, r7
   25948:	str	r4, [sp, #4]
   2594c:	str	r4, [sp]
   25950:	add	r1, pc, r1
   25954:	mov	r5, r0
   25958:	mov	r0, r6
   2595c:	bl	24d60 <test_json@@Base>
   25960:	ldr	r1, [pc, #260]	; 25a6c <mixed_type_union_tests@@Base+0x184>
   25964:	mov	r3, r4
   25968:	str	r1, [sp, #8]
   2596c:	ldr	r1, [pc, #252]	; 25a70 <mixed_type_union_tests@@Base+0x188>
   25970:	mov	r2, r7
   25974:	str	r4, [sp, #4]
   25978:	str	r4, [sp]
   2597c:	add	r1, pc, r1
   25980:	orr	r5, r5, r0
   25984:	mov	r0, r6
   25988:	bl	24d60 <test_json@@Base>
   2598c:	ldr	r2, [pc, #224]	; 25a74 <mixed_type_union_tests@@Base+0x18c>
   25990:	ldr	r1, [pc, #224]	; 25a78 <mixed_type_union_tests@@Base+0x190>
   25994:	str	r2, [sp, #8]
   25998:	ldr	r2, [pc, #220]	; 25a7c <mixed_type_union_tests@@Base+0x194>
   2599c:	mov	r3, r4
   259a0:	str	r4, [sp, #4]
   259a4:	str	r4, [sp]
   259a8:	add	r2, pc, r2
   259ac:	add	r1, pc, r1
   259b0:	orr	r5, r5, r0
   259b4:	mov	r0, r6
   259b8:	bl	24d60 <test_json@@Base>
   259bc:	ldr	r2, [pc, #188]	; 25a80 <mixed_type_union_tests@@Base+0x198>
   259c0:	ldr	r1, [pc, #188]	; 25a84 <mixed_type_union_tests@@Base+0x19c>
   259c4:	str	r2, [sp, #8]
   259c8:	ldr	r2, [pc, #184]	; 25a88 <mixed_type_union_tests@@Base+0x1a0>
   259cc:	mov	r3, r4
   259d0:	str	r4, [sp, #4]
   259d4:	str	r4, [sp]
   259d8:	add	r2, pc, r2
   259dc:	add	r1, pc, r1
   259e0:	orr	r5, r5, r0
   259e4:	mov	r0, r6
   259e8:	bl	24d60 <test_json@@Base>
   259ec:	ldr	r2, [pc, #152]	; 25a8c <mixed_type_union_tests@@Base+0x1a4>
   259f0:	ldr	r1, [pc, #152]	; 25a90 <mixed_type_union_tests@@Base+0x1a8>
   259f4:	str	r2, [sp, #8]
   259f8:	ldr	r2, [pc, #148]	; 25a94 <mixed_type_union_tests@@Base+0x1ac>
   259fc:	mov	r3, r4
   25a00:	str	r4, [sp, #4]
   25a04:	str	r4, [sp]
   25a08:	add	r2, pc, r2
   25a0c:	add	r1, pc, r1
   25a10:	orr	r5, r5, r0
   25a14:	mov	r0, r6
   25a18:	bl	24d60 <test_json@@Base>
   25a1c:	ldr	r1, [pc, #116]	; 25a98 <mixed_type_union_tests@@Base+0x1b0>
   25a20:	str	r4, [sp, #4]
   25a24:	str	r1, [sp, #8]
   25a28:	ldr	r1, [pc, #108]	; 25a9c <mixed_type_union_tests@@Base+0x1b4>
   25a2c:	str	r4, [sp]
   25a30:	mov	r3, r4
   25a34:	mov	r2, r7
   25a38:	add	r1, pc, r1
   25a3c:	orr	r5, r5, r0
   25a40:	mov	r0, r6
   25a44:	bl	24d60 <test_json@@Base>
   25a48:	orr	r0, r5, r0
   25a4c:	add	sp, sp, #20
   25a50:	pop	{r4, r5, r6, r7, pc}
   25a54:	andeq	lr, r2, r8, ror #11
   25a58:	andeq	r9, r1, ip, ror #15
   25a5c:	andeq	r9, r1, r0, lsr r8
   25a60:			; <UNDEFINED> instruction: 0x000001b5
   25a64:	andeq	r9, r1, r8, ror #16
   25a68:	andeq	r9, r1, ip, asr #17
   25a6c:			; <UNDEFINED> instruction: 0x000001ba
   25a70:	andeq	r9, r1, r4, lsr #18
   25a74:	andeq	r0, r0, r1, asr #3
   25a78:	andeq	r9, r1, r8, asr #20
   25a7c:	muleq	r1, r0, r9
   25a80:	andeq	r0, r0, sl, asr #3
   25a84:	ldrdeq	r9, [r1], -r8
   25a88:	strdeq	r9, [r1], -ip
   25a8c:	ldrdeq	r0, [r0], -r5
   25a90:	strdeq	r9, [r1], -r8
   25a94:			; <UNDEFINED> instruction: 0x00019cb4
   25a98:	ldrdeq	r0, [r0], -sl
   25a9c:	andeq	r9, r1, r0, asr pc

00025aa0 <union_vector_tests@@Base>:
   25aa0:	push	{r4, r5, r6, r7, lr}
   25aa4:	sub	sp, sp, #20
   25aa8:	ldr	r5, [pc, #304]	; 25be0 <union_vector_tests@@Base+0x140>
   25aac:	ldr	r7, [pc, #304]	; 25be4 <union_vector_tests@@Base+0x144>
   25ab0:	ldr	r3, [pc, #304]	; 25be8 <union_vector_tests@@Base+0x148>
   25ab4:	add	r5, pc, r5
   25ab8:	ldr	r1, [pc, #300]	; 25bec <union_vector_tests@@Base+0x14c>
   25abc:	mov	r4, #0
   25ac0:	add	r5, r5, #32
   25ac4:	add	r7, pc, r7
   25ac8:	mov	r2, r7
   25acc:	str	r3, [sp, #8]
   25ad0:	mov	r0, r5
   25ad4:	mov	r3, r4
   25ad8:	str	r4, [sp, #4]
   25adc:	str	r4, [sp]
   25ae0:	add	r1, pc, r1
   25ae4:	bl	24d60 <test_json@@Base>
   25ae8:	mov	r2, #488	; 0x1e8
   25aec:	str	r2, [sp, #8]
   25af0:	ldr	r1, [pc, #248]	; 25bf0 <union_vector_tests@@Base+0x150>
   25af4:	ldr	r2, [pc, #248]	; 25bf4 <union_vector_tests@@Base+0x154>
   25af8:	mov	r3, r4
   25afc:	str	r4, [sp, #4]
   25b00:	str	r4, [sp]
   25b04:	add	r2, pc, r2
   25b08:	add	r1, pc, r1
   25b0c:	mov	r6, r0
   25b10:	mov	r0, r5
   25b14:	bl	24d60 <test_json@@Base>
   25b18:	ldr	r2, [pc, #216]	; 25bf8 <union_vector_tests@@Base+0x158>
   25b1c:	ldr	r1, [pc, #216]	; 25bfc <union_vector_tests@@Base+0x15c>
   25b20:	str	r2, [sp, #8]
   25b24:	ldr	r2, [pc, #212]	; 25c00 <union_vector_tests@@Base+0x160>
   25b28:	mov	r3, r4
   25b2c:	str	r4, [sp, #4]
   25b30:	str	r4, [sp]
   25b34:	add	r2, pc, r2
   25b38:	add	r1, pc, r1
   25b3c:	orr	r6, r6, r0
   25b40:	mov	r0, r5
   25b44:	bl	24d60 <test_json@@Base>
   25b48:	ldr	r2, [pc, #180]	; 25c04 <union_vector_tests@@Base+0x164>
   25b4c:	ldr	r1, [pc, #180]	; 25c08 <union_vector_tests@@Base+0x168>
   25b50:	str	r2, [sp, #8]
   25b54:	ldr	r2, [pc, #176]	; 25c0c <union_vector_tests@@Base+0x16c>
   25b58:	mov	r3, r4
   25b5c:	str	r4, [sp, #4]
   25b60:	str	r4, [sp]
   25b64:	add	r2, pc, r2
   25b68:	add	r1, pc, r1
   25b6c:	orr	r6, r6, r0
   25b70:	mov	r0, r5
   25b74:	bl	24d60 <test_json@@Base>
   25b78:	ldr	r1, [pc, #144]	; 25c10 <union_vector_tests@@Base+0x170>
   25b7c:	mov	r2, r7
   25b80:	str	r1, [sp, #8]
   25b84:	ldr	r1, [pc, #136]	; 25c14 <union_vector_tests@@Base+0x174>
   25b88:	mov	r3, r4
   25b8c:	str	r4, [sp, #4]
   25b90:	str	r4, [sp]
   25b94:	add	r1, pc, r1
   25b98:	orr	r6, r6, r0
   25b9c:	mov	r0, r5
   25ba0:	bl	24d60 <test_json@@Base>
   25ba4:	mov	r2, #500	; 0x1f4
   25ba8:	str	r2, [sp, #8]
   25bac:	ldr	r1, [pc, #100]	; 25c18 <union_vector_tests@@Base+0x178>
   25bb0:	ldr	r2, [pc, #100]	; 25c1c <union_vector_tests@@Base+0x17c>
   25bb4:	str	r4, [sp, #4]
   25bb8:	str	r4, [sp]
   25bbc:	mov	r3, r4
   25bc0:	add	r2, pc, r2
   25bc4:	add	r1, pc, r1
   25bc8:	orr	r6, r6, r0
   25bcc:	mov	r0, r5
   25bd0:	bl	24d60 <test_json@@Base>
   25bd4:	orr	r0, r6, r0
   25bd8:	add	sp, sp, #20
   25bdc:	pop	{r4, r5, r6, r7, pc}
   25be0:	andeq	lr, r2, ip, lsr #8
   25be4:	andeq	r9, r1, r4, asr pc
   25be8:	andeq	r0, r0, r5, ror #3
   25bec:	andeq	r9, r1, r0, ror pc
   25bf0:			; <UNDEFINED> instruction: 0x00019fb4
   25bf4:	andeq	r9, r1, ip, lsl #31
   25bf8:	andeq	r0, r0, fp, ror #3
   25bfc:	strdeq	r9, [r1], -ip
   25c00:			; <UNDEFINED> instruction: 0x00019fbc
   25c04:	andeq	r0, r0, lr, ror #3
   25c08:	andeq	sl, r1, r8, lsl #1
   25c0c:	andeq	sl, r1, r0, lsr #32
   25c10:	strdeq	r0, [r0], -r1
   25c14:	ldrdeq	sl, [r1], -ip
   25c18:	andeq	sl, r1, r8, asr #2
   25c1c:	strdeq	sl, [r1], -r0
   25c20:	push	{r4, r5, r6, lr}
   25c24:	mov	r4, r0
   25c28:	ldr	ip, [r0, #28]
   25c2c:	sub	sp, sp, #8
   25c30:	mov	r3, #1
   25c34:	ldr	r0, [r0, #40]	; 0x28
   25c38:	ldr	r6, [r4, #48]	; 0x30
   25c3c:	mov	r5, r2
   25c40:	str	r3, [sp]
   25c44:	add	r2, r1, ip
   25c48:	add	r1, r4, #60	; 0x3c
   25c4c:	blx	r6
   25c50:	cmp	r0, #0
   25c54:	bne	25c8c <union_vector_tests@@Base+0x1ec>
   25c58:	ldr	r1, [r4, #28]
   25c5c:	ldr	r3, [r4, #64]	; 0x40
   25c60:	ldr	r2, [r4, #60]	; 0x3c
   25c64:	sub	r3, r3, r1
   25c68:	ldr	ip, [r4, #32]
   25c6c:	cmp	r3, r5
   25c70:	movcs	r3, r5
   25c74:	add	r2, r2, r1
   25c78:	str	r3, [r4, #24]
   25c7c:	str	r2, [r4, #16]
   25c80:	str	r5, [ip, #4]
   25c84:	add	sp, sp, #8
   25c88:	pop	{r4, r5, r6, pc}
   25c8c:	mvn	r0, #0
   25c90:	b	25c84 <union_vector_tests@@Base+0x1e4>

00025c94 <flatcc_builder_default_alloc@@Base>:
   25c94:	push	{r4, r5, r6, r7, r8, lr}
   25c98:	subs	r5, r2, #0
   25c9c:	mov	r6, r1
   25ca0:	bne	25cc4 <flatcc_builder_default_alloc@@Base+0x30>
   25ca4:	ldr	r0, [r1]
   25ca8:	cmp	r0, #0
   25cac:	popeq	{r4, r5, r6, r7, r8, pc}
   25cb0:	bl	14538 <free@plt>
   25cb4:	str	r5, [r6]
   25cb8:	str	r5, [r6, #4]
   25cbc:	mov	r0, r5
   25cc0:	pop	{r4, r5, r6, r7, r8, pc}
   25cc4:	mov	r7, r3
   25cc8:	ldr	r3, [sp, #24]
   25ccc:	sub	r2, r3, #1
   25cd0:	cmp	r2, #6
   25cd4:	addls	pc, pc, r2, lsl #2
   25cd8:	b	25d74 <flatcc_builder_default_alloc@@Base+0xe0>
   25cdc:	b	25d48 <flatcc_builder_default_alloc@@Base+0xb4>
   25ce0:	b	25d74 <flatcc_builder_default_alloc@@Base+0xe0>
   25ce4:	b	25d74 <flatcc_builder_default_alloc@@Base+0xe0>
   25ce8:	b	25d6c <flatcc_builder_default_alloc@@Base+0xd8>
   25cec:	b	25cf8 <flatcc_builder_default_alloc@@Base+0x64>
   25cf0:	b	25d74 <flatcc_builder_default_alloc@@Base+0xe0>
   25cf4:	b	25d64 <flatcc_builder_default_alloc@@Base+0xd0>
   25cf8:	mov	r4, r5
   25cfc:	ldr	r3, [r6, #4]
   25d00:	cmp	r5, r3
   25d04:	bhi	25d10 <flatcc_builder_default_alloc@@Base+0x7c>
   25d08:	cmp	r4, r3, lsr #1
   25d0c:	bls	25d7c <flatcc_builder_default_alloc@@Base+0xe8>
   25d10:	mov	r1, r4
   25d14:	ldr	r0, [r6]
   25d18:	bl	1455c <realloc@plt>
   25d1c:	subs	r5, r0, #0
   25d20:	beq	25d98 <flatcc_builder_default_alloc@@Base+0x104>
   25d24:	cmp	r7, #0
   25d28:	beq	25d38 <flatcc_builder_default_alloc@@Base+0xa4>
   25d2c:	ldr	r0, [r6, #4]
   25d30:	cmp	r0, r4
   25d34:	bcc	25d84 <flatcc_builder_default_alloc@@Base+0xf0>
   25d38:	str	r5, [r6]
   25d3c:	str	r4, [r6, #4]
   25d40:	mov	r0, #0
   25d44:	pop	{r4, r5, r6, r7, r8, pc}
   25d48:	mov	r4, #256	; 0x100
   25d4c:	cmp	r5, r4
   25d50:	bls	25cfc <flatcc_builder_default_alloc@@Base+0x68>
   25d54:	lsl	r4, r4, #1
   25d58:	cmp	r5, r4
   25d5c:	bhi	25d54 <flatcc_builder_default_alloc@@Base+0xc0>
   25d60:	b	25cfc <flatcc_builder_default_alloc@@Base+0x68>
   25d64:	mov	r4, #64	; 0x40
   25d68:	b	25d4c <flatcc_builder_default_alloc@@Base+0xb8>
   25d6c:	mov	r4, #288	; 0x120
   25d70:	b	25d4c <flatcc_builder_default_alloc@@Base+0xb8>
   25d74:	mov	r4, #32
   25d78:	b	25d4c <flatcc_builder_default_alloc@@Base+0xb8>
   25d7c:	mov	r0, #0
   25d80:	pop	{r4, r5, r6, r7, r8, pc}
   25d84:	sub	r2, r4, r0
   25d88:	mov	r1, #0
   25d8c:	add	r0, r5, r0
   25d90:	bl	145bc <memset@plt>
   25d94:	b	25d38 <flatcc_builder_default_alloc@@Base+0xa4>
   25d98:	mvn	r0, #0
   25d9c:	pop	{r4, r5, r6, r7, r8, pc}
   25da0:	push	{r4, r5, lr}
   25da4:	cmp	r2, #0
   25da8:	ldr	lr, [pc, #248]	; 25ea8 <flatcc_builder_default_alloc@@Base+0x214>
   25dac:	sub	sp, sp, #84	; 0x54
   25db0:	mov	ip, r0
   25db4:	add	lr, pc, lr
   25db8:	bne	25dc8 <flatcc_builder_default_alloc@@Base+0x134>
   25dbc:	ldrh	r2, [r0, #132]	; 0x84
   25dc0:	cmp	r2, #0
   25dc4:	moveq	r2, #1
   25dc8:	ldrh	r0, [r1]
   25dcc:	cmp	r0, #3
   25dd0:	movls	r4, #4
   25dd4:	movls	r0, r4
   25dd8:	strhls	r4, [r1]
   25ddc:	cmp	r2, r0
   25de0:	strhhi	r2, [r1]
   25de4:	cmp	r3, #0
   25de8:	bne	25dfc <flatcc_builder_default_alloc@@Base+0x168>
   25dec:	ldr	r4, [ip, #140]	; 0x8c
   25df0:	sub	r2, r2, #1
   25df4:	ands	r3, r2, r4
   25df8:	bne	25e08 <flatcc_builder_default_alloc@@Base+0x174>
   25dfc:	mov	r0, #0
   25e00:	add	sp, sp, #84	; 0x54
   25e04:	pop	{r4, r5, pc}
   25e08:	ldr	r2, [pc, #156]	; 25eac <flatcc_builder_default_alloc@@Base+0x218>
   25e0c:	add	r1, r4, r3
   25e10:	str	r3, [sp, #8]
   25e14:	ldr	r0, [lr, r2]
   25e18:	cmp	r4, r1
   25e1c:	mov	r2, #1
   25e20:	str	r0, [sp, #16]
   25e24:	str	r3, [sp, #20]
   25e28:	str	r1, [ip, #140]	; 0x8c
   25e2c:	str	r2, [sp, #12]
   25e30:	bgt	25e80 <flatcc_builder_default_alloc@@Base+0x1ec>
   25e34:	ldr	r0, [ip, #36]	; 0x24
   25e38:	add	r1, sp, #16
   25e3c:	str	r3, [sp]
   25e40:	mov	r3, r4
   25e44:	ldr	r5, [ip, #44]	; 0x2c
   25e48:	blx	r5
   25e4c:	cmp	r0, #0
   25e50:	bne	25e84 <flatcc_builder_default_alloc@@Base+0x1f0>
   25e54:	cmn	r4, #1
   25e58:	bne	25dfc <flatcc_builder_default_alloc@@Base+0x168>
   25e5c:	ldr	r3, [pc, #76]	; 25eb0 <flatcc_builder_default_alloc@@Base+0x21c>
   25e60:	ldr	r1, [pc, #76]	; 25eb4 <flatcc_builder_default_alloc@@Base+0x220>
   25e64:	ldr	r0, [pc, #76]	; 25eb8 <flatcc_builder_default_alloc@@Base+0x224>
   25e68:	add	r3, pc, r3
   25e6c:	ldr	r2, [pc, #72]	; 25ebc <flatcc_builder_default_alloc@@Base+0x228>
   25e70:	add	r3, r3, #60	; 0x3c
   25e74:	add	r1, pc, r1
   25e78:	add	r0, pc, r0
   25e7c:	bl	14610 <__assert_fail@plt>
   25e80:	bl	147e4 <__assert_fail@plt+0x1d4>
   25e84:	ldr	r3, [pc, #52]	; 25ec0 <flatcc_builder_default_alloc@@Base+0x22c>
   25e88:	ldr	r1, [pc, #52]	; 25ec4 <flatcc_builder_default_alloc@@Base+0x230>
   25e8c:	ldr	r0, [pc, #52]	; 25ec8 <flatcc_builder_default_alloc@@Base+0x234>
   25e90:	add	r3, pc, r3
   25e94:	ldr	r2, [pc, #48]	; 25ecc <flatcc_builder_default_alloc@@Base+0x238>
   25e98:	add	r3, r3, #16
   25e9c:	add	r1, pc, r1
   25ea0:	add	r0, pc, r0
   25ea4:	bl	14610 <__assert_fail@plt>
   25ea8:	andeq	lr, r2, r4, asr #4
   25eac:	andeq	r0, r0, r4, rrx
   25eb0:	andeq	sl, r1, r4, lsr pc
   25eb4:	andeq	fp, r1, r8, ror r6
   25eb8:	strdeq	fp, [r1], -ip
   25ebc:			; <UNDEFINED> instruction: 0x000002be
   25ec0:	andeq	sl, r1, ip, lsl #30
   25ec4:	andeq	fp, r1, r0, asr r6
   25ec8:	ldrdeq	fp, [r1], -r4
   25ecc:	andeq	r0, r0, r5, lsr #5
   25ed0:	push	{r4, r5, r6, r7, lr}
   25ed4:	mov	r5, r1
   25ed8:	ldr	r1, [r0, #156]	; 0x9c
   25edc:	ldr	r3, [r0, #160]	; 0xa0
   25ee0:	add	r2, r1, #1
   25ee4:	cmp	r2, r3
   25ee8:	sub	sp, sp, #12
   25eec:	mov	r4, r0
   25ef0:	str	r2, [r0, #156]	; 0x9c
   25ef4:	ble	25f64 <flatcc_builder_default_alloc@@Base+0x2d0>
   25ef8:	ldr	r3, [r0, #176]	; 0xb0
   25efc:	cmp	r3, #0
   25f00:	cmpgt	r2, r3
   25f04:	movgt	r3, #1
   25f08:	movle	r3, #0
   25f0c:	bgt	25fd8 <flatcc_builder_default_alloc@@Base+0x344>
   25f10:	add	r1, r1, r1, lsl #3
   25f14:	ldr	r0, [r0, #88]	; 0x58
   25f18:	lsl	r6, r1, #2
   25f1c:	add	r2, r6, #36	; 0x24
   25f20:	cmp	r2, r0
   25f24:	bhi	25fb4 <flatcc_builder_default_alloc@@Base+0x320>
   25f28:	ldr	r3, [r4, #84]	; 0x54
   25f2c:	add	r3, r3, r6
   25f30:	cmp	r3, #0
   25f34:	str	r3, [r4, #32]
   25f38:	beq	25fd8 <flatcc_builder_default_alloc@@Base+0x344>
   25f3c:	ldr	r2, [r4, #88]	; 0x58
   25f40:	ldr	r0, [pc, #152]	; 25fe0 <flatcc_builder_default_alloc@@Base+0x34c>
   25f44:	ldr	r1, [r4, #176]	; 0xb0
   25f48:	umull	r0, r2, r0, r2
   25f4c:	lsr	r2, r2, #3
   25f50:	cmp	r1, #0
   25f54:	cmpgt	r2, r1
   25f58:	str	r2, [r4, #160]	; 0xa0
   25f5c:	strgt	r1, [r4, #160]	; 0xa0
   25f60:	b	25f70 <flatcc_builder_default_alloc@@Base+0x2dc>
   25f64:	ldr	r3, [r0, #32]
   25f68:	add	r3, r3, #36	; 0x24
   25f6c:	str	r3, [r0, #32]
   25f70:	ldr	r0, [r4, #20]
   25f74:	ldr	ip, [r4, #28]
   25f78:	ldrh	lr, [r4, #130]	; 0x82
   25f7c:	add	r2, r0, ip
   25f80:	mov	r1, #0
   25f84:	str	r0, [r3, #8]
   25f88:	strh	lr, [r3, #12]
   25f8c:	add	r2, r2, #7
   25f90:	mvn	lr, #3
   25f94:	mov	r0, r1
   25f98:	bic	r2, r2, #7
   25f9c:	strh	r5, [r4, #130]	; 0x82
   25fa0:	stm	r3, {ip, lr}
   25fa4:	str	r2, [r4, #28]
   25fa8:	str	r1, [r4, #20]
   25fac:	add	sp, sp, #12
   25fb0:	pop	{r4, r5, r6, r7, pc}
   25fb4:	mov	r1, #4
   25fb8:	ldr	r0, [r4, #40]	; 0x28
   25fbc:	str	r1, [sp]
   25fc0:	add	r1, r4, #84	; 0x54
   25fc4:	ldr	r7, [r4, #48]	; 0x30
   25fc8:	blx	r7
   25fcc:	cmp	r0, #0
   25fd0:	beq	25f28 <flatcc_builder_default_alloc@@Base+0x294>
   25fd4:	bl	147b4 <__assert_fail@plt+0x1a4>
   25fd8:	mvn	r0, #0
   25fdc:	b	25fac <flatcc_builder_default_alloc@@Base+0x318>
   25fe0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   25fe4:	push	{r4, r5, r6, r7, lr}
   25fe8:	mov	r5, r0
   25fec:	ldrh	r0, [r0, #128]	; 0x80
   25ff0:	sub	sp, sp, #92	; 0x5c
   25ff4:	add	ip, sp, #12
   25ff8:	cmp	r0, #3
   25ffc:	movls	r0, #4
   26000:	strhls	r0, [r5, #128]	; 0x80
   26004:	ldr	r4, [pc, #448]	; 261cc <flatcc_builder_default_alloc@@Base+0x538>
   26008:	ldr	r0, [r5, #136]	; 0x88
   2600c:	mov	r7, #4
   26010:	mov	r6, #1
   26014:	str	ip, [sp, #24]
   26018:	lsls	ip, r2, #2
   2601c:	add	r4, pc, r4
   26020:	str	r2, [sp, #12]
   26024:	and	lr, r0, #3
   26028:	str	r7, [sp, #16]
   2602c:	str	r7, [sp, #28]
   26030:	str	r6, [sp, #20]
   26034:	beq	26050 <flatcc_builder_default_alloc@@Base+0x3bc>
   26038:	add	r7, ip, r7
   2603c:	mov	r6, #2
   26040:	str	r1, [sp, #32]
   26044:	str	ip, [sp, #36]	; 0x24
   26048:	str	r7, [sp, #16]
   2604c:	str	r6, [sp, #20]
   26050:	cmp	lr, #0
   26054:	beq	26084 <flatcc_builder_default_alloc@@Base+0x3f0>
   26058:	ldr	ip, [sp, #20]
   2605c:	ldr	r6, [pc, #364]	; 261d0 <flatcc_builder_default_alloc@@Base+0x53c>
   26060:	add	ip, ip, #1
   26064:	add	r7, r7, lr
   26068:	str	r7, [sp, #16]
   2606c:	ldr	r6, [r4, r6]
   26070:	add	r4, sp, #88	; 0x58
   26074:	add	r4, r4, ip, lsl #3
   26078:	str	ip, [sp, #20]
   2607c:	str	r6, [r4, #-72]	; 0xffffffb8
   26080:	str	lr, [r4, #-68]	; 0xffffffbc
   26084:	cmp	r2, #0
   26088:	sub	r4, r0, r7
   2608c:	beq	26120 <flatcc_builder_default_alloc@@Base+0x48c>
   26090:	add	r6, r3, r2
   26094:	mvn	ip, #3
   26098:	mov	r2, r3
   2609c:	b	260d4 <flatcc_builder_default_alloc@@Base+0x440>
   260a0:	sub	r0, ip, r4
   260a4:	add	r0, r0, lr
   260a8:	cmp	r3, #0
   260ac:	str	r0, [r1]
   260b0:	beq	260c0 <flatcc_builder_default_alloc@@Base+0x42c>
   260b4:	ldrb	r0, [r2]
   260b8:	cmp	r0, #0
   260bc:	beq	26180 <flatcc_builder_default_alloc@@Base+0x4ec>
   260c0:	add	r2, r2, #1
   260c4:	cmp	r2, r6
   260c8:	add	r1, r1, #4
   260cc:	sub	ip, ip, #4
   260d0:	beq	26118 <flatcc_builder_default_alloc@@Base+0x484>
   260d4:	ldr	lr, [r1]
   260d8:	cmp	lr, #0
   260dc:	bne	260a0 <flatcc_builder_default_alloc@@Base+0x40c>
   260e0:	cmp	r3, #0
   260e4:	beq	2615c <flatcc_builder_default_alloc@@Base+0x4c8>
   260e8:	ldrb	r0, [r2]
   260ec:	cmp	r0, #0
   260f0:	beq	260c0 <flatcc_builder_default_alloc@@Base+0x42c>
   260f4:	ldr	r3, [pc, #216]	; 261d4 <flatcc_builder_default_alloc@@Base+0x540>
   260f8:	ldr	r1, [pc, #216]	; 261d8 <flatcc_builder_default_alloc@@Base+0x544>
   260fc:	ldr	r0, [pc, #216]	; 261dc <flatcc_builder_default_alloc@@Base+0x548>
   26100:	add	r3, pc, r3
   26104:	ldr	r2, [pc, #212]	; 261e0 <flatcc_builder_default_alloc@@Base+0x54c>
   26108:	add	r3, r3, #76	; 0x4c
   2610c:	add	r1, pc, r1
   26110:	add	r0, pc, r0
   26114:	bl	14610 <__assert_fail@plt>
   26118:	ldr	r0, [r5, #136]	; 0x88
   2611c:	sub	r4, r0, r7
   26120:	cmp	r4, r0
   26124:	bge	261c8 <flatcc_builder_default_alloc@@Base+0x534>
   26128:	ldr	r0, [r5, #36]	; 0x24
   2612c:	ldr	r2, [sp, #20]
   26130:	str	r7, [sp]
   26134:	mov	r3, r4
   26138:	ldr	r6, [r5, #44]	; 0x2c
   2613c:	add	r1, sp, #24
   26140:	blx	r6
   26144:	cmp	r0, #0
   26148:	bne	261a4 <flatcc_builder_default_alloc@@Base+0x510>
   2614c:	mov	r0, r4
   26150:	str	r4, [r5, #136]	; 0x88
   26154:	add	sp, sp, #92	; 0x5c
   26158:	pop	{r4, r5, r6, r7, pc}
   2615c:	ldr	r3, [pc, #128]	; 261e4 <flatcc_builder_default_alloc@@Base+0x550>
   26160:	ldr	r1, [pc, #128]	; 261e8 <flatcc_builder_default_alloc@@Base+0x554>
   26164:	ldr	r0, [pc, #128]	; 261ec <flatcc_builder_default_alloc@@Base+0x558>
   26168:	add	r3, pc, r3
   2616c:	ldr	r2, [pc, #124]	; 261f0 <flatcc_builder_default_alloc@@Base+0x55c>
   26170:	add	r3, r3, #76	; 0x4c
   26174:	add	r1, pc, r1
   26178:	add	r0, pc, r0
   2617c:	bl	14610 <__assert_fail@plt>
   26180:	ldr	r3, [pc, #108]	; 261f4 <flatcc_builder_default_alloc@@Base+0x560>
   26184:	ldr	r1, [pc, #108]	; 261f8 <flatcc_builder_default_alloc@@Base+0x564>
   26188:	ldr	r0, [pc, #108]	; 261fc <flatcc_builder_default_alloc@@Base+0x568>
   2618c:	add	r3, pc, r3
   26190:	ldr	r2, [pc, #104]	; 26200 <flatcc_builder_default_alloc@@Base+0x56c>
   26194:	add	r3, r3, #76	; 0x4c
   26198:	add	r1, pc, r1
   2619c:	add	r0, pc, r0
   261a0:	bl	14610 <__assert_fail@plt>
   261a4:	ldr	r3, [pc, #88]	; 26204 <flatcc_builder_default_alloc@@Base+0x570>
   261a8:	ldr	r1, [pc, #88]	; 26208 <flatcc_builder_default_alloc@@Base+0x574>
   261ac:	ldr	r0, [pc, #88]	; 2620c <flatcc_builder_default_alloc@@Base+0x578>
   261b0:	add	r3, pc, r3
   261b4:	ldr	r2, [pc, #84]	; 26210 <flatcc_builder_default_alloc@@Base+0x57c>
   261b8:	add	r3, r3, #28
   261bc:	add	r1, pc, r1
   261c0:	add	r0, pc, r0
   261c4:	bl	14610 <__assert_fail@plt>
   261c8:	bl	1481c <__assert_fail@plt+0x20c>
   261cc:	ldrdeq	sp, [r2], -ip
   261d0:	andeq	r0, r0, r4, rrx
   261d4:	muleq	r1, ip, ip
   261d8:	andeq	fp, r1, r0, ror #7
   261dc:	andeq	fp, r1, r8, ror #8
   261e0:			; <UNDEFINED> instruction: 0x000005b5
   261e4:	andeq	sl, r1, r4, lsr ip
   261e8:	andeq	fp, r1, r8, ror r3
   261ec:	strdeq	fp, [r1], -ip
   261f0:			; <UNDEFINED> instruction: 0x000005b7
   261f4:	andeq	sl, r1, r0, lsl ip
   261f8:	andeq	fp, r1, r4, asr r3
   261fc:	andeq	fp, r1, ip, asr #7
   26200:			; <UNDEFINED> instruction: 0x000005b1
   26204:	andeq	sl, r1, ip, ror #23
   26208:	andeq	fp, r1, r0, lsr r3
   2620c:			; <UNDEFINED> instruction: 0x0001b3b4
   26210:	andeq	r0, r0, fp, lsl #5

00026214 <flatcc_builder_flush_vtable_cache@@Base>:
   26214:	ldr	r3, [r0, #116]	; 0x74
   26218:	cmp	r3, #0
   2621c:	bxeq	lr
   26220:	ldr	r2, [r0, #96]	; 0x60
   26224:	push	{r4, lr}
   26228:	mov	r1, #0
   2622c:	mov	r4, r0
   26230:	ldr	r0, [r0, #92]	; 0x5c
   26234:	bl	145bc <memset@plt>
   26238:	mov	r2, #16
   2623c:	mov	r3, #0
   26240:	str	r2, [r4, #124]	; 0x7c
   26244:	str	r3, [r4, #120]	; 0x78
   26248:	pop	{r4, pc}

0002624c <flatcc_builder_custom_init@@Base>:
   2624c:	push	{r4, r5, r6, r7, r8, lr}
   26250:	mov	r6, r1
   26254:	mov	r7, r2
   26258:	mov	r1, #0
   2625c:	mov	r2, #232	; 0xe8
   26260:	mov	r5, r3
   26264:	mov	r4, r0
   26268:	ldr	r8, [sp, #24]
   2626c:	bl	145bc <memset@plt>
   26270:	ldr	r3, [pc, #76]	; 262c4 <flatcc_builder_custom_init@@Base+0x78>
   26274:	cmp	r6, #0
   26278:	add	r3, pc, r3
   2627c:	beq	262ac <flatcc_builder_custom_init@@Base+0x60>
   26280:	cmp	r5, #0
   26284:	beq	262a0 <flatcc_builder_custom_init@@Base+0x54>
   26288:	str	r8, [r4, #40]	; 0x28
   2628c:	str	r5, [r4, #48]	; 0x30
   26290:	str	r7, [r4, #36]	; 0x24
   26294:	str	r6, [r4, #44]	; 0x2c
   26298:	mov	r0, #0
   2629c:	pop	{r4, r5, r6, r7, r8, pc}
   262a0:	ldr	r2, [pc, #32]	; 262c8 <flatcc_builder_custom_init@@Base+0x7c>
   262a4:	ldr	r5, [r3, r2]
   262a8:	b	26288 <flatcc_builder_custom_init@@Base+0x3c>
   262ac:	ldr	r2, [pc, #24]	; 262cc <flatcc_builder_custom_init@@Base+0x80>
   262b0:	mov	r1, #1
   262b4:	str	r1, [r4, #184]	; 0xb8
   262b8:	add	r7, r4, #188	; 0xbc
   262bc:	ldr	r6, [r3, r2]
   262c0:	b	26280 <flatcc_builder_custom_init@@Base+0x34>
   262c4:	andeq	sp, r2, r0, lsl #27
   262c8:	andeq	r0, r0, r0, ror r0
   262cc:	andeq	r0, r0, r8, ror r0

000262d0 <flatcc_builder_init@@Base>:
   262d0:	push	{lr}		; (str lr, [sp, #-4]!)
   262d4:	sub	sp, sp, #12
   262d8:	mov	r3, #0
   262dc:	str	r3, [sp]
   262e0:	mov	r2, r3
   262e4:	mov	r1, r3
   262e8:	bl	2624c <flatcc_builder_custom_init@@Base>
   262ec:	add	sp, sp, #12
   262f0:	pop	{pc}		; (ldr pc, [sp], #4)

000262f4 <flatcc_builder_custom_reset@@Base>:
   262f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262f8:	add	r7, r0, #52	; 0x34
   262fc:	mov	r4, #0
   26300:	sub	sp, sp, #12
   26304:	mov	r5, r0
   26308:	mov	sl, r1
   2630c:	mov	r8, r2
   26310:	mov	r6, r7
   26314:	mov	r9, r4
   26318:	mov	fp, #1
   2631c:	b	26370 <flatcc_builder_custom_reset@@Base+0x7c>
   26320:	cmp	r4, #5
   26324:	cmpne	r8, #0
   26328:	beq	26354 <flatcc_builder_custom_reset@@Base+0x60>
   2632c:	ldr	r0, [r5, #40]	; 0x28
   26330:	mov	r3, fp
   26334:	str	r4, [sp]
   26338:	mov	r2, #1
   2633c:	mov	r1, r6
   26340:	ldr	ip, [r5, #48]	; 0x30
   26344:	blx	ip
   26348:	cmp	r0, #0
   2634c:	bne	26434 <flatcc_builder_custom_reset@@Base+0x140>
   26350:	ldr	r0, [r7, r4, lsl #3]
   26354:	ldr	r2, [r6, #4]
   26358:	mov	r1, r9
   2635c:	bl	145bc <memset@plt>
   26360:	add	r4, r4, #1
   26364:	cmp	r4, #8
   26368:	add	r6, r6, #8
   2636c:	beq	263ac <flatcc_builder_custom_reset@@Base+0xb8>
   26370:	ldr	r0, [r7, r4, lsl #3]
   26374:	cmp	r0, #0
   26378:	bne	26320 <flatcc_builder_custom_reset@@Base+0x2c>
   2637c:	ldr	r3, [r6, #4]
   26380:	cmp	r3, #0
   26384:	beq	26360 <flatcc_builder_custom_reset@@Base+0x6c>
   26388:	ldr	r3, [pc, #172]	; 2643c <flatcc_builder_custom_reset@@Base+0x148>
   2638c:	ldr	r1, [pc, #172]	; 26440 <flatcc_builder_custom_reset@@Base+0x14c>
   26390:	ldr	r0, [pc, #172]	; 26444 <flatcc_builder_custom_reset@@Base+0x150>
   26394:	add	r3, pc, r3
   26398:	ldr	r2, [pc, #168]	; 26448 <flatcc_builder_custom_reset@@Base+0x154>
   2639c:	add	r3, r3, #108	; 0x6c
   263a0:	add	r1, pc, r1
   263a4:	add	r0, pc, r0
   263a8:	bl	14610 <__assert_fail@plt>
   263ac:	ldr	r2, [r5, #124]	; 0x7c
   263b0:	mov	r3, #0
   263b4:	ldr	r0, [r5, #60]	; 0x3c
   263b8:	cmp	r2, r3
   263bc:	str	r3, [r5, #120]	; 0x78
   263c0:	ldr	r1, [r5, #76]	; 0x4c
   263c4:	movne	r3, #16
   263c8:	ldr	r2, [r5, #52]	; 0x34
   263cc:	str	r0, [r5, #16]
   263d0:	ldr	r0, [r5, #184]	; 0xb8
   263d4:	strne	r3, [r5, #124]	; 0x7c
   263d8:	mov	r3, #0
   263dc:	cmp	sl, #0
   263e0:	strne	r3, [r5, #172]	; 0xac
   263e4:	strne	r3, [r5, #176]	; 0xb0
   263e8:	strne	r3, [r5, #180]	; 0xb4
   263ec:	cmp	r0, #0
   263f0:	stm	r5, {r1, r2}
   263f4:	strh	r3, [r5, #128]	; 0x80
   263f8:	str	r3, [r5, #136]	; 0x88
   263fc:	str	r3, [r5, #140]	; 0x8c
   26400:	str	r3, [r5, #156]	; 0x9c
   26404:	str	r3, [r5, #160]	; 0xa0
   26408:	str	r3, [r5, #20]
   2640c:	str	r3, [r5, #24]
   26410:	str	r3, [r5, #148]	; 0x94
   26414:	str	r3, [r5, #152]	; 0x98
   26418:	str	r3, [r5, #32]
   2641c:	beq	2642c <flatcc_builder_custom_reset@@Base+0x138>
   26420:	add	r0, r5, #188	; 0xbc
   26424:	bl	29ed0 <flatcc_emitter_reset@@Base>
   26428:	mov	r0, #0
   2642c:	add	sp, sp, #12
   26430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26434:	mvn	r0, #0
   26438:	b	2642c <flatcc_builder_custom_reset@@Base+0x138>
   2643c:	andeq	sl, r1, r8, lsl #20
   26440:	andeq	fp, r1, ip, asr #2
   26444:	andeq	fp, r1, r4, ror #3
   26448:			; <UNDEFINED> instruction: 0x000001b2

0002644c <flatcc_builder_reset@@Base>:
   2644c:	mov	r2, #0
   26450:	mov	r1, r2
   26454:	b	262f4 <flatcc_builder_custom_reset@@Base>

00026458 <flatcc_builder_clear@@Base>:
   26458:	push	{r4, r5, r6, r7, r8, lr}
   2645c:	mov	r4, #0
   26460:	sub	sp, sp, #8
   26464:	mov	r6, r0
   26468:	add	r5, r0, #52	; 0x34
   2646c:	mov	r8, r4
   26470:	ldr	r0, [r6, #40]	; 0x28
   26474:	mov	r1, r5
   26478:	str	r4, [sp]
   2647c:	mov	r3, r8
   26480:	add	r4, r4, #1
   26484:	ldr	r7, [r6, #48]	; 0x30
   26488:	mov	r2, #0
   2648c:	blx	r7
   26490:	cmp	r4, #8
   26494:	add	r5, r5, #8
   26498:	bne	26470 <flatcc_builder_clear@@Base+0x18>
   2649c:	ldr	r3, [r6, #184]	; 0xb8
   264a0:	cmp	r3, #0
   264a4:	beq	264b0 <flatcc_builder_clear@@Base+0x58>
   264a8:	add	r0, r6, #188	; 0xbc
   264ac:	bl	29f8c <flatcc_emitter_clear@@Base>
   264b0:	mov	r0, r6
   264b4:	mov	r2, #232	; 0xe8
   264b8:	mov	r1, #0
   264bc:	add	sp, sp, #8
   264c0:	pop	{r4, r5, r6, r7, r8, lr}
   264c4:	b	145bc <memset@plt>

000264c8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   264c8:	push	{r4, r5, r6, r7, r8, lr}
   264cc:	add	r4, r1, #3
   264d0:	bic	r4, r4, #3
   264d4:	ldr	r7, [r0, #228]	; 0xe4
   264d8:	add	r4, r4, #4
   264dc:	ldr	r3, [r0, #112]	; 0x70
   264e0:	add	r2, r4, r7
   264e4:	cmp	r2, r3
   264e8:	sub	sp, sp, #8
   264ec:	mov	r6, r0
   264f0:	bhi	26538 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   264f4:	ldr	r8, [r6, #108]	; 0x6c
   264f8:	adds	r5, r8, r7
   264fc:	beq	26560 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   26500:	mov	r2, r4
   26504:	mov	r1, #0
   26508:	mov	r0, r5
   2650c:	bl	145bc <memset@plt>
   26510:	ldr	r3, [r6, #224]	; 0xe0
   26514:	add	r0, r5, #4
   26518:	str	r3, [r8, r7]
   2651c:	ldr	r3, [r6, #228]	; 0xe4
   26520:	add	r4, r4, r3
   26524:	add	r3, r3, #4
   26528:	str	r4, [r6, #228]	; 0xe4
   2652c:	str	r3, [r6, #224]	; 0xe0
   26530:	add	sp, sp, #8
   26534:	pop	{r4, r5, r6, r7, r8, pc}
   26538:	mov	r3, #7
   2653c:	ldr	r0, [r0, #40]	; 0x28
   26540:	add	r1, r6, #108	; 0x6c
   26544:	str	r3, [sp]
   26548:	mov	r3, #0
   2654c:	ldr	r5, [r6, #48]	; 0x30
   26550:	blx	r5
   26554:	cmp	r0, #0
   26558:	beq	264f4 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   2655c:	bl	147b4 <__assert_fail@plt+0x1a4>
   26560:	mov	r0, r5
   26564:	b	26530 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00026568 <flatcc_builder_enter_user_frame@@Base>:
   26568:	push	{r4, r5, r6, r7, lr}
   2656c:	add	r4, r1, #3
   26570:	bic	r4, r4, #3
   26574:	ldr	r6, [r0, #228]	; 0xe4
   26578:	add	r4, r4, #4
   2657c:	ldr	r3, [r0, #112]	; 0x70
   26580:	add	r2, r4, r6
   26584:	cmp	r2, r3
   26588:	sub	sp, sp, #12
   2658c:	mov	r5, r0
   26590:	bhi	265d0 <flatcc_builder_enter_user_frame@@Base+0x68>
   26594:	ldr	r7, [r5, #108]	; 0x6c
   26598:	adds	r0, r7, r6
   2659c:	beq	265c8 <flatcc_builder_enter_user_frame@@Base+0x60>
   265a0:	mov	r2, r4
   265a4:	mov	r1, #0
   265a8:	bl	145bc <memset@plt>
   265ac:	ldr	r3, [r5, #224]	; 0xe0
   265b0:	str	r3, [r7, r6]
   265b4:	ldr	r0, [r5, #228]	; 0xe4
   265b8:	add	r4, r4, r0
   265bc:	add	r0, r0, #4
   265c0:	str	r4, [r5, #228]	; 0xe4
   265c4:	str	r0, [r5, #224]	; 0xe0
   265c8:	add	sp, sp, #12
   265cc:	pop	{r4, r5, r6, r7, pc}
   265d0:	mov	r3, #7
   265d4:	ldr	r0, [r0, #40]	; 0x28
   265d8:	add	r1, r5, #108	; 0x6c
   265dc:	str	r3, [sp]
   265e0:	mov	r3, #0
   265e4:	ldr	r7, [r5, #48]	; 0x30
   265e8:	blx	r7
   265ec:	cmp	r0, #0
   265f0:	beq	26594 <flatcc_builder_enter_user_frame@@Base+0x2c>
   265f4:	bl	147b4 <__assert_fail@plt+0x1a4>

000265f8 <flatcc_builder_exit_user_frame@@Base>:
   265f8:	ldr	r3, [r0, #224]	; 0xe0
   265fc:	cmp	r3, #0
   26600:	beq	26624 <flatcc_builder_exit_user_frame@@Base+0x2c>
   26604:	ldr	r2, [r0, #108]	; 0x6c
   26608:	sub	r1, r3, #4
   2660c:	add	r3, r2, r3
   26610:	str	r1, [r0, #228]	; 0xe4
   26614:	ldr	r3, [r3, #-4]
   26618:	str	r3, [r0, #224]	; 0xe0
   2661c:	mov	r0, r3
   26620:	bx	lr
   26624:	ldr	r3, [pc, #32]	; 2664c <flatcc_builder_exit_user_frame@@Base+0x54>
   26628:	ldr	r1, [pc, #32]	; 26650 <flatcc_builder_exit_user_frame@@Base+0x58>
   2662c:	ldr	r0, [pc, #32]	; 26654 <flatcc_builder_exit_user_frame@@Base+0x5c>
   26630:	add	r3, pc, r3
   26634:	push	{r4, lr}
   26638:	add	r3, r3, #136	; 0x88
   2663c:	ldr	r2, [pc, #20]	; 26658 <flatcc_builder_exit_user_frame@@Base+0x60>
   26640:	add	r1, pc, r1
   26644:	add	r0, pc, r0
   26648:	bl	14610 <__assert_fail@plt>
   2664c:	andeq	sl, r1, ip, ror #14
   26650:	andeq	sl, r1, ip, lsr #29
   26654:	andeq	sl, r1, r8, asr pc
   26658:	andeq	r0, r0, lr, lsl r2

0002665c <flatcc_builder_exit_user_frame_at@@Base>:
   2665c:	ldr	r2, [r0, #224]	; 0xe0
   26660:	cmp	r2, r1
   26664:	bcc	26670 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   26668:	str	r1, [r0, #224]	; 0xe0
   2666c:	b	265f8 <flatcc_builder_exit_user_frame@@Base>
   26670:	ldr	r3, [pc, #32]	; 26698 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   26674:	ldr	r1, [pc, #32]	; 2669c <flatcc_builder_exit_user_frame_at@@Base+0x40>
   26678:	ldr	r0, [pc, #32]	; 266a0 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   2667c:	add	r3, pc, r3
   26680:	push	{r4, lr}
   26684:	add	r3, r3, #168	; 0xa8
   26688:	ldr	r2, [pc, #20]	; 266a4 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   2668c:	add	r1, pc, r1
   26690:	add	r0, pc, r0
   26694:	bl	14610 <__assert_fail@plt>
   26698:	andeq	sl, r1, r0, lsr #14
   2669c:	andeq	sl, r1, r0, ror #28
   266a0:	andeq	sl, r1, r8, lsr #30
   266a4:	andeq	r0, r0, r7, lsr #4

000266a8 <flatcc_builder_get_current_user_frame@@Base>:
   266a8:	ldr	r0, [r0, #224]	; 0xe0
   266ac:	bx	lr

000266b0 <flatcc_builder_get_user_frame_ptr@@Base>:
   266b0:	ldr	r0, [r0, #108]	; 0x6c
   266b4:	add	r0, r0, r1
   266b8:	bx	lr

000266bc <flatcc_builder_embed_buffer@@Base>:
   266bc:	ldr	ip, [r0, #152]	; 0x98
   266c0:	push	{r4, r5, r6, lr}
   266c4:	mov	r5, r3
   266c8:	sub	sp, sp, #88	; 0x58
   266cc:	adds	r3, ip, #0
   266d0:	movne	r3, #1
   266d4:	mov	r6, r2
   266d8:	mov	r2, r1
   266dc:	add	r1, sp, #104	; 0x68
   266e0:	mov	r4, r0
   266e4:	bl	25da0 <flatcc_builder_default_alloc@@Base+0x10c>
   266e8:	ldr	ip, [pc, #324]	; 26834 <flatcc_builder_embed_buffer@@Base+0x178>
   266ec:	add	ip, pc, ip
   266f0:	cmp	r0, #0
   266f4:	bne	267fc <flatcc_builder_embed_buffer@@Base+0x140>
   266f8:	ldr	r2, [sp, #108]	; 0x6c
   266fc:	ldr	r1, [r4, #136]	; 0x88
   26700:	ldrh	r3, [sp, #104]	; 0x68
   26704:	tst	r2, #2
   26708:	moveq	lr, #0
   2670c:	movne	lr, #4
   26710:	sub	r2, r1, r5
   26714:	sub	r3, r3, #1
   26718:	sub	r2, r2, lr
   2671c:	and	r2, r2, r3
   26720:	ldr	r3, [r4, #152]	; 0x98
   26724:	str	r0, [sp, #16]
   26728:	str	r0, [sp, #20]
   2672c:	cmp	r3, #0
   26730:	add	r0, r5, r2
   26734:	str	r0, [sp, #12]
   26738:	beq	26758 <flatcc_builder_embed_buffer@@Base+0x9c>
   2673c:	mov	r3, #4
   26740:	mov	lr, #1
   26744:	add	r0, sp, #12
   26748:	str	r3, [sp, #16]
   2674c:	str	r3, [sp, #28]
   26750:	str	r0, [sp, #24]
   26754:	str	lr, [sp, #20]
   26758:	cmp	r5, #0
   2675c:	beq	26784 <flatcc_builder_embed_buffer@@Base+0xc8>
   26760:	ldr	r0, [sp, #20]
   26764:	add	lr, sp, #88	; 0x58
   26768:	add	r0, r0, #1
   2676c:	add	r3, r3, r5
   26770:	add	lr, lr, r0, lsl #3
   26774:	str	r3, [sp, #16]
   26778:	str	r0, [sp, #20]
   2677c:	str	r6, [lr, #-72]	; 0xffffffb8
   26780:	str	r5, [lr, #-68]	; 0xffffffbc
   26784:	cmp	r2, #0
   26788:	bne	267cc <flatcc_builder_embed_buffer@@Base+0x110>
   2678c:	sub	r5, r1, r3
   26790:	cmp	r1, r5
   26794:	ble	26830 <flatcc_builder_embed_buffer@@Base+0x174>
   26798:	ldr	r0, [r4, #36]	; 0x24
   2679c:	ldr	r2, [sp, #20]
   267a0:	str	r3, [sp]
   267a4:	add	r1, sp, #24
   267a8:	ldr	r6, [r4, #44]	; 0x2c
   267ac:	mov	r3, r5
   267b0:	blx	r6
   267b4:	cmp	r0, #0
   267b8:	streq	r5, [r4, #136]	; 0x88
   267bc:	bne	2680c <flatcc_builder_embed_buffer@@Base+0x150>
   267c0:	mov	r0, r5
   267c4:	add	sp, sp, #88	; 0x58
   267c8:	pop	{r4, r5, r6, pc}
   267cc:	ldr	r0, [sp, #20]
   267d0:	ldr	lr, [pc, #96]	; 26838 <flatcc_builder_embed_buffer@@Base+0x17c>
   267d4:	add	r0, r0, #1
   267d8:	add	r3, r3, r2
   267dc:	str	r3, [sp, #16]
   267e0:	ldr	lr, [ip, lr]
   267e4:	add	ip, sp, #88	; 0x58
   267e8:	add	ip, ip, r0, lsl #3
   267ec:	str	r0, [sp, #20]
   267f0:	str	lr, [ip, #-72]	; 0xffffffb8
   267f4:	str	r2, [ip, #-68]	; 0xffffffbc
   267f8:	b	2678c <flatcc_builder_embed_buffer@@Base+0xd0>
   267fc:	mov	r5, #0
   26800:	mov	r0, r5
   26804:	add	sp, sp, #88	; 0x58
   26808:	pop	{r4, r5, r6, pc}
   2680c:	ldr	r3, [pc, #40]	; 2683c <flatcc_builder_embed_buffer@@Base+0x180>
   26810:	ldr	r1, [pc, #40]	; 26840 <flatcc_builder_embed_buffer@@Base+0x184>
   26814:	ldr	r0, [pc, #40]	; 26844 <flatcc_builder_embed_buffer@@Base+0x188>
   26818:	add	r3, pc, r3
   2681c:	ldr	r2, [pc, #36]	; 26848 <flatcc_builder_embed_buffer@@Base+0x18c>
   26820:	add	r3, r3, #28
   26824:	add	r1, pc, r1
   26828:	add	r0, pc, r0
   2682c:	bl	14610 <__assert_fail@plt>
   26830:	bl	1481c <__assert_fail@plt+0x20c>
   26834:	andeq	sp, r2, ip, lsl #18
   26838:	andeq	r0, r0, r4, rrx
   2683c:	andeq	sl, r1, r4, lsl #11
   26840:	andeq	sl, r1, r8, asr #25
   26844:	andeq	sl, r1, ip, asr #26
   26848:	andeq	r0, r0, fp, lsl #5

0002684c <flatcc_builder_create_buffer@@Base>:
   2684c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26850:	sub	sp, sp, #100	; 0x64
   26854:	mov	r5, #0
   26858:	ldr	r8, [sp, #140]	; 0x8c
   2685c:	mov	r9, r1
   26860:	and	r6, r8, #1
   26864:	mov	r7, r3
   26868:	add	r1, sp, #136	; 0x88
   2686c:	mov	r3, r6
   26870:	str	r5, [sp, #20]
   26874:	mov	r4, r0
   26878:	bl	25da0 <flatcc_builder_default_alloc@@Base+0x10c>
   2687c:	ldr	lr, [pc, #516]	; 26a88 <flatcc_builder_create_buffer@@Base+0x23c>
   26880:	add	lr, pc, lr
   26884:	cmp	r0, r5
   26888:	bne	26a1c <flatcc_builder_create_buffer@@Base+0x1d0>
   2688c:	ldrh	r3, [r4, #128]	; 0x80
   26890:	ldrh	r2, [sp, #136]	; 0x88
   26894:	uxtb	r5, r6
   26898:	cmp	r3, r2
   2689c:	strhcc	r2, [r4, #128]	; 0x80
   268a0:	cmp	r9, #0
   268a4:	sub	r2, r2, #1
   268a8:	ldrne	r3, [r9]
   268ac:	ldreq	r0, [sp, #20]
   268b0:	ldrne	r0, [r9]
   268b4:	strne	r3, [sp, #20]
   268b8:	cmp	r0, #0
   268bc:	movne	r0, #4
   268c0:	moveq	r0, #0
   268c4:	ands	r3, r8, #2
   268c8:	ldr	r8, [r4, #136]	; 0x88
   268cc:	bne	269ec <flatcc_builder_create_buffer@@Base+0x1a0>
   268d0:	sub	r1, r8, #4
   268d4:	cmp	r5, #0
   268d8:	sub	r1, r1, r0
   268dc:	and	r2, r2, r1
   268e0:	moveq	r9, #1
   268e4:	moveq	ip, #4
   268e8:	bne	269f8 <flatcc_builder_create_buffer@@Base+0x1ac>
   268ec:	add	r1, r3, #1
   268f0:	add	sl, sp, #96	; 0x60
   268f4:	add	r1, sl, r1, lsl #3
   268f8:	mov	fp, #4
   268fc:	add	sl, sp, #12
   26900:	cmp	r0, #0
   26904:	str	ip, [sp, #24]
   26908:	str	r9, [sp, #28]
   2690c:	str	sl, [r1, #-72]	; 0xffffffb8
   26910:	str	fp, [r1, #-68]	; 0xffffffbc
   26914:	beq	26940 <flatcc_builder_create_buffer@@Base+0xf4>
   26918:	add	r9, r9, #1
   2691c:	add	r1, sp, #96	; 0x60
   26920:	add	r9, r1, r9, lsl #3
   26924:	add	r3, r3, #2
   26928:	add	ip, ip, r0
   2692c:	str	r3, [sp, #28]
   26930:	add	r3, sp, #20
   26934:	str	r0, [r9, #-68]	; 0xffffffbc
   26938:	str	ip, [sp, #24]
   2693c:	str	r3, [r9, #-72]	; 0xffffffb8
   26940:	cmp	r2, #0
   26944:	beq	26974 <flatcc_builder_create_buffer@@Base+0x128>
   26948:	ldr	r3, [sp, #28]
   2694c:	ldr	r1, [pc, #312]	; 26a8c <flatcc_builder_create_buffer@@Base+0x240>
   26950:	add	r3, r3, #1
   26954:	add	ip, ip, r2
   26958:	str	ip, [sp, #24]
   2695c:	ldr	r0, [lr, r1]
   26960:	add	r1, sp, #96	; 0x60
   26964:	add	r1, r1, r3, lsl #3
   26968:	str	r3, [sp, #28]
   2696c:	str	r0, [r1, #-72]	; 0xffffffb8
   26970:	str	r2, [r1, #-68]	; 0xffffffbc
   26974:	cmp	r5, #0
   26978:	sub	r5, r8, ip
   2697c:	mov	r3, r5
   26980:	beq	26a2c <flatcc_builder_create_buffer@@Base+0x1e0>
   26984:	cmp	r6, #0
   26988:	add	r3, r5, #4
   2698c:	beq	26a2c <flatcc_builder_create_buffer@@Base+0x1e0>
   26990:	ldr	r2, [r4, #144]	; 0x90
   26994:	sub	r2, r2, r3
   26998:	str	r2, [sp, #16]
   2699c:	sub	r7, r7, r3
   269a0:	cmp	r5, r8
   269a4:	str	r7, [sp, #12]
   269a8:	mov	r6, r5
   269ac:	bge	26a3c <flatcc_builder_create_buffer@@Base+0x1f0>
   269b0:	ldr	r0, [r4, #36]	; 0x24
   269b4:	ldr	r2, [sp, #28]
   269b8:	str	ip, [sp]
   269bc:	mov	r3, r5
   269c0:	ldr	r7, [r4, #44]	; 0x2c
   269c4:	add	r1, sp, #32
   269c8:	blx	r7
   269cc:	cmp	r0, #0
   269d0:	bne	26a40 <flatcc_builder_create_buffer@@Base+0x1f4>
   269d4:	cmp	r5, #0
   269d8:	str	r5, [r4, #136]	; 0x88
   269dc:	beq	26a64 <flatcc_builder_create_buffer@@Base+0x218>
   269e0:	mov	r0, r6
   269e4:	add	sp, sp, #100	; 0x64
   269e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269ec:	sub	r3, r8, #8
   269f0:	sub	r3, r3, r0
   269f4:	and	r2, r2, r3
   269f8:	mov	ip, #4
   269fc:	mov	r3, #1
   26a00:	add	r1, sp, #16
   26a04:	str	ip, [sp, #36]	; 0x24
   26a08:	str	r1, [sp, #32]
   26a0c:	mov	r5, r3
   26a10:	mov	r9, #2
   26a14:	mov	ip, #8
   26a18:	b	268ec <flatcc_builder_create_buffer@@Base+0xa0>
   26a1c:	mov	r6, r5
   26a20:	mov	r0, r6
   26a24:	add	sp, sp, #100	; 0x64
   26a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a2c:	ldr	r2, [r4, #140]	; 0x8c
   26a30:	sub	r2, r2, r3
   26a34:	str	r2, [sp, #16]
   26a38:	b	2699c <flatcc_builder_create_buffer@@Base+0x150>
   26a3c:	bl	1481c <__assert_fail@plt+0x20c>
   26a40:	ldr	r3, [pc, #72]	; 26a90 <flatcc_builder_create_buffer@@Base+0x244>
   26a44:	ldr	r1, [pc, #72]	; 26a94 <flatcc_builder_create_buffer@@Base+0x248>
   26a48:	ldr	r0, [pc, #72]	; 26a98 <flatcc_builder_create_buffer@@Base+0x24c>
   26a4c:	add	r3, pc, r3
   26a50:	ldr	r2, [pc, #68]	; 26a9c <flatcc_builder_create_buffer@@Base+0x250>
   26a54:	add	r3, r3, #28
   26a58:	add	r1, pc, r1
   26a5c:	add	r0, pc, r0
   26a60:	bl	14610 <__assert_fail@plt>
   26a64:	ldr	r3, [pc, #52]	; 26aa0 <flatcc_builder_create_buffer@@Base+0x254>
   26a68:	ldr	r1, [pc, #52]	; 26aa4 <flatcc_builder_create_buffer@@Base+0x258>
   26a6c:	ldr	r0, [pc, #52]	; 26aa8 <flatcc_builder_create_buffer@@Base+0x25c>
   26a70:	add	r3, pc, r3
   26a74:	mov	r2, #772	; 0x304
   26a78:	add	r3, r3, #204	; 0xcc
   26a7c:	add	r1, pc, r1
   26a80:	add	r0, pc, r0
   26a84:	bl	14610 <__assert_fail@plt>
   26a88:	andeq	sp, r2, r8, ror r7
   26a8c:	andeq	r0, r0, r4, rrx
   26a90:	andeq	sl, r1, r0, asr r3
   26a94:	muleq	r1, r4, sl
   26a98:	andeq	sl, r1, r8, lsl fp
   26a9c:	andeq	r0, r0, fp, lsl #5
   26aa0:	andeq	sl, r1, ip, lsr #6
   26aa4:	andeq	sl, r1, r0, ror sl
   26aa8:	strdeq	sl, [r1], -r4

00026aac <flatcc_builder_create_struct@@Base>:
   26aac:	push	{r4, r5, r6, lr}
   26ab0:	cmp	r3, #0
   26ab4:	ldr	lr, [pc, #300]	; 26be8 <flatcc_builder_create_struct@@Base+0x13c>
   26ab8:	sub	sp, sp, #80	; 0x50
   26abc:	add	lr, pc, lr
   26ac0:	beq	26bc4 <flatcc_builder_create_struct@@Base+0x118>
   26ac4:	mov	r5, r0
   26ac8:	ldrh	r0, [r0, #128]	; 0x80
   26acc:	ldr	ip, [r5, #136]	; 0x88
   26ad0:	cmp	r0, r3
   26ad4:	strhcc	r3, [r5, #128]	; 0x80
   26ad8:	mov	r0, #0
   26adc:	sub	r3, r3, #1
   26ae0:	sub	r4, ip, r2
   26ae4:	cmp	r2, #0
   26ae8:	and	r3, r3, r4
   26aec:	str	r0, [sp, #8]
   26af0:	str	r0, [sp, #12]
   26af4:	bne	26b74 <flatcc_builder_create_struct@@Base+0xc8>
   26af8:	cmp	r3, #0
   26afc:	movne	r6, #1
   26b00:	movne	r1, r2
   26b04:	beq	26b9c <flatcc_builder_create_struct@@Base+0xf0>
   26b08:	ldr	r0, [pc, #220]	; 26bec <flatcc_builder_create_struct@@Base+0x140>
   26b0c:	add	r1, r1, #1
   26b10:	add	r2, r2, r3
   26b14:	add	r4, sp, #80	; 0x50
   26b18:	add	r1, r4, r1, lsl #3
   26b1c:	str	r2, [sp, #8]
   26b20:	sub	r4, ip, r2
   26b24:	ldr	r0, [lr, r0]
   26b28:	str	r3, [r1, #-68]	; 0xffffffbc
   26b2c:	str	r0, [r1, #-72]	; 0xffffffb8
   26b30:	str	r6, [sp, #12]
   26b34:	cmp	ip, r4
   26b38:	ble	26b9c <flatcc_builder_create_struct@@Base+0xf0>
   26b3c:	ldr	r3, [sp, #12]
   26b40:	ldr	r0, [r5, #36]	; 0x24
   26b44:	add	r1, sp, #16
   26b48:	str	r2, [sp]
   26b4c:	mov	r2, r3
   26b50:	ldr	r6, [r5, #44]	; 0x2c
   26b54:	mov	r3, r4
   26b58:	blx	r6
   26b5c:	cmp	r0, #0
   26b60:	bne	26ba0 <flatcc_builder_create_struct@@Base+0xf4>
   26b64:	mov	r0, r4
   26b68:	str	r4, [r5, #136]	; 0x88
   26b6c:	add	sp, sp, #80	; 0x50
   26b70:	pop	{r4, r5, r6, pc}
   26b74:	cmp	r3, r0
   26b78:	mov	r0, #1
   26b7c:	str	r1, [sp, #16]
   26b80:	str	r2, [sp, #8]
   26b84:	str	r2, [sp, #20]
   26b88:	str	r0, [sp, #12]
   26b8c:	movne	r1, r0
   26b90:	movne	r6, #2
   26b94:	beq	26b34 <flatcc_builder_create_struct@@Base+0x88>
   26b98:	b	26b08 <flatcc_builder_create_struct@@Base+0x5c>
   26b9c:	bl	1481c <__assert_fail@plt+0x20c>
   26ba0:	ldr	r3, [pc, #72]	; 26bf0 <flatcc_builder_create_struct@@Base+0x144>
   26ba4:	ldr	r1, [pc, #72]	; 26bf4 <flatcc_builder_create_struct@@Base+0x148>
   26ba8:	ldr	r0, [pc, #72]	; 26bf8 <flatcc_builder_create_struct@@Base+0x14c>
   26bac:	add	r3, pc, r3
   26bb0:	ldr	r2, [pc, #68]	; 26bfc <flatcc_builder_create_struct@@Base+0x150>
   26bb4:	add	r3, r3, #28
   26bb8:	add	r1, pc, r1
   26bbc:	add	r0, pc, r0
   26bc0:	bl	14610 <__assert_fail@plt>
   26bc4:	ldr	r3, [pc, #52]	; 26c00 <flatcc_builder_create_struct@@Base+0x154>
   26bc8:	ldr	r1, [pc, #52]	; 26c04 <flatcc_builder_create_struct@@Base+0x158>
   26bcc:	ldr	r0, [pc, #52]	; 26c08 <flatcc_builder_create_struct@@Base+0x15c>
   26bd0:	add	r3, pc, r3
   26bd4:	ldr	r2, [pc, #48]	; 26c0c <flatcc_builder_create_struct@@Base+0x160>
   26bd8:	add	r3, r3, #236	; 0xec
   26bdc:	add	r1, pc, r1
   26be0:	add	r0, pc, r0
   26be4:	bl	14610 <__assert_fail@plt>
   26be8:	andeq	sp, r2, ip, lsr r5
   26bec:	andeq	r0, r0, r4, rrx
   26bf0:	strdeq	sl, [r1], -r0
   26bf4:	andeq	sl, r1, r4, lsr r9
   26bf8:			; <UNDEFINED> instruction: 0x0001a9b8
   26bfc:	andeq	r0, r0, fp, lsl #5
   26c00:	andeq	sl, r1, ip, asr #3
   26c04:	andeq	sl, r1, r0, lsl r9
   26c08:	strdeq	sl, [r1], -r8
   26c0c:	andeq	r0, r0, pc, lsl #6

00026c10 <flatcc_builder_start_buffer@@Base>:
   26c10:	push	{r4, r5, r6, r7, r8, lr}
   26c14:	mov	r5, r1
   26c18:	ldrh	r1, [r0, #128]	; 0x80
   26c1c:	mov	r4, r0
   26c20:	mov	r7, r2
   26c24:	mov	r6, r3
   26c28:	bl	25ed0 <flatcc_builder_default_alloc@@Base+0x23c>
   26c2c:	ldr	r1, [pc, #140]	; 26cc0 <flatcc_builder_start_buffer@@Base+0xb0>
   26c30:	add	r1, pc, r1
   26c34:	cmp	r0, #0
   26c38:	bne	26cb8 <flatcc_builder_start_buffer@@Base+0xa8>
   26c3c:	ldrh	r3, [r4, #132]	; 0x84
   26c40:	ldr	ip, [r4, #32]
   26c44:	mov	r2, #1
   26c48:	strh	r2, [r4, #128]	; 0x80
   26c4c:	strh	r3, [ip, #34]	; 0x22
   26c50:	ldrh	r3, [r4, #164]	; 0xa4
   26c54:	strh	r7, [r4, #132]	; 0x84
   26c58:	cmp	r5, #0
   26c5c:	strh	r3, [ip, #32]
   26c60:	ldr	r3, [r4, #144]	; 0x90
   26c64:	strh	r6, [r4, #164]	; 0xa4
   26c68:	str	r3, [ip, #20]
   26c6c:	ldr	r3, [r4, #152]	; 0x98
   26c70:	str	r3, [ip, #28]
   26c74:	ldr	r3, [r4, #148]	; 0x94
   26c78:	ldr	lr, [r4, #136]	; 0x88
   26c7c:	ldr	r2, [r4, #168]	; 0xa8
   26c80:	add	r6, r3, #1
   26c84:	str	r3, [r4, #152]	; 0x98
   26c88:	str	r6, [r4, #148]	; 0x94
   26c8c:	str	lr, [r4, #144]	; 0x90
   26c90:	str	r2, [ip, #16]
   26c94:	beq	26cac <flatcc_builder_start_buffer@@Base+0x9c>
   26c98:	ldr	r2, [r5]
   26c9c:	mov	r3, #1
   26ca0:	str	r2, [r4, #168]	; 0xa8
   26ca4:	strh	r3, [ip, #14]
   26ca8:	pop	{r4, r5, r6, r7, r8, pc}
   26cac:	ldr	r3, [pc, #16]	; 26cc4 <flatcc_builder_start_buffer@@Base+0xb4>
   26cb0:	ldr	r5, [r1, r3]
   26cb4:	b	26c98 <flatcc_builder_start_buffer@@Base+0x88>
   26cb8:	mvn	r0, #0
   26cbc:	pop	{r4, r5, r6, r7, r8, pc}
   26cc0:	andeq	sp, r2, r8, asr #7
   26cc4:	andeq	r0, r0, r4, rrx

00026cc8 <flatcc_builder_end_buffer@@Base>:
   26cc8:	ldr	ip, [r0, #32]
   26ccc:	ldrh	r2, [r0, #164]	; 0xa4
   26cd0:	push	{r4, r5, r6, lr}
   26cd4:	mov	r4, r0
   26cd8:	ldrh	ip, [ip, #14]
   26cdc:	ldr	r0, [r0, #152]	; 0x98
   26ce0:	and	r2, r2, #2
   26ce4:	cmp	r0, #0
   26ce8:	moveq	r0, r2
   26cec:	orrne	r0, r2, #1
   26cf0:	cmp	ip, #1
   26cf4:	sub	sp, sp, #8
   26cf8:	bne	26dd8 <flatcc_builder_end_buffer@@Base+0x110>
   26cfc:	ldrh	r2, [r4, #132]	; 0x84
   26d00:	ldrh	ip, [r4, #128]	; 0x80
   26d04:	mov	r3, r1
   26d08:	add	r1, r4, #168	; 0xa8
   26d0c:	cmp	r2, ip
   26d10:	movhi	ip, r2
   26d14:	strhhi	r2, [r4, #128]	; 0x80
   26d18:	str	r0, [sp, #4]
   26d1c:	str	ip, [sp]
   26d20:	mov	r0, r4
   26d24:	bl	2684c <flatcc_builder_create_buffer@@Base>
   26d28:	subs	r5, r0, #0
   26d2c:	beq	26dcc <flatcc_builder_end_buffer@@Base+0x104>
   26d30:	ldr	r3, [r4, #32]
   26d34:	ldr	r2, [r4, #20]
   26d38:	mov	r1, #0
   26d3c:	ldr	ip, [r3, #20]
   26d40:	ldr	r0, [r4, #16]
   26d44:	str	ip, [r4, #144]	; 0x90
   26d48:	ldr	ip, [r3, #28]
   26d4c:	str	ip, [r4, #152]	; 0x98
   26d50:	ldr	ip, [r3, #16]
   26d54:	str	ip, [r4, #168]	; 0xa8
   26d58:	ldrh	r3, [r3, #32]
   26d5c:	strh	r3, [r4, #164]	; 0xa4
   26d60:	bl	145bc <memset@plt>
   26d64:	ldr	r3, [r4, #32]
   26d68:	ldr	r2, [r4, #64]	; 0x40
   26d6c:	ldrh	lr, [r4, #130]	; 0x82
   26d70:	ldr	ip, [r3]
   26d74:	ldr	r1, [r3, #4]
   26d78:	ldrh	r0, [r4, #128]	; 0x80
   26d7c:	sub	r2, r2, ip
   26d80:	cmp	r2, r1
   26d84:	movcs	r2, r1
   26d88:	cmp	r0, lr
   26d8c:	ldr	r0, [r4, #60]	; 0x3c
   26d90:	ldr	r6, [r3, #8]
   26d94:	str	r2, [r4, #24]
   26d98:	add	r2, r0, ip
   26d9c:	str	r2, [r4, #16]
   26da0:	str	r6, [r4, #20]
   26da4:	ldr	r2, [r4, #156]	; 0x9c
   26da8:	str	ip, [r4, #28]
   26dac:	str	r1, [r3, #4]
   26db0:	strhcc	lr, [r4, #128]	; 0x80
   26db4:	ldrh	r1, [r3, #12]
   26db8:	sub	r2, r2, #1
   26dbc:	sub	r3, r3, #36	; 0x24
   26dc0:	str	r2, [r4, #156]	; 0x9c
   26dc4:	strh	r1, [r4, #130]	; 0x82
   26dc8:	str	r3, [r4, #32]
   26dcc:	mov	r0, r5
   26dd0:	add	sp, sp, #8
   26dd4:	pop	{r4, r5, r6, pc}
   26dd8:	ldr	r3, [pc, #28]	; 26dfc <flatcc_builder_end_buffer@@Base+0x134>
   26ddc:	ldr	r1, [pc, #28]	; 26e00 <flatcc_builder_end_buffer@@Base+0x138>
   26de0:	ldr	r0, [pc, #28]	; 26e04 <flatcc_builder_end_buffer@@Base+0x13c>
   26de4:	add	r3, pc, r3
   26de8:	ldr	r2, [pc, #24]	; 26e08 <flatcc_builder_end_buffer@@Base+0x140>
   26dec:	add	r3, r3, #268	; 0x10c
   26df0:	add	r1, pc, r1
   26df4:	add	r0, pc, r0
   26df8:	bl	14610 <__assert_fail@plt>
   26dfc:			; <UNDEFINED> instruction: 0x00019fb8
   26e00:	strdeq	sl, [r1], -ip
   26e04:	strdeq	sl, [r1], -r0
   26e08:	andeq	r0, r0, r6, asr #6

00026e0c <flatcc_builder_start_struct@@Base>:
   26e0c:	push	{r4, r5, r6, lr}
   26e10:	mov	r5, r1
   26e14:	mov	r1, r2
   26e18:	mov	r4, r0
   26e1c:	bl	25ed0 <flatcc_builder_default_alloc@@Base+0x23c>
   26e20:	cmp	r0, #0
   26e24:	bne	26ea4 <flatcc_builder_start_struct@@Base+0x98>
   26e28:	ldr	r2, [r4, #28]
   26e2c:	ldr	r3, [r4, #64]	; 0x40
   26e30:	ldr	r0, [r4, #60]	; 0x3c
   26e34:	ldr	ip, [r4, #32]
   26e38:	sub	r3, r3, r2
   26e3c:	cmn	r3, #4
   26e40:	ldr	r6, [r4, #20]
   26e44:	add	r0, r0, r2
   26e48:	mov	r2, #2
   26e4c:	strh	r2, [ip, #14]
   26e50:	mvnhi	r2, #3
   26e54:	movhi	r3, r2
   26e58:	add	r5, r5, r6
   26e5c:	strhi	r2, [r4, #24]
   26e60:	strls	r3, [r4, #24]
   26e64:	mvn	r2, #3
   26e68:	cmp	r5, r3
   26e6c:	str	r0, [r4, #16]
   26e70:	str	r2, [ip, #4]
   26e74:	str	r5, [r4, #20]
   26e78:	bcs	26e84 <flatcc_builder_start_struct@@Base+0x78>
   26e7c:	add	r0, r0, r6
   26e80:	pop	{r4, r5, r6, pc}
   26e84:	add	r1, r5, #1
   26e88:	mov	r0, r4
   26e8c:	bl	25c20 <union_vector_tests@@Base+0x180>
   26e90:	cmp	r0, #0
   26e94:	bne	26ea4 <flatcc_builder_start_struct@@Base+0x98>
   26e98:	ldr	r0, [r4, #16]
   26e9c:	add	r0, r0, r6
   26ea0:	pop	{r4, r5, r6, pc}
   26ea4:	mov	r0, #0
   26ea8:	pop	{r4, r5, r6, pc}

00026eac <flatcc_builder_struct_edit@@Base>:
   26eac:	ldr	r0, [r0, #16]
   26eb0:	bx	lr

00026eb4 <flatcc_builder_end_struct@@Base>:
   26eb4:	ldr	r3, [r0, #32]
   26eb8:	push	{r4, r5, r6, lr}
   26ebc:	ldrh	r3, [r3, #14]
   26ec0:	cmp	r3, #2
   26ec4:	bne	26f64 <flatcc_builder_end_struct@@Base+0xb0>
   26ec8:	ldrh	r3, [r0, #130]	; 0x82
   26ecc:	ldr	r2, [r0, #20]
   26ed0:	ldr	r1, [r0, #16]
   26ed4:	mov	r4, r0
   26ed8:	bl	26aac <flatcc_builder_create_struct@@Base>
   26edc:	subs	r5, r0, #0
   26ee0:	beq	26f5c <flatcc_builder_end_struct@@Base+0xa8>
   26ee4:	ldr	r2, [r4, #20]
   26ee8:	mov	r1, #0
   26eec:	ldr	r0, [r4, #16]
   26ef0:	bl	145bc <memset@plt>
   26ef4:	ldr	r3, [r4, #32]
   26ef8:	ldr	r2, [r4, #64]	; 0x40
   26efc:	ldrh	lr, [r4, #130]	; 0x82
   26f00:	ldr	ip, [r3]
   26f04:	ldr	r1, [r3, #4]
   26f08:	ldrh	r0, [r4, #128]	; 0x80
   26f0c:	sub	r2, r2, ip
   26f10:	cmp	r2, r1
   26f14:	movcs	r2, r1
   26f18:	cmp	r0, lr
   26f1c:	ldr	r0, [r4, #60]	; 0x3c
   26f20:	ldr	r6, [r3, #8]
   26f24:	str	r2, [r4, #24]
   26f28:	add	r2, r0, ip
   26f2c:	str	r2, [r4, #16]
   26f30:	str	r6, [r4, #20]
   26f34:	ldr	r2, [r4, #156]	; 0x9c
   26f38:	str	ip, [r4, #28]
   26f3c:	str	r1, [r3, #4]
   26f40:	strhcc	lr, [r4, #128]	; 0x80
   26f44:	ldrh	r1, [r3, #12]
   26f48:	sub	r2, r2, #1
   26f4c:	sub	r3, r3, #36	; 0x24
   26f50:	str	r2, [r4, #156]	; 0x9c
   26f54:	strh	r1, [r4, #130]	; 0x82
   26f58:	str	r3, [r4, #32]
   26f5c:	mov	r0, r5
   26f60:	pop	{r4, r5, r6, pc}
   26f64:	ldr	r3, [pc, #28]	; 26f88 <flatcc_builder_end_struct@@Base+0xd4>
   26f68:	ldr	r1, [pc, #28]	; 26f8c <flatcc_builder_end_struct@@Base+0xd8>
   26f6c:	ldr	r0, [pc, #28]	; 26f90 <flatcc_builder_end_struct@@Base+0xdc>
   26f70:	add	r3, pc, r3
   26f74:	mov	r2, #872	; 0x368
   26f78:	add	r3, r3, #296	; 0x128
   26f7c:	add	r1, pc, r1
   26f80:	add	r0, pc, r0
   26f84:	bl	14610 <__assert_fail@plt>
   26f88:	andeq	r9, r1, ip, lsr #28
   26f8c:	andeq	sl, r1, r0, ror r5
   26f90:	muleq	r1, r0, r6

00026f94 <flatcc_builder_extend_vector@@Base>:
   26f94:	ldr	r2, [r0, #32]
   26f98:	push	{r4, r5, r6, lr}
   26f9c:	ldr	r3, [r2, #20]
   26fa0:	ldr	r4, [r2, #24]
   26fa4:	add	ip, r1, r3
   26fa8:	cmp	r3, ip
   26fac:	movls	r3, #0
   26fb0:	movhi	r3, #1
   26fb4:	cmp	r4, ip
   26fb8:	movcs	r4, r3
   26fbc:	orrcc	r4, r3, #1
   26fc0:	cmp	r4, #0
   26fc4:	bne	27014 <flatcc_builder_extend_vector@@Base+0x80>
   26fc8:	ldr	lr, [r2, #16]
   26fcc:	str	ip, [r2, #20]
   26fd0:	ldr	r6, [r0, #20]
   26fd4:	ldr	r3, [r0, #24]
   26fd8:	mla	r1, lr, r1, r6
   26fdc:	mov	r5, r0
   26fe0:	cmp	r1, r3
   26fe4:	str	r1, [r0, #20]
   26fe8:	bcs	26ff8 <flatcc_builder_extend_vector@@Base+0x64>
   26fec:	ldr	r0, [r5, #16]
   26ff0:	add	r0, r0, r6
   26ff4:	pop	{r4, r5, r6, pc}
   26ff8:	add	r1, r1, #1
   26ffc:	mvn	r2, #3
   27000:	bl	25c20 <union_vector_tests@@Base+0x180>
   27004:	cmp	r0, #0
   27008:	beq	26fec <flatcc_builder_extend_vector@@Base+0x58>
   2700c:	mov	r0, r4
   27010:	pop	{r4, r5, r6, pc}
   27014:	bl	14854 <__assert_fail@plt+0x244>

00027018 <flatcc_builder_vector_push@@Base>:
   27018:	ldr	r3, [r0, #32]
   2701c:	push	{r4, r5, r6, r7, r8, lr}
   27020:	ldrh	r2, [r3, #14]
   27024:	cmp	r2, #4
   27028:	bne	270d0 <flatcc_builder_vector_push@@Base+0xb8>
   2702c:	mov	r6, r1
   27030:	ldr	r2, [r3, #20]
   27034:	ldr	r1, [r3, #24]
   27038:	cmp	r2, r1
   2703c:	bhi	270ac <flatcc_builder_vector_push@@Base+0x94>
   27040:	add	r2, r2, #1
   27044:	str	r2, [r3, #20]
   27048:	ldr	r7, [r3, #16]
   2704c:	ldr	r5, [r0, #20]
   27050:	ldr	r3, [r0, #24]
   27054:	add	r1, r7, r5
   27058:	cmp	r1, r3
   2705c:	mov	r4, r0
   27060:	str	r1, [r0, #20]
   27064:	bcs	27090 <flatcc_builder_vector_push@@Base+0x78>
   27068:	ldr	r3, [r4, #16]
   2706c:	adds	r3, r3, r5
   27070:	beq	27088 <flatcc_builder_vector_push@@Base+0x70>
   27074:	mov	r0, r3
   27078:	mov	r2, r7
   2707c:	mov	r1, r6
   27080:	bl	14544 <memcpy@plt>
   27084:	mov	r3, r0
   27088:	mov	r0, r3
   2708c:	pop	{r4, r5, r6, r7, r8, pc}
   27090:	add	r1, r1, #1
   27094:	mvn	r2, #3
   27098:	bl	25c20 <union_vector_tests@@Base+0x180>
   2709c:	cmp	r0, #0
   270a0:	beq	27068 <flatcc_builder_vector_push@@Base+0x50>
   270a4:	mov	r3, #0
   270a8:	b	27088 <flatcc_builder_vector_push@@Base+0x70>
   270ac:	ldr	r3, [pc, #64]	; 270f4 <flatcc_builder_vector_push@@Base+0xdc>
   270b0:	ldr	r1, [pc, #64]	; 270f8 <flatcc_builder_vector_push@@Base+0xe0>
   270b4:	ldr	r0, [pc, #64]	; 270fc <flatcc_builder_vector_push@@Base+0xe4>
   270b8:	add	r3, pc, r3
   270bc:	mov	r2, #908	; 0x38c
   270c0:	add	r3, r3, #324	; 0x144
   270c4:	add	r1, pc, r1
   270c8:	add	r0, pc, r0
   270cc:	bl	14610 <__assert_fail@plt>
   270d0:	ldr	r3, [pc, #40]	; 27100 <flatcc_builder_vector_push@@Base+0xe8>
   270d4:	ldr	r1, [pc, #40]	; 27104 <flatcc_builder_vector_push@@Base+0xec>
   270d8:	ldr	r0, [pc, #40]	; 27108 <flatcc_builder_vector_push@@Base+0xf0>
   270dc:	add	r3, pc, r3
   270e0:	ldr	r2, [pc, #36]	; 2710c <flatcc_builder_vector_push@@Base+0xf4>
   270e4:	add	r3, r3, #324	; 0x144
   270e8:	add	r1, pc, r1
   270ec:	add	r0, pc, r0
   270f0:	bl	14610 <__assert_fail@plt>
   270f4:	andeq	r9, r1, r4, ror #25
   270f8:	andeq	sl, r1, r8, lsr #8
   270fc:	andeq	sl, r1, r0, lsr #11
   27100:	andeq	r9, r1, r0, asr #25
   27104:	andeq	sl, r1, r4, lsl #8
   27108:	andeq	sl, r1, r0, asr r5
   2710c:	andeq	r0, r0, fp, lsl #7

00027110 <flatcc_builder_append_vector@@Base>:
   27110:	push	{r4, r5, r6, r7, r8, lr}
   27114:	mov	r7, r1
   27118:	ldr	r1, [r0, #32]
   2711c:	ldrh	r3, [r1, #14]
   27120:	cmp	r3, #4
   27124:	bne	271c4 <flatcc_builder_append_vector@@Base+0xb4>
   27128:	ldr	r3, [r1, #20]
   2712c:	ldr	r4, [r1, #24]
   27130:	add	ip, r2, r3
   27134:	cmp	r3, ip
   27138:	movls	r3, #0
   2713c:	movhi	r3, #1
   27140:	cmp	r4, ip
   27144:	movcs	r4, r3
   27148:	orrcc	r4, r3, #1
   2714c:	cmp	r4, #0
   27150:	bne	271c0 <flatcc_builder_append_vector@@Base+0xb0>
   27154:	ldr	r6, [r1, #16]
   27158:	str	ip, [r1, #20]
   2715c:	ldr	r8, [r0, #20]
   27160:	mul	r6, r6, r2
   27164:	ldr	r3, [r0, #24]
   27168:	add	r1, r6, r8
   2716c:	cmp	r1, r3
   27170:	mov	r5, r0
   27174:	str	r1, [r0, #20]
   27178:	bcs	271a4 <flatcc_builder_append_vector@@Base+0x94>
   2717c:	ldr	r3, [r5, #16]
   27180:	adds	r3, r3, r8
   27184:	beq	2719c <flatcc_builder_append_vector@@Base+0x8c>
   27188:	mov	r0, r3
   2718c:	mov	r2, r6
   27190:	mov	r1, r7
   27194:	bl	14544 <memcpy@plt>
   27198:	mov	r3, r0
   2719c:	mov	r0, r3
   271a0:	pop	{r4, r5, r6, r7, r8, pc}
   271a4:	add	r1, r1, #1
   271a8:	mvn	r2, #3
   271ac:	bl	25c20 <union_vector_tests@@Base+0x180>
   271b0:	cmp	r0, #0
   271b4:	beq	2717c <flatcc_builder_append_vector@@Base+0x6c>
   271b8:	mov	r3, r4
   271bc:	b	2719c <flatcc_builder_append_vector@@Base+0x8c>
   271c0:	bl	14854 <__assert_fail@plt+0x244>
   271c4:	ldr	r3, [pc, #28]	; 271e8 <flatcc_builder_append_vector@@Base+0xd8>
   271c8:	ldr	r1, [pc, #28]	; 271ec <flatcc_builder_append_vector@@Base+0xdc>
   271cc:	ldr	r0, [pc, #28]	; 271f0 <flatcc_builder_append_vector@@Base+0xe0>
   271d0:	add	r3, pc, r3
   271d4:	ldr	r2, [pc, #24]	; 271f4 <flatcc_builder_append_vector@@Base+0xe4>
   271d8:	add	r3, r3, #352	; 0x160
   271dc:	add	r1, pc, r1
   271e0:	add	r0, pc, r0
   271e4:	bl	14610 <__assert_fail@plt>
   271e8:	andeq	r9, r1, ip, asr #23
   271ec:	andeq	sl, r1, r0, lsl r3
   271f0:	andeq	sl, r1, ip, asr r4
   271f4:	muleq	r0, r3, r3

000271f8 <flatcc_builder_extend_offset_vector@@Base>:
   271f8:	ldr	ip, [r0, #32]
   271fc:	push	{r4, r5, r6, lr}
   27200:	ldr	r3, [ip, #20]
   27204:	adds	r2, r1, r3
   27208:	movcs	r3, #1
   2720c:	movcc	r3, #0
   27210:	cmn	r2, #-1073741823	; 0xc0000001
   27214:	movls	r4, #0
   27218:	movhi	r4, #1
   2721c:	orrs	r4, r3, r4
   27220:	bne	2726c <flatcc_builder_extend_offset_vector@@Base+0x74>
   27224:	str	r2, [ip, #20]
   27228:	ldr	r6, [r0, #20]
   2722c:	ldr	r3, [r0, #24]
   27230:	add	r1, r6, r1, lsl #2
   27234:	cmp	r1, r3
   27238:	mov	r5, r0
   2723c:	str	r1, [r0, #20]
   27240:	bcs	27250 <flatcc_builder_extend_offset_vector@@Base+0x58>
   27244:	ldr	r0, [r5, #16]
   27248:	add	r0, r0, r6
   2724c:	pop	{r4, r5, r6, pc}
   27250:	add	r1, r1, #1
   27254:	mvn	r2, #3
   27258:	bl	25c20 <union_vector_tests@@Base+0x180>
   2725c:	cmp	r0, #0
   27260:	beq	27244 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   27264:	mov	r0, r4
   27268:	pop	{r4, r5, r6, pc}
   2726c:	bl	14854 <__assert_fail@plt+0x244>

00027270 <flatcc_builder_offset_vector_push@@Base>:
   27270:	ldr	r2, [r0, #32]
   27274:	push	{r4, r5, r6, lr}
   27278:	ldrh	r3, [r2, #14]
   2727c:	cmp	r3, #5
   27280:	bne	272e8 <flatcc_builder_offset_vector_push@@Base+0x78>
   27284:	ldr	r3, [r2, #20]
   27288:	cmn	r3, #-1073741823	; 0xc0000001
   2728c:	beq	272e0 <flatcc_builder_offset_vector_push@@Base+0x70>
   27290:	add	r3, r3, #1
   27294:	str	r3, [r2, #20]
   27298:	ldr	r5, [r0, #20]
   2729c:	ldr	r2, [r0, #24]
   272a0:	add	r3, r5, #4
   272a4:	cmp	r3, r2
   272a8:	mov	r4, r0
   272ac:	mov	r6, r1
   272b0:	str	r3, [r0, #20]
   272b4:	bcs	272cc <flatcc_builder_offset_vector_push@@Base+0x5c>
   272b8:	ldr	r3, [r4, #16]
   272bc:	adds	r0, r3, r5
   272c0:	beq	2730c <flatcc_builder_offset_vector_push@@Base+0x9c>
   272c4:	str	r6, [r3, r5]
   272c8:	pop	{r4, r5, r6, pc}
   272cc:	mvn	r2, #3
   272d0:	add	r1, r5, #5
   272d4:	bl	25c20 <union_vector_tests@@Base+0x180>
   272d8:	cmp	r0, #0
   272dc:	beq	272b8 <flatcc_builder_offset_vector_push@@Base+0x48>
   272e0:	mov	r0, #0
   272e4:	pop	{r4, r5, r6, pc}
   272e8:	ldr	r3, [pc, #32]	; 27310 <flatcc_builder_offset_vector_push@@Base+0xa0>
   272ec:	ldr	r1, [pc, #32]	; 27314 <flatcc_builder_offset_vector_push@@Base+0xa4>
   272f0:	ldr	r0, [pc, #32]	; 27318 <flatcc_builder_offset_vector_push@@Base+0xa8>
   272f4:	add	r3, pc, r3
   272f8:	ldr	r2, [pc, #28]	; 2731c <flatcc_builder_offset_vector_push@@Base+0xac>
   272fc:	add	r3, r3, #384	; 0x180
   27300:	add	r1, pc, r1
   27304:	add	r0, pc, r0
   27308:	bl	14610 <__assert_fail@plt>
   2730c:	pop	{r4, r5, r6, pc}
   27310:	andeq	r9, r1, r8, lsr #21
   27314:	andeq	sl, r1, ip, ror #3
   27318:	andeq	sl, r1, r4, lsr #7
   2731c:	andeq	r0, r0, r6, lsr #7

00027320 <flatcc_builder_append_offset_vector@@Base>:
   27320:	ldr	ip, [r0, #32]
   27324:	push	{r4, r5, r6, r7, r8, lr}
   27328:	ldrh	r3, [ip, #14]
   2732c:	cmp	r3, #5
   27330:	bne	273c8 <flatcc_builder_append_offset_vector@@Base+0xa8>
   27334:	mov	r6, r1
   27338:	ldr	r1, [ip, #20]
   2733c:	adds	r1, r2, r1
   27340:	movcs	lr, #1
   27344:	movcc	lr, #0
   27348:	cmn	r1, #-1073741823	; 0xc0000001
   2734c:	movls	r3, #0
   27350:	movhi	r3, #1
   27354:	orrs	r8, lr, r3
   27358:	bne	273c4 <flatcc_builder_append_offset_vector@@Base+0xa4>
   2735c:	str	r1, [ip, #20]
   27360:	ldr	r7, [r0, #20]
   27364:	lsl	r4, r2, #2
   27368:	ldr	r3, [r0, #24]
   2736c:	add	r1, r4, r7
   27370:	cmp	r1, r3
   27374:	mov	r5, r0
   27378:	str	r1, [r0, #20]
   2737c:	bcs	273a8 <flatcc_builder_append_offset_vector@@Base+0x88>
   27380:	ldr	r3, [r5, #16]
   27384:	adds	r3, r3, r7
   27388:	beq	273a0 <flatcc_builder_append_offset_vector@@Base+0x80>
   2738c:	mov	r0, r3
   27390:	mov	r2, r4
   27394:	mov	r1, r6
   27398:	bl	14544 <memcpy@plt>
   2739c:	mov	r3, r0
   273a0:	mov	r0, r3
   273a4:	pop	{r4, r5, r6, r7, r8, pc}
   273a8:	add	r1, r1, #1
   273ac:	mvn	r2, #3
   273b0:	bl	25c20 <union_vector_tests@@Base+0x180>
   273b4:	cmp	r0, #0
   273b8:	beq	27380 <flatcc_builder_append_offset_vector@@Base+0x60>
   273bc:	mov	r3, r8
   273c0:	b	273a0 <flatcc_builder_append_offset_vector@@Base+0x80>
   273c4:	bl	14854 <__assert_fail@plt+0x244>
   273c8:	ldr	r3, [pc, #28]	; 273ec <flatcc_builder_append_offset_vector@@Base+0xcc>
   273cc:	ldr	r1, [pc, #28]	; 273f0 <flatcc_builder_append_offset_vector@@Base+0xd0>
   273d0:	ldr	r0, [pc, #28]	; 273f4 <flatcc_builder_append_offset_vector@@Base+0xd4>
   273d4:	add	r3, pc, r3
   273d8:	mov	r2, #948	; 0x3b4
   273dc:	add	r3, r3, #420	; 0x1a4
   273e0:	add	r1, pc, r1
   273e4:	add	r0, pc, r0
   273e8:	bl	14610 <__assert_fail@plt>
   273ec:	andeq	r9, r1, r8, asr #19
   273f0:	andeq	sl, r1, ip, lsl #2
   273f4:	andeq	sl, r1, r4, asr #5

000273f8 <flatcc_builder_extend_string@@Base>:
   273f8:	ldr	r2, [r0, #32]
   273fc:	push	{r4, r5, r6, lr}
   27400:	ldrh	r3, [r2, #14]
   27404:	cmp	r3, #6
   27408:	bne	27464 <flatcc_builder_extend_string@@Base+0x6c>
   2740c:	ldr	r3, [r2, #20]
   27410:	adds	r3, r1, r3
   27414:	bcs	27460 <flatcc_builder_extend_string@@Base+0x68>
   27418:	str	r3, [r2, #20]
   2741c:	ldr	r5, [r0, #20]
   27420:	ldr	r3, [r0, #24]
   27424:	add	r1, r1, r5
   27428:	cmp	r1, r3
   2742c:	mov	r4, r0
   27430:	str	r1, [r0, #20]
   27434:	bcs	27444 <flatcc_builder_extend_string@@Base+0x4c>
   27438:	ldr	r0, [r4, #16]
   2743c:	add	r0, r0, r5
   27440:	pop	{r4, r5, r6, pc}
   27444:	add	r1, r1, #1
   27448:	mvn	r2, #3
   2744c:	bl	25c20 <union_vector_tests@@Base+0x180>
   27450:	cmp	r0, #0
   27454:	beq	27438 <flatcc_builder_extend_string@@Base+0x40>
   27458:	mov	r0, #0
   2745c:	pop	{r4, r5, r6, pc}
   27460:	bl	14854 <__assert_fail@plt+0x244>
   27464:	ldr	r3, [pc, #28]	; 27488 <flatcc_builder_extend_string@@Base+0x90>
   27468:	ldr	r1, [pc, #28]	; 2748c <flatcc_builder_extend_string@@Base+0x94>
   2746c:	ldr	r0, [pc, #28]	; 27490 <flatcc_builder_extend_string@@Base+0x98>
   27470:	add	r3, pc, r3
   27474:	ldr	r2, [pc, #24]	; 27494 <flatcc_builder_extend_string@@Base+0x9c>
   27478:	add	r3, r3, #456	; 0x1c8
   2747c:	add	r1, pc, r1
   27480:	add	r0, pc, r0
   27484:	bl	14610 <__assert_fail@plt>
   27488:	andeq	r9, r1, ip, lsr #18
   2748c:	andeq	sl, r1, r0, ror r0
   27490:	andeq	sl, r1, ip, asr r2
   27494:			; <UNDEFINED> instruction: 0x000003bd

00027498 <flatcc_builder_append_string@@Base>:
   27498:	push	{r4, r5, r6, r7, r8, lr}
   2749c:	mov	r7, r1
   274a0:	ldr	r1, [r0, #32]
   274a4:	ldrh	r3, [r1, #14]
   274a8:	cmp	r3, #6
   274ac:	bne	27528 <flatcc_builder_append_string@@Base+0x90>
   274b0:	ldr	r3, [r1, #20]
   274b4:	mov	r5, r2
   274b8:	adds	r3, r2, r3
   274bc:	bcs	27524 <flatcc_builder_append_string@@Base+0x8c>
   274c0:	str	r3, [r1, #20]
   274c4:	ldr	r6, [r0, #20]
   274c8:	ldr	r3, [r0, #24]
   274cc:	add	r1, r2, r6
   274d0:	cmp	r1, r3
   274d4:	mov	r4, r0
   274d8:	str	r1, [r0, #20]
   274dc:	bcs	27508 <flatcc_builder_append_string@@Base+0x70>
   274e0:	ldr	r3, [r4, #16]
   274e4:	adds	r3, r3, r6
   274e8:	beq	27500 <flatcc_builder_append_string@@Base+0x68>
   274ec:	mov	r0, r3
   274f0:	mov	r2, r5
   274f4:	mov	r1, r7
   274f8:	bl	14544 <memcpy@plt>
   274fc:	mov	r3, r0
   27500:	mov	r0, r3
   27504:	pop	{r4, r5, r6, r7, r8, pc}
   27508:	add	r1, r1, #1
   2750c:	mvn	r2, #3
   27510:	bl	25c20 <union_vector_tests@@Base+0x180>
   27514:	cmp	r0, #0
   27518:	beq	274e0 <flatcc_builder_append_string@@Base+0x48>
   2751c:	mov	r3, #0
   27520:	b	27500 <flatcc_builder_append_string@@Base+0x68>
   27524:	bl	14854 <__assert_fail@plt+0x244>
   27528:	ldr	r3, [pc, #28]	; 2754c <flatcc_builder_append_string@@Base+0xb4>
   2752c:	ldr	r1, [pc, #28]	; 27550 <flatcc_builder_append_string@@Base+0xb8>
   27530:	ldr	r0, [pc, #28]	; 27554 <flatcc_builder_append_string@@Base+0xbc>
   27534:	add	r3, pc, r3
   27538:	ldr	r2, [pc, #24]	; 27558 <flatcc_builder_append_string@@Base+0xc0>
   2753c:	add	r3, r3, #488	; 0x1e8
   27540:	add	r1, pc, r1
   27544:	add	r0, pc, r0
   27548:	bl	14610 <__assert_fail@plt>
   2754c:	andeq	r9, r1, r8, ror #16
   27550:	andeq	r9, r1, ip, lsr #31
   27554:	muleq	r1, r8, r1
   27558:	andeq	r0, r0, r6, asr #7

0002755c <flatcc_builder_append_string_str@@Base>:
   2755c:	push	{r4, r5, r6, lr}
   27560:	mov	r5, r0
   27564:	mov	r0, r1
   27568:	mov	r4, r1
   2756c:	bl	14598 <strlen@plt>
   27570:	mov	r1, r4
   27574:	mov	r2, r0
   27578:	mov	r0, r5
   2757c:	pop	{r4, r5, r6, lr}
   27580:	b	27498 <flatcc_builder_append_string@@Base>

00027584 <flatcc_builder_append_string_strn@@Base>:
   27584:	push	{r4, r5, r6, lr}
   27588:	mov	r4, r1
   2758c:	mov	r6, r0
   27590:	mov	r1, #0
   27594:	mov	r0, r4
   27598:	mov	r5, r2
   2759c:	bl	145e0 <memchr@plt>
   275a0:	mov	r1, r4
   275a4:	cmp	r0, #0
   275a8:	subne	r5, r0, r4
   275ac:	mov	r2, r5
   275b0:	mov	r0, r6
   275b4:	pop	{r4, r5, r6, lr}
   275b8:	b	27498 <flatcc_builder_append_string@@Base>

000275bc <flatcc_builder_truncate_vector@@Base>:
   275bc:	ldr	r3, [r0, #32]
   275c0:	push	{r4, lr}
   275c4:	ldrh	r2, [r3, #14]
   275c8:	cmp	r2, #4
   275cc:	bne	27610 <flatcc_builder_truncate_vector@@Base+0x54>
   275d0:	ldr	ip, [r3, #20]
   275d4:	cmp	ip, r1
   275d8:	bcc	27634 <flatcc_builder_truncate_vector@@Base+0x78>
   275dc:	ldr	r2, [r3, #16]
   275e0:	sub	ip, ip, r1
   275e4:	str	ip, [r3, #20]
   275e8:	mul	r2, r2, r1
   275ec:	ldr	r3, [r0, #20]
   275f0:	ldr	r1, [r0, #16]
   275f4:	sub	r3, r3, r2
   275f8:	str	r3, [r0, #20]
   275fc:	add	r0, r1, r3
   27600:	mov	r1, #0
   27604:	bl	145bc <memset@plt>
   27608:	mov	r0, #0
   2760c:	pop	{r4, pc}
   27610:	ldr	r3, [pc, #64]	; 27658 <flatcc_builder_truncate_vector@@Base+0x9c>
   27614:	ldr	r1, [pc, #64]	; 2765c <flatcc_builder_truncate_vector@@Base+0xa0>
   27618:	ldr	r0, [pc, #64]	; 27660 <flatcc_builder_truncate_vector@@Base+0xa4>
   2761c:	add	r3, pc, r3
   27620:	ldr	r2, [pc, #60]	; 27664 <flatcc_builder_truncate_vector@@Base+0xa8>
   27624:	add	r3, r3, #520	; 0x208
   27628:	add	r1, pc, r1
   2762c:	add	r0, pc, r0
   27630:	bl	14610 <__assert_fail@plt>
   27634:	ldr	r3, [pc, #44]	; 27668 <flatcc_builder_truncate_vector@@Base+0xac>
   27638:	ldr	r1, [pc, #44]	; 2766c <flatcc_builder_truncate_vector@@Base+0xb0>
   2763c:	ldr	r0, [pc, #44]	; 27670 <flatcc_builder_truncate_vector@@Base+0xb4>
   27640:	add	r3, pc, r3
   27644:	ldr	r2, [pc, #40]	; 27674 <flatcc_builder_truncate_vector@@Base+0xb8>
   27648:	add	r3, r3, #520	; 0x208
   2764c:	add	r1, pc, r1
   27650:	add	r0, pc, r0
   27654:	bl	14610 <__assert_fail@plt>
   27658:	andeq	r9, r1, r0, lsl #15
   2765c:	andeq	r9, r1, r4, asr #29
   27660:	andeq	sl, r1, r0, lsl r0
   27664:	ldrdeq	r0, [r0], -r9
   27668:	andeq	r9, r1, ip, asr r7
   2766c:	andeq	r9, r1, r0, lsr #29
   27670:	strheq	sl, [r1], -r8
   27674:	ldrdeq	r0, [r0], -sl

00027678 <flatcc_builder_truncate_offset_vector@@Base>:
   27678:	ldr	r3, [r0, #32]
   2767c:	push	{r4, lr}
   27680:	ldrh	r2, [r3, #14]
   27684:	cmp	r2, #5
   27688:	bne	276cc <flatcc_builder_truncate_offset_vector@@Base+0x54>
   2768c:	ldr	ip, [r3, #20]
   27690:	cmp	ip, r1
   27694:	bcc	276f0 <flatcc_builder_truncate_offset_vector@@Base+0x78>
   27698:	ldr	r2, [r3, #16]
   2769c:	sub	ip, ip, r1
   276a0:	str	ip, [r3, #20]
   276a4:	mul	r2, r2, r1
   276a8:	ldr	r3, [r0, #20]
   276ac:	ldr	r1, [r0, #16]
   276b0:	sub	r3, r3, r2
   276b4:	str	r3, [r0, #20]
   276b8:	add	r0, r1, r3
   276bc:	mov	r1, #0
   276c0:	bl	145bc <memset@plt>
   276c4:	mov	r0, #0
   276c8:	pop	{r4, pc}
   276cc:	ldr	r3, [pc, #64]	; 27714 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   276d0:	ldr	r1, [pc, #64]	; 27718 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   276d4:	ldr	r0, [pc, #64]	; 2771c <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   276d8:	add	r3, pc, r3
   276dc:	ldr	r2, [pc, #60]	; 27720 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   276e0:	add	r3, r3, #552	; 0x228
   276e4:	add	r1, pc, r1
   276e8:	add	r0, pc, r0
   276ec:	bl	14610 <__assert_fail@plt>
   276f0:	ldr	r3, [pc, #44]	; 27724 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   276f4:	ldr	r1, [pc, #44]	; 27728 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   276f8:	ldr	r0, [pc, #44]	; 2772c <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   276fc:	add	r3, pc, r3
   27700:	ldr	r2, [pc, #40]	; 27730 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   27704:	add	r3, r3, #552	; 0x228
   27708:	add	r1, pc, r1
   2770c:	add	r0, pc, r0
   27710:	bl	14610 <__assert_fail@plt>
   27714:	andeq	r9, r1, r4, asr #13
   27718:	andeq	r9, r1, r8, lsl #28
   2771c:	andeq	r9, r1, r0, asr #31
   27720:	andeq	r0, r0, r2, ror #7
   27724:	andeq	r9, r1, r0, lsr #13
   27728:	andeq	r9, r1, r4, ror #27
   2772c:	andeq	sl, r1, r0, lsr #32
   27730:	andeq	r0, r0, r3, ror #7

00027734 <flatcc_builder_truncate_string@@Base>:
   27734:	ldr	r2, [r0, #32]
   27738:	push	{r4, lr}
   2773c:	ldrh	r3, [r2, #14]
   27740:	cmp	r3, #6
   27744:	bne	27784 <flatcc_builder_truncate_string@@Base+0x50>
   27748:	ldr	r3, [r2, #20]
   2774c:	cmp	r3, r1
   27750:	bcc	277a8 <flatcc_builder_truncate_string@@Base+0x74>
   27754:	sub	r3, r3, r1
   27758:	str	r3, [r2, #20]
   2775c:	ldr	r3, [r0, #20]
   27760:	ldr	r2, [r0, #16]
   27764:	sub	r3, r3, r1
   27768:	str	r3, [r0, #20]
   2776c:	add	r0, r2, r3
   27770:	mov	r2, r1
   27774:	mov	r1, #0
   27778:	bl	145bc <memset@plt>
   2777c:	mov	r0, #0
   27780:	pop	{r4, pc}
   27784:	ldr	r3, [pc, #64]	; 277cc <flatcc_builder_truncate_string@@Base+0x98>
   27788:	ldr	r1, [pc, #64]	; 277d0 <flatcc_builder_truncate_string@@Base+0x9c>
   2778c:	ldr	r0, [pc, #64]	; 277d4 <flatcc_builder_truncate_string@@Base+0xa0>
   27790:	add	r3, pc, r3
   27794:	ldr	r2, [pc, #60]	; 277d8 <flatcc_builder_truncate_string@@Base+0xa4>
   27798:	add	r3, r3, #592	; 0x250
   2779c:	add	r1, pc, r1
   277a0:	add	r0, pc, r0
   277a4:	bl	14610 <__assert_fail@plt>
   277a8:	ldr	r3, [pc, #44]	; 277dc <flatcc_builder_truncate_string@@Base+0xa8>
   277ac:	ldr	r1, [pc, #44]	; 277e0 <flatcc_builder_truncate_string@@Base+0xac>
   277b0:	ldr	r0, [pc, #44]	; 277e4 <flatcc_builder_truncate_string@@Base+0xb0>
   277b4:	add	r3, pc, r3
   277b8:	mov	r2, #1004	; 0x3ec
   277bc:	add	r3, r3, #592	; 0x250
   277c0:	add	r1, pc, r1
   277c4:	add	r0, pc, r0
   277c8:	bl	14610 <__assert_fail@plt>
   277cc:	andeq	r9, r1, ip, lsl #12
   277d0:	andeq	r9, r1, r0, asr sp
   277d4:	andeq	r9, r1, ip, lsr pc
   277d8:	andeq	r0, r0, fp, ror #7
   277dc:	andeq	r9, r1, r8, ror #11
   277e0:	andeq	r9, r1, ip, lsr #26
   277e4:	andeq	r9, r1, r4, lsr #31

000277e8 <flatcc_builder_start_vector@@Base>:
   277e8:	cmp	r2, #4
   277ec:	push	{r4, r5, r6, lr}
   277f0:	mov	r6, r1
   277f4:	movcs	r1, r2
   277f8:	movcc	r1, #4
   277fc:	mov	r5, r3
   27800:	mov	r4, r0
   27804:	bl	25ed0 <flatcc_builder_default_alloc@@Base+0x23c>
   27808:	cmp	r0, #0
   2780c:	bne	27858 <flatcc_builder_start_vector@@Base+0x70>
   27810:	ldr	r2, [r4, #32]
   27814:	mov	lr, #4
   27818:	str	r6, [r2, #16]
   2781c:	str	r0, [r2, #20]
   27820:	str	r5, [r2, #24]
   27824:	ldr	ip, [r4, #28]
   27828:	ldr	r3, [r4, #64]	; 0x40
   2782c:	ldr	r1, [r4, #60]	; 0x3c
   27830:	sub	r3, r3, ip
   27834:	cmn	r3, #4
   27838:	mvnhi	r3, #3
   2783c:	strh	lr, [r2, #14]
   27840:	add	r1, r1, ip
   27844:	str	r3, [r4, #24]
   27848:	mvn	r3, #3
   2784c:	str	r1, [r4, #16]
   27850:	str	r3, [r2, #4]
   27854:	pop	{r4, r5, r6, pc}
   27858:	mvn	r0, #0
   2785c:	pop	{r4, r5, r6, pc}

00027860 <flatcc_builder_start_offset_vector@@Base>:
   27860:	push	{r4, lr}
   27864:	mov	r1, #4
   27868:	mov	r4, r0
   2786c:	bl	25ed0 <flatcc_builder_default_alloc@@Base+0x23c>
   27870:	cmp	r0, #0
   27874:	bne	278c0 <flatcc_builder_start_offset_vector@@Base+0x60>
   27878:	ldr	r3, [r4, #32]
   2787c:	mov	r2, #4
   27880:	mov	lr, #5
   27884:	str	r0, [r3, #20]
   27888:	str	r2, [r3, #16]
   2788c:	ldr	ip, [r4, #28]
   27890:	ldr	r2, [r4, #64]	; 0x40
   27894:	ldr	r1, [r4, #60]	; 0x3c
   27898:	sub	r2, r2, ip
   2789c:	cmn	r2, #4
   278a0:	mvnhi	r2, #3
   278a4:	strh	lr, [r3, #14]
   278a8:	add	r1, r1, ip
   278ac:	str	r2, [r4, #24]
   278b0:	mvn	r2, #3
   278b4:	str	r1, [r4, #16]
   278b8:	str	r2, [r3, #4]
   278bc:	pop	{r4, pc}
   278c0:	mvn	r0, #0
   278c4:	pop	{r4, pc}

000278c8 <flatcc_builder_start_string@@Base>:
   278c8:	push	{r4, lr}
   278cc:	mov	r1, #1
   278d0:	mov	r4, r0
   278d4:	bl	25ed0 <flatcc_builder_default_alloc@@Base+0x23c>
   278d8:	cmp	r0, #0
   278dc:	bne	27928 <flatcc_builder_start_string@@Base+0x60>
   278e0:	ldr	r3, [r4, #32]
   278e4:	mov	r2, #1
   278e8:	mov	lr, #6
   278ec:	str	r0, [r3, #20]
   278f0:	str	r2, [r3, #16]
   278f4:	ldr	ip, [r4, #28]
   278f8:	ldr	r2, [r4, #64]	; 0x40
   278fc:	ldr	r1, [r4, #60]	; 0x3c
   27900:	sub	r2, r2, ip
   27904:	cmn	r2, #4
   27908:	mvnhi	r2, #3
   2790c:	strh	lr, [r3, #14]
   27910:	add	r1, r1, ip
   27914:	str	r2, [r4, #24]
   27918:	mvn	r2, #3
   2791c:	str	r1, [r4, #16]
   27920:	str	r2, [r3, #4]
   27924:	pop	{r4, pc}
   27928:	mvn	r0, #0
   2792c:	pop	{r4, pc}

00027930 <flatcc_builder_reserve_table@@Base>:
   27930:	cmp	r1, #0
   27934:	push	{r4, r5, r6, r7, lr}
   27938:	sub	sp, sp, #12
   2793c:	blt	27a14 <flatcc_builder_reserve_table@@Base+0xe4>
   27940:	ldr	r2, [r0, #32]
   27944:	add	r1, r1, #2
   27948:	mov	r5, r0
   2794c:	ldrh	r6, [r2, #28]
   27950:	ldr	r3, [r2, #16]
   27954:	ldr	r0, [r0, #56]	; 0x38
   27958:	lsl	r4, r1, #1
   2795c:	add	r6, r3, r6, lsl #1
   27960:	add	r2, r6, r4
   27964:	cmp	r2, r0
   27968:	bhi	279c4 <flatcc_builder_reserve_table@@Base+0x94>
   2796c:	ldr	r3, [r5, #52]	; 0x34
   27970:	adds	r3, r3, r6
   27974:	streq	r3, [r5, #4]
   27978:	mvneq	r0, #0
   2797c:	beq	279bc <flatcc_builder_reserve_table@@Base+0x8c>
   27980:	ldr	r2, [r5, #32]
   27984:	add	r3, r3, #4
   27988:	str	r3, [r5, #4]
   2798c:	ldr	r6, [r2, #20]
   27990:	ldr	r3, [r5, #80]	; 0x50
   27994:	add	r2, r4, r6
   27998:	sub	r2, r2, #3
   2799c:	cmp	r2, r3
   279a0:	bhi	279ec <flatcc_builder_reserve_table@@Base+0xbc>
   279a4:	ldr	r3, [r5, #76]	; 0x4c
   279a8:	add	r3, r3, r6
   279ac:	cmp	r3, #0
   279b0:	movne	r0, #0
   279b4:	mvneq	r0, #0
   279b8:	str	r3, [r5]
   279bc:	add	sp, sp, #12
   279c0:	pop	{r4, r5, r6, r7, pc}
   279c4:	mov	r3, #0
   279c8:	ldr	r0, [r5, #40]	; 0x28
   279cc:	add	r1, r5, #52	; 0x34
   279d0:	str	r3, [sp]
   279d4:	mov	r3, #1
   279d8:	ldr	r7, [r5, #48]	; 0x30
   279dc:	blx	r7
   279e0:	cmp	r0, #0
   279e4:	beq	2796c <flatcc_builder_reserve_table@@Base+0x3c>
   279e8:	bl	147b4 <__assert_fail@plt+0x1a4>
   279ec:	mov	r3, #3
   279f0:	ldr	r0, [r5, #40]	; 0x28
   279f4:	add	r1, r5, #76	; 0x4c
   279f8:	str	r3, [sp]
   279fc:	mov	r3, #0
   27a00:	ldr	r4, [r5, #48]	; 0x30
   27a04:	blx	r4
   27a08:	cmp	r0, #0
   27a0c:	beq	279a4 <flatcc_builder_reserve_table@@Base+0x74>
   27a10:	b	279e8 <flatcc_builder_reserve_table@@Base+0xb8>
   27a14:	ldr	r3, [pc, #28]	; 27a38 <flatcc_builder_reserve_table@@Base+0x108>
   27a18:	ldr	r1, [pc, #28]	; 27a3c <flatcc_builder_reserve_table@@Base+0x10c>
   27a1c:	ldr	r0, [pc, #28]	; 27a40 <flatcc_builder_reserve_table@@Base+0x110>
   27a20:	add	r3, pc, r3
   27a24:	ldr	r2, [pc, #24]	; 27a44 <flatcc_builder_reserve_table@@Base+0x114>
   27a28:	add	r3, r3, #624	; 0x270
   27a2c:	add	r1, pc, r1
   27a30:	add	r0, pc, r0
   27a34:	bl	14610 <__assert_fail@plt>
   27a38:	andeq	r9, r1, ip, ror r3
   27a3c:	andeq	r9, r1, r0, asr #21
   27a40:	andeq	r9, r1, ip, asr sp
   27a44:	andeq	r0, r0, r9, lsr #8

00027a48 <flatcc_builder_start_table@@Base>:
   27a48:	push	{r4, r5, r6, r7, r8, lr}
   27a4c:	mov	r5, r1
   27a50:	sub	sp, sp, #8
   27a54:	mov	r1, #4
   27a58:	mov	r4, r0
   27a5c:	bl	25ed0 <flatcc_builder_default_alloc@@Base+0x23c>
   27a60:	subs	r7, r0, #0
   27a64:	bne	27b9c <flatcc_builder_start_table@@Base+0x154>
   27a68:	ldr	r3, [r4, #52]	; 0x34
   27a6c:	ldr	r6, [r4, #4]
   27a70:	ldr	r0, [r4, #32]
   27a74:	sub	r6, r6, r3
   27a78:	add	r5, r5, #2
   27a7c:	str	r6, [r0, #16]
   27a80:	ldr	r1, [r4, #76]	; 0x4c
   27a84:	ldr	r2, [r4]
   27a88:	lsl	r5, r5, #1
   27a8c:	sub	r2, r2, r1
   27a90:	str	r2, [r0, #20]
   27a94:	ldr	r2, [r4, #12]
   27a98:	ldr	lr, [pc, #268]	; 27bac <flatcc_builder_start_table@@Base+0x164>
   27a9c:	str	r2, [r0, #24]
   27aa0:	ldrh	r2, [r4, #8]
   27aa4:	mov	r1, #3
   27aa8:	strh	r2, [r0, #28]
   27aac:	add	r6, r6, r2, lsl #1
   27ab0:	ldr	ip, [r4, #56]	; 0x38
   27ab4:	add	r2, r6, r5
   27ab8:	cmp	r2, ip
   27abc:	strh	r7, [r4, #8]
   27ac0:	str	lr, [r4, #12]
   27ac4:	strh	r1, [r0, #14]
   27ac8:	bhi	27b4c <flatcc_builder_start_table@@Base+0x104>
   27acc:	adds	r6, r3, r6
   27ad0:	streq	r6, [r4, #4]
   27ad4:	beq	27b9c <flatcc_builder_start_table@@Base+0x154>
   27ad8:	ldr	r3, [r4, #32]
   27adc:	add	r6, r6, #4
   27ae0:	str	r6, [r4, #4]
   27ae4:	ldr	r6, [r3, #20]
   27ae8:	sub	r2, r5, #3
   27aec:	ldr	r3, [r4, #80]	; 0x50
   27af0:	add	r2, r2, r6
   27af4:	cmp	r2, r3
   27af8:	bhi	27b74 <flatcc_builder_start_table@@Base+0x12c>
   27afc:	ldr	r3, [r4, #76]	; 0x4c
   27b00:	add	r3, r3, r6
   27b04:	cmp	r3, #0
   27b08:	str	r3, [r4]
   27b0c:	beq	27b9c <flatcc_builder_start_table@@Base+0x154>
   27b10:	ldr	r0, [r4, #28]
   27b14:	ldr	r3, [r4, #64]	; 0x40
   27b18:	ldr	r2, [pc, #144]	; 27bb0 <flatcc_builder_start_table@@Base+0x168>
   27b1c:	sub	r3, r3, r0
   27b20:	ldr	r1, [r4, #60]	; 0x3c
   27b24:	ldr	ip, [r4, #32]
   27b28:	cmp	r3, r2
   27b2c:	add	r1, r1, r0
   27b30:	movcs	r3, r2
   27b34:	str	r1, [r4, #16]
   27b38:	str	r3, [r4, #24]
   27b3c:	mov	r0, r7
   27b40:	str	r2, [ip, #4]
   27b44:	add	sp, sp, #8
   27b48:	pop	{r4, r5, r6, r7, r8, pc}
   27b4c:	ldr	r0, [r4, #40]	; 0x28
   27b50:	mov	r3, #1
   27b54:	str	r7, [sp]
   27b58:	add	r1, r4, #52	; 0x34
   27b5c:	ldr	r8, [r4, #48]	; 0x30
   27b60:	blx	r8
   27b64:	cmp	r0, #0
   27b68:	bne	27b98 <flatcc_builder_start_table@@Base+0x150>
   27b6c:	ldr	r3, [r4, #52]	; 0x34
   27b70:	b	27acc <flatcc_builder_start_table@@Base+0x84>
   27b74:	mov	r3, #3
   27b78:	ldr	r0, [r4, #40]	; 0x28
   27b7c:	add	r1, r4, #76	; 0x4c
   27b80:	str	r3, [sp]
   27b84:	mov	r3, #0
   27b88:	ldr	r5, [r4, #48]	; 0x30
   27b8c:	blx	r5
   27b90:	cmp	r0, #0
   27b94:	beq	27afc <flatcc_builder_start_table@@Base+0xb4>
   27b98:	bl	147b4 <__assert_fail@plt+0x1a4>
   27b9c:	mvn	r7, #0
   27ba0:	mov	r0, r7
   27ba4:	add	sp, sp, #8
   27ba8:	pop	{r4, r5, r6, r7, r8, pc}
   27bac:	svccs	0x00693b52
   27bb0:	strdeq	pc, [r0], -ip

00027bb4 <flatcc_builder_create_vtable@@Base>:
   27bb4:	push	{r4, r5, r6, lr}
   27bb8:	sub	sp, sp, #80	; 0x50
   27bbc:	subs	r3, r2, #0
   27bc0:	mov	r2, #0
   27bc4:	mov	r4, r0
   27bc8:	str	r2, [sp, #8]
   27bcc:	str	r2, [sp, #12]
   27bd0:	beq	27c48 <flatcc_builder_create_vtable@@Base+0x94>
   27bd4:	ldr	r0, [r0, #152]	; 0x98
   27bd8:	mov	r2, #1
   27bdc:	cmp	r0, #0
   27be0:	str	r1, [sp, #16]
   27be4:	str	r3, [sp, #8]
   27be8:	str	r3, [sp, #20]
   27bec:	str	r2, [sp, #12]
   27bf0:	mov	r1, r3
   27bf4:	beq	27c64 <flatcc_builder_create_vtable@@Base+0xb0>
   27bf8:	ldr	r2, [r4, #136]	; 0x88
   27bfc:	sub	r5, r2, r3
   27c00:	cmp	r2, r5
   27c04:	ble	27c60 <flatcc_builder_create_vtable@@Base+0xac>
   27c08:	ldr	r0, [r4, #36]	; 0x24
   27c0c:	ldr	r2, [sp, #12]
   27c10:	str	r3, [sp]
   27c14:	add	r1, sp, #16
   27c18:	ldr	r6, [r4, #44]	; 0x2c
   27c1c:	mov	r3, r5
   27c20:	blx	r6
   27c24:	cmp	r0, #0
   27c28:	bne	27cd8 <flatcc_builder_create_vtable@@Base+0x124>
   27c2c:	cmp	r5, #0
   27c30:	str	r5, [r4, #136]	; 0x88
   27c34:	beq	27c3c <flatcc_builder_create_vtable@@Base+0x88>
   27c38:	add	r5, r5, #1
   27c3c:	mov	r0, r5
   27c40:	add	sp, sp, #80	; 0x50
   27c44:	pop	{r4, r5, r6, pc}
   27c48:	ldr	r3, [r0, #152]	; 0x98
   27c4c:	cmp	r3, #0
   27c50:	bne	27c60 <flatcc_builder_create_vtable@@Base+0xac>
   27c54:	ldr	r3, [r0, #180]	; 0xb4
   27c58:	cmp	r3, #0
   27c5c:	beq	27ccc <flatcc_builder_create_vtable@@Base+0x118>
   27c60:	bl	1481c <__assert_fail@plt+0x20c>
   27c64:	ldr	r2, [r4, #180]	; 0xb4
   27c68:	cmp	r2, #0
   27c6c:	bne	27bf8 <flatcc_builder_create_vtable@@Base+0x44>
   27c70:	ldr	r5, [r4, #140]	; 0x8c
   27c74:	add	r3, r5, r3
   27c78:	cmp	r5, r3
   27c7c:	str	r3, [r4, #140]	; 0x8c
   27c80:	bgt	27cfc <flatcc_builder_create_vtable@@Base+0x148>
   27c84:	ldr	r0, [r4, #36]	; 0x24
   27c88:	ldr	r2, [sp, #12]
   27c8c:	str	r1, [sp]
   27c90:	mov	r3, r5
   27c94:	ldr	r4, [r4, #44]	; 0x2c
   27c98:	add	r1, sp, #16
   27c9c:	blx	r4
   27ca0:	cmp	r0, #0
   27ca4:	beq	27c38 <flatcc_builder_create_vtable@@Base+0x84>
   27ca8:	ldr	r3, [pc, #80]	; 27d00 <flatcc_builder_create_vtable@@Base+0x14c>
   27cac:	ldr	r1, [pc, #80]	; 27d04 <flatcc_builder_create_vtable@@Base+0x150>
   27cb0:	ldr	r0, [pc, #80]	; 27d08 <flatcc_builder_create_vtable@@Base+0x154>
   27cb4:	add	r3, pc, r3
   27cb8:	ldr	r2, [pc, #76]	; 27d0c <flatcc_builder_create_vtable@@Base+0x158>
   27cbc:	add	r3, r3, #16
   27cc0:	add	r1, pc, r1
   27cc4:	add	r0, pc, r0
   27cc8:	bl	14610 <__assert_fail@plt>
   27ccc:	ldr	r5, [r4, #140]	; 0x8c
   27cd0:	mov	r1, r3
   27cd4:	b	27c84 <flatcc_builder_create_vtable@@Base+0xd0>
   27cd8:	ldr	r3, [pc, #48]	; 27d10 <flatcc_builder_create_vtable@@Base+0x15c>
   27cdc:	ldr	r1, [pc, #48]	; 27d14 <flatcc_builder_create_vtable@@Base+0x160>
   27ce0:	ldr	r0, [pc, #48]	; 27d18 <flatcc_builder_create_vtable@@Base+0x164>
   27ce4:	add	r3, pc, r3
   27ce8:	ldr	r2, [pc, #44]	; 27d1c <flatcc_builder_create_vtable@@Base+0x168>
   27cec:	add	r3, r3, #28
   27cf0:	add	r1, pc, r1
   27cf4:	add	r0, pc, r0
   27cf8:	bl	14610 <__assert_fail@plt>
   27cfc:	bl	147e4 <__assert_fail@plt+0x1d4>
   27d00:	andeq	r9, r1, r8, ror #1
   27d04:	andeq	r9, r1, ip, lsr #16
   27d08:			; <UNDEFINED> instruction: 0x000198b0
   27d0c:	andeq	r0, r0, r5, lsr #5
   27d10:	strheq	r9, [r1], -r8
   27d14:	strdeq	r9, [r1], -ip
   27d18:	andeq	r9, r1, r0, lsl #17
   27d1c:	andeq	r0, r0, fp, lsl #5

00027d20 <flatcc_builder_create_cached_vtable@@Base>:
   27d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d24:	sub	sp, sp, #28
   27d28:	ldr	r4, [r0, #116]	; 0x74
   27d2c:	mov	sl, r3
   27d30:	cmp	r4, #0
   27d34:	mov	r8, r0
   27d38:	str	r1, [sp, #8]
   27d3c:	mov	r7, r2
   27d40:	rsbne	r3, r4, #32
   27d44:	beq	27e9c <flatcc_builder_create_cached_vtable@@Base+0x17c>
   27d48:	lsr	sl, sl, r3
   27d4c:	ldr	r3, [r8, #92]	; 0x5c
   27d50:	adds	r2, r3, sl, lsl #2
   27d54:	str	r3, [sp, #16]
   27d58:	str	r2, [sp, #20]
   27d5c:	beq	27e90 <flatcc_builder_create_cached_vtable@@Base+0x170>
   27d60:	ldr	r5, [r3, sl, lsl #2]
   27d64:	cmp	r5, #0
   27d68:	beq	27f8c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   27d6c:	mov	r3, #0
   27d70:	ldr	fp, [r8, #100]	; 0x64
   27d74:	ldr	r6, [r8, #68]	; 0x44
   27d78:	mov	r9, r2
   27d7c:	str	r3, [sp, #12]
   27d80:	b	27d94 <flatcc_builder_create_cached_vtable@@Base+0x74>
   27d84:	ldr	r5, [r4, #12]
   27d88:	add	r9, r4, #12
   27d8c:	cmp	r5, #0
   27d90:	beq	27de4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   27d94:	add	r4, fp, r5
   27d98:	ldr	r2, [r4, #8]
   27d9c:	add	r1, r6, r2
   27da0:	ldrh	r2, [r6, r2]
   27da4:	cmp	r2, r7
   27da8:	bne	27d84 <flatcc_builder_create_cached_vtable@@Base+0x64>
   27dac:	mov	r2, r7
   27db0:	ldr	r0, [sp, #8]
   27db4:	bl	14550 <memcmp@plt>
   27db8:	cmp	r0, #0
   27dbc:	bne	27d84 <flatcc_builder_create_cached_vtable@@Base+0x64>
   27dc0:	ldr	r1, [r4, #4]
   27dc4:	ldr	r2, [r8, #152]	; 0x98
   27dc8:	cmp	r1, r2
   27dcc:	beq	27e60 <flatcc_builder_create_cached_vtable@@Base+0x140>
   27dd0:	ldr	r5, [r4, #12]
   27dd4:	add	r9, r4, #12
   27dd8:	cmp	r5, #0
   27ddc:	str	r4, [sp, #12]
   27de0:	bne	27d94 <flatcc_builder_create_cached_vtable@@Base+0x74>
   27de4:	ldr	r4, [r8, #124]	; 0x7c
   27de8:	ldr	r3, [r8, #104]	; 0x68
   27dec:	add	r2, r4, #16
   27df0:	cmp	r2, r3
   27df4:	bhi	27f64 <flatcc_builder_create_cached_vtable@@Base+0x244>
   27df8:	ldr	r5, [r8, #100]	; 0x64
   27dfc:	adds	r6, r5, r4
   27e00:	beq	27e90 <flatcc_builder_create_cached_vtable@@Base+0x170>
   27e04:	ldr	r3, [r8, #124]	; 0x7c
   27e08:	ldr	r0, [sp, #16]
   27e0c:	ldr	r2, [r8, #152]	; 0x98
   27e10:	add	r1, r3, #16
   27e14:	str	r1, [r8, #124]	; 0x7c
   27e18:	str	r2, [r6, #4]
   27e1c:	ldr	r1, [r0, sl, lsl #2]
   27e20:	mov	r2, r7
   27e24:	str	r1, [r6, #12]
   27e28:	str	r3, [r0, sl, lsl #2]
   27e2c:	ldr	r1, [sp, #8]
   27e30:	mov	r0, r8
   27e34:	bl	27bb4 <flatcc_builder_create_vtable@@Base>
   27e38:	cmp	r0, #0
   27e3c:	str	r0, [r5, r4]
   27e40:	beq	27e90 <flatcc_builder_create_cached_vtable@@Base+0x170>
   27e44:	ldr	r3, [sp, #12]
   27e48:	cmp	r3, #0
   27e4c:	beq	27f94 <flatcc_builder_create_cached_vtable@@Base+0x274>
   27e50:	ldr	r3, [r3, #8]
   27e54:	str	r3, [r6, #8]
   27e58:	add	sp, sp, #28
   27e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e60:	ldr	r3, [sp, #20]
   27e64:	cmp	r3, r9
   27e68:	beq	27e84 <flatcc_builder_create_cached_vtable@@Base+0x164>
   27e6c:	ldr	r2, [sp, #16]
   27e70:	ldr	r3, [r4, #12]
   27e74:	str	r3, [r9]
   27e78:	ldr	r3, [r2, sl, lsl #2]
   27e7c:	str	r3, [r4, #12]
   27e80:	str	r5, [r2, sl, lsl #2]
   27e84:	ldr	r0, [r4]
   27e88:	add	sp, sp, #28
   27e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e90:	mov	r0, #0
   27e94:	add	sp, sp, #28
   27e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e9c:	ldr	r3, [r0, #124]	; 0x7c
   27ea0:	add	r5, r0, #92	; 0x5c
   27ea4:	cmp	r3, #0
   27ea8:	bne	2802c <flatcc_builder_create_cached_vtable@@Base+0x30c>
   27eac:	ldr	r3, [r0, #104]	; 0x68
   27eb0:	cmp	r3, #15
   27eb4:	bls	27f38 <flatcc_builder_create_cached_vtable@@Base+0x218>
   27eb8:	ldr	r3, [r8, #100]	; 0x64
   27ebc:	cmp	r3, #0
   27ec0:	beq	27e90 <flatcc_builder_create_cached_vtable@@Base+0x170>
   27ec4:	mov	r2, #16
   27ec8:	mov	r3, #5
   27ecc:	str	r2, [r8, #124]	; 0x7c
   27ed0:	ldr	r0, [r8, #40]	; 0x28
   27ed4:	mov	r1, r5
   27ed8:	str	r3, [sp]
   27edc:	mov	r2, #256	; 0x100
   27ee0:	ldr	r5, [r8, #48]	; 0x30
   27ee4:	mov	r3, #1
   27ee8:	blx	r5
   27eec:	cmp	r0, #0
   27ef0:	bne	27e90 <flatcc_builder_create_cached_vtable@@Base+0x170>
   27ef4:	ldr	r1, [r8, #96]	; 0x60
   27ef8:	mov	r3, #256	; 0x100
   27efc:	b	27f04 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   27f00:	mov	r3, r2
   27f04:	lsl	r2, r3, #1
   27f08:	cmp	r2, r1
   27f0c:	bls	27f00 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   27f10:	lsr	r3, r3, #2
   27f14:	cmp	r3, #1
   27f18:	bls	27fec <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   27f1c:	mov	r2, #1
   27f20:	add	r4, r4, #1
   27f24:	cmp	r3, r2, lsl r4
   27f28:	bhi	27f20 <flatcc_builder_create_cached_vtable@@Base+0x200>
   27f2c:	rsb	r3, r4, #32
   27f30:	str	r4, [r8, #116]	; 0x74
   27f34:	b	27d48 <flatcc_builder_create_cached_vtable@@Base+0x28>
   27f38:	mov	r3, #6
   27f3c:	ldr	r0, [r0, #40]	; 0x28
   27f40:	mov	r2, #16
   27f44:	str	r3, [sp]
   27f48:	add	r1, r8, #100	; 0x64
   27f4c:	ldr	r6, [r8, #48]	; 0x30
   27f50:	mov	r3, r4
   27f54:	blx	r6
   27f58:	cmp	r0, #0
   27f5c:	beq	27eb8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   27f60:	b	28018 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   27f64:	mov	r3, #6
   27f68:	ldr	r0, [r8, #40]	; 0x28
   27f6c:	add	r1, r8, #100	; 0x64
   27f70:	str	r3, [sp]
   27f74:	mov	r3, #0
   27f78:	ldr	r5, [r8, #48]	; 0x30
   27f7c:	blx	r5
   27f80:	cmp	r0, #0
   27f84:	beq	27df8 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   27f88:	b	28018 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   27f8c:	str	r5, [sp, #12]
   27f90:	b	27de4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   27f94:	ldr	r3, [r8, #172]	; 0xac
   27f98:	ldr	r9, [r8, #120]	; 0x78
   27f9c:	cmp	r3, #0
   27fa0:	add	r2, r9, r7
   27fa4:	beq	27fb0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   27fa8:	cmp	r3, r2
   27fac:	bcc	2801c <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   27fb0:	ldr	r3, [r8, #72]	; 0x48
   27fb4:	cmp	r3, r2
   27fb8:	bcc	27ff4 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   27fbc:	ldr	r3, [r8, #68]	; 0x44
   27fc0:	adds	r0, r3, r9
   27fc4:	beq	28050 <flatcc_builder_create_cached_vtable@@Base+0x330>
   27fc8:	ldr	r3, [r8, #120]	; 0x78
   27fcc:	ldr	r1, [sp, #8]
   27fd0:	add	ip, r3, r7
   27fd4:	str	r3, [r6, #8]
   27fd8:	mov	r2, r7
   27fdc:	str	ip, [r8, #120]	; 0x78
   27fe0:	bl	14544 <memcpy@plt>
   27fe4:	ldr	r0, [r5, r4]
   27fe8:	b	27e58 <flatcc_builder_create_cached_vtable@@Base+0x138>
   27fec:	mov	r3, #32
   27ff0:	b	27f30 <flatcc_builder_create_cached_vtable@@Base+0x210>
   27ff4:	mov	r3, #2
   27ff8:	ldr	r0, [r8, #40]	; 0x28
   27ffc:	add	r1, r8, #68	; 0x44
   28000:	str	r3, [sp]
   28004:	mov	r3, #0
   28008:	ldr	sl, [r8, #48]	; 0x30
   2800c:	blx	sl
   28010:	cmp	r0, #0
   28014:	beq	27fbc <flatcc_builder_create_cached_vtable@@Base+0x29c>
   28018:	bl	147b4 <__assert_fail@plt+0x1a4>
   2801c:	mov	r0, r8
   28020:	bl	26214 <flatcc_builder_flush_vtable_cache@@Base>
   28024:	ldr	r0, [r5, r4]
   28028:	b	27e58 <flatcc_builder_create_cached_vtable@@Base+0x138>
   2802c:	ldr	r3, [pc, #36]	; 28058 <flatcc_builder_create_cached_vtable@@Base+0x338>
   28030:	ldr	r1, [pc, #36]	; 2805c <flatcc_builder_create_cached_vtable@@Base+0x33c>
   28034:	ldr	r0, [pc, #36]	; 28060 <flatcc_builder_create_cached_vtable@@Base+0x340>
   28038:	add	r3, pc, r3
   2803c:	ldr	r2, [pc, #32]	; 28064 <flatcc_builder_create_cached_vtable@@Base+0x344>
   28040:	add	r3, r3, #656	; 0x290
   28044:	add	r1, pc, r1
   28048:	add	r0, pc, r0
   2804c:	bl	14610 <__assert_fail@plt>
   28050:	mvn	r0, #0
   28054:	b	27e58 <flatcc_builder_create_cached_vtable@@Base+0x138>
   28058:	andeq	r8, r1, r4, ror #26
   2805c:	andeq	r9, r1, r8, lsr #9
   28060:	andeq	r9, r1, r0, asr r7
   28064:	andeq	r0, r0, r6, asr r1

00028068 <flatcc_builder_create_table@@Base>:
   28068:	push	{r4, r5, r6, r7, r8, lr}
   2806c:	sub	sp, sp, #88	; 0x58
   28070:	ldr	r8, [pc, #436]	; 2822c <flatcc_builder_create_table@@Base+0x1c4>
   28074:	ldr	r4, [sp, #116]	; 0x74
   28078:	add	r8, pc, r8
   2807c:	cmp	r4, #0
   28080:	ldr	lr, [sp, #120]	; 0x78
   28084:	blt	281bc <flatcc_builder_create_table@@Base+0x154>
   28088:	tst	lr, #1
   2808c:	beq	28208 <flatcc_builder_create_table@@Base+0x1a0>
   28090:	mov	r5, r0
   28094:	ldrh	r0, [r0, #128]	; 0x80
   28098:	cmp	r3, #4
   2809c:	movcc	r3, #4
   280a0:	ldr	ip, [r5, #136]	; 0x88
   280a4:	cmp	r0, r3
   280a8:	mvn	r0, #3
   280ac:	strhcc	r3, [r5, #128]	; 0x80
   280b0:	sub	r7, ip, r2
   280b4:	sub	r3, r3, #1
   280b8:	sub	r0, r0, r2
   280bc:	and	r7, r7, r3
   280c0:	add	r0, r0, ip
   280c4:	sub	r3, lr, #1
   280c8:	sub	r0, r0, r7
   280cc:	sub	r3, r0, r3
   280d0:	cmp	r4, #0
   280d4:	str	r3, [sp, #12]
   280d8:	beq	2810c <flatcc_builder_create_table@@Base+0xa4>
   280dc:	ldr	ip, [sp, #112]	; 0x70
   280e0:	mvn	r6, #3
   280e4:	add	r4, ip, r4, lsl #1
   280e8:	sub	r6, r6, r0
   280ec:	ldrh	r3, [ip], #2
   280f0:	sub	lr, r6, r3
   280f4:	ldr	r0, [r1, r3]
   280f8:	cmp	r4, ip
   280fc:	add	r0, r0, lr
   28100:	str	r0, [r1, r3]
   28104:	bne	280ec <flatcc_builder_create_table@@Base+0x84>
   28108:	ldr	ip, [r5, #136]	; 0x88
   2810c:	mov	r3, #4
   28110:	mov	lr, #1
   28114:	add	r0, sp, #12
   28118:	cmp	r2, #0
   2811c:	str	r3, [sp, #16]
   28120:	str	r3, [sp, #28]
   28124:	str	r0, [sp, #24]
   28128:	str	lr, [sp, #20]
   2812c:	beq	28148 <flatcc_builder_create_table@@Base+0xe0>
   28130:	add	r3, r2, r3
   28134:	mov	r0, #2
   28138:	str	r1, [sp, #32]
   2813c:	str	r2, [sp, #36]	; 0x24
   28140:	str	r3, [sp, #16]
   28144:	str	r0, [sp, #20]
   28148:	cmp	r7, #0
   2814c:	beq	2817c <flatcc_builder_create_table@@Base+0x114>
   28150:	ldr	r2, [sp, #20]
   28154:	ldr	r1, [pc, #212]	; 28230 <flatcc_builder_create_table@@Base+0x1c8>
   28158:	add	r2, r2, #1
   2815c:	add	r3, r3, r7
   28160:	str	r3, [sp, #16]
   28164:	ldr	r0, [r8, r1]
   28168:	add	r1, sp, #88	; 0x58
   2816c:	add	r1, r1, r2, lsl #3
   28170:	str	r2, [sp, #20]
   28174:	str	r0, [r1, #-72]	; 0xffffffb8
   28178:	str	r7, [r1, #-68]	; 0xffffffbc
   2817c:	sub	r4, ip, r3
   28180:	cmp	r4, ip
   28184:	bge	28204 <flatcc_builder_create_table@@Base+0x19c>
   28188:	ldr	r0, [r5, #36]	; 0x24
   2818c:	ldr	r2, [sp, #20]
   28190:	str	r3, [sp]
   28194:	add	r1, sp, #24
   28198:	ldr	r6, [r5, #44]	; 0x2c
   2819c:	mov	r3, r4
   281a0:	blx	r6
   281a4:	cmp	r0, #0
   281a8:	bne	281e0 <flatcc_builder_create_table@@Base+0x178>
   281ac:	mov	r0, r4
   281b0:	str	r4, [r5, #136]	; 0x88
   281b4:	add	sp, sp, #88	; 0x58
   281b8:	pop	{r4, r5, r6, r7, r8, pc}
   281bc:	ldr	r3, [pc, #112]	; 28234 <flatcc_builder_create_table@@Base+0x1cc>
   281c0:	ldr	r1, [pc, #112]	; 28238 <flatcc_builder_create_table@@Base+0x1d0>
   281c4:	ldr	r0, [pc, #112]	; 2823c <flatcc_builder_create_table@@Base+0x1d4>
   281c8:	add	r3, pc, r3
   281cc:	ldr	r2, [pc, #108]	; 28240 <flatcc_builder_create_table@@Base+0x1d8>
   281d0:	add	r3, r3, #668	; 0x29c
   281d4:	add	r1, pc, r1
   281d8:	add	r0, pc, r0
   281dc:	bl	14610 <__assert_fail@plt>
   281e0:	ldr	r3, [pc, #92]	; 28244 <flatcc_builder_create_table@@Base+0x1dc>
   281e4:	ldr	r1, [pc, #92]	; 28248 <flatcc_builder_create_table@@Base+0x1e0>
   281e8:	ldr	r0, [pc, #92]	; 2824c <flatcc_builder_create_table@@Base+0x1e4>
   281ec:	add	r3, pc, r3
   281f0:	ldr	r2, [pc, #88]	; 28250 <flatcc_builder_create_table@@Base+0x1e8>
   281f4:	add	r3, r3, #28
   281f8:	add	r1, pc, r1
   281fc:	add	r0, pc, r0
   28200:	bl	14610 <__assert_fail@plt>
   28204:	bl	1481c <__assert_fail@plt+0x20c>
   28208:	ldr	r3, [pc, #68]	; 28254 <flatcc_builder_create_table@@Base+0x1ec>
   2820c:	ldr	r1, [pc, #68]	; 28258 <flatcc_builder_create_table@@Base+0x1f0>
   28210:	ldr	r0, [pc, #68]	; 2825c <flatcc_builder_create_table@@Base+0x1f4>
   28214:	add	r3, pc, r3
   28218:	ldr	r2, [pc, #64]	; 28260 <flatcc_builder_create_table@@Base+0x1f8>
   2821c:	add	r3, r3, #668	; 0x29c
   28220:	add	r1, pc, r1
   28224:	add	r0, pc, r0
   28228:	bl	14610 <__assert_fail@plt>
   2822c:	andeq	fp, r2, r0, lsl #31
   28230:	andeq	r0, r0, r4, rrx
   28234:	ldrdeq	r8, [r1], -r4
   28238:	andeq	r9, r1, r8, lsl r3
   2823c:	ldrdeq	r9, [r1], -r0
   28240:	ldrdeq	r0, [r0], -r5
   28244:			; <UNDEFINED> instruction: 0x00018bb0
   28248:	strdeq	r9, [r1], -r4
   2824c:	andeq	r9, r1, r8, ror r3
   28250:	andeq	r0, r0, fp, lsl #5
   28254:	andeq	r8, r1, r8, lsl #23
   28258:	andeq	r9, r1, ip, asr #5
   2825c:	muleq	r1, r8, r5
   28260:	ldrdeq	r0, [r0], -fp

00028264 <flatcc_builder_check_required_field@@Base>:
   28264:	ldr	r3, [r0, #32]
   28268:	ldrh	r3, [r3, #14]
   2826c:	cmp	r3, #3
   28270:	bne	2829c <flatcc_builder_check_required_field@@Base+0x38>
   28274:	ldrh	r3, [r0, #8]
   28278:	cmp	r3, r1
   2827c:	movls	r0, #0
   28280:	bls	28298 <flatcc_builder_check_required_field@@Base+0x34>
   28284:	ldr	r3, [r0, #4]
   28288:	lsl	r1, r1, #1
   2828c:	ldrh	r0, [r3, r1]
   28290:	adds	r0, r0, #0
   28294:	movne	r0, #1
   28298:	bx	lr
   2829c:	ldr	r3, [pc, #32]	; 282c4 <flatcc_builder_check_required_field@@Base+0x60>
   282a0:	ldr	r1, [pc, #32]	; 282c8 <flatcc_builder_check_required_field@@Base+0x64>
   282a4:	ldr	r0, [pc, #32]	; 282cc <flatcc_builder_check_required_field@@Base+0x68>
   282a8:	add	r3, pc, r3
   282ac:	push	{r4, lr}
   282b0:	add	r3, r3, #696	; 0x2b8
   282b4:	ldr	r2, [pc, #20]	; 282d0 <flatcc_builder_check_required_field@@Base+0x6c>
   282b8:	add	r1, pc, r1
   282bc:	add	r0, pc, r0
   282c0:	bl	14610 <__assert_fail@plt>
   282c4:	strdeq	r8, [r1], -r4
   282c8:	andeq	r9, r1, r4, lsr r2
   282cc:	andeq	r9, r1, ip, lsl #10
   282d0:	strdeq	r0, [r0], -r8

000282d4 <flatcc_builder_check_union_field@@Base>:
   282d4:	ldr	r3, [r0, #32]
   282d8:	ldrh	r3, [r3, #14]
   282dc:	cmp	r3, #3
   282e0:	bne	2835c <flatcc_builder_check_union_field@@Base+0x88>
   282e4:	cmp	r1, #0
   282e8:	beq	28334 <flatcc_builder_check_union_field@@Base+0x60>
   282ec:	ldrh	r3, [r0, #8]
   282f0:	cmp	r3, r1
   282f4:	bls	28334 <flatcc_builder_check_union_field@@Base+0x60>
   282f8:	sub	r1, r1, #-2147483647	; 0x80000001
   282fc:	ldr	r3, [r0, #4]
   28300:	lsl	r1, r1, #1
   28304:	ldrh	r2, [r3, r1]
   28308:	cmp	r2, #0
   2830c:	beq	28348 <flatcc_builder_check_union_field@@Base+0x74>
   28310:	ldr	r0, [r0, #16]
   28314:	add	r1, r3, r1
   28318:	ldrb	r2, [r0, r2]
   2831c:	ldrh	r1, [r1, #2]
   28320:	cmp	r2, #0
   28324:	bne	2833c <flatcc_builder_check_union_field@@Base+0x68>
   28328:	clz	r0, r1
   2832c:	lsr	r0, r0, #5
   28330:	bx	lr
   28334:	mov	r0, #0
   28338:	bx	lr
   2833c:	adds	r0, r1, #0
   28340:	movne	r0, #1
   28344:	b	28338 <flatcc_builder_check_union_field@@Base+0x64>
   28348:	add	r1, r3, r1
   2834c:	ldrh	r1, [r1, #2]
   28350:	clz	r0, r1
   28354:	lsr	r0, r0, #5
   28358:	bx	lr
   2835c:	ldr	r3, [pc, #32]	; 28384 <flatcc_builder_check_union_field@@Base+0xb0>
   28360:	ldr	r1, [pc, #32]	; 28388 <flatcc_builder_check_union_field@@Base+0xb4>
   28364:	ldr	r0, [pc, #32]	; 2838c <flatcc_builder_check_union_field@@Base+0xb8>
   28368:	add	r3, pc, r3
   2836c:	push	{r4, lr}
   28370:	add	r3, r3, #732	; 0x2dc
   28374:	ldr	r2, [pc, #20]	; 28390 <flatcc_builder_check_union_field@@Base+0xbc>
   28378:	add	r1, pc, r1
   2837c:	add	r0, pc, r0
   28380:	bl	14610 <__assert_fail@plt>
   28384:	andeq	r8, r1, r4, lsr sl
   28388:	andeq	r9, r1, r4, ror r1
   2838c:	andeq	r9, r1, ip, asr #8
   28390:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00028394 <flatcc_builder_check_required@@Base>:
   28394:	ldr	r3, [r0, #32]
   28398:	ldrh	r3, [r3, #14]
   2839c:	cmp	r3, #3
   283a0:	bne	28404 <flatcc_builder_check_required@@Base+0x70>
   283a4:	ldrh	r3, [r0, #8]
   283a8:	cmp	r3, r2
   283ac:	movlt	r0, #0
   283b0:	blt	28400 <flatcc_builder_check_required@@Base+0x6c>
   283b4:	cmp	r2, #0
   283b8:	ble	283fc <flatcc_builder_check_required@@Base+0x68>
   283bc:	ldrh	r3, [r1]
   283c0:	ldr	ip, [r0, #4]
   283c4:	lsl	r3, r3, #1
   283c8:	ldrh	r0, [ip, r3]
   283cc:	cmp	r0, #0
   283d0:	beq	28400 <flatcc_builder_check_required@@Base+0x6c>
   283d4:	add	r2, r1, r2, lsl #1
   283d8:	add	r1, r1, #2
   283dc:	b	283f4 <flatcc_builder_check_required@@Base+0x60>
   283e0:	ldrh	r3, [r1], #2
   283e4:	lsl	r3, r3, #1
   283e8:	ldrh	r0, [ip, r3]
   283ec:	cmp	r0, #0
   283f0:	beq	28400 <flatcc_builder_check_required@@Base+0x6c>
   283f4:	cmp	r1, r2
   283f8:	bne	283e0 <flatcc_builder_check_required@@Base+0x4c>
   283fc:	mov	r0, #1
   28400:	bx	lr
   28404:	ldr	r3, [pc, #32]	; 2842c <flatcc_builder_check_required@@Base+0x98>
   28408:	ldr	r1, [pc, #32]	; 28430 <flatcc_builder_check_required@@Base+0x9c>
   2840c:	ldr	r0, [pc, #32]	; 28434 <flatcc_builder_check_required@@Base+0xa0>
   28410:	add	r3, pc, r3
   28414:	push	{r4, lr}
   28418:	add	r3, r3, #768	; 0x300
   2841c:	ldr	r2, [pc, #20]	; 28438 <flatcc_builder_check_required@@Base+0xa4>
   28420:	add	r1, pc, r1
   28424:	add	r0, pc, r0
   28428:	bl	14610 <__assert_fail@plt>
   2842c:	andeq	r8, r1, ip, lsl #19
   28430:	andeq	r9, r1, ip, asr #1
   28434:	andeq	r9, r1, r4, lsr #7
   28438:	andeq	r0, r0, r1, lsl r5

0002843c <flatcc_builder_end_table@@Base>:
   2843c:	ldr	r3, [r0, #32]
   28440:	push	{r4, r5, r6, r7, lr}
   28444:	sub	sp, sp, #20
   28448:	ldrh	r3, [r3, #14]
   2844c:	cmp	r3, #3
   28450:	bne	285d4 <flatcc_builder_end_table@@Base+0x198>
   28454:	ldrh	r5, [r0, #8]
   28458:	ldr	r3, [r0, #12]
   2845c:	ldr	r1, [pc, #404]	; 285f8 <flatcc_builder_end_table@@Base+0x1bc>
   28460:	add	r5, r5, #2
   28464:	ldr	r2, [r0, #20]
   28468:	lsl	r5, r5, #1
   2846c:	add	r2, r2, #4
   28470:	uxth	r5, r5
   28474:	eor	r3, r3, r5
   28478:	uxth	r2, r2
   2847c:	mul	r3, r1, r3
   28480:	ldr	ip, [r0, #4]
   28484:	eor	r3, r3, r2
   28488:	sub	r6, ip, #4
   2848c:	mul	r1, r1, r3
   28490:	strh	r2, [ip, #-2]
   28494:	strh	r5, [ip, #-4]
   28498:	mov	r3, r1
   2849c:	str	r1, [r0, #12]
   284a0:	mov	r2, r5
   284a4:	mov	r1, r6
   284a8:	mov	r4, r0
   284ac:	bl	27d20 <flatcc_builder_create_cached_vtable@@Base>
   284b0:	subs	r7, r0, #0
   284b4:	bne	284c8 <flatcc_builder_end_table@@Base+0x8c>
   284b8:	mov	r5, #0
   284bc:	mov	r0, r5
   284c0:	add	sp, sp, #20
   284c4:	pop	{r4, r5, r6, r7, pc}
   284c8:	mov	r2, r5
   284cc:	mov	r1, #0
   284d0:	mov	r0, r6
   284d4:	bl	145bc <memset@plt>
   284d8:	ldr	r3, [r4, #32]
   284dc:	ldr	ip, [r4, #76]	; 0x4c
   284e0:	ldr	r0, [r4]
   284e4:	ldr	r2, [r3, #20]
   284e8:	ldr	r1, [r4, #16]
   284ec:	add	ip, ip, r2
   284f0:	sub	r0, r0, ip
   284f4:	ldrh	r3, [r4, #130]	; 0x82
   284f8:	asr	r0, r0, #1
   284fc:	ldr	r2, [r4, #20]
   28500:	str	r0, [sp, #4]
   28504:	str	r7, [sp, #8]
   28508:	str	ip, [sp]
   2850c:	mov	r0, r4
   28510:	bl	28068 <flatcc_builder_create_table@@Base>
   28514:	subs	r5, r0, #0
   28518:	beq	284b8 <flatcc_builder_end_table@@Base+0x7c>
   2851c:	ldr	r3, [r4, #32]
   28520:	ldr	r0, [r4, #52]	; 0x34
   28524:	ldr	ip, [r4, #76]	; 0x4c
   28528:	ldr	r1, [r3, #24]
   2852c:	ldr	r2, [r4, #20]
   28530:	str	r1, [r4, #12]
   28534:	ldrh	lr, [r3, #28]
   28538:	mov	r1, #0
   2853c:	strh	lr, [r4, #8]
   28540:	ldr	lr, [r3, #16]
   28544:	add	r0, r0, lr
   28548:	str	r0, [r4, #4]
   2854c:	ldr	r3, [r3, #20]
   28550:	ldr	r0, [r4, #16]
   28554:	add	r3, ip, r3
   28558:	str	r3, [r4]
   2855c:	bl	145bc <memset@plt>
   28560:	ldr	r3, [r4, #32]
   28564:	ldr	r2, [r4, #64]	; 0x40
   28568:	ldrh	lr, [r4, #130]	; 0x82
   2856c:	ldr	ip, [r3]
   28570:	ldr	r1, [r3, #4]
   28574:	ldrh	r0, [r4, #128]	; 0x80
   28578:	sub	r2, r2, ip
   2857c:	cmp	r2, r1
   28580:	movcs	r2, r1
   28584:	cmp	r0, lr
   28588:	ldr	r0, [r4, #60]	; 0x3c
   2858c:	ldr	r6, [r3, #8]
   28590:	str	r2, [r4, #24]
   28594:	add	r2, r0, ip
   28598:	str	r2, [r4, #16]
   2859c:	str	r6, [r4, #20]
   285a0:	ldr	r2, [r4, #156]	; 0x9c
   285a4:	str	ip, [r4, #28]
   285a8:	str	r1, [r3, #4]
   285ac:	strhcc	lr, [r4, #128]	; 0x80
   285b0:	ldrh	r1, [r3, #12]
   285b4:	sub	r2, r2, #1
   285b8:	sub	r3, r3, #36	; 0x24
   285bc:	mov	r0, r5
   285c0:	str	r2, [r4, #156]	; 0x9c
   285c4:	strh	r1, [r4, #130]	; 0x82
   285c8:	str	r3, [r4, #32]
   285cc:	add	sp, sp, #20
   285d0:	pop	{r4, r5, r6, r7, pc}
   285d4:	ldr	r3, [pc, #32]	; 285fc <flatcc_builder_end_table@@Base+0x1c0>
   285d8:	ldr	r1, [pc, #32]	; 28600 <flatcc_builder_end_table@@Base+0x1c4>
   285dc:	ldr	r0, [pc, #32]	; 28604 <flatcc_builder_end_table@@Base+0x1c8>
   285e0:	add	r3, pc, r3
   285e4:	ldr	r2, [pc, #28]	; 28608 <flatcc_builder_end_table@@Base+0x1cc>
   285e8:	add	r3, r3, #800	; 0x320
   285ec:	add	r1, pc, r1
   285f0:	add	r0, pc, r0
   285f4:	bl	14610 <__assert_fail@plt>
   285f8:			; <UNDEFINED> instruction: 0x9e3779b1
   285fc:			; <UNDEFINED> instruction: 0x000187bc
   28600:	andeq	r8, r1, r0, lsl #30
   28604:	ldrdeq	r9, [r1], -r8
   28608:	andeq	r0, r0, r5, lsr #10

0002860c <flatcc_builder_create_vector@@Base>:
   2860c:	push	{r4, r5, r6, lr}
   28610:	sub	sp, sp, #88	; 0x58
   28614:	ldr	lr, [pc, #320]	; 2875c <flatcc_builder_create_vector@@Base+0x150>
   28618:	ldr	ip, [sp, #108]	; 0x6c
   2861c:	mov	r4, r0
   28620:	cmp	r2, ip
   28624:	add	lr, pc, lr
   28628:	ldrh	r0, [sp, #104]	; 0x68
   2862c:	bhi	28710 <flatcc_builder_create_vector@@Base+0x104>
   28630:	ldrh	ip, [r4, #128]	; 0x80
   28634:	cmp	r0, #4
   28638:	mul	r3, r3, r2
   2863c:	movcc	r0, #4
   28640:	ldr	r6, [r4, #136]	; 0x88
   28644:	cmp	ip, r0
   28648:	strhcc	r0, [r4, #128]	; 0x80
   2864c:	sub	r5, r6, r3
   28650:	sub	r0, r0, #1
   28654:	mov	ip, #4
   28658:	str	r2, [sp, #12]
   2865c:	and	r0, r0, r5
   28660:	add	r2, sp, #12
   28664:	mov	r5, #1
   28668:	cmp	r3, #0
   2866c:	str	ip, [sp, #16]
   28670:	str	ip, [sp, #28]
   28674:	str	r2, [sp, #24]
   28678:	str	r5, [sp, #20]
   2867c:	bne	286f4 <flatcc_builder_create_vector@@Base+0xe8>
   28680:	cmp	r0, #0
   28684:	beq	286b4 <flatcc_builder_create_vector@@Base+0xa8>
   28688:	ldr	r3, [sp, #20]
   2868c:	ldr	r2, [pc, #204]	; 28760 <flatcc_builder_create_vector@@Base+0x154>
   28690:	add	r3, r3, #1
   28694:	add	ip, ip, r0
   28698:	str	ip, [sp, #16]
   2869c:	ldr	r1, [lr, r2]
   286a0:	add	r2, sp, #88	; 0x58
   286a4:	add	r2, r2, r3, lsl #3
   286a8:	str	r3, [sp, #20]
   286ac:	str	r1, [r2, #-72]	; 0xffffffb8
   286b0:	str	r0, [r2, #-68]	; 0xffffffbc
   286b4:	sub	r5, r6, ip
   286b8:	cmp	r6, r5
   286bc:	ble	28758 <flatcc_builder_create_vector@@Base+0x14c>
   286c0:	ldr	r0, [r4, #36]	; 0x24
   286c4:	ldr	r2, [sp, #20]
   286c8:	str	ip, [sp]
   286cc:	mov	r3, r5
   286d0:	ldr	r6, [r4, #44]	; 0x2c
   286d4:	add	r1, sp, #24
   286d8:	blx	r6
   286dc:	cmp	r0, #0
   286e0:	bne	28734 <flatcc_builder_create_vector@@Base+0x128>
   286e4:	mov	r0, r5
   286e8:	str	r5, [r4, #136]	; 0x88
   286ec:	add	sp, sp, #88	; 0x58
   286f0:	pop	{r4, r5, r6, pc}
   286f4:	add	ip, r3, ip
   286f8:	mov	r2, #2
   286fc:	str	r1, [sp, #32]
   28700:	str	r3, [sp, #36]	; 0x24
   28704:	str	ip, [sp, #16]
   28708:	str	r2, [sp, #20]
   2870c:	b	28680 <flatcc_builder_create_vector@@Base+0x74>
   28710:	ldr	r3, [pc, #76]	; 28764 <flatcc_builder_create_vector@@Base+0x158>
   28714:	ldr	r1, [pc, #76]	; 28768 <flatcc_builder_create_vector@@Base+0x15c>
   28718:	ldr	r0, [pc, #76]	; 2876c <flatcc_builder_create_vector@@Base+0x160>
   2871c:	add	r3, pc, r3
   28720:	ldr	r2, [pc, #72]	; 28770 <flatcc_builder_create_vector@@Base+0x164>
   28724:	add	r3, r3, #828	; 0x33c
   28728:	add	r1, pc, r1
   2872c:	add	r0, pc, r0
   28730:	bl	14610 <__assert_fail@plt>
   28734:	ldr	r3, [pc, #56]	; 28774 <flatcc_builder_create_vector@@Base+0x168>
   28738:	ldr	r1, [pc, #56]	; 28778 <flatcc_builder_create_vector@@Base+0x16c>
   2873c:	ldr	r0, [pc, #56]	; 2877c <flatcc_builder_create_vector@@Base+0x170>
   28740:	add	r3, pc, r3
   28744:	ldr	r2, [pc, #52]	; 28780 <flatcc_builder_create_vector@@Base+0x174>
   28748:	add	r3, r3, #28
   2874c:	add	r1, pc, r1
   28750:	add	r0, pc, r0
   28754:	bl	14610 <__assert_fail@plt>
   28758:	bl	1481c <__assert_fail@plt+0x20c>
   2875c:	ldrdeq	fp, [r2], -r4
   28760:	andeq	r0, r0, r4, rrx
   28764:	andeq	r8, r1, r0, lsl #13
   28768:	andeq	r8, r1, r4, asr #27
   2876c:	andeq	r9, r1, r8, asr #1
   28770:	andeq	r0, r0, r5, asr r5
   28774:	andeq	r8, r1, ip, asr r6
   28778:	andeq	r8, r1, r0, lsr #27
   2877c:	andeq	r8, r1, r4, lsr #28
   28780:	andeq	r0, r0, fp, lsl #5

00028784 <flatcc_builder_end_vector@@Base>:
   28784:	ldr	r1, [r0, #32]
   28788:	push	{r4, r5, r6, lr}
   2878c:	sub	sp, sp, #8
   28790:	ldrh	r3, [r1, #14]
   28794:	cmp	r3, #4
   28798:	bne	2884c <flatcc_builder_end_vector@@Base+0xc8>
   2879c:	ldrh	lr, [r0, #130]	; 0x82
   287a0:	ldr	ip, [r1, #24]
   287a4:	ldr	r3, [r1, #16]
   287a8:	ldr	r2, [r1, #20]
   287ac:	ldr	r1, [r0, #16]
   287b0:	str	lr, [sp]
   287b4:	str	ip, [sp, #4]
   287b8:	mov	r4, r0
   287bc:	bl	2860c <flatcc_builder_create_vector@@Base>
   287c0:	subs	r5, r0, #0
   287c4:	beq	28840 <flatcc_builder_end_vector@@Base+0xbc>
   287c8:	ldr	r2, [r4, #20]
   287cc:	mov	r1, #0
   287d0:	ldr	r0, [r4, #16]
   287d4:	bl	145bc <memset@plt>
   287d8:	ldr	r3, [r4, #32]
   287dc:	ldr	r2, [r4, #64]	; 0x40
   287e0:	ldrh	lr, [r4, #130]	; 0x82
   287e4:	ldr	ip, [r3]
   287e8:	ldr	r1, [r3, #4]
   287ec:	ldrh	r0, [r4, #128]	; 0x80
   287f0:	sub	r2, r2, ip
   287f4:	cmp	r2, r1
   287f8:	movcs	r2, r1
   287fc:	cmp	r0, lr
   28800:	ldr	r0, [r4, #60]	; 0x3c
   28804:	ldr	r6, [r3, #8]
   28808:	str	r2, [r4, #24]
   2880c:	add	r2, r0, ip
   28810:	str	r2, [r4, #16]
   28814:	str	r6, [r4, #20]
   28818:	ldr	r2, [r4, #156]	; 0x9c
   2881c:	str	ip, [r4, #28]
   28820:	str	r1, [r3, #4]
   28824:	strhcc	lr, [r4, #128]	; 0x80
   28828:	ldrh	r1, [r3, #12]
   2882c:	sub	r2, r2, #1
   28830:	sub	r3, r3, #36	; 0x24
   28834:	str	r2, [r4, #156]	; 0x9c
   28838:	strh	r1, [r4, #130]	; 0x82
   2883c:	str	r3, [r4, #32]
   28840:	mov	r0, r5
   28844:	add	sp, sp, #8
   28848:	pop	{r4, r5, r6, pc}
   2884c:	ldr	r3, [pc, #28]	; 28870 <flatcc_builder_end_vector@@Base+0xec>
   28850:	ldr	r1, [pc, #28]	; 28874 <flatcc_builder_end_vector@@Base+0xf0>
   28854:	ldr	r0, [pc, #28]	; 28878 <flatcc_builder_end_vector@@Base+0xf4>
   28858:	add	r3, pc, r3
   2885c:	ldr	r2, [pc, #24]	; 2887c <flatcc_builder_end_vector@@Base+0xf8>
   28860:	add	r3, r3, #860	; 0x35c
   28864:	add	r1, pc, r1
   28868:	add	r0, pc, r0
   2886c:	bl	14610 <__assert_fail@plt>
   28870:	andeq	r8, r1, r4, asr #10
   28874:	andeq	r8, r1, r8, lsl #25
   28878:	ldrdeq	r8, [r1], -r4
   2887c:	andeq	r0, r0, r8, ror r5

00028880 <flatcc_builder_vector_count@@Base>:
   28880:	ldr	r3, [r0, #32]
   28884:	ldr	r0, [r3, #20]
   28888:	bx	lr

0002888c <flatcc_builder_vector_edit@@Base>:
   2888c:	ldr	r0, [r0, #16]
   28890:	bx	lr

00028894 <flatcc_builder_create_offset_vector_direct@@Base>:
   28894:	cmn	r2, #-1073741823	; 0xc0000001
   28898:	bls	288a4 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   2889c:	mov	r0, #0
   288a0:	bx	lr
   288a4:	mov	r3, #0
   288a8:	b	25fe4 <flatcc_builder_default_alloc@@Base+0x350>

000288ac <flatcc_builder_end_offset_vector@@Base>:
   288ac:	ldr	r3, [r0, #32]
   288b0:	push	{r4, r5, r6, lr}
   288b4:	ldrh	r2, [r3, #14]
   288b8:	cmp	r2, #5
   288bc:	bne	28958 <flatcc_builder_end_offset_vector@@Base+0xac>
   288c0:	ldr	r2, [r3, #20]
   288c4:	ldr	r1, [r0, #16]
   288c8:	mov	r4, r0
   288cc:	bl	28894 <flatcc_builder_create_offset_vector_direct@@Base>
   288d0:	subs	r5, r0, #0
   288d4:	beq	28950 <flatcc_builder_end_offset_vector@@Base+0xa4>
   288d8:	ldr	r2, [r4, #20]
   288dc:	mov	r1, #0
   288e0:	ldr	r0, [r4, #16]
   288e4:	bl	145bc <memset@plt>
   288e8:	ldr	r3, [r4, #32]
   288ec:	ldr	r2, [r4, #64]	; 0x40
   288f0:	ldrh	lr, [r4, #130]	; 0x82
   288f4:	ldr	ip, [r3]
   288f8:	ldr	r1, [r3, #4]
   288fc:	ldrh	r0, [r4, #128]	; 0x80
   28900:	sub	r2, r2, ip
   28904:	cmp	r2, r1
   28908:	movcs	r2, r1
   2890c:	cmp	r0, lr
   28910:	ldr	r0, [r4, #60]	; 0x3c
   28914:	ldr	r6, [r3, #8]
   28918:	str	r2, [r4, #24]
   2891c:	add	r2, r0, ip
   28920:	str	r2, [r4, #16]
   28924:	str	r6, [r4, #20]
   28928:	ldr	r2, [r4, #156]	; 0x9c
   2892c:	str	ip, [r4, #28]
   28930:	str	r1, [r3, #4]
   28934:	strhcc	lr, [r4, #128]	; 0x80
   28938:	ldrh	r1, [r3, #12]
   2893c:	sub	r2, r2, #1
   28940:	sub	r3, r3, #36	; 0x24
   28944:	str	r2, [r4, #156]	; 0x9c
   28948:	strh	r1, [r4, #130]	; 0x82
   2894c:	str	r3, [r4, #32]
   28950:	mov	r0, r5
   28954:	pop	{r4, r5, r6, pc}
   28958:	ldr	r3, [pc, #28]	; 2897c <flatcc_builder_end_offset_vector@@Base+0xd0>
   2895c:	ldr	r1, [pc, #28]	; 28980 <flatcc_builder_end_offset_vector@@Base+0xd4>
   28960:	ldr	r0, [pc, #28]	; 28984 <flatcc_builder_end_offset_vector@@Base+0xd8>
   28964:	add	r3, pc, r3
   28968:	ldr	r2, [pc, #24]	; 28988 <flatcc_builder_end_offset_vector@@Base+0xdc>
   2896c:	add	r3, r3, #888	; 0x378
   28970:	add	r1, pc, r1
   28974:	add	r0, pc, r0
   28978:	bl	14610 <__assert_fail@plt>
   2897c:	andeq	r8, r1, r8, lsr r4
   28980:	andeq	r8, r1, ip, ror fp
   28984:	andeq	r8, r1, r4, lsr sp
   28988:	andeq	r0, r0, r8, asr #11

0002898c <flatcc_builder_create_offset_vector@@Base>:
   2898c:	push	{r4, r5, r6, lr}
   28990:	mov	r6, r1
   28994:	mov	r5, r2
   28998:	mov	r4, r0
   2899c:	bl	27860 <flatcc_builder_start_offset_vector@@Base>
   289a0:	cmp	r0, #0
   289a4:	beq	289b0 <flatcc_builder_create_offset_vector@@Base+0x24>
   289a8:	mov	r0, #0
   289ac:	pop	{r4, r5, r6, pc}
   289b0:	mov	r1, r5
   289b4:	mov	r0, r4
   289b8:	bl	271f8 <flatcc_builder_extend_offset_vector@@Base>
   289bc:	cmp	r0, #0
   289c0:	beq	289a8 <flatcc_builder_create_offset_vector@@Base+0x1c>
   289c4:	lsl	r2, r5, #2
   289c8:	mov	r1, r6
   289cc:	bl	14544 <memcpy@plt>
   289d0:	mov	r0, r4
   289d4:	pop	{r4, r5, r6, lr}
   289d8:	b	288ac <flatcc_builder_end_offset_vector@@Base>

000289dc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   289dc:	ldr	r2, [r0, #32]
   289e0:	push	{r4, r5, r6, lr}
   289e4:	ldrh	ip, [r2, #14]
   289e8:	cmp	ip, #5
   289ec:	bne	28aa0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   289f0:	ldr	r2, [r2, #20]
   289f4:	cmn	r2, #-1073741823	; 0xc0000001
   289f8:	bls	28a08 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   289fc:	mov	r5, #0
   28a00:	mov	r0, r5
   28a04:	pop	{r4, r5, r6, pc}
   28a08:	mov	r3, r1
   28a0c:	ldr	r1, [r0, #16]
   28a10:	mov	r4, r0
   28a14:	bl	25fe4 <flatcc_builder_default_alloc@@Base+0x350>
   28a18:	subs	r5, r0, #0
   28a1c:	beq	289fc <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   28a20:	ldr	r2, [r4, #20]
   28a24:	mov	r1, #0
   28a28:	ldr	r0, [r4, #16]
   28a2c:	bl	145bc <memset@plt>
   28a30:	ldr	r3, [r4, #32]
   28a34:	ldr	r2, [r4, #64]	; 0x40
   28a38:	ldrh	lr, [r4, #130]	; 0x82
   28a3c:	ldr	ip, [r3]
   28a40:	ldr	r1, [r3, #4]
   28a44:	ldrh	r0, [r4, #128]	; 0x80
   28a48:	sub	r2, r2, ip
   28a4c:	cmp	r2, r1
   28a50:	movcs	r2, r1
   28a54:	cmp	r0, lr
   28a58:	ldr	r0, [r4, #60]	; 0x3c
   28a5c:	ldr	r6, [r3, #8]
   28a60:	str	r2, [r4, #24]
   28a64:	add	r2, r0, ip
   28a68:	str	r2, [r4, #16]
   28a6c:	str	r6, [r4, #20]
   28a70:	ldr	r2, [r4, #156]	; 0x9c
   28a74:	str	ip, [r4, #28]
   28a78:	str	r1, [r3, #4]
   28a7c:	strhcc	lr, [r4, #128]	; 0x80
   28a80:	ldrh	r1, [r3, #12]
   28a84:	sub	r2, r2, #1
   28a88:	sub	r3, r3, #36	; 0x24
   28a8c:	str	r2, [r4, #156]	; 0x9c
   28a90:	strh	r1, [r4, #130]	; 0x82
   28a94:	str	r3, [r4, #32]
   28a98:	mov	r0, r5
   28a9c:	pop	{r4, r5, r6, pc}
   28aa0:	ldr	r3, [pc, #28]	; 28ac4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   28aa4:	ldr	r1, [pc, #28]	; 28ac8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   28aa8:	ldr	r0, [pc, #28]	; 28acc <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   28aac:	add	r3, pc, r3
   28ab0:	ldr	r2, [pc, #24]	; 28ad0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   28ab4:	add	r3, r3, #924	; 0x39c
   28ab8:	add	r1, pc, r1
   28abc:	add	r0, pc, r0
   28ac0:	bl	14610 <__assert_fail@plt>
   28ac4:	strdeq	r8, [r1], -r0
   28ac8:	andeq	r8, r1, r4, lsr sl
   28acc:	andeq	r8, r1, ip, ror #23
   28ad0:	ldrdeq	r0, [r0], -r5

00028ad4 <flatcc_builder_offset_vector_edit@@Base>:
   28ad4:	ldr	r0, [r0, #16]
   28ad8:	bx	lr

00028adc <flatcc_builder_offset_vector_count@@Base>:
   28adc:	ldr	r3, [r0, #32]
   28ae0:	ldr	r0, [r3, #20]
   28ae4:	bx	lr

00028ae8 <flatcc_builder_create_union_vector_direct@@Base>:
   28ae8:	push	{r4, r5, r6, r7, r8, lr}
   28aec:	sub	sp, sp, #8
   28af0:	mov	r4, r0
   28af4:	ldr	r5, [sp, #32]
   28af8:	cmn	r5, #-1073741823	; 0xc0000001
   28afc:	bls	28b18 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   28b00:	mov	r3, #0
   28b04:	mov	r0, r4
   28b08:	str	r3, [r4]
   28b0c:	str	r3, [r4, #4]
   28b10:	add	sp, sp, #8
   28b14:	pop	{r4, r5, r6, r7, r8, pc}
   28b18:	mov	r6, r1
   28b1c:	mov	r7, r2
   28b20:	mov	r1, r3
   28b24:	mov	r0, r6
   28b28:	mov	r3, r2
   28b2c:	mov	r2, r5
   28b30:	bl	25fe4 <flatcc_builder_default_alloc@@Base+0x350>
   28b34:	subs	r8, r0, #0
   28b38:	beq	28b00 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   28b3c:	mvn	ip, #0
   28b40:	mov	r3, #1
   28b44:	mov	r2, r5
   28b48:	mov	r1, r7
   28b4c:	mov	r0, r6
   28b50:	stm	sp, {r3, ip}
   28b54:	bl	2860c <flatcc_builder_create_vector@@Base>
   28b58:	stm	r4, {r0, r8}
   28b5c:	mov	r0, r4
   28b60:	add	sp, sp, #8
   28b64:	pop	{r4, r5, r6, r7, r8, pc}

00028b68 <flatcc_builder_create_union_vector@@Base>:
   28b68:	push	{r4, r5, r6, r7, r8, lr}
   28b6c:	mov	r6, r0
   28b70:	sub	sp, sp, #16
   28b74:	mov	r0, r1
   28b78:	mov	r5, r1
   28b7c:	mov	r4, r2
   28b80:	mov	r7, r3
   28b84:	bl	27860 <flatcc_builder_start_offset_vector@@Base>
   28b88:	cmp	r0, #0
   28b8c:	beq	28ba8 <flatcc_builder_create_union_vector@@Base+0x40>
   28b90:	mov	r3, #0
   28b94:	mov	r0, r6
   28b98:	str	r3, [r6]
   28b9c:	str	r3, [r6, #4]
   28ba0:	add	sp, sp, #16
   28ba4:	pop	{r4, r5, r6, r7, r8, pc}
   28ba8:	mov	r1, r7
   28bac:	mov	r0, r5
   28bb0:	bl	271f8 <flatcc_builder_extend_offset_vector@@Base>
   28bb4:	cmp	r0, #0
   28bb8:	beq	28b90 <flatcc_builder_create_union_vector@@Base+0x28>
   28bbc:	ldr	r8, [r5, #20]
   28bc0:	ldr	r3, [r5, #24]
   28bc4:	add	r1, r7, r8
   28bc8:	cmp	r1, r3
   28bcc:	str	r1, [r5, #20]
   28bd0:	bcs	28cc8 <flatcc_builder_create_union_vector@@Base+0x160>
   28bd4:	ldr	r2, [r5, #16]
   28bd8:	adds	r8, r2, r8
   28bdc:	beq	28b90 <flatcc_builder_create_union_vector@@Base+0x28>
   28be0:	mov	r0, r5
   28be4:	bl	28ad4 <flatcc_builder_offset_vector_edit@@Base>
   28be8:	cmp	r7, #0
   28bec:	movne	r1, r4
   28bf0:	subne	lr, r8, #1
   28bf4:	mov	r3, r0
   28bf8:	addne	r2, r1, r7, lsl #3
   28bfc:	subne	ip, r0, #4
   28c00:	beq	28c20 <flatcc_builder_create_union_vector@@Base+0xb8>
   28c04:	ldrb	r4, [r1]
   28c08:	add	r1, r1, #8
   28c0c:	strb	r4, [lr, #1]!
   28c10:	ldr	r4, [r1, #-4]
   28c14:	cmp	r2, r1
   28c18:	str	r4, [ip, #4]!
   28c1c:	bne	28c04 <flatcc_builder_create_union_vector@@Base+0x9c>
   28c20:	str	r7, [sp]
   28c24:	mov	r2, r8
   28c28:	mov	r1, r5
   28c2c:	add	r0, sp, #8
   28c30:	bl	28ae8 <flatcc_builder_create_union_vector_direct@@Base>
   28c34:	ldr	r2, [r5, #20]
   28c38:	mov	r1, #0
   28c3c:	ldr	r0, [r5, #16]
   28c40:	ldr	r7, [sp, #8]
   28c44:	ldr	r4, [sp, #12]
   28c48:	bl	145bc <memset@plt>
   28c4c:	ldr	r3, [r5, #32]
   28c50:	ldr	r2, [r5, #64]	; 0x40
   28c54:	ldrh	lr, [r5, #130]	; 0x82
   28c58:	ldr	ip, [r3]
   28c5c:	ldr	r1, [r3, #4]
   28c60:	ldrh	r0, [r5, #128]	; 0x80
   28c64:	sub	r2, r2, ip
   28c68:	cmp	r2, r1
   28c6c:	movcs	r2, r1
   28c70:	cmp	r0, lr
   28c74:	ldr	r0, [r5, #60]	; 0x3c
   28c78:	ldr	r8, [r3, #8]
   28c7c:	str	r2, [r5, #24]
   28c80:	add	r2, r0, ip
   28c84:	str	r2, [r5, #16]
   28c88:	str	r8, [r5, #20]
   28c8c:	ldr	r2, [r5, #156]	; 0x9c
   28c90:	str	ip, [r5, #28]
   28c94:	str	r1, [r3, #4]
   28c98:	strhcc	lr, [r5, #128]	; 0x80
   28c9c:	ldrh	r1, [r3, #12]
   28ca0:	sub	r2, r2, #1
   28ca4:	sub	r3, r3, #36	; 0x24
   28ca8:	mov	r0, r6
   28cac:	str	r7, [r6]
   28cb0:	str	r4, [r6, #4]
   28cb4:	str	r2, [r5, #156]	; 0x9c
   28cb8:	strh	r1, [r5, #130]	; 0x82
   28cbc:	str	r3, [r5, #32]
   28cc0:	add	sp, sp, #16
   28cc4:	pop	{r4, r5, r6, r7, r8, pc}
   28cc8:	add	r1, r1, #1
   28ccc:	mvn	r2, #3
   28cd0:	mov	r0, r5
   28cd4:	bl	25c20 <union_vector_tests@@Base+0x180>
   28cd8:	cmp	r0, #0
   28cdc:	beq	28bd4 <flatcc_builder_create_union_vector@@Base+0x6c>
   28ce0:	b	28b90 <flatcc_builder_create_union_vector@@Base+0x28>

00028ce4 <flatcc_builder_start_union_vector@@Base>:
   28ce4:	push	{r4, lr}
   28ce8:	mov	r1, #4
   28cec:	mov	r4, r0
   28cf0:	bl	25ed0 <flatcc_builder_default_alloc@@Base+0x23c>
   28cf4:	cmp	r0, #0
   28cf8:	bne	28d44 <flatcc_builder_start_union_vector@@Base+0x60>
   28cfc:	ldr	r3, [r4, #32]
   28d00:	mov	r2, #8
   28d04:	mov	lr, #7
   28d08:	str	r0, [r3, #20]
   28d0c:	str	r2, [r3, #16]
   28d10:	ldr	ip, [r4, #28]
   28d14:	ldr	r2, [r4, #64]	; 0x40
   28d18:	ldr	r1, [r4, #60]	; 0x3c
   28d1c:	sub	r2, r2, ip
   28d20:	cmn	r2, #4
   28d24:	mvnhi	r2, #3
   28d28:	strh	lr, [r3, #14]
   28d2c:	add	r1, r1, ip
   28d30:	str	r2, [r4, #24]
   28d34:	mvn	r2, #3
   28d38:	str	r1, [r4, #16]
   28d3c:	str	r2, [r3, #4]
   28d40:	pop	{r4, pc}
   28d44:	mvn	r0, #0
   28d48:	pop	{r4, pc}

00028d4c <flatcc_builder_union_vector_edit@@Base>:
   28d4c:	ldr	r0, [r0, #16]
   28d50:	bx	lr

00028d54 <flatcc_builder_union_vector_count@@Base>:
   28d54:	ldr	r3, [r0, #32]
   28d58:	ldr	r0, [r3, #20]
   28d5c:	bx	lr

00028d60 <flatcc_builder_end_union_vector@@Base>:
   28d60:	ldr	r3, [r1, #32]
   28d64:	push	{r4, r5, r6, r7, r8, lr}
   28d68:	sub	sp, sp, #16
   28d6c:	ldrh	r3, [r3, #14]
   28d70:	cmp	r3, #7
   28d74:	bne	28ecc <flatcc_builder_end_union_vector@@Base+0x16c>
   28d78:	mov	r5, r0
   28d7c:	mov	r0, r1
   28d80:	mov	r4, r1
   28d84:	bl	28d54 <flatcc_builder_union_vector_count@@Base>
   28d88:	ldr	r8, [r4, #20]
   28d8c:	ldr	r3, [r4, #24]
   28d90:	lsl	r7, r0, #2
   28d94:	add	r1, r7, r0
   28d98:	add	r1, r1, r8
   28d9c:	cmp	r1, r3
   28da0:	mov	r6, r0
   28da4:	str	r1, [r4, #20]
   28da8:	bcs	28e9c <flatcc_builder_end_union_vector@@Base+0x13c>
   28dac:	ldr	r3, [r4, #16]
   28db0:	adds	r8, r3, r8
   28db4:	beq	28eb4 <flatcc_builder_end_union_vector@@Base+0x154>
   28db8:	mov	r0, r4
   28dbc:	bl	28d4c <flatcc_builder_union_vector_edit@@Base>
   28dc0:	cmp	r6, #0
   28dc4:	add	r2, r8, r7
   28dc8:	subne	ip, r2, #1
   28dcc:	subne	r1, r8, #4
   28dd0:	addne	r7, r0, r6, lsl #3
   28dd4:	beq	28df4 <flatcc_builder_end_union_vector@@Base+0x94>
   28dd8:	ldrb	lr, [r0]
   28ddc:	add	r0, r0, #8
   28de0:	strb	lr, [ip, #1]!
   28de4:	ldr	lr, [r0, #-4]
   28de8:	cmp	r0, r7
   28dec:	str	lr, [r1, #4]!
   28df0:	bne	28dd8 <flatcc_builder_end_union_vector@@Base+0x78>
   28df4:	mov	r3, r8
   28df8:	str	r6, [sp]
   28dfc:	mov	r1, r4
   28e00:	add	r0, sp, #8
   28e04:	bl	28ae8 <flatcc_builder_create_union_vector_direct@@Base>
   28e08:	ldr	r2, [r4, #20]
   28e0c:	mov	r1, #0
   28e10:	ldr	r0, [r4, #16]
   28e14:	ldr	r7, [sp, #8]
   28e18:	ldr	r6, [sp, #12]
   28e1c:	bl	145bc <memset@plt>
   28e20:	ldr	r3, [r4, #32]
   28e24:	ldr	r2, [r4, #64]	; 0x40
   28e28:	ldrh	lr, [r4, #130]	; 0x82
   28e2c:	ldr	ip, [r3]
   28e30:	ldr	r1, [r3, #4]
   28e34:	ldrh	r0, [r4, #128]	; 0x80
   28e38:	sub	r2, r2, ip
   28e3c:	cmp	r2, r1
   28e40:	movcs	r2, r1
   28e44:	cmp	r0, lr
   28e48:	ldr	r0, [r4, #60]	; 0x3c
   28e4c:	ldr	r8, [r3, #8]
   28e50:	str	r2, [r4, #24]
   28e54:	add	r2, r0, ip
   28e58:	str	r2, [r4, #16]
   28e5c:	str	r8, [r4, #20]
   28e60:	ldr	r2, [r4, #156]	; 0x9c
   28e64:	str	ip, [r4, #28]
   28e68:	str	r1, [r3, #4]
   28e6c:	strhcc	lr, [r4, #128]	; 0x80
   28e70:	ldrh	r1, [r3, #12]
   28e74:	sub	r2, r2, #1
   28e78:	sub	r3, r3, #36	; 0x24
   28e7c:	mov	r0, r5
   28e80:	str	r7, [r5]
   28e84:	str	r6, [r5, #4]
   28e88:	str	r2, [r4, #156]	; 0x9c
   28e8c:	strh	r1, [r4, #130]	; 0x82
   28e90:	str	r3, [r4, #32]
   28e94:	add	sp, sp, #16
   28e98:	pop	{r4, r5, r6, r7, r8, pc}
   28e9c:	add	r1, r1, #1
   28ea0:	mvn	r2, #3
   28ea4:	mov	r0, r4
   28ea8:	bl	25c20 <union_vector_tests@@Base+0x180>
   28eac:	cmp	r0, #0
   28eb0:	beq	28dac <flatcc_builder_end_union_vector@@Base+0x4c>
   28eb4:	mov	r3, #0
   28eb8:	mov	r0, r5
   28ebc:	str	r3, [r5]
   28ec0:	str	r3, [r5, #4]
   28ec4:	add	sp, sp, #16
   28ec8:	pop	{r4, r5, r6, r7, r8, pc}
   28ecc:	ldr	r3, [pc, #28]	; 28ef0 <flatcc_builder_end_union_vector@@Base+0x190>
   28ed0:	ldr	r1, [pc, #28]	; 28ef4 <flatcc_builder_end_union_vector@@Base+0x194>
   28ed4:	ldr	r0, [pc, #28]	; 28ef8 <flatcc_builder_end_union_vector@@Base+0x198>
   28ed8:	add	r3, pc, r3
   28edc:	ldr	r2, [pc, #24]	; 28efc <flatcc_builder_end_union_vector@@Base+0x19c>
   28ee0:	add	r3, r3, #968	; 0x3c8
   28ee4:	add	r1, pc, r1
   28ee8:	add	r0, pc, r0
   28eec:	bl	14610 <__assert_fail@plt>
   28ef0:	andeq	r7, r1, r4, asr #29
   28ef4:	andeq	r8, r1, r8, lsl #12
   28ef8:	andeq	r8, r1, r0, lsr #18
   28efc:	andeq	r0, r0, r1, asr r6

00028f00 <flatcc_builder_extend_union_vector@@Base>:
   28f00:	ldr	ip, [r0, #32]
   28f04:	push	{r4, r5, r6, lr}
   28f08:	ldr	r3, [ip, #20]
   28f0c:	adds	r2, r1, r3
   28f10:	movcs	r3, #1
   28f14:	movcc	r3, #0
   28f18:	cmn	r2, #-536870911	; 0xe0000001
   28f1c:	movls	r4, #0
   28f20:	movhi	r4, #1
   28f24:	orrs	r4, r3, r4
   28f28:	bne	28f74 <flatcc_builder_extend_union_vector@@Base+0x74>
   28f2c:	str	r2, [ip, #20]
   28f30:	ldr	r6, [r0, #20]
   28f34:	ldr	r3, [r0, #24]
   28f38:	add	r1, r6, r1, lsl #3
   28f3c:	cmp	r1, r3
   28f40:	mov	r5, r0
   28f44:	str	r1, [r0, #20]
   28f48:	bcs	28f58 <flatcc_builder_extend_union_vector@@Base+0x58>
   28f4c:	ldr	r0, [r5, #16]
   28f50:	add	r0, r0, r6
   28f54:	pop	{r4, r5, r6, pc}
   28f58:	add	r1, r1, #1
   28f5c:	mvn	r2, #3
   28f60:	bl	25c20 <union_vector_tests@@Base+0x180>
   28f64:	cmp	r0, #0
   28f68:	beq	28f4c <flatcc_builder_extend_union_vector@@Base+0x4c>
   28f6c:	mov	r0, r4
   28f70:	pop	{r4, r5, r6, pc}
   28f74:	bl	14854 <__assert_fail@plt+0x244>

00028f78 <flatcc_builder_truncate_union_vector@@Base>:
   28f78:	ldr	r3, [r0, #32]
   28f7c:	push	{r4, lr}
   28f80:	ldrh	r2, [r3, #14]
   28f84:	cmp	r2, #7
   28f88:	bne	28fcc <flatcc_builder_truncate_union_vector@@Base+0x54>
   28f8c:	ldr	ip, [r3, #20]
   28f90:	cmp	ip, r1
   28f94:	bcc	28ff0 <flatcc_builder_truncate_union_vector@@Base+0x78>
   28f98:	ldr	r2, [r3, #16]
   28f9c:	sub	ip, ip, r1
   28fa0:	str	ip, [r3, #20]
   28fa4:	mul	r2, r2, r1
   28fa8:	ldr	r3, [r0, #20]
   28fac:	ldr	r1, [r0, #16]
   28fb0:	sub	r3, r3, r2
   28fb4:	str	r3, [r0, #20]
   28fb8:	add	r0, r1, r3
   28fbc:	mov	r1, #0
   28fc0:	bl	145bc <memset@plt>
   28fc4:	mov	r0, #0
   28fc8:	pop	{r4, pc}
   28fcc:	ldr	r3, [pc, #64]	; 29014 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   28fd0:	ldr	r1, [pc, #64]	; 29018 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   28fd4:	ldr	r0, [pc, #64]	; 2901c <flatcc_builder_truncate_union_vector@@Base+0xa4>
   28fd8:	add	r3, pc, r3
   28fdc:	ldr	r2, [pc, #60]	; 29020 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   28fe0:	add	r3, r3, #1000	; 0x3e8
   28fe4:	add	r1, pc, r1
   28fe8:	add	r0, pc, r0
   28fec:	bl	14610 <__assert_fail@plt>
   28ff0:	ldr	r3, [pc, #44]	; 29024 <flatcc_builder_truncate_union_vector@@Base+0xac>
   28ff4:	ldr	r1, [pc, #44]	; 29028 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   28ff8:	ldr	r0, [pc, #44]	; 2902c <flatcc_builder_truncate_union_vector@@Base+0xb4>
   28ffc:	add	r3, pc, r3
   29000:	ldr	r2, [pc, #40]	; 29030 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   29004:	add	r3, r3, #1000	; 0x3e8
   29008:	add	r1, pc, r1
   2900c:	add	r0, pc, r0
   29010:	bl	14610 <__assert_fail@plt>
   29014:	andeq	r7, r1, r4, asr #27
   29018:	andeq	r8, r1, r8, lsl #10
   2901c:	andeq	r8, r1, r0, lsr #16
   29020:	andeq	r0, r0, r1, lsl #13
   29024:	andeq	r7, r1, r0, lsr #27
   29028:	andeq	r8, r1, r4, ror #9
   2902c:	andeq	r8, r1, r0, lsr #14
   29030:	andeq	r0, r0, r2, lsl #13

00029034 <flatcc_builder_union_vector_push@@Base>:
   29034:	ldr	ip, [r0, #32]
   29038:	push	{r4, r5, r6, lr}
   2903c:	sub	sp, sp, #8
   29040:	ldrh	r3, [ip, #14]
   29044:	stm	sp, {r1, r2}
   29048:	cmp	r3, #7
   2904c:	bne	290cc <flatcc_builder_union_vector_push@@Base+0x98>
   29050:	ldr	r3, [ip, #20]
   29054:	cmn	r3, #-536870911	; 0xe0000001
   29058:	beq	290bc <flatcc_builder_union_vector_push@@Base+0x88>
   2905c:	add	r3, r3, #1
   29060:	str	r3, [ip, #20]
   29064:	ldr	r6, [r0, #20]
   29068:	ldr	r2, [r0, #24]
   2906c:	add	r3, r6, #8
   29070:	cmp	r3, r2
   29074:	mov	r4, r0
   29078:	mov	r5, sp
   2907c:	str	r3, [r0, #20]
   29080:	bcs	290a8 <flatcc_builder_union_vector_push@@Base+0x74>
   29084:	ldr	r3, [r4, #16]
   29088:	adds	r3, r3, r6
   2908c:	beq	290f0 <flatcc_builder_union_vector_push@@Base+0xbc>
   29090:	ldm	r5, {r0, r1}
   29094:	mov	r2, r3
   29098:	stm	r3, {r0, r1}
   2909c:	mov	r0, r2
   290a0:	add	sp, sp, #8
   290a4:	pop	{r4, r5, r6, pc}
   290a8:	mvn	r2, #3
   290ac:	add	r1, r6, #9
   290b0:	bl	25c20 <union_vector_tests@@Base+0x180>
   290b4:	cmp	r0, #0
   290b8:	beq	29084 <flatcc_builder_union_vector_push@@Base+0x50>
   290bc:	mov	r2, #0
   290c0:	mov	r0, r2
   290c4:	add	sp, sp, #8
   290c8:	pop	{r4, r5, r6, pc}
   290cc:	ldr	r3, [pc, #36]	; 290f8 <flatcc_builder_union_vector_push@@Base+0xc4>
   290d0:	ldr	r1, [pc, #36]	; 290fc <flatcc_builder_union_vector_push@@Base+0xc8>
   290d4:	ldr	r0, [pc, #36]	; 29100 <flatcc_builder_union_vector_push@@Base+0xcc>
   290d8:	add	r3, pc, r3
   290dc:	ldr	r2, [pc, #32]	; 29104 <flatcc_builder_union_vector_push@@Base+0xd0>
   290e0:	add	r3, r3, #1040	; 0x410
   290e4:	add	r1, pc, r1
   290e8:	add	r0, pc, r0
   290ec:	bl	14610 <__assert_fail@plt>
   290f0:	mov	r2, r3
   290f4:	b	2909c <flatcc_builder_union_vector_push@@Base+0x68>
   290f8:	andeq	r7, r1, r4, asr #25
   290fc:	andeq	r8, r1, r8, lsl #8
   29100:	andeq	r8, r1, r0, lsr #14
   29104:	andeq	r0, r0, sp, lsl #13

00029108 <flatcc_builder_append_union_vector@@Base>:
   29108:	ldr	ip, [r0, #32]
   2910c:	push	{r4, r5, r6, r7, r8, lr}
   29110:	ldrh	r3, [ip, #14]
   29114:	cmp	r3, #7
   29118:	bne	291b0 <flatcc_builder_append_union_vector@@Base+0xa8>
   2911c:	mov	r6, r1
   29120:	ldr	r1, [ip, #20]
   29124:	adds	r1, r2, r1
   29128:	movcs	lr, #1
   2912c:	movcc	lr, #0
   29130:	cmn	r1, #-536870911	; 0xe0000001
   29134:	movls	r3, #0
   29138:	movhi	r3, #1
   2913c:	orrs	r8, lr, r3
   29140:	bne	291ac <flatcc_builder_append_union_vector@@Base+0xa4>
   29144:	str	r1, [ip, #20]
   29148:	ldr	r7, [r0, #20]
   2914c:	lsl	r4, r2, #3
   29150:	ldr	r3, [r0, #24]
   29154:	add	r1, r4, r7
   29158:	cmp	r1, r3
   2915c:	mov	r5, r0
   29160:	str	r1, [r0, #20]
   29164:	bcs	29190 <flatcc_builder_append_union_vector@@Base+0x88>
   29168:	ldr	r3, [r5, #16]
   2916c:	adds	r3, r3, r7
   29170:	beq	29188 <flatcc_builder_append_union_vector@@Base+0x80>
   29174:	mov	r0, r3
   29178:	mov	r2, r4
   2917c:	mov	r1, r6
   29180:	bl	14544 <memcpy@plt>
   29184:	mov	r3, r0
   29188:	mov	r0, r3
   2918c:	pop	{r4, r5, r6, r7, r8, pc}
   29190:	add	r1, r1, #1
   29194:	mvn	r2, #3
   29198:	bl	25c20 <union_vector_tests@@Base+0x180>
   2919c:	cmp	r0, #0
   291a0:	beq	29168 <flatcc_builder_append_union_vector@@Base+0x60>
   291a4:	mov	r3, r8
   291a8:	b	29188 <flatcc_builder_append_union_vector@@Base+0x80>
   291ac:	bl	14854 <__assert_fail@plt+0x244>
   291b0:	ldr	r3, [pc, #32]	; 291d8 <flatcc_builder_append_union_vector@@Base+0xd0>
   291b4:	ldr	r1, [pc, #32]	; 291dc <flatcc_builder_append_union_vector@@Base+0xd4>
   291b8:	add	r3, pc, r3
   291bc:	ldr	r0, [pc, #28]	; 291e0 <flatcc_builder_append_union_vector@@Base+0xd8>
   291c0:	add	r3, r3, #1072	; 0x430
   291c4:	ldr	r2, [pc, #24]	; 291e4 <flatcc_builder_append_union_vector@@Base+0xdc>
   291c8:	add	r3, r3, #4
   291cc:	add	r1, pc, r1
   291d0:	add	r0, pc, r0
   291d4:	bl	14610 <__assert_fail@plt>
   291d8:	andeq	r7, r1, r4, ror #23
   291dc:	andeq	r8, r1, r0, lsr #6
   291e0:	andeq	r8, r1, r8, lsr r6
   291e4:	muleq	r0, ip, r6

000291e8 <flatcc_builder_create_string@@Base>:
   291e8:	push	{r4, r5, r6, lr}
   291ec:	sub	sp, sp, #88	; 0x58
   291f0:	ldr	lr, [r0, #136]	; 0x88
   291f4:	mov	r4, r0
   291f8:	add	r0, sp, #88	; 0x58
   291fc:	cmp	r2, #0
   29200:	sub	r3, lr, r2
   29204:	str	r2, [r0, #-76]!	; 0xffffffb4
   29208:	sub	r3, r3, #1
   2920c:	str	r0, [sp, #24]
   29210:	ldr	r5, [pc, #188]	; 292d4 <flatcc_builder_create_string@@Base+0xec>
   29214:	moveq	r0, #1
   29218:	strne	r1, [sp, #32]
   2921c:	mov	ip, #4
   29220:	moveq	r1, r0
   29224:	movne	r1, #2
   29228:	and	r3, r3, #3
   2922c:	ldr	r0, [pc, #164]	; 292d8 <flatcc_builder_create_string@@Base+0xf0>
   29230:	str	ip, [sp, #28]
   29234:	add	r5, pc, r5
   29238:	addne	ip, r2, ip
   2923c:	add	r3, r3, #1
   29240:	add	r1, r1, #1
   29244:	add	ip, ip, r3
   29248:	add	r6, sp, #88	; 0x58
   2924c:	strne	r2, [sp, #36]	; 0x24
   29250:	add	r1, r6, r1, lsl #3
   29254:	str	ip, [sp, #16]
   29258:	ldr	r0, [r5, r0]
   2925c:	sub	r5, lr, ip
   29260:	movne	r2, #3
   29264:	moveq	r2, #2
   29268:	cmp	lr, r5
   2926c:	str	r0, [r1, #-72]	; 0xffffffb8
   29270:	str	r3, [r1, #-68]	; 0xffffffbc
   29274:	str	r2, [sp, #20]
   29278:	ble	292ac <flatcc_builder_create_string@@Base+0xc4>
   2927c:	ldr	r0, [r4, #36]	; 0x24
   29280:	mov	r3, r5
   29284:	str	ip, [sp]
   29288:	add	r1, sp, #24
   2928c:	ldr	r6, [r4, #44]	; 0x2c
   29290:	blx	r6
   29294:	cmp	r0, #0
   29298:	bne	292b0 <flatcc_builder_create_string@@Base+0xc8>
   2929c:	mov	r0, r5
   292a0:	str	r5, [r4, #136]	; 0x88
   292a4:	add	sp, sp, #88	; 0x58
   292a8:	pop	{r4, r5, r6, pc}
   292ac:	bl	1481c <__assert_fail@plt+0x20c>
   292b0:	ldr	r3, [pc, #36]	; 292dc <flatcc_builder_create_string@@Base+0xf4>
   292b4:	ldr	r1, [pc, #36]	; 292e0 <flatcc_builder_create_string@@Base+0xf8>
   292b8:	ldr	r0, [pc, #36]	; 292e4 <flatcc_builder_create_string@@Base+0xfc>
   292bc:	add	r3, pc, r3
   292c0:	ldr	r2, [pc, #32]	; 292e8 <flatcc_builder_create_string@@Base+0x100>
   292c4:	add	r3, r3, #28
   292c8:	add	r1, pc, r1
   292cc:	add	r0, pc, r0
   292d0:	bl	14610 <__assert_fail@plt>
   292d4:	andeq	sl, r2, r4, asr #27
   292d8:	andeq	r0, r0, r4, rrx
   292dc:	andeq	r7, r1, r0, ror #21
   292e0:	andeq	r8, r1, r4, lsr #4
   292e4:	andeq	r8, r1, r8, lsr #5
   292e8:	andeq	r0, r0, fp, lsl #5

000292ec <flatcc_builder_create_string_str@@Base>:
   292ec:	push	{r4, r5, r6, lr}
   292f0:	mov	r5, r0
   292f4:	mov	r0, r1
   292f8:	mov	r4, r1
   292fc:	bl	14598 <strlen@plt>
   29300:	mov	r1, r4
   29304:	mov	r2, r0
   29308:	mov	r0, r5
   2930c:	pop	{r4, r5, r6, lr}
   29310:	b	291e8 <flatcc_builder_create_string@@Base>

00029314 <flatcc_builder_create_string_strn@@Base>:
   29314:	push	{r4, r5, r6, lr}
   29318:	mov	r4, r1
   2931c:	mov	r6, r0
   29320:	mov	r1, #0
   29324:	mov	r0, r4
   29328:	mov	r5, r2
   2932c:	bl	145e0 <memchr@plt>
   29330:	mov	r1, r4
   29334:	cmp	r0, #0
   29338:	subne	r5, r0, r4
   2933c:	mov	r2, r5
   29340:	mov	r0, r6
   29344:	pop	{r4, r5, r6, lr}
   29348:	b	291e8 <flatcc_builder_create_string@@Base>

0002934c <flatcc_builder_end_string@@Base>:
   2934c:	ldr	r3, [r0, #32]
   29350:	push	{r4, r5, r6, lr}
   29354:	ldrh	r2, [r3, #14]
   29358:	cmp	r2, #6
   2935c:	bne	2942c <flatcc_builder_end_string@@Base+0xe0>
   29360:	ldr	r2, [r3, #20]
   29364:	ldr	r3, [r0, #20]
   29368:	mov	r4, r0
   2936c:	cmp	r2, r3
   29370:	bne	29404 <flatcc_builder_end_string@@Base+0xb8>
   29374:	ldr	r1, [r0, #16]
   29378:	bl	291e8 <flatcc_builder_create_string@@Base>
   2937c:	subs	r5, r0, #0
   29380:	beq	293fc <flatcc_builder_end_string@@Base+0xb0>
   29384:	ldr	r2, [r4, #20]
   29388:	mov	r1, #0
   2938c:	ldr	r0, [r4, #16]
   29390:	bl	145bc <memset@plt>
   29394:	ldr	r3, [r4, #32]
   29398:	ldr	r2, [r4, #64]	; 0x40
   2939c:	ldrh	lr, [r4, #130]	; 0x82
   293a0:	ldr	ip, [r3]
   293a4:	ldr	r1, [r3, #4]
   293a8:	ldrh	r0, [r4, #128]	; 0x80
   293ac:	sub	r2, r2, ip
   293b0:	cmp	r2, r1
   293b4:	movcs	r2, r1
   293b8:	cmp	r0, lr
   293bc:	ldr	r0, [r4, #60]	; 0x3c
   293c0:	ldr	r6, [r3, #8]
   293c4:	str	r2, [r4, #24]
   293c8:	add	r2, r0, ip
   293cc:	str	r2, [r4, #16]
   293d0:	str	r6, [r4, #20]
   293d4:	ldr	r2, [r4, #156]	; 0x9c
   293d8:	str	ip, [r4, #28]
   293dc:	str	r1, [r3, #4]
   293e0:	strhcc	lr, [r4, #128]	; 0x80
   293e4:	ldrh	r1, [r3, #12]
   293e8:	sub	r2, r2, #1
   293ec:	sub	r3, r3, #36	; 0x24
   293f0:	str	r2, [r4, #156]	; 0x9c
   293f4:	strh	r1, [r4, #130]	; 0x82
   293f8:	str	r3, [r4, #32]
   293fc:	mov	r0, r5
   29400:	pop	{r4, r5, r6, pc}
   29404:	ldr	r3, [pc, #72]	; 29454 <flatcc_builder_end_string@@Base+0x108>
   29408:	ldr	r1, [pc, #72]	; 29458 <flatcc_builder_end_string@@Base+0x10c>
   2940c:	add	r3, pc, r3
   29410:	ldr	r0, [pc, #68]	; 2945c <flatcc_builder_end_string@@Base+0x110>
   29414:	add	r3, r3, #1104	; 0x450
   29418:	ldr	r2, [pc, #64]	; 29460 <flatcc_builder_end_string@@Base+0x114>
   2941c:	add	r3, r3, #8
   29420:	add	r1, pc, r1
   29424:	add	r0, pc, r0
   29428:	bl	14610 <__assert_fail@plt>
   2942c:	ldr	r3, [pc, #48]	; 29464 <flatcc_builder_end_string@@Base+0x118>
   29430:	ldr	r1, [pc, #48]	; 29468 <flatcc_builder_end_string@@Base+0x11c>
   29434:	add	r3, pc, r3
   29438:	ldr	r0, [pc, #44]	; 2946c <flatcc_builder_end_string@@Base+0x120>
   2943c:	add	r3, r3, #1104	; 0x450
   29440:	ldr	r2, [pc, #40]	; 29470 <flatcc_builder_end_string@@Base+0x124>
   29444:	add	r3, r3, #8
   29448:	add	r1, pc, r1
   2944c:	add	r0, pc, r0
   29450:	bl	14610 <__assert_fail@plt>
   29454:	muleq	r1, r0, r9
   29458:	andeq	r8, r1, ip, asr #1
   2945c:	andeq	r8, r1, r8, lsl r4
   29460:	andeq	r0, r0, r5, asr #13
   29464:	andeq	r7, r1, r8, ror #18
   29468:	andeq	r8, r1, r4, lsr #1
   2946c:	muleq	r1, r0, r2
   29470:	andeq	r0, r0, r4, asr #13

00029474 <flatcc_builder_string_edit@@Base>:
   29474:	ldr	r0, [r0, #16]
   29478:	bx	lr

0002947c <flatcc_builder_string_len@@Base>:
   2947c:	ldr	r3, [r0, #32]
   29480:	ldr	r0, [r3, #20]
   29484:	bx	lr

00029488 <flatcc_builder_table_add@@Base>:
   29488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2948c:	mov	r4, r0
   29490:	ldr	r0, [r0, #32]
   29494:	ldrh	r0, [r0, #14]
   29498:	cmp	r0, #3
   2949c:	bne	295b4 <flatcc_builder_table_add@@Base+0x12c>
   294a0:	ldr	r0, [pc, #308]	; 295dc <flatcc_builder_table_add@@Base+0x154>
   294a4:	cmp	r1, r0
   294a8:	bhi	2958c <flatcc_builder_table_add@@Base+0x104>
   294ac:	ldrh	r0, [r4, #130]	; 0x82
   294b0:	lsl	r8, r1, #1
   294b4:	cmp	r0, r3
   294b8:	ldr	r0, [r4, #4]
   294bc:	strhcc	r3, [r4, #130]	; 0x82
   294c0:	add	lr, r0, r8
   294c4:	ldrh	r7, [r0, r8]
   294c8:	cmp	r7, #0
   294cc:	bne	29564 <flatcc_builder_table_add@@Base+0xdc>
   294d0:	ldr	ip, [r4, #12]
   294d4:	ldr	r9, [pc, #260]	; 295e0 <flatcc_builder_table_add@@Base+0x158>
   294d8:	eor	ip, ip, r1
   294dc:	ldr	r0, [r4, #20]
   294e0:	mul	ip, r9, ip
   294e4:	sub	r6, r3, #1
   294e8:	eor	ip, ip, r2
   294ec:	rsb	r3, r3, #0
   294f0:	add	r6, r6, r0
   294f4:	and	r6, r6, r3
   294f8:	mul	ip, r9, ip
   294fc:	ldr	r3, [r4, #24]
   29500:	add	r2, r2, r6
   29504:	cmp	r2, r3
   29508:	uxth	r5, r1
   2950c:	str	ip, [r4, #12]
   29510:	str	r2, [r4, #20]
   29514:	bcs	2953c <flatcc_builder_table_add@@Base+0xb4>
   29518:	add	r3, r6, #4
   2951c:	strh	r3, [lr]
   29520:	ldrh	r3, [r4, #8]
   29524:	ldr	r0, [r4, #16]
   29528:	cmp	r3, r5
   2952c:	addls	r5, r5, #1
   29530:	strhls	r5, [r4, #8]
   29534:	add	r0, r0, r6
   29538:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2953c:	add	r1, r2, #1
   29540:	mov	r0, r4
   29544:	ldr	r2, [pc, #152]	; 295e4 <flatcc_builder_table_add@@Base+0x15c>
   29548:	bl	25c20 <union_vector_tests@@Base+0x180>
   2954c:	cmp	r0, #0
   29550:	ldreq	lr, [r4, #4]
   29554:	addeq	lr, lr, r8
   29558:	beq	29518 <flatcc_builder_table_add@@Base+0x90>
   2955c:	mov	r0, r7
   29560:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29564:	ldr	r3, [pc, #124]	; 295e8 <flatcc_builder_table_add@@Base+0x160>
   29568:	ldr	r1, [pc, #124]	; 295ec <flatcc_builder_table_add@@Base+0x164>
   2956c:	add	r3, pc, r3
   29570:	ldr	r0, [pc, #120]	; 295f0 <flatcc_builder_table_add@@Base+0x168>
   29574:	add	r3, r3, #1136	; 0x470
   29578:	ldr	r2, [pc, #116]	; 295f4 <flatcc_builder_table_add@@Base+0x16c>
   2957c:	add	r3, r3, #4
   29580:	add	r1, pc, r1
   29584:	add	r0, pc, r0
   29588:	bl	14610 <__assert_fail@plt>
   2958c:	ldr	r3, [pc, #100]	; 295f8 <flatcc_builder_table_add@@Base+0x170>
   29590:	ldr	r1, [pc, #100]	; 295fc <flatcc_builder_table_add@@Base+0x174>
   29594:	add	r3, pc, r3
   29598:	ldr	r0, [pc, #96]	; 29600 <flatcc_builder_table_add@@Base+0x178>
   2959c:	add	r3, r3, #1136	; 0x470
   295a0:	ldr	r2, [pc, #92]	; 29604 <flatcc_builder_table_add@@Base+0x17c>
   295a4:	add	r3, r3, #4
   295a8:	add	r1, pc, r1
   295ac:	add	r0, pc, r0
   295b0:	bl	14610 <__assert_fail@plt>
   295b4:	ldr	r3, [pc, #76]	; 29608 <flatcc_builder_table_add@@Base+0x180>
   295b8:	ldr	r1, [pc, #76]	; 2960c <flatcc_builder_table_add@@Base+0x184>
   295bc:	add	r3, pc, r3
   295c0:	ldr	r0, [pc, #72]	; 29610 <flatcc_builder_table_add@@Base+0x188>
   295c4:	add	r3, r3, #1136	; 0x470
   295c8:	ldr	r2, [pc, #68]	; 29614 <flatcc_builder_table_add@@Base+0x18c>
   295cc:	add	r3, r3, #4
   295d0:	add	r1, pc, r1
   295d4:	add	r0, pc, r0
   295d8:	bl	14610 <__assert_fail@plt>
   295dc:	strdeq	r7, [r0], -ip
   295e0:			; <UNDEFINED> instruction: 0x9e3779b1
   295e4:	strdeq	pc, [r0], -ip
   295e8:	andeq	r7, r1, r0, lsr r8
   295ec:	andeq	r7, r1, ip, ror #30
   295f0:	strdeq	r7, [r1], -r0
   295f4:	strdeq	r0, [r0], -r8
   295f8:	andeq	r7, r1, r8, lsl #16
   295fc:	andeq	r7, r1, r4, asr #30
   29600:			; <UNDEFINED> instruction: 0x000182b4
   29604:	andeq	r0, r0, lr, ror #13
   29608:	andeq	r7, r1, r0, ror #15
   2960c:	andeq	r7, r1, ip, lsl pc
   29610:	strdeq	r8, [r1], -r4
   29614:	andeq	r0, r0, sp, ror #13

00029618 <flatcc_builder_table_edit@@Base>:
   29618:	ldr	r3, [r0, #32]
   2961c:	ldrh	r3, [r3, #14]
   29620:	cmp	r3, #3
   29624:	bne	2963c <flatcc_builder_table_edit@@Base+0x24>
   29628:	ldr	r3, [r0, #20]
   2962c:	ldr	r0, [r0, #16]
   29630:	sub	r1, r3, r1
   29634:	add	r0, r0, r1
   29638:	bx	lr
   2963c:	ldr	r3, [pc, #32]	; 29664 <flatcc_builder_table_edit@@Base+0x4c>
   29640:	ldr	r1, [pc, #32]	; 29668 <flatcc_builder_table_edit@@Base+0x50>
   29644:	ldr	r0, [pc, #32]	; 2966c <flatcc_builder_table_edit@@Base+0x54>
   29648:	add	r3, pc, r3
   2964c:	push	{r4, lr}
   29650:	add	r3, r3, #1168	; 0x490
   29654:	ldr	r2, [pc, #20]	; 29670 <flatcc_builder_table_edit@@Base+0x58>
   29658:	add	r1, pc, r1
   2965c:	add	r0, pc, r0
   29660:	bl	14610 <__assert_fail@plt>
   29664:	andeq	r7, r1, r4, asr r7
   29668:	muleq	r1, r4, lr
   2966c:	andeq	r8, r1, ip, ror #2
   29670:	andeq	r0, r0, r2, lsl #14

00029674 <flatcc_builder_table_add_copy@@Base>:
   29674:	push	{r4, r5, r6, lr}
   29678:	mov	r4, r3
   2967c:	mov	r6, r2
   29680:	ldrh	r3, [sp, #16]
   29684:	mov	r2, r4
   29688:	bl	29488 <flatcc_builder_table_add@@Base>
   2968c:	subs	r5, r0, #0
   29690:	beq	296a0 <flatcc_builder_table_add_copy@@Base+0x2c>
   29694:	mov	r2, r4
   29698:	mov	r1, r6
   2969c:	bl	14544 <memcpy@plt>
   296a0:	mov	r0, r5
   296a4:	pop	{r4, r5, r6, pc}

000296a8 <flatcc_builder_table_add_offset@@Base>:
   296a8:	ldr	r3, [r0, #32]
   296ac:	push	{r4, r5, r6, r7, r8, lr}
   296b0:	ldrh	r3, [r3, #14]
   296b4:	cmp	r3, #3
   296b8:	bne	297d0 <flatcc_builder_table_add_offset@@Base+0x128>
   296bc:	ldr	r3, [pc, #308]	; 297f8 <flatcc_builder_table_add_offset@@Base+0x150>
   296c0:	cmp	r1, r3
   296c4:	bhi	297a8 <flatcc_builder_table_add_offset@@Base+0x100>
   296c8:	ldr	r3, [r0, #4]
   296cc:	lsl	r7, r1, #1
   296d0:	mov	r4, r0
   296d4:	ldrh	r6, [r3, r7]
   296d8:	add	ip, r3, r7
   296dc:	cmp	r6, #0
   296e0:	bne	29780 <flatcc_builder_table_add_offset@@Base+0xd8>
   296e4:	ldr	r3, [r0, #12]
   296e8:	ldr	r2, [pc, #268]	; 297fc <flatcc_builder_table_add_offset@@Base+0x154>
   296ec:	eor	r3, r3, r1
   296f0:	ldr	r5, [r0, #20]
   296f4:	mul	r3, r2, r3
   296f8:	add	r5, r5, #3
   296fc:	eor	r3, r3, #4
   29700:	bic	r5, r5, #3
   29704:	mul	r3, r2, r3
   29708:	ldr	lr, [r0, #24]
   2970c:	add	r2, r5, #4
   29710:	cmp	r2, lr
   29714:	uxth	r8, r1
   29718:	str	r3, [r0, #12]
   2971c:	str	r2, [r0, #20]
   29720:	bhi	2975c <flatcc_builder_table_add_offset@@Base+0xb4>
   29724:	uxth	r2, r5
   29728:	add	r3, r2, #4
   2972c:	strh	r3, [ip]
   29730:	ldrh	r3, [r4, #8]
   29734:	ldr	r0, [r4, #16]
   29738:	cmp	r3, r8
   2973c:	ldr	r3, [r4]
   29740:	addls	r1, r8, #1
   29744:	strhls	r1, [r4, #8]
   29748:	add	r1, r3, #2
   2974c:	str	r1, [r4]
   29750:	add	r0, r0, r5
   29754:	strh	r2, [r3]
   29758:	pop	{r4, r5, r6, r7, r8, pc}
   2975c:	mov	r1, r2
   29760:	ldr	r2, [pc, #152]	; 29800 <flatcc_builder_table_add_offset@@Base+0x158>
   29764:	bl	25c20 <union_vector_tests@@Base+0x180>
   29768:	cmp	r0, #0
   2976c:	ldreq	ip, [r4, #4]
   29770:	addeq	ip, ip, r7
   29774:	beq	29724 <flatcc_builder_table_add_offset@@Base+0x7c>
   29778:	mov	r0, r6
   2977c:	pop	{r4, r5, r6, r7, r8, pc}
   29780:	ldr	r3, [pc, #124]	; 29804 <flatcc_builder_table_add_offset@@Base+0x15c>
   29784:	ldr	r1, [pc, #124]	; 29808 <flatcc_builder_table_add_offset@@Base+0x160>
   29788:	add	r3, pc, r3
   2978c:	ldr	r0, [pc, #120]	; 2980c <flatcc_builder_table_add_offset@@Base+0x164>
   29790:	add	r3, r3, #1184	; 0x4a0
   29794:	ldr	r2, [pc, #116]	; 29810 <flatcc_builder_table_add_offset@@Base+0x168>
   29798:	add	r3, r3, #12
   2979c:	add	r1, pc, r1
   297a0:	add	r0, pc, r0
   297a4:	bl	14610 <__assert_fail@plt>
   297a8:	ldr	r3, [pc, #100]	; 29814 <flatcc_builder_table_add_offset@@Base+0x16c>
   297ac:	ldr	r1, [pc, #100]	; 29818 <flatcc_builder_table_add_offset@@Base+0x170>
   297b0:	add	r3, pc, r3
   297b4:	ldr	r0, [pc, #96]	; 2981c <flatcc_builder_table_add_offset@@Base+0x174>
   297b8:	add	r3, r3, #1184	; 0x4a0
   297bc:	ldr	r2, [pc, #92]	; 29820 <flatcc_builder_table_add_offset@@Base+0x178>
   297c0:	add	r3, r3, #12
   297c4:	add	r1, pc, r1
   297c8:	add	r0, pc, r0
   297cc:	bl	14610 <__assert_fail@plt>
   297d0:	ldr	r3, [pc, #76]	; 29824 <flatcc_builder_table_add_offset@@Base+0x17c>
   297d4:	ldr	r1, [pc, #76]	; 29828 <flatcc_builder_table_add_offset@@Base+0x180>
   297d8:	add	r3, pc, r3
   297dc:	ldr	r0, [pc, #72]	; 2982c <flatcc_builder_table_add_offset@@Base+0x184>
   297e0:	add	r3, r3, #1184	; 0x4a0
   297e4:	ldr	r2, [pc, #68]	; 29830 <flatcc_builder_table_add_offset@@Base+0x188>
   297e8:	add	r3, r3, #12
   297ec:	add	r1, pc, r1
   297f0:	add	r0, pc, r0
   297f4:	bl	14610 <__assert_fail@plt>
   297f8:	strdeq	r7, [r0], -ip
   297fc:			; <UNDEFINED> instruction: 0x9e3779b1
   29800:	strdeq	pc, [r0], -ip
   29804:	andeq	r7, r1, r4, lsl r6
   29808:	andeq	r7, r1, r0, asr sp
   2980c:	ldrdeq	r7, [r1], -r4
   29810:	andeq	r0, r0, fp, lsl r7
   29814:	andeq	r7, r1, ip, ror #11
   29818:	andeq	r7, r1, r8, lsr #26
   2981c:	muleq	r1, r8, r0
   29820:	andeq	r0, r0, r4, lsl r7
   29824:	andeq	r7, r1, r4, asr #11
   29828:	andeq	r7, r1, r0, lsl #26
   2982c:	ldrdeq	r7, [r1], -r8
   29830:	andeq	r0, r0, r3, lsl r7

00029834 <flatcc_builder_table_add_union@@Base>:
   29834:	push	{r4, r5, r6, r7, lr}
   29838:	sub	sp, sp, #12
   2983c:	add	ip, sp, #8
   29840:	stmdb	ip, {r2, r3}
   29844:	ldr	r3, [r0, #32]
   29848:	ldrb	r5, [sp]
   2984c:	ldr	r6, [sp, #4]
   29850:	ldrh	r3, [r3, #14]
   29854:	cmp	r3, #3
   29858:	bne	298e0 <flatcc_builder_table_add_union@@Base+0xac>
   2985c:	cmp	r5, #0
   29860:	mov	r4, r0
   29864:	mov	r7, r1
   29868:	beq	298b0 <flatcc_builder_table_add_union@@Base+0x7c>
   2986c:	cmp	r6, #0
   29870:	beq	29884 <flatcc_builder_table_add_union@@Base+0x50>
   29874:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   29878:	cmp	r0, #0
   2987c:	strne	r6, [r0]
   29880:	beq	29930 <flatcc_builder_table_add_union@@Base+0xfc>
   29884:	mov	r3, #1
   29888:	sub	r1, r7, #1
   2988c:	mov	r0, r4
   29890:	mov	r2, r3
   29894:	bl	29488 <flatcc_builder_table_add@@Base>
   29898:	cmp	r0, #0
   2989c:	beq	29908 <flatcc_builder_table_add_union@@Base+0xd4>
   298a0:	strb	r5, [r0]
   298a4:	mov	r0, #0
   298a8:	add	sp, sp, #12
   298ac:	pop	{r4, r5, r6, r7, pc}
   298b0:	cmp	r6, #0
   298b4:	beq	29884 <flatcc_builder_table_add_union@@Base+0x50>
   298b8:	ldr	r3, [pc, #152]	; 29958 <flatcc_builder_table_add_union@@Base+0x124>
   298bc:	ldr	r1, [pc, #152]	; 2995c <flatcc_builder_table_add_union@@Base+0x128>
   298c0:	add	r3, pc, r3
   298c4:	ldr	r0, [pc, #148]	; 29960 <flatcc_builder_table_add_union@@Base+0x12c>
   298c8:	add	r3, r3, #1216	; 0x4c0
   298cc:	ldr	r2, [pc, #144]	; 29964 <flatcc_builder_table_add_union@@Base+0x130>
   298d0:	add	r3, r3, #12
   298d4:	add	r1, pc, r1
   298d8:	add	r0, pc, r0
   298dc:	bl	14610 <__assert_fail@plt>
   298e0:	ldr	r3, [pc, #128]	; 29968 <flatcc_builder_table_add_union@@Base+0x134>
   298e4:	ldr	r1, [pc, #128]	; 2996c <flatcc_builder_table_add_union@@Base+0x138>
   298e8:	add	r3, pc, r3
   298ec:	ldr	r0, [pc, #124]	; 29970 <flatcc_builder_table_add_union@@Base+0x13c>
   298f0:	add	r3, r3, #1216	; 0x4c0
   298f4:	ldr	r2, [pc, #120]	; 29974 <flatcc_builder_table_add_union@@Base+0x140>
   298f8:	add	r3, r3, #12
   298fc:	add	r1, pc, r1
   29900:	add	r0, pc, r0
   29904:	bl	14610 <__assert_fail@plt>
   29908:	ldr	r3, [pc, #104]	; 29978 <flatcc_builder_table_add_union@@Base+0x144>
   2990c:	ldr	r1, [pc, #104]	; 2997c <flatcc_builder_table_add_union@@Base+0x148>
   29910:	add	r3, pc, r3
   29914:	ldr	r0, [pc, #100]	; 29980 <flatcc_builder_table_add_union@@Base+0x14c>
   29918:	add	r3, r3, #1216	; 0x4c0
   2991c:	ldr	r2, [pc, #96]	; 29984 <flatcc_builder_table_add_union@@Base+0x150>
   29920:	add	r3, r3, #12
   29924:	add	r1, pc, r1
   29928:	add	r0, pc, r0
   2992c:	bl	14610 <__assert_fail@plt>
   29930:	ldr	r3, [pc, #80]	; 29988 <flatcc_builder_table_add_union@@Base+0x154>
   29934:	ldr	r1, [pc, #80]	; 2998c <flatcc_builder_table_add_union@@Base+0x158>
   29938:	add	r3, pc, r3
   2993c:	ldr	r0, [pc, #76]	; 29990 <flatcc_builder_table_add_union@@Base+0x15c>
   29940:	add	r3, r3, #1216	; 0x4c0
   29944:	ldr	r2, [pc, #72]	; 29994 <flatcc_builder_table_add_union@@Base+0x160>
   29948:	add	r3, r3, #12
   2994c:	add	r1, pc, r1
   29950:	add	r0, pc, r0
   29954:	bl	14610 <__assert_fail@plt>
   29958:	ldrdeq	r7, [r1], -ip
   2995c:	andeq	r7, r1, r8, lsl ip
   29960:	andeq	r7, r1, ip, asr #31
   29964:	andeq	r0, r0, pc, ror #11
   29968:			; <UNDEFINED> instruction: 0x000174b4
   2996c:	strdeq	r7, [r1], -r0
   29970:	andeq	r7, r1, r8, asr #29
   29974:	andeq	r0, r0, lr, ror #11
   29978:	andeq	r7, r1, ip, lsl #9
   2997c:	andeq	r7, r1, r8, asr #23
   29980:	andeq	r7, r1, ip, lsr #31
   29984:	strdeq	r0, [r0], -r6
   29988:	andeq	r7, r1, r4, ror #8
   2998c:	andeq	r7, r1, r0, lsr #23
   29990:	andeq	r7, r1, r8, ror pc
   29994:	strdeq	r0, [r0], -r2

00029998 <flatcc_builder_table_add_union_vector@@Base>:
   29998:	push	{r4, r5, r6, r7, lr}
   2999c:	sub	sp, sp, #12
   299a0:	add	ip, sp, #8
   299a4:	stmdb	ip, {r2, r3}
   299a8:	ldr	r3, [r0, #32]
   299ac:	ldr	r4, [sp]
   299b0:	ldr	r6, [sp, #4]
   299b4:	ldrh	r3, [r3, #14]
   299b8:	cmp	r3, #3
   299bc:	bne	29a60 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   299c0:	clz	r3, r6
   299c4:	clz	r2, r4
   299c8:	lsr	r3, r3, #5
   299cc:	lsr	r2, r2, #5
   299d0:	cmp	r2, r3
   299d4:	beq	299f4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   299d8:	adds	r4, r4, #0
   299dc:	movne	r4, #1
   299e0:	cmp	r4, r3
   299e4:	mvnne	r0, #0
   299e8:	beq	29a88 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   299ec:	add	sp, sp, #12
   299f0:	pop	{r4, r5, r6, r7, pc}
   299f4:	cmp	r4, #0
   299f8:	moveq	r0, r4
   299fc:	beq	299ec <flatcc_builder_table_add_union_vector@@Base+0x54>
   29a00:	mov	r7, r1
   29a04:	sub	r1, r1, #1
   29a08:	mov	r5, r0
   29a0c:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   29a10:	cmp	r0, #0
   29a14:	beq	29ab0 <flatcc_builder_table_add_union_vector@@Base+0x118>
   29a18:	str	r4, [r0]
   29a1c:	mov	r1, r7
   29a20:	mov	r0, r5
   29a24:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   29a28:	cmp	r0, #0
   29a2c:	strne	r6, [r0]
   29a30:	movne	r0, #0
   29a34:	bne	299ec <flatcc_builder_table_add_union_vector@@Base+0x54>
   29a38:	ldr	r3, [pc, #152]	; 29ad8 <flatcc_builder_table_add_union_vector@@Base+0x140>
   29a3c:	ldr	r1, [pc, #152]	; 29adc <flatcc_builder_table_add_union_vector@@Base+0x144>
   29a40:	add	r3, pc, r3
   29a44:	ldr	r0, [pc, #148]	; 29ae0 <flatcc_builder_table_add_union_vector@@Base+0x148>
   29a48:	add	r3, r3, #1248	; 0x4e0
   29a4c:	ldr	r2, [pc, #144]	; 29ae4 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   29a50:	add	r3, r3, #12
   29a54:	add	r1, pc, r1
   29a58:	add	r0, pc, r0
   29a5c:	bl	14610 <__assert_fail@plt>
   29a60:	ldr	r3, [pc, #128]	; 29ae8 <flatcc_builder_table_add_union_vector@@Base+0x150>
   29a64:	ldr	r1, [pc, #128]	; 29aec <flatcc_builder_table_add_union_vector@@Base+0x154>
   29a68:	add	r3, pc, r3
   29a6c:	ldr	r0, [pc, #124]	; 29af0 <flatcc_builder_table_add_union_vector@@Base+0x158>
   29a70:	add	r3, r3, #1248	; 0x4e0
   29a74:	mov	r2, #1536	; 0x600
   29a78:	add	r3, r3, #12
   29a7c:	add	r1, pc, r1
   29a80:	add	r0, pc, r0
   29a84:	bl	14610 <__assert_fail@plt>
   29a88:	ldr	r3, [pc, #100]	; 29af4 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   29a8c:	ldr	r1, [pc, #100]	; 29af8 <flatcc_builder_table_add_union_vector@@Base+0x160>
   29a90:	add	r3, pc, r3
   29a94:	ldr	r0, [pc, #96]	; 29afc <flatcc_builder_table_add_union_vector@@Base+0x164>
   29a98:	add	r3, r3, #1248	; 0x4e0
   29a9c:	ldr	r2, [pc, #92]	; 29b00 <flatcc_builder_table_add_union_vector@@Base+0x168>
   29aa0:	add	r3, r3, #12
   29aa4:	add	r1, pc, r1
   29aa8:	add	r0, pc, r0
   29aac:	bl	14610 <__assert_fail@plt>
   29ab0:	ldr	r3, [pc, #76]	; 29b04 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   29ab4:	ldr	r1, [pc, #76]	; 29b08 <flatcc_builder_table_add_union_vector@@Base+0x170>
   29ab8:	add	r3, pc, r3
   29abc:	ldr	r0, [pc, #72]	; 29b0c <flatcc_builder_table_add_union_vector@@Base+0x174>
   29ac0:	add	r3, r3, #1248	; 0x4e0
   29ac4:	ldr	r2, [pc, #68]	; 29b10 <flatcc_builder_table_add_union_vector@@Base+0x178>
   29ac8:	add	r3, r3, #12
   29acc:	add	r1, pc, r1
   29ad0:	add	r0, pc, r0
   29ad4:	bl	14610 <__assert_fail@plt>
   29ad8:	andeq	r7, r1, ip, asr r3
   29adc:	muleq	r1, r8, sl
   29ae0:	andeq	r7, r1, r0, ror lr
   29ae4:	andeq	r0, r0, r8, lsl #12
   29ae8:	andeq	r7, r1, r4, lsr r3
   29aec:	andeq	r7, r1, r0, ror sl
   29af0:	andeq	r7, r1, r8, asr #26
   29af4:	andeq	r7, r1, ip, lsl #6
   29af8:	andeq	r7, r1, r8, asr #20
   29afc:	andeq	r7, r1, r8, lsr lr
   29b00:	andeq	r0, r0, r1, lsl #12
   29b04:	andeq	r7, r1, r4, ror #5
   29b08:	andeq	r7, r1, r0, lsr #20
   29b0c:	strdeq	r7, [r1], -r8
   29b10:	andeq	r0, r0, r4, lsl #12

00029b14 <flatcc_builder_push_buffer_alignment@@Base>:
   29b14:	mov	r3, r0
   29b18:	mov	r2, #4
   29b1c:	ldrh	r0, [r0, #128]	; 0x80
   29b20:	strh	r2, [r3, #128]	; 0x80
   29b24:	bx	lr

00029b28 <flatcc_builder_pop_buffer_alignment@@Base>:
   29b28:	ldrh	r3, [r0, #128]	; 0x80
   29b2c:	cmp	r3, r1
   29b30:	strhcc	r1, [r0, #128]	; 0x80
   29b34:	bx	lr

00029b38 <flatcc_builder_get_buffer_alignment@@Base>:
   29b38:	ldrh	r0, [r0, #128]	; 0x80
   29b3c:	bx	lr

00029b40 <flatcc_builder_set_vtable_clustering@@Base>:
   29b40:	clz	r1, r1
   29b44:	lsr	r1, r1, #5
   29b48:	str	r1, [r0, #180]	; 0xb4
   29b4c:	bx	lr

00029b50 <flatcc_builder_set_block_align@@Base>:
   29b50:	strh	r1, [r0, #132]	; 0x84
   29b54:	bx	lr

00029b58 <flatcc_builder_get_level@@Base>:
   29b58:	ldr	r0, [r0, #156]	; 0x9c
   29b5c:	bx	lr

00029b60 <flatcc_builder_set_max_level@@Base>:
   29b60:	ldr	r3, [r0, #160]	; 0xa0
   29b64:	str	r1, [r0, #176]	; 0xb0
   29b68:	cmp	r1, r3
   29b6c:	strgt	r1, [r0, #160]	; 0xa0
   29b70:	bx	lr

00029b74 <flatcc_builder_get_buffer_size@@Base>:
   29b74:	ldr	r2, [r0, #140]	; 0x8c
   29b78:	ldr	r0, [r0, #136]	; 0x88
   29b7c:	sub	r0, r2, r0
   29b80:	bx	lr

00029b84 <flatcc_builder_get_buffer_start@@Base>:
   29b84:	ldr	r0, [r0, #136]	; 0x88
   29b88:	bx	lr

00029b8c <flatcc_builder_get_buffer_end@@Base>:
   29b8c:	ldr	r0, [r0, #140]	; 0x8c
   29b90:	bx	lr

00029b94 <flatcc_builder_set_vtable_cache_limit@@Base>:
   29b94:	str	r1, [r0, #172]	; 0xac
   29b98:	bx	lr

00029b9c <flatcc_builder_set_identifier@@Base>:
   29b9c:	ldr	r3, [pc, #32]	; 29bc4 <flatcc_builder_set_identifier@@Base+0x28>
   29ba0:	cmp	r1, #0
   29ba4:	add	r3, pc, r3
   29ba8:	beq	29bb8 <flatcc_builder_set_identifier@@Base+0x1c>
   29bac:	ldr	r3, [r1]
   29bb0:	str	r3, [r0, #168]	; 0xa8
   29bb4:	bx	lr
   29bb8:	ldr	r2, [pc, #8]	; 29bc8 <flatcc_builder_set_identifier@@Base+0x2c>
   29bbc:	ldr	r1, [r3, r2]
   29bc0:	b	29bac <flatcc_builder_set_identifier@@Base+0x10>
   29bc4:	andeq	sl, r2, r4, asr r4
   29bc8:	andeq	r0, r0, r4, rrx

00029bcc <flatcc_builder_get_type@@Base>:
   29bcc:	ldr	r0, [r0, #32]
   29bd0:	cmp	r0, #0
   29bd4:	ldrhne	r0, [r0, #14]
   29bd8:	bx	lr

00029bdc <flatcc_builder_get_type_at@@Base>:
   29bdc:	cmp	r1, #0
   29be0:	ble	29c08 <flatcc_builder_get_type_at@@Base+0x2c>
   29be4:	ldr	r3, [r0, #156]	; 0x9c
   29be8:	cmp	r1, r3
   29bec:	bgt	29c08 <flatcc_builder_get_type_at@@Base+0x2c>
   29bf0:	sub	r1, r1, r3
   29bf4:	ldr	r3, [r0, #32]
   29bf8:	add	r1, r1, r1, lsl #3
   29bfc:	add	r1, r3, r1, lsl #2
   29c00:	ldrh	r0, [r1, #14]
   29c04:	bx	lr
   29c08:	mov	r0, #0
   29c0c:	bx	lr

00029c10 <flatcc_builder_get_direct_buffer@@Base>:
   29c10:	ldr	r3, [r0, #184]	; 0xb8
   29c14:	cmp	r3, #0
   29c18:	beq	29c2c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   29c1c:	ldr	r2, [r0, #188]	; 0xbc
   29c20:	ldr	r3, [r0, #192]	; 0xc0
   29c24:	cmp	r2, r3
   29c28:	beq	29c40 <flatcc_builder_get_direct_buffer@@Base+0x30>
   29c2c:	cmp	r1, #0
   29c30:	movne	r0, #0
   29c34:	strne	r0, [r1]
   29c38:	moveq	r0, r1
   29c3c:	bx	lr
   29c40:	cmp	r1, #0
   29c44:	ldrne	r3, [r0, #212]	; 0xd4
   29c48:	ldr	r0, [r0, #196]	; 0xc4
   29c4c:	strne	r3, [r1]
   29c50:	bx	lr

00029c54 <flatcc_builder_copy_buffer@@Base>:
   29c54:	ldr	r3, [r0, #184]	; 0xb8
   29c58:	cmp	r3, #0
   29c5c:	beq	29c9c <flatcc_builder_copy_buffer@@Base+0x48>
   29c60:	push	{r4, lr}
   29c64:	add	r0, r0, #188	; 0xbc
   29c68:	bl	2a36c <flatcc_emitter_copy_buffer@@Base>
   29c6c:	cmp	r0, #0
   29c70:	popne	{r4, pc}
   29c74:	ldr	r3, [pc, #40]	; 29ca4 <flatcc_builder_copy_buffer@@Base+0x50>
   29c78:	ldr	r1, [pc, #40]	; 29ca8 <flatcc_builder_copy_buffer@@Base+0x54>
   29c7c:	add	r3, pc, r3
   29c80:	ldr	r0, [pc, #36]	; 29cac <flatcc_builder_copy_buffer@@Base+0x58>
   29c84:	add	r3, r3, #1296	; 0x510
   29c88:	ldr	r2, [pc, #32]	; 29cb0 <flatcc_builder_copy_buffer@@Base+0x5c>
   29c8c:	add	r3, r3, #4
   29c90:	add	r1, pc, r1
   29c94:	add	r0, pc, r0
   29c98:	bl	14610 <__assert_fail@plt>
   29c9c:	mov	r0, r3
   29ca0:	bx	lr
   29ca4:	andeq	r7, r1, r0, lsr #2
   29ca8:	andeq	r7, r1, ip, asr r8
   29cac:	andeq	r7, r1, r4, ror ip
   29cb0:	andeq	r0, r0, r6, lsl #15

00029cb4 <flatcc_builder_finalize_buffer@@Base>:
   29cb4:	push	{r4, r5, r6, lr}
   29cb8:	mov	r5, r1
   29cbc:	mov	r6, r0
   29cc0:	bl	29b74 <flatcc_builder_get_buffer_size@@Base>
   29cc4:	cmp	r5, #0
   29cc8:	strne	r0, [r5]
   29ccc:	mov	r4, r0
   29cd0:	bl	14574 <malloc@plt>
   29cd4:	subs	r5, r0, #0
   29cd8:	beq	29cfc <flatcc_builder_finalize_buffer@@Base+0x48>
   29cdc:	mov	r2, r4
   29ce0:	mov	r0, r6
   29ce4:	mov	r1, r5
   29ce8:	bl	29c54 <flatcc_builder_copy_buffer@@Base>
   29cec:	cmp	r0, #0
   29cf0:	beq	29d20 <flatcc_builder_finalize_buffer@@Base+0x6c>
   29cf4:	mov	r0, r5
   29cf8:	pop	{r4, r5, r6, pc}
   29cfc:	ldr	r3, [pc, #64]	; 29d44 <flatcc_builder_finalize_buffer@@Base+0x90>
   29d00:	ldr	r1, [pc, #64]	; 29d48 <flatcc_builder_finalize_buffer@@Base+0x94>
   29d04:	ldr	r0, [pc, #64]	; 29d4c <flatcc_builder_finalize_buffer@@Base+0x98>
   29d08:	add	r3, pc, r3
   29d0c:	ldr	r2, [pc, #60]	; 29d50 <flatcc_builder_finalize_buffer@@Base+0x9c>
   29d10:	add	r3, r3, #1328	; 0x530
   29d14:	add	r1, pc, r1
   29d18:	add	r0, pc, r0
   29d1c:	bl	14610 <__assert_fail@plt>
   29d20:	ldr	r3, [pc, #44]	; 29d54 <flatcc_builder_finalize_buffer@@Base+0xa0>
   29d24:	ldr	r1, [pc, #44]	; 29d58 <flatcc_builder_finalize_buffer@@Base+0xa4>
   29d28:	ldr	r0, [pc, #44]	; 29d5c <flatcc_builder_finalize_buffer@@Base+0xa8>
   29d2c:	add	r3, pc, r3
   29d30:	ldr	r2, [pc, #40]	; 29d60 <flatcc_builder_finalize_buffer@@Base+0xac>
   29d34:	add	r3, r3, #1328	; 0x530
   29d38:	add	r1, pc, r1
   29d3c:	add	r0, pc, r0
   29d40:	bl	14610 <__assert_fail@plt>
   29d44:	muleq	r1, r4, r0
   29d48:	ldrdeq	r7, [r1], -r8
   29d4c:	andeq	r7, r1, ip, asr r8
   29d50:	muleq	r0, r8, r7
   29d54:	andeq	r7, r1, r0, ror r0
   29d58:			; <UNDEFINED> instruction: 0x000177b4
   29d5c:	andeq	r7, r1, r8, lsr r8
   29d60:	muleq	r0, ip, r7

00029d64 <flatcc_builder_finalize_aligned_buffer@@Base>:
   29d64:	push	{r4, r5, r6, r7, lr}
   29d68:	sub	sp, sp, #12
   29d6c:	mov	r6, r1
   29d70:	mov	r7, r0
   29d74:	bl	29b74 <flatcc_builder_get_buffer_size@@Base>
   29d78:	cmp	r6, #0
   29d7c:	strne	r0, [r6]
   29d80:	mov	r4, r0
   29d84:	mov	r0, r7
   29d88:	bl	29b38 <flatcc_builder_get_buffer_alignment@@Base>
   29d8c:	sub	r4, r4, #1
   29d90:	mov	r1, r0
   29d94:	rsb	r3, r0, #0
   29d98:	add	r4, r4, r0
   29d9c:	add	r0, sp, #8
   29da0:	cmp	r1, #4
   29da4:	and	r4, r4, r3
   29da8:	mov	r3, #0
   29dac:	movcc	r1, #4
   29db0:	mov	r2, r4
   29db4:	str	r3, [r0, #-4]!
   29db8:	bl	145b0 <posix_memalign@plt>
   29dbc:	cmp	r0, #0
   29dc0:	beq	29df0 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   29dc4:	ldr	r0, [sp, #4]
   29dc8:	cmp	r0, #0
   29dcc:	beq	29dd4 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   29dd0:	bl	14538 <free@plt>
   29dd4:	cmp	r6, #0
   29dd8:	moveq	r5, r6
   29ddc:	movne	r5, #0
   29de0:	strne	r5, [r6]
   29de4:	mov	r0, r5
   29de8:	add	sp, sp, #12
   29dec:	pop	{r4, r5, r6, r7, pc}
   29df0:	ldr	r5, [sp, #4]
   29df4:	cmp	r5, #0
   29df8:	beq	29dd4 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   29dfc:	mov	r2, r4
   29e00:	mov	r0, r7
   29e04:	mov	r1, r5
   29e08:	bl	29c54 <flatcc_builder_copy_buffer@@Base>
   29e0c:	cmp	r0, #0
   29e10:	bne	29de4 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   29e14:	mov	r0, r5
   29e18:	b	29dd0 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00029e1c <flatcc_builder_aligned_alloc@@Base>:
   29e1c:	push	{r4, lr}
   29e20:	sub	sp, sp, #8
   29e24:	add	r3, sp, #8
   29e28:	cmp	r0, #4
   29e2c:	mov	r4, #0
   29e30:	mov	r2, r1
   29e34:	str	r4, [r3, #-4]!
   29e38:	movcs	r1, r0
   29e3c:	movcc	r1, #4
   29e40:	mov	r0, r3
   29e44:	bl	145b0 <posix_memalign@plt>
   29e48:	cmp	r0, r4
   29e4c:	ldr	r0, [sp, #4]
   29e50:	beq	29e64 <flatcc_builder_aligned_alloc@@Base+0x48>
   29e54:	cmp	r0, #0
   29e58:	beq	29e64 <flatcc_builder_aligned_alloc@@Base+0x48>
   29e5c:	bl	14538 <free@plt>
   29e60:	mov	r0, r4
   29e64:	add	sp, sp, #8
   29e68:	pop	{r4, pc}

00029e6c <flatcc_builder_aligned_free@@Base>:
   29e6c:	b	14538 <free@plt>

00029e70 <flatcc_builder_get_emit_context@@Base>:
   29e70:	ldr	r0, [r0, #36]	; 0x24
   29e74:	bx	lr

00029e78 <flatcc_emitter_recycle_page@@Base>:
   29e78:	ldr	r3, [r0]
   29e7c:	cmp	r3, r1
   29e80:	beq	29ec8 <flatcc_emitter_recycle_page@@Base+0x50>
   29e84:	ldr	r2, [r0, #4]
   29e88:	cmp	r1, r2
   29e8c:	beq	29ec8 <flatcc_emitter_recycle_page@@Base+0x50>
   29e90:	ldr	ip, [r1, #2944]	; 0xb80
   29e94:	ldr	r2, [r1, #2948]	; 0xb84
   29e98:	push	{lr}		; (str lr, [sp, #-4]!)
   29e9c:	mov	r0, #0
   29ea0:	str	r2, [ip, #2948]	; 0xb84
   29ea4:	ldr	r2, [r3, #2948]	; 0xb84
   29ea8:	ldr	lr, [r1, #2948]	; 0xb84
   29eac:	str	ip, [lr, #2944]	; 0xb80
   29eb0:	str	r3, [r1, #2944]	; 0xb80
   29eb4:	str	r2, [r1, #2948]	; 0xb84
   29eb8:	str	r1, [r2, #2944]	; 0xb80
   29ebc:	ldr	r3, [r1, #2944]	; 0xb80
   29ec0:	str	r1, [r3, #2948]	; 0xb84
   29ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   29ec8:	mvn	r0, #0
   29ecc:	bx	lr

00029ed0 <flatcc_emitter_reset@@Base>:
   29ed0:	ldr	r2, [r0]
   29ed4:	cmp	r2, #0
   29ed8:	bxeq	lr
   29edc:	ldr	r3, [r0, #32]
   29ee0:	mov	r1, #1472	; 0x5c0
   29ee4:	push	{r4, lr}
   29ee8:	cmp	r3, #0
   29eec:	str	r1, [r0, #12]
   29ef0:	str	r1, [r0, #20]
   29ef4:	ldr	r1, [r0, #24]
   29ef8:	add	ip, r2, #1472	; 0x5c0
   29efc:	moveq	r3, r1
   29f00:	stmib	r0, {r2, ip}
   29f04:	str	ip, [r0, #16]
   29f08:	add	ip, r3, r3, lsl #1
   29f0c:	lsr	r3, r1, #2
   29f10:	add	r3, r3, ip, lsr #2
   29f14:	ldr	ip, [r0, #28]
   29f18:	ldr	lr, [pc, #104]	; 29f88 <flatcc_emitter_reset@@Base+0xb8>
   29f1c:	cmp	ip, r3, lsl #1
   29f20:	mov	r1, #0
   29f24:	str	lr, [r2, #2952]	; 0xb88
   29f28:	str	r3, [r0, #32]
   29f2c:	str	r1, [r0, #24]
   29f30:	popls	{r4, pc}
   29f34:	ldr	r3, [r2, #2944]	; 0xb80
   29f38:	mov	r4, r0
   29f3c:	cmp	r2, r3
   29f40:	popeq	{r4, pc}
   29f44:	ldr	r1, [r3, #2944]	; 0xb80
   29f48:	mov	r0, r3
   29f4c:	str	r1, [r2, #2944]	; 0xb80
   29f50:	ldr	r3, [r3, #2944]	; 0xb80
   29f54:	str	r2, [r3, #2948]	; 0xb84
   29f58:	bl	14538 <free@plt>
   29f5c:	ldr	r3, [r4, #28]
   29f60:	ldr	r2, [r4, #32]
   29f64:	sub	r3, r3, #2944	; 0xb80
   29f68:	str	r3, [r4, #28]
   29f6c:	cmp	r3, r2, lsl #1
   29f70:	popls	{r4, pc}
   29f74:	ldm	r4, {r1, r2}
   29f78:	ldr	r3, [r2, #2944]	; 0xb80
   29f7c:	cmp	r3, r1
   29f80:	bne	29f44 <flatcc_emitter_reset@@Base+0x74>
   29f84:	pop	{r4, pc}
   29f88:			; <UNDEFINED> instruction: 0xfffffa40

00029f8c <flatcc_emitter_clear@@Base>:
   29f8c:	ldr	r3, [r0]
   29f90:	cmp	r3, #0
   29f94:	bxeq	lr
   29f98:	ldr	r2, [r3, #2948]	; 0xb84
   29f9c:	mov	r1, #0
   29fa0:	push	{r4, r5, r6, lr}
   29fa4:	mov	r5, r0
   29fa8:	str	r1, [r2, #2944]	; 0xb80
   29fac:	ldr	r4, [r3, #2944]	; 0xb80
   29fb0:	cmp	r4, r1
   29fb4:	bne	29fc0 <flatcc_emitter_clear@@Base+0x34>
   29fb8:	b	29ff0 <flatcc_emitter_clear@@Base+0x64>
   29fbc:	mov	r4, r3
   29fc0:	ldr	r0, [r4, #2948]	; 0xb84
   29fc4:	bl	14538 <free@plt>
   29fc8:	ldr	r3, [r4, #2944]	; 0xb80
   29fcc:	cmp	r3, #0
   29fd0:	bne	29fbc <flatcc_emitter_clear@@Base+0x30>
   29fd4:	mov	r0, r4
   29fd8:	bl	14538 <free@plt>
   29fdc:	mov	r0, r5
   29fe0:	mov	r2, #36	; 0x24
   29fe4:	mov	r1, #0
   29fe8:	pop	{r4, r5, r6, lr}
   29fec:	b	145bc <memset@plt>
   29ff0:	mov	r4, r3
   29ff4:	b	29fd4 <flatcc_emitter_clear@@Base+0x48>

00029ff8 <flatcc_emitter@@Base>:
   29ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ffc:	sub	sp, sp, #12
   2a000:	mov	r4, r0
   2a004:	ldr	ip, [sp, #48]	; 0x30
   2a008:	ldr	r0, [r0, #24]
   2a00c:	cmp	r3, #0
   2a010:	add	r0, r0, ip
   2a014:	str	r0, [r4, #24]
   2a018:	blt	2a1dc <flatcc_emitter@@Base+0x1e4>
   2a01c:	ldr	r0, [r4, #20]
   2a020:	cmp	ip, r0
   2a024:	bls	2a0b0 <flatcc_emitter@@Base+0xb8>
   2a028:	cmp	r2, #0
   2a02c:	addne	r7, r1, #8
   2a030:	movne	r8, r2
   2a034:	movne	r9, #2944	; 0xb80
   2a038:	beq	2a0a4 <flatcc_emitter@@Base+0xac>
   2a03c:	ldr	r6, [r7, #-4]
   2a040:	ldr	sl, [r7, #-8]
   2a044:	cmp	r6, #0
   2a048:	beq	2a098 <flatcc_emitter@@Base+0xa0>
   2a04c:	cmp	r0, r6
   2a050:	mov	r5, r0
   2a054:	bcs	2a0f8 <flatcc_emitter@@Base+0x100>
   2a058:	cmp	r0, #0
   2a05c:	beq	2a104 <flatcc_emitter@@Base+0x10c>
   2a060:	sub	r6, r6, r0
   2a064:	mov	r1, sl
   2a068:	mov	r2, r5
   2a06c:	ldr	r0, [r4, #16]
   2a070:	bl	14544 <memcpy@plt>
   2a074:	ldr	r3, [r4, #16]
   2a078:	ldr	r0, [r4, #20]
   2a07c:	add	r3, r3, r5
   2a080:	sub	r0, r0, r5
   2a084:	cmp	r6, #0
   2a088:	add	sl, sl, r5
   2a08c:	str	r3, [r4, #16]
   2a090:	str	r0, [r4, #20]
   2a094:	bne	2a04c <flatcc_emitter@@Base+0x54>
   2a098:	subs	r8, r8, #1
   2a09c:	add	r7, r7, #8
   2a0a0:	bne	2a03c <flatcc_emitter@@Base+0x44>
   2a0a4:	mov	r0, #0
   2a0a8:	add	sp, sp, #12
   2a0ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0b0:	ldr	r3, [r4, #16]
   2a0b4:	sub	r0, r0, ip
   2a0b8:	add	ip, r3, ip
   2a0bc:	str	r0, [r4, #20]
   2a0c0:	str	ip, [r4, #16]
   2a0c4:	cmp	r2, #0
   2a0c8:	addne	r4, r1, #8
   2a0cc:	movne	r7, r2
   2a0d0:	beq	2a0a4 <flatcc_emitter@@Base+0xac>
   2a0d4:	ldmdb	r4, {r1, r2}
   2a0d8:	mov	r0, r3
   2a0dc:	bl	14544 <memcpy@plt>
   2a0e0:	ldr	r2, [r4, #-4]
   2a0e4:	subs	r7, r7, #1
   2a0e8:	add	r4, r4, #8
   2a0ec:	add	r3, r0, r2
   2a0f0:	bne	2a0d4 <flatcc_emitter@@Base+0xdc>
   2a0f4:	b	2a0a4 <flatcc_emitter@@Base+0xac>
   2a0f8:	mov	r5, r6
   2a0fc:	mov	r6, #0
   2a100:	b	2a064 <flatcc_emitter@@Base+0x6c>
   2a104:	ldr	fp, [r4, #4]
   2a108:	cmp	fp, #0
   2a10c:	beq	2a17c <flatcc_emitter@@Base+0x184>
   2a110:	ldr	r5, [fp, #2944]	; 0xb80
   2a114:	ldr	r3, [r4]
   2a118:	cmp	r5, r3
   2a11c:	beq	2a144 <flatcc_emitter@@Base+0x14c>
   2a120:	str	r5, [r4, #4]
   2a124:	ldr	r3, [r5, #2948]	; 0xb84
   2a128:	mov	r0, r9
   2a12c:	str	r5, [r4, #16]
   2a130:	ldr	r3, [r3, #2952]	; 0xb88
   2a134:	str	r9, [r4, #20]
   2a138:	add	r3, r3, #2944	; 0xb80
   2a13c:	str	r3, [r5, #2952]	; 0xb88
   2a140:	b	2a04c <flatcc_emitter@@Base+0x54>
   2a144:	ldr	r0, [pc, #540]	; 2a368 <flatcc_emitter@@Base+0x370>
   2a148:	bl	14574 <malloc@plt>
   2a14c:	cmp	r0, #0
   2a150:	beq	2a18c <flatcc_emitter@@Base+0x194>
   2a154:	ldr	r3, [r4, #28]
   2a158:	str	r5, [r0, #2944]	; 0xb80
   2a15c:	add	r3, r3, #2944	; 0xb80
   2a160:	str	fp, [r0, #2948]	; 0xb84
   2a164:	str	r3, [r4, #28]
   2a168:	str	r0, [r5, #2948]	; 0xb84
   2a16c:	str	r0, [fp, #2944]	; 0xb80
   2a170:	mov	r5, r0
   2a174:	str	r0, [r4, #4]
   2a178:	b	2a124 <flatcc_emitter@@Base+0x12c>
   2a17c:	ldr	r0, [pc, #484]	; 2a368 <flatcc_emitter@@Base+0x370>
   2a180:	bl	14574 <malloc@plt>
   2a184:	cmp	r0, #0
   2a188:	bne	2a198 <flatcc_emitter@@Base+0x1a0>
   2a18c:	mvn	r0, #0
   2a190:	add	sp, sp, #12
   2a194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a198:	mov	r2, #1472	; 0x5c0
   2a19c:	ldr	r3, [r4, #28]
   2a1a0:	str	r2, [r4, #12]
   2a1a4:	str	r2, [r4, #20]
   2a1a8:	sub	r2, r2, #2944	; 0xb80
   2a1ac:	str	r2, [r0, #2952]	; 0xb88
   2a1b0:	str	r0, [r4]
   2a1b4:	add	r3, r3, #2944	; 0xb80
   2a1b8:	str	r0, [r4, #4]
   2a1bc:	str	r0, [r0, #2944]	; 0xb80
   2a1c0:	str	r0, [r0, #2948]	; 0xb84
   2a1c4:	add	r0, r0, #1472	; 0x5c0
   2a1c8:	str	r0, [r4, #8]
   2a1cc:	str	r0, [r4, #16]
   2a1d0:	str	r3, [r4, #28]
   2a1d4:	mov	r0, #1472	; 0x5c0
   2a1d8:	b	2a04c <flatcc_emitter@@Base+0x54>
   2a1dc:	ldr	r0, [r4, #12]
   2a1e0:	cmp	ip, r0
   2a1e4:	bls	2a264 <flatcc_emitter@@Base+0x26c>
   2a1e8:	add	r6, r1, r2, lsl #3
   2a1ec:	mov	r7, r2
   2a1f0:	mov	r9, #2944	; 0xb80
   2a1f4:	mov	r8, #0
   2a1f8:	cmp	r7, #0
   2a1fc:	beq	2a0a4 <flatcc_emitter@@Base+0xac>
   2a200:	ldr	r5, [r6, #-4]
   2a204:	ldr	sl, [r6, #-8]
   2a208:	cmp	r5, #0
   2a20c:	add	sl, sl, r5
   2a210:	beq	2a258 <flatcc_emitter@@Base+0x260>
   2a214:	ldr	r2, [r4, #12]
   2a218:	cmp	r2, r5
   2a21c:	bcs	2a27c <flatcc_emitter@@Base+0x284>
   2a220:	cmp	r2, #0
   2a224:	beq	2a28c <flatcc_emitter@@Base+0x294>
   2a228:	sub	r5, r5, r2
   2a22c:	mov	r1, r8
   2a230:	ldr	r0, [r4, #8]
   2a234:	rsb	r3, r2, #0
   2a238:	add	r0, r0, r3
   2a23c:	add	sl, sl, r3
   2a240:	str	r1, [r4, #12]
   2a244:	str	r0, [r4, #8]
   2a248:	mov	r1, sl
   2a24c:	bl	14544 <memcpy@plt>
   2a250:	cmp	r5, #0
   2a254:	bne	2a214 <flatcc_emitter@@Base+0x21c>
   2a258:	sub	r6, r6, #8
   2a25c:	sub	r7, r7, #1
   2a260:	b	2a1f8 <flatcc_emitter@@Base+0x200>
   2a264:	ldr	r3, [r4, #8]
   2a268:	sub	r0, r0, ip
   2a26c:	sub	r3, r3, ip
   2a270:	str	r0, [r4, #12]
   2a274:	str	r3, [r4, #8]
   2a278:	b	2a0c4 <flatcc_emitter@@Base+0xcc>
   2a27c:	sub	r1, r2, r5
   2a280:	mov	r2, r5
   2a284:	mov	r5, #0
   2a288:	b	2a230 <flatcc_emitter@@Base+0x238>
   2a28c:	ldr	r3, [r4]
   2a290:	cmp	r3, #0
   2a294:	beq	2a318 <flatcc_emitter@@Base+0x320>
   2a298:	ldr	fp, [r3, #2948]	; 0xb84
   2a29c:	ldr	r2, [r4, #4]
   2a2a0:	cmp	fp, r2
   2a2a4:	beq	2a2d8 <flatcc_emitter@@Base+0x2e0>
   2a2a8:	ldr	r3, [r3, #2952]	; 0xb88
   2a2ac:	sub	r3, r3, #2944	; 0xb80
   2a2b0:	str	r3, [fp, #2952]	; 0xb88
   2a2b4:	str	fp, [r4]
   2a2b8:	ldr	r3, [fp, #2944]	; 0xb80
   2a2bc:	add	r2, fp, #2944	; 0xb80
   2a2c0:	str	r9, [r4, #12]
   2a2c4:	ldr	r3, [r3, #2952]	; 0xb88
   2a2c8:	str	r2, [r4, #8]
   2a2cc:	sub	r3, r3, #2944	; 0xb80
   2a2d0:	str	r3, [fp, #2952]	; 0xb88
   2a2d4:	b	2a214 <flatcc_emitter@@Base+0x21c>
   2a2d8:	ldr	r0, [pc, #136]	; 2a368 <flatcc_emitter@@Base+0x370>
   2a2dc:	str	r3, [sp, #4]
   2a2e0:	bl	14574 <malloc@plt>
   2a2e4:	ldr	r3, [sp, #4]
   2a2e8:	cmp	r0, #0
   2a2ec:	beq	2a18c <flatcc_emitter@@Base+0x194>
   2a2f0:	ldr	r2, [r4, #28]
   2a2f4:	str	fp, [r0, #2948]	; 0xb84
   2a2f8:	add	r2, r2, #2944	; 0xb80
   2a2fc:	str	r3, [r0, #2944]	; 0xb80
   2a300:	str	r2, [r4, #28]
   2a304:	str	r0, [r3, #2948]	; 0xb84
   2a308:	str	r0, [fp, #2944]	; 0xb80
   2a30c:	str	r0, [r4]
   2a310:	mov	fp, r0
   2a314:	b	2a2b8 <flatcc_emitter@@Base+0x2c0>
   2a318:	ldr	r0, [pc, #72]	; 2a368 <flatcc_emitter@@Base+0x370>
   2a31c:	bl	14574 <malloc@plt>
   2a320:	cmp	r0, #0
   2a324:	beq	2a18c <flatcc_emitter@@Base+0x194>
   2a328:	mov	r2, #1472	; 0x5c0
   2a32c:	ldr	r3, [r4, #28]
   2a330:	str	r2, [r4, #12]
   2a334:	str	r2, [r4, #20]
   2a338:	sub	r2, r2, #2944	; 0xb80
   2a33c:	str	r2, [r0, #2952]	; 0xb88
   2a340:	str	r0, [r4]
   2a344:	add	r3, r3, #2944	; 0xb80
   2a348:	str	r0, [r4, #4]
   2a34c:	str	r0, [r0, #2944]	; 0xb80
   2a350:	str	r0, [r0, #2948]	; 0xb84
   2a354:	add	r0, r0, #1472	; 0x5c0
   2a358:	str	r0, [r4, #8]
   2a35c:	str	r0, [r4, #16]
   2a360:	str	r3, [r4, #28]
   2a364:	b	2a214 <flatcc_emitter@@Base+0x21c>
   2a368:	andeq	r0, r0, ip, lsl #23

0002a36c <flatcc_emitter_copy_buffer@@Base>:
   2a36c:	ldr	ip, [r0, #24]
   2a370:	cmp	ip, r2
   2a374:	bhi	2a410 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2a378:	ldr	r2, [r0]
   2a37c:	cmp	r2, #0
   2a380:	beq	2a410 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2a384:	mov	r3, r1
   2a388:	ldr	r1, [r0, #4]
   2a38c:	push	{r4, r5, r6, lr}
   2a390:	cmp	r2, r1
   2a394:	mov	r5, r0
   2a398:	beq	2a41c <flatcc_emitter_copy_buffer@@Base+0xb0>
   2a39c:	ldr	r4, [r0, #12]
   2a3a0:	ldr	r1, [r5, #8]
   2a3a4:	rsb	r4, r4, #2944	; 0xb80
   2a3a8:	mov	r2, r4
   2a3ac:	mov	r0, r3
   2a3b0:	bl	14544 <memcpy@plt>
   2a3b4:	ldr	r2, [r5]
   2a3b8:	ldr	r1, [r5, #4]
   2a3bc:	add	r3, r0, r4
   2a3c0:	ldr	r4, [r2, #2944]	; 0xb80
   2a3c4:	cmp	r4, r1
   2a3c8:	beq	2a3f4 <flatcc_emitter_copy_buffer@@Base+0x88>
   2a3cc:	mov	r6, #2944	; 0xb80
   2a3d0:	mov	r1, r4
   2a3d4:	mov	r0, r3
   2a3d8:	mov	r2, r6
   2a3dc:	bl	14544 <memcpy@plt>
   2a3e0:	ldr	r4, [r4, #2944]	; 0xb80
   2a3e4:	ldr	r1, [r5, #4]
   2a3e8:	cmp	r1, r4
   2a3ec:	add	r3, r0, #2944	; 0xb80
   2a3f0:	bne	2a3d0 <flatcc_emitter_copy_buffer@@Base+0x64>
   2a3f4:	ldr	r2, [r5, #20]
   2a3f8:	mov	r0, r3
   2a3fc:	rsb	r2, r2, #2944	; 0xb80
   2a400:	bl	14544 <memcpy@plt>
   2a404:	mov	r3, r0
   2a408:	mov	r0, r3
   2a40c:	pop	{r4, r5, r6, pc}
   2a410:	mov	r3, #0
   2a414:	mov	r0, r3
   2a418:	bx	lr
   2a41c:	ldr	r1, [r0, #8]
   2a420:	mov	r2, ip
   2a424:	mov	r0, r3
   2a428:	bl	14544 <memcpy@plt>
   2a42c:	mov	r3, r0
   2a430:	b	2a408 <flatcc_emitter_copy_buffer@@Base+0x9c>
   2a434:	add	r1, r1, #2
   2a438:	ldrh	ip, [r0, #22]
   2a43c:	lsl	r1, r1, #1
   2a440:	uxth	r1, r1
   2a444:	cmp	ip, r1
   2a448:	bls	2a474 <flatcc_emitter_copy_buffer@@Base+0x108>
   2a44c:	ldr	ip, [r0, #12]
   2a450:	ldrh	r1, [ip, r1]
   2a454:	cmp	r1, #0
   2a458:	beq	2a474 <flatcc_emitter_copy_buffer@@Base+0x108>
   2a45c:	ldrh	r2, [r0, #20]
   2a460:	add	ip, r1, #4
   2a464:	cmp	ip, r2
   2a468:	bls	2a48c <flatcc_emitter_copy_buffer@@Base+0x120>
   2a46c:	mov	r0, #13
   2a470:	bx	lr
   2a474:	mov	r1, #0
   2a478:	cmp	r2, r1
   2a47c:	movne	r0, #4
   2a480:	moveq	r0, r1
   2a484:	str	r1, [r3]
   2a488:	bx	lr
   2a48c:	ldr	r2, [r0, #16]
   2a490:	add	r1, r1, r2
   2a494:	ands	r0, r1, #3
   2a498:	beq	2a4a4 <flatcc_emitter_copy_buffer@@Base+0x138>
   2a49c:	mov	r0, #12
   2a4a0:	bx	lr
   2a4a4:	str	r1, [r3]
   2a4a8:	bx	lr

0002a4ac <flatcc_verify_error_string@@Base>:
   2a4ac:	cmp	r0, #36	; 0x24
   2a4b0:	addls	pc, pc, r0, lsl #2
   2a4b4:	b	2a708 <flatcc_verify_error_string@@Base+0x25c>
   2a4b8:	b	2a54c <flatcc_verify_error_string@@Base+0xa0>
   2a4bc:	b	2a6fc <flatcc_verify_error_string@@Base+0x250>
   2a4c0:	b	2a6f0 <flatcc_verify_error_string@@Base+0x244>
   2a4c4:	b	2a6e4 <flatcc_verify_error_string@@Base+0x238>
   2a4c8:	b	2a6d8 <flatcc_verify_error_string@@Base+0x22c>
   2a4cc:	b	2a6cc <flatcc_verify_error_string@@Base+0x220>
   2a4d0:	b	2a6c0 <flatcc_verify_error_string@@Base+0x214>
   2a4d4:	b	2a6b4 <flatcc_verify_error_string@@Base+0x208>
   2a4d8:	b	2a6a8 <flatcc_verify_error_string@@Base+0x1fc>
   2a4dc:	b	2a69c <flatcc_verify_error_string@@Base+0x1f0>
   2a4e0:	b	2a690 <flatcc_verify_error_string@@Base+0x1e4>
   2a4e4:	b	2a684 <flatcc_verify_error_string@@Base+0x1d8>
   2a4e8:	b	2a678 <flatcc_verify_error_string@@Base+0x1cc>
   2a4ec:	b	2a66c <flatcc_verify_error_string@@Base+0x1c0>
   2a4f0:	b	2a660 <flatcc_verify_error_string@@Base+0x1b4>
   2a4f4:	b	2a654 <flatcc_verify_error_string@@Base+0x1a8>
   2a4f8:	b	2a648 <flatcc_verify_error_string@@Base+0x19c>
   2a4fc:	b	2a63c <flatcc_verify_error_string@@Base+0x190>
   2a500:	b	2a630 <flatcc_verify_error_string@@Base+0x184>
   2a504:	b	2a624 <flatcc_verify_error_string@@Base+0x178>
   2a508:	b	2a618 <flatcc_verify_error_string@@Base+0x16c>
   2a50c:	b	2a60c <flatcc_verify_error_string@@Base+0x160>
   2a510:	b	2a600 <flatcc_verify_error_string@@Base+0x154>
   2a514:	b	2a5f4 <flatcc_verify_error_string@@Base+0x148>
   2a518:	b	2a5e8 <flatcc_verify_error_string@@Base+0x13c>
   2a51c:	b	2a5dc <flatcc_verify_error_string@@Base+0x130>
   2a520:	b	2a5d0 <flatcc_verify_error_string@@Base+0x124>
   2a524:	b	2a5c4 <flatcc_verify_error_string@@Base+0x118>
   2a528:	b	2a5b8 <flatcc_verify_error_string@@Base+0x10c>
   2a52c:	b	2a5ac <flatcc_verify_error_string@@Base+0x100>
   2a530:	b	2a5a0 <flatcc_verify_error_string@@Base+0xf4>
   2a534:	b	2a594 <flatcc_verify_error_string@@Base+0xe8>
   2a538:	b	2a588 <flatcc_verify_error_string@@Base+0xdc>
   2a53c:	b	2a57c <flatcc_verify_error_string@@Base+0xd0>
   2a540:	b	2a570 <flatcc_verify_error_string@@Base+0xc4>
   2a544:	b	2a564 <flatcc_verify_error_string@@Base+0xb8>
   2a548:	b	2a558 <flatcc_verify_error_string@@Base+0xac>
   2a54c:	ldr	r0, [pc, #448]	; 2a714 <flatcc_verify_error_string@@Base+0x268>
   2a550:	add	r0, pc, r0
   2a554:	bx	lr
   2a558:	ldr	r0, [pc, #440]	; 2a718 <flatcc_verify_error_string@@Base+0x26c>
   2a55c:	add	r0, pc, r0
   2a560:	bx	lr
   2a564:	ldr	r0, [pc, #432]	; 2a71c <flatcc_verify_error_string@@Base+0x270>
   2a568:	add	r0, pc, r0
   2a56c:	bx	lr
   2a570:	ldr	r0, [pc, #424]	; 2a720 <flatcc_verify_error_string@@Base+0x274>
   2a574:	add	r0, pc, r0
   2a578:	bx	lr
   2a57c:	ldr	r0, [pc, #416]	; 2a724 <flatcc_verify_error_string@@Base+0x278>
   2a580:	add	r0, pc, r0
   2a584:	bx	lr
   2a588:	ldr	r0, [pc, #408]	; 2a728 <flatcc_verify_error_string@@Base+0x27c>
   2a58c:	add	r0, pc, r0
   2a590:	bx	lr
   2a594:	ldr	r0, [pc, #400]	; 2a72c <flatcc_verify_error_string@@Base+0x280>
   2a598:	add	r0, pc, r0
   2a59c:	bx	lr
   2a5a0:	ldr	r0, [pc, #392]	; 2a730 <flatcc_verify_error_string@@Base+0x284>
   2a5a4:	add	r0, pc, r0
   2a5a8:	bx	lr
   2a5ac:	ldr	r0, [pc, #384]	; 2a734 <flatcc_verify_error_string@@Base+0x288>
   2a5b0:	add	r0, pc, r0
   2a5b4:	bx	lr
   2a5b8:	ldr	r0, [pc, #376]	; 2a738 <flatcc_verify_error_string@@Base+0x28c>
   2a5bc:	add	r0, pc, r0
   2a5c0:	bx	lr
   2a5c4:	ldr	r0, [pc, #368]	; 2a73c <flatcc_verify_error_string@@Base+0x290>
   2a5c8:	add	r0, pc, r0
   2a5cc:	bx	lr
   2a5d0:	ldr	r0, [pc, #360]	; 2a740 <flatcc_verify_error_string@@Base+0x294>
   2a5d4:	add	r0, pc, r0
   2a5d8:	bx	lr
   2a5dc:	ldr	r0, [pc, #352]	; 2a744 <flatcc_verify_error_string@@Base+0x298>
   2a5e0:	add	r0, pc, r0
   2a5e4:	bx	lr
   2a5e8:	ldr	r0, [pc, #344]	; 2a748 <flatcc_verify_error_string@@Base+0x29c>
   2a5ec:	add	r0, pc, r0
   2a5f0:	bx	lr
   2a5f4:	ldr	r0, [pc, #336]	; 2a74c <flatcc_verify_error_string@@Base+0x2a0>
   2a5f8:	add	r0, pc, r0
   2a5fc:	bx	lr
   2a600:	ldr	r0, [pc, #328]	; 2a750 <flatcc_verify_error_string@@Base+0x2a4>
   2a604:	add	r0, pc, r0
   2a608:	bx	lr
   2a60c:	ldr	r0, [pc, #320]	; 2a754 <flatcc_verify_error_string@@Base+0x2a8>
   2a610:	add	r0, pc, r0
   2a614:	bx	lr
   2a618:	ldr	r0, [pc, #312]	; 2a758 <flatcc_verify_error_string@@Base+0x2ac>
   2a61c:	add	r0, pc, r0
   2a620:	bx	lr
   2a624:	ldr	r0, [pc, #304]	; 2a75c <flatcc_verify_error_string@@Base+0x2b0>
   2a628:	add	r0, pc, r0
   2a62c:	bx	lr
   2a630:	ldr	r0, [pc, #296]	; 2a760 <flatcc_verify_error_string@@Base+0x2b4>
   2a634:	add	r0, pc, r0
   2a638:	bx	lr
   2a63c:	ldr	r0, [pc, #288]	; 2a764 <flatcc_verify_error_string@@Base+0x2b8>
   2a640:	add	r0, pc, r0
   2a644:	bx	lr
   2a648:	ldr	r0, [pc, #280]	; 2a768 <flatcc_verify_error_string@@Base+0x2bc>
   2a64c:	add	r0, pc, r0
   2a650:	bx	lr
   2a654:	ldr	r0, [pc, #272]	; 2a76c <flatcc_verify_error_string@@Base+0x2c0>
   2a658:	add	r0, pc, r0
   2a65c:	bx	lr
   2a660:	ldr	r0, [pc, #264]	; 2a770 <flatcc_verify_error_string@@Base+0x2c4>
   2a664:	add	r0, pc, r0
   2a668:	bx	lr
   2a66c:	ldr	r0, [pc, #256]	; 2a774 <flatcc_verify_error_string@@Base+0x2c8>
   2a670:	add	r0, pc, r0
   2a674:	bx	lr
   2a678:	ldr	r0, [pc, #248]	; 2a778 <flatcc_verify_error_string@@Base+0x2cc>
   2a67c:	add	r0, pc, r0
   2a680:	bx	lr
   2a684:	ldr	r0, [pc, #240]	; 2a77c <flatcc_verify_error_string@@Base+0x2d0>
   2a688:	add	r0, pc, r0
   2a68c:	bx	lr
   2a690:	ldr	r0, [pc, #232]	; 2a780 <flatcc_verify_error_string@@Base+0x2d4>
   2a694:	add	r0, pc, r0
   2a698:	bx	lr
   2a69c:	ldr	r0, [pc, #224]	; 2a784 <flatcc_verify_error_string@@Base+0x2d8>
   2a6a0:	add	r0, pc, r0
   2a6a4:	bx	lr
   2a6a8:	ldr	r0, [pc, #216]	; 2a788 <flatcc_verify_error_string@@Base+0x2dc>
   2a6ac:	add	r0, pc, r0
   2a6b0:	bx	lr
   2a6b4:	ldr	r0, [pc, #208]	; 2a78c <flatcc_verify_error_string@@Base+0x2e0>
   2a6b8:	add	r0, pc, r0
   2a6bc:	bx	lr
   2a6c0:	ldr	r0, [pc, #200]	; 2a790 <flatcc_verify_error_string@@Base+0x2e4>
   2a6c4:	add	r0, pc, r0
   2a6c8:	bx	lr
   2a6cc:	ldr	r0, [pc, #192]	; 2a794 <flatcc_verify_error_string@@Base+0x2e8>
   2a6d0:	add	r0, pc, r0
   2a6d4:	bx	lr
   2a6d8:	ldr	r0, [pc, #184]	; 2a798 <flatcc_verify_error_string@@Base+0x2ec>
   2a6dc:	add	r0, pc, r0
   2a6e0:	bx	lr
   2a6e4:	ldr	r0, [pc, #176]	; 2a79c <flatcc_verify_error_string@@Base+0x2f0>
   2a6e8:	add	r0, pc, r0
   2a6ec:	bx	lr
   2a6f0:	ldr	r0, [pc, #168]	; 2a7a0 <flatcc_verify_error_string@@Base+0x2f4>
   2a6f4:	add	r0, pc, r0
   2a6f8:	bx	lr
   2a6fc:	ldr	r0, [pc, #160]	; 2a7a4 <flatcc_verify_error_string@@Base+0x2f8>
   2a700:	add	r0, pc, r0
   2a704:	bx	lr
   2a708:	ldr	r0, [pc, #152]	; 2a7a8 <flatcc_verify_error_string@@Base+0x2fc>
   2a70c:	add	r0, pc, r0
   2a710:	bx	lr
   2a714:	andeq	r7, r1, r0, asr #7
   2a718:	andeq	r7, r1, ip, lsr #16
   2a71c:	strdeq	r7, [r1], -r8
   2a720:			; <UNDEFINED> instruction: 0x000177b8
   2a724:	andeq	r7, r1, r4, lsl #15
   2a728:	andeq	r7, r1, r0, asr r7
   2a72c:	andeq	r7, r1, ip, lsr #14
   2a730:	strdeq	r7, [r1], -r8
   2a734:	andeq	r7, r1, r4, asr #13
   2a738:	andeq	r7, r1, r0, lsr #13
   2a73c:	andeq	r7, r1, r8, ror r6
   2a740:	andeq	r7, r1, r8, asr r6
   2a744:	andeq	r7, r1, ip, lsl r6
   2a748:	andeq	r7, r1, r4, ror #11
   2a74c:	andeq	r7, r1, ip, lsr #11
   2a750:	andeq	r7, r1, ip, ror #10
   2a754:	andeq	r7, r1, r4, lsr r5
   2a758:	andeq	r7, r1, r0, lsl r5
   2a75c:	ldrdeq	r7, [r1], -ip
   2a760:			; <UNDEFINED> instruction: 0x000174bc
   2a764:	andeq	r7, r1, r8, lsl #9
   2a768:	andeq	r7, r1, r4, asr r4
   2a76c:	andeq	r7, r1, r0, lsr #8
   2a770:	strdeq	r7, [r1], -r8
   2a774:	ldrdeq	r7, [r1], -r0
   2a778:	andeq	r7, r1, ip, lsr #7
   2a77c:	andeq	r7, r1, ip, lsl #7
   2a780:	andeq	r7, r1, r8, ror #6
   2a784:	andeq	r7, r1, r8, asr #6
   2a788:	andeq	r7, r1, r8, lsr #6
   2a78c:	andeq	r7, r1, r0, lsl #6
   2a790:	ldrdeq	r7, [r1], -r4
   2a794:	andeq	r7, r1, r4, lsr #5
   2a798:	andeq	r7, r1, r0, lsl #5
   2a79c:	andeq	r7, r1, r8, asr r2
   2a7a0:	andeq	r7, r1, r8, lsr r2
   2a7a4:	andeq	r7, r1, r4, lsl r2
   2a7a8:	andeq	r7, r1, ip, lsl #13

0002a7ac <flatcc_verify_field@@Base>:
   2a7ac:	add	r1, r1, #2
   2a7b0:	ldrh	ip, [r0, #22]
   2a7b4:	lsl	r1, r1, #1
   2a7b8:	uxth	r1, r1
   2a7bc:	cmp	ip, r1
   2a7c0:	bls	2a7f4 <flatcc_verify_field@@Base+0x48>
   2a7c4:	ldr	ip, [r0, #12]
   2a7c8:	ldrh	r1, [ip, r1]
   2a7cc:	cmp	r1, #0
   2a7d0:	beq	2a7f4 <flatcc_verify_field@@Base+0x48>
   2a7d4:	push	{lr}		; (str lr, [sp, #-4]!)
   2a7d8:	add	r2, r2, r1
   2a7dc:	ldrh	lr, [r0, #20]
   2a7e0:	ldr	ip, [r0]
   2a7e4:	cmp	r2, lr
   2a7e8:	bls	2a7fc <flatcc_verify_field@@Base+0x50>
   2a7ec:	mov	r0, #13
   2a7f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2a7f4:	mov	r0, #0
   2a7f8:	bx	lr
   2a7fc:	ldr	r0, [r0, #16]
   2a800:	sub	r3, r3, #1
   2a804:	add	r0, ip, r0
   2a808:	add	r0, r0, r1
   2a80c:	tst	r0, r3
   2a810:	moveq	r0, #0
   2a814:	movne	r0, #12
   2a818:	pop	{pc}		; (ldr pc, [sp], #4)

0002a81c <flatcc_verify_string_field@@Base>:
   2a81c:	push	{r4, lr}
   2a820:	sub	sp, sp, #8
   2a824:	add	r3, sp, #4
   2a828:	mov	r4, r0
   2a82c:	bl	2a434 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2a830:	cmp	r0, #0
   2a834:	bne	2a888 <flatcc_verify_string_field@@Base+0x6c>
   2a838:	ldr	r3, [sp, #4]
   2a83c:	cmp	r3, #0
   2a840:	beq	2a888 <flatcc_verify_string_field@@Base+0x6c>
   2a844:	ldr	r1, [r4]
   2a848:	ldr	r2, [r1, r3]
   2a84c:	add	r2, r3, r2
   2a850:	cmp	r3, r2
   2a854:	bcs	2a890 <flatcc_verify_string_field@@Base+0x74>
   2a858:	ldr	r3, [r4, #4]
   2a85c:	add	ip, r2, #4
   2a860:	cmp	r3, ip
   2a864:	bcc	2a890 <flatcc_verify_string_field@@Base+0x74>
   2a868:	tst	r2, #3
   2a86c:	bne	2a890 <flatcc_verify_string_field@@Base+0x74>
   2a870:	ldr	r2, [r1, r2]
   2a874:	sub	r3, r3, ip
   2a878:	add	lr, r2, #1
   2a87c:	cmp	r3, lr
   2a880:	movcc	r0, #8
   2a884:	bcs	2a89c <flatcc_verify_string_field@@Base+0x80>
   2a888:	add	sp, sp, #8
   2a88c:	pop	{r4, pc}
   2a890:	mov	r0, #17
   2a894:	add	sp, sp, #8
   2a898:	pop	{r4, pc}
   2a89c:	add	r1, r1, ip
   2a8a0:	ldrb	r3, [r1, r2]
   2a8a4:	cmp	r3, #0
   2a8a8:	movne	r0, #7
   2a8ac:	b	2a888 <flatcc_verify_string_field@@Base+0x6c>

0002a8b0 <flatcc_verify_vector_field@@Base>:
   2a8b0:	push	{r4, r5, r6, lr}
   2a8b4:	sub	sp, sp, #8
   2a8b8:	mov	r5, r3
   2a8bc:	add	r3, sp, #4
   2a8c0:	mov	r6, r0
   2a8c4:	ldrh	r4, [sp, #24]
   2a8c8:	bl	2a434 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2a8cc:	cmp	r0, #0
   2a8d0:	bne	2a930 <flatcc_verify_vector_field@@Base+0x80>
   2a8d4:	ldr	r3, [sp, #4]
   2a8d8:	cmp	r3, #0
   2a8dc:	beq	2a930 <flatcc_verify_vector_field@@Base+0x80>
   2a8e0:	ldr	r1, [r6]
   2a8e4:	ldr	r2, [r1, r3]
   2a8e8:	add	r2, r3, r2
   2a8ec:	cmp	r3, r2
   2a8f0:	bcs	2a938 <flatcc_verify_vector_field@@Base+0x88>
   2a8f4:	ldr	ip, [r6, #4]
   2a8f8:	add	r3, r2, #4
   2a8fc:	cmp	ip, r3
   2a900:	bcc	2a938 <flatcc_verify_vector_field@@Base+0x88>
   2a904:	cmp	r4, #4
   2a908:	movcc	r4, #4
   2a90c:	sub	r4, r4, #1
   2a910:	orr	r4, r4, #3
   2a914:	tst	r4, r3
   2a918:	bne	2a938 <flatcc_verify_vector_field@@Base+0x88>
   2a91c:	ldr	r2, [r1, r2]
   2a920:	ldr	r1, [sp, #28]
   2a924:	cmp	r1, r2
   2a928:	movcc	r0, #25
   2a92c:	bcs	2a944 <flatcc_verify_vector_field@@Base+0x94>
   2a930:	add	sp, sp, #8
   2a934:	pop	{r4, r5, r6, pc}
   2a938:	mov	r0, #16
   2a93c:	add	sp, sp, #8
   2a940:	pop	{r4, r5, r6, pc}
   2a944:	mul	r5, r2, r5
   2a948:	sub	r3, ip, r3
   2a94c:	cmp	r3, r5
   2a950:	movcc	r0, #26
   2a954:	b	2a930 <flatcc_verify_vector_field@@Base+0x80>

0002a958 <flatcc_verify_string_vector_field@@Base>:
   2a958:	push	{r4, r5, r6, r7, lr}
   2a95c:	sub	sp, sp, #12
   2a960:	add	r3, sp, #4
   2a964:	mov	r4, r0
   2a968:	bl	2a434 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2a96c:	cmp	r0, #0
   2a970:	bne	2a9c8 <flatcc_verify_string_vector_field@@Base+0x70>
   2a974:	ldr	r3, [sp, #4]
   2a978:	cmp	r3, #0
   2a97c:	beq	2a9c8 <flatcc_verify_string_vector_field@@Base+0x70>
   2a980:	ldr	lr, [r4]
   2a984:	ldr	r2, [lr, r3]
   2a988:	add	r2, r3, r2
   2a98c:	cmp	r3, r2
   2a990:	bcs	2a9d0 <flatcc_verify_string_vector_field@@Base+0x78>
   2a994:	ldr	r5, [r4, #4]
   2a998:	add	r3, r2, #4
   2a99c:	cmp	r5, r3
   2a9a0:	bcc	2a9d0 <flatcc_verify_string_vector_field@@Base+0x78>
   2a9a4:	tst	r3, #3
   2a9a8:	bne	2a9d0 <flatcc_verify_string_vector_field@@Base+0x78>
   2a9ac:	ldr	r1, [lr, r2]
   2a9b0:	cmn	r1, #-1073741823	; 0xc0000001
   2a9b4:	bls	2a9dc <flatcc_verify_string_vector_field@@Base+0x84>
   2a9b8:	ldr	r2, [lr, r2]
   2a9bc:	cmn	r2, #-1073741823	; 0xc0000001
   2a9c0:	movhi	r0, #25
   2a9c4:	bls	2aa48 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a9c8:	add	sp, sp, #12
   2a9cc:	pop	{r4, r5, r6, r7, pc}
   2a9d0:	mov	r0, #16
   2a9d4:	add	sp, sp, #12
   2a9d8:	pop	{r4, r5, r6, r7, pc}
   2a9dc:	lsl	r4, r1, #2
   2a9e0:	sub	ip, r5, r3
   2a9e4:	cmp	ip, r4
   2a9e8:	bcc	2a9b8 <flatcc_verify_string_vector_field@@Base+0x60>
   2a9ec:	cmp	r1, #0
   2a9f0:	beq	2a9c8 <flatcc_verify_string_vector_field@@Base+0x70>
   2a9f4:	ldr	r2, [lr, r3]
   2a9f8:	add	r1, lr, r3
   2a9fc:	add	r2, r3, r2
   2aa00:	cmp	r3, r2
   2aa04:	bcs	2aa3c <flatcc_verify_string_vector_field@@Base+0xe4>
   2aa08:	add	ip, r2, #4
   2aa0c:	cmp	r5, ip
   2aa10:	bcc	2aa3c <flatcc_verify_string_vector_field@@Base+0xe4>
   2aa14:	tst	r2, #3
   2aa18:	bne	2aa3c <flatcc_verify_string_vector_field@@Base+0xe4>
   2aa1c:	ldr	r2, [lr, r2]
   2aa20:	sub	r6, r5, ip
   2aa24:	add	r7, r2, #1
   2aa28:	cmp	r7, r6
   2aa2c:	bls	2aa58 <flatcc_verify_string_vector_field@@Base+0x100>
   2aa30:	mov	r0, #8
   2aa34:	add	sp, sp, #12
   2aa38:	pop	{r4, r5, r6, r7, pc}
   2aa3c:	mov	r0, #17
   2aa40:	add	sp, sp, #12
   2aa44:	pop	{r4, r5, r6, r7, pc}
   2aa48:	sub	r3, r5, r3
   2aa4c:	cmp	r3, r2, lsl #2
   2aa50:	movcc	r0, #26
   2aa54:	b	2a9c8 <flatcc_verify_string_vector_field@@Base+0x70>
   2aa58:	add	r4, r3, r4
   2aa5c:	add	r2, lr, r2
   2aa60:	ldrb	r2, [r2, ip]
   2aa64:	cmp	r2, #0
   2aa68:	movne	r0, #7
   2aa6c:	bne	2a9c8 <flatcc_verify_string_vector_field@@Base+0x70>
   2aa70:	add	r3, r3, #4
   2aa74:	cmp	r3, r4
   2aa78:	beq	2a9c8 <flatcc_verify_string_vector_field@@Base+0x70>
   2aa7c:	ldr	r2, [r1, #4]!
   2aa80:	add	r2, r3, r2
   2aa84:	cmp	r3, r2
   2aa88:	add	ip, r2, #4
   2aa8c:	bcs	2aa3c <flatcc_verify_string_vector_field@@Base+0xe4>
   2aa90:	cmp	r5, ip
   2aa94:	bcc	2aa3c <flatcc_verify_string_vector_field@@Base+0xe4>
   2aa98:	tst	r2, #3
   2aa9c:	sub	r7, r5, ip
   2aaa0:	bne	2aa3c <flatcc_verify_string_vector_field@@Base+0xe4>
   2aaa4:	ldr	r2, [lr, r2]
   2aaa8:	add	r6, r2, #1
   2aaac:	cmp	r7, r6
   2aab0:	bcc	2aa30 <flatcc_verify_string_vector_field@@Base+0xd8>
   2aab4:	b	2aa5c <flatcc_verify_string_vector_field@@Base+0x104>

0002aab8 <flatcc_verify_table_field@@Base>:
   2aab8:	push	{r4, r5, lr}
   2aabc:	sub	sp, sp, #36	; 0x24
   2aac0:	mov	r5, r3
   2aac4:	add	r3, sp, #4
   2aac8:	mov	r4, r0
   2aacc:	bl	2a434 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2aad0:	cmp	r0, #0
   2aad4:	bne	2aae4 <flatcc_verify_table_field@@Base+0x2c>
   2aad8:	ldr	r3, [sp, #4]
   2aadc:	cmp	r3, #0
   2aae0:	bne	2aaec <flatcc_verify_table_field@@Base+0x34>
   2aae4:	add	sp, sp, #36	; 0x24
   2aae8:	pop	{r4, r5, pc}
   2aaec:	ldr	r2, [r4, #8]
   2aaf0:	ldr	ip, [r4]
   2aaf4:	sub	r2, r2, #1
   2aaf8:	cmp	r2, #0
   2aafc:	ldr	r1, [ip, r3]
   2ab00:	ldr	lr, [r4, #4]
   2ab04:	str	r2, [sp, #16]
   2ab08:	moveq	r0, #3
   2ab0c:	beq	2aae4 <flatcc_verify_table_field@@Base+0x2c>
   2ab10:	add	r2, r3, r1
   2ab14:	cmp	r3, r2
   2ab18:	bcs	2abb4 <flatcc_verify_table_field@@Base+0xfc>
   2ab1c:	add	r3, r2, #4
   2ab20:	cmp	lr, r3
   2ab24:	bcc	2abb4 <flatcc_verify_table_field@@Base+0xfc>
   2ab28:	tst	r2, #3
   2ab2c:	bne	2abb4 <flatcc_verify_table_field@@Base+0xfc>
   2ab30:	str	r2, [sp, #24]
   2ab34:	ldr	r3, [ip, r2]
   2ab38:	subs	r3, r2, r3
   2ab3c:	bmi	2abbc <flatcc_verify_table_field@@Base+0x104>
   2ab40:	tst	r3, #1
   2ab44:	bne	2abbc <flatcc_verify_table_field@@Base+0x104>
   2ab48:	add	r1, r3, #2
   2ab4c:	cmp	lr, r1
   2ab50:	movcc	r0, #27
   2ab54:	bcc	2aae4 <flatcc_verify_table_field@@Base+0x2c>
   2ab58:	ldrh	r0, [ip, r3]
   2ab5c:	add	r4, ip, r3
   2ab60:	add	r3, r0, r3
   2ab64:	cmp	lr, r3
   2ab68:	strh	r0, [sp, #30]
   2ab6c:	bcc	2abc4 <flatcc_verify_table_field@@Base+0x10c>
   2ab70:	tst	r0, #1
   2ab74:	bne	2abc4 <flatcc_verify_table_field@@Base+0x10c>
   2ab78:	cmp	r0, #3
   2ab7c:	movls	r0, #28
   2ab80:	bls	2aae4 <flatcc_verify_table_field@@Base+0x2c>
   2ab84:	ldrh	r3, [ip, r1]
   2ab88:	sub	r2, lr, r2
   2ab8c:	cmp	r2, r3
   2ab90:	strh	r3, [sp, #28]
   2ab94:	movcc	r0, #20
   2ab98:	bcc	2aae4 <flatcc_verify_table_field@@Base+0x2c>
   2ab9c:	add	r0, sp, #8
   2aba0:	str	r4, [sp, #20]
   2aba4:	str	ip, [sp, #8]
   2aba8:	str	lr, [sp, #12]
   2abac:	blx	r5
   2abb0:	b	2aae4 <flatcc_verify_table_field@@Base+0x2c>
   2abb4:	mov	r0, #15
   2abb8:	b	2aae4 <flatcc_verify_table_field@@Base+0x2c>
   2abbc:	mov	r0, #29
   2abc0:	b	2aae4 <flatcc_verify_table_field@@Base+0x2c>
   2abc4:	mov	r0, #30
   2abc8:	b	2aae4 <flatcc_verify_table_field@@Base+0x2c>

0002abcc <flatcc_verify_table_vector_field@@Base>:
   2abcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abd0:	sub	sp, sp, #44	; 0x2c
   2abd4:	mov	r8, r3
   2abd8:	add	r3, sp, #12
   2abdc:	mov	r4, r0
   2abe0:	bl	2a434 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2abe4:	subs	r5, r0, #0
   2abe8:	bne	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2abec:	ldr	r3, [sp, #12]
   2abf0:	cmp	r3, #0
   2abf4:	bne	2ac04 <flatcc_verify_table_vector_field@@Base+0x38>
   2abf8:	mov	r0, r5
   2abfc:	add	sp, sp, #44	; 0x2c
   2ac00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac04:	ldr	r7, [r4, #8]
   2ac08:	cmp	r7, #0
   2ac0c:	ble	2ac68 <flatcc_verify_table_vector_field@@Base+0x9c>
   2ac10:	ldr	sl, [r4]
   2ac14:	ldr	r1, [sl, r3]
   2ac18:	add	r1, r3, r1
   2ac1c:	cmp	r3, r1
   2ac20:	bcs	2ac78 <flatcc_verify_table_vector_field@@Base+0xac>
   2ac24:	ldr	fp, [r4, #4]
   2ac28:	add	r4, r1, #4
   2ac2c:	cmp	fp, r4
   2ac30:	bcc	2ac78 <flatcc_verify_table_vector_field@@Base+0xac>
   2ac34:	tst	r4, #3
   2ac38:	bne	2ac78 <flatcc_verify_table_vector_field@@Base+0xac>
   2ac3c:	ldr	r3, [sl, r1]
   2ac40:	cmn	r3, #-1073741823	; 0xc0000001
   2ac44:	bls	2ac88 <flatcc_verify_table_vector_field@@Base+0xbc>
   2ac48:	ldr	r3, [sl, r1]
   2ac4c:	cmn	r3, #-1073741823	; 0xc0000001
   2ac50:	movhi	r5, #25
   2ac54:	bhi	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2ac58:	sub	r4, fp, r4
   2ac5c:	cmp	r4, r3, lsl #2
   2ac60:	movcc	r5, #26
   2ac64:	b	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2ac68:	mov	r5, #3
   2ac6c:	mov	r0, r5
   2ac70:	add	sp, sp, #44	; 0x2c
   2ac74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac78:	mov	r5, #16
   2ac7c:	mov	r0, r5
   2ac80:	add	sp, sp, #44	; 0x2c
   2ac84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac88:	lsl	r9, r3, #2
   2ac8c:	sub	r2, fp, r4
   2ac90:	cmp	r2, r9
   2ac94:	bcc	2ac48 <flatcc_verify_table_vector_field@@Base+0x7c>
   2ac98:	cmp	r3, #0
   2ac9c:	beq	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2aca0:	sub	r7, r7, #2
   2aca4:	cmp	r7, #0
   2aca8:	ldr	r3, [sl, r4]
   2acac:	add	r2, sl, r4
   2acb0:	str	r7, [sp, #24]
   2acb4:	beq	2ac68 <flatcc_verify_table_vector_field@@Base+0x9c>
   2acb8:	add	r3, r4, r3
   2acbc:	cmp	r4, r3
   2acc0:	bcs	2ae60 <flatcc_verify_table_vector_field@@Base+0x294>
   2acc4:	add	r0, r3, #4
   2acc8:	cmp	fp, r0
   2accc:	bcc	2ae60 <flatcc_verify_table_vector_field@@Base+0x294>
   2acd0:	tst	r3, #3
   2acd4:	bne	2ae60 <flatcc_verify_table_vector_field@@Base+0x294>
   2acd8:	add	r1, r1, #8
   2acdc:	add	r9, r4, r9
   2ace0:	add	r6, sl, r1
   2ace4:	mov	r1, r2
   2ace8:	add	r2, sp, #16
   2acec:	str	r2, [sp]
   2acf0:	str	r3, [sp, #32]
   2acf4:	ldr	r2, [sl, r3]
   2acf8:	subs	r2, r3, r2
   2acfc:	bmi	2ad08 <flatcc_verify_table_vector_field@@Base+0x13c>
   2ad00:	tst	r2, #1
   2ad04:	beq	2adb8 <flatcc_verify_table_vector_field@@Base+0x1ec>
   2ad08:	ldr	r3, [r1]
   2ad0c:	str	r7, [sp, #24]
   2ad10:	add	r3, r4, r3
   2ad14:	cmp	r3, r4
   2ad18:	bls	2ae6c <flatcc_verify_table_vector_field@@Base+0x2a0>
   2ad1c:	add	r2, r3, #4
   2ad20:	cmp	fp, r2
   2ad24:	bcc	2ae6c <flatcc_verify_table_vector_field@@Base+0x2a0>
   2ad28:	tst	r3, #3
   2ad2c:	bne	2ae6c <flatcc_verify_table_vector_field@@Base+0x2a0>
   2ad30:	str	r3, [sp, #32]
   2ad34:	ldr	r2, [sl, r3]
   2ad38:	subs	r2, r3, r2
   2ad3c:	bmi	2ae74 <flatcc_verify_table_vector_field@@Base+0x2a8>
   2ad40:	tst	r2, #1
   2ad44:	bne	2ae74 <flatcc_verify_table_vector_field@@Base+0x2a8>
   2ad48:	add	r0, r2, #2
   2ad4c:	cmp	fp, r0
   2ad50:	movcc	r5, #27
   2ad54:	bcc	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2ad58:	ldrh	r1, [sl, r2]
   2ad5c:	add	ip, sl, r2
   2ad60:	add	r2, r1, r2
   2ad64:	cmp	fp, r2
   2ad68:	strh	r1, [sp, #38]	; 0x26
   2ad6c:	bcc	2ae7c <flatcc_verify_table_vector_field@@Base+0x2b0>
   2ad70:	tst	r1, #1
   2ad74:	bne	2ae7c <flatcc_verify_table_vector_field@@Base+0x2b0>
   2ad78:	cmp	r1, #3
   2ad7c:	movls	r5, #28
   2ad80:	bls	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2ad84:	ldrh	r2, [sl, r0]
   2ad88:	sub	r3, fp, r3
   2ad8c:	cmp	r3, r2
   2ad90:	strh	r2, [sp, #36]	; 0x24
   2ad94:	movcc	r5, #20
   2ad98:	bcc	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2ad9c:	add	r0, sp, #16
   2ada0:	str	ip, [sp, #28]
   2ada4:	str	sl, [sp, #16]
   2ada8:	str	fp, [sp, #20]
   2adac:	blx	r8
   2adb0:	mov	r5, r0
   2adb4:	b	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2adb8:	add	r0, r2, #2
   2adbc:	cmp	fp, r0
   2adc0:	bcc	2ad08 <flatcc_verify_table_vector_field@@Base+0x13c>
   2adc4:	ldrh	lr, [sl, r2]
   2adc8:	add	ip, sl, r2
   2adcc:	add	r2, lr, r2
   2add0:	cmp	fp, r2
   2add4:	strh	lr, [sp, #38]	; 0x26
   2add8:	bcc	2ad08 <flatcc_verify_table_vector_field@@Base+0x13c>
   2addc:	tst	lr, #1
   2ade0:	bne	2ad08 <flatcc_verify_table_vector_field@@Base+0x13c>
   2ade4:	cmp	lr, #3
   2ade8:	bls	2ad08 <flatcc_verify_table_vector_field@@Base+0x13c>
   2adec:	ldrh	r2, [sl, r0]
   2adf0:	sub	r3, fp, r3
   2adf4:	cmp	r3, r2
   2adf8:	strh	r2, [sp, #36]	; 0x24
   2adfc:	bcc	2ad08 <flatcc_verify_table_vector_field@@Base+0x13c>
   2ae00:	ldr	r0, [sp]
   2ae04:	str	r1, [sp, #4]
   2ae08:	str	ip, [sp, #28]
   2ae0c:	str	sl, [sp, #16]
   2ae10:	str	fp, [sp, #20]
   2ae14:	blx	r8
   2ae18:	ldr	r1, [sp, #4]
   2ae1c:	cmp	r0, #0
   2ae20:	bne	2ad08 <flatcc_verify_table_vector_field@@Base+0x13c>
   2ae24:	add	r4, r4, #4
   2ae28:	cmp	r4, r9
   2ae2c:	beq	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae30:	mov	r2, r6
   2ae34:	ldr	r3, [r6], #4
   2ae38:	str	r7, [sp, #24]
   2ae3c:	add	r3, r3, r4
   2ae40:	cmp	r4, r3
   2ae44:	bcs	2ae60 <flatcc_verify_table_vector_field@@Base+0x294>
   2ae48:	add	r0, r3, #4
   2ae4c:	cmp	fp, r0
   2ae50:	bcc	2ae60 <flatcc_verify_table_vector_field@@Base+0x294>
   2ae54:	tst	r3, #3
   2ae58:	add	r1, r1, #4
   2ae5c:	beq	2acf0 <flatcc_verify_table_vector_field@@Base+0x124>
   2ae60:	ldr	r3, [r2]
   2ae64:	str	r7, [sp, #24]
   2ae68:	b	2ad10 <flatcc_verify_table_vector_field@@Base+0x144>
   2ae6c:	mov	r5, #15
   2ae70:	b	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae74:	mov	r5, #29
   2ae78:	b	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>
   2ae7c:	mov	r5, #30
   2ae80:	b	2abf8 <flatcc_verify_table_vector_field@@Base+0x2c>

0002ae84 <flatcc_verify_union_table@@Base>:
   2ae84:	ldr	r3, [r0, #8]
   2ae88:	push	{r4, r5, lr}
   2ae8c:	sub	r3, r3, #1
   2ae90:	sub	sp, sp, #28
   2ae94:	cmp	r3, #0
   2ae98:	ldr	lr, [r0]
   2ae9c:	str	r3, [sp, #8]
   2aea0:	ldr	ip, [r0, #4]
   2aea4:	ldr	r2, [r0, #16]
   2aea8:	ldr	r3, [r0, #20]
   2aeac:	moveq	r0, #3
   2aeb0:	bne	2aebc <flatcc_verify_union_table@@Base+0x38>
   2aeb4:	add	sp, sp, #28
   2aeb8:	pop	{r4, r5, pc}
   2aebc:	add	r3, r2, r3
   2aec0:	cmp	r2, r3
   2aec4:	bcs	2af60 <flatcc_verify_union_table@@Base+0xdc>
   2aec8:	add	r2, r3, #4
   2aecc:	cmp	ip, r2
   2aed0:	bcc	2af60 <flatcc_verify_union_table@@Base+0xdc>
   2aed4:	tst	r3, #3
   2aed8:	bne	2af60 <flatcc_verify_union_table@@Base+0xdc>
   2aedc:	str	r3, [sp, #16]
   2aee0:	ldr	r2, [lr, r3]
   2aee4:	subs	r2, r3, r2
   2aee8:	bmi	2af6c <flatcc_verify_union_table@@Base+0xe8>
   2aeec:	tst	r2, #1
   2aef0:	bne	2af6c <flatcc_verify_union_table@@Base+0xe8>
   2aef4:	add	r0, r2, #2
   2aef8:	cmp	ip, r0
   2aefc:	movcc	r0, #27
   2af00:	bcc	2aeb4 <flatcc_verify_union_table@@Base+0x30>
   2af04:	ldrh	r4, [lr, r2]
   2af08:	add	r5, lr, r2
   2af0c:	add	r2, r4, r2
   2af10:	cmp	ip, r2
   2af14:	strh	r4, [sp, #22]
   2af18:	bcc	2af74 <flatcc_verify_union_table@@Base+0xf0>
   2af1c:	tst	r4, #1
   2af20:	bne	2af74 <flatcc_verify_union_table@@Base+0xf0>
   2af24:	cmp	r4, #3
   2af28:	movls	r0, #28
   2af2c:	bls	2aeb4 <flatcc_verify_union_table@@Base+0x30>
   2af30:	ldrh	r2, [lr, r0]
   2af34:	sub	r3, ip, r3
   2af38:	cmp	r3, r2
   2af3c:	strh	r2, [sp, #20]
   2af40:	movcc	r0, #20
   2af44:	bcc	2aeb4 <flatcc_verify_union_table@@Base+0x30>
   2af48:	mov	r0, sp
   2af4c:	str	r5, [sp, #12]
   2af50:	str	lr, [sp]
   2af54:	str	ip, [sp, #4]
   2af58:	blx	r1
   2af5c:	b	2aeb4 <flatcc_verify_union_table@@Base+0x30>
   2af60:	mov	r0, #15
   2af64:	add	sp, sp, #28
   2af68:	pop	{r4, r5, pc}
   2af6c:	mov	r0, #29
   2af70:	b	2aeb4 <flatcc_verify_union_table@@Base+0x30>
   2af74:	mov	r0, #30
   2af78:	b	2aeb4 <flatcc_verify_union_table@@Base+0x30>

0002af7c <flatcc_verify_union_struct@@Base>:
   2af7c:	ldr	r3, [r0, #20]
   2af80:	ldr	ip, [r0, #4]
   2af84:	cmp	r3, #0
   2af88:	ldr	r0, [r0, #16]
   2af8c:	bne	2af98 <flatcc_verify_union_struct@@Base+0x1c>
   2af90:	mov	r0, #18
   2af94:	bx	lr
   2af98:	add	r3, r0, r3
   2af9c:	cmp	ip, r3
   2afa0:	bcc	2af90 <flatcc_verify_union_struct@@Base+0x14>
   2afa4:	adds	r1, r1, r3
   2afa8:	bcc	2afb4 <flatcc_verify_union_struct@@Base+0x38>
   2afac:	mov	r0, #10
   2afb0:	bx	lr
   2afb4:	cmp	ip, r1
   2afb8:	bcs	2afc4 <flatcc_verify_union_struct@@Base+0x48>
   2afbc:	mov	r0, #9
   2afc0:	bx	lr
   2afc4:	sub	r2, r2, #1
   2afc8:	tst	r2, r3
   2afcc:	movne	r0, #11
   2afd0:	moveq	r0, #0
   2afd4:	bx	lr

0002afd8 <flatcc_verify_union_string@@Base>:
   2afd8:	ldr	r2, [r0, #16]
   2afdc:	ldr	r3, [r0, #20]
   2afe0:	add	r3, r2, r3
   2afe4:	cmp	r2, r3
   2afe8:	bcs	2b024 <flatcc_verify_union_string@@Base+0x4c>
   2afec:	ldr	r2, [r0, #4]
   2aff0:	add	r1, r3, #4
   2aff4:	cmp	r2, r1
   2aff8:	bcc	2b024 <flatcc_verify_union_string@@Base+0x4c>
   2affc:	tst	r3, #3
   2b000:	bne	2b024 <flatcc_verify_union_string@@Base+0x4c>
   2b004:	ldr	r0, [r0]
   2b008:	sub	r2, r2, r1
   2b00c:	ldr	r3, [r0, r3]
   2b010:	add	ip, r3, #1
   2b014:	cmp	r2, ip
   2b018:	bcs	2b02c <flatcc_verify_union_string@@Base+0x54>
   2b01c:	mov	r0, #8
   2b020:	bx	lr
   2b024:	mov	r0, #17
   2b028:	bx	lr
   2b02c:	add	r1, r0, r1
   2b030:	ldrb	r0, [r1, r3]
   2b034:	cmp	r0, #0
   2b038:	movne	r0, #7
   2b03c:	moveq	r0, #0
   2b040:	bx	lr

0002b044 <flatcc_verify_buffer_header@@Base>:
   2b044:	ands	r3, r0, #3
   2b048:	beq	2b054 <flatcc_verify_buffer_header@@Base+0x10>
   2b04c:	mov	r0, #5
   2b050:	bx	lr
   2b054:	cmn	r1, #9
   2b058:	bls	2b064 <flatcc_verify_buffer_header@@Base+0x20>
   2b05c:	mov	r0, #6
   2b060:	bx	lr
   2b064:	cmp	r1, #7
   2b068:	bls	2b0b4 <flatcc_verify_buffer_header@@Base+0x70>
   2b06c:	cmp	r2, #0
   2b070:	beq	2b0bc <flatcc_verify_buffer_header@@Base+0x78>
   2b074:	push	{r4, lr}
   2b078:	sub	sp, sp, #8
   2b07c:	mov	r4, r0
   2b080:	add	r0, sp, #8
   2b084:	mov	r1, r2
   2b088:	str	r3, [r0, #-4]!
   2b08c:	mov	r2, #4
   2b090:	bl	145c8 <strncpy@plt>
   2b094:	ldr	r2, [r4, #4]
   2b098:	ldr	r3, [sp, #4]
   2b09c:	cmp	r3, #0
   2b0a0:	cmpne	r2, r3
   2b0a4:	moveq	r0, #0
   2b0a8:	movne	r0, #2
   2b0ac:	add	sp, sp, #8
   2b0b0:	pop	{r4, pc}
   2b0b4:	mov	r0, #1
   2b0b8:	bx	lr
   2b0bc:	mov	r0, #0
   2b0c0:	bx	lr

0002b0c4 <flatcc_verify_typed_buffer_header@@Base>:
   2b0c4:	tst	r0, #3
   2b0c8:	beq	2b0d4 <flatcc_verify_typed_buffer_header@@Base+0x10>
   2b0cc:	mov	r0, #5
   2b0d0:	bx	lr
   2b0d4:	cmn	r1, #9
   2b0d8:	bls	2b0e4 <flatcc_verify_typed_buffer_header@@Base+0x20>
   2b0dc:	mov	r0, #6
   2b0e0:	bx	lr
   2b0e4:	cmp	r1, #7
   2b0e8:	bls	2b110 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2b0ec:	cmp	r2, #0
   2b0f0:	beq	2b108 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2b0f4:	ldr	r0, [r0, #4]
   2b0f8:	cmp	r2, r0
   2b0fc:	movne	r0, #2
   2b100:	moveq	r0, #0
   2b104:	bx	lr
   2b108:	mov	r0, r2
   2b10c:	bx	lr
   2b110:	mov	r0, #1
   2b114:	bx	lr

0002b118 <flatcc_verify_struct_as_root@@Base>:
   2b118:	push	{r4, r5, r6, r7, r8, lr}
   2b11c:	mov	r6, r3
   2b120:	mov	r5, r0
   2b124:	mov	r4, r1
   2b128:	mov	r8, r2
   2b12c:	ldrh	r7, [sp, #24]
   2b130:	bl	2b044 <flatcc_verify_buffer_header@@Base>
   2b134:	cmp	r0, #0
   2b138:	bne	2b164 <flatcc_verify_struct_as_root@@Base+0x4c>
   2b13c:	ldr	r2, [r5]
   2b140:	cmp	r4, r2
   2b144:	movcs	r3, #0
   2b148:	movcc	r3, #1
   2b14c:	cmp	r2, #0
   2b150:	orreq	r3, r3, #1
   2b154:	cmp	r3, #0
   2b158:	beq	2b178 <flatcc_verify_struct_as_root@@Base+0x60>
   2b15c:	mov	r0, #18
   2b160:	pop	{r4, r5, r6, r7, r8, pc}
   2b164:	mov	r2, r8
   2b168:	mov	r1, r4
   2b16c:	mov	r0, r5
   2b170:	pop	{r4, r5, r6, r7, r8, lr}
   2b174:	b	2b044 <flatcc_verify_buffer_header@@Base>
   2b178:	adds	r6, r6, r2
   2b17c:	bcc	2b188 <flatcc_verify_struct_as_root@@Base+0x70>
   2b180:	mov	r0, #10
   2b184:	pop	{r4, r5, r6, r7, r8, pc}
   2b188:	cmp	r4, r6
   2b18c:	bcs	2b198 <flatcc_verify_struct_as_root@@Base+0x80>
   2b190:	mov	r0, #9
   2b194:	pop	{r4, r5, r6, r7, r8, pc}
   2b198:	sub	r7, r7, #1
   2b19c:	tst	r7, r2
   2b1a0:	movne	r0, #11
   2b1a4:	pop	{r4, r5, r6, r7, r8, pc}

0002b1a8 <flatcc_verify_struct_as_typed_root@@Base>:
   2b1a8:	push	{r4, r5, r6, r7, r8, lr}
   2b1ac:	mov	r6, r3
   2b1b0:	mov	r5, r0
   2b1b4:	mov	r4, r1
   2b1b8:	mov	r8, r2
   2b1bc:	ldrh	r7, [sp, #24]
   2b1c0:	bl	2b0c4 <flatcc_verify_typed_buffer_header@@Base>
   2b1c4:	cmp	r0, #0
   2b1c8:	bne	2b1f4 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   2b1cc:	ldr	r2, [r5]
   2b1d0:	cmp	r4, r2
   2b1d4:	movcs	r3, #0
   2b1d8:	movcc	r3, #1
   2b1dc:	cmp	r2, #0
   2b1e0:	orreq	r3, r3, #1
   2b1e4:	cmp	r3, #0
   2b1e8:	beq	2b208 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   2b1ec:	mov	r0, #18
   2b1f0:	pop	{r4, r5, r6, r7, r8, pc}
   2b1f4:	mov	r2, r8
   2b1f8:	mov	r1, r4
   2b1fc:	mov	r0, r5
   2b200:	pop	{r4, r5, r6, r7, r8, lr}
   2b204:	b	2b0c4 <flatcc_verify_typed_buffer_header@@Base>
   2b208:	adds	r6, r6, r2
   2b20c:	bcc	2b218 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2b210:	mov	r0, #10
   2b214:	pop	{r4, r5, r6, r7, r8, pc}
   2b218:	cmp	r4, r6
   2b21c:	bcs	2b228 <flatcc_verify_struct_as_typed_root@@Base+0x80>
   2b220:	mov	r0, #9
   2b224:	pop	{r4, r5, r6, r7, r8, pc}
   2b228:	sub	r7, r7, #1
   2b22c:	tst	r7, r2
   2b230:	movne	r0, #11
   2b234:	pop	{r4, r5, r6, r7, r8, pc}

0002b238 <flatcc_verify_table_as_root@@Base>:
   2b238:	push	{r4, r5, r6, r7, lr}
   2b23c:	sub	sp, sp, #28
   2b240:	mov	r7, r3
   2b244:	mov	r4, r0
   2b248:	mov	r5, r1
   2b24c:	mov	r6, r2
   2b250:	bl	2b044 <flatcc_verify_buffer_header@@Base>
   2b254:	cmp	r0, #0
   2b258:	bne	2b290 <flatcc_verify_table_as_root@@Base+0x58>
   2b25c:	ldr	r3, [r4]
   2b260:	mov	r2, #99	; 0x63
   2b264:	cmp	r3, #0
   2b268:	str	r2, [sp, #8]
   2b26c:	beq	2b284 <flatcc_verify_table_as_root@@Base+0x4c>
   2b270:	add	r2, r3, #4
   2b274:	cmp	r5, r2
   2b278:	bcc	2b284 <flatcc_verify_table_as_root@@Base+0x4c>
   2b27c:	tst	r3, #3
   2b280:	beq	2b2a8 <flatcc_verify_table_as_root@@Base+0x70>
   2b284:	mov	r0, #15
   2b288:	add	sp, sp, #28
   2b28c:	pop	{r4, r5, r6, r7, pc}
   2b290:	mov	r2, r6
   2b294:	mov	r1, r5
   2b298:	mov	r0, r4
   2b29c:	bl	2b044 <flatcc_verify_buffer_header@@Base>
   2b2a0:	add	sp, sp, #28
   2b2a4:	pop	{r4, r5, r6, r7, pc}
   2b2a8:	ldr	r2, [r4, r3]
   2b2ac:	str	r3, [sp, #16]
   2b2b0:	subs	r2, r3, r2
   2b2b4:	bmi	2b328 <flatcc_verify_table_as_root@@Base+0xf0>
   2b2b8:	tst	r2, #1
   2b2bc:	bne	2b328 <flatcc_verify_table_as_root@@Base+0xf0>
   2b2c0:	add	r1, r2, #2
   2b2c4:	cmp	r5, r1
   2b2c8:	movcc	r0, #27
   2b2cc:	bcc	2b288 <flatcc_verify_table_as_root@@Base+0x50>
   2b2d0:	ldrh	r0, [r4, r2]
   2b2d4:	add	ip, r4, r2
   2b2d8:	add	r2, r0, r2
   2b2dc:	cmp	r5, r2
   2b2e0:	strh	r0, [sp, #22]
   2b2e4:	bcc	2b330 <flatcc_verify_table_as_root@@Base+0xf8>
   2b2e8:	tst	r0, #1
   2b2ec:	bne	2b330 <flatcc_verify_table_as_root@@Base+0xf8>
   2b2f0:	cmp	r0, #3
   2b2f4:	movls	r0, #28
   2b2f8:	bls	2b288 <flatcc_verify_table_as_root@@Base+0x50>
   2b2fc:	ldrh	r2, [r4, r1]
   2b300:	sub	r3, r5, r3
   2b304:	cmp	r3, r2
   2b308:	strh	r2, [sp, #20]
   2b30c:	movcc	r0, #20
   2b310:	bcc	2b288 <flatcc_verify_table_as_root@@Base+0x50>
   2b314:	mov	r0, sp
   2b318:	str	ip, [sp, #12]
   2b31c:	stm	sp, {r4, r5}
   2b320:	blx	r7
   2b324:	b	2b288 <flatcc_verify_table_as_root@@Base+0x50>
   2b328:	mov	r0, #29
   2b32c:	b	2b288 <flatcc_verify_table_as_root@@Base+0x50>
   2b330:	mov	r0, #30
   2b334:	b	2b288 <flatcc_verify_table_as_root@@Base+0x50>

0002b338 <flatcc_verify_table_as_typed_root@@Base>:
   2b338:	push	{r4, r5, r6, r7, lr}
   2b33c:	sub	sp, sp, #28
   2b340:	mov	r7, r3
   2b344:	mov	r4, r0
   2b348:	mov	r5, r1
   2b34c:	mov	r6, r2
   2b350:	bl	2b0c4 <flatcc_verify_typed_buffer_header@@Base>
   2b354:	cmp	r0, #0
   2b358:	bne	2b390 <flatcc_verify_table_as_typed_root@@Base+0x58>
   2b35c:	ldr	r3, [r4]
   2b360:	mov	r2, #99	; 0x63
   2b364:	cmp	r3, #0
   2b368:	str	r2, [sp, #8]
   2b36c:	beq	2b384 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   2b370:	add	r2, r3, #4
   2b374:	cmp	r5, r2
   2b378:	bcc	2b384 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   2b37c:	tst	r3, #3
   2b380:	beq	2b3a8 <flatcc_verify_table_as_typed_root@@Base+0x70>
   2b384:	mov	r0, #15
   2b388:	add	sp, sp, #28
   2b38c:	pop	{r4, r5, r6, r7, pc}
   2b390:	mov	r2, r6
   2b394:	mov	r1, r5
   2b398:	mov	r0, r4
   2b39c:	bl	2b0c4 <flatcc_verify_typed_buffer_header@@Base>
   2b3a0:	add	sp, sp, #28
   2b3a4:	pop	{r4, r5, r6, r7, pc}
   2b3a8:	ldr	r2, [r4, r3]
   2b3ac:	str	r3, [sp, #16]
   2b3b0:	subs	r2, r3, r2
   2b3b4:	bmi	2b428 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   2b3b8:	tst	r2, #1
   2b3bc:	bne	2b428 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   2b3c0:	add	r1, r2, #2
   2b3c4:	cmp	r5, r1
   2b3c8:	movcc	r0, #27
   2b3cc:	bcc	2b388 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b3d0:	ldrh	r0, [r4, r2]
   2b3d4:	add	ip, r4, r2
   2b3d8:	add	r2, r0, r2
   2b3dc:	cmp	r5, r2
   2b3e0:	strh	r0, [sp, #22]
   2b3e4:	bcc	2b430 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2b3e8:	tst	r0, #1
   2b3ec:	bne	2b430 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2b3f0:	cmp	r0, #3
   2b3f4:	movls	r0, #28
   2b3f8:	bls	2b388 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b3fc:	ldrh	r2, [r4, r1]
   2b400:	sub	r3, r5, r3
   2b404:	cmp	r3, r2
   2b408:	strh	r2, [sp, #20]
   2b40c:	movcc	r0, #20
   2b410:	bcc	2b388 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b414:	mov	r0, sp
   2b418:	str	ip, [sp, #12]
   2b41c:	stm	sp, {r4, r5}
   2b420:	blx	r7
   2b424:	b	2b388 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b428:	mov	r0, #29
   2b42c:	b	2b388 <flatcc_verify_table_as_typed_root@@Base+0x50>
   2b430:	mov	r0, #30
   2b434:	b	2b388 <flatcc_verify_table_as_typed_root@@Base+0x50>

0002b438 <flatcc_verify_struct_as_nested_root@@Base>:
   2b438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b43c:	sub	sp, sp, #12
   2b440:	mvn	sl, #0
   2b444:	ldrh	r6, [sp, #52]	; 0x34
   2b448:	mov	r9, #1
   2b44c:	mov	r7, r3
   2b450:	str	sl, [sp, #4]
   2b454:	mov	r3, r6
   2b458:	str	r9, [sp]
   2b45c:	mov	r5, r0
   2b460:	mov	r4, r1
   2b464:	mov	fp, r2
   2b468:	ldr	r8, [sp, #48]	; 0x30
   2b46c:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   2b470:	cmp	r0, #0
   2b474:	bne	2b4dc <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2b478:	add	r4, r4, #2
   2b47c:	ldrh	r3, [r5, #22]
   2b480:	lsl	r4, r4, #1
   2b484:	uxth	r4, r4
   2b488:	cmp	r3, r4
   2b48c:	bls	2b500 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2b490:	ldr	r3, [r5, #12]
   2b494:	ldrh	r3, [r3, r4]
   2b498:	cmp	r3, #0
   2b49c:	beq	2b500 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2b4a0:	ldr	r1, [r5, #16]
   2b4a4:	ldr	r2, [r5]
   2b4a8:	add	r3, r3, r1
   2b4ac:	adds	r1, r2, r3
   2b4b0:	beq	2b500 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   2b4b4:	ldr	r2, [r2, r3]
   2b4b8:	mov	r3, r8
   2b4bc:	add	r0, r1, r2
   2b4c0:	add	r0, r0, #4
   2b4c4:	ldr	r1, [r1, r2]
   2b4c8:	mov	r2, r7
   2b4cc:	str	r6, [sp, #48]	; 0x30
   2b4d0:	add	sp, sp, #12
   2b4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4d8:	b	2b118 <flatcc_verify_struct_as_root@@Base>
   2b4dc:	str	sl, [sp, #52]	; 0x34
   2b4e0:	str	r9, [sp, #48]	; 0x30
   2b4e4:	mov	r3, r6
   2b4e8:	mov	r2, fp
   2b4ec:	mov	r1, r4
   2b4f0:	mov	r0, r5
   2b4f4:	add	sp, sp, #12
   2b4f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4fc:	b	2a8b0 <flatcc_verify_vector_field@@Base>
   2b500:	add	sp, sp, #12
   2b504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b508 <flatcc_verify_table_as_nested_root@@Base>:
   2b508:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b50c:	sub	sp, sp, #32
   2b510:	mvn	r9, #0
   2b514:	ldrh	r7, [sp, #64]	; 0x40
   2b518:	mov	r8, #1
   2b51c:	mov	r6, r3
   2b520:	str	r9, [sp, #4]
   2b524:	mov	r3, r7
   2b528:	str	r8, [sp]
   2b52c:	mov	r5, r0
   2b530:	mov	r4, r1
   2b534:	mov	sl, r2
   2b538:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   2b53c:	cmp	r0, #0
   2b540:	bne	2b5e4 <flatcc_verify_table_as_nested_root@@Base+0xdc>
   2b544:	add	r4, r4, #2
   2b548:	ldrh	r3, [r5, #22]
   2b54c:	lsl	r4, r4, #1
   2b550:	uxth	r4, r4
   2b554:	cmp	r3, r4
   2b558:	bls	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b55c:	ldr	r3, [r5, #12]
   2b560:	ldrh	r3, [r3, r4]
   2b564:	cmp	r3, #0
   2b568:	beq	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b56c:	ldr	r1, [r5, #16]
   2b570:	ldr	r2, [r5]
   2b574:	add	r3, r3, r1
   2b578:	adds	r1, r2, r3
   2b57c:	beq	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b580:	ldr	r3, [r2, r3]
   2b584:	mov	r2, r6
   2b588:	add	r4, r1, r3
   2b58c:	ldr	r7, [r1, r3]
   2b590:	add	r8, r4, #4
   2b594:	mov	r0, r8
   2b598:	mov	r1, r7
   2b59c:	bl	2b044 <flatcc_verify_buffer_header@@Base>
   2b5a0:	cmp	r0, #0
   2b5a4:	bne	2b5cc <flatcc_verify_table_as_nested_root@@Base+0xc4>
   2b5a8:	ldr	r3, [r5, #8]
   2b5ac:	ldr	r2, [r4, #4]
   2b5b0:	sub	r3, r3, #1
   2b5b4:	cmp	r3, #0
   2b5b8:	str	r3, [sp, #16]
   2b5bc:	moveq	r0, #3
   2b5c0:	bne	2b604 <flatcc_verify_table_as_nested_root@@Base+0xfc>
   2b5c4:	add	sp, sp, #32
   2b5c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b5cc:	mov	r2, r6
   2b5d0:	mov	r1, r7
   2b5d4:	mov	r0, r8
   2b5d8:	bl	2b044 <flatcc_verify_buffer_header@@Base>
   2b5dc:	add	sp, sp, #32
   2b5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b5e4:	stm	sp, {r8, r9}
   2b5e8:	mov	r3, r7
   2b5ec:	mov	r2, sl
   2b5f0:	mov	r1, r4
   2b5f4:	mov	r0, r5
   2b5f8:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   2b5fc:	add	sp, sp, #32
   2b600:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b604:	cmp	r2, #0
   2b608:	beq	2b6a8 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   2b60c:	add	r3, r2, #4
   2b610:	cmp	r7, r3
   2b614:	bcc	2b6a8 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   2b618:	tst	r2, #3
   2b61c:	bne	2b6a8 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   2b620:	str	r2, [sp, #24]
   2b624:	ldr	r3, [r8, r2]
   2b628:	subs	r3, r2, r3
   2b62c:	bmi	2b6b4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b630:	tst	r3, #1
   2b634:	bne	2b6b4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b638:	add	r1, r3, #2
   2b63c:	cmp	r7, r1
   2b640:	movcc	r0, #27
   2b644:	bcc	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b648:	ldrh	r0, [r8, r3]
   2b64c:	add	ip, r8, r3
   2b650:	add	r3, r0, r3
   2b654:	cmp	r7, r3
   2b658:	strh	r0, [sp, #30]
   2b65c:	bcc	2b6bc <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   2b660:	tst	r0, #1
   2b664:	bne	2b6bc <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   2b668:	cmp	r0, #3
   2b66c:	movls	r0, #28
   2b670:	bls	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b674:	ldrh	r3, [r8, r1]
   2b678:	sub	r2, r7, r2
   2b67c:	cmp	r2, r3
   2b680:	strh	r3, [sp, #28]
   2b684:	movcc	r0, #20
   2b688:	bcc	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b68c:	add	r0, sp, #8
   2b690:	ldr	r3, [sp, #68]	; 0x44
   2b694:	str	ip, [sp, #20]
   2b698:	str	r8, [sp, #8]
   2b69c:	str	r7, [sp, #12]
   2b6a0:	blx	r3
   2b6a4:	b	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b6a8:	mov	r0, #15
   2b6ac:	add	sp, sp, #32
   2b6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b6b4:	mov	r0, #29
   2b6b8:	b	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2b6bc:	mov	r0, #30
   2b6c0:	b	2b5c4 <flatcc_verify_table_as_nested_root@@Base+0xbc>

0002b6c4 <flatcc_verify_union_field@@Base>:
   2b6c4:	sub	ip, r1, #1
   2b6c8:	push	{r4, r5, r6, lr}
   2b6cc:	uxth	ip, ip
   2b6d0:	add	ip, ip, #2
   2b6d4:	ldrh	lr, [r0, #22]
   2b6d8:	lsl	ip, ip, #1
   2b6dc:	sub	sp, sp, #32
   2b6e0:	uxth	ip, ip
   2b6e4:	cmp	ip, lr
   2b6e8:	ldr	r5, [r0, #12]
   2b6ec:	bcs	2b718 <flatcc_verify_union_field@@Base+0x54>
   2b6f0:	ldrh	ip, [r5, ip]
   2b6f4:	cmp	ip, #0
   2b6f8:	beq	2b718 <flatcc_verify_union_field@@Base+0x54>
   2b6fc:	ldrh	r4, [r0, #20]
   2b700:	add	r6, ip, #1
   2b704:	cmp	r6, r4
   2b708:	movhi	r0, #13
   2b70c:	bls	2b75c <flatcc_verify_union_field@@Base+0x98>
   2b710:	add	sp, sp, #32
   2b714:	pop	{r4, r5, r6, pc}
   2b718:	add	r1, r1, #2
   2b71c:	lsl	r1, r1, #1
   2b720:	uxth	r1, r1
   2b724:	cmp	lr, r1
   2b728:	bhi	2b744 <flatcc_verify_union_field@@Base+0x80>
   2b72c:	cmp	r2, #0
   2b730:	movne	r0, #21
   2b734:	bne	2b710 <flatcc_verify_union_field@@Base+0x4c>
   2b738:	mov	r0, #0
   2b73c:	add	sp, sp, #32
   2b740:	pop	{r4, r5, r6, pc}
   2b744:	ldrh	r3, [r5, r1]
   2b748:	cmp	r3, #0
   2b74c:	movne	r0, #23
   2b750:	beq	2b72c <flatcc_verify_union_field@@Base+0x68>
   2b754:	add	sp, sp, #32
   2b758:	pop	{r4, r5, r6, pc}
   2b75c:	add	r4, r1, #2
   2b760:	ldr	r6, [r0]
   2b764:	lsl	r4, r4, #1
   2b768:	uxth	r4, r4
   2b76c:	cmp	lr, r4
   2b770:	bhi	2b7e4 <flatcc_verify_union_field@@Base+0x120>
   2b774:	ldr	lr, [r0, #16]
   2b778:	add	ip, ip, lr
   2b77c:	add	r4, r6, ip
   2b780:	ldrb	ip, [r6, ip]
   2b784:	cmp	ip, #0
   2b788:	beq	2b738 <flatcc_verify_union_field@@Base+0x74>
   2b78c:	mov	r6, r3
   2b790:	add	r3, sp, #4
   2b794:	mov	r5, r0
   2b798:	bl	2a434 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2b79c:	cmp	r0, #0
   2b7a0:	bne	2b710 <flatcc_verify_union_field@@Base+0x4c>
   2b7a4:	ldr	r3, [sp, #4]
   2b7a8:	cmp	r3, #0
   2b7ac:	beq	2b738 <flatcc_verify_union_field@@Base+0x74>
   2b7b0:	ldmib	r5, {r0, r1}
   2b7b4:	ldr	r2, [r5]
   2b7b8:	str	r3, [sp, #24]
   2b7bc:	str	r0, [sp, #12]
   2b7c0:	str	r1, [sp, #16]
   2b7c4:	ldr	r3, [r2, r3]
   2b7c8:	str	r2, [sp, #8]
   2b7cc:	str	r3, [sp, #28]
   2b7d0:	ldrb	r3, [r4]
   2b7d4:	add	r0, sp, #8
   2b7d8:	strb	r3, [sp, #20]
   2b7dc:	blx	r6
   2b7e0:	b	2b710 <flatcc_verify_union_field@@Base+0x4c>
   2b7e4:	ldr	lr, [r0, #16]
   2b7e8:	ldrh	r5, [r5, r4]
   2b7ec:	add	ip, ip, lr
   2b7f0:	add	r4, r6, ip
   2b7f4:	ldrb	ip, [r6, ip]
   2b7f8:	adds	lr, ip, #0
   2b7fc:	movne	lr, #1
   2b800:	cmp	r5, #0
   2b804:	orreq	lr, lr, #1
   2b808:	cmp	lr, #0
   2b80c:	bne	2b784 <flatcc_verify_union_field@@Base+0xc0>
   2b810:	mov	r0, #24
   2b814:	add	sp, sp, #32
   2b818:	pop	{r4, r5, r6, pc}

0002b81c <flatcc_verify_union_vector_field@@Base>:
   2b81c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b820:	sub	r6, r1, #1
   2b824:	ldrh	lr, [r0, #22]
   2b828:	uxth	r6, r6
   2b82c:	add	r5, r6, #2
   2b830:	sub	sp, sp, #52	; 0x34
   2b834:	lsl	r5, r5, #1
   2b838:	ldr	r4, [r0, #12]
   2b83c:	uxth	r5, r5
   2b840:	cmp	r5, lr
   2b844:	bcs	2b8f4 <flatcc_verify_union_vector_field@@Base+0xd8>
   2b848:	ldrh	ip, [r4, r5]
   2b84c:	cmp	ip, #0
   2b850:	beq	2b8f4 <flatcc_verify_union_vector_field@@Base+0xd8>
   2b854:	mov	r9, #1
   2b858:	mvn	fp, #0
   2b85c:	str	r3, [sp, #12]
   2b860:	mov	r7, r1
   2b864:	stm	sp, {r9, fp}
   2b868:	mov	r3, r9
   2b86c:	mov	r1, r6
   2b870:	mov	r8, r2
   2b874:	mov	r4, r0
   2b878:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   2b87c:	subs	sl, r0, #0
   2b880:	bne	2b9ac <flatcc_verify_union_vector_field@@Base+0x190>
   2b884:	ldrh	r3, [r4, #22]
   2b888:	cmp	r3, r5
   2b88c:	bls	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2b890:	ldr	r3, [r4, #12]
   2b894:	ldrh	r3, [r3, r5]
   2b898:	cmp	r3, #0
   2b89c:	beq	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2b8a0:	ldr	r1, [r4, #16]
   2b8a4:	ldr	r2, [r4]
   2b8a8:	add	r3, r3, r1
   2b8ac:	adds	lr, r2, r3
   2b8b0:	beq	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2b8b4:	ldr	ip, [r2, r3]
   2b8b8:	mov	r1, r7
   2b8bc:	mov	r2, r8
   2b8c0:	add	r3, sp, #20
   2b8c4:	mov	r0, r4
   2b8c8:	add	r5, lr, ip
   2b8cc:	ldr	r7, [lr, ip]
   2b8d0:	bl	2a434 <flatcc_emitter_copy_buffer@@Base+0xc8>
   2b8d4:	subs	r6, r0, #0
   2b8d8:	bne	2b994 <flatcc_verify_union_vector_field@@Base+0x178>
   2b8dc:	ldr	r3, [sp, #20]
   2b8e0:	cmp	r3, #0
   2b8e4:	bne	2b930 <flatcc_verify_union_vector_field@@Base+0x114>
   2b8e8:	mov	r0, sl
   2b8ec:	add	sp, sp, #52	; 0x34
   2b8f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8f4:	add	ip, r1, #2
   2b8f8:	lsl	ip, ip, #1
   2b8fc:	uxth	ip, ip
   2b900:	cmp	lr, ip
   2b904:	bhi	2b920 <flatcc_verify_union_vector_field@@Base+0x104>
   2b908:	cmp	r2, #0
   2b90c:	movne	sl, #22
   2b910:	beq	2b854 <flatcc_verify_union_vector_field@@Base+0x38>
   2b914:	mov	r0, sl
   2b918:	add	sp, sp, #52	; 0x34
   2b91c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b920:	ldrh	ip, [r4, ip]
   2b924:	cmp	ip, #0
   2b928:	bne	2b854 <flatcc_verify_union_vector_field@@Base+0x38>
   2b92c:	b	2b908 <flatcc_verify_union_vector_field@@Base+0xec>
   2b930:	ldr	r1, [r4, #8]
   2b934:	cmp	r1, #0
   2b938:	movle	sl, #3
   2b93c:	ble	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2b940:	ldr	r0, [r4]
   2b944:	ldr	r2, [r0, r3]
   2b948:	add	r2, r3, r2
   2b94c:	cmp	r3, r2
   2b950:	bcs	2b9a4 <flatcc_verify_union_vector_field@@Base+0x188>
   2b954:	ldr	ip, [r4, #4]
   2b958:	add	r8, r2, #4
   2b95c:	cmp	ip, r8
   2b960:	bcc	2b9a4 <flatcc_verify_union_vector_field@@Base+0x188>
   2b964:	ands	r3, r8, #3
   2b968:	beq	2b9d4 <flatcc_verify_union_vector_field@@Base+0x1b8>
   2b96c:	cmp	r3, #0
   2b970:	bne	2b9a4 <flatcc_verify_union_vector_field@@Base+0x188>
   2b974:	ldr	r3, [r0, r2]
   2b978:	cmn	r3, #-1073741823	; 0xc0000001
   2b97c:	movhi	sl, #25
   2b980:	bhi	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2b984:	sub	ip, ip, r8
   2b988:	cmp	ip, r3, lsl #2
   2b98c:	movcc	sl, #26
   2b990:	bcc	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2b994:	mov	sl, r6
   2b998:	mov	r0, sl
   2b99c:	add	sp, sp, #52	; 0x34
   2b9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9a4:	mov	sl, #16
   2b9a8:	b	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2b9ac:	stm	sp, {r9, fp}
   2b9b0:	mov	r3, r9
   2b9b4:	mov	r2, r8
   2b9b8:	mov	r1, r6
   2b9bc:	mov	r0, r4
   2b9c0:	bl	2a8b0 <flatcc_verify_vector_field@@Base>
   2b9c4:	mov	sl, r0
   2b9c8:	mov	r0, sl
   2b9cc:	add	sp, sp, #52	; 0x34
   2b9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9d4:	ldr	r3, [r0, r2]
   2b9d8:	add	r4, r0, r2
   2b9dc:	cmn	r3, #-1073741823	; 0xc0000001
   2b9e0:	bhi	2b974 <flatcc_verify_union_vector_field@@Base+0x158>
   2b9e4:	lsl	lr, r3, #2
   2b9e8:	sub	r9, ip, r8
   2b9ec:	cmp	r9, lr
   2b9f0:	bcc	2b974 <flatcc_verify_union_vector_field@@Base+0x158>
   2b9f4:	cmp	r7, r3
   2b9f8:	movne	sl, #34	; 0x22
   2b9fc:	bne	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2ba00:	sub	r1, r1, #1
   2ba04:	cmp	r7, #0
   2ba08:	str	r1, [sp, #32]
   2ba0c:	str	r0, [sp, #24]
   2ba10:	str	ip, [sp, #28]
   2ba14:	beq	2b994 <flatcc_verify_union_vector_field@@Base+0x178>
   2ba18:	add	r2, r2, lr
   2ba1c:	add	r7, r0, r2
   2ba20:	add	r5, r5, #4
   2ba24:	add	r9, sp, #24
   2ba28:	b	2ba48 <flatcc_verify_union_vector_field@@Base+0x22c>
   2ba2c:	ldrb	r3, [r5]
   2ba30:	cmp	r3, #0
   2ba34:	bne	2ba94 <flatcc_verify_union_vector_field@@Base+0x278>
   2ba38:	cmp	r4, r7
   2ba3c:	add	r8, r8, #4
   2ba40:	add	r5, r5, #1
   2ba44:	beq	2b994 <flatcc_verify_union_vector_field@@Base+0x178>
   2ba48:	ldr	r3, [r4, #4]!
   2ba4c:	mov	r0, r9
   2ba50:	cmp	r3, #0
   2ba54:	beq	2ba2c <flatcc_verify_union_vector_field@@Base+0x210>
   2ba58:	ldrb	r2, [r5]
   2ba5c:	cmp	r2, #0
   2ba60:	beq	2ba9c <flatcc_verify_union_vector_field@@Base+0x280>
   2ba64:	str	r3, [sp, #44]	; 0x2c
   2ba68:	ldr	r3, [sp, #12]
   2ba6c:	strb	r2, [sp, #36]	; 0x24
   2ba70:	str	r8, [sp, #40]	; 0x28
   2ba74:	blx	r3
   2ba78:	cmp	r0, #0
   2ba7c:	beq	2ba38 <flatcc_verify_union_vector_field@@Base+0x21c>
   2ba80:	mov	r0, r9
   2ba84:	ldr	r3, [sp, #12]
   2ba88:	blx	r3
   2ba8c:	mov	sl, r0
   2ba90:	b	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2ba94:	mov	sl, #32
   2ba98:	b	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2ba9c:	mov	sl, #33	; 0x21
   2baa0:	b	2b8e8 <flatcc_verify_union_vector_field@@Base+0xcc>
   2baa4:	andeq	r0, r0, r0

0002baa8 <grisu3_diy_fp_encode_double@@Base>:
   2baa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2baac:	sub	sp, sp, #60	; 0x3c
   2bab0:	mov	sl, r0
   2bab4:	ldr	lr, [sp, #96]	; 0x60
   2bab8:	mov	fp, r1
   2babc:	cmp	lr, #0
   2bac0:	mov	r6, r3
   2bac4:	movne	lr, #4
   2bac8:	orrs	r3, sl, fp
   2bacc:	sub	r2, r2, r6
   2bad0:	beq	2c03c <grisu3_diy_fp_encode_double@@Base+0x594>
   2bad4:	ldr	r1, [pc, #1380]	; 2c040 <grisu3_diy_fp_encode_double@@Base+0x598>
   2bad8:	mov	r0, #0
   2badc:	and	r0, r0, sl
   2bae0:	and	r1, r1, fp
   2bae4:	orrs	r3, r0, r1
   2bae8:	movne	ip, #0
   2baec:	bne	2bb28 <grisu3_diy_fp_encode_double@@Base+0x80>
   2baf0:	mvn	r4, #9
   2baf4:	lsl	r3, fp, #10
   2baf8:	lsl	r1, sl, #10
   2bafc:	orr	r3, r3, sl, lsr #22
   2bb00:	mov	sl, r1
   2bb04:	ldr	r1, [pc, #1332]	; 2c040 <grisu3_diy_fp_encode_double@@Base+0x598>
   2bb08:	mov	r0, #0
   2bb0c:	and	r0, r0, sl
   2bb10:	and	r1, r1, r3
   2bb14:	mov	fp, r3
   2bb18:	orrs	r3, r0, r1
   2bb1c:	mov	ip, r4
   2bb20:	sub	r4, r4, #10
   2bb24:	beq	2baf4 <grisu3_diy_fp_encode_double@@Base+0x4c>
   2bb28:	cmp	sl, #0
   2bb2c:	sbcs	r3, fp, #0
   2bb30:	blt	2bb4c <grisu3_diy_fp_encode_double@@Base+0xa4>
   2bb34:	adds	sl, sl, sl
   2bb38:	adc	fp, fp, fp
   2bb3c:	cmp	sl, #0
   2bb40:	sbcs	r3, fp, #0
   2bb44:	sub	ip, ip, #1
   2bb48:	bge	2bb34 <grisu3_diy_fp_encode_double@@Base+0x8c>
   2bb4c:	rsb	r3, ip, #0
   2bb50:	cmn	r2, #348	; 0x15c
   2bb54:	lsl	r3, lr, r3
   2bb58:	str	r3, [sp, #20]
   2bb5c:	blt	2c018 <grisu3_diy_fp_encode_double@@Base+0x570>
   2bb60:	cmp	r2, #348	; 0x15c
   2bb64:	bge	2bff4 <grisu3_diy_fp_encode_double@@Base+0x54c>
   2bb68:	add	r1, r2, #348	; 0x15c
   2bb6c:	ldr	r3, [pc, #1232]	; 2c044 <grisu3_diy_fp_encode_double@@Base+0x59c>
   2bb70:	asr	r1, r1, #3
   2bb74:	add	r3, pc, r3
   2bb78:	add	r1, r3, r1, lsl #4
   2bb7c:	ldrsh	r7, [r1, #66]	; 0x42
   2bb80:	ldrd	r4, [r1, #56]	; 0x38
   2bb84:	ldrsh	r1, [r1, #64]	; 0x40
   2bb88:	cmp	r2, r7
   2bb8c:	strd	r4, [sp]
   2bb90:	str	r1, [sp, #40]	; 0x28
   2bb94:	blt	2bfd8 <grisu3_diy_fp_encode_double@@Base+0x530>
   2bb98:	add	r1, r7, #7
   2bb9c:	cmp	r2, r1
   2bba0:	bgt	2bfbc <grisu3_diy_fp_encode_double@@Base+0x514>
   2bba4:	cmp	r2, r7
   2bba8:	beq	2bc98 <grisu3_diy_fp_encode_double@@Base+0x1f0>
   2bbac:	sub	r2, r2, r7
   2bbb0:	sub	r7, r2, #1
   2bbb4:	cmp	r7, #6
   2bbb8:	bhi	2bf9c <grisu3_diy_fp_encode_double@@Base+0x4f4>
   2bbbc:	ldr	r0, [pc, #1156]	; 2c048 <grisu3_diy_fp_encode_double@@Base+0x5a0>
   2bbc0:	lsl	r1, r7, #4
   2bbc4:	add	r0, pc, r0
   2bbc8:	mov	r3, #0
   2bbcc:	ldrd	r4, [r0, r1]
   2bbd0:	add	r1, r0, r1
   2bbd4:	str	r1, [sp, #44]	; 0x2c
   2bbd8:	mov	r8, r4
   2bbdc:	mov	r0, r4
   2bbe0:	strd	r4, [sp, #24]
   2bbe4:	umull	r4, r5, sl, r5
   2bbe8:	mov	r1, #0
   2bbec:	strd	r4, [sp, #32]
   2bbf0:	umull	r4, r5, fp, r8
   2bbf4:	mul	lr, sl, r1
   2bbf8:	mla	r2, fp, r1, r5
   2bbfc:	mla	lr, r8, r3, lr
   2bc00:	ldr	r1, [sp, #28]
   2bc04:	umull	r8, r9, sl, r0
   2bc08:	ldr	r0, [sp, #36]	; 0x24
   2bc0c:	strd	r4, [sp, #48]	; 0x30
   2bc10:	mla	r3, r1, r3, r0
   2bc14:	add	r0, lr, r9
   2bc18:	mov	lr, #0
   2bc1c:	str	r0, [sp, #8]
   2bc20:	str	lr, [sp, #12]
   2bc24:	mov	r4, r2
   2bc28:	mov	r0, r3
   2bc2c:	ldrd	r2, [sp, #8]
   2bc30:	ldr	r8, [sp, #48]	; 0x30
   2bc34:	add	r6, r6, #1
   2bc38:	adds	r2, r2, r8
   2bc3c:	adc	r3, r3, #0
   2bc40:	adds	r0, r0, r4
   2bc44:	ldr	r4, [sp, #28]
   2bc48:	adc	r1, lr, lr
   2bc4c:	adds	r2, r2, #-2147483648	; 0x80000000
   2bc50:	umlal	r0, r1, r4, fp
   2bc54:	mov	fp, r1
   2bc58:	ldr	r1, [sp, #44]	; 0x2c
   2bc5c:	adc	r3, r3, #0
   2bc60:	mov	sl, r0
   2bc64:	ldr	r4, [r1, #8]
   2bc68:	ldr	r1, [sp, #32]
   2bc6c:	add	r7, r6, r7
   2bc70:	adds	r2, r2, r1
   2bc74:	adc	r3, r3, #0
   2bc78:	adds	sl, sl, r3
   2bc7c:	adc	fp, fp, lr
   2bc80:	cmp	r7, #19
   2bc84:	add	ip, ip, r4
   2bc88:	ldrgt	r3, [sp, #20]
   2bc8c:	add	ip, ip, #64	; 0x40
   2bc90:	addgt	r3, r3, #4
   2bc94:	strgt	r3, [sp, #20]
   2bc98:	ldrd	r0, [sp]
   2bc9c:	mov	r3, #0
   2bca0:	mov	r5, #0
   2bca4:	mov	r2, r0
   2bca8:	umull	r6, r7, sl, r1
   2bcac:	umull	r8, r9, fp, r2
   2bcb0:	mul	lr, sl, r3
   2bcb4:	mla	r9, fp, r3, r9
   2bcb8:	ldr	r3, [sp, #4]
   2bcbc:	umull	r0, r1, sl, r2
   2bcc0:	mla	r0, r2, r5, lr
   2bcc4:	mla	lr, r3, r5, r7
   2bcc8:	add	r2, r0, r1
   2bccc:	adds	r2, r2, r8
   2bcd0:	mov	r0, lr
   2bcd4:	ldr	r4, [sp, #4]
   2bcd8:	mov	lr, #0
   2bcdc:	adc	r3, lr, #0
   2bce0:	adds	r0, r0, r9
   2bce4:	adc	r1, lr, lr
   2bce8:	umlal	r0, r1, r4, fp
   2bcec:	adds	r2, r2, #-2147483648	; 0x80000000
   2bcf0:	adc	r3, r3, #0
   2bcf4:	adds	r2, r2, r6
   2bcf8:	adc	r3, r3, #0
   2bcfc:	adds	r6, r3, r0
   2bd00:	ldr	r3, [sp, #40]	; 0x28
   2bd04:	adc	r7, lr, r1
   2bd08:	add	ip, ip, r3
   2bd0c:	ldr	r3, [sp, #20]
   2bd10:	cmp	r3, lr
   2bd14:	moveq	r2, #8
   2bd18:	movne	r2, #9
   2bd1c:	orrs	r1, r6, r7
   2bd20:	add	r2, r3, r2
   2bd24:	add	lr, ip, #64	; 0x40
   2bd28:	beq	2c03c <grisu3_diy_fp_encode_double@@Base+0x594>
   2bd2c:	ldr	r1, [pc, #780]	; 2c040 <grisu3_diy_fp_encode_double@@Base+0x598>
   2bd30:	mov	r0, #0
   2bd34:	and	r0, r0, r6
   2bd38:	and	r1, r1, r7
   2bd3c:	orrs	r3, r0, r1
   2bd40:	bne	2bf74 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2bd44:	add	ip, ip, #54	; 0x36
   2bd48:	lsl	r3, r7, #10
   2bd4c:	lsl	r1, r6, #10
   2bd50:	orr	r3, r3, r6, lsr #22
   2bd54:	mov	r6, r1
   2bd58:	ldr	r1, [pc, #736]	; 2c040 <grisu3_diy_fp_encode_double@@Base+0x598>
   2bd5c:	mov	r0, #0
   2bd60:	and	r1, r1, r3
   2bd64:	and	r0, r0, r6
   2bd68:	mov	r7, r3
   2bd6c:	orrs	r3, r0, r1
   2bd70:	mov	r3, ip
   2bd74:	sub	ip, ip, #10
   2bd78:	beq	2bd48 <grisu3_diy_fp_encode_double@@Base+0x2a0>
   2bd7c:	cmp	r6, #0
   2bd80:	sbcs	r1, r7, #0
   2bd84:	blt	2bda0 <grisu3_diy_fp_encode_double@@Base+0x2f8>
   2bd88:	adds	r6, r6, r6
   2bd8c:	adc	r7, r7, r7
   2bd90:	cmp	r6, #0
   2bd94:	sbcs	r1, r7, #0
   2bd98:	sub	r3, r3, #1
   2bd9c:	bge	2bd88 <grisu3_diy_fp_encode_double@@Base+0x2e0>
   2bda0:	ldr	r0, [pc, #676]	; 2c04c <grisu3_diy_fp_encode_double@@Base+0x5a4>
   2bda4:	sub	lr, lr, r3
   2bda8:	add	r1, r3, #64	; 0x40
   2bdac:	cmp	r1, r0
   2bdb0:	lsl	r2, r2, lr
   2bdb4:	blt	2bef8 <grisu3_diy_fp_encode_double@@Base+0x450>
   2bdb8:	mov	r1, #0
   2bdbc:	mov	lr, r1
   2bdc0:	mov	r0, #4
   2bdc4:	lsr	r4, r6, lr
   2bdc8:	rsb	r6, lr, #32
   2bdcc:	sub	ip, lr, #32
   2bdd0:	orr	r4, r4, r7, lsl r6
   2bdd4:	orr	r4, r4, r7, lsr ip
   2bdd8:	add	ip, r2, r0
   2bddc:	cmp	lr, ip
   2bde0:	add	r3, lr, r3
   2bde4:	lsr	r5, r7, lr
   2bde8:	blt	2be10 <grisu3_diy_fp_encode_double@@Base+0x368>
   2bdec:	adds	r4, r4, #1
   2bdf0:	adc	r5, r5, #0
   2bdf4:	mov	r6, #0
   2bdf8:	and	r7, r5, #2097152	; 0x200000
   2bdfc:	orrs	lr, r6, r7
   2be00:	beq	2be10 <grisu3_diy_fp_encode_double@@Base+0x368>
   2be04:	lsrs	r5, r5, #1
   2be08:	rrx	r4, r4
   2be0c:	add	r3, r3, #1
   2be10:	ldr	r7, [pc, #568]	; 2c050 <grisu3_diy_fp_encode_double@@Base+0x5a8>
   2be14:	mvn	r6, #0
   2be18:	cmp	r5, r7
   2be1c:	cmpeq	r4, r6
   2be20:	bls	2be3c <grisu3_diy_fp_encode_double@@Base+0x394>
   2be24:	lsrs	r5, r5, #1
   2be28:	rrx	r4, r4
   2be2c:	cmp	r5, r7
   2be30:	cmpeq	r4, r6
   2be34:	add	r3, r3, #1
   2be38:	bhi	2be24 <grisu3_diy_fp_encode_double@@Base+0x37c>
   2be3c:	ldr	r8, [pc, #528]	; 2c054 <grisu3_diy_fp_encode_double@@Base+0x5ac>
   2be40:	cmp	r3, r8
   2be44:	movlt	r8, #0
   2be48:	movlt	r9, #0
   2be4c:	blt	2becc <grisu3_diy_fp_encode_double@@Base+0x424>
   2be50:	beq	2bea0 <grisu3_diy_fp_encode_double@@Base+0x3f8>
   2be54:	mov	r6, #0
   2be58:	and	r7, r5, #1048576	; 0x100000
   2be5c:	orrs	lr, r6, r7
   2be60:	addne	r3, r3, #1072	; 0x430
   2be64:	addne	r3, r3, #3
   2be68:	movne	r8, #0
   2be6c:	lslne	r9, r3, #20
   2be70:	beq	2be8c <grisu3_diy_fp_encode_double@@Base+0x3e4>
   2be74:	b	2beb4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   2be78:	mov	r6, #0
   2be7c:	and	r7, r5, #1048576	; 0x100000
   2be80:	orrs	r6, r6, r7
   2be84:	bne	2bf58 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   2be88:	mov	r3, lr
   2be8c:	adds	r4, r4, r4
   2be90:	sub	lr, r3, #1
   2be94:	adc	r5, r5, r5
   2be98:	cmp	lr, r8
   2be9c:	bne	2be78 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   2bea0:	mov	r8, #0
   2bea4:	and	r9, r5, #1048576	; 0x100000
   2bea8:	orrs	r3, r8, r9
   2beac:	movne	r8, #0
   2beb0:	movne	r9, #1048576	; 0x100000
   2beb4:	ldr	r7, [pc, #412]	; 2c058 <grisu3_diy_fp_encode_double@@Base+0x5b0>
   2beb8:	mvn	r6, #0
   2bebc:	and	r4, r4, r6
   2bec0:	and	r5, r5, r7
   2bec4:	orr	r8, r8, r4
   2bec8:	orr	r9, r9, r5
   2becc:	ldr	r3, [sp, #100]	; 0x64
   2bed0:	cmp	ip, r1
   2bed4:	sub	r0, r0, r2
   2bed8:	movgt	ip, #0
   2bedc:	movle	ip, #1
   2bee0:	cmp	r0, r1
   2bee4:	movlt	r0, ip
   2bee8:	orrge	r0, ip, #1
   2beec:	strd	r8, [r3]
   2bef0:	add	sp, sp, #60	; 0x3c
   2bef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bef8:	mvn	r0, #1072	; 0x430
   2befc:	cmp	r1, r0
   2bf00:	blt	2bf6c <grisu3_diy_fp_encode_double@@Base+0x4c4>
   2bf04:	add	r1, r3, #1136	; 0x470
   2bf08:	add	r1, r1, #2
   2bf0c:	rsb	lr, r1, #64	; 0x40
   2bf10:	cmp	lr, #60	; 0x3c
   2bf14:	rsbgt	r1, r1, #2
   2bf18:	ble	2bf7c <grisu3_diy_fp_encode_double@@Base+0x4d4>
   2bf1c:	rsb	r0, r1, #32
   2bf20:	lsr	ip, r6, r1
   2bf24:	orr	ip, ip, r7, lsl r0
   2bf28:	sub	r0, r1, #32
   2bf2c:	lsr	lr, r7, r1
   2bf30:	orr	ip, ip, r7, lsr r0
   2bf34:	asr	r2, r2, r1
   2bf38:	add	r3, r3, r1
   2bf3c:	mov	r1, #0
   2bf40:	mov	r7, lr
   2bf44:	mov	r6, ip
   2bf48:	add	r2, r2, #9
   2bf4c:	mov	r0, r1
   2bf50:	mov	lr, #62	; 0x3e
   2bf54:	b	2bdc4 <grisu3_diy_fp_encode_double@@Base+0x31c>
   2bf58:	add	r3, r3, #1072	; 0x430
   2bf5c:	add	r3, r3, #2
   2bf60:	mov	r8, #0
   2bf64:	lsl	r9, r3, #20
   2bf68:	b	2beb4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   2bf6c:	mov	r1, #2
   2bf70:	b	2bf1c <grisu3_diy_fp_encode_double@@Base+0x474>
   2bf74:	mov	r3, lr
   2bf78:	b	2bd7c <grisu3_diy_fp_encode_double@@Base+0x2d4>
   2bf7c:	rsb	r1, r1, #63	; 0x3f
   2bf80:	mov	ip, #1
   2bf84:	mov	r0, #8
   2bf88:	lsl	r4, ip, r1
   2bf8c:	and	r4, r4, r6
   2bf90:	lsl	r0, r0, r1
   2bf94:	lsl	r1, r4, #3
   2bf98:	b	2bdc4 <grisu3_diy_fp_encode_double@@Base+0x31c>
   2bf9c:	ldr	r1, [pc, #184]	; 2c05c <grisu3_diy_fp_encode_double@@Base+0x5b4>
   2bfa0:	ldr	r0, [pc, #184]	; 2c060 <grisu3_diy_fp_encode_double@@Base+0x5b8>
   2bfa4:	add	r3, r3, #1440	; 0x5a0
   2bfa8:	add	r3, r3, #8
   2bfac:	mov	r2, #185	; 0xb9
   2bfb0:	add	r1, pc, r1
   2bfb4:	add	r0, pc, r0
   2bfb8:	bl	14610 <__assert_fail@plt>
   2bfbc:	ldr	r1, [pc, #160]	; 2c064 <grisu3_diy_fp_encode_double@@Base+0x5bc>
   2bfc0:	ldr	r0, [pc, #160]	; 2c068 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   2bfc4:	add	r3, r3, #24
   2bfc8:	mov	r2, #89	; 0x59
   2bfcc:	add	r1, pc, r1
   2bfd0:	add	r0, pc, r0
   2bfd4:	bl	14610 <__assert_fail@plt>
   2bfd8:	ldr	r1, [pc, #140]	; 2c06c <grisu3_diy_fp_encode_double@@Base+0x5c4>
   2bfdc:	ldr	r0, [pc, #140]	; 2c070 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   2bfe0:	add	r3, r3, #24
   2bfe4:	mov	r2, #88	; 0x58
   2bfe8:	add	r1, pc, r1
   2bfec:	add	r0, pc, r0
   2bff0:	bl	14610 <__assert_fail@plt>
   2bff4:	ldr	r3, [pc, #120]	; 2c074 <grisu3_diy_fp_encode_double@@Base+0x5cc>
   2bff8:	ldr	r1, [pc, #120]	; 2c078 <grisu3_diy_fp_encode_double@@Base+0x5d0>
   2bffc:	ldr	r0, [pc, #120]	; 2c07c <grisu3_diy_fp_encode_double@@Base+0x5d4>
   2c000:	add	r3, pc, r3
   2c004:	mov	r2, #81	; 0x51
   2c008:	add	r3, r3, #24
   2c00c:	add	r1, pc, r1
   2c010:	add	r0, pc, r0
   2c014:	bl	14610 <__assert_fail@plt>
   2c018:	ldr	r3, [pc, #96]	; 2c080 <grisu3_diy_fp_encode_double@@Base+0x5d8>
   2c01c:	ldr	r1, [pc, #96]	; 2c084 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   2c020:	ldr	r0, [pc, #96]	; 2c088 <grisu3_diy_fp_encode_double@@Base+0x5e0>
   2c024:	add	r3, pc, r3
   2c028:	mov	r2, #80	; 0x50
   2c02c:	add	r3, r3, #24
   2c030:	add	r1, pc, r1
   2c034:	add	r0, pc, r0
   2c038:	bl	14610 <__assert_fail@plt>
   2c03c:	bl	14888 <__assert_fail@plt+0x278>
   2c040:			; <UNDEFINED> instruction: 0xffc00000
   2c044:	andeq	r6, r1, ip, lsr #4
   2c048:	andeq	r8, r2, ip, lsl #15
   2c04c:			; <UNDEFINED> instruction: 0xfffffc0e
   2c050:			; <UNDEFINED> instruction: 0x001fffff
   2c054:			; <UNDEFINED> instruction: 0xfffffbce
   2c058:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   2c05c:	andeq	r6, r1, r8, ror r6
   2c060:	andeq	r6, r1, ip, asr r7
   2c064:	andeq	r6, r1, ip, asr r6
   2c068:	andeq	r6, r1, r4, lsr #14
   2c06c:	andeq	r6, r1, r0, asr #12
   2c070:	strdeq	r6, [r1], -r8
   2c074:	andeq	r5, r1, r0, lsr #27
   2c078:	andeq	r6, r1, ip, lsl r6
   2c07c:	andeq	r6, r1, r8, lsr #13
   2c080:	andeq	r5, r1, ip, ror sp
   2c084:	strdeq	r6, [r1], -r8
   2c088:	andeq	r6, r1, r4, ror #12
   2c08c:	cmp	r1, #1000	; 0x3e8
   2c090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c094:	addle	r1, r1, #1
   2c098:	addgt	lr, r0, #1000	; 0x3e8
   2c09c:	mov	r4, #0
   2c0a0:	mov	r5, #0
   2c0a4:	addle	lr, r0, r1
   2c0a8:	addgt	lr, lr, #1
   2c0ac:	cmp	lr, r0
   2c0b0:	sub	sp, sp, #44	; 0x2c
   2c0b4:	mov	fp, r2
   2c0b8:	mov	sl, r0
   2c0bc:	strd	r4, [r2]
   2c0c0:	beq	2c5fc <grisu3_diy_fp_encode_double@@Base+0xb54>
   2c0c4:	ldrb	r0, [r0]
   2c0c8:	cmp	r0, #45	; 0x2d
   2c0cc:	movne	r2, #0
   2c0d0:	movne	r3, sl
   2c0d4:	strne	r2, [sp, #16]
   2c0d8:	beq	2c48c <grisu3_diy_fp_encode_double@@Base+0x9e4>
   2c0dc:	cmp	r0, #48	; 0x30
   2c0e0:	beq	2c4ac <grisu3_diy_fp_encode_double@@Base+0xa04>
   2c0e4:	sub	r2, r0, #49	; 0x31
   2c0e8:	cmp	r2, #8
   2c0ec:	bhi	2c1ec <grisu3_diy_fp_encode_double@@Base+0x744>
   2c0f0:	add	r9, r3, #1
   2c0f4:	sub	r0, r0, #48	; 0x30
   2c0f8:	cmp	lr, r9
   2c0fc:	asr	r1, r0, #31
   2c100:	beq	2ca5c <grisu3_diy_fp_encode_double@@Base+0xfb4>
   2c104:	ldrb	ip, [r3, #1]
   2c108:	sub	r3, ip, #48	; 0x30
   2c10c:	cmp	r3, #9
   2c110:	movhi	r4, r9
   2c114:	movhi	r9, #0
   2c118:	bhi	2c17c <grisu3_diy_fp_encode_double@@Base+0x6d4>
   2c11c:	add	r5, r9, #1
   2c120:	mov	r8, #10
   2c124:	add	r7, pc, #988	; 0x3dc
   2c128:	ldrd	r6, [r7]
   2c12c:	b	2c140 <grisu3_diy_fp_encode_double@@Base+0x698>
   2c130:	cmp	r1, r7
   2c134:	cmpeq	r0, r6
   2c138:	bhi	2c208 <grisu3_diy_fp_encode_double@@Base+0x760>
   2c13c:	mov	r5, r3
   2c140:	umull	r2, r3, r0, r8
   2c144:	mla	r3, r8, r1, r3
   2c148:	adds	r0, r2, ip
   2c14c:	adc	r1, r3, #0
   2c150:	subs	r0, r0, #48	; 0x30
   2c154:	sbc	r1, r1, #0
   2c158:	cmp	r5, lr
   2c15c:	mov	r4, r5
   2c160:	beq	2c890 <grisu3_diy_fp_encode_double@@Base+0xde8>
   2c164:	ldrb	ip, [r5]
   2c168:	add	r3, r5, #1
   2c16c:	sub	r2, ip, #48	; 0x30
   2c170:	cmp	r2, #9
   2c174:	bls	2c130 <grisu3_diy_fp_encode_double@@Base+0x688>
   2c178:	sub	r9, r5, r9
   2c17c:	mov	r8, #0
   2c180:	mov	r2, r8
   2c184:	sub	r3, ip, #49	; 0x31
   2c188:	cmp	r3, #8
   2c18c:	bhi	2c3c8 <grisu3_diy_fp_encode_double@@Base+0x920>
   2c190:	add	r6, r4, #1
   2c194:	cmp	lr, r6
   2c198:	add	r5, r2, #1
   2c19c:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c1a0:	ldrb	ip, [r4, #1]
   2c1a4:	sub	r3, ip, #48	; 0x30
   2c1a8:	cmp	r3, #9
   2c1ac:	bhi	2c3bc <grisu3_diy_fp_encode_double@@Base+0x914>
   2c1b0:	sub	r2, r2, r4
   2c1b4:	add	r4, r4, #2
   2c1b8:	b	2c1cc <grisu3_diy_fp_encode_double@@Base+0x724>
   2c1bc:	ldrb	ip, [r4], #1
   2c1c0:	sub	r3, ip, #48	; 0x30
   2c1c4:	cmp	r3, #9
   2c1c8:	bhi	2c3bc <grisu3_diy_fp_encode_double@@Base+0x914>
   2c1cc:	cmp	r4, lr
   2c1d0:	add	r5, r2, r4
   2c1d4:	mov	r6, r4
   2c1d8:	bne	2c1bc <grisu3_diy_fp_encode_double@@Base+0x714>
   2c1dc:	add	r5, r5, r9
   2c1e0:	mov	r4, lr
   2c1e4:	mov	r8, #1
   2c1e8:	b	2c25c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2c1ec:	ldr	r3, [sp, #16]
   2c1f0:	cmp	r3, #0
   2c1f4:	moveq	r4, sl
   2c1f8:	movne	r4, #0
   2c1fc:	mov	r0, r4
   2c200:	add	sp, sp, #44	; 0x2c
   2c204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c208:	cmp	ip, #52	; 0x34
   2c20c:	movls	r2, #0
   2c210:	movhi	r2, #1
   2c214:	adds	r0, r0, r2
   2c218:	adc	r1, r1, #0
   2c21c:	cmp	ip, #48	; 0x30
   2c220:	sub	r9, r4, r9
   2c224:	movne	r8, #1
   2c228:	movne	r2, #0
   2c22c:	beq	2c244 <grisu3_diy_fp_encode_double@@Base+0x79c>
   2c230:	b	2c184 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2c234:	ldrb	ip, [r3]
   2c238:	add	r3, r3, #1
   2c23c:	cmp	ip, #48	; 0x30
   2c240:	bne	2c500 <grisu3_diy_fp_encode_double@@Base+0xa58>
   2c244:	cmp	lr, r3
   2c248:	mov	r4, r3
   2c24c:	sub	r2, r3, r5
   2c250:	bne	2c234 <grisu3_diy_fp_encode_double@@Base+0x78c>
   2c254:	add	r5, r2, r9
   2c258:	mov	r8, #1
   2c25c:	cmp	lr, r4
   2c260:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c264:	orrs	r3, r0, r1
   2c268:	moveq	r2, #1
   2c26c:	movne	r2, #0
   2c270:	cmn	r5, #324	; 0x144
   2c274:	movge	r3, #0
   2c278:	movlt	r3, #1
   2c27c:	orrs	r3, r2, r3
   2c280:	bne	2c398 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   2c284:	ldr	r3, [pc, #652]	; 2c518 <grisu3_diy_fp_encode_double@@Base+0xa70>
   2c288:	cmp	r5, r3
   2c28c:	bgt	2c528 <grisu3_diy_fp_encode_double@@Base+0xa80>
   2c290:	ldr	r3, [pc, #644]	; 2c51c <grisu3_diy_fp_encode_double@@Base+0xa74>
   2c294:	mvn	r2, #0
   2c298:	cmp	r1, r3
   2c29c:	cmpeq	r0, r2
   2c2a0:	movls	r3, #1
   2c2a4:	movhi	r3, #0
   2c2a8:	cmp	r5, #22
   2c2ac:	movhi	r3, #0
   2c2b0:	andls	r3, r3, #1
   2c2b4:	cmp	r3, #0
   2c2b8:	beq	2c624 <grisu3_diy_fp_encode_double@@Base+0xb7c>
   2c2bc:	bl	3d830 <flatcc_json_printer_clear@@Base+0x588>
   2c2c0:	sub	r9, r5, r9
   2c2c4:	add	r3, r9, #22
   2c2c8:	vmov	d7, r0, r1
   2c2cc:	cmp	r3, #44	; 0x2c
   2c2d0:	addls	pc, pc, r3, lsl #2
   2c2d4:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c2d8:	b	2c788 <grisu3_diy_fp_encode_double@@Base+0xce0>
   2c2dc:	b	2c794 <grisu3_diy_fp_encode_double@@Base+0xcec>
   2c2e0:	b	2c77c <grisu3_diy_fp_encode_double@@Base+0xcd4>
   2c2e4:	b	2c854 <grisu3_diy_fp_encode_double@@Base+0xdac>
   2c2e8:	b	2c848 <grisu3_diy_fp_encode_double@@Base+0xda0>
   2c2ec:	b	2c83c <grisu3_diy_fp_encode_double@@Base+0xd94>
   2c2f0:	b	2c830 <grisu3_diy_fp_encode_double@@Base+0xd88>
   2c2f4:	b	2c824 <grisu3_diy_fp_encode_double@@Base+0xd7c>
   2c2f8:	b	2c818 <grisu3_diy_fp_encode_double@@Base+0xd70>
   2c2fc:	b	2c80c <grisu3_diy_fp_encode_double@@Base+0xd64>
   2c300:	b	2c800 <grisu3_diy_fp_encode_double@@Base+0xd58>
   2c304:	b	2c7f4 <grisu3_diy_fp_encode_double@@Base+0xd4c>
   2c308:	b	2c7e8 <grisu3_diy_fp_encode_double@@Base+0xd40>
   2c30c:	b	2c7dc <grisu3_diy_fp_encode_double@@Base+0xd34>
   2c310:	b	2c7d0 <grisu3_diy_fp_encode_double@@Base+0xd28>
   2c314:	b	2c7c4 <grisu3_diy_fp_encode_double@@Base+0xd1c>
   2c318:	b	2c7b8 <grisu3_diy_fp_encode_double@@Base+0xd10>
   2c31c:	b	2c7ac <grisu3_diy_fp_encode_double@@Base+0xd04>
   2c320:	b	2c7a0 <grisu3_diy_fp_encode_double@@Base+0xcf8>
   2c324:	b	2c704 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   2c328:	b	2c6f8 <grisu3_diy_fp_encode_double@@Base+0xc50>
   2c32c:	b	2c6ec <grisu3_diy_fp_encode_double@@Base+0xc44>
   2c330:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c334:	b	2c6d4 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   2c338:	b	2c6c8 <grisu3_diy_fp_encode_double@@Base+0xc20>
   2c33c:	b	2c6bc <grisu3_diy_fp_encode_double@@Base+0xc14>
   2c340:	b	2c6b0 <grisu3_diy_fp_encode_double@@Base+0xc08>
   2c344:	b	2c6a4 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   2c348:	b	2c698 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   2c34c:	b	2c68c <grisu3_diy_fp_encode_double@@Base+0xbe4>
   2c350:	b	2c680 <grisu3_diy_fp_encode_double@@Base+0xbd8>
   2c354:	b	2c674 <grisu3_diy_fp_encode_double@@Base+0xbcc>
   2c358:	b	2c668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c35c:	b	2c65c <grisu3_diy_fp_encode_double@@Base+0xbb4>
   2c360:	b	2c38c <grisu3_diy_fp_encode_double@@Base+0x8e4>
   2c364:	b	2c764 <grisu3_diy_fp_encode_double@@Base+0xcbc>
   2c368:	b	2c758 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   2c36c:	b	2c74c <grisu3_diy_fp_encode_double@@Base+0xca4>
   2c370:	b	2c740 <grisu3_diy_fp_encode_double@@Base+0xc98>
   2c374:	b	2c734 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   2c378:	b	2c728 <grisu3_diy_fp_encode_double@@Base+0xc80>
   2c37c:	b	2c71c <grisu3_diy_fp_encode_double@@Base+0xc74>
   2c380:	b	2c710 <grisu3_diy_fp_encode_double@@Base+0xc68>
   2c384:	b	2c770 <grisu3_diy_fp_encode_double@@Base+0xcc8>
   2c388:	b	2c6e0 <grisu3_diy_fp_encode_double@@Base+0xc38>
   2c38c:	vldr	d6, [pc, #380]	; 2c510 <grisu3_diy_fp_encode_double@@Base+0xa68>
   2c390:	vmul.f64	d7, d7, d6
   2c394:	vstr	d7, [fp]
   2c398:	ldr	r3, [sp, #16]
   2c39c:	cmp	r3, #0
   2c3a0:	beq	2c1fc <grisu3_diy_fp_encode_double@@Base+0x754>
   2c3a4:	vldr	d7, [fp]
   2c3a8:	mov	r0, r4
   2c3ac:	vneg.f64	d7, d7
   2c3b0:	vstr	d7, [fp]
   2c3b4:	add	sp, sp, #44	; 0x2c
   2c3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3bc:	mov	r2, r5
   2c3c0:	mov	r4, r6
   2c3c4:	mov	r8, #1
   2c3c8:	cmp	ip, #46	; 0x2e
   2c3cc:	beq	2c540 <grisu3_diy_fp_encode_double@@Base+0xa98>
   2c3d0:	cmp	lr, r4
   2c3d4:	add	r5, r2, r9
   2c3d8:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c3dc:	orr	ip, ip, #32
   2c3e0:	cmp	ip, #101	; 0x65
   2c3e4:	bne	2c264 <grisu3_diy_fp_encode_double@@Base+0x7bc>
   2c3e8:	sub	r3, lr, r4
   2c3ec:	cmp	r3, #1
   2c3f0:	ble	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c3f4:	ldrb	r2, [r4, #1]
   2c3f8:	cmp	r2, #43	; 0x2b
   2c3fc:	beq	2c874 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   2c400:	cmp	r2, #45	; 0x2d
   2c404:	beq	2ca38 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2c408:	add	ip, r4, #1
   2c40c:	mov	r3, #0
   2c410:	str	r3, [sp, #8]
   2c414:	sub	r2, r2, #48	; 0x30
   2c418:	uxtb	r3, r2
   2c41c:	cmp	r3, #9
   2c420:	bhi	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c424:	add	r4, ip, #1
   2c428:	cmp	lr, r4
   2c42c:	beq	2c478 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   2c430:	ldrb	r3, [ip, #1]
   2c434:	sub	r6, r3, #48	; 0x30
   2c438:	cmp	r6, #9
   2c43c:	bhi	2c860 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   2c440:	ldr	r7, [pc, #216]	; 2c520 <grisu3_diy_fp_encode_double@@Base+0xa78>
   2c444:	add	ip, ip, #2
   2c448:	b	2c45c <grisu3_diy_fp_encode_double@@Base+0x9b4>
   2c44c:	ldrb	r3, [ip], #1
   2c450:	sub	r6, r3, #48	; 0x30
   2c454:	cmp	r6, #9
   2c458:	bhi	2c860 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   2c45c:	add	r4, r2, r2, lsl #2
   2c460:	cmp	r2, r7
   2c464:	add	r4, r3, r4, lsl #1
   2c468:	suble	r2, r4, #48	; 0x30
   2c46c:	cmp	lr, ip
   2c470:	mov	r4, ip
   2c474:	bne	2c44c <grisu3_diy_fp_encode_double@@Base+0x9a4>
   2c478:	ldr	r3, [sp, #8]
   2c47c:	cmp	r3, #0
   2c480:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c484:	sub	r5, r5, r2
   2c488:	b	2c25c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2c48c:	add	r3, sl, #1
   2c490:	cmp	lr, r3
   2c494:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c498:	ldrb	r0, [sl, #1]
   2c49c:	mov	r2, #1
   2c4a0:	str	r2, [sp, #16]
   2c4a4:	cmp	r0, #48	; 0x30
   2c4a8:	bne	2c0e4 <grisu3_diy_fp_encode_double@@Base+0x63c>
   2c4ac:	add	r4, r3, #1
   2c4b0:	cmp	lr, r4
   2c4b4:	beq	2c60c <grisu3_diy_fp_encode_double@@Base+0xb64>
   2c4b8:	ldrb	ip, [r3, #1]
   2c4bc:	orr	r2, ip, #32
   2c4c0:	cmp	r2, #120	; 0x78
   2c4c4:	moveq	r4, sl
   2c4c8:	beq	2c1fc <grisu3_diy_fp_encode_double@@Base+0x754>
   2c4cc:	cmp	ip, #48	; 0x30
   2c4d0:	bne	2c4f0 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2c4d4:	add	r3, r3, #2
   2c4d8:	cmp	r3, lr
   2c4dc:	mov	r4, r3
   2c4e0:	beq	2c60c <grisu3_diy_fp_encode_double@@Base+0xb64>
   2c4e4:	ldrb	ip, [r3], #1
   2c4e8:	cmp	ip, #48	; 0x30
   2c4ec:	beq	2c4d8 <grisu3_diy_fp_encode_double@@Base+0xa30>
   2c4f0:	mov	r9, r4
   2c4f4:	mov	r0, #0
   2c4f8:	mov	r1, #0
   2c4fc:	b	2c108 <grisu3_diy_fp_encode_double@@Base+0x660>
   2c500:	mov	r8, #1
   2c504:	b	2c184 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   2c508:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2c50c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2c510:	andge	r0, r0, #0
   2c514:	rsbmi	r1, sp, #148, 20	; 0x94000
   2c518:	andeq	r0, r0, r6, lsr r1
   2c51c:			; <UNDEFINED> instruction: 0x001fffff
   2c520:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2c524:	svcvc	0x00f00000	; IMB
   2c528:	ldr	r3, [pc, #-12]	; 2c524 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   2c52c:	mov	r2, #0
   2c530:	strd	r2, [fp]
   2c534:	b	2c398 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   2c538:	mov	r4, #0
   2c53c:	b	2c1fc <grisu3_diy_fp_encode_double@@Base+0x754>
   2c540:	ldrb	r3, [r4, #1]
   2c544:	add	ip, r4, #1
   2c548:	mov	r5, ip
   2c54c:	str	ip, [sp, #20]
   2c550:	sub	ip, r3, #48	; 0x30
   2c554:	cmp	ip, #9
   2c558:	bhi	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c55c:	cmp	lr, r5
   2c560:	beq	2ca78 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   2c564:	add	r7, pc, #980	; 0x3d4
   2c568:	ldrd	r6, [r7]
   2c56c:	cmp	r1, r7
   2c570:	cmpeq	r0, r6
   2c574:	bhi	2ca68 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   2c578:	add	r4, r4, #2
   2c57c:	strd	r6, [sp, #8]
   2c580:	mov	ip, #10
   2c584:	str	r9, [sp, #24]
   2c588:	str	r8, [sp, #28]
   2c58c:	b	2c5b4 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   2c590:	ldrb	r3, [r4]
   2c594:	add	r4, r4, #1
   2c598:	sub	r5, r3, #48	; 0x30
   2c59c:	cmp	r5, #9
   2c5a0:	bhi	2c898 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   2c5a4:	ldrd	r8, [sp, #8]
   2c5a8:	cmp	r1, r9
   2c5ac:	cmpeq	r0, r8
   2c5b0:	bhi	2c9f8 <grisu3_diy_fp_encode_double@@Base+0xf50>
   2c5b4:	umull	r6, r7, r0, ip
   2c5b8:	mla	r7, ip, r1, r7
   2c5bc:	adds	r0, r6, r3
   2c5c0:	adc	r1, r7, #0
   2c5c4:	subs	r0, r0, #48	; 0x30
   2c5c8:	sbc	r1, r1, #0
   2c5cc:	cmp	r4, lr
   2c5d0:	sub	r2, r2, #1
   2c5d4:	mov	r6, r4
   2c5d8:	bne	2c590 <grisu3_diy_fp_encode_double@@Base+0xae8>
   2c5dc:	ldr	r3, [sp, #20]
   2c5e0:	ldr	r9, [sp, #24]
   2c5e4:	ldr	r8, [sp, #28]
   2c5e8:	sub	r3, lr, r3
   2c5ec:	mov	r4, lr
   2c5f0:	add	r9, r9, r3
   2c5f4:	add	r5, r2, r9
   2c5f8:	b	2c25c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2c5fc:	mov	r4, lr
   2c600:	mov	r0, r4
   2c604:	add	sp, sp, #44	; 0x2c
   2c608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c60c:	mov	r9, #0
   2c610:	mov	r0, #0
   2c614:	mov	r1, #0
   2c618:	mov	r5, r9
   2c61c:	mov	r8, #0
   2c620:	b	2c25c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2c624:	stm	sp, {r8, fp}
   2c628:	mov	r3, r9
   2c62c:	mov	r2, r5
   2c630:	bl	2baa8 <grisu3_diy_fp_encode_double@@Base>
   2c634:	cmp	r0, #0
   2c638:	bne	2c398 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   2c63c:	mov	r0, sl
   2c640:	add	r1, sp, #36	; 0x24
   2c644:	bl	145d4 <strtod@plt>
   2c648:	ldr	r3, [sp, #36]	; 0x24
   2c64c:	cmp	r4, r3
   2c650:	movcs	r4, r3
   2c654:	vstr	d0, [fp]
   2c658:	b	2c1fc <grisu3_diy_fp_encode_double@@Base+0x754>
   2c65c:	vldr	d6, [pc, #740]	; 2c948 <grisu3_diy_fp_encode_double@@Base+0xea0>
   2c660:	vmul.f64	d7, d7, d6
   2c664:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c668:	vldr	d6, [pc, #736]	; 2c950 <grisu3_diy_fp_encode_double@@Base+0xea8>
   2c66c:	vmul.f64	d7, d7, d6
   2c670:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c674:	vldr	d6, [pc, #732]	; 2c958 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   2c678:	vmul.f64	d7, d7, d6
   2c67c:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c680:	vldr	d6, [pc, #728]	; 2c960 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   2c684:	vmul.f64	d7, d7, d6
   2c688:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c68c:	vldr	d6, [pc, #724]	; 2c968 <grisu3_diy_fp_encode_double@@Base+0xec0>
   2c690:	vmul.f64	d7, d7, d6
   2c694:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c698:	vldr	d6, [pc, #720]	; 2c970 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2c69c:	vmul.f64	d7, d7, d6
   2c6a0:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c6a4:	vldr	d6, [pc, #716]	; 2c978 <grisu3_diy_fp_encode_double@@Base+0xed0>
   2c6a8:	vmul.f64	d7, d7, d6
   2c6ac:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c6b0:	vldr	d6, [pc, #712]	; 2c980 <grisu3_diy_fp_encode_double@@Base+0xed8>
   2c6b4:	vmul.f64	d7, d7, d6
   2c6b8:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c6bc:	vldr	d6, [pc, #708]	; 2c988 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2c6c0:	vmul.f64	d7, d7, d6
   2c6c4:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c6c8:	vldr	d6, [pc, #704]	; 2c990 <grisu3_diy_fp_encode_double@@Base+0xee8>
   2c6cc:	vmul.f64	d7, d7, d6
   2c6d0:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c6d4:	vldr	d6, [pc, #700]	; 2c998 <grisu3_diy_fp_encode_double@@Base+0xef0>
   2c6d8:	vmul.f64	d7, d7, d6
   2c6dc:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c6e0:	vldr	d6, [pc, #696]	; 2c9a0 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2c6e4:	vmul.f64	d7, d7, d6
   2c6e8:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c6ec:	vldr	d6, [pc, #676]	; 2c998 <grisu3_diy_fp_encode_double@@Base+0xef0>
   2c6f0:	vdiv.f64	d7, d7, d6
   2c6f4:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c6f8:	vldr	d6, [pc, #656]	; 2c990 <grisu3_diy_fp_encode_double@@Base+0xee8>
   2c6fc:	vdiv.f64	d7, d7, d6
   2c700:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c704:	vldr	d6, [pc, #636]	; 2c988 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2c708:	vdiv.f64	d7, d7, d6
   2c70c:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c710:	vldr	d6, [pc, #656]	; 2c9a8 <grisu3_diy_fp_encode_double@@Base+0xf00>
   2c714:	vmul.f64	d7, d7, d6
   2c718:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c71c:	vldr	d6, [pc, #652]	; 2c9b0 <grisu3_diy_fp_encode_double@@Base+0xf08>
   2c720:	vmul.f64	d7, d7, d6
   2c724:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c728:	vldr	d6, [pc, #648]	; 2c9b8 <grisu3_diy_fp_encode_double@@Base+0xf10>
   2c72c:	vmul.f64	d7, d7, d6
   2c730:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c734:	vldr	d6, [pc, #644]	; 2c9c0 <grisu3_diy_fp_encode_double@@Base+0xf18>
   2c738:	vmul.f64	d7, d7, d6
   2c73c:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c740:	vldr	d6, [pc, #640]	; 2c9c8 <grisu3_diy_fp_encode_double@@Base+0xf20>
   2c744:	vmul.f64	d7, d7, d6
   2c748:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c74c:	vldr	d6, [pc, #636]	; 2c9d0 <grisu3_diy_fp_encode_double@@Base+0xf28>
   2c750:	vmul.f64	d7, d7, d6
   2c754:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c758:	vldr	d6, [pc, #632]	; 2c9d8 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2c75c:	vmul.f64	d7, d7, d6
   2c760:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c764:	vldr	d6, [pc, #628]	; 2c9e0 <grisu3_diy_fp_encode_double@@Base+0xf38>
   2c768:	vmul.f64	d7, d7, d6
   2c76c:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c770:	vldr	d6, [pc, #624]	; 2c9e8 <grisu3_diy_fp_encode_double@@Base+0xf40>
   2c774:	vmul.f64	d7, d7, d6
   2c778:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c77c:	vldr	d6, [pc, #548]	; 2c9a8 <grisu3_diy_fp_encode_double@@Base+0xf00>
   2c780:	vdiv.f64	d7, d7, d6
   2c784:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c788:	vldr	d6, [pc, #528]	; 2c9a0 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2c78c:	vdiv.f64	d7, d7, d6
   2c790:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c794:	vldr	d6, [pc, #588]	; 2c9e8 <grisu3_diy_fp_encode_double@@Base+0xf40>
   2c798:	vdiv.f64	d7, d7, d6
   2c79c:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c7a0:	vldr	d6, [pc, #472]	; 2c980 <grisu3_diy_fp_encode_double@@Base+0xed8>
   2c7a4:	vdiv.f64	d7, d7, d6
   2c7a8:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c7ac:	vldr	d6, [pc, #452]	; 2c978 <grisu3_diy_fp_encode_double@@Base+0xed0>
   2c7b0:	vdiv.f64	d7, d7, d6
   2c7b4:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c7b8:	vldr	d6, [pc, #432]	; 2c970 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2c7bc:	vdiv.f64	d7, d7, d6
   2c7c0:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c7c4:	vldr	d6, [pc, #412]	; 2c968 <grisu3_diy_fp_encode_double@@Base+0xec0>
   2c7c8:	vdiv.f64	d7, d7, d6
   2c7cc:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c7d0:	vldr	d6, [pc, #392]	; 2c960 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   2c7d4:	vdiv.f64	d7, d7, d6
   2c7d8:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c7dc:	vldr	d6, [pc, #372]	; 2c958 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   2c7e0:	vdiv.f64	d7, d7, d6
   2c7e4:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c7e8:	vldr	d6, [pc, #352]	; 2c950 <grisu3_diy_fp_encode_double@@Base+0xea8>
   2c7ec:	vdiv.f64	d7, d7, d6
   2c7f0:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c7f4:	vldr	d6, [pc, #332]	; 2c948 <grisu3_diy_fp_encode_double@@Base+0xea0>
   2c7f8:	vdiv.f64	d7, d7, d6
   2c7fc:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c800:	vldr	d6, [pc, #488]	; 2c9f0 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2c804:	vdiv.f64	d7, d7, d6
   2c808:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c80c:	vldr	d6, [pc, #460]	; 2c9e0 <grisu3_diy_fp_encode_double@@Base+0xf38>
   2c810:	vdiv.f64	d7, d7, d6
   2c814:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c818:	vldr	d6, [pc, #440]	; 2c9d8 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2c81c:	vdiv.f64	d7, d7, d6
   2c820:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c824:	vldr	d6, [pc, #420]	; 2c9d0 <grisu3_diy_fp_encode_double@@Base+0xf28>
   2c828:	vdiv.f64	d7, d7, d6
   2c82c:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c830:	vldr	d6, [pc, #400]	; 2c9c8 <grisu3_diy_fp_encode_double@@Base+0xf20>
   2c834:	vdiv.f64	d7, d7, d6
   2c838:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c83c:	vldr	d6, [pc, #380]	; 2c9c0 <grisu3_diy_fp_encode_double@@Base+0xf18>
   2c840:	vdiv.f64	d7, d7, d6
   2c844:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c848:	vldr	d6, [pc, #360]	; 2c9b8 <grisu3_diy_fp_encode_double@@Base+0xf10>
   2c84c:	vdiv.f64	d7, d7, d6
   2c850:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c854:	vldr	d6, [pc, #340]	; 2c9b0 <grisu3_diy_fp_encode_double@@Base+0xf08>
   2c858:	vdiv.f64	d7, d7, d6
   2c85c:	b	2c394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2c860:	ldr	r3, [sp, #8]
   2c864:	cmp	r3, #0
   2c868:	bne	2c484 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   2c86c:	add	r5, r5, r2
   2c870:	b	2c264 <grisu3_diy_fp_encode_double@@Base+0x7bc>
   2c874:	add	ip, r4, #2
   2c878:	cmp	lr, ip
   2c87c:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c880:	mov	r3, #0
   2c884:	ldrb	r2, [r4, #2]
   2c888:	str	r3, [sp, #8]
   2c88c:	b	2c414 <grisu3_diy_fp_encode_double@@Base+0x96c>
   2c890:	sub	r9, lr, r9
   2c894:	b	2c618 <grisu3_diy_fp_encode_double@@Base+0xb70>
   2c898:	ldr	r3, [sp, #20]
   2c89c:	ldr	r9, [sp, #24]
   2c8a0:	sub	r3, r6, r3
   2c8a4:	ldr	r8, [sp, #28]
   2c8a8:	add	r9, r9, r3
   2c8ac:	ldrb	ip, [r6]
   2c8b0:	cmp	ip, #48	; 0x30
   2c8b4:	bne	2ca54 <grisu3_diy_fp_encode_double@@Base+0xfac>
   2c8b8:	sub	r3, r2, r6
   2c8bc:	add	r6, r6, #1
   2c8c0:	cmp	r6, lr
   2c8c4:	mov	r4, r6
   2c8c8:	add	r2, r3, r6
   2c8cc:	beq	2c5f4 <grisu3_diy_fp_encode_double@@Base+0xb4c>
   2c8d0:	ldrb	ip, [r6], #1
   2c8d4:	cmp	ip, #48	; 0x30
   2c8d8:	beq	2c8c0 <grisu3_diy_fp_encode_double@@Base+0xe18>
   2c8dc:	sub	r3, ip, #49	; 0x31
   2c8e0:	cmp	r3, #8
   2c8e4:	bhi	2c938 <grisu3_diy_fp_encode_double@@Base+0xe90>
   2c8e8:	add	r3, r4, #1
   2c8ec:	cmp	lr, r3
   2c8f0:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2c8f4:	ldrb	ip, [r4, #1]
   2c8f8:	sub	r5, ip, #48	; 0x30
   2c8fc:	cmp	r5, #9
   2c900:	bhi	2c930 <grisu3_diy_fp_encode_double@@Base+0xe88>
   2c904:	add	r3, r4, #2
   2c908:	b	2c920 <grisu3_diy_fp_encode_double@@Base+0xe78>
   2c90c:	ldrb	ip, [r3]
   2c910:	add	r3, r3, #1
   2c914:	sub	r5, ip, #48	; 0x30
   2c918:	cmp	r5, #9
   2c91c:	bhi	2c934 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   2c920:	cmp	r3, lr
   2c924:	mov	r4, r3
   2c928:	bne	2c90c <grisu3_diy_fp_encode_double@@Base+0xe64>
   2c92c:	b	2c254 <grisu3_diy_fp_encode_double@@Base+0x7ac>
   2c930:	mov	r4, r3
   2c934:	mov	r8, #1
   2c938:	add	r5, r2, r9
   2c93c:	b	2c3dc <grisu3_diy_fp_encode_double@@Base+0x934>
   2c940:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2c944:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2c948:	stmda	r0, {}	; <UNPREDICTABLE>
   2c94c:	eorsmi	r4, r7, #7733248	; 0x760000
   2c950:	andcs	r0, r0, r0
   2c954:	andmi	sl, r2, #95	; 0x5f
   2c958:	andeq	r0, r0, r0
   2c95c:	bicmi	ip, sp, r5, ror #26
   2c960:	andeq	r0, r0, r0
   2c964:	orrsmi	sp, r7, r4, lsl #15
   2c968:	andeq	r0, r0, r0
   2c96c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2c970:	andeq	r0, r0, r0
   2c974:	smlawbmi	lr, r0, r4, r8
   2c978:	andeq	r0, r0, r0
   2c97c:	rscsmi	r6, r8, r0, lsl #20
   2c980:	andeq	r0, r0, r0
   2c984:	sbcmi	r8, r3, r0, lsl #16
   2c988:	andeq	r0, r0, r0
   2c98c:	addmi	r4, pc, r0
   2c990:	andeq	r0, r0, r0
   2c994:	subsmi	r0, r9, r0
   2c998:	andeq	r0, r0, r0
   2c99c:	eormi	r0, r4, r0
   2c9a0:			; <UNDEFINED> instruction: 0x064dd592
   2c9a4:	strmi	pc, [r0], #207	; 0xcf
   2c9a8:	ldmvc	r5!, {r6, sl, fp, pc}
   2c9ac:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2c9b0:	addsvs	r3, r1, r0, lsl #26
   2c9b4:	mvnmi	r5, #228, 16	; 0xe40000
   2c9b8:	strbvs	ip, [lr, -r0, lsl #16]
   2c9bc:			; <UNDEFINED> instruction: 0x43abc16d
   2c9c0:	ldrbhi	sl, [r8]
   2c9c4:	cmnmi	r6, #1459617792	; 0x57000000
   2c9c8:	strbcc	r8, [r0, r0]!
   2c9cc:	movtmi	ip, #4985	; 0x1379
   2c9d0:	ldrtcs	r0, [r4], -r0
   2c9d4:	movwmi	r6, #52213	; 0xcbf5
   2c9d8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2c9dc:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2c9e0:	strb	r0, [r0, #-0]
   2c9e4:	adcmi	r3, r2, #156	; 0x9c
   2c9e8:	usatle	lr, #2, r0, asr #30
   2c9ec:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2c9f0:	andge	r0, r0, #0
   2c9f4:	rsbmi	r1, sp, #148, 20	; 0x94000
   2c9f8:	ldr	r8, [sp, #28]
   2c9fc:	ldr	ip, [sp, #20]
   2ca00:	cmp	r8, #0
   2ca04:	ldr	r9, [sp, #24]
   2ca08:	sub	r8, r6, ip
   2ca0c:	bne	2ca24 <grisu3_diy_fp_encode_double@@Base+0xf7c>
   2ca10:	cmp	r3, #52	; 0x34
   2ca14:	movls	r3, #0
   2ca18:	movhi	r3, #1
   2ca1c:	adds	r0, r0, r3
   2ca20:	adc	r1, r1, #0
   2ca24:	cmp	lr, r6
   2ca28:	add	r9, r9, r8
   2ca2c:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2ca30:	mov	r8, #1
   2ca34:	b	2c8ac <grisu3_diy_fp_encode_double@@Base+0xe04>
   2ca38:	add	ip, r4, #2
   2ca3c:	cmp	lr, ip
   2ca40:	beq	2c538 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2ca44:	mov	r3, #1
   2ca48:	ldrb	r2, [r4, #2]
   2ca4c:	str	r3, [sp, #8]
   2ca50:	b	2c414 <grisu3_diy_fp_encode_double@@Base+0x96c>
   2ca54:	mov	r4, r6
   2ca58:	b	2c8dc <grisu3_diy_fp_encode_double@@Base+0xe34>
   2ca5c:	mov	r4, lr
   2ca60:	mov	r9, #0
   2ca64:	b	2c618 <grisu3_diy_fp_encode_double@@Base+0xb70>
   2ca68:	cmp	r8, #0
   2ca6c:	bne	2ca84 <grisu3_diy_fp_encode_double@@Base+0xfdc>
   2ca70:	ldr	r6, [sp, #20]
   2ca74:	b	2ca10 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2ca78:	mov	r4, lr
   2ca7c:	mov	r3, #0
   2ca80:	b	2c5f0 <grisu3_diy_fp_encode_double@@Base+0xb48>
   2ca84:	ldr	r6, [sp, #20]
   2ca88:	b	2c8ac <grisu3_diy_fp_encode_double@@Base+0xe04>

0002ca8c <flatcc_json_parser_error_string@@Base>:
   2ca8c:	cmp	r0, #34	; 0x22
   2ca90:	addls	pc, pc, r0, lsl #2
   2ca94:	b	2ccc8 <flatcc_json_parser_error_string@@Base+0x23c>
   2ca98:	b	2cb24 <flatcc_json_parser_error_string@@Base+0x98>
   2ca9c:	b	2ccbc <flatcc_json_parser_error_string@@Base+0x230>
   2caa0:	b	2ccb0 <flatcc_json_parser_error_string@@Base+0x224>
   2caa4:	b	2cca4 <flatcc_json_parser_error_string@@Base+0x218>
   2caa8:	b	2cc98 <flatcc_json_parser_error_string@@Base+0x20c>
   2caac:	b	2cc8c <flatcc_json_parser_error_string@@Base+0x200>
   2cab0:	b	2cc80 <flatcc_json_parser_error_string@@Base+0x1f4>
   2cab4:	b	2cc74 <flatcc_json_parser_error_string@@Base+0x1e8>
   2cab8:	b	2cc68 <flatcc_json_parser_error_string@@Base+0x1dc>
   2cabc:	b	2cc5c <flatcc_json_parser_error_string@@Base+0x1d0>
   2cac0:	b	2cc50 <flatcc_json_parser_error_string@@Base+0x1c4>
   2cac4:	b	2cc44 <flatcc_json_parser_error_string@@Base+0x1b8>
   2cac8:	b	2cc38 <flatcc_json_parser_error_string@@Base+0x1ac>
   2cacc:	b	2cc2c <flatcc_json_parser_error_string@@Base+0x1a0>
   2cad0:	b	2cc20 <flatcc_json_parser_error_string@@Base+0x194>
   2cad4:	b	2cc14 <flatcc_json_parser_error_string@@Base+0x188>
   2cad8:	b	2cc08 <flatcc_json_parser_error_string@@Base+0x17c>
   2cadc:	b	2cbfc <flatcc_json_parser_error_string@@Base+0x170>
   2cae0:	b	2cbf0 <flatcc_json_parser_error_string@@Base+0x164>
   2cae4:	b	2cbe4 <flatcc_json_parser_error_string@@Base+0x158>
   2cae8:	b	2cbd8 <flatcc_json_parser_error_string@@Base+0x14c>
   2caec:	b	2cbcc <flatcc_json_parser_error_string@@Base+0x140>
   2caf0:	b	2cbc0 <flatcc_json_parser_error_string@@Base+0x134>
   2caf4:	b	2cbb4 <flatcc_json_parser_error_string@@Base+0x128>
   2caf8:	b	2cba8 <flatcc_json_parser_error_string@@Base+0x11c>
   2cafc:	b	2cb9c <flatcc_json_parser_error_string@@Base+0x110>
   2cb00:	b	2cb90 <flatcc_json_parser_error_string@@Base+0x104>
   2cb04:	b	2cb84 <flatcc_json_parser_error_string@@Base+0xf8>
   2cb08:	b	2cb78 <flatcc_json_parser_error_string@@Base+0xec>
   2cb0c:	b	2cb6c <flatcc_json_parser_error_string@@Base+0xe0>
   2cb10:	b	2cb60 <flatcc_json_parser_error_string@@Base+0xd4>
   2cb14:	b	2cb54 <flatcc_json_parser_error_string@@Base+0xc8>
   2cb18:	b	2cb48 <flatcc_json_parser_error_string@@Base+0xbc>
   2cb1c:	b	2cb3c <flatcc_json_parser_error_string@@Base+0xb0>
   2cb20:	b	2cb30 <flatcc_json_parser_error_string@@Base+0xa4>
   2cb24:	ldr	r0, [pc, #424]	; 2ccd4 <flatcc_json_parser_error_string@@Base+0x248>
   2cb28:	add	r0, pc, r0
   2cb2c:	bx	lr
   2cb30:	ldr	r0, [pc, #416]	; 2ccd8 <flatcc_json_parser_error_string@@Base+0x24c>
   2cb34:	add	r0, pc, r0
   2cb38:	bx	lr
   2cb3c:	ldr	r0, [pc, #408]	; 2ccdc <flatcc_json_parser_error_string@@Base+0x250>
   2cb40:	add	r0, pc, r0
   2cb44:	bx	lr
   2cb48:	ldr	r0, [pc, #400]	; 2cce0 <flatcc_json_parser_error_string@@Base+0x254>
   2cb4c:	add	r0, pc, r0
   2cb50:	bx	lr
   2cb54:	ldr	r0, [pc, #392]	; 2cce4 <flatcc_json_parser_error_string@@Base+0x258>
   2cb58:	add	r0, pc, r0
   2cb5c:	bx	lr
   2cb60:	ldr	r0, [pc, #384]	; 2cce8 <flatcc_json_parser_error_string@@Base+0x25c>
   2cb64:	add	r0, pc, r0
   2cb68:	bx	lr
   2cb6c:	ldr	r0, [pc, #376]	; 2ccec <flatcc_json_parser_error_string@@Base+0x260>
   2cb70:	add	r0, pc, r0
   2cb74:	bx	lr
   2cb78:	ldr	r0, [pc, #368]	; 2ccf0 <flatcc_json_parser_error_string@@Base+0x264>
   2cb7c:	add	r0, pc, r0
   2cb80:	bx	lr
   2cb84:	ldr	r0, [pc, #360]	; 2ccf4 <flatcc_json_parser_error_string@@Base+0x268>
   2cb88:	add	r0, pc, r0
   2cb8c:	bx	lr
   2cb90:	ldr	r0, [pc, #352]	; 2ccf8 <flatcc_json_parser_error_string@@Base+0x26c>
   2cb94:	add	r0, pc, r0
   2cb98:	bx	lr
   2cb9c:	ldr	r0, [pc, #344]	; 2ccfc <flatcc_json_parser_error_string@@Base+0x270>
   2cba0:	add	r0, pc, r0
   2cba4:	bx	lr
   2cba8:	ldr	r0, [pc, #336]	; 2cd00 <flatcc_json_parser_error_string@@Base+0x274>
   2cbac:	add	r0, pc, r0
   2cbb0:	bx	lr
   2cbb4:	ldr	r0, [pc, #328]	; 2cd04 <flatcc_json_parser_error_string@@Base+0x278>
   2cbb8:	add	r0, pc, r0
   2cbbc:	bx	lr
   2cbc0:	ldr	r0, [pc, #320]	; 2cd08 <flatcc_json_parser_error_string@@Base+0x27c>
   2cbc4:	add	r0, pc, r0
   2cbc8:	bx	lr
   2cbcc:	ldr	r0, [pc, #312]	; 2cd0c <flatcc_json_parser_error_string@@Base+0x280>
   2cbd0:	add	r0, pc, r0
   2cbd4:	bx	lr
   2cbd8:	ldr	r0, [pc, #304]	; 2cd10 <flatcc_json_parser_error_string@@Base+0x284>
   2cbdc:	add	r0, pc, r0
   2cbe0:	bx	lr
   2cbe4:	ldr	r0, [pc, #296]	; 2cd14 <flatcc_json_parser_error_string@@Base+0x288>
   2cbe8:	add	r0, pc, r0
   2cbec:	bx	lr
   2cbf0:	ldr	r0, [pc, #288]	; 2cd18 <flatcc_json_parser_error_string@@Base+0x28c>
   2cbf4:	add	r0, pc, r0
   2cbf8:	bx	lr
   2cbfc:	ldr	r0, [pc, #280]	; 2cd1c <flatcc_json_parser_error_string@@Base+0x290>
   2cc00:	add	r0, pc, r0
   2cc04:	bx	lr
   2cc08:	ldr	r0, [pc, #272]	; 2cd20 <flatcc_json_parser_error_string@@Base+0x294>
   2cc0c:	add	r0, pc, r0
   2cc10:	bx	lr
   2cc14:	ldr	r0, [pc, #264]	; 2cd24 <flatcc_json_parser_error_string@@Base+0x298>
   2cc18:	add	r0, pc, r0
   2cc1c:	bx	lr
   2cc20:	ldr	r0, [pc, #256]	; 2cd28 <flatcc_json_parser_error_string@@Base+0x29c>
   2cc24:	add	r0, pc, r0
   2cc28:	bx	lr
   2cc2c:	ldr	r0, [pc, #248]	; 2cd2c <flatcc_json_parser_error_string@@Base+0x2a0>
   2cc30:	add	r0, pc, r0
   2cc34:	bx	lr
   2cc38:	ldr	r0, [pc, #240]	; 2cd30 <flatcc_json_parser_error_string@@Base+0x2a4>
   2cc3c:	add	r0, pc, r0
   2cc40:	bx	lr
   2cc44:	ldr	r0, [pc, #232]	; 2cd34 <flatcc_json_parser_error_string@@Base+0x2a8>
   2cc48:	add	r0, pc, r0
   2cc4c:	bx	lr
   2cc50:	ldr	r0, [pc, #224]	; 2cd38 <flatcc_json_parser_error_string@@Base+0x2ac>
   2cc54:	add	r0, pc, r0
   2cc58:	bx	lr
   2cc5c:	ldr	r0, [pc, #216]	; 2cd3c <flatcc_json_parser_error_string@@Base+0x2b0>
   2cc60:	add	r0, pc, r0
   2cc64:	bx	lr
   2cc68:	ldr	r0, [pc, #208]	; 2cd40 <flatcc_json_parser_error_string@@Base+0x2b4>
   2cc6c:	add	r0, pc, r0
   2cc70:	bx	lr
   2cc74:	ldr	r0, [pc, #200]	; 2cd44 <flatcc_json_parser_error_string@@Base+0x2b8>
   2cc78:	add	r0, pc, r0
   2cc7c:	bx	lr
   2cc80:	ldr	r0, [pc, #192]	; 2cd48 <flatcc_json_parser_error_string@@Base+0x2bc>
   2cc84:	add	r0, pc, r0
   2cc88:	bx	lr
   2cc8c:	ldr	r0, [pc, #184]	; 2cd4c <flatcc_json_parser_error_string@@Base+0x2c0>
   2cc90:	add	r0, pc, r0
   2cc94:	bx	lr
   2cc98:	ldr	r0, [pc, #176]	; 2cd50 <flatcc_json_parser_error_string@@Base+0x2c4>
   2cc9c:	add	r0, pc, r0
   2cca0:	bx	lr
   2cca4:	ldr	r0, [pc, #168]	; 2cd54 <flatcc_json_parser_error_string@@Base+0x2c8>
   2cca8:	add	r0, pc, r0
   2ccac:	bx	lr
   2ccb0:	ldr	r0, [pc, #160]	; 2cd58 <flatcc_json_parser_error_string@@Base+0x2cc>
   2ccb4:	add	r0, pc, r0
   2ccb8:	bx	lr
   2ccbc:	ldr	r0, [pc, #152]	; 2cd5c <flatcc_json_parser_error_string@@Base+0x2d0>
   2ccc0:	add	r0, pc, r0
   2ccc4:	bx	lr
   2ccc8:	ldr	r0, [pc, #144]	; 2cd60 <flatcc_json_parser_error_string@@Base+0x2d4>
   2cccc:	add	r0, pc, r0
   2ccd0:	bx	lr
   2ccd4:	andeq	r4, r1, r8, ror #27
   2ccd8:	andeq	r5, r1, r4, asr r2
   2ccdc:	andeq	r5, r1, ip, asr lr
   2cce0:	andeq	r5, r1, r4, lsr lr
   2cce4:	andeq	r5, r1, r0, lsl lr
   2cce8:	andeq	r5, r1, r4, ror #27
   2ccec:	andeq	r4, r1, ip, ror #27
   2ccf0:			; <UNDEFINED> instruction: 0x00015db0
   2ccf4:	andeq	r5, r1, r8, lsl #27
   2ccf8:	andeq	r5, r1, ip, asr sp
   2ccfc:	andeq	r5, r1, r0, lsr sp
   2cd00:	andeq	r5, r1, r0, lsl sp
   2cd04:	andeq	r5, r1, r0, ror #25
   2cd08:	andeq	r5, r1, r4, asr #25
   2cd0c:	andeq	r5, r1, r8, lsr #25
   2cd10:	andeq	r5, r1, r8, lsl #25
   2cd14:	andeq	r5, r1, ip, ror #24
   2cd18:	andeq	r5, r1, r0, asr ip
   2cd1c:	andeq	r5, r1, r0, lsr ip
   2cd20:	andeq	r5, r1, r4, lsl ip
   2cd24:	strdeq	r5, [r1], -r4
   2cd28:	andeq	r5, r1, ip, asr #23
   2cd2c:			; <UNDEFINED> instruction: 0x00015bb0
   2cd30:	muleq	r1, r0, fp
   2cd34:	andeq	r5, r1, r4, ror fp
   2cd38:	andeq	r5, r1, r4, asr fp
   2cd3c:	andeq	r5, r1, r4, lsr fp
   2cd40:	andeq	r5, r1, ip, lsl fp
   2cd44:	andeq	r5, r1, r8, asr r0
   2cd48:	strdeq	r5, [r1], -r4
   2cd4c:	ldrdeq	r5, [r1], -r0
   2cd50:			; <UNDEFINED> instruction: 0x00015ab4
   2cd54:	muleq	r1, r8, sl
   2cd58:	andeq	r5, r1, ip, ror sl
   2cd5c:	andeq	r5, r1, ip, ror #20
   2cd60:	andeq	r5, r1, ip, asr #1

0002cd64 <flatcc_json_parser_set_error@@Base>:
   2cd64:	ldr	ip, [r0, #20]
   2cd68:	cmp	ip, #0
   2cd6c:	bne	2cd88 <flatcc_json_parser_set_error@@Base+0x24>
   2cd70:	ldr	ip, [r0, #4]
   2cd74:	str	r3, [r0, #20]
   2cd78:	sub	r3, r1, ip
   2cd7c:	add	r3, r3, #1
   2cd80:	str	r1, [r0, #32]
   2cd84:	str	r3, [r0, #16]
   2cd88:	mov	r0, r2
   2cd8c:	bx	lr

0002cd90 <flatcc_json_parser_string_part@@Base>:
   2cd90:	cmp	r1, r2
   2cd94:	beq	2ce34 <flatcc_json_parser_string_part@@Base+0xa4>
   2cd98:	ldrb	ip, [r1]
   2cd9c:	cmp	ip, #34	; 0x22
   2cda0:	cmpne	ip, #31
   2cda4:	movhi	r3, #1
   2cda8:	movls	r3, #0
   2cdac:	cmp	ip, #92	; 0x5c
   2cdb0:	moveq	r3, #0
   2cdb4:	andne	r3, r3, #1
   2cdb8:	cmp	r3, #0
   2cdbc:	beq	2ce40 <flatcc_json_parser_string_part@@Base+0xb0>
   2cdc0:	add	r3, r1, #1
   2cdc4:	cmp	r3, r2
   2cdc8:	mov	r1, r3
   2cdcc:	beq	2ce38 <flatcc_json_parser_string_part@@Base+0xa8>
   2cdd0:	push	{lr}		; (str lr, [sp, #-4]!)
   2cdd4:	b	2cde4 <flatcc_json_parser_string_part@@Base+0x54>
   2cdd8:	cmp	r3, r2
   2cddc:	mov	r1, r3
   2cde0:	beq	2ce28 <flatcc_json_parser_string_part@@Base+0x98>
   2cde4:	ldrb	ip, [r3], #1
   2cde8:	cmp	ip, #34	; 0x22
   2cdec:	cmpne	ip, #31
   2cdf0:	movhi	lr, #1
   2cdf4:	movls	lr, #0
   2cdf8:	cmp	ip, #92	; 0x5c
   2cdfc:	moveq	lr, #0
   2ce00:	andne	lr, lr, #1
   2ce04:	cmp	lr, #0
   2ce08:	bne	2cdd8 <flatcc_json_parser_string_part@@Base+0x48>
   2ce0c:	cmp	ip, #31
   2ce10:	bls	2ce1c <flatcc_json_parser_string_part@@Base+0x8c>
   2ce14:	mov	r0, r1
   2ce18:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce1c:	mov	r3, #17
   2ce20:	pop	{lr}		; (ldr lr, [sp], #4)
   2ce24:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2ce28:	mov	r3, #20
   2ce2c:	pop	{lr}		; (ldr lr, [sp], #4)
   2ce30:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2ce34:	mov	r1, r2
   2ce38:	mov	r3, #20
   2ce3c:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2ce40:	cmp	ip, #31
   2ce44:	bls	2ce50 <flatcc_json_parser_string_part@@Base+0xc0>
   2ce48:	mov	r0, r1
   2ce4c:	bx	lr
   2ce50:	mov	r3, #17
   2ce54:	b	2cd64 <flatcc_json_parser_set_error@@Base>

0002ce58 <flatcc_json_parser_space_ext@@Base>:
   2ce58:	push	{lr}		; (str lr, [sp, #-4]!)
   2ce5c:	mov	lr, #0
   2ce60:	cmp	r1, r2
   2ce64:	beq	2ce94 <flatcc_json_parser_space_ext@@Base+0x3c>
   2ce68:	ldrb	ip, [r1]
   2ce6c:	cmp	ip, #32
   2ce70:	bne	2ce9c <flatcc_json_parser_space_ext@@Base+0x44>
   2ce74:	add	r3, r1, #1
   2ce78:	b	2ce88 <flatcc_json_parser_space_ext@@Base+0x30>
   2ce7c:	ldrb	ip, [r3], #1
   2ce80:	cmp	ip, #32
   2ce84:	bne	2ce9c <flatcc_json_parser_space_ext@@Base+0x44>
   2ce88:	cmp	r3, r2
   2ce8c:	mov	r1, r3
   2ce90:	bne	2ce7c <flatcc_json_parser_space_ext@@Base+0x24>
   2ce94:	mov	r0, r1
   2ce98:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce9c:	cmp	ip, #32
   2cea0:	bhi	2ce94 <flatcc_json_parser_space_ext@@Base+0x3c>
   2cea4:	sub	ip, ip, #9
   2cea8:	cmp	ip, #23
   2ceac:	addls	pc, pc, ip, lsl #2
   2ceb0:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2ceb4:	b	2cf60 <flatcc_json_parser_space_ext@@Base+0x108>
   2ceb8:	b	2cf34 <flatcc_json_parser_space_ext@@Base+0xdc>
   2cebc:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cec0:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cec4:	b	2cf14 <flatcc_json_parser_space_ext@@Base+0xbc>
   2cec8:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cecc:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2ced0:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2ced4:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2ced8:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cedc:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cee0:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cee4:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cee8:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2ceec:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cef0:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cef4:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cef8:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cefc:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cf00:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cf04:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cf08:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cf0c:	b	2cf68 <flatcc_json_parser_space_ext@@Base+0x110>
   2cf10:	b	2ce60 <flatcc_json_parser_space_ext@@Base+0x8>
   2cf14:	sub	r3, r2, r1
   2cf18:	cmp	r3, #1
   2cf1c:	movle	r3, lr
   2cf20:	ldrbgt	r3, [r1, #1]
   2cf24:	subgt	r3, r3, #10
   2cf28:	clzgt	r3, r3
   2cf2c:	lsrgt	r3, r3, #5
   2cf30:	add	r1, r1, r3
   2cf34:	ldr	r3, [r0, #12]
   2cf38:	add	r1, r1, #1
   2cf3c:	add	r3, r3, #1
   2cf40:	str	r1, [r0, #4]
   2cf44:	str	r3, [r0, #12]
   2cf48:	cmp	r2, r1
   2cf4c:	beq	2cf74 <flatcc_json_parser_space_ext@@Base+0x11c>
   2cf50:	ldrb	ip, [r1]
   2cf54:	cmp	ip, #32
   2cf58:	bls	2cea4 <flatcc_json_parser_space_ext@@Base+0x4c>
   2cf5c:	b	2ce94 <flatcc_json_parser_space_ext@@Base+0x3c>
   2cf60:	add	r1, r1, #1
   2cf64:	b	2cf48 <flatcc_json_parser_space_ext@@Base+0xf0>
   2cf68:	mov	r3, #5
   2cf6c:	pop	{lr}		; (ldr lr, [sp], #4)
   2cf70:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2cf74:	mov	r1, r2
   2cf78:	b	2ce94 <flatcc_json_parser_space_ext@@Base+0x3c>
   2cf7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf80:	sub	sp, sp, #36	; 0x24
   2cf84:	mov	ip, #0
   2cf88:	str	r3, [sp, #8]
   2cf8c:	ldr	r3, [sp, #72]	; 0x48
   2cf90:	cmp	r1, r2
   2cf94:	mov	r6, r2
   2cf98:	strb	ip, [r3]
   2cf9c:	mov	r8, r0
   2cfa0:	beq	2d128 <flatcc_json_parser_space_ext@@Base+0x2d0>
   2cfa4:	ldrb	r3, [r1]
   2cfa8:	cmp	r3, #34	; 0x22
   2cfac:	beq	2d0d0 <flatcc_json_parser_space_ext@@Base+0x278>
   2cfb0:	mov	r3, #5
   2cfb4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2cfb8:	mov	r5, r0
   2cfbc:	sub	r3, r6, r0
   2cfc0:	cmp	r3, #1
   2cfc4:	ble	2cfd8 <flatcc_json_parser_space_ext@@Base+0x180>
   2cfc8:	ldrb	r3, [r5]
   2cfcc:	cmp	r3, #32
   2cfd0:	bhi	2cfec <flatcc_json_parser_space_ext@@Base+0x194>
   2cfd4:	beq	2d114 <flatcc_json_parser_space_ext@@Base+0x2bc>
   2cfd8:	mov	r1, r5
   2cfdc:	mov	r2, r6
   2cfe0:	mov	r0, r8
   2cfe4:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2cfe8:	mov	r5, r0
   2cfec:	cmp	r6, r5
   2cff0:	beq	2d04c <flatcc_json_parser_space_ext@@Base+0x1f4>
   2cff4:	add	fp, sp, #16
   2cff8:	add	sl, sp, #20
   2cffc:	add	r9, sp, #24
   2d000:	mov	r3, #0
   2d004:	str	r3, [sp, #12]
   2d008:	ldr	r3, [sp, #8]
   2d00c:	mov	r7, r3
   2d010:	ldr	r4, [r3]
   2d014:	b	2d02c <flatcc_json_parser_space_ext@@Base+0x1d4>
   2d018:	cmp	r5, r0
   2d01c:	bne	2d058 <flatcc_json_parser_space_ext@@Base+0x200>
   2d020:	ldr	r4, [r7, #4]!
   2d024:	cmp	r4, #0
   2d028:	beq	2d0ac <flatcc_json_parser_space_ext@@Base+0x254>
   2d02c:	stm	sp, {r9, sl}
   2d030:	mov	r3, fp
   2d034:	mov	r2, r6
   2d038:	mov	r1, r5
   2d03c:	mov	r0, r8
   2d040:	blx	r4
   2d044:	cmp	r6, r0
   2d048:	bne	2d018 <flatcc_json_parser_space_ext@@Base+0x1c0>
   2d04c:	mov	r0, r6
   2d050:	add	sp, sp, #36	; 0x24
   2d054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d058:	ldr	r3, [sp, #16]
   2d05c:	mov	r4, r0
   2d060:	cmp	r3, #0
   2d064:	bne	2d0dc <flatcc_json_parser_space_ext@@Base+0x284>
   2d068:	ldrd	r2, [sp, #24]
   2d06c:	cmp	r3, #0
   2d070:	cmpeq	r2, #255	; 0xff
   2d074:	uxtbls	r3, r2
   2d078:	strls	r3, [sp, #12]
   2d07c:	bhi	2d0fc <flatcc_json_parser_space_ext@@Base+0x2a4>
   2d080:	ldr	r3, [sp, #72]	; 0x48
   2d084:	ldr	r2, [sp, #20]
   2d088:	ldr	r1, [sp, #12]
   2d08c:	ldrb	r3, [r3]
   2d090:	cmp	r2, #0
   2d094:	ldr	r2, [sp, #72]	; 0x48
   2d098:	add	r3, r1, r3
   2d09c:	strb	r3, [r2]
   2d0a0:	beq	2d130 <flatcc_json_parser_space_ext@@Base+0x2d8>
   2d0a4:	mov	r5, r4
   2d0a8:	b	2d008 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2d0ac:	mov	r2, r6
   2d0b0:	mov	r1, r5
   2d0b4:	mov	r0, r8
   2d0b8:	mov	r3, #23
   2d0bc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d0c0:	mov	r6, r0
   2d0c4:	mov	r0, r6
   2d0c8:	add	sp, sp, #36	; 0x24
   2d0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d0d0:	add	r5, r1, #1
   2d0d4:	sub	r3, r2, r5
   2d0d8:	b	2cfc0 <flatcc_json_parser_space_ext@@Base+0x168>
   2d0dc:	mov	r3, #8
   2d0e0:	mov	r2, r6
   2d0e4:	mov	r1, r4
   2d0e8:	mov	r0, r8
   2d0ec:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d0f0:	cmp	r6, r0
   2d0f4:	bne	2d080 <flatcc_json_parser_space_ext@@Base+0x228>
   2d0f8:	b	2d04c <flatcc_json_parser_space_ext@@Base+0x1f4>
   2d0fc:	mov	r3, #7
   2d100:	mov	r2, r6
   2d104:	mov	r1, r4
   2d108:	mov	r0, r8
   2d10c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d110:	b	2d0f0 <flatcc_json_parser_space_ext@@Base+0x298>
   2d114:	ldrb	r3, [r5, #1]
   2d118:	cmp	r3, #32
   2d11c:	addhi	r5, r5, #1
   2d120:	bls	2cfd8 <flatcc_json_parser_space_ext@@Base+0x180>
   2d124:	b	2cfec <flatcc_json_parser_space_ext@@Base+0x194>
   2d128:	mov	r5, r2
   2d12c:	b	2cfd8 <flatcc_json_parser_space_ext@@Base+0x180>
   2d130:	mov	r6, r4
   2d134:	b	2d04c <flatcc_json_parser_space_ext@@Base+0x1f4>
   2d138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d13c:	sub	sp, sp, #28
   2d140:	mov	r9, r3
   2d144:	ldrh	r3, [sp, #68]	; 0x44
   2d148:	mov	ip, #0
   2d14c:	mov	r7, r0
   2d150:	ldr	r0, [r0]
   2d154:	mov	r4, r1
   2d158:	mov	r5, r2
   2d15c:	str	ip, [sp, #20]
   2d160:	str	r3, [sp, #12]
   2d164:	bl	27860 <flatcc_builder_start_offset_vector@@Base>
   2d168:	cmp	r0, #0
   2d16c:	bne	2d1c8 <flatcc_json_parser_space_ext@@Base+0x370>
   2d170:	cmp	r4, r5
   2d174:	beq	2d184 <flatcc_json_parser_space_ext@@Base+0x32c>
   2d178:	ldrb	r3, [r4]
   2d17c:	cmp	r3, #91	; 0x5b
   2d180:	beq	2d1e4 <flatcc_json_parser_space_ext@@Base+0x38c>
   2d184:	mov	r1, r4
   2d188:	mov	r3, #22
   2d18c:	mov	r2, r5
   2d190:	mov	r0, r7
   2d194:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d198:	mov	r6, #0
   2d19c:	mov	r4, r0
   2d1a0:	ldr	r3, [sp, #64]	; 0x40
   2d1a4:	cmp	r3, r6
   2d1a8:	beq	2d440 <flatcc_json_parser_space_ext@@Base+0x5e8>
   2d1ac:	mov	r2, r5
   2d1b0:	mov	r1, r4
   2d1b4:	mov	r0, r7
   2d1b8:	mov	r3, #30
   2d1bc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d1c0:	b	2d1dc <flatcc_json_parser_space_ext@@Base+0x384>
   2d1c4:	mov	r4, sl
   2d1c8:	mov	r2, r5
   2d1cc:	mov	r1, r4
   2d1d0:	mov	r0, r7
   2d1d4:	mov	r3, #33	; 0x21
   2d1d8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d1dc:	add	sp, sp, #28
   2d1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d1e4:	add	r8, r4, #1
   2d1e8:	sub	r3, r5, r8
   2d1ec:	cmp	r3, #1
   2d1f0:	ble	2d204 <flatcc_json_parser_space_ext@@Base+0x3ac>
   2d1f4:	ldrb	r3, [r4, #1]
   2d1f8:	cmp	r3, #32
   2d1fc:	bhi	2d218 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2d200:	beq	2d488 <flatcc_json_parser_space_ext@@Base+0x630>
   2d204:	mov	r1, r8
   2d208:	mov	r2, r5
   2d20c:	mov	r0, r7
   2d210:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2d214:	mov	r8, r0
   2d218:	cmp	r5, r8
   2d21c:	beq	2d22c <flatcc_json_parser_space_ext@@Base+0x3d4>
   2d220:	ldrb	r3, [r8]
   2d224:	cmp	r3, #93	; 0x5d
   2d228:	beq	2d4d4 <flatcc_json_parser_space_ext@@Base+0x67c>
   2d22c:	ldr	r3, [sp, #64]	; 0x40
   2d230:	cmp	r3, #0
   2d234:	beq	2d3c4 <flatcc_json_parser_space_ext@@Base+0x56c>
   2d238:	add	sl, sp, #20
   2d23c:	mov	r6, #0
   2d240:	mov	fp, #1
   2d244:	mov	r4, sl
   2d248:	mov	r1, r9
   2d24c:	ldr	r0, [r7]
   2d250:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2d254:	mov	r1, r8
   2d258:	mov	r2, r5
   2d25c:	ldr	ip, [sp, #72]	; 0x48
   2d260:	ldrb	r3, [r0, r6]
   2d264:	str	r4, [sp]
   2d268:	mov	r0, r7
   2d26c:	blx	ip
   2d270:	cmp	r5, r0
   2d274:	mov	sl, r0
   2d278:	beq	2d3f8 <flatcc_json_parser_space_ext@@Base+0x5a0>
   2d27c:	mov	r1, fp
   2d280:	ldr	r0, [r7]
   2d284:	bl	271f8 <flatcc_builder_extend_offset_vector@@Base>
   2d288:	cmp	r0, #0
   2d28c:	beq	2d1c4 <flatcc_json_parser_space_ext@@Base+0x36c>
   2d290:	ldr	r3, [sp, #20]
   2d294:	sub	r1, r5, sl
   2d298:	cmp	r1, #1
   2d29c:	str	r3, [r0]
   2d2a0:	ble	2d2b4 <flatcc_json_parser_space_ext@@Base+0x45c>
   2d2a4:	ldrb	r3, [sl]
   2d2a8:	cmp	r3, #32
   2d2ac:	bhi	2d2d4 <flatcc_json_parser_space_ext@@Base+0x47c>
   2d2b0:	beq	2d348 <flatcc_json_parser_space_ext@@Base+0x4f0>
   2d2b4:	mov	r1, sl
   2d2b8:	mov	r2, r5
   2d2bc:	mov	r0, r7
   2d2c0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2d2c4:	mov	sl, r0
   2d2c8:	cmp	r5, sl
   2d2cc:	beq	2d360 <flatcc_json_parser_space_ext@@Base+0x508>
   2d2d0:	ldrb	r3, [sl]
   2d2d4:	cmp	r3, #44	; 0x2c
   2d2d8:	beq	2d36c <flatcc_json_parser_space_ext@@Base+0x514>
   2d2dc:	cmp	r3, #93	; 0x5d
   2d2e0:	mov	r4, sl
   2d2e4:	beq	2d308 <flatcc_json_parser_space_ext@@Base+0x4b0>
   2d2e8:	mov	r1, sl
   2d2ec:	mov	r3, #9
   2d2f0:	mov	r2, r5
   2d2f4:	mov	r0, r7
   2d2f8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d2fc:	add	r6, r6, #1
   2d300:	mov	r4, r0
   2d304:	b	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d308:	add	r1, sl, #1
   2d30c:	sub	r3, r5, r1
   2d310:	cmp	r3, #1
   2d314:	ble	2d330 <flatcc_json_parser_space_ext@@Base+0x4d8>
   2d318:	ldrb	r3, [sl, #1]
   2d31c:	cmp	r3, #32
   2d320:	addhi	r6, r6, #1
   2d324:	movhi	r4, r1
   2d328:	bhi	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d32c:	beq	2d3e0 <flatcc_json_parser_space_ext@@Base+0x588>
   2d330:	mov	r2, r5
   2d334:	mov	r0, r7
   2d338:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2d33c:	mov	r4, r0
   2d340:	add	r6, r6, #1
   2d344:	b	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d348:	ldrb	r3, [sl, #1]
   2d34c:	cmp	r3, #32
   2d350:	addhi	sl, sl, #1
   2d354:	bls	2d2b4 <flatcc_json_parser_space_ext@@Base+0x45c>
   2d358:	cmp	r5, sl
   2d35c:	bne	2d2d0 <flatcc_json_parser_space_ext@@Base+0x478>
   2d360:	mov	r4, sl
   2d364:	add	r6, r6, #1
   2d368:	b	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d36c:	add	r8, sl, #1
   2d370:	sub	r3, r5, r8
   2d374:	cmp	r3, #1
   2d378:	ble	2d38c <flatcc_json_parser_space_ext@@Base+0x534>
   2d37c:	ldrb	r3, [sl, #1]
   2d380:	cmp	r3, #32
   2d384:	bhi	2d3a0 <flatcc_json_parser_space_ext@@Base+0x548>
   2d388:	beq	2d404 <flatcc_json_parser_space_ext@@Base+0x5ac>
   2d38c:	mov	r1, r8
   2d390:	mov	r2, r5
   2d394:	mov	r0, r7
   2d398:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2d39c:	mov	r8, r0
   2d3a0:	cmp	r5, r8
   2d3a4:	beq	2d49c <flatcc_json_parser_space_ext@@Base+0x644>
   2d3a8:	ldrb	r3, [r8]
   2d3ac:	cmp	r3, #93	; 0x5d
   2d3b0:	beq	2d418 <flatcc_json_parser_space_ext@@Base+0x5c0>
   2d3b4:	ldr	r3, [sp, #64]	; 0x40
   2d3b8:	add	r6, r6, #1
   2d3bc:	cmp	r3, r6
   2d3c0:	bne	2d248 <flatcc_json_parser_space_ext@@Base+0x3f0>
   2d3c4:	mov	r2, r5
   2d3c8:	mov	r1, r8
   2d3cc:	mov	r0, r7
   2d3d0:	mov	r3, #30
   2d3d4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d3d8:	add	sp, sp, #28
   2d3dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d3e0:	ldrb	r3, [r4, #2]
   2d3e4:	cmp	r3, #32
   2d3e8:	addhi	r4, r4, #2
   2d3ec:	addhi	r6, r6, #1
   2d3f0:	bls	2d330 <flatcc_json_parser_space_ext@@Base+0x4d8>
   2d3f4:	b	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d3f8:	mov	r0, r5
   2d3fc:	add	sp, sp, #28
   2d400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d404:	ldrb	r3, [sl, #2]
   2d408:	cmp	r3, #32
   2d40c:	addhi	r8, sl, #2
   2d410:	bls	2d38c <flatcc_json_parser_space_ext@@Base+0x534>
   2d414:	b	2d3a0 <flatcc_json_parser_space_ext@@Base+0x548>
   2d418:	add	r4, r8, #1
   2d41c:	sub	r3, r5, r4
   2d420:	cmp	r3, #1
   2d424:	ble	2d438 <flatcc_json_parser_space_ext@@Base+0x5e0>
   2d428:	ldrb	r3, [r8, #1]
   2d42c:	cmp	r3, #32
   2d430:	bhi	2d340 <flatcc_json_parser_space_ext@@Base+0x4e8>
   2d434:	beq	2d4bc <flatcc_json_parser_space_ext@@Base+0x664>
   2d438:	mov	r1, r4
   2d43c:	b	2d330 <flatcc_json_parser_space_ext@@Base+0x4d8>
   2d440:	mov	r1, r9
   2d444:	ldr	r0, [r7]
   2d448:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2d44c:	mov	r1, r0
   2d450:	ldr	r0, [r7]
   2d454:	bl	289dc <flatcc_builder_end_offset_vector_for_unions@@Base>
   2d458:	cmp	r0, #0
   2d45c:	str	r0, [sp, #20]
   2d460:	beq	2d1c8 <flatcc_json_parser_space_ext@@Base+0x370>
   2d464:	ldr	r1, [sp, #12]
   2d468:	ldr	r0, [r7]
   2d46c:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   2d470:	subs	r3, r0, #0
   2d474:	beq	2d1c8 <flatcc_json_parser_space_ext@@Base+0x370>
   2d478:	ldr	r2, [sp, #20]
   2d47c:	mov	r0, r4
   2d480:	str	r2, [r3]
   2d484:	b	2d1dc <flatcc_json_parser_space_ext@@Base+0x384>
   2d488:	ldrb	r3, [r4, #2]
   2d48c:	cmp	r3, #32
   2d490:	addhi	r8, r4, #2
   2d494:	bls	2d204 <flatcc_json_parser_space_ext@@Base+0x3ac>
   2d498:	b	2d218 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2d49c:	mov	r3, #9
   2d4a0:	mov	r2, r5
   2d4a4:	mov	r1, r5
   2d4a8:	mov	r0, r7
   2d4ac:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2d4b0:	add	r6, r6, #1
   2d4b4:	mov	r4, r0
   2d4b8:	b	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d4bc:	ldrb	r3, [r8, #2]
   2d4c0:	cmp	r3, #32
   2d4c4:	addhi	r4, r8, #2
   2d4c8:	addhi	r6, r6, #1
   2d4cc:	bls	2d438 <flatcc_json_parser_space_ext@@Base+0x5e0>
   2d4d0:	b	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d4d4:	add	r4, r8, #1
   2d4d8:	sub	r3, r5, r4
   2d4dc:	cmp	r3, #1
   2d4e0:	ble	2d4f8 <flatcc_json_parser_space_ext@@Base+0x6a0>
   2d4e4:	ldrb	r3, [r8, #1]
   2d4e8:	cmp	r3, #32
   2d4ec:	movhi	r6, #0
   2d4f0:	bhi	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d4f4:	beq	2d514 <flatcc_json_parser_space_ext@@Base+0x6bc>
   2d4f8:	mov	r1, r4
   2d4fc:	mov	r2, r5
   2d500:	mov	r0, r7
   2d504:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2d508:	mov	r6, #0
   2d50c:	mov	r4, r0
   2d510:	b	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>
   2d514:	ldrb	r3, [r8, #2]
   2d518:	cmp	r3, #32
   2d51c:	addhi	r4, r8, #2
   2d520:	movhi	r6, #0
   2d524:	bls	2d4f8 <flatcc_json_parser_space_ext@@Base+0x6a0>
   2d528:	b	2d1a0 <flatcc_json_parser_space_ext@@Base+0x348>

0002d52c <flatcc_json_parser_string_escape@@Base>:
   2d52c:	sub	ip, r2, r1
   2d530:	cmp	ip, #1
   2d534:	ble	2d6cc <flatcc_json_parser_string_escape@@Base+0x1a0>
   2d538:	push	{r4, r5, lr}
   2d53c:	ldrb	lr, [r1]
   2d540:	cmp	lr, #92	; 0x5c
   2d544:	beq	2d55c <flatcc_json_parser_string_escape@@Base+0x30>
   2d548:	mov	ip, #0
   2d54c:	strb	ip, [r3]
   2d550:	mov	r3, #18
   2d554:	pop	{r4, r5, lr}
   2d558:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2d55c:	ldrb	lr, [r1, #1]
   2d560:	sub	lr, lr, #34	; 0x22
   2d564:	cmp	lr, #86	; 0x56
   2d568:	addls	pc, pc, lr, lsl #2
   2d56c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d570:	b	2d764 <flatcc_json_parser_string_escape@@Base+0x238>
   2d574:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d578:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d57c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d580:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d584:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d588:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d58c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d590:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d594:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d598:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d59c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5a0:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5a4:	b	2d77c <flatcc_json_parser_string_escape@@Base+0x250>
   2d5a8:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5ac:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5b0:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5b4:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5b8:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5bc:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5c0:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5c4:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5c8:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5cc:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5d0:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5d4:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5d8:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5dc:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5e0:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5e4:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5e8:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5ec:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5f0:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5f4:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5f8:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d5fc:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d600:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d604:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d608:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d60c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d610:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d614:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d618:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d61c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d620:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d624:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d628:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d62c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d630:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d634:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d638:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d63c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d640:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d644:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d648:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d64c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d650:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d654:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d658:	b	2d794 <flatcc_json_parser_string_escape@@Base+0x268>
   2d65c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d660:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d664:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d668:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d66c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d670:	b	2d7ac <flatcc_json_parser_string_escape@@Base+0x280>
   2d674:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d678:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d67c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d680:	b	2d7c4 <flatcc_json_parser_string_escape@@Base+0x298>
   2d684:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d688:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d68c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d690:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d694:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d698:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d69c:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d6a0:	b	2d7dc <flatcc_json_parser_string_escape@@Base+0x2b0>
   2d6a4:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d6a8:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d6ac:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d6b0:	b	2d7f4 <flatcc_json_parser_string_escape@@Base+0x2c8>
   2d6b4:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d6b8:	b	2d80c <flatcc_json_parser_string_escape@@Base+0x2e0>
   2d6bc:	b	2d824 <flatcc_json_parser_string_escape@@Base+0x2f8>
   2d6c0:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d6c4:	b	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d6c8:	b	2d6dc <flatcc_json_parser_string_escape@@Base+0x1b0>
   2d6cc:	mov	ip, #0
   2d6d0:	strb	ip, [r3]
   2d6d4:	mov	r3, #18
   2d6d8:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2d6dc:	cmp	ip, #3
   2d6e0:	mov	ip, #1
   2d6e4:	strb	ip, [r3]
   2d6e8:	ble	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d6ec:	ldrb	ip, [r1, #2]
   2d6f0:	sub	lr, ip, #48	; 0x30
   2d6f4:	uxtb	r4, lr
   2d6f8:	cmp	r4, #9
   2d6fc:	lslls	ip, lr, #4
   2d700:	uxtbls	ip, ip
   2d704:	bls	2d724 <flatcc_json_parser_string_escape@@Base+0x1f8>
   2d708:	orr	ip, ip, #32
   2d70c:	sub	lr, ip, #97	; 0x61
   2d710:	cmp	lr, #5
   2d714:	bhi	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d718:	sub	ip, ip, #87	; 0x57
   2d71c:	lsl	ip, ip, #4
   2d720:	uxtb	ip, ip
   2d724:	ldrb	lr, [r1, #3]
   2d728:	sub	r4, lr, #48	; 0x30
   2d72c:	uxtb	r4, r4
   2d730:	cmp	r4, #9
   2d734:	orrls	ip, r4, ip
   2d738:	bls	2d758 <flatcc_json_parser_string_escape@@Base+0x22c>
   2d73c:	orr	lr, lr, #32
   2d740:	sub	r4, lr, #97	; 0x61
   2d744:	cmp	r4, #5
   2d748:	bhi	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d74c:	sub	lr, lr, #87	; 0x57
   2d750:	orr	ip, lr, ip
   2d754:	uxtb	ip, ip
   2d758:	strb	ip, [r3, #1]
   2d75c:	add	r0, r1, #4
   2d760:	pop	{r4, r5, pc}
   2d764:	mov	ip, #1
   2d768:	mov	r2, #34	; 0x22
   2d76c:	add	r0, r1, #2
   2d770:	strb	ip, [r3]
   2d774:	strb	r2, [r3, #1]
   2d778:	pop	{r4, r5, pc}
   2d77c:	mov	ip, #1
   2d780:	mov	r2, #47	; 0x2f
   2d784:	add	r0, r1, #2
   2d788:	strb	ip, [r3]
   2d78c:	strb	r2, [r3, #1]
   2d790:	pop	{r4, r5, pc}
   2d794:	mov	ip, #1
   2d798:	mov	r2, #92	; 0x5c
   2d79c:	add	r0, r1, #2
   2d7a0:	strb	ip, [r3]
   2d7a4:	strb	r2, [r3, #1]
   2d7a8:	pop	{r4, r5, pc}
   2d7ac:	mov	ip, #1
   2d7b0:	mov	r2, #8
   2d7b4:	add	r0, r1, #2
   2d7b8:	strb	ip, [r3]
   2d7bc:	strb	r2, [r3, #1]
   2d7c0:	pop	{r4, r5, pc}
   2d7c4:	mov	ip, #1
   2d7c8:	mov	r2, #12
   2d7cc:	add	r0, r1, #2
   2d7d0:	strb	ip, [r3]
   2d7d4:	strb	r2, [r3, #1]
   2d7d8:	pop	{r4, r5, pc}
   2d7dc:	mov	ip, #1
   2d7e0:	mov	r2, #10
   2d7e4:	add	r0, r1, #2
   2d7e8:	strb	ip, [r3]
   2d7ec:	strb	r2, [r3, #1]
   2d7f0:	pop	{r4, r5, pc}
   2d7f4:	mov	ip, #1
   2d7f8:	mov	r2, #13
   2d7fc:	add	r0, r1, #2
   2d800:	strb	ip, [r3]
   2d804:	strb	r2, [r3, #1]
   2d808:	pop	{r4, r5, pc}
   2d80c:	mov	ip, #1
   2d810:	mov	r2, #9
   2d814:	add	r0, r1, #2
   2d818:	strb	ip, [r3]
   2d81c:	strb	r2, [r3, #1]
   2d820:	pop	{r4, r5, pc}
   2d824:	cmp	ip, #5
   2d828:	ble	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d82c:	ldrb	ip, [r1, #2]
   2d830:	sub	lr, ip, #48	; 0x30
   2d834:	uxtb	r4, lr
   2d838:	cmp	r4, #9
   2d83c:	lslls	ip, lr, #12
   2d840:	uxthls	ip, ip
   2d844:	bls	2d864 <flatcc_json_parser_string_escape@@Base+0x338>
   2d848:	orr	ip, ip, #32
   2d84c:	sub	lr, ip, #97	; 0x61
   2d850:	cmp	lr, #5
   2d854:	bhi	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d858:	sub	ip, ip, #87	; 0x57
   2d85c:	lsl	ip, ip, #12
   2d860:	and	ip, ip, #61440	; 0xf000
   2d864:	ldrb	lr, [r1, #3]
   2d868:	sub	r4, lr, #48	; 0x30
   2d86c:	uxtb	r5, r4
   2d870:	cmp	r5, #9
   2d874:	bhi	2d8f8 <flatcc_json_parser_string_escape@@Base+0x3cc>
   2d878:	uxth	r4, r4
   2d87c:	orr	ip, ip, r4, lsl #8
   2d880:	and	ip, ip, #65280	; 0xff00
   2d884:	ldrb	lr, [r1, #4]
   2d888:	sub	r4, lr, #48	; 0x30
   2d88c:	uxtb	r5, r4
   2d890:	cmp	r5, #9
   2d894:	bhi	2d91c <flatcc_json_parser_string_escape@@Base+0x3f0>
   2d898:	uxth	r4, r4
   2d89c:	orr	ip, ip, r4, lsl #4
   2d8a0:	uxth	ip, ip
   2d8a4:	ldrb	lr, [r1, #5]
   2d8a8:	sub	r4, lr, #48	; 0x30
   2d8ac:	uxtb	r5, r4
   2d8b0:	cmp	r5, #9
   2d8b4:	orrls	r2, ip, r4
   2d8b8:	uxthls	r2, r2
   2d8bc:	bls	2d8dc <flatcc_json_parser_string_escape@@Base+0x3b0>
   2d8c0:	orr	lr, lr, #32
   2d8c4:	sub	r4, lr, #97	; 0x61
   2d8c8:	cmp	r4, #5
   2d8cc:	bhi	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d8d0:	sub	r2, lr, #87	; 0x57
   2d8d4:	orr	r2, ip, r2
   2d8d8:	uxth	r2, r2
   2d8dc:	cmp	r2, #127	; 0x7f
   2d8e0:	bhi	2d940 <flatcc_json_parser_string_escape@@Base+0x414>
   2d8e4:	mov	r0, #1
   2d8e8:	strb	r2, [r3, #1]
   2d8ec:	strb	r0, [r3]
   2d8f0:	add	r0, r1, #6
   2d8f4:	pop	{r4, r5, pc}
   2d8f8:	orr	lr, lr, #32
   2d8fc:	sub	r4, lr, #97	; 0x61
   2d900:	cmp	r4, #5
   2d904:	bhi	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d908:	sub	lr, lr, #87	; 0x57
   2d90c:	uxth	lr, lr
   2d910:	orr	ip, ip, lr, lsl #8
   2d914:	and	ip, ip, #65280	; 0xff00
   2d918:	b	2d884 <flatcc_json_parser_string_escape@@Base+0x358>
   2d91c:	orr	lr, lr, #32
   2d920:	sub	r4, lr, #97	; 0x61
   2d924:	cmp	r4, #5
   2d928:	bhi	2d548 <flatcc_json_parser_string_escape@@Base+0x1c>
   2d92c:	sub	lr, lr, #87	; 0x57
   2d930:	uxth	lr, lr
   2d934:	orr	ip, ip, lr, lsl #4
   2d938:	uxth	ip, ip
   2d93c:	b	2d8a4 <flatcc_json_parser_string_escape@@Base+0x378>
   2d940:	cmp	r2, #2048	; 0x800
   2d944:	bcs	2d970 <flatcc_json_parser_string_escape@@Base+0x444>
   2d948:	and	r0, r2, #63	; 0x3f
   2d94c:	mvn	ip, #63	; 0x3f
   2d950:	mvn	r0, r0, lsl #25
   2d954:	orr	r2, ip, r2, lsr #6
   2d958:	mvn	r0, r0, lsr #25
   2d95c:	mov	ip, #2
   2d960:	strb	r0, [r3, #2]
   2d964:	strb	r2, [r3, #1]
   2d968:	strb	ip, [r3]
   2d96c:	b	2d8f0 <flatcc_json_parser_string_escape@@Base+0x3c4>
   2d970:	lsl	lr, r2, #20
   2d974:	mvn	r4, #127	; 0x7f
   2d978:	and	ip, r2, #63	; 0x3f
   2d97c:	mvn	r0, #31
   2d980:	orr	r2, r0, r2, lsr #12
   2d984:	orr	lr, r4, lr, lsr #26
   2d988:	orr	ip, ip, r4
   2d98c:	mov	r0, #3
   2d990:	strb	lr, [r3, #2]
   2d994:	strb	ip, [r3, #3]
   2d998:	strb	r2, [r3, #1]
   2d99c:	strb	r0, [r3]
   2d9a0:	b	2d8f0 <flatcc_json_parser_string_escape@@Base+0x3c4>

0002d9a4 <flatcc_json_parser_skip_constant@@Base>:
   2d9a4:	cmp	r1, r2
   2d9a8:	push	{r4, r5, r6, lr}
   2d9ac:	mov	r5, r2
   2d9b0:	beq	2da40 <flatcc_json_parser_skip_constant@@Base+0x9c>
   2d9b4:	mov	r4, r1
   2d9b8:	mov	r6, r0
   2d9bc:	b	2d9cc <flatcc_json_parser_skip_constant@@Base+0x28>
   2d9c0:	add	r4, r4, #1
   2d9c4:	cmp	r5, r4
   2d9c8:	beq	2da40 <flatcc_json_parser_skip_constant@@Base+0x9c>
   2d9cc:	ldrb	r3, [r4]
   2d9d0:	sub	r2, r3, #95	; 0x5f
   2d9d4:	clz	r2, r2
   2d9d8:	lsr	r2, r2, #5
   2d9dc:	orrs	r2, r2, r3, lsr #7
   2d9e0:	bne	2d9c0 <flatcc_json_parser_skip_constant@@Base+0x1c>
   2d9e4:	sub	r2, r3, #48	; 0x30
   2d9e8:	cmp	r3, #46	; 0x2e
   2d9ec:	cmpne	r2, #9
   2d9f0:	bls	2d9c0 <flatcc_json_parser_skip_constant@@Base+0x1c>
   2d9f4:	orr	r2, r3, #32
   2d9f8:	sub	r2, r2, #97	; 0x61
   2d9fc:	cmp	r2, #25
   2da00:	bls	2d9c0 <flatcc_json_parser_skip_constant@@Base+0x1c>
   2da04:	sub	r2, r5, r4
   2da08:	cmp	r2, #1
   2da0c:	ble	2da1c <flatcc_json_parser_skip_constant@@Base+0x78>
   2da10:	cmp	r3, #32
   2da14:	bhi	2da48 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2da18:	beq	2da54 <flatcc_json_parser_skip_constant@@Base+0xb0>
   2da1c:	mov	r2, r5
   2da20:	mov	r1, r4
   2da24:	mov	r0, r6
   2da28:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2da2c:	cmp	r4, r0
   2da30:	beq	2da48 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2da34:	mov	r4, r0
   2da38:	cmp	r5, r4
   2da3c:	bne	2d9cc <flatcc_json_parser_skip_constant@@Base+0x28>
   2da40:	mov	r0, r5
   2da44:	pop	{r4, r5, r6, pc}
   2da48:	mov	r5, r4
   2da4c:	mov	r0, r5
   2da50:	pop	{r4, r5, r6, pc}
   2da54:	ldrb	r3, [r4, #1]
   2da58:	cmp	r3, #32
   2da5c:	addhi	r0, r4, #1
   2da60:	bls	2da1c <flatcc_json_parser_skip_constant@@Base+0x78>
   2da64:	b	2da2c <flatcc_json_parser_skip_constant@@Base+0x88>

0002da68 <flatcc_json_parser_match_constant@@Base>:
   2da68:	push	{r4, r5, r6, lr}
   2da6c:	sub	lr, r2, r1
   2da70:	cmp	r3, lr
   2da74:	ldr	r4, [sp, #16]
   2da78:	bge	2dab8 <flatcc_json_parser_match_constant@@Base+0x50>
   2da7c:	ldrb	lr, [r1, r3]
   2da80:	mov	r5, r0
   2da84:	add	r3, r1, r3
   2da88:	cmp	lr, #32
   2da8c:	beq	2dac8 <flatcc_json_parser_match_constant@@Base+0x60>
   2da90:	cmp	lr, #34	; 0x22
   2da94:	beq	2db14 <flatcc_json_parser_match_constant@@Base+0xac>
   2da98:	cmp	lr, #92	; 0x5c
   2da9c:	bne	2dab8 <flatcc_json_parser_match_constant@@Base+0x50>
   2daa0:	mov	ip, #0
   2daa4:	mov	r1, r3
   2daa8:	str	ip, [r4]
   2daac:	mov	r3, #18
   2dab0:	pop	{r4, r5, r6, lr}
   2dab4:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2dab8:	mov	r3, #0
   2dabc:	mov	r0, r1
   2dac0:	str	r3, [r4]
   2dac4:	pop	{r4, r5, r6, pc}
   2dac8:	mov	ip, r2
   2dacc:	add	r2, r3, #1
   2dad0:	cmp	ip, r2
   2dad4:	beq	2db7c <flatcc_json_parser_match_constant@@Base+0x114>
   2dad8:	ldrb	r1, [r3, #1]
   2dadc:	cmp	r1, #32
   2dae0:	bne	2db4c <flatcc_json_parser_match_constant@@Base+0xe4>
   2dae4:	add	r2, r3, #2
   2dae8:	b	2daf8 <flatcc_json_parser_match_constant@@Base+0x90>
   2daec:	ldrb	r1, [r2], #1
   2daf0:	cmp	r1, #32
   2daf4:	bne	2db50 <flatcc_json_parser_match_constant@@Base+0xe8>
   2daf8:	cmp	r2, ip
   2dafc:	mov	r3, r2
   2db00:	bne	2daec <flatcc_json_parser_match_constant@@Base+0x84>
   2db04:	mov	r2, #0
   2db08:	mov	r0, r3
   2db0c:	str	r2, [r4]
   2db10:	pop	{r4, r5, r6, pc}
   2db14:	add	r0, r3, #1
   2db18:	cmn	r0, #1
   2db1c:	bge	2db30 <flatcc_json_parser_match_constant@@Base+0xc8>
   2db20:	ldrb	r2, [r3, #1]
   2db24:	cmp	r2, #32
   2db28:	bhi	2db40 <flatcc_json_parser_match_constant@@Base+0xd8>
   2db2c:	beq	2db68 <flatcc_json_parser_match_constant@@Base+0x100>
   2db30:	mov	r1, r0
   2db34:	mov	r2, #0
   2db38:	mov	r0, r5
   2db3c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2db40:	mov	r3, #0
   2db44:	str	r3, [r4]
   2db48:	pop	{r4, r5, r6, pc}
   2db4c:	mov	r3, r2
   2db50:	cmp	r1, #34	; 0x22
   2db54:	beq	2db14 <flatcc_json_parser_match_constant@@Base+0xac>
   2db58:	mov	r2, #1
   2db5c:	mov	r0, r3
   2db60:	str	r2, [r4]
   2db64:	pop	{r4, r5, r6, pc}
   2db68:	ldrb	r2, [r3, #2]
   2db6c:	cmp	r2, #32
   2db70:	addhi	r0, r3, #2
   2db74:	bls	2db30 <flatcc_json_parser_match_constant@@Base+0xc8>
   2db78:	b	2db40 <flatcc_json_parser_match_constant@@Base+0xd8>
   2db7c:	mov	r3, ip
   2db80:	b	2db04 <flatcc_json_parser_match_constant@@Base+0x9c>

0002db84 <flatcc_json_parser_double@@Base>:
   2db84:	push	{r4, r5, r6, r7, r8, lr}
   2db88:	mov	r4, #0
   2db8c:	mov	r5, #0
   2db90:	cmp	r1, r2
   2db94:	strd	r4, [r3]
   2db98:	beq	2dc2c <flatcc_json_parser_double@@Base+0xa8>
   2db9c:	ldrb	ip, [r1]
   2dba0:	cmp	ip, #45	; 0x2d
   2dba4:	addeq	ip, r1, #1
   2dba8:	movne	ip, r1
   2dbac:	sub	lr, r2, ip
   2dbb0:	cmp	lr, #1
   2dbb4:	ble	2dbcc <flatcc_json_parser_double@@Base+0x48>
   2dbb8:	ldrb	lr, [ip]
   2dbbc:	cmp	lr, #46	; 0x2e
   2dbc0:	beq	2dc40 <flatcc_json_parser_double@@Base+0xbc>
   2dbc4:	cmp	lr, #48	; 0x30
   2dbc8:	beq	2dc34 <flatcc_json_parser_double@@Base+0xb0>
   2dbcc:	mov	r4, r1
   2dbd0:	mov	r5, r2
   2dbd4:	sub	r1, r5, r1
   2dbd8:	mov	r7, r0
   2dbdc:	mov	r2, r3
   2dbe0:	mov	r0, r4
   2dbe4:	mov	r6, r3
   2dbe8:	bl	2c08c <grisu3_diy_fp_encode_double@@Base+0x5e4>
   2dbec:	cmp	r4, r0
   2dbf0:	cmpne	r0, #0
   2dbf4:	mov	r1, r0
   2dbf8:	bne	2dc2c <flatcc_json_parser_double@@Base+0xa8>
   2dbfc:	vldr	d7, [r6]
   2dc00:	vldr	d6, [pc, #72]	; 2dc50 <flatcc_json_parser_double@@Base+0xcc>
   2dc04:	mov	r2, r5
   2dc08:	mov	r1, r4
   2dc0c:	vabs.f64	d7, d7
   2dc10:	mov	r0, r7
   2dc14:	vcmp.f64	d7, d6
   2dc18:	vmrs	APSR_nzcv, fpscr
   2dc1c:	ble	2dc40 <flatcc_json_parser_double@@Base+0xbc>
   2dc20:	mov	r3, #7
   2dc24:	pop	{r4, r5, r6, r7, r8, lr}
   2dc28:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2dc2c:	mov	r0, r1
   2dc30:	pop	{r4, r5, r6, r7, r8, pc}
   2dc34:	ldrb	ip, [ip, #1]
   2dc38:	cmp	ip, #48	; 0x30
   2dc3c:	bne	2dbcc <flatcc_json_parser_double@@Base+0x48>
   2dc40:	mov	r3, #6
   2dc44:	pop	{r4, r5, r6, r7, r8, lr}
   2dc48:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2dc4c:	nop			; (mov r0, r0)
   2dc50:			; <UNDEFINED> instruction: 0xffffffff
   2dc54:	svcvc	0x00efffff

0002dc58 <flatcc_json_parser_float@@Base>:
   2dc58:	mov	ip, #0
   2dc5c:	cmp	r1, r2
   2dc60:	str	ip, [r3]
   2dc64:	beq	2dd4c <flatcc_json_parser_float@@Base+0xf4>
   2dc68:	push	{r4, r5, r6, r7, lr}
   2dc6c:	mov	r7, r3
   2dc70:	ldrb	ip, [r1]
   2dc74:	sub	sp, sp, #12
   2dc78:	mov	r6, r0
   2dc7c:	cmp	ip, #45	; 0x2d
   2dc80:	addeq	ip, r1, #1
   2dc84:	movne	ip, r1
   2dc88:	sub	r3, r2, ip
   2dc8c:	cmp	r3, #1
   2dc90:	mov	r5, r2
   2dc94:	mov	r4, r1
   2dc98:	ble	2dcb0 <flatcc_json_parser_float@@Base+0x58>
   2dc9c:	ldrb	r3, [ip]
   2dca0:	cmp	r3, #46	; 0x2e
   2dca4:	beq	2dd20 <flatcc_json_parser_float@@Base+0xc8>
   2dca8:	cmp	r3, #48	; 0x30
   2dcac:	beq	2dd3c <flatcc_json_parser_float@@Base+0xe4>
   2dcb0:	mov	r2, sp
   2dcb4:	sub	r1, r5, r4
   2dcb8:	mov	r0, r4
   2dcbc:	bl	2c08c <grisu3_diy_fp_encode_double@@Base+0x5e4>
   2dcc0:	vldr	d6, [sp]
   2dcc4:	vldr	s14, [pc, #136]	; 2dd54 <flatcc_json_parser_float@@Base+0xfc>
   2dcc8:	vcvt.f32.f64	s15, d6
   2dccc:	vabs.f32	s11, s15
   2dcd0:	vstr	s15, [r7]
   2dcd4:	vcmp.f32	s11, s14
   2dcd8:	vmrs	APSR_nzcv, fpscr
   2dcdc:	ble	2dd14 <flatcc_json_parser_float@@Base+0xbc>
   2dce0:	vcmpe.f64	d6, #0.0
   2dce4:	vldr	s15, [pc, #108]	; 2dd58 <flatcc_json_parser_float@@Base+0x100>
   2dce8:	vldr	s14, [pc, #108]	; 2dd5c <flatcc_json_parser_float@@Base+0x104>
   2dcec:	mov	r2, r5
   2dcf0:	vmrs	APSR_nzcv, fpscr
   2dcf4:	mov	r1, r4
   2dcf8:	mov	r0, r6
   2dcfc:	mov	r3, #7
   2dd00:	vmovpl.f32	s15, s14
   2dd04:	vstr	s15, [r7]
   2dd08:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2dd0c:	add	sp, sp, #12
   2dd10:	pop	{r4, r5, r6, r7, pc}
   2dd14:	cmp	r4, r0
   2dd18:	cmpne	r0, #0
   2dd1c:	bne	2dd0c <flatcc_json_parser_float@@Base+0xb4>
   2dd20:	mov	r2, r5
   2dd24:	mov	r1, r4
   2dd28:	mov	r0, r6
   2dd2c:	mov	r3, #6
   2dd30:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2dd34:	add	sp, sp, #12
   2dd38:	pop	{r4, r5, r6, r7, pc}
   2dd3c:	ldrb	r3, [ip, #1]
   2dd40:	cmp	r3, #48	; 0x30
   2dd44:	bne	2dcb0 <flatcc_json_parser_float@@Base+0x58>
   2dd48:	b	2dd20 <flatcc_json_parser_float@@Base+0xc8>
   2dd4c:	mov	r0, r1
   2dd50:	bx	lr
   2dd54:	svcvc	0x007fffff
   2dd58:			; <UNDEFINED> instruction: 0xff800000
   2dd5c:	svcvc	0x00800000

0002dd60 <flatcc_json_parser_integer@@Base>:
   2dd60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dd64:	cmp	r1, r2
   2dd68:	ldr	r9, [sp, #32]
   2dd6c:	beq	2de5c <flatcc_json_parser_integer@@Base+0xfc>
   2dd70:	ldrb	ip, [r1]
   2dd74:	mov	r8, r0
   2dd78:	sub	ip, ip, #45	; 0x2d
   2dd7c:	clz	ip, ip
   2dd80:	lsr	ip, ip, #5
   2dd84:	add	r0, r1, ip
   2dd88:	cmp	r2, r0
   2dd8c:	str	ip, [r3]
   2dd90:	beq	2de68 <flatcc_json_parser_integer@@Base+0x108>
   2dd94:	ldrb	r6, [r1, ip]
   2dd98:	sub	r3, r6, #48	; 0x30
   2dd9c:	cmp	r3, #9
   2dda0:	bhi	2de10 <flatcc_json_parser_integer@@Base+0xb0>
   2dda4:	uxtb	r6, r6
   2dda8:	mov	r7, #0
   2ddac:	subs	r6, r6, #48	; 0x30
   2ddb0:	add	r3, r0, #1
   2ddb4:	sbc	r7, r7, #0
   2ddb8:	mov	lr, #10
   2ddbc:	b	2ddf4 <flatcc_json_parser_integer@@Base+0x94>
   2ddc0:	ldrb	ip, [r3], #1
   2ddc4:	sub	sl, ip, #48	; 0x30
   2ddc8:	cmp	sl, #9
   2ddcc:	bhi	2de18 <flatcc_json_parser_integer@@Base+0xb8>
   2ddd0:	subs	r4, r4, #48	; 0x30
   2ddd4:	sbc	r5, r5, #0
   2ddd8:	adds	r4, r4, ip
   2dddc:	adc	r5, r5, #0
   2dde0:	cmp	r5, r7
   2dde4:	cmpeq	r4, r6
   2dde8:	mov	r7, r5
   2ddec:	mov	r6, r4
   2ddf0:	bcc	2de48 <flatcc_json_parser_integer@@Base+0xe8>
   2ddf4:	umull	r4, r5, r6, lr
   2ddf8:	cmp	r3, r2
   2ddfc:	mla	r5, lr, r7, r5
   2de00:	mov	r0, r3
   2de04:	bne	2ddc0 <flatcc_json_parser_integer@@Base+0x60>
   2de08:	strd	r6, [r9]
   2de0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2de10:	mov	r6, #0
   2de14:	mov	r7, #0
   2de18:	cmp	r1, r0
   2de1c:	beq	2de64 <flatcc_json_parser_integer@@Base+0x104>
   2de20:	ldrb	r3, [r0]
   2de24:	and	r1, r3, #223	; 0xdf
   2de28:	cmp	r3, #46	; 0x2e
   2de2c:	cmpne	r1, #69	; 0x45
   2de30:	bne	2de08 <flatcc_json_parser_integer@@Base+0xa8>
   2de34:	mov	r1, r0
   2de38:	mov	r3, #12
   2de3c:	mov	r0, r8
   2de40:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2de44:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2de48:	mov	r1, r0
   2de4c:	mov	r3, #8
   2de50:	mov	r0, r8
   2de54:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2de58:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2de5c:	mov	r0, r1
   2de60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2de64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2de68:	mov	r6, #0
   2de6c:	mov	r7, #0
   2de70:	b	2de08 <flatcc_json_parser_integer@@Base+0xa8>

0002de74 <flatcc_json_parser_generic_json@@Base>:
   2de74:	cmp	r1, r2
   2de78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2de7c:	mov	r4, r1
   2de80:	sub	sp, sp, #556	; 0x22c
   2de84:	beq	2ec14 <flatcc_json_parser_generic_json@@Base+0xda0>
   2de88:	mov	r5, r2
   2de8c:	ldr	r2, [pc, #3648]	; 2ecd4 <flatcc_json_parser_generic_json@@Base+0xe60>
   2de90:	ldrb	r3, [r1]
   2de94:	add	r2, pc, r2
   2de98:	str	r2, [sp, #16]
   2de9c:	ldr	r2, [pc, #3636]	; 2ecd8 <flatcc_json_parser_generic_json@@Base+0xe64>
   2dea0:	add	r9, sp, #40	; 0x28
   2dea4:	add	r2, pc, r2
   2dea8:	str	r2, [sp, #20]
   2deac:	ldr	r2, [pc, #3624]	; 2ecdc <flatcc_json_parser_generic_json@@Base+0xe68>
   2deb0:	mov	r7, r0
   2deb4:	mov	r6, r9
   2deb8:	add	r2, pc, r2
   2debc:	str	r2, [sp, #12]
   2dec0:	cmp	r6, r9
   2dec4:	beq	2e0b4 <flatcc_json_parser_generic_json@@Base+0x240>
   2dec8:	ldrb	r2, [r6, #-1]
   2decc:	cmp	r2, #125	; 0x7d
   2ded0:	beq	2e380 <flatcc_json_parser_generic_json@@Base+0x50c>
   2ded4:	sub	r2, r3, #34	; 0x22
   2ded8:	cmp	r2, #89	; 0x59
   2dedc:	addls	pc, pc, r2, lsl #2
   2dee0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dee4:	b	2e76c <flatcc_json_parser_generic_json@@Base+0x8f8>
   2dee8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2deec:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2def0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2def4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2def8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2defc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df00:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df04:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df08:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df0c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df10:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df14:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df18:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df1c:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df20:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df24:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df28:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df2c:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df30:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df34:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df38:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df3c:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df40:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2df44:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df48:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df4c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df50:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df54:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df58:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df5c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df60:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df64:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df68:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df6c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df70:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df74:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df78:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df7c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df80:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df84:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df88:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df8c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df90:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df94:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df98:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2df9c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfa0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfa4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfa8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfac:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfb0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfb4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfb8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfbc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfc0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfc4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfc8:	b	2e404 <flatcc_json_parser_generic_json@@Base+0x590>
   2dfcc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfd0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfd4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfd8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfdc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfe0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfe4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfe8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dfec:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dff0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dff4:	b	2e258 <flatcc_json_parser_generic_json@@Base+0x3e4>
   2dff8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2dffc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e000:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e004:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e008:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e00c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e010:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e014:	b	2e22c <flatcc_json_parser_generic_json@@Base+0x3b8>
   2e018:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e01c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e020:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e024:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e028:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e02c:	b	2e258 <flatcc_json_parser_generic_json@@Base+0x3e4>
   2e030:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e034:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e038:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e03c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e040:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e044:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e048:	b	2e04c <flatcc_json_parser_generic_json@@Base+0x1d8>
   2e04c:	add	r3, sp, #552	; 0x228
   2e050:	cmp	r6, r3
   2e054:	beq	2eb28 <flatcc_json_parser_generic_json@@Base+0xcb4>
   2e058:	add	r1, r4, #1
   2e05c:	sub	r3, r5, r1
   2e060:	cmp	r3, #1
   2e064:	mov	r3, #125	; 0x7d
   2e068:	strb	r3, [r6]
   2e06c:	add	r6, r6, #1
   2e070:	ble	2e088 <flatcc_json_parser_generic_json@@Base+0x214>
   2e074:	ldrb	r3, [r4, #1]
   2e078:	cmp	r3, #32
   2e07c:	movhi	r4, r1
   2e080:	bhi	2e098 <flatcc_json_parser_generic_json@@Base+0x224>
   2e084:	beq	2ebc8 <flatcc_json_parser_generic_json@@Base+0xd54>
   2e088:	mov	r2, r5
   2e08c:	mov	r0, r7
   2e090:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2e094:	mov	r4, r0
   2e098:	cmp	r5, r4
   2e09c:	beq	2eaf8 <flatcc_json_parser_generic_json@@Base+0xc84>
   2e0a0:	ldrb	r3, [r4]
   2e0a4:	cmp	r3, #125	; 0x7d
   2e0a8:	beq	2e464 <flatcc_json_parser_generic_json@@Base+0x5f0>
   2e0ac:	cmp	r6, r9
   2e0b0:	bne	2dec8 <flatcc_json_parser_generic_json@@Base+0x54>
   2e0b4:	sub	r2, r3, #34	; 0x22
   2e0b8:	cmp	r2, #89	; 0x59
   2e0bc:	addls	pc, pc, r2, lsl #2
   2e0c0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0c4:	b	2e76c <flatcc_json_parser_generic_json@@Base+0x8f8>
   2e0c8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0cc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0d0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0d4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0d8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0dc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0e0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0e4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0e8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0ec:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0f0:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e0f4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0f8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e0fc:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e100:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e104:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e108:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e10c:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e110:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e114:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e118:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e11c:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e120:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e124:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e128:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e12c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e130:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e134:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e138:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e13c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e140:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e144:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e148:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e14c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e150:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e154:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e158:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e15c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e160:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e164:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e168:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e16c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e170:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e174:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e178:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e17c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e180:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e184:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e188:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e18c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e190:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e194:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e198:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e19c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1a0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1a4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1a8:	b	2e410 <flatcc_json_parser_generic_json@@Base+0x59c>
   2e1ac:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1b0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1b4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1b8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1bc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1c0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1c4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1c8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1cc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1d0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1d4:	b	2e258 <flatcc_json_parser_generic_json@@Base+0x3e4>
   2e1d8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1dc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1e0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1e4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1e8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1ec:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1f0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1f4:	b	2e22c <flatcc_json_parser_generic_json@@Base+0x3b8>
   2e1f8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e1fc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e200:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e204:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e208:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e20c:	b	2e258 <flatcc_json_parser_generic_json@@Base+0x3e4>
   2e210:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e214:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e218:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e21c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e220:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e224:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e228:	b	2e04c <flatcc_json_parser_generic_json@@Base+0x1d8>
   2e22c:	sub	r3, r5, r4
   2e230:	cmp	r3, #3
   2e234:	ble	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e238:	mov	r2, #4
   2e23c:	ldr	r1, [sp, #16]
   2e240:	mov	r0, r4
   2e244:	bl	14550 <memcmp@plt>
   2e248:	cmp	r0, #0
   2e24c:	bne	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e250:	add	r0, r4, #4
   2e254:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2e258:	sub	r8, r5, r4
   2e25c:	cmp	r8, #3
   2e260:	bgt	2e7fc <flatcc_json_parser_generic_json@@Base+0x988>
   2e264:	mov	r0, #0
   2e268:	mov	r1, #0
   2e26c:	cmp	r5, r4
   2e270:	mov	r3, #0
   2e274:	strd	r0, [r9, #-8]
   2e278:	str	r3, [sp, #28]
   2e27c:	moveq	r0, r5
   2e280:	beq	2e2c8 <flatcc_json_parser_generic_json@@Base+0x454>
   2e284:	add	r3, sp, #32
   2e288:	str	r3, [sp]
   2e28c:	mov	r2, r5
   2e290:	add	r3, sp, #28
   2e294:	mov	r1, r4
   2e298:	mov	r0, r7
   2e29c:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   2e2a0:	cmp	r0, r4
   2e2a4:	moveq	r0, r4
   2e2a8:	beq	2e2c8 <flatcc_json_parser_generic_json@@Base+0x454>
   2e2ac:	ldr	r3, [sp, #28]
   2e2b0:	cmp	r3, #0
   2e2b4:	bne	2ec1c <flatcc_json_parser_generic_json@@Base+0xda8>
   2e2b8:	ldrd	r2, [r9, #-8]
   2e2bc:	cmp	r3, #0
   2e2c0:	cmpeq	r2, #255	; 0xff
   2e2c4:	bhi	2ec4c <flatcc_json_parser_generic_json@@Base+0xdd8>
   2e2c8:	cmp	r0, r4
   2e2cc:	beq	2ecac <flatcc_json_parser_generic_json@@Base+0xe38>
   2e2d0:	cmp	r5, r0
   2e2d4:	bne	2e468 <flatcc_json_parser_generic_json@@Base+0x5f4>
   2e2d8:	mov	r8, r6
   2e2dc:	mov	r0, r5
   2e2e0:	b	2e998 <flatcc_json_parser_generic_json@@Base+0xb24>
   2e2e4:	cmp	r5, r4
   2e2e8:	beq	2e2d8 <flatcc_json_parser_generic_json@@Base+0x464>
   2e2ec:	cmp	r3, #45	; 0x2d
   2e2f0:	beq	2e840 <flatcc_json_parser_generic_json@@Base+0x9cc>
   2e2f4:	ldrb	r3, [r4]
   2e2f8:	cmp	r3, #48	; 0x30
   2e2fc:	beq	2e864 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2e300:	sub	r3, r3, #49	; 0x31
   2e304:	cmp	r3, #8
   2e308:	bhi	2ebf0 <flatcc_json_parser_generic_json@@Base+0xd7c>
   2e30c:	add	r0, r4, #1
   2e310:	cmp	r5, r0
   2e314:	beq	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2e318:	ldrb	r3, [r4, #1]
   2e31c:	sub	r2, r3, #48	; 0x30
   2e320:	cmp	r2, #9
   2e324:	bhi	2e874 <flatcc_json_parser_generic_json@@Base+0xa00>
   2e328:	add	r4, r4, #2
   2e32c:	b	2e340 <flatcc_json_parser_generic_json@@Base+0x4cc>
   2e330:	ldrb	r3, [r4], #1
   2e334:	sub	r2, r3, #48	; 0x30
   2e338:	cmp	r2, #9
   2e33c:	bhi	2e874 <flatcc_json_parser_generic_json@@Base+0xa00>
   2e340:	cmp	r5, r4
   2e344:	mov	r0, r4
   2e348:	bne	2e330 <flatcc_json_parser_generic_json@@Base+0x4bc>
   2e34c:	mov	r1, r0
   2e350:	mov	r3, #6
   2e354:	mov	r2, r5
   2e358:	mov	r0, r7
   2e35c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e360:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2e364:	mov	r2, r5
   2e368:	mov	r1, r4
   2e36c:	mov	r0, r7
   2e370:	mov	r3, #5
   2e374:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e378:	add	sp, sp, #556	; 0x22c
   2e37c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e380:	cmp	r3, #34	; 0x22
   2e384:	addeq	r1, r4, #1
   2e388:	beq	2e3a4 <flatcc_json_parser_generic_json@@Base+0x530>
   2e38c:	mov	r1, r4
   2e390:	mov	r3, #5
   2e394:	mov	r2, r5
   2e398:	mov	r0, r7
   2e39c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e3a0:	mov	r1, r0
   2e3a4:	cmp	r5, r1
   2e3a8:	beq	2e3fc <flatcc_json_parser_generic_json@@Base+0x588>
   2e3ac:	ldrb	r2, [r1]
   2e3b0:	cmp	r2, #34	; 0x22
   2e3b4:	bne	2e3d4 <flatcc_json_parser_generic_json@@Base+0x560>
   2e3b8:	b	2eac4 <flatcc_json_parser_generic_json@@Base+0xc50>
   2e3bc:	add	r1, r3, #1
   2e3c0:	cmp	r5, r1
   2e3c4:	beq	2e3fc <flatcc_json_parser_generic_json@@Base+0x588>
   2e3c8:	ldrb	r2, [r3, #1]
   2e3cc:	cmp	r2, #34	; 0x22
   2e3d0:	beq	2eac4 <flatcc_json_parser_generic_json@@Base+0xc50>
   2e3d4:	cmp	r2, #92	; 0x5c
   2e3d8:	mov	r3, r1
   2e3dc:	bne	2e3bc <flatcc_json_parser_generic_json@@Base+0x548>
   2e3e0:	sub	r3, r5, r1
   2e3e4:	cmp	r3, #1
   2e3e8:	ble	2e558 <flatcc_json_parser_generic_json@@Base+0x6e4>
   2e3ec:	add	r3, r1, #1
   2e3f0:	add	r1, r3, #1
   2e3f4:	cmp	r5, r1
   2e3f8:	bne	2e3c8 <flatcc_json_parser_generic_json@@Base+0x554>
   2e3fc:	mov	r1, r5
   2e400:	b	2e564 <flatcc_json_parser_generic_json@@Base+0x6f0>
   2e404:	add	r3, sp, #552	; 0x228
   2e408:	cmp	r6, r3
   2e40c:	beq	2eb28 <flatcc_json_parser_generic_json@@Base+0xcb4>
   2e410:	add	r1, r4, #1
   2e414:	sub	r3, r5, r1
   2e418:	cmp	r3, #1
   2e41c:	mov	r3, #93	; 0x5d
   2e420:	strb	r3, [r6]
   2e424:	add	r6, r6, #1
   2e428:	ble	2e440 <flatcc_json_parser_generic_json@@Base+0x5cc>
   2e42c:	ldrb	r3, [r4, #1]
   2e430:	cmp	r3, #32
   2e434:	movhi	r4, r1
   2e438:	bhi	2e450 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2e43c:	beq	2ebdc <flatcc_json_parser_generic_json@@Base+0xd68>
   2e440:	mov	r2, r5
   2e444:	mov	r0, r7
   2e448:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2e44c:	mov	r4, r0
   2e450:	cmp	r5, r4
   2e454:	beq	2eaf8 <flatcc_json_parser_generic_json@@Base+0xc84>
   2e458:	ldrb	r3, [r4]
   2e45c:	cmp	r3, #93	; 0x5d
   2e460:	bne	2dec0 <flatcc_json_parser_generic_json@@Base+0x4c>
   2e464:	mov	r0, r4
   2e468:	cmp	r6, r9
   2e46c:	beq	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2e470:	mov	sl, #10
   2e474:	mov	fp, #9
   2e478:	b	2e4e8 <flatcc_json_parser_generic_json@@Base+0x674>
   2e47c:	cmp	r3, #1
   2e480:	ble	2e494 <flatcc_json_parser_generic_json@@Base+0x620>
   2e484:	ldrb	r3, [r0]
   2e488:	cmp	r3, #32
   2e48c:	bhi	2e4a4 <flatcc_json_parser_generic_json@@Base+0x630>
   2e490:	beq	2e97c <flatcc_json_parser_generic_json@@Base+0xb08>
   2e494:	mov	r1, r0
   2e498:	mov	r2, r5
   2e49c:	mov	r0, r7
   2e4a0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2e4a4:	cmp	r5, r0
   2e4a8:	beq	2e994 <flatcc_json_parser_generic_json@@Base+0xb20>
   2e4ac:	ldrb	r3, [r0]
   2e4b0:	cmp	r3, #44	; 0x2c
   2e4b4:	beq	2e9c8 <flatcc_json_parser_generic_json@@Base+0xb54>
   2e4b8:	cmp	r3, #125	; 0x7d
   2e4bc:	beq	2e948 <flatcc_json_parser_generic_json@@Base+0xad4>
   2e4c0:	mov	r1, r0
   2e4c4:	mov	r3, sl
   2e4c8:	mov	r2, r5
   2e4cc:	mov	r0, r7
   2e4d0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e4d4:	cmp	r5, r0
   2e4d8:	beq	2e994 <flatcc_json_parser_generic_json@@Base+0xb20>
   2e4dc:	cmp	r8, r9
   2e4e0:	mov	r6, r8
   2e4e4:	beq	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2e4e8:	ldrb	r3, [r6, #-1]
   2e4ec:	sub	r8, r6, #1
   2e4f0:	cmp	r3, #93	; 0x5d
   2e4f4:	sub	r3, r5, r0
   2e4f8:	bne	2e47c <flatcc_json_parser_generic_json@@Base+0x608>
   2e4fc:	cmp	r3, #1
   2e500:	ble	2e514 <flatcc_json_parser_generic_json@@Base+0x6a0>
   2e504:	ldrb	r3, [r0]
   2e508:	cmp	r3, #32
   2e50c:	bhi	2e524 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2e510:	beq	2ea14 <flatcc_json_parser_generic_json@@Base+0xba0>
   2e514:	mov	r1, r0
   2e518:	mov	r2, r5
   2e51c:	mov	r0, r7
   2e520:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2e524:	cmp	r5, r0
   2e528:	beq	2e994 <flatcc_json_parser_generic_json@@Base+0xb20>
   2e52c:	ldrb	r3, [r0]
   2e530:	cmp	r3, #44	; 0x2c
   2e534:	beq	2ea28 <flatcc_json_parser_generic_json@@Base+0xbb4>
   2e538:	cmp	r3, #93	; 0x5d
   2e53c:	beq	2e948 <flatcc_json_parser_generic_json@@Base+0xad4>
   2e540:	mov	r1, r0
   2e544:	mov	r3, fp
   2e548:	mov	r2, r5
   2e54c:	mov	r0, r7
   2e550:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e554:	b	2e4d4 <flatcc_json_parser_generic_json@@Base+0x660>
   2e558:	ldrb	r3, [r1]
   2e55c:	cmp	r3, #34	; 0x22
   2e560:	beq	2eac4 <flatcc_json_parser_generic_json@@Base+0xc50>
   2e564:	mov	r3, #20
   2e568:	mov	r2, r5
   2e56c:	mov	r0, r7
   2e570:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e574:	sub	r3, r5, r0
   2e578:	cmp	r3, #1
   2e57c:	ble	2e590 <flatcc_json_parser_generic_json@@Base+0x71c>
   2e580:	ldrb	r3, [r0]
   2e584:	cmp	r3, #32
   2e588:	bhi	2e5a0 <flatcc_json_parser_generic_json@@Base+0x72c>
   2e58c:	beq	2e904 <flatcc_json_parser_generic_json@@Base+0xa90>
   2e590:	mov	r1, r0
   2e594:	mov	r2, r5
   2e598:	mov	r0, r7
   2e59c:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2e5a0:	cmp	r5, r0
   2e5a4:	beq	2ec94 <flatcc_json_parser_generic_json@@Base+0xe20>
   2e5a8:	ldrb	r3, [r0]
   2e5ac:	cmp	r3, #58	; 0x3a
   2e5b0:	bne	2ec64 <flatcc_json_parser_generic_json@@Base+0xdf0>
   2e5b4:	add	r4, r0, #1
   2e5b8:	sub	r3, r5, r4
   2e5bc:	cmp	r3, #1
   2e5c0:	ble	2e5d4 <flatcc_json_parser_generic_json@@Base+0x760>
   2e5c4:	ldrb	r3, [r0, #1]
   2e5c8:	cmp	r3, #32
   2e5cc:	bhi	2e5ec <flatcc_json_parser_generic_json@@Base+0x778>
   2e5d0:	beq	2e918 <flatcc_json_parser_generic_json@@Base+0xaa4>
   2e5d4:	mov	r1, r4
   2e5d8:	mov	r2, r5
   2e5dc:	mov	r0, r7
   2e5e0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2e5e4:	ldrb	r3, [r0]
   2e5e8:	mov	r4, r0
   2e5ec:	sub	r2, r3, #34	; 0x22
   2e5f0:	cmp	r2, #89	; 0x59
   2e5f4:	addls	pc, pc, r2, lsl #2
   2e5f8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e5fc:	b	2e764 <flatcc_json_parser_generic_json@@Base+0x8f0>
   2e600:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e604:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e608:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e60c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e610:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e614:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e618:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e61c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e620:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e624:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e628:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e62c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e630:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e634:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e638:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e63c:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e640:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e644:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e648:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e64c:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e650:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e654:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e658:	b	2e2e4 <flatcc_json_parser_generic_json@@Base+0x470>
   2e65c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e660:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e664:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e668:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e66c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e670:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e674:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e678:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e67c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e680:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e684:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e688:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e68c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e690:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e694:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e698:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e69c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6a0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6a4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6a8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6ac:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6b0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6b4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6b8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6bc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6c0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6c4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6c8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6cc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6d0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6d4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6d8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6dc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6e0:	b	2e404 <flatcc_json_parser_generic_json@@Base+0x590>
   2e6e4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6e8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6ec:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6f0:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6f4:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6f8:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e6fc:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e700:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e704:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e708:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e70c:	b	2e258 <flatcc_json_parser_generic_json@@Base+0x3e4>
   2e710:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e714:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e718:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e71c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e720:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e724:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e728:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e72c:	b	2e22c <flatcc_json_parser_generic_json@@Base+0x3b8>
   2e730:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e734:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e738:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e73c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e740:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e744:	b	2e258 <flatcc_json_parser_generic_json@@Base+0x3e4>
   2e748:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e74c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e750:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e754:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e758:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e75c:	b	2e364 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e760:	b	2e04c <flatcc_json_parser_generic_json@@Base+0x1d8>
   2e764:	cmp	r4, r5
   2e768:	beq	2e92c <flatcc_json_parser_generic_json@@Base+0xab8>
   2e76c:	add	r4, r4, #1
   2e770:	cmp	r5, r4
   2e774:	beq	2e7e4 <flatcc_json_parser_generic_json@@Base+0x970>
   2e778:	ldrb	r3, [r4]
   2e77c:	cmp	r3, #34	; 0x22
   2e780:	addne	r8, sp, #24
   2e784:	bne	2e798 <flatcc_json_parser_generic_json@@Base+0x924>
   2e788:	b	2eaa8 <flatcc_json_parser_generic_json@@Base+0xc34>
   2e78c:	ldrb	r3, [r0]
   2e790:	cmp	r3, #34	; 0x22
   2e794:	beq	2eaa8 <flatcc_json_parser_generic_json@@Base+0xc34>
   2e798:	mov	r1, r4
   2e79c:	mov	r2, r5
   2e7a0:	mov	r0, r7
   2e7a4:	bl	2cd90 <flatcc_json_parser_string_part@@Base>
   2e7a8:	mov	r3, r8
   2e7ac:	mov	r2, r5
   2e7b0:	mov	r4, r0
   2e7b4:	cmp	r5, r4
   2e7b8:	mov	r1, r0
   2e7bc:	mov	r0, r7
   2e7c0:	beq	2e7d0 <flatcc_json_parser_generic_json@@Base+0x95c>
   2e7c4:	ldrb	ip, [r4]
   2e7c8:	cmp	ip, #34	; 0x22
   2e7cc:	beq	2eaa8 <flatcc_json_parser_generic_json@@Base+0xc34>
   2e7d0:	bl	2d52c <flatcc_json_parser_string_escape@@Base>
   2e7d4:	cmp	r5, r0
   2e7d8:	mov	r4, r0
   2e7dc:	bne	2e78c <flatcc_json_parser_generic_json@@Base+0x918>
   2e7e0:	mov	r4, r5
   2e7e4:	mov	r1, r4
   2e7e8:	mov	r3, #20
   2e7ec:	mov	r2, r5
   2e7f0:	mov	r0, r7
   2e7f4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e7f8:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2e7fc:	mov	r2, #4
   2e800:	ldr	r1, [sp, #20]
   2e804:	mov	r0, r4
   2e808:	bl	14550 <memcmp@plt>
   2e80c:	cmp	r0, #0
   2e810:	addeq	r0, r4, #4
   2e814:	beq	2e2c8 <flatcc_json_parser_generic_json@@Base+0x454>
   2e818:	cmp	r8, #4
   2e81c:	beq	2e264 <flatcc_json_parser_generic_json@@Base+0x3f0>
   2e820:	mov	r2, #5
   2e824:	ldr	r1, [sp, #12]
   2e828:	mov	r0, r4
   2e82c:	bl	14550 <memcmp@plt>
   2e830:	cmp	r0, #0
   2e834:	addeq	r0, r4, #5
   2e838:	bne	2e264 <flatcc_json_parser_generic_json@@Base+0x3f0>
   2e83c:	b	2e2c8 <flatcc_json_parser_generic_json@@Base+0x454>
   2e840:	add	r4, r4, #1
   2e844:	cmp	r5, r4
   2e848:	bne	2e2f4 <flatcc_json_parser_generic_json@@Base+0x480>
   2e84c:	mov	r3, #6
   2e850:	mov	r2, r5
   2e854:	mov	r1, r5
   2e858:	mov	r0, r7
   2e85c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e860:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2e864:	add	r0, r4, #1
   2e868:	cmp	r5, r0
   2e86c:	ldrbne	r3, [r4, #1]
   2e870:	beq	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2e874:	cmp	r3, #46	; 0x2e
   2e878:	beq	2eb74 <flatcc_json_parser_generic_json@@Base+0xd00>
   2e87c:	and	r2, r3, #223	; 0xdf
   2e880:	cmp	r2, #69	; 0x45
   2e884:	bne	2eacc <flatcc_json_parser_generic_json@@Base+0xc58>
   2e888:	add	r1, r0, #1
   2e88c:	cmp	r5, r1
   2e890:	beq	2e84c <flatcc_json_parser_generic_json@@Base+0x9d8>
   2e894:	ldrb	r3, [r0, #1]
   2e898:	sub	r2, r3, #43	; 0x2b
   2e89c:	tst	r2, #253	; 0xfd
   2e8a0:	bne	2e8b4 <flatcc_json_parser_generic_json@@Base+0xa40>
   2e8a4:	add	r1, r0, #2
   2e8a8:	cmp	r5, r1
   2e8ac:	beq	2e350 <flatcc_json_parser_generic_json@@Base+0x4dc>
   2e8b0:	ldrb	r3, [r0, #2]
   2e8b4:	sub	r3, r3, #48	; 0x30
   2e8b8:	cmp	r3, #9
   2e8bc:	bhi	2e350 <flatcc_json_parser_generic_json@@Base+0x4dc>
   2e8c0:	add	r0, r1, #1
   2e8c4:	cmp	r5, r0
   2e8c8:	beq	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2e8cc:	ldrb	r3, [r1, #1]
   2e8d0:	sub	r2, r3, #48	; 0x30
   2e8d4:	cmp	r2, #9
   2e8d8:	bhi	2eacc <flatcc_json_parser_generic_json@@Base+0xc58>
   2e8dc:	add	r2, r1, #2
   2e8e0:	b	2e8f4 <flatcc_json_parser_generic_json@@Base+0xa80>
   2e8e4:	ldrb	r3, [r2], #1
   2e8e8:	sub	r1, r3, #48	; 0x30
   2e8ec:	cmp	r1, #9
   2e8f0:	bhi	2eacc <flatcc_json_parser_generic_json@@Base+0xc58>
   2e8f4:	cmp	r5, r2
   2e8f8:	mov	r0, r2
   2e8fc:	bne	2e8e4 <flatcc_json_parser_generic_json@@Base+0xa70>
   2e900:	b	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2e904:	ldrb	r3, [r0, #1]
   2e908:	cmp	r3, #32
   2e90c:	addhi	r0, r0, #1
   2e910:	bls	2e590 <flatcc_json_parser_generic_json@@Base+0x71c>
   2e914:	b	2e5a0 <flatcc_json_parser_generic_json@@Base+0x72c>
   2e918:	ldrb	r3, [r0, #2]
   2e91c:	cmp	r3, #32
   2e920:	addhi	r4, r0, #2
   2e924:	bls	2e5d4 <flatcc_json_parser_generic_json@@Base+0x760>
   2e928:	b	2e5ec <flatcc_json_parser_generic_json@@Base+0x778>
   2e92c:	mov	r3, #16
   2e930:	mov	r2, r5
   2e934:	mov	r1, r5
   2e938:	mov	r0, r7
   2e93c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e940:	mov	r4, r0
   2e944:	b	2e770 <flatcc_json_parser_generic_json@@Base+0x8fc>
   2e948:	add	r1, r0, #1
   2e94c:	sub	r3, r5, r1
   2e950:	cmp	r3, #1
   2e954:	ble	2e96c <flatcc_json_parser_generic_json@@Base+0xaf8>
   2e958:	ldrb	r3, [r0, #1]
   2e95c:	cmp	r3, #32
   2e960:	movhi	r0, r1
   2e964:	bhi	2e4d4 <flatcc_json_parser_generic_json@@Base+0x660>
   2e968:	beq	2ea94 <flatcc_json_parser_generic_json@@Base+0xc20>
   2e96c:	mov	r2, r5
   2e970:	mov	r0, r7
   2e974:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2e978:	b	2e4d4 <flatcc_json_parser_generic_json@@Base+0x660>
   2e97c:	ldrb	r3, [r0, #1]
   2e980:	cmp	r3, #32
   2e984:	addhi	r0, r0, #1
   2e988:	bls	2e494 <flatcc_json_parser_generic_json@@Base+0x620>
   2e98c:	cmp	r5, r0
   2e990:	bne	2e4ac <flatcc_json_parser_generic_json@@Base+0x638>
   2e994:	mov	r0, r5
   2e998:	cmp	r8, r9
   2e99c:	beq	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2e9a0:	ldrb	r3, [r8, #-1]
   2e9a4:	mov	r0, r7
   2e9a8:	mov	r2, r5
   2e9ac:	cmp	r3, #93	; 0x5d
   2e9b0:	movne	r3, #10
   2e9b4:	moveq	r3, #9
   2e9b8:	mov	r1, r5
   2e9bc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2e9c0:	add	sp, sp, #556	; 0x22c
   2e9c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e9c8:	add	r1, r0, #1
   2e9cc:	sub	r3, r5, r1
   2e9d0:	cmp	r3, #1
   2e9d4:	ble	2e9e8 <flatcc_json_parser_generic_json@@Base+0xb74>
   2e9d8:	ldrb	r3, [r0, #1]
   2e9dc:	cmp	r3, #32
   2e9e0:	bhi	2e9f8 <flatcc_json_parser_generic_json@@Base+0xb84>
   2e9e4:	beq	2eab0 <flatcc_json_parser_generic_json@@Base+0xc3c>
   2e9e8:	mov	r2, r5
   2e9ec:	mov	r0, r7
   2e9f0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2e9f4:	mov	r1, r0
   2e9f8:	cmp	r5, r1
   2e9fc:	beq	2eb40 <flatcc_json_parser_generic_json@@Base+0xccc>
   2ea00:	ldrb	r3, [r1]
   2ea04:	cmp	r3, #125	; 0x7d
   2ea08:	beq	2ea6c <flatcc_json_parser_generic_json@@Base+0xbf8>
   2ea0c:	mov	r4, r1
   2ea10:	b	2dec0 <flatcc_json_parser_generic_json@@Base+0x4c>
   2ea14:	ldrb	r3, [r0, #1]
   2ea18:	cmp	r3, #32
   2ea1c:	addhi	r0, r0, #1
   2ea20:	bls	2e514 <flatcc_json_parser_generic_json@@Base+0x6a0>
   2ea24:	b	2e524 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2ea28:	add	r1, r0, #1
   2ea2c:	sub	r3, r5, r1
   2ea30:	cmp	r3, #1
   2ea34:	ble	2ea48 <flatcc_json_parser_generic_json@@Base+0xbd4>
   2ea38:	ldrb	r3, [r0, #1]
   2ea3c:	cmp	r3, #32
   2ea40:	bhi	2ea58 <flatcc_json_parser_generic_json@@Base+0xbe4>
   2ea44:	beq	2eb00 <flatcc_json_parser_generic_json@@Base+0xc8c>
   2ea48:	mov	r2, r5
   2ea4c:	mov	r0, r7
   2ea50:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2ea54:	mov	r1, r0
   2ea58:	cmp	r5, r1
   2ea5c:	beq	2ec34 <flatcc_json_parser_generic_json@@Base+0xdc0>
   2ea60:	ldrb	r3, [r1]
   2ea64:	cmp	r3, #93	; 0x5d
   2ea68:	bne	2ea0c <flatcc_json_parser_generic_json@@Base+0xb98>
   2ea6c:	add	r0, r1, #1
   2ea70:	sub	r3, r5, r0
   2ea74:	cmp	r3, #1
   2ea78:	ble	2ea8c <flatcc_json_parser_generic_json@@Base+0xc18>
   2ea7c:	ldrb	r3, [r1, #1]
   2ea80:	cmp	r3, #32
   2ea84:	bhi	2e4d4 <flatcc_json_parser_generic_json@@Base+0x660>
   2ea88:	beq	2eb14 <flatcc_json_parser_generic_json@@Base+0xca0>
   2ea8c:	mov	r1, r0
   2ea90:	b	2e96c <flatcc_json_parser_generic_json@@Base+0xaf8>
   2ea94:	ldrb	r3, [r0, #2]
   2ea98:	cmp	r3, #32
   2ea9c:	addhi	r0, r0, #2
   2eaa0:	bls	2e96c <flatcc_json_parser_generic_json@@Base+0xaf8>
   2eaa4:	b	2e4d4 <flatcc_json_parser_generic_json@@Base+0x660>
   2eaa8:	add	r0, r4, #1
   2eaac:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2eab0:	ldrb	r3, [r0, #2]
   2eab4:	cmp	r3, #32
   2eab8:	addhi	r1, r0, #2
   2eabc:	bls	2e9e8 <flatcc_json_parser_generic_json@@Base+0xb74>
   2eac0:	b	2e9f8 <flatcc_json_parser_generic_json@@Base+0xb84>
   2eac4:	add	r0, r1, #1
   2eac8:	b	2e574 <flatcc_json_parser_generic_json@@Base+0x700>
   2eacc:	cmp	r3, #32
   2ead0:	beq	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2ead4:	bls	2eb58 <flatcc_json_parser_generic_json@@Base+0xce4>
   2ead8:	cmp	r3, #58	; 0x3a
   2eadc:	beq	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2eae0:	bls	2ec08 <flatcc_json_parser_generic_json@@Base+0xd94>
   2eae4:	cmp	r3, #93	; 0x5d
   2eae8:	beq	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2eaec:	cmp	r3, #125	; 0x7d
   2eaf0:	bne	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2eaf4:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2eaf8:	mov	r0, r5
   2eafc:	b	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2eb00:	ldrb	r3, [r0, #2]
   2eb04:	cmp	r3, #32
   2eb08:	addhi	r1, r0, #2
   2eb0c:	bls	2ea48 <flatcc_json_parser_generic_json@@Base+0xbd4>
   2eb10:	b	2ea58 <flatcc_json_parser_generic_json@@Base+0xbe4>
   2eb14:	ldrb	r3, [r1, #2]
   2eb18:	cmp	r3, #32
   2eb1c:	addhi	r0, r1, #2
   2eb20:	bls	2ea8c <flatcc_json_parser_generic_json@@Base+0xc18>
   2eb24:	b	2e4d4 <flatcc_json_parser_generic_json@@Base+0x660>
   2eb28:	mov	r2, r5
   2eb2c:	mov	r1, r4
   2eb30:	mov	r0, r7
   2eb34:	mov	r3, #2
   2eb38:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2eb3c:	b	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2eb40:	mov	r3, sl
   2eb44:	mov	r2, r5
   2eb48:	mov	r1, r5
   2eb4c:	mov	r0, r7
   2eb50:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2eb54:	b	2e4d4 <flatcc_json_parser_generic_json@@Base+0x660>
   2eb58:	cmp	r3, #9
   2eb5c:	bcc	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2eb60:	cmp	r3, #11
   2eb64:	bls	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2eb68:	cmp	r3, #13
   2eb6c:	bne	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2eb70:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2eb74:	ldrb	r3, [r0, #1]
   2eb78:	sub	r3, r3, #48	; 0x30
   2eb7c:	cmp	r3, #9
   2eb80:	bhi	2ec7c <flatcc_json_parser_generic_json@@Base+0xe08>
   2eb84:	add	r2, r0, #2
   2eb88:	cmp	r5, r2
   2eb8c:	beq	2eccc <flatcc_json_parser_generic_json@@Base+0xe58>
   2eb90:	ldrb	r3, [r0, #2]
   2eb94:	sub	r1, r3, #48	; 0x30
   2eb98:	cmp	r1, #9
   2eb9c:	bhi	2ecc4 <flatcc_json_parser_generic_json@@Base+0xe50>
   2eba0:	add	r2, r0, #3
   2eba4:	b	2ebb8 <flatcc_json_parser_generic_json@@Base+0xd44>
   2eba8:	ldrb	r3, [r2], #1
   2ebac:	sub	r1, r3, #48	; 0x30
   2ebb0:	cmp	r1, #9
   2ebb4:	bhi	2e87c <flatcc_json_parser_generic_json@@Base+0xa08>
   2ebb8:	cmp	r5, r2
   2ebbc:	mov	r0, r2
   2ebc0:	bne	2eba8 <flatcc_json_parser_generic_json@@Base+0xd34>
   2ebc4:	b	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2ebc8:	ldrb	r3, [r4, #2]
   2ebcc:	cmp	r3, #32
   2ebd0:	addhi	r4, r4, #2
   2ebd4:	bls	2e088 <flatcc_json_parser_generic_json@@Base+0x214>
   2ebd8:	b	2e098 <flatcc_json_parser_generic_json@@Base+0x224>
   2ebdc:	ldrb	r3, [r4, #2]
   2ebe0:	cmp	r3, #32
   2ebe4:	addhi	r4, r4, #2
   2ebe8:	bls	2e440 <flatcc_json_parser_generic_json@@Base+0x5cc>
   2ebec:	b	2e450 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2ebf0:	mov	r1, r4
   2ebf4:	mov	r3, #6
   2ebf8:	mov	r2, r5
   2ebfc:	mov	r0, r7
   2ec00:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2ec04:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2ec08:	cmp	r3, #44	; 0x2c
   2ec0c:	bne	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2ec10:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2ec14:	mov	r0, r1
   2ec18:	b	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2ec1c:	mov	r1, r0
   2ec20:	mov	r3, #8
   2ec24:	mov	r2, r5
   2ec28:	mov	r0, r7
   2ec2c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2ec30:	b	2e2c8 <flatcc_json_parser_generic_json@@Base+0x454>
   2ec34:	mov	r3, fp
   2ec38:	mov	r2, r5
   2ec3c:	mov	r1, r5
   2ec40:	mov	r0, r7
   2ec44:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2ec48:	b	2e4d4 <flatcc_json_parser_generic_json@@Base+0x660>
   2ec4c:	mov	r1, r0
   2ec50:	mov	r3, #7
   2ec54:	mov	r2, r5
   2ec58:	mov	r0, r7
   2ec5c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2ec60:	b	2e2c8 <flatcc_json_parser_generic_json@@Base+0x454>
   2ec64:	mov	r1, r0
   2ec68:	mov	r2, r5
   2ec6c:	mov	r0, r7
   2ec70:	mov	r3, #4
   2ec74:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2ec78:	b	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2ec7c:	add	r1, r0, #1
   2ec80:	mov	r3, #6
   2ec84:	mov	r2, r5
   2ec88:	mov	r0, r7
   2ec8c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2ec90:	b	2e2d0 <flatcc_json_parser_generic_json@@Base+0x45c>
   2ec94:	mov	r0, r7
   2ec98:	mov	r3, #10
   2ec9c:	mov	r2, r5
   2eca0:	mov	r1, r5
   2eca4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2eca8:	b	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2ecac:	mov	r1, r0
   2ecb0:	mov	r2, r5
   2ecb4:	mov	r0, r7
   2ecb8:	mov	r3, #5
   2ecbc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2ecc0:	b	2e378 <flatcc_json_parser_generic_json@@Base+0x504>
   2ecc4:	mov	r0, r2
   2ecc8:	b	2e87c <flatcc_json_parser_generic_json@@Base+0xa08>
   2eccc:	mov	r0, r5
   2ecd0:	b	2e34c <flatcc_json_parser_generic_json@@Base+0x4d8>
   2ecd4:	andeq	r0, r1, ip, ror #4
   2ecd8:	andeq	r0, r1, r4, ror #4
   2ecdc:	andeq	r0, r1, r8, asr r2

0002ece0 <flatcc_json_parser_unmatched_symbol@@Base>:
   2ece0:	ldr	ip, [r0, #8]
   2ece4:	tst	ip, #1
   2ece8:	beq	2ed60 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   2ecec:	cmp	r1, r2
   2ecf0:	push	{r4, r5, r6, lr}
   2ecf4:	mov	r3, r1
   2ecf8:	mov	r5, r0
   2ecfc:	mov	r4, r2
   2ed00:	beq	2ee40 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
   2ed04:	ldrb	r1, [r1]
   2ed08:	mov	r6, r2
   2ed0c:	cmp	r1, #34	; 0x22
   2ed10:	bne	2ed30 <flatcc_json_parser_unmatched_symbol@@Base+0x50>
   2ed14:	b	2edf4 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   2ed18:	add	r3, r2, #1
   2ed1c:	cmp	r4, r3
   2ed20:	beq	2ed58 <flatcc_json_parser_unmatched_symbol@@Base+0x78>
   2ed24:	ldrb	r1, [r2, #1]
   2ed28:	cmp	r1, #34	; 0x22
   2ed2c:	beq	2edf4 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   2ed30:	cmp	r1, #92	; 0x5c
   2ed34:	mov	r2, r3
   2ed38:	bne	2ed18 <flatcc_json_parser_unmatched_symbol@@Base+0x38>
   2ed3c:	sub	r2, r4, r3
   2ed40:	cmp	r2, #1
   2ed44:	ble	2ed68 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   2ed48:	add	r2, r3, #1
   2ed4c:	add	r3, r2, #1
   2ed50:	cmp	r4, r3
   2ed54:	bne	2ed24 <flatcc_json_parser_unmatched_symbol@@Base+0x44>
   2ed58:	mov	r3, r4
   2ed5c:	b	2ed74 <flatcc_json_parser_unmatched_symbol@@Base+0x94>
   2ed60:	mov	r3, #13
   2ed64:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2ed68:	ldrb	r2, [r3]
   2ed6c:	cmp	r2, #34	; 0x22
   2ed70:	beq	2edf4 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   2ed74:	mov	r1, r3
   2ed78:	mov	r2, r4
   2ed7c:	mov	r3, #20
   2ed80:	mov	r0, r5
   2ed84:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2ed88:	mov	r1, r0
   2ed8c:	sub	r3, r6, r1
   2ed90:	cmp	r3, #1
   2ed94:	ble	2eda8 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   2ed98:	ldrb	r3, [r1]
   2ed9c:	cmp	r3, #32
   2eda0:	bhi	2edb8 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
   2eda4:	beq	2ede0 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2eda8:	mov	r2, r4
   2edac:	mov	r0, r5
   2edb0:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2edb4:	mov	r1, r0
   2edb8:	cmp	r4, r1
   2edbc:	beq	2edcc <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   2edc0:	ldrb	r3, [r1]
   2edc4:	cmp	r3, #58	; 0x3a
   2edc8:	beq	2edfc <flatcc_json_parser_unmatched_symbol@@Base+0x11c>
   2edcc:	mov	r2, r4
   2edd0:	mov	r0, r5
   2edd4:	mov	r3, #4
   2edd8:	pop	{r4, r5, r6, lr}
   2eddc:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2ede0:	ldrb	r3, [r1, #1]
   2ede4:	cmp	r3, #32
   2ede8:	addhi	r1, r1, #1
   2edec:	bls	2eda8 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   2edf0:	b	2edb8 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
   2edf4:	add	r1, r3, #1
   2edf8:	b	2ed8c <flatcc_json_parser_unmatched_symbol@@Base+0xac>
   2edfc:	add	r0, r1, #1
   2ee00:	sub	r6, r6, r0
   2ee04:	cmp	r6, #1
   2ee08:	ble	2ee1c <flatcc_json_parser_unmatched_symbol@@Base+0x13c>
   2ee0c:	ldrb	r3, [r1, #1]
   2ee10:	cmp	r3, #32
   2ee14:	bhi	2ee2c <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   2ee18:	beq	2ee48 <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   2ee1c:	mov	r1, r0
   2ee20:	mov	r2, r4
   2ee24:	mov	r0, r5
   2ee28:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2ee2c:	mov	r2, r4
   2ee30:	mov	r1, r0
   2ee34:	mov	r0, r5
   2ee38:	pop	{r4, r5, r6, lr}
   2ee3c:	b	2de74 <flatcc_json_parser_generic_json@@Base>
   2ee40:	mov	r6, r1
   2ee44:	b	2ed74 <flatcc_json_parser_unmatched_symbol@@Base+0x94>
   2ee48:	ldrb	r3, [r1, #2]
   2ee4c:	cmp	r3, #32
   2ee50:	addhi	r0, r1, #2
   2ee54:	bls	2ee1c <flatcc_json_parser_unmatched_symbol@@Base+0x13c>
   2ee58:	b	2ee2c <flatcc_json_parser_unmatched_symbol@@Base+0x14c>

0002ee5c <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2ee5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ee60:	sub	sp, sp, #36	; 0x24
   2ee64:	mov	r5, r2
   2ee68:	ldr	r8, [sp, #72]	; 0x48
   2ee6c:	mov	r7, r0
   2ee70:	adds	sl, r8, #0
   2ee74:	movne	sl, #1
   2ee78:	cmp	r1, r2
   2ee7c:	mov	r9, r3
   2ee80:	beq	2ee94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38>
   2ee84:	ldrb	r3, [r1]
   2ee88:	cmp	r3, #34	; 0x22
   2ee8c:	addeq	r4, r1, #1
   2ee90:	beq	2eea8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4c>
   2ee94:	mov	r3, #16
   2ee98:	mov	r2, r5
   2ee9c:	mov	r0, r7
   2eea0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2eea4:	mov	r4, r0
   2eea8:	mov	r2, r5
   2eeac:	mov	r1, r4
   2eeb0:	mov	r0, r7
   2eeb4:	bl	2cd90 <flatcc_json_parser_string_part@@Base>
   2eeb8:	cmp	r5, r0
   2eebc:	mov	r6, r0
   2eec0:	beq	2eed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   2eec4:	ldrb	r3, [r0]
   2eec8:	cmp	r3, #34	; 0x22
   2eecc:	beq	2eefc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   2eed0:	mov	ip, #0
   2eed4:	cmp	r8, ip
   2eed8:	moveq	r3, #31
   2eedc:	movne	r3, #32
   2eee0:	mov	r2, r5
   2eee4:	mov	r1, r6
   2eee8:	mov	r0, r7
   2eeec:	str	ip, [r9]
   2eef0:	add	sp, sp, #36	; 0x24
   2eef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eef8:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2eefc:	sub	fp, r0, r4
   2ef00:	and	r2, fp, #3
   2ef04:	lsr	r3, fp, #2
   2ef08:	cmp	r2, #2
   2ef0c:	add	r3, r3, r3, lsl #1
   2ef10:	str	r3, [sp]
   2ef14:	beq	2eff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   2ef18:	cmp	r2, #3
   2ef1c:	addeq	r3, r3, #2
   2ef20:	streq	r3, [sp]
   2ef24:	mov	r2, #1
   2ef28:	mov	r1, r2
   2ef2c:	mvn	r3, #0
   2ef30:	ldr	r0, [r7]
   2ef34:	bl	277e8 <flatcc_builder_start_vector@@Base>
   2ef38:	cmp	r0, #0
   2ef3c:	bne	2f008 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2ef40:	ldr	r1, [sp]
   2ef44:	ldr	r0, [r7]
   2ef48:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   2ef4c:	subs	r3, r0, #0
   2ef50:	str	r3, [sp, #4]
   2ef54:	beq	2f008 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2ef58:	cmp	sl, #1
   2ef5c:	bne	2f054 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   2ef60:	ldr	r3, [pc, #740]	; 2f24c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
   2ef64:	add	r3, pc, r3
   2ef68:	add	r3, r3, #1472	; 0x5c0
   2ef6c:	add	r3, r3, #4
   2ef70:	ldr	r2, [sp]
   2ef74:	mov	ip, fp
   2ef78:	cmp	r2, #0
   2ef7c:	mvneq	r2, #0
   2ef80:	str	r2, [sp, #12]
   2ef84:	mov	sl, r4
   2ef88:	ldr	r2, [sp, #4]
   2ef8c:	str	r2, [sp, #8]
   2ef90:	cmp	ip, #0
   2ef94:	beq	2f140 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   2ef98:	mov	lr, ip
   2ef9c:	mov	r1, #0
   2efa0:	ldrb	r2, [sl, r1]
   2efa4:	ldrb	r0, [r3, r2]
   2efa8:	add	r2, sp, #32
   2efac:	add	r2, r2, r1
   2efb0:	cmp	r0, #63	; 0x3f
   2efb4:	strb	r0, [r2, #-4]
   2efb8:	bls	2f038 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1dc>
   2efbc:	cmp	r0, #65	; 0x41
   2efc0:	beq	2f02c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2efc4:	cmp	r0, #66	; 0x42
   2efc8:	movne	r2, r1
   2efcc:	beq	2f068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   2efd0:	sub	r2, lr, r2
   2efd4:	cmp	r1, #2
   2efd8:	beq	2f1a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x344>
   2efdc:	cmp	r1, #3
   2efe0:	beq	2f0dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x280>
   2efe4:	cmp	r1, #0
   2efe8:	beq	2f130 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2efec:	sub	r6, fp, ip
   2eff0:	add	r6, r4, r6
   2eff4:	b	2eed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   2eff8:	ldr	r3, [sp]
   2effc:	add	r3, r3, #1
   2f000:	str	r3, [sp]
   2f004:	b	2ef24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc8>
   2f008:	mov	r3, #0
   2f00c:	str	r3, [r9]
   2f010:	mov	r2, r5
   2f014:	mov	r1, r6
   2f018:	mov	r0, r7
   2f01c:	mov	r3, #33	; 0x21
   2f020:	add	sp, sp, #36	; 0x24
   2f024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f028:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2f02c:	add	sl, sl, #1
   2f030:	sub	lr, lr, #1
   2f034:	sub	r1, r1, #1
   2f038:	add	r1, r1, #1
   2f03c:	cmp	r1, #3
   2f040:	bhi	2f1cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x370>
   2f044:	cmp	r1, lr
   2f048:	bne	2efa0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x144>
   2f04c:	mov	r2, #0
   2f050:	b	2efd4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2f054:	ldr	r3, [pc, #500]	; 2f250 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f4>
   2f058:	add	r3, pc, r3
   2f05c:	add	r3, r3, #1728	; 0x6c0
   2f060:	add	r3, r3, #4
   2f064:	b	2ef70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x114>
   2f068:	add	r2, r1, #1
   2f06c:	cmp	r2, #7
   2f070:	movls	r0, #1
   2f074:	movhi	r0, #0
   2f078:	cmp	lr, r2
   2f07c:	movls	r0, #0
   2f080:	cmp	r0, #0
   2f084:	beq	2efd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f088:	ldrb	r0, [sl, r2]
   2f08c:	add	sl, sl, r2
   2f090:	ldrb	r0, [r3, r0]
   2f094:	sub	r0, r0, #65	; 0x41
   2f098:	cmp	r0, #1
   2f09c:	bls	2f0b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x25c>
   2f0a0:	b	2efd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f0a4:	ldrb	r0, [sl, #1]!
   2f0a8:	ldrb	r0, [r3, r0]
   2f0ac:	sub	r0, r0, #65	; 0x41
   2f0b0:	cmp	r0, #1
   2f0b4:	bhi	2efd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f0b8:	add	r2, r2, #1
   2f0bc:	cmp	lr, r2
   2f0c0:	movhi	r0, #1
   2f0c4:	movls	r0, #0
   2f0c8:	cmp	r2, #7
   2f0cc:	movhi	r0, #0
   2f0d0:	cmp	r0, #0
   2f0d4:	bne	2f0a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x248>
   2f0d8:	b	2efd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2f0dc:	ldrb	r1, [sp, #30]
   2f0e0:	ldr	r0, [sp, #12]
   2f0e4:	lsl	r3, r1, #6
   2f0e8:	tst	r3, #192	; 0xc0
   2f0ec:	movne	r3, #1
   2f0f0:	moveq	r3, #0
   2f0f4:	cmp	r0, #1
   2f0f8:	orreq	r3, r3, #1
   2f0fc:	cmp	r3, #0
   2f100:	bne	2efec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   2f104:	ldrb	r3, [sp, #29]
   2f108:	ldrb	r0, [sp, #28]
   2f10c:	lsr	r1, r1, #2
   2f110:	orr	r1, r1, r3, lsl #4
   2f114:	lsr	r3, r3, #4
   2f118:	orr	r0, r3, r0, lsl #2
   2f11c:	ldr	r3, [sp, #8]
   2f120:	add	r3, r3, #2
   2f124:	strb	r1, [r3, #-1]
   2f128:	strb	r0, [r3, #-2]
   2f12c:	str	r3, [sp, #8]
   2f130:	sub	r2, fp, r2
   2f134:	cmp	fp, r2
   2f138:	addne	r6, r4, r2
   2f13c:	bne	2eed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   2f140:	ldmib	sp, {r2, r3}
   2f144:	sub	r1, r3, r2
   2f148:	ldr	r3, [sp]
   2f14c:	cmp	r3, r1
   2f150:	bls	2f16c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x310>
   2f154:	ldr	r3, [sp]
   2f158:	ldr	r0, [r7]
   2f15c:	sub	r1, r3, r1
   2f160:	bl	275bc <flatcc_builder_truncate_vector@@Base>
   2f164:	cmp	r0, #0
   2f168:	bne	2f008 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2f16c:	ldr	r0, [r7]
   2f170:	bl	28784 <flatcc_builder_end_vector@@Base>
   2f174:	cmp	r0, #0
   2f178:	str	r0, [r9]
   2f17c:	beq	2f008 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2f180:	ldrb	r3, [r6]
   2f184:	cmp	r3, #34	; 0x22
   2f188:	beq	2f240 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3e4>
   2f18c:	mov	r2, r5
   2f190:	mov	r1, r6
   2f194:	mov	r0, r7
   2f198:	mov	r3, #20
   2f19c:	b	2eef0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   2f1a0:	ldrb	r3, [sp, #29]
   2f1a4:	lsl	r1, r3, #4
   2f1a8:	tst	r1, #240	; 0xf0
   2f1ac:	bne	2efec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   2f1b0:	ldrb	r1, [sp, #28]
   2f1b4:	lsr	r3, r3, #4
   2f1b8:	orr	r3, r3, r1, lsl #2
   2f1bc:	ldr	r1, [sp, #8]
   2f1c0:	strb	r3, [r1], #1
   2f1c4:	str	r1, [sp, #8]
   2f1c8:	b	2f130 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2f1cc:	ldr	r2, [sp, #12]
   2f1d0:	cmp	r2, #2
   2f1d4:	bls	2efec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   2f1d8:	ldrb	r1, [sp, #30]
   2f1dc:	ldrb	ip, [sp, #29]
   2f1e0:	subs	r2, r2, #3
   2f1e4:	str	r1, [sp, #16]
   2f1e8:	ldrb	r1, [sp, #28]
   2f1ec:	str	r2, [sp, #12]
   2f1f0:	lsr	r0, ip, #4
   2f1f4:	str	r1, [sp, #20]
   2f1f8:	ldr	r2, [sp, #20]
   2f1fc:	ldrb	r1, [sp, #31]
   2f200:	add	sl, sl, #4
   2f204:	orr	r0, r0, r2, lsl #2
   2f208:	ldr	r2, [sp, #16]
   2f20c:	orr	r1, r1, r2, lsl #6
   2f210:	lsr	r2, r2, #2
   2f214:	orr	r2, r2, ip, lsl #4
   2f218:	sub	ip, lr, #4
   2f21c:	ldr	lr, [sp, #8]
   2f220:	strb	r2, [lr, #1]
   2f224:	add	r2, lr, #3
   2f228:	strb	r0, [lr]
   2f22c:	strb	r1, [lr, #2]
   2f230:	str	r2, [sp, #8]
   2f234:	bne	2ef90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>
   2f238:	mov	r2, ip
   2f23c:	b	2f130 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2f240:	add	r0, r6, #1
   2f244:	add	sp, sp, #36	; 0x24
   2f248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f24c:	andeq	r2, r1, ip, lsr lr
   2f250:	andeq	r2, r1, r8, asr #26

0002f254 <flatcc_json_parser_build_string@@Base>:
   2f254:	cmp	r1, r2
   2f258:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f25c:	mov	r6, r2
   2f260:	sub	sp, sp, #8
   2f264:	mov	r5, r0
   2f268:	mov	r8, r3
   2f26c:	beq	2f280 <flatcc_json_parser_build_string@@Base+0x2c>
   2f270:	ldrb	r3, [r1]
   2f274:	cmp	r3, #34	; 0x22
   2f278:	addeq	r7, r1, #1
   2f27c:	beq	2f294 <flatcc_json_parser_build_string@@Base+0x40>
   2f280:	mov	r3, #16
   2f284:	mov	r2, r6
   2f288:	mov	r0, r5
   2f28c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f290:	mov	r7, r0
   2f294:	mov	r2, r6
   2f298:	mov	r1, r7
   2f29c:	mov	r0, r5
   2f2a0:	bl	2cd90 <flatcc_json_parser_string_part@@Base>
   2f2a4:	cmp	r6, r0
   2f2a8:	mov	r4, r0
   2f2ac:	beq	2f2bc <flatcc_json_parser_build_string@@Base+0x68>
   2f2b0:	ldrb	r3, [r0]
   2f2b4:	cmp	r3, #34	; 0x22
   2f2b8:	beq	2f3b4 <flatcc_json_parser_build_string@@Base+0x160>
   2f2bc:	ldr	r0, [r5]
   2f2c0:	bl	278c8 <flatcc_builder_start_string@@Base>
   2f2c4:	cmp	r0, #0
   2f2c8:	beq	2f2e0 <flatcc_json_parser_build_string@@Base+0x8c>
   2f2cc:	mov	r3, #0
   2f2d0:	str	r3, [r8]
   2f2d4:	mov	r0, r4
   2f2d8:	add	sp, sp, #8
   2f2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f2e0:	sub	r2, r4, r7
   2f2e4:	mov	r1, r7
   2f2e8:	ldr	r0, [r5]
   2f2ec:	bl	27498 <flatcc_builder_append_string@@Base>
   2f2f0:	cmp	r0, #0
   2f2f4:	beq	2f2cc <flatcc_json_parser_build_string@@Base+0x78>
   2f2f8:	cmp	r6, r4
   2f2fc:	beq	2f3f4 <flatcc_json_parser_build_string@@Base+0x1a0>
   2f300:	ldrb	r3, [r4]
   2f304:	cmp	r3, #34	; 0x22
   2f308:	beq	2f3dc <flatcc_json_parser_build_string@@Base+0x188>
   2f30c:	add	sl, sp, #4
   2f310:	add	r9, sp, #5
   2f314:	b	2f330 <flatcc_json_parser_build_string@@Base+0xdc>
   2f318:	bl	27498 <flatcc_builder_append_string@@Base>
   2f31c:	cmp	r0, #0
   2f320:	beq	2f2cc <flatcc_json_parser_build_string@@Base+0x78>
   2f324:	ldrb	r3, [r4]
   2f328:	cmp	r3, #34	; 0x22
   2f32c:	beq	2f3dc <flatcc_json_parser_build_string@@Base+0x188>
   2f330:	mov	r1, r4
   2f334:	mov	r3, sl
   2f338:	mov	r2, r6
   2f33c:	mov	r0, r5
   2f340:	bl	2d52c <flatcc_json_parser_string_escape@@Base>
   2f344:	ldrb	r2, [sp, #4]
   2f348:	mov	r1, r9
   2f34c:	mov	r7, r0
   2f350:	ldr	r0, [r5]
   2f354:	bl	27498 <flatcc_builder_append_string@@Base>
   2f358:	mov	r2, r6
   2f35c:	mov	r1, r7
   2f360:	cmp	r0, #0
   2f364:	mov	r0, r5
   2f368:	beq	2f3ec <flatcc_json_parser_build_string@@Base+0x198>
   2f36c:	bl	2cd90 <flatcc_json_parser_string_part@@Base>
   2f370:	mov	r1, r7
   2f374:	mov	r4, r0
   2f378:	cmp	r6, r4
   2f37c:	sub	r2, r0, r7
   2f380:	ldr	r0, [r5]
   2f384:	bne	2f318 <flatcc_json_parser_build_string@@Base+0xc4>
   2f388:	bl	2934c <flatcc_builder_end_string@@Base>
   2f38c:	str	r0, [r8]
   2f390:	mov	r1, r4
   2f394:	mov	r2, r6
   2f398:	mov	r0, r5
   2f39c:	mov	r3, #20
   2f3a0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f3a4:	mov	r4, r0
   2f3a8:	mov	r0, r4
   2f3ac:	add	sp, sp, #8
   2f3b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f3b4:	sub	r2, r0, r7
   2f3b8:	mov	r1, r7
   2f3bc:	ldr	r0, [r5]
   2f3c0:	bl	291e8 <flatcc_builder_create_string@@Base>
   2f3c4:	str	r0, [r8]
   2f3c8:	ldrb	r3, [r4]
   2f3cc:	cmp	r3, #34	; 0x22
   2f3d0:	addeq	r4, r4, #1
   2f3d4:	bne	2f390 <flatcc_json_parser_build_string@@Base+0x13c>
   2f3d8:	b	2f2d4 <flatcc_json_parser_build_string@@Base+0x80>
   2f3dc:	ldr	r0, [r5]
   2f3e0:	bl	2934c <flatcc_builder_end_string@@Base>
   2f3e4:	str	r0, [r8]
   2f3e8:	b	2f3c8 <flatcc_json_parser_build_string@@Base+0x174>
   2f3ec:	mov	r4, r7
   2f3f0:	b	2f2cc <flatcc_json_parser_build_string@@Base+0x78>
   2f3f4:	ldr	r0, [r5]
   2f3f8:	b	2f388 <flatcc_json_parser_build_string@@Base+0x134>

0002f3fc <flatcc_json_parser_prepare_unions@@Base>:
   2f3fc:	push	{r4, r5, r6, r7, r8, lr}
   2f400:	mov	r5, r0
   2f404:	add	r0, r3, r3, lsl #1
   2f408:	mov	r6, r1
   2f40c:	lsl	r1, r0, #3
   2f410:	add	r1, r1, #8
   2f414:	ldr	r0, [r5]
   2f418:	ldr	r7, [sp, #24]
   2f41c:	mov	r4, r3
   2f420:	mov	r8, r2
   2f424:	bl	26568 <flatcc_builder_enter_user_frame@@Base>
   2f428:	cmp	r0, #0
   2f42c:	str	r0, [r7]
   2f430:	beq	2f44c <flatcc_json_parser_prepare_unions@@Base+0x50>
   2f434:	mov	r1, r0
   2f438:	ldr	r0, [r5]
   2f43c:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2f440:	str	r4, [r0]
   2f444:	mov	r0, r6
   2f448:	pop	{r4, r5, r6, r7, r8, pc}
   2f44c:	mov	r2, r8
   2f450:	mov	r1, r6
   2f454:	mov	r0, r5
   2f458:	mov	r3, #33	; 0x21
   2f45c:	pop	{r4, r5, r6, r7, r8, lr}
   2f460:	b	2cd64 <flatcc_json_parser_set_error@@Base>

0002f464 <flatcc_json_parser_finalize_unions@@Base>:
   2f464:	push	{r4, r5, r6, r7, r8, lr}
   2f468:	mov	r4, r0
   2f46c:	mov	r6, r1
   2f470:	ldr	r0, [r0]
   2f474:	mov	r1, r3
   2f478:	mov	r5, r3
   2f47c:	mov	r7, r2
   2f480:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2f484:	ldr	r3, [r0, #4]
   2f488:	cmp	r3, #0
   2f48c:	beq	2f4a8 <flatcc_json_parser_finalize_unions@@Base+0x44>
   2f490:	mov	r1, r6
   2f494:	mov	r2, r7
   2f498:	mov	r3, #27
   2f49c:	mov	r0, r4
   2f4a0:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f4a4:	mov	r6, r0
   2f4a8:	mov	r1, r5
   2f4ac:	ldr	r0, [r4]
   2f4b0:	bl	2665c <flatcc_builder_exit_user_frame_at@@Base>
   2f4b4:	mov	r0, r6
   2f4b8:	pop	{r4, r5, r6, r7, r8, pc}

0002f4bc <flatcc_json_parser_union@@Base>:
   2f4bc:	push	{r4, r5, r6, r7, r8, lr}
   2f4c0:	sub	sp, sp, #16
   2f4c4:	mov	r5, r0
   2f4c8:	mov	r8, r1
   2f4cc:	ldr	r0, [r0]
   2f4d0:	ldr	r1, [sp, #44]	; 0x2c
   2f4d4:	mov	r4, r3
   2f4d8:	mov	r6, r2
   2f4dc:	ldrh	r7, [sp, #40]	; 0x28
   2f4e0:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2f4e4:	add	r4, r4, r4, lsl #1
   2f4e8:	add	r4, r0, r4, lsl #3
   2f4ec:	ldr	r3, [r4, #8]
   2f4f0:	cmp	r3, #0
   2f4f4:	beq	2f51c <flatcc_json_parser_union@@Base+0x60>
   2f4f8:	mov	r2, r6
   2f4fc:	mov	r1, r8
   2f500:	mov	r0, r5
   2f504:	mov	r3, #28
   2f508:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f50c:	mov	r4, r0
   2f510:	mov	r0, r4
   2f514:	add	sp, sp, #16
   2f518:	pop	{r4, r5, r6, r7, r8, pc}
   2f51c:	ldrb	r3, [r4, #20]
   2f520:	cmp	r3, #0
   2f524:	beq	2f5c8 <flatcc_json_parser_union@@Base+0x10c>
   2f528:	ldrb	r3, [r4, #21]
   2f52c:	cmp	r3, #0
   2f530:	strb	r3, [sp, #8]
   2f534:	beq	2f5a4 <flatcc_json_parser_union@@Base+0xe8>
   2f538:	ldr	r2, [r0, #4]
   2f53c:	mov	r1, r8
   2f540:	sub	r2, r2, #1
   2f544:	str	r2, [r0, #4]
   2f548:	add	r0, sp, #12
   2f54c:	str	r0, [sp]
   2f550:	mov	r2, r6
   2f554:	mov	r0, r5
   2f558:	ldr	ip, [sp, #48]	; 0x30
   2f55c:	blx	ip
   2f560:	add	r3, sp, #8
   2f564:	cmp	r6, r0
   2f568:	mov	r4, r0
   2f56c:	beq	2f510 <flatcc_json_parser_union@@Base+0x54>
   2f570:	mov	r1, r7
   2f574:	ldm	r3, {r2, r3}
   2f578:	ldr	r0, [r5]
   2f57c:	bl	29834 <flatcc_builder_table_add_union@@Base>
   2f580:	cmp	r0, #0
   2f584:	beq	2f510 <flatcc_json_parser_union@@Base+0x54>
   2f588:	mov	r1, r4
   2f58c:	mov	r2, r6
   2f590:	mov	r0, r5
   2f594:	mov	r3, #28
   2f598:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f59c:	mov	r4, r0
   2f5a0:	b	2f510 <flatcc_json_parser_union@@Base+0x54>
   2f5a4:	mov	r2, r6
   2f5a8:	mov	r1, r8
   2f5ac:	mov	r0, r5
   2f5b0:	mov	r3, #25
   2f5b4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f5b8:	mov	r4, r0
   2f5bc:	mov	r0, r4
   2f5c0:	add	sp, sp, #16
   2f5c4:	pop	{r4, r5, r6, r7, r8, pc}
   2f5c8:	ldr	r3, [r0, #4]
   2f5cc:	ldr	lr, [r5, #12]
   2f5d0:	ldr	ip, [r5, #4]
   2f5d4:	add	r3, r3, #1
   2f5d8:	str	r3, [r0, #4]
   2f5dc:	mov	r2, r6
   2f5e0:	str	lr, [r4, #16]
   2f5e4:	str	ip, [r4, #12]
   2f5e8:	str	r8, [r4, #8]
   2f5ec:	mov	r1, r8
   2f5f0:	mov	r0, r5
   2f5f4:	bl	2de74 <flatcc_json_parser_generic_json@@Base>
   2f5f8:	mov	r4, r0
   2f5fc:	b	2f510 <flatcc_json_parser_union@@Base+0x54>

0002f600 <flatcc_json_parser_union_type@@Base>:
   2f600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f604:	sub	sp, sp, #36	; 0x24
   2f608:	mov	r4, r3
   2f60c:	ldrh	r3, [sp, #72]	; 0x48
   2f610:	mov	r5, r0
   2f614:	mov	sl, r1
   2f618:	ldr	r0, [r0]
   2f61c:	ldr	r1, [sp, #76]	; 0x4c
   2f620:	str	r3, [sp, #12]
   2f624:	mov	r7, r2
   2f628:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2f62c:	add	r4, r4, r4, lsl #1
   2f630:	lsl	r4, r4, #3
   2f634:	add	fp, r0, #8
   2f638:	add	r6, fp, r4
   2f63c:	ldrb	r3, [r6, #12]
   2f640:	cmp	r3, #0
   2f644:	bne	2f750 <flatcc_json_parser_union_type@@Base+0x150>
   2f648:	mov	r9, r0
   2f64c:	mov	r1, #0
   2f650:	mov	r0, #0
   2f654:	mov	r2, #1
   2f658:	cmp	sl, r7
   2f65c:	strb	r2, [r6, #12]
   2f660:	str	r3, [sp, #20]
   2f664:	strd	r0, [sp, #24]
   2f668:	strb	r3, [r6, #13]
   2f66c:	beq	2f774 <flatcc_json_parser_union_type@@Base+0x174>
   2f670:	add	r3, sp, #24
   2f674:	str	r3, [sp]
   2f678:	mov	r2, r7
   2f67c:	add	r3, sp, #20
   2f680:	mov	r1, sl
   2f684:	mov	r0, r5
   2f688:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   2f68c:	cmp	sl, r0
   2f690:	mov	r8, r0
   2f694:	beq	2f778 <flatcc_json_parser_union_type@@Base+0x178>
   2f698:	ldr	r3, [sp, #20]
   2f69c:	cmp	r3, #0
   2f6a0:	bne	2f7b8 <flatcc_json_parser_union_type@@Base+0x1b8>
   2f6a4:	ldrd	r2, [sp, #24]
   2f6a8:	cmp	r3, #0
   2f6ac:	cmpeq	r2, #255	; 0xff
   2f6b0:	strbls	r2, [r6, #13]
   2f6b4:	bhi	2f7f4 <flatcc_json_parser_union_type@@Base+0x1f4>
   2f6b8:	ldr	r1, [fp, r4]
   2f6bc:	cmp	r1, #0
   2f6c0:	beq	2f7dc <flatcc_json_parser_union_type@@Base+0x1dc>
   2f6c4:	ldr	r3, [r9, #4]
   2f6c8:	cmp	r3, #0
   2f6cc:	beq	2f810 <flatcc_json_parser_union_type@@Base+0x210>
   2f6d0:	ldr	r0, [r6, #8]
   2f6d4:	ldr	r2, [r6, #4]
   2f6d8:	sub	r3, r3, #1
   2f6dc:	str	r3, [r9, #4]
   2f6e0:	ldr	sl, [r5, #12]
   2f6e4:	ldr	r9, [r5, #4]
   2f6e8:	str	r0, [r5, #12]
   2f6ec:	str	r2, [r5, #4]
   2f6f0:	ldrb	ip, [r6, #13]
   2f6f4:	add	r4, sp, #32
   2f6f8:	add	r2, sp, #28
   2f6fc:	str	r2, [sp]
   2f700:	mov	r3, ip
   2f704:	strb	ip, [r4, #-8]!
   2f708:	mov	r2, r7
   2f70c:	mov	r0, r5
   2f710:	ldr	ip, [sp, #84]	; 0x54
   2f714:	blx	ip
   2f718:	cmp	r7, r0
   2f71c:	moveq	r8, r7
   2f720:	beq	2f744 <flatcc_json_parser_union_type@@Base+0x144>
   2f724:	ldr	r1, [sp, #12]
   2f728:	ldm	r4, {r2, r3}
   2f72c:	ldr	r0, [r5]
   2f730:	bl	29834 <flatcc_builder_table_add_union@@Base>
   2f734:	cmp	r0, #0
   2f738:	streq	sl, [r5, #12]
   2f73c:	streq	r9, [r5, #4]
   2f740:	bne	2f79c <flatcc_json_parser_union_type@@Base+0x19c>
   2f744:	mov	r0, r8
   2f748:	add	sp, sp, #36	; 0x24
   2f74c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f750:	mov	r2, r7
   2f754:	mov	r1, sl
   2f758:	mov	r0, r5
   2f75c:	mov	r3, #28
   2f760:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f764:	mov	r8, r0
   2f768:	mov	r0, r8
   2f76c:	add	sp, sp, #36	; 0x24
   2f770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f774:	mov	r8, r7
   2f778:	add	r3, r6, #13
   2f77c:	mov	r1, r8
   2f780:	str	r3, [sp]
   2f784:	mov	r2, r7
   2f788:	ldr	r3, [sp, #80]	; 0x50
   2f78c:	mov	r0, r5
   2f790:	bl	2cf7c <flatcc_json_parser_space_ext@@Base+0x124>
   2f794:	mov	r8, r0
   2f798:	b	2f6b8 <flatcc_json_parser_union_type@@Base+0xb8>
   2f79c:	mov	r1, r8
   2f7a0:	mov	r2, r7
   2f7a4:	mov	r0, r5
   2f7a8:	mov	r3, #28
   2f7ac:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f7b0:	mov	r8, r0
   2f7b4:	b	2f744 <flatcc_json_parser_union_type@@Base+0x144>
   2f7b8:	mov	r1, r0
   2f7bc:	mov	r3, #8
   2f7c0:	mov	r2, r7
   2f7c4:	mov	r0, r5
   2f7c8:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f7cc:	mov	r8, r0
   2f7d0:	cmp	sl, r8
   2f7d4:	bne	2f6b8 <flatcc_json_parser_union_type@@Base+0xb8>
   2f7d8:	b	2f778 <flatcc_json_parser_union_type@@Base+0x178>
   2f7dc:	ldrb	r2, [r6, #13]
   2f7e0:	ldr	r3, [r9, #4]
   2f7e4:	cmp	r2, #0
   2f7e8:	addne	r3, r3, #1
   2f7ec:	str	r3, [r9, #4]
   2f7f0:	b	2f744 <flatcc_json_parser_union_type@@Base+0x144>
   2f7f4:	mov	r1, r0
   2f7f8:	mov	r3, #7
   2f7fc:	mov	r2, r7
   2f800:	mov	r0, r5
   2f804:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f808:	mov	r8, r0
   2f80c:	b	2f7d0 <flatcc_json_parser_union_type@@Base+0x1d0>
   2f810:	ldr	r3, [pc, #32]	; 2f838 <flatcc_json_parser_union_type@@Base+0x238>
   2f814:	ldr	r1, [pc, #32]	; 2f83c <flatcc_json_parser_union_type@@Base+0x23c>
   2f818:	add	r3, pc, r3
   2f81c:	ldr	r0, [pc, #28]	; 2f840 <flatcc_json_parser_union_type@@Base+0x240>
   2f820:	add	r3, r3, #1984	; 0x7c0
   2f824:	ldr	r2, [pc, #24]	; 2f844 <flatcc_json_parser_union_type@@Base+0x244>
   2f828:	add	r3, r3, #4
   2f82c:	add	r1, pc, r1
   2f830:	add	r0, pc, r0
   2f834:	bl	14610 <__assert_fail@plt>
   2f838:	andeq	r2, r1, r8, lsl #11
   2f83c:	andeq	r3, r1, r0, lsl #3
   2f840:	andeq	r3, r1, r0, ror #3
   2f844:	andeq	r0, r0, r5, asr #7

0002f848 <flatcc_json_parser_union_vector@@Base>:
   2f848:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f84c:	mov	r5, r0
   2f850:	mov	r6, r1
   2f854:	ldr	r0, [r0]
   2f858:	ldr	r1, [sp, #36]	; 0x24
   2f85c:	mov	r4, r3
   2f860:	mov	r9, r2
   2f864:	ldrh	r7, [sp, #32]
   2f868:	ldr	r8, [sp, #40]	; 0x28
   2f86c:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2f870:	add	r3, r4, r4, lsl #1
   2f874:	lsl	r3, r3, #3
   2f878:	add	ip, r0, #8
   2f87c:	add	r1, ip, r3
   2f880:	ldr	r2, [ip, r3]
   2f884:	cmp	r2, #0
   2f888:	beq	2f8a4 <flatcc_json_parser_union_vector@@Base+0x5c>
   2f88c:	mov	r2, r9
   2f890:	mov	r1, r6
   2f894:	mov	r0, r5
   2f898:	mov	r3, #28
   2f89c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f8a0:	b	2cd64 <flatcc_json_parser_set_error@@Base>
   2f8a4:	ldrb	r2, [r1, #12]
   2f8a8:	cmp	r2, #0
   2f8ac:	beq	2f8e4 <flatcc_json_parser_union_vector@@Base+0x9c>
   2f8b0:	ldr	r3, [r0, #4]
   2f8b4:	mov	r2, r9
   2f8b8:	sub	r3, r3, #1
   2f8bc:	str	r3, [r0, #4]
   2f8c0:	ldr	r3, [r1, #20]
   2f8c4:	str	r8, [sp, #40]	; 0x28
   2f8c8:	str	r7, [sp, #36]	; 0x24
   2f8cc:	ldr	ip, [r1, #16]
   2f8d0:	mov	r0, r5
   2f8d4:	mov	r1, r6
   2f8d8:	str	ip, [sp, #32]
   2f8dc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f8e0:	b	2d138 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2f8e4:	ldr	lr, [r0, #4]
   2f8e8:	ldr	r4, [r5, #12]
   2f8ec:	add	lr, lr, #1
   2f8f0:	str	lr, [r0, #4]
   2f8f4:	ldr	r0, [r5, #4]
   2f8f8:	mov	r2, r9
   2f8fc:	stmib	r1, {r0, r4}
   2f900:	mov	r1, r6
   2f904:	str	r6, [ip, r3]
   2f908:	mov	r0, r5
   2f90c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f910:	b	2de74 <flatcc_json_parser_generic_json@@Base>

0002f914 <flatcc_json_parser_union_type_vector@@Base>:
   2f914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f918:	sub	sp, sp, #60	; 0x3c
   2f91c:	mov	r7, r3
   2f920:	ldrh	r3, [sp, #96]	; 0x60
   2f924:	mov	r6, r0
   2f928:	mov	r5, r1
   2f92c:	ldr	r0, [r0]
   2f930:	ldr	r1, [sp, #100]	; 0x64
   2f934:	str	r3, [sp, #28]
   2f938:	mov	r4, r2
   2f93c:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2f940:	add	r7, r7, r7, lsl #1
   2f944:	lsl	r3, r7, #3
   2f948:	str	r3, [sp, #32]
   2f94c:	add	r0, r0, #8
   2f950:	add	r3, r0, r3
   2f954:	str	r3, [sp, #24]
   2f958:	ldrb	r3, [r3, #12]
   2f95c:	cmp	r3, #0
   2f960:	bne	2fa2c <flatcc_json_parser_union_type_vector@@Base+0x118>
   2f964:	ldr	r3, [sp, #24]
   2f968:	mov	r2, #1
   2f96c:	mov	r1, r2
   2f970:	strb	r2, [r3, #12]
   2f974:	mvn	r3, #0
   2f978:	ldr	r0, [r6]
   2f97c:	bl	277e8 <flatcc_builder_start_vector@@Base>
   2f980:	cmp	r0, #0
   2f984:	bne	2fa10 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2f988:	cmp	r5, r4
   2f98c:	beq	2f99c <flatcc_json_parser_union_type_vector@@Base+0x88>
   2f990:	ldrb	r3, [r5]
   2f994:	cmp	r3, #91	; 0x5b
   2f998:	beq	2fa48 <flatcc_json_parser_union_type_vector@@Base+0x134>
   2f99c:	mov	r1, r5
   2f9a0:	mov	r3, #22
   2f9a4:	mov	r2, r4
   2f9a8:	mov	r0, r6
   2f9ac:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2f9b0:	mov	r5, r0
   2f9b4:	ldr	r0, [r6]
   2f9b8:	bl	28880 <flatcc_builder_vector_count@@Base>
   2f9bc:	ldr	r3, [sp, #24]
   2f9c0:	mov	r1, r0
   2f9c4:	str	r0, [r3, #16]
   2f9c8:	mov	r7, r0
   2f9cc:	ldr	r0, [r6]
   2f9d0:	bl	26568 <flatcc_builder_enter_user_frame@@Base>
   2f9d4:	mov	r1, r0
   2f9d8:	mov	r8, r0
   2f9dc:	ldr	r0, [r6]
   2f9e0:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2f9e4:	mov	r9, r0
   2f9e8:	ldr	r0, [r6]
   2f9ec:	bl	2888c <flatcc_builder_vector_edit@@Base>
   2f9f0:	mov	r2, r7
   2f9f4:	mov	r1, r0
   2f9f8:	mov	r0, r9
   2f9fc:	bl	14544 <memcpy@plt>
   2fa00:	ldr	r0, [r6]
   2fa04:	bl	28784 <flatcc_builder_end_vector@@Base>
   2fa08:	subs	r9, r0, #0
   2fa0c:	bne	2fd48 <flatcc_json_parser_union_type_vector@@Base+0x434>
   2fa10:	mov	r2, r4
   2fa14:	mov	r1, r5
   2fa18:	mov	r0, r6
   2fa1c:	mov	r3, #33	; 0x21
   2fa20:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2fa24:	add	sp, sp, #60	; 0x3c
   2fa28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa2c:	mov	r2, r4
   2fa30:	mov	r1, r5
   2fa34:	mov	r0, r6
   2fa38:	mov	r3, #28
   2fa3c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2fa40:	add	sp, sp, #60	; 0x3c
   2fa44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa48:	add	r1, r5, #1
   2fa4c:	sub	r3, r4, r1
   2fa50:	cmp	r3, #1
   2fa54:	ble	2fa6c <flatcc_json_parser_union_type_vector@@Base+0x158>
   2fa58:	ldrb	r3, [r5, #1]
   2fa5c:	cmp	r3, #32
   2fa60:	movhi	r5, r1
   2fa64:	bhi	2fa7c <flatcc_json_parser_union_type_vector@@Base+0x168>
   2fa68:	beq	2fe20 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   2fa6c:	mov	r2, r4
   2fa70:	mov	r0, r6
   2fa74:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2fa78:	mov	r5, r0
   2fa7c:	cmp	r4, r5
   2fa80:	beq	2fa90 <flatcc_json_parser_union_type_vector@@Base+0x17c>
   2fa84:	ldrb	r3, [r5]
   2fa88:	cmp	r3, #93	; 0x5d
   2fa8c:	beq	2fcb4 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   2fa90:	add	fp, sp, #44	; 0x2c
   2fa94:	str	fp, [sp, #20]
   2fa98:	ldr	fp, [sp, #112]	; 0x70
   2fa9c:	add	r3, sp, #43	; 0x2b
   2faa0:	mov	r9, #1
   2faa4:	mov	r7, #0
   2faa8:	str	r3, [sp, #36]	; 0x24
   2faac:	add	r3, sp, #48	; 0x30
   2fab0:	str	r3, [sp, #16]
   2fab4:	mov	r1, r9
   2fab8:	ldr	r0, [r6]
   2fabc:	bl	26f94 <flatcc_builder_extend_vector@@Base>
   2fac0:	subs	r8, r0, #0
   2fac4:	beq	2fa10 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2fac8:	mov	r2, #0
   2facc:	mov	r3, #0
   2fad0:	cmp	r4, r5
   2fad4:	strd	r2, [sp, #48]	; 0x30
   2fad8:	str	r7, [sp, #44]	; 0x2c
   2fadc:	strb	r7, [sp, #43]	; 0x2b
   2fae0:	beq	2fc18 <flatcc_json_parser_union_type_vector@@Base+0x304>
   2fae4:	ldr	r3, [sp, #16]
   2fae8:	mov	r2, r4
   2faec:	str	r3, [sp]
   2faf0:	mov	r1, r5
   2faf4:	ldr	r3, [sp, #20]
   2faf8:	mov	r0, r6
   2fafc:	bl	2dd60 <flatcc_json_parser_integer@@Base>
   2fb00:	cmp	r0, r5
   2fb04:	mov	sl, r0
   2fb08:	beq	2fc18 <flatcc_json_parser_union_type_vector@@Base+0x304>
   2fb0c:	ldr	r3, [sp, #44]	; 0x2c
   2fb10:	cmp	r3, #0
   2fb14:	bne	2fbf8 <flatcc_json_parser_union_type_vector@@Base+0x2e4>
   2fb18:	ldrd	r0, [sp, #48]	; 0x30
   2fb1c:	cmp	r1, #0
   2fb20:	cmpeq	r0, #255	; 0xff
   2fb24:	uxtbls	r0, r0
   2fb28:	strbls	r0, [sp, #43]	; 0x2b
   2fb2c:	bhi	2fcec <flatcc_json_parser_union_type_vector@@Base+0x3d8>
   2fb30:	blx	fp
   2fb34:	cmp	r0, #0
   2fb38:	ldrbne	r2, [sp, #43]	; 0x2b
   2fb3c:	bne	2fb54 <flatcc_json_parser_union_type_vector@@Base+0x240>
   2fb40:	ldr	r3, [r6, #8]
   2fb44:	tst	r3, #1
   2fb48:	beq	2fd30 <flatcc_json_parser_union_type_vector@@Base+0x41c>
   2fb4c:	mov	r2, r7
   2fb50:	strb	r0, [sp, #43]	; 0x2b
   2fb54:	sub	r3, r4, sl
   2fb58:	cmp	r3, #1
   2fb5c:	strb	r2, [r8]
   2fb60:	ble	2fb74 <flatcc_json_parser_union_type_vector@@Base+0x260>
   2fb64:	ldrb	r3, [sl]
   2fb68:	cmp	r3, #32
   2fb6c:	bhi	2fb88 <flatcc_json_parser_union_type_vector@@Base+0x274>
   2fb70:	beq	2fc4c <flatcc_json_parser_union_type_vector@@Base+0x338>
   2fb74:	mov	r1, sl
   2fb78:	mov	r2, r4
   2fb7c:	mov	r0, r6
   2fb80:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2fb84:	mov	sl, r0
   2fb88:	cmp	r4, sl
   2fb8c:	beq	2fc64 <flatcc_json_parser_union_type_vector@@Base+0x350>
   2fb90:	ldrb	r3, [sl]
   2fb94:	cmp	r3, #44	; 0x2c
   2fb98:	beq	2fc6c <flatcc_json_parser_union_type_vector@@Base+0x358>
   2fb9c:	cmp	r3, #93	; 0x5d
   2fba0:	beq	2fbc0 <flatcc_json_parser_union_type_vector@@Base+0x2ac>
   2fba4:	mov	r1, sl
   2fba8:	mov	r3, #9
   2fbac:	mov	r2, r4
   2fbb0:	mov	r0, r6
   2fbb4:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2fbb8:	mov	r5, r0
   2fbbc:	b	2f9b4 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fbc0:	add	r5, sl, #1
   2fbc4:	sub	r3, r4, r5
   2fbc8:	cmp	r3, #1
   2fbcc:	ble	2fbe0 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   2fbd0:	ldrb	r3, [sl, #1]
   2fbd4:	cmp	r3, #32
   2fbd8:	bhi	2f9b4 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fbdc:	beq	2fd08 <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   2fbe0:	mov	r1, r5
   2fbe4:	mov	r2, r4
   2fbe8:	mov	r0, r6
   2fbec:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2fbf0:	mov	r5, r0
   2fbf4:	b	2f9b4 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fbf8:	mov	r1, r0
   2fbfc:	mov	r3, #8
   2fc00:	mov	r2, r4
   2fc04:	mov	r0, r6
   2fc08:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2fc0c:	mov	sl, r0
   2fc10:	cmp	sl, r5
   2fc14:	bne	2fc44 <flatcc_json_parser_union_type_vector@@Base+0x330>
   2fc18:	ldr	r3, [sp, #36]	; 0x24
   2fc1c:	mov	r2, r4
   2fc20:	str	r3, [sp]
   2fc24:	mov	r1, r5
   2fc28:	ldr	r3, [sp, #104]	; 0x68
   2fc2c:	mov	r0, r6
   2fc30:	bl	2cf7c <flatcc_json_parser_space_ext@@Base+0x124>
   2fc34:	cmp	r4, r0
   2fc38:	cmpne	r0, r5
   2fc3c:	mov	sl, r0
   2fc40:	beq	2fe18 <flatcc_json_parser_union_type_vector@@Base+0x504>
   2fc44:	ldrb	r0, [sp, #43]	; 0x2b
   2fc48:	b	2fb30 <flatcc_json_parser_union_type_vector@@Base+0x21c>
   2fc4c:	ldrb	r3, [sl, #1]
   2fc50:	cmp	r3, #32
   2fc54:	addhi	sl, sl, #1
   2fc58:	bls	2fb74 <flatcc_json_parser_union_type_vector@@Base+0x260>
   2fc5c:	cmp	r4, sl
   2fc60:	bne	2fb90 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2fc64:	mov	r5, r4
   2fc68:	b	2f9b4 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fc6c:	add	r5, sl, #1
   2fc70:	sub	r3, r4, r5
   2fc74:	cmp	r3, #1
   2fc78:	ble	2fc8c <flatcc_json_parser_union_type_vector@@Base+0x378>
   2fc7c:	ldrb	r3, [sl, #1]
   2fc80:	cmp	r3, #32
   2fc84:	bhi	2fca0 <flatcc_json_parser_union_type_vector@@Base+0x38c>
   2fc88:	beq	2fd1c <flatcc_json_parser_union_type_vector@@Base+0x408>
   2fc8c:	mov	r1, r5
   2fc90:	mov	r2, r4
   2fc94:	mov	r0, r6
   2fc98:	bl	2ce58 <flatcc_json_parser_space_ext@@Base>
   2fc9c:	mov	r5, r0
   2fca0:	cmp	r4, r5
   2fca4:	beq	2fdfc <flatcc_json_parser_union_type_vector@@Base+0x4e8>
   2fca8:	ldrb	r3, [r5]
   2fcac:	cmp	r3, #93	; 0x5d
   2fcb0:	bne	2fab4 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   2fcb4:	add	r1, r5, #1
   2fcb8:	sub	r3, r4, r1
   2fcbc:	cmp	r3, #1
   2fcc0:	ble	2fbe4 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2fcc4:	ldrb	r3, [r5, #1]
   2fcc8:	cmp	r3, #32
   2fccc:	movhi	r5, r1
   2fcd0:	bhi	2f9b4 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fcd4:	bne	2fbe4 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2fcd8:	ldrb	r3, [r5, #2]
   2fcdc:	cmp	r3, #32
   2fce0:	addhi	r5, r5, #2
   2fce4:	bls	2fbe4 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2fce8:	b	2f9b4 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fcec:	mov	r1, sl
   2fcf0:	mov	r3, #7
   2fcf4:	mov	r2, r4
   2fcf8:	mov	r0, r6
   2fcfc:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2fd00:	mov	sl, r0
   2fd04:	b	2fc10 <flatcc_json_parser_union_type_vector@@Base+0x2fc>
   2fd08:	ldrb	r3, [sl, #2]
   2fd0c:	cmp	r3, #32
   2fd10:	addhi	r5, sl, #2
   2fd14:	bls	2fbe0 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   2fd18:	b	2f9b4 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fd1c:	ldrb	r3, [sl, #2]
   2fd20:	cmp	r3, #32
   2fd24:	addhi	r5, sl, #2
   2fd28:	bls	2fc8c <flatcc_json_parser_union_type_vector@@Base+0x378>
   2fd2c:	b	2fca0 <flatcc_json_parser_union_type_vector@@Base+0x38c>
   2fd30:	mov	r2, r4
   2fd34:	mov	r1, sl
   2fd38:	mov	r0, r6
   2fd3c:	mov	r3, #15
   2fd40:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2fd44:	b	2fa24 <flatcc_json_parser_union_type_vector@@Base+0x110>
   2fd48:	ldr	r3, [sp, #28]
   2fd4c:	ldr	r0, [r6]
   2fd50:	sub	r1, r3, #1
   2fd54:	bl	296a8 <flatcc_builder_table_add_offset@@Base>
   2fd58:	cmp	r0, #0
   2fd5c:	beq	2fa10 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2fd60:	str	r9, [r0]
   2fd64:	ldr	r1, [sp, #100]	; 0x64
   2fd68:	ldr	r0, [r6]
   2fd6c:	bl	266b0 <flatcc_builder_get_user_frame_ptr@@Base>
   2fd70:	ldr	r1, [sp, #32]
   2fd74:	add	r3, r0, #8
   2fd78:	mov	r2, r0
   2fd7c:	add	r0, r3, r1
   2fd80:	ldr	r1, [r3, r1]
   2fd84:	ldr	r3, [r2, #4]
   2fd88:	cmp	r1, #0
   2fd8c:	addeq	r3, r3, #1
   2fd90:	str	r8, [r0, #20]
   2fd94:	moveq	r0, r5
   2fd98:	streq	r3, [r2, #4]
   2fd9c:	beq	2fa24 <flatcc_json_parser_union_type_vector@@Base+0x110>
   2fda0:	cmp	r3, #0
   2fda4:	beq	2fe34 <flatcc_json_parser_union_type_vector@@Base+0x520>
   2fda8:	sub	r3, r3, #1
   2fdac:	ldmib	r0, {r0, ip}
   2fdb0:	str	r3, [r2, #4]
   2fdb4:	ldr	r2, [sp, #108]	; 0x6c
   2fdb8:	str	r7, [sp]
   2fdbc:	str	r2, [sp, #8]
   2fdc0:	ldr	r2, [sp, #28]
   2fdc4:	mov	r3, r8
   2fdc8:	str	r2, [sp, #4]
   2fdcc:	mov	r2, r4
   2fdd0:	ldr	r8, [r6, #12]
   2fdd4:	ldr	r7, [r6, #4]
   2fdd8:	str	ip, [r6, #12]
   2fddc:	str	r0, [r6, #4]
   2fde0:	mov	r0, r6
   2fde4:	bl	2d138 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2fde8:	cmp	r4, r0
   2fdec:	strne	r8, [r6, #12]
   2fdf0:	strne	r7, [r6, #4]
   2fdf4:	movne	r0, r5
   2fdf8:	b	2fa24 <flatcc_json_parser_union_type_vector@@Base+0x110>
   2fdfc:	mov	r3, #9
   2fe00:	mov	r2, r4
   2fe04:	mov	r1, r4
   2fe08:	mov	r0, r6
   2fe0c:	bl	2cd64 <flatcc_json_parser_set_error@@Base>
   2fe10:	mov	r5, r0
   2fe14:	b	2f9b4 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2fe18:	mov	r5, r0
   2fe1c:	b	2fa10 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2fe20:	ldrb	r3, [r5, #2]
   2fe24:	cmp	r3, #32
   2fe28:	addhi	r5, r5, #2
   2fe2c:	bls	2fa6c <flatcc_json_parser_union_type_vector@@Base+0x158>
   2fe30:	b	2fa7c <flatcc_json_parser_union_type_vector@@Base+0x168>
   2fe34:	ldr	r3, [pc, #32]	; 2fe5c <flatcc_json_parser_union_type_vector@@Base+0x548>
   2fe38:	ldr	r1, [pc, #32]	; 2fe60 <flatcc_json_parser_union_type_vector@@Base+0x54c>
   2fe3c:	add	r3, pc, r3
   2fe40:	ldr	r0, [pc, #28]	; 2fe64 <flatcc_json_parser_union_type_vector@@Base+0x550>
   2fe44:	add	r3, r3, #2016	; 0x7e0
   2fe48:	ldr	r2, [pc, #24]	; 2fe68 <flatcc_json_parser_union_type_vector@@Base+0x554>
   2fe4c:	add	r3, r3, #4
   2fe50:	add	r1, pc, r1
   2fe54:	add	r0, pc, r0
   2fe58:	bl	14610 <__assert_fail@plt>
   2fe5c:	andeq	r1, r1, r4, ror #30
   2fe60:	andeq	r2, r1, ip, asr fp
   2fe64:			; <UNDEFINED> instruction: 0x00012bbc
   2fe68:	andeq	r0, r0, r2, ror #8

0002fe6c <flatcc_json_parser_struct_as_root@@Base>:
   2fe6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2fe70:	sub	sp, sp, #52	; 0x34
   2fe74:	mov	r5, r2
   2fe78:	ldr	r8, [sp, #80]	; 0x50
   2fe7c:	mov	r9, r0
   2fe80:	ands	r7, r8, #4
   2fe84:	movne	r7, #2
   2fe88:	subs	r4, r1, #0
   2fe8c:	addeq	r4, sp, #8
   2fe90:	mov	r2, #40	; 0x28
   2fe94:	mov	r1, #0
   2fe98:	mov	r0, r4
   2fe9c:	add	r6, r5, r3
   2fea0:	bl	145bc <memset@plt>
   2fea4:	mov	r2, #1
   2fea8:	str	r2, [r4, #12]
   2feac:	str	r6, [r4, #28]
   2feb0:	str	r9, [r4]
   2feb4:	stmib	r4, {r5, r8}
   2feb8:	str	r5, [r4, #24]
   2febc:	str	r5, [r4, #32]
   2fec0:	mov	r3, r7
   2fec4:	mov	r2, #0
   2fec8:	ldr	r1, [sp, #84]	; 0x54
   2fecc:	mov	r0, r9
   2fed0:	bl	26c10 <flatcc_builder_start_buffer@@Base>
   2fed4:	cmp	r0, #0
   2fed8:	bne	2ff30 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   2fedc:	mov	r2, r6
   2fee0:	add	r3, sp, #4
   2fee4:	mov	r1, r5
   2fee8:	mov	r0, r4
   2feec:	ldr	ip, [sp, #88]	; 0x58
   2fef0:	blx	ip
   2fef4:	ldr	r6, [r4, #20]
   2fef8:	cmp	r6, #0
   2fefc:	beq	2ff0c <flatcc_json_parser_struct_as_root@@Base+0xa0>
   2ff00:	mov	r0, r6
   2ff04:	add	sp, sp, #52	; 0x34
   2ff08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ff0c:	mov	r0, r9
   2ff10:	ldr	r1, [sp, #4]
   2ff14:	bl	26cc8 <flatcc_builder_end_buffer@@Base>
   2ff18:	cmp	r0, #0
   2ff1c:	beq	2ff30 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   2ff20:	mov	r0, r6
   2ff24:	str	r5, [r4, #36]	; 0x24
   2ff28:	add	sp, sp, #52	; 0x34
   2ff2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ff30:	mvn	r6, #0
   2ff34:	mov	r0, r6
   2ff38:	add	sp, sp, #52	; 0x34
   2ff3c:	pop	{r4, r5, r6, r7, r8, r9, pc}

0002ff40 <flatcc_json_parser_table_as_root@@Base>:
   2ff40:	push	{lr}		; (str lr, [sp, #-4]!)
   2ff44:	pop	{lr}		; (ldr lr, [sp], #4)
   2ff48:	b	2fe6c <flatcc_json_parser_struct_as_root@@Base>
   2ff4c:	andeq	r0, r0, r0
   2ff50:	cmp	r0, #1000	; 0x3e8
   2ff54:	push	{r4, lr}
   2ff58:	mov	r3, r0
   2ff5c:	bcc	2ffd8 <flatcc_json_parser_table_as_root@@Base+0x98>
   2ff60:	ldr	r2, [pc, #340]	; 300bc <flatcc_json_parser_table_as_root@@Base+0x17c>
   2ff64:	cmp	r0, r2
   2ff68:	bhi	3003c <flatcc_json_parser_table_as_root@@Base+0xfc>
   2ff6c:	ldr	lr, [pc, #332]	; 300c0 <flatcc_json_parser_table_as_root@@Base+0x180>
   2ff70:	mov	r2, #100	; 0x64
   2ff74:	ldr	ip, [pc, #328]	; 300c4 <flatcc_json_parser_table_as_root@@Base+0x184>
   2ff78:	umull	r0, lr, lr, r3
   2ff7c:	add	ip, pc, ip
   2ff80:	lsr	lr, lr, #5
   2ff84:	mov	r0, #0
   2ff88:	mul	r2, r2, lr
   2ff8c:	strb	r0, [r1, #4]
   2ff90:	sub	r3, r3, r2
   2ff94:	add	r4, r1, #2
   2ff98:	uxth	r2, r3
   2ff9c:	uxth	r3, lr
   2ffa0:	ldrb	lr, [ip, r2, lsl #1]
   2ffa4:	add	r2, ip, r2, lsl #1
   2ffa8:	mov	r0, #4
   2ffac:	strb	lr, [r1, #2]
   2ffb0:	ldrb	r2, [r2, #1]
   2ffb4:	strb	r2, [r1, #3]
   2ffb8:	ldr	r2, [pc, #264]	; 300c8 <flatcc_json_parser_table_as_root@@Base+0x188>
   2ffbc:	add	r2, pc, r2
   2ffc0:	add	r1, r2, r3, lsl #1
   2ffc4:	ldrb	r3, [r2, r3, lsl #1]
   2ffc8:	strb	r3, [r4, #-2]
   2ffcc:	ldrb	r3, [r1, #1]
   2ffd0:	strb	r3, [r4, #-1]
   2ffd4:	pop	{r4, pc}
   2ffd8:	cmp	r0, #99	; 0x63
   2ffdc:	bls	3008c <flatcc_json_parser_table_as_root@@Base+0x14c>
   2ffe0:	add	lr, r1, #3
   2ffe4:	mov	r0, #3
   2ffe8:	mov	r2, #0
   2ffec:	strb	r2, [r1, #3]
   2fff0:	ldr	r4, [pc, #200]	; 300c0 <flatcc_json_parser_table_as_root@@Base+0x180>
   2fff4:	mov	r2, #100	; 0x64
   2fff8:	ldr	ip, [pc, #204]	; 300cc <flatcc_json_parser_table_as_root@@Base+0x18c>
   2fffc:	umull	r1, r4, r4, r3
   30000:	add	ip, pc, ip
   30004:	lsr	r4, r4, #5
   30008:	sub	r1, lr, #2
   3000c:	mul	r2, r2, r4
   30010:	sub	r2, r3, r2
   30014:	uxth	r3, r4
   30018:	uxth	r2, r2
   3001c:	ldrb	r4, [ip, r2, lsl #1]
   30020:	add	r2, ip, r2, lsl #1
   30024:	strb	r4, [lr, #-2]
   30028:	ldrb	r2, [r2, #1]
   3002c:	strb	r2, [lr, #-1]
   30030:	add	r3, r3, #48	; 0x30
   30034:	strb	r3, [r1, #-1]
   30038:	pop	{r4, pc}
   3003c:	ldr	r4, [pc, #124]	; 300c0 <flatcc_json_parser_table_as_root@@Base+0x180>
   30040:	mov	r2, #100	; 0x64
   30044:	ldr	ip, [pc, #132]	; 300d0 <flatcc_json_parser_table_as_root@@Base+0x190>
   30048:	umull	r0, r4, r4, r3
   3004c:	add	ip, pc, ip
   30050:	lsr	r4, r4, #5
   30054:	mov	r0, #0
   30058:	mul	r2, r2, r4
   3005c:	strb	r0, [r1, #5]
   30060:	sub	r3, r3, r2
   30064:	add	lr, r1, #3
   30068:	uxth	r2, r3
   3006c:	uxth	r3, r4
   30070:	ldrb	r4, [ip, r2, lsl #1]
   30074:	add	r2, ip, r2, lsl #1
   30078:	mov	r0, #5
   3007c:	strb	r4, [r1, #3]
   30080:	ldrb	r2, [r2, #1]
   30084:	strb	r2, [r1, #4]
   30088:	b	2fff0 <flatcc_json_parser_table_as_root@@Base+0xb0>
   3008c:	cmp	r0, #9
   30090:	bls	300a8 <flatcc_json_parser_table_as_root@@Base+0x168>
   30094:	mov	r2, #0
   30098:	strb	r2, [r1, #2]
   3009c:	add	r4, r1, #2
   300a0:	mov	r0, #2
   300a4:	b	2ffb8 <flatcc_json_parser_table_as_root@@Base+0x78>
   300a8:	mov	r2, #0
   300ac:	strb	r2, [r1, #1]
   300b0:	mov	r0, #1
   300b4:	add	r1, r1, #1
   300b8:	b	30030 <flatcc_json_parser_table_as_root@@Base+0xf0>
   300bc:	andeq	r2, r0, pc, lsl #14
   300c0:	mvnpl	r8, pc, lsl r5
   300c4:	andeq	r2, r1, r4, lsr #21
   300c8:	andeq	r2, r1, r4, ror #20
   300cc:	andeq	r2, r1, r0, lsr #20
   300d0:	ldrdeq	r2, [r1], -r4
   300d4:	ldr	r2, [pc, #804]	; 30400 <flatcc_json_parser_table_as_root@@Base+0x4c0>
   300d8:	push	{r4, lr}
   300dc:	cmp	r0, r2
   300e0:	mov	r3, r0
   300e4:	bls	3021c <flatcc_json_parser_table_as_root@@Base+0x2dc>
   300e8:	ldr	r2, [pc, #788]	; 30404 <flatcc_json_parser_table_as_root@@Base+0x4c4>
   300ec:	cmp	r0, r2
   300f0:	bls	3025c <flatcc_json_parser_table_as_root@@Base+0x31c>
   300f4:	ldr	r2, [pc, #780]	; 30408 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   300f8:	cmp	r0, r2
   300fc:	bls	30360 <flatcc_json_parser_table_as_root@@Base+0x420>
   30100:	ldr	ip, [pc, #772]	; 3040c <flatcc_json_parser_table_as_root@@Base+0x4cc>
   30104:	mov	r0, #100	; 0x64
   30108:	ldr	r2, [pc, #768]	; 30410 <flatcc_json_parser_table_as_root@@Base+0x4d0>
   3010c:	umull	lr, ip, ip, r3
   30110:	add	r2, pc, r2
   30114:	lsr	ip, ip, #5
   30118:	mov	lr, #0
   3011c:	mul	r0, r0, ip
   30120:	strb	lr, [r1, #10]
   30124:	sub	r3, r3, r0
   30128:	add	lr, r1, #8
   3012c:	ldrb	r4, [r2, r3, lsl #1]
   30130:	add	r2, r2, r3, lsl #1
   30134:	mov	r0, #10
   30138:	strb	r4, [r1, #8]
   3013c:	ldrb	r2, [r2, #1]
   30140:	mov	r3, ip
   30144:	strb	r2, [r1, #9]
   30148:	ldr	r4, [pc, #700]	; 3040c <flatcc_json_parser_table_as_root@@Base+0x4cc>
   3014c:	mov	ip, #100	; 0x64
   30150:	ldr	r2, [pc, #700]	; 30414 <flatcc_json_parser_table_as_root@@Base+0x4d4>
   30154:	umull	r1, r4, r4, r3
   30158:	add	r2, pc, r2
   3015c:	lsr	r4, r4, #5
   30160:	sub	r1, lr, #2
   30164:	mul	ip, ip, r4
   30168:	sub	ip, r3, ip
   3016c:	mov	r3, r4
   30170:	ldrb	r4, [r2, ip, lsl #1]
   30174:	add	r2, r2, ip, lsl #1
   30178:	strb	r4, [lr, #-2]
   3017c:	ldrb	r2, [r2, #1]
   30180:	strb	r2, [lr, #-1]
   30184:	ldr	lr, [pc, #640]	; 3040c <flatcc_json_parser_table_as_root@@Base+0x4cc>
   30188:	mov	ip, #100	; 0x64
   3018c:	ldr	r2, [pc, #644]	; 30418 <flatcc_json_parser_table_as_root@@Base+0x4d8>
   30190:	umull	r4, lr, lr, r3
   30194:	add	r2, pc, r2
   30198:	lsr	lr, lr, #5
   3019c:	sub	r4, r1, #2
   301a0:	mul	ip, ip, lr
   301a4:	sub	ip, r3, ip
   301a8:	mov	r3, lr
   301ac:	ldrb	lr, [r2, ip, lsl #1]
   301b0:	add	r2, r2, ip, lsl #1
   301b4:	strb	lr, [r1, #-2]
   301b8:	ldrb	r2, [r2, #1]
   301bc:	strb	r2, [r1, #-1]
   301c0:	ldr	lr, [pc, #580]	; 3040c <flatcc_json_parser_table_as_root@@Base+0x4cc>
   301c4:	mov	ip, #100	; 0x64
   301c8:	ldr	r2, [pc, #588]	; 3041c <flatcc_json_parser_table_as_root@@Base+0x4dc>
   301cc:	umull	r1, lr, lr, r3
   301d0:	add	r2, pc, r2
   301d4:	lsr	lr, lr, #5
   301d8:	sub	r1, r4, #2
   301dc:	mul	ip, ip, lr
   301e0:	sub	ip, r3, ip
   301e4:	mov	r3, lr
   301e8:	ldrb	lr, [r2, ip, lsl #1]
   301ec:	add	r2, r2, ip, lsl #1
   301f0:	strb	lr, [r4, #-2]
   301f4:	ldrb	r2, [r2, #1]
   301f8:	strb	r2, [r4, #-1]
   301fc:	ldr	r2, [pc, #540]	; 30420 <flatcc_json_parser_table_as_root@@Base+0x4e0>
   30200:	add	r2, pc, r2
   30204:	add	ip, r2, r3, lsl #1
   30208:	ldrb	r3, [r2, r3, lsl #1]
   3020c:	strb	r3, [r1, #-2]
   30210:	ldrb	r3, [ip, #1]
   30214:	strb	r3, [r1, #-1]
   30218:	pop	{r4, pc}
   3021c:	cmp	r0, #99	; 0x63
   30220:	bls	30240 <flatcc_json_parser_table_as_root@@Base+0x300>
   30224:	cmp	r0, #1000	; 0x3e8
   30228:	bcc	30338 <flatcc_json_parser_table_as_root@@Base+0x3f8>
   3022c:	mov	r2, #0
   30230:	strb	r2, [r1, #4]
   30234:	add	r4, r1, #4
   30238:	mov	r0, #4
   3023c:	b	301c0 <flatcc_json_parser_table_as_root@@Base+0x280>
   30240:	cmp	r0, #9
   30244:	bls	3034c <flatcc_json_parser_table_as_root@@Base+0x40c>
   30248:	mov	r2, #0
   3024c:	strb	r2, [r1, #2]
   30250:	mov	r0, #2
   30254:	add	r1, r1, #2
   30258:	b	301fc <flatcc_json_parser_table_as_root@@Base+0x2bc>
   3025c:	ldr	r2, [pc, #448]	; 30424 <flatcc_json_parser_table_as_root@@Base+0x4e4>
   30260:	cmp	r0, r2
   30264:	bls	303b8 <flatcc_json_parser_table_as_root@@Base+0x478>
   30268:	add	r4, r1, #7
   3026c:	mov	r0, #7
   30270:	mov	r2, #0
   30274:	strb	r2, [r1, #7]
   30278:	ldr	lr, [pc, #396]	; 3040c <flatcc_json_parser_table_as_root@@Base+0x4cc>
   3027c:	mov	ip, #100	; 0x64
   30280:	ldr	r2, [pc, #416]	; 30428 <flatcc_json_parser_table_as_root@@Base+0x4e8>
   30284:	umull	r1, lr, lr, r3
   30288:	add	r2, pc, r2
   3028c:	lsr	lr, lr, #5
   30290:	sub	r1, r4, #2
   30294:	mul	ip, ip, lr
   30298:	sub	ip, r3, ip
   3029c:	mov	r3, lr
   302a0:	ldrb	lr, [r2, ip, lsl #1]
   302a4:	add	r2, r2, ip, lsl #1
   302a8:	strb	lr, [r4, #-2]
   302ac:	ldrb	r2, [r2, #1]
   302b0:	strb	r2, [r4, #-1]
   302b4:	ldr	lr, [pc, #336]	; 3040c <flatcc_json_parser_table_as_root@@Base+0x4cc>
   302b8:	mov	ip, #100	; 0x64
   302bc:	ldr	r2, [pc, #360]	; 3042c <flatcc_json_parser_table_as_root@@Base+0x4ec>
   302c0:	umull	r4, lr, lr, r3
   302c4:	add	r2, pc, r2
   302c8:	lsr	lr, lr, #5
   302cc:	sub	r4, r1, #2
   302d0:	mul	ip, ip, lr
   302d4:	sub	ip, r3, ip
   302d8:	mov	r3, lr
   302dc:	ldrb	lr, [r2, ip, lsl #1]
   302e0:	add	r2, r2, ip, lsl #1
   302e4:	strb	lr, [r1, #-2]
   302e8:	ldrb	r2, [r2, #1]
   302ec:	strb	r2, [r1, #-1]
   302f0:	ldr	lr, [pc, #276]	; 3040c <flatcc_json_parser_table_as_root@@Base+0x4cc>
   302f4:	mov	ip, #100	; 0x64
   302f8:	ldr	r2, [pc, #304]	; 30430 <flatcc_json_parser_table_as_root@@Base+0x4f0>
   302fc:	umull	r1, lr, lr, r3
   30300:	add	r2, pc, r2
   30304:	lsr	lr, lr, #5
   30308:	sub	r1, r4, #2
   3030c:	mul	ip, ip, lr
   30310:	sub	ip, r3, ip
   30314:	mov	r3, lr
   30318:	ldrb	lr, [r2, ip, lsl #1]
   3031c:	add	r2, r2, ip, lsl #1
   30320:	strb	lr, [r4, #-2]
   30324:	ldrb	r2, [r2, #1]
   30328:	strb	r2, [r4, #-1]
   3032c:	add	r3, r3, #48	; 0x30
   30330:	strb	r3, [r1, #-1]
   30334:	pop	{r4, pc}
   30338:	mov	r2, #0
   3033c:	strb	r2, [r1, #3]
   30340:	add	r4, r1, #3
   30344:	mov	r0, #3
   30348:	b	302f0 <flatcc_json_parser_table_as_root@@Base+0x3b0>
   3034c:	mov	r2, #0
   30350:	strb	r2, [r1, #1]
   30354:	mov	r0, #1
   30358:	add	r1, r1, #1
   3035c:	b	3032c <flatcc_json_parser_table_as_root@@Base+0x3ec>
   30360:	ldr	r2, [pc, #204]	; 30434 <flatcc_json_parser_table_as_root@@Base+0x4f4>
   30364:	cmp	r0, r2
   30368:	bls	303ec <flatcc_json_parser_table_as_root@@Base+0x4ac>
   3036c:	ldr	ip, [pc, #152]	; 3040c <flatcc_json_parser_table_as_root@@Base+0x4cc>
   30370:	mov	r0, #100	; 0x64
   30374:	ldr	r2, [pc, #188]	; 30438 <flatcc_json_parser_table_as_root@@Base+0x4f8>
   30378:	umull	lr, ip, ip, r3
   3037c:	add	r2, pc, r2
   30380:	lsr	ip, ip, #5
   30384:	mov	lr, #0
   30388:	mul	r0, r0, ip
   3038c:	strb	lr, [r1, #9]
   30390:	sub	r3, r3, r0
   30394:	add	r4, r1, #7
   30398:	ldrb	lr, [r2, r3, lsl #1]
   3039c:	add	r2, r2, r3, lsl #1
   303a0:	mov	r0, #9
   303a4:	strb	lr, [r1, #7]
   303a8:	ldrb	r2, [r2, #1]
   303ac:	mov	r3, ip
   303b0:	strb	r2, [r1, #8]
   303b4:	b	30278 <flatcc_json_parser_table_as_root@@Base+0x338>
   303b8:	ldr	r2, [pc, #124]	; 3043c <flatcc_json_parser_table_as_root@@Base+0x4fc>
   303bc:	cmp	r0, r2
   303c0:	bls	303d8 <flatcc_json_parser_table_as_root@@Base+0x498>
   303c4:	mov	r2, #0
   303c8:	strb	r2, [r1, #6]
   303cc:	mov	r0, #6
   303d0:	add	r1, r1, #6
   303d4:	b	30184 <flatcc_json_parser_table_as_root@@Base+0x244>
   303d8:	mov	r2, #0
   303dc:	strb	r2, [r1, #5]
   303e0:	mov	r0, #5
   303e4:	add	r1, r1, #5
   303e8:	b	302b4 <flatcc_json_parser_table_as_root@@Base+0x374>
   303ec:	mov	r2, #0
   303f0:	strb	r2, [r1, #8]
   303f4:	add	lr, r1, #8
   303f8:	mov	r0, #8
   303fc:	b	30148 <flatcc_json_parser_table_as_root@@Base+0x208>
   30400:	andeq	r2, r0, pc, lsl #14
   30404:	addseq	r9, r8, pc, ror r6
   30408:	blcc	fe6e2c0c <__bss_end__@@Base+0xfe68e840>
   3040c:	mvnpl	r8, pc, lsl r5
   30410:	andeq	r2, r1, r0, lsl r9
   30414:	andeq	r2, r1, r8, asr #17
   30418:	andeq	r2, r1, ip, lsl #17
   3041c:	andeq	r2, r1, r0, asr r8
   30420:	andeq	r2, r1, r0, lsr #16
   30424:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   30428:	muleq	r1, r8, r7
   3042c:	andeq	r2, r1, ip, asr r7
   30430:	andeq	r2, r1, r0, lsr #14
   30434:	ldrbeq	lr, [r5, #255]!	; 0xff
   30438:	andeq	r2, r1, r4, lsr #13
   3043c:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   30440:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30444:	mov	r4, r0
   30448:	add	r9, pc, #992	; 0x3e0
   3044c:	ldrd	r8, [r9]
   30450:	mov	r6, r2
   30454:	cmp	r1, r9
   30458:	cmpeq	r0, r8
   3045c:	bls	30890 <flatcc_json_parser_table_as_root@@Base+0x950>
   30460:	add	r3, pc, #976	; 0x3d0
   30464:	ldrd	r2, [r3]
   30468:	mov	r5, r1
   3046c:	cmp	r1, r3
   30470:	cmpeq	r0, r2
   30474:	bls	306b4 <flatcc_json_parser_table_as_root@@Base+0x774>
   30478:	add	r3, pc, #960	; 0x3c0
   3047c:	ldrd	r2, [r3]
   30480:	cmp	r1, r3
   30484:	cmpeq	r0, r2
   30488:	bls	3089c <flatcc_json_parser_table_as_root@@Base+0x95c>
   3048c:	add	r3, pc, #948	; 0x3b4
   30490:	ldrd	r2, [r3]
   30494:	cmp	r1, r3
   30498:	cmpeq	r0, r2
   3049c:	bls	30a6c <flatcc_json_parser_table_as_root@@Base+0xb2c>
   304a0:	add	r3, pc, #936	; 0x3a8
   304a4:	ldrd	r2, [r3]
   304a8:	cmp	r1, r3
   304ac:	cmpeq	r0, r2
   304b0:	bls	30954 <flatcc_json_parser_table_as_root@@Base+0xa14>
   304b4:	mov	r3, #0
   304b8:	strb	r3, [r6, #20]
   304bc:	mov	r2, #100	; 0x64
   304c0:	mov	r3, #0
   304c4:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   304c8:	mov	r0, r4
   304cc:	mov	r1, r5
   304d0:	mov	r3, #0
   304d4:	ldr	r7, [pc, #908]	; 30868 <flatcc_json_parser_table_as_root@@Base+0x928>
   304d8:	add	r7, pc, r7
   304dc:	mov	r8, r2
   304e0:	mov	r2, #100	; 0x64
   304e4:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   304e8:	ldrb	r2, [r7, r8, lsl #1]
   304ec:	add	r3, r7, r8, lsl #1
   304f0:	add	r8, r6, #18
   304f4:	strb	r2, [r6, #18]
   304f8:	ldrb	r3, [r3, #1]
   304fc:	mov	r7, #20
   30500:	strb	r3, [r6, #19]
   30504:	mov	r4, r0
   30508:	mov	r5, r1
   3050c:	mov	r0, r4
   30510:	mov	r1, r5
   30514:	mov	r2, #100	; 0x64
   30518:	mov	r3, #0
   3051c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30520:	mov	r0, r4
   30524:	mov	r1, r5
   30528:	mov	r3, #0
   3052c:	ldr	r6, [pc, #824]	; 3086c <flatcc_json_parser_table_as_root@@Base+0x92c>
   30530:	add	r6, pc, r6
   30534:	mov	r9, r2
   30538:	mov	r2, #100	; 0x64
   3053c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30540:	ldrb	r3, [r6, r9, lsl #1]
   30544:	add	r2, r6, r9, lsl #1
   30548:	sub	r6, r8, #2
   3054c:	strb	r3, [r8, #-2]
   30550:	ldrb	r3, [r2, #1]
   30554:	strb	r3, [r8, #-1]
   30558:	mov	r4, r0
   3055c:	mov	r5, r1
   30560:	mov	r0, r4
   30564:	mov	r1, r5
   30568:	mov	r2, #100	; 0x64
   3056c:	mov	r3, #0
   30570:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30574:	mov	r0, r4
   30578:	mov	r1, r5
   3057c:	mov	r3, #0
   30580:	ldr	r8, [pc, #744]	; 30870 <flatcc_json_parser_table_as_root@@Base+0x930>
   30584:	add	r8, pc, r8
   30588:	mov	r9, r2
   3058c:	mov	r2, #100	; 0x64
   30590:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30594:	ldrb	r3, [r8, r9, lsl #1]
   30598:	add	r2, r8, r9, lsl #1
   3059c:	sub	r9, r6, #2
   305a0:	strb	r3, [r6, #-2]
   305a4:	ldrb	r3, [r2, #1]
   305a8:	strb	r3, [r6, #-1]
   305ac:	mov	r4, r0
   305b0:	mov	r5, r1
   305b4:	mov	r0, r4
   305b8:	mov	r1, r5
   305bc:	mov	r2, #100	; 0x64
   305c0:	mov	r3, #0
   305c4:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   305c8:	mov	r0, r4
   305cc:	mov	r1, r5
   305d0:	mov	r3, #0
   305d4:	ldr	r8, [pc, #664]	; 30874 <flatcc_json_parser_table_as_root@@Base+0x934>
   305d8:	add	r8, pc, r8
   305dc:	mov	r6, r2
   305e0:	mov	r2, #100	; 0x64
   305e4:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   305e8:	ldrb	r3, [r8, r6, lsl #1]
   305ec:	add	r2, r8, r6, lsl #1
   305f0:	sub	r6, r9, #2
   305f4:	strb	r3, [r9, #-2]
   305f8:	ldrb	r3, [r2, #1]
   305fc:	strb	r3, [r9, #-1]
   30600:	mov	r4, r0
   30604:	mov	r5, r1
   30608:	mov	r0, r4
   3060c:	mov	r1, r5
   30610:	mov	r2, #100	; 0x64
   30614:	mov	r3, #0
   30618:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   3061c:	mov	r0, r4
   30620:	mov	r1, r5
   30624:	mov	r3, #0
   30628:	ldr	r8, [pc, #584]	; 30878 <flatcc_json_parser_table_as_root@@Base+0x938>
   3062c:	sub	sl, r6, #2
   30630:	add	r8, pc, r8
   30634:	mov	r9, r2
   30638:	mov	r2, #100	; 0x64
   3063c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30640:	ldrb	r3, [r8, r9, lsl #1]
   30644:	add	r2, r8, r9, lsl #1
   30648:	strb	r3, [r6, #-2]
   3064c:	ldrb	r3, [r2, #1]
   30650:	strb	r3, [r6, #-1]
   30654:	mov	r4, r0
   30658:	mov	r5, r1
   3065c:	mov	r2, #100	; 0x64
   30660:	mov	r3, #0
   30664:	mov	r0, r4
   30668:	mov	r1, r5
   3066c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30670:	mov	r3, #0
   30674:	mov	r0, r4
   30678:	mov	r1, r5
   3067c:	ldr	fp, [pc, #504]	; 3087c <flatcc_json_parser_table_as_root@@Base+0x93c>
   30680:	add	fp, pc, fp
   30684:	mov	r6, r2
   30688:	mov	r2, #100	; 0x64
   3068c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30690:	ldrb	r3, [fp, r6, lsl #1]
   30694:	add	r2, fp, r6, lsl #1
   30698:	sub	r6, sl, #2
   3069c:	strb	r3, [sl, #-2]
   306a0:	ldrb	r3, [r2, #1]
   306a4:	strb	r3, [sl, #-1]
   306a8:	mov	r8, r0
   306ac:	mov	r9, r1
   306b0:	b	30764 <flatcc_json_parser_table_as_root@@Base+0x824>
   306b4:	add	r3, pc, #412	; 0x19c
   306b8:	ldrd	r2, [r3]
   306bc:	cmp	r1, r3
   306c0:	cmpeq	r0, r2
   306c4:	bhi	308d8 <flatcc_json_parser_table_as_root@@Base+0x998>
   306c8:	add	r3, pc, #400	; 0x190
   306cc:	ldrd	r2, [r3]
   306d0:	cmp	r1, r3
   306d4:	cmpeq	r0, r2
   306d8:	bls	30a94 <flatcc_json_parser_table_as_root@@Base+0xb54>
   306dc:	add	r8, r6, #11
   306e0:	mov	r7, #11
   306e4:	mov	r3, #0
   306e8:	strb	r3, [r6, #11]
   306ec:	mov	r2, #100	; 0x64
   306f0:	mov	r3, #0
   306f4:	mov	r0, r4
   306f8:	mov	r1, r5
   306fc:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30700:	ldr	r9, [pc, #376]	; 30880 <flatcc_json_parser_table_as_root@@Base+0x940>
   30704:	mov	r0, r4
   30708:	add	r9, pc, r9
   3070c:	sub	r6, r8, #3
   30710:	ldrb	r1, [r9, r2, lsl #1]
   30714:	add	r3, r9, r2, lsl #1
   30718:	mov	r2, #100	; 0x64
   3071c:	strb	r1, [r8, #-2]
   30720:	ldrb	r1, [r3, #1]
   30724:	mov	r3, #0
   30728:	strb	r1, [r8, #-1]
   3072c:	mov	r1, r5
   30730:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30734:	mov	r2, #10
   30738:	mov	r3, #0
   3073c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30740:	mov	r0, r4
   30744:	mov	r1, r5
   30748:	mov	r3, #0
   3074c:	add	r2, r2, #48	; 0x30
   30750:	strb	r2, [r8, #-3]
   30754:	mov	r2, #1000	; 0x3e8
   30758:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   3075c:	mov	r8, r0
   30760:	mov	r9, r1
   30764:	mov	r0, r8
   30768:	mov	r1, r9
   3076c:	mov	r2, #100	; 0x64
   30770:	mov	r3, #0
   30774:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30778:	ldr	r4, [pc, #260]	; 30884 <flatcc_json_parser_table_as_root@@Base+0x944>
   3077c:	mov	r0, r8
   30780:	add	r4, pc, r4
   30784:	ldrb	r3, [r4, r2, lsl #1]
   30788:	add	r2, r4, r2, lsl #1
   3078c:	strb	r3, [r6, #-2]
   30790:	ldrb	r1, [r2, #1]
   30794:	mov	r3, #0
   30798:	mov	r2, #100	; 0x64
   3079c:	strb	r1, [r6, #-1]
   307a0:	mov	r1, r9
   307a4:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   307a8:	mov	r2, #100	; 0x64
   307ac:	mov	r3, #0
   307b0:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   307b4:	mov	r0, r8
   307b8:	ldrb	r3, [r4, r2, lsl #1]
   307bc:	add	r2, r4, r2, lsl #1
   307c0:	strb	r3, [r6, #-4]
   307c4:	ldrb	r1, [r2, #1]
   307c8:	mov	r3, #0
   307cc:	ldr	r2, [pc, #180]	; 30888 <flatcc_json_parser_table_as_root@@Base+0x948>
   307d0:	strb	r1, [r6, #-3]
   307d4:	mov	r1, r9
   307d8:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   307dc:	mov	r2, #100	; 0x64
   307e0:	mov	r3, #0
   307e4:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   307e8:	mov	r0, r8
   307ec:	mov	r1, r9
   307f0:	mov	r3, #0
   307f4:	ldrb	lr, [r4, r2, lsl #1]
   307f8:	add	ip, r4, r2, lsl #1
   307fc:	ldr	r2, [pc, #136]	; 3088c <flatcc_json_parser_table_as_root@@Base+0x94c>
   30800:	strb	lr, [r6, #-6]
   30804:	ldrb	ip, [ip, #1]
   30808:	strb	ip, [r6, #-5]
   3080c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30810:	ldrb	r3, [r4, r0, lsl #1]
   30814:	add	r4, r4, r0, lsl #1
   30818:	mov	r0, r7
   3081c:	strb	r3, [r6, #-8]
   30820:	ldrb	r3, [r4, #1]
   30824:	strb	r3, [r6, #-7]
   30828:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3082c:	nop			; (mov r0, r0)
   30830:	blcc	fe6e3034 <__bss_end__@@Base+0xfe68ec68>
   30834:	andeq	r0, r0, r0
   30838:	mrcmi	15, 3, r9, cr2, cr15, {7}
   3083c:	andeq	r0, r0, r8, lsl r9
   30840:	svcvs	0x00c0ffff
   30844:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   30848:			; <UNDEFINED> instruction: 0xa763ffff
   3084c:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   30850:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   30854:	bhi	ff1f946c <__bss_end__@@Base+0xff1a50a0>
   30858:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   3085c:	andeq	r0, r0, r7, lsl r0
   30860:	strpl	lr, [fp], #-1023	; 0xfffffc01
   30864:	andeq	r0, r0, r2
   30868:	andeq	r2, r1, r8, asr #10
   3086c:	strdeq	r2, [r1], -r0
   30870:	muleq	r1, ip, r4
   30874:	andeq	r2, r1, r8, asr #8
   30878:	strdeq	r2, [r1], -r0
   3087c:	andeq	r2, r1, r0, lsr #7
   30880:	andeq	r2, r1, r8, lsl r3
   30884:	andeq	r2, r1, r0, lsr #5
   30888:	andeq	r2, r0, r0, lsl r7
   3088c:	andeq	r4, pc, r0, asr #4
   30890:	mov	r1, r2
   30894:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30898:	b	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   3089c:	add	r3, pc, #580	; 0x244
   308a0:	ldrd	r2, [r3]
   308a4:	cmp	r1, r3
   308a8:	cmpeq	r0, r2
   308ac:	bhi	30a58 <flatcc_json_parser_table_as_root@@Base+0xb18>
   308b0:	add	r3, pc, #568	; 0x238
   308b4:	ldrd	r2, [r3]
   308b8:	cmp	r1, r3
   308bc:	cmpeq	r0, r2
   308c0:	bls	30ad0 <flatcc_json_parser_table_as_root@@Base+0xb90>
   308c4:	mov	r3, #0
   308c8:	strb	r3, [r6, #15]
   308cc:	mov	r7, #15
   308d0:	add	r6, r6, #15
   308d4:	b	30a00 <flatcc_json_parser_table_as_root@@Base+0xac0>
   308d8:	add	r3, pc, #536	; 0x218
   308dc:	ldrd	r2, [r3]
   308e0:	cmp	r1, r3
   308e4:	cmpeq	r0, r2
   308e8:	bls	30aa8 <flatcc_json_parser_table_as_root@@Base+0xb68>
   308ec:	add	r9, r6, #13
   308f0:	mov	r7, #13
   308f4:	mov	r3, #0
   308f8:	strb	r3, [r6, #13]
   308fc:	mov	r0, r4
   30900:	mov	r1, r5
   30904:	mov	r2, #100	; 0x64
   30908:	mov	r3, #0
   3090c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30910:	mov	r0, r4
   30914:	mov	r1, r5
   30918:	mov	r3, #0
   3091c:	ldr	r8, [pc, #484]	; 30b08 <flatcc_json_parser_table_as_root@@Base+0xbc8>
   30920:	add	r8, pc, r8
   30924:	mov	r6, r2
   30928:	mov	r2, #100	; 0x64
   3092c:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30930:	ldrb	r3, [r8, r6, lsl #1]
   30934:	add	r2, r8, r6, lsl #1
   30938:	sub	r8, r9, #2
   3093c:	strb	r3, [r9, #-2]
   30940:	ldrb	r3, [r2, #1]
   30944:	strb	r3, [r9, #-1]
   30948:	mov	r4, r0
   3094c:	mov	r5, r1
   30950:	b	306ec <flatcc_json_parser_table_as_root@@Base+0x7ac>
   30954:	mov	r3, #0
   30958:	strb	r3, [r6, #19]
   3095c:	mov	r2, #100	; 0x64
   30960:	mov	r3, #0
   30964:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30968:	mov	r0, r4
   3096c:	mov	r1, r5
   30970:	mov	r3, #0
   30974:	ldr	r7, [pc, #400]	; 30b0c <flatcc_json_parser_table_as_root@@Base+0xbcc>
   30978:	add	r7, pc, r7
   3097c:	mov	r8, r2
   30980:	mov	r2, #100	; 0x64
   30984:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30988:	ldrb	r2, [r7, r8, lsl #1]
   3098c:	add	r3, r7, r8, lsl #1
   30990:	add	r8, r6, #17
   30994:	strb	r2, [r6, #17]
   30998:	ldrb	r3, [r3, #1]
   3099c:	mov	r7, #19
   309a0:	strb	r3, [r6, #18]
   309a4:	mov	r4, r0
   309a8:	mov	r5, r1
   309ac:	mov	r0, r4
   309b0:	mov	r1, r5
   309b4:	mov	r2, #100	; 0x64
   309b8:	mov	r3, #0
   309bc:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   309c0:	mov	r0, r4
   309c4:	mov	r1, r5
   309c8:	mov	r3, #0
   309cc:	ldr	r6, [pc, #316]	; 30b10 <flatcc_json_parser_table_as_root@@Base+0xbd0>
   309d0:	add	r6, pc, r6
   309d4:	mov	r9, r2
   309d8:	mov	r2, #100	; 0x64
   309dc:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   309e0:	ldrb	r3, [r6, r9, lsl #1]
   309e4:	add	r2, r6, r9, lsl #1
   309e8:	sub	r6, r8, #2
   309ec:	strb	r3, [r8, #-2]
   309f0:	ldrb	r3, [r2, #1]
   309f4:	strb	r3, [r8, #-1]
   309f8:	mov	r4, r0
   309fc:	mov	r5, r1
   30a00:	mov	r0, r4
   30a04:	mov	r1, r5
   30a08:	mov	r2, #100	; 0x64
   30a0c:	mov	r3, #0
   30a10:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30a14:	mov	r0, r4
   30a18:	mov	r1, r5
   30a1c:	mov	r3, #0
   30a20:	ldr	r8, [pc, #236]	; 30b14 <flatcc_json_parser_table_as_root@@Base+0xbd4>
   30a24:	add	r8, pc, r8
   30a28:	mov	r9, r2
   30a2c:	mov	r2, #100	; 0x64
   30a30:	bl	3daf4 <flatcc_json_printer_clear@@Base+0x84c>
   30a34:	ldrb	r3, [r8, r9, lsl #1]
   30a38:	add	r2, r8, r9, lsl #1
   30a3c:	sub	r9, r6, #2
   30a40:	strb	r3, [r6, #-2]
   30a44:	ldrb	r3, [r2, #1]
   30a48:	strb	r3, [r6, #-1]
   30a4c:	mov	r4, r0
   30a50:	mov	r5, r1
   30a54:	b	308fc <flatcc_json_parser_table_as_root@@Base+0x9bc>
   30a58:	mov	r3, #0
   30a5c:	strb	r3, [r6, #16]
   30a60:	mov	r7, #16
   30a64:	add	r6, r6, #16
   30a68:	b	30560 <flatcc_json_parser_table_as_root@@Base+0x620>
   30a6c:	add	r3, pc, #140	; 0x8c
   30a70:	ldrd	r2, [r3]
   30a74:	cmp	r1, r3
   30a78:	cmpeq	r0, r2
   30a7c:	bls	30abc <flatcc_json_parser_table_as_root@@Base+0xb7c>
   30a80:	mov	r3, #0
   30a84:	strb	r3, [r6, #18]
   30a88:	add	r8, r6, #18
   30a8c:	mov	r7, #18
   30a90:	b	3050c <flatcc_json_parser_table_as_root@@Base+0x5cc>
   30a94:	mov	r3, #0
   30a98:	strb	r3, [r6, #10]
   30a9c:	add	sl, r6, #10
   30aa0:	mov	r7, #10
   30aa4:	b	3065c <flatcc_json_parser_table_as_root@@Base+0x71c>
   30aa8:	mov	r3, #0
   30aac:	strb	r3, [r6, #12]
   30ab0:	mov	r7, #12
   30ab4:	add	r6, r6, #12
   30ab8:	b	30608 <flatcc_json_parser_table_as_root@@Base+0x6c8>
   30abc:	mov	r3, #0
   30ac0:	strb	r3, [r6, #17]
   30ac4:	add	r8, r6, #17
   30ac8:	mov	r7, #17
   30acc:	b	309ac <flatcc_json_parser_table_as_root@@Base+0xa6c>
   30ad0:	mov	r3, #0
   30ad4:	strb	r3, [r6, #14]
   30ad8:	add	r9, r6, #14
   30adc:	mov	r7, #14
   30ae0:	b	305b4 <flatcc_json_parser_table_as_root@@Base+0x674>
   30ae4:	nop			; (mov r0, r0)
   30ae8:	strbge	r7, [r6], #4095	; 0xfff
   30aec:	andeq	r8, r3, lr, ror sp
   30af0:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   30af4:	strdeq	r5, [r0], -r3
   30af8:	strtle	r0, [r5], #4095	; 0xfff
   30afc:	andeq	r0, r0, r8, ror #1
   30b00:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   30b04:	smceq	13400	; 0x3458
   30b08:	andeq	r2, r1, r0, lsl #2
   30b0c:	andeq	r2, r1, r8, lsr #1
   30b10:	andeq	r2, r1, r0, asr r0
   30b14:	strdeq	r1, [r1], -ip
   30b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b1c:	sub	sp, sp, #20
   30b20:	mov	r8, r2
   30b24:	mov	r9, r3
   30b28:	strd	r2, [sp, #8]
   30b2c:	ldrd	r2, [sp, #80]	; 0x50
   30b30:	ldrd	r6, [sp, #64]	; 0x40
   30b34:	ldrd	sl, [sp, #72]	; 0x48
   30b38:	subs	r8, r8, r2
   30b3c:	sbc	r9, r9, r3
   30b40:	cmp	r9, r7
   30b44:	cmpeq	r8, r6
   30b48:	bls	30cc0 <flatcc_json_parser_table_as_root@@Base+0xd80>
   30b4c:	ldrd	r2, [sp, #56]	; 0x38
   30b50:	subs	r2, r2, r6
   30b54:	sbc	r3, r3, r7
   30b58:	cmp	fp, r3
   30b5c:	cmpeq	sl, r2
   30b60:	bhi	30ccc <flatcc_json_parser_table_as_root@@Base+0xd8c>
   30b64:	ldrd	r4, [sp, #56]	; 0x38
   30b68:	sub	ip, r1, #1
   30b6c:	add	ip, r0, ip
   30b70:	subs	r4, r4, sl
   30b74:	sbc	r5, r5, fp
   30b78:	subs	r4, r4, r6
   30b7c:	sbc	r5, r5, r7
   30b80:	adds	r2, sl, r6
   30b84:	adc	r3, fp, r7
   30b88:	cmp	r9, r3
   30b8c:	cmpeq	r8, r2
   30b90:	bhi	30c50 <flatcc_json_parser_table_as_root@@Base+0xd10>
   30b94:	subs	r4, r8, r6
   30b98:	sbc	r5, r9, r7
   30b9c:	strd	r4, [sp]
   30ba0:	subs	r4, r2, r8
   30ba4:	sbc	r5, r3, r9
   30ba8:	ldrd	r8, [sp]
   30bac:	cmp	r9, r5
   30bb0:	cmpeq	r8, r4
   30bb4:	bcc	30cc0 <flatcc_json_parser_table_as_root@@Base+0xd80>
   30bb8:	sub	r1, r1, #1
   30bbc:	ldrb	ip, [r0, r1]
   30bc0:	sub	ip, ip, #1
   30bc4:	strb	ip, [r0, r1]
   30bc8:	ldrd	r0, [sp, #8]
   30bcc:	ldrd	r4, [sp, #80]	; 0x50
   30bd0:	adds	r0, r0, r4
   30bd4:	adc	r1, r1, r5
   30bd8:	cmp	r1, r3
   30bdc:	cmpeq	r0, r2
   30be0:	bls	30c2c <flatcc_json_parser_table_as_root@@Base+0xcec>
   30be4:	ldrd	r4, [sp, #56]	; 0x38
   30be8:	subs	r4, r4, r2
   30bec:	sbc	r5, r5, r3
   30bf0:	cmp	fp, r5
   30bf4:	cmpeq	sl, r4
   30bf8:	bhi	30c2c <flatcc_json_parser_table_as_root@@Base+0xcec>
   30bfc:	adds	sl, sl, r2
   30c00:	adc	fp, fp, r3
   30c04:	cmp	r1, fp
   30c08:	cmpeq	r0, sl
   30c0c:	bhi	30c44 <flatcc_json_parser_table_as_root@@Base+0xd04>
   30c10:	subs	sl, sl, r0
   30c14:	sbc	fp, fp, r1
   30c18:	subs	r0, r0, r2
   30c1c:	sbc	r1, r1, r3
   30c20:	cmp	r1, fp
   30c24:	cmpeq	r0, sl
   30c28:	bhi	30c44 <flatcc_json_parser_table_as_root@@Base+0xd04>
   30c2c:	ldrd	r0, [sp, #80]	; 0x50
   30c30:	adds	r0, r0, r0
   30c34:	adc	r1, r1, r1
   30c38:	cmp	r1, r3
   30c3c:	cmpeq	r0, r2
   30c40:	bls	30c84 <flatcc_json_parser_table_as_root@@Base+0xd44>
   30c44:	mov	r0, #0
   30c48:	add	sp, sp, #20
   30c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30c50:	ldrb	lr, [ip]
   30c54:	subs	r6, r4, sl
   30c58:	sbc	r7, r5, fp
   30c5c:	cmp	fp, r5
   30c60:	cmpeq	sl, r4
   30c64:	sub	lr, lr, #1
   30c68:	mov	r4, r6
   30c6c:	mov	r5, r7
   30c70:	strb	lr, [ip]
   30c74:	mov	r6, r2
   30c78:	mov	r7, r3
   30c7c:	bls	30b80 <flatcc_json_parser_table_as_root@@Base+0xc40>
   30c80:	b	30c2c <flatcc_json_parser_table_as_root@@Base+0xcec>
   30c84:	ldr	ip, [sp, #84]	; 0x54
   30c88:	ldrd	r4, [sp, #56]	; 0x38
   30c8c:	lsl	r1, ip, #2
   30c90:	ldr	ip, [sp, #80]	; 0x50
   30c94:	lsl	r0, ip, #2
   30c98:	subs	r4, r4, r0
   30c9c:	orr	r1, r1, ip, lsr #30
   30ca0:	sbc	r5, r5, r1
   30ca4:	cmp	r5, r3
   30ca8:	cmpeq	r4, r2
   30cac:	mov	r0, r4
   30cb0:	movcs	r0, #1
   30cb4:	bcc	30c44 <flatcc_json_parser_table_as_root@@Base+0xd04>
   30cb8:	add	sp, sp, #20
   30cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30cc0:	mov	r2, r6
   30cc4:	mov	r3, r7
   30cc8:	b	30bc8 <flatcc_json_parser_table_as_root@@Base+0xc88>
   30ccc:	mov	r2, r6
   30cd0:	mov	r3, r7
   30cd4:	b	30c2c <flatcc_json_parser_table_as_root@@Base+0xcec>
   30cd8:	cmp	r0, #0
   30cdc:	push	{r4, r5, lr}
   30ce0:	addlt	r2, r1, #1
   30ce4:	movge	r2, r1
   30ce8:	ldr	r5, [pc, #116]	; 30d64 <flatcc_json_parser_table_as_root@@Base+0xe24>
   30cec:	rsblt	r0, r0, #0
   30cf0:	mov	lr, r2
   30cf4:	mvn	r4, #9
   30cf8:	movlt	r3, #45	; 0x2d
   30cfc:	strblt	r3, [r1]
   30d00:	smull	r3, ip, r5, r0
   30d04:	asr	r3, r0, #31
   30d08:	rsb	r3, r3, ip, asr #2
   30d0c:	mla	ip, r4, r3, r0
   30d10:	subs	r0, r3, #0
   30d14:	add	r3, ip, #48	; 0x30
   30d18:	strb	r3, [lr], #1
   30d1c:	bne	30d00 <flatcc_json_parser_table_as_root@@Base+0xdc0>
   30d20:	sub	ip, lr, r2
   30d24:	strb	r0, [lr]
   30d28:	add	ip, ip, ip, lsr #31
   30d2c:	asr	ip, ip, #1
   30d30:	cmp	ip, #0
   30d34:	ble	30d5c <flatcc_json_parser_table_as_root@@Base+0xe1c>
   30d38:	mov	r3, r2
   30d3c:	add	ip, r2, ip
   30d40:	mov	r2, lr
   30d44:	ldrb	r4, [r2, #-1]
   30d48:	ldrb	r0, [r3]
   30d4c:	strb	r4, [r3], #1
   30d50:	cmp	ip, r3
   30d54:	strb	r0, [r2, #-1]!
   30d58:	bne	30d44 <flatcc_json_parser_table_as_root@@Base+0xe04>
   30d5c:	sub	r0, lr, r1
   30d60:	pop	{r4, r5, pc}
   30d64:	strbtvs	r6, [r6], -r7, ror #12
   30d68:	ldr	r3, [r0, #20]
   30d6c:	ldr	r2, [r0, #16]
   30d70:	cmp	r3, r2
   30d74:	bcc	30da4 <flatcc_json_parser_table_as_root@@Base+0xe64>
   30d78:	ldr	r2, [r0, #36]	; 0x24
   30d7c:	mov	r1, r3
   30d80:	cmp	r2, #0
   30d84:	moveq	r2, #3
   30d88:	ldr	r3, [r0]
   30d8c:	streq	r2, [r0, #36]	; 0x24
   30d90:	ldr	r2, [r0, #12]
   30d94:	sub	r1, r1, r3
   30d98:	add	r2, r2, r1
   30d9c:	str	r3, [r0, #20]
   30da0:	str	r2, [r0, #12]
   30da4:	mov	r2, #0
   30da8:	strb	r2, [r3]
   30dac:	bx	lr
   30db0:	push	{r4, r5, r6, r7, r8, lr}
   30db4:	mov	r4, r0
   30db8:	ldr	r3, [r0, #20]
   30dbc:	ldr	r5, [r0, #16]
   30dc0:	mov	r7, r1
   30dc4:	cmp	r3, r5
   30dc8:	mov	r6, r2
   30dcc:	bcs	30e48 <flatcc_json_parser_table_as_root@@Base+0xf08>
   30dd0:	sub	r5, r5, r3
   30dd4:	cmp	r5, r6
   30dd8:	bcs	30e28 <flatcc_json_parser_table_as_root@@Base+0xee8>
   30ddc:	mov	r8, #0
   30de0:	mov	r2, r5
   30de4:	mov	r1, r7
   30de8:	mov	r0, r3
   30dec:	bl	14544 <memcpy@plt>
   30df0:	ldr	r3, [r4, #20]
   30df4:	ldr	r2, [r4, #44]	; 0x2c
   30df8:	add	r3, r3, r5
   30dfc:	str	r3, [r4, #20]
   30e00:	mov	r1, r8
   30e04:	mov	r0, r4
   30e08:	blx	r2
   30e0c:	ldr	r3, [r4, #20]
   30e10:	ldr	r2, [r4, #16]
   30e14:	sub	r6, r6, r5
   30e18:	add	r7, r7, r5
   30e1c:	sub	r5, r2, r3
   30e20:	cmp	r6, r5
   30e24:	bhi	30de0 <flatcc_json_parser_table_as_root@@Base+0xea0>
   30e28:	mov	r0, r3
   30e2c:	mov	r2, r6
   30e30:	mov	r1, r7
   30e34:	bl	14544 <memcpy@plt>
   30e38:	ldr	r3, [r4, #20]
   30e3c:	add	r6, r3, r6
   30e40:	str	r6, [r4, #20]
   30e44:	pop	{r4, r5, r6, r7, r8, pc}
   30e48:	ldr	r3, [r0, #44]	; 0x2c
   30e4c:	mov	r1, #0
   30e50:	blx	r3
   30e54:	ldr	r5, [r4, #16]
   30e58:	ldr	r3, [r4, #20]
   30e5c:	b	30dd0 <flatcc_json_parser_table_as_root@@Base+0xe90>
   30e60:	push	{r4, r5, r6, r7, r8, lr}
   30e64:	mov	r4, r0
   30e68:	ldr	r3, [r0, #20]
   30e6c:	ldr	r5, [r0, #16]
   30e70:	mov	r6, r1
   30e74:	cmp	r3, r5
   30e78:	bcs	30ef4 <flatcc_json_parser_table_as_root@@Base+0xfb4>
   30e7c:	sub	r5, r5, r3
   30e80:	cmp	r5, r6
   30e84:	bcs	30ed4 <flatcc_json_parser_table_as_root@@Base+0xf94>
   30e88:	mov	r8, #32
   30e8c:	mov	r7, #0
   30e90:	mov	r2, r5
   30e94:	mov	r0, r3
   30e98:	mov	r1, r8
   30e9c:	bl	145bc <memset@plt>
   30ea0:	ldr	r3, [r4, #20]
   30ea4:	ldr	r2, [r4, #44]	; 0x2c
   30ea8:	add	r3, r3, r5
   30eac:	str	r3, [r4, #20]
   30eb0:	mov	r1, r7
   30eb4:	mov	r0, r4
   30eb8:	blx	r2
   30ebc:	ldr	r3, [r4, #20]
   30ec0:	ldr	r2, [r4, #16]
   30ec4:	sub	r6, r6, r5
   30ec8:	sub	r5, r2, r3
   30ecc:	cmp	r6, r5
   30ed0:	bhi	30e90 <flatcc_json_parser_table_as_root@@Base+0xf50>
   30ed4:	mov	r0, r3
   30ed8:	mov	r2, r6
   30edc:	mov	r1, #32
   30ee0:	bl	145bc <memset@plt>
   30ee4:	ldr	r3, [r4, #20]
   30ee8:	add	r6, r3, r6
   30eec:	str	r6, [r4, #20]
   30ef0:	pop	{r4, r5, r6, r7, r8, pc}
   30ef4:	ldr	r3, [r0, #44]	; 0x2c
   30ef8:	mov	r1, #0
   30efc:	blx	r3
   30f00:	ldr	r5, [r4, #16]
   30f04:	ldr	r3, [r4, #20]
   30f08:	b	30e7c <flatcc_json_parser_table_as_root@@Base+0xf3c>
   30f0c:	push	{r4, r5, r6, lr}
   30f10:	ldrb	r1, [r0, #25]
   30f14:	ldr	r5, [r0, #32]
   30f18:	ldr	r2, [r0, #20]
   30f1c:	ldr	ip, [r0, #16]
   30f20:	mul	r5, r5, r1
   30f24:	add	r1, r2, r5
   30f28:	cmp	ip, r1
   30f2c:	bcc	30f54 <flatcc_json_parser_table_as_root@@Base+0x1014>
   30f30:	mov	r4, r0
   30f34:	mov	r1, #32
   30f38:	mov	r0, r2
   30f3c:	mov	r2, r5
   30f40:	bl	145bc <memset@plt>
   30f44:	ldr	r3, [r4, #20]
   30f48:	add	r5, r3, r5
   30f4c:	str	r5, [r4, #20]
   30f50:	pop	{r4, r5, r6, pc}
   30f54:	mov	r1, r5
   30f58:	pop	{r4, r5, r6, lr}
   30f5c:	b	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   30f60:	cmp	r1, #0
   30f64:	push	{r4, r5, r6, lr}
   30f68:	mov	r4, r0
   30f6c:	ldr	ip, [r0, #20]
   30f70:	bne	30f80 <flatcc_json_parser_table_as_root@@Base+0x1040>
   30f74:	ldr	r5, [r0, #16]
   30f78:	cmp	ip, r5
   30f7c:	bcs	30fb8 <flatcc_json_parser_table_as_root@@Base+0x1078>
   30f80:	ldr	r0, [r4]
   30f84:	ldr	r3, [r4, #40]	; 0x28
   30f88:	sub	r5, ip, r0
   30f8c:	mov	r1, r5
   30f90:	mov	r2, #1
   30f94:	bl	14568 <fwrite@plt>
   30f98:	ldr	ip, [r4, #12]
   30f9c:	ldr	r3, [r4]
   30fa0:	add	ip, ip, r5
   30fa4:	str	ip, [r4, #12]
   30fa8:	str	r3, [r4, #20]
   30fac:	mov	r2, #0
   30fb0:	strb	r2, [r3]
   30fb4:	pop	{r4, r5, r6, pc}
   30fb8:	ldr	r3, [r0, #40]	; 0x28
   30fbc:	ldr	r1, [r0, #8]
   30fc0:	mov	r2, #1
   30fc4:	ldr	r0, [r0]
   30fc8:	sub	r5, ip, r5
   30fcc:	bl	14568 <fwrite@plt>
   30fd0:	ldr	r0, [r4]
   30fd4:	ldr	r1, [r4, #8]
   30fd8:	mov	r2, r5
   30fdc:	add	r1, r0, r1
   30fe0:	bl	14544 <memcpy@plt>
   30fe4:	ldr	r2, [r4, #12]
   30fe8:	ldr	r3, [r4]
   30fec:	ldr	r1, [r4, #8]
   30ff0:	add	r3, r3, r5
   30ff4:	add	r2, r2, r1
   30ff8:	str	r3, [r4, #20]
   30ffc:	str	r2, [r4, #12]
   31000:	b	30fac <flatcc_json_parser_table_as_root@@Base+0x106c>
   31004:	ldr	r3, [r0, #20]
   31008:	mov	r2, #0
   3100c:	push	{r4, r5, r6, lr}
   31010:	ldr	r5, [r0]
   31014:	strb	r2, [r3]
   31018:	ldr	r1, [r0, #20]
   3101c:	ldr	r2, [r0, #16]
   31020:	cmp	r1, r2
   31024:	popcc	{r4, r5, r6, pc}
   31028:	mov	r4, r0
   3102c:	ldm	r0, {r0, r1}
   31030:	sub	r5, r3, r5
   31034:	lsl	r1, r1, #1
   31038:	bl	1455c <realloc@plt>
   3103c:	cmp	r0, #0
   31040:	beq	31074 <flatcc_json_parser_table_as_root@@Base+0x1134>
   31044:	ldr	r3, [r4, #4]
   31048:	add	r2, r0, r5
   3104c:	str	r2, [r4, #20]
   31050:	lsl	r3, r3, #1
   31054:	sub	r1, r3, #64	; 0x40
   31058:	add	ip, r0, r1
   3105c:	stm	r4, {r0, r3}
   31060:	str	ip, [r4, #16]
   31064:	str	r1, [r4, #8]
   31068:	mov	r3, #0
   3106c:	strb	r3, [r2]
   31070:	pop	{r4, r5, r6, pc}
   31074:	ldr	r3, [r4, #36]	; 0x24
   31078:	ldr	r2, [r4]
   3107c:	cmp	r3, #0
   31080:	moveq	r3, #3
   31084:	streq	r3, [r4, #36]	; 0x24
   31088:	ldr	r3, [r4, #12]
   3108c:	str	r2, [r4, #20]
   31090:	add	r3, r3, r5
   31094:	str	r3, [r4, #12]
   31098:	b	31068 <flatcc_json_parser_table_as_root@@Base+0x1128>
   3109c:	cmp	r0, #99	; 0x63
   310a0:	mov	r3, r0
   310a4:	bls	310fc <flatcc_json_parser_table_as_root@@Base+0x11bc>
   310a8:	ldr	r2, [pc, #156]	; 3114c <flatcc_json_parser_table_as_root@@Base+0x120c>
   310ac:	push	{lr}		; (str lr, [sp, #-4]!)
   310b0:	mov	r0, #100	; 0x64
   310b4:	umull	lr, r2, r2, r3
   310b8:	ldr	ip, [pc, #144]	; 31150 <flatcc_json_parser_table_as_root@@Base+0x1210>
   310bc:	mov	lr, #0
   310c0:	lsr	r2, r2, #5
   310c4:	add	ip, pc, ip
   310c8:	mul	r0, r0, r2
   310cc:	strb	lr, [r1, #3]
   310d0:	sub	r3, r3, r0
   310d4:	add	r2, r2, #48	; 0x30
   310d8:	uxtb	r3, r3
   310dc:	mov	r0, #3
   310e0:	ldrb	lr, [ip, r3, lsl #1]
   310e4:	add	r3, ip, r3, lsl #1
   310e8:	strb	lr, [r1, #1]
   310ec:	ldrb	r3, [r3, #1]
   310f0:	strb	r2, [r1]
   310f4:	strb	r3, [r1, #2]
   310f8:	pop	{pc}		; (ldr pc, [sp], #4)
   310fc:	cmp	r0, #9
   31100:	bls	31134 <flatcc_json_parser_table_as_root@@Base+0x11f4>
   31104:	ldr	r2, [pc, #72]	; 31154 <flatcc_json_parser_table_as_root@@Base+0x1214>
   31108:	sxth	r3, r0
   3110c:	add	r2, pc, r2
   31110:	mov	r0, #0
   31114:	strb	r0, [r1, #2]
   31118:	ldrb	ip, [r2, r3, lsl #1]
   3111c:	add	r3, r2, r3, lsl #1
   31120:	mov	r0, #2
   31124:	strb	ip, [r1]
   31128:	ldrb	r3, [r3, #1]
   3112c:	strb	r3, [r1, #1]
   31130:	bx	lr
   31134:	add	r3, r3, #48	; 0x30
   31138:	mov	r2, #0
   3113c:	mov	r0, #1
   31140:	strb	r3, [r1]
   31144:	strb	r2, [r1, #1]
   31148:	bx	lr
   3114c:	mvnpl	r8, pc, lsl r5
   31150:	andeq	r1, r1, ip, asr r9
   31154:	andeq	r1, r1, r4, lsl r9
   31158:	ldr	r3, [pc, #32]	; 31180 <flatcc_json_parser_table_as_root@@Base+0x1240>
   3115c:	ldr	r1, [pc, #32]	; 31184 <flatcc_json_parser_table_as_root@@Base+0x1244>
   31160:	ldr	r0, [pc, #32]	; 31188 <flatcc_json_parser_table_as_root@@Base+0x1248>
   31164:	add	r3, pc, r3
   31168:	push	{r4, lr}
   3116c:	mov	r2, #239	; 0xef
   31170:	add	r3, r3, #228	; 0xe4
   31174:	add	r1, pc, r1
   31178:	add	r0, pc, r0
   3117c:	bl	14610 <__assert_fail@plt>
   31180:			; <UNDEFINED> instruction: 0x000118bc
   31184:	andeq	r1, r1, r8, lsr r4
   31188:	andeq	r1, r1, r8, ror #31
   3118c:	cmp	r0, #0
   31190:	bne	311bc <flatcc_json_parser_table_as_root@@Base+0x127c>
   31194:	ldr	r3, [pc, #68]	; 311e0 <flatcc_json_parser_table_as_root@@Base+0x12a0>
   31198:	mov	r2, #5
   3119c:	add	r3, pc, r3
   311a0:	add	ip, r3, #256	; 0x100
   311a4:	ldr	r0, [r3, #256]	; 0x100
   311a8:	ldrh	r3, [ip, #4]
   311ac:	str	r0, [r1]
   311b0:	mov	r0, r2
   311b4:	strh	r3, [r1, #4]
   311b8:	bx	lr
   311bc:	ldr	r3, [pc, #32]	; 311e4 <flatcc_json_parser_table_as_root@@Base+0x12a4>
   311c0:	mov	r2, #4
   311c4:	add	r3, pc, r3
   311c8:	ldrb	ip, [r3, #252]	; 0xfc
   311cc:	ldr	r0, [r3, #248]	; 0xf8
   311d0:	strb	ip, [r1, #4]
   311d4:	str	r0, [r1]
   311d8:	mov	r0, r2
   311dc:	bx	lr
   311e0:	andeq	r1, r1, r4, lsl #17
   311e4:	andeq	r1, r1, ip, asr r8
   311e8:	push	{r4, r5, lr}
   311ec:	sub	sp, sp, #12
   311f0:	cmp	r1, #0
   311f4:	cmpne	r2, #7
   311f8:	mov	r2, #0
   311fc:	mov	r5, r0
   31200:	str	r2, [sp, #4]
   31204:	bls	31244 <flatcc_json_parser_table_as_root@@Base+0x1304>
   31208:	cmp	r3, #0
   3120c:	beq	31238 <flatcc_json_parser_table_as_root@@Base+0x12f8>
   31210:	mov	r2, #4
   31214:	mov	r4, r1
   31218:	add	r0, sp, r2
   3121c:	mov	r1, r3
   31220:	bl	145c8 <strncpy@plt>
   31224:	ldr	r2, [r4, #4]
   31228:	ldr	r3, [sp, #4]
   3122c:	cmp	r2, r3
   31230:	cmpne	r3, #0
   31234:	bne	31278 <flatcc_json_parser_table_as_root@@Base+0x1338>
   31238:	mov	r0, #1
   3123c:	add	sp, sp, #12
   31240:	pop	{r4, r5, pc}
   31244:	ldr	r3, [r0, #36]	; 0x24
   31248:	ldr	r1, [pc, #92]	; 312ac <flatcc_json_parser_table_as_root@@Base+0x136c>
   3124c:	cmp	r3, r2
   31250:	moveq	r3, #1
   31254:	streq	r3, [r0, #36]	; 0x24
   31258:	ldr	r3, [pc, #80]	; 312b0 <flatcc_json_parser_table_as_root@@Base+0x1370>
   3125c:	ldr	r0, [pc, #80]	; 312b4 <flatcc_json_parser_table_as_root@@Base+0x1374>
   31260:	add	r3, pc, r3
   31264:	ldr	r2, [pc, #76]	; 312b8 <flatcc_json_parser_table_as_root@@Base+0x1378>
   31268:	add	r3, r3, #264	; 0x108
   3126c:	add	r1, pc, r1
   31270:	add	r0, pc, r0
   31274:	bl	14610 <__assert_fail@plt>
   31278:	ldr	r3, [r5, #36]	; 0x24
   3127c:	ldr	r1, [pc, #56]	; 312bc <flatcc_json_parser_table_as_root@@Base+0x137c>
   31280:	cmp	r3, #0
   31284:	moveq	r3, #1
   31288:	streq	r3, [r5, #36]	; 0x24
   3128c:	ldr	r3, [pc, #44]	; 312c0 <flatcc_json_parser_table_as_root@@Base+0x1380>
   31290:	ldr	r0, [pc, #44]	; 312c4 <flatcc_json_parser_table_as_root@@Base+0x1384>
   31294:	add	r3, pc, r3
   31298:	ldr	r2, [pc, #40]	; 312c8 <flatcc_json_parser_table_as_root@@Base+0x1388>
   3129c:	add	r3, r3, #264	; 0x108
   312a0:	add	r1, pc, r1
   312a4:	add	r0, pc, r0
   312a8:	bl	14610 <__assert_fail@plt>
   312ac:	andeq	r1, r1, r0, lsl pc
   312b0:	andeq	r1, r1, r0, asr #15
   312b4:	andeq	r1, r1, r0, ror pc
   312b8:	strdeq	r0, [r0], -fp
   312bc:	ldrdeq	r1, [r1], -ip
   312c0:	andeq	r1, r1, ip, lsl #15
   312c4:	andeq	r1, r1, ip, asr pc
   312c8:	andeq	r0, r0, r4, lsl #8
   312cc:	cmp	r2, #0
   312d0:	beq	313fc <flatcc_json_parser_table_as_root@@Base+0x14bc>
   312d4:	bics	ip, r3, #224	; 0xe0
   312d8:	push	{r4, r5, r6, r7, lr}
   312dc:	ldr	r6, [r2]
   312e0:	beq	313f0 <flatcc_json_parser_table_as_root@@Base+0x14b0>
   312e4:	cmp	ip, #1
   312e8:	movne	r1, #0
   312ec:	movne	r3, #3
   312f0:	bne	313e4 <flatcc_json_parser_table_as_root@@Base+0x14a4>
   312f4:	ldr	r5, [pc, #340]	; 31450 <flatcc_json_parser_table_as_root@@Base+0x1510>
   312f8:	add	r5, pc, r5
   312fc:	cmp	r6, #2
   31300:	bls	3137c <flatcc_json_parser_table_as_root@@Base+0x143c>
   31304:	add	r4, r0, #4
   31308:	add	ip, r1, #3
   3130c:	ldrb	r0, [ip, #-3]
   31310:	sub	r6, r6, #3
   31314:	cmp	r6, #2
   31318:	mov	r1, ip
   3131c:	ldrb	lr, [r5, r0, lsr #2]
   31320:	add	ip, ip, #3
   31324:	mov	r0, r4
   31328:	strb	lr, [r4, #-4]
   3132c:	ldrb	lr, [ip, #-6]
   31330:	ldrb	r7, [ip, #-5]
   31334:	add	r4, r4, #4
   31338:	lsl	lr, lr, #4
   3133c:	and	lr, lr, #48	; 0x30
   31340:	orr	lr, lr, r7, lsr #4
   31344:	ldrb	lr, [r5, lr]
   31348:	strb	lr, [r4, #-7]
   3134c:	ldrb	lr, [ip, #-5]
   31350:	ldrb	r7, [ip, #-4]
   31354:	lsl	lr, lr, #2
   31358:	and	lr, lr, #60	; 0x3c
   3135c:	orr	lr, lr, r7, lsr #6
   31360:	ldrb	lr, [r5, lr]
   31364:	strb	lr, [r4, #-6]
   31368:	ldrb	lr, [ip, #-4]
   3136c:	and	lr, lr, #63	; 0x3f
   31370:	ldrb	lr, [r5, lr]
   31374:	strb	lr, [r4, #-5]
   31378:	bhi	3130c <flatcc_json_parser_table_as_root@@Base+0x13cc>
   3137c:	cmp	r6, #1
   31380:	and	r3, r3, #128	; 0x80
   31384:	beq	31414 <flatcc_json_parser_table_as_root@@Base+0x14d4>
   31388:	cmp	r6, #2
   3138c:	bne	31408 <flatcc_json_parser_table_as_root@@Base+0x14c8>
   31390:	ldrb	ip, [r1]
   31394:	cmp	r3, #0
   31398:	ldrb	ip, [r5, ip, lsr #2]
   3139c:	strb	ip, [r0]
   313a0:	ldrb	ip, [r1]
   313a4:	ldrb	lr, [r1, #1]
   313a8:	lsl	ip, ip, #4
   313ac:	and	ip, ip, #48	; 0x30
   313b0:	orr	ip, ip, lr, lsr #4
   313b4:	ldrb	ip, [r5, ip]
   313b8:	strb	ip, [r0, #1]
   313bc:	ldrb	r1, [r1, #1]
   313c0:	lsl	r1, r1, #2
   313c4:	and	r1, r1, #60	; 0x3c
   313c8:	ldrb	r1, [r5, r1]
   313cc:	strb	r1, [r0, #2]
   313d0:	beq	31448 <flatcc_json_parser_table_as_root@@Base+0x1508>
   313d4:	mov	r3, #61	; 0x3d
   313d8:	strb	r3, [r0, #3]
   313dc:	ldr	r1, [r2]
   313e0:	mov	r3, #0
   313e4:	str	r1, [r2]
   313e8:	mov	r0, r3
   313ec:	pop	{r4, r5, r6, r7, pc}
   313f0:	ldr	r5, [pc, #92]	; 31454 <flatcc_json_parser_table_as_root@@Base+0x1514>
   313f4:	add	r5, pc, r5
   313f8:	b	312fc <flatcc_json_parser_table_as_root@@Base+0x13bc>
   313fc:	mov	r3, #2
   31400:	mov	r0, r3
   31404:	bx	lr
   31408:	ldr	r1, [r2]
   3140c:	mov	r3, #0
   31410:	b	313e4 <flatcc_json_parser_table_as_root@@Base+0x14a4>
   31414:	ldrb	ip, [r1]
   31418:	cmp	r3, #0
   3141c:	movne	r3, #61	; 0x3d
   31420:	ldrb	ip, [r5, ip, lsr #2]
   31424:	strb	ip, [r0]
   31428:	ldrb	r1, [r1]
   3142c:	strbne	r3, [r0, #2]
   31430:	strbne	r3, [r0, #3]
   31434:	movne	r3, #0
   31438:	lsl	r1, r1, #4
   3143c:	and	r1, r1, #48	; 0x30
   31440:	ldrb	r1, [r5, r1]
   31444:	strb	r1, [r0, #1]
   31448:	ldr	r1, [r2]
   3144c:	b	313e4 <flatcc_json_parser_table_as_root@@Base+0x14a4>
   31450:	andeq	r1, r1, r8, ror #30
   31454:	andeq	r1, r1, r8, lsr #28
   31458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3145c:	sub	sp, sp, #164	; 0xa4
   31460:	subs	r1, r0, #0
   31464:	vstr	d0, [sp, #88]	; 0x58
   31468:	str	r1, [sp, #120]	; 0x78
   3146c:	beq	3202c <flatcc_json_parser_table_as_root@@Base+0x20ec>
   31470:	vmov	r2, r3, d0
   31474:	vmov	r4, s0
   31478:	adds	r6, r2, r2
   3147c:	adc	r7, r3, r3
   31480:	mov	r5, r3
   31484:	ldr	r3, [pc, #1332]	; 319c0 <flatcc_json_parser_table_as_root@@Base+0x1a80>
   31488:	mov	r2, #0
   3148c:	cmp	r7, r3
   31490:	cmpeq	r6, r2
   31494:	bhi	31d9c <flatcc_json_parser_table_as_root@@Base+0x1e5c>
   31498:	cmp	r4, #0
   3149c:	sbcs	r3, r5, #0
   314a0:	movlt	r3, #45	; 0x2d
   314a4:	vldrlt	d7, [sp, #88]	; 0x58
   314a8:	ldrlt	r2, [sp, #120]	; 0x78
   314ac:	ldrge	r3, [sp, #120]	; 0x78
   314b0:	addlt	r5, r5, #-2147483648	; 0x80000000
   314b4:	vneglt.f64	d7, d7
   314b8:	strblt	r3, [r2]
   314bc:	addlt	r3, r2, #1
   314c0:	str	r3, [sp, #84]	; 0x54
   314c4:	vstrlt	d7, [sp, #88]	; 0x58
   314c8:	orrs	r3, r4, r5
   314cc:	beq	31d74 <flatcc_json_parser_table_as_root@@Base+0x1e34>
   314d0:	ldr	r3, [pc, #1260]	; 319c4 <flatcc_json_parser_table_as_root@@Base+0x1a84>
   314d4:	mov	r2, #0
   314d8:	cmp	r5, r3
   314dc:	cmpeq	r4, r2
   314e0:	beq	31de0 <flatcc_json_parser_table_as_root@@Base+0x1ea0>
   314e4:	ldrd	sl, [sp, #88]	; 0x58
   314e8:	and	r0, sl, r2
   314ec:	and	r1, fp, r3
   314f0:	orrs	r3, r0, r1
   314f4:	strd	r0, [sp, #40]	; 0x28
   314f8:	beq	31db8 <flatcc_json_parser_table_as_root@@Base+0x1e78>
   314fc:	ldr	r6, [pc, #1220]	; 319c8 <flatcc_json_parser_table_as_root@@Base+0x1a88>
   31500:	mvn	r2, #0
   31504:	ldr	r3, [pc, #1232]	; 319dc <flatcc_json_parser_table_as_root@@Base+0x1a9c>
   31508:	and	r6, r6, fp, lsr #20
   3150c:	and	r2, r2, sl
   31510:	sub	r6, r6, #1072	; 0x430
   31514:	and	r3, r3, fp
   31518:	adds	r8, r2, #0
   3151c:	sub	r1, r6, #3
   31520:	adc	r9, r3, #1048576	; 0x100000
   31524:	sub	r6, r6, #4
   31528:	str	r1, [sp, #32]
   3152c:	ldr	ip, [sp, #32]
   31530:	mov	r2, r8
   31534:	mov	r3, r9
   31538:	lsl	r1, r3, #10
   3153c:	orr	r1, r1, r2, lsr #22
   31540:	lsl	r0, r2, #10
   31544:	mov	r3, r1
   31548:	ldr	r1, [pc, #1148]	; 319cc <flatcc_json_parser_table_as_root@@Base+0x1a8c>
   3154c:	mov	r2, r0
   31550:	mov	r0, #0
   31554:	and	r0, r0, r2
   31558:	and	r1, r1, r3
   3155c:	orrs	r1, r0, r1
   31560:	sub	ip, ip, #10
   31564:	beq	31538 <flatcc_json_parser_table_as_root@@Base+0x15f8>
   31568:	cmp	r2, #0
   3156c:	sbcs	r1, r3, #0
   31570:	blt	3158c <flatcc_json_parser_table_as_root@@Base+0x164c>
   31574:	adds	r2, r2, r2
   31578:	adc	r3, r3, r3
   3157c:	cmp	r2, #0
   31580:	sbcs	r1, r3, #0
   31584:	sub	ip, ip, #1
   31588:	bge	31574 <flatcc_json_parser_table_as_root@@Base+0x1634>
   3158c:	adds	r0, r8, r8
   31590:	adc	r1, r9, r9
   31594:	sub	r7, r6, #10
   31598:	strd	r0, [sp, #48]	; 0x30
   3159c:	adds	r0, r0, #1
   315a0:	adc	r1, r1, #0
   315a4:	lsl	lr, r1, #10
   315a8:	lsl	r4, r0, #10
   315ac:	ldr	r5, [pc, #1048]	; 319cc <flatcc_json_parser_table_as_root@@Base+0x1a8c>
   315b0:	orr	lr, lr, r0, lsr #22
   315b4:	mov	r0, r4
   315b8:	mov	r4, #0
   315bc:	and	r5, r5, lr
   315c0:	and	r4, r4, r0
   315c4:	orrs	r4, r4, r5
   315c8:	mov	r1, lr
   315cc:	mov	lr, r7
   315d0:	sub	r7, r7, #10
   315d4:	beq	315a4 <flatcc_json_parser_table_as_root@@Base+0x1664>
   315d8:	mov	r5, r1
   315dc:	mov	r4, r0
   315e0:	cmp	r0, #0
   315e4:	sbcs	r1, r1, #0
   315e8:	strd	r4, [sp, #64]	; 0x40
   315ec:	blt	31610 <flatcc_json_parser_table_as_root@@Base+0x16d0>
   315f0:	mov	r1, r5
   315f4:	adds	r0, r0, r0
   315f8:	adc	r1, r1, r1
   315fc:	cmp	r0, #0
   31600:	sbcs	r4, r1, #0
   31604:	sub	lr, lr, #1
   31608:	bge	315f4 <flatcc_json_parser_table_as_root@@Base+0x16b4>
   3160c:	strd	r0, [sp, #64]	; 0x40
   31610:	vldr	d7, [sp, #88]	; 0x58
   31614:	vcmpe.f64	d7, #0.0
   31618:	vmrs	APSR_nzcv, fpscr
   3161c:	ble	32008 <flatcc_json_parser_table_as_root@@Base+0x20c8>
   31620:	vldr	d7, [pc, #896]	; 319a8 <flatcc_json_parser_table_as_root@@Base+0x1a68>
   31624:	vldr	d6, [sp, #88]	; 0x58
   31628:	vcmpe.f64	d6, d7
   3162c:	vmrs	APSR_nzcv, fpscr
   31630:	bhi	32008 <flatcc_json_parser_table_as_root@@Base+0x20c8>
   31634:	ldr	r5, [pc, #928]	; 319dc <flatcc_json_parser_table_as_root@@Base+0x1a9c>
   31638:	mvn	r4, #0
   3163c:	and	r5, r5, fp
   31640:	and	r4, r4, sl
   31644:	orr	r4, r4, r5
   31648:	ldr	r5, [sp, #44]	; 0x2c
   3164c:	adds	r5, r5, #0
   31650:	movne	r5, #1
   31654:	cmp	r4, #0
   31658:	movne	r5, #0
   3165c:	cmp	r5, #0
   31660:	bne	31f78 <flatcc_json_parser_table_as_root@@Base+0x2038>
   31664:	ldrd	r4, [sp, #48]	; 0x30
   31668:	subs	r4, r4, #1
   3166c:	sbc	r5, r5, #0
   31670:	mvn	r7, #60	; 0x3c
   31674:	sub	r7, r7, ip
   31678:	vldr	d5, [pc, #816]	; 319b0 <flatcc_json_parser_table_as_root@@Base+0x1a70>
   3167c:	vmov	s15, r7
   31680:	vldr	d6, [pc, #816]	; 319b8 <flatcc_json_parser_table_as_root@@Base+0x1a78>
   31684:	sub	r6, r6, lr
   31688:	sub	r7, r6, #32
   3168c:	vcvt.f64.s32	d7, s15
   31690:	lsl	fp, r5, r6
   31694:	rsb	r5, r6, #32
   31698:	orr	fp, fp, r4, lsl r7
   3169c:	lsl	sl, r4, r6
   316a0:	vmul.f64	d7, d7, d5
   316a4:	orr	fp, fp, r4, lsr r5
   316a8:	vcmpe.f64	d7, d6
   316ac:	vcvt.s32.f64	s11, d7
   316b0:	vmrs	APSR_nzcv, fpscr
   316b4:	vmov	r4, s11
   316b8:	bmi	316d0 <flatcc_json_parser_table_as_root@@Base+0x1790>
   316bc:	vcvt.f64.s32	d5, s11
   316c0:	vsub.f64	d7, d7, d5
   316c4:	vcmp.f64	d7, d6
   316c8:	vmrs	APSR_nzcv, fpscr
   316cc:	addne	r4, r4, #1
   316d0:	add	r4, r4, #344	; 0x158
   316d4:	adds	r8, r4, #3
   316d8:	addmi	r8, r4, #10
   316dc:	ldr	r1, [pc, #748]	; 319d0 <flatcc_json_parser_table_as_root@@Base+0x1a90>
   316e0:	asr	r8, r8, #3
   316e4:	add	r8, r8, #1
   316e8:	add	r1, pc, r1
   316ec:	mov	r6, sl
   316f0:	mov	r7, #0
   316f4:	lsl	r0, r8, #4
   316f8:	add	r4, r1, #320	; 0x140
   316fc:	strd	r6, [sp, #72]	; 0x48
   31700:	add	r4, r4, r0
   31704:	ldrd	r6, [sp, #64]	; 0x40
   31708:	ldrd	r4, [r4, #-8]
   3170c:	mov	r7, #0
   31710:	mov	r8, r6
   31714:	mov	r9, r7
   31718:	mov	r6, r2
   3171c:	mov	r7, #0
   31720:	strd	r8, [sp, #56]	; 0x38
   31724:	strd	r6, [sp, #48]	; 0x30
   31728:	mov	r6, r4
   3172c:	mov	r7, #0
   31730:	strd	r4, [sp, #40]	; 0x28
   31734:	strd	r6, [sp, #32]
   31738:	ldrd	r4, [sp, #72]	; 0x48
   3173c:	str	r0, [sp, #124]	; 0x7c
   31740:	ldr	r7, [sp, #60]	; 0x3c
   31744:	ldr	r0, [sp, #32]
   31748:	mov	r6, r4
   3174c:	str	r1, [sp, #140]	; 0x8c
   31750:	mul	r2, r0, r5
   31754:	mul	r0, r0, r7
   31758:	mov	r7, r6
   3175c:	ldr	r6, [sp, #36]	; 0x24
   31760:	mov	r5, r4
   31764:	ldr	r4, [sp, #32]
   31768:	mla	r2, r7, r6, r2
   3176c:	ldr	r7, [sp, #56]	; 0x38
   31770:	umull	r4, r5, r4, r5
   31774:	mla	r7, r7, r6, r0
   31778:	ldr	r0, [sp, #32]
   3177c:	add	r8, r2, r5
   31780:	str	r7, [sp, #136]	; 0x88
   31784:	umull	r4, r5, r0, fp
   31788:	umull	r6, r7, r3, r0
   3178c:	strd	r4, [sp, #112]	; 0x70
   31790:	ldrd	r4, [sp, #40]	; 0x28
   31794:	strd	r6, [sp, #104]	; 0x68
   31798:	ldr	r7, [sp, #48]	; 0x30
   3179c:	ldr	r0, [sp, #36]	; 0x24
   317a0:	ldr	r4, [sp, #36]	; 0x24
   317a4:	umull	r6, r7, r7, r5
   317a8:	add	r2, r1, #312	; 0x138
   317ac:	strd	r6, [sp, #96]	; 0x60
   317b0:	ldr	r7, [sp, #116]	; 0x74
   317b4:	ldr	r1, [sp, #32]
   317b8:	mla	r0, fp, r0, r7
   317bc:	umull	sl, fp, r5, fp
   317c0:	mov	r6, sl
   317c4:	mov	r7, fp
   317c8:	ldrd	sl, [sp, #48]	; 0x30
   317cc:	mul	r5, sl, r4
   317d0:	mov	sl, r0
   317d4:	mla	r5, r1, fp, r5
   317d8:	ldr	r1, [sp, #124]	; 0x7c
   317dc:	str	r5, [sp, #128]	; 0x80
   317e0:	add	r1, r2, r1
   317e4:	str	r1, [sp, #124]	; 0x7c
   317e8:	ldr	r1, [sp, #112]	; 0x70
   317ec:	mov	r2, #0
   317f0:	adds	r8, r8, r1
   317f4:	ldr	r1, [sp, #32]
   317f8:	ldr	r0, [sp, #68]	; 0x44
   317fc:	ldr	r4, [sp, #56]	; 0x38
   31800:	adc	r9, r2, #0
   31804:	umull	r0, r1, r1, r0
   31808:	adds	r8, r8, #-2147483648	; 0x80000000
   3180c:	strd	r0, [sp, #112]	; 0x70
   31810:	ldr	r1, [sp, #32]
   31814:	adc	r9, r9, #0
   31818:	ldr	r0, [sp, #44]	; 0x2c
   3181c:	umull	r4, r5, r1, r4
   31820:	ldr	r1, [sp, #44]	; 0x2c
   31824:	strd	r4, [sp, #144]	; 0x90
   31828:	subs	r4, r6, #1
   3182c:	sbc	r5, r7, #0
   31830:	ldrd	r6, [sp, #72]	; 0x48
   31834:	adds	sl, sl, r4
   31838:	adc	fp, r2, r5
   3183c:	umull	r4, r5, r1, r6
   31840:	mla	r0, r0, r7, r5
   31844:	adds	r8, r8, r4
   31848:	adc	r9, r9, #0
   3184c:	adds	r0, sl, r0
   31850:	adc	r1, fp, r2
   31854:	ldrd	r4, [sp, #64]	; 0x40
   31858:	mov	r7, r1
   3185c:	ldr	r1, [sp, #36]	; 0x24
   31860:	mov	r6, r0
   31864:	ldr	r0, [sp, #116]	; 0x74
   31868:	mov	sl, r9
   3186c:	mla	r1, r5, r1, r0
   31870:	ldrd	r8, [sp, #40]	; 0x28
   31874:	str	r1, [sp, #72]	; 0x48
   31878:	umull	r0, r1, r9, r5
   3187c:	strd	r0, [sp, #40]	; 0x28
   31880:	ldrd	r0, [sp, #56]	; 0x38
   31884:	umull	r4, r5, r9, r0
   31888:	mov	r0, r1
   3188c:	strd	r4, [sp, #56]	; 0x38
   31890:	mla	r4, r9, r0, r5
   31894:	ldrd	r0, [sp, #40]	; 0x28
   31898:	ldr	r5, [sp, #48]	; 0x30
   3189c:	strd	r8, [sp, #40]	; 0x28
   318a0:	adds	r0, r0, #1
   318a4:	adc	r1, r1, #0
   318a8:	adds	r6, r6, sl
   318ac:	adc	r7, r7, r2
   318b0:	ldr	sl, [sp, #72]	; 0x48
   318b4:	strd	r6, [sp, #64]	; 0x40
   318b8:	adds	sl, sl, r0
   318bc:	ldr	r6, [sp, #36]	; 0x24
   318c0:	mov	r0, r4
   318c4:	ldr	r4, [sp, #32]
   318c8:	ldr	r7, [sp, #108]	; 0x6c
   318cc:	mov	r8, r9
   318d0:	umull	r4, r5, r5, r4
   318d4:	mla	r4, r3, r6, r7
   318d8:	ldr	r7, [sp, #52]	; 0x34
   318dc:	ldr	r9, [sp, #100]	; 0x64
   318e0:	adc	fp, r2, r1
   318e4:	adds	r6, sl, r0
   318e8:	mla	r8, r8, r7, r9
   318ec:	ldr	sl, [sp, #148]	; 0x94
   318f0:	adc	r7, fp, r2
   318f4:	ldr	r9, [sp, #136]	; 0x88
   318f8:	strd	r6, [sp, #32]
   318fc:	add	r6, r9, sl
   31900:	ldr	sl, [sp, #112]	; 0x70
   31904:	ldr	r9, [sp, #128]	; 0x80
   31908:	adds	r6, r6, sl
   3190c:	add	r0, r9, r5
   31910:	ldr	r5, [sp, #104]	; 0x68
   31914:	adc	r7, r2, #0
   31918:	adds	r6, r6, #-2147483648	; 0x80000000
   3191c:	mov	sl, r4
   31920:	adc	r7, r7, #0
   31924:	ldr	r4, [sp, #56]	; 0x38
   31928:	adds	r0, r0, r5
   3192c:	adc	r1, r2, #0
   31930:	adds	sl, sl, r8
   31934:	adc	fp, r2, r2
   31938:	adds	r6, r6, r4
   3193c:	ldr	r4, [sp, #44]	; 0x2c
   31940:	adc	r7, r7, #0
   31944:	adds	r0, r0, #-2147483648	; 0x80000000
   31948:	umlal	sl, fp, r4, r3
   3194c:	ldr	r3, [sp, #124]	; 0x7c
   31950:	ldr	r4, [sp, #96]	; 0x60
   31954:	mov	r8, r7
   31958:	adc	r1, r1, #0
   3195c:	ldrd	r6, [sp, #32]
   31960:	adds	r0, r0, r4
   31964:	ldrsh	r3, [r3, #8]
   31968:	adc	r1, r1, #0
   3196c:	mov	r4, r1
   31970:	ldrd	r0, [sp, #64]	; 0x40
   31974:	adds	r6, r6, r8
   31978:	adc	r7, r7, r2
   3197c:	mov	r8, r6
   31980:	add	ip, r3, ip
   31984:	add	lr, lr, r3
   31988:	ldr	r3, [sp, #124]	; 0x7c
   3198c:	subs	r6, r8, r0
   31990:	mov	r9, r7
   31994:	sbc	r7, r9, r1
   31998:	ldrsh	r3, [r3, #10]
   3199c:	strd	r6, [sp, #32]
   319a0:	b	31a04 <flatcc_json_parser_table_as_root@@Base+0x1ac4>
   319a4:	nop			; (mov r0, r0)
   319a8:			; <UNDEFINED> instruction: 0xffffffff
   319ac:	svcvc	0x00efffff
   319b0:			; <UNDEFINED> instruction: 0x509f79fe
   319b4:	svccc	0x00d34413
	...
   319c0:			; <UNDEFINED> instruction: 0xffe00000
   319c4:	svcvc	0x00f00000	; IMB
   319c8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   319cc:			; <UNDEFINED> instruction: 0xffc00000
   319d0:	andeq	r1, r1, r8, lsr r3
   319d4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   319d8:	andeq	r1, r1, r0, ror r5
   319dc:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   319e0:			; <UNDEFINED> instruction: 0xfffffbce
   319e4:			; <UNDEFINED> instruction: 0xfffffbcd
   319e8:	strdeq	r1, [r1], -r4
   319ec:	andeq	r0, r1, ip, lsl #20
   319f0:	andeq	r1, r1, r4, lsl #5
   319f4:	andeq	r1, r1, r4, lsl #6
   319f8:	andeq	r0, r1, r8, ror #19
   319fc:	andeq	r1, r1, r0, ror #4
   31a00:	andeq	r1, r1, ip, asr #5
   31a04:	adds	r6, r4, sl
   31a08:	adc	r7, r2, fp
   31a0c:	cmp	r1, r9
   31a10:	cmpeq	r0, r8
   31a14:	str	r3, [sp, #144]	; 0x90
   31a18:	add	r0, lr, #64	; 0x40
   31a1c:	add	r3, ip, #64	; 0x40
   31a20:	strd	r8, [sp, #112]	; 0x70
   31a24:	strd	r6, [sp, #128]	; 0x80
   31a28:	str	r0, [sp, #136]	; 0x88
   31a2c:	str	r3, [sp, #124]	; 0x7c
   31a30:	bhi	32004 <flatcc_json_parser_table_as_root@@Base+0x20c4>
   31a34:	add	r1, ip, #129	; 0x81
   31a38:	mvn	r8, #63	; 0x3f
   31a3c:	add	r3, r1, r1, lsl #4
   31a40:	sub	r8, r8, ip
   31a44:	add	r1, r1, r3, lsl #3
   31a48:	mov	r0, #1
   31a4c:	sub	ip, r8, #32
   31a50:	add	r1, r1, r1, lsl #3
   31a54:	mov	r4, #0
   31a58:	mov	r5, #0
   31a5c:	asr	r1, r1, #12
   31a60:	lsl	r3, r0, ip
   31a64:	strd	r4, [sp, #96]	; 0x60
   31a68:	ldr	r9, [sp, #140]	; 0x8c
   31a6c:	add	r4, r1, r0
   31a70:	str	r3, [sp, #100]	; 0x64
   31a74:	ldrd	sl, [sp, #112]	; 0x70
   31a78:	rsb	lr, r8, #32
   31a7c:	add	r3, r9, r4, lsl #2
   31a80:	ldr	r2, [sp, #100]	; 0x64
   31a84:	lsr	r5, sl, r8
   31a88:	orr	r2, r2, r0, lsr lr
   31a8c:	ldr	sl, [r3, #1704]	; 0x6a8
   31a90:	lsl	r3, r0, r8
   31a94:	str	r2, [sp, #100]	; 0x64
   31a98:	str	r3, [sp, #96]	; 0x60
   31a9c:	ldrd	r6, [sp, #96]	; 0x60
   31aa0:	ldrd	r2, [sp, #112]	; 0x70
   31aa4:	orr	r5, r5, fp, lsl lr
   31aa8:	subs	r6, r6, #1
   31aac:	sbc	r7, r7, #0
   31ab0:	orr	r5, r5, r3, lsr ip
   31ab4:	and	r2, r2, r6
   31ab8:	and	r3, r3, r7
   31abc:	cmp	r5, sl
   31ac0:	strd	r2, [sp, #56]	; 0x38
   31ac4:	addcc	r3, r9, r1, lsl #2
   31ac8:	movcc	r4, r1
   31acc:	ldrcc	sl, [r3, #1704]	; 0x6a8
   31ad0:	cmp	r4, #0
   31ad4:	str	ip, [sp, #40]	; 0x28
   31ad8:	str	lr, [sp, #48]	; 0x30
   31adc:	strd	r6, [sp, #104]	; 0x68
   31ae0:	ble	31fec <flatcc_json_parser_table_as_root@@Base+0x20ac>
   31ae4:	mov	r1, sl
   31ae8:	mov	r0, r5
   31aec:	bl	3d2e0 <flatcc_json_printer_clear@@Base+0x38>
   31af0:	ldr	r3, [sp, #84]	; 0x54
   31af4:	mov	r1, sl
   31af8:	sub	r4, r4, #1
   31afc:	add	r0, r0, #48	; 0x30
   31b00:	strb	r0, [r3]
   31b04:	mov	r0, r5
   31b08:	bl	3d4cc <flatcc_json_printer_clear@@Base+0x224>
   31b0c:	ldr	r2, [sp, #40]	; 0x28
   31b10:	ldrd	r6, [sp, #56]	; 0x38
   31b14:	mov	r3, #0
   31b18:	mov	fp, r1
   31b1c:	lsl	r1, r1, r2
   31b20:	ldr	r2, [sp, #48]	; 0x30
   31b24:	lsl	r0, fp, r8
   31b28:	orr	r1, r1, fp, lsr r2
   31b2c:	adds	r6, r6, r0
   31b30:	adc	r7, r7, r1
   31b34:	mov	r0, r6
   31b38:	mov	r1, r7
   31b3c:	ldrd	r6, [sp, #32]
   31b40:	strd	r0, [sp, #72]	; 0x48
   31b44:	cmp	r1, r7
   31b48:	cmpeq	r0, r6
   31b4c:	bcc	31ff4 <flatcc_json_parser_table_as_root@@Base+0x20b4>
   31b50:	ldr	r9, [sp, #84]	; 0x54
   31b54:	ldrd	r6, [sp, #32]
   31b58:	str	r3, [sp, #72]	; 0x48
   31b5c:	mov	r5, #1
   31b60:	str	r8, [sp, #64]	; 0x40
   31b64:	str	r9, [sp, #32]
   31b68:	b	31bd0 <flatcc_json_parser_table_as_root@@Base+0x1c90>
   31b6c:	mov	r1, sl
   31b70:	mov	r0, fp
   31b74:	bl	3d2e0 <flatcc_json_printer_clear@@Base+0x38>
   31b78:	ldr	r3, [sp, #32]
   31b7c:	mov	r1, sl
   31b80:	add	r5, r5, #1
   31b84:	sub	r4, r4, #1
   31b88:	add	r0, r0, #48	; 0x30
   31b8c:	strb	r0, [r3, #1]!
   31b90:	mov	r0, fp
   31b94:	str	r3, [sp, #32]
   31b98:	bl	3d4cc <flatcc_json_printer_clear@@Base+0x224>
   31b9c:	ldr	r3, [sp, #40]	; 0x28
   31ba0:	lsl	r9, r1, r3
   31ba4:	ldr	r3, [sp, #48]	; 0x30
   31ba8:	mov	fp, r1
   31bac:	orr	r9, r9, r1, lsr r3
   31bb0:	ldr	r3, [sp, #64]	; 0x40
   31bb4:	lsl	r8, r1, r3
   31bb8:	ldrd	r0, [sp, #56]	; 0x38
   31bbc:	adds	r0, r0, r8
   31bc0:	adc	r1, r1, r9
   31bc4:	cmp	r7, r1
   31bc8:	cmpeq	r6, r0
   31bcc:	bhi	31e18 <flatcc_json_parser_table_as_root@@Base+0x1ed8>
   31bd0:	ldr	r3, [pc, #-516]	; 319d4 <flatcc_json_parser_table_as_root@@Base+0x1a94>
   31bd4:	cmp	r4, #0
   31bd8:	umull	r3, sl, r3, sl
   31bdc:	lsr	sl, sl, #3
   31be0:	bne	31b6c <flatcc_json_parser_table_as_root@@Base+0x1c2c>
   31be4:	ldr	r8, [sp, #64]	; 0x40
   31be8:	strd	r6, [sp, #32]
   31bec:	ldr	r3, [sp, #84]	; 0x54
   31bf0:	str	r8, [sp, #64]	; 0x40
   31bf4:	add	r9, r3, r5
   31bf8:	mov	r0, r9
   31bfc:	ldrd	r6, [sp, #32]
   31c00:	ldrd	r8, [sp, #56]	; 0x38
   31c04:	mov	r2, #1
   31c08:	mov	r3, #0
   31c0c:	mov	lr, #10
   31c10:	umull	sl, fp, r8, lr
   31c14:	mul	r1, lr, r7
   31c18:	ldr	ip, [sp, #64]	; 0x40
   31c1c:	mla	fp, lr, r9, fp
   31c20:	str	r1, [sp, #32]
   31c24:	lsr	r1, sl, ip
   31c28:	ldr	ip, [sp, #48]	; 0x30
   31c2c:	ldr	r8, [sp, #40]	; 0x28
   31c30:	umull	r6, r7, r6, lr
   31c34:	orr	r1, r1, fp, lsl ip
   31c38:	orr	r1, r1, fp, lsr r8
   31c3c:	ldrd	r8, [sp, #104]	; 0x68
   31c40:	mul	ip, lr, r3
   31c44:	and	r8, r8, sl
   31c48:	ldr	sl, [sp, #32]
   31c4c:	umull	r2, r3, r2, lr
   31c50:	and	r9, r9, fp
   31c54:	add	r7, sl, r7
   31c58:	cmp	r7, r9
   31c5c:	add	r1, r1, #48	; 0x30
   31c60:	cmpeq	r6, r8
   31c64:	add	r5, r5, #1
   31c68:	sub	r4, r4, #1
   31c6c:	strb	r1, [r0], #1
   31c70:	add	r3, ip, r3
   31c74:	bls	31c10 <flatcc_json_parser_table_as_root@@Base+0x1cd0>
   31c78:	ldrd	sl, [sp, #128]	; 0x80
   31c7c:	strd	r6, [sp, #32]
   31c80:	ldrd	r6, [sp, #112]	; 0x70
   31c84:	ldr	ip, [sp, #124]	; 0x7c
   31c88:	subs	r0, r6, sl
   31c8c:	sbc	r1, r7, fp
   31c90:	cmp	fp, r7
   31c94:	cmpeq	sl, r6
   31c98:	ldr	r6, [sp, #136]	; 0x88
   31c9c:	movhi	lr, #1
   31ca0:	movls	lr, #0
   31ca4:	cmp	ip, r6
   31ca8:	orrne	lr, lr, #1
   31cac:	cmp	lr, #0
   31cb0:	bne	32004 <flatcc_json_parser_table_as_root@@Base+0x20c4>
   31cb4:	mul	r1, r2, r1
   31cb8:	strd	r2, [sp, #24]
   31cbc:	mla	r1, r0, r3, r1
   31cc0:	umull	r2, r3, r2, r0
   31cc4:	ldrd	r6, [sp, #96]	; 0x60
   31cc8:	mov	r0, r8
   31ccc:	add	r3, r1, r3
   31cd0:	mov	r1, r9
   31cd4:	strd	r6, [sp, #16]
   31cd8:	strd	r0, [sp, #8]
   31cdc:	ldrd	r0, [sp, #32]
   31ce0:	strd	r0, [sp]
   31ce4:	mov	r1, r5
   31ce8:	ldr	r0, [sp, #84]	; 0x54
   31cec:	bl	30b18 <flatcc_json_parser_table_as_root@@Base+0xbd8>
   31cf0:	ldr	r3, [sp, #144]	; 0x90
   31cf4:	cmp	r0, #0
   31cf8:	sub	r4, r4, r3
   31cfc:	beq	31f50 <flatcc_json_parser_table_as_root@@Base+0x2010>
   31d00:	cmp	r5, #2
   31d04:	subgt	r3, r5, #1
   31d08:	movle	r3, #1
   31d0c:	cmp	r4, #0
   31d10:	blt	31ea4 <flatcc_json_parser_table_as_root@@Base+0x1f64>
   31d14:	cmp	r4, #2
   31d18:	bgt	31f2c <flatcc_json_parser_table_as_root@@Base+0x1fec>
   31d1c:	cmp	r4, #0
   31d20:	beq	31d54 <flatcc_json_parser_table_as_root@@Base+0x1e14>
   31d24:	sub	r1, r4, #1
   31d28:	ble	31d54 <flatcc_json_parser_table_as_root@@Base+0x1e14>
   31d2c:	ldr	r3, [sp, #84]	; 0x54
   31d30:	add	r4, r4, r5
   31d34:	add	r4, r3, r4
   31d38:	mov	r2, #48	; 0x30
   31d3c:	add	r3, r3, r5
   31d40:	strb	r2, [r3], #1
   31d44:	cmp	r4, r3
   31d48:	bne	31d40 <flatcc_json_parser_table_as_root@@Base+0x1e00>
   31d4c:	add	r5, r5, #1
   31d50:	add	r5, r5, r1
   31d54:	ldr	r2, [sp, #84]	; 0x54
   31d58:	ldr	r3, [sp, #120]	; 0x78
   31d5c:	add	r0, r2, r5
   31d60:	sub	r0, r0, r3
   31d64:	mov	r3, #0
   31d68:	strb	r3, [r2, r5]
   31d6c:	add	sp, sp, #164	; 0xa4
   31d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31d74:	ldr	r1, [sp, #84]	; 0x54
   31d78:	mov	r3, #0
   31d7c:	mov	r0, r1
   31d80:	mov	r2, #48	; 0x30
   31d84:	strb	r2, [r1]
   31d88:	strb	r3, [r0, #1]!
   31d8c:	ldr	r3, [sp, #120]	; 0x78
   31d90:	sub	r0, r0, r3
   31d94:	add	sp, sp, #164	; 0xa4
   31d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31d9c:	vmov	r3, s0
   31da0:	ldr	r1, [pc, #-976]	; 319d8 <flatcc_json_parser_table_as_root@@Base+0x1a98>
   31da4:	mov	r2, r5
   31da8:	add	r1, pc, r1
   31dac:	add	sp, sp, #164	; 0xa4
   31db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31db4:	b	145f8 <sprintf@plt>
   31db8:	ldr	r9, [pc, #-996]	; 319dc <flatcc_json_parser_table_as_root@@Base+0x1a9c>
   31dbc:	mvn	r8, #0
   31dc0:	and	r8, r8, sl
   31dc4:	and	r9, r9, fp
   31dc8:	orrs	r3, r8, r9
   31dcc:	beq	32050 <flatcc_json_parser_table_as_root@@Base+0x2110>
   31dd0:	ldr	r3, [pc, #-1016]	; 319e0 <flatcc_json_parser_table_as_root@@Base+0x1aa0>
   31dd4:	ldr	r6, [pc, #-1016]	; 319e4 <flatcc_json_parser_table_as_root@@Base+0x1aa4>
   31dd8:	str	r3, [sp, #32]
   31ddc:	b	3152c <flatcc_json_parser_table_as_root@@Base+0x15ec>
   31de0:	ldr	lr, [sp, #84]	; 0x54
   31de4:	mov	ip, #105	; 0x69
   31de8:	mov	r0, lr
   31dec:	mov	r1, #110	; 0x6e
   31df0:	mov	r2, #102	; 0x66
   31df4:	mov	r3, #0
   31df8:	strb	ip, [lr]
   31dfc:	strb	r1, [lr, #1]
   31e00:	strb	r2, [lr, #2]
   31e04:	strb	r3, [r0, #3]!
   31e08:	ldr	r3, [sp, #120]	; 0x78
   31e0c:	sub	r0, r0, r3
   31e10:	add	sp, sp, #164	; 0xa4
   31e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e18:	mov	r8, r3
   31e1c:	strd	r0, [sp, #72]	; 0x48
   31e20:	strd	r6, [sp, #32]
   31e24:	ldrd	r0, [sp, #128]	; 0x80
   31e28:	ldrd	r6, [sp, #112]	; 0x70
   31e2c:	subs	r2, r6, r0
   31e30:	sbc	r3, r7, r1
   31e34:	cmp	r1, r7
   31e38:	cmpeq	r0, r6
   31e3c:	ldr	r1, [sp, #124]	; 0x7c
   31e40:	ldr	r0, [sp, #136]	; 0x88
   31e44:	movhi	lr, #1
   31e48:	movls	lr, #0
   31e4c:	cmp	r1, r0
   31e50:	orrne	lr, lr, #1
   31e54:	cmp	lr, #0
   31e58:	bne	32004 <flatcc_json_parser_table_as_root@@Base+0x20c4>
   31e5c:	ldr	r1, [sp, #40]	; 0x28
   31e60:	lsl	r8, sl, r8
   31e64:	lsl	ip, sl, r1
   31e68:	ldr	r1, [sp, #48]	; 0x30
   31e6c:	mov	fp, #0
   31e70:	str	r8, [sp, #16]
   31e74:	orr	ip, ip, sl, lsr r1
   31e78:	ldrd	r0, [sp, #72]	; 0x48
   31e7c:	mov	sl, #1
   31e80:	str	ip, [sp, #20]
   31e84:	strd	r0, [sp, #8]
   31e88:	ldrd	r0, [sp, #32]
   31e8c:	strd	sl, [sp, #24]
   31e90:	strd	r0, [sp]
   31e94:	mov	r1, r5
   31e98:	ldr	r0, [sp, #84]	; 0x54
   31e9c:	bl	30b18 <flatcc_json_parser_table_as_root@@Base+0xbd8>
   31ea0:	b	31cf0 <flatcc_json_parser_table_as_root@@Base+0x1db0>
   31ea4:	rsb	r1, r4, #0
   31ea8:	add	r2, r4, r5
   31eac:	cmp	r1, r5
   31eb0:	cmnge	r2, #2
   31eb4:	bge	31f98 <flatcc_json_parser_table_as_root@@Base+0x2058>
   31eb8:	cmp	r5, #1
   31ebc:	beq	31f2c <flatcc_json_parser_table_as_root@@Base+0x1fec>
   31ec0:	cmp	r3, r1
   31ec4:	movlt	r1, r3
   31ec8:	cmp	r1, #0
   31ecc:	sub	ip, r5, r1
   31ed0:	ble	31ef0 <flatcc_json_parser_table_as_root@@Base+0x1fb0>
   31ed4:	ldr	r3, [sp, #84]	; 0x54
   31ed8:	add	r0, r3, ip
   31edc:	add	r3, r3, r5
   31ee0:	ldrb	r2, [r3, #-1]
   31ee4:	strb	r2, [r3], #-1
   31ee8:	cmp	r0, r3
   31eec:	bne	31ee0 <flatcc_json_parser_table_as_root@@Base+0x1fa0>
   31ef0:	ldr	r2, [sp, #84]	; 0x54
   31ef4:	mov	r3, #46	; 0x2e
   31ef8:	adds	r0, r1, r4
   31efc:	strb	r3, [r2, ip]
   31f00:	add	r3, r5, #1
   31f04:	moveq	r5, r3
   31f08:	beq	31d54 <flatcc_json_parser_table_as_root@@Base+0x1e14>
   31f0c:	ldr	ip, [sp, #84]	; 0x54
   31f10:	add	r5, r5, #2
   31f14:	mov	r2, #101	; 0x65
   31f18:	add	r1, ip, r5
   31f1c:	strb	r2, [ip, r3]
   31f20:	bl	30cd8 <flatcc_json_parser_table_as_root@@Base+0xd98>
   31f24:	add	r5, r5, r0
   31f28:	b	31d54 <flatcc_json_parser_table_as_root@@Base+0x1e14>
   31f2c:	ldr	r2, [sp, #84]	; 0x54
   31f30:	add	r6, r5, #1
   31f34:	mov	r3, #101	; 0x65
   31f38:	strb	r3, [r2, r5]
   31f3c:	mov	r0, r4
   31f40:	add	r1, r2, r6
   31f44:	bl	30cd8 <flatcc_json_parser_table_as_root@@Base+0xd98>
   31f48:	add	r5, r6, r0
   31f4c:	b	31d54 <flatcc_json_parser_table_as_root@@Base+0x1e14>
   31f50:	ldr	r4, [sp, #84]	; 0x54
   31f54:	ldr	r1, [pc, #-1396]	; 319e8 <flatcc_json_parser_table_as_root@@Base+0x1aa8>
   31f58:	ldrd	r2, [sp, #88]	; 0x58
   31f5c:	add	r1, pc, r1
   31f60:	mov	r0, r4
   31f64:	bl	145f8 <sprintf@plt>
   31f68:	ldr	r2, [sp, #120]	; 0x78
   31f6c:	sub	r3, r4, r2
   31f70:	add	r0, r3, r0
   31f74:	b	31d94 <flatcc_json_parser_table_as_root@@Base+0x1e54>
   31f78:	lsl	r5, r9, #2
   31f7c:	lsl	r4, r8, #2
   31f80:	ldr	r1, [sp, #32]
   31f84:	orr	r5, r5, r8, lsr #30
   31f88:	subs	r4, r4, #1
   31f8c:	sub	r6, r1, #2
   31f90:	sbc	r5, r5, #0
   31f94:	b	31670 <flatcc_json_parser_table_as_root@@Base+0x1730>
   31f98:	ldr	r6, [sp, #84]	; 0x54
   31f9c:	rsb	r0, r5, #2
   31fa0:	sub	r0, r0, r4
   31fa4:	mov	r2, r5
   31fa8:	add	r0, r6, r0
   31fac:	mov	r1, r6
   31fb0:	rsb	r4, r4, #2
   31fb4:	bl	1452c <memmove@plt>
   31fb8:	sub	r0, r4, r5
   31fbc:	mov	r2, #48	; 0x30
   31fc0:	mov	r3, #46	; 0x2e
   31fc4:	cmp	r0, #2
   31fc8:	strb	r2, [r6]
   31fcc:	strb	r3, [r6, #1]
   31fd0:	ble	31ffc <flatcc_json_parser_table_as_root@@Base+0x20bc>
   31fd4:	add	r3, r6, #2
   31fd8:	add	r1, r6, r0
   31fdc:	strb	r2, [r3], #1
   31fe0:	cmp	r1, r3
   31fe4:	bne	31fdc <flatcc_json_parser_table_as_root@@Base+0x209c>
   31fe8:	b	31f24 <flatcc_json_parser_table_as_root@@Base+0x1fe4>
   31fec:	mov	r5, #0
   31ff0:	b	31bec <flatcc_json_parser_table_as_root@@Base+0x1cac>
   31ff4:	mov	r5, #1
   31ff8:	b	31e24 <flatcc_json_parser_table_as_root@@Base+0x1ee4>
   31ffc:	mov	r0, #2
   32000:	b	31f24 <flatcc_json_parser_table_as_root@@Base+0x1fe4>
   32004:	bl	31158 <flatcc_json_parser_table_as_root@@Base+0x1218>
   32008:	ldr	r3, [pc, #-1572]	; 319ec <flatcc_json_parser_table_as_root@@Base+0x1aac>
   3200c:	ldr	r1, [pc, #-1572]	; 319f0 <flatcc_json_parser_table_as_root@@Base+0x1ab0>
   32010:	ldr	r0, [pc, #-1572]	; 319f4 <flatcc_json_parser_table_as_root@@Base+0x1ab4>
   32014:	add	r3, pc, r3
   32018:	mov	r2, #138	; 0x8a
   3201c:	add	r3, r3, #300	; 0x12c
   32020:	add	r1, pc, r1
   32024:	add	r0, pc, r0
   32028:	bl	14610 <__assert_fail@plt>
   3202c:	ldr	r3, [pc, #-1596]	; 319f8 <flatcc_json_parser_table_as_root@@Base+0x1ab8>
   32030:	ldr	r1, [pc, #-1596]	; 319fc <flatcc_json_parser_table_as_root@@Base+0x1abc>
   32034:	ldr	r0, [pc, #-1596]	; 31a00 <flatcc_json_parser_table_as_root@@Base+0x1ac0>
   32038:	add	r3, pc, r3
   3203c:	mov	r2, #189	; 0xbd
   32040:	add	r3, r3, #280	; 0x118
   32044:	add	r1, pc, r1
   32048:	add	r0, pc, r0
   3204c:	bl	14610 <__assert_fail@plt>
   32050:	bl	148b8 <__assert_fail@plt+0x2a8>
   32054:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32058:	mov	sl, r0
   3205c:	ldr	r0, [r0, #20]
   32060:	mov	r7, r2
   32064:	mov	r8, #92	; 0x5c
   32068:	add	r2, r0, #1
   3206c:	mov	fp, #102	; 0x66
   32070:	mov	r9, #48	; 0x30
   32074:	str	r2, [sl, #20]
   32078:	mov	r2, #34	; 0x22
   3207c:	strb	r2, [r0]
   32080:	ldrb	r4, [r1]
   32084:	mov	r5, r1
   32088:	cmp	r4, #34	; 0x22
   3208c:	cmpne	r4, #31
   32090:	bls	3226c <flatcc_json_parser_table_as_root@@Base+0x232c>
   32094:	cmp	r4, #92	; 0x5c
   32098:	bne	320a8 <flatcc_json_parser_table_as_root@@Base+0x2168>
   3209c:	b	3226c <flatcc_json_parser_table_as_root@@Base+0x232c>
   320a0:	cmp	r4, #92	; 0x5c
   320a4:	beq	320b8 <flatcc_json_parser_table_as_root@@Base+0x2178>
   320a8:	ldrb	r4, [r5, #1]!
   320ac:	cmp	r4, #34	; 0x22
   320b0:	cmpne	r4, #31
   320b4:	bhi	320a0 <flatcc_json_parser_table_as_root@@Base+0x2160>
   320b8:	sub	r6, r5, r1
   320bc:	ldr	r0, [sl, #20]
   320c0:	ldr	r2, [sl, #16]
   320c4:	add	r3, r0, r6
   320c8:	cmp	r2, r3
   320cc:	mov	r2, r6
   320d0:	bls	321d4 <flatcc_json_parser_table_as_root@@Base+0x2294>
   320d4:	bl	14544 <memcpy@plt>
   320d8:	ldr	r2, [sl, #20]
   320dc:	subs	r7, r7, r6
   320e0:	add	r2, r2, r6
   320e4:	str	r2, [sl, #20]
   320e8:	beq	321e8 <flatcc_json_parser_table_as_root@@Base+0x22a8>
   320ec:	add	r3, r2, #1
   320f0:	cmp	r4, #12
   320f4:	str	r3, [sl, #20]
   320f8:	strb	r8, [r2]
   320fc:	beq	32210 <flatcc_json_parser_table_as_root@@Base+0x22d0>
   32100:	bhi	321a4 <flatcc_json_parser_table_as_root@@Base+0x2264>
   32104:	cmp	r4, #9
   32108:	beq	32254 <flatcc_json_parser_table_as_root@@Base+0x2314>
   3210c:	cmp	r4, #10
   32110:	beq	3223c <flatcc_json_parser_table_as_root@@Base+0x22fc>
   32114:	cmp	r4, #8
   32118:	beq	32224 <flatcc_json_parser_table_as_root@@Base+0x22e4>
   3211c:	ldr	r3, [sl, #20]
   32120:	lsr	r1, r4, #4
   32124:	add	r2, r3, #1
   32128:	str	r2, [sl, #20]
   3212c:	mov	r2, #117	; 0x75
   32130:	strb	r2, [r3]
   32134:	ldr	r3, [sl, #20]
   32138:	cmp	r1, #9
   3213c:	add	r2, r3, #1
   32140:	str	r2, [sl, #20]
   32144:	strb	r9, [r3]
   32148:	ldr	r2, [sl, #20]
   3214c:	movhi	r3, #87	; 0x57
   32150:	add	r0, r2, #1
   32154:	str	r0, [sl, #20]
   32158:	strb	r9, [r2]
   3215c:	ldr	r2, [sl, #20]
   32160:	movls	r3, #48	; 0x30
   32164:	add	r3, r3, r1
   32168:	and	r4, r4, #15
   3216c:	add	r1, r2, #1
   32170:	str	r1, [sl, #20]
   32174:	cmp	r4, #9
   32178:	strb	r3, [r2]
   3217c:	ldr	r2, [sl, #20]
   32180:	movhi	r3, #87	; 0x57
   32184:	movls	r3, #48	; 0x30
   32188:	add	r1, r2, #1
   3218c:	add	r3, r3, r4
   32190:	str	r1, [sl, #20]
   32194:	strb	r3, [r2]
   32198:	sub	r7, r7, #1
   3219c:	add	r1, r5, #1
   321a0:	b	32080 <flatcc_json_parser_table_as_root@@Base+0x2140>
   321a4:	cmp	r4, #34	; 0x22
   321a8:	beq	321fc <flatcc_json_parser_table_as_root@@Base+0x22bc>
   321ac:	cmp	r4, #92	; 0x5c
   321b0:	beq	321fc <flatcc_json_parser_table_as_root@@Base+0x22bc>
   321b4:	cmp	r4, #13
   321b8:	bne	3211c <flatcc_json_parser_table_as_root@@Base+0x21dc>
   321bc:	ldr	r3, [sl, #20]
   321c0:	add	r2, r3, #1
   321c4:	str	r2, [sl, #20]
   321c8:	mov	r2, #114	; 0x72
   321cc:	strb	r2, [r3]
   321d0:	b	32198 <flatcc_json_parser_table_as_root@@Base+0x2258>
   321d4:	mov	r0, sl
   321d8:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   321dc:	subs	r7, r7, r6
   321e0:	ldr	r2, [sl, #20]
   321e4:	bne	320ec <flatcc_json_parser_table_as_root@@Base+0x21ac>
   321e8:	add	r0, r2, #1
   321ec:	mov	r1, #34	; 0x22
   321f0:	str	r0, [sl, #20]
   321f4:	strb	r1, [r2]
   321f8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   321fc:	ldr	r3, [sl, #20]
   32200:	add	r2, r3, #1
   32204:	str	r2, [sl, #20]
   32208:	strb	r4, [r3]
   3220c:	b	32198 <flatcc_json_parser_table_as_root@@Base+0x2258>
   32210:	ldr	r3, [sl, #20]
   32214:	add	r2, r3, #1
   32218:	str	r2, [sl, #20]
   3221c:	strb	fp, [r3]
   32220:	b	32198 <flatcc_json_parser_table_as_root@@Base+0x2258>
   32224:	ldr	r3, [sl, #20]
   32228:	mov	r2, #98	; 0x62
   3222c:	add	r1, r3, #1
   32230:	str	r1, [sl, #20]
   32234:	strb	r2, [r3]
   32238:	b	32198 <flatcc_json_parser_table_as_root@@Base+0x2258>
   3223c:	ldr	r3, [sl, #20]
   32240:	mov	r2, #110	; 0x6e
   32244:	add	r1, r3, #1
   32248:	str	r1, [sl, #20]
   3224c:	strb	r2, [r3]
   32250:	b	32198 <flatcc_json_parser_table_as_root@@Base+0x2258>
   32254:	ldr	r3, [sl, #20]
   32258:	mov	r2, #116	; 0x74
   3225c:	add	r1, r3, #1
   32260:	str	r1, [sl, #20]
   32264:	strb	r2, [r3]
   32268:	b	32198 <flatcc_json_parser_table_as_root@@Base+0x2258>
   3226c:	mov	r6, #0
   32270:	b	320bc <flatcc_json_parser_table_as_root@@Base+0x217c>
   32274:	push	{r4, r5, r6, r7, r8, lr}
   32278:	mov	r6, r1
   3227c:	ldrb	r1, [r0, #25]
   32280:	mov	r4, r0
   32284:	mov	r5, r2
   32288:	cmp	r1, #0
   3228c:	bne	3235c <flatcc_json_parser_table_as_root@@Base+0x241c>
   32290:	ldr	r2, [r0, #20]
   32294:	ldr	r3, [r0, #16]
   32298:	cmp	r2, r3
   3229c:	bcs	32330 <flatcc_json_parser_table_as_root@@Base+0x23f0>
   322a0:	mov	r3, #34	; 0x22
   322a4:	strb	r3, [r2]
   322a8:	ldrb	r3, [r4, #26]
   322ac:	ldr	r0, [r4, #20]
   322b0:	ldr	r2, [r4, #16]
   322b4:	cmp	r3, #0
   322b8:	addeq	r0, r0, #1
   322bc:	add	r3, r0, r5
   322c0:	cmp	r2, r3
   322c4:	str	r0, [r4, #20]
   322c8:	bhi	32340 <flatcc_json_parser_table_as_root@@Base+0x2400>
   322cc:	mov	r2, r5
   322d0:	mov	r1, r6
   322d4:	mov	r0, r4
   322d8:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   322dc:	ldr	r5, [r4, #20]
   322e0:	mov	r3, #34	; 0x22
   322e4:	strb	r3, [r5]
   322e8:	ldr	r1, [r4, #20]
   322ec:	ldrb	r3, [r4, #26]
   322f0:	clz	r3, r3
   322f4:	lsr	r3, r3, #5
   322f8:	add	r2, r1, r3
   322fc:	add	r2, r2, #1
   32300:	mov	r0, #58	; 0x3a
   32304:	str	r2, [r4, #20]
   32308:	strb	r0, [r1, r3]
   3230c:	ldr	r3, [r4, #20]
   32310:	mov	r2, #32
   32314:	strb	r2, [r3]
   32318:	ldrb	r2, [r4, #25]
   3231c:	ldr	r3, [r4, #20]
   32320:	cmp	r2, #0
   32324:	addne	r3, r3, #1
   32328:	str	r3, [r4, #20]
   3232c:	pop	{r4, r5, r6, r7, r8, pc}
   32330:	ldr	r3, [r0, #44]	; 0x2c
   32334:	blx	r3
   32338:	ldr	r2, [r4, #20]
   3233c:	b	322a0 <flatcc_json_parser_table_as_root@@Base+0x2360>
   32340:	mov	r2, r5
   32344:	mov	r1, r6
   32348:	bl	14544 <memcpy@plt>
   3234c:	ldr	r3, [r4, #20]
   32350:	add	r5, r3, r5
   32354:	str	r5, [r4, #20]
   32358:	b	322e0 <flatcc_json_parser_table_as_root@@Base+0x23a0>
   3235c:	ldr	r3, [r0, #20]
   32360:	mov	r2, #10
   32364:	add	r1, r3, #1
   32368:	str	r1, [r0, #20]
   3236c:	strb	r2, [r3]
   32370:	ldrb	r7, [r0, #25]
   32374:	ldr	r2, [r0, #32]
   32378:	ldr	r3, [r0, #20]
   3237c:	ldr	r1, [r0, #16]
   32380:	mul	r7, r2, r7
   32384:	add	r2, r3, r7
   32388:	cmp	r1, r2
   3238c:	bcc	323b0 <flatcc_json_parser_table_as_root@@Base+0x2470>
   32390:	mov	r2, r7
   32394:	mov	r0, r3
   32398:	mov	r1, #32
   3239c:	bl	145bc <memset@plt>
   323a0:	ldr	r2, [r4, #20]
   323a4:	add	r2, r2, r7
   323a8:	str	r2, [r4, #20]
   323ac:	b	322a0 <flatcc_json_parser_table_as_root@@Base+0x2360>
   323b0:	mov	r1, r7
   323b4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   323b8:	ldr	r2, [r4, #20]
   323bc:	b	322a0 <flatcc_json_parser_table_as_root@@Base+0x2360>

000323c0 <flatcc_json_printer_error_string@@Base>:
   323c0:	cmp	r0, #3
   323c4:	addls	pc, pc, r0, lsl #2
   323c8:	b	3240c <flatcc_json_printer_error_string@@Base+0x4c>
   323cc:	b	323dc <flatcc_json_printer_error_string@@Base+0x1c>
   323d0:	b	32400 <flatcc_json_printer_error_string@@Base+0x40>
   323d4:	b	323f4 <flatcc_json_printer_error_string@@Base+0x34>
   323d8:	b	323e8 <flatcc_json_printer_error_string@@Base+0x28>
   323dc:	ldr	r0, [pc, #52]	; 32418 <flatcc_json_printer_error_string@@Base+0x58>
   323e0:	add	r0, pc, r0
   323e4:	bx	lr
   323e8:	ldr	r0, [pc, #44]	; 3241c <flatcc_json_printer_error_string@@Base+0x5c>
   323ec:	add	r0, pc, r0
   323f0:	bx	lr
   323f4:	ldr	r0, [pc, #36]	; 32420 <flatcc_json_printer_error_string@@Base+0x60>
   323f8:	add	r0, pc, r0
   323fc:	bx	lr
   32400:	ldr	r0, [pc, #28]	; 32424 <flatcc_json_printer_error_string@@Base+0x64>
   32404:	add	r0, pc, r0
   32408:	bx	lr
   3240c:	ldr	r0, [pc, #20]	; 32428 <flatcc_json_printer_error_string@@Base+0x68>
   32410:	add	r0, pc, r0
   32414:	bx	lr
   32418:	andeq	pc, r0, r0, lsr r5	; <UNPREDICTABLE>
   3241c:	andeq	pc, r0, r4, ror #17
   32420:	andeq	r0, r1, ip, ror #30
   32424:	andeq	r0, r1, r4, asr pc
   32428:	andeq	pc, r0, r8, lsl #19

0003242c <flatcc_json_printer_fmt_float@@Base>:
   3242c:	vcvt.f64.f32	d0, s0
   32430:	b	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>

00032434 <flatcc_json_printer_fmt_double@@Base>:
   32434:	b	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>

00032438 <flatcc_json_printer_fmt_bool@@Base>:
   32438:	cmp	r1, #0
   3243c:	mov	r2, r0
   32440:	bne	32468 <flatcc_json_printer_fmt_bool@@Base+0x30>
   32444:	ldr	r3, [pc, #56]	; 32484 <flatcc_json_printer_fmt_bool@@Base+0x4c>
   32448:	mov	r1, #5
   3244c:	add	r3, pc, r3
   32450:	ldrb	ip, [r3, #4]
   32454:	ldr	r0, [r3]
   32458:	strb	ip, [r2, #4]
   3245c:	str	r0, [r2]
   32460:	mov	r0, r1
   32464:	bx	lr
   32468:	ldr	r3, [pc, #24]	; 32488 <flatcc_json_printer_fmt_bool@@Base+0x50>
   3246c:	mov	r1, #4
   32470:	add	r3, pc, r3
   32474:	ldr	r0, [r3]
   32478:	str	r0, [r2]
   3247c:	mov	r0, r1
   32480:	bx	lr
   32484:	andeq	fp, r0, r4, asr #25
   32488:	muleq	r0, r8, ip

0003248c <flatcc_json_printer_string@@Base>:
   3248c:	b	32054 <flatcc_json_parser_table_as_root@@Base+0x2114>

00032490 <flatcc_json_printer_write@@Base>:
   32490:	push	{r4, r5, r6, lr}
   32494:	ldr	lr, [r0, #20]
   32498:	ldr	ip, [r0, #16]
   3249c:	add	r4, lr, r2
   324a0:	cmp	ip, r4
   324a4:	bls	324c8 <flatcc_json_printer_write@@Base+0x38>
   324a8:	mov	r4, r0
   324ac:	mov	r0, lr
   324b0:	mov	r5, r2
   324b4:	bl	14544 <memcpy@plt>
   324b8:	ldr	ip, [r4, #20]
   324bc:	add	ip, ip, r5
   324c0:	str	ip, [r4, #20]
   324c4:	pop	{r4, r5, r6, pc}
   324c8:	pop	{r4, r5, r6, lr}
   324cc:	b	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>

000324d0 <flatcc_json_printer_nl@@Base>:
   324d0:	ldr	r2, [r0, #20]
   324d4:	mov	r1, #10
   324d8:	add	ip, r2, #1
   324dc:	str	ip, [r0, #20]
   324e0:	strb	r1, [r2]
   324e4:	ldr	r1, [r0, #20]
   324e8:	ldr	r2, [r0, #16]
   324ec:	cmp	r1, r2
   324f0:	bxcc	lr
   324f4:	ldr	r3, [r0, #44]	; 0x2c
   324f8:	mov	r1, #0
   324fc:	bx	r3

00032500 <flatcc_json_printer_char@@Base>:
   32500:	ldr	r3, [r0, #20]
   32504:	add	r2, r3, #1
   32508:	str	r2, [r0, #20]
   3250c:	strb	r1, [r3]
   32510:	bx	lr

00032514 <flatcc_json_printer_indent@@Base>:
   32514:	push	{r4, r5, r6, lr}
   32518:	ldrb	r1, [r0, #25]
   3251c:	ldr	r5, [r0, #32]
   32520:	ldr	r2, [r0, #20]
   32524:	ldr	ip, [r0, #16]
   32528:	mul	r5, r5, r1
   3252c:	add	r1, r2, r5
   32530:	cmp	ip, r1
   32534:	bcc	3255c <flatcc_json_printer_indent@@Base+0x48>
   32538:	mov	r4, r0
   3253c:	mov	r1, #32
   32540:	mov	r0, r2
   32544:	mov	r2, r5
   32548:	bl	145bc <memset@plt>
   3254c:	ldr	r3, [r4, #20]
   32550:	add	r5, r3, r5
   32554:	str	r5, [r4, #20]
   32558:	pop	{r4, r5, r6, pc}
   3255c:	mov	r1, r5
   32560:	pop	{r4, r5, r6, lr}
   32564:	b	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>

00032568 <flatcc_json_printer_add_level@@Base>:
   32568:	ldr	r3, [r0, #32]
   3256c:	add	r1, r3, r1
   32570:	str	r1, [r0, #32]
   32574:	bx	lr

00032578 <flatcc_json_printer_get_level@@Base>:
   32578:	ldr	r0, [r0, #32]
   3257c:	bx	lr

00032580 <flatcc_json_printer_uint8@@Base>:
   32580:	push	{r4, lr}
   32584:	mov	r4, r0
   32588:	mov	r0, r1
   3258c:	ldr	r1, [r4, #20]
   32590:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   32594:	ldr	r3, [r4, #20]
   32598:	add	r0, r3, r0
   3259c:	str	r0, [r4, #20]
   325a0:	pop	{r4, pc}

000325a4 <flatcc_json_printer_uint16@@Base>:
   325a4:	push	{r4, lr}
   325a8:	mov	r4, r0
   325ac:	mov	r0, r1
   325b0:	ldr	r1, [r4, #20]
   325b4:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   325b8:	ldr	r3, [r4, #20]
   325bc:	add	r0, r3, r0
   325c0:	str	r0, [r4, #20]
   325c4:	pop	{r4, pc}

000325c8 <flatcc_json_printer_uint32@@Base>:
   325c8:	push	{r4, lr}
   325cc:	mov	r4, r0
   325d0:	mov	r0, r1
   325d4:	ldr	r1, [r4, #20]
   325d8:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   325dc:	ldr	r3, [r4, #20]
   325e0:	add	r0, r3, r0
   325e4:	str	r0, [r4, #20]
   325e8:	pop	{r4, pc}

000325ec <flatcc_json_printer_uint64@@Base>:
   325ec:	push	{r4, lr}
   325f0:	mov	r4, r0
   325f4:	mov	r1, r3
   325f8:	mov	r0, r2
   325fc:	ldr	r2, [r4, #20]
   32600:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   32604:	ldr	r3, [r4, #20]
   32608:	add	r0, r3, r0
   3260c:	str	r0, [r4, #20]
   32610:	pop	{r4, pc}

00032614 <flatcc_json_printer_int8@@Base>:
   32614:	push	{r4, r5, r6, lr}
   32618:	mov	r4, r0
   3261c:	subs	r0, r1, #0
   32620:	ldr	r1, [r4, #20]
   32624:	lsr	r5, r0, #31
   32628:	rsblt	r0, r0, #0
   3262c:	movlt	r3, #45	; 0x2d
   32630:	sxtblt	r0, r0
   32634:	strblt	r3, [r1]
   32638:	uxtb	r0, r0
   3263c:	addlt	r1, r1, #1
   32640:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   32644:	ldr	r3, [r4, #20]
   32648:	add	r0, r5, r0
   3264c:	add	r3, r3, r0
   32650:	str	r3, [r4, #20]
   32654:	pop	{r4, r5, r6, pc}

00032658 <flatcc_json_printer_int16@@Base>:
   32658:	push	{r4, r5, r6, lr}
   3265c:	mov	r4, r0
   32660:	subs	r0, r1, #0
   32664:	ldr	r1, [r4, #20]
   32668:	lsr	r5, r0, #31
   3266c:	rsblt	r0, r0, #0
   32670:	movlt	r3, #45	; 0x2d
   32674:	sxthlt	r0, r0
   32678:	strblt	r3, [r1]
   3267c:	uxth	r0, r0
   32680:	addlt	r1, r1, #1
   32684:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   32688:	ldr	r3, [r4, #20]
   3268c:	add	r0, r5, r0
   32690:	add	r3, r3, r0
   32694:	str	r3, [r4, #20]
   32698:	pop	{r4, r5, r6, pc}

0003269c <flatcc_json_printer_int32@@Base>:
   3269c:	push	{r4, r5, r6, lr}
   326a0:	mov	r4, r0
   326a4:	subs	r0, r1, #0
   326a8:	ldr	r1, [r4, #20]
   326ac:	movlt	r3, #45	; 0x2d
   326b0:	lsr	r5, r0, #31
   326b4:	strblt	r3, [r1]
   326b8:	rsblt	r0, r0, #0
   326bc:	addlt	r1, r1, #1
   326c0:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   326c4:	ldr	r3, [r4, #20]
   326c8:	add	r0, r5, r0
   326cc:	add	r3, r3, r0
   326d0:	str	r3, [r4, #20]
   326d4:	pop	{r4, r5, r6, pc}

000326d8 <flatcc_json_printer_int64@@Base>:
   326d8:	push	{r4, r5, r6, lr}
   326dc:	mov	r1, r3
   326e0:	mov	r4, r0
   326e4:	cmp	r2, #0
   326e8:	sbcs	r3, r3, #0
   326ec:	mov	r0, r2
   326f0:	lsr	r5, r1, #31
   326f4:	ldr	r2, [r4, #20]
   326f8:	bge	32710 <flatcc_json_printer_int64@@Base+0x38>
   326fc:	mov	r3, #45	; 0x2d
   32700:	rsbs	r0, r0, #0
   32704:	strb	r3, [r2]
   32708:	rsc	r1, r1, #0
   3270c:	add	r2, r2, #1
   32710:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   32714:	ldr	r3, [r4, #20]
   32718:	add	r0, r5, r0
   3271c:	add	r3, r3, r0
   32720:	str	r3, [r4, #20]
   32724:	pop	{r4, r5, r6, pc}

00032728 <flatcc_json_printer_float@@Base>:
   32728:	push	{r4, lr}
   3272c:	vcvt.f64.f32	d0, s0
   32730:	mov	r4, r0
   32734:	ldr	r0, [r0, #20]
   32738:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   3273c:	ldr	r3, [r4, #20]
   32740:	add	r0, r3, r0
   32744:	str	r0, [r4, #20]
   32748:	pop	{r4, pc}

0003274c <flatcc_json_printer_double@@Base>:
   3274c:	push	{r4, lr}
   32750:	mov	r4, r0
   32754:	ldr	r0, [r0, #20]
   32758:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   3275c:	ldr	r3, [r4, #20]
   32760:	add	r0, r3, r0
   32764:	str	r0, [r4, #20]
   32768:	pop	{r4, pc}

0003276c <flatcc_json_printer_enum@@Base>:
   3276c:	ldr	r3, [r0, #20]
   32770:	mov	ip, #34	; 0x22
   32774:	push	{r4, r5, r6, lr}
   32778:	mov	r4, r0
   3277c:	strb	ip, [r3]
   32780:	ldrb	ip, [r0, #26]
   32784:	ldr	r3, [r0, #20]
   32788:	ldr	lr, [r0, #16]
   3278c:	cmp	ip, #0
   32790:	addeq	r3, r3, #1
   32794:	add	ip, r3, r2
   32798:	cmp	lr, ip
   3279c:	str	r3, [r0, #20]
   327a0:	bhi	327cc <flatcc_json_printer_enum@@Base+0x60>
   327a4:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   327a8:	ldr	r2, [r4, #20]
   327ac:	mov	r3, #34	; 0x22
   327b0:	strb	r3, [r2]
   327b4:	ldrb	r2, [r4, #26]
   327b8:	ldr	r3, [r4, #20]
   327bc:	cmp	r2, #0
   327c0:	addeq	r3, r3, #1
   327c4:	str	r3, [r4, #20]
   327c8:	pop	{r4, r5, r6, pc}
   327cc:	mov	r0, r3
   327d0:	mov	r5, r2
   327d4:	bl	14544 <memcpy@plt>
   327d8:	ldr	r2, [r4, #20]
   327dc:	add	r2, r2, r5
   327e0:	str	r2, [r4, #20]
   327e4:	b	327ac <flatcc_json_printer_enum@@Base+0x40>

000327e8 <flatcc_json_printer_delimit_enum_flags@@Base>:
   327e8:	ldr	r3, [r0, #20]
   327ec:	ldrb	r2, [r0, #26]
   327f0:	adds	r1, r1, #0
   327f4:	mov	ip, #34	; 0x22
   327f8:	strb	ip, [r3]
   327fc:	movne	r1, #1
   32800:	ldr	r3, [r0, #20]
   32804:	cmp	r2, #0
   32808:	orreq	r1, r1, #1
   3280c:	add	r1, r3, r1
   32810:	str	r1, [r0, #20]
   32814:	bx	lr

00032818 <flatcc_json_printer_enum_flag@@Base>:
   32818:	push	{r4, r5, r6, lr}
   3281c:	mov	r5, #32
   32820:	ldr	lr, [r0, #20]
   32824:	mov	r4, r2
   32828:	strb	r5, [lr]
   3282c:	ldr	lr, [r0, #20]
   32830:	ldr	r5, [r0, #16]
   32834:	cmp	r1, #0
   32838:	addgt	lr, lr, #1
   3283c:	add	r2, lr, r3
   32840:	cmp	r5, r2
   32844:	str	lr, [r0, #20]
   32848:	bls	32874 <flatcc_json_printer_enum_flag@@Base+0x5c>
   3284c:	mov	r1, r4
   32850:	mov	r4, r0
   32854:	mov	r2, r3
   32858:	mov	r0, lr
   3285c:	mov	r5, r3
   32860:	bl	14544 <memcpy@plt>
   32864:	ldr	r3, [r4, #20]
   32868:	add	r3, r3, r5
   3286c:	str	r3, [r4, #20]
   32870:	pop	{r4, r5, r6, pc}
   32874:	mov	r1, r4
   32878:	mov	r2, r3
   3287c:	pop	{r4, r5, r6, lr}
   32880:	b	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>

00032884 <flatcc_json_printer_string_field@@Base>:
   32884:	add	r2, r2, #2
   32888:	ldr	ip, [r1, #8]
   3288c:	lsl	r2, r2, #1
   32890:	cmp	r2, ip
   32894:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32898:	ldr	r8, [sp, #32]
   3289c:	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   328a0:	ldr	ip, [r1, #4]
   328a4:	ldrh	r7, [ip, r2]
   328a8:	cmp	r7, #0
   328ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   328b0:	ldr	r6, [r1]
   328b4:	adds	r5, r6, r7
   328b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   328bc:	ldr	r2, [r1, #16]
   328c0:	mov	r9, r3
   328c4:	cmp	r2, #0
   328c8:	add	r2, r2, #1
   328cc:	str	r2, [r1, #16]
   328d0:	ldrne	r2, [r0, #20]
   328d4:	movne	r1, #44	; 0x2c
   328d8:	addne	ip, r2, #1
   328dc:	strne	ip, [r0, #20]
   328e0:	strbne	r1, [r2]
   328e4:	ldrb	r1, [r0, #25]
   328e8:	mov	r4, r0
   328ec:	cmp	r1, #0
   328f0:	bne	329d4 <flatcc_json_printer_string_field@@Base+0x150>
   328f4:	ldr	r2, [r0, #20]
   328f8:	ldr	r3, [r0, #16]
   328fc:	cmp	r2, r3
   32900:	bcc	32910 <flatcc_json_printer_string_field@@Base+0x8c>
   32904:	ldr	r3, [r0, #44]	; 0x2c
   32908:	blx	r3
   3290c:	ldr	r2, [r4, #20]
   32910:	mov	r3, #34	; 0x22
   32914:	strb	r3, [r2]
   32918:	ldrb	r3, [r4, #26]
   3291c:	ldr	r0, [r4, #20]
   32920:	ldr	r2, [r4, #16]
   32924:	cmp	r3, #0
   32928:	addeq	r0, r0, #1
   3292c:	add	r3, r0, r8
   32930:	cmp	r2, r3
   32934:	str	r0, [r4, #20]
   32938:	bhi	329b8 <flatcc_json_printer_string_field@@Base+0x134>
   3293c:	mov	r2, r8
   32940:	mov	r1, r9
   32944:	mov	r0, r4
   32948:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3294c:	ldr	r8, [r4, #20]
   32950:	mov	r3, #34	; 0x22
   32954:	strb	r3, [r8]
   32958:	ldr	r1, [r4, #20]
   3295c:	ldrb	r3, [r4, #26]
   32960:	clz	r3, r3
   32964:	lsr	r3, r3, #5
   32968:	add	r2, r1, r3
   3296c:	add	r2, r2, #1
   32970:	mov	r0, #58	; 0x3a
   32974:	str	r2, [r4, #20]
   32978:	strb	r0, [r1, r3]
   3297c:	ldr	r3, [r4, #20]
   32980:	mov	r2, #32
   32984:	mov	r0, r4
   32988:	strb	r2, [r3]
   3298c:	ldrb	ip, [r4, #25]
   32990:	ldr	r2, [r6, r7]
   32994:	ldr	r3, [r4, #20]
   32998:	add	r1, r5, r2
   3299c:	cmp	ip, #0
   329a0:	addne	r3, r3, #1
   329a4:	ldr	r2, [r5, r2]
   329a8:	add	r1, r1, #4
   329ac:	str	r3, [r4, #20]
   329b0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   329b4:	b	32054 <flatcc_json_parser_table_as_root@@Base+0x2114>
   329b8:	mov	r2, r8
   329bc:	mov	r1, r9
   329c0:	bl	14544 <memcpy@plt>
   329c4:	ldr	r3, [r4, #20]
   329c8:	add	r8, r3, r8
   329cc:	str	r8, [r4, #20]
   329d0:	b	32950 <flatcc_json_printer_string_field@@Base+0xcc>
   329d4:	ldr	r3, [r0, #20]
   329d8:	mov	r2, #10
   329dc:	add	r1, r3, #1
   329e0:	str	r1, [r0, #20]
   329e4:	strb	r2, [r3]
   329e8:	ldrb	r3, [r0, #25]
   329ec:	ldr	r2, [r0, #32]
   329f0:	ldr	r0, [r0, #20]
   329f4:	ldr	r1, [r4, #16]
   329f8:	mul	sl, r2, r3
   329fc:	add	r3, r0, sl
   32a00:	cmp	r1, r3
   32a04:	bcc	32a24 <flatcc_json_printer_string_field@@Base+0x1a0>
   32a08:	mov	r2, sl
   32a0c:	mov	r1, #32
   32a10:	bl	145bc <memset@plt>
   32a14:	ldr	r2, [r4, #20]
   32a18:	add	r2, r2, sl
   32a1c:	str	r2, [r4, #20]
   32a20:	b	32910 <flatcc_json_printer_string_field@@Base+0x8c>
   32a24:	mov	r1, sl
   32a28:	mov	r0, r4
   32a2c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   32a30:	ldr	r2, [r4, #20]
   32a34:	b	32910 <flatcc_json_printer_string_field@@Base+0x8c>

00032a38 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   32a38:	add	r2, r2, #2
   32a3c:	ldr	ip, [r1, #8]
   32a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32a44:	lsl	r2, r2, #1
   32a48:	sub	sp, sp, #20
   32a4c:	cmp	r2, ip
   32a50:	ldr	r6, [sp, #56]	; 0x38
   32a54:	bge	32c98 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x260>
   32a58:	ldr	ip, [r1, #4]
   32a5c:	ldrh	r9, [ip, r2]
   32a60:	cmp	r9, #0
   32a64:	beq	32c98 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x260>
   32a68:	ldr	r2, [sp, #60]	; 0x3c
   32a6c:	ldr	r4, [r1]
   32a70:	adds	r8, r2, #0
   32a74:	movne	r8, #1
   32a78:	orr	r2, r8, #128	; 0x80
   32a7c:	adds	r7, r4, r9
   32a80:	str	r2, [sp, #4]
   32a84:	beq	32c98 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x260>
   32a88:	ldr	r2, [r1, #16]
   32a8c:	mov	sl, r3
   32a90:	cmp	r2, #0
   32a94:	add	r2, r2, #1
   32a98:	str	r2, [r1, #16]
   32a9c:	ldrne	r2, [r0, #20]
   32aa0:	movne	r1, #44	; 0x2c
   32aa4:	addne	ip, r2, #1
   32aa8:	strne	ip, [r0, #20]
   32aac:	strbne	r1, [r2]
   32ab0:	ldrb	r1, [r0, #25]
   32ab4:	mov	r5, r0
   32ab8:	ldr	r3, [r0, #20]
   32abc:	cmp	r1, #0
   32ac0:	bne	32cdc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2a4>
   32ac4:	ldr	r2, [r0, #16]
   32ac8:	cmp	r3, r2
   32acc:	bcc	32adc <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   32ad0:	ldr	r3, [r0, #44]	; 0x2c
   32ad4:	blx	r3
   32ad8:	ldr	r3, [r5, #20]
   32adc:	mov	r2, #34	; 0x22
   32ae0:	strb	r2, [r3]
   32ae4:	ldrb	r3, [r5, #26]
   32ae8:	ldr	r0, [r5, #20]
   32aec:	ldr	r2, [r5, #16]
   32af0:	cmp	r3, #0
   32af4:	addeq	r0, r0, #1
   32af8:	add	r3, r0, r6
   32afc:	cmp	r2, r3
   32b00:	str	r0, [r5, #20]
   32b04:	bhi	32ca0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x268>
   32b08:	mov	r2, r6
   32b0c:	mov	r1, sl
   32b10:	mov	r0, r5
   32b14:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   32b18:	ldr	r6, [r5, #20]
   32b1c:	mov	r0, #34	; 0x22
   32b20:	strb	r0, [r6]
   32b24:	ldr	r1, [r5, #20]
   32b28:	ldrb	r3, [r5, #26]
   32b2c:	clz	r3, r3
   32b30:	lsr	r3, r3, #5
   32b34:	add	r2, r1, r3
   32b38:	add	r2, r2, #1
   32b3c:	mov	ip, #58	; 0x3a
   32b40:	str	r2, [r5, #20]
   32b44:	strb	ip, [r1, r3]
   32b48:	ldr	r3, [r5, #20]
   32b4c:	mov	r1, #32
   32b50:	ldr	r2, [pc, #524]	; 32d64 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x32c>
   32b54:	strb	r1, [r3]
   32b58:	ldrb	r3, [r5, #25]
   32b5c:	ldr	ip, [r4, r9]
   32b60:	ldr	lr, [r5, #20]
   32b64:	adds	r3, r3, #0
   32b68:	movne	r3, #1
   32b6c:	ldr	r4, [r7, ip]
   32b70:	add	r1, lr, r3
   32b74:	add	r1, r1, #1
   32b78:	str	r4, [sp, #8]
   32b7c:	str	r1, [r5, #20]
   32b80:	strb	r0, [lr, r3]
   32b84:	ldr	r6, [sp, #8]
   32b88:	ldr	r0, [r5, #20]
   32b8c:	ldr	r4, [r5, #16]
   32b90:	lsl	r6, r6, #2
   32b94:	add	r7, r7, ip
   32b98:	umull	r3, r6, r2, r6
   32b9c:	add	r7, r7, #4
   32ba0:	lsr	r6, r6, #1
   32ba4:	add	r6, r6, #3
   32ba8:	bic	r6, r6, #3
   32bac:	add	r3, r0, r6
   32bb0:	cmp	r3, r4
   32bb4:	bcs	32cbc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x284>
   32bb8:	cmp	r4, r3
   32bbc:	bcs	32c70 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x238>
   32bc0:	sub	r4, r4, r0
   32bc4:	bic	r4, r4, #3
   32bc8:	add	r6, r4, r4, lsl #1
   32bcc:	lsrs	r6, r6, #2
   32bd0:	beq	32d3c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x304>
   32bd4:	mov	r3, r6
   32bd8:	ldr	fp, [pc, #388]	; 32d64 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x32c>
   32bdc:	mov	r6, r4
   32be0:	add	sl, sp, #12
   32be4:	mov	r9, #0
   32be8:	mov	r4, r3
   32bec:	b	32c04 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1cc>
   32bf0:	sub	r6, r3, r0
   32bf4:	bic	r6, r6, #3
   32bf8:	add	r4, r6, r6, lsl #1
   32bfc:	lsrs	r4, r4, #2
   32c00:	beq	32d3c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x304>
   32c04:	mov	r1, r7
   32c08:	mov	r3, r8
   32c0c:	mov	r2, sl
   32c10:	str	r4, [sp, #12]
   32c14:	bl	312cc <flatcc_json_parser_table_as_root@@Base+0x138c>
   32c18:	ldr	r2, [r5, #20]
   32c1c:	ldr	r3, [sp, #8]
   32c20:	add	r6, r2, r6
   32c24:	sub	r3, r3, r4
   32c28:	str	r6, [r5, #20]
   32c2c:	str	r3, [sp, #8]
   32c30:	mov	r0, r5
   32c34:	ldr	r3, [r5, #44]	; 0x2c
   32c38:	mov	r1, r9
   32c3c:	blx	r3
   32c40:	ldr	r6, [sp, #8]
   32c44:	ldr	r0, [r5, #20]
   32c48:	ldr	r3, [r5, #16]
   32c4c:	lsl	r6, r6, #2
   32c50:	add	r7, r7, r4
   32c54:	umull	r2, r6, fp, r6
   32c58:	lsr	r6, r6, #1
   32c5c:	add	r6, r6, #3
   32c60:	bic	r6, r6, #3
   32c64:	add	r2, r0, r6
   32c68:	cmp	r3, r2
   32c6c:	bcc	32bf0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1b8>
   32c70:	ldr	r3, [sp, #4]
   32c74:	mov	r1, r7
   32c78:	add	r2, sp, #8
   32c7c:	bl	312cc <flatcc_json_parser_table_as_root@@Base+0x138c>
   32c80:	ldr	r2, [r5, #20]
   32c84:	mov	r1, #34	; 0x22
   32c88:	add	r3, r2, r6
   32c8c:	add	r3, r3, #1
   32c90:	str	r3, [r5, #20]
   32c94:	strb	r1, [r2, r6]
   32c98:	add	sp, sp, #20
   32c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ca0:	mov	r2, r6
   32ca4:	mov	r1, sl
   32ca8:	bl	14544 <memcpy@plt>
   32cac:	ldr	r3, [r5, #20]
   32cb0:	add	r6, r3, r6
   32cb4:	str	r6, [r5, #20]
   32cb8:	b	32b1c <flatcc_json_printer_uint8_vector_base64_field@@Base+0xe4>
   32cbc:	ldr	r3, [r5, #44]	; 0x2c
   32cc0:	mov	r0, r5
   32cc4:	mov	r1, #0
   32cc8:	blx	r3
   32ccc:	ldr	r0, [r5, #20]
   32cd0:	ldr	r4, [r5, #16]
   32cd4:	add	r3, r0, r6
   32cd8:	b	32bb8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x180>
   32cdc:	mov	r2, #10
   32ce0:	add	r1, r3, #1
   32ce4:	str	r1, [r0, #20]
   32ce8:	strb	r2, [r3]
   32cec:	ldrb	r3, [r0, #25]
   32cf0:	ldr	fp, [r0, #32]
   32cf4:	ldr	r0, [r0, #20]
   32cf8:	ldr	r2, [r5, #16]
   32cfc:	mul	fp, fp, r3
   32d00:	add	r3, r0, fp
   32d04:	cmp	r2, r3
   32d08:	bcc	32d28 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f0>
   32d0c:	mov	r2, fp
   32d10:	mov	r1, #32
   32d14:	bl	145bc <memset@plt>
   32d18:	ldr	r3, [r5, #20]
   32d1c:	add	r3, r3, fp
   32d20:	str	r3, [r5, #20]
   32d24:	b	32adc <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   32d28:	mov	r1, fp
   32d2c:	mov	r0, r5
   32d30:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   32d34:	ldr	r3, [r5, #20]
   32d38:	b	32adc <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   32d3c:	ldr	r3, [pc, #36]	; 32d68 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x330>
   32d40:	ldr	r1, [pc, #36]	; 32d6c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x334>
   32d44:	add	r3, pc, r3
   32d48:	ldr	r0, [pc, #32]	; 32d70 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x338>
   32d4c:	add	r3, r3, #1744	; 0x6d0
   32d50:	ldr	r2, [pc, #28]	; 32d74 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x33c>
   32d54:	add	r3, r3, #4
   32d58:	add	r1, pc, r1
   32d5c:	add	r0, pc, r0
   32d60:	bl	14610 <__assert_fail@plt>
   32d64:	bge	feadd818 <__bss_end__@@Base+0xfea8944c>
   32d68:	ldrdeq	pc, [r0], -ip
   32d6c:	andeq	r0, r1, r4, lsr #8
   32d70:	andeq	r0, r1, r8, lsl r6
   32d74:	andeq	r0, r0, r5, lsl r1

00032d78 <flatcc_json_printer_uint8_field@@Base>:
   32d78:	add	r2, r2, #2
   32d7c:	ldr	ip, [r1, #8]
   32d80:	lsl	r2, r2, #1
   32d84:	push	{r4, r5, r6, r7, r8, lr}
   32d88:	cmp	r2, ip
   32d8c:	ldr	r5, [sp, #24]
   32d90:	ldrb	ip, [sp, #28]
   32d94:	blt	32dac <flatcc_json_printer_uint8_field@@Base+0x34>
   32d98:	ldrb	r2, [r0, #29]
   32d9c:	cmp	r2, #0
   32da0:	popeq	{r4, r5, r6, r7, r8, pc}
   32da4:	mov	r6, ip
   32da8:	b	32dd4 <flatcc_json_printer_uint8_field@@Base+0x5c>
   32dac:	ldr	lr, [r1, #4]
   32db0:	ldrh	r2, [lr, r2]
   32db4:	cmp	r2, #0
   32db8:	beq	32d98 <flatcc_json_printer_uint8_field@@Base+0x20>
   32dbc:	ldr	lr, [r1]
   32dc0:	cmn	lr, r2
   32dc4:	beq	32d98 <flatcc_json_printer_uint8_field@@Base+0x20>
   32dc8:	ldrb	r6, [lr, r2]
   32dcc:	cmp	ip, r6
   32dd0:	beq	32ee8 <flatcc_json_printer_uint8_field@@Base+0x170>
   32dd4:	ldr	r2, [r1, #16]
   32dd8:	mov	r7, r3
   32ddc:	cmp	r2, #0
   32de0:	add	r2, r2, #1
   32de4:	str	r2, [r1, #16]
   32de8:	ldrne	r2, [r0, #20]
   32dec:	movne	r1, #44	; 0x2c
   32df0:	addne	ip, r2, #1
   32df4:	strne	ip, [r0, #20]
   32df8:	strbne	r1, [r2]
   32dfc:	ldrb	r1, [r0, #25]
   32e00:	mov	r4, r0
   32e04:	cmp	r1, #0
   32e08:	bne	32ef8 <flatcc_json_printer_uint8_field@@Base+0x180>
   32e0c:	ldr	r2, [r0, #20]
   32e10:	ldr	r3, [r0, #16]
   32e14:	cmp	r2, r3
   32e18:	bcc	32e28 <flatcc_json_printer_uint8_field@@Base+0xb0>
   32e1c:	ldr	r3, [r0, #44]	; 0x2c
   32e20:	blx	r3
   32e24:	ldr	r2, [r4, #20]
   32e28:	mov	r3, #34	; 0x22
   32e2c:	strb	r3, [r2]
   32e30:	ldrb	r3, [r4, #26]
   32e34:	ldr	r0, [r4, #20]
   32e38:	ldr	r2, [r4, #16]
   32e3c:	cmp	r3, #0
   32e40:	addeq	r0, r0, #1
   32e44:	add	r3, r0, r5
   32e48:	cmp	r2, r3
   32e4c:	str	r0, [r4, #20]
   32e50:	bhi	32ecc <flatcc_json_printer_uint8_field@@Base+0x154>
   32e54:	mov	r2, r5
   32e58:	mov	r1, r7
   32e5c:	mov	r0, r4
   32e60:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   32e64:	ldr	r5, [r4, #20]
   32e68:	mov	r3, #34	; 0x22
   32e6c:	strb	r3, [r5]
   32e70:	ldr	r1, [r4, #20]
   32e74:	ldrb	r3, [r4, #26]
   32e78:	clz	r3, r3
   32e7c:	lsr	r3, r3, #5
   32e80:	add	r2, r1, r3
   32e84:	add	r2, r2, #1
   32e88:	mov	r0, #58	; 0x3a
   32e8c:	str	r2, [r4, #20]
   32e90:	strb	r0, [r1, r3]
   32e94:	ldr	r3, [r4, #20]
   32e98:	mov	r2, #32
   32e9c:	mov	r0, r6
   32ea0:	strb	r2, [r3]
   32ea4:	ldrb	r3, [r4, #25]
   32ea8:	ldr	r1, [r4, #20]
   32eac:	cmp	r3, #0
   32eb0:	addne	r1, r1, #1
   32eb4:	str	r1, [r4, #20]
   32eb8:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   32ebc:	ldr	r3, [r4, #20]
   32ec0:	add	r0, r3, r0
   32ec4:	str	r0, [r4, #20]
   32ec8:	pop	{r4, r5, r6, r7, r8, pc}
   32ecc:	mov	r2, r5
   32ed0:	mov	r1, r7
   32ed4:	bl	14544 <memcpy@plt>
   32ed8:	ldr	r3, [r4, #20]
   32edc:	add	r5, r3, r5
   32ee0:	str	r5, [r4, #20]
   32ee4:	b	32e68 <flatcc_json_printer_uint8_field@@Base+0xf0>
   32ee8:	ldrb	r2, [r0, #28]
   32eec:	cmp	r2, #0
   32ef0:	beq	32dd4 <flatcc_json_printer_uint8_field@@Base+0x5c>
   32ef4:	pop	{r4, r5, r6, r7, r8, pc}
   32ef8:	ldr	r3, [r0, #20]
   32efc:	mov	r2, #10
   32f00:	add	r1, r3, #1
   32f04:	str	r1, [r0, #20]
   32f08:	strb	r2, [r3]
   32f0c:	ldrb	r8, [r0, #25]
   32f10:	ldr	r2, [r0, #32]
   32f14:	ldr	r0, [r0, #20]
   32f18:	ldr	r1, [r4, #16]
   32f1c:	mul	r8, r2, r8
   32f20:	add	r3, r0, r8
   32f24:	cmp	r1, r3
   32f28:	bcc	32f48 <flatcc_json_printer_uint8_field@@Base+0x1d0>
   32f2c:	mov	r2, r8
   32f30:	mov	r1, #32
   32f34:	bl	145bc <memset@plt>
   32f38:	ldr	r2, [r4, #20]
   32f3c:	add	r2, r2, r8
   32f40:	str	r2, [r4, #20]
   32f44:	b	32e28 <flatcc_json_printer_uint8_field@@Base+0xb0>
   32f48:	mov	r1, r8
   32f4c:	mov	r0, r4
   32f50:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   32f54:	ldr	r2, [r4, #20]
   32f58:	b	32e28 <flatcc_json_printer_uint8_field@@Base+0xb0>

00032f5c <flatcc_json_printer_uint16_field@@Base>:
   32f5c:	add	r2, r2, #2
   32f60:	ldr	ip, [r1, #8]
   32f64:	lsl	r2, r2, #1
   32f68:	push	{r4, r5, r6, r7, r8, lr}
   32f6c:	cmp	r2, ip
   32f70:	ldr	r5, [sp, #24]
   32f74:	ldrh	ip, [sp, #28]
   32f78:	blt	32f90 <flatcc_json_printer_uint16_field@@Base+0x34>
   32f7c:	ldrb	r2, [r0, #29]
   32f80:	cmp	r2, #0
   32f84:	popeq	{r4, r5, r6, r7, r8, pc}
   32f88:	mov	r6, ip
   32f8c:	b	32fb8 <flatcc_json_printer_uint16_field@@Base+0x5c>
   32f90:	ldr	lr, [r1, #4]
   32f94:	ldrh	r2, [lr, r2]
   32f98:	cmp	r2, #0
   32f9c:	beq	32f7c <flatcc_json_printer_uint16_field@@Base+0x20>
   32fa0:	ldr	lr, [r1]
   32fa4:	cmn	lr, r2
   32fa8:	beq	32f7c <flatcc_json_printer_uint16_field@@Base+0x20>
   32fac:	ldrh	r6, [lr, r2]
   32fb0:	cmp	ip, r6
   32fb4:	beq	330cc <flatcc_json_printer_uint16_field@@Base+0x170>
   32fb8:	ldr	r2, [r1, #16]
   32fbc:	mov	r7, r3
   32fc0:	cmp	r2, #0
   32fc4:	add	r2, r2, #1
   32fc8:	str	r2, [r1, #16]
   32fcc:	ldrne	r2, [r0, #20]
   32fd0:	movne	r1, #44	; 0x2c
   32fd4:	addne	ip, r2, #1
   32fd8:	strne	ip, [r0, #20]
   32fdc:	strbne	r1, [r2]
   32fe0:	ldrb	r1, [r0, #25]
   32fe4:	mov	r4, r0
   32fe8:	cmp	r1, #0
   32fec:	bne	330dc <flatcc_json_printer_uint16_field@@Base+0x180>
   32ff0:	ldr	r2, [r0, #20]
   32ff4:	ldr	r3, [r0, #16]
   32ff8:	cmp	r2, r3
   32ffc:	bcc	3300c <flatcc_json_printer_uint16_field@@Base+0xb0>
   33000:	ldr	r3, [r0, #44]	; 0x2c
   33004:	blx	r3
   33008:	ldr	r2, [r4, #20]
   3300c:	mov	r3, #34	; 0x22
   33010:	strb	r3, [r2]
   33014:	ldrb	r3, [r4, #26]
   33018:	ldr	r0, [r4, #20]
   3301c:	ldr	r2, [r4, #16]
   33020:	cmp	r3, #0
   33024:	addeq	r0, r0, #1
   33028:	add	r3, r0, r5
   3302c:	cmp	r2, r3
   33030:	str	r0, [r4, #20]
   33034:	bhi	330b0 <flatcc_json_printer_uint16_field@@Base+0x154>
   33038:	mov	r2, r5
   3303c:	mov	r1, r7
   33040:	mov	r0, r4
   33044:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   33048:	ldr	r5, [r4, #20]
   3304c:	mov	r3, #34	; 0x22
   33050:	strb	r3, [r5]
   33054:	ldr	r1, [r4, #20]
   33058:	ldrb	r3, [r4, #26]
   3305c:	clz	r3, r3
   33060:	lsr	r3, r3, #5
   33064:	add	r2, r1, r3
   33068:	add	r2, r2, #1
   3306c:	mov	r0, #58	; 0x3a
   33070:	str	r2, [r4, #20]
   33074:	strb	r0, [r1, r3]
   33078:	ldr	r3, [r4, #20]
   3307c:	mov	r2, #32
   33080:	mov	r0, r6
   33084:	strb	r2, [r3]
   33088:	ldrb	r3, [r4, #25]
   3308c:	ldr	r1, [r4, #20]
   33090:	cmp	r3, #0
   33094:	addne	r1, r1, #1
   33098:	str	r1, [r4, #20]
   3309c:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   330a0:	ldr	r3, [r4, #20]
   330a4:	add	r0, r3, r0
   330a8:	str	r0, [r4, #20]
   330ac:	pop	{r4, r5, r6, r7, r8, pc}
   330b0:	mov	r2, r5
   330b4:	mov	r1, r7
   330b8:	bl	14544 <memcpy@plt>
   330bc:	ldr	r3, [r4, #20]
   330c0:	add	r5, r3, r5
   330c4:	str	r5, [r4, #20]
   330c8:	b	3304c <flatcc_json_printer_uint16_field@@Base+0xf0>
   330cc:	ldrb	r2, [r0, #28]
   330d0:	cmp	r2, #0
   330d4:	beq	32fb8 <flatcc_json_printer_uint16_field@@Base+0x5c>
   330d8:	pop	{r4, r5, r6, r7, r8, pc}
   330dc:	ldr	r3, [r0, #20]
   330e0:	mov	r2, #10
   330e4:	add	r1, r3, #1
   330e8:	str	r1, [r0, #20]
   330ec:	strb	r2, [r3]
   330f0:	ldrb	r8, [r0, #25]
   330f4:	ldr	r2, [r0, #32]
   330f8:	ldr	r0, [r0, #20]
   330fc:	ldr	r1, [r4, #16]
   33100:	mul	r8, r2, r8
   33104:	add	r3, r0, r8
   33108:	cmp	r1, r3
   3310c:	bcc	3312c <flatcc_json_printer_uint16_field@@Base+0x1d0>
   33110:	mov	r2, r8
   33114:	mov	r1, #32
   33118:	bl	145bc <memset@plt>
   3311c:	ldr	r2, [r4, #20]
   33120:	add	r2, r2, r8
   33124:	str	r2, [r4, #20]
   33128:	b	3300c <flatcc_json_printer_uint16_field@@Base+0xb0>
   3312c:	mov	r1, r8
   33130:	mov	r0, r4
   33134:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   33138:	ldr	r2, [r4, #20]
   3313c:	b	3300c <flatcc_json_printer_uint16_field@@Base+0xb0>

00033140 <flatcc_json_printer_uint32_field@@Base>:
   33140:	add	r2, r2, #2
   33144:	ldr	ip, [r1, #8]
   33148:	lsl	r2, r2, #1
   3314c:	push	{r4, r5, r6, r7, r8, lr}
   33150:	cmp	r2, ip
   33154:	ldr	r5, [sp, #24]
   33158:	blt	33170 <flatcc_json_printer_uint32_field@@Base+0x30>
   3315c:	ldrb	r2, [r0, #29]
   33160:	cmp	r2, #0
   33164:	popeq	{r4, r5, r6, r7, r8, pc}
   33168:	ldr	r6, [sp, #28]
   3316c:	b	3319c <flatcc_json_printer_uint32_field@@Base+0x5c>
   33170:	ldr	ip, [r1, #4]
   33174:	ldrh	r2, [ip, r2]
   33178:	cmp	r2, #0
   3317c:	beq	3315c <flatcc_json_printer_uint32_field@@Base+0x1c>
   33180:	ldr	ip, [r1]
   33184:	cmn	ip, r2
   33188:	beq	3315c <flatcc_json_printer_uint32_field@@Base+0x1c>
   3318c:	ldr	r6, [ip, r2]
   33190:	ldr	r2, [sp, #28]
   33194:	cmp	r2, r6
   33198:	beq	332b0 <flatcc_json_printer_uint32_field@@Base+0x170>
   3319c:	ldr	r2, [r1, #16]
   331a0:	mov	r7, r3
   331a4:	cmp	r2, #0
   331a8:	add	r2, r2, #1
   331ac:	str	r2, [r1, #16]
   331b0:	ldrne	r2, [r0, #20]
   331b4:	movne	r1, #44	; 0x2c
   331b8:	addne	ip, r2, #1
   331bc:	strne	ip, [r0, #20]
   331c0:	strbne	r1, [r2]
   331c4:	ldrb	r1, [r0, #25]
   331c8:	mov	r4, r0
   331cc:	cmp	r1, #0
   331d0:	bne	332c0 <flatcc_json_printer_uint32_field@@Base+0x180>
   331d4:	ldr	r2, [r0, #20]
   331d8:	ldr	r3, [r0, #16]
   331dc:	cmp	r2, r3
   331e0:	bcc	331f0 <flatcc_json_printer_uint32_field@@Base+0xb0>
   331e4:	ldr	r3, [r0, #44]	; 0x2c
   331e8:	blx	r3
   331ec:	ldr	r2, [r4, #20]
   331f0:	mov	r3, #34	; 0x22
   331f4:	strb	r3, [r2]
   331f8:	ldrb	r3, [r4, #26]
   331fc:	ldr	r0, [r4, #20]
   33200:	ldr	r2, [r4, #16]
   33204:	cmp	r3, #0
   33208:	addeq	r0, r0, #1
   3320c:	add	r3, r0, r5
   33210:	cmp	r2, r3
   33214:	str	r0, [r4, #20]
   33218:	bhi	33294 <flatcc_json_printer_uint32_field@@Base+0x154>
   3321c:	mov	r2, r5
   33220:	mov	r1, r7
   33224:	mov	r0, r4
   33228:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3322c:	ldr	r5, [r4, #20]
   33230:	mov	r3, #34	; 0x22
   33234:	strb	r3, [r5]
   33238:	ldr	r1, [r4, #20]
   3323c:	ldrb	r3, [r4, #26]
   33240:	clz	r3, r3
   33244:	lsr	r3, r3, #5
   33248:	add	r2, r1, r3
   3324c:	add	r2, r2, #1
   33250:	mov	r0, #58	; 0x3a
   33254:	str	r2, [r4, #20]
   33258:	strb	r0, [r1, r3]
   3325c:	ldr	r3, [r4, #20]
   33260:	mov	r2, #32
   33264:	mov	r0, r6
   33268:	strb	r2, [r3]
   3326c:	ldrb	r3, [r4, #25]
   33270:	ldr	r1, [r4, #20]
   33274:	cmp	r3, #0
   33278:	addne	r1, r1, #1
   3327c:	str	r1, [r4, #20]
   33280:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   33284:	ldr	r3, [r4, #20]
   33288:	add	r0, r3, r0
   3328c:	str	r0, [r4, #20]
   33290:	pop	{r4, r5, r6, r7, r8, pc}
   33294:	mov	r2, r5
   33298:	mov	r1, r7
   3329c:	bl	14544 <memcpy@plt>
   332a0:	ldr	r3, [r4, #20]
   332a4:	add	r5, r3, r5
   332a8:	str	r5, [r4, #20]
   332ac:	b	33230 <flatcc_json_printer_uint32_field@@Base+0xf0>
   332b0:	ldrb	r2, [r0, #28]
   332b4:	cmp	r2, #0
   332b8:	beq	3319c <flatcc_json_printer_uint32_field@@Base+0x5c>
   332bc:	pop	{r4, r5, r6, r7, r8, pc}
   332c0:	ldr	r3, [r0, #20]
   332c4:	mov	r2, #10
   332c8:	add	r1, r3, #1
   332cc:	str	r1, [r0, #20]
   332d0:	strb	r2, [r3]
   332d4:	ldrb	r8, [r0, #25]
   332d8:	ldr	r2, [r0, #32]
   332dc:	ldr	r0, [r0, #20]
   332e0:	ldr	r1, [r4, #16]
   332e4:	mul	r8, r2, r8
   332e8:	add	r3, r0, r8
   332ec:	cmp	r1, r3
   332f0:	bcc	33310 <flatcc_json_printer_uint32_field@@Base+0x1d0>
   332f4:	mov	r2, r8
   332f8:	mov	r1, #32
   332fc:	bl	145bc <memset@plt>
   33300:	ldr	r2, [r4, #20]
   33304:	add	r2, r2, r8
   33308:	str	r2, [r4, #20]
   3330c:	b	331f0 <flatcc_json_printer_uint32_field@@Base+0xb0>
   33310:	mov	r1, r8
   33314:	mov	r0, r4
   33318:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3331c:	ldr	r2, [r4, #20]
   33320:	b	331f0 <flatcc_json_printer_uint32_field@@Base+0xb0>

00033324 <flatcc_json_printer_uint64_field@@Base>:
   33324:	add	r2, r2, #2
   33328:	ldr	ip, [r1, #8]
   3332c:	lsl	r2, r2, #1
   33330:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33334:	cmp	r2, ip
   33338:	ldr	r5, [sp, #32]
   3333c:	blt	33354 <flatcc_json_printer_uint64_field@@Base+0x30>
   33340:	ldrb	r2, [r0, #29]
   33344:	cmp	r2, #0
   33348:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3334c:	ldrd	r6, [sp, #40]	; 0x28
   33350:	b	33384 <flatcc_json_printer_uint64_field@@Base+0x60>
   33354:	ldr	ip, [r1, #4]
   33358:	ldrh	r2, [ip, r2]
   3335c:	cmp	r2, #0
   33360:	beq	33340 <flatcc_json_printer_uint64_field@@Base+0x1c>
   33364:	ldr	ip, [r1]
   33368:	cmn	ip, r2
   3336c:	beq	33340 <flatcc_json_printer_uint64_field@@Base+0x1c>
   33370:	ldrd	r6, [ip, r2]
   33374:	ldrd	r8, [sp, #40]	; 0x28
   33378:	cmp	r9, r7
   3337c:	cmpeq	r8, r6
   33380:	beq	3349c <flatcc_json_printer_uint64_field@@Base+0x178>
   33384:	ldr	r2, [r1, #16]
   33388:	mov	r8, r3
   3338c:	cmp	r2, #0
   33390:	add	r2, r2, #1
   33394:	str	r2, [r1, #16]
   33398:	ldrne	r2, [r0, #20]
   3339c:	movne	r1, #44	; 0x2c
   333a0:	addne	ip, r2, #1
   333a4:	strne	ip, [r0, #20]
   333a8:	strbne	r1, [r2]
   333ac:	ldrb	r1, [r0, #25]
   333b0:	mov	r4, r0
   333b4:	cmp	r1, #0
   333b8:	bne	334ac <flatcc_json_printer_uint64_field@@Base+0x188>
   333bc:	ldr	r2, [r0, #20]
   333c0:	ldr	r3, [r0, #16]
   333c4:	cmp	r2, r3
   333c8:	bcc	333d8 <flatcc_json_printer_uint64_field@@Base+0xb4>
   333cc:	ldr	r3, [r0, #44]	; 0x2c
   333d0:	blx	r3
   333d4:	ldr	r2, [r4, #20]
   333d8:	mov	r3, #34	; 0x22
   333dc:	strb	r3, [r2]
   333e0:	ldrb	r3, [r4, #26]
   333e4:	ldr	r0, [r4, #20]
   333e8:	ldr	r2, [r4, #16]
   333ec:	cmp	r3, #0
   333f0:	addeq	r0, r0, #1
   333f4:	add	r3, r0, r5
   333f8:	cmp	r2, r3
   333fc:	str	r0, [r4, #20]
   33400:	bhi	33480 <flatcc_json_printer_uint64_field@@Base+0x15c>
   33404:	mov	r2, r5
   33408:	mov	r1, r8
   3340c:	mov	r0, r4
   33410:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   33414:	ldr	r5, [r4, #20]
   33418:	mov	r3, #34	; 0x22
   3341c:	strb	r3, [r5]
   33420:	ldr	r1, [r4, #20]
   33424:	ldrb	r3, [r4, #26]
   33428:	clz	r3, r3
   3342c:	lsr	r3, r3, #5
   33430:	add	r2, r1, r3
   33434:	add	r2, r2, #1
   33438:	mov	r0, #58	; 0x3a
   3343c:	str	r2, [r4, #20]
   33440:	strb	r0, [r1, r3]
   33444:	ldr	r3, [r4, #20]
   33448:	mov	r2, #32
   3344c:	mov	r0, r6
   33450:	strb	r2, [r3]
   33454:	ldrb	r3, [r4, #25]
   33458:	ldr	r2, [r4, #20]
   3345c:	mov	r1, r7
   33460:	cmp	r3, #0
   33464:	addne	r2, r2, #1
   33468:	str	r2, [r4, #20]
   3346c:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   33470:	ldr	r3, [r4, #20]
   33474:	add	r0, r3, r0
   33478:	str	r0, [r4, #20]
   3347c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33480:	mov	r2, r5
   33484:	mov	r1, r8
   33488:	bl	14544 <memcpy@plt>
   3348c:	ldr	r3, [r4, #20]
   33490:	add	r5, r3, r5
   33494:	str	r5, [r4, #20]
   33498:	b	33418 <flatcc_json_printer_uint64_field@@Base+0xf4>
   3349c:	ldrb	r2, [r0, #28]
   334a0:	cmp	r2, #0
   334a4:	beq	33384 <flatcc_json_printer_uint64_field@@Base+0x60>
   334a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   334ac:	ldr	r3, [r0, #20]
   334b0:	mov	r2, #10
   334b4:	add	r1, r3, #1
   334b8:	str	r1, [r0, #20]
   334bc:	strb	r2, [r3]
   334c0:	ldrb	r3, [r0, #25]
   334c4:	ldr	r2, [r0, #32]
   334c8:	ldr	r0, [r0, #20]
   334cc:	ldr	r1, [r4, #16]
   334d0:	mul	r9, r2, r3
   334d4:	add	r3, r0, r9
   334d8:	cmp	r1, r3
   334dc:	bcc	334fc <flatcc_json_printer_uint64_field@@Base+0x1d8>
   334e0:	mov	r2, r9
   334e4:	mov	r1, #32
   334e8:	bl	145bc <memset@plt>
   334ec:	ldr	r2, [r4, #20]
   334f0:	add	r2, r2, r9
   334f4:	str	r2, [r4, #20]
   334f8:	b	333d8 <flatcc_json_printer_uint64_field@@Base+0xb4>
   334fc:	mov	r1, r9
   33500:	mov	r0, r4
   33504:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   33508:	ldr	r2, [r4, #20]
   3350c:	b	333d8 <flatcc_json_printer_uint64_field@@Base+0xb4>

00033510 <flatcc_json_printer_int8_field@@Base>:
   33510:	add	r2, r2, #2
   33514:	ldr	ip, [r1, #8]
   33518:	lsl	r2, r2, #1
   3351c:	push	{r4, r5, r6, r7, r8, lr}
   33520:	cmp	r2, ip
   33524:	ldr	r6, [sp, #24]
   33528:	ldrsb	ip, [sp, #28]
   3352c:	blt	33544 <flatcc_json_printer_int8_field@@Base+0x34>
   33530:	ldrb	r2, [r0, #29]
   33534:	cmp	r2, #0
   33538:	popeq	{r4, r5, r6, r7, r8, pc}
   3353c:	mov	r5, ip
   33540:	b	3356c <flatcc_json_printer_int8_field@@Base+0x5c>
   33544:	ldr	lr, [r1, #4]
   33548:	ldrh	r2, [lr, r2]
   3354c:	cmp	r2, #0
   33550:	beq	33530 <flatcc_json_printer_int8_field@@Base+0x20>
   33554:	ldr	lr, [r1]
   33558:	cmn	lr, r2
   3355c:	beq	33530 <flatcc_json_printer_int8_field@@Base+0x20>
   33560:	ldrsb	r5, [lr, r2]
   33564:	cmp	ip, r5
   33568:	beq	336a4 <flatcc_json_printer_int8_field@@Base+0x194>
   3356c:	ldr	r2, [r1, #16]
   33570:	mov	r7, r3
   33574:	cmp	r2, #0
   33578:	add	r2, r2, #1
   3357c:	str	r2, [r1, #16]
   33580:	ldrne	r2, [r0, #20]
   33584:	movne	r1, #44	; 0x2c
   33588:	addne	ip, r2, #1
   3358c:	strne	ip, [r0, #20]
   33590:	strbne	r1, [r2]
   33594:	ldrb	r1, [r0, #25]
   33598:	mov	r4, r0
   3359c:	cmp	r1, #0
   335a0:	bne	336b4 <flatcc_json_printer_int8_field@@Base+0x1a4>
   335a4:	ldr	r2, [r0, #20]
   335a8:	ldr	r3, [r0, #16]
   335ac:	cmp	r2, r3
   335b0:	bcc	335c0 <flatcc_json_printer_int8_field@@Base+0xb0>
   335b4:	ldr	r3, [r0, #44]	; 0x2c
   335b8:	blx	r3
   335bc:	ldr	r2, [r4, #20]
   335c0:	mov	r3, #34	; 0x22
   335c4:	strb	r3, [r2]
   335c8:	ldrb	r3, [r4, #26]
   335cc:	ldr	r0, [r4, #20]
   335d0:	ldr	r2, [r4, #16]
   335d4:	cmp	r3, #0
   335d8:	addeq	r0, r0, #1
   335dc:	add	r3, r0, r6
   335e0:	cmp	r2, r3
   335e4:	str	r0, [r4, #20]
   335e8:	bhi	33688 <flatcc_json_printer_int8_field@@Base+0x178>
   335ec:	mov	r2, r6
   335f0:	mov	r1, r7
   335f4:	mov	r0, r4
   335f8:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   335fc:	ldr	r6, [r4, #20]
   33600:	mov	r3, #34	; 0x22
   33604:	strb	r3, [r6]
   33608:	ldr	r1, [r4, #20]
   3360c:	ldrb	r3, [r4, #26]
   33610:	clz	r3, r3
   33614:	lsr	r3, r3, #5
   33618:	add	r2, r1, r3
   3361c:	mov	r0, #58	; 0x3a
   33620:	add	r2, r2, #1
   33624:	str	r2, [r4, #20]
   33628:	strb	r0, [r1, r3]
   3362c:	ldr	r3, [r4, #20]
   33630:	mov	r2, #32
   33634:	lsr	r6, r5, #31
   33638:	strb	r2, [r3]
   3363c:	ldrb	r3, [r4, #25]
   33640:	ldr	r2, [r4, #20]
   33644:	adds	r3, r3, #0
   33648:	movne	r3, #1
   3364c:	cmp	r5, #0
   33650:	rsblt	r5, r5, #0
   33654:	add	r1, r2, r3
   33658:	sxtblt	r5, r5
   3365c:	movlt	r0, #45	; 0x2d
   33660:	str	r1, [r4, #20]
   33664:	strblt	r0, [r2, r3]
   33668:	addlt	r1, r1, #1
   3366c:	uxtb	r0, r5
   33670:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   33674:	ldr	r3, [r4, #20]
   33678:	add	r0, r6, r0
   3367c:	add	r3, r3, r0
   33680:	str	r3, [r4, #20]
   33684:	pop	{r4, r5, r6, r7, r8, pc}
   33688:	mov	r2, r6
   3368c:	mov	r1, r7
   33690:	bl	14544 <memcpy@plt>
   33694:	ldr	r3, [r4, #20]
   33698:	add	r6, r3, r6
   3369c:	str	r6, [r4, #20]
   336a0:	b	33600 <flatcc_json_printer_int8_field@@Base+0xf0>
   336a4:	ldrb	r2, [r0, #28]
   336a8:	cmp	r2, #0
   336ac:	beq	3356c <flatcc_json_printer_int8_field@@Base+0x5c>
   336b0:	pop	{r4, r5, r6, r7, r8, pc}
   336b4:	ldr	r3, [r0, #20]
   336b8:	mov	r2, #10
   336bc:	add	r1, r3, #1
   336c0:	str	r1, [r0, #20]
   336c4:	strb	r2, [r3]
   336c8:	ldrb	r8, [r0, #25]
   336cc:	ldr	r2, [r0, #32]
   336d0:	ldr	r0, [r0, #20]
   336d4:	ldr	r1, [r4, #16]
   336d8:	mul	r8, r2, r8
   336dc:	add	r3, r0, r8
   336e0:	cmp	r1, r3
   336e4:	bcc	33704 <flatcc_json_printer_int8_field@@Base+0x1f4>
   336e8:	mov	r2, r8
   336ec:	mov	r1, #32
   336f0:	bl	145bc <memset@plt>
   336f4:	ldr	r2, [r4, #20]
   336f8:	add	r2, r2, r8
   336fc:	str	r2, [r4, #20]
   33700:	b	335c0 <flatcc_json_printer_int8_field@@Base+0xb0>
   33704:	mov	r1, r8
   33708:	mov	r0, r4
   3370c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   33710:	ldr	r2, [r4, #20]
   33714:	b	335c0 <flatcc_json_printer_int8_field@@Base+0xb0>

00033718 <flatcc_json_printer_int16_field@@Base>:
   33718:	add	r2, r2, #2
   3371c:	ldr	ip, [r1, #8]
   33720:	lsl	r2, r2, #1
   33724:	push	{r4, r5, r6, r7, r8, lr}
   33728:	cmp	r2, ip
   3372c:	ldr	r6, [sp, #24]
   33730:	ldrsh	ip, [sp, #28]
   33734:	blt	3374c <flatcc_json_printer_int16_field@@Base+0x34>
   33738:	ldrb	r2, [r0, #29]
   3373c:	cmp	r2, #0
   33740:	popeq	{r4, r5, r6, r7, r8, pc}
   33744:	mov	r5, ip
   33748:	b	33774 <flatcc_json_printer_int16_field@@Base+0x5c>
   3374c:	ldr	lr, [r1, #4]
   33750:	ldrh	r2, [lr, r2]
   33754:	cmp	r2, #0
   33758:	beq	33738 <flatcc_json_printer_int16_field@@Base+0x20>
   3375c:	ldr	lr, [r1]
   33760:	cmn	lr, r2
   33764:	beq	33738 <flatcc_json_printer_int16_field@@Base+0x20>
   33768:	ldrsh	r5, [lr, r2]
   3376c:	cmp	ip, r5
   33770:	beq	338ac <flatcc_json_printer_int16_field@@Base+0x194>
   33774:	ldr	r2, [r1, #16]
   33778:	mov	r7, r3
   3377c:	cmp	r2, #0
   33780:	add	r2, r2, #1
   33784:	str	r2, [r1, #16]
   33788:	ldrne	r2, [r0, #20]
   3378c:	movne	r1, #44	; 0x2c
   33790:	addne	ip, r2, #1
   33794:	strne	ip, [r0, #20]
   33798:	strbne	r1, [r2]
   3379c:	ldrb	r1, [r0, #25]
   337a0:	mov	r4, r0
   337a4:	cmp	r1, #0
   337a8:	bne	338bc <flatcc_json_printer_int16_field@@Base+0x1a4>
   337ac:	ldr	r2, [r0, #20]
   337b0:	ldr	r3, [r0, #16]
   337b4:	cmp	r2, r3
   337b8:	bcc	337c8 <flatcc_json_printer_int16_field@@Base+0xb0>
   337bc:	ldr	r3, [r0, #44]	; 0x2c
   337c0:	blx	r3
   337c4:	ldr	r2, [r4, #20]
   337c8:	mov	r3, #34	; 0x22
   337cc:	strb	r3, [r2]
   337d0:	ldrb	r3, [r4, #26]
   337d4:	ldr	r0, [r4, #20]
   337d8:	ldr	r2, [r4, #16]
   337dc:	cmp	r3, #0
   337e0:	addeq	r0, r0, #1
   337e4:	add	r3, r0, r6
   337e8:	cmp	r2, r3
   337ec:	str	r0, [r4, #20]
   337f0:	bhi	33890 <flatcc_json_printer_int16_field@@Base+0x178>
   337f4:	mov	r2, r6
   337f8:	mov	r1, r7
   337fc:	mov	r0, r4
   33800:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   33804:	ldr	r6, [r4, #20]
   33808:	mov	r3, #34	; 0x22
   3380c:	strb	r3, [r6]
   33810:	ldr	r1, [r4, #20]
   33814:	ldrb	r3, [r4, #26]
   33818:	clz	r3, r3
   3381c:	lsr	r3, r3, #5
   33820:	add	r2, r1, r3
   33824:	mov	r0, #58	; 0x3a
   33828:	add	r2, r2, #1
   3382c:	str	r2, [r4, #20]
   33830:	strb	r0, [r1, r3]
   33834:	ldr	r3, [r4, #20]
   33838:	mov	r2, #32
   3383c:	lsr	r6, r5, #31
   33840:	strb	r2, [r3]
   33844:	ldrb	r3, [r4, #25]
   33848:	ldr	r2, [r4, #20]
   3384c:	adds	r3, r3, #0
   33850:	movne	r3, #1
   33854:	cmp	r5, #0
   33858:	rsblt	r5, r5, #0
   3385c:	add	r1, r2, r3
   33860:	sxthlt	r5, r5
   33864:	movlt	r0, #45	; 0x2d
   33868:	str	r1, [r4, #20]
   3386c:	strblt	r0, [r2, r3]
   33870:	addlt	r1, r1, #1
   33874:	uxth	r0, r5
   33878:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   3387c:	ldr	r3, [r4, #20]
   33880:	add	r0, r6, r0
   33884:	add	r3, r3, r0
   33888:	str	r3, [r4, #20]
   3388c:	pop	{r4, r5, r6, r7, r8, pc}
   33890:	mov	r2, r6
   33894:	mov	r1, r7
   33898:	bl	14544 <memcpy@plt>
   3389c:	ldr	r3, [r4, #20]
   338a0:	add	r6, r3, r6
   338a4:	str	r6, [r4, #20]
   338a8:	b	33808 <flatcc_json_printer_int16_field@@Base+0xf0>
   338ac:	ldrb	r2, [r0, #28]
   338b0:	cmp	r2, #0
   338b4:	beq	33774 <flatcc_json_printer_int16_field@@Base+0x5c>
   338b8:	pop	{r4, r5, r6, r7, r8, pc}
   338bc:	ldr	r3, [r0, #20]
   338c0:	mov	r2, #10
   338c4:	add	r1, r3, #1
   338c8:	str	r1, [r0, #20]
   338cc:	strb	r2, [r3]
   338d0:	ldrb	r8, [r0, #25]
   338d4:	ldr	r2, [r0, #32]
   338d8:	ldr	r0, [r0, #20]
   338dc:	ldr	r1, [r4, #16]
   338e0:	mul	r8, r2, r8
   338e4:	add	r3, r0, r8
   338e8:	cmp	r1, r3
   338ec:	bcc	3390c <flatcc_json_printer_int16_field@@Base+0x1f4>
   338f0:	mov	r2, r8
   338f4:	mov	r1, #32
   338f8:	bl	145bc <memset@plt>
   338fc:	ldr	r2, [r4, #20]
   33900:	add	r2, r2, r8
   33904:	str	r2, [r4, #20]
   33908:	b	337c8 <flatcc_json_printer_int16_field@@Base+0xb0>
   3390c:	mov	r1, r8
   33910:	mov	r0, r4
   33914:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   33918:	ldr	r2, [r4, #20]
   3391c:	b	337c8 <flatcc_json_printer_int16_field@@Base+0xb0>

00033920 <flatcc_json_printer_int32_field@@Base>:
   33920:	add	r2, r2, #2
   33924:	ldr	ip, [r1, #8]
   33928:	lsl	r2, r2, #1
   3392c:	push	{r4, r5, r6, r7, r8, lr}
   33930:	cmp	r2, ip
   33934:	ldr	r6, [sp, #24]
   33938:	blt	33950 <flatcc_json_printer_int32_field@@Base+0x30>
   3393c:	ldrb	r2, [r0, #29]
   33940:	cmp	r2, #0
   33944:	popeq	{r4, r5, r6, r7, r8, pc}
   33948:	ldr	r5, [sp, #28]
   3394c:	b	3397c <flatcc_json_printer_int32_field@@Base+0x5c>
   33950:	ldr	ip, [r1, #4]
   33954:	ldrh	r2, [ip, r2]
   33958:	cmp	r2, #0
   3395c:	beq	3393c <flatcc_json_printer_int32_field@@Base+0x1c>
   33960:	ldr	ip, [r1]
   33964:	cmn	ip, r2
   33968:	beq	3393c <flatcc_json_printer_int32_field@@Base+0x1c>
   3396c:	ldr	r5, [ip, r2]
   33970:	ldr	r2, [sp, #28]
   33974:	cmp	r2, r5
   33978:	beq	33ab0 <flatcc_json_printer_int32_field@@Base+0x190>
   3397c:	ldr	r2, [r1, #16]
   33980:	mov	r7, r3
   33984:	cmp	r2, #0
   33988:	add	r2, r2, #1
   3398c:	str	r2, [r1, #16]
   33990:	ldrne	r2, [r0, #20]
   33994:	movne	r1, #44	; 0x2c
   33998:	addne	ip, r2, #1
   3399c:	strne	ip, [r0, #20]
   339a0:	strbne	r1, [r2]
   339a4:	ldrb	r1, [r0, #25]
   339a8:	mov	r4, r0
   339ac:	cmp	r1, #0
   339b0:	bne	33ac0 <flatcc_json_printer_int32_field@@Base+0x1a0>
   339b4:	ldr	r2, [r0, #20]
   339b8:	ldr	r3, [r0, #16]
   339bc:	cmp	r2, r3
   339c0:	bcc	339d0 <flatcc_json_printer_int32_field@@Base+0xb0>
   339c4:	ldr	r3, [r0, #44]	; 0x2c
   339c8:	blx	r3
   339cc:	ldr	r2, [r4, #20]
   339d0:	mov	r3, #34	; 0x22
   339d4:	strb	r3, [r2]
   339d8:	ldrb	r3, [r4, #26]
   339dc:	ldr	r0, [r4, #20]
   339e0:	ldr	r2, [r4, #16]
   339e4:	cmp	r3, #0
   339e8:	addeq	r0, r0, #1
   339ec:	add	r3, r0, r6
   339f0:	cmp	r2, r3
   339f4:	str	r0, [r4, #20]
   339f8:	bhi	33a94 <flatcc_json_printer_int32_field@@Base+0x174>
   339fc:	mov	r2, r6
   33a00:	mov	r1, r7
   33a04:	mov	r0, r4
   33a08:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   33a0c:	ldr	r6, [r4, #20]
   33a10:	mov	r3, #34	; 0x22
   33a14:	strb	r3, [r6]
   33a18:	ldr	r1, [r4, #20]
   33a1c:	ldrb	r3, [r4, #26]
   33a20:	clz	r3, r3
   33a24:	lsr	r3, r3, #5
   33a28:	add	r2, r1, r3
   33a2c:	mov	r0, #58	; 0x3a
   33a30:	add	r2, r2, #1
   33a34:	str	r2, [r4, #20]
   33a38:	strb	r0, [r1, r3]
   33a3c:	ldr	r3, [r4, #20]
   33a40:	mov	r2, #32
   33a44:	lsr	r6, r5, #31
   33a48:	strb	r2, [r3]
   33a4c:	ldrb	r3, [r4, #25]
   33a50:	ldr	r2, [r4, #20]
   33a54:	adds	r3, r3, #0
   33a58:	movne	r3, #1
   33a5c:	cmp	r5, #0
   33a60:	add	r1, r2, r3
   33a64:	movlt	r0, #45	; 0x2d
   33a68:	rsblt	r5, r5, #0
   33a6c:	str	r1, [r4, #20]
   33a70:	strblt	r0, [r2, r3]
   33a74:	addlt	r1, r1, #1
   33a78:	mov	r0, r5
   33a7c:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   33a80:	ldr	r3, [r4, #20]
   33a84:	add	r0, r6, r0
   33a88:	add	r3, r3, r0
   33a8c:	str	r3, [r4, #20]
   33a90:	pop	{r4, r5, r6, r7, r8, pc}
   33a94:	mov	r2, r6
   33a98:	mov	r1, r7
   33a9c:	bl	14544 <memcpy@plt>
   33aa0:	ldr	r3, [r4, #20]
   33aa4:	add	r6, r3, r6
   33aa8:	str	r6, [r4, #20]
   33aac:	b	33a10 <flatcc_json_printer_int32_field@@Base+0xf0>
   33ab0:	ldrb	r2, [r0, #28]
   33ab4:	cmp	r2, #0
   33ab8:	beq	3397c <flatcc_json_printer_int32_field@@Base+0x5c>
   33abc:	pop	{r4, r5, r6, r7, r8, pc}
   33ac0:	ldr	r3, [r0, #20]
   33ac4:	mov	r2, #10
   33ac8:	add	r1, r3, #1
   33acc:	str	r1, [r0, #20]
   33ad0:	strb	r2, [r3]
   33ad4:	ldrb	r8, [r0, #25]
   33ad8:	ldr	r2, [r0, #32]
   33adc:	ldr	r0, [r0, #20]
   33ae0:	ldr	r1, [r4, #16]
   33ae4:	mul	r8, r2, r8
   33ae8:	add	r3, r0, r8
   33aec:	cmp	r1, r3
   33af0:	bcc	33b10 <flatcc_json_printer_int32_field@@Base+0x1f0>
   33af4:	mov	r2, r8
   33af8:	mov	r1, #32
   33afc:	bl	145bc <memset@plt>
   33b00:	ldr	r2, [r4, #20]
   33b04:	add	r2, r2, r8
   33b08:	str	r2, [r4, #20]
   33b0c:	b	339d0 <flatcc_json_printer_int32_field@@Base+0xb0>
   33b10:	mov	r1, r8
   33b14:	mov	r0, r4
   33b18:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   33b1c:	ldr	r2, [r4, #20]
   33b20:	b	339d0 <flatcc_json_printer_int32_field@@Base+0xb0>

00033b24 <flatcc_json_printer_int64_field@@Base>:
   33b24:	add	r2, r2, #2
   33b28:	ldr	ip, [r1, #8]
   33b2c:	lsl	r2, r2, #1
   33b30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33b34:	cmp	r2, ip
   33b38:	ldr	r5, [sp, #32]
   33b3c:	blt	33b54 <flatcc_json_printer_int64_field@@Base+0x30>
   33b40:	ldrb	r2, [r0, #29]
   33b44:	cmp	r2, #0
   33b48:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   33b4c:	ldrd	r6, [sp, #40]	; 0x28
   33b50:	b	33b84 <flatcc_json_printer_int64_field@@Base+0x60>
   33b54:	ldr	ip, [r1, #4]
   33b58:	ldrh	r2, [ip, r2]
   33b5c:	cmp	r2, #0
   33b60:	beq	33b40 <flatcc_json_printer_int64_field@@Base+0x1c>
   33b64:	ldr	ip, [r1]
   33b68:	cmn	ip, r2
   33b6c:	beq	33b40 <flatcc_json_printer_int64_field@@Base+0x1c>
   33b70:	ldrd	r6, [ip, r2]
   33b74:	ldrd	r8, [sp, #40]	; 0x28
   33b78:	cmp	r9, r7
   33b7c:	cmpeq	r8, r6
   33b80:	beq	33cb4 <flatcc_json_printer_int64_field@@Base+0x190>
   33b84:	ldr	r2, [r1, #16]
   33b88:	mov	r8, r3
   33b8c:	cmp	r2, #0
   33b90:	add	r2, r2, #1
   33b94:	str	r2, [r1, #16]
   33b98:	ldrne	r2, [r0, #20]
   33b9c:	movne	r1, #44	; 0x2c
   33ba0:	addne	ip, r2, #1
   33ba4:	strne	ip, [r0, #20]
   33ba8:	strbne	r1, [r2]
   33bac:	ldrb	r1, [r0, #25]
   33bb0:	mov	r4, r0
   33bb4:	cmp	r1, #0
   33bb8:	bne	33cdc <flatcc_json_printer_int64_field@@Base+0x1b8>
   33bbc:	ldr	r2, [r0, #20]
   33bc0:	ldr	r3, [r0, #16]
   33bc4:	cmp	r2, r3
   33bc8:	bcc	33bd8 <flatcc_json_printer_int64_field@@Base+0xb4>
   33bcc:	ldr	r3, [r0, #44]	; 0x2c
   33bd0:	blx	r3
   33bd4:	ldr	r2, [r4, #20]
   33bd8:	mov	r3, #34	; 0x22
   33bdc:	strb	r3, [r2]
   33be0:	ldrb	r3, [r4, #26]
   33be4:	ldr	r0, [r4, #20]
   33be8:	ldr	r2, [r4, #16]
   33bec:	cmp	r3, #0
   33bf0:	addeq	r0, r0, #1
   33bf4:	add	r3, r0, r5
   33bf8:	cmp	r2, r3
   33bfc:	str	r0, [r4, #20]
   33c00:	bhi	33c98 <flatcc_json_printer_int64_field@@Base+0x174>
   33c04:	mov	r2, r5
   33c08:	mov	r1, r8
   33c0c:	mov	r0, r4
   33c10:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   33c14:	ldr	r5, [r4, #20]
   33c18:	mov	r3, #34	; 0x22
   33c1c:	strb	r3, [r5]
   33c20:	ldr	r1, [r4, #20]
   33c24:	ldrb	r3, [r4, #26]
   33c28:	clz	r3, r3
   33c2c:	lsr	r3, r3, #5
   33c30:	add	r2, r1, r3
   33c34:	add	r2, r2, #1
   33c38:	mov	r0, #58	; 0x3a
   33c3c:	str	r2, [r4, #20]
   33c40:	strb	r0, [r1, r3]
   33c44:	ldr	r3, [r4, #20]
   33c48:	mov	r2, #32
   33c4c:	lsr	r5, r7, #31
   33c50:	strb	r2, [r3]
   33c54:	ldrb	r3, [r4, #25]
   33c58:	ldr	r1, [r4, #20]
   33c5c:	adds	r3, r3, #0
   33c60:	movne	r3, #1
   33c64:	cmp	r6, #0
   33c68:	add	r2, r1, r3
   33c6c:	sbcs	r0, r7, #0
   33c70:	str	r2, [r4, #20]
   33c74:	blt	33cc4 <flatcc_json_printer_int64_field@@Base+0x1a0>
   33c78:	mov	r0, r6
   33c7c:	mov	r1, r7
   33c80:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   33c84:	ldr	r3, [r4, #20]
   33c88:	add	r0, r5, r0
   33c8c:	add	r3, r3, r0
   33c90:	str	r3, [r4, #20]
   33c94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33c98:	mov	r2, r5
   33c9c:	mov	r1, r8
   33ca0:	bl	14544 <memcpy@plt>
   33ca4:	ldr	r3, [r4, #20]
   33ca8:	add	r5, r3, r5
   33cac:	str	r5, [r4, #20]
   33cb0:	b	33c18 <flatcc_json_printer_int64_field@@Base+0xf4>
   33cb4:	ldrb	r2, [r0, #28]
   33cb8:	cmp	r2, #0
   33cbc:	beq	33b84 <flatcc_json_printer_int64_field@@Base+0x60>
   33cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33cc4:	rsbs	r6, r6, #0
   33cc8:	mov	r0, #45	; 0x2d
   33ccc:	rsc	r7, r7, #0
   33cd0:	add	r2, r2, #1
   33cd4:	strb	r0, [r1, r3]
   33cd8:	b	33c78 <flatcc_json_printer_int64_field@@Base+0x154>
   33cdc:	ldr	r3, [r0, #20]
   33ce0:	mov	r2, #10
   33ce4:	add	r1, r3, #1
   33ce8:	str	r1, [r0, #20]
   33cec:	strb	r2, [r3]
   33cf0:	ldrb	r3, [r0, #25]
   33cf4:	ldr	r2, [r0, #32]
   33cf8:	ldr	r0, [r0, #20]
   33cfc:	ldr	r1, [r4, #16]
   33d00:	mul	r9, r2, r3
   33d04:	add	r3, r0, r9
   33d08:	cmp	r1, r3
   33d0c:	bcc	33d2c <flatcc_json_printer_int64_field@@Base+0x208>
   33d10:	mov	r2, r9
   33d14:	mov	r1, #32
   33d18:	bl	145bc <memset@plt>
   33d1c:	ldr	r2, [r4, #20]
   33d20:	add	r2, r2, r9
   33d24:	str	r2, [r4, #20]
   33d28:	b	33bd8 <flatcc_json_printer_int64_field@@Base+0xb4>
   33d2c:	mov	r1, r9
   33d30:	mov	r0, r4
   33d34:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   33d38:	ldr	r2, [r4, #20]
   33d3c:	b	33bd8 <flatcc_json_printer_int64_field@@Base+0xb4>

00033d40 <flatcc_json_printer_bool_field@@Base>:
   33d40:	add	r2, r2, #2
   33d44:	ldr	ip, [r1, #8]
   33d48:	lsl	r2, r2, #1
   33d4c:	push	{r4, r5, r6, r7, r8, lr}
   33d50:	cmp	r2, ip
   33d54:	ldr	r5, [sp, #24]
   33d58:	ldrb	ip, [sp, #28]
   33d5c:	blt	33d74 <flatcc_json_printer_bool_field@@Base+0x34>
   33d60:	ldrb	r2, [r0, #29]
   33d64:	cmp	r2, #0
   33d68:	popeq	{r4, r5, r6, r7, r8, pc}
   33d6c:	mov	r6, ip
   33d70:	b	33d9c <flatcc_json_printer_bool_field@@Base+0x5c>
   33d74:	ldr	lr, [r1, #4]
   33d78:	ldrh	r2, [lr, r2]
   33d7c:	cmp	r2, #0
   33d80:	beq	33d60 <flatcc_json_printer_bool_field@@Base+0x20>
   33d84:	ldr	lr, [r1]
   33d88:	cmn	lr, r2
   33d8c:	beq	33d60 <flatcc_json_printer_bool_field@@Base+0x20>
   33d90:	ldrb	r6, [lr, r2]
   33d94:	cmp	ip, r6
   33d98:	beq	33eb0 <flatcc_json_printer_bool_field@@Base+0x170>
   33d9c:	ldr	r2, [r1, #16]
   33da0:	mov	r7, r3
   33da4:	cmp	r2, #0
   33da8:	add	r2, r2, #1
   33dac:	str	r2, [r1, #16]
   33db0:	ldrne	r2, [r0, #20]
   33db4:	movne	r1, #44	; 0x2c
   33db8:	addne	ip, r2, #1
   33dbc:	strne	ip, [r0, #20]
   33dc0:	strbne	r1, [r2]
   33dc4:	ldrb	r1, [r0, #25]
   33dc8:	mov	r4, r0
   33dcc:	cmp	r1, #0
   33dd0:	bne	33ec0 <flatcc_json_printer_bool_field@@Base+0x180>
   33dd4:	ldr	r2, [r0, #20]
   33dd8:	ldr	r3, [r0, #16]
   33ddc:	cmp	r2, r3
   33de0:	bcc	33df0 <flatcc_json_printer_bool_field@@Base+0xb0>
   33de4:	ldr	r3, [r0, #44]	; 0x2c
   33de8:	blx	r3
   33dec:	ldr	r2, [r4, #20]
   33df0:	mov	r3, #34	; 0x22
   33df4:	strb	r3, [r2]
   33df8:	ldrb	r3, [r4, #26]
   33dfc:	ldr	r0, [r4, #20]
   33e00:	ldr	r2, [r4, #16]
   33e04:	cmp	r3, #0
   33e08:	addeq	r0, r0, #1
   33e0c:	add	r3, r0, r5
   33e10:	cmp	r2, r3
   33e14:	str	r0, [r4, #20]
   33e18:	bhi	33e94 <flatcc_json_printer_bool_field@@Base+0x154>
   33e1c:	mov	r2, r5
   33e20:	mov	r1, r7
   33e24:	mov	r0, r4
   33e28:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   33e2c:	ldr	r5, [r4, #20]
   33e30:	mov	r3, #34	; 0x22
   33e34:	strb	r3, [r5]
   33e38:	ldr	r1, [r4, #20]
   33e3c:	ldrb	r3, [r4, #26]
   33e40:	clz	r3, r3
   33e44:	lsr	r3, r3, #5
   33e48:	add	r2, r1, r3
   33e4c:	add	r2, r2, #1
   33e50:	mov	r0, #58	; 0x3a
   33e54:	str	r2, [r4, #20]
   33e58:	strb	r0, [r1, r3]
   33e5c:	ldr	r3, [r4, #20]
   33e60:	mov	r2, #32
   33e64:	mov	r0, r6
   33e68:	strb	r2, [r3]
   33e6c:	ldrb	r3, [r4, #25]
   33e70:	ldr	r1, [r4, #20]
   33e74:	cmp	r3, #0
   33e78:	addne	r1, r1, #1
   33e7c:	str	r1, [r4, #20]
   33e80:	bl	3118c <flatcc_json_parser_table_as_root@@Base+0x124c>
   33e84:	ldr	r3, [r4, #20]
   33e88:	add	r0, r3, r0
   33e8c:	str	r0, [r4, #20]
   33e90:	pop	{r4, r5, r6, r7, r8, pc}
   33e94:	mov	r2, r5
   33e98:	mov	r1, r7
   33e9c:	bl	14544 <memcpy@plt>
   33ea0:	ldr	r3, [r4, #20]
   33ea4:	add	r5, r3, r5
   33ea8:	str	r5, [r4, #20]
   33eac:	b	33e30 <flatcc_json_printer_bool_field@@Base+0xf0>
   33eb0:	ldrb	r2, [r0, #28]
   33eb4:	cmp	r2, #0
   33eb8:	beq	33d9c <flatcc_json_printer_bool_field@@Base+0x5c>
   33ebc:	pop	{r4, r5, r6, r7, r8, pc}
   33ec0:	ldr	r3, [r0, #20]
   33ec4:	mov	r2, #10
   33ec8:	add	r1, r3, #1
   33ecc:	str	r1, [r0, #20]
   33ed0:	strb	r2, [r3]
   33ed4:	ldrb	r8, [r0, #25]
   33ed8:	ldr	r2, [r0, #32]
   33edc:	ldr	r0, [r0, #20]
   33ee0:	ldr	r1, [r4, #16]
   33ee4:	mul	r8, r2, r8
   33ee8:	add	r3, r0, r8
   33eec:	cmp	r1, r3
   33ef0:	bcc	33f10 <flatcc_json_printer_bool_field@@Base+0x1d0>
   33ef4:	mov	r2, r8
   33ef8:	mov	r1, #32
   33efc:	bl	145bc <memset@plt>
   33f00:	ldr	r2, [r4, #20]
   33f04:	add	r2, r2, r8
   33f08:	str	r2, [r4, #20]
   33f0c:	b	33df0 <flatcc_json_printer_bool_field@@Base+0xb0>
   33f10:	mov	r1, r8
   33f14:	mov	r0, r4
   33f18:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   33f1c:	ldr	r2, [r4, #20]
   33f20:	b	33df0 <flatcc_json_printer_bool_field@@Base+0xb0>

00033f24 <flatcc_json_printer_float_field@@Base>:
   33f24:	add	r2, r2, #2
   33f28:	ldr	ip, [r1, #8]
   33f2c:	lsl	r2, r2, #1
   33f30:	push	{r4, r5, r6, r7, r8, lr}
   33f34:	cmp	r2, ip
   33f38:	vpush	{d8}
   33f3c:	ldr	r5, [sp, #32]
   33f40:	blt	33f58 <flatcc_json_printer_float_field@@Base+0x34>
   33f44:	ldrb	r2, [r0, #29]
   33f48:	cmp	r2, #0
   33f4c:	beq	34084 <flatcc_json_printer_float_field@@Base+0x160>
   33f50:	vmov.f32	s16, s0
   33f54:	b	33f90 <flatcc_json_printer_float_field@@Base+0x6c>
   33f58:	ldr	ip, [r1, #4]
   33f5c:	ldrh	ip, [ip, r2]
   33f60:	cmp	ip, #0
   33f64:	beq	33f44 <flatcc_json_printer_float_field@@Base+0x20>
   33f68:	ldr	r2, [r1]
   33f6c:	adds	r2, r2, ip
   33f70:	beq	33f44 <flatcc_json_printer_float_field@@Base+0x20>
   33f74:	vldr	s16, [r2]
   33f78:	vcmp.f32	s0, s16
   33f7c:	vmrs	APSR_nzcv, fpscr
   33f80:	bne	33f90 <flatcc_json_printer_float_field@@Base+0x6c>
   33f84:	ldrb	r2, [r0, #28]
   33f88:	cmp	r2, #0
   33f8c:	bne	34084 <flatcc_json_printer_float_field@@Base+0x160>
   33f90:	ldr	r2, [r1, #16]
   33f94:	mov	r6, r3
   33f98:	cmp	r2, #0
   33f9c:	add	r2, r2, #1
   33fa0:	str	r2, [r1, #16]
   33fa4:	ldrne	r2, [r0, #20]
   33fa8:	movne	r1, #44	; 0x2c
   33fac:	addne	ip, r2, #1
   33fb0:	strne	ip, [r0, #20]
   33fb4:	strbne	r1, [r2]
   33fb8:	ldrb	r1, [r0, #25]
   33fbc:	mov	r4, r0
   33fc0:	cmp	r1, #0
   33fc4:	bne	340a8 <flatcc_json_printer_float_field@@Base+0x184>
   33fc8:	ldr	r2, [r0, #20]
   33fcc:	ldr	r3, [r0, #16]
   33fd0:	cmp	r2, r3
   33fd4:	bcc	33fe4 <flatcc_json_printer_float_field@@Base+0xc0>
   33fd8:	ldr	r3, [r0, #44]	; 0x2c
   33fdc:	blx	r3
   33fe0:	ldr	r2, [r4, #20]
   33fe4:	mov	r3, #34	; 0x22
   33fe8:	strb	r3, [r2]
   33fec:	ldrb	r3, [r4, #26]
   33ff0:	ldr	r0, [r4, #20]
   33ff4:	ldr	r2, [r4, #16]
   33ff8:	cmp	r3, #0
   33ffc:	addeq	r0, r0, #1
   34000:	add	r3, r0, r5
   34004:	cmp	r2, r3
   34008:	str	r0, [r4, #20]
   3400c:	bhi	3408c <flatcc_json_printer_float_field@@Base+0x168>
   34010:	mov	r2, r5
   34014:	mov	r1, r6
   34018:	mov	r0, r4
   3401c:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   34020:	ldr	r5, [r4, #20]
   34024:	mov	r3, #34	; 0x22
   34028:	strb	r3, [r5]
   3402c:	ldr	r1, [r4, #20]
   34030:	ldrb	r3, [r4, #26]
   34034:	clz	r3, r3
   34038:	lsr	r3, r3, #5
   3403c:	add	r2, r1, r3
   34040:	add	r2, r2, #1
   34044:	mov	r0, #58	; 0x3a
   34048:	str	r2, [r4, #20]
   3404c:	strb	r0, [r1, r3]
   34050:	ldr	r3, [r4, #20]
   34054:	mov	r2, #32
   34058:	vcvt.f64.f32	d0, s16
   3405c:	strb	r2, [r3]
   34060:	ldrb	r3, [r4, #25]
   34064:	ldr	r0, [r4, #20]
   34068:	cmp	r3, #0
   3406c:	addne	r0, r0, #1
   34070:	str	r0, [r4, #20]
   34074:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   34078:	ldr	r3, [r4, #20]
   3407c:	add	r0, r3, r0
   34080:	str	r0, [r4, #20]
   34084:	vpop	{d8}
   34088:	pop	{r4, r5, r6, r7, r8, pc}
   3408c:	mov	r2, r5
   34090:	mov	r1, r6
   34094:	bl	14544 <memcpy@plt>
   34098:	ldr	r3, [r4, #20]
   3409c:	add	r5, r3, r5
   340a0:	str	r5, [r4, #20]
   340a4:	b	34024 <flatcc_json_printer_float_field@@Base+0x100>
   340a8:	ldr	r3, [r0, #20]
   340ac:	mov	r2, #10
   340b0:	add	r1, r3, #1
   340b4:	str	r1, [r0, #20]
   340b8:	strb	r2, [r3]
   340bc:	ldrb	r7, [r0, #25]
   340c0:	ldr	r2, [r0, #32]
   340c4:	ldr	r0, [r0, #20]
   340c8:	ldr	r1, [r4, #16]
   340cc:	mul	r7, r2, r7
   340d0:	add	r3, r0, r7
   340d4:	cmp	r1, r3
   340d8:	bcc	340f8 <flatcc_json_printer_float_field@@Base+0x1d4>
   340dc:	mov	r2, r7
   340e0:	mov	r1, #32
   340e4:	bl	145bc <memset@plt>
   340e8:	ldr	r2, [r4, #20]
   340ec:	add	r2, r2, r7
   340f0:	str	r2, [r4, #20]
   340f4:	b	33fe4 <flatcc_json_printer_float_field@@Base+0xc0>
   340f8:	mov	r1, r7
   340fc:	mov	r0, r4
   34100:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   34104:	ldr	r2, [r4, #20]
   34108:	b	33fe4 <flatcc_json_printer_float_field@@Base+0xc0>

0003410c <flatcc_json_printer_double_field@@Base>:
   3410c:	add	r2, r2, #2
   34110:	ldr	ip, [r1, #8]
   34114:	lsl	r2, r2, #1
   34118:	push	{r4, r5, r6, r7, r8, lr}
   3411c:	cmp	r2, ip
   34120:	vpush	{d8}
   34124:	ldr	r5, [sp, #32]
   34128:	blt	34140 <flatcc_json_printer_double_field@@Base+0x34>
   3412c:	ldrb	r2, [r0, #29]
   34130:	cmp	r2, #0
   34134:	beq	3426c <flatcc_json_printer_double_field@@Base+0x160>
   34138:	vmov.f64	d8, d0
   3413c:	b	34178 <flatcc_json_printer_double_field@@Base+0x6c>
   34140:	ldr	ip, [r1, #4]
   34144:	ldrh	ip, [ip, r2]
   34148:	cmp	ip, #0
   3414c:	beq	3412c <flatcc_json_printer_double_field@@Base+0x20>
   34150:	ldr	r2, [r1]
   34154:	adds	r2, r2, ip
   34158:	beq	3412c <flatcc_json_printer_double_field@@Base+0x20>
   3415c:	vldr	d8, [r2]
   34160:	vcmp.f64	d0, d8
   34164:	vmrs	APSR_nzcv, fpscr
   34168:	bne	34178 <flatcc_json_printer_double_field@@Base+0x6c>
   3416c:	ldrb	r2, [r0, #28]
   34170:	cmp	r2, #0
   34174:	bne	3426c <flatcc_json_printer_double_field@@Base+0x160>
   34178:	ldr	r2, [r1, #16]
   3417c:	mov	r6, r3
   34180:	cmp	r2, #0
   34184:	add	r2, r2, #1
   34188:	str	r2, [r1, #16]
   3418c:	ldrne	r2, [r0, #20]
   34190:	movne	r1, #44	; 0x2c
   34194:	addne	ip, r2, #1
   34198:	strne	ip, [r0, #20]
   3419c:	strbne	r1, [r2]
   341a0:	ldrb	r1, [r0, #25]
   341a4:	mov	r4, r0
   341a8:	cmp	r1, #0
   341ac:	bne	34290 <flatcc_json_printer_double_field@@Base+0x184>
   341b0:	ldr	r2, [r0, #20]
   341b4:	ldr	r3, [r0, #16]
   341b8:	cmp	r2, r3
   341bc:	bcc	341cc <flatcc_json_printer_double_field@@Base+0xc0>
   341c0:	ldr	r3, [r0, #44]	; 0x2c
   341c4:	blx	r3
   341c8:	ldr	r2, [r4, #20]
   341cc:	mov	r3, #34	; 0x22
   341d0:	strb	r3, [r2]
   341d4:	ldrb	r3, [r4, #26]
   341d8:	ldr	r0, [r4, #20]
   341dc:	ldr	r2, [r4, #16]
   341e0:	cmp	r3, #0
   341e4:	addeq	r0, r0, #1
   341e8:	add	r3, r0, r5
   341ec:	cmp	r2, r3
   341f0:	str	r0, [r4, #20]
   341f4:	bhi	34274 <flatcc_json_printer_double_field@@Base+0x168>
   341f8:	mov	r2, r5
   341fc:	mov	r1, r6
   34200:	mov	r0, r4
   34204:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   34208:	ldr	r5, [r4, #20]
   3420c:	mov	r3, #34	; 0x22
   34210:	strb	r3, [r5]
   34214:	ldr	r1, [r4, #20]
   34218:	ldrb	r3, [r4, #26]
   3421c:	clz	r3, r3
   34220:	lsr	r3, r3, #5
   34224:	add	r2, r1, r3
   34228:	add	r2, r2, #1
   3422c:	mov	r0, #58	; 0x3a
   34230:	str	r2, [r4, #20]
   34234:	strb	r0, [r1, r3]
   34238:	ldr	r3, [r4, #20]
   3423c:	mov	r2, #32
   34240:	vmov.f64	d0, d8
   34244:	strb	r2, [r3]
   34248:	ldrb	r3, [r4, #25]
   3424c:	ldr	r0, [r4, #20]
   34250:	cmp	r3, #0
   34254:	addne	r0, r0, #1
   34258:	str	r0, [r4, #20]
   3425c:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   34260:	ldr	r3, [r4, #20]
   34264:	add	r0, r3, r0
   34268:	str	r0, [r4, #20]
   3426c:	vpop	{d8}
   34270:	pop	{r4, r5, r6, r7, r8, pc}
   34274:	mov	r2, r5
   34278:	mov	r1, r6
   3427c:	bl	14544 <memcpy@plt>
   34280:	ldr	r3, [r4, #20]
   34284:	add	r5, r3, r5
   34288:	str	r5, [r4, #20]
   3428c:	b	3420c <flatcc_json_printer_double_field@@Base+0x100>
   34290:	ldr	r3, [r0, #20]
   34294:	mov	r2, #10
   34298:	add	r1, r3, #1
   3429c:	str	r1, [r0, #20]
   342a0:	strb	r2, [r3]
   342a4:	ldrb	r7, [r0, #25]
   342a8:	ldr	r2, [r0, #32]
   342ac:	ldr	r0, [r0, #20]
   342b0:	ldr	r1, [r4, #16]
   342b4:	mul	r7, r2, r7
   342b8:	add	r3, r0, r7
   342bc:	cmp	r1, r3
   342c0:	bcc	342e0 <flatcc_json_printer_double_field@@Base+0x1d4>
   342c4:	mov	r2, r7
   342c8:	mov	r1, #32
   342cc:	bl	145bc <memset@plt>
   342d0:	ldr	r2, [r4, #20]
   342d4:	add	r2, r2, r7
   342d8:	str	r2, [r4, #20]
   342dc:	b	341cc <flatcc_json_printer_double_field@@Base+0xc0>
   342e0:	mov	r1, r7
   342e4:	mov	r0, r4
   342e8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   342ec:	ldr	r2, [r4, #20]
   342f0:	b	341cc <flatcc_json_printer_double_field@@Base+0xc0>

000342f4 <flatcc_json_printer_uint8_enum_field@@Base>:
   342f4:	add	r2, r2, #2
   342f8:	ldr	ip, [r1, #8]
   342fc:	lsl	r2, r2, #1
   34300:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34304:	cmp	r2, ip
   34308:	ldr	r7, [sp, #32]
   3430c:	ldrb	ip, [sp, #36]	; 0x24
   34310:	ldr	r5, [sp, #40]	; 0x28
   34314:	blt	3432c <flatcc_json_printer_uint8_enum_field@@Base+0x38>
   34318:	ldrb	r2, [r0, #29]
   3431c:	cmp	r2, #0
   34320:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   34324:	mov	r6, ip
   34328:	b	34354 <flatcc_json_printer_uint8_enum_field@@Base+0x60>
   3432c:	ldr	lr, [r1, #4]
   34330:	ldrh	r2, [lr, r2]
   34334:	cmp	r2, #0
   34338:	beq	34318 <flatcc_json_printer_uint8_enum_field@@Base+0x24>
   3433c:	ldr	lr, [r1]
   34340:	cmn	lr, r2
   34344:	beq	34318 <flatcc_json_printer_uint8_enum_field@@Base+0x24>
   34348:	ldrb	r6, [lr, r2]
   3434c:	cmp	ip, r6
   34350:	beq	34488 <flatcc_json_printer_uint8_enum_field@@Base+0x194>
   34354:	ldr	r2, [r1, #16]
   34358:	mov	r8, r3
   3435c:	cmp	r2, #0
   34360:	add	r2, r2, #1
   34364:	str	r2, [r1, #16]
   34368:	ldrne	r2, [r0, #20]
   3436c:	movne	r1, #44	; 0x2c
   34370:	addne	ip, r2, #1
   34374:	strne	ip, [r0, #20]
   34378:	strbne	r1, [r2]
   3437c:	ldrb	r1, [r0, #25]
   34380:	mov	r4, r0
   34384:	cmp	r1, #0
   34388:	bne	34498 <flatcc_json_printer_uint8_enum_field@@Base+0x1a4>
   3438c:	ldr	r2, [r0, #20]
   34390:	ldr	r3, [r0, #16]
   34394:	cmp	r2, r3
   34398:	bcc	343a8 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   3439c:	ldr	r3, [r0, #44]	; 0x2c
   343a0:	blx	r3
   343a4:	ldr	r2, [r4, #20]
   343a8:	mov	r3, #34	; 0x22
   343ac:	strb	r3, [r2]
   343b0:	ldrb	r3, [r4, #26]
   343b4:	ldr	r0, [r4, #20]
   343b8:	ldr	r2, [r4, #16]
   343bc:	cmp	r3, #0
   343c0:	addeq	r0, r0, #1
   343c4:	add	r3, r0, r7
   343c8:	cmp	r2, r3
   343cc:	str	r0, [r4, #20]
   343d0:	bhi	3446c <flatcc_json_printer_uint8_enum_field@@Base+0x178>
   343d4:	mov	r2, r7
   343d8:	mov	r1, r8
   343dc:	mov	r0, r4
   343e0:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   343e4:	ldr	r7, [r4, #20]
   343e8:	mov	r3, #34	; 0x22
   343ec:	strb	r3, [r7]
   343f0:	ldr	r1, [r4, #20]
   343f4:	ldrb	r3, [r4, #26]
   343f8:	clz	r3, r3
   343fc:	lsr	r3, r3, #5
   34400:	add	r2, r1, r3
   34404:	add	r2, r2, #1
   34408:	mov	r0, #58	; 0x3a
   3440c:	str	r2, [r4, #20]
   34410:	strb	r0, [r1, r3]
   34414:	ldr	r3, [r4, #20]
   34418:	mov	r2, #32
   3441c:	strb	r2, [r3]
   34420:	ldrb	r2, [r4, #25]
   34424:	ldrb	r3, [r4, #27]
   34428:	ldr	r1, [r4, #20]
   3442c:	cmp	r2, #0
   34430:	addne	r1, r1, #1
   34434:	cmp	r3, #0
   34438:	str	r1, [r4, #20]
   3443c:	bne	34454 <flatcc_json_printer_uint8_enum_field@@Base+0x160>
   34440:	mov	r1, r6
   34444:	mov	r0, r4
   34448:	mov	r3, r5
   3444c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34450:	bx	r3
   34454:	mov	r0, r6
   34458:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   3445c:	ldr	r3, [r4, #20]
   34460:	add	r0, r3, r0
   34464:	str	r0, [r4, #20]
   34468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3446c:	mov	r2, r7
   34470:	mov	r1, r8
   34474:	bl	14544 <memcpy@plt>
   34478:	ldr	r3, [r4, #20]
   3447c:	add	r7, r3, r7
   34480:	str	r7, [r4, #20]
   34484:	b	343e8 <flatcc_json_printer_uint8_enum_field@@Base+0xf4>
   34488:	ldrb	r2, [r0, #28]
   3448c:	cmp	r2, #0
   34490:	beq	34354 <flatcc_json_printer_uint8_enum_field@@Base+0x60>
   34494:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34498:	ldr	r3, [r0, #20]
   3449c:	mov	r2, #10
   344a0:	add	r1, r3, #1
   344a4:	str	r1, [r0, #20]
   344a8:	strb	r2, [r3]
   344ac:	ldrb	r3, [r0, #25]
   344b0:	ldr	r2, [r0, #32]
   344b4:	ldr	r0, [r0, #20]
   344b8:	ldr	r1, [r4, #16]
   344bc:	mul	r9, r2, r3
   344c0:	add	r3, r0, r9
   344c4:	cmp	r1, r3
   344c8:	bcc	344e8 <flatcc_json_printer_uint8_enum_field@@Base+0x1f4>
   344cc:	mov	r2, r9
   344d0:	mov	r1, #32
   344d4:	bl	145bc <memset@plt>
   344d8:	ldr	r2, [r4, #20]
   344dc:	add	r2, r2, r9
   344e0:	str	r2, [r4, #20]
   344e4:	b	343a8 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>
   344e8:	mov	r1, r9
   344ec:	mov	r0, r4
   344f0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   344f4:	ldr	r2, [r4, #20]
   344f8:	b	343a8 <flatcc_json_printer_uint8_enum_field@@Base+0xb4>

000344fc <flatcc_json_printer_uint16_enum_field@@Base>:
   344fc:	add	r2, r2, #2
   34500:	ldr	ip, [r1, #8]
   34504:	lsl	r2, r2, #1
   34508:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3450c:	cmp	r2, ip
   34510:	ldr	r7, [sp, #32]
   34514:	ldrh	ip, [sp, #36]	; 0x24
   34518:	ldr	r5, [sp, #40]	; 0x28
   3451c:	blt	34534 <flatcc_json_printer_uint16_enum_field@@Base+0x38>
   34520:	ldrb	r2, [r0, #29]
   34524:	cmp	r2, #0
   34528:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3452c:	mov	r6, ip
   34530:	b	3455c <flatcc_json_printer_uint16_enum_field@@Base+0x60>
   34534:	ldr	lr, [r1, #4]
   34538:	ldrh	r2, [lr, r2]
   3453c:	cmp	r2, #0
   34540:	beq	34520 <flatcc_json_printer_uint16_enum_field@@Base+0x24>
   34544:	ldr	lr, [r1]
   34548:	cmn	lr, r2
   3454c:	beq	34520 <flatcc_json_printer_uint16_enum_field@@Base+0x24>
   34550:	ldrh	r6, [lr, r2]
   34554:	cmp	ip, r6
   34558:	beq	34690 <flatcc_json_printer_uint16_enum_field@@Base+0x194>
   3455c:	ldr	r2, [r1, #16]
   34560:	mov	r8, r3
   34564:	cmp	r2, #0
   34568:	add	r2, r2, #1
   3456c:	str	r2, [r1, #16]
   34570:	ldrne	r2, [r0, #20]
   34574:	movne	r1, #44	; 0x2c
   34578:	addne	ip, r2, #1
   3457c:	strne	ip, [r0, #20]
   34580:	strbne	r1, [r2]
   34584:	ldrb	r1, [r0, #25]
   34588:	mov	r4, r0
   3458c:	cmp	r1, #0
   34590:	bne	346a0 <flatcc_json_printer_uint16_enum_field@@Base+0x1a4>
   34594:	ldr	r2, [r0, #20]
   34598:	ldr	r3, [r0, #16]
   3459c:	cmp	r2, r3
   345a0:	bcc	345b0 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   345a4:	ldr	r3, [r0, #44]	; 0x2c
   345a8:	blx	r3
   345ac:	ldr	r2, [r4, #20]
   345b0:	mov	r3, #34	; 0x22
   345b4:	strb	r3, [r2]
   345b8:	ldrb	r3, [r4, #26]
   345bc:	ldr	r0, [r4, #20]
   345c0:	ldr	r2, [r4, #16]
   345c4:	cmp	r3, #0
   345c8:	addeq	r0, r0, #1
   345cc:	add	r3, r0, r7
   345d0:	cmp	r2, r3
   345d4:	str	r0, [r4, #20]
   345d8:	bhi	34674 <flatcc_json_printer_uint16_enum_field@@Base+0x178>
   345dc:	mov	r2, r7
   345e0:	mov	r1, r8
   345e4:	mov	r0, r4
   345e8:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   345ec:	ldr	r7, [r4, #20]
   345f0:	mov	r3, #34	; 0x22
   345f4:	strb	r3, [r7]
   345f8:	ldr	r1, [r4, #20]
   345fc:	ldrb	r3, [r4, #26]
   34600:	clz	r3, r3
   34604:	lsr	r3, r3, #5
   34608:	add	r2, r1, r3
   3460c:	add	r2, r2, #1
   34610:	mov	r0, #58	; 0x3a
   34614:	str	r2, [r4, #20]
   34618:	strb	r0, [r1, r3]
   3461c:	ldr	r3, [r4, #20]
   34620:	mov	r2, #32
   34624:	strb	r2, [r3]
   34628:	ldrb	r2, [r4, #25]
   3462c:	ldrb	r3, [r4, #27]
   34630:	ldr	r1, [r4, #20]
   34634:	cmp	r2, #0
   34638:	addne	r1, r1, #1
   3463c:	cmp	r3, #0
   34640:	str	r1, [r4, #20]
   34644:	bne	3465c <flatcc_json_printer_uint16_enum_field@@Base+0x160>
   34648:	mov	r1, r6
   3464c:	mov	r0, r4
   34650:	mov	r3, r5
   34654:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34658:	bx	r3
   3465c:	mov	r0, r6
   34660:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   34664:	ldr	r3, [r4, #20]
   34668:	add	r0, r3, r0
   3466c:	str	r0, [r4, #20]
   34670:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34674:	mov	r2, r7
   34678:	mov	r1, r8
   3467c:	bl	14544 <memcpy@plt>
   34680:	ldr	r3, [r4, #20]
   34684:	add	r7, r3, r7
   34688:	str	r7, [r4, #20]
   3468c:	b	345f0 <flatcc_json_printer_uint16_enum_field@@Base+0xf4>
   34690:	ldrb	r2, [r0, #28]
   34694:	cmp	r2, #0
   34698:	beq	3455c <flatcc_json_printer_uint16_enum_field@@Base+0x60>
   3469c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   346a0:	ldr	r3, [r0, #20]
   346a4:	mov	r2, #10
   346a8:	add	r1, r3, #1
   346ac:	str	r1, [r0, #20]
   346b0:	strb	r2, [r3]
   346b4:	ldrb	r3, [r0, #25]
   346b8:	ldr	r2, [r0, #32]
   346bc:	ldr	r0, [r0, #20]
   346c0:	ldr	r1, [r4, #16]
   346c4:	mul	r9, r2, r3
   346c8:	add	r3, r0, r9
   346cc:	cmp	r1, r3
   346d0:	bcc	346f0 <flatcc_json_printer_uint16_enum_field@@Base+0x1f4>
   346d4:	mov	r2, r9
   346d8:	mov	r1, #32
   346dc:	bl	145bc <memset@plt>
   346e0:	ldr	r2, [r4, #20]
   346e4:	add	r2, r2, r9
   346e8:	str	r2, [r4, #20]
   346ec:	b	345b0 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>
   346f0:	mov	r1, r9
   346f4:	mov	r0, r4
   346f8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   346fc:	ldr	r2, [r4, #20]
   34700:	b	345b0 <flatcc_json_printer_uint16_enum_field@@Base+0xb4>

00034704 <flatcc_json_printer_uint32_enum_field@@Base>:
   34704:	add	r2, r2, #2
   34708:	ldr	ip, [r1, #8]
   3470c:	lsl	r2, r2, #1
   34710:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34714:	cmp	r2, ip
   34718:	ldr	r7, [sp, #32]
   3471c:	ldr	ip, [sp, #36]	; 0x24
   34720:	ldr	r5, [sp, #40]	; 0x28
   34724:	blt	3473c <flatcc_json_printer_uint32_enum_field@@Base+0x38>
   34728:	ldrb	r2, [r0, #29]
   3472c:	cmp	r2, #0
   34730:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   34734:	mov	r6, ip
   34738:	b	34764 <flatcc_json_printer_uint32_enum_field@@Base+0x60>
   3473c:	ldr	lr, [r1, #4]
   34740:	ldrh	r2, [lr, r2]
   34744:	cmp	r2, #0
   34748:	beq	34728 <flatcc_json_printer_uint32_enum_field@@Base+0x24>
   3474c:	ldr	lr, [r1]
   34750:	cmn	lr, r2
   34754:	beq	34728 <flatcc_json_printer_uint32_enum_field@@Base+0x24>
   34758:	ldr	r6, [lr, r2]
   3475c:	cmp	ip, r6
   34760:	beq	34898 <flatcc_json_printer_uint32_enum_field@@Base+0x194>
   34764:	ldr	r2, [r1, #16]
   34768:	mov	r8, r3
   3476c:	cmp	r2, #0
   34770:	add	r2, r2, #1
   34774:	str	r2, [r1, #16]
   34778:	ldrne	r2, [r0, #20]
   3477c:	movne	r1, #44	; 0x2c
   34780:	addne	ip, r2, #1
   34784:	strne	ip, [r0, #20]
   34788:	strbne	r1, [r2]
   3478c:	ldrb	r1, [r0, #25]
   34790:	mov	r4, r0
   34794:	cmp	r1, #0
   34798:	bne	348a8 <flatcc_json_printer_uint32_enum_field@@Base+0x1a4>
   3479c:	ldr	r2, [r0, #20]
   347a0:	ldr	r3, [r0, #16]
   347a4:	cmp	r2, r3
   347a8:	bcc	347b8 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   347ac:	ldr	r3, [r0, #44]	; 0x2c
   347b0:	blx	r3
   347b4:	ldr	r2, [r4, #20]
   347b8:	mov	r3, #34	; 0x22
   347bc:	strb	r3, [r2]
   347c0:	ldrb	r3, [r4, #26]
   347c4:	ldr	r0, [r4, #20]
   347c8:	ldr	r2, [r4, #16]
   347cc:	cmp	r3, #0
   347d0:	addeq	r0, r0, #1
   347d4:	add	r3, r0, r7
   347d8:	cmp	r2, r3
   347dc:	str	r0, [r4, #20]
   347e0:	bhi	3487c <flatcc_json_printer_uint32_enum_field@@Base+0x178>
   347e4:	mov	r2, r7
   347e8:	mov	r1, r8
   347ec:	mov	r0, r4
   347f0:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   347f4:	ldr	r7, [r4, #20]
   347f8:	mov	r3, #34	; 0x22
   347fc:	strb	r3, [r7]
   34800:	ldr	r1, [r4, #20]
   34804:	ldrb	r3, [r4, #26]
   34808:	clz	r3, r3
   3480c:	lsr	r3, r3, #5
   34810:	add	r2, r1, r3
   34814:	add	r2, r2, #1
   34818:	mov	r0, #58	; 0x3a
   3481c:	str	r2, [r4, #20]
   34820:	strb	r0, [r1, r3]
   34824:	ldr	r3, [r4, #20]
   34828:	mov	r2, #32
   3482c:	strb	r2, [r3]
   34830:	ldrb	r2, [r4, #25]
   34834:	ldrb	r3, [r4, #27]
   34838:	ldr	r1, [r4, #20]
   3483c:	cmp	r2, #0
   34840:	addne	r1, r1, #1
   34844:	cmp	r3, #0
   34848:	str	r1, [r4, #20]
   3484c:	bne	34864 <flatcc_json_printer_uint32_enum_field@@Base+0x160>
   34850:	mov	r1, r6
   34854:	mov	r0, r4
   34858:	mov	r3, r5
   3485c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34860:	bx	r3
   34864:	mov	r0, r6
   34868:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   3486c:	ldr	r3, [r4, #20]
   34870:	add	r0, r3, r0
   34874:	str	r0, [r4, #20]
   34878:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3487c:	mov	r2, r7
   34880:	mov	r1, r8
   34884:	bl	14544 <memcpy@plt>
   34888:	ldr	r3, [r4, #20]
   3488c:	add	r7, r3, r7
   34890:	str	r7, [r4, #20]
   34894:	b	347f8 <flatcc_json_printer_uint32_enum_field@@Base+0xf4>
   34898:	ldrb	r2, [r0, #28]
   3489c:	cmp	r2, #0
   348a0:	beq	34764 <flatcc_json_printer_uint32_enum_field@@Base+0x60>
   348a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   348a8:	ldr	r3, [r0, #20]
   348ac:	mov	r2, #10
   348b0:	add	r1, r3, #1
   348b4:	str	r1, [r0, #20]
   348b8:	strb	r2, [r3]
   348bc:	ldrb	r3, [r0, #25]
   348c0:	ldr	r2, [r0, #32]
   348c4:	ldr	r0, [r0, #20]
   348c8:	ldr	r1, [r4, #16]
   348cc:	mul	r9, r2, r3
   348d0:	add	r3, r0, r9
   348d4:	cmp	r1, r3
   348d8:	bcc	348f8 <flatcc_json_printer_uint32_enum_field@@Base+0x1f4>
   348dc:	mov	r2, r9
   348e0:	mov	r1, #32
   348e4:	bl	145bc <memset@plt>
   348e8:	ldr	r2, [r4, #20]
   348ec:	add	r2, r2, r9
   348f0:	str	r2, [r4, #20]
   348f4:	b	347b8 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>
   348f8:	mov	r1, r9
   348fc:	mov	r0, r4
   34900:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   34904:	ldr	r2, [r4, #20]
   34908:	b	347b8 <flatcc_json_printer_uint32_enum_field@@Base+0xb4>

0003490c <flatcc_json_printer_uint64_enum_field@@Base>:
   3490c:	add	r2, r2, #2
   34910:	ldr	ip, [r1, #8]
   34914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34918:	lsl	r2, r2, #1
   3491c:	sub	sp, sp, #4
   34920:	cmp	r2, ip
   34924:	ldr	r8, [sp, #40]	; 0x28
   34928:	ldrd	sl, [sp, #48]	; 0x30
   3492c:	ldr	r5, [sp, #56]	; 0x38
   34930:	blt	3494c <flatcc_json_printer_uint64_enum_field@@Base+0x40>
   34934:	ldrb	r2, [r0, #29]
   34938:	cmp	r2, #0
   3493c:	beq	34a98 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>
   34940:	mov	r6, sl
   34944:	mov	r7, fp
   34948:	b	34978 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   3494c:	ldr	ip, [r1, #4]
   34950:	ldrh	r2, [ip, r2]
   34954:	cmp	r2, #0
   34958:	beq	34934 <flatcc_json_printer_uint64_enum_field@@Base+0x28>
   3495c:	ldr	ip, [r1]
   34960:	cmn	ip, r2
   34964:	beq	34934 <flatcc_json_printer_uint64_enum_field@@Base+0x28>
   34968:	ldrd	r6, [ip, r2]
   3496c:	cmp	fp, r7
   34970:	cmpeq	sl, r6
   34974:	beq	34abc <flatcc_json_printer_uint64_enum_field@@Base+0x1b0>
   34978:	ldr	r2, [r1, #16]
   3497c:	mov	r9, r3
   34980:	cmp	r2, #0
   34984:	add	r2, r2, #1
   34988:	str	r2, [r1, #16]
   3498c:	ldrne	r2, [r0, #20]
   34990:	movne	r1, #44	; 0x2c
   34994:	addne	ip, r2, #1
   34998:	strne	ip, [r0, #20]
   3499c:	strbne	r1, [r2]
   349a0:	ldrb	r1, [r0, #25]
   349a4:	mov	r4, r0
   349a8:	cmp	r1, #0
   349ac:	bne	34acc <flatcc_json_printer_uint64_enum_field@@Base+0x1c0>
   349b0:	ldr	r2, [r0, #20]
   349b4:	ldr	r3, [r0, #16]
   349b8:	cmp	r2, r3
   349bc:	bcc	349cc <flatcc_json_printer_uint64_enum_field@@Base+0xc0>
   349c0:	ldr	r3, [r0, #44]	; 0x2c
   349c4:	blx	r3
   349c8:	ldr	r2, [r4, #20]
   349cc:	mov	r3, #34	; 0x22
   349d0:	strb	r3, [r2]
   349d4:	ldrb	r3, [r4, #26]
   349d8:	ldr	r0, [r4, #20]
   349dc:	ldr	r2, [r4, #16]
   349e0:	cmp	r3, #0
   349e4:	addeq	r0, r0, #1
   349e8:	add	r3, r0, r8
   349ec:	cmp	r2, r3
   349f0:	str	r0, [r4, #20]
   349f4:	bhi	34aa0 <flatcc_json_printer_uint64_enum_field@@Base+0x194>
   349f8:	mov	r2, r8
   349fc:	mov	r1, r9
   34a00:	mov	r0, r4
   34a04:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   34a08:	ldr	r8, [r4, #20]
   34a0c:	mov	r3, #34	; 0x22
   34a10:	strb	r3, [r8]
   34a14:	ldr	r1, [r4, #20]
   34a18:	ldrb	r3, [r4, #26]
   34a1c:	clz	r3, r3
   34a20:	lsr	r3, r3, #5
   34a24:	add	r2, r1, r3
   34a28:	add	r2, r2, #1
   34a2c:	mov	r0, #58	; 0x3a
   34a30:	str	r2, [r4, #20]
   34a34:	strb	r0, [r1, r3]
   34a38:	ldr	r3, [r4, #20]
   34a3c:	mov	r2, #32
   34a40:	strb	r2, [r3]
   34a44:	ldrb	r1, [r4, #25]
   34a48:	ldrb	r3, [r4, #27]
   34a4c:	ldr	r2, [r4, #20]
   34a50:	cmp	r1, #0
   34a54:	addne	r2, r2, #1
   34a58:	cmp	r3, #0
   34a5c:	str	r2, [r4, #20]
   34a60:	bne	34a80 <flatcc_json_printer_uint64_enum_field@@Base+0x174>
   34a64:	mov	r2, r6
   34a68:	mov	r3, r7
   34a6c:	mov	r0, r4
   34a70:	mov	r1, r5
   34a74:	add	sp, sp, #4
   34a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34a7c:	bx	r1
   34a80:	mov	r0, r6
   34a84:	mov	r1, r7
   34a88:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   34a8c:	ldr	r3, [r4, #20]
   34a90:	add	r0, r3, r0
   34a94:	str	r0, [r4, #20]
   34a98:	add	sp, sp, #4
   34a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34aa0:	mov	r2, r8
   34aa4:	mov	r1, r9
   34aa8:	bl	14544 <memcpy@plt>
   34aac:	ldr	r3, [r4, #20]
   34ab0:	add	r8, r3, r8
   34ab4:	str	r8, [r4, #20]
   34ab8:	b	34a0c <flatcc_json_printer_uint64_enum_field@@Base+0x100>
   34abc:	ldrb	r2, [r0, #28]
   34ac0:	cmp	r2, #0
   34ac4:	beq	34978 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   34ac8:	b	34a98 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>
   34acc:	ldr	r3, [r0, #20]
   34ad0:	mov	r2, #10
   34ad4:	add	r1, r3, #1
   34ad8:	str	r1, [r0, #20]
   34adc:	strb	r2, [r3]
   34ae0:	ldrb	r3, [r0, #25]
   34ae4:	ldr	r2, [r0, #32]
   34ae8:	ldr	r0, [r0, #20]
   34aec:	ldr	r1, [r4, #16]
   34af0:	mul	sl, r2, r3
   34af4:	add	r3, r0, sl
   34af8:	cmp	r1, r3
   34afc:	bcc	34b1c <flatcc_json_printer_uint64_enum_field@@Base+0x210>
   34b00:	mov	r2, sl
   34b04:	mov	r1, #32
   34b08:	bl	145bc <memset@plt>
   34b0c:	ldr	r2, [r4, #20]
   34b10:	add	r2, r2, sl
   34b14:	str	r2, [r4, #20]
   34b18:	b	349cc <flatcc_json_printer_uint64_enum_field@@Base+0xc0>
   34b1c:	mov	r1, sl
   34b20:	mov	r0, r4
   34b24:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   34b28:	ldr	r2, [r4, #20]
   34b2c:	b	349cc <flatcc_json_printer_uint64_enum_field@@Base+0xc0>

00034b30 <flatcc_json_printer_int8_enum_field@@Base>:
   34b30:	add	r2, r2, #2
   34b34:	ldr	ip, [r1, #8]
   34b38:	lsl	r2, r2, #1
   34b3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34b40:	cmp	r2, ip
   34b44:	ldr	r7, [sp, #32]
   34b48:	ldrsb	ip, [sp, #36]	; 0x24
   34b4c:	ldr	r6, [sp, #40]	; 0x28
   34b50:	blt	34b68 <flatcc_json_printer_int8_enum_field@@Base+0x38>
   34b54:	ldrb	r2, [r0, #29]
   34b58:	cmp	r2, #0
   34b5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   34b60:	mov	r5, ip
   34b64:	b	34b90 <flatcc_json_printer_int8_enum_field@@Base+0x60>
   34b68:	ldr	lr, [r1, #4]
   34b6c:	ldrh	r2, [lr, r2]
   34b70:	cmp	r2, #0
   34b74:	beq	34b54 <flatcc_json_printer_int8_enum_field@@Base+0x24>
   34b78:	ldr	lr, [r1]
   34b7c:	cmn	lr, r2
   34b80:	beq	34b54 <flatcc_json_printer_int8_enum_field@@Base+0x24>
   34b84:	ldrsb	r5, [lr, r2]
   34b88:	cmp	ip, r5
   34b8c:	beq	34ce8 <flatcc_json_printer_int8_enum_field@@Base+0x1b8>
   34b90:	ldr	r2, [r1, #16]
   34b94:	mov	r8, r3
   34b98:	cmp	r2, #0
   34b9c:	add	r2, r2, #1
   34ba0:	str	r2, [r1, #16]
   34ba4:	ldrne	r2, [r0, #20]
   34ba8:	movne	r1, #44	; 0x2c
   34bac:	addne	ip, r2, #1
   34bb0:	strne	ip, [r0, #20]
   34bb4:	strbne	r1, [r2]
   34bb8:	ldrb	r1, [r0, #25]
   34bbc:	mov	r4, r0
   34bc0:	cmp	r1, #0
   34bc4:	bne	34cf8 <flatcc_json_printer_int8_enum_field@@Base+0x1c8>
   34bc8:	ldr	r2, [r0, #20]
   34bcc:	ldr	r3, [r0, #16]
   34bd0:	cmp	r2, r3
   34bd4:	bcc	34be4 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   34bd8:	ldr	r3, [r0, #44]	; 0x2c
   34bdc:	blx	r3
   34be0:	ldr	r2, [r4, #20]
   34be4:	mov	r3, #34	; 0x22
   34be8:	strb	r3, [r2]
   34bec:	ldrb	r3, [r4, #26]
   34bf0:	ldr	r0, [r4, #20]
   34bf4:	ldr	r2, [r4, #16]
   34bf8:	cmp	r3, #0
   34bfc:	addeq	r0, r0, #1
   34c00:	add	r3, r0, r7
   34c04:	cmp	r2, r3
   34c08:	str	r0, [r4, #20]
   34c0c:	bhi	34cb8 <flatcc_json_printer_int8_enum_field@@Base+0x188>
   34c10:	mov	r2, r7
   34c14:	mov	r1, r8
   34c18:	mov	r0, r4
   34c1c:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   34c20:	ldr	r7, [r4, #20]
   34c24:	mov	r3, #34	; 0x22
   34c28:	strb	r3, [r7]
   34c2c:	ldr	r1, [r4, #20]
   34c30:	ldrb	r3, [r4, #26]
   34c34:	clz	r3, r3
   34c38:	lsr	r3, r3, #5
   34c3c:	add	r2, r1, r3
   34c40:	add	r2, r2, #1
   34c44:	mov	r0, #58	; 0x3a
   34c48:	str	r2, [r4, #20]
   34c4c:	strb	r0, [r1, r3]
   34c50:	ldr	r3, [r4, #20]
   34c54:	mov	r2, #32
   34c58:	strb	r2, [r3]
   34c5c:	ldrb	r3, [r4, #25]
   34c60:	ldrb	r0, [r4, #27]
   34c64:	ldr	r2, [r4, #20]
   34c68:	adds	r3, r3, #0
   34c6c:	movne	r3, #1
   34c70:	add	r1, r2, r3
   34c74:	cmp	r0, #0
   34c78:	str	r1, [r4, #20]
   34c7c:	beq	34cd4 <flatcc_json_printer_int8_enum_field@@Base+0x1a4>
   34c80:	cmp	r5, #0
   34c84:	lsr	r6, r5, #31
   34c88:	rsblt	r5, r5, #0
   34c8c:	movlt	r0, #45	; 0x2d
   34c90:	sxtblt	r5, r5
   34c94:	strblt	r0, [r2, r3]
   34c98:	addlt	r1, r1, #1
   34c9c:	uxtb	r0, r5
   34ca0:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   34ca4:	ldr	r3, [r4, #20]
   34ca8:	add	r0, r6, r0
   34cac:	add	r3, r3, r0
   34cb0:	str	r3, [r4, #20]
   34cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34cb8:	mov	r2, r7
   34cbc:	mov	r1, r8
   34cc0:	bl	14544 <memcpy@plt>
   34cc4:	ldr	r3, [r4, #20]
   34cc8:	add	r7, r3, r7
   34ccc:	str	r7, [r4, #20]
   34cd0:	b	34c24 <flatcc_json_printer_int8_enum_field@@Base+0xf4>
   34cd4:	mov	r1, r5
   34cd8:	mov	r0, r4
   34cdc:	mov	r3, r6
   34ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34ce4:	bx	r3
   34ce8:	ldrb	r2, [r0, #28]
   34cec:	cmp	r2, #0
   34cf0:	beq	34b90 <flatcc_json_printer_int8_enum_field@@Base+0x60>
   34cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34cf8:	ldr	r3, [r0, #20]
   34cfc:	mov	r2, #10
   34d00:	add	r1, r3, #1
   34d04:	str	r1, [r0, #20]
   34d08:	strb	r2, [r3]
   34d0c:	ldrb	r3, [r0, #25]
   34d10:	ldr	r2, [r0, #32]
   34d14:	ldr	r0, [r0, #20]
   34d18:	ldr	r1, [r4, #16]
   34d1c:	mul	r9, r2, r3
   34d20:	add	r3, r0, r9
   34d24:	cmp	r1, r3
   34d28:	bcc	34d48 <flatcc_json_printer_int8_enum_field@@Base+0x218>
   34d2c:	mov	r2, r9
   34d30:	mov	r1, #32
   34d34:	bl	145bc <memset@plt>
   34d38:	ldr	r2, [r4, #20]
   34d3c:	add	r2, r2, r9
   34d40:	str	r2, [r4, #20]
   34d44:	b	34be4 <flatcc_json_printer_int8_enum_field@@Base+0xb4>
   34d48:	mov	r1, r9
   34d4c:	mov	r0, r4
   34d50:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   34d54:	ldr	r2, [r4, #20]
   34d58:	b	34be4 <flatcc_json_printer_int8_enum_field@@Base+0xb4>

00034d5c <flatcc_json_printer_int16_enum_field@@Base>:
   34d5c:	add	r2, r2, #2
   34d60:	ldr	ip, [r1, #8]
   34d64:	lsl	r2, r2, #1
   34d68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34d6c:	cmp	r2, ip
   34d70:	ldr	r7, [sp, #32]
   34d74:	ldrsh	ip, [sp, #36]	; 0x24
   34d78:	ldr	r6, [sp, #40]	; 0x28
   34d7c:	blt	34d94 <flatcc_json_printer_int16_enum_field@@Base+0x38>
   34d80:	ldrb	r2, [r0, #29]
   34d84:	cmp	r2, #0
   34d88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   34d8c:	mov	r5, ip
   34d90:	b	34dbc <flatcc_json_printer_int16_enum_field@@Base+0x60>
   34d94:	ldr	lr, [r1, #4]
   34d98:	ldrh	r2, [lr, r2]
   34d9c:	cmp	r2, #0
   34da0:	beq	34d80 <flatcc_json_printer_int16_enum_field@@Base+0x24>
   34da4:	ldr	lr, [r1]
   34da8:	cmn	lr, r2
   34dac:	beq	34d80 <flatcc_json_printer_int16_enum_field@@Base+0x24>
   34db0:	ldrsh	r5, [lr, r2]
   34db4:	cmp	ip, r5
   34db8:	beq	34f14 <flatcc_json_printer_int16_enum_field@@Base+0x1b8>
   34dbc:	ldr	r2, [r1, #16]
   34dc0:	mov	r8, r3
   34dc4:	cmp	r2, #0
   34dc8:	add	r2, r2, #1
   34dcc:	str	r2, [r1, #16]
   34dd0:	ldrne	r2, [r0, #20]
   34dd4:	movne	r1, #44	; 0x2c
   34dd8:	addne	ip, r2, #1
   34ddc:	strne	ip, [r0, #20]
   34de0:	strbne	r1, [r2]
   34de4:	ldrb	r1, [r0, #25]
   34de8:	mov	r4, r0
   34dec:	cmp	r1, #0
   34df0:	bne	34f24 <flatcc_json_printer_int16_enum_field@@Base+0x1c8>
   34df4:	ldr	r2, [r0, #20]
   34df8:	ldr	r3, [r0, #16]
   34dfc:	cmp	r2, r3
   34e00:	bcc	34e10 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   34e04:	ldr	r3, [r0, #44]	; 0x2c
   34e08:	blx	r3
   34e0c:	ldr	r2, [r4, #20]
   34e10:	mov	r3, #34	; 0x22
   34e14:	strb	r3, [r2]
   34e18:	ldrb	r3, [r4, #26]
   34e1c:	ldr	r0, [r4, #20]
   34e20:	ldr	r2, [r4, #16]
   34e24:	cmp	r3, #0
   34e28:	addeq	r0, r0, #1
   34e2c:	add	r3, r0, r7
   34e30:	cmp	r2, r3
   34e34:	str	r0, [r4, #20]
   34e38:	bhi	34ee4 <flatcc_json_printer_int16_enum_field@@Base+0x188>
   34e3c:	mov	r2, r7
   34e40:	mov	r1, r8
   34e44:	mov	r0, r4
   34e48:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   34e4c:	ldr	r7, [r4, #20]
   34e50:	mov	r3, #34	; 0x22
   34e54:	strb	r3, [r7]
   34e58:	ldr	r1, [r4, #20]
   34e5c:	ldrb	r3, [r4, #26]
   34e60:	clz	r3, r3
   34e64:	lsr	r3, r3, #5
   34e68:	add	r2, r1, r3
   34e6c:	add	r2, r2, #1
   34e70:	mov	r0, #58	; 0x3a
   34e74:	str	r2, [r4, #20]
   34e78:	strb	r0, [r1, r3]
   34e7c:	ldr	r3, [r4, #20]
   34e80:	mov	r2, #32
   34e84:	strb	r2, [r3]
   34e88:	ldrb	r3, [r4, #25]
   34e8c:	ldrb	r0, [r4, #27]
   34e90:	ldr	r2, [r4, #20]
   34e94:	adds	r3, r3, #0
   34e98:	movne	r3, #1
   34e9c:	add	r1, r2, r3
   34ea0:	cmp	r0, #0
   34ea4:	str	r1, [r4, #20]
   34ea8:	beq	34f00 <flatcc_json_printer_int16_enum_field@@Base+0x1a4>
   34eac:	cmp	r5, #0
   34eb0:	lsr	r6, r5, #31
   34eb4:	rsblt	r5, r5, #0
   34eb8:	movlt	r0, #45	; 0x2d
   34ebc:	sxthlt	r5, r5
   34ec0:	strblt	r0, [r2, r3]
   34ec4:	addlt	r1, r1, #1
   34ec8:	uxth	r0, r5
   34ecc:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   34ed0:	ldr	r3, [r4, #20]
   34ed4:	add	r0, r6, r0
   34ed8:	add	r3, r3, r0
   34edc:	str	r3, [r4, #20]
   34ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34ee4:	mov	r2, r7
   34ee8:	mov	r1, r8
   34eec:	bl	14544 <memcpy@plt>
   34ef0:	ldr	r3, [r4, #20]
   34ef4:	add	r7, r3, r7
   34ef8:	str	r7, [r4, #20]
   34efc:	b	34e50 <flatcc_json_printer_int16_enum_field@@Base+0xf4>
   34f00:	mov	r1, r5
   34f04:	mov	r0, r4
   34f08:	mov	r3, r6
   34f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34f10:	bx	r3
   34f14:	ldrb	r2, [r0, #28]
   34f18:	cmp	r2, #0
   34f1c:	beq	34dbc <flatcc_json_printer_int16_enum_field@@Base+0x60>
   34f20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34f24:	ldr	r3, [r0, #20]
   34f28:	mov	r2, #10
   34f2c:	add	r1, r3, #1
   34f30:	str	r1, [r0, #20]
   34f34:	strb	r2, [r3]
   34f38:	ldrb	r3, [r0, #25]
   34f3c:	ldr	r2, [r0, #32]
   34f40:	ldr	r0, [r0, #20]
   34f44:	ldr	r1, [r4, #16]
   34f48:	mul	r9, r2, r3
   34f4c:	add	r3, r0, r9
   34f50:	cmp	r1, r3
   34f54:	bcc	34f74 <flatcc_json_printer_int16_enum_field@@Base+0x218>
   34f58:	mov	r2, r9
   34f5c:	mov	r1, #32
   34f60:	bl	145bc <memset@plt>
   34f64:	ldr	r2, [r4, #20]
   34f68:	add	r2, r2, r9
   34f6c:	str	r2, [r4, #20]
   34f70:	b	34e10 <flatcc_json_printer_int16_enum_field@@Base+0xb4>
   34f74:	mov	r1, r9
   34f78:	mov	r0, r4
   34f7c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   34f80:	ldr	r2, [r4, #20]
   34f84:	b	34e10 <flatcc_json_printer_int16_enum_field@@Base+0xb4>

00034f88 <flatcc_json_printer_int32_enum_field@@Base>:
   34f88:	add	r2, r2, #2
   34f8c:	ldr	ip, [r1, #8]
   34f90:	lsl	r2, r2, #1
   34f94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34f98:	cmp	r2, ip
   34f9c:	ldr	r7, [sp, #32]
   34fa0:	ldr	ip, [sp, #36]	; 0x24
   34fa4:	ldr	r5, [sp, #40]	; 0x28
   34fa8:	blt	34fc0 <flatcc_json_printer_int32_enum_field@@Base+0x38>
   34fac:	ldrb	r2, [r0, #29]
   34fb0:	cmp	r2, #0
   34fb4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   34fb8:	mov	r6, ip
   34fbc:	b	34fe8 <flatcc_json_printer_int32_enum_field@@Base+0x60>
   34fc0:	ldr	lr, [r1, #4]
   34fc4:	ldrh	r2, [lr, r2]
   34fc8:	cmp	r2, #0
   34fcc:	beq	34fac <flatcc_json_printer_int32_enum_field@@Base+0x24>
   34fd0:	ldr	lr, [r1]
   34fd4:	cmn	lr, r2
   34fd8:	beq	34fac <flatcc_json_printer_int32_enum_field@@Base+0x24>
   34fdc:	ldr	r6, [lr, r2]
   34fe0:	cmp	ip, r6
   34fe4:	beq	3513c <flatcc_json_printer_int32_enum_field@@Base+0x1b4>
   34fe8:	ldr	r2, [r1, #16]
   34fec:	mov	r8, r3
   34ff0:	cmp	r2, #0
   34ff4:	add	r2, r2, #1
   34ff8:	str	r2, [r1, #16]
   34ffc:	ldrne	r2, [r0, #20]
   35000:	movne	r1, #44	; 0x2c
   35004:	addne	ip, r2, #1
   35008:	strne	ip, [r0, #20]
   3500c:	strbne	r1, [r2]
   35010:	ldrb	r1, [r0, #25]
   35014:	mov	r4, r0
   35018:	cmp	r1, #0
   3501c:	bne	3514c <flatcc_json_printer_int32_enum_field@@Base+0x1c4>
   35020:	ldr	r2, [r0, #20]
   35024:	ldr	r3, [r0, #16]
   35028:	cmp	r2, r3
   3502c:	bcc	3503c <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   35030:	ldr	r3, [r0, #44]	; 0x2c
   35034:	blx	r3
   35038:	ldr	r2, [r4, #20]
   3503c:	mov	r3, #34	; 0x22
   35040:	strb	r3, [r2]
   35044:	ldrb	r3, [r4, #26]
   35048:	ldr	r0, [r4, #20]
   3504c:	ldr	r2, [r4, #16]
   35050:	cmp	r3, #0
   35054:	addeq	r0, r0, #1
   35058:	add	r3, r0, r7
   3505c:	cmp	r2, r3
   35060:	str	r0, [r4, #20]
   35064:	bhi	3510c <flatcc_json_printer_int32_enum_field@@Base+0x184>
   35068:	mov	r2, r7
   3506c:	mov	r1, r8
   35070:	mov	r0, r4
   35074:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   35078:	ldr	r7, [r4, #20]
   3507c:	mov	r3, #34	; 0x22
   35080:	strb	r3, [r7]
   35084:	ldr	r1, [r4, #20]
   35088:	ldrb	r3, [r4, #26]
   3508c:	clz	r3, r3
   35090:	lsr	r3, r3, #5
   35094:	add	r2, r1, r3
   35098:	add	r2, r2, #1
   3509c:	mov	r0, #58	; 0x3a
   350a0:	str	r2, [r4, #20]
   350a4:	strb	r0, [r1, r3]
   350a8:	ldr	r3, [r4, #20]
   350ac:	mov	r2, #32
   350b0:	strb	r2, [r3]
   350b4:	ldrb	r3, [r4, #25]
   350b8:	ldrb	r0, [r4, #27]
   350bc:	ldr	r2, [r4, #20]
   350c0:	adds	r3, r3, #0
   350c4:	movne	r3, #1
   350c8:	add	r1, r2, r3
   350cc:	cmp	r0, #0
   350d0:	str	r1, [r4, #20]
   350d4:	beq	35128 <flatcc_json_printer_int32_enum_field@@Base+0x1a0>
   350d8:	cmp	r6, #0
   350dc:	movlt	r0, #45	; 0x2d
   350e0:	lsr	r5, r6, #31
   350e4:	rsblt	r6, r6, #0
   350e8:	strblt	r0, [r2, r3]
   350ec:	addlt	r1, r1, #1
   350f0:	mov	r0, r6
   350f4:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   350f8:	ldr	r3, [r4, #20]
   350fc:	add	r0, r5, r0
   35100:	add	r3, r3, r0
   35104:	str	r3, [r4, #20]
   35108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3510c:	mov	r2, r7
   35110:	mov	r1, r8
   35114:	bl	14544 <memcpy@plt>
   35118:	ldr	r3, [r4, #20]
   3511c:	add	r7, r3, r7
   35120:	str	r7, [r4, #20]
   35124:	b	3507c <flatcc_json_printer_int32_enum_field@@Base+0xf4>
   35128:	mov	r1, r6
   3512c:	mov	r0, r4
   35130:	mov	r3, r5
   35134:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   35138:	bx	r3
   3513c:	ldrb	r2, [r0, #28]
   35140:	cmp	r2, #0
   35144:	beq	34fe8 <flatcc_json_printer_int32_enum_field@@Base+0x60>
   35148:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3514c:	ldr	r3, [r0, #20]
   35150:	mov	r2, #10
   35154:	add	r1, r3, #1
   35158:	str	r1, [r0, #20]
   3515c:	strb	r2, [r3]
   35160:	ldrb	r3, [r0, #25]
   35164:	ldr	r2, [r0, #32]
   35168:	ldr	r0, [r0, #20]
   3516c:	ldr	r1, [r4, #16]
   35170:	mul	r9, r2, r3
   35174:	add	r3, r0, r9
   35178:	cmp	r1, r3
   3517c:	bcc	3519c <flatcc_json_printer_int32_enum_field@@Base+0x214>
   35180:	mov	r2, r9
   35184:	mov	r1, #32
   35188:	bl	145bc <memset@plt>
   3518c:	ldr	r2, [r4, #20]
   35190:	add	r2, r2, r9
   35194:	str	r2, [r4, #20]
   35198:	b	3503c <flatcc_json_printer_int32_enum_field@@Base+0xb4>
   3519c:	mov	r1, r9
   351a0:	mov	r0, r4
   351a4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   351a8:	ldr	r2, [r4, #20]
   351ac:	b	3503c <flatcc_json_printer_int32_enum_field@@Base+0xb4>

000351b0 <flatcc_json_printer_int64_enum_field@@Base>:
   351b0:	add	r2, r2, #2
   351b4:	ldr	ip, [r1, #8]
   351b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   351bc:	lsl	r2, r2, #1
   351c0:	sub	sp, sp, #4
   351c4:	cmp	r2, ip
   351c8:	ldr	r8, [sp, #40]	; 0x28
   351cc:	ldrd	sl, [sp, #48]	; 0x30
   351d0:	ldr	r5, [sp, #56]	; 0x38
   351d4:	blt	351f0 <flatcc_json_printer_int64_enum_field@@Base+0x40>
   351d8:	ldrb	r2, [r0, #29]
   351dc:	cmp	r2, #0
   351e0:	beq	3534c <flatcc_json_printer_int64_enum_field@@Base+0x19c>
   351e4:	mov	r6, sl
   351e8:	mov	r7, fp
   351ec:	b	3521c <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   351f0:	ldr	ip, [r1, #4]
   351f4:	ldrh	r2, [ip, r2]
   351f8:	cmp	r2, #0
   351fc:	beq	351d8 <flatcc_json_printer_int64_enum_field@@Base+0x28>
   35200:	ldr	ip, [r1]
   35204:	cmn	ip, r2
   35208:	beq	351d8 <flatcc_json_printer_int64_enum_field@@Base+0x28>
   3520c:	ldrd	r6, [ip, r2]
   35210:	cmp	fp, r7
   35214:	cmpeq	sl, r6
   35218:	beq	3538c <flatcc_json_printer_int64_enum_field@@Base+0x1dc>
   3521c:	ldr	r2, [r1, #16]
   35220:	mov	r9, r3
   35224:	cmp	r2, #0
   35228:	add	r2, r2, #1
   3522c:	str	r2, [r1, #16]
   35230:	ldrne	r2, [r0, #20]
   35234:	movne	r1, #44	; 0x2c
   35238:	addne	ip, r2, #1
   3523c:	strne	ip, [r0, #20]
   35240:	strbne	r1, [r2]
   35244:	ldrb	r1, [r0, #25]
   35248:	mov	r4, r0
   3524c:	cmp	r1, #0
   35250:	bne	3539c <flatcc_json_printer_int64_enum_field@@Base+0x1ec>
   35254:	ldr	r2, [r0, #20]
   35258:	ldr	r3, [r0, #16]
   3525c:	cmp	r2, r3
   35260:	bcc	35270 <flatcc_json_printer_int64_enum_field@@Base+0xc0>
   35264:	ldr	r3, [r0, #44]	; 0x2c
   35268:	blx	r3
   3526c:	ldr	r2, [r4, #20]
   35270:	mov	r3, #34	; 0x22
   35274:	strb	r3, [r2]
   35278:	ldrb	r3, [r4, #26]
   3527c:	ldr	r0, [r4, #20]
   35280:	ldr	r2, [r4, #16]
   35284:	cmp	r3, #0
   35288:	addeq	r0, r0, #1
   3528c:	add	r3, r0, r8
   35290:	cmp	r2, r3
   35294:	str	r0, [r4, #20]
   35298:	bhi	35354 <flatcc_json_printer_int64_enum_field@@Base+0x1a4>
   3529c:	mov	r2, r8
   352a0:	mov	r1, r9
   352a4:	mov	r0, r4
   352a8:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   352ac:	ldr	r8, [r4, #20]
   352b0:	mov	r3, #34	; 0x22
   352b4:	strb	r3, [r8]
   352b8:	ldr	r1, [r4, #20]
   352bc:	ldrb	r3, [r4, #26]
   352c0:	clz	r3, r3
   352c4:	lsr	r3, r3, #5
   352c8:	add	r2, r1, r3
   352cc:	add	r2, r2, #1
   352d0:	mov	r0, #58	; 0x3a
   352d4:	str	r2, [r4, #20]
   352d8:	strb	r0, [r1, r3]
   352dc:	ldr	r3, [r4, #20]
   352e0:	mov	r2, #32
   352e4:	strb	r2, [r3]
   352e8:	ldrb	r3, [r4, #25]
   352ec:	ldrb	r0, [r4, #27]
   352f0:	ldr	r1, [r4, #20]
   352f4:	adds	r3, r3, #0
   352f8:	movne	r3, #1
   352fc:	add	r2, r1, r3
   35300:	cmp	r0, #0
   35304:	str	r2, [r4, #20]
   35308:	beq	35370 <flatcc_json_printer_int64_enum_field@@Base+0x1c0>
   3530c:	cmp	r6, #0
   35310:	sbcs	r0, r7, #0
   35314:	lsr	r5, r7, #31
   35318:	bge	35330 <flatcc_json_printer_int64_enum_field@@Base+0x180>
   3531c:	rsbs	r6, r6, #0
   35320:	rsc	r7, r7, #0
   35324:	add	r2, r2, #1
   35328:	mov	r0, #45	; 0x2d
   3532c:	strb	r0, [r1, r3]
   35330:	mov	r0, r6
   35334:	mov	r1, r7
   35338:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   3533c:	ldr	r3, [r4, #20]
   35340:	add	r0, r5, r0
   35344:	add	r3, r3, r0
   35348:	str	r3, [r4, #20]
   3534c:	add	sp, sp, #4
   35350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35354:	mov	r2, r8
   35358:	mov	r1, r9
   3535c:	bl	14544 <memcpy@plt>
   35360:	ldr	r3, [r4, #20]
   35364:	add	r8, r3, r8
   35368:	str	r8, [r4, #20]
   3536c:	b	352b0 <flatcc_json_printer_int64_enum_field@@Base+0x100>
   35370:	mov	r2, r6
   35374:	mov	r3, r7
   35378:	mov	r0, r4
   3537c:	mov	r1, r5
   35380:	add	sp, sp, #4
   35384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35388:	bx	r1
   3538c:	ldrb	r2, [r0, #28]
   35390:	cmp	r2, #0
   35394:	beq	3521c <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   35398:	b	3534c <flatcc_json_printer_int64_enum_field@@Base+0x19c>
   3539c:	ldr	r3, [r0, #20]
   353a0:	mov	r2, #10
   353a4:	add	r1, r3, #1
   353a8:	str	r1, [r0, #20]
   353ac:	strb	r2, [r3]
   353b0:	ldrb	r3, [r0, #25]
   353b4:	ldr	r2, [r0, #32]
   353b8:	ldr	r0, [r0, #20]
   353bc:	ldr	r1, [r4, #16]
   353c0:	mul	sl, r2, r3
   353c4:	add	r3, r0, sl
   353c8:	cmp	r1, r3
   353cc:	bcc	353ec <flatcc_json_printer_int64_enum_field@@Base+0x23c>
   353d0:	mov	r2, sl
   353d4:	mov	r1, #32
   353d8:	bl	145bc <memset@plt>
   353dc:	ldr	r2, [r4, #20]
   353e0:	add	r2, r2, sl
   353e4:	str	r2, [r4, #20]
   353e8:	b	35270 <flatcc_json_printer_int64_enum_field@@Base+0xc0>
   353ec:	mov	r1, sl
   353f0:	mov	r0, r4
   353f4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   353f8:	ldr	r2, [r4, #20]
   353fc:	b	35270 <flatcc_json_printer_int64_enum_field@@Base+0xc0>

00035400 <flatcc_json_printer_bool_enum_field@@Base>:
   35400:	add	r2, r2, #2
   35404:	ldr	ip, [r1, #8]
   35408:	lsl	r2, r2, #1
   3540c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35410:	cmp	r2, ip
   35414:	ldr	r7, [sp, #32]
   35418:	ldrb	ip, [sp, #36]	; 0x24
   3541c:	ldr	r5, [sp, #40]	; 0x28
   35420:	blt	35438 <flatcc_json_printer_bool_enum_field@@Base+0x38>
   35424:	ldrb	r2, [r0, #29]
   35428:	cmp	r2, #0
   3542c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   35430:	mov	r6, ip
   35434:	b	35460 <flatcc_json_printer_bool_enum_field@@Base+0x60>
   35438:	ldr	lr, [r1, #4]
   3543c:	ldrh	r2, [lr, r2]
   35440:	cmp	r2, #0
   35444:	beq	35424 <flatcc_json_printer_bool_enum_field@@Base+0x24>
   35448:	ldr	lr, [r1]
   3544c:	cmn	lr, r2
   35450:	beq	35424 <flatcc_json_printer_bool_enum_field@@Base+0x24>
   35454:	ldrb	r6, [lr, r2]
   35458:	cmp	ip, r6
   3545c:	beq	35594 <flatcc_json_printer_bool_enum_field@@Base+0x194>
   35460:	ldr	r2, [r1, #16]
   35464:	mov	r8, r3
   35468:	cmp	r2, #0
   3546c:	add	r2, r2, #1
   35470:	str	r2, [r1, #16]
   35474:	ldrne	r2, [r0, #20]
   35478:	movne	r1, #44	; 0x2c
   3547c:	addne	ip, r2, #1
   35480:	strne	ip, [r0, #20]
   35484:	strbne	r1, [r2]
   35488:	ldrb	r1, [r0, #25]
   3548c:	mov	r4, r0
   35490:	cmp	r1, #0
   35494:	bne	355a4 <flatcc_json_printer_bool_enum_field@@Base+0x1a4>
   35498:	ldr	r2, [r0, #20]
   3549c:	ldr	r3, [r0, #16]
   354a0:	cmp	r2, r3
   354a4:	bcc	354b4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   354a8:	ldr	r3, [r0, #44]	; 0x2c
   354ac:	blx	r3
   354b0:	ldr	r2, [r4, #20]
   354b4:	mov	r3, #34	; 0x22
   354b8:	strb	r3, [r2]
   354bc:	ldrb	r3, [r4, #26]
   354c0:	ldr	r0, [r4, #20]
   354c4:	ldr	r2, [r4, #16]
   354c8:	cmp	r3, #0
   354cc:	addeq	r0, r0, #1
   354d0:	add	r3, r0, r7
   354d4:	cmp	r2, r3
   354d8:	str	r0, [r4, #20]
   354dc:	bhi	35578 <flatcc_json_printer_bool_enum_field@@Base+0x178>
   354e0:	mov	r2, r7
   354e4:	mov	r1, r8
   354e8:	mov	r0, r4
   354ec:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   354f0:	ldr	r7, [r4, #20]
   354f4:	mov	r3, #34	; 0x22
   354f8:	strb	r3, [r7]
   354fc:	ldr	r1, [r4, #20]
   35500:	ldrb	r3, [r4, #26]
   35504:	clz	r3, r3
   35508:	lsr	r3, r3, #5
   3550c:	add	r2, r1, r3
   35510:	add	r2, r2, #1
   35514:	mov	r0, #58	; 0x3a
   35518:	str	r2, [r4, #20]
   3551c:	strb	r0, [r1, r3]
   35520:	ldr	r3, [r4, #20]
   35524:	mov	r2, #32
   35528:	strb	r2, [r3]
   3552c:	ldrb	r2, [r4, #25]
   35530:	ldrb	r3, [r4, #27]
   35534:	ldr	r1, [r4, #20]
   35538:	cmp	r2, #0
   3553c:	addne	r1, r1, #1
   35540:	cmp	r3, #0
   35544:	str	r1, [r4, #20]
   35548:	bne	35560 <flatcc_json_printer_bool_enum_field@@Base+0x160>
   3554c:	mov	r1, r6
   35550:	mov	r0, r4
   35554:	mov	r3, r5
   35558:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3555c:	bx	r3
   35560:	mov	r0, r6
   35564:	bl	3118c <flatcc_json_parser_table_as_root@@Base+0x124c>
   35568:	ldr	r3, [r4, #20]
   3556c:	add	r0, r3, r0
   35570:	str	r0, [r4, #20]
   35574:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35578:	mov	r2, r7
   3557c:	mov	r1, r8
   35580:	bl	14544 <memcpy@plt>
   35584:	ldr	r3, [r4, #20]
   35588:	add	r7, r3, r7
   3558c:	str	r7, [r4, #20]
   35590:	b	354f4 <flatcc_json_printer_bool_enum_field@@Base+0xf4>
   35594:	ldrb	r2, [r0, #28]
   35598:	cmp	r2, #0
   3559c:	beq	35460 <flatcc_json_printer_bool_enum_field@@Base+0x60>
   355a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   355a4:	ldr	r3, [r0, #20]
   355a8:	mov	r2, #10
   355ac:	add	r1, r3, #1
   355b0:	str	r1, [r0, #20]
   355b4:	strb	r2, [r3]
   355b8:	ldrb	r3, [r0, #25]
   355bc:	ldr	r2, [r0, #32]
   355c0:	ldr	r0, [r0, #20]
   355c4:	ldr	r1, [r4, #16]
   355c8:	mul	r9, r2, r3
   355cc:	add	r3, r0, r9
   355d0:	cmp	r1, r3
   355d4:	bcc	355f4 <flatcc_json_printer_bool_enum_field@@Base+0x1f4>
   355d8:	mov	r2, r9
   355dc:	mov	r1, #32
   355e0:	bl	145bc <memset@plt>
   355e4:	ldr	r2, [r4, #20]
   355e8:	add	r2, r2, r9
   355ec:	str	r2, [r4, #20]
   355f0:	b	354b4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>
   355f4:	mov	r1, r9
   355f8:	mov	r0, r4
   355fc:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   35600:	ldr	r2, [r4, #20]
   35604:	b	354b4 <flatcc_json_printer_bool_enum_field@@Base+0xb4>

00035608 <flatcc_json_printer_uint8_struct_field@@Base>:
   35608:	cmp	r1, #0
   3560c:	push	{r4, r5, r6, r7, r8, lr}
   35610:	mov	r4, r0
   35614:	ldrb	r5, [r2, r3]
   35618:	ldrne	r3, [r0, #20]
   3561c:	movne	r2, #44	; 0x2c
   35620:	addne	r1, r3, #1
   35624:	strne	r1, [r0, #20]
   35628:	strbne	r2, [r3]
   3562c:	ldrb	r1, [r0, #25]
   35630:	ldr	r6, [sp, #28]
   35634:	cmp	r1, #0
   35638:	bne	35714 <flatcc_json_printer_uint8_struct_field@@Base+0x10c>
   3563c:	ldr	r2, [r0, #20]
   35640:	ldr	r3, [r0, #16]
   35644:	cmp	r2, r3
   35648:	bcs	356f0 <flatcc_json_printer_uint8_struct_field@@Base+0xe8>
   3564c:	mov	r3, #34	; 0x22
   35650:	strb	r3, [r2]
   35654:	ldrb	r3, [r4, #26]
   35658:	ldr	r0, [r4, #20]
   3565c:	ldr	r2, [r4, #16]
   35660:	cmp	r3, #0
   35664:	addeq	r0, r0, #1
   35668:	add	r3, r0, r6
   3566c:	cmp	r2, r3
   35670:	str	r0, [r4, #20]
   35674:	mov	r2, r6
   35678:	ldr	r1, [sp, #24]
   3567c:	bhi	35700 <flatcc_json_printer_uint8_struct_field@@Base+0xf8>
   35680:	mov	r0, r4
   35684:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   35688:	ldr	r6, [r4, #20]
   3568c:	mov	r3, #34	; 0x22
   35690:	strb	r3, [r6]
   35694:	ldr	r1, [r4, #20]
   35698:	ldrb	r3, [r4, #26]
   3569c:	clz	r3, r3
   356a0:	lsr	r3, r3, #5
   356a4:	add	r2, r1, r3
   356a8:	add	r2, r2, #1
   356ac:	mov	r0, #58	; 0x3a
   356b0:	str	r2, [r4, #20]
   356b4:	strb	r0, [r1, r3]
   356b8:	ldr	r3, [r4, #20]
   356bc:	mov	r2, #32
   356c0:	mov	r0, r5
   356c4:	strb	r2, [r3]
   356c8:	ldrb	r3, [r4, #25]
   356cc:	ldr	r1, [r4, #20]
   356d0:	cmp	r3, #0
   356d4:	addne	r1, r1, #1
   356d8:	str	r1, [r4, #20]
   356dc:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   356e0:	ldr	r3, [r4, #20]
   356e4:	add	r0, r3, r0
   356e8:	str	r0, [r4, #20]
   356ec:	pop	{r4, r5, r6, r7, r8, pc}
   356f0:	ldr	r3, [r0, #44]	; 0x2c
   356f4:	blx	r3
   356f8:	ldr	r2, [r4, #20]
   356fc:	b	3564c <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   35700:	bl	14544 <memcpy@plt>
   35704:	ldr	r3, [r4, #20]
   35708:	add	r6, r3, r6
   3570c:	str	r6, [r4, #20]
   35710:	b	3568c <flatcc_json_printer_uint8_struct_field@@Base+0x84>
   35714:	ldr	r3, [r0, #20]
   35718:	mov	r2, #10
   3571c:	add	r1, r3, #1
   35720:	str	r1, [r0, #20]
   35724:	strb	r2, [r3]
   35728:	ldrb	r7, [r0, #25]
   3572c:	ldr	r2, [r0, #32]
   35730:	ldr	r0, [r0, #20]
   35734:	ldr	r1, [r4, #16]
   35738:	mul	r7, r2, r7
   3573c:	add	r3, r0, r7
   35740:	cmp	r1, r3
   35744:	bcc	35764 <flatcc_json_printer_uint8_struct_field@@Base+0x15c>
   35748:	mov	r2, r7
   3574c:	mov	r1, #32
   35750:	bl	145bc <memset@plt>
   35754:	ldr	r2, [r4, #20]
   35758:	add	r2, r2, r7
   3575c:	str	r2, [r4, #20]
   35760:	b	3564c <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   35764:	mov	r1, r7
   35768:	mov	r0, r4
   3576c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   35770:	ldr	r2, [r4, #20]
   35774:	b	3564c <flatcc_json_printer_uint8_struct_field@@Base+0x44>

00035778 <flatcc_json_printer_uint16_struct_field@@Base>:
   35778:	cmp	r1, #0
   3577c:	push	{r4, r5, r6, r7, r8, lr}
   35780:	mov	r4, r0
   35784:	ldrh	r5, [r2, r3]
   35788:	ldrne	r3, [r0, #20]
   3578c:	movne	r2, #44	; 0x2c
   35790:	addne	r1, r3, #1
   35794:	strne	r1, [r0, #20]
   35798:	strbne	r2, [r3]
   3579c:	ldrb	r1, [r0, #25]
   357a0:	ldr	r6, [sp, #28]
   357a4:	cmp	r1, #0
   357a8:	bne	35884 <flatcc_json_printer_uint16_struct_field@@Base+0x10c>
   357ac:	ldr	r2, [r0, #20]
   357b0:	ldr	r3, [r0, #16]
   357b4:	cmp	r2, r3
   357b8:	bcs	35860 <flatcc_json_printer_uint16_struct_field@@Base+0xe8>
   357bc:	mov	r3, #34	; 0x22
   357c0:	strb	r3, [r2]
   357c4:	ldrb	r3, [r4, #26]
   357c8:	ldr	r0, [r4, #20]
   357cc:	ldr	r2, [r4, #16]
   357d0:	cmp	r3, #0
   357d4:	addeq	r0, r0, #1
   357d8:	add	r3, r0, r6
   357dc:	cmp	r2, r3
   357e0:	str	r0, [r4, #20]
   357e4:	mov	r2, r6
   357e8:	ldr	r1, [sp, #24]
   357ec:	bhi	35870 <flatcc_json_printer_uint16_struct_field@@Base+0xf8>
   357f0:	mov	r0, r4
   357f4:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   357f8:	ldr	r6, [r4, #20]
   357fc:	mov	r3, #34	; 0x22
   35800:	strb	r3, [r6]
   35804:	ldr	r1, [r4, #20]
   35808:	ldrb	r3, [r4, #26]
   3580c:	clz	r3, r3
   35810:	lsr	r3, r3, #5
   35814:	add	r2, r1, r3
   35818:	add	r2, r2, #1
   3581c:	mov	r0, #58	; 0x3a
   35820:	str	r2, [r4, #20]
   35824:	strb	r0, [r1, r3]
   35828:	ldr	r3, [r4, #20]
   3582c:	mov	r2, #32
   35830:	mov	r0, r5
   35834:	strb	r2, [r3]
   35838:	ldrb	r3, [r4, #25]
   3583c:	ldr	r1, [r4, #20]
   35840:	cmp	r3, #0
   35844:	addne	r1, r1, #1
   35848:	str	r1, [r4, #20]
   3584c:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   35850:	ldr	r3, [r4, #20]
   35854:	add	r0, r3, r0
   35858:	str	r0, [r4, #20]
   3585c:	pop	{r4, r5, r6, r7, r8, pc}
   35860:	ldr	r3, [r0, #44]	; 0x2c
   35864:	blx	r3
   35868:	ldr	r2, [r4, #20]
   3586c:	b	357bc <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   35870:	bl	14544 <memcpy@plt>
   35874:	ldr	r3, [r4, #20]
   35878:	add	r6, r3, r6
   3587c:	str	r6, [r4, #20]
   35880:	b	357fc <flatcc_json_printer_uint16_struct_field@@Base+0x84>
   35884:	ldr	r3, [r0, #20]
   35888:	mov	r2, #10
   3588c:	add	r1, r3, #1
   35890:	str	r1, [r0, #20]
   35894:	strb	r2, [r3]
   35898:	ldrb	r7, [r0, #25]
   3589c:	ldr	r2, [r0, #32]
   358a0:	ldr	r0, [r0, #20]
   358a4:	ldr	r1, [r4, #16]
   358a8:	mul	r7, r2, r7
   358ac:	add	r3, r0, r7
   358b0:	cmp	r1, r3
   358b4:	bcc	358d4 <flatcc_json_printer_uint16_struct_field@@Base+0x15c>
   358b8:	mov	r2, r7
   358bc:	mov	r1, #32
   358c0:	bl	145bc <memset@plt>
   358c4:	ldr	r2, [r4, #20]
   358c8:	add	r2, r2, r7
   358cc:	str	r2, [r4, #20]
   358d0:	b	357bc <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   358d4:	mov	r1, r7
   358d8:	mov	r0, r4
   358dc:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   358e0:	ldr	r2, [r4, #20]
   358e4:	b	357bc <flatcc_json_printer_uint16_struct_field@@Base+0x44>

000358e8 <flatcc_json_printer_uint32_struct_field@@Base>:
   358e8:	cmp	r1, #0
   358ec:	push	{r4, r5, r6, r7, r8, lr}
   358f0:	mov	r4, r0
   358f4:	ldr	r5, [r2, r3]
   358f8:	ldrne	r3, [r0, #20]
   358fc:	movne	r2, #44	; 0x2c
   35900:	addne	r1, r3, #1
   35904:	strne	r1, [r0, #20]
   35908:	strbne	r2, [r3]
   3590c:	ldrb	r1, [r0, #25]
   35910:	ldr	r6, [sp, #28]
   35914:	cmp	r1, #0
   35918:	bne	359f4 <flatcc_json_printer_uint32_struct_field@@Base+0x10c>
   3591c:	ldr	r2, [r0, #20]
   35920:	ldr	r3, [r0, #16]
   35924:	cmp	r2, r3
   35928:	bcs	359d0 <flatcc_json_printer_uint32_struct_field@@Base+0xe8>
   3592c:	mov	r3, #34	; 0x22
   35930:	strb	r3, [r2]
   35934:	ldrb	r3, [r4, #26]
   35938:	ldr	r0, [r4, #20]
   3593c:	ldr	r2, [r4, #16]
   35940:	cmp	r3, #0
   35944:	addeq	r0, r0, #1
   35948:	add	r3, r0, r6
   3594c:	cmp	r2, r3
   35950:	str	r0, [r4, #20]
   35954:	mov	r2, r6
   35958:	ldr	r1, [sp, #24]
   3595c:	bhi	359e0 <flatcc_json_printer_uint32_struct_field@@Base+0xf8>
   35960:	mov	r0, r4
   35964:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   35968:	ldr	r6, [r4, #20]
   3596c:	mov	r3, #34	; 0x22
   35970:	strb	r3, [r6]
   35974:	ldr	r1, [r4, #20]
   35978:	ldrb	r3, [r4, #26]
   3597c:	clz	r3, r3
   35980:	lsr	r3, r3, #5
   35984:	add	r2, r1, r3
   35988:	add	r2, r2, #1
   3598c:	mov	r0, #58	; 0x3a
   35990:	str	r2, [r4, #20]
   35994:	strb	r0, [r1, r3]
   35998:	ldr	r3, [r4, #20]
   3599c:	mov	r2, #32
   359a0:	mov	r0, r5
   359a4:	strb	r2, [r3]
   359a8:	ldrb	r3, [r4, #25]
   359ac:	ldr	r1, [r4, #20]
   359b0:	cmp	r3, #0
   359b4:	addne	r1, r1, #1
   359b8:	str	r1, [r4, #20]
   359bc:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   359c0:	ldr	r3, [r4, #20]
   359c4:	add	r0, r3, r0
   359c8:	str	r0, [r4, #20]
   359cc:	pop	{r4, r5, r6, r7, r8, pc}
   359d0:	ldr	r3, [r0, #44]	; 0x2c
   359d4:	blx	r3
   359d8:	ldr	r2, [r4, #20]
   359dc:	b	3592c <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   359e0:	bl	14544 <memcpy@plt>
   359e4:	ldr	r3, [r4, #20]
   359e8:	add	r6, r3, r6
   359ec:	str	r6, [r4, #20]
   359f0:	b	3596c <flatcc_json_printer_uint32_struct_field@@Base+0x84>
   359f4:	ldr	r3, [r0, #20]
   359f8:	mov	r2, #10
   359fc:	add	r1, r3, #1
   35a00:	str	r1, [r0, #20]
   35a04:	strb	r2, [r3]
   35a08:	ldrb	r7, [r0, #25]
   35a0c:	ldr	r2, [r0, #32]
   35a10:	ldr	r0, [r0, #20]
   35a14:	ldr	r1, [r4, #16]
   35a18:	mul	r7, r2, r7
   35a1c:	add	r3, r0, r7
   35a20:	cmp	r1, r3
   35a24:	bcc	35a44 <flatcc_json_printer_uint32_struct_field@@Base+0x15c>
   35a28:	mov	r2, r7
   35a2c:	mov	r1, #32
   35a30:	bl	145bc <memset@plt>
   35a34:	ldr	r2, [r4, #20]
   35a38:	add	r2, r2, r7
   35a3c:	str	r2, [r4, #20]
   35a40:	b	3592c <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   35a44:	mov	r1, r7
   35a48:	mov	r0, r4
   35a4c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   35a50:	ldr	r2, [r4, #20]
   35a54:	b	3592c <flatcc_json_printer_uint32_struct_field@@Base+0x44>

00035a58 <flatcc_json_printer_uint64_struct_field@@Base>:
   35a58:	cmp	r1, #0
   35a5c:	push	{r4, r5, r6, r7, r8, lr}
   35a60:	mov	r4, r0
   35a64:	ldrd	r6, [r2, r3]
   35a68:	ldrne	r3, [r0, #20]
   35a6c:	movne	r2, #44	; 0x2c
   35a70:	addne	r1, r3, #1
   35a74:	strne	r1, [r0, #20]
   35a78:	strbne	r2, [r3]
   35a7c:	ldrb	r1, [r0, #25]
   35a80:	ldr	r5, [sp, #28]
   35a84:	cmp	r1, #0
   35a88:	bne	35b68 <flatcc_json_printer_uint64_struct_field@@Base+0x110>
   35a8c:	ldr	r2, [r0, #20]
   35a90:	ldr	r3, [r0, #16]
   35a94:	cmp	r2, r3
   35a98:	bcs	35b44 <flatcc_json_printer_uint64_struct_field@@Base+0xec>
   35a9c:	mov	r3, #34	; 0x22
   35aa0:	strb	r3, [r2]
   35aa4:	ldrb	r3, [r4, #26]
   35aa8:	ldr	r0, [r4, #20]
   35aac:	ldr	r2, [r4, #16]
   35ab0:	cmp	r3, #0
   35ab4:	addeq	r0, r0, #1
   35ab8:	add	r3, r0, r5
   35abc:	cmp	r2, r3
   35ac0:	str	r0, [r4, #20]
   35ac4:	mov	r2, r5
   35ac8:	ldr	r1, [sp, #24]
   35acc:	bhi	35b54 <flatcc_json_printer_uint64_struct_field@@Base+0xfc>
   35ad0:	mov	r0, r4
   35ad4:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   35ad8:	ldr	r5, [r4, #20]
   35adc:	mov	r3, #34	; 0x22
   35ae0:	strb	r3, [r5]
   35ae4:	ldr	r1, [r4, #20]
   35ae8:	ldrb	r3, [r4, #26]
   35aec:	clz	r3, r3
   35af0:	lsr	r3, r3, #5
   35af4:	add	r2, r1, r3
   35af8:	add	r2, r2, #1
   35afc:	mov	r0, #58	; 0x3a
   35b00:	str	r2, [r4, #20]
   35b04:	strb	r0, [r1, r3]
   35b08:	ldr	r3, [r4, #20]
   35b0c:	mov	r2, #32
   35b10:	mov	r0, r6
   35b14:	strb	r2, [r3]
   35b18:	ldrb	r3, [r4, #25]
   35b1c:	ldr	r2, [r4, #20]
   35b20:	mov	r1, r7
   35b24:	cmp	r3, #0
   35b28:	addne	r2, r2, #1
   35b2c:	str	r2, [r4, #20]
   35b30:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   35b34:	ldr	r3, [r4, #20]
   35b38:	add	r0, r3, r0
   35b3c:	str	r0, [r4, #20]
   35b40:	pop	{r4, r5, r6, r7, r8, pc}
   35b44:	ldr	r3, [r0, #44]	; 0x2c
   35b48:	blx	r3
   35b4c:	ldr	r2, [r4, #20]
   35b50:	b	35a9c <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35b54:	bl	14544 <memcpy@plt>
   35b58:	ldr	r3, [r4, #20]
   35b5c:	add	r5, r3, r5
   35b60:	str	r5, [r4, #20]
   35b64:	b	35adc <flatcc_json_printer_uint64_struct_field@@Base+0x84>
   35b68:	ldr	r3, [r0, #20]
   35b6c:	mov	r2, #10
   35b70:	add	r1, r3, #1
   35b74:	str	r1, [r0, #20]
   35b78:	strb	r2, [r3]
   35b7c:	ldrb	r8, [r0, #25]
   35b80:	ldr	r2, [r0, #32]
   35b84:	ldr	r0, [r0, #20]
   35b88:	ldr	r1, [r4, #16]
   35b8c:	mul	r8, r2, r8
   35b90:	add	r3, r0, r8
   35b94:	cmp	r1, r3
   35b98:	bcc	35bb8 <flatcc_json_printer_uint64_struct_field@@Base+0x160>
   35b9c:	mov	r2, r8
   35ba0:	mov	r1, #32
   35ba4:	bl	145bc <memset@plt>
   35ba8:	ldr	r2, [r4, #20]
   35bac:	add	r2, r2, r8
   35bb0:	str	r2, [r4, #20]
   35bb4:	b	35a9c <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35bb8:	mov	r1, r8
   35bbc:	mov	r0, r4
   35bc0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   35bc4:	ldr	r2, [r4, #20]
   35bc8:	b	35a9c <flatcc_json_printer_uint64_struct_field@@Base+0x44>

00035bcc <flatcc_json_printer_int8_struct_field@@Base>:
   35bcc:	cmp	r1, #0
   35bd0:	push	{r4, r5, r6, r7, r8, lr}
   35bd4:	mov	r4, r0
   35bd8:	ldrsb	r5, [r2, r3]
   35bdc:	ldrne	r3, [r0, #20]
   35be0:	movne	r2, #44	; 0x2c
   35be4:	addne	r1, r3, #1
   35be8:	strne	r1, [r0, #20]
   35bec:	strbne	r2, [r3]
   35bf0:	ldrb	r1, [r0, #25]
   35bf4:	ldr	r6, [sp, #28]
   35bf8:	cmp	r1, #0
   35bfc:	bne	35cfc <flatcc_json_printer_int8_struct_field@@Base+0x130>
   35c00:	ldr	r2, [r0, #20]
   35c04:	ldr	r3, [r0, #16]
   35c08:	cmp	r2, r3
   35c0c:	bcs	35cd8 <flatcc_json_printer_int8_struct_field@@Base+0x10c>
   35c10:	mov	r3, #34	; 0x22
   35c14:	strb	r3, [r2]
   35c18:	ldrb	r3, [r4, #26]
   35c1c:	ldr	r0, [r4, #20]
   35c20:	ldr	r2, [r4, #16]
   35c24:	cmp	r3, #0
   35c28:	addeq	r0, r0, #1
   35c2c:	add	r3, r0, r6
   35c30:	cmp	r2, r3
   35c34:	str	r0, [r4, #20]
   35c38:	mov	r2, r6
   35c3c:	ldr	r1, [sp, #24]
   35c40:	bhi	35ce8 <flatcc_json_printer_int8_struct_field@@Base+0x11c>
   35c44:	mov	r0, r4
   35c48:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   35c4c:	ldr	r6, [r4, #20]
   35c50:	mov	r3, #34	; 0x22
   35c54:	strb	r3, [r6]
   35c58:	ldr	r1, [r4, #20]
   35c5c:	ldrb	r3, [r4, #26]
   35c60:	clz	r3, r3
   35c64:	lsr	r3, r3, #5
   35c68:	add	r2, r1, r3
   35c6c:	mov	r0, #58	; 0x3a
   35c70:	add	r2, r2, #1
   35c74:	str	r2, [r4, #20]
   35c78:	strb	r0, [r1, r3]
   35c7c:	ldr	r3, [r4, #20]
   35c80:	mov	r2, #32
   35c84:	lsr	r6, r5, #31
   35c88:	strb	r2, [r3]
   35c8c:	ldrb	r3, [r4, #25]
   35c90:	ldr	r2, [r4, #20]
   35c94:	adds	r3, r3, #0
   35c98:	movne	r3, #1
   35c9c:	cmp	r5, #0
   35ca0:	rsblt	r5, r5, #0
   35ca4:	add	r1, r2, r3
   35ca8:	sxtblt	r5, r5
   35cac:	movlt	r0, #45	; 0x2d
   35cb0:	str	r1, [r4, #20]
   35cb4:	strblt	r0, [r2, r3]
   35cb8:	addlt	r1, r1, #1
   35cbc:	uxtb	r0, r5
   35cc0:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   35cc4:	ldr	r3, [r4, #20]
   35cc8:	add	r0, r6, r0
   35ccc:	add	r3, r3, r0
   35cd0:	str	r3, [r4, #20]
   35cd4:	pop	{r4, r5, r6, r7, r8, pc}
   35cd8:	ldr	r3, [r0, #44]	; 0x2c
   35cdc:	blx	r3
   35ce0:	ldr	r2, [r4, #20]
   35ce4:	b	35c10 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   35ce8:	bl	14544 <memcpy@plt>
   35cec:	ldr	r3, [r4, #20]
   35cf0:	add	r6, r3, r6
   35cf4:	str	r6, [r4, #20]
   35cf8:	b	35c50 <flatcc_json_printer_int8_struct_field@@Base+0x84>
   35cfc:	ldr	r3, [r0, #20]
   35d00:	mov	r2, #10
   35d04:	add	r1, r3, #1
   35d08:	str	r1, [r0, #20]
   35d0c:	strb	r2, [r3]
   35d10:	ldrb	r7, [r0, #25]
   35d14:	ldr	r2, [r0, #32]
   35d18:	ldr	r0, [r0, #20]
   35d1c:	ldr	r1, [r4, #16]
   35d20:	mul	r7, r2, r7
   35d24:	add	r3, r0, r7
   35d28:	cmp	r1, r3
   35d2c:	bcc	35d4c <flatcc_json_printer_int8_struct_field@@Base+0x180>
   35d30:	mov	r2, r7
   35d34:	mov	r1, #32
   35d38:	bl	145bc <memset@plt>
   35d3c:	ldr	r2, [r4, #20]
   35d40:	add	r2, r2, r7
   35d44:	str	r2, [r4, #20]
   35d48:	b	35c10 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   35d4c:	mov	r1, r7
   35d50:	mov	r0, r4
   35d54:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   35d58:	ldr	r2, [r4, #20]
   35d5c:	b	35c10 <flatcc_json_printer_int8_struct_field@@Base+0x44>

00035d60 <flatcc_json_printer_int16_struct_field@@Base>:
   35d60:	cmp	r1, #0
   35d64:	push	{r4, r5, r6, r7, r8, lr}
   35d68:	mov	r4, r0
   35d6c:	ldrsh	r5, [r2, r3]
   35d70:	ldrne	r3, [r0, #20]
   35d74:	movne	r2, #44	; 0x2c
   35d78:	addne	r1, r3, #1
   35d7c:	strne	r1, [r0, #20]
   35d80:	strbne	r2, [r3]
   35d84:	ldrb	r1, [r0, #25]
   35d88:	ldr	r6, [sp, #28]
   35d8c:	cmp	r1, #0
   35d90:	bne	35e90 <flatcc_json_printer_int16_struct_field@@Base+0x130>
   35d94:	ldr	r2, [r0, #20]
   35d98:	ldr	r3, [r0, #16]
   35d9c:	cmp	r2, r3
   35da0:	bcs	35e6c <flatcc_json_printer_int16_struct_field@@Base+0x10c>
   35da4:	mov	r3, #34	; 0x22
   35da8:	strb	r3, [r2]
   35dac:	ldrb	r3, [r4, #26]
   35db0:	ldr	r0, [r4, #20]
   35db4:	ldr	r2, [r4, #16]
   35db8:	cmp	r3, #0
   35dbc:	addeq	r0, r0, #1
   35dc0:	add	r3, r0, r6
   35dc4:	cmp	r2, r3
   35dc8:	str	r0, [r4, #20]
   35dcc:	mov	r2, r6
   35dd0:	ldr	r1, [sp, #24]
   35dd4:	bhi	35e7c <flatcc_json_printer_int16_struct_field@@Base+0x11c>
   35dd8:	mov	r0, r4
   35ddc:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   35de0:	ldr	r6, [r4, #20]
   35de4:	mov	r3, #34	; 0x22
   35de8:	strb	r3, [r6]
   35dec:	ldr	r1, [r4, #20]
   35df0:	ldrb	r3, [r4, #26]
   35df4:	clz	r3, r3
   35df8:	lsr	r3, r3, #5
   35dfc:	add	r2, r1, r3
   35e00:	mov	r0, #58	; 0x3a
   35e04:	add	r2, r2, #1
   35e08:	str	r2, [r4, #20]
   35e0c:	strb	r0, [r1, r3]
   35e10:	ldr	r3, [r4, #20]
   35e14:	mov	r2, #32
   35e18:	lsr	r6, r5, #31
   35e1c:	strb	r2, [r3]
   35e20:	ldrb	r3, [r4, #25]
   35e24:	ldr	r2, [r4, #20]
   35e28:	adds	r3, r3, #0
   35e2c:	movne	r3, #1
   35e30:	cmp	r5, #0
   35e34:	rsblt	r5, r5, #0
   35e38:	add	r1, r2, r3
   35e3c:	sxthlt	r5, r5
   35e40:	movlt	r0, #45	; 0x2d
   35e44:	str	r1, [r4, #20]
   35e48:	strblt	r0, [r2, r3]
   35e4c:	addlt	r1, r1, #1
   35e50:	uxth	r0, r5
   35e54:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   35e58:	ldr	r3, [r4, #20]
   35e5c:	add	r0, r6, r0
   35e60:	add	r3, r3, r0
   35e64:	str	r3, [r4, #20]
   35e68:	pop	{r4, r5, r6, r7, r8, pc}
   35e6c:	ldr	r3, [r0, #44]	; 0x2c
   35e70:	blx	r3
   35e74:	ldr	r2, [r4, #20]
   35e78:	b	35da4 <flatcc_json_printer_int16_struct_field@@Base+0x44>
   35e7c:	bl	14544 <memcpy@plt>
   35e80:	ldr	r3, [r4, #20]
   35e84:	add	r6, r3, r6
   35e88:	str	r6, [r4, #20]
   35e8c:	b	35de4 <flatcc_json_printer_int16_struct_field@@Base+0x84>
   35e90:	ldr	r3, [r0, #20]
   35e94:	mov	r2, #10
   35e98:	add	r1, r3, #1
   35e9c:	str	r1, [r0, #20]
   35ea0:	strb	r2, [r3]
   35ea4:	ldrb	r7, [r0, #25]
   35ea8:	ldr	r2, [r0, #32]
   35eac:	ldr	r0, [r0, #20]
   35eb0:	ldr	r1, [r4, #16]
   35eb4:	mul	r7, r2, r7
   35eb8:	add	r3, r0, r7
   35ebc:	cmp	r1, r3
   35ec0:	bcc	35ee0 <flatcc_json_printer_int16_struct_field@@Base+0x180>
   35ec4:	mov	r2, r7
   35ec8:	mov	r1, #32
   35ecc:	bl	145bc <memset@plt>
   35ed0:	ldr	r2, [r4, #20]
   35ed4:	add	r2, r2, r7
   35ed8:	str	r2, [r4, #20]
   35edc:	b	35da4 <flatcc_json_printer_int16_struct_field@@Base+0x44>
   35ee0:	mov	r1, r7
   35ee4:	mov	r0, r4
   35ee8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   35eec:	ldr	r2, [r4, #20]
   35ef0:	b	35da4 <flatcc_json_printer_int16_struct_field@@Base+0x44>

00035ef4 <flatcc_json_printer_int32_struct_field@@Base>:
   35ef4:	cmp	r1, #0
   35ef8:	push	{r4, r5, r6, r7, r8, lr}
   35efc:	mov	r4, r0
   35f00:	ldr	r5, [r2, r3]
   35f04:	ldrne	r3, [r0, #20]
   35f08:	movne	r2, #44	; 0x2c
   35f0c:	addne	r1, r3, #1
   35f10:	strne	r1, [r0, #20]
   35f14:	strbne	r2, [r3]
   35f18:	ldrb	r1, [r0, #25]
   35f1c:	ldr	r6, [sp, #28]
   35f20:	cmp	r1, #0
   35f24:	bne	36020 <flatcc_json_printer_int32_struct_field@@Base+0x12c>
   35f28:	ldr	r2, [r0, #20]
   35f2c:	ldr	r3, [r0, #16]
   35f30:	cmp	r2, r3
   35f34:	bcs	35ffc <flatcc_json_printer_int32_struct_field@@Base+0x108>
   35f38:	mov	r3, #34	; 0x22
   35f3c:	strb	r3, [r2]
   35f40:	ldrb	r3, [r4, #26]
   35f44:	ldr	r0, [r4, #20]
   35f48:	ldr	r2, [r4, #16]
   35f4c:	cmp	r3, #0
   35f50:	addeq	r0, r0, #1
   35f54:	add	r3, r0, r6
   35f58:	cmp	r2, r3
   35f5c:	str	r0, [r4, #20]
   35f60:	mov	r2, r6
   35f64:	ldr	r1, [sp, #24]
   35f68:	bhi	3600c <flatcc_json_printer_int32_struct_field@@Base+0x118>
   35f6c:	mov	r0, r4
   35f70:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   35f74:	ldr	r6, [r4, #20]
   35f78:	mov	r3, #34	; 0x22
   35f7c:	strb	r3, [r6]
   35f80:	ldr	r1, [r4, #20]
   35f84:	ldrb	r3, [r4, #26]
   35f88:	clz	r3, r3
   35f8c:	lsr	r3, r3, #5
   35f90:	add	r2, r1, r3
   35f94:	mov	r0, #58	; 0x3a
   35f98:	add	r2, r2, #1
   35f9c:	str	r2, [r4, #20]
   35fa0:	strb	r0, [r1, r3]
   35fa4:	ldr	r3, [r4, #20]
   35fa8:	mov	r2, #32
   35fac:	lsr	r6, r5, #31
   35fb0:	strb	r2, [r3]
   35fb4:	ldrb	r3, [r4, #25]
   35fb8:	ldr	r2, [r4, #20]
   35fbc:	adds	r3, r3, #0
   35fc0:	movne	r3, #1
   35fc4:	cmp	r5, #0
   35fc8:	add	r1, r2, r3
   35fcc:	movlt	r0, #45	; 0x2d
   35fd0:	rsblt	r5, r5, #0
   35fd4:	str	r1, [r4, #20]
   35fd8:	strblt	r0, [r2, r3]
   35fdc:	addlt	r1, r1, #1
   35fe0:	mov	r0, r5
   35fe4:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   35fe8:	ldr	r3, [r4, #20]
   35fec:	add	r0, r6, r0
   35ff0:	add	r3, r3, r0
   35ff4:	str	r3, [r4, #20]
   35ff8:	pop	{r4, r5, r6, r7, r8, pc}
   35ffc:	ldr	r3, [r0, #44]	; 0x2c
   36000:	blx	r3
   36004:	ldr	r2, [r4, #20]
   36008:	b	35f38 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   3600c:	bl	14544 <memcpy@plt>
   36010:	ldr	r3, [r4, #20]
   36014:	add	r6, r3, r6
   36018:	str	r6, [r4, #20]
   3601c:	b	35f78 <flatcc_json_printer_int32_struct_field@@Base+0x84>
   36020:	ldr	r3, [r0, #20]
   36024:	mov	r2, #10
   36028:	add	r1, r3, #1
   3602c:	str	r1, [r0, #20]
   36030:	strb	r2, [r3]
   36034:	ldrb	r7, [r0, #25]
   36038:	ldr	r2, [r0, #32]
   3603c:	ldr	r0, [r0, #20]
   36040:	ldr	r1, [r4, #16]
   36044:	mul	r7, r2, r7
   36048:	add	r3, r0, r7
   3604c:	cmp	r1, r3
   36050:	bcc	36070 <flatcc_json_printer_int32_struct_field@@Base+0x17c>
   36054:	mov	r2, r7
   36058:	mov	r1, #32
   3605c:	bl	145bc <memset@plt>
   36060:	ldr	r2, [r4, #20]
   36064:	add	r2, r2, r7
   36068:	str	r2, [r4, #20]
   3606c:	b	35f38 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   36070:	mov	r1, r7
   36074:	mov	r0, r4
   36078:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3607c:	ldr	r2, [r4, #20]
   36080:	b	35f38 <flatcc_json_printer_int32_struct_field@@Base+0x44>

00036084 <flatcc_json_printer_int64_struct_field@@Base>:
   36084:	cmp	r1, #0
   36088:	push	{r4, r5, r6, r7, r8, lr}
   3608c:	mov	r4, r0
   36090:	ldrd	r6, [r2, r3]
   36094:	ldrne	r3, [r0, #20]
   36098:	movne	r2, #44	; 0x2c
   3609c:	addne	r1, r3, #1
   360a0:	strne	r1, [r0, #20]
   360a4:	strbne	r2, [r3]
   360a8:	ldrb	r1, [r0, #25]
   360ac:	ldr	r5, [sp, #28]
   360b0:	cmp	r1, #0
   360b4:	bne	361c0 <flatcc_json_printer_int64_struct_field@@Base+0x13c>
   360b8:	ldr	r2, [r0, #20]
   360bc:	ldr	r3, [r0, #16]
   360c0:	cmp	r2, r3
   360c4:	bcs	3619c <flatcc_json_printer_int64_struct_field@@Base+0x118>
   360c8:	mov	r3, #34	; 0x22
   360cc:	strb	r3, [r2]
   360d0:	ldrb	r3, [r4, #26]
   360d4:	ldr	r0, [r4, #20]
   360d8:	ldr	r2, [r4, #16]
   360dc:	cmp	r3, #0
   360e0:	addeq	r0, r0, #1
   360e4:	add	r3, r0, r5
   360e8:	cmp	r2, r3
   360ec:	str	r0, [r4, #20]
   360f0:	mov	r2, r5
   360f4:	ldr	r1, [sp, #24]
   360f8:	bhi	361ac <flatcc_json_printer_int64_struct_field@@Base+0x128>
   360fc:	mov	r0, r4
   36100:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   36104:	ldr	r5, [r4, #20]
   36108:	mov	r3, #34	; 0x22
   3610c:	strb	r3, [r5]
   36110:	ldr	r1, [r4, #20]
   36114:	ldrb	r3, [r4, #26]
   36118:	clz	r3, r3
   3611c:	lsr	r3, r3, #5
   36120:	add	r2, r1, r3
   36124:	add	r2, r2, #1
   36128:	mov	r0, #58	; 0x3a
   3612c:	str	r2, [r4, #20]
   36130:	strb	r0, [r1, r3]
   36134:	ldr	r3, [r4, #20]
   36138:	mov	r2, #32
   3613c:	lsr	r5, r7, #31
   36140:	strb	r2, [r3]
   36144:	ldrb	r3, [r4, #25]
   36148:	ldr	r1, [r4, #20]
   3614c:	adds	r3, r3, #0
   36150:	movne	r3, #1
   36154:	cmp	r6, #0
   36158:	add	r2, r1, r3
   3615c:	sbcs	r0, r7, #0
   36160:	str	r2, [r4, #20]
   36164:	bge	3617c <flatcc_json_printer_int64_struct_field@@Base+0xf8>
   36168:	rsbs	r6, r6, #0
   3616c:	rsc	r7, r7, #0
   36170:	add	r2, r2, #1
   36174:	mov	r0, #45	; 0x2d
   36178:	strb	r0, [r1, r3]
   3617c:	mov	r0, r6
   36180:	mov	r1, r7
   36184:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   36188:	ldr	r3, [r4, #20]
   3618c:	add	r0, r5, r0
   36190:	add	r3, r3, r0
   36194:	str	r3, [r4, #20]
   36198:	pop	{r4, r5, r6, r7, r8, pc}
   3619c:	ldr	r3, [r0, #44]	; 0x2c
   361a0:	blx	r3
   361a4:	ldr	r2, [r4, #20]
   361a8:	b	360c8 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   361ac:	bl	14544 <memcpy@plt>
   361b0:	ldr	r3, [r4, #20]
   361b4:	add	r5, r3, r5
   361b8:	str	r5, [r4, #20]
   361bc:	b	36108 <flatcc_json_printer_int64_struct_field@@Base+0x84>
   361c0:	ldr	r3, [r0, #20]
   361c4:	mov	r2, #10
   361c8:	add	r1, r3, #1
   361cc:	str	r1, [r0, #20]
   361d0:	strb	r2, [r3]
   361d4:	ldrb	r8, [r0, #25]
   361d8:	ldr	r2, [r0, #32]
   361dc:	ldr	r0, [r0, #20]
   361e0:	ldr	r1, [r4, #16]
   361e4:	mul	r8, r2, r8
   361e8:	add	r3, r0, r8
   361ec:	cmp	r1, r3
   361f0:	bcc	36210 <flatcc_json_printer_int64_struct_field@@Base+0x18c>
   361f4:	mov	r2, r8
   361f8:	mov	r1, #32
   361fc:	bl	145bc <memset@plt>
   36200:	ldr	r2, [r4, #20]
   36204:	add	r2, r2, r8
   36208:	str	r2, [r4, #20]
   3620c:	b	360c8 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   36210:	mov	r1, r8
   36214:	mov	r0, r4
   36218:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3621c:	ldr	r2, [r4, #20]
   36220:	b	360c8 <flatcc_json_printer_int64_struct_field@@Base+0x44>

00036224 <flatcc_json_printer_bool_struct_field@@Base>:
   36224:	cmp	r1, #0
   36228:	push	{r4, r5, r6, r7, r8, lr}
   3622c:	mov	r4, r0
   36230:	ldrb	r5, [r2, r3]
   36234:	ldrne	r3, [r0, #20]
   36238:	movne	r2, #44	; 0x2c
   3623c:	addne	r1, r3, #1
   36240:	strne	r1, [r0, #20]
   36244:	strbne	r2, [r3]
   36248:	ldrb	r1, [r0, #25]
   3624c:	ldr	r6, [sp, #28]
   36250:	cmp	r1, #0
   36254:	bne	36330 <flatcc_json_printer_bool_struct_field@@Base+0x10c>
   36258:	ldr	r2, [r0, #20]
   3625c:	ldr	r3, [r0, #16]
   36260:	cmp	r2, r3
   36264:	bcs	3630c <flatcc_json_printer_bool_struct_field@@Base+0xe8>
   36268:	mov	r3, #34	; 0x22
   3626c:	strb	r3, [r2]
   36270:	ldrb	r3, [r4, #26]
   36274:	ldr	r0, [r4, #20]
   36278:	ldr	r2, [r4, #16]
   3627c:	cmp	r3, #0
   36280:	addeq	r0, r0, #1
   36284:	add	r3, r0, r6
   36288:	cmp	r2, r3
   3628c:	str	r0, [r4, #20]
   36290:	mov	r2, r6
   36294:	ldr	r1, [sp, #24]
   36298:	bhi	3631c <flatcc_json_printer_bool_struct_field@@Base+0xf8>
   3629c:	mov	r0, r4
   362a0:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   362a4:	ldr	r6, [r4, #20]
   362a8:	mov	r3, #34	; 0x22
   362ac:	strb	r3, [r6]
   362b0:	ldr	r1, [r4, #20]
   362b4:	ldrb	r3, [r4, #26]
   362b8:	clz	r3, r3
   362bc:	lsr	r3, r3, #5
   362c0:	add	r2, r1, r3
   362c4:	add	r2, r2, #1
   362c8:	mov	r0, #58	; 0x3a
   362cc:	str	r2, [r4, #20]
   362d0:	strb	r0, [r1, r3]
   362d4:	ldr	r3, [r4, #20]
   362d8:	mov	r2, #32
   362dc:	mov	r0, r5
   362e0:	strb	r2, [r3]
   362e4:	ldrb	r3, [r4, #25]
   362e8:	ldr	r1, [r4, #20]
   362ec:	cmp	r3, #0
   362f0:	addne	r1, r1, #1
   362f4:	str	r1, [r4, #20]
   362f8:	bl	3118c <flatcc_json_parser_table_as_root@@Base+0x124c>
   362fc:	ldr	r3, [r4, #20]
   36300:	add	r0, r3, r0
   36304:	str	r0, [r4, #20]
   36308:	pop	{r4, r5, r6, r7, r8, pc}
   3630c:	ldr	r3, [r0, #44]	; 0x2c
   36310:	blx	r3
   36314:	ldr	r2, [r4, #20]
   36318:	b	36268 <flatcc_json_printer_bool_struct_field@@Base+0x44>
   3631c:	bl	14544 <memcpy@plt>
   36320:	ldr	r3, [r4, #20]
   36324:	add	r6, r3, r6
   36328:	str	r6, [r4, #20]
   3632c:	b	362a8 <flatcc_json_printer_bool_struct_field@@Base+0x84>
   36330:	ldr	r3, [r0, #20]
   36334:	mov	r2, #10
   36338:	add	r1, r3, #1
   3633c:	str	r1, [r0, #20]
   36340:	strb	r2, [r3]
   36344:	ldrb	r7, [r0, #25]
   36348:	ldr	r2, [r0, #32]
   3634c:	ldr	r0, [r0, #20]
   36350:	ldr	r1, [r4, #16]
   36354:	mul	r7, r2, r7
   36358:	add	r3, r0, r7
   3635c:	cmp	r1, r3
   36360:	bcc	36380 <flatcc_json_printer_bool_struct_field@@Base+0x15c>
   36364:	mov	r2, r7
   36368:	mov	r1, #32
   3636c:	bl	145bc <memset@plt>
   36370:	ldr	r2, [r4, #20]
   36374:	add	r2, r2, r7
   36378:	str	r2, [r4, #20]
   3637c:	b	36268 <flatcc_json_printer_bool_struct_field@@Base+0x44>
   36380:	mov	r1, r7
   36384:	mov	r0, r4
   36388:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3638c:	ldr	r2, [r4, #20]
   36390:	b	36268 <flatcc_json_printer_bool_struct_field@@Base+0x44>

00036394 <flatcc_json_printer_float_struct_field@@Base>:
   36394:	cmp	r1, #0
   36398:	add	r3, r2, r3
   3639c:	push	{r4, r5, r6, lr}
   363a0:	vpush	{d8}
   363a4:	vldr	s16, [r3]
   363a8:	ldrne	r3, [r0, #20]
   363ac:	movne	r2, #44	; 0x2c
   363b0:	addne	r1, r3, #1
   363b4:	strne	r1, [r0, #20]
   363b8:	strbne	r2, [r3]
   363bc:	ldrb	r1, [r0, #25]
   363c0:	mov	r4, r0
   363c4:	ldr	r5, [sp, #28]
   363c8:	cmp	r1, #0
   363cc:	bne	364ac <flatcc_json_printer_float_struct_field@@Base+0x118>
   363d0:	ldr	r2, [r0, #20]
   363d4:	ldr	r3, [r0, #16]
   363d8:	cmp	r2, r3
   363dc:	bcs	36488 <flatcc_json_printer_float_struct_field@@Base+0xf4>
   363e0:	mov	r3, #34	; 0x22
   363e4:	strb	r3, [r2]
   363e8:	ldrb	r3, [r4, #26]
   363ec:	ldr	r0, [r4, #20]
   363f0:	ldr	r2, [r4, #16]
   363f4:	cmp	r3, #0
   363f8:	addeq	r0, r0, #1
   363fc:	add	r3, r0, r5
   36400:	cmp	r2, r3
   36404:	str	r0, [r4, #20]
   36408:	mov	r2, r5
   3640c:	ldr	r1, [sp, #24]
   36410:	bhi	36498 <flatcc_json_printer_float_struct_field@@Base+0x104>
   36414:	mov	r0, r4
   36418:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3641c:	ldr	r5, [r4, #20]
   36420:	mov	r3, #34	; 0x22
   36424:	strb	r3, [r5]
   36428:	ldr	r1, [r4, #20]
   3642c:	ldrb	r3, [r4, #26]
   36430:	clz	r3, r3
   36434:	lsr	r3, r3, #5
   36438:	add	r2, r1, r3
   3643c:	add	r2, r2, #1
   36440:	mov	r0, #58	; 0x3a
   36444:	str	r2, [r4, #20]
   36448:	strb	r0, [r1, r3]
   3644c:	ldr	r3, [r4, #20]
   36450:	mov	r2, #32
   36454:	vcvt.f64.f32	d0, s16
   36458:	strb	r2, [r3]
   3645c:	ldrb	r3, [r4, #25]
   36460:	ldr	r0, [r4, #20]
   36464:	cmp	r3, #0
   36468:	addne	r0, r0, #1
   3646c:	str	r0, [r4, #20]
   36470:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   36474:	vpop	{d8}
   36478:	ldr	r3, [r4, #20]
   3647c:	add	r0, r3, r0
   36480:	str	r0, [r4, #20]
   36484:	pop	{r4, r5, r6, pc}
   36488:	ldr	r3, [r0, #44]	; 0x2c
   3648c:	blx	r3
   36490:	ldr	r2, [r4, #20]
   36494:	b	363e0 <flatcc_json_printer_float_struct_field@@Base+0x4c>
   36498:	bl	14544 <memcpy@plt>
   3649c:	ldr	r3, [r4, #20]
   364a0:	add	r5, r3, r5
   364a4:	str	r5, [r4, #20]
   364a8:	b	36420 <flatcc_json_printer_float_struct_field@@Base+0x8c>
   364ac:	ldr	r3, [r0, #20]
   364b0:	mov	r2, #10
   364b4:	add	r1, r3, #1
   364b8:	str	r1, [r0, #20]
   364bc:	strb	r2, [r3]
   364c0:	ldrb	r6, [r0, #25]
   364c4:	ldr	r2, [r0, #32]
   364c8:	ldr	r0, [r0, #20]
   364cc:	ldr	r1, [r4, #16]
   364d0:	mul	r6, r2, r6
   364d4:	add	r3, r0, r6
   364d8:	cmp	r1, r3
   364dc:	bcc	364fc <flatcc_json_printer_float_struct_field@@Base+0x168>
   364e0:	mov	r2, r6
   364e4:	mov	r1, #32
   364e8:	bl	145bc <memset@plt>
   364ec:	ldr	r2, [r4, #20]
   364f0:	add	r2, r2, r6
   364f4:	str	r2, [r4, #20]
   364f8:	b	363e0 <flatcc_json_printer_float_struct_field@@Base+0x4c>
   364fc:	mov	r1, r6
   36500:	mov	r0, r4
   36504:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   36508:	ldr	r2, [r4, #20]
   3650c:	b	363e0 <flatcc_json_printer_float_struct_field@@Base+0x4c>

00036510 <flatcc_json_printer_double_struct_field@@Base>:
   36510:	cmp	r1, #0
   36514:	add	r3, r2, r3
   36518:	push	{r4, r5, r6, lr}
   3651c:	vpush	{d8}
   36520:	vldr	d8, [r3]
   36524:	ldrne	r3, [r0, #20]
   36528:	movne	r2, #44	; 0x2c
   3652c:	addne	r1, r3, #1
   36530:	strne	r1, [r0, #20]
   36534:	strbne	r2, [r3]
   36538:	ldrb	r1, [r0, #25]
   3653c:	mov	r4, r0
   36540:	ldr	r5, [sp, #28]
   36544:	cmp	r1, #0
   36548:	bne	36628 <flatcc_json_printer_double_struct_field@@Base+0x118>
   3654c:	ldr	r2, [r0, #20]
   36550:	ldr	r3, [r0, #16]
   36554:	cmp	r2, r3
   36558:	bcs	36604 <flatcc_json_printer_double_struct_field@@Base+0xf4>
   3655c:	mov	r3, #34	; 0x22
   36560:	strb	r3, [r2]
   36564:	ldrb	r3, [r4, #26]
   36568:	ldr	r0, [r4, #20]
   3656c:	ldr	r2, [r4, #16]
   36570:	cmp	r3, #0
   36574:	addeq	r0, r0, #1
   36578:	add	r3, r0, r5
   3657c:	cmp	r2, r3
   36580:	str	r0, [r4, #20]
   36584:	mov	r2, r5
   36588:	ldr	r1, [sp, #24]
   3658c:	bhi	36614 <flatcc_json_printer_double_struct_field@@Base+0x104>
   36590:	mov	r0, r4
   36594:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   36598:	ldr	r5, [r4, #20]
   3659c:	mov	r3, #34	; 0x22
   365a0:	strb	r3, [r5]
   365a4:	ldr	r1, [r4, #20]
   365a8:	ldrb	r3, [r4, #26]
   365ac:	clz	r3, r3
   365b0:	lsr	r3, r3, #5
   365b4:	add	r2, r1, r3
   365b8:	add	r2, r2, #1
   365bc:	mov	r0, #58	; 0x3a
   365c0:	str	r2, [r4, #20]
   365c4:	strb	r0, [r1, r3]
   365c8:	ldr	r3, [r4, #20]
   365cc:	mov	r2, #32
   365d0:	vmov.f64	d0, d8
   365d4:	strb	r2, [r3]
   365d8:	ldrb	r3, [r4, #25]
   365dc:	ldr	r0, [r4, #20]
   365e0:	cmp	r3, #0
   365e4:	addne	r0, r0, #1
   365e8:	str	r0, [r4, #20]
   365ec:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   365f0:	vpop	{d8}
   365f4:	ldr	r3, [r4, #20]
   365f8:	add	r0, r3, r0
   365fc:	str	r0, [r4, #20]
   36600:	pop	{r4, r5, r6, pc}
   36604:	ldr	r3, [r0, #44]	; 0x2c
   36608:	blx	r3
   3660c:	ldr	r2, [r4, #20]
   36610:	b	3655c <flatcc_json_printer_double_struct_field@@Base+0x4c>
   36614:	bl	14544 <memcpy@plt>
   36618:	ldr	r3, [r4, #20]
   3661c:	add	r5, r3, r5
   36620:	str	r5, [r4, #20]
   36624:	b	3659c <flatcc_json_printer_double_struct_field@@Base+0x8c>
   36628:	ldr	r3, [r0, #20]
   3662c:	mov	r2, #10
   36630:	add	r1, r3, #1
   36634:	str	r1, [r0, #20]
   36638:	strb	r2, [r3]
   3663c:	ldrb	r6, [r0, #25]
   36640:	ldr	r2, [r0, #32]
   36644:	ldr	r0, [r0, #20]
   36648:	ldr	r1, [r4, #16]
   3664c:	mul	r6, r2, r6
   36650:	add	r3, r0, r6
   36654:	cmp	r1, r3
   36658:	bcc	36678 <flatcc_json_printer_double_struct_field@@Base+0x168>
   3665c:	mov	r2, r6
   36660:	mov	r1, #32
   36664:	bl	145bc <memset@plt>
   36668:	ldr	r2, [r4, #20]
   3666c:	add	r2, r2, r6
   36670:	str	r2, [r4, #20]
   36674:	b	3655c <flatcc_json_printer_double_struct_field@@Base+0x4c>
   36678:	mov	r1, r6
   3667c:	mov	r0, r4
   36680:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   36684:	ldr	r2, [r4, #20]
   36688:	b	3655c <flatcc_json_printer_double_struct_field@@Base+0x4c>

0003668c <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   3668c:	cmp	r1, #0
   36690:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36694:	mov	r4, r0
   36698:	ldrb	r5, [r2, r3]
   3669c:	ldrne	r3, [r0, #20]
   366a0:	movne	r2, #44	; 0x2c
   366a4:	addne	r1, r3, #1
   366a8:	strne	r1, [r0, #20]
   366ac:	strbne	r2, [r3]
   366b0:	ldrb	r1, [r0, #25]
   366b4:	ldr	r8, [sp, #32]
   366b8:	ldr	r7, [sp, #36]	; 0x24
   366bc:	cmp	r1, #0
   366c0:	ldr	r6, [sp, #40]	; 0x28
   366c4:	bne	367c8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x13c>
   366c8:	ldr	r2, [r0, #20]
   366cc:	ldr	r3, [r0, #16]
   366d0:	cmp	r2, r3
   366d4:	bcs	36784 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xf8>
   366d8:	mov	r3, #34	; 0x22
   366dc:	strb	r3, [r2]
   366e0:	ldrb	r3, [r4, #26]
   366e4:	ldr	r0, [r4, #20]
   366e8:	ldr	r2, [r4, #16]
   366ec:	cmp	r3, #0
   366f0:	addeq	r0, r0, #1
   366f4:	add	r3, r0, r7
   366f8:	cmp	r2, r3
   366fc:	str	r0, [r4, #20]
   36700:	bhi	367ac <flatcc_json_printer_uint8_enum_struct_field@@Base+0x120>
   36704:	mov	r2, r7
   36708:	mov	r1, r8
   3670c:	mov	r0, r4
   36710:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   36714:	ldr	r7, [r4, #20]
   36718:	mov	r3, #34	; 0x22
   3671c:	strb	r3, [r7]
   36720:	ldr	r1, [r4, #20]
   36724:	ldrb	r3, [r4, #26]
   36728:	clz	r3, r3
   3672c:	lsr	r3, r3, #5
   36730:	add	r2, r1, r3
   36734:	add	r2, r2, #1
   36738:	mov	r0, #58	; 0x3a
   3673c:	str	r2, [r4, #20]
   36740:	strb	r0, [r1, r3]
   36744:	ldr	r3, [r4, #20]
   36748:	mov	r2, #32
   3674c:	strb	r2, [r3]
   36750:	ldrb	r2, [r4, #25]
   36754:	ldrb	r3, [r4, #27]
   36758:	ldr	r1, [r4, #20]
   3675c:	cmp	r2, #0
   36760:	addne	r1, r1, #1
   36764:	cmp	r3, #0
   36768:	str	r1, [r4, #20]
   3676c:	bne	36794 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x108>
   36770:	mov	r1, r5
   36774:	mov	r0, r4
   36778:	mov	r3, r6
   3677c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36780:	bx	r3
   36784:	ldr	r3, [r0, #44]	; 0x2c
   36788:	blx	r3
   3678c:	ldr	r2, [r4, #20]
   36790:	b	366d8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x4c>
   36794:	mov	r0, r5
   36798:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   3679c:	ldr	r3, [r4, #20]
   367a0:	add	r0, r3, r0
   367a4:	str	r0, [r4, #20]
   367a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   367ac:	mov	r2, r7
   367b0:	mov	r1, r8
   367b4:	bl	14544 <memcpy@plt>
   367b8:	ldr	r3, [r4, #20]
   367bc:	add	r7, r3, r7
   367c0:	str	r7, [r4, #20]
   367c4:	b	36718 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x8c>
   367c8:	ldr	r3, [r0, #20]
   367cc:	mov	r2, #10
   367d0:	add	r1, r3, #1
   367d4:	str	r1, [r0, #20]
   367d8:	strb	r2, [r3]
   367dc:	ldrb	r3, [r0, #25]
   367e0:	ldr	r2, [r0, #32]
   367e4:	ldr	r0, [r0, #20]
   367e8:	ldr	r1, [r4, #16]
   367ec:	mul	r9, r2, r3
   367f0:	add	r3, r0, r9
   367f4:	cmp	r1, r3
   367f8:	bcc	36818 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x18c>
   367fc:	mov	r2, r9
   36800:	mov	r1, #32
   36804:	bl	145bc <memset@plt>
   36808:	ldr	r2, [r4, #20]
   3680c:	add	r2, r2, r9
   36810:	str	r2, [r4, #20]
   36814:	b	366d8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x4c>
   36818:	mov	r1, r9
   3681c:	mov	r0, r4
   36820:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   36824:	ldr	r2, [r4, #20]
   36828:	b	366d8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x4c>

0003682c <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   3682c:	cmp	r1, #0
   36830:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36834:	mov	r4, r0
   36838:	ldrh	r5, [r2, r3]
   3683c:	ldrne	r3, [r0, #20]
   36840:	movne	r2, #44	; 0x2c
   36844:	addne	r1, r3, #1
   36848:	strne	r1, [r0, #20]
   3684c:	strbne	r2, [r3]
   36850:	ldrb	r1, [r0, #25]
   36854:	ldr	r8, [sp, #32]
   36858:	ldr	r7, [sp, #36]	; 0x24
   3685c:	cmp	r1, #0
   36860:	ldr	r6, [sp, #40]	; 0x28
   36864:	bne	36968 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x13c>
   36868:	ldr	r2, [r0, #20]
   3686c:	ldr	r3, [r0, #16]
   36870:	cmp	r2, r3
   36874:	bcs	36924 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xf8>
   36878:	mov	r3, #34	; 0x22
   3687c:	strb	r3, [r2]
   36880:	ldrb	r3, [r4, #26]
   36884:	ldr	r0, [r4, #20]
   36888:	ldr	r2, [r4, #16]
   3688c:	cmp	r3, #0
   36890:	addeq	r0, r0, #1
   36894:	add	r3, r0, r7
   36898:	cmp	r2, r3
   3689c:	str	r0, [r4, #20]
   368a0:	bhi	3694c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x120>
   368a4:	mov	r2, r7
   368a8:	mov	r1, r8
   368ac:	mov	r0, r4
   368b0:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   368b4:	ldr	r7, [r4, #20]
   368b8:	mov	r3, #34	; 0x22
   368bc:	strb	r3, [r7]
   368c0:	ldr	r1, [r4, #20]
   368c4:	ldrb	r3, [r4, #26]
   368c8:	clz	r3, r3
   368cc:	lsr	r3, r3, #5
   368d0:	add	r2, r1, r3
   368d4:	add	r2, r2, #1
   368d8:	mov	r0, #58	; 0x3a
   368dc:	str	r2, [r4, #20]
   368e0:	strb	r0, [r1, r3]
   368e4:	ldr	r3, [r4, #20]
   368e8:	mov	r2, #32
   368ec:	strb	r2, [r3]
   368f0:	ldrb	r2, [r4, #25]
   368f4:	ldrb	r3, [r4, #27]
   368f8:	ldr	r1, [r4, #20]
   368fc:	cmp	r2, #0
   36900:	addne	r1, r1, #1
   36904:	cmp	r3, #0
   36908:	str	r1, [r4, #20]
   3690c:	bne	36934 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x108>
   36910:	mov	r1, r5
   36914:	mov	r0, r4
   36918:	mov	r3, r6
   3691c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36920:	bx	r3
   36924:	ldr	r3, [r0, #44]	; 0x2c
   36928:	blx	r3
   3692c:	ldr	r2, [r4, #20]
   36930:	b	36878 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x4c>
   36934:	mov	r0, r5
   36938:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   3693c:	ldr	r3, [r4, #20]
   36940:	add	r0, r3, r0
   36944:	str	r0, [r4, #20]
   36948:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3694c:	mov	r2, r7
   36950:	mov	r1, r8
   36954:	bl	14544 <memcpy@plt>
   36958:	ldr	r3, [r4, #20]
   3695c:	add	r7, r3, r7
   36960:	str	r7, [r4, #20]
   36964:	b	368b8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x8c>
   36968:	ldr	r3, [r0, #20]
   3696c:	mov	r2, #10
   36970:	add	r1, r3, #1
   36974:	str	r1, [r0, #20]
   36978:	strb	r2, [r3]
   3697c:	ldrb	r3, [r0, #25]
   36980:	ldr	r2, [r0, #32]
   36984:	ldr	r0, [r0, #20]
   36988:	ldr	r1, [r4, #16]
   3698c:	mul	r9, r2, r3
   36990:	add	r3, r0, r9
   36994:	cmp	r1, r3
   36998:	bcc	369b8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x18c>
   3699c:	mov	r2, r9
   369a0:	mov	r1, #32
   369a4:	bl	145bc <memset@plt>
   369a8:	ldr	r2, [r4, #20]
   369ac:	add	r2, r2, r9
   369b0:	str	r2, [r4, #20]
   369b4:	b	36878 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x4c>
   369b8:	mov	r1, r9
   369bc:	mov	r0, r4
   369c0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   369c4:	ldr	r2, [r4, #20]
   369c8:	b	36878 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x4c>

000369cc <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   369cc:	cmp	r1, #0
   369d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   369d4:	mov	r4, r0
   369d8:	ldr	r5, [r2, r3]
   369dc:	ldrne	r3, [r0, #20]
   369e0:	movne	r2, #44	; 0x2c
   369e4:	addne	r1, r3, #1
   369e8:	strne	r1, [r0, #20]
   369ec:	strbne	r2, [r3]
   369f0:	ldrb	r1, [r0, #25]
   369f4:	ldr	r8, [sp, #32]
   369f8:	ldr	r7, [sp, #36]	; 0x24
   369fc:	cmp	r1, #0
   36a00:	ldr	r6, [sp, #40]	; 0x28
   36a04:	bne	36b08 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x13c>
   36a08:	ldr	r2, [r0, #20]
   36a0c:	ldr	r3, [r0, #16]
   36a10:	cmp	r2, r3
   36a14:	bcs	36ac4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xf8>
   36a18:	mov	r3, #34	; 0x22
   36a1c:	strb	r3, [r2]
   36a20:	ldrb	r3, [r4, #26]
   36a24:	ldr	r0, [r4, #20]
   36a28:	ldr	r2, [r4, #16]
   36a2c:	cmp	r3, #0
   36a30:	addeq	r0, r0, #1
   36a34:	add	r3, r0, r7
   36a38:	cmp	r2, r3
   36a3c:	str	r0, [r4, #20]
   36a40:	bhi	36aec <flatcc_json_printer_uint32_enum_struct_field@@Base+0x120>
   36a44:	mov	r2, r7
   36a48:	mov	r1, r8
   36a4c:	mov	r0, r4
   36a50:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   36a54:	ldr	r7, [r4, #20]
   36a58:	mov	r3, #34	; 0x22
   36a5c:	strb	r3, [r7]
   36a60:	ldr	r1, [r4, #20]
   36a64:	ldrb	r3, [r4, #26]
   36a68:	clz	r3, r3
   36a6c:	lsr	r3, r3, #5
   36a70:	add	r2, r1, r3
   36a74:	add	r2, r2, #1
   36a78:	mov	r0, #58	; 0x3a
   36a7c:	str	r2, [r4, #20]
   36a80:	strb	r0, [r1, r3]
   36a84:	ldr	r3, [r4, #20]
   36a88:	mov	r2, #32
   36a8c:	strb	r2, [r3]
   36a90:	ldrb	r2, [r4, #25]
   36a94:	ldrb	r3, [r4, #27]
   36a98:	ldr	r1, [r4, #20]
   36a9c:	cmp	r2, #0
   36aa0:	addne	r1, r1, #1
   36aa4:	cmp	r3, #0
   36aa8:	str	r1, [r4, #20]
   36aac:	bne	36ad4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x108>
   36ab0:	mov	r1, r5
   36ab4:	mov	r0, r4
   36ab8:	mov	r3, r6
   36abc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36ac0:	bx	r3
   36ac4:	ldr	r3, [r0, #44]	; 0x2c
   36ac8:	blx	r3
   36acc:	ldr	r2, [r4, #20]
   36ad0:	b	36a18 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x4c>
   36ad4:	mov	r0, r5
   36ad8:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   36adc:	ldr	r3, [r4, #20]
   36ae0:	add	r0, r3, r0
   36ae4:	str	r0, [r4, #20]
   36ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36aec:	mov	r2, r7
   36af0:	mov	r1, r8
   36af4:	bl	14544 <memcpy@plt>
   36af8:	ldr	r3, [r4, #20]
   36afc:	add	r7, r3, r7
   36b00:	str	r7, [r4, #20]
   36b04:	b	36a58 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x8c>
   36b08:	ldr	r3, [r0, #20]
   36b0c:	mov	r2, #10
   36b10:	add	r1, r3, #1
   36b14:	str	r1, [r0, #20]
   36b18:	strb	r2, [r3]
   36b1c:	ldrb	r3, [r0, #25]
   36b20:	ldr	r2, [r0, #32]
   36b24:	ldr	r0, [r0, #20]
   36b28:	ldr	r1, [r4, #16]
   36b2c:	mul	r9, r2, r3
   36b30:	add	r3, r0, r9
   36b34:	cmp	r1, r3
   36b38:	bcc	36b58 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x18c>
   36b3c:	mov	r2, r9
   36b40:	mov	r1, #32
   36b44:	bl	145bc <memset@plt>
   36b48:	ldr	r2, [r4, #20]
   36b4c:	add	r2, r2, r9
   36b50:	str	r2, [r4, #20]
   36b54:	b	36a18 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x4c>
   36b58:	mov	r1, r9
   36b5c:	mov	r0, r4
   36b60:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   36b64:	ldr	r2, [r4, #20]
   36b68:	b	36a18 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x4c>

00036b6c <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   36b6c:	cmp	r1, #0
   36b70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36b74:	mov	r4, r0
   36b78:	ldrd	r6, [r2, r3]
   36b7c:	ldrne	r3, [r0, #20]
   36b80:	movne	r2, #44	; 0x2c
   36b84:	addne	r1, r3, #1
   36b88:	strne	r1, [r0, #20]
   36b8c:	strbne	r2, [r3]
   36b90:	ldrb	r1, [r0, #25]
   36b94:	ldr	r9, [sp, #32]
   36b98:	ldr	r8, [sp, #36]	; 0x24
   36b9c:	cmp	r1, #0
   36ba0:	ldr	r5, [sp, #40]	; 0x28
   36ba4:	bne	36cb0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x144>
   36ba8:	ldr	r2, [r0, #20]
   36bac:	ldr	r3, [r0, #16]
   36bb0:	cmp	r2, r3
   36bb4:	bcs	36c68 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xfc>
   36bb8:	mov	r3, #34	; 0x22
   36bbc:	strb	r3, [r2]
   36bc0:	ldrb	r3, [r4, #26]
   36bc4:	ldr	r0, [r4, #20]
   36bc8:	ldr	r2, [r4, #16]
   36bcc:	cmp	r3, #0
   36bd0:	addeq	r0, r0, #1
   36bd4:	add	r3, r0, r8
   36bd8:	cmp	r2, r3
   36bdc:	str	r0, [r4, #20]
   36be0:	bhi	36c94 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x128>
   36be4:	mov	r2, r8
   36be8:	mov	r1, r9
   36bec:	mov	r0, r4
   36bf0:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   36bf4:	ldr	r8, [r4, #20]
   36bf8:	mov	r3, #34	; 0x22
   36bfc:	strb	r3, [r8]
   36c00:	ldr	r1, [r4, #20]
   36c04:	ldrb	r3, [r4, #26]
   36c08:	clz	r3, r3
   36c0c:	lsr	r3, r3, #5
   36c10:	add	r2, r1, r3
   36c14:	add	r2, r2, #1
   36c18:	mov	r0, #58	; 0x3a
   36c1c:	str	r2, [r4, #20]
   36c20:	strb	r0, [r1, r3]
   36c24:	ldr	r3, [r4, #20]
   36c28:	mov	r2, #32
   36c2c:	strb	r2, [r3]
   36c30:	ldrb	r1, [r4, #25]
   36c34:	ldrb	r3, [r4, #27]
   36c38:	ldr	r2, [r4, #20]
   36c3c:	cmp	r1, #0
   36c40:	addne	r2, r2, #1
   36c44:	cmp	r3, #0
   36c48:	str	r2, [r4, #20]
   36c4c:	bne	36c78 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x10c>
   36c50:	mov	r2, r6
   36c54:	mov	r3, r7
   36c58:	mov	r0, r4
   36c5c:	mov	r1, r5
   36c60:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36c64:	bx	r1
   36c68:	ldr	r3, [r0, #44]	; 0x2c
   36c6c:	blx	r3
   36c70:	ldr	r2, [r4, #20]
   36c74:	b	36bb8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x4c>
   36c78:	mov	r0, r6
   36c7c:	mov	r1, r7
   36c80:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   36c84:	ldr	r3, [r4, #20]
   36c88:	add	r0, r3, r0
   36c8c:	str	r0, [r4, #20]
   36c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36c94:	mov	r2, r8
   36c98:	mov	r1, r9
   36c9c:	bl	14544 <memcpy@plt>
   36ca0:	ldr	r3, [r4, #20]
   36ca4:	add	r8, r3, r8
   36ca8:	str	r8, [r4, #20]
   36cac:	b	36bf8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x8c>
   36cb0:	ldr	r3, [r0, #20]
   36cb4:	mov	r2, #10
   36cb8:	add	r1, r3, #1
   36cbc:	str	r1, [r0, #20]
   36cc0:	strb	r2, [r3]
   36cc4:	ldrb	r3, [r0, #25]
   36cc8:	ldr	r2, [r0, #32]
   36ccc:	ldr	r0, [r0, #20]
   36cd0:	ldr	r1, [r4, #16]
   36cd4:	mul	sl, r2, r3
   36cd8:	add	r3, r0, sl
   36cdc:	cmp	r1, r3
   36ce0:	bcc	36d00 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x194>
   36ce4:	mov	r2, sl
   36ce8:	mov	r1, #32
   36cec:	bl	145bc <memset@plt>
   36cf0:	ldr	r2, [r4, #20]
   36cf4:	add	r2, r2, sl
   36cf8:	str	r2, [r4, #20]
   36cfc:	b	36bb8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x4c>
   36d00:	mov	r1, sl
   36d04:	mov	r0, r4
   36d08:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   36d0c:	ldr	r2, [r4, #20]
   36d10:	b	36bb8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x4c>

00036d14 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   36d14:	cmp	r1, #0
   36d18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36d1c:	mov	r4, r0
   36d20:	ldrsb	r5, [r2, r3]
   36d24:	ldrne	r3, [r0, #20]
   36d28:	movne	r2, #44	; 0x2c
   36d2c:	addne	r1, r3, #1
   36d30:	strne	r1, [r0, #20]
   36d34:	strbne	r2, [r3]
   36d38:	ldrb	r1, [r0, #25]
   36d3c:	ldr	r8, [sp, #32]
   36d40:	ldr	r7, [sp, #36]	; 0x24
   36d44:	cmp	r1, #0
   36d48:	ldr	r6, [sp, #40]	; 0x28
   36d4c:	bne	36e74 <flatcc_json_printer_int8_enum_struct_field@@Base+0x160>
   36d50:	ldr	r2, [r0, #20]
   36d54:	ldr	r3, [r0, #16]
   36d58:	cmp	r2, r3
   36d5c:	bcs	36e34 <flatcc_json_printer_int8_enum_struct_field@@Base+0x120>
   36d60:	mov	r3, #34	; 0x22
   36d64:	strb	r3, [r2]
   36d68:	ldrb	r3, [r4, #26]
   36d6c:	ldr	r0, [r4, #20]
   36d70:	ldr	r2, [r4, #16]
   36d74:	cmp	r3, #0
   36d78:	addeq	r0, r0, #1
   36d7c:	add	r3, r0, r7
   36d80:	cmp	r2, r3
   36d84:	str	r0, [r4, #20]
   36d88:	bhi	36e44 <flatcc_json_printer_int8_enum_struct_field@@Base+0x130>
   36d8c:	mov	r2, r7
   36d90:	mov	r1, r8
   36d94:	mov	r0, r4
   36d98:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   36d9c:	ldr	r7, [r4, #20]
   36da0:	mov	r3, #34	; 0x22
   36da4:	strb	r3, [r7]
   36da8:	ldr	r1, [r4, #20]
   36dac:	ldrb	r3, [r4, #26]
   36db0:	clz	r3, r3
   36db4:	lsr	r3, r3, #5
   36db8:	add	r2, r1, r3
   36dbc:	add	r2, r2, #1
   36dc0:	mov	r0, #58	; 0x3a
   36dc4:	str	r2, [r4, #20]
   36dc8:	strb	r0, [r1, r3]
   36dcc:	ldr	r3, [r4, #20]
   36dd0:	mov	r2, #32
   36dd4:	strb	r2, [r3]
   36dd8:	ldrb	r3, [r4, #25]
   36ddc:	ldrb	r0, [r4, #27]
   36de0:	ldr	r2, [r4, #20]
   36de4:	adds	r3, r3, #0
   36de8:	movne	r3, #1
   36dec:	add	r1, r2, r3
   36df0:	cmp	r0, #0
   36df4:	str	r1, [r4, #20]
   36df8:	beq	36e60 <flatcc_json_printer_int8_enum_struct_field@@Base+0x14c>
   36dfc:	cmp	r5, #0
   36e00:	lsr	r6, r5, #31
   36e04:	rsblt	r5, r5, #0
   36e08:	movlt	r0, #45	; 0x2d
   36e0c:	sxtblt	r5, r5
   36e10:	strblt	r0, [r2, r3]
   36e14:	addlt	r1, r1, #1
   36e18:	uxtb	r0, r5
   36e1c:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   36e20:	ldr	r3, [r4, #20]
   36e24:	add	r0, r6, r0
   36e28:	add	r3, r3, r0
   36e2c:	str	r3, [r4, #20]
   36e30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36e34:	ldr	r3, [r0, #44]	; 0x2c
   36e38:	blx	r3
   36e3c:	ldr	r2, [r4, #20]
   36e40:	b	36d60 <flatcc_json_printer_int8_enum_struct_field@@Base+0x4c>
   36e44:	mov	r2, r7
   36e48:	mov	r1, r8
   36e4c:	bl	14544 <memcpy@plt>
   36e50:	ldr	r3, [r4, #20]
   36e54:	add	r7, r3, r7
   36e58:	str	r7, [r4, #20]
   36e5c:	b	36da0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x8c>
   36e60:	mov	r1, r5
   36e64:	mov	r0, r4
   36e68:	mov	r3, r6
   36e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36e70:	bx	r3
   36e74:	ldr	r3, [r0, #20]
   36e78:	mov	r2, #10
   36e7c:	add	r1, r3, #1
   36e80:	str	r1, [r0, #20]
   36e84:	strb	r2, [r3]
   36e88:	ldrb	r3, [r0, #25]
   36e8c:	ldr	r2, [r0, #32]
   36e90:	ldr	r0, [r0, #20]
   36e94:	ldr	r1, [r4, #16]
   36e98:	mul	r9, r2, r3
   36e9c:	add	r3, r0, r9
   36ea0:	cmp	r1, r3
   36ea4:	bcc	36ec4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1b0>
   36ea8:	mov	r2, r9
   36eac:	mov	r1, #32
   36eb0:	bl	145bc <memset@plt>
   36eb4:	ldr	r2, [r4, #20]
   36eb8:	add	r2, r2, r9
   36ebc:	str	r2, [r4, #20]
   36ec0:	b	36d60 <flatcc_json_printer_int8_enum_struct_field@@Base+0x4c>
   36ec4:	mov	r1, r9
   36ec8:	mov	r0, r4
   36ecc:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   36ed0:	ldr	r2, [r4, #20]
   36ed4:	b	36d60 <flatcc_json_printer_int8_enum_struct_field@@Base+0x4c>

00036ed8 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   36ed8:	cmp	r1, #0
   36edc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36ee0:	mov	r4, r0
   36ee4:	ldrsh	r5, [r2, r3]
   36ee8:	ldrne	r3, [r0, #20]
   36eec:	movne	r2, #44	; 0x2c
   36ef0:	addne	r1, r3, #1
   36ef4:	strne	r1, [r0, #20]
   36ef8:	strbne	r2, [r3]
   36efc:	ldrb	r1, [r0, #25]
   36f00:	ldr	r8, [sp, #32]
   36f04:	ldr	r7, [sp, #36]	; 0x24
   36f08:	cmp	r1, #0
   36f0c:	ldr	r6, [sp, #40]	; 0x28
   36f10:	bne	37038 <flatcc_json_printer_int16_enum_struct_field@@Base+0x160>
   36f14:	ldr	r2, [r0, #20]
   36f18:	ldr	r3, [r0, #16]
   36f1c:	cmp	r2, r3
   36f20:	bcs	36ff8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x120>
   36f24:	mov	r3, #34	; 0x22
   36f28:	strb	r3, [r2]
   36f2c:	ldrb	r3, [r4, #26]
   36f30:	ldr	r0, [r4, #20]
   36f34:	ldr	r2, [r4, #16]
   36f38:	cmp	r3, #0
   36f3c:	addeq	r0, r0, #1
   36f40:	add	r3, r0, r7
   36f44:	cmp	r2, r3
   36f48:	str	r0, [r4, #20]
   36f4c:	bhi	37008 <flatcc_json_printer_int16_enum_struct_field@@Base+0x130>
   36f50:	mov	r2, r7
   36f54:	mov	r1, r8
   36f58:	mov	r0, r4
   36f5c:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   36f60:	ldr	r7, [r4, #20]
   36f64:	mov	r3, #34	; 0x22
   36f68:	strb	r3, [r7]
   36f6c:	ldr	r1, [r4, #20]
   36f70:	ldrb	r3, [r4, #26]
   36f74:	clz	r3, r3
   36f78:	lsr	r3, r3, #5
   36f7c:	add	r2, r1, r3
   36f80:	add	r2, r2, #1
   36f84:	mov	r0, #58	; 0x3a
   36f88:	str	r2, [r4, #20]
   36f8c:	strb	r0, [r1, r3]
   36f90:	ldr	r3, [r4, #20]
   36f94:	mov	r2, #32
   36f98:	strb	r2, [r3]
   36f9c:	ldrb	r3, [r4, #25]
   36fa0:	ldrb	r0, [r4, #27]
   36fa4:	ldr	r2, [r4, #20]
   36fa8:	adds	r3, r3, #0
   36fac:	movne	r3, #1
   36fb0:	add	r1, r2, r3
   36fb4:	cmp	r0, #0
   36fb8:	str	r1, [r4, #20]
   36fbc:	beq	37024 <flatcc_json_printer_int16_enum_struct_field@@Base+0x14c>
   36fc0:	cmp	r5, #0
   36fc4:	lsr	r6, r5, #31
   36fc8:	rsblt	r5, r5, #0
   36fcc:	movlt	r0, #45	; 0x2d
   36fd0:	sxthlt	r5, r5
   36fd4:	strblt	r0, [r2, r3]
   36fd8:	addlt	r1, r1, #1
   36fdc:	uxth	r0, r5
   36fe0:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   36fe4:	ldr	r3, [r4, #20]
   36fe8:	add	r0, r6, r0
   36fec:	add	r3, r3, r0
   36ff0:	str	r3, [r4, #20]
   36ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36ff8:	ldr	r3, [r0, #44]	; 0x2c
   36ffc:	blx	r3
   37000:	ldr	r2, [r4, #20]
   37004:	b	36f24 <flatcc_json_printer_int16_enum_struct_field@@Base+0x4c>
   37008:	mov	r2, r7
   3700c:	mov	r1, r8
   37010:	bl	14544 <memcpy@plt>
   37014:	ldr	r3, [r4, #20]
   37018:	add	r7, r3, r7
   3701c:	str	r7, [r4, #20]
   37020:	b	36f64 <flatcc_json_printer_int16_enum_struct_field@@Base+0x8c>
   37024:	mov	r1, r5
   37028:	mov	r0, r4
   3702c:	mov	r3, r6
   37030:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   37034:	bx	r3
   37038:	ldr	r3, [r0, #20]
   3703c:	mov	r2, #10
   37040:	add	r1, r3, #1
   37044:	str	r1, [r0, #20]
   37048:	strb	r2, [r3]
   3704c:	ldrb	r3, [r0, #25]
   37050:	ldr	r2, [r0, #32]
   37054:	ldr	r0, [r0, #20]
   37058:	ldr	r1, [r4, #16]
   3705c:	mul	r9, r2, r3
   37060:	add	r3, r0, r9
   37064:	cmp	r1, r3
   37068:	bcc	37088 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1b0>
   3706c:	mov	r2, r9
   37070:	mov	r1, #32
   37074:	bl	145bc <memset@plt>
   37078:	ldr	r2, [r4, #20]
   3707c:	add	r2, r2, r9
   37080:	str	r2, [r4, #20]
   37084:	b	36f24 <flatcc_json_printer_int16_enum_struct_field@@Base+0x4c>
   37088:	mov	r1, r9
   3708c:	mov	r0, r4
   37090:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   37094:	ldr	r2, [r4, #20]
   37098:	b	36f24 <flatcc_json_printer_int16_enum_struct_field@@Base+0x4c>

0003709c <flatcc_json_printer_int32_enum_struct_field@@Base>:
   3709c:	cmp	r1, #0
   370a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   370a4:	mov	r4, r0
   370a8:	ldr	r6, [r2, r3]
   370ac:	ldrne	r3, [r0, #20]
   370b0:	movne	r2, #44	; 0x2c
   370b4:	addne	r1, r3, #1
   370b8:	strne	r1, [r0, #20]
   370bc:	strbne	r2, [r3]
   370c0:	ldrb	r1, [r0, #25]
   370c4:	ldr	r8, [sp, #32]
   370c8:	ldr	r7, [sp, #36]	; 0x24
   370cc:	cmp	r1, #0
   370d0:	ldr	r5, [sp, #40]	; 0x28
   370d4:	bne	371f8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x15c>
   370d8:	ldr	r2, [r0, #20]
   370dc:	ldr	r3, [r0, #16]
   370e0:	cmp	r2, r3
   370e4:	bcs	371b8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x11c>
   370e8:	mov	r3, #34	; 0x22
   370ec:	strb	r3, [r2]
   370f0:	ldrb	r3, [r4, #26]
   370f4:	ldr	r0, [r4, #20]
   370f8:	ldr	r2, [r4, #16]
   370fc:	cmp	r3, #0
   37100:	addeq	r0, r0, #1
   37104:	add	r3, r0, r7
   37108:	cmp	r2, r3
   3710c:	str	r0, [r4, #20]
   37110:	bhi	371c8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x12c>
   37114:	mov	r2, r7
   37118:	mov	r1, r8
   3711c:	mov	r0, r4
   37120:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   37124:	ldr	r7, [r4, #20]
   37128:	mov	r3, #34	; 0x22
   3712c:	strb	r3, [r7]
   37130:	ldr	r1, [r4, #20]
   37134:	ldrb	r3, [r4, #26]
   37138:	clz	r3, r3
   3713c:	lsr	r3, r3, #5
   37140:	add	r2, r1, r3
   37144:	add	r2, r2, #1
   37148:	mov	r0, #58	; 0x3a
   3714c:	str	r2, [r4, #20]
   37150:	strb	r0, [r1, r3]
   37154:	ldr	r3, [r4, #20]
   37158:	mov	r2, #32
   3715c:	strb	r2, [r3]
   37160:	ldrb	r3, [r4, #25]
   37164:	ldrb	r0, [r4, #27]
   37168:	ldr	r2, [r4, #20]
   3716c:	adds	r3, r3, #0
   37170:	movne	r3, #1
   37174:	add	r1, r2, r3
   37178:	cmp	r0, #0
   3717c:	str	r1, [r4, #20]
   37180:	beq	371e4 <flatcc_json_printer_int32_enum_struct_field@@Base+0x148>
   37184:	cmp	r6, #0
   37188:	movlt	r0, #45	; 0x2d
   3718c:	lsr	r5, r6, #31
   37190:	rsblt	r6, r6, #0
   37194:	strblt	r0, [r2, r3]
   37198:	addlt	r1, r1, #1
   3719c:	mov	r0, r6
   371a0:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   371a4:	ldr	r3, [r4, #20]
   371a8:	add	r0, r5, r0
   371ac:	add	r3, r3, r0
   371b0:	str	r3, [r4, #20]
   371b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   371b8:	ldr	r3, [r0, #44]	; 0x2c
   371bc:	blx	r3
   371c0:	ldr	r2, [r4, #20]
   371c4:	b	370e8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x4c>
   371c8:	mov	r2, r7
   371cc:	mov	r1, r8
   371d0:	bl	14544 <memcpy@plt>
   371d4:	ldr	r3, [r4, #20]
   371d8:	add	r7, r3, r7
   371dc:	str	r7, [r4, #20]
   371e0:	b	37128 <flatcc_json_printer_int32_enum_struct_field@@Base+0x8c>
   371e4:	mov	r1, r6
   371e8:	mov	r0, r4
   371ec:	mov	r3, r5
   371f0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   371f4:	bx	r3
   371f8:	ldr	r3, [r0, #20]
   371fc:	mov	r2, #10
   37200:	add	r1, r3, #1
   37204:	str	r1, [r0, #20]
   37208:	strb	r2, [r3]
   3720c:	ldrb	r3, [r0, #25]
   37210:	ldr	r2, [r0, #32]
   37214:	ldr	r0, [r0, #20]
   37218:	ldr	r1, [r4, #16]
   3721c:	mul	r9, r2, r3
   37220:	add	r3, r0, r9
   37224:	cmp	r1, r3
   37228:	bcc	37248 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1ac>
   3722c:	mov	r2, r9
   37230:	mov	r1, #32
   37234:	bl	145bc <memset@plt>
   37238:	ldr	r2, [r4, #20]
   3723c:	add	r2, r2, r9
   37240:	str	r2, [r4, #20]
   37244:	b	370e8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x4c>
   37248:	mov	r1, r9
   3724c:	mov	r0, r4
   37250:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   37254:	ldr	r2, [r4, #20]
   37258:	b	370e8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x4c>

0003725c <flatcc_json_printer_int64_enum_struct_field@@Base>:
   3725c:	cmp	r1, #0
   37260:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37264:	mov	r4, r0
   37268:	ldrd	r6, [r2, r3]
   3726c:	ldrne	r3, [r0, #20]
   37270:	movne	r2, #44	; 0x2c
   37274:	addne	r1, r3, #1
   37278:	strne	r1, [r0, #20]
   3727c:	strbne	r2, [r3]
   37280:	ldrb	r1, [r0, #25]
   37284:	ldr	r9, [sp, #32]
   37288:	ldr	r8, [sp, #36]	; 0x24
   3728c:	cmp	r1, #0
   37290:	ldr	r5, [sp, #40]	; 0x28
   37294:	bne	373d0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x174>
   37298:	ldr	r2, [r0, #20]
   3729c:	ldr	r3, [r0, #16]
   372a0:	cmp	r2, r3
   372a4:	bcs	37374 <flatcc_json_printer_int64_enum_struct_field@@Base+0x118>
   372a8:	mov	r3, #34	; 0x22
   372ac:	strb	r3, [r2]
   372b0:	ldrb	r3, [r4, #26]
   372b4:	ldr	r0, [r4, #20]
   372b8:	ldr	r2, [r4, #16]
   372bc:	cmp	r3, #0
   372c0:	addeq	r0, r0, #1
   372c4:	add	r3, r0, r8
   372c8:	cmp	r2, r3
   372cc:	str	r0, [r4, #20]
   372d0:	bhi	3739c <flatcc_json_printer_int64_enum_struct_field@@Base+0x140>
   372d4:	mov	r2, r8
   372d8:	mov	r1, r9
   372dc:	mov	r0, r4
   372e0:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   372e4:	ldr	r8, [r4, #20]
   372e8:	mov	r3, #34	; 0x22
   372ec:	strb	r3, [r8]
   372f0:	ldr	r1, [r4, #20]
   372f4:	ldrb	r3, [r4, #26]
   372f8:	clz	r3, r3
   372fc:	lsr	r3, r3, #5
   37300:	add	r2, r1, r3
   37304:	add	r2, r2, #1
   37308:	mov	r0, #58	; 0x3a
   3730c:	str	r2, [r4, #20]
   37310:	strb	r0, [r1, r3]
   37314:	ldr	r3, [r4, #20]
   37318:	mov	r2, #32
   3731c:	strb	r2, [r3]
   37320:	ldrb	r3, [r4, #25]
   37324:	ldrb	r0, [r4, #27]
   37328:	ldr	r1, [r4, #20]
   3732c:	adds	r3, r3, #0
   37330:	movne	r3, #1
   37334:	add	r2, r1, r3
   37338:	cmp	r0, #0
   3733c:	str	r2, [r4, #20]
   37340:	beq	373b8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x15c>
   37344:	cmp	r6, #0
   37348:	sbcs	r0, r7, #0
   3734c:	lsr	r5, r7, #31
   37350:	blt	37384 <flatcc_json_printer_int64_enum_struct_field@@Base+0x128>
   37354:	mov	r0, r6
   37358:	mov	r1, r7
   3735c:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   37360:	ldr	r3, [r4, #20]
   37364:	add	r0, r5, r0
   37368:	add	r3, r3, r0
   3736c:	str	r3, [r4, #20]
   37370:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37374:	ldr	r3, [r0, #44]	; 0x2c
   37378:	blx	r3
   3737c:	ldr	r2, [r4, #20]
   37380:	b	372a8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x4c>
   37384:	rsbs	r6, r6, #0
   37388:	mov	r0, #45	; 0x2d
   3738c:	rsc	r7, r7, #0
   37390:	add	r2, r2, #1
   37394:	strb	r0, [r1, r3]
   37398:	b	37354 <flatcc_json_printer_int64_enum_struct_field@@Base+0xf8>
   3739c:	mov	r2, r8
   373a0:	mov	r1, r9
   373a4:	bl	14544 <memcpy@plt>
   373a8:	ldr	r3, [r4, #20]
   373ac:	add	r8, r3, r8
   373b0:	str	r8, [r4, #20]
   373b4:	b	372e8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x8c>
   373b8:	mov	r2, r6
   373bc:	mov	r3, r7
   373c0:	mov	r0, r4
   373c4:	mov	r1, r5
   373c8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   373cc:	bx	r1
   373d0:	ldr	r3, [r0, #20]
   373d4:	mov	r2, #10
   373d8:	add	r1, r3, #1
   373dc:	str	r1, [r0, #20]
   373e0:	strb	r2, [r3]
   373e4:	ldrb	r3, [r0, #25]
   373e8:	ldr	r2, [r0, #32]
   373ec:	ldr	r0, [r0, #20]
   373f0:	ldr	r1, [r4, #16]
   373f4:	mul	sl, r2, r3
   373f8:	add	r3, r0, sl
   373fc:	cmp	r1, r3
   37400:	bcc	37420 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1c4>
   37404:	mov	r2, sl
   37408:	mov	r1, #32
   3740c:	bl	145bc <memset@plt>
   37410:	ldr	r2, [r4, #20]
   37414:	add	r2, r2, sl
   37418:	str	r2, [r4, #20]
   3741c:	b	372a8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x4c>
   37420:	mov	r1, sl
   37424:	mov	r0, r4
   37428:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3742c:	ldr	r2, [r4, #20]
   37430:	b	372a8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x4c>

00037434 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   37434:	cmp	r1, #0
   37438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3743c:	mov	r4, r0
   37440:	ldrb	r5, [r2, r3]
   37444:	ldrne	r3, [r0, #20]
   37448:	movne	r2, #44	; 0x2c
   3744c:	addne	r1, r3, #1
   37450:	strne	r1, [r0, #20]
   37454:	strbne	r2, [r3]
   37458:	ldrb	r1, [r0, #25]
   3745c:	ldr	r8, [sp, #32]
   37460:	ldr	r7, [sp, #36]	; 0x24
   37464:	cmp	r1, #0
   37468:	ldr	r6, [sp, #40]	; 0x28
   3746c:	bne	37570 <flatcc_json_printer_bool_enum_struct_field@@Base+0x13c>
   37470:	ldr	r2, [r0, #20]
   37474:	ldr	r3, [r0, #16]
   37478:	cmp	r2, r3
   3747c:	bcs	3752c <flatcc_json_printer_bool_enum_struct_field@@Base+0xf8>
   37480:	mov	r3, #34	; 0x22
   37484:	strb	r3, [r2]
   37488:	ldrb	r3, [r4, #26]
   3748c:	ldr	r0, [r4, #20]
   37490:	ldr	r2, [r4, #16]
   37494:	cmp	r3, #0
   37498:	addeq	r0, r0, #1
   3749c:	add	r3, r0, r7
   374a0:	cmp	r2, r3
   374a4:	str	r0, [r4, #20]
   374a8:	bhi	37554 <flatcc_json_printer_bool_enum_struct_field@@Base+0x120>
   374ac:	mov	r2, r7
   374b0:	mov	r1, r8
   374b4:	mov	r0, r4
   374b8:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   374bc:	ldr	r7, [r4, #20]
   374c0:	mov	r3, #34	; 0x22
   374c4:	strb	r3, [r7]
   374c8:	ldr	r1, [r4, #20]
   374cc:	ldrb	r3, [r4, #26]
   374d0:	clz	r3, r3
   374d4:	lsr	r3, r3, #5
   374d8:	add	r2, r1, r3
   374dc:	add	r2, r2, #1
   374e0:	mov	r0, #58	; 0x3a
   374e4:	str	r2, [r4, #20]
   374e8:	strb	r0, [r1, r3]
   374ec:	ldr	r3, [r4, #20]
   374f0:	mov	r2, #32
   374f4:	strb	r2, [r3]
   374f8:	ldrb	r2, [r4, #25]
   374fc:	ldrb	r3, [r4, #27]
   37500:	ldr	r1, [r4, #20]
   37504:	cmp	r2, #0
   37508:	addne	r1, r1, #1
   3750c:	cmp	r3, #0
   37510:	str	r1, [r4, #20]
   37514:	bne	3753c <flatcc_json_printer_bool_enum_struct_field@@Base+0x108>
   37518:	mov	r1, r5
   3751c:	mov	r0, r4
   37520:	mov	r3, r6
   37524:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   37528:	bx	r3
   3752c:	ldr	r3, [r0, #44]	; 0x2c
   37530:	blx	r3
   37534:	ldr	r2, [r4, #20]
   37538:	b	37480 <flatcc_json_printer_bool_enum_struct_field@@Base+0x4c>
   3753c:	mov	r0, r5
   37540:	bl	3118c <flatcc_json_parser_table_as_root@@Base+0x124c>
   37544:	ldr	r3, [r4, #20]
   37548:	add	r0, r3, r0
   3754c:	str	r0, [r4, #20]
   37550:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37554:	mov	r2, r7
   37558:	mov	r1, r8
   3755c:	bl	14544 <memcpy@plt>
   37560:	ldr	r3, [r4, #20]
   37564:	add	r7, r3, r7
   37568:	str	r7, [r4, #20]
   3756c:	b	374c0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x8c>
   37570:	ldr	r3, [r0, #20]
   37574:	mov	r2, #10
   37578:	add	r1, r3, #1
   3757c:	str	r1, [r0, #20]
   37580:	strb	r2, [r3]
   37584:	ldrb	r3, [r0, #25]
   37588:	ldr	r2, [r0, #32]
   3758c:	ldr	r0, [r0, #20]
   37590:	ldr	r1, [r4, #16]
   37594:	mul	r9, r2, r3
   37598:	add	r3, r0, r9
   3759c:	cmp	r1, r3
   375a0:	bcc	375c0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x18c>
   375a4:	mov	r2, r9
   375a8:	mov	r1, #32
   375ac:	bl	145bc <memset@plt>
   375b0:	ldr	r2, [r4, #20]
   375b4:	add	r2, r2, r9
   375b8:	str	r2, [r4, #20]
   375bc:	b	37480 <flatcc_json_printer_bool_enum_struct_field@@Base+0x4c>
   375c0:	mov	r1, r9
   375c4:	mov	r0, r4
   375c8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   375cc:	ldr	r2, [r4, #20]
   375d0:	b	37480 <flatcc_json_printer_bool_enum_struct_field@@Base+0x4c>

000375d4 <flatcc_json_printer_uint8_vector_field@@Base>:
   375d4:	add	r2, r2, #2
   375d8:	ldr	ip, [r1, #8]
   375dc:	lsl	r2, r2, #1
   375e0:	cmp	ip, r2
   375e4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   375e8:	ldr	r7, [sp, #40]	; 0x28
   375ec:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   375f0:	ldr	ip, [r1, #4]
   375f4:	ldrh	ip, [ip, r2]
   375f8:	cmp	ip, #0
   375fc:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37600:	ldr	r5, [r1]
   37604:	adds	lr, r5, ip
   37608:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3760c:	ldr	r2, [r1, #16]
   37610:	mov	r8, r3
   37614:	cmp	r2, #0
   37618:	add	r2, r2, #1
   3761c:	str	r2, [r1, #16]
   37620:	ldrne	r2, [r0, #20]
   37624:	movne	r1, #44	; 0x2c
   37628:	addne	r4, r2, #1
   3762c:	strne	r4, [r0, #20]
   37630:	strbne	r1, [r2]
   37634:	ldrb	r1, [r0, #25]
   37638:	ldr	r3, [r5, ip]
   3763c:	mov	r4, r0
   37640:	cmp	r1, #0
   37644:	add	r6, lr, r3
   37648:	ldr	r5, [lr, r3]
   3764c:	ldr	r3, [r0, #20]
   37650:	bne	378d4 <flatcc_json_printer_uint8_vector_field@@Base+0x300>
   37654:	ldr	r2, [r0, #16]
   37658:	cmp	r3, r2
   3765c:	bcc	3766c <flatcc_json_printer_uint8_vector_field@@Base+0x98>
   37660:	ldr	r3, [r0, #44]	; 0x2c
   37664:	blx	r3
   37668:	ldr	r3, [r4, #20]
   3766c:	mov	r2, #34	; 0x22
   37670:	strb	r2, [r3]
   37674:	ldrb	r3, [r4, #26]
   37678:	ldr	r0, [r4, #20]
   3767c:	ldr	r2, [r4, #16]
   37680:	cmp	r3, #0
   37684:	addeq	r0, r0, #1
   37688:	add	r3, r0, r7
   3768c:	cmp	r2, r3
   37690:	str	r0, [r4, #20]
   37694:	bhi	37854 <flatcc_json_printer_uint8_vector_field@@Base+0x280>
   37698:	mov	r2, r7
   3769c:	mov	r1, r8
   376a0:	mov	r0, r4
   376a4:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   376a8:	ldr	r7, [r4, #20]
   376ac:	mov	r3, #34	; 0x22
   376b0:	strb	r3, [r7]
   376b4:	ldr	r1, [r4, #20]
   376b8:	ldrb	r3, [r4, #26]
   376bc:	clz	r3, r3
   376c0:	lsr	r3, r3, #5
   376c4:	add	r2, r1, r3
   376c8:	add	r2, r2, #1
   376cc:	mov	r0, #58	; 0x3a
   376d0:	str	r2, [r4, #20]
   376d4:	strb	r0, [r1, r3]
   376d8:	ldr	r3, [r4, #20]
   376dc:	mov	r2, #32
   376e0:	mov	ip, #91	; 0x5b
   376e4:	strb	r2, [r3]
   376e8:	ldrb	r3, [r4, #25]
   376ec:	ldr	r0, [r4, #20]
   376f0:	ldr	r2, [r4, #32]
   376f4:	adds	r3, r3, #0
   376f8:	movne	r3, #1
   376fc:	add	r1, r0, r3
   37700:	add	r1, r1, #1
   37704:	add	r2, r2, #1
   37708:	cmp	r5, #0
   3770c:	str	r1, [r4, #20]
   37710:	str	r2, [r4, #32]
   37714:	strb	ip, [r0, r3]
   37718:	bne	37740 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   3771c:	ldr	r0, [r4, #20]
   37720:	ldrb	r3, [r4, #25]
   37724:	cmp	r3, #0
   37728:	bne	37870 <flatcc_json_printer_uint8_vector_field@@Base+0x29c>
   3772c:	add	r2, r0, #1
   37730:	mov	r3, #93	; 0x5d
   37734:	str	r2, [r4, #20]
   37738:	strb	r3, [r0]
   3773c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37740:	ldrb	r3, [r4, #25]
   37744:	cmp	r3, #0
   37748:	bne	37920 <flatcc_json_printer_uint8_vector_field@@Base+0x34c>
   3774c:	ldr	r1, [r4, #20]
   37750:	ldr	r2, [r4, #16]
   37754:	cmp	r1, r2
   37758:	bcs	37944 <flatcc_json_printer_uint8_vector_field@@Base+0x370>
   3775c:	ldrb	r0, [r6, #4]
   37760:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   37764:	ldr	r3, [r4, #20]
   37768:	cmp	r5, #1
   3776c:	add	fp, r6, #5
   37770:	add	r0, r3, r0
   37774:	str	r0, [r4, #20]
   37778:	beq	37720 <flatcc_json_printer_uint8_vector_field@@Base+0x14c>
   3777c:	add	r5, r5, #4
   37780:	mov	r7, #44	; 0x2c
   37784:	mov	r9, #10
   37788:	mov	r8, #32
   3778c:	b	377c0 <flatcc_json_printer_uint8_vector_field@@Base+0x1ec>
   37790:	ldr	r1, [r4, #20]
   37794:	ldr	r3, [r4, #16]
   37798:	cmp	r1, r3
   3779c:	bcs	37828 <flatcc_json_printer_uint8_vector_field@@Base+0x254>
   377a0:	ldrb	r0, [fp], #1
   377a4:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   377a8:	ldr	r3, [r4, #20]
   377ac:	sub	r2, r5, fp
   377b0:	cmn	r6, r2
   377b4:	add	r0, r3, r0
   377b8:	str	r0, [r4, #20]
   377bc:	beq	37720 <flatcc_json_printer_uint8_vector_field@@Base+0x14c>
   377c0:	add	r3, r0, #1
   377c4:	str	r3, [r4, #20]
   377c8:	strb	r7, [r0]
   377cc:	ldrb	r3, [r4, #25]
   377d0:	cmp	r3, #0
   377d4:	beq	37790 <flatcc_json_printer_uint8_vector_field@@Base+0x1bc>
   377d8:	ldr	r3, [r4, #20]
   377dc:	mov	r1, r8
   377e0:	add	r2, r3, #1
   377e4:	str	r2, [r4, #20]
   377e8:	strb	r9, [r3]
   377ec:	ldrb	r3, [r4, #25]
   377f0:	ldr	r2, [r4, #32]
   377f4:	ldr	ip, [r4, #20]
   377f8:	ldr	lr, [r4, #16]
   377fc:	mul	sl, r2, r3
   37800:	mov	r0, ip
   37804:	add	ip, ip, sl
   37808:	cmp	lr, ip
   3780c:	mov	r2, sl
   37810:	bcc	37840 <flatcc_json_printer_uint8_vector_field@@Base+0x26c>
   37814:	bl	145bc <memset@plt>
   37818:	ldr	r1, [r4, #20]
   3781c:	add	r1, r1, sl
   37820:	str	r1, [r4, #20]
   37824:	b	377a0 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   37828:	mov	r1, #0
   3782c:	ldr	r3, [r4, #44]	; 0x2c
   37830:	mov	r0, r4
   37834:	blx	r3
   37838:	ldr	r1, [r4, #20]
   3783c:	b	377a0 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   37840:	mov	r1, sl
   37844:	mov	r0, r4
   37848:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3784c:	ldr	r1, [r4, #20]
   37850:	b	377a0 <flatcc_json_printer_uint8_vector_field@@Base+0x1cc>
   37854:	mov	r2, r7
   37858:	mov	r1, r8
   3785c:	bl	14544 <memcpy@plt>
   37860:	ldr	r3, [r4, #20]
   37864:	add	r7, r3, r7
   37868:	str	r7, [r4, #20]
   3786c:	b	376ac <flatcc_json_printer_uint8_vector_field@@Base+0xd8>
   37870:	add	r2, r0, #1
   37874:	mov	r3, #10
   37878:	str	r2, [r4, #20]
   3787c:	strb	r3, [r0]
   37880:	ldr	r3, [r4, #32]
   37884:	ldrb	r5, [r4, #25]
   37888:	sub	r3, r3, #1
   3788c:	ldr	r0, [r4, #20]
   37890:	ldr	r2, [r4, #16]
   37894:	mul	r5, r3, r5
   37898:	str	r3, [r4, #32]
   3789c:	add	r3, r0, r5
   378a0:	cmp	r2, r3
   378a4:	bcc	378c0 <flatcc_json_printer_uint8_vector_field@@Base+0x2ec>
   378a8:	mov	r2, r5
   378ac:	mov	r1, #32
   378b0:	bl	145bc <memset@plt>
   378b4:	ldr	r0, [r4, #20]
   378b8:	add	r0, r0, r5
   378bc:	b	3772c <flatcc_json_printer_uint8_vector_field@@Base+0x158>
   378c0:	mov	r0, r4
   378c4:	mov	r1, r5
   378c8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   378cc:	ldr	r0, [r4, #20]
   378d0:	b	3772c <flatcc_json_printer_uint8_vector_field@@Base+0x158>
   378d4:	mov	r2, #10
   378d8:	add	r1, r3, #1
   378dc:	str	r1, [r0, #20]
   378e0:	strb	r2, [r3]
   378e4:	ldrb	r3, [r0, #25]
   378e8:	ldr	r9, [r0, #32]
   378ec:	ldr	r0, [r0, #20]
   378f0:	ldr	r2, [r4, #16]
   378f4:	mul	r9, r9, r3
   378f8:	add	r3, r0, r9
   378fc:	cmp	r2, r3
   37900:	bcc	3795c <flatcc_json_printer_uint8_vector_field@@Base+0x388>
   37904:	mov	r2, r9
   37908:	mov	r1, #32
   3790c:	bl	145bc <memset@plt>
   37910:	ldr	r3, [r4, #20]
   37914:	add	r3, r3, r9
   37918:	str	r3, [r4, #20]
   3791c:	b	3766c <flatcc_json_printer_uint8_vector_field@@Base+0x98>
   37920:	ldr	r3, [r4, #20]
   37924:	mov	r2, #10
   37928:	add	r1, r3, #1
   3792c:	str	r1, [r4, #20]
   37930:	mov	r0, r4
   37934:	strb	r2, [r3]
   37938:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3793c:	ldr	r1, [r4, #20]
   37940:	b	3775c <flatcc_json_printer_uint8_vector_field@@Base+0x188>
   37944:	mov	r1, r3
   37948:	mov	r0, r4
   3794c:	ldr	r3, [r4, #44]	; 0x2c
   37950:	blx	r3
   37954:	ldr	r1, [r4, #20]
   37958:	b	3775c <flatcc_json_printer_uint8_vector_field@@Base+0x188>
   3795c:	mov	r1, r9
   37960:	mov	r0, r4
   37964:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   37968:	ldr	r3, [r4, #20]
   3796c:	b	3766c <flatcc_json_printer_uint8_vector_field@@Base+0x98>

00037970 <flatcc_json_printer_utype_vector_field@@Base>:
   37970:	b	375d4 <flatcc_json_printer_uint8_vector_field@@Base>

00037974 <flatcc_json_printer_uint16_vector_field@@Base>:
   37974:	add	r2, r2, #2
   37978:	ldr	ip, [r1, #8]
   3797c:	lsl	r2, r2, #1
   37980:	cmp	ip, r2
   37984:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37988:	ldr	r6, [sp, #40]	; 0x28
   3798c:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37990:	ldr	ip, [r1, #4]
   37994:	ldrh	ip, [ip, r2]
   37998:	cmp	ip, #0
   3799c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   379a0:	ldr	r5, [r1]
   379a4:	adds	lr, r5, ip
   379a8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   379ac:	ldr	r2, [r1, #16]
   379b0:	mov	r7, r3
   379b4:	cmp	r2, #0
   379b8:	add	r2, r2, #1
   379bc:	str	r2, [r1, #16]
   379c0:	ldrne	r2, [r0, #20]
   379c4:	movne	r1, #44	; 0x2c
   379c8:	addne	r4, r2, #1
   379cc:	strne	r4, [r0, #20]
   379d0:	strbne	r1, [r2]
   379d4:	ldrb	r1, [r0, #25]
   379d8:	ldr	r3, [r5, ip]
   379dc:	mov	r4, r0
   379e0:	cmp	r1, #0
   379e4:	add	r5, lr, r3
   379e8:	ldr	sl, [lr, r3]
   379ec:	ldr	r3, [r0, #20]
   379f0:	bne	37c78 <flatcc_json_printer_uint16_vector_field@@Base+0x304>
   379f4:	ldr	r2, [r0, #16]
   379f8:	cmp	r3, r2
   379fc:	bcc	37a0c <flatcc_json_printer_uint16_vector_field@@Base+0x98>
   37a00:	ldr	r3, [r0, #44]	; 0x2c
   37a04:	blx	r3
   37a08:	ldr	r3, [r4, #20]
   37a0c:	mov	r2, #34	; 0x22
   37a10:	strb	r2, [r3]
   37a14:	ldrb	r3, [r4, #26]
   37a18:	ldr	r0, [r4, #20]
   37a1c:	ldr	r2, [r4, #16]
   37a20:	cmp	r3, #0
   37a24:	addeq	r0, r0, #1
   37a28:	add	r3, r0, r6
   37a2c:	cmp	r2, r3
   37a30:	str	r0, [r4, #20]
   37a34:	bhi	37bf8 <flatcc_json_printer_uint16_vector_field@@Base+0x284>
   37a38:	mov	r2, r6
   37a3c:	mov	r1, r7
   37a40:	mov	r0, r4
   37a44:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   37a48:	ldr	r6, [r4, #20]
   37a4c:	mov	r3, #34	; 0x22
   37a50:	strb	r3, [r6]
   37a54:	ldr	r1, [r4, #20]
   37a58:	ldrb	r3, [r4, #26]
   37a5c:	clz	r3, r3
   37a60:	lsr	r3, r3, #5
   37a64:	add	r2, r1, r3
   37a68:	add	r2, r2, #1
   37a6c:	mov	r0, #58	; 0x3a
   37a70:	str	r2, [r4, #20]
   37a74:	strb	r0, [r1, r3]
   37a78:	ldr	r3, [r4, #20]
   37a7c:	mov	r2, #32
   37a80:	mov	ip, #91	; 0x5b
   37a84:	strb	r2, [r3]
   37a88:	ldrb	r3, [r4, #25]
   37a8c:	ldr	r0, [r4, #20]
   37a90:	ldr	r2, [r4, #32]
   37a94:	adds	r3, r3, #0
   37a98:	movne	r3, #1
   37a9c:	add	r1, r0, r3
   37aa0:	add	r1, r1, #1
   37aa4:	add	r2, r2, #1
   37aa8:	cmp	sl, #0
   37aac:	str	r1, [r4, #20]
   37ab0:	str	r2, [r4, #32]
   37ab4:	strb	ip, [r0, r3]
   37ab8:	bne	37ae0 <flatcc_json_printer_uint16_vector_field@@Base+0x16c>
   37abc:	ldr	r0, [r4, #20]
   37ac0:	ldrb	r3, [r4, #25]
   37ac4:	cmp	r3, #0
   37ac8:	bne	37c14 <flatcc_json_printer_uint16_vector_field@@Base+0x2a0>
   37acc:	add	r2, r0, #1
   37ad0:	mov	r3, #93	; 0x5d
   37ad4:	str	r2, [r4, #20]
   37ad8:	strb	r3, [r0]
   37adc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37ae0:	ldrb	r3, [r4, #25]
   37ae4:	cmp	r3, #0
   37ae8:	bne	37cc4 <flatcc_json_printer_uint16_vector_field@@Base+0x350>
   37aec:	ldr	r1, [r4, #20]
   37af0:	ldr	r2, [r4, #16]
   37af4:	cmp	r1, r2
   37af8:	bcs	37ce8 <flatcc_json_printer_uint16_vector_field@@Base+0x374>
   37afc:	ldrh	r0, [r5, #4]
   37b00:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   37b04:	ldr	r3, [r4, #20]
   37b08:	cmp	sl, #1
   37b0c:	add	r5, r5, #6
   37b10:	sub	sl, sl, #2
   37b14:	add	r0, r3, r0
   37b18:	str	r0, [r4, #20]
   37b1c:	beq	37ac0 <flatcc_json_printer_uint16_vector_field@@Base+0x14c>
   37b20:	mov	r6, #44	; 0x2c
   37b24:	mov	r9, #0
   37b28:	mov	r8, #10
   37b2c:	mov	r7, #32
   37b30:	b	37b64 <flatcc_json_printer_uint16_vector_field@@Base+0x1f0>
   37b34:	ldr	r1, [r4, #20]
   37b38:	ldr	r3, [r4, #16]
   37b3c:	cmp	r1, r3
   37b40:	bcs	37bcc <flatcc_json_printer_uint16_vector_field@@Base+0x258>
   37b44:	ldrh	r0, [r5], #2
   37b48:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   37b4c:	ldr	r3, [r4, #20]
   37b50:	cmp	sl, #0
   37b54:	sub	sl, sl, #1
   37b58:	add	r0, r3, r0
   37b5c:	str	r0, [r4, #20]
   37b60:	beq	37ac0 <flatcc_json_printer_uint16_vector_field@@Base+0x14c>
   37b64:	add	r3, r0, #1
   37b68:	str	r3, [r4, #20]
   37b6c:	strb	r6, [r0]
   37b70:	ldrb	r3, [r4, #25]
   37b74:	cmp	r3, #0
   37b78:	beq	37b34 <flatcc_json_printer_uint16_vector_field@@Base+0x1c0>
   37b7c:	ldr	r3, [r4, #20]
   37b80:	mov	r1, r7
   37b84:	add	r2, r3, #1
   37b88:	str	r2, [r4, #20]
   37b8c:	strb	r8, [r3]
   37b90:	ldrb	r2, [r4, #25]
   37b94:	ldr	fp, [r4, #32]
   37b98:	ldr	r3, [r4, #20]
   37b9c:	ldr	ip, [r4, #16]
   37ba0:	mul	fp, fp, r2
   37ba4:	mov	r0, r3
   37ba8:	add	r3, r3, fp
   37bac:	cmp	ip, r3
   37bb0:	mov	r2, fp
   37bb4:	bcc	37be4 <flatcc_json_printer_uint16_vector_field@@Base+0x270>
   37bb8:	bl	145bc <memset@plt>
   37bbc:	ldr	r1, [r4, #20]
   37bc0:	add	r1, r1, fp
   37bc4:	str	r1, [r4, #20]
   37bc8:	b	37b44 <flatcc_json_printer_uint16_vector_field@@Base+0x1d0>
   37bcc:	mov	r1, r9
   37bd0:	ldr	r3, [r4, #44]	; 0x2c
   37bd4:	mov	r0, r4
   37bd8:	blx	r3
   37bdc:	ldr	r1, [r4, #20]
   37be0:	b	37b44 <flatcc_json_printer_uint16_vector_field@@Base+0x1d0>
   37be4:	mov	r1, fp
   37be8:	mov	r0, r4
   37bec:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   37bf0:	ldr	r1, [r4, #20]
   37bf4:	b	37b44 <flatcc_json_printer_uint16_vector_field@@Base+0x1d0>
   37bf8:	mov	r2, r6
   37bfc:	mov	r1, r7
   37c00:	bl	14544 <memcpy@plt>
   37c04:	ldr	r3, [r4, #20]
   37c08:	add	r6, r3, r6
   37c0c:	str	r6, [r4, #20]
   37c10:	b	37a4c <flatcc_json_printer_uint16_vector_field@@Base+0xd8>
   37c14:	add	r2, r0, #1
   37c18:	mov	r3, #10
   37c1c:	str	r2, [r4, #20]
   37c20:	strb	r3, [r0]
   37c24:	ldr	r3, [r4, #32]
   37c28:	ldrb	r5, [r4, #25]
   37c2c:	sub	r3, r3, #1
   37c30:	ldr	r0, [r4, #20]
   37c34:	ldr	r2, [r4, #16]
   37c38:	mul	r5, r3, r5
   37c3c:	str	r3, [r4, #32]
   37c40:	add	r3, r0, r5
   37c44:	cmp	r2, r3
   37c48:	bcc	37c64 <flatcc_json_printer_uint16_vector_field@@Base+0x2f0>
   37c4c:	mov	r2, r5
   37c50:	mov	r1, #32
   37c54:	bl	145bc <memset@plt>
   37c58:	ldr	r0, [r4, #20]
   37c5c:	add	r0, r0, r5
   37c60:	b	37acc <flatcc_json_printer_uint16_vector_field@@Base+0x158>
   37c64:	mov	r0, r4
   37c68:	mov	r1, r5
   37c6c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   37c70:	ldr	r0, [r4, #20]
   37c74:	b	37acc <flatcc_json_printer_uint16_vector_field@@Base+0x158>
   37c78:	mov	r2, #10
   37c7c:	add	r1, r3, #1
   37c80:	str	r1, [r0, #20]
   37c84:	strb	r2, [r3]
   37c88:	ldrb	r3, [r0, #25]
   37c8c:	ldr	r8, [r0, #32]
   37c90:	ldr	r0, [r0, #20]
   37c94:	ldr	r2, [r4, #16]
   37c98:	mul	r8, r8, r3
   37c9c:	add	r3, r0, r8
   37ca0:	cmp	r2, r3
   37ca4:	bcc	37d00 <flatcc_json_printer_uint16_vector_field@@Base+0x38c>
   37ca8:	mov	r2, r8
   37cac:	mov	r1, #32
   37cb0:	bl	145bc <memset@plt>
   37cb4:	ldr	r3, [r4, #20]
   37cb8:	add	r3, r3, r8
   37cbc:	str	r3, [r4, #20]
   37cc0:	b	37a0c <flatcc_json_printer_uint16_vector_field@@Base+0x98>
   37cc4:	ldr	r3, [r4, #20]
   37cc8:	mov	r2, #10
   37ccc:	add	r1, r3, #1
   37cd0:	str	r1, [r4, #20]
   37cd4:	mov	r0, r4
   37cd8:	strb	r2, [r3]
   37cdc:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   37ce0:	ldr	r1, [r4, #20]
   37ce4:	b	37afc <flatcc_json_printer_uint16_vector_field@@Base+0x188>
   37ce8:	mov	r1, r3
   37cec:	mov	r0, r4
   37cf0:	ldr	r3, [r4, #44]	; 0x2c
   37cf4:	blx	r3
   37cf8:	ldr	r1, [r4, #20]
   37cfc:	b	37afc <flatcc_json_printer_uint16_vector_field@@Base+0x188>
   37d00:	mov	r1, r8
   37d04:	mov	r0, r4
   37d08:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   37d0c:	ldr	r3, [r4, #20]
   37d10:	b	37a0c <flatcc_json_printer_uint16_vector_field@@Base+0x98>

00037d14 <flatcc_json_printer_uint32_vector_field@@Base>:
   37d14:	add	r2, r2, #2
   37d18:	ldr	ip, [r1, #8]
   37d1c:	lsl	r2, r2, #1
   37d20:	cmp	ip, r2
   37d24:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37d28:	ldr	r6, [sp, #40]	; 0x28
   37d2c:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d30:	ldr	ip, [r1, #4]
   37d34:	ldrh	ip, [ip, r2]
   37d38:	cmp	ip, #0
   37d3c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d40:	ldr	r5, [r1]
   37d44:	adds	lr, r5, ip
   37d48:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d4c:	ldr	r2, [r1, #16]
   37d50:	mov	r7, r3
   37d54:	cmp	r2, #0
   37d58:	add	r2, r2, #1
   37d5c:	str	r2, [r1, #16]
   37d60:	ldrne	r2, [r0, #20]
   37d64:	movne	r1, #44	; 0x2c
   37d68:	addne	r4, r2, #1
   37d6c:	strne	r4, [r0, #20]
   37d70:	strbne	r1, [r2]
   37d74:	ldrb	r1, [r0, #25]
   37d78:	ldr	r3, [r5, ip]
   37d7c:	mov	r4, r0
   37d80:	cmp	r1, #0
   37d84:	add	r5, lr, r3
   37d88:	ldr	sl, [lr, r3]
   37d8c:	ldr	r3, [r0, #20]
   37d90:	bne	38018 <flatcc_json_printer_uint32_vector_field@@Base+0x304>
   37d94:	ldr	r2, [r0, #16]
   37d98:	cmp	r3, r2
   37d9c:	bcc	37dac <flatcc_json_printer_uint32_vector_field@@Base+0x98>
   37da0:	ldr	r3, [r0, #44]	; 0x2c
   37da4:	blx	r3
   37da8:	ldr	r3, [r4, #20]
   37dac:	mov	r2, #34	; 0x22
   37db0:	strb	r2, [r3]
   37db4:	ldrb	r3, [r4, #26]
   37db8:	ldr	r0, [r4, #20]
   37dbc:	ldr	r2, [r4, #16]
   37dc0:	cmp	r3, #0
   37dc4:	addeq	r0, r0, #1
   37dc8:	add	r3, r0, r6
   37dcc:	cmp	r2, r3
   37dd0:	str	r0, [r4, #20]
   37dd4:	bhi	37f98 <flatcc_json_printer_uint32_vector_field@@Base+0x284>
   37dd8:	mov	r2, r6
   37ddc:	mov	r1, r7
   37de0:	mov	r0, r4
   37de4:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   37de8:	ldr	r6, [r4, #20]
   37dec:	mov	r3, #34	; 0x22
   37df0:	strb	r3, [r6]
   37df4:	ldr	r1, [r4, #20]
   37df8:	ldrb	r3, [r4, #26]
   37dfc:	clz	r3, r3
   37e00:	lsr	r3, r3, #5
   37e04:	add	r2, r1, r3
   37e08:	add	r2, r2, #1
   37e0c:	mov	r0, #58	; 0x3a
   37e10:	str	r2, [r4, #20]
   37e14:	strb	r0, [r1, r3]
   37e18:	ldr	r3, [r4, #20]
   37e1c:	mov	r2, #32
   37e20:	mov	ip, #91	; 0x5b
   37e24:	strb	r2, [r3]
   37e28:	ldrb	r3, [r4, #25]
   37e2c:	ldr	r0, [r4, #20]
   37e30:	ldr	r2, [r4, #32]
   37e34:	adds	r3, r3, #0
   37e38:	movne	r3, #1
   37e3c:	add	r1, r0, r3
   37e40:	add	r1, r1, #1
   37e44:	add	r2, r2, #1
   37e48:	cmp	sl, #0
   37e4c:	str	r1, [r4, #20]
   37e50:	str	r2, [r4, #32]
   37e54:	strb	ip, [r0, r3]
   37e58:	bne	37e80 <flatcc_json_printer_uint32_vector_field@@Base+0x16c>
   37e5c:	ldr	r0, [r4, #20]
   37e60:	ldrb	r3, [r4, #25]
   37e64:	cmp	r3, #0
   37e68:	bne	37fb4 <flatcc_json_printer_uint32_vector_field@@Base+0x2a0>
   37e6c:	add	r2, r0, #1
   37e70:	mov	r3, #93	; 0x5d
   37e74:	str	r2, [r4, #20]
   37e78:	strb	r3, [r0]
   37e7c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e80:	ldrb	r3, [r4, #25]
   37e84:	cmp	r3, #0
   37e88:	bne	38064 <flatcc_json_printer_uint32_vector_field@@Base+0x350>
   37e8c:	ldr	r1, [r4, #20]
   37e90:	ldr	r2, [r4, #16]
   37e94:	cmp	r1, r2
   37e98:	bcs	38088 <flatcc_json_printer_uint32_vector_field@@Base+0x374>
   37e9c:	ldr	r0, [r5, #4]
   37ea0:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   37ea4:	ldr	r3, [r4, #20]
   37ea8:	cmp	sl, #1
   37eac:	add	r5, r5, #8
   37eb0:	sub	sl, sl, #2
   37eb4:	add	r0, r3, r0
   37eb8:	str	r0, [r4, #20]
   37ebc:	beq	37e60 <flatcc_json_printer_uint32_vector_field@@Base+0x14c>
   37ec0:	mov	r6, #44	; 0x2c
   37ec4:	mov	r9, #0
   37ec8:	mov	r8, #10
   37ecc:	mov	r7, #32
   37ed0:	b	37f04 <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   37ed4:	ldr	r1, [r4, #20]
   37ed8:	ldr	r3, [r4, #16]
   37edc:	cmp	r1, r3
   37ee0:	bcs	37f6c <flatcc_json_printer_uint32_vector_field@@Base+0x258>
   37ee4:	ldr	r0, [r5], #4
   37ee8:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   37eec:	ldr	r3, [r4, #20]
   37ef0:	cmp	sl, #0
   37ef4:	sub	sl, sl, #1
   37ef8:	add	r0, r3, r0
   37efc:	str	r0, [r4, #20]
   37f00:	beq	37e60 <flatcc_json_printer_uint32_vector_field@@Base+0x14c>
   37f04:	add	r3, r0, #1
   37f08:	str	r3, [r4, #20]
   37f0c:	strb	r6, [r0]
   37f10:	ldrb	r3, [r4, #25]
   37f14:	cmp	r3, #0
   37f18:	beq	37ed4 <flatcc_json_printer_uint32_vector_field@@Base+0x1c0>
   37f1c:	ldr	r3, [r4, #20]
   37f20:	mov	r1, r7
   37f24:	add	r2, r3, #1
   37f28:	str	r2, [r4, #20]
   37f2c:	strb	r8, [r3]
   37f30:	ldrb	r2, [r4, #25]
   37f34:	ldr	fp, [r4, #32]
   37f38:	ldr	r3, [r4, #20]
   37f3c:	ldr	ip, [r4, #16]
   37f40:	mul	fp, fp, r2
   37f44:	mov	r0, r3
   37f48:	add	r3, r3, fp
   37f4c:	cmp	ip, r3
   37f50:	mov	r2, fp
   37f54:	bcc	37f84 <flatcc_json_printer_uint32_vector_field@@Base+0x270>
   37f58:	bl	145bc <memset@plt>
   37f5c:	ldr	r1, [r4, #20]
   37f60:	add	r1, r1, fp
   37f64:	str	r1, [r4, #20]
   37f68:	b	37ee4 <flatcc_json_printer_uint32_vector_field@@Base+0x1d0>
   37f6c:	mov	r1, r9
   37f70:	ldr	r3, [r4, #44]	; 0x2c
   37f74:	mov	r0, r4
   37f78:	blx	r3
   37f7c:	ldr	r1, [r4, #20]
   37f80:	b	37ee4 <flatcc_json_printer_uint32_vector_field@@Base+0x1d0>
   37f84:	mov	r1, fp
   37f88:	mov	r0, r4
   37f8c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   37f90:	ldr	r1, [r4, #20]
   37f94:	b	37ee4 <flatcc_json_printer_uint32_vector_field@@Base+0x1d0>
   37f98:	mov	r2, r6
   37f9c:	mov	r1, r7
   37fa0:	bl	14544 <memcpy@plt>
   37fa4:	ldr	r3, [r4, #20]
   37fa8:	add	r6, r3, r6
   37fac:	str	r6, [r4, #20]
   37fb0:	b	37dec <flatcc_json_printer_uint32_vector_field@@Base+0xd8>
   37fb4:	add	r2, r0, #1
   37fb8:	mov	r3, #10
   37fbc:	str	r2, [r4, #20]
   37fc0:	strb	r3, [r0]
   37fc4:	ldr	r3, [r4, #32]
   37fc8:	ldrb	r5, [r4, #25]
   37fcc:	sub	r3, r3, #1
   37fd0:	ldr	r0, [r4, #20]
   37fd4:	ldr	r2, [r4, #16]
   37fd8:	mul	r5, r3, r5
   37fdc:	str	r3, [r4, #32]
   37fe0:	add	r3, r0, r5
   37fe4:	cmp	r2, r3
   37fe8:	bcc	38004 <flatcc_json_printer_uint32_vector_field@@Base+0x2f0>
   37fec:	mov	r2, r5
   37ff0:	mov	r1, #32
   37ff4:	bl	145bc <memset@plt>
   37ff8:	ldr	r0, [r4, #20]
   37ffc:	add	r0, r0, r5
   38000:	b	37e6c <flatcc_json_printer_uint32_vector_field@@Base+0x158>
   38004:	mov	r0, r4
   38008:	mov	r1, r5
   3800c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   38010:	ldr	r0, [r4, #20]
   38014:	b	37e6c <flatcc_json_printer_uint32_vector_field@@Base+0x158>
   38018:	mov	r2, #10
   3801c:	add	r1, r3, #1
   38020:	str	r1, [r0, #20]
   38024:	strb	r2, [r3]
   38028:	ldrb	r3, [r0, #25]
   3802c:	ldr	r8, [r0, #32]
   38030:	ldr	r0, [r0, #20]
   38034:	ldr	r2, [r4, #16]
   38038:	mul	r8, r8, r3
   3803c:	add	r3, r0, r8
   38040:	cmp	r2, r3
   38044:	bcc	380a0 <flatcc_json_printer_uint32_vector_field@@Base+0x38c>
   38048:	mov	r2, r8
   3804c:	mov	r1, #32
   38050:	bl	145bc <memset@plt>
   38054:	ldr	r3, [r4, #20]
   38058:	add	r3, r3, r8
   3805c:	str	r3, [r4, #20]
   38060:	b	37dac <flatcc_json_printer_uint32_vector_field@@Base+0x98>
   38064:	ldr	r3, [r4, #20]
   38068:	mov	r2, #10
   3806c:	add	r1, r3, #1
   38070:	str	r1, [r4, #20]
   38074:	mov	r0, r4
   38078:	strb	r2, [r3]
   3807c:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   38080:	ldr	r1, [r4, #20]
   38084:	b	37e9c <flatcc_json_printer_uint32_vector_field@@Base+0x188>
   38088:	mov	r1, r3
   3808c:	mov	r0, r4
   38090:	ldr	r3, [r4, #44]	; 0x2c
   38094:	blx	r3
   38098:	ldr	r1, [r4, #20]
   3809c:	b	37e9c <flatcc_json_printer_uint32_vector_field@@Base+0x188>
   380a0:	mov	r1, r8
   380a4:	mov	r0, r4
   380a8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   380ac:	ldr	r3, [r4, #20]
   380b0:	b	37dac <flatcc_json_printer_uint32_vector_field@@Base+0x98>

000380b4 <flatcc_json_printer_uint64_vector_field@@Base>:
   380b4:	add	r2, r2, #2
   380b8:	ldr	ip, [r1, #8]
   380bc:	lsl	r2, r2, #1
   380c0:	cmp	ip, r2
   380c4:	bxle	lr
   380c8:	ldr	ip, [r1, #4]
   380cc:	ldrh	ip, [ip, r2]
   380d0:	cmp	ip, #0
   380d4:	bxeq	lr
   380d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   380dc:	ldr	r5, [r1]
   380e0:	adds	lr, r5, ip
   380e4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   380e8:	ldr	r2, [r1, #16]
   380ec:	cmp	r2, #0
   380f0:	add	r2, r2, #1
   380f4:	str	r2, [r1, #16]
   380f8:	ldrne	r2, [r0, #20]
   380fc:	movne	r1, #44	; 0x2c
   38100:	addne	r4, r2, #1
   38104:	strne	r4, [r0, #20]
   38108:	strbne	r1, [r2]
   3810c:	mov	r1, r3
   38110:	ldr	r3, [r5, ip]
   38114:	mov	r4, r0
   38118:	ldr	r2, [sp, #40]	; 0x28
   3811c:	ldr	sl, [lr, r3]
   38120:	add	r5, lr, r3
   38124:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   38128:	ldr	r3, [r4, #32]
   3812c:	ldr	r2, [r4, #20]
   38130:	add	r3, r3, #1
   38134:	add	r0, r2, #1
   38138:	mov	r1, #91	; 0x5b
   3813c:	cmp	sl, #0
   38140:	str	r3, [r4, #32]
   38144:	str	r0, [r4, #20]
   38148:	strb	r1, [r2]
   3814c:	bne	38174 <flatcc_json_printer_uint64_vector_field@@Base+0xc0>
   38150:	ldr	r0, [r4, #20]
   38154:	ldrb	r3, [r4, #25]
   38158:	cmp	r3, #0
   3815c:	bne	3828c <flatcc_json_printer_uint64_vector_field@@Base+0x1d8>
   38160:	add	r2, r0, #1
   38164:	mov	r3, #93	; 0x5d
   38168:	str	r2, [r4, #20]
   3816c:	strb	r3, [r0]
   38170:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38174:	ldrb	r1, [r4, #25]
   38178:	cmp	r1, #0
   3817c:	bne	382f0 <flatcc_json_printer_uint64_vector_field@@Base+0x23c>
   38180:	ldr	r2, [r4, #20]
   38184:	ldr	r3, [r4, #16]
   38188:	cmp	r2, r3
   3818c:	bcs	38314 <flatcc_json_printer_uint64_vector_field@@Base+0x260>
   38190:	ldrd	r0, [r5, #4]
   38194:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   38198:	ldr	r3, [r4, #20]
   3819c:	cmp	sl, #1
   381a0:	add	r5, r5, #12
   381a4:	sub	sl, sl, #2
   381a8:	add	r0, r3, r0
   381ac:	str	r0, [r4, #20]
   381b0:	beq	38154 <flatcc_json_printer_uint64_vector_field@@Base+0xa0>
   381b4:	mov	r6, #44	; 0x2c
   381b8:	mov	r9, #0
   381bc:	mov	r8, #10
   381c0:	mov	r7, #32
   381c4:	b	381f8 <flatcc_json_printer_uint64_vector_field@@Base+0x144>
   381c8:	ldr	r2, [r4, #20]
   381cc:	ldr	r3, [r4, #16]
   381d0:	cmp	r2, r3
   381d4:	bcs	38260 <flatcc_json_printer_uint64_vector_field@@Base+0x1ac>
   381d8:	ldrd	r0, [r5], #8
   381dc:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   381e0:	ldr	r3, [r4, #20]
   381e4:	cmp	sl, #0
   381e8:	sub	sl, sl, #1
   381ec:	add	r0, r3, r0
   381f0:	str	r0, [r4, #20]
   381f4:	beq	38154 <flatcc_json_printer_uint64_vector_field@@Base+0xa0>
   381f8:	add	r3, r0, #1
   381fc:	str	r3, [r4, #20]
   38200:	strb	r6, [r0]
   38204:	ldrb	r3, [r4, #25]
   38208:	cmp	r3, #0
   3820c:	beq	381c8 <flatcc_json_printer_uint64_vector_field@@Base+0x114>
   38210:	ldr	r3, [r4, #20]
   38214:	mov	r1, r7
   38218:	add	r2, r3, #1
   3821c:	str	r2, [r4, #20]
   38220:	strb	r8, [r3]
   38224:	ldrb	r2, [r4, #25]
   38228:	ldr	fp, [r4, #32]
   3822c:	ldr	r3, [r4, #20]
   38230:	ldr	ip, [r4, #16]
   38234:	mul	fp, fp, r2
   38238:	mov	r0, r3
   3823c:	add	r3, r3, fp
   38240:	cmp	ip, r3
   38244:	mov	r2, fp
   38248:	bcc	38278 <flatcc_json_printer_uint64_vector_field@@Base+0x1c4>
   3824c:	bl	145bc <memset@plt>
   38250:	ldr	r2, [r4, #20]
   38254:	add	r2, r2, fp
   38258:	str	r2, [r4, #20]
   3825c:	b	381d8 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   38260:	ldr	r3, [r4, #44]	; 0x2c
   38264:	mov	r1, r9
   38268:	mov	r0, r4
   3826c:	blx	r3
   38270:	ldr	r2, [r4, #20]
   38274:	b	381d8 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   38278:	mov	r1, fp
   3827c:	mov	r0, r4
   38280:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   38284:	ldr	r2, [r4, #20]
   38288:	b	381d8 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   3828c:	add	r2, r0, #1
   38290:	mov	r3, #10
   38294:	str	r2, [r4, #20]
   38298:	strb	r3, [r0]
   3829c:	ldr	r3, [r4, #32]
   382a0:	ldrb	r5, [r4, #25]
   382a4:	sub	r3, r3, #1
   382a8:	ldr	r0, [r4, #20]
   382ac:	ldr	r2, [r4, #16]
   382b0:	mul	r5, r3, r5
   382b4:	str	r3, [r4, #32]
   382b8:	add	r3, r0, r5
   382bc:	cmp	r2, r3
   382c0:	bcc	382dc <flatcc_json_printer_uint64_vector_field@@Base+0x228>
   382c4:	mov	r2, r5
   382c8:	mov	r1, #32
   382cc:	bl	145bc <memset@plt>
   382d0:	ldr	r0, [r4, #20]
   382d4:	add	r0, r0, r5
   382d8:	b	38160 <flatcc_json_printer_uint64_vector_field@@Base+0xac>
   382dc:	mov	r0, r4
   382e0:	mov	r1, r5
   382e4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   382e8:	ldr	r0, [r4, #20]
   382ec:	b	38160 <flatcc_json_printer_uint64_vector_field@@Base+0xac>
   382f0:	ldr	r3, [r4, #20]
   382f4:	mov	r2, #10
   382f8:	add	r1, r3, #1
   382fc:	str	r1, [r4, #20]
   38300:	mov	r0, r4
   38304:	strb	r2, [r3]
   38308:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3830c:	ldr	r2, [r4, #20]
   38310:	b	38190 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   38314:	ldr	r3, [r4, #44]	; 0x2c
   38318:	mov	r0, r4
   3831c:	blx	r3
   38320:	ldr	r2, [r4, #20]
   38324:	b	38190 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>

00038328 <flatcc_json_printer_int8_vector_field@@Base>:
   38328:	add	r2, r2, #2
   3832c:	ldr	ip, [r1, #8]
   38330:	lsl	r2, r2, #1
   38334:	cmp	ip, r2
   38338:	bxle	lr
   3833c:	ldr	ip, [r1, #4]
   38340:	ldrh	ip, [ip, r2]
   38344:	cmp	ip, #0
   38348:	bxeq	lr
   3834c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38350:	ldr	lr, [r1]
   38354:	adds	r5, lr, ip
   38358:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3835c:	ldr	r2, [r1, #16]
   38360:	cmp	r2, #0
   38364:	add	r2, r2, #1
   38368:	str	r2, [r1, #16]
   3836c:	ldrne	r2, [r0, #20]
   38370:	movne	r1, #44	; 0x2c
   38374:	addne	r4, r2, #1
   38378:	strne	r4, [r0, #20]
   3837c:	strbne	r1, [r2]
   38380:	mov	r1, r3
   38384:	ldr	r3, [lr, ip]
   38388:	mov	r4, r0
   3838c:	ldr	r2, [sp, #40]	; 0x28
   38390:	ldr	r6, [r5, r3]
   38394:	add	r7, r5, r3
   38398:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3839c:	ldr	r3, [r4, #32]
   383a0:	ldr	r2, [r4, #20]
   383a4:	add	r3, r3, #1
   383a8:	add	r0, r2, #1
   383ac:	mov	r1, #91	; 0x5b
   383b0:	cmp	r6, #0
   383b4:	str	r3, [r4, #32]
   383b8:	str	r0, [r4, #20]
   383bc:	strb	r1, [r2]
   383c0:	bne	383e8 <flatcc_json_printer_int8_vector_field@@Base+0xc0>
   383c4:	ldr	r0, [r4, #20]
   383c8:	ldrb	r3, [r4, #25]
   383cc:	cmp	r3, #0
   383d0:	bne	38544 <flatcc_json_printer_int8_vector_field@@Base+0x21c>
   383d4:	add	r2, r0, #1
   383d8:	mov	r3, #93	; 0x5d
   383dc:	str	r2, [r4, #20]
   383e0:	strb	r3, [r0]
   383e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   383e8:	ldrb	r3, [r4, #25]
   383ec:	cmp	r3, #0
   383f0:	bne	385a8 <flatcc_json_printer_int8_vector_field@@Base+0x280>
   383f4:	ldr	r1, [r4, #20]
   383f8:	ldr	r2, [r4, #16]
   383fc:	cmp	r1, r2
   38400:	bcs	385cc <flatcc_json_printer_int8_vector_field@@Base+0x2a4>
   38404:	ldrsb	r0, [r7, #4]
   38408:	add	fp, r7, #4
   3840c:	cmp	r0, #0
   38410:	lsr	r5, r0, #31
   38414:	rsblt	r0, r0, #0
   38418:	movlt	r3, #45	; 0x2d
   3841c:	sxtblt	r0, r0
   38420:	strblt	r3, [r1]
   38424:	uxtb	r0, r0
   38428:	addlt	r1, r1, #1
   3842c:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   38430:	ldr	r3, [r4, #20]
   38434:	cmp	r6, #1
   38438:	add	r0, r5, r0
   3843c:	add	r0, r3, r0
   38440:	str	r0, [r4, #20]
   38444:	beq	383c8 <flatcc_json_printer_int8_vector_field@@Base+0xa0>
   38448:	mov	r8, #44	; 0x2c
   3844c:	mov	sl, #10
   38450:	mov	r9, #32
   38454:	b	384b0 <flatcc_json_printer_int8_vector_field@@Base+0x188>
   38458:	ldr	r1, [r4, #20]
   3845c:	ldr	r3, [r4, #16]
   38460:	cmp	r1, r3
   38464:	bcs	38518 <flatcc_json_printer_int8_vector_field@@Base+0x1f0>
   38468:	ldrsb	r0, [fp, #1]!
   3846c:	cmp	r0, #0
   38470:	lsr	r5, r0, #31
   38474:	rsblt	r0, r0, #0
   38478:	movlt	r3, #45	; 0x2d
   3847c:	sxtblt	r0, r0
   38480:	strblt	r3, [r1]
   38484:	uxtb	r0, r0
   38488:	addlt	r1, r1, #1
   3848c:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   38490:	ldr	r3, [r4, #20]
   38494:	rsb	r2, fp, #3
   38498:	add	r2, r2, r6
   3849c:	cmn	r7, r2
   384a0:	add	r0, r5, r0
   384a4:	add	r0, r3, r0
   384a8:	str	r0, [r4, #20]
   384ac:	beq	383c8 <flatcc_json_printer_int8_vector_field@@Base+0xa0>
   384b0:	add	r3, r0, #1
   384b4:	str	r3, [r4, #20]
   384b8:	strb	r8, [r0]
   384bc:	ldrb	r3, [r4, #25]
   384c0:	cmp	r3, #0
   384c4:	beq	38458 <flatcc_json_printer_int8_vector_field@@Base+0x130>
   384c8:	ldr	r3, [r4, #20]
   384cc:	mov	r1, r9
   384d0:	add	r2, r3, #1
   384d4:	str	r2, [r4, #20]
   384d8:	strb	sl, [r3]
   384dc:	ldrb	r2, [r4, #25]
   384e0:	ldr	r5, [r4, #32]
   384e4:	ldr	r3, [r4, #20]
   384e8:	ldr	ip, [r4, #16]
   384ec:	mul	r5, r5, r2
   384f0:	mov	r0, r3
   384f4:	add	r3, r3, r5
   384f8:	cmp	ip, r3
   384fc:	mov	r2, r5
   38500:	bcc	38530 <flatcc_json_printer_int8_vector_field@@Base+0x208>
   38504:	bl	145bc <memset@plt>
   38508:	ldr	r1, [r4, #20]
   3850c:	add	r1, r1, r5
   38510:	str	r1, [r4, #20]
   38514:	b	38468 <flatcc_json_printer_int8_vector_field@@Base+0x140>
   38518:	mov	r1, #0
   3851c:	ldr	r3, [r4, #44]	; 0x2c
   38520:	mov	r0, r4
   38524:	blx	r3
   38528:	ldr	r1, [r4, #20]
   3852c:	b	38468 <flatcc_json_printer_int8_vector_field@@Base+0x140>
   38530:	mov	r1, r5
   38534:	mov	r0, r4
   38538:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3853c:	ldr	r1, [r4, #20]
   38540:	b	38468 <flatcc_json_printer_int8_vector_field@@Base+0x140>
   38544:	add	r2, r0, #1
   38548:	mov	r3, #10
   3854c:	str	r2, [r4, #20]
   38550:	strb	r3, [r0]
   38554:	ldr	r3, [r4, #32]
   38558:	ldrb	r5, [r4, #25]
   3855c:	sub	r3, r3, #1
   38560:	ldr	r0, [r4, #20]
   38564:	ldr	r2, [r4, #16]
   38568:	mul	r5, r3, r5
   3856c:	str	r3, [r4, #32]
   38570:	add	r3, r0, r5
   38574:	cmp	r2, r3
   38578:	bcc	38594 <flatcc_json_printer_int8_vector_field@@Base+0x26c>
   3857c:	mov	r2, r5
   38580:	mov	r1, #32
   38584:	bl	145bc <memset@plt>
   38588:	ldr	r0, [r4, #20]
   3858c:	add	r0, r0, r5
   38590:	b	383d4 <flatcc_json_printer_int8_vector_field@@Base+0xac>
   38594:	mov	r0, r4
   38598:	mov	r1, r5
   3859c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   385a0:	ldr	r0, [r4, #20]
   385a4:	b	383d4 <flatcc_json_printer_int8_vector_field@@Base+0xac>
   385a8:	ldr	r3, [r4, #20]
   385ac:	mov	r2, #10
   385b0:	add	r1, r3, #1
   385b4:	str	r1, [r4, #20]
   385b8:	mov	r0, r4
   385bc:	strb	r2, [r3]
   385c0:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   385c4:	ldr	r1, [r4, #20]
   385c8:	b	38404 <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   385cc:	mov	r1, r3
   385d0:	mov	r0, r4
   385d4:	ldr	r3, [r4, #44]	; 0x2c
   385d8:	blx	r3
   385dc:	ldr	r1, [r4, #20]
   385e0:	b	38404 <flatcc_json_printer_int8_vector_field@@Base+0xdc>

000385e4 <flatcc_json_printer_int16_vector_field@@Base>:
   385e4:	add	r2, r2, #2
   385e8:	ldr	ip, [r1, #8]
   385ec:	lsl	r2, r2, #1
   385f0:	cmp	ip, r2
   385f4:	bxle	lr
   385f8:	ldr	ip, [r1, #4]
   385fc:	ldrh	ip, [ip, r2]
   38600:	cmp	ip, #0
   38604:	bxeq	lr
   38608:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3860c:	ldr	lr, [r1]
   38610:	adds	r6, lr, ip
   38614:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38618:	ldr	r2, [r1, #16]
   3861c:	cmp	r2, #0
   38620:	add	r2, r2, #1
   38624:	str	r2, [r1, #16]
   38628:	ldrne	r2, [r0, #20]
   3862c:	movne	r1, #44	; 0x2c
   38630:	addne	r4, r2, #1
   38634:	strne	r4, [r0, #20]
   38638:	strbne	r1, [r2]
   3863c:	mov	r1, r3
   38640:	ldr	r3, [lr, ip]
   38644:	mov	r4, r0
   38648:	ldr	r2, [sp, #40]	; 0x28
   3864c:	ldr	fp, [r6, r3]
   38650:	add	r5, r6, r3
   38654:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   38658:	ldr	r3, [r4, #32]
   3865c:	ldr	r2, [r4, #20]
   38660:	add	r3, r3, #1
   38664:	add	r0, r2, #1
   38668:	mov	r1, #91	; 0x5b
   3866c:	cmp	fp, #0
   38670:	str	r3, [r4, #32]
   38674:	str	r0, [r4, #20]
   38678:	strb	r1, [r2]
   3867c:	bne	386a4 <flatcc_json_printer_int16_vector_field@@Base+0xc0>
   38680:	ldr	r0, [r4, #20]
   38684:	ldrb	r3, [r4, #25]
   38688:	cmp	r3, #0
   3868c:	bne	38800 <flatcc_json_printer_int16_vector_field@@Base+0x21c>
   38690:	add	r2, r0, #1
   38694:	mov	r3, #93	; 0x5d
   38698:	str	r2, [r4, #20]
   3869c:	strb	r3, [r0]
   386a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   386a4:	ldrb	r3, [r4, #25]
   386a8:	cmp	r3, #0
   386ac:	bne	38864 <flatcc_json_printer_int16_vector_field@@Base+0x280>
   386b0:	ldr	r1, [r4, #20]
   386b4:	ldr	r2, [r4, #16]
   386b8:	cmp	r1, r2
   386bc:	bcs	38888 <flatcc_json_printer_int16_vector_field@@Base+0x2a4>
   386c0:	ldrsh	r0, [r5, #4]
   386c4:	add	r5, r5, #4
   386c8:	cmp	r0, #0
   386cc:	lsr	r6, r0, #31
   386d0:	rsblt	r0, r0, #0
   386d4:	movlt	r3, #45	; 0x2d
   386d8:	sxthlt	r0, r0
   386dc:	strblt	r3, [r1]
   386e0:	uxth	r0, r0
   386e4:	addlt	r1, r1, #1
   386e8:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   386ec:	ldr	r3, [r4, #20]
   386f0:	cmp	fp, #1
   386f4:	sub	fp, fp, #2
   386f8:	add	r0, r6, r0
   386fc:	add	r0, r3, r0
   38700:	str	r0, [r4, #20]
   38704:	beq	38684 <flatcc_json_printer_int16_vector_field@@Base+0xa0>
   38708:	mov	r6, #44	; 0x2c
   3870c:	mov	r8, #10
   38710:	mov	r7, #32
   38714:	mov	r9, #45	; 0x2d
   38718:	b	3876c <flatcc_json_printer_int16_vector_field@@Base+0x188>
   3871c:	ldr	r1, [r4, #20]
   38720:	ldr	r3, [r4, #16]
   38724:	cmp	r1, r3
   38728:	bcs	387d4 <flatcc_json_printer_int16_vector_field@@Base+0x1f0>
   3872c:	ldrsh	r0, [r5, #2]!
   38730:	cmp	r0, #0
   38734:	lsr	sl, r0, #31
   38738:	rsblt	r0, r0, #0
   3873c:	strblt	r9, [r1]
   38740:	sxthlt	r0, r0
   38744:	addlt	r1, r1, #1
   38748:	uxth	r0, r0
   3874c:	bl	2ff50 <flatcc_json_parser_table_as_root@@Base+0x10>
   38750:	ldr	r2, [r4, #20]
   38754:	cmp	fp, #0
   38758:	sub	fp, fp, #1
   3875c:	add	r0, sl, r0
   38760:	add	r0, r2, r0
   38764:	str	r0, [r4, #20]
   38768:	beq	38684 <flatcc_json_printer_int16_vector_field@@Base+0xa0>
   3876c:	add	r3, r0, #1
   38770:	str	r3, [r4, #20]
   38774:	strb	r6, [r0]
   38778:	ldrb	r3, [r4, #25]
   3877c:	cmp	r3, #0
   38780:	beq	3871c <flatcc_json_printer_int16_vector_field@@Base+0x138>
   38784:	ldr	r3, [r4, #20]
   38788:	mov	r1, r7
   3878c:	add	r2, r3, #1
   38790:	str	r2, [r4, #20]
   38794:	strb	r8, [r3]
   38798:	ldrb	r3, [r4, #25]
   3879c:	ldr	r2, [r4, #32]
   387a0:	ldr	ip, [r4, #20]
   387a4:	ldr	lr, [r4, #16]
   387a8:	mul	sl, r2, r3
   387ac:	mov	r0, ip
   387b0:	add	ip, ip, sl
   387b4:	cmp	lr, ip
   387b8:	mov	r2, sl
   387bc:	bcc	387ec <flatcc_json_printer_int16_vector_field@@Base+0x208>
   387c0:	bl	145bc <memset@plt>
   387c4:	ldr	r1, [r4, #20]
   387c8:	add	r1, r1, sl
   387cc:	str	r1, [r4, #20]
   387d0:	b	3872c <flatcc_json_printer_int16_vector_field@@Base+0x148>
   387d4:	mov	r1, #0
   387d8:	ldr	r3, [r4, #44]	; 0x2c
   387dc:	mov	r0, r4
   387e0:	blx	r3
   387e4:	ldr	r1, [r4, #20]
   387e8:	b	3872c <flatcc_json_printer_int16_vector_field@@Base+0x148>
   387ec:	mov	r1, sl
   387f0:	mov	r0, r4
   387f4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   387f8:	ldr	r1, [r4, #20]
   387fc:	b	3872c <flatcc_json_printer_int16_vector_field@@Base+0x148>
   38800:	add	r2, r0, #1
   38804:	mov	r3, #10
   38808:	str	r2, [r4, #20]
   3880c:	strb	r3, [r0]
   38810:	ldr	r3, [r4, #32]
   38814:	ldrb	r5, [r4, #25]
   38818:	sub	r3, r3, #1
   3881c:	ldr	r0, [r4, #20]
   38820:	ldr	r2, [r4, #16]
   38824:	mul	r5, r3, r5
   38828:	str	r3, [r4, #32]
   3882c:	add	r3, r0, r5
   38830:	cmp	r2, r3
   38834:	bcc	38850 <flatcc_json_printer_int16_vector_field@@Base+0x26c>
   38838:	mov	r2, r5
   3883c:	mov	r1, #32
   38840:	bl	145bc <memset@plt>
   38844:	ldr	r0, [r4, #20]
   38848:	add	r0, r0, r5
   3884c:	b	38690 <flatcc_json_printer_int16_vector_field@@Base+0xac>
   38850:	mov	r0, r4
   38854:	mov	r1, r5
   38858:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3885c:	ldr	r0, [r4, #20]
   38860:	b	38690 <flatcc_json_printer_int16_vector_field@@Base+0xac>
   38864:	ldr	r3, [r4, #20]
   38868:	mov	r2, #10
   3886c:	add	r1, r3, #1
   38870:	str	r1, [r4, #20]
   38874:	mov	r0, r4
   38878:	strb	r2, [r3]
   3887c:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   38880:	ldr	r1, [r4, #20]
   38884:	b	386c0 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   38888:	mov	r1, r3
   3888c:	mov	r0, r4
   38890:	ldr	r3, [r4, #44]	; 0x2c
   38894:	blx	r3
   38898:	ldr	r1, [r4, #20]
   3889c:	b	386c0 <flatcc_json_printer_int16_vector_field@@Base+0xdc>

000388a0 <flatcc_json_printer_int32_vector_field@@Base>:
   388a0:	add	r2, r2, #2
   388a4:	ldr	ip, [r1, #8]
   388a8:	lsl	r2, r2, #1
   388ac:	cmp	ip, r2
   388b0:	bxle	lr
   388b4:	ldr	ip, [r1, #4]
   388b8:	ldrh	ip, [ip, r2]
   388bc:	cmp	ip, #0
   388c0:	bxeq	lr
   388c4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   388c8:	ldr	lr, [r1]
   388cc:	adds	r6, lr, ip
   388d0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   388d4:	ldr	r2, [r1, #16]
   388d8:	cmp	r2, #0
   388dc:	add	r2, r2, #1
   388e0:	str	r2, [r1, #16]
   388e4:	ldrne	r2, [r0, #20]
   388e8:	movne	r1, #44	; 0x2c
   388ec:	addne	r4, r2, #1
   388f0:	strne	r4, [r0, #20]
   388f4:	strbne	r1, [r2]
   388f8:	mov	r1, r3
   388fc:	ldr	r3, [lr, ip]
   38900:	mov	r4, r0
   38904:	ldr	r2, [sp, #40]	; 0x28
   38908:	ldr	fp, [r6, r3]
   3890c:	add	r5, r6, r3
   38910:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   38914:	ldr	r3, [r4, #32]
   38918:	ldr	r2, [r4, #20]
   3891c:	add	r3, r3, #1
   38920:	add	r0, r2, #1
   38924:	mov	r1, #91	; 0x5b
   38928:	cmp	fp, #0
   3892c:	str	r3, [r4, #32]
   38930:	str	r0, [r4, #20]
   38934:	strb	r1, [r2]
   38938:	bne	38960 <flatcc_json_printer_int32_vector_field@@Base+0xc0>
   3893c:	ldr	r0, [r4, #20]
   38940:	ldrb	r3, [r4, #25]
   38944:	cmp	r3, #0
   38948:	bne	38aac <flatcc_json_printer_int32_vector_field@@Base+0x20c>
   3894c:	add	r2, r0, #1
   38950:	mov	r3, #93	; 0x5d
   38954:	str	r2, [r4, #20]
   38958:	strb	r3, [r0]
   3895c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38960:	ldrb	r3, [r4, #25]
   38964:	cmp	r3, #0
   38968:	bne	38b10 <flatcc_json_printer_int32_vector_field@@Base+0x270>
   3896c:	ldr	r1, [r4, #20]
   38970:	ldr	r2, [r4, #16]
   38974:	cmp	r1, r2
   38978:	bcs	38b34 <flatcc_json_printer_int32_vector_field@@Base+0x294>
   3897c:	ldr	r0, [r5, #4]
   38980:	add	r5, r5, #4
   38984:	cmp	r0, #0
   38988:	movlt	r3, #45	; 0x2d
   3898c:	strblt	r3, [r1]
   38990:	lsr	r6, r0, #31
   38994:	addlt	r1, r1, #1
   38998:	rsblt	r0, r0, #0
   3899c:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   389a0:	ldr	r3, [r4, #20]
   389a4:	cmp	fp, #1
   389a8:	sub	fp, fp, #2
   389ac:	add	r0, r6, r0
   389b0:	add	r0, r3, r0
   389b4:	str	r0, [r4, #20]
   389b8:	beq	38940 <flatcc_json_printer_int32_vector_field@@Base+0xa0>
   389bc:	mov	r6, #44	; 0x2c
   389c0:	mov	r8, #10
   389c4:	mov	r7, #32
   389c8:	mov	r9, #45	; 0x2d
   389cc:	b	38a18 <flatcc_json_printer_int32_vector_field@@Base+0x178>
   389d0:	ldr	r1, [r4, #20]
   389d4:	ldr	r3, [r4, #16]
   389d8:	cmp	r1, r3
   389dc:	bcs	38a80 <flatcc_json_printer_int32_vector_field@@Base+0x1e0>
   389e0:	ldr	r0, [r5, #4]!
   389e4:	cmp	r0, #0
   389e8:	lsr	sl, r0, #31
   389ec:	strblt	r9, [r1]
   389f0:	rsblt	r0, r0, #0
   389f4:	addlt	r1, r1, #1
   389f8:	bl	300d4 <flatcc_json_parser_table_as_root@@Base+0x194>
   389fc:	ldr	r2, [r4, #20]
   38a00:	cmp	fp, #0
   38a04:	sub	fp, fp, #1
   38a08:	add	r0, sl, r0
   38a0c:	add	r0, r2, r0
   38a10:	str	r0, [r4, #20]
   38a14:	beq	38940 <flatcc_json_printer_int32_vector_field@@Base+0xa0>
   38a18:	add	r3, r0, #1
   38a1c:	str	r3, [r4, #20]
   38a20:	strb	r6, [r0]
   38a24:	ldrb	r3, [r4, #25]
   38a28:	cmp	r3, #0
   38a2c:	beq	389d0 <flatcc_json_printer_int32_vector_field@@Base+0x130>
   38a30:	ldr	r3, [r4, #20]
   38a34:	mov	r1, r7
   38a38:	add	r2, r3, #1
   38a3c:	str	r2, [r4, #20]
   38a40:	strb	r8, [r3]
   38a44:	ldrb	r3, [r4, #25]
   38a48:	ldr	r2, [r4, #32]
   38a4c:	ldr	ip, [r4, #20]
   38a50:	ldr	lr, [r4, #16]
   38a54:	mul	sl, r2, r3
   38a58:	mov	r0, ip
   38a5c:	add	ip, ip, sl
   38a60:	cmp	lr, ip
   38a64:	mov	r2, sl
   38a68:	bcc	38a98 <flatcc_json_printer_int32_vector_field@@Base+0x1f8>
   38a6c:	bl	145bc <memset@plt>
   38a70:	ldr	r1, [r4, #20]
   38a74:	add	r1, r1, sl
   38a78:	str	r1, [r4, #20]
   38a7c:	b	389e0 <flatcc_json_printer_int32_vector_field@@Base+0x140>
   38a80:	mov	r1, #0
   38a84:	ldr	r3, [r4, #44]	; 0x2c
   38a88:	mov	r0, r4
   38a8c:	blx	r3
   38a90:	ldr	r1, [r4, #20]
   38a94:	b	389e0 <flatcc_json_printer_int32_vector_field@@Base+0x140>
   38a98:	mov	r1, sl
   38a9c:	mov	r0, r4
   38aa0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   38aa4:	ldr	r1, [r4, #20]
   38aa8:	b	389e0 <flatcc_json_printer_int32_vector_field@@Base+0x140>
   38aac:	add	r2, r0, #1
   38ab0:	mov	r3, #10
   38ab4:	str	r2, [r4, #20]
   38ab8:	strb	r3, [r0]
   38abc:	ldr	r3, [r4, #32]
   38ac0:	ldrb	r5, [r4, #25]
   38ac4:	sub	r3, r3, #1
   38ac8:	ldr	r0, [r4, #20]
   38acc:	ldr	r2, [r4, #16]
   38ad0:	mul	r5, r3, r5
   38ad4:	str	r3, [r4, #32]
   38ad8:	add	r3, r0, r5
   38adc:	cmp	r2, r3
   38ae0:	bcc	38afc <flatcc_json_printer_int32_vector_field@@Base+0x25c>
   38ae4:	mov	r2, r5
   38ae8:	mov	r1, #32
   38aec:	bl	145bc <memset@plt>
   38af0:	ldr	r0, [r4, #20]
   38af4:	add	r0, r0, r5
   38af8:	b	3894c <flatcc_json_printer_int32_vector_field@@Base+0xac>
   38afc:	mov	r0, r4
   38b00:	mov	r1, r5
   38b04:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   38b08:	ldr	r0, [r4, #20]
   38b0c:	b	3894c <flatcc_json_printer_int32_vector_field@@Base+0xac>
   38b10:	ldr	r3, [r4, #20]
   38b14:	mov	r2, #10
   38b18:	add	r1, r3, #1
   38b1c:	str	r1, [r4, #20]
   38b20:	mov	r0, r4
   38b24:	strb	r2, [r3]
   38b28:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   38b2c:	ldr	r1, [r4, #20]
   38b30:	b	3897c <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   38b34:	mov	r1, r3
   38b38:	mov	r0, r4
   38b3c:	ldr	r3, [r4, #44]	; 0x2c
   38b40:	blx	r3
   38b44:	ldr	r1, [r4, #20]
   38b48:	b	3897c <flatcc_json_printer_int32_vector_field@@Base+0xdc>

00038b4c <flatcc_json_printer_int64_vector_field@@Base>:
   38b4c:	add	r2, r2, #2
   38b50:	ldr	ip, [r1, #8]
   38b54:	lsl	r2, r2, #1
   38b58:	cmp	ip, r2
   38b5c:	bxle	lr
   38b60:	ldr	ip, [r1, #4]
   38b64:	ldrh	ip, [ip, r2]
   38b68:	cmp	ip, #0
   38b6c:	bxeq	lr
   38b70:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38b74:	ldr	lr, [r1]
   38b78:	adds	r6, lr, ip
   38b7c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38b80:	ldr	r2, [r1, #16]
   38b84:	cmp	r2, #0
   38b88:	add	r2, r2, #1
   38b8c:	str	r2, [r1, #16]
   38b90:	ldrne	r2, [r0, #20]
   38b94:	movne	r1, #44	; 0x2c
   38b98:	addne	r4, r2, #1
   38b9c:	strne	r4, [r0, #20]
   38ba0:	strbne	r1, [r2]
   38ba4:	mov	r1, r3
   38ba8:	ldr	r3, [lr, ip]
   38bac:	mov	r4, r0
   38bb0:	ldr	r2, [sp, #40]	; 0x28
   38bb4:	ldr	fp, [r6, r3]
   38bb8:	add	r5, r6, r3
   38bbc:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   38bc0:	ldr	r3, [r4, #32]
   38bc4:	ldr	r2, [r4, #20]
   38bc8:	add	r3, r3, #1
   38bcc:	add	r0, r2, #1
   38bd0:	mov	r1, #91	; 0x5b
   38bd4:	cmp	fp, #0
   38bd8:	str	r3, [r4, #32]
   38bdc:	str	r0, [r4, #20]
   38be0:	strb	r1, [r2]
   38be4:	bne	38c0c <flatcc_json_printer_int64_vector_field@@Base+0xc0>
   38be8:	ldr	r0, [r4, #20]
   38bec:	ldrb	r3, [r4, #25]
   38bf0:	cmp	r3, #0
   38bf4:	bne	38d60 <flatcc_json_printer_int64_vector_field@@Base+0x214>
   38bf8:	add	r2, r0, #1
   38bfc:	mov	r3, #93	; 0x5d
   38c00:	str	r2, [r4, #20]
   38c04:	strb	r3, [r0]
   38c08:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38c0c:	ldrb	r1, [r4, #25]
   38c10:	cmp	r1, #0
   38c14:	bne	38dc4 <flatcc_json_printer_int64_vector_field@@Base+0x278>
   38c18:	ldr	r2, [r4, #20]
   38c1c:	ldr	r3, [r4, #16]
   38c20:	cmp	r2, r3
   38c24:	bcs	38e00 <flatcc_json_printer_int64_vector_field@@Base+0x2b4>
   38c28:	ldrd	r0, [r5, #4]
   38c2c:	add	r5, r5, #4
   38c30:	cmp	r0, #0
   38c34:	sbcs	r3, r1, #0
   38c38:	lsr	r6, r1, #31
   38c3c:	blt	38de8 <flatcc_json_printer_int64_vector_field@@Base+0x29c>
   38c40:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   38c44:	ldr	r3, [r4, #20]
   38c48:	cmp	fp, #1
   38c4c:	sub	fp, fp, #2
   38c50:	add	r0, r6, r0
   38c54:	add	r0, r3, r0
   38c58:	str	r0, [r4, #20]
   38c5c:	beq	38bec <flatcc_json_printer_int64_vector_field@@Base+0xa0>
   38c60:	mov	r6, #44	; 0x2c
   38c64:	mov	r8, #10
   38c68:	mov	r7, #32
   38c6c:	mov	r9, #45	; 0x2d
   38c70:	b	38cb8 <flatcc_json_printer_int64_vector_field@@Base+0x16c>
   38c74:	ldr	r2, [r4, #20]
   38c78:	ldr	r3, [r4, #16]
   38c7c:	cmp	r2, r3
   38c80:	bcs	38d34 <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   38c84:	ldrd	r0, [r5, #8]!
   38c88:	cmp	r0, #0
   38c8c:	sbcs	r3, r1, #0
   38c90:	lsr	sl, r1, #31
   38c94:	blt	38d20 <flatcc_json_printer_int64_vector_field@@Base+0x1d4>
   38c98:	bl	30440 <flatcc_json_parser_table_as_root@@Base+0x500>
   38c9c:	ldr	r2, [r4, #20]
   38ca0:	cmp	fp, #0
   38ca4:	sub	fp, fp, #1
   38ca8:	add	r0, sl, r0
   38cac:	add	r0, r2, r0
   38cb0:	str	r0, [r4, #20]
   38cb4:	beq	38bec <flatcc_json_printer_int64_vector_field@@Base+0xa0>
   38cb8:	add	r3, r0, #1
   38cbc:	str	r3, [r4, #20]
   38cc0:	strb	r6, [r0]
   38cc4:	ldrb	r3, [r4, #25]
   38cc8:	cmp	r3, #0
   38ccc:	beq	38c74 <flatcc_json_printer_int64_vector_field@@Base+0x128>
   38cd0:	ldr	r3, [r4, #20]
   38cd4:	mov	r1, r7
   38cd8:	add	r2, r3, #1
   38cdc:	str	r2, [r4, #20]
   38ce0:	strb	r8, [r3]
   38ce4:	ldrb	r2, [r4, #25]
   38ce8:	ldr	r3, [r4, #32]
   38cec:	ldr	ip, [r4, #20]
   38cf0:	ldr	lr, [r4, #16]
   38cf4:	mul	sl, r3, r2
   38cf8:	mov	r0, ip
   38cfc:	add	ip, ip, sl
   38d00:	cmp	lr, ip
   38d04:	mov	r2, sl
   38d08:	bcc	38d4c <flatcc_json_printer_int64_vector_field@@Base+0x200>
   38d0c:	bl	145bc <memset@plt>
   38d10:	ldr	r2, [r4, #20]
   38d14:	add	r2, r2, sl
   38d18:	str	r2, [r4, #20]
   38d1c:	b	38c84 <flatcc_json_printer_int64_vector_field@@Base+0x138>
   38d20:	rsbs	r0, r0, #0
   38d24:	strb	r9, [r2]
   38d28:	rsc	r1, r1, #0
   38d2c:	add	r2, r2, #1
   38d30:	b	38c98 <flatcc_json_printer_int64_vector_field@@Base+0x14c>
   38d34:	ldr	r3, [r4, #44]	; 0x2c
   38d38:	mov	r1, #0
   38d3c:	mov	r0, r4
   38d40:	blx	r3
   38d44:	ldr	r2, [r4, #20]
   38d48:	b	38c84 <flatcc_json_printer_int64_vector_field@@Base+0x138>
   38d4c:	mov	r1, sl
   38d50:	mov	r0, r4
   38d54:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   38d58:	ldr	r2, [r4, #20]
   38d5c:	b	38c84 <flatcc_json_printer_int64_vector_field@@Base+0x138>
   38d60:	add	r2, r0, #1
   38d64:	mov	r3, #10
   38d68:	str	r2, [r4, #20]
   38d6c:	strb	r3, [r0]
   38d70:	ldr	r3, [r4, #32]
   38d74:	ldrb	r5, [r4, #25]
   38d78:	sub	r3, r3, #1
   38d7c:	ldr	r0, [r4, #20]
   38d80:	ldr	r2, [r4, #16]
   38d84:	mul	r5, r3, r5
   38d88:	str	r3, [r4, #32]
   38d8c:	add	r3, r0, r5
   38d90:	cmp	r2, r3
   38d94:	bcc	38db0 <flatcc_json_printer_int64_vector_field@@Base+0x264>
   38d98:	mov	r2, r5
   38d9c:	mov	r1, #32
   38da0:	bl	145bc <memset@plt>
   38da4:	ldr	r0, [r4, #20]
   38da8:	add	r0, r0, r5
   38dac:	b	38bf8 <flatcc_json_printer_int64_vector_field@@Base+0xac>
   38db0:	mov	r0, r4
   38db4:	mov	r1, r5
   38db8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   38dbc:	ldr	r0, [r4, #20]
   38dc0:	b	38bf8 <flatcc_json_printer_int64_vector_field@@Base+0xac>
   38dc4:	ldr	r3, [r4, #20]
   38dc8:	mov	r2, #10
   38dcc:	add	r1, r3, #1
   38dd0:	str	r1, [r4, #20]
   38dd4:	mov	r0, r4
   38dd8:	strb	r2, [r3]
   38ddc:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   38de0:	ldr	r2, [r4, #20]
   38de4:	b	38c28 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   38de8:	mov	r3, #45	; 0x2d
   38dec:	rsbs	r0, r0, #0
   38df0:	strb	r3, [r2]
   38df4:	rsc	r1, r1, #0
   38df8:	add	r2, r2, #1
   38dfc:	b	38c40 <flatcc_json_printer_int64_vector_field@@Base+0xf4>
   38e00:	ldr	r3, [r4, #44]	; 0x2c
   38e04:	mov	r0, r4
   38e08:	blx	r3
   38e0c:	ldr	r2, [r4, #20]
   38e10:	b	38c28 <flatcc_json_printer_int64_vector_field@@Base+0xdc>

00038e14 <flatcc_json_printer_bool_vector_field@@Base>:
   38e14:	add	r2, r2, #2
   38e18:	ldr	ip, [r1, #8]
   38e1c:	lsl	r2, r2, #1
   38e20:	cmp	ip, r2
   38e24:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38e28:	ldr	r7, [sp, #40]	; 0x28
   38e2c:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e30:	ldr	ip, [r1, #4]
   38e34:	ldrh	ip, [ip, r2]
   38e38:	cmp	ip, #0
   38e3c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e40:	ldr	r5, [r1]
   38e44:	adds	lr, r5, ip
   38e48:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e4c:	ldr	r2, [r1, #16]
   38e50:	mov	r8, r3
   38e54:	cmp	r2, #0
   38e58:	add	r2, r2, #1
   38e5c:	str	r2, [r1, #16]
   38e60:	ldrne	r2, [r0, #20]
   38e64:	movne	r1, #44	; 0x2c
   38e68:	addne	r4, r2, #1
   38e6c:	strne	r4, [r0, #20]
   38e70:	strbne	r1, [r2]
   38e74:	ldrb	r1, [r0, #25]
   38e78:	ldr	r3, [r5, ip]
   38e7c:	mov	r4, r0
   38e80:	cmp	r1, #0
   38e84:	add	r6, lr, r3
   38e88:	ldr	r5, [lr, r3]
   38e8c:	ldr	r3, [r0, #20]
   38e90:	bne	39114 <flatcc_json_printer_bool_vector_field@@Base+0x300>
   38e94:	ldr	r2, [r0, #16]
   38e98:	cmp	r3, r2
   38e9c:	bcc	38eac <flatcc_json_printer_bool_vector_field@@Base+0x98>
   38ea0:	ldr	r3, [r0, #44]	; 0x2c
   38ea4:	blx	r3
   38ea8:	ldr	r3, [r4, #20]
   38eac:	mov	r2, #34	; 0x22
   38eb0:	strb	r2, [r3]
   38eb4:	ldrb	r3, [r4, #26]
   38eb8:	ldr	r0, [r4, #20]
   38ebc:	ldr	r2, [r4, #16]
   38ec0:	cmp	r3, #0
   38ec4:	addeq	r0, r0, #1
   38ec8:	add	r3, r0, r7
   38ecc:	cmp	r2, r3
   38ed0:	str	r0, [r4, #20]
   38ed4:	bhi	39094 <flatcc_json_printer_bool_vector_field@@Base+0x280>
   38ed8:	mov	r2, r7
   38edc:	mov	r1, r8
   38ee0:	mov	r0, r4
   38ee4:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   38ee8:	ldr	r7, [r4, #20]
   38eec:	mov	r3, #34	; 0x22
   38ef0:	strb	r3, [r7]
   38ef4:	ldr	r1, [r4, #20]
   38ef8:	ldrb	r3, [r4, #26]
   38efc:	clz	r3, r3
   38f00:	lsr	r3, r3, #5
   38f04:	add	r2, r1, r3
   38f08:	add	r2, r2, #1
   38f0c:	mov	r0, #58	; 0x3a
   38f10:	str	r2, [r4, #20]
   38f14:	strb	r0, [r1, r3]
   38f18:	ldr	r3, [r4, #20]
   38f1c:	mov	r1, #32
   38f20:	mov	lr, #91	; 0x5b
   38f24:	strb	r1, [r3]
   38f28:	ldrb	r3, [r4, #25]
   38f2c:	ldr	ip, [r4, #20]
   38f30:	ldr	r2, [r4, #32]
   38f34:	adds	r3, r3, #0
   38f38:	movne	r3, #1
   38f3c:	add	r0, ip, r3
   38f40:	add	r0, r0, #1
   38f44:	add	r2, r2, #1
   38f48:	cmp	r5, #0
   38f4c:	str	r0, [r4, #20]
   38f50:	str	r2, [r4, #32]
   38f54:	strb	lr, [ip, r3]
   38f58:	bne	38f80 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   38f5c:	ldr	r0, [r4, #20]
   38f60:	ldrb	r3, [r4, #25]
   38f64:	cmp	r3, #0
   38f68:	bne	390b0 <flatcc_json_printer_bool_vector_field@@Base+0x29c>
   38f6c:	add	r2, r0, #1
   38f70:	mov	r3, #93	; 0x5d
   38f74:	str	r2, [r4, #20]
   38f78:	strb	r3, [r0]
   38f7c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38f80:	ldrb	r3, [r4, #25]
   38f84:	cmp	r3, #0
   38f88:	bne	39160 <flatcc_json_printer_bool_vector_field@@Base+0x34c>
   38f8c:	ldr	r1, [r4, #20]
   38f90:	ldr	r2, [r4, #16]
   38f94:	cmp	r1, r2
   38f98:	bcs	391ac <flatcc_json_printer_bool_vector_field@@Base+0x398>
   38f9c:	ldrb	r0, [r6, #4]
   38fa0:	bl	3118c <flatcc_json_parser_table_as_root@@Base+0x124c>
   38fa4:	ldr	r3, [r4, #20]
   38fa8:	cmp	r5, #1
   38fac:	add	fp, r6, #5
   38fb0:	add	r0, r3, r0
   38fb4:	str	r0, [r4, #20]
   38fb8:	beq	38f60 <flatcc_json_printer_bool_vector_field@@Base+0x14c>
   38fbc:	add	r5, r5, #4
   38fc0:	mov	r7, #44	; 0x2c
   38fc4:	mov	r9, #10
   38fc8:	mov	r8, #32
   38fcc:	b	39000 <flatcc_json_printer_bool_vector_field@@Base+0x1ec>
   38fd0:	ldr	r1, [r4, #20]
   38fd4:	ldr	r3, [r4, #16]
   38fd8:	cmp	r1, r3
   38fdc:	bcs	39068 <flatcc_json_printer_bool_vector_field@@Base+0x254>
   38fe0:	ldrb	r0, [fp], #1
   38fe4:	bl	3118c <flatcc_json_parser_table_as_root@@Base+0x124c>
   38fe8:	ldr	r3, [r4, #20]
   38fec:	sub	r2, r5, fp
   38ff0:	cmn	r6, r2
   38ff4:	add	r0, r3, r0
   38ff8:	str	r0, [r4, #20]
   38ffc:	beq	38f60 <flatcc_json_printer_bool_vector_field@@Base+0x14c>
   39000:	add	r3, r0, #1
   39004:	str	r3, [r4, #20]
   39008:	strb	r7, [r0]
   3900c:	ldrb	r3, [r4, #25]
   39010:	cmp	r3, #0
   39014:	beq	38fd0 <flatcc_json_printer_bool_vector_field@@Base+0x1bc>
   39018:	ldr	r3, [r4, #20]
   3901c:	mov	r1, r8
   39020:	add	r2, r3, #1
   39024:	str	r2, [r4, #20]
   39028:	strb	r9, [r3]
   3902c:	ldrb	r3, [r4, #25]
   39030:	ldr	r2, [r4, #32]
   39034:	ldr	ip, [r4, #20]
   39038:	ldr	lr, [r4, #16]
   3903c:	mul	sl, r2, r3
   39040:	mov	r0, ip
   39044:	add	ip, ip, sl
   39048:	cmp	lr, ip
   3904c:	mov	r2, sl
   39050:	bcc	39080 <flatcc_json_printer_bool_vector_field@@Base+0x26c>
   39054:	bl	145bc <memset@plt>
   39058:	ldr	r1, [r4, #20]
   3905c:	add	r1, r1, sl
   39060:	str	r1, [r4, #20]
   39064:	b	38fe0 <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   39068:	mov	r1, #0
   3906c:	ldr	r3, [r4, #44]	; 0x2c
   39070:	mov	r0, r4
   39074:	blx	r3
   39078:	ldr	r1, [r4, #20]
   3907c:	b	38fe0 <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   39080:	mov	r1, sl
   39084:	mov	r0, r4
   39088:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3908c:	ldr	r1, [r4, #20]
   39090:	b	38fe0 <flatcc_json_printer_bool_vector_field@@Base+0x1cc>
   39094:	mov	r2, r7
   39098:	mov	r1, r8
   3909c:	bl	14544 <memcpy@plt>
   390a0:	ldr	r3, [r4, #20]
   390a4:	add	r7, r3, r7
   390a8:	str	r7, [r4, #20]
   390ac:	b	38eec <flatcc_json_printer_bool_vector_field@@Base+0xd8>
   390b0:	add	r2, r0, #1
   390b4:	mov	r3, #10
   390b8:	str	r2, [r4, #20]
   390bc:	strb	r3, [r0]
   390c0:	ldr	r3, [r4, #32]
   390c4:	ldrb	r5, [r4, #25]
   390c8:	sub	r3, r3, #1
   390cc:	ldr	r0, [r4, #20]
   390d0:	ldr	r2, [r4, #16]
   390d4:	mul	r5, r3, r5
   390d8:	str	r3, [r4, #32]
   390dc:	add	r3, r0, r5
   390e0:	cmp	r2, r3
   390e4:	bcc	39100 <flatcc_json_printer_bool_vector_field@@Base+0x2ec>
   390e8:	mov	r2, r5
   390ec:	mov	r1, #32
   390f0:	bl	145bc <memset@plt>
   390f4:	ldr	r0, [r4, #20]
   390f8:	add	r0, r0, r5
   390fc:	b	38f6c <flatcc_json_printer_bool_vector_field@@Base+0x158>
   39100:	mov	r0, r4
   39104:	mov	r1, r5
   39108:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3910c:	ldr	r0, [r4, #20]
   39110:	b	38f6c <flatcc_json_printer_bool_vector_field@@Base+0x158>
   39114:	mov	r2, #10
   39118:	add	r1, r3, #1
   3911c:	str	r1, [r0, #20]
   39120:	strb	r2, [r3]
   39124:	ldrb	r3, [r0, #25]
   39128:	ldr	r9, [r0, #32]
   3912c:	ldr	r0, [r0, #20]
   39130:	ldr	r2, [r4, #16]
   39134:	mul	r9, r9, r3
   39138:	add	r3, r0, r9
   3913c:	cmp	r2, r3
   39140:	bcc	391c4 <flatcc_json_printer_bool_vector_field@@Base+0x3b0>
   39144:	mov	r2, r9
   39148:	mov	r1, #32
   3914c:	bl	145bc <memset@plt>
   39150:	ldr	r3, [r4, #20]
   39154:	add	r3, r3, r9
   39158:	str	r3, [r4, #20]
   3915c:	b	38eac <flatcc_json_printer_bool_vector_field@@Base+0x98>
   39160:	ldr	r3, [r4, #20]
   39164:	mov	r2, #10
   39168:	add	r0, r3, #1
   3916c:	str	r0, [r4, #20]
   39170:	strb	r2, [r3]
   39174:	ldrb	r3, [r4, #25]
   39178:	ldr	r7, [r4, #32]
   3917c:	ldr	r0, [r4, #20]
   39180:	ldr	r2, [r4, #16]
   39184:	mul	r7, r7, r3
   39188:	add	r3, r0, r7
   3918c:	cmp	r2, r3
   39190:	bcc	391d8 <flatcc_json_printer_bool_vector_field@@Base+0x3c4>
   39194:	mov	r2, r7
   39198:	bl	145bc <memset@plt>
   3919c:	ldr	r1, [r4, #20]
   391a0:	add	r1, r1, r7
   391a4:	str	r1, [r4, #20]
   391a8:	b	38f9c <flatcc_json_printer_bool_vector_field@@Base+0x188>
   391ac:	mov	r1, r3
   391b0:	mov	r0, r4
   391b4:	ldr	r3, [r4, #44]	; 0x2c
   391b8:	blx	r3
   391bc:	ldr	r1, [r4, #20]
   391c0:	b	38f9c <flatcc_json_printer_bool_vector_field@@Base+0x188>
   391c4:	mov	r1, r9
   391c8:	mov	r0, r4
   391cc:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   391d0:	ldr	r3, [r4, #20]
   391d4:	b	38eac <flatcc_json_printer_bool_vector_field@@Base+0x98>
   391d8:	mov	r1, r7
   391dc:	mov	r0, r4
   391e0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   391e4:	ldr	r1, [r4, #20]
   391e8:	b	38f9c <flatcc_json_printer_bool_vector_field@@Base+0x188>

000391ec <flatcc_json_printer_float_vector_field@@Base>:
   391ec:	add	r2, r2, #2
   391f0:	ldr	ip, [r1, #8]
   391f4:	lsl	r2, r2, #1
   391f8:	cmp	ip, r2
   391fc:	bxle	lr
   39200:	ldr	ip, [r1, #4]
   39204:	ldrh	ip, [ip, r2]
   39208:	cmp	ip, #0
   3920c:	bxeq	lr
   39210:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39214:	ldr	r5, [r1]
   39218:	adds	lr, r5, ip
   3921c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39220:	ldr	r2, [r1, #16]
   39224:	cmp	r2, #0
   39228:	add	r2, r2, #1
   3922c:	str	r2, [r1, #16]
   39230:	ldrne	r2, [r0, #20]
   39234:	movne	r1, #44	; 0x2c
   39238:	addne	r4, r2, #1
   3923c:	strne	r4, [r0, #20]
   39240:	strbne	r1, [r2]
   39244:	mov	r1, r3
   39248:	ldr	r3, [r5, ip]
   3924c:	mov	r4, r0
   39250:	ldr	r2, [sp, #40]	; 0x28
   39254:	ldr	r7, [lr, r3]
   39258:	add	r6, lr, r3
   3925c:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   39260:	ldr	r3, [r4, #32]
   39264:	ldr	r2, [r4, #20]
   39268:	add	r3, r3, #1
   3926c:	add	r0, r2, #1
   39270:	mov	r1, #91	; 0x5b
   39274:	cmp	r7, #0
   39278:	str	r3, [r4, #32]
   3927c:	str	r0, [r4, #20]
   39280:	strb	r1, [r2]
   39284:	bne	392ac <flatcc_json_printer_float_vector_field@@Base+0xc0>
   39288:	ldr	r0, [r4, #20]
   3928c:	ldrb	r3, [r4, #25]
   39290:	cmp	r3, #0
   39294:	bne	393cc <flatcc_json_printer_float_vector_field@@Base+0x1e0>
   39298:	add	r2, r0, #1
   3929c:	mov	r3, #93	; 0x5d
   392a0:	str	r2, [r4, #20]
   392a4:	strb	r3, [r0]
   392a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   392ac:	ldrb	r1, [r4, #25]
   392b0:	cmp	r1, #0
   392b4:	bne	39430 <flatcc_json_printer_float_vector_field@@Base+0x244>
   392b8:	ldr	r0, [r4, #20]
   392bc:	ldr	r3, [r4, #16]
   392c0:	cmp	r0, r3
   392c4:	bcs	39454 <flatcc_json_printer_float_vector_field@@Base+0x268>
   392c8:	vldr	s0, [r6, #4]
   392cc:	sub	r5, r7, #2
   392d0:	add	r6, r6, #8
   392d4:	vcvt.f64.f32	d0, s0
   392d8:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   392dc:	ldr	r3, [r4, #20]
   392e0:	cmp	r7, #1
   392e4:	add	r0, r3, r0
   392e8:	str	r0, [r4, #20]
   392ec:	beq	3928c <flatcc_json_printer_float_vector_field@@Base+0xa0>
   392f0:	mov	r7, #44	; 0x2c
   392f4:	mov	sl, #0
   392f8:	mov	r9, #10
   392fc:	mov	r8, #32
   39300:	b	39338 <flatcc_json_printer_float_vector_field@@Base+0x14c>
   39304:	ldr	r0, [r4, #20]
   39308:	ldr	r3, [r4, #16]
   3930c:	cmp	r0, r3
   39310:	bcs	393a0 <flatcc_json_printer_float_vector_field@@Base+0x1b4>
   39314:	vldmia	r6!, {s0}
   39318:	vcvt.f64.f32	d0, s0
   3931c:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   39320:	ldr	r3, [r4, #20]
   39324:	cmp	r5, #0
   39328:	sub	r5, r5, #1
   3932c:	add	r0, r3, r0
   39330:	str	r0, [r4, #20]
   39334:	beq	3928c <flatcc_json_printer_float_vector_field@@Base+0xa0>
   39338:	add	r3, r0, #1
   3933c:	str	r3, [r4, #20]
   39340:	strb	r7, [r0]
   39344:	ldrb	r3, [r4, #25]
   39348:	cmp	r3, #0
   3934c:	beq	39304 <flatcc_json_printer_float_vector_field@@Base+0x118>
   39350:	ldr	r3, [r4, #20]
   39354:	mov	r1, r8
   39358:	add	r2, r3, #1
   3935c:	str	r2, [r4, #20]
   39360:	strb	r9, [r3]
   39364:	ldrb	r0, [r4, #25]
   39368:	ldr	fp, [r4, #32]
   3936c:	ldr	r3, [r4, #20]
   39370:	ldr	ip, [r4, #16]
   39374:	mul	fp, fp, r0
   39378:	mov	r0, r3
   3937c:	add	r3, r3, fp
   39380:	cmp	ip, r3
   39384:	mov	r2, fp
   39388:	bcc	393b8 <flatcc_json_printer_float_vector_field@@Base+0x1cc>
   3938c:	bl	145bc <memset@plt>
   39390:	ldr	r0, [r4, #20]
   39394:	add	r0, r0, fp
   39398:	str	r0, [r4, #20]
   3939c:	b	39314 <flatcc_json_printer_float_vector_field@@Base+0x128>
   393a0:	mov	r0, r4
   393a4:	ldr	r3, [r4, #44]	; 0x2c
   393a8:	mov	r1, sl
   393ac:	blx	r3
   393b0:	ldr	r0, [r4, #20]
   393b4:	b	39314 <flatcc_json_printer_float_vector_field@@Base+0x128>
   393b8:	mov	r0, r4
   393bc:	mov	r1, fp
   393c0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   393c4:	ldr	r0, [r4, #20]
   393c8:	b	39314 <flatcc_json_printer_float_vector_field@@Base+0x128>
   393cc:	add	r2, r0, #1
   393d0:	mov	r3, #10
   393d4:	str	r2, [r4, #20]
   393d8:	strb	r3, [r0]
   393dc:	ldr	r3, [r4, #32]
   393e0:	ldrb	r5, [r4, #25]
   393e4:	sub	r3, r3, #1
   393e8:	ldr	r0, [r4, #20]
   393ec:	ldr	r2, [r4, #16]
   393f0:	mul	r5, r3, r5
   393f4:	str	r3, [r4, #32]
   393f8:	add	r3, r0, r5
   393fc:	cmp	r2, r3
   39400:	bcc	3941c <flatcc_json_printer_float_vector_field@@Base+0x230>
   39404:	mov	r2, r5
   39408:	mov	r1, #32
   3940c:	bl	145bc <memset@plt>
   39410:	ldr	r0, [r4, #20]
   39414:	add	r0, r0, r5
   39418:	b	39298 <flatcc_json_printer_float_vector_field@@Base+0xac>
   3941c:	mov	r0, r4
   39420:	mov	r1, r5
   39424:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   39428:	ldr	r0, [r4, #20]
   3942c:	b	39298 <flatcc_json_printer_float_vector_field@@Base+0xac>
   39430:	ldr	r3, [r4, #20]
   39434:	mov	r2, #10
   39438:	add	r1, r3, #1
   3943c:	str	r1, [r4, #20]
   39440:	mov	r0, r4
   39444:	strb	r2, [r3]
   39448:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3944c:	ldr	r0, [r4, #20]
   39450:	b	392c8 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   39454:	mov	r0, r4
   39458:	ldr	r3, [r4, #44]	; 0x2c
   3945c:	blx	r3
   39460:	ldr	r0, [r4, #20]
   39464:	b	392c8 <flatcc_json_printer_float_vector_field@@Base+0xdc>

00039468 <flatcc_json_printer_double_vector_field@@Base>:
   39468:	add	r2, r2, #2
   3946c:	ldr	ip, [r1, #8]
   39470:	lsl	r2, r2, #1
   39474:	cmp	ip, r2
   39478:	bxle	lr
   3947c:	ldr	ip, [r1, #4]
   39480:	ldrh	ip, [ip, r2]
   39484:	cmp	ip, #0
   39488:	bxeq	lr
   3948c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39490:	ldr	r5, [r1]
   39494:	adds	lr, r5, ip
   39498:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3949c:	ldr	r2, [r1, #16]
   394a0:	cmp	r2, #0
   394a4:	add	r2, r2, #1
   394a8:	str	r2, [r1, #16]
   394ac:	ldrne	r2, [r0, #20]
   394b0:	movne	r1, #44	; 0x2c
   394b4:	addne	r4, r2, #1
   394b8:	strne	r4, [r0, #20]
   394bc:	strbne	r1, [r2]
   394c0:	mov	r1, r3
   394c4:	ldr	r3, [r5, ip]
   394c8:	mov	r4, r0
   394cc:	ldr	r2, [sp, #40]	; 0x28
   394d0:	ldr	sl, [lr, r3]
   394d4:	add	r5, lr, r3
   394d8:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   394dc:	ldr	r3, [r4, #32]
   394e0:	ldr	r2, [r4, #20]
   394e4:	add	r3, r3, #1
   394e8:	add	r0, r2, #1
   394ec:	mov	r1, #91	; 0x5b
   394f0:	cmp	sl, #0
   394f4:	str	r3, [r4, #32]
   394f8:	str	r0, [r4, #20]
   394fc:	strb	r1, [r2]
   39500:	bne	39528 <flatcc_json_printer_double_vector_field@@Base+0xc0>
   39504:	ldr	r0, [r4, #20]
   39508:	ldrb	r3, [r4, #25]
   3950c:	cmp	r3, #0
   39510:	bne	39640 <flatcc_json_printer_double_vector_field@@Base+0x1d8>
   39514:	add	r2, r0, #1
   39518:	mov	r3, #93	; 0x5d
   3951c:	str	r2, [r4, #20]
   39520:	strb	r3, [r0]
   39524:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39528:	ldrb	r1, [r4, #25]
   3952c:	cmp	r1, #0
   39530:	bne	396a4 <flatcc_json_printer_double_vector_field@@Base+0x23c>
   39534:	ldr	r0, [r4, #20]
   39538:	ldr	r3, [r4, #16]
   3953c:	cmp	r0, r3
   39540:	bcs	396c8 <flatcc_json_printer_double_vector_field@@Base+0x260>
   39544:	vldr	d0, [r5, #4]
   39548:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   3954c:	ldr	r3, [r4, #20]
   39550:	cmp	sl, #1
   39554:	add	r5, r5, #12
   39558:	sub	sl, sl, #2
   3955c:	add	r0, r3, r0
   39560:	str	r0, [r4, #20]
   39564:	beq	39508 <flatcc_json_printer_double_vector_field@@Base+0xa0>
   39568:	mov	r6, #44	; 0x2c
   3956c:	mov	r9, #0
   39570:	mov	r8, #10
   39574:	mov	r7, #32
   39578:	b	395ac <flatcc_json_printer_double_vector_field@@Base+0x144>
   3957c:	ldr	r0, [r4, #20]
   39580:	ldr	r3, [r4, #16]
   39584:	cmp	r0, r3
   39588:	bcs	39614 <flatcc_json_printer_double_vector_field@@Base+0x1ac>
   3958c:	vldmia	r5!, {d0}
   39590:	bl	31458 <flatcc_json_parser_table_as_root@@Base+0x1518>
   39594:	ldr	r3, [r4, #20]
   39598:	cmp	sl, #0
   3959c:	sub	sl, sl, #1
   395a0:	add	r0, r3, r0
   395a4:	str	r0, [r4, #20]
   395a8:	beq	39508 <flatcc_json_printer_double_vector_field@@Base+0xa0>
   395ac:	add	r3, r0, #1
   395b0:	str	r3, [r4, #20]
   395b4:	strb	r6, [r0]
   395b8:	ldrb	r3, [r4, #25]
   395bc:	cmp	r3, #0
   395c0:	beq	3957c <flatcc_json_printer_double_vector_field@@Base+0x114>
   395c4:	ldr	r3, [r4, #20]
   395c8:	mov	r1, r7
   395cc:	add	r2, r3, #1
   395d0:	str	r2, [r4, #20]
   395d4:	strb	r8, [r3]
   395d8:	ldrb	r0, [r4, #25]
   395dc:	ldr	fp, [r4, #32]
   395e0:	ldr	r3, [r4, #20]
   395e4:	ldr	ip, [r4, #16]
   395e8:	mul	fp, fp, r0
   395ec:	mov	r0, r3
   395f0:	add	r3, r3, fp
   395f4:	cmp	ip, r3
   395f8:	mov	r2, fp
   395fc:	bcc	3962c <flatcc_json_printer_double_vector_field@@Base+0x1c4>
   39600:	bl	145bc <memset@plt>
   39604:	ldr	r0, [r4, #20]
   39608:	add	r0, r0, fp
   3960c:	str	r0, [r4, #20]
   39610:	b	3958c <flatcc_json_printer_double_vector_field@@Base+0x124>
   39614:	mov	r0, r4
   39618:	ldr	r3, [r4, #44]	; 0x2c
   3961c:	mov	r1, r9
   39620:	blx	r3
   39624:	ldr	r0, [r4, #20]
   39628:	b	3958c <flatcc_json_printer_double_vector_field@@Base+0x124>
   3962c:	mov	r0, r4
   39630:	mov	r1, fp
   39634:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   39638:	ldr	r0, [r4, #20]
   3963c:	b	3958c <flatcc_json_printer_double_vector_field@@Base+0x124>
   39640:	add	r2, r0, #1
   39644:	mov	r3, #10
   39648:	str	r2, [r4, #20]
   3964c:	strb	r3, [r0]
   39650:	ldr	r3, [r4, #32]
   39654:	ldrb	r5, [r4, #25]
   39658:	sub	r3, r3, #1
   3965c:	ldr	r0, [r4, #20]
   39660:	ldr	r2, [r4, #16]
   39664:	mul	r5, r3, r5
   39668:	str	r3, [r4, #32]
   3966c:	add	r3, r0, r5
   39670:	cmp	r2, r3
   39674:	bcc	39690 <flatcc_json_printer_double_vector_field@@Base+0x228>
   39678:	mov	r2, r5
   3967c:	mov	r1, #32
   39680:	bl	145bc <memset@plt>
   39684:	ldr	r0, [r4, #20]
   39688:	add	r0, r0, r5
   3968c:	b	39514 <flatcc_json_printer_double_vector_field@@Base+0xac>
   39690:	mov	r0, r4
   39694:	mov	r1, r5
   39698:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3969c:	ldr	r0, [r4, #20]
   396a0:	b	39514 <flatcc_json_printer_double_vector_field@@Base+0xac>
   396a4:	ldr	r3, [r4, #20]
   396a8:	mov	r2, #10
   396ac:	add	r1, r3, #1
   396b0:	str	r1, [r4, #20]
   396b4:	mov	r0, r4
   396b8:	strb	r2, [r3]
   396bc:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   396c0:	ldr	r0, [r4, #20]
   396c4:	b	39544 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   396c8:	mov	r0, r4
   396cc:	ldr	r3, [r4, #44]	; 0x2c
   396d0:	blx	r3
   396d4:	ldr	r0, [r4, #20]
   396d8:	b	39544 <flatcc_json_printer_double_vector_field@@Base+0xdc>

000396dc <flatcc_json_printer_utype_enum_vector_field@@Base>:
   396dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   396e0:	sub	sp, sp, #4
   396e4:	ldrb	r5, [r0, #27]
   396e8:	ldr	r8, [sp, #44]	; 0x2c
   396ec:	cmp	r5, #0
   396f0:	ldr	r5, [sp, #40]	; 0x28
   396f4:	bne	3987c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1a0>
   396f8:	mov	r6, r3
   396fc:	add	r3, r2, #2
   39700:	ldr	r2, [r1, #8]
   39704:	lsl	r3, r3, #1
   39708:	cmp	r2, r3
   3970c:	mov	lr, r1
   39710:	bgt	3971c <flatcc_json_printer_utype_enum_vector_field@@Base+0x40>
   39714:	add	sp, sp, #4
   39718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3971c:	ldr	r2, [r1, #4]
   39720:	ldrh	r2, [r2, r3]
   39724:	cmp	r2, #0
   39728:	beq	39714 <flatcc_json_printer_utype_enum_vector_field@@Base+0x38>
   3972c:	mov	r4, r0
   39730:	ldr	r0, [r1]
   39734:	adds	ip, r0, r2
   39738:	beq	39714 <flatcc_json_printer_utype_enum_vector_field@@Base+0x38>
   3973c:	ldr	r3, [r1, #16]
   39740:	cmp	r3, #0
   39744:	add	r3, r3, #1
   39748:	str	r3, [r1, #16]
   3974c:	ldrne	r3, [r4, #20]
   39750:	movne	r1, #44	; 0x2c
   39754:	addne	lr, r3, #1
   39758:	strne	lr, [r4, #20]
   3975c:	strbne	r1, [r3]
   39760:	ldr	r3, [r0, r2]
   39764:	mov	r1, r6
   39768:	mov	r2, r5
   3976c:	mov	r0, r4
   39770:	ldr	r6, [ip, r3]
   39774:	add	r7, ip, r3
   39778:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3977c:	ldr	r3, [r4, #32]
   39780:	ldr	r2, [r4, #20]
   39784:	add	r3, r3, #1
   39788:	add	r0, r2, #1
   3978c:	mov	r1, #91	; 0x5b
   39790:	cmp	r6, #0
   39794:	str	r3, [r4, #32]
   39798:	str	r0, [r4, #20]
   3979c:	strb	r1, [r2]
   397a0:	beq	398ac <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
   397a4:	ldrb	r1, [r4, #25]
   397a8:	cmp	r1, #0
   397ac:	bne	39928 <flatcc_json_printer_utype_enum_vector_field@@Base+0x24c>
   397b0:	ldr	r2, [r4, #20]
   397b4:	ldr	r3, [r4, #16]
   397b8:	cmp	r2, r3
   397bc:	bcs	39958 <flatcc_json_printer_utype_enum_vector_field@@Base+0x27c>
   397c0:	ldrb	r1, [r7, #4]
   397c4:	mov	r0, r4
   397c8:	blx	r8
   397cc:	cmp	r6, #1
   397d0:	add	r5, r7, #5
   397d4:	beq	398ac <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
   397d8:	add	r6, r6, #4
   397dc:	mov	r9, #44	; 0x2c
   397e0:	mov	fp, #10
   397e4:	b	39810 <flatcc_json_printer_utype_enum_vector_field@@Base+0x134>
   397e8:	ldr	r2, [r4, #20]
   397ec:	ldr	r3, [r4, #16]
   397f0:	cmp	r2, r3
   397f4:	bcs	39888 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1ac>
   397f8:	ldrb	r1, [r5], #1
   397fc:	mov	r0, r4
   39800:	blx	r8
   39804:	sub	r3, r6, r5
   39808:	cmn	r7, r3
   3980c:	beq	398ac <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
   39810:	ldr	r3, [r4, #20]
   39814:	add	r2, r3, #1
   39818:	str	r2, [r4, #20]
   3981c:	strb	r9, [r3]
   39820:	ldrb	r3, [r4, #25]
   39824:	cmp	r3, #0
   39828:	beq	397e8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x10c>
   3982c:	ldr	r3, [r4, #20]
   39830:	mov	r1, #32
   39834:	add	r2, r3, #1
   39838:	str	r2, [r4, #20]
   3983c:	strb	fp, [r3]
   39840:	ldrb	r2, [r4, #25]
   39844:	ldr	sl, [r4, #32]
   39848:	ldr	r3, [r4, #20]
   3984c:	ldr	ip, [r4, #16]
   39850:	mul	sl, sl, r2
   39854:	mov	r0, r3
   39858:	add	r3, r3, sl
   3985c:	cmp	ip, r3
   39860:	mov	r2, sl
   39864:	bcc	3989c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1c0>
   39868:	bl	145bc <memset@plt>
   3986c:	ldr	r3, [r4, #20]
   39870:	add	sl, r3, sl
   39874:	str	sl, [r4, #20]
   39878:	b	397f8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x11c>
   3987c:	add	sp, sp, #4
   39880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39884:	b	37970 <flatcc_json_printer_utype_vector_field@@Base>
   39888:	ldr	r3, [r4, #44]	; 0x2c
   3988c:	mov	r1, #0
   39890:	mov	r0, r4
   39894:	blx	r3
   39898:	b	397f8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x11c>
   3989c:	mov	r1, sl
   398a0:	mov	r0, r4
   398a4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   398a8:	b	397f8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x11c>
   398ac:	ldrb	r3, [r4, #25]
   398b0:	cmp	r3, #0
   398b4:	bne	398d4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f8>
   398b8:	ldr	r3, [r4, #20]
   398bc:	add	r1, r3, #1
   398c0:	mov	r2, #93	; 0x5d
   398c4:	str	r1, [r4, #20]
   398c8:	strb	r2, [r3]
   398cc:	add	sp, sp, #4
   398d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   398d4:	ldr	r3, [r4, #20]
   398d8:	mov	r2, #10
   398dc:	add	r1, r3, #1
   398e0:	str	r1, [r4, #20]
   398e4:	strb	r2, [r3]
   398e8:	ldr	r2, [r4, #32]
   398ec:	ldrb	r3, [r4, #25]
   398f0:	sub	r2, r2, #1
   398f4:	ldr	r0, [r4, #20]
   398f8:	ldr	r1, [r4, #16]
   398fc:	mul	r5, r2, r3
   39900:	str	r2, [r4, #32]
   39904:	add	r3, r0, r5
   39908:	cmp	r1, r3
   3990c:	bcc	39948 <flatcc_json_printer_utype_enum_vector_field@@Base+0x26c>
   39910:	mov	r2, r5
   39914:	mov	r1, #32
   39918:	bl	145bc <memset@plt>
   3991c:	ldr	r3, [r4, #20]
   39920:	add	r3, r3, r5
   39924:	b	398bc <flatcc_json_printer_utype_enum_vector_field@@Base+0x1e0>
   39928:	ldr	r3, [r4, #20]
   3992c:	mov	r2, #10
   39930:	add	r1, r3, #1
   39934:	str	r1, [r4, #20]
   39938:	mov	r0, r4
   3993c:	strb	r2, [r3]
   39940:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   39944:	b	397c0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe4>
   39948:	mov	r1, r5
   3994c:	mov	r0, r4
   39950:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   39954:	b	398b8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1dc>
   39958:	ldr	r3, [r4, #44]	; 0x2c
   3995c:	mov	r0, r4
   39960:	blx	r3
   39964:	b	397c0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe4>

00039968 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   39968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3996c:	sub	sp, sp, #4
   39970:	ldrb	r5, [r0, #27]
   39974:	ldr	r8, [sp, #44]	; 0x2c
   39978:	cmp	r5, #0
   3997c:	ldr	r5, [sp, #40]	; 0x28
   39980:	bne	39b08 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1a0>
   39984:	mov	r6, r3
   39988:	add	r3, r2, #2
   3998c:	ldr	r2, [r1, #8]
   39990:	lsl	r3, r3, #1
   39994:	cmp	r2, r3
   39998:	mov	lr, r1
   3999c:	bgt	399a8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x40>
   399a0:	add	sp, sp, #4
   399a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   399a8:	ldr	r2, [r1, #4]
   399ac:	ldrh	r2, [r2, r3]
   399b0:	cmp	r2, #0
   399b4:	beq	399a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x38>
   399b8:	mov	r4, r0
   399bc:	ldr	r0, [r1]
   399c0:	adds	ip, r0, r2
   399c4:	beq	399a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x38>
   399c8:	ldr	r3, [r1, #16]
   399cc:	cmp	r3, #0
   399d0:	add	r3, r3, #1
   399d4:	str	r3, [r1, #16]
   399d8:	ldrne	r3, [r4, #20]
   399dc:	movne	r1, #44	; 0x2c
   399e0:	addne	lr, r3, #1
   399e4:	strne	lr, [r4, #20]
   399e8:	strbne	r1, [r3]
   399ec:	ldr	r3, [r0, r2]
   399f0:	mov	r1, r6
   399f4:	mov	r2, r5
   399f8:	mov	r0, r4
   399fc:	ldr	r6, [ip, r3]
   39a00:	add	r7, ip, r3
   39a04:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   39a08:	ldr	r3, [r4, #32]
   39a0c:	ldr	r2, [r4, #20]
   39a10:	add	r3, r3, #1
   39a14:	add	r0, r2, #1
   39a18:	mov	r1, #91	; 0x5b
   39a1c:	cmp	r6, #0
   39a20:	str	r3, [r4, #32]
   39a24:	str	r0, [r4, #20]
   39a28:	strb	r1, [r2]
   39a2c:	beq	39b38 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
   39a30:	ldrb	r1, [r4, #25]
   39a34:	cmp	r1, #0
   39a38:	bne	39bb4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x24c>
   39a3c:	ldr	r2, [r4, #20]
   39a40:	ldr	r3, [r4, #16]
   39a44:	cmp	r2, r3
   39a48:	bcs	39be4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x27c>
   39a4c:	ldrb	r1, [r7, #4]
   39a50:	mov	r0, r4
   39a54:	blx	r8
   39a58:	cmp	r6, #1
   39a5c:	add	r5, r7, #5
   39a60:	beq	39b38 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
   39a64:	add	r6, r6, #4
   39a68:	mov	r9, #44	; 0x2c
   39a6c:	mov	fp, #10
   39a70:	b	39a9c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x134>
   39a74:	ldr	r2, [r4, #20]
   39a78:	ldr	r3, [r4, #16]
   39a7c:	cmp	r2, r3
   39a80:	bcs	39b14 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1ac>
   39a84:	ldrb	r1, [r5], #1
   39a88:	mov	r0, r4
   39a8c:	blx	r8
   39a90:	sub	r3, r6, r5
   39a94:	cmn	r7, r3
   39a98:	beq	39b38 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
   39a9c:	ldr	r3, [r4, #20]
   39aa0:	add	r2, r3, #1
   39aa4:	str	r2, [r4, #20]
   39aa8:	strb	r9, [r3]
   39aac:	ldrb	r3, [r4, #25]
   39ab0:	cmp	r3, #0
   39ab4:	beq	39a74 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x10c>
   39ab8:	ldr	r3, [r4, #20]
   39abc:	mov	r1, #32
   39ac0:	add	r2, r3, #1
   39ac4:	str	r2, [r4, #20]
   39ac8:	strb	fp, [r3]
   39acc:	ldrb	r2, [r4, #25]
   39ad0:	ldr	sl, [r4, #32]
   39ad4:	ldr	r3, [r4, #20]
   39ad8:	ldr	ip, [r4, #16]
   39adc:	mul	sl, sl, r2
   39ae0:	mov	r0, r3
   39ae4:	add	r3, r3, sl
   39ae8:	cmp	ip, r3
   39aec:	mov	r2, sl
   39af0:	bcc	39b28 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1c0>
   39af4:	bl	145bc <memset@plt>
   39af8:	ldr	r3, [r4, #20]
   39afc:	add	sl, r3, sl
   39b00:	str	sl, [r4, #20]
   39b04:	b	39a84 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x11c>
   39b08:	add	sp, sp, #4
   39b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39b10:	b	375d4 <flatcc_json_printer_uint8_vector_field@@Base>
   39b14:	ldr	r3, [r4, #44]	; 0x2c
   39b18:	mov	r1, #0
   39b1c:	mov	r0, r4
   39b20:	blx	r3
   39b24:	b	39a84 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x11c>
   39b28:	mov	r1, sl
   39b2c:	mov	r0, r4
   39b30:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   39b34:	b	39a84 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x11c>
   39b38:	ldrb	r3, [r4, #25]
   39b3c:	cmp	r3, #0
   39b40:	bne	39b60 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f8>
   39b44:	ldr	r3, [r4, #20]
   39b48:	add	r1, r3, #1
   39b4c:	mov	r2, #93	; 0x5d
   39b50:	str	r1, [r4, #20]
   39b54:	strb	r2, [r3]
   39b58:	add	sp, sp, #4
   39b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39b60:	ldr	r3, [r4, #20]
   39b64:	mov	r2, #10
   39b68:	add	r1, r3, #1
   39b6c:	str	r1, [r4, #20]
   39b70:	strb	r2, [r3]
   39b74:	ldr	r2, [r4, #32]
   39b78:	ldrb	r3, [r4, #25]
   39b7c:	sub	r2, r2, #1
   39b80:	ldr	r0, [r4, #20]
   39b84:	ldr	r1, [r4, #16]
   39b88:	mul	r5, r2, r3
   39b8c:	str	r2, [r4, #32]
   39b90:	add	r3, r0, r5
   39b94:	cmp	r1, r3
   39b98:	bcc	39bd4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x26c>
   39b9c:	mov	r2, r5
   39ba0:	mov	r1, #32
   39ba4:	bl	145bc <memset@plt>
   39ba8:	ldr	r3, [r4, #20]
   39bac:	add	r3, r3, r5
   39bb0:	b	39b48 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1e0>
   39bb4:	ldr	r3, [r4, #20]
   39bb8:	mov	r2, #10
   39bbc:	add	r1, r3, #1
   39bc0:	str	r1, [r4, #20]
   39bc4:	mov	r0, r4
   39bc8:	strb	r2, [r3]
   39bcc:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   39bd0:	b	39a4c <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe4>
   39bd4:	mov	r1, r5
   39bd8:	mov	r0, r4
   39bdc:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   39be0:	b	39b44 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1dc>
   39be4:	ldr	r3, [r4, #44]	; 0x2c
   39be8:	mov	r0, r4
   39bec:	blx	r3
   39bf0:	b	39a4c <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe4>

00039bf4 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   39bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39bf8:	sub	sp, sp, #4
   39bfc:	ldrb	r5, [r0, #27]
   39c00:	ldr	r7, [sp, #44]	; 0x2c
   39c04:	cmp	r5, #0
   39c08:	ldr	r5, [sp, #40]	; 0x28
   39c0c:	bne	39d98 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a4>
   39c10:	mov	r6, r3
   39c14:	add	r3, r2, #2
   39c18:	ldr	r2, [r1, #8]
   39c1c:	lsl	r3, r3, #1
   39c20:	cmp	r2, r3
   39c24:	mov	lr, r1
   39c28:	bgt	39c34 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x40>
   39c2c:	add	sp, sp, #4
   39c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39c34:	ldr	r2, [r1, #4]
   39c38:	ldrh	r2, [r2, r3]
   39c3c:	cmp	r2, #0
   39c40:	beq	39c2c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x38>
   39c44:	mov	r4, r0
   39c48:	ldr	r0, [r1]
   39c4c:	adds	ip, r0, r2
   39c50:	beq	39c2c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x38>
   39c54:	ldr	r3, [r1, #16]
   39c58:	cmp	r3, #0
   39c5c:	add	r3, r3, #1
   39c60:	str	r3, [r1, #16]
   39c64:	ldrne	r3, [r4, #20]
   39c68:	movne	r1, #44	; 0x2c
   39c6c:	addne	lr, r3, #1
   39c70:	strne	lr, [r4, #20]
   39c74:	strbne	r1, [r3]
   39c78:	ldr	r3, [r0, r2]
   39c7c:	mov	r1, r6
   39c80:	mov	r2, r5
   39c84:	mov	r0, r4
   39c88:	ldr	r5, [ip, r3]
   39c8c:	add	r6, ip, r3
   39c90:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   39c94:	ldr	r3, [r4, #32]
   39c98:	ldr	r2, [r4, #20]
   39c9c:	add	r3, r3, #1
   39ca0:	add	r0, r2, #1
   39ca4:	mov	r1, #91	; 0x5b
   39ca8:	cmp	r5, #0
   39cac:	str	r3, [r4, #32]
   39cb0:	str	r0, [r4, #20]
   39cb4:	strb	r1, [r2]
   39cb8:	beq	39dc8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39cbc:	ldrb	r1, [r4, #25]
   39cc0:	cmp	r1, #0
   39cc4:	bne	39e44 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x250>
   39cc8:	ldr	r2, [r4, #20]
   39ccc:	ldr	r3, [r4, #16]
   39cd0:	cmp	r2, r3
   39cd4:	bcs	39e74 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x280>
   39cd8:	ldrh	r1, [r6, #4]
   39cdc:	mov	r0, r4
   39ce0:	blx	r7
   39ce4:	cmp	r5, #1
   39ce8:	add	r6, r6, #6
   39cec:	sub	r5, r5, #2
   39cf0:	beq	39dc8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39cf4:	mov	r8, #44	; 0x2c
   39cf8:	mov	sl, #10
   39cfc:	mov	r9, #32
   39d00:	b	39d2c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   39d04:	ldr	r2, [r4, #20]
   39d08:	ldr	r3, [r4, #16]
   39d0c:	cmp	r2, r3
   39d10:	bcs	39da4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b0>
   39d14:	ldrh	r1, [r6], #2
   39d18:	mov	r0, r4
   39d1c:	blx	r7
   39d20:	cmp	r5, #0
   39d24:	sub	r5, r5, #1
   39d28:	beq	39dc8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d4>
   39d2c:	ldr	r3, [r4, #20]
   39d30:	add	r2, r3, #1
   39d34:	str	r2, [r4, #20]
   39d38:	strb	r8, [r3]
   39d3c:	ldrb	r3, [r4, #25]
   39d40:	cmp	r3, #0
   39d44:	beq	39d04 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x110>
   39d48:	ldr	r3, [r4, #20]
   39d4c:	mov	r1, r9
   39d50:	add	r2, r3, #1
   39d54:	str	r2, [r4, #20]
   39d58:	strb	sl, [r3]
   39d5c:	ldrb	r3, [r4, #25]
   39d60:	ldr	r2, [r4, #32]
   39d64:	ldr	ip, [r4, #20]
   39d68:	ldr	lr, [r4, #16]
   39d6c:	mul	fp, r2, r3
   39d70:	mov	r0, ip
   39d74:	add	ip, ip, fp
   39d78:	cmp	lr, ip
   39d7c:	mov	r2, fp
   39d80:	bcc	39db8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c4>
   39d84:	bl	145bc <memset@plt>
   39d88:	ldr	r2, [r4, #20]
   39d8c:	add	r3, r2, fp
   39d90:	str	r3, [r4, #20]
   39d94:	b	39d14 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   39d98:	add	sp, sp, #4
   39d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39da0:	b	37974 <flatcc_json_printer_uint16_vector_field@@Base>
   39da4:	ldr	r3, [r4, #44]	; 0x2c
   39da8:	mov	r1, #0
   39dac:	mov	r0, r4
   39db0:	blx	r3
   39db4:	b	39d14 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   39db8:	mov	r1, fp
   39dbc:	mov	r0, r4
   39dc0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   39dc4:	b	39d14 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   39dc8:	ldrb	r3, [r4, #25]
   39dcc:	cmp	r3, #0
   39dd0:	bne	39df0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1fc>
   39dd4:	ldr	r3, [r4, #20]
   39dd8:	add	r1, r3, #1
   39ddc:	mov	r2, #93	; 0x5d
   39de0:	str	r1, [r4, #20]
   39de4:	strb	r2, [r3]
   39de8:	add	sp, sp, #4
   39dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39df0:	ldr	r3, [r4, #20]
   39df4:	mov	r2, #10
   39df8:	add	r1, r3, #1
   39dfc:	str	r1, [r4, #20]
   39e00:	strb	r2, [r3]
   39e04:	ldr	r2, [r4, #32]
   39e08:	ldrb	r3, [r4, #25]
   39e0c:	sub	r2, r2, #1
   39e10:	ldr	r0, [r4, #20]
   39e14:	ldr	r1, [r4, #16]
   39e18:	mul	r5, r2, r3
   39e1c:	str	r2, [r4, #32]
   39e20:	add	r3, r0, r5
   39e24:	cmp	r1, r3
   39e28:	bcc	39e64 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x270>
   39e2c:	mov	r2, r5
   39e30:	mov	r1, #32
   39e34:	bl	145bc <memset@plt>
   39e38:	ldr	r3, [r4, #20]
   39e3c:	add	r3, r3, r5
   39e40:	b	39dd8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e4>
   39e44:	ldr	r3, [r4, #20]
   39e48:	mov	r2, #10
   39e4c:	add	r1, r3, #1
   39e50:	str	r1, [r4, #20]
   39e54:	mov	r0, r4
   39e58:	strb	r2, [r3]
   39e5c:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   39e60:	b	39cd8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xe4>
   39e64:	mov	r1, r5
   39e68:	mov	r0, r4
   39e6c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   39e70:	b	39dd4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e0>
   39e74:	ldr	r3, [r4, #44]	; 0x2c
   39e78:	mov	r0, r4
   39e7c:	blx	r3
   39e80:	b	39cd8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xe4>

00039e84 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   39e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39e88:	sub	sp, sp, #4
   39e8c:	ldrb	r5, [r0, #27]
   39e90:	ldr	r7, [sp, #44]	; 0x2c
   39e94:	cmp	r5, #0
   39e98:	ldr	r5, [sp, #40]	; 0x28
   39e9c:	bne	3a028 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1a4>
   39ea0:	mov	r6, r3
   39ea4:	add	r3, r2, #2
   39ea8:	ldr	r2, [r1, #8]
   39eac:	lsl	r3, r3, #1
   39eb0:	cmp	r2, r3
   39eb4:	mov	lr, r1
   39eb8:	bgt	39ec4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x40>
   39ebc:	add	sp, sp, #4
   39ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39ec4:	ldr	r2, [r1, #4]
   39ec8:	ldrh	r2, [r2, r3]
   39ecc:	cmp	r2, #0
   39ed0:	beq	39ebc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x38>
   39ed4:	mov	r4, r0
   39ed8:	ldr	r0, [r1]
   39edc:	adds	ip, r0, r2
   39ee0:	beq	39ebc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x38>
   39ee4:	ldr	r3, [r1, #16]
   39ee8:	cmp	r3, #0
   39eec:	add	r3, r3, #1
   39ef0:	str	r3, [r1, #16]
   39ef4:	ldrne	r3, [r4, #20]
   39ef8:	movne	r1, #44	; 0x2c
   39efc:	addne	lr, r3, #1
   39f00:	strne	lr, [r4, #20]
   39f04:	strbne	r1, [r3]
   39f08:	ldr	r3, [r0, r2]
   39f0c:	mov	r1, r6
   39f10:	mov	r2, r5
   39f14:	mov	r0, r4
   39f18:	ldr	r5, [ip, r3]
   39f1c:	add	r6, ip, r3
   39f20:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   39f24:	ldr	r3, [r4, #32]
   39f28:	ldr	r2, [r4, #20]
   39f2c:	add	r3, r3, #1
   39f30:	add	r0, r2, #1
   39f34:	mov	r1, #91	; 0x5b
   39f38:	cmp	r5, #0
   39f3c:	str	r3, [r4, #32]
   39f40:	str	r0, [r4, #20]
   39f44:	strb	r1, [r2]
   39f48:	beq	3a058 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   39f4c:	ldrb	r1, [r4, #25]
   39f50:	cmp	r1, #0
   39f54:	bne	3a0d4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x250>
   39f58:	ldr	r2, [r4, #20]
   39f5c:	ldr	r3, [r4, #16]
   39f60:	cmp	r2, r3
   39f64:	bcs	3a104 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x280>
   39f68:	ldr	r1, [r6, #4]
   39f6c:	mov	r0, r4
   39f70:	blx	r7
   39f74:	cmp	r5, #1
   39f78:	add	r6, r6, #8
   39f7c:	sub	r5, r5, #2
   39f80:	beq	3a058 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   39f84:	mov	r8, #44	; 0x2c
   39f88:	mov	sl, #10
   39f8c:	mov	r9, #32
   39f90:	b	39fbc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   39f94:	ldr	r2, [r4, #20]
   39f98:	ldr	r3, [r4, #16]
   39f9c:	cmp	r2, r3
   39fa0:	bcs	3a034 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b0>
   39fa4:	ldr	r1, [r6], #4
   39fa8:	mov	r0, r4
   39fac:	blx	r7
   39fb0:	cmp	r5, #0
   39fb4:	sub	r5, r5, #1
   39fb8:	beq	3a058 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d4>
   39fbc:	ldr	r3, [r4, #20]
   39fc0:	add	r2, r3, #1
   39fc4:	str	r2, [r4, #20]
   39fc8:	strb	r8, [r3]
   39fcc:	ldrb	r3, [r4, #25]
   39fd0:	cmp	r3, #0
   39fd4:	beq	39f94 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x110>
   39fd8:	ldr	r3, [r4, #20]
   39fdc:	mov	r1, r9
   39fe0:	add	r2, r3, #1
   39fe4:	str	r2, [r4, #20]
   39fe8:	strb	sl, [r3]
   39fec:	ldrb	r3, [r4, #25]
   39ff0:	ldr	r2, [r4, #32]
   39ff4:	ldr	ip, [r4, #20]
   39ff8:	ldr	lr, [r4, #16]
   39ffc:	mul	fp, r2, r3
   3a000:	mov	r0, ip
   3a004:	add	ip, ip, fp
   3a008:	cmp	lr, ip
   3a00c:	mov	r2, fp
   3a010:	bcc	3a048 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c4>
   3a014:	bl	145bc <memset@plt>
   3a018:	ldr	r2, [r4, #20]
   3a01c:	add	r3, r2, fp
   3a020:	str	r3, [r4, #20]
   3a024:	b	39fa4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   3a028:	add	sp, sp, #4
   3a02c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a030:	b	37d14 <flatcc_json_printer_uint32_vector_field@@Base>
   3a034:	ldr	r3, [r4, #44]	; 0x2c
   3a038:	mov	r1, #0
   3a03c:	mov	r0, r4
   3a040:	blx	r3
   3a044:	b	39fa4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   3a048:	mov	r1, fp
   3a04c:	mov	r0, r4
   3a050:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3a054:	b	39fa4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   3a058:	ldrb	r3, [r4, #25]
   3a05c:	cmp	r3, #0
   3a060:	bne	3a080 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1fc>
   3a064:	ldr	r3, [r4, #20]
   3a068:	add	r1, r3, #1
   3a06c:	mov	r2, #93	; 0x5d
   3a070:	str	r1, [r4, #20]
   3a074:	strb	r2, [r3]
   3a078:	add	sp, sp, #4
   3a07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a080:	ldr	r3, [r4, #20]
   3a084:	mov	r2, #10
   3a088:	add	r1, r3, #1
   3a08c:	str	r1, [r4, #20]
   3a090:	strb	r2, [r3]
   3a094:	ldr	r2, [r4, #32]
   3a098:	ldrb	r3, [r4, #25]
   3a09c:	sub	r2, r2, #1
   3a0a0:	ldr	r0, [r4, #20]
   3a0a4:	ldr	r1, [r4, #16]
   3a0a8:	mul	r5, r2, r3
   3a0ac:	str	r2, [r4, #32]
   3a0b0:	add	r3, r0, r5
   3a0b4:	cmp	r1, r3
   3a0b8:	bcc	3a0f4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x270>
   3a0bc:	mov	r2, r5
   3a0c0:	mov	r1, #32
   3a0c4:	bl	145bc <memset@plt>
   3a0c8:	ldr	r3, [r4, #20]
   3a0cc:	add	r3, r3, r5
   3a0d0:	b	3a068 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1e4>
   3a0d4:	ldr	r3, [r4, #20]
   3a0d8:	mov	r2, #10
   3a0dc:	add	r1, r3, #1
   3a0e0:	str	r1, [r4, #20]
   3a0e4:	mov	r0, r4
   3a0e8:	strb	r2, [r3]
   3a0ec:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3a0f0:	b	39f68 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe4>
   3a0f4:	mov	r1, r5
   3a0f8:	mov	r0, r4
   3a0fc:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3a100:	b	3a064 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1e0>
   3a104:	ldr	r3, [r4, #44]	; 0x2c
   3a108:	mov	r0, r4
   3a10c:	blx	r3
   3a110:	b	39f68 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe4>

0003a114 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3a114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a118:	sub	sp, sp, #4
   3a11c:	ldrb	r5, [r0, #27]
   3a120:	ldr	r7, [sp, #44]	; 0x2c
   3a124:	cmp	r5, #0
   3a128:	ldr	r5, [sp, #40]	; 0x28
   3a12c:	bne	3a2b8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a4>
   3a130:	mov	r6, r3
   3a134:	add	r3, r2, #2
   3a138:	ldr	r2, [r1, #8]
   3a13c:	lsl	r3, r3, #1
   3a140:	cmp	r2, r3
   3a144:	mov	lr, r1
   3a148:	bgt	3a154 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x40>
   3a14c:	add	sp, sp, #4
   3a150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a154:	ldr	r2, [r1, #4]
   3a158:	ldrh	r2, [r2, r3]
   3a15c:	cmp	r2, #0
   3a160:	beq	3a14c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x38>
   3a164:	mov	r4, r0
   3a168:	ldr	r0, [r1]
   3a16c:	adds	ip, r0, r2
   3a170:	beq	3a14c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x38>
   3a174:	ldr	r3, [r1, #16]
   3a178:	cmp	r3, #0
   3a17c:	add	r3, r3, #1
   3a180:	str	r3, [r1, #16]
   3a184:	ldrne	r3, [r4, #20]
   3a188:	movne	r1, #44	; 0x2c
   3a18c:	addne	lr, r3, #1
   3a190:	strne	lr, [r4, #20]
   3a194:	strbne	r1, [r3]
   3a198:	ldr	r3, [r0, r2]
   3a19c:	mov	r1, r6
   3a1a0:	mov	r2, r5
   3a1a4:	mov	r0, r4
   3a1a8:	ldr	r5, [ip, r3]
   3a1ac:	add	r6, ip, r3
   3a1b0:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3a1b4:	ldr	r3, [r4, #32]
   3a1b8:	ldr	r2, [r4, #20]
   3a1bc:	add	r3, r3, #1
   3a1c0:	add	r0, r2, #1
   3a1c4:	mov	r1, #91	; 0x5b
   3a1c8:	cmp	r5, #0
   3a1cc:	str	r3, [r4, #32]
   3a1d0:	str	r0, [r4, #20]
   3a1d4:	strb	r1, [r2]
   3a1d8:	beq	3a2e8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a1dc:	ldrb	r1, [r4, #25]
   3a1e0:	cmp	r1, #0
   3a1e4:	bne	3a364 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x250>
   3a1e8:	ldr	r2, [r4, #20]
   3a1ec:	ldr	r3, [r4, #16]
   3a1f0:	cmp	r2, r3
   3a1f4:	bcs	3a394 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x280>
   3a1f8:	ldrd	r2, [r6, #4]
   3a1fc:	mov	r0, r4
   3a200:	blx	r7
   3a204:	cmp	r5, #1
   3a208:	add	r6, r6, #12
   3a20c:	sub	r5, r5, #2
   3a210:	beq	3a2e8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a214:	mov	r8, #44	; 0x2c
   3a218:	mov	sl, #10
   3a21c:	mov	r9, #32
   3a220:	b	3a24c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   3a224:	ldr	r2, [r4, #20]
   3a228:	ldr	r3, [r4, #16]
   3a22c:	cmp	r2, r3
   3a230:	bcs	3a2c4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b0>
   3a234:	ldrd	r2, [r6], #8
   3a238:	mov	r0, r4
   3a23c:	blx	r7
   3a240:	cmp	r5, #0
   3a244:	sub	r5, r5, #1
   3a248:	beq	3a2e8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d4>
   3a24c:	ldr	r3, [r4, #20]
   3a250:	add	r2, r3, #1
   3a254:	str	r2, [r4, #20]
   3a258:	strb	r8, [r3]
   3a25c:	ldrb	r3, [r4, #25]
   3a260:	cmp	r3, #0
   3a264:	beq	3a224 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x110>
   3a268:	ldr	r3, [r4, #20]
   3a26c:	mov	r1, r9
   3a270:	add	r2, r3, #1
   3a274:	str	r2, [r4, #20]
   3a278:	strb	sl, [r3]
   3a27c:	ldrb	r3, [r4, #25]
   3a280:	ldr	r2, [r4, #32]
   3a284:	ldr	ip, [r4, #20]
   3a288:	ldr	lr, [r4, #16]
   3a28c:	mul	fp, r2, r3
   3a290:	mov	r0, ip
   3a294:	add	ip, ip, fp
   3a298:	cmp	lr, ip
   3a29c:	mov	r2, fp
   3a2a0:	bcc	3a2d8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c4>
   3a2a4:	bl	145bc <memset@plt>
   3a2a8:	ldr	r2, [r4, #20]
   3a2ac:	add	r3, r2, fp
   3a2b0:	str	r3, [r4, #20]
   3a2b4:	b	3a234 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x120>
   3a2b8:	add	sp, sp, #4
   3a2bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a2c0:	b	380b4 <flatcc_json_printer_uint64_vector_field@@Base>
   3a2c4:	ldr	r3, [r4, #44]	; 0x2c
   3a2c8:	mov	r1, #0
   3a2cc:	mov	r0, r4
   3a2d0:	blx	r3
   3a2d4:	b	3a234 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x120>
   3a2d8:	mov	r1, fp
   3a2dc:	mov	r0, r4
   3a2e0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3a2e4:	b	3a234 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x120>
   3a2e8:	ldrb	r3, [r4, #25]
   3a2ec:	cmp	r3, #0
   3a2f0:	bne	3a310 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1fc>
   3a2f4:	ldr	r3, [r4, #20]
   3a2f8:	add	r1, r3, #1
   3a2fc:	mov	r2, #93	; 0x5d
   3a300:	str	r1, [r4, #20]
   3a304:	strb	r2, [r3]
   3a308:	add	sp, sp, #4
   3a30c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a310:	ldr	r3, [r4, #20]
   3a314:	mov	r2, #10
   3a318:	add	r1, r3, #1
   3a31c:	str	r1, [r4, #20]
   3a320:	strb	r2, [r3]
   3a324:	ldr	r2, [r4, #32]
   3a328:	ldrb	r3, [r4, #25]
   3a32c:	sub	r2, r2, #1
   3a330:	ldr	r0, [r4, #20]
   3a334:	ldr	r1, [r4, #16]
   3a338:	mul	r5, r2, r3
   3a33c:	str	r2, [r4, #32]
   3a340:	add	r3, r0, r5
   3a344:	cmp	r1, r3
   3a348:	bcc	3a384 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x270>
   3a34c:	mov	r2, r5
   3a350:	mov	r1, #32
   3a354:	bl	145bc <memset@plt>
   3a358:	ldr	r3, [r4, #20]
   3a35c:	add	r3, r3, r5
   3a360:	b	3a2f8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e4>
   3a364:	ldr	r3, [r4, #20]
   3a368:	mov	r2, #10
   3a36c:	add	r1, r3, #1
   3a370:	str	r1, [r4, #20]
   3a374:	mov	r0, r4
   3a378:	strb	r2, [r3]
   3a37c:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3a380:	b	3a1f8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xe4>
   3a384:	mov	r1, r5
   3a388:	mov	r0, r4
   3a38c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3a390:	b	3a2f4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e0>
   3a394:	ldr	r3, [r4, #44]	; 0x2c
   3a398:	mov	r0, r4
   3a39c:	blx	r3
   3a3a0:	b	3a1f8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xe4>

0003a3a4 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3a3a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a3a8:	sub	sp, sp, #4
   3a3ac:	ldrb	r5, [r0, #27]
   3a3b0:	ldr	r8, [sp, #44]	; 0x2c
   3a3b4:	cmp	r5, #0
   3a3b8:	ldr	r5, [sp, #40]	; 0x28
   3a3bc:	bne	3a544 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1a0>
   3a3c0:	mov	r6, r3
   3a3c4:	add	r3, r2, #2
   3a3c8:	ldr	r2, [r1, #8]
   3a3cc:	lsl	r3, r3, #1
   3a3d0:	cmp	r2, r3
   3a3d4:	mov	lr, r1
   3a3d8:	bgt	3a3e4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x40>
   3a3dc:	add	sp, sp, #4
   3a3e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a3e4:	ldr	r2, [r1, #4]
   3a3e8:	ldrh	r2, [r2, r3]
   3a3ec:	cmp	r2, #0
   3a3f0:	beq	3a3dc <flatcc_json_printer_int8_enum_vector_field@@Base+0x38>
   3a3f4:	mov	r4, r0
   3a3f8:	ldr	r0, [r1]
   3a3fc:	adds	ip, r0, r2
   3a400:	beq	3a3dc <flatcc_json_printer_int8_enum_vector_field@@Base+0x38>
   3a404:	ldr	r3, [r1, #16]
   3a408:	cmp	r3, #0
   3a40c:	add	r3, r3, #1
   3a410:	str	r3, [r1, #16]
   3a414:	ldrne	r3, [r4, #20]
   3a418:	movne	r1, #44	; 0x2c
   3a41c:	addne	lr, r3, #1
   3a420:	strne	lr, [r4, #20]
   3a424:	strbne	r1, [r3]
   3a428:	ldr	r3, [r0, r2]
   3a42c:	mov	r1, r6
   3a430:	mov	r2, r5
   3a434:	mov	r0, r4
   3a438:	ldr	r6, [ip, r3]
   3a43c:	add	r7, ip, r3
   3a440:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3a444:	ldr	r3, [r4, #32]
   3a448:	ldr	r2, [r4, #20]
   3a44c:	add	r3, r3, #1
   3a450:	add	r0, r2, #1
   3a454:	mov	r1, #91	; 0x5b
   3a458:	cmp	r6, #0
   3a45c:	str	r3, [r4, #32]
   3a460:	str	r0, [r4, #20]
   3a464:	strb	r1, [r2]
   3a468:	beq	3a574 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
   3a46c:	ldrb	r1, [r4, #25]
   3a470:	cmp	r1, #0
   3a474:	bne	3a5f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x24c>
   3a478:	ldr	r2, [r4, #20]
   3a47c:	ldr	r3, [r4, #16]
   3a480:	cmp	r2, r3
   3a484:	bcs	3a620 <flatcc_json_printer_int8_enum_vector_field@@Base+0x27c>
   3a488:	ldrsb	r1, [r7, #4]
   3a48c:	mov	r0, r4
   3a490:	blx	r8
   3a494:	cmp	r6, #1
   3a498:	add	r5, r7, #5
   3a49c:	beq	3a574 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
   3a4a0:	add	r6, r6, #4
   3a4a4:	mov	r9, #44	; 0x2c
   3a4a8:	mov	fp, #10
   3a4ac:	b	3a4d8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x134>
   3a4b0:	ldr	r2, [r4, #20]
   3a4b4:	ldr	r3, [r4, #16]
   3a4b8:	cmp	r2, r3
   3a4bc:	bcs	3a550 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1ac>
   3a4c0:	ldrsb	r1, [r5], #1
   3a4c4:	mov	r0, r4
   3a4c8:	blx	r8
   3a4cc:	sub	r3, r6, r5
   3a4d0:	cmn	r7, r3
   3a4d4:	beq	3a574 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
   3a4d8:	ldr	r3, [r4, #20]
   3a4dc:	add	r2, r3, #1
   3a4e0:	str	r2, [r4, #20]
   3a4e4:	strb	r9, [r3]
   3a4e8:	ldrb	r3, [r4, #25]
   3a4ec:	cmp	r3, #0
   3a4f0:	beq	3a4b0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x10c>
   3a4f4:	ldr	r3, [r4, #20]
   3a4f8:	mov	r1, #32
   3a4fc:	add	r2, r3, #1
   3a500:	str	r2, [r4, #20]
   3a504:	strb	fp, [r3]
   3a508:	ldrb	r2, [r4, #25]
   3a50c:	ldr	sl, [r4, #32]
   3a510:	ldr	r3, [r4, #20]
   3a514:	ldr	ip, [r4, #16]
   3a518:	mul	sl, sl, r2
   3a51c:	mov	r0, r3
   3a520:	add	r3, r3, sl
   3a524:	cmp	ip, r3
   3a528:	mov	r2, sl
   3a52c:	bcc	3a564 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1c0>
   3a530:	bl	145bc <memset@plt>
   3a534:	ldr	r3, [r4, #20]
   3a538:	add	sl, r3, sl
   3a53c:	str	sl, [r4, #20]
   3a540:	b	3a4c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x11c>
   3a544:	add	sp, sp, #4
   3a548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a54c:	b	38328 <flatcc_json_printer_int8_vector_field@@Base>
   3a550:	ldr	r3, [r4, #44]	; 0x2c
   3a554:	mov	r1, #0
   3a558:	mov	r0, r4
   3a55c:	blx	r3
   3a560:	b	3a4c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x11c>
   3a564:	mov	r1, sl
   3a568:	mov	r0, r4
   3a56c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3a570:	b	3a4c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x11c>
   3a574:	ldrb	r3, [r4, #25]
   3a578:	cmp	r3, #0
   3a57c:	bne	3a59c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f8>
   3a580:	ldr	r3, [r4, #20]
   3a584:	add	r1, r3, #1
   3a588:	mov	r2, #93	; 0x5d
   3a58c:	str	r1, [r4, #20]
   3a590:	strb	r2, [r3]
   3a594:	add	sp, sp, #4
   3a598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a59c:	ldr	r3, [r4, #20]
   3a5a0:	mov	r2, #10
   3a5a4:	add	r1, r3, #1
   3a5a8:	str	r1, [r4, #20]
   3a5ac:	strb	r2, [r3]
   3a5b0:	ldr	r2, [r4, #32]
   3a5b4:	ldrb	r3, [r4, #25]
   3a5b8:	sub	r2, r2, #1
   3a5bc:	ldr	r0, [r4, #20]
   3a5c0:	ldr	r1, [r4, #16]
   3a5c4:	mul	r5, r2, r3
   3a5c8:	str	r2, [r4, #32]
   3a5cc:	add	r3, r0, r5
   3a5d0:	cmp	r1, r3
   3a5d4:	bcc	3a610 <flatcc_json_printer_int8_enum_vector_field@@Base+0x26c>
   3a5d8:	mov	r2, r5
   3a5dc:	mov	r1, #32
   3a5e0:	bl	145bc <memset@plt>
   3a5e4:	ldr	r3, [r4, #20]
   3a5e8:	add	r3, r3, r5
   3a5ec:	b	3a584 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1e0>
   3a5f0:	ldr	r3, [r4, #20]
   3a5f4:	mov	r2, #10
   3a5f8:	add	r1, r3, #1
   3a5fc:	str	r1, [r4, #20]
   3a600:	mov	r0, r4
   3a604:	strb	r2, [r3]
   3a608:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3a60c:	b	3a488 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe4>
   3a610:	mov	r1, r5
   3a614:	mov	r0, r4
   3a618:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3a61c:	b	3a580 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1dc>
   3a620:	ldr	r3, [r4, #44]	; 0x2c
   3a624:	mov	r0, r4
   3a628:	blx	r3
   3a62c:	b	3a488 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe4>

0003a630 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3a630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a634:	sub	sp, sp, #4
   3a638:	ldrb	r5, [r0, #27]
   3a63c:	ldr	r7, [sp, #44]	; 0x2c
   3a640:	cmp	r5, #0
   3a644:	ldr	r5, [sp, #40]	; 0x28
   3a648:	bne	3a7d4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a4>
   3a64c:	mov	r6, r3
   3a650:	add	r3, r2, #2
   3a654:	ldr	r2, [r1, #8]
   3a658:	lsl	r3, r3, #1
   3a65c:	cmp	r2, r3
   3a660:	mov	lr, r1
   3a664:	bgt	3a670 <flatcc_json_printer_int16_enum_vector_field@@Base+0x40>
   3a668:	add	sp, sp, #4
   3a66c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a670:	ldr	r2, [r1, #4]
   3a674:	ldrh	r2, [r2, r3]
   3a678:	cmp	r2, #0
   3a67c:	beq	3a668 <flatcc_json_printer_int16_enum_vector_field@@Base+0x38>
   3a680:	mov	r4, r0
   3a684:	ldr	r0, [r1]
   3a688:	adds	ip, r0, r2
   3a68c:	beq	3a668 <flatcc_json_printer_int16_enum_vector_field@@Base+0x38>
   3a690:	ldr	r3, [r1, #16]
   3a694:	cmp	r3, #0
   3a698:	add	r3, r3, #1
   3a69c:	str	r3, [r1, #16]
   3a6a0:	ldrne	r3, [r4, #20]
   3a6a4:	movne	r1, #44	; 0x2c
   3a6a8:	addne	lr, r3, #1
   3a6ac:	strne	lr, [r4, #20]
   3a6b0:	strbne	r1, [r3]
   3a6b4:	ldr	r3, [r0, r2]
   3a6b8:	mov	r1, r6
   3a6bc:	mov	r2, r5
   3a6c0:	mov	r0, r4
   3a6c4:	ldr	r5, [ip, r3]
   3a6c8:	add	r6, ip, r3
   3a6cc:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3a6d0:	ldr	r3, [r4, #32]
   3a6d4:	ldr	r2, [r4, #20]
   3a6d8:	add	r3, r3, #1
   3a6dc:	add	r0, r2, #1
   3a6e0:	mov	r1, #91	; 0x5b
   3a6e4:	cmp	r5, #0
   3a6e8:	str	r3, [r4, #32]
   3a6ec:	str	r0, [r4, #20]
   3a6f0:	strb	r1, [r2]
   3a6f4:	beq	3a804 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3a6f8:	ldrb	r1, [r4, #25]
   3a6fc:	cmp	r1, #0
   3a700:	bne	3a880 <flatcc_json_printer_int16_enum_vector_field@@Base+0x250>
   3a704:	ldr	r2, [r4, #20]
   3a708:	ldr	r3, [r4, #16]
   3a70c:	cmp	r2, r3
   3a710:	bcs	3a8b0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x280>
   3a714:	ldrsh	r1, [r6, #4]
   3a718:	mov	r0, r4
   3a71c:	blx	r7
   3a720:	cmp	r5, #1
   3a724:	add	r6, r6, #6
   3a728:	sub	r5, r5, #2
   3a72c:	beq	3a804 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3a730:	mov	r8, #44	; 0x2c
   3a734:	mov	sl, #10
   3a738:	mov	r9, #32
   3a73c:	b	3a768 <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   3a740:	ldr	r2, [r4, #20]
   3a744:	ldr	r3, [r4, #16]
   3a748:	cmp	r2, r3
   3a74c:	bcs	3a7e0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b0>
   3a750:	ldrsh	r1, [r6], #2
   3a754:	mov	r0, r4
   3a758:	blx	r7
   3a75c:	cmp	r5, #0
   3a760:	sub	r5, r5, #1
   3a764:	beq	3a804 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d4>
   3a768:	ldr	r3, [r4, #20]
   3a76c:	add	r2, r3, #1
   3a770:	str	r2, [r4, #20]
   3a774:	strb	r8, [r3]
   3a778:	ldrb	r3, [r4, #25]
   3a77c:	cmp	r3, #0
   3a780:	beq	3a740 <flatcc_json_printer_int16_enum_vector_field@@Base+0x110>
   3a784:	ldr	r3, [r4, #20]
   3a788:	mov	r1, r9
   3a78c:	add	r2, r3, #1
   3a790:	str	r2, [r4, #20]
   3a794:	strb	sl, [r3]
   3a798:	ldrb	r3, [r4, #25]
   3a79c:	ldr	r2, [r4, #32]
   3a7a0:	ldr	ip, [r4, #20]
   3a7a4:	ldr	lr, [r4, #16]
   3a7a8:	mul	fp, r2, r3
   3a7ac:	mov	r0, ip
   3a7b0:	add	ip, ip, fp
   3a7b4:	cmp	lr, ip
   3a7b8:	mov	r2, fp
   3a7bc:	bcc	3a7f4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c4>
   3a7c0:	bl	145bc <memset@plt>
   3a7c4:	ldr	r2, [r4, #20]
   3a7c8:	add	r3, r2, fp
   3a7cc:	str	r3, [r4, #20]
   3a7d0:	b	3a750 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   3a7d4:	add	sp, sp, #4
   3a7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a7dc:	b	385e4 <flatcc_json_printer_int16_vector_field@@Base>
   3a7e0:	ldr	r3, [r4, #44]	; 0x2c
   3a7e4:	mov	r1, #0
   3a7e8:	mov	r0, r4
   3a7ec:	blx	r3
   3a7f0:	b	3a750 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   3a7f4:	mov	r1, fp
   3a7f8:	mov	r0, r4
   3a7fc:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3a800:	b	3a750 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   3a804:	ldrb	r3, [r4, #25]
   3a808:	cmp	r3, #0
   3a80c:	bne	3a82c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1fc>
   3a810:	ldr	r3, [r4, #20]
   3a814:	add	r1, r3, #1
   3a818:	mov	r2, #93	; 0x5d
   3a81c:	str	r1, [r4, #20]
   3a820:	strb	r2, [r3]
   3a824:	add	sp, sp, #4
   3a828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a82c:	ldr	r3, [r4, #20]
   3a830:	mov	r2, #10
   3a834:	add	r1, r3, #1
   3a838:	str	r1, [r4, #20]
   3a83c:	strb	r2, [r3]
   3a840:	ldr	r2, [r4, #32]
   3a844:	ldrb	r3, [r4, #25]
   3a848:	sub	r2, r2, #1
   3a84c:	ldr	r0, [r4, #20]
   3a850:	ldr	r1, [r4, #16]
   3a854:	mul	r5, r2, r3
   3a858:	str	r2, [r4, #32]
   3a85c:	add	r3, r0, r5
   3a860:	cmp	r1, r3
   3a864:	bcc	3a8a0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x270>
   3a868:	mov	r2, r5
   3a86c:	mov	r1, #32
   3a870:	bl	145bc <memset@plt>
   3a874:	ldr	r3, [r4, #20]
   3a878:	add	r3, r3, r5
   3a87c:	b	3a814 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e4>
   3a880:	ldr	r3, [r4, #20]
   3a884:	mov	r2, #10
   3a888:	add	r1, r3, #1
   3a88c:	str	r1, [r4, #20]
   3a890:	mov	r0, r4
   3a894:	strb	r2, [r3]
   3a898:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3a89c:	b	3a714 <flatcc_json_printer_int16_enum_vector_field@@Base+0xe4>
   3a8a0:	mov	r1, r5
   3a8a4:	mov	r0, r4
   3a8a8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3a8ac:	b	3a810 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e0>
   3a8b0:	ldr	r3, [r4, #44]	; 0x2c
   3a8b4:	mov	r0, r4
   3a8b8:	blx	r3
   3a8bc:	b	3a714 <flatcc_json_printer_int16_enum_vector_field@@Base+0xe4>

0003a8c0 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3a8c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a8c4:	sub	sp, sp, #4
   3a8c8:	ldrb	r5, [r0, #27]
   3a8cc:	ldr	r7, [sp, #44]	; 0x2c
   3a8d0:	cmp	r5, #0
   3a8d4:	ldr	r5, [sp, #40]	; 0x28
   3a8d8:	bne	3aa64 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1a4>
   3a8dc:	mov	r6, r3
   3a8e0:	add	r3, r2, #2
   3a8e4:	ldr	r2, [r1, #8]
   3a8e8:	lsl	r3, r3, #1
   3a8ec:	cmp	r2, r3
   3a8f0:	mov	lr, r1
   3a8f4:	bgt	3a900 <flatcc_json_printer_int32_enum_vector_field@@Base+0x40>
   3a8f8:	add	sp, sp, #4
   3a8fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a900:	ldr	r2, [r1, #4]
   3a904:	ldrh	r2, [r2, r3]
   3a908:	cmp	r2, #0
   3a90c:	beq	3a8f8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x38>
   3a910:	mov	r4, r0
   3a914:	ldr	r0, [r1]
   3a918:	adds	ip, r0, r2
   3a91c:	beq	3a8f8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x38>
   3a920:	ldr	r3, [r1, #16]
   3a924:	cmp	r3, #0
   3a928:	add	r3, r3, #1
   3a92c:	str	r3, [r1, #16]
   3a930:	ldrne	r3, [r4, #20]
   3a934:	movne	r1, #44	; 0x2c
   3a938:	addne	lr, r3, #1
   3a93c:	strne	lr, [r4, #20]
   3a940:	strbne	r1, [r3]
   3a944:	ldr	r3, [r0, r2]
   3a948:	mov	r1, r6
   3a94c:	mov	r2, r5
   3a950:	mov	r0, r4
   3a954:	ldr	r5, [ip, r3]
   3a958:	add	r6, ip, r3
   3a95c:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3a960:	ldr	r3, [r4, #32]
   3a964:	ldr	r2, [r4, #20]
   3a968:	add	r3, r3, #1
   3a96c:	add	r0, r2, #1
   3a970:	mov	r1, #91	; 0x5b
   3a974:	cmp	r5, #0
   3a978:	str	r3, [r4, #32]
   3a97c:	str	r0, [r4, #20]
   3a980:	strb	r1, [r2]
   3a984:	beq	3aa94 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3a988:	ldrb	r1, [r4, #25]
   3a98c:	cmp	r1, #0
   3a990:	bne	3ab10 <flatcc_json_printer_int32_enum_vector_field@@Base+0x250>
   3a994:	ldr	r2, [r4, #20]
   3a998:	ldr	r3, [r4, #16]
   3a99c:	cmp	r2, r3
   3a9a0:	bcs	3ab40 <flatcc_json_printer_int32_enum_vector_field@@Base+0x280>
   3a9a4:	ldr	r1, [r6, #4]
   3a9a8:	mov	r0, r4
   3a9ac:	blx	r7
   3a9b0:	cmp	r5, #1
   3a9b4:	add	r6, r6, #8
   3a9b8:	sub	r5, r5, #2
   3a9bc:	beq	3aa94 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3a9c0:	mov	r8, #44	; 0x2c
   3a9c4:	mov	sl, #10
   3a9c8:	mov	r9, #32
   3a9cc:	b	3a9f8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   3a9d0:	ldr	r2, [r4, #20]
   3a9d4:	ldr	r3, [r4, #16]
   3a9d8:	cmp	r2, r3
   3a9dc:	bcs	3aa70 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b0>
   3a9e0:	ldr	r1, [r6], #4
   3a9e4:	mov	r0, r4
   3a9e8:	blx	r7
   3a9ec:	cmp	r5, #0
   3a9f0:	sub	r5, r5, #1
   3a9f4:	beq	3aa94 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d4>
   3a9f8:	ldr	r3, [r4, #20]
   3a9fc:	add	r2, r3, #1
   3aa00:	str	r2, [r4, #20]
   3aa04:	strb	r8, [r3]
   3aa08:	ldrb	r3, [r4, #25]
   3aa0c:	cmp	r3, #0
   3aa10:	beq	3a9d0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x110>
   3aa14:	ldr	r3, [r4, #20]
   3aa18:	mov	r1, r9
   3aa1c:	add	r2, r3, #1
   3aa20:	str	r2, [r4, #20]
   3aa24:	strb	sl, [r3]
   3aa28:	ldrb	r3, [r4, #25]
   3aa2c:	ldr	r2, [r4, #32]
   3aa30:	ldr	ip, [r4, #20]
   3aa34:	ldr	lr, [r4, #16]
   3aa38:	mul	fp, r2, r3
   3aa3c:	mov	r0, ip
   3aa40:	add	ip, ip, fp
   3aa44:	cmp	lr, ip
   3aa48:	mov	r2, fp
   3aa4c:	bcc	3aa84 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c4>
   3aa50:	bl	145bc <memset@plt>
   3aa54:	ldr	r2, [r4, #20]
   3aa58:	add	r3, r2, fp
   3aa5c:	str	r3, [r4, #20]
   3aa60:	b	3a9e0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   3aa64:	add	sp, sp, #4
   3aa68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aa6c:	b	388a0 <flatcc_json_printer_int32_vector_field@@Base>
   3aa70:	ldr	r3, [r4, #44]	; 0x2c
   3aa74:	mov	r1, #0
   3aa78:	mov	r0, r4
   3aa7c:	blx	r3
   3aa80:	b	3a9e0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   3aa84:	mov	r1, fp
   3aa88:	mov	r0, r4
   3aa8c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3aa90:	b	3a9e0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   3aa94:	ldrb	r3, [r4, #25]
   3aa98:	cmp	r3, #0
   3aa9c:	bne	3aabc <flatcc_json_printer_int32_enum_vector_field@@Base+0x1fc>
   3aaa0:	ldr	r3, [r4, #20]
   3aaa4:	add	r1, r3, #1
   3aaa8:	mov	r2, #93	; 0x5d
   3aaac:	str	r1, [r4, #20]
   3aab0:	strb	r2, [r3]
   3aab4:	add	sp, sp, #4
   3aab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aabc:	ldr	r3, [r4, #20]
   3aac0:	mov	r2, #10
   3aac4:	add	r1, r3, #1
   3aac8:	str	r1, [r4, #20]
   3aacc:	strb	r2, [r3]
   3aad0:	ldr	r2, [r4, #32]
   3aad4:	ldrb	r3, [r4, #25]
   3aad8:	sub	r2, r2, #1
   3aadc:	ldr	r0, [r4, #20]
   3aae0:	ldr	r1, [r4, #16]
   3aae4:	mul	r5, r2, r3
   3aae8:	str	r2, [r4, #32]
   3aaec:	add	r3, r0, r5
   3aaf0:	cmp	r1, r3
   3aaf4:	bcc	3ab30 <flatcc_json_printer_int32_enum_vector_field@@Base+0x270>
   3aaf8:	mov	r2, r5
   3aafc:	mov	r1, #32
   3ab00:	bl	145bc <memset@plt>
   3ab04:	ldr	r3, [r4, #20]
   3ab08:	add	r3, r3, r5
   3ab0c:	b	3aaa4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1e4>
   3ab10:	ldr	r3, [r4, #20]
   3ab14:	mov	r2, #10
   3ab18:	add	r1, r3, #1
   3ab1c:	str	r1, [r4, #20]
   3ab20:	mov	r0, r4
   3ab24:	strb	r2, [r3]
   3ab28:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3ab2c:	b	3a9a4 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe4>
   3ab30:	mov	r1, r5
   3ab34:	mov	r0, r4
   3ab38:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3ab3c:	b	3aaa0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1e0>
   3ab40:	ldr	r3, [r4, #44]	; 0x2c
   3ab44:	mov	r0, r4
   3ab48:	blx	r3
   3ab4c:	b	3a9a4 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe4>

0003ab50 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3ab50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ab54:	sub	sp, sp, #4
   3ab58:	ldrb	r5, [r0, #27]
   3ab5c:	ldr	r7, [sp, #44]	; 0x2c
   3ab60:	cmp	r5, #0
   3ab64:	ldr	r5, [sp, #40]	; 0x28
   3ab68:	bne	3acf4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a4>
   3ab6c:	mov	r6, r3
   3ab70:	add	r3, r2, #2
   3ab74:	ldr	r2, [r1, #8]
   3ab78:	lsl	r3, r3, #1
   3ab7c:	cmp	r2, r3
   3ab80:	mov	lr, r1
   3ab84:	bgt	3ab90 <flatcc_json_printer_int64_enum_vector_field@@Base+0x40>
   3ab88:	add	sp, sp, #4
   3ab8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ab90:	ldr	r2, [r1, #4]
   3ab94:	ldrh	r2, [r2, r3]
   3ab98:	cmp	r2, #0
   3ab9c:	beq	3ab88 <flatcc_json_printer_int64_enum_vector_field@@Base+0x38>
   3aba0:	mov	r4, r0
   3aba4:	ldr	r0, [r1]
   3aba8:	adds	ip, r0, r2
   3abac:	beq	3ab88 <flatcc_json_printer_int64_enum_vector_field@@Base+0x38>
   3abb0:	ldr	r3, [r1, #16]
   3abb4:	cmp	r3, #0
   3abb8:	add	r3, r3, #1
   3abbc:	str	r3, [r1, #16]
   3abc0:	ldrne	r3, [r4, #20]
   3abc4:	movne	r1, #44	; 0x2c
   3abc8:	addne	lr, r3, #1
   3abcc:	strne	lr, [r4, #20]
   3abd0:	strbne	r1, [r3]
   3abd4:	ldr	r3, [r0, r2]
   3abd8:	mov	r1, r6
   3abdc:	mov	r2, r5
   3abe0:	mov	r0, r4
   3abe4:	ldr	r5, [ip, r3]
   3abe8:	add	r6, ip, r3
   3abec:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3abf0:	ldr	r3, [r4, #32]
   3abf4:	ldr	r2, [r4, #20]
   3abf8:	add	r3, r3, #1
   3abfc:	add	r0, r2, #1
   3ac00:	mov	r1, #91	; 0x5b
   3ac04:	cmp	r5, #0
   3ac08:	str	r3, [r4, #32]
   3ac0c:	str	r0, [r4, #20]
   3ac10:	strb	r1, [r2]
   3ac14:	beq	3ad24 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3ac18:	ldrb	r1, [r4, #25]
   3ac1c:	cmp	r1, #0
   3ac20:	bne	3ada0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x250>
   3ac24:	ldr	r2, [r4, #20]
   3ac28:	ldr	r3, [r4, #16]
   3ac2c:	cmp	r2, r3
   3ac30:	bcs	3add0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x280>
   3ac34:	ldrd	r2, [r6, #4]
   3ac38:	mov	r0, r4
   3ac3c:	blx	r7
   3ac40:	cmp	r5, #1
   3ac44:	add	r6, r6, #12
   3ac48:	sub	r5, r5, #2
   3ac4c:	beq	3ad24 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3ac50:	mov	r8, #44	; 0x2c
   3ac54:	mov	sl, #10
   3ac58:	mov	r9, #32
   3ac5c:	b	3ac88 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   3ac60:	ldr	r2, [r4, #20]
   3ac64:	ldr	r3, [r4, #16]
   3ac68:	cmp	r2, r3
   3ac6c:	bcs	3ad00 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b0>
   3ac70:	ldrd	r2, [r6], #8
   3ac74:	mov	r0, r4
   3ac78:	blx	r7
   3ac7c:	cmp	r5, #0
   3ac80:	sub	r5, r5, #1
   3ac84:	beq	3ad24 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d4>
   3ac88:	ldr	r3, [r4, #20]
   3ac8c:	add	r2, r3, #1
   3ac90:	str	r2, [r4, #20]
   3ac94:	strb	r8, [r3]
   3ac98:	ldrb	r3, [r4, #25]
   3ac9c:	cmp	r3, #0
   3aca0:	beq	3ac60 <flatcc_json_printer_int64_enum_vector_field@@Base+0x110>
   3aca4:	ldr	r3, [r4, #20]
   3aca8:	mov	r1, r9
   3acac:	add	r2, r3, #1
   3acb0:	str	r2, [r4, #20]
   3acb4:	strb	sl, [r3]
   3acb8:	ldrb	r3, [r4, #25]
   3acbc:	ldr	r2, [r4, #32]
   3acc0:	ldr	ip, [r4, #20]
   3acc4:	ldr	lr, [r4, #16]
   3acc8:	mul	fp, r2, r3
   3accc:	mov	r0, ip
   3acd0:	add	ip, ip, fp
   3acd4:	cmp	lr, ip
   3acd8:	mov	r2, fp
   3acdc:	bcc	3ad14 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c4>
   3ace0:	bl	145bc <memset@plt>
   3ace4:	ldr	r2, [r4, #20]
   3ace8:	add	r3, r2, fp
   3acec:	str	r3, [r4, #20]
   3acf0:	b	3ac70 <flatcc_json_printer_int64_enum_vector_field@@Base+0x120>
   3acf4:	add	sp, sp, #4
   3acf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3acfc:	b	38b4c <flatcc_json_printer_int64_vector_field@@Base>
   3ad00:	ldr	r3, [r4, #44]	; 0x2c
   3ad04:	mov	r1, #0
   3ad08:	mov	r0, r4
   3ad0c:	blx	r3
   3ad10:	b	3ac70 <flatcc_json_printer_int64_enum_vector_field@@Base+0x120>
   3ad14:	mov	r1, fp
   3ad18:	mov	r0, r4
   3ad1c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3ad20:	b	3ac70 <flatcc_json_printer_int64_enum_vector_field@@Base+0x120>
   3ad24:	ldrb	r3, [r4, #25]
   3ad28:	cmp	r3, #0
   3ad2c:	bne	3ad4c <flatcc_json_printer_int64_enum_vector_field@@Base+0x1fc>
   3ad30:	ldr	r3, [r4, #20]
   3ad34:	add	r1, r3, #1
   3ad38:	mov	r2, #93	; 0x5d
   3ad3c:	str	r1, [r4, #20]
   3ad40:	strb	r2, [r3]
   3ad44:	add	sp, sp, #4
   3ad48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad4c:	ldr	r3, [r4, #20]
   3ad50:	mov	r2, #10
   3ad54:	add	r1, r3, #1
   3ad58:	str	r1, [r4, #20]
   3ad5c:	strb	r2, [r3]
   3ad60:	ldr	r2, [r4, #32]
   3ad64:	ldrb	r3, [r4, #25]
   3ad68:	sub	r2, r2, #1
   3ad6c:	ldr	r0, [r4, #20]
   3ad70:	ldr	r1, [r4, #16]
   3ad74:	mul	r5, r2, r3
   3ad78:	str	r2, [r4, #32]
   3ad7c:	add	r3, r0, r5
   3ad80:	cmp	r1, r3
   3ad84:	bcc	3adc0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x270>
   3ad88:	mov	r2, r5
   3ad8c:	mov	r1, #32
   3ad90:	bl	145bc <memset@plt>
   3ad94:	ldr	r3, [r4, #20]
   3ad98:	add	r3, r3, r5
   3ad9c:	b	3ad34 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e4>
   3ada0:	ldr	r3, [r4, #20]
   3ada4:	mov	r2, #10
   3ada8:	add	r1, r3, #1
   3adac:	str	r1, [r4, #20]
   3adb0:	mov	r0, r4
   3adb4:	strb	r2, [r3]
   3adb8:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3adbc:	b	3ac34 <flatcc_json_printer_int64_enum_vector_field@@Base+0xe4>
   3adc0:	mov	r1, r5
   3adc4:	mov	r0, r4
   3adc8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3adcc:	b	3ad30 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e0>
   3add0:	ldr	r3, [r4, #44]	; 0x2c
   3add4:	mov	r0, r4
   3add8:	blx	r3
   3addc:	b	3ac34 <flatcc_json_printer_int64_enum_vector_field@@Base+0xe4>

0003ade0 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3ade0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ade4:	sub	sp, sp, #4
   3ade8:	ldrb	r5, [r0, #27]
   3adec:	ldr	r8, [sp, #44]	; 0x2c
   3adf0:	cmp	r5, #0
   3adf4:	ldr	r5, [sp, #40]	; 0x28
   3adf8:	bne	3af80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1a0>
   3adfc:	mov	r6, r3
   3ae00:	add	r3, r2, #2
   3ae04:	ldr	r2, [r1, #8]
   3ae08:	lsl	r3, r3, #1
   3ae0c:	cmp	r2, r3
   3ae10:	mov	lr, r1
   3ae14:	bgt	3ae20 <flatcc_json_printer_bool_enum_vector_field@@Base+0x40>
   3ae18:	add	sp, sp, #4
   3ae1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ae20:	ldr	r2, [r1, #4]
   3ae24:	ldrh	r2, [r2, r3]
   3ae28:	cmp	r2, #0
   3ae2c:	beq	3ae18 <flatcc_json_printer_bool_enum_vector_field@@Base+0x38>
   3ae30:	mov	r4, r0
   3ae34:	ldr	r0, [r1]
   3ae38:	adds	ip, r0, r2
   3ae3c:	beq	3ae18 <flatcc_json_printer_bool_enum_vector_field@@Base+0x38>
   3ae40:	ldr	r3, [r1, #16]
   3ae44:	cmp	r3, #0
   3ae48:	add	r3, r3, #1
   3ae4c:	str	r3, [r1, #16]
   3ae50:	ldrne	r3, [r4, #20]
   3ae54:	movne	r1, #44	; 0x2c
   3ae58:	addne	lr, r3, #1
   3ae5c:	strne	lr, [r4, #20]
   3ae60:	strbne	r1, [r3]
   3ae64:	ldr	r3, [r0, r2]
   3ae68:	mov	r1, r6
   3ae6c:	mov	r2, r5
   3ae70:	mov	r0, r4
   3ae74:	ldr	r6, [ip, r3]
   3ae78:	add	r7, ip, r3
   3ae7c:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3ae80:	ldr	r3, [r4, #32]
   3ae84:	ldr	r2, [r4, #20]
   3ae88:	add	r3, r3, #1
   3ae8c:	add	r0, r2, #1
   3ae90:	mov	r1, #91	; 0x5b
   3ae94:	cmp	r6, #0
   3ae98:	str	r3, [r4, #32]
   3ae9c:	str	r0, [r4, #20]
   3aea0:	strb	r1, [r2]
   3aea4:	beq	3afb0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
   3aea8:	ldrb	r1, [r4, #25]
   3aeac:	cmp	r1, #0
   3aeb0:	bne	3b02c <flatcc_json_printer_bool_enum_vector_field@@Base+0x24c>
   3aeb4:	ldr	r2, [r4, #20]
   3aeb8:	ldr	r3, [r4, #16]
   3aebc:	cmp	r2, r3
   3aec0:	bcs	3b05c <flatcc_json_printer_bool_enum_vector_field@@Base+0x27c>
   3aec4:	ldrb	r1, [r7, #4]
   3aec8:	mov	r0, r4
   3aecc:	blx	r8
   3aed0:	cmp	r6, #1
   3aed4:	add	r5, r7, #5
   3aed8:	beq	3afb0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
   3aedc:	add	r6, r6, #4
   3aee0:	mov	r9, #44	; 0x2c
   3aee4:	mov	fp, #10
   3aee8:	b	3af14 <flatcc_json_printer_bool_enum_vector_field@@Base+0x134>
   3aeec:	ldr	r2, [r4, #20]
   3aef0:	ldr	r3, [r4, #16]
   3aef4:	cmp	r2, r3
   3aef8:	bcs	3af8c <flatcc_json_printer_bool_enum_vector_field@@Base+0x1ac>
   3aefc:	ldrb	r1, [r5], #1
   3af00:	mov	r0, r4
   3af04:	blx	r8
   3af08:	sub	r3, r6, r5
   3af0c:	cmn	r7, r3
   3af10:	beq	3afb0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
   3af14:	ldr	r3, [r4, #20]
   3af18:	add	r2, r3, #1
   3af1c:	str	r2, [r4, #20]
   3af20:	strb	r9, [r3]
   3af24:	ldrb	r3, [r4, #25]
   3af28:	cmp	r3, #0
   3af2c:	beq	3aeec <flatcc_json_printer_bool_enum_vector_field@@Base+0x10c>
   3af30:	ldr	r3, [r4, #20]
   3af34:	mov	r1, #32
   3af38:	add	r2, r3, #1
   3af3c:	str	r2, [r4, #20]
   3af40:	strb	fp, [r3]
   3af44:	ldrb	r2, [r4, #25]
   3af48:	ldr	sl, [r4, #32]
   3af4c:	ldr	r3, [r4, #20]
   3af50:	ldr	ip, [r4, #16]
   3af54:	mul	sl, sl, r2
   3af58:	mov	r0, r3
   3af5c:	add	r3, r3, sl
   3af60:	cmp	ip, r3
   3af64:	mov	r2, sl
   3af68:	bcc	3afa0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1c0>
   3af6c:	bl	145bc <memset@plt>
   3af70:	ldr	r3, [r4, #20]
   3af74:	add	sl, r3, sl
   3af78:	str	sl, [r4, #20]
   3af7c:	b	3aefc <flatcc_json_printer_bool_enum_vector_field@@Base+0x11c>
   3af80:	add	sp, sp, #4
   3af84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3af88:	b	38e14 <flatcc_json_printer_bool_vector_field@@Base>
   3af8c:	ldr	r3, [r4, #44]	; 0x2c
   3af90:	mov	r1, #0
   3af94:	mov	r0, r4
   3af98:	blx	r3
   3af9c:	b	3aefc <flatcc_json_printer_bool_enum_vector_field@@Base+0x11c>
   3afa0:	mov	r1, sl
   3afa4:	mov	r0, r4
   3afa8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3afac:	b	3aefc <flatcc_json_printer_bool_enum_vector_field@@Base+0x11c>
   3afb0:	ldrb	r3, [r4, #25]
   3afb4:	cmp	r3, #0
   3afb8:	bne	3afd8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f8>
   3afbc:	ldr	r3, [r4, #20]
   3afc0:	add	r1, r3, #1
   3afc4:	mov	r2, #93	; 0x5d
   3afc8:	str	r1, [r4, #20]
   3afcc:	strb	r2, [r3]
   3afd0:	add	sp, sp, #4
   3afd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afd8:	ldr	r3, [r4, #20]
   3afdc:	mov	r2, #10
   3afe0:	add	r1, r3, #1
   3afe4:	str	r1, [r4, #20]
   3afe8:	strb	r2, [r3]
   3afec:	ldr	r2, [r4, #32]
   3aff0:	ldrb	r3, [r4, #25]
   3aff4:	sub	r2, r2, #1
   3aff8:	ldr	r0, [r4, #20]
   3affc:	ldr	r1, [r4, #16]
   3b000:	mul	r5, r2, r3
   3b004:	str	r2, [r4, #32]
   3b008:	add	r3, r0, r5
   3b00c:	cmp	r1, r3
   3b010:	bcc	3b04c <flatcc_json_printer_bool_enum_vector_field@@Base+0x26c>
   3b014:	mov	r2, r5
   3b018:	mov	r1, #32
   3b01c:	bl	145bc <memset@plt>
   3b020:	ldr	r3, [r4, #20]
   3b024:	add	r3, r3, r5
   3b028:	b	3afc0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1e0>
   3b02c:	ldr	r3, [r4, #20]
   3b030:	mov	r2, #10
   3b034:	add	r1, r3, #1
   3b038:	str	r1, [r4, #20]
   3b03c:	mov	r0, r4
   3b040:	strb	r2, [r3]
   3b044:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3b048:	b	3aec4 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe4>
   3b04c:	mov	r1, r5
   3b050:	mov	r0, r4
   3b054:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3b058:	b	3afbc <flatcc_json_printer_bool_enum_vector_field@@Base+0x1dc>
   3b05c:	ldr	r3, [r4, #44]	; 0x2c
   3b060:	mov	r0, r4
   3b064:	blx	r3
   3b068:	b	3aec4 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe4>

0003b06c <flatcc_json_printer_struct_vector_field@@Base>:
   3b06c:	add	r2, r2, #2
   3b070:	ldr	ip, [r1, #8]
   3b074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b078:	lsl	r2, r2, #1
   3b07c:	sub	sp, sp, #12
   3b080:	cmp	r2, ip
   3b084:	ldr	r9, [sp, #52]	; 0x34
   3b088:	ldr	r8, [sp, #56]	; 0x38
   3b08c:	bge	3b284 <flatcc_json_printer_struct_vector_field@@Base+0x218>
   3b090:	ldr	ip, [r1, #4]
   3b094:	ldrh	lr, [ip, r2]
   3b098:	cmp	lr, #0
   3b09c:	beq	3b284 <flatcc_json_printer_struct_vector_field@@Base+0x218>
   3b0a0:	ldr	r5, [r1]
   3b0a4:	adds	ip, r5, lr
   3b0a8:	beq	3b284 <flatcc_json_printer_struct_vector_field@@Base+0x218>
   3b0ac:	ldr	r2, [r1, #16]
   3b0b0:	cmp	r2, #0
   3b0b4:	add	r2, r2, #1
   3b0b8:	str	r2, [r1, #16]
   3b0bc:	ldrne	r2, [r0, #20]
   3b0c0:	movne	r1, #44	; 0x2c
   3b0c4:	addne	r4, r2, #1
   3b0c8:	strne	r4, [r0, #20]
   3b0cc:	strbne	r1, [r2]
   3b0d0:	mov	r1, r3
   3b0d4:	ldr	r3, [r5, lr]
   3b0d8:	mov	r4, r0
   3b0dc:	ldr	r2, [sp, #48]	; 0x30
   3b0e0:	ldr	r5, [ip, r3]
   3b0e4:	add	r6, ip, r3
   3b0e8:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3b0ec:	ldr	r3, [r4, #32]
   3b0f0:	ldr	r2, [r4, #20]
   3b0f4:	add	r3, r3, #1
   3b0f8:	add	r0, r2, #1
   3b0fc:	mov	r1, #91	; 0x5b
   3b100:	cmp	r5, #0
   3b104:	str	r3, [r4, #32]
   3b108:	str	r0, [r4, #20]
   3b10c:	strb	r1, [r2]
   3b110:	beq	3b264 <flatcc_json_printer_struct_vector_field@@Base+0x1f8>
   3b114:	ldrb	r1, [r4, #25]
   3b118:	cmp	r1, #0
   3b11c:	bne	3b3b4 <flatcc_json_printer_struct_vector_field@@Base+0x348>
   3b120:	ldr	r2, [r4, #20]
   3b124:	ldr	r3, [r4, #16]
   3b128:	cmp	r2, r3
   3b12c:	bcs	3b3d8 <flatcc_json_printer_struct_vector_field@@Base+0x36c>
   3b130:	ldr	r3, [r4, #32]
   3b134:	add	r1, r2, #1
   3b138:	add	r3, r3, #1
   3b13c:	mov	r0, #123	; 0x7b
   3b140:	add	r6, r6, #4
   3b144:	str	r3, [r4, #32]
   3b148:	str	r1, [r4, #20]
   3b14c:	strb	r0, [r2]
   3b150:	mov	r1, r6
   3b154:	mov	r0, r4
   3b158:	blx	r8
   3b15c:	ldrb	r3, [r4, #25]
   3b160:	cmp	r3, #0
   3b164:	bne	3b388 <flatcc_json_printer_struct_vector_field@@Base+0x31c>
   3b168:	ldr	r3, [r4, #20]
   3b16c:	cmp	r5, #1
   3b170:	add	r2, r3, #1
   3b174:	mov	r7, #125	; 0x7d
   3b178:	str	r2, [r4, #20]
   3b17c:	sub	r5, r5, #2
   3b180:	strb	r7, [r3]
   3b184:	beq	3b264 <flatcc_json_printer_struct_vector_field@@Base+0x1f8>
   3b188:	mov	fp, #44	; 0x2c
   3b18c:	mov	sl, #123	; 0x7b
   3b190:	b	3b1f0 <flatcc_json_printer_struct_vector_field@@Base+0x184>
   3b194:	ldr	r2, [r4, #20]
   3b198:	ldr	r3, [r4, #16]
   3b19c:	cmp	r2, r3
   3b1a0:	bcs	3b2e8 <flatcc_json_printer_struct_vector_field@@Base+0x27c>
   3b1a4:	ldr	r3, [r4, #32]
   3b1a8:	add	r1, r2, #1
   3b1ac:	add	r3, r3, #1
   3b1b0:	str	r3, [r4, #32]
   3b1b4:	str	r1, [r4, #20]
   3b1b8:	mov	r0, r4
   3b1bc:	mov	r1, r6
   3b1c0:	strb	sl, [r2]
   3b1c4:	blx	r8
   3b1c8:	ldrb	r3, [r4, #25]
   3b1cc:	cmp	r3, #0
   3b1d0:	bne	3b28c <flatcc_json_printer_struct_vector_field@@Base+0x220>
   3b1d4:	ldr	r1, [r4, #20]
   3b1d8:	cmp	r5, #0
   3b1dc:	add	r3, r1, #1
   3b1e0:	str	r3, [r4, #20]
   3b1e4:	sub	r5, r5, #1
   3b1e8:	strb	r7, [r1]
   3b1ec:	beq	3b264 <flatcc_json_printer_struct_vector_field@@Base+0x1f8>
   3b1f0:	ldr	r3, [r4, #20]
   3b1f4:	add	r6, r6, r9
   3b1f8:	add	r2, r3, #1
   3b1fc:	str	r2, [r4, #20]
   3b200:	strb	fp, [r3]
   3b204:	ldrb	r3, [r4, #25]
   3b208:	cmp	r3, #0
   3b20c:	beq	3b194 <flatcc_json_printer_struct_vector_field@@Base+0x128>
   3b210:	ldr	r3, [r4, #20]
   3b214:	add	r2, r3, #1
   3b218:	str	r2, [r4, #20]
   3b21c:	mov	r2, #10
   3b220:	strb	r2, [r3]
   3b224:	ldrb	r3, [r4, #25]
   3b228:	ldr	r2, [r4, #32]
   3b22c:	ldr	r0, [r4, #20]
   3b230:	ldr	r1, [r4, #16]
   3b234:	mul	r3, r2, r3
   3b238:	add	r2, r0, r3
   3b23c:	cmp	r1, r2
   3b240:	bcc	3b300 <flatcc_json_printer_struct_vector_field@@Base+0x294>
   3b244:	mov	r2, r3
   3b248:	mov	r1, #32
   3b24c:	str	r3, [sp, #4]
   3b250:	bl	145bc <memset@plt>
   3b254:	ldr	r2, [r4, #20]
   3b258:	ldr	r3, [sp, #4]
   3b25c:	add	r2, r2, r3
   3b260:	b	3b1a4 <flatcc_json_printer_struct_vector_field@@Base+0x138>
   3b264:	ldrb	r3, [r4, #25]
   3b268:	cmp	r3, #0
   3b26c:	bne	3b324 <flatcc_json_printer_struct_vector_field@@Base+0x2b8>
   3b270:	ldr	r3, [r4, #20]
   3b274:	add	r1, r3, #1
   3b278:	mov	r2, #93	; 0x5d
   3b27c:	str	r1, [r4, #20]
   3b280:	strb	r2, [r3]
   3b284:	add	sp, sp, #12
   3b288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b28c:	ldr	r3, [r4, #20]
   3b290:	add	r2, r3, #1
   3b294:	str	r2, [r4, #20]
   3b298:	mov	r2, #10
   3b29c:	strb	r2, [r3]
   3b2a0:	ldr	r2, [r4, #32]
   3b2a4:	ldrb	r1, [r4, #25]
   3b2a8:	sub	r2, r2, #1
   3b2ac:	ldr	r0, [r4, #20]
   3b2b0:	ldr	ip, [r4, #16]
   3b2b4:	mul	r3, r2, r1
   3b2b8:	str	r2, [r4, #32]
   3b2bc:	add	r2, r0, r3
   3b2c0:	cmp	ip, r2
   3b2c4:	bcc	3b314 <flatcc_json_printer_struct_vector_field@@Base+0x2a8>
   3b2c8:	mov	r2, r3
   3b2cc:	mov	r1, #32
   3b2d0:	str	r3, [sp, #4]
   3b2d4:	bl	145bc <memset@plt>
   3b2d8:	ldr	r1, [r4, #20]
   3b2dc:	ldr	r3, [sp, #4]
   3b2e0:	add	r1, r1, r3
   3b2e4:	b	3b1d8 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3b2e8:	ldr	r3, [r4, #44]	; 0x2c
   3b2ec:	mov	r1, #0
   3b2f0:	mov	r0, r4
   3b2f4:	blx	r3
   3b2f8:	ldr	r2, [r4, #20]
   3b2fc:	b	3b1a4 <flatcc_json_printer_struct_vector_field@@Base+0x138>
   3b300:	mov	r1, r3
   3b304:	mov	r0, r4
   3b308:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3b30c:	ldr	r2, [r4, #20]
   3b310:	b	3b1a4 <flatcc_json_printer_struct_vector_field@@Base+0x138>
   3b314:	mov	r1, r3
   3b318:	mov	r0, r4
   3b31c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3b320:	b	3b1d4 <flatcc_json_printer_struct_vector_field@@Base+0x168>
   3b324:	ldr	r3, [r4, #20]
   3b328:	mov	r2, #10
   3b32c:	add	r1, r3, #1
   3b330:	str	r1, [r4, #20]
   3b334:	strb	r2, [r3]
   3b338:	ldr	r2, [r4, #32]
   3b33c:	ldrb	r3, [r4, #25]
   3b340:	sub	r2, r2, #1
   3b344:	ldr	r0, [r4, #20]
   3b348:	ldr	r1, [r4, #16]
   3b34c:	mul	r5, r2, r3
   3b350:	str	r2, [r4, #32]
   3b354:	add	r3, r0, r5
   3b358:	cmp	r1, r3
   3b35c:	bcc	3b378 <flatcc_json_printer_struct_vector_field@@Base+0x30c>
   3b360:	mov	r2, r5
   3b364:	mov	r1, #32
   3b368:	bl	145bc <memset@plt>
   3b36c:	ldr	r3, [r4, #20]
   3b370:	add	r3, r3, r5
   3b374:	b	3b274 <flatcc_json_printer_struct_vector_field@@Base+0x208>
   3b378:	mov	r1, r5
   3b37c:	mov	r0, r4
   3b380:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3b384:	b	3b270 <flatcc_json_printer_struct_vector_field@@Base+0x204>
   3b388:	ldr	r3, [r4, #20]
   3b38c:	mov	r2, #10
   3b390:	add	r1, r3, #1
   3b394:	str	r1, [r4, #20]
   3b398:	strb	r2, [r3]
   3b39c:	ldr	r3, [r4, #32]
   3b3a0:	mov	r0, r4
   3b3a4:	sub	r3, r3, #1
   3b3a8:	str	r3, [r4, #32]
   3b3ac:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3b3b0:	b	3b168 <flatcc_json_printer_struct_vector_field@@Base+0xfc>
   3b3b4:	ldr	r3, [r4, #20]
   3b3b8:	mov	r2, #10
   3b3bc:	add	r1, r3, #1
   3b3c0:	str	r1, [r4, #20]
   3b3c4:	mov	r0, r4
   3b3c8:	strb	r2, [r3]
   3b3cc:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3b3d0:	ldr	r2, [r4, #20]
   3b3d4:	b	3b130 <flatcc_json_printer_struct_vector_field@@Base+0xc4>
   3b3d8:	ldr	r3, [r4, #44]	; 0x2c
   3b3dc:	mov	r0, r4
   3b3e0:	blx	r3
   3b3e4:	ldr	r2, [r4, #20]
   3b3e8:	b	3b130 <flatcc_json_printer_struct_vector_field@@Base+0xc4>

0003b3ec <flatcc_json_printer_string_vector_field@@Base>:
   3b3ec:	add	r2, r2, #2
   3b3f0:	ldr	ip, [r1, #8]
   3b3f4:	lsl	r2, r2, #1
   3b3f8:	cmp	ip, r2
   3b3fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b400:	ldr	r6, [sp, #40]	; 0x28
   3b404:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b408:	ldr	ip, [r1, #4]
   3b40c:	ldrh	ip, [ip, r2]
   3b410:	cmp	ip, #0
   3b414:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b418:	ldr	r5, [r1]
   3b41c:	adds	lr, r5, ip
   3b420:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b424:	ldr	r2, [r1, #16]
   3b428:	mov	r8, r3
   3b42c:	cmp	r2, #0
   3b430:	add	r2, r2, #1
   3b434:	str	r2, [r1, #16]
   3b438:	ldrne	r2, [r0, #20]
   3b43c:	movne	r1, #44	; 0x2c
   3b440:	addne	r4, r2, #1
   3b444:	strne	r4, [r0, #20]
   3b448:	strbne	r1, [r2]
   3b44c:	ldrb	r1, [r0, #25]
   3b450:	ldr	r3, [r5, ip]
   3b454:	mov	r4, r0
   3b458:	cmp	r1, #0
   3b45c:	add	r7, lr, r3
   3b460:	ldr	r5, [lr, r3]
   3b464:	ldr	r3, [r0, #20]
   3b468:	bne	3b6fc <flatcc_json_printer_string_vector_field@@Base+0x310>
   3b46c:	ldr	r2, [r0, #16]
   3b470:	cmp	r3, r2
   3b474:	bcc	3b484 <flatcc_json_printer_string_vector_field@@Base+0x98>
   3b478:	ldr	r3, [r0, #44]	; 0x2c
   3b47c:	blx	r3
   3b480:	ldr	r3, [r4, #20]
   3b484:	mov	r2, #34	; 0x22
   3b488:	strb	r2, [r3]
   3b48c:	ldrb	r3, [r4, #26]
   3b490:	ldr	r0, [r4, #20]
   3b494:	ldr	r2, [r4, #16]
   3b498:	cmp	r3, #0
   3b49c:	addeq	r0, r0, #1
   3b4a0:	add	r3, r0, r6
   3b4a4:	cmp	r2, r3
   3b4a8:	str	r0, [r4, #20]
   3b4ac:	bhi	3b67c <flatcc_json_printer_string_vector_field@@Base+0x290>
   3b4b0:	mov	r2, r6
   3b4b4:	mov	r1, r8
   3b4b8:	mov	r0, r4
   3b4bc:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3b4c0:	ldr	r6, [r4, #20]
   3b4c4:	mov	r3, #34	; 0x22
   3b4c8:	strb	r3, [r6]
   3b4cc:	ldr	r1, [r4, #20]
   3b4d0:	ldrb	r3, [r4, #26]
   3b4d4:	clz	r3, r3
   3b4d8:	lsr	r3, r3, #5
   3b4dc:	add	r2, r1, r3
   3b4e0:	add	r2, r2, #1
   3b4e4:	mov	r0, #58	; 0x3a
   3b4e8:	str	r2, [r4, #20]
   3b4ec:	strb	r0, [r1, r3]
   3b4f0:	ldr	r3, [r4, #20]
   3b4f4:	mov	lr, #32
   3b4f8:	mov	r1, #91	; 0x5b
   3b4fc:	strb	lr, [r3]
   3b500:	ldrb	r3, [r4, #25]
   3b504:	ldr	ip, [r4, #20]
   3b508:	ldr	r2, [r4, #32]
   3b50c:	adds	r3, r3, #0
   3b510:	movne	r3, #1
   3b514:	add	r0, ip, r3
   3b518:	add	r0, r0, #1
   3b51c:	add	r2, r2, #1
   3b520:	cmp	r5, #0
   3b524:	str	r0, [r4, #20]
   3b528:	str	r2, [r4, #32]
   3b52c:	strb	r1, [ip, r3]
   3b530:	beq	3b658 <flatcc_json_printer_string_vector_field@@Base+0x26c>
   3b534:	ldrb	r1, [r4, #25]
   3b538:	cmp	r1, #0
   3b53c:	bne	3b748 <flatcc_json_printer_string_vector_field@@Base+0x35c>
   3b540:	ldr	r2, [r4, #20]
   3b544:	ldr	r3, [r4, #16]
   3b548:	cmp	r2, r3
   3b54c:	bcs	3b798 <flatcc_json_printer_string_vector_field@@Base+0x3ac>
   3b550:	ldr	r3, [r7, #4]
   3b554:	mov	r0, r4
   3b558:	add	r3, r3, #4
   3b55c:	add	r1, r7, r3
   3b560:	add	r1, r1, #4
   3b564:	ldr	r2, [r7, r3]
   3b568:	bl	32054 <flatcc_json_parser_table_as_root@@Base+0x2114>
   3b56c:	cmp	r5, #1
   3b570:	sub	r5, r5, #2
   3b574:	beq	3b658 <flatcc_json_printer_string_vector_field@@Base+0x26c>
   3b578:	add	r7, r7, #8
   3b57c:	mov	r8, #44	; 0x2c
   3b580:	mov	sl, #10
   3b584:	mov	r9, #32
   3b588:	b	3b5c4 <flatcc_json_printer_string_vector_field@@Base+0x1d8>
   3b58c:	ldr	r2, [r4, #20]
   3b590:	ldr	r3, [r4, #16]
   3b594:	cmp	r2, r3
   3b598:	bcs	3b634 <flatcc_json_printer_string_vector_field@@Base+0x248>
   3b59c:	ldr	r3, [r6]
   3b5a0:	mov	r0, r4
   3b5a4:	add	r1, r6, r3
   3b5a8:	add	r1, r1, #4
   3b5ac:	ldr	r2, [r6, r3]
   3b5b0:	bl	32054 <flatcc_json_parser_table_as_root@@Base+0x2114>
   3b5b4:	cmp	r5, #0
   3b5b8:	add	r7, r7, #4
   3b5bc:	sub	r5, r5, #1
   3b5c0:	beq	3b658 <flatcc_json_printer_string_vector_field@@Base+0x26c>
   3b5c4:	ldr	r3, [r4, #20]
   3b5c8:	mov	r6, r7
   3b5cc:	add	r2, r3, #1
   3b5d0:	str	r2, [r4, #20]
   3b5d4:	strb	r8, [r3]
   3b5d8:	ldrb	r3, [r4, #25]
   3b5dc:	cmp	r3, #0
   3b5e0:	beq	3b58c <flatcc_json_printer_string_vector_field@@Base+0x1a0>
   3b5e4:	ldr	r3, [r4, #20]
   3b5e8:	mov	r1, r9
   3b5ec:	add	r2, r3, #1
   3b5f0:	str	r2, [r4, #20]
   3b5f4:	strb	sl, [r3]
   3b5f8:	ldrb	r3, [r4, #25]
   3b5fc:	ldr	r2, [r4, #32]
   3b600:	ldr	ip, [r4, #20]
   3b604:	ldr	lr, [r4, #16]
   3b608:	mul	fp, r2, r3
   3b60c:	mov	r0, ip
   3b610:	add	ip, ip, fp
   3b614:	cmp	lr, ip
   3b618:	mov	r2, fp
   3b61c:	bcc	3b648 <flatcc_json_printer_string_vector_field@@Base+0x25c>
   3b620:	bl	145bc <memset@plt>
   3b624:	ldr	r2, [r4, #20]
   3b628:	add	r3, r2, fp
   3b62c:	str	r3, [r4, #20]
   3b630:	b	3b59c <flatcc_json_printer_string_vector_field@@Base+0x1b0>
   3b634:	ldr	r3, [r4, #44]	; 0x2c
   3b638:	mov	r1, #0
   3b63c:	mov	r0, r4
   3b640:	blx	r3
   3b644:	b	3b59c <flatcc_json_printer_string_vector_field@@Base+0x1b0>
   3b648:	mov	r1, fp
   3b64c:	mov	r0, r4
   3b650:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3b654:	b	3b59c <flatcc_json_printer_string_vector_field@@Base+0x1b0>
   3b658:	ldrb	r3, [r4, #25]
   3b65c:	cmp	r3, #0
   3b660:	bne	3b698 <flatcc_json_printer_string_vector_field@@Base+0x2ac>
   3b664:	ldr	r3, [r4, #20]
   3b668:	add	r1, r3, #1
   3b66c:	mov	r2, #93	; 0x5d
   3b670:	str	r1, [r4, #20]
   3b674:	strb	r2, [r3]
   3b678:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b67c:	mov	r2, r6
   3b680:	mov	r1, r8
   3b684:	bl	14544 <memcpy@plt>
   3b688:	ldr	r3, [r4, #20]
   3b68c:	add	r6, r3, r6
   3b690:	str	r6, [r4, #20]
   3b694:	b	3b4c4 <flatcc_json_printer_string_vector_field@@Base+0xd8>
   3b698:	ldr	r3, [r4, #20]
   3b69c:	mov	r2, #10
   3b6a0:	add	r1, r3, #1
   3b6a4:	str	r1, [r4, #20]
   3b6a8:	strb	r2, [r3]
   3b6ac:	ldr	r2, [r4, #32]
   3b6b0:	ldrb	r3, [r4, #25]
   3b6b4:	sub	r2, r2, #1
   3b6b8:	ldr	r0, [r4, #20]
   3b6bc:	ldr	r1, [r4, #16]
   3b6c0:	mul	r5, r2, r3
   3b6c4:	str	r2, [r4, #32]
   3b6c8:	add	r3, r0, r5
   3b6cc:	cmp	r1, r3
   3b6d0:	bcc	3b6ec <flatcc_json_printer_string_vector_field@@Base+0x300>
   3b6d4:	mov	r2, r5
   3b6d8:	mov	r1, #32
   3b6dc:	bl	145bc <memset@plt>
   3b6e0:	ldr	r3, [r4, #20]
   3b6e4:	add	r3, r3, r5
   3b6e8:	b	3b668 <flatcc_json_printer_string_vector_field@@Base+0x27c>
   3b6ec:	mov	r1, r5
   3b6f0:	mov	r0, r4
   3b6f4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3b6f8:	b	3b664 <flatcc_json_printer_string_vector_field@@Base+0x278>
   3b6fc:	mov	r2, #10
   3b700:	add	r1, r3, #1
   3b704:	str	r1, [r0, #20]
   3b708:	strb	r2, [r3]
   3b70c:	ldrb	r3, [r0, #25]
   3b710:	ldr	r9, [r0, #32]
   3b714:	ldr	r0, [r0, #20]
   3b718:	ldr	r2, [r4, #16]
   3b71c:	mul	r9, r9, r3
   3b720:	add	r3, r0, r9
   3b724:	cmp	r2, r3
   3b728:	bcc	3b7a8 <flatcc_json_printer_string_vector_field@@Base+0x3bc>
   3b72c:	mov	r2, r9
   3b730:	mov	r1, #32
   3b734:	bl	145bc <memset@plt>
   3b738:	ldr	r3, [r4, #20]
   3b73c:	add	r3, r3, r9
   3b740:	str	r3, [r4, #20]
   3b744:	b	3b484 <flatcc_json_printer_string_vector_field@@Base+0x98>
   3b748:	ldr	r3, [r4, #20]
   3b74c:	mov	r2, #10
   3b750:	add	r1, r3, #1
   3b754:	str	r1, [r4, #20]
   3b758:	strb	r2, [r3]
   3b75c:	ldrb	r3, [r4, #25]
   3b760:	ldr	r6, [r4, #32]
   3b764:	ldr	r0, [r4, #20]
   3b768:	ldr	r2, [r4, #16]
   3b76c:	mul	r6, r6, r3
   3b770:	add	r3, r0, r6
   3b774:	cmp	r2, r3
   3b778:	bcc	3b7bc <flatcc_json_printer_string_vector_field@@Base+0x3d0>
   3b77c:	mov	r2, r6
   3b780:	mov	r1, lr
   3b784:	bl	145bc <memset@plt>
   3b788:	ldr	r3, [r4, #20]
   3b78c:	add	r6, r3, r6
   3b790:	str	r6, [r4, #20]
   3b794:	b	3b550 <flatcc_json_printer_string_vector_field@@Base+0x164>
   3b798:	ldr	r3, [r4, #44]	; 0x2c
   3b79c:	mov	r0, r4
   3b7a0:	blx	r3
   3b7a4:	b	3b550 <flatcc_json_printer_string_vector_field@@Base+0x164>
   3b7a8:	mov	r1, r9
   3b7ac:	mov	r0, r4
   3b7b0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3b7b4:	ldr	r3, [r4, #20]
   3b7b8:	b	3b484 <flatcc_json_printer_string_vector_field@@Base+0x98>
   3b7bc:	mov	r1, r6
   3b7c0:	mov	r0, r4
   3b7c4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3b7c8:	b	3b550 <flatcc_json_printer_string_vector_field@@Base+0x164>

0003b7cc <flatcc_json_printer_table_vector_field@@Base>:
   3b7cc:	add	r2, r2, #2
   3b7d0:	ldr	ip, [r1, #8]
   3b7d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b7d8:	lsl	r2, r2, #1
   3b7dc:	sub	sp, sp, #44	; 0x2c
   3b7e0:	cmp	ip, r2
   3b7e4:	ldr	r6, [sp, #80]	; 0x50
   3b7e8:	ble	3b93c <flatcc_json_printer_table_vector_field@@Base+0x170>
   3b7ec:	ldr	ip, [r1, #4]
   3b7f0:	ldrh	ip, [ip, r2]
   3b7f4:	cmp	ip, #0
   3b7f8:	beq	3b93c <flatcc_json_printer_table_vector_field@@Base+0x170>
   3b7fc:	ldr	r5, [r1]
   3b800:	adds	lr, r5, ip
   3b804:	beq	3b93c <flatcc_json_printer_table_vector_field@@Base+0x170>
   3b808:	ldr	r2, [r1, #16]
   3b80c:	mov	r9, r3
   3b810:	cmp	r2, #0
   3b814:	add	r2, r2, #1
   3b818:	str	r2, [r1, #16]
   3b81c:	ldrne	r2, [r0, #20]
   3b820:	movne	r4, #44	; 0x2c
   3b824:	addne	r7, r2, #1
   3b828:	strne	r7, [r0, #20]
   3b82c:	strbne	r4, [r2]
   3b830:	mov	r7, r1
   3b834:	ldrb	r1, [r0, #25]
   3b838:	ldr	r3, [r5, ip]
   3b83c:	mov	r4, r0
   3b840:	cmp	r1, #0
   3b844:	add	r8, lr, r3
   3b848:	ldr	r5, [lr, r3]
   3b84c:	ldr	r3, [r0, #20]
   3b850:	bne	3bba4 <flatcc_json_printer_table_vector_field@@Base+0x3d8>
   3b854:	ldr	r2, [r0, #16]
   3b858:	cmp	r3, r2
   3b85c:	bcc	3b86c <flatcc_json_printer_table_vector_field@@Base+0xa0>
   3b860:	ldr	r3, [r0, #44]	; 0x2c
   3b864:	blx	r3
   3b868:	ldr	r3, [r4, #20]
   3b86c:	mov	r2, #34	; 0x22
   3b870:	strb	r2, [r3]
   3b874:	ldrb	r3, [r4, #26]
   3b878:	ldr	r0, [r4, #20]
   3b87c:	ldr	r2, [r4, #16]
   3b880:	cmp	r3, #0
   3b884:	addeq	r0, r0, #1
   3b888:	add	r3, r0, r6
   3b88c:	cmp	r2, r3
   3b890:	str	r0, [r4, #20]
   3b894:	bhi	3b944 <flatcc_json_printer_table_vector_field@@Base+0x178>
   3b898:	mov	r2, r6
   3b89c:	mov	r1, r9
   3b8a0:	mov	r0, r4
   3b8a4:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3b8a8:	ldr	r6, [r4, #20]
   3b8ac:	mov	r3, #34	; 0x22
   3b8b0:	strb	r3, [r6]
   3b8b4:	ldr	r1, [r4, #20]
   3b8b8:	ldrb	r3, [r4, #26]
   3b8bc:	clz	r3, r3
   3b8c0:	lsr	r3, r3, #5
   3b8c4:	add	r2, r1, r3
   3b8c8:	add	r2, r2, #1
   3b8cc:	mov	r0, #58	; 0x3a
   3b8d0:	str	r2, [r4, #20]
   3b8d4:	strb	r0, [r1, r3]
   3b8d8:	ldr	r3, [r4, #20]
   3b8dc:	mov	r2, #32
   3b8e0:	mov	ip, #91	; 0x5b
   3b8e4:	strb	r2, [r3]
   3b8e8:	ldrb	r3, [r4, #25]
   3b8ec:	ldr	r0, [r4, #20]
   3b8f0:	ldr	r2, [r4, #32]
   3b8f4:	adds	r3, r3, #0
   3b8f8:	movne	r3, #1
   3b8fc:	add	r1, r0, r3
   3b900:	add	r1, r1, #1
   3b904:	add	r2, r2, #1
   3b908:	cmp	r5, #0
   3b90c:	str	r1, [r4, #20]
   3b910:	str	r2, [r4, #32]
   3b914:	strb	ip, [r0, r3]
   3b918:	bne	3b9b4 <flatcc_json_printer_table_vector_field@@Base+0x1e8>
   3b91c:	ldrb	r3, [r4, #25]
   3b920:	cmp	r3, #0
   3b924:	bne	3b960 <flatcc_json_printer_table_vector_field@@Base+0x194>
   3b928:	ldr	r3, [r4, #20]
   3b92c:	add	r1, r3, #1
   3b930:	mov	r2, #93	; 0x5d
   3b934:	str	r1, [r4, #20]
   3b938:	strb	r2, [r3]
   3b93c:	add	sp, sp, #44	; 0x2c
   3b940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b944:	mov	r2, r6
   3b948:	mov	r1, r9
   3b94c:	bl	14544 <memcpy@plt>
   3b950:	ldr	r3, [r4, #20]
   3b954:	add	r6, r3, r6
   3b958:	str	r6, [r4, #20]
   3b95c:	b	3b8ac <flatcc_json_printer_table_vector_field@@Base+0xe0>
   3b960:	ldr	r3, [r4, #20]
   3b964:	mov	r2, #10
   3b968:	add	r1, r3, #1
   3b96c:	str	r1, [r4, #20]
   3b970:	strb	r2, [r3]
   3b974:	ldr	r2, [r4, #32]
   3b978:	ldrb	r3, [r4, #25]
   3b97c:	sub	r2, r2, #1
   3b980:	ldr	r0, [r4, #20]
   3b984:	ldr	r1, [r4, #16]
   3b988:	mul	r5, r2, r3
   3b98c:	str	r2, [r4, #32]
   3b990:	add	r3, r0, r5
   3b994:	cmp	r1, r3
   3b998:	bcc	3ba34 <flatcc_json_printer_table_vector_field@@Base+0x268>
   3b99c:	mov	r2, r5
   3b9a0:	mov	r1, #32
   3b9a4:	bl	145bc <memset@plt>
   3b9a8:	ldr	r3, [r4, #20]
   3b9ac:	add	r3, r3, r5
   3b9b0:	b	3b92c <flatcc_json_printer_table_vector_field@@Base+0x160>
   3b9b4:	ldr	r3, [r7, #12]
   3b9b8:	add	r6, r8, #4
   3b9bc:	subs	r3, r3, #1
   3b9c0:	bne	3ba44 <flatcc_json_printer_table_vector_field@@Base+0x278>
   3b9c4:	ldr	r3, [r4, #36]	; 0x24
   3b9c8:	cmp	r3, #0
   3b9cc:	moveq	r3, #2
   3b9d0:	streq	r3, [r4, #36]	; 0x24
   3b9d4:	sub	r5, r5, #1
   3b9d8:	mov	sl, #44	; 0x2c
   3b9dc:	mov	fp, #123	; 0x7b
   3b9e0:	add	r9, sp, #20
   3b9e4:	sub	r5, r5, #1
   3b9e8:	cmn	r5, #1
   3b9ec:	mov	r1, #2
   3b9f0:	beq	3b91c <flatcc_json_printer_table_vector_field@@Base+0x150>
   3b9f4:	ldr	r3, [r4, #20]
   3b9f8:	add	r6, r6, #4
   3b9fc:	add	r2, r3, #1
   3ba00:	str	r2, [r4, #20]
   3ba04:	strb	sl, [r3]
   3ba08:	ldr	r3, [r7, #12]
   3ba0c:	subs	r3, r3, #1
   3ba10:	bne	3bac0 <flatcc_json_printer_table_vector_field@@Base+0x2f4>
   3ba14:	ldr	r3, [r4, #36]	; 0x24
   3ba18:	sub	r5, r5, #1
   3ba1c:	cmp	r3, #0
   3ba20:	streq	r1, [r4, #36]	; 0x24
   3ba24:	cmn	r5, #1
   3ba28:	mov	r1, #2
   3ba2c:	bne	3b9f4 <flatcc_json_printer_table_vector_field@@Base+0x228>
   3ba30:	b	3b91c <flatcc_json_printer_table_vector_field@@Base+0x150>
   3ba34:	mov	r1, r5
   3ba38:	mov	r0, r4
   3ba3c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3ba40:	b	3b928 <flatcc_json_printer_table_vector_field@@Base+0x15c>
   3ba44:	ldr	r1, [r4, #32]
   3ba48:	ldr	r2, [r8, #4]
   3ba4c:	ldr	r0, [r4, #20]
   3ba50:	add	r1, r1, #1
   3ba54:	str	r1, [r4, #32]
   3ba58:	add	lr, r0, #1
   3ba5c:	mov	ip, #123	; 0x7b
   3ba60:	mov	r1, #0
   3ba64:	str	lr, [r4, #20]
   3ba68:	strb	ip, [r0]
   3ba6c:	str	r3, [sp, #12]
   3ba70:	str	r1, [sp, #16]
   3ba74:	ldr	r1, [r6, r2]
   3ba78:	add	r3, r6, r2
   3ba7c:	sub	r2, r3, r1
   3ba80:	mov	r0, r4
   3ba84:	ldrh	ip, [r2]
   3ba88:	mov	r1, sp
   3ba8c:	str	r3, [sp]
   3ba90:	ldr	r3, [sp, #84]	; 0x54
   3ba94:	stmib	sp, {r2, ip}
   3ba98:	blx	r3
   3ba9c:	ldrb	r3, [r4, #25]
   3baa0:	cmp	r3, #0
   3baa4:	bne	3bc04 <flatcc_json_printer_table_vector_field@@Base+0x438>
   3baa8:	ldr	r3, [r4, #20]
   3baac:	mov	r2, #125	; 0x7d
   3bab0:	add	r1, r3, #1
   3bab4:	str	r1, [r4, #20]
   3bab8:	strb	r2, [r3]
   3babc:	b	3b9d4 <flatcc_json_printer_table_vector_field@@Base+0x208>
   3bac0:	ldr	r1, [r4, #32]
   3bac4:	ldr	r2, [r6]
   3bac8:	ldr	r0, [r4, #20]
   3bacc:	add	r1, r1, #1
   3bad0:	str	r1, [r4, #32]
   3bad4:	add	ip, r0, #1
   3bad8:	mov	r1, #0
   3badc:	str	ip, [r4, #20]
   3bae0:	strb	fp, [r0]
   3bae4:	str	r3, [sp, #32]
   3bae8:	str	r1, [sp, #36]	; 0x24
   3baec:	ldr	r1, [r6, r2]
   3baf0:	add	r3, r6, r2
   3baf4:	sub	r2, r3, r1
   3baf8:	mov	r0, r4
   3bafc:	ldrh	ip, [r2]
   3bb00:	mov	r1, r9
   3bb04:	str	r3, [sp, #20]
   3bb08:	ldr	r3, [sp, #84]	; 0x54
   3bb0c:	str	r2, [sp, #24]
   3bb10:	str	ip, [sp, #28]
   3bb14:	blx	r3
   3bb18:	ldrb	r3, [r4, #25]
   3bb1c:	cmp	r3, #0
   3bb20:	ldr	r3, [r4, #20]
   3bb24:	bne	3bb3c <flatcc_json_printer_table_vector_field@@Base+0x370>
   3bb28:	add	r2, r3, #1
   3bb2c:	str	r2, [r4, #20]
   3bb30:	mov	r2, #125	; 0x7d
   3bb34:	strb	r2, [r3]
   3bb38:	b	3b9e4 <flatcc_json_printer_table_vector_field@@Base+0x218>
   3bb3c:	add	r2, r3, #1
   3bb40:	str	r2, [r4, #20]
   3bb44:	mov	r2, #10
   3bb48:	strb	r2, [r3]
   3bb4c:	ldr	ip, [r4, #32]
   3bb50:	ldrb	r3, [r4, #25]
   3bb54:	sub	ip, ip, #1
   3bb58:	ldr	lr, [r4, #20]
   3bb5c:	mov	r1, #32
   3bb60:	mul	r8, ip, r3
   3bb64:	ldr	r3, [r4, #16]
   3bb68:	mov	r0, lr
   3bb6c:	add	lr, lr, r8
   3bb70:	cmp	r3, lr
   3bb74:	mov	r2, r8
   3bb78:	str	ip, [r4, #32]
   3bb7c:	bcc	3bb90 <flatcc_json_printer_table_vector_field@@Base+0x3c4>
   3bb80:	bl	145bc <memset@plt>
   3bb84:	ldr	r3, [r4, #20]
   3bb88:	add	r3, r3, r8
   3bb8c:	b	3bb28 <flatcc_json_printer_table_vector_field@@Base+0x35c>
   3bb90:	mov	r1, r8
   3bb94:	mov	r0, r4
   3bb98:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3bb9c:	ldr	r3, [r4, #20]
   3bba0:	b	3bb28 <flatcc_json_printer_table_vector_field@@Base+0x35c>
   3bba4:	mov	r2, #10
   3bba8:	add	r1, r3, #1
   3bbac:	str	r1, [r0, #20]
   3bbb0:	strb	r2, [r3]
   3bbb4:	ldrb	r3, [r0, #25]
   3bbb8:	ldr	sl, [r0, #32]
   3bbbc:	ldr	r0, [r0, #20]
   3bbc0:	ldr	r2, [r4, #16]
   3bbc4:	mul	sl, sl, r3
   3bbc8:	add	r3, r0, sl
   3bbcc:	cmp	r2, r3
   3bbd0:	bcc	3bbf0 <flatcc_json_printer_table_vector_field@@Base+0x424>
   3bbd4:	mov	r2, sl
   3bbd8:	mov	r1, #32
   3bbdc:	bl	145bc <memset@plt>
   3bbe0:	ldr	r3, [r4, #20]
   3bbe4:	add	r3, r3, sl
   3bbe8:	str	r3, [r4, #20]
   3bbec:	b	3b86c <flatcc_json_printer_table_vector_field@@Base+0xa0>
   3bbf0:	mov	r1, sl
   3bbf4:	mov	r0, r4
   3bbf8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3bbfc:	ldr	r3, [r4, #20]
   3bc00:	b	3b86c <flatcc_json_printer_table_vector_field@@Base+0xa0>
   3bc04:	ldr	r3, [r4, #20]
   3bc08:	mov	r2, #10
   3bc0c:	add	r1, r3, #1
   3bc10:	str	r1, [r4, #20]
   3bc14:	strb	r2, [r3]
   3bc18:	ldr	r3, [r4, #32]
   3bc1c:	mov	r0, r4
   3bc20:	sub	r3, r3, #1
   3bc24:	str	r3, [r4, #32]
   3bc28:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3bc2c:	b	3baa8 <flatcc_json_printer_table_vector_field@@Base+0x2dc>

0003bc30 <flatcc_json_printer_union_vector_field@@Base>:
   3bc30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bc34:	mov	r8, r2
   3bc38:	add	r2, r2, #1
   3bc3c:	mov	r5, r1
   3bc40:	ldr	r1, [r1, #8]
   3bc44:	sub	sp, sp, #140	; 0x8c
   3bc48:	lsl	r2, r2, #1
   3bc4c:	cmp	r2, r1
   3bc50:	mov	r4, r0
   3bc54:	mov	r9, r3
   3bc58:	ldr	r6, [sp, #176]	; 0xb0
   3bc5c:	movge	r7, #0
   3bc60:	bge	3bc78 <flatcc_json_printer_union_vector_field@@Base+0x48>
   3bc64:	ldr	r3, [r5, #4]
   3bc68:	ldrh	r7, [r3, r2]
   3bc6c:	cmp	r7, #0
   3bc70:	ldrne	r3, [r5]
   3bc74:	addne	r7, r3, r7
   3bc78:	add	r2, r2, #2
   3bc7c:	cmp	r2, r1
   3bc80:	bge	3bea0 <flatcc_json_printer_union_vector_field@@Base+0x270>
   3bc84:	ldr	r3, [r5, #4]
   3bc88:	ldrh	sl, [r3, r2]
   3bc8c:	cmp	sl, #0
   3bc90:	beq	3bea0 <flatcc_json_printer_union_vector_field@@Base+0x270>
   3bc94:	ldr	r3, [r5]
   3bc98:	cmp	r6, #100	; 0x64
   3bc9c:	mov	r2, r3
   3bca0:	str	r3, [sp, #12]
   3bca4:	ldr	r3, [r5, #12]
   3bca8:	add	fp, r2, sl
   3bcac:	str	r3, [sp, #20]
   3bcb0:	bgt	3bed4 <flatcc_json_printer_union_vector_field@@Base+0x2a4>
   3bcb4:	add	r3, sp, #28
   3bcb8:	mov	r0, r3
   3bcbc:	mov	r2, r6
   3bcc0:	mov	r1, r9
   3bcc4:	bl	14544 <memcpy@plt>
   3bcc8:	ldr	r2, [pc, #644]	; 3bf54 <flatcc_json_printer_union_vector_field@@Base+0x324>
   3bccc:	cmp	fp, #0
   3bcd0:	cmpne	r7, #0
   3bcd4:	add	r2, pc, r2
   3bcd8:	ldrb	ip, [r2, #4]
   3bcdc:	mov	r3, r0
   3bce0:	add	r1, r0, r6
   3bce4:	ldr	r0, [r2]
   3bce8:	str	r0, [r3, r6]
   3bcec:	strb	ip, [r1, #4]
   3bcf0:	beq	3beb0 <flatcc_json_printer_union_vector_field@@Base+0x280>
   3bcf4:	ldr	r2, [sp, #180]	; 0xb4
   3bcf8:	add	r1, r6, #5
   3bcfc:	str	r2, [sp, #4]
   3bd00:	str	r1, [sp]
   3bd04:	sub	r2, r8, #1
   3bd08:	mov	r1, r5
   3bd0c:	mov	r0, r4
   3bd10:	bl	396dc <flatcc_json_printer_utype_enum_vector_field@@Base>
   3bd14:	ldr	r3, [r5, #16]
   3bd18:	mov	r0, r4
   3bd1c:	cmp	r3, #0
   3bd20:	add	r3, r3, #1
   3bd24:	str	r3, [r5, #16]
   3bd28:	ldrne	r3, [r4, #20]
   3bd2c:	movne	r2, #44	; 0x2c
   3bd30:	addne	r1, r3, #1
   3bd34:	strne	r1, [r4, #20]
   3bd38:	strbne	r2, [r3]
   3bd3c:	ldr	r3, [sp, #12]
   3bd40:	mov	r2, r6
   3bd44:	mov	r1, r9
   3bd48:	ldr	r3, [r3, sl]
   3bd4c:	ldr	r6, [r7]
   3bd50:	add	r5, fp, r3
   3bd54:	ldr	r8, [fp, r3]
   3bd58:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3bd5c:	ldr	r3, [r4, #32]
   3bd60:	ldr	r2, [r4, #20]
   3bd64:	add	r3, r3, #1
   3bd68:	add	r0, r2, #1
   3bd6c:	mov	r1, #91	; 0x5b
   3bd70:	cmp	r8, #0
   3bd74:	str	r3, [r4, #32]
   3bd78:	str	r0, [r4, #20]
   3bd7c:	strb	r1, [r2]
   3bd80:	beq	3be78 <flatcc_json_printer_union_vector_field@@Base+0x248>
   3bd84:	add	r7, r7, r6
   3bd88:	add	r5, r5, #4
   3bd8c:	ldrb	r3, [r7, #4]
   3bd90:	cmp	r3, #0
   3bd94:	bne	3bf38 <flatcc_json_printer_union_vector_field@@Base+0x308>
   3bd98:	ldr	r3, [r4, #20]
   3bd9c:	mov	r2, #110	; 0x6e
   3bda0:	add	r1, r3, #1
   3bda4:	str	r1, [r4, #20]
   3bda8:	strb	r2, [r3]
   3bdac:	ldr	r3, [r4, #20]
   3bdb0:	mov	r2, #117	; 0x75
   3bdb4:	add	r1, r3, #1
   3bdb8:	str	r1, [r4, #20]
   3bdbc:	strb	r2, [r3]
   3bdc0:	ldr	r3, [r4, #20]
   3bdc4:	mov	r2, #108	; 0x6c
   3bdc8:	add	r1, r3, #1
   3bdcc:	str	r1, [r4, #20]
   3bdd0:	strb	r2, [r3]
   3bdd4:	ldr	r3, [r4, #20]
   3bdd8:	add	r1, r3, #1
   3bddc:	str	r1, [r4, #20]
   3bde0:	strb	r2, [r3]
   3bde4:	add	r8, r8, #3
   3bde8:	add	r8, r7, r8
   3bdec:	mov	r9, #44	; 0x2c
   3bdf0:	add	r7, r7, #4
   3bdf4:	mov	sl, #110	; 0x6e
   3bdf8:	mov	fp, #117	; 0x75
   3bdfc:	mov	r6, #108	; 0x6c
   3be00:	add	r3, sp, #16
   3be04:	str	r3, [sp, #12]
   3be08:	cmp	r7, r8
   3be0c:	beq	3be78 <flatcc_json_printer_union_vector_field@@Base+0x248>
   3be10:	ldrb	r2, [r7, #1]!
   3be14:	ldr	r3, [r4, #20]
   3be18:	add	r5, r5, #4
   3be1c:	add	r1, r3, #1
   3be20:	cmp	r2, #0
   3be24:	str	r1, [r4, #20]
   3be28:	strb	r9, [r3]
   3be2c:	bne	3beb8 <flatcc_json_printer_union_vector_field@@Base+0x288>
   3be30:	ldr	r3, [r4, #20]
   3be34:	cmp	r7, r8
   3be38:	add	r2, r3, #1
   3be3c:	str	r2, [r4, #20]
   3be40:	strb	sl, [r3]
   3be44:	ldr	r3, [r4, #20]
   3be48:	add	r2, r3, #1
   3be4c:	str	r2, [r4, #20]
   3be50:	strb	fp, [r3]
   3be54:	ldr	r3, [r4, #20]
   3be58:	add	r2, r3, #1
   3be5c:	str	r2, [r4, #20]
   3be60:	strb	r6, [r3]
   3be64:	ldr	r3, [r4, #20]
   3be68:	add	r2, r3, #1
   3be6c:	str	r2, [r4, #20]
   3be70:	strb	r6, [r3]
   3be74:	bne	3be10 <flatcc_json_printer_union_vector_field@@Base+0x1e0>
   3be78:	ldrb	r3, [r4, #25]
   3be7c:	cmp	r3, #0
   3be80:	bne	3bf0c <flatcc_json_printer_union_vector_field@@Base+0x2dc>
   3be84:	ldr	r3, [r4, #20]
   3be88:	mov	r2, #93	; 0x5d
   3be8c:	add	r1, r3, #1
   3be90:	str	r1, [r4, #20]
   3be94:	strb	r2, [r3]
   3be98:	add	sp, sp, #140	; 0x8c
   3be9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bea0:	ldr	r3, [r5, #12]
   3bea4:	cmp	r6, #100	; 0x64
   3bea8:	str	r3, [sp, #20]
   3beac:	bgt	3bed4 <flatcc_json_printer_union_vector_field@@Base+0x2a4>
   3beb0:	add	sp, sp, #140	; 0x8c
   3beb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3beb8:	ldr	r1, [sp, #12]
   3bebc:	mov	r0, r4
   3bec0:	ldr	r3, [sp, #184]	; 0xb8
   3bec4:	strb	r2, [sp, #24]
   3bec8:	str	r5, [sp, #16]
   3becc:	blx	r3
   3bed0:	b	3be08 <flatcc_json_printer_union_vector_field@@Base+0x1d8>
   3bed4:	ldr	r3, [r4, #36]	; 0x24
   3bed8:	ldr	r1, [pc, #120]	; 3bf58 <flatcc_json_printer_union_vector_field@@Base+0x328>
   3bedc:	cmp	r3, #0
   3bee0:	moveq	r3, #1
   3bee4:	streq	r3, [r4, #36]	; 0x24
   3bee8:	ldr	r3, [pc, #108]	; 3bf5c <flatcc_json_printer_union_vector_field@@Base+0x32c>
   3beec:	ldr	r0, [pc, #108]	; 3bf60 <flatcc_json_printer_union_vector_field@@Base+0x330>
   3bef0:	add	r3, pc, r3
   3bef4:	add	r3, r3, #1776	; 0x6f0
   3bef8:	ldr	r2, [pc, #100]	; 3bf64 <flatcc_json_printer_union_vector_field@@Base+0x334>
   3befc:	add	r3, r3, #8
   3bf00:	add	r1, pc, r1
   3bf04:	add	r0, pc, r0
   3bf08:	bl	14610 <__assert_fail@plt>
   3bf0c:	ldr	r3, [r4, #20]
   3bf10:	mov	r2, #10
   3bf14:	add	r1, r3, #1
   3bf18:	str	r1, [r4, #20]
   3bf1c:	strb	r2, [r3]
   3bf20:	ldr	r3, [r4, #32]
   3bf24:	mov	r0, r4
   3bf28:	sub	r3, r3, #1
   3bf2c:	str	r3, [r4, #32]
   3bf30:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3bf34:	b	3be84 <flatcc_json_printer_union_vector_field@@Base+0x254>
   3bf38:	add	r1, sp, #136	; 0x88
   3bf3c:	strb	r3, [sp, #24]
   3bf40:	mov	r0, r4
   3bf44:	str	r5, [r1, #-120]!	; 0xffffff88
   3bf48:	ldr	r3, [sp, #184]	; 0xb8
   3bf4c:	blx	r3
   3bf50:	b	3bde4 <flatcc_json_printer_union_vector_field@@Base+0x1b4>
   3bf54:	andeq	r7, r0, r4, asr #13
   3bf58:	andeq	r7, r0, ip, ror r2
   3bf5c:	andeq	r6, r0, r0, lsr fp
   3bf60:	andeq	r7, r0, r8, ror r4
   3bf64:	andeq	r0, r0, fp, asr #6

0003bf68 <flatcc_json_printer_table_field@@Base>:
   3bf68:	add	r2, r2, #2
   3bf6c:	ldr	ip, [r1, #8]
   3bf70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bf74:	lsl	r2, r2, #1
   3bf78:	sub	sp, sp, #28
   3bf7c:	cmp	r2, ip
   3bf80:	ldr	r9, [sp, #64]	; 0x40
   3bf84:	bge	3c0a8 <flatcc_json_printer_table_field@@Base+0x140>
   3bf88:	ldr	ip, [r1, #4]
   3bf8c:	ldrh	r6, [ip, r2]
   3bf90:	cmp	r6, #0
   3bf94:	beq	3c0a8 <flatcc_json_printer_table_field@@Base+0x140>
   3bf98:	ldr	r8, [r1]
   3bf9c:	adds	r7, r8, r6
   3bfa0:	beq	3c0a8 <flatcc_json_printer_table_field@@Base+0x140>
   3bfa4:	ldr	r2, [r1, #16]
   3bfa8:	mov	r5, r1
   3bfac:	cmp	r2, #0
   3bfb0:	add	r2, r2, #1
   3bfb4:	str	r2, [r1, #16]
   3bfb8:	ldrne	r2, [r0, #20]
   3bfbc:	movne	ip, #44	; 0x2c
   3bfc0:	addne	lr, r2, #1
   3bfc4:	strne	lr, [r0, #20]
   3bfc8:	strbne	ip, [r2]
   3bfcc:	ldrb	r1, [r0, #25]
   3bfd0:	mov	sl, r3
   3bfd4:	mov	r4, r0
   3bfd8:	cmp	r1, #0
   3bfdc:	bne	3c19c <flatcc_json_printer_table_field@@Base+0x234>
   3bfe0:	ldr	r2, [r0, #20]
   3bfe4:	ldr	r3, [r0, #16]
   3bfe8:	cmp	r2, r3
   3bfec:	bcc	3bffc <flatcc_json_printer_table_field@@Base+0x94>
   3bff0:	ldr	r3, [r0, #44]	; 0x2c
   3bff4:	blx	r3
   3bff8:	ldr	r2, [r4, #20]
   3bffc:	mov	r3, #34	; 0x22
   3c000:	strb	r3, [r2]
   3c004:	ldrb	r3, [r4, #26]
   3c008:	ldr	r0, [r4, #20]
   3c00c:	ldr	r2, [r4, #16]
   3c010:	cmp	r3, #0
   3c014:	addeq	r0, r0, #1
   3c018:	add	r3, r0, r9
   3c01c:	cmp	r2, r3
   3c020:	str	r0, [r4, #20]
   3c024:	bhi	3c0b0 <flatcc_json_printer_table_field@@Base+0x148>
   3c028:	mov	r2, r9
   3c02c:	mov	r1, sl
   3c030:	mov	r0, r4
   3c034:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3c038:	ldr	r9, [r4, #20]
   3c03c:	mov	r3, #34	; 0x22
   3c040:	strb	r3, [r9]
   3c044:	ldr	r1, [r4, #20]
   3c048:	ldrb	r3, [r4, #26]
   3c04c:	clz	r3, r3
   3c050:	lsr	r3, r3, #5
   3c054:	add	r2, r1, r3
   3c058:	add	r2, r2, #1
   3c05c:	mov	r0, #58	; 0x3a
   3c060:	str	r2, [r4, #20]
   3c064:	strb	r0, [r1, r3]
   3c068:	ldr	r3, [r4, #20]
   3c06c:	mov	r9, #32
   3c070:	strb	r9, [r3]
   3c074:	ldrb	r2, [r4, #25]
   3c078:	ldr	r3, [r5, #12]
   3c07c:	ldr	r0, [r4, #20]
   3c080:	adds	r2, r2, #0
   3c084:	movne	r2, #1
   3c088:	add	r1, r0, r2
   3c08c:	subs	r3, r3, #1
   3c090:	str	r1, [r4, #20]
   3c094:	bne	3c0cc <flatcc_json_printer_table_field@@Base+0x164>
   3c098:	ldr	r3, [r4, #36]	; 0x24
   3c09c:	cmp	r3, #0
   3c0a0:	moveq	r3, #2
   3c0a4:	streq	r3, [r4, #36]	; 0x24
   3c0a8:	add	sp, sp, #28
   3c0ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c0b0:	mov	r2, r9
   3c0b4:	mov	r1, sl
   3c0b8:	bl	14544 <memcpy@plt>
   3c0bc:	ldr	r3, [r4, #20]
   3c0c0:	add	r9, r3, r9
   3c0c4:	str	r9, [r4, #20]
   3c0c8:	b	3c03c <flatcc_json_printer_table_field@@Base+0xd4>
   3c0cc:	ldr	lr, [r8, r6]
   3c0d0:	ldr	ip, [r4, #32]
   3c0d4:	add	r1, r1, #1
   3c0d8:	str	r1, [r4, #20]
   3c0dc:	add	ip, ip, #1
   3c0e0:	mov	r1, #0
   3c0e4:	mov	r5, #123	; 0x7b
   3c0e8:	str	ip, [r4, #32]
   3c0ec:	strb	r5, [r0, r2]
   3c0f0:	str	r1, [sp, #20]
   3c0f4:	str	r3, [sp, #16]
   3c0f8:	ldr	r3, [r7, lr]
   3c0fc:	add	r7, r7, lr
   3c100:	sub	r3, r7, r3
   3c104:	add	r1, sp, #4
   3c108:	ldrh	r2, [r3]
   3c10c:	mov	r0, r4
   3c110:	str	r3, [sp, #8]
   3c114:	ldr	r3, [sp, #68]	; 0x44
   3c118:	str	r2, [sp, #12]
   3c11c:	str	r7, [sp, #4]
   3c120:	blx	r3
   3c124:	ldrb	r3, [r4, #25]
   3c128:	cmp	r3, #0
   3c12c:	ldr	r3, [r4, #20]
   3c130:	bne	3c14c <flatcc_json_printer_table_field@@Base+0x1e4>
   3c134:	add	r1, r3, #1
   3c138:	mov	r2, #125	; 0x7d
   3c13c:	str	r1, [r4, #20]
   3c140:	strb	r2, [r3]
   3c144:	add	sp, sp, #28
   3c148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c14c:	add	r1, r3, #1
   3c150:	mov	r2, #10
   3c154:	str	r1, [r4, #20]
   3c158:	strb	r2, [r3]
   3c15c:	ldr	r2, [r4, #32]
   3c160:	ldrb	r3, [r4, #25]
   3c164:	sub	r2, r2, #1
   3c168:	ldr	r0, [r4, #20]
   3c16c:	ldr	r1, [r4, #16]
   3c170:	mul	r5, r2, r3
   3c174:	str	r2, [r4, #32]
   3c178:	add	r3, r0, r5
   3c17c:	cmp	r1, r3
   3c180:	bcc	3c200 <flatcc_json_printer_table_field@@Base+0x298>
   3c184:	mov	r1, r9
   3c188:	mov	r2, r5
   3c18c:	bl	145bc <memset@plt>
   3c190:	ldr	r3, [r4, #20]
   3c194:	add	r3, r3, r5
   3c198:	b	3c134 <flatcc_json_printer_table_field@@Base+0x1cc>
   3c19c:	ldr	r3, [r0, #20]
   3c1a0:	mov	r2, #10
   3c1a4:	add	r1, r3, #1
   3c1a8:	str	r1, [r0, #20]
   3c1ac:	strb	r2, [r3]
   3c1b0:	ldrb	r3, [r0, #25]
   3c1b4:	ldr	r2, [r0, #32]
   3c1b8:	ldr	r0, [r0, #20]
   3c1bc:	ldr	r1, [r4, #16]
   3c1c0:	mul	fp, r2, r3
   3c1c4:	add	r3, r0, fp
   3c1c8:	cmp	r1, r3
   3c1cc:	bcc	3c1ec <flatcc_json_printer_table_field@@Base+0x284>
   3c1d0:	mov	r2, fp
   3c1d4:	mov	r1, #32
   3c1d8:	bl	145bc <memset@plt>
   3c1dc:	ldr	r2, [r4, #20]
   3c1e0:	add	r2, r2, fp
   3c1e4:	str	r2, [r4, #20]
   3c1e8:	b	3bffc <flatcc_json_printer_table_field@@Base+0x94>
   3c1ec:	mov	r1, fp
   3c1f0:	mov	r0, r4
   3c1f4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3c1f8:	ldr	r2, [r4, #20]
   3c1fc:	b	3bffc <flatcc_json_printer_table_field@@Base+0x94>
   3c200:	mov	r1, r5
   3c204:	mov	r0, r4
   3c208:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3c20c:	ldr	r3, [r4, #20]
   3c210:	b	3c134 <flatcc_json_printer_table_field@@Base+0x1cc>

0003c214 <flatcc_json_printer_union_field@@Base>:
   3c214:	add	r2, r2, #1
   3c218:	push	{r4, r5, r6, r7, r8, r9, lr}
   3c21c:	lsl	r2, r2, #1
   3c220:	ldr	lr, [r1, #8]
   3c224:	sub	sp, sp, #20
   3c228:	cmp	r2, lr
   3c22c:	movge	ip, #0
   3c230:	bge	3c248 <flatcc_json_printer_union_field@@Base+0x34>
   3c234:	ldr	ip, [r1, #4]
   3c238:	ldrh	ip, [ip, r2]
   3c23c:	cmp	ip, #0
   3c240:	ldrne	r4, [r1]
   3c244:	addne	ip, r4, ip
   3c248:	add	r2, r2, #2
   3c24c:	cmp	r2, lr
   3c250:	bge	3c3c0 <flatcc_json_printer_union_field@@Base+0x1ac>
   3c254:	ldr	lr, [r1, #4]
   3c258:	ldrh	r2, [lr, r2]
   3c25c:	cmp	r2, #0
   3c260:	beq	3c3c0 <flatcc_json_printer_union_field@@Base+0x1ac>
   3c264:	ldr	r7, [r1]
   3c268:	adds	r7, r7, r2
   3c26c:	moveq	r2, #1
   3c270:	movne	r2, #0
   3c274:	cmp	ip, #0
   3c278:	orreq	r2, r2, #1
   3c27c:	cmp	r2, #0
   3c280:	bne	3c3c0 <flatcc_json_printer_union_field@@Base+0x1ac>
   3c284:	ldr	r2, [r1, #16]
   3c288:	ldrb	r8, [ip]
   3c28c:	cmp	r2, #0
   3c290:	add	r2, r2, #1
   3c294:	str	r2, [r1, #16]
   3c298:	ldrne	r2, [r0, #20]
   3c29c:	movne	ip, #44	; 0x2c
   3c2a0:	addne	lr, r2, #1
   3c2a4:	strne	lr, [r0, #20]
   3c2a8:	mov	r5, r1
   3c2ac:	strbne	ip, [r2]
   3c2b0:	ldrb	r1, [r0, #25]
   3c2b4:	mov	r6, r3
   3c2b8:	mov	r4, r0
   3c2bc:	cmp	r1, #0
   3c2c0:	ldr	r3, [r0, #20]
   3c2c4:	bne	3c46c <flatcc_json_printer_union_field@@Base+0x258>
   3c2c8:	ldr	r2, [r0, #16]
   3c2cc:	cmp	r3, r2
   3c2d0:	bcs	3c4b8 <flatcc_json_printer_union_field@@Base+0x2a4>
   3c2d4:	mov	r2, #34	; 0x22
   3c2d8:	strb	r2, [r3]
   3c2dc:	ldrb	r3, [r4, #26]
   3c2e0:	ldr	r0, [r4, #20]
   3c2e4:	ldr	r2, [r4, #16]
   3c2e8:	cmp	r3, #0
   3c2ec:	addeq	r0, r0, #1
   3c2f0:	ldr	r3, [sp, #48]	; 0x30
   3c2f4:	str	r0, [r4, #20]
   3c2f8:	add	r3, r0, r3
   3c2fc:	cmp	r2, r3
   3c300:	mov	r1, r6
   3c304:	ldr	r2, [sp, #48]	; 0x30
   3c308:	bhi	3c3c8 <flatcc_json_printer_union_field@@Base+0x1b4>
   3c30c:	mov	r0, r4
   3c310:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3c314:	ldr	r3, [r4, #20]
   3c318:	ldr	r1, [r4, #16]
   3c31c:	add	r2, r3, #5
   3c320:	cmp	r1, r2
   3c324:	bls	3c3ec <flatcc_json_printer_union_field@@Base+0x1d8>
   3c328:	ldr	r2, [pc, #428]	; 3c4dc <flatcc_json_printer_union_field@@Base+0x2c8>
   3c32c:	add	r2, pc, r2
   3c330:	ldrb	r1, [r2, #4]
   3c334:	ldr	r0, [r2]
   3c338:	strb	r1, [r3, #4]
   3c33c:	str	r0, [r3]
   3c340:	ldr	r3, [r4, #20]
   3c344:	add	r3, r3, #5
   3c348:	str	r3, [r4, #20]
   3c34c:	mov	r2, #34	; 0x22
   3c350:	strb	r2, [r3]
   3c354:	ldr	r1, [r4, #20]
   3c358:	ldrb	r2, [r4, #26]
   3c35c:	clz	r2, r2
   3c360:	lsr	r2, r2, #5
   3c364:	add	r3, r1, r2
   3c368:	add	r3, r3, #1
   3c36c:	mov	r0, #58	; 0x3a
   3c370:	str	r3, [r4, #20]
   3c374:	strb	r0, [r1, r2]
   3c378:	ldr	r3, [r4, #20]
   3c37c:	mov	r2, #32
   3c380:	strb	r2, [r3]
   3c384:	ldrb	r2, [r4, #25]
   3c388:	ldrb	r3, [r4, #27]
   3c38c:	ldr	r1, [r4, #20]
   3c390:	cmp	r2, #0
   3c394:	addne	r1, r1, #1
   3c398:	cmp	r3, #0
   3c39c:	str	r1, [r4, #20]
   3c3a0:	beq	3c408 <flatcc_json_printer_union_field@@Base+0x1f4>
   3c3a4:	mov	r0, r8
   3c3a8:	bl	3109c <flatcc_json_parser_table_as_root@@Base+0x115c>
   3c3ac:	ldr	r3, [r4, #20]
   3c3b0:	cmp	r8, #0
   3c3b4:	add	r0, r3, r0
   3c3b8:	str	r0, [r4, #20]
   3c3bc:	bne	3c420 <flatcc_json_printer_union_field@@Base+0x20c>
   3c3c0:	add	sp, sp, #20
   3c3c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c3c8:	bl	14544 <memcpy@plt>
   3c3cc:	ldr	r3, [r4, #20]
   3c3d0:	ldr	r2, [sp, #48]	; 0x30
   3c3d4:	ldr	r1, [r4, #16]
   3c3d8:	add	r3, r3, r2
   3c3dc:	add	r2, r3, #5
   3c3e0:	cmp	r1, r2
   3c3e4:	str	r3, [r4, #20]
   3c3e8:	bhi	3c328 <flatcc_json_printer_union_field@@Base+0x114>
   3c3ec:	ldr	r1, [pc, #236]	; 3c4e0 <flatcc_json_printer_union_field@@Base+0x2cc>
   3c3f0:	mov	r2, #5
   3c3f4:	add	r1, pc, r1
   3c3f8:	mov	r0, r4
   3c3fc:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3c400:	ldr	r3, [r4, #20]
   3c404:	b	3c34c <flatcc_json_printer_union_field@@Base+0x138>
   3c408:	mov	r1, r8
   3c40c:	mov	r0, r4
   3c410:	ldr	r3, [sp, #52]	; 0x34
   3c414:	blx	r3
   3c418:	cmp	r8, #0
   3c41c:	beq	3c3c0 <flatcc_json_printer_union_field@@Base+0x1ac>
   3c420:	ldr	r3, [r4, #20]
   3c424:	mov	r2, #44	; 0x2c
   3c428:	add	r0, r3, #1
   3c42c:	str	r0, [r4, #20]
   3c430:	mov	r1, r6
   3c434:	strb	r2, [r3]
   3c438:	mov	r0, r4
   3c43c:	ldr	r2, [sp, #48]	; 0x30
   3c440:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3c444:	ldr	r3, [r5, #12]
   3c448:	add	r1, sp, #16
   3c44c:	str	r3, [sp, #8]
   3c450:	mov	r0, r4
   3c454:	str	r7, [r1, #-12]!
   3c458:	ldr	r3, [sp, #56]	; 0x38
   3c45c:	strb	r8, [sp, #12]
   3c460:	blx	r3
   3c464:	add	sp, sp, #20
   3c468:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c46c:	mov	r2, #10
   3c470:	add	r1, r3, #1
   3c474:	str	r1, [r0, #20]
   3c478:	strb	r2, [r3]
   3c47c:	ldrb	r3, [r0, #25]
   3c480:	ldr	r9, [r0, #32]
   3c484:	ldr	r0, [r0, #20]
   3c488:	ldr	r2, [r4, #16]
   3c48c:	mul	r9, r9, r3
   3c490:	add	r3, r0, r9
   3c494:	cmp	r2, r3
   3c498:	bcc	3c4c8 <flatcc_json_printer_union_field@@Base+0x2b4>
   3c49c:	mov	r2, r9
   3c4a0:	mov	r1, #32
   3c4a4:	bl	145bc <memset@plt>
   3c4a8:	ldr	r3, [r4, #20]
   3c4ac:	add	r3, r3, r9
   3c4b0:	str	r3, [r4, #20]
   3c4b4:	b	3c2d4 <flatcc_json_printer_union_field@@Base+0xc0>
   3c4b8:	ldr	r3, [r0, #44]	; 0x2c
   3c4bc:	blx	r3
   3c4c0:	ldr	r3, [r4, #20]
   3c4c4:	b	3c2d4 <flatcc_json_printer_union_field@@Base+0xc0>
   3c4c8:	mov	r1, r9
   3c4cc:	mov	r0, r4
   3c4d0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3c4d4:	ldr	r3, [r4, #20]
   3c4d8:	b	3c2d4 <flatcc_json_printer_union_field@@Base+0xc0>
   3c4dc:	andeq	r7, r0, ip, rrx
   3c4e0:	andeq	r6, r0, r4, lsr #31

0003c4e4 <flatcc_json_printer_union_table@@Base>:
   3c4e4:	ldr	r3, [r1, #4]
   3c4e8:	push	{r4, r5, r6, r7, lr}
   3c4ec:	subs	r3, r3, #1
   3c4f0:	sub	sp, sp, #28
   3c4f4:	mov	r4, r0
   3c4f8:	bne	3c514 <flatcc_json_printer_union_table@@Base+0x30>
   3c4fc:	ldr	r3, [r0, #36]	; 0x24
   3c500:	cmp	r3, #0
   3c504:	moveq	r3, #2
   3c508:	streq	r3, [r0, #36]	; 0x24
   3c50c:	add	sp, sp, #28
   3c510:	pop	{r4, r5, r6, r7, pc}
   3c514:	ldr	r1, [r1]
   3c518:	ldr	ip, [r0, #32]
   3c51c:	ldr	r5, [r0, #20]
   3c520:	ldr	lr, [r1]
   3c524:	add	ip, ip, #1
   3c528:	str	ip, [r0, #32]
   3c52c:	add	r7, r5, #1
   3c530:	mov	ip, #0
   3c534:	mov	r6, #123	; 0x7b
   3c538:	str	r7, [r0, #20]
   3c53c:	strb	r6, [r5]
   3c540:	str	r3, [sp, #16]
   3c544:	str	ip, [sp, #20]
   3c548:	ldr	ip, [r1, lr]
   3c54c:	add	r3, r1, lr
   3c550:	sub	ip, r3, ip
   3c554:	add	r1, sp, #4
   3c558:	ldrh	lr, [ip]
   3c55c:	stmib	sp, {r3, ip, lr}
   3c560:	blx	r2
   3c564:	ldrb	r3, [r4, #25]
   3c568:	cmp	r3, #0
   3c56c:	ldr	r3, [r4, #20]
   3c570:	bne	3c58c <flatcc_json_printer_union_table@@Base+0xa8>
   3c574:	add	r1, r3, #1
   3c578:	mov	r2, #125	; 0x7d
   3c57c:	str	r1, [r4, #20]
   3c580:	strb	r2, [r3]
   3c584:	add	sp, sp, #28
   3c588:	pop	{r4, r5, r6, r7, pc}
   3c58c:	add	r1, r3, #1
   3c590:	mov	r2, #10
   3c594:	str	r1, [r4, #20]
   3c598:	strb	r2, [r3]
   3c59c:	ldr	r2, [r4, #32]
   3c5a0:	ldrb	r3, [r4, #25]
   3c5a4:	sub	r2, r2, #1
   3c5a8:	ldr	r0, [r4, #20]
   3c5ac:	ldr	r1, [r4, #16]
   3c5b0:	mul	r5, r2, r3
   3c5b4:	str	r2, [r4, #32]
   3c5b8:	add	r3, r0, r5
   3c5bc:	cmp	r1, r3
   3c5c0:	bcc	3c5dc <flatcc_json_printer_union_table@@Base+0xf8>
   3c5c4:	mov	r2, r5
   3c5c8:	mov	r1, #32
   3c5cc:	bl	145bc <memset@plt>
   3c5d0:	ldr	r3, [r4, #20]
   3c5d4:	add	r3, r3, r5
   3c5d8:	b	3c574 <flatcc_json_printer_union_table@@Base+0x90>
   3c5dc:	mov	r1, r5
   3c5e0:	mov	r0, r4
   3c5e4:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3c5e8:	ldr	r3, [r4, #20]
   3c5ec:	b	3c574 <flatcc_json_printer_union_table@@Base+0x90>

0003c5f0 <flatcc_json_printer_union_struct@@Base>:
   3c5f0:	ldr	r3, [r0, #32]
   3c5f4:	ldr	ip, [r0, #20]
   3c5f8:	push	{r4, r5, r6, lr}
   3c5fc:	add	r3, r3, #1
   3c600:	mov	lr, #123	; 0x7b
   3c604:	add	r5, ip, #1
   3c608:	str	r3, [r0, #32]
   3c60c:	str	r5, [r0, #20]
   3c610:	strb	lr, [ip]
   3c614:	ldr	r3, [r1]
   3c618:	mov	r4, r0
   3c61c:	ldr	r1, [r3]
   3c620:	add	r1, r3, r1
   3c624:	blx	r2
   3c628:	ldrb	r3, [r4, #25]
   3c62c:	cmp	r3, #0
   3c630:	bne	3c64c <flatcc_json_printer_union_struct@@Base+0x5c>
   3c634:	ldr	r1, [r4, #20]
   3c638:	add	r2, r1, #1
   3c63c:	mov	r3, #125	; 0x7d
   3c640:	str	r2, [r4, #20]
   3c644:	strb	r3, [r1]
   3c648:	pop	{r4, r5, r6, pc}
   3c64c:	ldr	r3, [r4, #20]
   3c650:	mov	r2, #10
   3c654:	add	r1, r3, #1
   3c658:	str	r1, [r4, #20]
   3c65c:	strb	r2, [r3]
   3c660:	ldr	r3, [r4, #32]
   3c664:	ldrb	r1, [r4, #25]
   3c668:	sub	r3, r3, #1
   3c66c:	ldr	r0, [r4, #20]
   3c670:	ldr	r2, [r4, #16]
   3c674:	mul	r5, r3, r1
   3c678:	str	r3, [r4, #32]
   3c67c:	add	r3, r0, r5
   3c680:	cmp	r2, r3
   3c684:	bcc	3c6a0 <flatcc_json_printer_union_struct@@Base+0xb0>
   3c688:	mov	r1, #32
   3c68c:	mov	r2, r5
   3c690:	bl	145bc <memset@plt>
   3c694:	ldr	r1, [r4, #20]
   3c698:	add	r1, r1, r5
   3c69c:	b	3c638 <flatcc_json_printer_union_struct@@Base+0x48>
   3c6a0:	mov	r1, r5
   3c6a4:	mov	r0, r4
   3c6a8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3c6ac:	b	3c634 <flatcc_json_printer_union_struct@@Base+0x44>

0003c6b0 <flatcc_json_printer_union_string@@Base>:
   3c6b0:	ldr	r3, [r1]
   3c6b4:	ldr	r2, [r3]
   3c6b8:	add	r1, r3, r2
   3c6bc:	add	r1, r1, #4
   3c6c0:	ldr	r2, [r3, r2]
   3c6c4:	b	32054 <flatcc_json_parser_table_as_root@@Base+0x2114>

0003c6c8 <flatcc_json_printer_embedded_struct_field@@Base>:
   3c6c8:	cmp	r1, #0
   3c6cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c6d0:	mov	r8, r3
   3c6d4:	ldrne	r3, [r0, #20]
   3c6d8:	mov	r7, r2
   3c6dc:	addne	r1, r3, #1
   3c6e0:	movne	r2, #44	; 0x2c
   3c6e4:	strne	r1, [r0, #20]
   3c6e8:	strbne	r2, [r3]
   3c6ec:	ldrb	r1, [r0, #25]
   3c6f0:	mov	r4, r0
   3c6f4:	ldr	r6, [sp, #36]	; 0x24
   3c6f8:	cmp	r1, #0
   3c6fc:	ldr	r5, [sp, #40]	; 0x28
   3c700:	bne	3c864 <flatcc_json_printer_embedded_struct_field@@Base+0x19c>
   3c704:	ldr	r2, [r0, #20]
   3c708:	ldr	r3, [r0, #16]
   3c70c:	cmp	r2, r3
   3c710:	bcs	3c7ec <flatcc_json_printer_embedded_struct_field@@Base+0x124>
   3c714:	mov	r3, #34	; 0x22
   3c718:	strb	r3, [r2]
   3c71c:	ldrb	r3, [r4, #26]
   3c720:	ldr	r0, [r4, #20]
   3c724:	ldr	r2, [r4, #16]
   3c728:	cmp	r3, #0
   3c72c:	addeq	r0, r0, #1
   3c730:	add	r3, r0, r6
   3c734:	cmp	r2, r3
   3c738:	str	r0, [r4, #20]
   3c73c:	mov	r2, r6
   3c740:	ldr	r1, [sp, #32]
   3c744:	bhi	3c7fc <flatcc_json_printer_embedded_struct_field@@Base+0x134>
   3c748:	mov	r0, r4
   3c74c:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3c750:	ldr	r6, [r4, #20]
   3c754:	mov	r3, #34	; 0x22
   3c758:	strb	r3, [r6]
   3c75c:	ldr	r1, [r4, #20]
   3c760:	ldrb	r2, [r4, #26]
   3c764:	clz	r2, r2
   3c768:	lsr	r2, r2, #5
   3c76c:	add	r3, r1, r2
   3c770:	add	r3, r3, #1
   3c774:	mov	r0, #58	; 0x3a
   3c778:	str	r3, [r4, #20]
   3c77c:	strb	r0, [r1, r2]
   3c780:	ldr	r3, [r4, #20]
   3c784:	mov	r6, #32
   3c788:	add	r1, r7, r8
   3c78c:	strb	r6, [r3]
   3c790:	ldrb	r3, [r4, #25]
   3c794:	ldr	ip, [r4, #20]
   3c798:	ldr	r2, [r4, #32]
   3c79c:	adds	r3, r3, #0
   3c7a0:	movne	r3, #1
   3c7a4:	add	r0, ip, r3
   3c7a8:	add	r0, r0, #1
   3c7ac:	str	r0, [r4, #20]
   3c7b0:	add	r2, r2, #1
   3c7b4:	mov	r0, #123	; 0x7b
   3c7b8:	str	r2, [r4, #32]
   3c7bc:	strb	r0, [ip, r3]
   3c7c0:	mov	r0, r4
   3c7c4:	blx	r5
   3c7c8:	ldrb	r3, [r4, #25]
   3c7cc:	cmp	r3, #0
   3c7d0:	bne	3c810 <flatcc_json_printer_embedded_struct_field@@Base+0x148>
   3c7d4:	ldr	r1, [r4, #20]
   3c7d8:	add	r2, r1, #1
   3c7dc:	mov	r3, #125	; 0x7d
   3c7e0:	str	r2, [r4, #20]
   3c7e4:	strb	r3, [r1]
   3c7e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c7ec:	ldr	r3, [r0, #44]	; 0x2c
   3c7f0:	blx	r3
   3c7f4:	ldr	r2, [r4, #20]
   3c7f8:	b	3c714 <flatcc_json_printer_embedded_struct_field@@Base+0x4c>
   3c7fc:	bl	14544 <memcpy@plt>
   3c800:	ldr	r3, [r4, #20]
   3c804:	add	r6, r3, r6
   3c808:	str	r6, [r4, #20]
   3c80c:	b	3c754 <flatcc_json_printer_embedded_struct_field@@Base+0x8c>
   3c810:	ldr	r3, [r4, #20]
   3c814:	mov	r2, #10
   3c818:	add	r1, r3, #1
   3c81c:	str	r1, [r4, #20]
   3c820:	strb	r2, [r3]
   3c824:	ldr	r3, [r4, #32]
   3c828:	ldrb	r1, [r4, #25]
   3c82c:	sub	r3, r3, #1
   3c830:	ldr	r0, [r4, #20]
   3c834:	ldr	r2, [r4, #16]
   3c838:	mul	r5, r3, r1
   3c83c:	str	r3, [r4, #32]
   3c840:	add	r3, r0, r5
   3c844:	cmp	r2, r3
   3c848:	bcc	3c8c8 <flatcc_json_printer_embedded_struct_field@@Base+0x200>
   3c84c:	mov	r1, r6
   3c850:	mov	r2, r5
   3c854:	bl	145bc <memset@plt>
   3c858:	ldr	r1, [r4, #20]
   3c85c:	add	r1, r1, r5
   3c860:	b	3c7d8 <flatcc_json_printer_embedded_struct_field@@Base+0x110>
   3c864:	ldr	r3, [r0, #20]
   3c868:	mov	r2, #10
   3c86c:	add	r1, r3, #1
   3c870:	str	r1, [r0, #20]
   3c874:	strb	r2, [r3]
   3c878:	ldrb	r3, [r0, #25]
   3c87c:	ldr	r2, [r0, #32]
   3c880:	ldr	r0, [r0, #20]
   3c884:	ldr	r1, [r4, #16]
   3c888:	mul	r9, r2, r3
   3c88c:	add	r3, r0, r9
   3c890:	cmp	r1, r3
   3c894:	bcc	3c8b4 <flatcc_json_printer_embedded_struct_field@@Base+0x1ec>
   3c898:	mov	r2, r9
   3c89c:	mov	r1, #32
   3c8a0:	bl	145bc <memset@plt>
   3c8a4:	ldr	r2, [r4, #20]
   3c8a8:	add	r2, r2, r9
   3c8ac:	str	r2, [r4, #20]
   3c8b0:	b	3c714 <flatcc_json_printer_embedded_struct_field@@Base+0x4c>
   3c8b4:	mov	r1, r9
   3c8b8:	mov	r0, r4
   3c8bc:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3c8c0:	ldr	r2, [r4, #20]
   3c8c4:	b	3c714 <flatcc_json_printer_embedded_struct_field@@Base+0x4c>
   3c8c8:	mov	r1, r5
   3c8cc:	mov	r0, r4
   3c8d0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3c8d4:	b	3c7d4 <flatcc_json_printer_embedded_struct_field@@Base+0x10c>

0003c8d8 <flatcc_json_printer_struct_field@@Base>:
   3c8d8:	add	r2, r2, #2
   3c8dc:	ldr	ip, [r1, #8]
   3c8e0:	lsl	r2, r2, #1
   3c8e4:	cmp	r2, ip
   3c8e8:	push	{r4, r5, r6, r7, r8, lr}
   3c8ec:	ldr	r6, [sp, #24]
   3c8f0:	popge	{r4, r5, r6, r7, r8, pc}
   3c8f4:	ldr	ip, [r1, #4]
   3c8f8:	ldrh	r2, [ip, r2]
   3c8fc:	cmp	r2, #0
   3c900:	popeq	{r4, r5, r6, r7, r8, pc}
   3c904:	ldr	r5, [r1]
   3c908:	adds	r5, r5, r2
   3c90c:	popeq	{r4, r5, r6, r7, r8, pc}
   3c910:	ldr	r2, [r1, #16]
   3c914:	mov	r7, r3
   3c918:	cmp	r2, #0
   3c91c:	add	r2, r2, #1
   3c920:	str	r2, [r1, #16]
   3c924:	ldrne	r2, [r0, #20]
   3c928:	movne	r1, #44	; 0x2c
   3c92c:	addne	ip, r2, #1
   3c930:	strne	ip, [r0, #20]
   3c934:	strbne	r1, [r2]
   3c938:	ldrb	r1, [r0, #25]
   3c93c:	mov	r4, r0
   3c940:	cmp	r1, #0
   3c944:	bne	3cac0 <flatcc_json_printer_struct_field@@Base+0x1e8>
   3c948:	ldr	r2, [r0, #20]
   3c94c:	ldr	r3, [r0, #16]
   3c950:	cmp	r2, r3
   3c954:	bcc	3c964 <flatcc_json_printer_struct_field@@Base+0x8c>
   3c958:	ldr	r3, [r0, #44]	; 0x2c
   3c95c:	blx	r3
   3c960:	ldr	r2, [r4, #20]
   3c964:	mov	r3, #34	; 0x22
   3c968:	strb	r3, [r2]
   3c96c:	ldrb	r3, [r4, #26]
   3c970:	ldr	r0, [r4, #20]
   3c974:	ldr	r2, [r4, #16]
   3c978:	cmp	r3, #0
   3c97c:	addeq	r0, r0, #1
   3c980:	add	r3, r0, r6
   3c984:	cmp	r2, r3
   3c988:	str	r0, [r4, #20]
   3c98c:	bhi	3ca40 <flatcc_json_printer_struct_field@@Base+0x168>
   3c990:	mov	r2, r6
   3c994:	mov	r1, r7
   3c998:	mov	r0, r4
   3c99c:	bl	30db0 <flatcc_json_parser_table_as_root@@Base+0xe70>
   3c9a0:	ldr	r6, [r4, #20]
   3c9a4:	mov	r3, #34	; 0x22
   3c9a8:	strb	r3, [r6]
   3c9ac:	ldr	r1, [r4, #20]
   3c9b0:	ldrb	r3, [r4, #26]
   3c9b4:	clz	r3, r3
   3c9b8:	lsr	r3, r3, #5
   3c9bc:	add	r2, r1, r3
   3c9c0:	add	r2, r2, #1
   3c9c4:	mov	r0, #58	; 0x3a
   3c9c8:	str	r2, [r4, #20]
   3c9cc:	strb	r0, [r1, r3]
   3c9d0:	ldr	r3, [r4, #20]
   3c9d4:	mov	r6, #32
   3c9d8:	mov	lr, #123	; 0x7b
   3c9dc:	strb	r6, [r3]
   3c9e0:	ldrb	r3, [r4, #25]
   3c9e4:	ldr	ip, [r4, #20]
   3c9e8:	ldr	r2, [r4, #32]
   3c9ec:	adds	r3, r3, #0
   3c9f0:	movne	r3, #1
   3c9f4:	add	r0, ip, r3
   3c9f8:	add	r0, r0, #1
   3c9fc:	add	r2, r2, #1
   3ca00:	str	r0, [r4, #20]
   3ca04:	str	r2, [r4, #32]
   3ca08:	mov	r1, r5
   3ca0c:	strb	lr, [ip, r3]
   3ca10:	mov	r0, r4
   3ca14:	ldr	r3, [sp, #28]
   3ca18:	blx	r3
   3ca1c:	ldrb	r3, [r4, #25]
   3ca20:	cmp	r3, #0
   3ca24:	bne	3ca5c <flatcc_json_printer_struct_field@@Base+0x184>
   3ca28:	ldr	r1, [r4, #20]
   3ca2c:	add	r2, r1, #1
   3ca30:	mov	r3, #125	; 0x7d
   3ca34:	str	r2, [r4, #20]
   3ca38:	strb	r3, [r1]
   3ca3c:	pop	{r4, r5, r6, r7, r8, pc}
   3ca40:	mov	r2, r6
   3ca44:	mov	r1, r7
   3ca48:	bl	14544 <memcpy@plt>
   3ca4c:	ldr	r3, [r4, #20]
   3ca50:	add	r6, r3, r6
   3ca54:	str	r6, [r4, #20]
   3ca58:	b	3c9a4 <flatcc_json_printer_struct_field@@Base+0xcc>
   3ca5c:	ldr	r3, [r4, #20]
   3ca60:	mov	r2, #10
   3ca64:	add	r1, r3, #1
   3ca68:	str	r1, [r4, #20]
   3ca6c:	strb	r2, [r3]
   3ca70:	ldr	r3, [r4, #32]
   3ca74:	ldrb	r1, [r4, #25]
   3ca78:	sub	r3, r3, #1
   3ca7c:	ldr	r0, [r4, #20]
   3ca80:	ldr	r2, [r4, #16]
   3ca84:	mul	r5, r3, r1
   3ca88:	str	r3, [r4, #32]
   3ca8c:	add	r3, r0, r5
   3ca90:	cmp	r2, r3
   3ca94:	bcc	3cab0 <flatcc_json_printer_struct_field@@Base+0x1d8>
   3ca98:	mov	r1, r6
   3ca9c:	mov	r2, r5
   3caa0:	bl	145bc <memset@plt>
   3caa4:	ldr	r1, [r4, #20]
   3caa8:	add	r1, r1, r5
   3caac:	b	3ca2c <flatcc_json_printer_struct_field@@Base+0x154>
   3cab0:	mov	r1, r5
   3cab4:	mov	r0, r4
   3cab8:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3cabc:	b	3ca28 <flatcc_json_printer_struct_field@@Base+0x150>
   3cac0:	ldr	r3, [r0, #20]
   3cac4:	mov	r2, #10
   3cac8:	add	r1, r3, #1
   3cacc:	str	r1, [r0, #20]
   3cad0:	strb	r2, [r3]
   3cad4:	ldrb	r8, [r0, #25]
   3cad8:	ldr	r2, [r0, #32]
   3cadc:	ldr	r0, [r0, #20]
   3cae0:	ldr	r1, [r4, #16]
   3cae4:	mul	r8, r2, r8
   3cae8:	add	r3, r0, r8
   3caec:	cmp	r1, r3
   3caf0:	bcc	3cb10 <flatcc_json_printer_struct_field@@Base+0x238>
   3caf4:	mov	r2, r8
   3caf8:	mov	r1, #32
   3cafc:	bl	145bc <memset@plt>
   3cb00:	ldr	r2, [r4, #20]
   3cb04:	add	r2, r2, r8
   3cb08:	str	r2, [r4, #20]
   3cb0c:	b	3c964 <flatcc_json_printer_struct_field@@Base+0x8c>
   3cb10:	mov	r1, r8
   3cb14:	mov	r0, r4
   3cb18:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3cb1c:	ldr	r2, [r4, #20]
   3cb20:	b	3c964 <flatcc_json_printer_struct_field@@Base+0x8c>

0003cb24 <flatcc_json_printer_struct_as_root@@Base>:
   3cb24:	push	{r4, r5, r6, lr}
   3cb28:	mov	r4, r0
   3cb2c:	mov	r5, r1
   3cb30:	bl	311e8 <flatcc_json_parser_table_as_root@@Base+0x12a8>
   3cb34:	cmp	r0, #0
   3cb38:	beq	3cc54 <flatcc_json_printer_struct_as_root@@Base+0x130>
   3cb3c:	ldr	r3, [r4, #32]
   3cb40:	ldr	r2, [r4, #20]
   3cb44:	add	r3, r3, #1
   3cb48:	add	r0, r2, #1
   3cb4c:	mov	r1, #123	; 0x7b
   3cb50:	str	r3, [r4, #32]
   3cb54:	str	r0, [r4, #20]
   3cb58:	strb	r1, [r2]
   3cb5c:	ldr	r1, [r5]
   3cb60:	ldr	r3, [sp, #16]
   3cb64:	mov	r0, r4
   3cb68:	add	r1, r5, r1
   3cb6c:	blx	r3
   3cb70:	ldrb	r3, [r4, #25]
   3cb74:	cmp	r3, #0
   3cb78:	bne	3cbf0 <flatcc_json_printer_struct_as_root@@Base+0xcc>
   3cb7c:	ldr	r1, [r4, #20]
   3cb80:	mov	r3, #125	; 0x7d
   3cb84:	add	r2, r1, #1
   3cb88:	str	r2, [r4, #20]
   3cb8c:	strb	r3, [r1]
   3cb90:	ldrb	r3, [r4, #25]
   3cb94:	cmp	r3, #0
   3cb98:	bne	3cbd0 <flatcc_json_printer_struct_as_root@@Base+0xac>
   3cb9c:	ldr	r3, [r4, #44]	; 0x2c
   3cba0:	mov	r1, #1
   3cba4:	mov	r0, r4
   3cba8:	blx	r3
   3cbac:	ldr	r3, [r4, #36]	; 0x24
   3cbb0:	cmp	r3, #0
   3cbb4:	bne	3cc54 <flatcc_json_printer_struct_as_root@@Base+0x130>
   3cbb8:	ldr	r0, [r4, #20]
   3cbbc:	ldr	r2, [r4]
   3cbc0:	ldr	r3, [r4, #12]
   3cbc4:	sub	r0, r0, r2
   3cbc8:	add	r0, r0, r3
   3cbcc:	pop	{r4, r5, r6, pc}
   3cbd0:	ldr	r3, [r4, #32]
   3cbd4:	cmp	r3, #0
   3cbd8:	moveq	r2, #10
   3cbdc:	ldreq	r3, [r4, #20]
   3cbe0:	addeq	r1, r3, #1
   3cbe4:	streq	r1, [r4, #20]
   3cbe8:	strbeq	r2, [r3]
   3cbec:	b	3cb9c <flatcc_json_printer_struct_as_root@@Base+0x78>
   3cbf0:	ldr	r3, [r4, #20]
   3cbf4:	mov	r2, #10
   3cbf8:	add	r1, r3, #1
   3cbfc:	str	r1, [r4, #20]
   3cc00:	strb	r2, [r3]
   3cc04:	ldr	r3, [r4, #32]
   3cc08:	ldrb	r1, [r4, #25]
   3cc0c:	sub	r3, r3, #1
   3cc10:	ldr	r0, [r4, #20]
   3cc14:	ldr	r2, [r4, #16]
   3cc18:	mul	r5, r3, r1
   3cc1c:	str	r3, [r4, #32]
   3cc20:	add	r3, r0, r5
   3cc24:	cmp	r2, r3
   3cc28:	bcc	3cc44 <flatcc_json_printer_struct_as_root@@Base+0x120>
   3cc2c:	mov	r1, #32
   3cc30:	mov	r2, r5
   3cc34:	bl	145bc <memset@plt>
   3cc38:	ldr	r1, [r4, #20]
   3cc3c:	add	r1, r1, r5
   3cc40:	b	3cb80 <flatcc_json_printer_struct_as_root@@Base+0x5c>
   3cc44:	mov	r1, r5
   3cc48:	mov	r0, r4
   3cc4c:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3cc50:	b	3cb7c <flatcc_json_printer_struct_as_root@@Base+0x58>
   3cc54:	mvn	r0, #0
   3cc58:	pop	{r4, r5, r6, pc}

0003cc5c <flatcc_json_printer_table_as_root@@Base>:
   3cc5c:	push	{r4, r5, lr}
   3cc60:	sub	sp, sp, #28
   3cc64:	mov	r4, r0
   3cc68:	mov	r5, r1
   3cc6c:	bl	311e8 <flatcc_json_parser_table_as_root@@Base+0x12a8>
   3cc70:	cmp	r0, #0
   3cc74:	beq	3cd5c <flatcc_json_printer_table_as_root@@Base+0x100>
   3cc78:	ldr	r2, [r5]
   3cc7c:	ldr	r1, [r4, #20]
   3cc80:	ldr	r3, [r4, #32]
   3cc84:	add	ip, r1, #1
   3cc88:	add	r3, r3, #1
   3cc8c:	mov	r0, #123	; 0x7b
   3cc90:	str	r3, [r4, #32]
   3cc94:	str	ip, [r4, #20]
   3cc98:	strb	r0, [r1]
   3cc9c:	ldr	r3, [r5, r2]
   3cca0:	add	r5, r5, r2
   3cca4:	sub	r3, r5, r3
   3cca8:	mov	ip, #0
   3ccac:	ldrh	lr, [r3]
   3ccb0:	mov	r2, #99	; 0x63
   3ccb4:	str	r3, [sp, #8]
   3ccb8:	add	r1, sp, #4
   3ccbc:	ldr	r3, [sp, #40]	; 0x28
   3ccc0:	mov	r0, r4
   3ccc4:	str	lr, [sp, #12]
   3ccc8:	str	r5, [sp, #4]
   3cccc:	str	ip, [sp, #20]
   3ccd0:	str	r2, [sp, #16]
   3ccd4:	blx	r3
   3ccd8:	ldrb	r3, [r4, #25]
   3ccdc:	cmp	r3, #0
   3cce0:	ldr	r3, [r4, #20]
   3cce4:	bne	3cd68 <flatcc_json_printer_table_as_root@@Base+0x10c>
   3cce8:	add	r1, r3, #1
   3ccec:	mov	r2, #125	; 0x7d
   3ccf0:	str	r1, [r4, #20]
   3ccf4:	strb	r2, [r3]
   3ccf8:	ldrb	r3, [r4, #25]
   3ccfc:	cmp	r3, #0
   3cd00:	bne	3cd3c <flatcc_json_printer_table_as_root@@Base+0xe0>
   3cd04:	ldr	r3, [r4, #44]	; 0x2c
   3cd08:	mov	r1, #1
   3cd0c:	mov	r0, r4
   3cd10:	blx	r3
   3cd14:	ldr	r3, [r4, #36]	; 0x24
   3cd18:	cmp	r3, #0
   3cd1c:	bne	3cd5c <flatcc_json_printer_table_as_root@@Base+0x100>
   3cd20:	ldr	r0, [r4, #20]
   3cd24:	ldr	r2, [r4]
   3cd28:	ldr	r3, [r4, #12]
   3cd2c:	sub	r0, r0, r2
   3cd30:	add	r0, r0, r3
   3cd34:	add	sp, sp, #28
   3cd38:	pop	{r4, r5, pc}
   3cd3c:	ldr	r3, [r4, #32]
   3cd40:	cmp	r3, #0
   3cd44:	moveq	r2, #10
   3cd48:	ldreq	r3, [r4, #20]
   3cd4c:	addeq	r1, r3, #1
   3cd50:	streq	r1, [r4, #20]
   3cd54:	strbeq	r2, [r3]
   3cd58:	b	3cd04 <flatcc_json_printer_table_as_root@@Base+0xa8>
   3cd5c:	mvn	r0, #0
   3cd60:	add	sp, sp, #28
   3cd64:	pop	{r4, r5, pc}
   3cd68:	add	r1, r3, #1
   3cd6c:	mov	r2, #10
   3cd70:	str	r1, [r4, #20]
   3cd74:	strb	r2, [r3]
   3cd78:	ldr	r2, [r4, #32]
   3cd7c:	ldrb	r3, [r4, #25]
   3cd80:	sub	r2, r2, #1
   3cd84:	ldr	r0, [r4, #20]
   3cd88:	ldr	r1, [r4, #16]
   3cd8c:	mul	r5, r2, r3
   3cd90:	str	r2, [r4, #32]
   3cd94:	add	r3, r0, r5
   3cd98:	cmp	r1, r3
   3cd9c:	bcc	3cdb8 <flatcc_json_printer_table_as_root@@Base+0x15c>
   3cda0:	mov	r2, r5
   3cda4:	mov	r1, #32
   3cda8:	bl	145bc <memset@plt>
   3cdac:	ldr	r3, [r4, #20]
   3cdb0:	add	r3, r3, r5
   3cdb4:	b	3cce8 <flatcc_json_printer_table_as_root@@Base+0x8c>
   3cdb8:	mov	r1, r5
   3cdbc:	mov	r0, r4
   3cdc0:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3cdc4:	ldr	r3, [r4, #20]
   3cdc8:	b	3cce8 <flatcc_json_printer_table_as_root@@Base+0x8c>

0003cdcc <flatcc_json_printer_struct_as_nested_root@@Base>:
   3cdcc:	add	r2, r2, #2
   3cdd0:	ldr	ip, [r1, #8]
   3cdd4:	lsl	r2, r2, #1
   3cdd8:	cmp	r2, ip
   3cddc:	bxge	lr
   3cde0:	ldr	ip, [r1, #4]
   3cde4:	ldrh	r2, [ip, r2]
   3cde8:	cmp	r2, #0
   3cdec:	bxeq	lr
   3cdf0:	ldr	ip, [r1]
   3cdf4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3cdf8:	adds	r8, ip, r2
   3cdfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ce00:	ldr	r7, [ip, r2]
   3ce04:	mov	r6, r3
   3ce08:	add	r9, r8, r7
   3ce0c:	mov	r5, r1
   3ce10:	ldr	r3, [sp, #36]	; 0x24
   3ce14:	mov	r1, r9
   3ce18:	ldr	r2, [r8, r7]
   3ce1c:	mov	r4, r0
   3ce20:	bl	311e8 <flatcc_json_parser_table_as_root@@Base+0x12a8>
   3ce24:	cmp	r0, #0
   3ce28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ce2c:	ldr	r3, [r5, #16]
   3ce30:	mov	r0, r4
   3ce34:	cmp	r3, #0
   3ce38:	add	r3, r3, #1
   3ce3c:	str	r3, [r5, #16]
   3ce40:	ldrne	r3, [r4, #20]
   3ce44:	movne	r2, #44	; 0x2c
   3ce48:	addne	r1, r3, #1
   3ce4c:	strne	r1, [r4, #20]
   3ce50:	strbne	r2, [r3]
   3ce54:	mov	r1, r6
   3ce58:	ldr	r2, [sp, #32]
   3ce5c:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3ce60:	ldr	r3, [r4, #32]
   3ce64:	ldr	r2, [r4, #20]
   3ce68:	add	r3, r3, #1
   3ce6c:	add	r0, r2, #1
   3ce70:	mov	r1, #123	; 0x7b
   3ce74:	str	r3, [r4, #32]
   3ce78:	str	r0, [r4, #20]
   3ce7c:	strb	r1, [r2]
   3ce80:	ldr	r1, [r8, r7]
   3ce84:	ldr	r3, [sp, #40]	; 0x28
   3ce88:	mov	r0, r4
   3ce8c:	add	r1, r9, r1
   3ce90:	blx	r3
   3ce94:	ldrb	r3, [r4, #25]
   3ce98:	cmp	r3, #0
   3ce9c:	bne	3ceb8 <flatcc_json_printer_struct_as_nested_root@@Base+0xec>
   3cea0:	ldr	r1, [r4, #20]
   3cea4:	add	r2, r1, #1
   3cea8:	mov	r3, #125	; 0x7d
   3ceac:	str	r2, [r4, #20]
   3ceb0:	strb	r3, [r1]
   3ceb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ceb8:	ldr	r3, [r4, #20]
   3cebc:	mov	r2, #10
   3cec0:	add	r1, r3, #1
   3cec4:	str	r1, [r4, #20]
   3cec8:	strb	r2, [r3]
   3cecc:	ldr	r3, [r4, #32]
   3ced0:	ldrb	r1, [r4, #25]
   3ced4:	sub	r3, r3, #1
   3ced8:	ldr	r0, [r4, #20]
   3cedc:	ldr	r2, [r4, #16]
   3cee0:	mul	r5, r3, r1
   3cee4:	str	r3, [r4, #32]
   3cee8:	add	r3, r0, r5
   3ceec:	cmp	r2, r3
   3cef0:	bcc	3cf0c <flatcc_json_printer_struct_as_nested_root@@Base+0x140>
   3cef4:	mov	r1, #32
   3cef8:	mov	r2, r5
   3cefc:	bl	145bc <memset@plt>
   3cf00:	ldr	r1, [r4, #20]
   3cf04:	add	r1, r1, r5
   3cf08:	b	3cea4 <flatcc_json_printer_struct_as_nested_root@@Base+0xd8>
   3cf0c:	mov	r1, r5
   3cf10:	mov	r0, r4
   3cf14:	bl	30e60 <flatcc_json_parser_table_as_root@@Base+0xf20>
   3cf18:	b	3cea0 <flatcc_json_printer_struct_as_nested_root@@Base+0xd4>

0003cf1c <flatcc_json_printer_table_as_nested_root@@Base>:
   3cf1c:	add	r2, r2, #2
   3cf20:	ldr	ip, [r1, #8]
   3cf24:	lsl	r2, r2, #1
   3cf28:	cmp	r2, ip
   3cf2c:	bxge	lr
   3cf30:	ldr	ip, [r1, #4]
   3cf34:	ldrh	r2, [ip, r2]
   3cf38:	cmp	r2, #0
   3cf3c:	bxeq	lr
   3cf40:	push	{r4, r5, r6, r7, r8, lr}
   3cf44:	sub	sp, sp, #24
   3cf48:	ldr	lr, [r1]
   3cf4c:	adds	ip, lr, r2
   3cf50:	beq	3cfd4 <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3cf54:	ldr	r2, [lr, r2]
   3cf58:	mov	r6, r3
   3cf5c:	add	r8, ip, r2
   3cf60:	add	r7, r8, #4
   3cf64:	mov	r4, r1
   3cf68:	ldr	r3, [sp, #52]	; 0x34
   3cf6c:	ldr	r2, [ip, r2]
   3cf70:	mov	r1, r7
   3cf74:	mov	r5, r0
   3cf78:	bl	311e8 <flatcc_json_parser_table_as_root@@Base+0x12a8>
   3cf7c:	cmp	r0, #0
   3cf80:	beq	3cfd4 <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3cf84:	ldr	r3, [r4, #16]
   3cf88:	mov	r0, r5
   3cf8c:	cmp	r3, #0
   3cf90:	add	r3, r3, #1
   3cf94:	str	r3, [r4, #16]
   3cf98:	ldrne	r3, [r5, #20]
   3cf9c:	movne	r2, #44	; 0x2c
   3cfa0:	addne	r1, r3, #1
   3cfa4:	strne	r1, [r5, #20]
   3cfa8:	strbne	r2, [r3]
   3cfac:	mov	r1, r6
   3cfb0:	ldr	r2, [sp, #48]	; 0x30
   3cfb4:	bl	32274 <flatcc_json_parser_table_as_root@@Base+0x2334>
   3cfb8:	ldr	r3, [r4, #12]
   3cfbc:	subs	r3, r3, #1
   3cfc0:	bne	3cfdc <flatcc_json_printer_table_as_nested_root@@Base+0xc0>
   3cfc4:	ldr	r3, [r5, #36]	; 0x24
   3cfc8:	cmp	r3, #0
   3cfcc:	moveq	r3, #2
   3cfd0:	streq	r3, [r5, #36]	; 0x24
   3cfd4:	add	sp, sp, #24
   3cfd8:	pop	{r4, r5, r6, r7, r8, pc}
   3cfdc:	ldr	r2, [r5, #32]
   3cfe0:	ldr	r1, [r8, #4]
   3cfe4:	ldr	r0, [r5, #20]
   3cfe8:	add	r2, r2, #1
   3cfec:	str	r2, [r5, #32]
   3cff0:	add	lr, r0, #1
   3cff4:	mov	ip, #123	; 0x7b
   3cff8:	mov	r2, #0
   3cffc:	str	lr, [r5, #20]
   3d000:	strb	ip, [r0]
   3d004:	str	r2, [sp, #20]
   3d008:	str	r3, [sp, #16]
   3d00c:	ldr	r3, [r7, r1]
   3d010:	add	r7, r7, r1
   3d014:	sub	r3, r7, r3
   3d018:	add	r1, sp, #4
   3d01c:	ldrh	r2, [r3]
   3d020:	mov	r0, r5
   3d024:	str	r3, [sp, #8]
   3d028:	ldr	r3, [sp, #56]	; 0x38
   3d02c:	str	r2, [sp, #12]
   3d030:	str	r7, [sp, #4]
   3d034:	blx	r3
   3d038:	ldrb	r3, [r5, #25]
   3d03c:	cmp	r3, #0
   3d040:	bne	3d060 <flatcc_json_printer_table_as_nested_root@@Base+0x144>
   3d044:	ldr	r3, [r5, #20]
   3d048:	mov	r2, #125	; 0x7d
   3d04c:	add	r1, r3, #1
   3d050:	str	r1, [r5, #20]
   3d054:	strb	r2, [r3]
   3d058:	add	sp, sp, #24
   3d05c:	pop	{r4, r5, r6, r7, r8, pc}
   3d060:	ldr	r3, [r5, #20]
   3d064:	mov	r2, #10
   3d068:	add	r1, r3, #1
   3d06c:	str	r1, [r5, #20]
   3d070:	strb	r2, [r3]
   3d074:	ldr	r3, [r5, #32]
   3d078:	mov	r0, r5
   3d07c:	sub	r3, r3, #1
   3d080:	str	r3, [r5, #32]
   3d084:	bl	30f0c <flatcc_json_parser_table_as_root@@Base+0xfcc>
   3d088:	b	3d044 <flatcc_json_printer_table_as_nested_root@@Base+0x128>

0003d08c <flatcc_json_printer_init@@Base>:
   3d08c:	push	{r4, r5, r6, lr}
   3d090:	mov	r2, #48	; 0x30
   3d094:	mov	r5, r1
   3d098:	mov	r1, #0
   3d09c:	mov	r4, r0
   3d0a0:	bl	145bc <memset@plt>
   3d0a4:	ldr	r3, [pc, #104]	; 3d114 <flatcc_json_printer_init@@Base+0x88>
   3d0a8:	cmp	r5, #0
   3d0ac:	add	r3, pc, r3
   3d0b0:	beq	3d104 <flatcc_json_printer_init@@Base+0x78>
   3d0b4:	ldr	r3, [pc, #92]	; 3d118 <flatcc_json_printer_init@@Base+0x8c>
   3d0b8:	ldr	r6, [pc, #92]	; 3d11c <flatcc_json_printer_init@@Base+0x90>
   3d0bc:	add	r3, pc, r3
   3d0c0:	str	r3, [r4, #44]	; 0x2c
   3d0c4:	str	r5, [r4, #40]	; 0x28
   3d0c8:	mov	r0, r6
   3d0cc:	bl	14574 <malloc@plt>
   3d0d0:	cmp	r0, #0
   3d0d4:	addne	r1, r0, #16384	; 0x4000
   3d0d8:	movne	r2, #1
   3d0dc:	movne	r3, #16384	; 0x4000
   3d0e0:	str	r0, [r4]
   3d0e4:	strne	r0, [r4, #20]
   3d0e8:	strne	r6, [r4, #4]
   3d0ec:	movne	r0, #0
   3d0f0:	strne	r1, [r4, #16]
   3d0f4:	strbne	r2, [r4, #24]
   3d0f8:	strne	r3, [r4, #8]
   3d0fc:	mvneq	r0, #0
   3d100:	pop	{r4, r5, r6, pc}
   3d104:	ldr	r2, [pc, #20]	; 3d120 <flatcc_json_printer_init@@Base+0x94>
   3d108:	ldr	r3, [r3, r2]
   3d10c:	ldr	r5, [r3]
   3d110:	b	3d0b4 <flatcc_json_printer_init@@Base+0x28>
   3d114:	andeq	r6, r1, ip, asr #30
   3d118:			; <UNDEFINED> instruction: 0xffff3e9c
   3d11c:	andeq	r4, r0, r0, asr #32
   3d120:	andeq	r0, r0, r4, ror r0

0003d124 <flatcc_json_printer_init_buffer@@Base>:
   3d124:	cmp	r2, #63	; 0x3f
   3d128:	push	{r4, r5, r6, lr}
   3d12c:	bls	3d178 <flatcc_json_printer_init_buffer@@Base+0x54>
   3d130:	mov	r6, r1
   3d134:	mov	r5, r2
   3d138:	mov	r1, #0
   3d13c:	mov	r2, #48	; 0x30
   3d140:	mov	r4, r0
   3d144:	bl	145bc <memset@plt>
   3d148:	ldr	r3, [pc, #76]	; 3d19c <flatcc_json_printer_init_buffer@@Base+0x78>
   3d14c:	sub	r2, r5, #64	; 0x40
   3d150:	add	r3, pc, r3
   3d154:	add	r1, r6, r2
   3d158:	str	r6, [r4]
   3d15c:	str	r5, [r4, #4]
   3d160:	str	r2, [r4, #8]
   3d164:	str	r1, [r4, #16]
   3d168:	str	r6, [r4, #20]
   3d16c:	str	r3, [r4, #44]	; 0x2c
   3d170:	mov	r0, #0
   3d174:	pop	{r4, r5, r6, pc}
   3d178:	ldr	r3, [pc, #32]	; 3d1a0 <flatcc_json_printer_init_buffer@@Base+0x7c>
   3d17c:	ldr	r1, [pc, #32]	; 3d1a4 <flatcc_json_printer_init_buffer@@Base+0x80>
   3d180:	ldr	r0, [pc, #32]	; 3d1a8 <flatcc_json_printer_init_buffer@@Base+0x84>
   3d184:	add	r3, pc, r3
   3d188:	ldr	r2, [pc, #28]	; 3d1ac <flatcc_json_printer_init_buffer@@Base+0x88>
   3d18c:	add	r3, r3, #1824	; 0x720
   3d190:	add	r1, pc, r1
   3d194:	add	r0, pc, r0
   3d198:	bl	14610 <__assert_fail@plt>
   3d19c:			; <UNDEFINED> instruction: 0xffff3c10
   3d1a0:	muleq	r0, ip, r8
   3d1a4:	andeq	r5, r0, ip, ror #31
   3d1a8:	andeq	r6, r0, ip, lsl #4
   3d1ac:	andeq	r0, r0, sp, lsl #9

0003d1b0 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   3d1b0:	cmp	r1, #0
   3d1b4:	push	{r4, r5, r6, lr}
   3d1b8:	mov	r4, r0
   3d1bc:	moveq	r6, #4032	; 0xfc0
   3d1c0:	moveq	r5, #4096	; 0x1000
   3d1c4:	beq	3d1d8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x28>
   3d1c8:	cmp	r1, #64	; 0x40
   3d1cc:	movcs	r5, r1
   3d1d0:	movcc	r5, #64	; 0x40
   3d1d4:	sub	r6, r5, #64	; 0x40
   3d1d8:	mov	r2, #48	; 0x30
   3d1dc:	mov	r1, #0
   3d1e0:	mov	r0, r4
   3d1e4:	bl	145bc <memset@plt>
   3d1e8:	mov	r0, r5
   3d1ec:	bl	14574 <malloc@plt>
   3d1f0:	ldr	r3, [pc, #84]	; 3d24c <flatcc_json_printer_init_dynamic_buffer@@Base+0x9c>
   3d1f4:	mov	r2, #1
   3d1f8:	add	r3, pc, r3
   3d1fc:	stmib	r4, {r5, r6}
   3d200:	str	r3, [r4, #44]	; 0x2c
   3d204:	strb	r2, [r4, #24]
   3d208:	add	r1, r0, r6
   3d20c:	cmp	r0, #0
   3d210:	str	r0, [r4]
   3d214:	str	r0, [r4, #20]
   3d218:	str	r1, [r4, #16]
   3d21c:	beq	3d228 <flatcc_json_printer_init_dynamic_buffer@@Base+0x78>
   3d220:	mov	r0, #0
   3d224:	pop	{r4, r5, r6, pc}
   3d228:	ldr	r3, [r4, #36]	; 0x24
   3d22c:	cmp	r3, #0
   3d230:	bne	3d244 <flatcc_json_printer_init_dynamic_buffer@@Base+0x94>
   3d234:	mov	r3, #3
   3d238:	str	r3, [r4, #36]	; 0x24
   3d23c:	mvn	r0, #0
   3d240:	pop	{r4, r5, r6, pc}
   3d244:	mvn	r0, #0
   3d248:	pop	{r4, r5, r6, pc}
   3d24c:			; <UNDEFINED> instruction: 0xffff3e04

0003d250 <flatcc_json_printer_get_buffer@@Base>:
   3d250:	ldr	r3, [r0, #44]	; 0x2c
   3d254:	push	{r4, r5, r6, lr}
   3d258:	mov	r5, r1
   3d25c:	mov	r1, #0
   3d260:	mov	r4, r0
   3d264:	blx	r3
   3d268:	cmp	r5, #0
   3d26c:	ldr	r0, [r4]
   3d270:	ldrne	r3, [r4, #20]
   3d274:	subne	r3, r3, r0
   3d278:	strne	r3, [r5]
   3d27c:	pop	{r4, r5, r6, pc}

0003d280 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   3d280:	push	{r4, r5, r6, lr}
   3d284:	mov	r5, r0
   3d288:	bl	3d250 <flatcc_json_printer_get_buffer@@Base>
   3d28c:	mov	r2, #48	; 0x30
   3d290:	mov	r1, #0
   3d294:	mov	r4, r0
   3d298:	mov	r0, r5
   3d29c:	bl	145bc <memset@plt>
   3d2a0:	mov	r0, r4
   3d2a4:	pop	{r4, r5, r6, pc}

0003d2a8 <flatcc_json_printer_clear@@Base>:
   3d2a8:	push	{r4, lr}
   3d2ac:	mov	r4, r0
   3d2b0:	ldrb	r3, [r0, #24]
   3d2b4:	cmp	r3, #0
   3d2b8:	beq	3d2cc <flatcc_json_printer_clear@@Base+0x24>
   3d2bc:	ldr	r0, [r0]
   3d2c0:	cmp	r0, #0
   3d2c4:	beq	3d2cc <flatcc_json_printer_clear@@Base+0x24>
   3d2c8:	bl	14538 <free@plt>
   3d2cc:	mov	r0, r4
   3d2d0:	mov	r2, #48	; 0x30
   3d2d4:	mov	r1, #0
   3d2d8:	pop	{r4, lr}
   3d2dc:	b	145bc <memset@plt>
   3d2e0:	subs	r2, r1, #1
   3d2e4:	bxeq	lr
   3d2e8:	bcc	3d4c0 <flatcc_json_printer_clear@@Base+0x218>
   3d2ec:	cmp	r0, r1
   3d2f0:	bls	3d4a4 <flatcc_json_printer_clear@@Base+0x1fc>
   3d2f4:	tst	r1, r2
   3d2f8:	beq	3d4b0 <flatcc_json_printer_clear@@Base+0x208>
   3d2fc:	clz	r3, r0
   3d300:	clz	r2, r1
   3d304:	sub	r3, r2, r3
   3d308:	rsbs	r3, r3, #31
   3d30c:	addne	r3, r3, r3, lsl #1
   3d310:	mov	r2, #0
   3d314:	addne	pc, pc, r3, lsl #2
   3d318:	nop			; (mov r0, r0)
   3d31c:	cmp	r0, r1, lsl #31
   3d320:	adc	r2, r2, r2
   3d324:	subcs	r0, r0, r1, lsl #31
   3d328:	cmp	r0, r1, lsl #30
   3d32c:	adc	r2, r2, r2
   3d330:	subcs	r0, r0, r1, lsl #30
   3d334:	cmp	r0, r1, lsl #29
   3d338:	adc	r2, r2, r2
   3d33c:	subcs	r0, r0, r1, lsl #29
   3d340:	cmp	r0, r1, lsl #28
   3d344:	adc	r2, r2, r2
   3d348:	subcs	r0, r0, r1, lsl #28
   3d34c:	cmp	r0, r1, lsl #27
   3d350:	adc	r2, r2, r2
   3d354:	subcs	r0, r0, r1, lsl #27
   3d358:	cmp	r0, r1, lsl #26
   3d35c:	adc	r2, r2, r2
   3d360:	subcs	r0, r0, r1, lsl #26
   3d364:	cmp	r0, r1, lsl #25
   3d368:	adc	r2, r2, r2
   3d36c:	subcs	r0, r0, r1, lsl #25
   3d370:	cmp	r0, r1, lsl #24
   3d374:	adc	r2, r2, r2
   3d378:	subcs	r0, r0, r1, lsl #24
   3d37c:	cmp	r0, r1, lsl #23
   3d380:	adc	r2, r2, r2
   3d384:	subcs	r0, r0, r1, lsl #23
   3d388:	cmp	r0, r1, lsl #22
   3d38c:	adc	r2, r2, r2
   3d390:	subcs	r0, r0, r1, lsl #22
   3d394:	cmp	r0, r1, lsl #21
   3d398:	adc	r2, r2, r2
   3d39c:	subcs	r0, r0, r1, lsl #21
   3d3a0:	cmp	r0, r1, lsl #20
   3d3a4:	adc	r2, r2, r2
   3d3a8:	subcs	r0, r0, r1, lsl #20
   3d3ac:	cmp	r0, r1, lsl #19
   3d3b0:	adc	r2, r2, r2
   3d3b4:	subcs	r0, r0, r1, lsl #19
   3d3b8:	cmp	r0, r1, lsl #18
   3d3bc:	adc	r2, r2, r2
   3d3c0:	subcs	r0, r0, r1, lsl #18
   3d3c4:	cmp	r0, r1, lsl #17
   3d3c8:	adc	r2, r2, r2
   3d3cc:	subcs	r0, r0, r1, lsl #17
   3d3d0:	cmp	r0, r1, lsl #16
   3d3d4:	adc	r2, r2, r2
   3d3d8:	subcs	r0, r0, r1, lsl #16
   3d3dc:	cmp	r0, r1, lsl #15
   3d3e0:	adc	r2, r2, r2
   3d3e4:	subcs	r0, r0, r1, lsl #15
   3d3e8:	cmp	r0, r1, lsl #14
   3d3ec:	adc	r2, r2, r2
   3d3f0:	subcs	r0, r0, r1, lsl #14
   3d3f4:	cmp	r0, r1, lsl #13
   3d3f8:	adc	r2, r2, r2
   3d3fc:	subcs	r0, r0, r1, lsl #13
   3d400:	cmp	r0, r1, lsl #12
   3d404:	adc	r2, r2, r2
   3d408:	subcs	r0, r0, r1, lsl #12
   3d40c:	cmp	r0, r1, lsl #11
   3d410:	adc	r2, r2, r2
   3d414:	subcs	r0, r0, r1, lsl #11
   3d418:	cmp	r0, r1, lsl #10
   3d41c:	adc	r2, r2, r2
   3d420:	subcs	r0, r0, r1, lsl #10
   3d424:	cmp	r0, r1, lsl #9
   3d428:	adc	r2, r2, r2
   3d42c:	subcs	r0, r0, r1, lsl #9
   3d430:	cmp	r0, r1, lsl #8
   3d434:	adc	r2, r2, r2
   3d438:	subcs	r0, r0, r1, lsl #8
   3d43c:	cmp	r0, r1, lsl #7
   3d440:	adc	r2, r2, r2
   3d444:	subcs	r0, r0, r1, lsl #7
   3d448:	cmp	r0, r1, lsl #6
   3d44c:	adc	r2, r2, r2
   3d450:	subcs	r0, r0, r1, lsl #6
   3d454:	cmp	r0, r1, lsl #5
   3d458:	adc	r2, r2, r2
   3d45c:	subcs	r0, r0, r1, lsl #5
   3d460:	cmp	r0, r1, lsl #4
   3d464:	adc	r2, r2, r2
   3d468:	subcs	r0, r0, r1, lsl #4
   3d46c:	cmp	r0, r1, lsl #3
   3d470:	adc	r2, r2, r2
   3d474:	subcs	r0, r0, r1, lsl #3
   3d478:	cmp	r0, r1, lsl #2
   3d47c:	adc	r2, r2, r2
   3d480:	subcs	r0, r0, r1, lsl #2
   3d484:	cmp	r0, r1, lsl #1
   3d488:	adc	r2, r2, r2
   3d48c:	subcs	r0, r0, r1, lsl #1
   3d490:	cmp	r0, r1
   3d494:	adc	r2, r2, r2
   3d498:	subcs	r0, r0, r1
   3d49c:	mov	r0, r2
   3d4a0:	bx	lr
   3d4a4:	moveq	r0, #1
   3d4a8:	movne	r0, #0
   3d4ac:	bx	lr
   3d4b0:	clz	r2, r1
   3d4b4:	rsb	r2, r2, #31
   3d4b8:	lsr	r0, r0, r2
   3d4bc:	bx	lr
   3d4c0:	cmp	r0, #0
   3d4c4:	mvnne	r0, #0
   3d4c8:	b	3db30 <flatcc_json_printer_clear@@Base+0x888>
   3d4cc:	cmp	r1, #0
   3d4d0:	beq	3d4c0 <flatcc_json_printer_clear@@Base+0x218>
   3d4d4:	push	{r0, r1, lr}
   3d4d8:	bl	3d2e0 <flatcc_json_printer_clear@@Base+0x38>
   3d4dc:	pop	{r1, r2, lr}
   3d4e0:	mul	r3, r2, r0
   3d4e4:	sub	r1, r1, r3
   3d4e8:	bx	lr
   3d4ec:	eor	r1, r1, #-2147483648	; 0x80000000
   3d4f0:	b	3d4f8 <flatcc_json_printer_clear@@Base+0x250>
   3d4f4:	eor	r3, r3, #-2147483648	; 0x80000000
   3d4f8:	push	{r4, r5, lr}
   3d4fc:	lsl	r4, r1, #1
   3d500:	lsl	r5, r3, #1
   3d504:	teq	r4, r5
   3d508:	teqeq	r0, r2
   3d50c:	orrsne	ip, r4, r0
   3d510:	orrsne	ip, r5, r2
   3d514:	mvnsne	ip, r4, asr #21
   3d518:	mvnsne	ip, r5, asr #21
   3d51c:	beq	3d708 <flatcc_json_printer_clear@@Base+0x460>
   3d520:	lsr	r4, r4, #21
   3d524:	rsbs	r5, r4, r5, lsr #21
   3d528:	rsblt	r5, r5, #0
   3d52c:	ble	3d54c <flatcc_json_printer_clear@@Base+0x2a4>
   3d530:	add	r4, r4, r5
   3d534:	eor	r2, r0, r2
   3d538:	eor	r3, r1, r3
   3d53c:	eor	r0, r2, r0
   3d540:	eor	r1, r3, r1
   3d544:	eor	r2, r0, r2
   3d548:	eor	r3, r1, r3
   3d54c:	cmp	r5, #54	; 0x36
   3d550:	pophi	{r4, r5, pc}
   3d554:	tst	r1, #-2147483648	; 0x80000000
   3d558:	lsl	r1, r1, #12
   3d55c:	mov	ip, #1048576	; 0x100000
   3d560:	orr	r1, ip, r1, lsr #12
   3d564:	beq	3d570 <flatcc_json_printer_clear@@Base+0x2c8>
   3d568:	rsbs	r0, r0, #0
   3d56c:	rsc	r1, r1, #0
   3d570:	tst	r3, #-2147483648	; 0x80000000
   3d574:	lsl	r3, r3, #12
   3d578:	orr	r3, ip, r3, lsr #12
   3d57c:	beq	3d588 <flatcc_json_printer_clear@@Base+0x2e0>
   3d580:	rsbs	r2, r2, #0
   3d584:	rsc	r3, r3, #0
   3d588:	teq	r4, r5
   3d58c:	beq	3d6f0 <flatcc_json_printer_clear@@Base+0x448>
   3d590:	sub	r4, r4, #1
   3d594:	rsbs	lr, r5, #32
   3d598:	blt	3d5b4 <flatcc_json_printer_clear@@Base+0x30c>
   3d59c:	lsl	ip, r2, lr
   3d5a0:	adds	r0, r0, r2, lsr r5
   3d5a4:	adc	r1, r1, #0
   3d5a8:	adds	r0, r0, r3, lsl lr
   3d5ac:	adcs	r1, r1, r3, asr r5
   3d5b0:	b	3d5d0 <flatcc_json_printer_clear@@Base+0x328>
   3d5b4:	sub	r5, r5, #32
   3d5b8:	add	lr, lr, #32
   3d5bc:	cmp	r2, #1
   3d5c0:	lsl	ip, r3, lr
   3d5c4:	orrcs	ip, ip, #2
   3d5c8:	adds	r0, r0, r3, asr r5
   3d5cc:	adcs	r1, r1, r3, asr #31
   3d5d0:	and	r5, r1, #-2147483648	; 0x80000000
   3d5d4:	bpl	3d5e4 <flatcc_json_printer_clear@@Base+0x33c>
   3d5d8:	rsbs	ip, ip, #0
   3d5dc:	rscs	r0, r0, #0
   3d5e0:	rsc	r1, r1, #0
   3d5e4:	cmp	r1, #1048576	; 0x100000
   3d5e8:	bcc	3d628 <flatcc_json_printer_clear@@Base+0x380>
   3d5ec:	cmp	r1, #2097152	; 0x200000
   3d5f0:	bcc	3d610 <flatcc_json_printer_clear@@Base+0x368>
   3d5f4:	lsrs	r1, r1, #1
   3d5f8:	rrxs	r0, r0
   3d5fc:	rrx	ip, ip
   3d600:	add	r4, r4, #1
   3d604:	lsl	r2, r4, #21
   3d608:	cmn	r2, #4194304	; 0x400000
   3d60c:	bcs	3d768 <flatcc_json_printer_clear@@Base+0x4c0>
   3d610:	cmp	ip, #-2147483648	; 0x80000000
   3d614:	lsrseq	ip, r0, #1
   3d618:	adcs	r0, r0, #0
   3d61c:	adc	r1, r1, r4, lsl #20
   3d620:	orr	r1, r1, r5
   3d624:	pop	{r4, r5, pc}
   3d628:	lsls	ip, ip, #1
   3d62c:	adcs	r0, r0, r0
   3d630:	adc	r1, r1, r1
   3d634:	tst	r1, #1048576	; 0x100000
   3d638:	sub	r4, r4, #1
   3d63c:	bne	3d610 <flatcc_json_printer_clear@@Base+0x368>
   3d640:	teq	r1, #0
   3d644:	moveq	r1, r0
   3d648:	moveq	r0, #0
   3d64c:	clz	r3, r1
   3d650:	addeq	r3, r3, #32
   3d654:	sub	r3, r3, #11
   3d658:	subs	r2, r3, #32
   3d65c:	bge	3d680 <flatcc_json_printer_clear@@Base+0x3d8>
   3d660:	adds	r2, r2, #12
   3d664:	ble	3d67c <flatcc_json_printer_clear@@Base+0x3d4>
   3d668:	add	ip, r2, #20
   3d66c:	rsb	r2, r2, #12
   3d670:	lsl	r0, r1, ip
   3d674:	lsr	r1, r1, r2
   3d678:	b	3d690 <flatcc_json_printer_clear@@Base+0x3e8>
   3d67c:	add	r2, r2, #20
   3d680:	rsble	ip, r2, #32
   3d684:	lsl	r1, r1, r2
   3d688:	orrle	r1, r1, r0, lsr ip
   3d68c:	lslle	r0, r0, r2
   3d690:	subs	r4, r4, r3
   3d694:	addge	r1, r1, r4, lsl #20
   3d698:	orrge	r1, r1, r5
   3d69c:	popge	{r4, r5, pc}
   3d6a0:	mvn	r4, r4
   3d6a4:	subs	r4, r4, #31
   3d6a8:	bge	3d6e4 <flatcc_json_printer_clear@@Base+0x43c>
   3d6ac:	adds	r4, r4, #12
   3d6b0:	bgt	3d6cc <flatcc_json_printer_clear@@Base+0x424>
   3d6b4:	add	r4, r4, #20
   3d6b8:	rsb	r2, r4, #32
   3d6bc:	lsr	r0, r0, r4
   3d6c0:	orr	r0, r0, r1, lsl r2
   3d6c4:	orr	r1, r5, r1, lsr r4
   3d6c8:	pop	{r4, r5, pc}
   3d6cc:	rsb	r4, r4, #12
   3d6d0:	rsb	r2, r4, #32
   3d6d4:	lsr	r0, r0, r2
   3d6d8:	orr	r0, r0, r1, lsl r4
   3d6dc:	mov	r1, r5
   3d6e0:	pop	{r4, r5, pc}
   3d6e4:	lsr	r0, r1, r4
   3d6e8:	mov	r1, r5
   3d6ec:	pop	{r4, r5, pc}
   3d6f0:	teq	r4, #0
   3d6f4:	eor	r3, r3, #1048576	; 0x100000
   3d6f8:	eoreq	r1, r1, #1048576	; 0x100000
   3d6fc:	addeq	r4, r4, #1
   3d700:	subne	r5, r5, #1
   3d704:	b	3d590 <flatcc_json_printer_clear@@Base+0x2e8>
   3d708:	mvns	ip, r4, asr #21
   3d70c:	mvnsne	ip, r5, asr #21
   3d710:	beq	3d778 <flatcc_json_printer_clear@@Base+0x4d0>
   3d714:	teq	r4, r5
   3d718:	teqeq	r0, r2
   3d71c:	beq	3d730 <flatcc_json_printer_clear@@Base+0x488>
   3d720:	orrs	ip, r4, r0
   3d724:	moveq	r1, r3
   3d728:	moveq	r0, r2
   3d72c:	pop	{r4, r5, pc}
   3d730:	teq	r1, r3
   3d734:	movne	r1, #0
   3d738:	movne	r0, #0
   3d73c:	popne	{r4, r5, pc}
   3d740:	lsrs	ip, r4, #21
   3d744:	bne	3d758 <flatcc_json_printer_clear@@Base+0x4b0>
   3d748:	lsls	r0, r0, #1
   3d74c:	adcs	r1, r1, r1
   3d750:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3d754:	pop	{r4, r5, pc}
   3d758:	adds	r4, r4, #4194304	; 0x400000
   3d75c:	addcc	r1, r1, #1048576	; 0x100000
   3d760:	popcc	{r4, r5, pc}
   3d764:	and	r5, r1, #-2147483648	; 0x80000000
   3d768:	orr	r1, r5, #2130706432	; 0x7f000000
   3d76c:	orr	r1, r1, #15728640	; 0xf00000
   3d770:	mov	r0, #0
   3d774:	pop	{r4, r5, pc}
   3d778:	mvns	ip, r4, asr #21
   3d77c:	movne	r1, r3
   3d780:	movne	r0, r2
   3d784:	mvnseq	ip, r5, asr #21
   3d788:	movne	r3, r1
   3d78c:	movne	r2, r0
   3d790:	orrs	r4, r0, r1, lsl #12
   3d794:	orrseq	r5, r2, r3, lsl #12
   3d798:	teqeq	r1, r3
   3d79c:	orrne	r1, r1, #524288	; 0x80000
   3d7a0:	pop	{r4, r5, pc}
   3d7a4:	teq	r0, #0
   3d7a8:	moveq	r1, #0
   3d7ac:	bxeq	lr
   3d7b0:	push	{r4, r5, lr}
   3d7b4:	mov	r4, #1024	; 0x400
   3d7b8:	add	r4, r4, #50	; 0x32
   3d7bc:	mov	r5, #0
   3d7c0:	mov	r1, #0
   3d7c4:	b	3d640 <flatcc_json_printer_clear@@Base+0x398>
   3d7c8:	teq	r0, #0
   3d7cc:	moveq	r1, #0
   3d7d0:	bxeq	lr
   3d7d4:	push	{r4, r5, lr}
   3d7d8:	mov	r4, #1024	; 0x400
   3d7dc:	add	r4, r4, #50	; 0x32
   3d7e0:	ands	r5, r0, #-2147483648	; 0x80000000
   3d7e4:	rsbmi	r0, r0, #0
   3d7e8:	mov	r1, #0
   3d7ec:	b	3d640 <flatcc_json_printer_clear@@Base+0x398>
   3d7f0:	lsls	r2, r0, #1
   3d7f4:	asr	r1, r2, #3
   3d7f8:	rrx	r1, r1
   3d7fc:	lsl	r0, r2, #28
   3d800:	andsne	r3, r2, #-16777216	; 0xff000000
   3d804:	teqne	r3, #-16777216	; 0xff000000
   3d808:	eorne	r1, r1, #939524096	; 0x38000000
   3d80c:	bxne	lr
   3d810:	teq	r2, #0
   3d814:	teqne	r3, #-16777216	; 0xff000000
   3d818:	bxeq	lr
   3d81c:	push	{r4, r5, lr}
   3d820:	mov	r4, #896	; 0x380
   3d824:	and	r5, r1, #-2147483648	; 0x80000000
   3d828:	bic	r1, r1, #-2147483648	; 0x80000000
   3d82c:	b	3d640 <flatcc_json_printer_clear@@Base+0x398>
   3d830:	orrs	r2, r0, r1
   3d834:	bxeq	lr
   3d838:	push	{r4, r5, lr}
   3d83c:	mov	r5, #0
   3d840:	b	3d860 <flatcc_json_printer_clear@@Base+0x5b8>
   3d844:	orrs	r2, r0, r1
   3d848:	bxeq	lr
   3d84c:	push	{r4, r5, lr}
   3d850:	ands	r5, r1, #-2147483648	; 0x80000000
   3d854:	bpl	3d860 <flatcc_json_printer_clear@@Base+0x5b8>
   3d858:	rsbs	r0, r0, #0
   3d85c:	rsc	r1, r1, #0
   3d860:	mov	r4, #1024	; 0x400
   3d864:	add	r4, r4, #50	; 0x32
   3d868:	lsrs	ip, r1, #22
   3d86c:	beq	3d5e4 <flatcc_json_printer_clear@@Base+0x33c>
   3d870:	mov	r2, #3
   3d874:	lsrs	ip, ip, #3
   3d878:	addne	r2, r2, #3
   3d87c:	lsrs	ip, ip, #3
   3d880:	addne	r2, r2, #3
   3d884:	add	r2, r2, ip, lsr #3
   3d888:	rsb	r3, r2, #32
   3d88c:	lsl	ip, r0, r3
   3d890:	lsr	r0, r0, r2
   3d894:	orr	r0, r0, r1, lsl r3
   3d898:	lsr	r1, r1, r2
   3d89c:	add	r4, r4, r2
   3d8a0:	b	3d5e4 <flatcc_json_printer_clear@@Base+0x33c>
   3d8a4:	eor	r0, r0, #-2147483648	; 0x80000000
   3d8a8:	b	3d8b0 <flatcc_json_printer_clear@@Base+0x608>
   3d8ac:	eor	r1, r1, #-2147483648	; 0x80000000
   3d8b0:	lsls	r2, r0, #1
   3d8b4:	lslsne	r3, r1, #1
   3d8b8:	teqne	r2, r3
   3d8bc:	mvnsne	ip, r2, asr #24
   3d8c0:	mvnsne	ip, r3, asr #24
   3d8c4:	beq	3d9bc <flatcc_json_printer_clear@@Base+0x714>
   3d8c8:	lsr	r2, r2, #24
   3d8cc:	rsbs	r3, r2, r3, lsr #24
   3d8d0:	addgt	r2, r2, r3
   3d8d4:	eorgt	r1, r0, r1
   3d8d8:	eorgt	r0, r1, r0
   3d8dc:	eorgt	r1, r0, r1
   3d8e0:	rsblt	r3, r3, #0
   3d8e4:	cmp	r3, #25
   3d8e8:	bxhi	lr
   3d8ec:	tst	r0, #-2147483648	; 0x80000000
   3d8f0:	orr	r0, r0, #8388608	; 0x800000
   3d8f4:	bic	r0, r0, #-16777216	; 0xff000000
   3d8f8:	rsbne	r0, r0, #0
   3d8fc:	tst	r1, #-2147483648	; 0x80000000
   3d900:	orr	r1, r1, #8388608	; 0x800000
   3d904:	bic	r1, r1, #-16777216	; 0xff000000
   3d908:	rsbne	r1, r1, #0
   3d90c:	teq	r2, r3
   3d910:	beq	3d9a4 <flatcc_json_printer_clear@@Base+0x6fc>
   3d914:	sub	r2, r2, #1
   3d918:	adds	r0, r0, r1, asr r3
   3d91c:	rsb	r3, r3, #32
   3d920:	lsl	r1, r1, r3
   3d924:	and	r3, r0, #-2147483648	; 0x80000000
   3d928:	bpl	3d934 <flatcc_json_printer_clear@@Base+0x68c>
   3d92c:	rsbs	r1, r1, #0
   3d930:	rsc	r0, r0, #0
   3d934:	cmp	r0, #8388608	; 0x800000
   3d938:	bcc	3d96c <flatcc_json_printer_clear@@Base+0x6c4>
   3d93c:	cmp	r0, #16777216	; 0x1000000
   3d940:	bcc	3d958 <flatcc_json_printer_clear@@Base+0x6b0>
   3d944:	lsrs	r0, r0, #1
   3d948:	rrx	r1, r1
   3d94c:	add	r2, r2, #1
   3d950:	cmp	r2, #254	; 0xfe
   3d954:	bcs	3da10 <flatcc_json_printer_clear@@Base+0x768>
   3d958:	cmp	r1, #-2147483648	; 0x80000000
   3d95c:	adc	r0, r0, r2, lsl #23
   3d960:	biceq	r0, r0, #1
   3d964:	orr	r0, r0, r3
   3d968:	bx	lr
   3d96c:	lsls	r1, r1, #1
   3d970:	adc	r0, r0, r0
   3d974:	tst	r0, #8388608	; 0x800000
   3d978:	sub	r2, r2, #1
   3d97c:	bne	3d958 <flatcc_json_printer_clear@@Base+0x6b0>
   3d980:	clz	ip, r0
   3d984:	sub	ip, ip, #8
   3d988:	subs	r2, r2, ip
   3d98c:	lsl	r0, r0, ip
   3d990:	addge	r0, r0, r2, lsl #23
   3d994:	rsblt	r2, r2, #0
   3d998:	orrge	r0, r0, r3
   3d99c:	orrlt	r0, r3, r0, lsr r2
   3d9a0:	bx	lr
   3d9a4:	teq	r2, #0
   3d9a8:	eor	r1, r1, #8388608	; 0x800000
   3d9ac:	eoreq	r0, r0, #8388608	; 0x800000
   3d9b0:	addeq	r2, r2, #1
   3d9b4:	subne	r3, r3, #1
   3d9b8:	b	3d914 <flatcc_json_printer_clear@@Base+0x66c>
   3d9bc:	lsl	r3, r1, #1
   3d9c0:	mvns	ip, r2, asr #24
   3d9c4:	mvnsne	ip, r3, asr #24
   3d9c8:	beq	3da1c <flatcc_json_printer_clear@@Base+0x774>
   3d9cc:	teq	r2, r3
   3d9d0:	beq	3d9e0 <flatcc_json_printer_clear@@Base+0x738>
   3d9d4:	teq	r2, #0
   3d9d8:	moveq	r0, r1
   3d9dc:	bx	lr
   3d9e0:	teq	r0, r1
   3d9e4:	movne	r0, #0
   3d9e8:	bxne	lr
   3d9ec:	tst	r2, #-16777216	; 0xff000000
   3d9f0:	bne	3da00 <flatcc_json_printer_clear@@Base+0x758>
   3d9f4:	lsls	r0, r0, #1
   3d9f8:	orrcs	r0, r0, #-2147483648	; 0x80000000
   3d9fc:	bx	lr
   3da00:	adds	r2, r2, #33554432	; 0x2000000
   3da04:	addcc	r0, r0, #8388608	; 0x800000
   3da08:	bxcc	lr
   3da0c:	and	r3, r0, #-2147483648	; 0x80000000
   3da10:	orr	r0, r3, #2130706432	; 0x7f000000
   3da14:	orr	r0, r0, #8388608	; 0x800000
   3da18:	bx	lr
   3da1c:	mvns	r2, r2, asr #24
   3da20:	movne	r0, r1
   3da24:	mvnseq	r3, r3, asr #24
   3da28:	movne	r1, r0
   3da2c:	lsls	r2, r0, #9
   3da30:	lslseq	r3, r1, #9
   3da34:	teqeq	r0, r1
   3da38:	orrne	r0, r0, #4194304	; 0x400000
   3da3c:	bx	lr
   3da40:	mov	r3, #0
   3da44:	b	3da50 <flatcc_json_printer_clear@@Base+0x7a8>
   3da48:	ands	r3, r0, #-2147483648	; 0x80000000
   3da4c:	rsbmi	r0, r0, #0
   3da50:	movs	ip, r0
   3da54:	bxeq	lr
   3da58:	orr	r3, r3, #1258291200	; 0x4b000000
   3da5c:	mov	r1, r0
   3da60:	mov	r0, #0
   3da64:	b	3daa8 <flatcc_json_printer_clear@@Base+0x800>
   3da68:	orrs	r2, r0, r1
   3da6c:	bxeq	lr
   3da70:	mov	r3, #0
   3da74:	b	3da90 <flatcc_json_printer_clear@@Base+0x7e8>
   3da78:	orrs	r2, r0, r1
   3da7c:	bxeq	lr
   3da80:	ands	r3, r1, #-2147483648	; 0x80000000
   3da84:	bpl	3da90 <flatcc_json_printer_clear@@Base+0x7e8>
   3da88:	rsbs	r0, r0, #0
   3da8c:	rsc	r1, r1, #0
   3da90:	movs	ip, r1
   3da94:	moveq	ip, r0
   3da98:	moveq	r1, r0
   3da9c:	moveq	r0, #0
   3daa0:	orr	r3, r3, #1526726656	; 0x5b000000
   3daa4:	subeq	r3, r3, #268435456	; 0x10000000
   3daa8:	sub	r3, r3, #8388608	; 0x800000
   3daac:	clz	r2, ip
   3dab0:	subs	r2, r2, #8
   3dab4:	sub	r3, r3, r2, lsl #23
   3dab8:	blt	3dad8 <flatcc_json_printer_clear@@Base+0x830>
   3dabc:	add	r3, r3, r1, lsl r2
   3dac0:	lsl	ip, r0, r2
   3dac4:	rsb	r2, r2, #32
   3dac8:	cmp	ip, #-2147483648	; 0x80000000
   3dacc:	adc	r0, r3, r0, lsr r2
   3dad0:	biceq	r0, r0, #1
   3dad4:	bx	lr
   3dad8:	add	r2, r2, #32
   3dadc:	lsl	ip, r1, r2
   3dae0:	rsb	r2, r2, #32
   3dae4:	orrs	r0, r0, ip, lsl #1
   3dae8:	adc	r0, r3, r1, lsr r2
   3daec:	biceq	r0, r0, ip, lsr #31
   3daf0:	bx	lr
   3daf4:	cmp	r3, #0
   3daf8:	cmpeq	r2, #0
   3dafc:	bne	3db14 <flatcc_json_printer_clear@@Base+0x86c>
   3db00:	cmp	r1, #0
   3db04:	cmpeq	r0, #0
   3db08:	mvnne	r1, #0
   3db0c:	mvnne	r0, #0
   3db10:	b	3db30 <flatcc_json_printer_clear@@Base+0x888>
   3db14:	sub	sp, sp, #8
   3db18:	push	{sp, lr}
   3db1c:	bl	3db40 <flatcc_json_printer_clear@@Base+0x898>
   3db20:	ldr	lr, [sp, #4]
   3db24:	add	sp, sp, #8
   3db28:	pop	{r2, r3}
   3db2c:	bx	lr
   3db30:	push	{r1, lr}
   3db34:	mov	r0, #8
   3db38:	bl	14514 <raise@plt>
   3db3c:	pop	{r1, pc}
   3db40:	cmp	r1, r3
   3db44:	push	{r4, r5, r6, r7, r8, r9, lr}
   3db48:	cmpeq	r0, r2
   3db4c:	mov	r4, r0
   3db50:	mov	r5, r1
   3db54:	ldr	r9, [sp, #28]
   3db58:	movcc	r0, #0
   3db5c:	movcc	r1, #0
   3db60:	bcc	3dc58 <flatcc_json_printer_clear@@Base+0x9b0>
   3db64:	cmp	r3, #0
   3db68:	clzeq	ip, r2
   3db6c:	clzne	ip, r3
   3db70:	addeq	ip, ip, #32
   3db74:	cmp	r5, #0
   3db78:	clzeq	r1, r4
   3db7c:	addeq	r1, r1, #32
   3db80:	clzne	r1, r5
   3db84:	sub	ip, ip, r1
   3db88:	sub	lr, ip, #32
   3db8c:	lsl	r7, r3, ip
   3db90:	rsb	r8, ip, #32
   3db94:	orr	r7, r7, r2, lsl lr
   3db98:	orr	r7, r7, r2, lsr r8
   3db9c:	lsl	r6, r2, ip
   3dba0:	cmp	r5, r7
   3dba4:	cmpeq	r4, r6
   3dba8:	movcc	r0, #0
   3dbac:	movcc	r1, #0
   3dbb0:	bcc	3dbcc <flatcc_json_printer_clear@@Base+0x924>
   3dbb4:	mov	r3, #1
   3dbb8:	subs	r4, r4, r6
   3dbbc:	lsl	r1, r3, lr
   3dbc0:	lsl	r0, r3, ip
   3dbc4:	orr	r1, r1, r3, lsr r8
   3dbc8:	sbc	r5, r5, r7
   3dbcc:	cmp	ip, #0
   3dbd0:	beq	3dc58 <flatcc_json_printer_clear@@Base+0x9b0>
   3dbd4:	lsrs	r3, r7, #1
   3dbd8:	rrx	r2, r6
   3dbdc:	mov	r6, ip
   3dbe0:	b	3dc04 <flatcc_json_printer_clear@@Base+0x95c>
   3dbe4:	subs	r4, r4, r2
   3dbe8:	sbc	r5, r5, r3
   3dbec:	adds	r4, r4, r4
   3dbf0:	adc	r5, r5, r5
   3dbf4:	adds	r4, r4, #1
   3dbf8:	adc	r5, r5, #0
   3dbfc:	subs	r6, r6, #1
   3dc00:	beq	3dc20 <flatcc_json_printer_clear@@Base+0x978>
   3dc04:	cmp	r5, r3
   3dc08:	cmpeq	r4, r2
   3dc0c:	bcs	3dbe4 <flatcc_json_printer_clear@@Base+0x93c>
   3dc10:	adds	r4, r4, r4
   3dc14:	adc	r5, r5, r5
   3dc18:	subs	r6, r6, #1
   3dc1c:	bne	3dc04 <flatcc_json_printer_clear@@Base+0x95c>
   3dc20:	lsr	r6, r4, ip
   3dc24:	lsr	r7, r5, ip
   3dc28:	orr	r6, r6, r5, lsl r8
   3dc2c:	adds	r2, r0, r4
   3dc30:	orr	r6, r6, r5, lsr lr
   3dc34:	adc	r3, r1, r5
   3dc38:	lsl	r1, r7, ip
   3dc3c:	orr	r1, r1, r6, lsl lr
   3dc40:	lsl	r0, r6, ip
   3dc44:	orr	r1, r1, r6, lsr r8
   3dc48:	subs	r0, r2, r0
   3dc4c:	mov	r4, r6
   3dc50:	mov	r5, r7
   3dc54:	sbc	r1, r3, r1
   3dc58:	cmp	r9, #0
   3dc5c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   3dc60:	strd	r4, [r9]
   3dc64:	pop	{r4, r5, r6, r7, r8, r9, pc}

0003dc68 <__libc_csu_init@@Base>:
   3dc68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3dc6c:	mov	r7, r0
   3dc70:	ldr	r6, [pc, #72]	; 3dcc0 <__libc_csu_init@@Base+0x58>
   3dc74:	ldr	r5, [pc, #72]	; 3dcc4 <__libc_csu_init@@Base+0x5c>
   3dc78:	add	r6, pc, r6
   3dc7c:	add	r5, pc, r5
   3dc80:	sub	r6, r6, r5
   3dc84:	mov	r8, r1
   3dc88:	mov	r9, r2
   3dc8c:	bl	144f4 <raise@plt-0x20>
   3dc90:	asrs	r6, r6, #2
   3dc94:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dc98:	mov	r4, #0
   3dc9c:	add	r4, r4, #1
   3dca0:	ldr	r3, [r5], #4
   3dca4:	mov	r2, r9
   3dca8:	mov	r1, r8
   3dcac:	mov	r0, r7
   3dcb0:	blx	r3
   3dcb4:	cmp	r6, r4
   3dcb8:	bne	3dc9c <__libc_csu_init@@Base+0x34>
   3dcbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dcc0:	andeq	r6, r1, r0, ror #4
   3dcc4:	andeq	r6, r1, r8, asr r2

0003dcc8 <__libc_csu_fini@@Base>:
   3dcc8:	bx	lr

Disassembly of section .fini:

0003dccc <.fini>:
   3dccc:	push	{r3, lr}
   3dcd0:	pop	{r3, pc}
