
../repos/prog2/0.10:     file format elf32-littlearm


Disassembly of section .init:

00010608 <.init>:
   10608:	push	{r3, lr}
   1060c:	bl	10744 <_start@@Base+0x3c>
   10610:	pop	{r3, pc}

Disassembly of section .plt:

00010614 <printf@plt-0x14>:
   10614:	push	{lr}		; (str lr, [sp, #-4]!)
   10618:	ldr	lr, [pc, #4]	; 10624 <printf@plt-0x4>
   1061c:	add	lr, pc, lr
   10620:	ldr	pc, [lr, #8]!
   10624:	ldrdeq	r0, [r1], -ip

00010628 <printf@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2524]!	; 0x9dc

00010634 <memcpy@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2516]!	; 0x9d4

00010640 <__libc_start_main@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2508]!	; 0x9cc

0001064c <__gmon_start__@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2500]!	; 0x9c4

00010658 <__isoc99_scanf@plt>:
   10658:	add	ip, pc, #0, 12
   1065c:	add	ip, ip, #16, 20	; 0x10000
   10660:	ldr	pc, [ip, #2492]!	; 0x9bc

00010664 <abort@plt>:
   10664:	add	ip, pc, #0, 12
   10668:	add	ip, ip, #16, 20	; 0x10000
   1066c:	ldr	pc, [ip, #2484]!	; 0x9b4

Disassembly of section .text:

00010670 <main@@Base>:
   10670:	strd	r4, [sp, #-12]!
   10674:	str	lr, [sp, #8]
   10678:	sub	sp, sp, #6848	; 0x1ac0
   1067c:	sub	sp, sp, #28
   10680:	add	r4, sp, #72	; 0x48
   10684:	mov	r0, r4
   10688:	bl	10838 <ler_tarefas@@Base>
   1068c:	mov	r5, r0
   10690:	mov	r1, r0
   10694:	mov	r0, r4
   10698:	bl	10884 <lista_tarefas@@Base>
   1069c:	ldr	r0, [pc, #88]	; 106fc <main@@Base+0x8c>
   106a0:	mov	r1, r5
   106a4:	add	r0, pc, r0
   106a8:	bl	10628 <printf@plt>
   106ac:	mov	r0, r4
   106b0:	add	r4, sp, #4
   106b4:	mov	r1, r5
   106b8:	mov	r2, r4
   106bc:	bl	108f0 <analisa_tarefas@@Base>
   106c0:	vcvt.f64.f32	d7, s0
   106c4:	ldr	r0, [pc, #52]	; 10700 <main@@Base+0x90>
   106c8:	add	r0, pc, r0
   106cc:	vmov	r2, r3, d7
   106d0:	bl	10628 <printf@plt>
   106d4:	ldr	r0, [pc, #40]	; 10704 <main@@Base+0x94>
   106d8:	mov	r1, r4
   106dc:	add	r0, pc, r0
   106e0:	bl	10628 <printf@plt>
   106e4:	mov	r0, #0
   106e8:	add	sp, sp, #6848	; 0x1ac0
   106ec:	add	sp, sp, #28
   106f0:	ldrd	r4, [sp]
   106f4:	add	sp, sp, #8
   106f8:	pop	{pc}		; (ldr pc, [sp], #4)
   106fc:	andeq	r0, r0, r0, ror r3
   10700:	andeq	r0, r0, ip, ror #6
   10704:	andeq	r0, r0, ip, ror r3

00010708 <_start@@Base>:
   10708:	mov	fp, #0
   1070c:	mov	lr, #0
   10710:	pop	{r1}		; (ldr r1, [sp], #4)
   10714:	mov	r2, sp
   10718:	push	{r2}		; (str r2, [sp, #-4]!)
   1071c:	push	{r0}		; (str r0, [sp, #-4]!)
   10720:	ldr	ip, [pc, #16]	; 10738 <_start@@Base+0x30>
   10724:	push	{ip}		; (str ip, [sp, #-4]!)
   10728:	ldr	r0, [pc, #12]	; 1073c <_start@@Base+0x34>
   1072c:	ldr	r3, [pc, #12]	; 10740 <_start@@Base+0x38>
   10730:	bl	10640 <__libc_start_main@plt>
   10734:	bl	10664 <abort@plt>
   10738:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1073c:	andeq	r0, r1, r0, ror r6
   10740:	muleq	r1, r0, r9
   10744:	ldr	r3, [pc, #20]	; 10760 <_start@@Base+0x58>
   10748:	ldr	r2, [pc, #20]	; 10764 <_start@@Base+0x5c>
   1074c:	add	r3, pc, r3
   10750:	ldr	r2, [r3, r2]
   10754:	cmp	r2, #0
   10758:	bxeq	lr
   1075c:	b	1064c <__gmon_start__@plt>
   10760:	andeq	r0, r1, ip, lsr #17
   10764:	andeq	r0, r0, r4, lsr #32
   10768:	ldr	r0, [pc, #24]	; 10788 <_start@@Base+0x80>
   1076c:	ldr	r3, [pc, #24]	; 1078c <_start@@Base+0x84>
   10770:	cmp	r3, r0
   10774:	bxeq	lr
   10778:	ldr	r3, [pc, #16]	; 10790 <_start@@Base+0x88>
   1077c:	cmp	r3, #0
   10780:	bxeq	lr
   10784:	bx	r3
   10788:	andeq	r1, r2, r0, lsr r0
   1078c:	andeq	r1, r2, r0, lsr r0
   10790:	andeq	r0, r0, r0
   10794:	ldr	r0, [pc, #36]	; 107c0 <_start@@Base+0xb8>
   10798:	ldr	r1, [pc, #36]	; 107c4 <_start@@Base+0xbc>
   1079c:	sub	r1, r1, r0
   107a0:	asr	r1, r1, #2
   107a4:	add	r1, r1, r1, lsr #31
   107a8:	asrs	r1, r1, #1
   107ac:	bxeq	lr
   107b0:	ldr	r3, [pc, #16]	; 107c8 <_start@@Base+0xc0>
   107b4:	cmp	r3, #0
   107b8:	bxeq	lr
   107bc:	bx	r3
   107c0:	andeq	r1, r2, r0, lsr r0
   107c4:	andeq	r1, r2, r0, lsr r0
   107c8:	andeq	r0, r0, r0
   107cc:	push	{r4, lr}
   107d0:	ldr	r4, [pc, #24]	; 107f0 <_start@@Base+0xe8>
   107d4:	ldrb	r3, [r4]
   107d8:	cmp	r3, #0
   107dc:	popne	{r4, pc}
   107e0:	bl	10768 <_start@@Base+0x60>
   107e4:	mov	r3, #1
   107e8:	strb	r3, [r4]
   107ec:	pop	{r4, pc}
   107f0:	andeq	r1, r2, r0, lsr r0
   107f4:	b	10794 <_start@@Base+0x8c>

000107f8 <nova_tarefa@@Base>:
   107f8:	mov	r1, r0
   107fc:	ldr	r0, [pc, #48]	; 10834 <nova_tarefa@@Base+0x3c>
   10800:	add	ip, r1, #64	; 0x40
   10804:	push	{lr}		; (str lr, [sp, #-4]!)
   10808:	sub	sp, sp, #12
   1080c:	add	r3, r1, #60	; 0x3c
   10810:	add	r2, r1, #30
   10814:	str	ip, [sp]
   10818:	add	r0, pc, r0
   1081c:	bl	10658 <__isoc99_scanf@plt>
   10820:	sub	r0, r0, #4
   10824:	clz	r0, r0
   10828:	lsr	r0, r0, #5
   1082c:	add	sp, sp, #12
   10830:	pop	{pc}		; (ldr pc, [sp], #4)
   10834:	andeq	r0, r0, r0, ror #3

00010838 <ler_tarefas@@Base>:
   10838:	strd	r4, [sp, #-16]!
   1083c:	mov	r4, r0
   10840:	mov	r5, #0
   10844:	str	r6, [sp, #8]
   10848:	str	lr, [sp, #12]
   1084c:	b	1085c <ler_tarefas@@Base+0x24>
   10850:	cmp	r5, #100	; 0x64
   10854:	beq	10870 <ler_tarefas@@Base+0x38>
   10858:	add	r5, r5, #1
   1085c:	mov	r0, r4
   10860:	add	r4, r4, #68	; 0x44
   10864:	bl	107f8 <nova_tarefa@@Base>
   10868:	cmp	r0, #0
   1086c:	bne	10850 <ler_tarefas@@Base+0x18>
   10870:	mov	r0, r5
   10874:	ldrd	r4, [sp]
   10878:	ldr	r6, [sp, #8]
   1087c:	add	sp, sp, #12
   10880:	pop	{pc}		; (ldr pc, [sp], #4)

00010884 <lista_tarefas@@Base>:
   10884:	cmp	r1, #0
   10888:	bxle	lr
   1088c:	strd	r4, [sp, #-16]!
   10890:	add	r1, r1, r1, lsl #4
   10894:	mov	r4, r0
   10898:	str	r6, [sp, #8]
   1089c:	ldr	r6, [pc, #72]	; 108ec <lista_tarefas@@Base+0x68>
   108a0:	add	r5, r0, r1, lsl #2
   108a4:	str	lr, [sp, #12]
   108a8:	sub	sp, sp, #8
   108ac:	add	r6, pc, r6
   108b0:	add	r2, r4, #30
   108b4:	mov	r1, r4
   108b8:	ldr	r3, [r4, #60]	; 0x3c
   108bc:	mov	r0, r6
   108c0:	add	r4, r4, #68	; 0x44
   108c4:	ldr	ip, [r4, #-4]
   108c8:	str	ip, [sp]
   108cc:	bl	10628 <printf@plt>
   108d0:	cmp	r4, r5
   108d4:	bne	108b0 <lista_tarefas@@Base+0x2c>
   108d8:	add	sp, sp, #8
   108dc:	ldrd	r4, [sp]
   108e0:	ldr	r6, [sp, #8]
   108e4:	add	sp, sp, #12
   108e8:	pop	{pc}		; (ldr pc, [sp], #4)
   108ec:	andeq	r0, r0, r8, asr r1

000108f0 <analisa_tarefas@@Base>:
   108f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   108f4:	strd	r6, [sp, #8]
   108f8:	strd	r8, [sp, #16]
   108fc:	subs	r9, r1, #0
   10900:	str	sl, [sp, #24]
   10904:	str	lr, [sp, #28]
   10908:	ble	10980 <analisa_tarefas@@Base+0x90>
   1090c:	add	r8, r9, r9, lsl #4
   10910:	mov	r3, #0
   10914:	mov	r7, r2
   10918:	mov	r4, r0
   1091c:	mov	r6, r3
   10920:	add	r8, r0, r8, lsl #2
   10924:	ldr	r5, [r4, #60]	; 0x3c
   10928:	mov	r2, #68	; 0x44
   1092c:	mov	r1, r4
   10930:	mov	r0, r7
   10934:	add	r4, r4, r2
   10938:	cmp	r5, r3
   1093c:	add	r6, r6, r5
   10940:	ble	1094c <analisa_tarefas@@Base+0x5c>
   10944:	bl	10634 <memcpy@plt>
   10948:	mov	r3, r5
   1094c:	cmp	r8, r4
   10950:	bne	10924 <analisa_tarefas@@Base+0x34>
   10954:	vmov	s15, r6
   10958:	vmov	s14, r9
   1095c:	vcvt.f32.s32	s15, s15
   10960:	vcvt.f32.s32	s0, s14
   10964:	ldrd	r4, [sp]
   10968:	vdiv.f32	s0, s15, s0
   1096c:	ldrd	r6, [sp, #8]
   10970:	ldrd	r8, [sp, #16]
   10974:	ldr	sl, [sp, #24]
   10978:	add	sp, sp, #28
   1097c:	pop	{pc}		; (ldr pc, [sp], #4)
   10980:	vldr	s0, [pc, #4]	; 1098c <analisa_tarefas@@Base+0x9c>
   10984:	vmov.f32	s15, s0
   10988:	b	10964 <analisa_tarefas@@Base+0x74>
   1098c:	andeq	r0, r0, r0

00010990 <__libc_csu_init@@Base>:
   10990:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10994:	mov	r7, r0
   10998:	ldr	r6, [pc, #72]	; 109e8 <__libc_csu_init@@Base+0x58>
   1099c:	ldr	r5, [pc, #72]	; 109ec <__libc_csu_init@@Base+0x5c>
   109a0:	add	r6, pc, r6
   109a4:	add	r5, pc, r5
   109a8:	sub	r6, r6, r5
   109ac:	mov	r8, r1
   109b0:	mov	r9, r2
   109b4:	bl	10608 <printf@plt-0x20>
   109b8:	asrs	r6, r6, #2
   109bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109c0:	mov	r4, #0
   109c4:	add	r4, r4, #1
   109c8:	ldr	r3, [r5], #4
   109cc:	mov	r2, r9
   109d0:	mov	r1, r8
   109d4:	mov	r0, r7
   109d8:	blx	r3
   109dc:	cmp	r6, r4
   109e0:	bne	109c4 <__libc_csu_init@@Base+0x34>
   109e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109e8:	andeq	r0, r1, ip, ror #10
   109ec:	andeq	r0, r1, r4, ror #10

000109f0 <__libc_csu_fini@@Base>:
   109f0:	bx	lr

Disassembly of section .fini:

000109f4 <.fini>:
   109f4:	push	{r3, lr}
   109f8:	pop	{r3, pc}
