
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010d94 <.init>:
   10d94:	push	{r3, lr}
   10d98:	bl	10f94 <_start@@Base+0x3c>
   10d9c:	pop	{r3, pc}

Disassembly of section .plt:

00010da0 <coda_match_filefilter@plt-0x14>:
   10da0:	push	{lr}		; (str lr, [sp, #-4]!)
   10da4:	ldr	lr, [pc, #4]	; 10db0 <coda_match_filefilter@plt-0x4>
   10da8:	add	lr, pc, lr
   10dac:	ldr	pc, [lr, #8]!
   10db0:	andeq	r3, r1, r0, asr r2

00010db4 <coda_match_filefilter@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #77824	; 0x13000
   10dbc:	ldr	pc, [ip, #592]!	; 0x250

00010dc0 <coda_expression_eval_integer@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #77824	; 0x13000
   10dc8:	ldr	pc, [ip, #584]!	; 0x248

00010dcc <strcmp@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #77824	; 0x13000
   10dd4:	ldr	pc, [ip, #576]!	; 0x240

00010dd8 <printf@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #77824	; 0x13000
   10de0:	ldr	pc, [ip, #568]!	; 0x238

00010de4 <coda_set_error@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #77824	; 0x13000
   10dec:	ldr	pc, [ip, #560]!	; 0x230

00010df0 <coda_open@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #77824	; 0x13000
   10df8:	ldr	pc, [ip, #552]!	; 0x228

00010dfc <free@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #77824	; 0x13000
   10e04:	ldr	pc, [ip, #544]!	; 0x220

00010e08 <coda_set_definition_path_conditional@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #77824	; 0x13000
   10e10:	ldr	pc, [ip, #536]!	; 0x218

00010e14 <coda_set_definition_path@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #77824	; 0x13000
   10e1c:	ldr	pc, [ip, #528]!	; 0x210

00010e20 <coda_expression_eval_bool@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #77824	; 0x13000
   10e28:	ldr	pc, [ip, #520]!	; 0x208

00010e2c <coda_cursor_set_product@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #77824	; 0x13000
   10e34:	ldr	pc, [ip, #512]!	; 0x200

00010e38 <coda_done@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #77824	; 0x13000
   10e40:	ldr	pc, [ip, #504]!	; 0x1f8

00010e44 <__libc_start_main@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #77824	; 0x13000
   10e4c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e50 <coda_expression_delete@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #77824	; 0x13000
   10e58:	ldr	pc, [ip, #488]!	; 0x1e8

00010e5c <__gmon_start__@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #77824	; 0x13000
   10e64:	ldr	pc, [ip, #480]!	; 0x1e0

00010e68 <__ctype_b_loc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #77824	; 0x13000
   10e70:	ldr	pc, [ip, #472]!	; 0x1d8

00010e74 <exit@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #77824	; 0x13000
   10e7c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e80 <strlen@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #77824	; 0x13000
   10e88:	ldr	pc, [ip, #456]!	; 0x1c8

00010e8c <fprintf@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #77824	; 0x13000
   10e94:	ldr	pc, [ip, #448]!	; 0x1c0

00010e98 <coda_init@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #77824	; 0x13000
   10ea0:	ldr	pc, [ip, #440]!	; 0x1b8

00010ea4 <coda_set_option_perform_conversions@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #77824	; 0x13000
   10eac:	ldr	pc, [ip, #432]!	; 0x1b0

00010eb0 <coda_expression_eval_string@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #77824	; 0x13000
   10eb8:	ldr	pc, [ip, #424]!	; 0x1a8

00010ebc <coda_expression_get_type@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #77824	; 0x13000
   10ec4:	ldr	pc, [ip, #416]!	; 0x1a0

00010ec8 <coda_close@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #77824	; 0x13000
   10ed0:	ldr	pc, [ip, #408]!	; 0x198

00010ed4 <coda_expression_is_constant@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #77824	; 0x13000
   10edc:	ldr	pc, [ip, #400]!	; 0x190

00010ee0 <coda_expression_eval_float@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #77824	; 0x13000
   10ee8:	ldr	pc, [ip, #392]!	; 0x188

00010eec <coda_expression_eval_node@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #77824	; 0x13000
   10ef4:	ldr	pc, [ip, #384]!	; 0x180

00010ef8 <coda_errno_to_string@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #77824	; 0x13000
   10f00:	ldr	pc, [ip, #376]!	; 0x178

00010f04 <coda_expression_get_type_name@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #77824	; 0x13000
   10f0c:	ldr	pc, [ip, #368]!	; 0x170

00010f10 <coda_expression_from_string@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #77824	; 0x13000
   10f18:	ldr	pc, [ip, #360]!	; 0x168

00010f1c <coda_get_libcoda_version@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #77824	; 0x13000
   10f24:	ldr	pc, [ip, #352]!	; 0x160

00010f28 <coda_get_errno@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #77824	; 0x13000
   10f30:	ldr	pc, [ip, #344]!	; 0x158

00010f34 <abort@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #77824	; 0x13000
   10f3c:	ldr	pc, [ip, #336]!	; 0x150

00010f40 <coda_str64@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #77824	; 0x13000
   10f48:	ldr	pc, [ip, #328]!	; 0x148

00010f4c <__assert_fail@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #77824	; 0x13000
   10f54:	ldr	pc, [ip, #320]!	; 0x140

Disassembly of section .text:

00010f58 <_start@@Base>:
   10f58:	mov	fp, #0
   10f5c:	mov	lr, #0
   10f60:	pop	{r1}		; (ldr r1, [sp], #4)
   10f64:	mov	r2, sp
   10f68:	push	{r2}		; (str r2, [sp, #-4]!)
   10f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f70:	ldr	ip, [pc, #16]	; 10f88 <_start@@Base+0x30>
   10f74:	push	{ip}		; (str ip, [sp, #-4]!)
   10f78:	ldr	r0, [pc, #12]	; 10f8c <_start@@Base+0x34>
   10f7c:	ldr	r3, [pc, #12]	; 10f90 <_start@@Base+0x38>
   10f80:	bl	10e44 <__libc_start_main@plt>
   10f84:	bl	10f34 <abort@plt>
   10f88:	strdeq	r2, [r1], -r8
   10f8c:	ldrdeq	r1, [r1], -r4
   10f90:	muleq	r1, r8, r5
   10f94:	ldr	r3, [pc, #20]	; 10fb0 <_start@@Base+0x58>
   10f98:	ldr	r2, [pc, #20]	; 10fb4 <_start@@Base+0x5c>
   10f9c:	add	r3, pc, r3
   10fa0:	ldr	r2, [r3, r2]
   10fa4:	cmp	r2, #0
   10fa8:	bxeq	lr
   10fac:	b	10e5c <__gmon_start__@plt>
   10fb0:	andeq	r3, r1, ip, asr r0
   10fb4:	muleq	r0, ip, r0
   10fb8:	ldr	r0, [pc, #24]	; 10fd8 <_start@@Base+0x80>
   10fbc:	ldr	r3, [pc, #24]	; 10fdc <_start@@Base+0x84>
   10fc0:	cmp	r3, r0
   10fc4:	bxeq	lr
   10fc8:	ldr	r3, [pc, #16]	; 10fe0 <_start@@Base+0x88>
   10fcc:	cmp	r3, #0
   10fd0:	bxeq	lr
   10fd4:	bx	r3
   10fd8:	andeq	r4, r2, ip, lsr #1
   10fdc:	andeq	r4, r2, ip, lsr #1
   10fe0:	andeq	r0, r0, r0
   10fe4:	ldr	r0, [pc, #36]	; 11010 <_start@@Base+0xb8>
   10fe8:	ldr	r1, [pc, #36]	; 11014 <_start@@Base+0xbc>
   10fec:	sub	r1, r1, r0
   10ff0:	asr	r1, r1, #2
   10ff4:	add	r1, r1, r1, lsr #31
   10ff8:	asrs	r1, r1, #1
   10ffc:	bxeq	lr
   11000:	ldr	r3, [pc, #16]	; 11018 <_start@@Base+0xc0>
   11004:	cmp	r3, #0
   11008:	bxeq	lr
   1100c:	bx	r3
   11010:	andeq	r4, r2, ip, lsr #1
   11014:	andeq	r4, r2, ip, lsr #1
   11018:	andeq	r0, r0, r0
   1101c:	push	{r4, lr}
   11020:	ldr	r4, [pc, #24]	; 11040 <_start@@Base+0xe8>
   11024:	ldrb	r3, [r4]
   11028:	cmp	r3, #0
   1102c:	popne	{r4, pc}
   11030:	bl	10fb8 <_start@@Base+0x60>
   11034:	mov	r3, #1
   11038:	strb	r3, [r4]
   1103c:	pop	{r4, pc}
   11040:	andeq	r4, r2, ip, lsr #1
   11044:	b	10fe4 <_start@@Base+0x8c>

00011048 <callback@@Base>:
   11048:	push	{fp, lr}
   1104c:	mov	fp, sp
   11050:	sub	sp, sp, #32
   11054:	str	r0, [fp, #-8]
   11058:	str	r1, [fp, #-12]
   1105c:	str	r2, [sp, #16]
   11060:	str	r3, [sp, #12]
   11064:	ldr	r0, [fp, #-12]
   11068:	cmp	r0, #0
   1106c:	bne	11098 <callback@@Base+0x50>
   11070:	ldr	r0, [pc, #200]	; 11140 <callback@@Base+0xf8>
   11074:	add	r1, pc, r0
   11078:	ldr	r0, [pc, #196]	; 11144 <callback@@Base+0xfc>
   1107c:	ldr	r0, [pc, r0]
   11080:	ldr	r0, [r0]
   11084:	ldr	r2, [sp, #16]
   11088:	ldr	r3, [fp, #-8]
   1108c:	bl	10e8c <fprintf@plt>
   11090:	str	r0, [sp, #8]
   11094:	b	11100 <callback@@Base+0xb8>
   11098:	ldr	r0, [fp, #-12]
   1109c:	cmp	r0, #2
   110a0:	bne	110c8 <callback@@Base+0x80>
   110a4:	ldr	r0, [pc, #140]	; 11138 <callback@@Base+0xf0>
   110a8:	add	r1, pc, r0
   110ac:	ldr	r0, [pc, #136]	; 1113c <callback@@Base+0xf4>
   110b0:	ldr	r0, [pc, r0]
   110b4:	ldr	r0, [r0]
   110b8:	ldr	r2, [fp, #-8]
   110bc:	bl	10e8c <fprintf@plt>
   110c0:	str	r0, [sp, #4]
   110c4:	b	110fc <callback@@Base+0xb4>
   110c8:	ldr	r0, [fp, #-12]
   110cc:	cmp	r0, #1
   110d0:	bne	110f8 <callback@@Base+0xb0>
   110d4:	ldr	r0, [pc, #84]	; 11130 <callback@@Base+0xe8>
   110d8:	add	r1, pc, r0
   110dc:	ldr	r0, [pc, #80]	; 11134 <callback@@Base+0xec>
   110e0:	ldr	r0, [pc, r0]
   110e4:	ldr	r0, [r0]
   110e8:	ldr	r2, [fp, #-8]
   110ec:	ldr	r3, [sp, #16]
   110f0:	bl	10e8c <fprintf@plt>
   110f4:	str	r0, [sp]
   110f8:	b	110fc <callback@@Base+0xb4>
   110fc:	b	11100 <callback@@Base+0xb8>
   11100:	ldr	r0, [fp, #-12]
   11104:	cmp	r0, #4
   11108:	bne	1111c <callback@@Base+0xd4>
   1110c:	ldr	r0, [fp, #-8]
   11110:	bl	11148 <callback@@Base+0x100>
   11114:	str	r0, [fp, #-4]
   11118:	b	11124 <callback@@Base+0xdc>
   1111c:	movw	r0, #0
   11120:	str	r0, [fp, #-4]
   11124:	ldr	r0, [fp, #-4]
   11128:	mov	sp, fp
   1112c:	pop	{fp, pc}
   11130:	andeq	r1, r0, r0, ror #10
   11134:			; <UNDEFINED> instruction: 0x00012fb0
   11138:	andeq	r1, r0, sl, ror #10
   1113c:	andeq	r2, r1, r0, ror #31
   11140:	andeq	r1, r0, ip, lsl #11
   11144:	andeq	r3, r1, r4, lsl r0
   11148:	push	{r4, r5, fp, lr}
   1114c:	add	fp, sp, #8
   11150:	sub	sp, sp, #568	; 0x238
   11154:	str	r0, [fp, #-16]
   11158:	movw	r0, #0
   1115c:	str	r0, [fp, #-20]	; 0xffffffec
   11160:	ldr	r0, [fp, #-16]
   11164:	sub	r1, fp, #20
   11168:	bl	10df0 <coda_open@plt>
   1116c:	cmp	r0, #0
   11170:	beq	11180 <callback@@Base+0x138>
   11174:	movw	r0, #1
   11178:	str	r0, [fp, #-12]
   1117c:	b	112b0 <callback@@Base+0x268>
   11180:	ldr	r1, [fp, #-20]	; 0xffffffec
   11184:	add	r0, sp, #32
   11188:	bl	10e2c <coda_cursor_set_product@plt>
   1118c:	cmp	r0, #0
   11190:	beq	111ac <callback@@Base+0x164>
   11194:	ldr	r0, [fp, #-20]	; 0xffffffec
   11198:	bl	10ec8 <coda_close@plt>
   1119c:	movw	lr, #1
   111a0:	str	lr, [fp, #-12]
   111a4:	str	r0, [sp, #28]
   111a8:	b	112b0 <callback@@Base+0x268>
   111ac:	ldr	r0, [pc, #264]	; 112bc <callback@@Base+0x274>
   111b0:	add	r0, pc, r0
   111b4:	ldr	r0, [r0]
   111b8:	movw	r1, #0
   111bc:	cmp	r0, r1
   111c0:	beq	1123c <callback@@Base+0x1f4>
   111c4:	ldr	r0, [pc, #244]	; 112c0 <callback@@Base+0x278>
   111c8:	add	r0, pc, r0
   111cc:	ldr	r0, [r0]
   111d0:	add	r1, sp, #32
   111d4:	bl	10eec <coda_expression_eval_node@plt>
   111d8:	cmp	r0, #0
   111dc:	beq	11238 <callback@@Base+0x1f0>
   111e0:	ldr	r0, [pc, #232]	; 112d0 <callback@@Base+0x288>
   111e4:	ldr	r0, [pc, r0]
   111e8:	ldr	r0, [r0]
   111ec:	str	r0, [sp, #24]
   111f0:	bl	10f28 <coda_get_errno@plt>
   111f4:	ldr	r0, [r0]
   111f8:	bl	10ef8 <coda_errno_to_string@plt>
   111fc:	ldr	lr, [pc, #200]	; 112cc <callback@@Base+0x284>
   11200:	add	r1, pc, lr
   11204:	ldr	lr, [sp, #24]
   11208:	str	r0, [sp, #20]
   1120c:	mov	r0, lr
   11210:	ldr	r2, [sp, #20]
   11214:	bl	10e8c <fprintf@plt>
   11218:	ldr	r1, [fp, #-20]	; 0xffffffec
   1121c:	str	r0, [sp, #16]
   11220:	mov	r0, r1
   11224:	bl	10ec8 <coda_close@plt>
   11228:	movw	r1, #0
   1122c:	str	r1, [fp, #-12]
   11230:	str	r0, [sp, #12]
   11234:	b	112b0 <callback@@Base+0x268>
   11238:	b	1123c <callback@@Base+0x1f4>
   1123c:	add	r0, sp, #32
   11240:	bl	11b3c <main@@Base+0x868>
   11244:	cmp	r0, #0
   11248:	beq	1128c <callback@@Base+0x244>
   1124c:	ldr	r0, [pc, #116]	; 112c8 <callback@@Base+0x280>
   11250:	ldr	r0, [pc, r0]
   11254:	ldr	r0, [r0]
   11258:	str	r0, [sp, #8]
   1125c:	bl	10f28 <coda_get_errno@plt>
   11260:	ldr	r0, [r0]
   11264:	bl	10ef8 <coda_errno_to_string@plt>
   11268:	ldr	lr, [pc, #84]	; 112c4 <callback@@Base+0x27c>
   1126c:	add	r1, pc, lr
   11270:	ldr	r3, [fp, #-16]
   11274:	ldr	lr, [sp, #8]
   11278:	str	r0, [sp, #4]
   1127c:	mov	r0, lr
   11280:	ldr	r2, [sp, #4]
   11284:	bl	10e8c <fprintf@plt>
   11288:	str	r0, [sp]
   1128c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11290:	bl	10ec8 <coda_close@plt>
   11294:	cmp	r0, #0
   11298:	beq	112a8 <callback@@Base+0x260>
   1129c:	movw	r0, #1
   112a0:	str	r0, [fp, #-12]
   112a4:	b	112b0 <callback@@Base+0x268>
   112a8:	movw	r0, #0
   112ac:	str	r0, [fp, #-12]
   112b0:	ldr	r0, [fp, #-12]
   112b4:	sub	sp, fp, #8
   112b8:	pop	{r4, r5, fp, pc}
   112bc:	strdeq	r2, [r1], -r8
   112c0:	andeq	r2, r1, r0, ror #29
   112c4:	muleq	r0, r4, r3
   112c8:	andeq	r2, r1, r0, asr #28
   112cc:	andeq	r1, r0, r1, lsr #12
   112d0:	andeq	r2, r1, ip, lsr #29

000112d4 <main@@Base>:
   112d4:	push	{fp, lr}
   112d8:	mov	fp, sp
   112dc:	sub	sp, sp, #160	; 0xa0
   112e0:	movw	r2, #0
   112e4:	str	r2, [fp, #-4]
   112e8:	str	r0, [fp, #-8]
   112ec:	str	r1, [fp, #-12]
   112f0:	movw	r0, #1
   112f4:	str	r0, [fp, #-16]
   112f8:	str	r2, [fp, #-20]	; 0xffffffec
   112fc:	ldr	r0, [fp, #-8]
   11300:	cmp	r0, #1
   11304:	beq	11340 <main@@Base+0x6c>
   11308:	ldr	r0, [fp, #-12]
   1130c:	ldr	r0, [r0, #4]
   11310:	ldr	r1, [pc, #2044]	; 11b14 <main@@Base+0x840>
   11314:	add	r1, pc, r1
   11318:	bl	10dcc <strcmp@plt>
   1131c:	cmp	r0, #0
   11320:	beq	11340 <main@@Base+0x6c>
   11324:	ldr	r0, [fp, #-12]
   11328:	ldr	r0, [r0, #4]
   1132c:	ldr	r1, [pc, #2020]	; 11b18 <main@@Base+0x844>
   11330:	add	r1, pc, r1
   11334:	bl	10dcc <strcmp@plt>
   11338:	cmp	r0, #0
   1133c:	bne	1134c <main@@Base+0x78>
   11340:	bl	11e1c <main@@Base+0xb48>
   11344:	movw	r0, #0
   11348:	bl	10e74 <exit@plt>
   1134c:	ldr	r0, [fp, #-12]
   11350:	ldr	r0, [r0, #4]
   11354:	ldr	r1, [pc, #1984]	; 11b1c <main@@Base+0x848>
   11358:	add	r1, pc, r1
   1135c:	bl	10dcc <strcmp@plt>
   11360:	cmp	r0, #0
   11364:	beq	11384 <main@@Base+0xb0>
   11368:	ldr	r0, [fp, #-12]
   1136c:	ldr	r0, [r0, #4]
   11370:	ldr	r1, [pc, #1960]	; 11b20 <main@@Base+0x84c>
   11374:	add	r1, pc, r1
   11378:	bl	10dcc <strcmp@plt>
   1137c:	cmp	r0, #0
   11380:	bne	11390 <main@@Base+0xbc>
   11384:	bl	121bc <main@@Base+0xee8>
   11388:	movw	r0, #0
   1138c:	bl	10e74 <exit@plt>
   11390:	movw	r0, #1
   11394:	str	r0, [fp, #-24]	; 0xffffffe8
   11398:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1139c:	add	r0, r0, #1
   113a0:	ldr	r1, [fp, #-8]
   113a4:	cmp	r0, r1
   113a8:	bge	113fc <main@@Base+0x128>
   113ac:	ldr	r0, [fp, #-12]
   113b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   113b4:	add	r0, r0, r1, lsl #2
   113b8:	ldr	r0, [r0]
   113bc:	ldr	r1, [pc, #1888]	; 11b24 <main@@Base+0x850>
   113c0:	add	r1, pc, r1
   113c4:	bl	10dcc <strcmp@plt>
   113c8:	cmp	r0, #0
   113cc:	bne	113fc <main@@Base+0x128>
   113d0:	ldr	r0, [fp, #-12]
   113d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   113d8:	add	r1, r1, #1
   113dc:	add	r0, r0, r1, lsl #2
   113e0:	ldr	r0, [r0]
   113e4:	bl	10e14 <coda_set_definition_path@plt>
   113e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   113ec:	add	r1, r1, #2
   113f0:	str	r1, [fp, #-24]	; 0xffffffe8
   113f4:	str	r0, [fp, #-32]	; 0xffffffe0
   113f8:	b	11470 <main@@Base+0x19c>
   113fc:	ldr	r0, [pc, #1644]	; 11a70 <main@@Base+0x79c>
   11400:	add	r0, pc, r0
   11404:	str	r0, [fp, #-28]	; 0xffffffe4
   11408:	ldr	r0, [fp, #-12]
   1140c:	ldr	r0, [r0]
   11410:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11414:	movw	r1, #0
   11418:	bl	10e08 <coda_set_definition_path_conditional@plt>
   1141c:	cmp	r0, #0
   11420:	beq	1146c <main@@Base+0x198>
   11424:	ldr	r0, [pc, #1612]	; 11a78 <main@@Base+0x7a4>
   11428:	ldr	r0, [pc, r0]
   1142c:	ldr	r0, [r0]
   11430:	str	r0, [fp, #-36]	; 0xffffffdc
   11434:	bl	10f28 <coda_get_errno@plt>
   11438:	ldr	r0, [r0]
   1143c:	bl	10ef8 <coda_errno_to_string@plt>
   11440:	ldr	lr, [pc, #1580]	; 11a74 <main@@Base+0x7a0>
   11444:	add	r1, pc, lr
   11448:	ldr	lr, [fp, #-36]	; 0xffffffdc
   1144c:	str	r0, [fp, #-40]	; 0xffffffd8
   11450:	mov	r0, lr
   11454:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11458:	bl	10e8c <fprintf@plt>
   1145c:	movw	r1, #1
   11460:	str	r0, [fp, #-44]	; 0xffffffd4
   11464:	mov	r0, r1
   11468:	bl	10e74 <exit@plt>
   1146c:	b	11470 <main@@Base+0x19c>
   11470:	b	11474 <main@@Base+0x1a0>
   11474:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11478:	ldr	r1, [fp, #-8]
   1147c:	cmp	r0, r1
   11480:	bge	11664 <main@@Base+0x390>
   11484:	ldr	r0, [fp, #-12]
   11488:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1148c:	add	r0, r0, r1, lsl #2
   11490:	ldr	r0, [r0]
   11494:	ldr	r1, [pc, #1676]	; 11b28 <main@@Base+0x854>
   11498:	add	r1, pc, r1
   1149c:	bl	10dcc <strcmp@plt>
   114a0:	cmp	r0, #0
   114a4:	beq	114cc <main@@Base+0x1f8>
   114a8:	ldr	r0, [fp, #-12]
   114ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   114b0:	add	r0, r0, r1, lsl #2
   114b4:	ldr	r0, [r0]
   114b8:	ldr	r1, [pc, #1644]	; 11b2c <main@@Base+0x858>
   114bc:	add	r1, pc, r1
   114c0:	bl	10dcc <strcmp@plt>
   114c4:	cmp	r0, #0
   114c8:	bne	114d8 <main@@Base+0x204>
   114cc:	movw	r0, #1
   114d0:	str	r0, [fp, #-20]	; 0xffffffec
   114d4:	b	11654 <main@@Base+0x380>
   114d8:	ldr	r0, [fp, #-12]
   114dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   114e0:	add	r0, r0, r1, lsl #2
   114e4:	ldr	r0, [r0]
   114e8:	ldr	r1, [pc, #1600]	; 11b30 <main@@Base+0x85c>
   114ec:	add	r1, pc, r1
   114f0:	bl	10dcc <strcmp@plt>
   114f4:	cmp	r0, #0
   114f8:	beq	11520 <main@@Base+0x24c>
   114fc:	ldr	r0, [fp, #-12]
   11500:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11504:	add	r0, r0, r1, lsl #2
   11508:	ldr	r0, [r0]
   1150c:	ldr	r1, [pc, #1568]	; 11b34 <main@@Base+0x860>
   11510:	add	r1, pc, r1
   11514:	bl	10dcc <strcmp@plt>
   11518:	cmp	r0, #0
   1151c:	bne	1152c <main@@Base+0x258>
   11520:	movw	r0, #0
   11524:	str	r0, [fp, #-16]
   11528:	b	11650 <main@@Base+0x37c>
   1152c:	ldr	r0, [fp, #-12]
   11530:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11534:	add	r0, r0, r1, lsl #2
   11538:	ldr	r0, [r0]
   1153c:	ldr	r1, [pc, #1524]	; 11b38 <main@@Base+0x864>
   11540:	add	r1, pc, r1
   11544:	bl	10dcc <strcmp@plt>
   11548:	cmp	r0, #0
   1154c:	bne	11604 <main@@Base+0x330>
   11550:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11554:	add	r0, r0, #1
   11558:	ldr	r1, [fp, #-8]
   1155c:	cmp	r0, r1
   11560:	bge	11604 <main@@Base+0x330>
   11564:	ldr	r0, [fp, #-12]
   11568:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1156c:	add	r1, r1, #1
   11570:	add	r0, r0, r1, lsl #2
   11574:	ldr	r0, [r0]
   11578:	ldrb	r0, [r0]
   1157c:	cmp	r0, #45	; 0x2d
   11580:	beq	11604 <main@@Base+0x330>
   11584:	ldr	r0, [pc, #1404]	; 11b08 <main@@Base+0x834>
   11588:	add	r1, pc, r0
   1158c:	ldr	r0, [fp, #-12]
   11590:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11594:	add	r2, r2, #1
   11598:	add	r0, r0, r2, lsl #2
   1159c:	ldr	r0, [r0]
   115a0:	bl	10f10 <coda_expression_from_string@plt>
   115a4:	cmp	r0, #0
   115a8:	beq	115f4 <main@@Base+0x320>
   115ac:	ldr	r0, [pc, #1372]	; 11b10 <main@@Base+0x83c>
   115b0:	ldr	r0, [pc, r0]
   115b4:	ldr	r0, [r0]
   115b8:	str	r0, [fp, #-48]	; 0xffffffd0
   115bc:	bl	10f28 <coda_get_errno@plt>
   115c0:	ldr	r0, [r0]
   115c4:	bl	10ef8 <coda_errno_to_string@plt>
   115c8:	ldr	lr, [pc, #1340]	; 11b0c <main@@Base+0x838>
   115cc:	add	r1, pc, lr
   115d0:	ldr	lr, [fp, #-48]	; 0xffffffd0
   115d4:	str	r0, [fp, #-52]	; 0xffffffcc
   115d8:	mov	r0, lr
   115dc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   115e0:	bl	10e8c <fprintf@plt>
   115e4:	movw	r1, #1
   115e8:	str	r0, [fp, #-56]	; 0xffffffc8
   115ec:	mov	r0, r1
   115f0:	bl	10e74 <exit@plt>
   115f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   115f8:	add	r0, r0, #1
   115fc:	str	r0, [fp, #-24]	; 0xffffffe8
   11600:	b	1164c <main@@Base+0x378>
   11604:	ldr	r0, [fp, #-12]
   11608:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1160c:	add	r0, r0, r1, lsl #2
   11610:	ldr	r0, [r0]
   11614:	ldrb	r0, [r0]
   11618:	cmp	r0, #45	; 0x2d
   1161c:	beq	11624 <main@@Base+0x350>
   11620:	b	11664 <main@@Base+0x390>
   11624:	ldr	r0, [pc, #1104]	; 11a7c <main@@Base+0x7a8>
   11628:	add	r1, pc, r0
   1162c:	ldr	r0, [pc, #1100]	; 11a80 <main@@Base+0x7ac>
   11630:	ldr	r0, [pc, r0]
   11634:	ldr	r0, [r0]
   11638:	bl	10e8c <fprintf@plt>
   1163c:	str	r0, [fp, #-60]	; 0xffffffc4
   11640:	bl	11e1c <main@@Base+0xb48>
   11644:	movw	r0, #1
   11648:	bl	10e74 <exit@plt>
   1164c:	b	11650 <main@@Base+0x37c>
   11650:	b	11654 <main@@Base+0x380>
   11654:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11658:	add	r0, r0, #1
   1165c:	str	r0, [fp, #-24]	; 0xffffffe8
   11660:	b	11474 <main@@Base+0x1a0>
   11664:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11668:	ldr	r1, [fp, #-8]
   1166c:	cmp	r0, r1
   11670:	blt	1169c <main@@Base+0x3c8>
   11674:	ldr	r0, [pc, #1156]	; 11b00 <main@@Base+0x82c>
   11678:	add	r1, pc, r0
   1167c:	ldr	r0, [pc, #1152]	; 11b04 <main@@Base+0x830>
   11680:	ldr	r0, [pc, r0]
   11684:	ldr	r0, [r0]
   11688:	bl	10e8c <fprintf@plt>
   1168c:	str	r0, [fp, #-64]	; 0xffffffc0
   11690:	bl	11e1c <main@@Base+0xb48>
   11694:	movw	r0, #1
   11698:	bl	10e74 <exit@plt>
   1169c:	ldr	r0, [pc, #992]	; 11a84 <main@@Base+0x7b0>
   116a0:	add	r1, pc, r0
   116a4:	ldr	r0, [fp, #-12]
   116a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   116ac:	add	r0, r0, r2, lsl #2
   116b0:	ldr	r0, [r0]
   116b4:	bl	10f10 <coda_expression_from_string@plt>
   116b8:	cmp	r0, #0
   116bc:	beq	11708 <main@@Base+0x434>
   116c0:	ldr	r0, [pc, #1076]	; 11afc <main@@Base+0x828>
   116c4:	ldr	r0, [pc, r0]
   116c8:	ldr	r0, [r0]
   116cc:	str	r0, [fp, #-68]	; 0xffffffbc
   116d0:	bl	10f28 <coda_get_errno@plt>
   116d4:	ldr	r0, [r0]
   116d8:	bl	10ef8 <coda_errno_to_string@plt>
   116dc:	ldr	lr, [pc, #1044]	; 11af8 <main@@Base+0x824>
   116e0:	add	r1, pc, lr
   116e4:	ldr	lr, [fp, #-68]	; 0xffffffbc
   116e8:	str	r0, [fp, #-72]	; 0xffffffb8
   116ec:	mov	r0, lr
   116f0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   116f4:	bl	10e8c <fprintf@plt>
   116f8:	movw	r1, #1
   116fc:	str	r0, [fp, #-76]	; 0xffffffb4
   11700:	mov	r0, r1
   11704:	bl	10e74 <exit@plt>
   11708:	ldr	r0, [pc, #888]	; 11a88 <main@@Base+0x7b4>
   1170c:	add	r1, pc, r0
   11710:	ldr	r0, [pc, #884]	; 11a8c <main@@Base+0x7b8>
   11714:	add	r0, pc, r0
   11718:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1171c:	add	r2, r2, #1
   11720:	str	r2, [fp, #-24]	; 0xffffffe8
   11724:	ldr	r0, [r0]
   11728:	bl	10ebc <coda_expression_get_type@plt>
   1172c:	cmp	r0, #0
   11730:	beq	1177c <main@@Base+0x4a8>
   11734:	ldr	r0, [pc, #952]	; 11af4 <main@@Base+0x820>
   11738:	ldr	r0, [pc, r0]
   1173c:	ldr	r0, [r0]
   11740:	str	r0, [sp, #80]	; 0x50
   11744:	bl	10f28 <coda_get_errno@plt>
   11748:	ldr	r0, [r0]
   1174c:	bl	10ef8 <coda_errno_to_string@plt>
   11750:	ldr	lr, [pc, #920]	; 11af0 <main@@Base+0x81c>
   11754:	add	r1, pc, lr
   11758:	ldr	lr, [sp, #80]	; 0x50
   1175c:	str	r0, [sp, #76]	; 0x4c
   11760:	mov	r0, lr
   11764:	ldr	r2, [sp, #76]	; 0x4c
   11768:	bl	10e8c <fprintf@plt>
   1176c:	movw	r1, #1
   11770:	str	r0, [sp, #72]	; 0x48
   11774:	mov	r0, r1
   11778:	bl	10e74 <exit@plt>
   1177c:	ldr	r0, [pc, #780]	; 11a90 <main@@Base+0x7bc>
   11780:	add	r0, pc, r0
   11784:	ldr	r0, [r0]
   11788:	cmp	r0, #4
   1178c:	beq	117a4 <main@@Base+0x4d0>
   11790:	ldr	r0, [pc, #764]	; 11a94 <main@@Base+0x7c0>
   11794:	add	r0, pc, r0
   11798:	ldr	r0, [r0]
   1179c:	cmp	r0, #5
   117a0:	bne	117f0 <main@@Base+0x51c>
   117a4:	ldr	r0, [pc, #828]	; 11ae8 <main@@Base+0x814>
   117a8:	add	r0, pc, r0
   117ac:	ldr	r1, [pc, #824]	; 11aec <main@@Base+0x818>
   117b0:	ldr	r1, [pc, r1]
   117b4:	ldr	r1, [r1]
   117b8:	ldr	r0, [r0]
   117bc:	str	r1, [sp, #68]	; 0x44
   117c0:	bl	10f04 <coda_expression_get_type_name@plt>
   117c4:	ldr	r1, [pc, #792]	; 11ae4 <main@@Base+0x810>
   117c8:	add	r1, pc, r1
   117cc:	ldr	lr, [sp, #68]	; 0x44
   117d0:	str	r0, [sp, #64]	; 0x40
   117d4:	mov	r0, lr
   117d8:	ldr	r2, [sp, #64]	; 0x40
   117dc:	bl	10e8c <fprintf@plt>
   117e0:	movw	r1, #1
   117e4:	str	r0, [sp, #60]	; 0x3c
   117e8:	mov	r0, r1
   117ec:	bl	10e74 <exit@plt>
   117f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   117f4:	cmp	r0, #0
   117f8:	beq	11840 <main@@Base+0x56c>
   117fc:	ldr	r0, [pc, #728]	; 11adc <main@@Base+0x808>
   11800:	add	r0, pc, r0
   11804:	ldr	r0, [r0]
   11808:	bl	10e50 <coda_expression_delete@plt>
   1180c:	ldr	r0, [pc, #708]	; 11ad8 <main@@Base+0x804>
   11810:	add	r0, pc, r0
   11814:	ldr	r0, [r0]
   11818:	movw	lr, #0
   1181c:	cmp	r0, lr
   11820:	beq	11834 <main@@Base+0x560>
   11824:	ldr	r0, [pc, #692]	; 11ae0 <main@@Base+0x80c>
   11828:	add	r0, pc, r0
   1182c:	ldr	r0, [r0]
   11830:	bl	10e50 <coda_expression_delete@plt>
   11834:	movw	r0, #0
   11838:	str	r0, [fp, #-4]
   1183c:	b	11a64 <main@@Base+0x790>
   11840:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11844:	ldr	r1, [fp, #-8]
   11848:	cmp	r0, r1
   1184c:	bge	11948 <main@@Base+0x674>
   11850:	bl	10e98 <coda_init@plt>
   11854:	cmp	r0, #0
   11858:	beq	118a4 <main@@Base+0x5d0>
   1185c:	ldr	r0, [pc, #624]	; 11ad4 <main@@Base+0x800>
   11860:	ldr	r0, [pc, r0]
   11864:	ldr	r0, [r0]
   11868:	str	r0, [sp, #56]	; 0x38
   1186c:	bl	10f28 <coda_get_errno@plt>
   11870:	ldr	r0, [r0]
   11874:	bl	10ef8 <coda_errno_to_string@plt>
   11878:	ldr	lr, [pc, #592]	; 11ad0 <main@@Base+0x7fc>
   1187c:	add	r1, pc, lr
   11880:	ldr	lr, [sp, #56]	; 0x38
   11884:	str	r0, [sp, #52]	; 0x34
   11888:	mov	r0, lr
   1188c:	ldr	r2, [sp, #52]	; 0x34
   11890:	bl	10e8c <fprintf@plt>
   11894:	movw	r1, #1
   11898:	str	r0, [sp, #48]	; 0x30
   1189c:	mov	r0, r1
   118a0:	bl	10e74 <exit@plt>
   118a4:	ldr	r0, [pc, #524]	; 11ab8 <main@@Base+0x7e4>
   118a8:	ldr	r3, [pc, r0]
   118ac:	ldr	r0, [fp, #-16]
   118b0:	str	r3, [sp, #44]	; 0x2c
   118b4:	bl	10ea4 <coda_set_option_perform_conversions@plt>
   118b8:	ldr	r3, [fp, #-8]
   118bc:	ldr	lr, [fp, #-24]	; 0xffffffe8
   118c0:	sub	r1, r3, lr
   118c4:	ldr	r3, [fp, #-12]
   118c8:	add	r2, r3, lr, lsl #2
   118cc:	movw	r3, #0
   118d0:	str	r0, [sp, #40]	; 0x28
   118d4:	mov	r0, r3
   118d8:	ldr	lr, [sp, #44]	; 0x2c
   118dc:	str	r3, [sp, #36]	; 0x24
   118e0:	mov	r3, lr
   118e4:	ldr	ip, [sp, #36]	; 0x24
   118e8:	str	ip, [sp]
   118ec:	bl	10db4 <coda_match_filefilter@plt>
   118f0:	cmp	r0, #0
   118f4:	beq	11940 <main@@Base+0x66c>
   118f8:	ldr	r0, [pc, #460]	; 11acc <main@@Base+0x7f8>
   118fc:	ldr	r0, [pc, r0]
   11900:	ldr	r0, [r0]
   11904:	str	r0, [sp, #32]
   11908:	bl	10f28 <coda_get_errno@plt>
   1190c:	ldr	r0, [r0]
   11910:	bl	10ef8 <coda_errno_to_string@plt>
   11914:	ldr	lr, [pc, #428]	; 11ac8 <main@@Base+0x7f4>
   11918:	add	r1, pc, lr
   1191c:	ldr	lr, [sp, #32]
   11920:	str	r0, [sp, #28]
   11924:	mov	r0, lr
   11928:	ldr	r2, [sp, #28]
   1192c:	bl	10e8c <fprintf@plt>
   11930:	movw	r1, #1
   11934:	str	r0, [sp, #24]
   11938:	mov	r0, r1
   1193c:	bl	10e74 <exit@plt>
   11940:	bl	10e38 <coda_done@plt>
   11944:	b	11a24 <main@@Base+0x750>
   11948:	ldr	r0, [pc, #328]	; 11a98 <main@@Base+0x7c4>
   1194c:	add	r0, pc, r0
   11950:	ldr	r0, [r0]
   11954:	movw	r1, #0
   11958:	cmp	r0, r1
   1195c:	beq	11988 <main@@Base+0x6b4>
   11960:	ldr	r0, [pc, #328]	; 11ab0 <main@@Base+0x7dc>
   11964:	add	r1, pc, r0
   11968:	ldr	r0, [pc, #324]	; 11ab4 <main@@Base+0x7e0>
   1196c:	ldr	r0, [pc, r0]
   11970:	ldr	r0, [r0]
   11974:	bl	10e8c <fprintf@plt>
   11978:	movw	r1, #1
   1197c:	str	r0, [sp, #20]
   11980:	mov	r0, r1
   11984:	bl	10e74 <exit@plt>
   11988:	ldr	r0, [pc, #268]	; 11a9c <main@@Base+0x7c8>
   1198c:	add	r0, pc, r0
   11990:	ldr	r0, [r0]
   11994:	bl	10ed4 <coda_expression_is_constant@plt>
   11998:	cmp	r0, #0
   1199c:	bne	119c8 <main@@Base+0x6f4>
   119a0:	ldr	r0, [pc, #248]	; 11aa0 <main@@Base+0x7cc>
   119a4:	add	r1, pc, r0
   119a8:	ldr	r0, [pc, #244]	; 11aa4 <main@@Base+0x7d0>
   119ac:	ldr	r0, [pc, r0]
   119b0:	ldr	r0, [r0]
   119b4:	bl	10e8c <fprintf@plt>
   119b8:	movw	r1, #1
   119bc:	str	r0, [sp, #16]
   119c0:	mov	r0, r1
   119c4:	bl	10e74 <exit@plt>
   119c8:	movw	r0, #0
   119cc:	bl	11b3c <main@@Base+0x868>
   119d0:	cmp	r0, #0
   119d4:	beq	11a20 <main@@Base+0x74c>
   119d8:	ldr	r0, [pc, #204]	; 11aac <main@@Base+0x7d8>
   119dc:	ldr	r0, [pc, r0]
   119e0:	ldr	r0, [r0]
   119e4:	str	r0, [sp, #12]
   119e8:	bl	10f28 <coda_get_errno@plt>
   119ec:	ldr	r0, [r0]
   119f0:	bl	10ef8 <coda_errno_to_string@plt>
   119f4:	ldr	lr, [pc, #172]	; 11aa8 <main@@Base+0x7d4>
   119f8:	add	r1, pc, lr
   119fc:	ldr	lr, [sp, #12]
   11a00:	str	r0, [sp, #8]
   11a04:	mov	r0, lr
   11a08:	ldr	r2, [sp, #8]
   11a0c:	bl	10e8c <fprintf@plt>
   11a10:	movw	r1, #1
   11a14:	str	r0, [sp, #4]
   11a18:	mov	r0, r1
   11a1c:	bl	10e74 <exit@plt>
   11a20:	b	11a24 <main@@Base+0x750>
   11a24:	ldr	r0, [pc, #148]	; 11ac0 <main@@Base+0x7ec>
   11a28:	add	r0, pc, r0
   11a2c:	ldr	r0, [r0]
   11a30:	bl	10e50 <coda_expression_delete@plt>
   11a34:	ldr	r0, [pc, #128]	; 11abc <main@@Base+0x7e8>
   11a38:	add	r0, pc, r0
   11a3c:	ldr	r0, [r0]
   11a40:	movw	lr, #0
   11a44:	cmp	r0, lr
   11a48:	beq	11a5c <main@@Base+0x788>
   11a4c:	ldr	r0, [pc, #112]	; 11ac4 <main@@Base+0x7f0>
   11a50:	add	r0, pc, r0
   11a54:	ldr	r0, [r0]
   11a58:	bl	10e50 <coda_expression_delete@plt>
   11a5c:	movw	r0, #0
   11a60:	str	r0, [fp, #-4]
   11a64:	ldr	r0, [fp, #-4]
   11a68:	mov	sp, fp
   11a6c:	pop	{fp, pc}
   11a70:	andeq	r1, r0, r6, ror r2
   11a74:	andeq	r1, r0, ip, asr #4
   11a78:	andeq	r2, r1, r8, ror #24
   11a7c:	strheq	r1, [r0], -pc	; <UNPREDICTABLE>
   11a80:	andeq	r2, r1, r0, ror #20
   11a84:	andeq	r2, r1, ip, lsl #20
   11a88:	andeq	r2, r1, r4, lsr #19
   11a8c:	muleq	r1, r8, r9
   11a90:	andeq	r2, r1, r0, lsr r9
   11a94:	andeq	r2, r1, ip, lsl r9
   11a98:	andeq	r2, r1, ip, asr r7
   11a9c:	andeq	r2, r1, r0, lsr #14
   11aa0:	andeq	r0, r0, sp, lsl #28
   11aa4:	andeq	r2, r1, r4, ror #13
   11aa8:	muleq	r0, r8, ip
   11aac:			; <UNDEFINED> instruction: 0x000126b4
   11ab0:	andeq	r0, r0, ip, ror #27
   11ab4:	andeq	r2, r1, r4, lsr #14
   11ab8:	strdeq	r2, [r1], -r0
   11abc:	andeq	r2, r1, r0, ror r6
   11ac0:	andeq	r2, r1, r4, lsl #13
   11ac4:	andeq	r2, r1, r8, asr r6
   11ac8:	andeq	r0, r0, r8, ror sp
   11acc:	muleq	r1, r4, r7
   11ad0:	andeq	r0, r0, r4, lsl lr
   11ad4:	andeq	r2, r1, r0, lsr r8
   11ad8:	muleq	r1, r8, r8
   11adc:	andeq	r2, r1, ip, lsr #17
   11ae0:	andeq	r2, r1, r0, lsl #17
   11ae4:	andeq	r0, r0, r9, asr pc
   11ae8:	andeq	r2, r1, r8, lsl #18
   11aec:	andeq	r2, r1, r0, ror #17
   11af0:	andeq	r0, r0, ip, lsr pc
   11af4:	andeq	r2, r1, r8, asr r9
   11af8:	andeq	r1, r0, r1, lsr #32
   11afc:	andeq	r2, r1, ip, asr #19
   11b00:	andeq	r1, r0, pc, rrx
   11b04:	andeq	r2, r1, r0, lsl sl
   11b08:	andeq	r2, r1, r0, lsr #22
   11b0c:	strdeq	r1, [r0], -r6
   11b10:	andeq	r2, r1, r0, ror #21
   11b14:	andeq	r1, r0, r8, asr #6
   11b18:	andeq	r1, r0, pc, lsr #6
   11b1c:	andeq	r1, r0, lr, lsl #6
   11b20:	strdeq	r1, [r0], -r5
   11b24:			; <UNDEFINED> instruction: 0x000012b3
   11b28:	andeq	r1, r0, r3, lsl #4
   11b2c:	andeq	r1, r0, r2, ror #3
   11b30:			; <UNDEFINED> instruction: 0x000011ba
   11b34:	muleq	r0, r9, r1
   11b38:	andeq	r1, r0, pc, ror r1
   11b3c:	push	{fp, lr}
   11b40:	mov	fp, sp
   11b44:	sub	sp, sp, #104	; 0x68
   11b48:	str	r0, [fp, #-8]
   11b4c:	ldr	r0, [pc, #708]	; 11e18 <main@@Base+0xb44>
   11b50:	ldr	r0, [pc, r0]
   11b54:	cmp	r0, #5
   11b58:	str	r0, [sp, #36]	; 0x24
   11b5c:	bhi	11dc0 <main@@Base+0xaec>
   11b60:	add	r0, pc, #8
   11b64:	ldr	r1, [sp, #36]	; 0x24
   11b68:	ldr	r2, [r0, r1, lsl #2]
   11b6c:	add	pc, r0, r2
   11b70:	andeq	r0, r0, r8, lsl r0
   11b74:	andeq	r0, r0, ip, lsr #1
   11b78:	andeq	r0, r0, r8, lsr #2
   11b7c:	muleq	r0, r8, r1
   11b80:	andeq	r0, r0, r0, lsr r2
   11b84:	andeq	r0, r0, r0, lsr r2
   11b88:	ldr	r0, [pc, #628]	; 11e04 <main@@Base+0xb30>
   11b8c:	add	r0, pc, r0
   11b90:	ldr	r0, [r0]
   11b94:	ldr	r1, [fp, #-8]
   11b98:	sub	r2, fp, #12
   11b9c:	bl	10e20 <coda_expression_eval_bool@plt>
   11ba0:	cmp	r0, #0
   11ba4:	beq	11bdc <main@@Base+0x908>
   11ba8:	bl	10f28 <coda_get_errno@plt>
   11bac:	ldr	r0, [r0]
   11bb0:	bl	10ef8 <coda_errno_to_string@plt>
   11bb4:	ldr	lr, [pc, #600]	; 11e14 <main@@Base+0xb40>
   11bb8:	add	r1, pc, lr
   11bbc:	mvn	lr, #400	; 0x190
   11bc0:	str	r0, [sp, #32]
   11bc4:	mov	r0, lr
   11bc8:	ldr	r2, [sp, #32]
   11bcc:	bl	10de4 <coda_set_error@plt>
   11bd0:	mvn	r0, #0
   11bd4:	str	r0, [fp, #-4]
   11bd8:	b	11dc8 <main@@Base+0xaf4>
   11bdc:	ldr	r0, [pc, #548]	; 11e08 <main@@Base+0xb34>
   11be0:	add	r0, pc, r0
   11be4:	ldr	r1, [pc, #544]	; 11e0c <main@@Base+0xb38>
   11be8:	add	r1, pc, r1
   11bec:	ldr	r2, [pc, #540]	; 11e10 <main@@Base+0xb3c>
   11bf0:	add	r2, pc, r2
   11bf4:	ldr	r3, [fp, #-12]
   11bf8:	cmp	r3, #0
   11bfc:	movw	r3, #0
   11c00:	movne	r3, #1
   11c04:	tst	r3, #1
   11c08:	movne	r2, r1
   11c0c:	mov	r1, r2
   11c10:	bl	10dd8 <printf@plt>
   11c14:	str	r0, [sp, #28]
   11c18:	b	11dc0 <main@@Base+0xaec>
   11c1c:	ldr	r0, [pc, #468]	; 11df8 <main@@Base+0xb24>
   11c20:	add	r0, pc, r0
   11c24:	ldr	r0, [r0]
   11c28:	ldr	r1, [fp, #-8]
   11c2c:	sub	r2, fp, #24
   11c30:	bl	10dc0 <coda_expression_eval_integer@plt>
   11c34:	cmp	r0, #0
   11c38:	beq	11c70 <main@@Base+0x99c>
   11c3c:	bl	10f28 <coda_get_errno@plt>
   11c40:	ldr	r0, [r0]
   11c44:	bl	10ef8 <coda_errno_to_string@plt>
   11c48:	ldr	lr, [pc, #432]	; 11e00 <main@@Base+0xb2c>
   11c4c:	add	r1, pc, lr
   11c50:	mvn	lr, #400	; 0x190
   11c54:	str	r0, [sp, #24]
   11c58:	mov	r0, lr
   11c5c:	ldr	r2, [sp, #24]
   11c60:	bl	10de4 <coda_set_error@plt>
   11c64:	mvn	r0, #0
   11c68:	str	r0, [fp, #-4]
   11c6c:	b	11dc8 <main@@Base+0xaf4>
   11c70:	sub	r2, fp, #45	; 0x2d
   11c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c78:	ldr	r1, [fp, #-20]	; 0xffffffec
   11c7c:	bl	10f40 <coda_str64@plt>
   11c80:	ldr	r0, [pc, #372]	; 11dfc <main@@Base+0xb28>
   11c84:	add	r0, pc, r0
   11c88:	sub	r1, fp, #45	; 0x2d
   11c8c:	bl	10dd8 <printf@plt>
   11c90:	str	r0, [sp, #20]
   11c94:	b	11dc0 <main@@Base+0xaec>
   11c98:	ldr	r0, [pc, #332]	; 11dec <main@@Base+0xb18>
   11c9c:	add	r0, pc, r0
   11ca0:	ldr	r0, [r0]
   11ca4:	ldr	r1, [fp, #-8]
   11ca8:	add	r2, sp, #48	; 0x30
   11cac:	bl	10ee0 <coda_expression_eval_float@plt>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11cec <main@@Base+0xa18>
   11cb8:	bl	10f28 <coda_get_errno@plt>
   11cbc:	ldr	r0, [r0]
   11cc0:	bl	10ef8 <coda_errno_to_string@plt>
   11cc4:	ldr	lr, [pc, #296]	; 11df4 <main@@Base+0xb20>
   11cc8:	add	r1, pc, lr
   11ccc:	mvn	lr, #400	; 0x190
   11cd0:	str	r0, [sp, #16]
   11cd4:	mov	r0, lr
   11cd8:	ldr	r2, [sp, #16]
   11cdc:	bl	10de4 <coda_set_error@plt>
   11ce0:	mvn	r0, #0
   11ce4:	str	r0, [fp, #-4]
   11ce8:	b	11dc8 <main@@Base+0xaf4>
   11cec:	ldr	r0, [pc, #252]	; 11df0 <main@@Base+0xb1c>
   11cf0:	add	r0, pc, r0
   11cf4:	vldr	d16, [sp, #48]	; 0x30
   11cf8:	vmov	r2, r3, d16
   11cfc:	bl	10dd8 <printf@plt>
   11d00:	str	r0, [sp, #12]
   11d04:	b	11dc0 <main@@Base+0xaec>
   11d08:	ldr	r0, [pc, #208]	; 11de0 <main@@Base+0xb0c>
   11d0c:	add	r0, pc, r0
   11d10:	movw	r1, #0
   11d14:	str	r1, [sp, #44]	; 0x2c
   11d18:	ldr	r0, [r0]
   11d1c:	ldr	r1, [fp, #-8]
   11d20:	add	r2, sp, #44	; 0x2c
   11d24:	add	r3, sp, #40	; 0x28
   11d28:	bl	10eb0 <coda_expression_eval_string@plt>
   11d2c:	cmp	r0, #0
   11d30:	beq	11d68 <main@@Base+0xa94>
   11d34:	bl	10f28 <coda_get_errno@plt>
   11d38:	ldr	r0, [r0]
   11d3c:	bl	10ef8 <coda_errno_to_string@plt>
   11d40:	ldr	lr, [pc, #160]	; 11de8 <main@@Base+0xb14>
   11d44:	add	r1, pc, lr
   11d48:	mvn	lr, #400	; 0x190
   11d4c:	str	r0, [sp, #8]
   11d50:	mov	r0, lr
   11d54:	ldr	r2, [sp, #8]
   11d58:	bl	10de4 <coda_set_error@plt>
   11d5c:	mvn	r0, #0
   11d60:	str	r0, [fp, #-4]
   11d64:	b	11dc8 <main@@Base+0xaf4>
   11d68:	ldr	r0, [sp, #44]	; 0x2c
   11d6c:	ldr	r1, [sp, #40]	; 0x28
   11d70:	bl	12224 <main@@Base+0xf50>
   11d74:	ldr	r0, [pc, #104]	; 11de4 <main@@Base+0xb10>
   11d78:	add	r0, pc, r0
   11d7c:	bl	10dd8 <printf@plt>
   11d80:	ldr	r1, [sp, #44]	; 0x2c
   11d84:	movw	lr, #0
   11d88:	cmp	r1, lr
   11d8c:	str	r0, [sp, #4]
   11d90:	beq	11d9c <main@@Base+0xac8>
   11d94:	ldr	r0, [sp, #44]	; 0x2c
   11d98:	bl	10dfc <free@plt>
   11d9c:	b	11dc0 <main@@Base+0xaec>
   11da0:	ldr	r0, [pc, #44]	; 11dd4 <main@@Base+0xb00>
   11da4:	add	r0, pc, r0
   11da8:	ldr	r1, [pc, #40]	; 11dd8 <main@@Base+0xb04>
   11dac:	add	r1, pc, r1
   11db0:	ldr	r2, [pc, #36]	; 11ddc <main@@Base+0xb08>
   11db4:	add	r3, pc, r2
   11db8:	movw	r2, #230	; 0xe6
   11dbc:	bl	10f4c <__assert_fail@plt>
   11dc0:	movw	r0, #0
   11dc4:	str	r0, [fp, #-4]
   11dc8:	ldr	r0, [fp, #-4]
   11dcc:	mov	sp, fp
   11dd0:	pop	{fp, pc}
   11dd4:	andeq	r1, r0, r8, ror r2
   11dd8:	andeq	r1, r0, r2, ror r2
   11ddc:	andeq	r1, r0, r6, asr #5
   11de0:	andeq	r2, r1, r0, lsr #7
   11de4:			; <UNDEFINED> instruction: 0x00000db1
   11de8:			; <UNDEFINED> instruction: 0x000012b1
   11dec:	andeq	r2, r1, r0, lsl r4
   11df0:	strdeq	r1, [r0], -lr
   11df4:	strdeq	r1, [r0], -r7
   11df8:	andeq	r2, r1, ip, lsl #9
   11dfc:	andeq	r0, r0, r3, lsl sl
   11e00:	andeq	r1, r0, fp, asr #6
   11e04:	andeq	r2, r1, r0, lsr #10
   11e08:			; <UNDEFINED> instruction: 0x00000ab7
   11e0c:	andeq	r1, r0, r4, lsr #7
   11e10:	andeq	r1, r0, r1, lsr #7
   11e14:	andeq	r1, r0, ip, lsr #7
   11e18:	andeq	r2, r1, r0, ror #10
   11e1c:	push	{fp, lr}
   11e20:	mov	fp, sp
   11e24:	sub	sp, sp, #152	; 0x98
   11e28:	ldr	r0, [pc, #904]	; 121b8 <main@@Base+0xee4>
   11e2c:	add	r0, pc, r0
   11e30:	bl	10dd8 <printf@plt>
   11e34:	ldr	lr, [pc, #888]	; 121b4 <main@@Base+0xee0>
   11e38:	add	lr, pc, lr
   11e3c:	str	r0, [fp, #-4]
   11e40:	mov	r0, lr
   11e44:	bl	10dd8 <printf@plt>
   11e48:	ldr	lr, [pc, #864]	; 121b0 <main@@Base+0xedc>
   11e4c:	add	lr, pc, lr
   11e50:	str	r0, [fp, #-8]
   11e54:	mov	r0, lr
   11e58:	bl	10dd8 <printf@plt>
   11e5c:	ldr	lr, [pc, #840]	; 121ac <main@@Base+0xed8>
   11e60:	add	lr, pc, lr
   11e64:	str	r0, [fp, #-12]
   11e68:	mov	r0, lr
   11e6c:	bl	10dd8 <printf@plt>
   11e70:	ldr	lr, [pc, #816]	; 121a8 <main@@Base+0xed4>
   11e74:	add	lr, pc, lr
   11e78:	str	r0, [fp, #-16]
   11e7c:	mov	r0, lr
   11e80:	bl	10dd8 <printf@plt>
   11e84:	ldr	lr, [pc, #792]	; 121a4 <main@@Base+0xed0>
   11e88:	add	lr, pc, lr
   11e8c:	str	r0, [fp, #-20]	; 0xffffffec
   11e90:	mov	r0, lr
   11e94:	bl	10dd8 <printf@plt>
   11e98:	ldr	lr, [pc, #768]	; 121a0 <main@@Base+0xecc>
   11e9c:	add	lr, pc, lr
   11ea0:	str	r0, [fp, #-24]	; 0xffffffe8
   11ea4:	mov	r0, lr
   11ea8:	bl	10dd8 <printf@plt>
   11eac:	ldr	lr, [pc, #744]	; 1219c <main@@Base+0xec8>
   11eb0:	add	lr, pc, lr
   11eb4:	str	r0, [fp, #-28]	; 0xffffffe4
   11eb8:	mov	r0, lr
   11ebc:	bl	10dd8 <printf@plt>
   11ec0:	ldr	lr, [pc, #720]	; 12198 <main@@Base+0xec4>
   11ec4:	add	lr, pc, lr
   11ec8:	str	r0, [fp, #-32]	; 0xffffffe0
   11ecc:	mov	r0, lr
   11ed0:	bl	10dd8 <printf@plt>
   11ed4:	ldr	lr, [pc, #696]	; 12194 <main@@Base+0xec0>
   11ed8:	add	lr, pc, lr
   11edc:	str	r0, [fp, #-36]	; 0xffffffdc
   11ee0:	mov	r0, lr
   11ee4:	bl	10dd8 <printf@plt>
   11ee8:	ldr	lr, [pc, #672]	; 12190 <main@@Base+0xebc>
   11eec:	add	lr, pc, lr
   11ef0:	str	r0, [fp, #-40]	; 0xffffffd8
   11ef4:	mov	r0, lr
   11ef8:	bl	10dd8 <printf@plt>
   11efc:	ldr	lr, [pc, #648]	; 1218c <main@@Base+0xeb8>
   11f00:	add	lr, pc, lr
   11f04:	str	r0, [fp, #-44]	; 0xffffffd4
   11f08:	mov	r0, lr
   11f0c:	bl	10dd8 <printf@plt>
   11f10:	ldr	lr, [pc, #624]	; 12188 <main@@Base+0xeb4>
   11f14:	add	lr, pc, lr
   11f18:	str	r0, [fp, #-48]	; 0xffffffd0
   11f1c:	mov	r0, lr
   11f20:	bl	10dd8 <printf@plt>
   11f24:	ldr	lr, [pc, #600]	; 12184 <main@@Base+0xeb0>
   11f28:	add	lr, pc, lr
   11f2c:	str	r0, [fp, #-52]	; 0xffffffcc
   11f30:	mov	r0, lr
   11f34:	bl	10dd8 <printf@plt>
   11f38:	ldr	lr, [pc, #576]	; 12180 <main@@Base+0xeac>
   11f3c:	add	lr, pc, lr
   11f40:	str	r0, [fp, #-56]	; 0xffffffc8
   11f44:	mov	r0, lr
   11f48:	bl	10dd8 <printf@plt>
   11f4c:	ldr	lr, [pc, #552]	; 1217c <main@@Base+0xea8>
   11f50:	add	lr, pc, lr
   11f54:	str	r0, [fp, #-60]	; 0xffffffc4
   11f58:	mov	r0, lr
   11f5c:	bl	10dd8 <printf@plt>
   11f60:	ldr	lr, [pc, #528]	; 12178 <main@@Base+0xea4>
   11f64:	add	lr, pc, lr
   11f68:	str	r0, [fp, #-64]	; 0xffffffc0
   11f6c:	mov	r0, lr
   11f70:	bl	10dd8 <printf@plt>
   11f74:	ldr	lr, [pc, #504]	; 12174 <main@@Base+0xea0>
   11f78:	add	lr, pc, lr
   11f7c:	str	r0, [fp, #-68]	; 0xffffffbc
   11f80:	mov	r0, lr
   11f84:	bl	10dd8 <printf@plt>
   11f88:	ldr	lr, [pc, #480]	; 12170 <main@@Base+0xe9c>
   11f8c:	add	lr, pc, lr
   11f90:	str	r0, [fp, #-72]	; 0xffffffb8
   11f94:	mov	r0, lr
   11f98:	bl	10dd8 <printf@plt>
   11f9c:	ldr	lr, [pc, #456]	; 1216c <main@@Base+0xe98>
   11fa0:	add	lr, pc, lr
   11fa4:	str	r0, [sp, #76]	; 0x4c
   11fa8:	mov	r0, lr
   11fac:	bl	10dd8 <printf@plt>
   11fb0:	ldr	lr, [pc, #432]	; 12168 <main@@Base+0xe94>
   11fb4:	add	lr, pc, lr
   11fb8:	str	r0, [sp, #72]	; 0x48
   11fbc:	mov	r0, lr
   11fc0:	bl	10dd8 <printf@plt>
   11fc4:	ldr	lr, [pc, #408]	; 12164 <main@@Base+0xe90>
   11fc8:	add	lr, pc, lr
   11fcc:	str	r0, [sp, #68]	; 0x44
   11fd0:	mov	r0, lr
   11fd4:	bl	10dd8 <printf@plt>
   11fd8:	ldr	lr, [pc, #384]	; 12160 <main@@Base+0xe8c>
   11fdc:	add	lr, pc, lr
   11fe0:	str	r0, [sp, #64]	; 0x40
   11fe4:	mov	r0, lr
   11fe8:	bl	10dd8 <printf@plt>
   11fec:	ldr	lr, [pc, #360]	; 1215c <main@@Base+0xe88>
   11ff0:	add	lr, pc, lr
   11ff4:	str	r0, [sp, #60]	; 0x3c
   11ff8:	mov	r0, lr
   11ffc:	bl	10dd8 <printf@plt>
   12000:	ldr	lr, [pc, #336]	; 12158 <main@@Base+0xe84>
   12004:	add	lr, pc, lr
   12008:	str	r0, [sp, #56]	; 0x38
   1200c:	mov	r0, lr
   12010:	bl	10dd8 <printf@plt>
   12014:	ldr	lr, [pc, #312]	; 12154 <main@@Base+0xe80>
   12018:	add	lr, pc, lr
   1201c:	str	r0, [sp, #52]	; 0x34
   12020:	mov	r0, lr
   12024:	bl	10dd8 <printf@plt>
   12028:	ldr	lr, [pc, #288]	; 12150 <main@@Base+0xe7c>
   1202c:	add	lr, pc, lr
   12030:	str	r0, [sp, #48]	; 0x30
   12034:	mov	r0, lr
   12038:	bl	10dd8 <printf@plt>
   1203c:	ldr	lr, [pc, #264]	; 1214c <main@@Base+0xe78>
   12040:	add	lr, pc, lr
   12044:	str	r0, [sp, #44]	; 0x2c
   12048:	mov	r0, lr
   1204c:	bl	10dd8 <printf@plt>
   12050:	ldr	lr, [pc, #240]	; 12148 <main@@Base+0xe74>
   12054:	add	lr, pc, lr
   12058:	str	r0, [sp, #40]	; 0x28
   1205c:	mov	r0, lr
   12060:	bl	10dd8 <printf@plt>
   12064:	ldr	lr, [pc, #216]	; 12144 <main@@Base+0xe70>
   12068:	add	lr, pc, lr
   1206c:	str	r0, [sp, #36]	; 0x24
   12070:	mov	r0, lr
   12074:	bl	10dd8 <printf@plt>
   12078:	ldr	lr, [pc, #192]	; 12140 <main@@Base+0xe6c>
   1207c:	add	lr, pc, lr
   12080:	str	r0, [sp, #32]
   12084:	mov	r0, lr
   12088:	bl	10dd8 <printf@plt>
   1208c:	ldr	lr, [pc, #168]	; 1213c <main@@Base+0xe68>
   12090:	add	lr, pc, lr
   12094:	str	r0, [sp, #28]
   12098:	mov	r0, lr
   1209c:	bl	10dd8 <printf@plt>
   120a0:	ldr	lr, [pc, #144]	; 12138 <main@@Base+0xe64>
   120a4:	add	lr, pc, lr
   120a8:	str	r0, [sp, #24]
   120ac:	mov	r0, lr
   120b0:	bl	10dd8 <printf@plt>
   120b4:	ldr	lr, [pc, #120]	; 12134 <main@@Base+0xe60>
   120b8:	add	lr, pc, lr
   120bc:	str	r0, [sp, #20]
   120c0:	mov	r0, lr
   120c4:	bl	10dd8 <printf@plt>
   120c8:	ldr	lr, [pc, #96]	; 12130 <main@@Base+0xe5c>
   120cc:	add	lr, pc, lr
   120d0:	str	r0, [sp, #16]
   120d4:	mov	r0, lr
   120d8:	bl	10dd8 <printf@plt>
   120dc:	ldr	lr, [pc, #72]	; 1212c <main@@Base+0xe58>
   120e0:	add	lr, pc, lr
   120e4:	str	r0, [sp, #12]
   120e8:	mov	r0, lr
   120ec:	bl	10dd8 <printf@plt>
   120f0:	ldr	lr, [pc, #48]	; 12128 <main@@Base+0xe54>
   120f4:	add	lr, pc, lr
   120f8:	str	r0, [sp, #8]
   120fc:	mov	r0, lr
   12100:	bl	10dd8 <printf@plt>
   12104:	ldr	lr, [pc, #24]	; 12124 <main@@Base+0xe50>
   12108:	add	lr, pc, lr
   1210c:	str	r0, [sp, #4]
   12110:	mov	r0, lr
   12114:	bl	10dd8 <printf@plt>
   12118:	str	r0, [sp]
   1211c:	mov	sp, fp
   12120:	pop	{fp, pc}
   12124:	andeq	r0, r0, r1, lsr #20
   12128:	strdeq	r0, [r0], -r2
   1212c:	andeq	r0, r0, r6, asr #27
   12130:	muleq	r0, r0, sp
   12134:	andeq	r0, r0, sl, asr sp
   12138:	andeq	r0, r0, pc, lsr sp
   1213c:	andeq	r0, r0, r8, lsl #26
   12140:	ldrdeq	r0, [r0], -r1
   12144:	andeq	r0, r0, r1, asr #21
   12148:	andeq	r0, r0, r6, asr #25
   1214c:			; <UNDEFINED> instruction: 0x00000cbe
   12150:	strdeq	r0, [r0], -sp
   12154:	andeq	r0, r0, r7, asr #25
   12158:	andeq	r0, r0, r3, asr #25
   1215c:	andeq	r0, r0, r9, lsr fp
   12160:	ldrdeq	r0, [r0], -r3
   12164:	muleq	r0, r6, ip
   12168:	andeq	r0, r0, r5, ror fp
   1216c:	andeq	r0, r0, lr, lsl #25
   12170:	andeq	r0, r0, r5, asr ip
   12174:	andeq	r0, r0, sl, asr #24
   12178:	andeq	r0, r0, r2, lsl ip
   1217c:	ldrdeq	r0, [r0], -fp
   12180:	ldrdeq	r0, [r0], -r6
   12184:	andeq	r0, r0, pc, lsr #23
   12188:	muleq	r0, ip, fp
   1218c:	andeq	r0, r0, pc, asr fp
   12190:	andeq	r0, r0, r2, lsr #22
   12194:	andeq	r0, r0, sp, lsl fp
   12198:	andeq	r0, r0, pc, lsl fp
   1219c:	andeq	r0, r0, r9, ror ip
   121a0:	andeq	r0, r0, r6, lsl fp
   121a4:	ldrdeq	r0, [r0], -lr
   121a8:	andeq	r0, r0, r7, lsr #21
   121ac:	muleq	r0, r6, sl
   121b0:	andeq	r0, r0, fp, asr sl
   121b4:	andeq	r0, r0, r0, lsr #20
   121b8:	andeq	r0, r0, r4, lsr #20
   121bc:	push	{fp, lr}
   121c0:	mov	fp, sp
   121c4:	sub	sp, sp, #16
   121c8:	bl	10f1c <coda_get_libcoda_version@plt>
   121cc:	ldr	lr, [pc, #76]	; 12220 <main@@Base+0xf4c>
   121d0:	add	lr, pc, lr
   121d4:	str	r0, [fp, #-4]
   121d8:	mov	r0, lr
   121dc:	ldr	r1, [fp, #-4]
   121e0:	bl	10dd8 <printf@plt>
   121e4:	ldr	r1, [pc, #48]	; 1221c <main@@Base+0xf48>
   121e8:	add	r1, pc, r1
   121ec:	str	r0, [sp, #8]
   121f0:	mov	r0, r1
   121f4:	bl	10dd8 <printf@plt>
   121f8:	ldr	r1, [pc, #24]	; 12218 <main@@Base+0xf44>
   121fc:	add	r1, pc, r1
   12200:	str	r0, [sp, #4]
   12204:	mov	r0, r1
   12208:	bl	10dd8 <printf@plt>
   1220c:	str	r0, [sp]
   12210:	mov	sp, fp
   12214:	pop	{fp, pc}
   12218:	andeq	r0, r0, sp, lsr #18
   1221c:	andeq	r0, r0, ip, asr #26
   12220:	andeq	r0, r0, r7, asr sp
   12224:	push	{fp, lr}
   12228:	mov	fp, sp
   1222c:	sub	sp, sp, #72	; 0x48
   12230:	str	r0, [fp, #-4]
   12234:	str	r1, [fp, #-8]
   12238:	movw	r0, #0
   1223c:	str	r0, [fp, #-12]
   12240:	ldr	r0, [fp, #-8]
   12244:	cmp	r0, #0
   12248:	beq	1225c <main@@Base+0xf88>
   1224c:	ldr	r0, [fp, #-4]
   12250:	movw	r1, #0
   12254:	cmp	r0, r1
   12258:	bne	12260 <main@@Base+0xf8c>
   1225c:	b	12560 <main@@Base+0x128c>
   12260:	ldr	r0, [fp, #-8]
   12264:	cmp	r0, #0
   12268:	bge	12278 <main@@Base+0xfa4>
   1226c:	ldr	r0, [fp, #-4]
   12270:	bl	10e80 <strlen@plt>
   12274:	str	r0, [fp, #-8]
   12278:	b	1227c <main@@Base+0xfa8>
   1227c:	ldr	r0, [fp, #-12]
   12280:	ldr	r1, [fp, #-8]
   12284:	cmp	r0, r1
   12288:	bge	12560 <main@@Base+0x128c>
   1228c:	ldr	r0, [fp, #-4]
   12290:	ldr	r1, [fp, #-12]
   12294:	ldrb	r0, [r0, r1]
   12298:	sub	r0, r0, #7
   1229c:	cmp	r0, #85	; 0x55
   122a0:	str	r0, [fp, #-16]
   122a4:	bhi	124d8 <main@@Base+0x1204>
   122a8:	add	r0, pc, #8
   122ac:	ldr	r1, [fp, #-16]
   122b0:	ldr	r2, [r0, r1, lsl #2]
   122b4:	add	pc, r0, r2
   122b8:	andeq	r0, r0, ip, ror #2
   122bc:	andeq	r0, r0, r0, lsl #3
   122c0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   122c4:	andeq	r0, r0, r8, lsr #3
   122c8:	andeq	r0, r0, r4, ror #3
   122cc:	muleq	r0, r4, r1
   122d0:			; <UNDEFINED> instruction: 0x000001bc
   122d4:	andeq	r0, r0, r0, lsr #4
   122d8:	andeq	r0, r0, r0, lsr #4
   122dc:	andeq	r0, r0, r0, lsr #4
   122e0:	andeq	r0, r0, r0, lsr #4
   122e4:	andeq	r0, r0, r0, lsr #4
   122e8:	andeq	r0, r0, r0, lsr #4
   122ec:	andeq	r0, r0, r0, lsr #4
   122f0:	andeq	r0, r0, r0, lsr #4
   122f4:	andeq	r0, r0, r0, lsr #4
   122f8:	andeq	r0, r0, r0, lsr #4
   122fc:	andeq	r0, r0, r0, lsr #4
   12300:	andeq	r0, r0, r0, lsr #4
   12304:	andeq	r0, r0, r0, lsr #4
   12308:	andeq	r0, r0, r8, asr r1
   1230c:	andeq	r0, r0, r0, lsr #4
   12310:	andeq	r0, r0, r0, lsr #4
   12314:	andeq	r0, r0, r0, lsr #4
   12318:	andeq	r0, r0, r0, lsr #4
   1231c:	andeq	r0, r0, r0, lsr #4
   12320:	andeq	r0, r0, r0, lsr #4
   12324:	andeq	r0, r0, ip, lsl #4
   12328:	andeq	r0, r0, r0, lsr #4
   1232c:	andeq	r0, r0, r0, lsr #4
   12330:	andeq	r0, r0, r0, lsr #4
   12334:	andeq	r0, r0, r0, lsr #4
   12338:	andeq	r0, r0, r0, lsr #4
   1233c:	andeq	r0, r0, r0, lsr #4
   12340:	andeq	r0, r0, r0, lsr #4
   12344:	andeq	r0, r0, r0, lsr #4
   12348:	andeq	r0, r0, r0, lsr #4
   1234c:	andeq	r0, r0, r0, lsr #4
   12350:	andeq	r0, r0, r0, lsr #4
   12354:	andeq	r0, r0, r0, lsr #4
   12358:	andeq	r0, r0, r0, lsr #4
   1235c:	andeq	r0, r0, r0, lsr #4
   12360:	andeq	r0, r0, r0, lsr #4
   12364:	andeq	r0, r0, r0, lsr #4
   12368:	andeq	r0, r0, r0, lsr #4
   1236c:	andeq	r0, r0, r0, lsr #4
   12370:	andeq	r0, r0, r0, lsr #4
   12374:	andeq	r0, r0, r0, lsr #4
   12378:	andeq	r0, r0, r0, lsr #4
   1237c:	andeq	r0, r0, r0, lsr #4
   12380:	andeq	r0, r0, r0, lsr #4
   12384:	andeq	r0, r0, r0, lsr #4
   12388:	andeq	r0, r0, r0, lsr #4
   1238c:	andeq	r0, r0, r0, lsr #4
   12390:	andeq	r0, r0, r0, lsr #4
   12394:	andeq	r0, r0, r0, lsr #4
   12398:	andeq	r0, r0, r0, lsr #4
   1239c:	andeq	r0, r0, r0, lsr #4
   123a0:	andeq	r0, r0, r0, lsr #4
   123a4:	andeq	r0, r0, r0, lsr #4
   123a8:	andeq	r0, r0, r0, lsr #4
   123ac:	andeq	r0, r0, r0, lsr #4
   123b0:	andeq	r0, r0, r0, lsr #4
   123b4:	andeq	r0, r0, r0, lsr #4
   123b8:	andeq	r0, r0, r0, lsr #4
   123bc:	andeq	r0, r0, r0, lsr #4
   123c0:	andeq	r0, r0, r0, lsr #4
   123c4:	andeq	r0, r0, r0, lsr #4
   123c8:	andeq	r0, r0, r0, lsr #4
   123cc:	andeq	r0, r0, r0, lsr #4
   123d0:	andeq	r0, r0, r0, lsr #4
   123d4:	andeq	r0, r0, r0, lsr #4
   123d8:	andeq	r0, r0, r0, lsr #4
   123dc:	andeq	r0, r0, r0, lsr #4
   123e0:	andeq	r0, r0, r0, lsr #4
   123e4:	andeq	r0, r0, r0, lsr #4
   123e8:	andeq	r0, r0, r0, lsr #4
   123ec:	andeq	r0, r0, r0, lsr #4
   123f0:	andeq	r0, r0, r0, lsr #4
   123f4:	andeq	r0, r0, r0, lsr #4
   123f8:	andeq	r0, r0, r0, lsr #4
   123fc:	andeq	r0, r0, r0, lsr #4
   12400:	andeq	r0, r0, r0, lsr #4
   12404:	andeq	r0, r0, r0, lsr #4
   12408:	andeq	r0, r0, r0, lsr #4
   1240c:	strdeq	r0, [r0], -r8
   12410:	ldr	r0, [pc, #372]	; 1258c <main@@Base+0x12b8>
   12414:	add	r0, pc, r0
   12418:	bl	10dd8 <printf@plt>
   1241c:	str	r0, [fp, #-20]	; 0xffffffec
   12420:	b	12550 <main@@Base+0x127c>
   12424:	ldr	r0, [pc, #348]	; 12588 <main@@Base+0x12b4>
   12428:	add	r0, pc, r0
   1242c:	bl	10dd8 <printf@plt>
   12430:	str	r0, [fp, #-24]	; 0xffffffe8
   12434:	b	12550 <main@@Base+0x127c>
   12438:	ldr	r0, [pc, #324]	; 12584 <main@@Base+0x12b0>
   1243c:	add	r0, pc, r0
   12440:	bl	10dd8 <printf@plt>
   12444:	str	r0, [fp, #-28]	; 0xffffffe4
   12448:	b	12550 <main@@Base+0x127c>
   1244c:	ldr	r0, [pc, #300]	; 12580 <main@@Base+0x12ac>
   12450:	add	r0, pc, r0
   12454:	bl	10dd8 <printf@plt>
   12458:	str	r0, [fp, #-32]	; 0xffffffe0
   1245c:	b	12550 <main@@Base+0x127c>
   12460:	ldr	r0, [pc, #276]	; 1257c <main@@Base+0x12a8>
   12464:	add	r0, pc, r0
   12468:	bl	10dd8 <printf@plt>
   1246c:	str	r0, [sp, #36]	; 0x24
   12470:	b	12550 <main@@Base+0x127c>
   12474:	ldr	r0, [pc, #252]	; 12578 <main@@Base+0x12a4>
   12478:	add	r0, pc, r0
   1247c:	bl	10dd8 <printf@plt>
   12480:	str	r0, [sp, #32]
   12484:	b	12550 <main@@Base+0x127c>
   12488:	ldr	r0, [pc, #228]	; 12574 <main@@Base+0x12a0>
   1248c:	add	r0, pc, r0
   12490:	bl	10dd8 <printf@plt>
   12494:	str	r0, [sp, #28]
   12498:	b	12550 <main@@Base+0x127c>
   1249c:	ldr	r0, [pc, #204]	; 12570 <main@@Base+0x129c>
   124a0:	add	r0, pc, r0
   124a4:	bl	10dd8 <printf@plt>
   124a8:	str	r0, [sp, #24]
   124ac:	b	12550 <main@@Base+0x127c>
   124b0:	ldr	r0, [pc, #180]	; 1256c <main@@Base+0x1298>
   124b4:	add	r0, pc, r0
   124b8:	bl	10dd8 <printf@plt>
   124bc:	str	r0, [sp, #20]
   124c0:	b	12550 <main@@Base+0x127c>
   124c4:	ldr	r0, [pc, #156]	; 12568 <main@@Base+0x1294>
   124c8:	add	r0, pc, r0
   124cc:	bl	10dd8 <printf@plt>
   124d0:	str	r0, [sp, #16]
   124d4:	b	12550 <main@@Base+0x127c>
   124d8:	bl	10e68 <__ctype_b_loc@plt>
   124dc:	ldr	r0, [r0]
   124e0:	ldr	lr, [fp, #-4]
   124e4:	ldr	r1, [fp, #-12]
   124e8:	ldrb	r1, [lr, r1]
   124ec:	mov	lr, r1
   124f0:	add	r0, r0, r1, lsl #1
   124f4:	ldrh	r0, [r0]
   124f8:	and	r0, r0, #16384	; 0x4000
   124fc:	cmp	r0, #0
   12500:	str	lr, [sp, #12]
   12504:	bne	1252c <main@@Base+0x1258>
   12508:	ldr	r0, [pc, #128]	; 12590 <main@@Base+0x12bc>
   1250c:	add	r0, pc, r0
   12510:	ldr	r1, [fp, #-4]
   12514:	ldr	r2, [fp, #-12]
   12518:	add	r1, r1, r2
   1251c:	ldrb	r1, [r1]
   12520:	bl	10dd8 <printf@plt>
   12524:	str	r0, [sp, #8]
   12528:	b	1254c <main@@Base+0x1278>
   1252c:	ldr	r0, [pc, #96]	; 12594 <main@@Base+0x12c0>
   12530:	add	r0, pc, r0
   12534:	ldr	r1, [fp, #-4]
   12538:	ldr	r2, [fp, #-12]
   1253c:	add	r1, r1, r2
   12540:	ldrb	r1, [r1]
   12544:	bl	10dd8 <printf@plt>
   12548:	str	r0, [sp, #4]
   1254c:	b	12550 <main@@Base+0x127c>
   12550:	ldr	r0, [fp, #-12]
   12554:	add	r0, r0, #1
   12558:	str	r0, [fp, #-12]
   1255c:	b	1227c <main@@Base+0xfa8>
   12560:	mov	sp, fp
   12564:	pop	{fp, pc}
   12568:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1256c:	andeq	r0, r0, r1, lsl #24
   12570:	andeq	r0, r0, r2, lsl ip
   12574:	andeq	r0, r0, r3, lsr #24
   12578:	andeq	r0, r0, r4, lsr ip
   1257c:	andeq	r0, r0, r5, asr #24
   12580:	andeq	r0, r0, r6, asr ip
   12584:	andeq	r0, r0, r7, ror #24
   12588:	andeq	r0, r0, r8, ror ip
   1258c:	andeq	r0, r0, r9, lsl #25
   12590:	andeq	r0, r0, pc, lsr #23
   12594:	muleq	r0, r1, fp

00012598 <__libc_csu_init@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1259c:	mov	r7, r0
   125a0:	ldr	r6, [pc, #72]	; 125f0 <__libc_csu_init@@Base+0x58>
   125a4:	ldr	r5, [pc, #72]	; 125f4 <__libc_csu_init@@Base+0x5c>
   125a8:	add	r6, pc, r6
   125ac:	add	r5, pc, r5
   125b0:	sub	r6, r6, r5
   125b4:	mov	r8, r1
   125b8:	mov	r9, r2
   125bc:	bl	10d94 <coda_match_filefilter@plt-0x20>
   125c0:	asrs	r6, r6, #2
   125c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   125c8:	mov	r4, #0
   125cc:	add	r4, r4, #1
   125d0:	ldr	r3, [r5], #4
   125d4:	mov	r2, r9
   125d8:	mov	r1, r8
   125dc:	mov	r0, r7
   125e0:	blx	r3
   125e4:	cmp	r6, r4
   125e8:	bne	125cc <__libc_csu_init@@Base+0x34>
   125ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   125f0:	andeq	r1, r1, r4, asr #18
   125f4:	andeq	r1, r1, ip, lsr r9

000125f8 <__libc_csu_fini@@Base>:
   125f8:	bx	lr

Disassembly of section .fini:

000125fc <.fini>:
   125fc:	push	{r3, lr}
   12600:	pop	{r3, pc}
