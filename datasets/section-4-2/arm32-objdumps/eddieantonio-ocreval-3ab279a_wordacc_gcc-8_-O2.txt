
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010958 <.init>:
   10958:	push	{r3, lr}
   1095c:	bl	10c10 <__assert_fail@plt+0xf4>
   10960:	pop	{r3, pc}

Disassembly of section .plt:

00010964 <calloc@plt-0x14>:
   10964:	push	{lr}		; (str lr, [sp, #-4]!)
   10968:	ldr	lr, [pc, #4]	; 10974 <calloc@plt-0x4>
   1096c:	add	lr, pc, lr
   10970:	ldr	pc, [lr, #8]!
   10974:	andeq	r7, r1, ip, lsl #13

00010978 <calloc@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #94208	; 0x17000
   10980:	ldr	pc, [ip, #1676]!	; 0x68c

00010984 <strcmp@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #94208	; 0x17000
   1098c:	ldr	pc, [ip, #1668]!	; 0x684

00010990 <strtol@plt>:
   10990:	add	ip, pc, #0, 12
   10994:	add	ip, ip, #94208	; 0x17000
   10998:	ldr	pc, [ip, #1660]!	; 0x67c

0001099c <fopen@plt>:
   1099c:	add	ip, pc, #0, 12
   109a0:	add	ip, ip, #94208	; 0x17000
   109a4:	ldr	pc, [ip, #1652]!	; 0x674

000109a8 <free@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #94208	; 0x17000
   109b0:	ldr	pc, [ip, #1644]!	; 0x66c

000109b4 <utf8proc_get_property@plt>:
   109b4:	add	ip, pc, #0, 12
   109b8:	add	ip, ip, #94208	; 0x17000
   109bc:	ldr	pc, [ip, #1636]!	; 0x664

000109c0 <fgets@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #94208	; 0x17000
   109c8:	ldr	pc, [ip, #1628]!	; 0x65c

000109cc <utf8proc_encode_char@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #94208	; 0x17000
   109d4:	ldr	pc, [ip, #1620]!	; 0x654

000109d8 <strdup@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #94208	; 0x17000
   109e0:	ldr	pc, [ip, #1612]!	; 0x64c

000109e4 <rewind@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #94208	; 0x17000
   109ec:	ldr	pc, [ip, #1604]!	; 0x644

000109f0 <unlink@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #94208	; 0x17000
   109f8:	ldr	pc, [ip, #1596]!	; 0x63c

000109fc <utf8proc_tolower@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #94208	; 0x17000
   10a04:	ldr	pc, [ip, #1588]!	; 0x634

00010a08 <__xstat@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #94208	; 0x17000
   10a10:	ldr	pc, [ip, #1580]!	; 0x62c

00010a14 <fwrite@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #94208	; 0x17000
   10a1c:	ldr	pc, [ip, #1572]!	; 0x624

00010a20 <fread@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #94208	; 0x17000
   10a28:	ldr	pc, [ip, #1564]!	; 0x61c

00010a2c <utf8proc_iterate@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #94208	; 0x17000
   10a34:	ldr	pc, [ip, #1556]!	; 0x614

00010a38 <malloc@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #94208	; 0x17000
   10a40:	ldr	pc, [ip, #1548]!	; 0x60c

00010a44 <__libc_start_main@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #94208	; 0x17000
   10a4c:	ldr	pc, [ip, #1540]!	; 0x604

00010a50 <__sysv_signal@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #94208	; 0x17000
   10a58:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a5c <__gmon_start__@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #94208	; 0x17000
   10a64:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a68 <getpid@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #94208	; 0x17000
   10a70:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a74 <exit@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #94208	; 0x17000
   10a7c:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a80 <utf8proc_category@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #94208	; 0x17000
   10a88:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a8c <strlen@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #94208	; 0x17000
   10a94:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a98 <fprintf@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #94208	; 0x17000
   10aa0:	ldr	pc, [ip, #1484]!	; 0x5cc

00010aa4 <__isoc99_sscanf@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #94208	; 0x17000
   10aac:	ldr	pc, [ip, #1476]!	; 0x5c4

00010ab0 <fclose@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #94208	; 0x17000
   10ab8:	ldr	pc, [ip, #1468]!	; 0x5bc

00010abc <utf8proc_NFC@plt>:
   10abc:	add	ip, pc, #0, 12
   10ac0:	add	ip, ip, #94208	; 0x17000
   10ac4:	ldr	pc, [ip, #1460]!	; 0x5b4

00010ac8 <fputc@plt>:
   10ac8:	add	ip, pc, #0, 12
   10acc:	add	ip, ip, #94208	; 0x17000
   10ad0:	ldr	pc, [ip, #1452]!	; 0x5ac

00010ad4 <sprintf@plt>:
   10ad4:	add	ip, pc, #0, 12
   10ad8:	add	ip, ip, #94208	; 0x17000
   10adc:	ldr	pc, [ip, #1444]!	; 0x5a4

00010ae0 <utf8proc_errmsg@plt>:
   10ae0:	add	ip, pc, #0, 12
   10ae4:	add	ip, ip, #94208	; 0x17000
   10ae8:	ldr	pc, [ip, #1436]!	; 0x59c

00010aec <fputs@plt>:
   10aec:	add	ip, pc, #0, 12
   10af0:	add	ip, ip, #94208	; 0x17000
   10af4:	ldr	pc, [ip, #1428]!	; 0x594

00010af8 <strncmp@plt>:
   10af8:	add	ip, pc, #0, 12
   10afc:	add	ip, ip, #94208	; 0x17000
   10b00:	ldr	pc, [ip, #1420]!	; 0x58c

00010b04 <abort@plt>:
   10b04:	add	ip, pc, #0, 12
   10b08:	add	ip, ip, #94208	; 0x17000
   10b0c:	ldr	pc, [ip, #1412]!	; 0x584

00010b10 <getc@plt>:
   10b10:	add	ip, pc, #0, 12
   10b14:	add	ip, ip, #94208	; 0x17000
   10b18:	ldr	pc, [ip, #1404]!	; 0x57c

00010b1c <__assert_fail@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #94208	; 0x17000
   10b24:	ldr	pc, [ip, #1396]!	; 0x574

Disassembly of section .text:

00010b28 <error@@Base-0x15b4>:
   10b28:	strd	r4, [sp, #-12]!
   10b2c:	mov	r5, r1
   10b30:	ldr	r4, [pc, #132]	; 10bbc <__assert_fail@plt+0xa0>
   10b34:	str	lr, [sp, #8]
   10b38:	sub	sp, sp, #12
   10b3c:	ldr	r3, [pc, #124]	; 10bc0 <__assert_fail@plt+0xa4>
   10b40:	str	r0, [sp, #4]
   10b44:	add	r0, sp, #4
   10b48:	ldr	r2, [pc, #116]	; 10bc4 <__assert_fail@plt+0xa8>
   10b4c:	add	r4, pc, r4
   10b50:	ldr	r3, [r4, r3]
   10b54:	add	r2, pc, r2
   10b58:	bl	122c0 <error@@Base+0x1e4>
   10b5c:	ldr	r3, [sp, #4]
   10b60:	sub	r3, r3, #2
   10b64:	cmp	r3, #1
   10b68:	bls	10b78 <__assert_fail@plt+0x5c>
   10b6c:	ldr	r0, [pc, #84]	; 10bc8 <__assert_fail@plt+0xac>
   10b70:	add	r0, pc, r0
   10b74:	bl	120dc <error@@Base>
   10b78:	ldr	r3, [pc, #76]	; 10bcc <__assert_fail@plt+0xb0>
   10b7c:	ldr	r3, [r4, r3]
   10b80:	ldr	r0, [r3]
   10b84:	bl	119a4 <__assert_fail@plt+0xe88>
   10b88:	mov	r0, r5
   10b8c:	bl	10d78 <__assert_fail@plt+0x25c>
   10b90:	bl	111a8 <__assert_fail@plt+0x68c>
   10b94:	bl	112d8 <__assert_fail@plt+0x7bc>
   10b98:	bl	1158c <__assert_fail@plt+0xa70>
   10b9c:	ldr	r3, [sp, #4]
   10ba0:	cmp	r3, #3
   10ba4:	ldr	r3, [pc, #36]	; 10bd0 <__assert_fail@plt+0xb4>
   10ba8:	movne	r1, #0
   10bac:	ldreq	r1, [r5, #8]
   10bb0:	ldr	r0, [r4, r3]
   10bb4:	bl	12e20 <error@@Base+0xd44>
   10bb8:	bl	12060 <__assert_fail@plt+0x1544>
   10bbc:	andeq	r7, r1, ip, lsr #9
   10bc0:	andeq	r0, r0, ip, asr #1
   10bc4:	andeq	r3, r0, r4, asr #15
   10bc8:	andeq	r3, r0, r8, ror #15
   10bcc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   10bd0:	ldrdeq	r0, [r0], -r8
   10bd4:	mov	fp, #0
   10bd8:	mov	lr, #0
   10bdc:	pop	{r1}		; (ldr r1, [sp], #4)
   10be0:	mov	r2, sp
   10be4:	push	{r2}		; (str r2, [sp, #-4]!)
   10be8:	push	{r0}		; (str r0, [sp, #-4]!)
   10bec:	ldr	ip, [pc, #16]	; 10c04 <__assert_fail@plt+0xe8>
   10bf0:	push	{ip}		; (str ip, [sp, #-4]!)
   10bf4:	ldr	r0, [pc, #12]	; 10c08 <__assert_fail@plt+0xec>
   10bf8:	ldr	r3, [pc, #12]	; 10c0c <__assert_fail@plt+0xf0>
   10bfc:	bl	10a44 <__libc_start_main@plt>
   10c00:	bl	10b04 <abort@plt>
   10c04:	ldrdeq	r4, [r1], -ip
   10c08:	andeq	r0, r1, r8, lsr #22
   10c0c:	andeq	r4, r1, ip, ror r2
   10c10:	ldr	r3, [pc, #20]	; 10c2c <__assert_fail@plt+0x110>
   10c14:	ldr	r2, [pc, #20]	; 10c30 <__assert_fail@plt+0x114>
   10c18:	add	r3, pc, r3
   10c1c:	ldr	r2, [r3, r2]
   10c20:	cmp	r2, #0
   10c24:	bxeq	lr
   10c28:	b	10a5c <__gmon_start__@plt>
   10c2c:	andeq	r7, r1, r0, ror #7
   10c30:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10c34:	ldr	r0, [pc, #24]	; 10c54 <__assert_fail@plt+0x138>
   10c38:	ldr	r3, [pc, #24]	; 10c58 <__assert_fail@plt+0x13c>
   10c3c:	cmp	r3, r0
   10c40:	bxeq	lr
   10c44:	ldr	r3, [pc, #16]	; 10c5c <__assert_fail@plt+0x140>
   10c48:	cmp	r3, #0
   10c4c:	bxeq	lr
   10c50:	bx	r3
   10c54:	andeq	r8, r2, r4, asr #2
   10c58:	andeq	r8, r2, r4, asr #2
   10c5c:	andeq	r0, r0, r0
   10c60:	ldr	r0, [pc, #36]	; 10c8c <__assert_fail@plt+0x170>
   10c64:	ldr	r1, [pc, #36]	; 10c90 <__assert_fail@plt+0x174>
   10c68:	sub	r1, r1, r0
   10c6c:	asr	r1, r1, #2
   10c70:	add	r1, r1, r1, lsr #31
   10c74:	asrs	r1, r1, #1
   10c78:	bxeq	lr
   10c7c:	ldr	r3, [pc, #16]	; 10c94 <__assert_fail@plt+0x178>
   10c80:	cmp	r3, #0
   10c84:	bxeq	lr
   10c88:	bx	r3
   10c8c:	andeq	r8, r2, r4, asr #2
   10c90:	andeq	r8, r2, r4, asr #2
   10c94:	andeq	r0, r0, r0
   10c98:	push	{r4, lr}
   10c9c:	ldr	r4, [pc, #24]	; 10cbc <__assert_fail@plt+0x1a0>
   10ca0:	ldrb	r3, [r4]
   10ca4:	cmp	r3, #0
   10ca8:	popne	{r4, pc}
   10cac:	bl	10c34 <__assert_fail@plt+0x118>
   10cb0:	mov	r3, #1
   10cb4:	strb	r3, [r4]
   10cb8:	pop	{r4, pc}
   10cbc:	andeq	r8, r2, r4, asr #2
   10cc0:	b	10c60 <__assert_fail@plt+0x144>
   10cc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10cc8:	mov	r5, r1
   10ccc:	mov	r1, #4
   10cd0:	ldr	r3, [pc, #148]	; 10d6c <__assert_fail@plt+0x250>
   10cd4:	mov	r4, r0
   10cd8:	str	r8, [sp, #16]
   10cdc:	ldr	r8, [pc, #140]	; 10d70 <__assert_fail@plt+0x254>
   10ce0:	strd	r6, [sp, #8]
   10ce4:	str	lr, [sp, #20]
   10ce8:	add	r8, pc, r8
   10cec:	ldr	r6, [r8, r3]
   10cf0:	add	r6, r6, r0, lsl r1
   10cf4:	ldr	r0, [r6, #12]
   10cf8:	add	r0, r0, #1
   10cfc:	bl	12138 <error@@Base+0x5c>
   10d00:	ldr	lr, [r6, #12]
   10d04:	cmp	lr, #0
   10d08:	ble	10d64 <__assert_fail@plt+0x248>
   10d0c:	ldr	r2, [pc, #96]	; 10d74 <__assert_fail@plt+0x258>
   10d10:	mov	ip, #0
   10d14:	rsb	r7, r4, #1
   10d18:	mov	r3, ip
   10d1c:	ldr	r6, [r8, r2]
   10d20:	ldr	r2, [r6, r4, lsl #2]
   10d24:	ldr	r1, [r2, r3, lsl #3]
   10d28:	add	r2, r2, r3, lsl #3
   10d2c:	add	r3, r3, #1
   10d30:	add	r1, r1, r7
   10d34:	ldrb	r1, [r1, #12]
   10d38:	cmp	r1, #0
   10d3c:	strne	r2, [r0, ip, lsl #2]
   10d40:	addne	ip, ip, #1
   10d44:	cmp	r3, lr
   10d48:	bne	10d20 <__assert_fail@plt+0x204>
   10d4c:	ldrd	r6, [sp, #8]
   10d50:	ldr	r8, [sp, #16]
   10d54:	str	ip, [r5]
   10d58:	ldrd	r4, [sp]
   10d5c:	add	sp, sp, #20
   10d60:	pop	{pc}		; (ldr pc, [sp], #4)
   10d64:	mov	ip, #0
   10d68:	b	10d4c <__assert_fail@plt+0x230>
   10d6c:	strheq	r0, [r0], -ip
   10d70:	andeq	r7, r1, r0, lsl r3
   10d74:	andeq	r0, r0, r0, lsl #2
   10d78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d7c:	sub	r3, r0, #4
   10d80:	mov	r5, #0
   10d84:	ldr	r2, [pc, #500]	; 10f80 <__assert_fail@plt+0x464>
   10d88:	strd	r8, [sp, #16]
   10d8c:	mov	r8, #1
   10d90:	ldr	r9, [pc, #492]	; 10f84 <__assert_fail@plt+0x468>
   10d94:	strd	r6, [sp, #8]
   10d98:	strd	sl, [sp, #24]
   10d9c:	str	lr, [sp, #32]
   10da0:	sub	sp, sp, #28
   10da4:	ldr	r0, [pc, #476]	; 10f88 <__assert_fail@plt+0x46c>
   10da8:	add	r9, pc, r9
   10dac:	str	r3, [sp, #4]
   10db0:	ldr	r1, [pc, #468]	; 10f8c <__assert_fail@plt+0x470>
   10db4:	ldr	r3, [pc, #468]	; 10f90 <__assert_fail@plt+0x474>
   10db8:	ldr	r2, [r9, r2]
   10dbc:	ldr	sl, [r9, r0]
   10dc0:	ldr	r6, [r9, r1]
   10dc4:	str	r2, [sp, #16]
   10dc8:	ldr	r3, [r9, r3]
   10dcc:	str	r9, [sp, #8]
   10dd0:	str	r3, [sp, #20]
   10dd4:	ldr	r3, [sp, #16]
   10dd8:	ldr	r7, [sp, #20]
   10ddc:	add	r4, r3, r5, lsl #4
   10de0:	ldr	r3, [sp, #4]
   10de4:	mov	r2, r7
   10de8:	mov	r0, r4
   10dec:	ldr	r1, [r3, #4]!
   10df0:	str	r3, [sp, #4]
   10df4:	bl	139d0 <error@@Base+0x18f4>
   10df8:	cmp	r5, #0
   10dfc:	bne	10eb0 <__assert_fail@plt+0x394>
   10e00:	ldrb	r3, [r7, #11]
   10e04:	cmp	r3, #0
   10e08:	bne	10f68 <__assert_fail@plt+0x44c>
   10e0c:	mov	r1, r4
   10e10:	mov	r0, sl
   10e14:	bl	13114 <error@@Base+0x1038>
   10e18:	ldr	r0, [sl, #12]
   10e1c:	mov	r1, #8
   10e20:	add	r0, r0, #1
   10e24:	bl	12138 <error@@Base+0x5c>
   10e28:	ldr	r4, [sl]
   10e2c:	str	r0, [r6]
   10e30:	cmp	r4, #0
   10e34:	movne	r3, #1
   10e38:	strne	r3, [sp, #12]
   10e3c:	beq	10f58 <__assert_fail@plt+0x43c>
   10e40:	ldr	r3, [pc, #332]	; 10f94 <__assert_fail@plt+0x478>
   10e44:	mov	fp, #0
   10e48:	ldr	r2, [sp, #8]
   10e4c:	ldr	r7, [r2, r3]
   10e50:	b	10e74 <__assert_fail@plt+0x358>
   10e54:	add	r3, r9, r5
   10e58:	strb	r8, [r3, #12]
   10e5c:	ldr	r4, [r4, #4]
   10e60:	ldr	r3, [r6]
   10e64:	cmp	r4, #0
   10e68:	str	r9, [r3, fp]
   10e6c:	add	fp, fp, #8
   10e70:	beq	10ee4 <__assert_fail@plt+0x3c8>
   10e74:	mov	r0, r7
   10e78:	ldr	r1, [r4, #8]
   10e7c:	bl	11b48 <__assert_fail@plt+0x102c>
   10e80:	subs	r9, r0, #0
   10e84:	bne	10e54 <__assert_fail@plt+0x338>
   10e88:	mov	r1, #16
   10e8c:	mov	r0, #1
   10e90:	bl	12138 <error@@Base+0x5c>
   10e94:	ldr	r3, [r4, #8]
   10e98:	mov	r9, r0
   10e9c:	mov	r0, r7
   10ea0:	mov	r1, r9
   10ea4:	str	r3, [r9, #8]
   10ea8:	bl	11bd4 <__assert_fail@plt+0x10b8>
   10eac:	b	10e54 <__assert_fail@plt+0x338>
   10eb0:	mov	r1, r4
   10eb4:	mov	r0, sl
   10eb8:	bl	13114 <error@@Base+0x1038>
   10ebc:	ldr	r0, [sl, #12]
   10ec0:	add	r3, r5, #1
   10ec4:	mov	r1, #8
   10ec8:	str	r3, [sp, #12]
   10ecc:	add	r0, r0, #1
   10ed0:	bl	12138 <error@@Base+0x5c>
   10ed4:	ldr	r4, [sl]
   10ed8:	str	r0, [r6]
   10edc:	cmp	r4, #0
   10ee0:	bne	10e40 <__assert_fail@plt+0x324>
   10ee4:	ldr	r3, [sp, #12]
   10ee8:	cmp	r3, #2
   10eec:	bne	10f58 <__assert_fail@plt+0x43c>
   10ef0:	ldr	r3, [pc, #160]	; 10f98 <__assert_fail@plt+0x47c>
   10ef4:	mov	r0, #0
   10ef8:	ldr	r9, [sp, #8]
   10efc:	ldr	r4, [r9, r3]
   10f00:	mov	r1, r4
   10f04:	bl	10cc4 <__assert_fail@plt+0x1a8>
   10f08:	ldr	r3, [pc, #140]	; 10f9c <__assert_fail@plt+0x480>
   10f0c:	ldr	r2, [r4]
   10f10:	ldr	r3, [r9, r3]
   10f14:	cmp	r2, #65536	; 0x10000
   10f18:	str	r0, [r3]
   10f1c:	bge	10f74 <__assert_fail@plt+0x458>
   10f20:	ldr	r3, [pc, #120]	; 10fa0 <__assert_fail@plt+0x484>
   10f24:	mov	r0, #1
   10f28:	ldr	r1, [r9, r3]
   10f2c:	bl	10cc4 <__assert_fail@plt+0x1a8>
   10f30:	ldr	r3, [pc, #108]	; 10fa4 <__assert_fail@plt+0x488>
   10f34:	ldr	r3, [r9, r3]
   10f38:	str	r0, [r3]
   10f3c:	add	sp, sp, #28
   10f40:	ldrd	r4, [sp]
   10f44:	ldrd	r6, [sp, #8]
   10f48:	ldrd	r8, [sp, #16]
   10f4c:	ldrd	sl, [sp, #24]
   10f50:	add	sp, sp, #32
   10f54:	pop	{pc}		; (ldr pc, [sp], #4)
   10f58:	add	r5, r5, #1
   10f5c:	add	sl, sl, #16
   10f60:	add	r6, r6, #4
   10f64:	b	10dd4 <__assert_fail@plt+0x2b8>
   10f68:	ldr	r0, [pc, #56]	; 10fa8 <__assert_fail@plt+0x48c>
   10f6c:	add	r0, pc, r0
   10f70:	bl	120dc <error@@Base>
   10f74:	ldr	r0, [pc, #48]	; 10fac <__assert_fail@plt+0x490>
   10f78:	add	r0, pc, r0
   10f7c:	bl	120dc <error@@Base>
   10f80:	muleq	r0, ip, r0
   10f84:	andeq	r7, r1, r0, asr r2
   10f88:	strheq	r0, [r0], -ip
   10f8c:	andeq	r0, r0, r0, lsl #2
   10f90:	strheq	r0, [r0], -r8
   10f94:	andeq	r0, r0, r8, asr #1
   10f98:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10f9c:	andeq	r0, r0, ip, ror #1
   10fa0:	andeq	r0, r0, ip, lsr #1
   10fa4:	andeq	r0, r0, r8, lsr #1
   10fa8:	andeq	r3, r0, r8, ror r3
   10fac:	andeq	r3, r0, r8, lsl #7
   10fb0:	cmp	r1, #0
   10fb4:	beq	11020 <__assert_fail@plt+0x504>
   10fb8:	ldr	r3, [r1, #8]
   10fbc:	rsb	ip, r3, #0
   10fc0:	cmp	ip, r0
   10fc4:	bge	11018 <__assert_fail@plt+0x4fc>
   10fc8:	push	{lr}		; (str lr, [sp, #-4]!)
   10fcc:	sub	ip, r0, #1
   10fd0:	ldr	lr, [r1, #12]
   10fd4:	add	r3, r3, ip
   10fd8:	bic	r3, r3, #1
   10fdc:	ldrh	r3, [lr, r3]
   10fe0:	str	ip, [r2]
   10fe4:	ldr	ip, [r1, #8]
   10fe8:	cmp	ip, r0
   10fec:	ble	11010 <__assert_fail@plt+0x4f4>
   10ff0:	add	r1, r0, #1
   10ff4:	add	ip, ip, r1
   10ff8:	bic	ip, ip, #1
   10ffc:	ldrh	r0, [lr, ip]
   11000:	add	r0, r0, #1
   11004:	cmp	r3, r0
   11008:	movle	r3, r0
   1100c:	strle	r1, [r2]
   11010:	mov	r0, r3
   11014:	pop	{pc}		; (ldr pc, [sp], #4)
   11018:	cmp	r3, r0
   1101c:	bgt	1102c <__assert_fail@plt+0x510>
   11020:	mov	r3, #0
   11024:	mov	r0, r3
   11028:	bx	lr
   1102c:	ldr	ip, [r1, #12]
   11030:	add	r1, r0, #1
   11034:	add	r3, r3, r1
   11038:	bic	r3, r3, #1
   1103c:	ldrh	r3, [ip, r3]
   11040:	str	r1, [r2]
   11044:	add	r3, r3, #1
   11048:	mov	r0, r3
   1104c:	bx	lr
   11050:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11054:	mov	r4, r0
   11058:	strd	r6, [sp, #8]
   1105c:	mov	r6, r1
   11060:	str	r8, [sp, #16]
   11064:	str	lr, [sp, #20]
   11068:	sub	sp, sp, #8
   1106c:	ldr	r5, [pc, #280]	; 1118c <__assert_fail@plt+0x670>
   11070:	add	r2, sp, #4
   11074:	ldr	r1, [r1]
   11078:	bl	10fb0 <__assert_fail@plt+0x494>
   1107c:	ldr	r3, [pc, #268]	; 11190 <__assert_fail@plt+0x674>
   11080:	add	r1, r4, r0
   11084:	add	r5, pc, r5
   11088:	ldr	r3, [r5, r3]
   1108c:	ldr	r7, [r3]
   11090:	ldr	r3, [pc, #252]	; 11194 <__assert_fail@plt+0x678>
   11094:	cmp	r7, r0
   11098:	ldr	r3, [r5, r3]
   1109c:	ldr	r8, [r3]
   110a0:	ble	11180 <__assert_fail@plt+0x664>
   110a4:	cmp	r1, r8
   110a8:	bge	11184 <__assert_fail@plt+0x668>
   110ac:	ldr	r2, [pc, #228]	; 11198 <__assert_fail@plt+0x67c>
   110b0:	ldr	r3, [pc, #228]	; 1119c <__assert_fail@plt+0x680>
   110b4:	ldr	r2, [r5, r2]
   110b8:	ldr	r3, [r5, r3]
   110bc:	ldr	r2, [r2]
   110c0:	ldr	r3, [r3]
   110c4:	ldr	ip, [r2, r0, lsl #2]
   110c8:	add	r2, r2, r0, lsl #2
   110cc:	ldr	lr, [r3, r1, lsl #2]
   110d0:	add	r3, r3, r1, lsl #2
   110d4:	ldr	ip, [ip]
   110d8:	ldr	lr, [lr]
   110dc:	cmp	lr, ip
   110e0:	bne	11178 <__assert_fail@plt+0x65c>
   110e4:	add	lr, r8, r0
   110e8:	sub	lr, lr, r1
   110ec:	b	11110 <__assert_fail@plt+0x5f4>
   110f0:	cmp	r0, lr
   110f4:	beq	11134 <__assert_fail@plt+0x618>
   110f8:	ldr	ip, [r2, #4]!
   110fc:	ldr	r1, [r3, #4]!
   11100:	ldr	ip, [ip]
   11104:	ldr	r1, [r1]
   11108:	cmp	ip, r1
   1110c:	bne	11178 <__assert_fail@plt+0x65c>
   11110:	add	r0, r0, #1
   11114:	cmp	r7, r0
   11118:	add	r1, r4, r0
   1111c:	bne	110f0 <__assert_fail@plt+0x5d4>
   11120:	ldr	r2, [pc, #120]	; 111a0 <__assert_fail@plt+0x684>
   11124:	add	r3, r4, #1
   11128:	mov	lr, r7
   1112c:	ldr	r2, [r5, r2]
   11130:	str	r3, [r2]
   11134:	cmp	r8, r1
   11138:	bne	1114c <__assert_fail@plt+0x630>
   1113c:	ldr	r2, [pc, #96]	; 111a4 <__assert_fail@plt+0x688>
   11140:	sub	r3, r4, #1
   11144:	ldr	r2, [r5, r2]
   11148:	str	r3, [r2]
   1114c:	ldr	r3, [r6, #8]
   11150:	ldr	r2, [r6, #12]
   11154:	add	r4, r4, r3
   11158:	bic	r4, r4, #1
   1115c:	strh	lr, [r2, r4]
   11160:	add	sp, sp, #8
   11164:	ldrd	r4, [sp]
   11168:	ldrd	r6, [sp, #8]
   1116c:	ldr	r8, [sp, #16]
   11170:	add	sp, sp, #20
   11174:	pop	{pc}		; (ldr pc, [sp], #4)
   11178:	mov	lr, r0
   1117c:	b	1114c <__assert_fail@plt+0x630>
   11180:	beq	11120 <__assert_fail@plt+0x604>
   11184:	mov	lr, r0
   11188:	b	11134 <__assert_fail@plt+0x618>
   1118c:	andeq	r6, r1, r4, ror pc
   11190:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11194:	andeq	r0, r0, ip, lsr #1
   11198:	andeq	r0, r0, ip, ror #1
   1119c:	andeq	r0, r0, r8, lsr #1
   111a0:	strdeq	r0, [r0], -r8
   111a4:	andeq	r0, r0, r8, ror #1
   111a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   111ac:	mvn	r4, #0
   111b0:	ldr	r2, [pc, #264]	; 112c0 <__assert_fail@plt+0x7a4>
   111b4:	strd	r8, [sp, #16]
   111b8:	ldr	r8, [pc, #260]	; 112c4 <__assert_fail@plt+0x7a8>
   111bc:	strd	r6, [sp, #8]
   111c0:	strd	sl, [sp, #24]
   111c4:	str	lr, [sp, #32]
   111c8:	sub	sp, sp, #4
   111cc:	ldr	r3, [pc, #244]	; 112c8 <__assert_fail@plt+0x7ac>
   111d0:	add	r8, pc, r8
   111d4:	ldr	sl, [r8, r2]
   111d8:	ldr	r0, [pc, #236]	; 112cc <__assert_fail@plt+0x7b0>
   111dc:	ldr	r7, [r8, r3]
   111e0:	ldr	r1, [sl]
   111e4:	ldr	r2, [pc, #228]	; 112d0 <__assert_fail@plt+0x7b4>
   111e8:	rsb	r3, r1, #0
   111ec:	str	r3, [r7]
   111f0:	ldr	r9, [r8, r0]
   111f4:	ldr	fp, [r8, r2]
   111f8:	ldr	r2, [r9]
   111fc:	str	r2, [fp]
   11200:	sub	r2, r2, r1
   11204:	cmp	r2, r3
   11208:	blt	112a4 <__assert_fail@plt+0x788>
   1120c:	mov	r1, #16
   11210:	mov	r0, #1
   11214:	bl	12138 <error@@Base+0x5c>
   11218:	mov	r6, r0
   1121c:	add	r5, r4, #1
   11220:	add	r0, r4, #2
   11224:	mov	r1, #2
   11228:	str	r5, [r6, #8]
   1122c:	rsb	r4, r5, #0
   11230:	bl	12138 <error@@Base+0x5c>
   11234:	ldr	r3, [pc, #152]	; 112d4 <__assert_fail@plt+0x7b8>
   11238:	mov	r1, r6
   1123c:	str	r0, [r6, #12]
   11240:	ldr	r0, [r8, r3]
   11244:	bl	116fc <__assert_fail@plt+0xbe0>
   11248:	ldr	r3, [r7]
   1124c:	b	1125c <__assert_fail@plt+0x740>
   11250:	add	r4, r4, #2
   11254:	cmp	r5, r4
   11258:	blt	1128c <__assert_fail@plt+0x770>
   1125c:	cmp	r4, r3
   11260:	blt	11250 <__assert_fail@plt+0x734>
   11264:	ldr	r2, [fp]
   11268:	cmp	r2, r4
   1126c:	blt	11250 <__assert_fail@plt+0x734>
   11270:	mov	r0, r4
   11274:	mov	r1, r6
   11278:	add	r4, r4, #2
   1127c:	bl	11050 <__assert_fail@plt+0x534>
   11280:	cmp	r5, r4
   11284:	ldr	r3, [r7]
   11288:	bge	1125c <__assert_fail@plt+0x740>
   1128c:	ldr	r2, [r9]
   11290:	mov	r4, r5
   11294:	ldr	r1, [sl]
   11298:	sub	r2, r2, r1
   1129c:	cmp	r2, r3
   112a0:	bge	1120c <__assert_fail@plt+0x6f0>
   112a4:	add	sp, sp, #4
   112a8:	ldrd	r4, [sp]
   112ac:	ldrd	r6, [sp, #8]
   112b0:	ldrd	r8, [sp, #16]
   112b4:	ldrd	sl, [sp, #24]
   112b8:	add	sp, sp, #32
   112bc:	pop	{pc}		; (ldr pc, [sp], #4)
   112c0:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   112c4:	andeq	r6, r1, r8, lsr #28
   112c8:	strdeq	r0, [r0], -r8
   112cc:	andeq	r0, r0, ip, lsr #1
   112d0:	andeq	r0, r0, r8, ror #1
   112d4:	andeq	r0, r0, r4, asr #1
   112d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   112dc:	strd	r6, [sp, #8]
   112e0:	ldr	r7, [pc, #196]	; 113ac <__assert_fail@plt+0x890>
   112e4:	str	r8, [sp, #16]
   112e8:	ldr	r1, [pc, #192]	; 113b0 <__assert_fail@plt+0x894>
   112ec:	str	lr, [sp, #20]
   112f0:	sub	sp, sp, #8
   112f4:	ldr	r2, [pc, #184]	; 113b4 <__assert_fail@plt+0x898>
   112f8:	add	r7, pc, r7
   112fc:	ldr	r3, [pc, #180]	; 113b8 <__assert_fail@plt+0x89c>
   11300:	ldr	r0, [r7, r1]
   11304:	ldr	r1, [r7, r2]
   11308:	ldr	r2, [r7, r3]
   1130c:	ldr	r5, [r0, #4]
   11310:	ldr	r3, [r1]
   11314:	ldr	r2, [r2]
   11318:	cmp	r5, #0
   1131c:	sub	r3, r3, r2
   11320:	beq	11394 <__assert_fail@plt+0x878>
   11324:	add	r6, sp, #4
   11328:	mov	r4, #1
   1132c:	mov	r0, r3
   11330:	mov	r2, r6
   11334:	ldr	r1, [r5]
   11338:	ldr	lr, [r5, #8]
   1133c:	ldr	ip, [r5, #12]
   11340:	add	r3, r3, lr
   11344:	bic	r3, r3, #1
   11348:	ldrh	r8, [ip, r3]
   1134c:	bl	10fb0 <__assert_fail@plt+0x494>
   11350:	cmp	r8, r0
   11354:	ble	11384 <__assert_fail@plt+0x868>
   11358:	ldr	r3, [pc, #92]	; 113bc <__assert_fail@plt+0x8a0>
   1135c:	sub	r8, r8, #1
   11360:	ldr	r3, [r7, r3]
   11364:	ldr	r3, [r3]
   11368:	sub	r2, r3, #4
   1136c:	add	r3, r3, r8, lsl #2
   11370:	add	r0, r2, r0, lsl #2
   11374:	ldr	r2, [r3], #-4
   11378:	cmp	r3, r0
   1137c:	strb	r4, [r2, #4]
   11380:	bne	11374 <__assert_fail@plt+0x858>
   11384:	ldr	r5, [r5]
   11388:	ldr	r3, [sp, #4]
   1138c:	cmp	r5, #0
   11390:	bne	1132c <__assert_fail@plt+0x810>
   11394:	add	sp, sp, #8
   11398:	ldrd	r4, [sp]
   1139c:	ldrd	r6, [sp, #8]
   113a0:	ldr	r8, [sp, #16]
   113a4:	add	sp, sp, #20
   113a8:	pop	{pc}		; (ldr pc, [sp], #4)
   113ac:	andeq	r6, r1, r0, lsl #26
   113b0:	andeq	r0, r0, r4, asr #1
   113b4:	andeq	r0, r0, ip, lsr #1
   113b8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   113bc:	andeq	r0, r0, ip, ror #1
   113c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   113c4:	strd	r6, [sp, #8]
   113c8:	add	r7, r0, #4096	; 0x1000
   113cc:	strd	r8, [sp, #16]
   113d0:	mov	r9, r1
   113d4:	mov	r8, r2
   113d8:	str	sl, [sp, #24]
   113dc:	str	lr, [sp, #28]
   113e0:	bl	11cdc <__assert_fail@plt+0x11c0>
   113e4:	ldr	r3, [r7, #3956]	; 0xf74
   113e8:	ldr	r4, [pc, #200]	; 114b8 <__assert_fail@plt+0x99c>
   113ec:	cmp	r3, #0
   113f0:	add	r4, pc, r4
   113f4:	ble	114a0 <__assert_fail@plt+0x984>
   113f8:	ldr	r3, [pc, #188]	; 114bc <__assert_fail@plt+0x9a0>
   113fc:	mov	r6, #0
   11400:	ldr	sl, [r4, r3]
   11404:	mov	r0, sl
   11408:	ldr	r3, [r7, #3952]	; 0xf70
   1140c:	ldr	r3, [r3, r6, lsl #2]
   11410:	ldr	r5, [r3, #12]
   11414:	ldr	r4, [r3, #16]
   11418:	mov	r1, r5
   1141c:	mov	r2, r4
   11420:	bl	129e0 <error@@Base+0x904>
   11424:	mov	r2, r4
   11428:	mov	r1, r5
   1142c:	mov	r0, r9
   11430:	bl	129e0 <error@@Base+0x904>
   11434:	ldr	r3, [r7, #3952]	; 0xf70
   11438:	ldr	r3, [r3, r6, lsl #2]
   1143c:	ldr	r0, [r3, #8]
   11440:	bl	10a8c <strlen@plt>
   11444:	add	r0, r9, r0, lsl #3
   11448:	mov	r1, r5
   1144c:	mov	r2, r4
   11450:	bl	129e0 <error@@Base+0x904>
   11454:	subs	r0, r8, #0
   11458:	mov	r1, #1
   1145c:	beq	11490 <__assert_fail@plt+0x974>
   11460:	sub	r4, r5, r4
   11464:	clz	r4, r4
   11468:	lsr	r4, r4, #5
   1146c:	mov	r2, r4
   11470:	bl	129e0 <error@@Base+0x904>
   11474:	cmp	r5, #10
   11478:	mov	r0, #88	; 0x58
   1147c:	lslle	r0, r5, #3
   11480:	mov	r2, r4
   11484:	mov	r1, #1
   11488:	add	r0, r8, r0
   1148c:	bl	129e0 <error@@Base+0x904>
   11490:	ldr	r3, [r7, #3956]	; 0xf74
   11494:	add	r6, r6, #1
   11498:	cmp	r3, r6
   1149c:	bgt	11404 <__assert_fail@plt+0x8e8>
   114a0:	ldrd	r4, [sp]
   114a4:	ldrd	r6, [sp, #8]
   114a8:	ldrd	r8, [sp, #16]
   114ac:	ldr	sl, [sp, #24]
   114b0:	add	sp, sp, #28
   114b4:	pop	{pc}		; (ldr pc, [sp], #4)
   114b8:	andeq	r6, r1, r8, lsl #24
   114bc:	ldrdeq	r0, [r0], -r8
   114c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114c4:	ldr	r3, [pc, #176]	; 1157c <__assert_fail@plt+0xa60>
   114c8:	strd	sl, [sp, #24]
   114cc:	ldr	fp, [pc, #172]	; 11580 <__assert_fail@plt+0xa64>
   114d0:	strd	r6, [sp, #8]
   114d4:	strd	r8, [sp, #16]
   114d8:	str	lr, [sp, #32]
   114dc:	sub	sp, sp, #4
   114e0:	add	fp, pc, fp
   114e4:	ldr	r7, [fp, r3]
   114e8:	ldr	r3, [r7, #12]
   114ec:	cmp	r3, #0
   114f0:	ble	11560 <__assert_fail@plt+0xa44>
   114f4:	ldr	r2, [pc, #136]	; 11584 <__assert_fail@plt+0xa68>
   114f8:	mov	r9, #0
   114fc:	ldr	sl, [fp, r2]
   11500:	add	r8, sl, #992	; 0x3e0
   11504:	mov	r5, r9
   11508:	add	r4, sl, #928	; 0x3a0
   1150c:	mov	r6, #1
   11510:	cmp	r3, r5
   11514:	mov	r0, r4
   11518:	ldr	r2, [pc, #104]	; 11588 <__assert_fail@plt+0xa6c>
   1151c:	mov	r1, #1
   11520:	add	r4, r4, #8
   11524:	ble	11554 <__assert_fail@plt+0xa38>
   11528:	ldr	r3, [fp, r2]
   1152c:	ldr	r3, [r3]
   11530:	add	r3, r3, r5, lsl #3
   11534:	add	r5, r5, #1
   11538:	ldrb	r3, [r3, #4]
   1153c:	and	r6, r6, r3
   11540:	eor	r2, r6, #1
   11544:	bl	129e0 <error@@Base+0x904>
   11548:	cmp	r4, r8
   1154c:	ldr	r3, [r7, #12]
   11550:	bne	11510 <__assert_fail@plt+0x9f4>
   11554:	add	r9, r9, #1
   11558:	cmp	r9, r3
   1155c:	blt	11504 <__assert_fail@plt+0x9e8>
   11560:	add	sp, sp, #4
   11564:	ldrd	r4, [sp]
   11568:	ldrd	r6, [sp, #8]
   1156c:	ldrd	r8, [sp, #16]
   11570:	ldrd	sl, [sp, #24]
   11574:	add	sp, sp, #32
   11578:	pop	{pc}		; (ldr pc, [sp], #4)
   1157c:	strheq	r0, [r0], -ip
   11580:	andeq	r6, r1, r8, lsl fp
   11584:	ldrdeq	r0, [r0], -r8
   11588:	andeq	r0, r0, r0, lsl #2
   1158c:	ldr	r3, [pc, #232]	; 1167c <__assert_fail@plt+0xb60>
   11590:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11594:	ldr	r2, [pc, #228]	; 11680 <__assert_fail@plt+0xb64>
   11598:	strd	r6, [sp, #8]
   1159c:	strd	r8, [sp, #16]
   115a0:	add	r3, pc, r3
   115a4:	str	sl, [sp, #24]
   115a8:	str	lr, [sp, #28]
   115ac:	ldr	r8, [r3, r2]
   115b0:	ldr	r2, [r8, #12]
   115b4:	cmp	r2, #0
   115b8:	ble	11670 <__assert_fail@plt+0xb54>
   115bc:	ldr	r1, [pc, #192]	; 11684 <__assert_fail@plt+0xb68>
   115c0:	mov	r4, #0
   115c4:	ldr	r2, [pc, #188]	; 11688 <__assert_fail@plt+0xb6c>
   115c8:	ldr	sl, [r3, r1]
   115cc:	ldr	r6, [r3, r2]
   115d0:	add	r7, sl, #9024	; 0x2340
   115d4:	add	r9, sl, #992	; 0x3e0
   115d8:	add	r7, r7, #24
   115dc:	ldr	r3, [r6]
   115e0:	lsl	r5, r4, #3
   115e4:	ldr	r3, [r3, r4, lsl #3]
   115e8:	add	r4, r4, #1
   115ec:	ldr	r0, [r3, #8]
   115f0:	bl	11aa0 <__assert_fail@plt+0xf84>
   115f4:	ldr	r3, [r6]
   115f8:	cmp	r0, #0
   115fc:	mov	r2, #1
   11600:	movne	r0, r9
   11604:	moveq	r0, r7
   11608:	add	ip, r3, r5
   1160c:	ldr	r1, [r3, r5]
   11610:	ldrb	r3, [ip, #4]
   11614:	ldr	r1, [r1, #8]
   11618:	clz	r3, r3
   1161c:	lsr	r3, r3, #5
   11620:	bl	12b0c <error@@Base+0xa30>
   11624:	ldr	r3, [r8, #12]
   11628:	cmp	r3, r4
   1162c:	bgt	115dc <__assert_fail@plt+0xac0>
   11630:	add	r1, sl, #8
   11634:	add	r0, sl, #992	; 0x3e0
   11638:	mov	r2, #0
   1163c:	bl	113c0 <__assert_fail@plt+0x8a4>
   11640:	add	r0, sl, #9024	; 0x2340
   11644:	add	r2, sl, #824	; 0x338
   11648:	add	r1, sl, #416	; 0x1a0
   1164c:	add	r0, r0, #24
   11650:	bl	113c0 <__assert_fail@plt+0x8a4>
   11654:	ldrd	r4, [sp]
   11658:	ldrd	r6, [sp, #8]
   1165c:	ldrd	r8, [sp, #16]
   11660:	ldr	sl, [sp, #24]
   11664:	ldr	lr, [sp, #28]
   11668:	add	sp, sp, #32
   1166c:	b	114c0 <__assert_fail@plt+0x9a4>
   11670:	ldr	r2, [pc, #12]	; 11684 <__assert_fail@plt+0xb68>
   11674:	ldr	sl, [r3, r2]
   11678:	b	11630 <__assert_fail@plt+0xb14>
   1167c:	andeq	r6, r1, r8, asr sl
   11680:	strheq	r0, [r0], -ip
   11684:	ldrdeq	r0, [r0], -r8
   11688:	andeq	r0, r0, r0, lsl #2
   1168c:	mov	r3, #0
   11690:	str	r3, [r0]
   11694:	str	r3, [r0, #4]
   11698:	str	r3, [r0, #8]
   1169c:	str	r3, [r0, #12]
   116a0:	bx	lr
   116a4:	ldr	r3, [r0]
   116a8:	mov	r2, #0
   116ac:	str	r4, [sp, #-8]!
   116b0:	mov	r4, r0
   116b4:	str	lr, [sp, #4]
   116b8:	cmp	r3, r2
   116bc:	strd	r2, [r1]
   116c0:	str	r1, [r0]
   116c4:	streq	r1, [r0, #4]
   116c8:	ldr	r0, [r0, #8]
   116cc:	strne	r1, [r3]
   116d0:	cmp	r0, #0
   116d4:	beq	116e4 <__assert_fail@plt+0xbc8>
   116d8:	bl	109a8 <free@plt>
   116dc:	mov	r3, #0
   116e0:	str	r3, [r4, #8]
   116e4:	ldr	r3, [r4, #12]
   116e8:	add	r3, r3, #1
   116ec:	str	r3, [r4, #12]
   116f0:	ldr	r4, [sp]
   116f4:	add	sp, sp, #4
   116f8:	pop	{pc}		; (ldr pc, [sp], #4)
   116fc:	ldr	r3, [r0, #4]
   11700:	mov	r2, #0
   11704:	str	r4, [sp, #-8]!
   11708:	mov	r4, r0
   1170c:	str	lr, [sp, #4]
   11710:	cmp	r3, r2
   11714:	str	r3, [r1]
   11718:	str	r2, [r1, #4]
   1171c:	streq	r1, [r0]
   11720:	ldr	r0, [r0, #8]
   11724:	strne	r1, [r3, #4]
   11728:	str	r1, [r4, #4]
   1172c:	cmp	r0, #0
   11730:	beq	11740 <__assert_fail@plt+0xc24>
   11734:	bl	109a8 <free@plt>
   11738:	mov	r3, #0
   1173c:	str	r3, [r4, #8]
   11740:	ldr	r3, [r4, #12]
   11744:	add	r3, r3, #1
   11748:	str	r3, [r4, #12]
   1174c:	ldr	r4, [sp]
   11750:	add	sp, sp, #4
   11754:	pop	{pc}		; (ldr pc, [sp], #4)
   11758:	ldr	r3, [r2]
   1175c:	str	r4, [sp, #-8]!
   11760:	mov	r4, r0
   11764:	str	lr, [sp, #4]
   11768:	cmp	r3, #0
   1176c:	str	r3, [r1]
   11770:	str	r2, [r1, #4]
   11774:	streq	r1, [r0]
   11778:	ldr	r0, [r0, #8]
   1177c:	strne	r1, [r3, #4]
   11780:	str	r1, [r2]
   11784:	cmp	r0, #0
   11788:	beq	11798 <__assert_fail@plt+0xc7c>
   1178c:	bl	109a8 <free@plt>
   11790:	mov	r3, #0
   11794:	str	r3, [r4, #8]
   11798:	ldr	r3, [r4, #12]
   1179c:	add	r3, r3, #1
   117a0:	str	r3, [r4, #12]
   117a4:	ldr	r4, [sp]
   117a8:	add	sp, sp, #4
   117ac:	pop	{pc}		; (ldr pc, [sp], #4)
   117b0:	ldr	r3, [r1, #4]
   117b4:	str	r4, [sp, #-8]!
   117b8:	mov	r4, r0
   117bc:	str	lr, [sp, #4]
   117c0:	cmp	r3, #0
   117c4:	stm	r2, {r1, r3}
   117c8:	str	r2, [r1, #4]
   117cc:	streq	r2, [r0, #4]
   117d0:	ldr	r0, [r0, #8]
   117d4:	strne	r2, [r3]
   117d8:	cmp	r0, #0
   117dc:	beq	117ec <__assert_fail@plt+0xcd0>
   117e0:	bl	109a8 <free@plt>
   117e4:	mov	r3, #0
   117e8:	str	r3, [r4, #8]
   117ec:	ldr	r3, [r4, #12]
   117f0:	add	r3, r3, #1
   117f4:	str	r3, [r4, #12]
   117f8:	ldr	r4, [sp]
   117fc:	add	sp, sp, #4
   11800:	pop	{pc}		; (ldr pc, [sp], #4)
   11804:	ldrd	r2, [r1]
   11808:	strd	r4, [sp, #-16]!
   1180c:	mov	r4, r0
   11810:	mov	r5, #0
   11814:	str	r6, [sp, #8]
   11818:	str	lr, [sp, #12]
   1181c:	cmp	r2, #0
   11820:	strne	r3, [r2, #4]
   11824:	ldrne	r3, [r1, #4]
   11828:	streq	r3, [r0]
   1182c:	cmp	r3, #0
   11830:	streq	r2, [r0, #4]
   11834:	ldr	r0, [r0, #8]
   11838:	strne	r2, [r3]
   1183c:	str	r5, [r1]
   11840:	str	r5, [r1, #4]
   11844:	cmp	r0, r5
   11848:	beq	11854 <__assert_fail@plt+0xd38>
   1184c:	bl	109a8 <free@plt>
   11850:	str	r5, [r4, #8]
   11854:	ldr	r3, [r4, #12]
   11858:	ldr	r6, [sp, #8]
   1185c:	sub	r3, r3, #1
   11860:	str	r3, [r4, #12]
   11864:	ldrd	r4, [sp]
   11868:	add	sp, sp, #12
   1186c:	pop	{pc}		; (ldr pc, [sp], #4)
   11870:	ldr	r3, [r0, #8]
   11874:	cmp	r3, #0
   11878:	bxne	lr
   1187c:	ldr	r3, [r0, #12]
   11880:	cmp	r3, #0
   11884:	bxeq	lr
   11888:	mov	r1, #4
   1188c:	str	r4, [sp, #-8]!
   11890:	mov	r4, r0
   11894:	mov	r0, r3
   11898:	str	lr, [sp, #4]
   1189c:	bl	12138 <error@@Base+0x5c>
   118a0:	ldr	r3, [r4]
   118a4:	str	r0, [r4, #8]
   118a8:	cmp	r3, #0
   118ac:	beq	118c4 <__assert_fail@plt+0xda8>
   118b0:	sub	r0, r0, #4
   118b4:	str	r3, [r0, #4]!
   118b8:	ldr	r3, [r3, #4]
   118bc:	cmp	r3, #0
   118c0:	bne	118b4 <__assert_fail@plt+0xd98>
   118c4:	ldr	r4, [sp]
   118c8:	add	sp, sp, #4
   118cc:	pop	{pc}		; (ldr pc, [sp], #4)
   118d0:	strd	r4, [sp, #-16]!
   118d4:	ldr	r4, [r0]
   118d8:	str	r6, [sp, #8]
   118dc:	str	lr, [sp, #12]
   118e0:	cmp	r4, #0
   118e4:	beq	11910 <__assert_fail@plt+0xdf4>
   118e8:	mov	r5, r0
   118ec:	mov	r6, r1
   118f0:	mov	r1, r4
   118f4:	mov	r0, r5
   118f8:	bl	11804 <__assert_fail@plt+0xce8>
   118fc:	mov	r0, r4
   11900:	blx	r6
   11904:	ldr	r4, [r5]
   11908:	cmp	r4, #0
   1190c:	bne	118f0 <__assert_fail@plt+0xdd4>
   11910:	ldrd	r4, [sp]
   11914:	ldr	r6, [sp, #8]
   11918:	add	sp, sp, #12
   1191c:	pop	{pc}		; (ldr pc, [sp], #4)
   11920:	strd	r4, [sp, #-16]!
   11924:	mov	r1, r0
   11928:	mov	r4, r0
   1192c:	ldr	r5, [pc, #104]	; 1199c <__assert_fail@plt+0xe80>
   11930:	str	r6, [sp, #8]
   11934:	str	lr, [sp, #12]
   11938:	add	r5, pc, r5
   1193c:	mov	r0, r5
   11940:	bl	11b48 <__assert_fail@plt+0x102c>
   11944:	cmp	r0, #0
   11948:	beq	1196c <__assert_fail@plt+0xe50>
   1194c:	ldr	r0, [pc, #76]	; 119a0 <__assert_fail@plt+0xe84>
   11950:	mov	r1, r4
   11954:	ldrd	r4, [sp]
   11958:	ldr	r6, [sp, #8]
   1195c:	add	r0, pc, r0
   11960:	ldr	lr, [sp, #12]
   11964:	add	sp, sp, #16
   11968:	b	12560 <error@@Base+0x484>
   1196c:	mov	r1, #12
   11970:	mov	r0, #1
   11974:	bl	12138 <error@@Base+0x5c>
   11978:	mov	r3, r0
   1197c:	mov	r0, r5
   11980:	ldr	r6, [sp, #8]
   11984:	mov	r1, r3
   11988:	ldr	lr, [sp, #12]
   1198c:	str	r4, [r3, #8]
   11990:	ldrd	r4, [sp]
   11994:	add	sp, sp, #16
   11998:	b	11bd4 <__assert_fail@plt+0x10b8>
   1199c:	andeq	r6, r1, ip, lsr #16
   119a0:	andeq	r2, r0, r4, lsl sl
   119a4:	strd	r4, [sp, #-16]!
   119a8:	ldr	r4, [pc, #208]	; 11a80 <__assert_fail@plt+0xf64>
   119ac:	str	r6, [sp, #8]
   119b0:	str	lr, [sp, #12]
   119b4:	ldr	r5, [pc, #200]	; 11a84 <__assert_fail@plt+0xf68>
   119b8:	add	r4, pc, r4
   119bc:	ldrb	r3, [r4]
   119c0:	add	r5, pc, r5
   119c4:	cmp	r3, #0
   119c8:	bne	11a74 <__assert_fail@plt+0xf58>
   119cc:	cmp	r0, #0
   119d0:	beq	11a48 <__assert_fail@plt+0xf2c>
   119d4:	ldr	r2, [pc, #172]	; 11a88 <__assert_fail@plt+0xf6c>
   119d8:	add	r6, r4, #4
   119dc:	mov	r1, r0
   119e0:	mov	r0, r6
   119e4:	add	r2, pc, r2
   119e8:	bl	139d0 <error@@Base+0x18f4>
   119ec:	add	r0, r4, #20
   119f0:	mov	r1, r6
   119f4:	bl	13114 <error@@Base+0x1038>
   119f8:	ldr	r3, [pc, #140]	; 11a8c <__assert_fail@plt+0xf70>
   119fc:	mov	r0, r6
   11a00:	ldr	r1, [r5, r3]
   11a04:	bl	118d0 <__assert_fail@plt+0xdb4>
   11a08:	ldr	r4, [r4, #20]
   11a0c:	cmp	r4, #0
   11a10:	beq	11a28 <__assert_fail@plt+0xf0c>
   11a14:	ldr	r0, [r4, #8]
   11a18:	bl	11920 <__assert_fail@plt+0xe04>
   11a1c:	ldr	r4, [r4, #4]
   11a20:	cmp	r4, #0
   11a24:	bne	11a14 <__assert_fail@plt+0xef8>
   11a28:	ldr	r3, [pc, #96]	; 11a90 <__assert_fail@plt+0xf74>
   11a2c:	mov	r2, #1
   11a30:	add	r3, pc, r3
   11a34:	strb	r2, [r3]
   11a38:	ldrd	r4, [sp]
   11a3c:	ldr	r6, [sp, #8]
   11a40:	add	sp, sp, #12
   11a44:	pop	{pc}		; (ldr pc, [sp], #4)
   11a48:	ldr	r4, [pc, #68]	; 11a94 <__assert_fail@plt+0xf78>
   11a4c:	ldr	r0, [pc, #68]	; 11a98 <__assert_fail@plt+0xf7c>
   11a50:	add	r4, pc, r4
   11a54:	add	r5, r4, #436	; 0x1b4
   11a58:	add	r0, pc, r0
   11a5c:	b	11a64 <__assert_fail@plt+0xf48>
   11a60:	ldr	r0, [r4, #4]!
   11a64:	bl	11920 <__assert_fail@plt+0xe04>
   11a68:	cmp	r5, r4
   11a6c:	bne	11a60 <__assert_fail@plt+0xf44>
   11a70:	b	11a28 <__assert_fail@plt+0xf0c>
   11a74:	ldr	r0, [pc, #32]	; 11a9c <__assert_fail@plt+0xf80>
   11a78:	add	r0, pc, r0
   11a7c:	bl	120dc <error@@Base>
   11a80:	andeq	r6, r1, r8, lsl #15
   11a84:	andeq	r6, r1, r8, lsr r6
   11a88:	andeq	r6, r1, r4, asr #14
   11a8c:	andeq	r0, r0, r4, lsr #1
   11a90:	andeq	r6, r1, r0, lsl r7
   11a94:	strdeq	r6, [r1], -r8
   11a98:	andeq	r2, r0, ip, lsr #18
   11a9c:	andeq	r2, r0, r0, lsl r9
   11aa0:	ldr	r3, [pc, #68]	; 11aec <__assert_fail@plt+0xfd0>
   11aa4:	str	r4, [sp, #-8]!
   11aa8:	str	lr, [sp, #4]
   11aac:	add	r3, pc, r3
   11ab0:	ldrb	r3, [r3]
   11ab4:	cmp	r3, #0
   11ab8:	beq	11ae0 <__assert_fail@plt+0xfc4>
   11abc:	mov	r1, r0
   11ac0:	ldr	r0, [pc, #40]	; 11af0 <__assert_fail@plt+0xfd4>
   11ac4:	add	r0, pc, r0
   11ac8:	bl	11b48 <__assert_fail@plt+0x102c>
   11acc:	adds	r0, r0, #0
   11ad0:	ldr	r4, [sp]
   11ad4:	add	sp, sp, #4
   11ad8:	movne	r0, #1
   11adc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ae0:	ldr	r0, [pc, #12]	; 11af4 <__assert_fail@plt+0xfd8>
   11ae4:	add	r0, pc, r0
   11ae8:	bl	120dc <error@@Base>
   11aec:	muleq	r1, r4, r6
   11af0:	andeq	r6, r1, r0, lsr #13
   11af4:	andeq	r2, r0, r4, asr #17
   11af8:	strd	r4, [sp, #-16]!
   11afc:	add	r5, r0, #8000	; 0x1f40
   11b00:	mov	r4, r0
   11b04:	add	r5, r5, #48	; 0x30
   11b08:	str	r6, [sp, #8]
   11b0c:	mov	r6, r0
   11b10:	str	lr, [sp, #12]
   11b14:	mov	r0, r4
   11b18:	add	r4, r4, #16
   11b1c:	bl	1168c <__assert_fail@plt+0xb70>
   11b20:	cmp	r4, r5
   11b24:	bne	11b14 <__assert_fail@plt+0xff8>
   11b28:	add	r6, r6, #4096	; 0x1000
   11b2c:	mov	r3, #0
   11b30:	ldrd	r4, [sp]
   11b34:	str	r3, [r6, #3952]	; 0xf70
   11b38:	str	r3, [r6, #3956]	; 0xf74
   11b3c:	ldr	r6, [sp, #8]
   11b40:	add	sp, sp, #12
   11b44:	pop	{pc}		; (ldr pc, [sp], #4)
   11b48:	strd	r4, [sp, #-16]!
   11b4c:	mov	r5, r1
   11b50:	str	r6, [sp, #8]
   11b54:	str	lr, [sp, #12]
   11b58:	ldrb	r3, [r1]
   11b5c:	cmp	r3, #0
   11b60:	beq	11b90 <__assert_fail@plt+0x1074>
   11b64:	mov	r2, #0
   11b68:	add	r2, r2, r3
   11b6c:	ldrb	r3, [r1, #1]!
   11b70:	cmp	r3, #0
   11b74:	bne	11b68 <__assert_fail@plt+0x104c>
   11b78:	movw	r3, #20065	; 0x4e61
   11b7c:	movt	r3, #33354	; 0x824a
   11b80:	movw	r1, #503	; 0x1f7
   11b84:	umull	ip, r3, r3, r2
   11b88:	lsr	r3, r3, #8
   11b8c:	mls	r3, r1, r3, r2
   11b90:	ldr	r4, [r0, r3, lsl #4]
   11b94:	cmp	r4, #0
   11b98:	bne	11bac <__assert_fail@plt+0x1090>
   11b9c:	b	11bc0 <__assert_fail@plt+0x10a4>
   11ba0:	ldr	r4, [r4, #4]
   11ba4:	cmp	r4, #0
   11ba8:	beq	11bc0 <__assert_fail@plt+0x10a4>
   11bac:	mov	r0, r5
   11bb0:	ldr	r1, [r4, #8]
   11bb4:	bl	10984 <strcmp@plt>
   11bb8:	cmp	r0, #0
   11bbc:	bne	11ba0 <__assert_fail@plt+0x1084>
   11bc0:	mov	r0, r4
   11bc4:	ldrd	r4, [sp]
   11bc8:	ldr	r6, [sp, #8]
   11bcc:	add	sp, sp, #12
   11bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   11bd4:	ldr	r2, [r1, #8]
   11bd8:	str	r4, [sp, #-8]!
   11bdc:	mov	r4, r0
   11be0:	str	lr, [sp, #4]
   11be4:	ldrb	r3, [r2]
   11be8:	cmp	r3, #0
   11bec:	beq	11c20 <__assert_fail@plt+0x1104>
   11bf0:	mov	r0, #0
   11bf4:	add	r0, r0, r3
   11bf8:	ldrb	r3, [r2, #1]!
   11bfc:	cmp	r3, #0
   11c00:	bne	11bf4 <__assert_fail@plt+0x10d8>
   11c04:	movw	r3, #20065	; 0x4e61
   11c08:	movt	r3, #33354	; 0x824a
   11c0c:	movw	r2, #503	; 0x1f7
   11c10:	umull	ip, r3, r3, r0
   11c14:	lsr	r3, r3, #8
   11c18:	mls	r0, r2, r3, r0
   11c1c:	add	r0, r4, r0, lsl #4
   11c20:	add	r4, r4, #4096	; 0x1000
   11c24:	bl	116a4 <__assert_fail@plt+0xb88>
   11c28:	ldr	r0, [r4, #3952]	; 0xf70
   11c2c:	cmp	r0, #0
   11c30:	beq	11c40 <__assert_fail@plt+0x1124>
   11c34:	bl	109a8 <free@plt>
   11c38:	mov	r3, #0
   11c3c:	str	r3, [r4, #3952]	; 0xf70
   11c40:	ldr	r3, [r4, #3956]	; 0xf74
   11c44:	add	r3, r3, #1
   11c48:	str	r3, [r4, #3956]	; 0xf74
   11c4c:	ldr	r4, [sp]
   11c50:	add	sp, sp, #4
   11c54:	pop	{pc}		; (ldr pc, [sp], #4)
   11c58:	ldr	r2, [r1, #8]
   11c5c:	str	r4, [sp, #-8]!
   11c60:	mov	r4, r0
   11c64:	str	lr, [sp, #4]
   11c68:	ldrb	r3, [r2]
   11c6c:	cmp	r3, #0
   11c70:	beq	11ca4 <__assert_fail@plt+0x1188>
   11c74:	mov	r0, #0
   11c78:	add	r0, r0, r3
   11c7c:	ldrb	r3, [r2, #1]!
   11c80:	cmp	r3, #0
   11c84:	bne	11c78 <__assert_fail@plt+0x115c>
   11c88:	movw	r3, #20065	; 0x4e61
   11c8c:	movt	r3, #33354	; 0x824a
   11c90:	movw	r2, #503	; 0x1f7
   11c94:	umull	ip, r3, r3, r0
   11c98:	lsr	r3, r3, #8
   11c9c:	mls	r0, r2, r3, r0
   11ca0:	add	r0, r4, r0, lsl #4
   11ca4:	add	r4, r4, #4096	; 0x1000
   11ca8:	bl	11804 <__assert_fail@plt+0xce8>
   11cac:	ldr	r0, [r4, #3952]	; 0xf70
   11cb0:	cmp	r0, #0
   11cb4:	beq	11cc4 <__assert_fail@plt+0x11a8>
   11cb8:	bl	109a8 <free@plt>
   11cbc:	mov	r3, #0
   11cc0:	str	r3, [r4, #3952]	; 0xf70
   11cc4:	ldr	r3, [r4, #3956]	; 0xf74
   11cc8:	sub	r3, r3, #1
   11ccc:	str	r3, [r4, #3956]	; 0xf74
   11cd0:	ldr	r4, [sp]
   11cd4:	add	sp, sp, #4
   11cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   11cdc:	strd	r4, [sp, #-16]!
   11ce0:	str	r6, [sp, #8]
   11ce4:	add	r6, r0, #4096	; 0x1000
   11ce8:	ldr	r4, [r6, #3952]	; 0xf70
   11cec:	str	lr, [sp, #12]
   11cf0:	cmp	r4, #0
   11cf4:	beq	11d08 <__assert_fail@plt+0x11ec>
   11cf8:	ldrd	r4, [sp]
   11cfc:	ldr	r6, [sp, #8]
   11d00:	add	sp, sp, #12
   11d04:	pop	{pc}		; (ldr pc, [sp], #4)
   11d08:	ldr	r3, [r6, #3956]	; 0xf74
   11d0c:	cmp	r3, #0
   11d10:	beq	11cf8 <__assert_fail@plt+0x11dc>
   11d14:	mov	r5, r0
   11d18:	mov	r1, #4
   11d1c:	mov	r0, r3
   11d20:	bl	12138 <error@@Base+0x5c>
   11d24:	mov	r2, r4
   11d28:	mov	ip, r4
   11d2c:	str	r0, [r6, #3952]	; 0xf70
   11d30:	movw	lr, #503	; 0x1f7
   11d34:	ldr	r3, [r5, ip, lsl #4]
   11d38:	cmp	r3, #0
   11d3c:	beq	11d58 <__assert_fail@plt+0x123c>
   11d40:	add	r1, r0, r2, lsl #2
   11d44:	str	r3, [r1], #4
   11d48:	add	r2, r2, #1
   11d4c:	ldr	r3, [r3, #4]
   11d50:	cmp	r3, #0
   11d54:	bne	11d44 <__assert_fail@plt+0x1228>
   11d58:	add	ip, ip, #1
   11d5c:	cmp	ip, lr
   11d60:	bne	11d34 <__assert_fail@plt+0x1218>
   11d64:	ldrd	r4, [sp]
   11d68:	ldr	r6, [sp, #8]
   11d6c:	add	sp, sp, #12
   11d70:	pop	{pc}		; (ldr pc, [sp], #4)
   11d74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11d78:	add	r5, r0, #8000	; 0x1f40
   11d7c:	mov	r4, r0
   11d80:	add	r5, r5, #48	; 0x30
   11d84:	strd	r6, [sp, #8]
   11d88:	mov	r7, r0
   11d8c:	mov	r6, r1
   11d90:	str	r8, [sp, #16]
   11d94:	str	lr, [sp, #20]
   11d98:	mov	r0, r4
   11d9c:	mov	r1, r6
   11da0:	add	r4, r4, #16
   11da4:	bl	118d0 <__assert_fail@plt+0xdb4>
   11da8:	cmp	r4, r5
   11dac:	bne	11d98 <__assert_fail@plt+0x127c>
   11db0:	add	r7, r7, #4096	; 0x1000
   11db4:	ldr	r0, [r7, #3952]	; 0xf70
   11db8:	cmp	r0, #0
   11dbc:	beq	11dcc <__assert_fail@plt+0x12b0>
   11dc0:	bl	109a8 <free@plt>
   11dc4:	mov	r3, #0
   11dc8:	str	r3, [r7, #3952]	; 0xf70
   11dcc:	mov	r3, #0
   11dd0:	ldrd	r4, [sp]
   11dd4:	ldr	r8, [sp, #16]
   11dd8:	str	r3, [r7, #3956]	; 0xf74
   11ddc:	ldrd	r6, [sp, #8]
   11de0:	add	sp, sp, #20
   11de4:	pop	{pc}		; (ldr pc, [sp], #4)
   11de8:	ldr	r3, [pc, #96]	; 11e50 <__assert_fail@plt+0x1334>
   11dec:	strd	r4, [sp, #-16]!
   11df0:	ldr	r2, [pc, #92]	; 11e54 <__assert_fail@plt+0x1338>
   11df4:	str	r6, [sp, #8]
   11df8:	mov	r6, r0
   11dfc:	str	lr, [sp, #12]
   11e00:	sub	sp, sp, #112	; 0x70
   11e04:	add	r3, pc, r3
   11e08:	add	r4, sp, #12
   11e0c:	ldr	r3, [r3, r2]
   11e10:	ldr	r5, [r3]
   11e14:	bl	10a68 <getpid@plt>
   11e18:	ldr	r1, [pc, #56]	; 11e58 <__assert_fail@plt+0x133c>
   11e1c:	mov	r3, r0
   11e20:	mov	r0, r4
   11e24:	str	r6, [sp]
   11e28:	mov	r2, r5
   11e2c:	add	r1, pc, r1
   11e30:	bl	10ad4 <sprintf@plt>
   11e34:	mov	r0, r4
   11e38:	bl	109d8 <strdup@plt>
   11e3c:	add	sp, sp, #112	; 0x70
   11e40:	ldrd	r4, [sp]
   11e44:	ldr	r6, [sp, #8]
   11e48:	add	sp, sp, #12
   11e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e50:	strdeq	r6, [r1], -r4
   11e54:	ldrdeq	r0, [r0], -r4
   11e58:	andeq	r2, r0, r8, lsl r8
   11e5c:	ldr	r3, [pc, #116]	; 11ed8 <__assert_fail@plt+0x13bc>
   11e60:	mov	r6, r0
   11e64:	str	r7, [sp, #-8]!
   11e68:	ldr	r2, [pc, #108]	; 11edc <__assert_fail@plt+0x13c0>
   11e6c:	str	lr, [sp, #4]
   11e70:	add	r3, pc, r3
   11e74:	ldr	r3, [r3, r2]
   11e78:	ldr	r3, [r3]
   11e7c:	cmp	r3, #0
   11e80:	beq	11e88 <__assert_fail@plt+0x136c>
   11e84:	blx	r3
   11e88:	ldr	r3, [pc, #80]	; 11ee0 <__assert_fail@plt+0x13c4>
   11e8c:	add	r3, pc, r3
   11e90:	ldrsh	r2, [r3]
   11e94:	cmp	r2, #0
   11e98:	ble	11ed0 <__assert_fail@plt+0x13b4>
   11e9c:	mov	r5, r3
   11ea0:	mov	r4, #1
   11ea4:	mov	r0, r4
   11ea8:	add	r4, r4, #1
   11eac:	bl	11de8 <__assert_fail@plt+0x12cc>
   11eb0:	mov	r7, r0
   11eb4:	sxth	r4, r4
   11eb8:	bl	109f0 <unlink@plt>
   11ebc:	mov	r0, r7
   11ec0:	bl	109a8 <free@plt>
   11ec4:	ldrsh	r3, [r5]
   11ec8:	cmp	r3, r4
   11ecc:	bge	11ea4 <__assert_fail@plt+0x1388>
   11ed0:	mov	r0, r6
   11ed4:	bl	10a74 <exit@plt>
   11ed8:	andeq	r6, r1, r8, lsl #3
   11edc:	ldrdeq	r0, [r0], -ip
   11ee0:	andeq	r8, r1, r0, asr r2
   11ee4:	ldrb	r3, [r0]
   11ee8:	ldrb	r2, [r1]
   11eec:	cmp	r3, #0
   11ef0:	beq	11f18 <__assert_fail@plt+0x13fc>
   11ef4:	cmp	r2, r3
   11ef8:	beq	11f08 <__assert_fail@plt+0x13ec>
   11efc:	b	11f24 <__assert_fail@plt+0x1408>
   11f00:	cmp	r3, r2
   11f04:	bne	11f24 <__assert_fail@plt+0x1408>
   11f08:	ldrb	r3, [r0, #1]!
   11f0c:	ldrb	r2, [r1, #1]!
   11f10:	cmp	r3, #0
   11f14:	bne	11f00 <__assert_fail@plt+0x13e4>
   11f18:	cmp	r2, #0
   11f1c:	beq	11f34 <__assert_fail@plt+0x1418>
   11f20:	mov	r3, #0
   11f24:	cmp	r3, r2
   11f28:	mvncc	r0, #0
   11f2c:	movcs	r0, #1
   11f30:	bx	lr
   11f34:	mov	r0, r2
   11f38:	bx	lr
   11f3c:	ldr	r3, [pc, #48]	; 11f74 <__assert_fail@plt+0x1458>
   11f40:	ldr	r1, [pc, #48]	; 11f78 <__assert_fail@plt+0x145c>
   11f44:	add	r3, pc, r3
   11f48:	ldr	r1, [r3, r1]
   11f4c:	ldr	r1, [r1]
   11f50:	cmp	r1, r0
   11f54:	beq	11f70 <__assert_fail@plt+0x1454>
   11f58:	ldr	r1, [pc, #28]	; 11f7c <__assert_fail@plt+0x1460>
   11f5c:	ldr	r3, [r3, r1]
   11f60:	ldr	r3, [r3]
   11f64:	cmp	r3, r0
   11f68:	beq	11f70 <__assert_fail@plt+0x1454>
   11f6c:	b	10ab0 <fclose@plt>
   11f70:	bx	lr
   11f74:	strheq	r6, [r1], -r4
   11f78:	andeq	r0, r0, r4, ror #1
   11f7c:	strdeq	r0, [r0], -r4
   11f80:	push	{lr}		; (str lr, [sp, #-4]!)
   11f84:	sub	sp, sp, #92	; 0x5c
   11f88:	mov	r1, r0
   11f8c:	mov	r2, sp
   11f90:	mov	r0, #3
   11f94:	bl	10a08 <__xstat@plt>
   11f98:	clz	r0, r0
   11f9c:	lsr	r0, r0, #5
   11fa0:	add	sp, sp, #92	; 0x5c
   11fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   11fa8:	ldr	r2, [pc, #56]	; 11fe8 <__assert_fail@plt+0x14cc>
   11fac:	str	r4, [sp, #-8]!
   11fb0:	add	r2, pc, r2
   11fb4:	ldrh	r3, [r2]
   11fb8:	str	lr, [sp, #4]
   11fbc:	add	r3, r3, #1
   11fc0:	sxth	r3, r3
   11fc4:	mov	r0, r3
   11fc8:	strh	r3, [r2]
   11fcc:	bl	11de8 <__assert_fail@plt+0x12cc>
   11fd0:	mov	r4, r0
   11fd4:	bl	109f0 <unlink@plt>
   11fd8:	mov	r0, r4
   11fdc:	ldr	r4, [sp]
   11fe0:	add	sp, sp, #4
   11fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   11fe8:	andeq	r8, r1, ip, lsr #2
   11fec:	str	r4, [sp, #-8]!
   11ff0:	mov	r4, r0
   11ff4:	str	lr, [sp, #4]
   11ff8:	bl	10a8c <strlen@plt>
   11ffc:	uxth	r0, r0
   12000:	sub	r3, r0, #1
   12004:	sxth	r3, r3
   12008:	cmp	r3, #0
   1200c:	blt	1204c <__assert_fail@plt+0x1530>
   12010:	ldrb	r2, [r4, r3]
   12014:	cmp	r2, #47	; 0x2f
   12018:	beq	1204c <__assert_fail@plt+0x1530>
   1201c:	sub	r0, r0, #2
   12020:	sxth	r3, r0
   12024:	add	r2, r3, #1
   12028:	add	r2, r4, r2
   1202c:	b	12040 <__assert_fail@plt+0x1524>
   12030:	ldrb	r0, [r2, #-1]!
   12034:	cmp	r0, #47	; 0x2f
   12038:	beq	1204c <__assert_fail@plt+0x1530>
   1203c:	mov	r3, r1
   12040:	tst	r3, #32768	; 0x8000
   12044:	sub	r1, r3, #1
   12048:	beq	12030 <__assert_fail@plt+0x1514>
   1204c:	add	r0, r3, #1
   12050:	add	r0, r4, r0
   12054:	ldr	r4, [sp]
   12058:	add	sp, sp, #4
   1205c:	pop	{pc}		; (ldr pc, [sp], #4)
   12060:	mov	r0, #0
   12064:	str	r4, [sp, #-8]!
   12068:	str	lr, [sp, #4]
   1206c:	bl	11e5c <__assert_fail@plt+0x1340>
   12070:	ldr	r2, [pc, #80]	; 120c8 <__assert_fail@plt+0x15ac>
   12074:	str	r4, [sp, #-8]!
   12078:	ldr	r1, [pc, #76]	; 120cc <__assert_fail@plt+0x15b0>
   1207c:	str	lr, [sp, #4]
   12080:	add	r2, pc, r2
   12084:	ldr	r1, [r2, r1]
   12088:	ldr	r1, [r1]
   1208c:	cmp	r1, #0
   12090:	beq	1209c <__assert_fail@plt+0x1580>
   12094:	blx	r1
   12098:	bl	12060 <__assert_fail@plt+0x1544>
   1209c:	mov	r3, r0
   120a0:	ldr	ip, [pc, #40]	; 120d0 <__assert_fail@plt+0x15b4>
   120a4:	ldr	r0, [pc, #40]	; 120d4 <__assert_fail@plt+0x15b8>
   120a8:	ldr	r1, [pc, #40]	; 120d8 <__assert_fail@plt+0x15bc>
   120ac:	ldr	ip, [r2, ip]
   120b0:	ldr	r0, [r2, r0]
   120b4:	add	r1, pc, r1
   120b8:	ldr	r2, [ip]
   120bc:	ldr	r0, [r0]
   120c0:	bl	10a98 <fprintf@plt>
   120c4:	b	12098 <__assert_fail@plt+0x157c>
   120c8:	andeq	r5, r1, r8, ror pc
   120cc:	strheq	r0, [r0], -r4
   120d0:	ldrdeq	r0, [r0], -r4
   120d4:	andeq	r0, r0, r0, asr #1
   120d8:	andeq	r2, r0, r0, lsr #11

000120dc <error@@Base>:
   120dc:	str	r4, [sp, #-8]!
   120e0:	mov	r3, r0
   120e4:	ldr	r4, [pc, #56]	; 12124 <error@@Base+0x48>
   120e8:	str	lr, [sp, #4]
   120ec:	ldr	r0, [pc, #52]	; 12128 <error@@Base+0x4c>
   120f0:	ldr	r2, [pc, #52]	; 1212c <error@@Base+0x50>
   120f4:	add	r4, pc, r4
   120f8:	ldr	r1, [pc, #48]	; 12130 <error@@Base+0x54>
   120fc:	ldr	ip, [r4, r0]
   12100:	ldr	r0, [r4, r2]
   12104:	add	r1, pc, r1
   12108:	ldr	r2, [ip]
   1210c:	ldr	r0, [r0]
   12110:	bl	10a98 <fprintf@plt>
   12114:	ldr	r3, [pc, #24]	; 12134 <error@@Base+0x58>
   12118:	ldr	r3, [r4, r3]
   1211c:	ldr	r0, [r3]
   12120:	bl	11e5c <__assert_fail@plt+0x1340>
   12124:	andeq	r5, r1, r4, lsl #30
   12128:	ldrdeq	r0, [r0], -r4
   1212c:	andeq	r0, r0, r0, asr #1
   12130:	andeq	r2, r0, r0, ror #10
   12134:	strdeq	r0, [r0], -ip
   12138:	str	r4, [sp, #-8]!
   1213c:	str	lr, [sp, #4]
   12140:	bl	10978 <calloc@plt>
   12144:	cmp	r0, #0
   12148:	beq	12158 <error@@Base+0x7c>
   1214c:	ldr	r4, [sp]
   12150:	add	sp, sp, #4
   12154:	pop	{pc}		; (ldr pc, [sp], #4)
   12158:	ldr	r0, [pc, #4]	; 12164 <error@@Base+0x88>
   1215c:	add	r0, pc, r0
   12160:	bl	120dc <error@@Base>
   12164:	andeq	r2, r0, r0, lsl r5
   12168:	ldr	r3, [pc, #40]	; 12198 <error@@Base+0xbc>
   1216c:	add	r3, pc, r3
   12170:	ldrb	r2, [r3, #2]
   12174:	cmp	r2, #0
   12178:	bxne	lr
   1217c:	ldr	r0, [pc, #24]	; 1219c <error@@Base+0xc0>
   12180:	mov	r2, #1
   12184:	str	r4, [sp, #-8]!
   12188:	str	lr, [sp, #4]
   1218c:	strb	r2, [r3, #2]
   12190:	add	r0, pc, r0
   12194:	bl	120dc <error@@Base>
   12198:	andeq	r7, r1, r0, ror pc
   1219c:	strdeq	r2, [r0], -r8
   121a0:	ldr	r4, [pc, #68]	; 121ec <error@@Base+0x110>
   121a4:	mov	r3, r0
   121a8:	push	{lr}		; (str lr, [sp, #-4]!)
   121ac:	sub	sp, sp, #12
   121b0:	ldr	r0, [pc, #56]	; 121f0 <error@@Base+0x114>
   121b4:	ldr	r2, [pc, #56]	; 121f4 <error@@Base+0x118>
   121b8:	add	r4, pc, r4
   121bc:	ldr	ip, [r4, r0]
   121c0:	ldr	r0, [r4, r2]
   121c4:	str	r1, [sp]
   121c8:	ldr	r1, [pc, #40]	; 121f8 <error@@Base+0x11c>
   121cc:	ldr	r2, [ip]
   121d0:	ldr	r0, [r0]
   121d4:	add	r1, pc, r1
   121d8:	bl	10a98 <fprintf@plt>
   121dc:	ldr	r3, [pc, #24]	; 121fc <error@@Base+0x120>
   121e0:	ldr	r3, [r4, r3]
   121e4:	ldr	r0, [r3]
   121e8:	bl	11e5c <__assert_fail@plt+0x1340>
   121ec:	andeq	r5, r1, r0, asr #28
   121f0:	ldrdeq	r0, [r0], -r4
   121f4:	andeq	r0, r0, r0, asr #1
   121f8:	andeq	r2, r0, r4, asr #9
   121fc:	strdeq	r0, [r0], -ip
   12200:	ldr	ip, [pc, #164]	; 122ac <error@@Base+0x1d0>
   12204:	subs	r2, r0, #0
   12208:	strd	r4, [sp, #-16]!
   1220c:	mov	r4, r1
   12210:	str	r6, [sp, #8]
   12214:	str	lr, [sp, #12]
   12218:	add	ip, pc, ip
   1221c:	beq	1225c <error@@Base+0x180>
   12220:	mov	r5, r2
   12224:	bl	1099c <fopen@plt>
   12228:	cmp	r0, #0
   1222c:	beq	12240 <error@@Base+0x164>
   12230:	ldrd	r4, [sp]
   12234:	ldr	r6, [sp, #8]
   12238:	add	sp, sp, #12
   1223c:	pop	{pc}		; (ldr pc, [sp], #4)
   12240:	ldrb	r3, [r4]
   12244:	mov	r1, r5
   12248:	cmp	r3, #119	; 0x77
   1224c:	beq	12284 <error@@Base+0x1a8>
   12250:	ldr	r0, [pc, #88]	; 122b0 <error@@Base+0x1d4>
   12254:	add	r0, pc, r0
   12258:	bl	121a0 <error@@Base+0xc4>
   1225c:	ldrb	r3, [r1]
   12260:	cmp	r3, #114	; 0x72
   12264:	beq	12290 <error@@Base+0x1b4>
   12268:	ldr	r3, [pc, #68]	; 122b4 <error@@Base+0x1d8>
   1226c:	ldrd	r4, [sp]
   12270:	ldr	r6, [sp, #8]
   12274:	add	sp, sp, #12
   12278:	ldr	r3, [ip, r3]
   1227c:	ldr	r0, [r3]
   12280:	pop	{pc}		; (ldr pc, [sp], #4)
   12284:	ldr	r0, [pc, #44]	; 122b8 <error@@Base+0x1dc>
   12288:	add	r0, pc, r0
   1228c:	bl	121a0 <error@@Base+0xc4>
   12290:	ldr	r3, [pc, #36]	; 122bc <error@@Base+0x1e0>
   12294:	ldrd	r4, [sp]
   12298:	ldr	r6, [sp, #8]
   1229c:	add	sp, sp, #12
   122a0:	ldr	r3, [ip, r3]
   122a4:	ldr	r0, [r3]
   122a8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ac:	andeq	r5, r1, r0, ror #27
   122b0:	andeq	r2, r0, ip, ror #8
   122b4:	strdeq	r0, [r0], -r4
   122b8:	andeq	r2, r0, r0, lsr #8
   122bc:	andeq	r0, r0, r4, ror #1
   122c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   122c4:	strd	r6, [sp, #8]
   122c8:	mov	r6, r0
   122cc:	strd	r8, [sp, #16]
   122d0:	mov	r9, r1
   122d4:	mov	r8, r3
   122d8:	strd	sl, [sp, #24]
   122dc:	str	lr, [sp, #32]
   122e0:	sub	sp, sp, #20
   122e4:	ldr	r5, [pc, #600]	; 12544 <error@@Base+0x468>
   122e8:	str	r0, [sp]
   122ec:	ldr	r0, [r1]
   122f0:	str	r2, [sp, #12]
   122f4:	bl	11fec <__assert_fail@plt+0x14d0>
   122f8:	ldr	r3, [pc, #584]	; 12548 <error@@Base+0x46c>
   122fc:	add	r5, pc, r5
   12300:	ldr	r4, [pc, #580]	; 1254c <error@@Base+0x470>
   12304:	ldr	r3, [r5, r3]
   12308:	add	r4, pc, r4
   1230c:	mov	r1, r4
   12310:	str	r0, [r3]
   12314:	mov	r0, #2
   12318:	bl	10a50 <__sysv_signal@plt>
   1231c:	mov	r1, r4
   12320:	mov	r0, #15
   12324:	bl	10a50 <__sysv_signal@plt>
   12328:	ldr	sl, [r6]
   1232c:	cmp	sl, #1
   12330:	beq	12508 <error@@Base+0x42c>
   12334:	movle	r6, #0
   12338:	ble	12490 <error@@Base+0x3b4>
   1233c:	ldr	r3, [pc, #524]	; 12550 <error@@Base+0x474>
   12340:	mov	r7, #1
   12344:	mov	r6, #0
   12348:	mov	r4, r7
   1234c:	add	r3, pc, r3
   12350:	str	r3, [sp, #8]
   12354:	mov	r3, sl
   12358:	mov	sl, r9
   1235c:	b	12380 <error@@Base+0x2a4>
   12360:	add	r4, r4, #1
   12364:	add	r2, r6, #1
   12368:	str	r5, [sl, r6, lsl #2]
   1236c:	sxth	r4, r4
   12370:	sxth	r6, r2
   12374:	cmp	r4, r3
   12378:	mov	r7, r4
   1237c:	bge	12490 <error@@Base+0x3b4>
   12380:	ldr	r5, [sl, r4, lsl #2]
   12384:	lsl	r9, r4, #2
   12388:	ldrb	r2, [r5]
   1238c:	cmp	r2, #45	; 0x2d
   12390:	bne	12360 <error@@Base+0x284>
   12394:	ldrb	fp, [r5, #1]
   12398:	cmp	fp, #0
   1239c:	beq	12360 <error@@Base+0x284>
   123a0:	mov	r0, r5
   123a4:	str	r3, [sp, #4]
   123a8:	bl	10a8c <strlen@plt>
   123ac:	mov	r2, r0
   123b0:	mov	r1, r5
   123b4:	ldr	r0, [sp, #8]
   123b8:	bl	10af8 <strncmp@plt>
   123bc:	cmp	r0, #0
   123c0:	beq	1251c <error@@Base+0x440>
   123c4:	ldr	r3, [sp, #4]
   123c8:	add	r7, r7, #1
   123cc:	cmp	r7, r3
   123d0:	addlt	r9, sl, r9
   123d4:	movge	r0, #0
   123d8:	ldrlt	r0, [r9, #4]
   123dc:	cmp	r8, #0
   123e0:	beq	12424 <error@@Base+0x348>
   123e4:	ldrb	r2, [r8]
   123e8:	cmp	r2, #0
   123ec:	beq	12424 <error@@Base+0x348>
   123f0:	cmp	fp, r2
   123f4:	beq	12434 <error@@Base+0x358>
   123f8:	mov	r2, #0
   123fc:	b	12408 <error@@Base+0x32c>
   12400:	cmp	fp, ip
   12404:	beq	12438 <error@@Base+0x35c>
   12408:	add	r2, r2, #1
   1240c:	sxth	r2, r2
   12410:	add	r1, r2, r2, lsl #1
   12414:	ldrb	ip, [r8, r1, lsl #2]
   12418:	add	r1, r8, r1, lsl #2
   1241c:	cmp	ip, #0
   12420:	bne	12400 <error@@Base+0x324>
   12424:	ldr	r0, [pc, #296]	; 12554 <error@@Base+0x478>
   12428:	mov	r1, r5
   1242c:	add	r0, pc, r0
   12430:	bl	121a0 <error@@Base+0xc4>
   12434:	mov	r1, r8
   12438:	ldr	r2, [r1, #4]
   1243c:	cmp	r2, #0
   12440:	beq	124c8 <error@@Base+0x3ec>
   12444:	ldrb	ip, [r5, #2]
   12448:	cmp	ip, #0
   1244c:	bne	124b4 <error@@Base+0x3d8>
   12450:	cmp	r0, #0
   12454:	beq	12524 <error@@Base+0x448>
   12458:	ldr	r1, [r2]
   1245c:	cmp	r1, #0
   12460:	bne	12534 <error@@Base+0x458>
   12464:	str	r0, [r2]
   12468:	uxth	r2, r4
   1246c:	ldrb	r1, [r5, #2]
   12470:	add	r4, r2, #1
   12474:	sxth	r4, r4
   12478:	cmp	r1, #0
   1247c:	addeq	r4, r2, #2
   12480:	sxtheq	r4, r4
   12484:	cmp	r4, r3
   12488:	mov	r7, r4
   1248c:	blt	12380 <error@@Base+0x2a4>
   12490:	ldr	r3, [sp]
   12494:	str	r6, [r3]
   12498:	add	sp, sp, #20
   1249c:	ldrd	r4, [sp]
   124a0:	ldrd	r6, [sp, #8]
   124a4:	ldrd	r8, [sp, #16]
   124a8:	ldrd	sl, [sp, #24]
   124ac:	add	sp, sp, #32
   124b0:	pop	{pc}		; (ldr pc, [sp], #4)
   124b4:	ldr	r1, [r2]
   124b8:	cmp	r1, #0
   124bc:	bne	12534 <error@@Base+0x458>
   124c0:	add	r0, r5, #2
   124c4:	b	12464 <error@@Base+0x388>
   124c8:	ldr	r3, [r1, #8]
   124cc:	cmp	r3, #0
   124d0:	beq	12424 <error@@Base+0x348>
   124d4:	ldrb	r2, [r5, #2]
   124d8:	cmp	r2, #0
   124dc:	bne	12424 <error@@Base+0x348>
   124e0:	ldrb	r2, [r3]
   124e4:	cmp	r2, #0
   124e8:	bne	12534 <error@@Base+0x458>
   124ec:	mov	r2, #1
   124f0:	add	r4, r4, #1
   124f4:	sxth	r4, r4
   124f8:	strb	r2, [r3]
   124fc:	ldr	r3, [sp]
   12500:	ldr	r3, [r3]
   12504:	b	12374 <error@@Base+0x298>
   12508:	ldr	r3, [pc, #72]	; 12558 <error@@Base+0x47c>
   1250c:	ldr	r3, [r5, r3]
   12510:	ldrb	r6, [r3]
   12514:	cmp	r6, #0
   12518:	beq	12490 <error@@Base+0x3b4>
   1251c:	ldr	r0, [sp, #12]
   12520:	bl	12070 <__assert_fail@plt+0x1554>
   12524:	ldr	r3, [r1, #8]
   12528:	cmp	r3, #0
   1252c:	bne	124e0 <error@@Base+0x404>
   12530:	b	12424 <error@@Base+0x348>
   12534:	ldr	r0, [pc, #32]	; 1255c <error@@Base+0x480>
   12538:	mov	r1, r5
   1253c:	add	r0, pc, r0
   12540:	bl	121a0 <error@@Base+0xc4>
   12544:	strdeq	r5, [r1], -ip
   12548:	ldrdeq	r0, [r0], -r4
   1254c:			; <UNDEFINED> instruction: 0xfffffe58
   12550:	andeq	r2, r0, r8, lsl #7
   12554:			; <UNDEFINED> instruction: 0x000022b0
   12558:	andeq	r0, r0, r0, lsr #1
   1255c:			; <UNDEFINED> instruction: 0x000021b0
   12560:	ldr	r2, [pc, #60]	; 125a4 <error@@Base+0x4c8>
   12564:	mov	r3, r0
   12568:	push	{lr}		; (str lr, [sp, #-4]!)
   1256c:	sub	sp, sp, #12
   12570:	ldr	ip, [pc, #48]	; 125a8 <error@@Base+0x4cc>
   12574:	ldr	r0, [pc, #48]	; 125ac <error@@Base+0x4d0>
   12578:	add	r2, pc, r2
   1257c:	ldr	ip, [r2, ip]
   12580:	ldr	r0, [r2, r0]
   12584:	str	r1, [sp]
   12588:	ldr	r1, [pc, #32]	; 125b0 <error@@Base+0x4d4>
   1258c:	ldr	r2, [ip]
   12590:	ldr	r0, [r0]
   12594:	add	r1, pc, r1
   12598:	bl	10a98 <fprintf@plt>
   1259c:	add	sp, sp, #12
   125a0:	pop	{pc}		; (ldr pc, [sp], #4)
   125a4:	andeq	r5, r1, r0, lsl #21
   125a8:	ldrdeq	r0, [r0], -r4
   125ac:	andeq	r0, r0, r0, asr #1
   125b0:	andeq	r2, r0, r4, lsl #2
   125b4:	andeq	r0, r0, r0
   125b8:	strd	r4, [sp, #-16]!
   125bc:	mov	r2, r0
   125c0:	mov	r5, r1
   125c4:	ldr	r4, [pc, #76]	; 12618 <error@@Base+0x53c>
   125c8:	mov	r1, #99	; 0x63
   125cc:	str	r6, [sp, #8]
   125d0:	str	lr, [sp, #12]
   125d4:	add	r4, pc, r4
   125d8:	mov	r0, r4
   125dc:	bl	109c0 <fgets@plt>
   125e0:	cmp	r0, #0
   125e4:	beq	12608 <error@@Base+0x52c>
   125e8:	ldr	r1, [pc, #44]	; 1261c <error@@Base+0x540>
   125ec:	mov	r2, r5
   125f0:	mov	r0, r4
   125f4:	add	r1, pc, r1
   125f8:	bl	10aa4 <__isoc99_sscanf@plt>
   125fc:	sub	r0, r0, #1
   12600:	clz	r0, r0
   12604:	lsr	r0, r0, #5
   12608:	ldrd	r4, [sp]
   1260c:	ldr	r6, [sp, #8]
   12610:	add	sp, sp, #12
   12614:	pop	{pc}		; (ldr pc, [sp], #4)
   12618:	andeq	r7, r1, ip, lsl #22
   1261c:	andeq	r2, r0, r0, lsl r1
   12620:	strd	r4, [sp, #-16]!
   12624:	mov	r5, r1
   12628:	mov	r1, #99	; 0x63
   1262c:	ldr	r4, [pc, #84]	; 12688 <error@@Base+0x5ac>
   12630:	str	r6, [sp, #8]
   12634:	mov	r6, r2
   12638:	mov	r2, r0
   1263c:	str	lr, [sp, #12]
   12640:	add	r4, pc, r4
   12644:	mov	r0, r4
   12648:	bl	109c0 <fgets@plt>
   1264c:	cmp	r0, #0
   12650:	beq	12678 <error@@Base+0x59c>
   12654:	ldr	r1, [pc, #48]	; 1268c <error@@Base+0x5b0>
   12658:	mov	r3, r6
   1265c:	mov	r2, r5
   12660:	mov	r0, r4
   12664:	add	r1, pc, r1
   12668:	bl	10aa4 <__isoc99_sscanf@plt>
   1266c:	sub	r0, r0, #2
   12670:	clz	r0, r0
   12674:	lsr	r0, r0, #5
   12678:	ldrd	r4, [sp]
   1267c:	ldr	r6, [sp, #8]
   12680:	add	sp, sp, #12
   12684:	pop	{pc}		; (ldr pc, [sp], #4)
   12688:	andeq	r7, r1, r0, lsr #21
   1268c:	muleq	r0, ip, r0
   12690:	ldr	r0, [r0, #8]
   12694:	ldr	r1, [r1, #8]
   12698:	b	11ee4 <__assert_fail@plt+0x13c8>
   1269c:	subs	ip, r1, #0
   126a0:	mov	r3, r0
   126a4:	bne	126bc <error@@Base+0x5e0>
   126a8:	ldr	r0, [pc, #72]	; 126f8 <error@@Base+0x61c>
   126ac:	mov	r2, #8
   126b0:	mov	r1, #1
   126b4:	add	r0, pc, r0
   126b8:	b	10a14 <fwrite@plt>
   126bc:	ldr	r3, [r2]
   126c0:	vmov	s15, ip
   126c4:	vldr	d5, [pc, #36]	; 126f0 <error@@Base+0x614>
   126c8:	ldr	r1, [pc, #44]	; 126fc <error@@Base+0x620>
   126cc:	sub	r3, ip, r3
   126d0:	vmov	s14, r3
   126d4:	add	r1, pc, r1
   126d8:	vcvt.f64.s32	d6, s15
   126dc:	vcvt.f64.s32	d7, s14
   126e0:	vmul.f64	d7, d7, d5
   126e4:	vdiv.f64	d7, d7, d6
   126e8:	vmov	r2, r3, d7
   126ec:	b	10a98 <fprintf@plt>
   126f0:	andeq	r0, r0, r0
   126f4:	subsmi	r0, r9, r0
   126f8:	andeq	r2, r0, r4, asr r0
   126fc:	andeq	r2, r0, r0, asr #32
   12700:	strd	r4, [sp, #-16]!
   12704:	subs	r4, r1, #0
   12708:	mov	r5, r0
   1270c:	str	r6, [sp, #8]
   12710:	str	lr, [sp, #12]
   12714:	beq	12760 <error@@Base+0x684>
   12718:	ldr	r1, [pc, #92]	; 1277c <error@@Base+0x6a0>
   1271c:	ldrd	r2, [r4]
   12720:	add	r1, pc, r1
   12724:	bl	10a98 <fprintf@plt>
   12728:	mov	r2, r4
   1272c:	mov	r0, r5
   12730:	ldr	r1, [r2], #4
   12734:	bl	1269c <error@@Base+0x5c0>
   12738:	ldr	r0, [pc, #64]	; 12780 <error@@Base+0x6a4>
   1273c:	mov	r3, r5
   12740:	mov	r2, #3
   12744:	mov	r1, #1
   12748:	ldrd	r4, [sp]
   1274c:	ldr	r6, [sp, #8]
   12750:	add	r0, pc, r0
   12754:	ldr	lr, [sp, #12]
   12758:	add	sp, sp, #16
   1275c:	b	10a14 <fwrite@plt>
   12760:	mov	r3, r0
   12764:	ldr	r0, [pc, #24]	; 12784 <error@@Base+0x6a8>
   12768:	mov	r2, #26
   1276c:	mov	r1, #1
   12770:	add	r0, pc, r0
   12774:	bl	10a14 <fwrite@plt>
   12778:	b	12738 <error@@Base+0x65c>
   1277c:	strdeq	r1, [r0], -ip
   12780:	strdeq	r1, [r0], -r4
   12784:			; <UNDEFINED> instruction: 0x00001fb8
   12788:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1278c:	mov	r5, r1
   12790:	ldr	r1, [pc, #340]	; 128ec <error@@Base+0x810>
   12794:	strd	r6, [sp, #8]
   12798:	mov	r6, r0
   1279c:	strd	r8, [sp, #16]
   127a0:	mov	r9, r2
   127a4:	mov	r2, r3
   127a8:	strd	sl, [sp, #24]
   127ac:	str	lr, [sp, #32]
   127b0:	sub	sp, sp, #4
   127b4:	ldrb	r8, [sp, #40]	; 0x28
   127b8:	add	r1, pc, r1
   127bc:	ldrb	sl, [sp, #44]	; 0x2c
   127c0:	bl	10a98 <fprintf@plt>
   127c4:	mov	r0, r6
   127c8:	mov	r1, #0
   127cc:	bl	12700 <error@@Base+0x624>
   127d0:	cmp	r8, #0
   127d4:	bne	1287c <error@@Base+0x7a0>
   127d8:	ldr	r2, [pc, #272]	; 128f0 <error@@Base+0x814>
   127dc:	add	r2, pc, r2
   127e0:	ldr	r1, [pc, #268]	; 128f4 <error@@Base+0x818>
   127e4:	sub	fp, r9, #1
   127e8:	mov	r0, r6
   127ec:	uxth	fp, fp
   127f0:	mov	r4, #1
   127f4:	ldr	r7, [pc, #252]	; 128f8 <error@@Base+0x81c>
   127f8:	add	fp, fp, #2
   127fc:	add	r1, pc, r1
   12800:	bl	10a98 <fprintf@plt>
   12804:	add	r7, pc, r7
   12808:	ldr	r3, [r5, r4, lsl #3]
   1280c:	mov	r0, r6
   12810:	add	r1, r5, r4, lsl #3
   12814:	cmp	r3, #0
   12818:	ble	12830 <error@@Base+0x754>
   1281c:	bl	12700 <error@@Base+0x624>
   12820:	mov	r2, r4
   12824:	mov	r1, r7
   12828:	mov	r0, r6
   1282c:	bl	10a98 <fprintf@plt>
   12830:	add	r4, r4, #1
   12834:	cmp	fp, r4
   12838:	bne	12808 <error@@Base+0x72c>
   1283c:	cmp	r8, #0
   12840:	beq	12858 <error@@Base+0x77c>
   12844:	add	r1, r9, #1
   12848:	ldr	r3, [r5, r1, lsl #3]
   1284c:	add	r1, r5, r1, lsl #3
   12850:	cmp	r3, #0
   12854:	bgt	12888 <error@@Base+0x7ac>
   12858:	cmp	sl, #0
   1285c:	bne	128ac <error@@Base+0x7d0>
   12860:	add	sp, sp, #4
   12864:	ldrd	r4, [sp]
   12868:	ldrd	r6, [sp, #8]
   1286c:	ldrd	r8, [sp, #16]
   12870:	ldrd	sl, [sp, #24]
   12874:	add	sp, sp, #32
   12878:	pop	{pc}		; (ldr pc, [sp], #4)
   1287c:	ldr	r2, [pc, #120]	; 128fc <error@@Base+0x820>
   12880:	add	r2, pc, r2
   12884:	b	127e0 <error@@Base+0x704>
   12888:	mov	r0, r6
   1288c:	bl	12700 <error@@Base+0x624>
   12890:	ldr	r1, [pc, #104]	; 12900 <error@@Base+0x824>
   12894:	mov	r2, r9
   12898:	mov	r0, r6
   1289c:	add	r1, pc, r1
   128a0:	bl	10a98 <fprintf@plt>
   128a4:	cmp	sl, #0
   128a8:	beq	12860 <error@@Base+0x784>
   128ac:	mov	r1, r5
   128b0:	mov	r0, r6
   128b4:	bl	12700 <error@@Base+0x624>
   128b8:	ldr	r0, [pc, #68]	; 12904 <error@@Base+0x828>
   128bc:	mov	r3, r6
   128c0:	mov	r2, #7
   128c4:	mov	r1, #1
   128c8:	add	r0, pc, r0
   128cc:	add	sp, sp, #4
   128d0:	ldrd	r4, [sp]
   128d4:	ldrd	r6, [sp, #8]
   128d8:	ldrd	r8, [sp, #16]
   128dc:	ldrd	sl, [sp, #24]
   128e0:	ldr	lr, [sp, #32]
   128e4:	add	sp, sp, #36	; 0x24
   128e8:	b	10a14 <fwrite@plt>
   128ec:	andeq	r1, r0, r0, lsr #31
   128f0:	andeq	r1, r0, r4, ror pc
   128f4:	andeq	r1, r0, ip, ror #28
   128f8:	andeq	r1, r0, ip, asr pc
   128fc:	andeq	r1, r0, r8, asr #29
   12900:	ldrdeq	r1, [r0], -r0
   12904:			; <UNDEFINED> instruction: 0x00001eb0
   12908:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1290c:	add	r5, r1, #4096	; 0x1000
   12910:	mov	r4, r2
   12914:	strd	r6, [sp, #8]
   12918:	mov	r6, r0
   1291c:	mov	r0, r1
   12920:	str	r8, [sp, #16]
   12924:	str	lr, [sp, #20]
   12928:	bl	11cdc <__assert_fail@plt+0x11c0>
   1292c:	ldr	r2, [pc, #160]	; 129d4 <error@@Base+0x8f8>
   12930:	ldr	r1, [r5, #3952]	; 0xf70
   12934:	ldr	r0, [r5, #3956]	; 0xf74
   12938:	add	r2, pc, r2
   1293c:	bl	1424c <error@@Base+0x2170>
   12940:	ldr	r1, [pc, #144]	; 129d8 <error@@Base+0x8fc>
   12944:	mov	r2, r4
   12948:	mov	r0, r6
   1294c:	add	r1, pc, r1
   12950:	bl	10a98 <fprintf@plt>
   12954:	mov	r0, r6
   12958:	mov	r1, #0
   1295c:	bl	12700 <error@@Base+0x624>
   12960:	mov	r1, r6
   12964:	mov	r0, #10
   12968:	bl	10ac8 <fputc@plt>
   1296c:	ldr	r3, [r5, #3956]	; 0xf74
   12970:	cmp	r3, #0
   12974:	ble	129c0 <error@@Base+0x8e4>
   12978:	ldr	r7, [pc, #92]	; 129dc <error@@Base+0x900>
   1297c:	mov	r4, #0
   12980:	add	r7, pc, r7
   12984:	ldr	r3, [r5, #3952]	; 0xf70
   12988:	mov	r0, r6
   1298c:	ldr	r1, [r3, r4, lsl #2]
   12990:	add	r1, r1, #12
   12994:	bl	12700 <error@@Base+0x624>
   12998:	ldr	r3, [r5, #3952]	; 0xf70
   1299c:	mov	r1, r7
   129a0:	mov	r0, r6
   129a4:	ldr	r3, [r3, r4, lsl #2]
   129a8:	add	r4, r4, #1
   129ac:	ldr	r2, [r3, #8]
   129b0:	bl	10a98 <fprintf@plt>
   129b4:	ldr	r3, [r5, #3956]	; 0xf74
   129b8:	cmp	r3, r4
   129bc:	bgt	12984 <error@@Base+0x8a8>
   129c0:	ldrd	r4, [sp]
   129c4:	ldrd	r6, [sp, #8]
   129c8:	ldr	r8, [sp, #16]
   129cc:	add	sp, sp, #20
   129d0:	pop	{pc}		; (ldr pc, [sp], #4)
   129d4:			; <UNDEFINED> instruction: 0xfffffd50
   129d8:	andeq	r1, r0, ip, lsl #28
   129dc:	andeq	r1, r0, r8, ror #25
   129e0:	ldr	ip, [r0]
   129e4:	ldr	r3, [r0, #4]
   129e8:	add	r1, ip, r1
   129ec:	add	r2, r3, r2
   129f0:	stm	r0, {r1, r2}
   129f4:	bx	lr
   129f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   129fc:	mov	r2, r0
   12a00:	mov	r5, r0
   12a04:	ldr	r4, [pc, #244]	; 12b00 <error@@Base+0xa24>
   12a08:	strd	r6, [sp, #8]
   12a0c:	mov	r6, r1
   12a10:	mov	r1, #99	; 0x63
   12a14:	strd	r8, [sp, #16]
   12a18:	str	sl, [sp, #24]
   12a1c:	str	lr, [sp, #28]
   12a20:	sub	sp, sp, #8
   12a24:	add	r4, pc, r4
   12a28:	mov	r0, r4
   12a2c:	bl	109c0 <fgets@plt>
   12a30:	cmp	r0, #0
   12a34:	beq	12adc <error@@Base+0xa00>
   12a38:	mov	r0, r4
   12a3c:	mov	r2, r5
   12a40:	mov	r1, #99	; 0x63
   12a44:	bl	109c0 <fgets@plt>
   12a48:	cmp	r0, #0
   12a4c:	beq	12adc <error@@Base+0xa00>
   12a50:	ldr	r4, [pc, #172]	; 12b04 <error@@Base+0xa28>
   12a54:	mov	sl, #0
   12a58:	add	r8, sp, #4
   12a5c:	mov	r7, sp
   12a60:	ldr	r9, [pc, #160]	; 12b08 <error@@Base+0xa2c>
   12a64:	add	r4, pc, r4
   12a68:	add	r4, r4, #29
   12a6c:	add	r9, pc, r9
   12a70:	b	12a88 <error@@Base+0x9ac>
   12a74:	ldr	r1, [sp]
   12a78:	add	r3, r6, r3, lsl #3
   12a7c:	mov	r0, r3
   12a80:	ldr	r2, [sp, #4]
   12a84:	bl	129e0 <error@@Base+0x904>
   12a88:	mov	r2, r8
   12a8c:	mov	r1, r7
   12a90:	mov	r0, r5
   12a94:	bl	12620 <error@@Base+0x544>
   12a98:	mov	r1, #0
   12a9c:	mov	r2, #10
   12aa0:	cmp	r0, r1
   12aa4:	mov	r0, r4
   12aa8:	beq	12ae0 <error@@Base+0xa04>
   12aac:	bl	10990 <strtol@plt>
   12ab0:	subs	r3, r0, #0
   12ab4:	mov	r1, r9
   12ab8:	mov	r0, r4
   12abc:	bne	12a74 <error@@Base+0x998>
   12ac0:	bl	10984 <strcmp@plt>
   12ac4:	ldr	r1, [sp]
   12ac8:	cmp	r0, #0
   12acc:	mov	r3, r6
   12ad0:	addne	r3, r6, #88	; 0x58
   12ad4:	moveq	sl, r1
   12ad8:	b	12a7c <error@@Base+0x9a0>
   12adc:	mov	sl, #0
   12ae0:	mov	r0, sl
   12ae4:	add	sp, sp, #8
   12ae8:	ldrd	r4, [sp]
   12aec:	ldrd	r6, [sp, #8]
   12af0:	ldrd	r8, [sp, #16]
   12af4:	ldr	sl, [sp, #24]
   12af8:	add	sp, sp, #28
   12afc:	pop	{pc}		; (ldr pc, [sp], #4)
   12b00:			; <UNDEFINED> instruction: 0x000176bc
   12b04:	andeq	r7, r1, ip, ror r6
   12b08:	andeq	r1, r0, ip, lsl #26
   12b0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12b10:	mov	r5, r2
   12b14:	strd	r6, [sp, #8]
   12b18:	mov	r6, r3
   12b1c:	mov	r7, r0
   12b20:	str	r8, [sp, #16]
   12b24:	mov	r8, r1
   12b28:	str	lr, [sp, #20]
   12b2c:	bl	11b48 <__assert_fail@plt+0x102c>
   12b30:	subs	r4, r0, #0
   12b34:	beq	12b5c <error@@Base+0xa80>
   12b38:	mov	r2, r6
   12b3c:	mov	r1, r5
   12b40:	ldrd	r6, [sp, #8]
   12b44:	add	r0, r4, #12
   12b48:	ldrd	r4, [sp]
   12b4c:	ldr	r8, [sp, #16]
   12b50:	ldr	lr, [sp, #20]
   12b54:	add	sp, sp, #24
   12b58:	b	129e0 <error@@Base+0x904>
   12b5c:	mov	r1, #20
   12b60:	mov	r0, #1
   12b64:	bl	12138 <error@@Base+0x5c>
   12b68:	mov	r4, r0
   12b6c:	mov	r0, r8
   12b70:	bl	109d8 <strdup@plt>
   12b74:	mov	r1, r4
   12b78:	str	r0, [r4, #8]
   12b7c:	mov	r0, r7
   12b80:	bl	11bd4 <__assert_fail@plt+0x10b8>
   12b84:	b	12b38 <error@@Base+0xa5c>
   12b88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12b8c:	mov	r2, r0
   12b90:	mov	r5, r0
   12b94:	ldr	r4, [pc, #180]	; 12c50 <error@@Base+0xb74>
   12b98:	strd	r6, [sp, #8]
   12b9c:	mov	r6, r1
   12ba0:	mov	r1, #99	; 0x63
   12ba4:	strd	r8, [sp, #16]
   12ba8:	str	sl, [sp, #24]
   12bac:	str	lr, [sp, #28]
   12bb0:	sub	sp, sp, #8
   12bb4:	add	r4, pc, r4
   12bb8:	mov	r0, r4
   12bbc:	bl	109c0 <fgets@plt>
   12bc0:	cmp	r0, #0
   12bc4:	beq	12c34 <error@@Base+0xb58>
   12bc8:	mov	r0, r4
   12bcc:	mov	r2, r5
   12bd0:	mov	r1, #99	; 0x63
   12bd4:	bl	109c0 <fgets@plt>
   12bd8:	cmp	r0, #0
   12bdc:	beq	12c34 <error@@Base+0xb58>
   12be0:	ldr	r4, [pc, #108]	; 12c54 <error@@Base+0xb78>
   12be4:	add	r8, sp, #4
   12be8:	mov	r7, sp
   12bec:	mov	sl, #0
   12bf0:	add	r4, pc, r4
   12bf4:	add	r9, r4, #29
   12bf8:	b	12c18 <error@@Base+0xb3c>
   12bfc:	bl	10a8c <strlen@plt>
   12c00:	add	ip, r4, r0
   12c04:	mov	r1, r9
   12c08:	ldrd	r2, [sp]
   12c0c:	mov	r0, r6
   12c10:	strb	sl, [ip, #-1]
   12c14:	bl	12b0c <error@@Base+0xa30>
   12c18:	mov	r2, r8
   12c1c:	mov	r1, r7
   12c20:	mov	r0, r5
   12c24:	bl	12620 <error@@Base+0x544>
   12c28:	cmp	r0, #0
   12c2c:	mov	r0, r4
   12c30:	bne	12bfc <error@@Base+0xb20>
   12c34:	add	sp, sp, #8
   12c38:	ldrd	r4, [sp]
   12c3c:	ldrd	r6, [sp, #8]
   12c40:	ldrd	r8, [sp, #16]
   12c44:	ldr	sl, [sp, #24]
   12c48:	add	sp, sp, #28
   12c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c50:	andeq	r7, r1, ip, lsr #10
   12c54:	strdeq	r7, [r1], -r0
   12c58:	strd	r4, [sp, #-20]!	; 0xffffffec
   12c5c:	strd	r6, [sp, #8]
   12c60:	mov	r7, r1
   12c64:	mov	r6, r0
   12c68:	mov	r0, r1
   12c6c:	ldr	r1, [pc, #404]	; 12e08 <error@@Base+0xd2c>
   12c70:	str	lr, [sp, #16]
   12c74:	sub	sp, sp, #12
   12c78:	ldr	r5, [pc, #396]	; 12e0c <error@@Base+0xd30>
   12c7c:	add	r1, pc, r1
   12c80:	bl	12200 <error@@Base+0x124>
   12c84:	add	r5, pc, r5
   12c88:	mov	r2, r0
   12c8c:	mov	r4, r0
   12c90:	mov	r1, #99	; 0x63
   12c94:	mov	r0, r5
   12c98:	bl	109c0 <fgets@plt>
   12c9c:	cmp	r0, #0
   12ca0:	beq	12de4 <error@@Base+0xd08>
   12ca4:	ldr	r1, [pc, #356]	; 12e10 <error@@Base+0xd34>
   12ca8:	mov	r2, #45	; 0x2d
   12cac:	mov	r0, r5
   12cb0:	add	r1, pc, r1
   12cb4:	bl	10af8 <strncmp@plt>
   12cb8:	cmp	r0, #0
   12cbc:	bne	12de4 <error@@Base+0xd08>
   12cc0:	mov	r2, r4
   12cc4:	mov	r1, #99	; 0x63
   12cc8:	mov	r0, r5
   12ccc:	bl	109c0 <fgets@plt>
   12cd0:	cmp	r0, #0
   12cd4:	beq	12de4 <error@@Base+0xd08>
   12cd8:	ldr	r1, [pc, #308]	; 12e14 <error@@Base+0xd38>
   12cdc:	mov	r0, r5
   12ce0:	add	r1, pc, r1
   12ce4:	bl	10984 <strcmp@plt>
   12ce8:	cmp	r0, #0
   12cec:	bne	12de4 <error@@Base+0xd08>
   12cf0:	mov	r1, sp
   12cf4:	mov	r0, r4
   12cf8:	bl	125b8 <error@@Base+0x4dc>
   12cfc:	cmp	r0, #0
   12d00:	beq	12de4 <error@@Base+0xd08>
   12d04:	add	r1, sp, #4
   12d08:	mov	r0, r4
   12d0c:	bl	125b8 <error@@Base+0x4dc>
   12d10:	cmp	r0, #0
   12d14:	beq	12de4 <error@@Base+0xd08>
   12d18:	mov	r2, r4
   12d1c:	mov	r1, #99	; 0x63
   12d20:	mov	r0, r5
   12d24:	bl	109c0 <fgets@plt>
   12d28:	cmp	r0, #0
   12d2c:	beq	12de4 <error@@Base+0xd08>
   12d30:	mov	r0, r5
   12d34:	mov	r2, r4
   12d38:	mov	r1, #99	; 0x63
   12d3c:	bl	109c0 <fgets@plt>
   12d40:	cmp	r0, #0
   12d44:	beq	12de4 <error@@Base+0xd08>
   12d48:	mov	r0, r6
   12d4c:	ldm	sp, {r1, r2}
   12d50:	bl	129e0 <error@@Base+0x904>
   12d54:	add	r1, r6, #8
   12d58:	mov	r0, r4
   12d5c:	bl	129f8 <error@@Base+0x91c>
   12d60:	mov	r7, r0
   12d64:	add	r1, r6, #416	; 0x1a0
   12d68:	mov	r0, r4
   12d6c:	bl	129f8 <error@@Base+0x91c>
   12d70:	mov	r5, r0
   12d74:	add	r1, r6, #824	; 0x338
   12d78:	mov	r0, r4
   12d7c:	bl	129f8 <error@@Base+0x91c>
   12d80:	ldr	r3, [sp]
   12d84:	cmp	r3, #0
   12d88:	bgt	12da8 <error@@Base+0xccc>
   12d8c:	mov	r0, r4
   12d90:	bl	11f3c <__assert_fail@plt+0x1420>
   12d94:	add	sp, sp, #12
   12d98:	ldrd	r4, [sp]
   12d9c:	ldrd	r6, [sp, #8]
   12da0:	add	sp, sp, #16
   12da4:	pop	{pc}		; (ldr pc, [sp], #4)
   12da8:	add	r1, r6, #920	; 0x398
   12dac:	mov	r0, r4
   12db0:	bl	129f8 <error@@Base+0x91c>
   12db4:	cmp	r7, #0
   12db8:	ble	12dc8 <error@@Base+0xcec>
   12dbc:	add	r1, r6, #992	; 0x3e0
   12dc0:	mov	r0, r4
   12dc4:	bl	12b88 <error@@Base+0xaac>
   12dc8:	cmp	r5, #0
   12dcc:	ble	12d8c <error@@Base+0xcb0>
   12dd0:	add	r1, r6, #9024	; 0x2340
   12dd4:	mov	r0, r4
   12dd8:	add	r1, r1, #24
   12ddc:	bl	12b88 <error@@Base+0xaac>
   12de0:	b	12d8c <error@@Base+0xcb0>
   12de4:	cmp	r7, #0
   12de8:	beq	12dfc <error@@Base+0xd20>
   12dec:	ldr	r0, [pc, #36]	; 12e18 <error@@Base+0xd3c>
   12df0:	mov	r1, r7
   12df4:	add	r0, pc, r0
   12df8:	bl	121a0 <error@@Base+0xc4>
   12dfc:	ldr	r7, [pc, #24]	; 12e1c <error@@Base+0xd40>
   12e00:	add	r7, pc, r7
   12e04:	b	12dec <error@@Base+0xd10>
   12e08:			; <UNDEFINED> instruction: 0x000018b8
   12e0c:	andeq	r7, r1, ip, asr r4
   12e10:	ldrdeq	r1, [r0], -r8
   12e14:	andeq	r4, r0, r8, asr pc
   12e18:	andeq	r1, r0, r4, asr #19
   12e1c:	andeq	r1, r0, r0, lsl #19
   12e20:	mov	r3, r1
   12e24:	ldr	r1, [pc, #404]	; 12fc0 <error@@Base+0xee4>
   12e28:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12e2c:	mov	r5, r0
   12e30:	mov	r0, r3
   12e34:	strd	r6, [sp, #8]
   12e38:	mov	r7, r5
   12e3c:	mov	r6, #1
   12e40:	strd	r8, [sp, #16]
   12e44:	mov	r8, r5
   12e48:	mov	r9, #0
   12e4c:	str	lr, [sp, #24]
   12e50:	sub	sp, sp, #12
   12e54:	add	r1, pc, r1
   12e58:	bl	12200 <error@@Base+0x124>
   12e5c:	ldr	r3, [pc, #352]	; 12fc4 <error@@Base+0xee8>
   12e60:	mov	r4, r0
   12e64:	ldr	r2, [pc, #348]	; 12fc8 <error@@Base+0xeec>
   12e68:	ldr	r1, [pc, #348]	; 12fcc <error@@Base+0xef0>
   12e6c:	add	r3, pc, r3
   12e70:	add	r2, pc, r2
   12e74:	add	r1, pc, r1
   12e78:	bl	10a98 <fprintf@plt>
   12e7c:	ldr	r1, [pc, #332]	; 12fd0 <error@@Base+0xef4>
   12e80:	mov	r0, r4
   12e84:	ldr	r2, [r5]
   12e88:	add	r1, pc, r1
   12e8c:	bl	10a98 <fprintf@plt>
   12e90:	ldr	r1, [pc, #316]	; 12fd4 <error@@Base+0xef8>
   12e94:	mov	r0, r4
   12e98:	ldr	r2, [r8, #4]!
   12e9c:	add	r1, pc, r1
   12ea0:	bl	10a98 <fprintf@plt>
   12ea4:	mov	r2, r8
   12ea8:	mov	r0, r4
   12eac:	ldr	r1, [r7], #8
   12eb0:	bl	1269c <error@@Base+0x5c0>
   12eb4:	ldr	r8, [pc, #284]	; 12fd8 <error@@Base+0xefc>
   12eb8:	mov	r3, r4
   12ebc:	mov	r2, #12
   12ec0:	mov	r1, r6
   12ec4:	ldr	r0, [pc, #272]	; 12fdc <error@@Base+0xf00>
   12ec8:	add	r8, pc, r8
   12ecc:	add	r0, pc, r0
   12ed0:	bl	10a14 <fwrite@plt>
   12ed4:	mov	r1, r7
   12ed8:	mov	r0, r4
   12edc:	str	r9, [sp]
   12ee0:	mov	r3, r8
   12ee4:	mov	r2, #50	; 0x32
   12ee8:	str	r6, [sp, #4]
   12eec:	bl	12788 <error@@Base+0x6ac>
   12ef0:	ldr	r3, [pc, #232]	; 12fe0 <error@@Base+0xf04>
   12ef4:	add	r1, r5, #416	; 0x1a0
   12ef8:	mov	r0, r4
   12efc:	mov	r2, #50	; 0x32
   12f00:	str	r9, [sp]
   12f04:	str	r6, [sp, #4]
   12f08:	add	r3, pc, r3
   12f0c:	bl	12788 <error@@Base+0x6ac>
   12f10:	ldr	r3, [pc, #204]	; 12fe4 <error@@Base+0xf08>
   12f14:	add	r1, r5, #824	; 0x338
   12f18:	mov	r0, r4
   12f1c:	mov	r2, #10
   12f20:	str	r6, [sp]
   12f24:	str	r6, [sp, #4]
   12f28:	add	r3, pc, r3
   12f2c:	bl	12788 <error@@Base+0x6ac>
   12f30:	ldr	r3, [r5]
   12f34:	cmp	r3, r9
   12f38:	bgt	12f5c <error@@Base+0xe80>
   12f3c:	mov	r0, r4
   12f40:	add	sp, sp, #12
   12f44:	ldrd	r4, [sp]
   12f48:	ldrd	r6, [sp, #8]
   12f4c:	ldrd	r8, [sp, #16]
   12f50:	ldr	lr, [sp, #24]
   12f54:	add	sp, sp, #28
   12f58:	b	11f3c <__assert_fail@plt+0x1420>
   12f5c:	ldr	r3, [pc, #132]	; 12fe8 <error@@Base+0xf0c>
   12f60:	mov	r2, #8
   12f64:	add	r1, r5, #920	; 0x398
   12f68:	mov	r0, r4
   12f6c:	str	r9, [sp]
   12f70:	str	r9, [sp, #4]
   12f74:	add	r3, pc, r3
   12f78:	bl	12788 <error@@Base+0x6ac>
   12f7c:	ldr	r3, [r5, #8]
   12f80:	cmp	r3, r9
   12f84:	ble	12f98 <error@@Base+0xebc>
   12f88:	mov	r2, r8
   12f8c:	add	r1, r5, #992	; 0x3e0
   12f90:	mov	r0, r4
   12f94:	bl	12908 <error@@Base+0x82c>
   12f98:	ldr	r3, [r5, #416]	; 0x1a0
   12f9c:	cmp	r3, #0
   12fa0:	ble	12f3c <error@@Base+0xe60>
   12fa4:	ldr	r2, [pc, #64]	; 12fec <error@@Base+0xf10>
   12fa8:	add	r1, r5, #9024	; 0x2340
   12fac:	mov	r0, r4
   12fb0:	add	r1, r1, #24
   12fb4:	add	r2, pc, r2
   12fb8:	bl	12908 <error@@Base+0x82c>
   12fbc:	b	12f3c <error@@Base+0xe60>
   12fc0:	andeq	r1, r0, r8, ror r9
   12fc4:	andeq	r4, r0, ip, asr #27
   12fc8:	andeq	r1, r0, r8, lsl r9
   12fcc:	andeq	r1, r0, ip, asr r9
   12fd0:	andeq	r1, r0, r0, asr r9
   12fd4:	andeq	r1, r0, ip, asr #18
   12fd8:	andeq	r1, r0, r8, asr #18
   12fdc:	andeq	r1, r0, r4, lsr r9
   12fe0:	andeq	r1, r0, r4, lsl r9
   12fe4:	andeq	r1, r0, r4, lsl #18
   12fe8:	ldrdeq	r1, [r0], -r0
   12fec:	andeq	r1, r0, r8, ror #16
   12ff0:	strd	r4, [sp, #-20]!	; 0xffffffec
   12ff4:	ldr	r5, [pc, #264]	; 13104 <error@@Base+0x1028>
   12ff8:	strd	r6, [sp, #8]
   12ffc:	ldr	r4, [pc, #260]	; 13108 <error@@Base+0x102c>
   13000:	str	lr, [sp, #16]
   13004:	ldr	r7, [pc, #256]	; 1310c <error@@Base+0x1030>
   13008:	add	r5, pc, r5
   1300c:	ldr	r6, [pc, #252]	; 13110 <error@@Base+0x1034>
   13010:	add	r4, pc, r4
   13014:	add	r7, pc, r7
   13018:	add	r6, pc, r6
   1301c:	ldr	r0, [r0, #4]
   13020:	cmp	r0, #0
   13024:	beq	130d4 <error@@Base+0xff8>
   13028:	movw	ip, #1092	; 0x444
   1302c:	movw	r2, #8294	; 0x2066
   13030:	ldr	lr, [r0, #12]
   13034:	mov	r3, ip
   13038:	mov	r1, #0
   1303c:	b	13048 <error@@Base+0xf6c>
   13040:	add	r2, r2, r2, lsl #1
   13044:	ldr	r2, [r4, r2, lsl #2]
   13048:	add	r3, r1, r3, lsr #1
   1304c:	cmp	lr, r2
   13050:	subcc	ip, r3, #1
   13054:	bcc	13070 <error@@Base+0xf94>
   13058:	add	r2, r3, r3, lsl #1
   1305c:	add	r1, r3, #1
   13060:	add	r3, r5, r2, lsl #2
   13064:	ldr	r2, [r3, #4]
   13068:	cmp	lr, r2
   1306c:	bls	130e4 <error@@Base+0x1008>
   13070:	sub	r3, ip, r1
   13074:	cmp	ip, r1
   13078:	add	r2, r1, r3, lsr #1
   1307c:	bcs	13040 <error@@Base+0xf64>
   13080:	movw	r2, #8294	; 0x2066
   13084:	mov	r1, #0
   13088:	movw	ip, #1092	; 0x444
   1308c:	movw	r3, #1092	; 0x444
   13090:	b	1309c <error@@Base+0xfc0>
   13094:	add	r2, r2, r2, lsl #1
   13098:	ldr	r2, [r6, r2, lsl #2]
   1309c:	add	r3, r1, r3, lsr #1
   130a0:	cmp	lr, r2
   130a4:	subcc	ip, r3, #1
   130a8:	bcc	130c4 <error@@Base+0xfe8>
   130ac:	add	r2, r3, r3, lsl #1
   130b0:	add	r1, r3, #1
   130b4:	add	r3, r7, r2, lsl #2
   130b8:	ldr	r2, [r3, #4]
   130bc:	cmp	lr, r2
   130c0:	bls	130f4 <error@@Base+0x1018>
   130c4:	sub	r3, ip, r1
   130c8:	cmp	ip, r1
   130cc:	add	r2, r1, r3, lsr #1
   130d0:	bcs	13094 <error@@Base+0xfb8>
   130d4:	ldrd	r4, [sp]
   130d8:	ldrd	r6, [sp, #8]
   130dc:	add	sp, sp, #16
   130e0:	pop	{pc}		; (ldr pc, [sp], #4)
   130e4:	ldr	r3, [r3, #8]
   130e8:	cmp	r3, #4
   130ec:	beq	1301c <error@@Base+0xf40>
   130f0:	b	13080 <error@@Base+0xfa4>
   130f4:	ldr	r3, [r3, #8]
   130f8:	cmp	r3, #6
   130fc:	beq	1301c <error@@Base+0xf40>
   13100:	b	130d4 <error@@Base+0xff8>
   13104:	andeq	r1, r0, ip, ror #16
   13108:	andeq	r1, r0, r4, ror #16
   1310c:	andeq	r1, r0, r0, ror #16
   13110:	andeq	r1, r0, ip, asr r8
   13114:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13118:	strd	r6, [sp, #8]
   1311c:	strd	r8, [sp, #16]
   13120:	ldr	r9, [r1]
   13124:	strd	sl, [sp, #24]
   13128:	str	lr, [sp, #32]
   1312c:	sub	sp, sp, #52	; 0x34
   13130:	cmp	r9, #0
   13134:	str	r9, [sp, #36]	; 0x24
   13138:	beq	13490 <error@@Base+0x13b4>
   1313c:	ldr	r3, [pc, #1996]	; 13910 <error@@Base+0x1834>
   13140:	add	r8, sp, #32
   13144:	str	r0, [sp, #28]
   13148:	add	r3, pc, r3
   1314c:	str	r3, [sp, #16]
   13150:	ldr	r3, [pc, #1980]	; 13914 <error@@Base+0x1838>
   13154:	add	r3, pc, r3
   13158:	str	r3, [sp, #20]
   1315c:	ldr	r3, [pc, #1972]	; 13918 <error@@Base+0x183c>
   13160:	add	r3, pc, r3
   13164:	str	r3, [sp, #24]
   13168:	ldr	r3, [pc, #1964]	; 1391c <error@@Base+0x1840>
   1316c:	mov	r7, #17
   13170:	mov	r6, r8
   13174:	add	r3, pc, r3
   13178:	str	r3, [sp, #4]
   1317c:	ldr	r3, [pc, #1948]	; 13920 <error@@Base+0x1844>
   13180:	add	r3, pc, r3
   13184:	str	r3, [sp, #8]
   13188:	ldr	r3, [pc, #1940]	; 13924 <error@@Base+0x1848>
   1318c:	add	r3, pc, r3
   13190:	str	r3, [sp, #12]
   13194:	mov	r0, r6
   13198:	bl	12ff0 <error@@Base+0xf14>
   1319c:	subs	r6, r0, #0
   131a0:	beq	1356c <error@@Base+0x1490>
   131a4:	ldr	ip, [pc, #1916]	; 13928 <error@@Base+0x184c>
   131a8:	movw	r1, #1092	; 0x444
   131ac:	movw	lr, #8294	; 0x2066
   131b0:	mov	r2, r1
   131b4:	mov	r3, #0
   131b8:	ldr	r0, [r6, #12]
   131bc:	add	ip, pc, ip
   131c0:	b	131d4 <error@@Base+0x10f8>
   131c4:	sub	r2, r1, r3
   131c8:	add	lr, r3, r2, lsr #1
   131cc:	add	lr, lr, lr, lsl #1
   131d0:	ldr	lr, [ip, lr, lsl #2]
   131d4:	add	r2, r3, r2, lsr #1
   131d8:	cmp	r0, lr
   131dc:	subcc	r1, r2, #1
   131e0:	bcc	13200 <error@@Base+0x1124>
   131e4:	ldr	lr, [sp, #16]
   131e8:	add	r3, r2, r2, lsl #1
   131ec:	add	r3, lr, r3, lsl #2
   131f0:	ldr	lr, [r3, #4]
   131f4:	cmp	r0, lr
   131f8:	bls	13738 <error@@Base+0x165c>
   131fc:	add	r3, r2, #1
   13200:	cmp	r1, r3
   13204:	bcs	131c4 <error@@Base+0x10e8>
   13208:	mov	r0, r6
   1320c:	bl	12ff0 <error@@Base+0xf14>
   13210:	cmp	r0, #0
   13214:	beq	13824 <error@@Base+0x1748>
   13218:	mov	r5, #0
   1321c:	mov	sl, r5
   13220:	movw	ip, #1092	; 0x444
   13224:	movw	r3, #8294	; 0x2066
   13228:	ldr	lr, [r0, #12]
   1322c:	mov	r2, ip
   13230:	mov	r1, #0
   13234:	b	1324c <error@@Base+0x1170>
   13238:	sub	r2, ip, r1
   1323c:	ldr	r4, [sp, #8]
   13240:	add	r3, r1, r2, lsr #1
   13244:	add	r3, r3, r3, lsl #1
   13248:	ldr	r3, [r4, r3, lsl #2]
   1324c:	add	r2, r1, r2, lsr #1
   13250:	cmp	lr, r3
   13254:	subcc	ip, r2, #1
   13258:	bcc	13278 <error@@Base+0x119c>
   1325c:	ldr	r1, [sp, #4]
   13260:	add	r3, r2, r2, lsl #1
   13264:	add	r3, r1, r3, lsl #2
   13268:	ldr	r1, [r3, #4]
   1326c:	cmp	lr, r1
   13270:	bls	13768 <error@@Base+0x168c>
   13274:	add	r1, r2, #1
   13278:	cmp	ip, r1
   1327c:	bcs	13238 <error@@Base+0x115c>
   13280:	bl	12ff0 <error@@Base+0xf14>
   13284:	cmp	r0, #0
   13288:	beq	1386c <error@@Base+0x1790>
   1328c:	mov	r4, #0
   13290:	mov	r3, r4
   13294:	mov	lr, r4
   13298:	movw	ip, #1092	; 0x444
   1329c:	movw	fp, #8294	; 0x2066
   132a0:	str	r3, [sp]
   132a4:	mov	r1, ip
   132a8:	mov	r2, #0
   132ac:	ldr	r0, [r0, #12]
   132b0:	b	132c8 <error@@Base+0x11ec>
   132b4:	sub	r1, ip, r2
   132b8:	ldr	r3, [sp, #20]
   132bc:	add	fp, r2, r1, lsr #1
   132c0:	add	fp, fp, fp, lsl #1
   132c4:	ldr	fp, [r3, fp, lsl #2]
   132c8:	add	r1, r2, r1, lsr #1
   132cc:	cmp	r0, fp
   132d0:	subcc	ip, r1, #1
   132d4:	bcc	132f4 <error@@Base+0x1218>
   132d8:	ldr	r3, [sp, #12]
   132dc:	add	r2, r1, r1, lsl #1
   132e0:	add	r2, r3, r2, lsl #2
   132e4:	ldr	fp, [r2, #4]
   132e8:	cmp	r0, fp
   132ec:	bls	1372c <error@@Base+0x1650>
   132f0:	add	r2, r1, #1
   132f4:	cmp	ip, r2
   132f8:	bcs	132b4 <error@@Base+0x11d8>
   132fc:	ldr	r3, [sp]
   13300:	mov	r2, #0
   13304:	cmp	lr, #0
   13308:	bne	13724 <error@@Base+0x1648>
   1330c:	sub	r1, r5, #2
   13310:	cmp	r1, #1
   13314:	orrls	sl, sl, #1
   13318:	cmp	sl, #0
   1331c:	bne	13628 <error@@Base+0x154c>
   13320:	bic	ip, r4, #2
   13324:	cmp	ip, #1
   13328:	orreq	r3, r3, #1
   1332c:	cmp	r3, #0
   13330:	bne	13628 <error@@Base+0x154c>
   13334:	sub	r3, r5, #8
   13338:	cmp	r3, #1
   1333c:	bhi	13580 <error@@Base+0x14a4>
   13340:	sub	r1, r4, #8
   13344:	cmp	r1, #1
   13348:	bls	13564 <error@@Base+0x1488>
   1334c:	sub	r0, r4, #12
   13350:	sub	r1, r4, #10
   13354:	clz	r1, r1
   13358:	cmp	r4, #10
   1335c:	cmpne	r0, #1
   13360:	lsr	r1, r1, #5
   13364:	bhi	13374 <error@@Base+0x1298>
   13368:	sub	r0, r2, #8
   1336c:	cmp	r0, #1
   13370:	bls	13564 <error@@Base+0x1488>
   13374:	sub	r0, r7, #8
   13378:	cmp	r0, #1
   1337c:	bls	13814 <error@@Base+0x1738>
   13380:	sub	r0, r5, #8
   13384:	clz	r0, r0
   13388:	lsr	r0, r0, #5
   1338c:	tst	r0, r1
   13390:	beq	134dc <error@@Base+0x1400>
   13394:	mov	r7, #8
   13398:	ldr	r3, [r6, #4]
   1339c:	cmp	r3, #0
   133a0:	bne	13194 <error@@Base+0x10b8>
   133a4:	ldr	r0, [r9, #12]
   133a8:	bl	109b4 <utf8proc_get_property@plt>
   133ac:	ldrsh	r3, [r0]
   133b0:	cmp	r3, #0
   133b4:	ble	13480 <error@@Base+0x13a4>
   133b8:	cmp	r3, #12
   133bc:	ble	133c8 <error@@Base+0x12ec>
   133c0:	cmp	r3, #29
   133c4:	bne	13480 <error@@Base+0x13a4>
   133c8:	ldr	r4, [r6, #4]
   133cc:	cmp	r4, r9
   133d0:	movne	r5, r9
   133d4:	movne	r7, #0
   133d8:	bne	133e8 <error@@Base+0x130c>
   133dc:	b	1387c <error@@Base+0x17a0>
   133e0:	cmp	r5, #0
   133e4:	beq	13890 <error@@Base+0x17b4>
   133e8:	mov	r1, r8
   133ec:	ldr	r0, [r5, #12]
   133f0:	bl	109cc <utf8proc_encode_char@plt>
   133f4:	cmp	r0, #0
   133f8:	beq	138b0 <error@@Base+0x17d4>
   133fc:	ldr	r5, [r5, #4]
   13400:	add	r7, r7, r0
   13404:	cmp	r4, r5
   13408:	bne	133e0 <error@@Base+0x1304>
   1340c:	add	r0, r7, #1
   13410:	mov	r7, #0
   13414:	bl	10a38 <malloc@plt>
   13418:	mov	r5, r0
   1341c:	b	13428 <error@@Base+0x134c>
   13420:	cmp	r9, #0
   13424:	beq	138d0 <error@@Base+0x17f4>
   13428:	add	r1, r5, r7
   1342c:	ldr	r0, [r9, #12]
   13430:	bl	109cc <utf8proc_encode_char@plt>
   13434:	ldr	r9, [r9, #4]
   13438:	add	r7, r7, r0
   1343c:	cmp	r4, r9
   13440:	bne	13420 <error@@Base+0x1344>
   13444:	add	r7, r5, r7
   13448:	mov	r3, #0
   1344c:	mov	r1, #12
   13450:	mov	r0, #1
   13454:	strb	r3, [r7]
   13458:	bl	12138 <error@@Base+0x5c>
   1345c:	mov	r4, r0
   13460:	mov	r0, r5
   13464:	bl	10abc <utf8proc_NFC@plt>
   13468:	mov	r1, r4
   1346c:	str	r0, [r4, #8]
   13470:	ldr	r0, [sp, #28]
   13474:	bl	116fc <__assert_fail@plt+0xbe0>
   13478:	mov	r0, r5
   1347c:	bl	109a8 <free@plt>
   13480:	ldr	r9, [r6, #4]
   13484:	cmp	r9, #0
   13488:	str	r9, [sp, #36]	; 0x24
   1348c:	bne	13168 <error@@Base+0x108c>
   13490:	add	sp, sp, #52	; 0x34
   13494:	ldrd	r4, [sp]
   13498:	ldrd	r6, [sp, #8]
   1349c:	ldrd	r8, [sp, #16]
   134a0:	ldrd	sl, [sp, #24]
   134a4:	add	sp, sp, #32
   134a8:	pop	{pc}		; (ldr pc, [sp], #4)
   134ac:	sub	r1, r5, #10
   134b0:	bics	r1, r1, #2
   134b4:	bne	13814 <error@@Base+0x1738>
   134b8:	sub	r1, r4, #8
   134bc:	cmp	r1, #1
   134c0:	bls	13564 <error@@Base+0x1488>
   134c4:	sub	r1, r4, #10
   134c8:	sub	r0, r5, #8
   134cc:	clz	r1, r1
   134d0:	clz	r0, r0
   134d4:	lsr	r1, r1, #5
   134d8:	lsr	r0, r0, #5
   134dc:	cmp	r4, #11
   134e0:	movne	r0, #0
   134e4:	andeq	r0, r0, #1
   134e8:	cmp	r0, #0
   134ec:	beq	13598 <error@@Base+0x14bc>
   134f0:	cmp	r2, #8
   134f4:	beq	13394 <error@@Base+0x12b8>
   134f8:	cmp	r3, #1
   134fc:	sub	r0, r5, #15
   13500:	movhi	r3, #0
   13504:	movls	r3, #1
   13508:	clz	r0, r0
   1350c:	cmp	r5, #15
   13510:	lsr	r0, r0, #5
   13514:	mov	lr, #0
   13518:	beq	137d4 <error@@Base+0x16f8>
   1351c:	cmp	r7, #15
   13520:	beq	13854 <error@@Base+0x1778>
   13524:	sub	r2, r5, #7
   13528:	sub	r1, r4, #7
   1352c:	clz	r2, r2
   13530:	clz	r1, r1
   13534:	lsr	r2, r2, #5
   13538:	lsr	r1, r1, #5
   1353c:	tst	r2, r1
   13540:	movne	r7, #7
   13544:	bne	13398 <error@@Base+0x12bc>
   13548:	mov	r7, r5
   1354c:	b	135dc <error@@Base+0x1500>
   13550:	cmp	r5, #13
   13554:	bne	134ac <error@@Base+0x13d0>
   13558:	sub	r1, r4, #8
   1355c:	cmp	r1, #1
   13560:	bhi	1358c <error@@Base+0x14b0>
   13564:	mov	r7, r5
   13568:	b	13398 <error@@Base+0x12bc>
   1356c:	mov	r4, #18
   13570:	mov	ip, #16
   13574:	mov	r5, r4
   13578:	mov	r2, r4
   1357c:	mov	r3, #10
   13580:	sub	r1, r7, #8
   13584:	cmp	r1, #1
   13588:	bls	13550 <error@@Base+0x1474>
   1358c:	sub	r1, r4, #10
   13590:	clz	r1, r1
   13594:	lsr	r1, r1, #5
   13598:	cmp	r7, #8
   1359c:	cmpeq	r5, #11
   135a0:	bne	13790 <error@@Base+0x16b4>
   135a4:	cmp	r4, #8
   135a8:	beq	1384c <error@@Base+0x1770>
   135ac:	sub	lr, r4, #15
   135b0:	mov	r0, #0
   135b4:	clz	lr, lr
   135b8:	mov	r3, r0
   135bc:	lsr	lr, lr, #5
   135c0:	sub	r2, r5, #7
   135c4:	sub	r1, r4, #7
   135c8:	clz	r2, r2
   135cc:	clz	r1, r1
   135d0:	lsr	r2, r2, #5
   135d4:	mov	r7, r5
   135d8:	lsr	r1, r1, #5
   135dc:	orrs	r3, r0, r3
   135e0:	bne	135f4 <error@@Base+0x1518>
   135e4:	cmp	r5, #16
   135e8:	orreq	r2, r2, #1
   135ec:	cmp	r2, #0
   135f0:	beq	13838 <error@@Base+0x175c>
   135f4:	cmp	r4, #16
   135f8:	beq	13398 <error@@Base+0x12bc>
   135fc:	cmp	r5, #16
   13600:	bne	13838 <error@@Base+0x175c>
   13604:	sub	r4, r4, #8
   13608:	cmp	r4, #1
   1360c:	orrls	lr, lr, #1
   13610:	cmp	lr, #0
   13614:	bne	13398 <error@@Base+0x12bc>
   13618:	cmp	r1, #0
   1361c:	bne	13398 <error@@Base+0x12bc>
   13620:	cmp	r6, #0
   13624:	beq	13490 <error@@Base+0x13b4>
   13628:	ldr	r4, [pc, #764]	; 1392c <error@@Base+0x1850>
   1362c:	ldr	lr, [pc, #764]	; 13930 <error@@Base+0x1854>
   13630:	ldr	ip, [pc, #764]	; 13934 <error@@Base+0x1858>
   13634:	add	r4, pc, r4
   13638:	add	lr, pc, lr
   1363c:	add	ip, pc, ip
   13640:	ldr	r0, [r6, #4]
   13644:	cmp	r0, #0
   13648:	beq	133a4 <error@@Base+0x12c8>
   1364c:	movw	r5, #1092	; 0x444
   13650:	movw	r7, #8294	; 0x2066
   13654:	ldr	r1, [r0, #12]
   13658:	mov	r3, r5
   1365c:	mov	r2, #0
   13660:	b	13674 <error@@Base+0x1598>
   13664:	sub	r3, r5, r2
   13668:	add	r7, r2, r3, lsr #1
   1366c:	add	r7, r7, r7, lsl #1
   13670:	ldr	r7, [lr, r7, lsl #2]
   13674:	add	r3, r2, r3, lsr #1
   13678:	cmp	r1, r7
   1367c:	subcc	r5, r3, #1
   13680:	bcc	1369c <error@@Base+0x15c0>
   13684:	add	r2, r3, r3, lsl #1
   13688:	add	r2, r4, r2, lsl #2
   1368c:	ldr	r7, [r2, #4]
   13690:	cmp	r1, r7
   13694:	bls	13714 <error@@Base+0x1638>
   13698:	add	r2, r3, #1
   1369c:	cmp	r2, r5
   136a0:	bls	13664 <error@@Base+0x1588>
   136a4:	movw	r7, #8294	; 0x2066
   136a8:	mov	r2, #0
   136ac:	movw	r5, #1092	; 0x444
   136b0:	movw	r3, #1092	; 0x444
   136b4:	b	136c8 <error@@Base+0x15ec>
   136b8:	sub	r3, r5, r2
   136bc:	add	r7, r2, r3, lsr #1
   136c0:	add	r7, r7, r7, lsl #1
   136c4:	ldr	r7, [ip, r7, lsl #2]
   136c8:	add	r3, r2, r3, lsr #1
   136cc:	cmp	r1, r7
   136d0:	subcc	r5, r3, #1
   136d4:	bcc	136f4 <error@@Base+0x1618>
   136d8:	ldr	r7, [sp, #24]
   136dc:	add	r2, r3, r3, lsl #1
   136e0:	add	r2, r7, r2, lsl #2
   136e4:	ldr	r7, [r2, #4]
   136e8:	cmp	r1, r7
   136ec:	bls	13700 <error@@Base+0x1624>
   136f0:	add	r2, r3, #1
   136f4:	cmp	r5, r2
   136f8:	bcs	136b8 <error@@Base+0x15dc>
   136fc:	b	133a4 <error@@Base+0x12c8>
   13700:	ldr	r3, [r2, #8]
   13704:	cmp	r3, #6
   13708:	bne	133a4 <error@@Base+0x12c8>
   1370c:	mov	r6, r0
   13710:	b	13640 <error@@Base+0x1564>
   13714:	ldr	r3, [r2, #8]
   13718:	cmp	r3, #4
   1371c:	beq	1370c <error@@Base+0x1630>
   13720:	b	136a4 <error@@Base+0x15c8>
   13724:	mov	r7, #1
   13728:	b	13398 <error@@Base+0x12bc>
   1372c:	ldr	r3, [sp]
   13730:	ldr	r2, [r2, #8]
   13734:	b	13304 <error@@Base+0x1228>
   13738:	ldr	r5, [r3, #8]
   1373c:	mov	r0, r6
   13740:	bl	12ff0 <error@@Base+0xf14>
   13744:	cmp	r0, #0
   13748:	sub	sl, r5, #1
   1374c:	clz	sl, sl
   13750:	lsr	sl, sl, #5
   13754:	bne	13220 <error@@Base+0x1144>
   13758:	mov	r4, #18
   1375c:	mov	r3, r0
   13760:	mov	r2, r4
   13764:	b	1330c <error@@Base+0x1230>
   13768:	ldr	r4, [r3, #8]
   1376c:	bl	12ff0 <error@@Base+0xf14>
   13770:	cmp	r0, #0
   13774:	sub	r3, r4, #2
   13778:	clz	r3, r3
   1377c:	lsr	r3, r3, #5
   13780:	and	lr, r3, sl
   13784:	bne	13298 <error@@Base+0x11bc>
   13788:	mov	r2, #18
   1378c:	b	13304 <error@@Base+0x1228>
   13790:	sub	r0, r5, #15
   13794:	sub	lr, r4, #15
   13798:	clz	r0, r0
   1379c:	clz	lr, lr
   137a0:	lsr	r0, r0, #5
   137a4:	lsr	lr, lr, #5
   137a8:	tst	r0, lr
   137ac:	beq	137b8 <error@@Base+0x16dc>
   137b0:	mov	r7, #15
   137b4:	b	13398 <error@@Base+0x12bc>
   137b8:	cmp	r3, #1
   137bc:	movhi	r3, #0
   137c0:	movls	r3, #1
   137c4:	tst	lr, r3
   137c8:	bne	13564 <error@@Base+0x1488>
   137cc:	cmp	r5, #15
   137d0:	bne	1351c <error@@Base+0x1440>
   137d4:	sub	r7, r4, #8
   137d8:	cmp	r7, #1
   137dc:	bls	137b0 <error@@Base+0x16d4>
   137e0:	cmp	ip, #12
   137e4:	orreq	r1, r1, #1
   137e8:	cmp	r1, #0
   137ec:	beq	137f8 <error@@Base+0x171c>
   137f0:	cmp	r2, #15
   137f4:	beq	137b0 <error@@Base+0x16d4>
   137f8:	sub	r1, r4, #7
   137fc:	orrs	r3, r3, r0
   13800:	clz	r1, r1
   13804:	lsr	r1, r1, #5
   13808:	beq	13838 <error@@Base+0x175c>
   1380c:	mov	r7, #15
   13810:	b	135f4 <error@@Base+0x1518>
   13814:	sub	r1, r4, #10
   13818:	clz	r1, r1
   1381c:	lsr	r1, r1, #5
   13820:	b	13380 <error@@Base+0x12a4>
   13824:	mov	r2, #18
   13828:	mov	r5, r0
   1382c:	mov	r3, r0
   13830:	mov	r4, r2
   13834:	b	13320 <error@@Base+0x1244>
   13838:	cmp	r5, #5
   1383c:	cmpeq	r4, #5
   13840:	bne	13620 <error@@Base+0x1544>
   13844:	mov	r7, #5
   13848:	b	13398 <error@@Base+0x12bc>
   1384c:	mov	r7, #11
   13850:	b	13398 <error@@Base+0x12bc>
   13854:	cmp	r5, #14
   13858:	bne	138f4 <error@@Base+0x1818>
   1385c:	cmp	r4, #15
   13860:	bne	135c0 <error@@Base+0x14e4>
   13864:	mov	r7, r5
   13868:	b	13398 <error@@Base+0x12bc>
   1386c:	mov	r4, r0
   13870:	mov	r2, #18
   13874:	mov	r3, r0
   13878:	b	1330c <error@@Base+0x1230>
   1387c:	mov	r0, #1
   13880:	bl	10a38 <malloc@plt>
   13884:	mov	r5, r0
   13888:	mov	r7, r0
   1388c:	b	13448 <error@@Base+0x136c>
   13890:	ldr	r3, [pc, #160]	; 13938 <error@@Base+0x185c>
   13894:	mov	r2, #249	; 0xf9
   13898:	ldr	r1, [pc, #156]	; 1393c <error@@Base+0x1860>
   1389c:	ldr	r0, [pc, #156]	; 13940 <error@@Base+0x1864>
   138a0:	add	r3, pc, r3
   138a4:	add	r1, pc, r1
   138a8:	add	r0, pc, r0
   138ac:	bl	10b1c <__assert_fail@plt>
   138b0:	ldr	r3, [pc, #140]	; 13944 <error@@Base+0x1868>
   138b4:	mov	r2, #253	; 0xfd
   138b8:	ldr	r1, [pc, #136]	; 13948 <error@@Base+0x186c>
   138bc:	ldr	r0, [pc, #136]	; 1394c <error@@Base+0x1870>
   138c0:	add	r3, pc, r3
   138c4:	add	r1, pc, r1
   138c8:	add	r0, pc, r0
   138cc:	bl	10b1c <__assert_fail@plt>
   138d0:	ldr	r3, [pc, #120]	; 13950 <error@@Base+0x1874>
   138d4:	movw	r2, #269	; 0x10d
   138d8:	ldr	r1, [pc, #116]	; 13954 <error@@Base+0x1878>
   138dc:	ldr	r0, [pc, #116]	; 13958 <error@@Base+0x187c>
   138e0:	add	r3, pc, r3
   138e4:	add	r3, r3, #20
   138e8:	add	r1, pc, r1
   138ec:	add	r0, pc, r0
   138f0:	bl	10b1c <__assert_fail@plt>
   138f4:	sub	r2, r5, #10
   138f8:	bics	r2, r2, #2
   138fc:	bne	13524 <error@@Base+0x1448>
   13900:	cmp	r4, #15
   13904:	bne	13524 <error@@Base+0x1448>
   13908:	mov	r7, r5
   1390c:	b	13398 <error@@Base+0x12bc>
   13910:	andeq	r1, r0, ip, lsr #14
   13914:	andeq	r1, r0, r0, lsr #14
   13918:	andeq	r1, r0, r4, lsl r7
   1391c:	andeq	r1, r0, r0, lsl #14
   13920:	strdeq	r1, [r0], -r4
   13924:	andeq	r1, r0, r8, ror #13
   13928:			; <UNDEFINED> instruction: 0x000016b8
   1392c:	andeq	r1, r0, r0, asr #4
   13930:	andeq	r1, r0, ip, lsr r2
   13934:	andeq	r1, r0, r8, lsr r2
   13938:	andeq	r0, r0, ip, lsr #31
   1393c:	andeq	r4, r0, ip, lsl #6
   13940:	andeq	r4, r0, r0, lsl r3
   13944:	andeq	r0, r0, ip, lsl #31
   13948:	andeq	r4, r0, ip, ror #5
   1394c:	andeq	r4, r0, r0, lsl #6
   13950:	andeq	r0, r0, ip, ror #30
   13954:	andeq	r4, r0, r8, asr #5
   13958:	andeq	r4, r0, ip, asr #5
   1395c:	str	r4, [sp, #-8]!
   13960:	mov	r4, r0
   13964:	ldr	r0, [r0, #8]
   13968:	str	lr, [sp, #4]
   1396c:	bl	109a8 <free@plt>
   13970:	mov	r0, r4
   13974:	ldr	r4, [sp]
   13978:	ldr	lr, [sp, #4]
   1397c:	add	sp, sp, #8
   13980:	b	109a8 <free@plt>
   13984:	strd	r4, [sp, #-16]!
   13988:	uxtb	r5, r1
   1398c:	mov	r1, #16
   13990:	str	r6, [sp, #8]
   13994:	mov	r6, r0
   13998:	mov	r0, #1
   1399c:	mov	r4, r2
   139a0:	str	lr, [sp, #12]
   139a4:	bl	12138 <error@@Base+0x5c>
   139a8:	mov	r3, r0
   139ac:	mov	r0, r6
   139b0:	mov	r1, r3
   139b4:	strb	r5, [r3, #8]
   139b8:	str	r4, [r3, #12]
   139bc:	ldrd	r4, [sp]
   139c0:	ldr	r6, [sp, #8]
   139c4:	ldr	lr, [sp, #12]
   139c8:	add	sp, sp, #16
   139cc:	b	116fc <__assert_fail@plt+0xbe0>
   139d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   139d4:	clz	r3, r1
   139d8:	strd	r6, [sp, #8]
   139dc:	lsr	r3, r3, #5
   139e0:	strd	r8, [sp, #16]
   139e4:	strd	sl, [sp, #24]
   139e8:	mov	sl, r2
   139ec:	str	lr, [sp, #32]
   139f0:	sub	sp, sp, #124	; 0x7c
   139f4:	ldrb	r2, [r2]
   139f8:	ldr	r4, [pc, #888]	; 13d78 <error@@Base+0x1c9c>
   139fc:	cmp	r2, #0
   13a00:	moveq	r3, #0
   13a04:	cmp	r3, #0
   13a08:	add	r4, pc, r4
   13a0c:	bne	13d64 <error@@Base+0x1c88>
   13a10:	mov	r9, r0
   13a14:	mov	r0, r1
   13a18:	ldr	r1, [pc, #860]	; 13d7c <error@@Base+0x1ca0>
   13a1c:	ldr	r3, [r9, #4]
   13a20:	add	r1, pc, r1
   13a24:	str	r3, [sp, #8]
   13a28:	bl	12200 <error@@Base+0x124>
   13a2c:	ldrb	r3, [sl]
   13a30:	mov	r7, r0
   13a34:	cmp	r3, #0
   13a38:	bne	13cac <error@@Base+0x1bd0>
   13a3c:	ldr	r8, [sl, #4]
   13a40:	mov	r0, r7
   13a44:	ldrb	r3, [sl, #1]
   13a48:	cmp	r8, #0
   13a4c:	moveq	r8, #94	; 0x5e
   13a50:	mov	r5, r3
   13a54:	bl	10b10 <getc@plt>
   13a58:	cmn	r0, #1
   13a5c:	beq	13b24 <error@@Base+0x1a48>
   13a60:	ldr	r3, [pc, #792]	; 13d80 <error@@Base+0x1ca4>
   13a64:	ldr	r3, [r4, r3]
   13a68:	ldrsb	r4, [r3, r0]
   13a6c:	str	r3, [sp]
   13a70:	cmp	r4, #0
   13a74:	ble	13d44 <error@@Base+0x1c68>
   13a78:	add	r3, sp, #20
   13a7c:	mov	r6, #0
   13a80:	add	fp, sp, #17
   13a84:	str	r3, [sp, #4]
   13a88:	str	sl, [sp, #12]
   13a8c:	mov	sl, r5
   13a90:	b	13aa4 <error@@Base+0x19c8>
   13a94:	ldr	r3, [sp]
   13a98:	ldrsb	r4, [r3, r0]
   13a9c:	cmp	r4, #0
   13aa0:	ble	13d44 <error@@Base+0x1c68>
   13aa4:	cmp	r4, #1
   13aa8:	strb	r0, [sp, #16]
   13aac:	beq	13ad0 <error@@Base+0x19f4>
   13ab0:	sub	r5, r4, #1
   13ab4:	mov	r3, r7
   13ab8:	mov	r2, r5
   13abc:	mov	r1, #1
   13ac0:	mov	r0, fp
   13ac4:	bl	10a20 <fread@plt>
   13ac8:	cmp	r5, r0
   13acc:	bne	13d58 <error@@Base+0x1c7c>
   13ad0:	mov	r1, #4
   13ad4:	add	r0, sp, #16
   13ad8:	ldr	r2, [sp, #4]
   13adc:	bl	10a2c <utf8proc_iterate@plt>
   13ae0:	cmp	r0, r4
   13ae4:	bne	13d50 <error@@Base+0x1c74>
   13ae8:	cmp	sl, #0
   13aec:	ldr	r2, [sp, #20]
   13af0:	beq	13b00 <error@@Base+0x1a24>
   13af4:	cmp	r2, r8
   13af8:	moveq	r6, #1
   13afc:	beq	13b10 <error@@Base+0x1a34>
   13b00:	mov	r1, r6
   13b04:	mov	r0, r9
   13b08:	mov	r6, #0
   13b0c:	bl	13984 <error@@Base+0x18a8>
   13b10:	mov	r0, r7
   13b14:	bl	10b10 <getc@plt>
   13b18:	cmn	r0, #1
   13b1c:	bne	13a94 <error@@Base+0x19b8>
   13b20:	ldr	sl, [sp, #12]
   13b24:	mov	r0, r7
   13b28:	bl	11f3c <__assert_fail@plt+0x1420>
   13b2c:	ldrb	r3, [sl, #9]
   13b30:	cmp	r3, #0
   13b34:	beq	13bac <error@@Base+0x1ad0>
   13b38:	ldr	r3, [sp, #8]
   13b3c:	cmp	r3, #0
   13b40:	ldrne	r6, [r3, #4]
   13b44:	ldreq	r6, [r9]
   13b48:	cmp	r6, #0
   13b4c:	beq	13bac <error@@Base+0x1ad0>
   13b50:	mov	r5, r6
   13b54:	mov	r7, #32
   13b58:	b	13b68 <error@@Base+0x1a8c>
   13b5c:	ldr	r5, [r5, #4]
   13b60:	cmp	r5, #0
   13b64:	beq	13c24 <error@@Base+0x1b48>
   13b68:	ldr	r4, [r5, #12]
   13b6c:	mov	r0, r4
   13b70:	bl	109b4 <utf8proc_get_property@plt>
   13b74:	cmp	r4, #13
   13b78:	bhi	13ca0 <error@@Base+0x1bc4>
   13b7c:	cmp	r4, #11
   13b80:	bcs	13ba4 <error@@Base+0x1ac8>
   13b84:	cmp	r4, #9
   13b88:	beq	13ba4 <error@@Base+0x1ac8>
   13b8c:	cmp	r4, #10
   13b90:	beq	13b5c <error@@Base+0x1a80>
   13b94:	ldrsh	r3, [r0]
   13b98:	sub	r3, r3, #23
   13b9c:	cmp	r3, #2
   13ba0:	bhi	13b5c <error@@Base+0x1a80>
   13ba4:	str	r7, [r5, #12]
   13ba8:	b	13b5c <error@@Base+0x1a80>
   13bac:	ldrb	r3, [sl, #10]
   13bb0:	cmp	r3, #0
   13bb4:	beq	13be4 <error@@Base+0x1b08>
   13bb8:	ldr	r3, [sp, #8]
   13bbc:	cmp	r3, #0
   13bc0:	ldrne	r4, [r3, #4]
   13bc4:	ldreq	r4, [r9]
   13bc8:	b	13bdc <error@@Base+0x1b00>
   13bcc:	ldr	r0, [r4, #12]
   13bd0:	bl	109fc <utf8proc_tolower@plt>
   13bd4:	str	r0, [r4, #12]
   13bd8:	ldr	r4, [r4, #4]
   13bdc:	cmp	r4, #0
   13be0:	bne	13bcc <error@@Base+0x1af0>
   13be4:	add	sp, sp, #124	; 0x7c
   13be8:	ldrd	r4, [sp]
   13bec:	ldrd	r6, [sp, #8]
   13bf0:	ldrd	r8, [sp, #16]
   13bf4:	ldrd	sl, [sp, #24]
   13bf8:	add	sp, sp, #32
   13bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   13c00:	cmp	r3, #10
   13c04:	movne	r2, #0
   13c08:	andeq	r2, r2, #1
   13c0c:	cmp	r2, #0
   13c10:	bne	13c88 <error@@Base+0x1bac>
   13c14:	subs	r5, r3, #10
   13c18:	movne	r5, #1
   13c1c:	subs	r6, r4, #0
   13c20:	beq	13bac <error@@Base+0x1ad0>
   13c24:	eor	r2, r5, #1
   13c28:	ldr	r4, [r6, #4]
   13c2c:	ldr	r3, [r6, #12]
   13c30:	cmp	r3, #32
   13c34:	bne	13c00 <error@@Base+0x1b24>
   13c38:	cmp	r4, #0
   13c3c:	moveq	r2, #1
   13c40:	cmp	r2, #0
   13c44:	bne	13c58 <error@@Base+0x1b7c>
   13c48:	ldr	r2, [r4, #12]
   13c4c:	cmp	r2, #10
   13c50:	cmpne	r2, #32
   13c54:	bne	13c14 <error@@Base+0x1b38>
   13c58:	cmp	r4, #0
   13c5c:	movne	r3, r5
   13c60:	moveq	r3, #0
   13c64:	cmp	r3, #0
   13c68:	beq	13c88 <error@@Base+0x1bac>
   13c6c:	ldr	r3, [r4, #12]
   13c70:	cmp	r3, #32
   13c74:	bne	13c88 <error@@Base+0x1bac>
   13c78:	ldrb	r3, [r4, #8]
   13c7c:	ldrb	r2, [r6, #8]
   13c80:	orr	r3, r3, r2
   13c84:	strb	r3, [r4, #8]
   13c88:	mov	r0, r9
   13c8c:	mov	r1, r6
   13c90:	bl	11804 <__assert_fail@plt+0xce8>
   13c94:	mov	r0, r6
   13c98:	bl	109a8 <free@plt>
   13c9c:	b	13c1c <error@@Base+0x1b40>
   13ca0:	cmp	r4, #160	; 0xa0
   13ca4:	bne	13b94 <error@@Base+0x1ab8>
   13ca8:	b	13ba4 <error@@Base+0x1ac8>
   13cac:	add	r5, sp, #20
   13cb0:	mov	r2, r0
   13cb4:	mov	r1, #99	; 0x63
   13cb8:	mov	r0, r5
   13cbc:	bl	109c0 <fgets@plt>
   13cc0:	cmp	r0, #0
   13cc4:	beq	13ce4 <error@@Base+0x1c08>
   13cc8:	ldr	r1, [pc, #180]	; 13d84 <error@@Base+0x1ca8>
   13ccc:	mov	r2, #51	; 0x33
   13cd0:	mov	r0, r5
   13cd4:	add	r1, pc, r1
   13cd8:	bl	10af8 <strncmp@plt>
   13cdc:	subs	r6, r0, #0
   13ce0:	beq	13cf8 <error@@Base+0x1c1c>
   13ce4:	mov	r0, r7
   13ce8:	bl	109e4 <rewind@plt>
   13cec:	mov	r3, #0
   13cf0:	strb	r3, [sl, #11]
   13cf4:	b	13a3c <error@@Base+0x1960>
   13cf8:	ldr	r8, [pc, #136]	; 13d88 <error@@Base+0x1cac>
   13cfc:	add	r8, pc, r8
   13d00:	mov	r2, r7
   13d04:	mov	r1, #99	; 0x63
   13d08:	mov	r0, r5
   13d0c:	bl	109c0 <fgets@plt>
   13d10:	cmp	r0, #0
   13d14:	beq	13d3c <error@@Base+0x1c60>
   13d18:	mov	r1, r8
   13d1c:	mov	r0, r5
   13d20:	bl	10984 <strcmp@plt>
   13d24:	cmp	r0, #0
   13d28:	bne	13d00 <error@@Base+0x1c24>
   13d2c:	add	r6, r6, #1
   13d30:	sxth	r6, r6
   13d34:	cmp	r6, #2
   13d38:	bne	13d00 <error@@Base+0x1c24>
   13d3c:	mov	r3, #1
   13d40:	b	13cf0 <error@@Base+0x1c14>
   13d44:	ldr	r0, [pc, #64]	; 13d8c <error@@Base+0x1cb0>
   13d48:	add	r0, pc, r0
   13d4c:	bl	120dc <error@@Base>
   13d50:	bl	10ae0 <utf8proc_errmsg@plt>
   13d54:	bl	120dc <error@@Base>
   13d58:	ldr	r0, [pc, #48]	; 13d90 <error@@Base+0x1cb4>
   13d5c:	add	r0, pc, r0
   13d60:	bl	120dc <error@@Base>
   13d64:	ldr	r1, [pc, #40]	; 13d94 <error@@Base+0x1cb8>
   13d68:	ldr	r0, [pc, #40]	; 13d98 <error@@Base+0x1cbc>
   13d6c:	add	r1, pc, r1
   13d70:	add	r0, pc, r0
   13d74:	bl	121a0 <error@@Base+0xc4>
   13d78:	strdeq	r4, [r1], -r0
   13d7c:	andeq	r0, r0, r4, lsl fp
   13d80:	andeq	r0, r0, r0, ror #1
   13d84:	andeq	r3, r0, r4, lsr #30
   13d88:	andeq	r3, r0, r4, lsr pc
   13d8c:	andeq	r3, r0, r0, lsr #30
   13d90:	andeq	r3, r0, r4, lsr #30
   13d94:	andeq	r3, r0, r0, ror lr
   13d98:	andeq	r3, r0, r8, ror lr
   13d9c:	str	r4, [sp, #-8]!
   13da0:	str	lr, [sp, #4]
   13da4:	bl	109cc <utf8proc_encode_char@plt>
   13da8:	cmp	r0, #0
   13dac:	ble	13dc0 <error@@Base+0x1ce4>
   13db0:	ldr	r4, [sp]
   13db4:	add	sp, sp, #4
   13db8:	sxtb	r0, r0
   13dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc0:	ldr	r0, [pc, #4]	; 13dcc <error@@Base+0x1cf0>
   13dc4:	add	r0, pc, r0
   13dc8:	bl	120dc <error@@Base>
   13dcc:	ldrdeq	r3, [r0], -r4
   13dd0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13dd4:	uxtb	r4, r0
   13dd8:	mov	r5, r1
   13ddc:	cmp	r4, #0
   13de0:	strd	r6, [sp, #8]
   13de4:	mov	r7, r2
   13de8:	moveq	r6, r2
   13dec:	str	r8, [sp, #16]
   13df0:	uxtb	r8, r3
   13df4:	str	lr, [sp, #20]
   13df8:	bne	13ef8 <error@@Base+0x1e1c>
   13dfc:	cmp	r5, #10
   13e00:	bne	13e3c <error@@Base+0x1d60>
   13e04:	cmp	r8, #0
   13e08:	bne	13e30 <error@@Base+0x1d54>
   13e0c:	ldr	r1, [pc, #272]	; 13f24 <error@@Base+0x1e48>
   13e10:	add	r1, pc, r1
   13e14:	mov	r0, r6
   13e18:	ldrd	r4, [sp]
   13e1c:	ldrd	r6, [sp, #8]
   13e20:	ldr	r8, [sp, #16]
   13e24:	ldr	lr, [sp, #20]
   13e28:	add	sp, sp, #24
   13e2c:	b	10ad4 <sprintf@plt>
   13e30:	ldr	r1, [pc, #240]	; 13f28 <error@@Base+0x1e4c>
   13e34:	add	r1, pc, r1
   13e38:	b	13e14 <error@@Base+0x1d38>
   13e3c:	mov	r0, r5
   13e40:	bl	109b4 <utf8proc_get_property@plt>
   13e44:	cmp	r5, #32
   13e48:	beq	13e68 <error@@Base+0x1d8c>
   13e4c:	ldrsh	r3, [r0]
   13e50:	cmp	r3, #0
   13e54:	ble	13ec8 <error@@Base+0x1dec>
   13e58:	cmp	r3, #22
   13e5c:	ble	13e68 <error@@Base+0x1d8c>
   13e60:	cmp	r3, #29
   13e64:	bne	13ec8 <error@@Base+0x1dec>
   13e68:	mov	r0, r5
   13e6c:	uxth	r4, r4
   13e70:	bl	10a80 <utf8proc_category@plt>
   13e74:	sub	r0, r0, #6
   13e78:	cmp	r0, #2
   13e7c:	bhi	13e98 <error@@Base+0x1dbc>
   13e80:	mov	r1, r6
   13e84:	movw	r0, #9676	; 0x25cc
   13e88:	bl	13d9c <error@@Base+0x1cc0>
   13e8c:	add	r4, r4, r0
   13e90:	uxth	r4, r4
   13e94:	sxtah	r6, r7, r4
   13e98:	mov	r1, r6
   13e9c:	mov	r0, r5
   13ea0:	bl	13d9c <error@@Base+0x1cc0>
   13ea4:	add	r4, r4, r0
   13ea8:	mov	r3, #0
   13eac:	sxth	r4, r4
   13eb0:	strb	r3, [r7, r4]
   13eb4:	ldrd	r4, [sp]
   13eb8:	ldrd	r6, [sp, #8]
   13ebc:	ldr	r8, [sp, #16]
   13ec0:	add	sp, sp, #20
   13ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ec8:	cmp	r5, #255	; 0xff
   13ecc:	bls	13f10 <error@@Base+0x1e34>
   13ed0:	ldr	r1, [pc, #84]	; 13f2c <error@@Base+0x1e50>
   13ed4:	mov	r2, r5
   13ed8:	mov	r0, r6
   13edc:	add	r1, pc, r1
   13ee0:	ldrd	r4, [sp]
   13ee4:	ldrd	r6, [sp, #8]
   13ee8:	ldr	r8, [sp, #16]
   13eec:	ldr	lr, [sp, #20]
   13ef0:	add	sp, sp, #24
   13ef4:	b	10ad4 <sprintf@plt>
   13ef8:	mov	r1, r2
   13efc:	mov	r0, #94	; 0x5e
   13f00:	bl	13d9c <error@@Base+0x1cc0>
   13f04:	sxth	r4, r0
   13f08:	add	r6, r7, r0
   13f0c:	b	13dfc <error@@Base+0x1d20>
   13f10:	ldr	r1, [pc, #24]	; 13f30 <error@@Base+0x1e54>
   13f14:	mov	r2, r5
   13f18:	mov	r0, r6
   13f1c:	add	r1, pc, r1
   13f20:	b	13ee0 <error@@Base+0x1e04>
   13f24:	andeq	r0, r0, ip, ror #19
   13f28:	andeq	r3, r0, ip, ror lr
   13f2c:	andeq	r3, r0, r4, ror #27
   13f30:	muleq	r0, ip, sp
   13f34:	mov	r3, r1
   13f38:	ldr	r1, [pc, #212]	; 14014 <error@@Base+0x1f38>
   13f3c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13f40:	mov	r5, r2
   13f44:	strd	r6, [sp, #8]
   13f48:	mov	r7, r0
   13f4c:	mov	r0, r3
   13f50:	str	lr, [sp, #16]
   13f54:	sub	sp, sp, #20
   13f58:	add	r1, pc, r1
   13f5c:	bl	12200 <error@@Base+0x124>
   13f60:	cmp	r5, #0
   13f64:	mov	r6, r0
   13f68:	beq	13fbc <error@@Base+0x1ee0>
   13f6c:	mov	r3, r0
   13f70:	ldr	r4, [pc, #160]	; 14018 <error@@Base+0x1f3c>
   13f74:	mov	r2, #55	; 0x37
   13f78:	mov	r1, #1
   13f7c:	ldr	r0, [pc, #152]	; 1401c <error@@Base+0x1f40>
   13f80:	add	r4, pc, r4
   13f84:	add	r0, pc, r0
   13f88:	bl	10a14 <fwrite@plt>
   13f8c:	mov	r3, r6
   13f90:	mov	r2, #55	; 0x37
   13f94:	mov	r1, #1
   13f98:	mov	r0, r4
   13f9c:	bl	10a14 <fwrite@plt>
   13fa0:	mov	r0, r6
   13fa4:	blx	r5
   13fa8:	mov	r3, r6
   13fac:	mov	r0, r4
   13fb0:	mov	r2, #55	; 0x37
   13fb4:	mov	r1, #1
   13fb8:	bl	10a14 <fwrite@plt>
   13fbc:	ldr	r4, [r7]
   13fc0:	cmp	r4, #0
   13fc4:	beq	13ff8 <error@@Base+0x1f1c>
   13fc8:	add	r5, sp, #4
   13fcc:	ldrb	r0, [r4, #8]
   13fd0:	mov	r3, #0
   13fd4:	mov	r2, r5
   13fd8:	ldr	r1, [r4, #12]
   13fdc:	bl	13dd0 <error@@Base+0x1cf4>
   13fe0:	mov	r1, r6
   13fe4:	mov	r0, r5
   13fe8:	bl	10aec <fputs@plt>
   13fec:	ldr	r4, [r4, #4]
   13ff0:	cmp	r4, #0
   13ff4:	bne	13fcc <error@@Base+0x1ef0>
   13ff8:	mov	r0, r6
   13ffc:	bl	11f3c <__assert_fail@plt+0x1420>
   14000:	add	sp, sp, #20
   14004:	ldrd	r4, [sp]
   14008:	ldrd	r6, [sp, #8]
   1400c:	add	sp, sp, #16
   14010:	pop	{pc}		; (ldr pc, [sp], #4)
   14014:	andeq	r0, r0, r4, ror r8
   14018:			; <UNDEFINED> instruction: 0x00003cb0
   1401c:	andeq	r3, r0, r4, ror ip
   14020:	strd	r4, [sp, #-20]!	; 0xffffffec
   14024:	mov	r2, #0
   14028:	strd	r6, [sp, #8]
   1402c:	str	lr, [sp, #16]
   14030:	sub	sp, sp, #12
   14034:	ldrb	r3, [r1]
   14038:	str	r2, [sp, #4]
   1403c:	cmp	r3, r2
   14040:	beq	14090 <error@@Base+0x1fb4>
   14044:	mov	r4, r1
   14048:	mov	r5, r0
   1404c:	add	r6, sp, #4
   14050:	b	14068 <error@@Base+0x1f8c>
   14054:	ldr	r2, [sp, #4]
   14058:	bl	13984 <error@@Base+0x18a8>
   1405c:	ldrb	r3, [r4, r7]!
   14060:	cmp	r3, #0
   14064:	beq	14090 <error@@Base+0x1fb4>
   14068:	mvn	r1, #0
   1406c:	mov	r2, r6
   14070:	mov	r0, r4
   14074:	bl	10a2c <utf8proc_iterate@plt>
   14078:	subs	r7, r0, #0
   1407c:	mov	r1, #0
   14080:	mov	r0, r5
   14084:	bgt	14054 <error@@Base+0x1f78>
   14088:	mov	r0, #0
   1408c:	b	14094 <error@@Base+0x1fb8>
   14090:	mov	r0, #1
   14094:	add	sp, sp, #12
   14098:	ldrd	r4, [sp]
   1409c:	ldrd	r6, [sp, #8]
   140a0:	add	sp, sp, #16
   140a4:	pop	{pc}		; (ldr pc, [sp], #4)
   140a8:	ldr	r3, [pc, #400]	; 14240 <error@@Base+0x2164>
   140ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   140b0:	strd	r6, [sp, #8]
   140b4:	ldr	r6, [pc, #392]	; 14244 <error@@Base+0x2168>
   140b8:	strd	r8, [sp, #16]
   140bc:	add	r3, pc, r3
   140c0:	strd	sl, [sp, #24]
   140c4:	str	lr, [sp, #32]
   140c8:	sub	sp, sp, #20
   140cc:	add	r6, pc, r6
   140d0:	str	r0, [sp]
   140d4:	str	r3, [sp, #8]
   140d8:	lsl	r3, r1, #2
   140dc:	str	r1, [sp, #4]
   140e0:	str	r3, [sp, #12]
   140e4:	ldr	r3, [sp]
   140e8:	ldr	r2, [sp, #4]
   140ec:	cmp	r3, r2
   140f0:	ldr	r2, [sp, #8]
   140f4:	ldr	r1, [r2]
   140f8:	ldr	r4, [r1, r3, lsl #2]
   140fc:	bge	14230 <error@@Base+0x2154>
   14100:	ldr	r5, [pc, #320]	; 14248 <error@@Base+0x216c>
   14104:	ldm	sp, {r8, fp}
   14108:	add	r5, pc, r5
   1410c:	mov	r0, r4
   14110:	ldr	r1, [r1, fp, lsl #2]
   14114:	lsl	r9, fp, #2
   14118:	ldr	r3, [r5, #4]
   1411c:	blx	r3
   14120:	cmp	r0, #0
   14124:	bge	141b8 <error@@Base+0x20dc>
   14128:	sub	fp, fp, #1
   1412c:	ldr	r1, [r5]
   14130:	cmp	r8, fp
   14134:	lslge	r9, fp, #2
   14138:	blt	1410c <error@@Base+0x2030>
   1413c:	cmp	fp, r8
   14140:	add	r7, r1, r9
   14144:	beq	141c8 <error@@Base+0x20ec>
   14148:	ldr	r3, [r1, r9]
   1414c:	add	sl, r8, #1
   14150:	lsl	r7, r8, #2
   14154:	cmp	fp, sl
   14158:	str	r3, [r1, r8, lsl #2]
   1415c:	bgt	14174 <error@@Base+0x2098>
   14160:	b	14210 <error@@Base+0x2134>
   14164:	add	sl, sl, #1
   14168:	ldr	r1, [r6]
   1416c:	cmp	fp, sl
   14170:	beq	141c0 <error@@Base+0x20e4>
   14174:	mov	r0, r4
   14178:	ldr	r1, [r1, sl, lsl #2]
   1417c:	lsl	r7, sl, #2
   14180:	ldr	r3, [r6, #4]
   14184:	blx	r3
   14188:	cmp	r0, #0
   1418c:	bgt	14164 <error@@Base+0x2088>
   14190:	ldr	r1, [r6]
   14194:	mov	r8, sl
   14198:	add	r7, r1, r7
   1419c:	ldr	r3, [r7]
   141a0:	sub	fp, fp, #1
   141a4:	cmp	fp, sl
   141a8:	str	r3, [r1, r9]
   141ac:	bgt	1410c <error@@Base+0x2030>
   141b0:	add	r7, r1, fp, lsl #2
   141b4:	b	141cc <error@@Base+0x20f0>
   141b8:	ldr	r1, [r5]
   141bc:	b	1413c <error@@Base+0x2060>
   141c0:	add	r7, r1, r9
   141c4:	mov	r8, fp
   141c8:	mov	fp, r8
   141cc:	ldr	r3, [sp]
   141d0:	sub	r1, fp, #1
   141d4:	str	r4, [r7]
   141d8:	cmp	r3, r1
   141dc:	blt	14224 <error@@Base+0x2148>
   141e0:	ldr	r2, [sp, #4]
   141e4:	add	r3, r8, #1
   141e8:	str	r3, [sp]
   141ec:	cmp	r3, r2
   141f0:	blt	140e4 <error@@Base+0x2008>
   141f4:	add	sp, sp, #20
   141f8:	ldrd	r4, [sp]
   141fc:	ldrd	r6, [sp, #8]
   14200:	ldrd	r8, [sp, #16]
   14204:	ldrd	sl, [sp, #24]
   14208:	add	sp, sp, #32
   1420c:	pop	{pc}		; (ldr pc, [sp], #4)
   14210:	add	r7, r7, #4
   14214:	add	r7, r1, r7
   14218:	beq	141c4 <error@@Base+0x20e8>
   1421c:	mov	r8, sl
   14220:	b	1419c <error@@Base+0x20c0>
   14224:	mov	r0, r3
   14228:	bl	140a8 <error@@Base+0x1fcc>
   1422c:	b	141e0 <error@@Base+0x2104>
   14230:	ldm	sp, {r8, fp}
   14234:	ldr	r3, [sp, #12]
   14238:	add	r7, r1, r3
   1423c:	b	141cc <error@@Base+0x20f0>
   14240:	andeq	r6, r1, r8, lsl #1
   14244:	andeq	r6, r1, r8, ror r0
   14248:	andeq	r6, r1, ip, lsr r0
   1424c:	cmp	r0, #1
   14250:	mov	ip, r1
   14254:	ble	14274 <error@@Base+0x2198>
   14258:	ldr	r3, [pc, #24]	; 14278 <error@@Base+0x219c>
   1425c:	sub	r1, r0, #1
   14260:	mov	r0, #0
   14264:	add	r3, pc, r3
   14268:	str	ip, [r3]
   1426c:	str	r2, [r3, #4]
   14270:	b	140a8 <error@@Base+0x1fcc>
   14274:	bx	lr
   14278:	andeq	r5, r1, r0, ror #29
   1427c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14280:	mov	r7, r0
   14284:	ldr	r6, [pc, #72]	; 142d4 <error@@Base+0x21f8>
   14288:	ldr	r5, [pc, #72]	; 142d8 <error@@Base+0x21fc>
   1428c:	add	r6, pc, r6
   14290:	add	r5, pc, r5
   14294:	sub	r6, r6, r5
   14298:	mov	r8, r1
   1429c:	mov	r9, r2
   142a0:	bl	10958 <calloc@plt-0x20>
   142a4:	asrs	r6, r6, #2
   142a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   142ac:	mov	r4, #0
   142b0:	add	r4, r4, #1
   142b4:	ldr	r3, [r5], #4
   142b8:	mov	r2, r9
   142bc:	mov	r1, r8
   142c0:	mov	r0, r7
   142c4:	blx	r3
   142c8:	cmp	r6, r4
   142cc:	bne	142b0 <error@@Base+0x21d4>
   142d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142d4:			; <UNDEFINED> instruction: 0x00013ab8
   142d8:			; <UNDEFINED> instruction: 0x00013ab0
   142dc:	bx	lr

Disassembly of section .fini:

000142e0 <.fini>:
   142e0:	push	{r3, lr}
   142e4:	pop	{r3, pc}
