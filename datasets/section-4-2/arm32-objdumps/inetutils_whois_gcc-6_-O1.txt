
../repos/inetutils/whois/whois:     file format elf32-littlearm


Disassembly of section .init:

00011098 <.init>:
   11098:	push	{r3, lr}
   1109c:	bl	11400 <__assert_fail@plt+0x48>
   110a0:	pop	{r3, pc}

Disassembly of section .plt:

000110a4 <fdopen@plt-0x14>:
   110a4:	push	{lr}		; (str lr, [sp, #-4]!)
   110a8:	ldr	lr, [pc, #4]	; 110b4 <fdopen@plt-0x4>
   110ac:	add	lr, pc, lr
   110b0:	ldr	pc, [lr, #8]!
   110b4:	andeq	fp, r1, ip, asr #30

000110b8 <fdopen@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #110592	; 0x1b000
   110c0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110c4 <calloc@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #110592	; 0x1b000
   110cc:	ldr	pc, [ip, #3908]!	; 0xf44

000110d0 <fputs_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #110592	; 0x1b000
   110d8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110dc <raise@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #110592	; 0x1b000
   110e4:	ldr	pc, [ip, #3892]!	; 0xf34

000110e8 <inet_aton@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #110592	; 0x1b000
   110f0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110f4 <strcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #110592	; 0x1b000
   110fc:	ldr	pc, [ip, #3876]!	; 0xf24

00011100 <strtol@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #110592	; 0x1b000
   11108:	ldr	pc, [ip, #3868]!	; 0xf1c

0001110c <printf@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #110592	; 0x1b000
   11114:	ldr	pc, [ip, #3860]!	; 0xf14

00011118 <memmove@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #110592	; 0x1b000
   11120:	ldr	pc, [ip, #3852]!	; 0xf0c

00011124 <strchrnul@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #110592	; 0x1b000
   1112c:	ldr	pc, [ip, #3844]!	; 0xf04

00011130 <free@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #110592	; 0x1b000
   11138:	ldr	pc, [ip, #3836]!	; 0xefc

0001113c <gai_strerror@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #110592	; 0x1b000
   11144:	ldr	pc, [ip, #3828]!	; 0xef4

00011148 <fgets@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #110592	; 0x1b000
   11150:	ldr	pc, [ip, #3820]!	; 0xeec

00011154 <ferror@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #110592	; 0x1b000
   1115c:	ldr	pc, [ip, #3812]!	; 0xee4

00011160 <strndup@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #110592	; 0x1b000
   11168:	ldr	pc, [ip, #3804]!	; 0xedc

0001116c <memcpy@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #110592	; 0x1b000
   11174:	ldr	pc, [ip, #3796]!	; 0xed4

00011178 <signal@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #110592	; 0x1b000
   11180:	ldr	pc, [ip, #3788]!	; 0xecc

00011184 <fwrite_unlocked@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #110592	; 0x1b000
   1118c:	ldr	pc, [ip, #3780]!	; 0xec4

00011190 <sleep@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #110592	; 0x1b000
   11198:	ldr	pc, [ip, #3772]!	; 0xebc

0001119c <realloc@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #110592	; 0x1b000
   111a4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111a8 <strcasecmp@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #110592	; 0x1b000
   111b0:	ldr	pc, [ip, #3756]!	; 0xeac

000111b4 <funlockfile@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #110592	; 0x1b000
   111bc:	ldr	pc, [ip, #3748]!	; 0xea4

000111c0 <fwrite@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #110592	; 0x1b000
   111c8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111cc <strcat@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #110592	; 0x1b000
   111d4:	ldr	pc, [ip, #3732]!	; 0xe94

000111d8 <strcpy@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #110592	; 0x1b000
   111e0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111e4 <error@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3716]!	; 0xe84

000111f0 <getenv@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111fc <puts@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3700]!	; 0xe74

00011208 <malloc@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3692]!	; 0xe6c

00011214 <__libc_start_main@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3684]!	; 0xe64

00011220 <strerror@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3676]!	; 0xe5c

0001122c <__ctype_tolower_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3668]!	; 0xe54

00011238 <__gmon_start__@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3660]!	; 0xe4c

00011244 <mempcpy@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3652]!	; 0xe44

00011250 <__ctype_b_loc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3644]!	; 0xe3c

0001125c <exit@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3636]!	; 0xe34

00011268 <strlen@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3628]!	; 0xe2c

00011274 <strchr@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3620]!	; 0xe24

00011280 <fprintf@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3612]!	; 0xe1c

0001128c <__errno_location@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3604]!	; 0xe14

00011298 <strncasecmp@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112a4 <strerror_r@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3588]!	; 0xe04

000112b0 <memset@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112bc <write@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112c8 <memchr@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3564]!	; 0xdec

000112d4 <__overflow@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3556]!	; 0xde4

000112e0 <strrchr@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ec <vfprintf@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112f8 <fputc@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3532]!	; 0xdcc

00011304 <sscanf@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011310 <sprintf@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3516]!	; 0xdbc

0001131c <flockfile@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3508]!	; 0xdb4

00011328 <vsnprintf@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3500]!	; 0xdac

00011334 <qsort@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3492]!	; 0xda4

00011340 <strpbrk@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3484]!	; 0xd9c

0001134c <freeaddrinfo@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3476]!	; 0xd94

00011358 <getaddrinfo@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3468]!	; 0xd8c

00011364 <socket@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3460]!	; 0xd84

00011370 <gethostbyname@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3452]!	; 0xd7c

0001137c <fputs@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3444]!	; 0xd74

00011388 <strncmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3436]!	; 0xd6c

00011394 <abort@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3428]!	; 0xd64

000113a0 <close@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3420]!	; 0xd5c

000113ac <connect@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3412]!	; 0xd54

000113b8 <__assert_fail@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3404]!	; 0xd4c

Disassembly of section .text:

000113c4 <argp_parse@@Base-0x1e20>:
   113c4:	mov	fp, #0
   113c8:	mov	lr, #0
   113cc:	pop	{r1}		; (ldr r1, [sp], #4)
   113d0:	mov	r2, sp
   113d4:	push	{r2}		; (str r2, [sp, #-4]!)
   113d8:	push	{r0}		; (str r0, [sp, #-4]!)
   113dc:	ldr	ip, [pc, #16]	; 113f4 <__assert_fail@plt+0x3c>
   113e0:	push	{ip}		; (str ip, [sp, #-4]!)
   113e4:	ldr	r0, [pc, #12]	; 113f8 <__assert_fail@plt+0x40>
   113e8:	ldr	r3, [pc, #12]	; 113fc <__assert_fail@plt+0x44>
   113ec:	bl	11214 <__libc_start_main@plt>
   113f0:	bl	11394 <abort@plt>
   113f4:	strdeq	r9, [r1], -ip
   113f8:	ldrdeq	r2, [r1], -ip
   113fc:	muleq	r1, ip, r7
   11400:	ldr	r3, [pc, #20]	; 1141c <__assert_fail@plt+0x64>
   11404:	ldr	r2, [pc, #20]	; 11420 <__assert_fail@plt+0x68>
   11408:	add	r3, pc, r3
   1140c:	ldr	r2, [r3, r2]
   11410:	cmp	r2, #0
   11414:	bxeq	lr
   11418:	b	11238 <__gmon_start__@plt>
   1141c:	strdeq	fp, [r1], -r0
   11420:	andeq	r0, r0, r0, lsl r1
   11424:	ldr	r3, [pc, #28]	; 11448 <__assert_fail@plt+0x90>
   11428:	ldr	r0, [pc, #28]	; 1144c <__assert_fail@plt+0x94>
   1142c:	sub	r3, r3, r0
   11430:	cmp	r3, #6
   11434:	bxls	lr
   11438:	ldr	r3, [pc, #16]	; 11450 <__assert_fail@plt+0x98>
   1143c:	cmp	r3, #0
   11440:	bxeq	lr
   11444:	bx	r3
   11448:			; <UNDEFINED> instruction: 0x000308b3
   1144c:			; <UNDEFINED> instruction: 0x000308b0
   11450:	andeq	r0, r0, r0
   11454:	ldr	r1, [pc, #36]	; 11480 <__assert_fail@plt+0xc8>
   11458:	ldr	r0, [pc, #36]	; 11484 <__assert_fail@plt+0xcc>
   1145c:	sub	r1, r1, r0
   11460:	asr	r1, r1, #2
   11464:	add	r1, r1, r1, lsr #31
   11468:	asrs	r1, r1, #1
   1146c:	bxeq	lr
   11470:	ldr	r3, [pc, #16]	; 11488 <__assert_fail@plt+0xd0>
   11474:	cmp	r3, #0
   11478:	bxeq	lr
   1147c:	bx	r3
   11480:			; <UNDEFINED> instruction: 0x000308b0
   11484:			; <UNDEFINED> instruction: 0x000308b0
   11488:	andeq	r0, r0, r0
   1148c:	push	{r4, lr}
   11490:	ldr	r4, [pc, #24]	; 114b0 <__assert_fail@plt+0xf8>
   11494:	ldrb	r3, [r4]
   11498:	cmp	r3, #0
   1149c:	popne	{r4, pc}
   114a0:	bl	11424 <__assert_fail@plt+0x6c>
   114a4:	mov	r3, #1
   114a8:	strb	r3, [r4]
   114ac:	pop	{r4, pc}
   114b0:	andeq	r0, r3, r0, asr #17
   114b4:	ldr	r0, [pc, #40]	; 114e4 <__assert_fail@plt+0x12c>
   114b8:	ldr	r3, [r0]
   114bc:	cmp	r3, #0
   114c0:	bne	114c8 <__assert_fail@plt+0x110>
   114c4:	b	11454 <__assert_fail@plt+0x9c>
   114c8:	ldr	r3, [pc, #24]	; 114e8 <__assert_fail@plt+0x130>
   114cc:	cmp	r3, #0
   114d0:	beq	114c4 <__assert_fail@plt+0x10c>
   114d4:	push	{r4, lr}
   114d8:	blx	r3
   114dc:	pop	{r4, lr}
   114e0:	b	11454 <__assert_fail@plt+0x9c>
   114e4:	andeq	ip, r2, r4, lsl pc
   114e8:	andeq	r0, r0, r0
   114ec:	sub	r3, r0, #1
   114f0:	cmp	r3, #126	; 0x7e
   114f4:	bls	11500 <__assert_fail@plt+0x148>
   114f8:	mov	r0, #7
   114fc:	bx	lr
   11500:	push	{r4, r5, r6, lr}
   11504:	bic	r3, r0, #2
   11508:	cmp	r0, #113	; 0x71
   1150c:	cmpne	r3, #116	; 0x74
   11510:	moveq	r2, #1
   11514:	ldreq	r3, [pc, #284]	; 11638 <__assert_fail@plt+0x280>
   11518:	streq	r2, [r3]
   1151c:	mov	r5, r1
   11520:	mov	r4, r0
   11524:	ldr	r3, [pc, #272]	; 1163c <__assert_fail@plt+0x284>
   11528:	ldr	r2, [r3, #16]
   1152c:	ldr	r3, [r3, #12]
   11530:	cmp	r2, r3
   11534:	beq	115f0 <__assert_fail@plt+0x238>
   11538:	ldr	r3, [pc, #252]	; 1163c <__assert_fail@plt+0x284>
   1153c:	ldr	r2, [r3, #12]
   11540:	add	r1, r2, #1
   11544:	str	r1, [r3, #12]
   11548:	mov	r1, #45	; 0x2d
   1154c:	strb	r1, [r2]
   11550:	ldr	r2, [r3, #16]
   11554:	ldr	r3, [r3, #12]
   11558:	cmp	r2, r3
   1155c:	beq	11600 <__assert_fail@plt+0x248>
   11560:	ldr	r2, [pc, #212]	; 1163c <__assert_fail@plt+0x284>
   11564:	ldr	r3, [r2, #12]
   11568:	add	r1, r3, #1
   1156c:	str	r1, [r2, #12]
   11570:	strb	r4, [r3]
   11574:	cmp	r5, #0
   11578:	beq	11630 <__assert_fail@plt+0x278>
   1157c:	mov	r3, r2
   11580:	ldr	r2, [r2, #16]
   11584:	ldr	r3, [r3, #12]
   11588:	cmp	r2, r3
   1158c:	beq	11610 <__assert_fail@plt+0x258>
   11590:	ldr	r4, [pc, #164]	; 1163c <__assert_fail@plt+0x284>
   11594:	ldr	r3, [r4, #12]
   11598:	add	r2, r3, #1
   1159c:	str	r2, [r4, #12]
   115a0:	mov	r2, #32
   115a4:	strb	r2, [r3]
   115a8:	mov	r0, r5
   115ac:	bl	11268 <strlen@plt>
   115b0:	mov	r6, r0
   115b4:	ldr	r3, [r4, #16]
   115b8:	ldr	r2, [r4, #12]
   115bc:	sub	r3, r3, r2
   115c0:	cmp	r0, r3
   115c4:	bhi	11620 <__assert_fail@plt+0x268>
   115c8:	ldr	r4, [pc, #108]	; 1163c <__assert_fail@plt+0x284>
   115cc:	mov	r2, r6
   115d0:	mov	r1, r5
   115d4:	ldr	r0, [r4, #12]
   115d8:	bl	1116c <memcpy@plt>
   115dc:	ldr	r3, [r4, #12]
   115e0:	add	r6, r3, r6
   115e4:	str	r6, [r4, #12]
   115e8:	mov	r0, #0
   115ec:	pop	{r4, r5, r6, pc}
   115f0:	mov	r1, #1
   115f4:	ldr	r0, [pc, #64]	; 1163c <__assert_fail@plt+0x284>
   115f8:	bl	14060 <_obstack_newchunk@@Base>
   115fc:	b	11538 <__assert_fail@plt+0x180>
   11600:	mov	r1, #1
   11604:	ldr	r0, [pc, #48]	; 1163c <__assert_fail@plt+0x284>
   11608:	bl	14060 <_obstack_newchunk@@Base>
   1160c:	b	11560 <__assert_fail@plt+0x1a8>
   11610:	mov	r1, #1
   11614:	ldr	r0, [pc, #32]	; 1163c <__assert_fail@plt+0x284>
   11618:	bl	14060 <_obstack_newchunk@@Base>
   1161c:	b	11590 <__assert_fail@plt+0x1d8>
   11620:	mov	r1, r0
   11624:	mov	r0, r4
   11628:	bl	14060 <_obstack_newchunk@@Base>
   1162c:	b	115c8 <__assert_fail@plt+0x210>
   11630:	mov	r0, #0
   11634:	pop	{r4, r5, r6, pc}
   11638:	andeq	r0, r3, r4, asr #17
   1163c:	andeq	r0, r3, ip, lsl #18
   11640:	push	{r4, r5, r6, lr}
   11644:	mov	r6, r1
   11648:	sub	r0, r0, #72	; 0x48
   1164c:	cmp	r0, #40	; 0x28
   11650:	ldrls	pc, [pc, r0, lsl #2]
   11654:	b	117a0 <__assert_fail@plt+0x3e8>
   11658:	andeq	r1, r1, ip, ror #14
   1165c:	andeq	r1, r1, r0, lsr #15
   11660:	andeq	r1, r1, r0, lsr #15
   11664:	andeq	r1, r1, r0, lsr #15
   11668:	andeq	r1, r1, r0, lsr #15
   1166c:	andeq	r1, r1, r0, lsr #15
   11670:	andeq	r1, r1, r0, lsr #15
   11674:	andeq	r1, r1, r0, lsr #15
   11678:	andeq	r1, r1, r0, lsr #15
   1167c:	andeq	r1, r1, r0, lsr #15
   11680:	andeq	r1, r1, r0, lsr #15
   11684:	andeq	r1, r1, r0, lsr #15
   11688:	andeq	r1, r1, r0, lsr #15
   1168c:	andeq	r1, r1, r0, lsr #15
   11690:	andeq	r1, r1, ip, lsl #15
   11694:	andeq	r1, r1, r0, lsr #15
   11698:	andeq	r1, r1, r0, lsr #15
   1169c:	andeq	r1, r1, r0, lsr #15
   116a0:	andeq	r1, r1, r0, lsr #15
   116a4:	andeq	r1, r1, r0, lsr #15
   116a8:	andeq	r1, r1, r0, lsr #15
   116ac:	andeq	r1, r1, r0, lsr #15
   116b0:	andeq	r1, r1, r0, lsr #15
   116b4:	andeq	r1, r1, r0, lsr #15
   116b8:	andeq	r1, r1, r0, lsr #15
   116bc:	andeq	r1, r1, r0, lsr #15
   116c0:	andeq	r1, r1, r0, lsr #15
   116c4:	andeq	r1, r1, r0, lsr #15
   116c8:	andeq	r1, r1, r0, lsr #15
   116cc:	andeq	r1, r1, r0, lsr #15
   116d0:	andeq	r1, r1, r0, lsr #15
   116d4:	andeq	r1, r1, r0, lsr #15
   116d8:	strdeq	r1, [r1], -ip
   116dc:	andeq	r1, r1, r0, lsr #15
   116e0:	andeq	r1, r1, r0, lsr #15
   116e4:	andeq	r1, r1, r0, lsr #15
   116e8:	andeq	r1, r1, r0, lsr #15
   116ec:	andeq	r1, r1, r0, lsr #15
   116f0:	andeq	r1, r1, r0, lsr #15
   116f4:	andeq	r1, r1, r0, lsr #15
   116f8:	andeq	r1, r1, ip, ror r7
   116fc:	mov	r0, r1
   11700:	bl	11268 <strlen@plt>
   11704:	add	r0, r0, #1
   11708:	bl	14734 <_obstack_memory_used@@Base+0x50c>
   1170c:	mov	r5, r0
   11710:	ldr	r3, [pc, #144]	; 117a8 <__assert_fail@plt+0x3f0>
   11714:	str	r0, [r3, #4]
   11718:	ldrb	r4, [r6]
   1171c:	cmp	r4, #0
   11720:	cmpne	r4, #58	; 0x3a
   11724:	beq	11750 <__assert_fail@plt+0x398>
   11728:	bl	1122c <__ctype_tolower_loc@plt>
   1172c:	ldr	r1, [r0]
   11730:	add	r3, r6, #1
   11734:	mov	r6, r3
   11738:	ldr	r2, [r1, r4, lsl #2]
   1173c:	strb	r2, [r5], #1
   11740:	ldrb	r4, [r3], #1
   11744:	cmp	r4, #0
   11748:	cmpne	r4, #58	; 0x3a
   1174c:	bne	11734 <__assert_fail@plt+0x37c>
   11750:	cmp	r4, #58	; 0x3a
   11754:	addeq	r6, r6, #1
   11758:	ldreq	r3, [pc, #72]	; 117a8 <__assert_fail@plt+0x3f0>
   1175c:	streq	r6, [r3, #8]
   11760:	mov	r0, #0
   11764:	strb	r0, [r5]
   11768:	pop	{r4, r5, r6, pc}
   1176c:	mov	r0, #0
   11770:	ldr	r3, [pc, #52]	; 117ac <__assert_fail@plt+0x3f4>
   11774:	str	r0, [r3]
   11778:	pop	{r4, r5, r6, pc}
   1177c:	ldr	r3, [pc, #36]	; 117a8 <__assert_fail@plt+0x3f0>
   11780:	str	r1, [r3, #8]
   11784:	mov	r0, #0
   11788:	pop	{r4, r5, r6, pc}
   1178c:	mov	r2, #1
   11790:	ldr	r3, [pc, #16]	; 117a8 <__assert_fail@plt+0x3f0>
   11794:	str	r2, [r3, #12]
   11798:	mov	r0, #0
   1179c:	pop	{r4, r5, r6, pc}
   117a0:	mov	r0, #7
   117a4:	pop	{r4, r5, r6, pc}
   117a8:	andeq	r0, r3, r4, asr #17
   117ac:	andeq	sp, r2, ip, lsl r1
   117b0:	push	{r4, r5, r6, lr}
   117b4:	mov	r5, r0
   117b8:	mov	r4, r1
   117bc:	ldr	r3, [pc, #96]	; 11824 <__assert_fail@plt+0x46c>
   117c0:	cmp	r0, r3
   117c4:	bgt	117dc <__assert_fail@plt+0x424>
   117c8:	ldr	r0, [r4, #4]
   117cc:	cmp	r0, #0
   117d0:	beq	1181c <__assert_fail@plt+0x464>
   117d4:	add	r1, r4, #8
   117d8:	b	117f8 <__assert_fail@plt+0x440>
   117dc:	ldr	r0, [pc, #68]	; 11828 <__assert_fail@plt+0x470>
   117e0:	bl	111fc <puts@plt>
   117e4:	b	117c8 <__assert_fail@plt+0x410>
   117e8:	add	r1, r1, #8
   117ec:	ldr	r0, [r1, #-4]
   117f0:	cmp	r0, #0
   117f4:	beq	11814 <__assert_fail@plt+0x45c>
   117f8:	ldrh	r3, [r1, #-8]
   117fc:	cmp	r5, r3
   11800:	blt	117e8 <__assert_fail@plt+0x430>
   11804:	ldrh	r3, [r1, #-6]
   11808:	cmp	r5, r3
   1180c:	bgt	117e8 <__assert_fail@plt+0x430>
   11810:	pop	{r4, r5, r6, pc}
   11814:	ldr	r0, [pc, #16]	; 1182c <__assert_fail@plt+0x474>
   11818:	pop	{r4, r5, r6, pc}
   1181c:	ldr	r0, [pc, #8]	; 1182c <__assert_fail@plt+0x474>
   11820:	pop	{r4, r5, r6, pc}
   11824:	andeq	r1, r6, pc, asr #7
   11828:	andeq	r9, r1, ip, lsl r8
   1182c:	andeq	r9, r1, ip, lsl #16
   11830:	push	{r4, r5, r6, r7, lr}
   11834:	sub	sp, sp, #12
   11838:	mov	r5, r0
   1183c:	mov	r6, r1
   11840:	add	r1, sp, #4
   11844:	mov	r0, r6
   11848:	bl	110e8 <inet_aton@plt>
   1184c:	mov	r7, r0
   11850:	ldr	r4, [r5]
   11854:	cmp	r4, #0
   11858:	bne	11870 <__assert_fail@plt+0x4b8>
   1185c:	mov	r0, #0
   11860:	b	118d8 <__assert_fail@plt+0x520>
   11864:	ldr	r4, [r5, #4]!
   11868:	cmp	r4, #0
   1186c:	beq	118e0 <__assert_fail@plt+0x528>
   11870:	mov	r1, r6
   11874:	mov	r0, r4
   11878:	bl	110f4 <strcmp@plt>
   1187c:	cmp	r0, #0
   11880:	beq	118e8 <__assert_fail@plt+0x530>
   11884:	cmp	r7, #0
   11888:	beq	11864 <__assert_fail@plt+0x4ac>
   1188c:	mov	r0, r4
   11890:	bl	11370 <gethostbyname@plt>
   11894:	cmp	r0, #0
   11898:	beq	11864 <__assert_fail@plt+0x4ac>
   1189c:	ldr	r2, [r0, #16]
   118a0:	ldr	r3, [r2]
   118a4:	cmp	r3, #0
   118a8:	beq	11864 <__assert_fail@plt+0x4ac>
   118ac:	ldr	r1, [sp, #4]
   118b0:	ldr	r3, [r3]
   118b4:	cmp	r3, r1
   118b8:	beq	118f0 <__assert_fail@plt+0x538>
   118bc:	ldr	r3, [r2, #4]!
   118c0:	cmp	r3, #0
   118c4:	beq	11864 <__assert_fail@plt+0x4ac>
   118c8:	ldr	r3, [r3]
   118cc:	cmp	r3, r1
   118d0:	bne	118bc <__assert_fail@plt+0x504>
   118d4:	mov	r0, #1
   118d8:	add	sp, sp, #12
   118dc:	pop	{r4, r5, r6, r7, pc}
   118e0:	mov	r0, #0
   118e4:	b	118d8 <__assert_fail@plt+0x520>
   118e8:	mov	r0, #1
   118ec:	b	118d8 <__assert_fail@plt+0x520>
   118f0:	mov	r0, #1
   118f4:	b	118d8 <__assert_fail@plt+0x520>
   118f8:	push	{r4, r5, r6, r7, r8, lr}
   118fc:	mov	r5, r0
   11900:	mov	r7, r1
   11904:	mov	r6, r2
   11908:	mov	r0, r1
   1190c:	bl	11268 <strlen@plt>
   11910:	mov	r4, r0
   11914:	mov	r0, r6
   11918:	bl	11268 <strlen@plt>
   1191c:	add	r0, r4, r0
   11920:	add	r0, r0, #13
   11924:	bl	14734 <_obstack_memory_used@@Base+0x50c>
   11928:	mov	r4, r0
   1192c:	mov	r3, #0
   11930:	strb	r3, [r0]
   11934:	mov	r1, r5
   11938:	ldr	r0, [pc, #528]	; 11b50 <__assert_fail@plt+0x798>
   1193c:	bl	11830 <__assert_fail@plt+0x478>
   11940:	cmp	r0, #0
   11944:	beq	11a4c <__assert_fail@plt+0x694>
   11948:	mov	r0, r4
   1194c:	bl	11268 <strlen@plt>
   11950:	mov	ip, r0
   11954:	add	r2, r4, r0
   11958:	ldr	r3, [pc, #500]	; 11b54 <__assert_fail@plt+0x79c>
   1195c:	ldm	r3!, {r0, r1}
   11960:	str	r0, [r4, ip]
   11964:	str	r1, [r2, #4]
   11968:	ldrb	r3, [r3]
   1196c:	strb	r3, [r2, #8]
   11970:	ldrb	r3, [r7]
   11974:	cmp	r3, #0
   11978:	beq	11a38 <__assert_fail@plt+0x680>
   1197c:	mov	r8, #1
   11980:	mov	r1, r7
   11984:	mov	r0, r4
   11988:	bl	111cc <strcat@plt>
   1198c:	cmp	r8, #0
   11990:	bne	11a38 <__assert_fail@plt+0x680>
   11994:	ldr	r1, [pc, #444]	; 11b58 <__assert_fail@plt+0x7a0>
   11998:	mov	r0, r5
   1199c:	bl	110f4 <strcmp@plt>
   119a0:	cmp	r0, #0
   119a4:	beq	119bc <__assert_fail@plt+0x604>
   119a8:	ldr	r1, [pc, #428]	; 11b5c <__assert_fail@plt+0x7a4>
   119ac:	mov	r0, r5
   119b0:	bl	110f4 <strcmp@plt>
   119b4:	cmp	r0, #0
   119b8:	bne	119e8 <__assert_fail@plt+0x630>
   119bc:	mov	r2, #2
   119c0:	ldr	r1, [pc, #408]	; 11b60 <__assert_fail@plt+0x7a8>
   119c4:	mov	r0, r6
   119c8:	bl	11298 <strncasecmp@plt>
   119cc:	cmp	r0, #0
   119d0:	bne	119e8 <__assert_fail@plt+0x630>
   119d4:	ldrb	r3, [r6, #2]
   119d8:	sub	r3, r3, #48	; 0x30
   119dc:	uxtb	r3, r3
   119e0:	cmp	r3, #9
   119e4:	bls	11acc <__assert_fail@plt+0x714>
   119e8:	ldr	r1, [pc, #372]	; 11b64 <__assert_fail@plt+0x7ac>
   119ec:	mov	r0, r5
   119f0:	bl	110f4 <strcmp@plt>
   119f4:	cmp	r0, #0
   119f8:	beq	11ae0 <__assert_fail@plt+0x728>
   119fc:	ldr	r1, [pc, #356]	; 11b68 <__assert_fail@plt+0x7b0>
   11a00:	mov	r0, r5
   11a04:	bl	110f4 <strcmp@plt>
   11a08:	cmp	r0, #0
   11a0c:	bne	11a24 <__assert_fail@plt+0x66c>
   11a10:	mov	r1, #32
   11a14:	mov	r0, r6
   11a18:	bl	11274 <strchr@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	11af4 <__assert_fail@plt+0x73c>
   11a24:	ldr	r1, [pc, #320]	; 11b6c <__assert_fail@plt+0x7b4>
   11a28:	mov	r0, r5
   11a2c:	bl	110f4 <strcmp@plt>
   11a30:	cmp	r0, #0
   11a34:	beq	11b08 <__assert_fail@plt+0x750>
   11a38:	mov	r1, r6
   11a3c:	mov	r0, r4
   11a40:	bl	111cc <strcat@plt>
   11a44:	mov	r0, r4
   11a48:	pop	{r4, r5, r6, r7, r8, pc}
   11a4c:	mov	r1, r5
   11a50:	ldr	r0, [pc, #280]	; 11b70 <__assert_fail@plt+0x7b8>
   11a54:	bl	11830 <__assert_fail@plt+0x478>
   11a58:	cmp	r0, #0
   11a5c:	movne	r8, #1
   11a60:	moveq	r8, #0
   11a64:	bne	11a94 <__assert_fail@plt+0x6dc>
   11a68:	ldrb	r3, [r7]
   11a6c:	cmp	r3, #0
   11a70:	beq	11994 <__assert_fail@plt+0x5dc>
   11a74:	ldr	r1, [pc, #232]	; 11b64 <__assert_fail@plt+0x7ac>
   11a78:	mov	r0, r5
   11a7c:	bl	110f4 <strcmp@plt>
   11a80:	subs	r8, r0, #0
   11a84:	beq	11980 <__assert_fail@plt+0x5c8>
   11a88:	ldr	r0, [pc, #228]	; 11b74 <__assert_fail@plt+0x7bc>
   11a8c:	bl	111fc <puts@plt>
   11a90:	b	11994 <__assert_fail@plt+0x5dc>
   11a94:	mov	r0, r4
   11a98:	bl	11268 <strlen@plt>
   11a9c:	mov	ip, r0
   11aa0:	add	r2, r4, r0
   11aa4:	ldr	r3, [pc, #168]	; 11b54 <__assert_fail@plt+0x79c>
   11aa8:	ldm	r3!, {r0, r1}
   11aac:	str	r0, [r4, ip]
   11ab0:	str	r1, [r2, #4]
   11ab4:	ldrb	r3, [r3]
   11ab8:	strb	r3, [r2, #8]
   11abc:	ldrb	r3, [r7]
   11ac0:	cmp	r3, #0
   11ac4:	bne	11980 <__assert_fail@plt+0x5c8>
   11ac8:	b	1198c <__assert_fail@plt+0x5d4>
   11acc:	add	r2, r6, #2
   11ad0:	ldr	r1, [pc, #160]	; 11b78 <__assert_fail@plt+0x7c0>
   11ad4:	mov	r0, r4
   11ad8:	bl	11310 <sprintf@plt>
   11adc:	b	11a44 <__assert_fail@plt+0x68c>
   11ae0:	mov	r2, r6
   11ae4:	ldr	r1, [pc, #144]	; 11b7c <__assert_fail@plt+0x7c4>
   11ae8:	mov	r0, r4
   11aec:	bl	11310 <sprintf@plt>
   11af0:	b	11a44 <__assert_fail@plt+0x68c>
   11af4:	mov	r2, r6
   11af8:	ldr	r1, [pc, #128]	; 11b80 <__assert_fail@plt+0x7c8>
   11afc:	mov	r0, r4
   11b00:	bl	11310 <sprintf@plt>
   11b04:	b	11a44 <__assert_fail@plt+0x68c>
   11b08:	ldr	r0, [pc, #116]	; 11b84 <__assert_fail@plt+0x7cc>
   11b0c:	bl	111f0 <getenv@plt>
   11b10:	cmp	r0, #0
   11b14:	beq	11b2c <__assert_fail@plt+0x774>
   11b18:	mov	r2, #2
   11b1c:	ldr	r1, [pc, #100]	; 11b88 <__assert_fail@plt+0x7d0>
   11b20:	bl	11388 <strncmp@plt>
   11b24:	cmp	r0, #0
   11b28:	beq	11b40 <__assert_fail@plt+0x788>
   11b2c:	mov	r2, r6
   11b30:	ldr	r1, [pc, #84]	; 11b8c <__assert_fail@plt+0x7d4>
   11b34:	mov	r0, r4
   11b38:	bl	11310 <sprintf@plt>
   11b3c:	b	11a44 <__assert_fail@plt+0x68c>
   11b40:	mov	r1, r6
   11b44:	mov	r0, r4
   11b48:	bl	111cc <strcat@plt>
   11b4c:	b	11a44 <__assert_fail@plt+0x68c>
   11b50:	andeq	sp, r2, r0, lsr #2
   11b54:	andeq	r9, r1, ip, asr #16
   11b58:	andeq	r9, r1, ip, lsl #16
   11b5c:	andeq	r9, r1, r4, lsr #17
   11b60:			; <UNDEFINED> instruction: 0x000198b4
   11b64:	andeq	r9, r1, r8, asr r8
   11b68:	ldrdeq	r9, [r1], -r0
   11b6c:	strdeq	r9, [r1], -r0
   11b70:	andeq	sp, r2, ip, asr r1
   11b74:	andeq	r9, r1, ip, ror #16
   11b78:			; <UNDEFINED> instruction: 0x000198b8
   11b7c:	andeq	r9, r1, r0, asr #17
   11b80:	andeq	r9, r1, r4, ror #17
   11b84:	andeq	r9, r1, r0, lsl #18
   11b88:	andeq	r9, r1, r8, lsl #18
   11b8c:	andeq	r9, r1, ip, lsl #18
   11b90:	push	{r4, lr}
   11b94:	bl	113a0 <close@plt>
   11b98:	pop	{r4, pc}
   11b9c:	push	{r4, r5, r6, r7, r8, lr}
   11ba0:	ldrb	r3, [r0]
   11ba4:	cmp	r3, #0
   11ba8:	beq	11c34 <__assert_fail@plt+0x87c>
   11bac:	mov	r3, r0
   11bb0:	ldrb	r2, [r3, #1]!
   11bb4:	cmp	r2, #0
   11bb8:	bne	11bb0 <__assert_fail@plt+0x7f8>
   11bbc:	sub	r5, r3, #1
   11bc0:	ldrb	r3, [r1]
   11bc4:	cmp	r3, #0
   11bc8:	beq	11c3c <__assert_fail@plt+0x884>
   11bcc:	mov	r4, r1
   11bd0:	ldrb	r3, [r4, #1]!
   11bd4:	cmp	r3, #0
   11bd8:	bne	11bd0 <__assert_fail@plt+0x818>
   11bdc:	sub	r4, r4, #1
   11be0:	cmp	r0, r5
   11be4:	cmpls	r1, r4
   11be8:	bhi	11c4c <__assert_fail@plt+0x894>
   11bec:	mov	r6, r1
   11bf0:	mov	r7, r0
   11bf4:	bl	1122c <__ctype_tolower_loc@plt>
   11bf8:	ldr	r1, [r0]
   11bfc:	mov	r3, r5
   11c00:	ldrb	ip, [r3], #-1
   11c04:	ldrb	r2, [r4]
   11c08:	ldr	ip, [r1, ip, lsl #2]
   11c0c:	cmp	ip, r2
   11c10:	bne	11c44 <__assert_fail@plt+0x88c>
   11c14:	cmp	r6, r4
   11c18:	beq	11c54 <__assert_fail@plt+0x89c>
   11c1c:	sub	r4, r4, #1
   11c20:	cmp	r7, r3
   11c24:	cmpls	r6, r4
   11c28:	bls	11c00 <__assert_fail@plt+0x848>
   11c2c:	mov	r0, #0
   11c30:	pop	{r4, r5, r6, r7, r8, pc}
   11c34:	mov	r3, r0
   11c38:	b	11bbc <__assert_fail@plt+0x804>
   11c3c:	mov	r4, r1
   11c40:	b	11bdc <__assert_fail@plt+0x824>
   11c44:	mov	r0, #0
   11c48:	pop	{r4, r5, r6, r7, r8, pc}
   11c4c:	mov	r0, #0
   11c50:	pop	{r4, r5, r6, r7, r8, pc}
   11c54:	mov	r0, #1
   11c58:	pop	{r4, r5, r6, r7, r8, pc}
   11c5c:	push	{r4, r5, r6, lr}
   11c60:	mov	r4, r1
   11c64:	ldr	r1, [r1]
   11c68:	cmp	r1, #0
   11c6c:	beq	11c94 <__assert_fail@plt+0x8dc>
   11c70:	mov	r5, r0
   11c74:	mov	r0, r5
   11c78:	bl	11b9c <__assert_fail@plt+0x7e4>
   11c7c:	cmp	r0, #0
   11c80:	bne	11c9c <__assert_fail@plt+0x8e4>
   11c84:	ldr	r1, [r4, #4]!
   11c88:	cmp	r1, #0
   11c8c:	bne	11c74 <__assert_fail@plt+0x8bc>
   11c90:	pop	{r4, r5, r6, pc}
   11c94:	mov	r0, #0
   11c98:	pop	{r4, r5, r6, pc}
   11c9c:	mov	r0, #1
   11ca0:	pop	{r4, r5, r6, pc}
   11ca4:	cmp	r0, #0
   11ca8:	beq	11d0c <__assert_fail@plt+0x954>
   11cac:	push	{lr}		; (str lr, [sp, #-4]!)
   11cb0:	sub	sp, sp, #28
   11cb4:	add	r3, sp, #8
   11cb8:	str	r3, [sp, #4]
   11cbc:	add	r3, sp, #12
   11cc0:	str	r3, [sp]
   11cc4:	add	r3, sp, #16
   11cc8:	add	r2, sp, #20
   11ccc:	ldr	r1, [pc, #64]	; 11d14 <__assert_fail@plt+0x95c>
   11cd0:	bl	11304 <sscanf@plt>
   11cd4:	cmp	r0, #4
   11cd8:	movne	r0, #0
   11cdc:	beq	11ce8 <__assert_fail@plt+0x930>
   11ce0:	add	sp, sp, #28
   11ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ce8:	ldr	r0, [sp, #16]
   11cec:	lsl	r0, r0, #16
   11cf0:	ldr	r3, [sp, #20]
   11cf4:	add	r0, r0, r3, lsl #24
   11cf8:	ldr	r3, [sp, #12]
   11cfc:	add	r0, r0, r3, lsl #8
   11d00:	ldr	r3, [sp, #8]
   11d04:	add	r0, r0, r3
   11d08:	b	11ce0 <__assert_fail@plt+0x928>
   11d0c:	mov	r0, #0
   11d10:	bx	lr
   11d14:	andeq	r9, r1, r4, lsl r9
   11d18:	ldrb	r3, [r0]
   11d1c:	cmp	r3, #0
   11d20:	beq	12070 <__assert_fail@plt+0xcb8>
   11d24:	push	{r4, r5, r6, r7, lr}
   11d28:	sub	sp, sp, #12
   11d2c:	mov	r4, r0
   11d30:	ldrb	r3, [r0, #1]
   11d34:	cmp	r3, #32
   11d38:	bne	11d54 <__assert_fail@plt+0x99c>
   11d3c:	ldrb	r3, [r4, #2]!
   11d40:	cmp	r3, #0
   11d44:	beq	12078 <__assert_fail@plt+0xcc0>
   11d48:	ldrb	r3, [r4, #1]
   11d4c:	cmp	r3, #32
   11d50:	beq	11d3c <__assert_fail@plt+0x984>
   11d54:	mov	r1, #64	; 0x40
   11d58:	mov	r0, r4
   11d5c:	bl	11274 <strchr@plt>
   11d60:	cmp	r0, #0
   11d64:	ldrne	r0, [pc, #788]	; 12080 <__assert_fail@plt+0xcc8>
   11d68:	beq	11d74 <__assert_fail@plt+0x9bc>
   11d6c:	add	sp, sp, #12
   11d70:	pop	{r4, r5, r6, r7, pc}
   11d74:	ldr	r1, [pc, #776]	; 12084 <__assert_fail@plt+0xccc>
   11d78:	mov	r0, r4
   11d7c:	bl	11340 <strpbrk@plt>
   11d80:	cmp	r0, #0
   11d84:	beq	11e24 <__assert_fail@plt+0xa6c>
   11d88:	mov	r1, #58	; 0x3a
   11d8c:	mov	r0, r4
   11d90:	bl	11274 <strchr@plt>
   11d94:	cmp	r0, #0
   11d98:	beq	11ee8 <__assert_fail@plt+0xb30>
   11d9c:	mov	r2, #0
   11da0:	str	r2, [sp]
   11da4:	add	r3, sp, #8
   11da8:	str	r2, [r3, #-4]!
   11dac:	mov	r2, sp
   11db0:	ldr	r1, [pc, #720]	; 12088 <__assert_fail@plt+0xcd0>
   11db4:	mov	r0, r4
   11db8:	bl	11304 <sscanf@plt>
   11dbc:	cmp	r0, #0
   11dc0:	beq	11ee0 <__assert_fail@plt+0xb28>
   11dc4:	ldrh	ip, [sp, #4]
   11dc8:	ldr	r3, [sp]
   11dcc:	orr	ip, ip, r3, lsl #16
   11dd0:	ldr	r3, [pc, #692]	; 1208c <__assert_fail@plt+0xcd4>
   11dd4:	ldr	r0, [r3, #328]	; 0x148
   11dd8:	cmp	r0, #0
   11ddc:	beq	11ebc <__assert_fail@plt+0xb04>
   11de0:	mov	r2, r3
   11de4:	ldr	r3, [r3, #324]	; 0x144
   11de8:	and	r3, r3, ip
   11dec:	ldr	r2, [r2, #320]	; 0x140
   11df0:	cmp	r3, r2
   11df4:	beq	11d6c <__assert_fail@plt+0x9b4>
   11df8:	ldr	r3, [pc, #656]	; 12090 <__assert_fail@plt+0xcd8>
   11dfc:	mov	r2, r3
   11e00:	ldr	r0, [r3, #20]
   11e04:	cmp	r0, #0
   11e08:	beq	11ebc <__assert_fail@plt+0xb04>
   11e0c:	ldr	r2, [r2, #16]
   11e10:	and	r2, r2, ip
   11e14:	ldr	r1, [r3, #12]!
   11e18:	cmp	r2, r1
   11e1c:	bne	11dfc <__assert_fail@plt+0xa44>
   11e20:	b	11d6c <__assert_fail@plt+0x9b4>
   11e24:	ldrb	r3, [r4]
   11e28:	cmp	r3, #0
   11e2c:	beq	11e98 <__assert_fail@plt+0xae0>
   11e30:	mov	r5, r4
   11e34:	ldrb	r3, [r5, #1]!
   11e38:	cmp	r3, #0
   11e3c:	bne	11e34 <__assert_fail@plt+0xa7c>
   11e40:	mov	r2, #2
   11e44:	ldr	r1, [pc, #584]	; 12094 <__assert_fail@plt+0xcdc>
   11e48:	mov	r0, r4
   11e4c:	bl	11298 <strncasecmp@plt>
   11e50:	cmp	r0, #0
   11e54:	bne	11e70 <__assert_fail@plt+0xab8>
   11e58:	ldrb	r2, [r4, #2]
   11e5c:	sub	r3, r2, #48	; 0x30
   11e60:	uxtb	r3, r3
   11e64:	cmp	r2, #32
   11e68:	cmpne	r3, #9
   11e6c:	bls	11ea0 <__assert_fail@plt+0xae8>
   11e70:	mov	r2, #2
   11e74:	ldr	r1, [pc, #540]	; 12098 <__assert_fail@plt+0xce0>
   11e78:	sub	r0, r5, #2
   11e7c:	bl	11298 <strncasecmp@plt>
   11e80:	ldr	r3, [pc, #504]	; 12080 <__assert_fail@plt+0xcc8>
   11e84:	ldr	r2, [pc, #528]	; 1209c <__assert_fail@plt+0xce4>
   11e88:	cmp	r0, #0
   11e8c:	moveq	r0, r2
   11e90:	movne	r0, r3
   11e94:	b	11d6c <__assert_fail@plt+0x9b4>
   11e98:	mov	r5, r4
   11e9c:	b	11e40 <__assert_fail@plt+0xa88>
   11ea0:	mov	r2, #10
   11ea4:	mov	r1, #0
   11ea8:	add	r0, r4, #2
   11eac:	bl	11100 <strtol@plt>
   11eb0:	ldr	r1, [pc, #488]	; 120a0 <__assert_fail@plt+0xce8>
   11eb4:	bl	117b0 <__assert_fail@plt+0x3f8>
   11eb8:	b	11d6c <__assert_fail@plt+0x9b4>
   11ebc:	ldr	r3, [pc, #480]	; 120a4 <__assert_fail@plt+0xcec>
   11ec0:	ldr	r3, [r3, #12]
   11ec4:	cmp	r3, #0
   11ec8:	ldreq	r0, [pc, #472]	; 120a8 <__assert_fail@plt+0xcf0>
   11ecc:	beq	11d6c <__assert_fail@plt+0x9b4>
   11ed0:	ldr	r0, [pc, #468]	; 120ac <__assert_fail@plt+0xcf4>
   11ed4:	bl	111fc <puts@plt>
   11ed8:	ldr	r0, [pc, #456]	; 120a8 <__assert_fail@plt+0xcf0>
   11edc:	b	11d6c <__assert_fail@plt+0x9b4>
   11ee0:	ldr	r0, [pc, #408]	; 12080 <__assert_fail@plt+0xcc8>
   11ee4:	b	11d6c <__assert_fail@plt+0x9b4>
   11ee8:	mov	r0, r4
   11eec:	bl	11ca4 <__assert_fail@plt+0x8ec>
   11ef0:	subs	ip, r0, #0
   11ef4:	bne	11f5c <__assert_fail@plt+0xba4>
   11ef8:	ldr	r3, [pc, #396]	; 1208c <__assert_fail@plt+0xcd4>
   11efc:	ldr	r1, [r3, #608]	; 0x260
   11f00:	cmp	r1, #0
   11f04:	movne	r5, #0
   11f08:	ldrne	r6, [pc, #416]	; 120b0 <__assert_fail@plt+0xcf8>
   11f0c:	beq	11f30 <__assert_fail@plt+0xb78>
   11f10:	mov	r0, r4
   11f14:	bl	11b9c <__assert_fail@plt+0x7e4>
   11f18:	cmp	r0, #0
   11f1c:	bne	11fd4 <__assert_fail@plt+0xc1c>
   11f20:	add	r5, r5, #2
   11f24:	ldr	r1, [r6, r5, lsl #2]
   11f28:	cmp	r1, #0
   11f2c:	bne	11f10 <__assert_fail@plt+0xb58>
   11f30:	mov	r1, #46	; 0x2e
   11f34:	mov	r0, r4
   11f38:	bl	11274 <strchr@plt>
   11f3c:	cmp	r0, #0
   11f40:	beq	11fe4 <__assert_fail@plt+0xc2c>
   11f44:	ldr	r3, [pc, #344]	; 120a4 <__assert_fail@plt+0xcec>
   11f48:	ldr	r3, [r3, #12]
   11f4c:	cmp	r3, #0
   11f50:	bne	12060 <__assert_fail@plt+0xca8>
   11f54:	ldr	r0, [pc, #292]	; 12080 <__assert_fail@plt+0xcc8>
   11f58:	b	11d6c <__assert_fail@plt+0x9b4>
   11f5c:	ldr	r3, [pc, #296]	; 1208c <__assert_fail@plt+0xcd4>
   11f60:	ldr	r0, [r3, #2608]	; 0xa30
   11f64:	cmp	r0, #0
   11f68:	beq	11fb0 <__assert_fail@plt+0xbf8>
   11f6c:	mov	r2, r3
   11f70:	ldr	r3, [r3, #2604]	; 0xa2c
   11f74:	and	r3, r3, ip
   11f78:	ldr	r2, [r2, #2600]	; 0xa28
   11f7c:	cmp	r3, r2
   11f80:	beq	11d6c <__assert_fail@plt+0x9b4>
   11f84:	ldr	r3, [pc, #296]	; 120b4 <__assert_fail@plt+0xcfc>
   11f88:	mov	r2, r3
   11f8c:	ldr	r0, [r3, #20]
   11f90:	cmp	r0, #0
   11f94:	beq	11fb0 <__assert_fail@plt+0xbf8>
   11f98:	ldr	r2, [r2, #16]
   11f9c:	and	r2, r2, ip
   11fa0:	ldr	r1, [r3, #12]!
   11fa4:	cmp	r2, r1
   11fa8:	bne	11f88 <__assert_fail@plt+0xbd0>
   11fac:	b	11d6c <__assert_fail@plt+0x9b4>
   11fb0:	ldr	r3, [pc, #236]	; 120a4 <__assert_fail@plt+0xcec>
   11fb4:	ldr	r3, [r3, #12]
   11fb8:	cmp	r3, #0
   11fbc:	ldreq	r0, [pc, #228]	; 120a8 <__assert_fail@plt+0xcf0>
   11fc0:	beq	11d6c <__assert_fail@plt+0x9b4>
   11fc4:	ldr	r0, [pc, #236]	; 120b8 <__assert_fail@plt+0xd00>
   11fc8:	bl	111fc <puts@plt>
   11fcc:	ldr	r0, [pc, #212]	; 120a8 <__assert_fail@plt+0xcf0>
   11fd0:	b	11d6c <__assert_fail@plt+0x9b4>
   11fd4:	ldr	r3, [pc, #176]	; 1208c <__assert_fail@plt+0xcd4>
   11fd8:	add	r5, r3, r5, lsl #2
   11fdc:	ldr	r0, [r5, #612]	; 0x264
   11fe0:	b	11d6c <__assert_fail@plt+0x9b4>
   11fe4:	ldr	r3, [pc, #208]	; 120bc <__assert_fail@plt+0xd04>
   11fe8:	ldr	r5, [r3, #-3052]	; 0xfffff414
   11fec:	cmp	r5, #0
   11ff0:	beq	1202c <__assert_fail@plt+0xc74>
   11ff4:	mov	r6, #0
   11ff8:	ldr	r7, [pc, #192]	; 120c0 <__assert_fail@plt+0xd08>
   11ffc:	mov	r0, r5
   12000:	bl	11268 <strlen@plt>
   12004:	mov	r2, r0
   12008:	mov	r1, r5
   1200c:	mov	r0, r4
   12010:	bl	11298 <strncasecmp@plt>
   12014:	cmp	r0, #0
   12018:	beq	12050 <__assert_fail@plt+0xc98>
   1201c:	add	r6, r6, #2
   12020:	ldr	r5, [r7, r6, lsl #2]
   12024:	cmp	r5, #0
   12028:	bne	11ffc <__assert_fail@plt+0xc44>
   1202c:	ldr	r3, [pc, #112]	; 120a4 <__assert_fail@plt+0xcec>
   12030:	ldr	r3, [r3, #12]
   12034:	cmp	r3, #0
   12038:	ldreq	r0, [pc, #104]	; 120a8 <__assert_fail@plt+0xcf0>
   1203c:	beq	11d6c <__assert_fail@plt+0x9b4>
   12040:	ldr	r0, [pc, #124]	; 120c4 <__assert_fail@plt+0xd0c>
   12044:	bl	111fc <puts@plt>
   12048:	ldr	r0, [pc, #88]	; 120a8 <__assert_fail@plt+0xcf0>
   1204c:	b	11d6c <__assert_fail@plt+0x9b4>
   12050:	ldr	r3, [pc, #100]	; 120bc <__assert_fail@plt+0xd04>
   12054:	add	r6, r3, r6, lsl #2
   12058:	ldr	r0, [r6, #-3048]	; 0xfffff418
   1205c:	b	11d6c <__assert_fail@plt+0x9b4>
   12060:	ldr	r0, [pc, #96]	; 120c8 <__assert_fail@plt+0xd10>
   12064:	bl	111fc <puts@plt>
   12068:	ldr	r0, [pc, #16]	; 12080 <__assert_fail@plt+0xcc8>
   1206c:	b	11d6c <__assert_fail@plt+0x9b4>
   12070:	ldr	r0, [pc, #84]	; 120cc <__assert_fail@plt+0xd14>
   12074:	bx	lr
   12078:	ldr	r0, [pc, #76]	; 120cc <__assert_fail@plt+0xd14>
   1207c:	b	11d6c <__assert_fail@plt+0x9b4>
   12080:	ldrdeq	r9, [r1], -r4
   12084:	andeq	r9, r1, r0, lsr r9
   12088:	andeq	r9, r1, ip, lsr r9
   1208c:	andeq	sp, r2, ip, lsl r1
   12090:	andeq	sp, r2, ip, asr r2
   12094:	andeq	r9, r1, r4, lsr r9
   12098:	andeq	r9, r1, r8, lsr r9
   1209c:	strdeq	r9, [r1], -r0
   120a0:	andeq	sp, r2, ip, ror r1
   120a4:	andeq	r0, r3, r4, asr #17
   120a8:	andeq	r9, r1, ip, lsl #16
   120ac:	andeq	r9, r1, r4, asr #18
   120b0:	andeq	sp, r2, ip, ror r3
   120b4:	andeq	sp, r2, r4, asr #22
   120b8:	andeq	r9, r1, r0, lsr #19
   120bc:	andeq	r1, r3, ip, lsl #2
   120c0:	andeq	r0, r3, r0, lsr #10
   120c4:	strdeq	r9, [r1], -r8
   120c8:	andeq	r9, r1, ip, lsr sl
   120cc:	andeq	r9, r1, r0, lsr #18
   120d0:	push	{r0, r1, r2, r3}
   120d4:	push	{lr}		; (str lr, [sp, #-4]!)
   120d8:	sub	sp, sp, #12
   120dc:	add	r2, sp, #20
   120e0:	str	r2, [sp, #4]
   120e4:	ldr	r4, [pc, #48]	; 1211c <__assert_fail@plt+0xd64>
   120e8:	ldr	r1, [sp, #16]
   120ec:	ldr	r0, [r4]
   120f0:	bl	112ec <vfprintf@plt>
   120f4:	ldr	r4, [r4]
   120f8:	bl	1128c <__errno_location@plt>
   120fc:	ldr	r0, [r0]
   12100:	bl	11220 <strerror@plt>
   12104:	mov	r2, r0
   12108:	ldr	r1, [pc, #16]	; 12120 <__assert_fail@plt+0xd68>
   1210c:	mov	r0, r4
   12110:	bl	11280 <fprintf@plt>
   12114:	mov	r0, #1
   12118:	bl	1125c <exit@plt>
   1211c:			; <UNDEFINED> instruction: 0x000308b8
   12120:	andeq	r9, r1, r8, ror sl
   12124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12128:	sub	sp, sp, #108	; 0x6c
   1212c:	mov	r4, r0
   12130:	mov	r5, r1
   12134:	mov	r0, r1
   12138:	bl	11268 <strlen@plt>
   1213c:	add	r0, r0, #4
   12140:	bl	14734 <_obstack_memory_used@@Base+0x50c>
   12144:	mov	fp, r0
   12148:	mov	r3, #61	; 0x3d
   1214c:	strb	r3, [r0], #1
   12150:	mov	r1, r5
   12154:	bl	111d8 <strcpy@plt>
   12158:	mov	r0, fp
   1215c:	bl	11268 <strlen@plt>
   12160:	add	r2, fp, r0
   12164:	ldr	r3, [pc, #340]	; 122c0 <__assert_fail@plt+0xf08>
   12168:	ldrh	r1, [r3]
   1216c:	ldrb	r3, [r3, #2]
   12170:	strh	r1, [fp, r0]
   12174:	strb	r3, [r2, #2]
   12178:	ldr	r1, [pc, #324]	; 122c4 <__assert_fail@plt+0xf0c>
   1217c:	mov	r0, r4
   12180:	bl	110b8 <fdopen@plt>
   12184:	mov	r6, r0
   12188:	mov	r0, fp
   1218c:	bl	11268 <strlen@plt>
   12190:	mov	r2, r0
   12194:	mov	r1, fp
   12198:	mov	r0, r4
   1219c:	bl	112bc <write@plt>
   121a0:	cmp	r0, #0
   121a4:	blt	121c0 <__assert_fail@plt+0xe08>
   121a8:	mov	r5, #0
   121ac:	mov	r7, #100	; 0x64
   121b0:	ldr	sl, [pc, #272]	; 122c8 <__assert_fail@plt+0xf10>
   121b4:	mov	r9, #16
   121b8:	ldr	r8, [pc, #268]	; 122cc <__assert_fail@plt+0xf14>
   121bc:	b	121e8 <__assert_fail@plt+0xe30>
   121c0:	ldr	r0, [pc, #264]	; 122d0 <__assert_fail@plt+0xf18>
   121c4:	bl	120d0 <__assert_fail@plt+0xd18>
   121c8:	add	r3, sp, #4
   121cc:	b	12238 <__assert_fail@plt+0xe80>
   121d0:	mov	r2, r0
   121d4:	mov	r3, #0
   121d8:	strb	r3, [r2]
   121dc:	ldr	r1, [r8]
   121e0:	add	r0, sp, #4
   121e4:	bl	1137c <fputs@plt>
   121e8:	mov	r2, r6
   121ec:	mov	r1, r7
   121f0:	add	r0, sp, #4
   121f4:	bl	11148 <fgets@plt>
   121f8:	cmp	r0, #0
   121fc:	beq	12294 <__assert_fail@plt+0xedc>
   12200:	mov	r2, r9
   12204:	mov	r1, sl
   12208:	add	r0, sp, #4
   1220c:	bl	11388 <strncmp@plt>
   12210:	cmp	r0, #0
   12214:	cmpeq	r5, #0
   12218:	bne	121dc <__assert_fail@plt+0xe24>
   1221c:	ldrb	r3, [sp, #4]
   12220:	cmp	r3, #58	; 0x3a
   12224:	beq	121c8 <__assert_fail@plt+0xe10>
   12228:	add	r3, sp, #4
   1222c:	ldrb	r2, [r3, #1]!
   12230:	cmp	r2, #58	; 0x3a
   12234:	bne	1222c <__assert_fail@plt+0xe74>
   12238:	add	r4, r3, #1
   1223c:	ldrb	r3, [r3, #1]
   12240:	cmp	r3, #32
   12244:	bne	12254 <__assert_fail@plt+0xe9c>
   12248:	ldrb	r3, [r4, #1]!
   1224c:	cmp	r3, #32
   12250:	beq	12248 <__assert_fail@plt+0xe90>
   12254:	mov	r0, r4
   12258:	bl	11268 <strlen@plt>
   1225c:	add	r0, r0, #1
   12260:	bl	14734 <_obstack_memory_used@@Base+0x50c>
   12264:	mov	r5, r0
   12268:	ldrb	r3, [r4]
   1226c:	cmp	r3, #10
   12270:	cmpne	r3, #13
   12274:	beq	121d0 <__assert_fail@plt+0xe18>
   12278:	mov	r2, r0
   1227c:	strb	r3, [r2], #1
   12280:	ldrb	r3, [r4, #1]!
   12284:	cmp	r3, #10
   12288:	cmpne	r3, #13
   1228c:	bne	1227c <__assert_fail@plt+0xec4>
   12290:	b	121d4 <__assert_fail@plt+0xe1c>
   12294:	mov	r0, r6
   12298:	bl	11154 <ferror@plt>
   1229c:	cmp	r0, #0
   122a0:	bne	122b8 <__assert_fail@plt+0xf00>
   122a4:	mov	r0, fp
   122a8:	bl	13dd8 <argp_parse@@Base+0xbf4>
   122ac:	mov	r0, r5
   122b0:	add	sp, sp, #108	; 0x6c
   122b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122b8:	ldr	r0, [pc, #20]	; 122d4 <__assert_fail@plt+0xf1c>
   122bc:	bl	120d0 <__assert_fail@plt+0xd18>
   122c0:	andeq	r9, r1, r0, lsl #21
   122c4:	andeq	fp, r1, ip, lsl #28
   122c8:	andeq	r9, r1, ip, lsl #21
   122cc:			; <UNDEFINED> instruction: 0x000308bc
   122d0:	andeq	r9, r1, r4, lsl #21
   122d4:	andeq	r9, r1, r0, lsr #21
   122d8:	push	{r0, r1, r2, r3}
   122dc:	push	{lr}		; (str lr, [sp, #-4]!)
   122e0:	sub	sp, sp, #12
   122e4:	add	r2, sp, #20
   122e8:	str	r2, [sp, #4]
   122ec:	ldr	r4, [pc, #28]	; 12310 <__assert_fail@plt+0xf58>
   122f0:	ldr	r1, [sp, #16]
   122f4:	ldr	r0, [r4]
   122f8:	bl	112ec <vfprintf@plt>
   122fc:	ldr	r1, [r4]
   12300:	mov	r0, #10
   12304:	bl	112f8 <fputc@plt>
   12308:	mov	r0, #1
   1230c:	bl	1125c <exit@plt>
   12310:			; <UNDEFINED> instruction: 0x000308b8
   12314:	push	{r4, r5, lr}
   12318:	sub	sp, sp, #44	; 0x2c
   1231c:	mov	r5, r0
   12320:	mov	r4, r1
   12324:	mov	r2, #32
   12328:	mov	r1, #0
   1232c:	add	r0, sp, #8
   12330:	bl	112b0 <memset@plt>
   12334:	mov	r3, #1
   12338:	str	r3, [sp, #16]
   1233c:	cmp	r4, #0
   12340:	beq	1241c <__assert_fail@plt+0x1064>
   12344:	add	r3, sp, #4
   12348:	add	r2, sp, #8
   1234c:	mov	r1, r4
   12350:	mov	r0, r5
   12354:	bl	11358 <getaddrinfo@plt>
   12358:	cmp	r0, #0
   1235c:	beq	1237c <__assert_fail@plt+0xfc4>
   12360:	add	r3, sp, #4
   12364:	add	r2, sp, #8
   12368:	mov	r1, r4
   1236c:	mov	r0, r5
   12370:	bl	11358 <getaddrinfo@plt>
   12374:	cmp	r0, #0
   12378:	bne	12390 <__assert_fail@plt+0xfd8>
   1237c:	ldr	r5, [sp, #4]
   12380:	cmp	r5, #0
   12384:	beq	12414 <__assert_fail@plt+0x105c>
   12388:	mov	r3, r5
   1238c:	b	123b4 <__assert_fail@plt+0xffc>
   12390:	bl	1113c <gai_strerror@plt>
   12394:	mov	r1, r0
   12398:	ldr	r0, [pc, #160]	; 12440 <__assert_fail@plt+0x1088>
   1239c:	bl	122d8 <__assert_fail@plt+0xf20>
   123a0:	ldr	r3, [sp, #4]
   123a4:	ldr	r3, [r3, #28]
   123a8:	str	r3, [sp, #4]
   123ac:	cmp	r3, #0
   123b0:	beq	12414 <__assert_fail@plt+0x105c>
   123b4:	ldr	r2, [r3, #12]
   123b8:	ldr	r1, [r3, #8]
   123bc:	ldr	r0, [r3, #4]
   123c0:	bl	11364 <socket@plt>
   123c4:	subs	r4, r0, #0
   123c8:	blt	123a0 <__assert_fail@plt+0xfe8>
   123cc:	ldr	r3, [sp, #4]
   123d0:	ldr	r2, [r3, #16]
   123d4:	ldr	r1, [r3, #20]
   123d8:	mov	r0, r4
   123dc:	bl	113ac <connect@plt>
   123e0:	cmp	r0, #0
   123e4:	beq	123f4 <__assert_fail@plt+0x103c>
   123e8:	mov	r0, r4
   123ec:	bl	113a0 <close@plt>
   123f0:	b	123a0 <__assert_fail@plt+0xfe8>
   123f4:	ldr	r3, [sp, #4]
   123f8:	cmp	r3, #0
   123fc:	beq	12414 <__assert_fail@plt+0x105c>
   12400:	mov	r0, r5
   12404:	bl	1134c <freeaddrinfo@plt>
   12408:	mov	r0, r4
   1240c:	add	sp, sp, #44	; 0x2c
   12410:	pop	{r4, r5, pc}
   12414:	ldr	r0, [pc, #40]	; 12444 <__assert_fail@plt+0x108c>
   12418:	bl	120d0 <__assert_fail@plt+0xd18>
   1241c:	add	r3, sp, #4
   12420:	add	r2, sp, #8
   12424:	ldr	r1, [pc, #28]	; 12448 <__assert_fail@plt+0x1090>
   12428:	mov	r0, r5
   1242c:	bl	11358 <getaddrinfo@plt>
   12430:	cmp	r0, #0
   12434:	beq	1237c <__assert_fail@plt+0xfc4>
   12438:	ldr	r4, [pc, #12]	; 1244c <__assert_fail@plt+0x1094>
   1243c:	b	12360 <__assert_fail@plt+0xfa8>
   12440:			; <UNDEFINED> instruction: 0x00019ab0
   12444:	andeq	r9, r1, r0, asr #21
   12448:	andeq	r9, r1, r8, asr #21
   1244c:	andeq	r9, r1, r8, lsr #21
   12450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12454:	sub	sp, sp, #1504	; 0x5e0
   12458:	sub	sp, sp, #12
   1245c:	mov	r5, r0
   12460:	mov	r4, r1
   12464:	ldr	r3, [pc, #568]	; 126a4 <__assert_fail@plt+0x12ec>
   12468:	ldr	r7, [r3]
   1246c:	ldr	r1, [pc, #564]	; 126a8 <__assert_fail@plt+0x12f0>
   12470:	bl	110b8 <fdopen@plt>
   12474:	mov	r8, r0
   12478:	mov	r0, r4
   1247c:	bl	11268 <strlen@plt>
   12480:	mov	r2, r0
   12484:	mov	r1, r4
   12488:	mov	r0, r5
   1248c:	bl	112bc <write@plt>
   12490:	cmp	r0, #0
   12494:	blt	124b4 <__assert_fail@plt+0x10fc>
   12498:	mov	r5, #0
   1249c:	ldr	sl, [pc, #520]	; 126ac <__assert_fail@plt+0x12f4>
   124a0:	ldr	fp, [pc, #520]	; 126b0 <__assert_fail@plt+0x12f8>
   124a4:	ldr	r9, [pc, #520]	; 126b4 <__assert_fail@plt+0x12fc>
   124a8:	sub	r6, r9, #2976	; 0xba0
   124ac:	sub	r6, r6, #4
   124b0:	b	125b8 <__assert_fail@plt+0x1200>
   124b4:	ldr	r0, [pc, #508]	; 126b8 <__assert_fail@plt+0x1300>
   124b8:	bl	120d0 <__assert_fail@plt+0xd18>
   124bc:	add	r3, r9, r5, lsl #2
   124c0:	ldr	r4, [r3, #-2976]	; 0xfffff460
   124c4:	mov	r0, r4
   124c8:	bl	11268 <strlen@plt>
   124cc:	mov	r2, r0
   124d0:	mov	r1, r4
   124d4:	add	r0, sp, #1312	; 0x520
   124d8:	bl	11388 <strncmp@plt>
   124dc:	adds	r7, r0, #0
   124e0:	movne	r7, #1
   124e4:	b	125b8 <__assert_fail@plt+0x1200>
   124e8:	add	r3, sp, #288	; 0x120
   124ec:	str	r3, [sp]
   124f0:	add	r3, sp, #16
   124f4:	add	r2, sp, #32
   124f8:	ldr	r1, [pc, #444]	; 126bc <__assert_fail@plt+0x1304>
   124fc:	add	r0, sp, #1312	; 0x520
   12500:	bl	11304 <sscanf@plt>
   12504:	cmp	r0, #3
   12508:	bne	12638 <__assert_fail@plt+0x1280>
   1250c:	ldr	r3, [pc, #428]	; 126c0 <__assert_fail@plt+0x1308>
   12510:	ldr	r3, [r3, #12]
   12514:	cmp	r3, #0
   12518:	bne	12564 <__assert_fail@plt+0x11ac>
   1251c:	add	r4, sp, #288	; 0x120
   12520:	mov	r0, r4
   12524:	bl	11268 <strlen@plt>
   12528:	add	r2, r4, r0
   1252c:	ldr	r3, [pc, #400]	; 126c4 <__assert_fail@plt+0x130c>
   12530:	ldrh	r1, [r3]
   12534:	ldrb	r3, [r3, #2]
   12538:	strh	r1, [r4, r0]
   1253c:	strb	r3, [r2, #2]
   12540:	add	r1, sp, #16
   12544:	add	r0, sp, #32
   12548:	bl	12314 <__assert_fail@plt+0xf5c>
   1254c:	str	r0, [sp, #12]
   12550:	mov	r1, r4
   12554:	bl	12450 <__assert_fail@plt+0x1098>
   12558:	ldr	r0, [sp, #12]
   1255c:	bl	113a0 <close@plt>
   12560:	b	125b8 <__assert_fail@plt+0x1200>
   12564:	add	r2, sp, #32
   12568:	add	r1, sp, #288	; 0x120
   1256c:	ldr	r0, [pc, #340]	; 126c8 <__assert_fail@plt+0x1310>
   12570:	bl	1110c <printf@plt>
   12574:	b	1251c <__assert_fail@plt+0x1164>
   12578:	add	r2, sp, #1312	; 0x520
   1257c:	b	12658 <__assert_fail@plt+0x12a0>
   12580:	lsr	r3, r1, r3
   12584:	tst	r3, #1
   12588:	bne	125a0 <__assert_fail@plt+0x11e8>
   1258c:	ldrb	r3, [r2, #1]!
   12590:	cmp	r3, #13
   12594:	bhi	1258c <__assert_fail@plt+0x11d4>
   12598:	b	12580 <__assert_fail@plt+0x11c8>
   1259c:	add	r2, sp, #1312	; 0x520
   125a0:	mov	r3, #0
   125a4:	strb	r3, [r2]
   125a8:	add	r2, sp, #1312	; 0x520
   125ac:	ldr	r1, [pc, #280]	; 126cc <__assert_fail@plt+0x1314>
   125b0:	ldr	r0, [fp]
   125b4:	bl	11280 <fprintf@plt>
   125b8:	mov	r2, r8
   125bc:	mov	r1, #200	; 0xc8
   125c0:	add	r0, sp, #1312	; 0x520
   125c4:	bl	11148 <fgets@plt>
   125c8:	cmp	r0, #0
   125cc:	beq	12668 <__assert_fail@plt+0x12b0>
   125d0:	cmp	r7, #1
   125d4:	beq	124bc <__assert_fail@plt+0x1104>
   125d8:	cmp	r7, #0
   125dc:	bne	12620 <__assert_fail@plt+0x1268>
   125e0:	ldr	r4, [r9, #-2980]	; 0xfffff45c
   125e4:	cmp	r4, #0
   125e8:	beq	1269c <__assert_fail@plt+0x12e4>
   125ec:	mov	r5, r7
   125f0:	mov	r0, r4
   125f4:	bl	11268 <strlen@plt>
   125f8:	mov	r2, r0
   125fc:	mov	r1, r4
   12600:	add	r0, sp, #1312	; 0x520
   12604:	bl	11388 <strncmp@plt>
   12608:	cmp	r0, #0
   1260c:	beq	12660 <__assert_fail@plt+0x12a8>
   12610:	add	r5, r5, #2
   12614:	ldr	r4, [r6, r5, lsl #2]
   12618:	cmp	r4, #0
   1261c:	bne	125f0 <__assert_fail@plt+0x1238>
   12620:	mov	r2, #10
   12624:	mov	r1, sl
   12628:	add	r0, sp, #1312	; 0x520
   1262c:	bl	11388 <strncmp@plt>
   12630:	cmp	r0, #0
   12634:	beq	124e8 <__assert_fail@plt+0x1130>
   12638:	ldrb	r2, [sp, #1312]	; 0x520
   1263c:	cmp	r2, #13
   12640:	bhi	12578 <__assert_fail@plt+0x11c0>
   12644:	ldr	r3, [pc, #132]	; 126d0 <__assert_fail@plt+0x1318>
   12648:	lsr	r3, r3, r2
   1264c:	tst	r3, #1
   12650:	bne	1259c <__assert_fail@plt+0x11e4>
   12654:	add	r2, sp, #1312	; 0x520
   12658:	ldr	r1, [pc, #112]	; 126d0 <__assert_fail@plt+0x1318>
   1265c:	b	1258c <__assert_fail@plt+0x11d4>
   12660:	mov	r7, #1
   12664:	b	125b8 <__assert_fail@plt+0x1200>
   12668:	mov	r0, r8
   1266c:	bl	11154 <ferror@plt>
   12670:	cmp	r0, #0
   12674:	bne	1268c <__assert_fail@plt+0x12d4>
   12678:	cmp	r7, #1
   1267c:	beq	12694 <__assert_fail@plt+0x12dc>
   12680:	add	sp, sp, #1504	; 0x5e0
   12684:	add	sp, sp, #12
   12688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1268c:	ldr	r0, [pc, #64]	; 126d4 <__assert_fail@plt+0x131c>
   12690:	bl	120d0 <__assert_fail@plt+0xd18>
   12694:	ldr	r0, [pc, #60]	; 126d8 <__assert_fail@plt+0x1320>
   12698:	bl	122d8 <__assert_fail@plt+0xf20>
   1269c:	mov	r5, r7
   126a0:	b	12620 <__assert_fail@plt+0x1268>
   126a4:	andeq	sp, r2, ip, lsl r1
   126a8:	andeq	fp, r1, ip, lsl #28
   126ac:	ldrdeq	r9, [r1], -r0
   126b0:			; <UNDEFINED> instruction: 0x000308bc
   126b4:	andeq	r1, r3, ip, lsl #2
   126b8:	andeq	r9, r1, r4, lsl #21
   126bc:	ldrdeq	r9, [r1], -ip
   126c0:	andeq	r0, r3, r4, asr #17
   126c4:	andeq	r9, r1, r0, lsl #21
   126c8:	andeq	r9, r1, ip, lsl #22
   126cc:	muleq	r1, r4, r8
   126d0:	andeq	r2, r0, r1, lsl #8
   126d4:	andeq	r9, r1, r0, lsr #21
   126d8:	andeq	r9, r1, ip, lsr #22
   126dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126e0:	sub	sp, sp, #20
   126e4:	mov	sl, r0
   126e8:	mov	r6, r1
   126ec:	ldr	r0, [r1]
   126f0:	bl	1425c <_obstack_memory_used@@Base+0x34>
   126f4:	ldr	r4, [pc, #1144]	; 12b74 <__assert_fail@plt+0x17bc>
   126f8:	ldr	r3, [pc, #1144]	; 12b78 <__assert_fail@plt+0x17c0>
   126fc:	str	r3, [sp]
   12700:	ldr	r3, [pc, #1140]	; 12b7c <__assert_fail@plt+0x17c4>
   12704:	mov	r2, #0
   12708:	mov	r1, r2
   1270c:	mov	r0, r4
   12710:	bl	14010 <_obstack_begin@@Base>
   12714:	ldr	r2, [pc, #1124]	; 12b80 <__assert_fail@plt+0x17c8>
   12718:	ldr	r3, [pc, #1124]	; 12b84 <__assert_fail@plt+0x17cc>
   1271c:	str	r2, [r3]
   12720:	ldr	r5, [pc, #1120]	; 12b88 <__assert_fail@plt+0x17d0>
   12724:	sub	r1, r5, #12
   12728:	ldr	r0, [pc, #1116]	; 12b8c <__assert_fail@plt+0x17d4>
   1272c:	bl	13cf0 <argp_parse@@Base+0xb0c>
   12730:	mov	r3, #0
   12734:	str	r3, [sp, #4]
   12738:	add	r3, sp, #12
   1273c:	str	r3, [sp]
   12740:	mov	r3, #8
   12744:	mov	r2, r6
   12748:	mov	r1, sl
   1274c:	sub	r0, r5, #4
   12750:	bl	131e4 <argp_parse@@Base>
   12754:	ldr	r2, [r4, #16]
   12758:	ldr	r3, [r4, #12]
   1275c:	cmp	r2, r3
   12760:	beq	1292c <__assert_fail@plt+0x1574>
   12764:	ldr	r3, [pc, #1032]	; 12b74 <__assert_fail@plt+0x17bc>
   12768:	ldr	r2, [r3, #12]
   1276c:	add	r1, r2, #1
   12770:	str	r1, [r3, #12]
   12774:	mov	r1, #0
   12778:	strb	r1, [r2]
   1277c:	ldr	r8, [r3, #8]
   12780:	ldr	r3, [r3, #12]
   12784:	cmp	r8, r3
   12788:	ldreq	r1, [pc, #996]	; 12b74 <__assert_fail@plt+0x17bc>
   1278c:	ldrbeq	r2, [r1, #40]	; 0x28
   12790:	orreq	r2, r2, #2
   12794:	strbeq	r2, [r1, #40]	; 0x28
   12798:	ldr	r1, [pc, #980]	; 12b74 <__assert_fail@plt+0x17bc>
   1279c:	ldr	r2, [r1, #24]
   127a0:	add	r3, r3, r2
   127a4:	bic	r3, r3, r2
   127a8:	str	r3, [r1, #12]
   127ac:	ldr	r2, [r1, #4]
   127b0:	ldr	r1, [r1, #16]
   127b4:	sub	r3, r3, r2
   127b8:	sub	r2, r1, r2
   127bc:	cmp	r3, r2
   127c0:	ldrhi	r3, [pc, #940]	; 12b74 <__assert_fail@plt+0x17bc>
   127c4:	strhi	r1, [r3, #12]
   127c8:	ldr	r3, [pc, #932]	; 12b74 <__assert_fail@plt+0x17bc>
   127cc:	ldr	r2, [r3, #12]
   127d0:	str	r2, [r3, #8]
   127d4:	ldr	r4, [sp, #12]
   127d8:	subs	sl, sl, r4
   127dc:	bne	1294c <__assert_fail@plt+0x1594>
   127e0:	ldr	r3, [pc, #936]	; 12b90 <__assert_fail@plt+0x17d8>
   127e4:	ldr	r3, [r3]
   127e8:	cmp	r3, #0
   127ec:	beq	1293c <__assert_fail@plt+0x1584>
   127f0:	ldr	r3, [pc, #892]	; 12b74 <__assert_fail@plt+0x17bc>
   127f4:	ldr	r2, [r3, #16]
   127f8:	ldr	r3, [r3, #12]
   127fc:	cmp	r2, r3
   12800:	beq	12a0c <__assert_fail@plt+0x1654>
   12804:	ldr	r3, [pc, #872]	; 12b74 <__assert_fail@plt+0x17bc>
   12808:	ldr	r2, [r3, #12]
   1280c:	add	r1, r2, #1
   12810:	str	r1, [r3, #12]
   12814:	mov	r1, #0
   12818:	strb	r1, [r2]
   1281c:	ldr	r4, [r3, #8]
   12820:	ldr	r3, [r3, #12]
   12824:	cmp	r4, r3
   12828:	ldreq	r1, [pc, #836]	; 12b74 <__assert_fail@plt+0x17bc>
   1282c:	ldrbeq	r2, [r1, #40]	; 0x28
   12830:	orreq	r2, r2, #2
   12834:	strbeq	r2, [r1, #40]	; 0x28
   12838:	ldr	r1, [pc, #820]	; 12b74 <__assert_fail@plt+0x17bc>
   1283c:	ldr	r2, [r1, #24]
   12840:	add	r3, r3, r2
   12844:	bic	r3, r3, r2
   12848:	str	r3, [r1, #12]
   1284c:	ldr	r2, [r1, #4]
   12850:	ldr	r1, [r1, #16]
   12854:	sub	r3, r3, r2
   12858:	sub	r2, r1, r2
   1285c:	cmp	r3, r2
   12860:	ldrhi	r3, [pc, #780]	; 12b74 <__assert_fail@plt+0x17bc>
   12864:	strhi	r1, [r3, #12]
   12868:	ldr	r3, [pc, #772]	; 12b74 <__assert_fail@plt+0x17bc>
   1286c:	ldr	r2, [r3, #12]
   12870:	str	r2, [r3, #8]
   12874:	ldr	r3, [pc, #788]	; 12b90 <__assert_fail@plt+0x17d8>
   12878:	ldr	r3, [r3, #4]
   1287c:	cmp	r3, #0
   12880:	beq	12a1c <__assert_fail@plt+0x1664>
   12884:	ldr	r0, [pc, #776]	; 12b94 <__assert_fail@plt+0x17dc>
   12888:	bl	111f0 <getenv@plt>
   1288c:	cmp	r0, #0
   12890:	movne	r2, #0
   12894:	ldrne	r3, [pc, #764]	; 12b98 <__assert_fail@plt+0x17e0>
   12898:	strne	r2, [r3]
   1289c:	ldr	r5, [pc, #748]	; 12b90 <__assert_fail@plt+0x17d8>
   128a0:	mov	r2, r4
   128a4:	mov	r1, r8
   128a8:	ldr	r0, [r5, #4]
   128ac:	bl	118f8 <__assert_fail@plt+0x540>
   128b0:	mov	r4, r0
   128b4:	ldr	r3, [r5, #12]
   128b8:	cmp	r3, #0
   128bc:	bne	12b64 <__assert_fail@plt+0x17ac>
   128c0:	mov	r0, r4
   128c4:	bl	11268 <strlen@plt>
   128c8:	add	r2, r4, r0
   128cc:	ldr	r3, [pc, #712]	; 12b9c <__assert_fail@plt+0x17e4>
   128d0:	ldrh	r1, [r3]
   128d4:	ldrb	r3, [r3, #2]
   128d8:	strh	r1, [r4, r0]
   128dc:	strb	r3, [r2, #2]
   128e0:	ldr	r5, [pc, #696]	; 12ba0 <__assert_fail@plt+0x17e8>
   128e4:	mov	r1, r5
   128e8:	mov	r0, #15
   128ec:	bl	11178 <signal@plt>
   128f0:	mov	r1, r5
   128f4:	mov	r0, #2
   128f8:	bl	11178 <signal@plt>
   128fc:	ldr	r3, [pc, #652]	; 12b90 <__assert_fail@plt+0x17d8>
   12900:	ldr	r1, [r3, #8]
   12904:	ldr	r0, [r3, #4]
   12908:	bl	12314 <__assert_fail@plt+0xf5c>
   1290c:	ldr	r5, [pc, #656]	; 12ba4 <__assert_fail@plt+0x17ec>
   12910:	str	r0, [r5]
   12914:	mov	r1, r4
   12918:	bl	12450 <__assert_fail@plt+0x1098>
   1291c:	ldr	r0, [r5]
   12920:	bl	113a0 <close@plt>
   12924:	mov	r0, #0
   12928:	bl	1125c <exit@plt>
   1292c:	mov	r1, #1
   12930:	mov	r0, r4
   12934:	bl	14060 <_obstack_newchunk@@Base>
   12938:	b	12764 <__assert_fail@plt+0x13ac>
   1293c:	ldr	r2, [pc, #612]	; 12ba8 <__assert_fail@plt+0x17f0>
   12940:	mov	r1, #0
   12944:	mov	r0, #1
   12948:	bl	111e4 <error@plt>
   1294c:	ldr	r3, [pc, #572]	; 12b90 <__assert_fail@plt+0x17d8>
   12950:	ldr	r3, [r3]
   12954:	cmp	r3, #0
   12958:	bne	127f0 <__assert_fail@plt+0x1438>
   1295c:	add	r6, r6, r4, lsl #2
   12960:	ldr	r4, [pc, #524]	; 12b74 <__assert_fail@plt+0x17bc>
   12964:	mov	r7, #32
   12968:	mov	r9, #1
   1296c:	b	129b4 <__assert_fail@plt+0x15fc>
   12970:	mov	r2, sl
   12974:	mov	r1, fp
   12978:	ldr	r0, [r4, #12]
   1297c:	bl	1116c <memcpy@plt>
   12980:	ldr	r0, [r4, #12]
   12984:	add	r0, r0, sl
   12988:	str	r0, [r4, #12]
   1298c:	cmp	r5, #0
   12990:	beq	12a04 <__assert_fail@plt+0x164c>
   12994:	ldr	r3, [r4, #16]
   12998:	cmp	r3, r0
   1299c:	beq	129f4 <__assert_fail@plt+0x163c>
   129a0:	ldr	r3, [r4, #12]
   129a4:	add	r2, r3, #1
   129a8:	str	r2, [r4, #12]
   129ac:	strb	r7, [r3]
   129b0:	mov	sl, r5
   129b4:	sub	r5, sl, #1
   129b8:	cmp	sl, #0
   129bc:	beq	127f0 <__assert_fail@plt+0x1438>
   129c0:	ldr	fp, [r6], #4
   129c4:	mov	r0, fp
   129c8:	bl	11268 <strlen@plt>
   129cc:	mov	sl, r0
   129d0:	ldr	r3, [r4, #16]
   129d4:	ldr	r2, [r4, #12]
   129d8:	sub	r3, r3, r2
   129dc:	cmp	r0, r3
   129e0:	bls	12970 <__assert_fail@plt+0x15b8>
   129e4:	mov	r1, r0
   129e8:	mov	r0, r4
   129ec:	bl	14060 <_obstack_newchunk@@Base>
   129f0:	b	12970 <__assert_fail@plt+0x15b8>
   129f4:	mov	r1, r9
   129f8:	mov	r0, r4
   129fc:	bl	14060 <_obstack_newchunk@@Base>
   12a00:	b	129a0 <__assert_fail@plt+0x15e8>
   12a04:	mov	sl, r5
   12a08:	b	129b4 <__assert_fail@plt+0x15fc>
   12a0c:	mov	r1, #1
   12a10:	ldr	r0, [pc, #348]	; 12b74 <__assert_fail@plt+0x17bc>
   12a14:	bl	14060 <_obstack_newchunk@@Base>
   12a18:	b	12804 <__assert_fail@plt+0x144c>
   12a1c:	ldr	r1, [pc, #392]	; 12bac <__assert_fail@plt+0x17f4>
   12a20:	mov	r0, r4
   12a24:	bl	11c5c <__assert_fail@plt+0x8a4>
   12a28:	cmp	r0, #0
   12a2c:	beq	12a90 <__assert_fail@plt+0x16d8>
   12a30:	ldr	r3, [pc, #344]	; 12b90 <__assert_fail@plt+0x17d8>
   12a34:	ldr	r3, [r3, #12]
   12a38:	cmp	r3, #0
   12a3c:	bne	12ac0 <__assert_fail@plt+0x1708>
   12a40:	mov	r1, #0
   12a44:	ldr	r0, [pc, #356]	; 12bb0 <__assert_fail@plt+0x17f8>
   12a48:	bl	12314 <__assert_fail@plt+0xf5c>
   12a4c:	ldr	r6, [pc, #336]	; 12ba4 <__assert_fail@plt+0x17ec>
   12a50:	str	r0, [r6]
   12a54:	mov	r1, r4
   12a58:	bl	12124 <__assert_fail@plt+0xd6c>
   12a5c:	ldr	r5, [pc, #300]	; 12b90 <__assert_fail@plt+0x17d8>
   12a60:	str	r0, [r5, #4]
   12a64:	ldr	r0, [r6]
   12a68:	bl	113a0 <close@plt>
   12a6c:	ldr	r1, [r5, #4]
   12a70:	cmp	r1, #0
   12a74:	beq	12acc <__assert_fail@plt+0x1714>
   12a78:	ldr	r0, [pc, #308]	; 12bb4 <__assert_fail@plt+0x17fc>
   12a7c:	bl	1110c <printf@plt>
   12a80:	ldr	r3, [pc, #264]	; 12b90 <__assert_fail@plt+0x17d8>
   12a84:	ldr	r3, [r3, #4]
   12a88:	cmp	r3, #0
   12a8c:	bne	12884 <__assert_fail@plt+0x14cc>
   12a90:	mov	r0, r4
   12a94:	bl	11d18 <__assert_fail@plt+0x960>
   12a98:	ldr	r3, [pc, #240]	; 12b90 <__assert_fail@plt+0x17d8>
   12a9c:	str	r0, [r3, #4]
   12aa0:	ldrb	r3, [r0]
   12aa4:	cmp	r3, #3
   12aa8:	ldrls	pc, [pc, r3, lsl #2]
   12aac:	b	12b44 <__assert_fail@plt+0x178c>
   12ab0:	ldrdeq	r2, [r1], -r4
   12ab4:	andeq	r2, r1, r4, lsl fp
   12ab8:	andeq	r2, r1, ip, lsl fp
   12abc:	andeq	r2, r1, r4, lsr fp
   12ac0:	ldr	r0, [pc, #240]	; 12bb8 <__assert_fail@plt+0x1800>
   12ac4:	bl	111fc <puts@plt>
   12ac8:	b	12a40 <__assert_fail@plt+0x1688>
   12acc:	mov	r0, #0
   12ad0:	bl	1125c <exit@plt>
   12ad4:	ldr	r0, [pc, #224]	; 12bbc <__assert_fail@plt+0x1804>
   12ad8:	bl	111f0 <getenv@plt>
   12adc:	ldr	r3, [pc, #172]	; 12b90 <__assert_fail@plt+0x17d8>
   12ae0:	str	r0, [r3, #4]
   12ae4:	cmp	r0, #0
   12ae8:	ldreq	r2, [pc, #192]	; 12bb0 <__assert_fail@plt+0x17f8>
   12aec:	streq	r2, [r3, #4]
   12af0:	ldr	r3, [pc, #152]	; 12b90 <__assert_fail@plt+0x17d8>
   12af4:	ldr	r3, [r3, #12]
   12af8:	cmp	r3, #0
   12afc:	beq	12884 <__assert_fail@plt+0x14cc>
   12b00:	ldr	r3, [pc, #136]	; 12b90 <__assert_fail@plt+0x17d8>
   12b04:	ldr	r1, [r3, #4]
   12b08:	ldr	r0, [pc, #176]	; 12bc0 <__assert_fail@plt+0x1808>
   12b0c:	bl	1110c <printf@plt>
   12b10:	b	12884 <__assert_fail@plt+0x14cc>
   12b14:	ldr	r0, [pc, #168]	; 12bc4 <__assert_fail@plt+0x180c>
   12b18:	bl	111fc <puts@plt>
   12b1c:	ldr	r3, [pc, #108]	; 12b90 <__assert_fail@plt+0x17d8>
   12b20:	ldr	r0, [r3, #4]
   12b24:	add	r0, r0, #1
   12b28:	bl	111fc <puts@plt>
   12b2c:	mov	r0, #0
   12b30:	bl	1125c <exit@plt>
   12b34:	ldr	r0, [pc, #140]	; 12bc8 <__assert_fail@plt+0x1810>
   12b38:	bl	111fc <puts@plt>
   12b3c:	mov	r0, #0
   12b40:	bl	1125c <exit@plt>
   12b44:	ldr	r3, [pc, #68]	; 12b90 <__assert_fail@plt+0x17d8>
   12b48:	ldr	r3, [r3, #12]
   12b4c:	cmp	r3, #0
   12b50:	beq	12884 <__assert_fail@plt+0x14cc>
   12b54:	mov	r1, r0
   12b58:	ldr	r0, [pc, #108]	; 12bcc <__assert_fail@plt+0x1814>
   12b5c:	bl	1110c <printf@plt>
   12b60:	b	12884 <__assert_fail@plt+0x14cc>
   12b64:	mov	r1, r0
   12b68:	ldr	r0, [pc, #96]	; 12bd0 <__assert_fail@plt+0x1818>
   12b6c:	bl	1110c <printf@plt>
   12b70:	b	128c0 <__assert_fail@plt+0x1508>
   12b74:	andeq	r0, r3, ip, lsl #18
   12b78:	ldrdeq	r3, [r1], -r8
   12b7c:	andeq	r4, r1, r4, asr sp
   12b80:	andeq	r9, r1, r0, lsl #23
   12b84:	andeq	r0, r3, ip, lsr r9
   12b88:	ldrdeq	r0, [r3], -ip
   12b8c:	andeq	r9, r1, r8, asr #21
   12b90:	andeq	r0, r3, r4, asr #17
   12b94:			; <UNDEFINED> instruction: 0x00019cb4
   12b98:	andeq	sp, r2, ip, lsl r1
   12b9c:	andeq	r9, r1, r0, lsl #21
   12ba0:	ldrdeq	r2, [r1], -r4
   12ba4:	andeq	r0, r3, r8, lsr r9
   12ba8:	muleq	r1, r8, fp
   12bac:	strdeq	r0, [r3], -r4
   12bb0:	ldrdeq	r9, [r1], -r4
   12bb4:	andeq	r9, r1, r8, ror #23
   12bb8:			; <UNDEFINED> instruction: 0x00019bb0
   12bbc:	andeq	r9, r1, ip, lsl #24
   12bc0:	andeq	r9, r1, ip, lsl ip
   12bc4:	andeq	r9, r1, r8, lsr ip
   12bc8:	andeq	r9, r1, r0, lsl #25
   12bcc:	andeq	r9, r1, r0, lsr #25
   12bd0:	andeq	r9, r1, r0, asr #25
   12bd4:	push	{r4, lr}
   12bd8:	mov	r4, r0
   12bdc:	ldr	r3, [pc, #16]	; 12bf4 <__assert_fail@plt+0x183c>
   12be0:	ldr	r0, [r3]
   12be4:	bl	113a0 <close@plt>
   12be8:	mov	r1, r4
   12bec:	ldr	r0, [pc, #4]	; 12bf8 <__assert_fail@plt+0x1840>
   12bf0:	bl	122d8 <__assert_fail@plt+0xf20>
   12bf4:	andeq	r0, r3, r8, lsr r9
   12bf8:	ldrdeq	r9, [r1], -r8
   12bfc:	ldr	ip, [r0]
   12c00:	cmp	ip, #0
   12c04:	beq	12c58 <__assert_fail@plt+0x18a0>
   12c08:	push	{r4, r5, r6, lr}
   12c0c:	mov	ip, r2
   12c10:	mov	r5, r1
   12c14:	mov	r4, r0
   12c18:	ldr	r2, [r0, #32]
   12c1c:	str	r2, [r1, #36]	; 0x24
   12c20:	ldr	r2, [r0, #24]
   12c24:	str	r2, [r1, #28]
   12c28:	ldr	r2, [r0, #28]
   12c2c:	str	r2, [r1, #32]
   12c30:	ldr	r2, [r0, #12]
   12c34:	str	r2, [r1, #20]
   12c38:	ldr	r6, [r0]
   12c3c:	mov	r2, r1
   12c40:	mov	r1, r3
   12c44:	mov	r0, ip
   12c48:	blx	r6
   12c4c:	ldr	r3, [r5, #36]	; 0x24
   12c50:	str	r3, [r4, #32]
   12c54:	pop	{r4, r5, r6, pc}
   12c58:	mov	r0, #7
   12c5c:	bx	lr
   12c60:	push	{r4, r5, r6, lr}
   12c64:	ldr	r5, [r0, #16]
   12c68:	ldr	r3, [r0]
   12c6c:	cmp	r3, #0
   12c70:	beq	12c88 <__assert_fail@plt+0x18d0>
   12c74:	ldr	r2, [r1, #8]
   12c78:	add	r2, r2, #1
   12c7c:	str	r2, [r1, #8]
   12c80:	mov	r2, #0
   12c84:	b	12cdc <__assert_fail@plt+0x1924>
   12c88:	ldr	r3, [r0, #4]
   12c8c:	cmp	r3, #0
   12c90:	ldrne	r3, [r1, #8]
   12c94:	addne	r3, r3, #1
   12c98:	strne	r3, [r1, #8]
   12c9c:	cmp	r5, #0
   12ca0:	popeq	{r4, r5, r6, pc}
   12ca4:	ldr	r0, [r5]
   12ca8:	cmp	r0, #0
   12cac:	popeq	{r4, r5, r6, pc}
   12cb0:	mov	r4, r1
   12cb4:	mov	r1, r4
   12cb8:	bl	12c60 <__assert_fail@plt+0x18a8>
   12cbc:	ldr	r3, [r4, #12]
   12cc0:	add	r3, r3, #1
   12cc4:	str	r3, [r4, #12]
   12cc8:	ldr	r0, [r5, #16]!
   12ccc:	cmp	r0, #0
   12cd0:	bne	12cb4 <__assert_fail@plt+0x18fc>
   12cd4:	pop	{r4, r5, r6, pc}
   12cd8:	add	r2, r2, #1
   12cdc:	add	r3, r3, #24
   12ce0:	ldr	r0, [r3, #-20]	; 0xffffffec
   12ce4:	cmp	r0, #0
   12ce8:	bne	12cd8 <__assert_fail@plt+0x1920>
   12cec:	ldr	r0, [r3, #-24]	; 0xffffffe8
   12cf0:	cmp	r0, #0
   12cf4:	bne	12cd8 <__assert_fail@plt+0x1920>
   12cf8:	ldr	r0, [r3, #-8]
   12cfc:	cmp	r0, #0
   12d00:	bne	12cd8 <__assert_fail@plt+0x1920>
   12d04:	ldr	r0, [r3, #-4]
   12d08:	cmp	r0, #0
   12d0c:	bne	12cd8 <__assert_fail@plt+0x1920>
   12d10:	add	r0, r2, r2, lsl #1
   12d14:	ldr	r3, [r1]
   12d18:	add	r3, r3, r0
   12d1c:	str	r3, [r1]
   12d20:	ldr	r3, [r1, #4]
   12d24:	add	r2, r3, r2
   12d28:	str	r2, [r1, #4]
   12d2c:	b	12c9c <__assert_fail@plt+0x18e4>
   12d30:	cmp	r0, #86	; 0x56
   12d34:	beq	12d40 <__assert_fail@plt+0x1988>
   12d38:	mov	r0, #7
   12d3c:	bx	lr
   12d40:	push	{r4, lr}
   12d44:	mov	r4, r2
   12d48:	ldr	r3, [pc, #100]	; 12db4 <__assert_fail@plt+0x19fc>
   12d4c:	ldr	r3, [r3]
   12d50:	cmp	r3, #0
   12d54:	beq	12d78 <__assert_fail@plt+0x19c0>
   12d58:	mov	r1, r2
   12d5c:	ldr	r0, [r2, #48]	; 0x30
   12d60:	blx	r3
   12d64:	ldr	r3, [r4, #16]
   12d68:	tst	r3, #32
   12d6c:	beq	12dac <__assert_fail@plt+0x19f4>
   12d70:	mov	r0, #0
   12d74:	pop	{r4, pc}
   12d78:	ldr	r3, [pc, #56]	; 12db8 <__assert_fail@plt+0x1a00>
   12d7c:	ldr	r2, [r3]
   12d80:	cmp	r2, #0
   12d84:	beq	12d98 <__assert_fail@plt+0x19e0>
   12d88:	ldr	r1, [pc, #44]	; 12dbc <__assert_fail@plt+0x1a04>
   12d8c:	ldr	r0, [r4, #48]	; 0x30
   12d90:	bl	11280 <fprintf@plt>
   12d94:	b	12d64 <__assert_fail@plt+0x19ac>
   12d98:	ldr	r2, [pc, #32]	; 12dc0 <__assert_fail@plt+0x1a08>
   12d9c:	ldr	r1, [pc, #32]	; 12dc4 <__assert_fail@plt+0x1a0c>
   12da0:	mov	r0, r4
   12da4:	bl	17e54 <argp_error@@Base>
   12da8:	b	12d64 <__assert_fail@plt+0x19ac>
   12dac:	mov	r0, #0
   12db0:	bl	1125c <exit@plt>
   12db4:	ldrdeq	r0, [r3], -r8
   12db8:	andeq	r0, r3, r0, asr #18
   12dbc:	muleq	r1, r4, r8
   12dc0:	andeq	fp, r1, r0, ror #13
   12dc4:	andeq	fp, r1, r4, lsl #14
   12dc8:	push	{r4, r5, r6, lr}
   12dcc:	mov	r4, r2
   12dd0:	cmn	r0, #3
   12dd4:	beq	12e70 <__assert_fail@plt+0x1ab8>
   12dd8:	mov	r5, r1
   12ddc:	ble	12e08 <__assert_fail@plt+0x1a50>
   12de0:	cmn	r0, #2
   12de4:	beq	12e88 <__assert_fail@plt+0x1ad0>
   12de8:	cmp	r0, #63	; 0x3f
   12dec:	bne	12ecc <__assert_fail@plt+0x1b14>
   12df0:	ldr	r2, [pc, #228]	; 12edc <__assert_fail@plt+0x1b24>
   12df4:	ldr	r1, [r4, #48]	; 0x30
   12df8:	mov	r0, r4
   12dfc:	bl	17d98 <argp_state_help@@Base>
   12e00:	mov	r0, #0
   12e04:	pop	{r4, r5, r6, pc}
   12e08:	cmn	r0, #4
   12e0c:	bne	12ecc <__assert_fail@plt+0x1b14>
   12e10:	mov	r2, #10
   12e14:	mov	r1, #0
   12e18:	ldr	r0, [pc, #192]	; 12ee0 <__assert_fail@plt+0x1b28>
   12e1c:	cmp	r5, r1
   12e20:	movne	r0, r5
   12e24:	bl	11100 <strtol@plt>
   12e28:	ldr	r3, [pc, #180]	; 12ee4 <__assert_fail@plt+0x1b2c>
   12e2c:	str	r0, [r3]
   12e30:	ldr	r2, [r3]
   12e34:	sub	r1, r2, #1
   12e38:	str	r1, [r3]
   12e3c:	cmp	r2, #0
   12e40:	ble	12ed4 <__assert_fail@plt+0x1b1c>
   12e44:	mov	r5, #1
   12e48:	mov	r4, r3
   12e4c:	mov	r0, r5
   12e50:	bl	11190 <sleep@plt>
   12e54:	ldr	r3, [r4]
   12e58:	sub	r2, r3, #1
   12e5c:	str	r2, [r4]
   12e60:	cmp	r3, #0
   12e64:	bgt	12e4c <__assert_fail@plt+0x1a94>
   12e68:	mov	r0, #0
   12e6c:	pop	{r4, r5, r6, pc}
   12e70:	ldr	r2, [pc, #112]	; 12ee8 <__assert_fail@plt+0x1b30>
   12e74:	ldr	r1, [r4, #48]	; 0x30
   12e78:	mov	r0, r4
   12e7c:	bl	17d98 <argp_state_help@@Base>
   12e80:	mov	r0, #0
   12e84:	pop	{r4, r5, r6, pc}
   12e88:	ldr	r3, [pc, #92]	; 12eec <__assert_fail@plt+0x1b34>
   12e8c:	str	r1, [r3]
   12e90:	mov	r0, r1
   12e94:	bl	13d18 <argp_parse@@Base+0xb34>
   12e98:	str	r0, [r4, #40]	; 0x28
   12e9c:	ldr	r3, [pc, #76]	; 12ef0 <__assert_fail@plt+0x1b38>
   12ea0:	str	r0, [r3]
   12ea4:	ldr	r3, [r4, #16]
   12ea8:	and	r3, r3, #3
   12eac:	cmp	r3, #1
   12eb0:	beq	12ebc <__assert_fail@plt+0x1b04>
   12eb4:	mov	r0, #0
   12eb8:	pop	{r4, r5, r6, pc}
   12ebc:	ldr	r3, [r4, #8]
   12ec0:	str	r5, [r3]
   12ec4:	mov	r0, #0
   12ec8:	pop	{r4, r5, r6, pc}
   12ecc:	mov	r0, #7
   12ed0:	pop	{r4, r5, r6, pc}
   12ed4:	mov	r0, #0
   12ed8:	pop	{r4, r5, r6, pc}
   12edc:	andeq	r0, r0, sl, ror r2
   12ee0:	andeq	fp, r1, r8, lsl #14
   12ee4:	ldrdeq	r0, [r3], -r4
   12ee8:	andeq	r0, r0, r1, lsl #4
   12eec:			; <UNDEFINED> instruction: 0x000308b4
   12ef0:			; <UNDEFINED> instruction: 0x000308b0
   12ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef8:	sub	sp, sp, #36	; 0x24
   12efc:	str	r0, [sp, #12]
   12f00:	str	r1, [sp, #16]
   12f04:	str	r2, [sp, #20]
   12f08:	mov	r8, r3
   12f0c:	ldr	sl, [sp, #72]	; 0x48
   12f10:	ldr	r9, [r0]
   12f14:	ldr	r5, [r0, #16]
   12f18:	cmp	r9, #0
   12f1c:	addne	r6, r9, #24
   12f20:	strne	r5, [sp, #28]
   12f24:	strne	r8, [sp, #24]
   12f28:	bne	13034 <__assert_fail@plt+0x1c7c>
   12f2c:	ldr	r3, [sp, #12]
   12f30:	ldr	r3, [r3, #4]
   12f34:	cmp	r3, #0
   12f38:	moveq	r0, r8
   12f3c:	moveq	r8, #0
   12f40:	beq	12fc0 <__assert_fail@plt+0x1c08>
   12f44:	ldr	r2, [sp, #12]
   12f48:	ldr	r3, [r2, #4]
   12f4c:	str	r3, [r8]
   12f50:	str	r2, [r8, #4]
   12f54:	ldr	r3, [sl, #4]
   12f58:	str	r3, [r8, #8]
   12f5c:	mov	r3, #0
   12f60:	str	r3, [r8, #12]
   12f64:	ldr	r2, [sp, #16]
   12f68:	str	r2, [r8, #16]
   12f6c:	ldr	r2, [sp, #20]
   12f70:	str	r2, [r8, #20]
   12f74:	str	r3, [r8, #24]
   12f78:	str	r3, [r8, #32]
   12f7c:	str	r3, [r8, #28]
   12f80:	cmp	r5, r3
   12f84:	beq	12fbc <__assert_fail@plt+0x1c04>
   12f88:	ldr	r3, [r5]
   12f8c:	cmp	r3, #0
   12f90:	beq	131dc <__assert_fail@plt+0x1e24>
   12f94:	mov	r3, #0
   12f98:	add	r3, r3, #1
   12f9c:	ldr	r2, [r5, r3, lsl #4]
   12fa0:	cmp	r2, #0
   12fa4:	bne	12f98 <__assert_fail@plt+0x1be0>
   12fa8:	ldr	r2, [sl, #12]
   12fac:	str	r2, [r8, #28]
   12fb0:	ldr	r2, [sl, #12]
   12fb4:	add	r3, r2, r3, lsl #2
   12fb8:	str	r3, [sl, #12]
   12fbc:	add	r0, r8, #36	; 0x24
   12fc0:	cmp	r5, #0
   12fc4:	beq	13000 <__assert_fail@plt+0x1c48>
   12fc8:	ldr	ip, [r5]
   12fcc:	cmp	ip, #0
   12fd0:	beq	13000 <__assert_fail@plt+0x1c48>
   12fd4:	mov	r2, #0
   12fd8:	add	r4, r2, #1
   12fdc:	str	sl, [sp]
   12fe0:	mov	r3, r0
   12fe4:	mov	r1, r8
   12fe8:	mov	r0, ip
   12fec:	bl	12ef4 <__assert_fail@plt+0x1b3c>
   12ff0:	ldr	ip, [r5, r4, lsl #4]
   12ff4:	mov	r2, r4
   12ff8:	cmp	ip, #0
   12ffc:	bne	12fd8 <__assert_fail@plt+0x1c20>
   13000:	add	sp, sp, #36	; 0x24
   13004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13008:	ldr	r0, [r4, #16]!
   1300c:	cmp	r0, #0
   13010:	beq	1311c <__assert_fail@plt+0x1d64>
   13014:	mov	r1, r7
   13018:	bl	110f4 <strcmp@plt>
   1301c:	cmp	r0, #0
   13020:	bne	13008 <__assert_fail@plt+0x1c50>
   13024:	sub	r4, r4, fp
   13028:	cmn	r4, #15
   1302c:	blt	1311c <__assert_fail@plt+0x1d64>
   13030:	add	r6, r6, #24
   13034:	sub	r2, r6, #24
   13038:	mov	r8, r6
   1303c:	ldr	r4, [r6, #-20]	; 0xffffffec
   13040:	cmp	r4, #0
   13044:	bne	13054 <__assert_fail@plt+0x1c9c>
   13048:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1304c:	cmp	r3, #0
   13050:	beq	131b8 <__assert_fail@plt+0x1e00>
   13054:	ldr	r3, [r8, #-12]
   13058:	and	r1, r3, #4
   1305c:	cmp	r1, #0
   13060:	moveq	r9, r2
   13064:	ldr	r5, [r9, #12]
   13068:	ands	r5, r5, #8
   1306c:	bne	13030 <__assert_fail@plt+0x1c78>
   13070:	tst	r3, #8
   13074:	bne	130f8 <__assert_fail@plt+0x1d40>
   13078:	sub	r3, r4, #1
   1307c:	cmp	r3, #254	; 0xfe
   13080:	bhi	130f8 <__assert_fail@plt+0x1d40>
   13084:	bl	11250 <__ctype_b_loc@plt>
   13088:	ldr	r3, [r0]
   1308c:	lsl	r4, r4, #1
   13090:	ldrh	r3, [r3, r4]
   13094:	tst	r3, #16384	; 0x4000
   13098:	beq	130f8 <__assert_fail@plt+0x1d40>
   1309c:	ldr	r3, [sl, #4]
   130a0:	add	r2, r3, #1
   130a4:	str	r2, [sl, #4]
   130a8:	ldr	r2, [r8, #-20]	; 0xffffffec
   130ac:	strb	r2, [r3]
   130b0:	ldr	r3, [r9, #8]
   130b4:	cmp	r3, #0
   130b8:	beq	130ec <__assert_fail@plt+0x1d34>
   130bc:	ldr	r3, [sl, #4]
   130c0:	add	r2, r3, #1
   130c4:	str	r2, [sl, #4]
   130c8:	mov	r2, #58	; 0x3a
   130cc:	strb	r2, [r3]
   130d0:	ldr	r3, [r9, #12]
   130d4:	tst	r3, #1
   130d8:	ldrne	r3, [sl, #4]
   130dc:	addne	r2, r3, #1
   130e0:	strne	r2, [sl, #4]
   130e4:	movne	r2, #58	; 0x3a
   130e8:	strbne	r2, [r3]
   130ec:	ldr	r3, [sl, #4]
   130f0:	mov	r2, #0
   130f4:	strb	r2, [r3]
   130f8:	ldr	r7, [r8, #-24]	; 0xffffffe8
   130fc:	cmp	r7, #0
   13100:	beq	13030 <__assert_fail@plt+0x1c78>
   13104:	ldr	r3, [sl]
   13108:	ldr	fp, [r3, #8]
   1310c:	ldr	r0, [fp]
   13110:	cmp	r0, #0
   13114:	movne	r4, fp
   13118:	bne	13014 <__assert_fail@plt+0x1c5c>
   1311c:	ldr	r3, [sl, #8]
   13120:	str	r7, [r3]
   13124:	ldr	r3, [sl, #8]
   13128:	ldr	r2, [r9, #8]
   1312c:	cmp	r2, #0
   13130:	beq	13148 <__assert_fail@plt+0x1d90>
   13134:	ldr	r5, [r9, #12]
   13138:	and	r5, r5, #1
   1313c:	cmp	r5, #0
   13140:	movne	r5, #2
   13144:	moveq	r5, #1
   13148:	str	r5, [r3, #4]
   1314c:	ldr	r3, [sl, #8]
   13150:	mov	r2, #0
   13154:	str	r2, [r3, #8]
   13158:	ldr	r1, [sl, #8]
   1315c:	ldr	r0, [r8, #-20]	; 0xffffffec
   13160:	cmp	r0, r2
   13164:	ldreq	r0, [r9, #4]
   13168:	bic	r0, r0, #-16777216	; 0xff000000
   1316c:	ldr	r3, [sl]
   13170:	ldr	r3, [r3, #48]	; 0x30
   13174:	ldr	r2, [sp, #24]
   13178:	sub	r3, r2, r3
   1317c:	asr	r3, r3, #2
   13180:	rsb	r2, r3, r3, lsl #3
   13184:	add	r2, r2, r2, lsl #6
   13188:	add	r2, r3, r2, lsl #3
   1318c:	rsb	r2, r2, r2, lsl #15
   13190:	add	r3, r3, r2, lsl #3
   13194:	add	r3, r3, #1
   13198:	add	r3, r0, r3, lsl #24
   1319c:	str	r3, [r1, #12]
   131a0:	ldr	r3, [sl, #8]
   131a4:	add	r2, r3, #16
   131a8:	str	r2, [sl, #8]
   131ac:	mov	r2, #0
   131b0:	str	r2, [r3, #16]
   131b4:	b	13030 <__assert_fail@plt+0x1c78>
   131b8:	ldr	r3, [r6, #-8]
   131bc:	cmp	r3, #0
   131c0:	bne	13054 <__assert_fail@plt+0x1c9c>
   131c4:	ldr	r3, [r6, #-4]
   131c8:	cmp	r3, #0
   131cc:	bne	13054 <__assert_fail@plt+0x1c9c>
   131d0:	ldr	r5, [sp, #28]
   131d4:	ldr	r8, [sp, #24]
   131d8:	b	12f44 <__assert_fail@plt+0x1b8c>
   131dc:	mov	r3, #0
   131e0:	b	12fa8 <__assert_fail@plt+0x1bf0>

000131e4 <argp_parse@@Base>:
   131e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131e8:	add	fp, sp, #32
   131ec:	sub	sp, sp, #220	; 0xdc
   131f0:	mov	r8, r0
   131f4:	str	r1, [fp, #-236]	; 0xffffff14
   131f8:	str	r2, [fp, #-232]	; 0xffffff18
   131fc:	mov	r6, r3
   13200:	tst	r3, #1
   13204:	bne	13234 <argp_parse@@Base+0x50>
   13208:	ldr	r3, [pc, #2548]	; 13c04 <argp_parse@@Base+0xa20>
   1320c:	ldr	r3, [r3]
   13210:	cmp	r3, #0
   13214:	moveq	r3, r2
   13218:	ldreq	r2, [r3]
   1321c:	ldreq	r3, [pc, #2528]	; 13c04 <argp_parse@@Base+0xa20>
   13220:	streq	r2, [r3]
   13224:	ldr	r3, [pc, #2524]	; 13c08 <argp_parse@@Base+0xa24>
   13228:	ldr	r3, [r3]
   1322c:	cmp	r3, #0
   13230:	beq	13424 <argp_parse@@Base+0x240>
   13234:	tst	r6, #16
   13238:	beq	1343c <argp_parse@@Base+0x258>
   1323c:	mov	r2, #36	; 0x24
   13240:	mov	r1, #0
   13244:	sub	r0, fp, #196	; 0xc4
   13248:	bl	112b0 <memset@plt>
   1324c:	ands	r3, r6, #4
   13250:	str	r3, [fp, #-240]	; 0xffffff10
   13254:	moveq	r3, #1
   13258:	movne	r3, #0
   1325c:	str	r3, [fp, #-228]	; 0xffffff1c
   13260:	mov	r3, #0
   13264:	str	r3, [fp, #-224]	; 0xffffff20
   13268:	str	r3, [fp, #-220]	; 0xffffff24
   1326c:	str	r3, [fp, #-216]	; 0xffffff28
   13270:	cmp	r8, r3
   13274:	beq	13284 <argp_parse@@Base+0xa0>
   13278:	sub	r1, fp, #228	; 0xe4
   1327c:	mov	r0, r8
   13280:	bl	12c60 <__assert_fail@plt+0x18a8>
   13284:	ldr	r4, [fp, #-220]	; 0xffffff24
   13288:	add	r4, r4, #1
   1328c:	add	r4, r4, r4, lsl #3
   13290:	lsl	r4, r4, #2
   13294:	ldr	r9, [fp, #-216]	; 0xffffff28
   13298:	lsl	r9, r9, #2
   1329c:	add	sl, r9, r4
   132a0:	ldr	r5, [fp, #-224]	; 0xffffff20
   132a4:	add	r5, r5, #1
   132a8:	add	r5, sl, r5, lsl #4
   132ac:	ldr	r0, [fp, #-228]	; 0xffffff1c
   132b0:	add	r0, r0, #1
   132b4:	add	r0, r0, r5
   132b8:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   132bc:	mov	r7, r0
   132c0:	str	r0, [fp, #-40]	; 0xffffffd8
   132c4:	cmp	r0, #0
   132c8:	moveq	r4, #12
   132cc:	beq	13a54 <argp_parse@@Base+0x870>
   132d0:	str	r0, [fp, #-112]	; 0xffffff90
   132d4:	add	r4, r0, r4
   132d8:	str	r4, [fp, #-104]	; 0xffffff98
   132dc:	add	r3, r0, sl
   132e0:	str	r3, [fp, #-244]	; 0xffffff0c
   132e4:	str	r3, [fp, #-152]	; 0xffffff68
   132e8:	add	sl, r0, r5
   132ec:	str	sl, [fp, #-156]	; 0xffffff64
   132f0:	mov	r3, #1
   132f4:	str	r3, [fp, #-196]	; 0xffffff3c
   132f8:	str	r3, [fp, #-192]	; 0xffffff40
   132fc:	sub	ip, fp, #148	; 0x94
   13300:	sub	lr, fp, #196	; 0xc4
   13304:	ldm	lr!, {r0, r1, r2, r3}
   13308:	stmia	ip!, {r0, r1, r2, r3}
   1330c:	ldm	lr!, {r0, r1, r2, r3}
   13310:	stmia	ip!, {r0, r1, r2, r3}
   13314:	ldr	r3, [lr]
   13318:	str	r3, [ip]
   1331c:	mov	r2, r9
   13320:	mov	r1, #0
   13324:	mov	r0, r4
   13328:	bl	112b0 <memset@plt>
   1332c:	sub	r3, fp, #160	; 0xa0
   13330:	str	r3, [fp, #-212]	; 0xffffff2c
   13334:	str	sl, [fp, #-208]	; 0xffffff30
   13338:	ldr	r3, [fp, #-244]	; 0xffffff0c
   1333c:	str	r3, [fp, #-204]	; 0xffffff34
   13340:	str	r4, [fp, #-200]	; 0xffffff38
   13344:	tst	r6, #8
   13348:	beq	134d4 <argp_parse@@Base+0x2f0>
   1334c:	add	sl, sl, #1
   13350:	str	sl, [fp, #-208]	; 0xffffff30
   13354:	mov	r3, #45	; 0x2d
   13358:	strb	r3, [r7, r5]
   1335c:	mov	r3, #0
   13360:	ldr	r2, [fp, #-208]	; 0xffffff30
   13364:	strb	r3, [r2]
   13368:	ldr	r2, [fp, #-204]	; 0xffffff34
   1336c:	str	r3, [r2]
   13370:	str	r8, [fp, #-160]	; 0xffffff60
   13374:	cmp	r8, r3
   13378:	beq	134f0 <argp_parse@@Base+0x30c>
   1337c:	sub	r3, fp, #212	; 0xd4
   13380:	str	r3, [sp]
   13384:	ldr	r3, [fp, #-112]	; 0xffffff90
   13388:	mov	r2, #0
   1338c:	mov	r1, r2
   13390:	mov	r0, r8
   13394:	bl	12ef4 <__assert_fail@plt+0x1b3c>
   13398:	str	r0, [fp, #-108]	; 0xffffff94
   1339c:	mov	r2, #56	; 0x38
   133a0:	mov	r1, #0
   133a4:	sub	r0, fp, #96	; 0x60
   133a8:	bl	112b0 <memset@plt>
   133ac:	ldr	r3, [fp, #-160]	; 0xffffff60
   133b0:	str	r3, [fp, #-96]	; 0xffffffa0
   133b4:	ldr	r3, [fp, #-236]	; 0xffffff14
   133b8:	str	r3, [fp, #-92]	; 0xffffffa4
   133bc:	ldr	r3, [fp, #-232]	; 0xffffff18
   133c0:	str	r3, [fp, #-88]	; 0xffffffa8
   133c4:	str	r6, [fp, #-80]	; 0xffffffb0
   133c8:	ldr	r3, [pc, #2108]	; 13c0c <argp_parse@@Base+0xa28>
   133cc:	ldr	r3, [r3]
   133d0:	str	r3, [fp, #-52]	; 0xffffffcc
   133d4:	ldr	r3, [pc, #2100]	; 13c10 <argp_parse@@Base+0xa2c>
   133d8:	ldr	r3, [r3]
   133dc:	str	r3, [fp, #-48]	; 0xffffffd0
   133e0:	sub	r3, fp, #160	; 0xa0
   133e4:	str	r3, [fp, #-44]	; 0xffffffd4
   133e8:	mov	r3, #1
   133ec:	str	r3, [fp, #-100]	; 0xffffff9c
   133f0:	ldr	r3, [fp, #-112]	; 0xffffff90
   133f4:	ldr	r2, [fp, #-108]	; 0xffffff94
   133f8:	cmp	r3, r2
   133fc:	bcs	13588 <argp_parse@@Base+0x3a4>
   13400:	ldr	r2, [fp, #8]
   13404:	str	r2, [r3, #24]
   13408:	ldr	r5, [fp, #-112]	; 0xffffff90
   1340c:	ldr	r3, [fp, #-108]	; 0xffffff94
   13410:	cmp	r5, r3
   13414:	bcs	13594 <argp_parse@@Base+0x3b0>
   13418:	ldr	r7, [pc, #2036]	; 13c14 <argp_parse@@Base+0xa30>
   1341c:	mov	r6, #0
   13420:	b	1352c <argp_parse@@Base+0x348>
   13424:	ldr	r3, [fp, #-232]	; 0xffffff18
   13428:	ldr	r0, [r3]
   1342c:	bl	13d18 <argp_parse@@Base+0xb34>
   13430:	ldr	r3, [pc, #2000]	; 13c08 <argp_parse@@Base+0xa24>
   13434:	str	r0, [r3]
   13438:	b	13234 <argp_parse@@Base+0x50>
   1343c:	sub	sp, sp, #72	; 0x48
   13440:	add	r5, sp, #8
   13444:	sub	sp, sp, #40	; 0x28
   13448:	add	r4, sp, #8
   1344c:	mov	r1, #0
   13450:	str	r1, [r4]
   13454:	str	r1, [r4, #4]
   13458:	str	r1, [r4, #8]
   1345c:	str	r1, [r4, #12]
   13460:	str	r1, [r4, #20]
   13464:	str	r1, [r4, #24]
   13468:	str	r5, [r4, #16]
   1346c:	mov	r2, #64	; 0x40
   13470:	mov	r0, r5
   13474:	bl	112b0 <memset@plt>
   13478:	cmp	r8, #0
   1347c:	addne	r3, r5, #16
   13480:	strne	r8, [r5]
   13484:	moveq	r3, r5
   13488:	ldr	r2, [pc, #1928]	; 13c18 <argp_parse@@Base+0xa34>
   1348c:	str	r2, [r3]
   13490:	ldr	r2, [pc, #1924]	; 13c1c <argp_parse@@Base+0xa38>
   13494:	ldr	r2, [r2]
   13498:	cmp	r2, #0
   1349c:	beq	134bc <argp_parse@@Base+0x2d8>
   134a0:	add	r2, r3, #32
   134a4:	ldr	r1, [pc, #1908]	; 13c20 <argp_parse@@Base+0xa3c>
   134a8:	str	r1, [r3, #16]
   134ac:	mov	r3, #0
   134b0:	str	r3, [r2]
   134b4:	mov	r8, r4
   134b8:	b	1323c <argp_parse@@Base+0x58>
   134bc:	ldr	r2, [pc, #1888]	; 13c24 <argp_parse@@Base+0xa40>
   134c0:	ldr	r2, [r2]
   134c4:	cmp	r2, #0
   134c8:	addeq	r2, r3, #16
   134cc:	bne	134a0 <argp_parse@@Base+0x2bc>
   134d0:	b	134ac <argp_parse@@Base+0x2c8>
   134d4:	ldr	r3, [fp, #-240]	; 0xffffff10
   134d8:	cmp	r3, #0
   134dc:	addne	sl, sl, #1
   134e0:	strne	sl, [fp, #-208]	; 0xffffff30
   134e4:	movne	r3, #43	; 0x2b
   134e8:	strbne	r3, [r7, r5]
   134ec:	b	1335c <argp_parse@@Base+0x178>
   134f0:	ldr	r3, [fp, #-112]	; 0xffffff90
   134f4:	str	r3, [fp, #-108]	; 0xffffff94
   134f8:	b	1339c <argp_parse@@Base+0x1b8>
   134fc:	mov	r3, r6
   13500:	mov	r2, r7
   13504:	sub	r1, fp, #96	; 0x60
   13508:	mov	r0, r5
   1350c:	bl	12bfc <__assert_fail@plt+0x1844>
   13510:	add	r5, r5, #36	; 0x24
   13514:	ldr	r3, [fp, #-108]	; 0xffffff94
   13518:	cmp	r5, r3
   1351c:	bcs	13578 <argp_parse@@Base+0x394>
   13520:	cmp	r0, #7
   13524:	cmpne	r0, #0
   13528:	bne	13578 <argp_parse@@Base+0x394>
   1352c:	ldr	r3, [r5, #16]
   13530:	cmp	r3, #0
   13534:	ldrne	r2, [r5, #20]
   13538:	ldrne	r3, [r3, #28]
   1353c:	ldrne	r3, [r3, r2, lsl #2]
   13540:	strne	r3, [r5, #24]
   13544:	ldr	r3, [r5]
   13548:	cmp	r3, #0
   1354c:	bne	134fc <argp_parse@@Base+0x318>
   13550:	ldr	r3, [r5, #4]
   13554:	ldr	r3, [r3, #16]
   13558:	cmp	r3, #0
   1355c:	beq	134fc <argp_parse@@Base+0x318>
   13560:	ldr	r3, [r3]
   13564:	cmp	r3, #0
   13568:	ldrne	r3, [r5, #28]
   1356c:	ldrne	r2, [r5, #24]
   13570:	strne	r2, [r3]
   13574:	b	134fc <argp_parse@@Base+0x318>
   13578:	mov	r4, r0
   1357c:	cmp	r0, #7
   13580:	beq	13594 <argp_parse@@Base+0x3b0>
   13584:	b	1358c <argp_parse@@Base+0x3a8>
   13588:	mov	r4, #0
   1358c:	cmp	r4, #0
   13590:	bne	13a54 <argp_parse@@Base+0x870>
   13594:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13598:	tst	r3, #2
   1359c:	moveq	r3, #1
   135a0:	streq	r3, [fp, #-144]	; 0xffffff70
   135a4:	beq	135d0 <argp_parse@@Base+0x3ec>
   135a8:	mov	r2, #0
   135ac:	str	r2, [fp, #-144]	; 0xffffff70
   135b0:	tst	r3, #1
   135b4:	beq	135d0 <argp_parse@@Base+0x3ec>
   135b8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   135bc:	sub	r3, r3, #4
   135c0:	str	r3, [fp, #-88]	; 0xffffffa8
   135c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135c8:	add	r3, r3, #1
   135cc:	str	r3, [fp, #-92]	; 0xffffffa4
   135d0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   135d4:	ldr	r2, [fp, #-232]	; 0xffffff18
   135d8:	cmp	r2, r3
   135dc:	beq	135fc <argp_parse@@Base+0x418>
   135e0:	ldr	r3, [pc, #1568]	; 13c08 <argp_parse@@Base+0xa24>
   135e4:	ldr	r3, [r3]
   135e8:	str	r3, [fp, #-56]	; 0xffffffc8
   135ec:	mov	r6, #0
   135f0:	mov	sl, #1
   135f4:	mvn	r9, #0
   135f8:	b	1386c <argp_parse@@Base+0x688>
   135fc:	ldr	r0, [r2]
   13600:	cmp	r0, #0
   13604:	beq	135e0 <argp_parse@@Base+0x3fc>
   13608:	bl	13d18 <argp_parse@@Base+0xb34>
   1360c:	str	r0, [fp, #-56]	; 0xffffffc8
   13610:	b	135ec <argp_parse@@Base+0x408>
   13614:	ldr	r3, [fp, #-84]	; 0xffffffac
   13618:	str	r3, [fp, #-148]	; 0xffffff6c
   1361c:	str	r9, [fp, #-140]	; 0xffffff74
   13620:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13624:	tst	r3, #64	; 0x40
   13628:	beq	136f4 <argp_parse@@Base+0x510>
   1362c:	sub	r3, fp, #148	; 0x94
   13630:	str	r3, [sp, #4]
   13634:	str	r6, [sp]
   13638:	ldr	r3, [fp, #-152]	; 0xffffff68
   1363c:	ldr	r2, [fp, #-156]	; 0xffffff64
   13640:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13644:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13648:	bl	13eb4 <argp_parse@@Base+0xcd0>
   1364c:	mov	r5, r0
   13650:	ldr	r4, [fp, #-148]	; 0xffffff6c
   13654:	str	r4, [fp, #-84]	; 0xffffffac
   13658:	cmn	r5, #1
   1365c:	beq	1371c <argp_parse@@Base+0x538>
   13660:	cmp	r5, #63	; 0x3f
   13664:	beq	13748 <argp_parse@@Base+0x564>
   13668:	cmp	r5, #1
   1366c:	beq	13780 <argp_parse@@Base+0x59c>
   13670:	ldr	r4, [fp, #-136]	; 0xffffff78
   13674:	asrs	r3, r5, #24
   13678:	bne	1382c <argp_parse@@Base+0x648>
   1367c:	mov	r1, r5
   13680:	ldr	r0, [fp, #-156]	; 0xffffff64
   13684:	bl	11274 <strchr@plt>
   13688:	subs	r1, r0, #0
   1368c:	beq	136dc <argp_parse@@Base+0x4f8>
   13690:	ldr	r0, [fp, #-112]	; 0xffffff90
   13694:	ldr	r2, [fp, #-108]	; 0xffffff94
   13698:	cmp	r2, r0
   1369c:	bls	136dc <argp_parse@@Base+0x4f8>
   136a0:	ldr	r3, [r0, #8]
   136a4:	cmp	r1, r3
   136a8:	bcc	136c4 <argp_parse@@Base+0x4e0>
   136ac:	add	r0, r0, #36	; 0x24
   136b0:	cmp	r2, r0
   136b4:	bls	136dc <argp_parse@@Base+0x4f8>
   136b8:	ldr	r3, [r0, #8]
   136bc:	cmp	r1, r3
   136c0:	bcs	136ac <argp_parse@@Base+0x4c8>
   136c4:	mov	r3, r4
   136c8:	mov	r2, r5
   136cc:	sub	r1, fp, #96	; 0x60
   136d0:	bl	12bfc <__assert_fail@plt+0x1844>
   136d4:	cmp	r0, #7
   136d8:	bne	13864 <argp_parse@@Base+0x680>
   136dc:	ldr	r3, [pc, #1348]	; 13c28 <argp_parse@@Base+0xa44>
   136e0:	mov	r2, r5
   136e4:	ldr	r1, [pc, #1344]	; 13c2c <argp_parse@@Base+0xa48>
   136e8:	sub	r0, fp, #96	; 0x60
   136ec:	bl	17e54 <argp_error@@Base>
   136f0:	b	1390c <argp_parse@@Base+0x728>
   136f4:	sub	r3, fp, #148	; 0x94
   136f8:	str	r3, [sp, #4]
   136fc:	str	r6, [sp]
   13700:	ldr	r3, [fp, #-152]	; 0xffffff68
   13704:	ldr	r2, [fp, #-156]	; 0xffffff64
   13708:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1370c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13710:	bl	13e58 <argp_parse@@Base+0xc74>
   13714:	mov	r5, r0
   13718:	b	13650 <argp_parse@@Base+0x46c>
   1371c:	str	r6, [fp, #-100]	; 0xffffff9c
   13720:	cmp	r4, #1
   13724:	ble	13894 <argp_parse@@Base+0x6b0>
   13728:	sub	r3, r4, #-1073741823	; 0xc0000001
   1372c:	ldr	r1, [pc, #1276]	; 13c30 <argp_parse@@Base+0xa4c>
   13730:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13734:	ldr	r0, [r2, r3, lsl #2]
   13738:	bl	110f4 <strcmp@plt>
   1373c:	cmp	r0, #0
   13740:	streq	r4, [fp, #-72]	; 0xffffffb8
   13744:	b	13894 <argp_parse@@Base+0x6b0>
   13748:	ldr	r3, [fp, #-140]	; 0xffffff74
   1374c:	cmn	r3, #1
   13750:	beq	13670 <argp_parse@@Base+0x48c>
   13754:	mov	r3, #0
   13758:	b	1391c <argp_parse@@Base+0x738>
   1375c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13760:	tst	r2, #4
   13764:	movne	r3, #1
   13768:	bne	1391c <argp_parse@@Base+0x738>
   1376c:	add	r2, r3, #1
   13770:	str	r2, [fp, #-84]	; 0xffffffac
   13774:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13778:	ldr	r3, [r2, r3, lsl #2]
   1377c:	str	r3, [fp, #-136]	; 0xffffff78
   13780:	ldr	r7, [fp, #-136]	; 0xffffff78
   13784:	ldr	r8, [fp, #-84]	; 0xffffffac
   13788:	sub	r8, r8, #1
   1378c:	str	r8, [fp, #-84]	; 0xffffffac
   13790:	ldr	r5, [fp, #-112]	; 0xffffff90
   13794:	ldr	r3, [fp, #-108]	; 0xffffff94
   13798:	cmp	r3, r5
   1379c:	bhi	137e8 <argp_parse@@Base+0x604>
   137a0:	b	13824 <argp_parse@@Base+0x640>
   137a4:	ldr	r3, [fp, #-84]	; 0xffffffac
   137a8:	sub	r3, r3, #1
   137ac:	str	r3, [fp, #-84]	; 0xffffffac
   137b0:	mov	r3, r6
   137b4:	ldr	r2, [pc, #1144]	; 13c34 <argp_parse@@Base+0xa50>
   137b8:	sub	r1, fp, #96	; 0x60
   137bc:	mov	r0, r5
   137c0:	bl	12bfc <__assert_fail@plt+0x1844>
   137c4:	add	r5, r5, #36	; 0x24
   137c8:	ldr	r3, [fp, #-108]	; 0xffffff94
   137cc:	cmp	r5, r3
   137d0:	movcs	r3, #0
   137d4:	movcc	r3, #1
   137d8:	cmp	r0, #7
   137dc:	movne	r3, #0
   137e0:	cmp	r3, #0
   137e4:	beq	13bc8 <argp_parse@@Base+0x9e4>
   137e8:	ldr	r3, [fp, #-84]	; 0xffffffac
   137ec:	add	r3, r3, #1
   137f0:	str	r3, [fp, #-84]	; 0xffffffac
   137f4:	mov	r3, r7
   137f8:	mov	r2, r6
   137fc:	sub	r1, fp, #96	; 0x60
   13800:	mov	r0, r5
   13804:	bl	12bfc <__assert_fail@plt+0x1844>
   13808:	cmp	r0, #7
   1380c:	beq	137a4 <argp_parse@@Base+0x5c0>
   13810:	add	r5, r5, #36	; 0x24
   13814:	cmp	r0, #0
   13818:	beq	13bd8 <argp_parse@@Base+0x9f4>
   1381c:	cmp	r0, #7
   13820:	bne	13864 <argp_parse@@Base+0x680>
   13824:	mov	r5, #1
   13828:	b	1390c <argp_parse@@Base+0x728>
   1382c:	ands	r1, r5, #8388608	; 0x800000
   13830:	movne	r1, #-16777216	; 0xff000000
   13834:	bic	r2, r5, #-16777216	; 0xff000000
   13838:	add	r0, r3, r3, lsl #3
   1383c:	lsl	r0, r0, #2
   13840:	sub	r0, r0, #36	; 0x24
   13844:	mov	r3, r4
   13848:	orr	r2, r2, r1
   1384c:	sub	r1, fp, #96	; 0x60
   13850:	ldr	ip, [fp, #-112]	; 0xffffff90
   13854:	add	r0, ip, r0
   13858:	bl	12bfc <__assert_fail@plt+0x1844>
   1385c:	cmp	r0, #7
   13860:	beq	138ac <argp_parse@@Base+0x6c8>
   13864:	cmp	r0, #0
   13868:	bne	139bc <argp_parse@@Base+0x7d8>
   1386c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13870:	cmp	r3, #0
   13874:	beq	13888 <argp_parse@@Base+0x6a4>
   13878:	ldr	r2, [fp, #-84]	; 0xffffffac
   1387c:	cmp	r3, r2
   13880:	strgt	r6, [fp, #-72]	; 0xffffffb8
   13884:	ble	13894 <argp_parse@@Base+0x6b0>
   13888:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1388c:	cmp	r3, #0
   13890:	bne	13614 <argp_parse@@Base+0x430>
   13894:	ldr	r3, [fp, #-84]	; 0xffffffac
   13898:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1389c:	cmp	r3, r2
   138a0:	blt	1375c <argp_parse@@Base+0x578>
   138a4:	mov	r3, #1
   138a8:	b	1391c <argp_parse@@Base+0x738>
   138ac:	ldr	r3, [fp, #-152]	; 0xffffff68
   138b0:	ldr	r2, [r3, #12]
   138b4:	cmp	r2, r5
   138b8:	beq	138ec <argp_parse@@Base+0x708>
   138bc:	ldr	r2, [r3]
   138c0:	cmp	r2, #0
   138c4:	beq	139b4 <argp_parse@@Base+0x7d0>
   138c8:	add	r3, r3, #16
   138cc:	ldr	r2, [r3, #12]
   138d0:	cmp	r2, r5
   138d4:	beq	138ec <argp_parse@@Base+0x708>
   138d8:	ldr	r2, [r3]
   138dc:	cmp	r2, #0
   138e0:	bne	138c8 <argp_parse@@Base+0x6e4>
   138e4:	ldr	r2, [pc, #844]	; 13c38 <argp_parse@@Base+0xa54>
   138e8:	b	138fc <argp_parse@@Base+0x718>
   138ec:	ldr	r2, [r3]
   138f0:	ldr	r3, [pc, #832]	; 13c38 <argp_parse@@Base+0xa54>
   138f4:	cmp	r2, #0
   138f8:	moveq	r2, r3
   138fc:	ldr	r3, [pc, #804]	; 13c28 <argp_parse@@Base+0xa44>
   13900:	ldr	r1, [pc, #820]	; 13c3c <argp_parse@@Base+0xa58>
   13904:	sub	r0, fp, #96	; 0x60
   13908:	bl	17e54 <argp_error@@Base>
   1390c:	add	r5, r5, #1
   13910:	bics	r3, r5, #2
   13914:	moveq	r3, #1
   13918:	movne	r3, #0
   1391c:	cmp	r3, #0
   13920:	moveq	r4, #7
   13924:	beq	139c0 <argp_parse@@Base+0x7dc>
   13928:	ldr	r3, [fp, #-84]	; 0xffffffac
   1392c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   13930:	cmp	r3, r2
   13934:	beq	13a60 <argp_parse@@Base+0x87c>
   13938:	ldr	r2, [fp, #4]
   1393c:	cmp	r2, #0
   13940:	strne	r3, [r2]
   13944:	beq	13b5c <argp_parse@@Base+0x978>
   13948:	ldr	r5, [fp, #-108]	; 0xffffff94
   1394c:	sub	r5, r5, #36	; 0x24
   13950:	ldr	r3, [fp, #-112]	; 0xffffff90
   13954:	cmp	r5, r3
   13958:	bcc	13b98 <argp_parse@@Base+0x9b4>
   1395c:	ldr	r7, [pc, #732]	; 13c40 <argp_parse@@Base+0xa5c>
   13960:	mov	r6, #0
   13964:	mov	r3, r6
   13968:	mov	r2, r7
   1396c:	sub	r1, fp, #96	; 0x60
   13970:	mov	r0, r5
   13974:	bl	12bfc <__assert_fail@plt+0x1844>
   13978:	sub	r5, r5, #36	; 0x24
   1397c:	ldr	r3, [fp, #-112]	; 0xffffff90
   13980:	cmp	r5, r3
   13984:	bcc	13994 <argp_parse@@Base+0x7b0>
   13988:	cmp	r0, #7
   1398c:	cmpne	r0, #0
   13990:	beq	13964 <argp_parse@@Base+0x780>
   13994:	mov	r4, r0
   13998:	cmp	r0, #7
   1399c:	moveq	r4, #0
   139a0:	ldr	r5, [fp, #-108]	; 0xffffff94
   139a4:	sub	r5, r5, #36	; 0x24
   139a8:	cmp	r3, r5
   139ac:	bls	13a18 <argp_parse@@Base+0x834>
   139b0:	b	13a4c <argp_parse@@Base+0x868>
   139b4:	ldr	r2, [pc, #636]	; 13c38 <argp_parse@@Base+0xa54>
   139b8:	b	138fc <argp_parse@@Base+0x718>
   139bc:	mov	r4, r0
   139c0:	cmp	r4, #7
   139c4:	beq	13b80 <argp_parse@@Base+0x99c>
   139c8:	ldr	r5, [fp, #-112]	; 0xffffff90
   139cc:	ldr	r3, [fp, #-108]	; 0xffffff94
   139d0:	cmp	r3, r5
   139d4:	bls	13a04 <argp_parse@@Base+0x820>
   139d8:	ldr	r7, [pc, #612]	; 13c44 <argp_parse@@Base+0xa60>
   139dc:	mov	r6, #0
   139e0:	mov	r3, r6
   139e4:	mov	r2, r7
   139e8:	sub	r1, fp, #96	; 0x60
   139ec:	mov	r0, r5
   139f0:	bl	12bfc <__assert_fail@plt+0x1844>
   139f4:	add	r5, r5, #36	; 0x24
   139f8:	ldr	r3, [fp, #-108]	; 0xffffff94
   139fc:	cmp	r5, r3
   13a00:	bcc	139e0 <argp_parse@@Base+0x7fc>
   13a04:	ldr	r5, [fp, #-108]	; 0xffffff94
   13a08:	sub	r5, r5, #36	; 0x24
   13a0c:	ldr	r3, [fp, #-112]	; 0xffffff90
   13a10:	cmp	r3, r5
   13a14:	bhi	13a44 <argp_parse@@Base+0x860>
   13a18:	ldr	r7, [pc, #552]	; 13c48 <argp_parse@@Base+0xa64>
   13a1c:	mov	r6, #0
   13a20:	mov	r3, r6
   13a24:	mov	r2, r7
   13a28:	sub	r1, fp, #96	; 0x60
   13a2c:	mov	r0, r5
   13a30:	bl	12bfc <__assert_fail@plt+0x1844>
   13a34:	sub	r5, r5, #36	; 0x24
   13a38:	ldr	r3, [fp, #-112]	; 0xffffff90
   13a3c:	cmp	r5, r3
   13a40:	bcs	13a20 <argp_parse@@Base+0x83c>
   13a44:	cmp	r4, #7
   13a48:	moveq	r4, #22
   13a4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13a50:	bl	13dd8 <argp_parse@@Base+0xbf4>
   13a54:	mov	r0, r4
   13a58:	sub	sp, fp, #32
   13a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a60:	ldr	r6, [fp, #-112]	; 0xffffff90
   13a64:	ldr	r5, [fp, #-108]	; 0xffffff94
   13a68:	cmp	r6, r5
   13a6c:	bcs	13ba0 <argp_parse@@Base+0x9bc>
   13a70:	mov	r4, #0
   13a74:	ldr	r8, [pc, #464]	; 13c4c <argp_parse@@Base+0xa68>
   13a78:	mov	r7, r4
   13a7c:	mov	r0, r4
   13a80:	b	13aa0 <argp_parse@@Base+0x8bc>
   13a84:	add	r6, r6, #36	; 0x24
   13a88:	ldr	r5, [fp, #-108]	; 0xffffff94
   13a8c:	cmp	r6, r5
   13a90:	bcs	13acc <argp_parse@@Base+0x8e8>
   13a94:	cmp	r0, #7
   13a98:	cmpne	r0, #0
   13a9c:	bne	13ac4 <argp_parse@@Base+0x8e0>
   13aa0:	ldr	r3, [r6, #12]
   13aa4:	cmp	r3, #0
   13aa8:	bne	13a84 <argp_parse@@Base+0x8a0>
   13aac:	mov	r3, r7
   13ab0:	mov	r2, r8
   13ab4:	sub	r1, fp, #96	; 0x60
   13ab8:	mov	r0, r6
   13abc:	bl	12bfc <__assert_fail@plt+0x1844>
   13ac0:	b	13a84 <argp_parse@@Base+0x8a0>
   13ac4:	mov	r4, r0
   13ac8:	b	13b30 <argp_parse@@Base+0x94c>
   13acc:	mov	r4, r0
   13ad0:	sub	r5, r5, #36	; 0x24
   13ad4:	ldr	r3, [fp, #-112]	; 0xffffff90
   13ad8:	cmp	r3, r5
   13adc:	bhi	13b30 <argp_parse@@Base+0x94c>
   13ae0:	cmp	r0, #0
   13ae4:	cmpne	r0, #7
   13ae8:	bne	13b30 <argp_parse@@Base+0x94c>
   13aec:	ldr	r7, [pc, #348]	; 13c50 <argp_parse@@Base+0xa6c>
   13af0:	mov	r6, #0
   13af4:	mov	r3, r6
   13af8:	mov	r2, r7
   13afc:	sub	r1, fp, #96	; 0x60
   13b00:	mov	r0, r5
   13b04:	bl	12bfc <__assert_fail@plt+0x1844>
   13b08:	sub	r5, r5, #36	; 0x24
   13b0c:	ldr	r3, [fp, #-112]	; 0xffffff90
   13b10:	cmp	r5, r3
   13b14:	bcc	13b2c <argp_parse@@Base+0x948>
   13b18:	cmp	r0, #7
   13b1c:	cmpne	r0, #0
   13b20:	beq	13af4 <argp_parse@@Base+0x910>
   13b24:	mov	r4, r0
   13b28:	b	13b30 <argp_parse@@Base+0x94c>
   13b2c:	mov	r4, r0
   13b30:	cmp	r4, #7
   13b34:	beq	13bb4 <argp_parse@@Base+0x9d0>
   13b38:	ldr	r3, [fp, #4]
   13b3c:	cmp	r3, #0
   13b40:	beq	13bf8 <argp_parse@@Base+0xa14>
   13b44:	ldr	r3, [fp, #-84]	; 0xffffffac
   13b48:	ldr	r2, [fp, #4]
   13b4c:	str	r3, [r2]
   13b50:	cmp	r4, #0
   13b54:	beq	13948 <argp_parse@@Base+0x764>
   13b58:	b	139c0 <argp_parse@@Base+0x7dc>
   13b5c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13b60:	tst	r3, #2
   13b64:	bne	13b80 <argp_parse@@Base+0x99c>
   13b68:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13b6c:	cmp	r0, #0
   13b70:	beq	13b80 <argp_parse@@Base+0x99c>
   13b74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b78:	ldr	r1, [pc, #212]	; 13c54 <argp_parse@@Base+0xa70>
   13b7c:	bl	11280 <fprintf@plt>
   13b80:	mov	r2, #260	; 0x104
   13b84:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13b88:	sub	r0, fp, #96	; 0x60
   13b8c:	bl	17d98 <argp_state_help@@Base>
   13b90:	mov	r4, #7
   13b94:	b	139c8 <argp_parse@@Base+0x7e4>
   13b98:	mov	r4, #0
   13b9c:	b	13a44 <argp_parse@@Base+0x860>
   13ba0:	sub	r5, r5, #36	; 0x24
   13ba4:	cmp	r6, r5
   13ba8:	movhi	r4, #0
   13bac:	bls	13aec <argp_parse@@Base+0x908>
   13bb0:	b	13b38 <argp_parse@@Base+0x954>
   13bb4:	ldr	r3, [fp, #4]
   13bb8:	cmp	r3, #0
   13bbc:	movne	r4, #0
   13bc0:	bne	13b44 <argp_parse@@Base+0x960>
   13bc4:	b	13948 <argp_parse@@Base+0x764>
   13bc8:	cmp	r0, #0
   13bcc:	bne	1381c <argp_parse@@Base+0x638>
   13bd0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bd4:	str	r3, [fp, #-84]	; 0xffffffac
   13bd8:	ldr	r3, [fp, #-84]	; 0xffffffac
   13bdc:	cmp	r8, r3
   13be0:	sublt	r8, r3, r8
   13be4:	ldrlt	r3, [r5, #-24]	; 0xffffffe8
   13be8:	addlt	r8, r3, r8
   13bec:	strlt	r8, [r5, #-24]	; 0xffffffe8
   13bf0:	strge	sl, [fp, #-100]	; 0xffffff9c
   13bf4:	b	1386c <argp_parse@@Base+0x688>
   13bf8:	cmp	r4, #0
   13bfc:	beq	13948 <argp_parse@@Base+0x764>
   13c00:	b	139c8 <argp_parse@@Base+0x7e4>
   13c04:			; <UNDEFINED> instruction: 0x000308b4
   13c08:			; <UNDEFINED> instruction: 0x000308b0
   13c0c:			; <UNDEFINED> instruction: 0x000308b8
   13c10:			; <UNDEFINED> instruction: 0x000308bc
   13c14:	tsteq	r0, r3
   13c18:	andeq	fp, r1, r8, asr #11
   13c1c:	andeq	r0, r3, r0, asr #18
   13c20:	andeq	fp, r1, r4, ror #11
   13c24:	ldrdeq	r0, [r3], -r8
   13c28:	andeq	fp, r1, r0, lsl #12
   13c2c:	andeq	fp, r1, r8, lsl r7
   13c30:	andeq	fp, r1, r4, lsl r7
   13c34:	tsteq	r0, r6
   13c38:	andeq	fp, r1, r0, lsl r7
   13c3c:	andeq	fp, r1, r0, lsr #14
   13c40:	tsteq	r0, r4
   13c44:	tsteq	r0, r5
   13c48:	tsteq	r0, r7
   13c4c:	tsteq	r0, r2
   13c50:	tsteq	r0, r1
   13c54:	andeq	fp, r1, ip, lsr #14
   13c58:	cmp	r1, #0
   13c5c:	beq	13ca8 <argp_parse@@Base+0xac4>
   13c60:	ldr	r2, [r1, #52]	; 0x34
   13c64:	ldr	r3, [r2, #48]	; 0x30
   13c68:	ldr	r1, [r2, #52]	; 0x34
   13c6c:	cmp	r3, r1
   13c70:	bcs	13cb0 <argp_parse@@Base+0xacc>
   13c74:	ldr	r2, [r3, #4]
   13c78:	cmp	r0, r2
   13c7c:	beq	13c98 <argp_parse@@Base+0xab4>
   13c80:	add	r3, r3, #36	; 0x24
   13c84:	cmp	r3, r1
   13c88:	bcs	13ca0 <argp_parse@@Base+0xabc>
   13c8c:	ldr	r2, [r3, #4]
   13c90:	cmp	r2, r0
   13c94:	bne	13c80 <argp_parse@@Base+0xa9c>
   13c98:	ldr	r0, [r3, #24]
   13c9c:	bx	lr
   13ca0:	mov	r0, #0
   13ca4:	bx	lr
   13ca8:	mov	r0, #0
   13cac:	bx	lr
   13cb0:	mov	r0, #0
   13cb4:	bx	lr
   13cb8:	push	{lr}		; (str lr, [sp, #-4]!)
   13cbc:	sub	sp, sp, #12
   13cc0:	ldr	r3, [pc, #28]	; 13ce4 <argp_parse@@Base+0xb00>
   13cc4:	ldr	r1, [r3]
   13cc8:	ldr	r3, [r3, #4]
   13ccc:	str	r3, [sp]
   13cd0:	ldr	r3, [pc, #16]	; 13ce8 <argp_parse@@Base+0xb04>
   13cd4:	ldr	r2, [pc, #16]	; 13cec <argp_parse@@Base+0xb08>
   13cd8:	bl	1460c <_obstack_memory_used@@Base+0x3e4>
   13cdc:	add	sp, sp, #12
   13ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ce4:	ldrdeq	r0, [r3], -ip
   13ce8:	andeq	fp, r1, r4, lsl r8
   13cec:	andeq	fp, r1, r4, lsr #16
   13cf0:	ldr	r2, [pc, #20]	; 13d0c <argp_parse@@Base+0xb28>
   13cf4:	ldr	r3, [pc, #20]	; 13d10 <argp_parse@@Base+0xb2c>
   13cf8:	str	r2, [r3]
   13cfc:	ldr	r3, [pc, #16]	; 13d14 <argp_parse@@Base+0xb30>
   13d00:	str	r0, [r3]
   13d04:	str	r1, [r3, #4]
   13d08:	bx	lr
   13d0c:			; <UNDEFINED> instruction: 0x00013cb8
   13d10:	ldrdeq	r0, [r3], -r8
   13d14:	ldrdeq	r0, [r3], -ip
   13d18:	ldrb	r3, [r0]
   13d1c:	cmp	r3, #47	; 0x2f
   13d20:	bne	13d30 <argp_parse@@Base+0xb4c>
   13d24:	ldrb	r3, [r0, #1]!
   13d28:	cmp	r3, #47	; 0x2f
   13d2c:	beq	13d24 <argp_parse@@Base+0xb40>
   13d30:	ldrb	r2, [r0]
   13d34:	cmp	r2, #0
   13d38:	bxeq	lr
   13d3c:	push	{lr}		; (str lr, [sp, #-4]!)
   13d40:	mov	r1, r0
   13d44:	mov	r3, #0
   13d48:	mov	lr, #1
   13d4c:	mov	ip, r3
   13d50:	b	13d60 <argp_parse@@Base+0xb7c>
   13d54:	ldrb	r2, [r1, #1]!
   13d58:	cmp	r2, #0
   13d5c:	beq	13d7c <argp_parse@@Base+0xb98>
   13d60:	cmp	r2, #47	; 0x2f
   13d64:	moveq	r3, lr
   13d68:	beq	13d54 <argp_parse@@Base+0xb70>
   13d6c:	cmp	r3, #0
   13d70:	movne	r0, r1
   13d74:	movne	r3, ip
   13d78:	b	13d54 <argp_parse@@Base+0xb70>
   13d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d80:	push	{r4, lr}
   13d84:	mov	r4, r0
   13d88:	bl	11268 <strlen@plt>
   13d8c:	cmp	r0, #1
   13d90:	popls	{r4, pc}
   13d94:	sub	r3, r0, #1
   13d98:	add	r2, r4, r3
   13d9c:	ldrb	r1, [r4, r3]
   13da0:	cmp	r1, #47	; 0x2f
   13da4:	popne	{r4, pc}
   13da8:	cmp	r3, #1
   13dac:	beq	13dd0 <argp_parse@@Base+0xbec>
   13db0:	sub	r0, r3, #1
   13db4:	ldrb	r1, [r2, #-1]!
   13db8:	cmp	r1, #47	; 0x2f
   13dbc:	beq	13dc8 <argp_parse@@Base+0xbe4>
   13dc0:	mov	r0, r3
   13dc4:	pop	{r4, pc}
   13dc8:	mov	r3, r0
   13dcc:	b	13da8 <argp_parse@@Base+0xbc4>
   13dd0:	mov	r0, #1
   13dd4:	pop	{r4, pc}
   13dd8:	push	{r4, r5, lr}
   13ddc:	sub	sp, sp, #12
   13de0:	mov	r5, r0
   13de4:	bl	1128c <__errno_location@plt>
   13de8:	mov	r4, r0
   13dec:	ldr	r3, [r0]
   13df0:	str	r3, [sp]
   13df4:	str	r3, [sp, #4]
   13df8:	mov	r3, #0
   13dfc:	str	r3, [r0]
   13e00:	mov	r0, r5
   13e04:	bl	11130 <free@plt>
   13e08:	ldr	r3, [r4]
   13e0c:	cmp	r3, #0
   13e10:	moveq	r3, #4
   13e14:	movne	r3, #0
   13e18:	add	r2, sp, #8
   13e1c:	add	r3, r2, r3
   13e20:	ldr	r3, [r3, #-8]
   13e24:	str	r3, [r4]
   13e28:	add	sp, sp, #12
   13e2c:	pop	{r4, r5, pc}
   13e30:	push	{lr}		; (str lr, [sp, #-4]!)
   13e34:	sub	sp, sp, #20
   13e38:	mov	ip, #0
   13e3c:	str	ip, [sp, #8]
   13e40:	str	ip, [sp, #4]
   13e44:	ldr	ip, [sp, #24]
   13e48:	str	ip, [sp]
   13e4c:	bl	18ad0 <argp_error@@Base+0xc7c>
   13e50:	add	sp, sp, #20
   13e54:	pop	{pc}		; (ldr pc, [sp], #4)
   13e58:	push	{lr}		; (str lr, [sp, #-4]!)
   13e5c:	sub	sp, sp, #20
   13e60:	mov	ip, #0
   13e64:	str	ip, [sp, #12]
   13e68:	ldr	lr, [sp, #28]
   13e6c:	str	lr, [sp, #8]
   13e70:	str	ip, [sp, #4]
   13e74:	ldr	ip, [sp, #24]
   13e78:	str	ip, [sp]
   13e7c:	bl	18554 <argp_error@@Base+0x700>
   13e80:	add	sp, sp, #20
   13e84:	pop	{pc}		; (ldr pc, [sp], #4)
   13e88:	push	{lr}		; (str lr, [sp, #-4]!)
   13e8c:	sub	sp, sp, #20
   13e90:	mov	ip, #0
   13e94:	str	ip, [sp, #8]
   13e98:	mov	ip, #1
   13e9c:	str	ip, [sp, #4]
   13ea0:	ldr	ip, [sp, #24]
   13ea4:	str	ip, [sp]
   13ea8:	bl	18ad0 <argp_error@@Base+0xc7c>
   13eac:	add	sp, sp, #20
   13eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb4:	push	{lr}		; (str lr, [sp, #-4]!)
   13eb8:	sub	sp, sp, #20
   13ebc:	mov	ip, #0
   13ec0:	str	ip, [sp, #12]
   13ec4:	ldr	ip, [sp, #28]
   13ec8:	str	ip, [sp, #8]
   13ecc:	mov	ip, #1
   13ed0:	str	ip, [sp, #4]
   13ed4:	ldr	ip, [sp, #24]
   13ed8:	str	ip, [sp]
   13edc:	bl	18554 <argp_error@@Base+0x700>
   13ee0:	add	sp, sp, #20
   13ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ee8:	push	{r4, lr}
   13eec:	ldrb	r3, [r0, #40]	; 0x28
   13ef0:	tst	r3, #1
   13ef4:	bne	13f08 <argp_parse@@Base+0xd24>
   13ef8:	ldr	r3, [r0, #28]
   13efc:	mov	r0, r1
   13f00:	blx	r3
   13f04:	pop	{r4, pc}
   13f08:	ldr	r3, [r0, #28]
   13f0c:	ldr	r0, [r0, #36]	; 0x24
   13f10:	blx	r3
   13f14:	pop	{r4, pc}
   13f18:	push	{r4, lr}
   13f1c:	ldrb	r3, [r0, #40]	; 0x28
   13f20:	tst	r3, #1
   13f24:	bne	13f38 <argp_parse@@Base+0xd54>
   13f28:	ldr	r3, [r0, #32]
   13f2c:	mov	r0, r1
   13f30:	blx	r3
   13f34:	pop	{r4, pc}
   13f38:	ldr	r3, [r0, #32]
   13f3c:	ldr	r0, [r0, #36]	; 0x24
   13f40:	blx	r3
   13f44:	pop	{r4, pc}
   13f48:	push	{r4, r5, r6, lr}
   13f4c:	mov	r4, r0
   13f50:	subs	r5, r2, #0
   13f54:	cmp	r2, #0
   13f58:	moveq	r5, #8
   13f5c:	ldr	r3, [pc, #112]	; 13fd4 <argp_parse@@Base+0xdf0>
   13f60:	cmp	r1, #0
   13f64:	moveq	r1, r3
   13f68:	str	r1, [r0]
   13f6c:	sub	r6, r5, #1
   13f70:	str	r6, [r0, #24]
   13f74:	bl	13ee8 <argp_parse@@Base+0xd04>
   13f78:	str	r0, [r4, #4]
   13f7c:	cmp	r0, #0
   13f80:	beq	13fc8 <argp_parse@@Base+0xde4>
   13f84:	add	r3, r0, #8
   13f88:	add	r3, r3, r6
   13f8c:	rsb	r5, r5, #0
   13f90:	and	r5, r5, r3
   13f94:	str	r5, [r4, #8]
   13f98:	str	r5, [r4, #12]
   13f9c:	ldr	r3, [r4]
   13fa0:	add	r3, r0, r3
   13fa4:	str	r3, [r0]
   13fa8:	str	r3, [r4, #16]
   13fac:	mov	r3, #0
   13fb0:	str	r3, [r0, #4]
   13fb4:	ldrb	r3, [r4, #40]	; 0x28
   13fb8:	and	r3, r3, #249	; 0xf9
   13fbc:	strb	r3, [r4, #40]	; 0x28
   13fc0:	mov	r0, #1
   13fc4:	pop	{r4, r5, r6, pc}
   13fc8:	ldr	r3, [pc, #8]	; 13fd8 <argp_parse@@Base+0xdf4>
   13fcc:	ldr	r3, [r3]
   13fd0:	blx	r3
   13fd4:	andeq	r0, r0, r8, ror #31
   13fd8:	andeq	r0, r3, r0, ror r8
   13fdc:	push	{r4, lr}
   13fe0:	ldr	r2, [pc, #24]	; 14000 <argp_parse@@Base+0xe1c>
   13fe4:	ldr	r1, [pc, #24]	; 14004 <argp_parse@@Base+0xe20>
   13fe8:	ldr	r3, [pc, #24]	; 14008 <argp_parse@@Base+0xe24>
   13fec:	ldr	r0, [r3]
   13ff0:	bl	11280 <fprintf@plt>
   13ff4:	ldr	r3, [pc, #16]	; 1400c <argp_parse@@Base+0xe28>
   13ff8:	ldr	r0, [r3]
   13ffc:	bl	1125c <exit@plt>
   14000:	andeq	fp, r1, r4, lsr r8
   14004:	muleq	r1, r4, r8
   14008:			; <UNDEFINED> instruction: 0x000308b8
   1400c:	muleq	r3, ip, r8

00014010 <_obstack_begin@@Base>:
   14010:	push	{r4, lr}
   14014:	str	r3, [r0, #28]
   14018:	ldr	r3, [sp, #8]
   1401c:	str	r3, [r0, #32]
   14020:	ldrb	r3, [r0, #40]	; 0x28
   14024:	bic	r3, r3, #1
   14028:	strb	r3, [r0, #40]	; 0x28
   1402c:	bl	13f48 <argp_parse@@Base+0xd64>
   14030:	pop	{r4, pc}

00014034 <_obstack_begin_1@@Base>:
   14034:	push	{r4, lr}
   14038:	str	r3, [r0, #28]
   1403c:	ldr	r3, [sp, #8]
   14040:	str	r3, [r0, #32]
   14044:	ldr	r3, [sp, #12]
   14048:	str	r3, [r0, #36]	; 0x24
   1404c:	ldrb	r3, [r0, #40]	; 0x28
   14050:	orr	r3, r3, #1
   14054:	strb	r3, [r0, #40]	; 0x28
   14058:	bl	13f48 <argp_parse@@Base+0xd64>
   1405c:	pop	{r4, pc}

00014060 <_obstack_newchunk@@Base>:
   14060:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14064:	ldr	r5, [r0, #12]
   14068:	ldr	r3, [r0, #8]
   1406c:	sub	r7, r5, r3
   14070:	add	r1, r7, r1
   14074:	ldr	r3, [r0, #24]
   14078:	adds	r3, r1, r3
   1407c:	movcc	r2, #1
   14080:	movcs	r2, #0
   14084:	cmp	r7, r1
   14088:	movhi	r1, #0
   1408c:	andls	r1, r2, #1
   14090:	cmp	r1, #0
   14094:	bne	140a4 <_obstack_newchunk@@Base+0x44>
   14098:	ldr	r3, [pc, #204]	; 1416c <_obstack_newchunk@@Base+0x10c>
   1409c:	ldr	r3, [r3]
   140a0:	blx	r3
   140a4:	mov	r4, r0
   140a8:	ldr	r8, [r0, #4]
   140ac:	add	r1, r3, r7, lsr #3
   140b0:	add	r1, r1, #100	; 0x64
   140b4:	ldr	r6, [r0]
   140b8:	cmp	r3, r6
   140bc:	movcc	r3, r6
   140c0:	cmp	r3, r1
   140c4:	movcs	r6, r3
   140c8:	movcc	r6, r1
   140cc:	mov	r1, r6
   140d0:	bl	13ee8 <argp_parse@@Base+0xd04>
   140d4:	subs	r9, r0, #0
   140d8:	beq	14098 <_obstack_newchunk@@Base+0x38>
   140dc:	str	r9, [r4, #4]
   140e0:	str	r8, [r9, #4]
   140e4:	add	r1, r9, r6
   140e8:	str	r1, [r4, #16]
   140ec:	mov	r5, r9
   140f0:	str	r1, [r5], #8
   140f4:	ldr	r3, [r4, #24]
   140f8:	add	r5, r5, r3
   140fc:	bic	r5, r5, r3
   14100:	mov	r2, r7
   14104:	ldr	r1, [r4, #8]
   14108:	mov	r0, r5
   1410c:	bl	1116c <memcpy@plt>
   14110:	ldrb	r3, [r4, #40]	; 0x28
   14114:	tst	r3, #2
   14118:	bne	14138 <_obstack_newchunk@@Base+0xd8>
   1411c:	ldr	r2, [r4, #24]
   14120:	add	r3, r8, #8
   14124:	add	r3, r3, r2
   14128:	bic	r3, r3, r2
   1412c:	ldr	r2, [r4, #8]
   14130:	cmp	r2, r3
   14134:	beq	14154 <_obstack_newchunk@@Base+0xf4>
   14138:	str	r5, [r4, #8]
   1413c:	add	r5, r5, r7
   14140:	str	r5, [r4, #12]
   14144:	ldrb	r3, [r4, #40]	; 0x28
   14148:	bic	r3, r3, #2
   1414c:	strb	r3, [r4, #40]	; 0x28
   14150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14154:	ldr	r3, [r8, #4]
   14158:	str	r3, [r9, #4]
   1415c:	mov	r1, r8
   14160:	mov	r0, r4
   14164:	bl	13f18 <argp_parse@@Base+0xd34>
   14168:	b	14138 <_obstack_newchunk@@Base+0xd8>
   1416c:	andeq	r0, r3, r0, ror r8

00014170 <_obstack_allocated_p@@Base>:
   14170:	ldr	r0, [r0, #4]
   14174:	cmp	r0, #0
   14178:	bne	1418c <_obstack_allocated_p@@Base+0x1c>
   1417c:	b	141a0 <_obstack_allocated_p@@Base+0x30>
   14180:	ldr	r0, [r0, #4]
   14184:	cmp	r0, #0
   14188:	beq	141a0 <_obstack_allocated_p@@Base+0x30>
   1418c:	cmp	r1, r0
   14190:	bls	14180 <_obstack_allocated_p@@Base+0x10>
   14194:	ldr	r3, [r0]
   14198:	cmp	r1, r3
   1419c:	bhi	14180 <_obstack_allocated_p@@Base+0x10>
   141a0:	adds	r0, r0, #0
   141a4:	movne	r0, #1
   141a8:	bx	lr

000141ac <_obstack_free@@Base>:
   141ac:	push	{r4, r5, r6, lr}
   141b0:	mov	r4, r0
   141b4:	mov	r6, r1
   141b8:	ldr	r1, [r0, #4]
   141bc:	cmp	r1, #0
   141c0:	bne	141f4 <_obstack_free@@Base+0x48>
   141c4:	cmp	r6, #0
   141c8:	popeq	{r4, r5, r6, pc}
   141cc:	bl	11394 <abort@plt>
   141d0:	ldr	r5, [r1, #4]
   141d4:	mov	r0, r4
   141d8:	bl	13f18 <argp_parse@@Base+0xd34>
   141dc:	ldrb	r3, [r4, #40]	; 0x28
   141e0:	orr	r3, r3, #2
   141e4:	strb	r3, [r4, #40]	; 0x28
   141e8:	mov	r1, r5
   141ec:	cmp	r5, #0
   141f0:	beq	141c4 <_obstack_free@@Base+0x18>
   141f4:	cmp	r6, r1
   141f8:	bls	141d0 <_obstack_free@@Base+0x24>
   141fc:	ldr	r3, [r1]
   14200:	cmp	r6, r3
   14204:	bhi	141d0 <_obstack_free@@Base+0x24>
   14208:	cmp	r1, #0
   1420c:	beq	141c4 <_obstack_free@@Base+0x18>
   14210:	str	r6, [r4, #12]
   14214:	str	r6, [r4, #8]
   14218:	ldr	r3, [r1]
   1421c:	str	r3, [r4, #16]
   14220:	str	r1, [r4, #4]
   14224:	pop	{r4, r5, r6, pc}

00014228 <_obstack_memory_used@@Base>:
   14228:	ldr	r3, [r0, #4]
   1422c:	cmp	r3, #0
   14230:	beq	14254 <_obstack_memory_used@@Base+0x2c>
   14234:	mov	r0, #0
   14238:	ldr	r2, [r3]
   1423c:	sub	r2, r2, r3
   14240:	add	r0, r0, r2
   14244:	ldr	r3, [r3, #4]
   14248:	cmp	r3, #0
   1424c:	bne	14238 <_obstack_memory_used@@Base+0x10>
   14250:	bx	lr
   14254:	mov	r0, #0
   14258:	bx	lr
   1425c:	push	{r4, r5, r6, lr}
   14260:	subs	r4, r0, #0
   14264:	beq	142dc <_obstack_memory_used@@Base+0xb4>
   14268:	mov	r1, #47	; 0x2f
   1426c:	mov	r0, r4
   14270:	bl	112e0 <strrchr@plt>
   14274:	cmp	r0, #0
   14278:	addne	r5, r0, #1
   1427c:	moveq	r5, r4
   14280:	sub	r3, r5, r4
   14284:	cmp	r3, #6
   14288:	ble	142c8 <_obstack_memory_used@@Base+0xa0>
   1428c:	mov	r2, #7
   14290:	ldr	r1, [pc, #96]	; 142f8 <_obstack_memory_used@@Base+0xd0>
   14294:	sub	r0, r5, #7
   14298:	bl	11388 <strncmp@plt>
   1429c:	cmp	r0, #0
   142a0:	bne	142c8 <_obstack_memory_used@@Base+0xa0>
   142a4:	mov	r2, #3
   142a8:	ldr	r1, [pc, #76]	; 142fc <_obstack_memory_used@@Base+0xd4>
   142ac:	mov	r0, r5
   142b0:	bl	11388 <strncmp@plt>
   142b4:	cmp	r0, #0
   142b8:	addeq	r4, r5, #3
   142bc:	ldreq	r3, [pc, #60]	; 14300 <_obstack_memory_used@@Base+0xd8>
   142c0:	streq	r4, [r3]
   142c4:	movne	r4, r5
   142c8:	ldr	r3, [pc, #52]	; 14304 <_obstack_memory_used@@Base+0xdc>
   142cc:	str	r4, [r3]
   142d0:	ldr	r3, [pc, #48]	; 14308 <_obstack_memory_used@@Base+0xe0>
   142d4:	str	r4, [r3]
   142d8:	pop	{r4, r5, r6, pc}
   142dc:	ldr	r3, [pc, #40]	; 1430c <_obstack_memory_used@@Base+0xe4>
   142e0:	ldr	r3, [r3]
   142e4:	mov	r2, #55	; 0x37
   142e8:	mov	r1, #1
   142ec:	ldr	r0, [pc, #28]	; 14310 <_obstack_memory_used@@Base+0xe8>
   142f0:	bl	111c0 <fwrite@plt>
   142f4:	bl	11394 <abort@plt>
   142f8:	andeq	fp, r1, r0, lsl #17
   142fc:	andeq	fp, r1, r8, lsl #17
   14300:			; <UNDEFINED> instruction: 0x000308b0
   14304:	andeq	r0, r3, r4, ror #17
   14308:			; <UNDEFINED> instruction: 0x000308b4
   1430c:			; <UNDEFINED> instruction: 0x000308b8
   14310:	andeq	fp, r1, r8, asr #16
   14314:	push	{r4, r5, r6, lr}
   14318:	sub	sp, sp, #32
   1431c:	mov	r4, r0
   14320:	ldr	r5, [sp, #48]	; 0x30
   14324:	ldr	r6, [sp, #52]	; 0x34
   14328:	cmp	r1, #0
   1432c:	beq	143b4 <_obstack_memory_used@@Base+0x18c>
   14330:	str	r3, [sp]
   14334:	mov	r3, r2
   14338:	mov	r2, r1
   1433c:	ldr	r1, [pc, #644]	; 145c8 <_obstack_memory_used@@Base+0x3a0>
   14340:	bl	11280 <fprintf@plt>
   14344:	ldr	r3, [pc, #640]	; 145cc <_obstack_memory_used@@Base+0x3a4>
   14348:	ldr	r2, [pc, #640]	; 145d0 <_obstack_memory_used@@Base+0x3a8>
   1434c:	ldr	r1, [pc, #640]	; 145d4 <_obstack_memory_used@@Base+0x3ac>
   14350:	mov	r0, r4
   14354:	bl	11280 <fprintf@plt>
   14358:	mov	r1, r4
   1435c:	mov	r0, #10
   14360:	bl	112f8 <fputc@plt>
   14364:	ldr	r2, [pc, #620]	; 145d8 <_obstack_memory_used@@Base+0x3b0>
   14368:	ldr	r1, [pc, #620]	; 145dc <_obstack_memory_used@@Base+0x3b4>
   1436c:	mov	r0, r4
   14370:	bl	11280 <fprintf@plt>
   14374:	mov	r1, r4
   14378:	mov	r0, #10
   1437c:	bl	112f8 <fputc@plt>
   14380:	cmp	r6, #9
   14384:	ldrls	pc, [pc, r6, lsl #2]
   14388:	b	14578 <_obstack_memory_used@@Base+0x350>
   1438c:	ldrdeq	r4, [r1], -r0
   14390:	andeq	r4, r1, r0, asr #7
   14394:	ldrdeq	r4, [r1], -r8
   14398:	strdeq	r4, [r1], -r0
   1439c:	andeq	r4, r1, r0, lsl r4
   143a0:	andeq	r4, r1, r8, lsr r4
   143a4:	andeq	r4, r1, r8, ror #8
   143a8:	andeq	r4, r1, r0, lsr #9
   143ac:	andeq	r4, r1, r0, ror #9
   143b0:	andeq	r4, r1, r8, lsr #10
   143b4:	ldr	r1, [pc, #548]	; 145e0 <_obstack_memory_used@@Base+0x3b8>
   143b8:	bl	11280 <fprintf@plt>
   143bc:	b	14344 <_obstack_memory_used@@Base+0x11c>
   143c0:	ldr	r2, [r5]
   143c4:	ldr	r1, [pc, #536]	; 145e4 <_obstack_memory_used@@Base+0x3bc>
   143c8:	mov	r0, r4
   143cc:	bl	11280 <fprintf@plt>
   143d0:	add	sp, sp, #32
   143d4:	pop	{r4, r5, r6, pc}
   143d8:	ldr	r3, [r5, #4]
   143dc:	ldr	r2, [r5]
   143e0:	ldr	r1, [pc, #512]	; 145e8 <_obstack_memory_used@@Base+0x3c0>
   143e4:	mov	r0, r4
   143e8:	bl	11280 <fprintf@plt>
   143ec:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   143f0:	ldr	r3, [r5, #4]
   143f4:	ldr	r2, [r5]
   143f8:	ldr	r1, [r5, #8]
   143fc:	str	r1, [sp]
   14400:	ldr	r1, [pc, #484]	; 145ec <_obstack_memory_used@@Base+0x3c4>
   14404:	mov	r0, r4
   14408:	bl	11280 <fprintf@plt>
   1440c:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   14410:	ldr	r3, [r5, #4]
   14414:	ldr	r2, [r5]
   14418:	ldr	r1, [r5, #12]
   1441c:	str	r1, [sp, #4]
   14420:	ldr	r1, [r5, #8]
   14424:	str	r1, [sp]
   14428:	ldr	r1, [pc, #448]	; 145f0 <_obstack_memory_used@@Base+0x3c8>
   1442c:	mov	r0, r4
   14430:	bl	11280 <fprintf@plt>
   14434:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   14438:	ldr	r3, [r5, #4]
   1443c:	ldr	r2, [r5]
   14440:	ldr	r1, [r5, #16]
   14444:	str	r1, [sp, #8]
   14448:	ldr	r1, [r5, #12]
   1444c:	str	r1, [sp, #4]
   14450:	ldr	r1, [r5, #8]
   14454:	str	r1, [sp]
   14458:	ldr	r1, [pc, #404]	; 145f4 <_obstack_memory_used@@Base+0x3cc>
   1445c:	mov	r0, r4
   14460:	bl	11280 <fprintf@plt>
   14464:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   14468:	ldr	r3, [r5, #4]
   1446c:	ldr	r2, [r5]
   14470:	ldr	r1, [r5, #20]
   14474:	str	r1, [sp, #12]
   14478:	ldr	r1, [r5, #16]
   1447c:	str	r1, [sp, #8]
   14480:	ldr	r1, [r5, #12]
   14484:	str	r1, [sp, #4]
   14488:	ldr	r1, [r5, #8]
   1448c:	str	r1, [sp]
   14490:	ldr	r1, [pc, #352]	; 145f8 <_obstack_memory_used@@Base+0x3d0>
   14494:	mov	r0, r4
   14498:	bl	11280 <fprintf@plt>
   1449c:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   144a0:	ldr	r3, [r5, #4]
   144a4:	ldr	r2, [r5]
   144a8:	ldr	r1, [r5, #24]
   144ac:	str	r1, [sp, #16]
   144b0:	ldr	r1, [r5, #20]
   144b4:	str	r1, [sp, #12]
   144b8:	ldr	r1, [r5, #16]
   144bc:	str	r1, [sp, #8]
   144c0:	ldr	r1, [r5, #12]
   144c4:	str	r1, [sp, #4]
   144c8:	ldr	r1, [r5, #8]
   144cc:	str	r1, [sp]
   144d0:	ldr	r1, [pc, #292]	; 145fc <_obstack_memory_used@@Base+0x3d4>
   144d4:	mov	r0, r4
   144d8:	bl	11280 <fprintf@plt>
   144dc:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   144e0:	ldr	r3, [r5, #4]
   144e4:	ldr	r2, [r5]
   144e8:	ldr	r1, [r5, #28]
   144ec:	str	r1, [sp, #20]
   144f0:	ldr	r1, [r5, #24]
   144f4:	str	r1, [sp, #16]
   144f8:	ldr	r1, [r5, #20]
   144fc:	str	r1, [sp, #12]
   14500:	ldr	r1, [r5, #16]
   14504:	str	r1, [sp, #8]
   14508:	ldr	r1, [r5, #12]
   1450c:	str	r1, [sp, #4]
   14510:	ldr	r1, [r5, #8]
   14514:	str	r1, [sp]
   14518:	ldr	r1, [pc, #224]	; 14600 <_obstack_memory_used@@Base+0x3d8>
   1451c:	mov	r0, r4
   14520:	bl	11280 <fprintf@plt>
   14524:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   14528:	ldr	r3, [r5, #4]
   1452c:	ldr	r2, [r5]
   14530:	ldr	r1, [r5, #32]
   14534:	str	r1, [sp, #24]
   14538:	ldr	r1, [r5, #28]
   1453c:	str	r1, [sp, #20]
   14540:	ldr	r1, [r5, #24]
   14544:	str	r1, [sp, #16]
   14548:	ldr	r1, [r5, #20]
   1454c:	str	r1, [sp, #12]
   14550:	ldr	r1, [r5, #16]
   14554:	str	r1, [sp, #8]
   14558:	ldr	r1, [r5, #12]
   1455c:	str	r1, [sp, #4]
   14560:	ldr	r1, [r5, #8]
   14564:	str	r1, [sp]
   14568:	ldr	r1, [pc, #148]	; 14604 <_obstack_memory_used@@Base+0x3dc>
   1456c:	mov	r0, r4
   14570:	bl	11280 <fprintf@plt>
   14574:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   14578:	ldr	r3, [r5, #4]
   1457c:	ldr	r2, [r5]
   14580:	ldr	r1, [r5, #32]
   14584:	str	r1, [sp, #24]
   14588:	ldr	r1, [r5, #28]
   1458c:	str	r1, [sp, #20]
   14590:	ldr	r1, [r5, #24]
   14594:	str	r1, [sp, #16]
   14598:	ldr	r1, [r5, #20]
   1459c:	str	r1, [sp, #12]
   145a0:	ldr	r1, [r5, #16]
   145a4:	str	r1, [sp, #8]
   145a8:	ldr	r1, [r5, #12]
   145ac:	str	r1, [sp, #4]
   145b0:	ldr	r1, [r5, #8]
   145b4:	str	r1, [sp]
   145b8:	ldr	r1, [pc, #72]	; 14608 <_obstack_memory_used@@Base+0x3e0>
   145bc:	mov	r0, r4
   145c0:	bl	11280 <fprintf@plt>
   145c4:	b	143d0 <_obstack_memory_used@@Base+0x1a8>
   145c8:	andeq	fp, r1, ip, lsl #17
   145cc:	andeq	r0, r0, r6, ror #15
   145d0:	andeq	fp, r1, r0, lsr #17
   145d4:	andeq	fp, r1, r0, lsr #23
   145d8:	andeq	fp, r1, r4, lsr #17
   145dc:	andeq	fp, r1, r8, asr #17
   145e0:	muleq	r1, r8, r8
   145e4:	andeq	fp, r1, r4, ror r9
   145e8:	andeq	fp, r1, r4, lsl #19
   145ec:	muleq	r1, ip, r9
   145f0:			; <UNDEFINED> instruction: 0x0001b9b8
   145f4:	ldrdeq	fp, [r1], -r8
   145f8:	strdeq	fp, [r1], -ip
   145fc:	andeq	fp, r1, r4, lsr #20
   14600:	andeq	fp, r1, r0, asr sl
   14604:	andeq	fp, r1, r0, lsl #21
   14608:			; <UNDEFINED> instruction: 0x0001bab4
   1460c:	push	{r4, r5, lr}
   14610:	sub	sp, sp, #12
   14614:	ldr	r5, [sp, #24]
   14618:	ldr	ip, [r5]
   1461c:	cmp	ip, #0
   14620:	beq	14650 <_obstack_memory_used@@Base+0x428>
   14624:	mov	lr, r5
   14628:	mov	ip, #0
   1462c:	add	ip, ip, #1
   14630:	ldr	r4, [lr, #4]!
   14634:	cmp	r4, #0
   14638:	bne	1462c <_obstack_memory_used@@Base+0x404>
   1463c:	str	ip, [sp, #4]
   14640:	str	r5, [sp]
   14644:	bl	14314 <_obstack_memory_used@@Base+0xec>
   14648:	add	sp, sp, #12
   1464c:	pop	{r4, r5, pc}
   14650:	mov	ip, #0
   14654:	b	1463c <_obstack_memory_used@@Base+0x414>
   14658:	push	{r4, r5, lr}
   1465c:	sub	sp, sp, #52	; 0x34
   14660:	ldr	r4, [sp, #64]	; 0x40
   14664:	sub	r4, r4, #4
   14668:	add	r5, sp, #4
   1466c:	mov	ip, #0
   14670:	ldr	lr, [r4, #4]!
   14674:	str	lr, [r5, #4]!
   14678:	cmp	lr, #0
   1467c:	beq	1468c <_obstack_memory_used@@Base+0x464>
   14680:	add	ip, ip, #1
   14684:	cmp	ip, #10
   14688:	bne	14670 <_obstack_memory_used@@Base+0x448>
   1468c:	str	ip, [sp, #4]
   14690:	add	ip, sp, #8
   14694:	str	ip, [sp]
   14698:	bl	14314 <_obstack_memory_used@@Base+0xec>
   1469c:	add	sp, sp, #52	; 0x34
   146a0:	pop	{r4, r5, pc}
   146a4:	push	{r3}		; (str r3, [sp, #-4]!)
   146a8:	push	{lr}		; (str lr, [sp, #-4]!)
   146ac:	sub	sp, sp, #16
   146b0:	add	r3, sp, #24
   146b4:	str	r3, [sp, #12]
   146b8:	str	r3, [sp]
   146bc:	ldr	r3, [sp, #20]
   146c0:	bl	14658 <_obstack_memory_used@@Base+0x430>
   146c4:	add	sp, sp, #16
   146c8:	pop	{lr}		; (ldr lr, [sp], #4)
   146cc:	add	sp, sp, #4
   146d0:	bx	lr
   146d4:	push	{r4, lr}
   146d8:	ldr	r3, [pc, #52]	; 14714 <_obstack_memory_used@@Base+0x4ec>
   146dc:	ldr	r1, [r3]
   146e0:	mov	r0, #10
   146e4:	bl	112f8 <fputc@plt>
   146e8:	ldr	r1, [pc, #40]	; 14718 <_obstack_memory_used@@Base+0x4f0>
   146ec:	ldr	r0, [pc, #40]	; 1471c <_obstack_memory_used@@Base+0x4f4>
   146f0:	bl	1110c <printf@plt>
   146f4:	ldr	r2, [pc, #36]	; 14720 <_obstack_memory_used@@Base+0x4f8>
   146f8:	ldr	r1, [pc, #36]	; 14724 <_obstack_memory_used@@Base+0x4fc>
   146fc:	ldr	r0, [pc, #36]	; 14728 <_obstack_memory_used@@Base+0x500>
   14700:	bl	1110c <printf@plt>
   14704:	ldr	r1, [pc, #32]	; 1472c <_obstack_memory_used@@Base+0x504>
   14708:	ldr	r0, [pc, #32]	; 14730 <_obstack_memory_used@@Base+0x508>
   1470c:	bl	1110c <printf@plt>
   14710:	pop	{r4, pc}
   14714:			; <UNDEFINED> instruction: 0x000308bc
   14718:	strdeq	fp, [r1], -r0
   1471c:	andeq	fp, r1, r8, lsl #22
   14720:	andeq	fp, r1, ip, lsl fp
   14724:	andeq	fp, r1, r4, lsr #16
   14728:	andeq	fp, r1, r4, asr #22
   1472c:	andeq	fp, r1, r8, asr fp
   14730:	andeq	fp, r1, r8, ror fp
   14734:	push	{r4, lr}
   14738:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   1473c:	cmp	r0, #0
   14740:	popne	{r4, pc}
   14744:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   14748:	push	{r4, lr}
   1474c:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   14750:	cmp	r0, #0
   14754:	popne	{r4, pc}
   14758:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   1475c:	push	{r4, lr}
   14760:	bl	14734 <_obstack_memory_used@@Base+0x50c>
   14764:	pop	{r4, pc}
   14768:	push	{r4, r5, r6, lr}
   1476c:	mov	r5, r0
   14770:	mov	r4, r1
   14774:	bl	14d84 <_obstack_memory_used@@Base+0xb5c>
   14778:	cmp	r0, #0
   1477c:	popne	{r4, r5, r6, pc}
   14780:	adds	r4, r4, #0
   14784:	movne	r4, #1
   14788:	cmp	r5, #0
   1478c:	orreq	r4, r4, #1
   14790:	cmp	r4, #0
   14794:	popeq	{r4, r5, r6, pc}
   14798:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   1479c:	push	{r4, lr}
   147a0:	cmp	r1, #0
   147a4:	orreq	r1, r1, #1
   147a8:	bl	14d84 <_obstack_memory_used@@Base+0xb5c>
   147ac:	cmp	r0, #0
   147b0:	popne	{r4, pc}
   147b4:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   147b8:	push	{r4, r5, r6, lr}
   147bc:	mov	r6, r0
   147c0:	mov	r5, r1
   147c4:	mov	r4, r2
   147c8:	bl	18b68 <argp_error@@Base+0xd14>
   147cc:	cmp	r0, #0
   147d0:	popne	{r4, r5, r6, pc}
   147d4:	cmp	r6, #0
   147d8:	beq	147e8 <_obstack_memory_used@@Base+0x5c0>
   147dc:	cmp	r5, #0
   147e0:	cmpne	r4, #0
   147e4:	popeq	{r4, r5, r6, pc}
   147e8:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   147ec:	push	{r4, lr}
   147f0:	bl	147b8 <_obstack_memory_used@@Base+0x590>
   147f4:	pop	{r4, pc}
   147f8:	push	{r4, lr}
   147fc:	mov	ip, r1
   14800:	mov	r3, r2
   14804:	cmp	r2, #0
   14808:	cmpne	r1, #0
   1480c:	moveq	r3, #1
   14810:	moveq	ip, r3
   14814:	mov	r2, r3
   14818:	mov	r1, ip
   1481c:	bl	18b68 <argp_error@@Base+0xd14>
   14820:	cmp	r0, #0
   14824:	popne	{r4, pc}
   14828:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   1482c:	push	{r4, lr}
   14830:	mov	r2, r1
   14834:	mov	r1, r0
   14838:	mov	r0, #0
   1483c:	bl	147b8 <_obstack_memory_used@@Base+0x590>
   14840:	pop	{r4, pc}
   14844:	push	{r4, lr}
   14848:	mov	r2, r1
   1484c:	mov	r1, r0
   14850:	mov	r0, #0
   14854:	bl	147f8 <_obstack_memory_used@@Base+0x5d0>
   14858:	pop	{r4, pc}
   1485c:	push	{r4, r5, r6, r7, r8, lr}
   14860:	mov	r5, r1
   14864:	mov	r6, r2
   14868:	ldr	r4, [r1]
   1486c:	subs	r7, r0, #0
   14870:	beq	1488c <_obstack_memory_used@@Base+0x664>
   14874:	lsr	r2, r4, #1
   14878:	add	r3, r2, #1
   1487c:	mvn	r3, r3
   14880:	cmp	r4, r3
   14884:	bls	148b0 <_obstack_memory_used@@Base+0x688>
   14888:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   1488c:	cmp	r4, #0
   14890:	bne	148b8 <_obstack_memory_used@@Base+0x690>
   14894:	mov	r1, r2
   14898:	mov	r0, #64	; 0x40
   1489c:	bl	19340 <argp_error@@Base+0x14ec>
   148a0:	cmp	r0, #0
   148a4:	movne	r4, r0
   148a8:	addeq	r4, r0, #1
   148ac:	b	148b8 <_obstack_memory_used@@Base+0x690>
   148b0:	add	r4, r4, #1
   148b4:	add	r4, r4, r2
   148b8:	mov	r2, r6
   148bc:	mov	r1, r4
   148c0:	mov	r0, r7
   148c4:	bl	147b8 <_obstack_memory_used@@Base+0x590>
   148c8:	str	r4, [r5]
   148cc:	pop	{r4, r5, r6, r7, r8, pc}
   148d0:	push	{r4, lr}
   148d4:	mov	r2, #1
   148d8:	bl	1485c <_obstack_memory_used@@Base+0x634>
   148dc:	pop	{r4, pc}
   148e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148e4:	sub	sp, sp, #12
   148e8:	mov	fp, r0
   148ec:	mov	sl, r1
   148f0:	mov	r9, r2
   148f4:	mov	r7, r3
   148f8:	ldr	r6, [sp, #48]	; 0x30
   148fc:	ldr	r5, [r1]
   14900:	asrs	r4, r5, #1
   14904:	bmi	14a60 <_obstack_memory_used@@Base+0x838>
   14908:	cmp	r5, #0
   1490c:	blt	14a74 <_obstack_memory_used@@Base+0x84c>
   14910:	mvn	r3, #-2147483648	; 0x80000000
   14914:	sub	r3, r3, r4
   14918:	cmp	r5, r3
   1491c:	movle	r3, #0
   14920:	movgt	r3, #1
   14924:	cmp	r3, #0
   14928:	addeq	r4, r4, r5
   1492c:	mvnne	r4, #-2147483648	; 0x80000000
   14930:	mvn	r8, r7
   14934:	lsr	r8, r8, #31
   14938:	cmp	r7, r4
   1493c:	movge	r3, #0
   14940:	andlt	r3, r8, #1
   14944:	cmp	r3, #0
   14948:	movne	r4, r7
   1494c:	cmp	r6, #0
   14950:	blt	14a88 <_obstack_memory_used@@Base+0x860>
   14954:	cmp	r6, #0
   14958:	beq	14b34 <_obstack_memory_used@@Base+0x90c>
   1495c:	cmp	r4, #0
   14960:	blt	14ae4 <_obstack_memory_used@@Base+0x8bc>
   14964:	mov	r1, r6
   14968:	mvn	r0, #-2147483648	; 0x80000000
   1496c:	bl	1954c <argp_error@@Base+0x16f8>
   14970:	cmp	r0, r4
   14974:	movge	r0, #0
   14978:	movlt	r0, #1
   1497c:	cmp	r0, #0
   14980:	mvnne	r3, #-2147483648	; 0x80000000
   14984:	strne	r3, [sp, #4]
   14988:	beq	14b1c <_obstack_memory_used@@Base+0x8f4>
   1498c:	mov	r1, r6
   14990:	ldr	r0, [sp, #4]
   14994:	bl	1954c <argp_error@@Base+0x16f8>
   14998:	mov	r4, r0
   1499c:	mov	r1, r6
   149a0:	ldr	r0, [sp, #4]
   149a4:	bl	1976c <argp_error@@Base+0x1918>
   149a8:	ldr	r3, [sp, #4]
   149ac:	sub	r1, r3, r1
   149b0:	cmp	fp, #0
   149b4:	moveq	r3, #0
   149b8:	streq	r3, [sl]
   149bc:	sub	r3, r4, r5
   149c0:	cmp	r3, r9
   149c4:	bge	14a4c <_obstack_memory_used@@Base+0x824>
   149c8:	cmp	r9, #0
   149cc:	blt	14b40 <_obstack_memory_used@@Base+0x918>
   149d0:	cmp	r5, #0
   149d4:	blt	14b54 <_obstack_memory_used@@Base+0x92c>
   149d8:	mvn	r3, #-2147483648	; 0x80000000
   149dc:	sub	r3, r3, r9
   149e0:	cmp	r5, r3
   149e4:	movle	r3, #0
   149e8:	movgt	r3, #1
   149ec:	cmp	r3, #0
   149f0:	bne	14bfc <_obstack_memory_used@@Base+0x9d4>
   149f4:	add	r5, r5, r9
   149f8:	mov	r4, r5
   149fc:	cmp	r7, r5
   14a00:	movge	r7, #0
   14a04:	andlt	r7, r8, #1
   14a08:	cmp	r7, #0
   14a0c:	bne	14bfc <_obstack_memory_used@@Base+0x9d4>
   14a10:	cmp	r6, #0
   14a14:	blt	14b68 <_obstack_memory_used@@Base+0x940>
   14a18:	cmp	r6, #0
   14a1c:	beq	14a48 <_obstack_memory_used@@Base+0x820>
   14a20:	cmp	r5, #0
   14a24:	blt	14bc4 <_obstack_memory_used@@Base+0x99c>
   14a28:	mov	r1, r6
   14a2c:	mvn	r0, #-2147483648	; 0x80000000
   14a30:	bl	1954c <argp_error@@Base+0x16f8>
   14a34:	cmp	r5, r0
   14a38:	movle	r0, #0
   14a3c:	movgt	r0, #1
   14a40:	cmp	r0, #0
   14a44:	bne	14bfc <_obstack_memory_used@@Base+0x9d4>
   14a48:	mul	r1, r5, r6
   14a4c:	mov	r0, fp
   14a50:	bl	14768 <_obstack_memory_used@@Base+0x540>
   14a54:	str	r4, [sl]
   14a58:	add	sp, sp, #12
   14a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a60:	rsb	r3, r4, #-2147483648	; 0x80000000
   14a64:	cmp	r5, r3
   14a68:	movge	r3, #0
   14a6c:	movlt	r3, #1
   14a70:	b	14924 <_obstack_memory_used@@Base+0x6fc>
   14a74:	rsb	r3, r5, #-2147483648	; 0x80000000
   14a78:	cmp	r4, r3
   14a7c:	movge	r3, #0
   14a80:	movlt	r3, #1
   14a84:	b	14924 <_obstack_memory_used@@Base+0x6fc>
   14a88:	cmp	r4, #0
   14a8c:	blt	14ab4 <_obstack_memory_used@@Base+0x88c>
   14a90:	cmn	r6, #1
   14a94:	beq	14ad0 <_obstack_memory_used@@Base+0x8a8>
   14a98:	mov	r1, r6
   14a9c:	mov	r0, #-2147483648	; 0x80000000
   14aa0:	bl	1954c <argp_error@@Base+0x16f8>
   14aa4:	cmp	r0, r4
   14aa8:	movge	r0, #0
   14aac:	movlt	r0, #1
   14ab0:	b	1497c <_obstack_memory_used@@Base+0x754>
   14ab4:	mov	r1, r6
   14ab8:	mvn	r0, #-2147483648	; 0x80000000
   14abc:	bl	1954c <argp_error@@Base+0x16f8>
   14ac0:	cmp	r0, r4
   14ac4:	movle	r0, #0
   14ac8:	movgt	r0, #1
   14acc:	b	1497c <_obstack_memory_used@@Base+0x754>
   14ad0:	add	r0, r4, #-2147483648	; 0x80000000
   14ad4:	cmp	r0, #0
   14ad8:	movle	r0, #0
   14adc:	movgt	r0, #1
   14ae0:	b	1497c <_obstack_memory_used@@Base+0x754>
   14ae4:	cmn	r4, #1
   14ae8:	beq	14b08 <_obstack_memory_used@@Base+0x8e0>
   14aec:	mov	r1, r4
   14af0:	mov	r0, #-2147483648	; 0x80000000
   14af4:	bl	1954c <argp_error@@Base+0x16f8>
   14af8:	cmp	r6, r0
   14afc:	movle	r0, #0
   14b00:	movgt	r0, #1
   14b04:	b	1497c <_obstack_memory_used@@Base+0x754>
   14b08:	add	r0, r6, #-2147483648	; 0x80000000
   14b0c:	cmp	r0, #0
   14b10:	movle	r0, #0
   14b14:	movgt	r0, #1
   14b18:	b	1497c <_obstack_memory_used@@Base+0x754>
   14b1c:	mul	r1, r6, r4
   14b20:	cmp	r1, #63	; 0x3f
   14b24:	movle	r3, #64	; 0x40
   14b28:	strle	r3, [sp, #4]
   14b2c:	bgt	149b0 <_obstack_memory_used@@Base+0x788>
   14b30:	b	1498c <_obstack_memory_used@@Base+0x764>
   14b34:	mov	r3, #64	; 0x40
   14b38:	str	r3, [sp, #4]
   14b3c:	b	1498c <_obstack_memory_used@@Base+0x764>
   14b40:	rsb	r3, r9, #-2147483648	; 0x80000000
   14b44:	cmp	r5, r3
   14b48:	movge	r3, #0
   14b4c:	movlt	r3, #1
   14b50:	b	149ec <_obstack_memory_used@@Base+0x7c4>
   14b54:	rsb	r3, r5, #-2147483648	; 0x80000000
   14b58:	cmp	r9, r3
   14b5c:	movge	r3, #0
   14b60:	movlt	r3, #1
   14b64:	b	149ec <_obstack_memory_used@@Base+0x7c4>
   14b68:	cmp	r5, #0
   14b6c:	blt	14b94 <_obstack_memory_used@@Base+0x96c>
   14b70:	cmn	r6, #1
   14b74:	beq	14bb0 <_obstack_memory_used@@Base+0x988>
   14b78:	mov	r1, r6
   14b7c:	mov	r0, #-2147483648	; 0x80000000
   14b80:	bl	1954c <argp_error@@Base+0x16f8>
   14b84:	cmp	r5, r0
   14b88:	movle	r0, #0
   14b8c:	movgt	r0, #1
   14b90:	b	14a40 <_obstack_memory_used@@Base+0x818>
   14b94:	mov	r1, r6
   14b98:	mvn	r0, #-2147483648	; 0x80000000
   14b9c:	bl	1954c <argp_error@@Base+0x16f8>
   14ba0:	cmp	r5, r0
   14ba4:	movge	r0, #0
   14ba8:	movlt	r0, #1
   14bac:	b	14a40 <_obstack_memory_used@@Base+0x818>
   14bb0:	add	r0, r5, #-2147483648	; 0x80000000
   14bb4:	cmp	r0, #0
   14bb8:	movle	r0, #0
   14bbc:	movgt	r0, #1
   14bc0:	b	14a40 <_obstack_memory_used@@Base+0x818>
   14bc4:	cmn	r5, #1
   14bc8:	beq	14be8 <_obstack_memory_used@@Base+0x9c0>
   14bcc:	mov	r1, r5
   14bd0:	mov	r0, #-2147483648	; 0x80000000
   14bd4:	bl	1954c <argp_error@@Base+0x16f8>
   14bd8:	cmp	r6, r0
   14bdc:	movle	r0, #0
   14be0:	movgt	r0, #1
   14be4:	b	14a40 <_obstack_memory_used@@Base+0x818>
   14be8:	add	r0, r6, #-2147483648	; 0x80000000
   14bec:	cmp	r0, #0
   14bf0:	movle	r0, #0
   14bf4:	movgt	r0, #1
   14bf8:	b	14a40 <_obstack_memory_used@@Base+0x818>
   14bfc:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   14c00:	push	{r4, lr}
   14c04:	bl	14d04 <_obstack_memory_used@@Base+0xadc>
   14c08:	cmp	r0, #0
   14c0c:	popne	{r4, pc}
   14c10:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   14c14:	push	{r4, lr}
   14c18:	mov	r1, #1
   14c1c:	bl	14c00 <_obstack_memory_used@@Base+0x9d8>
   14c20:	pop	{r4, pc}
   14c24:	push	{r4, lr}
   14c28:	bl	14d04 <_obstack_memory_used@@Base+0xadc>
   14c2c:	cmp	r0, #0
   14c30:	popne	{r4, pc}
   14c34:	bl	14cd8 <_obstack_memory_used@@Base+0xab0>
   14c38:	push	{r4, lr}
   14c3c:	mov	r1, #1
   14c40:	bl	14c24 <_obstack_memory_used@@Base+0x9fc>
   14c44:	pop	{r4, pc}
   14c48:	push	{r4, r5, r6, lr}
   14c4c:	mov	r5, r0
   14c50:	mov	r4, r1
   14c54:	mov	r0, r1
   14c58:	bl	14734 <_obstack_memory_used@@Base+0x50c>
   14c5c:	mov	r2, r4
   14c60:	mov	r1, r5
   14c64:	bl	1116c <memcpy@plt>
   14c68:	pop	{r4, r5, r6, pc}
   14c6c:	push	{r4, r5, r6, lr}
   14c70:	mov	r5, r0
   14c74:	mov	r4, r1
   14c78:	mov	r0, r1
   14c7c:	bl	14748 <_obstack_memory_used@@Base+0x520>
   14c80:	mov	r2, r4
   14c84:	mov	r1, r5
   14c88:	bl	1116c <memcpy@plt>
   14c8c:	pop	{r4, r5, r6, pc}
   14c90:	push	{r4, r5, r6, lr}
   14c94:	mov	r5, r0
   14c98:	mov	r4, r1
   14c9c:	add	r0, r1, #1
   14ca0:	bl	14748 <_obstack_memory_used@@Base+0x520>
   14ca4:	mov	r2, #0
   14ca8:	strb	r2, [r0, r4]
   14cac:	mov	r2, r4
   14cb0:	mov	r1, r5
   14cb4:	bl	1116c <memcpy@plt>
   14cb8:	pop	{r4, r5, r6, pc}
   14cbc:	push	{r4, lr}
   14cc0:	mov	r4, r0
   14cc4:	bl	11268 <strlen@plt>
   14cc8:	add	r1, r0, #1
   14ccc:	mov	r0, r4
   14cd0:	bl	14c48 <_obstack_memory_used@@Base+0xa20>
   14cd4:	pop	{r4, pc}
   14cd8:	push	{r4, lr}
   14cdc:	ldr	r3, [pc, #20]	; 14cf8 <_obstack_memory_used@@Base+0xad0>
   14ce0:	ldr	r0, [r3]
   14ce4:	ldr	r3, [pc, #16]	; 14cfc <_obstack_memory_used@@Base+0xad4>
   14ce8:	ldr	r2, [pc, #16]	; 14d00 <_obstack_memory_used@@Base+0xad8>
   14cec:	mov	r1, #0
   14cf0:	bl	111e4 <error@plt>
   14cf4:	bl	11394 <abort@plt>
   14cf8:	muleq	r3, ip, r8
   14cfc:	andeq	fp, r1, r4, lsr r8
   14d00:	andeq	fp, r1, r4, lsl #14
   14d04:	push	{r4, lr}
   14d08:	mov	r2, r0
   14d0c:	mov	r3, r1
   14d10:	cmp	r1, #0
   14d14:	cmpne	r0, #0
   14d18:	moveq	r3, #1
   14d1c:	moveq	r2, r3
   14d20:	umull	r0, r1, r2, r3
   14d24:	cmp	r0, #0
   14d28:	cmpge	r1, #0
   14d2c:	bne	14d40 <_obstack_memory_used@@Base+0xb18>
   14d30:	mov	r1, r3
   14d34:	mov	r0, r2
   14d38:	bl	110c4 <calloc@plt>
   14d3c:	pop	{r4, pc}
   14d40:	bl	1128c <__errno_location@plt>
   14d44:	mov	r3, #12
   14d48:	str	r3, [r0]
   14d4c:	mov	r0, #0
   14d50:	pop	{r4, pc}
   14d54:	push	{r4, lr}
   14d58:	cmp	r0, #0
   14d5c:	moveq	r0, #1
   14d60:	cmp	r0, #0
   14d64:	blt	14d70 <_obstack_memory_used@@Base+0xb48>
   14d68:	bl	11208 <malloc@plt>
   14d6c:	pop	{r4, pc}
   14d70:	bl	1128c <__errno_location@plt>
   14d74:	mov	r3, #12
   14d78:	str	r3, [r0]
   14d7c:	mov	r0, #0
   14d80:	pop	{r4, pc}
   14d84:	push	{r4, lr}
   14d88:	cmp	r0, #0
   14d8c:	beq	14da8 <_obstack_memory_used@@Base+0xb80>
   14d90:	cmp	r1, #0
   14d94:	beq	14db4 <_obstack_memory_used@@Base+0xb8c>
   14d98:	cmp	r1, #0
   14d9c:	blt	14dc0 <_obstack_memory_used@@Base+0xb98>
   14da0:	bl	1119c <realloc@plt>
   14da4:	pop	{r4, pc}
   14da8:	mov	r0, r1
   14dac:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   14db0:	pop	{r4, pc}
   14db4:	bl	13dd8 <argp_parse@@Base+0xbf4>
   14db8:	mov	r0, #0
   14dbc:	pop	{r4, pc}
   14dc0:	bl	1128c <__errno_location@plt>
   14dc4:	mov	r3, #12
   14dc8:	str	r3, [r0]
   14dcc:	mov	r0, #0
   14dd0:	pop	{r4, pc}
   14dd4:	ldr	r3, [r0]
   14dd8:	ldr	r2, [r0, #4]
   14ddc:	cmp	r2, #0
   14de0:	beq	14e1c <_obstack_memory_used@@Base+0xbf4>
   14de4:	add	r3, r3, #24
   14de8:	b	14df8 <_obstack_memory_used@@Base+0xbd0>
   14dec:	add	r3, r3, #24
   14df0:	subs	r2, r2, #1
   14df4:	beq	14e14 <_obstack_memory_used@@Base+0xbec>
   14df8:	ldr	r0, [r3, #-24]	; 0xffffffe8
   14dfc:	cmp	r0, #0
   14e00:	beq	14dec <_obstack_memory_used@@Base+0xbc4>
   14e04:	ldr	r1, [r3, #-12]
   14e08:	tst	r1, #2
   14e0c:	bne	14dec <_obstack_memory_used@@Base+0xbc4>
   14e10:	bx	lr
   14e14:	mov	r0, #0
   14e18:	bx	lr
   14e1c:	mov	r0, #0
   14e20:	bx	lr
   14e24:	ldr	r2, [r0, #8]
   14e28:	cmp	r2, #0
   14e2c:	beq	14e38 <_obstack_memory_used@@Base+0xc10>
   14e30:	mov	r0, #0
   14e34:	bx	lr
   14e38:	ldr	r2, [r1, #8]
   14e3c:	cmp	r2, #0
   14e40:	bne	14e30 <_obstack_memory_used@@Base+0xc08>
   14e44:	ldr	r2, [r0, #12]
   14e48:	ldr	r1, [r1, #12]
   14e4c:	orr	r2, r2, r1
   14e50:	tst	r2, #16
   14e54:	ldreq	r2, [r3]
   14e58:	addeq	r1, r2, #1
   14e5c:	streq	r1, [r3]
   14e60:	ldreq	r3, [r0, #4]
   14e64:	strbeq	r3, [r2]
   14e68:	b	14e30 <_obstack_memory_used@@Base+0xc08>
   14e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e70:	sub	sp, sp, #12
   14e74:	ldr	r4, [r0]
   14e78:	ldr	r9, [r0, #8]
   14e7c:	ldr	r5, [r0, #4]
   14e80:	cmp	r5, #0
   14e84:	beq	14ed8 <_obstack_memory_used@@Base+0xcb0>
   14e88:	str	r3, [sp, #4]
   14e8c:	str	r2, [sp]
   14e90:	mov	fp, r1
   14e94:	mov	sl, r4
   14e98:	mov	r8, #0
   14e9c:	b	14f18 <_obstack_memory_used@@Base+0xcf0>
   14ea0:	and	r3, r6, #4
   14ea4:	cmp	r3, #0
   14ea8:	moveq	sl, r4
   14eac:	tst	r6, #2
   14eb0:	beq	14ebc <_obstack_memory_used@@Base+0xc94>
   14eb4:	add	r9, r9, #1
   14eb8:	b	14ef4 <_obstack_memory_used@@Base+0xccc>
   14ebc:	ldr	r3, [sp, #4]
   14ec0:	ldr	r2, [sp]
   14ec4:	mov	r1, sl
   14ec8:	mov	r0, r4
   14ecc:	blx	fp
   14ed0:	mov	r8, r0
   14ed4:	b	14eb4 <_obstack_memory_used@@Base+0xc8c>
   14ed8:	mov	r8, #0
   14edc:	mov	r0, r8
   14ee0:	add	sp, sp, #12
   14ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ee8:	ldrb	r3, [r9]
   14eec:	cmp	r3, r7
   14ef0:	beq	14ea0 <_obstack_memory_used@@Base+0xc78>
   14ef4:	add	r4, r4, #24
   14ef8:	subs	r5, r5, #1
   14efc:	movne	r3, #1
   14f00:	moveq	r3, #0
   14f04:	cmp	r8, #0
   14f08:	movne	r3, #0
   14f0c:	andeq	r3, r3, #1
   14f10:	cmp	r3, #0
   14f14:	beq	14edc <_obstack_memory_used@@Base+0xcb4>
   14f18:	ldr	r6, [r4, #12]
   14f1c:	tst	r6, #8
   14f20:	bne	14ef4 <_obstack_memory_used@@Base+0xccc>
   14f24:	ldr	r7, [r4, #4]
   14f28:	sub	r3, r7, #1
   14f2c:	cmp	r3, #254	; 0xfe
   14f30:	bhi	14ef4 <_obstack_memory_used@@Base+0xccc>
   14f34:	bl	11250 <__ctype_b_loc@plt>
   14f38:	ldr	r2, [r0]
   14f3c:	lsl	r3, r7, #1
   14f40:	ldrh	r3, [r2, r3]
   14f44:	tst	r3, #16384	; 0x4000
   14f48:	bne	14ee8 <_obstack_memory_used@@Base+0xcc0>
   14f4c:	b	14ef4 <_obstack_memory_used@@Base+0xccc>
   14f50:	push	{r4, r5, r6, lr}
   14f54:	ldr	r4, [r0, #12]
   14f58:	ands	r4, r4, #8
   14f5c:	movne	r4, #0
   14f60:	bne	14f90 <_obstack_memory_used@@Base+0xd68>
   14f64:	ldr	r5, [r0, #4]
   14f68:	sub	r3, r5, #1
   14f6c:	cmp	r3, #254	; 0xfe
   14f70:	bhi	14f90 <_obstack_memory_used@@Base+0xd68>
   14f74:	bl	11250 <__ctype_b_loc@plt>
   14f78:	ldr	r2, [r0]
   14f7c:	lsl	r3, r5, #1
   14f80:	ldrh	r3, [r2, r3]
   14f84:	and	r3, r3, #16384	; 0x4000
   14f88:	cmp	r3, #0
   14f8c:	movne	r4, r5
   14f90:	mov	r0, r4
   14f94:	pop	{r4, r5, r6, pc}
   14f98:	push	{r4, lr}
   14f9c:	mov	r4, r0
   14fa0:	bl	11250 <__ctype_b_loc@plt>
   14fa4:	b	14fb0 <_obstack_memory_used@@Base+0xd88>
   14fa8:	add	r3, r3, #1
   14fac:	str	r3, [r4]
   14fb0:	ldr	r3, [r4]
   14fb4:	ldrb	r2, [r3]
   14fb8:	ldr	ip, [r0]
   14fbc:	lsl	r1, r2, #1
   14fc0:	ldrh	r1, [ip, r1]
   14fc4:	tst	r1, #8192	; 0x2000
   14fc8:	bne	14fa8 <_obstack_memory_used@@Base+0xd80>
   14fcc:	subs	ip, r2, #45	; 0x2d
   14fd0:	movne	ip, #1
   14fd4:	cmp	r2, #0
   14fd8:	beq	1500c <_obstack_memory_used@@Base+0xde4>
   14fdc:	tst	r1, #8
   14fe0:	bne	1500c <_obstack_memory_used@@Base+0xde4>
   14fe4:	add	r3, r3, #1
   14fe8:	str	r3, [r4]
   14fec:	ldrb	r2, [r3]
   14ff0:	cmp	r2, #0
   14ff4:	beq	1500c <_obstack_memory_used@@Base+0xde4>
   14ff8:	ldr	r1, [r0]
   14ffc:	lsl	r2, r2, #1
   15000:	ldrh	r2, [r1, r2]
   15004:	tst	r2, #8
   15008:	beq	14fe4 <_obstack_memory_used@@Base+0xdbc>
   1500c:	mov	r0, ip
   15010:	pop	{r4, pc}
   15014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15018:	add	fp, sp, #32
   1501c:	sub	sp, sp, #12
   15020:	ldr	r5, [r0, #4]
   15024:	cmp	r5, #0
   15028:	bne	15034 <_obstack_memory_used@@Base+0xe0c>
   1502c:	sub	sp, fp, #32
   15030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15034:	mov	r9, r1
   15038:	mov	r6, r0
   1503c:	ldr	r0, [r0, #8]
   15040:	bl	11268 <strlen@plt>
   15044:	add	r3, r0, #15
   15048:	bic	r3, r3, #7
   1504c:	sub	sp, sp, r3
   15050:	mov	sl, sp
   15054:	sub	r7, fp, #36	; 0x24
   15058:	str	sp, [r7, #-4]!
   1505c:	ldr	r4, [r6]
   15060:	ldr	r8, [pc, #336]	; 151b8 <_obstack_memory_used@@Base+0xf90>
   15064:	ldr	r2, [r4, #20]
   15068:	mov	r3, r7
   1506c:	ldr	r2, [r2, #24]
   15070:	mov	r1, r8
   15074:	mov	r0, r4
   15078:	bl	14e6c <_obstack_memory_used@@Base+0xc44>
   1507c:	add	r4, r4, #28
   15080:	subs	r5, r5, #1
   15084:	bne	15064 <_obstack_memory_used@@Base+0xe3c>
   15088:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1508c:	cmp	sl, r3
   15090:	bcc	150e8 <_obstack_memory_used@@Base+0xec0>
   15094:	ldr	r4, [r6]
   15098:	ldr	r5, [r6, #4]
   1509c:	cmp	r5, #0
   150a0:	beq	1502c <_obstack_memory_used@@Base+0xe04>
   150a4:	ldr	r7, [pc, #272]	; 151bc <_obstack_memory_used@@Base+0xf94>
   150a8:	ldr	r2, [r4, #20]
   150ac:	mov	r3, r9
   150b0:	ldr	r2, [r2, #24]
   150b4:	mov	r1, r7
   150b8:	mov	r0, r4
   150bc:	bl	14e6c <_obstack_memory_used@@Base+0xc44>
   150c0:	add	r4, r4, #28
   150c4:	subs	r5, r5, #1
   150c8:	bne	150a8 <_obstack_memory_used@@Base+0xe80>
   150cc:	ldr	r7, [r6]
   150d0:	ldr	r8, [r6, #4]
   150d4:	cmp	r8, #0
   150d8:	beq	1502c <_obstack_memory_used@@Base+0xe04>
   150dc:	add	r7, r7, #28
   150e0:	ldr	sl, [pc, #216]	; 151c0 <_obstack_memory_used@@Base+0xf98>
   150e4:	b	151a0 <_obstack_memory_used@@Base+0xf78>
   150e8:	add	r2, r3, #1
   150ec:	str	r2, [fp, #-40]	; 0xffffffd8
   150f0:	mov	r2, #0
   150f4:	strb	r2, [r3]
   150f8:	mov	r2, sl
   150fc:	ldr	r1, [pc, #192]	; 151c4 <_obstack_memory_used@@Base+0xf9c>
   15100:	mov	r0, r9
   15104:	bl	192c0 <argp_error@@Base+0x146c>
   15108:	b	15094 <_obstack_memory_used@@Base+0xe6c>
   1510c:	tst	r1, #16
   15110:	bne	15134 <_obstack_memory_used@@Base+0xf0c>
   15114:	ldr	r3, [r6, #8]
   15118:	cmp	r3, #0
   1511c:	beq	15184 <_obstack_memory_used@@Base+0xf5c>
   15120:	tst	r1, #1
   15124:	ldrne	r1, [pc, #156]	; 151c8 <_obstack_memory_used@@Base+0xfa0>
   15128:	moveq	r1, sl
   1512c:	mov	r0, r9
   15130:	bl	192c0 <argp_error@@Base+0x146c>
   15134:	add	r4, r4, #24
   15138:	subs	r5, r5, #1
   1513c:	beq	15194 <_obstack_memory_used@@Base+0xf6c>
   15140:	ldr	r2, [r4]
   15144:	cmp	r2, #0
   15148:	beq	15134 <_obstack_memory_used@@Base+0xf0c>
   1514c:	ldr	r1, [r4, #12]
   15150:	and	r3, r1, #4
   15154:	cmp	r3, #0
   15158:	moveq	r6, r4
   1515c:	tst	r1, #2
   15160:	bne	15134 <_obstack_memory_used@@Base+0xf0c>
   15164:	ldr	r3, [r4, #8]
   15168:	ldr	r0, [r6, #12]
   1516c:	orr	r1, r1, r0
   15170:	cmp	r3, #0
   15174:	beq	1510c <_obstack_memory_used@@Base+0xee4>
   15178:	tst	r1, #16
   1517c:	beq	15120 <_obstack_memory_used@@Base+0xef8>
   15180:	b	15134 <_obstack_memory_used@@Base+0xf0c>
   15184:	ldr	r1, [pc, #64]	; 151cc <_obstack_memory_used@@Base+0xfa4>
   15188:	mov	r0, r9
   1518c:	bl	192c0 <argp_error@@Base+0x146c>
   15190:	b	15134 <_obstack_memory_used@@Base+0xf0c>
   15194:	add	r7, r7, #28
   15198:	subs	r8, r8, #1
   1519c:	beq	1502c <_obstack_memory_used@@Base+0xe04>
   151a0:	ldr	r4, [r7, #-28]	; 0xffffffe4
   151a4:	ldr	r5, [r7, #-24]	; 0xffffffe8
   151a8:	cmp	r5, #0
   151ac:	beq	15194 <_obstack_memory_used@@Base+0xf6c>
   151b0:	mov	r6, r4
   151b4:	b	15140 <_obstack_memory_used@@Base+0xf18>
   151b8:	andeq	r4, r1, r4, lsr #28
   151bc:	andeq	r5, r1, r4, ror #8
   151c0:	muleq	r1, r0, ip
   151c4:	andeq	fp, r1, r8, ror ip
   151c8:	andeq	fp, r1, r0, lsl #25
   151cc:	muleq	r1, ip, ip
   151d0:	push	{r4, r5, r6, lr}
   151d4:	mov	r5, r0
   151d8:	ldr	r0, [r0, #12]
   151dc:	cmp	r0, #0
   151e0:	beq	151f8 <_obstack_memory_used@@Base+0xfd0>
   151e4:	ldr	r4, [r0, #24]
   151e8:	bl	13dd8 <argp_parse@@Base+0xbf4>
   151ec:	mov	r0, r4
   151f0:	cmp	r4, #0
   151f4:	bne	151e4 <_obstack_memory_used@@Base+0xfbc>
   151f8:	ldr	r3, [r5, #4]
   151fc:	cmp	r3, #0
   15200:	bne	15210 <_obstack_memory_used@@Base+0xfe8>
   15204:	mov	r0, r5
   15208:	bl	13dd8 <argp_parse@@Base+0xbf4>
   1520c:	pop	{r4, r5, r6, pc}
   15210:	ldr	r0, [r5]
   15214:	bl	13dd8 <argp_parse@@Base+0xbf4>
   15218:	ldr	r0, [r5, #8]
   1521c:	bl	13dd8 <argp_parse@@Base+0xbf4>
   15220:	b	15204 <_obstack_memory_used@@Base+0xfdc>
   15224:	push	{r4, r5, r6, r7, r8, lr}
   15228:	mov	r6, r1
   1522c:	ldr	r7, [r0]
   15230:	ldr	r3, [r0, #4]
   15234:	sub	r8, r3, #1
   15238:	cmp	r3, #0
   1523c:	bne	15298 <_obstack_memory_used@@Base+0x1070>
   15240:	mov	r7, #0
   15244:	b	15280 <_obstack_memory_used@@Base+0x1058>
   15248:	sub	r5, r5, #1
   1524c:	add	r4, r4, #24
   15250:	cmn	r5, #1
   15254:	beq	15288 <_obstack_memory_used@@Base+0x1060>
   15258:	ldr	r0, [r4, #-24]	; 0xffffffe8
   1525c:	cmp	r0, #0
   15260:	beq	15248 <_obstack_memory_used@@Base+0x1020>
   15264:	ldr	r3, [r4, #-12]
   15268:	tst	r3, #2
   1526c:	bne	15248 <_obstack_memory_used@@Base+0x1020>
   15270:	mov	r1, r6
   15274:	bl	110f4 <strcmp@plt>
   15278:	cmp	r0, #0
   1527c:	bne	15248 <_obstack_memory_used@@Base+0x1020>
   15280:	mov	r0, r7
   15284:	pop	{r4, r5, r6, r7, r8, pc}
   15288:	add	r7, r7, #28
   1528c:	sub	r8, r8, #1
   15290:	cmn	r8, #1
   15294:	beq	152b4 <_obstack_memory_used@@Base+0x108c>
   15298:	ldr	r4, [r7]
   1529c:	ldr	r3, [r7, #4]
   152a0:	sub	r5, r3, #1
   152a4:	cmp	r3, #0
   152a8:	beq	15288 <_obstack_memory_used@@Base+0x1060>
   152ac:	add	r4, r4, #24
   152b0:	b	15258 <_obstack_memory_used@@Base+0x1030>
   152b4:	mov	r7, #0
   152b8:	b	15280 <_obstack_memory_used@@Base+0x1058>
   152bc:	push	{r4, r5, r6, lr}
   152c0:	ldr	r4, [r0, #16]
   152c4:	ldr	r0, [r0, #8]
   152c8:	cmp	r0, #0
   152cc:	moveq	r5, #0
   152d0:	beq	152e4 <_obstack_memory_used@@Base+0x10bc>
   152d4:	mov	r1, #10
   152d8:	bl	11274 <strchr@plt>
   152dc:	adds	r5, r0, #0
   152e0:	movne	r5, #1
   152e4:	cmp	r4, #0
   152e8:	beq	1530c <_obstack_memory_used@@Base+0x10e4>
   152ec:	ldr	r0, [r4]
   152f0:	cmp	r0, #0
   152f4:	beq	1530c <_obstack_memory_used@@Base+0x10e4>
   152f8:	bl	152bc <_obstack_memory_used@@Base+0x1094>
   152fc:	add	r5, r5, r0
   15300:	ldr	r0, [r4, #16]!
   15304:	cmp	r0, #0
   15308:	bne	152f8 <_obstack_memory_used@@Base+0x10d0>
   1530c:	mov	r0, r5
   15310:	pop	{r4, r5, r6, pc}
   15314:	push	{r4, r5, r6, r7, r8, lr}
   15318:	mov	r4, r0
   1531c:	mov	r5, r1
   15320:	ldr	r3, [r0, #28]
   15324:	ldr	r2, [r0, #24]
   15328:	sub	r3, r3, r2
   1532c:	ldr	r2, [r0, #16]
   15330:	cmp	r3, r2
   15334:	bhi	15350 <_obstack_memory_used@@Base+0x1128>
   15338:	ldr	r3, [r4, #20]
   1533c:	cmp	r3, #0
   15340:	subge	r5, r5, r3
   15344:	mov	r6, #32
   15348:	mov	r7, #1
   1534c:	b	1536c <_obstack_memory_used@@Base+0x1144>
   15350:	bl	18c2c <argp_error@@Base+0xdd8>
   15354:	b	15338 <_obstack_memory_used@@Base+0x1110>
   15358:	ldr	r3, [r4, #28]
   1535c:	add	r2, r3, #1
   15360:	str	r2, [r4, #28]
   15364:	strb	r6, [r3]
   15368:	sub	r5, r5, #1
   1536c:	cmp	r5, #0
   15370:	ble	1539c <_obstack_memory_used@@Base+0x1174>
   15374:	ldr	r2, [r4, #28]
   15378:	ldr	r3, [r4, #32]
   1537c:	cmp	r2, r3
   15380:	bcc	15358 <_obstack_memory_used@@Base+0x1130>
   15384:	mov	r1, r7
   15388:	mov	r0, r4
   1538c:	bl	191d0 <argp_error@@Base+0x137c>
   15390:	cmp	r0, #0
   15394:	beq	15368 <_obstack_memory_used@@Base+0x1140>
   15398:	b	15358 <_obstack_memory_used@@Base+0x1130>
   1539c:	pop	{r4, r5, r6, r7, r8, pc}
   153a0:	push	{r4, r5, r6, lr}
   153a4:	mov	r4, r0
   153a8:	mov	r5, r1
   153ac:	ldr	r3, [r0, #28]
   153b0:	ldr	r2, [r0, #24]
   153b4:	sub	r3, r3, r2
   153b8:	ldr	r2, [r0, #16]
   153bc:	cmp	r3, r2
   153c0:	bhi	15404 <_obstack_memory_used@@Base+0x11dc>
   153c4:	ldr	r3, [r4, #20]
   153c8:	cmp	r3, #0
   153cc:	addge	r5, r5, r3
   153d0:	ldr	r3, [r4, #8]
   153d4:	cmp	r5, r3
   153d8:	bcc	15424 <_obstack_memory_used@@Base+0x11fc>
   153dc:	ldr	r2, [r4, #28]
   153e0:	ldr	r3, [r4, #32]
   153e4:	cmp	r2, r3
   153e8:	bcs	1540c <_obstack_memory_used@@Base+0x11e4>
   153ec:	ldr	r3, [r4, #28]
   153f0:	add	r2, r3, #1
   153f4:	str	r2, [r4, #28]
   153f8:	mov	r2, #10
   153fc:	strb	r2, [r3]
   15400:	pop	{r4, r5, r6, pc}
   15404:	bl	18c2c <argp_error@@Base+0xdd8>
   15408:	b	153c4 <_obstack_memory_used@@Base+0x119c>
   1540c:	mov	r1, #1
   15410:	mov	r0, r4
   15414:	bl	191d0 <argp_error@@Base+0x137c>
   15418:	cmp	r0, #0
   1541c:	popeq	{r4, r5, r6, pc}
   15420:	b	153ec <_obstack_memory_used@@Base+0x11c4>
   15424:	ldr	r2, [r4, #28]
   15428:	ldr	r3, [r4, #32]
   1542c:	cmp	r2, r3
   15430:	bcs	1544c <_obstack_memory_used@@Base+0x1224>
   15434:	ldr	r3, [r4, #28]
   15438:	add	r2, r3, #1
   1543c:	str	r2, [r4, #28]
   15440:	mov	r2, #32
   15444:	strb	r2, [r3]
   15448:	pop	{r4, r5, r6, pc}
   1544c:	mov	r1, #1
   15450:	mov	r0, r4
   15454:	bl	191d0 <argp_error@@Base+0x137c>
   15458:	cmp	r0, #0
   1545c:	bne	15434 <_obstack_memory_used@@Base+0x120c>
   15460:	pop	{r4, r5, r6, pc}
   15464:	push	{r4, r5, r6, lr}
   15468:	ldr	r5, [r0, #8]
   1546c:	ldr	r2, [r0, #12]
   15470:	ldr	ip, [r1, #12]
   15474:	orr	r2, r2, ip
   15478:	cmp	r5, #0
   1547c:	beq	154c8 <_obstack_memory_used@@Base+0x12a0>
   15480:	tst	r2, #16
   15484:	bne	154c0 <_obstack_memory_used@@Base+0x1298>
   15488:	mov	r6, r3
   1548c:	mov	r4, r0
   15490:	tst	r2, #1
   15494:	bne	154d8 <_obstack_memory_used@@Base+0x12b0>
   15498:	mov	r0, r5
   1549c:	bl	11268 <strlen@plt>
   154a0:	add	r1, r0, #6
   154a4:	mov	r0, r6
   154a8:	bl	153a0 <_obstack_memory_used@@Base+0x1178>
   154ac:	mov	r3, r5
   154b0:	ldr	r2, [r4, #4]
   154b4:	ldr	r1, [pc, #52]	; 154f0 <_obstack_memory_used@@Base+0x12c8>
   154b8:	mov	r0, r6
   154bc:	bl	192c0 <argp_error@@Base+0x146c>
   154c0:	mov	r0, #0
   154c4:	pop	{r4, r5, r6, pc}
   154c8:	ldr	r5, [r1, #8]
   154cc:	cmp	r5, #0
   154d0:	beq	154c0 <_obstack_memory_used@@Base+0x1298>
   154d4:	b	15480 <_obstack_memory_used@@Base+0x1258>
   154d8:	mov	r3, r5
   154dc:	ldr	r2, [r0, #4]
   154e0:	ldr	r1, [pc, #12]	; 154f4 <_obstack_memory_used@@Base+0x12cc>
   154e4:	mov	r0, r6
   154e8:	bl	192c0 <argp_error@@Base+0x146c>
   154ec:	b	154c0 <_obstack_memory_used@@Base+0x1298>
   154f0:			; <UNDEFINED> instruction: 0x0001bcb0
   154f4:	andeq	fp, r1, r4, lsr #25
   154f8:	push	{r4, r5, r6, lr}
   154fc:	subs	r5, r2, #0
   15500:	popeq	{r4, r5, r6, pc}
   15504:	ldr	ip, [r5, #20]
   15508:	cmp	ip, #0
   1550c:	popeq	{r4, r5, r6, pc}
   15510:	mov	r6, r1
   15514:	mov	r4, r0
   15518:	mov	r1, r3
   1551c:	mov	r0, r5
   15520:	bl	13c58 <argp_parse@@Base+0xa74>
   15524:	ldr	r3, [r5, #20]
   15528:	mov	r2, r0
   1552c:	mov	r1, r4
   15530:	mov	r0, r6
   15534:	blx	r3
   15538:	pop	{r4, r5, r6, pc}
   1553c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15540:	sub	sp, sp, #28
   15544:	str	r1, [sp, #16]
   15548:	mov	r8, r2
   1554c:	mov	r4, r3
   15550:	ldr	r5, [sp, #64]	; 0x40
   15554:	ldr	r3, [r2]
   15558:	mov	r6, r3
   1555c:	str	r3, [sp, #20]
   15560:	ldr	sl, [r0, #16]
   15564:	ldr	r2, [r0, #8]
   15568:	mov	ip, r2
   1556c:	str	r2, [sp, #12]
   15570:	mov	r3, r1
   15574:	mov	r2, r0
   15578:	ldr	r1, [pc, #424]	; 15728 <_obstack_memory_used@@Base+0x1500>
   1557c:	mov	r0, ip
   15580:	bl	154f8 <_obstack_memory_used@@Base+0x12d0>
   15584:	subs	r3, r0, #0
   15588:	str	r3, [sp, #8]
   1558c:	beq	15714 <_obstack_memory_used@@Base+0x14ec>
   15590:	mov	r1, #10
   15594:	mov	r0, r3
   15598:	bl	11124 <strchrnul@plt>
   1559c:	mov	r7, r0
   155a0:	ldrb	r3, [r0]
   155a4:	cmp	r3, #0
   155a8:	beq	156e4 <_obstack_memory_used@@Base+0x14bc>
   155ac:	ldrb	fp, [r6]
   155b0:	cmp	fp, #0
   155b4:	ble	156dc <_obstack_memory_used@@Base+0x14b4>
   155b8:	mov	r6, #0
   155bc:	add	r9, r0, #1
   155c0:	mov	r1, #10
   155c4:	mov	r0, r9
   155c8:	bl	11124 <strchrnul@plt>
   155cc:	add	r6, r6, #1
   155d0:	cmp	r6, fp
   155d4:	bne	155bc <_obstack_memory_used@@Base+0x1394>
   155d8:	mov	r7, r0
   155dc:	ldr	r3, [r8]
   155e0:	add	r3, r3, #1
   155e4:	str	r3, [r8]
   155e8:	mov	fp, #1
   155ec:	add	r1, r7, #1
   155f0:	sub	r1, r1, r9
   155f4:	mov	r0, r5
   155f8:	bl	153a0 <_obstack_memory_used@@Base+0x1178>
   155fc:	sub	r6, r7, r9
   15600:	ldr	r3, [r5, #28]
   15604:	add	r3, r3, r6
   15608:	ldr	r2, [r5, #32]
   1560c:	cmp	r2, r3
   15610:	bcs	15628 <_obstack_memory_used@@Base+0x1400>
   15614:	mov	r1, r6
   15618:	mov	r0, r5
   1561c:	bl	191d0 <argp_error@@Base+0x137c>
   15620:	cmp	r0, #0
   15624:	beq	15644 <_obstack_memory_used@@Base+0x141c>
   15628:	mov	r2, r6
   1562c:	mov	r1, r9
   15630:	ldr	r0, [r5, #28]
   15634:	bl	1116c <memcpy@plt>
   15638:	ldr	r3, [r5, #28]
   1563c:	add	r6, r3, r6
   15640:	str	r6, [r5, #28]
   15644:	ldr	r3, [sp, #12]
   15648:	ldr	r2, [sp, #8]
   1564c:	cmp	r3, r2
   15650:	bne	156f0 <_obstack_memory_used@@Base+0x14c8>
   15654:	cmp	sl, #0
   15658:	beq	15698 <_obstack_memory_used@@Base+0x1470>
   1565c:	ldr	r0, [sl]
   15660:	cmp	r0, #0
   15664:	beq	15698 <_obstack_memory_used@@Base+0x1470>
   15668:	mov	r3, r4
   1566c:	ldr	r4, [sp, #16]
   15670:	str	r5, [sp]
   15674:	mov	r2, r8
   15678:	mov	r1, r4
   1567c:	bl	1553c <_obstack_memory_used@@Base+0x1314>
   15680:	clz	r3, r0
   15684:	lsr	r3, r3, #5
   15688:	ldr	r0, [sl, #16]!
   1568c:	cmp	r0, #0
   15690:	bne	15670 <_obstack_memory_used@@Base+0x1448>
   15694:	mov	r4, r3
   15698:	cmp	r4, #0
   1569c:	moveq	fp, #0
   156a0:	andne	fp, fp, #1
   156a4:	cmp	fp, #0
   156a8:	beq	156cc <_obstack_memory_used@@Base+0x14a4>
   156ac:	ldrb	r3, [r7]
   156b0:	cmp	r3, #0
   156b4:	bne	156fc <_obstack_memory_used@@Base+0x14d4>
   156b8:	ldr	r2, [sp, #20]
   156bc:	ldrb	r3, [r2]
   156c0:	cmp	r3, #0
   156c4:	movne	r3, #0
   156c8:	strbne	r3, [r2]
   156cc:	clz	r0, r4
   156d0:	lsr	r0, r0, #5
   156d4:	add	sp, sp, #28
   156d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156dc:	ldr	r9, [sp, #8]
   156e0:	b	155dc <_obstack_memory_used@@Base+0x13b4>
   156e4:	ldr	r9, [sp, #8]
   156e8:	mov	fp, #0
   156ec:	b	155ec <_obstack_memory_used@@Base+0x13c4>
   156f0:	mov	r0, r2
   156f4:	bl	13dd8 <argp_parse@@Base+0xbf4>
   156f8:	b	15654 <_obstack_memory_used@@Base+0x142c>
   156fc:	ldr	r2, [sp, #20]
   15700:	ldrb	r3, [r2]
   15704:	add	r3, r3, #1
   15708:	strb	r3, [r2]
   1570c:	mov	r4, #0
   15710:	b	156cc <_obstack_memory_used@@Base+0x14a4>
   15714:	cmp	sl, #0
   15718:	beq	156cc <_obstack_memory_used@@Base+0x14a4>
   1571c:	ldr	r7, [sp, #8]
   15720:	mov	fp, #0
   15724:	b	1565c <_obstack_memory_used@@Base+0x1434>
   15728:	andeq	r0, r0, #6
   1572c:	push	{r4, r5, r6, r7, r8, lr}
   15730:	mov	r7, r0
   15734:	mov	r4, r2
   15738:	ldr	r3, [r2, #16]
   1573c:	mov	r2, r1
   15740:	ldr	r1, [pc, #448]	; 15908 <_obstack_memory_used@@Base+0x16e0>
   15744:	bl	154f8 <_obstack_memory_used@@Base+0x12d0>
   15748:	subs	r5, r0, #0
   1574c:	beq	158a0 <_obstack_memory_used@@Base+0x1678>
   15750:	ldrb	r3, [r5]
   15754:	cmp	r3, #0
   15758:	beq	15894 <_obstack_memory_used@@Base+0x166c>
   1575c:	ldr	r3, [r4, #8]
   15760:	ldr	r3, [r3]
   15764:	cmp	r3, #0
   15768:	beq	15794 <_obstack_memory_used@@Base+0x156c>
   1576c:	ldr	r6, [r4, #4]
   15770:	ldr	r2, [r6, #28]
   15774:	ldr	r3, [r6, #32]
   15778:	cmp	r2, r3
   1577c:	bcs	158b4 <_obstack_memory_used@@Base+0x168c>
   15780:	ldr	r3, [r6, #28]
   15784:	add	r2, r3, #1
   15788:	str	r2, [r6, #28]
   1578c:	mov	r2, #10
   15790:	strb	r2, [r3]
   15794:	ldr	r8, [pc, #368]	; 1590c <_obstack_memory_used@@Base+0x16e4>
   15798:	ldr	r1, [r8, #24]
   1579c:	ldr	r0, [r4, #4]
   157a0:	bl	15314 <_obstack_memory_used@@Base+0x10ec>
   157a4:	ldr	r6, [r4, #4]
   157a8:	ldr	r8, [r8, #24]
   157ac:	ldr	r3, [r6, #28]
   157b0:	ldr	r2, [r6, #24]
   157b4:	sub	r3, r3, r2
   157b8:	ldr	r2, [r6, #16]
   157bc:	cmp	r3, r2
   157c0:	bhi	158cc <_obstack_memory_used@@Base+0x16a4>
   157c4:	str	r8, [r6, #4]
   157c8:	ldr	r6, [r4, #4]
   157cc:	ldr	r3, [pc, #312]	; 1590c <_obstack_memory_used@@Base+0x16e4>
   157d0:	ldr	r8, [r3, #24]
   157d4:	ldr	r3, [r6, #28]
   157d8:	ldr	r2, [r6, #24]
   157dc:	sub	r3, r3, r2
   157e0:	ldr	r2, [r6, #16]
   157e4:	cmp	r3, r2
   157e8:	bhi	158d8 <_obstack_memory_used@@Base+0x16b0>
   157ec:	str	r8, [r6, #12]
   157f0:	mov	r0, r5
   157f4:	bl	11268 <strlen@plt>
   157f8:	subs	r8, r0, #0
   157fc:	beq	15848 <_obstack_memory_used@@Base+0x1620>
   15800:	ldr	r6, [r4, #4]
   15804:	ldr	r3, [r6, #28]
   15808:	add	r3, r3, r8
   1580c:	ldr	r2, [r6, #32]
   15810:	cmp	r2, r3
   15814:	bcs	1582c <_obstack_memory_used@@Base+0x1604>
   15818:	mov	r1, r8
   1581c:	mov	r0, r6
   15820:	bl	191d0 <argp_error@@Base+0x137c>
   15824:	cmp	r0, #0
   15828:	beq	15848 <_obstack_memory_used@@Base+0x1620>
   1582c:	mov	r2, r8
   15830:	mov	r1, r5
   15834:	ldr	r0, [r6, #28]
   15838:	bl	1116c <memcpy@plt>
   1583c:	ldr	r3, [r6, #28]
   15840:	add	r8, r3, r8
   15844:	str	r8, [r6, #28]
   15848:	ldr	r6, [r4, #4]
   1584c:	ldr	r3, [r6, #28]
   15850:	ldr	r2, [r6, #24]
   15854:	sub	r3, r3, r2
   15858:	ldr	r2, [r6, #16]
   1585c:	cmp	r3, r2
   15860:	bhi	158e4 <_obstack_memory_used@@Base+0x16bc>
   15864:	mov	r3, #0
   15868:	str	r3, [r6, #4]
   1586c:	ldr	r6, [r4, #4]
   15870:	ldr	r2, [r6, #28]
   15874:	ldr	r3, [r6, #32]
   15878:	cmp	r2, r3
   1587c:	bcs	158f0 <_obstack_memory_used@@Base+0x16c8>
   15880:	ldr	r3, [r6, #28]
   15884:	add	r2, r3, #1
   15888:	str	r2, [r6, #28]
   1588c:	mov	r2, #10
   15890:	strb	r2, [r3]
   15894:	ldr	r3, [r4, #8]
   15898:	mov	r2, #1
   1589c:	str	r2, [r3, #4]
   158a0:	cmp	r7, r5
   158a4:	popeq	{r4, r5, r6, r7, r8, pc}
   158a8:	mov	r0, r5
   158ac:	bl	13dd8 <argp_parse@@Base+0xbf4>
   158b0:	pop	{r4, r5, r6, r7, r8, pc}
   158b4:	mov	r1, #1
   158b8:	mov	r0, r6
   158bc:	bl	191d0 <argp_error@@Base+0x137c>
   158c0:	cmp	r0, #0
   158c4:	beq	15794 <_obstack_memory_used@@Base+0x156c>
   158c8:	b	15780 <_obstack_memory_used@@Base+0x1558>
   158cc:	mov	r0, r6
   158d0:	bl	18c2c <argp_error@@Base+0xdd8>
   158d4:	b	157c4 <_obstack_memory_used@@Base+0x159c>
   158d8:	mov	r0, r6
   158dc:	bl	18c2c <argp_error@@Base+0xdd8>
   158e0:	b	157ec <_obstack_memory_used@@Base+0x15c4>
   158e4:	mov	r0, r6
   158e8:	bl	18c2c <argp_error@@Base+0xdd8>
   158ec:	b	15864 <_obstack_memory_used@@Base+0x163c>
   158f0:	mov	r1, #1
   158f4:	mov	r0, r6
   158f8:	bl	191d0 <argp_error@@Base+0x137c>
   158fc:	cmp	r0, #0
   15900:	beq	15894 <_obstack_memory_used@@Base+0x166c>
   15904:	b	15880 <_obstack_memory_used@@Base+0x1658>
   15908:	andeq	r0, r0, #3
   1590c:	andeq	r0, r3, r4, ror r8
   15910:	push	{r4, r5, r6, r7, r8, lr}
   15914:	mov	r6, r0
   15918:	mov	r4, r1
   1591c:	ldr	r3, [r1, #12]
   15920:	cmp	r3, #0
   15924:	beq	15a44 <_obstack_memory_used@@Base+0x181c>
   15928:	ldr	r3, [r1, #8]
   1592c:	ldr	r7, [r3]
   15930:	ldr	r2, [r1]
   15934:	ldr	r5, [r2, #16]
   15938:	ldr	r3, [r3, #4]
   1593c:	cmp	r3, #0
   15940:	cmpne	r7, #0
   15944:	beq	15980 <_obstack_memory_used@@Base+0x1758>
   15948:	ldr	r2, [r2, #12]
   1594c:	ldr	r3, [r7, #12]
   15950:	cmp	r2, r3
   15954:	beq	15980 <_obstack_memory_used@@Base+0x1758>
   15958:	ldr	r8, [r1, #4]
   1595c:	ldr	r2, [r8, #28]
   15960:	ldr	r3, [r8, #32]
   15964:	cmp	r2, r3
   15968:	bcs	15a20 <_obstack_memory_used@@Base+0x17f8>
   1596c:	ldr	r3, [r8, #28]
   15970:	add	r2, r3, #1
   15974:	str	r2, [r8, #28]
   15978:	mov	r2, #10
   1597c:	strb	r2, [r3]
   15980:	cmp	r5, #0
   15984:	beq	15a08 <_obstack_memory_used@@Base+0x17e0>
   15988:	ldr	r0, [r5]
   1598c:	cmp	r0, #0
   15990:	beq	15a08 <_obstack_memory_used@@Base+0x17e0>
   15994:	ldrb	r3, [r0]
   15998:	cmp	r3, #0
   1599c:	beq	15a08 <_obstack_memory_used@@Base+0x17e0>
   159a0:	cmp	r7, #0
   159a4:	beq	159d4 <_obstack_memory_used@@Base+0x17ac>
   159a8:	ldr	r3, [r7, #16]
   159ac:	cmp	r5, r3
   159b0:	beq	15a08 <_obstack_memory_used@@Base+0x17e0>
   159b4:	cmp	r3, #0
   159b8:	beq	159d4 <_obstack_memory_used@@Base+0x17ac>
   159bc:	ldr	r3, [r3, #12]
   159c0:	cmp	r3, #0
   159c4:	cmpne	r5, r3
   159c8:	bne	159bc <_obstack_memory_used@@Base+0x1794>
   159cc:	cmp	r5, r3
   159d0:	beq	15a08 <_obstack_memory_used@@Base+0x17e0>
   159d4:	ldr	r3, [r4, #4]
   159d8:	ldr	r7, [r3, #12]
   159dc:	mov	r2, r4
   159e0:	ldr	r1, [r5, #16]
   159e4:	bl	1572c <_obstack_memory_used@@Base+0x1504>
   159e8:	ldr	r5, [r4, #4]
   159ec:	ldr	r3, [r5, #28]
   159f0:	ldr	r2, [r5, #24]
   159f4:	sub	r3, r3, r2
   159f8:	ldr	r2, [r5, #16]
   159fc:	cmp	r3, r2
   15a00:	bhi	15a38 <_obstack_memory_used@@Base+0x1810>
   15a04:	str	r7, [r5, #12]
   15a08:	mov	r3, #0
   15a0c:	str	r3, [r4, #12]
   15a10:	mov	r1, r6
   15a14:	ldr	r0, [r4, #4]
   15a18:	bl	15314 <_obstack_memory_used@@Base+0x10ec>
   15a1c:	pop	{r4, r5, r6, r7, r8, pc}
   15a20:	mov	r1, #1
   15a24:	mov	r0, r8
   15a28:	bl	191d0 <argp_error@@Base+0x137c>
   15a2c:	cmp	r0, #0
   15a30:	beq	15980 <_obstack_memory_used@@Base+0x1758>
   15a34:	b	1596c <_obstack_memory_used@@Base+0x1744>
   15a38:	mov	r0, r5
   15a3c:	bl	18c2c <argp_error@@Base+0xdd8>
   15a40:	b	15a04 <_obstack_memory_used@@Base+0x17dc>
   15a44:	ldr	r5, [r1, #4]
   15a48:	ldr	r3, [r5, #28]
   15a4c:	add	r3, r3, #2
   15a50:	ldr	r2, [r5, #32]
   15a54:	cmp	r2, r3
   15a58:	bcs	15a70 <_obstack_memory_used@@Base+0x1848>
   15a5c:	mov	r1, #2
   15a60:	mov	r0, r5
   15a64:	bl	191d0 <argp_error@@Base+0x137c>
   15a68:	cmp	r0, #0
   15a6c:	beq	15a10 <_obstack_memory_used@@Base+0x17e8>
   15a70:	ldr	r3, [r5, #28]
   15a74:	ldr	r2, [pc, #20]	; 15a90 <_obstack_memory_used@@Base+0x1868>
   15a78:	ldrh	r2, [r2]
   15a7c:	strh	r2, [r3]
   15a80:	ldr	r3, [r5, #28]
   15a84:	add	r3, r3, #2
   15a88:	str	r3, [r5, #28]
   15a8c:	b	15a10 <_obstack_memory_used@@Base+0x17e8>
   15a90:			; <UNDEFINED> instruction: 0x0001bcbc
   15a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a98:	sub	sp, sp, #28
   15a9c:	mov	fp, r0
   15aa0:	str	r1, [sp, #8]
   15aa4:	mov	r6, r2
   15aa8:	mov	r8, r3
   15aac:	ldr	r7, [sp, #64]	; 0x40
   15ab0:	ldr	r5, [sp, #68]	; 0x44
   15ab4:	ldr	r9, [r0, #12]
   15ab8:	ldr	r3, [r0, #16]
   15abc:	str	r3, [sp, #16]
   15ac0:	cmp	r9, #0
   15ac4:	beq	15f20 <_obstack_memory_used@@Base+0x1cf8>
   15ac8:	mov	r1, #11
   15acc:	mov	r0, r9
   15ad0:	bl	11274 <strchr@plt>
   15ad4:	cmp	r6, #0
   15ad8:	beq	15dd0 <_obstack_memory_used@@Base+0x1ba8>
   15adc:	cmp	r0, #0
   15ae0:	addne	r9, r0, #1
   15ae4:	beq	15f08 <_obstack_memory_used@@Base+0x1ce0>
   15ae8:	ldr	r3, [fp, #20]
   15aec:	cmp	r3, #0
   15af0:	movne	sl, #0
   15af4:	beq	15f10 <_obstack_memory_used@@Base+0x1ce8>
   15af8:	ldr	r1, [sp, #8]
   15afc:	mov	r0, fp
   15b00:	bl	13c58 <argp_parse@@Base+0xa74>
   15b04:	str	r0, [sp, #12]
   15b08:	ldr	r3, [fp, #20]
   15b0c:	ldr	r2, [pc, #1140]	; 15f88 <_obstack_memory_used@@Base+0x1d60>
   15b10:	ldr	r0, [pc, #1140]	; 15f8c <_obstack_memory_used@@Base+0x1d64>
   15b14:	cmp	r6, #0
   15b18:	moveq	r0, r2
   15b1c:	ldr	r2, [sp, #12]
   15b20:	mov	r1, r9
   15b24:	blx	r3
   15b28:	mov	r4, r0
   15b2c:	cmp	r4, #0
   15b30:	beq	15ec0 <_obstack_memory_used@@Base+0x1c98>
   15b34:	cmp	r8, #0
   15b38:	beq	15b60 <_obstack_memory_used@@Base+0x1938>
   15b3c:	ldr	r2, [r5, #28]
   15b40:	ldr	r3, [r5, #32]
   15b44:	cmp	r2, r3
   15b48:	bcs	15e14 <_obstack_memory_used@@Base+0x1bec>
   15b4c:	ldr	r3, [r5, #28]
   15b50:	add	r2, r3, #1
   15b54:	str	r2, [r5, #28]
   15b58:	mov	r2, #10
   15b5c:	strb	r2, [r3]
   15b60:	cmp	r4, r9
   15b64:	movne	r3, #0
   15b68:	moveq	r3, #1
   15b6c:	cmp	sl, #0
   15b70:	moveq	r3, #0
   15b74:	cmp	r3, #0
   15b78:	beq	15e2c <_obstack_memory_used@@Base+0x1c04>
   15b7c:	ldr	r3, [r5, #28]
   15b80:	add	r3, r3, sl
   15b84:	ldr	r2, [r5, #32]
   15b88:	cmp	r2, r3
   15b8c:	bcs	15ba4 <_obstack_memory_used@@Base+0x197c>
   15b90:	mov	r1, sl
   15b94:	mov	r0, r5
   15b98:	bl	191d0 <argp_error@@Base+0x137c>
   15b9c:	cmp	r0, #0
   15ba0:	beq	15bc0 <_obstack_memory_used@@Base+0x1998>
   15ba4:	mov	r2, sl
   15ba8:	mov	r1, r9
   15bac:	ldr	r0, [r5, #28]
   15bb0:	bl	1116c <memcpy@plt>
   15bb4:	ldr	r3, [r5, #28]
   15bb8:	add	r3, r3, sl
   15bbc:	str	r3, [r5, #28]
   15bc0:	ldr	r3, [r5, #28]
   15bc4:	ldr	r2, [r5, #24]
   15bc8:	sub	r3, r3, r2
   15bcc:	ldr	r2, [r5, #16]
   15bd0:	cmp	r3, r2
   15bd4:	bhi	15e8c <_obstack_memory_used@@Base+0x1c64>
   15bd8:	ldr	r3, [r5, #20]
   15bdc:	bic	r3, r3, r3, asr #31
   15be0:	ldr	r2, [r5, #4]
   15be4:	cmp	r2, r3
   15be8:	bcs	15c10 <_obstack_memory_used@@Base+0x19e8>
   15bec:	ldr	r2, [r5, #28]
   15bf0:	ldr	r3, [r5, #32]
   15bf4:	cmp	r2, r3
   15bf8:	bcs	15e98 <_obstack_memory_used@@Base+0x1c70>
   15bfc:	ldr	r3, [r5, #28]
   15c00:	add	r2, r3, #1
   15c04:	str	r2, [r5, #28]
   15c08:	mov	r2, #10
   15c0c:	strb	r2, [r3]
   15c10:	cmp	r4, r9
   15c14:	moveq	r4, #1
   15c18:	bne	15eb0 <_obstack_memory_used@@Base+0x1c88>
   15c1c:	cmp	r9, #0
   15c20:	cmpne	sl, #0
   15c24:	beq	15c3c <_obstack_memory_used@@Base+0x1a14>
   15c28:	ldr	r3, [fp, #20]
   15c2c:	cmp	r3, #0
   15c30:	beq	15d48 <_obstack_memory_used@@Base+0x1b20>
   15c34:	mov	r0, r9
   15c38:	bl	13dd8 <argp_parse@@Base+0xbf4>
   15c3c:	cmp	r6, #0
   15c40:	beq	15d48 <_obstack_memory_used@@Base+0x1b20>
   15c44:	ldr	r3, [fp, #20]
   15c48:	cmp	r3, #0
   15c4c:	beq	15d48 <_obstack_memory_used@@Base+0x1b20>
   15c50:	ldr	r2, [sp, #12]
   15c54:	mov	r1, #0
   15c58:	ldr	r0, [pc, #816]	; 15f90 <_obstack_memory_used@@Base+0x1d68>
   15c5c:	blx	r3
   15c60:	subs	r9, r0, #0
   15c64:	beq	15d48 <_obstack_memory_used@@Base+0x1b20>
   15c68:	orrs	r3, r8, r4
   15c6c:	beq	15c94 <_obstack_memory_used@@Base+0x1a6c>
   15c70:	ldr	r2, [r5, #28]
   15c74:	ldr	r3, [r5, #32]
   15c78:	cmp	r2, r3
   15c7c:	bcs	15ec8 <_obstack_memory_used@@Base+0x1ca0>
   15c80:	ldr	r3, [r5, #28]
   15c84:	add	r2, r3, #1
   15c88:	str	r2, [r5, #28]
   15c8c:	mov	r2, #10
   15c90:	strb	r2, [r3]
   15c94:	mov	r0, r9
   15c98:	bl	11268 <strlen@plt>
   15c9c:	subs	r4, r0, #0
   15ca0:	beq	15ce8 <_obstack_memory_used@@Base+0x1ac0>
   15ca4:	ldr	r3, [r5, #28]
   15ca8:	add	r3, r3, r4
   15cac:	ldr	r2, [r5, #32]
   15cb0:	cmp	r2, r3
   15cb4:	bcs	15ccc <_obstack_memory_used@@Base+0x1aa4>
   15cb8:	mov	r1, r4
   15cbc:	mov	r0, r5
   15cc0:	bl	191d0 <argp_error@@Base+0x137c>
   15cc4:	cmp	r0, #0
   15cc8:	beq	15ce8 <_obstack_memory_used@@Base+0x1ac0>
   15ccc:	mov	r2, r4
   15cd0:	mov	r1, r9
   15cd4:	ldr	r0, [r5, #28]
   15cd8:	bl	1116c <memcpy@plt>
   15cdc:	ldr	r3, [r5, #28]
   15ce0:	add	r4, r3, r4
   15ce4:	str	r4, [r5, #28]
   15ce8:	mov	r0, r9
   15cec:	bl	13dd8 <argp_parse@@Base+0xbf4>
   15cf0:	ldr	r3, [r5, #28]
   15cf4:	ldr	r2, [r5, #24]
   15cf8:	sub	r3, r3, r2
   15cfc:	ldr	r2, [r5, #16]
   15d00:	cmp	r3, r2
   15d04:	bhi	15ee0 <_obstack_memory_used@@Base+0x1cb8>
   15d08:	ldr	r3, [r5, #20]
   15d0c:	bic	r3, r3, r3, asr #31
   15d10:	ldr	r2, [r5, #4]
   15d14:	cmp	r2, r3
   15d18:	movcs	r4, #1
   15d1c:	bcs	15d48 <_obstack_memory_used@@Base+0x1b20>
   15d20:	ldr	r2, [r5, #28]
   15d24:	ldr	r3, [r5, #32]
   15d28:	cmp	r2, r3
   15d2c:	bcs	15eec <_obstack_memory_used@@Base+0x1cc4>
   15d30:	ldr	r3, [r5, #28]
   15d34:	add	r2, r3, #1
   15d38:	str	r2, [r5, #28]
   15d3c:	mov	r2, #10
   15d40:	strb	r2, [r3]
   15d44:	mov	r4, #1
   15d48:	ldr	r3, [sp, #16]
   15d4c:	cmp	r3, #0
   15d50:	beq	15dc4 <_obstack_memory_used@@Base+0x1b9c>
   15d54:	ldr	r0, [r3]
   15d58:	cmp	r0, #0
   15d5c:	beq	15dc4 <_obstack_memory_used@@Base+0x1b9c>
   15d60:	clz	r9, r7
   15d64:	lsr	r9, r9, #5
   15d68:	cmp	r7, #0
   15d6c:	cmpne	r4, #0
   15d70:	bne	15dc4 <_obstack_memory_used@@Base+0x1b9c>
   15d74:	mov	sl, r3
   15d78:	ldr	fp, [sp, #8]
   15d7c:	orrs	r3, r8, r4
   15d80:	str	r5, [sp, #4]
   15d84:	str	r7, [sp]
   15d88:	movne	r3, #1
   15d8c:	moveq	r3, #0
   15d90:	mov	r2, r6
   15d94:	mov	r1, fp
   15d98:	bl	15a94 <_obstack_memory_used@@Base+0x186c>
   15d9c:	orr	r4, r4, r0
   15da0:	ldr	r0, [sl, #16]
   15da4:	cmp	r0, #0
   15da8:	beq	15dc4 <_obstack_memory_used@@Base+0x1b9c>
   15dac:	add	sl, sl, #16
   15db0:	cmp	r4, #0
   15db4:	movne	r3, r9
   15db8:	orreq	r3, r9, #1
   15dbc:	cmp	r3, #0
   15dc0:	bne	15d7c <_obstack_memory_used@@Base+0x1b54>
   15dc4:	mov	r0, r4
   15dc8:	add	sp, sp, #28
   15dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dd0:	cmp	r0, #0
   15dd4:	beq	15f58 <_obstack_memory_used@@Base+0x1d30>
   15dd8:	sub	sl, r0, r9
   15ddc:	ldr	r3, [fp, #20]
   15de0:	cmp	r3, #0
   15de4:	beq	15e04 <_obstack_memory_used@@Base+0x1bdc>
   15de8:	cmp	sl, #0
   15dec:	beq	15af8 <_obstack_memory_used@@Base+0x18d0>
   15df0:	mov	r1, sl
   15df4:	mov	r0, r9
   15df8:	bl	11160 <strndup@plt>
   15dfc:	mov	r9, r0
   15e00:	b	15af8 <_obstack_memory_used@@Base+0x18d0>
   15e04:	mov	r4, r9
   15e08:	mov	r3, #0
   15e0c:	str	r3, [sp, #12]
   15e10:	b	15b34 <_obstack_memory_used@@Base+0x190c>
   15e14:	mov	r1, #1
   15e18:	mov	r0, r5
   15e1c:	bl	191d0 <argp_error@@Base+0x137c>
   15e20:	cmp	r0, #0
   15e24:	beq	15b60 <_obstack_memory_used@@Base+0x1938>
   15e28:	b	15b4c <_obstack_memory_used@@Base+0x1924>
   15e2c:	mov	r0, r4
   15e30:	bl	11268 <strlen@plt>
   15e34:	subs	r3, r0, #0
   15e38:	mov	r1, r3
   15e3c:	str	r3, [sp, #20]
   15e40:	beq	15bc0 <_obstack_memory_used@@Base+0x1998>
   15e44:	ldr	r3, [r5, #28]
   15e48:	add	r3, r3, r1
   15e4c:	ldr	r2, [r5, #32]
   15e50:	cmp	r2, r3
   15e54:	bcs	15e68 <_obstack_memory_used@@Base+0x1c40>
   15e58:	mov	r0, r5
   15e5c:	bl	191d0 <argp_error@@Base+0x137c>
   15e60:	cmp	r0, #0
   15e64:	beq	15bc0 <_obstack_memory_used@@Base+0x1998>
   15e68:	ldr	r2, [sp, #20]
   15e6c:	mov	r1, r4
   15e70:	ldr	r0, [r5, #28]
   15e74:	bl	1116c <memcpy@plt>
   15e78:	ldr	r3, [r5, #28]
   15e7c:	ldr	r2, [sp, #20]
   15e80:	add	r3, r3, r2
   15e84:	str	r3, [r5, #28]
   15e88:	b	15bc0 <_obstack_memory_used@@Base+0x1998>
   15e8c:	mov	r0, r5
   15e90:	bl	18c2c <argp_error@@Base+0xdd8>
   15e94:	b	15bd8 <_obstack_memory_used@@Base+0x19b0>
   15e98:	mov	r1, #1
   15e9c:	mov	r0, r5
   15ea0:	bl	191d0 <argp_error@@Base+0x137c>
   15ea4:	cmp	r0, #0
   15ea8:	beq	15c10 <_obstack_memory_used@@Base+0x19e8>
   15eac:	b	15bfc <_obstack_memory_used@@Base+0x19d4>
   15eb0:	mov	r0, r4
   15eb4:	bl	13dd8 <argp_parse@@Base+0xbf4>
   15eb8:	mov	r4, #1
   15ebc:	b	15c1c <_obstack_memory_used@@Base+0x19f4>
   15ec0:	mov	r4, #0
   15ec4:	b	15c1c <_obstack_memory_used@@Base+0x19f4>
   15ec8:	mov	r1, #1
   15ecc:	mov	r0, r5
   15ed0:	bl	191d0 <argp_error@@Base+0x137c>
   15ed4:	cmp	r0, #0
   15ed8:	beq	15c94 <_obstack_memory_used@@Base+0x1a6c>
   15edc:	b	15c80 <_obstack_memory_used@@Base+0x1a58>
   15ee0:	mov	r0, r5
   15ee4:	bl	18c2c <argp_error@@Base+0xdd8>
   15ee8:	b	15d08 <_obstack_memory_used@@Base+0x1ae0>
   15eec:	mov	r1, #1
   15ef0:	mov	r0, r5
   15ef4:	bl	191d0 <argp_error@@Base+0x137c>
   15ef8:	cmp	r0, #0
   15efc:	moveq	r4, #1
   15f00:	beq	15d48 <_obstack_memory_used@@Base+0x1b20>
   15f04:	b	15d30 <_obstack_memory_used@@Base+0x1b08>
   15f08:	mov	r9, #0
   15f0c:	b	15ae8 <_obstack_memory_used@@Base+0x18c0>
   15f10:	mov	r4, r9
   15f14:	mov	sl, #0
   15f18:	str	sl, [sp, #12]
   15f1c:	b	15b2c <_obstack_memory_used@@Base+0x1904>
   15f20:	ldr	r3, [r0, #20]
   15f24:	cmp	r3, #0
   15f28:	movne	sl, #0
   15f2c:	bne	15af8 <_obstack_memory_used@@Base+0x18d0>
   15f30:	mov	r3, r9
   15f34:	cmp	r9, #0
   15f38:	moveq	r4, #0
   15f3c:	streq	r4, [sp, #12]
   15f40:	beq	15c3c <_obstack_memory_used@@Base+0x1a14>
   15f44:	mov	r4, r9
   15f48:	mov	r9, r3
   15f4c:	mov	sl, #0
   15f50:	str	sl, [sp, #12]
   15f54:	b	15b34 <_obstack_memory_used@@Base+0x190c>
   15f58:	ldr	r3, [fp, #20]
   15f5c:	cmp	r3, #0
   15f60:	moveq	r3, r9
   15f64:	beq	15f34 <_obstack_memory_used@@Base+0x1d0c>
   15f68:	ldr	r1, [sp, #8]
   15f6c:	mov	r0, fp
   15f70:	bl	13c58 <argp_parse@@Base+0xa74>
   15f74:	str	r0, [sp, #12]
   15f78:	ldr	r3, [fp, #20]
   15f7c:	mov	sl, #0
   15f80:	ldr	r0, [pc]	; 15f88 <_obstack_memory_used@@Base+0x1d60>
   15f84:	b	15b1c <_obstack_memory_used@@Base+0x18f4>
   15f88:	andeq	r0, r0, #1
   15f8c:	andeq	r0, r0, #2
   15f90:	andeq	r0, r0, #4
   15f94:	ldr	r3, [r0, #12]
   15f98:	ldr	r2, [r1, #12]
   15f9c:	cmp	r3, r2
   15fa0:	beq	15ff8 <_obstack_memory_used@@Base+0x1dd0>
   15fa4:	push	{r4, r5, r6, lr}
   15fa8:	mov	r5, r1
   15fac:	mov	r4, r0
   15fb0:	mov	r1, r2
   15fb4:	mov	r0, r3
   15fb8:	bl	15f94 <_obstack_memory_used@@Base+0x1d6c>
   15fbc:	subs	r3, r0, #0
   15fc0:	bne	15ff0 <_obstack_memory_used@@Base+0x1dc8>
   15fc4:	ldr	r0, [r4, #8]
   15fc8:	ldr	r3, [r5, #8]
   15fcc:	mvn	r2, r3
   15fd0:	lsr	r2, r2, #31
   15fd4:	cmp	r2, r0, lsr #31
   15fd8:	subne	r3, r0, r3
   15fdc:	subeq	r3, r3, r0
   15fe0:	cmp	r3, #0
   15fe4:	ldreq	r3, [r5, #4]
   15fe8:	ldreq	r0, [r4, #4]
   15fec:	subeq	r3, r3, r0
   15ff0:	mov	r0, r3
   15ff4:	pop	{r4, r5, r6, pc}
   15ff8:	ldr	r2, [r0, #8]
   15ffc:	ldr	r3, [r1, #8]
   16000:	mvn	ip, r3
   16004:	lsr	ip, ip, #31
   16008:	cmp	ip, r2, lsr #31
   1600c:	subne	r3, r2, r3
   16010:	subeq	r3, r3, r2
   16014:	cmp	r3, #0
   16018:	ldreq	r3, [r1, #4]
   1601c:	ldreq	r0, [r0, #4]
   16020:	subeq	r3, r3, r0
   16024:	mov	r0, r3
   16028:	bx	lr
   1602c:	push	{r4, r5, r6, r7, r8, lr}
   16030:	sub	sp, sp, #8
   16034:	ldr	lr, [r0, #16]
   16038:	cmp	lr, #0
   1603c:	movne	r2, lr
   16040:	bne	16050 <_obstack_memory_used@@Base+0x1e28>
   16044:	ldr	ip, [r0, #12]
   16048:	b	16060 <_obstack_memory_used@@Base+0x1e38>
   1604c:	mov	r2, r3
   16050:	ldr	r3, [r2, #12]
   16054:	cmp	r3, #0
   16058:	bne	1604c <_obstack_memory_used@@Base+0x1e24>
   1605c:	ldr	ip, [r2, #8]
   16060:	ldr	r5, [r1, #16]
   16064:	cmp	r5, #0
   16068:	movne	r2, r5
   1606c:	bne	1607c <_obstack_memory_used@@Base+0x1e54>
   16070:	ldr	r4, [r1, #12]
   16074:	b	1608c <_obstack_memory_used@@Base+0x1e64>
   16078:	mov	r2, r3
   1607c:	ldr	r3, [r2, #12]
   16080:	cmp	r3, #0
   16084:	bne	16078 <_obstack_memory_used@@Base+0x1e50>
   16088:	ldr	r4, [r2, #8]
   1608c:	mvn	r3, r4
   16090:	lsr	r3, r3, #31
   16094:	cmp	r3, ip, lsr #31
   16098:	subne	r4, ip, r4
   1609c:	subeq	r4, r4, ip
   160a0:	cmp	r4, #0
   160a4:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   160a8:	adds	r4, r5, #0
   160ac:	movne	r4, #1
   160b0:	cmp	lr, #0
   160b4:	rsbeq	r4, r4, #0
   160b8:	rsbne	r4, r4, #1
   160bc:	cmp	r4, #0
   160c0:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   160c4:	mov	r6, r1
   160c8:	mov	r7, r0
   160cc:	cmp	lr, #0
   160d0:	beq	1615c <_obstack_memory_used@@Base+0x1f34>
   160d4:	ldr	ip, [lr, #20]
   160d8:	ldr	r2, [r5, #20]
   160dc:	cmp	ip, r2
   160e0:	ble	16118 <_obstack_memory_used@@Base+0x1ef0>
   160e4:	mov	r0, lr
   160e8:	ldr	r0, [r0, #12]
   160ec:	ldr	r3, [r0, #20]
   160f0:	cmp	r2, r3
   160f4:	blt	160e8 <_obstack_memory_used@@Base+0x1ec0>
   160f8:	mov	r1, r5
   160fc:	bl	15f94 <_obstack_memory_used@@Base+0x1d6c>
   16100:	subs	r4, r0, #0
   16104:	cmp	r0, #0
   16108:	moveq	r4, #1
   1610c:	mov	r0, r4
   16110:	add	sp, sp, #8
   16114:	pop	{r4, r5, r6, r7, r8, pc}
   16118:	cmp	ip, r2
   1611c:	bge	16148 <_obstack_memory_used@@Base+0x1f20>
   16120:	mov	r1, r5
   16124:	ldr	r1, [r1, #12]
   16128:	ldr	r3, [r1, #20]
   1612c:	cmp	ip, r3
   16130:	blt	16124 <_obstack_memory_used@@Base+0x1efc>
   16134:	mov	r0, lr
   16138:	bl	15f94 <_obstack_memory_used@@Base+0x1d6c>
   1613c:	subs	r4, r0, #0
   16140:	mvneq	r4, #0
   16144:	b	1610c <_obstack_memory_used@@Base+0x1ee4>
   16148:	mov	r1, r5
   1614c:	mov	r0, lr
   16150:	bl	15f94 <_obstack_memory_used@@Base+0x1d6c>
   16154:	subs	r4, r0, #0
   16158:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   1615c:	ldr	r3, [r7, #12]
   16160:	ldr	r4, [r6, #12]
   16164:	mvn	r2, r4
   16168:	lsr	r2, r2, #31
   1616c:	cmp	r2, r3, lsr #31
   16170:	subne	r4, r3, r4
   16174:	subeq	r4, r4, r3
   16178:	cmp	r4, #0
   1617c:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   16180:	mov	r0, r7
   16184:	bl	14dd4 <_obstack_memory_used@@Base+0xbac>
   16188:	mov	r5, r0
   1618c:	str	r0, [sp]
   16190:	mov	r0, r6
   16194:	bl	14dd4 <_obstack_memory_used@@Base+0xbac>
   16198:	str	r0, [sp, #4]
   1619c:	ldr	r3, [r7]
   161a0:	ldr	r3, [r3, #12]
   161a4:	adds	r5, r5, #0
   161a8:	movne	r5, #1
   161ac:	ands	r3, r5, r3, lsr #3
   161b0:	beq	162f4 <_obstack_memory_used@@Base+0x20cc>
   161b4:	mov	r0, sp
   161b8:	bl	14f98 <_obstack_memory_used@@Base+0xd70>
   161bc:	adds	r5, r0, #0
   161c0:	movne	r5, #1
   161c4:	ldr	r3, [r6]
   161c8:	ldr	r0, [r3, #12]
   161cc:	ands	r0, r0, #8
   161d0:	beq	161f0 <_obstack_memory_used@@Base+0x1fc8>
   161d4:	ldr	r3, [sp, #4]
   161d8:	cmp	r3, #0
   161dc:	beq	162ec <_obstack_memory_used@@Base+0x20c4>
   161e0:	add	r0, sp, #4
   161e4:	bl	14f98 <_obstack_memory_used@@Base+0xd70>
   161e8:	adds	r0, r0, #0
   161ec:	movne	r0, #1
   161f0:	subs	r4, r5, r0
   161f4:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   161f8:	ldr	r2, [r7, #20]
   161fc:	ldr	r4, [pc, #276]	; 16318 <_obstack_memory_used@@Base+0x20f0>
   16200:	mov	r3, #0
   16204:	ldr	r2, [r2, #24]
   16208:	mov	r1, r4
   1620c:	mov	r0, r7
   16210:	bl	14e6c <_obstack_memory_used@@Base+0xc44>
   16214:	mov	r5, r0
   16218:	uxtb	r8, r0
   1621c:	ldr	r2, [r6, #20]
   16220:	mov	r3, #0
   16224:	ldr	r2, [r2, #24]
   16228:	mov	r1, r4
   1622c:	mov	r0, r6
   16230:	bl	14e6c <_obstack_memory_used@@Base+0xc44>
   16234:	uxtb	r7, r0
   16238:	cmp	r8, #0
   1623c:	movne	r5, r8
   16240:	bne	16254 <_obstack_memory_used@@Base+0x202c>
   16244:	ldr	r3, [sp]
   16248:	cmp	r3, #0
   1624c:	ldrbne	r5, [r3]
   16250:	moveq	r5, #0
   16254:	cmp	r7, #0
   16258:	uxtbne	r6, r0
   1625c:	bne	16270 <_obstack_memory_used@@Base+0x2048>
   16260:	ldr	r3, [sp, #4]
   16264:	cmp	r3, #0
   16268:	ldrbne	r6, [r3]
   1626c:	moveq	r6, #0
   16270:	bl	1122c <__ctype_tolower_loc@plt>
   16274:	ldr	r3, [r0]
   16278:	ldr	r4, [r3, r5, lsl #2]
   1627c:	ldr	r3, [r3, r6, lsl #2]
   16280:	subs	r4, r4, r3
   16284:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   16288:	subs	r4, r6, r5
   1628c:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   16290:	adds	r4, r7, #0
   16294:	movne	r4, #1
   16298:	cmp	r8, #0
   1629c:	rsbeq	r4, r4, #0
   162a0:	rsbne	r4, r4, #1
   162a4:	cmp	r4, #0
   162a8:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   162ac:	cmp	r8, #0
   162b0:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   162b4:	ldr	r0, [sp]
   162b8:	ldr	r1, [sp, #4]
   162bc:	adds	r4, r1, #0
   162c0:	movne	r4, #1
   162c4:	cmp	r0, #0
   162c8:	rsbeq	r4, r4, #0
   162cc:	rsbne	r4, r4, #1
   162d0:	cmp	r4, #0
   162d4:	bne	1610c <_obstack_memory_used@@Base+0x1ee4>
   162d8:	cmp	r0, #0
   162dc:	beq	1610c <_obstack_memory_used@@Base+0x1ee4>
   162e0:	bl	111a8 <strcasecmp@plt>
   162e4:	mov	r4, r0
   162e8:	b	1610c <_obstack_memory_used@@Base+0x1ee4>
   162ec:	mov	r0, r4
   162f0:	b	161f0 <_obstack_memory_used@@Base+0x1fc8>
   162f4:	ldr	r3, [r6]
   162f8:	ldr	r3, [r3, #12]
   162fc:	tst	r3, #8
   16300:	beq	161f8 <_obstack_memory_used@@Base+0x1fd0>
   16304:	ldr	r3, [sp, #4]
   16308:	cmp	r3, #0
   1630c:	movne	r5, r4
   16310:	bne	161e0 <_obstack_memory_used@@Base+0x1fb8>
   16314:	b	161f8 <_obstack_memory_used@@Base+0x1fd0>
   16318:	andeq	r4, r1, r0, asr pc
   1631c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16320:	sub	sp, sp, #52	; 0x34
   16324:	str	r0, [sp, #24]
   16328:	str	r1, [sp, #28]
   1632c:	ldr	r2, [r0, #16]
   16330:	str	r2, [sp, #8]
   16334:	ldr	r5, [r0]
   16338:	mov	r0, #16
   1633c:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   16340:	subs	fp, r0, #0
   16344:	beq	16374 <_obstack_memory_used@@Base+0x214c>
   16348:	mov	r3, #0
   1634c:	str	r3, [fp, #4]
   16350:	str	r3, [fp, #12]
   16354:	cmp	r5, r3
   16358:	beq	1654c <_obstack_memory_used@@Base+0x2324>
   1635c:	ldr	r4, [r5, #12]
   16360:	ands	r4, r4, #4
   16364:	bne	16388 <_obstack_memory_used@@Base+0x2160>
   16368:	add	r6, r5, #24
   1636c:	mov	r8, r3
   16370:	b	163b0 <_obstack_memory_used@@Base+0x2188>
   16374:	ldr	r3, [pc, #1576]	; 169a4 <_obstack_memory_used@@Base+0x277c>
   16378:	ldr	r2, [pc, #1576]	; 169a8 <_obstack_memory_used@@Base+0x2780>
   1637c:	ldr	r1, [pc, #1576]	; 169ac <_obstack_memory_used@@Base+0x2784>
   16380:	ldr	r0, [pc, #1576]	; 169b0 <_obstack_memory_used@@Base+0x2788>
   16384:	bl	113b8 <__assert_fail@plt>
   16388:	ldr	r3, [pc, #1556]	; 169a4 <_obstack_memory_used@@Base+0x277c>
   1638c:	mov	r2, #460	; 0x1cc
   16390:	ldr	r1, [pc, #1556]	; 169ac <_obstack_memory_used@@Base+0x2784>
   16394:	ldr	r0, [pc, #1560]	; 169b4 <_obstack_memory_used@@Base+0x278c>
   16398:	bl	113b8 <__assert_fail@plt>
   1639c:	ldr	r2, [fp, #4]
   163a0:	add	r2, r2, #1
   163a4:	str	r2, [fp, #4]
   163a8:	b	163d8 <_obstack_memory_used@@Base+0x21b0>
   163ac:	add	r6, r6, #24
   163b0:	mov	r3, r6
   163b4:	ldr	r2, [r6, #-20]	; 0xffffffec
   163b8:	cmp	r2, #0
   163bc:	bne	163cc <_obstack_memory_used@@Base+0x21a4>
   163c0:	ldr	r2, [r6, #-24]	; 0xffffffe8
   163c4:	cmp	r2, #0
   163c8:	beq	16410 <_obstack_memory_used@@Base+0x21e8>
   163cc:	ldr	r2, [r3, #-12]
   163d0:	tst	r2, #4
   163d4:	beq	1639c <_obstack_memory_used@@Base+0x2174>
   163d8:	ldr	r2, [r3, #-12]
   163dc:	tst	r2, #8
   163e0:	bne	163ac <_obstack_memory_used@@Base+0x2184>
   163e4:	ldr	r7, [r3, #-20]	; 0xffffffec
   163e8:	sub	r3, r7, #1
   163ec:	cmp	r3, #254	; 0xfe
   163f0:	bhi	163ac <_obstack_memory_used@@Base+0x2184>
   163f4:	bl	11250 <__ctype_b_loc@plt>
   163f8:	ldr	r3, [r0]
   163fc:	lsl	r7, r7, #1
   16400:	ldrh	r3, [r3, r7]
   16404:	tst	r3, #16384	; 0x4000
   16408:	addne	r8, r8, #1
   1640c:	b	163ac <_obstack_memory_used@@Base+0x2184>
   16410:	ldr	r2, [r6, #-8]
   16414:	cmp	r2, #0
   16418:	bne	163cc <_obstack_memory_used@@Base+0x21a4>
   1641c:	ldr	r2, [r6, #-4]
   16420:	cmp	r2, #0
   16424:	bne	163cc <_obstack_memory_used@@Base+0x21a4>
   16428:	ldr	r0, [fp, #4]
   1642c:	rsb	r0, r0, r0, lsl #3
   16430:	lsl	r0, r0, #2
   16434:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   16438:	str	r0, [fp]
   1643c:	add	r0, r8, #1
   16440:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   16444:	str	r0, [fp, #8]
   16448:	ldr	r8, [fp]
   1644c:	cmp	r0, #0
   16450:	cmpne	r8, #0
   16454:	bne	1646c <_obstack_memory_used@@Base+0x2244>
   16458:	ldr	r3, [pc, #1348]	; 169a4 <_obstack_memory_used@@Base+0x277c>
   1645c:	ldr	r2, [pc, #1364]	; 169b8 <_obstack_memory_used@@Base+0x2790>
   16460:	ldr	r1, [pc, #1348]	; 169ac <_obstack_memory_used@@Base+0x2784>
   16464:	ldr	r0, [pc, #1360]	; 169bc <_obstack_memory_used@@Base+0x2794>
   16468:	bl	113b8 <__assert_fail@plt>
   1646c:	ldr	r2, [fp, #4]
   16470:	ldr	r3, [pc, #1352]	; 169c0 <_obstack_memory_used@@Base+0x2798>
   16474:	cmp	r2, r3
   16478:	addls	r8, r8, #28
   1647c:	movls	r7, r0
   16480:	movls	sl, #0
   16484:	bls	164d0 <_obstack_memory_used@@Base+0x22a8>
   16488:	ldr	r3, [pc, #1300]	; 169a4 <_obstack_memory_used@@Base+0x277c>
   1648c:	mov	r2, #476	; 0x1dc
   16490:	ldr	r1, [pc, #1300]	; 169ac <_obstack_memory_used@@Base+0x2784>
   16494:	ldr	r0, [pc, #1320]	; 169c4 <_obstack_memory_used@@Base+0x279c>
   16498:	bl	113b8 <__assert_fail@plt>
   1649c:	ldr	r3, [r5, #4]
   164a0:	cmp	r3, #0
   164a4:	addeq	r9, r4, #1
   164a8:	movne	r9, r4
   164ac:	b	16514 <_obstack_memory_used@@Base+0x22ec>
   164b0:	ldr	r3, [r5, #16]
   164b4:	cmp	r3, #0
   164b8:	bne	168c0 <_obstack_memory_used@@Base+0x2698>
   164bc:	ldr	r3, [r5, #20]
   164c0:	cmp	r3, #0
   164c4:	bne	168c0 <_obstack_memory_used@@Base+0x2698>
   164c8:	add	r8, r8, #28
   164cc:	mov	r4, r9
   164d0:	ldr	r3, [r5, #4]
   164d4:	cmp	r3, #0
   164d8:	bne	164e8 <_obstack_memory_used@@Base+0x22c0>
   164dc:	ldr	r3, [r5]
   164e0:	cmp	r3, #0
   164e4:	beq	1652c <_obstack_memory_used@@Base+0x2304>
   164e8:	mov	r6, r8
   164ec:	str	r5, [r8, #-28]	; 0xffffffe4
   164f0:	str	sl, [r8, #-24]	; 0xffffffe8
   164f4:	str	r7, [r8, #-20]	; 0xffffffec
   164f8:	ldr	r9, [r5, #20]
   164fc:	cmp	r9, #0
   16500:	bne	16514 <_obstack_memory_used@@Base+0x22ec>
   16504:	ldr	r3, [r5]
   16508:	cmp	r3, #0
   1650c:	movne	r9, r4
   16510:	beq	1649c <_obstack_memory_used@@Base+0x2274>
   16514:	str	r9, [r6, #-16]
   16518:	ldr	r3, [sp, #28]
   1651c:	str	r3, [r6, #-12]
   16520:	ldr	r3, [sp, #24]
   16524:	str	r3, [r6, #-8]
   16528:	b	168cc <_obstack_memory_used@@Base+0x26a4>
   1652c:	ldr	r3, [r5, #16]
   16530:	cmp	r3, #0
   16534:	bne	164e8 <_obstack_memory_used@@Base+0x22c0>
   16538:	ldr	r3, [r5, #20]
   1653c:	cmp	r3, #0
   16540:	bne	164e8 <_obstack_memory_used@@Base+0x22c0>
   16544:	mov	r3, #0
   16548:	strb	r3, [r7]
   1654c:	ldr	r3, [sp, #8]
   16550:	cmp	r3, #0
   16554:	beq	16890 <_obstack_memory_used@@Base+0x2668>
   16558:	ldr	r3, [r3]
   1655c:	cmp	r3, #0
   16560:	beq	16890 <_obstack_memory_used@@Base+0x2668>
   16564:	add	r3, fp, #12
   16568:	str	r3, [sp, #44]	; 0x2c
   1656c:	str	fp, [sp, #20]
   16570:	b	16600 <_obstack_memory_used@@Base+0x23d8>
   16574:	ldr	r1, [sp, #28]
   16578:	b	16680 <_obstack_memory_used@@Base+0x2458>
   1657c:	mov	r2, r3
   16580:	ldr	r3, [r2, #24]
   16584:	cmp	r3, #0
   16588:	bne	1657c <_obstack_memory_used@@Base+0x2354>
   1658c:	add	r2, r2, #24
   16590:	ldr	r1, [sp, #16]
   16594:	ldr	r3, [r1, #12]
   16598:	str	r3, [r2]
   1659c:	mov	r2, #0
   165a0:	str	r2, [r1, #12]
   165a4:	ldr	r3, [r1, #4]
   165a8:	cmp	r3, r2
   165ac:	beq	165e4 <_obstack_memory_used@@Base+0x23bc>
   165b0:	ldr	r0, [sp, #20]
   165b4:	ldr	r2, [r0, #4]
   165b8:	cmp	r2, #0
   165bc:	bne	166a8 <_obstack_memory_used@@Base+0x2480>
   165c0:	str	r3, [r0, #4]
   165c4:	mov	r2, r1
   165c8:	ldr	r3, [r1]
   165cc:	str	r3, [r0]
   165d0:	ldr	r3, [r2, #8]
   165d4:	str	r3, [r0, #8]
   165d8:	mov	r3, r2
   165dc:	mov	r2, #0
   165e0:	str	r2, [r3, #4]
   165e4:	ldr	r0, [sp, #16]
   165e8:	bl	151d0 <_obstack_memory_used@@Base+0xfa8>
   165ec:	ldr	r2, [sp, #8]
   165f0:	ldr	r3, [r2, #16]!
   165f4:	str	r2, [sp, #8]
   165f8:	cmp	r3, #0
   165fc:	beq	1688c <_obstack_memory_used@@Base+0x2664>
   16600:	ldr	r3, [sp, #8]
   16604:	ldr	r4, [r3, #12]
   16608:	cmp	r4, #0
   1660c:	bne	1661c <_obstack_memory_used@@Base+0x23f4>
   16610:	ldr	r3, [r3, #8]
   16614:	cmp	r3, #0
   16618:	beq	16574 <_obstack_memory_used@@Base+0x234c>
   1661c:	ldr	r2, [sp, #8]
   16620:	ldr	r5, [r2, #8]
   16624:	ldr	r7, [sp, #24]
   16628:	ldr	r3, [r7, #16]
   1662c:	sub	r3, r2, r3
   16630:	asr	r6, r3, #4
   16634:	mov	r0, #28
   16638:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   1663c:	subs	r1, r0, #0
   16640:	beq	16680 <_obstack_memory_used@@Base+0x2458>
   16644:	str	r4, [r1, #8]
   16648:	str	r5, [r1]
   1664c:	str	r6, [r1, #4]
   16650:	ldr	r3, [sp, #28]
   16654:	str	r3, [r1, #12]
   16658:	str	r7, [r1, #16]
   1665c:	cmp	r3, #0
   16660:	ldrne	r3, [r3, #20]
   16664:	addne	r3, r3, #1
   16668:	moveq	r3, #0
   1666c:	str	r3, [r1, #20]
   16670:	ldr	r2, [sp, #20]
   16674:	ldr	r3, [r2, #12]
   16678:	str	r3, [r1, #24]
   1667c:	str	r1, [r2, #12]
   16680:	ldr	r3, [sp, #8]
   16684:	ldr	r0, [r3]
   16688:	bl	1631c <_obstack_memory_used@@Base+0x20f4>
   1668c:	str	r0, [sp, #16]
   16690:	ldr	r3, [sp, #20]
   16694:	ldr	r2, [r3, #12]
   16698:	cmp	r2, #0
   1669c:	ldreq	r2, [sp, #44]	; 0x2c
   166a0:	bne	16580 <_obstack_memory_used@@Base+0x2358>
   166a4:	b	16590 <_obstack_memory_used@@Base+0x2368>
   166a8:	add	r3, r3, r2
   166ac:	str	r3, [sp, #36]	; 0x24
   166b0:	rsb	r0, r3, r3, lsl #3
   166b4:	lsl	r0, r0, #2
   166b8:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   166bc:	mov	r4, r0
   166c0:	str	r0, [sp, #32]
   166c4:	ldr	r3, [sp, #20]
   166c8:	ldr	r0, [r3, #8]
   166cc:	bl	11268 <strlen@plt>
   166d0:	mov	r6, r0
   166d4:	ldr	r3, [sp, #16]
   166d8:	ldr	r0, [r3, #8]
   166dc:	bl	11268 <strlen@plt>
   166e0:	add	r0, r6, r0
   166e4:	add	r0, r0, #1
   166e8:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   166ec:	mov	sl, r0
   166f0:	cmp	r4, #0
   166f4:	cmpne	r0, #0
   166f8:	beq	167c4 <_obstack_memory_used@@Base+0x259c>
   166fc:	ldr	r3, [sp, #36]	; 0x24
   16700:	ldr	r2, [pc, #696]	; 169c0 <_obstack_memory_used@@Base+0x2798>
   16704:	cmp	r3, r2
   16708:	bhi	167d8 <_obstack_memory_used@@Base+0x25b0>
   1670c:	ldr	r5, [sp, #20]
   16710:	ldr	r2, [r5]
   16714:	mov	r1, r2
   16718:	str	r2, [sp, #40]	; 0x28
   1671c:	ldr	r4, [r5, #4]
   16720:	rsb	r7, r4, r4, lsl #3
   16724:	lsl	r7, r7, #2
   16728:	mov	r2, r7
   1672c:	ldr	r8, [sp, #32]
   16730:	mov	r0, r8
   16734:	bl	11244 <mempcpy@plt>
   16738:	ldr	r3, [sp, #16]
   1673c:	ldr	r1, [r3, #4]
   16740:	str	r1, [sp, #4]
   16744:	rsb	r2, r1, r1, lsl #3
   16748:	lsl	r2, r2, #2
   1674c:	ldr	r1, [r3]
   16750:	bl	1116c <memcpy@plt>
   16754:	ldr	r5, [r5, #8]
   16758:	mov	r2, r6
   1675c:	mov	r1, r5
   16760:	mov	r0, sl
   16764:	bl	1116c <memcpy@plt>
   16768:	cmp	r4, #0
   1676c:	beq	167ec <_obstack_memory_used@@Base+0x25c4>
   16770:	mov	r2, r8
   16774:	ldr	r3, [r2, #8]
   16778:	sub	r3, r3, r5
   1677c:	add	r3, sl, r3
   16780:	str	r3, [r2, #8]
   16784:	add	r2, r2, #28
   16788:	subs	r4, r4, #1
   1678c:	bne	16774 <_obstack_memory_used@@Base+0x254c>
   16790:	ldr	r3, [sp, #32]
   16794:	add	r7, r3, r7
   16798:	add	r3, sl, r6
   1679c:	str	r3, [sp, #12]
   167a0:	ldr	r2, [sp, #16]
   167a4:	ldr	r8, [r2, #8]
   167a8:	ldr	r2, [sp, #4]
   167ac:	cmp	r2, #0
   167b0:	beq	16854 <_obstack_memory_used@@Base+0x262c>
   167b4:	add	r9, r7, #28
   167b8:	mov	fp, r3
   167bc:	sub	r7, r3, #1
   167c0:	b	1683c <_obstack_memory_used@@Base+0x2614>
   167c4:	ldr	r3, [pc, #508]	; 169c8 <_obstack_memory_used@@Base+0x27a0>
   167c8:	ldr	r2, [pc, #508]	; 169cc <_obstack_memory_used@@Base+0x27a4>
   167cc:	ldr	r1, [pc, #472]	; 169ac <_obstack_memory_used@@Base+0x2784>
   167d0:	ldr	r0, [pc, #504]	; 169d0 <_obstack_memory_used@@Base+0x27a8>
   167d4:	bl	113b8 <__assert_fail@plt>
   167d8:	ldr	r3, [pc, #488]	; 169c8 <_obstack_memory_used@@Base+0x27a0>
   167dc:	mov	r2, #972	; 0x3cc
   167e0:	ldr	r1, [pc, #452]	; 169ac <_obstack_memory_used@@Base+0x2784>
   167e4:	ldr	r0, [pc, #488]	; 169d4 <_obstack_memory_used@@Base+0x27ac>
   167e8:	bl	113b8 <__assert_fail@plt>
   167ec:	ldr	r7, [sp, #32]
   167f0:	b	16798 <_obstack_memory_used@@Base+0x2570>
   167f4:	ldr	r3, [sp, #12]
   167f8:	cmp	sl, r3
   167fc:	bcs	16994 <_obstack_memory_used@@Base+0x276c>
   16800:	ldrb	r3, [sl]
   16804:	cmp	r3, r1
   16808:	beq	1699c <_obstack_memory_used@@Base+0x2774>
   1680c:	mov	r3, sl
   16810:	cmp	r7, r3
   16814:	beq	16994 <_obstack_memory_used@@Base+0x276c>
   16818:	ldrb	r2, [r3, #1]!
   1681c:	cmp	r2, r1
   16820:	bne	16810 <_obstack_memory_used@@Base+0x25e8>
   16824:	b	1699c <_obstack_memory_used@@Base+0x2774>
   16828:	add	r9, r9, #28
   1682c:	ldr	r3, [sp, #4]
   16830:	subs	r3, r3, #1
   16834:	str	r3, [sp, #4]
   16838:	beq	16858 <_obstack_memory_used@@Base+0x2630>
   1683c:	str	fp, [r9, #-20]	; 0xffffffec
   16840:	ldr	r5, [r9, #-24]	; 0xffffffe8
   16844:	ldr	r4, [r9, #-28]	; 0xffffffe4
   16848:	cmp	r5, #0
   1684c:	bne	1695c <_obstack_memory_used@@Base+0x2734>
   16850:	b	16828 <_obstack_memory_used@@Base+0x2600>
   16854:	ldr	fp, [sp, #12]
   16858:	mov	r3, #0
   1685c:	strb	r3, [fp]
   16860:	ldr	r0, [sp, #40]	; 0x28
   16864:	bl	13dd8 <argp_parse@@Base+0xbf4>
   16868:	ldr	r4, [sp, #20]
   1686c:	ldr	r0, [r4, #8]
   16870:	bl	13dd8 <argp_parse@@Base+0xbf4>
   16874:	ldr	r2, [sp, #32]
   16878:	str	r2, [r4]
   1687c:	ldr	r2, [sp, #36]	; 0x24
   16880:	str	r2, [r4, #4]
   16884:	str	sl, [r4, #8]
   16888:	b	165e4 <_obstack_memory_used@@Base+0x23bc>
   1688c:	ldr	fp, [sp, #20]
   16890:	mov	r0, fp
   16894:	add	sp, sp, #52	; 0x34
   16898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1689c:	strb	r4, [r7]
   168a0:	add	r7, r7, #1
   168a4:	add	r5, r5, #24
   168a8:	ldr	r3, [r5, #4]
   168ac:	cmp	r3, #0
   168b0:	bne	168c0 <_obstack_memory_used@@Base+0x2698>
   168b4:	ldr	r3, [r5]
   168b8:	cmp	r3, #0
   168bc:	beq	164b0 <_obstack_memory_used@@Base+0x2288>
   168c0:	ldr	r3, [r5, #12]
   168c4:	tst	r3, #4
   168c8:	beq	164c8 <_obstack_memory_used@@Base+0x22a0>
   168cc:	ldr	r3, [r6, #-24]	; 0xffffffe8
   168d0:	add	r3, r3, #1
   168d4:	str	r3, [r6, #-24]	; 0xffffffe8
   168d8:	ldr	r3, [r5, #12]
   168dc:	tst	r3, #8
   168e0:	bne	168a4 <_obstack_memory_used@@Base+0x267c>
   168e4:	ldr	r4, [r5, #4]
   168e8:	sub	r3, r4, #1
   168ec:	cmp	r3, #254	; 0xfe
   168f0:	bhi	168a4 <_obstack_memory_used@@Base+0x267c>
   168f4:	bl	11250 <__ctype_b_loc@plt>
   168f8:	ldr	r2, [r0]
   168fc:	lsl	r3, r4, #1
   16900:	ldrh	r3, [r2, r3]
   16904:	tst	r3, #16384	; 0x4000
   16908:	beq	168a4 <_obstack_memory_used@@Base+0x267c>
   1690c:	uxtb	r4, r4
   16910:	ldr	r3, [fp, #8]
   16914:	cmp	r3, r7
   16918:	bcs	1689c <_obstack_memory_used@@Base+0x2674>
   1691c:	ldrb	r2, [r3]
   16920:	cmp	r2, r4
   16924:	beq	168a4 <_obstack_memory_used@@Base+0x267c>
   16928:	sub	r1, r7, #1
   1692c:	cmp	r3, r1
   16930:	beq	1689c <_obstack_memory_used@@Base+0x2674>
   16934:	ldrb	r2, [r3, #1]!
   16938:	cmp	r2, r4
   1693c:	bne	1692c <_obstack_memory_used@@Base+0x2704>
   16940:	b	168a4 <_obstack_memory_used@@Base+0x267c>
   16944:	ldrb	r1, [r8]
   16948:	cmp	r1, r6
   1694c:	beq	167f4 <_obstack_memory_used@@Base+0x25cc>
   16950:	add	r4, r4, #24
   16954:	subs	r5, r5, #1
   16958:	beq	16828 <_obstack_memory_used@@Base+0x2600>
   1695c:	ldr	r3, [r4, #12]
   16960:	tst	r3, #8
   16964:	bne	16950 <_obstack_memory_used@@Base+0x2728>
   16968:	ldr	r6, [r4, #4]
   1696c:	sub	r3, r6, #1
   16970:	cmp	r3, #254	; 0xfe
   16974:	bhi	16950 <_obstack_memory_used@@Base+0x2728>
   16978:	bl	11250 <__ctype_b_loc@plt>
   1697c:	ldr	r2, [r0]
   16980:	lsl	r3, r6, #1
   16984:	ldrh	r3, [r2, r3]
   16988:	tst	r3, #16384	; 0x4000
   1698c:	bne	16944 <_obstack_memory_used@@Base+0x271c>
   16990:	b	16950 <_obstack_memory_used@@Base+0x2728>
   16994:	strb	r1, [fp]
   16998:	add	fp, fp, #1
   1699c:	add	r8, r8, #1
   169a0:	b	16950 <_obstack_memory_used@@Base+0x2728>
   169a4:	ldrdeq	fp, [r1], -r0
   169a8:	andeq	r0, r0, r2, asr #3
   169ac:	andeq	fp, r1, r0, asr #25
   169b0:	andeq	fp, r1, ip, asr #25
   169b4:	ldrdeq	fp, [r1], -r0
   169b8:	ldrdeq	r0, [r0], -sl
   169bc:	andeq	fp, r1, r0, ror #25
   169c0:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   169c4:	andeq	fp, r1, r4, lsl #26
   169c8:	ldrdeq	fp, [r1], -ip
   169cc:	andeq	r0, r0, sl, asr #7
   169d0:	andeq	fp, r1, r0, asr #26
   169d4:	andeq	fp, r1, ip, asr sp

000169d8 <argp_failure@@Base>:
   169d8:	push	{r3}		; (str r3, [sp, #-4]!)
   169dc:	push	{r4, r5, r6, r7, lr}
   169e0:	sub	sp, sp, #200	; 0xc8
   169e4:	mov	r7, r1
   169e8:	mov	r6, r2
   169ec:	subs	r5, r0, #0
   169f0:	beq	16b40 <argp_failure@@Base+0x168>
   169f4:	ldr	r3, [r5, #16]
   169f8:	tst	r3, #2
   169fc:	bne	16b30 <argp_failure@@Base+0x158>
   16a00:	ldr	r4, [r5, #44]	; 0x2c
   16a04:	cmp	r4, #0
   16a08:	beq	16b30 <argp_failure@@Base+0x158>
   16a0c:	mov	r0, r4
   16a10:	bl	1131c <flockfile@plt>
   16a14:	ldr	r0, [r5, #40]	; 0x28
   16a18:	mov	r1, r4
   16a1c:	bl	110d0 <fputs_unlocked@plt>
   16a20:	ldr	r3, [sp, #220]	; 0xdc
   16a24:	cmp	r3, #0
   16a28:	beq	16a84 <argp_failure@@Base+0xac>
   16a2c:	add	r3, sp, #224	; 0xe0
   16a30:	str	r3, [sp]
   16a34:	ldr	r3, [r4, #20]
   16a38:	ldr	r2, [r4, #24]
   16a3c:	cmp	r3, r2
   16a40:	addcc	r2, r3, #1
   16a44:	strcc	r2, [r4, #20]
   16a48:	movcc	r2, #58	; 0x3a
   16a4c:	strbcc	r2, [r3]
   16a50:	bcs	16b64 <argp_failure@@Base+0x18c>
   16a54:	ldr	r3, [r4, #20]
   16a58:	ldr	r2, [r4, #24]
   16a5c:	cmp	r3, r2
   16a60:	addcc	r2, r3, #1
   16a64:	strcc	r2, [r4, #20]
   16a68:	movcc	r2, #32
   16a6c:	strbcc	r2, [r3]
   16a70:	bcs	16b74 <argp_failure@@Base+0x19c>
   16a74:	ldr	r2, [sp]
   16a78:	ldr	r1, [sp, #220]	; 0xdc
   16a7c:	mov	r0, r4
   16a80:	bl	112ec <vfprintf@plt>
   16a84:	cmp	r6, #0
   16a88:	beq	16aec <argp_failure@@Base+0x114>
   16a8c:	ldr	r3, [r4, #20]
   16a90:	ldr	r2, [r4, #24]
   16a94:	cmp	r3, r2
   16a98:	addcc	r2, r3, #1
   16a9c:	strcc	r2, [r4, #20]
   16aa0:	movcc	r2, #58	; 0x3a
   16aa4:	strbcc	r2, [r3]
   16aa8:	bcs	16b84 <argp_failure@@Base+0x1ac>
   16aac:	ldr	r3, [r4, #20]
   16ab0:	ldr	r2, [r4, #24]
   16ab4:	cmp	r3, r2
   16ab8:	addcc	r2, r3, #1
   16abc:	strcc	r2, [r4, #20]
   16ac0:	movcc	r2, #32
   16ac4:	strbcc	r2, [r3]
   16ac8:	bcs	16b94 <argp_failure@@Base+0x1bc>
   16acc:	mov	r2, #200	; 0xc8
   16ad0:	mov	r1, sp
   16ad4:	mov	r0, r6
   16ad8:	bl	112a4 <strerror_r@plt>
   16adc:	cmp	r0, #0
   16ae0:	beq	16ba4 <argp_failure@@Base+0x1cc>
   16ae4:	mov	r1, r4
   16ae8:	bl	110d0 <fputs_unlocked@plt>
   16aec:	ldr	r3, [r4, #20]
   16af0:	ldr	r2, [r4, #24]
   16af4:	cmp	r3, r2
   16af8:	addcc	r2, r3, #1
   16afc:	strcc	r2, [r4, #20]
   16b00:	movcc	r2, #10
   16b04:	strbcc	r2, [r3]
   16b08:	bcs	16bbc <argp_failure@@Base+0x1e4>
   16b0c:	mov	r0, r4
   16b10:	bl	111b4 <funlockfile@plt>
   16b14:	cmp	r7, #0
   16b18:	beq	16b30 <argp_failure@@Base+0x158>
   16b1c:	cmp	r5, #0
   16b20:	beq	16bcc <argp_failure@@Base+0x1f4>
   16b24:	ldr	r3, [r5, #16]
   16b28:	tst	r3, #32
   16b2c:	beq	16bcc <argp_failure@@Base+0x1f4>
   16b30:	add	sp, sp, #200	; 0xc8
   16b34:	pop	{r4, r5, r6, r7, lr}
   16b38:	add	sp, sp, #4
   16b3c:	bx	lr
   16b40:	ldr	r3, [pc, #140]	; 16bd4 <argp_failure@@Base+0x1fc>
   16b44:	ldr	r4, [r3]
   16b48:	cmp	r4, #0
   16b4c:	beq	16b30 <argp_failure@@Base+0x158>
   16b50:	mov	r0, r4
   16b54:	bl	1131c <flockfile@plt>
   16b58:	ldr	r3, [pc, #120]	; 16bd8 <argp_failure@@Base+0x200>
   16b5c:	ldr	r0, [r3]
   16b60:	b	16a18 <argp_failure@@Base+0x40>
   16b64:	mov	r1, #58	; 0x3a
   16b68:	mov	r0, r4
   16b6c:	bl	112d4 <__overflow@plt>
   16b70:	b	16a54 <argp_failure@@Base+0x7c>
   16b74:	mov	r1, #32
   16b78:	mov	r0, r4
   16b7c:	bl	112d4 <__overflow@plt>
   16b80:	b	16a74 <argp_failure@@Base+0x9c>
   16b84:	mov	r1, #58	; 0x3a
   16b88:	mov	r0, r4
   16b8c:	bl	112d4 <__overflow@plt>
   16b90:	b	16aac <argp_failure@@Base+0xd4>
   16b94:	mov	r1, #32
   16b98:	mov	r0, r4
   16b9c:	bl	112d4 <__overflow@plt>
   16ba0:	b	16acc <argp_failure@@Base+0xf4>
   16ba4:	mov	r0, r6
   16ba8:	bl	11220 <strerror@plt>
   16bac:	ldr	r3, [pc, #40]	; 16bdc <argp_failure@@Base+0x204>
   16bb0:	cmp	r0, #0
   16bb4:	moveq	r0, r3
   16bb8:	b	16ae4 <argp_failure@@Base+0x10c>
   16bbc:	mov	r1, #10
   16bc0:	mov	r0, r4
   16bc4:	bl	112d4 <__overflow@plt>
   16bc8:	b	16b0c <argp_failure@@Base+0x134>
   16bcc:	mov	r0, r7
   16bd0:	bl	1125c <exit@plt>
   16bd4:			; <UNDEFINED> instruction: 0x000308b8
   16bd8:			; <UNDEFINED> instruction: 0x000308b0
   16bdc:	muleq	r1, r0, sp
   16be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16be4:	add	fp, sp, #32
   16be8:	sub	sp, sp, #108	; 0x6c
   16bec:	str	r0, [fp, #-112]	; 0xffffff90
   16bf0:	str	r1, [fp, #-100]	; 0xffffff9c
   16bf4:	str	r3, [fp, #-104]	; 0xffffff98
   16bf8:	subs	r3, r2, #0
   16bfc:	str	r3, [fp, #-132]	; 0xffffff7c
   16c00:	beq	17c6c <argp_failure@@Base+0x1294>
   16c04:	mov	r0, r3
   16c08:	bl	1131c <flockfile@plt>
   16c0c:	ldr	r3, [pc, #3772]	; 17ad0 <argp_failure@@Base+0x10f8>
   16c10:	ldr	r3, [r3, #36]	; 0x24
   16c14:	str	r3, [fp, #-108]	; 0xffffff94
   16c18:	cmp	r3, #0
   16c1c:	beq	16cf4 <argp_failure@@Base+0x31c>
   16c20:	mov	r3, #0
   16c24:	ldr	r2, [pc, #3748]	; 17ad0 <argp_failure@@Base+0x10f8>
   16c28:	ldr	r2, [r2, #32]
   16c2c:	mov	r1, r3
   16c30:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16c34:	bl	18bb4 <argp_error@@Base+0xd60>
   16c38:	subs	sl, r0, #0
   16c3c:	beq	170a0 <argp_failure@@Base+0x6c8>
   16c40:	ldr	r3, [fp, #-104]	; 0xffffff98
   16c44:	tst	r3, #11
   16c48:	moveq	r3, #0
   16c4c:	streq	r3, [fp, #-108]	; 0xffffff94
   16c50:	bne	170ac <argp_failure@@Base+0x6d4>
   16c54:	ldr	r3, [fp, #-104]	; 0xffffff98
   16c58:	tst	r3, #3
   16c5c:	moveq	r4, #0
   16c60:	bne	17130 <argp_failure@@Base+0x758>
   16c64:	ldr	r3, [fp, #-104]	; 0xffffff98
   16c68:	tst	r3, #16
   16c6c:	bne	1732c <argp_failure@@Base+0x954>
   16c70:	ldr	r3, [fp, #-104]	; 0xffffff98
   16c74:	tst	r3, #4
   16c78:	bne	17354 <argp_failure@@Base+0x97c>
   16c7c:	ldr	r3, [fp, #-104]	; 0xffffff98
   16c80:	tst	r3, #8
   16c84:	beq	17be0 <argp_failure@@Base+0x1208>
   16c88:	ldr	r3, [fp, #-108]	; 0xffffff94
   16c8c:	ldr	r3, [r3, #4]
   16c90:	cmp	r3, #0
   16c94:	beq	17be0 <argp_failure@@Base+0x1208>
   16c98:	cmp	r4, #0
   16c9c:	beq	16cc4 <argp_failure@@Base+0x2ec>
   16ca0:	ldr	r2, [sl, #28]
   16ca4:	ldr	r3, [sl, #32]
   16ca8:	cmp	r2, r3
   16cac:	bcs	17370 <argp_failure@@Base+0x998>
   16cb0:	ldr	r3, [sl, #28]
   16cb4:	add	r2, r3, #1
   16cb8:	str	r2, [sl, #28]
   16cbc:	mov	r2, #10
   16cc0:	strb	r2, [r3]
   16cc4:	mov	r3, #0
   16cc8:	str	r3, [fp, #-88]	; 0xffffffa8
   16ccc:	str	r3, [fp, #-84]	; 0xffffffac
   16cd0:	str	r3, [fp, #-80]	; 0xffffffb0
   16cd4:	ldr	r3, [fp, #-108]	; 0xffffff94
   16cd8:	ldr	r2, [r3]
   16cdc:	str	r2, [fp, #-96]	; 0xffffffa0
   16ce0:	ldr	r3, [r3, #4]
   16ce4:	str	r3, [fp, #-120]	; 0xffffff88
   16ce8:	cmp	r3, #0
   16cec:	bne	17758 <argp_failure@@Base+0xd80>
   16cf0:	b	17bdc <argp_failure@@Base+0x1204>
   16cf4:	ldr	r0, [pc, #3452]	; 17a78 <argp_failure@@Base+0x10a0>
   16cf8:	bl	111f0 <getenv@plt>
   16cfc:	mov	r9, r0
   16d00:	sub	ip, fp, #76	; 0x4c
   16d04:	ldr	lr, [pc, #3524]	; 17ad0 <argp_failure@@Base+0x10f8>
   16d08:	ldm	lr!, {r0, r1, r2, r3}
   16d0c:	stmia	ip!, {r0, r1, r2, r3}
   16d10:	ldm	lr!, {r0, r1, r2, r3}
   16d14:	stmia	ip!, {r0, r1, r2, r3}
   16d18:	ldm	lr, {r0, r1}
   16d1c:	stm	ip, {r0, r1}
   16d20:	cmp	r9, #0
   16d24:	ldrne	sl, [pc, #3408]	; 17a7c <argp_failure@@Base+0x10a4>
   16d28:	addne	r8, sl, #168	; 0xa8
   16d2c:	bne	16fd0 <argp_failure@@Base+0x5f8>
   16d30:	b	16c20 <argp_failure@@Base+0x248>
   16d34:	mov	r5, r3
   16d38:	mov	r9, r5
   16d3c:	mov	r3, r5
   16d40:	ldrb	r0, [r3], #1
   16d44:	lsl	r2, r0, #1
   16d48:	ldrh	r2, [r1, r2]
   16d4c:	tst	r2, #8192	; 0x2000
   16d50:	bne	16d34 <argp_failure@@Base+0x35c>
   16d54:	tst	r2, #1024	; 0x400
   16d58:	beq	16fc8 <argp_failure@@Base+0x5f0>
   16d5c:	cmp	r0, #95	; 0x5f
   16d60:	cmpne	r0, #45	; 0x2d
   16d64:	moveq	r3, #1
   16d68:	movne	r3, #0
   16d6c:	lsl	r2, r2, #28
   16d70:	orrs	r3, r3, r2, lsr #31
   16d74:	beq	17cf0 <argp_failure@@Base+0x1318>
   16d78:	mov	r4, r5
   16d7c:	ldrb	r3, [r4, #1]!
   16d80:	lsl	r2, r3, #1
   16d84:	ldrh	r2, [r1, r2]
   16d88:	lsl	r2, r2, #28
   16d8c:	cmp	r3, #95	; 0x5f
   16d90:	cmpne	r3, #45	; 0x2d
   16d94:	moveq	r3, #1
   16d98:	movne	r3, #0
   16d9c:	orrs	r3, r3, r2, lsr #31
   16da0:	bne	16d7c <argp_failure@@Base+0x3a4>
   16da4:	sub	r5, r4, r5
   16da8:	ldrb	r3, [r4]
   16dac:	lsl	r2, r3, #1
   16db0:	ldrh	r2, [r1, r2]
   16db4:	tst	r2, #8192	; 0x2000
   16db8:	beq	16dd0 <argp_failure@@Base+0x3f8>
   16dbc:	ldrb	r3, [r4, #1]!
   16dc0:	lsl	r2, r3, #1
   16dc4:	ldrh	r2, [r1, r2]
   16dc8:	tst	r2, #8192	; 0x2000
   16dcc:	bne	16dbc <argp_failure@@Base+0x3e4>
   16dd0:	cmp	r3, #44	; 0x2c
   16dd4:	cmpne	r3, #0
   16dd8:	beq	17d08 <argp_failure@@Base+0x1330>
   16ddc:	cmp	r3, #61	; 0x3d
   16de0:	beq	16e08 <argp_failure@@Base+0x430>
   16de4:	ldrb	r3, [r4]
   16de8:	lsl	r3, r3, #1
   16dec:	ldrh	r3, [r1, r3]
   16df0:	tst	r3, #2048	; 0x800
   16df4:	bne	16e88 <argp_failure@@Base+0x4b0>
   16df8:	ldr	r3, [fp, #-108]	; 0xffffff94
   16dfc:	str	r3, [fp, #-96]	; 0xffffffa0
   16e00:	str	r3, [fp, #-116]	; 0xffffff8c
   16e04:	b	17d1c <argp_failure@@Base+0x1344>
   16e08:	add	r2, r4, #1
   16e0c:	ldrb	r3, [r4, #1]
   16e10:	lsl	r3, r3, #1
   16e14:	ldrh	r3, [r1, r3]
   16e18:	tst	r3, #8192	; 0x2000
   16e1c:	beq	17d00 <argp_failure@@Base+0x1328>
   16e20:	ldrb	r3, [r2, #1]!
   16e24:	lsl	r3, r3, #1
   16e28:	ldrh	r3, [r1, r3]
   16e2c:	tst	r3, #8192	; 0x2000
   16e30:	bne	16e20 <argp_failure@@Base+0x448>
   16e34:	mov	r4, r2
   16e38:	b	16de4 <argp_failure@@Base+0x40c>
   16e3c:	ldrb	r3, [r9, #1]
   16e40:	cmp	r3, #111	; 0x6f
   16e44:	movne	r3, #1
   16e48:	strne	r3, [fp, #-96]	; 0xffffffa0
   16e4c:	strne	r3, [fp, #-116]	; 0xffffff8c
   16e50:	bne	17d1c <argp_failure@@Base+0x1344>
   16e54:	ldrb	r3, [r9, #2]
   16e58:	cmp	r3, #45	; 0x2d
   16e5c:	movne	r3, #1
   16e60:	strne	r3, [fp, #-96]	; 0xffffffa0
   16e64:	strne	r3, [fp, #-116]	; 0xffffff8c
   16e68:	bne	17d1c <argp_failure@@Base+0x1344>
   16e6c:	add	r9, r9, #3
   16e70:	sub	r5, r5, #3
   16e74:	ldr	r3, [fp, #-108]	; 0xffffff94
   16e78:	str	r3, [fp, #-116]	; 0xffffff8c
   16e7c:	mov	r3, #1
   16e80:	str	r3, [fp, #-96]	; 0xffffffa0
   16e84:	b	17d1c <argp_failure@@Base+0x1344>
   16e88:	mov	r2, #10
   16e8c:	mov	r1, #0
   16e90:	mov	r0, r4
   16e94:	bl	11100 <strtol@plt>
   16e98:	str	r0, [fp, #-116]	; 0xffffff8c
   16e9c:	ldr	r2, [r6]
   16ea0:	ldrb	r3, [r4]
   16ea4:	lsl	r3, r3, #1
   16ea8:	ldrh	r3, [r2, r3]
   16eac:	tst	r3, #2048	; 0x800
   16eb0:	beq	16ec8 <argp_failure@@Base+0x4f0>
   16eb4:	ldrb	r3, [r4, #1]!
   16eb8:	lsl	r3, r3, #1
   16ebc:	ldrh	r3, [r2, r3]
   16ec0:	tst	r3, #2048	; 0x800
   16ec4:	bne	16eb4 <argp_failure@@Base+0x4dc>
   16ec8:	ldrb	r3, [r4]
   16ecc:	lsl	r3, r3, #1
   16ed0:	ldrh	r3, [r2, r3]
   16ed4:	tst	r3, #8192	; 0x2000
   16ed8:	beq	16efc <argp_failure@@Base+0x524>
   16edc:	ldrb	r3, [r4, #1]!
   16ee0:	lsl	r3, r3, #1
   16ee4:	ldrh	r3, [r2, r3]
   16ee8:	tst	r3, #8192	; 0x2000
   16eec:	bne	16edc <argp_failure@@Base+0x504>
   16ef0:	ldr	r3, [fp, #-108]	; 0xffffff94
   16ef4:	str	r3, [fp, #-96]	; 0xffffffa0
   16ef8:	b	17d1c <argp_failure@@Base+0x1344>
   16efc:	ldr	r3, [fp, #-108]	; 0xffffff94
   16f00:	str	r3, [fp, #-96]	; 0xffffffa0
   16f04:	b	17d1c <argp_failure@@Base+0x1344>
   16f08:	str	r9, [sp, #4]
   16f0c:	str	r7, [sp]
   16f10:	ldr	r3, [pc, #2920]	; 17a80 <argp_failure@@Base+0x10a8>
   16f14:	mov	r2, #0
   16f18:	mov	r1, r2
   16f1c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16f20:	bl	169d8 <argp_failure@@Base>
   16f24:	b	16f8c <argp_failure@@Base+0x5b4>
   16f28:	add	r6, r6, #16
   16f2c:	cmp	r6, r8
   16f30:	beq	16fa8 <argp_failure@@Base+0x5d0>
   16f34:	mov	r0, r6
   16f38:	bl	11268 <strlen@plt>
   16f3c:	mov	r7, r0
   16f40:	cmp	r0, r5
   16f44:	bne	16f28 <argp_failure@@Base+0x550>
   16f48:	mov	r2, r5
   16f4c:	mov	r1, r6
   16f50:	mov	r0, r9
   16f54:	bl	11388 <strncmp@plt>
   16f58:	cmp	r0, #0
   16f5c:	bne	16f28 <argp_failure@@Base+0x550>
   16f60:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16f64:	cmp	r3, #0
   16f68:	beq	16f78 <argp_failure@@Base+0x5a0>
   16f6c:	ldrb	r3, [r6, #14]
   16f70:	cmp	r3, #0
   16f74:	beq	16f08 <argp_failure@@Base+0x530>
   16f78:	ldrb	r3, [r6, #15]
   16f7c:	sub	r2, fp, #36	; 0x24
   16f80:	add	r3, r2, r3
   16f84:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16f88:	str	r2, [r3, #-40]	; 0xffffffd8
   16f8c:	cmp	r6, r8
   16f90:	beq	16fa8 <argp_failure@@Base+0x5d0>
   16f94:	ldrb	r3, [r4]
   16f98:	cmp	r3, #44	; 0x2c
   16f9c:	addeq	r9, r4, #1
   16fa0:	movne	r9, r4
   16fa4:	b	16fd0 <argp_failure@@Base+0x5f8>
   16fa8:	str	r9, [sp, #4]
   16fac:	str	r5, [sp]
   16fb0:	ldr	r3, [pc, #2764]	; 17a84 <argp_failure@@Base+0x10ac>
   16fb4:	mov	r2, #0
   16fb8:	mov	r1, r2
   16fbc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16fc0:	bl	169d8 <argp_failure@@Base>
   16fc4:	b	16f94 <argp_failure@@Base+0x5bc>
   16fc8:	cmp	r0, #0
   16fcc:	bne	16ff0 <argp_failure@@Base+0x618>
   16fd0:	ldrb	r3, [r9]
   16fd4:	cmp	r3, #0
   16fd8:	beq	17008 <argp_failure@@Base+0x630>
   16fdc:	bl	11250 <__ctype_b_loc@plt>
   16fe0:	mov	r6, r0
   16fe4:	ldr	r1, [r0]
   16fe8:	mov	r5, r9
   16fec:	b	16d38 <argp_failure@@Base+0x360>
   16ff0:	str	r5, [sp]
   16ff4:	ldr	r3, [pc, #2700]	; 17a88 <argp_failure@@Base+0x10b0>
   16ff8:	mov	r2, #0
   16ffc:	mov	r1, r2
   17000:	ldr	r0, [fp, #-100]	; 0xffffff9c
   17004:	bl	169d8 <argp_failure@@Base>
   17008:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1700c:	ldr	r3, [pc, #2680]	; 17a8c <argp_failure@@Base+0x10b4>
   17010:	add	r1, r3, #144	; 0x90
   17014:	add	r3, r3, #16
   17018:	cmp	r3, r1
   1701c:	beq	17070 <argp_failure@@Base+0x698>
   17020:	ldrb	r2, [r3, #14]
   17024:	cmp	r2, #0
   17028:	bne	17014 <argp_failure@@Base+0x63c>
   1702c:	ldrb	r2, [r3, #15]
   17030:	cmp	r2, #32
   17034:	beq	17014 <argp_failure@@Base+0x63c>
   17038:	sub	ip, fp, #36	; 0x24
   1703c:	add	r2, ip, r2
   17040:	ldr	r2, [r2, #-40]	; 0xffffffd8
   17044:	cmp	r2, r0
   17048:	blt	17014 <argp_failure@@Base+0x63c>
   1704c:	str	r3, [sp, #4]
   17050:	ldr	r3, [pc, #2616]	; 17a90 <argp_failure@@Base+0x10b8>
   17054:	str	r3, [sp]
   17058:	ldr	r3, [pc, #2612]	; 17a94 <argp_failure@@Base+0x10bc>
   1705c:	mov	r2, #0
   17060:	mov	r1, r2
   17064:	ldr	r0, [fp, #-100]	; 0xffffff9c
   17068:	bl	169d8 <argp_failure@@Base>
   1706c:	b	16c20 <argp_failure@@Base+0x248>
   17070:	ldr	r4, [pc, #2648]	; 17ad0 <argp_failure@@Base+0x10f8>
   17074:	mov	ip, r4
   17078:	sub	lr, fp, #76	; 0x4c
   1707c:	ldm	lr!, {r0, r1, r2, r3}
   17080:	stmia	ip!, {r0, r1, r2, r3}
   17084:	ldm	lr!, {r0, r1, r2, r3}
   17088:	stmia	ip!, {r0, r1, r2, r3}
   1708c:	ldm	lr, {r0, r1}
   17090:	stm	ip, {r0, r1}
   17094:	mov	r3, #1
   17098:	str	r3, [r4, #36]	; 0x24
   1709c:	b	16c20 <argp_failure@@Base+0x248>
   170a0:	ldr	r0, [fp, #-132]	; 0xffffff7c
   170a4:	bl	111b4 <funlockfile@plt>
   170a8:	b	17c6c <argp_failure@@Base+0x1294>
   170ac:	mov	r1, #0
   170b0:	ldr	r0, [fp, #-112]	; 0xffffff90
   170b4:	bl	1631c <_obstack_memory_used@@Base+0x20f4>
   170b8:	str	r0, [fp, #-108]	; 0xffffff94
   170bc:	ldr	r1, [pc, #2516]	; 17a98 <argp_failure@@Base+0x10c0>
   170c0:	bl	15224 <_obstack_memory_used@@Base+0xffc>
   170c4:	cmp	r0, #0
   170c8:	mvnne	r3, #0
   170cc:	strne	r3, [r0, #12]
   170d0:	ldr	r1, [pc, #2500]	; 17a9c <argp_failure@@Base+0x10c4>
   170d4:	ldr	r0, [fp, #-108]	; 0xffffff94
   170d8:	bl	15224 <_obstack_memory_used@@Base+0xffc>
   170dc:	cmp	r0, #0
   170e0:	mvnne	r3, #0
   170e4:	strne	r3, [r0, #12]
   170e8:	ldr	r0, [fp, #-108]	; 0xffffff94
   170ec:	ldr	r3, [r0, #4]
   170f0:	cmp	r3, #0
   170f4:	beq	16c54 <argp_failure@@Base+0x27c>
   170f8:	ldr	r2, [r0]
   170fc:	mov	r3, #0
   17100:	str	r3, [r2, #24]
   17104:	add	r3, r3, #1
   17108:	add	r2, r2, #28
   1710c:	ldr	r1, [r0, #4]
   17110:	cmp	r3, r1
   17114:	bcc	17100 <argp_failure@@Base+0x728>
   17118:	ldr	r3, [pc, #2432]	; 17aa0 <argp_failure@@Base+0x10c8>
   1711c:	mov	r2, #28
   17120:	ldr	r0, [fp, #-108]	; 0xffffff94
   17124:	ldr	r0, [r0]
   17128:	bl	11334 <qsort@plt>
   1712c:	b	16c54 <argp_failure@@Base+0x27c>
   17130:	ldr	r0, [fp, #-112]	; 0xffffff90
   17134:	bl	152bc <_obstack_memory_used@@Base+0x1094>
   17138:	mov	r2, r0
   1713c:	add	r3, r0, #14
   17140:	bic	r3, r3, #7
   17144:	sub	sp, sp, r3
   17148:	add	r8, sp, #8
   1714c:	mov	r1, #0
   17150:	mov	r0, r8
   17154:	bl	112b0 <memset@plt>
   17158:	mov	r5, #1
   1715c:	ldr	r4, [pc, #2412]	; 17ad0 <argp_failure@@Base+0x10f8>
   17160:	ldr	r9, [pc, #2364]	; 17aa4 <argp_failure@@Base+0x10cc>
   17164:	str	r8, [fp, #-96]	; 0xffffffa0
   17168:	ldr	r8, [fp, #-104]	; 0xffffff98
   1716c:	b	1721c <argp_failure@@Base+0x844>
   17170:	mov	r0, sl
   17174:	bl	18c2c <argp_error@@Base+0xdd8>
   17178:	b	17238 <argp_failure@@Base+0x860>
   1717c:	mov	r0, sl
   17180:	bl	18c2c <argp_error@@Base+0xdd8>
   17184:	b	17280 <argp_failure@@Base+0x8a8>
   17188:	mov	r1, sl
   1718c:	ldr	r0, [fp, #-108]	; 0xffffff94
   17190:	bl	15014 <_obstack_memory_used@@Base+0xdec>
   17194:	orr	r8, r8, #2
   17198:	str	sl, [sp]
   1719c:	mov	r3, #1
   171a0:	sub	r2, fp, #76	; 0x4c
   171a4:	ldr	r1, [fp, #-100]	; 0xffffff9c
   171a8:	ldr	r0, [fp, #-112]	; 0xffffff90
   171ac:	bl	1553c <_obstack_memory_used@@Base+0x1314>
   171b0:	mov	r6, r0
   171b4:	ldr	r3, [sl, #28]
   171b8:	ldr	r2, [sl, #24]
   171bc:	sub	r3, r3, r2
   171c0:	ldr	r2, [sl, #16]
   171c4:	cmp	r3, r2
   171c8:	bhi	172f0 <argp_failure@@Base+0x918>
   171cc:	str	r7, [sl, #12]
   171d0:	ldr	r3, [sl, #28]
   171d4:	ldr	r2, [sl, #24]
   171d8:	sub	r3, r3, r2
   171dc:	ldr	r2, [sl, #16]
   171e0:	cmp	r3, r2
   171e4:	bhi	172fc <argp_failure@@Base+0x924>
   171e8:	str	r5, [sl, #4]
   171ec:	ldr	r2, [sl, #28]
   171f0:	ldr	r3, [sl, #32]
   171f4:	cmp	r2, r3
   171f8:	bcs	17308 <argp_failure@@Base+0x930>
   171fc:	ldr	r3, [sl, #28]
   17200:	add	r2, r3, #1
   17204:	str	r2, [sl, #28]
   17208:	mov	r2, #10
   1720c:	strb	r2, [r3]
   17210:	mov	r5, #0
   17214:	cmp	r6, r5
   17218:	beq	17320 <argp_failure@@Base+0x948>
   1721c:	ldr	r6, [r4, #28]
   17220:	ldr	r3, [sl, #28]
   17224:	ldr	r2, [sl, #24]
   17228:	sub	r3, r3, r2
   1722c:	ldr	r2, [sl, #16]
   17230:	cmp	r3, r2
   17234:	bhi	17170 <argp_failure@@Base+0x798>
   17238:	ldr	r7, [sl, #12]
   1723c:	str	r6, [sl, #12]
   17240:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17244:	str	r3, [fp, #-76]	; 0xffffffb4
   17248:	cmp	r5, #0
   1724c:	ldr	r3, [fp, #4]
   17250:	ldrne	r2, [pc, #2128]	; 17aa8 <argp_failure@@Base+0x10d0>
   17254:	ldreq	r2, [pc, #2128]	; 17aac <argp_failure@@Base+0x10d4>
   17258:	mov	r1, r9
   1725c:	mov	r0, sl
   17260:	bl	192c0 <argp_error@@Base+0x146c>
   17264:	ldr	r6, [r4, #28]
   17268:	ldr	r3, [sl, #28]
   1726c:	ldr	r2, [sl, #24]
   17270:	sub	r3, r3, r2
   17274:	ldr	r2, [sl, #16]
   17278:	cmp	r3, r2
   1727c:	bhi	1717c <argp_failure@@Base+0x7a4>
   17280:	ldr	r5, [sl, #4]
   17284:	str	r6, [sl, #4]
   17288:	tst	r8, #2
   1728c:	beq	17188 <argp_failure@@Base+0x7b0>
   17290:	ldr	r3, [fp, #-108]	; 0xffffff94
   17294:	ldr	r3, [r3, #4]
   17298:	cmp	r3, #0
   1729c:	beq	17198 <argp_failure@@Base+0x7c0>
   172a0:	ldr	r3, [sl, #28]
   172a4:	add	r3, r3, #12
   172a8:	ldr	r2, [sl, #32]
   172ac:	cmp	r2, r3
   172b0:	bcs	172c8 <argp_failure@@Base+0x8f0>
   172b4:	mov	r1, #12
   172b8:	mov	r0, sl
   172bc:	bl	191d0 <argp_error@@Base+0x137c>
   172c0:	cmp	r0, #0
   172c4:	beq	17198 <argp_failure@@Base+0x7c0>
   172c8:	ldr	ip, [sl, #28]
   172cc:	ldr	r3, [pc, #2012]	; 17ab0 <argp_failure@@Base+0x10d8>
   172d0:	ldm	r3!, {r0, r1, r2}
   172d4:	str	r0, [ip]
   172d8:	str	r1, [ip, #4]
   172dc:	str	r2, [ip, #8]
   172e0:	ldr	r3, [sl, #28]
   172e4:	add	r3, r3, #12
   172e8:	str	r3, [sl, #28]
   172ec:	b	17198 <argp_failure@@Base+0x7c0>
   172f0:	mov	r0, sl
   172f4:	bl	18c2c <argp_error@@Base+0xdd8>
   172f8:	b	171cc <argp_failure@@Base+0x7f4>
   172fc:	mov	r0, sl
   17300:	bl	18c2c <argp_error@@Base+0xdd8>
   17304:	b	171e8 <argp_failure@@Base+0x810>
   17308:	mov	r1, #1
   1730c:	mov	r0, sl
   17310:	bl	191d0 <argp_error@@Base+0x137c>
   17314:	cmp	r0, #0
   17318:	beq	17210 <argp_failure@@Base+0x838>
   1731c:	b	171fc <argp_failure@@Base+0x824>
   17320:	str	r8, [fp, #-104]	; 0xffffff98
   17324:	mov	r4, #1
   17328:	b	16c64 <argp_failure@@Base+0x28c>
   1732c:	str	sl, [sp, #4]
   17330:	mov	r3, #1
   17334:	str	r3, [sp]
   17338:	mov	r3, #0
   1733c:	mov	r2, r3
   17340:	ldr	r1, [fp, #-100]	; 0xffffff9c
   17344:	ldr	r0, [fp, #-112]	; 0xffffff90
   17348:	bl	15a94 <_obstack_memory_used@@Base+0x186c>
   1734c:	orr	r4, r4, r0
   17350:	b	16c70 <argp_failure@@Base+0x298>
   17354:	ldr	r3, [fp, #4]
   17358:	mov	r2, r3
   1735c:	ldr	r1, [pc, #1872]	; 17ab4 <argp_failure@@Base+0x10dc>
   17360:	mov	r0, sl
   17364:	bl	192c0 <argp_error@@Base+0x146c>
   17368:	mov	r4, #1
   1736c:	b	16c7c <argp_failure@@Base+0x2a4>
   17370:	mov	r1, #1
   17374:	mov	r0, sl
   17378:	bl	191d0 <argp_error@@Base+0x137c>
   1737c:	cmp	r0, #0
   17380:	beq	16cc4 <argp_failure@@Base+0x2ec>
   17384:	b	16cb0 <argp_failure@@Base+0x2d8>
   17388:	mov	r0, sl
   1738c:	bl	18c2c <argp_error@@Base+0xdd8>
   17390:	b	1777c <argp_failure@@Base+0xda4>
   17394:	add	r3, r3, #24
   17398:	subs	r2, r2, #1
   1739c:	beq	173c0 <argp_failure@@Base+0x9e8>
   173a0:	ldr	r1, [r3, #-24]	; 0xffffffe8
   173a4:	cmp	r1, #0
   173a8:	beq	17394 <argp_failure@@Base+0x9bc>
   173ac:	ldr	r1, [r3, #-12]
   173b0:	tst	r1, #2
   173b4:	bne	17394 <argp_failure@@Base+0x9bc>
   173b8:	mov	r3, #1
   173bc:	str	r3, [fp, #-116]	; 0xffffff8c
   173c0:	ldr	r3, [pc, #1800]	; 17ad0 <argp_failure@@Base+0x10f8>
   173c4:	ldr	r4, [r3, #8]
   173c8:	ldr	r3, [sl, #28]
   173cc:	ldr	r2, [sl, #24]
   173d0:	sub	r3, r3, r2
   173d4:	ldr	r2, [sl, #16]
   173d8:	cmp	r3, r2
   173dc:	bhi	173fc <argp_failure@@Base+0xa24>
   173e0:	str	r4, [sl, #12]
   173e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   173e8:	ldr	r5, [r3, #4]
   173ec:	cmp	r5, #0
   173f0:	beq	174f8 <argp_failure@@Base+0xb20>
   173f4:	mov	r4, r8
   173f8:	b	17d3c <argp_failure@@Base+0x1364>
   173fc:	mov	r0, sl
   17400:	bl	18c2c <argp_error@@Base+0xdd8>
   17404:	b	173e0 <argp_failure@@Base+0xa08>
   17408:	tst	r6, #2
   1740c:	beq	17418 <argp_failure@@Base+0xa40>
   17410:	add	r9, r9, #1
   17414:	b	17d30 <argp_failure@@Base+0x1358>
   17418:	sub	r1, fp, #76	; 0x4c
   1741c:	ldr	r3, [pc, #1708]	; 17ad0 <argp_failure@@Base+0x10f8>
   17420:	ldr	r0, [r3, #8]
   17424:	bl	15910 <_obstack_memory_used@@Base+0x16e8>
   17428:	ldr	r2, [sl, #28]
   1742c:	ldr	r3, [sl, #32]
   17430:	cmp	r2, r3
   17434:	bcs	174b4 <argp_failure@@Base+0xadc>
   17438:	ldr	r3, [sl, #28]
   1743c:	add	r2, r3, #1
   17440:	str	r2, [sl, #28]
   17444:	mov	r2, #45	; 0x2d
   17448:	strb	r2, [r3]
   1744c:	ldrb	r6, [r9]
   17450:	ldr	r2, [sl, #28]
   17454:	ldr	r3, [sl, #32]
   17458:	cmp	r2, r3
   1745c:	bcs	174cc <argp_failure@@Base+0xaf4>
   17460:	ldr	r3, [sl, #28]
   17464:	add	r2, r3, #1
   17468:	str	r2, [sl, #28]
   1746c:	strb	r6, [r3]
   17470:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17474:	cmp	r3, #0
   17478:	beq	1748c <argp_failure@@Base+0xab4>
   1747c:	ldr	r3, [pc, #1612]	; 17ad0 <argp_failure@@Base+0x10f8>
   17480:	ldr	r3, [r3]
   17484:	cmp	r3, #0
   17488:	beq	174e4 <argp_failure@@Base+0xb0c>
   1748c:	ldr	r2, [r8, #8]
   17490:	cmp	r2, #0
   17494:	beq	17410 <argp_failure@@Base+0xa38>
   17498:	ldr	r3, [r8, #12]
   1749c:	tst	r3, #1
   174a0:	ldrne	r1, [pc, #1552]	; 17ab8 <argp_failure@@Base+0x10e0>
   174a4:	ldreq	r1, [pc, #1552]	; 17abc <argp_failure@@Base+0x10e4>
   174a8:	mov	r0, sl
   174ac:	bl	192c0 <argp_error@@Base+0x146c>
   174b0:	b	17410 <argp_failure@@Base+0xa38>
   174b4:	mov	r1, #1
   174b8:	mov	r0, sl
   174bc:	bl	191d0 <argp_error@@Base+0x137c>
   174c0:	cmp	r0, #0
   174c4:	beq	1744c <argp_failure@@Base+0xa74>
   174c8:	b	17438 <argp_failure@@Base+0xa60>
   174cc:	mov	r1, #1
   174d0:	mov	r0, sl
   174d4:	bl	191d0 <argp_error@@Base+0x137c>
   174d8:	cmp	r0, #0
   174dc:	beq	17470 <argp_failure@@Base+0xa98>
   174e0:	b	17460 <argp_failure@@Base+0xa88>
   174e4:	ldr	r3, [r8, #8]
   174e8:	cmp	r3, #0
   174ec:	movne	r3, #1
   174f0:	strne	r3, [fp, #-80]	; 0xffffffb0
   174f4:	b	17410 <argp_failure@@Base+0xa38>
   174f8:	ldr	r3, [r8, #12]
   174fc:	tst	r3, #8
   17500:	beq	175dc <argp_failure@@Base+0xc04>
   17504:	ldr	r3, [pc, #1476]	; 17ad0 <argp_failure@@Base+0x10f8>
   17508:	ldr	r4, [r3, #16]
   1750c:	ldr	r3, [sl, #28]
   17510:	ldr	r2, [sl, #24]
   17514:	sub	r3, r3, r2
   17518:	ldr	r2, [sl, #16]
   1751c:	cmp	r3, r2
   17520:	bhi	17540 <argp_failure@@Base+0xb68>
   17524:	str	r4, [sl, #12]
   17528:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1752c:	ldr	r5, [r3, #4]
   17530:	cmp	r5, #0
   17534:	beq	17690 <argp_failure@@Base+0xcb8>
   17538:	add	r4, r8, #24
   1753c:	b	17574 <argp_failure@@Base+0xb9c>
   17540:	mov	r0, sl
   17544:	bl	18c2c <argp_error@@Base+0xdd8>
   17548:	b	17524 <argp_failure@@Base+0xb4c>
   1754c:	mov	r2, r6
   17550:	mov	r1, r7
   17554:	ldr	r0, [sl, #28]
   17558:	bl	1116c <memcpy@plt>
   1755c:	ldr	r3, [sl, #28]
   17560:	add	r6, r3, r6
   17564:	str	r6, [sl, #28]
   17568:	add	r4, r4, #24
   1756c:	subs	r5, r5, #1
   17570:	beq	17690 <argp_failure@@Base+0xcb8>
   17574:	ldr	r3, [r4, #-24]	; 0xffffffe8
   17578:	cmp	r3, #0
   1757c:	beq	17568 <argp_failure@@Base+0xb90>
   17580:	ldr	r3, [r4, #-12]
   17584:	tst	r3, #2
   17588:	bne	17568 <argp_failure@@Base+0xb90>
   1758c:	sub	r1, fp, #76	; 0x4c
   17590:	ldr	r3, [pc, #1336]	; 17ad0 <argp_failure@@Base+0x10f8>
   17594:	ldr	r0, [r3, #16]
   17598:	bl	15910 <_obstack_memory_used@@Base+0x16e8>
   1759c:	ldr	r7, [r4, #-24]	; 0xffffffe8
   175a0:	mov	r0, r7
   175a4:	bl	11268 <strlen@plt>
   175a8:	subs	r6, r0, #0
   175ac:	beq	17568 <argp_failure@@Base+0xb90>
   175b0:	ldr	r3, [sl, #28]
   175b4:	add	r3, r3, r6
   175b8:	ldr	r2, [sl, #32]
   175bc:	cmp	r2, r3
   175c0:	bcs	1754c <argp_failure@@Base+0xb74>
   175c4:	mov	r1, r6
   175c8:	mov	r0, sl
   175cc:	bl	191d0 <argp_error@@Base+0x137c>
   175d0:	cmp	r0, #0
   175d4:	beq	17568 <argp_failure@@Base+0xb90>
   175d8:	b	1754c <argp_failure@@Base+0xb74>
   175dc:	ldr	r3, [pc, #1260]	; 17ad0 <argp_failure@@Base+0x10f8>
   175e0:	ldr	r4, [r3, #12]
   175e4:	ldr	r3, [sl, #28]
   175e8:	ldr	r2, [sl, #24]
   175ec:	sub	r3, r3, r2
   175f0:	ldr	r2, [sl, #16]
   175f4:	cmp	r3, r2
   175f8:	bhi	17618 <argp_failure@@Base+0xc40>
   175fc:	str	r4, [sl, #12]
   17600:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17604:	ldr	r5, [r3, #4]
   17608:	cmp	r5, #0
   1760c:	beq	17690 <argp_failure@@Base+0xcb8>
   17610:	add	r4, r8, #24
   17614:	b	17630 <argp_failure@@Base+0xc58>
   17618:	mov	r0, sl
   1761c:	bl	18c2c <argp_error@@Base+0xdd8>
   17620:	b	175fc <argp_failure@@Base+0xc24>
   17624:	add	r4, r4, #24
   17628:	subs	r5, r5, #1
   1762c:	beq	17690 <argp_failure@@Base+0xcb8>
   17630:	ldr	r3, [r4, #-24]	; 0xffffffe8
   17634:	cmp	r3, #0
   17638:	beq	17624 <argp_failure@@Base+0xc4c>
   1763c:	ldr	r3, [r4, #-12]
   17640:	tst	r3, #2
   17644:	bne	17624 <argp_failure@@Base+0xc4c>
   17648:	sub	r1, fp, #76	; 0x4c
   1764c:	ldr	r3, [pc, #1148]	; 17ad0 <argp_failure@@Base+0x10f8>
   17650:	ldr	r0, [r3, #12]
   17654:	bl	15910 <_obstack_memory_used@@Base+0x16e8>
   17658:	ldr	r2, [r4, #-24]	; 0xffffffe8
   1765c:	ldr	r1, [pc, #1116]	; 17ac0 <argp_failure@@Base+0x10e8>
   17660:	mov	r0, sl
   17664:	bl	192c0 <argp_error@@Base+0x146c>
   17668:	ldr	r2, [r8, #8]
   1766c:	cmp	r2, #0
   17670:	beq	17624 <argp_failure@@Base+0xc4c>
   17674:	ldr	r3, [r8, #12]
   17678:	tst	r3, #1
   1767c:	ldrne	r1, [pc, #1088]	; 17ac4 <argp_failure@@Base+0x10ec>
   17680:	ldreq	r1, [pc, #1088]	; 17ac8 <argp_failure@@Base+0x10f0>
   17684:	mov	r0, sl
   17688:	bl	192c0 <argp_error@@Base+0x146c>
   1768c:	b	17624 <argp_failure@@Base+0xc4c>
   17690:	ldr	r3, [sl, #28]
   17694:	ldr	r2, [sl, #24]
   17698:	sub	r3, r3, r2
   1769c:	ldr	r2, [sl, #16]
   176a0:	cmp	r3, r2
   176a4:	bhi	177e4 <argp_failure@@Base+0xe0c>
   176a8:	mov	r3, #0
   176ac:	str	r3, [sl, #4]
   176b0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   176b4:	cmp	r3, #0
   176b8:	beq	17808 <argp_failure@@Base+0xe30>
   176bc:	ldr	r3, [r8, #12]
   176c0:	tst	r3, #8
   176c4:	bne	176f0 <argp_failure@@Base+0xd18>
   176c8:	ldr	r4, [r8, #4]
   176cc:	sub	r3, r4, #1
   176d0:	cmp	r3, #254	; 0xfe
   176d4:	bhi	176f0 <argp_failure@@Base+0xd18>
   176d8:	bl	11250 <__ctype_b_loc@plt>
   176dc:	ldr	r3, [r0]
   176e0:	lsl	r4, r4, #1
   176e4:	ldrh	r3, [r3, r4]
   176e8:	tst	r3, #16384	; 0x4000
   176ec:	bne	176fc <argp_failure@@Base+0xd24>
   176f0:	ldr	r3, [r8]
   176f4:	cmp	r3, #0
   176f8:	beq	177f0 <argp_failure@@Base+0xe18>
   176fc:	ldr	r3, [sl, #28]
   17700:	ldr	r2, [sl, #24]
   17704:	sub	r3, r3, r2
   17708:	ldr	r2, [sl, #16]
   1770c:	cmp	r3, r2
   17710:	bhi	17a60 <argp_failure@@Base+0x1088>
   17714:	ldr	r3, [fp, #-124]	; 0xffffff84
   17718:	str	r3, [sl, #4]
   1771c:	ldr	r3, [sl, #28]
   17720:	ldr	r2, [sl, #24]
   17724:	sub	r3, r3, r2
   17728:	ldr	r2, [sl, #16]
   1772c:	cmp	r3, r2
   17730:	bhi	17a6c <argp_failure@@Base+0x1094>
   17734:	ldr	r3, [fp, #-128]	; 0xffffff80
   17738:	str	r3, [sl, #12]
   1773c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17740:	add	r3, r3, #28
   17744:	str	r3, [fp, #-96]	; 0xffffffa0
   17748:	ldr	r3, [fp, #-120]	; 0xffffff88
   1774c:	subs	r3, r3, #1
   17750:	str	r3, [fp, #-120]	; 0xffffff88
   17754:	beq	17ae4 <argp_failure@@Base+0x110c>
   17758:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1775c:	ldr	r8, [r3]
   17760:	ldr	r9, [r3, #8]
   17764:	ldr	r3, [sl, #28]
   17768:	ldr	r2, [sl, #24]
   1776c:	sub	r3, r3, r2
   17770:	ldr	r2, [sl, #16]
   17774:	cmp	r3, r2
   17778:	bhi	17388 <argp_failure@@Base+0x9b0>
   1777c:	ldr	r3, [sl, #4]
   17780:	str	r3, [fp, #-124]	; 0xffffff84
   17784:	mov	r3, #0
   17788:	str	r3, [sl, #4]
   1778c:	ldr	r3, [sl, #12]
   17790:	str	r3, [fp, #-128]	; 0xffffff80
   17794:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17798:	str	r2, [fp, #-76]	; 0xffffffb4
   1779c:	str	sl, [fp, #-72]	; 0xffffffb8
   177a0:	sub	r3, fp, #88	; 0x58
   177a4:	str	r3, [fp, #-68]	; 0xffffffbc
   177a8:	mov	r3, #1
   177ac:	str	r3, [fp, #-64]	; 0xffffffc0
   177b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   177b4:	str	r3, [fp, #-60]	; 0xffffffc4
   177b8:	ldr	r3, [r8, #12]
   177bc:	ands	r3, r3, #8
   177c0:	str	r3, [fp, #-116]	; 0xffffff8c
   177c4:	movne	r3, #0
   177c8:	strne	r3, [fp, #-116]	; 0xffffff8c
   177cc:	bne	173c0 <argp_failure@@Base+0x9e8>
   177d0:	ldr	r2, [r2, #4]
   177d4:	cmp	r2, #0
   177d8:	beq	173c0 <argp_failure@@Base+0x9e8>
   177dc:	add	r3, r8, #24
   177e0:	b	173a0 <argp_failure@@Base+0x9c8>
   177e4:	mov	r0, sl
   177e8:	bl	18c2c <argp_error@@Base+0xdd8>
   177ec:	b	176a8 <argp_failure@@Base+0xcd0>
   177f0:	sub	r2, fp, #76	; 0x4c
   177f4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   177f8:	ldr	r1, [r3, #20]
   177fc:	ldr	r0, [r8, #16]
   17800:	bl	1572c <_obstack_memory_used@@Base+0x1504>
   17804:	b	17960 <argp_failure@@Base+0xf88>
   17808:	ldr	r7, [r8, #16]
   1780c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17810:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17814:	ldr	r2, [r2, #20]
   17818:	ldr	r1, [r8, #4]
   1781c:	mov	r0, r7
   17820:	bl	154f8 <_obstack_memory_used@@Base+0x12d0>
   17824:	subs	r4, r0, #0
   17828:	beq	1791c <argp_failure@@Base+0xf44>
   1782c:	ldrb	r3, [r4]
   17830:	cmp	r3, #0
   17834:	beq	17914 <argp_failure@@Base+0xf3c>
   17838:	ldr	r3, [sl, #28]
   1783c:	ldr	r2, [sl, #24]
   17840:	sub	r3, r3, r2
   17844:	ldr	r2, [sl, #16]
   17848:	cmp	r3, r2
   1784c:	bhi	1796c <argp_failure@@Base+0xf94>
   17850:	ldr	r5, [sl, #20]
   17854:	bic	r5, r5, r5, asr #31
   17858:	ldr	r3, [pc, #624]	; 17ad0 <argp_failure@@Base+0x10f8>
   1785c:	ldr	r6, [r3, #20]
   17860:	str	r6, [sl, #4]
   17864:	ldr	r3, [pc, #612]	; 17ad0 <argp_failure@@Base+0x10f8>
   17868:	ldr	r6, [r3, #20]
   1786c:	ldr	r3, [sl, #28]
   17870:	ldr	r2, [sl, #24]
   17874:	sub	r3, r3, r2
   17878:	ldr	r2, [sl, #16]
   1787c:	cmp	r3, r2
   17880:	bhi	179a8 <argp_failure@@Base+0xfd0>
   17884:	str	r6, [sl, #12]
   17888:	ldr	r3, [pc, #576]	; 17ad0 <argp_failure@@Base+0x10f8>
   1788c:	ldr	r1, [r3, #20]
   17890:	add	r3, r1, #3
   17894:	cmp	r3, r5
   17898:	bcs	179cc <argp_failure@@Base+0xff4>
   1789c:	ldr	r2, [sl, #28]
   178a0:	ldr	r3, [sl, #32]
   178a4:	cmp	r2, r3
   178a8:	bcs	179b4 <argp_failure@@Base+0xfdc>
   178ac:	ldr	r3, [sl, #28]
   178b0:	add	r2, r3, #1
   178b4:	str	r2, [sl, #28]
   178b8:	mov	r2, #10
   178bc:	strb	r2, [r3]
   178c0:	mov	r0, r4
   178c4:	bl	11268 <strlen@plt>
   178c8:	subs	r5, r0, #0
   178cc:	beq	17914 <argp_failure@@Base+0xf3c>
   178d0:	ldr	r3, [sl, #28]
   178d4:	add	r3, r3, r5
   178d8:	ldr	r2, [sl, #32]
   178dc:	cmp	r2, r3
   178e0:	bcs	178f8 <argp_failure@@Base+0xf20>
   178e4:	mov	r1, r5
   178e8:	mov	r0, sl
   178ec:	bl	191d0 <argp_error@@Base+0x137c>
   178f0:	cmp	r0, #0
   178f4:	beq	17914 <argp_failure@@Base+0xf3c>
   178f8:	mov	r2, r5
   178fc:	mov	r1, r4
   17900:	ldr	r0, [sl, #28]
   17904:	bl	1116c <memcpy@plt>
   17908:	ldr	r3, [sl, #28]
   1790c:	add	r5, r3, r5
   17910:	str	r5, [sl, #28]
   17914:	cmp	r7, r4
   17918:	bne	17a30 <argp_failure@@Base+0x1058>
   1791c:	ldr	r3, [sl, #28]
   17920:	ldr	r2, [sl, #24]
   17924:	sub	r3, r3, r2
   17928:	ldr	r2, [sl, #16]
   1792c:	cmp	r3, r2
   17930:	bhi	17a3c <argp_failure@@Base+0x1064>
   17934:	mov	r3, #0
   17938:	str	r3, [sl, #4]
   1793c:	ldr	r2, [sl, #28]
   17940:	ldr	r3, [sl, #32]
   17944:	cmp	r2, r3
   17948:	bcs	17a48 <argp_failure@@Base+0x1070>
   1794c:	ldr	r3, [sl, #28]
   17950:	add	r2, r3, #1
   17954:	str	r2, [sl, #28]
   17958:	mov	r2, #10
   1795c:	strb	r2, [r3]
   17960:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17964:	str	r3, [fp, #-88]	; 0xffffffa8
   17968:	b	176fc <argp_failure@@Base+0xd24>
   1796c:	mov	r0, sl
   17970:	bl	18c2c <argp_error@@Base+0xdd8>
   17974:	ldr	r5, [sl, #20]
   17978:	bic	r5, r5, r5, asr #31
   1797c:	ldr	r3, [pc, #332]	; 17ad0 <argp_failure@@Base+0x10f8>
   17980:	ldr	r6, [r3, #20]
   17984:	ldr	r3, [sl, #28]
   17988:	ldr	r2, [sl, #24]
   1798c:	sub	r3, r3, r2
   17990:	ldr	r2, [sl, #16]
   17994:	cmp	r3, r2
   17998:	bls	17860 <argp_failure@@Base+0xe88>
   1799c:	mov	r0, sl
   179a0:	bl	18c2c <argp_error@@Base+0xdd8>
   179a4:	b	17860 <argp_failure@@Base+0xe88>
   179a8:	mov	r0, sl
   179ac:	bl	18c2c <argp_error@@Base+0xdd8>
   179b0:	b	17884 <argp_failure@@Base+0xeac>
   179b4:	mov	r1, #1
   179b8:	mov	r0, sl
   179bc:	bl	191d0 <argp_error@@Base+0x137c>
   179c0:	cmp	r0, #0
   179c4:	beq	178c0 <argp_failure@@Base+0xee8>
   179c8:	b	178ac <argp_failure@@Base+0xed4>
   179cc:	cmp	r1, r5
   179d0:	bhi	17a24 <argp_failure@@Base+0x104c>
   179d4:	ldr	r3, [sl, #28]
   179d8:	add	r3, r3, #3
   179dc:	ldr	r2, [sl, #32]
   179e0:	cmp	r2, r3
   179e4:	bcs	179fc <argp_failure@@Base+0x1024>
   179e8:	mov	r1, #3
   179ec:	mov	r0, sl
   179f0:	bl	191d0 <argp_error@@Base+0x137c>
   179f4:	cmp	r0, #0
   179f8:	beq	178c0 <argp_failure@@Base+0xee8>
   179fc:	ldr	r3, [sl, #28]
   17a00:	ldr	r2, [pc, #196]	; 17acc <argp_failure@@Base+0x10f4>
   17a04:	ldrh	r1, [r2]
   17a08:	ldrb	r2, [r2, #2]
   17a0c:	strh	r1, [r3]
   17a10:	strb	r2, [r3, #2]
   17a14:	ldr	r3, [sl, #28]
   17a18:	add	r3, r3, #3
   17a1c:	str	r3, [sl, #28]
   17a20:	b	178c0 <argp_failure@@Base+0xee8>
   17a24:	mov	r0, sl
   17a28:	bl	15314 <_obstack_memory_used@@Base+0x10ec>
   17a2c:	b	178c0 <argp_failure@@Base+0xee8>
   17a30:	mov	r0, r4
   17a34:	bl	13dd8 <argp_parse@@Base+0xbf4>
   17a38:	b	1791c <argp_failure@@Base+0xf44>
   17a3c:	mov	r0, sl
   17a40:	bl	18c2c <argp_error@@Base+0xdd8>
   17a44:	b	17934 <argp_failure@@Base+0xf5c>
   17a48:	mov	r1, #1
   17a4c:	mov	r0, sl
   17a50:	bl	191d0 <argp_error@@Base+0x137c>
   17a54:	cmp	r0, #0
   17a58:	beq	17960 <argp_failure@@Base+0xf88>
   17a5c:	b	1794c <argp_failure@@Base+0xf74>
   17a60:	mov	r0, sl
   17a64:	bl	18c2c <argp_error@@Base+0xdd8>
   17a68:	b	17714 <argp_failure@@Base+0xd3c>
   17a6c:	mov	r0, sl
   17a70:	bl	18c2c <argp_error@@Base+0xdd8>
   17a74:	b	17734 <argp_failure@@Base+0xd5c>
   17a78:	andeq	fp, r1, r8, lsr #27
   17a7c:	ldrdeq	fp, [r1], -r0
   17a80:			; <UNDEFINED> instruction: 0x0001bdb8
   17a84:	andeq	fp, r1, r8, ror #27
   17a88:	andeq	fp, r1, r0, lsl lr
   17a8c:	andeq	fp, r1, r8, ror #23
   17a90:	andeq	fp, r1, r4, ror #28
   17a94:	andeq	fp, r1, r0, lsr lr
   17a98:	andeq	fp, r1, ip, ror #14
   17a9c:	andeq	fp, r1, ip, asr #14
   17aa0:	andeq	r6, r1, ip, lsr #32
   17aa4:	andeq	fp, r1, r4, ror lr
   17aa8:	andeq	fp, r1, ip, ror #28
   17aac:	andeq	fp, r1, ip, ror lr
   17ab0:	andeq	fp, r1, r4, lsl #29
   17ab4:	muleq	r1, r4, lr
   17ab8:	andeq	fp, r1, ip, asr #29
   17abc:	andeq	fp, r1, ip, lsl r7
   17ac0:	ldrdeq	fp, [r1], -r4
   17ac4:	ldrdeq	fp, [r1], -ip
   17ac8:	andeq	fp, r1, r4, ror #29
   17acc:	andeq	fp, r1, r8, ror #29
   17ad0:	andeq	r0, r3, r4, ror r8
   17ad4:	andeq	r0, r0, #5
   17ad8:	andeq	fp, r1, ip, ror #29
   17adc:	andeq	r0, r3, ip, lsr r9
   17ae0:	andeq	fp, r1, r0, ror #30
   17ae4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17ae8:	cmp	r3, #0
   17aec:	beq	17bdc <argp_failure@@Base+0x1204>
   17af0:	ldr	r3, [pc, #-40]	; 17ad0 <argp_failure@@Base+0x10f8>
   17af4:	ldr	r3, [r3, #4]
   17af8:	cmp	r3, #0
   17afc:	beq	17bdc <argp_failure@@Base+0x1204>
   17b00:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17b04:	cmp	r3, #0
   17b08:	ldrne	r2, [r3]
   17b0c:	moveq	r2, #0
   17b10:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17b14:	ldr	r1, [pc, #-72]	; 17ad4 <argp_failure@@Base+0x10fc>
   17b18:	ldr	r0, [pc, #-72]	; 17ad8 <argp_failure@@Base+0x1100>
   17b1c:	bl	154f8 <_obstack_memory_used@@Base+0x12d0>
   17b20:	subs	r4, r0, #0
   17b24:	beq	17bdc <argp_failure@@Base+0x1204>
   17b28:	ldrb	r3, [r4]
   17b2c:	cmp	r3, #0
   17b30:	beq	17bd0 <argp_failure@@Base+0x11f8>
   17b34:	ldr	r2, [sl, #28]
   17b38:	ldr	r3, [sl, #32]
   17b3c:	cmp	r2, r3
   17b40:	bcs	17c74 <argp_failure@@Base+0x129c>
   17b44:	ldr	r3, [sl, #28]
   17b48:	add	r2, r3, #1
   17b4c:	str	r2, [sl, #28]
   17b50:	mov	r2, #10
   17b54:	strb	r2, [r3]
   17b58:	mov	r0, r4
   17b5c:	bl	11268 <strlen@plt>
   17b60:	subs	r5, r0, #0
   17b64:	beq	17bac <argp_failure@@Base+0x11d4>
   17b68:	ldr	r3, [sl, #28]
   17b6c:	add	r3, r3, r5
   17b70:	ldr	r2, [sl, #32]
   17b74:	cmp	r2, r3
   17b78:	bcs	17b90 <argp_failure@@Base+0x11b8>
   17b7c:	mov	r1, r5
   17b80:	mov	r0, sl
   17b84:	bl	191d0 <argp_error@@Base+0x137c>
   17b88:	cmp	r0, #0
   17b8c:	beq	17bac <argp_failure@@Base+0x11d4>
   17b90:	mov	r2, r5
   17b94:	mov	r1, r4
   17b98:	ldr	r0, [sl, #28]
   17b9c:	bl	1116c <memcpy@plt>
   17ba0:	ldr	r3, [sl, #28]
   17ba4:	add	r5, r3, r5
   17ba8:	str	r5, [sl, #28]
   17bac:	ldr	r2, [sl, #28]
   17bb0:	ldr	r3, [sl, #32]
   17bb4:	cmp	r2, r3
   17bb8:	bcs	17c8c <argp_failure@@Base+0x12b4>
   17bbc:	ldr	r3, [sl, #28]
   17bc0:	add	r2, r3, #1
   17bc4:	str	r2, [sl, #28]
   17bc8:	mov	r2, #10
   17bcc:	strb	r2, [r3]
   17bd0:	ldr	r3, [pc, #-256]	; 17ad8 <argp_failure@@Base+0x1100>
   17bd4:	cmp	r4, r3
   17bd8:	bne	17ca4 <argp_failure@@Base+0x12cc>
   17bdc:	mov	r4, #1
   17be0:	ldr	r3, [fp, #-104]	; 0xffffff98
   17be4:	tst	r3, #32
   17be8:	bne	17cb0 <argp_failure@@Base+0x12d8>
   17bec:	ldr	r3, [fp, #-104]	; 0xffffff98
   17bf0:	tst	r3, #64	; 0x40
   17bf4:	beq	17c48 <argp_failure@@Base+0x1270>
   17bf8:	ldr	r3, [pc, #-292]	; 17adc <argp_failure@@Base+0x1104>
   17bfc:	ldr	r3, [r3]
   17c00:	cmp	r3, #0
   17c04:	beq	17c48 <argp_failure@@Base+0x1270>
   17c08:	cmp	r4, #0
   17c0c:	beq	17c34 <argp_failure@@Base+0x125c>
   17c10:	ldr	r2, [sl, #28]
   17c14:	ldr	r3, [sl, #32]
   17c18:	cmp	r2, r3
   17c1c:	bcs	17cd8 <argp_failure@@Base+0x1300>
   17c20:	ldr	r3, [sl, #28]
   17c24:	add	r2, r3, #1
   17c28:	str	r2, [sl, #28]
   17c2c:	mov	r2, #10
   17c30:	strb	r2, [r3]
   17c34:	ldr	r3, [pc, #-352]	; 17adc <argp_failure@@Base+0x1104>
   17c38:	ldr	r2, [r3]
   17c3c:	ldr	r1, [pc, #-356]	; 17ae0 <argp_failure@@Base+0x1108>
   17c40:	mov	r0, sl
   17c44:	bl	192c0 <argp_error@@Base+0x146c>
   17c48:	ldr	r0, [fp, #-132]	; 0xffffff7c
   17c4c:	bl	111b4 <funlockfile@plt>
   17c50:	ldr	r3, [fp, #-108]	; 0xffffff94
   17c54:	cmp	r3, #0
   17c58:	beq	17c64 <argp_failure@@Base+0x128c>
   17c5c:	mov	r0, r3
   17c60:	bl	151d0 <_obstack_memory_used@@Base+0xfa8>
   17c64:	mov	r0, sl
   17c68:	bl	19190 <argp_error@@Base+0x133c>
   17c6c:	sub	sp, fp, #32
   17c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c74:	mov	r1, #1
   17c78:	mov	r0, sl
   17c7c:	bl	191d0 <argp_error@@Base+0x137c>
   17c80:	cmp	r0, #0
   17c84:	beq	17b58 <argp_failure@@Base+0x1180>
   17c88:	b	17b44 <argp_failure@@Base+0x116c>
   17c8c:	mov	r1, #1
   17c90:	mov	r0, sl
   17c94:	bl	191d0 <argp_error@@Base+0x137c>
   17c98:	cmp	r0, #0
   17c9c:	beq	17bd0 <argp_failure@@Base+0x11f8>
   17ca0:	b	17bbc <argp_failure@@Base+0x11e4>
   17ca4:	mov	r0, r4
   17ca8:	bl	13dd8 <argp_parse@@Base+0xbf4>
   17cac:	b	17bdc <argp_failure@@Base+0x1204>
   17cb0:	str	sl, [sp, #4]
   17cb4:	mov	r3, #0
   17cb8:	str	r3, [sp]
   17cbc:	mov	r3, r4
   17cc0:	mov	r2, #1
   17cc4:	ldr	r1, [fp, #-100]	; 0xffffff9c
   17cc8:	ldr	r0, [fp, #-112]	; 0xffffff90
   17ccc:	bl	15a94 <_obstack_memory_used@@Base+0x186c>
   17cd0:	orr	r4, r4, r0
   17cd4:	b	17bec <argp_failure@@Base+0x1214>
   17cd8:	mov	r1, #1
   17cdc:	mov	r0, sl
   17ce0:	bl	191d0 <argp_error@@Base+0x137c>
   17ce4:	cmp	r0, #0
   17ce8:	beq	17c34 <argp_failure@@Base+0x125c>
   17cec:	b	17c20 <argp_failure@@Base+0x1248>
   17cf0:	ldrb	r3, [r5]
   17cf4:	mov	r4, r5
   17cf8:	mov	r5, #0
   17cfc:	b	16dd0 <argp_failure@@Base+0x3f8>
   17d00:	mov	r4, r2
   17d04:	b	16de4 <argp_failure@@Base+0x40c>
   17d08:	cmp	r0, #110	; 0x6e
   17d0c:	beq	16e3c <argp_failure@@Base+0x464>
   17d10:	mov	r3, #1
   17d14:	str	r3, [fp, #-96]	; 0xffffffa0
   17d18:	str	r3, [fp, #-116]	; 0xffffff8c
   17d1c:	add	r6, sl, #24
   17d20:	b	16f34 <argp_failure@@Base+0x55c>
   17d24:	ldrb	r3, [r9]
   17d28:	cmp	r7, r3
   17d2c:	beq	17408 <argp_failure@@Base+0xa30>
   17d30:	add	r4, r4, #24
   17d34:	subs	r5, r5, #1
   17d38:	beq	174f8 <argp_failure@@Base+0xb20>
   17d3c:	ldr	r6, [r4, #12]
   17d40:	tst	r6, #8
   17d44:	bne	17d30 <argp_failure@@Base+0x1358>
   17d48:	ldr	r7, [r4, #4]
   17d4c:	sub	r3, r7, #1
   17d50:	cmp	r3, #254	; 0xfe
   17d54:	bhi	17d30 <argp_failure@@Base+0x1358>
   17d58:	bl	11250 <__ctype_b_loc@plt>
   17d5c:	ldr	r2, [r0]
   17d60:	lsl	r3, r7, #1
   17d64:	ldrh	r3, [r2, r3]
   17d68:	tst	r3, #16384	; 0x4000
   17d6c:	bne	17d24 <argp_failure@@Base+0x134c>
   17d70:	b	17d30 <argp_failure@@Base+0x1358>

00017d74 <argp_help@@Base>:
   17d74:	push	{lr}		; (str lr, [sp, #-4]!)
   17d78:	sub	sp, sp, #12
   17d7c:	str	r3, [sp]
   17d80:	mov	r3, r2
   17d84:	mov	r2, r1
   17d88:	mov	r1, #0
   17d8c:	bl	16be0 <argp_failure@@Base+0x208>
   17d90:	add	sp, sp, #12
   17d94:	pop	{pc}		; (ldr pc, [sp], #4)

00017d98 <argp_state_help@@Base>:
   17d98:	push	{r4, r5, lr}
   17d9c:	sub	sp, sp, #12
   17da0:	mov	r5, r2
   17da4:	subs	r4, r0, #0
   17da8:	beq	17e0c <argp_state_help@@Base+0x74>
   17dac:	ldr	r3, [r4, #16]
   17db0:	tst	r3, #2
   17db4:	bne	17e04 <argp_state_help@@Base+0x6c>
   17db8:	cmp	r1, #0
   17dbc:	beq	17e04 <argp_state_help@@Base+0x6c>
   17dc0:	ldr	r3, [r4, #16]
   17dc4:	tst	r3, #64	; 0x40
   17dc8:	orrne	r5, r5, #128	; 0x80
   17dcc:	ldr	r0, [r4]
   17dd0:	ldr	r3, [r4, #40]	; 0x28
   17dd4:	str	r3, [sp]
   17dd8:	mov	r3, r5
   17ddc:	mov	r2, r1
   17de0:	mov	r1, r4
   17de4:	bl	16be0 <argp_failure@@Base+0x208>
   17de8:	ldr	r3, [r4, #16]
   17dec:	tst	r3, #32
   17df0:	bne	17e04 <argp_state_help@@Base+0x6c>
   17df4:	tst	r5, #256	; 0x100
   17df8:	bne	17e38 <argp_state_help@@Base+0xa0>
   17dfc:	tst	r5, #512	; 0x200
   17e00:	bne	17e44 <argp_state_help@@Base+0xac>
   17e04:	add	sp, sp, #12
   17e08:	pop	{r4, r5, pc}
   17e0c:	cmp	r1, #0
   17e10:	beq	17e04 <argp_state_help@@Base+0x6c>
   17e14:	ldr	r3, [pc, #48]	; 17e4c <argp_state_help@@Base+0xb4>
   17e18:	ldr	r3, [r3]
   17e1c:	str	r3, [sp]
   17e20:	mov	r3, r2
   17e24:	mov	r2, r1
   17e28:	mov	r1, #0
   17e2c:	mov	r0, r1
   17e30:	bl	16be0 <argp_failure@@Base+0x208>
   17e34:	b	17df4 <argp_state_help@@Base+0x5c>
   17e38:	ldr	r3, [pc, #16]	; 17e50 <argp_state_help@@Base+0xb8>
   17e3c:	ldr	r0, [r3]
   17e40:	bl	1125c <exit@plt>
   17e44:	mov	r0, #0
   17e48:	bl	1125c <exit@plt>
   17e4c:			; <UNDEFINED> instruction: 0x000308b0
   17e50:	andeq	r0, r3, ip, lsr #17

00017e54 <argp_error@@Base>:
   17e54:	push	{r1, r2, r3}
   17e58:	push	{r4, r5, lr}
   17e5c:	sub	sp, sp, #8
   17e60:	subs	r5, r0, #0
   17e64:	beq	17f34 <argp_error@@Base+0xe0>
   17e68:	ldr	r3, [r5, #16]
   17e6c:	tst	r3, #2
   17e70:	bne	17f24 <argp_error@@Base+0xd0>
   17e74:	ldr	r4, [r5, #44]	; 0x2c
   17e78:	cmp	r4, #0
   17e7c:	beq	17f24 <argp_error@@Base+0xd0>
   17e80:	mov	r0, r4
   17e84:	bl	1131c <flockfile@plt>
   17e88:	add	r3, sp, #24
   17e8c:	str	r3, [sp, #4]
   17e90:	ldr	r0, [r5, #40]	; 0x28
   17e94:	mov	r1, r4
   17e98:	bl	110d0 <fputs_unlocked@plt>
   17e9c:	ldr	r3, [r4, #20]
   17ea0:	ldr	r2, [r4, #24]
   17ea4:	cmp	r3, r2
   17ea8:	addcc	r2, r3, #1
   17eac:	strcc	r2, [r4, #20]
   17eb0:	movcc	r2, #58	; 0x3a
   17eb4:	strbcc	r2, [r3]
   17eb8:	bcs	17f60 <argp_error@@Base+0x10c>
   17ebc:	ldr	r3, [r4, #20]
   17ec0:	ldr	r2, [r4, #24]
   17ec4:	cmp	r3, r2
   17ec8:	addcc	r2, r3, #1
   17ecc:	strcc	r2, [r4, #20]
   17ed0:	movcc	r2, #32
   17ed4:	strbcc	r2, [r3]
   17ed8:	bcs	17f70 <argp_error@@Base+0x11c>
   17edc:	ldr	r2, [sp, #4]
   17ee0:	ldr	r1, [sp, #20]
   17ee4:	mov	r0, r4
   17ee8:	bl	112ec <vfprintf@plt>
   17eec:	ldr	r3, [r4, #20]
   17ef0:	ldr	r2, [r4, #24]
   17ef4:	cmp	r3, r2
   17ef8:	addcc	r2, r3, #1
   17efc:	strcc	r2, [r4, #20]
   17f00:	movcc	r2, #10
   17f04:	strbcc	r2, [r3]
   17f08:	bcs	17f80 <argp_error@@Base+0x12c>
   17f0c:	mov	r2, #260	; 0x104
   17f10:	mov	r1, r4
   17f14:	mov	r0, r5
   17f18:	bl	17d98 <argp_state_help@@Base>
   17f1c:	mov	r0, r4
   17f20:	bl	111b4 <funlockfile@plt>
   17f24:	add	sp, sp, #8
   17f28:	pop	{r4, r5, lr}
   17f2c:	add	sp, sp, #12
   17f30:	bx	lr
   17f34:	ldr	r3, [pc, #84]	; 17f90 <argp_error@@Base+0x13c>
   17f38:	ldr	r4, [r3]
   17f3c:	cmp	r4, #0
   17f40:	beq	17f24 <argp_error@@Base+0xd0>
   17f44:	mov	r0, r4
   17f48:	bl	1131c <flockfile@plt>
   17f4c:	add	r3, sp, #24
   17f50:	str	r3, [sp, #4]
   17f54:	ldr	r3, [pc, #56]	; 17f94 <argp_error@@Base+0x140>
   17f58:	ldr	r0, [r3]
   17f5c:	b	17e94 <argp_error@@Base+0x40>
   17f60:	mov	r1, #58	; 0x3a
   17f64:	mov	r0, r4
   17f68:	bl	112d4 <__overflow@plt>
   17f6c:	b	17ebc <argp_error@@Base+0x68>
   17f70:	mov	r1, #32
   17f74:	mov	r0, r4
   17f78:	bl	112d4 <__overflow@plt>
   17f7c:	b	17edc <argp_error@@Base+0x88>
   17f80:	mov	r1, #10
   17f84:	mov	r0, r4
   17f88:	bl	112d4 <__overflow@plt>
   17f8c:	b	17f0c <argp_error@@Base+0xb8>
   17f90:			; <UNDEFINED> instruction: 0x000308b8
   17f94:			; <UNDEFINED> instruction: 0x000308b0
   17f98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f9c:	ldr	r4, [r1, #28]
   17fa0:	ldr	r5, [r1, #32]
   17fa4:	ldr	r6, [r1]
   17fa8:	add	r7, r0, r5, lsl #2
   17fac:	b	17fe4 <argp_error@@Base+0x190>
   17fb0:	cmp	sl, #0
   17fb4:	ble	17fe0 <argp_error@@Base+0x18c>
   17fb8:	add	r2, r0, r4, lsl #2
   17fbc:	sub	r3, r6, sl
   17fc0:	add	r3, r0, r3, lsl #2
   17fc4:	add	r8, r0, r6, lsl #2
   17fc8:	ldr	ip, [r2]
   17fcc:	ldr	lr, [r3]
   17fd0:	str	lr, [r2], #4
   17fd4:	str	ip, [r3], #4
   17fd8:	cmp	r3, r8
   17fdc:	bne	17fc8 <argp_error@@Base+0x174>
   17fe0:	sub	r6, r6, sl
   17fe4:	cmp	r6, r5
   17fe8:	movle	r3, #0
   17fec:	movgt	r3, #1
   17ff0:	cmp	r4, r5
   17ff4:	movge	r3, #0
   17ff8:	cmp	r3, #0
   17ffc:	beq	18048 <argp_error@@Base+0x1f4>
   18000:	sub	r9, r6, r5
   18004:	sub	sl, r5, r4
   18008:	cmp	r9, sl
   1800c:	bgt	17fb0 <argp_error@@Base+0x15c>
   18010:	cmp	r9, #0
   18014:	addgt	r3, r0, r4, lsl #2
   18018:	addgt	r8, r9, r4
   1801c:	addgt	r8, r0, r8, lsl #2
   18020:	movgt	r2, r7
   18024:	ble	18040 <argp_error@@Base+0x1ec>
   18028:	ldr	ip, [r3]
   1802c:	ldr	lr, [r2]
   18030:	str	lr, [r3], #4
   18034:	str	ip, [r2], #4
   18038:	cmp	r3, r8
   1803c:	bne	18028 <argp_error@@Base+0x1d4>
   18040:	add	r4, r4, r9
   18044:	b	17fe4 <argp_error@@Base+0x190>
   18048:	ldr	r0, [r1]
   1804c:	ldr	r3, [r1, #32]
   18050:	sub	r2, r0, r3
   18054:	ldr	r3, [r1, #28]
   18058:	add	r3, r3, r2
   1805c:	str	r3, [r1, #28]
   18060:	str	r0, [r1, #32]
   18064:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1806c:	sub	sp, sp, #44	; 0x2c
   18070:	str	r0, [sp, #20]
   18074:	str	r1, [sp, #12]
   18078:	str	r2, [sp, #24]
   1807c:	str	r3, [sp, #8]
   18080:	ldr	fp, [sp, #88]	; 0x58
   18084:	ldr	sl, [fp, #20]
   18088:	ldrb	r3, [sl]
   1808c:	cmp	r3, #0
   18090:	cmpne	r3, #61	; 0x3d
   18094:	beq	180d0 <argp_error@@Base+0x27c>
   18098:	mov	r8, sl
   1809c:	ldrb	r3, [r8, #1]!
   180a0:	cmp	r3, #0
   180a4:	cmpne	r3, #61	; 0x3d
   180a8:	bne	1809c <argp_error@@Base+0x248>
   180ac:	sub	r7, r8, sl
   180b0:	ldr	r5, [sp, #8]
   180b4:	ldr	r3, [r5]
   180b8:	str	r3, [sp, #16]
   180bc:	cmp	r3, #0
   180c0:	beq	183c4 <argp_error@@Base+0x570>
   180c4:	mov	r4, r3
   180c8:	mov	r6, #0
   180cc:	b	180e8 <argp_error@@Base+0x294>
   180d0:	mov	r8, sl
   180d4:	b	180ac <argp_error@@Base+0x258>
   180d8:	add	r6, r6, #1
   180dc:	ldr	r4, [r5, #16]!
   180e0:	cmp	r4, #0
   180e4:	beq	18120 <argp_error@@Base+0x2cc>
   180e8:	mov	r9, r5
   180ec:	mov	r2, r7
   180f0:	mov	r1, sl
   180f4:	mov	r0, r4
   180f8:	bl	11388 <strncmp@plt>
   180fc:	cmp	r0, #0
   18100:	bne	180d8 <argp_error@@Base+0x284>
   18104:	mov	r0, r4
   18108:	bl	11268 <strlen@plt>
   1810c:	cmp	r7, r0
   18110:	bne	180d8 <argp_error@@Base+0x284>
   18114:	cmp	r5, #0
   18118:	strne	r6, [sp, #28]
   1811c:	bne	18374 <argp_error@@Base+0x520>
   18120:	ldr	r4, [sp, #8]
   18124:	mvn	r3, #0
   18128:	str	r3, [sp, #28]
   1812c:	mov	sl, #0
   18130:	str	sl, [sp, #36]	; 0x24
   18134:	mov	r5, sl
   18138:	mov	r9, sl
   1813c:	str	r8, [sp, #32]
   18140:	mov	r8, sl
   18144:	ldr	r0, [sp, #16]
   18148:	b	18198 <argp_error@@Base+0x344>
   1814c:	ldr	r2, [r9, #8]
   18150:	ldr	r3, [r4, #8]
   18154:	cmp	r2, r3
   18158:	bne	181d0 <argp_error@@Base+0x37c>
   1815c:	ldr	r2, [r9, #12]
   18160:	ldr	r3, [r4, #12]
   18164:	cmp	r2, r3
   18168:	bne	181d0 <argp_error@@Base+0x37c>
   1816c:	b	18188 <argp_error@@Base+0x334>
   18170:	cmp	r8, #0
   18174:	moveq	sl, #1
   18178:	beq	18188 <argp_error@@Base+0x334>
   1817c:	mov	sl, #1
   18180:	mov	r3, #1
   18184:	strb	r3, [r8, r5]
   18188:	add	r5, r5, #1
   1818c:	ldr	r0, [r4, #16]!
   18190:	cmp	r0, #0
   18194:	beq	18238 <argp_error@@Base+0x3e4>
   18198:	mov	r2, r7
   1819c:	ldr	r1, [fp, #20]
   181a0:	bl	11388 <strncmp@plt>
   181a4:	cmp	r0, #0
   181a8:	bne	18188 <argp_error@@Base+0x334>
   181ac:	cmp	r9, #0
   181b0:	beq	18224 <argp_error@@Base+0x3d0>
   181b4:	ldr	r3, [sp, #84]	; 0x54
   181b8:	cmp	r3, #0
   181bc:	bne	181d0 <argp_error@@Base+0x37c>
   181c0:	ldr	r2, [r9, #4]
   181c4:	ldr	r3, [r4, #4]
   181c8:	cmp	r2, r3
   181cc:	beq	1814c <argp_error@@Base+0x2f8>
   181d0:	cmp	sl, #0
   181d4:	bne	18188 <argp_error@@Base+0x334>
   181d8:	ldr	r3, [sp, #92]	; 0x5c
   181dc:	cmp	r3, #0
   181e0:	beq	18170 <argp_error@@Base+0x31c>
   181e4:	cmp	r8, #0
   181e8:	bne	18180 <argp_error@@Base+0x32c>
   181ec:	mov	r0, r6
   181f0:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   181f4:	subs	r8, r0, #0
   181f8:	beq	18230 <argp_error@@Base+0x3dc>
   181fc:	mov	r2, r6
   18200:	mov	r1, #0
   18204:	mov	r0, r8
   18208:	bl	112b0 <memset@plt>
   1820c:	ldr	r3, [sp, #28]
   18210:	mov	r2, #1
   18214:	strb	r2, [r8, r3]
   18218:	mov	r3, #1
   1821c:	str	r3, [sp, #36]	; 0x24
   18220:	b	18180 <argp_error@@Base+0x32c>
   18224:	str	r5, [sp, #28]
   18228:	mov	r9, r4
   1822c:	b	18188 <argp_error@@Base+0x334>
   18230:	mov	sl, #1
   18234:	b	18188 <argp_error@@Base+0x334>
   18238:	mov	r3, r8
   1823c:	str	r8, [sp, #16]
   18240:	ldr	r8, [sp, #32]
   18244:	cmp	sl, #0
   18248:	cmpeq	r3, #0
   1824c:	beq	1836c <argp_error@@Base+0x518>
   18250:	ldr	r3, [sp, #92]	; 0x5c
   18254:	cmp	r3, #0
   18258:	beq	18288 <argp_error@@Base+0x434>
   1825c:	cmp	sl, #0
   18260:	beq	182c4 <argp_error@@Base+0x470>
   18264:	ldr	r3, [sp, #12]
   18268:	ldr	r2, [r3]
   1826c:	ldr	r3, [pc, #708]	; 18538 <argp_error@@Base+0x6e4>
   18270:	ldr	r0, [r3]
   18274:	ldr	r3, [fp, #20]
   18278:	str	r3, [sp]
   1827c:	ldr	r3, [sp, #96]	; 0x60
   18280:	ldr	r1, [pc, #692]	; 1853c <argp_error@@Base+0x6e8>
   18284:	bl	11280 <fprintf@plt>
   18288:	ldr	r3, [sp, #36]	; 0x24
   1828c:	cmp	r3, #0
   18290:	bne	18360 <argp_error@@Base+0x50c>
   18294:	ldr	r4, [fp, #20]
   18298:	mov	r0, r4
   1829c:	bl	11268 <strlen@plt>
   182a0:	add	r0, r4, r0
   182a4:	str	r0, [fp, #20]
   182a8:	ldr	r3, [fp]
   182ac:	add	r3, r3, #1
   182b0:	str	r3, [fp]
   182b4:	mov	r3, #0
   182b8:	str	r3, [fp, #8]
   182bc:	mov	r0, #63	; 0x3f
   182c0:	b	184b8 <argp_error@@Base+0x664>
   182c4:	ldr	r4, [pc, #620]	; 18538 <argp_error@@Base+0x6e4>
   182c8:	ldr	r0, [r4]
   182cc:	bl	1131c <flockfile@plt>
   182d0:	ldr	r3, [sp, #12]
   182d4:	ldr	r2, [r3]
   182d8:	ldr	r0, [r4]
   182dc:	ldr	r3, [fp, #20]
   182e0:	str	r3, [sp]
   182e4:	ldr	r3, [sp, #96]	; 0x60
   182e8:	ldr	r1, [pc, #592]	; 18540 <argp_error@@Base+0x6ec>
   182ec:	bl	11280 <fprintf@plt>
   182f0:	cmp	r6, #0
   182f4:	ble	18344 <argp_error@@Base+0x4f0>
   182f8:	ldr	r3, [sp, #16]
   182fc:	mov	r4, r3
   18300:	add	r6, r3, r6
   18304:	ldr	r7, [pc, #568]	; 18544 <argp_error@@Base+0x6f0>
   18308:	ldr	r5, [pc, #552]	; 18538 <argp_error@@Base+0x6e4>
   1830c:	ldr	r8, [sp, #8]
   18310:	b	18320 <argp_error@@Base+0x4cc>
   18314:	add	sl, sl, #1
   18318:	cmp	r4, r6
   1831c:	beq	18344 <argp_error@@Base+0x4f0>
   18320:	ldrb	r3, [r4], #1
   18324:	cmp	r3, #0
   18328:	beq	18314 <argp_error@@Base+0x4c0>
   1832c:	ldr	r3, [r8, sl, lsl #4]
   18330:	ldr	r2, [sp, #96]	; 0x60
   18334:	mov	r1, r7
   18338:	ldr	r0, [r5]
   1833c:	bl	11280 <fprintf@plt>
   18340:	b	18314 <argp_error@@Base+0x4c0>
   18344:	ldr	r4, [pc, #492]	; 18538 <argp_error@@Base+0x6e4>
   18348:	ldr	r1, [r4]
   1834c:	mov	r0, #10
   18350:	bl	112f8 <fputc@plt>
   18354:	ldr	r0, [r4]
   18358:	bl	111b4 <funlockfile@plt>
   1835c:	b	18288 <argp_error@@Base+0x434>
   18360:	ldr	r0, [sp, #16]
   18364:	bl	13dd8 <argp_parse@@Base+0xbf4>
   18368:	b	18294 <argp_error@@Base+0x440>
   1836c:	cmp	r9, #0
   18370:	beq	183c4 <argp_error@@Base+0x570>
   18374:	ldr	r2, [fp]
   18378:	add	r3, r2, #1
   1837c:	str	r3, [fp]
   18380:	mov	r1, #0
   18384:	str	r1, [fp, #20]
   18388:	ldrb	r1, [r8]
   1838c:	cmp	r1, #0
   18390:	beq	18484 <argp_error@@Base+0x630>
   18394:	ldr	r3, [r9, #4]
   18398:	cmp	r3, #0
   1839c:	addne	r8, r8, #1
   183a0:	strne	r8, [fp, #12]
   183a4:	bne	18490 <argp_error@@Base+0x63c>
   183a8:	ldr	r3, [sp, #92]	; 0x5c
   183ac:	cmp	r3, #0
   183b0:	bne	1845c <argp_error@@Base+0x608>
   183b4:	ldr	r3, [r9, #12]
   183b8:	str	r3, [fp, #8]
   183bc:	mov	r0, #63	; 0x3f
   183c0:	b	184b8 <argp_error@@Base+0x664>
   183c4:	ldr	r3, [sp, #84]	; 0x54
   183c8:	cmp	r3, #0
   183cc:	bne	183fc <argp_error@@Base+0x5a8>
   183d0:	ldr	r3, [sp, #92]	; 0x5c
   183d4:	cmp	r3, #0
   183d8:	bne	18434 <argp_error@@Base+0x5e0>
   183dc:	mov	r2, #0
   183e0:	str	r2, [fp, #20]
   183e4:	ldr	r3, [fp]
   183e8:	add	r3, r3, #1
   183ec:	str	r3, [fp]
   183f0:	str	r2, [fp, #8]
   183f4:	mov	r0, #63	; 0x3f
   183f8:	b	184b8 <argp_error@@Base+0x664>
   183fc:	ldr	r3, [fp]
   18400:	ldr	r2, [sp, #12]
   18404:	ldr	r3, [r2, r3, lsl #2]
   18408:	ldrb	r3, [r3, #1]
   1840c:	cmp	r3, #45	; 0x2d
   18410:	beq	183d0 <argp_error@@Base+0x57c>
   18414:	ldr	r3, [fp, #20]
   18418:	ldrb	r1, [r3]
   1841c:	ldr	r0, [sp, #24]
   18420:	bl	11274 <strchr@plt>
   18424:	cmp	r0, #0
   18428:	beq	183d0 <argp_error@@Base+0x57c>
   1842c:	mvn	r0, #0
   18430:	b	184b8 <argp_error@@Base+0x664>
   18434:	ldr	r3, [sp, #12]
   18438:	ldr	r2, [r3]
   1843c:	ldr	r3, [pc, #244]	; 18538 <argp_error@@Base+0x6e4>
   18440:	ldr	r0, [r3]
   18444:	ldr	r3, [fp, #20]
   18448:	str	r3, [sp]
   1844c:	ldr	r3, [sp, #96]	; 0x60
   18450:	ldr	r1, [pc, #240]	; 18548 <argp_error@@Base+0x6f4>
   18454:	bl	11280 <fprintf@plt>
   18458:	b	183dc <argp_error@@Base+0x588>
   1845c:	ldr	r3, [sp, #12]
   18460:	ldr	r2, [r3]
   18464:	ldr	r3, [pc, #204]	; 18538 <argp_error@@Base+0x6e4>
   18468:	ldr	r0, [r3]
   1846c:	ldr	r3, [r9]
   18470:	str	r3, [sp]
   18474:	ldr	r3, [sp, #96]	; 0x60
   18478:	ldr	r1, [pc, #204]	; 1854c <argp_error@@Base+0x6f8>
   1847c:	bl	11280 <fprintf@plt>
   18480:	b	183b4 <argp_error@@Base+0x560>
   18484:	ldr	r1, [r9, #4]
   18488:	cmp	r1, #1
   1848c:	beq	184c0 <argp_error@@Base+0x66c>
   18490:	ldr	r3, [sp, #80]	; 0x50
   18494:	cmp	r3, #0
   18498:	ldrne	r2, [sp, #28]
   1849c:	strne	r2, [r3]
   184a0:	ldr	r3, [r9, #8]
   184a4:	cmp	r3, #0
   184a8:	ldrne	r2, [r9, #12]
   184ac:	strne	r2, [r3]
   184b0:	movne	r0, #0
   184b4:	ldreq	r0, [r9, #12]
   184b8:	add	sp, sp, #44	; 0x2c
   184bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184c0:	ldr	r1, [sp, #20]
   184c4:	cmp	r3, r1
   184c8:	bge	184e4 <argp_error@@Base+0x690>
   184cc:	add	r2, r2, #2
   184d0:	str	r2, [fp]
   184d4:	ldr	r2, [sp, #12]
   184d8:	ldr	r3, [r2, r3, lsl #2]
   184dc:	str	r3, [fp, #12]
   184e0:	b	18490 <argp_error@@Base+0x63c>
   184e4:	ldr	r3, [sp, #92]	; 0x5c
   184e8:	cmp	r3, #0
   184ec:	bne	18510 <argp_error@@Base+0x6bc>
   184f0:	ldr	r3, [r9, #12]
   184f4:	str	r3, [fp, #8]
   184f8:	ldr	r3, [sp, #24]
   184fc:	ldrb	r0, [r3]
   18500:	cmp	r0, #58	; 0x3a
   18504:	moveq	r0, #58	; 0x3a
   18508:	movne	r0, #63	; 0x3f
   1850c:	b	184b8 <argp_error@@Base+0x664>
   18510:	ldr	r3, [sp, #12]
   18514:	ldr	r2, [r3]
   18518:	ldr	r3, [pc, #24]	; 18538 <argp_error@@Base+0x6e4>
   1851c:	ldr	r0, [r3]
   18520:	ldr	r3, [r9]
   18524:	str	r3, [sp]
   18528:	ldr	r3, [sp, #96]	; 0x60
   1852c:	ldr	r1, [pc, #28]	; 18550 <argp_error@@Base+0x6fc>
   18530:	bl	11280 <fprintf@plt>
   18534:	b	184f0 <argp_error@@Base+0x69c>
   18538:			; <UNDEFINED> instruction: 0x000308b8
   1853c:	andeq	fp, r1, r4, ror pc
   18540:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18544:	andeq	fp, r1, r4, asr #31
   18548:	andeq	fp, r1, ip, asr #31
   1854c:	andeq	fp, r1, ip, ror #31
   18550:	andeq	ip, r1, ip, lsl r0
   18554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18558:	sub	sp, sp, #36	; 0x24
   1855c:	str	r3, [sp, #24]
   18560:	ldr	r4, [sp, #80]	; 0x50
   18564:	ldr	r8, [r4, #4]
   18568:	subs	r5, r0, #0
   1856c:	ble	18a74 <argp_error@@Base+0xc20>
   18570:	mov	r9, r1
   18574:	mov	r6, r2
   18578:	mov	r3, #0
   1857c:	str	r3, [r4, #12]
   18580:	ldr	r3, [r4]
   18584:	cmp	r3, #0
   18588:	beq	185ac <argp_error@@Base+0x758>
   1858c:	ldr	r3, [r4, #16]
   18590:	cmp	r3, #0
   18594:	beq	185b4 <argp_error@@Base+0x760>
   18598:	ldrb	r3, [r2]
   1859c:	sub	r3, r3, #43	; 0x2b
   185a0:	tst	r3, #253	; 0xfd
   185a4:	addeq	r6, r2, #1
   185a8:	b	18610 <argp_error@@Base+0x7bc>
   185ac:	mov	r3, #1
   185b0:	str	r3, [r4]
   185b4:	ldr	r3, [r4]
   185b8:	str	r3, [r4, #32]
   185bc:	str	r3, [r4, #28]
   185c0:	mov	r3, #0
   185c4:	str	r3, [r4, #20]
   185c8:	ldrb	r3, [r6]
   185cc:	cmp	r3, #45	; 0x2d
   185d0:	moveq	r3, #2
   185d4:	streq	r3, [r4, #24]
   185d8:	addeq	r6, r6, #1
   185dc:	beq	18608 <argp_error@@Base+0x7b4>
   185e0:	cmp	r3, #43	; 0x2b
   185e4:	moveq	r3, #0
   185e8:	streq	r3, [r4, #24]
   185ec:	addeq	r6, r6, #1
   185f0:	beq	18608 <argp_error@@Base+0x7b4>
   185f4:	ldr	r3, [sp, #84]	; 0x54
   185f8:	cmp	r3, #0
   185fc:	beq	186ac <argp_error@@Base+0x858>
   18600:	mov	r3, #0
   18604:	str	r3, [r4, #24]
   18608:	mov	r3, #1
   1860c:	str	r3, [r4, #16]
   18610:	ldrb	r3, [r6]
   18614:	cmp	r3, #58	; 0x3a
   18618:	moveq	r8, #0
   1861c:	ldr	r3, [r4, #20]
   18620:	cmp	r3, #0
   18624:	beq	18634 <argp_error@@Base+0x7e0>
   18628:	ldrb	r3, [r3]
   1862c:	cmp	r3, #0
   18630:	bne	187c0 <argp_error@@Base+0x96c>
   18634:	ldr	r3, [r4]
   18638:	ldr	r2, [r4, #32]
   1863c:	cmp	r2, r3
   18640:	strgt	r3, [r4, #32]
   18644:	ldr	r2, [r4, #28]
   18648:	cmp	r3, r2
   1864c:	strlt	r3, [r4, #28]
   18650:	ldr	r2, [r4, #24]
   18654:	cmp	r2, #1
   18658:	beq	186c8 <argp_error@@Base+0x874>
   1865c:	ldr	r7, [r4]
   18660:	cmp	r5, r7
   18664:	beq	1874c <argp_error@@Base+0x8f8>
   18668:	ldr	sl, [r9, r7, lsl #2]
   1866c:	ldr	r1, [pc, #1088]	; 18ab4 <argp_error@@Base+0xc60>
   18670:	mov	r0, sl
   18674:	bl	110f4 <strcmp@plt>
   18678:	cmp	r0, #0
   1867c:	bne	18a84 <argp_error@@Base+0xc30>
   18680:	add	r7, r7, #1
   18684:	str	r7, [r4]
   18688:	ldr	r2, [r4, #28]
   1868c:	ldr	r3, [r4, #32]
   18690:	cmp	r7, r3
   18694:	cmpne	r2, r3
   18698:	beq	1873c <argp_error@@Base+0x8e8>
   1869c:	mov	r1, r4
   186a0:	mov	r0, r9
   186a4:	bl	17f98 <argp_error@@Base+0x144>
   186a8:	b	18744 <argp_error@@Base+0x8f0>
   186ac:	ldr	r0, [pc, #1028]	; 18ab8 <argp_error@@Base+0xc64>
   186b0:	bl	111f0 <getenv@plt>
   186b4:	cmp	r0, #0
   186b8:	bne	18600 <argp_error@@Base+0x7ac>
   186bc:	mov	r3, #1
   186c0:	str	r3, [r4, #24]
   186c4:	b	18608 <argp_error@@Base+0x7b4>
   186c8:	ldr	r2, [r4, #32]
   186cc:	ldr	r1, [r4, #28]
   186d0:	cmp	r1, r2
   186d4:	cmpne	r3, r2
   186d8:	beq	186ec <argp_error@@Base+0x898>
   186dc:	mov	r1, r4
   186e0:	mov	r0, r9
   186e4:	bl	17f98 <argp_error@@Base+0x144>
   186e8:	b	186f4 <argp_error@@Base+0x8a0>
   186ec:	cmp	r3, r2
   186f0:	strne	r3, [r4, #28]
   186f4:	ldr	r3, [r4]
   186f8:	cmp	r5, r3
   186fc:	ble	18734 <argp_error@@Base+0x8e0>
   18700:	add	r1, r9, r3, lsl #2
   18704:	b	18718 <argp_error@@Base+0x8c4>
   18708:	add	r3, r3, #1
   1870c:	str	r3, [r4]
   18710:	cmp	r5, r3
   18714:	beq	18734 <argp_error@@Base+0x8e0>
   18718:	ldr	r2, [r1], #4
   1871c:	ldrb	r0, [r2]
   18720:	cmp	r0, #45	; 0x2d
   18724:	bne	18708 <argp_error@@Base+0x8b4>
   18728:	ldrb	r2, [r2, #1]
   1872c:	cmp	r2, #0
   18730:	beq	18708 <argp_error@@Base+0x8b4>
   18734:	str	r3, [r4, #32]
   18738:	b	1865c <argp_error@@Base+0x808>
   1873c:	cmp	r2, r3
   18740:	streq	r7, [r4, #28]
   18744:	str	r5, [r4, #32]
   18748:	str	r5, [r4]
   1874c:	ldr	r3, [r4, #28]
   18750:	ldr	r2, [r4, #32]
   18754:	cmp	r3, r2
   18758:	mvneq	r0, #0
   1875c:	strne	r3, [r4]
   18760:	mvnne	r0, #0
   18764:	b	188c4 <argp_error@@Base+0xa70>
   18768:	ldrb	r1, [sl, #1]
   1876c:	cmp	r1, #0
   18770:	beq	18a90 <argp_error@@Base+0xc3c>
   18774:	ldr	r3, [sp, #24]
   18778:	cmp	r3, #0
   1877c:	beq	187b0 <argp_error@@Base+0x95c>
   18780:	cmp	r1, #45	; 0x2d
   18784:	beq	18828 <argp_error@@Base+0x9d4>
   18788:	ldr	r3, [sp, #76]	; 0x4c
   1878c:	cmp	r3, #0
   18790:	beq	187b0 <argp_error@@Base+0x95c>
   18794:	ldrb	r3, [sl, #2]
   18798:	cmp	r3, #0
   1879c:	bne	18868 <argp_error@@Base+0xa14>
   187a0:	mov	r0, r6
   187a4:	bl	11274 <strchr@plt>
   187a8:	cmp	r0, #0
   187ac:	beq	18868 <argp_error@@Base+0xa14>
   187b0:	ldr	r3, [r4]
   187b4:	ldr	r3, [r9, r3, lsl #2]
   187b8:	add	r3, r3, #1
   187bc:	str	r3, [r4, #20]
   187c0:	ldr	sl, [r4, #20]
   187c4:	add	fp, sl, #1
   187c8:	str	fp, [r4, #20]
   187cc:	ldrb	r7, [sl]
   187d0:	str	r7, [sp, #28]
   187d4:	mov	r1, r7
   187d8:	mov	r0, r6
   187dc:	bl	11274 <strchr@plt>
   187e0:	ldrb	r3, [sl, #1]
   187e4:	cmp	r3, #0
   187e8:	ldreq	r3, [r4]
   187ec:	addeq	r3, r3, #1
   187f0:	streq	r3, [r4]
   187f4:	sub	r3, r7, #58	; 0x3a
   187f8:	uxtb	r3, r3
   187fc:	cmp	r0, #0
   18800:	cmpne	r3, #1
   18804:	bls	188b0 <argp_error@@Base+0xa5c>
   18808:	ldrb	r3, [r0]
   1880c:	cmp	r3, #87	; 0x57
   18810:	beq	188e8 <argp_error@@Base+0xa94>
   18814:	ldrb	r3, [r0, #1]
   18818:	cmp	r3, #58	; 0x3a
   1881c:	beq	189b4 <argp_error@@Base+0xb60>
   18820:	mov	r0, r7
   18824:	b	188c4 <argp_error@@Base+0xa70>
   18828:	add	sl, sl, #2
   1882c:	str	sl, [r4, #20]
   18830:	ldr	r3, [pc, #636]	; 18ab4 <argp_error@@Base+0xc60>
   18834:	str	r3, [sp, #16]
   18838:	str	r8, [sp, #12]
   1883c:	str	r4, [sp, #8]
   18840:	ldr	r3, [sp, #76]	; 0x4c
   18844:	str	r3, [sp, #4]
   18848:	ldr	r3, [sp, #72]	; 0x48
   1884c:	str	r3, [sp]
   18850:	ldr	r3, [sp, #24]
   18854:	mov	r2, r6
   18858:	mov	r1, r9
   1885c:	mov	r0, r5
   18860:	bl	18068 <argp_error@@Base+0x214>
   18864:	b	188c4 <argp_error@@Base+0xa70>
   18868:	add	sl, sl, #1
   1886c:	str	sl, [r4, #20]
   18870:	ldr	r3, [pc, #580]	; 18abc <argp_error@@Base+0xc68>
   18874:	str	r3, [sp, #16]
   18878:	str	r8, [sp, #12]
   1887c:	str	r4, [sp, #8]
   18880:	ldr	r3, [sp, #76]	; 0x4c
   18884:	str	r3, [sp, #4]
   18888:	ldr	r3, [sp, #72]	; 0x48
   1888c:	str	r3, [sp]
   18890:	ldr	r3, [sp, #24]
   18894:	mov	r2, r6
   18898:	mov	r1, r9
   1889c:	mov	r0, r5
   188a0:	bl	18068 <argp_error@@Base+0x214>
   188a4:	cmn	r0, #1
   188a8:	bne	188c4 <argp_error@@Base+0xa70>
   188ac:	b	187b0 <argp_error@@Base+0x95c>
   188b0:	cmp	r8, #0
   188b4:	bne	188cc <argp_error@@Base+0xa78>
   188b8:	ldr	r3, [sp, #28]
   188bc:	str	r3, [r4, #8]
   188c0:	mov	r0, #63	; 0x3f
   188c4:	add	sp, sp, #36	; 0x24
   188c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188cc:	ldr	r3, [sp, #28]
   188d0:	ldr	r2, [r9]
   188d4:	ldr	r1, [pc, #484]	; 18ac0 <argp_error@@Base+0xc6c>
   188d8:	ldr	r0, [pc, #484]	; 18ac4 <argp_error@@Base+0xc70>
   188dc:	ldr	r0, [r0]
   188e0:	bl	11280 <fprintf@plt>
   188e4:	b	188b8 <argp_error@@Base+0xa64>
   188e8:	ldrb	r3, [r0, #1]
   188ec:	ldr	r2, [sp, #24]
   188f0:	cmp	r3, #59	; 0x3b
   188f4:	movne	r3, #0
   188f8:	moveq	r3, #1
   188fc:	cmp	r2, #0
   18900:	moveq	r3, #0
   18904:	cmp	r3, #0
   18908:	beq	18814 <argp_error@@Base+0x9c0>
   1890c:	ldrb	r3, [sl, #1]
   18910:	cmp	r3, #0
   18914:	strne	fp, [r4, #12]
   18918:	bne	18930 <argp_error@@Base+0xadc>
   1891c:	ldr	r3, [r4]
   18920:	cmp	r5, r3
   18924:	beq	18974 <argp_error@@Base+0xb20>
   18928:	ldr	r3, [r9, r3, lsl #2]
   1892c:	str	r3, [r4, #12]
   18930:	ldr	r3, [r4, #12]
   18934:	str	r3, [r4, #20]
   18938:	mov	r3, #0
   1893c:	str	r3, [r4, #12]
   18940:	ldr	r2, [pc, #384]	; 18ac8 <argp_error@@Base+0xc74>
   18944:	str	r2, [sp, #16]
   18948:	str	r8, [sp, #12]
   1894c:	str	r4, [sp, #8]
   18950:	str	r3, [sp, #4]
   18954:	ldr	r3, [sp, #72]	; 0x48
   18958:	str	r3, [sp]
   1895c:	ldr	r3, [sp, #24]
   18960:	mov	r2, r6
   18964:	mov	r1, r9
   18968:	mov	r0, r5
   1896c:	bl	18068 <argp_error@@Base+0x214>
   18970:	b	188c4 <argp_error@@Base+0xa70>
   18974:	cmp	r8, #0
   18978:	bne	18998 <argp_error@@Base+0xb44>
   1897c:	ldr	r3, [sp, #28]
   18980:	str	r3, [r4, #8]
   18984:	ldrb	r0, [r6]
   18988:	cmp	r0, #58	; 0x3a
   1898c:	moveq	r0, #58	; 0x3a
   18990:	movne	r0, #63	; 0x3f
   18994:	b	188c4 <argp_error@@Base+0xa70>
   18998:	ldr	r3, [sp, #28]
   1899c:	ldr	r2, [r9]
   189a0:	ldr	r1, [pc, #292]	; 18acc <argp_error@@Base+0xc78>
   189a4:	ldr	r0, [pc, #280]	; 18ac4 <argp_error@@Base+0xc70>
   189a8:	ldr	r0, [r0]
   189ac:	bl	11280 <fprintf@plt>
   189b0:	b	1897c <argp_error@@Base+0xb28>
   189b4:	ldrb	r3, [r0, #2]
   189b8:	cmp	r3, #58	; 0x3a
   189bc:	beq	189e8 <argp_error@@Base+0xb94>
   189c0:	ldrb	r3, [sl, #1]
   189c4:	cmp	r3, #0
   189c8:	beq	18a14 <argp_error@@Base+0xbc0>
   189cc:	str	fp, [r4, #12]
   189d0:	ldr	r3, [r4]
   189d4:	add	r3, r3, #1
   189d8:	str	r3, [r4]
   189dc:	mov	r3, #0
   189e0:	str	r3, [r4, #20]
   189e4:	b	18820 <argp_error@@Base+0x9cc>
   189e8:	ldrb	r3, [sl, #1]
   189ec:	cmp	r3, #0
   189f0:	strne	fp, [r4, #12]
   189f4:	ldrne	r3, [r4]
   189f8:	addne	r3, r3, #1
   189fc:	strne	r3, [r4]
   18a00:	moveq	r3, #0
   18a04:	streq	r3, [r4, #12]
   18a08:	mov	r3, #0
   18a0c:	str	r3, [r4, #20]
   18a10:	b	18820 <argp_error@@Base+0x9cc>
   18a14:	ldr	r3, [r4]
   18a18:	cmp	r5, r3
   18a1c:	beq	18a34 <argp_error@@Base+0xbe0>
   18a20:	add	r2, r3, #1
   18a24:	str	r2, [r4]
   18a28:	ldr	r3, [r9, r3, lsl #2]
   18a2c:	str	r3, [r4, #12]
   18a30:	b	189dc <argp_error@@Base+0xb88>
   18a34:	cmp	r8, #0
   18a38:	bne	18a58 <argp_error@@Base+0xc04>
   18a3c:	ldr	r3, [sp, #28]
   18a40:	str	r3, [r4, #8]
   18a44:	ldrb	r7, [r6]
   18a48:	cmp	r7, #58	; 0x3a
   18a4c:	moveq	r7, #58	; 0x3a
   18a50:	movne	r7, #63	; 0x3f
   18a54:	b	189dc <argp_error@@Base+0xb88>
   18a58:	ldr	r3, [sp, #28]
   18a5c:	ldr	r2, [r9]
   18a60:	ldr	r1, [pc, #100]	; 18acc <argp_error@@Base+0xc78>
   18a64:	ldr	r0, [pc, #88]	; 18ac4 <argp_error@@Base+0xc70>
   18a68:	ldr	r0, [r0]
   18a6c:	bl	11280 <fprintf@plt>
   18a70:	b	18a3c <argp_error@@Base+0xbe8>
   18a74:	mvn	r0, #0
   18a78:	b	188c4 <argp_error@@Base+0xa70>
   18a7c:	mvn	r0, #0
   18a80:	b	188c4 <argp_error@@Base+0xa70>
   18a84:	ldrb	r3, [sl]
   18a88:	cmp	r3, #45	; 0x2d
   18a8c:	beq	18768 <argp_error@@Base+0x914>
   18a90:	ldr	r3, [r4, #24]
   18a94:	cmp	r3, #0
   18a98:	beq	18a7c <argp_error@@Base+0xc28>
   18a9c:	add	r3, r7, #1
   18aa0:	str	r3, [r4]
   18aa4:	ldr	r3, [r9, r7, lsl #2]
   18aa8:	str	r3, [r4, #12]
   18aac:	mov	r0, #1
   18ab0:	b	188c4 <argp_error@@Base+0xa70>
   18ab4:	andeq	fp, r1, r4, lsl r7
   18ab8:	andeq	ip, r1, r4, asr #32
   18abc:	andeq	fp, r1, ip, lsr r3
   18ac0:	andeq	ip, r1, r4, asr r0
   18ac4:			; <UNDEFINED> instruction: 0x000308b8
   18ac8:	muleq	r1, ip, r0
   18acc:	andeq	ip, r1, r0, ror r0
   18ad0:	push	{r4, r5, lr}
   18ad4:	sub	sp, sp, #20
   18ad8:	ldr	r4, [pc, #84]	; 18b34 <argp_error@@Base+0xce0>
   18adc:	ldr	r5, [pc, #84]	; 18b38 <argp_error@@Base+0xce4>
   18ae0:	ldr	ip, [r5]
   18ae4:	str	ip, [r4]
   18ae8:	ldr	ip, [r5, #4]
   18aec:	str	ip, [r4, #4]
   18af0:	ldr	ip, [sp, #40]	; 0x28
   18af4:	str	ip, [sp, #12]
   18af8:	str	r4, [sp, #8]
   18afc:	ldr	ip, [sp, #36]	; 0x24
   18b00:	str	ip, [sp, #4]
   18b04:	ldr	ip, [sp, #32]
   18b08:	str	ip, [sp]
   18b0c:	bl	18554 <argp_error@@Base+0x700>
   18b10:	ldr	r3, [r4]
   18b14:	str	r3, [r5]
   18b18:	ldr	r2, [r4, #12]
   18b1c:	ldr	r3, [pc, #24]	; 18b3c <argp_error@@Base+0xce8>
   18b20:	str	r2, [r3]
   18b24:	ldr	r3, [r4, #8]
   18b28:	str	r3, [r5, #8]
   18b2c:	add	sp, sp, #20
   18b30:	pop	{r4, r5, pc}
   18b34:	andeq	r0, r3, r8, ror #17
   18b38:	andeq	r0, r3, r0, lsr #17
   18b3c:	andeq	r0, r3, r4, asr #18
   18b40:	push	{lr}		; (str lr, [sp, #-4]!)
   18b44:	sub	sp, sp, #20
   18b48:	mov	r3, #1
   18b4c:	str	r3, [sp, #8]
   18b50:	mov	r3, #0
   18b54:	str	r3, [sp, #4]
   18b58:	str	r3, [sp]
   18b5c:	bl	18ad0 <argp_error@@Base+0xc7c>
   18b60:	add	sp, sp, #20
   18b64:	pop	{pc}		; (ldr pc, [sp], #4)
   18b68:	push	{r4, r5, r6, lr}
   18b6c:	mov	r6, r0
   18b70:	mov	r5, r1
   18b74:	subs	r4, r2, #0
   18b78:	beq	18ba4 <argp_error@@Base+0xd50>
   18b7c:	mov	r1, r4
   18b80:	mvn	r0, #0
   18b84:	bl	19340 <argp_error@@Base+0x14ec>
   18b88:	cmp	r0, r5
   18b8c:	bcs	18ba4 <argp_error@@Base+0xd50>
   18b90:	bl	1128c <__errno_location@plt>
   18b94:	mov	r3, #12
   18b98:	str	r3, [r0]
   18b9c:	mov	r0, #0
   18ba0:	pop	{r4, r5, r6, pc}
   18ba4:	mul	r1, r5, r4
   18ba8:	mov	r0, r6
   18bac:	bl	14d84 <_obstack_memory_used@@Base+0xb5c>
   18bb0:	pop	{r4, r5, r6, pc}
   18bb4:	push	{r4, r5, r6, r7, r8, lr}
   18bb8:	mov	r8, r0
   18bbc:	mov	r7, r1
   18bc0:	mov	r6, r2
   18bc4:	mov	r5, r3
   18bc8:	mov	r0, #36	; 0x24
   18bcc:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   18bd0:	subs	r4, r0, #0
   18bd4:	beq	18c14 <argp_error@@Base+0xdc0>
   18bd8:	str	r8, [r4]
   18bdc:	str	r7, [r4, #4]
   18be0:	str	r6, [r4, #8]
   18be4:	str	r5, [r4, #12]
   18be8:	mov	r3, #0
   18bec:	str	r3, [r4, #20]
   18bf0:	str	r3, [r4, #16]
   18bf4:	mov	r0, #200	; 0xc8
   18bf8:	bl	14d54 <_obstack_memory_used@@Base+0xb2c>
   18bfc:	str	r0, [r4, #24]
   18c00:	cmp	r0, #0
   18c04:	strne	r0, [r4, #28]
   18c08:	addne	r0, r0, #200	; 0xc8
   18c0c:	strne	r0, [r4, #32]
   18c10:	beq	18c1c <argp_error@@Base+0xdc8>
   18c14:	mov	r0, r4
   18c18:	pop	{r4, r5, r6, r7, r8, pc}
   18c1c:	mov	r0, r4
   18c20:	bl	13dd8 <argp_parse@@Base+0xbf4>
   18c24:	mov	r4, #0
   18c28:	b	18c14 <argp_error@@Base+0xdc0>
   18c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c30:	sub	sp, sp, #20
   18c34:	mov	r4, r0
   18c38:	ldr	r2, [r0, #24]
   18c3c:	ldr	r3, [r0, #16]
   18c40:	add	r9, r2, r3
   18c44:	mov	sl, #32
   18c48:	b	18cf4 <argp_error@@Base+0xea0>
   18c4c:	add	r5, r5, #1
   18c50:	cmp	r6, r5
   18c54:	beq	18c84 <argp_error@@Base+0xe30>
   18c58:	ldr	r0, [r4]
   18c5c:	ldr	r3, [r0, #20]
   18c60:	ldr	r2, [r0, #24]
   18c64:	cmp	r3, r2
   18c68:	addcc	r2, r3, #1
   18c6c:	strcc	r2, [r0, #20]
   18c70:	strbcc	sl, [r3]
   18c74:	bcc	18c4c <argp_error@@Base+0xdf8>
   18c78:	mov	r1, sl
   18c7c:	bl	112d4 <__overflow@plt>
   18c80:	b	18c4c <argp_error@@Base+0xdf8>
   18c84:	str	r6, [r4, #20]
   18c88:	ldr	fp, [r4, #28]
   18c8c:	str	fp, [sp, #8]
   18c90:	str	r9, [sp, #4]
   18c94:	sub	r3, fp, r9
   18c98:	str	r3, [sp]
   18c9c:	mov	r2, r3
   18ca0:	mov	r1, #10
   18ca4:	mov	r0, r9
   18ca8:	bl	112c8 <memchr@plt>
   18cac:	mov	r7, r0
   18cb0:	ldr	r3, [r4, #20]
   18cb4:	cmp	r3, #0
   18cb8:	movlt	r3, #0
   18cbc:	strlt	r3, [r4, #20]
   18cc0:	cmp	r7, #0
   18cc4:	beq	18d64 <argp_error@@Base+0xf10>
   18cc8:	ldr	r0, [r4, #20]
   18ccc:	mov	r5, r7
   18cd0:	ldr	r8, [r4, #8]
   18cd4:	ldr	r3, [sp, #4]
   18cd8:	sub	r3, r7, r3
   18cdc:	add	r3, r3, r0
   18ce0:	cmp	r3, r8
   18ce4:	bge	18db4 <argp_error@@Base+0xf60>
   18ce8:	mov	r3, #0
   18cec:	str	r3, [r4, #20]
   18cf0:	add	r9, r7, #1
   18cf4:	ldr	fp, [r4, #28]
   18cf8:	cmp	r9, fp
   18cfc:	bcs	18d9c <argp_error@@Base+0xf48>
   18d00:	ldr	r3, [r4, #20]
   18d04:	cmp	r3, #0
   18d08:	bne	18c88 <argp_error@@Base+0xe34>
   18d0c:	ldr	r6, [r4, #4]
   18d10:	cmp	r6, #0
   18d14:	beq	19160 <argp_error@@Base+0x130c>
   18d18:	add	r3, fp, r6
   18d1c:	ldr	r2, [r4, #32]
   18d20:	cmp	r2, r3
   18d24:	movls	r5, #0
   18d28:	bls	18c58 <argp_error@@Base+0xe04>
   18d2c:	add	r5, r9, r6
   18d30:	sub	r2, fp, r9
   18d34:	mov	r1, r9
   18d38:	mov	r0, r5
   18d3c:	bl	11118 <memmove@plt>
   18d40:	ldr	r3, [r4, #28]
   18d44:	add	r3, r3, r6
   18d48:	str	r3, [r4, #28]
   18d4c:	mov	r2, r6
   18d50:	mov	r1, sl
   18d54:	mov	r0, r9
   18d58:	bl	112b0 <memset@plt>
   18d5c:	mov	r9, r5
   18d60:	b	18c84 <argp_error@@Base+0xe30>
   18d64:	ldr	r3, [r4, #20]
   18d68:	ldr	r2, [sp]
   18d6c:	add	r3, r2, r3
   18d70:	ldr	r6, [r4, #8]
   18d74:	cmp	r3, r6
   18d78:	bcc	18d98 <argp_error@@Base+0xf44>
   18d7c:	sub	r6, r6, #1
   18d80:	ldr	r3, [r4, #12]
   18d84:	str	r3, [sp, #12]
   18d88:	cmp	r3, #0
   18d8c:	blt	18ea8 <argp_error@@Base+0x1054>
   18d90:	mov	r7, fp
   18d94:	b	18dc8 <argp_error@@Base+0xf74>
   18d98:	str	r3, [r4, #20]
   18d9c:	ldr	r3, [r4, #28]
   18da0:	ldr	r2, [r4, #24]
   18da4:	sub	r3, r3, r2
   18da8:	str	r3, [r4, #16]
   18dac:	add	sp, sp, #20
   18db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18db4:	sub	r6, r8, #1
   18db8:	ldr	r3, [r4, #12]
   18dbc:	str	r3, [sp, #12]
   18dc0:	cmp	r3, #0
   18dc4:	blt	18e5c <argp_error@@Base+0x1008>
   18dc8:	ldr	r5, [r4, #20]
   18dcc:	rsb	r5, r5, #1
   18dd0:	add	r5, r5, r6
   18dd4:	adds	r5, r9, r5
   18dd8:	bcs	19188 <argp_error@@Base+0x1334>
   18ddc:	bl	11250 <__ctype_b_loc@plt>
   18de0:	ldr	r0, [r0]
   18de4:	mov	r3, r5
   18de8:	mov	r1, r3
   18dec:	sub	r3, r3, #1
   18df0:	ldrb	r2, [r1]
   18df4:	lsl	r2, r2, #1
   18df8:	ldrh	r2, [r0, r2]
   18dfc:	tst	r2, #1
   18e00:	bne	18ec8 <argp_error@@Base+0x1074>
   18e04:	mov	r1, r3
   18e08:	cmp	r3, r9
   18e0c:	bcs	18de8 <argp_error@@Base+0xf94>
   18e10:	add	r6, r1, #1
   18e14:	cmp	r6, r9
   18e18:	bhi	18f04 <argp_error@@Base+0x10b0>
   18e1c:	cmp	r5, r7
   18e20:	bcs	18fb4 <argp_error@@Base+0x1160>
   18e24:	add	r6, r5, #1
   18e28:	mov	r8, r7
   18e2c:	mov	r5, r6
   18e30:	cmp	r8, r6
   18e34:	beq	18fb4 <argp_error@@Base+0x1160>
   18e38:	bl	11250 <__ctype_b_loc@plt>
   18e3c:	add	r6, r6, #1
   18e40:	ldrb	r3, [r5]
   18e44:	ldr	r2, [r0]
   18e48:	lsl	r3, r3, #1
   18e4c:	ldrh	r3, [r2, r3]
   18e50:	tst	r3, #1
   18e54:	beq	18e2c <argp_error@@Base+0xfd8>
   18e58:	b	18fc8 <argp_error@@Base+0x1174>
   18e5c:	cmp	fp, r7
   18e60:	bls	18ea8 <argp_error@@Base+0x1054>
   18e64:	sub	r0, r6, r0
   18e68:	ldr	r3, [sp, #8]
   18e6c:	sub	r2, r3, r7
   18e70:	mov	r1, r7
   18e74:	add	r0, r9, r0
   18e78:	bl	11118 <memmove@plt>
   18e7c:	ldr	r3, [r4, #20]
   18e80:	sub	r6, r6, r3
   18e84:	add	r6, r9, r6
   18e88:	sub	r5, r6, r7
   18e8c:	ldr	r3, [r4, #28]
   18e90:	sub	r5, r3, r5
   18e94:	str	r5, [r4, #28]
   18e98:	mov	r3, #0
   18e9c:	str	r3, [r4, #20]
   18ea0:	add	r9, r9, r8
   18ea4:	b	18cf4 <argp_error@@Base+0xea0>
   18ea8:	ldr	r3, [r4, #20]
   18eac:	ldr	r2, [sp]
   18eb0:	add	r3, r2, r3
   18eb4:	str	r3, [r4, #20]
   18eb8:	sub	r3, r6, r3
   18ebc:	add	r3, fp, r3
   18ec0:	str	r3, [r4, #28]
   18ec4:	b	18d9c <argp_error@@Base+0xf48>
   18ec8:	add	r6, r1, #1
   18ecc:	cmp	r6, r9
   18ed0:	bls	18e1c <argp_error@@Base+0xfc8>
   18ed4:	cmp	r1, r9
   18ed8:	bcc	18f04 <argp_error@@Base+0x10b0>
   18edc:	sub	ip, r9, #1
   18ee0:	mov	r1, r3
   18ee4:	cmp	ip, r3
   18ee8:	beq	18f04 <argp_error@@Base+0x10b0>
   18eec:	sub	r3, r3, #1
   18ef0:	ldrb	r2, [r1]
   18ef4:	lsl	r2, r2, #1
   18ef8:	ldrh	r2, [r0, r2]
   18efc:	tst	r2, #1
   18f00:	bne	18ee0 <argp_error@@Base+0x108c>
   18f04:	add	r5, r1, #1
   18f08:	ldr	r3, [sp]
   18f0c:	add	r3, r3, #1
   18f10:	add	r3, r9, r3
   18f14:	cmp	r6, r3
   18f18:	beq	18fec <argp_error@@Base+0x1198>
   18f1c:	add	r3, r5, #1
   18f20:	sub	r3, r6, r3
   18f24:	ldr	r2, [sp, #12]
   18f28:	cmp	r3, r2
   18f2c:	bge	19004 <argp_error@@Base+0x11b0>
   18f30:	cmp	r6, fp
   18f34:	bcs	19004 <argp_error@@Base+0x11b0>
   18f38:	ldr	r3, [r4, #32]
   18f3c:	ldr	r2, [sp, #8]
   18f40:	sub	r3, r3, r2
   18f44:	ldr	r2, [sp, #12]
   18f48:	add	r2, r2, #1
   18f4c:	cmp	r3, r2
   18f50:	bgt	1904c <argp_error@@Base+0x11f8>
   18f54:	ldr	r0, [r4, #24]
   18f58:	cmp	r5, r0
   18f5c:	bls	18f70 <argp_error@@Base+0x111c>
   18f60:	ldr	r3, [r4]
   18f64:	sub	r2, r5, r0
   18f68:	mov	r1, #1
   18f6c:	bl	11184 <fwrite_unlocked@plt>
   18f70:	ldr	r0, [r4]
   18f74:	ldr	r3, [r0, #20]
   18f78:	ldr	r2, [r0, #24]
   18f7c:	cmp	r3, r2
   18f80:	addcc	r2, r3, #1
   18f84:	strcc	r2, [r0, #20]
   18f88:	movcc	r2, #10
   18f8c:	strbcc	r2, [r3]
   18f90:	bcs	19098 <argp_error@@Base+0x1244>
   18f94:	ldr	r7, [r4, #24]
   18f98:	ldr	r3, [sp, #4]
   18f9c:	sub	r3, r3, r7
   18fa0:	ldr	r2, [sp]
   18fa4:	add	r3, r2, r3
   18fa8:	str	r3, [sp]
   18fac:	mov	r9, r7
   18fb0:	b	19014 <argp_error@@Base+0x11c0>
   18fb4:	cmp	r5, r7
   18fb8:	moveq	r3, #0
   18fbc:	streq	r3, [r4, #20]
   18fc0:	addeq	r9, r7, #1
   18fc4:	beq	18cf4 <argp_error@@Base+0xea0>
   18fc8:	bl	11250 <__ctype_b_loc@plt>
   18fcc:	ldr	r2, [r0]
   18fd0:	mov	r6, r5
   18fd4:	ldrb	r3, [r6, #1]!
   18fd8:	lsl	r3, r3, #1
   18fdc:	ldrh	r3, [r2, r3]
   18fe0:	tst	r3, #1
   18fe4:	bne	18fd4 <argp_error@@Base+0x1180>
   18fe8:	b	18f08 <argp_error@@Base+0x10b4>
   18fec:	ldr	r3, [r4, #32]
   18ff0:	sub	r3, r3, r5
   18ff4:	ldr	r2, [sp, #12]
   18ff8:	add	r2, r2, #1
   18ffc:	cmp	r3, r2
   19000:	blt	18f30 <argp_error@@Base+0x10dc>
   19004:	mov	r3, #10
   19008:	strb	r3, [r5]
   1900c:	mov	r7, r9
   19010:	add	r9, r5, #1
   19014:	mov	r8, r6
   19018:	ldr	r3, [r4, #12]
   1901c:	sub	r2, r6, r9
   19020:	cmp	r2, r3
   19024:	bge	190b4 <argp_error@@Base+0x1260>
   19028:	ldr	r2, [sp]
   1902c:	add	r2, r2, #1
   19030:	add	r2, r7, r2
   19034:	cmp	r6, r2
   19038:	beq	190a4 <argp_error@@Base+0x1250>
   1903c:	cmp	r3, #0
   19040:	movgt	r5, #0
   19044:	bgt	19118 <argp_error@@Base+0x12c4>
   19048:	b	190d8 <argp_error@@Base+0x1284>
   1904c:	ldr	r3, [sp, #8]
   19050:	sub	r7, r3, r6
   19054:	mov	r0, r2
   19058:	mov	r2, r7
   1905c:	mov	r1, r6
   19060:	add	r0, r5, r0
   19064:	bl	11118 <memmove@plt>
   19068:	ldr	r6, [r4, #12]
   1906c:	add	r6, r6, #1
   19070:	add	r6, r5, r6
   19074:	add	r7, r6, r7
   19078:	ldr	r3, [sp, #4]
   1907c:	sub	r3, r7, r3
   19080:	str	r3, [sp]
   19084:	mov	r3, #10
   19088:	strb	r3, [r5]
   1908c:	mov	r7, r9
   19090:	add	r9, r5, #1
   19094:	b	19014 <argp_error@@Base+0x11c0>
   19098:	mov	r1, #10
   1909c:	bl	112d4 <__overflow@plt>
   190a0:	b	18f94 <argp_error@@Base+0x1140>
   190a4:	ldr	r2, [r4, #32]
   190a8:	sub	r2, r2, r6
   190ac:	cmp	r3, r2
   190b0:	bgt	1903c <argp_error@@Base+0x11e8>
   190b4:	cmp	r3, #0
   190b8:	ble	190d8 <argp_error@@Base+0x1284>
   190bc:	mov	r3, r9
   190c0:	strb	sl, [r3], #1
   190c4:	sub	r1, r3, r9
   190c8:	ldr	r2, [r4, #12]
   190cc:	cmp	r1, r2
   190d0:	blt	190c0 <argp_error@@Base+0x126c>
   190d4:	mov	r9, r3
   190d8:	cmp	r9, r6
   190dc:	bcc	19144 <argp_error@@Base+0x12f0>
   190e0:	sub	r7, r8, r7
   190e4:	ldr	r3, [sp]
   190e8:	sub	r7, r3, r7
   190ec:	add	r7, r9, r7
   190f0:	str	r7, [r4, #28]
   190f4:	ldr	r3, [r4, #12]
   190f8:	cmp	r3, #0
   190fc:	mvneq	r3, #0
   19100:	str	r3, [r4, #20]
   19104:	b	18cf4 <argp_error@@Base+0xea0>
   19108:	add	r5, r5, #1
   1910c:	ldr	r3, [r4, #12]
   19110:	cmp	r3, r5
   19114:	ble	190d8 <argp_error@@Base+0x1284>
   19118:	ldr	r0, [r4]
   1911c:	ldr	r3, [r0, #20]
   19120:	ldr	r2, [r0, #24]
   19124:	cmp	r3, r2
   19128:	addcc	r2, r3, #1
   1912c:	strcc	r2, [r0, #20]
   19130:	strbcc	sl, [r3]
   19134:	bcc	19108 <argp_error@@Base+0x12b4>
   19138:	mov	r1, sl
   1913c:	bl	112d4 <__overflow@plt>
   19140:	b	19108 <argp_error@@Base+0x12b4>
   19144:	ldr	r3, [sp]
   19148:	add	r2, r7, r3
   1914c:	sub	r2, r2, r8
   19150:	mov	r1, r6
   19154:	mov	r0, r9
   19158:	bl	11118 <memmove@plt>
   1915c:	b	190e0 <argp_error@@Base+0x128c>
   19160:	str	fp, [sp, #8]
   19164:	str	r9, [sp, #4]
   19168:	sub	r3, fp, r9
   1916c:	str	r3, [sp]
   19170:	mov	r2, r3
   19174:	mov	r1, #10
   19178:	mov	r0, r9
   1917c:	bl	112c8 <memchr@plt>
   19180:	mov	r7, r0
   19184:	b	18cc0 <argp_error@@Base+0xe6c>
   19188:	mov	r1, r5
   1918c:	b	18e10 <argp_error@@Base+0xfbc>
   19190:	push	{r4, lr}
   19194:	mov	r4, r0
   19198:	bl	18c2c <argp_error@@Base+0xdd8>
   1919c:	ldr	r2, [r4, #28]
   191a0:	ldr	r0, [r4, #24]
   191a4:	cmp	r2, r0
   191a8:	bls	191bc <argp_error@@Base+0x1368>
   191ac:	ldr	r3, [r4]
   191b0:	sub	r2, r2, r0
   191b4:	mov	r1, #1
   191b8:	bl	11184 <fwrite_unlocked@plt>
   191bc:	ldr	r0, [r4, #24]
   191c0:	bl	13dd8 <argp_parse@@Base+0xbf4>
   191c4:	mov	r0, r4
   191c8:	bl	13dd8 <argp_parse@@Base+0xbf4>
   191cc:	pop	{r4, pc}
   191d0:	ldr	r3, [r0, #32]
   191d4:	ldr	r2, [r0, #28]
   191d8:	sub	r3, r3, r2
   191dc:	cmp	r3, r1
   191e0:	bcc	191ec <argp_error@@Base+0x1398>
   191e4:	mov	r0, #1
   191e8:	bx	lr
   191ec:	push	{r4, r5, r6, lr}
   191f0:	mov	r5, r1
   191f4:	mov	r4, r0
   191f8:	bl	18c2c <argp_error@@Base+0xdd8>
   191fc:	ldr	r0, [r4, #24]
   19200:	ldr	r2, [r4, #28]
   19204:	ldr	r3, [r4]
   19208:	sub	r2, r2, r0
   1920c:	mov	r1, #1
   19210:	bl	11184 <fwrite_unlocked@plt>
   19214:	ldr	r2, [r4, #28]
   19218:	ldr	r3, [r4, #24]
   1921c:	sub	r1, r2, r3
   19220:	cmp	r0, r1
   19224:	bne	19268 <argp_error@@Base+0x1414>
   19228:	str	r3, [r4, #28]
   1922c:	mov	r2, #0
   19230:	str	r2, [r4, #16]
   19234:	ldr	r1, [r4, #32]
   19238:	sub	r1, r1, r3
   1923c:	cmp	r5, r1
   19240:	bls	19260 <argp_error@@Base+0x140c>
   19244:	adds	r5, r5, r1
   19248:	bcc	19294 <argp_error@@Base+0x1440>
   1924c:	bl	1128c <__errno_location@plt>
   19250:	mov	r3, #12
   19254:	str	r3, [r0]
   19258:	mov	r0, #0
   1925c:	pop	{r4, r5, r6, pc}
   19260:	mov	r0, #1
   19264:	pop	{r4, r5, r6, pc}
   19268:	sub	r2, r2, r0
   1926c:	str	r2, [r4, #28]
   19270:	ldr	r1, [r4, #16]
   19274:	sub	r1, r1, r0
   19278:	str	r1, [r4, #16]
   1927c:	sub	r2, r2, r3
   19280:	add	r1, r3, r0
   19284:	mov	r0, r3
   19288:	bl	11118 <memmove@plt>
   1928c:	mov	r0, #0
   19290:	pop	{r4, r5, r6, pc}
   19294:	mov	r1, r5
   19298:	mov	r0, r3
   1929c:	bl	14d84 <_obstack_memory_used@@Base+0xb5c>
   192a0:	cmp	r0, #0
   192a4:	beq	1924c <argp_error@@Base+0x13f8>
   192a8:	str	r0, [r4, #24]
   192ac:	add	r5, r0, r5
   192b0:	str	r5, [r4, #32]
   192b4:	str	r0, [r4, #28]
   192b8:	mov	r0, #1
   192bc:	pop	{r4, r5, r6, pc}
   192c0:	push	{r1, r2, r3}
   192c4:	push	{r4, r5, r6, r7, lr}
   192c8:	sub	sp, sp, #8
   192cc:	mov	r5, r0
   192d0:	ldr	r7, [sp, #28]
   192d4:	mov	r1, #150	; 0x96
   192d8:	add	r6, sp, #32
   192dc:	mov	r0, r5
   192e0:	bl	191d0 <argp_error@@Base+0x137c>
   192e4:	cmp	r0, #0
   192e8:	beq	1931c <argp_error@@Base+0x14c8>
   192ec:	str	r6, [sp, #4]
   192f0:	ldr	r0, [r5, #28]
   192f4:	ldr	r4, [r5, #32]
   192f8:	sub	r4, r4, r0
   192fc:	mov	r3, r6
   19300:	mov	r2, r7
   19304:	mov	r1, r4
   19308:	bl	11328 <vsnprintf@plt>
   1930c:	cmp	r4, r0
   19310:	bhi	19324 <argp_error@@Base+0x14d0>
   19314:	add	r1, r0, #1
   19318:	b	192dc <argp_error@@Base+0x1488>
   1931c:	mvn	r0, #0
   19320:	b	19330 <argp_error@@Base+0x14dc>
   19324:	ldr	r3, [r5, #28]
   19328:	add	r3, r3, r0
   1932c:	str	r3, [r5, #28]
   19330:	add	sp, sp, #8
   19334:	pop	{r4, r5, r6, r7, lr}
   19338:	add	sp, sp, #12
   1933c:	bx	lr
   19340:	subs	r2, r1, #1
   19344:	bxeq	lr
   19348:	bcc	19520 <argp_error@@Base+0x16cc>
   1934c:	cmp	r0, r1
   19350:	bls	19504 <argp_error@@Base+0x16b0>
   19354:	tst	r1, r2
   19358:	beq	19510 <argp_error@@Base+0x16bc>
   1935c:	clz	r3, r0
   19360:	clz	r2, r1
   19364:	sub	r3, r2, r3
   19368:	rsbs	r3, r3, #31
   1936c:	addne	r3, r3, r3, lsl #1
   19370:	mov	r2, #0
   19374:	addne	pc, pc, r3, lsl #2
   19378:	nop			; (mov r0, r0)
   1937c:	cmp	r0, r1, lsl #31
   19380:	adc	r2, r2, r2
   19384:	subcs	r0, r0, r1, lsl #31
   19388:	cmp	r0, r1, lsl #30
   1938c:	adc	r2, r2, r2
   19390:	subcs	r0, r0, r1, lsl #30
   19394:	cmp	r0, r1, lsl #29
   19398:	adc	r2, r2, r2
   1939c:	subcs	r0, r0, r1, lsl #29
   193a0:	cmp	r0, r1, lsl #28
   193a4:	adc	r2, r2, r2
   193a8:	subcs	r0, r0, r1, lsl #28
   193ac:	cmp	r0, r1, lsl #27
   193b0:	adc	r2, r2, r2
   193b4:	subcs	r0, r0, r1, lsl #27
   193b8:	cmp	r0, r1, lsl #26
   193bc:	adc	r2, r2, r2
   193c0:	subcs	r0, r0, r1, lsl #26
   193c4:	cmp	r0, r1, lsl #25
   193c8:	adc	r2, r2, r2
   193cc:	subcs	r0, r0, r1, lsl #25
   193d0:	cmp	r0, r1, lsl #24
   193d4:	adc	r2, r2, r2
   193d8:	subcs	r0, r0, r1, lsl #24
   193dc:	cmp	r0, r1, lsl #23
   193e0:	adc	r2, r2, r2
   193e4:	subcs	r0, r0, r1, lsl #23
   193e8:	cmp	r0, r1, lsl #22
   193ec:	adc	r2, r2, r2
   193f0:	subcs	r0, r0, r1, lsl #22
   193f4:	cmp	r0, r1, lsl #21
   193f8:	adc	r2, r2, r2
   193fc:	subcs	r0, r0, r1, lsl #21
   19400:	cmp	r0, r1, lsl #20
   19404:	adc	r2, r2, r2
   19408:	subcs	r0, r0, r1, lsl #20
   1940c:	cmp	r0, r1, lsl #19
   19410:	adc	r2, r2, r2
   19414:	subcs	r0, r0, r1, lsl #19
   19418:	cmp	r0, r1, lsl #18
   1941c:	adc	r2, r2, r2
   19420:	subcs	r0, r0, r1, lsl #18
   19424:	cmp	r0, r1, lsl #17
   19428:	adc	r2, r2, r2
   1942c:	subcs	r0, r0, r1, lsl #17
   19430:	cmp	r0, r1, lsl #16
   19434:	adc	r2, r2, r2
   19438:	subcs	r0, r0, r1, lsl #16
   1943c:	cmp	r0, r1, lsl #15
   19440:	adc	r2, r2, r2
   19444:	subcs	r0, r0, r1, lsl #15
   19448:	cmp	r0, r1, lsl #14
   1944c:	adc	r2, r2, r2
   19450:	subcs	r0, r0, r1, lsl #14
   19454:	cmp	r0, r1, lsl #13
   19458:	adc	r2, r2, r2
   1945c:	subcs	r0, r0, r1, lsl #13
   19460:	cmp	r0, r1, lsl #12
   19464:	adc	r2, r2, r2
   19468:	subcs	r0, r0, r1, lsl #12
   1946c:	cmp	r0, r1, lsl #11
   19470:	adc	r2, r2, r2
   19474:	subcs	r0, r0, r1, lsl #11
   19478:	cmp	r0, r1, lsl #10
   1947c:	adc	r2, r2, r2
   19480:	subcs	r0, r0, r1, lsl #10
   19484:	cmp	r0, r1, lsl #9
   19488:	adc	r2, r2, r2
   1948c:	subcs	r0, r0, r1, lsl #9
   19490:	cmp	r0, r1, lsl #8
   19494:	adc	r2, r2, r2
   19498:	subcs	r0, r0, r1, lsl #8
   1949c:	cmp	r0, r1, lsl #7
   194a0:	adc	r2, r2, r2
   194a4:	subcs	r0, r0, r1, lsl #7
   194a8:	cmp	r0, r1, lsl #6
   194ac:	adc	r2, r2, r2
   194b0:	subcs	r0, r0, r1, lsl #6
   194b4:	cmp	r0, r1, lsl #5
   194b8:	adc	r2, r2, r2
   194bc:	subcs	r0, r0, r1, lsl #5
   194c0:	cmp	r0, r1, lsl #4
   194c4:	adc	r2, r2, r2
   194c8:	subcs	r0, r0, r1, lsl #4
   194cc:	cmp	r0, r1, lsl #3
   194d0:	adc	r2, r2, r2
   194d4:	subcs	r0, r0, r1, lsl #3
   194d8:	cmp	r0, r1, lsl #2
   194dc:	adc	r2, r2, r2
   194e0:	subcs	r0, r0, r1, lsl #2
   194e4:	cmp	r0, r1, lsl #1
   194e8:	adc	r2, r2, r2
   194ec:	subcs	r0, r0, r1, lsl #1
   194f0:	cmp	r0, r1
   194f4:	adc	r2, r2, r2
   194f8:	subcs	r0, r0, r1
   194fc:	mov	r0, r2
   19500:	bx	lr
   19504:	moveq	r0, #1
   19508:	movne	r0, #0
   1950c:	bx	lr
   19510:	clz	r2, r1
   19514:	rsb	r2, r2, #31
   19518:	lsr	r0, r0, r2
   1951c:	bx	lr
   19520:	cmp	r0, #0
   19524:	mvnne	r0, #0
   19528:	b	1978c <argp_error@@Base+0x1938>
   1952c:	cmp	r1, #0
   19530:	beq	19520 <argp_error@@Base+0x16cc>
   19534:	push	{r0, r1, lr}
   19538:	bl	19340 <argp_error@@Base+0x14ec>
   1953c:	pop	{r1, r2, lr}
   19540:	mul	r3, r2, r0
   19544:	sub	r1, r1, r3
   19548:	bx	lr
   1954c:	cmp	r1, #0
   19550:	beq	1975c <argp_error@@Base+0x1908>
   19554:	eor	ip, r0, r1
   19558:	rsbmi	r1, r1, #0
   1955c:	subs	r2, r1, #1
   19560:	beq	19728 <argp_error@@Base+0x18d4>
   19564:	movs	r3, r0
   19568:	rsbmi	r3, r0, #0
   1956c:	cmp	r3, r1
   19570:	bls	19734 <argp_error@@Base+0x18e0>
   19574:	tst	r1, r2
   19578:	beq	19744 <argp_error@@Base+0x18f0>
   1957c:	clz	r2, r3
   19580:	clz	r0, r1
   19584:	sub	r2, r0, r2
   19588:	rsbs	r2, r2, #31
   1958c:	addne	r2, r2, r2, lsl #1
   19590:	mov	r0, #0
   19594:	addne	pc, pc, r2, lsl #2
   19598:	nop			; (mov r0, r0)
   1959c:	cmp	r3, r1, lsl #31
   195a0:	adc	r0, r0, r0
   195a4:	subcs	r3, r3, r1, lsl #31
   195a8:	cmp	r3, r1, lsl #30
   195ac:	adc	r0, r0, r0
   195b0:	subcs	r3, r3, r1, lsl #30
   195b4:	cmp	r3, r1, lsl #29
   195b8:	adc	r0, r0, r0
   195bc:	subcs	r3, r3, r1, lsl #29
   195c0:	cmp	r3, r1, lsl #28
   195c4:	adc	r0, r0, r0
   195c8:	subcs	r3, r3, r1, lsl #28
   195cc:	cmp	r3, r1, lsl #27
   195d0:	adc	r0, r0, r0
   195d4:	subcs	r3, r3, r1, lsl #27
   195d8:	cmp	r3, r1, lsl #26
   195dc:	adc	r0, r0, r0
   195e0:	subcs	r3, r3, r1, lsl #26
   195e4:	cmp	r3, r1, lsl #25
   195e8:	adc	r0, r0, r0
   195ec:	subcs	r3, r3, r1, lsl #25
   195f0:	cmp	r3, r1, lsl #24
   195f4:	adc	r0, r0, r0
   195f8:	subcs	r3, r3, r1, lsl #24
   195fc:	cmp	r3, r1, lsl #23
   19600:	adc	r0, r0, r0
   19604:	subcs	r3, r3, r1, lsl #23
   19608:	cmp	r3, r1, lsl #22
   1960c:	adc	r0, r0, r0
   19610:	subcs	r3, r3, r1, lsl #22
   19614:	cmp	r3, r1, lsl #21
   19618:	adc	r0, r0, r0
   1961c:	subcs	r3, r3, r1, lsl #21
   19620:	cmp	r3, r1, lsl #20
   19624:	adc	r0, r0, r0
   19628:	subcs	r3, r3, r1, lsl #20
   1962c:	cmp	r3, r1, lsl #19
   19630:	adc	r0, r0, r0
   19634:	subcs	r3, r3, r1, lsl #19
   19638:	cmp	r3, r1, lsl #18
   1963c:	adc	r0, r0, r0
   19640:	subcs	r3, r3, r1, lsl #18
   19644:	cmp	r3, r1, lsl #17
   19648:	adc	r0, r0, r0
   1964c:	subcs	r3, r3, r1, lsl #17
   19650:	cmp	r3, r1, lsl #16
   19654:	adc	r0, r0, r0
   19658:	subcs	r3, r3, r1, lsl #16
   1965c:	cmp	r3, r1, lsl #15
   19660:	adc	r0, r0, r0
   19664:	subcs	r3, r3, r1, lsl #15
   19668:	cmp	r3, r1, lsl #14
   1966c:	adc	r0, r0, r0
   19670:	subcs	r3, r3, r1, lsl #14
   19674:	cmp	r3, r1, lsl #13
   19678:	adc	r0, r0, r0
   1967c:	subcs	r3, r3, r1, lsl #13
   19680:	cmp	r3, r1, lsl #12
   19684:	adc	r0, r0, r0
   19688:	subcs	r3, r3, r1, lsl #12
   1968c:	cmp	r3, r1, lsl #11
   19690:	adc	r0, r0, r0
   19694:	subcs	r3, r3, r1, lsl #11
   19698:	cmp	r3, r1, lsl #10
   1969c:	adc	r0, r0, r0
   196a0:	subcs	r3, r3, r1, lsl #10
   196a4:	cmp	r3, r1, lsl #9
   196a8:	adc	r0, r0, r0
   196ac:	subcs	r3, r3, r1, lsl #9
   196b0:	cmp	r3, r1, lsl #8
   196b4:	adc	r0, r0, r0
   196b8:	subcs	r3, r3, r1, lsl #8
   196bc:	cmp	r3, r1, lsl #7
   196c0:	adc	r0, r0, r0
   196c4:	subcs	r3, r3, r1, lsl #7
   196c8:	cmp	r3, r1, lsl #6
   196cc:	adc	r0, r0, r0
   196d0:	subcs	r3, r3, r1, lsl #6
   196d4:	cmp	r3, r1, lsl #5
   196d8:	adc	r0, r0, r0
   196dc:	subcs	r3, r3, r1, lsl #5
   196e0:	cmp	r3, r1, lsl #4
   196e4:	adc	r0, r0, r0
   196e8:	subcs	r3, r3, r1, lsl #4
   196ec:	cmp	r3, r1, lsl #3
   196f0:	adc	r0, r0, r0
   196f4:	subcs	r3, r3, r1, lsl #3
   196f8:	cmp	r3, r1, lsl #2
   196fc:	adc	r0, r0, r0
   19700:	subcs	r3, r3, r1, lsl #2
   19704:	cmp	r3, r1, lsl #1
   19708:	adc	r0, r0, r0
   1970c:	subcs	r3, r3, r1, lsl #1
   19710:	cmp	r3, r1
   19714:	adc	r0, r0, r0
   19718:	subcs	r3, r3, r1
   1971c:	cmp	ip, #0
   19720:	rsbmi	r0, r0, #0
   19724:	bx	lr
   19728:	teq	ip, r0
   1972c:	rsbmi	r0, r0, #0
   19730:	bx	lr
   19734:	movcc	r0, #0
   19738:	asreq	r0, ip, #31
   1973c:	orreq	r0, r0, #1
   19740:	bx	lr
   19744:	clz	r2, r1
   19748:	rsb	r2, r2, #31
   1974c:	cmp	ip, #0
   19750:	lsr	r0, r3, r2
   19754:	rsbmi	r0, r0, #0
   19758:	bx	lr
   1975c:	cmp	r0, #0
   19760:	mvngt	r0, #-2147483648	; 0x80000000
   19764:	movlt	r0, #-2147483648	; 0x80000000
   19768:	b	1978c <argp_error@@Base+0x1938>
   1976c:	cmp	r1, #0
   19770:	beq	1975c <argp_error@@Base+0x1908>
   19774:	push	{r0, r1, lr}
   19778:	bl	19554 <argp_error@@Base+0x1700>
   1977c:	pop	{r1, r2, lr}
   19780:	mul	r3, r2, r0
   19784:	sub	r1, r1, r3
   19788:	bx	lr
   1978c:	push	{r1, lr}
   19790:	mov	r0, #8
   19794:	bl	110dc <raise@plt>
   19798:	pop	{r1, pc}
   1979c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   197a0:	mov	r7, r0
   197a4:	ldr	r6, [pc, #72]	; 197f4 <argp_error@@Base+0x19a0>
   197a8:	ldr	r5, [pc, #72]	; 197f8 <argp_error@@Base+0x19a4>
   197ac:	add	r6, pc, r6
   197b0:	add	r5, pc, r5
   197b4:	sub	r6, r6, r5
   197b8:	mov	r8, r1
   197bc:	mov	r9, r2
   197c0:	bl	11098 <fdopen@plt-0x20>
   197c4:	asrs	r6, r6, #2
   197c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   197cc:	mov	r4, #0
   197d0:	add	r4, r4, #1
   197d4:	ldr	r3, [r5], #4
   197d8:	mov	r2, r9
   197dc:	mov	r1, r8
   197e0:	mov	r0, r7
   197e4:	blx	r3
   197e8:	cmp	r6, r4
   197ec:	bne	197d0 <argp_error@@Base+0x197c>
   197f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   197f4:	andeq	r3, r1, ip, asr r7
   197f8:	andeq	r3, r1, r4, asr r7
   197fc:	bx	lr

Disassembly of section .fini:

00019800 <.fini>:
   19800:	push	{r3, lr}
   19804:	pop	{r3, pc}
