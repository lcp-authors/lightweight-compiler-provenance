
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011380 <.init>:
   11380:	push	{r3, lr}
   11384:	bl	1176c <__assert_fail@plt+0x48>
   11388:	pop	{r3, pc}

Disassembly of section .plt:

0001138c <pthread_mutex_unlock@plt-0x14>:
   1138c:	push	{lr}		; (str lr, [sp, #-4]!)
   11390:	ldr	lr, [pc, #4]	; 1139c <pthread_mutex_unlock@plt-0x4>
   11394:	add	lr, pc, lr
   11398:	ldr	pc, [lr, #8]!
   1139c:	andeq	r3, r2, r4, ror #24

000113a0 <pthread_mutex_unlock@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #143360	; 0x23000
   113a8:	ldr	pc, [ip, #3172]!	; 0xc64

000113ac <calloc@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #143360	; 0x23000
   113b4:	ldr	pc, [ip, #3164]!	; 0xc5c

000113b8 <fputs_unlocked@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #143360	; 0x23000
   113c0:	ldr	pc, [ip, #3156]!	; 0xc54

000113c4 <wctype@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #143360	; 0x23000
   113cc:	ldr	pc, [ip, #3148]!	; 0xc4c

000113d0 <wcrtomb@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #143360	; 0x23000
   113d8:	ldr	pc, [ip, #3140]!	; 0xc44

000113dc <iswctype@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #143360	; 0x23000
   113e4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113e8 <strcmp@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #143360	; 0x23000
   113f0:	ldr	pc, [ip, #3124]!	; 0xc34

000113f4 <__gmpz_tdiv_q@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #143360	; 0x23000
   113fc:	ldr	pc, [ip, #3116]!	; 0xc2c

00011400 <strcspn@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #143360	; 0x23000
   11408:	ldr	pc, [ip, #3108]!	; 0xc24

0001140c <pthread_mutex_destroy@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #143360	; 0x23000
   11414:	ldr	pc, [ip, #3100]!	; 0xc1c

00011418 <fflush@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #143360	; 0x23000
   11420:	ldr	pc, [ip, #3092]!	; 0xc14

00011424 <wcwidth@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #143360	; 0x23000
   1142c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011430 <memmove@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #143360	; 0x23000
   11438:	ldr	pc, [ip, #3076]!	; 0xc04

0001143c <free@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #143360	; 0x23000
   11444:	ldr	pc, [ip, #3068]!	; 0xbfc

00011448 <pthread_mutex_lock@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #143360	; 0x23000
   11450:	ldr	pc, [ip, #3060]!	; 0xbf4

00011454 <_exit@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #143360	; 0x23000
   1145c:	ldr	pc, [ip, #3052]!	; 0xbec

00011460 <memcpy@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #143360	; 0x23000
   11468:	ldr	pc, [ip, #3044]!	; 0xbe4

0001146c <__gmpz_sub@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #143360	; 0x23000
   11474:	ldr	pc, [ip, #3036]!	; 0xbdc

00011478 <tolower@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #143360	; 0x23000
   11480:	ldr	pc, [ip, #3028]!	; 0xbd4

00011484 <pthread_mutex_init@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #143360	; 0x23000
   1148c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011490 <towlower@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #143360	; 0x23000
   11498:	ldr	pc, [ip, #3012]!	; 0xbc4

0001149c <mbsinit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #143360	; 0x23000
   114a4:	ldr	pc, [ip, #3004]!	; 0xbbc

000114a8 <dcgettext@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #143360	; 0x23000
   114b0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114b4 <__gmpz_get_str@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #143360	; 0x23000
   114bc:	ldr	pc, [ip, #2988]!	; 0xbac

000114c0 <realloc@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #143360	; 0x23000
   114c8:	ldr	pc, [ip, #2980]!	; 0xba4

000114cc <__gmpz_mul@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #143360	; 0x23000
   114d4:	ldr	pc, [ip, #2972]!	; 0xb9c

000114d8 <textdomain@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #143360	; 0x23000
   114e0:	ldr	pc, [ip, #2964]!	; 0xb94

000114e4 <iswcntrl@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #143360	; 0x23000
   114ec:	ldr	pc, [ip, #2956]!	; 0xb8c

000114f0 <__gmpz_out_str@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #143360	; 0x23000
   114f8:	ldr	pc, [ip, #2948]!	; 0xb84

000114fc <iswprint@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #143360	; 0x23000
   11504:	ldr	pc, [ip, #2940]!	; 0xb7c

00011508 <lseek64@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #143360	; 0x23000
   11510:	ldr	pc, [ip, #2932]!	; 0xb74

00011514 <__ctype_get_mb_cur_max@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #143360	; 0x23000
   1151c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011520 <__fpending@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #143360	; 0x23000
   11528:	ldr	pc, [ip, #2916]!	; 0xb64

0001152c <ferror_unlocked@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #143360	; 0x23000
   11534:	ldr	pc, [ip, #2908]!	; 0xb5c

00011538 <mbrtowc@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #143360	; 0x23000
   11540:	ldr	pc, [ip, #2900]!	; 0xb54

00011544 <error@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #143360	; 0x23000
   1154c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011550 <strcoll@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #143360	; 0x23000
   11558:	ldr	pc, [ip, #2884]!	; 0xb44

0001155c <puts@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #143360	; 0x23000
   11564:	ldr	pc, [ip, #2876]!	; 0xb3c

00011568 <malloc@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #143360	; 0x23000
   11570:	ldr	pc, [ip, #2868]!	; 0xb34

00011574 <__libc_start_main@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #143360	; 0x23000
   1157c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011580 <__freading@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #143360	; 0x23000
   11588:	ldr	pc, [ip, #2852]!	; 0xb24

0001158c <__gmon_start__@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #143360	; 0x23000
   11594:	ldr	pc, [ip, #2844]!	; 0xb1c

00011598 <getopt_long@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #143360	; 0x23000
   115a0:	ldr	pc, [ip, #2836]!	; 0xb14

000115a4 <__ctype_b_loc@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #143360	; 0x23000
   115ac:	ldr	pc, [ip, #2828]!	; 0xb0c

000115b0 <exit@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #143360	; 0x23000
   115b8:	ldr	pc, [ip, #2820]!	; 0xb04

000115bc <bcmp@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #143360	; 0x23000
   115c4:	ldr	pc, [ip, #2812]!	; 0xafc

000115c8 <strlen@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #143360	; 0x23000
   115d0:	ldr	pc, [ip, #2804]!	; 0xaf4

000115d4 <strchr@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #143360	; 0x23000
   115dc:	ldr	pc, [ip, #2796]!	; 0xaec

000115e0 <__gmpz_tdiv_r@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #143360	; 0x23000
   115e8:	ldr	pc, [ip, #2788]!	; 0xae4

000115ec <__gmpz_clear@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #143360	; 0x23000
   115f4:	ldr	pc, [ip, #2780]!	; 0xadc

000115f8 <__errno_location@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #143360	; 0x23000
   11600:	ldr	pc, [ip, #2772]!	; 0xad4

00011604 <iswalnum@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #143360	; 0x23000
   1160c:	ldr	pc, [ip, #2764]!	; 0xacc

00011610 <__cxa_atexit@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #143360	; 0x23000
   11618:	ldr	pc, [ip, #2756]!	; 0xac4

0001161c <memset@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #143360	; 0x23000
   11624:	ldr	pc, [ip, #2748]!	; 0xabc

00011628 <btowc@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #143360	; 0x23000
   11630:	ldr	pc, [ip, #2740]!	; 0xab4

00011634 <__printf_chk@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #143360	; 0x23000
   1163c:	ldr	pc, [ip, #2732]!	; 0xaac

00011640 <fileno@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #143360	; 0x23000
   11648:	ldr	pc, [ip, #2724]!	; 0xaa4

0001164c <__fprintf_chk@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #143360	; 0x23000
   11654:	ldr	pc, [ip, #2716]!	; 0xa9c

00011658 <memchr@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #143360	; 0x23000
   11660:	ldr	pc, [ip, #2708]!	; 0xa94

00011664 <fclose@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #143360	; 0x23000
   1166c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011670 <fseeko64@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #143360	; 0x23000
   11678:	ldr	pc, [ip, #2692]!	; 0xa84

0001167c <__gmpz_init_set_ui@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #143360	; 0x23000
   11684:	ldr	pc, [ip, #2684]!	; 0xa7c

00011688 <setlocale@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #143360	; 0x23000
   11690:	ldr	pc, [ip, #2676]!	; 0xa74

00011694 <toupper@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #143360	; 0x23000
   1169c:	ldr	pc, [ip, #2668]!	; 0xa6c

000116a0 <strrchr@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #143360	; 0x23000
   116a8:	ldr	pc, [ip, #2660]!	; 0xa64

000116ac <nl_langinfo@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #143360	; 0x23000
   116b4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116b8 <__gmpz_add@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #143360	; 0x23000
   116c0:	ldr	pc, [ip, #2644]!	; 0xa54

000116c4 <__gmpz_init_set_str@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #143360	; 0x23000
   116cc:	ldr	pc, [ip, #2636]!	; 0xa4c

000116d0 <bindtextdomain@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #143360	; 0x23000
   116d8:	ldr	pc, [ip, #2628]!	; 0xa44

000116dc <towupper@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #143360	; 0x23000
   116e4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116e8 <fputs@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #143360	; 0x23000
   116f0:	ldr	pc, [ip, #2612]!	; 0xa34

000116f4 <strncmp@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #143360	; 0x23000
   116fc:	ldr	pc, [ip, #2604]!	; 0xa2c

00011700 <abort@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #143360	; 0x23000
   11708:	ldr	pc, [ip, #2596]!	; 0xa24

0001170c <putchar_unlocked@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #143360	; 0x23000
   11714:	ldr	pc, [ip, #2588]!	; 0xa1c

00011718 <__mempcpy_chk@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #143360	; 0x23000
   11720:	ldr	pc, [ip, #2580]!	; 0xa14

00011724 <__assert_fail@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #143360	; 0x23000
   1172c:	ldr	pc, [ip, #2572]!	; 0xa0c

Disassembly of section .text:

00011730 <.text>:
   11730:	mov	fp, #0
   11734:	mov	lr, #0
   11738:	pop	{r1}		; (ldr r1, [sp], #4)
   1173c:	mov	r2, sp
   11740:	push	{r2}		; (str r2, [sp, #-4]!)
   11744:	push	{r0}		; (str r0, [sp, #-4]!)
   11748:	ldr	ip, [pc, #16]	; 11760 <__assert_fail@plt+0x3c>
   1174c:	push	{ip}		; (str ip, [sp, #-4]!)
   11750:	ldr	r0, [pc, #12]	; 11764 <__assert_fail@plt+0x40>
   11754:	ldr	r3, [pc, #12]	; 11768 <__assert_fail@plt+0x44>
   11758:	bl	11574 <__libc_start_main@plt>
   1175c:	bl	11700 <abort@plt>
   11760:	ldrdeq	r2, [r2], -r8
   11764:	andeq	r1, r1, r4, lsl fp
   11768:	andeq	r2, r2, r8, ror lr
   1176c:	ldr	r3, [pc, #20]	; 11788 <__assert_fail@plt+0x64>
   11770:	ldr	r2, [pc, #20]	; 1178c <__assert_fail@plt+0x68>
   11774:	add	r3, pc, r3
   11778:	ldr	r2, [r3, r2]
   1177c:	cmp	r2, #0
   11780:	bxeq	lr
   11784:	b	1158c <__gmon_start__@plt>
   11788:	andeq	r3, r2, r4, lsl #17
   1178c:	andeq	r0, r0, ip, lsr r1
   11790:	ldr	r0, [pc, #24]	; 117b0 <__assert_fail@plt+0x8c>
   11794:	ldr	r3, [pc, #24]	; 117b4 <__assert_fail@plt+0x90>
   11798:	cmp	r3, r0
   1179c:	bxeq	lr
   117a0:	ldr	r3, [pc, #16]	; 117b8 <__assert_fail@plt+0x94>
   117a4:	cmp	r3, #0
   117a8:	bxeq	lr
   117ac:	bx	r3
   117b0:	muleq	r3, r0, r1
   117b4:	muleq	r3, r0, r1
   117b8:	andeq	r0, r0, r0
   117bc:	ldr	r0, [pc, #36]	; 117e8 <__assert_fail@plt+0xc4>
   117c0:	ldr	r1, [pc, #36]	; 117ec <__assert_fail@plt+0xc8>
   117c4:	sub	r1, r1, r0
   117c8:	asr	r1, r1, #2
   117cc:	add	r1, r1, r1, lsr #31
   117d0:	asrs	r1, r1, #1
   117d4:	bxeq	lr
   117d8:	ldr	r3, [pc, #16]	; 117f0 <__assert_fail@plt+0xcc>
   117dc:	cmp	r3, #0
   117e0:	bxeq	lr
   117e4:	bx	r3
   117e8:	muleq	r3, r0, r1
   117ec:	muleq	r3, r0, r1
   117f0:	andeq	r0, r0, r0
   117f4:	push	{r4, lr}
   117f8:	ldr	r4, [pc, #24]	; 11818 <__assert_fail@plt+0xf4>
   117fc:	ldrb	r3, [r4]
   11800:	cmp	r3, #0
   11804:	popne	{r4, pc}
   11808:	bl	11790 <__assert_fail@plt+0x6c>
   1180c:	mov	r3, #1
   11810:	strb	r3, [r4]
   11814:	pop	{r4, pc}
   11818:	andeq	r5, r3, ip, lsr #3
   1181c:	b	117bc <__assert_fail@plt+0x98>
   11820:	push	{fp, lr}
   11824:	mov	fp, sp
   11828:	sub	sp, sp, #56	; 0x38
   1182c:	mov	r8, r0
   11830:	cmp	r0, #0
   11834:	bne	11ad4 <__assert_fail@plt+0x3b0>
   11838:	movw	r1, #12075	; 0x2f2b
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #2
   11848:	bl	114a8 <dcgettext@plt>
   1184c:	mov	r1, r0
   11850:	movw	r0, #20924	; 0x51bc
   11854:	movt	r0, #3
   11858:	ldr	r2, [r0]
   1185c:	mov	r0, #1
   11860:	mov	r3, r2
   11864:	bl	11634 <__printf_chk@plt>
   11868:	mov	r0, #10
   1186c:	bl	1170c <putchar_unlocked@plt>
   11870:	movw	r1, #12114	; 0x2f52
   11874:	mov	r0, #0
   11878:	mov	r2, #5
   1187c:	movt	r1, #2
   11880:	bl	114a8 <dcgettext@plt>
   11884:	movw	r9, #20900	; 0x51a4
   11888:	movt	r9, #3
   1188c:	ldr	r1, [r9]
   11890:	bl	113b8 <fputs_unlocked@plt>
   11894:	movw	r1, #12159	; 0x2f7f
   11898:	mov	r0, #0
   1189c:	mov	r2, #5
   118a0:	movt	r1, #2
   118a4:	bl	114a8 <dcgettext@plt>
   118a8:	ldr	r1, [r9]
   118ac:	bl	113b8 <fputs_unlocked@plt>
   118b0:	movw	r1, #12213	; 0x2fb5
   118b4:	mov	r0, #0
   118b8:	mov	r2, #5
   118bc:	movt	r1, #2
   118c0:	bl	114a8 <dcgettext@plt>
   118c4:	ldr	r1, [r9]
   118c8:	bl	113b8 <fputs_unlocked@plt>
   118cc:	movw	r1, #12487	; 0x30c7
   118d0:	mov	r0, #0
   118d4:	mov	r2, #5
   118d8:	movt	r1, #2
   118dc:	bl	114a8 <dcgettext@plt>
   118e0:	ldr	r1, [r9]
   118e4:	bl	113b8 <fputs_unlocked@plt>
   118e8:	movw	r1, #12777	; 0x31e9
   118ec:	mov	r0, #0
   118f0:	mov	r2, #5
   118f4:	movt	r1, #2
   118f8:	bl	114a8 <dcgettext@plt>
   118fc:	ldr	r1, [r9]
   11900:	bl	113b8 <fputs_unlocked@plt>
   11904:	movw	r1, #12890	; 0x325a
   11908:	mov	r0, #0
   1190c:	mov	r2, #5
   11910:	movt	r1, #2
   11914:	bl	114a8 <dcgettext@plt>
   11918:	ldr	r1, [r9]
   1191c:	bl	113b8 <fputs_unlocked@plt>
   11920:	movw	r1, #13077	; 0x3315
   11924:	mov	r0, #0
   11928:	mov	r2, #5
   1192c:	movt	r1, #2
   11930:	bl	114a8 <dcgettext@plt>
   11934:	ldr	r1, [r9]
   11938:	bl	113b8 <fputs_unlocked@plt>
   1193c:	movw	r1, #13387	; 0x344b
   11940:	mov	r0, #0
   11944:	mov	r2, #5
   11948:	movt	r1, #2
   1194c:	bl	114a8 <dcgettext@plt>
   11950:	ldr	r1, [r9]
   11954:	bl	113b8 <fputs_unlocked@plt>
   11958:	movw	r1, #13588	; 0x3514
   1195c:	mov	r0, #0
   11960:	mov	r2, #5
   11964:	movt	r1, #2
   11968:	bl	114a8 <dcgettext@plt>
   1196c:	ldr	r1, [r9]
   11970:	bl	113b8 <fputs_unlocked@plt>
   11974:	movw	r1, #13880	; 0x3638
   11978:	mov	r0, #0
   1197c:	mov	r2, #5
   11980:	movt	r1, #2
   11984:	bl	114a8 <dcgettext@plt>
   11988:	ldr	r1, [r9]
   1198c:	bl	113b8 <fputs_unlocked@plt>
   11990:	movw	r0, #14784	; 0x39c0
   11994:	mov	r6, sp
   11998:	movt	r0, #2
   1199c:	mov	r1, r6
   119a0:	ldm	r0!, {r2, r3, r4, r5}
   119a4:	stmia	r1!, {r2, r3, r4, r5}
   119a8:	ldm	r0!, {r2, r3, r4, r5, r7}
   119ac:	stmia	r1!, {r2, r3, r4, r5, r7}
   119b0:	ldm	r0, {r2, r3, r4, r5, r7}
   119b4:	stm	r1, {r2, r3, r4, r5, r7}
   119b8:	movw	r1, #14189	; 0x376d
   119bc:	movw	r5, #14036	; 0x36d4
   119c0:	movt	r1, #2
   119c4:	movt	r5, #2
   119c8:	mov	r0, r5
   119cc:	bl	113e8 <strcmp@plt>
   119d0:	cmp	r0, #0
   119d4:	ldrne	r1, [r6, #8]!
   119d8:	cmpne	r1, #0
   119dc:	bne	119c8 <__assert_fail@plt+0x2a4>
   119e0:	movw	r1, #14284	; 0x37cc
   119e4:	ldr	r6, [r6, #4]
   119e8:	mov	r0, #0
   119ec:	mov	r2, #5
   119f0:	movt	r1, #2
   119f4:	bl	114a8 <dcgettext@plt>
   119f8:	movw	r2, #14065	; 0x36f1
   119fc:	movw	r3, #14307	; 0x37e3
   11a00:	mov	r1, r0
   11a04:	mov	r0, #1
   11a08:	movt	r2, #2
   11a0c:	movt	r3, #2
   11a10:	bl	11634 <__printf_chk@plt>
   11a14:	cmp	r6, #0
   11a18:	mov	r0, #5
   11a1c:	mov	r1, #0
   11a20:	moveq	r6, r5
   11a24:	bl	11688 <setlocale@plt>
   11a28:	cmp	r0, #0
   11a2c:	beq	11a64 <__assert_fail@plt+0x340>
   11a30:	movw	r1, #14347	; 0x380b
   11a34:	mov	r2, #3
   11a38:	movt	r1, #2
   11a3c:	bl	116f4 <strncmp@plt>
   11a40:	cmp	r0, #0
   11a44:	beq	11a64 <__assert_fail@plt+0x340>
   11a48:	movw	r1, #14351	; 0x380f
   11a4c:	mov	r0, #0
   11a50:	mov	r2, #5
   11a54:	movt	r1, #2
   11a58:	bl	114a8 <dcgettext@plt>
   11a5c:	ldr	r1, [r9]
   11a60:	bl	113b8 <fputs_unlocked@plt>
   11a64:	movw	r1, #14422	; 0x3856
   11a68:	mov	r0, #0
   11a6c:	mov	r2, #5
   11a70:	movt	r1, #2
   11a74:	bl	114a8 <dcgettext@plt>
   11a78:	movw	r2, #14307	; 0x37e3
   11a7c:	mov	r1, r0
   11a80:	mov	r0, #1
   11a84:	mov	r3, r5
   11a88:	movt	r2, #2
   11a8c:	bl	11634 <__printf_chk@plt>
   11a90:	movw	r1, #14449	; 0x3871
   11a94:	mov	r0, #0
   11a98:	mov	r2, #5
   11a9c:	movt	r1, #2
   11aa0:	bl	114a8 <dcgettext@plt>
   11aa4:	mov	r1, r0
   11aa8:	movw	r0, #14217	; 0x3789
   11aac:	movw	r3, #14499	; 0x38a3
   11ab0:	cmp	r6, r5
   11ab4:	mov	r2, r6
   11ab8:	movt	r0, #2
   11abc:	movt	r3, #2
   11ac0:	moveq	r3, r0
   11ac4:	mov	r0, #1
   11ac8:	bl	11634 <__printf_chk@plt>
   11acc:	mov	r0, r8
   11ad0:	bl	115b0 <exit@plt>
   11ad4:	movw	r0, #20896	; 0x51a0
   11ad8:	movw	r1, #12036	; 0x2f04
   11adc:	mov	r2, #5
   11ae0:	movt	r0, #3
   11ae4:	movt	r1, #2
   11ae8:	ldr	r5, [r0]
   11aec:	mov	r0, #0
   11af0:	bl	114a8 <dcgettext@plt>
   11af4:	mov	r2, r0
   11af8:	movw	r0, #20924	; 0x51bc
   11afc:	mov	r1, #1
   11b00:	movt	r0, #3
   11b04:	ldr	r3, [r0]
   11b08:	mov	r0, r5
   11b0c:	bl	1164c <__fprintf_chk@plt>
   11b10:	b	11acc <__assert_fail@plt+0x3a8>
   11b14:	push	{r4, r5, r6, sl, fp, lr}
   11b18:	add	fp, sp, #16
   11b1c:	sub	sp, sp, #24
   11b20:	mov	r5, r0
   11b24:	ldr	r0, [r1]
   11b28:	mov	r4, r1
   11b2c:	bl	13834 <__assert_fail@plt+0x2110>
   11b30:	movw	r1, #14499	; 0x38a3
   11b34:	mov	r0, #6
   11b38:	movt	r1, #2
   11b3c:	bl	11688 <setlocale@plt>
   11b40:	movw	r6, #14069	; 0x36f5
   11b44:	movw	r1, #14041	; 0x36d9
   11b48:	movt	r6, #2
   11b4c:	movt	r1, #2
   11b50:	mov	r0, r6
   11b54:	bl	116d0 <bindtextdomain@plt>
   11b58:	mov	r0, r6
   11b5c:	bl	114d8 <textdomain@plt>
   11b60:	movw	r0, #20808	; 0x5148
   11b64:	mov	r1, #3
   11b68:	movt	r0, #3
   11b6c:	str	r1, [r0]
   11b70:	movw	r0, #12796	; 0x31fc
   11b74:	movt	r0, #1
   11b78:	bl	22edc <__assert_fail@plt+0x117b8>
   11b7c:	movw	r2, #14106	; 0x371a
   11b80:	movw	r3, #14094	; 0x370e
   11b84:	movw	r0, #14079	; 0x36ff
   11b88:	movw	r1, #14121	; 0x3729
   11b8c:	movw	r6, #6176	; 0x1820
   11b90:	mov	ip, #0
   11b94:	movt	r2, #2
   11b98:	movt	r3, #2
   11b9c:	movt	r0, #2
   11ba0:	movt	r6, #1
   11ba4:	movt	r1, #2
   11ba8:	stm	sp, {r0, r6}
   11bac:	str	r3, [sp, #8]
   11bb0:	movw	r3, #14065	; 0x36f1
   11bb4:	str	r2, [sp, #12]
   11bb8:	movw	r2, #14036	; 0x36d4
   11bbc:	str	r1, [sp, #16]
   11bc0:	mov	r0, r5
   11bc4:	mov	r1, r4
   11bc8:	str	ip, [sp, #20]
   11bcc:	movt	r2, #2
   11bd0:	movt	r3, #2
   11bd4:	bl	1330c <__assert_fail@plt+0x1be8>
   11bd8:	cmp	r5, #2
   11bdc:	bcc	11c88 <__assert_fail@plt+0x564>
   11be0:	mov	r6, r4
   11be4:	movw	r1, #14133	; 0x3735
   11be8:	ldr	r0, [r6, #4]!
   11bec:	movt	r1, #2
   11bf0:	bl	113e8 <strcmp@plt>
   11bf4:	cmp	r0, #0
   11bf8:	bne	11c0c <__assert_fail@plt+0x4e8>
   11bfc:	sub	r0, r5, #1
   11c00:	mov	r4, r6
   11c04:	cmp	r0, #1
   11c08:	bls	11c88 <__assert_fail@plt+0x564>
   11c0c:	movw	r5, #20912	; 0x51b0
   11c10:	add	r0, r4, #4
   11c14:	movt	r5, #3
   11c18:	str	r0, [r5]
   11c1c:	mov	r0, #1
   11c20:	bl	11cf8 <__assert_fail@plt+0x5d4>
   11c24:	mov	r4, r0
   11c28:	ldr	r0, [r5]
   11c2c:	ldr	r0, [r0]
   11c30:	cmp	r0, #0
   11c34:	bne	11cb4 <__assert_fail@plt+0x590>
   11c38:	ldr	r0, [r4]
   11c3c:	cmp	r0, #1
   11c40:	beq	11c70 <__assert_fail@plt+0x54c>
   11c44:	cmp	r0, #0
   11c48:	bne	11cf4 <__assert_fail@plt+0x5d0>
   11c4c:	movw	r0, #20900	; 0x51a4
   11c50:	add	r2, r4, #4
   11c54:	mov	r1, #10
   11c58:	movt	r0, #3
   11c5c:	ldr	r0, [r0]
   11c60:	bl	114f0 <__gmpz_out_str@plt>
   11c64:	mov	r0, #10
   11c68:	bl	1170c <putchar_unlocked@plt>
   11c6c:	b	11c78 <__assert_fail@plt+0x554>
   11c70:	ldr	r0, [r4, #4]
   11c74:	bl	1155c <puts@plt>
   11c78:	mov	r0, r4
   11c7c:	bl	11ddc <__assert_fail@plt+0x6b8>
   11c80:	sub	sp, fp, #16
   11c84:	pop	{r4, r5, r6, sl, fp, pc}
   11c88:	movw	r1, #14136	; 0x3738
   11c8c:	mov	r0, #0
   11c90:	mov	r2, #5
   11c94:	movt	r1, #2
   11c98:	bl	114a8 <dcgettext@plt>
   11c9c:	mov	r2, r0
   11ca0:	mov	r0, #0
   11ca4:	mov	r1, #0
   11ca8:	bl	11544 <error@plt>
   11cac:	mov	r0, #2
   11cb0:	bl	11820 <__assert_fail@plt+0xfc>
   11cb4:	movw	r1, #14152	; 0x3748
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	movt	r1, #2
   11cc4:	bl	114a8 <dcgettext@plt>
   11cc8:	mov	r4, r0
   11ccc:	ldr	r0, [r5]
   11cd0:	mov	r1, #8
   11cd4:	ldr	r2, [r0]
   11cd8:	mov	r0, #0
   11cdc:	bl	14e40 <__assert_fail@plt+0x371c>
   11ce0:	mov	r3, r0
   11ce4:	mov	r0, #2
   11ce8:	mov	r1, #0
   11cec:	mov	r2, r4
   11cf0:	bl	11544 <error@plt>
   11cf4:	bl	11700 <abort@plt>
   11cf8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11cfc:	add	fp, sp, #24
   11d00:	mov	r4, r0
   11d04:	bl	11e4c <__assert_fail@plt+0x728>
   11d08:	movw	r5, #20912	; 0x51b0
   11d0c:	mov	r6, r0
   11d10:	movt	r5, #3
   11d14:	ldr	r7, [r5]
   11d18:	ldr	r0, [r7]
   11d1c:	cmp	r0, #0
   11d20:	beq	11dd4 <__assert_fail@plt+0x6b0>
   11d24:	movw	r8, #14500	; 0x38a4
   11d28:	mov	r9, #0
   11d2c:	movt	r8, #2
   11d30:	mov	r1, r8
   11d34:	bl	113e8 <strcmp@plt>
   11d38:	clz	r1, r0
   11d3c:	cmp	r0, #0
   11d40:	lsr	r1, r1, #5
   11d44:	add	r1, r7, r1, lsl #2
   11d48:	str	r1, [r5]
   11d4c:	bne	11dd4 <__assert_fail@plt+0x6b0>
   11d50:	cmp	r4, #0
   11d54:	mov	r0, #0
   11d58:	movne	r0, r6
   11d5c:	blne	11ddc <__assert_fail@plt+0x6b8>
   11d60:	bl	11e4c <__assert_fail@plt+0x728>
   11d64:	mov	r7, r0
   11d68:	mov	r0, r6
   11d6c:	bl	11ddc <__assert_fail@plt+0x6b8>
   11d70:	cmp	r0, #0
   11d74:	beq	11db4 <__assert_fail@plt+0x690>
   11d78:	mov	r0, r6
   11d7c:	bl	11f30 <__assert_fail@plt+0x80c>
   11d80:	mov	r0, r7
   11d84:	bl	11ddc <__assert_fail@plt+0x6b8>
   11d88:	cmp	r0, #0
   11d8c:	beq	11dc0 <__assert_fail@plt+0x69c>
   11d90:	mov	r0, r7
   11d94:	bl	11f30 <__assert_fail@plt+0x80c>
   11d98:	mov	r0, #16
   11d9c:	bl	223d4 <__assert_fail@plt+0x10cb0>
   11da0:	mov	r6, r0
   11da4:	str	r9, [r0], #4
   11da8:	mov	r1, #0
   11dac:	bl	1167c <__gmpz_init_set_ui@plt>
   11db0:	b	11dc4 <__assert_fail@plt+0x6a0>
   11db4:	mov	r0, r7
   11db8:	bl	11f30 <__assert_fail@plt+0x80c>
   11dbc:	b	11dc4 <__assert_fail@plt+0x6a0>
   11dc0:	mov	r6, r7
   11dc4:	ldr	r7, [r5]
   11dc8:	ldr	r0, [r7]
   11dcc:	cmp	r0, #0
   11dd0:	bne	11d30 <__assert_fail@plt+0x60c>
   11dd4:	mov	r0, r6
   11dd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ddc:	push	{fp, lr}
   11de0:	mov	fp, sp
   11de4:	ldr	r1, [r0]
   11de8:	cmp	r1, #1
   11dec:	beq	11e08 <__assert_fail@plt+0x6e4>
   11df0:	cmp	r1, #0
   11df4:	ldreq	r0, [r0, #8]
   11df8:	clzeq	r0, r0
   11dfc:	lsreq	r0, r0, #5
   11e00:	popeq	{fp, pc}
   11e04:	bl	11700 <abort@plt>
   11e08:	ldr	r1, [r0, #4]
   11e0c:	mov	r0, #1
   11e10:	ldrb	r2, [r1]
   11e14:	cmp	r2, #0
   11e18:	popeq	{fp, pc}
   11e1c:	cmp	r2, #45	; 0x2d
   11e20:	addeq	r1, r1, #1
   11e24:	ldrb	r2, [r1], #1
   11e28:	uxtb	r2, r2
   11e2c:	cmp	r2, #48	; 0x30
   11e30:	bne	11e44 <__assert_fail@plt+0x720>
   11e34:	ldrb	r2, [r1], #1
   11e38:	cmp	r2, #0
   11e3c:	bne	11e28 <__assert_fail@plt+0x704>
   11e40:	pop	{fp, pc}
   11e44:	mov	r0, #0
   11e48:	pop	{fp, pc}
   11e4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11e50:	add	fp, sp, #24
   11e54:	mov	r4, r0
   11e58:	bl	11f64 <__assert_fail@plt+0x840>
   11e5c:	movw	r6, #20912	; 0x51b0
   11e60:	mov	r5, r0
   11e64:	movt	r6, #3
   11e68:	ldr	r7, [r6]
   11e6c:	ldr	r0, [r7]
   11e70:	cmp	r0, #0
   11e74:	beq	11f28 <__assert_fail@plt+0x804>
   11e78:	movw	r8, #14502	; 0x38a6
   11e7c:	mov	r9, #0
   11e80:	movt	r8, #2
   11e84:	mov	r1, r8
   11e88:	bl	113e8 <strcmp@plt>
   11e8c:	clz	r1, r0
   11e90:	cmp	r0, #0
   11e94:	lsr	r1, r1, #5
   11e98:	add	r1, r7, r1, lsl #2
   11e9c:	str	r1, [r6]
   11ea0:	bne	11f28 <__assert_fail@plt+0x804>
   11ea4:	mov	r0, #0
   11ea8:	cmp	r4, #0
   11eac:	beq	11ebc <__assert_fail@plt+0x798>
   11eb0:	mov	r0, r5
   11eb4:	bl	11ddc <__assert_fail@plt+0x6b8>
   11eb8:	eor	r0, r0, #1
   11ebc:	bl	11f64 <__assert_fail@plt+0x840>
   11ec0:	mov	r7, r0
   11ec4:	mov	r0, r5
   11ec8:	bl	11ddc <__assert_fail@plt+0x6b8>
   11ecc:	cmp	r0, #0
   11ed0:	bne	11ee4 <__assert_fail@plt+0x7c0>
   11ed4:	mov	r0, r7
   11ed8:	bl	11ddc <__assert_fail@plt+0x6b8>
   11edc:	cmp	r0, #0
   11ee0:	beq	11f10 <__assert_fail@plt+0x7ec>
   11ee4:	mov	r0, r5
   11ee8:	bl	11f30 <__assert_fail@plt+0x80c>
   11eec:	mov	r0, r7
   11ef0:	bl	11f30 <__assert_fail@plt+0x80c>
   11ef4:	mov	r0, #16
   11ef8:	bl	223d4 <__assert_fail@plt+0x10cb0>
   11efc:	mov	r5, r0
   11f00:	str	r9, [r0], #4
   11f04:	mov	r1, #0
   11f08:	bl	1167c <__gmpz_init_set_ui@plt>
   11f0c:	b	11f18 <__assert_fail@plt+0x7f4>
   11f10:	mov	r0, r7
   11f14:	bl	11f30 <__assert_fail@plt+0x80c>
   11f18:	ldr	r7, [r6]
   11f1c:	ldr	r0, [r7]
   11f20:	cmp	r0, #0
   11f24:	bne	11e84 <__assert_fail@plt+0x760>
   11f28:	mov	r0, r5
   11f2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f30:	push	{r4, sl, fp, lr}
   11f34:	add	fp, sp, #8
   11f38:	mov	r4, r0
   11f3c:	ldr	r1, [r0], #4
   11f40:	cmp	r1, #1
   11f44:	bne	11f54 <__assert_fail@plt+0x830>
   11f48:	ldr	r0, [r0]
   11f4c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   11f50:	b	11f58 <__assert_fail@plt+0x834>
   11f54:	bl	115ec <__gmpz_clear@plt>
   11f58:	mov	r0, r4
   11f5c:	pop	{r4, sl, fp, lr}
   11f60:	b	132e4 <__assert_fail@plt+0x1bc0>
   11f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f68:	add	fp, sp, #28
   11f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   11f70:	bl	12278 <__assert_fail@plt+0xb54>
   11f74:	movw	r7, #20912	; 0x51b0
   11f78:	mov	r4, r0
   11f7c:	movt	r7, #3
   11f80:	ldr	r6, [r7]
   11f84:	ldr	r0, [r6]
   11f88:	cmp	r0, #0
   11f8c:	beq	12268 <__assert_fail@plt+0xb44>
   11f90:	mvn	r8, #47	; 0x2f
   11f94:	movw	r1, #14504	; 0x38a8
   11f98:	movt	r1, #2
   11f9c:	bl	113e8 <strcmp@plt>
   11fa0:	clz	r1, r0
   11fa4:	cmp	r0, #0
   11fa8:	lsr	r1, r1, #5
   11fac:	add	r5, r6, r1, lsl #2
   11fb0:	mov	r6, #0
   11fb4:	str	r5, [r7]
   11fb8:	beq	120ec <__assert_fail@plt+0x9c8>
   11fbc:	ldr	r0, [r5]
   11fc0:	cmp	r0, #0
   11fc4:	beq	12268 <__assert_fail@plt+0xb44>
   11fc8:	movw	r1, #14506	; 0x38aa
   11fcc:	movt	r1, #2
   11fd0:	bl	113e8 <strcmp@plt>
   11fd4:	clz	r1, r0
   11fd8:	cmp	r0, #0
   11fdc:	lsr	r1, r1, #5
   11fe0:	add	r5, r5, r1, lsl #2
   11fe4:	str	r5, [r7]
   11fe8:	beq	120e8 <__assert_fail@plt+0x9c4>
   11fec:	ldr	r0, [r5]
   11ff0:	cmp	r0, #0
   11ff4:	beq	12268 <__assert_fail@plt+0xb44>
   11ff8:	movw	r1, #14513	; 0x38b1
   11ffc:	movt	r1, #2
   12000:	bl	113e8 <strcmp@plt>
   12004:	clz	r1, r0
   12008:	mov	r6, #2
   1200c:	cmp	r0, #0
   12010:	lsr	r1, r1, #5
   12014:	add	r5, r5, r1, lsl #2
   12018:	str	r5, [r7]
   1201c:	beq	120ec <__assert_fail@plt+0x9c8>
   12020:	ldr	r0, [r5]
   12024:	cmp	r0, #0
   12028:	beq	12268 <__assert_fail@plt+0xb44>
   1202c:	movw	r1, #14509	; 0x38ad
   12030:	movt	r1, #2
   12034:	bl	113e8 <strcmp@plt>
   12038:	clz	r1, r0
   1203c:	cmp	r0, #0
   12040:	lsr	r1, r1, #5
   12044:	add	r5, r5, r1, lsl #2
   12048:	str	r5, [r7]
   1204c:	beq	120ec <__assert_fail@plt+0x9c8>
   12050:	ldr	r0, [r5]
   12054:	cmp	r0, #0
   12058:	beq	12268 <__assert_fail@plt+0xb44>
   1205c:	movw	r1, #14512	; 0x38b0
   12060:	movt	r1, #2
   12064:	bl	113e8 <strcmp@plt>
   12068:	clz	r1, r0
   1206c:	cmp	r0, #0
   12070:	lsr	r1, r1, #5
   12074:	add	r5, r5, r1, lsl #2
   12078:	str	r5, [r7]
   1207c:	beq	12258 <__assert_fail@plt+0xb34>
   12080:	ldr	r0, [r5]
   12084:	cmp	r0, #0
   12088:	beq	12268 <__assert_fail@plt+0xb44>
   1208c:	movw	r1, #14515	; 0x38b3
   12090:	movt	r1, #2
   12094:	bl	113e8 <strcmp@plt>
   12098:	clz	r1, r0
   1209c:	cmp	r0, #0
   120a0:	lsr	r1, r1, #5
   120a4:	add	r5, r5, r1, lsl #2
   120a8:	str	r5, [r7]
   120ac:	beq	12260 <__assert_fail@plt+0xb3c>
   120b0:	ldr	r0, [r5]
   120b4:	cmp	r0, #0
   120b8:	beq	12268 <__assert_fail@plt+0xb44>
   120bc:	movw	r1, #14518	; 0x38b6
   120c0:	movt	r1, #2
   120c4:	bl	113e8 <strcmp@plt>
   120c8:	clz	r1, r0
   120cc:	mov	r6, #5
   120d0:	cmp	r0, #0
   120d4:	lsr	r1, r1, #5
   120d8:	add	r1, r5, r1, lsl #2
   120dc:	str	r1, [r7]
   120e0:	beq	120ec <__assert_fail@plt+0x9c8>
   120e4:	b	12268 <__assert_fail@plt+0xb44>
   120e8:	mov	r6, #1
   120ec:	ldr	r5, [sp]
   120f0:	mov	r0, r5
   120f4:	bl	12278 <__assert_fail@plt+0xb54>
   120f8:	mov	sl, r0
   120fc:	mov	r9, #0
   12100:	cmp	r5, #0
   12104:	beq	12218 <__assert_fail@plt+0xaf4>
   12108:	mov	r0, r4
   1210c:	bl	123b4 <__assert_fail@plt+0xc90>
   12110:	mov	r0, sl
   12114:	bl	123b4 <__assert_fail@plt+0xc90>
   12118:	ldr	r0, [r4, #4]
   1211c:	ldrb	r1, [r0]
   12120:	sub	r1, r1, #45	; 0x2d
   12124:	clz	r1, r1
   12128:	lsr	r1, r1, #5
   1212c:	ldrb	r2, [r0, r1]
   12130:	add	r1, r1, #1
   12134:	uxtab	r2, r8, r2
   12138:	cmp	r2, #9
   1213c:	bhi	12190 <__assert_fail@plt+0xa6c>
   12140:	ldrb	r2, [r0, r1]
   12144:	add	r1, r1, #1
   12148:	cmp	r2, #0
   1214c:	bne	12134 <__assert_fail@plt+0xa10>
   12150:	ldr	r1, [sl, #4]
   12154:	ldrb	r2, [r1]
   12158:	sub	r2, r2, #45	; 0x2d
   1215c:	clz	r2, r2
   12160:	lsr	r2, r2, #5
   12164:	ldrb	r3, [r1, r2]
   12168:	add	r2, r2, #1
   1216c:	uxtab	r3, r8, r3
   12170:	cmp	r3, #9
   12174:	bhi	12190 <__assert_fail@plt+0xa6c>
   12178:	ldrb	r3, [r1, r2]
   1217c:	add	r2, r2, #1
   12180:	cmp	r3, #0
   12184:	bne	1216c <__assert_fail@plt+0xa48>
   12188:	bl	21cd4 <__assert_fail@plt+0x105b0>
   1218c:	b	121a8 <__assert_fail@plt+0xa84>
   12190:	bl	115f8 <__errno_location@plt>
   12194:	mov	r1, #0
   12198:	str	r1, [r0]
   1219c:	ldr	r0, [r4, #4]
   121a0:	ldr	r1, [sl, #4]
   121a4:	bl	11550 <strcoll@plt>
   121a8:	mov	r9, r0
   121ac:	cmp	r6, #5
   121b0:	bhi	12274 <__assert_fail@plt+0xb50>
   121b4:	add	r0, pc, #0
   121b8:	ldr	pc, [r0, r6, lsl #2]
   121bc:	ldrdeq	r2, [r1], -r4
   121c0:	strdeq	r2, [r1], -ip
   121c4:	andeq	r2, r1, r4, ror #3
   121c8:	strdeq	r2, [r1], -r0
   121cc:	ldrdeq	r2, [r1], -ip
   121d0:	andeq	r2, r1, ip, lsl #4
   121d4:	lsr	r9, r9, #31
   121d8:	b	12218 <__assert_fail@plt+0xaf4>
   121dc:	cmn	r9, #1
   121e0:	b	12210 <__assert_fail@plt+0xaec>
   121e4:	clz	r0, r9
   121e8:	lsr	r9, r0, #5
   121ec:	b	12218 <__assert_fail@plt+0xaf4>
   121f0:	cmp	r9, #0
   121f4:	movwne	r9, #1
   121f8:	b	12218 <__assert_fail@plt+0xaf4>
   121fc:	cmp	r9, #1
   12200:	mov	r9, #0
   12204:	movwlt	r9, #1
   12208:	b	12218 <__assert_fail@plt+0xaf4>
   1220c:	cmp	r9, #0
   12210:	mov	r9, #0
   12214:	movwgt	r9, #1
   12218:	mov	r0, r4
   1221c:	bl	11f30 <__assert_fail@plt+0x80c>
   12220:	mov	r0, sl
   12224:	bl	11f30 <__assert_fail@plt+0x80c>
   12228:	mov	r0, #16
   1222c:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12230:	mov	r1, #0
   12234:	mov	r4, r0
   12238:	str	r1, [r0], #4
   1223c:	mov	r1, r9
   12240:	bl	1167c <__gmpz_init_set_ui@plt>
   12244:	ldr	r6, [r7]
   12248:	ldr	r0, [r6]
   1224c:	cmp	r0, #0
   12250:	bne	11f94 <__assert_fail@plt+0x870>
   12254:	b	12268 <__assert_fail@plt+0xb44>
   12258:	mov	r6, #3
   1225c:	b	120ec <__assert_fail@plt+0x9c8>
   12260:	mov	r6, #4
   12264:	b	120ec <__assert_fail@plt+0x9c8>
   12268:	mov	r0, r4
   1226c:	sub	sp, fp, #28
   12270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12274:	bl	11700 <abort@plt>
   12278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1227c:	add	fp, sp, #28
   12280:	sub	sp, sp, #4
   12284:	mov	r4, r0
   12288:	bl	12404 <__assert_fail@plt+0xce0>
   1228c:	movw	r5, #20912	; 0x51b0
   12290:	mov	sl, r0
   12294:	movt	r5, #3
   12298:	ldr	r7, [r5]
   1229c:	ldr	r0, [r7]
   122a0:	cmp	r0, #0
   122a4:	beq	12384 <__assert_fail@plt+0xc60>
   122a8:	movw	r9, #14520	; 0x38b8
   122ac:	add	r6, sl, #4
   122b0:	movt	r9, #2
   122b4:	mov	r1, r9
   122b8:	bl	113e8 <strcmp@plt>
   122bc:	clz	r1, r0
   122c0:	cmp	r0, #0
   122c4:	lsr	r1, r1, #5
   122c8:	add	r7, r7, r1, lsl #2
   122cc:	str	r7, [r5]
   122d0:	beq	1230c <__assert_fail@plt+0xbe8>
   122d4:	ldr	r0, [r7]
   122d8:	cmp	r0, #0
   122dc:	beq	12384 <__assert_fail@plt+0xc60>
   122e0:	movw	r1, #14134	; 0x3736
   122e4:	movt	r1, #2
   122e8:	bl	113e8 <strcmp@plt>
   122ec:	clz	r1, r0
   122f0:	mov	r8, #1
   122f4:	cmp	r0, #0
   122f8:	lsr	r1, r1, #5
   122fc:	add	r1, r7, r1, lsl #2
   12300:	str	r1, [r5]
   12304:	beq	12310 <__assert_fail@plt+0xbec>
   12308:	b	12384 <__assert_fail@plt+0xc60>
   1230c:	mov	r8, #0
   12310:	mov	r0, r4
   12314:	bl	12404 <__assert_fail@plt+0xce0>
   12318:	mov	r7, r0
   1231c:	cmp	r4, #0
   12320:	beq	1236c <__assert_fail@plt+0xc48>
   12324:	mov	r0, sl
   12328:	bl	125a0 <__assert_fail@plt+0xe7c>
   1232c:	cmp	r0, #0
   12330:	beq	12390 <__assert_fail@plt+0xc6c>
   12334:	mov	r0, r7
   12338:	bl	125a0 <__assert_fail@plt+0xe7c>
   1233c:	cmp	r0, #0
   12340:	beq	12390 <__assert_fail@plt+0xc6c>
   12344:	movw	r0, #5816	; 0x16b8
   12348:	movw	r3, #5228	; 0x146c
   1234c:	cmp	r8, #0
   12350:	add	r2, r7, #4
   12354:	mov	r1, r6
   12358:	movt	r0, #1
   1235c:	movt	r3, #1
   12360:	moveq	r3, r0
   12364:	mov	r0, r6
   12368:	blx	r3
   1236c:	mov	r0, r7
   12370:	bl	11f30 <__assert_fail@plt+0x80c>
   12374:	ldr	r7, [r5]
   12378:	ldr	r0, [r7]
   1237c:	cmp	r0, #0
   12380:	bne	122b4 <__assert_fail@plt+0xb90>
   12384:	mov	r0, sl
   12388:	sub	sp, fp, #28
   1238c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12390:	movw	r1, #14522	; 0x38ba
   12394:	mov	r0, #0
   12398:	mov	r2, #5
   1239c:	movt	r1, #2
   123a0:	bl	114a8 <dcgettext@plt>
   123a4:	mov	r2, r0
   123a8:	mov	r0, #2
   123ac:	mov	r1, #0
   123b0:	bl	11544 <error@plt>
   123b4:	push	{r4, r5, r6, sl, fp, lr}
   123b8:	add	fp, sp, #16
   123bc:	mov	r4, r0
   123c0:	ldr	r0, [r0]
   123c4:	cmp	r0, #1
   123c8:	popeq	{r4, r5, r6, sl, fp, pc}
   123cc:	cmp	r0, #0
   123d0:	bne	12400 <__assert_fail@plt+0xcdc>
   123d4:	add	r5, r4, #4
   123d8:	mov	r0, #0
   123dc:	mov	r1, #10
   123e0:	mov	r2, r5
   123e4:	bl	114b4 <__gmpz_get_str@plt>
   123e8:	mov	r6, r0
   123ec:	mov	r0, r5
   123f0:	bl	115ec <__gmpz_clear@plt>
   123f4:	mov	r0, #1
   123f8:	stm	r4, {r0, r6}
   123fc:	pop	{r4, r5, r6, sl, fp, pc}
   12400:	bl	11700 <abort@plt>
   12404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12408:	add	fp, sp, #28
   1240c:	sub	sp, sp, #4
   12410:	mov	r4, r0
   12414:	bl	12654 <__assert_fail@plt+0xf30>
   12418:	movw	r9, #20912	; 0x51b0
   1241c:	mov	r5, r0
   12420:	movt	r9, #3
   12424:	ldr	r7, [r9]
   12428:	ldr	r0, [r7]
   1242c:	cmp	r0, #0
   12430:	beq	12564 <__assert_fail@plt+0xe40>
   12434:	movw	sl, #14543	; 0x38cf
   12438:	add	r6, r5, #4
   1243c:	movt	sl, #2
   12440:	mov	r1, sl
   12444:	bl	113e8 <strcmp@plt>
   12448:	clz	r1, r0
   1244c:	cmp	r0, #0
   12450:	lsr	r1, r1, #5
   12454:	add	r7, r7, r1, lsl #2
   12458:	str	r7, [r9]
   1245c:	beq	124c8 <__assert_fail@plt+0xda4>
   12460:	ldr	r0, [r7]
   12464:	cmp	r0, #0
   12468:	beq	12564 <__assert_fail@plt+0xe40>
   1246c:	movw	r1, #16608	; 0x40e0
   12470:	movt	r1, #2
   12474:	bl	113e8 <strcmp@plt>
   12478:	clz	r1, r0
   1247c:	cmp	r0, #0
   12480:	lsr	r1, r1, #5
   12484:	add	r7, r7, r1, lsl #2
   12488:	str	r7, [r9]
   1248c:	beq	124d0 <__assert_fail@plt+0xdac>
   12490:	ldr	r0, [r7]
   12494:	cmp	r0, #0
   12498:	beq	12564 <__assert_fail@plt+0xe40>
   1249c:	movw	r1, #14545	; 0x38d1
   124a0:	movt	r1, #2
   124a4:	bl	113e8 <strcmp@plt>
   124a8:	clz	r1, r0
   124ac:	mov	r8, #2
   124b0:	cmp	r0, #0
   124b4:	lsr	r1, r1, #5
   124b8:	add	r1, r7, r1, lsl #2
   124bc:	str	r1, [r9]
   124c0:	beq	124d4 <__assert_fail@plt+0xdb0>
   124c4:	b	12564 <__assert_fail@plt+0xe40>
   124c8:	mov	r8, #0
   124cc:	b	124d4 <__assert_fail@plt+0xdb0>
   124d0:	mov	r8, #1
   124d4:	mov	r0, r4
   124d8:	bl	12654 <__assert_fail@plt+0xf30>
   124dc:	mov	r7, r0
   124e0:	cmp	r4, #0
   124e4:	beq	1254c <__assert_fail@plt+0xe28>
   124e8:	mov	r0, r5
   124ec:	bl	125a0 <__assert_fail@plt+0xe7c>
   124f0:	cmp	r0, #0
   124f4:	beq	12570 <__assert_fail@plt+0xe4c>
   124f8:	mov	r0, r7
   124fc:	bl	125a0 <__assert_fail@plt+0xe7c>
   12500:	cmp	r0, #0
   12504:	beq	12570 <__assert_fail@plt+0xe4c>
   12508:	movw	r3, #5324	; 0x14cc
   1250c:	cmp	r8, #0
   12510:	movt	r3, #1
   12514:	beq	1253c <__assert_fail@plt+0xe18>
   12518:	ldr	r0, [r7, #8]
   1251c:	cmp	r0, #0
   12520:	beq	12594 <__assert_fail@plt+0xe70>
   12524:	movw	r0, #5108	; 0x13f4
   12528:	movw	r3, #5600	; 0x15e0
   1252c:	cmp	r8, #1
   12530:	movt	r0, #1
   12534:	movt	r3, #1
   12538:	moveq	r3, r0
   1253c:	add	r2, r7, #4
   12540:	mov	r0, r6
   12544:	mov	r1, r6
   12548:	blx	r3
   1254c:	mov	r0, r7
   12550:	bl	11f30 <__assert_fail@plt+0x80c>
   12554:	ldr	r7, [r9]
   12558:	ldr	r0, [r7]
   1255c:	cmp	r0, #0
   12560:	bne	12440 <__assert_fail@plt+0xd1c>
   12564:	mov	r0, r5
   12568:	sub	sp, fp, #28
   1256c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12570:	movw	r1, #14522	; 0x38ba
   12574:	movt	r1, #2
   12578:	mov	r0, #0
   1257c:	mov	r2, #5
   12580:	bl	114a8 <dcgettext@plt>
   12584:	mov	r2, r0
   12588:	mov	r0, #2
   1258c:	mov	r1, #0
   12590:	bl	11544 <error@plt>
   12594:	movw	r1, #14547	; 0x38d3
   12598:	movt	r1, #2
   1259c:	b	12578 <__assert_fail@plt+0xe54>
   125a0:	push	{r4, r5, r6, sl, fp, lr}
   125a4:	add	fp, sp, #16
   125a8:	mov	r5, r0
   125ac:	ldr	r0, [r0]
   125b0:	mov	r4, #1
   125b4:	cmp	r0, #0
   125b8:	beq	12630 <__assert_fail@plt+0xf0c>
   125bc:	cmp	r0, #1
   125c0:	bne	12638 <__assert_fail@plt+0xf14>
   125c4:	mov	r0, r5
   125c8:	mvn	r2, #47	; 0x2f
   125cc:	ldr	r6, [r0, #4]!
   125d0:	ldrb	r1, [r6]
   125d4:	sub	r1, r1, #45	; 0x2d
   125d8:	clz	r1, r1
   125dc:	lsr	r1, r1, #5
   125e0:	ldrb	r3, [r6, r1]
   125e4:	add	r1, r1, #1
   125e8:	uxtab	r3, r2, r3
   125ec:	cmp	r3, #9
   125f0:	bhi	1262c <__assert_fail@plt+0xf08>
   125f4:	ldrb	r3, [r6, r1]
   125f8:	add	r1, r1, #1
   125fc:	cmp	r3, #0
   12600:	bne	125e8 <__assert_fail@plt+0xec4>
   12604:	mov	r1, r6
   12608:	mov	r2, #10
   1260c:	bl	116c4 <__gmpz_init_set_str@plt>
   12610:	cmp	r0, #0
   12614:	bne	1263c <__assert_fail@plt+0xf18>
   12618:	mov	r0, r6
   1261c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   12620:	mov	r0, #0
   12624:	str	r0, [r5]
   12628:	b	12630 <__assert_fail@plt+0xf0c>
   1262c:	mov	r4, #0
   12630:	mov	r0, r4
   12634:	pop	{r4, r5, r6, sl, fp, pc}
   12638:	bl	11700 <abort@plt>
   1263c:	movw	r2, #14856	; 0x3a08
   12640:	mov	r0, #3
   12644:	mov	r1, #34	; 0x22
   12648:	mov	r3, r6
   1264c:	movt	r2, #2
   12650:	bl	11544 <error@plt>
   12654:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12658:	add	fp, sp, #24
   1265c:	mov	r4, r0
   12660:	bl	126f8 <__assert_fail@plt+0xfd4>
   12664:	movw	r9, #20912	; 0x51b0
   12668:	mov	r6, r0
   1266c:	movt	r9, #3
   12670:	ldr	r5, [r9]
   12674:	ldr	r0, [r5]
   12678:	cmp	r0, #0
   1267c:	beq	126f0 <__assert_fail@plt+0xfcc>
   12680:	movw	r8, #14564	; 0x38e4
   12684:	movt	r8, #2
   12688:	mov	r1, r8
   1268c:	bl	113e8 <strcmp@plt>
   12690:	clz	r1, r0
   12694:	cmp	r0, #0
   12698:	lsr	r1, r1, #5
   1269c:	add	r1, r5, r1, lsl #2
   126a0:	str	r1, [r9]
   126a4:	bne	126f0 <__assert_fail@plt+0xfcc>
   126a8:	mov	r0, r4
   126ac:	bl	126f8 <__assert_fail@plt+0xfd4>
   126b0:	mov	r7, r0
   126b4:	cmp	r4, #0
   126b8:	beq	126d8 <__assert_fail@plt+0xfb4>
   126bc:	mov	r0, r6
   126c0:	mov	r1, r7
   126c4:	bl	12ed8 <__assert_fail@plt+0x17b4>
   126c8:	mov	r5, r0
   126cc:	mov	r0, r6
   126d0:	bl	11f30 <__assert_fail@plt+0x80c>
   126d4:	mov	r6, r5
   126d8:	mov	r0, r7
   126dc:	bl	11f30 <__assert_fail@plt+0x80c>
   126e0:	ldr	r5, [r9]
   126e4:	ldr	r0, [r5]
   126e8:	cmp	r0, #0
   126ec:	bne	12688 <__assert_fail@plt+0xf64>
   126f0:	mov	r0, r6
   126f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   126f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126fc:	add	fp, sp, #28
   12700:	sub	sp, sp, #124	; 0x7c
   12704:	movw	r5, #20912	; 0x51b0
   12708:	mov	r6, r0
   1270c:	movt	r5, #3
   12710:	ldr	r4, [r5]
   12714:	ldr	r0, [r4]
   12718:	cmp	r0, #0
   1271c:	beq	12804 <__assert_fail@plt+0x10e0>
   12720:	movw	r1, #14520	; 0x38b8
   12724:	movt	r1, #2
   12728:	bl	113e8 <strcmp@plt>
   1272c:	clz	r1, r0
   12730:	cmp	r0, #0
   12734:	lsr	r1, r1, #5
   12738:	add	r4, r4, r1, lsl #2
   1273c:	str	r4, [r5]
   12740:	beq	12880 <__assert_fail@plt+0x115c>
   12744:	ldr	r0, [r4]
   12748:	cmp	r0, #0
   1274c:	beq	12804 <__assert_fail@plt+0x10e0>
   12750:	movw	r1, #14566	; 0x38e6
   12754:	movt	r1, #2
   12758:	bl	113e8 <strcmp@plt>
   1275c:	clz	r1, r0
   12760:	cmp	r0, #0
   12764:	lsr	r1, r1, #5
   12768:	add	r4, r4, r1, lsl #2
   1276c:	str	r4, [r5]
   12770:	beq	12924 <__assert_fail@plt+0x1200>
   12774:	ldr	r0, [r4]
   12778:	cmp	r0, #0
   1277c:	beq	12804 <__assert_fail@plt+0x10e0>
   12780:	movw	r1, #14573	; 0x38ed
   12784:	movt	r1, #2
   12788:	bl	113e8 <strcmp@plt>
   1278c:	clz	r1, r0
   12790:	cmp	r0, #0
   12794:	lsr	r1, r1, #5
   12798:	add	r4, r4, r1, lsl #2
   1279c:	str	r4, [r5]
   127a0:	beq	12960 <__assert_fail@plt+0x123c>
   127a4:	ldr	r0, [r4]
   127a8:	cmp	r0, #0
   127ac:	beq	12804 <__assert_fail@plt+0x10e0>
   127b0:	movw	r1, #14579	; 0x38f3
   127b4:	movt	r1, #2
   127b8:	bl	113e8 <strcmp@plt>
   127bc:	clz	r1, r0
   127c0:	cmp	r0, #0
   127c4:	lsr	r1, r1, #5
   127c8:	add	r4, r4, r1, lsl #2
   127cc:	str	r4, [r5]
   127d0:	beq	1299c <__assert_fail@plt+0x1278>
   127d4:	ldr	r0, [r4]
   127d8:	cmp	r0, #0
   127dc:	beq	12804 <__assert_fail@plt+0x10e0>
   127e0:	movw	r1, #14585	; 0x38f9
   127e4:	movt	r1, #2
   127e8:	bl	113e8 <strcmp@plt>
   127ec:	clz	r1, r0
   127f0:	cmp	r0, #0
   127f4:	lsr	r1, r1, #5
   127f8:	add	r1, r4, r1, lsl #2
   127fc:	str	r1, [r5]
   12800:	beq	12b6c <__assert_fail@plt+0x1448>
   12804:	bl	1317c <__assert_fail@plt+0x1a58>
   12808:	ldr	r7, [r5]
   1280c:	mov	r4, #0
   12810:	ldr	r0, [r7]
   12814:	cmp	r0, #0
   12818:	beq	12874 <__assert_fail@plt+0x1150>
   1281c:	movw	r1, #14632	; 0x3928
   12820:	movt	r1, #2
   12824:	bl	113e8 <strcmp@plt>
   12828:	clz	r1, r0
   1282c:	cmp	r0, #0
   12830:	lsr	r1, r1, #5
   12834:	add	r7, r7, r1, lsl #2
   12838:	str	r7, [r5]
   1283c:	beq	128c0 <__assert_fail@plt+0x119c>
   12840:	ldr	r0, [r7]
   12844:	cmp	r0, #0
   12848:	beq	12874 <__assert_fail@plt+0x1150>
   1284c:	movw	r1, #15005	; 0x3a9d
   12850:	movt	r1, #2
   12854:	bl	113e8 <strcmp@plt>
   12858:	clz	r1, r0
   1285c:	cmp	r0, #0
   12860:	lsr	r1, r1, #5
   12864:	add	r7, r7, r1, lsl #2
   12868:	str	r7, [r5]
   1286c:	beq	12e74 <__assert_fail@plt+0x1750>
   12870:	ldr	r4, [r7]
   12874:	add	r0, r7, #4
   12878:	str	r0, [r5]
   1287c:	b	12894 <__assert_fail@plt+0x1170>
   12880:	bl	1317c <__assert_fail@plt+0x1a58>
   12884:	ldr	r0, [r5]
   12888:	add	r1, r0, #4
   1288c:	str	r1, [r5]
   12890:	ldr	r4, [r0]
   12894:	mov	r0, #16
   12898:	bl	223d4 <__assert_fail@plt+0x10cb0>
   1289c:	mov	r7, r0
   128a0:	mov	r0, #1
   128a4:	str	r0, [r7]
   128a8:	mov	r0, r4
   128ac:	bl	227c8 <__assert_fail@plt+0x110a4>
   128b0:	str	r0, [r7, #4]
   128b4:	mov	r0, r7
   128b8:	sub	sp, fp, #28
   128bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128c0:	mov	r0, r6
   128c4:	bl	11cf8 <__assert_fail@plt+0x5d4>
   128c8:	ldr	r4, [r5]
   128cc:	mov	r7, r0
   128d0:	ldr	r0, [r4]
   128d4:	cmp	r0, #0
   128d8:	beq	12e98 <__assert_fail@plt+0x1774>
   128dc:	movw	r1, #15005	; 0x3a9d
   128e0:	movt	r1, #2
   128e4:	bl	113e8 <strcmp@plt>
   128e8:	clz	r1, r0
   128ec:	cmp	r0, #0
   128f0:	lsr	r1, r1, #5
   128f4:	add	r1, r4, r1, lsl #2
   128f8:	str	r1, [r5]
   128fc:	beq	128b4 <__assert_fail@plt+0x1190>
   12900:	movw	r1, #14671	; 0x394f
   12904:	mov	r0, #0
   12908:	mov	r2, #5
   1290c:	movt	r1, #2
   12910:	bl	114a8 <dcgettext@plt>
   12914:	mov	r4, r0
   12918:	ldr	r0, [r5]
   1291c:	ldr	r2, [r0]
   12920:	b	12eb8 <__assert_fail@plt+0x1794>
   12924:	mov	r0, r6
   12928:	bl	126f8 <__assert_fail@plt+0xfd4>
   1292c:	mov	r4, r0
   12930:	bl	123b4 <__assert_fail@plt+0xc90>
   12934:	ldr	r0, [r4, #4]
   12938:	bl	1355c <__assert_fail@plt+0x1e38>
   1293c:	mov	r5, r0
   12940:	mov	r0, #16
   12944:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12948:	mov	r1, #0
   1294c:	mov	r7, r0
   12950:	str	r1, [r0], #4
   12954:	mov	r1, r5
   12958:	bl	1167c <__gmpz_init_set_ui@plt>
   1295c:	b	12e68 <__assert_fail@plt+0x1744>
   12960:	mov	r0, r6
   12964:	bl	126f8 <__assert_fail@plt+0xfd4>
   12968:	mov	r5, r0
   1296c:	mov	r0, r6
   12970:	bl	126f8 <__assert_fail@plt+0xfd4>
   12974:	mov	r4, r0
   12978:	cmp	r6, #0
   1297c:	beq	12994 <__assert_fail@plt+0x1270>
   12980:	mov	r0, r5
   12984:	mov	r1, r4
   12988:	bl	12ed8 <__assert_fail@plt+0x17b4>
   1298c:	mov	r7, r0
   12990:	b	12e60 <__assert_fail@plt+0x173c>
   12994:	mov	r7, r5
   12998:	b	12e68 <__assert_fail@plt+0x1744>
   1299c:	mov	r0, r6
   129a0:	bl	126f8 <__assert_fail@plt+0xfd4>
   129a4:	mov	r5, r0
   129a8:	mov	r0, r6
   129ac:	bl	126f8 <__assert_fail@plt+0xfd4>
   129b0:	mov	r6, r0
   129b4:	mov	r0, r5
   129b8:	bl	123b4 <__assert_fail@plt+0xc90>
   129bc:	mov	r0, r6
   129c0:	bl	123b4 <__assert_fail@plt+0xc90>
   129c4:	ldr	sl, [r6, #4]
   129c8:	mov	r8, #0
   129cc:	mov	r4, #0
   129d0:	ldrb	r0, [sl]
   129d4:	cmp	r0, #0
   129d8:	beq	12c30 <__assert_fail@plt+0x150c>
   129dc:	ldr	r7, [r5, #4]
   129e0:	bl	11514 <__ctype_get_mb_cur_max@plt>
   129e4:	cmp	r0, #2
   129e8:	bcc	12bdc <__assert_fail@plt+0x14b8>
   129ec:	mov	r4, #0
   129f0:	add	r0, sp, #68	; 0x44
   129f4:	str	r6, [sp, #4]
   129f8:	str	r5, [sp, #8]
   129fc:	str	r4, [sp, #76]	; 0x4c
   12a00:	str	r4, [sp, #72]	; 0x48
   12a04:	strb	r4, [sp, #80]	; 0x50
   12a08:	strb	r4, [sp, #68]	; 0x44
   12a0c:	str	r7, [sp, #84]	; 0x54
   12a10:	bl	13610 <__assert_fail@plt+0x1eec>
   12a14:	ldrb	r0, [sp, #92]	; 0x5c
   12a18:	cmp	r0, #0
   12a1c:	beq	12a2c <__assert_fail@plt+0x1308>
   12a20:	ldr	r0, [sp, #96]	; 0x60
   12a24:	cmp	r0, #0
   12a28:	beq	12c24 <__assert_fail@plt+0x1500>
   12a2c:	add	r7, sp, #12
   12a30:	mov	r8, #0
   12a34:	mov	r5, #0
   12a38:	add	r6, r7, #4
   12a3c:	ldr	r0, [sp, #88]	; 0x58
   12a40:	add	r5, r5, #1
   12a44:	cmp	r0, #1
   12a48:	bne	12a6c <__assert_fail@plt+0x1348>
   12a4c:	ldr	r9, [sp, #84]	; 0x54
   12a50:	mov	r0, sl
   12a54:	ldrb	r1, [r9]
   12a58:	bl	13480 <__assert_fail@plt+0x1d5c>
   12a5c:	mov	r1, #1
   12a60:	cmp	r0, #0
   12a64:	beq	12b38 <__assert_fail@plt+0x1414>
   12a68:	b	12c20 <__assert_fail@plt+0x14fc>
   12a6c:	mov	r0, r7
   12a70:	strb	r8, [sp, #12]
   12a74:	str	sl, [sp, #28]
   12a78:	str	r8, [r6]
   12a7c:	str	r8, [r6, #4]
   12a80:	strb	r8, [sp, #24]
   12a84:	bl	13610 <__assert_fail@plt+0x1eec>
   12a88:	ldr	r0, [sp, #40]	; 0x28
   12a8c:	ldrb	r1, [sp, #36]	; 0x24
   12a90:	cmp	r0, #0
   12a94:	bne	12aa0 <__assert_fail@plt+0x137c>
   12a98:	cmp	r1, #0
   12a9c:	bne	12b30 <__assert_fail@plt+0x140c>
   12aa0:	clz	r1, r1
   12aa4:	lsr	r1, r1, #5
   12aa8:	tst	r1, #1
   12aac:	bne	12ad0 <__assert_fail@plt+0x13ac>
   12ab0:	ldrb	r1, [sp, #92]	; 0x5c
   12ab4:	cmp	r1, #0
   12ab8:	beq	12ad0 <__assert_fail@plt+0x13ac>
   12abc:	ldr	r1, [sp, #96]	; 0x60
   12ac0:	cmp	r0, r1
   12ac4:	beq	12c20 <__assert_fail@plt+0x14fc>
   12ac8:	ldr	r4, [sp, #32]
   12acc:	b	12af8 <__assert_fail@plt+0x13d4>
   12ad0:	ldr	r4, [sp, #32]
   12ad4:	ldr	r0, [sp, #88]	; 0x58
   12ad8:	cmp	r4, r0
   12adc:	bne	12af8 <__assert_fail@plt+0x13d4>
   12ae0:	ldr	r1, [sp, #84]	; 0x54
   12ae4:	ldr	r0, [sp, #28]
   12ae8:	mov	r2, r4
   12aec:	bl	115bc <bcmp@plt>
   12af0:	cmp	r0, #0
   12af4:	beq	12c20 <__assert_fail@plt+0x14fc>
   12af8:	strb	r8, [sp, #24]
   12afc:	ldr	r0, [sp, #28]
   12b00:	add	r0, r0, r4
   12b04:	str	r0, [sp, #28]
   12b08:	mov	r0, r7
   12b0c:	bl	13610 <__assert_fail@plt+0x1eec>
   12b10:	ldrb	r2, [sp, #36]	; 0x24
   12b14:	clz	r0, r2
   12b18:	lsr	r1, r0, #5
   12b1c:	ldr	r0, [sp, #40]	; 0x28
   12b20:	cmp	r0, #0
   12b24:	bne	12aa8 <__assert_fail@plt+0x1384>
   12b28:	cmp	r2, #0
   12b2c:	beq	12aa8 <__assert_fail@plt+0x1384>
   12b30:	ldr	r9, [sp, #84]	; 0x54
   12b34:	ldr	r1, [sp, #88]	; 0x58
   12b38:	mov	r4, #0
   12b3c:	add	r0, r9, r1
   12b40:	strb	r4, [sp, #80]	; 0x50
   12b44:	str	r0, [sp, #84]	; 0x54
   12b48:	add	r0, sp, #68	; 0x44
   12b4c:	bl	13610 <__assert_fail@plt+0x1eec>
   12b50:	ldrb	r0, [sp, #92]	; 0x5c
   12b54:	cmp	r0, #0
   12b58:	beq	12a3c <__assert_fail@plt+0x1318>
   12b5c:	ldr	r0, [sp, #96]	; 0x60
   12b60:	cmp	r0, #0
   12b64:	bne	12a3c <__assert_fail@plt+0x1318>
   12b68:	b	12c24 <__assert_fail@plt+0x1500>
   12b6c:	mov	r0, r6
   12b70:	bl	126f8 <__assert_fail@plt+0xfd4>
   12b74:	mov	r9, r0
   12b78:	mov	r0, r6
   12b7c:	bl	126f8 <__assert_fail@plt+0xfd4>
   12b80:	mov	r5, r0
   12b84:	mov	r0, r6
   12b88:	bl	126f8 <__assert_fail@plt+0xfd4>
   12b8c:	mov	r4, r0
   12b90:	mov	r0, r9
   12b94:	bl	123b4 <__assert_fail@plt+0xc90>
   12b98:	mov	r0, r5
   12b9c:	bl	125a0 <__assert_fail@plt+0xe7c>
   12ba0:	cmp	r0, #0
   12ba4:	beq	12bf8 <__assert_fail@plt+0x14d4>
   12ba8:	mov	r0, r4
   12bac:	bl	125a0 <__assert_fail@plt+0xe7c>
   12bb0:	cmp	r0, #0
   12bb4:	beq	12bf8 <__assert_fail@plt+0x14d4>
   12bb8:	ldr	r0, [r5, #8]
   12bbc:	mvn	r8, #0
   12bc0:	mvn	sl, #0
   12bc4:	cmp	r0, #0
   12bc8:	bmi	12c70 <__assert_fail@plt+0x154c>
   12bcc:	cmp	r0, #1
   12bd0:	bls	12c58 <__assert_fail@plt+0x1534>
   12bd4:	mvn	sl, #1
   12bd8:	b	12c70 <__assert_fail@plt+0x154c>
   12bdc:	mov	r0, r7
   12be0:	mov	r1, sl
   12be4:	bl	11400 <strcspn@plt>
   12be8:	ldrb	r4, [r7, r0]
   12bec:	cmp	r4, #0
   12bf0:	addne	r4, r0, #1
   12bf4:	b	12c30 <__assert_fail@plt+0x150c>
   12bf8:	mov	r0, #16
   12bfc:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12c00:	mov	r7, r0
   12c04:	mov	r0, #1
   12c08:	str	r0, [r7]
   12c0c:	movw	r0, #14499	; 0x38a3
   12c10:	movt	r0, #2
   12c14:	bl	227c8 <__assert_fail@plt+0x110a4>
   12c18:	str	r0, [r7, #4]
   12c1c:	b	12e58 <__assert_fail@plt+0x1734>
   12c20:	mov	r4, r5
   12c24:	ldr	r5, [sp, #8]
   12c28:	ldr	r6, [sp, #4]
   12c2c:	mov	r8, #0
   12c30:	mov	r0, #16
   12c34:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12c38:	mov	r7, r0
   12c3c:	str	r8, [r0], #4
   12c40:	mov	r1, r4
   12c44:	bl	1167c <__gmpz_init_set_ui@plt>
   12c48:	mov	r0, r5
   12c4c:	bl	11f30 <__assert_fail@plt+0x80c>
   12c50:	mov	r0, r6
   12c54:	b	12e6c <__assert_fail@plt+0x1748>
   12c58:	ldr	r1, [r5, #12]
   12c5c:	cmp	r0, #0
   12c60:	ldr	sl, [r1]
   12c64:	moveq	sl, r0
   12c68:	cmn	sl, #1
   12c6c:	mvneq	sl, #1
   12c70:	ldr	r0, [r4, #8]
   12c74:	cmp	r0, #0
   12c78:	bmi	12ca4 <__assert_fail@plt+0x1580>
   12c7c:	cmp	r0, #1
   12c80:	bls	12c8c <__assert_fail@plt+0x1568>
   12c84:	mvn	r8, #1
   12c88:	b	12ca4 <__assert_fail@plt+0x1580>
   12c8c:	ldr	r1, [r4, #12]
   12c90:	cmp	r0, #0
   12c94:	ldr	r8, [r1]
   12c98:	moveq	r8, r0
   12c9c:	cmn	r8, #1
   12ca0:	mvneq	r8, #1
   12ca4:	ldr	r6, [r9, #4]
   12ca8:	mov	r0, r6
   12cac:	bl	115c8 <strlen@plt>
   12cb0:	mov	r7, r0
   12cb4:	bl	11514 <__ctype_get_mb_cur_max@plt>
   12cb8:	cmp	r0, #2
   12cbc:	mov	r0, r7
   12cc0:	bcc	12ccc <__assert_fail@plt+0x15a8>
   12cc4:	mov	r0, r6
   12cc8:	bl	1355c <__assert_fail@plt+0x1e38>
   12ccc:	add	r1, r8, #1
   12cd0:	str	r4, [sp, #8]
   12cd4:	cmp	r1, #2
   12cd8:	bcc	12d30 <__assert_fail@plt+0x160c>
   12cdc:	sub	r1, sl, #1
   12ce0:	cmp	r1, r0
   12ce4:	bcs	12d30 <__assert_fail@plt+0x160c>
   12ce8:	sub	r0, r0, sl
   12cec:	str	r7, [sp, #4]
   12cf0:	add	r7, r0, #1
   12cf4:	cmp	r7, r8
   12cf8:	movhi	r7, r8
   12cfc:	bl	11514 <__ctype_get_mb_cur_max@plt>
   12d00:	cmp	r0, #1
   12d04:	bne	12d44 <__assert_fail@plt+0x1620>
   12d08:	add	r0, r7, #1
   12d0c:	add	r6, r6, sl
   12d10:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12d14:	sub	r1, r6, #1
   12d18:	mov	r2, r7
   12d1c:	mvn	r3, #0
   12d20:	mov	r4, r0
   12d24:	bl	11718 <__mempcpy_chk@plt>
   12d28:	mov	r6, r0
   12d2c:	b	12e24 <__assert_fail@plt+0x1700>
   12d30:	movw	r0, #14499	; 0x38a3
   12d34:	movt	r0, #2
   12d38:	bl	227c8 <__assert_fail@plt+0x110a4>
   12d3c:	mov	r4, r0
   12d40:	b	12e2c <__assert_fail@plt+0x1708>
   12d44:	ldr	r0, [sp, #4]
   12d48:	add	r0, r0, #1
   12d4c:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12d50:	mov	r4, r0
   12d54:	mov	r0, #0
   12d58:	str	r0, [sp, #76]	; 0x4c
   12d5c:	str	r0, [sp, #72]	; 0x48
   12d60:	strb	r0, [sp, #80]	; 0x50
   12d64:	strb	r0, [sp, #68]	; 0x44
   12d68:	add	r0, sp, #68	; 0x44
   12d6c:	str	r6, [sp, #84]	; 0x54
   12d70:	bl	13610 <__assert_fail@plt+0x1eec>
   12d74:	ldr	r0, [sp, #96]	; 0x60
   12d78:	mov	r6, r4
   12d7c:	str	r4, [sp, #4]
   12d80:	cmp	r0, #0
   12d84:	movwne	r0, #1
   12d88:	cmp	r7, #0
   12d8c:	beq	12e20 <__assert_fail@plt+0x16fc>
   12d90:	ldrb	r1, [sp, #92]	; 0x5c
   12d94:	ldr	r6, [sp, #4]
   12d98:	clz	r1, r1
   12d9c:	lsr	r1, r1, #5
   12da0:	orrs	r0, r1, r0
   12da4:	beq	12e20 <__assert_fail@plt+0x16fc>
   12da8:	ldr	r6, [sp, #4]
   12dac:	mov	r8, #1
   12db0:	mov	r4, #0
   12db4:	cmp	r8, sl
   12db8:	bcc	12dd8 <__assert_fail@plt+0x16b4>
   12dbc:	ldr	r1, [sp, #84]	; 0x54
   12dc0:	ldr	r2, [sp, #88]	; 0x58
   12dc4:	mov	r0, r6
   12dc8:	mvn	r3, #0
   12dcc:	bl	11718 <__mempcpy_chk@plt>
   12dd0:	mov	r6, r0
   12dd4:	sub	r7, r7, #1
   12dd8:	strb	r4, [sp, #80]	; 0x50
   12ddc:	ldr	r0, [sp, #84]	; 0x54
   12de0:	ldr	r1, [sp, #88]	; 0x58
   12de4:	add	r0, r0, r1
   12de8:	str	r0, [sp, #84]	; 0x54
   12dec:	add	r0, sp, #68	; 0x44
   12df0:	bl	13610 <__assert_fail@plt+0x1eec>
   12df4:	ldr	r0, [sp, #96]	; 0x60
   12df8:	cmp	r0, #0
   12dfc:	movwne	r0, #1
   12e00:	cmp	r7, #0
   12e04:	beq	12e20 <__assert_fail@plt+0x16fc>
   12e08:	ldrb	r1, [sp, #92]	; 0x5c
   12e0c:	add	r8, r8, #1
   12e10:	clz	r1, r1
   12e14:	lsr	r1, r1, #5
   12e18:	orrs	r0, r1, r0
   12e1c:	bne	12db4 <__assert_fail@plt+0x1690>
   12e20:	ldr	r4, [sp, #4]
   12e24:	mov	r0, #0
   12e28:	strb	r0, [r6]
   12e2c:	mov	r0, #16
   12e30:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12e34:	mov	r7, r0
   12e38:	mov	r0, #1
   12e3c:	str	r0, [r7]
   12e40:	mov	r0, r4
   12e44:	bl	227c8 <__assert_fail@plt+0x110a4>
   12e48:	str	r0, [r7, #4]
   12e4c:	mov	r0, r4
   12e50:	bl	132e4 <__assert_fail@plt+0x1bc0>
   12e54:	ldr	r4, [sp, #8]
   12e58:	mov	r0, r9
   12e5c:	bl	11f30 <__assert_fail@plt+0x80c>
   12e60:	mov	r0, r5
   12e64:	bl	11f30 <__assert_fail@plt+0x80c>
   12e68:	mov	r0, r4
   12e6c:	bl	11f30 <__assert_fail@plt+0x80c>
   12e70:	b	128b4 <__assert_fail@plt+0x1190>
   12e74:	movw	r1, #14713	; 0x3979
   12e78:	mov	r0, #0
   12e7c:	mov	r2, #5
   12e80:	movt	r1, #2
   12e84:	bl	114a8 <dcgettext@plt>
   12e88:	mov	r2, r0
   12e8c:	mov	r0, #2
   12e90:	mov	r1, #0
   12e94:	bl	11544 <error@plt>
   12e98:	movw	r1, #14634	; 0x392a
   12e9c:	mov	r0, #0
   12ea0:	mov	r2, #5
   12ea4:	movt	r1, #2
   12ea8:	bl	114a8 <dcgettext@plt>
   12eac:	mov	r4, r0
   12eb0:	ldr	r0, [r5]
   12eb4:	ldr	r2, [r0, #-4]
   12eb8:	mov	r0, #0
   12ebc:	mov	r1, #8
   12ec0:	bl	14e40 <__assert_fail@plt+0x371c>
   12ec4:	mov	r3, r0
   12ec8:	mov	r0, #2
   12ecc:	mov	r1, #0
   12ed0:	mov	r2, r4
   12ed4:	bl	11544 <error@plt>
   12ed8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12edc:	add	fp, sp, #24
   12ee0:	sub	sp, sp, #360	; 0x168
   12ee4:	mov	r5, r1
   12ee8:	mov	r4, r0
   12eec:	bl	123b4 <__assert_fail@plt+0xc90>
   12ef0:	mov	r0, r5
   12ef4:	bl	123b4 <__assert_fail@plt+0xc90>
   12ef8:	movw	r0, #21232	; 0x52f0
   12efc:	movw	r1, #710	; 0x2c6
   12f00:	movt	r0, #3
   12f04:	str	r1, [r0]
   12f08:	mov	r0, #0
   12f0c:	add	r1, sp, #16
   12f10:	str	r0, [sp, #12]
   12f14:	str	r0, [sp, #8]
   12f18:	str	r0, [fp, #-92]	; 0xffffffa4
   12f1c:	str	r1, [fp, #-96]	; 0xffffffa0
   12f20:	str	r0, [fp, #-108]	; 0xffffff94
   12f24:	str	r0, [sp, #4]
   12f28:	str	r0, [fp, #-112]	; 0xffffff90
   12f2c:	ldr	r5, [r5, #4]
   12f30:	mov	r0, r5
   12f34:	bl	115c8 <strlen@plt>
   12f38:	mov	r1, r0
   12f3c:	sub	r2, fp, #112	; 0x70
   12f40:	mov	r0, r5
   12f44:	bl	15370 <__assert_fail@plt+0x3c4c>
   12f48:	cmp	r0, #0
   12f4c:	bne	1312c <__assert_fail@plt+0x1a08>
   12f50:	ldrb	r0, [fp, #-84]	; 0xffffffac
   12f54:	and	r0, r0, #127	; 0x7f
   12f58:	strb	r0, [fp, #-84]	; 0xffffffac
   12f5c:	ldr	r5, [r4, #4]
   12f60:	mov	r0, r5
   12f64:	bl	115c8 <strlen@plt>
   12f68:	mov	r2, r0
   12f6c:	add	r0, sp, #4
   12f70:	mov	r1, r5
   12f74:	mov	r3, #0
   12f78:	str	r0, [sp]
   12f7c:	sub	r0, fp, #112	; 0x70
   12f80:	bl	180f8 <__assert_fail@plt+0x69d4>
   12f84:	mov	r5, r0
   12f88:	cmp	r0, #0
   12f8c:	bmi	12fe0 <__assert_fail@plt+0x18bc>
   12f90:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12f94:	cmp	r0, #0
   12f98:	beq	13014 <__assert_fail@plt+0x18f0>
   12f9c:	ldr	r0, [sp, #12]
   12fa0:	ldr	r0, [r0, #4]
   12fa4:	cmn	r0, #1
   12fa8:	ble	130d0 <__assert_fail@plt+0x19ac>
   12fac:	ldr	r1, [r4, #4]
   12fb0:	mov	r2, #0
   12fb4:	strb	r2, [r1, r0]
   12fb8:	ldr	r0, [sp, #8]
   12fbc:	ldr	r5, [r4, #4]
   12fc0:	ldr	r6, [r0, #4]
   12fc4:	mov	r0, #16
   12fc8:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12fcc:	mov	r4, r0
   12fd0:	mov	r0, #1
   12fd4:	str	r0, [r4]
   12fd8:	add	r0, r5, r6
   12fdc:	b	130ec <__assert_fail@plt+0x19c8>
   12fe0:	cmn	r5, #1
   12fe4:	bne	13144 <__assert_fail@plt+0x1a20>
   12fe8:	ldr	r5, [fp, #-88]	; 0xffffffa8
   12fec:	mov	r0, #16
   12ff0:	bl	223d4 <__assert_fail@plt+0x10cb0>
   12ff4:	mov	r4, r0
   12ff8:	cmp	r5, #0
   12ffc:	bne	130dc <__assert_fail@plt+0x19b8>
   13000:	mov	r1, #0
   13004:	mov	r0, r4
   13008:	str	r1, [r0], #4
   1300c:	mov	r1, #0
   13010:	b	130c8 <__assert_fail@plt+0x19a4>
   13014:	bl	11514 <__ctype_get_mb_cur_max@plt>
   13018:	cmp	r0, #1
   1301c:	mov	r6, r5
   13020:	beq	130b0 <__assert_fail@plt+0x198c>
   13024:	ldr	r7, [r4, #4]
   13028:	mov	r6, #0
   1302c:	sub	r0, fp, #80	; 0x50
   13030:	str	r6, [fp, #-72]	; 0xffffffb8
   13034:	str	r6, [fp, #-76]	; 0xffffffb4
   13038:	strb	r6, [fp, #-68]	; 0xffffffbc
   1303c:	strb	r6, [fp, #-80]	; 0xffffffb0
   13040:	str	r7, [fp, #-64]	; 0xffffffc0
   13044:	bl	13610 <__assert_fail@plt+0x1eec>
   13048:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   1304c:	cmp	r0, #0
   13050:	beq	13060 <__assert_fail@plt+0x193c>
   13054:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13058:	cmp	r0, #0
   1305c:	beq	130b0 <__assert_fail@plt+0x198c>
   13060:	mov	r8, #0
   13064:	sub	r4, fp, #80	; 0x50
   13068:	mov	r6, #0
   1306c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13070:	sub	r1, r0, r7
   13074:	cmp	r1, r5
   13078:	addcc	r6, r6, #1
   1307c:	bcs	130b0 <__assert_fail@plt+0x198c>
   13080:	strb	r8, [fp, #-68]	; 0xffffffbc
   13084:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13088:	add	r0, r0, r1
   1308c:	str	r0, [fp, #-64]	; 0xffffffc0
   13090:	mov	r0, r4
   13094:	bl	13610 <__assert_fail@plt+0x1eec>
   13098:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   1309c:	cmp	r0, #0
   130a0:	beq	1306c <__assert_fail@plt+0x1948>
   130a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   130a8:	cmp	r0, #0
   130ac:	bne	1306c <__assert_fail@plt+0x1948>
   130b0:	mov	r0, #16
   130b4:	bl	223d4 <__assert_fail@plt+0x10cb0>
   130b8:	mov	r1, #0
   130bc:	mov	r4, r0
   130c0:	str	r1, [r0], #4
   130c4:	mov	r1, r6
   130c8:	bl	1167c <__gmpz_init_set_ui@plt>
   130cc:	b	130f4 <__assert_fail@plt+0x19d0>
   130d0:	mov	r0, #16
   130d4:	bl	223d4 <__assert_fail@plt+0x10cb0>
   130d8:	mov	r4, r0
   130dc:	mov	r0, #1
   130e0:	str	r0, [r4]
   130e4:	movw	r0, #14499	; 0x38a3
   130e8:	movt	r0, #2
   130ec:	bl	227c8 <__assert_fail@plt+0x110a4>
   130f0:	str	r0, [r4, #4]
   130f4:	ldr	r0, [sp, #4]
   130f8:	cmp	r0, #0
   130fc:	beq	13110 <__assert_fail@plt+0x19ec>
   13100:	ldr	r0, [sp, #8]
   13104:	bl	132e4 <__assert_fail@plt+0x1bc0>
   13108:	ldr	r0, [sp, #12]
   1310c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   13110:	mov	r0, #0
   13114:	str	r0, [fp, #-96]	; 0xffffffa0
   13118:	sub	r0, fp, #112	; 0x70
   1311c:	bl	165e8 <__assert_fail@plt+0x4ec4>
   13120:	mov	r0, r4
   13124:	sub	sp, fp, #24
   13128:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1312c:	movw	r2, #14856	; 0x3a08
   13130:	mov	r3, r0
   13134:	mov	r0, #2
   13138:	mov	r1, #0
   1313c:	movt	r2, #2
   13140:	bl	11544 <error@plt>
   13144:	mov	r4, #75	; 0x4b
   13148:	cmn	r5, #2
   1314c:	bne	13158 <__assert_fail@plt+0x1a34>
   13150:	bl	115f8 <__errno_location@plt>
   13154:	ldr	r4, [r0]
   13158:	movw	r1, #14742	; 0x3996
   1315c:	mov	r0, #0
   13160:	mov	r2, #5
   13164:	movt	r1, #2
   13168:	bl	114a8 <dcgettext@plt>
   1316c:	mov	r2, r0
   13170:	mov	r0, #3
   13174:	mov	r1, r4
   13178:	bl	11544 <error@plt>
   1317c:	push	{r4, r5, fp, lr}
   13180:	add	fp, sp, #8
   13184:	movw	r5, #20912	; 0x51b0
   13188:	movt	r5, #3
   1318c:	ldr	r0, [r5]
   13190:	ldr	r0, [r0]
   13194:	cmp	r0, #0
   13198:	popne	{r4, r5, fp, pc}
   1319c:	movw	r1, #14592	; 0x3900
   131a0:	mov	r0, #0
   131a4:	mov	r2, #5
   131a8:	movt	r1, #2
   131ac:	bl	114a8 <dcgettext@plt>
   131b0:	mov	r4, r0
   131b4:	ldr	r0, [r5]
   131b8:	mov	r1, #8
   131bc:	ldr	r2, [r0, #-4]
   131c0:	mov	r0, #0
   131c4:	bl	14e40 <__assert_fail@plt+0x371c>
   131c8:	mov	r3, r0
   131cc:	mov	r0, #2
   131d0:	mov	r1, #0
   131d4:	mov	r2, r4
   131d8:	bl	11544 <error@plt>
   131dc:	movw	r1, #20916	; 0x51b4
   131e0:	movt	r1, #3
   131e4:	str	r0, [r1]
   131e8:	bx	lr
   131ec:	movw	r1, #20920	; 0x51b8
   131f0:	movt	r1, #3
   131f4:	strb	r0, [r1]
   131f8:	bx	lr
   131fc:	push	{r4, r5, r6, sl, fp, lr}
   13200:	add	fp, sp, #16
   13204:	sub	sp, sp, #8
   13208:	movw	r0, #20900	; 0x51a4
   1320c:	movt	r0, #3
   13210:	ldr	r0, [r0]
   13214:	bl	22918 <__assert_fail@plt+0x111f4>
   13218:	cmp	r0, #0
   1321c:	beq	13244 <__assert_fail@plt+0x1b20>
   13220:	movw	r0, #20920	; 0x51b8
   13224:	movt	r0, #3
   13228:	ldrb	r0, [r0]
   1322c:	cmp	r0, #0
   13230:	beq	13264 <__assert_fail@plt+0x1b40>
   13234:	bl	115f8 <__errno_location@plt>
   13238:	ldr	r0, [r0]
   1323c:	cmp	r0, #32
   13240:	bne	13264 <__assert_fail@plt+0x1b40>
   13244:	movw	r0, #20896	; 0x51a0
   13248:	movt	r0, #3
   1324c:	ldr	r0, [r0]
   13250:	bl	22918 <__assert_fail@plt+0x111f4>
   13254:	cmp	r0, #0
   13258:	subeq	sp, fp, #16
   1325c:	popeq	{r4, r5, r6, sl, fp, pc}
   13260:	b	132d4 <__assert_fail@plt+0x1bb0>
   13264:	movw	r1, #14840	; 0x39f8
   13268:	mov	r0, #0
   1326c:	mov	r2, #5
   13270:	movt	r1, #2
   13274:	bl	114a8 <dcgettext@plt>
   13278:	mov	r4, r0
   1327c:	movw	r0, #20916	; 0x51b4
   13280:	movt	r0, #3
   13284:	ldr	r6, [r0]
   13288:	bl	115f8 <__errno_location@plt>
   1328c:	ldr	r5, [r0]
   13290:	cmp	r6, #0
   13294:	bne	132b0 <__assert_fail@plt+0x1b8c>
   13298:	movw	r2, #14856	; 0x3a08
   1329c:	mov	r0, #0
   132a0:	mov	r1, r5
   132a4:	mov	r3, r4
   132a8:	movt	r2, #2
   132ac:	b	132d0 <__assert_fail@plt+0x1bac>
   132b0:	mov	r0, r6
   132b4:	bl	14fe0 <__assert_fail@plt+0x38bc>
   132b8:	movw	r2, #14852	; 0x3a04
   132bc:	mov	r3, r0
   132c0:	str	r4, [sp]
   132c4:	mov	r0, #0
   132c8:	mov	r1, r5
   132cc:	movt	r2, #2
   132d0:	bl	11544 <error@plt>
   132d4:	movw	r0, #20808	; 0x5148
   132d8:	movt	r0, #3
   132dc:	ldr	r0, [r0]
   132e0:	bl	11454 <_exit@plt>
   132e4:	push	{r4, r5, r6, sl, fp, lr}
   132e8:	add	fp, sp, #16
   132ec:	mov	r4, r0
   132f0:	bl	115f8 <__errno_location@plt>
   132f4:	ldr	r6, [r0]
   132f8:	mov	r5, r0
   132fc:	mov	r0, r4
   13300:	bl	1143c <free@plt>
   13304:	str	r6, [r5]
   13308:	pop	{r4, r5, r6, sl, fp, pc}
   1330c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13310:	add	fp, sp, #24
   13314:	sub	sp, sp, #8
   13318:	movw	r6, #20904	; 0x51a8
   1331c:	mov	r4, #0
   13320:	cmp	r0, #2
   13324:	movt	r6, #3
   13328:	ldr	r7, [r6]
   1332c:	str	r4, [r6]
   13330:	bne	133a4 <__assert_fail@plt+0x1c80>
   13334:	mov	r8, r3
   13338:	movw	r3, #14872	; 0x3a18
   1333c:	mov	r5, r2
   13340:	movw	r2, #14520	; 0x38b8
   13344:	mov	r0, #2
   13348:	str	r4, [sp]
   1334c:	movt	r2, #2
   13350:	movt	r3, #2
   13354:	bl	11598 <getopt_long@plt>
   13358:	cmp	r0, #104	; 0x68
   1335c:	beq	13398 <__assert_fail@plt+0x1c74>
   13360:	cmp	r0, #118	; 0x76
   13364:	bne	133a4 <__assert_fail@plt+0x1c80>
   13368:	movw	r0, #20900	; 0x51a4
   1336c:	ldr	r3, [fp, #8]
   13370:	add	r1, fp, #16
   13374:	mov	r2, r8
   13378:	movt	r0, #3
   1337c:	str	r1, [sp, #4]
   13380:	str	r1, [sp]
   13384:	mov	r1, r5
   13388:	ldr	r0, [r0]
   1338c:	bl	2227c <__assert_fail@plt+0x10b58>
   13390:	mov	r0, #0
   13394:	bl	115b0 <exit@plt>
   13398:	ldr	r1, [fp, #12]
   1339c:	mov	r0, #0
   133a0:	blx	r1
   133a4:	movw	r0, #20888	; 0x5198
   133a8:	str	r7, [r6]
   133ac:	movt	r0, #3
   133b0:	str	r4, [r0]
   133b4:	sub	sp, fp, #24
   133b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   133c0:	add	fp, sp, #24
   133c4:	sub	sp, sp, #8
   133c8:	mov	r8, r3
   133cc:	ldr	r3, [fp, #12]
   133d0:	movw	r7, #20904	; 0x51a8
   133d4:	movw	r5, #14499	; 0x38a3
   133d8:	mov	r9, r2
   133dc:	mov	r2, #1
   133e0:	mov	r6, #0
   133e4:	movt	r7, #3
   133e8:	movt	r5, #2
   133ec:	str	r6, [sp]
   133f0:	ldr	r4, [r7]
   133f4:	str	r2, [r7]
   133f8:	movw	r2, #14520	; 0x38b8
   133fc:	cmp	r3, #0
   13400:	movw	r3, #14872	; 0x3a18
   13404:	movt	r2, #2
   13408:	movt	r3, #2
   1340c:	movne	r2, r5
   13410:	bl	11598 <getopt_long@plt>
   13414:	cmn	r0, #1
   13418:	beq	13444 <__assert_fail@plt+0x1d20>
   1341c:	cmp	r0, #104	; 0x68
   13420:	beq	13438 <__assert_fail@plt+0x1d14>
   13424:	cmp	r0, #118	; 0x76
   13428:	beq	13450 <__assert_fail@plt+0x1d2c>
   1342c:	movw	r0, #20808	; 0x5148
   13430:	movt	r0, #3
   13434:	ldr	r6, [r0]
   13438:	ldr	r1, [fp, #16]
   1343c:	mov	r0, r6
   13440:	blx	r1
   13444:	str	r4, [r7]
   13448:	sub	sp, fp, #24
   1344c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13450:	movw	r0, #20900	; 0x51a4
   13454:	ldr	r3, [fp, #8]
   13458:	add	r1, fp, #20
   1345c:	mov	r2, r8
   13460:	movt	r0, #3
   13464:	str	r1, [sp, #4]
   13468:	str	r1, [sp]
   1346c:	mov	r1, r9
   13470:	ldr	r0, [r0]
   13474:	bl	2227c <__assert_fail@plt+0x10b58>
   13478:	mov	r0, #0
   1347c:	bl	115b0 <exit@plt>
   13480:	push	{r4, r5, r6, sl, fp, lr}
   13484:	add	fp, sp, #16
   13488:	sub	sp, sp, #56	; 0x38
   1348c:	mov	r5, r1
   13490:	mov	r6, r0
   13494:	and	r4, r1, #240	; 0xf0
   13498:	bl	11514 <__ctype_get_mb_cur_max@plt>
   1349c:	cmp	r4, #48	; 0x30
   134a0:	cmpcs	r0, #2
   134a4:	bcs	134bc <__assert_fail@plt+0x1d98>
   134a8:	mov	r0, r6
   134ac:	mov	r1, r5
   134b0:	sub	sp, fp, #16
   134b4:	pop	{r4, r5, r6, sl, fp, lr}
   134b8:	b	115d4 <strchr@plt>
   134bc:	mov	r4, #0
   134c0:	mov	r0, sp
   134c4:	str	r4, [sp, #8]
   134c8:	str	r4, [sp, #4]
   134cc:	strb	r4, [sp, #12]
   134d0:	strb	r4, [sp]
   134d4:	str	r6, [sp, #16]
   134d8:	bl	13610 <__assert_fail@plt+0x1eec>
   134dc:	ldrb	r0, [sp, #24]
   134e0:	cmp	r0, #0
   134e4:	beq	134f4 <__assert_fail@plt+0x1dd0>
   134e8:	ldr	r0, [sp, #28]
   134ec:	cmp	r0, #0
   134f0:	beq	13550 <__assert_fail@plt+0x1e2c>
   134f4:	uxtb	r6, r5
   134f8:	mov	r5, sp
   134fc:	mov	r4, #0
   13500:	ldr	r1, [sp, #20]
   13504:	ldr	r0, [sp, #16]
   13508:	cmp	r1, #1
   1350c:	bne	1351c <__assert_fail@plt+0x1df8>
   13510:	ldrb	r2, [r0]
   13514:	cmp	r2, r6
   13518:	beq	1354c <__assert_fail@plt+0x1e28>
   1351c:	add	r0, r0, r1
   13520:	strb	r4, [sp, #12]
   13524:	str	r0, [sp, #16]
   13528:	mov	r0, r5
   1352c:	bl	13610 <__assert_fail@plt+0x1eec>
   13530:	ldrb	r0, [sp, #24]
   13534:	cmp	r0, #0
   13538:	beq	13500 <__assert_fail@plt+0x1ddc>
   1353c:	ldr	r0, [sp, #28]
   13540:	cmp	r0, #0
   13544:	bne	13500 <__assert_fail@plt+0x1ddc>
   13548:	b	13550 <__assert_fail@plt+0x1e2c>
   1354c:	mov	r4, r0
   13550:	mov	r0, r4
   13554:	sub	sp, fp, #16
   13558:	pop	{r4, r5, r6, sl, fp, pc}
   1355c:	push	{r4, r5, r6, sl, fp, lr}
   13560:	add	fp, sp, #16
   13564:	sub	sp, sp, #56	; 0x38
   13568:	mov	r5, r0
   1356c:	bl	11514 <__ctype_get_mb_cur_max@plt>
   13570:	cmp	r0, #2
   13574:	bcc	13600 <__assert_fail@plt+0x1edc>
   13578:	mov	r4, #0
   1357c:	mov	r0, sp
   13580:	str	r4, [sp, #8]
   13584:	str	r4, [sp, #4]
   13588:	strb	r4, [sp, #12]
   1358c:	strb	r4, [sp]
   13590:	str	r5, [sp, #16]
   13594:	bl	13610 <__assert_fail@plt+0x1eec>
   13598:	ldrb	r0, [sp, #24]
   1359c:	cmp	r0, #0
   135a0:	beq	135b0 <__assert_fail@plt+0x1e8c>
   135a4:	ldr	r0, [sp, #28]
   135a8:	cmp	r0, #0
   135ac:	beq	135f4 <__assert_fail@plt+0x1ed0>
   135b0:	mov	r6, #0
   135b4:	mov	r5, sp
   135b8:	mov	r4, #0
   135bc:	strb	r6, [sp, #12]
   135c0:	ldr	r0, [sp, #16]
   135c4:	ldr	r1, [sp, #20]
   135c8:	add	r0, r0, r1
   135cc:	str	r0, [sp, #16]
   135d0:	mov	r0, r5
   135d4:	bl	13610 <__assert_fail@plt+0x1eec>
   135d8:	ldrb	r1, [sp, #24]
   135dc:	ldr	r0, [sp, #28]
   135e0:	add	r4, r4, #1
   135e4:	cmp	r1, #0
   135e8:	beq	135bc <__assert_fail@plt+0x1e98>
   135ec:	cmp	r0, #0
   135f0:	bne	135bc <__assert_fail@plt+0x1e98>
   135f4:	mov	r0, r4
   135f8:	sub	sp, fp, #16
   135fc:	pop	{r4, r5, r6, sl, fp, pc}
   13600:	mov	r0, r5
   13604:	sub	sp, fp, #16
   13608:	pop	{r4, r5, r6, sl, fp, lr}
   1360c:	b	115c8 <strlen@plt>
   13610:	push	{r4, r5, r6, r7, fp, lr}
   13614:	add	fp, sp, #16
   13618:	mov	r4, r0
   1361c:	ldrb	r0, [r0, #12]
   13620:	cmp	r0, #0
   13624:	popne	{r4, r5, r6, r7, fp, pc}
   13628:	ldrb	r0, [r4]
   1362c:	ldr	r5, [r4, #16]
   13630:	cmp	r0, #0
   13634:	beq	13690 <__assert_fail@plt+0x1f6c>
   13638:	bl	11514 <__ctype_get_mb_cur_max@plt>
   1363c:	mov	r1, r0
   13640:	mov	r0, r5
   13644:	bl	21ca4 <__assert_fail@plt+0x10580>
   13648:	add	r6, r4, #4
   1364c:	add	r7, r4, #28
   13650:	mov	r2, r0
   13654:	mov	r1, r5
   13658:	mov	r0, r7
   1365c:	mov	r3, r6
   13660:	bl	22cd8 <__assert_fail@plt+0x115b4>
   13664:	cmn	r0, #2
   13668:	str	r0, [r4, #20]
   1366c:	beq	1370c <__assert_fail@plt+0x1fe8>
   13670:	cmp	r0, #0
   13674:	beq	136c8 <__assert_fail@plt+0x1fa4>
   13678:	cmn	r0, #1
   1367c:	bne	136ec <__assert_fail@plt+0x1fc8>
   13680:	mov	r0, #0
   13684:	strb	r0, [r4, #24]
   13688:	mov	r0, #1
   1368c:	b	1371c <__assert_fail@plt+0x1ff8>
   13690:	ldrb	r0, [r5]
   13694:	movw	r2, #16680	; 0x4128
   13698:	movt	r2, #2
   1369c:	ubfx	r1, r0, #5, #3
   136a0:	ldr	r1, [r2, r1, lsl #2]
   136a4:	and	r2, r0, #31
   136a8:	mov	r0, #1
   136ac:	tst	r1, r0, lsl r2
   136b0:	beq	1372c <__assert_fail@plt+0x2008>
   136b4:	str	r0, [r4, #20]
   136b8:	ldrb	r1, [r5]
   136bc:	strb	r0, [r4, #24]
   136c0:	str	r1, [r4, #28]
   136c4:	b	13720 <__assert_fail@plt+0x1ffc>
   136c8:	mov	r0, #1
   136cc:	str	r0, [r4, #20]
   136d0:	ldr	r0, [r4, #16]
   136d4:	ldrb	r0, [r0]
   136d8:	cmp	r0, #0
   136dc:	bne	13748 <__assert_fail@plt+0x2024>
   136e0:	ldr	r0, [r7]
   136e4:	cmp	r0, #0
   136e8:	bne	13760 <__assert_fail@plt+0x203c>
   136ec:	mov	r0, #1
   136f0:	strb	r0, [r4, #24]
   136f4:	mov	r0, r6
   136f8:	bl	1149c <mbsinit@plt>
   136fc:	cmp	r0, #0
   13700:	movne	r0, #0
   13704:	strbne	r0, [r4]
   13708:	b	13720 <__assert_fail@plt+0x1ffc>
   1370c:	ldr	r0, [r4, #16]
   13710:	bl	115c8 <strlen@plt>
   13714:	mov	r1, #0
   13718:	strb	r1, [r4, #24]
   1371c:	str	r0, [r4, #20]
   13720:	mov	r0, #1
   13724:	strb	r0, [r4, #12]
   13728:	pop	{r4, r5, r6, r7, fp, pc}
   1372c:	add	r0, r4, #4
   13730:	bl	1149c <mbsinit@plt>
   13734:	cmp	r0, #0
   13738:	beq	13778 <__assert_fail@plt+0x2054>
   1373c:	mov	r0, #1
   13740:	strb	r0, [r4]
   13744:	b	13638 <__assert_fail@plt+0x1f14>
   13748:	movw	r0, #15007	; 0x3a9f
   1374c:	movw	r1, #14943	; 0x3a5f
   13750:	movw	r3, #14959	; 0x3a6f
   13754:	mov	r2, #171	; 0xab
   13758:	movt	r0, #2
   1375c:	b	1378c <__assert_fail@plt+0x2068>
   13760:	movw	r0, #15030	; 0x3ab6
   13764:	movw	r1, #14943	; 0x3a5f
   13768:	movw	r3, #14959	; 0x3a6f
   1376c:	mov	r2, #172	; 0xac
   13770:	movt	r0, #2
   13774:	b	1378c <__assert_fail@plt+0x2068>
   13778:	movw	r0, #14920	; 0x3a48
   1377c:	movw	r1, #14943	; 0x3a5f
   13780:	movw	r3, #14959	; 0x3a6f
   13784:	mov	r2, #143	; 0x8f
   13788:	movt	r0, #2
   1378c:	movt	r1, #2
   13790:	movt	r3, #2
   13794:	bl	11724 <__assert_fail@plt>
   13798:	ldr	r2, [r0, #16]
   1379c:	add	r1, r2, r1
   137a0:	str	r1, [r0, #16]
   137a4:	bx	lr
   137a8:	push	{r4, r5, r6, sl, fp, lr}
   137ac:	add	fp, sp, #16
   137b0:	mov	r5, r1
   137b4:	ldrb	r1, [r1]
   137b8:	mov	r4, r0
   137bc:	strb	r1, [r0], #4
   137c0:	cmp	r1, #0
   137c4:	beq	137d4 <__assert_fail@plt+0x20b0>
   137c8:	ldmib	r5, {r1, r2}
   137cc:	stm	r0, {r1, r2}
   137d0:	b	137e0 <__assert_fail@plt+0x20bc>
   137d4:	mov	r1, #0
   137d8:	str	r1, [r0]
   137dc:	str	r1, [r0, #4]
   137e0:	ldrb	r0, [r5, #12]
   137e4:	strb	r0, [r4, #12]
   137e8:	add	r0, r5, #32
   137ec:	ldr	r1, [r5, #16]
   137f0:	cmp	r1, r0
   137f4:	beq	13800 <__assert_fail@plt+0x20dc>
   137f8:	mov	r6, r1
   137fc:	b	13810 <__assert_fail@plt+0x20ec>
   13800:	ldr	r2, [r5, #20]
   13804:	add	r6, r4, #32
   13808:	mov	r0, r6
   1380c:	bl	11460 <memcpy@plt>
   13810:	str	r6, [r4, #16]
   13814:	ldr	r0, [r5, #20]
   13818:	str	r0, [r4, #20]
   1381c:	ldrb	r0, [r5, #24]
   13820:	strb	r0, [r4, #24]
   13824:	cmp	r0, #0
   13828:	ldrne	r0, [r5, #28]
   1382c:	strne	r0, [r4, #28]
   13830:	pop	{r4, r5, r6, sl, fp, pc}
   13834:	push	{r4, r5, fp, lr}
   13838:	add	fp, sp, #8
   1383c:	cmp	r0, #0
   13840:	beq	138d4 <__assert_fail@plt+0x21b0>
   13844:	mov	r1, #47	; 0x2f
   13848:	mov	r4, r0
   1384c:	bl	116a0 <strrchr@plt>
   13850:	cmp	r0, #0
   13854:	mov	r5, r4
   13858:	addne	r5, r0, #1
   1385c:	sub	r0, r5, r4
   13860:	cmp	r0, #7
   13864:	blt	138b8 <__assert_fail@plt+0x2194>
   13868:	movw	r1, #15104	; 0x3b00
   1386c:	sub	r0, r5, #7
   13870:	mov	r2, #7
   13874:	movt	r1, #2
   13878:	bl	116f4 <strncmp@plt>
   1387c:	cmp	r0, #0
   13880:	bne	138b8 <__assert_fail@plt+0x2194>
   13884:	movw	r1, #15112	; 0x3b08
   13888:	mov	r0, r5
   1388c:	mov	r2, #3
   13890:	movt	r1, #2
   13894:	bl	116f4 <strncmp@plt>
   13898:	cmp	r0, #0
   1389c:	beq	138a8 <__assert_fail@plt+0x2184>
   138a0:	mov	r4, r5
   138a4:	b	138b8 <__assert_fail@plt+0x2194>
   138a8:	movw	r0, #20880	; 0x5190
   138ac:	add	r4, r5, #3
   138b0:	movt	r0, #3
   138b4:	str	r4, [r0]
   138b8:	movw	r0, #20884	; 0x5194
   138bc:	movt	r0, #3
   138c0:	str	r4, [r0]
   138c4:	movw	r0, #20924	; 0x51bc
   138c8:	movt	r0, #3
   138cc:	str	r4, [r0]
   138d0:	pop	{r4, r5, fp, pc}
   138d4:	movw	r0, #20896	; 0x51a0
   138d8:	movt	r0, #3
   138dc:	ldr	r1, [r0]
   138e0:	movw	r0, #15048	; 0x3ac8
   138e4:	movt	r0, #2
   138e8:	bl	116e8 <fputs@plt>
   138ec:	bl	11700 <abort@plt>
   138f0:	push	{r4, r5, r6, sl, fp, lr}
   138f4:	add	fp, sp, #16
   138f8:	mov	r4, r0
   138fc:	movw	r0, #20928	; 0x51c0
   13900:	movt	r0, #3
   13904:	cmp	r4, #0
   13908:	moveq	r4, r0
   1390c:	bl	115f8 <__errno_location@plt>
   13910:	ldr	r6, [r0]
   13914:	mov	r5, r0
   13918:	mov	r0, r4
   1391c:	mov	r1, #48	; 0x30
   13920:	bl	22724 <__assert_fail@plt+0x11000>
   13924:	str	r6, [r5]
   13928:	pop	{r4, r5, r6, sl, fp, pc}
   1392c:	movw	r1, #20928	; 0x51c0
   13930:	cmp	r0, #0
   13934:	movt	r1, #3
   13938:	movne	r1, r0
   1393c:	ldr	r0, [r1]
   13940:	bx	lr
   13944:	movw	r2, #20928	; 0x51c0
   13948:	cmp	r0, #0
   1394c:	movt	r2, #3
   13950:	movne	r2, r0
   13954:	str	r1, [r2]
   13958:	bx	lr
   1395c:	movw	r3, #20928	; 0x51c0
   13960:	cmp	r0, #0
   13964:	and	r2, r2, #1
   13968:	movt	r3, #3
   1396c:	movne	r3, r0
   13970:	ubfx	r0, r1, #5, #3
   13974:	and	r1, r1, #31
   13978:	add	ip, r3, r0, lsl #2
   1397c:	mov	r0, #1
   13980:	ldr	r3, [ip, #8]
   13984:	and	r0, r0, r3, lsr r1
   13988:	eor	r2, r0, r2
   1398c:	eor	r1, r3, r2, lsl r1
   13990:	str	r1, [ip, #8]
   13994:	bx	lr
   13998:	movw	r2, #20928	; 0x51c0
   1399c:	cmp	r0, #0
   139a0:	movt	r2, #3
   139a4:	movne	r2, r0
   139a8:	ldr	r0, [r2, #4]
   139ac:	str	r1, [r2, #4]
   139b0:	bx	lr
   139b4:	push	{fp, lr}
   139b8:	mov	fp, sp
   139bc:	movw	r3, #20928	; 0x51c0
   139c0:	cmp	r0, #0
   139c4:	movt	r3, #3
   139c8:	movne	r3, r0
   139cc:	cmp	r1, #0
   139d0:	mov	r0, #10
   139d4:	cmpne	r2, #0
   139d8:	str	r0, [r3]
   139dc:	bne	139e4 <__assert_fail@plt+0x22c0>
   139e0:	bl	11700 <abort@plt>
   139e4:	str	r1, [r3, #40]	; 0x28
   139e8:	str	r2, [r3, #44]	; 0x2c
   139ec:	pop	{fp, pc}
   139f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139f4:	add	fp, sp, #28
   139f8:	sub	sp, sp, #20
   139fc:	mov	r7, r0
   13a00:	ldr	r0, [fp, #8]
   13a04:	movw	r5, #20928	; 0x51c0
   13a08:	mov	r8, r3
   13a0c:	mov	r9, r2
   13a10:	mov	sl, r1
   13a14:	movt	r5, #3
   13a18:	cmp	r0, #0
   13a1c:	movne	r5, r0
   13a20:	bl	115f8 <__errno_location@plt>
   13a24:	ldr	r2, [r5, #40]	; 0x28
   13a28:	ldr	r3, [r5, #44]	; 0x2c
   13a2c:	mov	r4, r0
   13a30:	ldm	r5, {r0, r1}
   13a34:	add	r5, r5, #8
   13a38:	ldr	r6, [r4]
   13a3c:	stm	sp, {r0, r1, r5}
   13a40:	mov	r0, r7
   13a44:	mov	r1, sl
   13a48:	str	r2, [sp, #12]
   13a4c:	str	r3, [sp, #16]
   13a50:	mov	r2, r9
   13a54:	mov	r3, r8
   13a58:	bl	13a68 <__assert_fail@plt+0x2344>
   13a5c:	str	r6, [r4]
   13a60:	sub	sp, fp, #28
   13a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a6c:	add	fp, sp, #28
   13a70:	sub	sp, sp, #156	; 0x9c
   13a74:	mov	r5, r0
   13a78:	add	r0, r2, #1
   13a7c:	mov	r6, r1
   13a80:	mov	sl, r3
   13a84:	str	r2, [fp, #-80]	; 0xffffffb0
   13a88:	str	r0, [sp, #72]	; 0x48
   13a8c:	ldr	r0, [fp, #12]
   13a90:	and	r1, r0, #1
   13a94:	str	r1, [sp, #32]
   13a98:	and	r1, r0, #4
   13a9c:	str	r1, [sp, #28]
   13aa0:	ubfx	r9, r0, #1, #1
   13aa4:	bl	11514 <__ctype_get_mb_cur_max@plt>
   13aa8:	str	r0, [sp, #40]	; 0x28
   13aac:	ldr	r0, [fp, #24]
   13ab0:	ldr	r7, [fp, #8]
   13ab4:	mov	r1, #0
   13ab8:	mov	lr, #0
   13abc:	str	r5, [fp, #-84]	; 0xffffffac
   13ac0:	str	r1, [sp, #60]	; 0x3c
   13ac4:	mov	r1, #1
   13ac8:	str	r1, [fp, #-48]	; 0xffffffd0
   13acc:	str	r0, [sp, #80]	; 0x50
   13ad0:	ldr	r0, [fp, #20]
   13ad4:	str	r0, [sp, #76]	; 0x4c
   13ad8:	mov	r0, #0
   13adc:	str	r0, [sp, #56]	; 0x38
   13ae0:	mov	r0, #0
   13ae4:	str	r0, [fp, #-88]	; 0xffffffa8
   13ae8:	mov	r0, #0
   13aec:	str	r0, [fp, #-72]	; 0xffffffb8
   13af0:	mov	r0, #0
   13af4:	cmp	r7, #10
   13af8:	bhi	14ad4 <__assert_fail@plt+0x33b0>
   13afc:	add	r1, pc, #24
   13b00:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13b04:	mov	ip, r6
   13b08:	mov	r8, #0
   13b0c:	mov	r2, #1
   13b10:	mov	r6, #0
   13b14:	mov	r3, sl
   13b18:	ldr	pc, [r1, r7, lsl #2]
   13b1c:	andeq	r3, r1, r8, lsl #24
   13b20:	andeq	r3, r1, ip, asr ip
   13b24:	andeq	r3, r1, ip, lsl ip
   13b28:	andeq	r3, r1, r0, lsl #24
   13b2c:	andeq	r3, r1, r0, asr ip
   13b30:	andeq	r3, r1, r4, lsl #25
   13b34:	andeq	r3, r1, ip, lsr #24
   13b38:	andeq	r3, r1, r8, lsl #26
   13b3c:	andeq	r3, r1, r8, asr #22
   13b40:	andeq	r3, r1, r8, asr #22
   13b44:	andeq	r3, r1, r8, lsl #23
   13b48:	movw	r0, #15196	; 0x3b5c
   13b4c:	mov	r1, r7
   13b50:	mov	r6, r5
   13b54:	mov	r4, ip
   13b58:	mov	r5, lr
   13b5c:	movt	r0, #2
   13b60:	bl	15238 <__assert_fail@plt+0x3b14>
   13b64:	str	r0, [sp, #76]	; 0x4c
   13b68:	movw	r0, #14740	; 0x3994
   13b6c:	mov	r1, r7
   13b70:	movt	r0, #2
   13b74:	bl	15238 <__assert_fail@plt+0x3b14>
   13b78:	mov	lr, r5
   13b7c:	mov	r5, r6
   13b80:	mov	ip, r4
   13b84:	str	r0, [sp, #80]	; 0x50
   13b88:	mov	r8, #0
   13b8c:	tst	r9, #1
   13b90:	str	lr, [sp, #44]	; 0x2c
   13b94:	bne	13bcc <__assert_fail@plt+0x24a8>
   13b98:	ldr	r0, [sp, #76]	; 0x4c
   13b9c:	ldrb	r0, [r0]
   13ba0:	cmp	r0, #0
   13ba4:	beq	13bcc <__assert_fail@plt+0x24a8>
   13ba8:	ldr	r1, [sp, #76]	; 0x4c
   13bac:	mov	r8, #0
   13bb0:	add	r1, r1, #1
   13bb4:	cmp	r8, ip
   13bb8:	strbcc	r0, [r5, r8]
   13bbc:	ldrb	r0, [r1, r8]
   13bc0:	add	r8, r8, #1
   13bc4:	cmp	r0, #0
   13bc8:	bne	13bb4 <__assert_fail@plt+0x2490>
   13bcc:	ldr	r6, [sp, #80]	; 0x50
   13bd0:	mov	r4, ip
   13bd4:	mov	r0, r6
   13bd8:	bl	115c8 <strlen@plt>
   13bdc:	mov	ip, r4
   13be0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13be4:	ldr	lr, [sp, #44]	; 0x2c
   13be8:	str	r6, [fp, #-88]	; 0xffffffa8
   13bec:	str	r0, [fp, #-72]	; 0xffffffb8
   13bf0:	mov	r2, #1
   13bf4:	mov	r6, r9
   13bf8:	mov	r3, sl
   13bfc:	b	13d08 <__assert_fail@plt+0x25e4>
   13c00:	mov	r0, #1
   13c04:	b	13c5c <__assert_fail@plt+0x2538>
   13c08:	mov	r7, #0
   13c0c:	mov	r8, #0
   13c10:	mov	r2, r0
   13c14:	mov	r6, #0
   13c18:	b	13d08 <__assert_fail@plt+0x25e4>
   13c1c:	tst	r9, #1
   13c20:	bne	13c5c <__assert_fail@plt+0x2538>
   13c24:	mov	r2, r0
   13c28:	b	13cb4 <__assert_fail@plt+0x2590>
   13c2c:	mov	r0, #1
   13c30:	mov	r8, #0
   13c34:	mov	r7, #5
   13c38:	mov	r2, #1
   13c3c:	str	r0, [fp, #-72]	; 0xffffffb8
   13c40:	movw	r0, #15194	; 0x3b5a
   13c44:	movt	r0, #2
   13c48:	str	r0, [fp, #-88]	; 0xffffffa8
   13c4c:	b	13c7c <__assert_fail@plt+0x2558>
   13c50:	mov	r2, #1
   13c54:	tst	r9, #1
   13c58:	beq	13cb4 <__assert_fail@plt+0x2590>
   13c5c:	mov	r1, #1
   13c60:	mov	r8, #0
   13c64:	mov	r7, #2
   13c68:	mov	r2, r0
   13c6c:	str	r1, [fp, #-72]	; 0xffffffb8
   13c70:	movw	r1, #14740	; 0x3994
   13c74:	movt	r1, #2
   13c78:	str	r1, [fp, #-88]	; 0xffffffa8
   13c7c:	mov	r6, #1
   13c80:	b	13d08 <__assert_fail@plt+0x25e4>
   13c84:	tst	r9, #1
   13c88:	beq	13cd8 <__assert_fail@plt+0x25b4>
   13c8c:	mov	r0, #1
   13c90:	mov	r8, #0
   13c94:	mov	r2, #1
   13c98:	mov	r6, #1
   13c9c:	mov	r7, #5
   13ca0:	str	r0, [fp, #-72]	; 0xffffffb8
   13ca4:	movw	r0, #15194	; 0x3b5a
   13ca8:	movt	r0, #2
   13cac:	str	r0, [fp, #-88]	; 0xffffffa8
   13cb0:	b	13d08 <__assert_fail@plt+0x25e4>
   13cb4:	cmp	ip, #0
   13cb8:	mov	r8, #1
   13cbc:	mov	r6, #0
   13cc0:	mov	r7, #2
   13cc4:	movne	r0, #39	; 0x27
   13cc8:	strbne	r0, [r5]
   13ccc:	movw	r0, #14740	; 0x3994
   13cd0:	movt	r0, #2
   13cd4:	b	13cfc <__assert_fail@plt+0x25d8>
   13cd8:	cmp	ip, #0
   13cdc:	mov	r8, #1
   13ce0:	mov	r2, #1
   13ce4:	mov	r7, #5
   13ce8:	mov	r6, #0
   13cec:	movne	r0, #34	; 0x22
   13cf0:	strbne	r0, [r5]
   13cf4:	movw	r0, #15194	; 0x3b5a
   13cf8:	movt	r0, #2
   13cfc:	str	r0, [fp, #-88]	; 0xffffffa8
   13d00:	mov	r0, #1
   13d04:	str	r0, [fp, #-72]	; 0xffffffb8
   13d08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d0c:	str	r7, [fp, #-68]	; 0xffffffbc
   13d10:	str	r6, [fp, #-76]	; 0xffffffb4
   13d14:	str	r2, [sp, #84]	; 0x54
   13d18:	cmp	r0, #0
   13d1c:	movwne	r0, #1
   13d20:	and	r1, r0, r6
   13d24:	and	r1, r2, r1
   13d28:	str	r1, [sp, #48]	; 0x30
   13d2c:	sub	r1, r7, #2
   13d30:	clz	r1, r1
   13d34:	lsr	r1, r1, #5
   13d38:	and	r1, r1, r6
   13d3c:	str	r1, [sp, #64]	; 0x40
   13d40:	subs	r1, r7, #2
   13d44:	eor	r7, r6, #1
   13d48:	movwne	r1, #1
   13d4c:	str	r7, [sp, #92]	; 0x5c
   13d50:	orr	r7, r1, r7
   13d54:	and	r1, r1, r2
   13d58:	and	r0, r0, r1
   13d5c:	str	r7, [sp, #68]	; 0x44
   13d60:	mov	r7, #0
   13d64:	str	r0, [fp, #-60]	; 0xffffffc4
   13d68:	orr	r0, r1, r6
   13d6c:	ldr	r1, [fp, #16]
   13d70:	eor	r0, r0, #1
   13d74:	clz	r1, r1
   13d78:	lsr	r1, r1, #5
   13d7c:	orr	r0, r1, r0
   13d80:	str	r0, [fp, #-64]	; 0xffffffc0
   13d84:	eor	r0, r2, #1
   13d88:	str	r0, [sp, #52]	; 0x34
   13d8c:	cmn	r3, #1
   13d90:	beq	13da0 <__assert_fail@plt+0x267c>
   13d94:	cmp	r7, r3
   13d98:	bne	13dac <__assert_fail@plt+0x2688>
   13d9c:	b	14908 <__assert_fail@plt+0x31e4>
   13da0:	ldrb	r0, [r4, r7]
   13da4:	cmp	r0, #0
   13da8:	beq	14910 <__assert_fail@plt+0x31ec>
   13dac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13db0:	cmp	r0, #0
   13db4:	beq	13dfc <__assert_fail@plt+0x26d8>
   13db8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13dbc:	add	r5, r7, r0
   13dc0:	cmp	r0, #2
   13dc4:	bcc	13e10 <__assert_fail@plt+0x26ec>
   13dc8:	mov	r0, #0
   13dcc:	cmn	r3, #1
   13dd0:	str	r0, [fp, #-56]	; 0xffffffc8
   13dd4:	bne	13e18 <__assert_fail@plt+0x26f4>
   13dd8:	mov	r0, r4
   13ddc:	mov	r4, ip
   13de0:	mov	r6, lr
   13de4:	bl	115c8 <strlen@plt>
   13de8:	mov	ip, r4
   13dec:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13df0:	mov	lr, r6
   13df4:	mov	r3, r0
   13df8:	b	13e18 <__assert_fail@plt+0x26f4>
   13dfc:	mov	r0, #0
   13e00:	mov	sl, r3
   13e04:	str	r0, [fp, #-56]	; 0xffffffc8
   13e08:	mov	r0, #0
   13e0c:	b	13e84 <__assert_fail@plt+0x2760>
   13e10:	mov	r0, #0
   13e14:	str	r0, [fp, #-56]	; 0xffffffc8
   13e18:	cmp	r5, r3
   13e1c:	bls	13e30 <__assert_fail@plt+0x270c>
   13e20:	ldr	r5, [fp, #-84]	; 0xffffffac
   13e24:	mov	r0, #0
   13e28:	mov	sl, r3
   13e2c:	b	13e84 <__assert_fail@plt+0x2760>
   13e30:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13e34:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13e38:	add	r0, r4, r7
   13e3c:	mov	r5, lr
   13e40:	mov	r6, ip
   13e44:	mov	sl, r3
   13e48:	bl	115bc <bcmp@plt>
   13e4c:	ldr	r2, [sp, #92]	; 0x5c
   13e50:	cmp	r0, #0
   13e54:	ldr	r3, [fp, #-84]	; 0xffffffac
   13e58:	mov	r1, r0
   13e5c:	movwne	r1, #1
   13e60:	orr	r1, r1, r2
   13e64:	tst	r1, #1
   13e68:	beq	14994 <__assert_fail@plt+0x3270>
   13e6c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13e70:	clz	r0, r0
   13e74:	mov	lr, r5
   13e78:	mov	ip, r6
   13e7c:	mov	r5, r3
   13e80:	lsr	r0, r0, #5
   13e84:	str	r0, [fp, #-52]	; 0xffffffcc
   13e88:	ldrb	r6, [r4, r7]
   13e8c:	cmp	r6, #126	; 0x7e
   13e90:	bhi	143b8 <__assert_fail@plt+0x2c94>
   13e94:	add	r3, pc, #16
   13e98:	mov	r9, #1
   13e9c:	mov	r2, #110	; 0x6e
   13ea0:	mov	r0, #97	; 0x61
   13ea4:	mov	r1, #0
   13ea8:	ldr	pc, [r3, r6, lsl #2]
   13eac:	andeq	r4, r1, ip, lsl r2
   13eb0:			; <UNDEFINED> instruction: 0x000143b8
   13eb4:			; <UNDEFINED> instruction: 0x000143b8
   13eb8:			; <UNDEFINED> instruction: 0x000143b8
   13ebc:			; <UNDEFINED> instruction: 0x000143b8
   13ec0:			; <UNDEFINED> instruction: 0x000143b8
   13ec4:			; <UNDEFINED> instruction: 0x000143b8
   13ec8:	andeq	r4, r1, r8, lsr r4
   13ecc:	strdeq	r4, [r1], -ip
   13ed0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ed4:	andeq	r4, r1, r8, lsl #4
   13ed8:	andeq	r4, r1, r0, lsr #6
   13edc:	andeq	r4, r1, ip, ror #3
   13ee0:	andeq	r4, r1, r4, lsl #4
   13ee4:			; <UNDEFINED> instruction: 0x000143b8
   13ee8:			; <UNDEFINED> instruction: 0x000143b8
   13eec:			; <UNDEFINED> instruction: 0x000143b8
   13ef0:			; <UNDEFINED> instruction: 0x000143b8
   13ef4:			; <UNDEFINED> instruction: 0x000143b8
   13ef8:			; <UNDEFINED> instruction: 0x000143b8
   13efc:			; <UNDEFINED> instruction: 0x000143b8
   13f00:			; <UNDEFINED> instruction: 0x000143b8
   13f04:			; <UNDEFINED> instruction: 0x000143b8
   13f08:			; <UNDEFINED> instruction: 0x000143b8
   13f0c:			; <UNDEFINED> instruction: 0x000143b8
   13f10:			; <UNDEFINED> instruction: 0x000143b8
   13f14:			; <UNDEFINED> instruction: 0x000143b8
   13f18:			; <UNDEFINED> instruction: 0x000143b8
   13f1c:			; <UNDEFINED> instruction: 0x000143b8
   13f20:			; <UNDEFINED> instruction: 0x000143b8
   13f24:			; <UNDEFINED> instruction: 0x000143b8
   13f28:			; <UNDEFINED> instruction: 0x000143b8
   13f2c:	muleq	r1, ip, r1
   13f30:	andeq	r4, r1, r0, lsr #3
   13f34:	andeq	r4, r1, r0, lsr #3
   13f38:	andeq	r4, r1, r4, lsl #3
   13f3c:	andeq	r4, r1, r0, lsr #3
   13f40:	andeq	r4, r1, r8, lsr #1
   13f44:	andeq	r4, r1, r0, lsr #3
   13f48:	andeq	r4, r1, r8, lsr #6
   13f4c:	andeq	r4, r1, r0, lsr #3
   13f50:	andeq	r4, r1, r0, lsr #3
   13f54:	andeq	r4, r1, r0, lsr #3
   13f58:	andeq	r4, r1, r8, lsr #1
   13f5c:	andeq	r4, r1, r8, lsr #1
   13f60:	andeq	r4, r1, r8, lsr #1
   13f64:	andeq	r4, r1, r8, lsr #1
   13f68:	andeq	r4, r1, r8, lsr #1
   13f6c:	andeq	r4, r1, r8, lsr #1
   13f70:	andeq	r4, r1, r8, lsr #1
   13f74:	andeq	r4, r1, r8, lsr #1
   13f78:	andeq	r4, r1, r8, lsr #1
   13f7c:	andeq	r4, r1, r8, lsr #1
   13f80:	andeq	r4, r1, r8, lsr #1
   13f84:	andeq	r4, r1, r8, lsr #1
   13f88:	andeq	r4, r1, r8, lsr #1
   13f8c:	andeq	r4, r1, r8, lsr #1
   13f90:	andeq	r4, r1, r8, lsr #1
   13f94:	andeq	r4, r1, r8, lsr #1
   13f98:	andeq	r4, r1, r0, lsr #3
   13f9c:	andeq	r4, r1, r0, lsr #3
   13fa0:	andeq	r4, r1, r0, lsr #3
   13fa4:	andeq	r4, r1, r0, lsr #3
   13fa8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fac:			; <UNDEFINED> instruction: 0x000143b8
   13fb0:	andeq	r4, r1, r8, lsr #1
   13fb4:	andeq	r4, r1, r8, lsr #1
   13fb8:	andeq	r4, r1, r8, lsr #1
   13fbc:	andeq	r4, r1, r8, lsr #1
   13fc0:	andeq	r4, r1, r8, lsr #1
   13fc4:	andeq	r4, r1, r8, lsr #1
   13fc8:	andeq	r4, r1, r8, lsr #1
   13fcc:	andeq	r4, r1, r8, lsr #1
   13fd0:	andeq	r4, r1, r8, lsr #1
   13fd4:	andeq	r4, r1, r8, lsr #1
   13fd8:	andeq	r4, r1, r8, lsr #1
   13fdc:	andeq	r4, r1, r8, lsr #1
   13fe0:	andeq	r4, r1, r8, lsr #1
   13fe4:	andeq	r4, r1, r8, lsr #1
   13fe8:	andeq	r4, r1, r8, lsr #1
   13fec:	andeq	r4, r1, r8, lsr #1
   13ff0:	andeq	r4, r1, r8, lsr #1
   13ff4:	andeq	r4, r1, r8, lsr #1
   13ff8:	andeq	r4, r1, r8, lsr #1
   13ffc:	andeq	r4, r1, r8, lsr #1
   14000:	andeq	r4, r1, r8, lsr #1
   14004:	andeq	r4, r1, r8, lsr #1
   14008:	andeq	r4, r1, r8, lsr #1
   1400c:	andeq	r4, r1, r8, lsr #1
   14010:	andeq	r4, r1, r8, lsr #1
   14014:	andeq	r4, r1, r8, lsr #1
   14018:	andeq	r4, r1, r0, lsr #3
   1401c:	andeq	r4, r1, r8, asr #3
   14020:	andeq	r4, r1, r8, lsr #1
   14024:	andeq	r4, r1, r0, lsr #3
   14028:	andeq	r4, r1, r8, lsr #1
   1402c:	andeq	r4, r1, r0, lsr #3
   14030:	andeq	r4, r1, r8, lsr #1
   14034:	andeq	r4, r1, r8, lsr #1
   14038:	andeq	r4, r1, r8, lsr #1
   1403c:	andeq	r4, r1, r8, lsr #1
   14040:	andeq	r4, r1, r8, lsr #1
   14044:	andeq	r4, r1, r8, lsr #1
   14048:	andeq	r4, r1, r8, lsr #1
   1404c:	andeq	r4, r1, r8, lsr #1
   14050:	andeq	r4, r1, r8, lsr #1
   14054:	andeq	r4, r1, r8, lsr #1
   14058:	andeq	r4, r1, r8, lsr #1
   1405c:	andeq	r4, r1, r8, lsr #1
   14060:	andeq	r4, r1, r8, lsr #1
   14064:	andeq	r4, r1, r8, lsr #1
   14068:	andeq	r4, r1, r8, lsr #1
   1406c:	andeq	r4, r1, r8, lsr #1
   14070:	andeq	r4, r1, r8, lsr #1
   14074:	andeq	r4, r1, r8, lsr #1
   14078:	andeq	r4, r1, r8, lsr #1
   1407c:	andeq	r4, r1, r8, lsr #1
   14080:	andeq	r4, r1, r8, lsr #1
   14084:	andeq	r4, r1, r8, lsr #1
   14088:	andeq	r4, r1, r8, lsr #1
   1408c:	andeq	r4, r1, r8, lsr #1
   14090:	andeq	r4, r1, r8, lsr #1
   14094:	andeq	r4, r1, r8, lsr #1
   14098:	andeq	r4, r1, ip, asr r1
   1409c:	andeq	r4, r1, r0, lsr #3
   140a0:	andeq	r4, r1, ip, asr r1
   140a4:	andeq	r4, r1, r4, lsl #3
   140a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140ac:	tst	r0, #1
   140b0:	bne	140dc <__assert_fail@plt+0x29b8>
   140b4:	ldr	r1, [fp, #16]
   140b8:	ubfx	r0, r6, #5, #3
   140bc:	mov	r2, #1
   140c0:	ldr	r0, [r1, r0, lsl #2]
   140c4:	and	r1, r6, #31
   140c8:	tst	r0, r2, lsl r1
   140cc:	beq	140dc <__assert_fail@plt+0x29b8>
   140d0:	mov	r0, r6
   140d4:	mov	r1, r9
   140d8:	b	140f0 <__assert_fail@plt+0x29cc>
   140dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   140e0:	mov	r1, r9
   140e4:	cmp	r0, #0
   140e8:	mov	r0, r6
   140ec:	beq	1483c <__assert_fail@plt+0x3118>
   140f0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   140f4:	tst	r2, #1
   140f8:	bne	149d8 <__assert_fail@plt+0x32b4>
   140fc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14100:	subs	r2, r2, #2
   14104:	movwne	r2, #1
   14108:	orr	r2, r2, lr
   1410c:	tst	r2, #1
   14110:	bne	14148 <__assert_fail@plt+0x2a24>
   14114:	cmp	r8, ip
   14118:	mov	lr, #1
   1411c:	movcc	r2, #39	; 0x27
   14120:	strbcc	r2, [r5, r8]
   14124:	add	r2, r8, #1
   14128:	cmp	r2, ip
   1412c:	movcc	r3, #36	; 0x24
   14130:	strbcc	r3, [r5, r2]
   14134:	add	r2, r8, #2
   14138:	add	r8, r8, #3
   1413c:	cmp	r2, ip
   14140:	movcc	r3, #39	; 0x27
   14144:	strbcc	r3, [r5, r2]
   14148:	cmp	r8, ip
   1414c:	movcc	r2, #92	; 0x5c
   14150:	strbcc	r2, [r5, r8]
   14154:	add	r8, r8, #1
   14158:	b	1487c <__assert_fail@plt+0x3158>
   1415c:	cmp	sl, #1
   14160:	beq	14184 <__assert_fail@plt+0x2a60>
   14164:	mov	r9, #0
   14168:	cmn	sl, #1
   1416c:	bne	14190 <__assert_fail@plt+0x2a6c>
   14170:	ldrb	r0, [r4, #1]
   14174:	cmp	r0, #0
   14178:	beq	14184 <__assert_fail@plt+0x2a60>
   1417c:	mvn	sl, #0
   14180:	b	14190 <__assert_fail@plt+0x2a6c>
   14184:	mov	r9, #0
   14188:	cmp	r7, #0
   1418c:	beq	1419c <__assert_fail@plt+0x2a78>
   14190:	mov	r0, #0
   14194:	str	r0, [fp, #-56]	; 0xffffffc8
   14198:	b	140a8 <__assert_fail@plt+0x2984>
   1419c:	mov	r1, #1
   141a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141a4:	cmp	r0, #2
   141a8:	bne	141c0 <__assert_fail@plt+0x2a9c>
   141ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   141b0:	mov	r9, r1
   141b4:	tst	r0, #1
   141b8:	beq	140a8 <__assert_fail@plt+0x2984>
   141bc:	b	149d8 <__assert_fail@plt+0x32b4>
   141c0:	mov	r9, r1
   141c4:	b	140a8 <__assert_fail@plt+0x2984>
   141c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141cc:	cmp	r0, #2
   141d0:	bne	14414 <__assert_fail@plt+0x2cf0>
   141d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   141d8:	tst	r0, #1
   141dc:	bne	149d8 <__assert_fail@plt+0x32b4>
   141e0:	mov	r0, #0
   141e4:	str	r0, [fp, #-56]	; 0xffffffc8
   141e8:	b	1442c <__assert_fail@plt+0x2d08>
   141ec:	mov	r0, #102	; 0x66
   141f0:	b	14438 <__assert_fail@plt+0x2d14>
   141f4:	mov	r2, #116	; 0x74
   141f8:	b	14208 <__assert_fail@plt+0x2ae4>
   141fc:	mov	r0, #98	; 0x62
   14200:	b	14438 <__assert_fail@plt+0x2d14>
   14204:	mov	r2, #114	; 0x72
   14208:	ldr	r0, [sp, #68]	; 0x44
   1420c:	tst	r0, #1
   14210:	mov	r0, r2
   14214:	bne	14438 <__assert_fail@plt+0x2d14>
   14218:	b	149d8 <__assert_fail@plt+0x32b4>
   1421c:	ldr	r0, [sp, #84]	; 0x54
   14220:	tst	r0, #1
   14224:	beq	14458 <__assert_fail@plt+0x2d34>
   14228:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1422c:	tst	r0, #1
   14230:	bne	14ac4 <__assert_fail@plt+0x33a0>
   14234:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14238:	mov	r2, sl
   1423c:	subs	r0, r0, #2
   14240:	movwne	r0, #1
   14244:	orr	r0, r0, lr
   14248:	tst	r0, #1
   1424c:	bne	14284 <__assert_fail@plt+0x2b60>
   14250:	cmp	r8, ip
   14254:	mov	lr, #1
   14258:	movcc	r0, #39	; 0x27
   1425c:	strbcc	r0, [r5, r8]
   14260:	add	r0, r8, #1
   14264:	cmp	r0, ip
   14268:	movcc	r1, #36	; 0x24
   1426c:	strbcc	r1, [r5, r0]
   14270:	add	r0, r8, #2
   14274:	add	r8, r8, #3
   14278:	cmp	r0, ip
   1427c:	movcc	r1, #39	; 0x27
   14280:	strbcc	r1, [r5, r0]
   14284:	mov	r1, #1
   14288:	cmp	r8, ip
   1428c:	mov	r9, #0
   14290:	mov	r6, #48	; 0x30
   14294:	str	r1, [fp, #-56]	; 0xffffffc8
   14298:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1429c:	movcc	r0, #92	; 0x5c
   142a0:	strbcc	r0, [r5, r8]
   142a4:	add	r0, r8, #1
   142a8:	cmp	r1, #2
   142ac:	beq	145b4 <__assert_fail@plt+0x2e90>
   142b0:	add	r1, r7, #1
   142b4:	cmp	r1, r2
   142b8:	bcs	145b4 <__assert_fail@plt+0x2e90>
   142bc:	ldrb	r1, [r4, r1]
   142c0:	sub	r1, r1, #48	; 0x30
   142c4:	uxtb	r1, r1
   142c8:	cmp	r1, #9
   142cc:	bhi	145b4 <__assert_fail@plt+0x2e90>
   142d0:	cmp	r0, ip
   142d4:	movcc	r1, #48	; 0x30
   142d8:	strbcc	r1, [r5, r0]
   142dc:	add	r0, r8, #2
   142e0:	add	r8, r8, #3
   142e4:	cmp	r0, ip
   142e8:	movcc	r1, #48	; 0x30
   142ec:	strbcc	r1, [r5, r0]
   142f0:	b	140a8 <__assert_fail@plt+0x2984>
   142f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142f8:	mov	r6, #63	; 0x3f
   142fc:	cmp	r0, #5
   14300:	beq	145bc <__assert_fail@plt+0x2e98>
   14304:	mov	r1, #0
   14308:	cmp	r0, #2
   1430c:	str	r1, [fp, #-56]	; 0xffffffc8
   14310:	bne	14670 <__assert_fail@plt+0x2f4c>
   14314:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14318:	mov	r9, #0
   1431c:	b	141b4 <__assert_fail@plt+0x2a90>
   14320:	mov	r0, #118	; 0x76
   14324:	b	14438 <__assert_fail@plt+0x2d14>
   14328:	mov	r0, #1
   1432c:	mov	r6, #39	; 0x27
   14330:	str	r0, [sp, #60]	; 0x3c
   14334:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14338:	cmp	r0, #2
   1433c:	bne	143b0 <__assert_fail@plt+0x2c8c>
   14340:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14344:	tst	r0, #1
   14348:	bne	149d8 <__assert_fail@plt+0x32b4>
   1434c:	ldr	r2, [sp, #56]	; 0x38
   14350:	clz	r1, ip
   14354:	mov	lr, #0
   14358:	lsr	r1, r1, #5
   1435c:	cmp	r2, #0
   14360:	mov	r0, r2
   14364:	movwne	r0, #1
   14368:	orrs	r0, r0, r1
   1436c:	moveq	r2, ip
   14370:	moveq	ip, r0
   14374:	cmp	r8, ip
   14378:	str	r2, [sp, #56]	; 0x38
   1437c:	movcc	r0, #39	; 0x27
   14380:	strbcc	r0, [r5, r8]
   14384:	add	r0, r8, #1
   14388:	cmp	r0, ip
   1438c:	movcc	r1, #92	; 0x5c
   14390:	strbcc	r1, [r5, r0]
   14394:	add	r0, r8, #2
   14398:	add	r8, r8, #3
   1439c:	cmp	r0, ip
   143a0:	movcc	r1, #39	; 0x27
   143a4:	strbcc	r1, [r5, r0]
   143a8:	mov	r0, #0
   143ac:	str	r0, [fp, #-56]	; 0xffffffc8
   143b0:	mov	r9, #1
   143b4:	b	140a8 <__assert_fail@plt+0x2984>
   143b8:	ldr	r0, [sp, #40]	; 0x28
   143bc:	str	lr, [sp, #44]	; 0x2c
   143c0:	str	ip, [sp, #88]	; 0x58
   143c4:	cmp	r0, #1
   143c8:	bne	14478 <__assert_fail@plt+0x2d54>
   143cc:	str	sl, [sp, #36]	; 0x24
   143d0:	bl	115a4 <__ctype_b_loc@plt>
   143d4:	ldr	r0, [r0]
   143d8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   143dc:	mov	r1, #1
   143e0:	add	r0, r0, r6, lsl #1
   143e4:	ldrb	r0, [r0, #1]
   143e8:	ubfx	r9, r0, #6, #1
   143ec:	ldr	r0, [sp, #52]	; 0x34
   143f0:	ldr	lr, [sp, #44]	; 0x2c
   143f4:	cmp	r1, #1
   143f8:	orr	r3, r9, r0
   143fc:	bhi	14678 <__assert_fail@plt+0x2f54>
   14400:	tst	r3, #1
   14404:	beq	14678 <__assert_fail@plt+0x2f54>
   14408:	ldr	sl, [sp, #36]	; 0x24
   1440c:	ldr	ip, [sp, #88]	; 0x58
   14410:	b	140a8 <__assert_fail@plt+0x2984>
   14414:	ldr	r1, [sp, #48]	; 0x30
   14418:	mov	r0, #0
   1441c:	str	r0, [fp, #-56]	; 0xffffffc8
   14420:	mov	r0, #92	; 0x5c
   14424:	cmp	r1, #0
   14428:	beq	14438 <__assert_fail@plt+0x2d14>
   1442c:	mov	r6, #92	; 0x5c
   14430:	mov	r9, #0
   14434:	b	1483c <__assert_fail@plt+0x3118>
   14438:	mov	r1, #0
   1443c:	mov	r9, #0
   14440:	str	r1, [fp, #-56]	; 0xffffffc8
   14444:	ldr	r1, [sp, #84]	; 0x54
   14448:	tst	r1, #1
   1444c:	mov	r1, #0
   14450:	beq	140a8 <__assert_fail@plt+0x2984>
   14454:	b	140f0 <__assert_fail@plt+0x29cc>
   14458:	ldr	r0, [sp, #32]
   1445c:	mov	r6, #0
   14460:	mov	r9, #0
   14464:	cmp	r0, #0
   14468:	mov	r0, #0
   1446c:	str	r0, [fp, #-56]	; 0xffffffc8
   14470:	beq	140a8 <__assert_fail@plt+0x2984>
   14474:	b	14894 <__assert_fail@plt+0x3170>
   14478:	mov	r0, #0
   1447c:	cmn	sl, #1
   14480:	sub	r3, fp, #40	; 0x28
   14484:	str	r0, [fp, #-36]	; 0xffffffdc
   14488:	str	r0, [fp, #-40]	; 0xffffffd8
   1448c:	bne	144a4 <__assert_fail@plt+0x2d80>
   14490:	mov	r0, r4
   14494:	bl	115c8 <strlen@plt>
   14498:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1449c:	sub	r3, fp, #40	; 0x28
   144a0:	mov	sl, r0
   144a4:	ldr	r0, [sp, #72]	; 0x48
   144a8:	mov	r9, #1
   144ac:	mov	r1, #0
   144b0:	str	sl, [sp, #36]	; 0x24
   144b4:	add	r0, r0, r7
   144b8:	str	r0, [sp, #20]
   144bc:	add	r0, r1, r7
   144c0:	str	r1, [sp, #24]
   144c4:	add	r1, r4, r0
   144c8:	mov	r4, r0
   144cc:	sub	r2, sl, r0
   144d0:	sub	r0, fp, #44	; 0x2c
   144d4:	bl	22cd8 <__assert_fail@plt+0x115b4>
   144d8:	cmp	r0, #0
   144dc:	beq	148e8 <__assert_fail@plt+0x31c4>
   144e0:	cmn	r0, #1
   144e4:	beq	148a0 <__assert_fail@plt+0x317c>
   144e8:	ldr	r2, [sp, #36]	; 0x24
   144ec:	cmn	r0, #2
   144f0:	beq	148a8 <__assert_fail@plt+0x3184>
   144f4:	ldr	r2, [sp, #64]	; 0x40
   144f8:	ldr	ip, [sp, #88]	; 0x58
   144fc:	ldr	r4, [sp, #84]	; 0x54
   14500:	ldr	lr, [fp, #-48]	; 0xffffffd0
   14504:	cmp	r0, #2
   14508:	mov	r1, #0
   1450c:	movwcc	r1, #1
   14510:	eor	r2, r2, #1
   14514:	orrs	r1, r2, r1
   14518:	bne	14568 <__assert_fail@plt+0x2e44>
   1451c:	ldr	r1, [sp, #24]
   14520:	ldr	r2, [sp, #20]
   14524:	add	r1, r2, r1
   14528:	sub	r2, r0, #1
   1452c:	ldrb	r3, [r1]
   14530:	sub	r5, r3, #94	; 0x5e
   14534:	cmp	r5, #30
   14538:	bhi	14550 <__assert_fail@plt+0x2e2c>
   1453c:	mov	r4, #1
   14540:	mov	sl, #1073741829	; 0x40000005
   14544:	tst	sl, r4, lsl r5
   14548:	ldr	r4, [sp, #84]	; 0x54
   1454c:	bne	149b0 <__assert_fail@plt+0x328c>
   14550:	sub	r3, r3, #91	; 0x5b
   14554:	cmp	r3, #2
   14558:	bcc	149b0 <__assert_fail@plt+0x328c>
   1455c:	add	r1, r1, #1
   14560:	subs	r2, r2, #1
   14564:	bne	1452c <__assert_fail@plt+0x2e08>
   14568:	ldr	r5, [sp, #24]
   1456c:	str	lr, [fp, #-48]	; 0xffffffd0
   14570:	add	r5, r0, r5
   14574:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14578:	bl	114fc <iswprint@plt>
   1457c:	cmp	r0, #0
   14580:	sub	r4, fp, #40	; 0x28
   14584:	movwne	r0, #1
   14588:	and	r9, r9, r0
   1458c:	mov	r0, r4
   14590:	bl	1149c <mbsinit@plt>
   14594:	mov	r1, r5
   14598:	mov	r3, r4
   1459c:	ldr	sl, [sp, #36]	; 0x24
   145a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   145a4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   145a8:	cmp	r0, #0
   145ac:	beq	144bc <__assert_fail@plt+0x2d98>
   145b0:	b	143ec <__assert_fail@plt+0x2cc8>
   145b4:	mov	r8, r0
   145b8:	b	140a8 <__assert_fail@plt+0x2984>
   145bc:	mov	r0, #0
   145c0:	str	r0, [fp, #-56]	; 0xffffffc8
   145c4:	ldr	r0, [sp, #28]
   145c8:	cmp	r0, #0
   145cc:	beq	14670 <__assert_fail@plt+0x2f4c>
   145d0:	add	r0, r7, #2
   145d4:	mov	r1, sl
   145d8:	cmp	r0, sl
   145dc:	bcs	14670 <__assert_fail@plt+0x2f4c>
   145e0:	add	r1, r7, r4
   145e4:	ldrb	r1, [r1, #1]
   145e8:	cmp	r1, #63	; 0x3f
   145ec:	bne	14670 <__assert_fail@plt+0x2f4c>
   145f0:	ldrb	r9, [r4, r0]
   145f4:	sub	r2, r9, #33	; 0x21
   145f8:	cmp	r2, #29
   145fc:	bhi	14670 <__assert_fail@plt+0x2f4c>
   14600:	mov	r1, r4
   14604:	movw	r4, #20929	; 0x51c1
   14608:	mov	r3, #1
   1460c:	movt	r4, #14336	; 0x3800
   14610:	tst	r4, r3, lsl r2
   14614:	beq	148fc <__assert_fail@plt+0x31d8>
   14618:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1461c:	tst	r2, #1
   14620:	bne	14acc <__assert_fail@plt+0x33a8>
   14624:	cmp	r8, ip
   14628:	mov	r4, r1
   1462c:	mov	r7, r0
   14630:	mov	r6, r9
   14634:	movcc	r2, #63	; 0x3f
   14638:	strbcc	r2, [r5, r8]
   1463c:	add	r2, r8, #1
   14640:	cmp	r2, ip
   14644:	movcc	r3, #34	; 0x22
   14648:	strbcc	r3, [r5, r2]
   1464c:	add	r2, r8, #2
   14650:	cmp	r2, ip
   14654:	movcc	r3, #34	; 0x22
   14658:	strbcc	r3, [r5, r2]
   1465c:	add	r2, r8, #3
   14660:	add	r8, r8, #4
   14664:	cmp	r2, ip
   14668:	movcc	r3, #63	; 0x3f
   1466c:	strbcc	r3, [r5, r2]
   14670:	mov	r9, #0
   14674:	b	140a8 <__assert_fail@plt+0x2984>
   14678:	ldr	sl, [sp, #36]	; 0x24
   1467c:	add	r0, r1, r7
   14680:	mov	r2, #0
   14684:	str	r3, [sp, #24]
   14688:	str	r0, [fp, #-56]	; 0xffffffc8
   1468c:	tst	r3, #1
   14690:	beq	146bc <__assert_fail@plt+0x2f98>
   14694:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14698:	tst	r0, #1
   1469c:	beq	14784 <__assert_fail@plt+0x3060>
   146a0:	ldr	r1, [sp, #88]	; 0x58
   146a4:	mov	r0, r3
   146a8:	cmp	r8, r1
   146ac:	movcc	r1, #92	; 0x5c
   146b0:	strbcc	r1, [r5, r8]
   146b4:	add	r8, r8, #1
   146b8:	b	14788 <__assert_fail@plt+0x3064>
   146bc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   146c0:	tst	r1, #1
   146c4:	bne	149d4 <__assert_fail@plt+0x32b0>
   146c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   146cc:	subs	r2, r1, #2
   146d0:	movwne	r2, #1
   146d4:	orr	r2, r2, lr
   146d8:	tst	r2, #1
   146dc:	bne	14720 <__assert_fail@plt+0x2ffc>
   146e0:	ldr	r1, [sp, #88]	; 0x58
   146e4:	add	r2, r8, #1
   146e8:	mov	lr, #1
   146ec:	cmp	r8, r1
   146f0:	movcc	r1, #39	; 0x27
   146f4:	strbcc	r1, [r5, r8]
   146f8:	ldr	r1, [sp, #88]	; 0x58
   146fc:	cmp	r2, r1
   14700:	movcc	r1, #36	; 0x24
   14704:	strbcc	r1, [r5, r2]
   14708:	ldr	r1, [sp, #88]	; 0x58
   1470c:	add	r2, r8, #2
   14710:	add	r8, r8, #3
   14714:	cmp	r2, r1
   14718:	movcc	r1, #39	; 0x27
   1471c:	strbcc	r1, [r5, r2]
   14720:	ldr	r1, [sp, #88]	; 0x58
   14724:	add	r2, r8, #1
   14728:	mov	r0, r3
   1472c:	cmp	r8, r1
   14730:	movcc	r1, #92	; 0x5c
   14734:	strbcc	r1, [r5, r8]
   14738:	ldr	r1, [sp, #88]	; 0x58
   1473c:	cmp	r2, r1
   14740:	bcs	14754 <__assert_fail@plt+0x3030>
   14744:	uxtb	r3, r6
   14748:	mov	r1, #48	; 0x30
   1474c:	orr	r3, r1, r3, lsr #6
   14750:	strb	r3, [r5, r2]
   14754:	ldr	r1, [sp, #88]	; 0x58
   14758:	add	r2, r8, #2
   1475c:	add	r8, r8, #3
   14760:	cmp	r2, r1
   14764:	lsrcc	r3, r6, #3
   14768:	movcc	r1, #6
   1476c:	bficc	r3, r1, #3, #29
   14770:	mov	r1, #6
   14774:	bfi	r6, r1, #3, #29
   14778:	strbcc	r3, [r5, r2]
   1477c:	mov	r2, #1
   14780:	b	14790 <__assert_fail@plt+0x306c>
   14784:	mov	r0, r3
   14788:	mov	r1, #0
   1478c:	str	r1, [fp, #-52]	; 0xffffffcc
   14790:	mov	ip, r2
   14794:	and	r1, r2, #1
   14798:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1479c:	add	r3, r7, #1
   147a0:	cmp	r2, r3
   147a4:	bls	1482c <__assert_fail@plt+0x3108>
   147a8:	cmp	r1, #0
   147ac:	mvn	r5, lr
   147b0:	movwne	r1, #1
   147b4:	orr	r5, r5, r1
   147b8:	tst	r5, #1
   147bc:	bne	14800 <__assert_fail@plt+0x30dc>
   147c0:	ldr	r1, [sp, #88]	; 0x58
   147c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   147c8:	mov	r2, r4
   147cc:	ldr	r4, [sp, #88]	; 0x58
   147d0:	ldr	r0, [sp, #24]
   147d4:	mov	lr, #0
   147d8:	cmp	r8, r1
   147dc:	movcc	r1, #39	; 0x27
   147e0:	strbcc	r1, [r5, r8]
   147e4:	add	r1, r8, #1
   147e8:	add	r8, r8, #2
   147ec:	cmp	r1, r4
   147f0:	movcc	r4, #39	; 0x27
   147f4:	strbcc	r4, [r5, r1]
   147f8:	mov	r4, r2
   147fc:	b	14804 <__assert_fail@plt+0x30e0>
   14800:	ldr	r5, [fp, #-84]	; 0xffffffac
   14804:	ldr	r1, [sp, #88]	; 0x58
   14808:	mov	r2, ip
   1480c:	cmp	r8, r1
   14810:	ldr	r1, [sp, #72]	; 0x48
   14814:	strbcc	r6, [r5, r8]
   14818:	add	r8, r8, #1
   1481c:	ldrb	r6, [r1, r7]
   14820:	mov	r7, r3
   14824:	mov	r3, r0
   14828:	b	1468c <__assert_fail@plt+0x2f68>
   1482c:	ldr	ip, [sp, #88]	; 0x58
   14830:	cmp	r1, #0
   14834:	movwne	r1, #1
   14838:	str	r1, [fp, #-56]	; 0xffffffc8
   1483c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14840:	cmp	r0, #0
   14844:	bne	14874 <__assert_fail@plt+0x3150>
   14848:	tst	lr, #1
   1484c:	beq	14874 <__assert_fail@plt+0x3150>
   14850:	cmp	r8, ip
   14854:	mov	lr, #0
   14858:	movcc	r0, #39	; 0x27
   1485c:	strbcc	r0, [r5, r8]
   14860:	add	r0, r8, #1
   14864:	add	r8, r8, #2
   14868:	cmp	r0, ip
   1486c:	movcc	r1, #39	; 0x27
   14870:	strbcc	r1, [r5, r0]
   14874:	mov	r1, r9
   14878:	mov	r0, r6
   1487c:	cmp	r8, ip
   14880:	strbcc	r0, [r5, r8]
   14884:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14888:	add	r8, r8, #1
   1488c:	and	r0, r0, r1
   14890:	str	r0, [fp, #-48]	; 0xffffffd0
   14894:	mov	r3, sl
   14898:	add	r7, r7, #1
   1489c:	b	13d8c <__assert_fail@plt+0x2668>
   148a0:	mov	r9, #0
   148a4:	b	148e8 <__assert_fail@plt+0x31c4>
   148a8:	mov	r9, #0
   148ac:	cmp	r2, r4
   148b0:	bls	148e8 <__assert_fail@plt+0x31c4>
   148b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   148b8:	ldr	r1, [sp, #24]
   148bc:	add	r0, r4, r7
   148c0:	mov	r3, r1
   148c4:	ldrb	r1, [r0, r1]
   148c8:	cmp	r1, #0
   148cc:	beq	148f4 <__assert_fail@plt+0x31d0>
   148d0:	add	r3, r3, #1
   148d4:	add	r1, r7, r3
   148d8:	cmp	r1, r2
   148dc:	mov	r1, r3
   148e0:	bcc	148c0 <__assert_fail@plt+0x319c>
   148e4:	b	143ec <__assert_fail@plt+0x2cc8>
   148e8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   148ec:	ldr	r1, [sp, #24]
   148f0:	b	143ec <__assert_fail@plt+0x2cc8>
   148f4:	mov	r1, r3
   148f8:	b	143ec <__assert_fail@plt+0x2cc8>
   148fc:	mov	r9, #0
   14900:	mov	r4, r1
   14904:	b	140a8 <__assert_fail@plt+0x2984>
   14908:	mov	sl, r7
   1490c:	b	14914 <__assert_fail@plt+0x31f0>
   14910:	mvn	sl, #0
   14914:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14918:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1491c:	eor	r0, r1, #2
   14920:	orr	r0, r0, r8
   14924:	clz	r0, r0
   14928:	lsr	r0, r0, #5
   1492c:	tst	r2, r0
   14930:	bne	149d8 <__assert_fail@plt+0x32b4>
   14934:	subs	r0, r1, #2
   14938:	movwne	r0, #1
   1493c:	orr	r0, r2, r0
   14940:	tst	r0, #1
   14944:	ldreq	r0, [sp, #60]	; 0x3c
   14948:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   1494c:	eoreq	r0, r0, #1
   14950:	tsteq	r0, #1
   14954:	bne	14a6c <__assert_fail@plt+0x3348>
   14958:	tst	r1, #1
   1495c:	bne	14a38 <__assert_fail@plt+0x3314>
   14960:	ldr	r6, [sp, #56]	; 0x38
   14964:	mov	r9, #0
   14968:	cmp	r6, #0
   1496c:	beq	14a64 <__assert_fail@plt+0x3340>
   14970:	ldr	r0, [sp, #84]	; 0x54
   14974:	mov	r1, #0
   14978:	mov	r7, #2
   1497c:	cmp	ip, #0
   14980:	str	r1, [fp, #-48]	; 0xffffffd0
   14984:	mov	r1, #0
   14988:	str	r1, [fp, #-76]	; 0xffffffb4
   1498c:	beq	13af4 <__assert_fail@plt+0x23d0>
   14990:	b	14a6c <__assert_fail@plt+0x3348>
   14994:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14998:	ldr	r1, [fp, #12]
   1499c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   149a0:	mov	r5, r3
   149a4:	mov	ip, r6
   149a8:	mov	r3, sl
   149ac:	b	149fc <__assert_fail@plt+0x32d8>
   149b0:	tst	r4, #1
   149b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   149b8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   149bc:	ldr	r1, [fp, #12]
   149c0:	ldr	r3, [sp, #36]	; 0x24
   149c4:	mov	r0, #2
   149c8:	movwne	r0, #4
   149cc:	mov	r2, r0
   149d0:	b	149fc <__assert_fail@plt+0x32d8>
   149d4:	ldr	ip, [sp, #88]	; 0x58
   149d8:	ldr	r1, [sp, #84]	; 0x54
   149dc:	mov	r0, #2
   149e0:	tst	r1, #1
   149e4:	movwne	r0, #4
   149e8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   149ec:	ldr	r1, [fp, #12]
   149f0:	mov	r3, sl
   149f4:	cmp	r2, #2
   149f8:	moveq	r2, r0
   149fc:	mov	r0, #0
   14a00:	bic	r1, r1, #2
   14a04:	str	r2, [sp]
   14a08:	mov	r2, r4
   14a0c:	str	r0, [sp, #8]
   14a10:	ldr	r0, [sp, #76]	; 0x4c
   14a14:	str	r1, [sp, #4]
   14a18:	mov	r1, ip
   14a1c:	str	r0, [sp, #12]
   14a20:	ldr	r0, [sp, #80]	; 0x50
   14a24:	str	r0, [sp, #16]
   14a28:	mov	r0, r5
   14a2c:	bl	13a68 <__assert_fail@plt+0x2344>
   14a30:	mov	r8, r0
   14a34:	b	14ab8 <__assert_fail@plt+0x3394>
   14a38:	mov	r0, #5
   14a3c:	ldr	r1, [sp, #56]	; 0x38
   14a40:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14a44:	mov	r3, sl
   14a48:	str	r0, [sp]
   14a4c:	ldr	r0, [fp, #12]
   14a50:	str	r0, [sp, #4]
   14a54:	ldr	r0, [fp, #16]
   14a58:	str	r0, [sp, #8]
   14a5c:	ldr	r0, [sp, #76]	; 0x4c
   14a60:	b	14a1c <__assert_fail@plt+0x32f8>
   14a64:	mov	r0, #0
   14a68:	str	r0, [fp, #-76]	; 0xffffffb4
   14a6c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14a70:	cmp	r1, #0
   14a74:	beq	14aac <__assert_fail@plt+0x3388>
   14a78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14a7c:	tst	r0, #1
   14a80:	bne	14aac <__assert_fail@plt+0x3388>
   14a84:	ldrb	r0, [r1]
   14a88:	cmp	r0, #0
   14a8c:	beq	14aac <__assert_fail@plt+0x3388>
   14a90:	add	r1, r1, #1
   14a94:	cmp	r8, ip
   14a98:	strbcc	r0, [r5, r8]
   14a9c:	add	r8, r8, #1
   14aa0:	ldrb	r0, [r1], #1
   14aa4:	cmp	r0, #0
   14aa8:	bne	14a94 <__assert_fail@plt+0x3370>
   14aac:	cmp	r8, ip
   14ab0:	movcc	r0, #0
   14ab4:	strbcc	r0, [r5, r8]
   14ab8:	mov	r0, r8
   14abc:	sub	sp, fp, #28
   14ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac4:	mov	r0, #4
   14ac8:	b	149e8 <__assert_fail@plt+0x32c4>
   14acc:	mov	r4, r1
   14ad0:	b	149d8 <__assert_fail@plt+0x32b4>
   14ad4:	bl	11700 <abort@plt>
   14ad8:	mov	r3, r2
   14adc:	mov	r2, #0
   14ae0:	b	14ae4 <__assert_fail@plt+0x33c0>
   14ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ae8:	add	fp, sp, #28
   14aec:	sub	sp, sp, #36	; 0x24
   14af0:	movw	r8, #20928	; 0x51c0
   14af4:	cmp	r3, #0
   14af8:	mov	r4, r2
   14afc:	str	r2, [sp, #24]
   14b00:	mov	r5, r1
   14b04:	mov	r6, r0
   14b08:	str	r0, [sp, #20]
   14b0c:	movt	r8, #3
   14b10:	movne	r8, r3
   14b14:	bl	115f8 <__errno_location@plt>
   14b18:	str	r0, [sp, #28]
   14b1c:	ldr	r1, [r8, #40]	; 0x28
   14b20:	ldr	r2, [r8, #44]	; 0x2c
   14b24:	ldr	r7, [r0]
   14b28:	cmp	r4, #0
   14b2c:	add	sl, r8, #8
   14b30:	mov	r0, #0
   14b34:	ldm	r8, {r3, r9}
   14b38:	orreq	r9, r9, #1
   14b3c:	stm	sp, {r3, r9, sl}
   14b40:	str	r1, [sp, #12]
   14b44:	str	r2, [sp, #16]
   14b48:	mov	r1, #0
   14b4c:	mov	r2, r6
   14b50:	mov	r3, r5
   14b54:	str	r7, [sp, #32]
   14b58:	mov	r7, r5
   14b5c:	bl	13a68 <__assert_fail@plt+0x2344>
   14b60:	add	r4, r0, #1
   14b64:	mov	r5, r0
   14b68:	mov	r0, r4
   14b6c:	bl	22404 <__assert_fail@plt+0x10ce0>
   14b70:	mov	r6, r0
   14b74:	ldr	r0, [r8]
   14b78:	ldr	r2, [r8, #44]	; 0x2c
   14b7c:	ldr	r1, [r8, #40]	; 0x28
   14b80:	mov	r3, r7
   14b84:	stm	sp, {r0, r9, sl}
   14b88:	str	r2, [sp, #16]
   14b8c:	ldr	r2, [sp, #20]
   14b90:	str	r1, [sp, #12]
   14b94:	mov	r0, r6
   14b98:	mov	r1, r4
   14b9c:	bl	13a68 <__assert_fail@plt+0x2344>
   14ba0:	ldr	r0, [sp, #24]
   14ba4:	ldr	r1, [sp, #32]
   14ba8:	ldr	r2, [sp, #28]
   14bac:	cmp	r0, #0
   14bb0:	str	r1, [r2]
   14bb4:	strne	r5, [r0]
   14bb8:	mov	r0, r6
   14bbc:	sub	sp, fp, #28
   14bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bc4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14bc8:	add	fp, sp, #24
   14bcc:	movw	r5, #20820	; 0x5154
   14bd0:	movw	r8, #20816	; 0x5150
   14bd4:	movt	r5, #3
   14bd8:	movt	r8, #3
   14bdc:	ldr	r0, [r5]
   14be0:	ldr	r4, [r8]
   14be4:	cmp	r0, #2
   14be8:	blt	14c14 <__assert_fail@plt+0x34f0>
   14bec:	add	r7, r4, #12
   14bf0:	mov	r6, #0
   14bf4:	ldr	r0, [r7, r6, lsl #3]
   14bf8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   14bfc:	ldr	r1, [r5]
   14c00:	add	r2, r6, #2
   14c04:	add	r0, r6, #1
   14c08:	mov	r6, r0
   14c0c:	cmp	r2, r1
   14c10:	blt	14bf4 <__assert_fail@plt+0x34d0>
   14c14:	ldr	r0, [r4, #4]
   14c18:	movw	r9, #20976	; 0x51f0
   14c1c:	movw	r7, #20824	; 0x5158
   14c20:	movt	r9, #3
   14c24:	movt	r7, #3
   14c28:	cmp	r0, r9
   14c2c:	beq	14c3c <__assert_fail@plt+0x3518>
   14c30:	bl	132e4 <__assert_fail@plt+0x1bc0>
   14c34:	mov	r0, #256	; 0x100
   14c38:	stm	r7, {r0, r9}
   14c3c:	cmp	r4, r7
   14c40:	beq	14c50 <__assert_fail@plt+0x352c>
   14c44:	mov	r0, r4
   14c48:	bl	132e4 <__assert_fail@plt+0x1bc0>
   14c4c:	str	r7, [r8]
   14c50:	mov	r0, #1
   14c54:	str	r0, [r5]
   14c58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c5c:	movw	r3, #20928	; 0x51c0
   14c60:	mvn	r2, #0
   14c64:	movt	r3, #3
   14c68:	b	14c6c <__assert_fail@plt+0x3548>
   14c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c70:	add	fp, sp, #28
   14c74:	sub	sp, sp, #44	; 0x2c
   14c78:	mov	r7, r3
   14c7c:	str	r2, [sp, #36]	; 0x24
   14c80:	str	r1, [sp, #32]
   14c84:	mov	r5, r0
   14c88:	bl	115f8 <__errno_location@plt>
   14c8c:	cmp	r5, #0
   14c90:	bmi	14e00 <__assert_fail@plt+0x36dc>
   14c94:	cmn	r5, #-2147483647	; 0x80000001
   14c98:	beq	14e00 <__assert_fail@plt+0x36dc>
   14c9c:	movw	r8, #20820	; 0x5154
   14ca0:	movw	r4, #20816	; 0x5150
   14ca4:	str	r0, [sp, #28]
   14ca8:	ldr	r0, [r0]
   14cac:	movt	r8, #3
   14cb0:	movt	r4, #3
   14cb4:	ldr	r1, [r8]
   14cb8:	ldr	r6, [r4]
   14cbc:	str	r0, [sp, #24]
   14cc0:	cmp	r1, r5
   14cc4:	ble	14cd0 <__assert_fail@plt+0x35ac>
   14cc8:	mov	sl, r6
   14ccc:	b	14d3c <__assert_fail@plt+0x3618>
   14cd0:	movw	r9, #20824	; 0x5158
   14cd4:	mov	r0, #8
   14cd8:	str	r1, [fp, #-32]	; 0xffffffe0
   14cdc:	sub	r1, r5, r1
   14ce0:	mvn	r3, #-2147483648	; 0x80000000
   14ce4:	movt	r9, #3
   14ce8:	str	r0, [sp]
   14cec:	add	r2, r1, #1
   14cf0:	sub	r1, fp, #32
   14cf4:	subs	r0, r6, r9
   14cf8:	movne	r0, r6
   14cfc:	bl	22534 <__assert_fail@plt+0x10e10>
   14d00:	mov	sl, r0
   14d04:	cmp	r6, r9
   14d08:	str	r0, [r4]
   14d0c:	bne	14d18 <__assert_fail@plt+0x35f4>
   14d10:	ldrd	r0, [r9]
   14d14:	stm	sl, {r0, r1}
   14d18:	ldr	r1, [r8]
   14d1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14d20:	add	r0, sl, r1, lsl #3
   14d24:	sub	r1, r2, r1
   14d28:	lsl	r2, r1, #3
   14d2c:	mov	r1, #0
   14d30:	bl	1161c <memset@plt>
   14d34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d38:	str	r0, [r8]
   14d3c:	mov	r9, sl
   14d40:	ldm	r7, {r0, r1}
   14d44:	orr	r8, r1, #1
   14d48:	add	r1, r7, #8
   14d4c:	ldr	r2, [r7, #40]	; 0x28
   14d50:	ldr	r3, [r7, #44]	; 0x2c
   14d54:	ldr	r6, [r9, r5, lsl #3]!
   14d58:	str	r1, [sp, #20]
   14d5c:	ldr	r4, [r9, #4]!
   14d60:	stm	sp, {r0, r8}
   14d64:	add	r0, sp, #8
   14d68:	stm	r0, {r1, r2, r3}
   14d6c:	ldr	r2, [sp, #32]
   14d70:	ldr	r3, [sp, #36]	; 0x24
   14d74:	mov	r1, r6
   14d78:	mov	r0, r4
   14d7c:	bl	13a68 <__assert_fail@plt+0x2344>
   14d80:	cmp	r6, r0
   14d84:	bhi	14de8 <__assert_fail@plt+0x36c4>
   14d88:	add	r6, r0, #1
   14d8c:	movw	r0, #20976	; 0x51f0
   14d90:	movt	r0, #3
   14d94:	str	r6, [sl, r5, lsl #3]
   14d98:	cmp	r4, r0
   14d9c:	beq	14da8 <__assert_fail@plt+0x3684>
   14da0:	mov	r0, r4
   14da4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   14da8:	mov	r0, r6
   14dac:	bl	22404 <__assert_fail@plt+0x10ce0>
   14db0:	str	r0, [r9]
   14db4:	mov	r4, r0
   14db8:	add	r3, sp, #8
   14dbc:	ldr	r0, [r7]
   14dc0:	ldr	r1, [r7, #40]	; 0x28
   14dc4:	ldr	r2, [r7, #44]	; 0x2c
   14dc8:	stm	sp, {r0, r8}
   14dcc:	ldr	r0, [sp, #20]
   14dd0:	stm	r3, {r0, r1, r2}
   14dd4:	ldr	r2, [sp, #32]
   14dd8:	ldr	r3, [sp, #36]	; 0x24
   14ddc:	mov	r0, r4
   14de0:	mov	r1, r6
   14de4:	bl	13a68 <__assert_fail@plt+0x2344>
   14de8:	ldr	r0, [sp, #28]
   14dec:	ldr	r1, [sp, #24]
   14df0:	str	r1, [r0]
   14df4:	mov	r0, r4
   14df8:	sub	sp, fp, #28
   14dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e00:	bl	11700 <abort@plt>
   14e04:	movw	r3, #20928	; 0x51c0
   14e08:	movt	r3, #3
   14e0c:	b	14c6c <__assert_fail@plt+0x3548>
   14e10:	movw	r3, #20928	; 0x51c0
   14e14:	mov	r1, r0
   14e18:	mov	r0, #0
   14e1c:	mvn	r2, #0
   14e20:	movt	r3, #3
   14e24:	b	14c6c <__assert_fail@plt+0x3548>
   14e28:	movw	r3, #20928	; 0x51c0
   14e2c:	mov	r2, r1
   14e30:	mov	r1, r0
   14e34:	mov	r0, #0
   14e38:	movt	r3, #3
   14e3c:	b	14c6c <__assert_fail@plt+0x3548>
   14e40:	push	{fp, lr}
   14e44:	mov	fp, sp
   14e48:	sub	sp, sp, #48	; 0x30
   14e4c:	vmov.i32	q8, #0	; 0x00000000
   14e50:	mov	ip, #32
   14e54:	mov	r3, sp
   14e58:	mov	lr, r2
   14e5c:	cmp	r1, #10
   14e60:	add	r2, r3, #16
   14e64:	vst1.64	{d16-d17}, [r3], ip
   14e68:	vst1.64	{d16-d17}, [r2]
   14e6c:	vst1.64	{d16-d17}, [r3]
   14e70:	beq	14e90 <__assert_fail@plt+0x376c>
   14e74:	str	r1, [sp]
   14e78:	mov	r3, sp
   14e7c:	mov	r1, lr
   14e80:	mvn	r2, #0
   14e84:	bl	14c6c <__assert_fail@plt+0x3548>
   14e88:	mov	sp, fp
   14e8c:	pop	{fp, pc}
   14e90:	bl	11700 <abort@plt>
   14e94:	push	{r4, sl, fp, lr}
   14e98:	add	fp, sp, #8
   14e9c:	sub	sp, sp, #48	; 0x30
   14ea0:	vmov.i32	q8, #0	; 0x00000000
   14ea4:	mov	ip, r3
   14ea8:	mov	r3, sp
   14eac:	mov	lr, #32
   14eb0:	cmp	r1, #10
   14eb4:	add	r4, r3, #16
   14eb8:	vst1.64	{d16-d17}, [r3], lr
   14ebc:	vst1.64	{d16-d17}, [r4]
   14ec0:	vst1.64	{d16-d17}, [r3]
   14ec4:	beq	14ee4 <__assert_fail@plt+0x37c0>
   14ec8:	str	r1, [sp]
   14ecc:	mov	r1, r2
   14ed0:	mov	r3, sp
   14ed4:	mov	r2, ip
   14ed8:	bl	14c6c <__assert_fail@plt+0x3548>
   14edc:	sub	sp, fp, #8
   14ee0:	pop	{r4, sl, fp, pc}
   14ee4:	bl	11700 <abort@plt>
   14ee8:	mov	r2, r1
   14eec:	mov	r1, r0
   14ef0:	mov	r0, #0
   14ef4:	b	14e40 <__assert_fail@plt+0x371c>
   14ef8:	mov	r3, r2
   14efc:	mov	r2, r1
   14f00:	mov	r1, r0
   14f04:	mov	r0, #0
   14f08:	b	14e94 <__assert_fail@plt+0x3770>
   14f0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f10:	add	fp, sp, #24
   14f14:	sub	sp, sp, #48	; 0x30
   14f18:	movw	r8, #20928	; 0x51c0
   14f1c:	mov	lr, r0
   14f20:	mov	r3, sp
   14f24:	mov	ip, r1
   14f28:	movt	r8, #3
   14f2c:	mov	r1, r3
   14f30:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14f34:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14f38:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14f3c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14f40:	ubfx	r0, r2, #5, #3
   14f44:	and	r2, r2, #31
   14f48:	mov	r4, #1
   14f4c:	add	r0, r3, r0, lsl #2
   14f50:	ldr	r1, [r0, #8]
   14f54:	bic	r4, r4, r1, lsr r2
   14f58:	eor	r1, r1, r4, lsl r2
   14f5c:	mov	r2, ip
   14f60:	str	r1, [r0, #8]
   14f64:	mov	r0, #0
   14f68:	mov	r1, lr
   14f6c:	bl	14c6c <__assert_fail@plt+0x3548>
   14f70:	sub	sp, fp, #24
   14f74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f7c:	add	fp, sp, #24
   14f80:	sub	sp, sp, #48	; 0x30
   14f84:	movw	lr, #20928	; 0x51c0
   14f88:	mov	ip, r0
   14f8c:	mov	r3, sp
   14f90:	movt	lr, #3
   14f94:	mov	r2, r3
   14f98:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14f9c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14fa0:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14fa4:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14fa8:	ubfx	r0, r1, #5, #3
   14fac:	and	r1, r1, #31
   14fb0:	mov	r7, #1
   14fb4:	add	r0, r3, r0, lsl #2
   14fb8:	ldr	r2, [r0, #8]
   14fbc:	bic	r7, r7, r2, lsr r1
   14fc0:	eor	r1, r2, r7, lsl r1
   14fc4:	mvn	r2, #0
   14fc8:	str	r1, [r0, #8]
   14fcc:	mov	r0, #0
   14fd0:	mov	r1, ip
   14fd4:	bl	14c6c <__assert_fail@plt+0x3548>
   14fd8:	sub	sp, fp, #24
   14fdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fe0:	push	{r4, r5, r6, r7, fp, lr}
   14fe4:	add	fp, sp, #16
   14fe8:	sub	sp, sp, #48	; 0x30
   14fec:	movw	lr, #20928	; 0x51c0
   14ff0:	mov	ip, r0
   14ff4:	mov	r3, sp
   14ff8:	movt	lr, #3
   14ffc:	mov	r2, r3
   15000:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   15004:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15008:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1500c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15010:	mov	r1, ip
   15014:	mvn	r2, #0
   15018:	ldr	r0, [sp, #12]
   1501c:	orr	r0, r0, #67108864	; 0x4000000
   15020:	str	r0, [sp, #12]
   15024:	mov	r0, #0
   15028:	bl	14c6c <__assert_fail@plt+0x3548>
   1502c:	sub	sp, fp, #16
   15030:	pop	{r4, r5, r6, r7, fp, pc}
   15034:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15038:	add	fp, sp, #24
   1503c:	sub	sp, sp, #48	; 0x30
   15040:	movw	r8, #20928	; 0x51c0
   15044:	mov	ip, r1
   15048:	mov	lr, r0
   1504c:	mov	r3, sp
   15050:	movt	r8, #3
   15054:	mov	r2, r3
   15058:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   1505c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15060:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   15064:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15068:	mov	r1, lr
   1506c:	mov	r2, ip
   15070:	ldr	r0, [sp, #12]
   15074:	orr	r0, r0, #67108864	; 0x4000000
   15078:	str	r0, [sp, #12]
   1507c:	mov	r0, #0
   15080:	bl	14c6c <__assert_fail@plt+0x3548>
   15084:	sub	sp, fp, #24
   15088:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1508c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15090:	add	fp, sp, #24
   15094:	sub	sp, sp, #96	; 0x60
   15098:	vmov.i32	q8, #0	; 0x00000000
   1509c:	mov	lr, sp
   150a0:	mov	ip, r2
   150a4:	cmp	r1, #10
   150a8:	add	r3, lr, #16
   150ac:	mov	r2, lr
   150b0:	vst1.64	{d16-d17}, [r3]
   150b4:	mov	r3, #28
   150b8:	vst1.64	{d16-d17}, [r2], r3
   150bc:	vst1.32	{d16-d17}, [r2]
   150c0:	beq	15100 <__assert_fail@plt+0x39dc>
   150c4:	str	r1, [sp, #48]	; 0x30
   150c8:	add	r3, sp, #48	; 0x30
   150cc:	ldm	lr!, {r2, r4, r5, r6, r7}
   150d0:	add	r1, r3, #4
   150d4:	stmia	r1!, {r2, r4, r5, r6, r7}
   150d8:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   150dc:	stm	r1, {r2, r4, r5, r6, r7, r8}
   150e0:	mvn	r2, #0
   150e4:	ldr	r1, [sp, #60]	; 0x3c
   150e8:	orr	r1, r1, #67108864	; 0x4000000
   150ec:	str	r1, [sp, #60]	; 0x3c
   150f0:	mov	r1, ip
   150f4:	bl	14c6c <__assert_fail@plt+0x3548>
   150f8:	sub	sp, fp, #24
   150fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15100:	bl	11700 <abort@plt>
   15104:	push	{fp, lr}
   15108:	mov	fp, sp
   1510c:	sub	sp, sp, #8
   15110:	mvn	ip, #0
   15114:	str	ip, [sp]
   15118:	bl	15124 <__assert_fail@plt+0x3a00>
   1511c:	mov	sp, fp
   15120:	pop	{fp, pc}
   15124:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15128:	add	fp, sp, #24
   1512c:	sub	sp, sp, #48	; 0x30
   15130:	movw	ip, #20928	; 0x51c0
   15134:	mov	lr, r3
   15138:	mov	r3, sp
   1513c:	cmp	r1, #0
   15140:	movt	ip, #3
   15144:	cmpne	r2, #0
   15148:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   1514c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   15150:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   15154:	stm	r3, {r4, r5, r6, r7, r8, r9}
   15158:	mov	r3, #10
   1515c:	str	r3, [sp]
   15160:	bne	15168 <__assert_fail@plt+0x3a44>
   15164:	bl	11700 <abort@plt>
   15168:	ldr	ip, [fp, #8]
   1516c:	str	r2, [sp, #44]	; 0x2c
   15170:	str	r1, [sp, #40]	; 0x28
   15174:	mov	r3, sp
   15178:	mov	r1, lr
   1517c:	mov	r2, ip
   15180:	bl	14c6c <__assert_fail@plt+0x3548>
   15184:	sub	sp, fp, #24
   15188:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1518c:	push	{fp, lr}
   15190:	mov	fp, sp
   15194:	sub	sp, sp, #8
   15198:	mov	r3, r2
   1519c:	mov	r2, r1
   151a0:	mov	r1, r0
   151a4:	mvn	r0, #0
   151a8:	str	r0, [sp]
   151ac:	mov	r0, #0
   151b0:	bl	15124 <__assert_fail@plt+0x3a00>
   151b4:	mov	sp, fp
   151b8:	pop	{fp, pc}
   151bc:	push	{fp, lr}
   151c0:	mov	fp, sp
   151c4:	sub	sp, sp, #8
   151c8:	mov	ip, r2
   151cc:	mov	r2, r1
   151d0:	mov	r1, r0
   151d4:	str	r3, [sp]
   151d8:	mov	r0, #0
   151dc:	mov	r3, ip
   151e0:	bl	15124 <__assert_fail@plt+0x3a00>
   151e4:	mov	sp, fp
   151e8:	pop	{fp, pc}
   151ec:	movw	r3, #20832	; 0x5160
   151f0:	movt	r3, #3
   151f4:	b	14c6c <__assert_fail@plt+0x3548>
   151f8:	movw	r3, #20832	; 0x5160
   151fc:	mov	r2, r1
   15200:	mov	r1, r0
   15204:	mov	r0, #0
   15208:	movt	r3, #3
   1520c:	b	14c6c <__assert_fail@plt+0x3548>
   15210:	movw	r3, #20832	; 0x5160
   15214:	mvn	r2, #0
   15218:	movt	r3, #3
   1521c:	b	14c6c <__assert_fail@plt+0x3548>
   15220:	movw	r3, #20832	; 0x5160
   15224:	mov	r1, r0
   15228:	mov	r0, #0
   1522c:	mvn	r2, #0
   15230:	movt	r3, #3
   15234:	b	14c6c <__assert_fail@plt+0x3548>
   15238:	push	{r4, r5, fp, lr}
   1523c:	add	fp, sp, #8
   15240:	mov	r5, r0
   15244:	mov	r4, r1
   15248:	mov	r0, #0
   1524c:	mov	r2, #5
   15250:	mov	r1, r5
   15254:	bl	114a8 <dcgettext@plt>
   15258:	cmp	r0, r5
   1525c:	popne	{r4, r5, fp, pc}
   15260:	bl	22bf0 <__assert_fail@plt+0x114cc>
   15264:	ldrb	r1, [r0]
   15268:	and	r1, r1, #223	; 0xdf
   1526c:	cmp	r1, #71	; 0x47
   15270:	beq	152d8 <__assert_fail@plt+0x3bb4>
   15274:	cmp	r1, #85	; 0x55
   15278:	bne	15330 <__assert_fail@plt+0x3c0c>
   1527c:	ldrb	r1, [r0, #1]
   15280:	and	r1, r1, #223	; 0xdf
   15284:	cmp	r1, #84	; 0x54
   15288:	bne	15330 <__assert_fail@plt+0x3c0c>
   1528c:	ldrb	r1, [r0, #2]
   15290:	and	r1, r1, #223	; 0xdf
   15294:	cmp	r1, #70	; 0x46
   15298:	bne	15330 <__assert_fail@plt+0x3c0c>
   1529c:	ldrb	r1, [r0, #3]
   152a0:	cmp	r1, #45	; 0x2d
   152a4:	bne	15330 <__assert_fail@plt+0x3c0c>
   152a8:	ldrb	r1, [r0, #4]
   152ac:	cmp	r1, #56	; 0x38
   152b0:	bne	15330 <__assert_fail@plt+0x3c0c>
   152b4:	ldrb	r0, [r0, #5]
   152b8:	cmp	r0, #0
   152bc:	bne	15330 <__assert_fail@plt+0x3c0c>
   152c0:	ldrb	r1, [r5]
   152c4:	movw	r2, #15198	; 0x3b5e
   152c8:	movw	r0, #15202	; 0x3b62
   152cc:	movt	r2, #2
   152d0:	movt	r0, #2
   152d4:	b	15360 <__assert_fail@plt+0x3c3c>
   152d8:	ldrb	r1, [r0, #1]
   152dc:	and	r1, r1, #223	; 0xdf
   152e0:	cmp	r1, #66	; 0x42
   152e4:	bne	15330 <__assert_fail@plt+0x3c0c>
   152e8:	ldrb	r1, [r0, #2]
   152ec:	cmp	r1, #49	; 0x31
   152f0:	bne	15330 <__assert_fail@plt+0x3c0c>
   152f4:	ldrb	r1, [r0, #3]
   152f8:	cmp	r1, #56	; 0x38
   152fc:	bne	15330 <__assert_fail@plt+0x3c0c>
   15300:	ldrb	r1, [r0, #4]
   15304:	cmp	r1, #48	; 0x30
   15308:	bne	15330 <__assert_fail@plt+0x3c0c>
   1530c:	ldrb	r1, [r0, #5]
   15310:	cmp	r1, #51	; 0x33
   15314:	bne	15330 <__assert_fail@plt+0x3c0c>
   15318:	ldrb	r1, [r0, #6]
   1531c:	cmp	r1, #48	; 0x30
   15320:	bne	15330 <__assert_fail@plt+0x3c0c>
   15324:	ldrb	r0, [r0, #7]
   15328:	cmp	r0, #0
   1532c:	beq	1534c <__assert_fail@plt+0x3c28>
   15330:	movw	r1, #15194	; 0x3b5a
   15334:	movw	r0, #14740	; 0x3994
   15338:	cmp	r4, #9
   1533c:	movt	r1, #2
   15340:	movt	r0, #2
   15344:	moveq	r0, r1
   15348:	pop	{r4, r5, fp, pc}
   1534c:	ldrb	r1, [r5]
   15350:	movw	r2, #15206	; 0x3b66
   15354:	movw	r0, #15210	; 0x3b6a
   15358:	movt	r2, #2
   1535c:	movt	r0, #2
   15360:	cmp	r1, #96	; 0x60
   15364:	moveq	r0, r2
   15368:	pop	{r4, r5, fp, pc}
   1536c:	andeq	r0, r0, r0
   15370:	push	{fp, lr}
   15374:	mov	fp, sp
   15378:	mov	lr, r0
   1537c:	movw	r0, #21232	; 0x52f0
   15380:	mov	ip, r1
   15384:	ldrb	r1, [r2, #28]
   15388:	movt	r0, #3
   1538c:	ldr	r3, [r0]
   15390:	mov	r0, #16
   15394:	and	r1, r1, #111	; 0x6f
   15398:	and	r0, r0, r3, lsr #21
   1539c:	orr	r0, r1, r0
   153a0:	mov	r1, lr
   153a4:	orr	r0, r0, #128	; 0x80
   153a8:	strb	r0, [r2, #28]
   153ac:	mov	r0, r2
   153b0:	mov	r2, ip
   153b4:	bl	153f0 <__assert_fail@plt+0x3ccc>
   153b8:	cmp	r0, #0
   153bc:	beq	153e8 <__assert_fail@plt+0x3cc4>
   153c0:	movw	r1, #15688	; 0x3d48
   153c4:	mov	r2, #5
   153c8:	movt	r1, #2
   153cc:	ldr	r0, [r1, r0, lsl #2]
   153d0:	movw	r1, #15304	; 0x3bc8
   153d4:	movt	r1, #2
   153d8:	add	r1, r1, r0
   153dc:	mov	r0, #0
   153e0:	pop	{fp, lr}
   153e4:	b	114a8 <dcgettext@plt>
   153e8:	mov	r0, #0
   153ec:	pop	{fp, pc}
   153f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153f4:	add	fp, sp, #28
   153f8:	sub	sp, sp, #140	; 0x8c
   153fc:	str	r1, [sp, #24]
   15400:	mov	r1, #0
   15404:	str	r0, [sp, #28]
   15408:	mov	sl, r2
   1540c:	str	r3, [sp, #20]
   15410:	str	r1, [fp, #-52]	; 0xffffffcc
   15414:	str	r1, [r0, #24]
   15418:	str	r1, [r0, #8]
   1541c:	str	r3, [r0, #12]
   15420:	ldrb	r1, [r0, #28]
   15424:	and	r1, r1, #144	; 0x90
   15428:	strb	r1, [r0, #28]
   1542c:	ldr	r9, [r0]
   15430:	ldr	r0, [r0, #4]
   15434:	cmp	r0, #159	; 0x9f
   15438:	bls	15fe0 <__assert_fail@plt+0x48bc>
   1543c:	ldr	r1, [sp, #28]
   15440:	mov	r0, #160	; 0xa0
   15444:	mov	r2, #160	; 0xa0
   15448:	str	r0, [r1, #8]
   1544c:	mov	r0, r9
   15450:	mov	r1, #0
   15454:	bl	1161c <memset@plt>
   15458:	mov	r0, #31
   1545c:	str	r0, [r9, #64]	; 0x40
   15460:	movw	r0, #43689	; 0xaaa9
   15464:	movt	r0, #2730	; 0xaaa
   15468:	cmp	sl, r0
   1546c:	bhi	155e4 <__assert_fail@plt+0x3ec0>
   15470:	add	r0, sl, #1
   15474:	str	r0, [r9, #4]
   15478:	str	r0, [sp, #12]
   1547c:	lsl	r0, r0, #3
   15480:	bl	22898 <__assert_fail@plt+0x11174>
   15484:	str	r0, [r9]
   15488:	mov	r0, #1
   1548c:	mov	r4, r0
   15490:	lsl	r0, r0, #1
   15494:	cmp	r4, sl
   15498:	bls	1548c <__assert_fail@plt+0x3d68>
   1549c:	mov	r0, #12
   154a0:	mov	r1, r4
   154a4:	bl	22844 <__assert_fail@plt+0x11120>
   154a8:	sub	r1, r4, #1
   154ac:	str	r1, [r9, #68]	; 0x44
   154b0:	str	r0, [r9, #32]
   154b4:	bl	11514 <__ctype_get_mb_cur_max@plt>
   154b8:	str	r0, [r9, #92]	; 0x5c
   154bc:	mov	r0, #14
   154c0:	bl	116ac <nl_langinfo@plt>
   154c4:	ldrb	r1, [r0]
   154c8:	orr	r1, r1, #32
   154cc:	cmp	r1, #117	; 0x75
   154d0:	bne	15520 <__assert_fail@plt+0x3dfc>
   154d4:	ldrb	r1, [r0, #1]
   154d8:	orr	r1, r1, #32
   154dc:	cmp	r1, #116	; 0x74
   154e0:	bne	15520 <__assert_fail@plt+0x3dfc>
   154e4:	ldrb	r1, [r0, #2]
   154e8:	orr	r1, r1, #32
   154ec:	cmp	r1, #102	; 0x66
   154f0:	bne	15520 <__assert_fail@plt+0x3dfc>
   154f4:	ldrb	r1, [r0, #3]!
   154f8:	cmp	r1, #45	; 0x2d
   154fc:	movw	r1, #15804	; 0x3dbc
   15500:	movt	r1, #2
   15504:	addeq	r0, r0, #1
   15508:	bl	113e8 <strcmp@plt>
   1550c:	cmp	r0, #0
   15510:	bne	15520 <__assert_fail@plt+0x3dfc>
   15514:	ldrb	r0, [r9, #88]	; 0x58
   15518:	orr	r0, r0, #4
   1551c:	strb	r0, [r9, #88]	; 0x58
   15520:	ldrb	r0, [r9, #88]	; 0x58
   15524:	and	r1, r0, #247	; 0xf7
   15528:	strb	r1, [r9, #88]	; 0x58
   1552c:	ldr	r1, [r9, #92]	; 0x5c
   15530:	cmp	r1, #2
   15534:	blt	155d0 <__assert_fail@plt+0x3eac>
   15538:	tst	r0, #4
   1553c:	bne	155c4 <__assert_fail@plt+0x3ea0>
   15540:	mov	r0, #32
   15544:	mov	r1, #1
   15548:	mov	r8, #1
   1554c:	bl	22844 <__assert_fail@plt+0x11120>
   15550:	cmp	r0, #0
   15554:	str	r0, [r9, #60]	; 0x3c
   15558:	beq	155e4 <__assert_fail@plt+0x3ec0>
   1555c:	mov	r7, #0
   15560:	mov	r5, #0
   15564:	mov	r6, #0
   15568:	add	r4, r7, r6
   1556c:	mov	r0, r4
   15570:	bl	11628 <btowc@plt>
   15574:	cmn	r0, #1
   15578:	beq	1558c <__assert_fail@plt+0x3e68>
   1557c:	ldr	r1, [r9, #60]	; 0x3c
   15580:	ldr	r2, [r1, r5, lsl #2]
   15584:	orr	r2, r2, r8, lsl r6
   15588:	str	r2, [r1, r5, lsl #2]
   1558c:	cmp	r4, #127	; 0x7f
   15590:	bhi	155a4 <__assert_fail@plt+0x3e80>
   15594:	cmp	r4, r0
   15598:	ldrbne	r0, [r9, #88]	; 0x58
   1559c:	orrne	r0, r0, #8
   155a0:	strbne	r0, [r9, #88]	; 0x58
   155a4:	add	r6, r6, #1
   155a8:	cmp	r6, #32
   155ac:	bne	15568 <__assert_fail@plt+0x3e44>
   155b0:	add	r5, r5, #1
   155b4:	add	r7, r7, r6
   155b8:	cmp	r5, #8
   155bc:	bne	15564 <__assert_fail@plt+0x3e40>
   155c0:	b	155d0 <__assert_fail@plt+0x3eac>
   155c4:	movw	r0, #15756	; 0x3d8c
   155c8:	movt	r0, #2
   155cc:	str	r0, [r9, #60]	; 0x3c
   155d0:	ldr	r0, [r9]
   155d4:	cmp	r0, #0
   155d8:	ldrne	r0, [r9, #32]
   155dc:	cmpne	r0, #0
   155e0:	bne	15608 <__assert_fail@plt+0x3ee4>
   155e4:	mov	r4, #12
   155e8:	mov	r0, r9
   155ec:	str	r4, [fp, #-52]	; 0xffffffcc
   155f0:	bl	16650 <__assert_fail@plt+0x4f2c>
   155f4:	ldr	r0, [sp, #28]
   155f8:	mov	r1, #0
   155fc:	str	r1, [r0]
   15600:	str	r1, [r0, #4]
   15604:	b	15f68 <__assert_fail@plt+0x4844>
   15608:	movw	r0, #0
   1560c:	movw	r1, #0
   15610:	mov	r4, #0
   15614:	movt	r0, #0
   15618:	movt	r1, #0
   1561c:	str	r4, [fp, #-52]	; 0xffffffcc
   15620:	orrs	r0, r1, r0
   15624:	str	r0, [sp, #8]
   15628:	beq	15640 <__assert_fail@plt+0x3f1c>
   1562c:	add	r0, r9, #136	; 0x88
   15630:	mov	r1, #0
   15634:	bl	11484 <pthread_mutex_init@plt>
   15638:	cmp	r0, #0
   1563c:	bne	155e4 <__assert_fail@plt+0x3ec0>
   15640:	ldr	r0, [sp, #28]
   15644:	add	r5, sp, #32
   15648:	mov	r1, #0
   1564c:	mov	r2, #76	; 0x4c
   15650:	ldr	r8, [r0, #20]
   15654:	add	r0, r5, #4
   15658:	bl	1161c <memset@plt>
   1565c:	ldr	r1, [sp, #20]
   15660:	vdup.32	q8, sl
   15664:	add	r3, r5, #44	; 0x2c
   15668:	ubfx	r0, r1, #22, #1
   1566c:	strb	r0, [sp, #104]	; 0x68
   15670:	ldr	r0, [sp, #24]
   15674:	str	r8, [sp, #96]	; 0x60
   15678:	str	r0, [sp, #32]
   1567c:	and	r0, r1, #4194304	; 0x400000
   15680:	orrs	r1, r0, r8
   15684:	str	r0, [sp, #16]
   15688:	movwne	r1, #1
   1568c:	cmp	sl, #1
   15690:	strb	r1, [sp, #107]	; 0x6b
   15694:	ldr	r0, [r9, #92]	; 0x5c
   15698:	str	r0, [sp, #112]	; 0x70
   1569c:	ldrb	r2, [r9, #88]	; 0x58
   156a0:	vst1.32	{d16-d17}, [r3]
   156a4:	ubfx	r3, r2, #2, #1
   156a8:	strb	r3, [sp, #105]	; 0x69
   156ac:	ubfx	r2, r2, #3, #1
   156b0:	strb	r2, [sp, #106]	; 0x6a
   156b4:	blt	156d8 <__assert_fail@plt+0x3fb4>
   156b8:	ldr	r1, [sp, #12]
   156bc:	add	r0, sp, #32
   156c0:	bl	18788 <__assert_fail@plt+0x7064>
   156c4:	cmp	r0, #0
   156c8:	bne	15748 <__assert_fail@plt+0x4024>
   156cc:	ldr	r0, [r9, #92]	; 0x5c
   156d0:	ldr	r4, [sp, #36]	; 0x24
   156d4:	ldrb	r1, [sp, #107]	; 0x6b
   156d8:	cmp	r1, #0
   156dc:	ldr	r1, [sp, #24]
   156e0:	moveq	r4, r1
   156e4:	ldr	r1, [sp, #16]
   156e8:	str	r4, [sp, #36]	; 0x24
   156ec:	cmp	r1, #0
   156f0:	beq	15750 <__assert_fail@plt+0x402c>
   156f4:	cmp	r0, #2
   156f8:	blt	15764 <__assert_fail@plt+0x4040>
   156fc:	add	r4, sp, #32
   15700:	mov	r0, r4
   15704:	bl	18828 <__assert_fail@plt+0x7104>
   15708:	cmp	r0, #0
   1570c:	bne	15748 <__assert_fail@plt+0x4024>
   15710:	ldr	r0, [sp, #64]	; 0x40
   15714:	cmp	r0, sl
   15718:	bge	157f4 <__assert_fail@plt+0x40d0>
   1571c:	ldr	r1, [r9, #92]	; 0x5c
   15720:	ldr	r2, [sp, #60]	; 0x3c
   15724:	ldr	r0, [sp, #68]	; 0x44
   15728:	add	r1, r1, r2
   1572c:	cmp	r0, r1
   15730:	bgt	157f4 <__assert_fail@plt+0x40d0>
   15734:	lsl	r1, r0, #1
   15738:	mov	r0, r4
   1573c:	bl	18788 <__assert_fail@plt+0x7064>
   15740:	cmp	r0, #0
   15744:	beq	15700 <__assert_fail@plt+0x3fdc>
   15748:	ldr	sl, [sp, #28]
   1574c:	b	15948 <__assert_fail@plt+0x4224>
   15750:	cmp	r0, #2
   15754:	blt	15770 <__assert_fail@plt+0x404c>
   15758:	add	r0, sp, #32
   1575c:	bl	18e64 <__assert_fail@plt+0x7740>
   15760:	b	157f4 <__assert_fail@plt+0x40d0>
   15764:	add	r0, sp, #32
   15768:	bl	18df8 <__assert_fail@plt+0x76d4>
   1576c:	b	157f4 <__assert_fail@plt+0x40d0>
   15770:	ldr	r1, [sp, #68]	; 0x44
   15774:	cmp	r8, #0
   15778:	beq	157ec <__assert_fail@plt+0x40c8>
   1577c:	ldr	r2, [sp, #80]	; 0x50
   15780:	ldr	r0, [sp, #60]	; 0x3c
   15784:	cmp	r1, r2
   15788:	movgt	r1, r2
   1578c:	cmp	r0, r1
   15790:	bge	157e0 <__assert_fail@plt+0x40bc>
   15794:	ldr	r3, [sp, #56]	; 0x38
   15798:	ldr	r2, [sp, #32]
   1579c:	ldr	r7, [sp, #96]	; 0x60
   157a0:	add	r3, r3, r0
   157a4:	ldrb	r2, [r2, r3]
   157a8:	ldrb	r2, [r7, r2]
   157ac:	strb	r2, [r4, r0]
   157b0:	add	r0, r0, #1
   157b4:	cmp	r0, r1
   157b8:	bge	157e0 <__assert_fail@plt+0x40bc>
   157bc:	ldr	r2, [sp, #32]
   157c0:	ldr	r7, [sp, #56]	; 0x38
   157c4:	ldr	r6, [sp, #96]	; 0x60
   157c8:	ldr	r3, [sp, #36]	; 0x24
   157cc:	add	r2, r2, r7
   157d0:	ldrb	r2, [r2, r0]
   157d4:	ldrb	r2, [r6, r2]
   157d8:	strb	r2, [r3, r0]
   157dc:	b	157b0 <__assert_fail@plt+0x408c>
   157e0:	str	r0, [sp, #64]	; 0x40
   157e4:	str	r0, [sp, #60]	; 0x3c
   157e8:	b	157f4 <__assert_fail@plt+0x40d0>
   157ec:	str	r1, [sp, #64]	; 0x40
   157f0:	str	r1, [sp, #60]	; 0x3c
   157f4:	ldr	sl, [sp, #28]
   157f8:	mov	r5, #0
   157fc:	ldr	r6, [sp, #20]
   15800:	sub	r8, fp, #48	; 0x30
   15804:	add	r7, sp, #32
   15808:	str	r5, [fp, #-52]	; 0xffffffcc
   1580c:	mov	r0, r8
   15810:	mov	r1, r7
   15814:	str	r5, [sl, #24]
   15818:	orr	r2, r6, #8388608	; 0x800000
   1581c:	ldr	r4, [sl]
   15820:	str	r6, [r4, #128]	; 0x80
   15824:	bl	19254 <__assert_fail@plt+0x7b30>
   15828:	ldr	r1, [sp, #72]	; 0x48
   1582c:	mov	r2, r8
   15830:	mov	r3, r6
   15834:	str	r5, [sp]
   15838:	add	r0, r1, r0
   1583c:	mov	r1, sl
   15840:	str	r0, [sp, #72]	; 0x48
   15844:	sub	r0, fp, #52	; 0x34
   15848:	str	r0, [sp, #4]
   1584c:	mov	r0, r7
   15850:	bl	190a4 <__assert_fail@plt+0x7980>
   15854:	mov	r6, r0
   15858:	cmp	r0, #0
   1585c:	bne	1586c <__assert_fail@plt+0x4148>
   15860:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15864:	cmp	r0, #0
   15868:	bne	16014 <__assert_fail@plt+0x48f0>
   1586c:	mov	r0, #2
   15870:	sub	r3, fp, #40	; 0x28
   15874:	mov	r1, #0
   15878:	mov	r2, #0
   1587c:	str	r0, [fp, #-36]	; 0xffffffdc
   15880:	mov	r0, r4
   15884:	str	r5, [fp, #-40]	; 0xffffffd8
   15888:	bl	1b074 <__assert_fail@plt+0x9950>
   1588c:	mov	r7, r0
   15890:	cmp	r6, #0
   15894:	beq	158c0 <__assert_fail@plt+0x419c>
   15898:	mov	r0, #16
   1589c:	sub	r3, fp, #40	; 0x28
   158a0:	mov	r1, r6
   158a4:	mov	r2, r7
   158a8:	str	r0, [fp, #-36]	; 0xffffffdc
   158ac:	mov	r0, #0
   158b0:	str	r0, [fp, #-40]	; 0xffffffd8
   158b4:	mov	r0, r4
   158b8:	bl	1b074 <__assert_fail@plt+0x9950>
   158bc:	b	158c4 <__assert_fail@plt+0x41a0>
   158c0:	mov	r0, r7
   158c4:	cmp	r7, #0
   158c8:	cmpne	r0, #0
   158cc:	beq	1600c <__assert_fail@plt+0x48e8>
   158d0:	str	r0, [r9, #52]	; 0x34
   158d4:	ldr	r8, [sl]
   158d8:	ldr	r0, [r8, #4]
   158dc:	lsl	r0, r0, #2
   158e0:	bl	22898 <__assert_fail@plt+0x11174>
   158e4:	str	r0, [r8, #12]
   158e8:	ldr	r0, [r8, #4]
   158ec:	lsl	r0, r0, #2
   158f0:	bl	22898 <__assert_fail@plt+0x11174>
   158f4:	str	r0, [r8, #16]
   158f8:	ldr	r0, [r8, #4]
   158fc:	add	r0, r0, r0, lsl #1
   15900:	lsl	r0, r0, #2
   15904:	bl	22898 <__assert_fail@plt+0x11174>
   15908:	str	r0, [r8, #20]
   1590c:	ldr	r0, [r8, #4]
   15910:	add	r0, r0, r0, lsl #1
   15914:	lsl	r0, r0, #2
   15918:	bl	22898 <__assert_fail@plt+0x11174>
   1591c:	str	r0, [r8, #24]
   15920:	ldr	r1, [r8, #12]
   15924:	cmp	r1, #0
   15928:	ldrne	r1, [r8, #16]
   1592c:	cmpne	r1, #0
   15930:	beq	15944 <__assert_fail@plt+0x4220>
   15934:	cmp	r0, #0
   15938:	ldrne	r0, [r8, #20]
   1593c:	cmpne	r0, #0
   15940:	bne	1598c <__assert_fail@plt+0x4268>
   15944:	mov	r0, #12
   15948:	str	r0, [fp, #-52]	; 0xffffffcc
   1594c:	mov	r0, sl
   15950:	bl	18704 <__assert_fail@plt+0x6fe0>
   15954:	add	r0, sp, #32
   15958:	bl	18754 <__assert_fail@plt+0x7030>
   1595c:	ldr	r0, [sp, #8]
   15960:	cmp	r0, #0
   15964:	beq	15970 <__assert_fail@plt+0x424c>
   15968:	add	r0, r9, #136	; 0x88
   1596c:	bl	1140c <pthread_mutex_destroy@plt>
   15970:	mov	r0, r9
   15974:	bl	16650 <__assert_fail@plt+0x4f2c>
   15978:	mov	r0, #0
   1597c:	str	r0, [sl]
   15980:	str	r0, [sl, #4]
   15984:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15988:	b	15f68 <__assert_fail@plt+0x4844>
   1598c:	ldr	r0, [sl, #24]
   15990:	lsl	r0, r0, #2
   15994:	bl	22898 <__assert_fail@plt+0x11174>
   15998:	cmp	r0, #0
   1599c:	str	r0, [r8, #132]	; 0x84
   159a0:	beq	15a24 <__assert_fail@plt+0x4300>
   159a4:	ldr	r1, [sl, #24]
   159a8:	cmp	r1, #0
   159ac:	beq	159c4 <__assert_fail@plt+0x42a0>
   159b0:	mov	r2, #0
   159b4:	str	r2, [r0, r2, lsl #2]
   159b8:	add	r2, r2, #1
   159bc:	cmp	r1, r2
   159c0:	bne	159b4 <__assert_fail@plt+0x4290>
   159c4:	ldr	r0, [r8, #52]	; 0x34
   159c8:	movw	r1, #49684	; 0xc214
   159cc:	mov	r2, r8
   159d0:	movt	r1, #1
   159d4:	bl	1c190 <__assert_fail@plt+0xaa6c>
   159d8:	ldr	r1, [sl, #24]
   159dc:	cmp	r1, #0
   159e0:	beq	15a08 <__assert_fail@plt+0x42e4>
   159e4:	ldr	r0, [r8, #132]	; 0x84
   159e8:	mov	r2, #0
   159ec:	ldr	r3, [r0, r2, lsl #2]
   159f0:	cmp	r2, r3
   159f4:	bne	15a10 <__assert_fail@plt+0x42ec>
   159f8:	add	r2, r2, #1
   159fc:	cmp	r1, r2
   15a00:	bne	159ec <__assert_fail@plt+0x42c8>
   15a04:	b	15a18 <__assert_fail@plt+0x42f4>
   15a08:	ldr	r0, [r8, #132]	; 0x84
   15a0c:	b	15a18 <__assert_fail@plt+0x42f4>
   15a10:	cmp	r1, r2
   15a14:	bne	15a24 <__assert_fail@plt+0x4300>
   15a18:	bl	132e4 <__assert_fail@plt+0x1bc0>
   15a1c:	mov	r0, #0
   15a20:	str	r0, [r8, #132]	; 0x84
   15a24:	ldr	r0, [r8, #52]	; 0x34
   15a28:	movw	r1, #49836	; 0xc2ac
   15a2c:	mov	r2, sl
   15a30:	movt	r1, #1
   15a34:	bl	19b00 <__assert_fail@plt+0x83dc>
   15a38:	cmp	r0, #0
   15a3c:	bne	15948 <__assert_fail@plt+0x4224>
   15a40:	ldr	r0, [r8, #52]	; 0x34
   15a44:	movw	r1, #49972	; 0xc334
   15a48:	mov	r2, r8
   15a4c:	movt	r1, #1
   15a50:	bl	19b00 <__assert_fail@plt+0x83dc>
   15a54:	cmp	r0, #0
   15a58:	bne	15948 <__assert_fail@plt+0x4224>
   15a5c:	ldr	r0, [r8, #52]	; 0x34
   15a60:	movw	r1, #50116	; 0xc3c4
   15a64:	mov	r2, r8
   15a68:	movt	r1, #1
   15a6c:	bl	1c190 <__assert_fail@plt+0xaa6c>
   15a70:	ldr	r0, [r8, #52]	; 0x34
   15a74:	movw	r1, #50212	; 0xc424
   15a78:	mov	r2, r8
   15a7c:	movt	r1, #1
   15a80:	bl	1c190 <__assert_fail@plt+0xaa6c>
   15a84:	cmp	r0, #0
   15a88:	bne	15948 <__assert_fail@plt+0x4224>
   15a8c:	mov	r5, #0
   15a90:	sub	r7, fp, #40	; 0x28
   15a94:	mov	r4, #0
   15a98:	ldr	r0, [r8, #24]
   15a9c:	add	r6, r4, r4, lsl #1
   15aa0:	add	r0, r0, r6, lsl #2
   15aa4:	ldr	r0, [r0, #4]
   15aa8:	cmp	r0, #0
   15aac:	beq	15ab8 <__assert_fail@plt+0x4394>
   15ab0:	mov	r1, r5
   15ab4:	b	15af8 <__assert_fail@plt+0x43d4>
   15ab8:	mov	r0, r7
   15abc:	mov	r1, r8
   15ac0:	mov	r2, r4
   15ac4:	mov	r3, #1
   15ac8:	bl	1c8d4 <__assert_fail@plt+0xb1b0>
   15acc:	cmp	r0, #0
   15ad0:	bne	15948 <__assert_fail@plt+0x4224>
   15ad4:	ldr	r0, [r8, #24]
   15ad8:	mov	r1, r5
   15adc:	add	r0, r0, r6, lsl #2
   15ae0:	ldr	r0, [r0, #4]
   15ae4:	cmp	r0, #0
   15ae8:	bne	15af8 <__assert_fail@plt+0x43d4>
   15aec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15af0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   15af4:	mov	r1, #1
   15af8:	ldr	r2, [r8, #8]
   15afc:	add	r0, r4, #1
   15b00:	subs	r3, r0, r2
   15b04:	mov	r4, r3
   15b08:	movwne	r3, #1
   15b0c:	movne	r4, r0
   15b10:	tst	r1, #1
   15b14:	and	r5, r1, r3
   15b18:	cmpeq	r0, r2
   15b1c:	bne	15a98 <__assert_fail@plt+0x4374>
   15b20:	ldrb	r1, [sl, #28]
   15b24:	tst	r1, #16
   15b28:	bne	15b44 <__assert_fail@plt+0x4420>
   15b2c:	ldr	r1, [sl, #24]
   15b30:	cmp	r1, #0
   15b34:	beq	15b44 <__assert_fail@plt+0x4420>
   15b38:	ldrb	r1, [r8, #88]	; 0x58
   15b3c:	tst	r1, #1
   15b40:	bne	15b50 <__assert_fail@plt+0x442c>
   15b44:	ldr	r1, [r8, #76]	; 0x4c
   15b48:	cmp	r1, #0
   15b4c:	beq	15c30 <__assert_fail@plt+0x450c>
   15b50:	add	r0, r0, r0, lsl #1
   15b54:	lsl	r0, r0, #2
   15b58:	bl	22898 <__assert_fail@plt+0x11174>
   15b5c:	cmp	r0, #0
   15b60:	str	r0, [r8, #28]
   15b64:	beq	15944 <__assert_fail@plt+0x4220>
   15b68:	ldr	r1, [r8, #8]
   15b6c:	cmp	r1, #0
   15b70:	beq	15c30 <__assert_fail@plt+0x450c>
   15b74:	mov	r1, #0
   15b78:	str	r1, [r0]
   15b7c:	str	r1, [r0, #4]
   15b80:	str	r1, [r0, #8]
   15b84:	ldr	r0, [r8, #8]
   15b88:	cmp	r0, #2
   15b8c:	bcc	15bbc <__assert_fail@plt+0x4498>
   15b90:	mov	r2, #1
   15b94:	mov	r3, #12
   15b98:	ldr	r0, [r8, #28]
   15b9c:	add	r2, r2, #1
   15ba0:	str	r1, [r0, r3]!
   15ba4:	add	r3, r3, #12
   15ba8:	str	r1, [r0, #4]
   15bac:	str	r1, [r0, #8]
   15bb0:	ldr	r0, [r8, #8]
   15bb4:	cmp	r2, r0
   15bb8:	bcc	15b98 <__assert_fail@plt+0x4474>
   15bbc:	cmp	r0, #0
   15bc0:	beq	15c30 <__assert_fail@plt+0x450c>
   15bc4:	ldr	r1, [r8, #24]
   15bc8:	mov	r4, #0
   15bcc:	add	r5, r4, r4, lsl #1
   15bd0:	add	r2, r1, r5, lsl #2
   15bd4:	ldr	r3, [r2, #4]
   15bd8:	cmp	r3, #1
   15bdc:	blt	15c24 <__assert_fail@plt+0x4500>
   15be0:	ldr	r7, [r2, #8]
   15be4:	mov	r6, #0
   15be8:	ldr	r0, [r7, r6, lsl #2]
   15bec:	ldr	r1, [r8, #28]
   15bf0:	add	r0, r0, r0, lsl #1
   15bf4:	add	r0, r1, r0, lsl #2
   15bf8:	mov	r1, r4
   15bfc:	bl	1d0ec <__assert_fail@plt+0xb9c8>
   15c00:	cmp	r0, #0
   15c04:	beq	15944 <__assert_fail@plt+0x4220>
   15c08:	ldr	r1, [r8, #24]
   15c0c:	add	r6, r6, #1
   15c10:	add	r0, r1, r5, lsl #2
   15c14:	ldr	r0, [r0, #4]
   15c18:	cmp	r6, r0
   15c1c:	blt	15be8 <__assert_fail@plt+0x44c4>
   15c20:	ldr	r0, [r8, #8]
   15c24:	add	r4, r4, #1
   15c28:	cmp	r4, r0
   15c2c:	bcc	15bcc <__assert_fail@plt+0x44a8>
   15c30:	mov	r0, #0
   15c34:	str	r0, [fp, #-52]	; 0xffffffcc
   15c38:	ldr	r0, [sp, #16]
   15c3c:	cmp	r0, #0
   15c40:	bne	15d78 <__assert_fail@plt+0x4654>
   15c44:	ldrb	r2, [r9, #88]	; 0x58
   15c48:	ands	r0, r2, #4
   15c4c:	beq	15d78 <__assert_fail@plt+0x4654>
   15c50:	ldr	r0, [sp, #28]
   15c54:	ldr	r0, [r0, #20]
   15c58:	cmp	r0, #0
   15c5c:	bne	15d78 <__assert_fail@plt+0x4654>
   15c60:	ldr	r7, [r9, #8]
   15c64:	mov	sl, #0
   15c68:	cmp	r7, #0
   15c6c:	beq	15d4c <__assert_fail@plt+0x4628>
   15c70:	ldr	r3, [r9]
   15c74:	mov	r8, #0
   15c78:	mov	ip, #1
   15c7c:	mov	lr, #139	; 0x8b
   15c80:	mov	r6, #0
   15c84:	mov	r4, #0
   15c88:	add	r1, r3, r4, lsl #3
   15c8c:	ldrb	r5, [r1, #4]
   15c90:	sub	r5, r5, #1
   15c94:	cmp	r5, #11
   15c98:	bhi	16030 <__assert_fail@plt+0x490c>
   15c9c:	add	r0, pc, #0
   15ca0:	ldr	pc, [r0, r5, lsl #2]
   15ca4:	andeq	r5, r1, ip, lsr #26
   15ca8:	ldrdeq	r5, [r1], -r4
   15cac:	andeq	r5, r1, r4, ror #25
   15cb0:	ldrdeq	r5, [r1], -r4
   15cb4:	andeq	r5, r1, r4, asr #26
   15cb8:	andeq	r5, r1, r8, ror sp
   15cbc:	andeq	r6, r1, r0, lsr r0
   15cc0:	ldrdeq	r5, [r1], -r4
   15cc4:	ldrdeq	r5, [r1], -r4
   15cc8:	ldrdeq	r5, [r1], -r4
   15ccc:	ldrdeq	r5, [r1], -r4
   15cd0:	andeq	r5, r1, ip, lsl #26
   15cd4:	add	r4, r4, #1
   15cd8:	cmp	r4, r7
   15cdc:	bne	15c88 <__assert_fail@plt+0x4564>
   15ce0:	b	15f74 <__assert_fail@plt+0x4850>
   15ce4:	ldr	r0, [r3, r4, lsl #3]
   15ce8:	mov	r1, #0
   15cec:	add	r5, r0, #16
   15cf0:	ldr	r0, [r5, r1, lsl #2]
   15cf4:	cmp	r0, #0
   15cf8:	bne	15d78 <__assert_fail@plt+0x4654>
   15cfc:	add	r1, r1, #1
   15d00:	cmp	r1, #4
   15d04:	bne	15cf0 <__assert_fail@plt+0x45cc>
   15d08:	b	15cd4 <__assert_fail@plt+0x45b0>
   15d0c:	ldr	r0, [r3, r4, lsl #3]
   15d10:	sub	r0, r0, #16
   15d14:	ror	r1, r0, #4
   15d18:	cmp	r1, #7
   15d1c:	bhi	15d78 <__assert_fail@plt+0x4654>
   15d20:	tst	lr, ip, lsl r1
   15d24:	bne	15cd4 <__assert_fail@plt+0x45b0>
   15d28:	b	15d78 <__assert_fail@plt+0x4654>
   15d2c:	ldrsb	r0, [r1]
   15d30:	cmp	r0, #0
   15d34:	mov	r0, #0
   15d38:	movwmi	r0, #1
   15d3c:	orr	r6, r6, r0
   15d40:	b	15cd4 <__assert_fail@plt+0x45b0>
   15d44:	mov	r8, #1
   15d48:	b	15cd4 <__assert_fail@plt+0x45b0>
   15d4c:	mov	r8, #0
   15d50:	mov	r0, #1
   15d54:	and	r1, r2, #249	; 0xf9
   15d58:	str	r0, [r9, #92]	; 0x5c
   15d5c:	ldr	r0, [r9, #76]	; 0x4c
   15d60:	cmp	r0, #0
   15d64:	movwgt	sl, #1
   15d68:	orr	r0, r8, sl
   15d6c:	and	r0, r0, #1
   15d70:	orr	r0, r1, r0, lsl #1
   15d74:	strb	r0, [r9, #88]	; 0x58
   15d78:	ldr	r1, [r9, #52]	; 0x34
   15d7c:	ldr	r0, [r9, #24]
   15d80:	ldr	r1, [r1, #12]
   15d84:	ldr	r1, [r1, #28]
   15d88:	str	r1, [r9, #72]	; 0x48
   15d8c:	add	r1, r1, r1, lsl #1
   15d90:	add	r1, r0, r1, lsl #2
   15d94:	sub	r0, fp, #40	; 0x28
   15d98:	bl	1d158 <__assert_fail@plt+0xba34>
   15d9c:	cmp	r0, #0
   15da0:	str	r0, [fp, #-48]	; 0xffffffd0
   15da4:	bne	16028 <__assert_fail@plt+0x4904>
   15da8:	ldr	r0, [r9, #76]	; 0x4c
   15dac:	ldr	sl, [sp, #28]
   15db0:	cmp	r0, #1
   15db4:	blt	15e88 <__assert_fail@plt+0x4764>
   15db8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15dbc:	cmp	r7, #1
   15dc0:	blt	15e88 <__assert_fail@plt+0x4764>
   15dc4:	mov	r6, #0
   15dc8:	sub	r8, fp, #40	; 0x28
   15dcc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15dd0:	ldr	r2, [r9]
   15dd4:	ldr	r0, [r1, r6, lsl #2]
   15dd8:	add	r3, r2, r0, lsl #3
   15ddc:	ldrb	r3, [r3, #4]
   15de0:	cmp	r3, #4
   15de4:	bne	15e7c <__assert_fail@plt+0x4758>
   15de8:	mov	r3, #0
   15dec:	cmp	r7, #1
   15df0:	blt	15e28 <__assert_fail@plt+0x4704>
   15df4:	ldr	r5, [r1, r3, lsl #2]
   15df8:	add	r4, r2, r5, lsl #3
   15dfc:	ldrb	r4, [r4, #4]
   15e00:	cmp	r4, #9
   15e04:	bne	15e18 <__assert_fail@plt+0x46f4>
   15e08:	ldr	r4, [r2, r0, lsl #3]
   15e0c:	ldr	r5, [r2, r5, lsl #3]
   15e10:	cmp	r5, r4
   15e14:	beq	15e28 <__assert_fail@plt+0x4704>
   15e18:	add	r3, r3, #1
   15e1c:	cmp	r7, r3
   15e20:	bne	15df4 <__assert_fail@plt+0x46d0>
   15e24:	b	15e7c <__assert_fail@plt+0x4758>
   15e28:	cmp	r3, r7
   15e2c:	beq	15e7c <__assert_fail@plt+0x4758>
   15e30:	ldr	r1, [r9, #20]
   15e34:	add	r0, r0, r0, lsl #1
   15e38:	add	r0, r1, r0, lsl #2
   15e3c:	ldr	r0, [r0, #8]
   15e40:	ldr	r4, [r0]
   15e44:	mov	r0, r8
   15e48:	mov	r1, r4
   15e4c:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   15e50:	cmp	r0, #0
   15e54:	bne	15e7c <__assert_fail@plt+0x4758>
   15e58:	ldr	r0, [r9, #24]
   15e5c:	add	r1, r4, r4, lsl #1
   15e60:	add	r1, r0, r1, lsl #2
   15e64:	mov	r0, r8
   15e68:	bl	1cdb0 <__assert_fail@plt+0xb68c>
   15e6c:	cmp	r0, #0
   15e70:	bne	15f44 <__assert_fail@plt+0x4820>
   15e74:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15e78:	mov	r6, #0
   15e7c:	add	r6, r6, #1
   15e80:	cmp	r6, r7
   15e84:	blt	15dcc <__assert_fail@plt+0x46a8>
   15e88:	sub	r0, fp, #48	; 0x30
   15e8c:	sub	r2, fp, #40	; 0x28
   15e90:	mov	r1, r9
   15e94:	mov	r3, #0
   15e98:	bl	1d23c <__assert_fail@plt+0xbb18>
   15e9c:	cmp	r0, #0
   15ea0:	str	r0, [r9, #36]	; 0x24
   15ea4:	beq	15f24 <__assert_fail@plt+0x4800>
   15ea8:	ldrsb	r1, [r0, #52]	; 0x34
   15eac:	cmn	r1, #1
   15eb0:	ble	15ec4 <__assert_fail@plt+0x47a0>
   15eb4:	str	r0, [r9, #40]	; 0x28
   15eb8:	str	r0, [r9, #44]	; 0x2c
   15ebc:	str	r0, [r9, #48]	; 0x30
   15ec0:	b	15f38 <__assert_fail@plt+0x4814>
   15ec4:	sub	r4, fp, #48	; 0x30
   15ec8:	sub	r6, fp, #40	; 0x28
   15ecc:	mov	r1, r9
   15ed0:	mov	r3, #1
   15ed4:	mov	r0, r4
   15ed8:	mov	r2, r6
   15edc:	bl	1d23c <__assert_fail@plt+0xbb18>
   15ee0:	str	r0, [r9, #40]	; 0x28
   15ee4:	mov	r0, r4
   15ee8:	mov	r1, r9
   15eec:	mov	r2, r6
   15ef0:	mov	r3, #2
   15ef4:	bl	1d23c <__assert_fail@plt+0xbb18>
   15ef8:	str	r0, [r9, #44]	; 0x2c
   15efc:	mov	r0, r4
   15f00:	mov	r1, r9
   15f04:	mov	r2, r6
   15f08:	mov	r3, #6
   15f0c:	bl	1d23c <__assert_fail@plt+0xbb18>
   15f10:	str	r0, [r9, #48]	; 0x30
   15f14:	ldr	r1, [r9, #40]	; 0x28
   15f18:	cmp	r1, #0
   15f1c:	cmpne	r0, #0
   15f20:	bne	15f2c <__assert_fail@plt+0x4808>
   15f24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15f28:	b	15f44 <__assert_fail@plt+0x4820>
   15f2c:	ldr	r0, [r9, #44]	; 0x2c
   15f30:	cmp	r0, #0
   15f34:	beq	15f24 <__assert_fail@plt+0x4800>
   15f38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15f3c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   15f40:	mov	r0, #0
   15f44:	str	r0, [fp, #-52]	; 0xffffffcc
   15f48:	mov	r0, sl
   15f4c:	bl	18704 <__assert_fail@plt+0x6fe0>
   15f50:	add	r0, sp, #32
   15f54:	bl	18754 <__assert_fail@plt+0x7030>
   15f58:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15f5c:	mov	r4, #0
   15f60:	cmp	r0, #0
   15f64:	bne	1595c <__assert_fail@plt+0x4238>
   15f68:	mov	r0, r4
   15f6c:	sub	sp, fp, #28
   15f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f74:	orr	r0, r6, r8
   15f78:	tst	r0, #1
   15f7c:	beq	15d50 <__assert_fail@plt+0x462c>
   15f80:	mov	r2, #0
   15f84:	mov	r7, #7
   15f88:	add	r3, r3, r2, lsl #3
   15f8c:	ldr	r6, [r3, #4]
   15f90:	uxtb	r1, r6
   15f94:	cmp	r1, #5
   15f98:	beq	15fb8 <__assert_fail@plt+0x4894>
   15f9c:	cmp	r1, #1
   15fa0:	bne	15fc0 <__assert_fail@plt+0x489c>
   15fa4:	ldrsb	r0, [r3]
   15fa8:	cmn	r0, #1
   15fac:	bicle	r0, r6, #2097152	; 0x200000
   15fb0:	strle	r0, [r3, #4]
   15fb4:	b	15fc0 <__assert_fail@plt+0x489c>
   15fb8:	bfi	r6, r7, #0, #8
   15fbc:	str	r6, [r3, #4]
   15fc0:	ldr	r0, [r9, #8]
   15fc4:	add	r2, r2, #1
   15fc8:	cmp	r2, r0
   15fcc:	bcs	15fd8 <__assert_fail@plt+0x48b4>
   15fd0:	ldr	r3, [r9]
   15fd4:	b	15f88 <__assert_fail@plt+0x4864>
   15fd8:	ldrb	r2, [r9, #88]	; 0x58
   15fdc:	b	15d50 <__assert_fail@plt+0x462c>
   15fe0:	mov	r0, r9
   15fe4:	mov	r1, #160	; 0xa0
   15fe8:	mov	r4, #160	; 0xa0
   15fec:	bl	228c8 <__assert_fail@plt+0x111a4>
   15ff0:	cmp	r0, #0
   15ff4:	beq	16020 <__assert_fail@plt+0x48fc>
   15ff8:	mov	r9, r0
   15ffc:	ldr	r0, [sp, #28]
   16000:	str	r9, [r0]
   16004:	str	r4, [r0, #4]
   16008:	b	1543c <__assert_fail@plt+0x3d18>
   1600c:	mov	r0, #12
   16010:	str	r0, [fp, #-52]	; 0xffffffcc
   16014:	mov	r0, #0
   16018:	str	r0, [r9, #52]	; 0x34
   1601c:	b	1594c <__assert_fail@plt+0x4228>
   16020:	mov	r4, #12
   16024:	b	15f68 <__assert_fail@plt+0x4844>
   16028:	ldr	sl, [sp, #28]
   1602c:	b	15f44 <__assert_fail@plt+0x4820>
   16030:	bl	11700 <abort@plt>
   16034:	movw	r2, #21232	; 0x52f0
   16038:	movt	r2, #3
   1603c:	ldr	r1, [r2]
   16040:	str	r0, [r2]
   16044:	mov	r0, r1
   16048:	bx	lr
   1604c:	push	{r4, r5, r6, sl, fp, lr}
   16050:	add	fp, sp, #16
   16054:	ldr	r5, [r0, #16]
   16058:	ldr	r6, [r0]
   1605c:	mov	r4, r0
   16060:	mov	r1, #0
   16064:	mov	r2, #256	; 0x100
   16068:	mov	r0, r5
   1606c:	bl	1161c <memset@plt>
   16070:	ldr	r1, [r6, #36]	; 0x24
   16074:	mov	r0, r4
   16078:	mov	r2, r5
   1607c:	bl	160e4 <__assert_fail@plt+0x49c0>
   16080:	ldr	r0, [r6, #36]	; 0x24
   16084:	ldr	r1, [r6, #40]	; 0x28
   16088:	cmp	r0, r1
   1608c:	beq	160a0 <__assert_fail@plt+0x497c>
   16090:	mov	r0, r4
   16094:	mov	r2, r5
   16098:	bl	160e4 <__assert_fail@plt+0x49c0>
   1609c:	ldr	r0, [r6, #36]	; 0x24
   160a0:	ldr	r1, [r6, #44]	; 0x2c
   160a4:	cmp	r0, r1
   160a8:	beq	160bc <__assert_fail@plt+0x4998>
   160ac:	mov	r0, r4
   160b0:	mov	r2, r5
   160b4:	bl	160e4 <__assert_fail@plt+0x49c0>
   160b8:	ldr	r0, [r6, #36]	; 0x24
   160bc:	ldr	r1, [r6, #48]	; 0x30
   160c0:	cmp	r0, r1
   160c4:	movne	r0, r4
   160c8:	movne	r2, r5
   160cc:	blne	160e4 <__assert_fail@plt+0x49c0>
   160d0:	ldrb	r0, [r4, #28]
   160d4:	orr	r0, r0, #8
   160d8:	strb	r0, [r4, #28]
   160dc:	mov	r0, #0
   160e0:	pop	{r4, r5, r6, sl, fp, pc}
   160e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e8:	add	fp, sp, #28
   160ec:	sub	sp, sp, #308	; 0x134
   160f0:	ldr	r8, [r0]
   160f4:	str	r0, [sp, #20]
   160f8:	mov	r5, r2
   160fc:	mov	r9, #0
   16100:	ldr	r0, [r8, #92]	; 0x5c
   16104:	cmp	r0, #1
   16108:	bne	16118 <__assert_fail@plt+0x49f4>
   1610c:	ldr	r0, [sp, #20]
   16110:	ldrb	r0, [r0, #14]
   16114:	ubfx	r9, r0, #6, #1
   16118:	ldr	r0, [r1, #8]
   1611c:	cmp	r0, #1
   16120:	blt	1645c <__assert_fail@plt+0x4d38>
   16124:	add	r0, sp, #32
   16128:	mov	r7, #1
   1612c:	mov	r2, #0
   16130:	str	r1, [sp, #12]
   16134:	str	r8, [sp, #24]
   16138:	add	r0, r0, #1
   1613c:	str	r0, [sp, #4]
   16140:	movw	r0, #1
   16144:	movt	r0, #32
   16148:	add	r0, r0, #254	; 0xfe
   1614c:	str	r0, [sp, #8]
   16150:	ldr	r0, [r1, #12]
   16154:	str	r2, [sp, #16]
   16158:	ldr	sl, [r0, r2, lsl #2]
   1615c:	ldr	r0, [r8]
   16160:	add	r1, r0, sl, lsl #3
   16164:	ldrb	r4, [r1, #4]
   16168:	sub	r1, r4, #1
   1616c:	cmp	r1, #6
   16170:	bhi	16418 <__assert_fail@plt+0x4cf4>
   16174:	add	r2, pc, #0
   16178:	ldr	pc, [r2, r1, lsl #2]
   1617c:	muleq	r1, r8, r1
   16180:	andeq	r6, r1, r4, lsr r4
   16184:	andeq	r6, r1, ip, lsl #5
   16188:	andeq	r6, r1, r8, lsl r4
   1618c:	andeq	r6, r1, r4, lsr r4
   16190:	strdeq	r6, [r1], -r4
   16194:	andeq	r6, r1, r4, lsr r4
   16198:	ldrb	r0, [r0, sl, lsl #3]
   1619c:	cmp	r9, #0
   161a0:	strb	r7, [r5, r0]
   161a4:	beq	161b0 <__assert_fail@plt+0x4a8c>
   161a8:	bl	11478 <tolower@plt>
   161ac:	strb	r7, [r5, r0]
   161b0:	ldr	r0, [sp, #20]
   161b4:	ldrb	r0, [r0, #14]
   161b8:	tst	r0, #64	; 0x40
   161bc:	beq	16418 <__assert_fail@plt+0x4cf4>
   161c0:	ldr	r0, [r8, #92]	; 0x5c
   161c4:	cmp	r0, #2
   161c8:	blt	16418 <__assert_fail@plt+0x4cf4>
   161cc:	ldr	r0, [r8]
   161d0:	add	r1, sl, #1
   161d4:	movw	r4, #1
   161d8:	add	r6, sp, #32
   161dc:	movt	r4, #32
   161e0:	ldrb	r0, [r0, sl, lsl #3]
   161e4:	strb	r0, [sp, #32]
   161e8:	ldr	r0, [r8, #8]
   161ec:	cmp	r1, r0
   161f0:	ldr	r0, [sp, #4]
   161f4:	bcs	16238 <__assert_fail@plt+0x4b14>
   161f8:	ldr	r0, [sp, #4]
   161fc:	ldr	r1, [r8]
   16200:	ldr	r3, [sp, #8]
   16204:	add	r1, r1, sl, lsl #3
   16208:	ldr	r2, [r1, #12]
   1620c:	and	r2, r2, r3
   16210:	cmp	r2, r4
   16214:	bne	16238 <__assert_fail@plt+0x4b14>
   16218:	ldrb	r1, [r1, #8]
   1621c:	add	r3, sl, #2
   16220:	strb	r1, [r0], #1
   16224:	add	r1, sl, #1
   16228:	ldr	r2, [r8, #8]
   1622c:	mov	sl, r1
   16230:	cmp	r3, r2
   16234:	bcc	161fc <__assert_fail@plt+0x4ad8>
   16238:	mov	r1, #0
   1623c:	sub	r4, r0, r6
   16240:	sub	r0, fp, #36	; 0x24
   16244:	sub	r3, fp, #48	; 0x30
   16248:	str	r1, [fp, #-44]	; 0xffffffd4
   1624c:	str	r1, [fp, #-48]	; 0xffffffd0
   16250:	mov	r1, r6
   16254:	mov	r2, r4
   16258:	bl	22cd8 <__assert_fail@plt+0x115b4>
   1625c:	cmp	r0, r4
   16260:	bne	16418 <__assert_fail@plt+0x4cf4>
   16264:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16268:	bl	11490 <towlower@plt>
   1626c:	mov	r1, r0
   16270:	mov	r0, r6
   16274:	sub	r2, fp, #48	; 0x30
   16278:	bl	113d0 <wcrtomb@plt>
   1627c:	cmn	r0, #1
   16280:	ldrbne	r0, [sp, #32]
   16284:	strbne	r7, [r5, r0]
   16288:	b	16418 <__assert_fail@plt+0x4cf4>
   1628c:	mov	r4, #0
   16290:	mov	r6, #0
   16294:	str	sl, [sp, #28]
   16298:	ldr	r0, [r0, sl, lsl #3]
   1629c:	mov	sl, #0
   162a0:	ldr	r8, [r0, r6, lsl #2]
   162a4:	tst	r8, r7, lsl sl
   162a8:	strbne	r7, [r5, r4]
   162ac:	cmpne	r9, #0
   162b0:	bne	162c8 <__assert_fail@plt+0x4ba4>
   162b4:	add	sl, sl, #1
   162b8:	add	r4, r4, #1
   162bc:	cmp	sl, #32
   162c0:	bne	162a4 <__assert_fail@plt+0x4b80>
   162c4:	b	162d8 <__assert_fail@plt+0x4bb4>
   162c8:	mov	r0, r4
   162cc:	bl	11478 <tolower@plt>
   162d0:	strb	r7, [r5, r0]
   162d4:	b	162b4 <__assert_fail@plt+0x4b90>
   162d8:	ldr	r8, [sp, #24]
   162dc:	ldr	sl, [sp, #28]
   162e0:	add	r6, r6, #1
   162e4:	cmp	r6, #8
   162e8:	beq	16418 <__assert_fail@plt+0x4cf4>
   162ec:	ldr	r0, [r8]
   162f0:	b	16298 <__assert_fail@plt+0x4b74>
   162f4:	ldr	r4, [r0, sl, lsl #3]
   162f8:	ldr	r0, [r8, #92]	; 0x5c
   162fc:	cmp	r0, #2
   16300:	blt	16374 <__assert_fail@plt+0x4c50>
   16304:	ldr	r0, [r4, #36]	; 0x24
   16308:	cmp	r0, #0
   1630c:	bne	16328 <__assert_fail@plt+0x4c04>
   16310:	ldrb	r0, [r4, #16]
   16314:	tst	r0, #1
   16318:	bne	16328 <__assert_fail@plt+0x4c04>
   1631c:	ldr	r0, [r4, #32]
   16320:	cmp	r0, #0
   16324:	beq	16374 <__assert_fail@plt+0x4c50>
   16328:	mov	r6, #0
   1632c:	add	r4, sp, #32
   16330:	strb	r6, [fp, #-48]	; 0xffffffd0
   16334:	mov	r0, #0
   16338:	sub	r1, fp, #48	; 0x30
   1633c:	mov	r2, #1
   16340:	mov	r3, r4
   16344:	str	r6, [sp, #36]	; 0x24
   16348:	str	r6, [sp, #32]
   1634c:	bl	22cd8 <__assert_fail@plt+0x115b4>
   16350:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   16354:	cmn	r0, #2
   16358:	add	r0, r1, #1
   1635c:	strbeq	r7, [r5, r1]
   16360:	uxtb	r1, r0
   16364:	strb	r0, [fp, #-48]	; 0xffffffd0
   16368:	cmp	r1, r0
   1636c:	beq	16334 <__assert_fail@plt+0x4c10>
   16370:	b	16418 <__assert_fail@plt+0x4cf4>
   16374:	ldr	r0, [r4, #20]
   16378:	cmp	r0, #1
   1637c:	blt	16418 <__assert_fail@plt+0x4cf4>
   16380:	mov	r6, #0
   16384:	mov	r0, #0
   16388:	sub	r2, fp, #48	; 0x30
   1638c:	str	r0, [fp, #-44]	; 0xffffffd4
   16390:	str	r0, [fp, #-48]	; 0xffffffd0
   16394:	ldr	r0, [r4]
   16398:	ldr	r1, [r0, r6, lsl #2]
   1639c:	add	r0, sp, #32
   163a0:	bl	113d0 <wcrtomb@plt>
   163a4:	cmn	r0, #1
   163a8:	beq	163c4 <__assert_fail@plt+0x4ca0>
   163ac:	ldrb	r0, [sp, #32]
   163b0:	cmp	r9, #0
   163b4:	strb	r7, [r5, r0]
   163b8:	beq	163c4 <__assert_fail@plt+0x4ca0>
   163bc:	bl	11478 <tolower@plt>
   163c0:	strb	r7, [r5, r0]
   163c4:	ldr	r0, [sp, #20]
   163c8:	ldrb	r0, [r0, #14]
   163cc:	tst	r0, #64	; 0x40
   163d0:	beq	16408 <__assert_fail@plt+0x4ce4>
   163d4:	ldr	r0, [r8, #92]	; 0x5c
   163d8:	cmp	r0, #2
   163dc:	blt	16408 <__assert_fail@plt+0x4ce4>
   163e0:	ldr	r0, [r4]
   163e4:	ldr	r0, [r0, r6, lsl #2]
   163e8:	bl	11490 <towlower@plt>
   163ec:	mov	r1, r0
   163f0:	add	r0, sp, #32
   163f4:	sub	r2, fp, #48	; 0x30
   163f8:	bl	113d0 <wcrtomb@plt>
   163fc:	cmn	r0, #1
   16400:	ldrbne	r0, [sp, #32]
   16404:	strbne	r7, [r5, r0]
   16408:	ldr	r0, [r4, #20]
   1640c:	add	r6, r6, #1
   16410:	cmp	r6, r0
   16414:	blt	16384 <__assert_fail@plt+0x4c60>
   16418:	ldr	r1, [sp, #12]
   1641c:	ldr	r2, [sp, #16]
   16420:	ldr	r0, [r1, #8]
   16424:	add	r2, r2, #1
   16428:	cmp	r2, r0
   1642c:	blt	16150 <__assert_fail@plt+0x4a2c>
   16430:	b	1645c <__assert_fail@plt+0x4d38>
   16434:	mov	r0, r5
   16438:	mov	r1, #1
   1643c:	mov	r2, #256	; 0x100
   16440:	bl	1161c <memset@plt>
   16444:	cmp	r4, #2
   16448:	bne	1645c <__assert_fail@plt+0x4d38>
   1644c:	ldr	r1, [sp, #20]
   16450:	ldrb	r0, [r1, #28]
   16454:	orr	r0, r0, #1
   16458:	strb	r0, [r1, #28]
   1645c:	sub	sp, fp, #28
   16460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16464:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16468:	add	fp, sp, #24
   1646c:	mov	r4, r0
   16470:	mov	r0, #0
   16474:	mov	r6, r2
   16478:	mov	r8, r1
   1647c:	str	r0, [r4]
   16480:	str	r0, [r4, #4]
   16484:	str	r0, [r4, #8]
   16488:	mov	r0, #256	; 0x100
   1648c:	bl	22898 <__assert_fail@plt+0x11174>
   16490:	cmp	r0, #0
   16494:	str	r0, [r4, #16]
   16498:	beq	16548 <__assert_fail@plt+0x4e24>
   1649c:	movw	r0, #45820	; 0xb2fc
   164a0:	tst	r6, #1
   164a4:	and	r1, r6, #2
   164a8:	movt	r0, #3
   164ac:	movweq	r0, #710	; 0x2c6
   164b0:	movteq	r0, #257	; 0x101
   164b4:	tst	r6, #4
   164b8:	orr	r5, r0, r1, lsl #21
   164bc:	bne	164d0 <__assert_fail@plt+0x4dac>
   164c0:	ldrb	r0, [r4, #28]
   164c4:	and	r0, r0, #127	; 0x7f
   164c8:	strb	r0, [r4, #28]
   164cc:	b	164f0 <__assert_fail@plt+0x4dcc>
   164d0:	ldrb	r0, [r4, #28]
   164d4:	mvn	r1, #127	; 0x7f
   164d8:	orr	r0, r0, r1
   164dc:	movw	r1, #45758	; 0xb2be
   164e0:	movt	r1, #323	; 0x143
   164e4:	strb	r0, [r4, #28]
   164e8:	and	r1, r5, r1
   164ec:	orr	r5, r1, #256	; 0x100
   164f0:	and	r1, r6, #8
   164f4:	and	r0, r0, #239	; 0xef
   164f8:	mov	r7, #0
   164fc:	orr	r0, r0, r1, lsl #1
   16500:	str	r7, [r4, #20]
   16504:	strb	r0, [r4, #28]
   16508:	mov	r0, r8
   1650c:	bl	115c8 <strlen@plt>
   16510:	mov	r2, r0
   16514:	mov	r0, r4
   16518:	mov	r1, r8
   1651c:	mov	r3, r5
   16520:	bl	153f0 <__assert_fail@plt+0x3ccc>
   16524:	cmp	r0, #16
   16528:	mov	r5, r0
   1652c:	movweq	r5, #8
   16530:	cmp	r5, #0
   16534:	bne	16550 <__assert_fail@plt+0x4e2c>
   16538:	mov	r0, r4
   1653c:	bl	1604c <__assert_fail@plt+0x4928>
   16540:	mov	r0, r7
   16544:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16548:	mov	r7, #12
   1654c:	b	16540 <__assert_fail@plt+0x4e1c>
   16550:	ldr	r0, [r4, #16]
   16554:	bl	132e4 <__assert_fail@plt+0x1bc0>
   16558:	str	r7, [r4, #16]
   1655c:	mov	r7, r5
   16560:	b	16540 <__assert_fail@plt+0x4e1c>
   16564:	push	{r4, r5, r6, r7, fp, lr}
   16568:	add	fp, sp, #16
   1656c:	cmp	r0, #17
   16570:	bcs	165e4 <__assert_fail@plt+0x4ec0>
   16574:	movw	r1, #15688	; 0x3d48
   16578:	mov	r4, r2
   1657c:	mov	r2, #5
   16580:	mov	r5, r3
   16584:	movt	r1, #2
   16588:	ldr	r0, [r1, r0, lsl #2]
   1658c:	movw	r1, #15304	; 0x3bc8
   16590:	movt	r1, #2
   16594:	add	r1, r1, r0
   16598:	mov	r0, #0
   1659c:	bl	114a8 <dcgettext@plt>
   165a0:	mov	r6, r0
   165a4:	bl	115c8 <strlen@plt>
   165a8:	add	r7, r0, #1
   165ac:	cmp	r5, #0
   165b0:	beq	165cc <__assert_fail@plt+0x4ea8>
   165b4:	cmp	r7, r5
   165b8:	mov	r2, r7
   165bc:	bhi	165d4 <__assert_fail@plt+0x4eb0>
   165c0:	mov	r0, r4
   165c4:	mov	r1, r6
   165c8:	bl	11460 <memcpy@plt>
   165cc:	mov	r0, r7
   165d0:	pop	{r4, r5, r6, r7, fp, pc}
   165d4:	sub	r2, r5, #1
   165d8:	mov	r0, #0
   165dc:	strb	r0, [r4, r2]
   165e0:	b	165c0 <__assert_fail@plt+0x4e9c>
   165e4:	bl	11700 <abort@plt>
   165e8:	push	{r4, r5, fp, lr}
   165ec:	add	fp, sp, #8
   165f0:	ldr	r5, [r0]
   165f4:	mov	r4, r0
   165f8:	cmp	r5, #0
   165fc:	beq	16628 <__assert_fail@plt+0x4f04>
   16600:	movw	r0, #0
   16604:	movw	r1, #0
   16608:	movt	r0, #0
   1660c:	movt	r1, #0
   16610:	orrs	r0, r1, r0
   16614:	beq	16620 <__assert_fail@plt+0x4efc>
   16618:	add	r0, r5, #136	; 0x88
   1661c:	bl	1140c <pthread_mutex_destroy@plt>
   16620:	mov	r0, r5
   16624:	bl	16650 <__assert_fail@plt+0x4f2c>
   16628:	mov	r5, #0
   1662c:	str	r5, [r4]
   16630:	str	r5, [r4, #4]
   16634:	ldr	r0, [r4, #16]
   16638:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1663c:	str	r5, [r4, #16]
   16640:	ldr	r0, [r4, #20]
   16644:	bl	132e4 <__assert_fail@plt+0x1bc0>
   16648:	str	r5, [r4, #20]
   1664c:	pop	{r4, r5, fp, pc}
   16650:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16654:	add	fp, sp, #24
   16658:	mov	r8, r0
   1665c:	ldr	r0, [r0]
   16660:	cmp	r0, #0
   16664:	beq	166ac <__assert_fail@plt+0x4f88>
   16668:	ldr	r1, [r8, #8]
   1666c:	cmp	r1, #0
   16670:	beq	166ac <__assert_fail@plt+0x4f88>
   16674:	bl	1863c <__assert_fail@plt+0x6f18>
   16678:	ldr	r0, [r8, #8]
   1667c:	cmp	r0, #2
   16680:	bcc	166ac <__assert_fail@plt+0x4f88>
   16684:	mov	r5, #1
   16688:	mov	r6, #8
   1668c:	ldr	r0, [r8]
   16690:	add	r0, r0, r6
   16694:	bl	1863c <__assert_fail@plt+0x6f18>
   16698:	ldr	r0, [r8, #8]
   1669c:	add	r5, r5, #1
   166a0:	add	r6, r6, #8
   166a4:	cmp	r5, r0
   166a8:	bcc	1668c <__assert_fail@plt+0x4f68>
   166ac:	ldr	r0, [r8, #12]
   166b0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   166b4:	ldr	r0, [r8, #8]
   166b8:	cmp	r0, #0
   166bc:	beq	16718 <__assert_fail@plt+0x4ff4>
   166c0:	mov	r5, #0
   166c4:	mov	r6, #8
   166c8:	ldr	r0, [r8, #24]
   166cc:	cmp	r0, #0
   166d0:	beq	166dc <__assert_fail@plt+0x4fb8>
   166d4:	ldr	r0, [r0, r6]
   166d8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   166dc:	ldr	r0, [r8, #28]
   166e0:	cmp	r0, #0
   166e4:	beq	166f0 <__assert_fail@plt+0x4fcc>
   166e8:	ldr	r0, [r0, r6]
   166ec:	bl	132e4 <__assert_fail@plt+0x1bc0>
   166f0:	ldr	r0, [r8, #20]
   166f4:	cmp	r0, #0
   166f8:	beq	16704 <__assert_fail@plt+0x4fe0>
   166fc:	ldr	r0, [r0, r6]
   16700:	bl	132e4 <__assert_fail@plt+0x1bc0>
   16704:	ldr	r0, [r8, #8]
   16708:	add	r5, r5, #1
   1670c:	add	r6, r6, #12
   16710:	cmp	r5, r0
   16714:	bcc	166c8 <__assert_fail@plt+0x4fa4>
   16718:	ldr	r0, [r8, #20]
   1671c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   16720:	ldr	r0, [r8, #24]
   16724:	bl	132e4 <__assert_fail@plt+0x1bc0>
   16728:	ldr	r0, [r8, #28]
   1672c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   16730:	ldr	r0, [r8]
   16734:	bl	132e4 <__assert_fail@plt+0x1bc0>
   16738:	ldr	r5, [r8, #32]
   1673c:	cmp	r5, #0
   16740:	beq	167a0 <__assert_fail@plt+0x507c>
   16744:	mov	r6, #0
   16748:	add	r0, r6, r6, lsl #1
   1674c:	ldr	r0, [r5, r0, lsl #2]!
   16750:	add	r7, r5, #8
   16754:	cmp	r0, #1
   16758:	blt	1677c <__assert_fail@plt+0x5058>
   1675c:	mov	r4, #0
   16760:	ldr	r0, [r7]
   16764:	ldr	r0, [r0, r4, lsl #2]
   16768:	bl	1866c <__assert_fail@plt+0x6f48>
   1676c:	ldr	r0, [r5]
   16770:	add	r4, r4, #1
   16774:	cmp	r4, r0
   16778:	blt	16760 <__assert_fail@plt+0x503c>
   1677c:	ldr	r0, [r7]
   16780:	bl	132e4 <__assert_fail@plt+0x1bc0>
   16784:	ldr	r0, [r8, #68]	; 0x44
   16788:	cmp	r6, r0
   1678c:	bcs	1679c <__assert_fail@plt+0x5078>
   16790:	ldr	r5, [r8, #32]
   16794:	add	r6, r6, #1
   16798:	b	16748 <__assert_fail@plt+0x5024>
   1679c:	ldr	r5, [r8, #32]
   167a0:	mov	r0, r5
   167a4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   167a8:	ldr	r0, [r8, #60]	; 0x3c
   167ac:	movw	r1, #15756	; 0x3d8c
   167b0:	movt	r1, #2
   167b4:	cmp	r0, r1
   167b8:	beq	167c0 <__assert_fail@plt+0x509c>
   167bc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   167c0:	ldr	r0, [r8, #132]	; 0x84
   167c4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   167c8:	mov	r0, r8
   167cc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   167d0:	b	132e4 <__assert_fail@plt+0x1bc0>
   167d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167d8:	add	fp, sp, #28
   167dc:	sub	sp, sp, #28
   167e0:	ldr	sl, [fp, #8]
   167e4:	mov	r7, #2
   167e8:	cmp	sl, #7
   167ec:	bhi	168c0 <__assert_fail@plt+0x519c>
   167f0:	mov	r5, r0
   167f4:	ldr	r0, [r0]
   167f8:	mov	r6, r3
   167fc:	mov	r9, r2
   16800:	mov	r4, r1
   16804:	tst	sl, #4
   16808:	str	r0, [sp, #24]
   1680c:	bne	16824 <__assert_fail@plt+0x5100>
   16810:	mov	r0, r4
   16814:	bl	115c8 <strlen@plt>
   16818:	mov	r7, r0
   1681c:	mov	r8, #0
   16820:	b	1682c <__assert_fail@plt+0x5108>
   16824:	ldr	r8, [r6]
   16828:	ldr	r7, [r6, #4]
   1682c:	movw	r0, #0
   16830:	movw	r1, #0
   16834:	movt	r0, #0
   16838:	movt	r1, #0
   1683c:	orrs	r0, r1, r0
   16840:	str	r0, [sp, #20]
   16844:	beq	16854 <__assert_fail@plt+0x5130>
   16848:	ldr	r0, [sp, #24]
   1684c:	add	r0, r0, #136	; 0x88
   16850:	bl	11448 <pthread_mutex_lock@plt>
   16854:	ldrb	r0, [r5, #28]
   16858:	tst	r0, #16
   1685c:	bne	16870 <__assert_fail@plt+0x514c>
   16860:	str	r7, [sp]
   16864:	stmib	sp, {r7, r9}
   16868:	str	r6, [sp, #12]
   1686c:	b	16884 <__assert_fail@plt+0x5160>
   16870:	mov	r0, #0
   16874:	str	r7, [sp]
   16878:	str	r7, [sp, #4]
   1687c:	str	r0, [sp, #8]
   16880:	str	r0, [sp, #12]
   16884:	mov	r0, r5
   16888:	mov	r1, r4
   1688c:	mov	r2, r7
   16890:	mov	r3, r8
   16894:	str	sl, [sp, #16]
   16898:	bl	168cc <__assert_fail@plt+0x51a8>
   1689c:	mov	r7, r0
   168a0:	ldr	r0, [sp, #20]
   168a4:	cmp	r0, #0
   168a8:	beq	168b8 <__assert_fail@plt+0x5194>
   168ac:	ldr	r0, [sp, #24]
   168b0:	add	r0, r0, #136	; 0x88
   168b4:	bl	113a0 <pthread_mutex_unlock@plt>
   168b8:	cmp	r7, #0
   168bc:	movwne	r7, #1
   168c0:	mov	r0, r7
   168c4:	sub	sp, fp, #28
   168c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168d0:	add	fp, sp, #28
   168d4:	sub	sp, sp, #436	; 0x1b4
   168d8:	ldr	r5, [r0]
   168dc:	str	r2, [sp, #80]	; 0x50
   168e0:	mov	r7, r1
   168e4:	mov	r6, r0
   168e8:	add	r0, sp, #112	; 0x70
   168ec:	mov	r1, #0
   168f0:	mov	r2, #136	; 0x88
   168f4:	mov	r4, r3
   168f8:	mov	r8, #0
   168fc:	bl	1161c <memset@plt>
   16900:	str	r5, [sp, #196]	; 0xc4
   16904:	ldr	r9, [fp, #16]
   16908:	ldr	ip, [fp, #8]
   1690c:	mov	r0, #0
   16910:	ldr	r1, [r6, #16]
   16914:	cmp	r1, #0
   16918:	beq	16934 <__assert_fail@plt+0x5210>
   1691c:	ldrb	r2, [r6, #28]
   16920:	and	r2, r2, #9
   16924:	cmp	r2, #8
   16928:	movne	r1, #0
   1692c:	subs	r0, r4, ip
   16930:	movne	r0, r1
   16934:	ldr	r2, [r6, #24]
   16938:	ldr	r1, [r6, #8]
   1693c:	mov	sl, #1
   16940:	mvn	r3, r2
   16944:	cmp	r2, r9
   16948:	addcc	r8, r3, r9
   1694c:	cmp	r1, #0
   16950:	beq	1809c <__assert_fail@plt+0x6978>
   16954:	ldr	r1, [r5, #36]	; 0x24
   16958:	cmp	r1, #0
   1695c:	ldrne	r2, [r5, #40]	; 0x28
   16960:	cmpne	r2, #0
   16964:	beq	1809c <__assert_fail@plt+0x6978>
   16968:	ldr	r3, [r5, #44]	; 0x2c
   1696c:	cmp	r3, #0
   16970:	strne	r7, [sp, #104]	; 0x68
   16974:	ldrne	r7, [r5, #48]	; 0x30
   16978:	cmpne	r7, #0
   1697c:	beq	1809c <__assert_fail@plt+0x6978>
   16980:	ldr	r1, [r1, #8]
   16984:	ldr	r7, [r6, #20]
   16988:	str	r0, [sp, #100]	; 0x64
   1698c:	cmp	r1, #0
   16990:	str	r7, [sp, #108]	; 0x6c
   16994:	beq	169a0 <__assert_fail@plt+0x527c>
   16998:	ldr	lr, [sp, #104]	; 0x68
   1699c:	b	169b0 <__assert_fail@plt+0x528c>
   169a0:	ldr	r1, [r2, #8]
   169a4:	ldr	lr, [sp, #104]	; 0x68
   169a8:	cmp	r1, #0
   169ac:	beq	17904 <__assert_fail@plt+0x61e0>
   169b0:	mov	r0, ip
   169b4:	str	r0, [sp, #92]	; 0x5c
   169b8:	subs	r9, r9, r8
   169bc:	mov	r0, #1
   169c0:	str	r0, [sp, #60]	; 0x3c
   169c4:	bne	169d8 <__assert_fail@plt+0x52b4>
   169c8:	ldr	r0, [r5, #76]	; 0x4c
   169cc:	cmp	r0, #0
   169d0:	movwne	r0, #1
   169d4:	str	r0, [sp, #60]	; 0x3c
   169d8:	ldr	r0, [r6, #12]
   169dc:	ldr	r2, [r5, #92]	; 0x5c
   169e0:	ldr	r7, [sp, #108]	; 0x6c
   169e4:	ldr	ip, [r5, #8]
   169e8:	str	r7, [sp, #176]	; 0xb0
   169ec:	str	lr, [sp, #112]	; 0x70
   169f0:	str	r2, [sp, #192]	; 0xc0
   169f4:	ubfx	r3, r0, #22, #1
   169f8:	and	r0, r0, #4194304	; 0x400000
   169fc:	orrs	r0, r7, r0
   16a00:	ldr	r7, [sp, #80]	; 0x50
   16a04:	strb	r3, [sp, #184]	; 0xb8
   16a08:	movwne	r0, #1
   16a0c:	strb	r0, [sp, #187]	; 0xbb
   16a10:	add	r0, sp, #112	; 0x70
   16a14:	ldrb	r1, [r5, #88]	; 0x58
   16a18:	add	r3, r0, #44	; 0x2c
   16a1c:	vdup.32	q8, r7
   16a20:	vst1.32	{d16-d17}, [r3]
   16a24:	ubfx	r3, r1, #3, #1
   16a28:	strb	r3, [sp, #186]	; 0xba
   16a2c:	ubfx	r1, r1, #2, #1
   16a30:	strb	r1, [sp, #185]	; 0xb9
   16a34:	add	r1, ip, #1
   16a38:	cmp	r2, r1
   16a3c:	movgt	r1, r2
   16a40:	add	r2, r7, #1
   16a44:	cmp	r2, r1
   16a48:	movlt	r1, r2
   16a4c:	bl	18788 <__assert_fail@plt+0x7064>
   16a50:	cmp	r0, #0
   16a54:	str	r5, [sp, #96]	; 0x60
   16a58:	bne	180c0 <__assert_fail@plt+0x699c>
   16a5c:	add	r1, r5, #96	; 0x60
   16a60:	str	r9, [sp, #84]	; 0x54
   16a64:	str	r8, [sp, #32]
   16a68:	ldr	r3, [fp, #24]
   16a6c:	ldr	r0, [fp, #12]
   16a70:	str	r1, [sp, #180]	; 0xb4
   16a74:	ldrb	r1, [r5, #88]	; 0x58
   16a78:	ubfx	r1, r1, #4, #1
   16a7c:	ldr	r9, [sp, #104]	; 0x68
   16a80:	strb	r1, [sp, #190]	; 0xbe
   16a84:	mov	r1, #0
   16a88:	ldrb	r2, [sp, #187]	; 0xbb
   16a8c:	cmp	r2, #0
   16a90:	bne	16aa8 <__assert_fail@plt+0x5384>
   16a94:	str	r9, [sp, #116]	; 0x74
   16a98:	ldr	r1, [r5, #92]	; 0x5c
   16a9c:	cmp	r1, #1
   16aa0:	ldr	r1, [sp, #80]	; 0x50
   16aa4:	movwgt	r1, #0
   16aa8:	str	r0, [sp, #168]	; 0xa8
   16aac:	str	r1, [sp, #144]	; 0x90
   16ab0:	str	r1, [sp, #140]	; 0x8c
   16ab4:	str	r0, [sp, #164]	; 0xa4
   16ab8:	str	r6, [sp, #68]	; 0x44
   16abc:	ldr	sl, [sp, #108]	; 0x6c
   16ac0:	ldrb	r0, [r6, #28]
   16ac4:	ldr	r6, [sp, #100]	; 0x64
   16ac8:	lsr	r0, r0, #7
   16acc:	strb	r0, [sp, #189]	; 0xbd
   16ad0:	mvn	r0, #0
   16ad4:	ldr	r8, [r5, #76]	; 0x4c
   16ad8:	str	r0, [sp, #204]	; 0xcc
   16adc:	str	r3, [sp, #200]	; 0xc8
   16ae0:	lsl	r5, r8, #1
   16ae4:	cmp	r8, #1
   16ae8:	blt	16b3c <__assert_fail@plt+0x5418>
   16aec:	movw	r0, #43690	; 0xaaaa
   16af0:	mov	r2, #12
   16af4:	movt	r0, #2730	; 0xaaa
   16af8:	cmp	r5, r0
   16afc:	bhi	18060 <__assert_fail@plt+0x693c>
   16b00:	add	r0, r8, r8, lsl #1
   16b04:	lsl	r0, r0, #4
   16b08:	bl	22898 <__assert_fail@plt+0x11174>
   16b0c:	mov	r6, r0
   16b10:	str	r0, [sp, #228]	; 0xe4
   16b14:	lsl	r0, r8, #3
   16b18:	bl	22898 <__assert_fail@plt+0x11174>
   16b1c:	cmp	r0, #0
   16b20:	str	r0, [sp, #244]	; 0xf4
   16b24:	beq	180e8 <__assert_fail@plt+0x69c4>
   16b28:	cmp	r6, #0
   16b2c:	ldr	sl, [sp, #108]	; 0x6c
   16b30:	ldr	r6, [sp, #100]	; 0x64
   16b34:	mov	r2, #12
   16b38:	beq	18060 <__assert_fail@plt+0x693c>
   16b3c:	mov	r0, #1
   16b40:	str	r5, [sp, #240]	; 0xf0
   16b44:	str	r0, [sp, #232]	; 0xe8
   16b48:	ldr	r0, [sp, #84]	; 0x54
   16b4c:	str	r5, [sp, #224]	; 0xe0
   16b50:	cmp	r0, #1
   16b54:	bhi	16b68 <__assert_fail@plt+0x5444>
   16b58:	ldr	r0, [sp, #96]	; 0x60
   16b5c:	ldrb	r0, [r0, #88]	; 0x58
   16b60:	tst	r0, #2
   16b64:	beq	16b98 <__assert_fail@plt+0x5474>
   16b68:	ldr	r0, [sp, #148]	; 0x94
   16b6c:	mov	r2, #12
   16b70:	cmn	r0, #-1073741822	; 0xc0000002
   16b74:	bhi	18060 <__assert_fail@plt+0x693c>
   16b78:	mov	r1, #4
   16b7c:	add	r0, r1, r0, lsl #2
   16b80:	bl	22898 <__assert_fail@plt+0x11174>
   16b84:	ldr	r6, [sp, #100]	; 0x64
   16b88:	mov	r2, #12
   16b8c:	cmp	r0, #0
   16b90:	str	r0, [sp, #212]	; 0xd4
   16b94:	beq	18060 <__assert_fail@plt+0x693c>
   16b98:	ldr	r1, [fp, #24]
   16b9c:	ldr	r2, [sp, #92]	; 0x5c
   16ba0:	str	r4, [fp, #-212]	; 0xffffff2c
   16ba4:	mov	r0, #4
   16ba8:	mov	r8, #1
   16bac:	mov	r7, r4
   16bb0:	tst	r1, #1
   16bb4:	mov	r1, #4
   16bb8:	mov	r5, r2
   16bbc:	movweq	r1, #6
   16bc0:	cmp	r2, r4
   16bc4:	str	r1, [sp, #172]	; 0xac
   16bc8:	ldr	r1, [sp, #96]	; 0x60
   16bcc:	mvnlt	r8, #0
   16bd0:	movlt	r5, r4
   16bd4:	movlt	r7, r2
   16bd8:	cmp	r6, #0
   16bdc:	ldr	r1, [r1, #92]	; 0x5c
   16be0:	str	r1, [sp, #64]	; 0x40
   16be4:	beq	16c28 <__assert_fail@plt+0x5504>
   16be8:	cmp	r1, #1
   16bec:	beq	16c0c <__assert_fail@plt+0x54e8>
   16bf0:	ldr	r0, [sp, #68]	; 0x44
   16bf4:	ldr	r0, [r0, #12]
   16bf8:	and	r0, r0, #4194304	; 0x400000
   16bfc:	orr	r0, sl, r0
   16c00:	clz	r0, r0
   16c04:	lsr	r0, r0, #5
   16c08:	lsl	r0, r0, #2
   16c0c:	cmp	sl, #0
   16c10:	mov	r1, sl
   16c14:	movwne	r1, #1
   16c18:	cmp	r2, r4
   16c1c:	orrge	r1, r1, #2
   16c20:	orr	r0, r1, r0
   16c24:	b	16c2c <__assert_fail@plt+0x5508>
   16c28:	mov	r0, #8
   16c2c:	add	r1, sp, #112	; 0x70
   16c30:	cmp	r2, r4
   16c34:	str	r7, [sp, #56]	; 0x38
   16c38:	str	r8, [sp, #76]	; 0x4c
   16c3c:	str	r5, [sp, #72]	; 0x48
   16c40:	add	r1, r1, #32
   16c44:	str	r1, [sp, #28]
   16c48:	sub	r1, fp, #212	; 0xd4
   16c4c:	movwlt	r1, #0
   16c50:	cmp	r1, #0
   16c54:	str	r1, [sp, #48]	; 0x30
   16c58:	movwne	r1, #1
   16c5c:	str	r1, [sp, #52]	; 0x34
   16c60:	sub	r1, fp, #208	; 0xd0
   16c64:	add	r1, r1, #16
   16c68:	str	r1, [sp, #36]	; 0x24
   16c6c:	sub	r1, r0, #4
   16c70:	str	r1, [sp, #44]	; 0x2c
   16c74:	cmp	r1, #4
   16c78:	bhi	16d60 <__assert_fail@plt+0x563c>
   16c7c:	ldr	r2, [fp, #24]
   16c80:	add	r0, pc, #0
   16c84:	ldr	pc, [r0, r1, lsl #2]
   16c88:	muleq	r1, ip, ip
   16c8c:	muleq	r1, ip, ip
   16c90:	andeq	r6, r1, r4, lsl sp
   16c94:	andeq	r6, r1, ip, ror #25
   16c98:	andeq	r6, r1, ip, ror #27
   16c9c:	mov	r2, #1
   16ca0:	cmp	r4, r7
   16ca4:	blt	18060 <__assert_fail@plt+0x693c>
   16ca8:	ldr	r1, [sp, #80]	; 0x50
   16cac:	cmp	r4, r1
   16cb0:	mov	r0, #0
   16cb4:	ldrblt	r0, [r9, r4]
   16cb8:	cmp	sl, #0
   16cbc:	ldrbne	r0, [sl, r0]
   16cc0:	ldrb	r0, [r6, r0]
   16cc4:	cmp	r0, #0
   16cc8:	bne	16de8 <__assert_fail@plt+0x56c4>
   16ccc:	sub	r0, r4, #1
   16cd0:	cmp	r4, r7
   16cd4:	mov	r4, r0
   16cd8:	str	r0, [fp, #-212]	; 0xffffff2c
   16cdc:	bgt	16cac <__assert_fail@plt+0x5588>
   16ce0:	b	18060 <__assert_fail@plt+0x693c>
   16ce4:	add	r4, r4, #1
   16ce8:	str	r4, [fp, #-212]	; 0xffffff2c
   16cec:	cmp	r4, r5
   16cf0:	bge	16d2c <__assert_fail@plt+0x5608>
   16cf4:	ldrb	r0, [r9, r4]
   16cf8:	ldrb	r0, [sl, r0]
   16cfc:	ldrb	r0, [r6, r0]
   16d00:	cmp	r0, #0
   16d04:	beq	16ce4 <__assert_fail@plt+0x55c0>
   16d08:	b	16d2c <__assert_fail@plt+0x5608>
   16d0c:	add	r4, r4, #1
   16d10:	str	r4, [fp, #-212]	; 0xffffff2c
   16d14:	cmp	r4, r5
   16d18:	bge	16d2c <__assert_fail@plt+0x5608>
   16d1c:	ldrb	r0, [r9, r4]
   16d20:	ldrb	r0, [r6, r0]
   16d24:	cmp	r0, #0
   16d28:	beq	16d0c <__assert_fail@plt+0x55e8>
   16d2c:	cmp	r4, r5
   16d30:	bne	16dec <__assert_fail@plt+0x56c8>
   16d34:	ldr	r1, [sp, #80]	; 0x50
   16d38:	mov	r0, #0
   16d3c:	mov	r4, r5
   16d40:	cmp	r5, r1
   16d44:	ldrblt	r0, [r9, r5]
   16d48:	cmp	sl, #0
   16d4c:	ldrbne	r0, [sl, r0]
   16d50:	ldrb	r0, [r6, r0]
   16d54:	cmp	r0, #0
   16d58:	bne	16dec <__assert_fail@plt+0x56c8>
   16d5c:	b	180f0 <__assert_fail@plt+0x69cc>
   16d60:	ldr	r0, [sp, #136]	; 0x88
   16d64:	ldr	r2, [sp, #144]	; 0x90
   16d68:	sub	r1, r4, r0
   16d6c:	cmp	r1, r2
   16d70:	bcs	16db8 <__assert_fail@plt+0x5694>
   16d74:	ldr	r3, [sp, #140]	; 0x8c
   16d78:	mov	r2, #0
   16d7c:	cmp	r1, r3
   16d80:	bcs	16d8c <__assert_fail@plt+0x5668>
   16d84:	ldr	r2, [sp, #116]	; 0x74
   16d88:	ldrb	r2, [r2, r1]
   16d8c:	ldrb	r1, [r6, r2]
   16d90:	cmp	r1, #0
   16d94:	bne	16de8 <__assert_fail@plt+0x56c4>
   16d98:	add	r4, r4, r8
   16d9c:	mov	r2, #1
   16da0:	cmp	r4, r7
   16da4:	str	r4, [fp, #-212]	; 0xffffff2c
   16da8:	blt	18060 <__assert_fail@plt+0x693c>
   16dac:	cmp	r4, r5
   16db0:	ble	16d64 <__assert_fail@plt+0x5640>
   16db4:	b	18060 <__assert_fail@plt+0x693c>
   16db8:	ldr	r2, [fp, #24]
   16dbc:	add	r0, sp, #112	; 0x70
   16dc0:	mov	r1, r4
   16dc4:	bl	1d67c <__assert_fail@plt+0xbf58>
   16dc8:	cmp	r0, #0
   16dcc:	bne	180c0 <__assert_fail@plt+0x699c>
   16dd0:	ldr	r0, [sp, #136]	; 0x88
   16dd4:	ldr	r4, [fp, #-212]	; 0xffffff2c
   16dd8:	ldr	r7, [sp, #56]	; 0x38
   16ddc:	ldr	r6, [sp, #100]	; 0x64
   16de0:	sub	r1, r4, r0
   16de4:	b	16d74 <__assert_fail@plt+0x5650>
   16de8:	ldr	r2, [fp, #24]
   16dec:	add	r0, sp, #112	; 0x70
   16df0:	mov	r1, r4
   16df4:	bl	1d67c <__assert_fail@plt+0xbf58>
   16df8:	cmp	r0, #0
   16dfc:	bne	180c0 <__assert_fail@plt+0x699c>
   16e00:	ldr	r0, [sp, #64]	; 0x40
   16e04:	cmp	r0, #1
   16e08:	ldrne	r0, [sp, #140]	; 0x8c
   16e0c:	cmpne	r0, #0
   16e10:	bne	16e48 <__assert_fail@plt+0x5724>
   16e14:	mov	r0, #0
   16e18:	str	r0, [sp, #220]	; 0xdc
   16e1c:	str	r0, [sp, #232]	; 0xe8
   16e20:	str	r0, [sp, #216]	; 0xd8
   16e24:	str	r0, [fp, #-64]	; 0xffffffc0
   16e28:	ldr	r4, [sp, #196]	; 0xc4
   16e2c:	ldr	r7, [sp, #152]	; 0x98
   16e30:	ldr	r8, [r4, #36]	; 0x24
   16e34:	ldrsb	r0, [r8, #52]	; 0x34
   16e38:	cmn	r0, #1
   16e3c:	ble	16e5c <__assert_fail@plt+0x5738>
   16e40:	ldr	r5, [sp, #52]	; 0x34
   16e44:	b	16ec0 <__assert_fail@plt+0x579c>
   16e48:	ldr	r0, [sp, #120]	; 0x78
   16e4c:	ldr	r0, [r0]
   16e50:	cmn	r0, #1
   16e54:	bne	16e14 <__assert_fail@plt+0x56f0>
   16e58:	b	17648 <__assert_fail@plt+0x5f24>
   16e5c:	ldr	r2, [sp, #200]	; 0xc8
   16e60:	sub	r1, r7, #1
   16e64:	add	r0, sp, #112	; 0x70
   16e68:	bl	1deb4 <__assert_fail@plt+0xc790>
   16e6c:	ldr	r5, [sp, #52]	; 0x34
   16e70:	tst	r0, #1
   16e74:	bne	16ebc <__assert_fail@plt+0x5798>
   16e78:	mov	r3, r0
   16e7c:	cmp	r0, #0
   16e80:	beq	16ec0 <__assert_fail@plt+0x579c>
   16e84:	ands	r1, r3, #2
   16e88:	and	r0, r3, #4
   16e8c:	cmpne	r0, #0
   16e90:	bne	17678 <__assert_fail@plt+0x5f54>
   16e94:	cmp	r1, #0
   16e98:	bne	17680 <__assert_fail@plt+0x5f5c>
   16e9c:	cmp	r0, #0
   16ea0:	beq	16ec0 <__assert_fail@plt+0x579c>
   16ea4:	ldr	r2, [r8, #40]	; 0x28
   16ea8:	sub	r0, fp, #64	; 0x40
   16eac:	mov	r1, r4
   16eb0:	bl	1d23c <__assert_fail@plt+0xbb18>
   16eb4:	mov	r8, r0
   16eb8:	b	16ec0 <__assert_fail@plt+0x579c>
   16ebc:	ldr	r8, [r4, #40]	; 0x28
   16ec0:	cmp	r8, #0
   16ec4:	beq	180e8 <__assert_fail@plt+0x69c4>
   16ec8:	ldr	r0, [sp, #212]	; 0xd4
   16ecc:	mov	r6, r5
   16ed0:	cmp	r0, #0
   16ed4:	beq	16eec <__assert_fail@plt+0x57c8>
   16ed8:	str	r8, [r0, r7, lsl #2]
   16edc:	mov	r6, r5
   16ee0:	ldr	r0, [r4, #76]	; 0x4c
   16ee4:	cmp	r0, #0
   16ee8:	bne	176a4 <__assert_fail@plt+0x5f80>
   16eec:	ldrb	r0, [r8, #52]	; 0x34
   16ef0:	tst	r0, #16
   16ef4:	bne	17688 <__assert_fail@plt+0x5f64>
   16ef8:	mvn	r0, #0
   16efc:	mov	r2, #0
   16f00:	str	r0, [sp, #88]	; 0x58
   16f04:	ldr	r0, [sp, #152]	; 0x98
   16f08:	ldr	r1, [sp, #168]	; 0xa8
   16f0c:	cmp	r1, r0
   16f10:	ble	17328 <__assert_fail@plt+0x5c04>
   16f14:	ldr	r5, [sp, #48]	; 0x30
   16f18:	str	r2, [sp, #40]	; 0x28
   16f1c:	ldr	r2, [sp, #148]	; 0x94
   16f20:	ldr	r1, [sp, #160]	; 0xa0
   16f24:	str	r7, [sp, #92]	; 0x5c
   16f28:	add	r7, r0, #1
   16f2c:	mov	r9, r6
   16f30:	mov	r6, r8
   16f34:	cmp	r7, r2
   16f38:	blt	16f44 <__assert_fail@plt+0x5820>
   16f3c:	cmp	r2, r1
   16f40:	blt	172e0 <__assert_fail@plt+0x5bbc>
   16f44:	ldr	r2, [sp, #140]	; 0x8c
   16f48:	cmp	r7, r2
   16f4c:	blt	16f58 <__assert_fail@plt+0x5834>
   16f50:	cmp	r2, r1
   16f54:	blt	172e0 <__assert_fail@plt+0x5bbc>
   16f58:	ldrb	r0, [r6, #52]	; 0x34
   16f5c:	tst	r0, #32
   16f60:	bne	17108 <__assert_fail@plt+0x59e4>
   16f64:	ldr	r1, [sp, #152]	; 0x98
   16f68:	ldr	r0, [sp, #116]	; 0x74
   16f6c:	add	r2, r1, #1
   16f70:	str	r2, [sp, #152]	; 0x98
   16f74:	ldrb	r4, [r0, r1]
   16f78:	ldr	r0, [r6, #44]	; 0x2c
   16f7c:	cmp	r0, #0
   16f80:	bne	16fac <__assert_fail@plt+0x5888>
   16f84:	ldr	r8, [r6, #48]	; 0x30
   16f88:	cmp	r8, #0
   16f8c:	bne	172fc <__assert_fail@plt+0x5bd8>
   16f90:	ldr	r0, [sp, #196]	; 0xc4
   16f94:	mov	r1, r6
   16f98:	bl	1ff00 <__assert_fail@plt+0xe7dc>
   16f9c:	cmp	r0, #0
   16fa0:	bne	16f78 <__assert_fail@plt+0x5854>
   16fa4:	mov	r0, #12
   16fa8:	b	1731c <__assert_fail@plt+0x5bf8>
   16fac:	ldr	r8, [r0, r4, lsl #2]
   16fb0:	ldr	r0, [sp, #212]	; 0xd4
   16fb4:	cmp	r0, #0
   16fb8:	beq	16fd0 <__assert_fail@plt+0x58ac>
   16fbc:	sub	r0, fp, #64	; 0x40
   16fc0:	add	r1, sp, #112	; 0x70
   16fc4:	mov	r2, r8
   16fc8:	bl	1e86c <__assert_fail@plt+0xd148>
   16fcc:	mov	r8, r0
   16fd0:	cmp	r8, #0
   16fd4:	beq	17010 <__assert_fail@plt+0x58ec>
   16fd8:	sub	r0, r6, r8
   16fdc:	mov	r6, r9
   16fe0:	clz	r0, r0
   16fe4:	lsr	r0, r0, #5
   16fe8:	ands	r6, r9, r0
   16fec:	ldr	r0, [sp, #92]	; 0x5c
   16ff0:	movne	r0, r7
   16ff4:	mov	r7, r0
   16ff8:	ldrb	r0, [r8, #52]	; 0x34
   16ffc:	tst	r0, #16
   17000:	bne	1709c <__assert_fail@plt+0x5978>
   17004:	ldr	r9, [sp, #104]	; 0x68
   17008:	ldr	sl, [sp, #108]	; 0x6c
   1700c:	b	170e8 <__assert_fail@plt+0x59c4>
   17010:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17014:	cmp	r0, #0
   17018:	bne	180e8 <__assert_fail@plt+0x69c4>
   1701c:	ldr	r0, [sp, #40]	; 0x28
   17020:	ldr	r1, [sp, #60]	; 0x3c
   17024:	cmp	r0, #0
   17028:	mvn	r1, r1
   1702c:	movwne	r0, #1
   17030:	tst	r1, r0
   17034:	bne	17330 <__assert_fail@plt+0x5c0c>
   17038:	ldr	r0, [sp, #212]	; 0xd4
   1703c:	cmp	r0, #0
   17040:	beq	17330 <__assert_fail@plt+0x5c0c>
   17044:	ldr	r2, [sp, #152]	; 0x98
   17048:	ldr	r1, [sp, #216]	; 0xd8
   1704c:	add	r0, r0, #4
   17050:	cmp	r2, r1
   17054:	bge	17330 <__assert_fail@plt+0x5c0c>
   17058:	add	r3, r2, #1
   1705c:	str	r3, [sp, #152]	; 0x98
   17060:	ldr	r2, [r0, r2, lsl #2]
   17064:	cmp	r2, #0
   17068:	mov	r2, r3
   1706c:	beq	17050 <__assert_fail@plt+0x592c>
   17070:	sub	r0, fp, #64	; 0x40
   17074:	add	r1, sp, #112	; 0x70
   17078:	mov	r2, #0
   1707c:	bl	1e86c <__assert_fail@plt+0xd148>
   17080:	cmp	r0, #0
   17084:	mov	r8, r0
   17088:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   1708c:	cmpeq	r0, #0
   17090:	bne	170fc <__assert_fail@plt+0x59d8>
   17094:	ldr	r0, [sp, #212]	; 0xd4
   17098:	b	17044 <__assert_fail@plt+0x5920>
   1709c:	ldr	r9, [sp, #104]	; 0x68
   170a0:	ldr	sl, [sp, #108]	; 0x6c
   170a4:	sxtb	r0, r0
   170a8:	cmn	r0, #1
   170ac:	bgt	170c8 <__assert_fail@plt+0x59a4>
   170b0:	ldr	r2, [sp, #152]	; 0x98
   170b4:	add	r0, sp, #112	; 0x70
   170b8:	mov	r1, r8
   170bc:	bl	1dd4c <__assert_fail@plt+0xc628>
   170c0:	cmp	r0, #0
   170c4:	beq	170e8 <__assert_fail@plt+0x59c4>
   170c8:	ldr	r0, [sp, #152]	; 0x98
   170cc:	str	r0, [sp, #88]	; 0x58
   170d0:	ldr	r0, [sp, #60]	; 0x3c
   170d4:	cmp	r0, #0
   170d8:	beq	17350 <__assert_fail@plt+0x5c2c>
   170dc:	mov	r5, #0
   170e0:	mov	r0, #1
   170e4:	str	r0, [sp, #40]	; 0x28
   170e8:	ldr	r0, [sp, #152]	; 0x98
   170ec:	ldr	r1, [sp, #168]	; 0xa8
   170f0:	cmp	r1, r0
   170f4:	bgt	16f1c <__assert_fail@plt+0x57f8>
   170f8:	b	1733c <__assert_fail@plt+0x5c18>
   170fc:	cmp	r8, #0
   17100:	bne	16fd8 <__assert_fail@plt+0x58b4>
   17104:	b	17330 <__assert_fail@plt+0x5c0c>
   17108:	ldr	r0, [r6, #8]
   1710c:	cmp	r0, #1
   17110:	blt	172d4 <__assert_fail@plt+0x5bb0>
   17114:	ldr	sl, [sp, #196]	; 0xc4
   17118:	mov	r4, #0
   1711c:	str	sl, [sp, #20]
   17120:	ldr	r0, [r6, #12]
   17124:	ldr	r1, [r0, r4, lsl #2]
   17128:	ldr	r0, [sl]
   1712c:	add	r0, r0, r1, lsl #3
   17130:	ldr	r8, [r0, #4]
   17134:	tst	r8, #1048576	; 0x100000
   17138:	beq	172c4 <__assert_fail@plt+0x5ba0>
   1713c:	movw	r0, #65280	; 0xff00
   17140:	ldr	r3, [sp, #152]	; 0x98
   17144:	str	r1, [sp, #24]
   17148:	movt	r0, #3
   1714c:	tst	r8, r0
   17150:	beq	171b4 <__assert_fail@plt+0x5a90>
   17154:	ldr	r2, [sp, #200]	; 0xc8
   17158:	add	r0, sp, #112	; 0x70
   1715c:	mov	r1, r3
   17160:	mov	sl, r3
   17164:	bl	1deb4 <__assert_fail@plt+0xc790>
   17168:	mov	r3, sl
   1716c:	ldr	r1, [sp, #24]
   17170:	ldr	sl, [sp, #20]
   17174:	and	r2, r0, #1
   17178:	tst	r8, #1024	; 0x400
   1717c:	beq	17188 <__assert_fail@plt+0x5a64>
   17180:	cmp	r2, #0
   17184:	beq	172c4 <__assert_fail@plt+0x5ba0>
   17188:	tst	r8, #2048	; 0x800
   1718c:	cmpne	r2, #0
   17190:	bne	172c4 <__assert_fail@plt+0x5ba0>
   17194:	tst	r8, #8192	; 0x2000
   17198:	beq	171a4 <__assert_fail@plt+0x5a80>
   1719c:	ands	r2, r0, #2
   171a0:	beq	172c4 <__assert_fail@plt+0x5ba0>
   171a4:	tst	r8, #32768	; 0x8000
   171a8:	beq	171b4 <__assert_fail@plt+0x5a90>
   171ac:	ands	r0, r0, #8
   171b0:	beq	172c4 <__assert_fail@plt+0x5ba0>
   171b4:	mov	r0, sl
   171b8:	add	r2, sp, #112	; 0x70
   171bc:	bl	1fad4 <__assert_fail@plt+0xe3b0>
   171c0:	cmp	r0, #0
   171c4:	beq	172c4 <__assert_fail@plt+0x5ba0>
   171c8:	ldr	r1, [sp, #152]	; 0x98
   171cc:	ldr	r2, [sp, #232]	; 0xe8
   171d0:	cmp	r2, r0
   171d4:	add	r8, r1, r0
   171d8:	movlt	r2, r0
   171dc:	add	r0, sp, #112	; 0x70
   171e0:	mov	r1, r8
   171e4:	str	r2, [sp, #232]	; 0xe8
   171e8:	bl	1ec50 <__assert_fail@plt+0xd52c>
   171ec:	cmp	r0, #0
   171f0:	str	r0, [fp, #-48]	; 0xffffffd0
   171f4:	bne	1731c <__assert_fail@plt+0x5bf8>
   171f8:	ldr	r0, [sp, #212]	; 0xd4
   171fc:	ldr	r2, [sp, #24]
   17200:	ldr	r1, [sl, #24]
   17204:	str	r4, [sp, #16]
   17208:	str	r8, [sp, #12]
   1720c:	ldr	r3, [r0, r8, lsl #2]
   17210:	ldr	r0, [sl, #12]
   17214:	ldr	r0, [r0, r2, lsl #2]
   17218:	cmp	r3, #0
   1721c:	str	r3, [sp, #8]
   17220:	add	r0, r0, r0, lsl #1
   17224:	add	r2, r1, r0, lsl #2
   17228:	beq	1724c <__assert_fail@plt+0x5b28>
   1722c:	ldr	r1, [r3, #40]	; 0x28
   17230:	sub	r4, fp, #208	; 0xd0
   17234:	mov	r0, r4
   17238:	bl	1e9c0 <__assert_fail@plt+0xd29c>
   1723c:	cmp	r0, #0
   17240:	str	r0, [fp, #-48]	; 0xffffffd0
   17244:	beq	17260 <__assert_fail@plt+0x5b3c>
   17248:	b	1731c <__assert_fail@plt+0x5bf8>
   1724c:	vldr	d16, [r2]
   17250:	ldr	r0, [r2, #8]
   17254:	sub	r4, fp, #208	; 0xd0
   17258:	str	r0, [fp, #-200]	; 0xffffff38
   1725c:	vstr	d16, [fp, #-208]	; 0xffffff30
   17260:	ldr	r8, [sp, #12]
   17264:	ldr	r2, [sp, #200]	; 0xc8
   17268:	add	r0, sp, #112	; 0x70
   1726c:	sub	r1, r8, #1
   17270:	bl	1deb4 <__assert_fail@plt+0xc790>
   17274:	mov	r3, r0
   17278:	sub	r0, fp, #48	; 0x30
   1727c:	mov	r1, sl
   17280:	mov	r2, r4
   17284:	bl	1d23c <__assert_fail@plt+0xbb18>
   17288:	ldr	r1, [sp, #212]	; 0xd4
   1728c:	str	r0, [r1, r8, lsl #2]
   17290:	ldr	r0, [sp, #8]
   17294:	cmp	r0, #0
   17298:	beq	172a4 <__assert_fail@plt+0x5b80>
   1729c:	ldr	r0, [fp, #-200]	; 0xffffff38
   172a0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   172a4:	ldr	r0, [sp, #212]	; 0xd4
   172a8:	ldr	r4, [sp, #16]
   172ac:	ldr	r0, [r0, r8, lsl #2]
   172b0:	cmp	r0, #0
   172b4:	bne	172c4 <__assert_fail@plt+0x5ba0>
   172b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   172bc:	cmp	r0, #0
   172c0:	bne	1731c <__assert_fail@plt+0x5bf8>
   172c4:	ldr	r0, [r6, #8]
   172c8:	add	r4, r4, #1
   172cc:	cmp	r4, r0
   172d0:	blt	17120 <__assert_fail@plt+0x59fc>
   172d4:	mov	r0, #0
   172d8:	str	r0, [fp, #-64]	; 0xffffffc0
   172dc:	b	16f64 <__assert_fail@plt+0x5840>
   172e0:	add	r1, r0, #2
   172e4:	add	r0, sp, #112	; 0x70
   172e8:	bl	1e794 <__assert_fail@plt+0xd070>
   172ec:	cmp	r0, #0
   172f0:	str	r0, [fp, #-64]	; 0xffffffc0
   172f4:	beq	16f58 <__assert_fail@plt+0x5834>
   172f8:	b	180e8 <__assert_fail@plt+0x69c4>
   172fc:	ldr	r0, [sp, #152]	; 0x98
   17300:	ldr	r2, [sp, #200]	; 0xc8
   17304:	sub	r1, r0, #1
   17308:	add	r0, sp, #112	; 0x70
   1730c:	bl	1deb4 <__assert_fail@plt+0xc790>
   17310:	bfi	r4, r0, #8, #1
   17314:	ldr	r8, [r8, r4, lsl #2]
   17318:	b	16fb0 <__assert_fail@plt+0x588c>
   1731c:	mov	r8, #0
   17320:	str	r0, [fp, #-64]	; 0xffffffc0
   17324:	b	16fb0 <__assert_fail@plt+0x588c>
   17328:	ldr	r5, [sp, #48]	; 0x30
   1732c:	b	1733c <__assert_fail@plt+0x5c18>
   17330:	ldr	r9, [sp, #104]	; 0x68
   17334:	ldr	sl, [sp, #108]	; 0x6c
   17338:	ldr	r7, [sp, #92]	; 0x5c
   1733c:	cmp	r5, #0
   17340:	beq	17350 <__assert_fail@plt+0x5c2c>
   17344:	ldr	r0, [r5]
   17348:	add	r0, r0, r7
   1734c:	str	r0, [r5]
   17350:	ldr	r8, [sp, #76]	; 0x4c
   17354:	ldr	r5, [sp, #72]	; 0x48
   17358:	ldr	r7, [sp, #88]	; 0x58
   1735c:	cmn	r7, #1
   17360:	beq	17640 <__assert_fail@plt+0x5f1c>
   17364:	mov	r2, #12
   17368:	cmn	r7, #2
   1736c:	beq	18060 <__assert_fail@plt+0x693c>
   17370:	ldr	r0, [sp, #68]	; 0x44
   17374:	str	r7, [sp, #204]	; 0xcc
   17378:	ldr	r8, [sp, #84]	; 0x54
   1737c:	ldr	r4, [sp, #96]	; 0x60
   17380:	ldrb	r0, [r0, #28]
   17384:	cmp	r8, #2
   17388:	bcc	17394 <__assert_fail@plt+0x5c70>
   1738c:	ands	r1, r0, #16
   17390:	beq	173a0 <__assert_fail@plt+0x5c7c>
   17394:	ldr	r1, [r4, #76]	; 0x4c
   17398:	cmp	r1, #0
   1739c:	beq	173c4 <__assert_fail@plt+0x5ca0>
   173a0:	ldr	r0, [sp, #212]	; 0xd4
   173a4:	mov	r2, r7
   173a8:	ldr	r1, [r0, r7, lsl #2]
   173ac:	add	r0, sp, #112	; 0x70
   173b0:	bl	1dd4c <__assert_fail@plt+0xc628>
   173b4:	str	r0, [sp, #208]	; 0xd0
   173b8:	ldr	r0, [sp, #68]	; 0x44
   173bc:	mov	r2, #12
   173c0:	ldrb	r0, [r0, #28]
   173c4:	cmp	r8, #2
   173c8:	bcc	173e0 <__assert_fail@plt+0x5cbc>
   173cc:	ands	r0, r0, #16
   173d0:	bne	173e0 <__assert_fail@plt+0x5cbc>
   173d4:	ldrb	r0, [r4, #88]	; 0x58
   173d8:	tst	r0, #1
   173dc:	bne	173ec <__assert_fail@plt+0x5cc8>
   173e0:	ldr	r0, [r4, #76]	; 0x4c
   173e4:	cmp	r0, #0
   173e8:	beq	177c4 <__assert_fail@plt+0x60a0>
   173ec:	ldr	r6, [sp, #204]	; 0xcc
   173f0:	cmn	r6, #-1073741823	; 0xc0000001
   173f4:	bcs	18060 <__assert_fail@plt+0x693c>
   173f8:	mov	r0, #4
   173fc:	ldr	r7, [sp, #196]	; 0xc4
   17400:	ldr	r5, [sp, #208]	; 0xd0
   17404:	add	r4, r0, r6, lsl #2
   17408:	mov	r0, r4
   1740c:	bl	22898 <__assert_fail@plt+0x11174>
   17410:	mov	sl, r0
   17414:	cmp	r0, #0
   17418:	beq	180d8 <__assert_fail@plt+0x69b4>
   1741c:	ldr	r0, [r7, #76]	; 0x4c
   17420:	cmp	r0, #0
   17424:	beq	174d4 <__assert_fail@plt+0x5db0>
   17428:	mov	r0, r4
   1742c:	bl	22898 <__assert_fail@plt+0x11174>
   17430:	cmp	r0, #0
   17434:	beq	180d8 <__assert_fail@plt+0x69b4>
   17438:	mov	r9, r0
   1743c:	add	r0, r6, #1
   17440:	mov	r1, #0
   17444:	str	r0, [sp, #92]	; 0x5c
   17448:	lsl	r2, r0, #2
   1744c:	mov	r0, r9
   17450:	bl	1161c <memset@plt>
   17454:	ldr	r0, [sp, #36]	; 0x24
   17458:	mov	r1, #0
   1745c:	str	r6, [fp, #-196]	; 0xffffff3c
   17460:	str	r5, [fp, #-200]	; 0xffffff38
   17464:	str	r9, [fp, #-204]	; 0xffffff34
   17468:	str	sl, [fp, #-208]	; 0xffffff30
   1746c:	str	r1, [r0]
   17470:	str	r1, [r0, #4]
   17474:	str	r1, [r0, #8]
   17478:	add	r0, sp, #112	; 0x70
   1747c:	sub	r1, fp, #208	; 0xd0
   17480:	bl	209fc <__assert_fail@plt+0xf2d8>
   17484:	mov	r4, r0
   17488:	mov	r0, #0
   1748c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17490:	cmp	r4, #0
   17494:	bne	17750 <__assert_fail@plt+0x602c>
   17498:	ldr	r0, [sl]
   1749c:	cmp	r0, #0
   174a0:	beq	1752c <__assert_fail@plt+0x5e08>
   174a4:	ldr	r3, [sp, #92]	; 0x5c
   174a8:	mov	r0, r7
   174ac:	mov	r1, sl
   174b0:	mov	r2, r9
   174b4:	bl	20c94 <__assert_fail@plt+0xf570>
   174b8:	mov	r4, r0
   174bc:	mov	r0, r9
   174c0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   174c4:	cmp	r4, #0
   174c8:	beq	1779c <__assert_fail@plt+0x6078>
   174cc:	mov	r9, #0
   174d0:	b	1774c <__assert_fail@plt+0x6028>
   174d4:	ldr	r0, [sp, #36]	; 0x24
   174d8:	mov	r9, #0
   174dc:	str	r6, [fp, #-196]	; 0xffffff3c
   174e0:	str	r5, [fp, #-200]	; 0xffffff38
   174e4:	sub	r1, fp, #208	; 0xd0
   174e8:	str	r9, [fp, #-204]	; 0xffffff34
   174ec:	str	sl, [fp, #-208]	; 0xffffff30
   174f0:	str	r9, [r0]
   174f4:	str	r9, [r0, #4]
   174f8:	str	r9, [r0, #8]
   174fc:	add	r0, sp, #112	; 0x70
   17500:	bl	209fc <__assert_fail@plt+0xf2d8>
   17504:	mov	r4, r0
   17508:	mov	r0, #0
   1750c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17510:	cmp	r4, #0
   17514:	bne	17750 <__assert_fail@plt+0x602c>
   17518:	ldr	r0, [sl]
   1751c:	mov	r9, #0
   17520:	cmp	r0, #0
   17524:	beq	17620 <__assert_fail@plt+0x5efc>
   17528:	b	1779c <__assert_fail@plt+0x6078>
   1752c:	ldr	r0, [r9]
   17530:	cmp	r0, #0
   17534:	bne	174a4 <__assert_fail@plt+0x5d80>
   17538:	cmp	r6, #1
   1753c:	blt	17620 <__assert_fail@plt+0x5efc>
   17540:	ldr	r0, [sp, #212]	; 0xd4
   17544:	str	r7, [sp, #88]	; 0x58
   17548:	lsl	r4, r6, #2
   1754c:	add	r8, r6, #1
   17550:	mov	r7, sl
   17554:	sub	r0, r0, #4
   17558:	ldr	r1, [r0, r4]
   1755c:	cmp	r1, #0
   17560:	beq	17570 <__assert_fail@plt+0x5e4c>
   17564:	ldrb	r2, [r1, #52]	; 0x34
   17568:	tst	r2, #16
   1756c:	bne	17584 <__assert_fail@plt+0x5e60>
   17570:	sub	r8, r8, #1
   17574:	sub	r4, r4, #4
   17578:	cmp	r8, #2
   1757c:	bge	17558 <__assert_fail@plt+0x5e34>
   17580:	b	17620 <__assert_fail@plt+0x5efc>
   17584:	sub	r6, r8, #2
   17588:	add	r5, sp, #112	; 0x70
   1758c:	mov	r0, r5
   17590:	mov	r2, r6
   17594:	bl	1dd4c <__assert_fail@plt+0xc628>
   17598:	mov	sl, r0
   1759c:	mov	r0, r9
   175a0:	mov	r1, #0
   175a4:	mov	r2, r4
   175a8:	bl	1161c <memset@plt>
   175ac:	ldr	r0, [sp, #36]	; 0x24
   175b0:	mov	r1, #0
   175b4:	str	r6, [fp, #-196]	; 0xffffff3c
   175b8:	str	sl, [fp, #-200]	; 0xffffff38
   175bc:	str	r9, [fp, #-204]	; 0xffffff34
   175c0:	str	r7, [fp, #-208]	; 0xffffff30
   175c4:	mov	r5, sl
   175c8:	mov	sl, r7
   175cc:	str	r1, [r0]
   175d0:	str	r1, [r0, #4]
   175d4:	str	r1, [r0, #8]
   175d8:	add	r0, sp, #112	; 0x70
   175dc:	sub	r1, fp, #208	; 0xd0
   175e0:	bl	209fc <__assert_fail@plt+0xf2d8>
   175e4:	mov	r4, r0
   175e8:	mov	r0, #0
   175ec:	bl	132e4 <__assert_fail@plt+0x1bc0>
   175f0:	cmp	r4, #0
   175f4:	bne	1774c <__assert_fail@plt+0x6028>
   175f8:	sub	r0, r8, #1
   175fc:	ldr	r7, [sp, #88]	; 0x58
   17600:	str	r0, [sp, #92]	; 0x5c
   17604:	ldr	r0, [sl]
   17608:	cmp	r0, #0
   1760c:	beq	1752c <__assert_fail@plt+0x5e08>
   17610:	sub	r6, r8, #2
   17614:	sub	r0, r8, #1
   17618:	str	r0, [sp, #92]	; 0x5c
   1761c:	b	174a4 <__assert_fail@plt+0x5d80>
   17620:	mov	r0, sl
   17624:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17628:	mov	r0, r9
   1762c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17630:	ldr	r9, [sp, #104]	; 0x68
   17634:	ldr	sl, [sp, #108]	; 0x6c
   17638:	ldr	r8, [sp, #76]	; 0x4c
   1763c:	ldr	r5, [sp, #72]	; 0x48
   17640:	add	r0, sp, #112	; 0x70
   17644:	bl	1de0c <__assert_fail@plt+0xc6e8>
   17648:	ldr	r0, [fp, #-212]	; 0xffffff2c
   1764c:	ldr	r7, [sp, #56]	; 0x38
   17650:	mov	r2, #1
   17654:	add	r4, r0, r8
   17658:	cmp	r4, r7
   1765c:	str	r4, [fp, #-212]	; 0xffffff2c
   17660:	blt	18060 <__assert_fail@plt+0x693c>
   17664:	ldr	r6, [sp, #100]	; 0x64
   17668:	ldr	r1, [sp, #44]	; 0x2c
   1766c:	cmp	r5, r4
   17670:	bge	16c74 <__assert_fail@plt+0x5550>
   17674:	b	18060 <__assert_fail@plt+0x693c>
   17678:	ldr	r8, [r4, #48]	; 0x30
   1767c:	b	16ec0 <__assert_fail@plt+0x579c>
   17680:	ldr	r8, [r4, #44]	; 0x2c
   17684:	b	16ec0 <__assert_fail@plt+0x579c>
   17688:	sxtb	r0, r0
   1768c:	cmn	r0, #1
   17690:	ble	176dc <__assert_fail@plt+0x5fb8>
   17694:	ldr	r0, [sp, #60]	; 0x3c
   17698:	mov	r2, #1
   1769c:	str	r7, [sp, #88]	; 0x58
   176a0:	b	17714 <__assert_fail@plt+0x5ff0>
   176a4:	add	r6, r8, #4
   176a8:	add	r0, sp, #112	; 0x70
   176ac:	mov	r2, #0
   176b0:	mov	r1, r6
   176b4:	bl	1df90 <__assert_fail@plt+0xc86c>
   176b8:	cmp	r0, #0
   176bc:	str	r0, [fp, #-64]	; 0xffffffc0
   176c0:	bne	17788 <__assert_fail@plt+0x6064>
   176c4:	ldrb	r0, [r8, #52]	; 0x34
   176c8:	tst	r0, #64	; 0x40
   176cc:	bne	17728 <__assert_fail@plt+0x6004>
   176d0:	ldr	sl, [sp, #108]	; 0x6c
   176d4:	mov	r6, #0
   176d8:	b	16eec <__assert_fail@plt+0x57c8>
   176dc:	add	r0, sp, #112	; 0x70
   176e0:	mov	r1, r8
   176e4:	mov	r2, r7
   176e8:	bl	1dd4c <__assert_fail@plt+0xc628>
   176ec:	cmp	r0, #0
   176f0:	ldr	r1, [sp, #60]	; 0x3c
   176f4:	mov	r2, r0
   176f8:	mov	r0, r7
   176fc:	mvneq	r0, #0
   17700:	str	r0, [sp, #88]	; 0x58
   17704:	clz	r0, r2
   17708:	movwne	r2, #1
   1770c:	lsr	r0, r0, #5
   17710:	orr	r0, r1, r0
   17714:	cmp	r0, #0
   17718:	bne	16f04 <__assert_fail@plt+0x57e0>
   1771c:	ldr	r8, [sp, #76]	; 0x4c
   17720:	ldr	r5, [sp, #72]	; 0x48
   17724:	b	1735c <__assert_fail@plt+0x5c38>
   17728:	add	r0, sp, #112	; 0x70
   1772c:	mov	r1, r6
   17730:	bl	1e088 <__assert_fail@plt+0xc964>
   17734:	ldr	sl, [sp, #108]	; 0x6c
   17738:	cmp	r0, #0
   1773c:	mov	r6, #0
   17740:	str	r0, [fp, #-64]	; 0xffffffc0
   17744:	beq	16eec <__assert_fail@plt+0x57c8>
   17748:	b	1778c <__assert_fail@plt+0x6068>
   1774c:	ldr	r8, [sp, #84]	; 0x54
   17750:	mov	r0, sl
   17754:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17758:	mov	r0, r9
   1775c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17760:	ldr	r9, [sp, #104]	; 0x68
   17764:	cmp	r4, #0
   17768:	beq	177c4 <__assert_fail@plt+0x60a0>
   1776c:	ldr	sl, [sp, #108]	; 0x6c
   17770:	ldr	r8, [sp, #76]	; 0x4c
   17774:	ldr	r5, [sp, #72]	; 0x48
   17778:	mov	r2, r4
   1777c:	cmp	r4, #1
   17780:	beq	17640 <__assert_fail@plt+0x5f1c>
   17784:	b	18060 <__assert_fail@plt+0x693c>
   17788:	ldr	sl, [sp, #108]	; 0x6c
   1778c:	ldr	r8, [sp, #76]	; 0x4c
   17790:	ldr	r5, [sp, #72]	; 0x48
   17794:	mov	r7, r0
   17798:	b	1735c <__assert_fail@plt+0x5c38>
   1779c:	ldr	r0, [sp, #212]	; 0xd4
   177a0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   177a4:	mov	r0, #0
   177a8:	str	r5, [sp, #208]	; 0xd0
   177ac:	str	sl, [sp, #212]	; 0xd4
   177b0:	str	r6, [sp, #204]	; 0xcc
   177b4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   177b8:	mov	r0, #0
   177bc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   177c0:	ldr	r8, [sp, #84]	; 0x54
   177c4:	cmp	r8, #0
   177c8:	beq	1805c <__assert_fail@plt+0x6938>
   177cc:	ldr	r4, [fp, #20]
   177d0:	cmp	r8, #1
   177d4:	beq	177f8 <__assert_fail@plt+0x60d4>
   177d8:	ldr	r0, [sp, #32]
   177dc:	ldr	r1, [fp, #16]
   177e0:	mvn	r0, r0
   177e4:	add	r0, r0, r1
   177e8:	mov	r1, #255	; 0xff
   177ec:	lsl	r2, r0, #3
   177f0:	add	r0, r4, #8
   177f4:	bl	1161c <memset@plt>
   177f8:	cmp	r8, #2
   177fc:	mov	r0, #0
   17800:	ldr	r1, [sp, #204]	; 0xcc
   17804:	stm	r4, {r0, r1}
   17808:	bcc	17f44 <__assert_fail@plt+0x6820>
   1780c:	ldr	r0, [sp, #68]	; 0x44
   17810:	ldrb	r0, [r0, #28]
   17814:	ands	r0, r0, #16
   17818:	bne	17f44 <__assert_fail@plt+0x6820>
   1781c:	ldr	r2, [sp, #96]	; 0x60
   17820:	mov	r0, #0
   17824:	ldrb	r1, [r2, #88]	; 0x58
   17828:	tst	r1, #1
   1782c:	mov	r1, #0
   17830:	beq	17844 <__assert_fail@plt+0x6120>
   17834:	ldr	r2, [r2, #76]	; 0x4c
   17838:	mov	r1, #0
   1783c:	cmp	r2, #0
   17840:	movwgt	r1, #1
   17844:	ldr	r2, [sp, #68]	; 0x44
   17848:	ldr	r5, [sp, #84]	; 0x54
   1784c:	ldr	r4, [fp, #20]
   17850:	cmp	r1, #0
   17854:	mov	r6, #0
   17858:	ldr	r8, [r2]
   1785c:	movw	r2, #15792	; 0x3db0
   17860:	movt	r2, #2
   17864:	vldr	d16, [r2]
   17868:	ldr	r2, [r2, #8]
   1786c:	str	r2, [fp, #-56]	; 0xffffffc8
   17870:	sub	r2, fp, #208	; 0xd0
   17874:	add	sl, r2, #12
   17878:	mov	r2, #16
   1787c:	vstr	d16, [fp, #-64]	; 0xffffffc0
   17880:	str	sl, [fp, #-200]	; 0xffffff38
   17884:	str	r2, [fp, #-204]	; 0xffffff34
   17888:	str	r0, [fp, #-208]	; 0xffffff30
   1788c:	beq	178ac <__assert_fail@plt+0x6188>
   17890:	mov	r0, #48	; 0x30
   17894:	bl	22898 <__assert_fail@plt+0x11174>
   17898:	cmp	r0, #0
   1789c:	str	r0, [fp, #-56]	; 0xffffffc8
   178a0:	beq	180b0 <__assert_fail@plt+0x698c>
   178a4:	ldr	r0, [fp, #-208]	; 0xffffff30
   178a8:	sub	r6, fp, #64	; 0x40
   178ac:	ldr	r9, [r8, #72]	; 0x48
   178b0:	mov	r1, #0
   178b4:	cmp	r0, r5
   178b8:	str	r1, [fp, #-44]	; 0xffffffd4
   178bc:	str	r1, [fp, #-48]	; 0xffffffd0
   178c0:	str	r1, [fp, #-40]	; 0xffffffd8
   178c4:	bcs	17938 <__assert_fail@plt+0x6214>
   178c8:	sub	r0, fp, #208	; 0xd0
   178cc:	mov	r1, r5
   178d0:	mov	r2, sl
   178d4:	mov	r3, #8
   178d8:	bl	22998 <__assert_fail@plt+0x11274>
   178dc:	cmp	r0, #0
   178e0:	bne	1793c <__assert_fail@plt+0x6218>
   178e4:	ldr	r0, [fp, #-200]	; 0xffffff38
   178e8:	mov	r4, #12
   178ec:	mov	r5, sl
   178f0:	cmp	r0, sl
   178f4:	beq	178fc <__assert_fail@plt+0x61d8>
   178f8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   178fc:	mov	sl, r5
   17900:	b	17f1c <__assert_fail@plt+0x67f8>
   17904:	ldr	r1, [r3, #8]
   17908:	cmp	r1, #0
   1790c:	beq	1791c <__assert_fail@plt+0x61f8>
   17910:	ldrsb	r1, [r6, #28]
   17914:	cmp	r1, #0
   17918:	bmi	169b0 <__assert_fail@plt+0x528c>
   1791c:	mov	r0, #0
   17920:	cmp	r4, #0
   17924:	beq	180a8 <__assert_fail@plt+0x6984>
   17928:	cmp	ip, #0
   1792c:	mov	r4, #0
   17930:	bne	1809c <__assert_fail@plt+0x6978>
   17934:	b	169b4 <__assert_fail@plt+0x5290>
   17938:	str	r5, [fp, #-208]	; 0xffffff30
   1793c:	ldr	r7, [fp, #-200]	; 0xffffff38
   17940:	lsl	r2, r5, #3
   17944:	mov	r1, r4
   17948:	str	r2, [sp, #104]	; 0x68
   1794c:	mov	r0, r7
   17950:	bl	11460 <memcpy@plt>
   17954:	ldr	r3, [r4]
   17958:	ldr	r0, [r4, #4]
   1795c:	cmp	r3, r0
   17960:	mov	r0, #0
   17964:	str	r3, [fp, #-36]	; 0xffffffdc
   17968:	ble	17978 <__assert_fail@plt+0x6254>
   1796c:	mov	r4, #0
   17970:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17974:	b	17f0c <__assert_fail@plt+0x67e8>
   17978:	lsl	r0, r5, #4
   1797c:	str	r6, [sp, #108]	; 0x6c
   17980:	str	r8, [sp, #92]	; 0x5c
   17984:	str	r7, [sp, #100]	; 0x64
   17988:	str	r0, [sp, #88]	; 0x58
   1798c:	ldr	r0, [r8]
   17990:	add	r1, r0, r9, lsl #3
   17994:	ldr	r1, [r1, #4]
   17998:	uxtb	r2, r1
   1799c:	cmp	r2, #9
   179a0:	beq	179d0 <__assert_fail@plt+0x62ac>
   179a4:	cmp	r2, #8
   179a8:	bne	17a40 <__assert_fail@plt+0x631c>
   179ac:	ldr	r0, [r0, r9, lsl #3]
   179b0:	add	r0, r0, #1
   179b4:	cmp	r0, r5
   179b8:	bge	17a40 <__assert_fail@plt+0x631c>
   179bc:	mov	r1, r4
   179c0:	str	r3, [r1, r0, lsl #3]!
   179c4:	mvn	r0, #0
   179c8:	str	r0, [r1, #4]
   179cc:	b	17a40 <__assert_fail@plt+0x631c>
   179d0:	ldr	r0, [r0, r9, lsl #3]
   179d4:	add	r0, r0, #1
   179d8:	cmp	r0, r5
   179dc:	bge	17a40 <__assert_fail@plt+0x631c>
   179e0:	ldr	r2, [r4, r0, lsl #3]
   179e4:	cmp	r2, r3
   179e8:	bge	17a00 <__assert_fail@plt+0x62dc>
   179ec:	add	r0, r4, r0, lsl #3
   179f0:	mov	r1, r4
   179f4:	str	r3, [r0, #4]
   179f8:	mov	r0, r7
   179fc:	b	17a1c <__assert_fail@plt+0x62f8>
   17a00:	tst	r1, #524288	; 0x80000
   17a04:	beq	17a38 <__assert_fail@plt+0x6314>
   17a08:	ldr	r1, [r7, r0, lsl #3]
   17a0c:	cmn	r1, #1
   17a10:	beq	17a38 <__assert_fail@plt+0x6314>
   17a14:	mov	r0, r4
   17a18:	mov	r1, r7
   17a1c:	ldr	r2, [sp, #104]	; 0x68
   17a20:	str	sl, [sp, #80]	; 0x50
   17a24:	mov	sl, r3
   17a28:	bl	11460 <memcpy@plt>
   17a2c:	mov	r3, sl
   17a30:	ldr	sl, [sp, #80]	; 0x50
   17a34:	b	17a40 <__assert_fail@plt+0x631c>
   17a38:	add	r0, r4, r0, lsl #3
   17a3c:	str	r3, [r0, #4]
   17a40:	ldr	r0, [r4, #4]
   17a44:	cmp	r3, r0
   17a48:	ldreq	r0, [sp, #208]	; 0xd0
   17a4c:	cmpeq	r9, r0
   17a50:	beq	17a74 <__assert_fail@plt+0x6350>
   17a54:	cmp	r6, #0
   17a58:	beq	17ad8 <__assert_fail@plt+0x63b4>
   17a5c:	sub	r0, fp, #48	; 0x30
   17a60:	mov	r1, r9
   17a64:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   17a68:	cmp	r0, #0
   17a6c:	bne	17a7c <__assert_fail@plt+0x6358>
   17a70:	b	17ad8 <__assert_fail@plt+0x63b4>
   17a74:	cmp	r6, #0
   17a78:	beq	17f00 <__assert_fail@plt+0x67dc>
   17a7c:	mov	r0, #0
   17a80:	ldr	r1, [r4, r0, lsl #3]
   17a84:	cmp	r1, #0
   17a88:	bmi	17a9c <__assert_fail@plt+0x6378>
   17a8c:	add	r1, r4, r0, lsl #3
   17a90:	ldr	r1, [r1, #4]
   17a94:	cmn	r1, #1
   17a98:	beq	17aac <__assert_fail@plt+0x6388>
   17a9c:	add	r0, r0, #1
   17aa0:	cmp	r5, r0
   17aa4:	bne	17a80 <__assert_fail@plt+0x635c>
   17aa8:	b	17f00 <__assert_fail@plt+0x67dc>
   17aac:	sub	r0, fp, #48	; 0x30
   17ab0:	sub	r1, fp, #36	; 0x24
   17ab4:	mov	r2, r5
   17ab8:	mov	r3, r4
   17abc:	str	r7, [sp]
   17ac0:	str	r0, [sp, #4]
   17ac4:	mov	r0, r6
   17ac8:	bl	21bec <__assert_fail@plt+0x104c8>
   17acc:	mov	r9, r0
   17ad0:	cmn	r0, #1
   17ad4:	ble	17f00 <__assert_fail@plt+0x67dc>
   17ad8:	ldr	r4, [sp, #196]	; 0xc4
   17adc:	ldr	r0, [r4]
   17ae0:	add	r1, r0, r9, lsl #3
   17ae4:	ldr	r1, [r1, #4]
   17ae8:	tst	r1, #8
   17aec:	bne	17ba8 <__assert_fail@plt+0x6484>
   17af0:	tst	r1, #1048576	; 0x100000
   17af4:	bne	17c3c <__assert_fail@plt+0x6518>
   17af8:	uxtb	r1, r1
   17afc:	cmp	r1, #4
   17b00:	bne	17c64 <__assert_fail@plt+0x6540>
   17b04:	ldr	r0, [r0, r9, lsl #3]
   17b08:	mov	r7, #0
   17b0c:	add	r0, r0, #1
   17b10:	cmp	r0, r5
   17b14:	bge	17b28 <__assert_fail@plt+0x6404>
   17b18:	ldr	r1, [fp, #20]
   17b1c:	ldr	r2, [r1, r0, lsl #3]!
   17b20:	ldr	r1, [r1, #4]
   17b24:	sub	r7, r1, r2
   17b28:	cmp	r6, #0
   17b2c:	beq	17d4c <__assert_fail@plt+0x6628>
   17b30:	cmp	r0, r5
   17b34:	bge	17ce8 <__assert_fail@plt+0x65c4>
   17b38:	ldr	r1, [fp, #20]
   17b3c:	ldr	r1, [r1, r0, lsl #3]
   17b40:	cmn	r1, #1
   17b44:	beq	17ce8 <__assert_fail@plt+0x65c4>
   17b48:	ldr	r2, [fp, #20]
   17b4c:	add	r0, r2, r0, lsl #3
   17b50:	ldr	r0, [r0, #4]
   17b54:	cmn	r0, #1
   17b58:	beq	17ce8 <__assert_fail@plt+0x65c4>
   17b5c:	cmp	r7, #0
   17b60:	beq	17df8 <__assert_fail@plt+0x66d4>
   17b64:	ldr	r5, [fp, #-36]	; 0xffffffdc
   17b68:	ldr	r0, [sp, #140]	; 0x8c
   17b6c:	sub	r0, r0, r5
   17b70:	cmp	r0, r7
   17b74:	blt	17ce8 <__assert_fail@plt+0x65c4>
   17b78:	ldr	r2, [sp, #116]	; 0x74
   17b7c:	add	r0, r2, r1
   17b80:	add	r1, r2, r5
   17b84:	mov	r2, r7
   17b88:	bl	115bc <bcmp@plt>
   17b8c:	cmp	r0, #0
   17b90:	bne	17ce8 <__assert_fail@plt+0x65c4>
   17b94:	ldr	r0, [r4, #12]
   17b98:	add	r3, r5, r7
   17b9c:	ldr	r8, [r0, r9, lsl #2]
   17ba0:	str	r3, [fp, #-36]	; 0xffffffdc
   17ba4:	b	17cb0 <__assert_fail@plt+0x658c>
   17ba8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17bac:	ldr	r0, [sp, #212]	; 0xd4
   17bb0:	ldr	r4, [r4, #20]
   17bb4:	ldr	r6, [r0, r1, lsl #2]
   17bb8:	str	r1, [sp, #80]	; 0x50
   17bbc:	sub	r0, fp, #48	; 0x30
   17bc0:	mov	r1, r9
   17bc4:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   17bc8:	cmp	r0, #0
   17bcc:	bne	17be4 <__assert_fail@plt+0x64c0>
   17bd0:	sub	r0, fp, #48	; 0x30
   17bd4:	mov	r1, r9
   17bd8:	bl	1cfbc <__assert_fail@plt+0xb898>
   17bdc:	cmp	r0, #0
   17be0:	beq	17edc <__assert_fail@plt+0x67b8>
   17be4:	add	r0, r9, r9, lsl #1
   17be8:	add	r0, r4, r0, lsl #2
   17bec:	ldr	r5, [r0, #4]
   17bf0:	cmp	r5, #1
   17bf4:	blt	17ce8 <__assert_fail@plt+0x65c4>
   17bf8:	ldr	r7, [r0, #8]
   17bfc:	add	r6, r6, #4
   17c00:	mvn	r4, #0
   17c04:	ldr	r8, [r7]
   17c08:	mov	r0, r6
   17c0c:	mov	r1, r8
   17c10:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   17c14:	cmp	r0, #0
   17c18:	beq	17c28 <__assert_fail@plt+0x6504>
   17c1c:	cmn	r4, #1
   17c20:	bne	17d30 <__assert_fail@plt+0x660c>
   17c24:	mov	r4, r8
   17c28:	add	r7, r7, #4
   17c2c:	subs	r5, r5, #1
   17c30:	bne	17c04 <__assert_fail@plt+0x64e0>
   17c34:	mov	r8, r4
   17c38:	b	17d44 <__assert_fail@plt+0x6620>
   17c3c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   17c40:	mov	r0, r4
   17c44:	mov	r1, r9
   17c48:	add	r2, sp, #112	; 0x70
   17c4c:	mov	r3, r5
   17c50:	bl	1fad4 <__assert_fail@plt+0xe3b0>
   17c54:	mov	r3, r5
   17c58:	cmp	r0, #0
   17c5c:	bne	17c94 <__assert_fail@plt+0x6570>
   17c60:	b	17c68 <__assert_fail@plt+0x6544>
   17c64:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17c68:	ldr	r0, [r4]
   17c6c:	mov	r2, r3
   17c70:	mov	r5, r3
   17c74:	add	r1, r0, r9, lsl #3
   17c78:	add	r0, sp, #112	; 0x70
   17c7c:	bl	1fdcc <__assert_fail@plt+0xe6a8>
   17c80:	mov	r1, r0
   17c84:	mov	r3, r5
   17c88:	mov	r0, #1
   17c8c:	cmp	r1, #0
   17c90:	beq	17ce8 <__assert_fail@plt+0x65c4>
   17c94:	ldr	r1, [r4, #12]
   17c98:	add	r3, r0, r3
   17c9c:	ldr	r0, [sp, #108]	; 0x6c
   17ca0:	ldr	r8, [r1, r9, lsl #2]
   17ca4:	cmp	r0, #0
   17ca8:	str	r3, [fp, #-36]	; 0xffffffdc
   17cac:	beq	17d68 <__assert_fail@plt+0x6644>
   17cb0:	ldr	r0, [sp, #204]	; 0xcc
   17cb4:	cmp	r3, r0
   17cb8:	bgt	17ce8 <__assert_fail@plt+0x65c4>
   17cbc:	ldr	r0, [sp, #212]	; 0xd4
   17cc0:	ldr	r0, [r0, r3, lsl #2]
   17cc4:	cmp	r0, #0
   17cc8:	beq	17ce8 <__assert_fail@plt+0x65c4>
   17ccc:	add	r0, r0, #4
   17cd0:	mov	r1, r8
   17cd4:	mov	r4, r3
   17cd8:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   17cdc:	mov	r3, r4
   17ce0:	cmp	r0, #0
   17ce4:	bne	17d68 <__assert_fail@plt+0x6644>
   17ce8:	ldr	r5, [sp, #84]	; 0x54
   17cec:	ldr	r4, [fp, #20]
   17cf0:	ldr	r6, [sp, #108]	; 0x6c
   17cf4:	ldr	r7, [sp, #100]	; 0x64
   17cf8:	sub	r0, fp, #48	; 0x30
   17cfc:	sub	r1, fp, #36	; 0x24
   17d00:	str	r0, [sp, #4]
   17d04:	mov	r0, r6
   17d08:	mov	r2, r5
   17d0c:	mov	r3, r4
   17d10:	str	r7, [sp]
   17d14:	bl	21bec <__assert_fail@plt+0x104c8>
   17d18:	cmp	r0, #0
   17d1c:	bmi	180c8 <__assert_fail@plt+0x69a4>
   17d20:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17d24:	ldr	r8, [sp, #92]	; 0x5c
   17d28:	mov	r9, r0
   17d2c:	b	17d90 <__assert_fail@plt+0x666c>
   17d30:	sub	r0, fp, #48	; 0x30
   17d34:	mov	r1, r4
   17d38:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   17d3c:	cmp	r0, #0
   17d40:	beq	17da0 <__assert_fail@plt+0x667c>
   17d44:	ldr	r3, [sp, #80]	; 0x50
   17d48:	b	17d70 <__assert_fail@plt+0x664c>
   17d4c:	cmp	r7, #0
   17d50:	beq	17df8 <__assert_fail@plt+0x66d4>
   17d54:	ldr	r0, [r4, #12]
   17d58:	ldr	r8, [r0, r9, lsl #2]
   17d5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17d60:	add	r3, r0, r7
   17d64:	str	r3, [fp, #-36]	; 0xffffffdc
   17d68:	mov	r0, #0
   17d6c:	str	r0, [fp, #-44]	; 0xffffffd4
   17d70:	cmn	r8, #1
   17d74:	ble	17ed4 <__assert_fail@plt+0x67b0>
   17d78:	mov	r9, r8
   17d7c:	ldr	r5, [sp, #84]	; 0x54
   17d80:	ldr	r4, [fp, #20]
   17d84:	ldr	r6, [sp, #108]	; 0x6c
   17d88:	ldr	r8, [sp, #92]	; 0x5c
   17d8c:	ldr	r7, [sp, #100]	; 0x64
   17d90:	ldr	r0, [r4, #4]
   17d94:	cmp	r3, r0
   17d98:	ble	1798c <__assert_fail@plt+0x6268>
   17d9c:	b	180b8 <__assert_fail@plt+0x6994>
   17da0:	ldr	r7, [sp, #108]	; 0x6c
   17da4:	ldr	r3, [sp, #80]	; 0x50
   17da8:	cmp	r7, #0
   17dac:	beq	17e48 <__assert_fail@plt+0x6724>
   17db0:	ldr	r5, [r7]
   17db4:	ldr	r0, [r7, #4]
   17db8:	add	r1, r5, #1
   17dbc:	cmp	r1, r0
   17dc0:	str	r1, [r7]
   17dc4:	bne	17e50 <__assert_fail@plt+0x672c>
   17dc8:	ldr	r0, [r7, #8]
   17dcc:	add	r1, r1, r1, lsl #1
   17dd0:	lsl	r1, r1, #4
   17dd4:	bl	228c8 <__assert_fail@plt+0x111a4>
   17dd8:	cmp	r0, #0
   17ddc:	beq	17ecc <__assert_fail@plt+0x67a8>
   17de0:	str	r0, [r7, #8]
   17de4:	ldr	r3, [sp, #80]	; 0x50
   17de8:	ldr	r1, [r7, #4]
   17dec:	lsl	r1, r1, #1
   17df0:	str	r1, [r7, #4]
   17df4:	b	17e54 <__assert_fail@plt+0x6730>
   17df8:	sub	r0, fp, #48	; 0x30
   17dfc:	mov	r1, r9
   17e00:	bl	1cfbc <__assert_fail@plt+0xb898>
   17e04:	cmp	r0, #0
   17e08:	beq	17edc <__assert_fail@plt+0x67b8>
   17e0c:	ldr	r0, [r4, #20]
   17e10:	add	r1, r9, r9, lsl #1
   17e14:	ldr	r5, [fp, #-36]	; 0xffffffdc
   17e18:	add	r0, r0, r1, lsl #2
   17e1c:	ldr	r0, [r0, #8]
   17e20:	ldr	r8, [r0]
   17e24:	ldr	r0, [sp, #212]	; 0xd4
   17e28:	ldr	r0, [r0, r5, lsl #2]
   17e2c:	mov	r1, r8
   17e30:	add	r0, r0, #4
   17e34:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   17e38:	mov	r3, r5
   17e3c:	cmp	r0, #0
   17e40:	bne	17d70 <__assert_fail@plt+0x664c>
   17e44:	b	17c68 <__assert_fail@plt+0x6544>
   17e48:	mov	r8, r4
   17e4c:	b	17d70 <__assert_fail@plt+0x664c>
   17e50:	ldr	r0, [r7, #8]
   17e54:	add	r5, r5, r5, lsl #1
   17e58:	str	r3, [r0, r5, lsl #3]!
   17e5c:	str	r8, [r0, #4]
   17e60:	ldr	r0, [sp, #88]	; 0x58
   17e64:	bl	22898 <__assert_fail@plt+0x11174>
   17e68:	ldr	r1, [r7, #8]
   17e6c:	mvn	r8, #1
   17e70:	cmp	r0, #0
   17e74:	add	r6, r1, r5, lsl #3
   17e78:	str	r0, [r6, #8]!
   17e7c:	beq	17d44 <__assert_fail@plt+0x6620>
   17e80:	ldr	r9, [sp, #104]	; 0x68
   17e84:	ldr	r1, [fp, #20]
   17e88:	mov	r2, r9
   17e8c:	bl	11460 <memcpy@plt>
   17e90:	ldr	r0, [r6]
   17e94:	ldr	r1, [sp, #84]	; 0x54
   17e98:	mov	r2, r9
   17e9c:	add	r0, r0, r1, lsl #3
   17ea0:	ldr	r1, [sp, #100]	; 0x64
   17ea4:	bl	11460 <memcpy@plt>
   17ea8:	ldr	r0, [r7, #8]
   17eac:	sub	r1, fp, #48	; 0x30
   17eb0:	add	r0, r0, r5, lsl #3
   17eb4:	add	r0, r0, #12
   17eb8:	bl	1d158 <__assert_fail@plt+0xba34>
   17ebc:	ldr	r3, [sp, #80]	; 0x50
   17ec0:	cmp	r0, #0
   17ec4:	moveq	r8, r4
   17ec8:	b	17d70 <__assert_fail@plt+0x664c>
   17ecc:	mvn	r8, #1
   17ed0:	b	17d44 <__assert_fail@plt+0x6620>
   17ed4:	cmn	r8, #2
   17ed8:	bne	17ce8 <__assert_fail@plt+0x65c4>
   17edc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17ee0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17ee4:	ldr	r0, [fp, #-200]	; 0xffffff38
   17ee8:	mov	r4, #12
   17eec:	cmp	r0, sl
   17ef0:	beq	17ef8 <__assert_fail@plt+0x67d4>
   17ef4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17ef8:	ldr	r6, [sp, #108]	; 0x6c
   17efc:	b	17f1c <__assert_fail@plt+0x67f8>
   17f00:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17f04:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17f08:	mov	r4, #0
   17f0c:	ldr	r0, [fp, #-200]	; 0xffffff38
   17f10:	cmp	r0, sl
   17f14:	beq	17f1c <__assert_fail@plt+0x67f8>
   17f18:	bl	132e4 <__assert_fail@plt+0x1bc0>
   17f1c:	mov	r0, #16
   17f20:	str	sl, [fp, #-200]	; 0xffffff38
   17f24:	str	r0, [fp, #-204]	; 0xffffff34
   17f28:	mov	r0, #0
   17f2c:	str	r0, [fp, #-208]	; 0xffffff30
   17f30:	mov	r0, r6
   17f34:	bl	21b84 <__assert_fail@plt+0x10460>
   17f38:	mov	r2, r4
   17f3c:	cmp	r2, #0
   17f40:	bne	18060 <__assert_fail@plt+0x693c>
   17f44:	ldr	r0, [fp, #20]
   17f48:	ldrb	r1, [sp, #188]	; 0xbc
   17f4c:	ldr	r2, [fp, #16]
   17f50:	ldr	r8, [sp, #96]	; 0x60
   17f54:	ldr	r4, [sp, #32]
   17f58:	add	r0, r0, #4
   17f5c:	ldr	r3, [r0, #-4]
   17f60:	cmn	r3, #1
   17f64:	beq	17f84 <__assert_fail@plt+0x6860>
   17f68:	cmp	r1, #0
   17f6c:	bne	17f98 <__assert_fail@plt+0x6874>
   17f70:	ldr	r7, [r0]
   17f74:	ldr	r6, [fp, #-212]	; 0xffffff2c
   17f78:	add	r3, r3, r6
   17f7c:	add	r7, r7, r6
   17f80:	stmda	r0, {r3, r7}
   17f84:	sub	r2, r2, #1
   17f88:	add	r0, r0, #8
   17f8c:	cmp	r4, r2
   17f90:	bne	17f5c <__assert_fail@plt+0x6838>
   17f94:	b	17fd0 <__assert_fail@plt+0x68ac>
   17f98:	ldr	r7, [sp, #140]	; 0x8c
   17f9c:	ldr	r6, [sp, #28]
   17fa0:	ldr	ip, [sp, #124]	; 0x7c
   17fa4:	cmp	r3, r7
   17fa8:	mov	r5, r6
   17fac:	addne	r5, ip, r3, lsl #2
   17fb0:	ldr	r3, [r5]
   17fb4:	str	r3, [r0, #-4]
   17fb8:	ldr	r5, [r0]
   17fbc:	cmp	r5, r7
   17fc0:	addne	r6, ip, r5, lsl #2
   17fc4:	ldr	r7, [r6]
   17fc8:	str	r7, [r0]
   17fcc:	b	17f74 <__assert_fail@plt+0x6850>
   17fd0:	cmp	r4, #1
   17fd4:	blt	17ff0 <__assert_fail@plt+0x68cc>
   17fd8:	ldr	r0, [sp, #84]	; 0x54
   17fdc:	ldr	r1, [fp, #20]
   17fe0:	lsl	r2, r4, #3
   17fe4:	add	r0, r1, r0, lsl #3
   17fe8:	mov	r1, #255	; 0xff
   17fec:	bl	1161c <memset@plt>
   17ff0:	ldr	r0, [r8, #132]	; 0x84
   17ff4:	mov	r2, #0
   17ff8:	cmp	r0, #0
   17ffc:	beq	18060 <__assert_fail@plt+0x693c>
   18000:	ldr	r1, [sp, #84]	; 0x54
   18004:	cmp	r1, #2
   18008:	bcc	18060 <__assert_fail@plt+0x693c>
   1800c:	ldr	r1, [sp, #32]
   18010:	ldr	r2, [fp, #16]
   18014:	ldr	r6, [fp, #20]
   18018:	mvn	r1, r1
   1801c:	add	r1, r1, r2
   18020:	mov	r2, #0
   18024:	ldr	r3, [r0, r2, lsl #2]
   18028:	cmp	r2, r3
   1802c:	beq	18050 <__assert_fail@plt+0x692c>
   18030:	add	r3, r6, r3, lsl #3
   18034:	add	r7, r6, r2, lsl #3
   18038:	ldr	r3, [r3, #8]
   1803c:	str	r3, [r7, #8]
   18040:	ldr	r3, [r0, r2, lsl #2]
   18044:	add	r3, r6, r3, lsl #3
   18048:	ldr	r3, [r3, #12]
   1804c:	str	r3, [r7, #12]
   18050:	add	r2, r2, #1
   18054:	cmp	r1, r2
   18058:	bne	18024 <__assert_fail@plt+0x6900>
   1805c:	mov	r2, #0
   18060:	ldr	r0, [sp, #212]	; 0xd4
   18064:	mov	sl, r2
   18068:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1806c:	ldr	r0, [sp, #96]	; 0x60
   18070:	ldr	r0, [r0, #76]	; 0x4c
   18074:	cmp	r0, #0
   18078:	beq	18094 <__assert_fail@plt+0x6970>
   1807c:	add	r0, sp, #112	; 0x70
   18080:	bl	1de0c <__assert_fail@plt+0xc6e8>
   18084:	ldr	r0, [sp, #244]	; 0xf4
   18088:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1808c:	ldr	r0, [sp, #228]	; 0xe4
   18090:	bl	132e4 <__assert_fail@plt+0x1bc0>
   18094:	add	r0, sp, #112	; 0x70
   18098:	bl	18754 <__assert_fail@plt+0x7030>
   1809c:	mov	r0, sl
   180a0:	sub	sp, fp, #28
   180a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180a8:	mov	r4, #0
   180ac:	b	169b4 <__assert_fail@plt+0x5290>
   180b0:	mov	r2, #12
   180b4:	b	17f3c <__assert_fail@plt+0x6818>
   180b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   180bc:	b	1796c <__assert_fail@plt+0x6248>
   180c0:	mov	r2, r0
   180c4:	b	18060 <__assert_fail@plt+0x693c>
   180c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   180cc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   180d0:	mov	r4, #1
   180d4:	b	17f0c <__assert_fail@plt+0x67e8>
   180d8:	mov	r0, sl
   180dc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   180e0:	mov	r0, #0
   180e4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   180e8:	mov	r2, #12
   180ec:	b	18060 <__assert_fail@plt+0x693c>
   180f0:	mov	r2, #1
   180f4:	b	18060 <__assert_fail@plt+0x693c>
   180f8:	push	{fp, lr}
   180fc:	mov	fp, sp
   18100:	sub	sp, sp, #16
   18104:	mov	ip, #1
   18108:	str	r2, [sp, #4]
   1810c:	str	ip, [sp, #12]
   18110:	mov	ip, #0
   18114:	str	ip, [sp]
   18118:	ldr	ip, [fp, #8]
   1811c:	str	ip, [sp, #8]
   18120:	bl	1812c <__assert_fail@plt+0x6a08>
   18124:	mov	sp, fp
   18128:	pop	{fp, pc}
   1812c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18130:	add	fp, sp, #28
   18134:	sub	sp, sp, #44	; 0x2c
   18138:	mvn	r6, #0
   1813c:	cmp	r3, #0
   18140:	bmi	183f0 <__assert_fail@plt+0x6ccc>
   18144:	mov	r5, r3
   18148:	mov	r9, r2
   1814c:	cmp	r3, r2
   18150:	bgt	183f0 <__assert_fail@plt+0x6ccc>
   18154:	mov	r7, r0
   18158:	ldr	r0, [fp, #8]
   1815c:	mov	sl, r1
   18160:	movw	r1, #0
   18164:	mov	r8, r9
   18168:	ldr	r6, [r7]
   1816c:	movt	r1, #0
   18170:	add	r0, r0, r5
   18174:	cmp	r0, r9
   18178:	bicle	r8, r0, r0, asr #31
   1817c:	movw	r0, #0
   18180:	movt	r0, #0
   18184:	orrs	r4, r1, r0
   18188:	beq	18194 <__assert_fail@plt+0x6a70>
   1818c:	add	r0, r6, #136	; 0x88
   18190:	bl	11448 <pthread_mutex_lock@plt>
   18194:	ldrb	r0, [r7, #28]
   18198:	str	r6, [sp, #24]
   1819c:	ldr	r6, [fp, #16]
   181a0:	cmp	r8, r5
   181a4:	ubfx	r1, r0, #5, #2
   181a8:	str	r4, [sp, #36]	; 0x24
   181ac:	str	sl, [sp, #32]
   181b0:	str	r1, [sp, #28]
   181b4:	ble	181d8 <__assert_fail@plt+0x6ab4>
   181b8:	tst	r0, #8
   181bc:	bne	181d8 <__assert_fail@plt+0x6ab4>
   181c0:	ldr	r1, [r7, #16]
   181c4:	cmp	r1, #0
   181c8:	beq	181d8 <__assert_fail@plt+0x6ab4>
   181cc:	mov	r0, r7
   181d0:	bl	1604c <__assert_fail@plt+0x4928>
   181d4:	ldrb	r0, [r7, #28]
   181d8:	str	r7, [fp, #-32]	; 0xffffffe0
   181dc:	mov	sl, #1
   181e0:	mov	r7, #0
   181e4:	cmp	r6, #0
   181e8:	beq	18234 <__assert_fail@plt+0x6b10>
   181ec:	ands	r1, r0, #16
   181f0:	bne	18234 <__assert_fail@plt+0x6b10>
   181f4:	and	r0, r0, #6
   181f8:	cmp	r0, #4
   181fc:	bne	18224 <__assert_fail@plt+0x6b00>
   18200:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18204:	ldr	sl, [r6]
   18208:	ldr	r0, [r0, #24]
   1820c:	cmp	sl, r0
   18210:	bhi	1822c <__assert_fail@plt+0x6b08>
   18214:	cmp	sl, #1
   18218:	movwlt	r6, #0
   1821c:	movwlt	sl, #1
   18220:	b	18230 <__assert_fail@plt+0x6b0c>
   18224:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18228:	ldr	r0, [r0, #24]
   1822c:	add	sl, r0, #1
   18230:	mov	r7, r6
   18234:	lsl	r0, sl, #3
   18238:	bl	22898 <__assert_fail@plt+0x11174>
   1823c:	cmp	r0, #0
   18240:	beq	183fc <__assert_fail@plt+0x6cd8>
   18244:	ldr	r1, [fp, #12]
   18248:	str	r8, [sp]
   1824c:	mov	r8, r0
   18250:	mov	r2, r9
   18254:	mov	r3, r5
   18258:	stmib	sp, {r1, sl}
   1825c:	str	r0, [sp, #12]
   18260:	ldr	r0, [sp, #28]
   18264:	ldr	r1, [sp, #32]
   18268:	str	r0, [sp, #16]
   1826c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18270:	bl	168cc <__assert_fail@plt+0x51a8>
   18274:	cmp	r0, #0
   18278:	beq	18294 <__assert_fail@plt+0x6b70>
   1827c:	ldr	r4, [sp, #36]	; 0x24
   18280:	cmp	r0, #1
   18284:	mvn	r6, #1
   18288:	mov	r5, r8
   1828c:	mvneq	r6, #0
   18290:	b	183d4 <__assert_fail@plt+0x6cb0>
   18294:	str	r5, [sp, #32]
   18298:	cmp	r7, #0
   1829c:	mov	r5, r8
   182a0:	beq	183a8 <__assert_fail@plt+0x6c84>
   182a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   182a8:	add	r9, sl, #1
   182ac:	ldrb	r0, [r0, #28]
   182b0:	ubfx	r0, r0, #1, #2
   182b4:	cmp	r0, #1
   182b8:	beq	18304 <__assert_fail@plt+0x6be0>
   182bc:	cmp	r0, #0
   182c0:	bne	1831c <__assert_fail@plt+0x6bf8>
   182c4:	lsl	r5, r9, #2
   182c8:	mov	r0, r5
   182cc:	bl	22898 <__assert_fail@plt+0x11174>
   182d0:	mov	r6, #0
   182d4:	cmp	r0, #0
   182d8:	str	r0, [r7, #4]
   182dc:	beq	18454 <__assert_fail@plt+0x6d30>
   182e0:	mov	r0, r5
   182e4:	bl	22898 <__assert_fail@plt+0x11174>
   182e8:	cmp	r0, #0
   182ec:	str	r0, [r7, #8]
   182f0:	beq	1844c <__assert_fail@plt+0x6d28>
   182f4:	str	r9, [r7]
   182f8:	mov	r4, #1
   182fc:	mov	r5, r8
   18300:	b	18324 <__assert_fail@plt+0x6c00>
   18304:	ldr	r0, [r7]
   18308:	mov	r4, #1
   1830c:	cmp	r9, r0
   18310:	bhi	18408 <__assert_fail@plt+0x6ce4>
   18314:	mov	r9, r0
   18318:	b	18324 <__assert_fail@plt+0x6c00>
   1831c:	ldr	r9, [r7]
   18320:	mov	r4, #2
   18324:	cmp	sl, #1
   18328:	blt	1835c <__assert_fail@plt+0x6c38>
   1832c:	ldmib	r7, {r1, r2}
   18330:	add	r0, r5, #4
   18334:	mov	r3, sl
   18338:	ldr	r6, [r0, #-4]
   1833c:	subs	r3, r3, #1
   18340:	str	r6, [r1], #4
   18344:	ldr	r6, [r0]
   18348:	add	r0, r0, #8
   1834c:	str	r6, [r2], #4
   18350:	bne	18338 <__assert_fail@plt+0x6c14>
   18354:	ldr	r9, [r7]
   18358:	b	18360 <__assert_fail@plt+0x6c3c>
   1835c:	mov	sl, #0
   18360:	cmp	sl, r9
   18364:	bcs	18388 <__assert_fail@plt+0x6c64>
   18368:	ldmib	r7, {r0, r1}
   1836c:	mvn	r2, #0
   18370:	str	r2, [r1, sl, lsl #2]
   18374:	str	r2, [r0, sl, lsl #2]
   18378:	add	sl, sl, #1
   1837c:	ldr	r3, [r7]
   18380:	cmp	sl, r3
   18384:	bcc	18370 <__assert_fail@plt+0x6c4c>
   18388:	mov	r6, r4
   1838c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18390:	cmp	r6, #0
   18394:	ldrb	r0, [r1, #28]
   18398:	and	r0, r0, #249	; 0xf9
   1839c:	orr	r0, r0, r6, lsl #1
   183a0:	strb	r0, [r1, #28]
   183a4:	beq	183cc <__assert_fail@plt+0x6ca8>
   183a8:	ldr	r0, [fp, #20]
   183ac:	cmp	r0, #0
   183b0:	beq	183c4 <__assert_fail@plt+0x6ca0>
   183b4:	ldr	r0, [r5, #4]
   183b8:	ldr	r1, [sp, #32]
   183bc:	sub	r6, r0, r1
   183c0:	b	183d0 <__assert_fail@plt+0x6cac>
   183c4:	ldr	r6, [r5]
   183c8:	b	183d0 <__assert_fail@plt+0x6cac>
   183cc:	mvn	r6, #1
   183d0:	ldr	r4, [sp, #36]	; 0x24
   183d4:	mov	r0, r5
   183d8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   183dc:	cmp	r4, #0
   183e0:	beq	183f0 <__assert_fail@plt+0x6ccc>
   183e4:	ldr	r0, [sp, #24]
   183e8:	add	r0, r0, #136	; 0x88
   183ec:	bl	113a0 <pthread_mutex_unlock@plt>
   183f0:	mov	r0, r6
   183f4:	sub	sp, fp, #28
   183f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183fc:	ldr	r4, [sp, #36]	; 0x24
   18400:	mvn	r6, #1
   18404:	b	183dc <__assert_fail@plt+0x6cb8>
   18408:	ldr	r0, [r7, #4]
   1840c:	lsl	r1, r9, #2
   18410:	str	r1, [sp, #28]
   18414:	bl	228c8 <__assert_fail@plt+0x111a4>
   18418:	mov	r6, #0
   1841c:	cmp	r0, #0
   18420:	beq	18454 <__assert_fail@plt+0x6d30>
   18424:	mov	r5, r0
   18428:	ldr	r0, [r7, #8]
   1842c:	ldr	r1, [sp, #28]
   18430:	bl	228c8 <__assert_fail@plt+0x111a4>
   18434:	cmp	r0, #0
   18438:	beq	1845c <__assert_fail@plt+0x6d38>
   1843c:	str	r9, [r7]
   18440:	str	r5, [r7, #4]
   18444:	str	r0, [r7, #8]
   18448:	b	182fc <__assert_fail@plt+0x6bd8>
   1844c:	ldr	r0, [r7, #4]
   18450:	bl	132e4 <__assert_fail@plt+0x1bc0>
   18454:	mov	r5, r8
   18458:	b	1838c <__assert_fail@plt+0x6c68>
   1845c:	mov	r0, r5
   18460:	b	18450 <__assert_fail@plt+0x6d2c>
   18464:	push	{fp, lr}
   18468:	mov	fp, sp
   1846c:	sub	sp, sp, #16
   18470:	mov	ip, #0
   18474:	str	r2, [sp, #4]
   18478:	str	ip, [sp, #12]
   1847c:	ldr	ip, [fp, #12]
   18480:	str	ip, [sp, #8]
   18484:	ldr	ip, [fp, #8]
   18488:	str	ip, [sp]
   1848c:	bl	1812c <__assert_fail@plt+0x6a08>
   18490:	mov	sp, fp
   18494:	pop	{fp, pc}
   18498:	push	{fp, lr}
   1849c:	mov	fp, sp
   184a0:	sub	sp, sp, #24
   184a4:	mov	ip, #1
   184a8:	str	ip, [sp, #20]
   184ac:	mov	ip, #0
   184b0:	str	ip, [sp, #8]
   184b4:	ldr	ip, [fp, #20]
   184b8:	str	ip, [sp, #16]
   184bc:	ldr	ip, [fp, #16]
   184c0:	str	ip, [sp, #12]
   184c4:	ldr	ip, [fp, #12]
   184c8:	str	ip, [sp, #4]
   184cc:	ldr	ip, [fp, #8]
   184d0:	str	ip, [sp]
   184d4:	bl	184e0 <__assert_fail@plt+0x6dbc>
   184d8:	mov	sp, fp
   184dc:	pop	{fp, pc}
   184e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184e4:	add	fp, sp, #28
   184e8:	sub	sp, sp, #20
   184ec:	ldr	r4, [fp, #8]
   184f0:	mov	r8, r1
   184f4:	mov	r1, r0
   184f8:	mov	r6, r2
   184fc:	orr	r0, r4, r2
   18500:	ldr	r2, [fp, #24]
   18504:	orrs	r0, r0, r2
   18508:	bmi	185bc <__assert_fail@plt+0x6e98>
   1850c:	adds	sl, r6, r4
   18510:	bvs	185bc <__assert_fail@plt+0x6e98>
   18514:	mov	r5, #0
   18518:	cmp	r4, #1
   1851c:	blt	18570 <__assert_fail@plt+0x6e4c>
   18520:	mov	r9, r3
   18524:	cmp	r6, #1
   18528:	blt	18578 <__assert_fail@plt+0x6e54>
   1852c:	mov	r0, sl
   18530:	mov	r5, r1
   18534:	bl	22898 <__assert_fail@plt+0x11174>
   18538:	cmp	r0, #0
   1853c:	beq	185bc <__assert_fail@plt+0x6e98>
   18540:	mov	r1, r8
   18544:	mov	r2, r6
   18548:	mov	r7, r0
   1854c:	bl	11460 <memcpy@plt>
   18550:	add	r0, r7, r6
   18554:	mov	r1, r9
   18558:	mov	r2, r4
   1855c:	bl	11460 <memcpy@plt>
   18560:	ldr	r2, [fp, #24]
   18564:	mov	r1, r5
   18568:	mov	r5, r7
   1856c:	b	1857c <__assert_fail@plt+0x6e58>
   18570:	mov	r7, r8
   18574:	b	1857c <__assert_fail@plt+0x6e58>
   18578:	mov	r7, r9
   1857c:	add	r6, fp, #12
   18580:	ldr	r0, [fp, #28]
   18584:	ldm	r6, {r3, r4, r6}
   18588:	str	r4, [sp]
   1858c:	stmib	sp, {r2, r6}
   18590:	mov	r2, sl
   18594:	str	r0, [sp, #12]
   18598:	mov	r0, r1
   1859c:	mov	r1, r7
   185a0:	bl	1812c <__assert_fail@plt+0x6a08>
   185a4:	mov	r4, r0
   185a8:	mov	r0, r5
   185ac:	bl	132e4 <__assert_fail@plt+0x1bc0>
   185b0:	mov	r0, r4
   185b4:	sub	sp, fp, #28
   185b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185bc:	mvn	r0, #1
   185c0:	b	185b4 <__assert_fail@plt+0x6e90>
   185c4:	push	{fp, lr}
   185c8:	mov	fp, sp
   185cc:	sub	sp, sp, #24
   185d0:	mov	ip, #0
   185d4:	str	ip, [sp, #20]
   185d8:	ldr	ip, [fp, #24]
   185dc:	str	ip, [sp, #16]
   185e0:	ldr	ip, [fp, #20]
   185e4:	str	ip, [sp, #12]
   185e8:	ldr	ip, [fp, #16]
   185ec:	str	ip, [sp, #8]
   185f0:	ldr	ip, [fp, #12]
   185f4:	str	ip, [sp, #4]
   185f8:	ldr	ip, [fp, #8]
   185fc:	str	ip, [sp]
   18600:	bl	184e0 <__assert_fail@plt+0x6dbc>
   18604:	mov	sp, fp
   18608:	pop	{fp, pc}
   1860c:	ldrb	ip, [r0, #28]
   18610:	cmp	r2, #0
   18614:	bic	ip, ip, #6
   18618:	orrne	ip, ip, #2
   1861c:	strb	ip, [r0, #28]
   18620:	ldr	r0, [sp]
   18624:	moveq	r0, r2
   18628:	cmp	r2, #0
   1862c:	moveq	r3, r2
   18630:	stm	r1, {r2, r3}
   18634:	str	r0, [r1, #8]
   18638:	bx	lr
   1863c:	ldr	r1, [r0, #4]
   18640:	movw	r2, #255	; 0xff
   18644:	movt	r2, #4
   18648:	and	r1, r1, r2
   1864c:	cmp	r1, #3
   18650:	beq	18664 <__assert_fail@plt+0x6f40>
   18654:	cmp	r1, #6
   18658:	bxne	lr
   1865c:	ldr	r0, [r0]
   18660:	b	186cc <__assert_fail@plt+0x6fa8>
   18664:	ldr	r0, [r0]
   18668:	b	132e4 <__assert_fail@plt+0x1bc0>
   1866c:	push	{r4, sl, fp, lr}
   18670:	add	fp, sp, #8
   18674:	mov	r4, r0
   18678:	ldr	r0, [r0, #24]
   1867c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   18680:	ldr	r0, [r4, #36]	; 0x24
   18684:	bl	132e4 <__assert_fail@plt+0x1bc0>
   18688:	ldr	r0, [r4, #40]	; 0x28
   1868c:	add	r1, r4, #4
   18690:	cmp	r0, r1
   18694:	beq	186a8 <__assert_fail@plt+0x6f84>
   18698:	ldr	r0, [r0, #8]
   1869c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186a0:	ldr	r0, [r4, #40]	; 0x28
   186a4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186a8:	ldr	r0, [r4, #12]
   186ac:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186b0:	ldr	r0, [r4, #48]	; 0x30
   186b4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186b8:	ldr	r0, [r4, #44]	; 0x2c
   186bc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186c0:	mov	r0, r4
   186c4:	pop	{r4, sl, fp, lr}
   186c8:	b	132e4 <__assert_fail@plt+0x1bc0>
   186cc:	push	{r4, sl, fp, lr}
   186d0:	add	fp, sp, #8
   186d4:	mov	r4, r0
   186d8:	ldr	r0, [r0]
   186dc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186e0:	ldr	r0, [r4, #4]
   186e4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186e8:	ldr	r0, [r4, #8]
   186ec:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186f0:	ldr	r0, [r4, #12]
   186f4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   186f8:	mov	r0, r4
   186fc:	pop	{r4, sl, fp, lr}
   18700:	b	132e4 <__assert_fail@plt+0x1bc0>
   18704:	push	{r4, r5, fp, lr}
   18708:	add	fp, sp, #8
   1870c:	ldr	r4, [r0]
   18710:	ldr	r0, [r4, #56]	; 0x38
   18714:	cmp	r0, #0
   18718:	beq	18730 <__assert_fail@plt+0x700c>
   1871c:	ldr	r5, [r0]
   18720:	bl	132e4 <__assert_fail@plt+0x1bc0>
   18724:	cmp	r5, #0
   18728:	mov	r0, r5
   1872c:	bne	1871c <__assert_fail@plt+0x6ff8>
   18730:	mov	r0, #31
   18734:	mov	r5, #0
   18738:	str	r0, [r4, #64]	; 0x40
   1873c:	str	r5, [r4, #52]	; 0x34
   18740:	str	r5, [r4, #56]	; 0x38
   18744:	ldr	r0, [r4, #16]
   18748:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1874c:	str	r5, [r4, #16]
   18750:	pop	{r4, r5, fp, pc}
   18754:	push	{r4, sl, fp, lr}
   18758:	add	fp, sp, #8
   1875c:	mov	r4, r0
   18760:	ldr	r0, [r0, #8]
   18764:	bl	132e4 <__assert_fail@plt+0x1bc0>
   18768:	ldr	r0, [r4, #12]
   1876c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   18770:	ldrb	r0, [r4, #75]	; 0x4b
   18774:	cmp	r0, #0
   18778:	popeq	{r4, sl, fp, pc}
   1877c:	ldr	r0, [r4, #4]
   18780:	pop	{r4, sl, fp, lr}
   18784:	b	132e4 <__assert_fail@plt+0x1bc0>
   18788:	push	{r4, r5, r6, r7, fp, lr}
   1878c:	add	fp, sp, #16
   18790:	mov	r5, r0
   18794:	ldr	r0, [r0, #80]	; 0x50
   18798:	mov	r4, r1
   1879c:	cmp	r0, #2
   187a0:	blt	187ec <__assert_fail@plt+0x70c8>
   187a4:	mov	r6, #12
   187a8:	cmn	r4, #-1073741823	; 0xc0000001
   187ac:	bhi	18818 <__assert_fail@plt+0x70f4>
   187b0:	ldr	r0, [r5, #8]
   187b4:	lsl	r7, r4, #2
   187b8:	mov	r1, r7
   187bc:	bl	228c8 <__assert_fail@plt+0x111a4>
   187c0:	cmp	r0, #0
   187c4:	beq	18818 <__assert_fail@plt+0x70f4>
   187c8:	str	r0, [r5, #8]
   187cc:	ldr	r0, [r5, #12]
   187d0:	cmp	r0, #0
   187d4:	beq	187ec <__assert_fail@plt+0x70c8>
   187d8:	mov	r1, r7
   187dc:	bl	228c8 <__assert_fail@plt+0x111a4>
   187e0:	cmp	r0, #0
   187e4:	beq	18818 <__assert_fail@plt+0x70f4>
   187e8:	str	r0, [r5, #12]
   187ec:	ldrb	r0, [r5, #75]	; 0x4b
   187f0:	cmp	r0, #0
   187f4:	beq	18810 <__assert_fail@plt+0x70ec>
   187f8:	ldr	r0, [r5, #4]
   187fc:	mov	r1, r4
   18800:	bl	228c8 <__assert_fail@plt+0x111a4>
   18804:	cmp	r0, #0
   18808:	beq	18820 <__assert_fail@plt+0x70fc>
   1880c:	str	r0, [r5, #4]
   18810:	mov	r6, #0
   18814:	str	r4, [r5, #36]	; 0x24
   18818:	mov	r0, r6
   1881c:	pop	{r4, r5, r6, r7, fp, pc}
   18820:	mov	r6, #12
   18824:	b	18818 <__assert_fail@plt+0x70f4>
   18828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1882c:	add	fp, sp, #28
   18830:	sub	sp, sp, #92	; 0x5c
   18834:	mov	r6, r0
   18838:	ldrb	r0, [r0, #74]	; 0x4a
   1883c:	ldr	r8, [r6, #36]	; 0x24
   18840:	ldr	r1, [r6, #48]	; 0x30
   18844:	ldr	sl, [r6, #28]
   18848:	str	r6, [sp]
   1884c:	cmp	r8, r1
   18850:	movgt	r8, r1
   18854:	cmp	r0, #0
   18858:	bne	18874 <__assert_fail@plt+0x7150>
   1885c:	ldr	r0, [r6, #64]	; 0x40
   18860:	cmp	r0, #0
   18864:	bne	18874 <__assert_fail@plt+0x7150>
   18868:	ldrb	r0, [r6, #76]	; 0x4c
   1886c:	cmp	r0, #0
   18870:	beq	1887c <__assert_fail@plt+0x7158>
   18874:	ldr	r7, [r6, #32]
   18878:	b	18a6c <__assert_fail@plt+0x7348>
   1887c:	cmp	r8, sl
   18880:	ble	18a40 <__assert_fail@plt+0x731c>
   18884:	add	r9, r6, #16
   18888:	str	r8, [sp, #4]
   1888c:	ldr	r7, [r6, #24]
   18890:	ldr	r4, [r6]
   18894:	mov	r5, sl
   18898:	add	r0, r7, sl
   1889c:	ldrb	r6, [r4, r0]
   188a0:	tst	r6, #128	; 0x80
   188a4:	bne	188e8 <__assert_fail@plt+0x71c4>
   188a8:	mov	r0, r9
   188ac:	bl	1149c <mbsinit@plt>
   188b0:	cmp	r0, #0
   188b4:	add	sl, sp, #16
   188b8:	beq	188fc <__assert_fail@plt+0x71d8>
   188bc:	mov	r0, r6
   188c0:	bl	116dc <towupper@plt>
   188c4:	cmp	r0, #128	; 0x80
   188c8:	bcs	188f0 <__assert_fail@plt+0x71cc>
   188cc:	ldr	r2, [sp]
   188d0:	add	sl, r5, #1
   188d4:	ldr	r1, [r2, #4]
   188d8:	strb	r0, [r1, r5]
   188dc:	ldr	r1, [r2, #8]
   188e0:	str	r0, [r1, r5, lsl #2]
   188e4:	b	189d8 <__assert_fail@plt+0x72b4>
   188e8:	add	sl, sp, #16
   188ec:	b	188fc <__assert_fail@plt+0x71d8>
   188f0:	ldr	r0, [sp]
   188f4:	ldr	r4, [r0]
   188f8:	ldr	r7, [r0, #24]
   188fc:	ldm	r9, {r0, r1}
   18900:	str	r1, [fp, #-36]	; 0xffffffdc
   18904:	sub	r2, r8, r5
   18908:	mov	r3, r9
   1890c:	str	r0, [fp, #-40]	; 0xffffffd8
   18910:	add	r0, r4, r7
   18914:	mov	r7, r5
   18918:	add	r1, r0, r5
   1891c:	add	r0, sp, #12
   18920:	bl	22cd8 <__assert_fail@plt+0x115b4>
   18924:	sub	r8, r0, #1
   18928:	mov	r4, r0
   1892c:	cmn	r8, #4
   18930:	bhi	189f0 <__assert_fail@plt+0x72cc>
   18934:	ldr	r0, [sp, #12]
   18938:	bl	116dc <towupper@plt>
   1893c:	mov	r6, r0
   18940:	ldr	r0, [sp, #12]
   18944:	cmp	r6, r0
   18948:	bne	1896c <__assert_fail@plt+0x7248>
   1894c:	ldr	r5, [sp]
   18950:	ldr	r1, [r5]
   18954:	ldr	r2, [r5, #24]
   18958:	ldr	r0, [r5, #4]
   1895c:	add	r1, r1, r2
   18960:	add	r0, r0, r7
   18964:	add	r1, r1, r7
   18968:	b	18994 <__assert_fail@plt+0x7270>
   1896c:	mov	r0, sl
   18970:	mov	r1, r6
   18974:	sub	r2, fp, #40	; 0x28
   18978:	bl	113d0 <wcrtomb@plt>
   1897c:	cmp	r4, r0
   18980:	bne	18a48 <__assert_fail@plt+0x7324>
   18984:	ldr	r5, [sp]
   18988:	mov	r1, sl
   1898c:	ldr	r0, [r5, #4]
   18990:	add	r0, r0, r7
   18994:	mov	r2, r4
   18998:	bl	11460 <memcpy@plt>
   1899c:	ldr	r0, [r5, #8]
   189a0:	add	sl, r7, #1
   189a4:	str	r6, [r0, r7, lsl #2]
   189a8:	add	r6, r4, r7
   189ac:	cmp	sl, r6
   189b0:	bge	189d8 <__assert_fail@plt+0x72b4>
   189b4:	add	r0, r0, r7, lsl #2
   189b8:	mvn	r1, #3
   189bc:	add	r2, r1, r4, lsl #2
   189c0:	mov	r1, #255	; 0xff
   189c4:	add	r0, r0, #4
   189c8:	bl	1161c <memset@plt>
   189cc:	subs	r8, r8, #1
   189d0:	bne	189cc <__assert_fail@plt+0x72a8>
   189d4:	mov	sl, r6
   189d8:	ldr	r8, [sp, #4]
   189dc:	ldr	r6, [sp]
   189e0:	mov	r7, sl
   189e4:	cmp	r8, sl
   189e8:	bgt	1888c <__assert_fail@plt+0x7168>
   189ec:	b	18db8 <__assert_fail@plt+0x7694>
   189f0:	add	r0, r4, #1
   189f4:	cmp	r0, #2
   189f8:	bcc	18a10 <__assert_fail@plt+0x72ec>
   189fc:	ldr	r1, [sp]
   18a00:	ldr	r0, [r1, #36]	; 0x24
   18a04:	ldr	r1, [r1, #48]	; 0x30
   18a08:	cmp	r0, r1
   18a0c:	blt	18a54 <__assert_fail@plt+0x7330>
   18a10:	ldr	r1, [sp]
   18a14:	add	sl, r7, #1
   18a18:	cmn	r4, #1
   18a1c:	ldr	r0, [r1, #4]
   18a20:	strb	r6, [r0, r7]
   18a24:	ldr	r0, [r1, #8]
   18a28:	str	r6, [r0, r7, lsl #2]
   18a2c:	bne	189d8 <__assert_fail@plt+0x72b4>
   18a30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18a34:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18a38:	stm	r9, {r0, r1}
   18a3c:	b	189d8 <__assert_fail@plt+0x72b4>
   18a40:	mov	r7, sl
   18a44:	b	18db8 <__assert_fail@plt+0x7694>
   18a48:	ldm	sp, {r6, r8}
   18a4c:	mov	sl, r7
   18a50:	b	18a74 <__assert_fail@plt+0x7350>
   18a54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18a58:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18a5c:	mov	sl, r7
   18a60:	stm	r9, {r0, r1}
   18a64:	ldr	r6, [sp]
   18a68:	b	18db8 <__assert_fail@plt+0x7694>
   18a6c:	cmp	sl, r8
   18a70:	bge	18db8 <__assert_fail@plt+0x7694>
   18a74:	mov	r3, r6
   18a78:	ldr	r0, [r6, #16]!
   18a7c:	sub	r2, r8, sl
   18a80:	str	r7, [sp, #4]
   18a84:	ldr	r1, [r6, #4]
   18a88:	str	r0, [fp, #-40]	; 0xffffffd8
   18a8c:	str	r1, [fp, #-36]	; 0xffffffdc
   18a90:	ldr	r0, [r6, #48]	; 0x30
   18a94:	cmp	r0, #0
   18a98:	bne	18b78 <__assert_fail@plt+0x7454>
   18a9c:	ldr	r0, [r3]
   18aa0:	ldr	r1, [r3, #24]
   18aa4:	add	r0, r0, r1
   18aa8:	add	r4, r0, r7
   18aac:	add	r0, sp, #8
   18ab0:	mov	r1, r4
   18ab4:	mov	r3, r6
   18ab8:	mov	r9, r8
   18abc:	bl	22cd8 <__assert_fail@plt+0x115b4>
   18ac0:	sub	r8, r0, #1
   18ac4:	mov	r5, r0
   18ac8:	cmn	r8, #4
   18acc:	bhi	18bd8 <__assert_fail@plt+0x74b4>
   18ad0:	ldr	r0, [sp, #8]
   18ad4:	bl	116dc <towupper@plt>
   18ad8:	mov	r7, r0
   18adc:	ldr	r0, [sp, #8]
   18ae0:	cmp	r7, r0
   18ae4:	bne	18af4 <__assert_fail@plt+0x73d0>
   18ae8:	ldr	r6, [sp]
   18aec:	mov	r1, r4
   18af0:	b	18b14 <__assert_fail@plt+0x73f0>
   18af4:	add	r0, sp, #16
   18af8:	sub	r2, fp, #40	; 0x28
   18afc:	mov	r1, r7
   18b00:	bl	113d0 <wcrtomb@plt>
   18b04:	cmp	r0, r5
   18b08:	bne	18c54 <__assert_fail@plt+0x7530>
   18b0c:	ldr	r6, [sp]
   18b10:	add	r1, sp, #16
   18b14:	ldr	r0, [r6, #4]
   18b18:	add	r0, r0, sl
   18b1c:	mov	r2, r5
   18b20:	bl	11460 <memcpy@plt>
   18b24:	ldrb	r0, [r6, #76]	; 0x4c
   18b28:	cmp	r0, #0
   18b2c:	bne	18d80 <__assert_fail@plt+0x765c>
   18b30:	ldr	r0, [r6, #8]
   18b34:	add	r4, r5, sl
   18b38:	str	r7, [r0, sl, lsl #2]
   18b3c:	ldr	r7, [sp, #4]
   18b40:	add	sl, sl, #1
   18b44:	cmp	sl, r4
   18b48:	add	r7, r5, r7
   18b4c:	bge	18b70 <__assert_fail@plt+0x744c>
   18b50:	mvn	r1, #3
   18b54:	add	r0, r0, sl, lsl #2
   18b58:	add	r2, r1, r5, lsl #2
   18b5c:	mov	r1, #255	; 0xff
   18b60:	bl	1161c <memset@plt>
   18b64:	subs	r8, r8, #1
   18b68:	bne	18b64 <__assert_fail@plt+0x7440>
   18b6c:	mov	sl, r4
   18b70:	mov	r8, r9
   18b74:	b	18a6c <__assert_fail@plt+0x7348>
   18b78:	add	r4, sp, #16
   18b7c:	cmp	r2, #1
   18b80:	blt	18aac <__assert_fail@plt+0x7388>
   18b84:	ldr	r1, [sp]
   18b88:	ldr	r1, [r1, #80]	; 0x50
   18b8c:	cmp	r1, #1
   18b90:	blt	18aac <__assert_fail@plt+0x7388>
   18b94:	ldr	r4, [sp]
   18b98:	mov	r5, r7
   18b9c:	ldr	r7, [r4, #24]
   18ba0:	ldr	r3, [r4]
   18ba4:	add	r4, sp, #16
   18ba8:	add	r7, r5, r7
   18bac:	add	r3, r3, r7
   18bb0:	mov	r7, #0
   18bb4:	ldrb	r5, [r3, r7]
   18bb8:	ldrb	r5, [r0, r5]
   18bbc:	strb	r5, [r4, r7]
   18bc0:	add	r7, r7, #1
   18bc4:	cmp	r7, r2
   18bc8:	bge	18aac <__assert_fail@plt+0x7388>
   18bcc:	cmp	r7, r1
   18bd0:	blt	18bb4 <__assert_fail@plt+0x7490>
   18bd4:	b	18aac <__assert_fail@plt+0x7388>
   18bd8:	ldr	r3, [sp]
   18bdc:	add	r0, r5, #1
   18be0:	cmp	r0, #2
   18be4:	bcc	18bf8 <__assert_fail@plt+0x74d4>
   18be8:	ldr	r0, [r3, #36]	; 0x24
   18bec:	ldr	r1, [r3, #48]	; 0x30
   18bf0:	cmp	r0, r1
   18bf4:	blt	18da4 <__assert_fail@plt+0x7680>
   18bf8:	ldr	r2, [r3, #24]
   18bfc:	ldr	r7, [sp, #4]
   18c00:	ldr	r0, [r3]
   18c04:	ldr	r1, [r3, #64]	; 0x40
   18c08:	add	r2, r2, r7
   18c0c:	cmp	r1, #0
   18c10:	ldrb	r0, [r0, r2]
   18c14:	bne	18dd4 <__assert_fail@plt+0x76b0>
   18c18:	ldr	r2, [sp]
   18c1c:	mov	r8, r9
   18c20:	ldr	r1, [r2, #4]
   18c24:	strb	r0, [r1, sl]
   18c28:	ldrb	r1, [r2, #76]	; 0x4c
   18c2c:	cmp	r1, #0
   18c30:	bne	18ddc <__assert_fail@plt+0x76b8>
   18c34:	ldr	r1, [r2, #8]
   18c38:	add	r7, r7, #1
   18c3c:	cmn	r5, #1
   18c40:	str	r0, [r1, sl, lsl #2]
   18c44:	add	sl, sl, #1
   18c48:	beq	18de8 <__assert_fail@plt+0x76c4>
   18c4c:	ldr	r6, [sp]
   18c50:	b	18a6c <__assert_fail@plt+0x7348>
   18c54:	mov	r2, r0
   18c58:	cmn	r0, #1
   18c5c:	beq	18ae8 <__assert_fail@plt+0x73c4>
   18c60:	ldr	r3, [sp]
   18c64:	add	r9, r2, sl
   18c68:	ldr	r1, [r3, #36]	; 0x24
   18c6c:	cmp	r9, r1
   18c70:	bhi	18da4 <__assert_fail@plt+0x7680>
   18c74:	ldr	r0, [r3, #12]
   18c78:	mov	r6, r3
   18c7c:	cmp	r0, #0
   18c80:	bne	18ca0 <__assert_fail@plt+0x757c>
   18c84:	lsl	r0, r1, #2
   18c88:	mov	r4, r2
   18c8c:	bl	22898 <__assert_fail@plt+0x11174>
   18c90:	mov	r2, r4
   18c94:	cmp	r0, #0
   18c98:	str	r0, [r6, #12]
   18c9c:	beq	18dcc <__assert_fail@plt+0x76a8>
   18ca0:	ldrb	r1, [r6, #76]	; 0x4c
   18ca4:	cmp	r1, #0
   18ca8:	bne	18cd0 <__assert_fail@plt+0x75ac>
   18cac:	cmp	sl, #0
   18cb0:	beq	18cc8 <__assert_fail@plt+0x75a4>
   18cb4:	mov	r1, #0
   18cb8:	str	r1, [r0, r1, lsl #2]
   18cbc:	add	r1, r1, #1
   18cc0:	cmp	sl, r1
   18cc4:	bne	18cb8 <__assert_fail@plt+0x7594>
   18cc8:	mov	r0, #1
   18ccc:	strb	r0, [r6, #76]	; 0x4c
   18cd0:	ldr	r0, [r6, #4]
   18cd4:	add	r1, sp, #16
   18cd8:	mov	r4, r2
   18cdc:	add	r0, r0, sl
   18ce0:	bl	11460 <memcpy@plt>
   18ce4:	ldr	r1, [r6, #8]
   18ce8:	cmp	r4, #2
   18cec:	str	r7, [r1, sl, lsl #2]
   18cf0:	ldr	r0, [r6, #12]
   18cf4:	ldr	r6, [sp, #4]
   18cf8:	str	r6, [r0, sl, lsl #2]
   18cfc:	bcc	18d34 <__assert_fail@plt+0x7610>
   18d00:	add	r0, r0, sl, lsl #2
   18d04:	add	r1, r1, sl, lsl #2
   18d08:	mov	r2, #1
   18d0c:	mvn	r3, #0
   18d10:	cmp	r2, r5
   18d14:	mov	r7, r8
   18d18:	movcc	r7, r2
   18d1c:	add	r7, r7, r6
   18d20:	str	r7, [r0, r2, lsl #2]
   18d24:	str	r3, [r1, r2, lsl #2]
   18d28:	add	r2, r2, #1
   18d2c:	cmp	r4, r2
   18d30:	bne	18d10 <__assert_fail@plt+0x75ec>
   18d34:	ldr	r3, [sp]
   18d38:	sub	r1, r4, r5
   18d3c:	mov	r7, r6
   18d40:	ldr	r0, [r3, #48]	; 0x30
   18d44:	ldr	r2, [r3, #52]	; 0x34
   18d48:	add	r0, r0, r1
   18d4c:	cmp	r2, r6
   18d50:	mov	r6, r3
   18d54:	str	r0, [r3, #48]	; 0x30
   18d58:	ble	18d68 <__assert_fail@plt+0x7644>
   18d5c:	ldr	r2, [r6, #56]	; 0x38
   18d60:	add	r1, r2, r1
   18d64:	str	r1, [r6, #56]	; 0x38
   18d68:	ldr	r8, [r6, #36]	; 0x24
   18d6c:	add	r7, r5, r7
   18d70:	mov	sl, r9
   18d74:	cmp	r8, r0
   18d78:	movgt	r8, r0
   18d7c:	b	18a6c <__assert_fail@plt+0x7348>
   18d80:	ldr	r0, [r6, #12]
   18d84:	ldr	r1, [sp, #4]
   18d88:	mov	r2, r5
   18d8c:	add	r0, r0, sl, lsl #2
   18d90:	str	r1, [r0], #4
   18d94:	add	r1, r1, #1
   18d98:	subs	r2, r2, #1
   18d9c:	bne	18d90 <__assert_fail@plt+0x766c>
   18da0:	b	18b30 <__assert_fail@plt+0x740c>
   18da4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18da8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18dac:	stm	r6, {r0, r1}
   18db0:	mov	r6, r3
   18db4:	ldr	r7, [sp, #4]
   18db8:	mov	r0, #0
   18dbc:	str	sl, [r6, #28]
   18dc0:	str	r7, [r6, #32]
   18dc4:	sub	sp, fp, #28
   18dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dcc:	mov	r0, #12
   18dd0:	b	18dc4 <__assert_fail@plt+0x76a0>
   18dd4:	ldrb	r0, [r1, r0]
   18dd8:	b	18c18 <__assert_fail@plt+0x74f4>
   18ddc:	ldr	r1, [r2, #12]
   18de0:	str	r7, [r1, sl, lsl #2]
   18de4:	b	18c34 <__assert_fail@plt+0x7510>
   18de8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18dec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18df0:	stm	r6, {r0, r1}
   18df4:	b	18c4c <__assert_fail@plt+0x7528>
   18df8:	push	{r4, r5, r6, sl, fp, lr}
   18dfc:	add	fp, sp, #16
   18e00:	mov	r4, r0
   18e04:	ldr	r5, [r0, #28]
   18e08:	ldr	r6, [r0, #36]	; 0x24
   18e0c:	ldr	r0, [r0, #48]	; 0x30
   18e10:	cmp	r6, r0
   18e14:	movgt	r6, r0
   18e18:	cmp	r5, r6
   18e1c:	bge	18e58 <__assert_fail@plt+0x7734>
   18e20:	ldr	r0, [r4]
   18e24:	ldr	r2, [r4, #24]
   18e28:	ldr	r1, [r4, #64]	; 0x40
   18e2c:	add	r0, r0, r2
   18e30:	cmp	r1, #0
   18e34:	ldrb	r0, [r0, r5]
   18e38:	bne	18e50 <__assert_fail@plt+0x772c>
   18e3c:	bl	11694 <toupper@plt>
   18e40:	ldr	r1, [r4, #4]
   18e44:	strb	r0, [r1, r5]
   18e48:	add	r5, r5, #1
   18e4c:	b	18e18 <__assert_fail@plt+0x76f4>
   18e50:	ldrb	r0, [r1, r0]
   18e54:	b	18e3c <__assert_fail@plt+0x7718>
   18e58:	str	r5, [r4, #28]
   18e5c:	str	r5, [r4, #32]
   18e60:	pop	{r4, r5, r6, sl, fp, pc}
   18e64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e68:	add	fp, sp, #28
   18e6c:	sub	sp, sp, #76	; 0x4c
   18e70:	mov	r4, r0
   18e74:	ldr	sl, [r0, #28]
   18e78:	ldr	r6, [r0, #36]	; 0x24
   18e7c:	ldr	r0, [r0, #48]	; 0x30
   18e80:	cmp	r6, r0
   18e84:	movgt	r6, r0
   18e88:	cmp	r6, sl
   18e8c:	ble	1903c <__assert_fail@plt+0x7918>
   18e90:	add	r9, r4, #16
   18e94:	add	r0, sp, #8
   18e98:	ldr	r3, [r4, #64]	; 0x40
   18e9c:	ldm	r9, {r1, r5}
   18ea0:	sub	r2, r6, sl
   18ea4:	str	r1, [sp, #4]
   18ea8:	cmp	r3, #0
   18eac:	bne	18f7c <__assert_fail@plt+0x7858>
   18eb0:	ldr	r3, [r4]
   18eb4:	ldr	r1, [r4, #24]
   18eb8:	add	r1, r3, r1
   18ebc:	add	r1, r1, sl
   18ec0:	mov	r3, r9
   18ec4:	mov	r8, r0
   18ec8:	bl	22cd8 <__assert_fail@plt+0x115b4>
   18ecc:	mov	r7, r0
   18ed0:	add	r0, r0, #1
   18ed4:	cmp	r0, #2
   18ed8:	bcc	18ef4 <__assert_fail@plt+0x77d0>
   18edc:	cmn	r7, #2
   18ee0:	bne	18f24 <__assert_fail@plt+0x7800>
   18ee4:	ldr	r0, [r4, #36]	; 0x24
   18ee8:	ldr	r1, [r4, #48]	; 0x30
   18eec:	cmp	r0, r1
   18ef0:	blt	19034 <__assert_fail@plt+0x7910>
   18ef4:	ldr	r1, [r4, #24]
   18ef8:	ldr	r0, [r4]
   18efc:	add	r1, r1, sl
   18f00:	ldrb	r0, [r0, r1]
   18f04:	str	r0, [sp, #8]
   18f08:	ldr	r1, [r4, #64]	; 0x40
   18f0c:	cmp	r1, #0
   18f10:	bne	19028 <__assert_fail@plt+0x7904>
   18f14:	ldr	r1, [sp, #4]
   18f18:	mov	r7, #1
   18f1c:	stm	r9, {r1, r5}
   18f20:	b	18f28 <__assert_fail@plt+0x7804>
   18f24:	ldr	r0, [sp, #8]
   18f28:	ldr	r1, [r4, #8]
   18f2c:	add	r5, r7, sl
   18f30:	add	r2, sl, #1
   18f34:	cmp	r2, r5
   18f38:	str	r0, [r1, sl, lsl #2]
   18f3c:	bge	18f68 <__assert_fail@plt+0x7844>
   18f40:	mvn	r0, #3
   18f44:	add	r2, r0, r7, lsl #2
   18f48:	add	r0, r1, sl, lsl #2
   18f4c:	mov	r1, #255	; 0xff
   18f50:	add	r0, r0, #4
   18f54:	bl	1161c <memset@plt>
   18f58:	sub	r0, r7, #1
   18f5c:	subs	r0, r0, #1
   18f60:	bne	18f5c <__assert_fail@plt+0x7838>
   18f64:	mov	r2, r5
   18f68:	cmp	r6, r2
   18f6c:	mov	sl, r2
   18f70:	mov	r0, r8
   18f74:	bgt	18e98 <__assert_fail@plt+0x7774>
   18f78:	b	19040 <__assert_fail@plt+0x791c>
   18f7c:	cmp	r2, #1
   18f80:	add	r1, sp, #12
   18f84:	blt	18ec0 <__assert_fail@plt+0x779c>
   18f88:	ldr	r1, [r4, #80]	; 0x50
   18f8c:	cmp	r1, #1
   18f90:	add	r1, sp, #12
   18f94:	blt	18ec0 <__assert_fail@plt+0x779c>
   18f98:	ldr	r7, [r4, #24]
   18f9c:	ldm	r4, {r1, ip}
   18fa0:	cmp	r2, #2
   18fa4:	add	r7, sl, r7
   18fa8:	ldrb	r1, [r1, r7]
   18fac:	ldrb	r1, [r3, r1]
   18fb0:	strb	r1, [ip, sl]
   18fb4:	strb	r1, [sp, #12]
   18fb8:	add	r1, sp, #12
   18fbc:	blt	18ec0 <__assert_fail@plt+0x779c>
   18fc0:	ldr	r1, [r4, #80]	; 0x50
   18fc4:	cmp	r1, #2
   18fc8:	add	r1, sp, #12
   18fcc:	blt	18ec0 <__assert_fail@plt+0x779c>
   18fd0:	mov	lr, r0
   18fd4:	mov	r0, #1
   18fd8:	ldr	r7, [r4, #24]
   18fdc:	ldm	r4, {r1, ip}
   18fe0:	ldr	r3, [r4, #64]	; 0x40
   18fe4:	add	r1, r1, r7
   18fe8:	add	r1, r1, sl
   18fec:	ldrb	r1, [r1, r0]
   18ff0:	ldrb	r1, [r3, r1]
   18ff4:	add	r3, ip, sl
   18ff8:	strb	r1, [r3, r0]
   18ffc:	add	r3, sp, #12
   19000:	strb	r1, [r3, r0]
   19004:	add	r0, r0, #1
   19008:	cmp	r0, r2
   1900c:	bge	1901c <__assert_fail@plt+0x78f8>
   19010:	ldr	r1, [r4, #80]	; 0x50
   19014:	cmp	r0, r1
   19018:	blt	18fd8 <__assert_fail@plt+0x78b4>
   1901c:	add	r1, sp, #12
   19020:	mov	r0, lr
   19024:	b	18ec0 <__assert_fail@plt+0x779c>
   19028:	ldrb	r0, [r1, r0]
   1902c:	str	r0, [sp, #8]
   19030:	b	18f14 <__assert_fail@plt+0x77f0>
   19034:	ldr	r0, [sp, #4]
   19038:	stm	r9, {r0, r5}
   1903c:	mov	r2, sl
   19040:	str	r2, [r4, #28]
   19044:	str	r2, [r4, #32]
   19048:	sub	sp, fp, #28
   1904c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19050:	push	{r4, sl, fp, lr}
   19054:	add	fp, sp, #8
   19058:	ldr	ip, [r0, #36]	; 0x24
   1905c:	ldr	r3, [r0, #48]	; 0x30
   19060:	ldr	r1, [r0, #28]
   19064:	cmp	ip, r3
   19068:	movgt	ip, r3
   1906c:	cmp	r1, ip
   19070:	bge	19098 <__assert_fail@plt+0x7974>
   19074:	ldr	r2, [r0, #24]
   19078:	ldm	r0, {r3, lr}
   1907c:	ldr	r4, [r0, #64]	; 0x40
   19080:	add	r2, r3, r2
   19084:	ldrb	r2, [r2, r1]
   19088:	ldrb	r2, [r4, r2]
   1908c:	strb	r2, [lr, r1]
   19090:	add	r1, r1, #1
   19094:	b	1906c <__assert_fail@plt+0x7948>
   19098:	str	r1, [r0, #28]
   1909c:	str	r1, [r0, #32]
   190a0:	pop	{r4, sl, fp, pc}
   190a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190a8:	add	fp, sp, #28
   190ac:	sub	sp, sp, #28
   190b0:	ldr	r9, [r1]
   190b4:	mov	r5, r0
   190b8:	ldr	r8, [fp, #12]
   190bc:	mov	r6, r2
   190c0:	str	r1, [sp, #12]
   190c4:	str	r3, [sp, #16]
   190c8:	ldr	r0, [r9, #84]	; 0x54
   190cc:	str	r8, [sp, #4]
   190d0:	str	r0, [sp, #8]
   190d4:	ldr	r0, [fp, #8]
   190d8:	str	r0, [sp]
   190dc:	mov	r0, r5
   190e0:	bl	198e4 <__assert_fail@plt+0x81c0>
   190e4:	mov	r4, r0
   190e8:	cmp	r0, #0
   190ec:	bne	190fc <__assert_fail@plt+0x79d8>
   190f0:	ldr	r0, [r8]
   190f4:	cmp	r0, #0
   190f8:	bne	191ec <__assert_fail@plt+0x7ac8>
   190fc:	ldr	r0, [sp, #16]
   19100:	ldr	r8, [fp, #8]
   19104:	mov	r7, #10
   19108:	orr	sl, r0, #8388608	; 0x800000
   1910c:	ldrb	r0, [r6, #4]
   19110:	cmp	r0, #10
   19114:	bne	191f0 <__assert_fail@plt+0x7acc>
   19118:	mov	r0, r6
   1911c:	mov	r1, r5
   19120:	mov	r2, sl
   19124:	bl	19254 <__assert_fail@plt+0x7b30>
   19128:	ldr	r1, [r5, #40]	; 0x28
   1912c:	mov	r2, #0
   19130:	add	r0, r1, r0
   19134:	str	r0, [r5, #40]	; 0x28
   19138:	ldrb	r0, [r6, #4]
   1913c:	orr	r1, r0, #8
   19140:	cmp	r1, #10
   19144:	bne	19174 <__assert_fail@plt+0x7a50>
   19148:	mov	r0, #0
   1914c:	str	r7, [sp, #24]
   19150:	mov	r1, r4
   19154:	add	r3, sp, #20
   19158:	str	r0, [sp, #20]
   1915c:	mov	r0, r9
   19160:	bl	1b074 <__assert_fail@plt+0x9950>
   19164:	mov	r4, r0
   19168:	cmp	r0, #0
   1916c:	bne	1910c <__assert_fail@plt+0x79e8>
   19170:	b	191e0 <__assert_fail@plt+0x7abc>
   19174:	cmp	r8, #0
   19178:	beq	19184 <__assert_fail@plt+0x7a60>
   1917c:	cmp	r0, #9
   19180:	beq	19148 <__assert_fail@plt+0x7a24>
   19184:	ldr	r0, [sp, #8]
   19188:	ldr	r7, [r9, #84]	; 0x54
   1918c:	ldr	r1, [sp, #12]
   19190:	ldr	r3, [sp, #16]
   19194:	mov	r2, r6
   19198:	str	r0, [r9, #84]	; 0x54
   1919c:	str	r8, [sp]
   191a0:	ldr	r8, [fp, #12]
   191a4:	mov	r0, r5
   191a8:	str	r8, [sp, #4]
   191ac:	bl	198e4 <__assert_fail@plt+0x81c0>
   191b0:	mov	r2, r0
   191b4:	cmp	r0, #0
   191b8:	bne	191c8 <__assert_fail@plt+0x7aa4>
   191bc:	ldr	r0, [r8]
   191c0:	cmp	r0, #0
   191c4:	bne	191fc <__assert_fail@plt+0x7ad8>
   191c8:	ldr	r0, [r9, #84]	; 0x54
   191cc:	ldr	r8, [fp, #8]
   191d0:	orr	r0, r0, r7
   191d4:	mov	r7, #10
   191d8:	str	r0, [r9, #84]	; 0x54
   191dc:	b	19148 <__assert_fail@plt+0x7a24>
   191e0:	ldr	r1, [fp, #12]
   191e4:	mov	r0, #12
   191e8:	str	r0, [r1]
   191ec:	mov	r4, #0
   191f0:	mov	r0, r4
   191f4:	sub	sp, fp, #28
   191f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191fc:	cmp	r4, #0
   19200:	beq	191ec <__assert_fail@plt+0x7ac8>
   19204:	mov	r5, r4
   19208:	ldr	r4, [r4, #4]
   1920c:	cmp	r4, #0
   19210:	bne	19204 <__assert_fail@plt+0x7ae0>
   19214:	ldr	r4, [r5, #8]
   19218:	cmp	r4, #0
   1921c:	bne	19204 <__assert_fail@plt+0x7ae0>
   19220:	add	r0, r5, #20
   19224:	bl	1863c <__assert_fail@plt+0x6f18>
   19228:	ldr	r0, [r5]
   1922c:	cmp	r0, #0
   19230:	beq	191ec <__assert_fail@plt+0x7ac8>
   19234:	ldr	r4, [r0, #8]
   19238:	cmp	r4, r5
   1923c:	mov	r5, r0
   19240:	beq	19220 <__assert_fail@plt+0x7afc>
   19244:	cmp	r4, #0
   19248:	mov	r5, r0
   1924c:	beq	19220 <__assert_fail@plt+0x7afc>
   19250:	b	19204 <__assert_fail@plt+0x7ae0>
   19254:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19258:	add	fp, sp, #24
   1925c:	sub	sp, sp, #8
   19260:	mov	r9, r0
   19264:	mov	r7, r1
   19268:	ldr	r0, [r1, #40]	; 0x28
   1926c:	ldr	r1, [r1, #56]	; 0x38
   19270:	cmp	r1, r0
   19274:	ble	1935c <__assert_fail@plt+0x7c38>
   19278:	ldr	r1, [r7, #4]
   1927c:	mov	r5, r9
   19280:	mov	r8, r2
   19284:	ldrb	r6, [r1, r0]
   19288:	strb	r6, [r5], #4
   1928c:	ldr	r0, [r5]
   19290:	bic	r1, r0, #6291456	; 0x600000
   19294:	str	r1, [r5]
   19298:	ldr	r3, [r7, #80]	; 0x50
   1929c:	cmp	r3, #2
   192a0:	blt	192c4 <__assert_fail@plt+0x7ba0>
   192a4:	ldr	r2, [r7, #28]
   192a8:	ldr	r1, [r7, #40]	; 0x28
   192ac:	cmp	r1, r2
   192b0:	beq	192c4 <__assert_fail@plt+0x7ba0>
   192b4:	ldr	r2, [r7, #8]
   192b8:	ldr	r1, [r2, r1, lsl #2]
   192bc:	cmn	r1, #1
   192c0:	beq	19618 <__assert_fail@plt+0x7ef4>
   192c4:	movw	r1, #65280	; 0xff00
   192c8:	cmp	r6, #92	; 0x5c
   192cc:	movt	r1, #65439	; 0xff9f
   192d0:	bne	1936c <__assert_fail@plt+0x7c48>
   192d4:	ldr	r6, [r7, #40]	; 0x28
   192d8:	ldr	r4, [r7, #48]	; 0x30
   192dc:	add	r2, r6, #1
   192e0:	cmp	r2, r4
   192e4:	bge	193c0 <__assert_fail@plt+0x7c9c>
   192e8:	ldrb	r4, [r7, #75]	; 0x4b
   192ec:	cmp	r4, #0
   192f0:	bne	19870 <__assert_fail@plt+0x814c>
   192f4:	ldr	r3, [r7, #4]
   192f8:	ldrb	r6, [r3, r2]
   192fc:	and	r0, r0, r1
   19300:	strb	r6, [r9]
   19304:	orr	r4, r0, #1
   19308:	str	r4, [r9, #4]
   1930c:	ldr	r0, [r7, #80]	; 0x50
   19310:	cmp	r0, #2
   19314:	blt	194d0 <__assert_fail@plt+0x7dac>
   19318:	ldr	r0, [r7, #8]
   1931c:	ldr	r1, [r7, #40]	; 0x28
   19320:	add	r0, r0, r1, lsl #2
   19324:	ldr	r4, [r0, #4]
   19328:	mov	r0, r4
   1932c:	bl	11604 <iswalnum@plt>
   19330:	sub	r1, r4, #95	; 0x5f
   19334:	cmp	r0, #0
   19338:	clz	r1, r1
   1933c:	movwne	r0, #1
   19340:	lsr	r1, r1, #5
   19344:	orr	r0, r1, r0
   19348:	ldr	r1, [r5]
   1934c:	bic	r1, r1, #4194304	; 0x400000
   19350:	orr	r0, r1, r0, lsl #22
   19354:	uxtb	r1, r6
   19358:	b	194f4 <__assert_fail@plt+0x7dd0>
   1935c:	mov	r0, #2
   19360:	mov	r4, #0
   19364:	strb	r0, [r9, #4]
   19368:	b	19844 <__assert_fail@plt+0x8120>
   1936c:	and	r0, r0, r1
   19370:	orr	r4, r0, #1
   19374:	str	r4, [r5]
   19378:	ldr	r0, [r7, #80]	; 0x50
   1937c:	cmp	r0, #2
   19380:	blt	193cc <__assert_fail@plt+0x7ca8>
   19384:	ldr	r0, [r7, #8]
   19388:	ldr	r1, [r7, #40]	; 0x28
   1938c:	ldr	r4, [r0, r1, lsl #2]
   19390:	mov	r0, r4
   19394:	bl	11604 <iswalnum@plt>
   19398:	sub	r1, r4, #95	; 0x5f
   1939c:	cmp	r0, #0
   193a0:	clz	r1, r1
   193a4:	movwne	r0, #1
   193a8:	lsr	r1, r1, #5
   193ac:	orr	r0, r1, r0
   193b0:	ldr	r1, [r5]
   193b4:	bic	r1, r1, #4194304	; 0x400000
   193b8:	orr	r0, r1, r0, lsl #22
   193bc:	b	193ec <__assert_fail@plt+0x7cc8>
   193c0:	and	r0, r0, r1
   193c4:	orr	r0, r0, #36	; 0x24
   193c8:	b	1962c <__assert_fail@plt+0x7f08>
   193cc:	bl	115a4 <__ctype_b_loc@plt>
   193d0:	ldr	r0, [r0]
   193d4:	cmp	r6, #95	; 0x5f
   193d8:	add	r0, r0, r6, lsl #1
   193dc:	ldrh	r0, [r0]
   193e0:	ubfx	r0, r0, #3, #1
   193e4:	movweq	r0, #1
   193e8:	orr	r0, r4, r0, lsl #22
   193ec:	mov	r4, #1
   193f0:	cmp	r6, #62	; 0x3e
   193f4:	str	r0, [r5]
   193f8:	bgt	19494 <__assert_fail@plt+0x7d70>
   193fc:	sub	r1, r6, #36	; 0x24
   19400:	cmp	r1, #10
   19404:	bhi	19688 <__assert_fail@plt+0x7f64>
   19408:	add	r2, pc, #0
   1940c:	ldr	pc, [r2, r1, lsl #2]
   19410:	andeq	r9, r1, ip, lsr r4
   19414:	andeq	r9, r1, r4, asr #16
   19418:	andeq	r9, r1, r4, asr #16
   1941c:	andeq	r9, r1, r4, asr #16
   19420:	muleq	r1, ip, r6
   19424:	andeq	r9, r1, ip, lsr #13
   19428:			; <UNDEFINED> instruction: 0x000196bc
   1942c:	andeq	r9, r1, r4, asr #13
   19430:	andeq	r9, r1, r4, asr #16
   19434:	andeq	r9, r1, r4, asr #16
   19438:	ldrdeq	r9, [r1], -r4
   1943c:	tst	r8, #8
   19440:	bne	1948c <__assert_fail@plt+0x7d68>
   19444:	ldr	r1, [r7, #40]	; 0x28
   19448:	ldr	r2, [r7, #48]	; 0x30
   1944c:	add	r1, r1, #1
   19450:	cmp	r1, r2
   19454:	beq	1948c <__assert_fail@plt+0x7d68>
   19458:	str	r1, [r7, #40]	; 0x28
   1945c:	mov	r0, sp
   19460:	mov	r1, r7
   19464:	mov	r2, r8
   19468:	bl	19254 <__assert_fail@plt+0x7b30>
   1946c:	ldr	r0, [r7, #40]	; 0x28
   19470:	sub	r0, r0, #1
   19474:	str	r0, [r7, #40]	; 0x28
   19478:	ldrb	r0, [sp, #4]
   1947c:	sub	r0, r0, #9
   19480:	cmp	r0, #1
   19484:	bhi	19844 <__assert_fail@plt+0x8120>
   19488:	ldr	r0, [r5]
   1948c:	mov	r1, #32
   19490:	b	194c8 <__assert_fail@plt+0x7da4>
   19494:	cmp	r6, #122	; 0x7a
   19498:	bgt	195f0 <__assert_fail@plt+0x7ecc>
   1949c:	cmp	r6, #63	; 0x3f
   194a0:	beq	196dc <__assert_fail@plt+0x7fb8>
   194a4:	cmp	r6, #91	; 0x5b
   194a8:	beq	196ec <__assert_fail@plt+0x7fc8>
   194ac:	cmp	r6, #94	; 0x5e
   194b0:	bne	19844 <__assert_fail@plt+0x8120>
   194b4:	movw	r1, #8
   194b8:	movt	r1, #128	; 0x80
   194bc:	tst	r8, r1
   194c0:	beq	19734 <__assert_fail@plt+0x8010>
   194c4:	mov	r1, #16
   194c8:	mov	r2, #12
   194cc:	b	195e0 <__assert_fail@plt+0x7ebc>
   194d0:	bl	115a4 <__ctype_b_loc@plt>
   194d4:	ldr	r0, [r0]
   194d8:	uxtb	r1, r6
   194dc:	cmp	r1, #95	; 0x5f
   194e0:	add	r0, r0, r1, lsl #1
   194e4:	ldrh	r0, [r0]
   194e8:	ubfx	r0, r0, #3, #1
   194ec:	movweq	r0, #1
   194f0:	orr	r0, r4, r0, lsl #22
   194f4:	uxtb	r2, r6
   194f8:	mov	r4, #2
   194fc:	str	r0, [r5]
   19500:	cmp	r2, #95	; 0x5f
   19504:	bgt	19638 <__assert_fail@plt+0x7f14>
   19508:	sub	r3, r2, #39	; 0x27
   1950c:	cmp	r3, #44	; 0x2c
   19510:	bhi	19760 <__assert_fail@plt+0x803c>
   19514:	add	r2, pc, #0
   19518:	ldr	pc, [r2, r3, lsl #2]
   1951c:	andeq	r9, r1, r8, asr #15
   19520:	ldrdeq	r9, [r1], -r8
   19524:	andeq	r9, r1, r4, ror #15
   19528:	andeq	r9, r1, r4, asr #16
   1952c:	strdeq	r9, [r1], -r0
   19530:	andeq	r9, r1, r4, asr #16
   19534:	andeq	r9, r1, r4, asr #16
   19538:	andeq	r9, r1, r4, asr #16
   1953c:	andeq	r9, r1, r4, asr #16
   19540:	andeq	r9, r1, r4, asr #16
   19544:	ldrdeq	r9, [r1], -r0
   19548:	ldrdeq	r9, [r1], -r0
   1954c:	ldrdeq	r9, [r1], -r0
   19550:	ldrdeq	r9, [r1], -r0
   19554:	ldrdeq	r9, [r1], -r0
   19558:	ldrdeq	r9, [r1], -r0
   1955c:	ldrdeq	r9, [r1], -r0
   19560:	ldrdeq	r9, [r1], -r0
   19564:	ldrdeq	r9, [r1], -r0
   19568:	andeq	r9, r1, r4, asr #16
   1956c:	andeq	r9, r1, r4, asr #16
   19570:	andeq	r9, r1, r8, lsl #16
   19574:	andeq	r9, r1, r4, asr #16
   19578:	andeq	r9, r1, r8, lsl r8
   1957c:	andeq	r9, r1, r8, lsr #16
   19580:	andeq	r9, r1, r4, asr #16
   19584:	andeq	r9, r1, r4, asr #16
   19588:	andeq	r9, r1, r0, asr r8
   1958c:	andeq	r9, r1, r4, asr #16
   19590:	andeq	r9, r1, r4, asr #16
   19594:	andeq	r9, r1, r4, asr #16
   19598:	andeq	r9, r1, r4, asr #16
   1959c:	andeq	r9, r1, r4, asr #16
   195a0:	andeq	r9, r1, r4, asr #16
   195a4:	andeq	r9, r1, r4, asr #16
   195a8:	andeq	r9, r1, r4, asr #16
   195ac:	andeq	r9, r1, r4, asr #16
   195b0:	andeq	r9, r1, r4, asr #16
   195b4:	andeq	r9, r1, r4, asr #16
   195b8:	andeq	r9, r1, r4, asr #16
   195bc:	andeq	r9, r1, r4, asr #16
   195c0:	andeq	r9, r1, r4, asr #16
   195c4:	andeq	r9, r1, r4, asr #16
   195c8:	andeq	r9, r1, r4, asr #16
   195cc:	andeq	r9, r1, r0, ror #16
   195d0:	tst	r8, #16384	; 0x4000
   195d4:	bne	19844 <__assert_fail@plt+0x8120>
   195d8:	sub	r1, r1, #49	; 0x31
   195dc:	mov	r2, #4
   195e0:	bfi	r0, r2, #0, #8
   195e4:	str	r1, [r9]
   195e8:	str	r0, [r9, #4]
   195ec:	b	19844 <__assert_fail@plt+0x8120>
   195f0:	cmp	r6, #123	; 0x7b
   195f4:	beq	196f4 <__assert_fail@plt+0x7fd0>
   195f8:	cmp	r6, #124	; 0x7c
   195fc:	beq	19704 <__assert_fail@plt+0x7fe0>
   19600:	cmp	r6, #125	; 0x7d
   19604:	bne	19844 <__assert_fail@plt+0x8120>
   19608:	and	r1, r8, #4608	; 0x1200
   1960c:	cmp	r1, #4608	; 0x1200
   19610:	beq	197b0 <__assert_fail@plt+0x808c>
   19614:	b	19844 <__assert_fail@plt+0x8120>
   19618:	movw	r1, #65280	; 0xff00
   1961c:	movt	r1, #65439	; 0xff9f
   19620:	and	r0, r0, r1
   19624:	orr	r0, r0, #1
   19628:	orr	r0, r0, #2097152	; 0x200000
   1962c:	str	r0, [r5]
   19630:	mov	r4, #1
   19634:	b	19844 <__assert_fail@plt+0x8120>
   19638:	sub	r1, r2, #115	; 0x73
   1963c:	cmp	r1, #10
   19640:	bhi	19718 <__assert_fail@plt+0x7ff4>
   19644:	add	r2, pc, #0
   19648:	ldr	pc, [r2, r1, lsl #2]
   1964c:	andeq	r9, r1, r8, ror r6
   19650:	andeq	r9, r1, r4, asr #16
   19654:	andeq	r9, r1, r4, asr #16
   19658:	andeq	r9, r1, r4, asr #16
   1965c:	andeq	r9, r1, r4, ror r7
   19660:	andeq	r9, r1, r4, asr #16
   19664:	andeq	r9, r1, r4, asr #16
   19668:	andeq	r9, r1, r4, asr #16
   1966c:	andeq	r9, r1, r4, lsl #15
   19670:	muleq	r1, r8, r7
   19674:	andeq	r9, r1, r4, lsr #15
   19678:	tst	r8, #524288	; 0x80000
   1967c:	bne	19844 <__assert_fail@plt+0x8120>
   19680:	mov	r1, #34	; 0x22
   19684:	b	1983c <__assert_fail@plt+0x8118>
   19688:	cmp	r6, #10
   1968c:	bne	19844 <__assert_fail@plt+0x8120>
   19690:	tst	r8, #2048	; 0x800
   19694:	bne	19710 <__assert_fail@plt+0x7fec>
   19698:	b	19844 <__assert_fail@plt+0x8120>
   1969c:	tst	r8, #8192	; 0x2000
   196a0:	beq	19844 <__assert_fail@plt+0x8120>
   196a4:	mov	r1, #8
   196a8:	b	1983c <__assert_fail@plt+0x8118>
   196ac:	tst	r8, #8192	; 0x2000
   196b0:	beq	19844 <__assert_fail@plt+0x8120>
   196b4:	mov	r1, #9
   196b8:	b	1983c <__assert_fail@plt+0x8118>
   196bc:	mov	r1, #11
   196c0:	b	1983c <__assert_fail@plt+0x8118>
   196c4:	movw	r1, #1026	; 0x402
   196c8:	tst	r8, r1
   196cc:	bne	19844 <__assert_fail@plt+0x8120>
   196d0:	b	19800 <__assert_fail@plt+0x80dc>
   196d4:	mov	r1, #5
   196d8:	b	1983c <__assert_fail@plt+0x8118>
   196dc:	movw	r1, #1026	; 0x402
   196e0:	tst	r8, r1
   196e4:	bne	19844 <__assert_fail@plt+0x8120>
   196e8:	b	19838 <__assert_fail@plt+0x8114>
   196ec:	mov	r1, #20
   196f0:	b	1983c <__assert_fail@plt+0x8118>
   196f4:	and	r1, r8, #4608	; 0x1200
   196f8:	cmp	r1, #4608	; 0x1200
   196fc:	beq	19790 <__assert_fail@plt+0x806c>
   19700:	b	19844 <__assert_fail@plt+0x8120>
   19704:	and	r1, r8, #33792	; 0x8400
   19708:	cmp	r1, #32768	; 0x8000
   1970c:	bne	19844 <__assert_fail@plt+0x8120>
   19710:	mov	r1, #10
   19714:	b	1983c <__assert_fail@plt+0x8118>
   19718:	cmp	r2, #96	; 0x60
   1971c:	beq	197b8 <__assert_fail@plt+0x8094>
   19720:	cmp	r2, #98	; 0x62
   19724:	tsteq	r8, #524288	; 0x80000
   19728:	bne	19844 <__assert_fail@plt+0x8120>
   1972c:	mov	r1, #256	; 0x100
   19730:	b	194c8 <__assert_fail@plt+0x7da4>
   19734:	ldr	r1, [r7, #40]	; 0x28
   19738:	cmp	r1, #0
   1973c:	beq	194c4 <__assert_fail@plt+0x7da0>
   19740:	tst	r8, #2048	; 0x800
   19744:	beq	19844 <__assert_fail@plt+0x8120>
   19748:	ldr	r2, [r7, #4]
   1974c:	add	r1, r1, r2
   19750:	ldrb	r1, [r1, #-1]
   19754:	cmp	r1, #10
   19758:	beq	194c4 <__assert_fail@plt+0x7da0>
   1975c:	b	19844 <__assert_fail@plt+0x8120>
   19760:	cmp	r2, #87	; 0x57
   19764:	tsteq	r8, #524288	; 0x80000
   19768:	bne	19844 <__assert_fail@plt+0x8120>
   1976c:	mov	r1, #33	; 0x21
   19770:	b	1983c <__assert_fail@plt+0x8118>
   19774:	tst	r8, #524288	; 0x80000
   19778:	bne	19844 <__assert_fail@plt+0x8120>
   1977c:	mov	r1, #32
   19780:	b	1983c <__assert_fail@plt+0x8118>
   19784:	and	r1, r8, #4608	; 0x1200
   19788:	cmp	r1, #512	; 0x200
   1978c:	bne	19844 <__assert_fail@plt+0x8120>
   19790:	mov	r1, #23
   19794:	b	1983c <__assert_fail@plt+0x8118>
   19798:	tst	r8, #33792	; 0x8400
   1979c:	bne	19844 <__assert_fail@plt+0x8120>
   197a0:	b	19710 <__assert_fail@plt+0x7fec>
   197a4:	and	r1, r8, #4608	; 0x1200
   197a8:	cmp	r1, #512	; 0x200
   197ac:	bne	19844 <__assert_fail@plt+0x8120>
   197b0:	mov	r1, #24
   197b4:	b	1983c <__assert_fail@plt+0x8118>
   197b8:	tst	r8, #524288	; 0x80000
   197bc:	bne	19844 <__assert_fail@plt+0x8120>
   197c0:	mov	r1, #64	; 0x40
   197c4:	b	194c8 <__assert_fail@plt+0x7da4>
   197c8:	tst	r8, #524288	; 0x80000
   197cc:	bne	19844 <__assert_fail@plt+0x8120>
   197d0:	mov	r1, #128	; 0x80
   197d4:	b	194c8 <__assert_fail@plt+0x7da4>
   197d8:	tst	r8, #8192	; 0x2000
   197dc:	beq	196a4 <__assert_fail@plt+0x7f80>
   197e0:	b	19844 <__assert_fail@plt+0x8120>
   197e4:	tst	r8, #8192	; 0x2000
   197e8:	beq	196b4 <__assert_fail@plt+0x7f90>
   197ec:	b	19844 <__assert_fail@plt+0x8120>
   197f0:	movw	r1, #1026	; 0x402
   197f4:	and	r1, r8, r1
   197f8:	cmp	r1, #2
   197fc:	bne	19844 <__assert_fail@plt+0x8120>
   19800:	mov	r1, #18
   19804:	b	1983c <__assert_fail@plt+0x8118>
   19808:	tst	r8, #524288	; 0x80000
   1980c:	bne	19844 <__assert_fail@plt+0x8120>
   19810:	mov	r1, #6
   19814:	b	194c8 <__assert_fail@plt+0x7da4>
   19818:	tst	r8, #524288	; 0x80000
   1981c:	bne	19844 <__assert_fail@plt+0x8120>
   19820:	mov	r1, #9
   19824:	b	194c8 <__assert_fail@plt+0x7da4>
   19828:	movw	r1, #1026	; 0x402
   1982c:	and	r1, r8, r1
   19830:	cmp	r1, #2
   19834:	bne	19844 <__assert_fail@plt+0x8120>
   19838:	mov	r1, #19
   1983c:	bfi	r0, r1, #0, #8
   19840:	str	r0, [r5]
   19844:	mov	r0, r4
   19848:	sub	sp, fp, #24
   1984c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19850:	tst	r8, #524288	; 0x80000
   19854:	bne	19844 <__assert_fail@plt+0x8120>
   19858:	mov	r1, #512	; 0x200
   1985c:	b	194c8 <__assert_fail@plt+0x7da4>
   19860:	tst	r8, #524288	; 0x80000
   19864:	bne	19844 <__assert_fail@plt+0x8120>
   19868:	mov	r1, #35	; 0x23
   1986c:	b	1983c <__assert_fail@plt+0x8118>
   19870:	cmp	r3, #2
   19874:	blt	198a4 <__assert_fail@plt+0x8180>
   19878:	ldr	r3, [r7, #8]
   1987c:	ldr	r4, [r3, r2, lsl #2]
   19880:	cmn	r4, #1
   19884:	beq	192f4 <__assert_fail@plt+0x7bd0>
   19888:	ldr	r4, [r7, #28]
   1988c:	add	r6, r6, #2
   19890:	cmp	r4, r6
   19894:	beq	198a4 <__assert_fail@plt+0x8180>
   19898:	ldr	r3, [r3, r6, lsl #2]
   1989c:	cmn	r3, #1
   198a0:	beq	192f4 <__assert_fail@plt+0x7bd0>
   198a4:	ldrb	r3, [r7, #76]	; 0x4c
   198a8:	mov	r6, r2
   198ac:	cmp	r3, #0
   198b0:	beq	198bc <__assert_fail@plt+0x8198>
   198b4:	ldr	r6, [r7, #12]
   198b8:	ldr	r6, [r6, r2, lsl #2]
   198bc:	ldr	r4, [r7, #24]
   198c0:	ldr	ip, [r7]
   198c4:	cmp	r3, #0
   198c8:	add	r6, r4, r6
   198cc:	add	r6, ip, r6
   198d0:	ldrsb	r6, [r6]
   198d4:	beq	192fc <__assert_fail@plt+0x7bd8>
   198d8:	cmn	r6, #1
   198dc:	ble	192f4 <__assert_fail@plt+0x7bd0>
   198e0:	b	192fc <__assert_fail@plt+0x7bd8>
   198e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198e8:	add	fp, sp, #28
   198ec:	sub	sp, sp, #28
   198f0:	mov	r7, r1
   198f4:	mov	r1, r0
   198f8:	ldr	r4, [fp, #12]
   198fc:	ldr	r5, [fp, #8]
   19900:	mov	r6, r2
   19904:	str	r3, [sp, #16]
   19908:	ldr	r0, [r7]
   1990c:	str	r1, [sp, #12]
   19910:	str	r4, [sp, #4]
   19914:	str	r5, [sp]
   19918:	str	r0, [sp, #8]
   1991c:	mov	r0, r1
   19920:	mov	r1, r7
   19924:	bl	19b70 <__assert_fail@plt+0x844c>
   19928:	cmp	r0, #0
   1992c:	bne	1993c <__assert_fail@plt+0x8218>
   19930:	ldr	r1, [r4]
   19934:	cmp	r1, #0
   19938:	bne	19a98 <__assert_fail@plt+0x8374>
   1993c:	mov	r4, r0
   19940:	ldrb	r0, [r6, #4]
   19944:	orr	r1, r0, #8
   19948:	cmp	r1, #10
   1994c:	beq	19a9c <__assert_fail@plt+0x8378>
   19950:	cmp	r5, #0
   19954:	beq	19960 <__assert_fail@plt+0x823c>
   19958:	cmp	r0, #9
   1995c:	beq	19a9c <__assert_fail@plt+0x8378>
   19960:	ldr	r8, [fp, #12]
   19964:	ldr	r0, [sp, #12]
   19968:	ldr	r3, [sp, #16]
   1996c:	mov	r1, r7
   19970:	mov	r2, r6
   19974:	mov	r9, r5
   19978:	str	r5, [sp]
   1997c:	str	r8, [sp, #4]
   19980:	bl	19b70 <__assert_fail@plt+0x844c>
   19984:	mov	sl, r0
   19988:	cmp	r0, #0
   1998c:	bne	1999c <__assert_fail@plt+0x8278>
   19990:	ldr	r0, [r8]
   19994:	cmp	r0, #0
   19998:	bne	19aa8 <__assert_fail@plt+0x8384>
   1999c:	cmp	r4, #0
   199a0:	cmpne	sl, #0
   199a4:	bne	199bc <__assert_fail@plt+0x8298>
   199a8:	cmp	r4, #0
   199ac:	mov	r5, r9
   199b0:	movne	sl, r4
   199b4:	mov	r0, sl
   199b8:	b	1993c <__assert_fail@plt+0x8218>
   199bc:	mov	r0, #16
   199c0:	mov	r1, r4
   199c4:	mov	r2, sl
   199c8:	add	r3, sp, #20
   199cc:	str	r0, [sp, #24]
   199d0:	mov	r0, #0
   199d4:	str	r0, [sp, #20]
   199d8:	ldr	r0, [sp, #8]
   199dc:	bl	1b074 <__assert_fail@plt+0x9950>
   199e0:	cmp	r0, #0
   199e4:	mov	r5, r9
   199e8:	bne	1993c <__assert_fail@plt+0x8218>
   199ec:	mov	r5, sl
   199f0:	ldr	sl, [sl, #4]
   199f4:	cmp	sl, #0
   199f8:	bne	199ec <__assert_fail@plt+0x82c8>
   199fc:	ldr	sl, [r5, #8]
   19a00:	cmp	sl, #0
   19a04:	bne	199ec <__assert_fail@plt+0x82c8>
   19a08:	add	r0, r5, #20
   19a0c:	bl	1863c <__assert_fail@plt+0x6f18>
   19a10:	ldr	r0, [r5]
   19a14:	cmp	r0, #0
   19a18:	beq	19a3c <__assert_fail@plt+0x8318>
   19a1c:	ldr	sl, [r0, #8]
   19a20:	cmp	sl, r5
   19a24:	mov	r5, r0
   19a28:	beq	19a08 <__assert_fail@plt+0x82e4>
   19a2c:	cmp	sl, #0
   19a30:	mov	r5, r0
   19a34:	beq	19a08 <__assert_fail@plt+0x82e4>
   19a38:	b	199ec <__assert_fail@plt+0x82c8>
   19a3c:	mov	r5, r4
   19a40:	ldr	r4, [r4, #4]
   19a44:	cmp	r4, #0
   19a48:	bne	19a3c <__assert_fail@plt+0x8318>
   19a4c:	ldr	r4, [r5, #8]
   19a50:	cmp	r4, #0
   19a54:	bne	19a3c <__assert_fail@plt+0x8318>
   19a58:	add	r0, r5, #20
   19a5c:	bl	1863c <__assert_fail@plt+0x6f18>
   19a60:	ldr	r0, [r5]
   19a64:	cmp	r0, #0
   19a68:	beq	19a8c <__assert_fail@plt+0x8368>
   19a6c:	ldr	r4, [r0, #8]
   19a70:	cmp	r4, r5
   19a74:	mov	r5, r0
   19a78:	beq	19a58 <__assert_fail@plt+0x8334>
   19a7c:	cmp	r4, #0
   19a80:	mov	r5, r0
   19a84:	beq	19a58 <__assert_fail@plt+0x8334>
   19a88:	b	19a3c <__assert_fail@plt+0x8318>
   19a8c:	ldr	r1, [fp, #12]
   19a90:	mov	r0, #12
   19a94:	str	r0, [r1]
   19a98:	mov	r4, #0
   19a9c:	mov	r0, r4
   19aa0:	sub	sp, fp, #28
   19aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aa8:	cmp	r4, #0
   19aac:	beq	19a98 <__assert_fail@plt+0x8374>
   19ab0:	mov	r5, r4
   19ab4:	ldr	r4, [r4, #4]
   19ab8:	cmp	r4, #0
   19abc:	bne	19ab0 <__assert_fail@plt+0x838c>
   19ac0:	ldr	r4, [r5, #8]
   19ac4:	cmp	r4, #0
   19ac8:	bne	19ab0 <__assert_fail@plt+0x838c>
   19acc:	add	r0, r5, #20
   19ad0:	bl	1863c <__assert_fail@plt+0x6f18>
   19ad4:	ldr	r0, [r5]
   19ad8:	cmp	r0, #0
   19adc:	beq	19a98 <__assert_fail@plt+0x8374>
   19ae0:	ldr	r4, [r0, #8]
   19ae4:	cmp	r4, r5
   19ae8:	mov	r5, r0
   19aec:	beq	19acc <__assert_fail@plt+0x83a8>
   19af0:	cmp	r4, #0
   19af4:	mov	r5, r0
   19af8:	beq	19acc <__assert_fail@plt+0x83a8>
   19afc:	b	19ab0 <__assert_fail@plt+0x838c>
   19b00:	push	{r4, r5, r6, sl, fp, lr}
   19b04:	add	fp, sp, #16
   19b08:	mov	r4, r2
   19b0c:	mov	r5, r1
   19b10:	mov	r6, r0
   19b14:	ldr	r0, [r0, #4]
   19b18:	cmp	r0, #0
   19b1c:	bne	19b10 <__assert_fail@plt+0x83ec>
   19b20:	ldr	r0, [r6, #8]
   19b24:	cmp	r0, #0
   19b28:	bne	19b10 <__assert_fail@plt+0x83ec>
   19b2c:	mov	r0, r4
   19b30:	mov	r1, r6
   19b34:	blx	r5
   19b38:	cmp	r0, #0
   19b3c:	bne	19b6c <__assert_fail@plt+0x8448>
   19b40:	ldr	r1, [r6]
   19b44:	cmp	r1, #0
   19b48:	beq	19b6c <__assert_fail@plt+0x8448>
   19b4c:	ldr	r0, [r1, #8]
   19b50:	cmp	r0, r6
   19b54:	mov	r6, r1
   19b58:	beq	19b2c <__assert_fail@plt+0x8408>
   19b5c:	cmp	r0, #0
   19b60:	mov	r6, r1
   19b64:	beq	19b2c <__assert_fail@plt+0x8408>
   19b68:	b	19b10 <__assert_fail@plt+0x83ec>
   19b6c:	pop	{r4, r5, r6, sl, fp, pc}
   19b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b74:	add	fp, sp, #28
   19b78:	sub	sp, sp, #140	; 0x8c
   19b7c:	mov	r5, r1
   19b80:	mov	sl, r0
   19b84:	mov	r4, r2
   19b88:	ldr	r0, [r2, #4]
   19b8c:	mvn	r1, #0
   19b90:	mov	r8, #0
   19b94:	ldr	r2, [r5]
   19b98:	uxtab	r1, r1, r0
   19b9c:	str	r2, [sp, #44]	; 0x2c
   19ba0:	ldr	r6, [fp, #12]
   19ba4:	ldr	r7, [fp, #8]
   19ba8:	add	r2, pc, #12
   19bac:	str	sl, [sp, #40]	; 0x28
   19bb0:	str	r3, [sp, #36]	; 0x24
   19bb4:	str	r4, [sp, #20]
   19bb8:	ldr	pc, [r2, r1, lsl #2]
   19bbc:	andeq	r9, r1, r4, lsl lr
   19bc0:	andeq	sl, r1, r4, asr #26
   19bc4:	andeq	fp, r1, r4, ror r0
   19bc8:	strdeq	r9, [r1], -ip
   19bcc:	andeq	r9, r1, r8, asr pc
   19bd0:	andeq	fp, r1, r4, ror r0
   19bd4:	andeq	fp, r1, r4, ror r0
   19bd8:	andeq	r9, r1, r4, lsr #31
   19bdc:	andeq	r9, r1, ip, asr ip
   19be0:	andeq	sl, r1, r4, asr #26
   19be4:	andeq	r9, r1, ip, asr #24
   19be8:	andeq	r9, r1, ip, lsl sp
   19bec:	andeq	fp, r1, r4, ror r0
   19bf0:	andeq	fp, r1, r4, ror r0
   19bf4:	andeq	fp, r1, r4, ror r0
   19bf8:	andeq	fp, r1, r4, ror r0
   19bfc:	andeq	fp, r1, r4, ror r0
   19c00:	andeq	r9, r1, ip, asr #24
   19c04:	andeq	r9, r1, ip, asr #24
   19c08:	muleq	r1, ip, sp
   19c0c:	andeq	fp, r1, r4, ror r0
   19c10:	andeq	fp, r1, r4, ror r0
   19c14:	andeq	sl, r1, r4, ror r0
   19c18:	andeq	r9, r1, ip, ror #24
   19c1c:	andeq	fp, r1, r4, ror r0
   19c20:	andeq	fp, r1, r4, ror r0
   19c24:	andeq	fp, r1, r4, ror r0
   19c28:	andeq	fp, r1, r4, ror r0
   19c2c:	andeq	fp, r1, r4, ror r0
   19c30:	andeq	fp, r1, r4, ror r0
   19c34:	andeq	fp, r1, r4, ror r0
   19c38:	andeq	r9, r1, r8, lsr #25
   19c3c:	andeq	r9, r1, r8, lsr #25
   19c40:	andeq	r9, r1, r8, asr #25
   19c44:	andeq	r9, r1, r8, asr #25
   19c48:	andeq	sl, r1, r4, lsl #1
   19c4c:	tst	r3, #32
   19c50:	bne	1a07c <__assert_fail@plt+0x8958>
   19c54:	tst	r3, #16
   19c58:	bne	1a08c <__assert_fail@plt+0x8968>
   19c5c:	tst	r3, #131072	; 0x20000
   19c60:	uxtbeq	r1, r0
   19c64:	cmpeq	r1, #9
   19c68:	beq	1a0c8 <__assert_fail@plt+0x89a4>
   19c6c:	mov	r1, #1
   19c70:	mov	r2, #0
   19c74:	mov	r3, r4
   19c78:	mov	r8, #0
   19c7c:	bfi	r0, r1, #0, #8
   19c80:	mov	r1, #0
   19c84:	str	r0, [r4, #4]
   19c88:	ldr	r0, [sp, #44]	; 0x2c
   19c8c:	bl	1b074 <__assert_fail@plt+0x9950>
   19c90:	ldr	r5, [sp, #20]
   19c94:	ldr	r2, [sp, #36]	; 0x24
   19c98:	mov	r9, r0
   19c9c:	cmp	r0, #0
   19ca0:	bne	1a79c <__assert_fail@plt+0x9078>
   19ca4:	b	1aeb8 <__assert_fail@plt+0x9794>
   19ca8:	mvn	r2, #32
   19cac:	ldr	r1, [sl, #64]	; 0x40
   19cb0:	movw	r3, #14349	; 0x380d
   19cb4:	uxtab	r0, r2, r0
   19cb8:	movw	r2, #15806	; 0x3dbe
   19cbc:	movt	r3, #2
   19cc0:	movt	r2, #2
   19cc4:	b	19ce4 <__assert_fail@plt+0x85c0>
   19cc8:	mvn	r2, #34	; 0x22
   19ccc:	ldr	r1, [sl, #64]	; 0x40
   19cd0:	movw	r3, #14499	; 0x38a3
   19cd4:	uxtab	r0, r2, r0
   19cd8:	movw	r2, #15812	; 0x3dc4
   19cdc:	movt	r3, #2
   19ce0:	movt	r2, #2
   19ce4:	clz	r0, r0
   19ce8:	lsr	r0, r0, #5
   19cec:	stm	sp, {r0, r6}
   19cf0:	ldr	r0, [sp, #44]	; 0x2c
   19cf4:	bl	1b11c <__assert_fail@plt+0x99f8>
   19cf8:	mov	r9, r0
   19cfc:	cmp	r0, #0
   19d00:	bne	19f98 <__assert_fail@plt+0x8874>
   19d04:	ldr	r0, [r6]
   19d08:	ldr	r2, [sp, #36]	; 0x24
   19d0c:	ldr	r5, [sp, #20]
   19d10:	cmp	r0, #0
   19d14:	beq	1a79c <__assert_fail@plt+0x9078>
   19d18:	b	1ad44 <__assert_fail@plt+0x9620>
   19d1c:	ldr	r0, [r4]
   19d20:	movw	r1, #783	; 0x30f
   19d24:	tst	r0, r1
   19d28:	beq	19d78 <__assert_fail@plt+0x8654>
   19d2c:	ldr	r0, [sp, #44]	; 0x2c
   19d30:	ldrb	r0, [r0, #88]	; 0x58
   19d34:	tst	r0, #16
   19d38:	bne	19d74 <__assert_fail@plt+0x8650>
   19d3c:	ldr	r2, [sp, #44]	; 0x2c
   19d40:	orr	r1, r0, #16
   19d44:	tst	r0, #8
   19d48:	strb	r1, [r2, #88]	; 0x58
   19d4c:	bne	1af18 <__assert_fail@plt+0x97f4>
   19d50:	add	r1, pc, #896	; 0x380
   19d54:	tst	r0, #4
   19d58:	vld1.64	{d16-d17}, [r1]
   19d5c:	add	r1, r2, #96	; 0x60
   19d60:	vst1.32	{d16-d17}, [r1]
   19d64:	beq	1af28 <__assert_fail@plt+0x9804>
   19d68:	vmov.i32	q8, #0	; 0x00000000
   19d6c:	add	r0, r2, #112	; 0x70
   19d70:	vst1.32	{d16-d17}, [r0]
   19d74:	ldr	r0, [r4]
   19d78:	mov	r9, r6
   19d7c:	ldr	r6, [sp, #44]	; 0x2c
   19d80:	cmp	r0, #256	; 0x100
   19d84:	beq	1ad50 <__assert_fail@plt+0x962c>
   19d88:	cmp	r0, #512	; 0x200
   19d8c:	bne	1adcc <__assert_fail@plt+0x96a8>
   19d90:	mov	r5, #10
   19d94:	mov	r0, #5
   19d98:	b	1ad58 <__assert_fail@plt+0x9634>
   19d9c:	mov	r0, #0
   19da0:	mov	r1, #1
   19da4:	str	r6, [sp, #16]
   19da8:	mov	r9, #0
   19dac:	str	r0, [fp, #-32]	; 0xffffffe0
   19db0:	mov	r0, #32
   19db4:	bl	22844 <__assert_fail@plt+0x11120>
   19db8:	mov	r4, r0
   19dbc:	mov	r0, #40	; 0x28
   19dc0:	mov	r1, #1
   19dc4:	bl	22844 <__assert_fail@plt+0x11120>
   19dc8:	mov	r8, r0
   19dcc:	cmp	r4, #0
   19dd0:	cmpne	r8, #0
   19dd4:	beq	1aed8 <__assert_fail@plt+0x97b4>
   19dd8:	ldr	r6, [sp, #20]
   19ddc:	ldr	r5, [sp, #36]	; 0x24
   19de0:	mov	r1, sl
   19de4:	mov	r0, r6
   19de8:	mov	r2, r5
   19dec:	bl	1b348 <__assert_fail@plt+0x9c24>
   19df0:	mov	r3, r0
   19df4:	ldr	r0, [r6, #4]
   19df8:	uxtb	r1, r0
   19dfc:	cmp	r1, #25
   19e00:	beq	1a0e8 <__assert_fail@plt+0x89c4>
   19e04:	cmp	r1, #2
   19e08:	beq	1aed0 <__assert_fail@plt+0x97ac>
   19e0c:	mov	r9, #0
   19e10:	b	1a140 <__assert_fail@plt+0x8a1c>
   19e14:	ldr	r5, [sp, #44]	; 0x2c
   19e18:	mov	r1, #0
   19e1c:	mov	r2, #0
   19e20:	mov	r3, r4
   19e24:	mov	r8, #0
   19e28:	mov	r0, r5
   19e2c:	bl	1b074 <__assert_fail@plt+0x9950>
   19e30:	cmp	r0, #0
   19e34:	beq	1aeb8 <__assert_fail@plt+0x9794>
   19e38:	mov	r9, r0
   19e3c:	ldr	r0, [r5, #92]	; 0x5c
   19e40:	cmp	r0, #2
   19e44:	blt	19f98 <__assert_fail@plt+0x8874>
   19e48:	mov	r7, #16
   19e4c:	sub	r4, fp, #80	; 0x50
   19e50:	ldr	r0, [sl, #40]	; 0x28
   19e54:	ldr	r1, [sl, #56]	; 0x38
   19e58:	cmp	r1, r0
   19e5c:	ble	19f98 <__assert_fail@plt+0x8874>
   19e60:	ldr	r1, [sl, #28]
   19e64:	ldr	r2, [sp, #36]	; 0x24
   19e68:	ldr	r5, [sp, #20]
   19e6c:	cmp	r0, r1
   19e70:	beq	1a79c <__assert_fail@plt+0x9078>
   19e74:	ldr	r1, [sl, #8]
   19e78:	ldr	r0, [r1, r0, lsl #2]
   19e7c:	cmn	r0, #1
   19e80:	bne	1a79c <__assert_fail@plt+0x9078>
   19e84:	mov	r0, r5
   19e88:	mov	r1, sl
   19e8c:	bl	19254 <__assert_fail@plt+0x7b30>
   19e90:	ldr	r1, [sl, #40]	; 0x28
   19e94:	mov	r8, r6
   19e98:	ldr	r6, [sp, #44]	; 0x2c
   19e9c:	mov	r2, #0
   19ea0:	mov	r3, r5
   19ea4:	add	r0, r1, r0
   19ea8:	mov	r1, #0
   19eac:	str	r0, [sl, #40]	; 0x28
   19eb0:	mov	r0, r6
   19eb4:	bl	1b074 <__assert_fail@plt+0x9950>
   19eb8:	mov	r5, r0
   19ebc:	mov	r0, #0
   19ec0:	str	r7, [fp, #-76]	; 0xffffffb4
   19ec4:	mov	r1, r9
   19ec8:	mov	r3, r4
   19ecc:	str	r0, [fp, #-80]	; 0xffffffb0
   19ed0:	mov	r0, r6
   19ed4:	mov	r2, r5
   19ed8:	mov	r6, r8
   19edc:	bl	1b074 <__assert_fail@plt+0x9950>
   19ee0:	cmp	r5, #0
   19ee4:	movne	r9, r0
   19ee8:	cmpne	r0, #0
   19eec:	bne	19e50 <__assert_fail@plt+0x872c>
   19ef0:	mov	r0, #12
   19ef4:	str	r0, [r6]
   19ef8:	b	1ad40 <__assert_fail@plt+0x961c>
   19efc:	ldr	r5, [sp, #44]	; 0x2c
   19f00:	ldr	r0, [r4]
   19f04:	mov	r1, #1
   19f08:	ldr	r2, [r5, #84]	; 0x54
   19f0c:	tst	r2, r1, lsl r0
   19f10:	beq	1aef8 <__assert_fail@plt+0x97d4>
   19f14:	lsl	r0, r1, r0
   19f18:	ldr	r1, [r5, #80]	; 0x50
   19f1c:	mov	r2, #0
   19f20:	mov	r3, r4
   19f24:	mov	r8, #0
   19f28:	orr	r0, r1, r0
   19f2c:	mov	r1, #0
   19f30:	str	r0, [r5, #80]	; 0x50
   19f34:	mov	r0, r5
   19f38:	bl	1b074 <__assert_fail@plt+0x9950>
   19f3c:	cmp	r0, #0
   19f40:	beq	1aeb8 <__assert_fail@plt+0x9794>
   19f44:	mov	r9, r0
   19f48:	ldr	r0, [r5, #76]	; 0x4c
   19f4c:	add	r0, r0, #1
   19f50:	str	r0, [r5, #76]	; 0x4c
   19f54:	b	19f8c <__assert_fail@plt+0x8868>
   19f58:	ldr	r5, [sp, #44]	; 0x2c
   19f5c:	mov	r1, #0
   19f60:	mov	r2, #0
   19f64:	mov	r3, r4
   19f68:	mov	r8, #0
   19f6c:	mov	r0, r5
   19f70:	bl	1b074 <__assert_fail@plt+0x9950>
   19f74:	cmp	r0, #0
   19f78:	beq	1aeb8 <__assert_fail@plt+0x9794>
   19f7c:	mov	r9, r0
   19f80:	ldr	r0, [r5, #92]	; 0x5c
   19f84:	cmp	r0, #2
   19f88:	blt	19f98 <__assert_fail@plt+0x8874>
   19f8c:	ldrb	r0, [r5, #88]	; 0x58
   19f90:	orr	r0, r0, #2
   19f94:	strb	r0, [r5, #88]	; 0x58
   19f98:	ldr	r2, [sp, #36]	; 0x24
   19f9c:	ldr	r5, [sp, #20]
   19fa0:	b	1a79c <__assert_fail@plt+0x9078>
   19fa4:	str	r6, [sp, #16]
   19fa8:	ldr	r6, [r5, #24]
   19fac:	orr	r2, r3, #8388608	; 0x800000
   19fb0:	mov	r1, sl
   19fb4:	add	r0, r6, #1
   19fb8:	str	r0, [r5, #24]
   19fbc:	mov	r0, r4
   19fc0:	bl	19254 <__assert_fail@plt+0x7b30>
   19fc4:	ldr	r1, [sl, #40]	; 0x28
   19fc8:	ldr	r2, [sp, #20]
   19fcc:	add	r0, r1, r0
   19fd0:	mov	r1, #0
   19fd4:	str	r0, [sl, #40]	; 0x28
   19fd8:	ldrb	r0, [r2, #4]
   19fdc:	cmp	r0, #9
   19fe0:	beq	1a028 <__assert_fail@plt+0x8904>
   19fe4:	add	r0, r7, #1
   19fe8:	mov	r1, r5
   19fec:	mov	r4, r2
   19ff0:	str	r0, [sp]
   19ff4:	mov	r0, sl
   19ff8:	ldr	r7, [sp, #16]
   19ffc:	str	r7, [sp, #4]
   1a000:	ldr	r3, [sp, #36]	; 0x24
   1a004:	bl	190a4 <__assert_fail@plt+0x7980>
   1a008:	mov	r1, r0
   1a00c:	ldr	r0, [r7]
   1a010:	mov	r8, #0
   1a014:	cmp	r0, #0
   1a018:	bne	1ad44 <__assert_fail@plt+0x9620>
   1a01c:	ldrb	r0, [r4, #4]
   1a020:	cmp	r0, #9
   1a024:	bne	1afb8 <__assert_fail@plt+0x9894>
   1a028:	ldr	r0, [sp, #44]	; 0x2c
   1a02c:	cmp	r6, #8
   1a030:	bhi	1a044 <__assert_fail@plt+0x8920>
   1a034:	ldr	r3, [r0, #84]	; 0x54
   1a038:	mov	r2, #1
   1a03c:	orr	r2, r3, r2, lsl r6
   1a040:	str	r2, [r0, #84]	; 0x54
   1a044:	mov	r2, #17
   1a048:	mov	r8, #0
   1a04c:	sub	r3, fp, #80	; 0x50
   1a050:	str	r2, [fp, #-76]	; 0xffffffb4
   1a054:	mov	r2, #0
   1a058:	str	r8, [fp, #-80]	; 0xffffffb0
   1a05c:	bl	1b074 <__assert_fail@plt+0x9950>
   1a060:	cmp	r0, #0
   1a064:	beq	1af08 <__assert_fail@plt+0x97e4>
   1a068:	mov	r9, r0
   1a06c:	str	r6, [r0, #20]
   1a070:	b	1a790 <__assert_fail@plt+0x906c>
   1a074:	tst	r3, #16777216	; 0x1000000
   1a078:	beq	19c4c <__assert_fail@plt+0x8528>
   1a07c:	mov	r0, #13
   1a080:	b	1a0cc <__assert_fail@plt+0x89a8>
   1a084:	mov	r0, #5
   1a088:	b	1a0cc <__assert_fail@plt+0x89a8>
   1a08c:	mov	r0, r4
   1a090:	mov	r1, sl
   1a094:	mov	r2, r3
   1a098:	mov	r6, r3
   1a09c:	bl	19254 <__assert_fail@plt+0x7b30>
   1a0a0:	ldr	r1, [sl, #40]	; 0x28
   1a0a4:	mov	r2, r4
   1a0a8:	mov	r3, r6
   1a0ac:	add	r0, r1, r0
   1a0b0:	mov	r1, r5
   1a0b4:	str	r0, [sl, #40]	; 0x28
   1a0b8:	mov	r0, sl
   1a0bc:	sub	sp, fp, #28
   1a0c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0c4:	b	19b70 <__assert_fail@plt+0x844c>
   1a0c8:	mov	r0, #16
   1a0cc:	str	r0, [r6]
   1a0d0:	b	1ad44 <__assert_fail@plt+0x9620>
   1a0d4:	nop	{0}
   1a0d8:	andeq	r0, r0, r0
   1a0dc:	mvnseq	r0, #0
   1a0e0:			; <UNDEFINED> instruction: 0x87fffffe
   1a0e4:			; <UNDEFINED> instruction: 0x07fffffe
   1a0e8:	ldrb	r0, [r8, #16]
   1a0ec:	tst	r5, #256	; 0x100
   1a0f0:	orr	r0, r0, #1
   1a0f4:	strb	r0, [r8, #16]
   1a0f8:	beq	1a108 <__assert_fail@plt+0x89e4>
   1a0fc:	ldr	r0, [r4]
   1a100:	orr	r0, r0, #1024	; 0x400
   1a104:	str	r0, [r4]
   1a108:	ldr	r0, [sl, #40]	; 0x28
   1a10c:	ldr	r2, [sp, #36]	; 0x24
   1a110:	mov	r1, sl
   1a114:	add	r0, r0, r3
   1a118:	str	r0, [sl, #40]	; 0x28
   1a11c:	mov	r0, r6
   1a120:	bl	1b348 <__assert_fail@plt+0x9c24>
   1a124:	ldr	r6, [sp, #20]
   1a128:	mov	r3, r0
   1a12c:	ldr	r0, [r6, #4]
   1a130:	uxtb	r1, r0
   1a134:	cmp	r1, #2
   1a138:	beq	1aed0 <__assert_fail@plt+0x97ac>
   1a13c:	mov	r9, #1
   1a140:	uxtb	r1, r0
   1a144:	str	r8, [sp, #32]
   1a148:	mov	r2, r6
   1a14c:	ldr	r5, [sp, #36]	; 0x24
   1a150:	cmp	r1, #21
   1a154:	moveq	r1, #1
   1a158:	bfieq	r0, r1, #0, #8
   1a15c:	mov	r1, sl
   1a160:	streq	r0, [r6, #4]
   1a164:	sub	r0, fp, #80	; 0x50
   1a168:	str	r0, [fp, #-36]	; 0xffffffdc
   1a16c:	mov	r0, #3
   1a170:	str	r0, [fp, #-40]	; 0xffffffd8
   1a174:	mov	r0, #1
   1a178:	str	r5, [sp]
   1a17c:	str	r0, [sp, #4]
   1a180:	sub	r0, fp, #40	; 0x28
   1a184:	bl	1b4b0 <__assert_fail@plt+0x9d8c>
   1a188:	cmp	r0, #0
   1a18c:	bne	1aec0 <__assert_fail@plt+0x979c>
   1a190:	and	r0, r5, #65536	; 0x10000
   1a194:	mov	r2, r5
   1a198:	str	r0, [sp, #24]
   1a19c:	mov	r0, #0
   1a1a0:	str	r0, [sp, #12]
   1a1a4:	mov	r0, #0
   1a1a8:	str	r0, [sp, #8]
   1a1ac:	ldr	r5, [sp, #20]
   1a1b0:	mov	r0, r5
   1a1b4:	mov	r1, sl
   1a1b8:	bl	1b348 <__assert_fail@plt+0x9c24>
   1a1bc:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1a1c0:	ldr	r6, [sp, #16]
   1a1c4:	mov	r8, r0
   1a1c8:	cmp	r7, #2
   1a1cc:	beq	1a34c <__assert_fail@plt+0x8c28>
   1a1d0:	cmp	r7, #4
   1a1d4:	bne	1a210 <__assert_fail@plt+0x8aec>
   1a1d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a1dc:	ldr	r0, [sl, #64]	; 0x40
   1a1e0:	sub	r3, fp, #32
   1a1e4:	str	r1, [sp]
   1a1e8:	ldr	r1, [sp, #36]	; 0x24
   1a1ec:	str	r1, [sp, #4]
   1a1f0:	mov	r1, r4
   1a1f4:	ldr	r2, [sp, #32]
   1a1f8:	bl	1b774 <__assert_fail@plt+0xa050>
   1a1fc:	ldr	r2, [sp, #20]
   1a200:	cmp	r0, #0
   1a204:	str	r0, [r6]
   1a208:	beq	1a388 <__assert_fail@plt+0x8c64>
   1a20c:	b	1b02c <__assert_fail@plt+0x9908>
   1a210:	ldr	r0, [sp, #20]
   1a214:	mov	r6, #7
   1a218:	str	r9, [sp, #28]
   1a21c:	ldrb	r0, [r0, #4]
   1a220:	cmp	r0, #22
   1a224:	beq	1a234 <__assert_fail@plt+0x8b10>
   1a228:	cmp	r0, #2
   1a22c:	bne	1a32c <__assert_fail@plt+0x8c08>
   1a230:	b	1b024 <__assert_fail@plt+0x9900>
   1a234:	ldr	r0, [sl, #40]	; 0x28
   1a238:	ldr	r2, [sp, #36]	; 0x24
   1a23c:	mov	r1, sl
   1a240:	add	r0, r0, r8
   1a244:	str	r0, [sl, #40]	; 0x28
   1a248:	add	r0, sp, #48	; 0x30
   1a24c:	bl	1b348 <__assert_fail@plt+0x9c24>
   1a250:	mov	r3, r0
   1a254:	ldrb	r0, [sp, #52]	; 0x34
   1a258:	cmp	r0, #21
   1a25c:	beq	1a314 <__assert_fail@plt+0x8bf0>
   1a260:	cmp	r0, #2
   1a264:	beq	1b024 <__assert_fail@plt+0x9900>
   1a268:	mov	r0, #3
   1a26c:	ldr	r5, [sp, #36]	; 0x24
   1a270:	mov	r1, sl
   1a274:	add	r2, sp, #48	; 0x30
   1a278:	str	r0, [fp, #-48]	; 0xffffffd0
   1a27c:	add	r0, sp, #56	; 0x38
   1a280:	str	r0, [fp, #-44]	; 0xffffffd4
   1a284:	mov	r0, #1
   1a288:	str	r0, [sp, #4]
   1a28c:	sub	r0, fp, #48	; 0x30
   1a290:	str	r5, [sp]
   1a294:	bl	1b4b0 <__assert_fail@plt+0x9d8c>
   1a298:	cmp	r0, #0
   1a29c:	bne	1aec0 <__assert_fail@plt+0x979c>
   1a2a0:	ldr	r0, [sp, #20]
   1a2a4:	mov	r1, sl
   1a2a8:	mov	r2, r5
   1a2ac:	bl	1b348 <__assert_fail@plt+0x9c24>
   1a2b0:	ldr	sl, [fp, #-48]	; 0xffffffd0
   1a2b4:	mov	r6, #11
   1a2b8:	cmp	sl, #2
   1a2bc:	cmpne	sl, #4
   1a2c0:	beq	1b020 <__assert_fail@plt+0x98fc>
   1a2c4:	mov	r8, r0
   1a2c8:	cmp	r7, #3
   1a2cc:	bne	1a2e0 <__assert_fail@plt+0x8bbc>
   1a2d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a2d4:	bl	115c8 <strlen@plt>
   1a2d8:	cmp	r0, #1
   1a2dc:	bhi	1b01c <__assert_fail@plt+0x98f8>
   1a2e0:	cmp	sl, #3
   1a2e4:	bne	1a2f8 <__assert_fail@plt+0x8bd4>
   1a2e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a2ec:	bl	115c8 <strlen@plt>
   1a2f0:	cmp	r0, #1
   1a2f4:	bhi	1b01c <__assert_fail@plt+0x98f8>
   1a2f8:	ldr	r2, [sp, #20]
   1a2fc:	cmp	r7, #3
   1a300:	beq	1a43c <__assert_fail@plt+0x8d18>
   1a304:	cmp	r7, #0
   1a308:	mov	r5, #0
   1a30c:	ldrbeq	r5, [fp, #-36]	; 0xffffffdc
   1a310:	b	1a444 <__assert_fail@plt+0x8d20>
   1a314:	ldr	r0, [sl, #40]	; 0x28
   1a318:	mov	r1, #1
   1a31c:	sub	r0, r0, r8
   1a320:	str	r0, [sl, #40]	; 0x28
   1a324:	ldr	r0, [sp, #20]
   1a328:	strb	r1, [r0, #4]
   1a32c:	add	r0, pc, #8
   1a330:	ldr	r6, [sp, #16]
   1a334:	ldr	r9, [sp, #28]
   1a338:	ldr	pc, [r0, r7, lsl #2]
   1a33c:	andeq	sl, r1, r0, ror #7
   1a340:	andeq	sl, r1, r4, lsl #8
   1a344:	andeq	sl, r1, ip, asr #6
   1a348:	andeq	sl, r1, ip, asr #6
   1a34c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1a350:	mov	r0, r5
   1a354:	bl	115c8 <strlen@plt>
   1a358:	cmp	r0, #1
   1a35c:	bne	1af00 <__assert_fail@plt+0x97dc>
   1a360:	ldrb	r0, [r5]
   1a364:	mov	r3, #1
   1a368:	ubfx	r1, r0, #5, #3
   1a36c:	and	r0, r0, #31
   1a370:	ldr	r2, [r4, r1, lsl #2]
   1a374:	orr	r0, r2, r3, lsl r0
   1a378:	str	r0, [r4, r1, lsl #2]
   1a37c:	mov	r0, #0
   1a380:	ldr	r2, [sp, #20]
   1a384:	str	r0, [r6]
   1a388:	ldrb	r0, [r2, #4]
   1a38c:	cmp	r0, #21
   1a390:	beq	1a610 <__assert_fail@plt+0x8eec>
   1a394:	cmp	r0, #2
   1a398:	ldr	r0, [sp, #36]	; 0x24
   1a39c:	beq	1aec8 <__assert_fail@plt+0x97a4>
   1a3a0:	sub	r1, fp, #80	; 0x50
   1a3a4:	mov	r3, r8
   1a3a8:	mov	r5, r2
   1a3ac:	str	r1, [fp, #-36]	; 0xffffffdc
   1a3b0:	mov	r1, #3
   1a3b4:	str	r1, [fp, #-40]	; 0xffffffd8
   1a3b8:	str	r0, [sp]
   1a3bc:	mov	r0, #0
   1a3c0:	mov	r1, sl
   1a3c4:	str	r0, [sp, #4]
   1a3c8:	sub	r0, fp, #40	; 0x28
   1a3cc:	bl	1b4b0 <__assert_fail@plt+0x9d8c>
   1a3d0:	ldr	r2, [sp, #36]	; 0x24
   1a3d4:	cmp	r0, #0
   1a3d8:	beq	1a1b0 <__assert_fail@plt+0x8a8c>
   1a3dc:	b	1aec0 <__assert_fail@plt+0x979c>
   1a3e0:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1a3e4:	mov	r3, #1
   1a3e8:	ubfx	r1, r0, #5, #3
   1a3ec:	and	r0, r0, #31
   1a3f0:	ldr	r2, [r4, r1, lsl #2]
   1a3f4:	orr	r0, r2, r3, lsl r0
   1a3f8:	ldr	r2, [sp, #20]
   1a3fc:	str	r0, [r4, r1, lsl #2]
   1a400:	b	1a388 <__assert_fail@plt+0x8c64>
   1a404:	ldr	r6, [sp, #32]
   1a408:	ldr	r0, [sp, #12]
   1a40c:	mov	r5, r9
   1a410:	ldr	r1, [r6, #20]
   1a414:	cmp	r0, r1
   1a418:	beq	1a578 <__assert_fail@plt+0x8e54>
   1a41c:	ldr	r0, [r6]
   1a420:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a424:	ldr	r2, [sp, #20]
   1a428:	add	r7, r1, #1
   1a42c:	mov	r9, r5
   1a430:	str	r7, [r6, #20]
   1a434:	str	r3, [r0, r1, lsl #2]
   1a438:	b	1a388 <__assert_fail@plt+0x8c64>
   1a43c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a440:	ldrb	r5, [r0]
   1a444:	cmp	sl, #3
   1a448:	beq	1a45c <__assert_fail@plt+0x8d38>
   1a44c:	cmp	sl, #0
   1a450:	mov	r9, #0
   1a454:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   1a458:	b	1a464 <__assert_fail@plt+0x8d40>
   1a45c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a460:	ldrb	r9, [r0]
   1a464:	cmp	r7, #3
   1a468:	cmpne	r7, #0
   1a46c:	bne	1a494 <__assert_fail@plt+0x8d70>
   1a470:	ldr	r6, [sp, #44]	; 0x2c
   1a474:	ldr	r0, [r6, #92]	; 0x5c
   1a478:	cmp	r0, #2
   1a47c:	blt	1a49c <__assert_fail@plt+0x8d78>
   1a480:	mov	r0, r5
   1a484:	bl	11628 <btowc@plt>
   1a488:	ldr	r2, [sp, #20]
   1a48c:	mov	r5, r0
   1a490:	b	1a49c <__assert_fail@plt+0x8d78>
   1a494:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1a498:	ldr	r6, [sp, #44]	; 0x2c
   1a49c:	cmp	sl, #3
   1a4a0:	cmpne	sl, #0
   1a4a4:	bne	1a4c8 <__assert_fail@plt+0x8da4>
   1a4a8:	ldr	r0, [r6, #92]	; 0x5c
   1a4ac:	cmp	r0, #2
   1a4b0:	blt	1a4cc <__assert_fail@plt+0x8da8>
   1a4b4:	mov	r0, r9
   1a4b8:	bl	11628 <btowc@plt>
   1a4bc:	ldr	r2, [sp, #20]
   1a4c0:	mov	r9, r0
   1a4c4:	b	1a4cc <__assert_fail@plt+0x8da8>
   1a4c8:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1a4cc:	ldr	sl, [sp, #40]	; 0x28
   1a4d0:	cmn	r5, #1
   1a4d4:	mov	r6, #3
   1a4d8:	cmnne	r9, #1
   1a4dc:	beq	1b024 <__assert_fail@plt+0x9900>
   1a4e0:	ldr	r0, [sp, #24]
   1a4e4:	cmp	r0, #0
   1a4e8:	beq	1a4f8 <__assert_fail@plt+0x8dd4>
   1a4ec:	cmp	r5, r9
   1a4f0:	mov	r6, #11
   1a4f4:	bhi	1b024 <__assert_fail@plt+0x9900>
   1a4f8:	ldr	r0, [sp, #44]	; 0x2c
   1a4fc:	ldr	r0, [r0, #92]	; 0x5c
   1a500:	cmp	r0, #2
   1a504:	blt	1a534 <__assert_fail@plt+0x8e10>
   1a508:	ldr	r7, [sp, #32]
   1a50c:	ldr	r1, [sp, #8]
   1a510:	ldr	r0, [r7, #32]
   1a514:	cmp	r1, r0
   1a518:	beq	1a5b0 <__assert_fail@plt+0x8e8c>
   1a51c:	ldmib	r7, {r1, r6}
   1a520:	str	r5, [r1, r0, lsl #2]
   1a524:	ldr	r0, [r7, #32]
   1a528:	add	r1, r0, #1
   1a52c:	str	r1, [r7, #32]
   1a530:	str	r9, [r6, r0, lsl #2]
   1a534:	mov	r0, #0
   1a538:	mov	r6, #1
   1a53c:	cmp	r5, r0
   1a540:	cmpls	r0, r9
   1a544:	bhi	1a55c <__assert_fail@plt+0x8e38>
   1a548:	ubfx	r1, r0, #5, #3
   1a54c:	and	r3, r0, #31
   1a550:	ldr	r7, [r4, r1, lsl #2]
   1a554:	orr	r3, r7, r6, lsl r3
   1a558:	str	r3, [r4, r1, lsl #2]
   1a55c:	add	r0, r0, #1
   1a560:	cmp	r0, #256	; 0x100
   1a564:	bne	1a53c <__assert_fail@plt+0x8e18>
   1a568:	ldr	r6, [sp, #16]
   1a56c:	ldr	r9, [sp, #28]
   1a570:	mov	r0, #0
   1a574:	b	1a384 <__assert_fail@plt+0x8c60>
   1a578:	ldr	r1, [sp, #12]
   1a57c:	mov	r0, #1
   1a580:	orr	r1, r0, r1, lsl #1
   1a584:	ldr	r0, [r6]
   1a588:	str	r1, [sp, #12]
   1a58c:	lsl	r1, r1, #2
   1a590:	bl	228c8 <__assert_fail@plt+0x111a4>
   1a594:	cmp	r0, #0
   1a598:	beq	1b048 <__assert_fail@plt+0x9924>
   1a59c:	ldr	r6, [sp, #32]
   1a5a0:	ldr	sl, [sp, #40]	; 0x28
   1a5a4:	str	r0, [r6]
   1a5a8:	ldr	r1, [r6, #20]
   1a5ac:	b	1a420 <__assert_fail@plt+0x8cfc>
   1a5b0:	ldr	r1, [sp, #8]
   1a5b4:	mov	r0, #1
   1a5b8:	orr	r1, r0, r1, lsl #1
   1a5bc:	ldr	r0, [r7, #4]
   1a5c0:	lsl	r6, r1, #2
   1a5c4:	str	r1, [sp, #8]
   1a5c8:	mov	r1, r6
   1a5cc:	bl	228c8 <__assert_fail@plt+0x111a4>
   1a5d0:	mov	sl, r0
   1a5d4:	ldr	r0, [r7, #8]
   1a5d8:	mov	r1, r6
   1a5dc:	bl	228c8 <__assert_fail@plt+0x111a4>
   1a5e0:	mov	r6, r0
   1a5e4:	cmp	sl, #0
   1a5e8:	mov	r0, sl
   1a5ec:	cmpne	r6, #0
   1a5f0:	beq	1b060 <__assert_fail@plt+0x993c>
   1a5f4:	ldr	r7, [sp, #32]
   1a5f8:	mov	r1, r0
   1a5fc:	stmib	r7, {r0, r6}
   1a600:	ldr	r0, [r7, #32]
   1a604:	ldr	sl, [sp, #40]	; 0x28
   1a608:	ldr	r2, [sp, #20]
   1a60c:	b	1a520 <__assert_fail@plt+0x8dfc>
   1a610:	ldr	r0, [sl, #40]	; 0x28
   1a614:	ldr	r2, [sp, #44]	; 0x2c
   1a618:	cmp	r9, #0
   1a61c:	add	r0, r0, r8
   1a620:	str	r0, [sl, #40]	; 0x28
   1a624:	beq	1a648 <__assert_fail@plt+0x8f24>
   1a628:	mov	r0, #0
   1a62c:	add	r1, r4, r0
   1a630:	add	r0, r0, #16
   1a634:	vld1.32	{d16-d17}, [r1]
   1a638:	cmp	r0, #32
   1a63c:	vmvn	q8, q8
   1a640:	vst1.32	{d16-d17}, [r1]
   1a644:	bne	1a62c <__assert_fail@plt+0x8f08>
   1a648:	ldr	r0, [r2, #92]	; 0x5c
   1a64c:	ldr	r8, [sp, #32]
   1a650:	cmp	r0, #2
   1a654:	blt	1a680 <__assert_fail@plt+0x8f5c>
   1a658:	ldr	r1, [sp, #44]	; 0x2c
   1a65c:	mov	r2, #0
   1a660:	ldr	r1, [r1, #60]	; 0x3c
   1a664:	ldr	r3, [r1, r2, lsl #2]
   1a668:	ldr	r7, [r4, r2, lsl #2]
   1a66c:	and	r3, r7, r3
   1a670:	str	r3, [r4, r2, lsl #2]
   1a674:	add	r2, r2, #1
   1a678:	cmp	r2, #8
   1a67c:	bne	1a664 <__assert_fail@plt+0x8f40>
   1a680:	ldr	r1, [r8, #20]
   1a684:	cmp	r1, #0
   1a688:	bne	1a6b0 <__assert_fail@plt+0x8f8c>
   1a68c:	ldr	r1, [r8, #24]
   1a690:	cmp	r1, #0
   1a694:	bne	1a6b0 <__assert_fail@plt+0x8f8c>
   1a698:	ldr	r1, [r8, #28]
   1a69c:	cmp	r1, #0
   1a6a0:	bne	1a6b0 <__assert_fail@plt+0x8f8c>
   1a6a4:	ldr	r1, [r8, #32]
   1a6a8:	cmp	r1, #0
   1a6ac:	beq	1ae70 <__assert_fail@plt+0x974c>
   1a6b0:	ldr	r6, [sp, #44]	; 0x2c
   1a6b4:	add	r3, sp, #56	; 0x38
   1a6b8:	mov	r1, #0
   1a6bc:	mov	r2, #0
   1a6c0:	mov	r5, #0
   1a6c4:	ldrb	r0, [r6, #88]	; 0x58
   1a6c8:	orr	r0, r0, #2
   1a6cc:	strb	r0, [r6, #88]	; 0x58
   1a6d0:	mov	r0, #6
   1a6d4:	str	r8, [sp, #56]	; 0x38
   1a6d8:	str	r0, [sp, #60]	; 0x3c
   1a6dc:	mov	r0, r6
   1a6e0:	bl	1b074 <__assert_fail@plt+0x9950>
   1a6e4:	cmp	r0, #0
   1a6e8:	beq	1b050 <__assert_fail@plt+0x992c>
   1a6ec:	mov	r9, r0
   1a6f0:	ldr	r0, [r4, r5, lsl #2]
   1a6f4:	cmp	r0, #0
   1a6f8:	bne	1a714 <__assert_fail@plt+0x8ff0>
   1a6fc:	add	r5, r5, #1
   1a700:	cmp	r5, #8
   1a704:	bne	1a6f0 <__assert_fail@plt+0x8fcc>
   1a708:	mov	r0, r4
   1a70c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1a710:	b	1a76c <__assert_fail@plt+0x9048>
   1a714:	mov	r0, #3
   1a718:	str	r4, [sp, #56]	; 0x38
   1a71c:	add	r3, sp, #56	; 0x38
   1a720:	mov	r1, #0
   1a724:	mov	r2, #0
   1a728:	mov	r5, #0
   1a72c:	str	r0, [sp, #60]	; 0x3c
   1a730:	mov	r0, r6
   1a734:	bl	1b074 <__assert_fail@plt+0x9950>
   1a738:	cmp	r0, #0
   1a73c:	beq	1b050 <__assert_fail@plt+0x992c>
   1a740:	mov	r1, r0
   1a744:	mov	r0, #10
   1a748:	sub	r3, fp, #80	; 0x50
   1a74c:	mov	r2, r9
   1a750:	str	r0, [fp, #-76]	; 0xffffffb4
   1a754:	str	r5, [fp, #-80]	; 0xffffffb0
   1a758:	mov	r0, r6
   1a75c:	bl	1b074 <__assert_fail@plt+0x9950>
   1a760:	mov	r9, r0
   1a764:	cmp	r0, #0
   1a768:	beq	1b050 <__assert_fail@plt+0x992c>
   1a76c:	cmp	r9, #0
   1a770:	bne	1a790 <__assert_fail@plt+0x906c>
   1a774:	ldr	r6, [sp, #16]
   1a778:	ldr	r2, [sp, #36]	; 0x24
   1a77c:	ldr	r5, [sp, #20]
   1a780:	ldr	r0, [r6]
   1a784:	cmp	r0, #0
   1a788:	beq	1a79c <__assert_fail@plt+0x9078>
   1a78c:	b	1ad40 <__assert_fail@plt+0x961c>
   1a790:	ldr	r2, [sp, #36]	; 0x24
   1a794:	ldr	r5, [sp, #20]
   1a798:	ldr	r6, [sp, #16]
   1a79c:	mov	r0, r5
   1a7a0:	mov	r1, sl
   1a7a4:	str	r6, [sp, #16]
   1a7a8:	bl	19254 <__assert_fail@plt+0x7b30>
   1a7ac:	ldr	r1, [sl, #40]	; 0x28
   1a7b0:	ldr	r2, [sp, #36]	; 0x24
   1a7b4:	ldr	r3, [sp, #20]
   1a7b8:	mov	r7, #0
   1a7bc:	sub	r4, fp, #80	; 0x50
   1a7c0:	add	r0, r1, r0
   1a7c4:	str	r0, [sl, #40]	; 0x28
   1a7c8:	and	r0, r2, #16777216	; 0x1000000
   1a7cc:	str	r0, [sp, #24]
   1a7d0:	and	r0, r2, #2097152	; 0x200000
   1a7d4:	str	r0, [sp, #12]
   1a7d8:	ldrb	r0, [r3, #4]
   1a7dc:	cmp	r0, #23
   1a7e0:	bhi	1acd4 <__assert_fail@plt+0x95b0>
   1a7e4:	movw	r6, #2048	; 0x800
   1a7e8:	mov	r1, #1
   1a7ec:	movt	r6, #140	; 0x8c
   1a7f0:	tst	r6, r1, lsl r0
   1a7f4:	beq	1acd4 <__assert_fail@plt+0x95b0>
   1a7f8:	cmp	r0, #23
   1a7fc:	bne	1a858 <__assert_fail@plt+0x9134>
   1a800:	ldr	r0, [r3]
   1a804:	ldr	r5, [r3, #4]
   1a808:	mov	r1, r3
   1a80c:	mov	r8, sl
   1a810:	str	r0, [sp, #32]
   1a814:	ldr	r0, [sl, #40]	; 0x28
   1a818:	str	r0, [sp, #28]
   1a81c:	mov	r0, sl
   1a820:	mov	sl, r3
   1a824:	bl	1c004 <__assert_fail@plt+0xa8e0>
   1a828:	cmn	r0, #1
   1a82c:	bne	1a874 <__assert_fail@plt+0x9150>
   1a830:	ldrb	r0, [sl, #4]
   1a834:	mov	r3, sl
   1a838:	cmp	r0, #1
   1a83c:	bne	1aab8 <__assert_fail@plt+0x9394>
   1a840:	ldrb	r1, [r3]
   1a844:	cmp	r1, #44	; 0x2c
   1a848:	bne	1aab8 <__assert_fail@plt+0x9394>
   1a84c:	ldr	r2, [sp, #36]	; 0x24
   1a850:	mov	r6, #0
   1a854:	b	1a88c <__assert_fail@plt+0x9168>
   1a858:	cmp	r0, #19
   1a85c:	sub	r0, r0, #18
   1a860:	mvn	sl, #0
   1a864:	clz	r0, r0
   1a868:	movweq	sl, #1
   1a86c:	lsr	r6, r0, #5
   1a870:	b	1a900 <__assert_fail@plt+0x91dc>
   1a874:	ldr	r2, [sp, #36]	; 0x24
   1a878:	mov	r6, r0
   1a87c:	cmn	r0, #2
   1a880:	mov	r3, sl
   1a884:	beq	1aad4 <__assert_fail@plt+0x93b0>
   1a888:	ldr	r0, [r3, #4]
   1a88c:	uxtb	r0, r0
   1a890:	mov	sl, r6
   1a894:	cmp	r0, #24
   1a898:	beq	1a8d0 <__assert_fail@plt+0x91ac>
   1a89c:	cmp	r0, #1
   1a8a0:	bne	1aad4 <__assert_fail@plt+0x93b0>
   1a8a4:	ldrb	r0, [r3]
   1a8a8:	cmp	r0, #44	; 0x2c
   1a8ac:	bne	1aad4 <__assert_fail@plt+0x93b0>
   1a8b0:	ldr	r0, [sp, #40]	; 0x28
   1a8b4:	mov	r1, r3
   1a8b8:	bl	1c004 <__assert_fail@plt+0xa8e0>
   1a8bc:	ldr	r3, [sp, #20]
   1a8c0:	ldr	r2, [sp, #36]	; 0x24
   1a8c4:	mov	sl, r0
   1a8c8:	cmn	r0, #2
   1a8cc:	beq	1aad4 <__assert_fail@plt+0x93b0>
   1a8d0:	cmn	sl, #1
   1a8d4:	beq	1a8e0 <__assert_fail@plt+0x91bc>
   1a8d8:	cmp	r6, sl
   1a8dc:	bgt	1ac94 <__assert_fail@plt+0x9570>
   1a8e0:	ldrb	r0, [r3, #4]
   1a8e4:	cmp	r0, #24
   1a8e8:	bne	1ac94 <__assert_fail@plt+0x9570>
   1a8ec:	cmn	sl, #1
   1a8f0:	mov	r0, sl
   1a8f4:	moveq	r0, r6
   1a8f8:	cmp	r0, #32768	; 0x8000
   1a8fc:	bge	1acbc <__assert_fail@plt+0x9598>
   1a900:	ldr	r5, [sp, #40]	; 0x28
   1a904:	mov	r0, r3
   1a908:	mov	r1, r5
   1a90c:	bl	19254 <__assert_fail@plt+0x7b30>
   1a910:	ldr	r1, [r5, #40]	; 0x28
   1a914:	cmp	r9, #0
   1a918:	add	r0, r1, r0
   1a91c:	str	r0, [r5, #40]	; 0x28
   1a920:	mov	r5, #0
   1a924:	beq	1ab18 <__assert_fail@plt+0x93f4>
   1a928:	orrs	r0, sl, r6
   1a92c:	beq	1ab28 <__assert_fail@plt+0x9404>
   1a930:	mov	r0, #0
   1a934:	cmp	r6, #1
   1a938:	mov	r8, r9
   1a93c:	str	r0, [sp, #32]
   1a940:	str	r9, [sp, #28]
   1a944:	bge	1ab8c <__assert_fail@plt+0x9468>
   1a948:	ldrb	r0, [r8, #24]
   1a94c:	cmp	r0, #17
   1a950:	bne	1a9c4 <__assert_fail@plt+0x92a0>
   1a954:	ldr	r0, [r8, #20]
   1a958:	mov	r2, r8
   1a95c:	mov	r1, r2
   1a960:	ldr	r2, [r2, #4]
   1a964:	cmp	r2, #0
   1a968:	bne	1a95c <__assert_fail@plt+0x9238>
   1a96c:	ldr	r2, [r1, #8]
   1a970:	cmp	r2, #0
   1a974:	bne	1a95c <__assert_fail@plt+0x9238>
   1a978:	ldr	r2, [r1, #24]
   1a97c:	uxtb	r3, r2
   1a980:	cmp	r3, #17
   1a984:	bne	1a998 <__assert_fail@plt+0x9274>
   1a988:	ldr	r3, [r1, #20]
   1a98c:	cmp	r3, r0
   1a990:	orreq	r2, r2, #524288	; 0x80000
   1a994:	streq	r2, [r1, #24]
   1a998:	ldr	r3, [r1]
   1a99c:	cmp	r3, #0
   1a9a0:	beq	1a9c4 <__assert_fail@plt+0x92a0>
   1a9a4:	ldr	r2, [r3, #8]
   1a9a8:	cmp	r2, r1
   1a9ac:	mov	r1, r3
   1a9b0:	beq	1a978 <__assert_fail@plt+0x9254>
   1a9b4:	cmp	r2, #0
   1a9b8:	mov	r1, r3
   1a9bc:	beq	1a978 <__assert_fail@plt+0x9254>
   1a9c0:	b	1a95c <__assert_fail@plt+0x9238>
   1a9c4:	cmn	sl, #1
   1a9c8:	mov	r0, #10
   1a9cc:	str	r7, [fp, #-80]	; 0xffffffb0
   1a9d0:	mov	r1, r8
   1a9d4:	mov	r2, #0
   1a9d8:	mov	r3, r4
   1a9dc:	movweq	r0, #11
   1a9e0:	str	r0, [fp, #-76]	; 0xffffffb4
   1a9e4:	ldr	r0, [sp, #44]	; 0x2c
   1a9e8:	bl	1b074 <__assert_fail@plt+0x9950>
   1a9ec:	cmp	r0, #0
   1a9f0:	beq	1ac28 <__assert_fail@plt+0x9504>
   1a9f4:	mov	r5, r0
   1a9f8:	add	r0, r6, #2
   1a9fc:	cmp	r0, sl
   1aa00:	ble	1aa38 <__assert_fail@plt+0x9314>
   1aa04:	ldr	r1, [sp, #32]
   1aa08:	ldr	sl, [sp, #40]	; 0x28
   1aa0c:	cmp	r1, #0
   1aa10:	beq	1ab04 <__assert_fail@plt+0x93e0>
   1aa14:	mov	r0, #16
   1aa18:	mov	r2, r5
   1aa1c:	mov	r3, r4
   1aa20:	str	r0, [fp, #-76]	; 0xffffffb4
   1aa24:	ldr	r0, [sp, #44]	; 0x2c
   1aa28:	str	r7, [fp, #-80]	; 0xffffffb0
   1aa2c:	bl	1b074 <__assert_fail@plt+0x9950>
   1aa30:	mov	r5, r0
   1aa34:	b	1ac3c <__assert_fail@plt+0x9518>
   1aa38:	add	r6, r6, #1
   1aa3c:	ldr	r9, [sp, #44]	; 0x2c
   1aa40:	mov	r0, r8
   1aa44:	mov	r1, r9
   1aa48:	bl	1c0b0 <__assert_fail@plt+0xa98c>
   1aa4c:	mov	r8, r0
   1aa50:	mov	r0, #16
   1aa54:	mov	r1, r5
   1aa58:	mov	r3, r4
   1aa5c:	str	r0, [fp, #-76]	; 0xffffffb4
   1aa60:	mov	r0, r9
   1aa64:	mov	r2, r8
   1aa68:	str	r7, [fp, #-80]	; 0xffffffb0
   1aa6c:	bl	1b074 <__assert_fail@plt+0x9950>
   1aa70:	cmp	r8, #0
   1aa74:	movne	r1, r0
   1aa78:	cmpne	r0, #0
   1aa7c:	beq	1ac28 <__assert_fail@plt+0x9504>
   1aa80:	mov	r0, #10
   1aa84:	mov	r2, #0
   1aa88:	mov	r3, r4
   1aa8c:	str	r0, [fp, #-76]	; 0xffffffb4
   1aa90:	ldr	r0, [sp, #44]	; 0x2c
   1aa94:	str	r7, [fp, #-80]	; 0xffffffb0
   1aa98:	bl	1b074 <__assert_fail@plt+0x9950>
   1aa9c:	cmp	r0, #0
   1aaa0:	beq	1ac28 <__assert_fail@plt+0x9504>
   1aaa4:	add	r6, r6, #1
   1aaa8:	mov	r5, r0
   1aaac:	cmp	r6, sl
   1aab0:	blt	1aa3c <__assert_fail@plt+0x9318>
   1aab4:	b	1aa04 <__assert_fail@plt+0x92e0>
   1aab8:	ldr	r0, [sp, #16]
   1aabc:	ldr	r2, [sp, #36]	; 0x24
   1aac0:	mov	r1, #10
   1aac4:	mov	r5, #0
   1aac8:	mov	sl, r8
   1aacc:	str	r1, [r0]
   1aad0:	b	1ac48 <__assert_fail@plt+0x9524>
   1aad4:	ldr	r0, [sp, #12]
   1aad8:	cmp	r0, #0
   1aadc:	beq	1aca0 <__assert_fail@plt+0x957c>
   1aae0:	ldr	sl, [sp, #40]	; 0x28
   1aae4:	ldr	r0, [sp, #28]
   1aae8:	str	r0, [sl, #40]	; 0x28
   1aaec:	mov	r0, #1
   1aaf0:	bfi	r5, r0, #0, #8
   1aaf4:	ldr	r0, [sp, #32]
   1aaf8:	stm	r3, {r0, r5}
   1aafc:	mov	r5, r9
   1ab00:	b	1ac48 <__assert_fail@plt+0x9524>
   1ab04:	ldr	r2, [sp, #36]	; 0x24
   1ab08:	ldr	r3, [sp, #20]
   1ab0c:	clz	r0, r5
   1ab10:	lsr	r0, r0, #5
   1ab14:	b	1ac68 <__assert_fail@plt+0x9544>
   1ab18:	ldr	sl, [sp, #40]	; 0x28
   1ab1c:	ldr	r2, [sp, #36]	; 0x24
   1ab20:	ldr	r3, [sp, #20]
   1ab24:	b	1ac48 <__assert_fail@plt+0x9524>
   1ab28:	ldr	sl, [sp, #40]	; 0x28
   1ab2c:	mov	r0, r9
   1ab30:	mov	r5, r0
   1ab34:	ldr	r0, [r0, #4]
   1ab38:	cmp	r0, #0
   1ab3c:	bne	1ab30 <__assert_fail@plt+0x940c>
   1ab40:	ldr	r0, [r5, #8]
   1ab44:	cmp	r0, #0
   1ab48:	bne	1ab30 <__assert_fail@plt+0x940c>
   1ab4c:	add	r0, r5, #20
   1ab50:	bl	1863c <__assert_fail@plt+0x6f18>
   1ab54:	ldr	r1, [r5]
   1ab58:	cmp	r1, #0
   1ab5c:	beq	1ab80 <__assert_fail@plt+0x945c>
   1ab60:	ldr	r0, [r1, #8]
   1ab64:	cmp	r0, r5
   1ab68:	mov	r5, r1
   1ab6c:	beq	1ab4c <__assert_fail@plt+0x9428>
   1ab70:	cmp	r0, #0
   1ab74:	mov	r5, r1
   1ab78:	beq	1ab4c <__assert_fail@plt+0x9428>
   1ab7c:	b	1ab30 <__assert_fail@plt+0x940c>
   1ab80:	ldr	r2, [sp, #36]	; 0x24
   1ab84:	ldr	r3, [sp, #20]
   1ab88:	b	1accc <__assert_fail@plt+0x95a8>
   1ab8c:	ldr	r9, [sp, #28]
   1ab90:	str	r9, [sp, #32]
   1ab94:	beq	1abf8 <__assert_fail@plt+0x94d4>
   1ab98:	ldr	r0, [sp, #28]
   1ab9c:	sub	r5, r6, #1
   1aba0:	mov	r9, r0
   1aba4:	str	r0, [sp, #32]
   1aba8:	ldr	r8, [sp, #44]	; 0x2c
   1abac:	mov	r0, r9
   1abb0:	mov	r1, r8
   1abb4:	bl	1c0b0 <__assert_fail@plt+0xa98c>
   1abb8:	ldr	r1, [sp, #32]
   1abbc:	mov	r9, r0
   1abc0:	mov	r0, #16
   1abc4:	mov	r3, r4
   1abc8:	str	r0, [fp, #-76]	; 0xffffffb4
   1abcc:	mov	r0, r8
   1abd0:	mov	r2, r9
   1abd4:	str	r7, [fp, #-80]	; 0xffffffb0
   1abd8:	bl	1b074 <__assert_fail@plt+0x9950>
   1abdc:	str	r0, [sp, #32]
   1abe0:	cmp	r9, #0
   1abe4:	ldrne	r0, [sp, #32]
   1abe8:	cmpne	r0, #0
   1abec:	beq	1ac28 <__assert_fail@plt+0x9504>
   1abf0:	subs	r5, r5, #1
   1abf4:	bne	1aba8 <__assert_fail@plt+0x9484>
   1abf8:	cmp	r6, sl
   1abfc:	bne	1ac10 <__assert_fail@plt+0x94ec>
   1ac00:	ldr	sl, [sp, #40]	; 0x28
   1ac04:	ldr	r2, [sp, #36]	; 0x24
   1ac08:	ldr	r5, [sp, #32]
   1ac0c:	b	1ab08 <__assert_fail@plt+0x93e4>
   1ac10:	ldr	r1, [sp, #44]	; 0x2c
   1ac14:	mov	r0, r9
   1ac18:	bl	1c0b0 <__assert_fail@plt+0xa98c>
   1ac1c:	mov	r8, r0
   1ac20:	cmp	r0, #0
   1ac24:	bne	1a948 <__assert_fail@plt+0x9224>
   1ac28:	ldr	r0, [sp, #16]
   1ac2c:	ldr	sl, [sp, #40]	; 0x28
   1ac30:	mov	r1, #12
   1ac34:	mov	r5, #0
   1ac38:	str	r1, [r0]
   1ac3c:	ldr	r2, [sp, #36]	; 0x24
   1ac40:	ldr	r3, [sp, #20]
   1ac44:	ldr	r9, [sp, #28]
   1ac48:	clz	r0, r5
   1ac4c:	cmp	r5, #0
   1ac50:	lsr	r0, r0, #5
   1ac54:	bne	1ac68 <__assert_fail@plt+0x9544>
   1ac58:	ldr	r1, [sp, #16]
   1ac5c:	ldr	r1, [r1]
   1ac60:	cmp	r1, #0
   1ac64:	bne	1ae14 <__assert_fail@plt+0x96f0>
   1ac68:	ldr	r1, [sp, #24]
   1ac6c:	mov	r9, r5
   1ac70:	cmp	r1, #0
   1ac74:	beq	1a7d8 <__assert_fail@plt+0x90b4>
   1ac78:	ldrb	r1, [r3, #4]
   1ac7c:	cmp	r1, #23
   1ac80:	beq	1acdc <__assert_fail@plt+0x95b8>
   1ac84:	cmp	r1, #11
   1ac88:	mov	r9, r5
   1ac8c:	bne	1a7d8 <__assert_fail@plt+0x90b4>
   1ac90:	b	1acdc <__assert_fail@plt+0x95b8>
   1ac94:	ldr	r0, [sp, #16]
   1ac98:	mov	r1, #10
   1ac9c:	b	1acc4 <__assert_fail@plt+0x95a0>
   1aca0:	ldrb	r0, [r3, #4]
   1aca4:	ldr	r1, [sp, #16]
   1aca8:	cmp	r0, #2
   1acac:	mov	r0, #10
   1acb0:	movweq	r0, #9
   1acb4:	str	r0, [r1]
   1acb8:	b	1acc8 <__assert_fail@plt+0x95a4>
   1acbc:	ldr	r0, [sp, #16]
   1acc0:	mov	r1, #15
   1acc4:	str	r1, [r0]
   1acc8:	ldr	sl, [sp, #40]	; 0x28
   1accc:	mov	r5, #0
   1acd0:	b	1ac48 <__assert_fail@plt+0x9524>
   1acd4:	mov	r8, r9
   1acd8:	b	1ad44 <__assert_fail@plt+0x9620>
   1acdc:	cmp	r0, #0
   1ace0:	bne	1ad34 <__assert_fail@plt+0x9610>
   1ace4:	mov	r4, r5
   1ace8:	ldr	r5, [r5, #4]
   1acec:	cmp	r5, #0
   1acf0:	bne	1ace4 <__assert_fail@plt+0x95c0>
   1acf4:	ldr	r5, [r4, #8]
   1acf8:	cmp	r5, #0
   1acfc:	bne	1ace4 <__assert_fail@plt+0x95c0>
   1ad00:	add	r0, r4, #20
   1ad04:	bl	1863c <__assert_fail@plt+0x6f18>
   1ad08:	ldr	r0, [r4]
   1ad0c:	cmp	r0, #0
   1ad10:	beq	1ad34 <__assert_fail@plt+0x9610>
   1ad14:	ldr	r5, [r0, #8]
   1ad18:	cmp	r5, r4
   1ad1c:	mov	r4, r0
   1ad20:	beq	1ad00 <__assert_fail@plt+0x95dc>
   1ad24:	cmp	r5, #0
   1ad28:	mov	r4, r0
   1ad2c:	beq	1ad00 <__assert_fail@plt+0x95dc>
   1ad30:	b	1ace4 <__assert_fail@plt+0x95c0>
   1ad34:	ldr	r1, [sp, #16]
   1ad38:	mov	r0, #13
   1ad3c:	str	r0, [r1]
   1ad40:	mov	r8, #0
   1ad44:	mov	r0, r8
   1ad48:	sub	sp, fp, #28
   1ad4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad50:	mov	r5, #9
   1ad54:	mov	r0, #6
   1ad58:	str	r0, [r4]
   1ad5c:	mov	r0, r6
   1ad60:	mov	r1, #0
   1ad64:	mov	r2, #0
   1ad68:	mov	r3, r4
   1ad6c:	mov	r8, #0
   1ad70:	bl	1b074 <__assert_fail@plt+0x9950>
   1ad74:	mov	r7, r0
   1ad78:	mov	r0, r6
   1ad7c:	mov	r1, #0
   1ad80:	mov	r2, #0
   1ad84:	mov	r3, r4
   1ad88:	str	r5, [r4]
   1ad8c:	bl	1b074 <__assert_fail@plt+0x9950>
   1ad90:	mov	r4, r0
   1ad94:	mov	r0, #10
   1ad98:	sub	r3, fp, #80	; 0x50
   1ad9c:	mov	r1, r7
   1ada0:	str	r0, [fp, #-76]	; 0xffffffb4
   1ada4:	mov	r0, r6
   1ada8:	mov	r2, r4
   1adac:	str	r8, [fp, #-80]	; 0xffffffb0
   1adb0:	bl	1b074 <__assert_fail@plt+0x9950>
   1adb4:	cmp	r7, #0
   1adb8:	cmpne	r4, #0
   1adbc:	bne	1ade4 <__assert_fail@plt+0x96c0>
   1adc0:	mov	r0, #12
   1adc4:	str	r0, [r9]
   1adc8:	b	1ad44 <__assert_fail@plt+0x9620>
   1adcc:	mov	r0, r6
   1add0:	mov	r1, #0
   1add4:	mov	r2, #0
   1add8:	mov	r3, r4
   1addc:	mov	r8, #0
   1ade0:	bl	1b074 <__assert_fail@plt+0x9950>
   1ade4:	mov	r5, r0
   1ade8:	cmp	r0, #0
   1adec:	beq	1adc0 <__assert_fail@plt+0x969c>
   1adf0:	ldr	r0, [sp, #20]
   1adf4:	ldr	r2, [sp, #36]	; 0x24
   1adf8:	mov	r1, sl
   1adfc:	bl	19254 <__assert_fail@plt+0x7b30>
   1ae00:	ldr	r1, [sl, #40]	; 0x28
   1ae04:	mov	r8, r5
   1ae08:	add	r0, r1, r0
   1ae0c:	str	r0, [sl, #40]	; 0x28
   1ae10:	b	1ad44 <__assert_fail@plt+0x9620>
   1ae14:	mov	r8, #0
   1ae18:	cmp	r9, #0
   1ae1c:	beq	1ad44 <__assert_fail@plt+0x9620>
   1ae20:	mov	r5, r9
   1ae24:	ldr	r9, [r9, #4]
   1ae28:	cmp	r9, #0
   1ae2c:	bne	1ae20 <__assert_fail@plt+0x96fc>
   1ae30:	ldr	r9, [r5, #8]
   1ae34:	cmp	r9, #0
   1ae38:	bne	1ae20 <__assert_fail@plt+0x96fc>
   1ae3c:	add	r0, r5, #20
   1ae40:	bl	1863c <__assert_fail@plt+0x6f18>
   1ae44:	ldr	r0, [r5]
   1ae48:	cmp	r0, #0
   1ae4c:	beq	1ad44 <__assert_fail@plt+0x9620>
   1ae50:	ldr	r9, [r0, #8]
   1ae54:	cmp	r9, r5
   1ae58:	mov	r5, r0
   1ae5c:	beq	1ae3c <__assert_fail@plt+0x9718>
   1ae60:	cmp	r9, #0
   1ae64:	mov	r5, r0
   1ae68:	beq	1ae3c <__assert_fail@plt+0x9718>
   1ae6c:	b	1ae20 <__assert_fail@plt+0x96fc>
   1ae70:	cmp	r0, #2
   1ae74:	blt	1ae90 <__assert_fail@plt+0x976c>
   1ae78:	ldr	r0, [r8, #36]	; 0x24
   1ae7c:	cmp	r0, #0
   1ae80:	bne	1a6b0 <__assert_fail@plt+0x8f8c>
   1ae84:	ldrb	r0, [r8, #16]
   1ae88:	tst	r0, #1
   1ae8c:	bne	1a6b0 <__assert_fail@plt+0x8f8c>
   1ae90:	mov	r0, r8
   1ae94:	bl	186cc <__assert_fail@plt+0x6fa8>
   1ae98:	mov	r0, #3
   1ae9c:	str	r4, [sp, #56]	; 0x38
   1aea0:	add	r3, sp, #56	; 0x38
   1aea4:	mov	r1, #0
   1aea8:	mov	r2, #0
   1aeac:	str	r0, [sp, #60]	; 0x3c
   1aeb0:	ldr	r0, [sp, #44]	; 0x2c
   1aeb4:	b	1a75c <__assert_fail@plt+0x9038>
   1aeb8:	mov	r0, #12
   1aebc:	b	1a0cc <__assert_fail@plt+0x89a8>
   1aec0:	mov	r6, r0
   1aec4:	b	1b024 <__assert_fail@plt+0x9900>
   1aec8:	mov	r6, #7
   1aecc:	b	1b024 <__assert_fail@plt+0x9900>
   1aed0:	mov	r0, #2
   1aed4:	b	1b054 <__assert_fail@plt+0x9930>
   1aed8:	mov	r0, r4
   1aedc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1aee0:	mov	r0, r8
   1aee4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1aee8:	ldr	r1, [sp, #16]
   1aeec:	mov	r0, #12
   1aef0:	str	r0, [r1]
   1aef4:	b	1a76c <__assert_fail@plt+0x9048>
   1aef8:	mov	r0, #6
   1aefc:	b	1a0cc <__assert_fail@plt+0x89a8>
   1af00:	mov	r6, #3
   1af04:	b	1b024 <__assert_fail@plt+0x9900>
   1af08:	ldr	r1, [sp, #16]
   1af0c:	mov	r0, #12
   1af10:	str	r0, [r1]
   1af14:	b	1ad44 <__assert_fail@plt+0x9620>
   1af18:	mov	r9, r6
   1af1c:	mov	r5, #0
   1af20:	mov	r8, #0
   1af24:	b	1af34 <__assert_fail@plt+0x9810>
   1af28:	mov	r9, r6
   1af2c:	mov	r8, #4
   1af30:	mov	r5, #128	; 0x80
   1af34:	bl	115a4 <__ctype_b_loc@plt>
   1af38:	ldr	r0, [r0]
   1af3c:	ldr	sl, [sp, #40]	; 0x28
   1af40:	ldr	r4, [sp, #20]
   1af44:	mov	r1, #1
   1af48:	mov	r6, r9
   1af4c:	add	r7, r0, r5, lsl #1
   1af50:	ldr	r0, [sp, #44]	; 0x2c
   1af54:	mov	ip, r6
   1af58:	mov	r3, #0
   1af5c:	add	r0, r0, r8, lsl #2
   1af60:	add	r2, r0, #96	; 0x60
   1af64:	mov	r0, r7
   1af68:	add	r6, r5, r3
   1af6c:	cmp	r6, #95	; 0x5f
   1af70:	beq	1af80 <__assert_fail@plt+0x985c>
   1af74:	ldrh	r6, [r0]
   1af78:	ands	r6, r6, #8
   1af7c:	beq	1af8c <__assert_fail@plt+0x9868>
   1af80:	ldr	r6, [r2]
   1af84:	orr	r6, r6, r1, lsl r3
   1af88:	str	r6, [r2]
   1af8c:	add	r3, r3, #1
   1af90:	add	r0, r0, #2
   1af94:	cmp	r3, #32
   1af98:	bne	1af68 <__assert_fail@plt+0x9844>
   1af9c:	add	r8, r8, #1
   1afa0:	add	r7, r7, #64	; 0x40
   1afa4:	add	r5, r5, #32
   1afa8:	mov	r6, ip
   1afac:	cmp	r8, #8
   1afb0:	bne	1af50 <__assert_fail@plt+0x982c>
   1afb4:	b	19d74 <__assert_fail@plt+0x8650>
   1afb8:	ldr	r9, [sp, #16]
   1afbc:	cmp	r1, #0
   1afc0:	beq	1b014 <__assert_fail@plt+0x98f0>
   1afc4:	mov	r5, r1
   1afc8:	ldr	r1, [r1, #4]
   1afcc:	cmp	r1, #0
   1afd0:	bne	1afc4 <__assert_fail@plt+0x98a0>
   1afd4:	ldr	r1, [r5, #8]
   1afd8:	cmp	r1, #0
   1afdc:	bne	1afc4 <__assert_fail@plt+0x98a0>
   1afe0:	add	r0, r5, #20
   1afe4:	bl	1863c <__assert_fail@plt+0x6f18>
   1afe8:	ldr	r0, [r5]
   1afec:	cmp	r0, #0
   1aff0:	beq	1b014 <__assert_fail@plt+0x98f0>
   1aff4:	ldr	r1, [r0, #8]
   1aff8:	cmp	r1, r5
   1affc:	mov	r5, r0
   1b000:	beq	1afe0 <__assert_fail@plt+0x98bc>
   1b004:	cmp	r1, #0
   1b008:	mov	r5, r0
   1b00c:	beq	1afe0 <__assert_fail@plt+0x98bc>
   1b010:	b	1afc4 <__assert_fail@plt+0x98a0>
   1b014:	mov	r0, #8
   1b018:	b	1adc4 <__assert_fail@plt+0x96a0>
   1b01c:	mov	r6, #3
   1b020:	ldr	sl, [sp, #40]	; 0x28
   1b024:	ldr	r0, [sp, #16]
   1b028:	str	r6, [r0]
   1b02c:	ldr	r8, [sp, #32]
   1b030:	mov	r0, r4
   1b034:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1b038:	mov	r0, r8
   1b03c:	bl	186cc <__assert_fail@plt+0x6fa8>
   1b040:	mov	r9, #0
   1b044:	b	1a76c <__assert_fail@plt+0x9048>
   1b048:	ldr	sl, [sp, #40]	; 0x28
   1b04c:	ldr	r8, [sp, #32]
   1b050:	mov	r0, #12
   1b054:	ldr	r1, [sp, #16]
   1b058:	str	r0, [r1]
   1b05c:	b	1b030 <__assert_fail@plt+0x990c>
   1b060:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1b064:	mov	r0, r6
   1b068:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1b06c:	mov	r6, #12
   1b070:	b	1b020 <__assert_fail@plt+0x98fc>
   1b074:	push	{r4, r5, r6, r7, fp, lr}
   1b078:	add	fp, sp, #16
   1b07c:	mov	r5, r1
   1b080:	ldr	r1, [r0, #64]	; 0x40
   1b084:	mov	r6, r3
   1b088:	mov	r4, r2
   1b08c:	mov	r7, r0
   1b090:	cmp	r1, #31
   1b094:	beq	1b0ec <__assert_fail@plt+0x99c8>
   1b098:	ldr	r0, [r7, #56]	; 0x38
   1b09c:	add	r0, r0, r1, lsl #5
   1b0a0:	add	r2, r1, #1
   1b0a4:	mov	r1, #0
   1b0a8:	cmp	r5, #0
   1b0ac:	str	r2, [r7, #64]	; 0x40
   1b0b0:	mvn	r7, #0
   1b0b4:	str	r1, [r0, #4]!
   1b0b8:	str	r4, [r0, #8]
   1b0bc:	str	r5, [r0, #4]
   1b0c0:	ldm	r6, {r2, r3}
   1b0c4:	str	r7, [r0, #28]
   1b0c8:	str	r1, [r0, #16]
   1b0cc:	str	r1, [r0, #12]
   1b0d0:	bic	r1, r3, #786432	; 0xc0000
   1b0d4:	str	r2, [r0, #20]
   1b0d8:	str	r1, [r0, #24]
   1b0dc:	strne	r0, [r5]
   1b0e0:	cmp	r4, #0
   1b0e4:	strne	r0, [r4]
   1b0e8:	pop	{r4, r5, r6, r7, fp, pc}
   1b0ec:	mov	r0, #996	; 0x3e4
   1b0f0:	bl	22898 <__assert_fail@plt+0x11174>
   1b0f4:	cmp	r0, #0
   1b0f8:	beq	1b114 <__assert_fail@plt+0x99f0>
   1b0fc:	ldr	r1, [r7, #56]	; 0x38
   1b100:	str	r1, [r0]
   1b104:	mov	r1, #0
   1b108:	str	r1, [r7, #64]	; 0x40
   1b10c:	str	r0, [r7, #56]	; 0x38
   1b110:	b	1b09c <__assert_fail@plt+0x9978>
   1b114:	mov	r0, #0
   1b118:	pop	{r4, r5, r6, r7, fp, pc}
   1b11c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b120:	add	fp, sp, #28
   1b124:	sub	sp, sp, #28
   1b128:	mov	sl, r1
   1b12c:	mov	r9, r0
   1b130:	mov	r7, #0
   1b134:	mov	r0, #32
   1b138:	mov	r1, #1
   1b13c:	mov	r8, r3
   1b140:	mov	r4, r2
   1b144:	str	r7, [sp, #16]
   1b148:	bl	22844 <__assert_fail@plt+0x11120>
   1b14c:	ldr	r1, [fp, #12]
   1b150:	cmp	r0, #0
   1b154:	beq	1b304 <__assert_fail@plt+0x9be0>
   1b158:	mov	r5, r0
   1b15c:	mov	r0, #40	; 0x28
   1b160:	mov	r1, #1
   1b164:	bl	22844 <__assert_fail@plt+0x11120>
   1b168:	cmp	r0, #0
   1b16c:	beq	1b30c <__assert_fail@plt+0x9be8>
   1b170:	mov	r6, r0
   1b174:	ldrb	r0, [r0, #16]
   1b178:	ldr	r1, [fp, #8]
   1b17c:	add	r3, sp, #16
   1b180:	mov	r7, #0
   1b184:	stm	sp, {r4, r7}
   1b188:	mov	r2, r6
   1b18c:	and	r0, r0, #254	; 0xfe
   1b190:	orr	r0, r0, r1
   1b194:	mov	r1, r5
   1b198:	strb	r0, [r6, #16]
   1b19c:	mov	r0, sl
   1b1a0:	bl	1b774 <__assert_fail@plt+0xa050>
   1b1a4:	cmp	r0, #0
   1b1a8:	bne	1b328 <__assert_fail@plt+0x9c04>
   1b1ac:	ldrb	r0, [r8]
   1b1b0:	cmp	r0, #0
   1b1b4:	beq	1b1e0 <__assert_fail@plt+0x9abc>
   1b1b8:	add	r1, r8, #1
   1b1bc:	mov	r2, #1
   1b1c0:	ubfx	r3, r0, #5, #3
   1b1c4:	and	r0, r0, #31
   1b1c8:	ldr	r7, [r5, r3, lsl #2]
   1b1cc:	orr	r0, r7, r2, lsl r0
   1b1d0:	str	r0, [r5, r3, lsl #2]
   1b1d4:	ldrb	r0, [r1], #1
   1b1d8:	cmp	r0, #0
   1b1dc:	bne	1b1c0 <__assert_fail@plt+0x9a9c>
   1b1e0:	ldr	r0, [fp, #8]
   1b1e4:	cmp	r0, #0
   1b1e8:	beq	1b20c <__assert_fail@plt+0x9ae8>
   1b1ec:	mov	r0, #0
   1b1f0:	add	r1, r5, r0
   1b1f4:	add	r0, r0, #16
   1b1f8:	vld1.32	{d16-d17}, [r1]
   1b1fc:	cmp	r0, #32
   1b200:	vmvn	q8, q8
   1b204:	vst1.32	{d16-d17}, [r1]
   1b208:	bne	1b1f0 <__assert_fail@plt+0x9acc>
   1b20c:	ldr	r0, [r9, #92]	; 0x5c
   1b210:	cmp	r0, #2
   1b214:	blt	1b23c <__assert_fail@plt+0x9b18>
   1b218:	ldr	r0, [r9, #60]	; 0x3c
   1b21c:	mov	r1, #0
   1b220:	ldr	r2, [r0, r1, lsl #2]
   1b224:	ldr	r3, [r5, r1, lsl #2]
   1b228:	and	r2, r3, r2
   1b22c:	str	r2, [r5, r1, lsl #2]
   1b230:	add	r1, r1, #1
   1b234:	cmp	r1, #8
   1b238:	bne	1b220 <__assert_fail@plt+0x9afc>
   1b23c:	mov	r0, #3
   1b240:	add	r3, sp, #8
   1b244:	mov	r1, #0
   1b248:	mov	r2, #0
   1b24c:	mov	r7, #0
   1b250:	str	r0, [sp, #12]
   1b254:	mov	r0, r9
   1b258:	str	r5, [sp, #8]
   1b25c:	bl	1b074 <__assert_fail@plt+0x9950>
   1b260:	cmp	r0, #0
   1b264:	beq	1b2f0 <__assert_fail@plt+0x9bcc>
   1b268:	mov	r4, r0
   1b26c:	ldr	r0, [r9, #92]	; 0x5c
   1b270:	cmp	r0, #2
   1b274:	blt	1b2d8 <__assert_fail@plt+0x9bb4>
   1b278:	mov	r0, #6
   1b27c:	str	r6, [sp, #8]
   1b280:	add	r3, sp, #8
   1b284:	mov	r1, #0
   1b288:	mov	r2, #0
   1b28c:	mov	r8, #0
   1b290:	str	r0, [sp, #12]
   1b294:	ldrb	r0, [r9, #88]	; 0x58
   1b298:	orr	r0, r0, #2
   1b29c:	strb	r0, [r9, #88]	; 0x58
   1b2a0:	mov	r0, r9
   1b2a4:	bl	1b074 <__assert_fail@plt+0x9950>
   1b2a8:	cmp	r0, #0
   1b2ac:	beq	1b2f0 <__assert_fail@plt+0x9bcc>
   1b2b0:	mov	r2, r0
   1b2b4:	mov	r0, #10
   1b2b8:	add	r3, sp, #20
   1b2bc:	mov	r1, r4
   1b2c0:	str	r0, [sp, #24]
   1b2c4:	mov	r0, r9
   1b2c8:	str	r8, [sp, #20]
   1b2cc:	bl	1b074 <__assert_fail@plt+0x9950>
   1b2d0:	mov	r7, r0
   1b2d4:	b	1b2e4 <__assert_fail@plt+0x9bc0>
   1b2d8:	mov	r0, r6
   1b2dc:	bl	186cc <__assert_fail@plt+0x6fa8>
   1b2e0:	mov	r7, r4
   1b2e4:	mov	r0, r7
   1b2e8:	sub	sp, fp, #28
   1b2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2f0:	mov	r0, r5
   1b2f4:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1b2f8:	mov	r0, r6
   1b2fc:	bl	186cc <__assert_fail@plt+0x6fa8>
   1b300:	ldr	r1, [fp, #12]
   1b304:	mov	r0, #12
   1b308:	b	1b320 <__assert_fail@plt+0x9bfc>
   1b30c:	mov	r0, r5
   1b310:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1b314:	ldr	r1, [fp, #12]
   1b318:	mov	r0, #12
   1b31c:	mov	r7, #0
   1b320:	str	r0, [r1]
   1b324:	b	1b2e4 <__assert_fail@plt+0x9bc0>
   1b328:	mov	r4, r0
   1b32c:	mov	r0, r5
   1b330:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1b334:	mov	r0, r6
   1b338:	bl	186cc <__assert_fail@plt+0x6fa8>
   1b33c:	ldr	r0, [fp, #12]
   1b340:	str	r4, [r0]
   1b344:	b	1b2e4 <__assert_fail@plt+0x9bc0>
   1b348:	push	{fp, lr}
   1b34c:	mov	fp, sp
   1b350:	ldr	ip, [r1, #40]	; 0x28
   1b354:	ldr	r3, [r1, #56]	; 0x38
   1b358:	cmp	r3, ip
   1b35c:	ble	1b3d8 <__assert_fail@plt+0x9cb4>
   1b360:	ldr	r3, [r1, #4]
   1b364:	ldrb	lr, [r3, ip]
   1b368:	strb	lr, [r0]
   1b36c:	ldr	r3, [r1, #80]	; 0x50
   1b370:	cmp	r3, #2
   1b374:	blt	1b398 <__assert_fail@plt+0x9c74>
   1b378:	ldr	r3, [r1, #28]
   1b37c:	ldr	ip, [r1, #40]	; 0x28
   1b380:	cmp	ip, r3
   1b384:	beq	1b398 <__assert_fail@plt+0x9c74>
   1b388:	ldr	r3, [r1, #8]
   1b38c:	ldr	r3, [r3, ip, lsl #2]
   1b390:	cmn	r3, #1
   1b394:	beq	1b480 <__assert_fail@plt+0x9d5c>
   1b398:	tst	r2, #1
   1b39c:	beq	1b3e8 <__assert_fail@plt+0x9cc4>
   1b3a0:	cmp	lr, #92	; 0x5c
   1b3a4:	bne	1b3e8 <__assert_fail@plt+0x9cc4>
   1b3a8:	ldr	r2, [r1, #40]	; 0x28
   1b3ac:	ldr	r3, [r1, #48]	; 0x30
   1b3b0:	add	r2, r2, #1
   1b3b4:	cmp	r2, r3
   1b3b8:	bge	1b480 <__assert_fail@plt+0x9d5c>
   1b3bc:	str	r2, [r1, #40]	; 0x28
   1b3c0:	ldr	r1, [r1, #4]
   1b3c4:	ldrb	r2, [r1, r2]
   1b3c8:	mov	r1, #1
   1b3cc:	strb	r1, [r0, #4]
   1b3d0:	strb	r2, [r0]
   1b3d4:	b	1b488 <__assert_fail@plt+0x9d64>
   1b3d8:	mov	r1, #2
   1b3dc:	strb	r1, [r0, #4]
   1b3e0:	mov	r1, #0
   1b3e4:	b	1b488 <__assert_fail@plt+0x9d64>
   1b3e8:	cmp	lr, #92	; 0x5c
   1b3ec:	bgt	1b440 <__assert_fail@plt+0x9d1c>
   1b3f0:	cmp	lr, #45	; 0x2d
   1b3f4:	beq	1b458 <__assert_fail@plt+0x9d34>
   1b3f8:	cmp	lr, #91	; 0x5b
   1b3fc:	bne	1b480 <__assert_fail@plt+0x9d5c>
   1b400:	ldr	r3, [r1, #40]	; 0x28
   1b404:	ldr	ip, [r1, #48]	; 0x30
   1b408:	add	r3, r3, #1
   1b40c:	cmp	r3, ip
   1b410:	bge	1b470 <__assert_fail@plt+0x9d4c>
   1b414:	ldr	r1, [r1, #4]
   1b418:	ldrb	r1, [r1, r3]
   1b41c:	cmp	r1, #61	; 0x3d
   1b420:	strb	r1, [r0]
   1b424:	beq	1b490 <__assert_fail@plt+0x9d6c>
   1b428:	cmp	r1, #58	; 0x3a
   1b42c:	beq	1b498 <__assert_fail@plt+0x9d74>
   1b430:	cmp	r1, #46	; 0x2e
   1b434:	bne	1b478 <__assert_fail@plt+0x9d54>
   1b438:	mov	r1, #26
   1b43c:	b	1b4a4 <__assert_fail@plt+0x9d80>
   1b440:	cmp	lr, #93	; 0x5d
   1b444:	beq	1b460 <__assert_fail@plt+0x9d3c>
   1b448:	cmp	lr, #94	; 0x5e
   1b44c:	bne	1b480 <__assert_fail@plt+0x9d5c>
   1b450:	mov	r1, #25
   1b454:	b	1b464 <__assert_fail@plt+0x9d40>
   1b458:	mov	r1, #22
   1b45c:	b	1b464 <__assert_fail@plt+0x9d40>
   1b460:	mov	r1, #21
   1b464:	strb	r1, [r0, #4]
   1b468:	mov	r1, #1
   1b46c:	b	1b488 <__assert_fail@plt+0x9d64>
   1b470:	mov	r1, #0
   1b474:	strb	r1, [r0]
   1b478:	mov	r1, #91	; 0x5b
   1b47c:	strb	r1, [r0]
   1b480:	mov	r1, #1
   1b484:	strb	r1, [r0, #4]
   1b488:	mov	r0, r1
   1b48c:	pop	{fp, pc}
   1b490:	mov	r1, #28
   1b494:	b	1b4a4 <__assert_fail@plt+0x9d80>
   1b498:	tst	r2, #4
   1b49c:	beq	1b478 <__assert_fail@plt+0x9d54>
   1b4a0:	mov	r1, #30
   1b4a4:	strb	r1, [r0, #4]
   1b4a8:	mov	r1, #2
   1b4ac:	b	1b488 <__assert_fail@plt+0x9d64>
   1b4b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b4b4:	add	fp, sp, #24
   1b4b8:	sub	sp, sp, #8
   1b4bc:	mov	r5, r2
   1b4c0:	ldr	r2, [r1, #80]	; 0x50
   1b4c4:	mov	r9, r0
   1b4c8:	ldr	r0, [r1, #40]	; 0x28
   1b4cc:	cmp	r2, #1
   1b4d0:	beq	1b544 <__assert_fail@plt+0x9e20>
   1b4d4:	ldr	r2, [r1, #28]
   1b4d8:	add	r6, r0, #1
   1b4dc:	cmp	r6, r2
   1b4e0:	bge	1b544 <__assert_fail@plt+0x9e20>
   1b4e4:	ldr	lr, [r1, #8]
   1b4e8:	sub	r4, r0, r2
   1b4ec:	sub	ip, r2, r0
   1b4f0:	mvn	r2, #0
   1b4f4:	add	r6, lr, r0, lsl #2
   1b4f8:	ldr	r7, [r6, -r2, lsl #2]
   1b4fc:	cmn	r7, #1
   1b500:	bne	1b514 <__assert_fail@plt+0x9df0>
   1b504:	sub	r2, r2, #1
   1b508:	cmp	r4, r2
   1b50c:	bne	1b4f8 <__assert_fail@plt+0x9dd4>
   1b510:	b	1b520 <__assert_fail@plt+0x9dfc>
   1b514:	rsb	ip, r2, #0
   1b518:	cmp	ip, #2
   1b51c:	bcc	1b544 <__assert_fail@plt+0x9e20>
   1b520:	mov	r2, #1
   1b524:	str	r2, [r9]
   1b528:	ldr	r0, [lr, r0, lsl #2]
   1b52c:	str	r0, [r9, #4]
   1b530:	ldr	r0, [r1, #40]	; 0x28
   1b534:	add	r0, r0, ip
   1b538:	str	r0, [r1, #40]	; 0x28
   1b53c:	mov	r0, #0
   1b540:	b	1b76c <__assert_fail@plt+0xa048>
   1b544:	add	r2, r0, r3
   1b548:	str	r2, [r1, #40]	; 0x28
   1b54c:	ldrb	r6, [r5, #4]
   1b550:	sub	r0, r6, #22
   1b554:	cmp	r0, #8
   1b558:	bhi	1b75c <__assert_fail@plt+0xa038>
   1b55c:	add	r3, pc, #0
   1b560:	ldr	pc, [r3, r0, lsl #2]
   1b564:	andeq	fp, r1, r4, lsr r7
   1b568:	andeq	fp, r1, ip, asr r7
   1b56c:	andeq	fp, r1, ip, asr r7
   1b570:	andeq	fp, r1, ip, asr r7
   1b574:	andeq	fp, r1, r8, lsl #11
   1b578:	andeq	fp, r1, ip, asr r7
   1b57c:	andeq	fp, r1, r8, lsl #11
   1b580:	andeq	fp, r1, ip, asr r7
   1b584:	andeq	fp, r1, r8, lsl #11
   1b588:	ldr	r3, [r1, #56]	; 0x38
   1b58c:	mov	r0, #7
   1b590:	cmp	r3, r2
   1b594:	ble	1b76c <__assert_fail@plt+0xa048>
   1b598:	ldrb	r3, [r5]
   1b59c:	mov	r2, #0
   1b5a0:	uxtb	r7, r6
   1b5a4:	cmp	r7, #30
   1b5a8:	bne	1b5b8 <__assert_fail@plt+0x9e94>
   1b5ac:	ldrb	r7, [r1, #75]	; 0x4b
   1b5b0:	cmp	r7, #0
   1b5b4:	bne	1b610 <__assert_fail@plt+0x9eec>
   1b5b8:	ldr	r4, [r1, #40]	; 0x28
   1b5bc:	ldr	r7, [r1, #4]
   1b5c0:	add	r6, r4, #1
   1b5c4:	str	r6, [r1, #40]	; 0x28
   1b5c8:	ldrb	r4, [r7, r4]
   1b5cc:	ldr	r7, [r1, #56]	; 0x38
   1b5d0:	cmp	r7, r6
   1b5d4:	ble	1b76c <__assert_fail@plt+0xa048>
   1b5d8:	uxtb	r7, r4
   1b5dc:	cmp	r7, r3
   1b5e0:	bne	1b5f4 <__assert_fail@plt+0x9ed0>
   1b5e4:	ldr	r7, [r1, #4]
   1b5e8:	ldrb	r7, [r7, r6]
   1b5ec:	cmp	r7, #93	; 0x5d
   1b5f0:	beq	1b6e8 <__assert_fail@plt+0x9fc4>
   1b5f4:	ldr	r7, [r9, #4]
   1b5f8:	strb	r4, [r7, r2]
   1b5fc:	add	r2, r2, #1
   1b600:	cmp	r2, #32
   1b604:	beq	1b76c <__assert_fail@plt+0xa048>
   1b608:	ldrb	r6, [r5, #4]
   1b60c:	b	1b5a0 <__assert_fail@plt+0x9e7c>
   1b610:	ldrb	r7, [r1, #76]	; 0x4c
   1b614:	cmp	r7, #0
   1b618:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b61c:	ldr	lr, [r1, #28]
   1b620:	ldr	ip, [r1, #40]	; 0x28
   1b624:	cmp	lr, ip
   1b628:	beq	1b63c <__assert_fail@plt+0x9f18>
   1b62c:	ldr	r4, [r1, #8]
   1b630:	ldr	r4, [r4, ip, lsl #2]
   1b634:	cmn	r4, #1
   1b638:	beq	1b6d4 <__assert_fail@plt+0x9fb0>
   1b63c:	ldr	r6, [r1, #12]
   1b640:	ldr	r7, [r1, #24]
   1b644:	ldr	r4, [r1]
   1b648:	ldr	r6, [r6, ip, lsl #2]
   1b64c:	add	r6, r7, r6
   1b650:	add	r4, r4, r6
   1b654:	ldrsb	r4, [r4]
   1b658:	cmn	r4, #1
   1b65c:	ble	1b6d4 <__assert_fail@plt+0x9fb0>
   1b660:	ldr	r7, [r1, #80]	; 0x50
   1b664:	mov	r6, #1
   1b668:	cmp	r7, #1
   1b66c:	beq	1b6a8 <__assert_fail@plt+0x9f84>
   1b670:	add	r7, ip, #1
   1b674:	cmp	r7, lr
   1b678:	bge	1b6a8 <__assert_fail@plt+0x9f84>
   1b67c:	ldr	r6, [r1, #8]
   1b680:	sub	lr, lr, ip
   1b684:	add	r8, r6, ip, lsl #2
   1b688:	mov	r6, #1
   1b68c:	ldr	r7, [r8, r6, lsl #2]
   1b690:	cmn	r7, #1
   1b694:	bne	1b6a8 <__assert_fail@plt+0x9f84>
   1b698:	add	r6, r6, #1
   1b69c:	cmp	lr, r6
   1b6a0:	bne	1b68c <__assert_fail@plt+0x9f68>
   1b6a4:	mov	r6, lr
   1b6a8:	add	r6, r6, ip
   1b6ac:	str	r6, [r1, #40]	; 0x28
   1b6b0:	b	1b5cc <__assert_fail@plt+0x9ea8>
   1b6b4:	ldr	r7, [r1, #40]	; 0x28
   1b6b8:	ldr	r4, [r1, #24]
   1b6bc:	ldr	ip, [r1]
   1b6c0:	add	r6, r7, #1
   1b6c4:	add	r7, r7, r4
   1b6c8:	str	r6, [r1, #40]	; 0x28
   1b6cc:	ldrb	r4, [ip, r7]
   1b6d0:	b	1b5cc <__assert_fail@plt+0x9ea8>
   1b6d4:	add	r6, ip, #1
   1b6d8:	str	r6, [r1, #40]	; 0x28
   1b6dc:	ldr	r7, [r1, #4]
   1b6e0:	ldrb	r4, [r7, ip]
   1b6e4:	b	1b5cc <__assert_fail@plt+0x9ea8>
   1b6e8:	add	r0, r6, #1
   1b6ec:	str	r0, [r1, #40]	; 0x28
   1b6f0:	mov	r0, #0
   1b6f4:	ldr	r1, [r9, #4]
   1b6f8:	strb	r0, [r1, r2]
   1b6fc:	ldrb	r1, [r5, #4]
   1b700:	cmp	r1, #30
   1b704:	beq	1b720 <__assert_fail@plt+0x9ffc>
   1b708:	cmp	r1, #28
   1b70c:	beq	1b728 <__assert_fail@plt+0xa004>
   1b710:	cmp	r1, #26
   1b714:	moveq	r1, #3
   1b718:	streq	r1, [r9]
   1b71c:	b	1b76c <__assert_fail@plt+0xa048>
   1b720:	mov	r1, #4
   1b724:	b	1b72c <__assert_fail@plt+0xa008>
   1b728:	mov	r1, #2
   1b72c:	str	r1, [r9]
   1b730:	b	1b76c <__assert_fail@plt+0xa048>
   1b734:	ldr	r0, [fp, #12]
   1b738:	cmp	r0, #0
   1b73c:	bne	1b75c <__assert_fail@plt+0xa038>
   1b740:	ldr	r2, [fp, #8]
   1b744:	mov	r0, sp
   1b748:	bl	1b348 <__assert_fail@plt+0x9c24>
   1b74c:	ldrb	r1, [sp, #4]
   1b750:	mov	r0, #11
   1b754:	cmp	r1, #21
   1b758:	bne	1b76c <__assert_fail@plt+0xa048>
   1b75c:	mov	r0, #0
   1b760:	str	r0, [r9]
   1b764:	ldrb	r1, [r5]
   1b768:	strb	r1, [r9, #4]
   1b76c:	sub	sp, fp, #24
   1b770:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b774:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b778:	add	fp, sp, #24
   1b77c:	mov	r8, r0
   1b780:	ldrb	r0, [fp, #14]
   1b784:	ldr	r6, [fp, #8]
   1b788:	mov	r5, r3
   1b78c:	mov	r7, r2
   1b790:	mov	r4, r1
   1b794:	tst	r0, #64	; 0x40
   1b798:	beq	1b7d4 <__assert_fail@plt+0xa0b0>
   1b79c:	movw	r1, #15818	; 0x3dca
   1b7a0:	mov	r0, r6
   1b7a4:	movt	r1, #2
   1b7a8:	bl	113e8 <strcmp@plt>
   1b7ac:	cmp	r0, #0
   1b7b0:	beq	1b7cc <__assert_fail@plt+0xa0a8>
   1b7b4:	movw	r1, #15824	; 0x3dd0
   1b7b8:	mov	r0, r6
   1b7bc:	movt	r1, #2
   1b7c0:	bl	113e8 <strcmp@plt>
   1b7c4:	cmp	r0, #0
   1b7c8:	bne	1b7d4 <__assert_fail@plt+0xa0b0>
   1b7cc:	movw	r6, #15830	; 0x3dd6
   1b7d0:	movt	r6, #2
   1b7d4:	ldr	r0, [r5]
   1b7d8:	ldr	r1, [r7, #36]	; 0x24
   1b7dc:	cmp	r0, r1
   1b7e0:	beq	1bcd4 <__assert_fail@plt+0xa5b0>
   1b7e4:	mov	r0, r6
   1b7e8:	bl	113c4 <wctype@plt>
   1b7ec:	ldr	r2, [r7, #36]	; 0x24
   1b7f0:	ldr	r1, [r7, #12]
   1b7f4:	add	r3, r2, #1
   1b7f8:	str	r3, [r7, #36]	; 0x24
   1b7fc:	str	r0, [r1, r2, lsl #2]
   1b800:	movw	r1, #15806	; 0x3dbe
   1b804:	mov	r0, r6
   1b808:	movt	r1, #2
   1b80c:	bl	113e8 <strcmp@plt>
   1b810:	cmp	r0, #0
   1b814:	beq	1b978 <__assert_fail@plt+0xa254>
   1b818:	movw	r1, #15836	; 0x3ddc
   1b81c:	mov	r0, r6
   1b820:	movt	r1, #2
   1b824:	bl	113e8 <strcmp@plt>
   1b828:	cmp	r0, #0
   1b82c:	beq	1b9c4 <__assert_fail@plt+0xa2a0>
   1b830:	movw	r1, #15824	; 0x3dd0
   1b834:	mov	r0, r6
   1b838:	movt	r1, #2
   1b83c:	bl	113e8 <strcmp@plt>
   1b840:	cmp	r0, #0
   1b844:	beq	1ba10 <__assert_fail@plt+0xa2ec>
   1b848:	movw	r1, #15812	; 0x3dc4
   1b84c:	mov	r0, r6
   1b850:	movt	r1, #2
   1b854:	bl	113e8 <strcmp@plt>
   1b858:	cmp	r0, #0
   1b85c:	beq	1ba5c <__assert_fail@plt+0xa338>
   1b860:	movw	r1, #15830	; 0x3dd6
   1b864:	mov	r0, r6
   1b868:	movt	r1, #2
   1b86c:	bl	113e8 <strcmp@plt>
   1b870:	cmp	r0, #0
   1b874:	beq	1baa8 <__assert_fail@plt+0xa384>
   1b878:	movw	r1, #15867	; 0x3dfb
   1b87c:	mov	r0, r6
   1b880:	movt	r1, #2
   1b884:	bl	113e8 <strcmp@plt>
   1b888:	cmp	r0, #0
   1b88c:	beq	1baf4 <__assert_fail@plt+0xa3d0>
   1b890:	movw	r1, #15842	; 0x3de2
   1b894:	mov	r0, r6
   1b898:	movt	r1, #2
   1b89c:	bl	113e8 <strcmp@plt>
   1b8a0:	cmp	r0, #0
   1b8a4:	beq	1bb44 <__assert_fail@plt+0xa420>
   1b8a8:	movw	r1, #15818	; 0x3dca
   1b8ac:	mov	r0, r6
   1b8b0:	movt	r1, #2
   1b8b4:	bl	113e8 <strcmp@plt>
   1b8b8:	cmp	r0, #0
   1b8bc:	beq	1bb94 <__assert_fail@plt+0xa470>
   1b8c0:	movw	r1, #15848	; 0x3de8
   1b8c4:	mov	r0, r6
   1b8c8:	movt	r1, #2
   1b8cc:	bl	113e8 <strcmp@plt>
   1b8d0:	cmp	r0, #0
   1b8d4:	beq	1bbe4 <__assert_fail@plt+0xa4c0>
   1b8d8:	movw	r1, #15854	; 0x3dee
   1b8dc:	mov	r0, r6
   1b8e0:	movt	r1, #2
   1b8e4:	bl	113e8 <strcmp@plt>
   1b8e8:	cmp	r0, #0
   1b8ec:	beq	1bc34 <__assert_fail@plt+0xa510>
   1b8f0:	movw	r1, #15860	; 0x3df4
   1b8f4:	mov	r0, r6
   1b8f8:	movt	r1, #2
   1b8fc:	bl	113e8 <strcmp@plt>
   1b900:	cmp	r0, #0
   1b904:	beq	1bc84 <__assert_fail@plt+0xa560>
   1b908:	movw	r1, #15866	; 0x3dfa
   1b90c:	mov	r0, r6
   1b910:	movt	r1, #2
   1b914:	bl	113e8 <strcmp@plt>
   1b918:	mov	r1, r0
   1b91c:	mov	r0, #4
   1b920:	cmp	r1, #0
   1b924:	bne	1bcd0 <__assert_fail@plt+0xa5ac>
   1b928:	bl	115a4 <__ctype_b_loc@plt>
   1b92c:	ldr	r1, [r0]
   1b930:	mov	r2, #0
   1b934:	mov	r3, #1
   1b938:	cmp	r8, #0
   1b93c:	bne	1bf38 <__assert_fail@plt+0xa814>
   1b940:	ldrb	r0, [r1, #1]
   1b944:	tst	r0, #16
   1b948:	beq	1b960 <__assert_fail@plt+0xa23c>
   1b94c:	ubfx	r0, r2, #5, #3
   1b950:	and	r6, r2, #31
   1b954:	ldr	r7, [r4, r0, lsl #2]
   1b958:	orr	r7, r7, r3, lsl r6
   1b95c:	str	r7, [r4, r0, lsl #2]
   1b960:	add	r2, r2, #1
   1b964:	add	r1, r1, #2
   1b968:	mov	r0, #0
   1b96c:	cmp	r2, #256	; 0x100
   1b970:	bne	1b940 <__assert_fail@plt+0xa21c>
   1b974:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1b978:	bl	115a4 <__ctype_b_loc@plt>
   1b97c:	ldr	r1, [r0]
   1b980:	cmp	r8, #0
   1b984:	bne	1bd74 <__assert_fail@plt+0xa650>
   1b988:	mov	r0, #0
   1b98c:	mov	r2, #1
   1b990:	ldrb	r3, [r1]
   1b994:	tst	r3, #8
   1b998:	beq	1b9b0 <__assert_fail@plt+0xa28c>
   1b99c:	ubfx	r3, r0, #5, #3
   1b9a0:	and	r6, r0, #31
   1b9a4:	ldr	r7, [r4, r3, lsl #2]
   1b9a8:	orr	r7, r7, r2, lsl r6
   1b9ac:	str	r7, [r4, r3, lsl #2]
   1b9b0:	add	r0, r0, #1
   1b9b4:	add	r1, r1, #2
   1b9b8:	cmp	r0, #256	; 0x100
   1b9bc:	bne	1b990 <__assert_fail@plt+0xa26c>
   1b9c0:	b	1bb3c <__assert_fail@plt+0xa418>
   1b9c4:	bl	115a4 <__ctype_b_loc@plt>
   1b9c8:	ldr	r1, [r0]
   1b9cc:	cmp	r8, #0
   1b9d0:	bne	1bdf4 <__assert_fail@plt+0xa6d0>
   1b9d4:	mov	r0, #0
   1b9d8:	mov	r2, #1
   1b9dc:	ldrb	r3, [r1]
   1b9e0:	tst	r3, #2
   1b9e4:	beq	1b9fc <__assert_fail@plt+0xa2d8>
   1b9e8:	ubfx	r3, r0, #5, #3
   1b9ec:	and	r6, r0, #31
   1b9f0:	ldr	r7, [r4, r3, lsl #2]
   1b9f4:	orr	r7, r7, r2, lsl r6
   1b9f8:	str	r7, [r4, r3, lsl #2]
   1b9fc:	add	r0, r0, #1
   1ba00:	add	r1, r1, #2
   1ba04:	cmp	r0, #256	; 0x100
   1ba08:	bne	1b9dc <__assert_fail@plt+0xa2b8>
   1ba0c:	b	1bb3c <__assert_fail@plt+0xa418>
   1ba10:	bl	115a4 <__ctype_b_loc@plt>
   1ba14:	ldr	r1, [r0]
   1ba18:	cmp	r8, #0
   1ba1c:	bne	1be74 <__assert_fail@plt+0xa750>
   1ba20:	mov	r0, #0
   1ba24:	mov	r2, #1
   1ba28:	ldrb	r3, [r1, #1]
   1ba2c:	tst	r3, #2
   1ba30:	beq	1ba48 <__assert_fail@plt+0xa324>
   1ba34:	ubfx	r3, r0, #5, #3
   1ba38:	and	r6, r0, #31
   1ba3c:	ldr	r7, [r4, r3, lsl #2]
   1ba40:	orr	r7, r7, r2, lsl r6
   1ba44:	str	r7, [r4, r3, lsl #2]
   1ba48:	add	r0, r0, #1
   1ba4c:	add	r1, r1, #2
   1ba50:	cmp	r0, #256	; 0x100
   1ba54:	bne	1ba28 <__assert_fail@plt+0xa304>
   1ba58:	b	1bb3c <__assert_fail@plt+0xa418>
   1ba5c:	bl	115a4 <__ctype_b_loc@plt>
   1ba60:	ldr	r1, [r0]
   1ba64:	cmp	r8, #0
   1ba68:	bne	1bef4 <__assert_fail@plt+0xa7d0>
   1ba6c:	mov	r0, #0
   1ba70:	mov	r2, #1
   1ba74:	ldrb	r3, [r1, #1]
   1ba78:	tst	r3, #32
   1ba7c:	beq	1ba94 <__assert_fail@plt+0xa370>
   1ba80:	ubfx	r3, r0, #5, #3
   1ba84:	and	r6, r0, #31
   1ba88:	ldr	r7, [r4, r3, lsl #2]
   1ba8c:	orr	r7, r7, r2, lsl r6
   1ba90:	str	r7, [r4, r3, lsl #2]
   1ba94:	add	r0, r0, #1
   1ba98:	add	r1, r1, #2
   1ba9c:	cmp	r0, #256	; 0x100
   1baa0:	bne	1ba74 <__assert_fail@plt+0xa350>
   1baa4:	b	1bb3c <__assert_fail@plt+0xa418>
   1baa8:	bl	115a4 <__ctype_b_loc@plt>
   1baac:	ldr	r1, [r0]
   1bab0:	cmp	r8, #0
   1bab4:	bne	1bf74 <__assert_fail@plt+0xa850>
   1bab8:	mov	r0, #0
   1babc:	mov	r2, #1
   1bac0:	ldrb	r3, [r1, #1]
   1bac4:	tst	r3, #4
   1bac8:	beq	1bae0 <__assert_fail@plt+0xa3bc>
   1bacc:	ubfx	r3, r0, #5, #3
   1bad0:	and	r6, r0, #31
   1bad4:	ldr	r7, [r4, r3, lsl #2]
   1bad8:	orr	r7, r7, r2, lsl r6
   1badc:	str	r7, [r4, r3, lsl #2]
   1bae0:	add	r0, r0, #1
   1bae4:	add	r1, r1, #2
   1bae8:	cmp	r0, #256	; 0x100
   1baec:	bne	1bac0 <__assert_fail@plt+0xa39c>
   1baf0:	b	1bb3c <__assert_fail@plt+0xa418>
   1baf4:	bl	115a4 <__ctype_b_loc@plt>
   1baf8:	ldr	r1, [r0]
   1bafc:	cmp	r8, #0
   1bb00:	bne	1bfb8 <__assert_fail@plt+0xa894>
   1bb04:	mov	r0, #0
   1bb08:	mov	r2, #1
   1bb0c:	ldrb	r3, [r1, #1]
   1bb10:	tst	r3, #8
   1bb14:	beq	1bb2c <__assert_fail@plt+0xa408>
   1bb18:	ubfx	r3, r0, #5, #3
   1bb1c:	and	r6, r0, #31
   1bb20:	ldr	r7, [r4, r3, lsl #2]
   1bb24:	orr	r7, r7, r2, lsl r6
   1bb28:	str	r7, [r4, r3, lsl #2]
   1bb2c:	add	r0, r0, #1
   1bb30:	add	r1, r1, #2
   1bb34:	cmp	r0, #256	; 0x100
   1bb38:	bne	1bb0c <__assert_fail@plt+0xa3e8>
   1bb3c:	mov	r0, #0
   1bb40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb44:	bl	115a4 <__ctype_b_loc@plt>
   1bb48:	ldr	r1, [r0]
   1bb4c:	mov	r2, #0
   1bb50:	mov	r3, #1
   1bb54:	cmp	r8, #0
   1bb58:	bne	1bcfc <__assert_fail@plt+0xa5d8>
   1bb5c:	ldrb	r0, [r1, #1]
   1bb60:	tst	r0, #64	; 0x40
   1bb64:	beq	1bb7c <__assert_fail@plt+0xa458>
   1bb68:	ubfx	r0, r2, #5, #3
   1bb6c:	and	r6, r2, #31
   1bb70:	ldr	r7, [r4, r0, lsl #2]
   1bb74:	orr	r7, r7, r3, lsl r6
   1bb78:	str	r7, [r4, r0, lsl #2]
   1bb7c:	add	r2, r2, #1
   1bb80:	add	r1, r1, #2
   1bb84:	mov	r0, #0
   1bb88:	cmp	r2, #256	; 0x100
   1bb8c:	bne	1bb5c <__assert_fail@plt+0xa438>
   1bb90:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bb94:	bl	115a4 <__ctype_b_loc@plt>
   1bb98:	ldr	r1, [r0]
   1bb9c:	mov	r2, #0
   1bba0:	mov	r3, #1
   1bba4:	cmp	r8, #0
   1bba8:	bne	1bd38 <__assert_fail@plt+0xa614>
   1bbac:	ldrb	r0, [r1, #1]
   1bbb0:	tst	r0, #1
   1bbb4:	beq	1bbcc <__assert_fail@plt+0xa4a8>
   1bbb8:	ubfx	r0, r2, #5, #3
   1bbbc:	and	r6, r2, #31
   1bbc0:	ldr	r7, [r4, r0, lsl #2]
   1bbc4:	orr	r7, r7, r3, lsl r6
   1bbc8:	str	r7, [r4, r0, lsl #2]
   1bbcc:	add	r2, r2, #1
   1bbd0:	add	r1, r1, #2
   1bbd4:	mov	r0, #0
   1bbd8:	cmp	r2, #256	; 0x100
   1bbdc:	bne	1bbac <__assert_fail@plt+0xa488>
   1bbe0:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bbe4:	bl	115a4 <__ctype_b_loc@plt>
   1bbe8:	ldr	r1, [r0]
   1bbec:	mov	r2, #0
   1bbf0:	mov	r3, #1
   1bbf4:	cmp	r8, #0
   1bbf8:	bne	1bdb8 <__assert_fail@plt+0xa694>
   1bbfc:	ldrb	r0, [r1]
   1bc00:	tst	r0, #1
   1bc04:	beq	1bc1c <__assert_fail@plt+0xa4f8>
   1bc08:	ubfx	r0, r2, #5, #3
   1bc0c:	and	r6, r2, #31
   1bc10:	ldr	r7, [r4, r0, lsl #2]
   1bc14:	orr	r7, r7, r3, lsl r6
   1bc18:	str	r7, [r4, r0, lsl #2]
   1bc1c:	add	r2, r2, #1
   1bc20:	add	r1, r1, #2
   1bc24:	mov	r0, #0
   1bc28:	cmp	r2, #256	; 0x100
   1bc2c:	bne	1bbfc <__assert_fail@plt+0xa4d8>
   1bc30:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bc34:	bl	115a4 <__ctype_b_loc@plt>
   1bc38:	ldr	r1, [r0]
   1bc3c:	mov	r2, #0
   1bc40:	mov	r3, #1
   1bc44:	cmp	r8, #0
   1bc48:	bne	1be38 <__assert_fail@plt+0xa714>
   1bc4c:	ldrsh	r0, [r1]
   1bc50:	cmn	r0, #1
   1bc54:	bgt	1bc6c <__assert_fail@plt+0xa548>
   1bc58:	ubfx	r0, r2, #5, #3
   1bc5c:	and	r6, r2, #31
   1bc60:	ldr	r7, [r4, r0, lsl #2]
   1bc64:	orr	r7, r7, r3, lsl r6
   1bc68:	str	r7, [r4, r0, lsl #2]
   1bc6c:	add	r2, r2, #1
   1bc70:	add	r1, r1, #2
   1bc74:	mov	r0, #0
   1bc78:	cmp	r2, #256	; 0x100
   1bc7c:	bne	1bc4c <__assert_fail@plt+0xa528>
   1bc80:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bc84:	bl	115a4 <__ctype_b_loc@plt>
   1bc88:	ldr	r1, [r0]
   1bc8c:	mov	r2, #0
   1bc90:	mov	r3, #1
   1bc94:	cmp	r8, #0
   1bc98:	bne	1beb8 <__assert_fail@plt+0xa794>
   1bc9c:	ldrb	r0, [r1]
   1bca0:	tst	r0, #4
   1bca4:	beq	1bcbc <__assert_fail@plt+0xa598>
   1bca8:	ubfx	r0, r2, #5, #3
   1bcac:	and	r6, r2, #31
   1bcb0:	ldr	r7, [r4, r0, lsl #2]
   1bcb4:	orr	r7, r7, r3, lsl r6
   1bcb8:	str	r7, [r4, r0, lsl #2]
   1bcbc:	add	r2, r2, #1
   1bcc0:	add	r1, r1, #2
   1bcc4:	mov	r0, #0
   1bcc8:	cmp	r2, #256	; 0x100
   1bccc:	bne	1bc9c <__assert_fail@plt+0xa578>
   1bcd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bcd4:	mov	r1, #1
   1bcd8:	orr	r9, r1, r0, lsl #1
   1bcdc:	ldr	r0, [r7, #12]
   1bce0:	lsl	r1, r9, #2
   1bce4:	bl	228c8 <__assert_fail@plt+0x111a4>
   1bce8:	cmp	r0, #0
   1bcec:	beq	1bffc <__assert_fail@plt+0xa8d8>
   1bcf0:	str	r0, [r7, #12]
   1bcf4:	str	r9, [r5]
   1bcf8:	b	1b7e4 <__assert_fail@plt+0xa0c0>
   1bcfc:	ldrb	r0, [r1, #1]
   1bd00:	tst	r0, #64	; 0x40
   1bd04:	beq	1bd20 <__assert_fail@plt+0xa5fc>
   1bd08:	ldrb	r0, [r8, r2]
   1bd0c:	ubfx	r7, r0, #5, #3
   1bd10:	and	r0, r0, #31
   1bd14:	ldr	r6, [r4, r7, lsl #2]
   1bd18:	orr	r0, r6, r3, lsl r0
   1bd1c:	str	r0, [r4, r7, lsl #2]
   1bd20:	add	r2, r2, #1
   1bd24:	add	r1, r1, #2
   1bd28:	mov	r0, #0
   1bd2c:	cmp	r2, #256	; 0x100
   1bd30:	bne	1bcfc <__assert_fail@plt+0xa5d8>
   1bd34:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bd38:	ldrb	r0, [r1, #1]
   1bd3c:	tst	r0, #1
   1bd40:	beq	1bd5c <__assert_fail@plt+0xa638>
   1bd44:	ldrb	r0, [r8, r2]
   1bd48:	ubfx	r7, r0, #5, #3
   1bd4c:	and	r0, r0, #31
   1bd50:	ldr	r6, [r4, r7, lsl #2]
   1bd54:	orr	r0, r6, r3, lsl r0
   1bd58:	str	r0, [r4, r7, lsl #2]
   1bd5c:	add	r2, r2, #1
   1bd60:	add	r1, r1, #2
   1bd64:	mov	r0, #0
   1bd68:	cmp	r2, #256	; 0x100
   1bd6c:	bne	1bd38 <__assert_fail@plt+0xa614>
   1bd70:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bd74:	mov	r2, #0
   1bd78:	mov	r3, #1
   1bd7c:	ldrb	r0, [r1]
   1bd80:	tst	r0, #8
   1bd84:	beq	1bda0 <__assert_fail@plt+0xa67c>
   1bd88:	ldrb	r0, [r8, r2]
   1bd8c:	ubfx	r7, r0, #5, #3
   1bd90:	and	r0, r0, #31
   1bd94:	ldr	r6, [r4, r7, lsl #2]
   1bd98:	orr	r0, r6, r3, lsl r0
   1bd9c:	str	r0, [r4, r7, lsl #2]
   1bda0:	add	r2, r2, #1
   1bda4:	add	r1, r1, #2
   1bda8:	mov	r0, #0
   1bdac:	cmp	r2, #256	; 0x100
   1bdb0:	bne	1bd7c <__assert_fail@plt+0xa658>
   1bdb4:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bdb8:	ldrb	r0, [r1]
   1bdbc:	tst	r0, #1
   1bdc0:	beq	1bddc <__assert_fail@plt+0xa6b8>
   1bdc4:	ldrb	r0, [r8, r2]
   1bdc8:	ubfx	r7, r0, #5, #3
   1bdcc:	and	r0, r0, #31
   1bdd0:	ldr	r6, [r4, r7, lsl #2]
   1bdd4:	orr	r0, r6, r3, lsl r0
   1bdd8:	str	r0, [r4, r7, lsl #2]
   1bddc:	add	r2, r2, #1
   1bde0:	add	r1, r1, #2
   1bde4:	mov	r0, #0
   1bde8:	cmp	r2, #256	; 0x100
   1bdec:	bne	1bdb8 <__assert_fail@plt+0xa694>
   1bdf0:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bdf4:	mov	r2, #0
   1bdf8:	mov	r3, #1
   1bdfc:	ldrb	r0, [r1]
   1be00:	tst	r0, #2
   1be04:	beq	1be20 <__assert_fail@plt+0xa6fc>
   1be08:	ldrb	r0, [r8, r2]
   1be0c:	ubfx	r7, r0, #5, #3
   1be10:	and	r0, r0, #31
   1be14:	ldr	r6, [r4, r7, lsl #2]
   1be18:	orr	r0, r6, r3, lsl r0
   1be1c:	str	r0, [r4, r7, lsl #2]
   1be20:	add	r2, r2, #1
   1be24:	add	r1, r1, #2
   1be28:	mov	r0, #0
   1be2c:	cmp	r2, #256	; 0x100
   1be30:	bne	1bdfc <__assert_fail@plt+0xa6d8>
   1be34:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1be38:	ldrsh	r0, [r1]
   1be3c:	cmn	r0, #1
   1be40:	bgt	1be5c <__assert_fail@plt+0xa738>
   1be44:	ldrb	r0, [r8, r2]
   1be48:	ubfx	r7, r0, #5, #3
   1be4c:	and	r0, r0, #31
   1be50:	ldr	r6, [r4, r7, lsl #2]
   1be54:	orr	r0, r6, r3, lsl r0
   1be58:	str	r0, [r4, r7, lsl #2]
   1be5c:	add	r2, r2, #1
   1be60:	add	r1, r1, #2
   1be64:	mov	r0, #0
   1be68:	cmp	r2, #256	; 0x100
   1be6c:	bne	1be38 <__assert_fail@plt+0xa714>
   1be70:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1be74:	mov	r2, #0
   1be78:	mov	r3, #1
   1be7c:	ldrb	r0, [r1, #1]
   1be80:	tst	r0, #2
   1be84:	beq	1bea0 <__assert_fail@plt+0xa77c>
   1be88:	ldrb	r0, [r8, r2]
   1be8c:	ubfx	r7, r0, #5, #3
   1be90:	and	r0, r0, #31
   1be94:	ldr	r6, [r4, r7, lsl #2]
   1be98:	orr	r0, r6, r3, lsl r0
   1be9c:	str	r0, [r4, r7, lsl #2]
   1bea0:	add	r2, r2, #1
   1bea4:	add	r1, r1, #2
   1bea8:	mov	r0, #0
   1beac:	cmp	r2, #256	; 0x100
   1beb0:	bne	1be7c <__assert_fail@plt+0xa758>
   1beb4:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1beb8:	ldrb	r0, [r1]
   1bebc:	tst	r0, #4
   1bec0:	beq	1bedc <__assert_fail@plt+0xa7b8>
   1bec4:	ldrb	r0, [r8, r2]
   1bec8:	ubfx	r7, r0, #5, #3
   1becc:	and	r0, r0, #31
   1bed0:	ldr	r6, [r4, r7, lsl #2]
   1bed4:	orr	r0, r6, r3, lsl r0
   1bed8:	str	r0, [r4, r7, lsl #2]
   1bedc:	add	r2, r2, #1
   1bee0:	add	r1, r1, #2
   1bee4:	mov	r0, #0
   1bee8:	cmp	r2, #256	; 0x100
   1beec:	bne	1beb8 <__assert_fail@plt+0xa794>
   1bef0:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bef4:	mov	r2, #0
   1bef8:	mov	r3, #1
   1befc:	ldrb	r0, [r1, #1]
   1bf00:	tst	r0, #32
   1bf04:	beq	1bf20 <__assert_fail@plt+0xa7fc>
   1bf08:	ldrb	r0, [r8, r2]
   1bf0c:	ubfx	r7, r0, #5, #3
   1bf10:	and	r0, r0, #31
   1bf14:	ldr	r6, [r4, r7, lsl #2]
   1bf18:	orr	r0, r6, r3, lsl r0
   1bf1c:	str	r0, [r4, r7, lsl #2]
   1bf20:	add	r2, r2, #1
   1bf24:	add	r1, r1, #2
   1bf28:	mov	r0, #0
   1bf2c:	cmp	r2, #256	; 0x100
   1bf30:	bne	1befc <__assert_fail@plt+0xa7d8>
   1bf34:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bf38:	ldrb	r0, [r1, #1]
   1bf3c:	tst	r0, #16
   1bf40:	beq	1bf5c <__assert_fail@plt+0xa838>
   1bf44:	ldrb	r0, [r8, r2]
   1bf48:	ubfx	r7, r0, #5, #3
   1bf4c:	and	r0, r0, #31
   1bf50:	ldr	r6, [r4, r7, lsl #2]
   1bf54:	orr	r0, r6, r3, lsl r0
   1bf58:	str	r0, [r4, r7, lsl #2]
   1bf5c:	add	r2, r2, #1
   1bf60:	add	r1, r1, #2
   1bf64:	mov	r0, #0
   1bf68:	cmp	r2, #256	; 0x100
   1bf6c:	bne	1bf38 <__assert_fail@plt+0xa814>
   1bf70:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bf74:	mov	r2, #0
   1bf78:	mov	r3, #1
   1bf7c:	ldrb	r0, [r1, #1]
   1bf80:	tst	r0, #4
   1bf84:	beq	1bfa0 <__assert_fail@plt+0xa87c>
   1bf88:	ldrb	r0, [r8, r2]
   1bf8c:	ubfx	r7, r0, #5, #3
   1bf90:	and	r0, r0, #31
   1bf94:	ldr	r6, [r4, r7, lsl #2]
   1bf98:	orr	r0, r6, r3, lsl r0
   1bf9c:	str	r0, [r4, r7, lsl #2]
   1bfa0:	add	r2, r2, #1
   1bfa4:	add	r1, r1, #2
   1bfa8:	mov	r0, #0
   1bfac:	cmp	r2, #256	; 0x100
   1bfb0:	bne	1bf7c <__assert_fail@plt+0xa858>
   1bfb4:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bfb8:	mov	r2, #0
   1bfbc:	mov	r3, #1
   1bfc0:	ldrb	r0, [r1, #1]
   1bfc4:	tst	r0, #8
   1bfc8:	beq	1bfe4 <__assert_fail@plt+0xa8c0>
   1bfcc:	ldrb	r0, [r8, r2]
   1bfd0:	ubfx	r7, r0, #5, #3
   1bfd4:	and	r0, r0, #31
   1bfd8:	ldr	r6, [r4, r7, lsl #2]
   1bfdc:	orr	r0, r6, r3, lsl r0
   1bfe0:	str	r0, [r4, r7, lsl #2]
   1bfe4:	add	r2, r2, #1
   1bfe8:	add	r1, r1, #2
   1bfec:	mov	r0, #0
   1bff0:	cmp	r2, #256	; 0x100
   1bff4:	bne	1bfc0 <__assert_fail@plt+0xa89c>
   1bff8:	b	1bcd0 <__assert_fail@plt+0xa5ac>
   1bffc:	mov	r0, #12
   1c000:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c004:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c008:	add	fp, sp, #24
   1c00c:	mov	r5, r1
   1c010:	mov	r4, r2
   1c014:	mov	r6, r0
   1c018:	mvn	r1, #0
   1c01c:	movw	r8, #32816	; 0x8030
   1c020:	mov	r7, r1
   1c024:	mov	r0, r5
   1c028:	mov	r1, r6
   1c02c:	mov	r2, r4
   1c030:	bl	19254 <__assert_fail@plt+0x7b30>
   1c034:	ldr	r1, [r6, #40]	; 0x28
   1c038:	add	r0, r1, r0
   1c03c:	str	r0, [r6, #40]	; 0x28
   1c040:	ldrb	r2, [r5, #4]
   1c044:	cmp	r2, #24
   1c048:	beq	1c0a8 <__assert_fail@plt+0xa984>
   1c04c:	cmp	r2, #2
   1c050:	beq	1c0a4 <__assert_fail@plt+0xa980>
   1c054:	ldrb	r0, [r5]
   1c058:	cmp	r0, #44	; 0x2c
   1c05c:	beq	1c0a8 <__assert_fail@plt+0xa984>
   1c060:	mvn	r1, #1
   1c064:	cmp	r0, #48	; 0x30
   1c068:	bcc	1c020 <__assert_fail@plt+0xa8fc>
   1c06c:	cmp	r2, #1
   1c070:	bne	1c020 <__assert_fail@plt+0xa8fc>
   1c074:	cmn	r7, #2
   1c078:	beq	1c020 <__assert_fail@plt+0xa8fc>
   1c07c:	cmp	r0, #57	; 0x39
   1c080:	bhi	1c020 <__assert_fail@plt+0xa8fc>
   1c084:	cmn	r7, #1
   1c088:	beq	1c09c <__assert_fail@plt+0xa978>
   1c08c:	add	r1, r7, r7, lsl #2
   1c090:	add	r0, r0, r1, lsl #1
   1c094:	cmp	r0, r8
   1c098:	movge	r0, r8
   1c09c:	sub	r1, r0, #48	; 0x30
   1c0a0:	b	1c020 <__assert_fail@plt+0xa8fc>
   1c0a4:	mvn	r7, #1
   1c0a8:	mov	r0, r7
   1c0ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c0b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c0b4:	add	fp, sp, #24
   1c0b8:	sub	sp, sp, #8
   1c0bc:	mov	r3, r0
   1c0c0:	mov	r5, r0
   1c0c4:	mov	r8, r1
   1c0c8:	mov	r0, r1
   1c0cc:	mov	r1, #0
   1c0d0:	mov	r2, #0
   1c0d4:	mov	r7, #0
   1c0d8:	ldr	r4, [r3], #20
   1c0dc:	bl	1b074 <__assert_fail@plt+0x9950>
   1c0e0:	cmp	r0, #0
   1c0e4:	str	r0, [sp, #4]
   1c0e8:	beq	1c184 <__assert_fail@plt+0xaa60>
   1c0ec:	mov	r9, r0
   1c0f0:	add	r6, sp, #4
   1c0f4:	mov	r7, #0
   1c0f8:	str	r4, [r0]
   1c0fc:	ldr	r0, [r6]
   1c100:	ldr	r1, [r0, #24]
   1c104:	orr	r1, r1, #262144	; 0x40000
   1c108:	str	r1, [r0, #24]
   1c10c:	ldr	r0, [r5, #4]
   1c110:	ldr	r4, [r6]
   1c114:	cmp	r0, #0
   1c118:	beq	1c128 <__assert_fail@plt+0xaa04>
   1c11c:	add	r6, r4, #4
   1c120:	mov	r5, r0
   1c124:	b	1c15c <__assert_fail@plt+0xaa38>
   1c128:	mov	r1, #0
   1c12c:	mov	r0, r5
   1c130:	ldr	r5, [r5, #8]
   1c134:	cmp	r5, r1
   1c138:	cmpne	r5, #0
   1c13c:	bne	1c158 <__assert_fail@plt+0xaa34>
   1c140:	ldr	r5, [r0]
   1c144:	ldr	r4, [r4]
   1c148:	mov	r1, r0
   1c14c:	cmp	r5, #0
   1c150:	bne	1c12c <__assert_fail@plt+0xaa08>
   1c154:	b	1c180 <__assert_fail@plt+0xaa5c>
   1c158:	add	r6, r4, #8
   1c15c:	add	r3, r5, #20
   1c160:	mov	r0, r8
   1c164:	mov	r1, #0
   1c168:	mov	r2, #0
   1c16c:	bl	1b074 <__assert_fail@plt+0x9950>
   1c170:	cmp	r0, #0
   1c174:	str	r0, [r6]
   1c178:	bne	1c0f8 <__assert_fail@plt+0xa9d4>
   1c17c:	b	1c184 <__assert_fail@plt+0xaa60>
   1c180:	mov	r7, r9
   1c184:	mov	r0, r7
   1c188:	sub	sp, fp, #24
   1c18c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c190:	push	{r4, r5, r6, r7, fp, lr}
   1c194:	add	fp, sp, #16
   1c198:	mov	r6, r0
   1c19c:	mov	r5, r1
   1c1a0:	mov	r0, r2
   1c1a4:	mov	r4, r2
   1c1a8:	mov	r1, r6
   1c1ac:	blx	r5
   1c1b0:	cmp	r0, #0
   1c1b4:	bne	1c208 <__assert_fail@plt+0xaae4>
   1c1b8:	ldr	r7, [r6, #4]
   1c1bc:	cmp	r7, #0
   1c1c0:	bne	1c1f0 <__assert_fail@plt+0xaacc>
   1c1c4:	mov	r1, #0
   1c1c8:	ldr	r7, [r6, #8]
   1c1cc:	mov	r0, r6
   1c1d0:	cmp	r7, r1
   1c1d4:	cmpne	r7, #0
   1c1d8:	bne	1c1f0 <__assert_fail@plt+0xaacc>
   1c1dc:	ldr	r6, [r0]
   1c1e0:	mov	r1, r0
   1c1e4:	cmp	r6, #0
   1c1e8:	bne	1c1c8 <__assert_fail@plt+0xaaa4>
   1c1ec:	b	1c20c <__assert_fail@plt+0xaae8>
   1c1f0:	mov	r0, r4
   1c1f4:	mov	r1, r7
   1c1f8:	blx	r5
   1c1fc:	cmp	r0, #0
   1c200:	mov	r6, r7
   1c204:	beq	1c1b8 <__assert_fail@plt+0xaa94>
   1c208:	pop	{r4, r5, r6, r7, fp, pc}
   1c20c:	mov	r0, #0
   1c210:	pop	{r4, r5, r6, r7, fp, pc}
   1c214:	ldrb	r2, [r1, #24]
   1c218:	cmp	r2, #17
   1c21c:	beq	1c250 <__assert_fail@plt+0xab2c>
   1c220:	cmp	r2, #4
   1c224:	bne	1c2a4 <__assert_fail@plt+0xab80>
   1c228:	ldr	r2, [r0, #132]	; 0x84
   1c22c:	cmp	r2, #0
   1c230:	beq	1c2a4 <__assert_fail@plt+0xab80>
   1c234:	ldr	r3, [r1, #20]
   1c238:	ldr	r2, [r2, r3, lsl #2]
   1c23c:	mov	r3, #1
   1c240:	str	r2, [r1, #20]
   1c244:	ldr	r1, [r0, #80]	; 0x50
   1c248:	orr	r1, r1, r3, lsl r2
   1c24c:	b	1c2a0 <__assert_fail@plt+0xab7c>
   1c250:	ldr	r2, [r1, #4]
   1c254:	cmp	r2, #0
   1c258:	beq	1c2a4 <__assert_fail@plt+0xab80>
   1c25c:	ldrb	r3, [r2, #24]
   1c260:	cmp	r3, #17
   1c264:	bne	1c2a4 <__assert_fail@plt+0xab80>
   1c268:	ldr	r3, [r2, #4]
   1c26c:	ldr	r2, [r2, #20]
   1c270:	cmp	r3, #0
   1c274:	str	r3, [r1, #4]
   1c278:	strne	r1, [r3]
   1c27c:	cmp	r2, #31
   1c280:	ldr	r1, [r1, #20]
   1c284:	ldr	r3, [r0, #132]	; 0x84
   1c288:	ldr	r1, [r3, r1, lsl #2]
   1c28c:	str	r1, [r3, r2, lsl #2]
   1c290:	bgt	1c2a4 <__assert_fail@plt+0xab80>
   1c294:	ldr	r1, [r0, #80]	; 0x50
   1c298:	mov	r3, #1
   1c29c:	bic	r1, r1, r3, lsl r2
   1c2a0:	str	r1, [r0, #80]	; 0x50
   1c2a4:	mov	r0, #0
   1c2a8:	bx	lr
   1c2ac:	push	{r4, r5, fp, lr}
   1c2b0:	add	fp, sp, #8
   1c2b4:	sub	sp, sp, #8
   1c2b8:	mov	r5, r0
   1c2bc:	mov	r0, #0
   1c2c0:	mov	r4, r1
   1c2c4:	str	r0, [sp, #4]
   1c2c8:	ldr	r2, [r1, #4]
   1c2cc:	cmp	r2, #0
   1c2d0:	beq	1c2f8 <__assert_fail@plt+0xabd4>
   1c2d4:	ldrb	r0, [r2, #24]
   1c2d8:	cmp	r0, #17
   1c2dc:	bne	1c2f8 <__assert_fail@plt+0xabd4>
   1c2e0:	add	r0, sp, #4
   1c2e4:	mov	r1, r5
   1c2e8:	bl	1c5b0 <__assert_fail@plt+0xae8c>
   1c2ec:	cmp	r0, #0
   1c2f0:	str	r0, [r4, #4]
   1c2f4:	strne	r4, [r0]
   1c2f8:	ldr	r2, [r4, #8]
   1c2fc:	cmp	r2, #0
   1c300:	beq	1c328 <__assert_fail@plt+0xac04>
   1c304:	ldrb	r0, [r2, #24]
   1c308:	cmp	r0, #17
   1c30c:	bne	1c328 <__assert_fail@plt+0xac04>
   1c310:	add	r0, sp, #4
   1c314:	mov	r1, r5
   1c318:	bl	1c5b0 <__assert_fail@plt+0xae8c>
   1c31c:	cmp	r0, #0
   1c320:	str	r0, [r4, #8]
   1c324:	strne	r4, [r0]
   1c328:	ldr	r0, [sp, #4]
   1c32c:	sub	sp, fp, #8
   1c330:	pop	{r4, r5, fp, pc}
   1c334:	push	{r4, r5, fp, lr}
   1c338:	add	fp, sp, #8
   1c33c:	ldr	r2, [r1, #24]
   1c340:	mov	r5, r0
   1c344:	mov	r4, r1
   1c348:	uxtb	r0, r2
   1c34c:	cmp	r0, #16
   1c350:	bne	1c370 <__assert_fail@plt+0xac4c>
   1c354:	ldr	r0, [r4, #4]
   1c358:	ldr	r1, [r0, #12]
   1c35c:	str	r1, [r4, #12]
   1c360:	ldr	r0, [r0, #28]
   1c364:	str	r0, [r4, #28]
   1c368:	mov	r0, #0
   1c36c:	pop	{r4, r5, fp, pc}
   1c370:	str	r4, [r4, #12]
   1c374:	mov	r0, r5
   1c378:	ldr	r1, [r4, #20]
   1c37c:	bl	1c704 <__assert_fail@plt+0xafe0>
   1c380:	cmn	r0, #1
   1c384:	str	r0, [r4, #28]
   1c388:	beq	1c3bc <__assert_fail@plt+0xac98>
   1c38c:	ldrb	r2, [r4, #24]
   1c390:	mov	r1, r0
   1c394:	mov	r0, #0
   1c398:	cmp	r2, #12
   1c39c:	popne	{r4, r5, fp, pc}
   1c3a0:	ldr	r2, [r5]
   1c3a4:	ldr	r3, [r4, #20]
   1c3a8:	add	r1, r2, r1, lsl #3
   1c3ac:	ldr	r2, [r1, #4]
   1c3b0:	bfi	r2, r3, #8, #10
   1c3b4:	str	r2, [r1, #4]
   1c3b8:	pop	{r4, r5, fp, pc}
   1c3bc:	mov	r0, #12
   1c3c0:	pop	{r4, r5, fp, pc}
   1c3c4:	ldrb	r0, [r1, #24]
   1c3c8:	cmp	r0, #16
   1c3cc:	beq	1c3e0 <__assert_fail@plt+0xacbc>
   1c3d0:	cmp	r0, #11
   1c3d4:	bne	1c3f8 <__assert_fail@plt+0xacd4>
   1c3d8:	ldr	r0, [r1, #4]
   1c3dc:	b	1c418 <__assert_fail@plt+0xacf4>
   1c3e0:	ldmib	r1, {r0, r2}
   1c3e4:	ldr	r3, [r2, #12]
   1c3e8:	str	r3, [r0, #16]
   1c3ec:	ldr	r0, [r1, #16]
   1c3f0:	str	r0, [r2, #16]
   1c3f4:	b	1c41c <__assert_fail@plt+0xacf8>
   1c3f8:	ldr	r0, [r1, #4]
   1c3fc:	cmp	r0, #0
   1c400:	ldrne	r2, [r1, #16]
   1c404:	strne	r2, [r0, #16]
   1c408:	ldr	r0, [r1, #8]
   1c40c:	cmp	r0, #0
   1c410:	beq	1c41c <__assert_fail@plt+0xacf8>
   1c414:	ldr	r1, [r1, #16]
   1c418:	str	r1, [r0, #16]
   1c41c:	mov	r0, #0
   1c420:	bx	lr
   1c424:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c428:	add	fp, sp, #24
   1c42c:	ldr	r3, [r1, #24]
   1c430:	mvn	r7, #1
   1c434:	ldr	r2, [r1, #28]
   1c438:	mov	r4, #0
   1c43c:	uxtab	r3, r7, r3
   1c440:	cmp	r3, #14
   1c444:	bhi	1c54c <__assert_fail@plt+0xae28>
   1c448:	add	r7, pc, #0
   1c44c:	ldr	pc, [r7, r3, lsl #2]
   1c450:	muleq	r1, r4, r5
   1c454:	andeq	ip, r1, ip, asr #10
   1c458:	andeq	ip, r1, r0, ror #10
   1c45c:	andeq	ip, r1, ip, asr #10
   1c460:	andeq	ip, r1, ip, asr #10
   1c464:	andeq	ip, r1, ip, asr #10
   1c468:	andeq	ip, r1, ip, lsl #9
   1c46c:	andeq	ip, r1, ip, lsl #9
   1c470:	andeq	ip, r1, r8, asr #9
   1c474:	andeq	ip, r1, r8, asr #9
   1c478:	andeq	ip, r1, ip, lsl #9
   1c47c:	andeq	ip, r1, ip, asr #10
   1c480:	andeq	ip, r1, ip, asr #10
   1c484:	andeq	ip, r1, ip, asr #10
   1c488:	muleq	r1, r4, r5
   1c48c:	ldr	r1, [r1, #16]
   1c490:	ldr	r5, [r1, #28]
   1c494:	ldr	r6, [r0, #20]
   1c498:	add	r0, r2, r2, lsl #1
   1c49c:	mov	r1, #1
   1c4a0:	str	r1, [r6, r0, lsl #2]!
   1c4a4:	mov	r0, #4
   1c4a8:	mov	r7, r6
   1c4ac:	str	r1, [r7, #4]!
   1c4b0:	bl	22898 <__assert_fail@plt+0x11174>
   1c4b4:	cmp	r0, #0
   1c4b8:	str	r0, [r6, #8]
   1c4bc:	beq	1c59c <__assert_fail@plt+0xae78>
   1c4c0:	str	r5, [r0]
   1c4c4:	b	1c594 <__assert_fail@plt+0xae70>
   1c4c8:	ldrb	r3, [r0, #88]	; 0x58
   1c4cc:	add	r6, r1, #16
   1c4d0:	add	r5, r2, r2, lsl #1
   1c4d4:	orr	r3, r3, #1
   1c4d8:	strb	r3, [r0, #88]	; 0x58
   1c4dc:	mov	r3, r6
   1c4e0:	ldr	r7, [r1, #4]
   1c4e4:	ldr	r1, [r1, #8]
   1c4e8:	cmp	r1, #0
   1c4ec:	addne	r3, r1, #12
   1c4f0:	cmp	r7, #0
   1c4f4:	ldr	r1, [r3]
   1c4f8:	addne	r6, r7, #12
   1c4fc:	ldr	r8, [r1, #28]
   1c500:	ldr	r1, [r6]
   1c504:	ldr	r6, [r0, #20]
   1c508:	mov	r0, #2
   1c50c:	ldr	r9, [r1, #28]
   1c510:	mov	r7, r6
   1c514:	str	r0, [r7, r5, lsl #2]!
   1c518:	mov	r0, #8
   1c51c:	bl	22898 <__assert_fail@plt+0x11174>
   1c520:	cmp	r0, #0
   1c524:	str	r0, [r7, #8]
   1c528:	beq	1c5a8 <__assert_fail@plt+0xae84>
   1c52c:	add	r1, r6, r5, lsl #2
   1c530:	cmp	r9, r8
   1c534:	add	r1, r1, #4
   1c538:	bne	1c580 <__assert_fail@plt+0xae5c>
   1c53c:	mov	r2, #1
   1c540:	str	r2, [r1]
   1c544:	str	r9, [r0]
   1c548:	b	1c594 <__assert_fail@plt+0xae70>
   1c54c:	ldr	r1, [r1, #16]
   1c550:	ldr	r0, [r0, #12]
   1c554:	ldr	r1, [r1, #28]
   1c558:	str	r1, [r0, r2, lsl #2]
   1c55c:	b	1c594 <__assert_fail@plt+0xae70>
   1c560:	ldr	r7, [r1, #16]
   1c564:	ldr	r3, [r0, #12]
   1c568:	ldr	r5, [r7, #28]
   1c56c:	str	r5, [r3, r2, lsl #2]
   1c570:	ldrb	r1, [r1, #24]
   1c574:	cmp	r1, #4
   1c578:	beq	1c494 <__assert_fail@plt+0xad70>
   1c57c:	b	1c594 <__assert_fail@plt+0xae70>
   1c580:	mov	r2, #2
   1c584:	str	r2, [r1]
   1c588:	stmcs	r0, {r8, r9}
   1c58c:	strcc	r9, [r0]
   1c590:	strcc	r8, [r0, #4]
   1c594:	mov	r0, r4
   1c598:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c59c:	mov	r0, #0
   1c5a0:	str	r0, [r7]
   1c5a4:	str	r0, [r6]
   1c5a8:	mov	r4, #12
   1c5ac:	b	1c594 <__assert_fail@plt+0xae70>
   1c5b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5b4:	add	fp, sp, #28
   1c5b8:	sub	sp, sp, #12
   1c5bc:	ldr	r5, [r2, #4]
   1c5c0:	ldr	sl, [r1]
   1c5c4:	mov	r9, r2
   1c5c8:	cmp	r5, #0
   1c5cc:	ldrbne	r1, [r1, #28]
   1c5d0:	andsne	r1, r1, #16
   1c5d4:	bne	1c6dc <__assert_fail@plt+0xafb8>
   1c5d8:	str	r0, [sp]
   1c5dc:	mov	r0, #8
   1c5e0:	mov	r8, #0
   1c5e4:	add	r3, sp, #4
   1c5e8:	mov	r1, #0
   1c5ec:	mov	r2, #0
   1c5f0:	str	r0, [sp, #8]
   1c5f4:	mov	r0, sl
   1c5f8:	str	r8, [sp, #4]
   1c5fc:	bl	1b074 <__assert_fail@plt+0x9950>
   1c600:	mov	r7, r0
   1c604:	mov	r0, #9
   1c608:	add	r3, sp, #4
   1c60c:	mov	r1, #0
   1c610:	mov	r2, #0
   1c614:	str	r0, [sp, #8]
   1c618:	mov	r0, sl
   1c61c:	str	r8, [sp, #4]
   1c620:	bl	1b074 <__assert_fail@plt+0x9950>
   1c624:	mov	r4, r0
   1c628:	cmp	r5, #0
   1c62c:	mov	r6, r0
   1c630:	beq	1c658 <__assert_fail@plt+0xaf34>
   1c634:	mov	r0, #16
   1c638:	add	r3, sp, #4
   1c63c:	mov	r1, r5
   1c640:	mov	r2, r4
   1c644:	str	r0, [sp, #8]
   1c648:	mov	r0, sl
   1c64c:	str	r8, [sp, #4]
   1c650:	bl	1b074 <__assert_fail@plt+0x9950>
   1c654:	mov	r6, r0
   1c658:	mov	r0, #16
   1c65c:	add	r3, sp, #4
   1c660:	mov	r1, r7
   1c664:	mov	r2, r6
   1c668:	str	r0, [sp, #8]
   1c66c:	mov	r0, sl
   1c670:	str	r8, [sp, #4]
   1c674:	bl	1b074 <__assert_fail@plt+0x9950>
   1c678:	cmp	r4, #0
   1c67c:	beq	1c68c <__assert_fail@plt+0xaf68>
   1c680:	cmp	r7, #0
   1c684:	cmpne	r6, #0
   1c688:	bne	1c6a0 <__assert_fail@plt+0xaf7c>
   1c68c:	ldr	r1, [sp]
   1c690:	mov	r0, #12
   1c694:	mov	r5, #0
   1c698:	str	r0, [r1]
   1c69c:	b	1c6f8 <__assert_fail@plt+0xafd4>
   1c6a0:	mov	r5, r0
   1c6a4:	cmp	r0, #0
   1c6a8:	beq	1c68c <__assert_fail@plt+0xaf68>
   1c6ac:	ldr	r0, [r9, #20]
   1c6b0:	str	r0, [r4, #20]
   1c6b4:	str	r0, [r7, #20]
   1c6b8:	ldr	r1, [r9, #24]
   1c6bc:	ldr	r0, [r4, #24]
   1c6c0:	lsr	r1, r1, #19
   1c6c4:	bfi	r0, r1, #19, #1
   1c6c8:	str	r0, [r4, #24]
   1c6cc:	ldr	r0, [r7, #24]
   1c6d0:	bfi	r0, r1, #19, #1
   1c6d4:	str	r0, [r7, #24]
   1c6d8:	b	1c6f8 <__assert_fail@plt+0xafd4>
   1c6dc:	ldr	r3, [r9, #20]
   1c6e0:	cmp	r3, #31
   1c6e4:	bgt	1c6f8 <__assert_fail@plt+0xafd4>
   1c6e8:	ldr	r1, [sl, #80]	; 0x50
   1c6ec:	mov	r2, #1
   1c6f0:	tst	r1, r2, lsl r3
   1c6f4:	bne	1c5d8 <__assert_fail@plt+0xaeb4>
   1c6f8:	mov	r0, r5
   1c6fc:	sub	sp, fp, #28
   1c700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c708:	add	fp, sp, #28
   1c70c:	sub	sp, sp, #12
   1c710:	mov	r4, r0
   1c714:	ldr	r7, [r0, #4]
   1c718:	ldr	r0, [r0, #8]
   1c71c:	mov	r5, r2
   1c720:	mov	r9, r1
   1c724:	cmp	r0, r7
   1c728:	bcs	1c7f4 <__assert_fail@plt+0xb0d0>
   1c72c:	ldr	r1, [r4]
   1c730:	str	r9, [r1, r0, lsl #3]!
   1c734:	str	r5, [r1, #4]
   1c738:	ldr	r0, [r4]
   1c73c:	ldr	r1, [r4, #8]
   1c740:	add	r0, r0, r1, lsl #3
   1c744:	ldr	r1, [r0, #4]
   1c748:	bfc	r1, #8, #10
   1c74c:	str	r1, [r0, #4]
   1c750:	uxtb	r1, r5
   1c754:	cmp	r1, #5
   1c758:	bne	1c76c <__assert_fail@plt+0xb048>
   1c75c:	ldr	r2, [r4, #92]	; 0x5c
   1c760:	mov	r0, #1048576	; 0x100000
   1c764:	cmp	r2, #1
   1c768:	bgt	1c77c <__assert_fail@plt+0xb058>
   1c76c:	sub	r0, r1, #6
   1c770:	clz	r0, r0
   1c774:	lsr	r0, r0, #5
   1c778:	lsl	r0, r0, #20
   1c77c:	ldr	r1, [r4]
   1c780:	ldr	r2, [r4, #8]
   1c784:	add	r1, r1, r2, lsl #3
   1c788:	ldr	r2, [r1, #4]
   1c78c:	bic	r2, r2, #1048576	; 0x100000
   1c790:	orr	r0, r2, r0
   1c794:	mvn	r2, #0
   1c798:	str	r0, [r1, #4]
   1c79c:	ldr	r0, [r4, #8]
   1c7a0:	ldr	r1, [r4, #12]
   1c7a4:	str	r2, [r1, r0, lsl #2]
   1c7a8:	mov	r2, #0
   1c7ac:	ldr	r0, [r4, #8]
   1c7b0:	ldr	r1, [r4, #20]
   1c7b4:	add	r0, r0, r0, lsl #1
   1c7b8:	str	r2, [r1, r0, lsl #2]!
   1c7bc:	str	r2, [r1, #4]
   1c7c0:	str	r2, [r1, #8]
   1c7c4:	ldr	r0, [r4, #8]
   1c7c8:	ldr	r1, [r4, #24]
   1c7cc:	add	r0, r0, r0, lsl #1
   1c7d0:	str	r2, [r1, r0, lsl #2]!
   1c7d4:	str	r2, [r1, #4]
   1c7d8:	str	r2, [r1, #8]
   1c7dc:	ldr	r6, [r4, #8]
   1c7e0:	add	r0, r6, #1
   1c7e4:	str	r0, [r4, #8]
   1c7e8:	mov	r0, r6
   1c7ec:	sub	sp, fp, #28
   1c7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7f4:	movw	r0, #21845	; 0x5555
   1c7f8:	lsl	r1, r7, #1
   1c7fc:	mvn	r6, #0
   1c800:	movt	r0, #5461	; 0x1555
   1c804:	cmp	r1, r0
   1c808:	bhi	1c7e8 <__assert_fail@plt+0xb0c4>
   1c80c:	ldr	r0, [r4]
   1c810:	str	r1, [sp, #8]
   1c814:	lsl	r1, r7, #4
   1c818:	bl	228c8 <__assert_fail@plt+0x111a4>
   1c81c:	cmp	r0, #0
   1c820:	beq	1c7e8 <__assert_fail@plt+0xb0c4>
   1c824:	str	r0, [r4]
   1c828:	lsl	r8, r7, #3
   1c82c:	ldr	r0, [r4, #12]
   1c830:	mov	r1, r8
   1c834:	bl	228c8 <__assert_fail@plt+0x111a4>
   1c838:	str	r0, [sp, #4]
   1c83c:	ldr	r0, [r4, #16]
   1c840:	mov	r1, r8
   1c844:	bl	228c8 <__assert_fail@plt+0x111a4>
   1c848:	mov	r2, r0
   1c84c:	add	r1, r7, r7, lsl #1
   1c850:	ldr	r0, [r4, #20]
   1c854:	mov	r7, r2
   1c858:	lsl	r8, r1, #3
   1c85c:	mov	r1, r8
   1c860:	bl	228c8 <__assert_fail@plt+0x111a4>
   1c864:	mov	sl, r0
   1c868:	ldr	r0, [r4, #24]
   1c86c:	mov	r1, r8
   1c870:	bl	228c8 <__assert_fail@plt+0x111a4>
   1c874:	mov	r8, r0
   1c878:	ldr	r0, [sp, #4]
   1c87c:	cmp	r0, #0
   1c880:	beq	1c890 <__assert_fail@plt+0xb16c>
   1c884:	cmp	r7, #0
   1c888:	cmpne	sl, #0
   1c88c:	bne	1c8b0 <__assert_fail@plt+0xb18c>
   1c890:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1c894:	mov	r0, r7
   1c898:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1c89c:	mov	r0, sl
   1c8a0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1c8a4:	mov	r0, r8
   1c8a8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1c8ac:	b	1c7e8 <__assert_fail@plt+0xb0c4>
   1c8b0:	cmp	r8, #0
   1c8b4:	beq	1c890 <__assert_fail@plt+0xb16c>
   1c8b8:	add	r1, r4, #12
   1c8bc:	stm	r1, {r0, r7, sl}
   1c8c0:	str	r8, [r4, #24]
   1c8c4:	ldr	r0, [sp, #8]
   1c8c8:	str	r0, [r4, #4]
   1c8cc:	ldr	r0, [r4, #8]
   1c8d0:	b	1c72c <__assert_fail@plt+0xb008>
   1c8d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8d8:	add	fp, sp, #28
   1c8dc:	sub	sp, sp, #44	; 0x2c
   1c8e0:	mov	r8, r0
   1c8e4:	ldr	r0, [r1, #20]
   1c8e8:	add	r4, r2, r2, lsl #1
   1c8ec:	mov	r5, r1
   1c8f0:	mov	r1, #0
   1c8f4:	mov	r9, r3
   1c8f8:	mov	r6, r2
   1c8fc:	add	r0, r0, r4, lsl #2
   1c900:	ldr	r0, [r0, #4]
   1c904:	str	r1, [sp, #36]	; 0x24
   1c908:	add	r0, r0, #1
   1c90c:	str	r0, [sp, #32]
   1c910:	lsl	r0, r0, #2
   1c914:	bl	22898 <__assert_fail@plt+0x11174>
   1c918:	cmp	r0, #0
   1c91c:	str	r0, [sp, #40]	; 0x28
   1c920:	beq	1cae8 <__assert_fail@plt+0xb3c4>
   1c924:	mov	r1, #1
   1c928:	str	r6, [r0]
   1c92c:	str	r1, [sp, #36]	; 0x24
   1c930:	mvn	r1, #0
   1c934:	ldr	r0, [r5, #24]
   1c938:	add	r0, r0, r4, lsl #2
   1c93c:	str	r1, [r0, #4]
   1c940:	ldr	r2, [r5]
   1c944:	add	r0, r2, r6, lsl #3
   1c948:	ldr	r0, [r0, #4]
   1c94c:	ubfx	r1, r0, #8, #10
   1c950:	cmp	r1, #0
   1c954:	beq	1c9b0 <__assert_fail@plt+0xb28c>
   1c958:	ldr	r3, [r5, #20]
   1c95c:	add	r3, r3, r4, lsl #2
   1c960:	ldr	r7, [r3, #4]
   1c964:	cmp	r7, #0
   1c968:	beq	1c9b0 <__assert_fail@plt+0xb28c>
   1c96c:	ldr	r3, [r3, #8]
   1c970:	ldr	r3, [r3]
   1c974:	add	r2, r2, r3, lsl #3
   1c978:	ldrb	r2, [r2, #6]
   1c97c:	tst	r2, #4
   1c980:	bne	1c9b0 <__assert_fail@plt+0xb28c>
   1c984:	str	r1, [sp]
   1c988:	mov	r0, r5
   1c98c:	mov	r1, r6
   1c990:	mov	r2, r6
   1c994:	mov	r3, r6
   1c998:	bl	1caf0 <__assert_fail@plt+0xb3cc>
   1c99c:	cmp	r0, #0
   1c9a0:	bne	1cae0 <__assert_fail@plt+0xb3bc>
   1c9a4:	ldr	r0, [r5]
   1c9a8:	add	r0, r0, r6, lsl #3
   1c9ac:	ldr	r0, [r0, #4]
   1c9b0:	tst	r0, #8
   1c9b4:	beq	1cab4 <__assert_fail@plt+0xb390>
   1c9b8:	ldr	r0, [r5, #20]
   1c9bc:	add	r1, r0, r4, lsl #2
   1c9c0:	ldr	r1, [r1, #4]
   1c9c4:	cmp	r1, #1
   1c9c8:	blt	1cab4 <__assert_fail@plt+0xb390>
   1c9cc:	str	r8, [sp, #12]
   1c9d0:	mov	r8, #0
   1c9d4:	add	r7, sp, #16
   1c9d8:	add	sl, sp, #32
   1c9dc:	mov	r6, #0
   1c9e0:	str	r9, [sp, #8]
   1c9e4:	add	r0, r0, r4, lsl #2
   1c9e8:	ldr	r0, [r0, #8]
   1c9ec:	ldr	r2, [r0, r6, lsl #2]
   1c9f0:	ldr	r0, [r5, #24]
   1c9f4:	add	r9, r2, r2, lsl #1
   1c9f8:	add	r0, r0, r9, lsl #2
   1c9fc:	ldr	r1, [r0, #4]
   1ca00:	cmn	r1, #1
   1ca04:	beq	1ca6c <__assert_fail@plt+0xb348>
   1ca08:	cmp	r1, #0
   1ca0c:	bne	1ca2c <__assert_fail@plt+0xb308>
   1ca10:	mov	r0, r7
   1ca14:	mov	r1, r5
   1ca18:	mov	r3, #0
   1ca1c:	bl	1c8d4 <__assert_fail@plt+0xb1b0>
   1ca20:	cmp	r0, #0
   1ca24:	beq	1ca3c <__assert_fail@plt+0xb318>
   1ca28:	b	1cae0 <__assert_fail@plt+0xb3bc>
   1ca2c:	vldr	d16, [r0]
   1ca30:	ldr	r0, [r0, #8]
   1ca34:	str	r0, [sp, #24]
   1ca38:	vstr	d16, [sp, #16]
   1ca3c:	mov	r0, sl
   1ca40:	mov	r1, r7
   1ca44:	bl	1cdb0 <__assert_fail@plt+0xb68c>
   1ca48:	cmp	r0, #0
   1ca4c:	bne	1cae0 <__assert_fail@plt+0xb3bc>
   1ca50:	ldr	r0, [r5, #24]
   1ca54:	add	r0, r0, r9, lsl #2
   1ca58:	ldr	r0, [r0, #4]
   1ca5c:	cmp	r0, #0
   1ca60:	bne	1ca70 <__assert_fail@plt+0xb34c>
   1ca64:	ldr	r0, [sp, #24]
   1ca68:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1ca6c:	mov	r8, #1
   1ca70:	ldr	r0, [r5, #20]
   1ca74:	add	r6, r6, #1
   1ca78:	add	r1, r0, r4, lsl #2
   1ca7c:	ldr	r1, [r1, #4]
   1ca80:	cmp	r6, r1
   1ca84:	blt	1c9e4 <__assert_fail@plt+0xb2c0>
   1ca88:	tst	r8, #1
   1ca8c:	ldr	r8, [sp, #12]
   1ca90:	ldr	r0, [sp, #8]
   1ca94:	beq	1cab4 <__assert_fail@plt+0xb390>
   1ca98:	cmp	r0, #0
   1ca9c:	bne	1cab4 <__assert_fail@plt+0xb390>
   1caa0:	ldr	r0, [r5, #24]
   1caa4:	mov	r1, #0
   1caa8:	add	r0, r0, r4, lsl #2
   1caac:	str	r1, [r0, #4]
   1cab0:	b	1cacc <__assert_fail@plt+0xb3a8>
   1cab4:	ldr	r0, [r5, #24]
   1cab8:	vldr	d16, [sp, #32]
   1cabc:	ldr	r1, [sp, #40]	; 0x28
   1cac0:	add	r0, r0, r4, lsl #2
   1cac4:	str	r1, [r0, #8]
   1cac8:	vstr	d16, [r0]
   1cacc:	ldr	r0, [sp, #40]	; 0x28
   1cad0:	vldr	d16, [sp, #32]
   1cad4:	str	r0, [r8, #8]
   1cad8:	mov	r0, #0
   1cadc:	vstr	d16, [r8]
   1cae0:	sub	sp, fp, #28
   1cae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cae8:	mov	r0, #12
   1caec:	b	1cae0 <__assert_fail@plt+0xb3bc>
   1caf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caf4:	add	fp, sp, #28
   1caf8:	sub	sp, sp, #20
   1cafc:	mov	sl, r0
   1cb00:	ldr	r0, [fp, #8]
   1cb04:	mov	r8, r2
   1cb08:	mov	r5, r1
   1cb0c:	str	r3, [sp, #8]
   1cb10:	str	r0, [sp, #16]
   1cb14:	ldr	r2, [sl]
   1cb18:	add	r1, r2, r5, lsl #3
   1cb1c:	ldrb	r0, [r1, #4]!
   1cb20:	cmp	r0, #4
   1cb24:	bne	1cb94 <__assert_fail@plt+0xb470>
   1cb28:	ldr	r0, [sl, #12]
   1cb2c:	ldr	r1, [sl, #20]
   1cb30:	add	r6, r8, r8, lsl #1
   1cb34:	ldr	r2, [sp, #16]
   1cb38:	ldr	r7, [r0, r5, lsl #2]
   1cb3c:	add	r0, r1, r6, lsl #2
   1cb40:	mov	r1, #0
   1cb44:	str	r1, [r0, #4]
   1cb48:	mov	r0, sl
   1cb4c:	mov	r1, r7
   1cb50:	bl	1cf34 <__assert_fail@plt+0xb810>
   1cb54:	mov	r9, #12
   1cb58:	cmn	r0, #1
   1cb5c:	beq	1cd7c <__assert_fail@plt+0xb658>
   1cb60:	mov	r4, r0
   1cb64:	ldr	r0, [sl, #12]
   1cb68:	ldr	r1, [r0, r5, lsl #2]
   1cb6c:	str	r1, [r0, r8, lsl #2]
   1cb70:	mov	r1, r4
   1cb74:	ldr	r0, [sl, #20]
   1cb78:	add	r0, r0, r6, lsl #2
   1cb7c:	bl	1cfbc <__assert_fail@plt+0xb898>
   1cb80:	cmp	r0, #0
   1cb84:	mov	r5, r7
   1cb88:	mov	r8, r4
   1cb8c:	bne	1cb14 <__assert_fail@plt+0xb3f0>
   1cb90:	b	1cd7c <__assert_fail@plt+0xb658>
   1cb94:	ldr	r0, [sl, #20]
   1cb98:	add	ip, r5, r5, lsl #1
   1cb9c:	add	r7, r0, ip, lsl #2
   1cba0:	ldr	r3, [r7, #4]
   1cba4:	cmp	r3, #0
   1cba8:	beq	1cd64 <__assert_fail@plt+0xb640>
   1cbac:	ldr	r7, [r7, #8]
   1cbb0:	add	r6, r8, r8, lsl #1
   1cbb4:	cmp	r3, #1
   1cbb8:	add	r0, r0, r6, lsl #2
   1cbbc:	str	r6, [sp, #12]
   1cbc0:	mov	r6, #0
   1cbc4:	ldr	r7, [r7]
   1cbc8:	str	r6, [r0, #4]
   1cbcc:	beq	1ccfc <__assert_fail@plt+0xb5d8>
   1cbd0:	ldr	r1, [sl, #8]
   1cbd4:	ldr	r4, [sp, #16]
   1cbd8:	sub	r3, r1, #1
   1cbdc:	cmp	r3, #1
   1cbe0:	blt	1cc30 <__assert_fail@plt+0xb50c>
   1cbe4:	add	r3, r2, r3, lsl #3
   1cbe8:	ldr	r6, [r3, #4]
   1cbec:	ands	r3, r6, #262144	; 0x40000
   1cbf0:	beq	1cc30 <__assert_fail@plt+0xb50c>
   1cbf4:	ldr	r3, [sl, #16]
   1cbf8:	sub	r2, r2, #12
   1cbfc:	sub	r3, r3, #4
   1cc00:	ldr	r5, [r3, r1, lsl #2]
   1cc04:	cmp	r5, r7
   1cc08:	ubfxeq	r6, r6, #8, #10
   1cc0c:	cmpeq	r6, r4
   1cc10:	beq	1cce0 <__assert_fail@plt+0xb5bc>
   1cc14:	sub	r6, r1, #2
   1cc18:	cmp	r6, #1
   1cc1c:	blt	1cc30 <__assert_fail@plt+0xb50c>
   1cc20:	ldr	r6, [r2, r1, lsl #3]
   1cc24:	sub	r1, r1, #1
   1cc28:	ands	r5, r6, #262144	; 0x40000
   1cc2c:	bne	1cc00 <__assert_fail@plt+0xb4dc>
   1cc30:	mov	r0, sl
   1cc34:	mov	r1, r7
   1cc38:	mov	r2, r4
   1cc3c:	mov	r8, ip
   1cc40:	bl	1cf34 <__assert_fail@plt+0xb810>
   1cc44:	mov	r9, #12
   1cc48:	cmn	r0, #1
   1cc4c:	beq	1cd7c <__assert_fail@plt+0xb658>
   1cc50:	mov	r5, r0
   1cc54:	ldr	r0, [sl, #20]
   1cc58:	ldr	r6, [sp, #12]
   1cc5c:	mov	r1, r5
   1cc60:	add	r0, r0, r6, lsl #2
   1cc64:	bl	1cfbc <__assert_fail@plt+0xb898>
   1cc68:	cmp	r0, #0
   1cc6c:	beq	1cd7c <__assert_fail@plt+0xb658>
   1cc70:	ldr	r4, [sp, #16]
   1cc74:	ldr	r3, [sp, #8]
   1cc78:	mov	r0, sl
   1cc7c:	mov	r1, r7
   1cc80:	mov	r2, r5
   1cc84:	str	r4, [sp]
   1cc88:	bl	1caf0 <__assert_fail@plt+0xb3cc>
   1cc8c:	cmp	r0, #0
   1cc90:	bne	1cd78 <__assert_fail@plt+0xb654>
   1cc94:	ldr	r0, [sl, #20]
   1cc98:	mov	r2, r4
   1cc9c:	add	r0, r0, r8, lsl #2
   1cca0:	ldr	r0, [r0, #8]
   1cca4:	ldr	r5, [r0, #4]
   1cca8:	mov	r0, sl
   1ccac:	mov	r1, r5
   1ccb0:	bl	1cf34 <__assert_fail@plt+0xb810>
   1ccb4:	mov	r9, #12
   1ccb8:	cmn	r0, #1
   1ccbc:	beq	1cd7c <__assert_fail@plt+0xb658>
   1ccc0:	mov	r8, r0
   1ccc4:	ldr	r0, [sl, #20]
   1ccc8:	mov	r1, r8
   1cccc:	add	r0, r0, r6, lsl #2
   1ccd0:	bl	1cfbc <__assert_fail@plt+0xb898>
   1ccd4:	cmp	r0, #0
   1ccd8:	bne	1cb14 <__assert_fail@plt+0xb3f0>
   1ccdc:	b	1cd7c <__assert_fail@plt+0xb658>
   1cce0:	sub	r1, r1, #1
   1cce4:	mov	r8, ip
   1cce8:	bl	1cfbc <__assert_fail@plt+0xb898>
   1ccec:	ldr	r6, [sp, #12]
   1ccf0:	cmp	r0, #0
   1ccf4:	bne	1cc94 <__assert_fail@plt+0xb570>
   1ccf8:	b	1cda8 <__assert_fail@plt+0xb684>
   1ccfc:	ldr	r2, [sp, #8]
   1cd00:	cmp	r5, r2
   1cd04:	bne	1cd10 <__assert_fail@plt+0xb5ec>
   1cd08:	cmp	r8, r5
   1cd0c:	bne	1cd88 <__assert_fail@plt+0xb664>
   1cd10:	ldr	r0, [r1]
   1cd14:	mov	r1, r7
   1cd18:	ubfx	r0, r0, #8, #10
   1cd1c:	ldr	r2, [sp, #16]
   1cd20:	orr	r2, r0, r2
   1cd24:	mov	r0, sl
   1cd28:	str	r2, [sp, #16]
   1cd2c:	bl	1cf34 <__assert_fail@plt+0xb810>
   1cd30:	mov	r9, #12
   1cd34:	cmn	r0, #1
   1cd38:	beq	1cd7c <__assert_fail@plt+0xb658>
   1cd3c:	mov	r8, r0
   1cd40:	ldr	r0, [sl, #20]
   1cd44:	ldr	r1, [sp, #12]
   1cd48:	add	r0, r0, r1, lsl #2
   1cd4c:	mov	r1, r8
   1cd50:	bl	1cfbc <__assert_fail@plt+0xb898>
   1cd54:	cmp	r0, #0
   1cd58:	mov	r5, r7
   1cd5c:	bne	1cb14 <__assert_fail@plt+0xb3f0>
   1cd60:	b	1cd7c <__assert_fail@plt+0xb658>
   1cd64:	ldr	r0, [sl, #12]
   1cd68:	ldr	r1, [r0, r5, lsl #2]
   1cd6c:	str	r1, [r0, r8, lsl #2]
   1cd70:	mov	r0, #0
   1cd74:	b	1cd80 <__assert_fail@plt+0xb65c>
   1cd78:	mov	r9, r0
   1cd7c:	mov	r0, r9
   1cd80:	sub	sp, fp, #28
   1cd84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd88:	mov	r1, r7
   1cd8c:	bl	1cfbc <__assert_fail@plt+0xb898>
   1cd90:	mov	r1, r0
   1cd94:	mov	r9, #12
   1cd98:	mov	r0, #0
   1cd9c:	cmp	r1, #0
   1cda0:	moveq	r0, r9
   1cda4:	b	1cd80 <__assert_fail@plt+0xb65c>
   1cda8:	mov	r9, #12
   1cdac:	b	1cd7c <__assert_fail@plt+0xb658>
   1cdb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1cdb4:	add	fp, sp, #24
   1cdb8:	mov	r8, #0
   1cdbc:	cmp	r1, #0
   1cdc0:	beq	1cf0c <__assert_fail@plt+0xb7e8>
   1cdc4:	mov	r6, r1
   1cdc8:	ldr	r1, [r1, #4]
   1cdcc:	cmp	r1, #0
   1cdd0:	beq	1cf0c <__assert_fail@plt+0xb7e8>
   1cdd4:	mov	r9, r0
   1cdd8:	ldr	r2, [r0]
   1cddc:	ldr	r0, [r0, #4]
   1cde0:	add	r3, r0, r1, lsl #1
   1cde4:	cmp	r2, r3
   1cde8:	bge	1ce14 <__assert_fail@plt+0xb6f0>
   1cdec:	ldr	r0, [r9, #8]
   1cdf0:	add	r7, r2, r1
   1cdf4:	lsl	r1, r7, #3
   1cdf8:	bl	228c8 <__assert_fail@plt+0x111a4>
   1cdfc:	cmp	r0, #0
   1ce00:	beq	1cf2c <__assert_fail@plt+0xb808>
   1ce04:	str	r0, [r9, #8]
   1ce08:	lsl	r0, r7, #1
   1ce0c:	str	r0, [r9]
   1ce10:	ldr	r0, [r9, #4]
   1ce14:	cmp	r0, #0
   1ce18:	beq	1cf14 <__assert_fail@plt+0xb7f0>
   1ce1c:	ldr	r2, [r6, #4]
   1ce20:	sub	r1, r0, #1
   1ce24:	add	r7, r0, r2, lsl #1
   1ce28:	sub	r0, r2, #1
   1ce2c:	orrs	r2, r0, r1
   1ce30:	bmi	1ce74 <__assert_fail@plt+0xb750>
   1ce34:	ldr	r2, [r6, #8]
   1ce38:	ldr	r3, [r9, #8]
   1ce3c:	ldr	r4, [r2, r0, lsl #2]
   1ce40:	ldr	r5, [r3, r1, lsl #2]
   1ce44:	cmp	r5, r4
   1ce48:	bne	1ce58 <__assert_fail@plt+0xb734>
   1ce4c:	sub	r1, r1, #1
   1ce50:	sub	r0, r0, #1
   1ce54:	b	1ce68 <__assert_fail@plt+0xb744>
   1ce58:	sublt	r7, r7, #1
   1ce5c:	subge	r1, r1, #1
   1ce60:	sublt	r0, r0, #1
   1ce64:	strlt	r4, [r3, r7, lsl #2]
   1ce68:	orr	r5, r0, r1
   1ce6c:	cmn	r5, #1
   1ce70:	bgt	1ce3c <__assert_fail@plt+0xb718>
   1ce74:	cmp	r0, #0
   1ce78:	bmi	1ce98 <__assert_fail@plt+0xb774>
   1ce7c:	add	r2, r0, #1
   1ce80:	ldr	r0, [r9, #8]
   1ce84:	ldr	r1, [r6, #8]
   1ce88:	sub	r7, r7, r2
   1ce8c:	lsl	r2, r2, #2
   1ce90:	add	r0, r0, r7, lsl #2
   1ce94:	bl	11460 <memcpy@plt>
   1ce98:	ldr	r0, [r9, #4]
   1ce9c:	ldr	r2, [r6, #4]
   1cea0:	sub	r1, r0, #1
   1cea4:	add	r3, r1, r2, lsl #1
   1cea8:	sub	r2, r3, r7
   1ceac:	adds	r2, r2, #1
   1ceb0:	bcs	1cf0c <__assert_fail@plt+0xb7e8>
   1ceb4:	add	r0, r2, r0
   1ceb8:	str	r0, [r9, #4]
   1cebc:	ldr	r0, [r9, #8]
   1cec0:	ldr	r6, [r0, r1, lsl #2]
   1cec4:	ldr	r5, [r0, r3, lsl #2]
   1cec8:	cmp	r5, r6
   1cecc:	ble	1cee8 <__assert_fail@plt+0xb7c4>
   1ced0:	add	r6, r2, r1
   1ced4:	subs	r2, r2, #1
   1ced8:	sub	r3, r3, #1
   1cedc:	str	r5, [r0, r6, lsl #2]
   1cee0:	bne	1cec0 <__assert_fail@plt+0xb79c>
   1cee4:	b	1cf0c <__assert_fail@plt+0xb7e8>
   1cee8:	add	r5, r2, r1
   1ceec:	cmp	r1, #0
   1cef0:	str	r6, [r0, r5, lsl #2]
   1cef4:	sub	r6, r1, #1
   1cef8:	mov	r1, r6
   1cefc:	bgt	1cec0 <__assert_fail@plt+0xb79c>
   1cf00:	add	r1, r0, r7, lsl #2
   1cf04:	lsl	r2, r2, #2
   1cf08:	bl	11460 <memcpy@plt>
   1cf0c:	mov	r0, r8
   1cf10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cf14:	ldr	r0, [r6, #4]
   1cf18:	str	r0, [r9, #4]
   1cf1c:	ldr	r0, [r9, #8]
   1cf20:	ldr	r2, [r6, #4]
   1cf24:	ldr	r1, [r6, #8]
   1cf28:	b	1cf04 <__assert_fail@plt+0xb7e0>
   1cf2c:	mov	r8, #12
   1cf30:	b	1cf0c <__assert_fail@plt+0xb7e8>
   1cf34:	push	{r4, r5, r6, sl, fp, lr}
   1cf38:	add	fp, sp, #16
   1cf3c:	mov	r5, r0
   1cf40:	ldr	r0, [r0]
   1cf44:	mov	r4, r1
   1cf48:	mov	r6, r2
   1cf4c:	ldr	r1, [r0, r1, lsl #3]!
   1cf50:	ldr	r2, [r0, #4]
   1cf54:	mov	r0, r5
   1cf58:	bl	1c704 <__assert_fail@plt+0xafe0>
   1cf5c:	cmn	r0, #1
   1cf60:	ldrne	r1, [r5]
   1cf64:	movwne	r3, #65280	; 0xff00
   1cf68:	movtne	r3, #3
   1cf6c:	addne	r1, r1, r0, lsl #3
   1cf70:	ldrne	r2, [r1, #4]
   1cf74:	bfine	r2, r6, #8, #10
   1cf78:	strne	r2, [r1, #4]
   1cf7c:	ldrne	r1, [r5]
   1cf80:	addne	r2, r1, r4, lsl #3
   1cf84:	addne	r1, r1, r0, lsl #3
   1cf88:	ldrne	r2, [r2, #4]
   1cf8c:	andne	r2, r2, r3
   1cf90:	ldrne	r3, [r1, #4]
   1cf94:	orrne	r2, r2, r3
   1cf98:	strne	r2, [r1, #4]
   1cf9c:	ldrne	r1, [r5]
   1cfa0:	addne	r1, r1, r0, lsl #3
   1cfa4:	ldrne	r2, [r1, #4]
   1cfa8:	orrne	r2, r2, #262144	; 0x40000
   1cfac:	strne	r2, [r1, #4]
   1cfb0:	ldrne	r1, [r5, #16]
   1cfb4:	strne	r4, [r1, r0, lsl #2]
   1cfb8:	pop	{r4, r5, r6, sl, fp, pc}
   1cfbc:	push	{r4, r5, r6, sl, fp, lr}
   1cfc0:	add	fp, sp, #16
   1cfc4:	ldr	r2, [r0]
   1cfc8:	mov	r5, r1
   1cfcc:	mov	r4, r0
   1cfd0:	cmp	r2, #0
   1cfd4:	beq	1d000 <__assert_fail@plt+0xb8dc>
   1cfd8:	ldr	r1, [r4, #4]
   1cfdc:	cmp	r1, #0
   1cfe0:	bne	1d02c <__assert_fail@plt+0xb908>
   1cfe4:	ldr	r0, [r4, #8]
   1cfe8:	str	r5, [r0]
   1cfec:	ldr	r0, [r4, #4]
   1cff0:	mov	r6, #1
   1cff4:	add	r0, r0, #1
   1cff8:	str	r0, [r4, #4]
   1cffc:	b	1d024 <__assert_fail@plt+0xb900>
   1d000:	mov	r6, #1
   1d004:	mov	r0, #4
   1d008:	str	r6, [r4]
   1d00c:	str	r6, [r4, #4]
   1d010:	bl	22898 <__assert_fail@plt+0x11174>
   1d014:	cmp	r0, #0
   1d018:	str	r0, [r4, #8]
   1d01c:	beq	1d05c <__assert_fail@plt+0xb938>
   1d020:	str	r5, [r0]
   1d024:	mov	r0, r6
   1d028:	pop	{r4, r5, r6, sl, fp, pc}
   1d02c:	cmp	r2, r1
   1d030:	bne	1d06c <__assert_fail@plt+0xb948>
   1d034:	lsl	r0, r2, #1
   1d038:	lsl	r1, r2, #3
   1d03c:	str	r0, [r4]
   1d040:	ldr	r0, [r4, #8]
   1d044:	bl	228c8 <__assert_fail@plt+0x111a4>
   1d048:	cmp	r0, #0
   1d04c:	beq	1d0e4 <__assert_fail@plt+0xb9c0>
   1d050:	str	r0, [r4, #8]
   1d054:	ldr	r1, [r4, #4]
   1d058:	b	1d070 <__assert_fail@plt+0xb94c>
   1d05c:	mov	r6, #0
   1d060:	str	r6, [r4]
   1d064:	str	r6, [r4, #4]
   1d068:	b	1d024 <__assert_fail@plt+0xb900>
   1d06c:	ldr	r0, [r4, #8]
   1d070:	ldr	r2, [r0]
   1d074:	cmp	r2, r5
   1d078:	ble	1d0ac <__assert_fail@plt+0xb988>
   1d07c:	cmp	r1, #1
   1d080:	blt	1d0dc <__assert_fail@plt+0xb9b8>
   1d084:	add	r3, r0, r1, lsl #2
   1d088:	mov	r2, r3
   1d08c:	ldr	r6, [r2, #-4]!
   1d090:	sub	r1, r1, #1
   1d094:	cmp	r1, #0
   1d098:	str	r6, [r3]
   1d09c:	mov	r3, r2
   1d0a0:	bgt	1d08c <__assert_fail@plt+0xb968>
   1d0a4:	mov	r1, #0
   1d0a8:	b	1d0dc <__assert_fail@plt+0xb9b8>
   1d0ac:	add	r2, r0, r1, lsl #2
   1d0b0:	ldr	r3, [r2, #-4]
   1d0b4:	cmp	r3, r5
   1d0b8:	ble	1d0dc <__assert_fail@plt+0xb9b8>
   1d0bc:	sub	r1, r1, #2
   1d0c0:	str	r3, [r2]
   1d0c4:	sub	r1, r1, #1
   1d0c8:	ldr	r3, [r2, #-8]
   1d0cc:	sub	r2, r2, #4
   1d0d0:	cmp	r3, r5
   1d0d4:	bgt	1d0c0 <__assert_fail@plt+0xb99c>
   1d0d8:	add	r1, r1, #2
   1d0dc:	str	r5, [r0, r1, lsl #2]
   1d0e0:	b	1cfec <__assert_fail@plt+0xb8c8>
   1d0e4:	mov	r6, #0
   1d0e8:	b	1d024 <__assert_fail@plt+0xb900>
   1d0ec:	push	{r4, r5, fp, lr}
   1d0f0:	add	fp, sp, #8
   1d0f4:	mov	r5, r0
   1d0f8:	mov	r4, r1
   1d0fc:	ldr	r0, [r0]
   1d100:	ldr	r1, [r5, #4]
   1d104:	cmp	r0, r1
   1d108:	bne	1d138 <__assert_fail@plt+0xba14>
   1d10c:	mov	r1, #2
   1d110:	add	r0, r1, r0, lsl #1
   1d114:	str	r0, [r5]
   1d118:	lsl	r1, r0, #2
   1d11c:	ldr	r0, [r5, #8]
   1d120:	bl	228c8 <__assert_fail@plt+0x111a4>
   1d124:	cmp	r0, #0
   1d128:	beq	1d150 <__assert_fail@plt+0xba2c>
   1d12c:	str	r0, [r5, #8]
   1d130:	ldr	r1, [r5, #4]
   1d134:	b	1d13c <__assert_fail@plt+0xba18>
   1d138:	ldr	r0, [r5, #8]
   1d13c:	add	r2, r1, #1
   1d140:	str	r2, [r5, #4]
   1d144:	str	r4, [r0, r1, lsl #2]
   1d148:	mov	r0, #1
   1d14c:	pop	{r4, r5, fp, pc}
   1d150:	mov	r0, #0
   1d154:	pop	{r4, r5, fp, pc}
   1d158:	push	{r4, r5, fp, lr}
   1d15c:	add	fp, sp, #8
   1d160:	mov	r4, r0
   1d164:	ldr	r0, [r1, #4]
   1d168:	mov	r5, r1
   1d16c:	str	r0, [r4, #4]
   1d170:	ldr	r1, [r1, #4]
   1d174:	cmp	r1, #1
   1d178:	blt	1d1ac <__assert_fail@plt+0xba88>
   1d17c:	str	r0, [r4]
   1d180:	lsl	r0, r0, #2
   1d184:	bl	22898 <__assert_fail@plt+0x11174>
   1d188:	cmp	r0, #0
   1d18c:	str	r0, [r4, #8]
   1d190:	beq	1d1c0 <__assert_fail@plt+0xba9c>
   1d194:	ldr	r2, [r5, #4]
   1d198:	ldr	r1, [r5, #8]
   1d19c:	lsl	r2, r2, #2
   1d1a0:	bl	11460 <memcpy@plt>
   1d1a4:	mov	r0, #0
   1d1a8:	pop	{r4, r5, fp, pc}
   1d1ac:	mov	r0, #0
   1d1b0:	str	r0, [r4]
   1d1b4:	str	r0, [r4, #4]
   1d1b8:	str	r0, [r4, #8]
   1d1bc:	pop	{r4, r5, fp, pc}
   1d1c0:	mov	r0, #0
   1d1c4:	str	r0, [r4]
   1d1c8:	str	r0, [r4, #4]
   1d1cc:	mov	r0, #12
   1d1d0:	pop	{r4, r5, fp, pc}
   1d1d4:	push	{r4, r5, r6, sl, fp, lr}
   1d1d8:	add	fp, sp, #16
   1d1dc:	ldr	r2, [r0, #4]
   1d1e0:	cmp	r2, #1
   1d1e4:	blt	1d234 <__assert_fail@plt+0xbb10>
   1d1e8:	ldr	ip, [r0, #8]
   1d1ec:	subs	r2, r2, #1
   1d1f0:	mov	r0, #0
   1d1f4:	mov	r3, #0
   1d1f8:	beq	1d224 <__assert_fail@plt+0xbb00>
   1d1fc:	mov	r3, #0
   1d200:	mov	lr, #1
   1d204:	add	r4, r2, r3
   1d208:	lsr	r5, r4, #1
   1d20c:	ldr	r6, [ip, r5, lsl #2]
   1d210:	cmp	r6, r1
   1d214:	addlt	r3, lr, r4, lsr #1
   1d218:	movge	r2, r5
   1d21c:	cmp	r3, r2
   1d220:	bcc	1d204 <__assert_fail@plt+0xbae0>
   1d224:	ldr	r2, [ip, r3, lsl #2]
   1d228:	cmp	r2, r1
   1d22c:	addeq	r0, r3, #1
   1d230:	pop	{r4, r5, r6, sl, fp, pc}
   1d234:	mov	r0, #0
   1d238:	pop	{r4, r5, r6, sl, fp, pc}
   1d23c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d240:	add	fp, sp, #28
   1d244:	sub	sp, sp, #20
   1d248:	ldr	lr, [r2, #4]
   1d24c:	cmp	lr, #0
   1d250:	beq	1d554 <__assert_fail@plt+0xbe30>
   1d254:	mov	r8, r3
   1d258:	mov	sl, r2
   1d25c:	add	r7, lr, r3
   1d260:	cmp	lr, #1
   1d264:	str	r0, [sp, #4]
   1d268:	blt	1d284 <__assert_fail@plt+0xbb60>
   1d26c:	ldr	r3, [sl, #8]
   1d270:	mov	r2, lr
   1d274:	ldr	r0, [r3], #4
   1d278:	subs	r2, r2, #1
   1d27c:	add	r7, r0, r7
   1d280:	bne	1d274 <__assert_fail@plt+0xbb50>
   1d284:	ldr	r0, [r1, #32]
   1d288:	str	r1, [sp, #12]
   1d28c:	ldr	r1, [r1, #68]	; 0x44
   1d290:	and	r1, r1, r7
   1d294:	add	r2, r1, r1, lsl #1
   1d298:	ldr	r1, [r0, r2, lsl #2]
   1d29c:	cmp	r1, #1
   1d2a0:	blt	1d330 <__assert_fail@plt+0xbc0c>
   1d2a4:	add	r0, r0, r2, lsl #2
   1d2a8:	sub	ip, lr, #1
   1d2ac:	mov	r3, #0
   1d2b0:	ldr	r9, [r0, #8]
   1d2b4:	ldr	r4, [r9, r3, lsl #2]
   1d2b8:	ldr	r0, [r4]
   1d2bc:	cmp	r0, r7
   1d2c0:	bne	1d2e4 <__assert_fail@plt+0xbbc0>
   1d2c4:	ldrb	r0, [r4, #52]	; 0x34
   1d2c8:	and	r0, r0, #15
   1d2cc:	cmp	r0, r8
   1d2d0:	bne	1d2e4 <__assert_fail@plt+0xbbc0>
   1d2d4:	cmp	sl, #0
   1d2d8:	ldrne	r5, [r4, #40]	; 0x28
   1d2dc:	cmpne	r5, #0
   1d2e0:	bne	1d2f4 <__assert_fail@plt+0xbbd0>
   1d2e4:	add	r3, r3, #1
   1d2e8:	cmp	r3, r1
   1d2ec:	blt	1d2b4 <__assert_fail@plt+0xbb90>
   1d2f0:	b	1d330 <__assert_fail@plt+0xbc0c>
   1d2f4:	ldr	r0, [r5, #4]
   1d2f8:	cmp	r0, lr
   1d2fc:	bne	1d2e4 <__assert_fail@plt+0xbbc0>
   1d300:	mov	r0, ip
   1d304:	add	r6, r0, #1
   1d308:	cmp	r6, #1
   1d30c:	blt	1d55c <__assert_fail@plt+0xbe38>
   1d310:	ldr	r6, [sl, #8]
   1d314:	ldr	r2, [r5, #8]
   1d318:	ldr	r6, [r6, r0, lsl #2]
   1d31c:	ldr	r2, [r2, r0, lsl #2]
   1d320:	sub	r0, r0, #1
   1d324:	cmp	r2, r6
   1d328:	beq	1d304 <__assert_fail@plt+0xbbe0>
   1d32c:	b	1d2e4 <__assert_fail@plt+0xbbc0>
   1d330:	mov	r0, #56	; 0x38
   1d334:	mov	r1, #1
   1d338:	bl	22844 <__assert_fail@plt+0x11120>
   1d33c:	cmp	r0, #0
   1d340:	beq	1d540 <__assert_fail@plt+0xbe1c>
   1d344:	add	r5, r0, #4
   1d348:	mov	r4, r0
   1d34c:	mov	r1, sl
   1d350:	mov	r0, r5
   1d354:	bl	1d158 <__assert_fail@plt+0xba34>
   1d358:	cmp	r0, #0
   1d35c:	bne	1d568 <__assert_fail@plt+0xbe44>
   1d360:	str	r5, [r4, #40]	; 0x28
   1d364:	and	r0, r8, #15
   1d368:	ldr	r6, [sp, #12]
   1d36c:	ldrb	r1, [r4, #52]	; 0x34
   1d370:	and	r1, r1, #240	; 0xf0
   1d374:	orr	r0, r1, r0
   1d378:	strb	r0, [r4, #52]	; 0x34
   1d37c:	ldr	r0, [sl, #4]
   1d380:	cmp	r0, #1
   1d384:	blt	1d520 <__assert_fail@plt+0xbdfc>
   1d388:	movw	r9, #65280	; 0xff00
   1d38c:	and	r0, r8, #4
   1d390:	mov	ip, r5
   1d394:	and	lr, r8, #1
   1d398:	movt	r9, #3
   1d39c:	str	r0, [sp]
   1d3a0:	and	r0, r8, #2
   1d3a4:	mov	r8, #0
   1d3a8:	str	r0, [sp, #8]
   1d3ac:	mov	r0, #0
   1d3b0:	add	r3, r9, #255	; 0xff
   1d3b4:	str	r3, [sp, #16]
   1d3b8:	ldr	r1, [sl, #8]
   1d3bc:	ldr	r2, [r6]
   1d3c0:	ldr	r1, [r1, r8, lsl #2]
   1d3c4:	add	r1, r2, r1, lsl #3
   1d3c8:	ldr	r5, [r1, #4]
   1d3cc:	and	r1, r5, r3
   1d3d0:	cmp	r1, #1
   1d3d4:	beq	1d4e8 <__assert_fail@plt+0xbdc4>
   1d3d8:	ldrb	r3, [r4, #52]	; 0x34
   1d3dc:	mov	r2, #32
   1d3e0:	and	r1, r5, r9
   1d3e4:	and	r2, r2, r5, lsr #15
   1d3e8:	orr	r2, r3, r2
   1d3ec:	uxtb	r3, r5
   1d3f0:	strb	r2, [r4, #52]	; 0x34
   1d3f4:	cmp	r3, #2
   1d3f8:	beq	1d40c <__assert_fail@plt+0xbce8>
   1d3fc:	cmp	r3, #4
   1d400:	bne	1d418 <__assert_fail@plt+0xbcf4>
   1d404:	mov	r3, #64	; 0x40
   1d408:	b	1d410 <__assert_fail@plt+0xbcec>
   1d40c:	mov	r3, #16
   1d410:	orr	r2, r2, r3
   1d414:	strb	r2, [r4, #52]	; 0x34
   1d418:	cmp	r1, #0
   1d41c:	beq	1d4e4 <__assert_fail@plt+0xbdc0>
   1d420:	ldr	r1, [r4, #40]	; 0x28
   1d424:	cmp	r1, ip
   1d428:	bne	1d47c <__assert_fail@plt+0xbd58>
   1d42c:	mov	r0, #12
   1d430:	mov	r6, lr
   1d434:	mov	r9, ip
   1d438:	bl	22898 <__assert_fail@plt+0x11174>
   1d43c:	cmp	r0, #0
   1d440:	beq	1d538 <__assert_fail@plt+0xbe14>
   1d444:	mov	r1, sl
   1d448:	str	r0, [r4, #40]	; 0x28
   1d44c:	bl	1d158 <__assert_fail@plt+0xba34>
   1d450:	cmp	r0, #0
   1d454:	bne	1d538 <__assert_fail@plt+0xbe14>
   1d458:	ldrb	r0, [r4, #52]	; 0x34
   1d45c:	mov	lr, r6
   1d460:	ldr	r6, [sp, #12]
   1d464:	mov	ip, r9
   1d468:	movw	r9, #65280	; 0xff00
   1d46c:	movt	r9, #3
   1d470:	orr	r0, r0, #128	; 0x80
   1d474:	strb	r0, [r4, #52]	; 0x34
   1d478:	mov	r0, #0
   1d47c:	cmp	lr, #0
   1d480:	bne	1d48c <__assert_fail@plt+0xbd68>
   1d484:	ands	r1, r5, #256	; 0x100
   1d488:	bne	1d4c0 <__assert_fail@plt+0xbd9c>
   1d48c:	cmp	lr, #0
   1d490:	andsne	r1, r5, #512	; 0x200
   1d494:	bne	1d4c0 <__assert_fail@plt+0xbd9c>
   1d498:	ldr	r1, [sp, #8]
   1d49c:	cmp	r1, #0
   1d4a0:	bne	1d4ac <__assert_fail@plt+0xbd88>
   1d4a4:	ands	r1, r5, #4096	; 0x1000
   1d4a8:	bne	1d4c0 <__assert_fail@plt+0xbd9c>
   1d4ac:	ldr	r1, [sp]
   1d4b0:	cmp	r1, #0
   1d4b4:	bne	1d4e4 <__assert_fail@plt+0xbdc0>
   1d4b8:	ands	r1, r5, #16384	; 0x4000
   1d4bc:	beq	1d4e4 <__assert_fail@plt+0xbdc0>
   1d4c0:	subs	r1, r8, r0
   1d4c4:	bmi	1d4e0 <__assert_fail@plt+0xbdbc>
   1d4c8:	ldr	r2, [r4, #8]
   1d4cc:	cmp	r2, r1
   1d4d0:	subgt	r2, r2, #1
   1d4d4:	strgt	r2, [r4, #8]
   1d4d8:	cmpgt	r2, r1
   1d4dc:	bgt	1d4fc <__assert_fail@plt+0xbdd8>
   1d4e0:	add	r0, r0, #1
   1d4e4:	ldr	r3, [sp, #16]
   1d4e8:	ldr	r1, [sl, #4]
   1d4ec:	add	r8, r8, #1
   1d4f0:	cmp	r8, r1
   1d4f4:	blt	1d3b8 <__assert_fail@plt+0xbc94>
   1d4f8:	b	1d520 <__assert_fail@plt+0xbdfc>
   1d4fc:	ldr	r2, [r4, #12]
   1d500:	add	r3, r2, r1, lsl #2
   1d504:	ldr	r3, [r3, #4]
   1d508:	str	r3, [r2, r1, lsl #2]
   1d50c:	add	r1, r1, #1
   1d510:	ldr	r3, [r4, #8]
   1d514:	cmp	r1, r3
   1d518:	blt	1d500 <__assert_fail@plt+0xbddc>
   1d51c:	b	1d4e0 <__assert_fail@plt+0xbdbc>
   1d520:	mov	r0, r6
   1d524:	mov	r1, r4
   1d528:	mov	r2, r7
   1d52c:	bl	1d574 <__assert_fail@plt+0xbe50>
   1d530:	cmp	r0, #0
   1d534:	beq	1d55c <__assert_fail@plt+0xbe38>
   1d538:	mov	r0, r4
   1d53c:	bl	1866c <__assert_fail@plt+0x6f48>
   1d540:	ldr	r1, [sp, #4]
   1d544:	mov	r0, #12
   1d548:	mov	r4, #0
   1d54c:	str	r0, [r1]
   1d550:	b	1d55c <__assert_fail@plt+0xbe38>
   1d554:	mov	r4, #0
   1d558:	str	r4, [r0]
   1d55c:	mov	r0, r4
   1d560:	sub	sp, fp, #28
   1d564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d568:	mov	r0, r4
   1d56c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1d570:	b	1d540 <__assert_fail@plt+0xbe1c>
   1d574:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d578:	add	fp, sp, #24
   1d57c:	mov	r7, r0
   1d580:	mov	r0, #0
   1d584:	str	r2, [r1]
   1d588:	mov	r5, r1
   1d58c:	mov	r9, r2
   1d590:	mov	r4, r1
   1d594:	str	r0, [r1, #20]
   1d598:	ldr	r0, [r1, #8]
   1d59c:	str	r0, [r5, #16]!
   1d5a0:	lsl	r0, r0, #2
   1d5a4:	bl	22898 <__assert_fail@plt+0x11174>
   1d5a8:	mov	r8, #12
   1d5ac:	cmp	r0, #0
   1d5b0:	str	r0, [r4, #24]
   1d5b4:	beq	1d644 <__assert_fail@plt+0xbf20>
   1d5b8:	ldr	r0, [r4, #8]
   1d5bc:	cmp	r0, #1
   1d5c0:	blt	1d604 <__assert_fail@plt+0xbee0>
   1d5c4:	mov	r6, #0
   1d5c8:	ldr	r1, [r4, #12]
   1d5cc:	ldr	r2, [r7]
   1d5d0:	ldr	r1, [r1, r6, lsl #2]
   1d5d4:	add	r2, r2, r1, lsl #3
   1d5d8:	ldrb	r2, [r2, #4]
   1d5dc:	tst	r2, #8
   1d5e0:	bne	1d5f8 <__assert_fail@plt+0xbed4>
   1d5e4:	mov	r0, r5
   1d5e8:	bl	1d0ec <__assert_fail@plt+0xb9c8>
   1d5ec:	cmp	r0, #0
   1d5f0:	beq	1d644 <__assert_fail@plt+0xbf20>
   1d5f4:	ldr	r0, [r4, #8]
   1d5f8:	add	r6, r6, #1
   1d5fc:	cmp	r6, r0
   1d600:	blt	1d5c8 <__assert_fail@plt+0xbea4>
   1d604:	ldr	r1, [r7, #68]	; 0x44
   1d608:	ldr	r0, [r7, #32]
   1d60c:	and	r1, r1, r9
   1d610:	mov	r5, r0
   1d614:	add	r2, r1, r1, lsl #1
   1d618:	ldr	r1, [r5, r2, lsl #2]!
   1d61c:	mov	r6, r5
   1d620:	ldr	r3, [r6, #4]!
   1d624:	cmp	r3, r1
   1d628:	ble	1d64c <__assert_fail@plt+0xbf28>
   1d62c:	add	r0, r0, r2, lsl #2
   1d630:	ldr	r0, [r0, #8]
   1d634:	add	r2, r1, #1
   1d638:	mov	r8, #0
   1d63c:	str	r2, [r5]
   1d640:	str	r4, [r0, r1, lsl #2]
   1d644:	mov	r0, r8
   1d648:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d64c:	add	r7, r0, r2, lsl #2
   1d650:	mov	r2, #2
   1d654:	add	r9, r2, r1, lsl #1
   1d658:	ldr	r0, [r7, #8]!
   1d65c:	lsl	r1, r9, #2
   1d660:	bl	228c8 <__assert_fail@plt+0x111a4>
   1d664:	cmp	r0, #0
   1d668:	beq	1d644 <__assert_fail@plt+0xbf20>
   1d66c:	str	r0, [r7]
   1d670:	str	r9, [r6]
   1d674:	ldr	r1, [r5]
   1d678:	b	1d634 <__assert_fail@plt+0xbf10>
   1d67c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d680:	add	fp, sp, #28
   1d684:	sub	sp, sp, #36	; 0x24
   1d688:	mov	r4, r0
   1d68c:	ldr	r0, [r0, #24]
   1d690:	mov	r6, r2
   1d694:	mov	r9, r1
   1d698:	cmp	r0, r1
   1d69c:	ble	1d804 <__assert_fail@plt+0xc0e0>
   1d6a0:	ldr	r0, [r4, #80]	; 0x50
   1d6a4:	mov	r1, #4
   1d6a8:	cmp	r0, #2
   1d6ac:	movge	r0, #0
   1d6b0:	strge	r0, [r4, #16]
   1d6b4:	strge	r0, [r4, #20]
   1d6b8:	mov	r0, #0
   1d6bc:	tst	r6, #1
   1d6c0:	strb	r0, [r4, #76]	; 0x4c
   1d6c4:	str	r0, [r4, #24]
   1d6c8:	str	r0, [r4, #28]
   1d6cc:	str	r0, [r4, #32]
   1d6d0:	movweq	r1, #6
   1d6d4:	ldr	r2, [r4, #44]	; 0x2c
   1d6d8:	ldr	r3, [r4, #52]	; 0x34
   1d6dc:	str	r2, [r4, #48]	; 0x30
   1d6e0:	str	r3, [r4, #56]	; 0x38
   1d6e4:	str	r1, [r4, #60]	; 0x3c
   1d6e8:	ldrb	r1, [r4, #75]	; 0x4b
   1d6ec:	cmp	r1, #0
   1d6f0:	bne	1d6fc <__assert_fail@plt+0xbfd8>
   1d6f4:	ldr	r1, [r4]
   1d6f8:	str	r1, [r4, #4]
   1d6fc:	mov	r5, r9
   1d700:	cmp	r5, #0
   1d704:	beq	1d790 <__assert_fail@plt+0xc06c>
   1d708:	ldr	r1, [r4, #32]
   1d70c:	cmp	r5, r1
   1d710:	bge	1d80c <__assert_fail@plt+0xc0e8>
   1d714:	ldrb	r0, [r4, #76]	; 0x4c
   1d718:	cmp	r0, #0
   1d71c:	bne	1d984 <__assert_fail@plt+0xc260>
   1d720:	sub	r1, r5, #1
   1d724:	mov	r0, r4
   1d728:	mov	r2, r6
   1d72c:	bl	1deb4 <__assert_fail@plt+0xc790>
   1d730:	str	r0, [r4, #60]	; 0x3c
   1d734:	ldr	r0, [r4, #80]	; 0x50
   1d738:	cmp	r0, #2
   1d73c:	blt	1d758 <__assert_fail@plt+0xc034>
   1d740:	ldr	r2, [r4, #28]
   1d744:	ldr	r0, [r4, #8]
   1d748:	sub	r2, r2, r5
   1d74c:	add	r1, r0, r5, lsl #2
   1d750:	lsl	r2, r2, #2
   1d754:	bl	11430 <memmove@plt>
   1d758:	ldrb	r0, [r4, #75]	; 0x4b
   1d75c:	cmp	r0, #0
   1d760:	bne	1da74 <__assert_fail@plt+0xc350>
   1d764:	ldr	r0, [r4, #28]
   1d768:	ldr	r1, [r4, #32]
   1d76c:	sub	r0, r0, r5
   1d770:	sub	r1, r1, r5
   1d774:	str	r0, [r4, #28]
   1d778:	str	r1, [r4, #32]
   1d77c:	ldrb	r0, [r4, #75]	; 0x4b
   1d780:	cmp	r0, #0
   1d784:	ldreq	r0, [r4, #4]
   1d788:	addeq	r0, r0, r5
   1d78c:	streq	r0, [r4, #4]
   1d790:	str	r9, [r4, #24]
   1d794:	ldr	r0, [r4, #48]	; 0x30
   1d798:	ldr	r1, [r4, #56]	; 0x38
   1d79c:	ldr	r2, [r4, #80]	; 0x50
   1d7a0:	sub	r0, r0, r5
   1d7a4:	cmp	r2, #2
   1d7a8:	sub	r1, r1, r5
   1d7ac:	str	r0, [r4, #48]	; 0x30
   1d7b0:	str	r1, [r4, #56]	; 0x38
   1d7b4:	blt	1d7d8 <__assert_fail@plt+0xc0b4>
   1d7b8:	ldrb	r0, [r4, #72]	; 0x48
   1d7bc:	cmp	r0, #0
   1d7c0:	beq	1d7ec <__assert_fail@plt+0xc0c8>
   1d7c4:	mov	r0, r4
   1d7c8:	bl	18828 <__assert_fail@plt+0x7104>
   1d7cc:	cmp	r0, #0
   1d7d0:	bne	1d7fc <__assert_fail@plt+0xc0d8>
   1d7d4:	b	1d7f4 <__assert_fail@plt+0xc0d0>
   1d7d8:	ldrb	r1, [r4, #75]	; 0x4b
   1d7dc:	cmp	r1, #0
   1d7e0:	bne	1db0c <__assert_fail@plt+0xc3e8>
   1d7e4:	str	r0, [r4, #28]
   1d7e8:	b	1d7f4 <__assert_fail@plt+0xc0d0>
   1d7ec:	mov	r0, r4
   1d7f0:	bl	18e64 <__assert_fail@plt+0x7740>
   1d7f4:	mov	r0, #0
   1d7f8:	str	r0, [r4, #40]	; 0x28
   1d7fc:	sub	sp, fp, #28
   1d800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d804:	sub	r5, r9, r0
   1d808:	b	1d700 <__assert_fail@plt+0xbfdc>
   1d80c:	ldrb	r2, [r4, #76]	; 0x4c
   1d810:	ldr	lr, [r4, #28]
   1d814:	cmp	r2, #0
   1d818:	bne	1dc6c <__assert_fail@plt+0xc548>
   1d81c:	mov	r2, #0
   1d820:	str	r2, [r4, #28]
   1d824:	ldr	r3, [r4, #80]	; 0x50
   1d828:	cmp	r3, #2
   1d82c:	blt	1db24 <__assert_fail@plt+0xc400>
   1d830:	ldrb	r2, [r4, #73]	; 0x49
   1d834:	cmp	r2, #0
   1d838:	beq	1d8f4 <__assert_fail@plt+0xc1d0>
   1d83c:	ldr	r7, [r4]
   1d840:	sub	r3, r5, r3
   1d844:	add	ip, r7, r0
   1d848:	add	r3, ip, r3
   1d84c:	add	r8, ip, r5
   1d850:	cmp	r3, r7
   1d854:	movcc	r3, r7
   1d858:	mov	r7, r8
   1d85c:	sub	r7, r7, #1
   1d860:	cmp	r7, r3
   1d864:	bcc	1d8f4 <__assert_fail@plt+0xc1d0>
   1d868:	ldrb	r2, [r7]
   1d86c:	and	r2, r2, #192	; 0xc0
   1d870:	cmp	r2, #128	; 0x80
   1d874:	beq	1d85c <__assert_fail@plt+0xc138>
   1d878:	ldr	r0, [r4, #48]	; 0x30
   1d87c:	mov	sl, lr
   1d880:	mov	r1, r7
   1d884:	add	r0, ip, r0
   1d888:	sub	r2, r0, r7
   1d88c:	ldr	r0, [r4, #64]	; 0x40
   1d890:	cmp	r0, #0
   1d894:	bne	1dd08 <__assert_fail@plt+0xc5e4>
   1d898:	mov	r0, #0
   1d89c:	add	r3, sp, #24
   1d8a0:	str	r0, [sp, #28]
   1d8a4:	str	r0, [sp, #24]
   1d8a8:	add	r0, sp, #20
   1d8ac:	bl	22cd8 <__assert_fail@plt+0x115b4>
   1d8b0:	sub	r1, r8, r7
   1d8b4:	mvn	r2, #0
   1d8b8:	cmp	r0, r1
   1d8bc:	bcc	1d8e0 <__assert_fail@plt+0xc1bc>
   1d8c0:	cmn	r0, #3
   1d8c4:	bhi	1d8e0 <__assert_fail@plt+0xc1bc>
   1d8c8:	mov	r2, #0
   1d8cc:	sub	r0, r0, r1
   1d8d0:	str	r2, [r4, #16]
   1d8d4:	str	r2, [r4, #20]
   1d8d8:	str	r0, [r4, #28]
   1d8dc:	ldr	r2, [sp, #20]
   1d8e0:	cmn	r2, #1
   1d8e4:	bne	1dbdc <__assert_fail@plt+0xc4b8>
   1d8e8:	ldr	r0, [r4, #24]
   1d8ec:	ldr	r1, [r4, #32]
   1d8f0:	mov	lr, sl
   1d8f4:	add	r8, r1, r0
   1d8f8:	cmp	r8, r9
   1d8fc:	bge	1dbbc <__assert_fail@plt+0xc498>
   1d900:	add	sl, r4, #16
   1d904:	str	lr, [sp]
   1d908:	ldr	r0, [r4]
   1d90c:	ldr	r2, [r4, #44]	; 0x2c
   1d910:	mov	r3, sl
   1d914:	add	r1, r0, r8
   1d918:	ldr	r0, [sl]
   1d91c:	sub	r7, r2, r8
   1d920:	mov	r2, r7
   1d924:	str	r0, [sp, #8]
   1d928:	ldr	r0, [sl, #4]
   1d92c:	str	r0, [sp, #4]
   1d930:	add	r0, sp, #24
   1d934:	bl	22cd8 <__assert_fail@plt+0x115b4>
   1d938:	sub	r1, r0, #1
   1d93c:	cmn	r1, #3
   1d940:	bcs	1d958 <__assert_fail@plt+0xc234>
   1d944:	ldr	r2, [sp, #24]
   1d948:	add	r8, r0, r8
   1d94c:	cmp	r8, r9
   1d950:	blt	1d908 <__assert_fail@plt+0xc1e4>
   1d954:	b	1dbc8 <__assert_fail@plt+0xc4a4>
   1d958:	ldr	r3, [sp, #4]
   1d95c:	ldr	r1, [sp, #8]
   1d960:	cmp	r7, #0
   1d964:	mov	r2, #0
   1d968:	cmpne	r0, #0
   1d96c:	beq	1d978 <__assert_fail@plt+0xc254>
   1d970:	ldr	r0, [r4]
   1d974:	ldrb	r2, [r0, r8]
   1d978:	stm	sl, {r1, r3}
   1d97c:	mov	r0, #1
   1d980:	b	1d948 <__assert_fail@plt+0xc224>
   1d984:	ldr	r8, [r4, #28]
   1d988:	ldr	sl, [r4, #12]
   1d98c:	mov	r0, #0
   1d990:	mov	r1, r8
   1d994:	add	r2, r0, r1
   1d998:	add	r2, r2, r2, lsr #31
   1d99c:	asr	r7, r2, #1
   1d9a0:	ldr	r2, [sl, r7, lsl #2]
   1d9a4:	mov	r3, r7
   1d9a8:	cmp	r2, r5
   1d9ac:	bgt	1d9bc <__assert_fail@plt+0xc298>
   1d9b0:	bge	1d9c8 <__assert_fail@plt+0xc2a4>
   1d9b4:	add	r0, r7, #1
   1d9b8:	mov	r3, r1
   1d9bc:	cmp	r0, r3
   1d9c0:	mov	r1, r3
   1d9c4:	blt	1d994 <__assert_fail@plt+0xc270>
   1d9c8:	cmp	r2, r5
   1d9cc:	mov	r0, r4
   1d9d0:	mov	r2, r6
   1d9d4:	addlt	r7, r7, #1
   1d9d8:	sub	r1, r7, #1
   1d9dc:	bl	1deb4 <__assert_fail@plt+0xc790>
   1d9e0:	cmp	r8, r5
   1d9e4:	str	r0, [r4, #60]	; 0x3c
   1d9e8:	ble	1da8c <__assert_fail@plt+0xc368>
   1d9ec:	cmp	r7, r5
   1d9f0:	bne	1da8c <__assert_fail@plt+0xc368>
   1d9f4:	ldr	r0, [sl, r5, lsl #2]
   1d9f8:	cmp	r0, r5
   1d9fc:	bne	1da8c <__assert_fail@plt+0xc368>
   1da00:	ldr	r0, [r4, #8]
   1da04:	sub	r2, r8, r5
   1da08:	lsl	r2, r2, #2
   1da0c:	add	r1, r0, r5, lsl #2
   1da10:	bl	11430 <memmove@plt>
   1da14:	ldr	r2, [r4, #28]
   1da18:	ldr	r0, [r4, #4]
   1da1c:	add	r1, r0, r5
   1da20:	sub	r2, r2, r5
   1da24:	bl	11430 <memmove@plt>
   1da28:	ldr	r0, [r4, #28]
   1da2c:	ldr	r1, [r4, #32]
   1da30:	sub	r0, r0, r5
   1da34:	sub	r1, r1, r5
   1da38:	cmp	r0, #1
   1da3c:	str	r0, [r4, #28]
   1da40:	str	r1, [r4, #32]
   1da44:	blt	1d77c <__assert_fail@plt+0xc058>
   1da48:	ldr	r0, [r4, #12]
   1da4c:	mov	r2, #0
   1da50:	add	r1, r0, r5, lsl #2
   1da54:	ldr	r3, [r1, r2, lsl #2]
   1da58:	sub	r3, r3, r5
   1da5c:	str	r3, [r0, r2, lsl #2]
   1da60:	add	r2, r2, #1
   1da64:	ldr	r3, [r4, #28]
   1da68:	cmp	r2, r3
   1da6c:	blt	1da54 <__assert_fail@plt+0xc330>
   1da70:	b	1d77c <__assert_fail@plt+0xc058>
   1da74:	ldr	r2, [r4, #28]
   1da78:	ldr	r0, [r4, #4]
   1da7c:	add	r1, r0, r5
   1da80:	sub	r2, r2, r5
   1da84:	bl	11430 <memmove@plt>
   1da88:	b	1d764 <__assert_fail@plt+0xc040>
   1da8c:	mov	r0, #0
   1da90:	strb	r0, [r4, #76]	; 0x4c
   1da94:	sub	r0, r5, r9
   1da98:	ldr	r1, [r4, #44]	; 0x2c
   1da9c:	ldr	r2, [r4, #52]	; 0x34
   1daa0:	add	r1, r0, r1
   1daa4:	add	r0, r0, r2
   1daa8:	str	r1, [r4, #48]	; 0x30
   1daac:	sub	r1, sl, #4
   1dab0:	str	r0, [r4, #56]	; 0x38
   1dab4:	mov	r0, r7
   1dab8:	cmp	r7, #1
   1dabc:	blt	1dad0 <__assert_fail@plt+0xc3ac>
   1dac0:	ldr	r2, [r1, r0, lsl #2]
   1dac4:	sub	r7, r0, #1
   1dac8:	cmp	r2, r5
   1dacc:	beq	1dab4 <__assert_fail@plt+0xc390>
   1dad0:	cmp	r0, r8
   1dad4:	bge	1daf8 <__assert_fail@plt+0xc3d4>
   1dad8:	ldr	r1, [r4, #8]
   1dadc:	ldr	r2, [r1, r0, lsl #2]
   1dae0:	cmn	r2, #1
   1dae4:	bne	1daf8 <__assert_fail@plt+0xc3d4>
   1dae8:	add	r0, r0, #1
   1daec:	cmp	r8, r0
   1daf0:	bne	1dadc <__assert_fail@plt+0xc3b8>
   1daf4:	b	1db00 <__assert_fail@plt+0xc3dc>
   1daf8:	cmp	r0, r8
   1dafc:	bne	1db70 <__assert_fail@plt+0xc44c>
   1db00:	mov	r0, #0
   1db04:	str	r0, [r4, #28]
   1db08:	b	1dc30 <__assert_fail@plt+0xc50c>
   1db0c:	ldrb	r0, [r4, #72]	; 0x48
   1db10:	cmp	r0, #0
   1db14:	beq	1dc38 <__assert_fail@plt+0xc514>
   1db18:	mov	r0, r4
   1db1c:	bl	18df8 <__assert_fail@plt+0x76d4>
   1db20:	b	1d7f4 <__assert_fail@plt+0xc0d0>
   1db24:	ldr	r3, [r4]
   1db28:	add	r0, r5, r0
   1db2c:	ldr	r1, [r4, #64]	; 0x40
   1db30:	add	r0, r0, r3
   1db34:	cmp	r1, #0
   1db38:	ldrb	r0, [r0, #-1]
   1db3c:	str	r2, [r4, #32]
   1db40:	ldrbne	r0, [r1, r0]
   1db44:	ldr	r1, [r4, #68]	; 0x44
   1db48:	ubfx	r2, r0, #5, #3
   1db4c:	and	r3, r0, #31
   1db50:	ldr	r2, [r1, r2, lsl #2]
   1db54:	mov	r1, #1
   1db58:	tst	r2, r1, lsl r3
   1db5c:	moveq	r1, #0
   1db60:	cmpeq	r0, #10
   1db64:	beq	1dc58 <__assert_fail@plt+0xc534>
   1db68:	str	r1, [r4, #60]	; 0x3c
   1db6c:	b	1d77c <__assert_fail@plt+0xc058>
   1db70:	ldr	r0, [sl, r0, lsl #2]
   1db74:	subs	r2, r0, r5
   1db78:	str	r2, [r4, #28]
   1db7c:	beq	1dc50 <__assert_fail@plt+0xc52c>
   1db80:	cmp	r2, #1
   1db84:	blt	1dba8 <__assert_fail@plt+0xc484>
   1db88:	ldr	r0, [r4, #8]
   1db8c:	mov	r1, #0
   1db90:	mvn	r3, #0
   1db94:	str	r3, [r0, r1, lsl #2]
   1db98:	add	r1, r1, #1
   1db9c:	ldr	r2, [r4, #28]
   1dba0:	cmp	r1, r2
   1dba4:	blt	1db94 <__assert_fail@plt+0xc470>
   1dba8:	ldr	r0, [r4, #4]
   1dbac:	mov	r1, #255	; 0xff
   1dbb0:	bl	1161c <memset@plt>
   1dbb4:	ldr	r0, [r4, #28]
   1dbb8:	b	1dc30 <__assert_fail@plt+0xc50c>
   1dbbc:	sub	r7, r8, r9
   1dbc0:	str	r7, [r4, #28]
   1dbc4:	b	1dc10 <__assert_fail@plt+0xc4ec>
   1dbc8:	ldr	lr, [sp]
   1dbcc:	sub	r7, r8, r9
   1dbd0:	cmn	r2, #1
   1dbd4:	str	r7, [r4, #28]
   1dbd8:	beq	1dc10 <__assert_fail@plt+0xc4ec>
   1dbdc:	ldrb	r0, [r4, #78]	; 0x4e
   1dbe0:	cmp	r0, #0
   1dbe4:	bne	1dcd8 <__assert_fail@plt+0xc5b4>
   1dbe8:	mov	r1, #0
   1dbec:	cmp	r2, #10
   1dbf0:	bne	1dc04 <__assert_fail@plt+0xc4e0>
   1dbf4:	ldrb	r0, [r4, #77]	; 0x4d
   1dbf8:	cmp	r0, #0
   1dbfc:	movwne	r0, #1
   1dc00:	lsl	r1, r0, #1
   1dc04:	str	r1, [r4, #60]	; 0x3c
   1dc08:	ldr	r7, [r4, #28]
   1dc0c:	b	1dc24 <__assert_fail@plt+0xc500>
   1dc10:	sub	r1, lr, #1
   1dc14:	mov	r0, r4
   1dc18:	mov	r2, r6
   1dc1c:	bl	1deb4 <__assert_fail@plt+0xc790>
   1dc20:	str	r0, [r4, #60]	; 0x3c
   1dc24:	mov	r0, #0
   1dc28:	cmp	r7, #0
   1dc2c:	bne	1dc94 <__assert_fail@plt+0xc570>
   1dc30:	str	r0, [r4, #32]
   1dc34:	b	1d77c <__assert_fail@plt+0xc058>
   1dc38:	ldr	r0, [r4, #64]	; 0x40
   1dc3c:	cmp	r0, #0
   1dc40:	beq	1d7f4 <__assert_fail@plt+0xc0d0>
   1dc44:	mov	r0, r4
   1dc48:	bl	19050 <__assert_fail@plt+0x792c>
   1dc4c:	b	1d7f4 <__assert_fail@plt+0xc0d0>
   1dc50:	mov	r0, #0
   1dc54:	b	1dc30 <__assert_fail@plt+0xc50c>
   1dc58:	ldrb	r0, [r4, #77]	; 0x4d
   1dc5c:	cmp	r0, #0
   1dc60:	movwne	r0, #1
   1dc64:	lsl	r1, r0, #1
   1dc68:	b	1db68 <__assert_fail@plt+0xc444>
   1dc6c:	mov	r2, #0
   1dc70:	strb	r2, [r4, #76]	; 0x4c
   1dc74:	sub	r2, r5, r9
   1dc78:	ldr	r3, [r4, #44]	; 0x2c
   1dc7c:	ldr	r7, [r4, #52]	; 0x34
   1dc80:	add	r3, r2, r3
   1dc84:	add	r2, r2, r7
   1dc88:	str	r3, [r4, #48]	; 0x30
   1dc8c:	str	r2, [r4, #56]	; 0x38
   1dc90:	b	1d81c <__assert_fail@plt+0xc0f8>
   1dc94:	cmp	r7, #1
   1dc98:	blt	1dcbc <__assert_fail@plt+0xc598>
   1dc9c:	ldr	r0, [r4, #8]
   1dca0:	mov	r1, #0
   1dca4:	mvn	r2, #0
   1dca8:	str	r2, [r0, r1, lsl #2]
   1dcac:	add	r1, r1, #1
   1dcb0:	ldr	r7, [r4, #28]
   1dcb4:	cmp	r1, r7
   1dcb8:	blt	1dca8 <__assert_fail@plt+0xc584>
   1dcbc:	ldrb	r0, [r4, #75]	; 0x4b
   1dcc0:	cmp	r0, #0
   1dcc4:	beq	1dd00 <__assert_fail@plt+0xc5dc>
   1dcc8:	ldr	r0, [r4, #4]
   1dccc:	mov	r1, #255	; 0xff
   1dcd0:	mov	r2, r7
   1dcd4:	b	1dbb0 <__assert_fail@plt+0xc48c>
   1dcd8:	mov	r0, r2
   1dcdc:	mov	r6, r2
   1dce0:	bl	11604 <iswalnum@plt>
   1dce4:	mov	r1, #1
   1dce8:	cmp	r6, #95	; 0x5f
   1dcec:	beq	1dc04 <__assert_fail@plt+0xc4e0>
   1dcf0:	mov	r2, r6
   1dcf4:	cmp	r0, #0
   1dcf8:	beq	1dbe8 <__assert_fail@plt+0xc4c4>
   1dcfc:	b	1dc04 <__assert_fail@plt+0xc4e0>
   1dd00:	mov	r0, r7
   1dd04:	b	1dc30 <__assert_fail@plt+0xc50c>
   1dd08:	cmp	r2, #1
   1dd0c:	blt	1dd44 <__assert_fail@plt+0xc620>
   1dd10:	cmp	r2, #6
   1dd14:	mov	r1, r2
   1dd18:	movge	r1, #6
   1dd1c:	sub	ip, r1, #1
   1dd20:	add	r1, sp, #14
   1dd24:	ldrb	r3, [r7, ip]
   1dd28:	cmp	ip, #0
   1dd2c:	ldrb	r3, [r0, r3]
   1dd30:	strb	r3, [r1, ip]
   1dd34:	sub	r3, ip, #1
   1dd38:	mov	ip, r3
   1dd3c:	bgt	1dd24 <__assert_fail@plt+0xc600>
   1dd40:	b	1d898 <__assert_fail@plt+0xc174>
   1dd44:	add	r1, sp, #14
   1dd48:	b	1d898 <__assert_fail@plt+0xc174>
   1dd4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dd50:	add	fp, sp, #24
   1dd54:	mov	r3, r2
   1dd58:	ldr	r2, [r0, #88]	; 0x58
   1dd5c:	mov	r5, r1
   1dd60:	mov	r4, r0
   1dd64:	mov	r1, r3
   1dd68:	bl	1deb4 <__assert_fail@plt+0xc790>
   1dd6c:	ldr	r1, [r5, #8]
   1dd70:	cmp	r1, #1
   1dd74:	blt	1de04 <__assert_fail@plt+0xc6e0>
   1dd78:	and	ip, r0, #8
   1dd7c:	and	lr, r0, #2
   1dd80:	and	r2, r0, #1
   1dd84:	ldr	r0, [r4, #84]	; 0x54
   1dd88:	ldr	r5, [r5, #12]
   1dd8c:	movw	r8, #65280	; 0xff00
   1dd90:	mov	r3, #0
   1dd94:	movt	r8, #3
   1dd98:	ldr	r4, [r0]
   1dd9c:	ldr	r0, [r5, r3, lsl #2]
   1dda0:	add	r7, r4, r0, lsl #3
   1dda4:	ldr	r7, [r7, #4]
   1dda8:	uxtb	r6, r7
   1ddac:	cmp	r6, #2
   1ddb0:	bne	1ddf8 <__assert_fail@plt+0xc6d4>
   1ddb4:	tst	r7, r8
   1ddb8:	beq	1de08 <__assert_fail@plt+0xc6e4>
   1ddbc:	cmp	r2, #0
   1ddc0:	bne	1ddcc <__assert_fail@plt+0xc6a8>
   1ddc4:	ands	r6, r7, #1024	; 0x400
   1ddc8:	bne	1ddf8 <__assert_fail@plt+0xc6d4>
   1ddcc:	cmp	r2, #0
   1ddd0:	andsne	r6, r7, #2048	; 0x800
   1ddd4:	bne	1ddf8 <__assert_fail@plt+0xc6d4>
   1ddd8:	cmp	lr, #0
   1dddc:	bne	1dde8 <__assert_fail@plt+0xc6c4>
   1dde0:	ands	r6, r7, #8192	; 0x2000
   1dde4:	bne	1ddf8 <__assert_fail@plt+0xc6d4>
   1dde8:	cmp	ip, #0
   1ddec:	bne	1de08 <__assert_fail@plt+0xc6e4>
   1ddf0:	ands	r6, r7, #32768	; 0x8000
   1ddf4:	beq	1de08 <__assert_fail@plt+0xc6e4>
   1ddf8:	add	r3, r3, #1
   1ddfc:	cmp	r3, r1
   1de00:	blt	1dd9c <__assert_fail@plt+0xc678>
   1de04:	mov	r0, #0
   1de08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1de0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1de10:	add	fp, sp, #24
   1de14:	mov	r8, r0
   1de18:	ldr	r0, [r0, #124]	; 0x7c
   1de1c:	cmp	r0, #1
   1de20:	blt	1dea4 <__assert_fail@plt+0xc780>
   1de24:	mov	r7, #0
   1de28:	ldr	r0, [r8, #132]	; 0x84
   1de2c:	ldr	r5, [r0, r7, lsl #2]
   1de30:	ldr	r0, [r5, #16]
   1de34:	cmp	r0, #1
   1de38:	blt	1de68 <__assert_fail@plt+0xc744>
   1de3c:	mov	r4, #0
   1de40:	ldr	r0, [r5, #20]
   1de44:	ldr	r6, [r0, r4, lsl #2]
   1de48:	ldr	r0, [r6, #16]
   1de4c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1de50:	mov	r0, r6
   1de54:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1de58:	ldr	r0, [r5, #16]
   1de5c:	add	r4, r4, #1
   1de60:	cmp	r4, r0
   1de64:	blt	1de40 <__assert_fail@plt+0xc71c>
   1de68:	ldr	r0, [r5, #20]
   1de6c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1de70:	ldr	r0, [r5, #8]
   1de74:	cmp	r0, #0
   1de78:	beq	1de8c <__assert_fail@plt+0xc768>
   1de7c:	ldr	r0, [r0, #8]
   1de80:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1de84:	ldr	r0, [r5, #8]
   1de88:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1de8c:	mov	r0, r5
   1de90:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1de94:	ldr	r0, [r8, #124]	; 0x7c
   1de98:	add	r7, r7, #1
   1de9c:	cmp	r7, r0
   1dea0:	blt	1de28 <__assert_fail@plt+0xc704>
   1dea4:	mov	r0, #0
   1dea8:	str	r0, [r8, #108]	; 0x6c
   1deac:	str	r0, [r8, #124]	; 0x7c
   1deb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1deb4:	push	{r4, r5, fp, lr}
   1deb8:	add	fp, sp, #8
   1debc:	mov	r4, r0
   1dec0:	cmn	r1, #1
   1dec4:	ble	1defc <__assert_fail@plt+0xc7d8>
   1dec8:	ldr	r0, [r4, #48]	; 0x30
   1decc:	cmp	r0, r1
   1ded0:	beq	1df60 <__assert_fail@plt+0xc83c>
   1ded4:	ldr	r0, [r4, #80]	; 0x50
   1ded8:	cmp	r0, #2
   1dedc:	blt	1df04 <__assert_fail@plt+0xc7e0>
   1dee0:	ldr	r0, [r4, #8]
   1dee4:	ldr	r5, [r0, r1, lsl #2]
   1dee8:	cmn	r5, #1
   1deec:	bne	1df34 <__assert_fail@plt+0xc810>
   1def0:	sub	r1, r1, #1
   1def4:	cmn	r1, #1
   1def8:	bne	1dee4 <__assert_fail@plt+0xc7c0>
   1defc:	ldr	r0, [r4, #60]	; 0x3c
   1df00:	pop	{r4, r5, fp, pc}
   1df04:	ldr	r0, [r4, #4]
   1df08:	ldr	r2, [r4, #68]	; 0x44
   1df0c:	ldrb	r1, [r0, r1]
   1df10:	ubfx	r0, r1, #5, #3
   1df14:	and	r3, r1, #31
   1df18:	ldr	r2, [r2, r0, lsl #2]
   1df1c:	mov	r0, #1
   1df20:	tst	r2, r0, lsl r3
   1df24:	moveq	r0, #0
   1df28:	cmpeq	r1, #10
   1df2c:	bne	1df5c <__assert_fail@plt+0xc838>
   1df30:	b	1df4c <__assert_fail@plt+0xc828>
   1df34:	ldrb	r0, [r4, #78]	; 0x4e
   1df38:	cmp	r0, #0
   1df3c:	bne	1df6c <__assert_fail@plt+0xc848>
   1df40:	mov	r0, #0
   1df44:	cmp	r5, #10
   1df48:	popne	{r4, r5, fp, pc}
   1df4c:	ldrb	r0, [r4, #77]	; 0x4d
   1df50:	cmp	r0, #0
   1df54:	movwne	r0, #1
   1df58:	lsl	r0, r0, #1
   1df5c:	pop	{r4, r5, fp, pc}
   1df60:	and	r0, r2, #2
   1df64:	eor	r0, r0, #10
   1df68:	pop	{r4, r5, fp, pc}
   1df6c:	mov	r0, r5
   1df70:	bl	11604 <iswalnum@plt>
   1df74:	mov	r1, r0
   1df78:	mov	r0, #1
   1df7c:	cmp	r5, #95	; 0x5f
   1df80:	beq	1df5c <__assert_fail@plt+0xc838>
   1df84:	cmp	r1, #0
   1df88:	beq	1df40 <__assert_fail@plt+0xc81c>
   1df8c:	b	1df5c <__assert_fail@plt+0xc838>
   1df90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df94:	add	fp, sp, #28
   1df98:	sub	sp, sp, #4
   1df9c:	mov	sl, r0
   1dfa0:	ldr	r0, [r1, #4]
   1dfa4:	cmp	r0, #1
   1dfa8:	blt	1e074 <__assert_fail@plt+0xc950>
   1dfac:	ldr	r7, [sl, #84]	; 0x54
   1dfb0:	mov	r8, r2
   1dfb4:	mov	r5, r1
   1dfb8:	mov	r4, #0
   1dfbc:	ldr	r1, [r5, #8]
   1dfc0:	ldr	r6, [r1, r4, lsl #2]
   1dfc4:	ldr	r1, [r7]
   1dfc8:	add	r2, r1, r6, lsl #3
   1dfcc:	ldrb	r2, [r2, #4]
   1dfd0:	cmp	r2, #8
   1dfd4:	bne	1e040 <__assert_fail@plt+0xc91c>
   1dfd8:	ldr	r1, [r1, r6, lsl #3]
   1dfdc:	cmp	r1, #31
   1dfe0:	bgt	1e040 <__assert_fail@plt+0xc91c>
   1dfe4:	ldr	r2, [r7, #80]	; 0x50
   1dfe8:	mov	r3, #1
   1dfec:	tst	r2, r3, lsl r1
   1dff0:	beq	1e040 <__assert_fail@plt+0xc91c>
   1dff4:	ldr	r0, [sl, #124]	; 0x7c
   1dff8:	ldr	r9, [sl, #128]	; 0x80
   1dffc:	cmp	r0, r9
   1e000:	beq	1e050 <__assert_fail@plt+0xc92c>
   1e004:	mov	r0, #1
   1e008:	mov	r1, #24
   1e00c:	bl	22844 <__assert_fail@plt+0x11120>
   1e010:	ldr	r1, [sl, #124]	; 0x7c
   1e014:	ldr	r2, [sl, #132]	; 0x84
   1e018:	str	r0, [r2, r1, lsl #2]
   1e01c:	ldr	r0, [sl, #132]	; 0x84
   1e020:	ldr	r0, [r0, r1, lsl #2]
   1e024:	cmp	r0, #0
   1e028:	beq	1e080 <__assert_fail@plt+0xc95c>
   1e02c:	add	r1, r1, #1
   1e030:	str	r6, [r0, #4]
   1e034:	str	r1, [sl, #124]	; 0x7c
   1e038:	str	r8, [r0]
   1e03c:	ldr	r0, [r5, #4]
   1e040:	add	r4, r4, #1
   1e044:	cmp	r4, r0
   1e048:	blt	1dfbc <__assert_fail@plt+0xc898>
   1e04c:	b	1e074 <__assert_fail@plt+0xc950>
   1e050:	ldr	r0, [sl, #132]	; 0x84
   1e054:	lsl	r1, r9, #3
   1e058:	bl	228c8 <__assert_fail@plt+0x111a4>
   1e05c:	cmp	r0, #0
   1e060:	beq	1e080 <__assert_fail@plt+0xc95c>
   1e064:	lsl	r1, r9, #1
   1e068:	str	r1, [sl, #128]	; 0x80
   1e06c:	str	r0, [sl, #132]	; 0x84
   1e070:	b	1e004 <__assert_fail@plt+0xc8e0>
   1e074:	mov	r0, #0
   1e078:	sub	sp, fp, #28
   1e07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e080:	mov	r0, #12
   1e084:	b	1e078 <__assert_fail@plt+0xc954>
   1e088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e08c:	add	fp, sp, #28
   1e090:	sub	sp, sp, #76	; 0x4c
   1e094:	mov	r7, r0
   1e098:	ldr	r0, [r1, #4]
   1e09c:	cmp	r0, #1
   1e0a0:	blt	1e754 <__assert_fail@plt+0xd030>
   1e0a4:	ldr	r2, [r7, #84]	; 0x54
   1e0a8:	ldr	r0, [r7, #40]	; 0x28
   1e0ac:	mov	r3, #0
   1e0b0:	str	r7, [sp, #40]	; 0x28
   1e0b4:	str	r1, [sp, #12]
   1e0b8:	str	r0, [sp, #52]	; 0x34
   1e0bc:	str	r2, [sp, #24]
   1e0c0:	ldr	r0, [r1, #8]
   1e0c4:	str	r3, [sp, #20]
   1e0c8:	ldr	r3, [r0, r3, lsl #2]
   1e0cc:	ldr	r0, [r2]
   1e0d0:	add	r0, r0, r3, lsl #3
   1e0d4:	mov	r1, r3
   1e0d8:	str	r3, [sp, #48]	; 0x30
   1e0dc:	ldr	r4, [r0, #4]
   1e0e0:	uxtb	r0, r4
   1e0e4:	cmp	r0, #4
   1e0e8:	bne	1e738 <__assert_fail@plt+0xd014>
   1e0ec:	movw	r0, #65280	; 0xff00
   1e0f0:	movt	r0, #3
   1e0f4:	tst	r4, r0
   1e0f8:	beq	1e14c <__assert_fail@plt+0xca28>
   1e0fc:	ldr	r2, [r7, #88]	; 0x58
   1e100:	ldr	r1, [sp, #52]	; 0x34
   1e104:	mov	r0, r7
   1e108:	bl	1deb4 <__assert_fail@plt+0xc790>
   1e10c:	and	r1, r0, #1
   1e110:	tst	r4, #1024	; 0x400
   1e114:	beq	1e120 <__assert_fail@plt+0xc9fc>
   1e118:	cmp	r1, #0
   1e11c:	beq	1e738 <__assert_fail@plt+0xd014>
   1e120:	tst	r4, #2048	; 0x800
   1e124:	cmpne	r1, #0
   1e128:	bne	1e738 <__assert_fail@plt+0xd014>
   1e12c:	tst	r4, #8192	; 0x2000
   1e130:	beq	1e13c <__assert_fail@plt+0xca18>
   1e134:	ands	r1, r0, #2
   1e138:	beq	1e738 <__assert_fail@plt+0xd014>
   1e13c:	tst	r4, #32768	; 0x8000
   1e140:	beq	1e14c <__assert_fail@plt+0xca28>
   1e144:	ands	r0, r0, #8
   1e148:	beq	1e738 <__assert_fail@plt+0xd014>
   1e14c:	ldr	r0, [r7, #84]	; 0x54
   1e150:	ldr	r1, [sp, #52]	; 0x34
   1e154:	ldr	r4, [r7, #4]
   1e158:	ldr	r8, [r7, #108]	; 0x6c
   1e15c:	str	r0, [sp, #36]	; 0x24
   1e160:	mov	r0, r7
   1e164:	bl	1ebc8 <__assert_fail@plt+0xd4a4>
   1e168:	cmn	r0, #1
   1e16c:	beq	1e19c <__assert_fail@plt+0xca78>
   1e170:	ldr	r1, [r7, #116]	; 0x74
   1e174:	add	r0, r0, r0, lsl #1
   1e178:	add	r0, r1, r0, lsl #3
   1e17c:	ldr	r1, [r0]
   1e180:	ldr	r2, [sp, #48]	; 0x30
   1e184:	cmp	r1, r2
   1e188:	beq	1e528 <__assert_fail@plt+0xce04>
   1e18c:	ldrb	r1, [r0, #20]
   1e190:	add	r0, r0, #24
   1e194:	cmp	r1, #0
   1e198:	bne	1e17c <__assert_fail@plt+0xca58>
   1e19c:	ldr	r0, [r7, #124]	; 0x7c
   1e1a0:	cmp	r0, #1
   1e1a4:	mov	r0, r8
   1e1a8:	blt	1e52c <__assert_fail@plt+0xce08>
   1e1ac:	ldr	r0, [sp, #36]	; 0x24
   1e1b0:	ldr	r1, [sp, #48]	; 0x30
   1e1b4:	mov	r3, #0
   1e1b8:	mov	ip, r4
   1e1bc:	str	r8, [sp, #16]
   1e1c0:	ldr	r0, [r0]
   1e1c4:	ldr	r2, [r0, r1, lsl #3]
   1e1c8:	str	r2, [sp, #32]
   1e1cc:	ldr	r1, [r7, #132]	; 0x84
   1e1d0:	str	r3, [sp, #28]
   1e1d4:	ldr	r4, [r1, r3, lsl #2]
   1e1d8:	ldr	r1, [r4, #4]
   1e1dc:	ldr	r0, [r0, r1, lsl #3]
   1e1e0:	cmp	r0, r2
   1e1e4:	bne	1e2f4 <__assert_fail@plt+0xcbd0>
   1e1e8:	ldr	r0, [r4, #16]
   1e1ec:	ldr	r2, [r4]
   1e1f0:	mov	r8, #0
   1e1f4:	str	r4, [sp, #44]	; 0x2c
   1e1f8:	cmp	r0, #1
   1e1fc:	blt	1e2c4 <__assert_fail@plt+0xcba0>
   1e200:	ldr	r6, [sp, #52]	; 0x34
   1e204:	mov	r5, r2
   1e208:	ldr	r1, [r4, #20]
   1e20c:	ldr	sl, [r1, r8, lsl #2]
   1e210:	ldr	r1, [sl, #4]
   1e214:	sub	r9, r1, r5
   1e218:	str	r1, [fp, #-48]	; 0xffffffd0
   1e21c:	cmp	r9, #1
   1e220:	blt	1e258 <__assert_fail@plt+0xcb34>
   1e224:	ldr	r2, [r7, #28]
   1e228:	add	r1, r9, r6
   1e22c:	cmp	r1, r2
   1e230:	bgt	1e2a0 <__assert_fail@plt+0xcb7c>
   1e234:	add	r0, ip, r6
   1e238:	add	r1, ip, r5
   1e23c:	mov	r2, r9
   1e240:	mov	r4, ip
   1e244:	bl	115bc <bcmp@plt>
   1e248:	mov	ip, r4
   1e24c:	ldr	r4, [sp, #44]	; 0x2c
   1e250:	cmp	r0, #0
   1e254:	bne	1e2cc <__assert_fail@plt+0xcba8>
   1e258:	ldr	r0, [sp, #52]	; 0x34
   1e25c:	ldr	r3, [sp, #48]	; 0x30
   1e260:	mov	r1, r4
   1e264:	mov	r2, sl
   1e268:	str	r0, [sp]
   1e26c:	mov	r0, r7
   1e270:	bl	1ece4 <__assert_fail@plt+0xd5c0>
   1e274:	cmp	r0, #1
   1e278:	bhi	1e764 <__assert_fail@plt+0xd040>
   1e27c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e280:	ldr	r0, [r4, #16]
   1e284:	ldr	ip, [r7, #4]
   1e288:	add	r8, r8, #1
   1e28c:	add	r6, r9, r6
   1e290:	cmp	r8, r0
   1e294:	mov	r5, r2
   1e298:	blt	1e208 <__assert_fail@plt+0xcae4>
   1e29c:	b	1e2d4 <__assert_fail@plt+0xcbb0>
   1e2a0:	ldr	r2, [r7, #48]	; 0x30
   1e2a4:	cmp	r1, r2
   1e2a8:	bgt	1e2d0 <__assert_fail@plt+0xcbac>
   1e2ac:	mov	r0, r7
   1e2b0:	bl	1ec50 <__assert_fail@plt+0xd52c>
   1e2b4:	cmp	r0, #0
   1e2b8:	bne	1e764 <__assert_fail@plt+0xd040>
   1e2bc:	ldr	ip, [r7, #4]
   1e2c0:	b	1e234 <__assert_fail@plt+0xcb10>
   1e2c4:	ldr	r6, [sp, #52]	; 0x34
   1e2c8:	b	1e2d4 <__assert_fail@plt+0xcbb0>
   1e2cc:	ldr	r0, [r4, #16]
   1e2d0:	mov	r2, r5
   1e2d4:	cmp	r8, r0
   1e2d8:	blt	1e2f0 <__assert_fail@plt+0xcbcc>
   1e2dc:	ldr	r0, [sp, #52]	; 0x34
   1e2e0:	cmp	r8, #0
   1e2e4:	addne	r2, r2, #1
   1e2e8:	cmp	r2, r0
   1e2ec:	ble	1e318 <__assert_fail@plt+0xcbf4>
   1e2f0:	ldr	r8, [sp, #16]
   1e2f4:	ldr	r3, [sp, #28]
   1e2f8:	ldr	r0, [r7, #124]	; 0x7c
   1e2fc:	add	r3, r3, #1
   1e300:	cmp	r3, r0
   1e304:	bge	1e520 <__assert_fail@plt+0xcdfc>
   1e308:	ldr	r0, [sp, #36]	; 0x24
   1e30c:	ldr	r2, [sp, #32]
   1e310:	ldr	r0, [r0]
   1e314:	b	1e1cc <__assert_fail@plt+0xcaa8>
   1e318:	ldr	r8, [sp, #16]
   1e31c:	ldr	r0, [r4]
   1e320:	mov	sl, r2
   1e324:	cmp	r2, r0
   1e328:	ble	1e354 <__assert_fail@plt+0xcc30>
   1e32c:	ldr	r0, [r7, #28]
   1e330:	cmp	r6, r0
   1e334:	bge	1e4c0 <__assert_fail@plt+0xcd9c>
   1e338:	add	r5, r6, #1
   1e33c:	add	r1, sl, ip
   1e340:	ldrb	r0, [ip, r6]
   1e344:	ldrb	r1, [r1, #-1]
   1e348:	cmp	r0, r1
   1e34c:	beq	1e358 <__assert_fail@plt+0xcc34>
   1e350:	b	1e2f4 <__assert_fail@plt+0xcbd0>
   1e354:	mov	r5, r6
   1e358:	ldr	r0, [r7, #100]	; 0x64
   1e35c:	mov	r6, r5
   1e360:	ldr	r2, [r0, sl, lsl #2]
   1e364:	cmp	r2, #0
   1e368:	beq	1e3b4 <__assert_fail@plt+0xcc90>
   1e36c:	ldr	r0, [r2, #8]
   1e370:	cmp	r0, #1
   1e374:	blt	1e3b4 <__assert_fail@plt+0xcc90>
   1e378:	ldr	r1, [sp, #36]	; 0x24
   1e37c:	ldr	r2, [r2, #12]
   1e380:	ldr	r7, [sp, #32]
   1e384:	ldr	r1, [r1]
   1e388:	ldr	r5, [r2]
   1e38c:	add	r3, r1, r5, lsl #3
   1e390:	ldrb	r3, [r3, #4]
   1e394:	cmp	r3, #9
   1e398:	bne	1e3a8 <__assert_fail@plt+0xcc84>
   1e39c:	ldr	r3, [r1, r5, lsl #3]
   1e3a0:	cmp	r3, r7
   1e3a4:	beq	1e3cc <__assert_fail@plt+0xcca8>
   1e3a8:	add	r2, r2, #4
   1e3ac:	subs	r0, r0, #1
   1e3b0:	bne	1e388 <__assert_fail@plt+0xcc64>
   1e3b4:	ldr	r0, [sp, #52]	; 0x34
   1e3b8:	ldr	r7, [sp, #40]	; 0x28
   1e3bc:	add	r2, sl, #1
   1e3c0:	cmp	sl, r0
   1e3c4:	blt	1e31c <__assert_fail@plt+0xcbf8>
   1e3c8:	b	1e2f4 <__assert_fail@plt+0xcbd0>
   1e3cc:	cmn	r5, #1
   1e3d0:	beq	1e3b4 <__assert_fail@plt+0xcc90>
   1e3d4:	ldr	r1, [r4, #8]
   1e3d8:	mov	r9, r6
   1e3dc:	mov	r6, ip
   1e3e0:	cmp	r1, #0
   1e3e4:	bne	1e414 <__assert_fail@plt+0xccf0>
   1e3e8:	ldr	r0, [r4]
   1e3ec:	mov	r7, #12
   1e3f0:	sub	r0, sl, r0
   1e3f4:	add	r1, r0, #1
   1e3f8:	mov	r0, #12
   1e3fc:	bl	22844 <__assert_fail@plt+0x11120>
   1e400:	ldr	r4, [sp, #44]	; 0x2c
   1e404:	mov	r1, r0
   1e408:	cmp	r0, #0
   1e40c:	str	r0, [r4, #8]
   1e410:	beq	1e768 <__assert_fail@plt+0xd044>
   1e414:	mov	r0, #9
   1e418:	ldr	r3, [r4]
   1e41c:	ldr	r2, [r4, #4]
   1e420:	stm	sp, {r5, sl}
   1e424:	str	r0, [sp, #8]
   1e428:	ldr	r0, [sp, #40]	; 0x28
   1e42c:	bl	1ee34 <__assert_fail@plt+0xd710>
   1e430:	ldr	r4, [sp, #44]	; 0x2c
   1e434:	mov	ip, r6
   1e438:	cmp	r0, #1
   1e43c:	mov	r6, r9
   1e440:	beq	1e3b4 <__assert_fail@plt+0xcc90>
   1e444:	cmp	r0, #0
   1e448:	bne	1e764 <__assert_fail@plt+0xd040>
   1e44c:	ldr	r1, [r4, #12]
   1e450:	ldr	r0, [r4, #16]
   1e454:	ldr	r7, [sp, #40]	; 0x28
   1e458:	cmp	r0, r1
   1e45c:	beq	1e4f8 <__assert_fail@plt+0xcdd4>
   1e460:	mov	r0, #1
   1e464:	mov	r1, #20
   1e468:	bl	22844 <__assert_fail@plt+0x11120>
   1e46c:	cmp	r0, #0
   1e470:	beq	1e78c <__assert_fail@plt+0xd068>
   1e474:	ldr	r1, [sp, #44]	; 0x2c
   1e478:	mov	r2, r0
   1e47c:	ldr	r0, [r1, #16]
   1e480:	ldr	r3, [r1, #20]
   1e484:	str	r2, [r3, r0, lsl #2]
   1e488:	add	r0, r0, #1
   1e48c:	stm	r2, {r5, sl}
   1e490:	ldr	r3, [sp, #48]	; 0x30
   1e494:	str	r0, [r1, #16]
   1e498:	ldr	r0, [sp, #52]	; 0x34
   1e49c:	str	r0, [sp]
   1e4a0:	mov	r0, r7
   1e4a4:	bl	1ece4 <__assert_fail@plt+0xd5c0>
   1e4a8:	cmp	r0, #1
   1e4ac:	bhi	1e764 <__assert_fail@plt+0xd040>
   1e4b0:	ldr	ip, [r7, #4]
   1e4b4:	ldr	r4, [sp, #44]	; 0x2c
   1e4b8:	mov	r6, r9
   1e4bc:	b	1e3b4 <__assert_fail@plt+0xcc90>
   1e4c0:	ldr	r0, [r7, #48]	; 0x30
   1e4c4:	cmp	r6, r0
   1e4c8:	bge	1e2f4 <__assert_fail@plt+0xcbd0>
   1e4cc:	add	r5, r6, #1
   1e4d0:	mov	r0, r7
   1e4d4:	mov	r9, r6
   1e4d8:	mov	r1, r5
   1e4dc:	bl	1e794 <__assert_fail@plt+0xd070>
   1e4e0:	cmp	r0, #0
   1e4e4:	bne	1e764 <__assert_fail@plt+0xd040>
   1e4e8:	ldr	ip, [r7, #4]
   1e4ec:	ldr	r4, [sp, #44]	; 0x2c
   1e4f0:	mov	r6, r9
   1e4f4:	b	1e33c <__assert_fail@plt+0xcc18>
   1e4f8:	mov	r1, #1
   1e4fc:	orr	r6, r1, r0, lsl #1
   1e500:	ldr	r0, [r4, #20]
   1e504:	lsl	r1, r6, #2
   1e508:	bl	228c8 <__assert_fail@plt+0x111a4>
   1e50c:	cmp	r0, #0
   1e510:	beq	1e78c <__assert_fail@plt+0xd068>
   1e514:	str	r6, [r4, #12]
   1e518:	str	r0, [r4, #20]
   1e51c:	b	1e460 <__assert_fail@plt+0xcd3c>
   1e520:	ldr	r0, [r7, #108]	; 0x6c
   1e524:	b	1e52c <__assert_fail@plt+0xce08>
   1e528:	mov	r0, r8
   1e52c:	mov	r1, #0
   1e530:	cmp	r8, r0
   1e534:	str	r1, [fp, #-32]	; 0xffffffe0
   1e538:	bge	1e738 <__assert_fail@plt+0xd014>
   1e53c:	add	r0, r8, r8, lsl #1
   1e540:	lsl	r4, r0, #3
   1e544:	ldr	r0, [r7, #116]	; 0x74
   1e548:	ldr	r2, [sp, #48]	; 0x30
   1e54c:	ldr	r1, [r0, r4]
   1e550:	cmp	r1, r2
   1e554:	bne	1e720 <__assert_fail@plt+0xcffc>
   1e558:	add	r0, r0, r4
   1e55c:	ldr	r2, [sp, #52]	; 0x34
   1e560:	ldr	r1, [r0, #4]
   1e564:	cmp	r1, r2
   1e568:	bne	1e720 <__assert_fail@plt+0xcffc>
   1e56c:	ldr	r2, [r0, #8]
   1e570:	ldr	r3, [r0, #12]
   1e574:	ldr	r0, [sp, #24]
   1e578:	mov	r9, r8
   1e57c:	ldr	r6, [r0, #24]
   1e580:	cmp	r3, r2
   1e584:	bne	1e5a0 <__assert_fail@plt+0xce7c>
   1e588:	ldr	r1, [sp, #48]	; 0x30
   1e58c:	ldr	r0, [r0, #20]
   1e590:	add	r1, r1, r1, lsl #1
   1e594:	add	r0, r0, r1, lsl #2
   1e598:	ldr	r0, [r0, #8]
   1e59c:	b	1e5ac <__assert_fail@plt+0xce88>
   1e5a0:	ldr	r0, [r0, #12]
   1e5a4:	ldr	r1, [sp, #48]	; 0x30
   1e5a8:	add	r0, r0, r1, lsl #2
   1e5ac:	ldr	r0, [r0]
   1e5b0:	ldr	r8, [sp, #52]	; 0x34
   1e5b4:	ldr	r5, [sp, #40]	; 0x28
   1e5b8:	str	r2, [fp, #-48]	; 0xffffffd0
   1e5bc:	str	r3, [sp, #44]	; 0x2c
   1e5c0:	add	r7, r0, r0, lsl #1
   1e5c4:	add	r0, r3, r8
   1e5c8:	sub	sl, r0, r2
   1e5cc:	ldr	r2, [r5, #88]	; 0x58
   1e5d0:	mov	r0, r5
   1e5d4:	sub	r1, sl, #1
   1e5d8:	bl	1deb4 <__assert_fail@plt+0xc790>
   1e5dc:	mov	r3, r0
   1e5e0:	ldr	r0, [r5, #100]	; 0x64
   1e5e4:	ldr	r1, [r0, r8, lsl #2]
   1e5e8:	ldr	r2, [r0, sl, lsl #2]
   1e5ec:	cmp	r1, #0
   1e5f0:	beq	1e5fc <__assert_fail@plt+0xced8>
   1e5f4:	ldr	r0, [r1, #8]
   1e5f8:	b	1e600 <__assert_fail@plt+0xcedc>
   1e5fc:	mov	r0, #0
   1e600:	add	r7, r6, r7, lsl #2
   1e604:	str	r0, [sp, #36]	; 0x24
   1e608:	sub	r0, fp, #44	; 0x2c
   1e60c:	cmp	r2, #0
   1e610:	mov	r8, r9
   1e614:	beq	1e680 <__assert_fail@plt+0xcf5c>
   1e618:	ldr	r1, [r2, #40]	; 0x28
   1e61c:	mov	r2, r7
   1e620:	mov	r6, r3
   1e624:	mov	r5, r0
   1e628:	bl	1e9c0 <__assert_fail@plt+0xd29c>
   1e62c:	cmp	r0, #0
   1e630:	str	r0, [fp, #-32]	; 0xffffffe0
   1e634:	bne	1e774 <__assert_fail@plt+0xd050>
   1e638:	ldr	r1, [sp, #24]
   1e63c:	sub	r0, fp, #32
   1e640:	mov	r2, r5
   1e644:	mov	r3, r6
   1e648:	bl	1d23c <__assert_fail@plt+0xbb18>
   1e64c:	ldr	r5, [sp, #40]	; 0x28
   1e650:	ldr	r1, [r5, #100]	; 0x64
   1e654:	str	r0, [r1, sl, lsl #2]
   1e658:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e65c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1e660:	ldr	r3, [r5, #100]	; 0x64
   1e664:	ldr	r1, [r3, sl, lsl #2]
   1e668:	cmp	r1, #0
   1e66c:	bne	1e6c0 <__assert_fail@plt+0xcf9c>
   1e670:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e674:	cmp	r0, #0
   1e678:	beq	1e6c0 <__assert_fail@plt+0xcf9c>
   1e67c:	b	1e75c <__assert_fail@plt+0xd038>
   1e680:	ldr	r1, [sp, #24]
   1e684:	sub	r0, fp, #32
   1e688:	mov	r2, r7
   1e68c:	bl	1d23c <__assert_fail@plt+0xbb18>
   1e690:	ldr	r1, [r5, #100]	; 0x64
   1e694:	str	r0, [r1, sl, lsl #2]
   1e698:	ldr	r3, [r5, #100]	; 0x64
   1e69c:	ldr	r1, [r3, sl, lsl #2]
   1e6a0:	cmp	r1, #0
   1e6a4:	bne	1e6c0 <__assert_fail@plt+0xcf9c>
   1e6a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e6ac:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e6b0:	ldr	r2, [sp, #44]	; 0x2c
   1e6b4:	cmp	r0, #0
   1e6b8:	beq	1e6c8 <__assert_fail@plt+0xcfa4>
   1e6bc:	b	1e75c <__assert_fail@plt+0xd038>
   1e6c0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e6c4:	ldr	r2, [sp, #44]	; 0x2c
   1e6c8:	cmp	r2, r1
   1e6cc:	bne	1e720 <__assert_fail@plt+0xcffc>
   1e6d0:	ldr	r1, [sp, #52]	; 0x34
   1e6d4:	ldr	r0, [r3, r1, lsl #2]
   1e6d8:	ldr	r1, [sp, #36]	; 0x24
   1e6dc:	ldr	r0, [r0, #8]
   1e6e0:	cmp	r0, r1
   1e6e4:	ble	1e720 <__assert_fail@plt+0xcffc>
   1e6e8:	ldr	r5, [sp, #40]	; 0x28
   1e6ec:	ldr	r2, [sp, #52]	; 0x34
   1e6f0:	mov	r1, r7
   1e6f4:	mov	r0, r5
   1e6f8:	bl	1df90 <__assert_fail@plt+0xc86c>
   1e6fc:	cmp	r0, #0
   1e700:	str	r0, [fp, #-32]	; 0xffffffe0
   1e704:	bne	1e75c <__assert_fail@plt+0xd038>
   1e708:	mov	r0, r5
   1e70c:	mov	r1, r7
   1e710:	bl	1e088 <__assert_fail@plt+0xc964>
   1e714:	cmp	r0, #0
   1e718:	str	r0, [fp, #-32]	; 0xffffffe0
   1e71c:	bne	1e75c <__assert_fail@plt+0xd038>
   1e720:	ldr	r7, [sp, #40]	; 0x28
   1e724:	add	r8, r8, #1
   1e728:	add	r4, r4, #24
   1e72c:	ldr	r0, [r7, #108]	; 0x6c
   1e730:	cmp	r8, r0
   1e734:	blt	1e544 <__assert_fail@plt+0xce20>
   1e738:	ldr	r1, [sp, #12]
   1e73c:	ldr	r3, [sp, #20]
   1e740:	ldr	r2, [sp, #24]
   1e744:	ldr	r0, [r1, #4]
   1e748:	add	r3, r3, #1
   1e74c:	cmp	r3, r0
   1e750:	blt	1e0c0 <__assert_fail@plt+0xc99c>
   1e754:	mov	r0, #0
   1e758:	str	r0, [fp, #-32]	; 0xffffffe0
   1e75c:	sub	sp, fp, #28
   1e760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e764:	mov	r7, r0
   1e768:	str	r7, [fp, #-32]	; 0xffffffe0
   1e76c:	mov	r0, r7
   1e770:	b	1e75c <__assert_fail@plt+0xd038>
   1e774:	mov	r1, r0
   1e778:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e77c:	mov	r4, r1
   1e780:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1e784:	mov	r0, r4
   1e788:	b	1e75c <__assert_fail@plt+0xd038>
   1e78c:	mov	r7, #12
   1e790:	b	1e768 <__assert_fail@plt+0xd044>
   1e794:	push	{r4, r5, fp, lr}
   1e798:	add	fp, sp, #8
   1e79c:	mov	r4, r0
   1e7a0:	ldr	r0, [r0, #36]	; 0x24
   1e7a4:	mov	r5, #12
   1e7a8:	cmn	r0, #-536870910	; 0xe0000002
   1e7ac:	bhi	1e864 <__assert_fail@plt+0xd140>
   1e7b0:	ldr	r2, [r4, #48]	; 0x30
   1e7b4:	cmp	r2, r0, lsl #1
   1e7b8:	lslge	r2, r0, #1
   1e7bc:	mov	r0, r4
   1e7c0:	cmp	r2, r1
   1e7c4:	movle	r2, r1
   1e7c8:	mov	r1, r2
   1e7cc:	bl	18788 <__assert_fail@plt+0x7064>
   1e7d0:	cmp	r0, #0
   1e7d4:	bne	1e828 <__assert_fail@plt+0xd104>
   1e7d8:	ldr	r0, [r4, #100]	; 0x64
   1e7dc:	cmp	r0, #0
   1e7e0:	beq	1e800 <__assert_fail@plt+0xd0dc>
   1e7e4:	ldr	r1, [r4, #36]	; 0x24
   1e7e8:	mov	r2, #4
   1e7ec:	add	r1, r2, r1, lsl #2
   1e7f0:	bl	228c8 <__assert_fail@plt+0x111a4>
   1e7f4:	cmp	r0, #0
   1e7f8:	beq	1e864 <__assert_fail@plt+0xd140>
   1e7fc:	str	r0, [r4, #100]	; 0x64
   1e800:	ldrb	r1, [r4, #72]	; 0x48
   1e804:	ldr	r0, [r4, #80]	; 0x50
   1e808:	cmp	r1, #0
   1e80c:	beq	1e830 <__assert_fail@plt+0xd10c>
   1e810:	cmp	r0, #2
   1e814:	blt	1e844 <__assert_fail@plt+0xd120>
   1e818:	mov	r0, r4
   1e81c:	bl	18828 <__assert_fail@plt+0x7104>
   1e820:	cmp	r0, #0
   1e824:	beq	1e860 <__assert_fail@plt+0xd13c>
   1e828:	mov	r5, r0
   1e82c:	b	1e864 <__assert_fail@plt+0xd140>
   1e830:	cmp	r0, #2
   1e834:	blt	1e850 <__assert_fail@plt+0xd12c>
   1e838:	mov	r0, r4
   1e83c:	bl	18e64 <__assert_fail@plt+0x7740>
   1e840:	b	1e860 <__assert_fail@plt+0xd13c>
   1e844:	mov	r0, r4
   1e848:	bl	18df8 <__assert_fail@plt+0x76d4>
   1e84c:	b	1e860 <__assert_fail@plt+0xd13c>
   1e850:	ldr	r0, [r4, #64]	; 0x40
   1e854:	cmp	r0, #0
   1e858:	movne	r0, r4
   1e85c:	blne	19050 <__assert_fail@plt+0x792c>
   1e860:	mov	r5, #0
   1e864:	mov	r0, r5
   1e868:	pop	{r4, r5, fp, pc}
   1e86c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e870:	add	fp, sp, #24
   1e874:	sub	sp, sp, #16
   1e878:	mov	r8, r0
   1e87c:	mov	r4, r1
   1e880:	ldr	r5, [r1, #40]	; 0x28
   1e884:	ldr	r7, [r1, #84]	; 0x54
   1e888:	ldr	r0, [r1, #100]	; 0x64
   1e88c:	ldr	r1, [r1, #104]	; 0x68
   1e890:	mov	r6, r2
   1e894:	cmp	r5, r1
   1e898:	ble	1e8a8 <__assert_fail@plt+0xd184>
   1e89c:	str	r6, [r0, r5, lsl #2]
   1e8a0:	str	r5, [r4, #104]	; 0x68
   1e8a4:	b	1e94c <__assert_fail@plt+0xd228>
   1e8a8:	ldr	r1, [r0, r5, lsl #2]
   1e8ac:	cmp	r1, #0
   1e8b0:	beq	1e8ec <__assert_fail@plt+0xd1c8>
   1e8b4:	ldr	r2, [r1, #40]	; 0x28
   1e8b8:	cmp	r6, #0
   1e8bc:	beq	1e8f4 <__assert_fail@plt+0xd1d0>
   1e8c0:	ldr	r6, [r6, #40]	; 0x28
   1e8c4:	mov	r0, sp
   1e8c8:	mov	r1, r6
   1e8cc:	bl	1e9c0 <__assert_fail@plt+0xd29c>
   1e8d0:	cmp	r0, #0
   1e8d4:	str	r0, [r8]
   1e8d8:	bne	1e9b8 <__assert_fail@plt+0xd294>
   1e8dc:	ldr	r0, [r4, #40]	; 0x28
   1e8e0:	clz	r1, r6
   1e8e4:	lsr	r9, r1, #5
   1e8e8:	b	1e90c <__assert_fail@plt+0xd1e8>
   1e8ec:	str	r6, [r0, r5, lsl #2]
   1e8f0:	b	1e94c <__assert_fail@plt+0xd228>
   1e8f4:	vldr	d16, [r2]
   1e8f8:	ldr	r0, [r2, #8]
   1e8fc:	mov	r9, #1
   1e900:	str	r0, [sp, #8]
   1e904:	mov	r0, r5
   1e908:	vstr	d16, [sp]
   1e90c:	ldr	r2, [r4, #88]	; 0x58
   1e910:	sub	r1, r0, #1
   1e914:	mov	r0, r4
   1e918:	bl	1deb4 <__assert_fail@plt+0xc790>
   1e91c:	mov	r3, r0
   1e920:	mov	r2, sp
   1e924:	mov	r0, r8
   1e928:	mov	r1, r7
   1e92c:	bl	1d23c <__assert_fail@plt+0xbb18>
   1e930:	mov	r6, r0
   1e934:	ldr	r0, [r4, #100]	; 0x64
   1e938:	cmp	r9, #0
   1e93c:	str	r6, [r0, r5, lsl #2]
   1e940:	bne	1e94c <__assert_fail@plt+0xd228>
   1e944:	ldr	r0, [sp, #8]
   1e948:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1e94c:	cmp	r6, #0
   1e950:	ldrne	r0, [r7, #76]	; 0x4c
   1e954:	cmpne	r0, #0
   1e958:	bne	1e968 <__assert_fail@plt+0xd244>
   1e95c:	mov	r0, r6
   1e960:	sub	sp, fp, #24
   1e964:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e968:	add	r7, r6, #4
   1e96c:	mov	r0, r4
   1e970:	mov	r2, r5
   1e974:	mov	r1, r7
   1e978:	bl	1df90 <__assert_fail@plt+0xc86c>
   1e97c:	cmp	r0, #0
   1e980:	str	r0, [r8]
   1e984:	bne	1e9b8 <__assert_fail@plt+0xd294>
   1e988:	ldrb	r0, [r6, #52]	; 0x34
   1e98c:	tst	r0, #64	; 0x40
   1e990:	beq	1e95c <__assert_fail@plt+0xd238>
   1e994:	mov	r0, r4
   1e998:	mov	r1, r7
   1e99c:	bl	1e088 <__assert_fail@plt+0xc964>
   1e9a0:	str	r0, [r8]
   1e9a4:	cmp	r0, #0
   1e9a8:	mov	r6, #0
   1e9ac:	ldreq	r0, [r4, #100]	; 0x64
   1e9b0:	ldreq	r6, [r0, r5, lsl #2]
   1e9b4:	b	1e95c <__assert_fail@plt+0xd238>
   1e9b8:	mov	r6, #0
   1e9bc:	b	1e95c <__assert_fail@plt+0xd238>
   1e9c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9c4:	add	fp, sp, #28
   1e9c8:	sub	sp, sp, #20
   1e9cc:	mov	r8, r2
   1e9d0:	cmp	r1, #0
   1e9d4:	str	r0, [sp, #16]
   1e9d8:	beq	1eb14 <__assert_fail@plt+0xd3f0>
   1e9dc:	ldr	r0, [r1, #4]
   1e9e0:	mov	r6, r1
   1e9e4:	cmp	r8, #0
   1e9e8:	beq	1eb00 <__assert_fail@plt+0xd3dc>
   1e9ec:	cmp	r0, #1
   1e9f0:	blt	1eb00 <__assert_fail@plt+0xd3dc>
   1e9f4:	ldr	r1, [r8, #4]
   1e9f8:	cmp	r1, #1
   1e9fc:	blt	1eb00 <__assert_fail@plt+0xd3dc>
   1ea00:	ldr	r4, [sp, #16]
   1ea04:	add	r0, r1, r0
   1ea08:	str	r0, [r4]
   1ea0c:	lsl	r0, r0, #2
   1ea10:	bl	22898 <__assert_fail@plt+0x11174>
   1ea14:	cmp	r0, #0
   1ea18:	str	r0, [r4, #8]
   1ea1c:	beq	1ebc0 <__assert_fail@plt+0xd49c>
   1ea20:	ldr	r9, [r8, #4]
   1ea24:	ldr	lr, [r6, #4]
   1ea28:	mov	r7, #0
   1ea2c:	mov	r1, #0
   1ea30:	cmp	r9, #0
   1ea34:	movwgt	r1, #1
   1ea38:	cmp	lr, #1
   1ea3c:	blt	1eb54 <__assert_fail@plt+0xd430>
   1ea40:	mov	r2, #0
   1ea44:	mov	ip, #0
   1ea48:	str	r2, [sp, #8]
   1ea4c:	mov	r2, #0
   1ea50:	str	r2, [sp, #12]
   1ea54:	mov	r2, #0
   1ea58:	ldr	r4, [sp, #12]
   1ea5c:	mov	r7, ip
   1ea60:	tst	r1, #1
   1ea64:	beq	1eb84 <__assert_fail@plt+0xd460>
   1ea68:	ldr	r1, [r8, #8]
   1ea6c:	ldr	r3, [r1, r7, lsl #2]
   1ea70:	ldr	r1, [r6, #8]
   1ea74:	ldr	sl, [r1, r2, lsl #2]
   1ea78:	cmp	sl, r3
   1ea7c:	ble	1eaa4 <__assert_fail@plt+0xd380>
   1ea80:	add	r7, r7, #1
   1ea84:	str	r3, [r0, r4, lsl #2]
   1ea88:	mov	r1, #0
   1ea8c:	add	r4, r4, #1
   1ea90:	cmp	r9, r7
   1ea94:	movwgt	r1, #1
   1ea98:	cmp	lr, r2
   1ea9c:	bgt	1ea60 <__assert_fail@plt+0xd33c>
   1eaa0:	b	1eb58 <__assert_fail@plt+0xd434>
   1eaa4:	add	r1, r7, #1
   1eaa8:	str	sl, [r0, r4, lsl #2]
   1eaac:	mov	ip, r7
   1eab0:	add	r2, r2, #1
   1eab4:	str	r1, [sp, #4]
   1eab8:	ldr	r9, [r8, #4]
   1eabc:	ldr	lr, [r6, #4]
   1eac0:	moveq	ip, r1
   1eac4:	mov	r1, #0
   1eac8:	ldr	r5, [sp, #8]
   1eacc:	cmp	r9, ip
   1ead0:	sub	r5, r5, #1
   1ead4:	movwgt	r1, #1
   1ead8:	cmp	lr, r2
   1eadc:	str	r5, [sp, #8]
   1eae0:	add	r5, r4, #1
   1eae4:	str	r5, [sp, #12]
   1eae8:	bgt	1ea58 <__assert_fail@plt+0xd334>
   1eaec:	ldr	r2, [sp, #4]
   1eaf0:	cmp	sl, r3
   1eaf4:	add	r4, r4, #1
   1eaf8:	moveq	r7, r2
   1eafc:	b	1eb58 <__assert_fail@plt+0xd434>
   1eb00:	cmp	r0, #1
   1eb04:	blt	1eb14 <__assert_fail@plt+0xd3f0>
   1eb08:	ldr	r0, [sp, #16]
   1eb0c:	mov	r1, r6
   1eb10:	b	1eb30 <__assert_fail@plt+0xd40c>
   1eb14:	cmp	r8, #0
   1eb18:	beq	1eb3c <__assert_fail@plt+0xd418>
   1eb1c:	ldr	r0, [r8, #4]
   1eb20:	cmp	r0, #1
   1eb24:	blt	1eb3c <__assert_fail@plt+0xd418>
   1eb28:	ldr	r0, [sp, #16]
   1eb2c:	mov	r1, r8
   1eb30:	sub	sp, fp, #28
   1eb34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb38:	b	1d158 <__assert_fail@plt+0xba34>
   1eb3c:	ldr	r1, [sp, #16]
   1eb40:	mov	r0, #0
   1eb44:	str	r0, [r1]
   1eb48:	str	r0, [r1, #4]
   1eb4c:	str	r0, [r1, #8]
   1eb50:	b	1ebb8 <__assert_fail@plt+0xd494>
   1eb54:	mov	r4, #0
   1eb58:	cmp	r1, #0
   1eb5c:	beq	1ebac <__assert_fail@plt+0xd488>
   1eb60:	ldr	r1, [r8, #8]
   1eb64:	sub	r2, r9, r7
   1eb68:	add	r0, r0, r4, lsl #2
   1eb6c:	lsl	r2, r2, #2
   1eb70:	add	r1, r1, r7, lsl #2
   1eb74:	bl	11460 <memcpy@plt>
   1eb78:	sub	r0, r4, r7
   1eb7c:	add	r4, r0, r9
   1eb80:	b	1ebac <__assert_fail@plt+0xd488>
   1eb84:	ldr	r1, [r6, #8]
   1eb88:	add	r0, r0, r4, lsl #2
   1eb8c:	add	r1, r1, r2, lsl #2
   1eb90:	sub	r2, lr, r2
   1eb94:	lsl	r2, r2, #2
   1eb98:	bl	11460 <memcpy@plt>
   1eb9c:	ldr	r0, [r6, #4]
   1eba0:	ldr	r1, [sp, #8]
   1eba4:	add	r0, r0, r1
   1eba8:	add	r4, r0, r4
   1ebac:	ldr	r0, [sp, #16]
   1ebb0:	str	r4, [r0, #4]
   1ebb4:	mov	r0, #0
   1ebb8:	sub	sp, fp, #28
   1ebbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebc0:	mov	r0, #12
   1ebc4:	b	1ebb8 <__assert_fail@plt+0xd494>
   1ebc8:	push	{r4, r5, r6, r7, fp, lr}
   1ebcc:	add	fp, sp, #16
   1ebd0:	ldr	lr, [r0, #108]	; 0x6c
   1ebd4:	mov	ip, r0
   1ebd8:	cmp	lr, #1
   1ebdc:	blt	1ec20 <__assert_fail@plt+0xd4fc>
   1ebe0:	ldr	r2, [ip, #116]	; 0x74
   1ebe4:	mov	r0, #0
   1ebe8:	mov	r3, #1
   1ebec:	mov	r4, lr
   1ebf0:	add	r5, r0, r4
   1ebf4:	add	r5, r5, r5, lsr #31
   1ebf8:	asr	r6, r5, #1
   1ebfc:	add	r7, r6, r6, lsl #1
   1ec00:	add	r7, r2, r7, lsl #3
   1ec04:	ldr	r7, [r7, #4]
   1ec08:	cmp	r7, r1
   1ec0c:	addlt	r0, r3, r5, asr #1
   1ec10:	movge	r4, r6
   1ec14:	cmp	r0, r4
   1ec18:	blt	1ebf0 <__assert_fail@plt+0xd4cc>
   1ec1c:	b	1ec24 <__assert_fail@plt+0xd500>
   1ec20:	mov	r0, #0
   1ec24:	cmp	r0, lr
   1ec28:	bge	1ec48 <__assert_fail@plt+0xd524>
   1ec2c:	ldr	r2, [ip, #116]	; 0x74
   1ec30:	add	r3, r0, r0, lsl #1
   1ec34:	add	r2, r2, r3, lsl #3
   1ec38:	ldr	r2, [r2, #4]
   1ec3c:	cmp	r2, r1
   1ec40:	mvnne	r0, #0
   1ec44:	pop	{r4, r5, r6, r7, fp, pc}
   1ec48:	mvn	r0, #0
   1ec4c:	pop	{r4, r5, r6, r7, fp, pc}
   1ec50:	push	{r4, r5, r6, r7, fp, lr}
   1ec54:	add	fp, sp, #16
   1ec58:	mov	r5, r0
   1ec5c:	ldr	r0, [r0, #36]	; 0x24
   1ec60:	mov	r4, r1
   1ec64:	ldr	r7, [r5, #104]	; 0x68
   1ec68:	cmp	r0, r1
   1ec6c:	bgt	1ec7c <__assert_fail@plt+0xd558>
   1ec70:	ldr	r1, [r5, #48]	; 0x30
   1ec74:	cmp	r0, r1
   1ec78:	blt	1ec94 <__assert_fail@plt+0xd570>
   1ec7c:	ldr	r0, [r5, #28]
   1ec80:	cmp	r0, r4
   1ec84:	bgt	1ecac <__assert_fail@plt+0xd588>
   1ec88:	ldr	r1, [r5, #48]	; 0x30
   1ec8c:	cmp	r0, r1
   1ec90:	bge	1ecac <__assert_fail@plt+0xd588>
   1ec94:	add	r1, r4, #1
   1ec98:	mov	r0, r5
   1ec9c:	bl	1e794 <__assert_fail@plt+0xd070>
   1eca0:	mov	r6, r0
   1eca4:	cmp	r0, #0
   1eca8:	bne	1ecdc <__assert_fail@plt+0xd5b8>
   1ecac:	mov	r6, #0
   1ecb0:	cmp	r7, r4
   1ecb4:	bge	1ecdc <__assert_fail@plt+0xd5b8>
   1ecb8:	sub	r0, r4, r7
   1ecbc:	mov	r1, #0
   1ecc0:	mov	r6, #0
   1ecc4:	lsl	r2, r0, #2
   1ecc8:	ldr	r0, [r5, #100]	; 0x64
   1eccc:	add	r0, r0, r7, lsl #2
   1ecd0:	add	r0, r0, #4
   1ecd4:	bl	1161c <memset@plt>
   1ecd8:	str	r4, [r5, #104]	; 0x68
   1ecdc:	mov	r0, r6
   1ece0:	pop	{r4, r5, r6, r7, fp, pc}
   1ece4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ece8:	add	fp, sp, #28
   1ecec:	sub	sp, sp, #12
   1ecf0:	mov	r6, r2
   1ecf4:	mov	r4, r0
   1ecf8:	mov	r0, #8
   1ecfc:	mov	r7, r3
   1ed00:	ldr	r2, [r2]
   1ed04:	mov	r8, r1
   1ed08:	ldr	r3, [r6, #4]
   1ed0c:	str	r0, [sp, #8]
   1ed10:	add	r1, r6, #8
   1ed14:	mov	r0, r4
   1ed18:	ldr	r5, [fp, #8]
   1ed1c:	str	r7, [sp]
   1ed20:	str	r5, [sp, #4]
   1ed24:	bl	1ee34 <__assert_fail@plt+0xd710>
   1ed28:	cmp	r0, #0
   1ed2c:	beq	1ed38 <__assert_fail@plt+0xd614>
   1ed30:	sub	sp, fp, #28
   1ed34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed38:	ldr	r0, [r4, #108]	; 0x6c
   1ed3c:	ldr	r1, [r4, #112]	; 0x70
   1ed40:	ldr	r9, [r6, #4]
   1ed44:	ldr	sl, [r8]
   1ed48:	cmp	r0, r1
   1ed4c:	blt	1ed9c <__assert_fail@plt+0xd678>
   1ed50:	ldr	r0, [r4, #116]	; 0x74
   1ed54:	add	r1, r1, r1, lsl #1
   1ed58:	lsl	r1, r1, #4
   1ed5c:	bl	228c8 <__assert_fail@plt+0x111a4>
   1ed60:	cmp	r0, #0
   1ed64:	beq	1ee24 <__assert_fail@plt+0xd700>
   1ed68:	str	r0, [r4, #116]	; 0x74
   1ed6c:	ldr	r1, [r4, #108]	; 0x6c
   1ed70:	ldr	r2, [r4, #112]	; 0x70
   1ed74:	add	r1, r1, r1, lsl #1
   1ed78:	add	r0, r0, r1, lsl #3
   1ed7c:	add	r1, r2, r2, lsl #1
   1ed80:	lsl	r2, r1, #3
   1ed84:	mov	r1, #0
   1ed88:	bl	1161c <memset@plt>
   1ed8c:	ldr	r1, [r4, #112]	; 0x70
   1ed90:	ldr	r0, [r4, #108]	; 0x6c
   1ed94:	lsl	r1, r1, #1
   1ed98:	str	r1, [r4, #112]	; 0x70
   1ed9c:	ldr	r1, [r4, #116]	; 0x74
   1eda0:	cmp	r0, #1
   1eda4:	blt	1edc4 <__assert_fail@plt+0xd6a0>
   1eda8:	sub	r2, r0, #1
   1edac:	add	r2, r2, r2, lsl #1
   1edb0:	add	r2, r1, r2, lsl #3
   1edb4:	ldr	r3, [r2, #4]
   1edb8:	cmp	r3, r5
   1edbc:	moveq	r3, #1
   1edc0:	strbeq	r3, [r2, #20]
   1edc4:	add	r2, r0, r0, lsl #1
   1edc8:	cmp	r9, sl
   1edcc:	mov	r3, #0
   1edd0:	mov	ip, #0
   1edd4:	add	r0, r0, #1
   1edd8:	mvneq	r3, #0
   1eddc:	str	r7, [r1, r2, lsl #3]!
   1ede0:	stmib	r1, {r5, sl}
   1ede4:	str	r9, [r1, #12]
   1ede8:	str	r3, [r1, #16]
   1edec:	str	r0, [r4, #108]	; 0x6c
   1edf0:	strb	ip, [r1, #20]
   1edf4:	sub	r0, r9, sl
   1edf8:	ldr	r1, [r4, #120]	; 0x78
   1edfc:	cmp	r1, r0
   1ee00:	strlt	r0, [r4, #120]	; 0x78
   1ee04:	ldr	r0, [r6, #4]
   1ee08:	ldr	r1, [r8]
   1ee0c:	add	r0, r0, r5
   1ee10:	sub	r1, r0, r1
   1ee14:	mov	r0, r4
   1ee18:	sub	sp, fp, #28
   1ee1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee20:	b	1ec50 <__assert_fail@plt+0xd52c>
   1ee24:	ldr	r0, [r4, #116]	; 0x74
   1ee28:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1ee2c:	mov	r0, #12
   1ee30:	b	1ed30 <__assert_fail@plt+0xd60c>
   1ee34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee38:	add	fp, sp, #28
   1ee3c:	sub	sp, sp, #84	; 0x54
   1ee40:	ldr	sl, [r0, #84]	; 0x54
   1ee44:	mov	r6, r3
   1ee48:	mov	r3, r1
   1ee4c:	mov	r1, #0
   1ee50:	ldr	r5, [fp, #12]
   1ee54:	mov	r8, r2
   1ee58:	str	r0, [sp, #36]	; 0x24
   1ee5c:	str	r1, [fp, #-52]	; 0xffffffcc
   1ee60:	ldr	r4, [r3, #4]
   1ee64:	ldr	r1, [sl]
   1ee68:	str	sl, [sp, #20]
   1ee6c:	ldr	r7, [r1, r2, lsl #3]
   1ee70:	ldr	r1, [r0, #120]	; 0x78
   1ee74:	add	r2, r1, r5
   1ee78:	cmp	r4, r2
   1ee7c:	str	r7, [sp, #24]
   1ee80:	ble	1f33c <__assert_fail@plt+0xdc18>
   1ee84:	ldr	r1, [r0, #40]	; 0x28
   1ee88:	ldr	r4, [r3]
   1ee8c:	ldr	r2, [r0, #88]	; 0x58
   1ee90:	ldr	r9, [r3, #8]
   1ee94:	str	r3, [sp, #16]
   1ee98:	str	r1, [sp, #12]
   1ee9c:	ldr	r1, [r0, #100]	; 0x64
   1eea0:	cmp	r4, #0
   1eea4:	str	r9, [r0, #100]	; 0x64
   1eea8:	moveq	r4, r6
   1eeac:	str	r4, [r0, #40]	; 0x28
   1eeb0:	str	r1, [sp, #8]
   1eeb4:	sub	r1, r4, #1
   1eeb8:	bl	1deb4 <__assert_fail@plt+0xc790>
   1eebc:	cmp	r4, r6
   1eec0:	bne	1ef88 <__assert_fail@plt+0xd864>
   1eec4:	str	r0, [sp, #44]	; 0x2c
   1eec8:	mov	r0, #1
   1eecc:	str	r0, [sp, #52]	; 0x34
   1eed0:	str	r0, [sp, #48]	; 0x30
   1eed4:	mov	r0, #4
   1eed8:	bl	22898 <__assert_fail@plt+0x11174>
   1eedc:	cmp	r0, #0
   1eee0:	str	r0, [sp, #56]	; 0x38
   1eee4:	beq	1f3b8 <__assert_fail@plt+0xdc94>
   1eee8:	ldr	r3, [fp, #16]
   1eeec:	str	r8, [r0]
   1eef0:	mov	r0, #0
   1eef4:	add	r1, sp, #48	; 0x30
   1eef8:	mov	r2, r7
   1eefc:	str	r0, [fp, #-52]	; 0xffffffcc
   1ef00:	mov	r0, sl
   1ef04:	bl	1f3d8 <__assert_fail@plt+0xdcb4>
   1ef08:	ldr	r8, [sp, #36]	; 0x24
   1ef0c:	cmp	r0, #0
   1ef10:	mov	r9, r5
   1ef14:	str	r0, [fp, #-52]	; 0xffffffcc
   1ef18:	bne	1f3a8 <__assert_fail@plt+0xdc84>
   1ef1c:	ldr	r0, [sp, #52]	; 0x34
   1ef20:	cmp	r0, #0
   1ef24:	beq	1ef50 <__assert_fail@plt+0xd82c>
   1ef28:	ldr	r0, [fp, #16]
   1ef2c:	ldr	r3, [sp, #24]
   1ef30:	add	r1, sp, #48	; 0x30
   1ef34:	mov	r2, r4
   1ef38:	str	r0, [sp]
   1ef3c:	mov	r0, r8
   1ef40:	bl	1f508 <__assert_fail@plt+0xdde4>
   1ef44:	cmp	r0, #0
   1ef48:	str	r0, [fp, #-52]	; 0xffffffcc
   1ef4c:	bne	1f3a8 <__assert_fail@plt+0xdc84>
   1ef50:	ldr	r3, [sp, #44]	; 0x2c
   1ef54:	sub	r0, fp, #52	; 0x34
   1ef58:	add	r2, sp, #48	; 0x30
   1ef5c:	mov	r1, sl
   1ef60:	bl	1d23c <__assert_fail@plt+0xbb18>
   1ef64:	mov	r6, r0
   1ef68:	cmp	r0, #0
   1ef6c:	bne	1ef7c <__assert_fail@plt+0xd858>
   1ef70:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ef74:	cmp	r0, #0
   1ef78:	bne	1f324 <__assert_fail@plt+0xdc00>
   1ef7c:	ldr	r0, [r8, #100]	; 0x64
   1ef80:	str	r6, [r0, r4, lsl #2]
   1ef84:	b	1f000 <__assert_fail@plt+0xd8dc>
   1ef88:	ldr	r6, [r9, r4, lsl #2]
   1ef8c:	cmp	r6, #0
   1ef90:	beq	1efbc <__assert_fail@plt+0xd898>
   1ef94:	ldrb	r1, [r6, #52]	; 0x34
   1ef98:	ldr	r8, [sp, #36]	; 0x24
   1ef9c:	mov	r9, r5
   1efa0:	tst	r1, #64	; 0x40
   1efa4:	bne	1efd8 <__assert_fail@plt+0xd8b4>
   1efa8:	mov	r0, #0
   1efac:	str	r0, [sp, #52]	; 0x34
   1efb0:	str	r0, [sp, #48]	; 0x30
   1efb4:	str	r0, [sp, #56]	; 0x38
   1efb8:	b	1f000 <__assert_fail@plt+0xd8dc>
   1efbc:	ldr	r8, [sp, #36]	; 0x24
   1efc0:	mov	r6, #0
   1efc4:	mov	r9, r5
   1efc8:	str	r6, [sp, #52]	; 0x34
   1efcc:	str	r6, [sp, #48]	; 0x30
   1efd0:	str	r6, [sp, #56]	; 0x38
   1efd4:	b	1f000 <__assert_fail@plt+0xd8dc>
   1efd8:	str	r0, [sp, #44]	; 0x2c
   1efdc:	add	r1, r6, #4
   1efe0:	add	r0, sp, #48	; 0x30
   1efe4:	bl	1d158 <__assert_fail@plt+0xba34>
   1efe8:	cmp	r0, #0
   1efec:	str	r0, [fp, #-52]	; 0xffffffcc
   1eff0:	bne	1f3d0 <__assert_fail@plt+0xdcac>
   1eff4:	ldrb	r0, [r6, #52]	; 0x34
   1eff8:	tst	r0, #64	; 0x40
   1effc:	bne	1ef1c <__assert_fail@plt+0xd7f8>
   1f000:	cmp	r4, r9
   1f004:	bge	1f2b8 <__assert_fail@plt+0xdb94>
   1f008:	str	r4, [sp, #44]	; 0x2c
   1f00c:	ldr	r4, [sp, #24]
   1f010:	add	r5, sp, #48	; 0x30
   1f014:	mov	r1, #0
   1f018:	ldr	r0, [r8, #120]	; 0x78
   1f01c:	cmp	r1, r0
   1f020:	bgt	1f2b4 <__assert_fail@plt+0xdb90>
   1f024:	mov	r0, #0
   1f028:	str	r1, [sp, #32]
   1f02c:	ldr	r1, [sp, #44]	; 0x2c
   1f030:	str	r0, [sp, #52]	; 0x34
   1f034:	ldr	r0, [r8, #100]	; 0x64
   1f038:	add	r7, r1, #1
   1f03c:	ldr	r0, [r0, r7, lsl #2]
   1f040:	cmp	r0, #0
   1f044:	beq	1f060 <__assert_fail@plt+0xd93c>
   1f048:	add	r1, r0, #4
   1f04c:	mov	r0, r5
   1f050:	bl	1cdb0 <__assert_fail@plt+0xb68c>
   1f054:	cmp	r0, #0
   1f058:	str	r0, [fp, #-52]	; 0xffffffcc
   1f05c:	bne	1f324 <__assert_fail@plt+0xdc00>
   1f060:	cmp	r6, #0
   1f064:	beq	1f1ec <__assert_fail@plt+0xdac8>
   1f068:	mov	r0, #0
   1f06c:	str	r7, [sp, #28]
   1f070:	ldr	r7, [r8, #84]	; 0x54
   1f074:	str	r0, [fp, #-32]	; 0xffffffe0
   1f078:	str	r0, [fp, #-44]	; 0xffffffd4
   1f07c:	str	r0, [fp, #-48]	; 0xffffffd0
   1f080:	str	r0, [fp, #-40]	; 0xffffffd8
   1f084:	ldr	r1, [r6, #20]
   1f088:	cmp	r1, #1
   1f08c:	blt	1f1d8 <__assert_fail@plt+0xdab4>
   1f090:	ldr	r4, [sp, #44]	; 0x2c
   1f094:	mov	r5, #0
   1f098:	str	r6, [sp, #40]	; 0x28
   1f09c:	ldr	r0, [r6, #24]
   1f0a0:	ldr	sl, [r0, r5, lsl #2]
   1f0a4:	ldr	r0, [r7]
   1f0a8:	add	r1, r0, sl, lsl #3
   1f0ac:	ldrb	r1, [r1, #6]
   1f0b0:	tst	r1, #16
   1f0b4:	bne	1f0d4 <__assert_fail@plt+0xd9b0>
   1f0b8:	add	r1, r0, sl, lsl #3
   1f0bc:	mov	r0, r8
   1f0c0:	mov	r2, r4
   1f0c4:	bl	1fdcc <__assert_fail@plt+0xe6a8>
   1f0c8:	cmp	r0, #0
   1f0cc:	bne	1f190 <__assert_fail@plt+0xda6c>
   1f0d0:	b	1f1a8 <__assert_fail@plt+0xda84>
   1f0d4:	mov	r0, r7
   1f0d8:	mov	r1, sl
   1f0dc:	mov	r2, r8
   1f0e0:	mov	r3, r4
   1f0e4:	bl	1fad4 <__assert_fail@plt+0xe3b0>
   1f0e8:	cmp	r0, #2
   1f0ec:	blt	1f188 <__assert_fail@plt+0xda64>
   1f0f0:	add	r4, r0, r4
   1f0f4:	ldr	r0, [r8, #100]	; 0x64
   1f0f8:	ldr	r1, [r7, #12]
   1f0fc:	sub	r8, fp, #48	; 0x30
   1f100:	ldr	r0, [r0, r4, lsl #2]
   1f104:	ldr	r6, [r1, sl, lsl #2]
   1f108:	mov	r1, #0
   1f10c:	str	r1, [fp, #-44]	; 0xffffffd4
   1f110:	cmp	r0, #0
   1f114:	beq	1f130 <__assert_fail@plt+0xda0c>
   1f118:	add	r1, r0, #4
   1f11c:	mov	r0, r8
   1f120:	bl	1cdb0 <__assert_fail@plt+0xb68c>
   1f124:	cmp	r0, #0
   1f128:	str	r0, [fp, #-32]	; 0xffffffe0
   1f12c:	bne	1f334 <__assert_fail@plt+0xdc10>
   1f130:	mov	r0, r8
   1f134:	mov	r1, r6
   1f138:	bl	1cfbc <__assert_fail@plt+0xb898>
   1f13c:	cmp	r0, #0
   1f140:	beq	1f314 <__assert_fail@plt+0xdbf0>
   1f144:	sub	r0, fp, #32
   1f148:	mov	r1, r7
   1f14c:	mov	r2, r8
   1f150:	bl	1f8dc <__assert_fail@plt+0xe1b8>
   1f154:	ldr	r8, [sp, #36]	; 0x24
   1f158:	ldr	r6, [sp, #40]	; 0x28
   1f15c:	ldr	r1, [r8, #100]	; 0x64
   1f160:	str	r0, [r1, r4, lsl #2]
   1f164:	ldr	r0, [r8, #100]	; 0x64
   1f168:	ldr	r0, [r0, r4, lsl #2]
   1f16c:	ldr	r4, [sp, #44]	; 0x2c
   1f170:	cmp	r0, #0
   1f174:	bne	1f190 <__assert_fail@plt+0xda6c>
   1f178:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1f17c:	cmp	r9, #0
   1f180:	beq	1f190 <__assert_fail@plt+0xda6c>
   1f184:	b	1f318 <__assert_fail@plt+0xdbf4>
   1f188:	cmp	r0, #0
   1f18c:	beq	1f1bc <__assert_fail@plt+0xda98>
   1f190:	ldr	r0, [r7, #12]
   1f194:	ldr	r1, [r0, sl, lsl #2]
   1f198:	add	r0, sp, #48	; 0x30
   1f19c:	bl	1cfbc <__assert_fail@plt+0xb898>
   1f1a0:	cmp	r0, #0
   1f1a4:	beq	1f314 <__assert_fail@plt+0xdbf0>
   1f1a8:	ldr	r0, [r6, #20]
   1f1ac:	add	r5, r5, #1
   1f1b0:	cmp	r5, r0
   1f1b4:	blt	1f09c <__assert_fail@plt+0xd978>
   1f1b8:	b	1f1c4 <__assert_fail@plt+0xdaa0>
   1f1bc:	ldr	r0, [r7]
   1f1c0:	b	1f0b8 <__assert_fail@plt+0xd994>
   1f1c4:	ldr	r5, [fp, #12]
   1f1c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f1cc:	ldr	sl, [sp, #20]
   1f1d0:	mov	r9, r5
   1f1d4:	add	r5, sp, #48	; 0x30
   1f1d8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f1dc:	ldr	r4, [sp, #24]
   1f1e0:	ldr	r7, [sp, #28]
   1f1e4:	mov	r0, #0
   1f1e8:	str	r0, [fp, #-52]	; 0xffffffcc
   1f1ec:	ldr	r0, [sp, #52]	; 0x34
   1f1f0:	cmp	r0, #0
   1f1f4:	beq	1f248 <__assert_fail@plt+0xdb24>
   1f1f8:	mov	r6, r7
   1f1fc:	ldr	r7, [fp, #16]
   1f200:	mov	r0, sl
   1f204:	mov	r1, r5
   1f208:	mov	r2, r4
   1f20c:	mov	r3, r7
   1f210:	bl	1f3d8 <__assert_fail@plt+0xdcb4>
   1f214:	cmp	r0, #0
   1f218:	str	r0, [fp, #-52]	; 0xffffffcc
   1f21c:	bne	1f324 <__assert_fail@plt+0xdc00>
   1f220:	mov	r0, r8
   1f224:	mov	r1, r5
   1f228:	mov	r2, r6
   1f22c:	mov	r3, r4
   1f230:	str	r7, [sp]
   1f234:	mov	r7, r6
   1f238:	bl	1f508 <__assert_fail@plt+0xdde4>
   1f23c:	cmp	r0, #0
   1f240:	str	r0, [fp, #-52]	; 0xffffffcc
   1f244:	bne	1f324 <__assert_fail@plt+0xdc00>
   1f248:	ldr	r2, [r8, #88]	; 0x58
   1f24c:	ldr	r1, [sp, #44]	; 0x2c
   1f250:	mov	r0, r8
   1f254:	bl	1deb4 <__assert_fail@plt+0xc790>
   1f258:	mov	r3, r0
   1f25c:	sub	r0, fp, #52	; 0x34
   1f260:	mov	r1, sl
   1f264:	mov	r2, r5
   1f268:	bl	1d23c <__assert_fail@plt+0xbb18>
   1f26c:	mov	r6, r0
   1f270:	cmp	r0, #0
   1f274:	bne	1f284 <__assert_fail@plt+0xdb60>
   1f278:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f27c:	cmp	r0, #0
   1f280:	bne	1f324 <__assert_fail@plt+0xdc00>
   1f284:	ldr	r0, [r8, #100]	; 0x64
   1f288:	ldr	r1, [sp, #32]
   1f28c:	cmp	r6, #0
   1f290:	str	r7, [sp, #44]	; 0x2c
   1f294:	str	r6, [r0, r7, lsl #2]
   1f298:	mov	r0, #0
   1f29c:	addeq	r0, r1, #1
   1f2a0:	cmp	r7, r9
   1f2a4:	mov	r1, r0
   1f2a8:	bne	1f018 <__assert_fail@plt+0xd8f4>
   1f2ac:	mov	r4, r9
   1f2b0:	b	1f2b8 <__assert_fail@plt+0xdb94>
   1f2b4:	ldr	r4, [sp, #44]	; 0x2c
   1f2b8:	ldr	r0, [sp, #56]	; 0x38
   1f2bc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f2c0:	ldr	r0, [r8, #100]	; 0x64
   1f2c4:	ldr	r1, [sp, #16]
   1f2c8:	ldr	r0, [r0, r9, lsl #2]
   1f2cc:	str	r4, [r1]
   1f2d0:	ldr	r1, [sp, #12]
   1f2d4:	str	r1, [r8, #40]	; 0x28
   1f2d8:	ldr	r1, [sp, #8]
   1f2dc:	cmp	r0, #0
   1f2e0:	str	r1, [r8, #100]	; 0x64
   1f2e4:	beq	1f304 <__assert_fail@plt+0xdbe0>
   1f2e8:	ldr	r1, [fp, #8]
   1f2ec:	add	r0, r0, #4
   1f2f0:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   1f2f4:	cmp	r0, #0
   1f2f8:	mov	r7, #0
   1f2fc:	moveq	r7, #1
   1f300:	b	1f308 <__assert_fail@plt+0xdbe4>
   1f304:	mov	r7, #1
   1f308:	mov	r0, r7
   1f30c:	sub	sp, fp, #28
   1f310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f314:	mov	r9, #12
   1f318:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f31c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f320:	str	r9, [fp, #-52]	; 0xffffffcc
   1f324:	ldr	r0, [sp, #56]	; 0x38
   1f328:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f32c:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1f330:	b	1f308 <__assert_fail@plt+0xdbe4>
   1f334:	mov	r9, r0
   1f338:	b	1f318 <__assert_fail@plt+0xdbf4>
   1f33c:	mvn	r1, #-2147483648	; 0x80000000
   1f340:	mov	r7, #12
   1f344:	sub	r1, r1, r4
   1f348:	cmp	r1, r2
   1f34c:	ble	1f308 <__assert_fail@plt+0xdbe4>
   1f350:	add	r9, r2, #1
   1f354:	add	r5, r9, r4
   1f358:	cmn	r5, #-1073741823	; 0xc0000001
   1f35c:	bhi	1f308 <__assert_fail@plt+0xdbe4>
   1f360:	ldr	r0, [r3, #8]
   1f364:	lsl	r1, r5, #2
   1f368:	mov	sl, r3
   1f36c:	bl	228c8 <__assert_fail@plt+0x111a4>
   1f370:	cmp	r0, #0
   1f374:	beq	1f308 <__assert_fail@plt+0xdbe4>
   1f378:	str	r5, [sl, #4]
   1f37c:	str	r0, [sl, #8]
   1f380:	add	r0, r0, r4, lsl #2
   1f384:	lsl	r2, r9, #2
   1f388:	mov	r1, #0
   1f38c:	bl	1161c <memset@plt>
   1f390:	mov	r3, sl
   1f394:	ldr	r0, [sp, #36]	; 0x24
   1f398:	ldr	r5, [fp, #12]
   1f39c:	ldr	sl, [sp, #20]
   1f3a0:	ldr	r7, [sp, #24]
   1f3a4:	b	1ee84 <__assert_fail@plt+0xd760>
   1f3a8:	mov	r7, r0
   1f3ac:	ldr	r0, [sp, #56]	; 0x38
   1f3b0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f3b4:	b	1f308 <__assert_fail@plt+0xdbe4>
   1f3b8:	mov	r0, #0
   1f3bc:	mov	r7, #12
   1f3c0:	str	r0, [sp, #48]	; 0x30
   1f3c4:	str	r0, [sp, #52]	; 0x34
   1f3c8:	str	r7, [fp, #-52]	; 0xffffffcc
   1f3cc:	b	1f308 <__assert_fail@plt+0xdbe4>
   1f3d0:	mov	r7, r0
   1f3d4:	b	1f308 <__assert_fail@plt+0xdbe4>
   1f3d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3dc:	add	fp, sp, #28
   1f3e0:	sub	sp, sp, #20
   1f3e4:	str	r0, [sp, #4]
   1f3e8:	ldr	r0, [r1, #4]
   1f3ec:	mov	sl, r1
   1f3f0:	mov	r1, #0
   1f3f4:	mov	r5, r3
   1f3f8:	mov	r8, r2
   1f3fc:	str	r1, [sp, #12]
   1f400:	str	r0, [sp, #8]
   1f404:	lsl	r0, r0, #2
   1f408:	bl	22898 <__assert_fail@plt+0x11174>
   1f40c:	cmp	r0, #0
   1f410:	str	r0, [sp, #16]
   1f414:	beq	1f500 <__assert_fail@plt+0xdddc>
   1f418:	ldr	r0, [sl, #4]
   1f41c:	cmp	r0, #1
   1f420:	blt	1f4c8 <__assert_fail@plt+0xdda4>
   1f424:	mov	r9, #0
   1f428:	ldr	r0, [sl, #8]
   1f42c:	ldr	r1, [sp, #4]
   1f430:	ldr	r2, [r0, r9, lsl #2]
   1f434:	ldr	r1, [r1, #24]
   1f438:	add	r0, r2, r2, lsl #1
   1f43c:	add	r1, r1, r0, lsl #2
   1f440:	ldr	r0, [r1, #4]
   1f444:	cmp	r0, #1
   1f448:	blt	1f484 <__assert_fail@plt+0xdd60>
   1f44c:	ldr	r7, [sp, #4]
   1f450:	ldr	r3, [r1, #8]
   1f454:	ldr	r7, [r7]
   1f458:	ldr	r6, [r3]
   1f45c:	add	r4, r7, r6, lsl #3
   1f460:	ldrb	r4, [r4, #4]
   1f464:	cmp	r4, r5
   1f468:	bne	1f478 <__assert_fail@plt+0xdd54>
   1f46c:	ldr	r4, [r7, r6, lsl #3]
   1f470:	cmp	r4, r8
   1f474:	beq	1f4a8 <__assert_fail@plt+0xdd84>
   1f478:	add	r3, r3, #4
   1f47c:	subs	r0, r0, #1
   1f480:	bne	1f458 <__assert_fail@plt+0xdd34>
   1f484:	add	r0, sp, #8
   1f488:	bl	1cdb0 <__assert_fail@plt+0xb68c>
   1f48c:	cmp	r0, #0
   1f490:	bne	1f4f0 <__assert_fail@plt+0xddcc>
   1f494:	ldr	r0, [sl, #4]
   1f498:	add	r9, r9, #1
   1f49c:	cmp	r9, r0
   1f4a0:	blt	1f428 <__assert_fail@plt+0xdd04>
   1f4a4:	b	1f4c8 <__assert_fail@plt+0xdda4>
   1f4a8:	cmn	r6, #1
   1f4ac:	beq	1f484 <__assert_fail@plt+0xdd60>
   1f4b0:	ldr	r0, [sp, #4]
   1f4b4:	add	r1, sp, #8
   1f4b8:	mov	r3, r8
   1f4bc:	str	r5, [sp]
   1f4c0:	bl	1f7d4 <__assert_fail@plt+0xe0b0>
   1f4c4:	b	1f48c <__assert_fail@plt+0xdd68>
   1f4c8:	ldr	r0, [sl, #8]
   1f4cc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f4d0:	vldr	d16, [sp, #8]
   1f4d4:	ldr	r0, [sp, #16]
   1f4d8:	mov	r7, #0
   1f4dc:	str	r0, [sl, #8]
   1f4e0:	vstr	d16, [sl]
   1f4e4:	mov	r0, r7
   1f4e8:	sub	sp, fp, #28
   1f4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4f0:	mov	r7, r0
   1f4f4:	ldr	r0, [sp, #16]
   1f4f8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f4fc:	b	1f4e4 <__assert_fail@plt+0xddc0>
   1f500:	mov	r7, #12
   1f504:	b	1f4e4 <__assert_fail@plt+0xddc0>
   1f508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f50c:	add	fp, sp, #28
   1f510:	sub	sp, sp, #36	; 0x24
   1f514:	mov	r6, r1
   1f518:	ldr	r1, [r0, #84]	; 0x54
   1f51c:	str	r3, [sp, #4]
   1f520:	mov	r4, r2
   1f524:	str	r0, [sp, #12]
   1f528:	str	r1, [sp, #16]
   1f52c:	mov	r1, r2
   1f530:	bl	1ebc8 <__assert_fail@plt+0xd4a4>
   1f534:	cmn	r0, #1
   1f538:	beq	1f7c0 <__assert_fail@plt+0xe09c>
   1f53c:	add	r1, r0, r0, lsl #1
   1f540:	str	r1, [sp]
   1f544:	ldr	r0, [sp, #12]
   1f548:	ldr	r0, [r0, #116]	; 0x74
   1f54c:	add	r0, r0, r1, lsl #3
   1f550:	add	r0, r0, #8
   1f554:	ldr	r7, [r0, #-8]
   1f558:	mov	sl, r0
   1f55c:	mov	r0, r6
   1f560:	mov	r1, r7
   1f564:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   1f568:	cmp	r0, #0
   1f56c:	beq	1f768 <__assert_fail@plt+0xe044>
   1f570:	ldm	sl, {r0, r1}
   1f574:	add	r1, r1, r4
   1f578:	sub	r9, r1, r0
   1f57c:	cmp	r9, r4
   1f580:	bne	1f644 <__assert_fail@plt+0xdf20>
   1f584:	ldr	r0, [sp, #16]
   1f588:	add	r1, r7, r7, lsl #1
   1f58c:	ldr	r0, [r0, #20]
   1f590:	add	r0, r0, r1, lsl #2
   1f594:	ldr	r0, [r0, #8]
   1f598:	ldr	r7, [r0]
   1f59c:	mov	r0, r6
   1f5a0:	mov	r1, r7
   1f5a4:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   1f5a8:	mov	r1, #4
   1f5ac:	cmp	r0, #0
   1f5b0:	bne	1f75c <__assert_fail@plt+0xe038>
   1f5b4:	mov	r0, #1
   1f5b8:	str	r0, [sp, #24]
   1f5bc:	str	r0, [sp, #20]
   1f5c0:	mov	r0, #4
   1f5c4:	bl	22898 <__assert_fail@plt+0x11174>
   1f5c8:	cmp	r0, #0
   1f5cc:	str	r0, [sp, #28]
   1f5d0:	beq	1f77c <__assert_fail@plt+0xe058>
   1f5d4:	mov	r5, #0
   1f5d8:	str	r7, [r0]
   1f5dc:	ldr	r0, [sp, #16]
   1f5e0:	ldr	r2, [sp, #4]
   1f5e4:	ldr	r3, [fp, #8]
   1f5e8:	add	r7, sp, #20
   1f5ec:	str	r5, [sp, #32]
   1f5f0:	mov	r1, r7
   1f5f4:	bl	1f3d8 <__assert_fail@plt+0xdcb4>
   1f5f8:	mov	r9, r0
   1f5fc:	mov	r0, r6
   1f600:	mov	r1, r7
   1f604:	bl	1cdb0 <__assert_fail@plt+0xb68c>
   1f608:	mov	r8, r0
   1f60c:	ldr	r0, [sp, #28]
   1f610:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f614:	orr	r0, r9, r5
   1f618:	mov	r1, #2
   1f61c:	orrs	r0, r0, r8
   1f620:	beq	1f75c <__assert_fail@plt+0xe038>
   1f624:	cmp	r9, #0
   1f628:	mov	r1, #1
   1f62c:	movne	r8, r9
   1f630:	cmp	r5, #0
   1f634:	movne	r8, r5
   1f638:	str	r8, [sp, #32]
   1f63c:	str	r8, [sp, #8]
   1f640:	b	1f75c <__assert_fail@plt+0xe038>
   1f644:	ldr	r0, [sp, #12]
   1f648:	ldr	r1, [sp, #16]
   1f64c:	mov	r5, r4
   1f650:	ldr	r0, [r0, #100]	; 0x64
   1f654:	ldr	r1, [r1, #12]
   1f658:	ldr	r0, [r0, r9, lsl #2]
   1f65c:	ldr	r8, [r1, r7, lsl #2]
   1f660:	cmp	r0, #0
   1f664:	beq	1f6d8 <__assert_fail@plt+0xdfb4>
   1f668:	add	r4, r0, #4
   1f66c:	mov	r1, r8
   1f670:	mov	r0, r4
   1f674:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   1f678:	mov	r1, #4
   1f67c:	cmp	r0, #0
   1f680:	bne	1f758 <__assert_fail@plt+0xe034>
   1f684:	add	r7, sp, #20
   1f688:	mov	r1, r4
   1f68c:	mov	r0, r7
   1f690:	bl	1d158 <__assert_fail@plt+0xba34>
   1f694:	mov	r4, r0
   1f698:	str	r0, [sp, #32]
   1f69c:	mov	r0, r7
   1f6a0:	mov	r1, r8
   1f6a4:	bl	1cfbc <__assert_fail@plt+0xb898>
   1f6a8:	cmp	r4, #0
   1f6ac:	bne	1f6b8 <__assert_fail@plt+0xdf94>
   1f6b0:	cmp	r0, #0
   1f6b4:	bne	1f704 <__assert_fail@plt+0xdfe0>
   1f6b8:	ldr	r0, [sp, #28]
   1f6bc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f6c0:	cmp	r4, #0
   1f6c4:	mov	r1, #1
   1f6c8:	movweq	r4, #12
   1f6cc:	str	r4, [sp, #32]
   1f6d0:	str	r4, [sp, #8]
   1f6d4:	b	1f758 <__assert_fail@plt+0xe034>
   1f6d8:	mov	r0, #1
   1f6dc:	str	r0, [sp, #24]
   1f6e0:	str	r0, [sp, #20]
   1f6e4:	mov	r0, #4
   1f6e8:	bl	22898 <__assert_fail@plt+0x11174>
   1f6ec:	cmp	r0, #0
   1f6f0:	str	r0, [sp, #28]
   1f6f4:	beq	1f790 <__assert_fail@plt+0xe06c>
   1f6f8:	str	r8, [r0]
   1f6fc:	mov	r0, #0
   1f700:	str	r0, [sp, #32]
   1f704:	ldr	r1, [sp, #16]
   1f708:	add	r0, sp, #32
   1f70c:	add	r2, sp, #20
   1f710:	bl	1f8dc <__assert_fail@plt+0xe1b8>
   1f714:	ldr	r4, [sp, #12]
   1f718:	ldr	r1, [r4, #100]	; 0x64
   1f71c:	str	r0, [r1, r9, lsl #2]
   1f720:	ldr	r0, [sp, #28]
   1f724:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1f728:	ldr	r0, [r4, #100]	; 0x64
   1f72c:	ldr	r2, [sp, #32]
   1f730:	ldr	r0, [r0, r9, lsl #2]
   1f734:	cmp	r2, #0
   1f738:	mov	r1, r2
   1f73c:	movwne	r1, #1
   1f740:	clz	r0, r0
   1f744:	lsr	r0, r0, #5
   1f748:	ands	r1, r0, r1
   1f74c:	ldr	r0, [sp, #8]
   1f750:	movne	r0, r2
   1f754:	str	r0, [sp, #8]
   1f758:	mov	r4, r5
   1f75c:	cmp	r1, #0
   1f760:	cmpne	r1, #4
   1f764:	bne	1f7b0 <__assert_fail@plt+0xe08c>
   1f768:	ldrb	r1, [sl, #12]
   1f76c:	add	r0, sl, #24
   1f770:	cmp	r1, #0
   1f774:	bne	1f554 <__assert_fail@plt+0xde30>
   1f778:	b	1f7c0 <__assert_fail@plt+0xe09c>
   1f77c:	mov	r0, #0
   1f780:	mov	r5, #12
   1f784:	str	r0, [sp, #20]
   1f788:	str	r0, [sp, #24]
   1f78c:	b	1f5dc <__assert_fail@plt+0xdeb8>
   1f790:	mov	r0, #0
   1f794:	mov	r1, #12
   1f798:	str	r0, [sp, #20]
   1f79c:	str	r0, [sp, #24]
   1f7a0:	mov	r0, #12
   1f7a4:	str	r1, [sp, #32]
   1f7a8:	mov	r1, #1
   1f7ac:	b	1f754 <__assert_fail@plt+0xe030>
   1f7b0:	cmp	r1, #2
   1f7b4:	bne	1f7cc <__assert_fail@plt+0xe0a8>
   1f7b8:	ldr	r1, [sp]
   1f7bc:	b	1f544 <__assert_fail@plt+0xde20>
   1f7c0:	mov	r0, #0
   1f7c4:	sub	sp, fp, #28
   1f7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7cc:	ldr	r0, [sp, #8]
   1f7d0:	b	1f7c4 <__assert_fail@plt+0xe0a0>
   1f7d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f7d8:	add	fp, sp, #24
   1f7dc:	sub	sp, sp, #8
   1f7e0:	mov	r6, r0
   1f7e4:	mov	r4, r1
   1f7e8:	mov	r0, r1
   1f7ec:	mov	r1, r2
   1f7f0:	mov	r5, r3
   1f7f4:	mov	r7, r2
   1f7f8:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   1f7fc:	cmp	r0, #0
   1f800:	beq	1f810 <__assert_fail@plt+0xe0ec>
   1f804:	mov	r0, #0
   1f808:	sub	sp, fp, #24
   1f80c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f810:	ldr	r8, [fp, #8]
   1f814:	ldr	r0, [r6]
   1f818:	add	r1, r0, r7, lsl #3
   1f81c:	ldrb	r1, [r1, #4]
   1f820:	cmp	r1, r8
   1f824:	bne	1f834 <__assert_fail@plt+0xe110>
   1f828:	ldr	r0, [r0, r7, lsl #3]
   1f82c:	cmp	r0, r5
   1f830:	beq	1f8b8 <__assert_fail@plt+0xe194>
   1f834:	mov	r0, r4
   1f838:	mov	r1, r7
   1f83c:	bl	1cfbc <__assert_fail@plt+0xb898>
   1f840:	cmp	r0, #0
   1f844:	beq	1f8d4 <__assert_fail@plt+0xe1b0>
   1f848:	ldr	r0, [r6, #20]
   1f84c:	add	r7, r7, r7, lsl #1
   1f850:	add	r1, r0, r7, lsl #2
   1f854:	ldr	r2, [r1, #4]
   1f858:	cmp	r2, #2
   1f85c:	beq	1f86c <__assert_fail@plt+0xe148>
   1f860:	cmp	r2, #0
   1f864:	bne	1f894 <__assert_fail@plt+0xe170>
   1f868:	b	1f804 <__assert_fail@plt+0xe0e0>
   1f86c:	ldr	r0, [r1, #8]
   1f870:	mov	r1, r4
   1f874:	mov	r3, r5
   1f878:	ldr	r2, [r0, #4]
   1f87c:	mov	r0, r6
   1f880:	str	r8, [sp]
   1f884:	bl	1f7d4 <__assert_fail@plt+0xe0b0>
   1f888:	cmp	r0, #0
   1f88c:	bne	1f808 <__assert_fail@plt+0xe0e4>
   1f890:	ldr	r0, [r6, #20]
   1f894:	add	r0, r0, r7, lsl #2
   1f898:	ldr	r0, [r0, #8]
   1f89c:	ldr	r7, [r0]
   1f8a0:	mov	r0, r4
   1f8a4:	mov	r1, r7
   1f8a8:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   1f8ac:	cmp	r0, #0
   1f8b0:	beq	1f814 <__assert_fail@plt+0xe0f0>
   1f8b4:	b	1f804 <__assert_fail@plt+0xe0e0>
   1f8b8:	cmp	r8, #9
   1f8bc:	bne	1f804 <__assert_fail@plt+0xe0e0>
   1f8c0:	mov	r0, r4
   1f8c4:	mov	r1, r7
   1f8c8:	bl	1cfbc <__assert_fail@plt+0xb898>
   1f8cc:	cmp	r0, #0
   1f8d0:	bne	1f804 <__assert_fail@plt+0xe0e0>
   1f8d4:	mov	r0, #12
   1f8d8:	b	1f808 <__assert_fail@plt+0xe0e4>
   1f8dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8e0:	add	fp, sp, #28
   1f8e4:	sub	sp, sp, #4
   1f8e8:	ldr	sl, [r2, #4]
   1f8ec:	cmp	sl, #0
   1f8f0:	beq	1faa0 <__assert_fail@plt+0xe37c>
   1f8f4:	mov	r4, r2
   1f8f8:	mov	r9, r1
   1f8fc:	cmp	sl, #1
   1f900:	mov	r6, sl
   1f904:	str	r0, [sp]
   1f908:	blt	1f928 <__assert_fail@plt+0xe204>
   1f90c:	ldr	r1, [r4, #8]
   1f910:	mov	r2, sl
   1f914:	mov	r6, sl
   1f918:	ldr	r3, [r1], #4
   1f91c:	subs	r2, r2, #1
   1f920:	add	r6, r3, r6
   1f924:	bne	1f918 <__assert_fail@plt+0xe1f4>
   1f928:	ldr	r1, [r9, #68]	; 0x44
   1f92c:	ldr	r2, [r9, #32]
   1f930:	and	r1, r1, r6
   1f934:	add	r3, r1, r1, lsl #1
   1f938:	ldr	r1, [r2, r3, lsl #2]
   1f93c:	cmp	r1, #1
   1f940:	blt	1f9b0 <__assert_fail@plt+0xe28c>
   1f944:	add	r2, r2, r3, lsl #2
   1f948:	sub	ip, sl, #1
   1f94c:	mov	r5, #0
   1f950:	ldr	lr, [r2, #8]
   1f954:	cmp	r4, #0
   1f958:	beq	1f9a4 <__assert_fail@plt+0xe280>
   1f95c:	ldr	r7, [lr, r5, lsl #2]
   1f960:	ldr	r3, [r7]
   1f964:	cmp	r6, r3
   1f968:	bne	1f9a4 <__assert_fail@plt+0xe280>
   1f96c:	ldr	r3, [r7, #8]
   1f970:	cmp	r3, sl
   1f974:	bne	1f9a4 <__assert_fail@plt+0xe280>
   1f978:	mov	r3, ip
   1f97c:	add	r2, r3, #1
   1f980:	cmp	r2, #1
   1f984:	blt	1fa94 <__assert_fail@plt+0xe370>
   1f988:	ldr	r2, [r4, #8]
   1f98c:	ldr	r0, [r7, #12]
   1f990:	ldr	r2, [r2, r3, lsl #2]
   1f994:	ldr	r0, [r0, r3, lsl #2]
   1f998:	sub	r3, r3, #1
   1f99c:	cmp	r0, r2
   1f9a0:	beq	1f97c <__assert_fail@plt+0xe258>
   1f9a4:	add	r5, r5, #1
   1f9a8:	cmp	r5, r1
   1f9ac:	blt	1f954 <__assert_fail@plt+0xe230>
   1f9b0:	mov	r0, #56	; 0x38
   1f9b4:	mov	r1, #1
   1f9b8:	bl	22844 <__assert_fail@plt+0x11120>
   1f9bc:	cmp	r0, #0
   1f9c0:	beq	1fac0 <__assert_fail@plt+0xe39c>
   1f9c4:	add	r5, r0, #4
   1f9c8:	mov	r7, r0
   1f9cc:	mov	r1, r4
   1f9d0:	mov	r0, r5
   1f9d4:	bl	1d158 <__assert_fail@plt+0xba34>
   1f9d8:	cmp	r0, #0
   1f9dc:	bne	1faac <__assert_fail@plt+0xe388>
   1f9e0:	str	r5, [r7, #40]	; 0x28
   1f9e4:	ldr	r0, [r4, #4]
   1f9e8:	cmp	r0, #1
   1f9ec:	blt	1fa7c <__assert_fail@plt+0xe358>
   1f9f0:	movw	ip, #65280	; 0xff00
   1f9f4:	ldr	r1, [r4, #8]
   1f9f8:	ldr	sl, [r9]
   1f9fc:	mov	lr, #32
   1fa00:	movt	ip, #3
   1fa04:	add	r5, ip, #255	; 0xff
   1fa08:	ldr	r2, [r1]
   1fa0c:	add	r3, sl, r2, lsl #3
   1fa10:	ldr	r2, [r3, #4]!
   1fa14:	and	r4, r2, r5
   1fa18:	cmp	r4, #1
   1fa1c:	beq	1fa70 <__assert_fail@plt+0xe34c>
   1fa20:	ldrb	r8, [r7, #52]	; 0x34
   1fa24:	and	r4, lr, r2, lsr #15
   1fa28:	uxtb	r2, r2
   1fa2c:	cmp	r2, #12
   1fa30:	orr	r4, r8, r4
   1fa34:	strb	r4, [r7, #52]	; 0x34
   1fa38:	beq	1fa68 <__assert_fail@plt+0xe344>
   1fa3c:	cmp	r2, #4
   1fa40:	beq	1fa54 <__assert_fail@plt+0xe330>
   1fa44:	cmp	r2, #2
   1fa48:	bne	1fa5c <__assert_fail@plt+0xe338>
   1fa4c:	orr	r2, r4, #16
   1fa50:	b	1fa6c <__assert_fail@plt+0xe348>
   1fa54:	orr	r2, r4, #64	; 0x40
   1fa58:	b	1fa6c <__assert_fail@plt+0xe348>
   1fa5c:	ldr	r2, [r3]
   1fa60:	tst	r2, ip
   1fa64:	beq	1fa70 <__assert_fail@plt+0xe34c>
   1fa68:	orr	r2, r4, #128	; 0x80
   1fa6c:	strb	r2, [r7, #52]	; 0x34
   1fa70:	add	r1, r1, #4
   1fa74:	subs	r0, r0, #1
   1fa78:	bne	1fa08 <__assert_fail@plt+0xe2e4>
   1fa7c:	mov	r0, r9
   1fa80:	mov	r1, r7
   1fa84:	mov	r2, r6
   1fa88:	bl	1d574 <__assert_fail@plt+0xbe50>
   1fa8c:	cmp	r0, #0
   1fa90:	bne	1fab8 <__assert_fail@plt+0xe394>
   1fa94:	mov	r0, r7
   1fa98:	sub	sp, fp, #28
   1fa9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faa0:	mov	r7, #0
   1faa4:	str	r7, [r0]
   1faa8:	b	1fa94 <__assert_fail@plt+0xe370>
   1faac:	mov	r0, r7
   1fab0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   1fab4:	b	1fac0 <__assert_fail@plt+0xe39c>
   1fab8:	mov	r0, r7
   1fabc:	bl	1866c <__assert_fail@plt+0x6f48>
   1fac0:	ldr	r1, [sp]
   1fac4:	mov	r0, #12
   1fac8:	mov	r7, #0
   1facc:	str	r0, [r1]
   1fad0:	b	1fa94 <__assert_fail@plt+0xe370>
   1fad4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fad8:	add	fp, sp, #24
   1fadc:	ldr	lr, [r0]
   1fae0:	add	r7, lr, r1, lsl #3
   1fae4:	ldrb	r9, [r7, #4]
   1fae8:	cmp	r9, #7
   1faec:	beq	1fcc0 <__assert_fail@plt+0xe59c>
   1faf0:	ldr	ip, [r2, #80]	; 0x50
   1faf4:	mov	r6, #1
   1faf8:	cmp	ip, #1
   1fafc:	beq	1fb3c <__assert_fail@plt+0xe418>
   1fb00:	ldr	r5, [r2, #28]
   1fb04:	add	r7, r3, #1
   1fb08:	cmp	r7, r5
   1fb0c:	bge	1fb3c <__assert_fail@plt+0xe418>
   1fb10:	ldr	r6, [r2, #8]
   1fb14:	sub	r5, r5, r3
   1fb18:	add	r7, r6, r3, lsl #2
   1fb1c:	mov	r6, #1
   1fb20:	ldr	r4, [r7, r6, lsl #2]
   1fb24:	cmn	r4, #1
   1fb28:	bne	1fb3c <__assert_fail@plt+0xe418>
   1fb2c:	add	r6, r6, #1
   1fb30:	cmp	r5, r6
   1fb34:	bne	1fb20 <__assert_fail@plt+0xe3fc>
   1fb38:	mov	r6, r5
   1fb3c:	mov	r8, #0
   1fb40:	cmp	r9, #5
   1fb44:	bne	1fb88 <__assert_fail@plt+0xe464>
   1fb48:	cmp	r6, #2
   1fb4c:	blt	1fcb0 <__assert_fail@plt+0xe58c>
   1fb50:	ldr	r0, [r0, #128]	; 0x80
   1fb54:	tst	r0, #64	; 0x40
   1fb58:	bne	1fb6c <__assert_fail@plt+0xe448>
   1fb5c:	ldr	r1, [r2, #4]
   1fb60:	ldrb	r1, [r1, r3]
   1fb64:	cmp	r1, #10
   1fb68:	beq	1fcb0 <__assert_fail@plt+0xe58c>
   1fb6c:	tst	r0, #128	; 0x80
   1fb70:	beq	1fcac <__assert_fail@plt+0xe588>
   1fb74:	ldr	r0, [r2, #4]
   1fb78:	ldrb	r0, [r0, r3]
   1fb7c:	cmp	r0, #0
   1fb80:	movne	r8, r6
   1fb84:	b	1fcb0 <__assert_fail@plt+0xe58c>
   1fb88:	cmp	r9, #6
   1fb8c:	bne	1fcb0 <__assert_fail@plt+0xe58c>
   1fb90:	cmp	r6, #2
   1fb94:	blt	1fcb0 <__assert_fail@plt+0xe58c>
   1fb98:	ldr	r7, [lr, r1, lsl #3]
   1fb9c:	ldr	r0, [r7, #32]
   1fba0:	cmp	r0, #0
   1fba4:	bne	1fbc0 <__assert_fail@plt+0xe49c>
   1fba8:	ldr	r1, [r7, #36]	; 0x24
   1fbac:	cmp	r1, #0
   1fbb0:	bne	1fbc0 <__assert_fail@plt+0xe49c>
   1fbb4:	ldr	r1, [r7, #20]
   1fbb8:	cmp	r1, #0
   1fbbc:	beq	1fcb8 <__assert_fail@plt+0xe594>
   1fbc0:	cmp	ip, #1
   1fbc4:	bne	1fbd4 <__assert_fail@plt+0xe4b0>
   1fbc8:	ldr	r1, [r2, #4]
   1fbcc:	ldrb	r5, [r1, r3]
   1fbd0:	b	1fbdc <__assert_fail@plt+0xe4b8>
   1fbd4:	ldr	r1, [r2, #8]
   1fbd8:	ldr	r5, [r1, r3, lsl #2]
   1fbdc:	ldr	r1, [r7, #20]
   1fbe0:	cmp	r1, #1
   1fbe4:	blt	1fc08 <__assert_fail@plt+0xe4e4>
   1fbe8:	ldr	r2, [r7]
   1fbec:	mov	r3, #0
   1fbf0:	ldr	r4, [r2, r3, lsl #2]
   1fbf4:	cmp	r5, r4
   1fbf8:	beq	1fc84 <__assert_fail@plt+0xe560>
   1fbfc:	add	r3, r3, #1
   1fc00:	cmp	r3, r1
   1fc04:	blt	1fbf0 <__assert_fail@plt+0xe4cc>
   1fc08:	ldr	r1, [r7, #36]	; 0x24
   1fc0c:	cmp	r1, #1
   1fc10:	blt	1fc44 <__assert_fail@plt+0xe520>
   1fc14:	mov	r4, #0
   1fc18:	ldr	r0, [r7, #12]
   1fc1c:	ldr	r1, [r0, r4, lsl #2]
   1fc20:	mov	r0, r5
   1fc24:	bl	113dc <iswctype@plt>
   1fc28:	cmp	r0, #0
   1fc2c:	bne	1fc84 <__assert_fail@plt+0xe560>
   1fc30:	ldr	r0, [r7, #36]	; 0x24
   1fc34:	add	r4, r4, #1
   1fc38:	cmp	r4, r0
   1fc3c:	blt	1fc18 <__assert_fail@plt+0xe4f4>
   1fc40:	ldr	r0, [r7, #32]
   1fc44:	cmp	r0, #1
   1fc48:	blt	1fc7c <__assert_fail@plt+0xe558>
   1fc4c:	ldr	r1, [r7, #4]
   1fc50:	mov	r2, #0
   1fc54:	ldr	r3, [r1, r2, lsl #2]
   1fc58:	cmp	r3, r5
   1fc5c:	bhi	1fc70 <__assert_fail@plt+0xe54c>
   1fc60:	ldr	r3, [r7, #8]
   1fc64:	ldr	r3, [r3, r2, lsl #2]
   1fc68:	cmp	r5, r3
   1fc6c:	bls	1fc84 <__assert_fail@plt+0xe560>
   1fc70:	add	r2, r2, #1
   1fc74:	cmp	r2, r0
   1fc78:	blt	1fc54 <__assert_fail@plt+0xe530>
   1fc7c:	mov	r0, #0
   1fc80:	b	1fc88 <__assert_fail@plt+0xe564>
   1fc84:	mov	r0, r6
   1fc88:	ldrb	r1, [r7, #16]
   1fc8c:	tst	r1, #1
   1fc90:	bne	1fc9c <__assert_fail@plt+0xe578>
   1fc94:	mov	r8, r0
   1fc98:	b	1fcb0 <__assert_fail@plt+0xe58c>
   1fc9c:	cmp	r0, #0
   1fca0:	bgt	1fcb0 <__assert_fail@plt+0xe58c>
   1fca4:	cmp	r6, #1
   1fca8:	movle	r6, #1
   1fcac:	mov	r8, r6
   1fcb0:	mov	r0, r8
   1fcb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fcb8:	mov	r5, #0
   1fcbc:	b	1fbdc <__assert_fail@plt+0xe4b8>
   1fcc0:	ldr	r0, [r2, #4]
   1fcc4:	mov	r8, #0
   1fcc8:	ldrb	r6, [r0, r3]
   1fccc:	cmp	r6, #194	; 0xc2
   1fcd0:	bcc	1fcb0 <__assert_fail@plt+0xe58c>
   1fcd4:	ldr	r1, [r2, #48]	; 0x30
   1fcd8:	add	r2, r3, #2
   1fcdc:	cmp	r2, r1
   1fce0:	bgt	1fcb0 <__assert_fail@plt+0xe58c>
   1fce4:	add	r0, r3, r0
   1fce8:	cmp	r6, #223	; 0xdf
   1fcec:	ldrb	r7, [r0, #1]
   1fcf0:	bhi	1fd14 <__assert_fail@plt+0xe5f0>
   1fcf4:	cmp	r7, #192	; 0xc0
   1fcf8:	mov	r0, #0
   1fcfc:	movwcc	r0, #1
   1fd00:	lsl	r8, r0, #1
   1fd04:	sxtb	r0, r7
   1fd08:	cmn	r0, #1
   1fd0c:	movwgt	r8, #0
   1fd10:	b	1fcb0 <__assert_fail@plt+0xe58c>
   1fd14:	cmp	r6, #239	; 0xef
   1fd18:	bhi	1fd34 <__assert_fail@plt+0xe610>
   1fd1c:	mov	r2, #3
   1fd20:	cmp	r6, #224	; 0xe0
   1fd24:	bne	1fd90 <__assert_fail@plt+0xe66c>
   1fd28:	cmp	r7, #160	; 0xa0
   1fd2c:	bcc	1fcb0 <__assert_fail@plt+0xe58c>
   1fd30:	b	1fd90 <__assert_fail@plt+0xe66c>
   1fd34:	cmp	r6, #247	; 0xf7
   1fd38:	bhi	1fd54 <__assert_fail@plt+0xe630>
   1fd3c:	mov	r2, #4
   1fd40:	cmp	r6, #240	; 0xf0
   1fd44:	bne	1fd90 <__assert_fail@plt+0xe66c>
   1fd48:	cmp	r7, #144	; 0x90
   1fd4c:	bcc	1fcb0 <__assert_fail@plt+0xe58c>
   1fd50:	b	1fd90 <__assert_fail@plt+0xe66c>
   1fd54:	cmp	r6, #251	; 0xfb
   1fd58:	bhi	1fd74 <__assert_fail@plt+0xe650>
   1fd5c:	mov	r2, #5
   1fd60:	cmp	r6, #248	; 0xf8
   1fd64:	bne	1fd90 <__assert_fail@plt+0xe66c>
   1fd68:	cmp	r7, #136	; 0x88
   1fd6c:	bcc	1fcb0 <__assert_fail@plt+0xe58c>
   1fd70:	b	1fd90 <__assert_fail@plt+0xe66c>
   1fd74:	cmp	r6, #253	; 0xfd
   1fd78:	bhi	1fcb0 <__assert_fail@plt+0xe58c>
   1fd7c:	mov	r2, #6
   1fd80:	cmp	r6, #252	; 0xfc
   1fd84:	bne	1fd90 <__assert_fail@plt+0xe66c>
   1fd88:	cmp	r7, #132	; 0x84
   1fd8c:	bcc	1fcb0 <__assert_fail@plt+0xe58c>
   1fd90:	add	r3, r2, r3
   1fd94:	cmp	r3, r1
   1fd98:	bgt	1fcb0 <__assert_fail@plt+0xe58c>
   1fd9c:	mov	r1, #1
   1fda0:	ldrb	r3, [r0, r1]
   1fda4:	sxtb	r7, r3
   1fda8:	cmn	r7, #1
   1fdac:	bgt	1fcb0 <__assert_fail@plt+0xe58c>
   1fdb0:	cmp	r3, #191	; 0xbf
   1fdb4:	bhi	1fcb0 <__assert_fail@plt+0xe58c>
   1fdb8:	add	r1, r1, #1
   1fdbc:	cmp	r2, r1
   1fdc0:	bne	1fda0 <__assert_fail@plt+0xe67c>
   1fdc4:	mov	r8, r2
   1fdc8:	b	1fcb0 <__assert_fail@plt+0xe58c>
   1fdcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fdd0:	add	fp, sp, #24
   1fdd4:	ldr	r5, [r1, #4]
   1fdd8:	mvn	r3, #0
   1fddc:	mov	r8, #0
   1fde0:	uxtab	r4, r3, r5
   1fde4:	cmp	r4, #6
   1fde8:	bhi	1fef8 <__assert_fail@plt+0xe7d4>
   1fdec:	ldr	r3, [r0, #4]
   1fdf0:	ldrb	r3, [r3, r2]
   1fdf4:	add	r7, pc, #4
   1fdf8:	sxtb	r6, r3
   1fdfc:	ldr	pc, [r7, r4, lsl #2]
   1fe00:	andeq	pc, r1, ip, lsl lr	; <UNPREDICTABLE>
   1fe04:	strdeq	pc, [r1], -r8
   1fe08:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   1fe0c:	strdeq	pc, [r1], -r8
   1fe10:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fe14:	strdeq	pc, [r1], -r8
   1fe18:	andeq	pc, r1, r0, asr lr	; <UNPREDICTABLE>
   1fe1c:	ldrb	r1, [r1]
   1fe20:	uxtb	r3, r6
   1fe24:	cmp	r1, r3
   1fe28:	beq	1fe8c <__assert_fail@plt+0xe768>
   1fe2c:	b	1fef8 <__assert_fail@plt+0xe7d4>
   1fe30:	ldr	r1, [r1]
   1fe34:	ubfx	r7, r3, #5, #3
   1fe38:	and	r3, r3, #31
   1fe3c:	ldr	r1, [r1, r7, lsl #2]
   1fe40:	mov	r7, #1
   1fe44:	tst	r1, r7, lsl r3
   1fe48:	bne	1fe8c <__assert_fail@plt+0xe768>
   1fe4c:	b	1fef8 <__assert_fail@plt+0xe7d4>
   1fe50:	cmp	r6, #0
   1fe54:	bmi	1fef8 <__assert_fail@plt+0xe7d4>
   1fe58:	cmp	r3, #0
   1fe5c:	beq	1fe7c <__assert_fail@plt+0xe758>
   1fe60:	cmp	r3, #10
   1fe64:	bne	1fe8c <__assert_fail@plt+0xe768>
   1fe68:	ldr	r1, [r0, #84]	; 0x54
   1fe6c:	ldrb	r1, [r1, #128]	; 0x80
   1fe70:	tst	r1, #64	; 0x40
   1fe74:	bne	1fe8c <__assert_fail@plt+0xe768>
   1fe78:	b	1fef8 <__assert_fail@plt+0xe7d4>
   1fe7c:	ldr	r1, [r0, #84]	; 0x54
   1fe80:	ldrb	r1, [r1, #128]	; 0x80
   1fe84:	tst	r1, #128	; 0x80
   1fe88:	bne	1fef8 <__assert_fail@plt+0xe7d4>
   1fe8c:	movw	r1, #65280	; 0xff00
   1fe90:	movt	r1, #3
   1fe94:	tst	r5, r1
   1fe98:	beq	1fef4 <__assert_fail@plt+0xe7d0>
   1fe9c:	ldr	r3, [r0, #88]	; 0x58
   1fea0:	mov	r1, r2
   1fea4:	mov	r2, r3
   1fea8:	bl	1deb4 <__assert_fail@plt+0xc790>
   1feac:	and	r1, r0, #1
   1feb0:	tst	r5, #1024	; 0x400
   1feb4:	beq	1fec0 <__assert_fail@plt+0xe79c>
   1feb8:	cmp	r1, #0
   1febc:	beq	1fef8 <__assert_fail@plt+0xe7d4>
   1fec0:	tst	r5, #2048	; 0x800
   1fec4:	cmpne	r1, #0
   1fec8:	bne	1fef8 <__assert_fail@plt+0xe7d4>
   1fecc:	tst	r5, #8192	; 0x2000
   1fed0:	beq	1fedc <__assert_fail@plt+0xe7b8>
   1fed4:	ands	r1, r0, #2
   1fed8:	beq	1fef8 <__assert_fail@plt+0xe7d4>
   1fedc:	uxth	r1, r5
   1fee0:	mov	r2, #1
   1fee4:	and	r0, r0, #8
   1fee8:	eor	r1, r2, r1, lsr #15
   1feec:	orr	r0, r1, r0, lsr #3
   1fef0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fef4:	mov	r8, #1
   1fef8:	mov	r0, r8
   1fefc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ff00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff04:	add	fp, sp, #28
   1ff08:	sub	sp, sp, #4
   1ff0c:	vpush	{d8-d11}
   1ff10:	sub	sp, sp, #88	; 0x58
   1ff14:	sub	sp, sp, #14336	; 0x3800
   1ff18:	sub	lr, fp, #1024	; 0x400
   1ff1c:	vmov.i32	q4, #0	; 0x00000000
   1ff20:	mov	sl, r1
   1ff24:	mov	r1, #0
   1ff28:	mov	ip, r0
   1ff2c:	sub	r9, lr, #72	; 0x48
   1ff30:	str	r1, [sl, #44]	; 0x2c
   1ff34:	str	r1, [sl, #48]	; 0x30
   1ff38:	mov	r0, r9
   1ff3c:	vst1.64	{d8-d9}, [r0]!
   1ff40:	vst1.64	{d8-d9}, [r0]
   1ff44:	ldr	r0, [sl, #8]
   1ff48:	cmp	r0, #0
   1ff4c:	ble	208f8 <__assert_fail@plt+0xf1d4>
   1ff50:	sub	lr, fp, #2048	; 0x800
   1ff54:	add	r0, ip, #96	; 0x60
   1ff58:	mov	r6, #0
   1ff5c:	str	ip, [sp, #28]
   1ff60:	str	sl, [sp, #16]
   1ff64:	sub	r4, lr, #72	; 0x48
   1ff68:	sub	lr, fp, #3072	; 0xc00
   1ff6c:	str	r0, [sp, #4]
   1ff70:	sub	r8, lr, #72	; 0x48
   1ff74:	sub	lr, fp, #6144	; 0x1800
   1ff78:	sub	r5, lr, #120	; 0x78
   1ff7c:	ldr	r0, [sl, #12]
   1ff80:	str	r1, [sp, #24]
   1ff84:	ldr	lr, [r0, r1, lsl #2]
   1ff88:	ldr	r1, [ip]
   1ff8c:	add	r0, r1, lr, lsl #3
   1ff90:	str	lr, [sp, #12]
   1ff94:	ldr	r7, [r0, #4]
   1ff98:	uxtb	r0, r7
   1ff9c:	cmp	r0, #1
   1ffa0:	str	r0, [sp, #20]
   1ffa4:	bne	20080 <__assert_fail@plt+0xe95c>
   1ffa8:	ldrb	r0, [r1, lr, lsl #3]
   1ffac:	str	r1, [sp, #8]
   1ffb0:	mov	r3, #1
   1ffb4:	ubfx	r1, r0, #5, #3
   1ffb8:	and	r0, r0, #31
   1ffbc:	ldr	r2, [r9, r1, lsl #2]
   1ffc0:	orr	r0, r2, r3, lsl r0
   1ffc4:	str	r0, [r9, r1, lsl #2]
   1ffc8:	movw	r0, #65280	; 0xff00
   1ffcc:	ldr	r3, [sp, #20]
   1ffd0:	movt	r0, #3
   1ffd4:	ands	r0, r7, r0
   1ffd8:	beq	202c0 <__assert_fail@plt+0xeb9c>
   1ffdc:	tst	r7, #8192	; 0x2000
   1ffe0:	beq	20004 <__assert_fail@plt+0xe8e0>
   1ffe4:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   1ffe8:	mov	r1, r9
   1ffec:	vst1.64	{d8-d9}, [r1]!
   1fff0:	vst1.64	{d8-d9}, [r1]
   1fff4:	tst	r0, #1024	; 0x400
   1fff8:	beq	204f0 <__assert_fail@plt+0xedcc>
   1fffc:	mov	r0, #1024	; 0x400
   20000:	str	r0, [fp, #-1096]	; 0xfffffbb8
   20004:	tst	r7, #32768	; 0x8000
   20008:	bne	20214 <__assert_fail@plt+0xeaf0>
   2000c:	tst	r7, #1024	; 0x400
   20010:	beq	201fc <__assert_fail@plt+0xead8>
   20014:	movw	r0, #255	; 0xff
   20018:	movt	r0, #64	; 0x40
   2001c:	and	r0, r7, r0
   20020:	cmp	r0, #1
   20024:	beq	20214 <__assert_fail@plt+0xeaf0>
   20028:	ldr	r0, [ip, #92]	; 0x5c
   2002c:	vmov.i32	q8, #0	; 0x00000000
   20030:	mov	lr, r5
   20034:	cmp	r0, #1
   20038:	ble	201a4 <__assert_fail@plt+0xea80>
   2003c:	ldr	r0, [ip, #60]	; 0x3c
   20040:	ldr	r5, [sp, #4]
   20044:	mov	r1, #0
   20048:	add	r2, r5, r1
   2004c:	add	r3, r0, r1
   20050:	vld1.32	{d20-d21}, [r2]
   20054:	vld1.32	{d18-d19}, [r3]
   20058:	add	r2, r9, r1
   2005c:	add	r1, r1, #16
   20060:	vld1.32	{d22-d23}, [r2]
   20064:	cmp	r1, #32
   20068:	vorn	q9, q10, q9
   2006c:	vand	q9, q11, q9
   20070:	vorr	q8, q9, q8
   20074:	vst1.32	{d18-d19}, [r2]
   20078:	bne	20048 <__assert_fail@plt+0xe924>
   2007c:	b	201d4 <__assert_fail@plt+0xeab0>
   20080:	cmp	r0, #7
   20084:	beq	200cc <__assert_fail@plt+0xe9a8>
   20088:	cmp	r0, #5
   2008c:	beq	2011c <__assert_fail@plt+0xe9f8>
   20090:	cmp	r0, #3
   20094:	bne	204f0 <__assert_fail@plt+0xedcc>
   20098:	ldr	r0, [r1, lr, lsl #3]
   2009c:	str	r1, [sp, #8]
   200a0:	mov	r1, #0
   200a4:	add	r2, r9, r1
   200a8:	add	r3, r0, r1
   200ac:	add	r1, r1, #16
   200b0:	vld1.32	{d16-d17}, [r3]
   200b4:	vld1.32	{d18-d19}, [r2]
   200b8:	cmp	r1, #32
   200bc:	vorr	q8, q9, q8
   200c0:	vst1.32	{d16-d17}, [r2]
   200c4:	bne	200a4 <__assert_fail@plt+0xe980>
   200c8:	b	1ffc8 <__assert_fail@plt+0xe8a4>
   200cc:	mvn	r0, #0
   200d0:	str	r1, [sp, #8]
   200d4:	str	r0, [fp, #-1084]	; 0xfffffbc4
   200d8:	str	r0, [fp, #-1088]	; 0xfffffbc0
   200dc:	str	r0, [fp, #-1092]	; 0xfffffbbc
   200e0:	str	r0, [fp, #-1096]	; 0xfffffbb8
   200e4:	ldr	r1, [ip, #128]	; 0x80
   200e8:	and	r0, r1, #128	; 0x80
   200ec:	ands	r1, r1, #64	; 0x40
   200f0:	beq	200fc <__assert_fail@plt+0xe9d8>
   200f4:	cmp	r0, #0
   200f8:	beq	1ffc8 <__assert_fail@plt+0xe8a4>
   200fc:	cmp	r1, #0
   20100:	mvn	r1, #1
   20104:	movweq	r1, #64510	; 0xfbfe
   20108:	movteq	r1, #65535	; 0xffff
   2010c:	cmp	r0, #0
   20110:	mvneq	r1, #1024	; 0x400
   20114:	str	r1, [fp, #-1096]	; 0xfffffbb8
   20118:	b	1ffc8 <__assert_fail@plt+0xe8a4>
   2011c:	ldr	r0, [ip, #92]	; 0x5c
   20120:	str	r1, [sp, #8]
   20124:	cmp	r0, #2
   20128:	blt	2015c <__assert_fail@plt+0xea38>
   2012c:	ldr	r0, [ip, #60]	; 0x3c
   20130:	mov	r1, #0
   20134:	add	r2, r9, r1
   20138:	add	r3, r0, r1
   2013c:	add	r1, r1, #16
   20140:	vld1.32	{d16-d17}, [r3]
   20144:	vld1.32	{d18-d19}, [r2]
   20148:	cmp	r1, #32
   2014c:	vorr	q8, q9, q8
   20150:	vst1.32	{d16-d17}, [r2]
   20154:	bne	20134 <__assert_fail@plt+0xea10>
   20158:	b	20174 <__assert_fail@plt+0xea50>
   2015c:	mov	r0, r9
   20160:	mov	r1, #255	; 0xff
   20164:	mov	r2, #32
   20168:	bl	1161c <memset@plt>
   2016c:	ldr	lr, [sp, #12]
   20170:	ldr	ip, [sp, #28]
   20174:	ldr	r0, [ip, #128]	; 0x80
   20178:	tst	r0, #64	; 0x40
   2017c:	bne	2018c <__assert_fail@plt+0xea68>
   20180:	ldr	r1, [fp, #-1096]	; 0xfffffbb8
   20184:	bic	r1, r1, #1024	; 0x400
   20188:	str	r1, [fp, #-1096]	; 0xfffffbb8
   2018c:	tst	r0, #128	; 0x80
   20190:	beq	1ffc8 <__assert_fail@plt+0xe8a4>
   20194:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   20198:	bic	r0, r0, #1
   2019c:	str	r0, [fp, #-1096]	; 0xfffffbb8
   201a0:	b	1ffc8 <__assert_fail@plt+0xe8a4>
   201a4:	ldr	r3, [sp, #4]
   201a8:	mov	r0, #0
   201ac:	add	r1, r9, r0
   201b0:	add	r2, r3, r0
   201b4:	add	r0, r0, #16
   201b8:	vld1.32	{d18-d19}, [r2]
   201bc:	vld1.32	{d20-d21}, [r1]
   201c0:	cmp	r0, #32
   201c4:	vand	q9, q10, q9
   201c8:	vorr	q8, q9, q8
   201cc:	vst1.32	{d18-d19}, [r1]
   201d0:	bne	201ac <__assert_fail@plt+0xea88>
   201d4:	vext.8	q9, q8, q8, #8
   201d8:	mov	r5, lr
   201dc:	ldr	lr, [sp, #12]
   201e0:	ldr	r3, [sp, #20]
   201e4:	vorr	q8, q8, q9
   201e8:	vdup.32	q9, d16[1]
   201ec:	vorr	q8, q8, q9
   201f0:	vmov.32	r0, d16[0]
   201f4:	cmp	r0, #0
   201f8:	beq	204f0 <__assert_fail@plt+0xedcc>
   201fc:	tst	r7, #2048	; 0x800
   20200:	beq	202c0 <__assert_fail@plt+0xeb9c>
   20204:	tst	r7, #4194304	; 0x400000
   20208:	beq	20220 <__assert_fail@plt+0xeafc>
   2020c:	cmp	r3, #1
   20210:	bne	20220 <__assert_fail@plt+0xeafc>
   20214:	mov	r0, r9
   20218:	vst1.64	{d8-d9}, [r0]!
   2021c:	b	204ec <__assert_fail@plt+0xedc8>
   20220:	ldr	r0, [ip, #92]	; 0x5c
   20224:	ldr	r7, [sp, #4]
   20228:	vmov.i32	q8, #0	; 0x00000000
   2022c:	cmp	r0, #1
   20230:	ble	20274 <__assert_fail@plt+0xeb50>
   20234:	ldr	r0, [ip, #60]	; 0x3c
   20238:	mov	r1, #0
   2023c:	add	r2, r0, r1
   20240:	add	r3, r7, r1
   20244:	vld1.32	{d20-d21}, [r2]
   20248:	vld1.32	{d18-d19}, [r3]
   2024c:	add	r2, r9, r1
   20250:	add	r1, r1, #16
   20254:	vld1.32	{d22-d23}, [r2]
   20258:	cmp	r1, #32
   2025c:	vand	q9, q10, q9
   20260:	vbic	q9, q11, q9
   20264:	vorr	q8, q9, q8
   20268:	vst1.32	{d18-d19}, [r2]
   2026c:	bne	2023c <__assert_fail@plt+0xeb18>
   20270:	b	202a0 <__assert_fail@plt+0xeb7c>
   20274:	mov	r0, #0
   20278:	add	r1, r9, r0
   2027c:	add	r2, r7, r0
   20280:	add	r0, r0, #16
   20284:	vld1.32	{d18-d19}, [r2]
   20288:	vld1.32	{d20-d21}, [r1]
   2028c:	cmp	r0, #32
   20290:	vbic	q9, q10, q9
   20294:	vorr	q8, q9, q8
   20298:	vst1.32	{d18-d19}, [r1]
   2029c:	bne	20278 <__assert_fail@plt+0xeb54>
   202a0:	vext.8	q9, q8, q8, #8
   202a4:	ldr	r3, [sp, #20]
   202a8:	vorr	q8, q8, q9
   202ac:	vdup.32	q9, d16[1]
   202b0:	vorr	q8, q8, q9
   202b4:	vmov.32	r0, d16[0]
   202b8:	cmp	r0, #0
   202bc:	beq	204f0 <__assert_fail@plt+0xedcc>
   202c0:	mov	r7, #0
   202c4:	cmp	r6, #1
   202c8:	blt	2046c <__assert_fail@plt+0xed48>
   202cc:	add	sl, sp, #32
   202d0:	cmp	r3, #1
   202d4:	bne	20300 <__assert_fail@plt+0xebdc>
   202d8:	ldr	r1, [sp, #8]
   202dc:	add	r0, sp, #32
   202e0:	add	r0, r0, r7, lsl #5
   202e4:	ldrb	r1, [r1, lr, lsl #3]
   202e8:	ubfx	r2, r1, #5, #3
   202ec:	and	r1, r1, #31
   202f0:	ldr	r0, [r0, r2, lsl #2]
   202f4:	mov	r2, #1
   202f8:	tst	r0, r2, lsl r1
   202fc:	beq	20454 <__assert_fail@plt+0xed30>
   20300:	vmov.i32	q8, #0	; 0x00000000
   20304:	mov	r0, #0
   20308:	add	r1, sl, r0
   2030c:	add	r2, r9, r0
   20310:	vld1.32	{d20-d21}, [r1]
   20314:	vld1.32	{d18-d19}, [r2]
   20318:	add	r1, r4, r0
   2031c:	add	r0, r0, #16
   20320:	cmp	r0, #32
   20324:	vand	q9, q10, q9
   20328:	vorr	q8, q9, q8
   2032c:	vst1.32	{d18-d19}, [r1]
   20330:	bne	20308 <__assert_fail@plt+0xebe4>
   20334:	vext.8	q9, q8, q8, #8
   20338:	vorr	q8, q8, q9
   2033c:	vdup.32	q9, d16[1]
   20340:	vorr	q8, q8, q9
   20344:	vmov.32	r0, d16[0]
   20348:	cmp	r0, #0
   2034c:	beq	20454 <__assert_fail@plt+0xed30>
   20350:	vmov.i32	q5, #0	; 0x00000000
   20354:	vmov.i32	q8, #0	; 0x00000000
   20358:	mov	r0, #0
   2035c:	add	r1, r9, r0
   20360:	add	r2, sl, r0
   20364:	vld1.32	{d18-d19}, [r2]
   20368:	vld1.32	{d20-d21}, [r1]
   2036c:	add	r2, r8, r0
   20370:	add	r0, r0, #16
   20374:	cmp	r0, #32
   20378:	vbic	q11, q10, q9
   2037c:	vbic	q9, q9, q10
   20380:	vorr	q5, q11, q5
   20384:	vorr	q8, q9, q8
   20388:	vst1.32	{d18-d19}, [r2]
   2038c:	vst1.32	{d22-d23}, [r1]
   20390:	bne	2035c <__assert_fail@plt+0xec38>
   20394:	vext.8	q9, q8, q8, #8
   20398:	vorr	q8, q8, q9
   2039c:	vdup.32	q9, d16[1]
   203a0:	vorr	q8, q8, q9
   203a4:	vmov.32	r0, d16[0]
   203a8:	cmp	r0, #0
   203ac:	beq	20408 <__assert_fail@plt+0xece4>
   203b0:	mov	r0, r8
   203b4:	add	r2, sp, #32
   203b8:	mov	r1, r4
   203bc:	vld1.32	{d16-d17}, [r0]!
   203c0:	mov	r3, r2
   203c4:	add	r2, r2, r6, lsl #5
   203c8:	vld1.32	{d18-d19}, [r1]!
   203cc:	vld1.64	{d20-d21}, [r0]
   203d0:	add	r0, r3, r7, lsl #5
   203d4:	vst1.32	{d16-d17}, [r2]!
   203d8:	vld1.64	{d16-d17}, [r1]
   203dc:	add	r1, r7, r7, lsl #1
   203e0:	vst1.32	{d20-d21}, [r2]
   203e4:	vst1.32	{d18-d19}, [r0]!
   203e8:	add	r1, r5, r1, lsl #2
   203ec:	vst1.32	{d16-d17}, [r0]
   203f0:	add	r0, r6, r6, lsl #1
   203f4:	add	r0, r5, r0, lsl #2
   203f8:	bl	1d158 <__assert_fail@plt+0xba34>
   203fc:	cmp	r0, #0
   20400:	bne	208b4 <__assert_fail@plt+0xf190>
   20404:	add	r6, r6, #1
   20408:	ldr	r0, [sp, #16]
   2040c:	ldr	r1, [sp, #24]
   20410:	ldr	r0, [r0, #12]
   20414:	ldr	r1, [r0, r1, lsl #2]
   20418:	add	r0, r7, r7, lsl #1
   2041c:	add	r0, r5, r0, lsl #2
   20420:	bl	1cfbc <__assert_fail@plt+0xb898>
   20424:	cmp	r0, #0
   20428:	beq	208b4 <__assert_fail@plt+0xf190>
   2042c:	vext.8	q8, q5, q8, #8
   20430:	vorr	q8, q5, q8
   20434:	vdup.32	q9, d16[1]
   20438:	vorr	q8, q8, q9
   2043c:	vmov.32	r0, d16[0]
   20440:	cmp	r0, #0
   20444:	beq	20468 <__assert_fail@plt+0xed44>
   20448:	ldr	ip, [sp, #28]
   2044c:	ldr	lr, [sp, #12]
   20450:	ldr	r3, [sp, #20]
   20454:	add	r7, r7, #1
   20458:	add	sl, sl, #32
   2045c:	cmp	r7, r6
   20460:	blt	202d0 <__assert_fail@plt+0xebac>
   20464:	b	2046c <__assert_fail@plt+0xed48>
   20468:	ldr	ip, [sp, #28]
   2046c:	ldr	sl, [sp, #16]
   20470:	cmp	r7, r6
   20474:	bne	204f0 <__assert_fail@plt+0xedcc>
   20478:	mov	r0, r9
   2047c:	ldr	r1, [sp, #24]
   20480:	vld1.32	{d16-d17}, [r0]!
   20484:	vld1.64	{d18-d19}, [r0]
   20488:	add	r0, sp, #32
   2048c:	add	r0, r0, r7, lsl #5
   20490:	vst1.32	{d16-d17}, [r0]!
   20494:	vst1.32	{d18-d19}, [r0]
   20498:	ldr	r0, [sl, #12]
   2049c:	ldr	sl, [r0, r1, lsl #2]
   204a0:	add	r0, r7, r7, lsl #1
   204a4:	mov	r1, #1
   204a8:	str	r1, [r5, r0, lsl #2]
   204ac:	add	r5, r5, r0, lsl #2
   204b0:	mov	r0, #4
   204b4:	mov	r6, r5
   204b8:	str	r1, [r6, #4]!
   204bc:	bl	22898 <__assert_fail@plt+0x11174>
   204c0:	cmp	r0, #0
   204c4:	str	r0, [r5, #8]
   204c8:	beq	208dc <__assert_fail@plt+0xf1b8>
   204cc:	str	sl, [r0]
   204d0:	ldr	ip, [sp, #28]
   204d4:	ldr	sl, [sp, #16]
   204d8:	mov	r0, r9
   204dc:	sub	lr, fp, #6144	; 0x1800
   204e0:	add	r6, r7, #1
   204e4:	vst1.64	{d8-d9}, [r0]!
   204e8:	sub	r5, lr, #120	; 0x78
   204ec:	vst1.64	{d8-d9}, [r0]
   204f0:	ldr	r1, [sp, #24]
   204f4:	ldr	r0, [sl, #8]
   204f8:	add	r1, r1, #1
   204fc:	cmp	r1, r0
   20500:	blt	1ff7c <__assert_fail@plt+0xe858>
   20504:	mov	r0, #0
   20508:	cmp	r6, #0
   2050c:	ble	208f4 <__assert_fail@plt+0xf1d0>
   20510:	str	r0, [fp, #-3152]	; 0xfffff3b0
   20514:	add	r0, r6, #1
   20518:	str	r6, [sp, #20]
   2051c:	str	r0, [fp, #-3156]	; 0xfffff3ac
   20520:	lsl	r0, r0, #2
   20524:	bl	22898 <__assert_fail@plt+0x11174>
   20528:	cmp	r0, #0
   2052c:	str	r0, [fp, #-3148]	; 0xfffff3b4
   20530:	mov	r0, #0
   20534:	movweq	r0, #12
   20538:	str	r0, [fp, #-72]	; 0xffffffb8
   2053c:	beq	20920 <__assert_fail@plt+0xf1fc>
   20540:	vmov.i32	q8, #0	; 0x00000000
   20544:	sub	lr, fp, #3072	; 0xc00
   20548:	ldr	r1, [sp, #28]
   2054c:	add	r7, sp, #32
   20550:	mov	r4, #0
   20554:	mov	r2, #0
   20558:	sub	r0, lr, #120	; 0x78
   2055c:	vst1.64	{d16-d17}, [r0]!
   20560:	vst1.64	{d16-d17}, [r0]
   20564:	mov	r0, #0
   20568:	str	r0, [sp, #12]
   2056c:	mov	r0, #0
   20570:	str	r2, [sp, #24]
   20574:	str	r0, [fp, #-3152]	; 0xfffff3b0
   20578:	add	r0, r2, r2, lsl #1
   2057c:	add	r0, r5, r0, lsl #2
   20580:	ldr	r6, [r0, #4]
   20584:	cmp	r6, #1
   20588:	blt	205ec <__assert_fail@plt+0xeec8>
   2058c:	ldr	sl, [r0, #8]
   20590:	mov	r5, #0
   20594:	ldr	r0, [sl, r5, lsl #2]
   20598:	ldr	r2, [r1, #12]
   2059c:	ldr	r0, [r2, r0, lsl #2]
   205a0:	cmn	r0, #1
   205a4:	beq	205d0 <__assert_fail@plt+0xeeac>
   205a8:	ldr	r1, [r1, #24]
   205ac:	add	r0, r0, r0, lsl #1
   205b0:	sub	lr, fp, #3072	; 0xc00
   205b4:	add	r1, r1, r0, lsl #2
   205b8:	sub	r0, lr, #84	; 0x54
   205bc:	bl	1cdb0 <__assert_fail@plt+0xb68c>
   205c0:	ldr	r1, [sp, #28]
   205c4:	mov	r4, #0
   205c8:	cmp	r0, #0
   205cc:	bne	20874 <__assert_fail@plt+0xf150>
   205d0:	add	r5, r5, #1
   205d4:	cmp	r5, r6
   205d8:	blt	20594 <__assert_fail@plt+0xee70>
   205dc:	ldr	sl, [sp, #16]
   205e0:	sub	lr, fp, #6144	; 0x1800
   205e4:	str	r4, [fp, #-72]	; 0xffffffb8
   205e8:	sub	r5, lr, #120	; 0x78
   205ec:	sub	lr, fp, #3072	; 0xc00
   205f0:	sub	r0, fp, #72	; 0x48
   205f4:	mov	r3, #0
   205f8:	sub	r2, lr, #84	; 0x54
   205fc:	bl	1d23c <__assert_fail@plt+0xbb18>
   20600:	ldr	r1, [sp, #24]
   20604:	ldr	r4, [fp, #-72]	; 0xffffffb8
   20608:	mov	r6, r0
   2060c:	cmp	r0, #0
   20610:	str	r0, [r9, r1, lsl #2]
   20614:	bne	20620 <__assert_fail@plt+0xeefc>
   20618:	cmp	r4, #0
   2061c:	bne	20880 <__assert_fail@plt+0xf15c>
   20620:	ldrsb	r0, [r6, #52]	; 0x34
   20624:	cmn	r0, #1
   20628:	ble	20640 <__assert_fail@plt+0xef1c>
   2062c:	sub	lr, fp, #2048	; 0x800
   20630:	str	r6, [r8, r1, lsl #2]
   20634:	sub	r0, lr, #72	; 0x48
   20638:	str	r6, [r0, r1, lsl #2]
   2063c:	b	206dc <__assert_fail@plt+0xefb8>
   20640:	ldr	r1, [sp, #28]
   20644:	sub	lr, fp, #3072	; 0xc00
   20648:	sub	r0, fp, #72	; 0x48
   2064c:	mov	r3, #1
   20650:	sub	r2, lr, #84	; 0x54
   20654:	bl	1d23c <__assert_fail@plt+0xbb18>
   20658:	ldr	r2, [sp, #24]
   2065c:	sub	lr, fp, #2048	; 0x800
   20660:	cmp	r0, #0
   20664:	sub	r1, lr, #72	; 0x48
   20668:	str	r0, [r1, r2, lsl #2]
   2066c:	bne	2067c <__assert_fail@plt+0xef58>
   20670:	ldr	r1, [fp, #-72]	; 0xffffffb8
   20674:	cmp	r1, #0
   20678:	bne	20880 <__assert_fail@plt+0xf15c>
   2067c:	cmp	r6, r0
   20680:	beq	206a8 <__assert_fail@plt+0xef84>
   20684:	ldr	r1, [sp, #28]
   20688:	ldr	r2, [sp, #12]
   2068c:	ldr	r0, [r1, #92]	; 0x5c
   20690:	cmp	r0, #1
   20694:	mov	r0, #0
   20698:	movwgt	r0, #1
   2069c:	orr	r2, r2, r0
   206a0:	str	r2, [sp, #12]
   206a4:	b	206ac <__assert_fail@plt+0xef88>
   206a8:	ldr	r1, [sp, #28]
   206ac:	sub	lr, fp, #3072	; 0xc00
   206b0:	sub	r0, fp, #72	; 0x48
   206b4:	mov	r3, #2
   206b8:	sub	r2, lr, #84	; 0x54
   206bc:	bl	1d23c <__assert_fail@plt+0xbb18>
   206c0:	ldr	r1, [sp, #24]
   206c4:	ldr	r4, [fp, #-72]	; 0xffffffb8
   206c8:	cmp	r0, #0
   206cc:	str	r0, [r8, r1, lsl #2]
   206d0:	bne	206dc <__assert_fail@plt+0xefb8>
   206d4:	cmp	r4, #0
   206d8:	bne	20880 <__assert_fail@plt+0xf15c>
   206dc:	sub	lr, fp, #3072	; 0xc00
   206e0:	mov	r0, #0
   206e4:	sub	r1, lr, #120	; 0x78
   206e8:	add	r2, r1, r0
   206ec:	add	r3, r7, r0
   206f0:	add	r0, r0, #16
   206f4:	vld1.32	{d16-d17}, [r3]
   206f8:	vld1.32	{d18-d19}, [r2]
   206fc:	cmp	r0, #32
   20700:	vorr	q8, q9, q8
   20704:	vst1.32	{d16-d17}, [r2]
   20708:	bne	206e8 <__assert_fail@plt+0xefc4>
   2070c:	ldr	r2, [sp, #24]
   20710:	ldr	r0, [sp, #20]
   20714:	ldr	r1, [sp, #28]
   20718:	add	r7, r7, #32
   2071c:	add	r2, r2, #1
   20720:	cmp	r2, r0
   20724:	bne	2056c <__assert_fail@plt+0xee48>
   20728:	ldr	r0, [sp, #12]
   2072c:	tst	r0, #1
   20730:	bne	20930 <__assert_fail@plt+0xf20c>
   20734:	mov	r0, #4
   20738:	mov	r1, #256	; 0x100
   2073c:	bl	22844 <__assert_fail@plt+0x11120>
   20740:	cmp	r0, #0
   20744:	str	r0, [sl, #44]	; 0x2c
   20748:	beq	20880 <__assert_fail@plt+0xf15c>
   2074c:	ldr	r4, [sp, #28]
   20750:	mov	sl, r0
   20754:	mov	r1, #0
   20758:	add	ip, sp, #32
   2075c:	mov	r3, #0
   20760:	sub	lr, fp, #3072	; 0xc00
   20764:	sub	r0, lr, #120	; 0x78
   20768:	ldr	r7, [r0, r3, lsl #2]
   2076c:	cmp	r7, #0
   20770:	beq	207ec <__assert_fail@plt+0xf0c8>
   20774:	add	r6, r4, r3, lsl #2
   20778:	lsl	r5, r3, #5
   2077c:	add	r0, r6, #96	; 0x60
   20780:	mov	r6, #1
   20784:	tst	r7, #1
   20788:	bne	207a8 <__assert_fail@plt+0xf084>
   2078c:	lsr	r2, r7, #1
   20790:	cmp	r1, r7, lsr #1
   20794:	add	r5, r5, #1
   20798:	lsl	r6, r6, #1
   2079c:	mov	r7, r2
   207a0:	bne	20784 <__assert_fail@plt+0xf060>
   207a4:	b	207ec <__assert_fail@plt+0xf0c8>
   207a8:	mov	r4, sl
   207ac:	mov	lr, #0
   207b0:	ldr	sl, [ip, lr, lsl #3]
   207b4:	add	lr, lr, #4
   207b8:	tst	sl, r6
   207bc:	beq	207b0 <__assert_fail@plt+0xf08c>
   207c0:	ldr	r2, [r0]
   207c4:	mov	sl, r4
   207c8:	tst	r2, r6
   207cc:	sub	r2, fp, #2048	; 0x800
   207d0:	sub	r2, r2, #72	; 0x48
   207d4:	moveq	r2, r9
   207d8:	add	r2, r2, lr
   207dc:	ldr	r2, [r2, #-4]
   207e0:	str	r2, [r4, r5, lsl #2]
   207e4:	ldr	r4, [sp, #28]
   207e8:	b	2078c <__assert_fail@plt+0xf068>
   207ec:	add	r3, r3, #1
   207f0:	add	ip, ip, #4
   207f4:	cmp	r3, #8
   207f8:	bne	20760 <__assert_fail@plt+0xf03c>
   207fc:	ldrb	r0, [fp, #-3191]	; 0xfffff389
   20800:	ldr	r5, [sp, #20]
   20804:	sub	lr, fp, #6144	; 0x1800
   20808:	sub	r4, lr, #120	; 0x78
   2080c:	tst	r0, #4
   20810:	beq	20850 <__assert_fail@plt+0xf12c>
   20814:	add	r1, sp, #32
   20818:	mov	r2, r5
   2081c:	ldrb	r0, [r1, #1]
   20820:	tst	r0, #4
   20824:	bne	2083c <__assert_fail@plt+0xf118>
   20828:	add	r1, r1, #32
   2082c:	subs	r2, r2, #1
   20830:	add	r8, r8, #4
   20834:	bne	2081c <__assert_fail@plt+0xf0f8>
   20838:	b	20850 <__assert_fail@plt+0xf12c>
   2083c:	ldr	r0, [sp, #12]
   20840:	ldr	r1, [r8]
   20844:	tst	r0, #1
   20848:	str	r1, [sl, #40]	; 0x28
   2084c:	strne	r1, [sl, #1064]	; 0x428
   20850:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20854:	bl	132e4 <__assert_fail@plt+0x1bc0>
   20858:	add	r4, r4, #8
   2085c:	ldr	r0, [r4], #12
   20860:	bl	132e4 <__assert_fail@plt+0x1bc0>
   20864:	subs	r5, r5, #1
   20868:	bne	2085c <__assert_fail@plt+0xf138>
   2086c:	mov	r0, #1
   20870:	b	20910 <__assert_fail@plt+0xf1ec>
   20874:	sub	lr, fp, #6144	; 0x1800
   20878:	str	r0, [fp, #-72]	; 0xffffffb8
   2087c:	sub	r5, lr, #120	; 0x78
   20880:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20884:	bl	132e4 <__assert_fail@plt+0x1bc0>
   20888:	ldr	r1, [sp, #20]
   2088c:	cmp	r1, #1
   20890:	blt	208d4 <__assert_fail@plt+0xf1b0>
   20894:	add	r4, r5, #8
   20898:	ldr	r0, [r4], #12
   2089c:	mov	r5, r1
   208a0:	bl	132e4 <__assert_fail@plt+0x1bc0>
   208a4:	mov	r1, r5
   208a8:	subs	r1, r5, #1
   208ac:	bne	20898 <__assert_fail@plt+0xf174>
   208b0:	b	208d4 <__assert_fail@plt+0xf1b0>
   208b4:	mov	r7, r6
   208b8:	cmp	r7, #1
   208bc:	blt	208d4 <__assert_fail@plt+0xf1b0>
   208c0:	add	r4, r5, #8
   208c4:	ldr	r0, [r4], #12
   208c8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   208cc:	subs	r7, r7, #1
   208d0:	bne	208c4 <__assert_fail@plt+0xf1a0>
   208d4:	mov	r0, #0
   208d8:	b	20910 <__assert_fail@plt+0xf1ec>
   208dc:	mov	r0, #0
   208e0:	sub	lr, fp, #6144	; 0x1800
   208e4:	str	r0, [r6]
   208e8:	str	r0, [r5]
   208ec:	sub	r5, lr, #120	; 0x78
   208f0:	b	208b8 <__assert_fail@plt+0xf194>
   208f4:	bne	20910 <__assert_fail@plt+0xf1ec>
   208f8:	mov	r0, #4
   208fc:	mov	r1, #256	; 0x100
   20900:	bl	22844 <__assert_fail@plt+0x11120>
   20904:	cmp	r0, #0
   20908:	str	r0, [sl, #44]	; 0x2c
   2090c:	movwne	r0, #1
   20910:	sub	sp, fp, #64	; 0x40
   20914:	vpop	{d8-d11}
   20918:	add	sp, sp, #4
   2091c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20920:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20924:	bl	132e4 <__assert_fail@plt+0x1bc0>
   20928:	ldr	r1, [sp, #20]
   2092c:	b	20894 <__assert_fail@plt+0xf170>
   20930:	mov	r0, #4
   20934:	mov	r1, #512	; 0x200
   20938:	bl	22844 <__assert_fail@plt+0x11120>
   2093c:	cmp	r0, #0
   20940:	str	r0, [sl, #48]	; 0x30
   20944:	beq	20880 <__assert_fail@plt+0xf15c>
   20948:	sub	lr, fp, #2048	; 0x800
   2094c:	mov	sl, r0
   20950:	sub	ip, r9, #4
   20954:	mov	r3, #0
   20958:	add	r7, sp, #32
   2095c:	mov	r6, #0
   20960:	sub	r0, lr, #72	; 0x48
   20964:	sub	lr, r0, #4
   20968:	sub	r0, fp, #3072	; 0xc00
   2096c:	sub	r0, r0, #120	; 0x78
   20970:	ldr	r5, [r0, r6, lsl #2]
   20974:	cmp	r5, #0
   20978:	beq	209e8 <__assert_fail@plt+0xf2c4>
   2097c:	lsl	r4, r6, #5
   20980:	mov	r1, #1
   20984:	tst	r5, #1
   20988:	bne	209a8 <__assert_fail@plt+0xf284>
   2098c:	lsr	r0, r5, #1
   20990:	cmp	r3, r5, lsr #1
   20994:	add	r4, r4, #1
   20998:	lsl	r1, r1, #1
   2099c:	mov	r5, r0
   209a0:	bne	20984 <__assert_fail@plt+0xf260>
   209a4:	b	209e8 <__assert_fail@plt+0xf2c4>
   209a8:	str	sl, [sp, #28]
   209ac:	mov	r2, r7
   209b0:	mov	sl, ip
   209b4:	mov	r9, lr
   209b8:	ldr	r0, [r2], #32
   209bc:	add	sl, sl, #4
   209c0:	add	r9, r9, #4
   209c4:	tst	r0, r1
   209c8:	beq	209b8 <__assert_fail@plt+0xf294>
   209cc:	ldr	r0, [sl]
   209d0:	ldr	sl, [sp, #28]
   209d4:	mov	r2, sl
   209d8:	str	r0, [r2, r4, lsl #2]!
   209dc:	ldr	r0, [r9]
   209e0:	str	r0, [r2, #1024]	; 0x400
   209e4:	b	2098c <__assert_fail@plt+0xf268>
   209e8:	add	r6, r6, #1
   209ec:	add	r7, r7, #4
   209f0:	cmp	r6, #8
   209f4:	bne	20968 <__assert_fail@plt+0xf244>
   209f8:	b	207fc <__assert_fail@plt+0xf0d8>
   209fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a00:	add	fp, sp, #28
   20a04:	sub	sp, sp, #44	; 0x2c
   20a08:	ldr	r4, [r1, #8]
   20a0c:	ldr	r6, [r1, #12]
   20a10:	mov	r9, r0
   20a14:	mov	r0, #1
   20a18:	mov	sl, r1
   20a1c:	str	r0, [sp, #36]	; 0x24
   20a20:	str	r0, [sp, #32]
   20a24:	mov	r0, #4
   20a28:	bl	22898 <__assert_fail@plt+0x11174>
   20a2c:	cmp	r0, #0
   20a30:	str	r0, [sp, #40]	; 0x28
   20a34:	beq	20c80 <__assert_fail@plt+0xf55c>
   20a38:	str	r4, [r0]
   20a3c:	add	r3, sp, #32
   20a40:	mov	r0, r9
   20a44:	mov	r1, sl
   20a48:	mov	r2, r6
   20a4c:	bl	20d40 <__assert_fail@plt+0xf61c>
   20a50:	cmp	r0, #0
   20a54:	bne	20c44 <__assert_fail@plt+0xf520>
   20a58:	add	r0, sl, #16
   20a5c:	mov	r1, #0
   20a60:	str	r0, [sp, #12]
   20a64:	cmp	r6, #1
   20a68:	blt	20c54 <__assert_fail@plt+0xf530>
   20a6c:	ldr	r0, [sl]
   20a70:	ldr	r2, [r0, r6, lsl #2]
   20a74:	cmp	r2, #0
   20a78:	mov	r2, #0
   20a7c:	addeq	r2, r1, #1
   20a80:	ldr	r1, [r9, #120]	; 0x78
   20a84:	cmp	r2, r1
   20a88:	bgt	20c5c <__assert_fail@plt+0xf538>
   20a8c:	mov	r0, #0
   20a90:	str	r6, [sp, #16]
   20a94:	sub	r6, r6, #1
   20a98:	str	r2, [sp, #8]
   20a9c:	str	r0, [sp, #36]	; 0x24
   20aa0:	ldr	r0, [r9, #100]	; 0x64
   20aa4:	ldr	r1, [r0, r6, lsl #2]
   20aa8:	cmp	r1, #0
   20aac:	beq	20c24 <__assert_fail@plt+0xf500>
   20ab0:	ldr	r0, [r1, #20]
   20ab4:	cmp	r0, #1
   20ab8:	blt	20c24 <__assert_fail@plt+0xf500>
   20abc:	ldr	r0, [r9, #84]	; 0x54
   20ac0:	mov	r5, #0
   20ac4:	str	r1, [sp, #24]
   20ac8:	str	r0, [sp, #28]
   20acc:	ldr	r0, [r1, #24]
   20ad0:	ldr	r7, [r0, r5, lsl #2]
   20ad4:	ldr	r0, [sp, #28]
   20ad8:	ldr	r0, [r0]
   20adc:	add	r0, r0, r7, lsl #3
   20ae0:	ldrb	r0, [r0, #6]
   20ae4:	tst	r0, #16
   20ae8:	bne	20b44 <__assert_fail@plt+0xf420>
   20aec:	ldr	r0, [sp, #28]
   20af0:	mov	r2, r6
   20af4:	ldr	r0, [r0]
   20af8:	add	r1, r0, r7, lsl #3
   20afc:	mov	r0, r9
   20b00:	bl	1fdcc <__assert_fail@plt+0xe6a8>
   20b04:	cmp	r0, #0
   20b08:	beq	20c10 <__assert_fail@plt+0xf4ec>
   20b0c:	ldr	r0, [sl]
   20b10:	ldr	r1, [sp, #16]
   20b14:	ldr	r0, [r0, r1, lsl #2]
   20b18:	cmp	r0, #0
   20b1c:	beq	20c10 <__assert_fail@plt+0xf4ec>
   20b20:	ldr	r1, [sp, #28]
   20b24:	add	r0, r0, #4
   20b28:	ldr	r1, [r1, #12]
   20b2c:	ldr	r1, [r1, r7, lsl #2]
   20b30:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   20b34:	mov	r4, #1
   20b38:	cmp	r0, #0
   20b3c:	bne	20bc4 <__assert_fail@plt+0xf4a0>
   20b40:	b	20c10 <__assert_fail@plt+0xf4ec>
   20b44:	ldr	r0, [sl, #12]
   20b48:	ldr	r8, [r9, #84]	; 0x54
   20b4c:	mov	r2, r9
   20b50:	mov	r1, r7
   20b54:	mov	r3, r6
   20b58:	str	r0, [sp, #20]
   20b5c:	mov	r0, r8
   20b60:	bl	1fad4 <__assert_fail@plt+0xe3b0>
   20b64:	mov	r4, r0
   20b68:	cmp	r0, #1
   20b6c:	blt	20b8c <__assert_fail@plt+0xf468>
   20b70:	ldr	r1, [sp, #20]
   20b74:	add	r0, r4, r6
   20b78:	mov	r2, r6
   20b7c:	cmp	r0, r1
   20b80:	ble	20b98 <__assert_fail@plt+0xf474>
   20b84:	mov	r6, r2
   20b88:	b	20bc4 <__assert_fail@plt+0xf4a0>
   20b8c:	cmp	r4, #0
   20b90:	bne	20bc4 <__assert_fail@plt+0xf4a0>
   20b94:	b	20aec <__assert_fail@plt+0xf3c8>
   20b98:	ldr	r1, [sl]
   20b9c:	mov	r6, r2
   20ba0:	ldr	r0, [r1, r0, lsl #2]
   20ba4:	cmp	r0, #0
   20ba8:	beq	20aec <__assert_fail@plt+0xf3c8>
   20bac:	ldr	r1, [r8, #12]
   20bb0:	add	r0, r0, #4
   20bb4:	ldr	r1, [r1, r7, lsl #2]
   20bb8:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   20bbc:	cmp	r0, #0
   20bc0:	beq	20aec <__assert_fail@plt+0xf3c8>
   20bc4:	ldr	r0, [sl, #20]
   20bc8:	cmp	r0, #0
   20bcc:	beq	20bfc <__assert_fail@plt+0xf4d8>
   20bd0:	ldr	r0, [sp, #28]
   20bd4:	ldr	r1, [sp, #12]
   20bd8:	add	r3, r4, r6
   20bdc:	ldr	r0, [r0, #12]
   20be0:	ldr	r2, [r0, r7, lsl #2]
   20be4:	mov	r0, r9
   20be8:	str	r7, [sp]
   20bec:	str	r6, [sp, #4]
   20bf0:	bl	21834 <__assert_fail@plt+0x10110>
   20bf4:	cmp	r0, #0
   20bf8:	bne	20c10 <__assert_fail@plt+0xf4ec>
   20bfc:	add	r0, sp, #32
   20c00:	mov	r1, r7
   20c04:	bl	1cfbc <__assert_fail@plt+0xb898>
   20c08:	cmp	r0, #0
   20c0c:	beq	20c4c <__assert_fail@plt+0xf528>
   20c10:	ldr	r1, [sp, #24]
   20c14:	add	r5, r5, #1
   20c18:	ldr	r0, [r1, #20]
   20c1c:	cmp	r5, r0
   20c20:	blt	20acc <__assert_fail@plt+0xf3a8>
   20c24:	mov	r0, r9
   20c28:	mov	r1, sl
   20c2c:	mov	r2, r6
   20c30:	add	r3, sp, #32
   20c34:	bl	20d40 <__assert_fail@plt+0xf61c>
   20c38:	ldr	r1, [sp, #8]
   20c3c:	cmp	r0, #0
   20c40:	beq	20a64 <__assert_fail@plt+0xf340>
   20c44:	mov	r4, r0
   20c48:	b	20c6c <__assert_fail@plt+0xf548>
   20c4c:	mov	r4, #12
   20c50:	b	20c6c <__assert_fail@plt+0xf548>
   20c54:	mov	r4, #0
   20c58:	b	20c6c <__assert_fail@plt+0xf548>
   20c5c:	lsl	r2, r6, #2
   20c60:	mov	r1, #0
   20c64:	mov	r4, #0
   20c68:	bl	1161c <memset@plt>
   20c6c:	ldr	r0, [sp, #40]	; 0x28
   20c70:	bl	132e4 <__assert_fail@plt+0x1bc0>
   20c74:	mov	r0, r4
   20c78:	sub	sp, fp, #28
   20c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c80:	mov	r0, #0
   20c84:	mov	r4, #12
   20c88:	str	r0, [sp, #32]
   20c8c:	str	r0, [sp, #36]	; 0x24
   20c90:	b	20c74 <__assert_fail@plt+0xf550>
   20c94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20c98:	add	fp, sp, #24
   20c9c:	sub	sp, sp, #16
   20ca0:	cmp	r3, #1
   20ca4:	blt	20d34 <__assert_fail@plt+0xf610>
   20ca8:	mov	r4, r3
   20cac:	mov	r5, r2
   20cb0:	mov	r6, r1
   20cb4:	mov	r7, r0
   20cb8:	mov	r8, sp
   20cbc:	add	r9, sp, #12
   20cc0:	ldr	r1, [r6]
   20cc4:	ldr	r0, [r5]
   20cc8:	cmp	r1, #0
   20ccc:	beq	20d20 <__assert_fail@plt+0xf5fc>
   20cd0:	cmp	r0, #0
   20cd4:	beq	20d24 <__assert_fail@plt+0xf600>
   20cd8:	add	r2, r0, #4
   20cdc:	add	r1, r1, #4
   20ce0:	mov	r0, r8
   20ce4:	bl	1e9c0 <__assert_fail@plt+0xd29c>
   20ce8:	cmp	r0, #0
   20cec:	str	r0, [sp, #12]
   20cf0:	bne	20d38 <__assert_fail@plt+0xf614>
   20cf4:	mov	r0, r9
   20cf8:	mov	r1, r7
   20cfc:	mov	r2, r8
   20d00:	bl	1f8dc <__assert_fail@plt+0xe1b8>
   20d04:	str	r0, [r6]
   20d08:	ldr	r0, [sp, #8]
   20d0c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   20d10:	ldr	r0, [sp, #12]
   20d14:	cmp	r0, #0
   20d18:	beq	20d24 <__assert_fail@plt+0xf600>
   20d1c:	b	20d38 <__assert_fail@plt+0xf614>
   20d20:	str	r0, [r6]
   20d24:	add	r6, r6, #4
   20d28:	add	r5, r5, #4
   20d2c:	subs	r4, r4, #1
   20d30:	bne	20cc0 <__assert_fail@plt+0xf59c>
   20d34:	mov	r0, #0
   20d38:	sub	sp, fp, #24
   20d3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d44:	add	fp, sp, #28
   20d48:	sub	sp, sp, #84	; 0x54
   20d4c:	mov	r6, r3
   20d50:	mov	r3, #0
   20d54:	ldr	r7, [r0, #84]	; 0x54
   20d58:	mov	r4, r2
   20d5c:	str	r0, [sp, #44]	; 0x2c
   20d60:	str	r1, [sp, #48]	; 0x30
   20d64:	str	r3, [sp, #52]	; 0x34
   20d68:	str	r4, [sp, #40]	; 0x28
   20d6c:	ldr	r2, [r0, #100]	; 0x64
   20d70:	ldr	r8, [r2, r4, lsl #2]
   20d74:	ldr	r2, [r6, #4]
   20d78:	cmp	r8, #0
   20d7c:	mov	r0, r8
   20d80:	addne	r0, r0, #4
   20d84:	cmp	r2, #0
   20d88:	str	r0, [sp, #36]	; 0x24
   20d8c:	beq	21108 <__assert_fail@plt+0xf9e4>
   20d90:	cmp	r8, #0
   20d94:	beq	210dc <__assert_fail@plt+0xf9b8>
   20d98:	mov	r0, #0
   20d9c:	mov	r1, r7
   20da0:	mov	r2, r6
   20da4:	str	r7, [sp, #28]
   20da8:	str	r6, [sp, #20]
   20dac:	str	r0, [sp, #56]	; 0x38
   20db0:	add	r0, sp, #56	; 0x38
   20db4:	bl	1f8dc <__assert_fail@plt+0xe1b8>
   20db8:	ldr	r9, [sp, #56]	; 0x38
   20dbc:	cmp	r9, #0
   20dc0:	bne	21424 <__assert_fail@plt+0xfd00>
   20dc4:	mov	r6, r0
   20dc8:	mov	r5, r0
   20dcc:	ldr	r2, [sp, #20]
   20dd0:	ldr	r0, [r6, #28]!
   20dd4:	cmp	r0, #0
   20dd8:	bne	20e6c <__assert_fail@plt+0xf748>
   20ddc:	ldr	r0, [r2, #4]
   20de0:	mov	r4, #0
   20de4:	mov	r7, r2
   20de8:	str	r0, [r5, #28]
   20dec:	lsl	r0, r0, #2
   20df0:	str	r4, [r5, #32]
   20df4:	bl	22898 <__assert_fail@plt+0x11174>
   20df8:	cmp	r0, #0
   20dfc:	mov	r9, #12
   20e00:	str	r0, [r5, #36]	; 0x24
   20e04:	movweq	r4, #12
   20e08:	str	r4, [sp, #56]	; 0x38
   20e0c:	beq	21424 <__assert_fail@plt+0xfd00>
   20e10:	ldr	r0, [r7, #4]
   20e14:	mov	r2, r7
   20e18:	cmp	r0, #1
   20e1c:	blt	20e6c <__assert_fail@plt+0xf748>
   20e20:	mov	r5, #0
   20e24:	ldr	r0, [r2, #8]
   20e28:	ldr	r1, [sp, #28]
   20e2c:	mov	r4, r2
   20e30:	ldr	r0, [r0, r5, lsl #2]
   20e34:	ldr	r1, [r1, #28]
   20e38:	add	r0, r0, r0, lsl #1
   20e3c:	add	r1, r1, r0, lsl #2
   20e40:	mov	r0, r6
   20e44:	bl	1cdb0 <__assert_fail@plt+0xb68c>
   20e48:	cmp	r0, #0
   20e4c:	bne	21434 <__assert_fail@plt+0xfd10>
   20e50:	ldr	r0, [r4, #4]
   20e54:	add	r5, r5, #1
   20e58:	mov	r2, r4
   20e5c:	cmp	r5, r0
   20e60:	blt	20e24 <__assert_fail@plt+0xf700>
   20e64:	mov	r0, #0
   20e68:	str	r0, [sp, #56]	; 0x38
   20e6c:	ldr	r1, [sp, #36]	; 0x24
   20e70:	mov	r0, r2
   20e74:	mov	r2, r6
   20e78:	bl	21450 <__assert_fail@plt+0xfd2c>
   20e7c:	cmp	r0, #0
   20e80:	str	r0, [sp, #52]	; 0x34
   20e84:	bne	21448 <__assert_fail@plt+0xfd24>
   20e88:	ldr	ip, [sp, #48]	; 0x30
   20e8c:	ldr	r4, [sp, #40]	; 0x28
   20e90:	ldr	r7, [sp, #28]
   20e94:	ldr	r6, [sp, #20]
   20e98:	ldr	r0, [ip, #20]
   20e9c:	cmp	r0, #0
   20ea0:	beq	210dc <__assert_fail@plt+0xf9b8>
   20ea4:	cmp	r0, #1
   20ea8:	str	r8, [sp, #12]
   20eac:	blt	210d0 <__assert_fail@plt+0xf9ac>
   20eb0:	ldr	r0, [sp, #44]	; 0x2c
   20eb4:	mov	r8, #0
   20eb8:	ldr	r0, [r0, #116]	; 0x74
   20ebc:	str	r0, [sp, #24]
   20ec0:	ldr	r0, [ip, #24]
   20ec4:	ldr	r1, [sp, #24]
   20ec8:	ldr	r0, [r0, r8, lsl #2]
   20ecc:	add	r0, r0, r0, lsl #1
   20ed0:	add	r1, r1, r0, lsl #3
   20ed4:	ldr	r2, [r1, #8]
   20ed8:	cmp	r2, r4
   20edc:	bge	210c0 <__assert_fail@plt+0xf99c>
   20ee0:	ldr	r1, [r1, #4]
   20ee4:	cmp	r1, r4
   20ee8:	blt	210c0 <__assert_fail@plt+0xf99c>
   20eec:	ldr	r1, [sp, #24]
   20ef0:	ldr	r2, [r7]
   20ef4:	ldr	r0, [r1, r0, lsl #3]!
   20ef8:	ldr	r1, [r1, #12]
   20efc:	ldr	sl, [r2, r0, lsl #3]
   20f00:	ldr	r0, [r6, #4]
   20f04:	cmp	r1, r4
   20f08:	bne	21050 <__assert_fail@plt+0xf92c>
   20f0c:	cmp	r0, #1
   20f10:	blt	210c0 <__assert_fail@plt+0xf99c>
   20f14:	ldr	r3, [r6, #8]
   20f18:	mvn	r1, #0
   20f1c:	str	r1, [sp, #32]
   20f20:	mvn	r1, #0
   20f24:	ldr	r5, [r3]
   20f28:	add	r4, r2, r5, lsl #3
   20f2c:	ldrb	r4, [r4, #4]
   20f30:	cmp	r4, #9
   20f34:	beq	20f50 <__assert_fail@plt+0xf82c>
   20f38:	cmp	r4, #8
   20f3c:	bne	20f64 <__assert_fail@plt+0xf840>
   20f40:	ldr	r4, [r2, r5, lsl #3]
   20f44:	cmp	sl, r4
   20f48:	moveq	r1, r5
   20f4c:	b	20f64 <__assert_fail@plt+0xf840>
   20f50:	ldr	r4, [r2, r5, lsl #3]
   20f54:	cmp	sl, r4
   20f58:	ldr	r4, [sp, #32]
   20f5c:	moveq	r4, r5
   20f60:	str	r4, [sp, #32]
   20f64:	add	r3, r3, #4
   20f68:	subs	r0, r0, #1
   20f6c:	bne	20f24 <__assert_fail@plt+0xf800>
   20f70:	cmp	r1, #0
   20f74:	bmi	20f9c <__assert_fail@plt+0xf878>
   20f78:	ldr	r3, [sp, #36]	; 0x24
   20f7c:	mov	r0, r7
   20f80:	mov	r2, r6
   20f84:	bl	21630 <__assert_fail@plt+0xff0c>
   20f88:	ldr	r6, [sp, #20]
   20f8c:	ldr	r7, [sp, #28]
   20f90:	ldr	ip, [sp, #48]	; 0x30
   20f94:	cmp	r0, #0
   20f98:	bne	21420 <__assert_fail@plt+0xfcfc>
   20f9c:	ldr	sl, [sp, #32]
   20fa0:	ldr	r4, [sp, #40]	; 0x28
   20fa4:	cmp	sl, #0
   20fa8:	bmi	210c0 <__assert_fail@plt+0xf99c>
   20fac:	ldr	r0, [r6, #4]
   20fb0:	cmp	r0, #1
   20fb4:	str	r0, [sp, #16]
   20fb8:	blt	210c0 <__assert_fail@plt+0xf99c>
   20fbc:	mov	r5, #0
   20fc0:	ldr	r0, [r6, #8]
   20fc4:	mov	r1, sl
   20fc8:	ldr	r6, [r0, r5, lsl #2]
   20fcc:	ldr	r0, [r7, #28]
   20fd0:	add	r9, r6, r6, lsl #1
   20fd4:	add	r0, r0, r9, lsl #2
   20fd8:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   20fdc:	cmp	r0, #0
   20fe0:	bne	20ffc <__assert_fail@plt+0xf8d8>
   20fe4:	ldr	r0, [r7, #24]
   20fe8:	mov	r1, sl
   20fec:	add	r0, r0, r9, lsl #2
   20ff0:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   20ff4:	cmp	r0, #0
   20ff8:	beq	2101c <__assert_fail@plt+0xf8f8>
   20ffc:	ldr	r6, [sp, #20]
   21000:	ldr	r0, [sp, #16]
   21004:	ldr	r4, [sp, #40]	; 0x28
   21008:	ldr	ip, [sp, #48]	; 0x30
   2100c:	add	r5, r5, #1
   21010:	cmp	r5, r0
   21014:	blt	20fc0 <__assert_fail@plt+0xf89c>
   21018:	b	210c0 <__assert_fail@plt+0xf99c>
   2101c:	mov	r1, r6
   21020:	ldr	r6, [sp, #20]
   21024:	ldr	r3, [sp, #36]	; 0x24
   21028:	mov	r0, r7
   2102c:	mov	r2, r6
   21030:	bl	21630 <__assert_fail@plt+0xff0c>
   21034:	cmp	r0, #0
   21038:	bne	21420 <__assert_fail@plt+0xfcfc>
   2103c:	ldr	r0, [r6, #4]
   21040:	ldr	r7, [sp, #28]
   21044:	sub	r5, r5, #1
   21048:	str	r0, [sp, #16]
   2104c:	b	21000 <__assert_fail@plt+0xf8dc>
   21050:	cmp	r0, #1
   21054:	blt	210c0 <__assert_fail@plt+0xf99c>
   21058:	mov	r5, #0
   2105c:	ldr	r1, [r6, #8]
   21060:	ldr	r1, [r1, r5, lsl #2]
   21064:	add	r3, r2, r1, lsl #3
   21068:	ldrb	r3, [r3, #4]
   2106c:	orr	r3, r3, #1
   21070:	cmp	r3, #9
   21074:	bne	210ac <__assert_fail@plt+0xf988>
   21078:	ldr	r2, [r2, r1, lsl #3]
   2107c:	cmp	sl, r2
   21080:	bne	210ac <__assert_fail@plt+0xf988>
   21084:	ldr	r3, [sp, #36]	; 0x24
   21088:	mov	r0, r7
   2108c:	mov	r2, r6
   21090:	bl	21630 <__assert_fail@plt+0xff0c>
   21094:	cmp	r0, #0
   21098:	bne	21420 <__assert_fail@plt+0xfcfc>
   2109c:	ldr	r0, [r6, #4]
   210a0:	ldr	r4, [sp, #40]	; 0x28
   210a4:	ldr	ip, [sp, #48]	; 0x30
   210a8:	ldr	r7, [sp, #28]
   210ac:	add	r5, r5, #1
   210b0:	cmp	r5, r0
   210b4:	bge	210c0 <__assert_fail@plt+0xf99c>
   210b8:	ldr	r2, [r7]
   210bc:	b	2105c <__assert_fail@plt+0xf938>
   210c0:	ldr	r0, [ip, #20]
   210c4:	add	r8, r8, #1
   210c8:	cmp	r8, r0
   210cc:	blt	20ec0 <__assert_fail@plt+0xf79c>
   210d0:	ldr	r8, [sp, #12]
   210d4:	mov	r0, #0
   210d8:	str	r0, [sp, #52]	; 0x34
   210dc:	add	r0, sp, #52	; 0x34
   210e0:	mov	r1, r7
   210e4:	mov	r2, r6
   210e8:	bl	1f8dc <__assert_fail@plt+0xe1b8>
   210ec:	ldr	r1, [sp, #48]	; 0x30
   210f0:	ldr	r1, [r1]
   210f4:	str	r0, [r1, r4, lsl #2]
   210f8:	ldr	r9, [sp, #52]	; 0x34
   210fc:	cmp	r9, #0
   21100:	beq	21110 <__assert_fail@plt+0xf9ec>
   21104:	b	21414 <__assert_fail@plt+0xfcf0>
   21108:	ldr	r1, [r1]
   2110c:	str	r3, [r1, r4, lsl #2]
   21110:	cmp	r8, #0
   21114:	beq	21410 <__assert_fail@plt+0xfcec>
   21118:	ldr	r0, [sp, #44]	; 0x2c
   2111c:	ldr	r1, [sp, #40]	; 0x28
   21120:	ldr	r0, [r0, #100]	; 0x64
   21124:	ldr	r0, [r0, r1, lsl #2]
   21128:	ldrb	r0, [r0, #52]	; 0x34
   2112c:	tst	r0, #64	; 0x40
   21130:	beq	21410 <__assert_fail@plt+0xfcec>
   21134:	ldr	r0, [sp, #44]	; 0x2c
   21138:	ldr	r9, [sp, #40]	; 0x28
   2113c:	ldr	r8, [r0, #84]	; 0x54
   21140:	mov	r1, r9
   21144:	bl	1ebc8 <__assert_fail@plt+0xd4a4>
   21148:	cmn	r0, #1
   2114c:	str	r0, [sp, #16]
   21150:	beq	21400 <__assert_fail@plt+0xfcdc>
   21154:	ldr	r0, [sp, #36]	; 0x24
   21158:	mov	r6, #0
   2115c:	str	r6, [sp, #56]	; 0x38
   21160:	ldr	r0, [r0, #4]
   21164:	cmp	r0, #0
   21168:	ble	2140c <__assert_fail@plt+0xfce8>
   2116c:	ldr	r3, [sp, #48]	; 0x30
   21170:	add	r1, r9, #1
   21174:	mov	r7, #0
   21178:	str	r1, [sp, #8]
   2117c:	add	r1, sp, #56	; 0x38
   21180:	add	r1, r1, #16
   21184:	str	r1, [sp, #24]
   21188:	add	r1, r3, #16
   2118c:	str	r1, [sp, #28]
   21190:	ldr	r1, [sp, #16]
   21194:	add	r1, r1, r1, lsl #1
   21198:	str	r1, [sp, #12]
   2119c:	ldr	r1, [sp, #36]	; 0x24
   211a0:	ldr	r2, [r3, #8]
   211a4:	ldr	r1, [r1, #8]
   211a8:	ldr	sl, [r1, r7, lsl #2]
   211ac:	ldr	r1, [r8]
   211b0:	add	r1, r1, sl, lsl #3
   211b4:	cmp	sl, r2
   211b8:	ldrb	r1, [r1, #4]
   211bc:	bne	211d8 <__assert_fail@plt+0xfab4>
   211c0:	cmp	r1, #4
   211c4:	bne	213d0 <__assert_fail@plt+0xfcac>
   211c8:	ldr	r1, [r3, #12]
   211cc:	cmp	r1, r9
   211d0:	bne	211e0 <__assert_fail@plt+0xfabc>
   211d4:	b	213d0 <__assert_fail@plt+0xfcac>
   211d8:	cmp	r1, #4
   211dc:	bne	213d0 <__assert_fail@plt+0xfcac>
   211e0:	ldr	r0, [sp, #44]	; 0x2c
   211e4:	ldr	r1, [sp, #12]
   211e8:	str	r7, [sp, #20]
   211ec:	ldr	r7, [sp, #16]
   211f0:	str	r6, [sp, #32]
   211f4:	ldr	r0, [r0, #116]	; 0x74
   211f8:	add	r5, r0, r1, lsl #3
   211fc:	ldr	r0, [r5]
   21200:	cmp	r0, sl
   21204:	bne	21294 <__assert_fail@plt+0xfb70>
   21208:	ldr	r0, [r5, #8]
   2120c:	ldr	r1, [r5, #12]
   21210:	subs	r0, r1, r0
   21214:	add	r6, r0, r9
   21218:	beq	21228 <__assert_fail@plt+0xfb04>
   2121c:	ldr	r0, [r8, #12]
   21220:	add	r0, r0, sl, lsl #2
   21224:	b	21238 <__assert_fail@plt+0xfb14>
   21228:	ldr	r0, [r8, #20]
   2122c:	add	r1, sl, sl, lsl #1
   21230:	add	r0, r0, r1, lsl #2
   21234:	ldr	r0, [r0, #8]
   21238:	ldr	r1, [r3, #12]
   2123c:	cmp	r6, r1
   21240:	bgt	21294 <__assert_fail@plt+0xfb70>
   21244:	ldr	r1, [r3]
   21248:	ldr	r1, [r1, r6, lsl #2]
   2124c:	cmp	r1, #0
   21250:	beq	21294 <__assert_fail@plt+0xfb70>
   21254:	ldr	r4, [r0]
   21258:	add	r0, r1, #4
   2125c:	mov	r1, r4
   21260:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   21264:	cmp	r0, #0
   21268:	beq	2128c <__assert_fail@plt+0xfb68>
   2126c:	ldr	r0, [sp, #44]	; 0x2c
   21270:	ldr	r1, [sp, #28]
   21274:	mov	r2, sl
   21278:	mov	r3, r9
   2127c:	stm	sp, {r4, r6}
   21280:	bl	21834 <__assert_fail@plt+0x10110>
   21284:	cmp	r0, #0
   21288:	beq	212b0 <__assert_fail@plt+0xfb8c>
   2128c:	mov	r0, r5
   21290:	b	21394 <__assert_fail@plt+0xfc70>
   21294:	mov	r0, r5
   21298:	add	r5, r0, #24
   2129c:	ldrb	r0, [r0, #20]
   212a0:	add	r7, r7, #1
   212a4:	cmp	r0, #0
   212a8:	bne	211fc <__assert_fail@plt+0xfad8>
   212ac:	b	213c0 <__assert_fail@plt+0xfc9c>
   212b0:	ldr	r0, [sp, #32]
   212b4:	cmp	r0, #0
   212b8:	bne	212ec <__assert_fail@plt+0xfbc8>
   212bc:	ldr	r0, [sp, #48]	; 0x30
   212c0:	mov	r1, #12
   212c4:	vld1.32	{d16-d17}, [r0], r1
   212c8:	vld1.32	{d18-d19}, [r0]
   212cc:	add	r0, sp, #56	; 0x38
   212d0:	vst1.64	{d16-d17}, [r0], r1
   212d4:	ldr	r1, [sp, #28]
   212d8:	vst1.32	{d18-d19}, [r0]
   212dc:	ldr	r0, [sp, #24]
   212e0:	bl	1d158 <__assert_fail@plt+0xba34>
   212e4:	cmp	r0, #0
   212e8:	bne	2142c <__assert_fail@plt+0xfd08>
   212ec:	ldr	r4, [sp, #40]	; 0x28
   212f0:	ldr	r0, [sp, #24]
   212f4:	mov	r1, r7
   212f8:	str	r4, [sp, #68]	; 0x44
   212fc:	str	sl, [sp, #64]	; 0x40
   21300:	bl	1cfbc <__assert_fail@plt+0xb898>
   21304:	cmp	r0, #0
   21308:	beq	2143c <__assert_fail@plt+0xfd18>
   2130c:	ldr	r5, [sp, #56]	; 0x38
   21310:	ldr	r0, [sp, #44]	; 0x2c
   21314:	add	r1, sp, #56	; 0x38
   21318:	ldr	r4, [r5, r4, lsl #2]
   2131c:	bl	209fc <__assert_fail@plt+0xf2d8>
   21320:	cmp	r0, #0
   21324:	bne	2142c <__assert_fail@plt+0xfd08>
   21328:	ldr	r0, [sp, #48]	; 0x30
   2132c:	ldr	r1, [r0, #4]
   21330:	cmp	r1, #0
   21334:	beq	21350 <__assert_fail@plt+0xfc2c>
   21338:	ldr	r3, [sp, #8]
   2133c:	mov	r0, r8
   21340:	mov	r2, r5
   21344:	bl	20c94 <__assert_fail@plt+0xf570>
   21348:	cmp	r0, #0
   2134c:	bne	2142c <__assert_fail@plt+0xfd08>
   21350:	ldr	r9, [sp, #40]	; 0x28
   21354:	ldr	r0, [sp, #24]
   21358:	mov	r1, r7
   2135c:	str	r5, [sp, #32]
   21360:	str	r4, [r5, r9, lsl #2]
   21364:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   21368:	subs	r1, r0, #1
   2136c:	blt	21384 <__assert_fail@plt+0xfc60>
   21370:	ldr	r2, [sp, #76]	; 0x4c
   21374:	cmp	r2, r0
   21378:	subge	r2, r2, #1
   2137c:	strge	r2, [sp, #76]	; 0x4c
   21380:	bgt	2139c <__assert_fail@plt+0xfc78>
   21384:	ldr	r0, [sp, #44]	; 0x2c
   21388:	add	r1, r7, r7, lsl #1
   2138c:	ldr	r0, [r0, #116]	; 0x74
   21390:	add	r0, r0, r1, lsl #3
   21394:	ldr	r3, [sp, #48]	; 0x30
   21398:	b	21298 <__assert_fail@plt+0xfb74>
   2139c:	ldr	r3, [sp, #80]	; 0x50
   213a0:	add	r0, r3, r0, lsl #2
   213a4:	ldr	r3, [r0]
   213a8:	add	r1, r1, #1
   213ac:	cmp	r1, r2
   213b0:	str	r3, [r0, #-4]
   213b4:	add	r0, r0, #4
   213b8:	blt	213a4 <__assert_fail@plt+0xfc80>
   213bc:	b	21384 <__assert_fail@plt+0xfc60>
   213c0:	ldr	r0, [sp, #36]	; 0x24
   213c4:	ldr	r7, [sp, #20]
   213c8:	ldr	r6, [sp, #32]
   213cc:	ldr	r0, [r0, #4]
   213d0:	add	r7, r7, #1
   213d4:	cmp	r7, r0
   213d8:	blt	2119c <__assert_fail@plt+0xfa78>
   213dc:	mov	r9, #0
   213e0:	cmp	r6, #0
   213e4:	beq	213f0 <__assert_fail@plt+0xfccc>
   213e8:	ldr	r0, [sp, #80]	; 0x50
   213ec:	bl	132e4 <__assert_fail@plt+0x1bc0>
   213f0:	cmp	r9, #0
   213f4:	str	r9, [sp, #52]	; 0x34
   213f8:	moveq	r9, #0
   213fc:	b	21414 <__assert_fail@plt+0xfcf0>
   21400:	mov	r0, #0
   21404:	str	r0, [sp, #52]	; 0x34
   21408:	b	21410 <__assert_fail@plt+0xfcec>
   2140c:	str	r6, [sp, #52]	; 0x34
   21410:	mov	r9, #0
   21414:	mov	r0, r9
   21418:	sub	sp, fp, #28
   2141c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21420:	mov	r9, r0
   21424:	str	r9, [sp, #52]	; 0x34
   21428:	b	21414 <__assert_fail@plt+0xfcf0>
   2142c:	mov	r9, r0
   21430:	b	21440 <__assert_fail@plt+0xfd1c>
   21434:	str	r0, [sp, #56]	; 0x38
   21438:	b	21424 <__assert_fail@plt+0xfd00>
   2143c:	mov	r9, #12
   21440:	ldr	r6, [sp, #56]	; 0x38
   21444:	b	213e0 <__assert_fail@plt+0xfcbc>
   21448:	mov	r9, r0
   2144c:	b	21414 <__assert_fail@plt+0xfcf0>
   21450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21454:	add	fp, sp, #28
   21458:	sub	sp, sp, #4
   2145c:	mov	r9, r0
   21460:	ldr	r0, [r1, #4]
   21464:	mov	r8, #0
   21468:	cmp	r0, #0
   2146c:	beq	2161c <__assert_fail@plt+0xfef8>
   21470:	mov	r5, r2
   21474:	ldr	r2, [r2, #4]
   21478:	cmp	r2, #0
   2147c:	beq	2161c <__assert_fail@plt+0xfef8>
   21480:	mov	sl, r1
   21484:	ldr	r1, [r9, #4]
   21488:	ldr	r7, [r9]
   2148c:	add	r3, r2, r0
   21490:	add	r6, r1, r3
   21494:	cmp	r6, r7
   21498:	ble	214c8 <__assert_fail@plt+0xfda4>
   2149c:	ldr	r0, [r9, #8]
   214a0:	add	r4, r7, r3
   214a4:	lsl	r1, r4, #2
   214a8:	bl	228c8 <__assert_fail@plt+0x111a4>
   214ac:	cmp	r0, #0
   214b0:	beq	21628 <__assert_fail@plt+0xff04>
   214b4:	str	r4, [r9]
   214b8:	str	r0, [r9, #8]
   214bc:	ldr	r1, [r9, #4]
   214c0:	ldr	r2, [r5, #4]
   214c4:	ldr	r0, [sl, #4]
   214c8:	ldr	lr, [r5, #8]
   214cc:	ldr	r4, [sl, #8]
   214d0:	add	r3, r0, r1
   214d4:	sub	r7, r1, #1
   214d8:	add	ip, r3, r2
   214dc:	sub	r0, r0, #1
   214e0:	sub	r3, r2, #1
   214e4:	ldr	r1, [lr, r3, lsl #2]
   214e8:	ldr	r6, [r4, r0, lsl #2]
   214ec:	cmp	r6, r1
   214f0:	beq	2151c <__assert_fail@plt+0xfdf8>
   214f4:	blt	2150c <__assert_fail@plt+0xfde8>
   214f8:	sub	r6, r0, #1
   214fc:	cmp	r0, #0
   21500:	mov	r0, r6
   21504:	bgt	214e8 <__assert_fail@plt+0xfdc4>
   21508:	b	21580 <__assert_fail@plt+0xfe5c>
   2150c:	cmp	r2, #2
   21510:	mov	r2, r3
   21514:	bge	214e0 <__assert_fail@plt+0xfdbc>
   21518:	b	21580 <__assert_fail@plt+0xfe5c>
   2151c:	cmp	r7, #0
   21520:	bmi	2155c <__assert_fail@plt+0xfe38>
   21524:	ldr	r8, [r9, #8]
   21528:	mov	r1, r7
   2152c:	ldr	r7, [r8, r1, lsl #2]
   21530:	cmp	r7, r6
   21534:	ble	2154c <__assert_fail@plt+0xfe28>
   21538:	sub	r7, r1, #1
   2153c:	cmp	r1, #0
   21540:	mov	r1, r7
   21544:	bgt	2152c <__assert_fail@plt+0xfe08>
   21548:	b	2155c <__assert_fail@plt+0xfe38>
   2154c:	mov	r7, r1
   21550:	bne	2155c <__assert_fail@plt+0xfe38>
   21554:	mov	r7, r1
   21558:	b	21568 <__assert_fail@plt+0xfe44>
   2155c:	ldr	r1, [r9, #8]
   21560:	sub	ip, ip, #1
   21564:	str	r6, [r1, ip, lsl #2]
   21568:	cmp	r0, #1
   2156c:	mov	r8, #0
   21570:	blt	21580 <__assert_fail@plt+0xfe5c>
   21574:	cmp	r2, #2
   21578:	mov	r2, r3
   2157c:	bge	214dc <__assert_fail@plt+0xfdb8>
   21580:	ldr	r2, [r9, #4]
   21584:	ldr	lr, [sl, #4]
   21588:	ldr	r4, [r5, #4]
   2158c:	ldr	r0, [r9, #8]
   21590:	subs	r1, r2, #1
   21594:	add	r3, r1, lr
   21598:	add	r3, r3, r4
   2159c:	sub	r7, r3, ip
   215a0:	add	r6, r7, #1
   215a4:	add	r5, r6, r2
   215a8:	str	r5, [r9, #4]
   215ac:	blt	2160c <__assert_fail@plt+0xfee8>
   215b0:	cmp	r7, #0
   215b4:	bmi	2160c <__assert_fail@plt+0xfee8>
   215b8:	add	r2, r2, r4
   215bc:	add	r2, r2, lr
   215c0:	sub	r2, r2, ip
   215c4:	add	r7, r0, r2, lsl #2
   215c8:	ldr	r2, [r0, r1, lsl #2]
   215cc:	ldr	r5, [r0, r3, lsl #2]
   215d0:	cmp	r5, r2
   215d4:	bgt	215f0 <__assert_fail@plt+0xfecc>
   215d8:	str	r2, [r7, r1, lsl #2]
   215dc:	sub	r2, r1, #1
   215e0:	cmp	r1, #0
   215e4:	mov	r1, r2
   215e8:	bgt	215c8 <__assert_fail@plt+0xfea4>
   215ec:	b	2160c <__assert_fail@plt+0xfee8>
   215f0:	str	r5, [r7, r1, lsl #2]
   215f4:	sub	r7, r7, #4
   215f8:	subs	r6, r6, #1
   215fc:	sub	r3, r3, #1
   21600:	mov	r2, #0
   21604:	bne	215c8 <__assert_fail@plt+0xfea4>
   21608:	b	21610 <__assert_fail@plt+0xfeec>
   2160c:	mov	r2, r6
   21610:	add	r1, r0, ip, lsl #2
   21614:	lsl	r2, r2, #2
   21618:	bl	11460 <memcpy@plt>
   2161c:	mov	r0, r8
   21620:	sub	sp, fp, #28
   21624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21628:	mov	r8, #12
   2162c:	b	2161c <__assert_fail@plt+0xfef8>
   21630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21634:	add	fp, sp, #28
   21638:	sub	sp, sp, #36	; 0x24
   2163c:	mov	r4, r2
   21640:	mov	r2, r0
   21644:	ldr	r0, [r0, #28]
   21648:	str	r1, [sp, #20]
   2164c:	add	r1, r1, r1, lsl #1
   21650:	mov	r5, #0
   21654:	str	r3, [sp, #4]
   21658:	str	r5, [sp, #28]
   2165c:	str	r5, [sp, #24]
   21660:	str	r5, [sp, #32]
   21664:	add	r1, r0, r1, lsl #2
   21668:	mov	r0, r1
   2166c:	ldr	r7, [r0, #4]!
   21670:	cmp	r7, #1
   21674:	blt	21818 <__assert_fail@plt+0x100f4>
   21678:	add	r8, r1, #8
   2167c:	mov	sl, #0
   21680:	str	r0, [sp, #8]
   21684:	str	r1, [sp, #16]
   21688:	ldr	r0, [r8]
   2168c:	ldr	r1, [sp, #20]
   21690:	ldr	r0, [r0, sl, lsl #2]
   21694:	cmp	r0, r1
   21698:	beq	21770 <__assert_fail@plt+0x1004c>
   2169c:	ldr	r1, [r2]
   216a0:	add	r1, r1, r0, lsl #3
   216a4:	ldrb	r1, [r1, #4]
   216a8:	tst	r1, #8
   216ac:	beq	21770 <__assert_fail@plt+0x1004c>
   216b0:	ldr	r1, [r2, #20]
   216b4:	add	r0, r0, r0, lsl #1
   216b8:	mvn	r5, #0
   216bc:	mov	r6, r2
   216c0:	str	r0, [sp, #12]
   216c4:	add	r0, r1, r0, lsl #2
   216c8:	ldr	r1, [r0, #4]
   216cc:	ldr	r0, [r0, #8]
   216d0:	cmp	r1, #2
   216d4:	ldr	r9, [r0]
   216d8:	ldrge	r5, [r0, #4]
   216dc:	ldr	r0, [sp, #16]
   216e0:	mov	r1, r9
   216e4:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   216e8:	cmp	r0, #0
   216ec:	mov	r2, r6
   216f0:	beq	2172c <__assert_fail@plt+0x10008>
   216f4:	cmp	r5, #1
   216f8:	blt	21770 <__assert_fail@plt+0x1004c>
   216fc:	ldr	r0, [sp, #16]
   21700:	mov	r1, r5
   21704:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   21708:	cmp	r0, #0
   2170c:	bne	2176c <__assert_fail@plt+0x10048>
   21710:	mov	r0, r4
   21714:	mov	r1, r5
   21718:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   2171c:	cmp	r0, #0
   21720:	mov	r2, r6
   21724:	bne	21744 <__assert_fail@plt+0x10020>
   21728:	b	21770 <__assert_fail@plt+0x1004c>
   2172c:	mov	r0, r4
   21730:	mov	r1, r9
   21734:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   21738:	mov	r2, r6
   2173c:	cmp	r0, #0
   21740:	beq	216f4 <__assert_fail@plt+0xffd0>
   21744:	ldr	r0, [r2, #28]
   21748:	ldr	r1, [sp, #12]
   2174c:	add	r2, r0, r1, lsl #2
   21750:	ldr	r1, [sp, #4]
   21754:	add	r0, sp, #24
   21758:	bl	21450 <__assert_fail@plt+0xfd2c>
   2175c:	cmp	r0, #0
   21760:	bne	2182c <__assert_fail@plt+0x10108>
   21764:	ldr	r0, [sp, #8]
   21768:	ldr	r7, [r0]
   2176c:	mov	r2, r6
   21770:	add	sl, sl, #1
   21774:	cmp	sl, r7
   21778:	blt	21688 <__assert_fail@plt+0xff64>
   2177c:	cmp	r7, #1
   21780:	blt	21814 <__assert_fail@plt+0x100f0>
   21784:	ldr	r0, [sp, #16]
   21788:	ldr	r7, [sp, #8]
   2178c:	mov	r5, #0
   21790:	add	r8, sp, #24
   21794:	ldr	r9, [r0, #8]
   21798:	ldr	r6, [r9, r5, lsl #2]
   2179c:	mov	r0, r8
   217a0:	mov	r1, r6
   217a4:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   217a8:	cmp	r0, #0
   217ac:	bne	217d8 <__assert_fail@plt+0x100b4>
   217b0:	mov	r0, r4
   217b4:	mov	r1, r6
   217b8:	bl	1d1d4 <__assert_fail@plt+0xbab0>
   217bc:	subs	r1, r0, #1
   217c0:	blt	217d8 <__assert_fail@plt+0x100b4>
   217c4:	ldr	r2, [r4, #4]
   217c8:	cmp	r2, r0
   217cc:	subge	r2, r2, #1
   217d0:	strge	r2, [r4, #4]
   217d4:	bgt	217ec <__assert_fail@plt+0x100c8>
   217d8:	ldr	r0, [r7]
   217dc:	add	r5, r5, #1
   217e0:	cmp	r5, r0
   217e4:	blt	21798 <__assert_fail@plt+0x10074>
   217e8:	b	21814 <__assert_fail@plt+0x100f0>
   217ec:	ldr	r2, [r4, #8]
   217f0:	add	r0, r2, r0, lsl #2
   217f4:	ldr	r2, [r0]
   217f8:	add	r1, r1, #1
   217fc:	str	r2, [r0, #-4]
   21800:	add	r0, r0, #4
   21804:	ldr	r2, [r4, #4]
   21808:	cmp	r1, r2
   2180c:	blt	217f4 <__assert_fail@plt+0x100d0>
   21810:	b	217d8 <__assert_fail@plt+0x100b4>
   21814:	mov	r5, #0
   21818:	ldr	r0, [sp, #32]
   2181c:	bl	132e4 <__assert_fail@plt+0x1bc0>
   21820:	mov	r0, r5
   21824:	sub	sp, fp, #28
   21828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2182c:	mov	r5, r0
   21830:	b	21818 <__assert_fail@plt+0x100f4>
   21834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21838:	add	fp, sp, #28
   2183c:	sub	sp, sp, #20
   21840:	mov	r6, r1
   21844:	mov	r1, r3
   21848:	str	r2, [sp, #12]
   2184c:	mov	r7, r0
   21850:	str	r3, [sp, #16]
   21854:	bl	1ebc8 <__assert_fail@plt+0xd4a4>
   21858:	ldr	r1, [fp, #12]
   2185c:	str	r0, [sp, #8]
   21860:	mov	r0, r7
   21864:	bl	1ebc8 <__assert_fail@plt+0xd4a4>
   21868:	mov	r4, r0
   2186c:	ldr	r0, [r6, #4]
   21870:	cmp	r0, #1
   21874:	blt	218f8 <__assert_fail@plt+0x101d4>
   21878:	ldr	sl, [r7, #84]	; 0x54
   2187c:	mov	r5, #0
   21880:	ldr	r0, [r6, #8]
   21884:	ldr	r2, [r7, #116]	; 0x74
   21888:	ldr	r3, [sp, #12]
   2188c:	ldr	r1, [r0, r5, lsl #2]
   21890:	add	r0, r1, r1, lsl #1
   21894:	ldr	r0, [r2, r0, lsl #3]
   21898:	ldr	r2, [sl]
   2189c:	ldr	r9, [r2, r0, lsl #3]
   218a0:	ldr	r0, [sp, #16]
   218a4:	str	r0, [sp]
   218a8:	ldr	r0, [sp, #8]
   218ac:	mov	r2, r9
   218b0:	str	r0, [sp, #4]
   218b4:	mov	r0, r7
   218b8:	bl	2190c <__assert_fail@plt+0x101e8>
   218bc:	mov	r8, r0
   218c0:	ldr	r0, [r6, #8]
   218c4:	ldr	r3, [fp, #8]
   218c8:	mov	r2, r9
   218cc:	ldr	r1, [r0, r5, lsl #2]
   218d0:	ldr	r0, [fp, #12]
   218d4:	stm	sp, {r0, r4}
   218d8:	mov	r0, r7
   218dc:	bl	2190c <__assert_fail@plt+0x101e8>
   218e0:	cmp	r0, r8
   218e4:	bne	21900 <__assert_fail@plt+0x101dc>
   218e8:	ldr	r0, [r6, #4]
   218ec:	add	r5, r5, #1
   218f0:	cmp	r5, r0
   218f4:	blt	21880 <__assert_fail@plt+0x1015c>
   218f8:	mov	r0, #0
   218fc:	b	21904 <__assert_fail@plt+0x101e0>
   21900:	mov	r0, #1
   21904:	sub	sp, fp, #28
   21908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2190c:	push	{r4, r5, fp, lr}
   21910:	add	fp, sp, #8
   21914:	sub	sp, sp, #8
   21918:	ldr	r4, [r0, #116]	; 0x74
   2191c:	add	r1, r1, r1, lsl #1
   21920:	ldr	lr, [fp, #8]
   21924:	add	r4, r4, r1, lsl #3
   21928:	mvn	r1, #0
   2192c:	ldr	ip, [r4, #8]
   21930:	cmp	ip, lr
   21934:	bgt	21980 <__assert_fail@plt+0x1025c>
   21938:	ldr	r4, [r4, #12]
   2193c:	mov	r1, #1
   21940:	cmp	r4, lr
   21944:	blt	21980 <__assert_fail@plt+0x1025c>
   21948:	sub	r1, r4, lr
   2194c:	mov	r5, #1
   21950:	cmp	ip, lr
   21954:	clz	r1, r1
   21958:	lsr	r4, r1, #5
   2195c:	lsl	r1, r4, #1
   21960:	orreq	r1, r5, r4, lsl #1
   21964:	cmp	r1, #0
   21968:	beq	2197c <__assert_fail@plt+0x10258>
   2196c:	ldr	r5, [fp, #12]
   21970:	str	r5, [sp]
   21974:	bl	2198c <__assert_fail@plt+0x10268>
   21978:	b	21984 <__assert_fail@plt+0x10260>
   2197c:	mov	r1, #0
   21980:	mov	r0, r1
   21984:	sub	sp, fp, #8
   21988:	pop	{r4, r5, fp, pc}
   2198c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21990:	add	fp, sp, #28
   21994:	sub	sp, sp, #36	; 0x24
   21998:	ldr	r4, [r0, #84]	; 0x54
   2199c:	mov	r7, r0
   219a0:	mov	r5, r1
   219a4:	add	r1, r3, r3, lsl #1
   219a8:	str	r3, [sp, #32]
   219ac:	ldr	r0, [r4, #24]
   219b0:	add	r1, r0, r1, lsl #2
   219b4:	mov	lr, r1
   219b8:	ldr	r0, [lr, #4]!
   219bc:	cmp	r0, #1
   219c0:	blt	21b5c <__assert_fail@plt+0x10438>
   219c4:	mov	ip, #1
   219c8:	mov	r6, r2
   219cc:	and	r3, r5, #2
   219d0:	mov	sl, #0
   219d4:	mvn	r2, ip, lsl r2
   219d8:	cmp	r6, #31
   219dc:	str	r3, [sp, #16]
   219e0:	str	r2, [sp, #24]
   219e4:	lsl	r2, ip, r6
   219e8:	and	ip, r5, #1
   219ec:	str	r2, [sp, #28]
   219f0:	mov	r2, #0
   219f4:	movwgt	r2, #1
   219f8:	str	ip, [sp, #12]
   219fc:	orr	r2, r2, r3, lsr #1
   21a00:	add	r3, r1, #8
   21a04:	stmib	sp, {r3, lr}
   21a08:	str	r2, [sp, #20]
   21a0c:	ldr	r1, [r3]
   21a10:	ldr	r9, [r1, sl, lsl #2]
   21a14:	ldr	r1, [r4]
   21a18:	add	r2, r1, r9, lsl #3
   21a1c:	ldrb	r2, [r2, #4]
   21a20:	cmp	r2, #9
   21a24:	beq	21b20 <__assert_fail@plt+0x103fc>
   21a28:	cmp	r2, #8
   21a2c:	beq	21b3c <__assert_fail@plt+0x10418>
   21a30:	cmp	r2, #4
   21a34:	bne	21b50 <__assert_fail@plt+0x1042c>
   21a38:	ldr	r1, [fp, #8]
   21a3c:	cmn	r1, #1
   21a40:	beq	21b50 <__assert_fail@plt+0x1042c>
   21a44:	ldr	r1, [fp, #8]
   21a48:	ldr	r0, [r7, #116]	; 0x74
   21a4c:	add	r1, r1, r1, lsl #1
   21a50:	add	r0, r0, r1, lsl #3
   21a54:	add	r8, r0, #16
   21a58:	ldr	r0, [r8, #-16]
   21a5c:	cmp	r0, r9
   21a60:	bne	21afc <__assert_fail@plt+0x103d8>
   21a64:	cmp	r6, #31
   21a68:	bgt	21a7c <__assert_fail@plt+0x10358>
   21a6c:	ldr	r0, [r8]
   21a70:	ldr	r1, [sp, #28]
   21a74:	tst	r0, r1
   21a78:	beq	21afc <__assert_fail@plt+0x103d8>
   21a7c:	ldr	r0, [r4, #20]
   21a80:	add	r1, r9, r9, lsl #1
   21a84:	add	r0, r0, r1, lsl #2
   21a88:	ldr	r0, [r0, #8]
   21a8c:	ldr	r3, [r0]
   21a90:	ldr	r0, [sp, #32]
   21a94:	cmp	r3, r0
   21a98:	beq	21b64 <__assert_fail@plt+0x10440>
   21a9c:	ldr	r0, [fp, #8]
   21aa0:	mov	r1, r5
   21aa4:	mov	r2, r6
   21aa8:	str	r0, [sp]
   21aac:	mov	r0, r7
   21ab0:	bl	2198c <__assert_fail@plt+0x10268>
   21ab4:	cmp	r0, #0
   21ab8:	beq	21ad0 <__assert_fail@plt+0x103ac>
   21abc:	cmn	r0, #1
   21ac0:	beq	21b7c <__assert_fail@plt+0x10458>
   21ac4:	cmp	r6, #31
   21ac8:	ble	21aec <__assert_fail@plt+0x103c8>
   21acc:	b	21afc <__assert_fail@plt+0x103d8>
   21ad0:	ldr	r0, [sp, #20]
   21ad4:	cmp	r0, #0
   21ad8:	beq	21aec <__assert_fail@plt+0x103c8>
   21adc:	ldr	r0, [sp, #16]
   21ae0:	cmp	r0, #0
   21ae4:	beq	21afc <__assert_fail@plt+0x103d8>
   21ae8:	b	21b70 <__assert_fail@plt+0x1044c>
   21aec:	ldr	r0, [r8]
   21af0:	ldr	r1, [sp, #24]
   21af4:	and	r0, r0, r1
   21af8:	str	r0, [r8]
   21afc:	ldrb	r0, [r8, #4]
   21b00:	add	r8, r8, #24
   21b04:	cmp	r0, #0
   21b08:	bne	21a58 <__assert_fail@plt+0x10334>
   21b0c:	ldr	lr, [sp, #8]
   21b10:	ldr	ip, [sp, #12]
   21b14:	ldr	r3, [sp, #4]
   21b18:	ldr	r0, [lr]
   21b1c:	b	21b50 <__assert_fail@plt+0x1042c>
   21b20:	ldr	r2, [sp, #16]
   21b24:	cmp	r2, #0
   21b28:	beq	21b50 <__assert_fail@plt+0x1042c>
   21b2c:	ldr	r1, [r1, r9, lsl #3]
   21b30:	cmp	r1, r6
   21b34:	bne	21b50 <__assert_fail@plt+0x1042c>
   21b38:	b	21b70 <__assert_fail@plt+0x1044c>
   21b3c:	cmp	ip, #0
   21b40:	beq	21b50 <__assert_fail@plt+0x1042c>
   21b44:	ldr	r1, [r1, r9, lsl #3]
   21b48:	cmp	r1, r6
   21b4c:	beq	21b78 <__assert_fail@plt+0x10454>
   21b50:	add	sl, sl, #1
   21b54:	cmp	sl, r0
   21b58:	blt	21a0c <__assert_fail@plt+0x102e8>
   21b5c:	ubfx	r0, r5, #1, #1
   21b60:	b	21b7c <__assert_fail@plt+0x10458>
   21b64:	ldr	r0, [sp, #12]
   21b68:	rsb	r0, r0, #0
   21b6c:	b	21b7c <__assert_fail@plt+0x10458>
   21b70:	mov	r0, #0
   21b74:	b	21b7c <__assert_fail@plt+0x10458>
   21b78:	mvn	r0, #0
   21b7c:	sub	sp, fp, #28
   21b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b84:	cmp	r0, #0
   21b88:	bxeq	lr
   21b8c:	push	{r4, r5, r6, sl, fp, lr}
   21b90:	add	fp, sp, #16
   21b94:	ldr	r1, [r0]
   21b98:	mov	r4, r0
   21b9c:	ldr	r0, [r0, #8]
   21ba0:	cmp	r1, #1
   21ba4:	blt	21be4 <__assert_fail@plt+0x104c0>
   21ba8:	mov	r5, #0
   21bac:	mov	r6, #0
   21bb0:	add	r0, r0, r5
   21bb4:	ldr	r0, [r0, #20]
   21bb8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   21bbc:	ldr	r0, [r4, #8]
   21bc0:	add	r0, r0, r5
   21bc4:	ldr	r0, [r0, #8]
   21bc8:	bl	132e4 <__assert_fail@plt+0x1bc0>
   21bcc:	ldr	r1, [r4]
   21bd0:	ldr	r0, [r4, #8]
   21bd4:	add	r6, r6, #1
   21bd8:	add	r5, r5, #24
   21bdc:	cmp	r6, r1
   21be0:	blt	21bb0 <__assert_fail@plt+0x1048c>
   21be4:	pop	{r4, r5, r6, sl, fp, lr}
   21be8:	b	132e4 <__assert_fail@plt+0x1bc0>
   21bec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21bf0:	add	fp, sp, #24
   21bf4:	mov	r4, r0
   21bf8:	mvn	r0, #0
   21bfc:	cmp	r4, #0
   21c00:	beq	21ca0 <__assert_fail@plt+0x1057c>
   21c04:	mov	r5, r2
   21c08:	ldr	r2, [r4]
   21c0c:	cmp	r2, #0
   21c10:	beq	21ca0 <__assert_fail@plt+0x1057c>
   21c14:	sub	r0, r2, #1
   21c18:	ldr	r9, [fp, #12]
   21c1c:	ldr	r8, [fp, #8]
   21c20:	lsl	r7, r5, #3
   21c24:	str	r0, [r4]
   21c28:	add	r6, r0, r0, lsl #1
   21c2c:	ldr	r2, [r4, #8]
   21c30:	ldr	r0, [r2, r6, lsl #3]!
   21c34:	str	r0, [r1]
   21c38:	mov	r0, r3
   21c3c:	ldr	r1, [r2, #8]
   21c40:	mov	r2, r7
   21c44:	bl	11460 <memcpy@plt>
   21c48:	ldr	r0, [r4, #8]
   21c4c:	mov	r2, r7
   21c50:	add	r0, r0, r6, lsl #3
   21c54:	ldr	r0, [r0, #8]
   21c58:	add	r1, r0, r5, lsl #3
   21c5c:	mov	r0, r8
   21c60:	bl	11460 <memcpy@plt>
   21c64:	ldr	r0, [r9, #8]
   21c68:	bl	132e4 <__assert_fail@plt+0x1bc0>
   21c6c:	ldr	r0, [r4, #8]
   21c70:	add	r0, r0, r6, lsl #3
   21c74:	ldr	r0, [r0, #8]
   21c78:	bl	132e4 <__assert_fail@plt+0x1bc0>
   21c7c:	ldr	r0, [r4, #8]
   21c80:	add	r0, r0, r6, lsl #3
   21c84:	vldr	d16, [r0, #12]
   21c88:	ldr	r0, [r0, #20]
   21c8c:	str	r0, [r9, #8]
   21c90:	vstr	d16, [r9]
   21c94:	ldr	r0, [r4, #8]
   21c98:	add	r0, r0, r6, lsl #3
   21c9c:	ldr	r0, [r0, #4]
   21ca0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21ca4:	push	{r4, r5, fp, lr}
   21ca8:	add	fp, sp, #8
   21cac:	mov	r4, r1
   21cb0:	mov	r1, #0
   21cb4:	mov	r5, r0
   21cb8:	mov	r2, r4
   21cbc:	bl	11658 <memchr@plt>
   21cc0:	sub	r1, r0, r5
   21cc4:	cmp	r0, #0
   21cc8:	addne	r4, r1, #1
   21ccc:	mov	r0, r4
   21cd0:	pop	{r4, r5, fp, pc}
   21cd4:	push	{r4, sl, fp, lr}
   21cd8:	add	fp, sp, #8
   21cdc:	ldrb	r3, [r0]
   21ce0:	ldrb	ip, [r1]
   21ce4:	cmp	r3, #45	; 0x2d
   21ce8:	bne	21dbc <__assert_fail@plt+0x10698>
   21cec:	ldrb	r3, [r0, #1]!
   21cf0:	cmp	r3, #48	; 0x30
   21cf4:	beq	21cec <__assert_fail@plt+0x105c8>
   21cf8:	cmp	ip, #45	; 0x2d
   21cfc:	bne	21ec0 <__assert_fail@plt+0x1079c>
   21d00:	ldrb	ip, [r1, #1]!
   21d04:	cmp	ip, #48	; 0x30
   21d08:	beq	21d00 <__assert_fail@plt+0x105dc>
   21d0c:	sub	lr, r3, #48	; 0x30
   21d10:	cmp	lr, #9
   21d14:	bhi	21d54 <__assert_fail@plt+0x10630>
   21d18:	cmp	ip, r3
   21d1c:	bne	21d54 <__assert_fail@plt+0x10630>
   21d20:	mov	r2, #0
   21d24:	add	r3, r1, r2
   21d28:	ldrb	ip, [r3, #1]
   21d2c:	add	r3, r0, r2
   21d30:	add	r2, r2, #1
   21d34:	ldrb	r3, [r3, #1]
   21d38:	sub	lr, r3, #48	; 0x30
   21d3c:	cmp	ip, r3
   21d40:	bne	21d4c <__assert_fail@plt+0x10628>
   21d44:	cmp	lr, #10
   21d48:	bcc	21d24 <__assert_fail@plt+0x10600>
   21d4c:	add	r1, r1, r2
   21d50:	add	r0, r0, r2
   21d54:	cmp	lr, #9
   21d58:	mov	r2, #0
   21d5c:	mov	lr, #0
   21d60:	bhi	21d80 <__assert_fail@plt+0x1065c>
   21d64:	add	r0, r0, #1
   21d68:	mov	lr, #0
   21d6c:	ldrb	r4, [r0, lr]
   21d70:	add	lr, lr, #1
   21d74:	sub	r4, r4, #48	; 0x30
   21d78:	cmp	r4, #10
   21d7c:	bcc	21d6c <__assert_fail@plt+0x10648>
   21d80:	sub	r0, ip, #48	; 0x30
   21d84:	cmp	r0, #9
   21d88:	bhi	21da8 <__assert_fail@plt+0x10684>
   21d8c:	add	r0, r1, #1
   21d90:	mov	r2, #0
   21d94:	ldrb	r1, [r0, r2]
   21d98:	add	r2, r2, #1
   21d9c:	sub	r1, r1, #48	; 0x30
   21da0:	cmp	r1, #10
   21da4:	bcc	21d94 <__assert_fail@plt+0x10670>
   21da8:	cmp	lr, r2
   21dac:	bne	21ef8 <__assert_fail@plt+0x107d4>
   21db0:	cmp	lr, #0
   21db4:	subne	lr, ip, r3
   21db8:	b	21f0c <__assert_fail@plt+0x107e8>
   21dbc:	cmp	ip, #45	; 0x2d
   21dc0:	bne	21e0c <__assert_fail@plt+0x106e8>
   21dc4:	add	r1, r1, #1
   21dc8:	ldrb	r2, [r1], #1
   21dcc:	cmp	r2, #48	; 0x30
   21dd0:	beq	21dc8 <__assert_fail@plt+0x106a4>
   21dd4:	sub	r1, r2, #48	; 0x30
   21dd8:	mov	lr, #1
   21ddc:	cmp	r1, #10
   21de0:	bcc	21f0c <__assert_fail@plt+0x107e8>
   21de4:	cmp	r3, #48	; 0x30
   21de8:	bne	21dfc <__assert_fail@plt+0x106d8>
   21dec:	add	r0, r0, #1
   21df0:	ldrb	r3, [r0], #1
   21df4:	cmp	r3, #48	; 0x30
   21df8:	beq	21df0 <__assert_fail@plt+0x106cc>
   21dfc:	sub	r0, r3, #48	; 0x30
   21e00:	mov	lr, #0
   21e04:	cmp	r0, #10
   21e08:	b	21efc <__assert_fail@plt+0x107d8>
   21e0c:	cmp	r3, #48	; 0x30
   21e10:	bne	21e20 <__assert_fail@plt+0x106fc>
   21e14:	ldrb	r3, [r0, #1]!
   21e18:	b	21e0c <__assert_fail@plt+0x106e8>
   21e1c:	ldrb	ip, [r1, #1]!
   21e20:	cmp	ip, #48	; 0x30
   21e24:	beq	21e1c <__assert_fail@plt+0x106f8>
   21e28:	sub	r2, r3, #48	; 0x30
   21e2c:	cmp	r2, #9
   21e30:	bhi	21e58 <__assert_fail@plt+0x10734>
   21e34:	cmp	r3, ip
   21e38:	bne	21e58 <__assert_fail@plt+0x10734>
   21e3c:	ldrb	r3, [r0, #1]!
   21e40:	ldrb	ip, [r1, #1]!
   21e44:	sub	r2, r3, #48	; 0x30
   21e48:	cmp	r3, ip
   21e4c:	bne	21e58 <__assert_fail@plt+0x10734>
   21e50:	cmp	r2, #10
   21e54:	bcc	21e3c <__assert_fail@plt+0x10718>
   21e58:	mov	r4, #0
   21e5c:	cmp	r2, #9
   21e60:	mov	lr, #0
   21e64:	bhi	21e84 <__assert_fail@plt+0x10760>
   21e68:	add	r0, r0, #1
   21e6c:	mov	lr, #0
   21e70:	ldrb	r2, [r0, lr]
   21e74:	add	lr, lr, #1
   21e78:	sub	r2, r2, #48	; 0x30
   21e7c:	cmp	r2, #10
   21e80:	bcc	21e70 <__assert_fail@plt+0x1074c>
   21e84:	sub	r0, ip, #48	; 0x30
   21e88:	cmp	r0, #9
   21e8c:	bhi	21eac <__assert_fail@plt+0x10788>
   21e90:	add	r0, r1, #1
   21e94:	mov	r4, #0
   21e98:	ldrb	r1, [r0, r4]
   21e9c:	add	r4, r4, #1
   21ea0:	sub	r1, r1, #48	; 0x30
   21ea4:	cmp	r1, #10
   21ea8:	bcc	21e98 <__assert_fail@plt+0x10774>
   21eac:	cmp	lr, r4
   21eb0:	bne	21f04 <__assert_fail@plt+0x107e0>
   21eb4:	cmp	lr, #0
   21eb8:	subne	lr, r3, ip
   21ebc:	b	21f0c <__assert_fail@plt+0x107e8>
   21ec0:	sub	r0, r3, #48	; 0x30
   21ec4:	mvn	lr, #0
   21ec8:	cmp	r0, #10
   21ecc:	bcc	21f0c <__assert_fail@plt+0x107e8>
   21ed0:	cmp	ip, #48	; 0x30
   21ed4:	bne	21ee8 <__assert_fail@plt+0x107c4>
   21ed8:	add	r0, r1, #1
   21edc:	ldrb	ip, [r0], #1
   21ee0:	cmp	ip, #48	; 0x30
   21ee4:	beq	21edc <__assert_fail@plt+0x107b8>
   21ee8:	sub	r0, ip, #48	; 0x30
   21eec:	mov	lr, #0
   21ef0:	cmp	r0, #10
   21ef4:	b	21f08 <__assert_fail@plt+0x107e4>
   21ef8:	mvn	lr, #0
   21efc:	movwcc	lr, #1
   21f00:	b	21f0c <__assert_fail@plt+0x107e8>
   21f04:	mov	lr, #1
   21f08:	mvncc	lr, #0
   21f0c:	mov	r0, lr
   21f10:	pop	{r4, sl, fp, pc}
   21f14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21f18:	add	fp, sp, #24
   21f1c:	sub	sp, sp, #32
   21f20:	ldr	r6, [fp, #12]
   21f24:	ldr	r7, [fp, #8]
   21f28:	mov	r4, r2
   21f2c:	mov	r8, r0
   21f30:	cmp	r1, #0
   21f34:	beq	21f5c <__assert_fail@plt+0x10838>
   21f38:	movw	r2, #15873	; 0x3e01
   21f3c:	mov	r5, r1
   21f40:	str	r3, [sp, #4]
   21f44:	str	r4, [sp]
   21f48:	mov	r0, r8
   21f4c:	mov	r1, #1
   21f50:	movt	r2, #2
   21f54:	mov	r3, r5
   21f58:	b	21f74 <__assert_fail@plt+0x10850>
   21f5c:	movw	r2, #15885	; 0x3e0d
   21f60:	str	r3, [sp]
   21f64:	mov	r0, r8
   21f68:	mov	r1, #1
   21f6c:	mov	r3, r4
   21f70:	movt	r2, #2
   21f74:	bl	1164c <__fprintf_chk@plt>
   21f78:	movw	r1, #15892	; 0x3e14
   21f7c:	mov	r0, #0
   21f80:	mov	r2, #5
   21f84:	movt	r1, #2
   21f88:	bl	114a8 <dcgettext@plt>
   21f8c:	movw	r2, #16610	; 0x40e2
   21f90:	mov	r3, r0
   21f94:	movw	r0, #2022	; 0x7e6
   21f98:	mov	r1, #1
   21f9c:	movt	r2, #2
   21fa0:	str	r0, [sp]
   21fa4:	mov	r0, r8
   21fa8:	bl	1164c <__fprintf_chk@plt>
   21fac:	movw	r4, #14498	; 0x38a2
   21fb0:	mov	r1, r8
   21fb4:	movt	r4, #2
   21fb8:	mov	r0, r4
   21fbc:	bl	113b8 <fputs_unlocked@plt>
   21fc0:	movw	r1, #15896	; 0x3e18
   21fc4:	mov	r0, #0
   21fc8:	mov	r2, #5
   21fcc:	movt	r1, #2
   21fd0:	bl	114a8 <dcgettext@plt>
   21fd4:	movw	r3, #16067	; 0x3ec3
   21fd8:	mov	r2, r0
   21fdc:	mov	r0, r8
   21fe0:	mov	r1, #1
   21fe4:	movt	r3, #2
   21fe8:	bl	1164c <__fprintf_chk@plt>
   21fec:	mov	r0, r4
   21ff0:	mov	r1, r8
   21ff4:	bl	113b8 <fputs_unlocked@plt>
   21ff8:	cmp	r6, #9
   21ffc:	bhi	22060 <__assert_fail@plt+0x1093c>
   22000:	add	r0, pc, #0
   22004:	ldr	pc, [r0, r6, lsl #2]
   22008:	andeq	r2, r2, r8, lsr r2
   2200c:	andeq	r2, r2, r0, lsr r0
   22010:	andeq	r2, r2, ip, rrx
   22014:	muleq	r2, r4, r0
   22018:	strheq	r2, [r2], -ip
   2201c:	andeq	r2, r2, r4, ror #1
   22020:	andeq	r2, r2, ip, lsl #2
   22024:	andeq	r2, r2, r4, asr #2
   22028:	andeq	r2, r2, r4, ror #3
   2202c:	andeq	r2, r2, ip, lsl #3
   22030:	movw	r1, #16101	; 0x3ee5
   22034:	mov	r0, #0
   22038:	mov	r2, #5
   2203c:	movt	r1, #2
   22040:	bl	114a8 <dcgettext@plt>
   22044:	ldr	r3, [r7]
   22048:	mov	r2, r0
   2204c:	mov	r0, r8
   22050:	mov	r1, #1
   22054:	sub	sp, fp, #24
   22058:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2205c:	b	1164c <__fprintf_chk@plt>
   22060:	movw	r1, #16420	; 0x4024
   22064:	movt	r1, #2
   22068:	b	22194 <__assert_fail@plt+0x10a70>
   2206c:	movw	r1, #16117	; 0x3ef5
   22070:	mov	r0, #0
   22074:	mov	r2, #5
   22078:	movt	r1, #2
   2207c:	bl	114a8 <dcgettext@plt>
   22080:	mov	r2, r0
   22084:	ldr	r3, [r7]
   22088:	ldr	r0, [r7, #4]
   2208c:	str	r0, [sp]
   22090:	b	22180 <__assert_fail@plt+0x10a5c>
   22094:	movw	r1, #16140	; 0x3f0c
   22098:	mov	r0, #0
   2209c:	mov	r2, #5
   220a0:	movt	r1, #2
   220a4:	bl	114a8 <dcgettext@plt>
   220a8:	mov	r2, r0
   220ac:	ldr	r3, [r7]
   220b0:	ldmib	r7, {r0, r1}
   220b4:	stm	sp, {r0, r1}
   220b8:	b	22180 <__assert_fail@plt+0x10a5c>
   220bc:	movw	r1, #16168	; 0x3f28
   220c0:	mov	r0, #0
   220c4:	mov	r2, #5
   220c8:	movt	r1, #2
   220cc:	bl	114a8 <dcgettext@plt>
   220d0:	ldr	r3, [r7]
   220d4:	mov	r2, r0
   220d8:	ldmib	r7, {r0, r1, r7}
   220dc:	stm	sp, {r0, r1, r7}
   220e0:	b	22180 <__assert_fail@plt+0x10a5c>
   220e4:	movw	r1, #16200	; 0x3f48
   220e8:	mov	r0, #0
   220ec:	mov	r2, #5
   220f0:	movt	r1, #2
   220f4:	bl	114a8 <dcgettext@plt>
   220f8:	ldr	r3, [r7]
   220fc:	mov	r2, r0
   22100:	ldmib	r7, {r0, r1, r6, r7}
   22104:	stm	sp, {r0, r1, r6, r7}
   22108:	b	22180 <__assert_fail@plt+0x10a5c>
   2210c:	movw	r1, #16236	; 0x3f6c
   22110:	mov	r0, #0
   22114:	mov	r2, #5
   22118:	movt	r1, #2
   2211c:	bl	114a8 <dcgettext@plt>
   22120:	mov	r2, r0
   22124:	ldr	r3, [r7]
   22128:	ldmib	r7, {r0, r1, r6}
   2212c:	ldr	r5, [r7, #16]
   22130:	ldr	r7, [r7, #20]
   22134:	stm	sp, {r0, r1, r6}
   22138:	str	r5, [sp, #12]
   2213c:	str	r7, [sp, #16]
   22140:	b	22180 <__assert_fail@plt+0x10a5c>
   22144:	movw	r1, #16276	; 0x3f94
   22148:	mov	r0, #0
   2214c:	mov	r2, #5
   22150:	movt	r1, #2
   22154:	bl	114a8 <dcgettext@plt>
   22158:	mov	r2, r0
   2215c:	ldr	r3, [r7]
   22160:	ldmib	r7, {r0, r1, r6}
   22164:	ldr	r5, [r7, #16]
   22168:	ldr	r4, [r7, #20]
   2216c:	ldr	r7, [r7, #24]
   22170:	stm	sp, {r0, r1, r6}
   22174:	str	r5, [sp, #12]
   22178:	str	r4, [sp, #16]
   2217c:	str	r7, [sp, #20]
   22180:	mov	r0, r8
   22184:	mov	r1, #1
   22188:	b	22234 <__assert_fail@plt+0x10b10>
   2218c:	movw	r1, #16368	; 0x3ff0
   22190:	movt	r1, #2
   22194:	mov	r0, #0
   22198:	mov	r2, #5
   2219c:	bl	114a8 <dcgettext@plt>
   221a0:	mov	ip, r0
   221a4:	ldr	r3, [r7]
   221a8:	ldr	r0, [r7, #4]
   221ac:	ldr	r1, [r7, #8]
   221b0:	ldr	r6, [r7, #12]
   221b4:	ldr	r5, [r7, #16]
   221b8:	ldr	r4, [r7, #20]
   221bc:	ldr	r2, [r7, #24]
   221c0:	ldr	lr, [r7, #28]
   221c4:	ldr	r7, [r7, #32]
   221c8:	stm	sp, {r0, r1, r6}
   221cc:	str	r5, [sp, #12]
   221d0:	str	r4, [sp, #16]
   221d4:	str	r2, [sp, #20]
   221d8:	str	lr, [sp, #24]
   221dc:	str	r7, [sp, #28]
   221e0:	b	22228 <__assert_fail@plt+0x10b04>
   221e4:	movw	r1, #16320	; 0x3fc0
   221e8:	mov	r0, #0
   221ec:	mov	r2, #5
   221f0:	movt	r1, #2
   221f4:	bl	114a8 <dcgettext@plt>
   221f8:	mov	ip, r0
   221fc:	ldr	r3, [r7]
   22200:	ldmib	r7, {r0, r1, r6}
   22204:	ldr	r5, [r7, #16]
   22208:	ldr	r4, [r7, #20]
   2220c:	ldr	r2, [r7, #24]
   22210:	ldr	r7, [r7, #28]
   22214:	stm	sp, {r0, r1, r6}
   22218:	str	r5, [sp, #12]
   2221c:	str	r4, [sp, #16]
   22220:	str	r2, [sp, #20]
   22224:	str	r7, [sp, #24]
   22228:	mov	r0, r8
   2222c:	mov	r1, #1
   22230:	mov	r2, ip
   22234:	bl	1164c <__fprintf_chk@plt>
   22238:	sub	sp, fp, #24
   2223c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22240:	push	{r4, sl, fp, lr}
   22244:	add	fp, sp, #8
   22248:	sub	sp, sp, #8
   2224c:	ldr	ip, [fp, #8]
   22250:	mov	lr, #0
   22254:	ldr	r4, [ip, lr, lsl #2]
   22258:	add	lr, lr, #1
   2225c:	cmp	r4, #0
   22260:	bne	22254 <__assert_fail@plt+0x10b30>
   22264:	sub	r4, lr, #1
   22268:	str	ip, [sp]
   2226c:	str	r4, [sp, #4]
   22270:	bl	21f14 <__assert_fail@plt+0x107f0>
   22274:	sub	sp, fp, #8
   22278:	pop	{r4, sl, fp, pc}
   2227c:	push	{r4, r5, fp, lr}
   22280:	add	fp, sp, #8
   22284:	sub	sp, sp, #48	; 0x30
   22288:	ldr	r4, [fp, #8]
   2228c:	mov	ip, #0
   22290:	add	lr, sp, #8
   22294:	ldr	r5, [r4]
   22298:	cmp	r5, #0
   2229c:	str	r5, [lr, ip, lsl #2]
   222a0:	beq	222b8 <__assert_fail@plt+0x10b94>
   222a4:	add	ip, ip, #1
   222a8:	add	r4, r4, #4
   222ac:	cmp	ip, #10
   222b0:	bne	22294 <__assert_fail@plt+0x10b70>
   222b4:	mov	ip, #10
   222b8:	str	lr, [sp]
   222bc:	str	ip, [sp, #4]
   222c0:	bl	21f14 <__assert_fail@plt+0x107f0>
   222c4:	sub	sp, fp, #8
   222c8:	pop	{r4, r5, fp, pc}
   222cc:	push	{fp, lr}
   222d0:	mov	fp, sp
   222d4:	sub	sp, sp, #8
   222d8:	add	ip, fp, #8
   222dc:	str	ip, [sp, #4]
   222e0:	str	ip, [sp]
   222e4:	bl	2227c <__assert_fail@plt+0x10b58>
   222e8:	mov	sp, fp
   222ec:	pop	{fp, pc}
   222f0:	push	{fp, lr}
   222f4:	mov	fp, sp
   222f8:	movw	r0, #20900	; 0x51a4
   222fc:	movt	r0, #3
   22300:	ldr	r1, [r0]
   22304:	movw	r0, #14498	; 0x38a2
   22308:	movt	r0, #2
   2230c:	bl	113b8 <fputs_unlocked@plt>
   22310:	movw	r1, #16480	; 0x4060
   22314:	mov	r0, #0
   22318:	mov	r2, #5
   2231c:	movt	r1, #2
   22320:	bl	114a8 <dcgettext@plt>
   22324:	movw	r2, #16500	; 0x4074
   22328:	mov	r1, r0
   2232c:	mov	r0, #1
   22330:	movt	r2, #2
   22334:	bl	11634 <__printf_chk@plt>
   22338:	movw	r1, #16522	; 0x408a
   2233c:	mov	r0, #0
   22340:	mov	r2, #5
   22344:	movt	r1, #2
   22348:	bl	114a8 <dcgettext@plt>
   2234c:	movw	r2, #14065	; 0x36f1
   22350:	movw	r3, #14307	; 0x37e3
   22354:	mov	r1, r0
   22358:	mov	r0, #1
   2235c:	movt	r2, #2
   22360:	movt	r3, #2
   22364:	bl	11634 <__printf_chk@plt>
   22368:	movw	r1, #16542	; 0x409e
   2236c:	mov	r0, #0
   22370:	mov	r2, #5
   22374:	movt	r1, #2
   22378:	bl	114a8 <dcgettext@plt>
   2237c:	movw	r2, #16581	; 0x40c5
   22380:	mov	r1, r0
   22384:	mov	r0, #1
   22388:	movt	r2, #2
   2238c:	pop	{fp, lr}
   22390:	b	11634 <__printf_chk@plt>
   22394:	b	22398 <__assert_fail@plt+0x10c74>
   22398:	push	{r4, r5, r6, sl, fp, lr}
   2239c:	add	fp, sp, #16
   223a0:	mov	r4, r2
   223a4:	mov	r5, r1
   223a8:	mov	r6, r0
   223ac:	bl	22d3c <__assert_fail@plt+0x11618>
   223b0:	cmp	r0, #0
   223b4:	popne	{r4, r5, r6, sl, fp, pc}
   223b8:	cmp	r6, #0
   223bc:	beq	223d0 <__assert_fail@plt+0x10cac>
   223c0:	cmp	r5, #0
   223c4:	cmpne	r4, #0
   223c8:	bne	223d0 <__assert_fail@plt+0x10cac>
   223cc:	pop	{r4, r5, r6, sl, fp, pc}
   223d0:	bl	22800 <__assert_fail@plt+0x110dc>
   223d4:	push	{fp, lr}
   223d8:	mov	fp, sp
   223dc:	bl	22898 <__assert_fail@plt+0x11174>
   223e0:	cmp	r0, #0
   223e4:	popne	{fp, pc}
   223e8:	bl	22800 <__assert_fail@plt+0x110dc>
   223ec:	push	{fp, lr}
   223f0:	mov	fp, sp
   223f4:	bl	22898 <__assert_fail@plt+0x11174>
   223f8:	cmp	r0, #0
   223fc:	popne	{fp, pc}
   22400:	bl	22800 <__assert_fail@plt+0x110dc>
   22404:	push	{fp, lr}
   22408:	mov	fp, sp
   2240c:	bl	22898 <__assert_fail@plt+0x11174>
   22410:	cmp	r0, #0
   22414:	popne	{fp, pc}
   22418:	bl	22800 <__assert_fail@plt+0x110dc>
   2241c:	push	{r4, r5, fp, lr}
   22420:	add	fp, sp, #8
   22424:	mov	r4, r1
   22428:	mov	r5, r0
   2242c:	bl	228c8 <__assert_fail@plt+0x111a4>
   22430:	cmp	r0, #0
   22434:	popne	{r4, r5, fp, pc}
   22438:	cmp	r5, #0
   2243c:	beq	2244c <__assert_fail@plt+0x10d28>
   22440:	cmp	r4, #0
   22444:	bne	2244c <__assert_fail@plt+0x10d28>
   22448:	pop	{r4, r5, fp, pc}
   2244c:	bl	22800 <__assert_fail@plt+0x110dc>
   22450:	push	{fp, lr}
   22454:	mov	fp, sp
   22458:	cmp	r1, #0
   2245c:	orreq	r1, r1, #1
   22460:	bl	228c8 <__assert_fail@plt+0x111a4>
   22464:	cmp	r0, #0
   22468:	popne	{fp, pc}
   2246c:	bl	22800 <__assert_fail@plt+0x110dc>
   22470:	push	{fp, lr}
   22474:	mov	fp, sp
   22478:	clz	r3, r2
   2247c:	lsr	ip, r3, #5
   22480:	clz	r3, r1
   22484:	lsr	r3, r3, #5
   22488:	orrs	r3, r3, ip
   2248c:	movwne	r1, #1
   22490:	movwne	r2, #1
   22494:	bl	22d3c <__assert_fail@plt+0x11618>
   22498:	cmp	r0, #0
   2249c:	popne	{fp, pc}
   224a0:	bl	22800 <__assert_fail@plt+0x110dc>
   224a4:	push	{fp, lr}
   224a8:	mov	fp, sp
   224ac:	mov	r2, r1
   224b0:	mov	r1, r0
   224b4:	mov	r0, #0
   224b8:	bl	22d3c <__assert_fail@plt+0x11618>
   224bc:	cmp	r0, #0
   224c0:	popne	{fp, pc}
   224c4:	bl	22800 <__assert_fail@plt+0x110dc>
   224c8:	mov	r2, r1
   224cc:	mov	r1, r0
   224d0:	mov	r0, #0
   224d4:	b	22470 <__assert_fail@plt+0x10d4c>
   224d8:	mov	r2, #1
   224dc:	b	224e0 <__assert_fail@plt+0x10dbc>
   224e0:	push	{r4, r5, fp, lr}
   224e4:	add	fp, sp, #8
   224e8:	ldr	r5, [r1]
   224ec:	mov	r4, r1
   224f0:	cmp	r0, #0
   224f4:	beq	2250c <__assert_fail@plt+0x10de8>
   224f8:	mov	r1, #1
   224fc:	add	r1, r1, r5, lsr #1
   22500:	adds	r5, r5, r1
   22504:	bcc	22524 <__assert_fail@plt+0x10e00>
   22508:	bl	22800 <__assert_fail@plt+0x110dc>
   2250c:	cmp	r5, #0
   22510:	bne	22524 <__assert_fail@plt+0x10e00>
   22514:	mov	r1, #64	; 0x40
   22518:	cmp	r2, #64	; 0x40
   2251c:	udiv	r5, r1, r2
   22520:	addhi	r5, r5, #1
   22524:	mov	r1, r5
   22528:	bl	22398 <__assert_fail@plt+0x10c74>
   2252c:	str	r5, [r4]
   22530:	pop	{r4, r5, fp, pc}
   22534:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22538:	add	fp, sp, #24
   2253c:	ldr	r6, [r1]
   22540:	mov	r8, r1
   22544:	ldr	r4, [fp, #8]
   22548:	add	r1, r6, r6, asr #1
   2254c:	cmp	r1, r6
   22550:	mvnvs	r1, #-2147483648	; 0x80000000
   22554:	cmp	r1, r3
   22558:	mov	r5, r1
   2255c:	movgt	r5, r3
   22560:	cmn	r3, #1
   22564:	movle	r5, r1
   22568:	cmn	r4, #1
   2256c:	ble	2258c <__assert_fail@plt+0x10e68>
   22570:	cmp	r4, #0
   22574:	beq	225e0 <__assert_fail@plt+0x10ebc>
   22578:	cmn	r5, #1
   2257c:	ble	225b4 <__assert_fail@plt+0x10e90>
   22580:	mvn	r7, #-2147483648	; 0x80000000
   22584:	udiv	r1, r7, r4
   22588:	b	225a8 <__assert_fail@plt+0x10e84>
   2258c:	cmn	r5, #1
   22590:	ble	225d0 <__assert_fail@plt+0x10eac>
   22594:	cmn	r4, #1
   22598:	beq	225e0 <__assert_fail@plt+0x10ebc>
   2259c:	mov	r1, #-2147483648	; 0x80000000
   225a0:	mvn	r7, #-2147483648	; 0x80000000
   225a4:	sdiv	r1, r1, r4
   225a8:	cmp	r1, r5
   225ac:	bge	225e0 <__assert_fail@plt+0x10ebc>
   225b0:	b	225f0 <__assert_fail@plt+0x10ecc>
   225b4:	beq	225e0 <__assert_fail@plt+0x10ebc>
   225b8:	mov	r1, #-2147483648	; 0x80000000
   225bc:	mvn	r7, #-2147483648	; 0x80000000
   225c0:	sdiv	r1, r1, r5
   225c4:	cmp	r1, r4
   225c8:	bge	225e0 <__assert_fail@plt+0x10ebc>
   225cc:	b	225f0 <__assert_fail@plt+0x10ecc>
   225d0:	mvn	r7, #-2147483648	; 0x80000000
   225d4:	sdiv	r1, r7, r4
   225d8:	cmp	r5, r1
   225dc:	blt	225f0 <__assert_fail@plt+0x10ecc>
   225e0:	mul	r1, r5, r4
   225e4:	mov	r7, #64	; 0x40
   225e8:	cmp	r1, #63	; 0x3f
   225ec:	bgt	225f8 <__assert_fail@plt+0x10ed4>
   225f0:	sdiv	r5, r7, r4
   225f4:	mul	r1, r5, r4
   225f8:	cmp	r0, #0
   225fc:	moveq	r7, #0
   22600:	streq	r7, [r8]
   22604:	sub	r7, r5, r6
   22608:	cmp	r7, r2
   2260c:	bge	226b0 <__assert_fail@plt+0x10f8c>
   22610:	add	r5, r6, r2
   22614:	mov	r2, #0
   22618:	mov	r1, #0
   2261c:	cmp	r5, r3
   22620:	movwgt	r2, #1
   22624:	cmn	r3, #1
   22628:	movwgt	r1, #1
   2262c:	cmp	r5, r6
   22630:	bvs	22698 <__assert_fail@plt+0x10f74>
   22634:	ands	r1, r1, r2
   22638:	bne	22698 <__assert_fail@plt+0x10f74>
   2263c:	cmn	r4, #1
   22640:	ble	22660 <__assert_fail@plt+0x10f3c>
   22644:	cmp	r4, #0
   22648:	beq	226ac <__assert_fail@plt+0x10f88>
   2264c:	cmn	r5, #1
   22650:	ble	22684 <__assert_fail@plt+0x10f60>
   22654:	mvn	r1, #-2147483648	; 0x80000000
   22658:	udiv	r1, r1, r4
   2265c:	b	22678 <__assert_fail@plt+0x10f54>
   22660:	cmn	r5, #1
   22664:	ble	2269c <__assert_fail@plt+0x10f78>
   22668:	cmn	r4, #1
   2266c:	beq	226ac <__assert_fail@plt+0x10f88>
   22670:	mov	r1, #-2147483648	; 0x80000000
   22674:	sdiv	r1, r1, r4
   22678:	cmp	r1, r5
   2267c:	bge	226ac <__assert_fail@plt+0x10f88>
   22680:	b	22698 <__assert_fail@plt+0x10f74>
   22684:	beq	226ac <__assert_fail@plt+0x10f88>
   22688:	mov	r1, #-2147483648	; 0x80000000
   2268c:	sdiv	r1, r1, r5
   22690:	cmp	r1, r4
   22694:	bge	226ac <__assert_fail@plt+0x10f88>
   22698:	bl	22800 <__assert_fail@plt+0x110dc>
   2269c:	mvn	r1, #-2147483648	; 0x80000000
   226a0:	sdiv	r1, r1, r4
   226a4:	cmp	r5, r1
   226a8:	blt	22698 <__assert_fail@plt+0x10f74>
   226ac:	mul	r1, r5, r4
   226b0:	bl	2241c <__assert_fail@plt+0x10cf8>
   226b4:	str	r5, [r8]
   226b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   226bc:	push	{fp, lr}
   226c0:	mov	fp, sp
   226c4:	mov	r1, #1
   226c8:	bl	22844 <__assert_fail@plt+0x11120>
   226cc:	cmp	r0, #0
   226d0:	popne	{fp, pc}
   226d4:	bl	22800 <__assert_fail@plt+0x110dc>
   226d8:	push	{fp, lr}
   226dc:	mov	fp, sp
   226e0:	bl	22844 <__assert_fail@plt+0x11120>
   226e4:	cmp	r0, #0
   226e8:	popne	{fp, pc}
   226ec:	bl	22800 <__assert_fail@plt+0x110dc>
   226f0:	push	{fp, lr}
   226f4:	mov	fp, sp
   226f8:	mov	r1, #1
   226fc:	bl	22844 <__assert_fail@plt+0x11120>
   22700:	cmp	r0, #0
   22704:	popne	{fp, pc}
   22708:	bl	22800 <__assert_fail@plt+0x110dc>
   2270c:	push	{fp, lr}
   22710:	mov	fp, sp
   22714:	bl	22844 <__assert_fail@plt+0x11120>
   22718:	cmp	r0, #0
   2271c:	popne	{fp, pc}
   22720:	bl	22800 <__assert_fail@plt+0x110dc>
   22724:	push	{r4, r5, fp, lr}
   22728:	add	fp, sp, #8
   2272c:	mov	r5, r0
   22730:	mov	r0, r1
   22734:	mov	r4, r1
   22738:	bl	22898 <__assert_fail@plt+0x11174>
   2273c:	cmp	r0, #0
   22740:	beq	22754 <__assert_fail@plt+0x11030>
   22744:	mov	r1, r5
   22748:	mov	r2, r4
   2274c:	pop	{r4, r5, fp, lr}
   22750:	b	11460 <memcpy@plt>
   22754:	bl	22800 <__assert_fail@plt+0x110dc>
   22758:	push	{r4, r5, fp, lr}
   2275c:	add	fp, sp, #8
   22760:	mov	r5, r0
   22764:	mov	r0, r1
   22768:	mov	r4, r1
   2276c:	bl	22898 <__assert_fail@plt+0x11174>
   22770:	cmp	r0, #0
   22774:	beq	22788 <__assert_fail@plt+0x11064>
   22778:	mov	r1, r5
   2277c:	mov	r2, r4
   22780:	pop	{r4, r5, fp, lr}
   22784:	b	11460 <memcpy@plt>
   22788:	bl	22800 <__assert_fail@plt+0x110dc>
   2278c:	push	{r4, r5, fp, lr}
   22790:	add	fp, sp, #8
   22794:	mov	r5, r0
   22798:	add	r0, r1, #1
   2279c:	mov	r4, r1
   227a0:	bl	22898 <__assert_fail@plt+0x11174>
   227a4:	cmp	r0, #0
   227a8:	beq	227c4 <__assert_fail@plt+0x110a0>
   227ac:	mov	r1, #0
   227b0:	mov	r2, r4
   227b4:	strb	r1, [r0, r4]
   227b8:	mov	r1, r5
   227bc:	pop	{r4, r5, fp, lr}
   227c0:	b	11460 <memcpy@plt>
   227c4:	bl	22800 <__assert_fail@plt+0x110dc>
   227c8:	push	{r4, r5, fp, lr}
   227cc:	add	fp, sp, #8
   227d0:	mov	r4, r0
   227d4:	bl	115c8 <strlen@plt>
   227d8:	add	r5, r0, #1
   227dc:	mov	r0, r5
   227e0:	bl	22898 <__assert_fail@plt+0x11174>
   227e4:	cmp	r0, #0
   227e8:	beq	227fc <__assert_fail@plt+0x110d8>
   227ec:	mov	r1, r4
   227f0:	mov	r2, r5
   227f4:	pop	{r4, r5, fp, lr}
   227f8:	b	11460 <memcpy@plt>
   227fc:	bl	22800 <__assert_fail@plt+0x110dc>
   22800:	push	{fp, lr}
   22804:	mov	fp, sp
   22808:	movw	r0, #20808	; 0x5148
   2280c:	movw	r1, #16657	; 0x4111
   22810:	mov	r2, #5
   22814:	movt	r0, #3
   22818:	movt	r1, #2
   2281c:	ldr	r4, [r0]
   22820:	mov	r0, #0
   22824:	bl	114a8 <dcgettext@plt>
   22828:	movw	r2, #14856	; 0x3a08
   2282c:	mov	r3, r0
   22830:	mov	r0, r4
   22834:	mov	r1, #0
   22838:	movt	r2, #2
   2283c:	bl	11544 <error@plt>
   22840:	bl	11700 <abort@plt>
   22844:	clz	r2, r1
   22848:	clz	r3, r0
   2284c:	lsr	r2, r2, #5
   22850:	lsr	r3, r3, #5
   22854:	orrs	r2, r3, r2
   22858:	movwne	r1, #1
   2285c:	movwne	r0, #1
   22860:	cmp	r1, #0
   22864:	beq	22894 <__assert_fail@plt+0x11170>
   22868:	mvn	r2, #-2147483648	; 0x80000000
   2286c:	udiv	r2, r2, r1
   22870:	cmp	r2, r0
   22874:	bcs	22894 <__assert_fail@plt+0x11170>
   22878:	push	{fp, lr}
   2287c:	mov	fp, sp
   22880:	bl	115f8 <__errno_location@plt>
   22884:	mov	r1, #12
   22888:	str	r1, [r0]
   2288c:	mov	r0, #0
   22890:	pop	{fp, pc}
   22894:	b	113ac <calloc@plt>
   22898:	cmp	r0, #0
   2289c:	movweq	r0, #1
   228a0:	cmn	r0, #1
   228a4:	ble	228ac <__assert_fail@plt+0x11188>
   228a8:	b	11568 <malloc@plt>
   228ac:	push	{fp, lr}
   228b0:	mov	fp, sp
   228b4:	bl	115f8 <__errno_location@plt>
   228b8:	mov	r1, #12
   228bc:	str	r1, [r0]
   228c0:	mov	r0, #0
   228c4:	pop	{fp, pc}
   228c8:	push	{fp, lr}
   228cc:	mov	fp, sp
   228d0:	cmp	r0, #0
   228d4:	beq	228f0 <__assert_fail@plt+0x111cc>
   228d8:	cmp	r1, #0
   228dc:	beq	228fc <__assert_fail@plt+0x111d8>
   228e0:	cmn	r1, #1
   228e4:	ble	22904 <__assert_fail@plt+0x111e0>
   228e8:	pop	{fp, lr}
   228ec:	b	114c0 <realloc@plt>
   228f0:	mov	r0, r1
   228f4:	pop	{fp, lr}
   228f8:	b	22898 <__assert_fail@plt+0x11174>
   228fc:	bl	132e4 <__assert_fail@plt+0x1bc0>
   22900:	b	22910 <__assert_fail@plt+0x111ec>
   22904:	bl	115f8 <__errno_location@plt>
   22908:	mov	r1, #12
   2290c:	str	r1, [r0]
   22910:	mov	r0, #0
   22914:	pop	{fp, pc}
   22918:	push	{r4, r5, r6, sl, fp, lr}
   2291c:	add	fp, sp, #16
   22920:	mov	r4, r0
   22924:	bl	11520 <__fpending@plt>
   22928:	mov	r5, r0
   2292c:	mov	r0, r4
   22930:	bl	1152c <ferror_unlocked@plt>
   22934:	mov	r6, r0
   22938:	mov	r0, r4
   2293c:	bl	22a54 <__assert_fail@plt+0x11330>
   22940:	cmp	r6, #0
   22944:	beq	22964 <__assert_fail@plt+0x11240>
   22948:	mvn	r4, #0
   2294c:	cmp	r0, #0
   22950:	bne	22990 <__assert_fail@plt+0x1126c>
   22954:	bl	115f8 <__errno_location@plt>
   22958:	mov	r1, #0
   2295c:	str	r1, [r0]
   22960:	b	22990 <__assert_fail@plt+0x1126c>
   22964:	cmp	r0, #0
   22968:	mov	r4, r0
   2296c:	mvnne	r4, #0
   22970:	cmp	r5, #0
   22974:	bne	22990 <__assert_fail@plt+0x1126c>
   22978:	cmp	r0, #0
   2297c:	beq	22990 <__assert_fail@plt+0x1126c>
   22980:	bl	115f8 <__errno_location@plt>
   22984:	ldr	r0, [r0]
   22988:	subs	r4, r0, #9
   2298c:	mvnne	r4, #0
   22990:	mov	r0, r4
   22994:	pop	{r4, r5, r6, sl, fp, pc}
   22998:	push	{r4, r5, r6, r7, fp, lr}
   2299c:	add	fp, sp, #16
   229a0:	mov	r4, r0
   229a4:	ldr	r0, [r0, #4]
   229a8:	mov	r5, r1
   229ac:	cmp	r0, r1
   229b0:	bcs	229e0 <__assert_fail@plt+0x112bc>
   229b4:	mov	r6, r3
   229b8:	cmp	r3, #0
   229bc:	beq	229e8 <__assert_fail@plt+0x112c4>
   229c0:	mvn	r0, #0
   229c4:	udiv	r0, r0, r6
   229c8:	cmp	r0, r5
   229cc:	bcs	229e8 <__assert_fail@plt+0x112c4>
   229d0:	bl	115f8 <__errno_location@plt>
   229d4:	mov	r1, #12
   229d8:	str	r1, [r0]
   229dc:	b	22a4c <__assert_fail@plt+0x11328>
   229e0:	str	r5, [r4]
   229e4:	b	22a44 <__assert_fail@plt+0x11320>
   229e8:	ldr	r0, [r4, #8]
   229ec:	mul	r1, r6, r5
   229f0:	cmp	r0, r2
   229f4:	beq	22a0c <__assert_fail@plt+0x112e8>
   229f8:	bl	228c8 <__assert_fail@plt+0x111a4>
   229fc:	mov	r7, r0
   22a00:	cmp	r0, #0
   22a04:	bne	22a3c <__assert_fail@plt+0x11318>
   22a08:	b	22a4c <__assert_fail@plt+0x11328>
   22a0c:	mov	r0, r1
   22a10:	bl	22898 <__assert_fail@plt+0x11174>
   22a14:	cmp	r0, #0
   22a18:	beq	22a4c <__assert_fail@plt+0x11328>
   22a1c:	ldr	r1, [r4, #8]
   22a20:	mov	r7, r0
   22a24:	cmp	r1, #0
   22a28:	beq	22a3c <__assert_fail@plt+0x11318>
   22a2c:	ldr	r0, [r4]
   22a30:	mul	r2, r0, r6
   22a34:	mov	r0, r7
   22a38:	bl	11460 <memcpy@plt>
   22a3c:	str	r5, [r4]
   22a40:	stmib	r4, {r5, r7}
   22a44:	mov	r0, #1
   22a48:	pop	{r4, r5, r6, r7, fp, pc}
   22a4c:	mov	r0, #0
   22a50:	pop	{r4, r5, r6, r7, fp, pc}
   22a54:	push	{r4, r5, r6, sl, fp, lr}
   22a58:	add	fp, sp, #16
   22a5c:	sub	sp, sp, #8
   22a60:	mov	r4, r0
   22a64:	bl	11640 <fileno@plt>
   22a68:	cmn	r0, #1
   22a6c:	ble	22ae0 <__assert_fail@plt+0x113bc>
   22a70:	mov	r0, r4
   22a74:	bl	11580 <__freading@plt>
   22a78:	cmp	r0, #0
   22a7c:	beq	22aa8 <__assert_fail@plt+0x11384>
   22a80:	mov	r0, r4
   22a84:	bl	11640 <fileno@plt>
   22a88:	mov	r1, #1
   22a8c:	mov	r2, #0
   22a90:	mov	r3, #0
   22a94:	str	r1, [sp]
   22a98:	bl	11508 <lseek64@plt>
   22a9c:	and	r0, r0, r1
   22aa0:	cmn	r0, #1
   22aa4:	beq	22ae0 <__assert_fail@plt+0x113bc>
   22aa8:	mov	r0, r4
   22aac:	bl	22af0 <__assert_fail@plt+0x113cc>
   22ab0:	cmp	r0, #0
   22ab4:	beq	22ae0 <__assert_fail@plt+0x113bc>
   22ab8:	bl	115f8 <__errno_location@plt>
   22abc:	ldr	r6, [r0]
   22ac0:	mov	r5, r0
   22ac4:	mov	r0, r4
   22ac8:	bl	11664 <fclose@plt>
   22acc:	cmp	r6, #0
   22ad0:	strne	r6, [r5]
   22ad4:	mvnne	r0, #0
   22ad8:	sub	sp, fp, #16
   22adc:	pop	{r4, r5, r6, sl, fp, pc}
   22ae0:	mov	r0, r4
   22ae4:	sub	sp, fp, #16
   22ae8:	pop	{r4, r5, r6, sl, fp, lr}
   22aec:	b	11664 <fclose@plt>
   22af0:	push	{r4, sl, fp, lr}
   22af4:	add	fp, sp, #8
   22af8:	sub	sp, sp, #8
   22afc:	mov	r4, r0
   22b00:	cmp	r0, #0
   22b04:	beq	22b3c <__assert_fail@plt+0x11418>
   22b08:	mov	r0, r4
   22b0c:	bl	11580 <__freading@plt>
   22b10:	cmp	r0, #0
   22b14:	beq	22b3c <__assert_fail@plt+0x11418>
   22b18:	ldrb	r0, [r4, #1]
   22b1c:	tst	r0, #1
   22b20:	beq	22b3c <__assert_fail@plt+0x11418>
   22b24:	mov	r0, #1
   22b28:	mov	r2, #0
   22b2c:	mov	r3, #0
   22b30:	str	r0, [sp]
   22b34:	mov	r0, r4
   22b38:	bl	22b4c <__assert_fail@plt+0x11428>
   22b3c:	mov	r0, r4
   22b40:	sub	sp, fp, #8
   22b44:	pop	{r4, sl, fp, lr}
   22b48:	b	11418 <fflush@plt>
   22b4c:	push	{r4, r5, r6, r7, fp, lr}
   22b50:	add	fp, sp, #16
   22b54:	sub	sp, sp, #8
   22b58:	mov	r4, r0
   22b5c:	ldr	r0, [r0, #4]
   22b60:	mov	r5, r3
   22b64:	mov	r6, r2
   22b68:	ldr	r1, [r4, #8]
   22b6c:	cmp	r1, r0
   22b70:	bne	22b8c <__assert_fail@plt+0x11468>
   22b74:	ldrd	r0, [r4, #16]
   22b78:	cmp	r1, r0
   22b7c:	bne	22b8c <__assert_fail@plt+0x11468>
   22b80:	ldr	r0, [r4, #36]	; 0x24
   22b84:	cmp	r0, #0
   22b88:	beq	22ba4 <__assert_fail@plt+0x11480>
   22b8c:	mov	r0, r4
   22b90:	mov	r2, r6
   22b94:	mov	r3, r5
   22b98:	sub	sp, fp, #16
   22b9c:	pop	{r4, r5, r6, r7, fp, lr}
   22ba0:	b	11670 <fseeko64@plt>
   22ba4:	ldr	r7, [fp, #8]
   22ba8:	mov	r0, r4
   22bac:	bl	11640 <fileno@plt>
   22bb0:	mov	r2, r6
   22bb4:	mov	r3, r5
   22bb8:	str	r7, [sp]
   22bbc:	bl	11508 <lseek64@plt>
   22bc0:	and	r2, r0, r1
   22bc4:	cmn	r2, #1
   22bc8:	beq	22be4 <__assert_fail@plt+0x114c0>
   22bcc:	strd	r0, [r4, #80]	; 0x50
   22bd0:	ldr	r0, [r4]
   22bd4:	bic	r0, r0, #16
   22bd8:	str	r0, [r4]
   22bdc:	mov	r0, #0
   22be0:	b	22be8 <__assert_fail@plt+0x114c4>
   22be4:	mvn	r0, #0
   22be8:	sub	sp, fp, #16
   22bec:	pop	{r4, r5, r6, r7, fp, pc}
   22bf0:	push	{fp, lr}
   22bf4:	mov	fp, sp
   22bf8:	mov	r0, #14
   22bfc:	bl	116ac <nl_langinfo@plt>
   22c00:	movw	r1, #14499	; 0x38a3
   22c04:	cmp	r0, #0
   22c08:	movt	r1, #2
   22c0c:	movne	r1, r0
   22c10:	movw	r0, #16674	; 0x4122
   22c14:	ldrb	r2, [r1]
   22c18:	movt	r0, #2
   22c1c:	cmp	r2, #0
   22c20:	movne	r0, r1
   22c24:	pop	{fp, pc}
   22c28:	push	{r4, sl, fp, lr}
   22c2c:	add	fp, sp, #8
   22c30:	mov	r4, r0
   22c34:	bl	11424 <wcwidth@plt>
   22c38:	cmn	r0, #1
   22c3c:	popgt	{r4, sl, fp, pc}
   22c40:	mov	r0, r4
   22c44:	bl	114e4 <iswcntrl@plt>
   22c48:	clz	r0, r0
   22c4c:	lsr	r0, r0, #5
   22c50:	pop	{r4, sl, fp, pc}
   22c54:	push	{r4, r5, r6, sl, fp, lr}
   22c58:	add	fp, sp, #16
   22c5c:	mov	r4, r0
   22c60:	mov	r0, r1
   22c64:	mov	r5, r1
   22c68:	ldr	r1, [r0], #16
   22c6c:	cmp	r1, r0
   22c70:	beq	22c7c <__assert_fail@plt+0x11558>
   22c74:	mov	r6, r1
   22c78:	b	22c8c <__assert_fail@plt+0x11568>
   22c7c:	ldr	r2, [r5, #4]
   22c80:	add	r6, r4, #16
   22c84:	mov	r0, r6
   22c88:	bl	11460 <memcpy@plt>
   22c8c:	str	r6, [r4]
   22c90:	ldr	r0, [r5, #4]
   22c94:	str	r0, [r4, #4]
   22c98:	ldrb	r0, [r5, #8]
   22c9c:	strb	r0, [r4, #8]
   22ca0:	cmp	r0, #0
   22ca4:	ldrne	r0, [r5, #12]
   22ca8:	strne	r0, [r4, #12]
   22cac:	pop	{r4, r5, r6, sl, fp, pc}
   22cb0:	movw	r2, #16680	; 0x4128
   22cb4:	ubfx	r1, r0, #5, #3
   22cb8:	and	r0, r0, #31
   22cbc:	movt	r2, #2
   22cc0:	ldr	r1, [r2, r1, lsl #2]
   22cc4:	mov	r2, #1
   22cc8:	and	r0, r1, r2, lsl r0
   22ccc:	cmp	r0, #0
   22cd0:	movwne	r0, #1
   22cd4:	bx	lr
   22cd8:	push	{r4, r5, r6, r7, fp, lr}
   22cdc:	add	fp, sp, #16
   22ce0:	sub	sp, sp, #8
   22ce4:	cmp	r0, #0
   22ce8:	add	r5, sp, #4
   22cec:	mov	r7, r2
   22cf0:	mov	r4, r1
   22cf4:	movne	r5, r0
   22cf8:	mov	r0, r5
   22cfc:	bl	11538 <mbrtowc@plt>
   22d00:	mov	r6, r0
   22d04:	cmp	r7, #0
   22d08:	beq	22d30 <__assert_fail@plt+0x1160c>
   22d0c:	cmn	r6, #2
   22d10:	bcc	22d30 <__assert_fail@plt+0x1160c>
   22d14:	mov	r0, #0
   22d18:	bl	22d78 <__assert_fail@plt+0x11654>
   22d1c:	cmp	r0, #0
   22d20:	bne	22d30 <__assert_fail@plt+0x1160c>
   22d24:	ldrb	r0, [r4]
   22d28:	mov	r6, #1
   22d2c:	str	r0, [r5]
   22d30:	mov	r0, r6
   22d34:	sub	sp, fp, #16
   22d38:	pop	{r4, r5, r6, r7, fp, pc}
   22d3c:	cmp	r2, #0
   22d40:	beq	22d70 <__assert_fail@plt+0x1164c>
   22d44:	mvn	r3, #0
   22d48:	udiv	r3, r3, r2
   22d4c:	cmp	r3, r1
   22d50:	bcs	22d70 <__assert_fail@plt+0x1164c>
   22d54:	push	{fp, lr}
   22d58:	mov	fp, sp
   22d5c:	bl	115f8 <__errno_location@plt>
   22d60:	mov	r1, #12
   22d64:	str	r1, [r0]
   22d68:	mov	r0, #0
   22d6c:	pop	{fp, pc}
   22d70:	mul	r1, r2, r1
   22d74:	b	228c8 <__assert_fail@plt+0x111a4>
   22d78:	push	{r4, sl, fp, lr}
   22d7c:	add	fp, sp, #8
   22d80:	sub	sp, sp, #264	; 0x108
   22d84:	add	r1, sp, #7
   22d88:	movw	r2, #257	; 0x101
   22d8c:	bl	22de4 <__assert_fail@plt+0x116c0>
   22d90:	mov	r4, #0
   22d94:	cmp	r0, #0
   22d98:	bne	22dd8 <__assert_fail@plt+0x116b4>
   22d9c:	movw	r1, #16712	; 0x4148
   22da0:	add	r0, sp, #7
   22da4:	mov	r2, #2
   22da8:	movt	r1, #2
   22dac:	bl	115bc <bcmp@plt>
   22db0:	cmp	r0, #0
   22db4:	beq	22dd8 <__assert_fail@plt+0x116b4>
   22db8:	movw	r1, #16714	; 0x414a
   22dbc:	add	r0, sp, #7
   22dc0:	mov	r2, #6
   22dc4:	movt	r1, #2
   22dc8:	bl	115bc <bcmp@plt>
   22dcc:	cmp	r0, #0
   22dd0:	mov	r4, r0
   22dd4:	movwne	r4, #1
   22dd8:	mov	r0, r4
   22ddc:	sub	sp, fp, #8
   22de0:	pop	{r4, sl, fp, pc}
   22de4:	push	{r4, r5, r6, r7, fp, lr}
   22de8:	add	fp, sp, #16
   22dec:	mov	r4, r1
   22df0:	mov	r1, #0
   22df4:	mov	r6, r2
   22df8:	bl	11688 <setlocale@plt>
   22dfc:	cmp	r0, #0
   22e00:	beq	22e2c <__assert_fail@plt+0x11708>
   22e04:	mov	r7, r0
   22e08:	bl	115c8 <strlen@plt>
   22e0c:	cmp	r0, r6
   22e10:	bcs	22e40 <__assert_fail@plt+0x1171c>
   22e14:	add	r2, r0, #1
   22e18:	mov	r0, r4
   22e1c:	mov	r1, r7
   22e20:	bl	11460 <memcpy@plt>
   22e24:	mov	r5, #0
   22e28:	b	22e68 <__assert_fail@plt+0x11744>
   22e2c:	cmp	r6, #0
   22e30:	mov	r5, #22
   22e34:	movne	r0, #0
   22e38:	strbne	r0, [r4]
   22e3c:	b	22e68 <__assert_fail@plt+0x11744>
   22e40:	mov	r5, #34	; 0x22
   22e44:	cmp	r6, #0
   22e48:	beq	22e68 <__assert_fail@plt+0x11744>
   22e4c:	sub	r6, r6, #1
   22e50:	mov	r0, r4
   22e54:	mov	r1, r7
   22e58:	mov	r2, r6
   22e5c:	bl	11460 <memcpy@plt>
   22e60:	mov	r0, #0
   22e64:	strb	r0, [r4, r6]
   22e68:	mov	r0, r5
   22e6c:	pop	{r4, r5, r6, r7, fp, pc}
   22e70:	mov	r1, #0
   22e74:	b	11688 <setlocale@plt>
   22e78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22e7c:	mov	r7, r0
   22e80:	ldr	r6, [pc, #72]	; 22ed0 <__assert_fail@plt+0x117ac>
   22e84:	ldr	r5, [pc, #72]	; 22ed4 <__assert_fail@plt+0x117b0>
   22e88:	add	r6, pc, r6
   22e8c:	add	r5, pc, r5
   22e90:	sub	r6, r6, r5
   22e94:	mov	r8, r1
   22e98:	mov	r9, r2
   22e9c:	bl	11380 <pthread_mutex_unlock@plt-0x20>
   22ea0:	asrs	r6, r6, #2
   22ea4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22ea8:	mov	r4, #0
   22eac:	add	r4, r4, #1
   22eb0:	ldr	r3, [r5], #4
   22eb4:	mov	r2, r9
   22eb8:	mov	r1, r8
   22ebc:	mov	r0, r7
   22ec0:	blx	r3
   22ec4:	cmp	r6, r4
   22ec8:	bne	22eac <__assert_fail@plt+0x11788>
   22ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22ed0:	andeq	r2, r1, r4, ror r0
   22ed4:	andeq	r2, r1, ip, rrx
   22ed8:	bx	lr
   22edc:	ldr	r3, [pc, #12]	; 22ef0 <__assert_fail@plt+0x117cc>
   22ee0:	mov	r1, #0
   22ee4:	add	r3, pc, r3
   22ee8:	ldr	r2, [r3]
   22eec:	b	11610 <__cxa_atexit@plt>
   22ef0:	andeq	r2, r1, r8, asr r2

Disassembly of section .fini:

00022ef4 <.fini>:
   22ef4:	push	{r3, lr}
   22ef8:	pop	{r3, pc}
