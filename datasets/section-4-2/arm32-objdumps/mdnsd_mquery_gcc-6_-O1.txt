
../repos/mdnsd/src/.libs/mquery:     file format elf32-littlearm


Disassembly of section .init:

000108ec <.init>:
   108ec:	push	{r3, lr}
   108f0:	bl	11064 <__stack_chk_fail@plt+0x5fc>
   108f4:	pop	{r3, pc}

Disassembly of section .plt:

000108f8 <mdnsd_new@plt-0x14>:
   108f8:	push	{lr}		; (str lr, [sp, #-4]!)
   108fc:	ldr	lr, [pc, #4]	; 10908 <mdnsd_new@plt-0x4>
   10900:	add	lr, pc, lr
   10904:	ldr	pc, [lr, #8]!
   10908:	strdeq	r1, [r1], -r8

0001090c <mdnsd_new@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #69632	; 0x11000
   10914:	ldr	pc, [ip, #1784]!	; 0x6f8

00010918 <strtol@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #69632	; 0x11000
   10920:	ldr	pc, [ip, #1776]!	; 0x6f0

00010924 <setsockopt@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #69632	; 0x11000
   1092c:	ldr	pc, [ip, #1768]!	; 0x6e8

00010930 <printf@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #69632	; 0x11000
   10938:	ldr	pc, [ip, #1760]!	; 0x6e0

0001093c <time@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #69632	; 0x11000
   10944:	ldr	pc, [ip, #1752]!	; 0x6d8

00010948 <inet_ntoa@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #69632	; 0x11000
   10950:	ldr	pc, [ip, #1744]!	; 0x6d0

00010954 <select@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #69632	; 0x11000
   1095c:	ldr	pc, [ip, #1736]!	; 0x6c8

00010960 <recvfrom@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #69632	; 0x11000
   10968:	ldr	pc, [ip, #1728]!	; 0x6c0

0001096c <puts@plt>:
   1096c:	add	ip, pc, #0, 12
   10970:	add	ip, ip, #69632	; 0x11000
   10974:	ldr	pc, [ip, #1720]!	; 0x6b8

00010978 <__libc_start_main@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #69632	; 0x11000
   10980:	ldr	pc, [ip, #1712]!	; 0x6b0

00010984 <strerror@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #69632	; 0x11000
   1098c:	ldr	pc, [ip, #1704]!	; 0x6a8

00010990 <__gmon_start__@plt>:
   10990:	add	ip, pc, #0, 12
   10994:	add	ip, ip, #69632	; 0x11000
   10998:	ldr	pc, [ip, #1696]!	; 0x6a0

0001099c <getopt@plt>:
   1099c:	add	ip, pc, #0, 12
   109a0:	add	ip, ip, #69632	; 0x11000
   109a4:	ldr	pc, [ip, #1688]!	; 0x698

000109a8 <message_packet@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #69632	; 0x11000
   109b0:	ldr	pc, [ip, #1680]!	; 0x690

000109b4 <message_parse@plt>:
   109b4:	add	ip, pc, #0, 12
   109b8:	add	ip, ip, #69632	; 0x11000
   109bc:	ldr	pc, [ip, #1672]!	; 0x688

000109c0 <__errno_location@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #69632	; 0x11000
   109c8:	ldr	pc, [ip, #1664]!	; 0x680

000109cc <bind@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #69632	; 0x11000
   109d4:	ldr	pc, [ip, #1656]!	; 0x678

000109d8 <mdnsd_log@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #69632	; 0x11000
   109e0:	ldr	pc, [ip, #1648]!	; 0x670

000109e4 <memset@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #69632	; 0x11000
   109ec:	ldr	pc, [ip, #1640]!	; 0x668

000109f0 <sendto@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #69632	; 0x11000
   109f8:	ldr	pc, [ip, #1632]!	; 0x660

000109fc <mdnsd_sleep@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #69632	; 0x11000
   10a04:	ldr	pc, [ip, #1624]!	; 0x658

00010a08 <message_packet_len@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #69632	; 0x11000
   10a10:	ldr	pc, [ip, #1616]!	; 0x650

00010a14 <mdnsd_in@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #69632	; 0x11000
   10a1c:	ldr	pc, [ip, #1608]!	; 0x648

00010a20 <mdnsd_out@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #69632	; 0x11000
   10a28:	ldr	pc, [ip, #1600]!	; 0x640

00010a2c <socket@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #69632	; 0x11000
   10a34:	ldr	pc, [ip, #1592]!	; 0x638

00010a38 <mdnsd_query@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #69632	; 0x11000
   10a40:	ldr	pc, [ip, #1584]!	; 0x630

00010a44 <inet_addr@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #69632	; 0x11000
   10a4c:	ldr	pc, [ip, #1576]!	; 0x628

00010a50 <abort@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #69632	; 0x11000
   10a58:	ldr	pc, [ip, #1568]!	; 0x620

00010a5c <close@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #69632	; 0x11000
   10a64:	ldr	pc, [ip, #1560]!	; 0x618

00010a68 <__stack_chk_fail@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #69632	; 0x11000
   10a70:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00010a74 <.text>:
   10a74:	ldr	ip, [pc, #1380]	; 10fe0 <__stack_chk_fail@plt+0x578>
   10a78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10a7c:	mov	r5, r0
   10a80:	mov	r4, #12
   10a84:	ldr	r2, [pc, #1368]	; 10fe4 <__stack_chk_fail@plt+0x57c>
   10a88:	strd	r6, [sp, #8]
   10a8c:	mov	r6, r1
   10a90:	strd	r8, [sp, #16]
   10a94:	add	ip, pc, ip
   10a98:	ldr	r8, [pc, #1352]	; 10fe8 <__stack_chk_fail@plt+0x580>
   10a9c:	strd	sl, [sp, #24]
   10aa0:	str	lr, [sp, #32]
   10aa4:	vpush	{d8-d9}
   10aa8:	sub	sp, sp, #133120	; 0x20800
   10aac:	ldr	r2, [ip, r2]
   10ab0:	sub	sp, sp, #260	; 0x104
   10ab4:	add	r3, sp, #133120	; 0x20800
   10ab8:	add	r8, pc, r8
   10abc:	ldr	r7, [pc, #1320]	; 10fec <__stack_chk_fail@plt+0x584>
   10ac0:	add	r3, r3, #252	; 0xfc
   10ac4:	ldr	r2, [r2]
   10ac8:	str	r2, [r3]
   10acc:	mov	r2, #0
   10ad0:	add	r7, pc, r7
   10ad4:	mov	r2, r8
   10ad8:	mov	r1, r6
   10adc:	mov	r0, r5
   10ae0:	bl	1099c <getopt@plt>
   10ae4:	cmn	r0, #1
   10ae8:	beq	10b94 <__stack_chk_fail@plt+0x12c>
   10aec:	cmp	r0, #104	; 0x68
   10af0:	beq	10b60 <__stack_chk_fail@plt+0xf8>
   10af4:	cmp	r0, #116	; 0x74
   10af8:	beq	10b74 <__stack_chk_fail@plt+0x10c>
   10afc:	cmp	r0, #63	; 0x3f
   10b00:	beq	10b60 <__stack_chk_fail@plt+0xf8>
   10b04:	ldr	r0, [pc, #1252]	; 10ff0 <__stack_chk_fail@plt+0x588>
   10b08:	add	r0, pc, r0
   10b0c:	bl	1096c <puts@plt>
   10b10:	mov	r0, #1
   10b14:	ldr	r1, [pc, #1240]	; 10ff4 <__stack_chk_fail@plt+0x58c>
   10b18:	add	r3, sp, #133120	; 0x20800
   10b1c:	add	r3, r3, #252	; 0xfc
   10b20:	ldr	r2, [pc, #1212]	; 10fe4 <__stack_chk_fail@plt+0x57c>
   10b24:	add	r1, pc, r1
   10b28:	ldr	r2, [r1, r2]
   10b2c:	ldr	r1, [r2]
   10b30:	ldr	r2, [r3]
   10b34:	eors	r1, r2, r1
   10b38:	bne	10fdc <__stack_chk_fail@plt+0x574>
   10b3c:	add	sp, sp, #133120	; 0x20800
   10b40:	add	sp, sp, #260	; 0x104
   10b44:	vpop	{d8-d9}
   10b48:	ldrd	r4, [sp]
   10b4c:	ldrd	r6, [sp, #8]
   10b50:	ldrd	r8, [sp, #16]
   10b54:	ldrd	sl, [sp, #24]
   10b58:	add	sp, sp, #32
   10b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   10b60:	ldr	r0, [pc, #1168]	; 10ff8 <__stack_chk_fail@plt+0x590>
   10b64:	add	r0, pc, r0
   10b68:	bl	1096c <puts@plt>
   10b6c:	mov	r0, #0
   10b70:	b	10b14 <__stack_chk_fail@plt+0xac>
   10b74:	ldr	r3, [pc, #1152]	; 10ffc <__stack_chk_fail@plt+0x594>
   10b78:	mov	r2, #10
   10b7c:	mov	r1, #0
   10b80:	ldr	r3, [r7, r3]
   10b84:	ldr	r0, [r3]
   10b88:	bl	10918 <strtol@plt>
   10b8c:	mov	r4, r0
   10b90:	b	10ad4 <__stack_chk_fail@plt+0x6c>
   10b94:	ldr	r3, [pc, #1124]	; 11000 <__stack_chk_fail@plt+0x598>
   10b98:	ldr	r3, [r7, r3]
   10b9c:	ldr	r3, [r3]
   10ba0:	cmp	r3, r5
   10ba4:	ldrlt	r8, [r6, r3, lsl #2]
   10ba8:	blt	10bb4 <__stack_chk_fail@plt+0x14c>
   10bac:	ldr	r8, [pc, #1104]	; 11004 <__stack_chk_fail@plt+0x59c>
   10bb0:	add	r8, pc, r8
   10bb4:	mov	r1, #1000	; 0x3e8
   10bb8:	mov	r0, #1
   10bbc:	mov	r5, r0
   10bc0:	add	r6, sp, #2304	; 0x900
   10bc4:	bl	1090c <mdnsd_new@plt>
   10bc8:	mov	fp, r0
   10bcc:	mov	r2, #0
   10bd0:	str	r5, [r6, #-2264]	; 0xfffff728
   10bd4:	movw	r1, #2050	; 0x802
   10bd8:	mov	r0, #2
   10bdc:	bl	10a2c <socket@plt>
   10be0:	mov	r7, r0
   10be4:	bl	109c0 <__errno_location@plt>
   10be8:	cmp	r7, #0
   10bec:	str	r0, [sp, #24]
   10bf0:	blt	10e50 <__stack_chk_fail@plt+0x3e8>
   10bf4:	add	r3, sp, #256	; 0x100
   10bf8:	mov	r9, #4
   10bfc:	mov	r1, r5
   10c00:	mov	r2, #15
   10c04:	mov	r0, r7
   10c08:	str	r9, [sp]
   10c0c:	str	r3, [sp, #12]
   10c10:	add	r3, sp, #40	; 0x28
   10c14:	str	r3, [sp, #8]
   10c18:	bl	10924 <setsockopt@plt>
   10c1c:	cmp	r0, #0
   10c20:	ldr	r3, [sp, #8]
   10c24:	bne	10f90 <__stack_chk_fail@plt+0x528>
   10c28:	mov	r5, #4
   10c2c:	mov	r2, #2
   10c30:	mov	r1, #1
   10c34:	mov	r0, r7
   10c38:	str	r5, [sp]
   10c3c:	bl	10924 <setsockopt@plt>
   10c40:	cmp	r0, #0
   10c44:	bne	10f6c <__stack_chk_fail@plt+0x504>
   10c48:	ldr	r0, [sp, #12]
   10c4c:	mov	r5, #0
   10c50:	mov	ip, #2
   10c54:	movt	ip, #59668	; 0xe914
   10c58:	mov	r2, #16
   10c5c:	sub	r3, r0, #40	; 0x28
   10c60:	sub	r1, r0, #44	; 0x2c
   10c64:	str	r5, [r0, #-40]	; 0xffffffd8
   10c68:	mov	r0, r7
   10c6c:	str	r5, [r3, #4]
   10c70:	str	r5, [r3, #8]
   10c74:	str	ip, [r6, #-2092]	; 0xfffff7d4
   10c78:	bl	109cc <bind@plt>
   10c7c:	subs	r9, r0, #0
   10c80:	bne	10f5c <__stack_chk_fail@plt+0x4f4>
   10c84:	ldr	r0, [pc, #892]	; 11008 <__stack_chk_fail@plt+0x5a0>
   10c88:	add	r0, pc, r0
   10c8c:	bl	10a44 <inet_addr@plt>
   10c90:	ldr	r3, [sp, #12]
   10c94:	mov	ip, r0
   10c98:	mov	r2, #8
   10c9c:	mov	r1, r9
   10ca0:	mov	r0, r7
   10ca4:	str	r9, [r6, #-2256]	; 0xfffff730
   10ca8:	str	r2, [sp]
   10cac:	mov	r2, #35	; 0x23
   10cb0:	str	ip, [r6, #-2260]	; 0xfffff72c
   10cb4:	sub	r3, r3, #212	; 0xd4
   10cb8:	bl	10924 <setsockopt@plt>
   10cbc:	cmp	r0, #0
   10cc0:	bne	10fb8 <__stack_chk_fail@plt+0x550>
   10cc4:	ldr	r0, [pc, #832]	; 1100c <__stack_chk_fail@plt+0x5a4>
   10cc8:	mov	r2, r8
   10ccc:	mov	r1, r4
   10cd0:	mov	r9, #0
   10cd4:	mov	r5, r9
   10cd8:	add	r0, pc, r0
   10cdc:	bl	10930 <printf@plt>
   10ce0:	ldr	r3, [pc, #808]	; 11010 <__stack_chk_fail@plt+0x5a8>
   10ce4:	add	ip, sp, #84	; 0x54
   10ce8:	mov	r2, r4
   10cec:	mov	r1, r8
   10cf0:	mov	r0, fp
   10cf4:	str	r9, [sp]
   10cf8:	vmov	s19, ip
   10cfc:	add	r3, pc, r3
   10d00:	bl	10a38 <mdnsd_query@plt>
   10d04:	mov	r1, #1
   10d08:	and	r2, r7, #31
   10d0c:	asr	r3, r7, #5
   10d10:	lsl	r2, r1, r2
   10d14:	lsl	r3, r3, #2
   10d18:	str	r2, [sp, #20]
   10d1c:	add	r2, r7, r1
   10d20:	str	r3, [sp, #28]
   10d24:	vmov	s18, r2
   10d28:	mov	r0, fp
   10d2c:	bl	109fc <mdnsd_sleep@plt>
   10d30:	ldr	r2, [sp, #12]
   10d34:	sub	r3, r2, #176	; 0xb0
   10d38:	sub	r2, r2, #48	; 0x30
   10d3c:	str	r5, [r3, #4]!
   10d40:	cmp	r3, r2
   10d44:	bne	10d3c <__stack_chk_fail@plt+0x2d4>
   10d48:	str	r0, [sp]
   10d4c:	ldr	r3, [sp, #28]
   10d50:	vmov	r1, s19
   10d54:	ldr	r8, [sp, #20]
   10d58:	vmov	r0, s18
   10d5c:	add	r4, r6, r3
   10d60:	mov	r3, #0
   10d64:	ldr	ip, [r4, #-2220]	; 0xfffff754
   10d68:	mov	r2, r3
   10d6c:	orr	ip, ip, r8
   10d70:	str	ip, [r4, #-2220]	; 0xfffff754
   10d74:	bl	10954 <select@plt>
   10d78:	ldr	r3, [r4, #-2220]	; 0xfffff754
   10d7c:	tst	r8, r3
   10d80:	bne	10e84 <__stack_chk_fail@plt+0x41c>
   10d84:	ldr	r3, [sp, #12]
   10d88:	add	sl, sp, #40	; 0x28
   10d8c:	add	r4, sp, #212	; 0xd4
   10d90:	vmov	s16, fp
   10d94:	add	r9, sp, #38	; 0x26
   10d98:	sub	r8, r6, #2224	; 0x8b0
   10d9c:	vmov	s17, sl
   10da0:	sub	r3, r3, #188	; 0xbc
   10da4:	str	r3, [sp, #16]
   10da8:	b	10e2c <__stack_chk_fail@plt+0x3c4>
   10dac:	sub	r3, r6, #2256	; 0x8d0
   10db0:	ldr	ip, [sp, #12]
   10db4:	mov	sl, #0
   10db8:	mov	fp, #0
   10dbc:	mov	r1, #2
   10dc0:	ldrh	r3, [r3, #-10]
   10dc4:	mov	r0, r4
   10dc8:	strh	r1, [r8, #-12]
   10dcc:	ldr	r2, [r6, #-2264]	; 0xfffff728
   10dd0:	strd	sl, [ip, #-180]	; 0xffffff4c
   10dd4:	strh	r3, [r8, #-10]
   10dd8:	str	r2, [r6, #-2232]	; 0xfffff748
   10ddc:	bl	109a8 <message_packet@plt>
   10de0:	mov	r1, r0
   10de4:	mov	r0, r4
   10de8:	str	r1, [sp, #8]
   10dec:	bl	10a08 <message_packet_len@plt>
   10df0:	mov	ip, #16
   10df4:	mov	r2, r0
   10df8:	ldr	r1, [sp, #8]
   10dfc:	mov	r0, r7
   10e00:	ldr	r3, [sp, #16]
   10e04:	stm	sp, {r3, ip}
   10e08:	mov	r3, #0
   10e0c:	bl	109f0 <sendto@plt>
   10e10:	mov	r3, r0
   10e14:	mov	r0, r4
   10e18:	str	r3, [sp, #8]
   10e1c:	bl	10a08 <message_packet_len@plt>
   10e20:	ldr	r3, [sp, #8]
   10e24:	cmp	r3, r0
   10e28:	bne	10e60 <__stack_chk_fail@plt+0x3f8>
   10e2c:	vmov	r2, s17
   10e30:	mov	r3, r9
   10e34:	vmov	r0, s16
   10e38:	mov	r1, r4
   10e3c:	bl	10a20 <mdnsd_out@plt>
   10e40:	cmp	r0, #0
   10e44:	bne	10dac <__stack_chk_fail@plt+0x344>
   10e48:	vmov	fp, s16
   10e4c:	b	10d28 <__stack_chk_fail@plt+0x2c0>
   10e50:	add	r3, sp, #256	; 0x100
   10e54:	mov	r7, #0
   10e58:	str	r3, [sp, #12]
   10e5c:	b	10cc4 <__stack_chk_fail@plt+0x25c>
   10e60:	ldr	r3, [sp, #24]
   10e64:	ldr	r0, [r3]
   10e68:	bl	10984 <strerror@plt>
   10e6c:	mov	r1, r0
   10e70:	ldr	r0, [pc, #412]	; 11014 <__stack_chk_fail@plt+0x5ac>
   10e74:	add	r0, pc, r0
   10e78:	bl	10930 <printf@plt>
   10e7c:	mov	r0, #1
   10e80:	b	10b14 <__stack_chk_fail@plt+0xac>
   10e84:	mov	r3, #16
   10e88:	sub	r2, r6, #2240	; 0x8c0
   10e8c:	sub	r2, r2, #12
   10e90:	add	r4, sp, #67584	; 0x10800
   10e94:	str	r3, [r6, #-2260]	; 0xfffff72c
   10e98:	add	r3, sp, #52	; 0x34
   10e9c:	movw	r9, #2088	; 0x828
   10ea0:	movt	r9, #1
   10ea4:	add	sl, sp, #44	; 0x2c
   10ea8:	add	r4, r4, #252	; 0xfc
   10eac:	str	r3, [sp, #8]
   10eb0:	str	r2, [sp, #16]
   10eb4:	b	10ee4 <__stack_chk_fail@plt+0x47c>
   10eb8:	ldr	r3, [sp, #12]
   10ebc:	mov	r2, r9
   10ec0:	mov	r1, #0
   10ec4:	sub	r8, r3, #44	; 0x2c
   10ec8:	mov	r0, r8
   10ecc:	bl	109e4 <memset@plt>
   10ed0:	mov	r1, r4
   10ed4:	mov	r0, r8
   10ed8:	bl	109b4 <message_parse@plt>
   10edc:	cmp	r0, #0
   10ee0:	beq	10f40 <__stack_chk_fail@plt+0x4d8>
   10ee4:	ldr	r1, [sp, #8]
   10ee8:	mov	r3, #0
   10eec:	movw	r2, #65535	; 0xffff
   10ef0:	mov	r0, r7
   10ef4:	stm	sp, {r1, sl}
   10ef8:	mov	r1, r4
   10efc:	bl	10960 <recvfrom@plt>
   10f00:	cmp	r0, #0
   10f04:	bgt	10eb8 <__stack_chk_fail@plt+0x450>
   10f08:	beq	10d84 <__stack_chk_fail@plt+0x31c>
   10f0c:	ldr	r3, [sp, #24]
   10f10:	ldr	r4, [r3]
   10f14:	cmp	r4, #11
   10f18:	beq	10d84 <__stack_chk_fail@plt+0x31c>
   10f1c:	mov	r0, r4
   10f20:	bl	10984 <strerror@plt>
   10f24:	mov	r2, r0
   10f28:	ldr	r0, [pc, #232]	; 11018 <__stack_chk_fail@plt+0x5b0>
   10f2c:	mov	r1, r4
   10f30:	add	r0, pc, r0
   10f34:	bl	10930 <printf@plt>
   10f38:	mov	r0, #1
   10f3c:	b	10b14 <__stack_chk_fail@plt+0xac>
   10f40:	ldr	r3, [sp, #16]
   10f44:	mov	r1, r8
   10f48:	mov	r0, fp
   10f4c:	ldr	r2, [r6, #-2248]	; 0xfffff738
   10f50:	ldrh	r3, [r3, #2]
   10f54:	bl	10a14 <mdnsd_in@plt>
   10f58:	b	10ee4 <__stack_chk_fail@plt+0x47c>
   10f5c:	mov	r0, r7
   10f60:	mov	r7, r5
   10f64:	bl	10a5c <close@plt>
   10f68:	b	10cc4 <__stack_chk_fail@plt+0x25c>
   10f6c:	ldr	r3, [sp, #24]
   10f70:	ldr	r0, [r3]
   10f74:	bl	10984 <strerror@plt>
   10f78:	ldr	r1, [pc, #156]	; 1101c <__stack_chk_fail@plt+0x5b4>
   10f7c:	mov	r2, r0
   10f80:	mov	r0, r5
   10f84:	add	r1, pc, r1
   10f88:	bl	109d8 <mdnsd_log@plt>
   10f8c:	b	10c48 <__stack_chk_fail@plt+0x1e0>
   10f90:	ldr	r3, [sp, #24]
   10f94:	ldr	r0, [r3]
   10f98:	bl	10984 <strerror@plt>
   10f9c:	ldr	r1, [pc, #124]	; 11020 <__stack_chk_fail@plt+0x5b8>
   10fa0:	mov	r2, r0
   10fa4:	mov	r0, r9
   10fa8:	add	r1, pc, r1
   10fac:	bl	109d8 <mdnsd_log@plt>
   10fb0:	ldr	r3, [sp, #8]
   10fb4:	b	10c28 <__stack_chk_fail@plt+0x1c0>
   10fb8:	ldr	r3, [sp, #24]
   10fbc:	ldr	r0, [r3]
   10fc0:	bl	10984 <strerror@plt>
   10fc4:	ldr	r1, [pc, #88]	; 11024 <__stack_chk_fail@plt+0x5bc>
   10fc8:	mov	r2, r0
   10fcc:	mov	r0, #4
   10fd0:	add	r1, pc, r1
   10fd4:	bl	109d8 <mdnsd_log@plt>
   10fd8:	b	10cc4 <__stack_chk_fail@plt+0x25c>
   10fdc:	bl	10a68 <__stack_chk_fail@plt>
   10fe0:	andeq	r1, r1, r4, ror #10
   10fe4:	andeq	r0, r0, ip, lsl #1
   10fe8:	ldrdeq	r0, [r0], -r8
   10fec:	andeq	r1, r1, r8, lsr #10
   10ff0:	andeq	r0, r0, r4, ror #16
   10ff4:	ldrdeq	r1, [r1], -r4
   10ff8:	andeq	r0, r0, r8, lsl #16
   10ffc:	muleq	r0, r0, r0
   11000:	andeq	r0, r0, r4, lsl #1
   11004:	muleq	r0, ip, r7
   11008:	andeq	r0, r0, r0, asr r7
   1100c:	andeq	r0, r0, r8, lsr r7
   11010:	andeq	r0, r0, r4, lsl r4
   11014:	andeq	r0, r0, r0, ror #11
   11018:	andeq	r0, r0, r0, lsl #10
   1101c:	andeq	r0, r0, r4, lsr r4
   11020:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11024:	andeq	r0, r0, r4, lsl r4
   11028:	mov	fp, #0
   1102c:	mov	lr, #0
   11030:	pop	{r1}		; (ldr r1, [sp], #4)
   11034:	mov	r2, sp
   11038:	push	{r2}		; (str r2, [sp, #-4]!)
   1103c:	push	{r0}		; (str r0, [sp, #-4]!)
   11040:	ldr	ip, [pc, #16]	; 11058 <__stack_chk_fail@plt+0x5f0>
   11044:	push	{ip}		; (str ip, [sp, #-4]!)
   11048:	ldr	r0, [pc, #12]	; 1105c <__stack_chk_fail@plt+0x5f4>
   1104c:	ldr	r3, [pc, #12]	; 11060 <__stack_chk_fail@plt+0x5f8>
   11050:	bl	10978 <__libc_start_main@plt>
   11054:	bl	10a50 <abort@plt>
   11058:	andeq	r1, r1, r0, asr #5
   1105c:	andeq	r0, r1, r4, ror sl
   11060:	andeq	r1, r1, r0, ror #4
   11064:	ldr	r3, [pc, #20]	; 11080 <__stack_chk_fail@plt+0x618>
   11068:	ldr	r2, [pc, #20]	; 11084 <__stack_chk_fail@plt+0x61c>
   1106c:	add	r3, pc, r3
   11070:	ldr	r2, [r3, r2]
   11074:	cmp	r2, #0
   11078:	bxeq	lr
   1107c:	b	10990 <__gmon_start__@plt>
   11080:	andeq	r0, r1, ip, lsl #31
   11084:	andeq	r0, r0, r8, lsl #1
   11088:	ldr	r0, [pc, #24]	; 110a8 <__stack_chk_fail@plt+0x640>
   1108c:	ldr	r3, [pc, #24]	; 110ac <__stack_chk_fail@plt+0x644>
   11090:	cmp	r3, r0
   11094:	bxeq	lr
   11098:	ldr	r3, [pc, #16]	; 110b0 <__stack_chk_fail@plt+0x648>
   1109c:	cmp	r3, #0
   110a0:	bxeq	lr
   110a4:	bx	r3
   110a8:	muleq	r2, ip, r0
   110ac:	muleq	r2, ip, r0
   110b0:	andeq	r0, r0, r0
   110b4:	ldr	r0, [pc, #36]	; 110e0 <__stack_chk_fail@plt+0x678>
   110b8:	ldr	r1, [pc, #36]	; 110e4 <__stack_chk_fail@plt+0x67c>
   110bc:	sub	r3, r1, r0
   110c0:	lsr	r1, r3, #31
   110c4:	add	r1, r1, r3, asr #2
   110c8:	asrs	r1, r1, #1
   110cc:	bxeq	lr
   110d0:	ldr	r3, [pc, #16]	; 110e8 <__stack_chk_fail@plt+0x680>
   110d4:	cmp	r3, #0
   110d8:	bxeq	lr
   110dc:	bx	r3
   110e0:	muleq	r2, ip, r0
   110e4:	muleq	r2, ip, r0
   110e8:	andeq	r0, r0, r0
   110ec:	push	{r4, lr}
   110f0:	ldr	r4, [pc, #24]	; 11110 <__stack_chk_fail@plt+0x6a8>
   110f4:	ldrb	r3, [r4]
   110f8:	cmp	r3, #0
   110fc:	popne	{r4, pc}
   11100:	bl	11088 <__stack_chk_fail@plt+0x620>
   11104:	mov	r3, #1
   11108:	strb	r3, [r4]
   1110c:	pop	{r4, pc}
   11110:	muleq	r2, ip, r0
   11114:	b	110b4 <__stack_chk_fail@plt+0x64c>
   11118:	ldr	r2, [pc, #292]	; 11244 <__stack_chk_fail@plt+0x7dc>
   1111c:	strd	r4, [sp, #-12]!
   11120:	mov	r4, r0
   11124:	ldr	r3, [pc, #284]	; 11248 <__stack_chk_fail@plt+0x7e0>
   11128:	ldr	r5, [r0, #8]
   1112c:	add	r2, pc, r2
   11130:	str	lr, [sp, #8]
   11134:	sub	sp, sp, #28
   11138:	ldr	r3, [r2, r3]
   1113c:	cmp	r5, #0
   11140:	moveq	r2, r5
   11144:	ldr	r3, [r3]
   11148:	str	r3, [sp, #20]
   1114c:	mov	r3, #0
   11150:	bne	111c8 <__stack_chk_fail@plt+0x760>
   11154:	ldrh	r0, [r4, #4]
   11158:	ldr	r1, [r4]
   1115c:	cmp	r0, #12
   11160:	beq	111e4 <__stack_chk_fail@plt+0x77c>
   11164:	cmp	r0, #33	; 0x21
   11168:	beq	11224 <__stack_chk_fail@plt+0x7bc>
   1116c:	cmp	r0, #1
   11170:	beq	111f8 <__stack_chk_fail@plt+0x790>
   11174:	ldrh	ip, [r4, #12]
   11178:	mov	r3, r2
   1117c:	mov	r2, r1
   11180:	mov	r1, r0
   11184:	ldr	r0, [pc, #192]	; 1124c <__stack_chk_fail@plt+0x7e4>
   11188:	str	ip, [sp]
   1118c:	add	r0, pc, r0
   11190:	bl	10930 <printf@plt>
   11194:	ldr	r2, [pc, #180]	; 11250 <__stack_chk_fail@plt+0x7e8>
   11198:	ldr	r3, [pc, #168]	; 11248 <__stack_chk_fail@plt+0x7e0>
   1119c:	add	r2, pc, r2
   111a0:	ldr	r3, [r2, r3]
   111a4:	ldr	r2, [r3]
   111a8:	ldr	r3, [sp, #20]
   111ac:	eors	r2, r3, r2
   111b0:	bne	11240 <__stack_chk_fail@plt+0x7d8>
   111b4:	mov	r0, #0
   111b8:	add	sp, sp, #28
   111bc:	ldrd	r4, [sp]
   111c0:	add	sp, sp, #8
   111c4:	pop	{pc}		; (ldr pc, [sp], #4)
   111c8:	mov	r0, #0
   111cc:	bl	1093c <time@plt>
   111d0:	sub	r2, r5, r0
   111d4:	ldrh	r0, [r4, #4]
   111d8:	ldr	r1, [r4]
   111dc:	cmp	r0, #12
   111e0:	bne	11164 <__stack_chk_fail@plt+0x6fc>
   111e4:	ldr	r0, [pc, #104]	; 11254 <__stack_chk_fail@plt+0x7ec>
   111e8:	ldr	r3, [r4, #24]
   111ec:	add	r0, pc, r0
   111f0:	bl	10930 <printf@plt>
   111f4:	b	11194 <__stack_chk_fail@plt+0x72c>
   111f8:	ldr	r0, [r4, #20]
   111fc:	str	r2, [sp, #8]
   11200:	str	r1, [sp, #12]
   11204:	bl	10948 <inet_ntoa@plt>
   11208:	mov	r3, r0
   1120c:	ldr	r0, [pc, #68]	; 11258 <__stack_chk_fail@plt+0x7f0>
   11210:	ldr	r2, [sp, #8]
   11214:	ldr	r1, [sp, #12]
   11218:	add	r0, pc, r0
   1121c:	bl	10930 <printf@plt>
   11220:	b	11194 <__stack_chk_fail@plt+0x72c>
   11224:	ldrh	ip, [r4, #32]
   11228:	ldr	r0, [pc, #44]	; 1125c <__stack_chk_fail@plt+0x7f4>
   1122c:	ldr	r3, [r4, #24]
   11230:	str	ip, [sp]
   11234:	add	r0, pc, r0
   11238:	bl	10930 <printf@plt>
   1123c:	b	11194 <__stack_chk_fail@plt+0x72c>
   11240:	bl	10a68 <__stack_chk_fail@plt>
   11244:	andeq	r0, r1, ip, asr #29
   11248:	andeq	r0, r0, ip, lsl #1
   1124c:	muleq	r0, ip, r1
   11250:	andeq	r0, r1, ip, asr lr
   11254:	strdeq	r0, [r0], -ip
   11258:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1125c:	ldrdeq	r0, [r0], -r4
   11260:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11264:	mov	r7, r0
   11268:	ldr	r6, [pc, #72]	; 112b8 <__stack_chk_fail@plt+0x850>
   1126c:	ldr	r5, [pc, #72]	; 112bc <__stack_chk_fail@plt+0x854>
   11270:	add	r6, pc, r6
   11274:	add	r5, pc, r5
   11278:	sub	r6, r6, r5
   1127c:	mov	r8, r1
   11280:	mov	r9, r2
   11284:	bl	108ec <mdnsd_new@plt-0x20>
   11288:	asrs	r6, r6, #2
   1128c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11290:	mov	r4, #0
   11294:	add	r4, r4, #1
   11298:	ldr	r3, [r5], #4
   1129c:	mov	r2, r9
   112a0:	mov	r1, r8
   112a4:	mov	r0, r7
   112a8:	blx	r3
   112ac:	cmp	r6, r4
   112b0:	bne	11294 <__stack_chk_fail@plt+0x82c>
   112b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   112b8:	andeq	r0, r1, r4, lsl #25
   112bc:	andeq	r0, r1, ip, ror ip
   112c0:	bx	lr

Disassembly of section .fini:

000112c4 <.fini>:
   112c4:	push	{r3, lr}
   112c8:	pop	{r3, pc}
