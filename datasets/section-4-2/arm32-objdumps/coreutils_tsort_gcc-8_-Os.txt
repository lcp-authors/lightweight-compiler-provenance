
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c2c <.init>:
   10c2c:	push	{r3, lr}
   10c30:	bl	1158c <__assert_fail@plt+0x6e8>
   10c34:	pop	{r3, pc}

Disassembly of section .plt:

00010c38 <calloc@plt-0x14>:
   10c38:	push	{lr}		; (str lr, [sp, #-4]!)
   10c3c:	ldr	lr, [pc, #4]	; 10c48 <calloc@plt-0x4>
   10c40:	add	lr, pc, lr
   10c44:	ldr	pc, [lr, #8]!
   10c48:			; <UNDEFINED> instruction: 0x000143b8

00010c4c <calloc@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #20, 20	; 0x14000
   10c54:	ldr	pc, [ip, #952]!	; 0x3b8

00010c58 <fputs_unlocked@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #20, 20	; 0x14000
   10c60:	ldr	pc, [ip, #944]!	; 0x3b0

00010c64 <strcmp@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #20, 20	; 0x14000
   10c6c:	ldr	pc, [ip, #936]!	; 0x3a8

00010c70 <posix_fadvise64@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #20, 20	; 0x14000
   10c78:	ldr	pc, [ip, #928]!	; 0x3a0

00010c7c <fflush@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #20, 20	; 0x14000
   10c84:	ldr	pc, [ip, #920]!	; 0x398

00010c88 <free@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #912]!	; 0x390

00010c94 <_exit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #904]!	; 0x388

00010ca0 <memcpy@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #896]!	; 0x380

00010cac <mbsinit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #888]!	; 0x378

00010cb8 <memcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #880]!	; 0x370

00010cc4 <fputc_unlocked@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #872]!	; 0x368

00010cd0 <getc_unlocked@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #864]!	; 0x360

00010cdc <dcgettext@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #856]!	; 0x358

00010ce8 <dup2@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #848]!	; 0x350

00010cf4 <realloc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #840]!	; 0x348

00010d00 <textdomain@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #832]!	; 0x340

00010d0c <iswprint@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #824]!	; 0x338

00010d18 <lseek64@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #816]!	; 0x330

00010d24 <__ctype_get_mb_cur_max@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #808]!	; 0x328

00010d30 <__fpending@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #800]!	; 0x320

00010d3c <ferror_unlocked@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #792]!	; 0x318

00010d48 <mbrtowc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #784]!	; 0x310

00010d54 <error@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #776]!	; 0x308

00010d60 <open64@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #768]!	; 0x300

00010d6c <puts@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #760]!	; 0x2f8

00010d78 <malloc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #752]!	; 0x2f0

00010d84 <__libc_start_main@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d90 <__freading@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #736]!	; 0x2e0

00010d9c <__gmon_start__@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #728]!	; 0x2d8

00010da8 <freopen64@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #720]!	; 0x2d0

00010db4 <getopt_long@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc0 <__ctype_b_loc@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dcc <exit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dd8 <strlen@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #688]!	; 0x2b0

00010de4 <__errno_location@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #680]!	; 0x2a8

00010df0 <__cxa_atexit@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dfc <memset@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #664]!	; 0x298

00010e08 <__printf_chk@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #656]!	; 0x290

00010e14 <fileno@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #648]!	; 0x288

00010e20 <__fprintf_chk@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #640]!	; 0x280

00010e2c <fclose@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #632]!	; 0x278

00010e38 <fseeko64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #624]!	; 0x270

00010e44 <setlocale@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #616]!	; 0x268

00010e50 <strrchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #608]!	; 0x260

00010e5c <nl_langinfo@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #600]!	; 0x258

00010e68 <bindtextdomain@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #592]!	; 0x250

00010e74 <fputs@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #584]!	; 0x248

00010e80 <strncmp@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #576]!	; 0x240

00010e8c <abort@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #568]!	; 0x238

00010e98 <close@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #560]!	; 0x230

00010ea4 <__assert_fail@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #552]!	; 0x228

Disassembly of section .text:

00010eb0 <.text>:
   10eb0:	push	{r4, lr}
   10eb4:	bl	10de4 <__errno_location@plt>
   10eb8:	mov	r3, #12
   10ebc:	str	r3, [r0]
   10ec0:	mov	r0, #0
   10ec4:	pop	{r4, pc}
   10ec8:	push	{r7, fp, lr}
   10ecc:	mov	r5, r0
   10ed0:	sub	sp, sp, #52	; 0x34
   10ed4:	mov	r4, r1
   10ed8:	mov	r7, #1
   10edc:	mov	r6, #0
   10ee0:	ldr	r0, [r1]
   10ee4:	bl	12074 <__assert_fail@plt+0x11d0>
   10ee8:	ldr	r1, [pc, #1512]	; 114d8 <__assert_fail@plt+0x634>
   10eec:	mov	r0, #6
   10ef0:	bl	10e44 <setlocale@plt>
   10ef4:	ldr	r1, [pc, #1504]	; 114dc <__assert_fail@plt+0x638>
   10ef8:	ldr	r0, [pc, #1504]	; 114e0 <__assert_fail@plt+0x63c>
   10efc:	bl	10e68 <bindtextdomain@plt>
   10f00:	ldr	r0, [pc, #1496]	; 114e0 <__assert_fail@plt+0x63c>
   10f04:	bl	10d00 <textdomain@plt>
   10f08:	ldr	r0, [pc, #1492]	; 114e4 <__assert_fail@plt+0x640>
   10f0c:	bl	1444c <__assert_fail@plt+0x35a8>
   10f10:	ldr	r3, [pc, #1488]	; 114e8 <__assert_fail@plt+0x644>
   10f14:	mov	r1, r4
   10f18:	mov	r0, r5
   10f1c:	str	r7, [sp, #4]
   10f20:	ldr	r8, [pc, #1476]	; 114ec <__assert_fail@plt+0x648>
   10f24:	ldr	r2, [pc, #1476]	; 114f0 <__assert_fail@plt+0x64c>
   10f28:	str	r3, [sp, #12]
   10f2c:	ldr	r3, [pc, #1472]	; 114f4 <__assert_fail@plt+0x650>
   10f30:	str	r6, [sp, #16]
   10f34:	str	r3, [sp, #8]
   10f38:	ldr	r3, [pc, #1464]	; 114f8 <__assert_fail@plt+0x654>
   10f3c:	ldr	r3, [r3]
   10f40:	str	r3, [sp]
   10f44:	ldr	r3, [pc, #1456]	; 114fc <__assert_fail@plt+0x658>
   10f48:	bl	11fac <__assert_fail@plt+0x1108>
   10f4c:	ldr	r3, [r8]
   10f50:	sub	r2, r5, r3
   10f54:	cmp	r2, r7
   10f58:	ble	10f9c <__assert_fail@plt+0xf8>
   10f5c:	mov	r2, #5
   10f60:	ldr	r1, [pc, #1432]	; 11500 <__assert_fail@plt+0x65c>
   10f64:	mov	r0, r6
   10f68:	bl	10cdc <dcgettext@plt>
   10f6c:	ldr	r3, [r8]
   10f70:	mov	r5, r0
   10f74:	add	r3, r3, r7
   10f78:	ldr	r0, [r4, r3, lsl #2]
   10f7c:	bl	13674 <__assert_fail@plt+0x27d0>
   10f80:	mov	r3, r0
   10f84:	mov	r2, r5
   10f88:	mov	r0, r6
   10f8c:	mov	r1, r6
   10f90:	bl	10d54 <error@plt>
   10f94:	mov	r0, r7
   10f98:	bl	11828 <__assert_fail@plt+0x984>
   10f9c:	cmp	r3, r5
   10fa0:	ldr	r1, [pc, #1372]	; 11504 <__assert_fail@plt+0x660>
   10fa4:	ldrne	r7, [r4, r3, lsl #2]
   10fa8:	ldreq	r7, [pc, #1364]	; 11504 <__assert_fail@plt+0x660>
   10fac:	mov	r0, r7
   10fb0:	bl	10c64 <strcmp@plt>
   10fb4:	str	r0, [sp, #28]
   10fb8:	mov	r0, #28
   10fbc:	bl	14008 <__assert_fail@plt+0x3164>
   10fc0:	ldr	r3, [sp, #28]
   10fc4:	str	r0, [sp, #24]
   10fc8:	cmp	r3, #0
   10fcc:	beq	11008 <__assert_fail@plt+0x164>
   10fd0:	ldr	r3, [pc, #1328]	; 11508 <__assert_fail@plt+0x664>
   10fd4:	mov	r0, r7
   10fd8:	ldr	r1, [pc, #1324]	; 1150c <__assert_fail@plt+0x668>
   10fdc:	ldr	r2, [r3]
   10fe0:	bl	11d1c <__assert_fail@plt+0xe78>
   10fe4:	subs	r5, r0, #0
   10fe8:	bne	11008 <__assert_fail@plt+0x164>
   10fec:	bl	10de4 <__errno_location@plt>
   10ff0:	ldr	r4, [r0]
   10ff4:	mov	r2, r7
   10ff8:	mov	r1, #3
   10ffc:	mov	r0, r5
   11000:	bl	13534 <__assert_fail@plt+0x2690>
   11004:	b	11454 <__assert_fail@plt+0x5b0>
   11008:	ldr	r3, [pc, #1272]	; 11508 <__assert_fail@plt+0x664>
   1100c:	mov	r1, #2
   11010:	mov	fp, #0
   11014:	ldr	r0, [r3]
   11018:	bl	11b5c <__assert_fail@plt+0xcb8>
   1101c:	add	r0, sp, #40	; 0x28
   11020:	bl	13680 <__assert_fail@plt+0x27dc>
   11024:	mov	r9, #0
   11028:	ldr	r0, [pc, #1240]	; 11508 <__assert_fail@plt+0x664>
   1102c:	add	r3, sp, #40	; 0x28
   11030:	mov	r2, #3
   11034:	ldr	r1, [pc, #1236]	; 11510 <__assert_fail@plt+0x66c>
   11038:	ldr	r0, [r0]
   1103c:	bl	13690 <__assert_fail@plt+0x27ec>
   11040:	cmn	r0, #1
   11044:	beq	11314 <__assert_fail@plt+0x470>
   11048:	cmp	r0, #0
   1104c:	bne	1106c <__assert_fail@plt+0x1c8>
   11050:	ldr	r3, [pc, #1212]	; 11514 <__assert_fail@plt+0x670>
   11054:	movw	r2, #458	; 0x1ca
   11058:	ldr	r1, [pc, #1208]	; 11518 <__assert_fail@plt+0x674>
   1105c:	ldr	r0, [pc, #1208]	; 1151c <__assert_fail@plt+0x678>
   11060:	bl	10ea4 <__assert_fail@plt>
   11064:	mov	r9, r6
   11068:	b	11028 <__assert_fail@plt+0x184>
   1106c:	ldr	r3, [sp, #24]
   11070:	ldr	r8, [sp, #44]	; 0x2c
   11074:	ldr	r5, [r3, #8]
   11078:	cmp	r5, #0
   1107c:	movne	r4, r5
   11080:	ldrne	sl, [sp, #24]
   11084:	bne	112e4 <__assert_fail@plt+0x440>
   11088:	mov	r0, #28
   1108c:	bl	14008 <__assert_fail@plt+0x3164>
   11090:	cmp	r8, #0
   11094:	mov	r6, r0
   11098:	beq	110a8 <__assert_fail@plt+0x204>
   1109c:	mov	r0, r8
   110a0:	bl	140a0 <__assert_fail@plt+0x31fc>
   110a4:	str	r0, [r6]
   110a8:	ldr	r3, [sp, #24]
   110ac:	str	r6, [r3, #8]
   110b0:	cmp	r9, #0
   110b4:	beq	11064 <__assert_fail@plt+0x1c0>
   110b8:	ldr	r1, [r6]
   110bc:	ldr	r0, [r9]
   110c0:	bl	10c64 <strcmp@plt>
   110c4:	cmp	r0, #0
   110c8:	beq	11024 <__assert_fail@plt+0x180>
   110cc:	ldr	r3, [r6, #16]
   110d0:	mov	r0, #8
   110d4:	add	r3, r3, #1
   110d8:	str	r3, [r6, #16]
   110dc:	bl	13e04 <__assert_fail@plt+0x2f60>
   110e0:	ldr	r3, [r9, #24]
   110e4:	str	r6, [r0]
   110e8:	str	r3, [r0, #4]
   110ec:	str	r0, [r9, #24]
   110f0:	b	11024 <__assert_fail@plt+0x180>
   110f4:	mov	r0, r8
   110f8:	bl	10c64 <strcmp@plt>
   110fc:	subs	r3, r0, #0
   11100:	beq	1130c <__assert_fail@plt+0x468>
   11104:	ldmib	r5, {r1, r2}
   11108:	movlt	r2, r1
   1110c:	cmp	r2, #0
   11110:	bne	112d0 <__assert_fail@plt+0x42c>
   11114:	mov	r0, #28
   11118:	str	r3, [sp, #32]
   1111c:	bl	14008 <__assert_fail@plt+0x3164>
   11120:	mov	r6, r0
   11124:	mov	r0, r8
   11128:	bl	140a0 <__assert_fail@plt+0x31fc>
   1112c:	ldr	r3, [sp, #32]
   11130:	str	r0, [r6]
   11134:	ldr	r1, [r4]
   11138:	cmp	r3, #0
   1113c:	strlt	r6, [r5, #4]
   11140:	strge	r6, [r5, #8]
   11144:	cmp	r1, #0
   11148:	bne	11160 <__assert_fail@plt+0x2bc>
   1114c:	ldr	r3, [pc, #972]	; 11520 <__assert_fail@plt+0x67c>
   11150:	mov	r2, #163	; 0xa3
   11154:	ldr	r1, [pc, #956]	; 11518 <__assert_fail@plt+0x674>
   11158:	ldr	r0, [pc, #964]	; 11524 <__assert_fail@plt+0x680>
   1115c:	b	11060 <__assert_fail@plt+0x1bc>
   11160:	mov	r0, r8
   11164:	bl	10c64 <strcmp@plt>
   11168:	cmp	r0, #0
   1116c:	beq	1114c <__assert_fail@plt+0x2a8>
   11170:	ldr	r5, [r4, #4]
   11174:	ldr	r3, [r4, #8]
   11178:	movge	r5, r3
   1117c:	movge	r3, #1
   11180:	mvnlt	r3, #0
   11184:	mov	r2, r5
   11188:	b	111e8 <__assert_fail@plt+0x344>
   1118c:	cmp	r2, #0
   11190:	str	r3, [sp, #36]	; 0x24
   11194:	beq	111bc <__assert_fail@plt+0x318>
   11198:	ldr	r1, [r2]
   1119c:	str	r2, [sp, #32]
   111a0:	cmp	r1, #0
   111a4:	beq	111bc <__assert_fail@plt+0x318>
   111a8:	mov	r0, r8
   111ac:	bl	10c64 <strcmp@plt>
   111b0:	cmp	r0, #0
   111b4:	ldrd	r2, [sp, #32]
   111b8:	bne	111d0 <__assert_fail@plt+0x32c>
   111bc:	ldr	r3, [pc, #860]	; 11520 <__assert_fail@plt+0x67c>
   111c0:	mov	r2, #177	; 0xb1
   111c4:	ldr	r1, [pc, #844]	; 11518 <__assert_fail@plt+0x674>
   111c8:	ldr	r0, [pc, #856]	; 11528 <__assert_fail@plt+0x684>
   111cc:	b	11060 <__assert_fail@plt+0x1bc>
   111d0:	mvnlt	r1, #0
   111d4:	movge	r1, #1
   111d8:	strblt	r1, [r2, #12]
   111dc:	strbge	r1, [r2, #12]
   111e0:	ldrlt	r2, [r2, #4]
   111e4:	ldrge	r2, [r2, #8]
   111e8:	cmp	r2, r6
   111ec:	bne	1118c <__assert_fail@plt+0x2e8>
   111f0:	ldrsb	r2, [r4, #12]
   111f4:	cmp	r2, #0
   111f8:	beq	11208 <__assert_fail@plt+0x364>
   111fc:	rsb	r0, r3, #0
   11200:	cmp	r2, r0
   11204:	bne	11214 <__assert_fail@plt+0x370>
   11208:	add	r3, r2, r3
   1120c:	strb	r3, [r4, #12]
   11210:	b	110b0 <__assert_fail@plt+0x20c>
   11214:	ldrsb	r2, [r5, #12]
   11218:	cmp	r3, r2
   1121c:	bne	1125c <__assert_fail@plt+0x3b8>
   11220:	cmn	r3, #1
   11224:	mov	r2, r5
   11228:	ldreq	r3, [r5, #8]
   1122c:	ldrne	r3, [r5, #4]
   11230:	streq	r3, [r4, #4]
   11234:	streq	r4, [r5, #8]
   11238:	strne	r3, [r4, #8]
   1123c:	strne	r4, [r5, #4]
   11240:	strb	fp, [r5, #12]
   11244:	strb	fp, [r4, #12]
   11248:	ldr	r3, [sl, #8]
   1124c:	cmp	r3, r4
   11250:	streq	r2, [sl, #8]
   11254:	strne	r2, [sl, #4]
   11258:	b	110b0 <__assert_fail@plt+0x20c>
   1125c:	cmp	r3, #0
   11260:	ldmib	r5, {r1, r2}
   11264:	bge	112b0 <__assert_fail@plt+0x40c>
   11268:	ldr	r1, [r2, #4]
   1126c:	str	r1, [r5, #8]
   11270:	ldr	r1, [r2, #8]
   11274:	str	r5, [r2, #4]
   11278:	str	r1, [r4, #4]
   1127c:	str	r4, [r2, #8]
   11280:	strb	fp, [r4, #12]
   11284:	strb	fp, [r5, #12]
   11288:	ldrsb	r1, [r2, #12]
   1128c:	cmp	r3, r1
   11290:	rsbeq	r3, r3, #0
   11294:	strbeq	r3, [r4, #12]
   11298:	beq	112a4 <__assert_fail@plt+0x400>
   1129c:	cmp	r0, r1
   112a0:	strbeq	r3, [r5, #12]
   112a4:	mov	r3, #0
   112a8:	strb	r3, [r2, #12]
   112ac:	b	11248 <__assert_fail@plt+0x3a4>
   112b0:	ldr	r2, [r1, #8]
   112b4:	str	r2, [r5, #4]
   112b8:	ldr	r2, [r1, #4]
   112bc:	str	r5, [r1, #8]
   112c0:	str	r2, [r4, #8]
   112c4:	mov	r2, r1
   112c8:	str	r4, [r1, #4]
   112cc:	b	11280 <__assert_fail@plt+0x3dc>
   112d0:	ldrsb	r3, [r2, #12]
   112d4:	cmp	r3, #0
   112d8:	movne	sl, r5
   112dc:	movne	r4, r2
   112e0:	mov	r5, r2
   112e4:	cmp	r8, #0
   112e8:	beq	112f8 <__assert_fail@plt+0x454>
   112ec:	ldr	r1, [r5]
   112f0:	cmp	r1, #0
   112f4:	bne	110f4 <__assert_fail@plt+0x250>
   112f8:	ldr	r3, [pc, #544]	; 11520 <__assert_fail@plt+0x67c>
   112fc:	mov	r2, #140	; 0x8c
   11300:	ldr	r1, [pc, #528]	; 11518 <__assert_fail@plt+0x674>
   11304:	ldr	r0, [pc, #544]	; 1152c <__assert_fail@plt+0x688>
   11308:	b	11060 <__assert_fail@plt+0x1bc>
   1130c:	mov	r6, r5
   11310:	b	110b0 <__assert_fail@plt+0x20c>
   11314:	cmp	r9, #0
   11318:	beq	11354 <__assert_fail@plt+0x4b0>
   1131c:	mov	r2, #5
   11320:	ldr	r1, [pc, #520]	; 11530 <__assert_fail@plt+0x68c>
   11324:	mov	r0, #0
   11328:	bl	10cdc <dcgettext@plt>
   1132c:	mov	r4, r0
   11330:	mov	r2, r7
   11334:	mov	r1, #3
   11338:	mov	r0, #0
   1133c:	bl	13534 <__assert_fail@plt+0x2690>
   11340:	mov	r3, r0
   11344:	mov	r2, r4
   11348:	mov	r1, #0
   1134c:	mov	r0, #1
   11350:	bl	10d54 <error@plt>
   11354:	ldr	r3, [sp, #24]
   11358:	ldr	r6, [r3, #8]
   1135c:	cmp	r6, #0
   11360:	beq	11370 <__assert_fail@plt+0x4cc>
   11364:	ldr	r1, [pc, #456]	; 11534 <__assert_fail@plt+0x690>
   11368:	mov	r0, r6
   1136c:	bl	1165c <__assert_fail@plt+0x7b8>
   11370:	ldr	r9, [pc, #448]	; 11538 <__assert_fail@plt+0x694>
   11374:	mov	r8, #1
   11378:	ldr	sl, [pc, #444]	; 1153c <__assert_fail@plt+0x698>
   1137c:	mov	r4, r9
   11380:	b	11410 <__assert_fail@plt+0x56c>
   11384:	cmp	r6, #0
   11388:	beq	11398 <__assert_fail@plt+0x4f4>
   1138c:	mov	r1, sl
   11390:	mov	r0, r6
   11394:	bl	1165c <__assert_fail@plt+0x7b8>
   11398:	ldr	r5, [r4, #4]
   1139c:	cmp	r5, #0
   113a0:	bne	11464 <__assert_fail@plt+0x5c0>
   113a4:	ldr	r3, [r4]
   113a8:	cmp	r3, #0
   113ac:	beq	11410 <__assert_fail@plt+0x56c>
   113b0:	mov	r2, #5
   113b4:	ldr	r1, [pc, #388]	; 11540 <__assert_fail@plt+0x69c>
   113b8:	mov	r0, r5
   113bc:	bl	10cdc <dcgettext@plt>
   113c0:	ldr	fp, [pc, #380]	; 11544 <__assert_fail@plt+0x6a0>
   113c4:	mov	r8, r0
   113c8:	mov	r2, r7
   113cc:	mov	r1, #3
   113d0:	mov	r0, r5
   113d4:	bl	13534 <__assert_fail@plt+0x2690>
   113d8:	mov	r3, r0
   113dc:	mov	r2, r8
   113e0:	mov	r1, r5
   113e4:	mov	r0, r5
   113e8:	mov	r8, r5
   113ec:	bl	10d54 <error@plt>
   113f0:	cmp	r6, #0
   113f4:	beq	11404 <__assert_fail@plt+0x560>
   113f8:	mov	r1, fp
   113fc:	mov	r0, r6
   11400:	bl	1165c <__assert_fail@plt+0x7b8>
   11404:	ldr	r3, [r4, #12]
   11408:	cmp	r3, #0
   1140c:	bne	113f0 <__assert_fail@plt+0x54c>
   11410:	ldr	r5, [r9]
   11414:	cmp	r5, #0
   11418:	bne	11384 <__assert_fail@plt+0x4e0>
   1141c:	ldr	r3, [pc, #228]	; 11508 <__assert_fail@plt+0x664>
   11420:	ldr	r0, [r3]
   11424:	bl	11b8c <__assert_fail@plt+0xce8>
   11428:	cmp	r0, #0
   1142c:	beq	114d0 <__assert_fail@plt+0x62c>
   11430:	bl	10de4 <__errno_location@plt>
   11434:	ldr	r3, [sp, #28]
   11438:	ldr	r4, [r0]
   1143c:	cmp	r3, #0
   11440:	bne	10ff4 <__assert_fail@plt+0x150>
   11444:	mov	r2, #5
   11448:	ldr	r1, [pc, #248]	; 11548 <__assert_fail@plt+0x6a4>
   1144c:	mov	r0, r3
   11450:	bl	10cdc <dcgettext@plt>
   11454:	mov	r3, r0
   11458:	ldr	r2, [pc, #236]	; 1154c <__assert_fail@plt+0x6a8>
   1145c:	mov	r1, r4
   11460:	b	1134c <__assert_fail@plt+0x4a8>
   11464:	ldr	r0, [r5]
   11468:	ldr	fp, [r5, #24]
   1146c:	bl	10d6c <puts@plt>
   11470:	ldm	r4, {r3, ip}
   11474:	mov	r2, #1
   11478:	mov	lr, #0
   1147c:	ldr	r0, [r4, #8]
   11480:	sub	r3, r3, #1
   11484:	strb	r2, [ip, #13]
   11488:	str	r3, [r4]
   1148c:	cmp	fp, #0
   11490:	bne	114a8 <__assert_fail@plt+0x604>
   11494:	ldr	r3, [ip, #20]
   11498:	cmp	lr, #0
   1149c:	strne	r0, [r4, #8]
   114a0:	str	r3, [r4, #4]
   114a4:	b	11398 <__assert_fail@plt+0x4f4>
   114a8:	ldr	r3, [fp]
   114ac:	ldr	fp, [fp, #4]
   114b0:	ldr	r1, [r3, #16]
   114b4:	sub	r1, r1, #1
   114b8:	cmp	r1, #0
   114bc:	moveq	lr, #1
   114c0:	str	r1, [r3, #16]
   114c4:	streq	r3, [r0, #20]
   114c8:	moveq	r0, r3
   114cc:	b	1148c <__assert_fail@plt+0x5e8>
   114d0:	eor	r0, r8, #1
   114d4:	bl	10dcc <exit@plt>
   114d8:	andeq	r4, r1, r6, lsl #14
   114dc:	andeq	r4, r1, ip, asr #13
   114e0:	andeq	r4, r1, r9, lsr #12
   114e4:	andeq	r1, r1, r4, lsl #21
   114e8:	andeq	r4, r1, r4, ror #13
   114ec:	andeq	r5, r2, r8, lsr r1
   114f0:			; <UNDEFINED> instruction: 0x000144ba
   114f4:	andeq	r1, r1, r8, lsr #16
   114f8:	andeq	r5, r2, r4, ror #1
   114fc:	andeq	r4, r1, r5, lsr #12
   11500:	strdeq	r4, [r1], -r2
   11504:	andeq	r4, r1, r9, ror #17
   11508:	andeq	r5, r2, r8, asr #2
   1150c:	andeq	r4, r1, r2, asr r8
   11510:	andeq	r4, r1, r3, lsl #14
   11514:	andeq	r4, r1, r8, lsr #9
   11518:	andeq	r4, r1, r7, lsl #14
   1151c:	andeq	r4, r1, r3, lsl r7
   11520:	andeq	r4, r1, lr, lsr #9
   11524:	andeq	r4, r1, pc, lsr #14
   11528:	andeq	r4, r1, sl, asr r7
   1152c:	andeq	r4, r1, ip, lsl r7
   11530:	andeq	r4, r1, r5, lsl #15
   11534:	andeq	r1, r1, r0, asr #12
   11538:	andeq	r5, r2, r8, asr r1
   1153c:	andeq	r1, r1, ip, asr #13
   11540:			; <UNDEFINED> instruction: 0x000147b0
   11544:	andeq	r1, r1, ip, lsl #14
   11548:	andeq	r4, r1, fp, asr #15
   1154c:	andeq	r4, r1, r8, asr r8
   11550:	mov	fp, #0
   11554:	mov	lr, #0
   11558:	pop	{r1}		; (ldr r1, [sp], #4)
   1155c:	mov	r2, sp
   11560:	push	{r2}		; (str r2, [sp, #-4]!)
   11564:	push	{r0}		; (str r0, [sp, #-4]!)
   11568:	ldr	ip, [pc, #16]	; 11580 <__assert_fail@plt+0x6dc>
   1156c:	push	{ip}		; (str ip, [sp, #-4]!)
   11570:	ldr	r0, [pc, #12]	; 11584 <__assert_fail@plt+0x6e0>
   11574:	ldr	r3, [pc, #12]	; 11588 <__assert_fail@plt+0x6e4>
   11578:	bl	10d84 <__libc_start_main@plt>
   1157c:	bl	10e8c <abort@plt>
   11580:	andeq	r4, r1, r8, asr #8
   11584:	andeq	r0, r1, r8, asr #29
   11588:	andeq	r4, r1, r8, ror #7
   1158c:	ldr	r3, [pc, #20]	; 115a8 <__assert_fail@plt+0x704>
   11590:	ldr	r2, [pc, #20]	; 115ac <__assert_fail@plt+0x708>
   11594:	add	r3, pc, r3
   11598:	ldr	r2, [r3, r2]
   1159c:	cmp	r2, #0
   115a0:	bxeq	lr
   115a4:	b	10d9c <__gmon_start__@plt>
   115a8:	andeq	r3, r1, r4, ror #20
   115ac:	ldrdeq	r0, [r0], -r8
   115b0:	ldr	r0, [pc, #24]	; 115d0 <__assert_fail@plt+0x72c>
   115b4:	ldr	r3, [pc, #24]	; 115d4 <__assert_fail@plt+0x730>
   115b8:	cmp	r3, r0
   115bc:	bxeq	lr
   115c0:	ldr	r3, [pc, #16]	; 115d8 <__assert_fail@plt+0x734>
   115c4:	cmp	r3, #0
   115c8:	bxeq	lr
   115cc:	bx	r3
   115d0:	andeq	r5, r2, ip, lsr #2
   115d4:	andeq	r5, r2, ip, lsr #2
   115d8:	andeq	r0, r0, r0
   115dc:	ldr	r0, [pc, #36]	; 11608 <__assert_fail@plt+0x764>
   115e0:	ldr	r1, [pc, #36]	; 1160c <__assert_fail@plt+0x768>
   115e4:	sub	r1, r1, r0
   115e8:	asr	r1, r1, #2
   115ec:	add	r1, r1, r1, lsr #31
   115f0:	asrs	r1, r1, #1
   115f4:	bxeq	lr
   115f8:	ldr	r3, [pc, #16]	; 11610 <__assert_fail@plt+0x76c>
   115fc:	cmp	r3, #0
   11600:	bxeq	lr
   11604:	bx	r3
   11608:	andeq	r5, r2, ip, lsr #2
   1160c:	andeq	r5, r2, ip, lsr #2
   11610:	andeq	r0, r0, r0
   11614:	push	{r4, lr}
   11618:	ldr	r4, [pc, #24]	; 11638 <__assert_fail@plt+0x794>
   1161c:	ldrb	r3, [r4]
   11620:	cmp	r3, #0
   11624:	popne	{r4, pc}
   11628:	bl	115b0 <__assert_fail@plt+0x70c>
   1162c:	mov	r3, #1
   11630:	strb	r3, [r4]
   11634:	pop	{r4, pc}
   11638:	andeq	r5, r2, r4, asr r1
   1163c:	b	115dc <__assert_fail@plt+0x738>
   11640:	ldr	r2, [pc, #16]	; 11658 <__assert_fail@plt+0x7b4>
   11644:	mov	r0, #0
   11648:	ldr	r3, [r2]
   1164c:	add	r3, r3, #1
   11650:	str	r3, [r2]
   11654:	bx	lr
   11658:	andeq	r5, r2, r8, asr r1
   1165c:	push	{r4, r5, r6, lr}
   11660:	mov	r4, r0
   11664:	mov	r5, r1
   11668:	ldr	r0, [r4, #4]
   1166c:	cmp	r0, #0
   11670:	bne	116a8 <__assert_fail@plt+0x804>
   11674:	ldr	r3, [r4, #8]
   11678:	cmp	r3, #0
   1167c:	beq	11698 <__assert_fail@plt+0x7f4>
   11680:	mov	r0, r4
   11684:	blx	r5
   11688:	cmp	r0, #0
   1168c:	beq	116bc <__assert_fail@plt+0x818>
   11690:	mov	r0, #1
   11694:	pop	{r4, r5, r6, pc}
   11698:	mov	r0, r4
   1169c:	mov	r3, r5
   116a0:	pop	{r4, r5, r6, lr}
   116a4:	bx	r3
   116a8:	mov	r1, r5
   116ac:	bl	1165c <__assert_fail@plt+0x7b8>
   116b0:	cmp	r0, #0
   116b4:	beq	11680 <__assert_fail@plt+0x7dc>
   116b8:	b	11690 <__assert_fail@plt+0x7ec>
   116bc:	ldr	r4, [r4, #8]
   116c0:	cmp	r4, #0
   116c4:	bne	11668 <__assert_fail@plt+0x7c4>
   116c8:	pop	{r4, r5, r6, pc}
   116cc:	ldr	r3, [r0, #16]
   116d0:	cmp	r3, #0
   116d4:	bne	11700 <__assert_fail@plt+0x85c>
   116d8:	ldrb	r3, [r0, #13]
   116dc:	cmp	r3, #0
   116e0:	bne	11700 <__assert_fail@plt+0x85c>
   116e4:	ldr	r3, [pc, #28]	; 11708 <__assert_fail@plt+0x864>
   116e8:	ldr	r2, [r3, #4]
   116ec:	cmp	r2, #0
   116f0:	ldrne	r2, [r3, #8]
   116f4:	streq	r0, [r3, #4]
   116f8:	str	r0, [r3, #8]
   116fc:	strne	r0, [r2, #20]
   11700:	mov	r0, #0
   11704:	bx	lr
   11708:	andeq	r5, r2, r8, asr r1
   1170c:	ldr	r3, [r0, #16]
   11710:	cmp	r3, #0
   11714:	beq	11818 <__assert_fail@plt+0x974>
   11718:	ldr	r3, [pc, #256]	; 11820 <__assert_fail@plt+0x97c>
   1171c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11720:	ldr	r2, [r3, #12]
   11724:	mov	r5, r3
   11728:	cmp	r2, #0
   1172c:	addne	r6, r0, #24
   11730:	ldrne	r3, [r0, #24]
   11734:	streq	r0, [r3, #12]
   11738:	moveq	r3, r2
   1173c:	bne	11770 <__assert_fail@plt+0x8cc>
   11740:	mov	r0, r3
   11744:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11748:	str	r9, [r5, #12]
   1174c:	str	r8, [r3, #20]
   11750:	b	117a4 <__assert_fail@plt+0x900>
   11754:	ldr	r0, [r3, #20]
   11758:	mov	r2, #1
   1175c:	str	r1, [r3, #20]
   11760:	mov	r3, r0
   11764:	b	11800 <__assert_fail@plt+0x95c>
   11768:	add	r6, r3, #4
   1176c:	ldr	r3, [r3, #4]
   11770:	cmp	r3, #0
   11774:	beq	11740 <__assert_fail@plt+0x89c>
   11778:	ldr	r1, [r3]
   1177c:	cmp	r2, r1
   11780:	bne	11768 <__assert_fail@plt+0x8c4>
   11784:	ldr	r3, [r0, #20]
   11788:	cmp	r3, #0
   1178c:	streq	r2, [r0, #20]
   11790:	streq	r0, [r5, #12]
   11794:	beq	11740 <__assert_fail@plt+0x89c>
   11798:	ldr	r7, [pc, #132]	; 11824 <__assert_fail@plt+0x980>
   1179c:	mov	r4, r0
   117a0:	mov	r8, #0
   117a4:	ldr	r3, [r5, #12]
   117a8:	cmp	r3, #0
   117ac:	beq	117f4 <__assert_fail@plt+0x950>
   117b0:	mov	r1, #0
   117b4:	mov	r2, r7
   117b8:	ldr	r9, [r3, #20]
   117bc:	mov	r0, r1
   117c0:	ldr	r3, [r3]
   117c4:	bl	10d54 <error@plt>
   117c8:	ldr	r3, [r5, #12]
   117cc:	cmp	r4, r3
   117d0:	bne	11748 <__assert_fail@plt+0x8a4>
   117d4:	ldr	r0, [r6]
   117d8:	ldr	r2, [r0]
   117dc:	ldr	r3, [r2, #16]
   117e0:	sub	r3, r3, #1
   117e4:	str	r3, [r2, #16]
   117e8:	ldr	r3, [r0, #4]
   117ec:	str	r3, [r6]
   117f0:	bl	11c84 <__assert_fail@plt+0xde0>
   117f4:	ldr	r3, [r5, #12]
   117f8:	mov	r2, #0
   117fc:	mov	r1, r2
   11800:	cmp	r3, #0
   11804:	bne	11754 <__assert_fail@plt+0x8b0>
   11808:	cmp	r2, #0
   1180c:	strne	r3, [r5, #12]
   11810:	mov	r3, #1
   11814:	b	11740 <__assert_fail@plt+0x89c>
   11818:	mov	r0, r3
   1181c:	bx	lr
   11820:	andeq	r5, r2, r8, asr r1
   11824:	andeq	r4, r1, r8, asr r8
   11828:	subs	r5, r0, #0
   1182c:	push	{r7, lr}
   11830:	sub	sp, sp, #56	; 0x38
   11834:	ldr	r4, [pc, #472]	; 11a14 <__assert_fail@plt+0xb70>
   11838:	beq	11870 <__assert_fail@plt+0x9cc>
   1183c:	mov	r2, #5
   11840:	mov	r0, #0
   11844:	ldr	r3, [pc, #460]	; 11a18 <__assert_fail@plt+0xb74>
   11848:	ldr	r1, [pc, #460]	; 11a1c <__assert_fail@plt+0xb78>
   1184c:	ldr	r6, [r3]
   11850:	bl	10cdc <dcgettext@plt>
   11854:	mov	r2, r0
   11858:	mov	r1, #1
   1185c:	ldr	r3, [r4]
   11860:	mov	r0, r6
   11864:	bl	10e20 <__fprintf_chk@plt>
   11868:	mov	r0, r5
   1186c:	bl	10dcc <exit@plt>
   11870:	mov	r2, #5
   11874:	ldr	r1, [pc, #420]	; 11a20 <__assert_fail@plt+0xb7c>
   11878:	mov	r6, sp
   1187c:	bl	10cdc <dcgettext@plt>
   11880:	ldr	r2, [r4]
   11884:	mov	r1, r0
   11888:	mov	r0, #1
   1188c:	bl	10e08 <__printf_chk@plt>
   11890:	ldr	r4, [pc, #396]	; 11a24 <__assert_fail@plt+0xb80>
   11894:	mov	r2, #5
   11898:	mov	r0, r5
   1189c:	ldr	r1, [pc, #388]	; 11a28 <__assert_fail@plt+0xb84>
   118a0:	bl	10cdc <dcgettext@plt>
   118a4:	ldr	r7, [pc, #384]	; 11a2c <__assert_fail@plt+0xb88>
   118a8:	ldr	r1, [r4]
   118ac:	bl	10c58 <fputs_unlocked@plt>
   118b0:	mov	r2, #5
   118b4:	ldr	r1, [pc, #372]	; 11a30 <__assert_fail@plt+0xb8c>
   118b8:	mov	r0, r5
   118bc:	bl	10cdc <dcgettext@plt>
   118c0:	ldr	r1, [r4]
   118c4:	bl	10c58 <fputs_unlocked@plt>
   118c8:	mov	r2, #5
   118cc:	ldr	r1, [pc, #352]	; 11a34 <__assert_fail@plt+0xb90>
   118d0:	mov	r0, r5
   118d4:	bl	10cdc <dcgettext@plt>
   118d8:	ldr	r1, [r4]
   118dc:	bl	10c58 <fputs_unlocked@plt>
   118e0:	mov	r2, #5
   118e4:	ldr	r1, [pc, #332]	; 11a38 <__assert_fail@plt+0xb94>
   118e8:	mov	r0, r5
   118ec:	bl	10cdc <dcgettext@plt>
   118f0:	ldr	r1, [r4]
   118f4:	bl	10c58 <fputs_unlocked@plt>
   118f8:	ldr	lr, [pc, #316]	; 11a3c <__assert_fail@plt+0xb98>
   118fc:	mov	ip, sp
   11900:	ldm	lr!, {r0, r1, r2, r3}
   11904:	stmia	ip!, {r0, r1, r2, r3}
   11908:	ldm	lr!, {r0, r1, r2, r3}
   1190c:	stmia	ip!, {r0, r1, r2, r3}
   11910:	ldm	lr!, {r0, r1, r2, r3}
   11914:	stmia	ip!, {r0, r1, r2, r3}
   11918:	ldm	lr, {r0, r1}
   1191c:	stm	ip, {r0, r1}
   11920:	ldr	r1, [r6]
   11924:	cmp	r1, #0
   11928:	bne	119cc <__assert_fail@plt+0xb28>
   1192c:	ldr	r6, [r6, #4]
   11930:	mov	r2, #5
   11934:	mov	r0, #0
   11938:	ldr	r7, [pc, #236]	; 11a2c <__assert_fail@plt+0xb88>
   1193c:	ldr	r1, [pc, #252]	; 11a40 <__assert_fail@plt+0xb9c>
   11940:	cmp	r6, #0
   11944:	moveq	r6, r7
   11948:	bl	10cdc <dcgettext@plt>
   1194c:	mov	r1, r0
   11950:	ldr	r3, [pc, #236]	; 11a44 <__assert_fail@plt+0xba0>
   11954:	mov	r0, #1
   11958:	ldr	r2, [pc, #232]	; 11a48 <__assert_fail@plt+0xba4>
   1195c:	bl	10e08 <__printf_chk@plt>
   11960:	mov	r1, #0
   11964:	mov	r0, #5
   11968:	bl	10e44 <setlocale@plt>
   1196c:	cmp	r0, #0
   11970:	bne	119e4 <__assert_fail@plt+0xb40>
   11974:	mov	r2, #5
   11978:	ldr	r1, [pc, #204]	; 11a4c <__assert_fail@plt+0xba8>
   1197c:	mov	r0, #0
   11980:	bl	10cdc <dcgettext@plt>
   11984:	mov	r1, r0
   11988:	ldr	r3, [pc, #156]	; 11a2c <__assert_fail@plt+0xb88>
   1198c:	mov	r0, #1
   11990:	ldr	r2, [pc, #172]	; 11a44 <__assert_fail@plt+0xba0>
   11994:	bl	10e08 <__printf_chk@plt>
   11998:	mov	r2, #5
   1199c:	ldr	r1, [pc, #172]	; 11a50 <__assert_fail@plt+0xbac>
   119a0:	mov	r0, #0
   119a4:	bl	10cdc <dcgettext@plt>
   119a8:	ldr	r2, [pc, #164]	; 11a54 <__assert_fail@plt+0xbb0>
   119ac:	cmp	r6, r7
   119b0:	mov	r1, r0
   119b4:	mov	r0, #1
   119b8:	ldr	r3, [pc, #152]	; 11a58 <__assert_fail@plt+0xbb4>
   119bc:	moveq	r3, r2
   119c0:	mov	r2, r6
   119c4:	bl	10e08 <__printf_chk@plt>
   119c8:	b	11868 <__assert_fail@plt+0x9c4>
   119cc:	mov	r0, r7
   119d0:	bl	10c64 <strcmp@plt>
   119d4:	cmp	r0, #0
   119d8:	beq	1192c <__assert_fail@plt+0xa88>
   119dc:	add	r6, r6, #8
   119e0:	b	11920 <__assert_fail@plt+0xa7c>
   119e4:	mov	r2, #3
   119e8:	ldr	r1, [pc, #108]	; 11a5c <__assert_fail@plt+0xbb8>
   119ec:	bl	10e80 <strncmp@plt>
   119f0:	cmp	r0, #0
   119f4:	beq	11974 <__assert_fail@plt+0xad0>
   119f8:	mov	r2, #5
   119fc:	ldr	r1, [pc, #92]	; 11a60 <__assert_fail@plt+0xbbc>
   11a00:	mov	r0, #0
   11a04:	bl	10cdc <dcgettext@plt>
   11a08:	ldr	r1, [r4]
   11a0c:	bl	10c58 <fputs_unlocked@plt>
   11a10:	b	11974 <__assert_fail@plt+0xad0>
   11a14:	andeq	r5, r2, r0, ror r1
   11a18:	andeq	r5, r2, r0, asr #2
   11a1c:	andeq	r4, r1, r0, asr #9
   11a20:	andeq	r4, r1, r7, ror #9
   11a24:	andeq	r5, r2, ip, asr #2
   11a28:	andeq	r4, r1, fp, asr #10
   11a2c:			; <UNDEFINED> instruction: 0x000144ba
   11a30:	andeq	r4, r1, r5, lsl #14
   11a34:	andeq	r4, r1, r3, lsl #11
   11a38:			; <UNDEFINED> instruction: 0x000145b0
   11a3c:	andeq	r4, r1, r0, ror r4
   11a40:	andeq	r4, r1, r6, ror #11
   11a44:	strdeq	r4, [r1], -sp
   11a48:	andeq	r4, r1, r5, lsr #12
   11a4c:	andeq	r4, r1, lr, ror r6
   11a50:	muleq	r1, r9, r6
   11a54:	strdeq	r4, [r1], -r6
   11a58:	andeq	r4, r1, r6, lsl #14
   11a5c:	andeq	r4, r1, r3, lsr r6
   11a60:	andeq	r4, r1, r7, lsr r6
   11a64:	ldr	r3, [pc, #4]	; 11a70 <__assert_fail@plt+0xbcc>
   11a68:	str	r0, [r3]
   11a6c:	bx	lr
   11a70:	andeq	r5, r2, r8, ror #2
   11a74:	ldr	r3, [pc, #4]	; 11a80 <__assert_fail@plt+0xbdc>
   11a78:	strb	r0, [r3, #4]
   11a7c:	bx	lr
   11a80:	andeq	r5, r2, r8, ror #2
   11a84:	ldr	r3, [pc, #176]	; 11b3c <__assert_fail@plt+0xc98>
   11a88:	push	{r0, r1, r4, r5, r6, lr}
   11a8c:	ldr	r0, [r3]
   11a90:	bl	141c0 <__assert_fail@plt+0x331c>
   11a94:	cmp	r0, #0
   11a98:	beq	11b20 <__assert_fail@plt+0xc7c>
   11a9c:	ldr	r4, [pc, #156]	; 11b40 <__assert_fail@plt+0xc9c>
   11aa0:	bl	10de4 <__errno_location@plt>
   11aa4:	mov	r5, r0
   11aa8:	ldrb	r6, [r4, #4]
   11aac:	cmp	r6, #0
   11ab0:	beq	11ac0 <__assert_fail@plt+0xc1c>
   11ab4:	ldr	r3, [r0]
   11ab8:	cmp	r3, #32
   11abc:	beq	11b20 <__assert_fail@plt+0xc7c>
   11ac0:	mov	r2, #5
   11ac4:	ldr	r1, [pc, #120]	; 11b44 <__assert_fail@plt+0xca0>
   11ac8:	mov	r0, #0
   11acc:	bl	10cdc <dcgettext@plt>
   11ad0:	mov	r6, r0
   11ad4:	ldr	r0, [r4]
   11ad8:	cmp	r0, #0
   11adc:	beq	11b0c <__assert_fail@plt+0xc68>
   11ae0:	ldr	r4, [r5]
   11ae4:	bl	13524 <__assert_fail@plt+0x2680>
   11ae8:	mov	r3, r0
   11aec:	ldr	r2, [pc, #84]	; 11b48 <__assert_fail@plt+0xca4>
   11af0:	mov	r0, #0
   11af4:	str	r6, [sp]
   11af8:	mov	r1, r4
   11afc:	bl	10d54 <error@plt>
   11b00:	ldr	r3, [pc, #68]	; 11b4c <__assert_fail@plt+0xca8>
   11b04:	ldr	r0, [r3]
   11b08:	bl	10c94 <_exit@plt>
   11b0c:	mov	r3, r6
   11b10:	ldr	r2, [pc, #56]	; 11b50 <__assert_fail@plt+0xcac>
   11b14:	ldr	r1, [r5]
   11b18:	bl	10d54 <error@plt>
   11b1c:	b	11b00 <__assert_fail@plt+0xc5c>
   11b20:	ldr	r3, [pc, #44]	; 11b54 <__assert_fail@plt+0xcb0>
   11b24:	ldr	r0, [r3]
   11b28:	bl	141c0 <__assert_fail@plt+0x331c>
   11b2c:	cmp	r0, #0
   11b30:	bne	11b00 <__assert_fail@plt+0xc5c>
   11b34:	add	sp, sp, #8
   11b38:	pop	{r4, r5, r6, pc}
   11b3c:	andeq	r5, r2, ip, asr #2
   11b40:	andeq	r5, r2, r8, ror #2
   11b44:	andeq	r4, r1, r8, asr #16
   11b48:	andeq	r4, r1, r4, asr r8
   11b4c:	andeq	r5, r2, r8, ror #1
   11b50:	andeq	r4, r1, r8, asr r8
   11b54:	andeq	r5, r2, r0, asr #2
   11b58:	b	10c70 <posix_fadvise64@plt>
   11b5c:	cmp	r0, #0
   11b60:	bxeq	lr
   11b64:	push	{r0, r1, r2, r3, r4, lr}
   11b68:	mov	r4, r1
   11b6c:	bl	10e14 <fileno@plt>
   11b70:	mov	r2, #0
   11b74:	mov	r3, #0
   11b78:	strd	r2, [sp]
   11b7c:	str	r4, [sp, #8]
   11b80:	bl	10c70 <posix_fadvise64@plt>
   11b84:	add	sp, sp, #16
   11b88:	pop	{r4, pc}
   11b8c:	push	{r0, r1, r2, r4, r5, lr}
   11b90:	mov	r4, r0
   11b94:	bl	10e14 <fileno@plt>
   11b98:	cmp	r0, #0
   11b9c:	mov	r0, r4
   11ba0:	bge	11bb0 <__assert_fail@plt+0xd0c>
   11ba4:	add	sp, sp, #12
   11ba8:	pop	{r4, r5, lr}
   11bac:	b	10e2c <fclose@plt>
   11bb0:	bl	10d90 <__freading@plt>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11bf4 <__assert_fail@plt+0xd50>
   11bbc:	mov	r0, r4
   11bc0:	bl	11c34 <__assert_fail@plt+0xd90>
   11bc4:	cmp	r0, #0
   11bc8:	bne	11c28 <__assert_fail@plt+0xd84>
   11bcc:	mov	r5, #0
   11bd0:	mov	r0, r4
   11bd4:	bl	10e2c <fclose@plt>
   11bd8:	cmp	r5, #0
   11bdc:	beq	11bec <__assert_fail@plt+0xd48>
   11be0:	bl	10de4 <__errno_location@plt>
   11be4:	str	r5, [r0]
   11be8:	mvn	r0, #0
   11bec:	add	sp, sp, #12
   11bf0:	pop	{r4, r5, pc}
   11bf4:	mov	r0, r4
   11bf8:	bl	10e14 <fileno@plt>
   11bfc:	mov	r3, #1
   11c00:	mov	r2, #0
   11c04:	str	r3, [sp]
   11c08:	mov	r3, #0
   11c0c:	bl	10d18 <lseek64@plt>
   11c10:	mvn	r3, #0
   11c14:	mvn	r2, #0
   11c18:	cmp	r1, r3
   11c1c:	cmpeq	r0, r2
   11c20:	bne	11bbc <__assert_fail@plt+0xd18>
   11c24:	b	11bcc <__assert_fail@plt+0xd28>
   11c28:	bl	10de4 <__errno_location@plt>
   11c2c:	ldr	r5, [r0]
   11c30:	b	11bd0 <__assert_fail@plt+0xd2c>
   11c34:	push	{r0, r1, r4, lr}
   11c38:	subs	r4, r0, #0
   11c3c:	bne	11c50 <__assert_fail@plt+0xdac>
   11c40:	mov	r0, r4
   11c44:	add	sp, sp, #8
   11c48:	pop	{r4, lr}
   11c4c:	b	10c7c <fflush@plt>
   11c50:	bl	10d90 <__freading@plt>
   11c54:	cmp	r0, #0
   11c58:	beq	11c40 <__assert_fail@plt+0xd9c>
   11c5c:	ldr	r3, [r4]
   11c60:	tst	r3, #256	; 0x100
   11c64:	beq	11c40 <__assert_fail@plt+0xd9c>
   11c68:	mov	r3, #1
   11c6c:	mov	r2, #0
   11c70:	mov	r0, r4
   11c74:	str	r3, [sp]
   11c78:	mov	r3, #0
   11c7c:	bl	11e5c <__assert_fail@plt+0xfb8>
   11c80:	b	11c40 <__assert_fail@plt+0xd9c>
   11c84:	push	{r0, r1, r2, r4, r5, lr}
   11c88:	mov	r5, r0
   11c8c:	bl	10de4 <__errno_location@plt>
   11c90:	mov	r4, r0
   11c94:	mov	r0, r5
   11c98:	ldr	r3, [r4]
   11c9c:	str	r3, [sp]
   11ca0:	str	r3, [sp, #4]
   11ca4:	mov	r3, #0
   11ca8:	str	r3, [r4]
   11cac:	bl	10c88 <free@plt>
   11cb0:	ldr	r3, [r4]
   11cb4:	add	r2, sp, #8
   11cb8:	clz	r3, r3
   11cbc:	lsr	r3, r3, #5
   11cc0:	add	r3, r2, r3, lsl #2
   11cc4:	ldr	r3, [r3, #-8]
   11cc8:	str	r3, [r4]
   11ccc:	add	sp, sp, #12
   11cd0:	pop	{r4, r5, pc}
   11cd4:	push	{r4, lr}
   11cd8:	mov	r1, #0
   11cdc:	mov	r4, r0
   11ce0:	ldr	r0, [pc, #48]	; 11d18 <__assert_fail@plt+0xe74>
   11ce4:	bl	10d60 <open64@plt>
   11ce8:	cmp	r4, r0
   11cec:	beq	11d10 <__assert_fail@plt+0xe6c>
   11cf0:	cmp	r0, #0
   11cf4:	blt	11d08 <__assert_fail@plt+0xe64>
   11cf8:	bl	10e98 <close@plt>
   11cfc:	bl	10de4 <__errno_location@plt>
   11d00:	mov	r3, #9
   11d04:	str	r3, [r0]
   11d08:	mov	r0, #0
   11d0c:	pop	{r4, pc}
   11d10:	mov	r0, #1
   11d14:	pop	{r4, pc}
   11d18:	andeq	r4, r1, fp, asr r8
   11d1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d20:	mov	r9, r0
   11d24:	mov	r0, r2
   11d28:	mov	sl, r1
   11d2c:	mov	r8, r2
   11d30:	bl	10e14 <fileno@plt>
   11d34:	cmp	r0, #1
   11d38:	beq	11dac <__assert_fail@plt+0xf08>
   11d3c:	cmp	r0, #2
   11d40:	beq	11da4 <__assert_fail@plt+0xf00>
   11d44:	cmp	r0, #0
   11d48:	beq	11db8 <__assert_fail@plt+0xf14>
   11d4c:	mov	r1, #2
   11d50:	mov	r0, r1
   11d54:	bl	10ce8 <dup2@plt>
   11d58:	subs	r4, r0, #2
   11d5c:	movne	r4, #1
   11d60:	mov	r1, #1
   11d64:	mov	r0, r1
   11d68:	bl	10ce8 <dup2@plt>
   11d6c:	subs	r7, r0, #1
   11d70:	movne	r7, #1
   11d74:	mov	r1, #0
   11d78:	mov	r0, r1
   11d7c:	bl	10ce8 <dup2@plt>
   11d80:	subs	r6, r0, #0
   11d84:	beq	11ddc <__assert_fail@plt+0xf38>
   11d88:	mov	r0, #0
   11d8c:	bl	11cd4 <__assert_fail@plt+0xe30>
   11d90:	subs	r5, r0, #0
   11d94:	mov	r6, r0
   11d98:	bne	11ddc <__assert_fail@plt+0xf38>
   11d9c:	mov	r6, #1
   11da0:	b	11e10 <__assert_fail@plt+0xf6c>
   11da4:	mov	r4, #0
   11da8:	b	11d60 <__assert_fail@plt+0xebc>
   11dac:	mov	r4, #0
   11db0:	mov	r7, r4
   11db4:	b	11d74 <__assert_fail@plt+0xed0>
   11db8:	mov	r4, r0
   11dbc:	mov	r7, r0
   11dc0:	mov	r6, r0
   11dc4:	mov	r2, r8
   11dc8:	mov	r1, sl
   11dcc:	mov	r0, r9
   11dd0:	bl	10da8 <freopen64@plt>
   11dd4:	mov	r5, r0
   11dd8:	b	11e10 <__assert_fail@plt+0xf6c>
   11ddc:	cmp	r7, #0
   11de0:	bne	11e00 <__assert_fail@plt+0xf5c>
   11de4:	cmp	r4, #0
   11de8:	beq	11dc4 <__assert_fail@plt+0xf20>
   11dec:	mov	r0, #2
   11df0:	bl	11cd4 <__assert_fail@plt+0xe30>
   11df4:	subs	r5, r0, #0
   11df8:	bne	11dc4 <__assert_fail@plt+0xf20>
   11dfc:	b	11e10 <__assert_fail@plt+0xf6c>
   11e00:	mov	r0, #1
   11e04:	bl	11cd4 <__assert_fail@plt+0xe30>
   11e08:	subs	r5, r0, #0
   11e0c:	bne	11de4 <__assert_fail@plt+0xf40>
   11e10:	bl	10de4 <__errno_location@plt>
   11e14:	cmp	r4, #0
   11e18:	mov	r8, r0
   11e1c:	ldr	r9, [r0]
   11e20:	beq	11e2c <__assert_fail@plt+0xf88>
   11e24:	mov	r0, #2
   11e28:	bl	10e98 <close@plt>
   11e2c:	cmp	r7, #0
   11e30:	beq	11e3c <__assert_fail@plt+0xf98>
   11e34:	mov	r0, #1
   11e38:	bl	10e98 <close@plt>
   11e3c:	cmp	r6, #0
   11e40:	beq	11e4c <__assert_fail@plt+0xfa8>
   11e44:	mov	r0, #0
   11e48:	bl	10e98 <close@plt>
   11e4c:	cmp	r5, #0
   11e50:	mov	r0, r5
   11e54:	streq	r9, [r8]
   11e58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e5c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11e60:	mov	r4, r0
   11e64:	ldmib	r0, {ip, lr}
   11e68:	ldr	r8, [sp, #32]
   11e6c:	cmp	lr, ip
   11e70:	bne	11ee0 <__assert_fail@plt+0x103c>
   11e74:	ldr	ip, [r0, #16]
   11e78:	ldr	lr, [r0, #20]
   11e7c:	cmp	lr, ip
   11e80:	bne	11ee0 <__assert_fail@plt+0x103c>
   11e84:	ldr	r5, [r0, #36]	; 0x24
   11e88:	cmp	r5, #0
   11e8c:	bne	11ee0 <__assert_fail@plt+0x103c>
   11e90:	mov	r6, r2
   11e94:	mov	r7, r3
   11e98:	bl	10e14 <fileno@plt>
   11e9c:	mov	r2, r6
   11ea0:	mov	r3, r7
   11ea4:	str	r8, [sp]
   11ea8:	bl	10d18 <lseek64@plt>
   11eac:	mvn	r3, #0
   11eb0:	mvn	r2, #0
   11eb4:	cmp	r1, r3
   11eb8:	cmpeq	r0, r2
   11ebc:	mvneq	r0, #0
   11ec0:	beq	11ed8 <__assert_fail@plt+0x1034>
   11ec4:	ldr	r3, [r4]
   11ec8:	strd	r0, [r4, #80]	; 0x50
   11ecc:	mov	r0, r5
   11ed0:	bic	r3, r3, #16
   11ed4:	str	r3, [r4]
   11ed8:	add	sp, sp, #8
   11edc:	pop	{r4, r5, r6, r7, r8, pc}
   11ee0:	mov	r0, r4
   11ee4:	str	r8, [sp, #32]
   11ee8:	add	sp, sp, #8
   11eec:	pop	{r4, r5, r6, r7, r8, lr}
   11ef0:	b	10e38 <fseeko64@plt>
   11ef4:	ldr	ip, [pc, #156]	; 11f98 <__assert_fail@plt+0x10f4>
   11ef8:	cmp	r0, #2
   11efc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11f00:	mov	r6, #0
   11f04:	mov	r8, ip
   11f08:	ldr	r7, [ip]
   11f0c:	str	r6, [ip]
   11f10:	bne	11f44 <__assert_fail@plt+0x10a0>
   11f14:	mov	r5, r3
   11f18:	mov	r4, r2
   11f1c:	ldr	r3, [pc, #120]	; 11f9c <__assert_fail@plt+0x10f8>
   11f20:	str	r6, [sp]
   11f24:	ldr	r2, [pc, #116]	; 11fa0 <__assert_fail@plt+0x10fc>
   11f28:	bl	10db4 <getopt_long@plt>
   11f2c:	cmn	r0, #1
   11f30:	beq	11f44 <__assert_fail@plt+0x10a0>
   11f34:	cmp	r0, #104	; 0x68
   11f38:	beq	11f5c <__assert_fail@plt+0x10b8>
   11f3c:	cmp	r0, #118	; 0x76
   11f40:	beq	11f6c <__assert_fail@plt+0x10c8>
   11f44:	ldr	r3, [pc, #88]	; 11fa4 <__assert_fail@plt+0x1100>
   11f48:	mov	r2, #0
   11f4c:	str	r7, [r8]
   11f50:	str	r2, [r3]
   11f54:	add	sp, sp, #16
   11f58:	pop	{r4, r5, r6, r7, r8, pc}
   11f5c:	mov	r0, r6
   11f60:	ldr	r3, [sp, #44]	; 0x2c
   11f64:	blx	r3
   11f68:	b	11f44 <__assert_fail@plt+0x10a0>
   11f6c:	ldr	r0, [pc, #52]	; 11fa8 <__assert_fail@plt+0x1104>
   11f70:	add	r3, sp, #48	; 0x30
   11f74:	mov	r2, r5
   11f78:	mov	r1, r4
   11f7c:	str	r3, [sp]
   11f80:	str	r3, [sp, #12]
   11f84:	ldr	r3, [sp, #40]	; 0x28
   11f88:	ldr	r0, [r0]
   11f8c:	bl	13cf8 <__assert_fail@plt+0x2e54>
   11f90:	mov	r0, r6
   11f94:	bl	10dcc <exit@plt>
   11f98:	andeq	r5, r2, r0, asr r1
   11f9c:	andeq	r4, r1, r8, ror #16
   11fa0:	muleq	r1, r8, r8
   11fa4:	andeq	r5, r2, r8, lsr r1
   11fa8:	andeq	r5, r2, ip, asr #2
   11fac:	push	{r4, r5, r6, r7, r8, r9, lr}
   11fb0:	sub	sp, sp, #20
   11fb4:	mov	r8, r3
   11fb8:	mov	r4, #0
   11fbc:	mov	r7, r2
   11fc0:	mov	r2, #1
   11fc4:	ldrb	lr, [sp, #52]	; 0x34
   11fc8:	ldr	r3, [pc, #140]	; 1205c <__assert_fail@plt+0x11b8>
   11fcc:	ldr	ip, [pc, #140]	; 12060 <__assert_fail@plt+0x11bc>
   11fd0:	cmp	lr, r4
   11fd4:	ldr	r6, [sp, #56]	; 0x38
   11fd8:	mov	r5, r3
   11fdc:	ldr	r9, [r3]
   11fe0:	str	r2, [r3]
   11fe4:	ldr	r2, [pc, #120]	; 12064 <__assert_fail@plt+0x11c0>
   11fe8:	moveq	r2, ip
   11fec:	str	r4, [sp]
   11ff0:	ldr	r3, [pc, #112]	; 12068 <__assert_fail@plt+0x11c4>
   11ff4:	bl	10db4 <getopt_long@plt>
   11ff8:	cmn	r0, #1
   11ffc:	beq	12024 <__assert_fail@plt+0x1180>
   12000:	cmp	r0, #104	; 0x68
   12004:	beq	1201c <__assert_fail@plt+0x1178>
   12008:	cmp	r0, #118	; 0x76
   1200c:	beq	12030 <__assert_fail@plt+0x118c>
   12010:	ldr	r3, [pc, #84]	; 1206c <__assert_fail@plt+0x11c8>
   12014:	ldr	r0, [r3]
   12018:	b	12020 <__assert_fail@plt+0x117c>
   1201c:	mov	r0, r4
   12020:	blx	r6
   12024:	str	r9, [r5]
   12028:	add	sp, sp, #20
   1202c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12030:	ldr	r0, [pc, #56]	; 12070 <__assert_fail@plt+0x11cc>
   12034:	add	r3, sp, #60	; 0x3c
   12038:	mov	r2, r8
   1203c:	mov	r1, r7
   12040:	str	r3, [sp]
   12044:	str	r3, [sp, #12]
   12048:	ldr	r3, [sp, #48]	; 0x30
   1204c:	ldr	r0, [r0]
   12050:	bl	13cf8 <__assert_fail@plt+0x2e54>
   12054:	mov	r0, r4
   12058:	bl	10dcc <exit@plt>
   1205c:	andeq	r5, r2, r0, asr r1
   12060:	muleq	r1, r8, r8
   12064:	andeq	r4, r1, r6, lsl #14
   12068:	andeq	r4, r1, r8, ror #16
   1206c:	andeq	r5, r2, r8, ror #1
   12070:	andeq	r5, r2, ip, asr #2
   12074:	push	{r4, r5, r6, lr}
   12078:	subs	r4, r0, #0
   1207c:	bne	12094 <__assert_fail@plt+0x11f0>
   12080:	ldr	r3, [pc, #124]	; 12104 <__assert_fail@plt+0x1260>
   12084:	ldr	r0, [pc, #124]	; 12108 <__assert_fail@plt+0x1264>
   12088:	ldr	r1, [r3]
   1208c:	bl	10e74 <fputs@plt>
   12090:	bl	10e8c <abort@plt>
   12094:	mov	r1, #47	; 0x2f
   12098:	bl	10e50 <strrchr@plt>
   1209c:	subs	r6, r0, #0
   120a0:	beq	120f0 <__assert_fail@plt+0x124c>
   120a4:	add	r5, r6, #1
   120a8:	sub	r3, r5, r4
   120ac:	cmp	r3, #6
   120b0:	ble	120f0 <__assert_fail@plt+0x124c>
   120b4:	mov	r2, #7
   120b8:	ldr	r1, [pc, #76]	; 1210c <__assert_fail@plt+0x1268>
   120bc:	sub	r0, r6, #6
   120c0:	bl	10e80 <strncmp@plt>
   120c4:	cmp	r0, #0
   120c8:	bne	120f0 <__assert_fail@plt+0x124c>
   120cc:	mov	r2, #3
   120d0:	ldr	r1, [pc, #56]	; 12110 <__assert_fail@plt+0x126c>
   120d4:	mov	r0, r5
   120d8:	bl	10e80 <strncmp@plt>
   120dc:	cmp	r0, #0
   120e0:	ldreq	r3, [pc, #44]	; 12114 <__assert_fail@plt+0x1270>
   120e4:	addeq	r4, r6, #4
   120e8:	movne	r4, r5
   120ec:	streq	r4, [r3]
   120f0:	ldr	r3, [pc, #32]	; 12118 <__assert_fail@plt+0x1274>
   120f4:	str	r4, [r3]
   120f8:	ldr	r3, [pc, #28]	; 1211c <__assert_fail@plt+0x1278>
   120fc:	str	r4, [r3]
   12100:	pop	{r4, r5, r6, pc}
   12104:	andeq	r5, r2, r0, asr #2
   12108:	andeq	r4, r1, r7, lsr #17
   1210c:	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   12110:	andeq	r4, r1, r7, ror #17
   12114:	andeq	r5, r2, r0, lsr r1
   12118:	andeq	r5, r2, r0, ror r1
   1211c:	andeq	r5, r2, r4, lsr r1
   12120:	push	{r4, lr}
   12124:	mov	r2, #48	; 0x30
   12128:	mov	r4, r1
   1212c:	mov	r1, #0
   12130:	bl	10dfc <memset@plt>
   12134:	cmp	r4, #10
   12138:	bne	12140 <__assert_fail@plt+0x129c>
   1213c:	bl	10e8c <abort@plt>
   12140:	str	r4, [r0]
   12144:	pop	{r4, pc}
   12148:	push	{r4, r5, r6, lr}
   1214c:	mov	r2, #5
   12150:	mov	r6, r0
   12154:	mov	r5, r1
   12158:	mov	r1, r0
   1215c:	mov	r0, #0
   12160:	bl	10cdc <dcgettext@plt>
   12164:	cmp	r6, r0
   12168:	mov	r4, r0
   1216c:	bne	121dc <__assert_fail@plt+0x1338>
   12170:	bl	14258 <__assert_fail@plt+0x33b4>
   12174:	ldrb	r3, [r0]
   12178:	bic	r3, r3, #32
   1217c:	cmp	r3, #85	; 0x55
   12180:	bne	121e4 <__assert_fail@plt+0x1340>
   12184:	ldrb	r3, [r0, #1]
   12188:	bic	r3, r3, #32
   1218c:	cmp	r3, #84	; 0x54
   12190:	bne	12254 <__assert_fail@plt+0x13b0>
   12194:	ldrb	r3, [r0, #2]
   12198:	bic	r3, r3, #32
   1219c:	cmp	r3, #70	; 0x46
   121a0:	bne	12254 <__assert_fail@plt+0x13b0>
   121a4:	ldrb	r3, [r0, #3]
   121a8:	cmp	r3, #45	; 0x2d
   121ac:	bne	12254 <__assert_fail@plt+0x13b0>
   121b0:	ldrb	r3, [r0, #4]
   121b4:	cmp	r3, #56	; 0x38
   121b8:	bne	12254 <__assert_fail@plt+0x13b0>
   121bc:	ldrb	r3, [r0, #5]
   121c0:	cmp	r3, #0
   121c4:	bne	12254 <__assert_fail@plt+0x13b0>
   121c8:	ldrb	r2, [r4]
   121cc:	ldr	r3, [pc, #144]	; 12264 <__assert_fail@plt+0x13c0>
   121d0:	ldr	r4, [pc, #144]	; 12268 <__assert_fail@plt+0x13c4>
   121d4:	cmp	r2, #96	; 0x60
   121d8:	movne	r4, r3
   121dc:	mov	r0, r4
   121e0:	pop	{r4, r5, r6, pc}
   121e4:	cmp	r3, #71	; 0x47
   121e8:	bne	12254 <__assert_fail@plt+0x13b0>
   121ec:	ldrb	r3, [r0, #1]
   121f0:	bic	r3, r3, #32
   121f4:	cmp	r3, #66	; 0x42
   121f8:	bne	12254 <__assert_fail@plt+0x13b0>
   121fc:	ldrb	r3, [r0, #2]
   12200:	cmp	r3, #49	; 0x31
   12204:	bne	12254 <__assert_fail@plt+0x13b0>
   12208:	ldrb	r3, [r0, #3]
   1220c:	cmp	r3, #56	; 0x38
   12210:	bne	12254 <__assert_fail@plt+0x13b0>
   12214:	ldrb	r3, [r0, #4]
   12218:	cmp	r3, #48	; 0x30
   1221c:	bne	12254 <__assert_fail@plt+0x13b0>
   12220:	ldrb	r3, [r0, #5]
   12224:	cmp	r3, #51	; 0x33
   12228:	bne	12254 <__assert_fail@plt+0x13b0>
   1222c:	ldrb	r3, [r0, #6]
   12230:	cmp	r3, #48	; 0x30
   12234:	bne	12254 <__assert_fail@plt+0x13b0>
   12238:	ldrb	r3, [r0, #7]
   1223c:	cmp	r3, #0
   12240:	bne	12254 <__assert_fail@plt+0x13b0>
   12244:	ldrb	r2, [r4]
   12248:	ldr	r3, [pc, #28]	; 1226c <__assert_fail@plt+0x13c8>
   1224c:	ldr	r4, [pc, #28]	; 12270 <__assert_fail@plt+0x13cc>
   12250:	b	121d4 <__assert_fail@plt+0x1330>
   12254:	ldr	r4, [pc, #24]	; 12274 <__assert_fail@plt+0x13d0>
   12258:	cmp	r5, #9
   1225c:	ldr	r3, [pc, #20]	; 12278 <__assert_fail@plt+0x13d4>
   12260:	b	121d8 <__assert_fail@plt+0x1334>
   12264:	andeq	r4, r1, r2, asr #18
   12268:	andeq	r4, r1, sp, asr #18
   1226c:	andeq	r4, r1, r6, asr #18
   12270:	andeq	r4, r1, r9, asr #18
   12274:	andeq	r4, r1, r0, asr #18
   12278:	andeq	r4, r1, r1, asr r9
   1227c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12280:	sub	sp, sp, #108	; 0x6c
   12284:	mov	r8, r0
   12288:	mov	r5, r1
   1228c:	mov	r6, #0
   12290:	str	r3, [sp, #40]	; 0x28
   12294:	str	r2, [sp, #48]	; 0x30
   12298:	ldr	sl, [sp, #144]	; 0x90
   1229c:	bl	10d24 <__ctype_get_mb_cur_max@plt>
   122a0:	ldr	r3, [sp, #148]	; 0x94
   122a4:	str	r6, [sp, #24]
   122a8:	str	r6, [sp, #32]
   122ac:	str	r6, [sp, #44]	; 0x2c
   122b0:	str	r6, [sp, #52]	; 0x34
   122b4:	ubfx	r7, r3, #1, #1
   122b8:	mov	r3, #1
   122bc:	str	r6, [sp, #60]	; 0x3c
   122c0:	str	r3, [sp, #72]	; 0x48
   122c4:	str	r0, [sp, #76]	; 0x4c
   122c8:	cmp	sl, #10
   122cc:	ldrls	pc, [pc, sl, lsl #2]
   122d0:	b	12514 <__assert_fail@plt+0x1670>
   122d4:	andeq	r2, r1, r0, lsl #6
   122d8:	andeq	r2, r1, ip, lsr #10
   122dc:			; <UNDEFINED> instruction: 0x000124b0
   122e0:	andeq	r2, r1, r8, asr #9
   122e4:	muleq	r1, r8, r4
   122e8:	strdeq	r2, [r1], -r0
   122ec:	ldrdeq	r2, [r1], -r0
   122f0:	andeq	r2, r1, r8, lsl r5
   122f4:	andeq	r2, r1, r0, lsr #8
   122f8:	andeq	r2, r1, r0, lsr #8
   122fc:	andeq	r2, r1, r0, lsr #8
   12300:	mov	r4, sl
   12304:	mov	r7, #0
   12308:	mov	r9, r5
   1230c:	mov	r3, #0
   12310:	str	r6, [sp, #68]	; 0x44
   12314:	str	r3, [sp, #28]
   12318:	ldr	r3, [sp, #40]	; 0x28
   1231c:	cmn	r3, #1
   12320:	bne	12ec0 <__assert_fail@plt+0x201c>
   12324:	ldr	r2, [sp, #28]
   12328:	ldr	r3, [sp, #48]	; 0x30
   1232c:	ldrb	r3, [r3, r2]
   12330:	adds	r3, r3, #0
   12334:	movne	r3, #1
   12338:	str	r3, [sp, #36]	; 0x24
   1233c:	ldr	r3, [sp, #36]	; 0x24
   12340:	cmp	r3, #0
   12344:	bne	12550 <__assert_fail@plt+0x16ac>
   12348:	sub	r3, sl, #2
   1234c:	cmp	r4, #0
   12350:	clz	r3, r3
   12354:	movne	r2, #0
   12358:	lsr	r3, r3, #5
   1235c:	andeq	r2, r3, r7
   12360:	cmp	r2, #0
   12364:	bne	12714 <__assert_fail@plt+0x1870>
   12368:	eor	r7, r7, #1
   1236c:	ands	r3, r3, r7
   12370:	beq	12f38 <__assert_fail@plt+0x2094>
   12374:	ldr	r2, [sp, #68]	; 0x44
   12378:	cmp	r2, #0
   1237c:	beq	12f00 <__assert_fail@plt+0x205c>
   12380:	ldr	r3, [sp, #72]	; 0x48
   12384:	cmp	r3, #0
   12388:	beq	12ed4 <__assert_fail@plt+0x2030>
   1238c:	ldr	r2, [sp, #48]	; 0x30
   12390:	ldr	r3, [sp, #160]	; 0xa0
   12394:	ldr	r1, [sp, #60]	; 0x3c
   12398:	str	r3, [sp, #16]
   1239c:	ldr	r3, [sp, #156]	; 0x9c
   123a0:	str	r3, [sp, #12]
   123a4:	ldr	r3, [sp, #152]	; 0x98
   123a8:	str	r3, [sp, #8]
   123ac:	ldr	r3, [sp, #148]	; 0x94
   123b0:	str	r3, [sp, #4]
   123b4:	mov	r3, #5
   123b8:	str	r3, [sp]
   123bc:	ldr	r3, [sp, #40]	; 0x28
   123c0:	mov	r0, r8
   123c4:	bl	1227c <__assert_fail@plt+0x13d8>
   123c8:	mov	r4, r0
   123cc:	b	12f2c <__assert_fail@plt+0x2088>
   123d0:	ldr	r3, [pc, #2948]	; 12f5c <__assert_fail@plt+0x20b8>
   123d4:	mov	r7, #1
   123d8:	mov	r4, #0
   123dc:	mov	sl, #5
   123e0:	str	r7, [sp, #24]
   123e4:	str	r7, [sp, #32]
   123e8:	str	r3, [sp, #44]	; 0x2c
   123ec:	b	12308 <__assert_fail@plt+0x1464>
   123f0:	cmp	r7, #0
   123f4:	bne	12538 <__assert_fail@plt+0x1694>
   123f8:	cmp	r5, #0
   123fc:	mov	r4, #1
   12400:	movne	r3, #34	; 0x22
   12404:	strbne	r3, [r8]
   12408:	mov	r3, #1
   1240c:	str	r3, [sp, #24]
   12410:	str	r3, [sp, #32]
   12414:	ldr	r3, [pc, #2880]	; 12f5c <__assert_fail@plt+0x20b8>
   12418:	str	r3, [sp, #44]	; 0x2c
   1241c:	b	12308 <__assert_fail@plt+0x1464>
   12420:	cmp	sl, #10
   12424:	beq	12448 <__assert_fail@plt+0x15a4>
   12428:	mov	r1, sl
   1242c:	ldr	r0, [pc, #2860]	; 12f60 <__assert_fail@plt+0x20bc>
   12430:	bl	12148 <__assert_fail@plt+0x12a4>
   12434:	mov	r1, sl
   12438:	str	r0, [sp, #156]	; 0x9c
   1243c:	ldr	r0, [pc, #2848]	; 12f64 <__assert_fail@plt+0x20c0>
   12440:	bl	12148 <__assert_fail@plt+0x12a4>
   12444:	str	r0, [sp, #160]	; 0xa0
   12448:	cmp	r7, #0
   1244c:	moveq	r4, r7
   12450:	beq	12468 <__assert_fail@plt+0x15c4>
   12454:	mov	r4, #0
   12458:	b	12478 <__assert_fail@plt+0x15d4>
   1245c:	cmp	r5, r4
   12460:	strbhi	r3, [r8, r4]
   12464:	add	r4, r4, #1
   12468:	ldr	r3, [sp, #156]	; 0x9c
   1246c:	ldrb	r3, [r3, r4]
   12470:	cmp	r3, #0
   12474:	bne	1245c <__assert_fail@plt+0x15b8>
   12478:	ldr	r0, [sp, #160]	; 0xa0
   1247c:	bl	10dd8 <strlen@plt>
   12480:	ldr	r3, [sp, #160]	; 0xa0
   12484:	str	r0, [sp, #32]
   12488:	str	r3, [sp, #44]	; 0x2c
   1248c:	mov	r3, #1
   12490:	str	r3, [sp, #24]
   12494:	b	12308 <__assert_fail@plt+0x1464>
   12498:	mov	r3, #1
   1249c:	cmp	r7, #0
   124a0:	streq	r3, [sp, #24]
   124a4:	beq	124e8 <__assert_fail@plt+0x1644>
   124a8:	str	r3, [sp, #32]
   124ac:	b	124d4 <__assert_fail@plt+0x1630>
   124b0:	cmp	r7, #0
   124b4:	beq	124e8 <__assert_fail@plt+0x1644>
   124b8:	mov	r3, #1
   124bc:	str	r3, [sp, #32]
   124c0:	ldr	r3, [pc, #2716]	; 12f64 <__assert_fail@plt+0x20c0>
   124c4:	b	12548 <__assert_fail@plt+0x16a4>
   124c8:	mov	r7, #1
   124cc:	str	r7, [sp, #24]
   124d0:	str	r7, [sp, #32]
   124d4:	ldr	r3, [pc, #2696]	; 12f64 <__assert_fail@plt+0x20c0>
   124d8:	mov	r4, #0
   124dc:	str	r3, [sp, #44]	; 0x2c
   124e0:	mov	sl, #2
   124e4:	b	12308 <__assert_fail@plt+0x1464>
   124e8:	cmp	r5, #0
   124ec:	movne	r3, #39	; 0x27
   124f0:	movne	r7, #0
   124f4:	strbne	r3, [r8]
   124f8:	moveq	r7, r5
   124fc:	mov	r3, #1
   12500:	mov	r4, #1
   12504:	str	r3, [sp, #32]
   12508:	ldr	r3, [pc, #2644]	; 12f64 <__assert_fail@plt+0x20c0>
   1250c:	str	r3, [sp, #44]	; 0x2c
   12510:	b	124e0 <__assert_fail@plt+0x163c>
   12514:	bl	10e8c <abort@plt>
   12518:	mov	r3, #1
   1251c:	mov	r7, #0
   12520:	str	r3, [sp, #24]
   12524:	mov	r4, #0
   12528:	b	12308 <__assert_fail@plt+0x1464>
   1252c:	mov	r7, #1
   12530:	str	sl, [sp, #32]
   12534:	b	124d4 <__assert_fail@plt+0x1630>
   12538:	mov	r3, #1
   1253c:	str	r7, [sp, #24]
   12540:	str	r3, [sp, #32]
   12544:	ldr	r3, [pc, #2576]	; 12f5c <__assert_fail@plt+0x20b8>
   12548:	str	r3, [sp, #44]	; 0x2c
   1254c:	b	12524 <__assert_fail@plt+0x1680>
   12550:	ldr	fp, [sp, #24]
   12554:	ldr	r3, [sp, #32]
   12558:	cmp	sl, #2
   1255c:	moveq	fp, #0
   12560:	andne	fp, fp, #1
   12564:	adds	r5, r3, #0
   12568:	movne	r5, #1
   1256c:	ands	r3, fp, r5
   12570:	str	r3, [sp, #64]	; 0x40
   12574:	beq	12644 <__assert_fail@plt+0x17a0>
   12578:	ldr	r3, [sp, #28]
   1257c:	ldr	r2, [sp, #32]
   12580:	cmp	r2, #1
   12584:	add	r6, r3, r2
   12588:	mov	r3, r2
   1258c:	ldr	r2, [sp, #40]	; 0x28
   12590:	movls	r3, #0
   12594:	movhi	r3, #1
   12598:	cmn	r2, #1
   1259c:	movne	r3, #0
   125a0:	cmp	r3, #0
   125a4:	beq	125b4 <__assert_fail@plt+0x1710>
   125a8:	ldr	r0, [sp, #48]	; 0x30
   125ac:	bl	10dd8 <strlen@plt>
   125b0:	str	r0, [sp, #40]	; 0x28
   125b4:	ldr	r3, [sp, #40]	; 0x28
   125b8:	cmp	r6, r3
   125bc:	bhi	1263c <__assert_fail@plt+0x1798>
   125c0:	ldr	r0, [sp, #28]
   125c4:	ldr	r2, [sp, #32]
   125c8:	ldr	r3, [sp, #48]	; 0x30
   125cc:	ldr	r1, [sp, #44]	; 0x2c
   125d0:	add	r0, r3, r0
   125d4:	bl	10cb8 <memcmp@plt>
   125d8:	cmp	r0, #0
   125dc:	bne	1263c <__assert_fail@plt+0x1798>
   125e0:	cmp	r7, #0
   125e4:	beq	12644 <__assert_fail@plt+0x17a0>
   125e8:	str	r7, [sp, #24]
   125ec:	ldr	r3, [sp, #24]
   125f0:	mov	r1, r9
   125f4:	ldr	r2, [sp, #48]	; 0x30
   125f8:	cmp	sl, #2
   125fc:	movne	r3, #0
   12600:	andeq	r3, r3, #1
   12604:	cmp	r3, #0
   12608:	ldr	r3, [sp, #160]	; 0xa0
   1260c:	movne	sl, #4
   12610:	str	sl, [sp]
   12614:	str	r3, [sp, #16]
   12618:	ldr	r3, [sp, #156]	; 0x9c
   1261c:	str	r3, [sp, #12]
   12620:	mov	r3, #0
   12624:	str	r3, [sp, #8]
   12628:	ldr	r3, [sp, #148]	; 0x94
   1262c:	bic	r3, r3, #2
   12630:	str	r3, [sp, #4]
   12634:	ldr	r3, [sp, #40]	; 0x28
   12638:	b	123c0 <__assert_fail@plt+0x151c>
   1263c:	mov	r3, #0
   12640:	str	r3, [sp, #64]	; 0x40
   12644:	ldr	r2, [sp, #28]
   12648:	ldr	r3, [sp, #48]	; 0x30
   1264c:	add	r3, r3, r2
   12650:	str	r3, [sp, #80]	; 0x50
   12654:	ldr	r3, [sp, #48]	; 0x30
   12658:	ldrb	r6, [r3, r2]
   1265c:	cmp	r6, #58	; 0x3a
   12660:	bhi	127c4 <__assert_fail@plt+0x1920>
   12664:	cmp	r6, #43	; 0x2b
   12668:	bcs	12984 <__assert_fail@plt+0x1ae0>
   1266c:	cmp	r6, #32
   12670:	beq	129d8 <__assert_fail@plt+0x1b34>
   12674:	bhi	1271c <__assert_fail@plt+0x1878>
   12678:	cmp	r6, #9
   1267c:	beq	12b80 <__assert_fail@plt+0x1cdc>
   12680:	bhi	126e0 <__assert_fail@plt+0x183c>
   12684:	cmp	r6, #7
   12688:	beq	12b90 <__assert_fail@plt+0x1cec>
   1268c:	bhi	12bac <__assert_fail@plt+0x1d08>
   12690:	cmp	r6, #0
   12694:	beq	129f4 <__assert_fail@plt+0x1b50>
   12698:	ldr	r3, [sp, #76]	; 0x4c
   1269c:	cmp	r3, #1
   126a0:	bne	12bf8 <__assert_fail@plt+0x1d54>
   126a4:	bl	10dc0 <__ctype_b_loc@plt>
   126a8:	ldr	r2, [r0]
   126ac:	sxth	r3, r6
   126b0:	lsl	r3, r3, #1
   126b4:	ldrh	r5, [r2, r3]
   126b8:	ldr	r3, [sp, #76]	; 0x4c
   126bc:	ubfx	r5, r5, #14, #1
   126c0:	str	r3, [sp, #56]	; 0x38
   126c4:	ldr	r3, [sp, #24]
   126c8:	eor	fp, r5, #1
   126cc:	and	fp, fp, r3
   126d0:	ands	fp, fp, #255	; 0xff
   126d4:	beq	128b4 <__assert_fail@plt+0x1a10>
   126d8:	mov	r5, #0
   126dc:	b	12ca4 <__assert_fail@plt+0x1e00>
   126e0:	cmp	r6, #11
   126e4:	beq	12bb4 <__assert_fail@plt+0x1d10>
   126e8:	bcc	12b88 <__assert_fail@plt+0x1ce4>
   126ec:	cmp	r6, #12
   126f0:	beq	12bbc <__assert_fail@plt+0x1d18>
   126f4:	cmp	r6, #13
   126f8:	moveq	r3, #114	; 0x72
   126fc:	bne	12698 <__assert_fail@plt+0x17f4>
   12700:	cmp	sl, #2
   12704:	movne	r2, #0
   12708:	andeq	r2, r7, #1
   1270c:	cmp	r2, #0
   12710:	beq	12b94 <__assert_fail@plt+0x1cf0>
   12714:	mov	sl, #2
   12718:	b	125ec <__assert_fail@plt+0x1748>
   1271c:	cmp	r6, #37	; 0x25
   12720:	beq	12984 <__assert_fail@plt+0x1ae0>
   12724:	bhi	12738 <__assert_fail@plt+0x1894>
   12728:	cmp	r6, #35	; 0x23
   1272c:	beq	129cc <__assert_fail@plt+0x1b28>
   12730:	mov	r5, #0
   12734:	b	129dc <__assert_fail@plt+0x1b38>
   12738:	cmp	r6, #39	; 0x27
   1273c:	bne	12730 <__assert_fail@plt+0x188c>
   12740:	cmp	sl, #2
   12744:	ldrne	r5, [sp, #36]	; 0x24
   12748:	movne	r3, r5
   1274c:	strne	r3, [sp, #68]	; 0x44
   12750:	bne	12ad0 <__assert_fail@plt+0x1c2c>
   12754:	cmp	r7, #0
   12758:	bne	125ec <__assert_fail@plt+0x1748>
   1275c:	ldr	r3, [sp, #60]	; 0x3c
   12760:	cmp	r9, #0
   12764:	clz	r3, r3
   12768:	lsr	r3, r3, #5
   1276c:	moveq	r3, #0
   12770:	cmp	r3, #0
   12774:	strne	r9, [sp, #60]	; 0x3c
   12778:	movne	r9, #0
   1277c:	bne	1278c <__assert_fail@plt+0x18e8>
   12780:	cmp	r9, r4
   12784:	movhi	r3, #39	; 0x27
   12788:	strbhi	r3, [r8, r4]
   1278c:	add	r3, r4, #1
   12790:	ldr	r5, [sp, #36]	; 0x24
   12794:	mov	fp, #0
   12798:	cmp	r3, r9
   1279c:	movcc	r2, #92	; 0x5c
   127a0:	str	fp, [sp, #52]	; 0x34
   127a4:	strbcc	r2, [r8, r3]
   127a8:	add	r3, r4, #2
   127ac:	add	r4, r4, #3
   127b0:	cmp	r3, r9
   127b4:	str	r5, [sp, #68]	; 0x44
   127b8:	movcc	r2, #39	; 0x27
   127bc:	strbcc	r2, [r8, r3]
   127c0:	b	128b4 <__assert_fail@plt+0x1a10>
   127c4:	cmp	r6, #94	; 0x5e
   127c8:	beq	12730 <__assert_fail@plt+0x188c>
   127cc:	bhi	1298c <__assert_fail@plt+0x1ae8>
   127d0:	cmp	r6, #90	; 0x5a
   127d4:	bhi	12978 <__assert_fail@plt+0x1ad4>
   127d8:	cmp	r6, #65	; 0x41
   127dc:	bcs	12984 <__assert_fail@plt+0x1ae0>
   127e0:	cmp	r6, #62	; 0x3e
   127e4:	bls	12730 <__assert_fail@plt+0x188c>
   127e8:	cmp	r6, #63	; 0x3f
   127ec:	bne	12698 <__assert_fail@plt+0x17f4>
   127f0:	cmp	sl, #2
   127f4:	beq	12ad8 <__assert_fail@plt+0x1c34>
   127f8:	cmp	sl, #5
   127fc:	movne	fp, #0
   12800:	bne	12ea8 <__assert_fail@plt+0x2004>
   12804:	ldr	r3, [sp, #148]	; 0x94
   12808:	tst	r3, #4
   1280c:	beq	12ae0 <__assert_fail@plt+0x1c3c>
   12810:	ldr	r3, [sp, #28]
   12814:	add	r2, r3, #2
   12818:	ldr	r3, [sp, #40]	; 0x28
   1281c:	cmp	r2, r3
   12820:	bcs	12ae0 <__assert_fail@plt+0x1c3c>
   12824:	ldr	r1, [sp, #28]
   12828:	ldr	r3, [sp, #48]	; 0x30
   1282c:	add	r3, r3, r1
   12830:	ldrb	r1, [r3, #1]
   12834:	cmp	r1, #63	; 0x3f
   12838:	bne	12ae0 <__assert_fail@plt+0x1c3c>
   1283c:	ldr	r3, [sp, #48]	; 0x30
   12840:	ldrb	r6, [r3, r2]
   12844:	sub	r3, r6, #33	; 0x21
   12848:	uxtb	r3, r3
   1284c:	cmp	r3, #29
   12850:	bhi	12eb0 <__assert_fail@plt+0x200c>
   12854:	ldr	r0, [pc, #1804]	; 12f68 <__assert_fail@plt+0x20c4>
   12858:	mov	r5, #1
   1285c:	ands	r5, r0, r5, lsl r3
   12860:	beq	12eb8 <__assert_fail@plt+0x2014>
   12864:	cmp	r7, #0
   12868:	bne	125ec <__assert_fail@plt+0x1748>
   1286c:	cmp	r9, r4
   12870:	add	r3, r4, #1
   12874:	str	r2, [sp, #28]
   12878:	mov	r5, #0
   1287c:	strbhi	r1, [r8, r4]
   12880:	cmp	r9, r3
   12884:	mov	fp, r5
   12888:	movhi	r1, #34	; 0x22
   1288c:	strbhi	r1, [r8, r3]
   12890:	add	r3, r4, #2
   12894:	cmp	r9, r3
   12898:	movhi	r1, #34	; 0x22
   1289c:	strbhi	r1, [r8, r3]
   128a0:	add	r3, r4, #3
   128a4:	add	r4, r4, #4
   128a8:	cmp	r9, r3
   128ac:	movhi	r1, #63	; 0x3f
   128b0:	strbhi	r1, [r8, r3]
   128b4:	ldr	r3, [sp, #24]
   128b8:	eor	r3, r3, #1
   128bc:	cmp	sl, #2
   128c0:	orreq	r3, r3, #1
   128c4:	eor	r3, r3, #1
   128c8:	orr	r3, r7, r3
   128cc:	tst	r3, #255	; 0xff
   128d0:	beq	128fc <__assert_fail@plt+0x1a58>
   128d4:	ldr	r3, [sp, #152]	; 0x98
   128d8:	cmp	r3, #0
   128dc:	beq	128fc <__assert_fail@plt+0x1a58>
   128e0:	ldr	r1, [sp, #152]	; 0x98
   128e4:	ubfx	r2, r6, #5, #8
   128e8:	and	r3, r6, #31
   128ec:	ldr	r2, [r1, r2, lsl #2]
   128f0:	lsr	r3, r2, r3
   128f4:	tst	r3, #1
   128f8:	bne	12908 <__assert_fail@plt+0x1a64>
   128fc:	ldr	r3, [sp, #64]	; 0x40
   12900:	cmp	r3, #0
   12904:	beq	12b00 <__assert_fail@plt+0x1c5c>
   12908:	sub	r3, sl, #2
   1290c:	cmp	r7, #0
   12910:	clz	r3, r3
   12914:	lsr	r3, r3, #5
   12918:	bne	125ec <__assert_fail@plt+0x1748>
   1291c:	ldr	r2, [sp, #52]	; 0x34
   12920:	eor	r2, r2, #1
   12924:	ands	r3, r3, r2
   12928:	beq	12960 <__assert_fail@plt+0x1abc>
   1292c:	cmp	r9, r4
   12930:	str	r3, [sp, #52]	; 0x34
   12934:	movhi	r2, #39	; 0x27
   12938:	strbhi	r2, [r8, r4]
   1293c:	add	r2, r4, #1
   12940:	cmp	r9, r2
   12944:	movhi	r1, #36	; 0x24
   12948:	strbhi	r1, [r8, r2]
   1294c:	add	r2, r4, #2
   12950:	add	r4, r4, #3
   12954:	cmp	r9, r2
   12958:	movhi	r1, #39	; 0x27
   1295c:	strbhi	r1, [r8, r2]
   12960:	cmp	r9, r4
   12964:	ldr	fp, [sp, #36]	; 0x24
   12968:	movhi	r3, #92	; 0x5c
   1296c:	strbhi	r3, [r8, r4]
   12970:	add	r4, r4, #1
   12974:	b	12b00 <__assert_fail@plt+0x1c5c>
   12978:	cmp	r6, #92	; 0x5c
   1297c:	beq	12ae8 <__assert_fail@plt+0x1c44>
   12980:	bls	12730 <__assert_fail@plt+0x188c>
   12984:	ldr	r5, [sp, #36]	; 0x24
   12988:	b	12ad0 <__assert_fail@plt+0x1c2c>
   1298c:	cmp	r6, #122	; 0x7a
   12990:	bhi	129b0 <__assert_fail@plt+0x1b0c>
   12994:	cmp	r6, #97	; 0x61
   12998:	bcs	12984 <__assert_fail@plt+0x1ae0>
   1299c:	cmp	r6, #95	; 0x5f
   129a0:	beq	12984 <__assert_fail@plt+0x1ae0>
   129a4:	cmp	r6, #96	; 0x60
   129a8:	bne	12698 <__assert_fail@plt+0x17f4>
   129ac:	b	12730 <__assert_fail@plt+0x188c>
   129b0:	cmp	r6, #124	; 0x7c
   129b4:	beq	12730 <__assert_fail@plt+0x188c>
   129b8:	bcc	12bc4 <__assert_fail@plt+0x1d20>
   129bc:	cmp	r6, #125	; 0x7d
   129c0:	beq	12bc4 <__assert_fail@plt+0x1d20>
   129c4:	cmp	r6, #126	; 0x7e
   129c8:	bne	12698 <__assert_fail@plt+0x17f4>
   129cc:	ldr	r3, [sp, #28]
   129d0:	cmp	r3, #0
   129d4:	bne	12ae0 <__assert_fail@plt+0x1c3c>
   129d8:	ldr	r5, [sp, #36]	; 0x24
   129dc:	cmp	sl, #2
   129e0:	movne	fp, #0
   129e4:	andeq	fp, r7, #1
   129e8:	cmp	fp, #0
   129ec:	beq	128b4 <__assert_fail@plt+0x1a10>
   129f0:	b	12714 <__assert_fail@plt+0x1870>
   129f4:	ldr	r3, [sp, #24]
   129f8:	cmp	r3, #0
   129fc:	beq	12ac4 <__assert_fail@plt+0x1c20>
   12a00:	sub	r2, sl, #2
   12a04:	cmp	r7, #0
   12a08:	clz	r2, r2
   12a0c:	lsr	r2, r2, #5
   12a10:	bne	125e8 <__assert_fail@plt+0x1744>
   12a14:	ldr	r3, [sp, #52]	; 0x34
   12a18:	eor	r3, r3, #1
   12a1c:	ands	r2, r2, r3
   12a20:	moveq	r3, r4
   12a24:	beq	12a5c <__assert_fail@plt+0x1bb8>
   12a28:	cmp	r9, r4
   12a2c:	str	r2, [sp, #52]	; 0x34
   12a30:	movhi	r3, #39	; 0x27
   12a34:	strbhi	r3, [r8, r4]
   12a38:	add	r3, r4, #1
   12a3c:	cmp	r9, r3
   12a40:	movhi	r1, #36	; 0x24
   12a44:	strbhi	r1, [r8, r3]
   12a48:	add	r3, r4, #2
   12a4c:	cmp	r9, r3
   12a50:	movhi	r1, #39	; 0x27
   12a54:	strbhi	r1, [r8, r3]
   12a58:	add	r3, r4, #3
   12a5c:	cmp	r9, r3
   12a60:	add	r4, r3, #1
   12a64:	movhi	r2, #92	; 0x5c
   12a68:	strbhi	r2, [r8, r3]
   12a6c:	cmp	fp, #0
   12a70:	beq	12e98 <__assert_fail@plt+0x1ff4>
   12a74:	ldr	r2, [sp, #28]
   12a78:	ldr	r1, [sp, #40]	; 0x28
   12a7c:	add	r2, r2, #1
   12a80:	cmp	r2, r1
   12a84:	bcs	12abc <__assert_fail@plt+0x1c18>
   12a88:	ldr	r1, [sp, #48]	; 0x30
   12a8c:	mov	r6, #48	; 0x30
   12a90:	ldrb	r2, [r1, r2]
   12a94:	sub	r2, r2, #48	; 0x30
   12a98:	cmp	r2, #9
   12a9c:	bhi	12ea8 <__assert_fail@plt+0x2004>
   12aa0:	cmp	r9, r4
   12aa4:	add	r2, r3, #2
   12aa8:	strbhi	r6, [r8, r4]
   12aac:	cmp	r9, r2
   12ab0:	add	r4, r3, #3
   12ab4:	movhi	r1, #48	; 0x30
   12ab8:	strbhi	r1, [r8, r2]
   12abc:	mov	r5, #0
   12ac0:	b	12ea0 <__assert_fail@plt+0x1ffc>
   12ac4:	ldr	r3, [sp, #148]	; 0x94
   12ac8:	ands	r5, r3, #1
   12acc:	bne	12b54 <__assert_fail@plt+0x1cb0>
   12ad0:	mov	fp, #0
   12ad4:	b	128b4 <__assert_fail@plt+0x1a10>
   12ad8:	cmp	r7, #0
   12adc:	bne	125ec <__assert_fail@plt+0x1748>
   12ae0:	mov	r5, #0
   12ae4:	b	12ad0 <__assert_fail@plt+0x1c2c>
   12ae8:	cmp	sl, #2
   12aec:	bne	12b60 <__assert_fail@plt+0x1cbc>
   12af0:	cmp	r7, #0
   12af4:	bne	125ec <__assert_fail@plt+0x1748>
   12af8:	mov	r5, r7
   12afc:	mov	fp, r7
   12b00:	ldr	r3, [sp, #52]	; 0x34
   12b04:	eor	fp, fp, #1
   12b08:	tst	r3, fp
   12b0c:	beq	12b38 <__assert_fail@plt+0x1c94>
   12b10:	cmp	r9, r4
   12b14:	movhi	r3, #39	; 0x27
   12b18:	strbhi	r3, [r8, r4]
   12b1c:	add	r3, r4, #1
   12b20:	add	r4, r4, #2
   12b24:	cmp	r9, r3
   12b28:	movhi	r2, #39	; 0x27
   12b2c:	strbhi	r2, [r8, r3]
   12b30:	mov	r3, #0
   12b34:	str	r3, [sp, #52]	; 0x34
   12b38:	cmp	r9, r4
   12b3c:	ldr	r3, [sp, #72]	; 0x48
   12b40:	strbhi	r6, [r8, r4]
   12b44:	cmp	r5, #0
   12b48:	add	r4, r4, #1
   12b4c:	moveq	r3, #0
   12b50:	str	r3, [sp, #72]	; 0x48
   12b54:	ldr	r3, [sp, #28]
   12b58:	add	r3, r3, #1
   12b5c:	b	12314 <__assert_fail@plt+0x1470>
   12b60:	ldr	r3, [sp, #24]
   12b64:	and	r3, r3, r7
   12b68:	tst	r5, r3
   12b6c:	moveq	r3, r6
   12b70:	beq	12700 <__assert_fail@plt+0x185c>
   12b74:	mov	fp, #0
   12b78:	mov	r5, fp
   12b7c:	b	12b00 <__assert_fail@plt+0x1c5c>
   12b80:	mov	r3, #116	; 0x74
   12b84:	b	12700 <__assert_fail@plt+0x185c>
   12b88:	mov	r3, #110	; 0x6e
   12b8c:	b	12700 <__assert_fail@plt+0x185c>
   12b90:	mov	r3, #97	; 0x61
   12b94:	ldr	r2, [sp, #24]
   12b98:	cmp	r2, #0
   12b9c:	beq	12ae0 <__assert_fail@plt+0x1c3c>
   12ba0:	mov	r6, r3
   12ba4:	mov	r5, #0
   12ba8:	b	12908 <__assert_fail@plt+0x1a64>
   12bac:	mov	r3, #98	; 0x62
   12bb0:	b	12b94 <__assert_fail@plt+0x1cf0>
   12bb4:	mov	r3, #118	; 0x76
   12bb8:	b	12b94 <__assert_fail@plt+0x1cf0>
   12bbc:	mov	r3, #102	; 0x66
   12bc0:	b	12b94 <__assert_fail@plt+0x1cf0>
   12bc4:	ldr	r3, [sp, #40]	; 0x28
   12bc8:	cmn	r3, #1
   12bcc:	bne	12bec <__assert_fail@plt+0x1d48>
   12bd0:	ldr	r3, [sp, #48]	; 0x30
   12bd4:	ldrb	r3, [r3, #1]
   12bd8:	adds	r3, r3, #0
   12bdc:	movne	r3, #1
   12be0:	cmp	r3, #0
   12be4:	bne	12ae0 <__assert_fail@plt+0x1c3c>
   12be8:	b	129cc <__assert_fail@plt+0x1b28>
   12bec:	ldr	r3, [sp, #40]	; 0x28
   12bf0:	subs	r3, r3, #1
   12bf4:	b	12bdc <__assert_fail@plt+0x1d38>
   12bf8:	mov	r3, #0
   12bfc:	mov	r2, #0
   12c00:	strd	r2, [sp, #96]	; 0x60
   12c04:	ldr	r3, [sp, #40]	; 0x28
   12c08:	cmn	r3, #1
   12c0c:	bne	12c1c <__assert_fail@plt+0x1d78>
   12c10:	ldr	r0, [sp, #48]	; 0x30
   12c14:	bl	10dd8 <strlen@plt>
   12c18:	str	r0, [sp, #40]	; 0x28
   12c1c:	ldr	r5, [sp, #36]	; 0x24
   12c20:	mov	r3, #0
   12c24:	str	r3, [sp, #56]	; 0x38
   12c28:	ldr	r3, [sp, #28]
   12c2c:	add	r0, sp, #92	; 0x5c
   12c30:	ldr	r1, [sp, #40]	; 0x28
   12c34:	ldr	r2, [sp, #56]	; 0x38
   12c38:	add	r2, r3, r2
   12c3c:	ldr	r3, [sp, #48]	; 0x30
   12c40:	add	fp, r3, r2
   12c44:	sub	r2, r1, r2
   12c48:	add	r3, sp, #96	; 0x60
   12c4c:	mov	r1, fp
   12c50:	bl	1428c <__assert_fail@plt+0x33e8>
   12c54:	subs	r2, r0, #0
   12c58:	beq	12c98 <__assert_fail@plt+0x1df4>
   12c5c:	cmn	r2, #1
   12c60:	beq	12e6c <__assert_fail@plt+0x1fc8>
   12c64:	cmn	r2, #2
   12c68:	bne	12ddc <__assert_fail@plt+0x1f38>
   12c6c:	ldr	r3, [sp, #28]
   12c70:	ldr	r2, [sp, #56]	; 0x38
   12c74:	add	r3, r3, r2
   12c78:	ldr	r2, [sp, #40]	; 0x28
   12c7c:	cmp	r2, r3
   12c80:	bls	12e6c <__assert_fail@plt+0x1fc8>
   12c84:	ldr	r2, [sp, #56]	; 0x38
   12c88:	ldr	r3, [sp, #80]	; 0x50
   12c8c:	ldrb	r5, [r3, r2]
   12c90:	cmp	r5, #0
   12c94:	bne	12dcc <__assert_fail@plt+0x1f28>
   12c98:	ldr	r3, [sp, #56]	; 0x38
   12c9c:	cmp	r3, #1
   12ca0:	bls	126c4 <__assert_fail@plt+0x1820>
   12ca4:	ldr	r3, [sp, #28]
   12ca8:	mov	fp, #0
   12cac:	mov	ip, #92	; 0x5c
   12cb0:	ldr	r2, [sp, #56]	; 0x38
   12cb4:	add	r3, r3, r2
   12cb8:	ldr	r2, [sp, #24]
   12cbc:	str	r3, [sp, #36]	; 0x24
   12cc0:	eor	r3, r5, #1
   12cc4:	and	r3, r3, r2
   12cc8:	mov	r2, #39	; 0x27
   12ccc:	uxtb	r3, r3
   12cd0:	cmp	r3, #0
   12cd4:	beq	12e74 <__assert_fail@plt+0x1fd0>
   12cd8:	sub	r0, sl, #2
   12cdc:	cmp	r7, #0
   12ce0:	clz	r0, r0
   12ce4:	lsr	r0, r0, #5
   12ce8:	bne	125e8 <__assert_fail@plt+0x1744>
   12cec:	ldr	r1, [sp, #52]	; 0x34
   12cf0:	eor	r1, r1, #1
   12cf4:	ands	r1, r0, r1
   12cf8:	beq	12d28 <__assert_fail@plt+0x1e84>
   12cfc:	cmp	r9, r4
   12d00:	add	r0, r4, #1
   12d04:	str	r1, [sp, #52]	; 0x34
   12d08:	strbhi	r2, [r8, r4]
   12d0c:	cmp	r9, r0
   12d10:	movhi	lr, #36	; 0x24
   12d14:	strbhi	lr, [r8, r0]
   12d18:	add	r0, r4, #2
   12d1c:	add	r4, r4, #3
   12d20:	cmp	r9, r0
   12d24:	strbhi	r2, [r8, r0]
   12d28:	cmp	r9, r4
   12d2c:	add	r0, r4, #1
   12d30:	mov	fp, r3
   12d34:	strbhi	ip, [r8, r4]
   12d38:	cmp	r9, r0
   12d3c:	lsrhi	r1, r6, #6
   12d40:	addhi	r1, r1, #48	; 0x30
   12d44:	strbhi	r1, [r8, r0]
   12d48:	add	r0, r4, #2
   12d4c:	add	r4, r4, #3
   12d50:	cmp	r9, r0
   12d54:	ubfxhi	r1, r6, #3, #3
   12d58:	and	r6, r6, #7
   12d5c:	add	r6, r6, #48	; 0x30
   12d60:	addhi	r1, r1, #48	; 0x30
   12d64:	strbhi	r1, [r8, r0]
   12d68:	eor	r0, fp, #1
   12d6c:	ldr	r1, [sp, #28]
   12d70:	ldr	lr, [sp, #52]	; 0x34
   12d74:	add	r1, r1, #1
   12d78:	and	r0, r0, lr
   12d7c:	ldr	lr, [sp, #36]	; 0x24
   12d80:	cmp	r1, lr
   12d84:	bcs	12b00 <__assert_fail@plt+0x1c5c>
   12d88:	cmp	r0, #0
   12d8c:	beq	12db0 <__assert_fail@plt+0x1f0c>
   12d90:	cmp	r9, r4
   12d94:	add	r0, r4, #1
   12d98:	strbhi	r2, [r8, r4]
   12d9c:	cmp	r9, r0
   12da0:	add	r4, r4, #2
   12da4:	strbhi	r2, [r8, r0]
   12da8:	mov	r0, #0
   12dac:	str	r0, [sp, #52]	; 0x34
   12db0:	ldr	r0, [sp, #48]	; 0x30
   12db4:	cmp	r9, r4
   12db8:	str	r1, [sp, #28]
   12dbc:	strbhi	r6, [r8, r4]
   12dc0:	add	r4, r4, #1
   12dc4:	ldrb	r6, [r0, r1]
   12dc8:	b	12cd0 <__assert_fail@plt+0x1e2c>
   12dcc:	ldr	r3, [sp, #56]	; 0x38
   12dd0:	add	r3, r3, #1
   12dd4:	str	r3, [sp, #56]	; 0x38
   12dd8:	b	12c6c <__assert_fail@plt+0x1dc8>
   12ddc:	cmp	sl, #2
   12de0:	movne	r3, #0
   12de4:	andeq	r3, r7, #1
   12de8:	cmp	r3, #0
   12dec:	movne	r1, #1
   12df0:	bne	12e4c <__assert_fail@plt+0x1fa8>
   12df4:	ldr	r0, [sp, #92]	; 0x5c
   12df8:	str	r2, [sp, #84]	; 0x54
   12dfc:	bl	10d0c <iswprint@plt>
   12e00:	ldr	r3, [sp, #56]	; 0x38
   12e04:	cmp	r0, #0
   12e08:	add	r0, sp, #96	; 0x60
   12e0c:	moveq	r5, #0
   12e10:	ldr	r2, [sp, #84]	; 0x54
   12e14:	add	r3, r3, r2
   12e18:	str	r3, [sp, #56]	; 0x38
   12e1c:	bl	10cac <mbsinit@plt>
   12e20:	cmp	r0, #0
   12e24:	beq	12c28 <__assert_fail@plt+0x1d84>
   12e28:	b	12c98 <__assert_fail@plt+0x1df4>
   12e2c:	ldrb	r3, [fp, #1]!
   12e30:	cmp	r3, #94	; 0x5e
   12e34:	beq	12714 <__assert_fail@plt+0x1870>
   12e38:	bhi	12e58 <__assert_fail@plt+0x1fb4>
   12e3c:	sub	r3, r3, #91	; 0x5b
   12e40:	cmp	r3, #1
   12e44:	bls	12714 <__assert_fail@plt+0x1870>
   12e48:	add	r1, r1, #1
   12e4c:	cmp	r1, r2
   12e50:	bne	12e2c <__assert_fail@plt+0x1f88>
   12e54:	b	12df4 <__assert_fail@plt+0x1f50>
   12e58:	cmp	r3, #96	; 0x60
   12e5c:	beq	12714 <__assert_fail@plt+0x1870>
   12e60:	cmp	r3, #124	; 0x7c
   12e64:	bne	12e48 <__assert_fail@plt+0x1fa4>
   12e68:	b	12714 <__assert_fail@plt+0x1870>
   12e6c:	mov	r5, #0
   12e70:	b	12c98 <__assert_fail@plt+0x1df4>
   12e74:	ldr	r1, [sp, #64]	; 0x40
   12e78:	cmp	r1, #0
   12e7c:	beq	12d68 <__assert_fail@plt+0x1ec4>
   12e80:	cmp	r9, r4
   12e84:	mov	r1, #0
   12e88:	strbhi	ip, [r8, r4]
   12e8c:	add	r4, r4, #1
   12e90:	str	r1, [sp, #64]	; 0x40
   12e94:	b	12d68 <__assert_fail@plt+0x1ec4>
   12e98:	mov	r5, fp
   12e9c:	ldr	fp, [sp, #24]
   12ea0:	mov	r6, #48	; 0x30
   12ea4:	b	128b4 <__assert_fail@plt+0x1a10>
   12ea8:	mov	r5, #0
   12eac:	b	128b4 <__assert_fail@plt+0x1a10>
   12eb0:	mov	r6, r1
   12eb4:	b	12ae0 <__assert_fail@plt+0x1c3c>
   12eb8:	mov	r6, r1
   12ebc:	b	12ad0 <__assert_fail@plt+0x1c2c>
   12ec0:	ldr	r2, [sp, #28]
   12ec4:	ldr	r3, [sp, #40]	; 0x28
   12ec8:	subs	r3, r3, r2
   12ecc:	movne	r3, #1
   12ed0:	b	12338 <__assert_fail@plt+0x1494>
   12ed4:	ldr	r3, [sp, #60]	; 0x3c
   12ed8:	mov	sl, #2
   12edc:	ldr	r7, [sp, #72]	; 0x48
   12ee0:	adds	r6, r3, #0
   12ee4:	mov	r5, r3
   12ee8:	movne	r6, #1
   12eec:	cmp	r9, #0
   12ef0:	movne	r6, #0
   12ef4:	cmp	r6, #0
   12ef8:	bne	122c8 <__assert_fail@plt+0x1424>
   12efc:	ldr	r3, [sp, #68]	; 0x44
   12f00:	ldr	r2, [sp, #44]	; 0x2c
   12f04:	cmp	r2, #0
   12f08:	moveq	r3, #0
   12f0c:	andne	r3, r3, #1
   12f10:	cmp	r3, #0
   12f14:	movne	r3, r2
   12f18:	subne	r3, r3, #1
   12f1c:	bne	12f4c <__assert_fail@plt+0x20a8>
   12f20:	cmp	r9, r4
   12f24:	movhi	r3, #0
   12f28:	strbhi	r3, [r8, r4]
   12f2c:	mov	r0, r4
   12f30:	add	sp, sp, #108	; 0x6c
   12f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f38:	mov	r3, r7
   12f3c:	b	12f00 <__assert_fail@plt+0x205c>
   12f40:	cmp	r9, r4
   12f44:	strbhi	r2, [r8, r4]
   12f48:	add	r4, r4, #1
   12f4c:	ldrb	r2, [r3, #1]!
   12f50:	cmp	r2, #0
   12f54:	bne	12f40 <__assert_fail@plt+0x209c>
   12f58:	b	12f20 <__assert_fail@plt+0x207c>
   12f5c:	andeq	r4, r1, r0, asr #18
   12f60:	andeq	r4, r1, r3, asr r9
   12f64:	andeq	r4, r1, r1, asr r9
   12f68:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	sub	sp, sp, #52	; 0x34
   12f74:	mov	r6, r0
   12f78:	mov	r5, r3
   12f7c:	mov	r8, r1
   12f80:	mov	r9, r2
   12f84:	bl	10de4 <__errno_location@plt>
   12f88:	ldr	r3, [r0]
   12f8c:	cmn	r6, #-2147483647	; 0x80000001
   12f90:	str	r0, [sp, #24]
   12f94:	ldr	r7, [pc, #368]	; 1310c <__assert_fail@plt+0x2268>
   12f98:	str	r3, [sp, #32]
   12f9c:	movne	r3, #0
   12fa0:	moveq	r3, #1
   12fa4:	orrs	r3, r3, r6, lsr #31
   12fa8:	ldr	r4, [r7]
   12fac:	beq	12fb4 <__assert_fail@plt+0x2110>
   12fb0:	bl	10e8c <abort@plt>
   12fb4:	ldr	r2, [r7, #4]
   12fb8:	cmp	r2, r6
   12fbc:	bgt	1302c <__assert_fail@plt+0x2188>
   12fc0:	add	sl, r7, #8
   12fc4:	mov	r3, #8
   12fc8:	cmp	r4, sl
   12fcc:	add	r1, sp, #44	; 0x2c
   12fd0:	str	r2, [sp, #44]	; 0x2c
   12fd4:	sub	r2, r6, r2
   12fd8:	movne	r0, r4
   12fdc:	moveq	r0, #0
   12fe0:	add	r2, r2, #1
   12fe4:	str	r3, [sp]
   12fe8:	mvn	r3, #-2147483648	; 0x80000000
   12fec:	bl	13f3c <__assert_fail@plt+0x3098>
   12ff0:	cmp	r4, sl
   12ff4:	mov	fp, r0
   12ff8:	str	r0, [r7]
   12ffc:	ldmeq	r4, {r0, r1}
   13000:	mov	r4, fp
   13004:	ldr	r2, [sp, #44]	; 0x2c
   13008:	stmeq	fp, {r0, r1}
   1300c:	mov	r1, #0
   13010:	ldr	r0, [r7, #4]
   13014:	sub	r2, r2, r0
   13018:	add	r0, fp, r0, lsl #3
   1301c:	lsl	r2, r2, #3
   13020:	bl	10dfc <memset@plt>
   13024:	ldr	r3, [sp, #44]	; 0x2c
   13028:	str	r3, [r7, #4]
   1302c:	ldr	r3, [r5, #4]
   13030:	add	sl, r4, r6, lsl #3
   13034:	mov	r2, r8
   13038:	ldr	fp, [r4, r6, lsl #3]
   1303c:	ldr	r7, [sl, #4]
   13040:	orr	r3, r3, #1
   13044:	str	r3, [sp, #28]
   13048:	add	r3, r5, #8
   1304c:	mov	r1, fp
   13050:	str	r3, [sp, #36]	; 0x24
   13054:	mov	r0, r7
   13058:	ldr	r3, [r5, #44]	; 0x2c
   1305c:	str	r3, [sp, #16]
   13060:	ldr	r3, [r5, #40]	; 0x28
   13064:	str	r3, [sp, #12]
   13068:	add	r3, r5, #8
   1306c:	str	r3, [sp, #8]
   13070:	ldr	r3, [sp, #28]
   13074:	str	r3, [sp, #4]
   13078:	ldr	r3, [r5]
   1307c:	str	r3, [sp]
   13080:	mov	r3, r9
   13084:	bl	1227c <__assert_fail@plt+0x13d8>
   13088:	cmp	fp, r0
   1308c:	bhi	130f4 <__assert_fail@plt+0x2250>
   13090:	ldr	r3, [pc, #120]	; 13110 <__assert_fail@plt+0x226c>
   13094:	add	fp, r0, #1
   13098:	str	fp, [r4, r6, lsl #3]
   1309c:	cmp	r7, r3
   130a0:	beq	130ac <__assert_fail@plt+0x2208>
   130a4:	mov	r0, r7
   130a8:	bl	11c84 <__assert_fail@plt+0xde0>
   130ac:	mov	r0, fp
   130b0:	bl	13e2c <__assert_fail@plt+0x2f88>
   130b4:	ldr	r3, [r5, #44]	; 0x2c
   130b8:	mov	r2, r8
   130bc:	mov	r1, fp
   130c0:	str	r0, [sl, #4]
   130c4:	mov	r7, r0
   130c8:	str	r3, [sp, #16]
   130cc:	ldr	r3, [r5, #40]	; 0x28
   130d0:	str	r3, [sp, #12]
   130d4:	add	r3, r5, #8
   130d8:	str	r3, [sp, #8]
   130dc:	ldr	r3, [sp, #28]
   130e0:	str	r3, [sp, #4]
   130e4:	ldr	r3, [r5]
   130e8:	str	r3, [sp]
   130ec:	mov	r3, r9
   130f0:	bl	1227c <__assert_fail@plt+0x13d8>
   130f4:	ldr	r3, [sp, #24]
   130f8:	mov	r0, r7
   130fc:	ldr	r2, [sp, #32]
   13100:	str	r2, [r3]
   13104:	add	sp, sp, #52	; 0x34
   13108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1310c:	andeq	r5, r2, ip, ror #1
   13110:	andeq	r5, r2, r4, ror r1
   13114:	push	{r4, r5, r6, lr}
   13118:	mov	r5, r0
   1311c:	bl	10de4 <__errno_location@plt>
   13120:	mov	r4, r0
   13124:	cmp	r5, #0
   13128:	ldr	r0, [pc, #20]	; 13144 <__assert_fail@plt+0x22a0>
   1312c:	mov	r1, #48	; 0x30
   13130:	movne	r0, r5
   13134:	ldr	r6, [r4]
   13138:	bl	1402c <__assert_fail@plt+0x3188>
   1313c:	str	r6, [r4]
   13140:	pop	{r4, r5, r6, pc}
   13144:	andeq	r5, r2, r4, ror r2
   13148:	ldr	r3, [pc, #12]	; 1315c <__assert_fail@plt+0x22b8>
   1314c:	cmp	r0, #0
   13150:	moveq	r0, r3
   13154:	ldr	r0, [r0]
   13158:	bx	lr
   1315c:	andeq	r5, r2, r4, ror r2
   13160:	ldr	r3, [pc, #12]	; 13174 <__assert_fail@plt+0x22d0>
   13164:	cmp	r0, #0
   13168:	moveq	r0, r3
   1316c:	str	r1, [r0]
   13170:	bx	lr
   13174:	andeq	r5, r2, r4, ror r2
   13178:	ldr	r3, [pc, #52]	; 131b4 <__assert_fail@plt+0x2310>
   1317c:	cmp	r0, #0
   13180:	push	{lr}		; (str lr, [sp, #-4]!)
   13184:	lsr	lr, r1, #5
   13188:	and	r1, r1, #31
   1318c:	moveq	r0, r3
   13190:	add	r3, r0, #8
   13194:	ldr	ip, [r3, lr, lsl #2]
   13198:	lsr	r0, ip, r1
   1319c:	eor	r2, r2, r0
   131a0:	and	r0, r0, #1
   131a4:	and	r2, r2, #1
   131a8:	eor	r1, ip, r2, lsl r1
   131ac:	str	r1, [r3, lr, lsl #2]
   131b0:	pop	{pc}		; (ldr pc, [sp], #4)
   131b4:	andeq	r5, r2, r4, ror r2
   131b8:	ldr	r3, [pc, #16]	; 131d0 <__assert_fail@plt+0x232c>
   131bc:	cmp	r0, #0
   131c0:	movne	r3, r0
   131c4:	ldr	r0, [r3, #4]
   131c8:	str	r1, [r3, #4]
   131cc:	bx	lr
   131d0:	andeq	r5, r2, r4, ror r2
   131d4:	ldr	r3, [pc, #44]	; 13208 <__assert_fail@plt+0x2364>
   131d8:	cmp	r0, #0
   131dc:	moveq	r0, r3
   131e0:	mov	r3, #10
   131e4:	cmp	r2, #0
   131e8:	cmpne	r1, #0
   131ec:	str	r3, [r0]
   131f0:	bne	131fc <__assert_fail@plt+0x2358>
   131f4:	push	{r4, lr}
   131f8:	bl	10e8c <abort@plt>
   131fc:	str	r1, [r0, #40]	; 0x28
   13200:	str	r2, [r0, #44]	; 0x2c
   13204:	bx	lr
   13208:	andeq	r5, r2, r4, ror r2
   1320c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13210:	sub	sp, sp, #24
   13214:	mov	sl, r3
   13218:	mov	r7, r0
   1321c:	mov	r8, r1
   13220:	mov	r9, r2
   13224:	ldr	r4, [sp, #56]	; 0x38
   13228:	ldr	r3, [pc, #88]	; 13288 <__assert_fail@plt+0x23e4>
   1322c:	cmp	r4, #0
   13230:	moveq	r4, r3
   13234:	bl	10de4 <__errno_location@plt>
   13238:	ldr	r3, [r4, #44]	; 0x2c
   1323c:	mov	r5, r0
   13240:	mov	r2, r9
   13244:	mov	r1, r8
   13248:	mov	r0, r7
   1324c:	ldr	r6, [r5]
   13250:	str	r3, [sp, #16]
   13254:	ldr	r3, [r4, #40]	; 0x28
   13258:	str	r3, [sp, #12]
   1325c:	add	r3, r4, #8
   13260:	str	r3, [sp, #8]
   13264:	ldr	r3, [r4, #4]
   13268:	str	r3, [sp, #4]
   1326c:	ldr	r3, [r4]
   13270:	str	r3, [sp]
   13274:	mov	r3, sl
   13278:	bl	1227c <__assert_fail@plt+0x13d8>
   1327c:	str	r6, [r5]
   13280:	add	sp, sp, #24
   13284:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13288:	andeq	r5, r2, r4, ror r2
   1328c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13290:	cmp	r3, #0
   13294:	sub	sp, sp, #44	; 0x2c
   13298:	mov	r6, r2
   1329c:	mov	sl, r1
   132a0:	mov	r9, r0
   132a4:	ldr	r4, [pc, #176]	; 1335c <__assert_fail@plt+0x24b8>
   132a8:	movne	r4, r3
   132ac:	bl	10de4 <__errno_location@plt>
   132b0:	ldr	r3, [r0]
   132b4:	mov	r1, #0
   132b8:	mov	r2, r9
   132bc:	mov	r8, r0
   132c0:	mov	r0, r1
   132c4:	ldr	r5, [r4, #4]
   132c8:	add	fp, r4, #8
   132cc:	str	r3, [sp, #28]
   132d0:	ldr	r3, [r4, #44]	; 0x2c
   132d4:	cmp	r6, #0
   132d8:	orreq	r5, r5, #1
   132dc:	str	r3, [sp, #16]
   132e0:	ldr	r3, [r4, #40]	; 0x28
   132e4:	stmib	sp, {r5, fp}
   132e8:	str	r3, [sp, #12]
   132ec:	ldr	r3, [r4]
   132f0:	str	r3, [sp]
   132f4:	mov	r3, sl
   132f8:	bl	1227c <__assert_fail@plt+0x13d8>
   132fc:	add	r1, r0, #1
   13300:	mov	r7, r0
   13304:	mov	r0, r1
   13308:	str	r1, [sp, #36]	; 0x24
   1330c:	bl	13e2c <__assert_fail@plt+0x2f88>
   13310:	ldr	r3, [r4, #44]	; 0x2c
   13314:	mov	r2, r9
   13318:	ldr	r1, [sp, #36]	; 0x24
   1331c:	str	r3, [sp, #16]
   13320:	ldr	r3, [r4, #40]	; 0x28
   13324:	stmib	sp, {r5, fp}
   13328:	str	r0, [sp, #32]
   1332c:	str	r3, [sp, #12]
   13330:	ldr	r3, [r4]
   13334:	str	r3, [sp]
   13338:	mov	r3, sl
   1333c:	bl	1227c <__assert_fail@plt+0x13d8>
   13340:	ldr	r3, [sp, #28]
   13344:	cmp	r6, #0
   13348:	ldr	r0, [sp, #32]
   1334c:	str	r3, [r8]
   13350:	strne	r7, [r6]
   13354:	add	sp, sp, #44	; 0x2c
   13358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1335c:	andeq	r5, r2, r4, ror r2
   13360:	mov	r3, r2
   13364:	mov	r2, #0
   13368:	b	1328c <__assert_fail@plt+0x23e8>
   1336c:	push	{r4, r5, r6, r7, r8, lr}
   13370:	mov	r6, #1
   13374:	ldr	r4, [pc, #100]	; 133e0 <__assert_fail@plt+0x253c>
   13378:	ldr	r5, [r4]
   1337c:	add	r7, r5, #4
   13380:	ldr	r3, [r4, #4]
   13384:	cmp	r3, r6
   13388:	bgt	133d0 <__assert_fail@plt+0x252c>
   1338c:	ldr	r6, [pc, #80]	; 133e4 <__assert_fail@plt+0x2540>
   13390:	ldr	r0, [r5, #4]
   13394:	cmp	r0, r6
   13398:	beq	133ac <__assert_fail@plt+0x2508>
   1339c:	bl	11c84 <__assert_fail@plt+0xde0>
   133a0:	mov	r3, #256	; 0x100
   133a4:	str	r3, [r4, #8]
   133a8:	str	r6, [r4, #12]
   133ac:	ldr	r6, [pc, #52]	; 133e8 <__assert_fail@plt+0x2544>
   133b0:	cmp	r5, r6
   133b4:	beq	133c4 <__assert_fail@plt+0x2520>
   133b8:	mov	r0, r5
   133bc:	bl	11c84 <__assert_fail@plt+0xde0>
   133c0:	str	r6, [r4]
   133c4:	mov	r3, #1
   133c8:	str	r3, [r4, #4]
   133cc:	pop	{r4, r5, r6, r7, r8, pc}
   133d0:	ldr	r0, [r7, r6, lsl #3]
   133d4:	add	r6, r6, #1
   133d8:	bl	11c84 <__assert_fail@plt+0xde0>
   133dc:	b	13380 <__assert_fail@plt+0x24dc>
   133e0:	andeq	r5, r2, ip, ror #1
   133e4:	andeq	r5, r2, r4, ror r1
   133e8:	strdeq	r5, [r2], -r4
   133ec:	ldr	r3, [pc, #4]	; 133f8 <__assert_fail@plt+0x2554>
   133f0:	mvn	r2, #0
   133f4:	b	12f6c <__assert_fail@plt+0x20c8>
   133f8:	andeq	r5, r2, r4, ror r2
   133fc:	ldr	r3, [pc]	; 13404 <__assert_fail@plt+0x2560>
   13400:	b	12f6c <__assert_fail@plt+0x20c8>
   13404:	andeq	r5, r2, r4, ror r2
   13408:	mov	r1, r0
   1340c:	mov	r0, #0
   13410:	b	133ec <__assert_fail@plt+0x2548>
   13414:	mov	r2, r1
   13418:	mov	r1, r0
   1341c:	mov	r0, #0
   13420:	b	133fc <__assert_fail@plt+0x2558>
   13424:	push	{r4, r5, lr}
   13428:	sub	sp, sp, #52	; 0x34
   1342c:	mov	r5, r2
   13430:	mov	r4, r0
   13434:	mov	r0, sp
   13438:	bl	12120 <__assert_fail@plt+0x127c>
   1343c:	mov	r3, sp
   13440:	mvn	r2, #0
   13444:	mov	r1, r5
   13448:	mov	r0, r4
   1344c:	bl	12f6c <__assert_fail@plt+0x20c8>
   13450:	add	sp, sp, #52	; 0x34
   13454:	pop	{r4, r5, pc}
   13458:	push	{r4, r5, r6, lr}
   1345c:	sub	sp, sp, #48	; 0x30
   13460:	mov	r5, r2
   13464:	mov	r6, r3
   13468:	mov	r4, r0
   1346c:	mov	r0, sp
   13470:	bl	12120 <__assert_fail@plt+0x127c>
   13474:	mov	r3, sp
   13478:	mov	r2, r6
   1347c:	mov	r1, r5
   13480:	mov	r0, r4
   13484:	bl	12f6c <__assert_fail@plt+0x20c8>
   13488:	add	sp, sp, #48	; 0x30
   1348c:	pop	{r4, r5, r6, pc}
   13490:	mov	r2, r1
   13494:	mov	r1, r0
   13498:	mov	r0, #0
   1349c:	b	13424 <__assert_fail@plt+0x2580>
   134a0:	mov	r3, r2
   134a4:	mov	r2, r1
   134a8:	mov	r1, r0
   134ac:	mov	r0, #0
   134b0:	b	13458 <__assert_fail@plt+0x25b4>
   134b4:	push	{r4, r5, r6, lr}
   134b8:	mov	r4, r0
   134bc:	mov	r5, r1
   134c0:	mov	r6, r2
   134c4:	sub	sp, sp, #48	; 0x30
   134c8:	mov	ip, sp
   134cc:	ldr	lr, [pc, #64]	; 13514 <__assert_fail@plt+0x2670>
   134d0:	ldm	lr!, {r0, r1, r2, r3}
   134d4:	stmia	ip!, {r0, r1, r2, r3}
   134d8:	ldm	lr!, {r0, r1, r2, r3}
   134dc:	stmia	ip!, {r0, r1, r2, r3}
   134e0:	ldm	lr, {r0, r1, r2, r3}
   134e4:	stm	ip, {r0, r1, r2, r3}
   134e8:	mov	r1, r6
   134ec:	mov	r2, #1
   134f0:	mov	r0, sp
   134f4:	bl	13178 <__assert_fail@plt+0x22d4>
   134f8:	mov	r3, sp
   134fc:	mov	r2, r5
   13500:	mov	r1, r4
   13504:	mov	r0, #0
   13508:	bl	12f6c <__assert_fail@plt+0x20c8>
   1350c:	add	sp, sp, #48	; 0x30
   13510:	pop	{r4, r5, r6, pc}
   13514:	andeq	r5, r2, r4, ror r2
   13518:	mov	r2, r1
   1351c:	mvn	r1, #0
   13520:	b	134b4 <__assert_fail@plt+0x2610>
   13524:	mov	r1, #58	; 0x3a
   13528:	b	13518 <__assert_fail@plt+0x2674>
   1352c:	mov	r2, #58	; 0x3a
   13530:	b	134b4 <__assert_fail@plt+0x2610>
   13534:	push	{r4, r5, lr}
   13538:	sub	sp, sp, #100	; 0x64
   1353c:	mov	r4, r0
   13540:	mov	r0, sp
   13544:	mov	r5, r2
   13548:	bl	12120 <__assert_fail@plt+0x127c>
   1354c:	mov	ip, sp
   13550:	add	lr, sp, #48	; 0x30
   13554:	ldm	ip!, {r0, r1, r2, r3}
   13558:	stmia	lr!, {r0, r1, r2, r3}
   1355c:	ldm	ip!, {r0, r1, r2, r3}
   13560:	stmia	lr!, {r0, r1, r2, r3}
   13564:	ldm	ip, {r0, r1, r2, r3}
   13568:	stm	lr, {r0, r1, r2, r3}
   1356c:	mov	r2, #1
   13570:	mov	r1, #58	; 0x3a
   13574:	add	r0, sp, #48	; 0x30
   13578:	bl	13178 <__assert_fail@plt+0x22d4>
   1357c:	add	r3, sp, #48	; 0x30
   13580:	mvn	r2, #0
   13584:	mov	r1, r5
   13588:	mov	r0, r4
   1358c:	bl	12f6c <__assert_fail@plt+0x20c8>
   13590:	add	sp, sp, #100	; 0x64
   13594:	pop	{r4, r5, pc}
   13598:	push	{r4, r5, r6, r7, lr}
   1359c:	mov	r4, r0
   135a0:	mov	r6, r1
   135a4:	mov	r7, r2
   135a8:	mov	r5, r3
   135ac:	sub	sp, sp, #52	; 0x34
   135b0:	ldr	lr, [pc, #68]	; 135fc <__assert_fail@plt+0x2758>
   135b4:	mov	ip, sp
   135b8:	ldm	lr!, {r0, r1, r2, r3}
   135bc:	stmia	ip!, {r0, r1, r2, r3}
   135c0:	ldm	lr!, {r0, r1, r2, r3}
   135c4:	stmia	ip!, {r0, r1, r2, r3}
   135c8:	ldm	lr, {r0, r1, r2, r3}
   135cc:	stm	ip, {r0, r1, r2, r3}
   135d0:	mov	r2, r7
   135d4:	mov	r1, r6
   135d8:	mov	r0, sp
   135dc:	bl	131d4 <__assert_fail@plt+0x2330>
   135e0:	ldr	r2, [sp, #72]	; 0x48
   135e4:	mov	r3, sp
   135e8:	mov	r1, r5
   135ec:	mov	r0, r4
   135f0:	bl	12f6c <__assert_fail@plt+0x20c8>
   135f4:	add	sp, sp, #52	; 0x34
   135f8:	pop	{r4, r5, r6, r7, pc}
   135fc:	andeq	r5, r2, r4, ror r2
   13600:	mvn	ip, #0
   13604:	push	{r0, r1, r2, lr}
   13608:	str	ip, [sp]
   1360c:	bl	13598 <__assert_fail@plt+0x26f4>
   13610:	add	sp, sp, #12
   13614:	pop	{pc}		; (ldr pc, [sp], #4)
   13618:	mov	r3, r2
   1361c:	mov	r2, r1
   13620:	mov	r1, r0
   13624:	mov	r0, #0
   13628:	b	13600 <__assert_fail@plt+0x275c>
   1362c:	push	{r0, r1, r2, lr}
   13630:	str	r3, [sp]
   13634:	mov	r3, r2
   13638:	mov	r2, r1
   1363c:	mov	r1, r0
   13640:	mov	r0, #0
   13644:	bl	13598 <__assert_fail@plt+0x26f4>
   13648:	add	sp, sp, #12
   1364c:	pop	{pc}		; (ldr pc, [sp], #4)
   13650:	ldr	r3, [pc]	; 13658 <__assert_fail@plt+0x27b4>
   13654:	b	12f6c <__assert_fail@plt+0x20c8>
   13658:	strdeq	r5, [r2], -ip
   1365c:	mov	r2, r1
   13660:	mov	r1, r0
   13664:	mov	r0, #0
   13668:	b	13650 <__assert_fail@plt+0x27ac>
   1366c:	mvn	r2, #0
   13670:	b	13650 <__assert_fail@plt+0x27ac>
   13674:	mov	r1, r0
   13678:	mov	r0, #0
   1367c:	b	1366c <__assert_fail@plt+0x27c8>
   13680:	mov	r3, #0
   13684:	str	r3, [r0]
   13688:	str	r3, [r0, #4]
   1368c:	bx	lr
   13690:	push	{r4, r5, r6, r7, r8, r9, lr}
   13694:	sub	sp, sp, #52	; 0x34
   13698:	mov	r4, r1
   1369c:	add	r7, sp, #16
   136a0:	mov	r5, r2
   136a4:	mov	r1, #0
   136a8:	mov	r8, r0
   136ac:	mov	r2, #32
   136b0:	mov	r0, r7
   136b4:	mov	r6, r3
   136b8:	add	r5, r4, r5
   136bc:	bl	10dfc <memset@plt>
   136c0:	mov	r1, r4
   136c4:	mov	ip, #1
   136c8:	cmp	r5, r1
   136cc:	bne	13774 <__assert_fail@plt+0x28d0>
   136d0:	mov	r0, r8
   136d4:	bl	10cd0 <getc_unlocked@plt>
   136d8:	cmp	r0, #0
   136dc:	mov	r4, r0
   136e0:	blt	13704 <__assert_fail@plt+0x2860>
   136e4:	lsr	r2, r0, #5
   136e8:	add	r3, sp, #48	; 0x30
   136ec:	add	r2, r3, r2, lsl #2
   136f0:	and	r3, r0, #31
   136f4:	ldr	r2, [r2, #-32]	; 0xffffffe0
   136f8:	lsr	r3, r2, r3
   136fc:	tst	r3, #1
   13700:	bne	136d0 <__assert_fail@plt+0x282c>
   13704:	ldm	r6, {r3, r7}
   13708:	mov	r5, #0
   1370c:	mov	r9, #1
   13710:	str	r3, [sp, #12]
   13714:	clz	r3, r5
   13718:	lsr	r3, r3, #5
   1371c:	ands	r3, r3, r4, lsr #31
   13720:	bne	137c8 <__assert_fail@plt+0x2924>
   13724:	ldr	r3, [sp, #12]
   13728:	cmp	r3, r5
   1372c:	bne	1374c <__assert_fail@plt+0x28a8>
   13730:	mov	r0, r7
   13734:	mvn	r3, #0
   13738:	str	r9, [sp]
   1373c:	mov	r2, #1
   13740:	add	r1, sp, #12
   13744:	bl	13f3c <__assert_fail@plt+0x3098>
   13748:	mov	r7, r0
   1374c:	cmp	r4, #0
   13750:	mov	r0, r5
   13754:	add	r3, r7, r5
   13758:	bge	13790 <__assert_fail@plt+0x28ec>
   1375c:	mov	r2, #0
   13760:	strb	r2, [r3]
   13764:	ldr	r3, [sp, #12]
   13768:	stm	r6, {r3, r7}
   1376c:	add	sp, sp, #52	; 0x34
   13770:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13774:	ldrb	r3, [r1], #1
   13778:	lsr	r0, r3, #5
   1377c:	and	r3, r3, #31
   13780:	ldr	r2, [r7, r0, lsl #2]
   13784:	orr	r3, r2, ip, lsl r3
   13788:	str	r3, [r7, r0, lsl #2]
   1378c:	b	136c8 <__assert_fail@plt+0x2824>
   13790:	lsr	r1, r4, #5
   13794:	add	r2, sp, #48	; 0x30
   13798:	add	r1, r2, r1, lsl #2
   1379c:	and	r2, r4, #31
   137a0:	ldr	r1, [r1, #-32]	; 0xffffffe0
   137a4:	lsr	r2, r1, r2
   137a8:	tst	r2, #1
   137ac:	bne	1375c <__assert_fail@plt+0x28b8>
   137b0:	mov	r0, r8
   137b4:	strb	r4, [r3]
   137b8:	add	r5, r5, #1
   137bc:	bl	10cd0 <getc_unlocked@plt>
   137c0:	mov	r4, r0
   137c4:	b	13714 <__assert_fail@plt+0x2870>
   137c8:	mvn	r0, #0
   137cc:	b	1376c <__assert_fail@plt+0x28c8>
   137d0:	cmp	r1, #0
   137d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137d8:	mov	r8, r0
   137dc:	sub	sp, sp, #36	; 0x24
   137e0:	addne	r0, r1, #1
   137e4:	moveq	r0, #64	; 0x40
   137e8:	mov	r1, #4
   137ec:	mov	r9, r2
   137f0:	mov	sl, r3
   137f4:	str	r0, [sp, #20]
   137f8:	mov	r4, #0
   137fc:	mov	fp, #4
   13800:	bl	13ec4 <__assert_fail@plt+0x3020>
   13804:	mov	r6, r0
   13808:	mov	r1, #4
   1380c:	ldr	r0, [sp, #20]
   13810:	bl	13ec4 <__assert_fail@plt+0x3020>
   13814:	mov	r5, r0
   13818:	str	r4, [sp, #24]
   1381c:	str	r4, [sp, #28]
   13820:	add	r3, sp, #24
   13824:	mov	r2, sl
   13828:	mov	r1, r9
   1382c:	mov	r0, r8
   13830:	bl	13690 <__assert_fail@plt+0x27ec>
   13834:	ldr	r3, [sp, #20]
   13838:	mov	r7, r0
   1383c:	cmp	r3, r4
   13840:	bgt	13874 <__assert_fail@plt+0x29d0>
   13844:	mvn	r3, #0
   13848:	mov	r2, #1
   1384c:	str	fp, [sp]
   13850:	add	r1, sp, #20
   13854:	mov	r0, r6
   13858:	bl	13f3c <__assert_fail@plt+0x3098>
   1385c:	mov	r6, r0
   13860:	mov	r2, #4
   13864:	ldr	r1, [sp, #20]
   13868:	mov	r0, r5
   1386c:	bl	13e78 <__assert_fail@plt+0x2fd4>
   13870:	mov	r5, r0
   13874:	lsl	r3, r4, #2
   13878:	cmn	r7, #1
   1387c:	add	r1, r5, r3
   13880:	add	r3, r6, r3
   13884:	bne	138cc <__assert_fail@plt+0x2a28>
   13888:	mov	r2, #0
   1388c:	str	r2, [r3]
   13890:	str	r2, [r1]
   13894:	ldr	r0, [sp, #28]
   13898:	bl	11c84 <__assert_fail@plt+0xde0>
   1389c:	ldr	r3, [sp, #72]	; 0x48
   138a0:	str	r6, [r3]
   138a4:	ldr	r3, [sp, #76]	; 0x4c
   138a8:	cmp	r3, #0
   138ac:	ldrne	r3, [sp, #76]	; 0x4c
   138b0:	strne	r5, [r3]
   138b4:	bne	138c0 <__assert_fail@plt+0x2a1c>
   138b8:	mov	r0, r5
   138bc:	bl	11c84 <__assert_fail@plt+0xde0>
   138c0:	mov	r0, r4
   138c4:	add	sp, sp, #36	; 0x24
   138c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138cc:	add	r2, r7, #1
   138d0:	mov	r1, #1
   138d4:	mov	r0, r2
   138d8:	str	r2, [sp, #12]
   138dc:	bl	13ec4 <__assert_fail@plt+0x3020>
   138e0:	str	r7, [r5, r4, lsl #2]
   138e4:	ldr	r2, [sp, #12]
   138e8:	ldr	r1, [sp, #28]
   138ec:	bl	10ca0 <memcpy@plt>
   138f0:	str	r0, [r6, r4, lsl #2]
   138f4:	add	r4, r4, #1
   138f8:	b	13820 <__assert_fail@plt+0x297c>
   138fc:	push	{r4, r5, r6, lr}
   13900:	cmp	r1, #0
   13904:	sub	sp, sp, #32
   13908:	mov	r5, r0
   1390c:	ldr	r4, [sp, #48]	; 0x30
   13910:	ldr	r6, [sp, #52]	; 0x34
   13914:	beq	139c8 <__assert_fail@plt+0x2b24>
   13918:	strd	r2, [sp]
   1391c:	mov	r3, r1
   13920:	mov	r1, #1
   13924:	ldr	r2, [pc, #856]	; 13c84 <__assert_fail@plt+0x2de0>
   13928:	bl	10e20 <__fprintf_chk@plt>
   1392c:	mov	r2, #5
   13930:	ldr	r1, [pc, #848]	; 13c88 <__assert_fail@plt+0x2de4>
   13934:	mov	r0, #0
   13938:	bl	10cdc <dcgettext@plt>
   1393c:	movw	r3, #2022	; 0x7e6
   13940:	ldr	r2, [pc, #836]	; 13c8c <__assert_fail@plt+0x2de8>
   13944:	mov	r1, #1
   13948:	str	r3, [sp]
   1394c:	mov	r3, r0
   13950:	mov	r0, r5
   13954:	bl	10e20 <__fprintf_chk@plt>
   13958:	mov	r1, r5
   1395c:	mov	r0, #10
   13960:	bl	10cc4 <fputc_unlocked@plt>
   13964:	mov	r2, #5
   13968:	ldr	r1, [pc, #800]	; 13c90 <__assert_fail@plt+0x2dec>
   1396c:	mov	r0, #0
   13970:	bl	10cdc <dcgettext@plt>
   13974:	mov	r2, r0
   13978:	mov	r1, #1
   1397c:	ldr	r3, [pc, #784]	; 13c94 <__assert_fail@plt+0x2df0>
   13980:	mov	r0, r5
   13984:	bl	10e20 <__fprintf_chk@plt>
   13988:	mov	r1, r5
   1398c:	mov	r0, #10
   13990:	bl	10cc4 <fputc_unlocked@plt>
   13994:	cmp	r6, #9
   13998:	ldrls	pc, [pc, r6, lsl #2]
   1399c:	b	13c78 <__assert_fail@plt+0x2dd4>
   139a0:			; <UNDEFINED> instruction: 0x00013ab8
   139a4:	andeq	r3, r1, r0, ror #19
   139a8:	andeq	r3, r1, ip, lsl #20
   139ac:	andeq	r3, r1, r0, asr #20
   139b0:	andeq	r3, r1, ip, ror sl
   139b4:	andeq	r3, r1, r0, asr #21
   139b8:	andeq	r3, r1, r8, lsl #22
   139bc:	andeq	r3, r1, r8, asr fp
   139c0:			; <UNDEFINED> instruction: 0x00013bb0
   139c4:	andeq	r3, r1, r0, lsl ip
   139c8:	mov	r1, #1
   139cc:	str	r3, [sp]
   139d0:	mov	r3, r2
   139d4:	ldr	r2, [pc, #700]	; 13c98 <__assert_fail@plt+0x2df4>
   139d8:	bl	10e20 <__fprintf_chk@plt>
   139dc:	b	1392c <__assert_fail@plt+0x2a88>
   139e0:	mov	r2, #5
   139e4:	ldr	r1, [pc, #688]	; 13c9c <__assert_fail@plt+0x2df8>
   139e8:	mov	r0, #0
   139ec:	bl	10cdc <dcgettext@plt>
   139f0:	ldr	r3, [r4]
   139f4:	mov	r2, r0
   139f8:	mov	r1, #1
   139fc:	mov	r0, r5
   13a00:	add	sp, sp, #32
   13a04:	pop	{r4, r5, r6, lr}
   13a08:	b	10e20 <__fprintf_chk@plt>
   13a0c:	mov	r2, #5
   13a10:	ldr	r1, [pc, #648]	; 13ca0 <__assert_fail@plt+0x2dfc>
   13a14:	mov	r0, #0
   13a18:	bl	10cdc <dcgettext@plt>
   13a1c:	ldr	r3, [r4, #4]
   13a20:	mov	r2, r0
   13a24:	mov	r1, #1
   13a28:	mov	r0, r5
   13a2c:	str	r3, [sp, #48]	; 0x30
   13a30:	ldr	r3, [r4]
   13a34:	add	sp, sp, #32
   13a38:	pop	{r4, r5, r6, lr}
   13a3c:	b	10e20 <__fprintf_chk@plt>
   13a40:	mov	r2, #5
   13a44:	ldr	r1, [pc, #600]	; 13ca4 <__assert_fail@plt+0x2e00>
   13a48:	mov	r0, #0
   13a4c:	bl	10cdc <dcgettext@plt>
   13a50:	ldr	r3, [r4, #8]
   13a54:	mov	r2, r0
   13a58:	mov	r1, #1
   13a5c:	mov	r0, r5
   13a60:	str	r3, [sp, #52]	; 0x34
   13a64:	ldr	r3, [r4, #4]
   13a68:	str	r3, [sp, #48]	; 0x30
   13a6c:	ldr	r3, [r4]
   13a70:	add	sp, sp, #32
   13a74:	pop	{r4, r5, r6, lr}
   13a78:	b	10e20 <__fprintf_chk@plt>
   13a7c:	mov	r2, #5
   13a80:	ldr	r1, [pc, #544]	; 13ca8 <__assert_fail@plt+0x2e04>
   13a84:	mov	r0, #0
   13a88:	bl	10cdc <dcgettext@plt>
   13a8c:	ldr	r3, [r4, #12]
   13a90:	mov	r2, r0
   13a94:	mov	r1, #1
   13a98:	mov	r0, r5
   13a9c:	str	r3, [sp, #8]
   13aa0:	ldr	r3, [r4, #8]
   13aa4:	str	r3, [sp, #4]
   13aa8:	ldr	r3, [r4, #4]
   13aac:	str	r3, [sp]
   13ab0:	ldr	r3, [r4]
   13ab4:	bl	10e20 <__fprintf_chk@plt>
   13ab8:	add	sp, sp, #32
   13abc:	pop	{r4, r5, r6, pc}
   13ac0:	mov	r2, #5
   13ac4:	ldr	r1, [pc, #480]	; 13cac <__assert_fail@plt+0x2e08>
   13ac8:	mov	r0, #0
   13acc:	bl	10cdc <dcgettext@plt>
   13ad0:	ldr	r3, [r4, #16]
   13ad4:	mov	r2, r0
   13ad8:	mov	r1, #1
   13adc:	mov	r0, r5
   13ae0:	str	r3, [sp, #12]
   13ae4:	ldr	r3, [r4, #12]
   13ae8:	str	r3, [sp, #8]
   13aec:	ldr	r3, [r4, #8]
   13af0:	str	r3, [sp, #4]
   13af4:	ldr	r3, [r4, #4]
   13af8:	str	r3, [sp]
   13afc:	ldr	r3, [r4]
   13b00:	bl	10e20 <__fprintf_chk@plt>
   13b04:	b	13ab8 <__assert_fail@plt+0x2c14>
   13b08:	mov	r2, #5
   13b0c:	ldr	r1, [pc, #412]	; 13cb0 <__assert_fail@plt+0x2e0c>
   13b10:	mov	r0, #0
   13b14:	bl	10cdc <dcgettext@plt>
   13b18:	ldr	r3, [r4, #20]
   13b1c:	mov	r2, r0
   13b20:	mov	r1, #1
   13b24:	mov	r0, r5
   13b28:	str	r3, [sp, #16]
   13b2c:	ldr	r3, [r4, #16]
   13b30:	str	r3, [sp, #12]
   13b34:	ldr	r3, [r4, #12]
   13b38:	str	r3, [sp, #8]
   13b3c:	ldr	r3, [r4, #8]
   13b40:	str	r3, [sp, #4]
   13b44:	ldr	r3, [r4, #4]
   13b48:	str	r3, [sp]
   13b4c:	ldr	r3, [r4]
   13b50:	bl	10e20 <__fprintf_chk@plt>
   13b54:	b	13ab8 <__assert_fail@plt+0x2c14>
   13b58:	mov	r2, #5
   13b5c:	ldr	r1, [pc, #336]	; 13cb4 <__assert_fail@plt+0x2e10>
   13b60:	mov	r0, #0
   13b64:	bl	10cdc <dcgettext@plt>
   13b68:	ldr	r3, [r4, #24]
   13b6c:	mov	r2, r0
   13b70:	mov	r1, #1
   13b74:	mov	r0, r5
   13b78:	str	r3, [sp, #20]
   13b7c:	ldr	r3, [r4, #20]
   13b80:	str	r3, [sp, #16]
   13b84:	ldr	r3, [r4, #16]
   13b88:	str	r3, [sp, #12]
   13b8c:	ldr	r3, [r4, #12]
   13b90:	str	r3, [sp, #8]
   13b94:	ldr	r3, [r4, #8]
   13b98:	str	r3, [sp, #4]
   13b9c:	ldr	r3, [r4, #4]
   13ba0:	str	r3, [sp]
   13ba4:	ldr	r3, [r4]
   13ba8:	bl	10e20 <__fprintf_chk@plt>
   13bac:	b	13ab8 <__assert_fail@plt+0x2c14>
   13bb0:	mov	r2, #5
   13bb4:	ldr	r1, [pc, #252]	; 13cb8 <__assert_fail@plt+0x2e14>
   13bb8:	mov	r0, #0
   13bbc:	bl	10cdc <dcgettext@plt>
   13bc0:	ldr	r3, [r4, #28]
   13bc4:	mov	r2, r0
   13bc8:	mov	r1, #1
   13bcc:	mov	r0, r5
   13bd0:	str	r3, [sp, #24]
   13bd4:	ldr	r3, [r4, #24]
   13bd8:	str	r3, [sp, #20]
   13bdc:	ldr	r3, [r4, #20]
   13be0:	str	r3, [sp, #16]
   13be4:	ldr	r3, [r4, #16]
   13be8:	str	r3, [sp, #12]
   13bec:	ldr	r3, [r4, #12]
   13bf0:	str	r3, [sp, #8]
   13bf4:	ldr	r3, [r4, #8]
   13bf8:	str	r3, [sp, #4]
   13bfc:	ldr	r3, [r4, #4]
   13c00:	str	r3, [sp]
   13c04:	ldr	r3, [r4]
   13c08:	bl	10e20 <__fprintf_chk@plt>
   13c0c:	b	13ab8 <__assert_fail@plt+0x2c14>
   13c10:	ldr	r1, [pc, #164]	; 13cbc <__assert_fail@plt+0x2e18>
   13c14:	mov	r2, #5
   13c18:	mov	r0, #0
   13c1c:	bl	10cdc <dcgettext@plt>
   13c20:	ldr	r3, [r4, #32]
   13c24:	mov	r2, r0
   13c28:	mov	r1, #1
   13c2c:	mov	r0, r5
   13c30:	str	r3, [sp, #28]
   13c34:	ldr	r3, [r4, #28]
   13c38:	str	r3, [sp, #24]
   13c3c:	ldr	r3, [r4, #24]
   13c40:	str	r3, [sp, #20]
   13c44:	ldr	r3, [r4, #20]
   13c48:	str	r3, [sp, #16]
   13c4c:	ldr	r3, [r4, #16]
   13c50:	str	r3, [sp, #12]
   13c54:	ldr	r3, [r4, #12]
   13c58:	str	r3, [sp, #8]
   13c5c:	ldr	r3, [r4, #8]
   13c60:	str	r3, [sp, #4]
   13c64:	ldr	r3, [r4, #4]
   13c68:	str	r3, [sp]
   13c6c:	ldr	r3, [r4]
   13c70:	bl	10e20 <__fprintf_chk@plt>
   13c74:	b	13ab8 <__assert_fail@plt+0x2c14>
   13c78:	mov	r2, #5
   13c7c:	ldr	r1, [pc, #60]	; 13cc0 <__assert_fail@plt+0x2e1c>
   13c80:	b	13c18 <__assert_fail@plt+0x2d74>
   13c84:	andeq	r4, r1, r1, lsr #19
   13c88:			; <UNDEFINED> instruction: 0x000149b4
   13c8c:	andeq	r4, r1, r2, lsl #25
   13c90:			; <UNDEFINED> instruction: 0x000149b8
   13c94:	andeq	r4, r1, r3, ror #20
   13c98:	andeq	r4, r1, sp, lsr #19
   13c9c:	andeq	r4, r1, r5, lsl #21
   13ca0:	muleq	r1, r5, sl
   13ca4:	andeq	r4, r1, ip, lsr #21
   13ca8:	andeq	r4, r1, r8, asr #21
   13cac:	andeq	r4, r1, r8, ror #21
   13cb0:	andeq	r4, r1, ip, lsl #22
   13cb4:	andeq	r4, r1, r4, lsr fp
   13cb8:	andeq	r4, r1, r0, ror #22
   13cbc:	muleq	r1, r0, fp
   13cc0:	andeq	r4, r1, r4, asr #23
   13cc4:	push	{r0, r1, r4, lr}
   13cc8:	mov	ip, #0
   13ccc:	ldr	lr, [sp, #16]
   13cd0:	ldr	r4, [lr, ip, lsl #2]
   13cd4:	cmp	r4, #0
   13cd8:	bne	13cf0 <__assert_fail@plt+0x2e4c>
   13cdc:	str	lr, [sp]
   13ce0:	str	ip, [sp, #4]
   13ce4:	bl	138fc <__assert_fail@plt+0x2a58>
   13ce8:	add	sp, sp, #8
   13cec:	pop	{r4, pc}
   13cf0:	add	ip, ip, #1
   13cf4:	b	13cd0 <__assert_fail@plt+0x2e2c>
   13cf8:	push	{r4, r5, r6, lr}
   13cfc:	sub	sp, sp, #48	; 0x30
   13d00:	mov	ip, #0
   13d04:	add	lr, sp, #8
   13d08:	mov	r5, lr
   13d0c:	ldr	r6, [sp, #64]	; 0x40
   13d10:	ldr	r4, [r6, ip, lsl #2]
   13d14:	cmp	r4, #0
   13d18:	str	r4, [lr], #4
   13d1c:	beq	13d2c <__assert_fail@plt+0x2e88>
   13d20:	add	ip, ip, #1
   13d24:	cmp	ip, #10
   13d28:	bne	13d10 <__assert_fail@plt+0x2e6c>
   13d2c:	stm	sp, {r5, ip}
   13d30:	bl	138fc <__assert_fail@plt+0x2a58>
   13d34:	add	sp, sp, #48	; 0x30
   13d38:	pop	{r4, r5, r6, pc}
   13d3c:	push	{r3}		; (str r3, [sp, #-4]!)
   13d40:	push	{r0, r1, r2, r3, lr}
   13d44:	add	r3, sp, #24
   13d48:	str	r3, [sp]
   13d4c:	str	r3, [sp, #12]
   13d50:	ldr	r3, [sp, #20]
   13d54:	bl	13cf8 <__assert_fail@plt+0x2e54>
   13d58:	add	sp, sp, #16
   13d5c:	pop	{lr}		; (ldr lr, [sp], #4)
   13d60:	add	sp, sp, #4
   13d64:	bx	lr
   13d68:	ldr	r3, [pc, #116]	; 13de4 <__assert_fail@plt+0x2f40>
   13d6c:	mov	r0, #10
   13d70:	push	{r4, lr}
   13d74:	ldr	r1, [r3]
   13d78:	bl	10cc4 <fputc_unlocked@plt>
   13d7c:	mov	r2, #5
   13d80:	ldr	r1, [pc, #96]	; 13de8 <__assert_fail@plt+0x2f44>
   13d84:	mov	r0, #0
   13d88:	bl	10cdc <dcgettext@plt>
   13d8c:	mov	r1, r0
   13d90:	ldr	r2, [pc, #84]	; 13dec <__assert_fail@plt+0x2f48>
   13d94:	mov	r0, #1
   13d98:	bl	10e08 <__printf_chk@plt>
   13d9c:	mov	r2, #5
   13da0:	ldr	r1, [pc, #72]	; 13df0 <__assert_fail@plt+0x2f4c>
   13da4:	mov	r0, #0
   13da8:	bl	10cdc <dcgettext@plt>
   13dac:	mov	r1, r0
   13db0:	ldr	r3, [pc, #60]	; 13df4 <__assert_fail@plt+0x2f50>
   13db4:	mov	r0, #1
   13db8:	ldr	r2, [pc, #56]	; 13df8 <__assert_fail@plt+0x2f54>
   13dbc:	bl	10e08 <__printf_chk@plt>
   13dc0:	mov	r2, #5
   13dc4:	ldr	r1, [pc, #48]	; 13dfc <__assert_fail@plt+0x2f58>
   13dc8:	mov	r0, #0
   13dcc:	bl	10cdc <dcgettext@plt>
   13dd0:	mov	r1, r0
   13dd4:	ldr	r2, [pc, #36]	; 13e00 <__assert_fail@plt+0x2f5c>
   13dd8:	mov	r0, #1
   13ddc:	pop	{r4, lr}
   13de0:	b	10e08 <__printf_chk@plt>
   13de4:	andeq	r5, r2, ip, asr #2
   13de8:	andeq	r4, r1, r0, lsl #24
   13dec:	andeq	r4, r1, r4, lsl ip
   13df0:	andeq	r4, r1, sl, lsr #24
   13df4:	strdeq	r4, [r1], -sp
   13df8:	andeq	r4, r1, r5, lsr #12
   13dfc:	andeq	r4, r1, lr, lsr ip
   13e00:	andeq	r4, r1, r5, ror #24
   13e04:	push	{r4, lr}
   13e08:	bl	14150 <__assert_fail@plt+0x32ac>
   13e0c:	cmp	r0, #0
   13e10:	popne	{r4, pc}
   13e14:	bl	140bc <__assert_fail@plt+0x3218>
   13e18:	push	{r4, lr}
   13e1c:	bl	14150 <__assert_fail@plt+0x32ac>
   13e20:	cmp	r0, #0
   13e24:	popne	{r4, pc}
   13e28:	bl	140bc <__assert_fail@plt+0x3218>
   13e2c:	b	13e04 <__assert_fail@plt+0x2f60>
   13e30:	push	{r4, r5, r6, lr}
   13e34:	mov	r5, r0
   13e38:	mov	r4, r1
   13e3c:	bl	1417c <__assert_fail@plt+0x32d8>
   13e40:	cmp	r0, #0
   13e44:	popne	{r4, r5, r6, pc}
   13e48:	adds	r4, r4, #0
   13e4c:	movne	r4, #1
   13e50:	cmp	r5, #0
   13e54:	moveq	r4, #1
   13e58:	cmp	r4, #0
   13e5c:	popeq	{r4, r5, r6, pc}
   13e60:	bl	140bc <__assert_fail@plt+0x3218>
   13e64:	push	{r4, lr}
   13e68:	bl	14234 <__assert_fail@plt+0x3390>
   13e6c:	cmp	r0, #0
   13e70:	popne	{r4, pc}
   13e74:	bl	140bc <__assert_fail@plt+0x3218>
   13e78:	push	{r4, r5, r6, lr}
   13e7c:	mov	r6, r0
   13e80:	mov	r5, r1
   13e84:	mov	r4, r2
   13e88:	bl	142dc <__assert_fail@plt+0x3438>
   13e8c:	cmp	r0, #0
   13e90:	popne	{r4, r5, r6, pc}
   13e94:	cmp	r6, #0
   13e98:	beq	13ea8 <__assert_fail@plt+0x3004>
   13e9c:	cmp	r5, #0
   13ea0:	cmpne	r4, #0
   13ea4:	popeq	{r4, r5, r6, pc}
   13ea8:	bl	140bc <__assert_fail@plt+0x3218>
   13eac:	b	13e78 <__assert_fail@plt+0x2fd4>
   13eb0:	push	{r4, lr}
   13eb4:	bl	14244 <__assert_fail@plt+0x33a0>
   13eb8:	cmp	r0, #0
   13ebc:	popne	{r4, pc}
   13ec0:	bl	140bc <__assert_fail@plt+0x3218>
   13ec4:	mov	r2, r1
   13ec8:	mov	r1, r0
   13ecc:	mov	r0, #0
   13ed0:	b	13e78 <__assert_fail@plt+0x2fd4>
   13ed4:	mov	r2, r1
   13ed8:	mov	r1, r0
   13edc:	mov	r0, #0
   13ee0:	b	13eb0 <__assert_fail@plt+0x300c>
   13ee4:	cmp	r0, #0
   13ee8:	push	{r4, r5, r6, lr}
   13eec:	mov	r5, r1
   13ef0:	ldr	r4, [r1]
   13ef4:	bne	13f20 <__assert_fail@plt+0x307c>
   13ef8:	cmp	r4, #0
   13efc:	bne	13f10 <__assert_fail@plt+0x306c>
   13f00:	mov	r4, #64	; 0x40
   13f04:	udiv	r4, r4, r2
   13f08:	cmp	r2, #64	; 0x40
   13f0c:	addhi	r4, r4, #1
   13f10:	mov	r1, r4
   13f14:	bl	13e78 <__assert_fail@plt+0x2fd4>
   13f18:	str	r4, [r5]
   13f1c:	pop	{r4, r5, r6, pc}
   13f20:	lsr	r3, r4, #1
   13f24:	add	r3, r3, #1
   13f28:	adds	r4, r4, r3
   13f2c:	bcc	13f10 <__assert_fail@plt+0x306c>
   13f30:	bl	140bc <__assert_fail@plt+0x3218>
   13f34:	mov	r2, #1
   13f38:	b	13ee4 <__assert_fail@plt+0x3040>
   13f3c:	ldr	ip, [r1]
   13f40:	push	{r4, r5, r6, r7, r8, lr}
   13f44:	mov	r5, r1
   13f48:	mvn	r8, r3
   13f4c:	lsr	r8, r8, #31
   13f50:	ldr	lr, [sp, #24]
   13f54:	asr	r1, ip, #1
   13f58:	adds	r4, ip, r1
   13f5c:	mvnvs	r4, #-2147483648	; 0x80000000
   13f60:	cmp	r3, r4
   13f64:	movge	r1, #0
   13f68:	andlt	r1, r8, #1
   13f6c:	cmp	r1, #0
   13f70:	movne	r4, r3
   13f74:	smull	r6, r7, r4, lr
   13f78:	cmp	r7, r6, asr #31
   13f7c:	bne	13f94 <__assert_fail@plt+0x30f0>
   13f80:	cmp	r6, #63	; 0x3f
   13f84:	mov	r1, r6
   13f88:	bgt	13fa4 <__assert_fail@plt+0x3100>
   13f8c:	mov	r1, #64	; 0x40
   13f90:	b	13f98 <__assert_fail@plt+0x30f4>
   13f94:	mvn	r1, #-2147483648	; 0x80000000
   13f98:	sdiv	r4, r1, lr
   13f9c:	mls	r6, lr, r4, r1
   13fa0:	sub	r1, r1, r6
   13fa4:	cmp	r0, #0
   13fa8:	sub	r6, r4, ip
   13fac:	streq	r0, [r5]
   13fb0:	cmp	r6, r2
   13fb4:	bge	13fe8 <__assert_fail@plt+0x3144>
   13fb8:	adds	r4, ip, r2
   13fbc:	bvs	13fe4 <__assert_fail@plt+0x3140>
   13fc0:	cmp	r4, r3
   13fc4:	movle	r3, #0
   13fc8:	andgt	r3, r8, #1
   13fcc:	cmp	r3, #0
   13fd0:	bne	13fe4 <__assert_fail@plt+0x3140>
   13fd4:	smull	r2, r3, r4, lr
   13fd8:	cmp	r3, r2, asr #31
   13fdc:	mov	r1, r2
   13fe0:	beq	13fe8 <__assert_fail@plt+0x3144>
   13fe4:	bl	140bc <__assert_fail@plt+0x3218>
   13fe8:	bl	13e30 <__assert_fail@plt+0x2f8c>
   13fec:	str	r4, [r5]
   13ff0:	pop	{r4, r5, r6, r7, r8, pc}
   13ff4:	push	{r4, lr}
   13ff8:	bl	140fc <__assert_fail@plt+0x3258>
   13ffc:	cmp	r0, #0
   14000:	popne	{r4, pc}
   14004:	bl	140bc <__assert_fail@plt+0x3218>
   14008:	mov	r1, #1
   1400c:	b	13ff4 <__assert_fail@plt+0x3150>
   14010:	push	{r4, lr}
   14014:	bl	140fc <__assert_fail@plt+0x3258>
   14018:	cmp	r0, #0
   1401c:	popne	{r4, pc}
   14020:	bl	140bc <__assert_fail@plt+0x3218>
   14024:	mov	r1, #1
   14028:	b	14010 <__assert_fail@plt+0x316c>
   1402c:	push	{r4, r5, r6, lr}
   14030:	mov	r4, r1
   14034:	mov	r5, r0
   14038:	mov	r0, r1
   1403c:	bl	13e04 <__assert_fail@plt+0x2f60>
   14040:	mov	r2, r4
   14044:	mov	r1, r5
   14048:	pop	{r4, r5, r6, lr}
   1404c:	b	10ca0 <memcpy@plt>
   14050:	push	{r4, r5, r6, lr}
   14054:	mov	r4, r1
   14058:	mov	r5, r0
   1405c:	mov	r0, r1
   14060:	bl	13e18 <__assert_fail@plt+0x2f74>
   14064:	mov	r2, r4
   14068:	mov	r1, r5
   1406c:	pop	{r4, r5, r6, lr}
   14070:	b	10ca0 <memcpy@plt>
   14074:	push	{r4, r5, r6, lr}
   14078:	mov	r5, r0
   1407c:	add	r0, r1, #1
   14080:	mov	r4, r1
   14084:	bl	13e18 <__assert_fail@plt+0x2f74>
   14088:	mov	r2, #0
   1408c:	mov	r1, r5
   14090:	strb	r2, [r0, r4]
   14094:	mov	r2, r4
   14098:	pop	{r4, r5, r6, lr}
   1409c:	b	10ca0 <memcpy@plt>
   140a0:	push	{r4, lr}
   140a4:	mov	r4, r0
   140a8:	bl	10dd8 <strlen@plt>
   140ac:	add	r1, r0, #1
   140b0:	mov	r0, r4
   140b4:	pop	{r4, lr}
   140b8:	b	1402c <__assert_fail@plt+0x3188>
   140bc:	ldr	r3, [pc, #44]	; 140f0 <__assert_fail@plt+0x324c>
   140c0:	mov	r2, #5
   140c4:	mov	r0, #0
   140c8:	push	{r4, lr}
   140cc:	ldr	r1, [pc, #32]	; 140f4 <__assert_fail@plt+0x3250>
   140d0:	ldr	r4, [r3]
   140d4:	bl	10cdc <dcgettext@plt>
   140d8:	mov	r3, r0
   140dc:	ldr	r2, [pc, #20]	; 140f8 <__assert_fail@plt+0x3254>
   140e0:	mov	r1, #0
   140e4:	mov	r0, r4
   140e8:	bl	10d54 <error@plt>
   140ec:	bl	10e8c <abort@plt>
   140f0:	andeq	r5, r2, r8, ror #1
   140f4:			; <UNDEFINED> instruction: 0x00014cb1
   140f8:	andeq	r4, r1, r8, asr r8
   140fc:	cmp	r1, #0
   14100:	cmpne	r0, #0
   14104:	beq	1413c <__assert_fail@plt+0x3298>
   14108:	push	{r4, r5, r6, lr}
   1410c:	umull	r4, r5, r0, r1
   14110:	adds	r3, r5, #0
   14114:	movne	r3, #1
   14118:	cmp	r4, #0
   1411c:	blt	14128 <__assert_fail@plt+0x3284>
   14120:	cmp	r3, #0
   14124:	beq	14148 <__assert_fail@plt+0x32a4>
   14128:	bl	10de4 <__errno_location@plt>
   1412c:	mov	r3, #12
   14130:	str	r3, [r0]
   14134:	mov	r0, #0
   14138:	pop	{r4, r5, r6, pc}
   1413c:	mov	r1, #1
   14140:	mov	r0, r1
   14144:	b	10c4c <calloc@plt>
   14148:	pop	{r4, r5, r6, lr}
   1414c:	b	14144 <__assert_fail@plt+0x32a0>
   14150:	cmp	r0, #0
   14154:	beq	14174 <__assert_fail@plt+0x32d0>
   14158:	bge	14178 <__assert_fail@plt+0x32d4>
   1415c:	push	{r4, lr}
   14160:	bl	10de4 <__errno_location@plt>
   14164:	mov	r3, #12
   14168:	str	r3, [r0]
   1416c:	mov	r0, #0
   14170:	pop	{r4, pc}
   14174:	mov	r0, #1
   14178:	b	10d78 <malloc@plt>
   1417c:	cmp	r0, #0
   14180:	bne	1418c <__assert_fail@plt+0x32e8>
   14184:	mov	r0, r1
   14188:	b	14150 <__assert_fail@plt+0x32ac>
   1418c:	cmp	r1, #0
   14190:	push	{r4, lr}
   14194:	bne	141a4 <__assert_fail@plt+0x3300>
   14198:	bl	11c84 <__assert_fail@plt+0xde0>
   1419c:	mov	r0, #0
   141a0:	pop	{r4, pc}
   141a4:	blt	141b0 <__assert_fail@plt+0x330c>
   141a8:	pop	{r4, lr}
   141ac:	b	10cf4 <realloc@plt>
   141b0:	bl	10de4 <__errno_location@plt>
   141b4:	mov	r3, #12
   141b8:	str	r3, [r0]
   141bc:	b	1419c <__assert_fail@plt+0x32f8>
   141c0:	push	{r4, r5, r6, lr}
   141c4:	mov	r4, r0
   141c8:	bl	10d30 <__fpending@plt>
   141cc:	mov	r5, r0
   141d0:	mov	r0, r4
   141d4:	bl	10d3c <ferror_unlocked@plt>
   141d8:	mov	r6, r0
   141dc:	mov	r0, r4
   141e0:	bl	11b8c <__assert_fail@plt+0xce8>
   141e4:	cmp	r6, #0
   141e8:	mov	r4, r0
   141ec:	bne	14218 <__assert_fail@plt+0x3374>
   141f0:	cmp	r0, #0
   141f4:	beq	14210 <__assert_fail@plt+0x336c>
   141f8:	cmp	r5, #0
   141fc:	bne	14228 <__assert_fail@plt+0x3384>
   14200:	bl	10de4 <__errno_location@plt>
   14204:	ldr	r4, [r0]
   14208:	subs	r4, r4, #9
   1420c:	mvnne	r4, #0
   14210:	mov	r0, r4
   14214:	pop	{r4, r5, r6, pc}
   14218:	cmp	r0, #0
   1421c:	bne	14228 <__assert_fail@plt+0x3384>
   14220:	bl	10de4 <__errno_location@plt>
   14224:	str	r4, [r0]
   14228:	mvn	r4, #0
   1422c:	b	14210 <__assert_fail@plt+0x336c>
   14230:	b	14150 <__assert_fail@plt+0x32ac>
   14234:	cmp	r1, #0
   14238:	orreq	r1, r1, #1
   1423c:	b	1417c <__assert_fail@plt+0x32d8>
   14240:	b	140fc <__assert_fail@plt+0x3258>
   14244:	cmp	r2, #0
   14248:	cmpne	r1, #0
   1424c:	moveq	r2, #1
   14250:	moveq	r1, r2
   14254:	b	142dc <__assert_fail@plt+0x3438>
   14258:	push	{r4, lr}
   1425c:	mov	r0, #14
   14260:	bl	10e5c <nl_langinfo@plt>
   14264:	cmp	r0, #0
   14268:	beq	14280 <__assert_fail@plt+0x33dc>
   1426c:	ldrb	r2, [r0]
   14270:	ldr	r3, [pc, #16]	; 14288 <__assert_fail@plt+0x33e4>
   14274:	cmp	r2, #0
   14278:	moveq	r0, r3
   1427c:	pop	{r4, pc}
   14280:	ldr	r0, [pc]	; 14288 <__assert_fail@plt+0x33e4>
   14284:	pop	{r4, pc}
   14288:	andeq	r4, r1, r2, asr #25
   1428c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14290:	subs	r5, r0, #0
   14294:	mov	r7, r2
   14298:	addeq	r5, sp, #4
   1429c:	mov	r6, r1
   142a0:	mov	r0, r5
   142a4:	bl	10d48 <mbrtowc@plt>
   142a8:	cmp	r7, #0
   142ac:	cmnne	r0, #3
   142b0:	mov	r4, r0
   142b4:	bls	142d0 <__assert_fail@plt+0x342c>
   142b8:	mov	r0, #0
   142bc:	bl	14308 <__assert_fail@plt+0x3464>
   142c0:	cmp	r0, #0
   142c4:	ldrbeq	r3, [r6]
   142c8:	moveq	r4, #1
   142cc:	streq	r3, [r5]
   142d0:	mov	r0, r4
   142d4:	add	sp, sp, #12
   142d8:	pop	{r4, r5, r6, r7, pc}
   142dc:	umull	r2, r3, r1, r2
   142e0:	cmp	r3, #0
   142e4:	bne	142f0 <__assert_fail@plt+0x344c>
   142e8:	mov	r1, r2
   142ec:	b	1417c <__assert_fail@plt+0x32d8>
   142f0:	push	{r4, lr}
   142f4:	bl	10de4 <__errno_location@plt>
   142f8:	mov	r3, #12
   142fc:	str	r3, [r0]
   14300:	mov	r0, #0
   14304:	pop	{r4, pc}
   14308:	push	{lr}		; (str lr, [sp, #-4]!)
   1430c:	sub	sp, sp, #268	; 0x10c
   14310:	movw	r2, #257	; 0x101
   14314:	add	r1, sp, #4
   14318:	bl	14364 <__assert_fail@plt+0x34c0>
   1431c:	cmp	r0, #0
   14320:	movne	r0, #0
   14324:	bne	14354 <__assert_fail@plt+0x34b0>
   14328:	ldr	r1, [pc, #44]	; 1435c <__assert_fail@plt+0x34b8>
   1432c:	add	r0, sp, #4
   14330:	bl	10c64 <strcmp@plt>
   14334:	cmp	r0, #0
   14338:	beq	14350 <__assert_fail@plt+0x34ac>
   1433c:	ldr	r1, [pc, #28]	; 14360 <__assert_fail@plt+0x34bc>
   14340:	add	r0, sp, #4
   14344:	bl	10c64 <strcmp@plt>
   14348:	adds	r0, r0, #0
   1434c:	movne	r0, #1
   14350:	and	r0, r0, #1
   14354:	add	sp, sp, #268	; 0x10c
   14358:	pop	{pc}		; (ldr pc, [sp], #4)
   1435c:	andeq	r4, r1, r8, asr #25
   14360:	andeq	r4, r1, sl, asr #25
   14364:	push	{r4, r5, r6, lr}
   14368:	mov	r5, r1
   1436c:	mov	r1, #0
   14370:	mov	r4, r2
   14374:	bl	10e44 <setlocale@plt>
   14378:	subs	r6, r0, #0
   1437c:	bne	14390 <__assert_fail@plt+0x34ec>
   14380:	cmp	r4, #0
   14384:	mov	r0, #22
   14388:	strbne	r6, [r5]
   1438c:	pop	{r4, r5, r6, pc}
   14390:	bl	10dd8 <strlen@plt>
   14394:	cmp	r4, r0
   14398:	bls	143b4 <__assert_fail@plt+0x3510>
   1439c:	add	r2, r0, #1
   143a0:	mov	r1, r6
   143a4:	mov	r0, r5
   143a8:	bl	10ca0 <memcpy@plt>
   143ac:	mov	r0, #0
   143b0:	pop	{r4, r5, r6, pc}
   143b4:	cmp	r4, #0
   143b8:	beq	143d8 <__assert_fail@plt+0x3534>
   143bc:	sub	r4, r4, #1
   143c0:	mov	r1, r6
   143c4:	mov	r2, r4
   143c8:	mov	r0, r5
   143cc:	bl	10ca0 <memcpy@plt>
   143d0:	mov	r3, #0
   143d4:	strb	r3, [r5, r4]
   143d8:	mov	r0, #34	; 0x22
   143dc:	pop	{r4, r5, r6, pc}
   143e0:	mov	r1, #0
   143e4:	b	10e44 <setlocale@plt>
   143e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   143ec:	mov	r7, r0
   143f0:	ldr	r6, [pc, #72]	; 14440 <__assert_fail@plt+0x359c>
   143f4:	ldr	r5, [pc, #72]	; 14444 <__assert_fail@plt+0x35a0>
   143f8:	add	r6, pc, r6
   143fc:	add	r5, pc, r5
   14400:	sub	r6, r6, r5
   14404:	mov	r8, r1
   14408:	mov	r9, r2
   1440c:	bl	10c2c <calloc@plt-0x20>
   14410:	asrs	r6, r6, #2
   14414:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14418:	mov	r4, #0
   1441c:	add	r4, r4, #1
   14420:	ldr	r3, [r5], #4
   14424:	mov	r2, r9
   14428:	mov	r1, r8
   1442c:	mov	r0, r7
   14430:	blx	r3
   14434:	cmp	r6, r4
   14438:	bne	1441c <__assert_fail@plt+0x3578>
   1443c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14440:	andeq	r0, r1, r4, lsl fp
   14444:	andeq	r0, r1, ip, lsl #22
   14448:	bx	lr
   1444c:	ldr	r3, [pc, #12]	; 14460 <__assert_fail@plt+0x35bc>
   14450:	mov	r1, #0
   14454:	add	r3, pc, r3
   14458:	ldr	r2, [r3]
   1445c:	b	10df0 <__cxa_atexit@plt>
   14460:	andeq	r0, r1, r4, lsl #25

Disassembly of section .fini:

00014464 <.fini>:
   14464:	push	{r3, lr}
   14468:	pop	{r3, pc}
