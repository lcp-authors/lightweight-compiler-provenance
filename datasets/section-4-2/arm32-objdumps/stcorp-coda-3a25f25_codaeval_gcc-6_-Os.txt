
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010c98 <.init>:
   10c98:	push	{r3, lr}
   10c9c:	bl	11440 <_start@@Base+0x3c>
   10ca0:	pop	{r3, pc}

Disassembly of section .plt:

00010ca4 <coda_match_filefilter@plt-0x14>:
   10ca4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca8:	ldr	lr, [pc, #4]	; 10cb4 <coda_match_filefilter@plt-0x4>
   10cac:	add	lr, pc, lr
   10cb0:	ldr	pc, [lr, #8]!
   10cb4:	andeq	r2, r1, ip, asr #6

00010cb8 <coda_match_filefilter@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #73728	; 0x12000
   10cc0:	ldr	pc, [ip, #844]!	; 0x34c

00010cc4 <coda_expression_eval_integer@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #73728	; 0x12000
   10ccc:	ldr	pc, [ip, #836]!	; 0x344

00010cd0 <strcmp@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #73728	; 0x12000
   10cd8:	ldr	pc, [ip, #828]!	; 0x33c

00010cdc <printf@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #73728	; 0x12000
   10ce4:	ldr	pc, [ip, #820]!	; 0x334

00010ce8 <coda_set_error@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #73728	; 0x12000
   10cf0:	ldr	pc, [ip, #812]!	; 0x32c

00010cf4 <coda_open@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #73728	; 0x12000
   10cfc:	ldr	pc, [ip, #804]!	; 0x324

00010d00 <free@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #73728	; 0x12000
   10d08:	ldr	pc, [ip, #796]!	; 0x31c

00010d0c <coda_set_definition_path_conditional@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #73728	; 0x12000
   10d14:	ldr	pc, [ip, #788]!	; 0x314

00010d18 <coda_set_definition_path@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #73728	; 0x12000
   10d20:	ldr	pc, [ip, #780]!	; 0x30c

00010d24 <coda_expression_eval_bool@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #73728	; 0x12000
   10d2c:	ldr	pc, [ip, #772]!	; 0x304

00010d30 <coda_cursor_set_product@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #73728	; 0x12000
   10d38:	ldr	pc, [ip, #764]!	; 0x2fc

00010d3c <coda_done@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #73728	; 0x12000
   10d44:	ldr	pc, [ip, #756]!	; 0x2f4

00010d48 <puts@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #73728	; 0x12000
   10d50:	ldr	pc, [ip, #748]!	; 0x2ec

00010d54 <__libc_start_main@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #73728	; 0x12000
   10d5c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d60 <coda_expression_delete@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #73728	; 0x12000
   10d68:	ldr	pc, [ip, #732]!	; 0x2dc

00010d6c <__gmon_start__@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #73728	; 0x12000
   10d74:	ldr	pc, [ip, #724]!	; 0x2d4

00010d78 <__ctype_b_loc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #73728	; 0x12000
   10d80:	ldr	pc, [ip, #716]!	; 0x2cc

00010d84 <exit@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #73728	; 0x12000
   10d8c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d90 <strlen@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #73728	; 0x12000
   10d98:	ldr	pc, [ip, #700]!	; 0x2bc

00010d9c <fprintf@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #73728	; 0x12000
   10da4:	ldr	pc, [ip, #692]!	; 0x2b4

00010da8 <coda_init@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #73728	; 0x12000
   10db0:	ldr	pc, [ip, #684]!	; 0x2ac

00010db4 <coda_set_option_perform_conversions@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #73728	; 0x12000
   10dbc:	ldr	pc, [ip, #676]!	; 0x2a4

00010dc0 <coda_expression_eval_string@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #73728	; 0x12000
   10dc8:	ldr	pc, [ip, #668]!	; 0x29c

00010dcc <putchar@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #73728	; 0x12000
   10dd4:	ldr	pc, [ip, #660]!	; 0x294

00010dd8 <coda_expression_get_type@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #73728	; 0x12000
   10de0:	ldr	pc, [ip, #652]!	; 0x28c

00010de4 <coda_close@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #73728	; 0x12000
   10dec:	ldr	pc, [ip, #644]!	; 0x284

00010df0 <coda_expression_is_constant@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #73728	; 0x12000
   10df8:	ldr	pc, [ip, #636]!	; 0x27c

00010dfc <coda_expression_eval_float@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #73728	; 0x12000
   10e04:	ldr	pc, [ip, #628]!	; 0x274

00010e08 <coda_expression_eval_node@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #73728	; 0x12000
   10e10:	ldr	pc, [ip, #620]!	; 0x26c

00010e14 <coda_errno_to_string@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #73728	; 0x12000
   10e1c:	ldr	pc, [ip, #612]!	; 0x264

00010e20 <coda_expression_get_type_name@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #73728	; 0x12000
   10e28:	ldr	pc, [ip, #604]!	; 0x25c

00010e2c <coda_expression_from_string@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #73728	; 0x12000
   10e34:	ldr	pc, [ip, #596]!	; 0x254

00010e38 <coda_get_libcoda_version@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #73728	; 0x12000
   10e40:	ldr	pc, [ip, #588]!	; 0x24c

00010e44 <coda_get_errno@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #73728	; 0x12000
   10e4c:	ldr	pc, [ip, #580]!	; 0x244

00010e50 <fputs@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #73728	; 0x12000
   10e58:	ldr	pc, [ip, #572]!	; 0x23c

00010e5c <abort@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #73728	; 0x12000
   10e64:	ldr	pc, [ip, #564]!	; 0x234

00010e68 <coda_str64@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #73728	; 0x12000
   10e70:	ldr	pc, [ip, #556]!	; 0x22c

00010e74 <__assert_fail@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #73728	; 0x12000
   10e7c:	ldr	pc, [ip, #548]!	; 0x224

Disassembly of section .text:

00010e80 <main@@Base-0x1b8>:
   10e80:	push	{r4, lr}
   10e84:	ldr	r0, [pc, #300]	; 10fb8 <__assert_fail@plt+0x144>
   10e88:	bl	10d48 <puts@plt>
   10e8c:	ldr	r0, [pc, #296]	; 10fbc <__assert_fail@plt+0x148>
   10e90:	bl	10d48 <puts@plt>
   10e94:	ldr	r0, [pc, #292]	; 10fc0 <__assert_fail@plt+0x14c>
   10e98:	bl	10d48 <puts@plt>
   10e9c:	ldr	r0, [pc, #288]	; 10fc4 <__assert_fail@plt+0x150>
   10ea0:	bl	10d48 <puts@plt>
   10ea4:	ldr	r0, [pc, #284]	; 10fc8 <__assert_fail@plt+0x154>
   10ea8:	bl	10d48 <puts@plt>
   10eac:	ldr	r0, [pc, #280]	; 10fcc <__assert_fail@plt+0x158>
   10eb0:	bl	10d48 <puts@plt>
   10eb4:	ldr	r0, [pc, #276]	; 10fd0 <__assert_fail@plt+0x15c>
   10eb8:	bl	10d48 <puts@plt>
   10ebc:	mov	r0, #10
   10ec0:	bl	10dcc <putchar@plt>
   10ec4:	ldr	r0, [pc, #264]	; 10fd4 <__assert_fail@plt+0x160>
   10ec8:	bl	10d48 <puts@plt>
   10ecc:	ldr	r0, [pc, #260]	; 10fd8 <__assert_fail@plt+0x164>
   10ed0:	bl	10d48 <puts@plt>
   10ed4:	ldr	r0, [pc, #256]	; 10fdc <__assert_fail@plt+0x168>
   10ed8:	bl	10d48 <puts@plt>
   10edc:	ldr	r0, [pc, #252]	; 10fe0 <__assert_fail@plt+0x16c>
   10ee0:	bl	10d48 <puts@plt>
   10ee4:	ldr	r0, [pc, #248]	; 10fe4 <__assert_fail@plt+0x170>
   10ee8:	bl	10d48 <puts@plt>
   10eec:	ldr	r0, [pc, #244]	; 10fe8 <__assert_fail@plt+0x174>
   10ef0:	bl	10d48 <puts@plt>
   10ef4:	ldr	r0, [pc, #240]	; 10fec <__assert_fail@plt+0x178>
   10ef8:	bl	10d48 <puts@plt>
   10efc:	ldr	r0, [pc, #236]	; 10ff0 <__assert_fail@plt+0x17c>
   10f00:	bl	10d48 <puts@plt>
   10f04:	ldr	r0, [pc, #232]	; 10ff4 <__assert_fail@plt+0x180>
   10f08:	bl	10d48 <puts@plt>
   10f0c:	ldr	r0, [pc, #228]	; 10ff8 <__assert_fail@plt+0x184>
   10f10:	bl	10d48 <puts@plt>
   10f14:	ldr	r0, [pc, #224]	; 10ffc <__assert_fail@plt+0x188>
   10f18:	bl	10d48 <puts@plt>
   10f1c:	ldr	r0, [pc, #220]	; 11000 <__assert_fail@plt+0x18c>
   10f20:	bl	10d48 <puts@plt>
   10f24:	mov	r0, #10
   10f28:	bl	10dcc <putchar@plt>
   10f2c:	ldr	r0, [pc, #208]	; 11004 <__assert_fail@plt+0x190>
   10f30:	bl	10d48 <puts@plt>
   10f34:	ldr	r0, [pc, #204]	; 11008 <__assert_fail@plt+0x194>
   10f38:	bl	10d48 <puts@plt>
   10f3c:	mov	r0, #10
   10f40:	bl	10dcc <putchar@plt>
   10f44:	ldr	r0, [pc, #192]	; 1100c <__assert_fail@plt+0x198>
   10f48:	bl	10d48 <puts@plt>
   10f4c:	ldr	r0, [pc, #188]	; 11010 <__assert_fail@plt+0x19c>
   10f50:	bl	10d48 <puts@plt>
   10f54:	mov	r0, #10
   10f58:	bl	10dcc <putchar@plt>
   10f5c:	ldr	r0, [pc, #176]	; 11014 <__assert_fail@plt+0x1a0>
   10f60:	bl	10d48 <puts@plt>
   10f64:	ldr	r0, [pc, #172]	; 11018 <__assert_fail@plt+0x1a4>
   10f68:	bl	10d48 <puts@plt>
   10f6c:	mov	r0, #10
   10f70:	bl	10dcc <putchar@plt>
   10f74:	ldr	r0, [pc, #160]	; 1101c <__assert_fail@plt+0x1a8>
   10f78:	bl	10d48 <puts@plt>
   10f7c:	ldr	r0, [pc, #156]	; 11020 <__assert_fail@plt+0x1ac>
   10f80:	bl	10d48 <puts@plt>
   10f84:	ldr	r0, [pc, #152]	; 11024 <__assert_fail@plt+0x1b0>
   10f88:	bl	10d48 <puts@plt>
   10f8c:	ldr	r0, [pc, #148]	; 11028 <__assert_fail@plt+0x1b4>
   10f90:	bl	10d48 <puts@plt>
   10f94:	ldr	r0, [pc, #144]	; 1102c <__assert_fail@plt+0x1b8>
   10f98:	bl	10d48 <puts@plt>
   10f9c:	ldr	r0, [pc, #140]	; 11030 <__assert_fail@plt+0x1bc>
   10fa0:	bl	10d48 <puts@plt>
   10fa4:	ldr	r0, [pc, #136]	; 11034 <__assert_fail@plt+0x1c0>
   10fa8:	bl	10d48 <puts@plt>
   10fac:	mov	r0, #10
   10fb0:	pop	{r4, lr}
   10fb4:	b	10dcc <putchar@plt>
   10fb8:	andeq	r1, r1, r8, lsr #20
   10fbc:	andeq	r1, r1, pc, lsr #20
   10fc0:	andeq	r1, r1, sp, ror sl
   10fc4:	andeq	r1, r1, fp, asr #21
   10fc8:	andeq	r1, r1, pc, ror #21
   10fcc:	andeq	r1, r1, r9, lsr fp
   10fd0:	andeq	r1, r1, r4, lsl #23
   10fd4:			; <UNDEFINED> instruction: 0x00011bb4
   10fd8:	andeq	r1, r1, r5, asr #23
   10fdc:	ldrdeq	r1, [r1], -sp
   10fe0:	andeq	r1, r1, sp, lsr #24
   10fe4:	andeq	r1, r1, sp, ror ip
   10fe8:	andeq	r1, r1, r3, lsr #25
   10fec:	ldrdeq	r1, [r1], -sp
   10ff0:	strdeq	r1, [r1], -r5
   10ff4:	andeq	r1, r1, pc, lsr sp
   10ff8:	andeq	r1, r1, sl, lsl #27
   10ffc:	andeq	r1, r1, r8, lsr #27
   11000:	strdeq	r1, [r1], -r4
   11004:	andeq	r1, r1, r3, lsr #28
   11008:	andeq	r1, r1, r3, ror lr
   1100c:	andeq	r1, r1, sl, lsl #29
   11010:	andeq	r1, r1, r1, lsr #29
   11014:			; <UNDEFINED> instruction: 0x00011ebf
   11018:	ldrdeq	r1, [r1], -sl
   1101c:	andeq	r1, r1, ip, lsl #30
   11020:	andeq	r1, r1, r6, asr pc
   11024:	andeq	r1, r1, r0, lsr #31
   11028:	andeq	r1, r1, lr, asr #31
   1102c:	andeq	r2, r1, r7, lsl r0
   11030:	andeq	r2, r1, r0, rrx
   11034:	muleq	r1, pc, r0	; <UNPREDICTABLE>

00011038 <main@@Base>:
   11038:	cmp	r0, #1
   1103c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11040:	sub	sp, sp, #20
   11044:	beq	1107c <main@@Base+0x44>
   11048:	ldr	r4, [r1, #4]
   1104c:	mov	r7, r0
   11050:	mov	r8, r1
   11054:	mov	r0, r4
   11058:	ldr	r1, [pc, #836]	; 113a4 <main@@Base+0x36c>
   1105c:	bl	10cd0 <strcmp@plt>
   11060:	cmp	r0, #0
   11064:	beq	1107c <main@@Base+0x44>
   11068:	ldr	r1, [pc, #824]	; 113a8 <main@@Base+0x370>
   1106c:	mov	r0, r4
   11070:	bl	10cd0 <strcmp@plt>
   11074:	cmp	r0, #0
   11078:	bne	11088 <main@@Base+0x50>
   1107c:	bl	10e80 <__assert_fail@plt+0xc>
   11080:	mov	r0, #0
   11084:	bl	10d84 <exit@plt>
   11088:	ldr	r1, [pc, #796]	; 113ac <main@@Base+0x374>
   1108c:	mov	r0, r4
   11090:	bl	10cd0 <strcmp@plt>
   11094:	cmp	r0, #0
   11098:	beq	110b0 <main@@Base+0x78>
   1109c:	ldr	r1, [pc, #780]	; 113b0 <main@@Base+0x378>
   110a0:	mov	r0, r4
   110a4:	bl	10cd0 <strcmp@plt>
   110a8:	cmp	r0, #0
   110ac:	bne	110d4 <main@@Base+0x9c>
   110b0:	bl	10e38 <coda_get_libcoda_version@plt>
   110b4:	mov	r1, r0
   110b8:	ldr	r0, [pc, #756]	; 113b4 <main@@Base+0x37c>
   110bc:	bl	10cdc <printf@plt>
   110c0:	ldr	r0, [pc, #752]	; 113b8 <main@@Base+0x380>
   110c4:	bl	10d48 <puts@plt>
   110c8:	mov	r0, #10
   110cc:	bl	10dcc <putchar@plt>
   110d0:	b	11080 <main@@Base+0x48>
   110d4:	cmp	r7, #2
   110d8:	ble	111dc <main@@Base+0x1a4>
   110dc:	ldr	r1, [pc, #728]	; 113bc <main@@Base+0x384>
   110e0:	mov	r0, r4
   110e4:	bl	10cd0 <strcmp@plt>
   110e8:	cmp	r0, #0
   110ec:	bne	111dc <main@@Base+0x1a4>
   110f0:	ldr	r0, [r8, #8]
   110f4:	bl	10d18 <coda_set_definition_path@plt>
   110f8:	mov	r4, #3
   110fc:	mov	r9, #1
   11100:	mov	r6, #0
   11104:	mov	fp, r9
   11108:	cmp	r4, r7
   1110c:	bge	11224 <main@@Base+0x1ec>
   11110:	ldr	r5, [r8, r4, lsl #2]
   11114:	ldr	r1, [pc, #676]	; 113c0 <main@@Base+0x388>
   11118:	mov	r0, r5
   1111c:	bl	10cd0 <strcmp@plt>
   11120:	lsl	sl, r4, #2
   11124:	cmp	r0, #0
   11128:	beq	11240 <main@@Base+0x208>
   1112c:	ldr	r1, [pc, #656]	; 113c4 <main@@Base+0x38c>
   11130:	mov	r0, r5
   11134:	bl	10cd0 <strcmp@plt>
   11138:	cmp	r0, #0
   1113c:	beq	11240 <main@@Base+0x208>
   11140:	ldr	r1, [pc, #640]	; 113c8 <main@@Base+0x390>
   11144:	mov	r0, r5
   11148:	bl	10cd0 <strcmp@plt>
   1114c:	cmp	r0, #0
   11150:	beq	1124c <main@@Base+0x214>
   11154:	ldr	r1, [pc, #624]	; 113cc <main@@Base+0x394>
   11158:	mov	r0, r5
   1115c:	bl	10cd0 <strcmp@plt>
   11160:	cmp	r0, #0
   11164:	beq	1124c <main@@Base+0x214>
   11168:	ldr	r1, [pc, #608]	; 113d0 <main@@Base+0x398>
   1116c:	mov	r0, r5
   11170:	bl	10cd0 <strcmp@plt>
   11174:	cmp	r0, #0
   11178:	bne	11218 <main@@Base+0x1e0>
   1117c:	add	r3, r4, #1
   11180:	cmp	r7, r3
   11184:	str	r3, [sp, #12]
   11188:	ble	11218 <main@@Base+0x1e0>
   1118c:	add	sl, r8, sl
   11190:	ldr	r0, [sl, #4]
   11194:	ldrb	r2, [r0]
   11198:	cmp	r2, #45	; 0x2d
   1119c:	beq	11218 <main@@Base+0x1e0>
   111a0:	ldr	r1, [pc, #556]	; 113d4 <main@@Base+0x39c>
   111a4:	bl	10e2c <coda_expression_from_string@plt>
   111a8:	ldr	r3, [sp, #12]
   111ac:	cmp	r0, #0
   111b0:	beq	11254 <main@@Base+0x21c>
   111b4:	ldr	r3, [pc, #540]	; 113d8 <main@@Base+0x3a0>
   111b8:	ldr	r4, [r3]
   111bc:	bl	10e44 <coda_get_errno@plt>
   111c0:	ldr	r0, [r0]
   111c4:	bl	10e14 <coda_errno_to_string@plt>
   111c8:	ldr	r1, [pc, #524]	; 113dc <main@@Base+0x3a4>
   111cc:	mov	r2, r0
   111d0:	mov	r0, r4
   111d4:	bl	10d9c <fprintf@plt>
   111d8:	b	11238 <main@@Base+0x200>
   111dc:	ldr	r2, [pc, #508]	; 113e0 <main@@Base+0x3a8>
   111e0:	mov	r1, #0
   111e4:	ldr	r0, [r8]
   111e8:	bl	10d0c <coda_set_definition_path_conditional@plt>
   111ec:	cmp	r0, #0
   111f0:	moveq	r4, #1
   111f4:	beq	110fc <main@@Base+0xc4>
   111f8:	ldr	r3, [pc, #472]	; 113d8 <main@@Base+0x3a0>
   111fc:	ldr	r4, [r3]
   11200:	bl	10e44 <coda_get_errno@plt>
   11204:	ldr	r0, [r0]
   11208:	bl	10e14 <coda_errno_to_string@plt>
   1120c:	ldr	r1, [pc, #464]	; 113e4 <main@@Base+0x3ac>
   11210:	mov	r2, r0
   11214:	b	111d0 <main@@Base+0x198>
   11218:	ldrb	r3, [r5]
   1121c:	cmp	r3, #45	; 0x2d
   11220:	bne	1125c <main@@Base+0x224>
   11224:	ldr	r3, [pc, #428]	; 113d8 <main@@Base+0x3a0>
   11228:	ldr	r0, [pc, #440]	; 113e8 <main@@Base+0x3b0>
   1122c:	ldr	r1, [r3]
   11230:	bl	10e50 <fputs@plt>
   11234:	bl	10e80 <__assert_fail@plt+0xc>
   11238:	mov	r0, #1
   1123c:	b	11084 <main@@Base+0x4c>
   11240:	mov	r6, fp
   11244:	add	r4, r4, #1
   11248:	b	11108 <main@@Base+0xd0>
   1124c:	mov	r9, r0
   11250:	b	11244 <main@@Base+0x20c>
   11254:	mov	r4, r3
   11258:	b	11244 <main@@Base+0x20c>
   1125c:	ldr	sl, [pc, #392]	; 113ec <main@@Base+0x3b4>
   11260:	mov	r0, r5
   11264:	add	r1, sl, #4
   11268:	bl	10e2c <coda_expression_from_string@plt>
   1126c:	mov	r5, sl
   11270:	cmp	r0, #0
   11274:	beq	11298 <main@@Base+0x260>
   11278:	ldr	r3, [pc, #344]	; 113d8 <main@@Base+0x3a0>
   1127c:	ldr	r4, [r3]
   11280:	bl	10e44 <coda_get_errno@plt>
   11284:	ldr	r0, [r0]
   11288:	bl	10e14 <coda_errno_to_string@plt>
   1128c:	ldr	r1, [pc, #348]	; 113f0 <main@@Base+0x3b8>
   11290:	mov	r2, r0
   11294:	b	111d0 <main@@Base+0x198>
   11298:	mov	r1, sl
   1129c:	ldr	r0, [sl, #4]
   112a0:	bl	10dd8 <coda_expression_get_type@plt>
   112a4:	cmp	r0, #0
   112a8:	bne	111f8 <main@@Base+0x1c0>
   112ac:	ldr	r0, [sl]
   112b0:	sub	r3, r0, #4
   112b4:	cmp	r3, #1
   112b8:	bhi	112d4 <main@@Base+0x29c>
   112bc:	ldr	r3, [pc, #276]	; 113d8 <main@@Base+0x3a0>
   112c0:	ldr	r4, [r3]
   112c4:	bl	10e20 <coda_expression_get_type_name@plt>
   112c8:	ldr	r1, [pc, #292]	; 113f4 <main@@Base+0x3bc>
   112cc:	mov	r2, r0
   112d0:	b	111d0 <main@@Base+0x198>
   112d4:	cmp	r6, #0
   112d8:	beq	11300 <main@@Base+0x2c8>
   112dc:	ldr	r0, [sl, #4]
   112e0:	bl	10d60 <coda_expression_delete@plt>
   112e4:	ldr	r0, [sl, #8]
   112e8:	cmp	r0, #0
   112ec:	beq	112f4 <main@@Base+0x2bc>
   112f0:	bl	10d60 <coda_expression_delete@plt>
   112f4:	mov	r0, #0
   112f8:	add	sp, sp, #20
   112fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11300:	add	r4, r4, #1
   11304:	cmp	r7, r4
   11308:	ble	11354 <main@@Base+0x31c>
   1130c:	bl	10da8 <coda_init@plt>
   11310:	cmp	r0, #0
   11314:	bne	111f8 <main@@Base+0x1c0>
   11318:	mov	r0, r9
   1131c:	bl	10db4 <coda_set_option_perform_conversions@plt>
   11320:	str	r6, [sp]
   11324:	ldr	r3, [pc, #204]	; 113f8 <main@@Base+0x3c0>
   11328:	add	r2, r8, r4, lsl #2
   1132c:	sub	r1, r7, r4
   11330:	mov	r0, r6
   11334:	bl	10cb8 <coda_match_filefilter@plt>
   11338:	cmp	r0, #0
   1133c:	bne	111f8 <main@@Base+0x1c0>
   11340:	bl	10d3c <coda_done@plt>
   11344:	ldr	r0, [r5, #4]
   11348:	bl	10d60 <coda_expression_delete@plt>
   1134c:	ldr	r0, [r5, #8]
   11350:	b	112e8 <main@@Base+0x2b0>
   11354:	ldr	r3, [sl, #8]
   11358:	cmp	r3, #0
   1135c:	beq	11374 <main@@Base+0x33c>
   11360:	ldr	r3, [pc, #112]	; 113d8 <main@@Base+0x3a0>
   11364:	ldr	r0, [pc, #144]	; 113fc <main@@Base+0x3c4>
   11368:	ldr	r1, [r3]
   1136c:	bl	10e50 <fputs@plt>
   11370:	b	11238 <main@@Base+0x200>
   11374:	ldr	r0, [sl, #4]
   11378:	bl	10df0 <coda_expression_is_constant@plt>
   1137c:	cmp	r0, #0
   11380:	ldreq	r3, [pc, #80]	; 113d8 <main@@Base+0x3a0>
   11384:	ldreq	r0, [pc, #116]	; 11400 <main@@Base+0x3c8>
   11388:	ldreq	r1, [r3]
   1138c:	beq	1136c <main@@Base+0x334>
   11390:	mov	r0, r6
   11394:	bl	1152c <_start@@Base+0x128>
   11398:	cmp	r0, #0
   1139c:	beq	11344 <main@@Base+0x30c>
   113a0:	b	111f8 <main@@Base+0x1c0>
   113a4:	andeq	r2, r1, sp, lsl #5
   113a8:	muleq	r1, sl, lr
   113ac:	muleq	r1, r0, r2
   113b0:	ldrdeq	r1, [r1], -r0
   113b4:	muleq	r1, r3, r2
   113b8:	andeq	r2, r1, r0, lsr #5
   113bc:	andeq	r2, r1, pc, asr #5
   113c0:	strdeq	r2, [r1], -r7
   113c4:	ldrdeq	r1, [r1], -r5
   113c8:	strdeq	r2, [r1], -sl
   113cc:	andeq	r1, r1, sp, lsl #25
   113d0:	strdeq	r2, [r1], -sp
   113d4:	andeq	r3, r2, r0, asr #1
   113d8:	strheq	r3, [r2], -r0
   113dc:	andeq	r2, r1, r0, lsl #6
   113e0:	ldrdeq	r2, [r1], -r2	; <UNPREDICTABLE>
   113e4:	andeq	r2, r1, ip, ror #5
   113e8:	andeq	r2, r1, r5, lsr #6
   113ec:	strheq	r3, [r2], -r8
   113f0:	andeq	r2, r1, pc, lsr r3
   113f4:	andeq	r2, r1, pc, asr r3
   113f8:	andeq	r1, r1, ip, lsr #18
   113fc:	andeq	r2, r1, lr, lsl #7
   11400:	andeq	r2, r1, pc, ror #7

00011404 <_start@@Base>:
   11404:	mov	fp, #0
   11408:	mov	lr, #0
   1140c:	pop	{r1}		; (ldr r1, [sp], #4)
   11410:	mov	r2, sp
   11414:	push	{r2}		; (str r2, [sp, #-4]!)
   11418:	push	{r0}		; (str r0, [sp, #-4]!)
   1141c:	ldr	ip, [pc, #16]	; 11434 <_start@@Base+0x30>
   11420:	push	{ip}		; (str ip, [sp, #-4]!)
   11424:	ldr	r0, [pc, #12]	; 11438 <_start@@Base+0x34>
   11428:	ldr	r3, [pc, #12]	; 1143c <_start@@Base+0x38>
   1142c:	bl	10d54 <__libc_start_main@plt>
   11430:	bl	10e5c <abort@plt>
   11434:	andeq	r1, r1, r8, lsl #20
   11438:	andeq	r1, r1, r8, lsr r0
   1143c:	andeq	r1, r1, r8, lsr #19
   11440:	ldr	r3, [pc, #20]	; 1145c <_start@@Base+0x58>
   11444:	ldr	r2, [pc, #20]	; 11460 <_start@@Base+0x5c>
   11448:	add	r3, pc, r3
   1144c:	ldr	r2, [r3, r2]
   11450:	cmp	r2, #0
   11454:	bxeq	lr
   11458:	b	10d6c <__gmon_start__@plt>
   1145c:			; <UNDEFINED> instruction: 0x00011bb0
   11460:	andeq	r0, r0, r4, lsr #1
   11464:	ldr	r3, [pc, #28]	; 11488 <_start@@Base+0x84>
   11468:	ldr	r0, [pc, #28]	; 1148c <_start@@Base+0x88>
   1146c:	sub	r3, r3, r0
   11470:	cmp	r3, #6
   11474:	bxls	lr
   11478:	ldr	r3, [pc, #16]	; 11490 <_start@@Base+0x8c>
   1147c:	cmp	r3, #0
   11480:	bxeq	lr
   11484:	bx	r3
   11488:	strheq	r3, [r2], -r3	; <UNPREDICTABLE>
   1148c:	strheq	r3, [r2], -r0
   11490:	andeq	r0, r0, r0
   11494:	ldr	r1, [pc, #36]	; 114c0 <_start@@Base+0xbc>
   11498:	ldr	r0, [pc, #36]	; 114c4 <_start@@Base+0xc0>
   1149c:	sub	r1, r1, r0
   114a0:	asr	r1, r1, #2
   114a4:	add	r1, r1, r1, lsr #31
   114a8:	asrs	r1, r1, #1
   114ac:	bxeq	lr
   114b0:	ldr	r3, [pc, #16]	; 114c8 <_start@@Base+0xc4>
   114b4:	cmp	r3, #0
   114b8:	bxeq	lr
   114bc:	bx	r3
   114c0:	strheq	r3, [r2], -r0
   114c4:	strheq	r3, [r2], -r0
   114c8:	andeq	r0, r0, r0
   114cc:	push	{r4, lr}
   114d0:	ldr	r4, [pc, #24]	; 114f0 <_start@@Base+0xec>
   114d4:	ldrb	r3, [r4]
   114d8:	cmp	r3, #0
   114dc:	popne	{r4, pc}
   114e0:	bl	11464 <_start@@Base+0x60>
   114e4:	mov	r3, #1
   114e8:	strb	r3, [r4]
   114ec:	pop	{r4, pc}
   114f0:	strheq	r3, [r2], -r4
   114f4:	ldr	r0, [pc, #40]	; 11524 <_start@@Base+0x120>
   114f8:	ldr	r3, [r0]
   114fc:	cmp	r3, #0
   11500:	bne	11508 <_start@@Base+0x104>
   11504:	b	11494 <_start@@Base+0x90>
   11508:	ldr	r3, [pc, #24]	; 11528 <_start@@Base+0x124>
   1150c:	cmp	r3, #0
   11510:	beq	11504 <_start@@Base+0x100>
   11514:	push	{r4, lr}
   11518:	blx	r3
   1151c:	pop	{r4, lr}
   11520:	b	11494 <_start@@Base+0x90>
   11524:	strdeq	r2, [r2], -ip
   11528:	andeq	r0, r0, r0
   1152c:	ldr	ip, [pc, #676]	; 117d8 <_start@@Base+0x3d4>
   11530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11534:	mov	r1, r0
   11538:	ldr	r3, [ip]
   1153c:	sub	sp, sp, #36	; 0x24
   11540:	cmp	r3, #5
   11544:	ldrls	pc, [pc, r3, lsl #2]
   11548:	b	117d0 <_start@@Base+0x3cc>
   1154c:	andeq	r1, r1, r4, ror #10
   11550:	andeq	r1, r1, r4, asr #11
   11554:	andeq	r1, r1, r4, lsl #12
   11558:	andeq	r1, r1, r0, asr #12
   1155c:			; <UNDEFINED> instruction: 0x000117bc
   11560:			; <UNDEFINED> instruction: 0x000117bc
   11564:	add	r2, sp, #8
   11568:	ldr	r0, [ip, #4]
   1156c:	bl	10d24 <coda_expression_eval_bool@plt>
   11570:	subs	r5, r0, #0
   11574:	beq	115a4 <_start@@Base+0x1a0>
   11578:	bl	10e44 <coda_get_errno@plt>
   1157c:	ldr	r0, [r0]
   11580:	bl	10e14 <coda_errno_to_string@plt>
   11584:	ldr	r1, [pc, #592]	; 117dc <_start@@Base+0x3d8>
   11588:	mov	r2, r0
   1158c:	mvn	r0, #400	; 0x190
   11590:	bl	10ce8 <coda_set_error@plt>
   11594:	mvn	r5, #0
   11598:	mov	r0, r5
   1159c:	add	sp, sp, #36	; 0x24
   115a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115a4:	ldr	r0, [sp, #8]
   115a8:	ldr	r3, [pc, #560]	; 117e0 <_start@@Base+0x3dc>
   115ac:	ldr	r2, [pc, #560]	; 117e4 <_start@@Base+0x3e0>
   115b0:	cmp	r0, #0
   115b4:	movne	r0, r2
   115b8:	moveq	r0, r3
   115bc:	bl	10d48 <puts@plt>
   115c0:	b	11598 <_start@@Base+0x194>
   115c4:	mov	r2, sp
   115c8:	ldr	r0, [ip, #4]
   115cc:	bl	10cc4 <coda_expression_eval_integer@plt>
   115d0:	subs	r5, r0, #0
   115d4:	beq	115f0 <_start@@Base+0x1ec>
   115d8:	bl	10e44 <coda_get_errno@plt>
   115dc:	ldr	r0, [r0]
   115e0:	bl	10e14 <coda_errno_to_string@plt>
   115e4:	ldr	r1, [pc, #508]	; 117e8 <_start@@Base+0x3e4>
   115e8:	mov	r2, r0
   115ec:	b	1158c <_start@@Base+0x188>
   115f0:	ldrd	r0, [sp]
   115f4:	add	r2, sp, #8
   115f8:	bl	10e68 <coda_str64@plt>
   115fc:	add	r0, sp, #8
   11600:	b	115bc <_start@@Base+0x1b8>
   11604:	add	r2, sp, #8
   11608:	ldr	r0, [ip, #4]
   1160c:	bl	10dfc <coda_expression_eval_float@plt>
   11610:	subs	r5, r0, #0
   11614:	beq	11630 <_start@@Base+0x22c>
   11618:	bl	10e44 <coda_get_errno@plt>
   1161c:	ldr	r0, [r0]
   11620:	bl	10e14 <coda_errno_to_string@plt>
   11624:	ldr	r1, [pc, #448]	; 117ec <_start@@Base+0x3e8>
   11628:	mov	r2, r0
   1162c:	b	1158c <_start@@Base+0x188>
   11630:	ldrd	r2, [sp, #8]
   11634:	ldr	r0, [pc, #436]	; 117f0 <_start@@Base+0x3ec>
   11638:	bl	10cdc <printf@plt>
   1163c:	b	11598 <_start@@Base+0x194>
   11640:	mov	r3, #0
   11644:	str	r3, [sp]
   11648:	mov	r2, sp
   1164c:	add	r3, sp, #8
   11650:	ldr	r0, [ip, #4]
   11654:	bl	10dc0 <coda_expression_eval_string@plt>
   11658:	subs	r5, r0, #0
   1165c:	beq	11678 <_start@@Base+0x274>
   11660:	bl	10e44 <coda_get_errno@plt>
   11664:	ldr	r0, [r0]
   11668:	bl	10e14 <coda_errno_to_string@plt>
   1166c:	ldr	r1, [pc, #384]	; 117f4 <_start@@Base+0x3f0>
   11670:	mov	r2, r0
   11674:	b	1158c <_start@@Base+0x188>
   11678:	ldr	r7, [sp]
   1167c:	ldr	r6, [sp, #8]
   11680:	cmp	r7, #0
   11684:	cmpne	r6, #0
   11688:	bne	116a8 <_start@@Base+0x2a4>
   1168c:	mov	r0, #10
   11690:	bl	10dcc <putchar@plt>
   11694:	ldr	r0, [sp]
   11698:	cmp	r0, #0
   1169c:	beq	11598 <_start@@Base+0x194>
   116a0:	bl	10d00 <free@plt>
   116a4:	b	11598 <_start@@Base+0x194>
   116a8:	cmp	r6, #0
   116ac:	bge	116bc <_start@@Base+0x2b8>
   116b0:	mov	r0, r7
   116b4:	bl	10d90 <strlen@plt>
   116b8:	mov	r6, r0
   116bc:	ldr	r9, [pc, #308]	; 117f8 <_start@@Base+0x3f4>
   116c0:	ldr	sl, [pc, #308]	; 117fc <_start@@Base+0x3f8>
   116c4:	ldr	fp, [pc, #308]	; 11800 <_start@@Base+0x3fc>
   116c8:	mov	r8, r7
   116cc:	sub	r3, r8, r7
   116d0:	cmp	r6, r3
   116d4:	ble	1168c <_start@@Base+0x288>
   116d8:	ldrb	r4, [r8], #1
   116dc:	cmp	r4, #11
   116e0:	beq	117a0 <_start@@Base+0x39c>
   116e4:	bhi	11744 <_start@@Base+0x340>
   116e8:	cmp	r4, #8
   116ec:	beq	11788 <_start@@Base+0x384>
   116f0:	bhi	11728 <_start@@Base+0x324>
   116f4:	cmp	r4, #7
   116f8:	ldreq	r0, [pc, #260]	; 11804 <_start@@Base+0x400>
   116fc:	beq	1173c <_start@@Base+0x338>
   11700:	bl	10d78 <__ctype_b_loc@plt>
   11704:	lsl	r3, r4, #1
   11708:	ldr	r2, [r0]
   1170c:	ldrh	r3, [r2, r3]
   11710:	tst	r3, #16384	; 0x4000
   11714:	bne	117b0 <_start@@Base+0x3ac>
   11718:	mov	r1, r4
   1171c:	mov	r0, sl
   11720:	bl	10cdc <printf@plt>
   11724:	b	116cc <_start@@Base+0x2c8>
   11728:	cmp	r4, #9
   1172c:	beq	11798 <_start@@Base+0x394>
   11730:	cmp	r4, #10
   11734:	ldreq	r0, [pc, #204]	; 11808 <_start@@Base+0x404>
   11738:	bne	11700 <_start@@Base+0x2fc>
   1173c:	bl	10cdc <printf@plt>
   11740:	b	116cc <_start@@Base+0x2c8>
   11744:	cmp	r4, #27
   11748:	beq	11780 <_start@@Base+0x37c>
   1174c:	bhi	11768 <_start@@Base+0x364>
   11750:	cmp	r4, #12
   11754:	beq	11790 <_start@@Base+0x38c>
   11758:	cmp	r4, #13
   1175c:	ldreq	r0, [pc, #168]	; 1180c <_start@@Base+0x408>
   11760:	beq	1173c <_start@@Base+0x338>
   11764:	b	11700 <_start@@Base+0x2fc>
   11768:	cmp	r4, #34	; 0x22
   1176c:	beq	117a8 <_start@@Base+0x3a4>
   11770:	cmp	r4, #92	; 0x5c
   11774:	ldreq	r0, [pc, #148]	; 11810 <_start@@Base+0x40c>
   11778:	beq	1173c <_start@@Base+0x338>
   1177c:	b	11700 <_start@@Base+0x2fc>
   11780:	mov	r0, fp
   11784:	b	1173c <_start@@Base+0x338>
   11788:	ldr	r0, [pc, #132]	; 11814 <_start@@Base+0x410>
   1178c:	b	1173c <_start@@Base+0x338>
   11790:	ldr	r0, [pc, #128]	; 11818 <_start@@Base+0x414>
   11794:	b	1173c <_start@@Base+0x338>
   11798:	ldr	r0, [pc, #124]	; 1181c <_start@@Base+0x418>
   1179c:	b	1173c <_start@@Base+0x338>
   117a0:	mov	r0, r9
   117a4:	b	1173c <_start@@Base+0x338>
   117a8:	ldr	r0, [pc, #112]	; 11820 <_start@@Base+0x41c>
   117ac:	b	1173c <_start@@Base+0x338>
   117b0:	mov	r0, r4
   117b4:	bl	10dcc <putchar@plt>
   117b8:	b	116cc <_start@@Base+0x2c8>
   117bc:	ldr	r3, [pc, #96]	; 11824 <_start@@Base+0x420>
   117c0:	mov	r2, #230	; 0xe6
   117c4:	ldr	r1, [pc, #92]	; 11828 <_start@@Base+0x424>
   117c8:	ldr	r0, [pc, #92]	; 1182c <_start@@Base+0x428>
   117cc:	bl	10e74 <__assert_fail@plt>
   117d0:	mov	r5, #0
   117d4:	b	11598 <_start@@Base+0x194>
   117d8:	strheq	r3, [r2], -r8
   117dc:	andeq	r2, r1, sl, ror #1
   117e0:	andeq	r2, r1, r4, ror #1
   117e4:	ldrdeq	r2, [r1], -pc	; <UNPREDICTABLE>
   117e8:	andeq	r2, r1, r2, lsl r1
   117ec:	andeq	r2, r1, sl, lsr r1
   117f0:	andeq	r2, r1, r9, ror #2
   117f4:	andeq	r2, r1, r0, ror r1
   117f8:	andeq	r2, r1, ip, lsr #3
   117fc:			; <UNDEFINED> instruction: 0x000121b5
   11800:	muleq	r1, r7, r1
   11804:	muleq	r1, sl, r1
   11808:	andeq	r2, r1, r3, lsr #3
   1180c:	andeq	r2, r1, r6, lsr #3
   11810:	andeq	r2, r1, pc, lsr #3
   11814:	muleq	r1, sp, r1
   11818:	andeq	r2, r1, r0, lsr #3
   1181c:	andeq	r2, r1, r9, lsr #3
   11820:			; <UNDEFINED> instruction: 0x000121b2
   11824:	andeq	r1, r1, r8, lsl sl
   11828:			; <UNDEFINED> instruction: 0x000121bb
   1182c:	andeq	r2, r1, r0, lsl #4
   11830:	push	{r4, r5, lr}
   11834:	sub	sp, sp, #532	; 0x214
   11838:	add	r1, sp, #528	; 0x210
   1183c:	mov	r3, #0
   11840:	str	r3, [r1, #-524]!	; 0xfffffdf4
   11844:	mov	r5, r0
   11848:	bl	10cf4 <coda_open@plt>
   1184c:	cmp	r0, #0
   11850:	bne	11870 <_start@@Base+0x46c>
   11854:	ldr	r1, [sp, #4]
   11858:	add	r0, sp, #8
   1185c:	bl	10d30 <coda_cursor_set_product@plt>
   11860:	subs	r4, r0, #0
   11864:	beq	11878 <_start@@Base+0x474>
   11868:	ldr	r0, [sp, #4]
   1186c:	bl	10de4 <coda_close@plt>
   11870:	mov	r4, #1
   11874:	b	118c4 <_start@@Base+0x4c0>
   11878:	ldr	r3, [pc, #156]	; 1191c <_start@@Base+0x518>
   1187c:	ldr	r0, [r3, #8]
   11880:	cmp	r0, #0
   11884:	beq	118d0 <_start@@Base+0x4cc>
   11888:	add	r1, sp, #8
   1188c:	bl	10e08 <coda_expression_eval_node@plt>
   11890:	cmp	r0, #0
   11894:	beq	118d0 <_start@@Base+0x4cc>
   11898:	ldr	r3, [pc, #128]	; 11920 <_start@@Base+0x51c>
   1189c:	ldr	r5, [r3]
   118a0:	bl	10e44 <coda_get_errno@plt>
   118a4:	ldr	r0, [r0]
   118a8:	bl	10e14 <coda_errno_to_string@plt>
   118ac:	ldr	r1, [pc, #112]	; 11924 <_start@@Base+0x520>
   118b0:	mov	r2, r0
   118b4:	mov	r0, r5
   118b8:	bl	10d9c <fprintf@plt>
   118bc:	ldr	r0, [sp, #4]
   118c0:	bl	10de4 <coda_close@plt>
   118c4:	mov	r0, r4
   118c8:	add	sp, sp, #532	; 0x214
   118cc:	pop	{r4, r5, pc}
   118d0:	add	r0, sp, #8
   118d4:	bl	1152c <_start@@Base+0x128>
   118d8:	cmp	r0, #0
   118dc:	beq	11908 <_start@@Base+0x504>
   118e0:	ldr	r3, [pc, #56]	; 11920 <_start@@Base+0x51c>
   118e4:	ldr	r4, [r3]
   118e8:	bl	10e44 <coda_get_errno@plt>
   118ec:	ldr	r0, [r0]
   118f0:	bl	10e14 <coda_errno_to_string@plt>
   118f4:	mov	r3, r5
   118f8:	ldr	r1, [pc, #40]	; 11928 <_start@@Base+0x524>
   118fc:	mov	r2, r0
   11900:	mov	r0, r4
   11904:	bl	10d9c <fprintf@plt>
   11908:	ldr	r0, [sp, #4]
   1190c:	bl	10de4 <coda_close@plt>
   11910:	adds	r4, r0, #0
   11914:	movne	r4, #1
   11918:	b	118c4 <_start@@Base+0x4c0>
   1191c:	strheq	r3, [r2], -r8
   11920:	strheq	r3, [r2], -r0
   11924:	andeq	r2, r1, r2, lsl #4
   11928:	andeq	r2, r1, r1, lsr r2

0001192c <callback@@Base>:
   1192c:	push	{r4, lr}
   11930:	subs	r4, r1, #0
   11934:	moveq	r3, r0
   11938:	ldreq	r1, [pc, #88]	; 11998 <callback@@Base+0x6c>
   1193c:	beq	11978 <callback@@Base+0x4c>
   11940:	cmp	r4, #2
   11944:	bne	11964 <callback@@Base+0x38>
   11948:	ldr	r3, [pc, #76]	; 1199c <callback@@Base+0x70>
   1194c:	mov	r2, r0
   11950:	ldr	r1, [pc, #72]	; 119a0 <callback@@Base+0x74>
   11954:	ldr	r0, [r3]
   11958:	bl	10d9c <fprintf@plt>
   1195c:	mov	r0, #0
   11960:	pop	{r4, pc}
   11964:	cmp	r4, #1
   11968:	bne	11988 <callback@@Base+0x5c>
   1196c:	ldr	r1, [pc, #48]	; 119a4 <callback@@Base+0x78>
   11970:	mov	r3, r2
   11974:	mov	r2, r0
   11978:	ldr	r0, [pc, #28]	; 1199c <callback@@Base+0x70>
   1197c:	ldr	r0, [r0]
   11980:	bl	10d9c <fprintf@plt>
   11984:	b	1195c <callback@@Base+0x30>
   11988:	cmp	r4, #4
   1198c:	bne	1195c <callback@@Base+0x30>
   11990:	pop	{r4, lr}
   11994:	b	11830 <_start@@Base+0x42c>
   11998:	andeq	r2, r1, r1, lsr r2
   1199c:	strheq	r3, [r2], -r0
   119a0:	andeq	r2, r1, r3, asr #4
   119a4:	andeq	r2, r1, r9, ror #4

000119a8 <__libc_csu_init@@Base>:
   119a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   119ac:	mov	r7, r0
   119b0:	ldr	r6, [pc, #72]	; 11a00 <__libc_csu_init@@Base+0x58>
   119b4:	ldr	r5, [pc, #72]	; 11a04 <__libc_csu_init@@Base+0x5c>
   119b8:	add	r6, pc, r6
   119bc:	add	r5, pc, r5
   119c0:	sub	r6, r6, r5
   119c4:	mov	r8, r1
   119c8:	mov	r9, r2
   119cc:	bl	10c98 <coda_match_filefilter@plt-0x20>
   119d0:	asrs	r6, r6, #2
   119d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   119d8:	mov	r4, #0
   119dc:	add	r4, r4, #1
   119e0:	ldr	r3, [r5], #4
   119e4:	mov	r2, r9
   119e8:	mov	r1, r8
   119ec:	mov	r0, r7
   119f0:	blx	r3
   119f4:	cmp	r6, r4
   119f8:	bne	119dc <__libc_csu_init@@Base+0x34>
   119fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a00:	andeq	r1, r1, r8, lsr r5
   11a04:	andeq	r1, r1, r0, lsr r5

00011a08 <__libc_csu_fini@@Base>:
   11a08:	bx	lr

Disassembly of section .fini:

00011a0c <.fini>:
   11a0c:	push	{r3, lr}
   11a10:	pop	{r3, pc}
