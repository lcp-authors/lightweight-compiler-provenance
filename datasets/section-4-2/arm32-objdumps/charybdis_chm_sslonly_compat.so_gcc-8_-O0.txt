
../repos/charybdis/extensions/.libs/chm_sslonly_compat.so:     file format elf32-littlearm


Disassembly of section .init:

000003a0 <_init>:
 3a0:	push	{r3, lr}
 3a4:	bl	3f0 <call_weak_fn>
 3a8:	pop	{r3, pc}

Disassembly of section .plt:

000003ac <.plt>:
 3ac:	push	{lr}		; (str lr, [sp, #-4]!)
 3b0:	ldr	lr, [pc, #4]	; 3bc <.plt+0x10>
 3b4:	add	lr, pc, lr
 3b8:	ldr	pc, [lr, #8]!
 3bc:	.word	0x00010c44

000003c0 <__cxa_finalize@plt>:
 3c0:	add	ip, pc, #0, 12
 3c4:	add	ip, ip, #16, 20	; 0x10000
 3c8:	ldr	pc, [ip, #3140]!	; 0xc44

000003cc <chm_nosuch@plt>:
 3cc:	add	ip, pc, #0, 12
 3d0:	add	ip, ip, #16, 20	; 0x10000
 3d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000003d8 <__gmon_start__@plt>:
 3d8:	add	ip, pc, #0, 12
 3dc:	add	ip, ip, #16, 20	; 0x10000
 3e0:	ldr	pc, [ip, #3124]!	; 0xc34

000003e4 <chm_ban@plt>:
 3e4:	add	ip, pc, #0, 12
 3e8:	add	ip, ip, #16, 20	; 0x10000
 3ec:	ldr	pc, [ip, #3116]!	; 0xc2c

Disassembly of section .text:

000003f0 <call_weak_fn>:
 3f0:	ldr	r3, [pc, #20]	; 40c <call_weak_fn+0x1c>
 3f4:	ldr	r2, [pc, #20]	; 410 <call_weak_fn+0x20>
 3f8:	add	r3, pc, r3
 3fc:	ldr	r2, [r3, r2]
 400:	cmp	r2, #0
 404:	bxeq	lr
 408:	b	3d8 <__gmon_start__@plt>
 40c:	.word	0x00010c00
 410:	.word	0x00000028

00000414 <deregister_tm_clones>:
 414:	ldr	r0, [pc, #44]	; 448 <deregister_tm_clones+0x34>
 418:	ldr	r3, [pc, #44]	; 44c <deregister_tm_clones+0x38>
 41c:	add	r0, pc, r0
 420:	add	r3, pc, r3
 424:	cmp	r3, r0
 428:	ldr	r3, [pc, #32]	; 450 <deregister_tm_clones+0x3c>
 42c:	add	r3, pc, r3
 430:	bxeq	lr
 434:	ldr	r2, [pc, #24]	; 454 <deregister_tm_clones+0x40>
 438:	ldr	r3, [r3, r2]
 43c:	cmp	r3, #0
 440:	bxeq	lr
 444:	bx	r3
 448:	.word	0x00010c3c
 44c:	.word	0x00010c38
 450:	.word	0x00010bcc
 454:	.word	0x00000020

00000458 <register_tm_clones>:
 458:	ldr	r0, [pc, #56]	; 498 <register_tm_clones+0x40>
 45c:	ldr	r3, [pc, #56]	; 49c <register_tm_clones+0x44>
 460:	add	r0, pc, r0
 464:	add	r3, pc, r3
 468:	sub	r1, r3, r0
 46c:	ldr	r3, [pc, #44]	; 4a0 <register_tm_clones+0x48>
 470:	asr	r1, r1, #2
 474:	add	r3, pc, r3
 478:	add	r1, r1, r1, lsr #31
 47c:	asrs	r1, r1, #1
 480:	bxeq	lr
 484:	ldr	r2, [pc, #24]	; 4a4 <register_tm_clones+0x4c>
 488:	ldr	r3, [r3, r2]
 48c:	cmp	r3, #0
 490:	bxeq	lr
 494:	bx	r3
 498:	.word	0x00010bf8
 49c:	.word	0x00010bf4
 4a0:	.word	0x00010b84
 4a4:	.word	0x00000030

000004a8 <__do_global_dtors_aux>:
 4a8:	ldr	r3, [pc, #76]	; 4fc <__do_global_dtors_aux+0x54>
 4ac:	ldr	r2, [pc, #76]	; 500 <__do_global_dtors_aux+0x58>
 4b0:	add	r3, pc, r3
 4b4:	add	r2, pc, r2
 4b8:	ldrb	r3, [r3]
 4bc:	cmp	r3, #0
 4c0:	bxne	lr
 4c4:	ldr	r3, [pc, #56]	; 504 <__do_global_dtors_aux+0x5c>
 4c8:	push	{r4, lr}
 4cc:	ldr	r3, [r2, r3]
 4d0:	cmp	r3, #0
 4d4:	beq	4e4 <__do_global_dtors_aux+0x3c>
 4d8:	ldr	r3, [pc, #40]	; 508 <__do_global_dtors_aux+0x60>
 4dc:	ldr	r0, [pc, r3]
 4e0:	bl	3c0 <__cxa_finalize@plt>
 4e4:	bl	414 <deregister_tm_clones>
 4e8:	ldr	r3, [pc, #28]	; 50c <__do_global_dtors_aux+0x64>
 4ec:	mov	r2, #1
 4f0:	add	r3, pc, r3
 4f4:	strb	r2, [r3]
 4f8:	pop	{r4, pc}
 4fc:	.word	0x00010ba8
 500:	.word	0x00010b44
 504:	.word	0x0000001c
 508:	.word	0x00010b50
 50c:	.word	0x00010b68

00000510 <frame_dummy>:
 510:	b	458 <register_tm_clones>

00000514 <_modinit>:
 514:	push	{fp}		; (str fp, [sp, #-4]!)
 518:	add	fp, sp, #0
 51c:	ldr	r3, [pc, #56]	; 55c <_modinit+0x48>
 520:	add	r3, pc, r3
 524:	ldr	r2, [pc, #52]	; 560 <_modinit+0x4c>
 528:	ldr	r2, [r3, r2]
 52c:	ldr	r1, [pc, #48]	; 564 <_modinit+0x50>
 530:	add	r1, pc, r1
 534:	str	r1, [r2, #664]	; 0x298
 538:	ldr	r2, [pc, #32]	; 560 <_modinit+0x4c>
 53c:	ldr	r3, [r3, r2]
 540:	mov	r2, #0
 544:	str	r2, [r3, #668]	; 0x29c
 548:	mov	r3, #0
 54c:	mov	r0, r3
 550:	add	sp, fp, #0
 554:	pop	{fp}		; (ldr fp, [sp], #4)
 558:	bx	lr
 55c:	.word	0x00010ad8
 560:	.word	0x0000002c
 564:	.word	0x00000080

00000568 <_moddeinit>:
 568:	push	{fp}		; (str fp, [sp, #-4]!)
 56c:	add	fp, sp, #0
 570:	ldr	r3, [pc, #52]	; 5ac <_moddeinit+0x44>
 574:	add	r3, pc, r3
 578:	ldr	r2, [pc, #48]	; 5b0 <_moddeinit+0x48>
 57c:	ldr	r2, [r3, r2]
 580:	ldr	r1, [pc, #44]	; 5b4 <_moddeinit+0x4c>
 584:	ldr	r1, [r3, r1]
 588:	str	r1, [r2, #664]	; 0x298
 58c:	ldr	r2, [pc, #28]	; 5b0 <_moddeinit+0x48>
 590:	ldr	r3, [r3, r2]
 594:	mov	r2, #0
 598:	str	r2, [r3, #668]	; 0x29c
 59c:	nop	{0}
 5a0:	add	sp, fp, #0
 5a4:	pop	{fp}		; (ldr fp, [sp], #4)
 5a8:	bx	lr
 5ac:	.word	0x00010a84
 5b0:	.word	0x0000002c
 5b4:	.word	0x00000024

000005b8 <chm_sslonly>:
 5b8:	strd	r4, [sp, #-16]!
 5bc:	str	fp, [sp, #8]
 5c0:	str	lr, [sp, #12]
 5c4:	add	fp, sp, #12
 5c8:	sub	sp, sp, #48	; 0x30
 5cc:	str	r0, [fp, #-24]	; 0xffffffe8
 5d0:	str	r1, [fp, #-28]	; 0xffffffe4
 5d4:	str	r2, [fp, #-32]	; 0xffffffe0
 5d8:	str	r3, [fp, #-36]	; 0xffffffdc
 5dc:	mov	r3, #0
 5e0:	str	r3, [fp, #-16]
 5e4:	ldr	r3, [pc, #216]	; 6c4 <chm_sslonly+0x10c>
 5e8:	add	r3, pc, r3
 5ec:	str	r3, [fp, #-20]	; 0xffffffec
 5f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5f4:	ldrd	r2, [r3, #64]	; 0x40
 5f8:	mov	r0, #8192	; 0x2000
 5fc:	mov	r1, #0
 600:	and	r4, r2, r0
 604:	and	r5, r3, r1
 608:	orrs	r3, r4, r5
 60c:	beq	668 <chm_sslonly+0xb0>
 610:	ldr	r3, [fp, #-24]	; 0xffffffe8
 614:	ldrh	r3, [r3, #80]	; 0x50
 618:	cmp	r3, #64	; 0x40
 61c:	bne	668 <chm_sslonly+0xb0>
 620:	mov	r3, #268435456	; 0x10000000
 624:	str	r3, [sp, #20]
 628:	mov	r3, #98	; 0x62
 62c:	str	r3, [sp, #16]
 630:	ldr	r3, [fp, #16]
 634:	str	r3, [sp, #12]
 638:	ldr	r3, [fp, #12]
 63c:	str	r3, [sp, #8]
 640:	sub	r3, fp, #20
 644:	str	r3, [sp, #4]
 648:	sub	r3, fp, #16
 64c:	str	r3, [sp]
 650:	mov	r3, #1
 654:	ldr	r2, [fp, #-32]	; 0xffffffe0
 658:	ldr	r1, [fp, #-28]	; 0xffffffe4
 65c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 660:	bl	3e4 <chm_ban@plt>
 664:	b	6ac <chm_sslonly+0xf4>
 668:	ldr	r3, [fp, #24]
 66c:	str	r3, [sp, #20]
 670:	ldrb	r3, [fp, #20]
 674:	str	r3, [sp, #16]
 678:	ldr	r3, [fp, #16]
 67c:	str	r3, [sp, #12]
 680:	ldr	r3, [fp, #12]
 684:	str	r3, [sp, #8]
 688:	ldr	r3, [fp, #8]
 68c:	str	r3, [sp, #4]
 690:	ldr	r3, [fp, #4]
 694:	str	r3, [sp]
 698:	ldr	r3, [fp, #-36]	; 0xffffffdc
 69c:	ldr	r2, [fp, #-32]	; 0xffffffe0
 6a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
 6a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
 6a8:	bl	3cc <chm_nosuch@plt>
 6ac:	nop	{0}
 6b0:	sub	sp, fp, #12
 6b4:	ldrd	r4, [sp]
 6b8:	ldr	fp, [sp, #8]
 6bc:	add	sp, sp, #12
 6c0:	pop	{pc}		; (ldr pc, [sp], #4)
 6c4:	.word	0x00000128

Disassembly of section .fini:

000006c8 <_fini>:
 6c8:	push	{r3, lr}
 6cc:	pop	{r3, pc}
