
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000083c <_init>:
 83c:	push	{r3, lr}
 840:	bl	9d0 <call_weak_fn>
 844:	pop	{r3, pc}

Disassembly of section .plt:

00000848 <.plt>:
 848:	push	{lr}		; (str lr, [sp, #-4]!)
 84c:	ldr	lr, [pc, #4]	; 858 <.plt+0x10>
 850:	add	lr, pc, lr
 854:	ldr	pc, [lr, #8]!
 858:	.word	0x000117a8

0000085c <calloc@plt>:
 85c:	add	ip, pc, #0, 12
 860:	add	ip, ip, #69632	; 0x11000
 864:	ldr	pc, [ip, #1960]!	; 0x7a8

00000868 <rb_current_time@plt>:
 868:	add	ip, pc, #0, 12
 86c:	add	ip, ip, #69632	; 0x11000
 870:	ldr	pc, [ip, #1952]!	; 0x7a0

00000874 <__cxa_finalize@plt>:
 874:	add	ip, pc, #0, 12
 878:	add	ip, ip, #69632	; 0x11000
 87c:	ldr	pc, [ip, #1944]!	; 0x798

00000880 <RSA_public_encrypt@plt>:
 880:	add	ip, pc, #0, 12
 884:	add	ip, ip, #69632	; 0x11000
 888:	ldr	pc, [ip, #1936]!	; 0x790

0000088c <sendto_one@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1928]!	; 0x788

00000898 <free@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1920]!	; 0x780

000008a4 <rb_strcasecmp@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1912]!	; 0x778

000008b0 <RSA_size@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1904]!	; 0x770

000008bc <rb_outofmemory@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1896]!	; 0x768

000008c8 <memcmp@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1888]!	; 0x760

000008d4 <sendto_realops_snomask@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1880]!	; 0x758

000008e0 <rb_base64_decode@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1872]!	; 0x750

000008ec <strcpy@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1864]!	; 0x748

000008f8 <malloc@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1856]!	; 0x740

00000904 <rb_get_random@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1848]!	; 0x738

00000910 <__gmon_start__@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1840]!	; 0x730

0000091c <OPENSSL_init_crypto@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1832]!	; 0x728

00000928 <send_oper_motd@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1824]!	; 0x720

00000934 <sendto_one_numeric@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1816]!	; 0x718

00000940 <strlen@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1808]!	; 0x710

0000094c <SHA1_Update@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1800]!	; 0x708

00000958 <ERR_error_string@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1792]!	; 0x700

00000964 <ilog@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1784]!	; 0x6f8

00000970 <SHA1_Init@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1776]!	; 0x6f0

0000097c <ERR_get_error@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1768]!	; 0x6e8

00000988 <sendto_one_notice@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1760]!	; 0x6e0

00000994 <rb_strlcpy@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1752]!	; 0x6d8

000009a0 <find_oper_conf@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1744]!	; 0x6d0

000009ac <oper_up@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1736]!	; 0x6c8

000009b8 <rb_base64_encode@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1728]!	; 0x6c0

000009c4 <SHA1_Final@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1720]!	; 0x6b8

Disassembly of section .text:

000009d0 <call_weak_fn>:
     9d0:	ldr	r3, [pc, #20]	; 9ec <call_weak_fn+0x1c>
     9d4:	ldr	r2, [pc, #20]	; 9f0 <call_weak_fn+0x20>
     9d8:	add	r3, pc, r3
     9dc:	ldr	r2, [r3, r2]
     9e0:	cmp	r2, #0
     9e4:	bxeq	lr
     9e8:	b	910 <__gmon_start__@plt>
     9ec:	.word	0x00011620
     9f0:	.word	0x00000090

000009f4 <deregister_tm_clones>:
     9f4:	ldr	r0, [pc, #44]	; a28 <deregister_tm_clones+0x34>
     9f8:	ldr	r3, [pc, #44]	; a2c <deregister_tm_clones+0x38>
     9fc:	add	r0, pc, r0
     a00:	add	r3, pc, r3
     a04:	cmp	r3, r0
     a08:	ldr	r3, [pc, #32]	; a30 <deregister_tm_clones+0x3c>
     a0c:	add	r3, pc, r3
     a10:	bxeq	lr
     a14:	ldr	r2, [pc, #24]	; a34 <deregister_tm_clones+0x40>
     a18:	ldr	r3, [r3, r2]
     a1c:	cmp	r3, #0
     a20:	bxeq	lr
     a24:	bx	r3
     a28:	.word	0x00011714
     a2c:	.word	0x00011710
     a30:	.word	0x000115ec
     a34:	.word	0x0000008c

00000a38 <register_tm_clones>:
     a38:	ldr	r0, [pc, #56]	; a78 <register_tm_clones+0x40>
     a3c:	ldr	r3, [pc, #56]	; a7c <register_tm_clones+0x44>
     a40:	add	r0, pc, r0
     a44:	add	r3, pc, r3
     a48:	sub	r1, r3, r0
     a4c:	ldr	r3, [pc, #44]	; a80 <register_tm_clones+0x48>
     a50:	asr	r1, r1, #2
     a54:	add	r3, pc, r3
     a58:	add	r1, r1, r1, lsr #31
     a5c:	asrs	r1, r1, #1
     a60:	bxeq	lr
     a64:	ldr	r2, [pc, #24]	; a84 <register_tm_clones+0x4c>
     a68:	ldr	r3, [r3, r2]
     a6c:	cmp	r3, #0
     a70:	bxeq	lr
     a74:	bx	r3
     a78:	.word	0x000116d0
     a7c:	.word	0x000116cc
     a80:	.word	0x000115a4
     a84:	.word	0x00000094

00000a88 <__do_global_dtors_aux>:
     a88:	ldr	r3, [pc, #76]	; adc <__do_global_dtors_aux+0x54>
     a8c:	ldr	r2, [pc, #76]	; ae0 <__do_global_dtors_aux+0x58>
     a90:	add	r3, pc, r3
     a94:	add	r2, pc, r2
     a98:	ldrb	r3, [r3]
     a9c:	cmp	r3, #0
     aa0:	bxne	lr
     aa4:	ldr	r3, [pc, #56]	; ae4 <__do_global_dtors_aux+0x5c>
     aa8:	push	{r4, lr}
     aac:	ldr	r3, [r2, r3]
     ab0:	cmp	r3, #0
     ab4:	beq	ac4 <__do_global_dtors_aux+0x3c>
     ab8:	ldr	r3, [pc, #40]	; ae8 <__do_global_dtors_aux+0x60>
     abc:	ldr	r0, [pc, r3]
     ac0:	bl	874 <__cxa_finalize@plt>
     ac4:	bl	9f4 <deregister_tm_clones>
     ac8:	ldr	r3, [pc, #28]	; aec <__do_global_dtors_aux+0x64>
     acc:	mov	r2, #1
     ad0:	add	r3, pc, r3
     ad4:	strb	r2, [r3]
     ad8:	pop	{r4, pc}
     adc:	.word	0x00011680
     ae0:	.word	0x00011564
     ae4:	.word	0x00000088
     ae8:	.word	0x000115dc
     aec:	.word	0x00011640

00000af0 <frame_dummy>:
     af0:	b	a38 <register_tm_clones>

00000af4 <rb_malloc>:
     af4:	str	fp, [sp, #-8]!
     af8:	str	lr, [sp, #4]
     afc:	add	fp, sp, #4
     b00:	sub	sp, sp, #16
     b04:	str	r0, [fp, #-16]
     b08:	ldr	r1, [fp, #-16]
     b0c:	mov	r0, #1
     b10:	bl	85c <calloc@plt>
     b14:	mov	r3, r0
     b18:	str	r3, [fp, #-8]
     b1c:	ldr	r3, [fp, #-8]
     b20:	cmp	r3, #0
     b24:	moveq	r3, #1
     b28:	movne	r3, #0
     b2c:	uxtb	r3, r3
     b30:	cmp	r3, #0
     b34:	beq	b3c <rb_malloc+0x48>
     b38:	bl	8bc <rb_outofmemory@plt>
     b3c:	ldr	r3, [fp, #-8]
     b40:	mov	r0, r3
     b44:	sub	sp, fp, #4
     b48:	ldr	fp, [sp]
     b4c:	add	sp, sp, #4
     b50:	pop	{pc}		; (ldr pc, [sp], #4)

00000b54 <rb_strdup>:
     b54:	str	fp, [sp, #-8]!
     b58:	str	lr, [sp, #4]
     b5c:	add	fp, sp, #4
     b60:	sub	sp, sp, #16
     b64:	str	r0, [fp, #-16]
     b68:	ldr	r0, [fp, #-16]
     b6c:	bl	940 <strlen@plt>
     b70:	mov	r3, r0
     b74:	add	r3, r3, #1
     b78:	mov	r0, r3
     b7c:	bl	8f8 <malloc@plt>
     b80:	mov	r3, r0
     b84:	str	r3, [fp, #-8]
     b88:	ldr	r3, [fp, #-8]
     b8c:	cmp	r3, #0
     b90:	moveq	r3, #1
     b94:	movne	r3, #0
     b98:	uxtb	r3, r3
     b9c:	cmp	r3, #0
     ba0:	beq	ba8 <rb_strdup+0x54>
     ba4:	bl	8bc <rb_outofmemory@plt>
     ba8:	ldr	r1, [fp, #-16]
     bac:	ldr	r0, [fp, #-8]
     bb0:	bl	8ec <strcpy@plt>
     bb4:	ldr	r3, [fp, #-8]
     bb8:	mov	r0, r3
     bbc:	sub	sp, fp, #4
     bc0:	ldr	fp, [sp]
     bc4:	add	sp, sp, #4
     bc8:	pop	{pc}		; (ldr pc, [sp], #4)

00000bcc <rb_free>:
     bcc:	str	fp, [sp, #-8]!
     bd0:	str	lr, [sp, #4]
     bd4:	add	fp, sp, #4
     bd8:	sub	sp, sp, #8
     bdc:	str	r0, [fp, #-8]
     be0:	ldr	r3, [fp, #-8]
     be4:	cmp	r3, #0
     be8:	movne	r3, #1
     bec:	moveq	r3, #0
     bf0:	uxtb	r3, r3
     bf4:	cmp	r3, #0
     bf8:	beq	c04 <rb_free+0x38>
     bfc:	ldr	r0, [fp, #-8]
     c00:	bl	898 <free@plt>
     c04:	nop	{0}
     c08:	sub	sp, fp, #4
     c0c:	ldr	fp, [sp]
     c10:	add	sp, sp, #4
     c14:	pop	{pc}		; (ldr pc, [sp], #4)

00000c18 <cleanup_challenge>:
     c18:	str	fp, [sp, #-8]!
     c1c:	str	lr, [sp, #4]
     c20:	add	fp, sp, #4
     c24:	sub	sp, sp, #8
     c28:	str	r0, [fp, #-8]
     c2c:	ldr	r3, [fp, #-8]
     c30:	ldr	r3, [r3, #432]	; 0x1b0
     c34:	cmp	r3, #0
     c38:	beq	c98 <cleanup_challenge+0x80>
     c3c:	ldr	r3, [fp, #-8]
     c40:	ldr	r3, [r3, #432]	; 0x1b0
     c44:	ldr	r3, [r3, #284]	; 0x11c
     c48:	mov	r0, r3
     c4c:	bl	bcc <rb_free>
     c50:	ldr	r3, [fp, #-8]
     c54:	ldr	r3, [r3, #24]
     c58:	ldr	r3, [r3, #32]
     c5c:	mov	r0, r3
     c60:	bl	bcc <rb_free>
     c64:	ldr	r3, [fp, #-8]
     c68:	ldr	r3, [r3, #432]	; 0x1b0
     c6c:	mov	r2, #0
     c70:	str	r2, [r3, #284]	; 0x11c
     c74:	ldr	r3, [fp, #-8]
     c78:	ldr	r3, [r3, #24]
     c7c:	mov	r2, #0
     c80:	str	r2, [r3, #32]
     c84:	ldr	r3, [fp, #-8]
     c88:	ldr	r3, [r3, #432]	; 0x1b0
     c8c:	mov	r2, #0
     c90:	str	r2, [r3, #304]	; 0x130
     c94:	b	c9c <cleanup_challenge+0x84>
     c98:	nop	{0}
     c9c:	sub	sp, fp, #4
     ca0:	ldr	fp, [sp]
     ca4:	add	sp, sp, #4
     ca8:	pop	{pc}		; (ldr pc, [sp], #4)

00000cac <m_challenge>:
     cac:	strd	r4, [sp, #-16]!
     cb0:	str	fp, [sp, #8]
     cb4:	str	lr, [sp, #12]
     cb8:	add	fp, sp, #12
     cbc:	sub	sp, sp, #464	; 0x1d0
     cc0:	str	r0, [fp, #-448]	; 0xfffffe40
     cc4:	str	r1, [fp, #-452]	; 0xfffffe3c
     cc8:	str	r2, [fp, #-456]	; 0xfffffe38
     ccc:	str	r3, [fp, #-460]	; 0xfffffe34
     cd0:	ldr	r4, [pc, #2208]	; 1578 <m_challenge+0x8cc>
     cd4:	add	r4, pc, r4
     cd8:	mov	r3, #0
     cdc:	str	r3, [fp, #-32]	; 0xffffffe0
     ce0:	mov	r3, #0
     ce4:	str	r3, [fp, #-444]	; 0xfffffe44
     ce8:	ldr	r3, [fp, #-456]	; 0xfffffe38
     cec:	ldr	r3, [r3, #56]	; 0x38
     cf0:	and	r3, r3, #4096	; 0x1000
     cf4:	cmp	r3, #0
     cf8:	beq	d2c <m_challenge+0x80>
     cfc:	ldr	r3, [fp, #-456]	; 0xfffffe38
     d00:	add	r3, r3, #88	; 0x58
     d04:	ldr	r2, [pc, #2160]	; 157c <m_challenge+0x8d0>
     d08:	ldr	r2, [r4, r2]
     d0c:	add	r2, r2, #88	; 0x58
     d10:	ldr	r1, [pc, #2152]	; 1580 <m_challenge+0x8d4>
     d14:	add	r1, pc, r1
     d18:	ldr	r0, [fp, #-456]	; 0xfffffe38
     d1c:	bl	88c <sendto_one@plt>
     d20:	ldr	r0, [fp, #-456]	; 0xfffffe38
     d24:	bl	928 <send_oper_motd@plt>
     d28:	b	1564 <m_challenge+0x8b8>
     d2c:	ldr	r3, [fp, #4]
     d30:	add	r3, r3, #4
     d34:	ldr	r3, [r3]
     d38:	ldrb	r3, [r3]
     d3c:	cmp	r3, #43	; 0x2b
     d40:	bne	1110 <m_challenge+0x464>
     d44:	ldr	r3, [fp, #-456]	; 0xfffffe38
     d48:	ldr	r3, [r3, #432]	; 0x1b0
     d4c:	ldr	r3, [r3, #284]	; 0x11c
     d50:	cmp	r3, #0
     d54:	beq	1540 <m_challenge+0x894>
     d58:	bl	868 <rb_current_time@plt>
     d5c:	mov	r2, r0
     d60:	ldr	r3, [fp, #-456]	; 0xfffffe38
     d64:	ldr	r3, [r3, #432]	; 0x1b0
     d68:	ldr	r3, [r3, #304]	; 0x130
     d6c:	sub	r3, r2, r3
     d70:	cmp	r3, #180	; 0xb4
     d74:	ble	e48 <m_challenge+0x19c>
     d78:	ldr	r3, [fp, #-456]	; 0xfffffe38
     d7c:	add	r3, r3, #88	; 0x58
     d80:	ldr	r2, [pc, #2036]	; 157c <m_challenge+0x8d0>
     d84:	ldr	r2, [r4, r2]
     d88:	add	r2, r2, #88	; 0x58
     d8c:	ldr	r1, [pc, #2032]	; 1584 <m_challenge+0x8d8>
     d90:	add	r1, pc, r1
     d94:	ldr	r0, [fp, #-456]	; 0xfffffe38
     d98:	bl	88c <sendto_one@plt>
     d9c:	ldr	r3, [fp, #-456]	; 0xfffffe38
     da0:	ldr	r3, [r3, #24]
     da4:	ldr	r0, [r3, #32]
     da8:	ldr	r3, [fp, #-456]	; 0xfffffe38
     dac:	add	ip, r3, #88	; 0x58
     db0:	ldr	r3, [fp, #-456]	; 0xfffffe38
     db4:	add	r2, r3, #152	; 0x98
     db8:	ldr	r3, [fp, #-456]	; 0xfffffe38
     dbc:	add	r1, r3, #163	; 0xa3
     dc0:	ldr	r3, [fp, #-456]	; 0xfffffe38
     dc4:	add	r3, r3, #288	; 0x120
     dc8:	add	r3, r3, #3
     dcc:	str	r3, [sp, #8]
     dd0:	str	r1, [sp, #4]
     dd4:	str	r2, [sp]
     dd8:	mov	r3, ip
     ddc:	mov	r2, r0
     de0:	ldr	r1, [pc, #1952]	; 1588 <m_challenge+0x8dc>
     de4:	add	r1, pc, r1
     de8:	mov	r0, #4
     dec:	bl	964 <ilog@plt>
     df0:	ldr	r3, [pc, #1940]	; 158c <m_challenge+0x8e0>
     df4:	ldr	r3, [r4, r3]
     df8:	ldr	r3, [r3, #84]	; 0x54
     dfc:	cmp	r3, #0
     e00:	beq	e3c <m_challenge+0x190>
     e04:	ldr	r3, [fp, #-456]	; 0xfffffe38
     e08:	add	r1, r3, #88	; 0x58
     e0c:	ldr	r3, [fp, #-456]	; 0xfffffe38
     e10:	add	r3, r3, #152	; 0x98
     e14:	ldr	r2, [fp, #-456]	; 0xfffffe38
     e18:	add	r2, r2, #163	; 0xa3
     e1c:	str	r2, [sp, #4]
     e20:	str	r3, [sp]
     e24:	mov	r3, r1
     e28:	ldr	r2, [pc, #1888]	; 1590 <m_challenge+0x8e4>
     e2c:	add	r2, pc, r2
     e30:	mov	r1, #256	; 0x100
     e34:	mov	r0, #256	; 0x100
     e38:	bl	8d4 <sendto_realops_snomask@plt>
     e3c:	ldr	r0, [fp, #-456]	; 0xfffffe38
     e40:	bl	c18 <cleanup_challenge>
     e44:	b	1564 <m_challenge+0x8b8>
     e48:	ldr	r3, [fp, #4]
     e4c:	add	r3, r3, #4
     e50:	ldr	r2, [r3]
     e54:	add	r2, r2, #1
     e58:	str	r2, [r3]
     e5c:	ldr	r3, [fp, #4]
     e60:	add	r3, r3, #4
     e64:	ldr	r5, [r3]
     e68:	ldr	r3, [fp, #4]
     e6c:	add	r3, r3, #4
     e70:	ldr	r3, [r3]
     e74:	mov	r0, r3
     e78:	bl	940 <strlen@plt>
     e7c:	mov	r3, r0
     e80:	mov	r1, r3
     e84:	sub	r3, fp, #444	; 0x1bc
     e88:	mov	r2, r3
     e8c:	mov	r0, r5
     e90:	bl	8e0 <rb_base64_decode@plt>
     e94:	str	r0, [fp, #-20]	; 0xffffffec
     e98:	ldr	r3, [fp, #-444]	; 0xfffffe44
     e9c:	cmp	r3, #20
     ea0:	bne	ecc <m_challenge+0x220>
     ea4:	ldr	r3, [fp, #-456]	; 0xfffffe38
     ea8:	ldr	r3, [r3, #432]	; 0x1b0
     eac:	ldr	r3, [r3, #284]	; 0x11c
     eb0:	mov	r2, #20
     eb4:	ldr	r1, [fp, #-20]	; 0xffffffec
     eb8:	mov	r0, r3
     ebc:	bl	8c8 <memcmp@plt>
     ec0:	mov	r3, r0
     ec4:	cmp	r3, #0
     ec8:	beq	fa4 <m_challenge+0x2f8>
     ecc:	ldr	r3, [fp, #-456]	; 0xfffffe38
     ed0:	add	r3, r3, #88	; 0x58
     ed4:	ldr	r2, [pc, #1696]	; 157c <m_challenge+0x8d0>
     ed8:	ldr	r2, [r4, r2]
     edc:	add	r2, r2, #88	; 0x58
     ee0:	ldr	r1, [pc, #1708]	; 1594 <m_challenge+0x8e8>
     ee4:	add	r1, pc, r1
     ee8:	ldr	r0, [fp, #-456]	; 0xfffffe38
     eec:	bl	88c <sendto_one@plt>
     ef0:	ldr	r3, [fp, #-456]	; 0xfffffe38
     ef4:	ldr	r3, [r3, #24]
     ef8:	ldr	r0, [r3, #32]
     efc:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f00:	add	ip, r3, #88	; 0x58
     f04:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f08:	add	r2, r3, #152	; 0x98
     f0c:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f10:	add	r1, r3, #163	; 0xa3
     f14:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f18:	add	r3, r3, #288	; 0x120
     f1c:	add	r3, r3, #3
     f20:	str	r3, [sp, #8]
     f24:	str	r1, [sp, #4]
     f28:	str	r2, [sp]
     f2c:	mov	r3, ip
     f30:	mov	r2, r0
     f34:	ldr	r1, [pc, #1628]	; 1598 <m_challenge+0x8ec>
     f38:	add	r1, pc, r1
     f3c:	mov	r0, #4
     f40:	bl	964 <ilog@plt>
     f44:	ldr	r3, [pc, #1600]	; 158c <m_challenge+0x8e0>
     f48:	ldr	r3, [r4, r3]
     f4c:	ldr	r3, [r3, #84]	; 0x54
     f50:	cmp	r3, #0
     f54:	beq	f90 <m_challenge+0x2e4>
     f58:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f5c:	add	r1, r3, #88	; 0x58
     f60:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f64:	add	r3, r3, #152	; 0x98
     f68:	ldr	r2, [fp, #-456]	; 0xfffffe38
     f6c:	add	r2, r2, #163	; 0xa3
     f70:	str	r2, [sp, #4]
     f74:	str	r3, [sp]
     f78:	mov	r3, r1
     f7c:	ldr	r2, [pc, #1560]	; 159c <m_challenge+0x8f0>
     f80:	add	r2, pc, r2
     f84:	mov	r1, #256	; 0x100
     f88:	mov	r0, #256	; 0x100
     f8c:	bl	8d4 <sendto_realops_snomask@plt>
     f90:	ldr	r0, [fp, #-20]	; 0xffffffec
     f94:	bl	bcc <rb_free>
     f98:	ldr	r0, [fp, #-456]	; 0xfffffe38
     f9c:	bl	c18 <cleanup_challenge>
     fa0:	b	1564 <m_challenge+0x8b8>
     fa4:	ldr	r0, [fp, #-20]	; 0xffffffec
     fa8:	bl	bcc <rb_free>
     fac:	ldr	r3, [fp, #-456]	; 0xfffffe38
     fb0:	add	r0, r3, #152	; 0x98
     fb4:	ldr	r3, [fp, #-456]	; 0xfffffe38
     fb8:	add	r1, r3, #227	; 0xe3
     fbc:	ldr	r3, [fp, #-456]	; 0xfffffe38
     fc0:	add	r2, r3, #288	; 0x120
     fc4:	add	r2, r2, #3
     fc8:	ldr	r3, [fp, #-456]	; 0xfffffe38
     fcc:	ldr	r3, [r3, #24]
     fd0:	ldr	r3, [r3, #32]
     fd4:	bl	9a0 <find_oper_conf@plt>
     fd8:	str	r0, [fp, #-24]	; 0xffffffe8
     fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fe0:	cmp	r3, #0
     fe4:	bne	10a4 <m_challenge+0x3f8>
     fe8:	ldr	r3, [pc, #1456]	; 15a0 <m_challenge+0x8f4>
     fec:	add	r3, pc, r3
     ff0:	mov	r2, r3
     ff4:	movw	r1, #491	; 0x1eb
     ff8:	ldr	r0, [fp, #-456]	; 0xfffffe38
     ffc:	bl	934 <sendto_one_numeric@plt>
    1000:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1004:	ldr	r3, [r3, #24]
    1008:	ldr	r0, [r3, #32]
    100c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1010:	add	ip, r3, #88	; 0x58
    1014:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1018:	add	r2, r3, #152	; 0x98
    101c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1020:	add	r1, r3, #163	; 0xa3
    1024:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1028:	add	r3, r3, #288	; 0x120
    102c:	add	r3, r3, #3
    1030:	str	r3, [sp, #8]
    1034:	str	r1, [sp, #4]
    1038:	str	r2, [sp]
    103c:	mov	r3, ip
    1040:	mov	r2, r0
    1044:	ldr	r1, [pc, #1368]	; 15a4 <m_challenge+0x8f8>
    1048:	add	r1, pc, r1
    104c:	mov	r0, #4
    1050:	bl	964 <ilog@plt>
    1054:	ldr	r3, [pc, #1328]	; 158c <m_challenge+0x8e0>
    1058:	ldr	r3, [r4, r3]
    105c:	ldr	r3, [r3, #84]	; 0x54
    1060:	cmp	r3, #0
    1064:	beq	1548 <m_challenge+0x89c>
    1068:	ldr	r3, [fp, #-456]	; 0xfffffe38
    106c:	add	r1, r3, #88	; 0x58
    1070:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1074:	add	r3, r3, #152	; 0x98
    1078:	ldr	r2, [fp, #-456]	; 0xfffffe38
    107c:	add	r2, r2, #163	; 0xa3
    1080:	str	r2, [sp, #4]
    1084:	str	r3, [sp]
    1088:	mov	r3, r1
    108c:	ldr	r2, [pc, #1300]	; 15a8 <m_challenge+0x8fc>
    1090:	add	r2, pc, r2
    1094:	mov	r1, #256	; 0x100
    1098:	mov	r0, #256	; 0x100
    109c:	bl	8d4 <sendto_realops_snomask@plt>
    10a0:	b	1548 <m_challenge+0x89c>
    10a4:	ldr	r0, [fp, #-456]	; 0xfffffe38
    10a8:	bl	c18 <cleanup_challenge>
    10ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
    10b0:	ldr	r0, [fp, #-456]	; 0xfffffe38
    10b4:	bl	9ac <oper_up@plt>
    10b8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    10bc:	ldr	r3, [r3, #24]
    10c0:	ldr	r0, [r3, #32]
    10c4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    10c8:	add	ip, r3, #88	; 0x58
    10cc:	ldr	r3, [fp, #-456]	; 0xfffffe38
    10d0:	add	r2, r3, #152	; 0x98
    10d4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    10d8:	add	r1, r3, #163	; 0xa3
    10dc:	ldr	r3, [fp, #-456]	; 0xfffffe38
    10e0:	add	r3, r3, #288	; 0x120
    10e4:	add	r3, r3, #3
    10e8:	str	r3, [sp, #8]
    10ec:	str	r1, [sp, #4]
    10f0:	str	r2, [sp]
    10f4:	mov	r3, ip
    10f8:	mov	r2, r0
    10fc:	ldr	r1, [pc, #1192]	; 15ac <m_challenge+0x900>
    1100:	add	r1, pc, r1
    1104:	mov	r0, #3
    1108:	bl	964 <ilog@plt>
    110c:	b	1564 <m_challenge+0x8b8>
    1110:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1114:	bl	c18 <cleanup_challenge>
    1118:	ldr	r3, [fp, #-456]	; 0xfffffe38
    111c:	add	r0, r3, #152	; 0x98
    1120:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1124:	add	r1, r3, #227	; 0xe3
    1128:	ldr	r3, [fp, #-456]	; 0xfffffe38
    112c:	add	r2, r3, #288	; 0x120
    1130:	add	r2, r2, #3
    1134:	ldr	r3, [fp, #4]
    1138:	add	r3, r3, #4
    113c:	ldr	r3, [r3]
    1140:	bl	9a0 <find_oper_conf@plt>
    1144:	str	r0, [fp, #-24]	; 0xffffffe8
    1148:	ldr	r3, [fp, #-24]	; 0xffffffe8
    114c:	cmp	r3, #0
    1150:	bne	1210 <m_challenge+0x564>
    1154:	ldr	r3, [pc, #1108]	; 15b0 <m_challenge+0x904>
    1158:	add	r3, pc, r3
    115c:	mov	r2, r3
    1160:	movw	r1, #491	; 0x1eb
    1164:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1168:	bl	934 <sendto_one_numeric@plt>
    116c:	ldr	r3, [fp, #4]
    1170:	add	r3, r3, #4
    1174:	ldr	r0, [r3]
    1178:	ldr	r3, [fp, #-456]	; 0xfffffe38
    117c:	add	ip, r3, #88	; 0x58
    1180:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1184:	add	r2, r3, #152	; 0x98
    1188:	ldr	r3, [fp, #-456]	; 0xfffffe38
    118c:	add	r1, r3, #163	; 0xa3
    1190:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1194:	add	r3, r3, #288	; 0x120
    1198:	add	r3, r3, #3
    119c:	str	r3, [sp, #8]
    11a0:	str	r1, [sp, #4]
    11a4:	str	r2, [sp]
    11a8:	mov	r3, ip
    11ac:	mov	r2, r0
    11b0:	ldr	r1, [pc, #1020]	; 15b4 <m_challenge+0x908>
    11b4:	add	r1, pc, r1
    11b8:	mov	r0, #4
    11bc:	bl	964 <ilog@plt>
    11c0:	ldr	r3, [pc, #964]	; 158c <m_challenge+0x8e0>
    11c4:	ldr	r3, [r4, r3]
    11c8:	ldr	r3, [r3, #84]	; 0x54
    11cc:	cmp	r3, #0
    11d0:	beq	1550 <m_challenge+0x8a4>
    11d4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    11d8:	add	r1, r3, #88	; 0x58
    11dc:	ldr	r3, [fp, #-456]	; 0xfffffe38
    11e0:	add	r3, r3, #152	; 0x98
    11e4:	ldr	r2, [fp, #-456]	; 0xfffffe38
    11e8:	add	r2, r2, #163	; 0xa3
    11ec:	str	r2, [sp, #4]
    11f0:	str	r3, [sp]
    11f4:	mov	r3, r1
    11f8:	ldr	r2, [pc, #952]	; 15b8 <m_challenge+0x90c>
    11fc:	add	r2, pc, r2
    1200:	mov	r1, #256	; 0x100
    1204:	mov	r0, #256	; 0x100
    1208:	bl	8d4 <sendto_realops_snomask@plt>
    120c:	b	1550 <m_challenge+0x8a4>
    1210:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1214:	ldr	r3, [r3, #40]	; 0x28
    1218:	cmp	r3, #0
    121c:	bne	1238 <m_challenge+0x58c>
    1220:	ldr	r3, [pc, #916]	; 15bc <m_challenge+0x910>
    1224:	add	r3, pc, r3
    1228:	mov	r1, r3
    122c:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1230:	bl	988 <sendto_one_notice@plt>
    1234:	b	1564 <m_challenge+0x8b8>
    1238:	ldr	r3, [fp, #-24]	; 0xffffffe8
    123c:	ldr	r3, [r3, #20]
    1240:	and	r3, r3, #524288	; 0x80000
    1244:	cmp	r3, #0
    1248:	beq	131c <m_challenge+0x670>
    124c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1250:	ldr	r3, [r3, #56]	; 0x38
    1254:	and	r3, r3, #16384	; 0x4000
    1258:	cmp	r3, #0
    125c:	bne	131c <m_challenge+0x670>
    1260:	ldr	r3, [pc, #856]	; 15c0 <m_challenge+0x914>
    1264:	add	r3, pc, r3
    1268:	mov	r2, r3
    126c:	movw	r1, #491	; 0x1eb
    1270:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1274:	bl	934 <sendto_one_numeric@plt>
    1278:	ldr	r3, [fp, #4]
    127c:	add	r3, r3, #4
    1280:	ldr	r0, [r3]
    1284:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1288:	add	ip, r3, #88	; 0x58
    128c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1290:	add	r2, r3, #152	; 0x98
    1294:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1298:	add	r1, r3, #163	; 0xa3
    129c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    12a0:	add	r3, r3, #288	; 0x120
    12a4:	add	r3, r3, #3
    12a8:	str	r3, [sp, #8]
    12ac:	str	r1, [sp, #4]
    12b0:	str	r2, [sp]
    12b4:	mov	r3, ip
    12b8:	mov	r2, r0
    12bc:	ldr	r1, [pc, #768]	; 15c4 <m_challenge+0x918>
    12c0:	add	r1, pc, r1
    12c4:	mov	r0, #4
    12c8:	bl	964 <ilog@plt>
    12cc:	ldr	r3, [pc, #696]	; 158c <m_challenge+0x8e0>
    12d0:	ldr	r3, [r4, r3]
    12d4:	ldr	r3, [r3, #84]	; 0x54
    12d8:	cmp	r3, #0
    12dc:	beq	1558 <m_challenge+0x8ac>
    12e0:	ldr	r3, [fp, #-456]	; 0xfffffe38
    12e4:	add	r1, r3, #88	; 0x58
    12e8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    12ec:	add	r3, r3, #152	; 0x98
    12f0:	ldr	r2, [fp, #-456]	; 0xfffffe38
    12f4:	add	r2, r2, #163	; 0xa3
    12f8:	str	r2, [sp, #4]
    12fc:	str	r3, [sp]
    1300:	mov	r3, r1
    1304:	ldr	r2, [pc, #700]	; 15c8 <m_challenge+0x91c>
    1308:	add	r2, pc, r2
    130c:	mov	r1, #0
    1310:	mov	r0, #256	; 0x100
    1314:	bl	8d4 <sendto_realops_snomask@plt>
    1318:	b	1558 <m_challenge+0x8ac>
    131c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1320:	ldr	r3, [r3, #16]
    1324:	cmp	r3, #0
    1328:	beq	1420 <m_challenge+0x774>
    132c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1330:	ldr	r3, [r3, #444]	; 0x1bc
    1334:	cmp	r3, #0
    1338:	beq	1364 <m_challenge+0x6b8>
    133c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1340:	ldr	r2, [r3, #444]	; 0x1bc
    1344:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1348:	ldr	r3, [r3, #16]
    134c:	mov	r1, r3
    1350:	mov	r0, r2
    1354:	bl	8a4 <rb_strcasecmp@plt>
    1358:	mov	r3, r0
    135c:	cmp	r3, #0
    1360:	beq	1420 <m_challenge+0x774>
    1364:	ldr	r3, [pc, #608]	; 15cc <m_challenge+0x920>
    1368:	add	r3, pc, r3
    136c:	mov	r2, r3
    1370:	movw	r1, #491	; 0x1eb
    1374:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1378:	bl	934 <sendto_one_numeric@plt>
    137c:	ldr	r3, [fp, #4]
    1380:	add	r3, r3, #4
    1384:	ldr	r0, [r3]
    1388:	ldr	r3, [fp, #-456]	; 0xfffffe38
    138c:	add	ip, r3, #88	; 0x58
    1390:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1394:	add	r2, r3, #152	; 0x98
    1398:	ldr	r3, [fp, #-456]	; 0xfffffe38
    139c:	add	r1, r3, #163	; 0xa3
    13a0:	ldr	r3, [fp, #-456]	; 0xfffffe38
    13a4:	add	r3, r3, #288	; 0x120
    13a8:	add	r3, r3, #3
    13ac:	str	r3, [sp, #8]
    13b0:	str	r1, [sp, #4]
    13b4:	str	r2, [sp]
    13b8:	mov	r3, ip
    13bc:	mov	r2, r0
    13c0:	ldr	r1, [pc, #520]	; 15d0 <m_challenge+0x924>
    13c4:	add	r1, pc, r1
    13c8:	mov	r0, #4
    13cc:	bl	964 <ilog@plt>
    13d0:	ldr	r3, [pc, #436]	; 158c <m_challenge+0x8e0>
    13d4:	ldr	r3, [r4, r3]
    13d8:	ldr	r3, [r3, #84]	; 0x54
    13dc:	cmp	r3, #0
    13e0:	beq	1560 <m_challenge+0x8b4>
    13e4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    13e8:	add	r1, r3, #88	; 0x58
    13ec:	ldr	r3, [fp, #-456]	; 0xfffffe38
    13f0:	add	r3, r3, #152	; 0x98
    13f4:	ldr	r2, [fp, #-456]	; 0xfffffe38
    13f8:	add	r2, r2, #163	; 0xa3
    13fc:	str	r2, [sp, #4]
    1400:	str	r3, [sp]
    1404:	mov	r3, r1
    1408:	ldr	r2, [pc, #452]	; 15d4 <m_challenge+0x928>
    140c:	add	r2, pc, r2
    1410:	mov	r1, #0
    1414:	mov	r0, #256	; 0x100
    1418:	bl	8d4 <sendto_realops_snomask@plt>
    141c:	b	1560 <m_challenge+0x8b4>
    1420:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1424:	ldr	r3, [r3, #432]	; 0x1b0
    1428:	add	r1, r3, #284	; 0x11c
    142c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1430:	ldr	r2, [r3, #40]	; 0x28
    1434:	sub	r3, fp, #32
    1438:	mov	r0, r3
    143c:	bl	15e4 <generate_challenge>
    1440:	mov	r3, r0
    1444:	cmp	r3, #0
    1448:	beq	1528 <m_challenge+0x87c>
    144c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1450:	str	r3, [fp, #-16]
    1454:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1458:	ldr	r5, [r3, #432]	; 0x1b0
    145c:	bl	868 <rb_current_time@plt>
    1460:	mov	r3, r0
    1464:	str	r3, [r5, #304]	; 0x130
    1468:	sub	r3, fp, #440	; 0x1b8
    146c:	movw	r2, #405	; 0x195
    1470:	ldr	r1, [fp, #-16]
    1474:	mov	r0, r3
    1478:	bl	994 <rb_strlcpy@plt>
    147c:	str	r0, [fp, #-28]	; 0xffffffe4
    1480:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1484:	add	r2, r3, #88	; 0x58
    1488:	sub	r3, fp, #440	; 0x1b8
    148c:	str	r3, [sp]
    1490:	mov	r3, r2
    1494:	ldr	r2, [pc, #224]	; 157c <m_challenge+0x8d0>
    1498:	ldr	r2, [r4, r2]
    149c:	add	r2, r2, #88	; 0x58
    14a0:	ldr	r1, [pc, #304]	; 15d8 <m_challenge+0x92c>
    14a4:	add	r1, pc, r1
    14a8:	ldr	r0, [fp, #-456]	; 0xfffffe38
    14ac:	bl	88c <sendto_one@plt>
    14b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    14b4:	movw	r2, #405	; 0x195
    14b8:	cmp	r3, r2
    14bc:	bls	14d0 <m_challenge+0x824>
    14c0:	ldr	r3, [fp, #-16]
    14c4:	add	r3, r3, #404	; 0x194
    14c8:	str	r3, [fp, #-16]
    14cc:	b	1468 <m_challenge+0x7bc>
    14d0:	nop	{0}
    14d4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    14d8:	add	r3, r3, #88	; 0x58
    14dc:	ldr	r2, [pc, #152]	; 157c <m_challenge+0x8d0>
    14e0:	ldr	r2, [r4, r2]
    14e4:	add	r2, r2, #88	; 0x58
    14e8:	ldr	r1, [pc, #236]	; 15dc <m_challenge+0x930>
    14ec:	add	r1, pc, r1
    14f0:	ldr	r0, [fp, #-456]	; 0xfffffe38
    14f4:	bl	88c <sendto_one@plt>
    14f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14fc:	mov	r0, r3
    1500:	bl	bcc <rb_free>
    1504:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1508:	ldr	r2, [r3]
    150c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1510:	ldr	r4, [r3, #24]
    1514:	mov	r0, r2
    1518:	bl	b54 <rb_strdup>
    151c:	mov	r3, r0
    1520:	str	r3, [r4, #32]
    1524:	b	1564 <m_challenge+0x8b8>
    1528:	ldr	r3, [pc, #176]	; 15e0 <m_challenge+0x934>
    152c:	add	r3, pc, r3
    1530:	mov	r1, r3
    1534:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1538:	bl	988 <sendto_one_notice@plt>
    153c:	b	1564 <m_challenge+0x8b8>
    1540:	nop	{0}
    1544:	b	1564 <m_challenge+0x8b8>
    1548:	nop	{0}
    154c:	b	1564 <m_challenge+0x8b8>
    1550:	nop	{0}
    1554:	b	1564 <m_challenge+0x8b8>
    1558:	nop	{0}
    155c:	b	1564 <m_challenge+0x8b8>
    1560:	nop	{0}
    1564:	sub	sp, fp, #12
    1568:	ldrd	r4, [sp]
    156c:	ldr	fp, [sp, #8]
    1570:	add	sp, sp, #12
    1574:	pop	{pc}		; (ldr pc, [sp], #4)
    1578:	.word	0x00011324
    157c:	.word	0x00000098
    1580:	.word	0x00000aec
    1584:	.word	0x00000afc
    1588:	.word	0x00000ac8
    158c:	.word	0x0000009c
    1590:	.word	0x00000aac
    1594:	.word	0x000009a8
    1598:	.word	0x000009c8
    159c:	.word	0x000009ac
    15a0:	.word	0x00000968
    15a4:	.word	0x00000948
    15a8:	.word	0x00000924
    15ac:	.word	0x000008ec
    15b0:	.word	0x000007fc
    15b4:	.word	0x000007dc
    15b8:	.word	0x000007b8
    15bc:	.word	0x000007e4
    15c0:	.word	0x000006f0
    15c4:	.word	0x0000078c
    15c8:	.word	0x00000784
    15cc:	.word	0x000005ec
    15d0:	.word	0x00000704
    15d4:	.word	0x0000070c
    15d8:	.word	0x000006c0
    15dc:	.word	0x00000688
    15e0:	.word	0x00000668

000015e4 <generate_challenge>:
    15e4:	str	fp, [sp, #-8]!
    15e8:	str	lr, [sp, #4]
    15ec:	add	fp, sp, #4
    15f0:	sub	sp, sp, #272	; 0x110
    15f4:	str	r0, [fp, #-256]	; 0xffffff00
    15f8:	str	r1, [fp, #-260]	; 0xfffffefc
    15fc:	str	r2, [fp, #-264]	; 0xfffffef8
    1600:	mov	r3, #0
    1604:	str	r3, [fp, #-12]
    1608:	mov	r3, #0
    160c:	str	r3, [fp, #-8]
    1610:	ldr	r3, [fp, #-264]	; 0xfffffef8
    1614:	cmp	r3, #0
    1618:	bne	1624 <generate_challenge+0x40>
    161c:	mov	r3, #0
    1620:	b	1790 <generate_challenge+0x1ac>
    1624:	sub	r3, fp, #248	; 0xf8
    1628:	mov	r1, #128	; 0x80
    162c:	mov	r0, r3
    1630:	bl	904 <rb_get_random@plt>
    1634:	mov	r3, r0
    1638:	cmp	r3, #0
    163c:	beq	1724 <generate_challenge+0x140>
    1640:	sub	r3, fp, #120	; 0x78
    1644:	mov	r0, r3
    1648:	bl	970 <SHA1_Init@plt>
    164c:	sub	r1, fp, #248	; 0xf8
    1650:	sub	r3, fp, #120	; 0x78
    1654:	mov	r2, #128	; 0x80
    1658:	mov	r0, r3
    165c:	bl	94c <SHA1_Update@plt>
    1660:	mov	r0, #20
    1664:	bl	8f8 <malloc@plt>
    1668:	mov	r3, r0
    166c:	mov	r2, r3
    1670:	ldr	r3, [fp, #-260]	; 0xfffffefc
    1674:	str	r2, [r3]
    1678:	ldr	r3, [fp, #-260]	; 0xfffffefc
    167c:	ldr	r3, [r3]
    1680:	sub	r2, fp, #120	; 0x78
    1684:	mov	r1, r2
    1688:	mov	r0, r3
    168c:	bl	9c4 <SHA1_Final@plt>
    1690:	ldr	r0, [fp, #-264]	; 0xfffffef8
    1694:	bl	8b0 <RSA_size@plt>
    1698:	mov	r3, r0
    169c:	str	r3, [fp, #-16]
    16a0:	ldr	r0, [fp, #-16]
    16a4:	bl	af4 <rb_malloc>
    16a8:	str	r0, [fp, #-20]	; 0xffffffec
    16ac:	sub	r1, fp, #248	; 0xf8
    16b0:	mov	r3, #4
    16b4:	str	r3, [sp]
    16b8:	ldr	r3, [fp, #-264]	; 0xfffffef8
    16bc:	ldr	r2, [fp, #-20]	; 0xffffffec
    16c0:	mov	r0, #128	; 0x80
    16c4:	bl	880 <RSA_public_encrypt@plt>
    16c8:	str	r0, [fp, #-24]	; 0xffffffe8
    16cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16d0:	cmp	r3, #0
    16d4:	blt	1700 <generate_challenge+0x11c>
    16d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    16dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    16e0:	bl	9b8 <rb_base64_encode@plt>
    16e4:	mov	r2, r0
    16e8:	ldr	r3, [fp, #-256]	; 0xffffff00
    16ec:	str	r2, [r3]
    16f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    16f4:	bl	bcc <rb_free>
    16f8:	mov	r3, #1
    16fc:	b	1790 <generate_challenge+0x1ac>
    1700:	ldr	r0, [fp, #-20]	; 0xffffffec
    1704:	bl	bcc <rb_free>
    1708:	ldr	r3, [fp, #-260]	; 0xfffffefc
    170c:	ldr	r3, [r3]
    1710:	mov	r0, r3
    1714:	bl	bcc <rb_free>
    1718:	ldr	r3, [fp, #-260]	; 0xfffffefc
    171c:	mov	r2, #0
    1720:	str	r2, [r3]
    1724:	mov	r2, #0
    1728:	mov	r0, #2
    172c:	mov	r1, #0
    1730:	bl	91c <OPENSSL_init_crypto@plt>
    1734:	b	176c <generate_challenge+0x188>
    1738:	mov	r1, #0
    173c:	ldr	r0, [fp, #-12]
    1740:	bl	958 <ERR_error_string@plt>
    1744:	mov	r3, r0
    1748:	mov	r2, r3
    174c:	ldr	r3, [pc, #80]	; 17a4 <generate_challenge+0x1c0>
    1750:	add	r3, pc, r3
    1754:	mov	r1, r3
    1758:	mov	r0, #0
    175c:	bl	964 <ilog@plt>
    1760:	ldr	r3, [fp, #-8]
    1764:	add	r3, r3, #1
    1768:	str	r3, [fp, #-8]
    176c:	ldr	r3, [fp, #-8]
    1770:	cmp	r3, #99	; 0x63
    1774:	bhi	178c <generate_challenge+0x1a8>
    1778:	bl	97c <ERR_get_error@plt>
    177c:	str	r0, [fp, #-12]
    1780:	ldr	r3, [fp, #-12]
    1784:	cmp	r3, #0
    1788:	bne	1738 <generate_challenge+0x154>
    178c:	mov	r3, #0
    1790:	mov	r0, r3
    1794:	sub	sp, fp, #4
    1798:	ldr	fp, [sp]
    179c:	add	sp, sp, #4
    17a0:	pop	{pc}		; (ldr pc, [sp], #4)
    17a4:	.word	0x00000464

Disassembly of section .fini:

000017a8 <_fini>:
    17a8:	push	{r3, lr}
    17ac:	pop	{r3, pc}
