
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010e30 <.init>:
   10e30:	push	{r3, lr}
   10e34:	bl	10f94 <_start@@Base+0x3c>
   10e38:	pop	{r3, pc}

Disassembly of section .plt:

00010e3c <strcmp@plt-0x14>:
   10e3c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e40:	ldr	lr, [pc, #4]	; 10e4c <strcmp@plt-0x4>
   10e44:	add	lr, pc, lr
   10e48:	ldr	pc, [lr, #8]!
   10e4c:			; <UNDEFINED> instruction: 0x000141b4

00010e50 <strcmp@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #436]!	; 0x1b4

00010e5c <printf@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #428]!	; 0x1ac

00010e68 <fopen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #420]!	; 0x1a4

00010e74 <free@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #412]!	; 0x19c

00010e80 <memcpy@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #404]!	; 0x194

00010e8c <ftell@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #396]!	; 0x18c

00010e98 <rewind@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #388]!	; 0x184

00010ea4 <fwrite@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #380]!	; 0x17c

00010eb0 <puts@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #20, 20	; 0x14000
   10eb8:	ldr	pc, [ip, #372]!	; 0x174

00010ebc <malloc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #20, 20	; 0x14000
   10ec4:	ldr	pc, [ip, #364]!	; 0x16c

00010ec8 <__libc_start_main@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #20, 20	; 0x14000
   10ed0:	ldr	pc, [ip, #356]!	; 0x164

00010ed4 <__gmon_start__@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #20, 20	; 0x14000
   10edc:	ldr	pc, [ip, #348]!	; 0x15c

00010ee0 <exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #20, 20	; 0x14000
   10ee8:	ldr	pc, [ip, #340]!	; 0x154

00010eec <fprintf@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #20, 20	; 0x14000
   10ef4:	ldr	pc, [ip, #332]!	; 0x14c

00010ef8 <posix_memalign@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #20, 20	; 0x14000
   10f00:	ldr	pc, [ip, #324]!	; 0x144

00010f04 <strncpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #20, 20	; 0x14000
   10f0c:	ldr	pc, [ip, #316]!	; 0x13c

00010f10 <fclose@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #20, 20	; 0x14000
   10f18:	ldr	pc, [ip, #308]!	; 0x134

00010f1c <fputc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #20, 20	; 0x14000
   10f24:	ldr	pc, [ip, #300]!	; 0x12c

00010f28 <fread_unlocked@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #20, 20	; 0x14000
   10f30:	ldr	pc, [ip, #292]!	; 0x124

00010f34 <fseek@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #20, 20	; 0x14000
   10f3c:	ldr	pc, [ip, #284]!	; 0x11c

00010f40 <abort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #20, 20	; 0x14000
   10f48:	ldr	pc, [ip, #276]!	; 0x114

00010f4c <__assert_fail@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #20, 20	; 0x14000
   10f54:	ldr	pc, [ip, #268]!	; 0x10c

Disassembly of section .text:

00010f58 <_start@@Base>:
   10f58:	mov	fp, #0
   10f5c:	mov	lr, #0
   10f60:	pop	{r1}		; (ldr r1, [sp], #4)
   10f64:	mov	r2, sp
   10f68:	push	{r2}		; (str r2, [sp, #-4]!)
   10f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f70:	ldr	ip, [pc, #16]	; 10f88 <_start@@Base+0x30>
   10f74:	push	{ip}		; (str ip, [sp, #-4]!)
   10f78:	ldr	r0, [pc, #12]	; 10f8c <_start@@Base+0x34>
   10f7c:	ldr	r3, [pc, #12]	; 10f90 <_start@@Base+0x38>
   10f80:	bl	10ec8 <__libc_start_main@plt>
   10f84:	bl	10f40 <abort@plt>
   10f88:	andeq	r3, r1, ip, lsr #28
   10f8c:	ldrdeq	r1, [r1], -r8
   10f90:	andeq	r3, r1, ip, asr #27
   10f94:	ldr	r3, [pc, #20]	; 10fb0 <_start@@Base+0x58>
   10f98:	ldr	r2, [pc, #20]	; 10fb4 <_start@@Base+0x5c>
   10f9c:	add	r3, pc, r3
   10fa0:	ldr	r2, [r3, r2]
   10fa4:	cmp	r2, #0
   10fa8:	bxeq	lr
   10fac:	b	10ed4 <__gmon_start__@plt>
   10fb0:	andeq	r4, r1, ip, asr r0
   10fb4:	andeq	r0, r0, r8, rrx
   10fb8:	ldr	r0, [pc, #24]	; 10fd8 <_start@@Base+0x80>
   10fbc:	ldr	r3, [pc, #24]	; 10fdc <_start@@Base+0x84>
   10fc0:	cmp	r3, r0
   10fc4:	bxeq	lr
   10fc8:	ldr	r3, [pc, #16]	; 10fe0 <_start@@Base+0x88>
   10fcc:	cmp	r3, #0
   10fd0:	bxeq	lr
   10fd4:	bx	r3
   10fd8:	andeq	r5, r2, ip, ror r0
   10fdc:	andeq	r5, r2, ip, ror r0
   10fe0:	andeq	r0, r0, r0
   10fe4:	ldr	r0, [pc, #36]	; 11010 <_start@@Base+0xb8>
   10fe8:	ldr	r1, [pc, #36]	; 11014 <_start@@Base+0xbc>
   10fec:	sub	r1, r1, r0
   10ff0:	asr	r1, r1, #2
   10ff4:	add	r1, r1, r1, lsr #31
   10ff8:	asrs	r1, r1, #1
   10ffc:	bxeq	lr
   11000:	ldr	r3, [pc, #16]	; 11018 <_start@@Base+0xc0>
   11004:	cmp	r3, #0
   11008:	bxeq	lr
   1100c:	bx	r3
   11010:	andeq	r5, r2, ip, ror r0
   11014:	andeq	r5, r2, ip, ror r0
   11018:	andeq	r0, r0, r0
   1101c:	push	{r4, lr}
   11020:	ldr	r4, [pc, #24]	; 11040 <_start@@Base+0xe8>
   11024:	ldrb	r3, [r4]
   11028:	cmp	r3, #0
   1102c:	popne	{r4, pc}
   11030:	bl	10fb8 <_start@@Base+0x60>
   11034:	mov	r3, #1
   11038:	strb	r3, [r4]
   1103c:	pop	{r4, pc}
   11040:	andeq	r5, r2, ip, ror r0
   11044:	b	10fe4 <_start@@Base+0x8c>

00011048 <verify_monster@@Base>:
   11048:	push	{r4, r5, r6, r7, fp, lr}
   1104c:	add	fp, sp, #16
   11050:	cmp	r0, #0
   11054:	beq	110c0 <verify_monster@@Base+0x78>
   11058:	ldr	r1, [r0, #4]
   1105c:	movw	r2, #20301	; 0x4f4d
   11060:	movt	r2, #21326	; 0x534e
   11064:	cmp	r1, r2
   11068:	bne	110c0 <verify_monster@@Base+0x78>
   1106c:	ldr	r1, [r0]
   11070:	mov	r4, r0
   11074:	ldr	r1, [r4, r1]!
   11078:	mov	r5, r4
   1107c:	ldrh	r6, [r5, -r1]!
   11080:	cmp	r6, #9
   11084:	bls	110cc <verify_monster@@Base+0x84>
   11088:	ldrh	r1, [r5, #8]
   1108c:	cmp	r1, #0
   11090:	beq	110cc <verify_monster@@Base+0x84>
   11094:	add	r1, r4, r1
   11098:	ldrh	r1, [r1]
   1109c:	cmp	r1, #80	; 0x50
   110a0:	bne	110cc <verify_monster@@Base+0x84>
   110a4:	ldrh	r1, [r5, #4]
   110a8:	cmp	r1, #0
   110ac:	addsne	r1, r4, r1
   110b0:	bne	110e0 <verify_monster@@Base+0x98>
   110b4:	ldr	r0, [pc, #1600]	; 116fc <verify_monster@@Base+0x6b4>
   110b8:	add	r0, pc, r0
   110bc:	b	110d4 <verify_monster@@Base+0x8c>
   110c0:	ldr	r0, [pc, #1584]	; 116f8 <verify_monster@@Base+0x6b0>
   110c4:	add	r0, pc, r0
   110c8:	b	110d4 <verify_monster@@Base+0x8c>
   110cc:	ldr	r0, [pc, #1568]	; 116f4 <verify_monster@@Base+0x6ac>
   110d0:	add	r0, pc, r0
   110d4:	bl	10eb0 <puts@plt>
   110d8:	mvn	r0, #0
   110dc:	pop	{r4, r5, r6, r7, fp, pc}
   110e0:	sub	r0, r1, r0
   110e4:	tst	r0, #15
   110e8:	beq	110f8 <verify_monster@@Base+0xb0>
   110ec:	ldr	r0, [pc, #1548]	; 11700 <verify_monster@@Base+0x6b8>
   110f0:	add	r0, pc, r0
   110f4:	b	110d4 <verify_monster@@Base+0x8c>
   110f8:	vldr	s0, [r1]
   110fc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   11100:	vcmp.f32	s0, s2
   11104:	vmrs	APSR_nzcv, fpscr
   11108:	beq	11118 <verify_monster@@Base+0xd0>
   1110c:	ldr	r0, [pc, #1520]	; 11704 <verify_monster@@Base+0x6bc>
   11110:	add	r0, pc, r0
   11114:	b	110d4 <verify_monster@@Base+0x8c>
   11118:	vldr	s0, [r1, #4]
   1111c:	vmov.f32	s2, #0	; 0x40000000  2.0
   11120:	vcmp.f32	s0, s2
   11124:	vmrs	APSR_nzcv, fpscr
   11128:	beq	11138 <verify_monster@@Base+0xf0>
   1112c:	ldr	r0, [pc, #1492]	; 11708 <verify_monster@@Base+0x6c0>
   11130:	add	r0, pc, r0
   11134:	b	110d4 <verify_monster@@Base+0x8c>
   11138:	vldr	s0, [r1, #8]
   1113c:	vmov.f32	s2, #8	; 0x40400000  3.0
   11140:	vcmp.f32	s0, s2
   11144:	vmrs	APSR_nzcv, fpscr
   11148:	beq	11158 <verify_monster@@Base+0x110>
   1114c:	ldr	r0, [pc, #1464]	; 1170c <verify_monster@@Base+0x6c4>
   11150:	add	r0, pc, r0
   11154:	b	110d4 <verify_monster@@Base+0x8c>
   11158:	vldr	d16, [r1, #16]
   1115c:	vmov.f64	d17, #8	; 0x40400000  3.0
   11160:	vcmp.f64	d16, d17
   11164:	vmrs	APSR_nzcv, fpscr
   11168:	beq	11178 <verify_monster@@Base+0x130>
   1116c:	ldr	r0, [pc, #1436]	; 11710 <verify_monster@@Base+0x6c8>
   11170:	add	r0, pc, r0
   11174:	b	110d4 <verify_monster@@Base+0x8c>
   11178:	ldrb	r0, [r1, #24]
   1117c:	cmp	r0, #2
   11180:	bne	111a4 <verify_monster@@Base+0x15c>
   11184:	ldrh	r0, [r1, #26]
   11188:	cmp	r0, #5
   1118c:	ldrbeq	r0, [r1, #28]
   11190:	cmpeq	r0, #6
   11194:	beq	111b0 <verify_monster@@Base+0x168>
   11198:	ldr	r0, [pc, #1400]	; 11718 <verify_monster@@Base+0x6d0>
   1119c:	add	r0, pc, r0
   111a0:	b	110d4 <verify_monster@@Base+0x8c>
   111a4:	ldr	r0, [pc, #1384]	; 11714 <verify_monster@@Base+0x6cc>
   111a8:	add	r0, pc, r0
   111ac:	b	110d4 <verify_monster@@Base+0x8c>
   111b0:	cmp	r6, #12
   111b4:	bcc	115f4 <verify_monster@@Base+0x5ac>
   111b8:	ldrh	r1, [r5, #10]
   111bc:	cmp	r1, #0
   111c0:	beq	115f4 <verify_monster@@Base+0x5ac>
   111c4:	mov	r0, r4
   111c8:	ldr	r1, [r0, r1]!
   111cc:	ldr	r1, [r0, r1]!
   111d0:	cmp	r1, #9
   111d4:	bne	111fc <verify_monster@@Base+0x1b4>
   111d8:	ldr	r1, [pc, #1344]	; 11720 <verify_monster@@Base+0x6d8>
   111dc:	add	r0, r0, #4
   111e0:	add	r1, pc, r1
   111e4:	bl	10e50 <strcmp@plt>
   111e8:	cmp	r0, #0
   111ec:	beq	11208 <verify_monster@@Base+0x1c0>
   111f0:	ldr	r0, [pc, #1324]	; 11724 <verify_monster@@Base+0x6dc>
   111f4:	add	r0, pc, r0
   111f8:	b	110d4 <verify_monster@@Base+0x8c>
   111fc:	ldr	r0, [pc, #1304]	; 1171c <verify_monster@@Base+0x6d4>
   11200:	add	r0, pc, r0
   11204:	b	110d4 <verify_monster@@Base+0x8c>
   11208:	cmp	r6, #16
   1120c:	bcc	112dc <verify_monster@@Base+0x294>
   11210:	ldrh	r1, [r5, #14]
   11214:	cmp	r1, #0
   11218:	beq	112dc <verify_monster@@Base+0x294>
   1121c:	mov	r0, r4
   11220:	ldr	r1, [r0, r1]!
   11224:	ldr	r1, [r0, r1]!
   11228:	cmp	r1, #5
   1122c:	bne	112dc <verify_monster@@Base+0x294>
   11230:	add	r0, r0, #4
   11234:	mov	r1, #0
   11238:	ldrb	r2, [r0]
   1123c:	cmp	r2, #0
   11240:	bne	112e8 <verify_monster@@Base+0x2a0>
   11244:	ldrb	r2, [r0, #1]
   11248:	mov	r1, #1
   1124c:	cmp	r2, #1
   11250:	bne	112e8 <verify_monster@@Base+0x2a0>
   11254:	ldrb	r2, [r0, #2]
   11258:	mov	r1, #2
   1125c:	cmp	r2, #2
   11260:	bne	112e8 <verify_monster@@Base+0x2a0>
   11264:	ldrb	r2, [r0, #3]
   11268:	mov	r1, #3
   1126c:	cmp	r2, #3
   11270:	bne	112e8 <verify_monster@@Base+0x2a0>
   11274:	ldrb	r0, [r0, #4]
   11278:	mov	r1, #4
   1127c:	cmp	r0, #4
   11280:	bne	112e8 <verify_monster@@Base+0x2a0>
   11284:	cmp	r6, #25
   11288:	bls	112fc <verify_monster@@Base+0x2b4>
   1128c:	ldrh	r1, [r5, #24]
   11290:	cmp	r1, #0
   11294:	beq	112fc <verify_monster@@Base+0x2b4>
   11298:	mov	r0, r4
   1129c:	ldr	r1, [r0, r1]!
   112a0:	ldr	r1, [r0, r1]!
   112a4:	cmp	r1, #2
   112a8:	bne	11308 <verify_monster@@Base+0x2c0>
   112ac:	add	r7, r0, #4
   112b0:	ldr	r0, [r7]
   112b4:	ldr	r1, [pc, #1148]	; 11738 <verify_monster@@Base+0x6f0>
   112b8:	add	r0, r7, r0
   112bc:	add	r1, pc, r1
   112c0:	add	r0, r0, #4
   112c4:	bl	10e50 <strcmp@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	11314 <verify_monster@@Base+0x2cc>
   112d0:	ldr	r0, [pc, #1124]	; 1173c <verify_monster@@Base+0x6f4>
   112d4:	add	r0, pc, r0
   112d8:	b	110d4 <verify_monster@@Base+0x8c>
   112dc:	ldr	r0, [pc, #1092]	; 11728 <verify_monster@@Base+0x6e0>
   112e0:	add	r0, pc, r0
   112e4:	b	110d4 <verify_monster@@Base+0x8c>
   112e8:	ldr	r0, [pc, #1084]	; 1172c <verify_monster@@Base+0x6e4>
   112ec:	add	r0, pc, r0
   112f0:	bl	10e5c <printf@plt>
   112f4:	mvn	r0, #0
   112f8:	pop	{r4, r5, r6, r7, fp, pc}
   112fc:	ldr	r0, [pc, #1068]	; 11730 <verify_monster@@Base+0x6e8>
   11300:	add	r0, pc, r0
   11304:	b	110d4 <verify_monster@@Base+0x8c>
   11308:	ldr	r0, [pc, #1060]	; 11734 <verify_monster@@Base+0x6ec>
   1130c:	add	r0, pc, r0
   11310:	b	110d4 <verify_monster@@Base+0x8c>
   11314:	ldr	r0, [r7, #4]!
   11318:	ldr	r1, [pc, #1056]	; 11740 <verify_monster@@Base+0x6f8>
   1131c:	add	r0, r7, r0
   11320:	add	r1, pc, r1
   11324:	add	r0, r0, #4
   11328:	bl	10e50 <strcmp@plt>
   1132c:	cmp	r0, #0
   11330:	beq	11340 <verify_monster@@Base+0x2f8>
   11334:	ldr	r0, [pc, #1032]	; 11744 <verify_monster@@Base+0x6fc>
   11338:	add	r0, pc, r0
   1133c:	b	110d4 <verify_monster@@Base+0x8c>
   11340:	ldrh	r0, [r5, #18]
   11344:	cmp	r0, #0
   11348:	beq	1137c <verify_monster@@Base+0x334>
   1134c:	ldrb	r0, [r4, r0]
   11350:	cmp	r0, #1
   11354:	bne	1137c <verify_monster@@Base+0x334>
   11358:	ldrh	r0, [r5, #20]
   1135c:	cmp	r0, #0
   11360:	movne	r1, r4
   11364:	ldrne	r0, [r1, r0]!
   11368:	addsne	r0, r1, r0
   1136c:	bne	11388 <verify_monster@@Base+0x340>
   11370:	ldr	r0, [pc, #980]	; 1174c <verify_monster@@Base+0x704>
   11374:	add	r0, pc, r0
   11378:	b	110d4 <verify_monster@@Base+0x8c>
   1137c:	ldr	r0, [pc, #964]	; 11748 <verify_monster@@Base+0x700>
   11380:	add	r0, pc, r0
   11384:	b	110d4 <verify_monster@@Base+0x8c>
   11388:	ldr	r2, [r0]
   1138c:	mov	r1, r0
   11390:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   11394:	cmp	r2, #12
   11398:	bcc	115f4 <verify_monster@@Base+0x5ac>
   1139c:	ldrh	r1, [r1, #10]
   113a0:	cmp	r1, #0
   113a4:	beq	115f4 <verify_monster@@Base+0x5ac>
   113a8:	ldr	r1, [r0, r1]!
   113ac:	add	r0, r0, r1
   113b0:	ldr	r1, [pc, #920]	; 11750 <verify_monster@@Base+0x708>
   113b4:	add	r0, r0, #4
   113b8:	add	r1, pc, r1
   113bc:	bl	10e50 <strcmp@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	113d4 <verify_monster@@Base+0x38c>
   113c8:	ldr	r0, [pc, #900]	; 11754 <verify_monster@@Base+0x70c>
   113cc:	add	r0, pc, r0
   113d0:	b	110d4 <verify_monster@@Base+0x8c>
   113d4:	ldrh	r1, [r5, #22]
   113d8:	cmp	r1, #0
   113dc:	beq	115b8 <verify_monster@@Base+0x570>
   113e0:	mov	r0, r4
   113e4:	ldr	r1, [r0, r1]!
   113e8:	ldr	r1, [r0, r1]!
   113ec:	cmp	r1, #2
   113f0:	bne	115b8 <verify_monster@@Base+0x570>
   113f4:	add	r0, r0, #4
   113f8:	ldrh	r1, [r0]
   113fc:	cmp	r1, #10
   11400:	bne	115c4 <verify_monster@@Base+0x57c>
   11404:	ldrb	r1, [r0, #2]
   11408:	cmp	r1, #20
   1140c:	bne	115d0 <verify_monster@@Base+0x588>
   11410:	ldrh	r1, [r0, #4]
   11414:	cmp	r1, #30
   11418:	bne	115dc <verify_monster@@Base+0x594>
   1141c:	ldrb	r0, [r0, #6]
   11420:	cmp	r0, #40	; 0x28
   11424:	bne	115e8 <verify_monster@@Base+0x5a0>
   11428:	cmp	r6, #38	; 0x26
   1142c:	bcc	11614 <verify_monster@@Base+0x5cc>
   11430:	ldrh	r0, [r5, #36]	; 0x24
   11434:	cmp	r0, #0
   11438:	beq	11614 <verify_monster@@Base+0x5cc>
   1143c:	ldr	r1, [r4, r0]
   11440:	movw	r0, #51521	; 0xc941
   11444:	movt	r0, #56697	; 0xdd79
   11448:	cmp	r1, r0
   1144c:	bne	11614 <verify_monster@@Base+0x5cc>
   11450:	cmp	r6, #40	; 0x28
   11454:	bcc	11634 <verify_monster@@Base+0x5ec>
   11458:	ldrh	r1, [r5, #38]	; 0x26
   1145c:	cmp	r1, #0
   11460:	beq	11634 <verify_monster@@Base+0x5ec>
   11464:	ldr	r1, [r4, r1]
   11468:	cmp	r1, r0
   1146c:	bne	11634 <verify_monster@@Base+0x5ec>
   11470:	cmp	r6, #42	; 0x2a
   11474:	bcc	11654 <verify_monster@@Base+0x60c>
   11478:	ldrh	r0, [r5, #40]	; 0x28
   1147c:	cmp	r0, #0
   11480:	beq	11654 <verify_monster@@Base+0x60c>
   11484:	mov	r1, r4
   11488:	ldr	r2, [r1, r0]!
   1148c:	movw	r0, #37249	; 0x9181
   11490:	movt	r0, #62075	; 0xf27b
   11494:	ldr	r3, [r1, #4]
   11498:	movw	r1, #32973	; 0x80cd
   1149c:	eor	r2, r2, r0
   114a0:	movt	r1, #28175	; 0x6e0f
   114a4:	eor	r3, r3, r1
   114a8:	orrs	r2, r2, r3
   114ac:	bne	11654 <verify_monster@@Base+0x60c>
   114b0:	cmp	r6, #44	; 0x2c
   114b4:	bcc	11674 <verify_monster@@Base+0x62c>
   114b8:	ldrh	r2, [r5, #42]	; 0x2a
   114bc:	cmp	r2, #0
   114c0:	beq	11674 <verify_monster@@Base+0x62c>
   114c4:	mov	r3, r4
   114c8:	ldr	r2, [r3, r2]!
   114cc:	eor	r0, r2, r0
   114d0:	ldr	r2, [r3, #4]
   114d4:	eor	r1, r2, r1
   114d8:	orrs	r0, r0, r1
   114dc:	bne	11674 <verify_monster@@Base+0x62c>
   114e0:	cmp	r6, #46	; 0x2e
   114e4:	bcc	11694 <verify_monster@@Base+0x64c>
   114e8:	ldrh	r0, [r5, #44]	; 0x2c
   114ec:	cmp	r0, #0
   114f0:	beq	11694 <verify_monster@@Base+0x64c>
   114f4:	ldr	r1, [r4, r0]
   114f8:	movw	r0, #42097	; 0xa471
   114fc:	movt	r0, #36481	; 0x8e81
   11500:	cmp	r1, r0
   11504:	bne	11694 <verify_monster@@Base+0x64c>
   11508:	cmp	r6, #48	; 0x30
   1150c:	bcc	116b4 <verify_monster@@Base+0x66c>
   11510:	ldrh	r1, [r5, #46]	; 0x2e
   11514:	cmp	r1, #0
   11518:	beq	116b4 <verify_monster@@Base+0x66c>
   1151c:	ldr	r1, [r4, r1]
   11520:	cmp	r1, r0
   11524:	bne	116b4 <verify_monster@@Base+0x66c>
   11528:	cmp	r6, #50	; 0x32
   1152c:	bcc	116d4 <verify_monster@@Base+0x68c>
   11530:	ldrh	r0, [r5, #48]	; 0x30
   11534:	cmp	r0, #0
   11538:	beq	116d4 <verify_monster@@Base+0x68c>
   1153c:	mov	r1, r4
   11540:	ldr	r2, [r1, r0]!
   11544:	movw	r0, #56817	; 0xddf1
   11548:	movt	r0, #51047	; 0xc767
   1154c:	ldr	r3, [r1, #4]
   11550:	movw	r1, #18652	; 0x48dc
   11554:	eor	r2, r2, r0
   11558:	movt	r1, #17401	; 0x43f9
   1155c:	eor	r3, r3, r1
   11560:	orrs	r2, r2, r3
   11564:	bne	116d4 <verify_monster@@Base+0x68c>
   11568:	cmp	r6, #52	; 0x34
   1156c:	bcc	11598 <verify_monster@@Base+0x550>
   11570:	ldrh	r2, [r5, #50]	; 0x32
   11574:	cmp	r2, #0
   11578:	beq	11598 <verify_monster@@Base+0x550>
   1157c:	ldr	r2, [r4, r2]!
   11580:	eor	r0, r2, r0
   11584:	ldr	r2, [r4, #4]
   11588:	eor	r1, r2, r1
   1158c:	orrs	r0, r0, r1
   11590:	mov	r0, #0
   11594:	popeq	{r4, r5, r6, r7, fp, pc}
   11598:	ldr	r0, [pc, #556]	; 117cc <verify_monster@@Base+0x784>
   1159c:	ldr	r1, [pc, #556]	; 117d0 <verify_monster@@Base+0x788>
   115a0:	ldr	r3, [pc, #556]	; 117d4 <verify_monster@@Base+0x78c>
   115a4:	mov	r2, #155	; 0x9b
   115a8:	add	r0, pc, r0
   115ac:	add	r1, pc, r1
   115b0:	add	r3, pc, r3
   115b4:	bl	10f4c <__assert_fail@plt>
   115b8:	ldr	r0, [pc, #408]	; 11758 <verify_monster@@Base+0x710>
   115bc:	add	r0, pc, r0
   115c0:	b	110d4 <verify_monster@@Base+0x8c>
   115c4:	ldr	r0, [pc, #400]	; 1175c <verify_monster@@Base+0x714>
   115c8:	add	r0, pc, r0
   115cc:	b	110d4 <verify_monster@@Base+0x8c>
   115d0:	ldr	r0, [pc, #392]	; 11760 <verify_monster@@Base+0x718>
   115d4:	add	r0, pc, r0
   115d8:	b	110d4 <verify_monster@@Base+0x8c>
   115dc:	ldr	r0, [pc, #384]	; 11764 <verify_monster@@Base+0x71c>
   115e0:	add	r0, pc, r0
   115e4:	b	110d4 <verify_monster@@Base+0x8c>
   115e8:	ldr	r0, [pc, #376]	; 11768 <verify_monster@@Base+0x720>
   115ec:	add	r0, pc, r0
   115f0:	b	110d4 <verify_monster@@Base+0x8c>
   115f4:	ldr	r0, [pc, #368]	; 1176c <verify_monster@@Base+0x724>
   115f8:	ldr	r1, [pc, #368]	; 11770 <verify_monster@@Base+0x728>
   115fc:	ldr	r3, [pc, #368]	; 11774 <verify_monster@@Base+0x72c>
   11600:	movw	r2, #699	; 0x2bb
   11604:	add	r0, pc, r0
   11608:	add	r1, pc, r1
   1160c:	add	r3, pc, r3
   11610:	bl	10f4c <__assert_fail@plt>
   11614:	ldr	r0, [pc, #348]	; 11778 <verify_monster@@Base+0x730>
   11618:	ldr	r1, [pc, #348]	; 1177c <verify_monster@@Base+0x734>
   1161c:	ldr	r3, [pc, #348]	; 11780 <verify_monster@@Base+0x738>
   11620:	mov	r2, #148	; 0x94
   11624:	add	r0, pc, r0
   11628:	add	r1, pc, r1
   1162c:	add	r3, pc, r3
   11630:	bl	10f4c <__assert_fail@plt>
   11634:	ldr	r0, [pc, #328]	; 11784 <verify_monster@@Base+0x73c>
   11638:	ldr	r1, [pc, #328]	; 11788 <verify_monster@@Base+0x740>
   1163c:	ldr	r3, [pc, #328]	; 1178c <verify_monster@@Base+0x744>
   11640:	mov	r2, #149	; 0x95
   11644:	add	r0, pc, r0
   11648:	add	r1, pc, r1
   1164c:	add	r3, pc, r3
   11650:	bl	10f4c <__assert_fail@plt>
   11654:	ldr	r0, [pc, #308]	; 11790 <verify_monster@@Base+0x748>
   11658:	ldr	r1, [pc, #308]	; 11794 <verify_monster@@Base+0x74c>
   1165c:	ldr	r3, [pc, #308]	; 11798 <verify_monster@@Base+0x750>
   11660:	mov	r2, #150	; 0x96
   11664:	add	r0, pc, r0
   11668:	add	r1, pc, r1
   1166c:	add	r3, pc, r3
   11670:	bl	10f4c <__assert_fail@plt>
   11674:	ldr	r0, [pc, #288]	; 1179c <verify_monster@@Base+0x754>
   11678:	ldr	r1, [pc, #288]	; 117a0 <verify_monster@@Base+0x758>
   1167c:	ldr	r3, [pc, #288]	; 117a4 <verify_monster@@Base+0x75c>
   11680:	mov	r2, #151	; 0x97
   11684:	add	r0, pc, r0
   11688:	add	r1, pc, r1
   1168c:	add	r3, pc, r3
   11690:	bl	10f4c <__assert_fail@plt>
   11694:	ldr	r0, [pc, #268]	; 117a8 <verify_monster@@Base+0x760>
   11698:	ldr	r1, [pc, #268]	; 117ac <verify_monster@@Base+0x764>
   1169c:	ldr	r3, [pc, #268]	; 117b0 <verify_monster@@Base+0x768>
   116a0:	mov	r2, #152	; 0x98
   116a4:	add	r0, pc, r0
   116a8:	add	r1, pc, r1
   116ac:	add	r3, pc, r3
   116b0:	bl	10f4c <__assert_fail@plt>
   116b4:	ldr	r0, [pc, #248]	; 117b4 <verify_monster@@Base+0x76c>
   116b8:	ldr	r1, [pc, #248]	; 117b8 <verify_monster@@Base+0x770>
   116bc:	ldr	r3, [pc, #248]	; 117bc <verify_monster@@Base+0x774>
   116c0:	mov	r2, #153	; 0x99
   116c4:	add	r0, pc, r0
   116c8:	add	r1, pc, r1
   116cc:	add	r3, pc, r3
   116d0:	bl	10f4c <__assert_fail@plt>
   116d4:	ldr	r0, [pc, #228]	; 117c0 <verify_monster@@Base+0x778>
   116d8:	ldr	r1, [pc, #228]	; 117c4 <verify_monster@@Base+0x77c>
   116dc:	ldr	r3, [pc, #228]	; 117c8 <verify_monster@@Base+0x780>
   116e0:	mov	r2, #154	; 0x9a
   116e4:	add	r0, pc, r0
   116e8:	add	r1, pc, r1
   116ec:	add	r3, pc, r3
   116f0:	bl	10f4c <__assert_fail@plt>
   116f4:	andeq	r3, r0, r8, ror #10
   116f8:	andeq	r3, r0, r4, lsl r2
   116fc:	andeq	r3, r0, r0, asr #4
   11700:	andeq	r3, r0, r8, lsl r5
   11704:	andeq	r3, r0, r8, asr #9
   11708:	andeq	r3, r0, r8, ror r4
   1170c:	andeq	r3, r0, r8, lsr #8
   11710:	andeq	r3, r0, r8, ror #7
   11714:	muleq	r0, r0, r3
   11718:	andeq	r3, r0, ip, ror r3
   1171c:	strdeq	r3, [r0], -r8
   11720:	andeq	r2, r0, r1, ror ip
   11724:	andeq	r3, r0, r4, lsr #2
   11728:	strdeq	r3, [r0], -r8
   1172c:	andeq	r2, r0, pc, ror #22
   11730:	andeq	r3, r0, r8, lsr r0
   11734:	muleq	r0, ip, r1
   11738:			; <UNDEFINED> instruction: 0x00002bbc
   1173c:	andeq	r3, r0, r4, lsr #3
   11740:	andeq	r2, r0, lr, asr fp
   11744:	andeq	r3, r0, r0, lsl r1
   11748:	andeq	r2, r0, ip, lsr pc
   1174c:	andeq	r2, r0, r4, ror #31
   11750:	andeq	r2, r0, ip, asr #21
   11754:	andeq	r3, r0, ip, asr r0
   11758:	andeq	r2, r0, ip, lsr lr
   1175c:	andeq	r2, r0, r0, lsl lr
   11760:	andeq	r2, r0, r4, ror #27
   11764:			; <UNDEFINED> instruction: 0x00002db8
   11768:	andeq	r2, r0, ip, lsl #27
   1176c:	andeq	r2, r0, r7, ror ip
   11770:	andeq	r2, r0, r9, lsr #23
   11774:	andeq	r2, r0, lr, lsl ip
   11778:	andeq	r2, r0, r5, ror #16
   1177c:	muleq	r0, r6, r8
   11780:	strdeq	r2, [r0], -sl
   11784:	strdeq	r2, [r0], -sp
   11788:	andeq	r2, r0, r6, ror r8
   1178c:	ldrdeq	r2, [r0], -sl
   11790:	andeq	r2, r0, r2, lsl r9
   11794:	andeq	r2, r0, r6, asr r8
   11798:			; <UNDEFINED> instruction: 0x000028ba
   1179c:	andeq	r2, r0, r1, lsr r9
   117a0:	andeq	r2, r0, r6, lsr r8
   117a4:	muleq	r0, sl, r8
   117a8:	andeq	r2, r0, r0, asr r9
   117ac:	andeq	r2, r0, r6, lsl r8
   117b0:	andeq	r2, r0, sl, ror r8
   117b4:	andeq	r2, r0, r7, ror #18
   117b8:	strdeq	r2, [r0], -r6
   117bc:	andeq	r2, r0, sl, asr r8
   117c0:	andeq	r2, r0, sp, ror r9
   117c4:	ldrdeq	r2, [r0], -r6
   117c8:	andeq	r2, r0, sl, lsr r8
   117cc:	strdeq	r2, [r0], -r9
   117d0:	andeq	r2, r0, r2, lsl r9
   117d4:	andeq	r2, r0, r6, ror r9

000117d8 <main@@Base>:
   117d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117dc:	add	fp, sp, #28
   117e0:	sub	sp, sp, #20
   117e4:	sub	r2, r0, #1
   117e8:	cmp	r2, #2
   117ec:	bcs	11b14 <main@@Base+0x33c>
   117f0:	cmp	r0, #2
   117f4:	bne	1180c <main@@Base+0x34>
   117f8:	ldr	r0, [r1, #4]
   117fc:	ldr	r1, [pc, #828]	; 11b40 <main@@Base+0x368>
   11800:	ldr	r1, [pc, r1]
   11804:	str	r0, [r1]
   11808:	b	11818 <main@@Base+0x40>
   1180c:	ldr	r0, [pc, #808]	; 11b3c <main@@Base+0x364>
   11810:	ldr	r0, [pc, r0]
   11814:	ldr	r0, [r0]
   11818:	ldr	r1, [pc, #804]	; 11b44 <main@@Base+0x36c>
   1181c:	add	r1, pc, r1
   11820:	bl	10e68 <fopen@plt>
   11824:	mov	r8, #0
   11828:	cmp	r0, #0
   1182c:	beq	11ad8 <main@@Base+0x300>
   11830:	mov	r1, #0
   11834:	mov	r2, #2
   11838:	mov	r5, r0
   1183c:	mov	r7, #0
   11840:	bl	10f34 <fseek@plt>
   11844:	mov	r0, r5
   11848:	bl	10e8c <ftell@plt>
   1184c:	mov	r4, r0
   11850:	cmp	r0, #1024	; 0x400
   11854:	bhi	11acc <main@@Base+0x2f4>
   11858:	mov	r0, r5
   1185c:	bl	10e98 <rewind@plt>
   11860:	cmp	r4, #0
   11864:	mov	r0, r4
   11868:	movweq	r0, #1
   1186c:	bl	10ebc <malloc@plt>
   11870:	cmp	r0, #0
   11874:	beq	11acc <main@@Base+0x2f4>
   11878:	mov	r6, r0
   1187c:	mov	r1, #0
   11880:	mov	r7, r1
   11884:	add	r0, r6, r1
   11888:	sub	r2, r4, r1
   1188c:	mov	r1, #1
   11890:	mov	r3, r5
   11894:	bl	10f28 <fread_unlocked@plt>
   11898:	add	r1, r0, r7
   1189c:	cmp	r0, #0
   118a0:	bne	11880 <main@@Base+0xa8>
   118a4:	mov	r0, r5
   118a8:	bl	10f10 <fclose@plt>
   118ac:	cmp	r4, r7
   118b0:	bne	118bc <main@@Base+0xe4>
   118b4:	mov	r7, r6
   118b8:	b	118c8 <main@@Base+0xf0>
   118bc:	mov	r0, r6
   118c0:	bl	10e74 <free@plt>
   118c4:	mov	r7, #0
   118c8:	add	r0, r4, #255	; 0xff
   118cc:	mov	r6, sp
   118d0:	mov	r1, #256	; 0x100
   118d4:	str	r8, [sp]
   118d8:	bic	r2, r0, #255	; 0xff
   118dc:	mov	r0, r6
   118e0:	bl	10ef8 <posix_memalign@plt>
   118e4:	ldr	r5, [sp]
   118e8:	cmp	r0, #0
   118ec:	cmpne	r5, #0
   118f0:	beq	11904 <main@@Base+0x12c>
   118f4:	mov	r0, r5
   118f8:	bl	10e74 <free@plt>
   118fc:	mov	r5, #0
   11900:	str	r5, [sp]
   11904:	mov	r0, r5
   11908:	mov	r1, r7
   1190c:	mov	r2, r4
   11910:	bl	10e80 <memcpy@plt>
   11914:	mov	r0, r7
   11918:	bl	10e74 <free@plt>
   1191c:	ldr	r9, [pc, #548]	; 11b48 <main@@Base+0x370>
   11920:	cmp	r5, #0
   11924:	ldr	r9, [pc, r9]
   11928:	ldr	r7, [r9]
   1192c:	bne	11954 <main@@Base+0x17c>
   11930:	ldr	r0, [pc, #532]	; 11b4c <main@@Base+0x374>
   11934:	ldr	r0, [pc, r0]
   11938:	ldr	r2, [r0]
   1193c:	ldr	r1, [pc, #524]	; 11b50 <main@@Base+0x378>
   11940:	mov	r0, r7
   11944:	add	r1, pc, r1
   11948:	bl	10eec <fprintf@plt>
   1194c:	mvn	r4, #0
   11950:	b	11ac0 <main@@Base+0x2e8>
   11954:	ldr	r1, [pc, #504]	; 11b54 <main@@Base+0x37c>
   11958:	ldr	r2, [pc, #504]	; 11b58 <main@@Base+0x380>
   1195c:	mov	r0, r7
   11960:	add	r1, pc, r1
   11964:	add	r2, pc, r2
   11968:	bl	10eec <fprintf@plt>
   1196c:	cmp	r4, #0
   11970:	beq	11a50 <main@@Base+0x278>
   11974:	ldr	sl, [pc, #480]	; 11b5c <main@@Base+0x384>
   11978:	mov	r9, #0
   1197c:	add	sl, pc, sl
   11980:	ands	r8, r9, #15
   11984:	bne	119bc <main@@Base+0x1e4>
   11988:	cmp	r9, #0
   1198c:	beq	119a4 <main@@Base+0x1cc>
   11990:	ldr	r1, [pc, #456]	; 11b60 <main@@Base+0x388>
   11994:	mov	r0, r7
   11998:	mov	r2, r6
   1199c:	add	r1, pc, r1
   119a0:	bl	10eec <fprintf@plt>
   119a4:	ldr	r1, [pc, #440]	; 11b64 <main@@Base+0x38c>
   119a8:	mov	r0, r7
   119ac:	mov	r2, r9
   119b0:	add	r1, pc, r1
   119b4:	bl	10eec <fprintf@plt>
   119b8:	b	119d0 <main@@Base+0x1f8>
   119bc:	tst	r9, #7
   119c0:	bne	119d0 <main@@Base+0x1f8>
   119c4:	mov	r0, #32
   119c8:	mov	r1, r7
   119cc:	bl	10f1c <fputc@plt>
   119d0:	ldrb	r2, [r5, r9]
   119d4:	mov	r0, r7
   119d8:	mov	r1, sl
   119dc:	bl	10eec <fprintf@plt>
   119e0:	ldrb	r0, [r5, r9]
   119e4:	add	r9, r9, #1
   119e8:	sub	r1, r0, #32
   119ec:	uxtb	r1, r1
   119f0:	cmp	r1, #94	; 0x5e
   119f4:	mov	r1, #0
   119f8:	movwhi	r0, #46	; 0x2e
   119fc:	cmp	r4, r9
   11a00:	strb	r0, [r6, r8]
   11a04:	add	r0, r6, r8
   11a08:	strb	r1, [r0, #1]
   11a0c:	bne	11980 <main@@Base+0x1a8>
   11a10:	ldr	r9, [pc, #336]	; 11b68 <main@@Base+0x390>
   11a14:	tst	r4, #15
   11a18:	ldr	r9, [pc, r9]
   11a1c:	beq	11a50 <main@@Base+0x278>
   11a20:	ldr	r8, [pc, #324]	; 11b6c <main@@Base+0x394>
   11a24:	add	r6, r4, #1
   11a28:	add	r8, pc, r8
   11a2c:	mov	r0, r8
   11a30:	mov	r1, #3
   11a34:	mov	r2, #1
   11a38:	mov	r3, r7
   11a3c:	bl	10ea4 <fwrite@plt>
   11a40:	add	r0, r6, #1
   11a44:	tst	r6, #15
   11a48:	mov	r6, r0
   11a4c:	bne	11a2c <main@@Base+0x254>
   11a50:	ldr	r1, [pc, #280]	; 11b70 <main@@Base+0x398>
   11a54:	mov	r2, sp
   11a58:	mov	r0, r7
   11a5c:	add	r1, pc, r1
   11a60:	bl	10eec <fprintf@plt>
   11a64:	ldr	r2, [pc, #264]	; 11b74 <main@@Base+0x39c>
   11a68:	ldr	r3, [pc, #264]	; 11b78 <main@@Base+0x3a0>
   11a6c:	mov	r0, r5
   11a70:	mov	r1, r4
   11a74:	add	r2, pc, r2
   11a78:	add	r3, pc, r3
   11a7c:	bl	131b8 <flatcc_verify_table_as_root@@Base>
   11a80:	cmp	r0, #0
   11a84:	bne	11ae0 <main@@Base+0x308>
   11a88:	ldr	r2, [pc, #240]	; 11b80 <main@@Base+0x3a8>
   11a8c:	ldr	r3, [pc, #240]	; 11b84 <main@@Base+0x3ac>
   11a90:	mov	r0, r5
   11a94:	mov	r1, r4
   11a98:	add	r2, pc, r2
   11a9c:	add	r3, pc, r3
   11aa0:	bl	131b8 <flatcc_verify_table_as_root@@Base>
   11aa4:	cmp	r0, #0
   11aa8:	bne	11af4 <main@@Base+0x31c>
   11aac:	mov	r0, r5
   11ab0:	bl	11048 <verify_monster@@Base>
   11ab4:	mov	r4, r0
   11ab8:	mov	r0, r5
   11abc:	bl	10e74 <free@plt>
   11ac0:	mov	r0, r4
   11ac4:	sub	sp, fp, #28
   11ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11acc:	mov	r0, r5
   11ad0:	bl	10f10 <fclose@plt>
   11ad4:	b	118c8 <main@@Base+0xf0>
   11ad8:	mov	r4, #0
   11adc:	b	118c4 <main@@Base+0xec>
   11ae0:	ldr	r3, [r9]
   11ae4:	ldr	r0, [pc, #144]	; 11b7c <main@@Base+0x3a4>
   11ae8:	mov	r1, #38	; 0x26
   11aec:	add	r0, pc, r0
   11af0:	b	11b04 <main@@Base+0x32c>
   11af4:	ldr	r3, [r9]
   11af8:	ldr	r0, [pc, #136]	; 11b88 <main@@Base+0x3b0>
   11afc:	mov	r1, #62	; 0x3e
   11b00:	add	r0, pc, r0
   11b04:	mov	r2, #1
   11b08:	bl	10ea4 <fwrite@plt>
   11b0c:	mvn	r4, #0
   11b10:	b	11ab8 <main@@Base+0x2e0>
   11b14:	ldr	r0, [pc, #112]	; 11b8c <main@@Base+0x3b4>
   11b18:	mov	r1, #63	; 0x3f
   11b1c:	mov	r2, #1
   11b20:	ldr	r0, [pc, r0]
   11b24:	ldr	r3, [r0]
   11b28:	ldr	r0, [pc, #96]	; 11b90 <main@@Base+0x3b8>
   11b2c:	add	r0, pc, r0
   11b30:	bl	10ea4 <fwrite@plt>
   11b34:	mov	r0, #1
   11b38:	bl	10ee0 <exit@plt>
   11b3c:	andeq	r3, r1, r4, asr r8
   11b40:	andeq	r3, r1, r4, ror #16
   11b44:	andeq	r2, r0, r0, lsl #21
   11b48:	andeq	r3, r1, r8, lsr r7
   11b4c:	andeq	r3, r1, r0, lsr r7
   11b50:	ldrdeq	r2, [r0], -sp
   11b54:	andeq	r2, r0, pc, lsr r9
   11b58:	ldrdeq	r2, [r0], -r8
   11b5c:	andeq	r2, r0, r6, lsr r9
   11b60:	andeq	r2, r0, r8, lsl #18
   11b64:	strdeq	r2, [r0], -sl
   11b68:	andeq	r3, r1, r4, asr #12
   11b6c:	muleq	r0, r0, r8
   11b70:	andeq	r2, r0, r8, asr #16
   11b74:	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
   11b78:	andeq	r0, r0, r4, lsl r1
   11b7c:	andeq	r2, r0, pc, asr r6
   11b80:	andeq	r2, r0, lr, lsr #13
   11b84:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11b88:	andeq	r2, r0, r2, ror r6
   11b8c:	andeq	r3, r1, ip, lsr r5
   11b90:			; <UNDEFINED> instruction: 0x000025b5
   11b94:	push	{r4, r5, r6, r7, fp, lr}
   11b98:	add	fp, sp, #16
   11b9c:	sub	sp, sp, #8
   11ba0:	mov	r1, #0
   11ba4:	mov	r2, #32
   11ba8:	mov	r3, #16
   11bac:	mov	r4, r0
   11bb0:	bl	12574 <flatcc_verify_field@@Base>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11fc0 <main@@Base+0x7e8>
   11bbc:	mov	r0, r4
   11bc0:	mov	r1, #2
   11bc4:	mov	r2, #2
   11bc8:	mov	r3, #2
   11bcc:	bl	12574 <flatcc_verify_field@@Base>
   11bd0:	cmp	r0, #0
   11bd4:	bne	11fc0 <main@@Base+0x7e8>
   11bd8:	mov	r0, r4
   11bdc:	mov	r1, #1
   11be0:	mov	r2, #2
   11be4:	mov	r3, #2
   11be8:	bl	12574 <flatcc_verify_field@@Base>
   11bec:	cmp	r0, #0
   11bf0:	bne	11fc0 <main@@Base+0x7e8>
   11bf4:	mov	r0, r4
   11bf8:	mov	r1, #3
   11bfc:	mov	r2, #1
   11c00:	bl	125f8 <flatcc_verify_string_field@@Base>
   11c04:	cmp	r0, #0
   11c08:	bne	11fc0 <main@@Base+0x7e8>
   11c0c:	mov	r0, r4
   11c10:	mov	r1, #6
   11c14:	mov	r2, #1
   11c18:	mov	r3, #1
   11c1c:	mov	r5, #1
   11c20:	bl	12574 <flatcc_verify_field@@Base>
   11c24:	cmp	r0, #0
   11c28:	bne	11fc0 <main@@Base+0x7e8>
   11c2c:	mvn	r0, #0
   11c30:	mov	r1, #5
   11c34:	mov	r2, #0
   11c38:	mov	r3, #1
   11c3c:	str	r5, [sp]
   11c40:	str	r0, [sp, #4]
   11c44:	mov	r0, r4
   11c48:	bl	126dc <flatcc_verify_vector_field@@Base>
   11c4c:	cmp	r0, #0
   11c50:	bne	11fc0 <main@@Base+0x7e8>
   11c54:	ldr	r3, [pc, #908]	; 11fe8 <main@@Base+0x810>
   11c58:	mov	r0, r4
   11c5c:	mov	r1, #11
   11c60:	mov	r2, #0
   11c64:	add	r3, pc, r3
   11c68:	bl	12acc <flatcc_verify_table_vector_field@@Base>
   11c6c:	cmp	r0, #0
   11c70:	bne	11fc0 <main@@Base+0x7e8>
   11c74:	mov	r0, r4
   11c78:	mov	r1, #10
   11c7c:	mov	r2, #0
   11c80:	bl	127d4 <flatcc_verify_string_vector_field@@Base>
   11c84:	cmp	r0, #0
   11c88:	bne	11fc0 <main@@Base+0x7e8>
   11c8c:	mov	r0, r4
   11c90:	mov	r1, #28
   11c94:	mov	r2, #0
   11c98:	bl	127d4 <flatcc_verify_string_vector_field@@Base>
   11c9c:	cmp	r0, #0
   11ca0:	bne	11fc0 <main@@Base+0x7e8>
   11ca4:	mvn	r0, #0
   11ca8:	mov	r1, #1
   11cac:	mov	r2, #0
   11cb0:	mov	r3, #1
   11cb4:	str	r1, [sp]
   11cb8:	str	r0, [sp, #4]
   11cbc:	mov	r0, r4
   11cc0:	mov	r1, #24
   11cc4:	bl	126dc <flatcc_verify_vector_field@@Base>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11fc0 <main@@Base+0x7e8>
   11cd0:	mvn	r0, #-536870912	; 0xe0000000
   11cd4:	mov	r1, #4
   11cd8:	mov	r2, #0
   11cdc:	mov	r3, #8
   11ce0:	str	r1, [sp]
   11ce4:	str	r0, [sp, #4]
   11ce8:	mov	r0, r4
   11cec:	mov	r1, #29
   11cf0:	bl	126dc <flatcc_verify_vector_field@@Base>
   11cf4:	cmp	r0, #0
   11cf8:	bne	11fc0 <main@@Base+0x7e8>
   11cfc:	ldr	r5, [pc, #744]	; 11fec <main@@Base+0x814>
   11d00:	mov	r0, r4
   11d04:	mov	r1, #12
   11d08:	mov	r2, #0
   11d0c:	add	r5, pc, r5
   11d10:	mov	r3, r5
   11d14:	bl	12978 <flatcc_verify_table_field@@Base>
   11d18:	cmp	r0, #0
   11d1c:	bne	11fc0 <main@@Base+0x7e8>
   11d20:	ldr	r3, [pc, #712]	; 11ff0 <main@@Base+0x818>
   11d24:	mov	r0, r4
   11d28:	mov	r1, #8
   11d2c:	mov	r2, #0
   11d30:	add	r3, pc, r3
   11d34:	bl	138fc <flatcc_verify_union_field@@Base>
   11d38:	cmp	r0, #0
   11d3c:	bne	11fc0 <main@@Base+0x7e8>
   11d40:	mvn	r6, #-1073741824	; 0xc0000000
   11d44:	mov	r7, #2
   11d48:	mov	r0, r4
   11d4c:	mov	r1, #9
   11d50:	mov	r2, #0
   11d54:	mov	r3, #4
   11d58:	str	r7, [sp]
   11d5c:	str	r6, [sp, #4]
   11d60:	bl	126dc <flatcc_verify_vector_field@@Base>
   11d64:	cmp	r0, #0
   11d68:	bne	11fc0 <main@@Base+0x7e8>
   11d6c:	mov	r0, r4
   11d70:	mov	r1, #31
   11d74:	mov	r2, #0
   11d78:	mov	r3, #4
   11d7c:	str	r7, [sp]
   11d80:	str	r6, [sp, #4]
   11d84:	bl	126dc <flatcc_verify_vector_field@@Base>
   11d88:	cmp	r0, #0
   11d8c:	bne	11fc0 <main@@Base+0x7e8>
   11d90:	mov	r0, #1
   11d94:	mov	r1, #13
   11d98:	mov	r2, #0
   11d9c:	mov	r3, #0
   11da0:	stm	sp, {r0, r5}
   11da4:	mov	r0, r4
   11da8:	bl	135ec <flatcc_verify_table_as_nested_root@@Base>
   11dac:	cmp	r0, #0
   11db0:	bne	11fc0 <main@@Base+0x7e8>
   11db4:	ldr	r3, [pc, #568]	; 11ff4 <main@@Base+0x81c>
   11db8:	mov	r0, r4
   11dbc:	mov	r1, #14
   11dc0:	mov	r2, #0
   11dc4:	add	r3, pc, r3
   11dc8:	bl	12978 <flatcc_verify_table_field@@Base>
   11dcc:	cmp	r0, #0
   11dd0:	bne	11fc0 <main@@Base+0x7e8>
   11dd4:	mov	r0, r4
   11dd8:	mov	r1, #15
   11ddc:	mov	r2, #1
   11de0:	mov	r3, #1
   11de4:	bl	12574 <flatcc_verify_field@@Base>
   11de8:	cmp	r0, #0
   11dec:	bne	11fc0 <main@@Base+0x7e8>
   11df0:	mov	r0, r4
   11df4:	mov	r1, #16
   11df8:	mov	r2, #4
   11dfc:	mov	r3, #4
   11e00:	bl	12574 <flatcc_verify_field@@Base>
   11e04:	cmp	r0, #0
   11e08:	bne	11fc0 <main@@Base+0x7e8>
   11e0c:	mov	r0, r4
   11e10:	mov	r1, #17
   11e14:	mov	r2, #4
   11e18:	mov	r3, #4
   11e1c:	bl	12574 <flatcc_verify_field@@Base>
   11e20:	cmp	r0, #0
   11e24:	bne	11fc0 <main@@Base+0x7e8>
   11e28:	mov	r0, r4
   11e2c:	mov	r1, #18
   11e30:	mov	r2, #8
   11e34:	mov	r3, #8
   11e38:	bl	12574 <flatcc_verify_field@@Base>
   11e3c:	cmp	r0, #0
   11e40:	bne	11fc0 <main@@Base+0x7e8>
   11e44:	mov	r0, r4
   11e48:	mov	r1, #19
   11e4c:	mov	r2, #8
   11e50:	mov	r3, #8
   11e54:	bl	12574 <flatcc_verify_field@@Base>
   11e58:	cmp	r0, #0
   11e5c:	bne	11fc0 <main@@Base+0x7e8>
   11e60:	mov	r0, r4
   11e64:	mov	r1, #20
   11e68:	mov	r2, #4
   11e6c:	mov	r3, #4
   11e70:	bl	12574 <flatcc_verify_field@@Base>
   11e74:	cmp	r0, #0
   11e78:	bne	11fc0 <main@@Base+0x7e8>
   11e7c:	mov	r0, r4
   11e80:	mov	r1, #21
   11e84:	mov	r2, #4
   11e88:	mov	r3, #4
   11e8c:	bl	12574 <flatcc_verify_field@@Base>
   11e90:	cmp	r0, #0
   11e94:	bne	11fc0 <main@@Base+0x7e8>
   11e98:	mov	r0, r4
   11e9c:	mov	r1, #22
   11ea0:	mov	r2, #8
   11ea4:	mov	r3, #8
   11ea8:	bl	12574 <flatcc_verify_field@@Base>
   11eac:	cmp	r0, #0
   11eb0:	bne	11fc0 <main@@Base+0x7e8>
   11eb4:	mov	r0, r4
   11eb8:	mov	r1, #23
   11ebc:	mov	r2, #8
   11ec0:	mov	r3, #8
   11ec4:	bl	12574 <flatcc_verify_field@@Base>
   11ec8:	cmp	r0, #0
   11ecc:	bne	11fc0 <main@@Base+0x7e8>
   11ed0:	mov	r0, r4
   11ed4:	mov	r1, #25
   11ed8:	mov	r2, #4
   11edc:	mov	r3, #4
   11ee0:	bl	12574 <flatcc_verify_field@@Base>
   11ee4:	cmp	r0, #0
   11ee8:	bne	11fc0 <main@@Base+0x7e8>
   11eec:	mov	r0, r4
   11ef0:	mov	r1, #26
   11ef4:	mov	r2, #4
   11ef8:	mov	r3, #4
   11efc:	bl	12574 <flatcc_verify_field@@Base>
   11f00:	cmp	r0, #0
   11f04:	bne	11fc0 <main@@Base+0x7e8>
   11f08:	mov	r0, r4
   11f0c:	mov	r1, #27
   11f10:	mov	r2, #4
   11f14:	mov	r3, #4
   11f18:	bl	12574 <flatcc_verify_field@@Base>
   11f1c:	cmp	r0, #0
   11f20:	bne	11fc0 <main@@Base+0x7e8>
   11f24:	mvn	r0, #0
   11f28:	mov	r1, #1
   11f2c:	mov	r2, #0
   11f30:	mov	r3, #1
   11f34:	str	r1, [sp]
   11f38:	str	r0, [sp, #4]
   11f3c:	mov	r0, r4
   11f40:	mov	r1, #30
   11f44:	bl	126dc <flatcc_verify_vector_field@@Base>
   11f48:	cmp	r0, #0
   11f4c:	bne	11fc0 <main@@Base+0x7e8>
   11f50:	mvn	r5, #-536870912	; 0xe0000000
   11f54:	mov	r6, #8
   11f58:	mov	r0, r4
   11f5c:	mov	r1, #32
   11f60:	mov	r2, #0
   11f64:	mov	r3, #8
   11f68:	str	r6, [sp]
   11f6c:	str	r5, [sp, #4]
   11f70:	bl	126dc <flatcc_verify_vector_field@@Base>
   11f74:	cmp	r0, #0
   11f78:	bne	11fc0 <main@@Base+0x7e8>
   11f7c:	mov	r0, r4
   11f80:	mov	r1, #33	; 0x21
   11f84:	mov	r2, #0
   11f88:	mov	r3, #8
   11f8c:	str	r6, [sp]
   11f90:	str	r5, [sp, #4]
   11f94:	bl	126dc <flatcc_verify_vector_field@@Base>
   11f98:	cmp	r0, #0
   11f9c:	bne	11fc0 <main@@Base+0x7e8>
   11fa0:	ldr	r3, [pc, #80]	; 11ff8 <main@@Base+0x820>
   11fa4:	mov	r0, r4
   11fa8:	mov	r1, #34	; 0x22
   11fac:	mov	r2, #0
   11fb0:	add	r3, pc, r3
   11fb4:	bl	12978 <flatcc_verify_table_field@@Base>
   11fb8:	cmp	r0, #0
   11fbc:	beq	11fc8 <main@@Base+0x7f0>
   11fc0:	sub	sp, fp, #16
   11fc4:	pop	{r4, r5, r6, r7, fp, pc}
   11fc8:	ldr	r3, [pc, #44]	; 11ffc <main@@Base+0x824>
   11fcc:	mov	r0, r4
   11fd0:	mov	r1, #35	; 0x23
   11fd4:	mov	r2, #0
   11fd8:	add	r3, pc, r3
   11fdc:	sub	sp, fp, #16
   11fe0:	pop	{r4, r5, r6, r7, fp, lr}
   11fe4:	b	12978 <flatcc_verify_table_field@@Base>
   11fe8:			; <UNDEFINED> instruction: 0xffffff28
   11fec:			; <UNDEFINED> instruction: 0xfffffe80
   11ff0:	andeq	r0, r0, r8, asr #5
   11ff4:	andeq	r0, r0, r4, ror #4
   11ff8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11ffc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12000:	ldrb	r1, [r0, #12]
   12004:	sub	r1, r1, #1
   12008:	uxtb	r2, r1
   1200c:	cmp	r2, #3
   12010:	movhi	r0, #0
   12014:	bxhi	lr
   12018:	ldr	r2, [pc, #12]	; 1202c <main@@Base+0x854>
   1201c:	sxtb	r1, r1
   12020:	add	r2, pc, r2
   12024:	ldr	r1, [r2, r1, lsl #2]
   12028:	b	12dc4 <flatcc_verify_union_table@@Base>
   1202c:	andeq	r2, r1, r8, lsr lr
   12030:	push	{r4, sl, fp, lr}
   12034:	add	fp, sp, #8
   12038:	mov	r1, #0
   1203c:	mov	r2, #0
   12040:	mov	r4, r0
   12044:	bl	125f8 <flatcc_verify_string_field@@Base>
   12048:	cmp	r0, #0
   1204c:	popne	{r4, sl, fp, pc}
   12050:	mov	r0, r4
   12054:	mov	r1, #1
   12058:	mov	r2, #8
   1205c:	mov	r3, #8
   12060:	bl	12574 <flatcc_verify_field@@Base>
   12064:	cmp	r0, #0
   12068:	beq	12070 <main@@Base+0x898>
   1206c:	pop	{r4, sl, fp, pc}
   12070:	mov	r0, r4
   12074:	mov	r1, #2
   12078:	mov	r2, #2
   1207c:	mov	r3, #2
   12080:	pop	{r4, sl, fp, lr}
   12084:	b	12574 <flatcc_verify_field@@Base>
   12088:	mov	r0, #0
   1208c:	bx	lr
   12090:	push	{r4, r5, r6, sl, fp, lr}
   12094:	add	fp, sp, #16
   12098:	sub	sp, sp, #8
   1209c:	mvn	r5, #0
   120a0:	mov	r6, #1
   120a4:	mov	r1, #0
   120a8:	mov	r2, #0
   120ac:	mov	r3, #1
   120b0:	mov	r4, r0
   120b4:	str	r6, [sp]
   120b8:	str	r5, [sp, #4]
   120bc:	bl	126dc <flatcc_verify_vector_field@@Base>
   120c0:	cmp	r0, #0
   120c4:	bne	120ec <main@@Base+0x914>
   120c8:	mov	r0, r4
   120cc:	mov	r1, #1
   120d0:	mov	r2, #0
   120d4:	mov	r3, #1
   120d8:	str	r6, [sp]
   120dc:	str	r5, [sp, #4]
   120e0:	bl	126dc <flatcc_verify_vector_field@@Base>
   120e4:	cmp	r0, #0
   120e8:	beq	120f4 <main@@Base+0x91c>
   120ec:	sub	sp, fp, #16
   120f0:	pop	{r4, r5, r6, sl, fp, pc}
   120f4:	ldr	r0, [pc, #40]	; 12124 <main@@Base+0x94c>
   120f8:	mov	r1, #1
   120fc:	mov	r2, #0
   12100:	mov	r3, #0
   12104:	str	r1, [sp]
   12108:	mov	r1, #2
   1210c:	add	r0, pc, r0
   12110:	str	r0, [sp, #4]
   12114:	mov	r0, r4
   12118:	bl	135ec <flatcc_verify_table_as_nested_root@@Base>
   1211c:	sub	sp, fp, #16
   12120:	pop	{r4, r5, r6, sl, fp, pc}
   12124:			; <UNDEFINED> instruction: 0xfffffa80
   12128:	push	{r4, sl, fp, lr}
   1212c:	add	fp, sp, #8
   12130:	mov	r1, #0
   12134:	mov	r2, #1
   12138:	mov	r3, #1
   1213c:	mov	r4, r0
   12140:	bl	12574 <flatcc_verify_field@@Base>
   12144:	cmp	r0, #0
   12148:	bne	12184 <main@@Base+0x9ac>
   1214c:	mov	r0, r4
   12150:	mov	r1, #1
   12154:	mov	r2, #1
   12158:	mov	r3, #1
   1215c:	bl	12574 <flatcc_verify_field@@Base>
   12160:	cmp	r0, #0
   12164:	popne	{r4, sl, fp, pc}
   12168:	mov	r0, r4
   1216c:	mov	r1, #2
   12170:	mov	r2, #1
   12174:	mov	r3, #1
   12178:	bl	12574 <flatcc_verify_field@@Base>
   1217c:	cmp	r0, #0
   12180:	beq	12188 <main@@Base+0x9b0>
   12184:	pop	{r4, sl, fp, pc}
   12188:	mov	r0, r4
   1218c:	mov	r1, #3
   12190:	mov	r2, #1
   12194:	mov	r3, #1
   12198:	pop	{r4, sl, fp, lr}
   1219c:	b	12574 <flatcc_verify_field@@Base>
   121a0:	mov	r0, #0
   121a4:	bx	lr
   121a8:	push	{r4, sl, fp, lr}
   121ac:	add	fp, sp, #8
   121b0:	ldr	r3, [pc, #88]	; 12210 <main@@Base+0xa38>
   121b4:	mov	r1, #0
   121b8:	mov	r2, #0
   121bc:	mov	r4, r0
   121c0:	add	r3, pc, r3
   121c4:	bl	12978 <flatcc_verify_table_field@@Base>
   121c8:	cmp	r0, #0
   121cc:	popne	{r4, sl, fp, pc}
   121d0:	ldr	r3, [pc, #60]	; 12214 <main@@Base+0xa3c>
   121d4:	mov	r0, r4
   121d8:	mov	r1, #1
   121dc:	mov	r2, #0
   121e0:	add	r3, pc, r3
   121e4:	bl	12978 <flatcc_verify_table_field@@Base>
   121e8:	cmp	r0, #0
   121ec:	beq	121f4 <main@@Base+0xa1c>
   121f0:	pop	{r4, sl, fp, pc}
   121f4:	ldr	r3, [pc, #28]	; 12218 <main@@Base+0xa40>
   121f8:	mov	r0, r4
   121fc:	mov	r1, #3
   12200:	mov	r2, #0
   12204:	add	r3, pc, r3
   12208:	pop	{r4, sl, fp, lr}
   1220c:	b	13a60 <flatcc_verify_union_vector_field@@Base>
   12210:	andeq	r0, r0, r4, asr r0
   12214:	andeq	r0, r0, r8, lsr #1
   12218:			; <UNDEFINED> instruction: 0xfffffdf4
   1221c:	push	{r4, sl, fp, lr}
   12220:	add	fp, sp, #8
   12224:	ldr	r3, [pc, #88]	; 12284 <main@@Base+0xaac>
   12228:	mov	r1, #0
   1222c:	mov	r2, #0
   12230:	mov	r4, r0
   12234:	add	r3, pc, r3
   12238:	bl	12978 <flatcc_verify_table_field@@Base>
   1223c:	cmp	r0, #0
   12240:	popne	{r4, sl, fp, pc}
   12244:	ldr	r3, [pc, #60]	; 12288 <main@@Base+0xab0>
   12248:	mov	r0, r4
   1224c:	mov	r1, #1
   12250:	mov	r2, #0
   12254:	add	r3, pc, r3
   12258:	bl	12978 <flatcc_verify_table_field@@Base>
   1225c:	cmp	r0, #0
   12260:	beq	12268 <main@@Base+0xa90>
   12264:	pop	{r4, sl, fp, pc}
   12268:	ldr	r3, [pc, #28]	; 1228c <main@@Base+0xab4>
   1226c:	mov	r0, r4
   12270:	mov	r1, #2
   12274:	mov	r2, #0
   12278:	add	r3, pc, r3
   1227c:	pop	{r4, sl, fp, lr}
   12280:	b	12978 <flatcc_verify_table_field@@Base>
   12284:	andeq	r0, r0, r0, lsl r1
   12288:	andeq	r0, r0, r8, ror #3
   1228c:	andeq	r0, r0, r0, lsl #4
   12290:	push	{r4, sl, fp, lr}
   12294:	add	fp, sp, #8
   12298:	ldr	r3, [pc, #152]	; 12338 <main@@Base+0xb60>
   1229c:	mov	r1, #1
   122a0:	mov	r2, #0
   122a4:	mov	r4, r0
   122a8:	add	r3, pc, r3
   122ac:	bl	138fc <flatcc_verify_union_field@@Base>
   122b0:	cmp	r0, #0
   122b4:	bne	12318 <main@@Base+0xb40>
   122b8:	ldr	r3, [pc, #124]	; 1233c <main@@Base+0xb64>
   122bc:	mov	r0, r4
   122c0:	mov	r1, #3
   122c4:	mov	r2, #0
   122c8:	add	r3, pc, r3
   122cc:	bl	138fc <flatcc_verify_union_field@@Base>
   122d0:	cmp	r0, #0
   122d4:	bne	12318 <main@@Base+0xb40>
   122d8:	ldr	r3, [pc, #96]	; 12340 <main@@Base+0xb68>
   122dc:	mov	r0, r4
   122e0:	mov	r1, #5
   122e4:	mov	r2, #0
   122e8:	add	r3, pc, r3
   122ec:	bl	138fc <flatcc_verify_union_field@@Base>
   122f0:	cmp	r0, #0
   122f4:	popne	{r4, sl, fp, pc}
   122f8:	ldr	r3, [pc, #68]	; 12344 <main@@Base+0xb6c>
   122fc:	mov	r0, r4
   12300:	mov	r1, #7
   12304:	mov	r2, #0
   12308:	add	r3, pc, r3
   1230c:	bl	138fc <flatcc_verify_union_field@@Base>
   12310:	cmp	r0, #0
   12314:	beq	1231c <main@@Base+0xb44>
   12318:	pop	{r4, sl, fp, pc}
   1231c:	ldr	r3, [pc, #36]	; 12348 <main@@Base+0xb70>
   12320:	mov	r0, r4
   12324:	mov	r1, #9
   12328:	mov	r2, #0
   1232c:	add	r3, pc, r3
   12330:	pop	{r4, sl, fp, lr}
   12334:	b	13a60 <flatcc_verify_union_vector_field@@Base>
   12338:	andeq	r0, r0, ip, lsl #4
   1233c:	andeq	r0, r0, ip, ror #3
   12340:	andeq	r0, r0, ip, asr #3
   12344:	andeq	r0, r0, ip, lsr #3
   12348:	andeq	r0, r0, r8, lsl #3
   1234c:	push	{r4, sl, fp, lr}
   12350:	add	fp, sp, #8
   12354:	mov	r1, #0
   12358:	mov	r2, #0
   1235c:	mov	r4, r0
   12360:	bl	125f8 <flatcc_verify_string_field@@Base>
   12364:	cmp	r0, #0
   12368:	bne	12428 <main@@Base+0xc50>
   1236c:	mov	r0, r4
   12370:	mov	r1, #1
   12374:	mov	r2, #4
   12378:	mov	r3, #4
   1237c:	bl	12574 <flatcc_verify_field@@Base>
   12380:	cmp	r0, #0
   12384:	bne	12428 <main@@Base+0xc50>
   12388:	mov	r0, r4
   1238c:	mov	r1, #2
   12390:	mov	r2, #0
   12394:	bl	125f8 <flatcc_verify_string_field@@Base>
   12398:	cmp	r0, #0
   1239c:	bne	12428 <main@@Base+0xc50>
   123a0:	mov	r0, r4
   123a4:	mov	r1, #3
   123a8:	mov	r2, #8
   123ac:	mov	r3, #8
   123b0:	bl	12574 <flatcc_verify_field@@Base>
   123b4:	cmp	r0, #0
   123b8:	bne	12428 <main@@Base+0xc50>
   123bc:	mov	r0, r4
   123c0:	mov	r1, #4
   123c4:	mov	r2, #0
   123c8:	bl	125f8 <flatcc_verify_string_field@@Base>
   123cc:	cmp	r0, #0
   123d0:	bne	12428 <main@@Base+0xc50>
   123d4:	mov	r0, r4
   123d8:	mov	r1, #5
   123dc:	mov	r2, #8
   123e0:	mov	r3, #8
   123e4:	bl	12574 <flatcc_verify_field@@Base>
   123e8:	cmp	r0, #0
   123ec:	bne	12428 <main@@Base+0xc50>
   123f0:	mov	r0, r4
   123f4:	mov	r1, #6
   123f8:	mov	r2, #4
   123fc:	mov	r3, #4
   12400:	bl	12574 <flatcc_verify_field@@Base>
   12404:	cmp	r0, #0
   12408:	popne	{r4, sl, fp, pc}
   1240c:	mov	r0, r4
   12410:	mov	r1, #7
   12414:	mov	r2, #8
   12418:	mov	r3, #8
   1241c:	bl	12574 <flatcc_verify_field@@Base>
   12420:	cmp	r0, #0
   12424:	beq	1242c <main@@Base+0xc54>
   12428:	pop	{r4, sl, fp, pc}
   1242c:	mov	r0, r4
   12430:	mov	r1, #8
   12434:	mov	r2, #4
   12438:	mov	r3, #4
   1243c:	pop	{r4, sl, fp, lr}
   12440:	b	12574 <flatcc_verify_field@@Base>
   12444:	push	{r4, sl, fp, lr}
   12448:	add	fp, sp, #8
   1244c:	mov	r1, #0
   12450:	mov	r2, #8
   12454:	mov	r3, #8
   12458:	mov	r4, r0
   1245c:	bl	12574 <flatcc_verify_field@@Base>
   12460:	cmp	r0, #0
   12464:	popne	{r4, sl, fp, pc}
   12468:	mov	r0, r4
   1246c:	mov	r1, #1
   12470:	mov	r2, #4
   12474:	mov	r3, #4
   12478:	pop	{r4, sl, fp, lr}
   1247c:	b	12574 <flatcc_verify_field@@Base>
   12480:	push	{r4, sl, fp, lr}
   12484:	add	fp, sp, #8
   12488:	mov	r1, #0
   1248c:	mov	r2, #8
   12490:	mov	r3, #8
   12494:	mov	r4, r0
   12498:	bl	12574 <flatcc_verify_field@@Base>
   1249c:	cmp	r0, #0
   124a0:	popne	{r4, sl, fp, pc}
   124a4:	mov	r0, r4
   124a8:	mov	r1, #1
   124ac:	mov	r2, #4
   124b0:	mov	r3, #4
   124b4:	pop	{r4, sl, fp, lr}
   124b8:	b	12574 <flatcc_verify_field@@Base>
   124bc:	ldrb	r2, [r0, #12]
   124c0:	sub	r1, r2, #2
   124c4:	cmp	r1, #9
   124c8:	bhi	1250c <main@@Base+0xd34>
   124cc:	add	r2, pc, #4
   124d0:	ldr	r1, [r2, r1, lsl #2]
   124d4:	add	pc, r2, r1
   124d8:	andeq	r0, r0, r8, asr #32
   124dc:	andeq	r0, r0, r0, asr #32
   124e0:	andeq	r0, r0, r0, asr #32
   124e4:	andeq	r0, r0, r0, asr #32
   124e8:	andeq	r0, r0, r0, asr #32
   124ec:	andeq	r0, r0, r0, asr #32
   124f0:	andeq	r0, r0, r4, asr r0
   124f4:	andeq	r0, r0, r8, lsr #32
   124f8:	andeq	r0, r0, r8, lsr #32
   124fc:	andeq	r0, r0, ip, lsr r0
   12500:	mov	r1, #4
   12504:	mov	r2, #4
   12508:	b	12eac <flatcc_verify_union_struct@@Base>
   1250c:	cmp	r2, #255	; 0xff
   12510:	bne	12518 <main@@Base+0xd40>
   12514:	b	12f04 <flatcc_verify_union_string@@Base>
   12518:	mov	r0, #0
   1251c:	bx	lr
   12520:	ldr	r1, [pc, #16]	; 12538 <main@@Base+0xd60>
   12524:	add	r1, pc, r1
   12528:	b	12dc4 <flatcc_verify_union_table@@Base>
   1252c:	mov	r1, #2
   12530:	mov	r2, #2
   12534:	b	12eac <flatcc_verify_union_struct@@Base>
   12538:	andeq	r0, r0, r0, lsl r0
   1253c:	mov	r1, #0
   12540:	mov	r2, #4
   12544:	mov	r3, #4
   12548:	b	12574 <flatcc_verify_field@@Base>

0001254c <flatcc_verify_error_string@@Base>:
   1254c:	cmp	r0, #36	; 0x24
   12550:	ldrhi	r0, [pc, #24]	; 12570 <flatcc_verify_error_string@@Base+0x24>
   12554:	addhi	r0, pc, r0
   12558:	bxhi	lr
   1255c:	ldr	r1, [pc, #8]	; 1256c <flatcc_verify_error_string@@Base+0x20>
   12560:	add	r1, pc, r1
   12564:	ldr	r0, [r1, r0, lsl #2]
   12568:	bx	lr
   1256c:	andeq	r2, r1, r8, lsl #18
   12570:	andeq	r2, r0, pc, lsr r5

00012574 <flatcc_verify_field@@Base>:
   12574:	push	{r4, sl, fp, lr}
   12578:	add	fp, sp, #8
   1257c:	ldrh	r4, [r0, #22]
   12580:	mov	ip, #4
   12584:	mov	lr, #0
   12588:	add	r1, ip, r1, lsl #1
   1258c:	uxth	ip, r1
   12590:	cmp	ip, r4
   12594:	bcs	125f0 <flatcc_verify_field@@Base+0x7c>
   12598:	ldr	r4, [r0, #12]
   1259c:	uxtah	r1, r4, r1
   125a0:	ldrh	ip, [r1]
   125a4:	cmp	ip, #0
   125a8:	beq	125f0 <flatcc_verify_field@@Base+0x7c>
   125ac:	add	r1, ip, r2
   125b0:	ldrh	r2, [r0, #20]
   125b4:	mov	lr, #13
   125b8:	cmp	r1, r2
   125bc:	bhi	125f0 <flatcc_verify_field@@Base+0x7c>
   125c0:	ldr	r1, [r0]
   125c4:	mov	lr, #0
   125c8:	add	r2, r1, ip
   125cc:	ldr	r1, [r0, #16]
   125d0:	add	r4, r2, r1
   125d4:	sub	r1, r3, #1
   125d8:	tst	r4, r1
   125dc:	beq	125f0 <flatcc_verify_field@@Base+0x7c>
   125e0:	ldr	r0, [r0, #16]
   125e4:	add	r0, r2, r0
   125e8:	ands	lr, r0, r1
   125ec:	movwne	lr, #12
   125f0:	mov	r0, lr
   125f4:	pop	{r4, sl, fp, pc}

000125f8 <flatcc_verify_string_field@@Base>:
   125f8:	push	{fp, lr}
   125fc:	mov	fp, sp
   12600:	mov	lr, r2
   12604:	ldrh	r2, [r0, #22]
   12608:	mov	r3, #4
   1260c:	add	r1, r3, r1, lsl #1
   12610:	uxth	r3, r1
   12614:	cmp	r3, r2
   12618:	bcs	126b4 <flatcc_verify_string_field@@Base+0xbc>
   1261c:	ldr	r2, [r0, #12]
   12620:	uxtah	r1, r2, r1
   12624:	ldrh	r1, [r1]
   12628:	cmp	r1, #0
   1262c:	beq	126b4 <flatcc_verify_string_field@@Base+0xbc>
   12630:	ldrh	r2, [r0, #20]
   12634:	add	r3, r1, #4
   12638:	mov	lr, #13
   1263c:	cmp	r3, r2
   12640:	bhi	126ac <flatcc_verify_string_field@@Base+0xb4>
   12644:	ldr	r2, [r0, #16]
   12648:	mov	lr, #12
   1264c:	add	r3, r2, r1
   12650:	tst	r3, #3
   12654:	bne	126ac <flatcc_verify_string_field@@Base+0xb4>
   12658:	cmp	r3, #0
   1265c:	moveq	lr, #0
   12660:	moveq	r0, lr
   12664:	popeq	{fp, pc}
   12668:	ldr	ip, [r0]
   1266c:	mov	lr, #17
   12670:	ldr	r1, [ip, r3]
   12674:	add	r1, r1, r3
   12678:	tst	r1, #3
   1267c:	bne	126ac <flatcc_verify_string_field@@Base+0xb4>
   12680:	cmp	r1, r3
   12684:	bls	126ac <flatcc_verify_string_field@@Base+0xb4>
   12688:	ldr	r3, [r0, #4]
   1268c:	add	r0, r1, #4
   12690:	cmp	r3, r0
   12694:	ldrcs	r1, [ip, r1]
   12698:	subcs	r2, r3, r0
   1269c:	movcs	lr, #8
   126a0:	addcs	r3, r1, #1
   126a4:	cmpcs	r2, r3
   126a8:	bcs	126c4 <flatcc_verify_string_field@@Base+0xcc>
   126ac:	mov	r0, lr
   126b0:	pop	{fp, pc}
   126b4:	cmp	lr, #0
   126b8:	movwne	lr, #4
   126bc:	mov	r0, lr
   126c0:	pop	{fp, pc}
   126c4:	add	r0, ip, r0
   126c8:	ldrb	lr, [r0, r1]
   126cc:	cmp	lr, #0
   126d0:	movwne	lr, #7
   126d4:	mov	r0, lr
   126d8:	pop	{fp, pc}

000126dc <flatcc_verify_vector_field@@Base>:
   126dc:	push	{r4, r5, fp, lr}
   126e0:	add	fp, sp, #8
   126e4:	mov	r5, r2
   126e8:	ldrh	r2, [r0, #22]
   126ec:	mov	r4, #4
   126f0:	add	r1, r4, r1, lsl #1
   126f4:	uxth	r4, r1
   126f8:	cmp	r4, r2
   126fc:	bcs	127c4 <flatcc_verify_vector_field@@Base+0xe8>
   12700:	ldr	r2, [r0, #12]
   12704:	uxtah	r1, r2, r1
   12708:	ldrh	r1, [r1]
   1270c:	cmp	r1, #0
   12710:	beq	127c4 <flatcc_verify_vector_field@@Base+0xe8>
   12714:	ldrh	r2, [r0, #20]
   12718:	add	r4, r1, #4
   1271c:	mov	r5, #13
   12720:	cmp	r4, r2
   12724:	bhi	127bc <flatcc_verify_vector_field@@Base+0xe0>
   12728:	ldr	r2, [r0, #16]
   1272c:	mov	r5, #12
   12730:	add	r1, r2, r1
   12734:	tst	r1, #3
   12738:	bne	127bc <flatcc_verify_vector_field@@Base+0xe0>
   1273c:	cmp	r1, #0
   12740:	moveq	r5, #0
   12744:	moveq	r0, r5
   12748:	popeq	{r4, r5, fp, pc}
   1274c:	ldr	ip, [r0]
   12750:	ldr	r4, [fp, #8]
   12754:	mov	r5, #16
   12758:	ldr	r2, [ip, r1]
   1275c:	cmp	r4, #4
   12760:	movls	r4, #4
   12764:	add	lr, r2, r1
   12768:	cmp	lr, r1
   1276c:	bls	127bc <flatcc_verify_vector_field@@Base+0xe0>
   12770:	ldr	r0, [r0, #4]
   12774:	add	r1, lr, #4
   12778:	cmp	r1, r0
   1277c:	bhi	127bc <flatcc_verify_vector_field@@Base+0xe0>
   12780:	sub	r2, r4, #1
   12784:	orr	r2, r2, #3
   12788:	tst	r1, r2
   1278c:	bne	127bc <flatcc_verify_vector_field@@Base+0xe0>
   12790:	ldr	r2, [fp, #12]
   12794:	ldr	r1, [ip, lr]
   12798:	mov	r5, #25
   1279c:	cmp	r1, r2
   127a0:	bhi	127bc <flatcc_verify_vector_field@@Base+0xe0>
   127a4:	sub	r0, r0, #4
   127a8:	mul	r1, r1, r3
   127ac:	mov	r5, #0
   127b0:	sub	r0, r0, lr
   127b4:	cmp	r0, r1
   127b8:	movwcc	r5, #26
   127bc:	mov	r0, r5
   127c0:	pop	{r4, r5, fp, pc}
   127c4:	cmp	r5, #0
   127c8:	movwne	r5, #4
   127cc:	mov	r0, r5
   127d0:	pop	{r4, r5, fp, pc}

000127d4 <flatcc_verify_string_vector_field@@Base>:
   127d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   127d8:	add	fp, sp, #24
   127dc:	ldrh	r7, [r0, #22]
   127e0:	mov	r3, #4
   127e4:	add	r1, r3, r1, lsl #1
   127e8:	uxth	r3, r1
   127ec:	cmp	r3, r7
   127f0:	bcs	12838 <flatcc_verify_string_vector_field@@Base+0x64>
   127f4:	ldr	r3, [r0, #12]
   127f8:	uxtah	r1, r3, r1
   127fc:	ldrh	r1, [r1]
   12800:	cmp	r1, #0
   12804:	beq	12838 <flatcc_verify_string_vector_field@@Base+0x64>
   12808:	ldrh	r3, [r0, #20]
   1280c:	add	r7, r1, #4
   12810:	mov	r2, #13
   12814:	cmp	r7, r3
   12818:	bhi	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   1281c:	ldr	r4, [r0, #16]
   12820:	mov	r2, #12
   12824:	add	r6, r4, r1
   12828:	tst	r6, #3
   1282c:	beq	12848 <flatcc_verify_string_vector_field@@Base+0x74>
   12830:	mov	r0, r2
   12834:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12838:	cmp	r2, #0
   1283c:	movwne	r2, #4
   12840:	mov	r0, r2
   12844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12848:	mov	r2, #0
   1284c:	cmp	r6, #0
   12850:	beq	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   12854:	ldr	r5, [r0]
   12858:	mov	r2, #16
   1285c:	ldr	r7, [r5, r6]
   12860:	add	r3, r7, r6
   12864:	cmp	r3, r6
   12868:	bls	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   1286c:	ldr	lr, [r0, #4]
   12870:	add	r0, r3, #4
   12874:	cmp	r0, lr
   12878:	bhi	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   1287c:	ands	r0, r0, #3
   12880:	bne	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   12884:	ldr	ip, [r5, r3]
   12888:	mov	r2, #25
   1288c:	cmn	ip, #-1073741823	; 0xc0000001
   12890:	bhi	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   12894:	sub	r0, lr, #4
   12898:	mov	r2, #26
   1289c:	sub	r0, r0, r3
   128a0:	cmp	r0, ip, lsl #2
   128a4:	bcc	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   128a8:	cmp	ip, #0
   128ac:	mov	r2, #0
   128b0:	beq	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   128b4:	sub	r0, lr, #8
   128b8:	add	r9, r7, r4
   128bc:	sub	r0, r0, r1
   128c0:	sub	r0, r0, r7
   128c4:	sub	r8, r0, r4
   128c8:	add	r0, r5, r9
   128cc:	mov	r5, #0
   128d0:	rsb	r4, r0, #0
   128d4:	sub	r0, r1, r4
   128d8:	add	r3, r1, r9
   128dc:	mov	r2, #17
   128e0:	ldr	r6, [r0, #4]
   128e4:	add	r7, r3, r6
   128e8:	add	r0, r7, #4
   128ec:	tst	r0, #3
   128f0:	bne	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   128f4:	add	r3, r3, #4
   128f8:	cmp	r0, r3
   128fc:	bls	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   12900:	add	r0, r7, #8
   12904:	cmp	lr, r0
   12908:	bcc	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   1290c:	add	r0, r1, r6
   12910:	sub	r2, r8, r6
   12914:	sub	r0, r0, r4
   12918:	ldr	r0, [r0, #4]
   1291c:	add	r3, r0, #1
   12920:	cmp	r2, r3
   12924:	bcc	12960 <flatcc_verify_string_vector_field@@Base+0x18c>
   12928:	add	r0, r6, r0
   1292c:	add	r0, r1, r0
   12930:	sub	r0, r0, r4
   12934:	ldrb	r0, [r0, #8]
   12938:	cmp	r0, #0
   1293c:	bne	1296c <flatcc_verify_string_vector_field@@Base+0x198>
   12940:	add	r5, r5, #1
   12944:	sub	r8, r8, #4
   12948:	add	r9, r9, #4
   1294c:	sub	r4, r4, #4
   12950:	mov	r2, #0
   12954:	cmp	r5, ip
   12958:	bcc	128d4 <flatcc_verify_string_vector_field@@Base+0x100>
   1295c:	b	12830 <flatcc_verify_string_vector_field@@Base+0x5c>
   12960:	mov	r2, #8
   12964:	mov	r0, r2
   12968:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1296c:	mov	r2, #7
   12970:	mov	r0, r2
   12974:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012978 <flatcc_verify_table_field@@Base>:
   12978:	push	{r4, r5, r6, sl, fp, lr}
   1297c:	add	fp, sp, #16
   12980:	sub	sp, sp, #24
   12984:	ldrh	r5, [r0, #22]
   12988:	mov	r6, #4
   1298c:	add	r1, r6, r1, lsl #1
   12990:	uxth	r6, r1
   12994:	cmp	r6, r5
   12998:	bcs	12aa8 <flatcc_verify_table_field@@Base+0x130>
   1299c:	ldr	r6, [r0, #12]
   129a0:	uxtah	r1, r6, r1
   129a4:	ldrh	r1, [r1]
   129a8:	cmp	r1, #0
   129ac:	beq	12aa8 <flatcc_verify_table_field@@Base+0x130>
   129b0:	ldrh	r6, [r0, #20]
   129b4:	add	r5, r1, #4
   129b8:	mov	r2, #13
   129bc:	cmp	r5, r6
   129c0:	bhi	12ab0 <flatcc_verify_table_field@@Base+0x138>
   129c4:	ldr	r2, [r0, #16]
   129c8:	add	r4, r2, r1
   129cc:	mov	r2, #12
   129d0:	tst	r4, #3
   129d4:	bne	12ab0 <flatcc_verify_table_field@@Base+0x138>
   129d8:	cmp	r4, #0
   129dc:	beq	12abc <flatcc_verify_table_field@@Base+0x144>
   129e0:	ldm	r0, {r1, ip}
   129e4:	ldr	r2, [r0, #8]
   129e8:	ldr	r0, [r1, r4]
   129ec:	subs	r2, r2, #1
   129f0:	str	r2, [sp, #8]
   129f4:	beq	12ac4 <flatcc_verify_table_field@@Base+0x14c>
   129f8:	add	r0, r0, r4
   129fc:	mov	r2, #15
   12a00:	tst	r0, #3
   12a04:	bne	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a08:	cmp	r0, r4
   12a0c:	bls	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a10:	add	r6, r0, #4
   12a14:	cmp	r6, ip
   12a18:	bhi	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a1c:	str	r0, [sp, #16]
   12a20:	ldr	r2, [r1, r0]
   12a24:	sub	r5, r0, r2
   12a28:	mov	r2, #29
   12a2c:	tst	r5, #-2147483647	; 0x80000001
   12a30:	bne	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a34:	add	r4, r5, #2
   12a38:	mov	r2, #27
   12a3c:	cmp	r4, ip
   12a40:	bhi	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a44:	mov	lr, r1
   12a48:	mov	r2, #30
   12a4c:	ldrh	r6, [lr, r5]!
   12a50:	tst	r6, #1
   12a54:	strh	r6, [sp, #22]
   12a58:	bne	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a5c:	add	r5, r5, r6
   12a60:	cmp	r5, ip
   12a64:	bhi	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a68:	mov	r2, #28
   12a6c:	cmp	r6, #4
   12a70:	bcc	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a74:	add	r2, r1, r4
   12a78:	sub	r0, ip, r0
   12a7c:	ldrh	r4, [r2]
   12a80:	mov	r2, #20
   12a84:	cmp	r0, r4
   12a88:	strh	r4, [sp, #20]
   12a8c:	bcc	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12a90:	mov	r0, sp
   12a94:	str	lr, [sp, #12]
   12a98:	stm	sp, {r1, ip}
   12a9c:	blx	r3
   12aa0:	mov	r2, r0
   12aa4:	b	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12aa8:	cmp	r2, #0
   12aac:	movwne	r2, #4
   12ab0:	mov	r0, r2
   12ab4:	sub	sp, fp, #16
   12ab8:	pop	{r4, r5, r6, sl, fp, pc}
   12abc:	mov	r2, #0
   12ac0:	b	12ab0 <flatcc_verify_table_field@@Base+0x138>
   12ac4:	mov	r2, #3
   12ac8:	b	12ab0 <flatcc_verify_table_field@@Base+0x138>

00012acc <flatcc_verify_table_vector_field@@Base>:
   12acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad0:	add	fp, sp, #28
   12ad4:	sub	sp, sp, #36	; 0x24
   12ad8:	ldrh	r7, [r0, #22]
   12adc:	mov	r4, r3
   12ae0:	mov	r3, #4
   12ae4:	add	r1, r3, r1, lsl #1
   12ae8:	uxth	r3, r1
   12aec:	cmp	r3, r7
   12af0:	bcs	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f8>
   12af4:	ldr	r3, [r0, #12]
   12af8:	uxtah	r1, r3, r1
   12afc:	ldrh	r1, [r1]
   12b00:	cmp	r1, #0
   12b04:	beq	12cc4 <flatcc_verify_table_vector_field@@Base+0x1f8>
   12b08:	ldrh	r3, [r0, #20]
   12b0c:	add	r7, r1, #4
   12b10:	mov	r2, #13
   12b14:	cmp	r7, r3
   12b18:	bhi	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12b1c:	ldr	r3, [r0, #16]
   12b20:	mov	r2, #12
   12b24:	add	r5, r3, r1
   12b28:	tst	r5, #3
   12b2c:	bne	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12b30:	mov	r2, #0
   12b34:	cmp	r5, #0
   12b38:	beq	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12b3c:	ldr	r7, [r0, #8]
   12b40:	cmp	r7, #1
   12b44:	blt	12cd8 <flatcc_verify_table_vector_field@@Base+0x20c>
   12b48:	ldr	sl, [r0]
   12b4c:	mov	r2, #16
   12b50:	ldr	ip, [sl, r5]
   12b54:	add	r6, ip, r5
   12b58:	cmp	r6, r5
   12b5c:	bls	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12b60:	ldr	lr, [r0, #4]
   12b64:	add	r0, r6, #4
   12b68:	cmp	r0, lr
   12b6c:	bhi	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12b70:	ands	r0, r0, #3
   12b74:	bne	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12b78:	ldr	r9, [sl, r6]
   12b7c:	mov	r2, #25
   12b80:	cmn	r9, #-1073741823	; 0xc0000001
   12b84:	bhi	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12b88:	sub	r0, lr, #4
   12b8c:	mov	r2, #26
   12b90:	sub	r6, r0, r6
   12b94:	cmp	r6, r9, lsl #2
   12b98:	bcc	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12b9c:	cmp	r9, #0
   12ba0:	mov	r2, #0
   12ba4:	beq	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12ba8:	sub	r0, r0, r1
   12bac:	str	r9, [sp]
   12bb0:	sub	r0, r0, ip
   12bb4:	ldr	r9, [sp]
   12bb8:	sub	r8, r0, r3
   12bbc:	add	r0, ip, r3
   12bc0:	add	r0, r0, r1
   12bc4:	mov	r1, #0
   12bc8:	add	r5, r0, #4
   12bcc:	sub	r0, r7, #2
   12bd0:	str	r0, [sp, #4]
   12bd4:	ldr	r0, [sp, #4]
   12bd8:	ldr	r2, [sl, r5]
   12bdc:	cmp	r0, #0
   12be0:	str	r0, [sp, #20]
   12be4:	beq	12d98 <flatcc_verify_table_vector_field@@Base+0x2cc>
   12be8:	add	r0, r5, r2
   12bec:	str	r1, [sp, #8]
   12bf0:	add	ip, r0, #4
   12bf4:	tst	r0, #3
   12bf8:	bne	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12bfc:	cmp	r0, r5
   12c00:	bls	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12c04:	cmp	ip, lr
   12c08:	bhi	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12c0c:	str	r0, [sp, #28]
   12c10:	add	r3, sl, r2
   12c14:	ldr	r7, [r3, r5]
   12c18:	sub	r6, r2, r7
   12c1c:	add	r3, r5, r6
   12c20:	tst	r3, #-2147483647	; 0x80000001
   12c24:	bne	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12c28:	add	r1, r3, #2
   12c2c:	cmp	r1, lr
   12c30:	bhi	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12c34:	add	r1, sl, r6
   12c38:	add	r1, r1, r5
   12c3c:	ldrh	r6, [r1]
   12c40:	cmp	r6, #4
   12c44:	strh	r6, [sp, #34]	; 0x22
   12c48:	bcc	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12c4c:	ands	r1, r6, #1
   12c50:	bne	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12c54:	add	r1, r2, r6
   12c58:	sub	r1, r1, r7
   12c5c:	add	r1, r5, r1
   12c60:	cmp	r1, lr
   12c64:	bhi	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12c68:	add	r3, sl, r3
   12c6c:	sub	r2, r8, r2
   12c70:	ldrh	r1, [r3, #2]
   12c74:	cmp	r2, r1
   12c78:	strh	r1, [sp, #32]
   12c7c:	bcc	12ce0 <flatcc_verify_table_vector_field@@Base+0x214>
   12c80:	add	r0, sp, #12
   12c84:	str	sl, [sp, #12]
   12c88:	str	r3, [sp, #24]
   12c8c:	mov	r6, lr
   12c90:	str	lr, [sp, #16]
   12c94:	blx	r4
   12c98:	cmp	r0, #0
   12c9c:	bne	12da8 <flatcc_verify_table_vector_field@@Base+0x2dc>
   12ca0:	ldr	r1, [sp, #8]
   12ca4:	sub	r8, r8, #4
   12ca8:	add	r5, r5, #4
   12cac:	mov	r2, #0
   12cb0:	mov	lr, r6
   12cb4:	add	r1, r1, #1
   12cb8:	cmp	r1, r9
   12cbc:	bcc	12bd4 <flatcc_verify_table_vector_field@@Base+0x108>
   12cc0:	b	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12cc4:	cmp	r2, #0
   12cc8:	movwne	r2, #4
   12ccc:	mov	r0, r2
   12cd0:	sub	sp, fp, #28
   12cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cd8:	mov	r2, #3
   12cdc:	b	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12ce0:	ldr	r1, [sp, #4]
   12ce4:	str	r1, [sp, #20]
   12ce8:	mov	r2, #15
   12cec:	tst	r0, #3
   12cf0:	bne	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12cf4:	cmp	r0, r5
   12cf8:	bls	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12cfc:	cmp	ip, lr
   12d00:	bhi	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12d04:	str	r0, [sp, #28]
   12d08:	mov	r2, #29
   12d0c:	ldr	r1, [sl, r0]
   12d10:	sub	r7, r0, r1
   12d14:	tst	r7, #-2147483647	; 0x80000001
   12d18:	bne	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12d1c:	add	r3, r7, #2
   12d20:	mov	r2, #27
   12d24:	cmp	r3, lr
   12d28:	bhi	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12d2c:	mov	r1, sl
   12d30:	mov	r2, #30
   12d34:	ldrh	r6, [r1, r7]!
   12d38:	tst	r6, #1
   12d3c:	strh	r6, [sp, #34]	; 0x22
   12d40:	bne	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12d44:	add	r7, r7, r6
   12d48:	cmp	r7, lr
   12d4c:	bhi	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12d50:	mov	r2, #28
   12d54:	cmp	r6, #4
   12d58:	bcc	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12d5c:	add	r2, sl, r3
   12d60:	sub	r0, lr, r0
   12d64:	mov	r5, lr
   12d68:	ldrh	r3, [r2]
   12d6c:	mov	r2, #20
   12d70:	cmp	r0, r3
   12d74:	strh	r3, [sp, #32]
   12d78:	bcc	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12d7c:	add	r0, sp, #12
   12d80:	str	sl, [sp, #12]
   12d84:	str	r1, [sp, #24]
   12d88:	str	r5, [sp, #16]
   12d8c:	blx	r4
   12d90:	mov	r2, r0
   12d94:	b	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12d98:	mov	r0, #0
   12d9c:	mov	r2, #3
   12da0:	str	r0, [sp, #20]
   12da4:	b	12ccc <flatcc_verify_table_vector_field@@Base+0x200>
   12da8:	ldr	r0, [sl, r5]
   12dac:	ldr	r1, [sp, #4]
   12db0:	mov	lr, r6
   12db4:	add	r0, r0, r5
   12db8:	str	r1, [sp, #20]
   12dbc:	add	ip, r0, #4
   12dc0:	b	12ce8 <flatcc_verify_table_vector_field@@Base+0x21c>

00012dc4 <flatcc_verify_union_table@@Base>:
   12dc4:	push	{r4, r5, r6, sl, fp, lr}
   12dc8:	add	fp, sp, #16
   12dcc:	sub	sp, sp, #24
   12dd0:	ldr	r5, [r0, #16]
   12dd4:	ldr	r3, [r0, #20]
   12dd8:	ldr	ip, [r0]
   12ddc:	ldr	r2, [r0, #4]
   12de0:	ldr	r0, [r0, #8]
   12de4:	subs	r0, r0, #1
   12de8:	str	r0, [sp, #8]
   12dec:	moveq	r0, #3
   12df0:	subeq	sp, fp, #16
   12df4:	popeq	{r4, r5, r6, sl, fp, pc}
   12df8:	add	r3, r3, r5
   12dfc:	mov	r0, #15
   12e00:	tst	r3, #3
   12e04:	bne	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e08:	cmp	r3, r5
   12e0c:	bls	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e10:	add	r6, r3, #4
   12e14:	cmp	r6, r2
   12e18:	bhi	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e1c:	str	r3, [sp, #16]
   12e20:	ldr	r0, [ip, r3]
   12e24:	sub	r5, r3, r0
   12e28:	mov	r0, #29
   12e2c:	tst	r5, #-2147483647	; 0x80000001
   12e30:	bne	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e34:	add	r4, r5, #2
   12e38:	mov	r0, #27
   12e3c:	cmp	r4, r2
   12e40:	bhi	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e44:	mov	lr, ip
   12e48:	mov	r0, #30
   12e4c:	ldrh	r6, [lr, r5]!
   12e50:	tst	r6, #1
   12e54:	strh	r6, [sp, #22]
   12e58:	bne	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e5c:	add	r5, r5, r6
   12e60:	cmp	r5, r2
   12e64:	bhi	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e68:	mov	r0, #28
   12e6c:	cmp	r6, #4
   12e70:	bcc	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e74:	add	r0, ip, r4
   12e78:	sub	r3, r2, r3
   12e7c:	ldrh	r4, [r0]
   12e80:	mov	r0, #20
   12e84:	cmp	r3, r4
   12e88:	strh	r4, [sp, #20]
   12e8c:	bcc	12ea4 <flatcc_verify_union_table@@Base+0xe0>
   12e90:	mov	r0, sp
   12e94:	str	ip, [sp]
   12e98:	str	lr, [sp, #12]
   12e9c:	str	r2, [sp, #4]
   12ea0:	blx	r1
   12ea4:	sub	sp, fp, #16
   12ea8:	pop	{r4, r5, r6, sl, fp, pc}

00012eac <flatcc_verify_union_struct@@Base>:
   12eac:	push	{fp, lr}
   12eb0:	mov	fp, sp
   12eb4:	ldr	lr, [r0, #20]
   12eb8:	mov	r3, r0
   12ebc:	mov	r0, #18
   12ec0:	cmp	lr, #0
   12ec4:	beq	12f00 <flatcc_verify_union_struct@@Base+0x54>
   12ec8:	ldr	ip, [r3, #4]
   12ecc:	ldr	r3, [r3, #16]
   12ed0:	add	r3, r3, lr
   12ed4:	cmp	r3, ip
   12ed8:	bhi	12f00 <flatcc_verify_union_struct@@Base+0x54>
   12edc:	adds	r1, r3, r1
   12ee0:	mov	r0, #10
   12ee4:	bcs	12f00 <flatcc_verify_union_struct@@Base+0x54>
   12ee8:	mov	r0, #9
   12eec:	cmp	r1, ip
   12ef0:	pophi	{fp, pc}
   12ef4:	sub	r0, r2, #1
   12ef8:	ands	r0, r3, r0
   12efc:	movwne	r0, #11
   12f00:	pop	{fp, pc}

00012f04 <flatcc_verify_union_string@@Base>:
   12f04:	mov	r1, r0
   12f08:	ldr	r3, [r0, #16]
   12f0c:	ldr	r0, [r0, #20]
   12f10:	add	r2, r0, r3
   12f14:	mov	r0, #17
   12f18:	tst	r2, #3
   12f1c:	bne	12f70 <flatcc_verify_union_string@@Base+0x6c>
   12f20:	cmp	r2, r3
   12f24:	bls	12f70 <flatcc_verify_union_string@@Base+0x6c>
   12f28:	ldr	r3, [r1, #4]
   12f2c:	add	ip, r2, #4
   12f30:	cmp	r3, ip
   12f34:	bcc	12f70 <flatcc_verify_union_string@@Base+0x6c>
   12f38:	push	{fp, lr}
   12f3c:	mov	fp, sp
   12f40:	ldr	r1, [r1]
   12f44:	sub	lr, r3, ip
   12f48:	mov	r0, #8
   12f4c:	ldr	r2, [r1, r2]
   12f50:	add	r3, r2, #1
   12f54:	cmp	lr, r3
   12f58:	pop	{fp, lr}
   12f5c:	bxcc	lr
   12f60:	add	r0, r1, ip
   12f64:	ldrb	r0, [r0, r2]
   12f68:	cmp	r0, #0
   12f6c:	movwne	r0, #7
   12f70:	bx	lr

00012f74 <flatcc_verify_buffer_header@@Base>:
   12f74:	push	{r4, sl, fp, lr}
   12f78:	add	fp, sp, #8
   12f7c:	sub	sp, sp, #8
   12f80:	mov	r4, r0
   12f84:	mov	r0, #5
   12f88:	tst	r4, #3
   12f8c:	bne	12fe0 <flatcc_verify_buffer_header@@Base+0x6c>
   12f90:	mov	r0, #6
   12f94:	cmn	r1, #9
   12f98:	bhi	12fe0 <flatcc_verify_buffer_header@@Base+0x6c>
   12f9c:	mov	r0, #1
   12fa0:	cmp	r1, #8
   12fa4:	bcc	12fe0 <flatcc_verify_buffer_header@@Base+0x6c>
   12fa8:	cmp	r2, #0
   12fac:	beq	12fe8 <flatcc_verify_buffer_header@@Base+0x74>
   12fb0:	mov	r0, #0
   12fb4:	mov	r1, r2
   12fb8:	mov	r2, #4
   12fbc:	str	r0, [sp, #4]
   12fc0:	add	r0, sp, #4
   12fc4:	bl	10f04 <strncpy@plt>
   12fc8:	ldr	r1, [sp, #4]
   12fcc:	cmp	r1, #0
   12fd0:	ldrne	r2, [r4, #4]
   12fd4:	movne	r0, #2
   12fd8:	cmpne	r2, r1
   12fdc:	moveq	r0, #0
   12fe0:	sub	sp, fp, #8
   12fe4:	pop	{r4, sl, fp, pc}
   12fe8:	mov	r0, #0
   12fec:	sub	sp, fp, #8
   12ff0:	pop	{r4, sl, fp, pc}

00012ff4 <flatcc_verify_typed_buffer_header@@Base>:
   12ff4:	mov	r3, r0
   12ff8:	mov	r0, #5
   12ffc:	tst	r3, #3
   13000:	bne	13034 <flatcc_verify_typed_buffer_header@@Base+0x40>
   13004:	mov	r0, #6
   13008:	cmn	r1, #9
   1300c:	bhi	13034 <flatcc_verify_typed_buffer_header@@Base+0x40>
   13010:	mov	r0, #1
   13014:	cmp	r1, #8
   13018:	bxcc	lr
   1301c:	cmp	r2, #0
   13020:	beq	13038 <flatcc_verify_typed_buffer_header@@Base+0x44>
   13024:	ldr	r1, [r3, #4]
   13028:	mov	r0, #2
   1302c:	cmp	r1, r2
   13030:	moveq	r0, #0
   13034:	bx	lr
   13038:	mov	r0, #0
   1303c:	bx	lr

00013040 <flatcc_verify_struct_as_root@@Base>:
   13040:	push	{r4, r5, r6, r7, fp, lr}
   13044:	add	fp, sp, #16
   13048:	sub	sp, sp, #8
   1304c:	mov	r5, r0
   13050:	mov	r0, #5
   13054:	tst	r5, #3
   13058:	bne	130f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   1305c:	mov	r4, r1
   13060:	mov	r0, #6
   13064:	cmn	r1, #9
   13068:	bhi	130f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   1306c:	mov	r0, #1
   13070:	cmp	r4, #8
   13074:	bcc	130f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   13078:	mov	r6, r3
   1307c:	mov	r7, r2
   13080:	cmp	r2, #0
   13084:	beq	130b4 <flatcc_verify_struct_as_root@@Base+0x74>
   13088:	mov	r0, #0
   1308c:	mov	r1, r7
   13090:	mov	r2, #4
   13094:	str	r0, [sp]
   13098:	mov	r0, sp
   1309c:	bl	10f04 <strncpy@plt>
   130a0:	ldr	r0, [sp]
   130a4:	cmp	r0, #0
   130a8:	ldrne	r1, [r5, #4]
   130ac:	cmpne	r1, r0
   130b0:	bne	130f8 <flatcc_verify_struct_as_root@@Base+0xb8>
   130b4:	ldr	r1, [r5]
   130b8:	mov	r0, #18
   130bc:	sub	r2, r1, #1
   130c0:	cmp	r2, r4
   130c4:	bcs	130f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   130c8:	adds	r2, r1, r6
   130cc:	mov	r0, #10
   130d0:	bcs	130f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   130d4:	mov	r0, #9
   130d8:	cmp	r2, r4
   130dc:	bhi	130f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   130e0:	ldr	r0, [fp, #8]
   130e4:	sub	r0, r0, #1
   130e8:	ands	r0, r1, r0
   130ec:	movwne	r0, #11
   130f0:	sub	sp, fp, #16
   130f4:	pop	{r4, r5, r6, r7, fp, pc}
   130f8:	mov	r0, #0
   130fc:	mov	r1, r7
   13100:	mov	r2, #4
   13104:	str	r0, [sp, #4]
   13108:	add	r0, sp, #4
   1310c:	bl	10f04 <strncpy@plt>
   13110:	ldr	r1, [sp, #4]
   13114:	ldr	r0, [r5, #4]
   13118:	subs	r0, r0, r1
   1311c:	movwne	r0, #2
   13120:	cmp	r1, #0
   13124:	moveq	r0, r1
   13128:	sub	sp, fp, #16
   1312c:	pop	{r4, r5, r6, r7, fp, pc}

00013130 <flatcc_verify_struct_as_typed_root@@Base>:
   13130:	push	{fp, lr}
   13134:	mov	fp, sp
   13138:	mov	ip, r0
   1313c:	mov	r0, #5
   13140:	tst	ip, #3
   13144:	bne	131b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13148:	mov	r0, #6
   1314c:	cmn	r1, #9
   13150:	bhi	131b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13154:	mov	r0, #1
   13158:	cmp	r1, #8
   1315c:	bcc	131b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13160:	cmp	r2, #0
   13164:	beq	13178 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   13168:	ldr	lr, [ip, #4]
   1316c:	mov	r0, #2
   13170:	cmp	lr, r2
   13174:	bne	131b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13178:	ldr	ip, [ip]
   1317c:	mov	r0, #18
   13180:	sub	r2, ip, #1
   13184:	cmp	r2, r1
   13188:	bcs	131b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   1318c:	adds	r3, ip, r3
   13190:	mov	r0, #10
   13194:	bcs	131b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13198:	mov	r0, #9
   1319c:	cmp	r3, r1
   131a0:	pophi	{fp, pc}
   131a4:	ldr	r0, [fp, #8]
   131a8:	sub	r0, r0, #1
   131ac:	ands	r0, ip, r0
   131b0:	movwne	r0, #11
   131b4:	pop	{fp, pc}

000131b8 <flatcc_verify_table_as_root@@Base>:
   131b8:	push	{r4, r5, r6, r7, fp, lr}
   131bc:	add	fp, sp, #16
   131c0:	sub	sp, sp, #24
   131c4:	mov	r4, r0
   131c8:	mov	r0, #5
   131cc:	tst	r4, #3
   131d0:	bne	132dc <flatcc_verify_table_as_root@@Base+0x124>
   131d4:	mov	r6, r1
   131d8:	mov	r0, #6
   131dc:	cmn	r1, #9
   131e0:	bhi	132dc <flatcc_verify_table_as_root@@Base+0x124>
   131e4:	mov	r0, #1
   131e8:	cmp	r6, #8
   131ec:	bcc	132dc <flatcc_verify_table_as_root@@Base+0x124>
   131f0:	mov	r5, r3
   131f4:	mov	r7, r2
   131f8:	cmp	r2, #0
   131fc:	beq	1322c <flatcc_verify_table_as_root@@Base+0x74>
   13200:	mov	r0, #0
   13204:	mov	r1, r7
   13208:	mov	r2, #4
   1320c:	str	r0, [sp]
   13210:	mov	r0, sp
   13214:	bl	10f04 <strncpy@plt>
   13218:	ldr	r0, [sp]
   1321c:	cmp	r0, #0
   13220:	ldrne	r1, [r4, #4]
   13224:	cmpne	r1, r0
   13228:	bne	132e4 <flatcc_verify_table_as_root@@Base+0x12c>
   1322c:	ldr	r1, [r4]
   13230:	mov	r0, #99	; 0x63
   13234:	str	r0, [sp, #8]
   13238:	mov	r0, #15
   1323c:	tst	r1, #3
   13240:	bne	132dc <flatcc_verify_table_as_root@@Base+0x124>
   13244:	cmp	r1, #0
   13248:	beq	132dc <flatcc_verify_table_as_root@@Base+0x124>
   1324c:	add	r2, r1, #4
   13250:	cmp	r2, r6
   13254:	bhi	132dc <flatcc_verify_table_as_root@@Base+0x124>
   13258:	str	r1, [sp, #16]
   1325c:	ldr	r0, [r4, r1]
   13260:	sub	r7, r1, r0
   13264:	mov	r0, #29
   13268:	tst	r7, #-2147483647	; 0x80000001
   1326c:	bne	132dc <flatcc_verify_table_as_root@@Base+0x124>
   13270:	add	r3, r7, #2
   13274:	mov	r0, #27
   13278:	cmp	r3, r6
   1327c:	bhi	132dc <flatcc_verify_table_as_root@@Base+0x124>
   13280:	mov	ip, r4
   13284:	mov	r0, #30
   13288:	ldrh	r2, [ip, r7]!
   1328c:	tst	r2, #1
   13290:	strh	r2, [sp, #22]
   13294:	bne	132dc <flatcc_verify_table_as_root@@Base+0x124>
   13298:	add	r7, r7, r2
   1329c:	cmp	r7, r6
   132a0:	bhi	132dc <flatcc_verify_table_as_root@@Base+0x124>
   132a4:	mov	r0, #28
   132a8:	cmp	r2, #4
   132ac:	bcc	132dc <flatcc_verify_table_as_root@@Base+0x124>
   132b0:	add	r0, r4, r3
   132b4:	sub	r1, r6, r1
   132b8:	ldrh	r2, [r0]
   132bc:	mov	r0, #20
   132c0:	cmp	r1, r2
   132c4:	strh	r2, [sp, #20]
   132c8:	bcc	132dc <flatcc_verify_table_as_root@@Base+0x124>
   132cc:	mov	r0, sp
   132d0:	str	ip, [sp, #12]
   132d4:	stm	sp, {r4, r6}
   132d8:	blx	r5
   132dc:	sub	sp, fp, #16
   132e0:	pop	{r4, r5, r6, r7, fp, pc}
   132e4:	mov	r0, #0
   132e8:	mov	r1, r7
   132ec:	mov	r2, #4
   132f0:	str	r0, [sp]
   132f4:	mov	r0, sp
   132f8:	bl	10f04 <strncpy@plt>
   132fc:	ldr	r1, [sp]
   13300:	ldr	r0, [r4, #4]
   13304:	subs	r0, r0, r1
   13308:	movwne	r0, #2
   1330c:	cmp	r1, #0
   13310:	moveq	r0, r1
   13314:	sub	sp, fp, #16
   13318:	pop	{r4, r5, r6, r7, fp, pc}

0001331c <flatcc_verify_table_as_typed_root@@Base>:
   1331c:	push	{r4, r5, r6, sl, fp, lr}
   13320:	add	fp, sp, #16
   13324:	sub	sp, sp, #24
   13328:	mov	ip, #5
   1332c:	tst	r0, #3
   13330:	bne	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13334:	mov	ip, #6
   13338:	cmn	r1, #9
   1333c:	bhi	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13340:	mov	ip, #1
   13344:	cmp	r1, #8
   13348:	bcc	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1334c:	cmp	r2, #0
   13350:	beq	13364 <flatcc_verify_table_as_typed_root@@Base+0x48>
   13354:	ldr	r6, [r0, #4]
   13358:	mov	ip, #2
   1335c:	cmp	r6, r2
   13360:	bne	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13364:	ldr	r2, [r0]
   13368:	mov	r6, #99	; 0x63
   1336c:	mov	ip, #15
   13370:	str	r6, [sp, #8]
   13374:	tst	r2, #3
   13378:	bne	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1337c:	cmp	r2, #0
   13380:	beq	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13384:	add	r6, r2, #4
   13388:	cmp	r6, r1
   1338c:	bhi	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13390:	str	r2, [sp, #16]
   13394:	mov	ip, #29
   13398:	ldr	r6, [r0, r2]
   1339c:	sub	r5, r2, r6
   133a0:	tst	r5, #-2147483647	; 0x80000001
   133a4:	bne	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133a8:	add	r4, r5, #2
   133ac:	mov	ip, #27
   133b0:	cmp	r4, r1
   133b4:	bhi	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133b8:	mov	lr, r0
   133bc:	mov	ip, #30
   133c0:	ldrh	r6, [lr, r5]!
   133c4:	tst	r6, #1
   133c8:	strh	r6, [sp, #22]
   133cc:	bne	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133d0:	add	r5, r5, r6
   133d4:	cmp	r5, r1
   133d8:	bhi	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133dc:	mov	ip, #28
   133e0:	cmp	r6, #4
   133e4:	bcc	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   133e8:	add	r6, r0, r4
   133ec:	sub	r2, r1, r2
   133f0:	mov	ip, #20
   133f4:	ldrh	r4, [r6]
   133f8:	cmp	r2, r4
   133fc:	strh	r4, [sp, #20]
   13400:	bcc	13418 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13404:	str	lr, [sp, #12]
   13408:	stm	sp, {r0, r1}
   1340c:	mov	r0, sp
   13410:	blx	r3
   13414:	mov	ip, r0
   13418:	mov	r0, ip
   1341c:	sub	sp, fp, #16
   13420:	pop	{r4, r5, r6, sl, fp, pc}

00013424 <flatcc_verify_struct_as_nested_root@@Base>:
   13424:	push	{r4, r5, r6, sl, fp, lr}
   13428:	add	fp, sp, #16
   1342c:	sub	sp, sp, #8
   13430:	ldrh	r5, [r0, #22]
   13434:	mov	r6, #4
   13438:	ldr	lr, [fp, #12]
   1343c:	add	r1, r6, r1, lsl #1
   13440:	uxth	r4, r1
   13444:	cmp	r4, r5
   13448:	bcs	134cc <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   1344c:	ldr	ip, [r0, #12]
   13450:	ldrh	r6, [ip, r4]!
   13454:	cmp	r6, #0
   13458:	beq	134cc <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   1345c:	ldrh	r1, [r0, #20]
   13460:	add	r4, r6, #4
   13464:	cmp	r4, r1
   13468:	bhi	134e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   1346c:	ldr	r1, [r0, #16]
   13470:	add	r5, r1, r6
   13474:	tst	r5, #3
   13478:	bne	134e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   1347c:	cmp	r5, #0
   13480:	beq	13590 <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   13484:	ldr	r1, [r0]
   13488:	ldr	r4, [r1, r5]
   1348c:	add	r4, r4, r5
   13490:	cmp	r4, r5
   13494:	bls	134e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   13498:	ldr	r5, [r0, #4]
   1349c:	add	r6, r4, #4
   134a0:	cmp	r6, r5
   134a4:	bhi	134e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   134a8:	ands	r6, r6, #3
   134ac:	bne	134e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   134b0:	ldr	r1, [r1, r4]
   134b4:	sub	r5, r5, #4
   134b8:	sub	r5, r5, r4
   134bc:	mul	r1, r1, lr
   134c0:	cmp	r5, r1
   134c4:	bcc	134e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   134c8:	b	13590 <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   134cc:	cmp	r2, #0
   134d0:	beq	1357c <flatcc_verify_struct_as_nested_root@@Base+0x158>
   134d4:	cmp	r4, r5
   134d8:	bcs	13570 <flatcc_verify_struct_as_nested_root@@Base+0x14c>
   134dc:	ldr	r3, [r0, #12]
   134e0:	uxtah	ip, r3, r1
   134e4:	ldrh	r1, [ip]
   134e8:	cmp	r1, #0
   134ec:	beq	13570 <flatcc_verify_struct_as_nested_root@@Base+0x14c>
   134f0:	ldrh	r3, [r0, #20]
   134f4:	add	r6, r1, #4
   134f8:	mov	r2, #13
   134fc:	cmp	r6, r3
   13500:	bhi	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   13504:	ldr	r2, [r0, #16]
   13508:	add	r6, r2, r1
   1350c:	mov	r2, #12
   13510:	tst	r6, #3
   13514:	bne	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   13518:	cmp	r6, #0
   1351c:	beq	135e4 <flatcc_verify_struct_as_nested_root@@Base+0x1c0>
   13520:	ldr	r1, [r0]
   13524:	ldr	r2, [r1, r6]
   13528:	add	r3, r2, r6
   1352c:	mov	r2, #16
   13530:	cmp	r3, r6
   13534:	bls	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   13538:	ldr	r0, [r0, #4]
   1353c:	add	r6, r3, #4
   13540:	cmp	r6, r0
   13544:	bhi	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   13548:	ands	r6, r6, #3
   1354c:	bne	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   13550:	ldr	r1, [r1, r3]
   13554:	sub	r0, r0, #4
   13558:	mov	r2, #0
   1355c:	sub	r0, r0, r3
   13560:	mul	r1, r1, lr
   13564:	cmp	r0, r1
   13568:	movwcc	r2, #26
   1356c:	b	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   13570:	cmp	r2, #0
   13574:	movwne	r2, #4
   13578:	b	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   1357c:	mov	r2, #0
   13580:	cmp	r4, r5
   13584:	bcs	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   13588:	ldr	r2, [r0, #12]
   1358c:	uxtah	ip, r2, r1
   13590:	ldrh	r1, [ip]
   13594:	mov	r2, #0
   13598:	cmp	r1, #0
   1359c:	ldrne	r6, [r0]
   135a0:	ldrne	r0, [r0, #16]
   135a4:	addne	r0, r6, r0
   135a8:	addsne	r0, r0, r1
   135ac:	bne	135bc <flatcc_verify_struct_as_nested_root@@Base+0x198>
   135b0:	mov	r0, r2
   135b4:	sub	sp, fp, #16
   135b8:	pop	{r4, r5, r6, sl, fp, pc}
   135bc:	ldr	r2, [r0]
   135c0:	ldr	ip, [fp, #8]
   135c4:	ldr	r1, [r2, r0]!
   135c8:	str	lr, [sp]
   135cc:	add	r0, r2, #4
   135d0:	mov	r2, r3
   135d4:	mov	r3, ip
   135d8:	bl	13040 <flatcc_verify_struct_as_root@@Base>
   135dc:	sub	sp, fp, #16
   135e0:	pop	{r4, r5, r6, sl, fp, pc}
   135e4:	mov	r2, #0
   135e8:	b	135b0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>

000135ec <flatcc_verify_table_as_nested_root@@Base>:
   135ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135f0:	add	fp, sp, #24
   135f4:	sub	sp, sp, #24
   135f8:	mov	r4, r0
   135fc:	mov	r0, #4
   13600:	ldr	ip, [fp, #8]
   13604:	mov	r5, r3
   13608:	ldrh	r6, [r4, #22]
   1360c:	add	r3, r0, r1, lsl #1
   13610:	uxth	r7, r3
   13614:	cmp	r7, r6
   13618:	bcs	1369c <flatcc_verify_table_as_nested_root@@Base+0xb0>
   1361c:	ldr	r1, [r4, #12]
   13620:	ldrh	r0, [r1, r7]!
   13624:	cmp	r0, #0
   13628:	beq	1369c <flatcc_verify_table_as_nested_root@@Base+0xb0>
   1362c:	ldrh	r3, [r4, #20]
   13630:	add	r7, r0, #4
   13634:	cmp	r7, r3
   13638:	bhi	136b4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1363c:	ldr	r3, [r4, #16]
   13640:	add	r0, r3, r0
   13644:	tst	r0, #3
   13648:	bne	136b4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1364c:	cmp	r0, #0
   13650:	beq	13760 <flatcc_verify_table_as_nested_root@@Base+0x174>
   13654:	ldr	r3, [r4]
   13658:	ldr	r7, [r3, r0]
   1365c:	add	r7, r7, r0
   13660:	cmp	r7, r0
   13664:	bls	136b4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   13668:	ldr	r0, [r4, #4]
   1366c:	add	r6, r7, #4
   13670:	cmp	r6, r0
   13674:	bhi	136b4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   13678:	ands	r6, r6, #3
   1367c:	bne	136b4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   13680:	ldr	r3, [r3, r7]
   13684:	sub	r0, r0, #4
   13688:	sub	r0, r0, r7
   1368c:	mul	r3, r3, ip
   13690:	cmp	r0, r3
   13694:	bcc	136b4 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   13698:	b	13760 <flatcc_verify_table_as_nested_root@@Base+0x174>
   1369c:	cmp	r2, #0
   136a0:	beq	1374c <flatcc_verify_table_as_nested_root@@Base+0x160>
   136a4:	cmp	r7, r6
   136a8:	bcs	13740 <flatcc_verify_table_as_nested_root@@Base+0x154>
   136ac:	ldr	r0, [r4, #12]
   136b0:	uxtah	r1, r0, r3
   136b4:	ldrh	r0, [r1]
   136b8:	cmp	r0, #0
   136bc:	beq	13740 <flatcc_verify_table_as_nested_root@@Base+0x154>
   136c0:	ldrh	r1, [r4, #20]
   136c4:	add	r3, r0, #4
   136c8:	mov	r2, #13
   136cc:	cmp	r3, r1
   136d0:	bhi	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   136d4:	ldr	r1, [r4, #16]
   136d8:	mov	r2, #12
   136dc:	add	r0, r1, r0
   136e0:	tst	r0, #3
   136e4:	bne	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   136e8:	cmp	r0, #0
   136ec:	beq	138b4 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   136f0:	ldr	r1, [r4]
   136f4:	ldr	r2, [r1, r0]
   136f8:	add	r3, r2, r0
   136fc:	mov	r2, #16
   13700:	cmp	r3, r0
   13704:	bls	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13708:	ldr	r0, [r4, #4]
   1370c:	add	r7, r3, #4
   13710:	cmp	r7, r0
   13714:	bhi	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13718:	ands	r7, r7, #3
   1371c:	bne	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13720:	ldr	r1, [r1, r3]
   13724:	sub	r0, r0, #4
   13728:	mov	r2, #0
   1372c:	sub	r0, r0, r3
   13730:	mul	r1, r1, ip
   13734:	cmp	r0, r1
   13738:	movwcc	r2, #26
   1373c:	b	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13740:	cmp	r2, #0
   13744:	movwne	r2, #4
   13748:	b	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   1374c:	mov	r2, #0
   13750:	cmp	r7, r6
   13754:	bcs	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13758:	ldr	r0, [r4, #12]
   1375c:	uxtah	r1, r0, r3
   13760:	ldrh	r0, [r1]
   13764:	mov	r2, #0
   13768:	cmp	r0, #0
   1376c:	ldrne	r1, [r4]
   13770:	ldrne	r3, [r4, #16]
   13774:	addne	r1, r1, r3
   13778:	addsne	r0, r1, r0
   1377c:	bne	1378c <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   13780:	mov	r0, r2
   13784:	sub	sp, fp, #24
   13788:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1378c:	ldr	r6, [r0]
   13790:	mov	r2, #5
   13794:	ldr	r8, [r6, r0]!
   13798:	add	r7, r6, #4
   1379c:	tst	r7, #3
   137a0:	bne	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   137a4:	mov	r2, #6
   137a8:	cmn	r8, #9
   137ac:	bhi	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   137b0:	mov	r2, #1
   137b4:	cmp	r8, #8
   137b8:	bcc	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   137bc:	cmp	r5, #0
   137c0:	beq	137f0 <flatcc_verify_table_as_nested_root@@Base+0x204>
   137c4:	mov	r0, #0
   137c8:	mov	r1, r5
   137cc:	mov	r2, #4
   137d0:	str	r0, [sp]
   137d4:	mov	r0, sp
   137d8:	bl	10f04 <strncpy@plt>
   137dc:	ldr	r0, [sp]
   137e0:	cmp	r0, #0
   137e4:	ldrne	r1, [r6, #8]
   137e8:	cmpne	r1, r0
   137ec:	bne	138bc <flatcc_verify_table_as_nested_root@@Base+0x2d0>
   137f0:	ldr	r1, [r4, #8]
   137f4:	ldr	r0, [r7]
   137f8:	subs	r1, r1, #1
   137fc:	str	r1, [sp, #8]
   13800:	beq	138f4 <flatcc_verify_table_as_nested_root@@Base+0x308>
   13804:	mov	r2, #15
   13808:	tst	r0, #3
   1380c:	bne	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13810:	cmp	r0, #0
   13814:	beq	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13818:	add	r1, r0, #4
   1381c:	cmp	r1, r8
   13820:	bhi	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13824:	str	r0, [sp, #16]
   13828:	mov	r2, #29
   1382c:	ldr	r1, [r7, r0]
   13830:	sub	r6, r0, r1
   13834:	tst	r6, #-2147483647	; 0x80000001
   13838:	bne	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   1383c:	add	r3, r6, #2
   13840:	mov	r2, #27
   13844:	cmp	r3, r8
   13848:	bhi	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   1384c:	mov	r1, r7
   13850:	mov	r2, #30
   13854:	ldrh	r5, [r1, r6]!
   13858:	tst	r5, #1
   1385c:	strh	r5, [sp, #22]
   13860:	bne	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13864:	add	r6, r6, r5
   13868:	cmp	r6, r8
   1386c:	bhi	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13870:	mov	r2, #28
   13874:	cmp	r5, #4
   13878:	bcc	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   1387c:	add	r2, r7, r3
   13880:	sub	r0, r8, r0
   13884:	ldrh	r3, [r2]
   13888:	mov	r2, #20
   1388c:	cmp	r0, r3
   13890:	strh	r3, [sp, #20]
   13894:	bcc	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   13898:	ldr	r2, [fp, #12]
   1389c:	mov	r0, sp
   138a0:	str	r1, [sp, #12]
   138a4:	stm	sp, {r7, r8}
   138a8:	blx	r2
   138ac:	mov	r2, r0
   138b0:	b	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   138b4:	mov	r2, #0
   138b8:	b	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>
   138bc:	mov	r0, #0
   138c0:	mov	r1, r5
   138c4:	mov	r2, #4
   138c8:	str	r0, [sp]
   138cc:	mov	r0, sp
   138d0:	bl	10f04 <strncpy@plt>
   138d4:	ldr	r1, [sp]
   138d8:	ldr	r0, [r6, #8]
   138dc:	subs	r0, r0, r1
   138e0:	movwne	r0, #2
   138e4:	cmp	r1, #0
   138e8:	moveq	r0, r1
   138ec:	sub	sp, fp, #24
   138f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138f4:	mov	r2, #3
   138f8:	b	13780 <flatcc_verify_table_as_nested_root@@Base+0x194>

000138fc <flatcc_verify_union_field@@Base>:
   138fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13900:	add	fp, sp, #28
   13904:	sub	sp, sp, #28
   13908:	ldrh	r4, [r0, #22]
   1390c:	mov	r7, #2
   13910:	lsl	r5, r1, #1
   13914:	add	r7, r7, r1, lsl #1
   13918:	uxth	r6, r7
   1391c:	cmp	r6, r4
   13920:	bcs	13a14 <flatcc_verify_union_field@@Base+0x118>
   13924:	ldr	r6, [r0, #12]
   13928:	uxtah	r1, r6, r7
   1392c:	ldrh	ip, [r1]
   13930:	cmp	ip, #0
   13934:	beq	13a14 <flatcc_verify_union_field@@Base+0x118>
   13938:	ldrh	r7, [r0, #20]
   1393c:	mov	r1, #13
   13940:	cmp	ip, r7
   13944:	bcs	13a48 <flatcc_verify_union_field@@Base+0x14c>
   13948:	add	r7, r5, #4
   1394c:	ldr	lr, [r0]
   13950:	ldr	r9, [r0, #16]
   13954:	mov	r1, #1
   13958:	uxth	sl, r7
   1395c:	cmp	sl, r4
   13960:	uxtahcc	r1, r6, r7
   13964:	ldrhcc	r1, [r1]
   13968:	add	r8, lr, r9
   1396c:	ldrb	r5, [r8, ip]
   13970:	clzcc	r1, r1
   13974:	lsrcc	r1, r1, #5
   13978:	cmp	r1, #0
   1397c:	moveq	r1, #24
   13980:	cmpeq	r5, #0
   13984:	beq	13a48 <flatcc_verify_union_field@@Base+0x14c>
   13988:	mov	r1, #0
   1398c:	cmp	r5, #0
   13990:	beq	13a48 <flatcc_verify_union_field@@Base+0x14c>
   13994:	cmp	sl, r4
   13998:	bcs	13a54 <flatcc_verify_union_field@@Base+0x158>
   1399c:	uxtah	r1, r6, r7
   139a0:	ldrh	r4, [r1]
   139a4:	cmp	r4, #0
   139a8:	beq	13a54 <flatcc_verify_union_field@@Base+0x158>
   139ac:	ldrh	r1, [r0, #20]
   139b0:	add	r2, r4, #4
   139b4:	cmp	r2, r1
   139b8:	mov	r1, #13
   139bc:	bhi	13a48 <flatcc_verify_union_field@@Base+0x14c>
   139c0:	add	r2, r9, r4
   139c4:	mov	r1, #12
   139c8:	tst	r2, #3
   139cc:	bne	13a48 <flatcc_verify_union_field@@Base+0x14c>
   139d0:	cmp	r2, #0
   139d4:	mov	r1, #0
   139d8:	beq	13a48 <flatcc_verify_union_field@@Base+0x14c>
   139dc:	str	lr, [sp, #4]
   139e0:	ldr	r1, [r0, #4]
   139e4:	ldr	r0, [r0, #8]
   139e8:	str	r1, [sp, #8]
   139ec:	str	r2, [sp, #20]
   139f0:	str	r0, [sp, #12]
   139f4:	ldr	r0, [lr, r2]
   139f8:	str	r0, [sp, #24]
   139fc:	ldrb	r0, [r8, ip]
   13a00:	strb	r0, [sp, #16]
   13a04:	add	r0, sp, #4
   13a08:	blx	r3
   13a0c:	mov	r1, r0
   13a10:	b	13a48 <flatcc_verify_union_field@@Base+0x14c>
   13a14:	add	r1, r5, #4
   13a18:	uxth	r3, r1
   13a1c:	cmp	r3, r4
   13a20:	bcs	13a3c <flatcc_verify_union_field@@Base+0x140>
   13a24:	ldr	r0, [r0, #12]
   13a28:	uxtah	r0, r0, r1
   13a2c:	mov	r1, #23
   13a30:	ldrh	r0, [r0]
   13a34:	cmp	r0, #0
   13a38:	bne	13a48 <flatcc_verify_union_field@@Base+0x14c>
   13a3c:	cmp	r2, #0
   13a40:	movwne	r2, #21
   13a44:	mov	r1, r2
   13a48:	mov	r0, r1
   13a4c:	sub	sp, fp, #28
   13a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a54:	cmp	r2, #0
   13a58:	movwne	r2, #4
   13a5c:	b	13a44 <flatcc_verify_union_field@@Base+0x148>

00013a60 <flatcc_verify_union_vector_field@@Base>:
   13a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a64:	add	fp, sp, #28
   13a68:	sub	sp, sp, #28
   13a6c:	mov	r9, r3
   13a70:	mov	r3, #2
   13a74:	lsl	lr, r1, #1
   13a78:	add	r6, r3, r1, lsl #1
   13a7c:	ldrh	r3, [r0, #22]
   13a80:	uxth	r4, r6
   13a84:	cmp	r4, r3
   13a88:	bcs	13aa0 <flatcc_verify_union_vector_field@@Base+0x40>
   13a8c:	ldr	r7, [r0, #12]
   13a90:	mov	r1, r7
   13a94:	ldrh	r5, [r1, r4]!
   13a98:	cmp	r5, #0
   13a9c:	bne	13aec <flatcc_verify_union_vector_field@@Base+0x8c>
   13aa0:	add	r1, lr, #4
   13aa4:	uxth	r7, r1
   13aa8:	cmp	r7, r3
   13aac:	bcs	13b58 <flatcc_verify_union_vector_field@@Base+0xf8>
   13ab0:	cmp	r2, #0
   13ab4:	beq	13ad0 <flatcc_verify_union_vector_field@@Base+0x70>
   13ab8:	ldr	r7, [r0, #12]
   13abc:	uxtah	r1, r7, r1
   13ac0:	ldrh	r7, [r1]
   13ac4:	mov	r1, #22
   13ac8:	cmp	r7, #0
   13acc:	beq	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13ad0:	cmp	r4, r3
   13ad4:	bcs	13b68 <flatcc_verify_union_vector_field@@Base+0x108>
   13ad8:	ldr	r7, [r0, #12]
   13adc:	mov	r1, r7
   13ae0:	ldrh	r5, [r1, r4]!
   13ae4:	cmp	r5, #0
   13ae8:	beq	13b68 <flatcc_verify_union_vector_field@@Base+0x108>
   13aec:	ldrh	r6, [r0, #20]
   13af0:	add	r4, r5, #4
   13af4:	cmp	r4, r6
   13af8:	bhi	13b80 <flatcc_verify_union_vector_field@@Base+0x120>
   13afc:	ldr	r6, [r0, #16]
   13b00:	add	r4, r6, r5
   13b04:	tst	r4, #3
   13b08:	bne	13b80 <flatcc_verify_union_vector_field@@Base+0x120>
   13b0c:	cmp	r4, #0
   13b10:	beq	13c1c <flatcc_verify_union_vector_field@@Base+0x1bc>
   13b14:	ldr	r6, [r0]
   13b18:	ldr	r5, [r6, r4]
   13b1c:	add	r5, r5, r4
   13b20:	cmp	r5, r4
   13b24:	bls	13b80 <flatcc_verify_union_vector_field@@Base+0x120>
   13b28:	ldr	ip, [r0, #4]
   13b2c:	add	r4, r5, #4
   13b30:	cmp	r4, ip
   13b34:	bhi	13b80 <flatcc_verify_union_vector_field@@Base+0x120>
   13b38:	ands	r4, r4, #3
   13b3c:	bne	13b80 <flatcc_verify_union_vector_field@@Base+0x120>
   13b40:	ldr	r4, [r6, r5]
   13b44:	sub	r6, ip, #4
   13b48:	sub	r6, r6, r5
   13b4c:	cmp	r6, r4
   13b50:	bcc	13b80 <flatcc_verify_union_vector_field@@Base+0x120>
   13b54:	b	13c1c <flatcc_verify_union_vector_field@@Base+0x1bc>
   13b58:	mov	r1, #22
   13b5c:	cmp	r2, #0
   13b60:	bne	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13b64:	b	13ad0 <flatcc_verify_union_vector_field@@Base+0x70>
   13b68:	cmp	r2, #0
   13b6c:	beq	13c08 <flatcc_verify_union_vector_field@@Base+0x1a8>
   13b70:	cmp	r4, r3
   13b74:	bcs	13d84 <flatcc_verify_union_vector_field@@Base+0x324>
   13b78:	ldr	r1, [r0, #12]
   13b7c:	uxtah	r1, r1, r6
   13b80:	ldrh	r3, [r1]
   13b84:	cmp	r3, #0
   13b88:	beq	13d84 <flatcc_verify_union_vector_field@@Base+0x324>
   13b8c:	ldrh	r2, [r0, #20]
   13b90:	add	r7, r3, #4
   13b94:	mov	r1, #13
   13b98:	cmp	r7, r2
   13b9c:	bhi	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13ba0:	ldr	r1, [r0, #16]
   13ba4:	add	r7, r1, r3
   13ba8:	mov	r1, #12
   13bac:	tst	r7, #3
   13bb0:	bne	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13bb4:	cmp	r7, #0
   13bb8:	beq	13d9c <flatcc_verify_union_vector_field@@Base+0x33c>
   13bbc:	ldr	r2, [r0]
   13bc0:	ldr	r1, [r2, r7]
   13bc4:	add	r3, r1, r7
   13bc8:	mov	r1, #16
   13bcc:	cmp	r3, r7
   13bd0:	bls	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13bd4:	ldr	r0, [r0, #4]
   13bd8:	add	r7, r3, #4
   13bdc:	cmp	r7, r0
   13be0:	bhi	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13be4:	ands	r7, r7, #3
   13be8:	bne	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13bec:	ldr	r2, [r2, r3]
   13bf0:	sub	r0, r0, #4
   13bf4:	mov	r1, #0
   13bf8:	sub	r0, r0, r3
   13bfc:	cmp	r0, r2
   13c00:	movwcc	r1, #26
   13c04:	b	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13c08:	mov	r1, #0
   13c0c:	cmp	r4, r3
   13c10:	bcs	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13c14:	ldr	r7, [r0, #12]
   13c18:	uxtah	r1, r7, r6
   13c1c:	ldrh	r5, [r1]
   13c20:	mov	r1, #0
   13c24:	cmp	r5, #0
   13c28:	ldrne	r8, [r0]
   13c2c:	ldrne	r6, [r0, #16]
   13c30:	addne	r4, r8, r6
   13c34:	addsne	ip, r4, r5
   13c38:	beq	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13c3c:	add	r1, lr, #4
   13c40:	uxth	r5, r1
   13c44:	cmp	r5, r3
   13c48:	bcs	13d84 <flatcc_verify_union_vector_field@@Base+0x324>
   13c4c:	uxtah	r1, r7, r1
   13c50:	ldrh	r3, [r1]
   13c54:	cmp	r3, #0
   13c58:	beq	13d84 <flatcc_verify_union_vector_field@@Base+0x324>
   13c5c:	ldrh	r2, [r0, #20]
   13c60:	add	r7, r3, #4
   13c64:	mov	r1, #13
   13c68:	cmp	r7, r2
   13c6c:	bhi	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13c70:	add	r4, r6, r3
   13c74:	mov	r1, #12
   13c78:	tst	r4, #3
   13c7c:	bne	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13c80:	cmp	r4, #0
   13c84:	mov	r1, #0
   13c88:	beq	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13c8c:	ldr	r7, [r0, #8]
   13c90:	cmp	r7, #1
   13c94:	blt	13da4 <flatcc_verify_union_vector_field@@Base+0x344>
   13c98:	ldr	r2, [r8, r4]
   13c9c:	mov	r1, #16
   13ca0:	add	r5, r2, r4
   13ca4:	cmp	r5, r4
   13ca8:	bls	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13cac:	ldr	r0, [r0, #4]
   13cb0:	add	r4, r5, #4
   13cb4:	cmp	r4, r0
   13cb8:	bhi	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13cbc:	ands	r4, r4, #3
   13cc0:	bne	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13cc4:	ldr	r4, [r8, r5]
   13cc8:	mov	r1, #25
   13ccc:	cmn	r4, #-1073741823	; 0xc0000001
   13cd0:	bhi	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13cd4:	sub	r1, r0, #4
   13cd8:	sub	r5, r1, r5
   13cdc:	mov	r1, #26
   13ce0:	cmp	r5, r4, lsl #2
   13ce4:	bcc	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13ce8:	ldr	r5, [ip]
   13cec:	mov	r1, #34	; 0x22
   13cf0:	ldr	sl, [r5, ip]!
   13cf4:	cmp	r4, sl
   13cf8:	bne	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13cfc:	cmp	sl, #0
   13d00:	sub	r1, r7, #1
   13d04:	str	r0, [sp, #8]
   13d08:	str	r8, [sp, #4]
   13d0c:	str	r1, [sp, #12]
   13d10:	beq	13d9c <flatcc_verify_union_vector_field@@Base+0x33c>
   13d14:	add	r0, r2, r6
   13d18:	add	r7, r5, #4
   13d1c:	mov	r5, #0
   13d20:	add	r4, sp, #4
   13d24:	add	r0, r0, r3
   13d28:	add	r6, r0, #4
   13d2c:	ldr	r1, [r8, r6]
   13d30:	ldrb	r0, [r7, r5]
   13d34:	cmp	r1, #0
   13d38:	beq	13d64 <flatcc_verify_union_vector_field@@Base+0x304>
   13d3c:	cmp	r0, #0
   13d40:	beq	13dac <flatcc_verify_union_vector_field@@Base+0x34c>
   13d44:	str	r6, [sp, #20]
   13d48:	strb	r0, [sp, #16]
   13d4c:	mov	r0, r4
   13d50:	str	r1, [sp, #24]
   13d54:	blx	r9
   13d58:	cmp	r0, #0
   13d5c:	beq	13d6c <flatcc_verify_union_vector_field@@Base+0x30c>
   13d60:	b	13db4 <flatcc_verify_union_vector_field@@Base+0x354>
   13d64:	cmp	r0, #0
   13d68:	bne	13dc4 <flatcc_verify_union_vector_field@@Base+0x364>
   13d6c:	add	r5, r5, #1
   13d70:	add	r6, r6, #4
   13d74:	mov	r1, #0
   13d78:	cmp	r5, sl
   13d7c:	bcc	13d2c <flatcc_verify_union_vector_field@@Base+0x2cc>
   13d80:	b	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13d84:	cmp	r2, #0
   13d88:	movwne	r2, #4
   13d8c:	mov	r1, r2
   13d90:	mov	r0, r1
   13d94:	sub	sp, fp, #28
   13d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d9c:	mov	r1, #0
   13da0:	b	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13da4:	mov	r1, #3
   13da8:	b	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13dac:	mov	r1, #33	; 0x21
   13db0:	b	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13db4:	add	r0, sp, #4
   13db8:	blx	r9
   13dbc:	mov	r1, r0
   13dc0:	b	13d90 <flatcc_verify_union_vector_field@@Base+0x330>
   13dc4:	mov	r1, #32
   13dc8:	b	13d90 <flatcc_verify_union_vector_field@@Base+0x330>

00013dcc <__libc_csu_init@@Base>:
   13dcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13dd0:	mov	r7, r0
   13dd4:	ldr	r6, [pc, #72]	; 13e24 <__libc_csu_init@@Base+0x58>
   13dd8:	ldr	r5, [pc, #72]	; 13e28 <__libc_csu_init@@Base+0x5c>
   13ddc:	add	r6, pc, r6
   13de0:	add	r5, pc, r5
   13de4:	sub	r6, r6, r5
   13de8:	mov	r8, r1
   13dec:	mov	r9, r2
   13df0:	bl	10e30 <strcmp@plt-0x20>
   13df4:	asrs	r6, r6, #2
   13df8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13dfc:	mov	r4, #0
   13e00:	add	r4, r4, #1
   13e04:	ldr	r3, [r5], #4
   13e08:	mov	r2, r9
   13e0c:	mov	r1, r8
   13e10:	mov	r0, r7
   13e14:	blx	r3
   13e18:	cmp	r6, r4
   13e1c:	bne	13e00 <__libc_csu_init@@Base+0x34>
   13e20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e24:	andeq	r1, r1, r8, ror r0
   13e28:	andeq	r1, r1, r0, ror r0

00013e2c <__libc_csu_fini@@Base>:
   13e2c:	bx	lr

Disassembly of section .fini:

00013e30 <.fini>:
   13e30:	push	{r3, lr}
   13e34:	pop	{r3, pc}
