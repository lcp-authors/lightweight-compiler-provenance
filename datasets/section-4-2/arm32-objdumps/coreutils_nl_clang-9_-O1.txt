
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

000111d4 <.init>:
   111d4:	push	{r3, lr}
   111d8:	bl	11560 <__assert_fail@plt+0x48>
   111dc:	pop	{r3, pc}

Disassembly of section .plt:

000111e0 <pthread_mutex_unlock@plt-0x14>:
   111e0:	push	{lr}		; (str lr, [sp, #-4]!)
   111e4:	ldr	lr, [pc, #4]	; 111f0 <pthread_mutex_unlock@plt-0x4>
   111e8:	add	lr, pc, lr
   111ec:	ldr	pc, [lr, #8]!
   111f0:	andeq	r3, r2, r0, lsl lr

000111f4 <pthread_mutex_unlock@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #143360	; 0x23000
   111fc:	ldr	pc, [ip, #3600]!	; 0xe10

00011200 <calloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #143360	; 0x23000
   11208:	ldr	pc, [ip, #3592]!	; 0xe08

0001120c <fputs_unlocked@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #143360	; 0x23000
   11214:	ldr	pc, [ip, #3584]!	; 0xe00

00011218 <wctype@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #143360	; 0x23000
   11220:	ldr	pc, [ip, #3576]!	; 0xdf8

00011224 <raise@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #143360	; 0x23000
   1122c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011230 <wcrtomb@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #143360	; 0x23000
   11238:	ldr	pc, [ip, #3560]!	; 0xde8

0001123c <iswctype@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #143360	; 0x23000
   11244:	ldr	pc, [ip, #3552]!	; 0xde0

00011248 <strcmp@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #143360	; 0x23000
   11250:	ldr	pc, [ip, #3544]!	; 0xdd8

00011254 <posix_fadvise64@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #143360	; 0x23000
   1125c:	ldr	pc, [ip, #3536]!	; 0xdd0

00011260 <pthread_mutex_destroy@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #143360	; 0x23000
   11268:	ldr	pc, [ip, #3528]!	; 0xdc8

0001126c <fflush@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #143360	; 0x23000
   11274:	ldr	pc, [ip, #3520]!	; 0xdc0

00011278 <memmove@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #143360	; 0x23000
   11280:	ldr	pc, [ip, #3512]!	; 0xdb8

00011284 <free@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #143360	; 0x23000
   1128c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011290 <pthread_mutex_lock@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #143360	; 0x23000
   11298:	ldr	pc, [ip, #3496]!	; 0xda8

0001129c <_exit@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #143360	; 0x23000
   112a4:	ldr	pc, [ip, #3488]!	; 0xda0

000112a8 <memcpy@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #143360	; 0x23000
   112b0:	ldr	pc, [ip, #3480]!	; 0xd98

000112b4 <tolower@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #143360	; 0x23000
   112bc:	ldr	pc, [ip, #3472]!	; 0xd90

000112c0 <pthread_mutex_init@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #143360	; 0x23000
   112c8:	ldr	pc, [ip, #3464]!	; 0xd88

000112cc <towlower@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #143360	; 0x23000
   112d4:	ldr	pc, [ip, #3456]!	; 0xd80

000112d8 <mbsinit@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #143360	; 0x23000
   112e0:	ldr	pc, [ip, #3448]!	; 0xd78

000112e4 <fwrite_unlocked@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #143360	; 0x23000
   112ec:	ldr	pc, [ip, #3440]!	; 0xd70

000112f0 <stpcpy@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #143360	; 0x23000
   112f8:	ldr	pc, [ip, #3432]!	; 0xd68

000112fc <getc_unlocked@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #143360	; 0x23000
   11304:	ldr	pc, [ip, #3424]!	; 0xd60

00011308 <dcgettext@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #143360	; 0x23000
   11310:	ldr	pc, [ip, #3416]!	; 0xd58

00011314 <realloc@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #143360	; 0x23000
   1131c:	ldr	pc, [ip, #3408]!	; 0xd50

00011320 <textdomain@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #143360	; 0x23000
   11328:	ldr	pc, [ip, #3400]!	; 0xd48

0001132c <iswprint@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #143360	; 0x23000
   11334:	ldr	pc, [ip, #3392]!	; 0xd40

00011338 <fwrite@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #143360	; 0x23000
   11340:	ldr	pc, [ip, #3384]!	; 0xd38

00011344 <lseek64@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #143360	; 0x23000
   1134c:	ldr	pc, [ip, #3376]!	; 0xd30

00011350 <__ctype_get_mb_cur_max@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #143360	; 0x23000
   11358:	ldr	pc, [ip, #3368]!	; 0xd28

0001135c <__fpending@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #143360	; 0x23000
   11364:	ldr	pc, [ip, #3360]!	; 0xd20

00011368 <ferror_unlocked@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #143360	; 0x23000
   11370:	ldr	pc, [ip, #3352]!	; 0xd18

00011374 <mbrtowc@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #143360	; 0x23000
   1137c:	ldr	pc, [ip, #3344]!	; 0xd10

00011380 <error@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #143360	; 0x23000
   11388:	ldr	pc, [ip, #3336]!	; 0xd08

0001138c <malloc@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #143360	; 0x23000
   11394:	ldr	pc, [ip, #3328]!	; 0xd00

00011398 <__libc_start_main@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #143360	; 0x23000
   113a0:	ldr	pc, [ip, #3320]!	; 0xcf8

000113a4 <__freading@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #143360	; 0x23000
   113ac:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b0 <__gmon_start__@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #143360	; 0x23000
   113b8:	ldr	pc, [ip, #3304]!	; 0xce8

000113bc <getopt_long@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #143360	; 0x23000
   113c4:	ldr	pc, [ip, #3296]!	; 0xce0

000113c8 <__ctype_b_loc@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #143360	; 0x23000
   113d0:	ldr	pc, [ip, #3288]!	; 0xcd8

000113d4 <exit@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #143360	; 0x23000
   113dc:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e0 <bcmp@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #143360	; 0x23000
   113e8:	ldr	pc, [ip, #3272]!	; 0xcc8

000113ec <strlen@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #143360	; 0x23000
   113f4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113f8 <strchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #143360	; 0x23000
   11400:	ldr	pc, [ip, #3256]!	; 0xcb8

00011404 <__errno_location@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #143360	; 0x23000
   1140c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011410 <iswalnum@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #143360	; 0x23000
   11418:	ldr	pc, [ip, #3240]!	; 0xca8

0001141c <__cxa_atexit@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #143360	; 0x23000
   11424:	ldr	pc, [ip, #3232]!	; 0xca0

00011428 <memset@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #143360	; 0x23000
   11430:	ldr	pc, [ip, #3224]!	; 0xc98

00011434 <btowc@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #143360	; 0x23000
   1143c:	ldr	pc, [ip, #3216]!	; 0xc90

00011440 <__printf_chk@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #143360	; 0x23000
   11448:	ldr	pc, [ip, #3208]!	; 0xc88

0001144c <fileno@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #143360	; 0x23000
   11454:	ldr	pc, [ip, #3200]!	; 0xc80

00011458 <__fprintf_chk@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #143360	; 0x23000
   11460:	ldr	pc, [ip, #3192]!	; 0xc78

00011464 <strtoimax@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #143360	; 0x23000
   1146c:	ldr	pc, [ip, #3184]!	; 0xc70

00011470 <fclose@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #143360	; 0x23000
   11478:	ldr	pc, [ip, #3176]!	; 0xc68

0001147c <fseeko64@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #143360	; 0x23000
   11484:	ldr	pc, [ip, #3168]!	; 0xc60

00011488 <setlocale@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #143360	; 0x23000
   11490:	ldr	pc, [ip, #3160]!	; 0xc58

00011494 <toupper@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #143360	; 0x23000
   1149c:	ldr	pc, [ip, #3152]!	; 0xc50

000114a0 <strrchr@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #143360	; 0x23000
   114a8:	ldr	pc, [ip, #3144]!	; 0xc48

000114ac <nl_langinfo@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #143360	; 0x23000
   114b4:	ldr	pc, [ip, #3136]!	; 0xc40

000114b8 <clearerr_unlocked@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #143360	; 0x23000
   114c0:	ldr	pc, [ip, #3128]!	; 0xc38

000114c4 <fopen64@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #143360	; 0x23000
   114cc:	ldr	pc, [ip, #3120]!	; 0xc30

000114d0 <bindtextdomain@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #143360	; 0x23000
   114d8:	ldr	pc, [ip, #3112]!	; 0xc28

000114dc <towupper@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #143360	; 0x23000
   114e4:	ldr	pc, [ip, #3104]!	; 0xc20

000114e8 <strncmp@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #143360	; 0x23000
   114f0:	ldr	pc, [ip, #3096]!	; 0xc18

000114f4 <abort@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #143360	; 0x23000
   114fc:	ldr	pc, [ip, #3088]!	; 0xc10

00011500 <feof_unlocked@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #143360	; 0x23000
   11508:	ldr	pc, [ip, #3080]!	; 0xc08

0001150c <putchar_unlocked@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #143360	; 0x23000
   11514:	ldr	pc, [ip, #3072]!	; 0xc00

00011518 <__assert_fail@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #143360	; 0x23000
   11520:	ldr	pc, [ip, #3064]!	; 0xbf8

Disassembly of section .text:

00011524 <.text>:
   11524:	mov	fp, #0
   11528:	mov	lr, #0
   1152c:	pop	{r1}		; (ldr r1, [sp], #4)
   11530:	mov	r2, sp
   11534:	push	{r2}		; (str r2, [sp, #-4]!)
   11538:	push	{r0}		; (str r0, [sp, #-4]!)
   1153c:	ldr	ip, [pc, #16]	; 11554 <__assert_fail@plt+0x3c>
   11540:	push	{ip}		; (str ip, [sp, #-4]!)
   11544:	ldr	r0, [pc, #12]	; 11558 <__assert_fail@plt+0x40>
   11548:	ldr	r3, [pc, #12]	; 1155c <__assert_fail@plt+0x44>
   1154c:	bl	11398 <__libc_start_main@plt>
   11550:	bl	114f4 <abort@plt>
   11554:	andeq	r3, r2, r4, lsr #32
   11558:	muleq	r1, r8, r9
   1155c:	andeq	r2, r2, r4, asr #31
   11560:	ldr	r3, [pc, #20]	; 1157c <__assert_fail@plt+0x64>
   11564:	ldr	r2, [pc, #20]	; 11580 <__assert_fail@plt+0x68>
   11568:	add	r3, pc, r3
   1156c:	ldr	r2, [r3, r2]
   11570:	cmp	r2, #0
   11574:	bxeq	lr
   11578:	b	113b0 <__gmon_start__@plt>
   1157c:	muleq	r2, r0, sl
   11580:	andeq	r0, r0, ip, lsl r1
   11584:	ldr	r0, [pc, #24]	; 115a4 <__assert_fail@plt+0x8c>
   11588:	ldr	r3, [pc, #24]	; 115a8 <__assert_fail@plt+0x90>
   1158c:	cmp	r3, r0
   11590:	bxeq	lr
   11594:	ldr	r3, [pc, #16]	; 115ac <__assert_fail@plt+0x94>
   11598:	cmp	r3, #0
   1159c:	bxeq	lr
   115a0:	bx	r3
   115a4:			; <UNDEFINED> instruction: 0x000351b0
   115a8:			; <UNDEFINED> instruction: 0x000351b0
   115ac:	andeq	r0, r0, r0
   115b0:	ldr	r0, [pc, #36]	; 115dc <__assert_fail@plt+0xc4>
   115b4:	ldr	r1, [pc, #36]	; 115e0 <__assert_fail@plt+0xc8>
   115b8:	sub	r1, r1, r0
   115bc:	asr	r1, r1, #2
   115c0:	add	r1, r1, r1, lsr #31
   115c4:	asrs	r1, r1, #1
   115c8:	bxeq	lr
   115cc:	ldr	r3, [pc, #16]	; 115e4 <__assert_fail@plt+0xcc>
   115d0:	cmp	r3, #0
   115d4:	bxeq	lr
   115d8:	bx	r3
   115dc:			; <UNDEFINED> instruction: 0x000351b0
   115e0:			; <UNDEFINED> instruction: 0x000351b0
   115e4:	andeq	r0, r0, r0
   115e8:	push	{r4, lr}
   115ec:	ldr	r4, [pc, #24]	; 1160c <__assert_fail@plt+0xf4>
   115f0:	ldrb	r3, [r4]
   115f4:	cmp	r3, #0
   115f8:	popne	{r4, pc}
   115fc:	bl	11584 <__assert_fail@plt+0x6c>
   11600:	mov	r3, #1
   11604:	strb	r3, [r4]
   11608:	pop	{r4, pc}
   1160c:	ldrdeq	r5, [r3], -r4
   11610:	b	115b0 <__assert_fail@plt+0x98>
   11614:	push	{fp, lr}
   11618:	mov	fp, sp
   1161c:	mov	r4, r0
   11620:	cmp	r0, #0
   11624:	bne	1176c <__assert_fail@plt+0x254>
   11628:	movw	r1, #12403	; 0x3073
   1162c:	movt	r1, #2
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	bl	11308 <dcgettext@plt>
   1163c:	mov	r1, r0
   11640:	movw	r0, #21904	; 0x5590
   11644:	movt	r0, #3
   11648:	ldr	r2, [r0]
   1164c:	mov	r0, #1
   11650:	bl	11440 <__printf_chk@plt>
   11654:	movw	r1, #12436	; 0x3094
   11658:	movt	r1, #2
   1165c:	mov	r0, #0
   11660:	mov	r2, #5
   11664:	bl	11308 <dcgettext@plt>
   11668:	movw	r5, #20940	; 0x51cc
   1166c:	movt	r5, #3
   11670:	ldr	r1, [r5]
   11674:	bl	1120c <fputs_unlocked@plt>
   11678:	bl	117b0 <__assert_fail@plt+0x298>
   1167c:	bl	117e0 <__assert_fail@plt+0x2c8>
   11680:	movw	r1, #12498	; 0x30d2
   11684:	movt	r1, #2
   11688:	mov	r0, #0
   1168c:	mov	r2, #5
   11690:	bl	11308 <dcgettext@plt>
   11694:	ldr	r1, [r5]
   11698:	bl	1120c <fputs_unlocked@plt>
   1169c:	movw	r1, #12708	; 0x31a4
   116a0:	movt	r1, #2
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	bl	11308 <dcgettext@plt>
   116b0:	ldr	r1, [r5]
   116b4:	bl	1120c <fputs_unlocked@plt>
   116b8:	movw	r1, #13151	; 0x335f
   116bc:	movt	r1, #2
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	bl	11308 <dcgettext@plt>
   116cc:	ldr	r1, [r5]
   116d0:	bl	1120c <fputs_unlocked@plt>
   116d4:	movw	r1, #13294	; 0x33ee
   116d8:	movt	r1, #2
   116dc:	mov	r0, #0
   116e0:	mov	r2, #5
   116e4:	bl	11308 <dcgettext@plt>
   116e8:	ldr	r1, [r5]
   116ec:	bl	1120c <fputs_unlocked@plt>
   116f0:	movw	r1, #13339	; 0x341b
   116f4:	movt	r1, #2
   116f8:	mov	r0, #0
   116fc:	mov	r2, #5
   11700:	bl	11308 <dcgettext@plt>
   11704:	ldr	r1, [r5]
   11708:	bl	1120c <fputs_unlocked@plt>
   1170c:	movw	r1, #13393	; 0x3451
   11710:	movt	r1, #2
   11714:	mov	r0, #0
   11718:	mov	r2, #5
   1171c:	bl	11308 <dcgettext@plt>
   11720:	ldr	r1, [r5]
   11724:	bl	1120c <fputs_unlocked@plt>
   11728:	movw	r1, #13716	; 0x3594
   1172c:	movt	r1, #2
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	bl	11308 <dcgettext@plt>
   1173c:	ldr	r1, [r5]
   11740:	bl	1120c <fputs_unlocked@plt>
   11744:	movw	r1, #13918	; 0x365e
   11748:	movt	r1, #2
   1174c:	mov	r0, #0
   11750:	mov	r2, #5
   11754:	bl	11308 <dcgettext@plt>
   11758:	ldr	r1, [r5]
   1175c:	bl	1120c <fputs_unlocked@plt>
   11760:	bl	11810 <__assert_fail@plt+0x2f8>
   11764:	mov	r0, r4
   11768:	bl	113d4 <exit@plt>
   1176c:	movw	r0, #20928	; 0x51c0
   11770:	movt	r0, #3
   11774:	ldr	r5, [r0]
   11778:	movw	r1, #12364	; 0x304c
   1177c:	movt	r1, #2
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	11308 <dcgettext@plt>
   1178c:	mov	r2, r0
   11790:	movw	r0, #21904	; 0x5590
   11794:	movt	r0, #3
   11798:	ldr	r3, [r0]
   1179c:	mov	r0, r5
   117a0:	mov	r1, #1
   117a4:	bl	11458 <__fprintf_chk@plt>
   117a8:	mov	r0, r4
   117ac:	bl	113d4 <exit@plt>
   117b0:	push	{fp, lr}
   117b4:	mov	fp, sp
   117b8:	movw	r1, #14430	; 0x385e
   117bc:	movt	r1, #2
   117c0:	mov	r0, #0
   117c4:	mov	r2, #5
   117c8:	bl	11308 <dcgettext@plt>
   117cc:	movw	r1, #20940	; 0x51cc
   117d0:	movt	r1, #3
   117d4:	ldr	r1, [r1]
   117d8:	pop	{fp, lr}
   117dc:	b	1120c <fputs_unlocked@plt>
   117e0:	push	{fp, lr}
   117e4:	mov	fp, sp
   117e8:	movw	r1, #14486	; 0x3896
   117ec:	movt	r1, #2
   117f0:	mov	r0, #0
   117f4:	mov	r2, #5
   117f8:	bl	11308 <dcgettext@plt>
   117fc:	movw	r1, #20940	; 0x51cc
   11800:	movt	r1, #3
   11804:	ldr	r1, [r1]
   11808:	pop	{fp, lr}
   1180c:	b	1120c <fputs_unlocked@plt>
   11810:	push	{r4, r5, r6, sl, fp, lr}
   11814:	add	fp, sp, #16
   11818:	sub	sp, sp, #56	; 0x38
   1181c:	movw	r0, #15376	; 0x3c10
   11820:	movt	r0, #2
   11824:	add	r1, r0, #32
   11828:	mov	r2, #48	; 0x30
   1182c:	vld1.64	{d16-d17}, [r1]
   11830:	mov	r6, sp
   11834:	add	r1, r6, #32
   11838:	add	r3, r0, #16
   1183c:	vld1.64	{d18-d19}, [r0], r2
   11840:	vld1.64	{d20-d21}, [r3]
   11844:	vldr	d22, [r0]
   11848:	vst1.64	{d16-d17}, [r1]
   1184c:	add	r0, r6, #16
   11850:	vst1.64	{d20-d21}, [r0]
   11854:	mov	r0, r6
   11858:	vst1.64	{d18-d19}, [r0], r2
   1185c:	vstr	d22, [r0]
   11860:	ldr	r1, [sp]
   11864:	cmp	r1, #0
   11868:	movw	r4, #14065	; 0x36f1
   1186c:	movt	r4, #2
   11870:	beq	11898 <__assert_fail@plt+0x380>
   11874:	mov	r6, sp
   11878:	movw	r5, #14065	; 0x36f1
   1187c:	movt	r5, #2
   11880:	mov	r0, r5
   11884:	bl	11248 <strcmp@plt>
   11888:	cmp	r0, #0
   1188c:	ldrne	r1, [r6, #8]!
   11890:	cmpne	r1, #0
   11894:	bne	11880 <__assert_fail@plt+0x368>
   11898:	ldr	r5, [r6, #4]
   1189c:	movw	r1, #14656	; 0x3940
   118a0:	movt	r1, #2
   118a4:	mov	r0, #0
   118a8:	mov	r2, #5
   118ac:	bl	11308 <dcgettext@plt>
   118b0:	mov	r1, r0
   118b4:	movw	r2, #14386	; 0x3832
   118b8:	movt	r2, #2
   118bc:	movw	r3, #14679	; 0x3957
   118c0:	movt	r3, #2
   118c4:	mov	r0, #1
   118c8:	bl	11440 <__printf_chk@plt>
   118cc:	cmp	r5, #0
   118d0:	moveq	r5, r4
   118d4:	mov	r0, #5
   118d8:	mov	r1, #0
   118dc:	bl	11488 <setlocale@plt>
   118e0:	cmp	r0, #0
   118e4:	beq	11924 <__assert_fail@plt+0x40c>
   118e8:	movw	r1, #14719	; 0x397f
   118ec:	movt	r1, #2
   118f0:	mov	r2, #3
   118f4:	bl	114e8 <strncmp@plt>
   118f8:	cmp	r0, #0
   118fc:	beq	11924 <__assert_fail@plt+0x40c>
   11900:	movw	r1, #14723	; 0x3983
   11904:	movt	r1, #2
   11908:	mov	r0, #0
   1190c:	mov	r2, #5
   11910:	bl	11308 <dcgettext@plt>
   11914:	movw	r1, #20940	; 0x51cc
   11918:	movt	r1, #3
   1191c:	ldr	r1, [r1]
   11920:	bl	1120c <fputs_unlocked@plt>
   11924:	movw	r1, #14794	; 0x39ca
   11928:	movt	r1, #2
   1192c:	mov	r0, #0
   11930:	mov	r2, #5
   11934:	bl	11308 <dcgettext@plt>
   11938:	mov	r1, r0
   1193c:	movw	r2, #14679	; 0x3957
   11940:	movt	r2, #2
   11944:	mov	r0, #1
   11948:	mov	r3, r4
   1194c:	bl	11440 <__printf_chk@plt>
   11950:	movw	r0, #14589	; 0x38fd
   11954:	movt	r0, #2
   11958:	movw	r6, #15062	; 0x3ad6
   1195c:	movt	r6, #2
   11960:	cmp	r5, r4
   11964:	moveq	r6, r0
   11968:	movw	r1, #14821	; 0x39e5
   1196c:	movt	r1, #2
   11970:	mov	r0, #0
   11974:	mov	r2, #5
   11978:	bl	11308 <dcgettext@plt>
   1197c:	mov	r1, r0
   11980:	mov	r0, #1
   11984:	mov	r2, r5
   11988:	mov	r3, r6
   1198c:	sub	sp, fp, #16
   11990:	pop	{r4, r5, r6, sl, fp, lr}
   11994:	b	11440 <__printf_chk@plt>
   11998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1199c:	add	fp, sp, #28
   119a0:	sub	sp, sp, #20
   119a4:	mov	r9, r1
   119a8:	mov	r5, r0
   119ac:	ldr	r0, [r1]
   119b0:	bl	12de0 <__assert_fail@plt+0x18c8>
   119b4:	movw	r1, #15062	; 0x3ad6
   119b8:	movt	r1, #2
   119bc:	mov	r0, #6
   119c0:	bl	11488 <setlocale@plt>
   119c4:	movw	r6, #14390	; 0x3836
   119c8:	movt	r6, #2
   119cc:	movw	r1, #14068	; 0x36f4
   119d0:	movt	r1, #2
   119d4:	mov	r0, r6
   119d8:	bl	114d0 <bindtextdomain@plt>
   119dc:	mov	r0, r6
   119e0:	bl	11320 <textdomain@plt>
   119e4:	movw	r0, #10756	; 0x2a04
   119e8:	movt	r0, #1
   119ec:	bl	23028 <__assert_fail@plt+0x11b10>
   119f0:	movw	r8, #20952	; 0x51d8
   119f4:	movt	r8, #3
   119f8:	mov	r0, #0
   119fc:	mov	r4, #0
   11a00:	strb	r0, [r8]
   11a04:	mov	r6, #1
   11a08:	b	11a70 <__assert_fail@plt+0x558>
   11a0c:	movw	r0, #20944	; 0x51d0
   11a10:	movt	r0, #3
   11a14:	ldr	r7, [r0]
   11a18:	mov	r0, #0
   11a1c:	movw	r1, #14246	; 0x37a6
   11a20:	movt	r1, #2
   11a24:	mov	r2, #5
   11a28:	bl	11308 <dcgettext@plt>
   11a2c:	mvn	r1, #0
   11a30:	str	r1, [sp]
   11a34:	mvn	r1, #-2147483648	; 0x80000000
   11a38:	str	r1, [sp, #4]
   11a3c:	movw	r1, #15062	; 0x3ad6
   11a40:	movt	r1, #2
   11a44:	str	r1, [sp, #8]
   11a48:	str	r0, [sp, #12]
   11a4c:	str	r4, [sp, #16]
   11a50:	mov	r0, r7
   11a54:	mov	r2, #0
   11a58:	mov	r3, #-2147483648	; 0x80000000
   11a5c:	bl	22074 <__assert_fail@plt+0x10b5c>
   11a60:	movw	r2, #20800	; 0x5140
   11a64:	movt	r2, #3
   11a68:	strd	r0, [r2]
   11a6c:	mov	r6, sl
   11a70:	mov	sl, r6
   11a74:	str	r4, [sp]
   11a78:	mov	r0, r5
   11a7c:	mov	r1, r9
   11a80:	movw	r2, #14092	; 0x370c
   11a84:	movt	r2, #2
   11a88:	movw	r3, #15120	; 0x3b10
   11a8c:	movt	r3, #2
   11a90:	bl	113bc <getopt_long@plt>
   11a94:	add	r0, r0, #3
   11a98:	cmp	r0, #122	; 0x7a
   11a9c:	mov	r6, #0
   11aa0:	bhi	11a70 <__assert_fail@plt+0x558>
   11aa4:	add	r1, pc, #4
   11aa8:	mov	r6, #0
   11aac:	ldr	pc, [r1, r0, lsl #2]
   11ab0:	andeq	r2, r1, r0, lsr #4
   11ab4:	andeq	r2, r1, r4, ror r2
   11ab8:	andeq	r2, r1, r8, asr #32
   11abc:	andeq	r1, r1, r0, ror sl
   11ac0:	andeq	r1, r1, r0, ror sl
   11ac4:	andeq	r1, r1, r0, ror sl
   11ac8:	andeq	r1, r1, r0, ror sl
   11acc:	andeq	r1, r1, r0, ror sl
   11ad0:	andeq	r1, r1, r0, ror sl
   11ad4:	andeq	r1, r1, r0, ror sl
   11ad8:	andeq	r1, r1, r0, ror sl
   11adc:	andeq	r1, r1, r0, ror sl
   11ae0:	andeq	r1, r1, r0, ror sl
   11ae4:	andeq	r1, r1, r0, ror sl
   11ae8:	andeq	r1, r1, r0, ror sl
   11aec:	andeq	r1, r1, r0, ror sl
   11af0:	andeq	r1, r1, r0, ror sl
   11af4:	andeq	r1, r1, r0, ror sl
   11af8:	andeq	r1, r1, r0, ror sl
   11afc:	andeq	r1, r1, r0, ror sl
   11b00:	andeq	r1, r1, r0, ror sl
   11b04:	andeq	r1, r1, r0, ror sl
   11b08:	andeq	r1, r1, r0, ror sl
   11b0c:	andeq	r1, r1, r0, ror sl
   11b10:	andeq	r1, r1, r0, ror sl
   11b14:	andeq	r1, r1, r0, ror sl
   11b18:	andeq	r1, r1, r0, ror sl
   11b1c:	andeq	r1, r1, r0, ror sl
   11b20:	andeq	r1, r1, r0, ror sl
   11b24:	andeq	r1, r1, r0, ror sl
   11b28:	andeq	r1, r1, r0, ror sl
   11b2c:	andeq	r1, r1, r0, ror sl
   11b30:	andeq	r1, r1, r0, ror sl
   11b34:	andeq	r1, r1, r0, ror sl
   11b38:	andeq	r1, r1, r0, ror sl
   11b3c:	andeq	r1, r1, r0, ror sl
   11b40:	andeq	r1, r1, r0, ror sl
   11b44:	andeq	r1, r1, r0, ror sl
   11b48:	andeq	r1, r1, r0, ror sl
   11b4c:	andeq	r1, r1, r0, ror sl
   11b50:	andeq	r1, r1, r0, ror sl
   11b54:	andeq	r1, r1, r0, ror sl
   11b58:	andeq	r1, r1, r0, ror sl
   11b5c:	andeq	r1, r1, r0, ror sl
   11b60:	andeq	r1, r1, r0, ror sl
   11b64:	andeq	r1, r1, r0, ror sl
   11b68:	andeq	r1, r1, r0, ror sl
   11b6c:	andeq	r1, r1, r0, ror sl
   11b70:	andeq	r1, r1, r0, ror sl
   11b74:	andeq	r1, r1, r0, ror sl
   11b78:	andeq	r1, r1, r0, ror sl
   11b7c:	andeq	r1, r1, r0, ror sl
   11b80:	andeq	r1, r1, r0, ror sl
   11b84:	andeq	r1, r1, r0, ror sl
   11b88:	andeq	r1, r1, r0, ror sl
   11b8c:	andeq	r1, r1, r0, ror sl
   11b90:	andeq	r1, r1, r0, ror sl
   11b94:	andeq	r1, r1, r0, ror sl
   11b98:	andeq	r1, r1, r0, ror sl
   11b9c:	andeq	r1, r1, r0, ror sl
   11ba0:	andeq	r1, r1, r0, ror sl
   11ba4:	andeq	r1, r1, r0, ror sl
   11ba8:	andeq	r1, r1, r0, ror sl
   11bac:	andeq	r1, r1, r0, ror sl
   11bb0:	andeq	r1, r1, r0, ror sl
   11bb4:	andeq	r1, r1, r0, ror sl
   11bb8:	andeq	r1, r1, r0, ror sl
   11bbc:	andeq	r1, r1, r0, ror sl
   11bc0:	andeq	r1, r1, r0, ror sl
   11bc4:	andeq	r1, r1, r0, ror sl
   11bc8:	andeq	r1, r1, r0, ror sl
   11bcc:	andeq	r1, r1, r0, ror sl
   11bd0:	andeq	r1, r1, r0, ror sl
   11bd4:	andeq	r1, r1, r0, ror sl
   11bd8:	andeq	r1, r1, r0, ror sl
   11bdc:	andeq	r1, r1, r0, ror sl
   11be0:	andeq	r1, r1, r0, ror sl
   11be4:	andeq	r1, r1, r0, ror sl
   11be8:	andeq	r1, r1, r0, ror sl
   11bec:	andeq	r1, r1, r0, ror sl
   11bf0:	andeq	r1, r1, r0, ror sl
   11bf4:	andeq	r1, r1, r0, ror sl
   11bf8:	andeq	r1, r1, r0, ror sl
   11bfc:	andeq	r1, r1, r0, ror sl
   11c00:	andeq	r1, r1, r0, ror sl
   11c04:	andeq	r1, r1, r0, ror sl
   11c08:	andeq	r1, r1, r0, ror sl
   11c0c:	andeq	r1, r1, r0, ror sl
   11c10:	andeq	r1, r1, r0, ror sl
   11c14:	andeq	r1, r1, r0, ror sl
   11c18:	andeq	r1, r1, r0, ror sl
   11c1c:	andeq	r1, r1, r0, ror sl
   11c20:	andeq	r1, r1, r0, ror sl
   11c24:	andeq	r1, r1, r0, ror sl
   11c28:	andeq	r1, r1, r0, ror sl
   11c2c:	andeq	r1, r1, r0, ror sl
   11c30:	andeq	r1, r1, r0, ror sl
   11c34:	andeq	r1, r1, r0, ror sl
   11c38:	andeq	r1, r1, r0, ror sl
   11c3c:	andeq	r1, r1, r0, ror sl
   11c40:	andeq	r1, r1, r0, ror sl
   11c44:	muleq	r1, ip, ip
   11c48:	andeq	r1, r1, r0, ror sl
   11c4c:	andeq	r1, r1, r4, lsr #29
   11c50:	andeq	r1, r1, r0, ror sl
   11c54:	andeq	r1, r1, r4, lsl pc
   11c58:	andeq	r1, r1, r0, ror sl
   11c5c:	strdeq	r1, [r1], -r0
   11c60:	andeq	r1, r1, ip, lsl #20
   11c64:	andeq	r1, r1, r0, ror sl
   11c68:	andeq	r1, r1, r0, ror sl
   11c6c:	muleq	r1, r0, sp
   11c70:	andeq	r1, r1, r0, ror sl
   11c74:	strdeq	r1, [r1], -r0
   11c78:	andeq	r1, r1, r0, ror sl
   11c7c:	andeq	r1, r1, ip, lsr #28
   11c80:	andeq	r1, r1, r0, ror sl
   11c84:	andeq	r1, r1, r0, ror sl
   11c88:	ldrdeq	r1, [r1], -r8
   11c8c:	andeq	r1, r1, r0, ror sl
   11c90:	andeq	r1, r1, r0, ror sl
   11c94:	andeq	r1, r1, r4, asr #28
   11c98:	andeq	r1, r1, r0, lsl #31
   11c9c:	movw	r0, #20780	; 0x512c
   11ca0:	movt	r0, #3
   11ca4:	movw	r1, #21244	; 0x52fc
   11ca8:	movt	r1, #3
   11cac:	movw	r2, #21276	; 0x531c
   11cb0:	movt	r2, #3
   11cb4:	bl	1229c <__assert_fail@plt+0xd84>
   11cb8:	cmp	r0, #0
   11cbc:	mov	r6, sl
   11cc0:	bne	11a70 <__assert_fail@plt+0x558>
   11cc4:	mov	r6, #0
   11cc8:	mov	r0, #0
   11ccc:	movw	r1, #14149	; 0x3745
   11cd0:	movt	r1, #2
   11cd4:	b	11f4c <__assert_fail@plt+0xa34>
   11cd8:	movw	r0, #20944	; 0x51d0
   11cdc:	movt	r0, #3
   11ce0:	ldr	r0, [r0]
   11ce4:	movw	r1, #20816	; 0x5150
   11ce8:	movt	r1, #3
   11cec:	b	11fe0 <__assert_fail@plt+0xac8>
   11cf0:	mov	r7, r8
   11cf4:	movw	r0, #20944	; 0x51d0
   11cf8:	movt	r0, #3
   11cfc:	ldr	r8, [r0]
   11d00:	mov	r0, r8
   11d04:	movw	r1, #14343	; 0x3807
   11d08:	movt	r1, #2
   11d0c:	bl	11248 <strcmp@plt>
   11d10:	cmp	r0, #0
   11d14:	beq	12000 <__assert_fail@plt+0xae8>
   11d18:	mov	r0, r8
   11d1c:	movw	r1, #14346	; 0x380a
   11d20:	movt	r1, #2
   11d24:	bl	11248 <strcmp@plt>
   11d28:	cmp	r0, #0
   11d2c:	beq	12014 <__assert_fail@plt+0xafc>
   11d30:	mov	r0, r8
   11d34:	movw	r1, #14349	; 0x380d
   11d38:	movt	r1, #2
   11d3c:	bl	11248 <strcmp@plt>
   11d40:	cmp	r0, #0
   11d44:	beq	12028 <__assert_fail@plt+0xb10>
   11d48:	mov	r6, #0
   11d4c:	mov	r0, #0
   11d50:	movw	r1, #14352	; 0x3810
   11d54:	movt	r1, #2
   11d58:	mov	r2, #5
   11d5c:	bl	11308 <dcgettext@plt>
   11d60:	mov	r8, r0
   11d64:	movw	r0, #20944	; 0x51d0
   11d68:	movt	r0, #3
   11d6c:	ldr	r0, [r0]
   11d70:	bl	145d4 <__assert_fail@plt+0x30bc>
   11d74:	mov	r3, r0
   11d78:	mov	r0, #0
   11d7c:	mov	r1, #0
   11d80:	mov	r2, r8
   11d84:	bl	11380 <error@plt>
   11d88:	mov	r8, r7
   11d8c:	b	11a70 <__assert_fail@plt+0x558>
   11d90:	movw	r0, #20944	; 0x51d0
   11d94:	movt	r0, #3
   11d98:	ldr	r7, [r0]
   11d9c:	mov	r0, #0
   11da0:	movw	r1, #14276	; 0x37c4
   11da4:	movt	r1, #2
   11da8:	mov	r2, #5
   11dac:	bl	11308 <dcgettext@plt>
   11db0:	mvn	r1, #0
   11db4:	str	r1, [sp]
   11db8:	mvn	r1, #-2147483648	; 0x80000000
   11dbc:	str	r1, [sp, #4]
   11dc0:	movw	r1, #15062	; 0x3ad6
   11dc4:	movt	r1, #2
   11dc8:	str	r1, [sp, #8]
   11dcc:	str	r0, [sp, #12]
   11dd0:	str	r4, [sp, #16]
   11dd4:	mov	r0, r7
   11dd8:	mov	r2, #1
   11ddc:	mov	r3, #0
   11de0:	bl	22074 <__assert_fail@plt+0x10b5c>
   11de4:	movw	r2, #20808	; 0x5148
   11de8:	movt	r2, #3
   11dec:	b	11a68 <__assert_fail@plt+0x550>
   11df0:	movw	r0, #20776	; 0x5128
   11df4:	movt	r0, #3
   11df8:	movw	r1, #20956	; 0x51dc
   11dfc:	movt	r1, #3
   11e00:	movw	r2, #20988	; 0x51fc
   11e04:	movt	r2, #3
   11e08:	bl	1229c <__assert_fail@plt+0xd84>
   11e0c:	cmp	r0, #0
   11e10:	mov	r6, sl
   11e14:	bne	11a70 <__assert_fail@plt+0x558>
   11e18:	mov	r6, #0
   11e1c:	mov	r0, #0
   11e20:	movw	r1, #14114	; 0x3722
   11e24:	movt	r1, #2
   11e28:	b	11f4c <__assert_fail@plt+0xa34>
   11e2c:	mov	r0, #1
   11e30:	movw	r1, #21820	; 0x553c
   11e34:	movt	r1, #3
   11e38:	strb	r0, [r1]
   11e3c:	mov	r6, sl
   11e40:	b	11a70 <__assert_fail@plt+0x558>
   11e44:	movw	r0, #20944	; 0x51d0
   11e48:	movt	r0, #3
   11e4c:	ldr	r7, [r0]
   11e50:	mov	r0, #0
   11e54:	movw	r1, #14217	; 0x3789
   11e58:	movt	r1, #2
   11e5c:	mov	r2, #5
   11e60:	bl	11308 <dcgettext@plt>
   11e64:	mvn	r1, #0
   11e68:	str	r1, [sp]
   11e6c:	mvn	r1, #-2147483648	; 0x80000000
   11e70:	str	r1, [sp, #4]
   11e74:	movw	r1, #15062	; 0x3ad6
   11e78:	movt	r1, #2
   11e7c:	str	r1, [sp, #8]
   11e80:	str	r0, [sp, #12]
   11e84:	str	r4, [sp, #16]
   11e88:	mov	r0, r7
   11e8c:	mov	r2, #0
   11e90:	mov	r3, #-2147483648	; 0x80000000
   11e94:	bl	22074 <__assert_fail@plt+0x10b5c>
   11e98:	movw	r2, #20792	; 0x5138
   11e9c:	movt	r2, #3
   11ea0:	b	11a68 <__assert_fail@plt+0x550>
   11ea4:	movw	r6, #20944	; 0x51d0
   11ea8:	movt	r6, #3
   11eac:	ldr	r7, [r6]
   11eb0:	mov	r0, r7
   11eb4:	bl	113ec <strlen@plt>
   11eb8:	sub	r0, r0, #1
   11ebc:	cmp	r0, #1
   11ec0:	bhi	11fec <__assert_fail@plt+0xad4>
   11ec4:	ldr	r0, [r6]
   11ec8:	ldrb	r1, [r0]
   11ecc:	cmp	r1, #0
   11ed0:	mov	r6, sl
   11ed4:	beq	11a70 <__assert_fail@plt+0x558>
   11ed8:	movw	r1, #20828	; 0x515c
   11edc:	movt	r1, #3
   11ee0:	ldr	r1, [r1]
   11ee4:	movw	r3, #20944	; 0x51d0
   11ee8:	movt	r3, #3
   11eec:	add	r2, r0, #1
   11ef0:	str	r2, [r3]
   11ef4:	ldrb	r0, [r0]
   11ef8:	strb	r0, [r1], #1
   11efc:	ldr	r0, [r3]
   11f00:	ldrb	r2, [r0]
   11f04:	cmp	r2, #0
   11f08:	bne	11eec <__assert_fail@plt+0x9d4>
   11f0c:	mov	r6, sl
   11f10:	b	11a70 <__assert_fail@plt+0x558>
   11f14:	movw	r0, #20784	; 0x5130
   11f18:	movt	r0, #3
   11f1c:	movw	r1, #21532	; 0x541c
   11f20:	movt	r1, #3
   11f24:	movw	r2, #21564	; 0x543c
   11f28:	movt	r2, #3
   11f2c:	bl	1229c <__assert_fail@plt+0xd84>
   11f30:	cmp	r0, #0
   11f34:	mov	r6, sl
   11f38:	bne	11a70 <__assert_fail@plt+0x558>
   11f3c:	mov	r6, #0
   11f40:	mov	r0, #0
   11f44:	movw	r1, #14182	; 0x3766
   11f48:	movt	r1, #2
   11f4c:	mov	r2, #5
   11f50:	bl	11308 <dcgettext@plt>
   11f54:	mov	r7, r0
   11f58:	movw	r0, #20944	; 0x51d0
   11f5c:	movt	r0, #3
   11f60:	ldr	r0, [r0]
   11f64:	bl	145d4 <__assert_fail@plt+0x30bc>
   11f68:	mov	r3, r0
   11f6c:	mov	r0, #0
   11f70:	mov	r1, #0
   11f74:	mov	r2, r7
   11f78:	bl	11380 <error@plt>
   11f7c:	b	11a70 <__assert_fail@plt+0x558>
   11f80:	movw	r0, #20944	; 0x51d0
   11f84:	movt	r0, #3
   11f88:	ldr	r7, [r0]
   11f8c:	mov	r0, #0
   11f90:	movw	r1, #14311	; 0x37e7
   11f94:	movt	r1, #2
   11f98:	mov	r2, #5
   11f9c:	bl	11308 <dcgettext@plt>
   11fa0:	mvn	r1, #-2147483648	; 0x80000000
   11fa4:	str	r1, [sp]
   11fa8:	mov	r2, #0
   11fac:	str	r2, [sp, #4]
   11fb0:	movw	r1, #15062	; 0x3ad6
   11fb4:	movt	r1, #2
   11fb8:	str	r1, [sp, #8]
   11fbc:	str	r0, [sp, #12]
   11fc0:	mov	r4, #0
   11fc4:	str	r2, [sp, #16]
   11fc8:	mov	r0, r7
   11fcc:	mov	r2, #1
   11fd0:	mov	r3, #0
   11fd4:	bl	22074 <__assert_fail@plt+0x10b5c>
   11fd8:	movw	r1, #20820	; 0x5154
   11fdc:	movt	r1, #3
   11fe0:	str	r0, [r1]
   11fe4:	mov	r6, sl
   11fe8:	b	11a70 <__assert_fail@plt+0x558>
   11fec:	movw	r0, #20828	; 0x515c
   11ff0:	movt	r0, #3
   11ff4:	str	r7, [r0]
   11ff8:	mov	r6, sl
   11ffc:	b	11a70 <__assert_fail@plt+0x558>
   12000:	movw	r0, #20824	; 0x5158
   12004:	movt	r0, #3
   12008:	movw	r1, #15344	; 0x3bf0
   1200c:	movt	r1, #2
   12010:	b	12038 <__assert_fail@plt+0xb20>
   12014:	movw	r0, #20824	; 0x5158
   12018:	movt	r0, #3
   1201c:	movw	r1, #15353	; 0x3bf9
   12020:	movt	r1, #2
   12024:	b	12038 <__assert_fail@plt+0xb20>
   12028:	movw	r0, #20824	; 0x5158
   1202c:	movt	r0, #3
   12030:	movw	r1, #15361	; 0x3c01
   12034:	movt	r1, #2
   12038:	str	r1, [r0]
   1203c:	mov	r6, sl
   12040:	mov	r8, r7
   12044:	b	11a70 <__assert_fail@plt+0x558>
   12048:	tst	sl, #1
   1204c:	beq	1227c <__assert_fail@plt+0xd64>
   12050:	movw	r0, #20828	; 0x515c
   12054:	movt	r0, #3
   12058:	mov	r4, r0
   1205c:	ldr	r0, [r0]
   12060:	bl	113ec <strlen@plt>
   12064:	mov	r6, r0
   12068:	add	r0, r0, r0, lsl #1
   1206c:	movw	r1, #21824	; 0x5540
   12070:	movt	r1, #3
   12074:	str	r0, [r1]
   12078:	add	r0, r0, #1
   1207c:	bl	21ba4 <__assert_fail@plt+0x1068c>
   12080:	movw	r7, #21828	; 0x5544
   12084:	movt	r7, #3
   12088:	str	r0, [r7]
   1208c:	ldr	r1, [r4]
   12090:	bl	112f0 <stpcpy@plt>
   12094:	ldr	r1, [r4]
   12098:	bl	112f0 <stpcpy@plt>
   1209c:	ldr	r1, [r4]
   120a0:	bl	112f0 <stpcpy@plt>
   120a4:	lsl	r0, r6, #1
   120a8:	movw	r1, #21832	; 0x5548
   120ac:	movt	r1, #3
   120b0:	str	r0, [r1]
   120b4:	movw	r0, #21840	; 0x5550
   120b8:	movt	r0, #3
   120bc:	str	r6, [r0]
   120c0:	ldr	r0, [r7]
   120c4:	add	r0, r0, r6
   120c8:	movw	r1, #21836	; 0x554c
   120cc:	movt	r1, #3
   120d0:	str	r0, [r1]
   120d4:	add	r0, r0, r6
   120d8:	movw	r1, #21844	; 0x5554
   120dc:	movt	r1, #3
   120e0:	str	r0, [r1]
   120e4:	movw	r0, #21848	; 0x5558
   120e8:	movt	r0, #3
   120ec:	bl	12cdc <__assert_fail@plt+0x17c4>
   120f0:	movw	r0, #20816	; 0x5150
   120f4:	movt	r0, #3
   120f8:	ldr	r0, [r0]
   120fc:	bl	113ec <strlen@plt>
   12100:	mov	r6, r0
   12104:	movw	r0, #20820	; 0x5154
   12108:	movt	r0, #3
   1210c:	mov	r4, r0
   12110:	ldr	r0, [r0]
   12114:	add	r0, r6, r0
   12118:	add	r0, r0, #1
   1211c:	bl	21ba4 <__assert_fail@plt+0x1068c>
   12120:	mov	r7, r0
   12124:	movw	r0, #21860	; 0x5564
   12128:	movt	r0, #3
   1212c:	str	r7, [r0]
   12130:	ldr	r0, [r4]
   12134:	add	r6, r0, r6
   12138:	mov	r0, r7
   1213c:	mov	r1, #32
   12140:	mov	r2, r6
   12144:	bl	11428 <memset@plt>
   12148:	mov	r0, #0
   1214c:	strb	r0, [r7, r6]
   12150:	movw	r0, #21876	; 0x5574
   12154:	movt	r0, #3
   12158:	movw	r1, #21244	; 0x52fc
   1215c:	movt	r1, #3
   12160:	str	r1, [r0]
   12164:	movw	r0, #20780	; 0x512c
   12168:	movt	r0, #3
   1216c:	ldr	r0, [r0]
   12170:	movw	r1, #21872	; 0x5570
   12174:	movt	r1, #3
   12178:	str	r0, [r1]
   1217c:	movw	r0, #20792	; 0x5138
   12180:	movt	r0, #3
   12184:	ldrd	r0, [r0]
   12188:	movw	r2, #21864	; 0x5568
   1218c:	movt	r2, #3
   12190:	strd	r0, [r2]
   12194:	movw	r7, #20920	; 0x51b8
   12198:	movt	r7, #3
   1219c:	ldr	r0, [r7]
   121a0:	cmp	r0, r5
   121a4:	bne	121bc <__assert_fail@plt+0xca4>
   121a8:	movw	r0, #15532	; 0x3cac
   121ac:	movt	r0, #2
   121b0:	bl	123a4 <__assert_fail@plt+0xe8c>
   121b4:	mov	r6, r0
   121b8:	b	121f0 <__assert_fail@plt+0xcd8>
   121bc:	ldr	r1, [r7]
   121c0:	mov	r6, #1
   121c4:	cmp	r1, r5
   121c8:	bge	121f0 <__assert_fail@plt+0xcd8>
   121cc:	mov	r6, #1
   121d0:	ldr	r0, [r9, r1, lsl #2]
   121d4:	bl	123a4 <__assert_fail@plt+0xe8c>
   121d8:	ldr	r1, [r7]
   121dc:	add	r1, r1, #1
   121e0:	str	r1, [r7]
   121e4:	and	r6, r6, r0
   121e8:	cmp	r1, r5
   121ec:	blt	121d0 <__assert_fail@plt+0xcb8>
   121f0:	ldrb	r0, [r8]
   121f4:	cmp	r0, #1
   121f8:	bne	12214 <__assert_fail@plt+0xcfc>
   121fc:	movw	r0, #20936	; 0x51c8
   12200:	movt	r0, #3
   12204:	ldr	r0, [r0]
   12208:	bl	12b2c <__assert_fail@plt+0x1614>
   1220c:	cmn	r0, #1
   12210:	beq	12284 <__assert_fail@plt+0xd6c>
   12214:	eor	r0, r6, #1
   12218:	sub	sp, fp, #28
   1221c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12220:	movw	r0, #20836	; 0x5164
   12224:	movt	r0, #3
   12228:	ldr	r3, [r0]
   1222c:	movw	r0, #20940	; 0x51cc
   12230:	movt	r0, #3
   12234:	ldr	r0, [r0]
   12238:	mov	r1, #0
   1223c:	movw	r2, #14414	; 0x384e
   12240:	movt	r2, #2
   12244:	movw	r7, #14400	; 0x3840
   12248:	movt	r7, #2
   1224c:	str	r7, [sp]
   12250:	str	r2, [sp, #4]
   12254:	str	r1, [sp, #8]
   12258:	movw	r1, #14065	; 0x36f1
   1225c:	movt	r1, #2
   12260:	movw	r2, #14386	; 0x3832
   12264:	movt	r2, #2
   12268:	bl	21a9c <__assert_fail@plt+0x10584>
   1226c:	mov	r0, #0
   12270:	bl	113d4 <exit@plt>
   12274:	mov	r0, #0
   12278:	bl	11614 <__assert_fail@plt+0xfc>
   1227c:	mov	r0, #1
   12280:	bl	11614 <__assert_fail@plt+0xfc>
   12284:	bl	11404 <__errno_location@plt>
   12288:	ldr	r1, [r0]
   1228c:	movw	r2, #15532	; 0x3cac
   12290:	movt	r2, #2
   12294:	mov	r0, #1
   12298:	bl	11380 <error@plt>
   1229c:	push	{r4, r5, r6, sl, fp, lr}
   122a0:	add	fp, sp, #16
   122a4:	mov	r6, r1
   122a8:	mov	r1, r0
   122ac:	movw	ip, #20944	; 0x51d0
   122b0:	movt	ip, #3
   122b4:	ldr	r5, [ip]
   122b8:	ldrb	r0, [r5]
   122bc:	sub	r3, r0, #97	; 0x61
   122c0:	mov	r0, #0
   122c4:	cmp	r3, #19
   122c8:	bhi	12330 <__assert_fail@plt+0xe18>
   122cc:	add	r4, pc, #0
   122d0:	ldr	pc, [r4, r3, lsl #2]
   122d4:	andeq	r2, r1, r4, lsr #6
   122d8:	andeq	r2, r1, r0, lsr r3
   122dc:	andeq	r2, r1, r0, lsr r3
   122e0:	andeq	r2, r1, r0, lsr r3
   122e4:	andeq	r2, r1, r0, lsr r3
   122e8:	andeq	r2, r1, r0, lsr r3
   122ec:	andeq	r2, r1, r0, lsr r3
   122f0:	andeq	r2, r1, r0, lsr r3
   122f4:	andeq	r2, r1, r0, lsr r3
   122f8:	andeq	r2, r1, r0, lsr r3
   122fc:	andeq	r2, r1, r0, lsr r3
   12300:	andeq	r2, r1, r0, lsr r3
   12304:	andeq	r2, r1, r0, lsr r3
   12308:	andeq	r2, r1, r4, lsr #6
   1230c:	andeq	r2, r1, r0, lsr r3
   12310:	andeq	r2, r1, r4, lsr r3
   12314:	andeq	r2, r1, r0, lsr r3
   12318:	andeq	r2, r1, r0, lsr r3
   1231c:	andeq	r2, r1, r0, lsr r3
   12320:	andeq	r2, r1, r4, lsr #6
   12324:	ldr	r0, [ip]
   12328:	str	r0, [r1]
   1232c:	mov	r0, #1
   12330:	pop	{r4, r5, r6, sl, fp, pc}
   12334:	add	r0, r5, #1
   12338:	str	r0, [ip]
   1233c:	str	r5, [r1]
   12340:	mov	r0, #0
   12344:	str	r2, [r6, #16]
   12348:	str	r0, [r6, #20]
   1234c:	str	r0, [r6]
   12350:	str	r0, [r6, #4]
   12354:	movw	r0, #22216	; 0x56c8
   12358:	movt	r0, #3
   1235c:	movw	r1, #710	; 0x2c6
   12360:	str	r1, [r0]
   12364:	ldr	r5, [ip]
   12368:	mov	r0, r5
   1236c:	bl	113ec <strlen@plt>
   12370:	mov	r1, r0
   12374:	mov	r0, r5
   12378:	mov	r2, r6
   1237c:	bl	149ec <__assert_fail@plt+0x34d4>
   12380:	mov	r3, r0
   12384:	mov	r0, #1
   12388:	cmp	r3, #0
   1238c:	popeq	{r4, r5, r6, sl, fp, pc}
   12390:	movw	r2, #14146	; 0x3742
   12394:	movt	r2, #2
   12398:	mov	r0, #1
   1239c:	mov	r1, #0
   123a0:	bl	11380 <error@plt>
   123a4:	push	{r4, r5, r6, r7, fp, lr}
   123a8:	add	fp, sp, #16
   123ac:	mov	r4, r0
   123b0:	movw	r1, #15532	; 0x3cac
   123b4:	movt	r1, #2
   123b8:	bl	11248 <strcmp@plt>
   123bc:	cmp	r0, #0
   123c0:	beq	123ec <__assert_fail@plt+0xed4>
   123c4:	movw	r1, #14244	; 0x37a4
   123c8:	movt	r1, #2
   123cc:	mov	r0, r4
   123d0:	bl	114c4 <fopen64@plt>
   123d4:	mov	r6, r0
   123d8:	cmp	r0, #0
   123dc:	bne	12408 <__assert_fail@plt+0xef0>
   123e0:	bl	11404 <__errno_location@plt>
   123e4:	ldr	r5, [r0]
   123e8:	b	12470 <__assert_fail@plt+0xf58>
   123ec:	movw	r0, #20952	; 0x51d8
   123f0:	movt	r0, #3
   123f4:	mov	r1, #1
   123f8:	strb	r1, [r0]
   123fc:	movw	r0, #20936	; 0x51c8
   12400:	movt	r0, #3
   12404:	ldr	r6, [r0]
   12408:	mov	r0, r6
   1240c:	mov	r1, #2
   12410:	bl	12af0 <__assert_fail@plt+0x15d8>
   12414:	mov	r0, r6
   12418:	bl	124c0 <__assert_fail@plt+0xfa8>
   1241c:	bl	11404 <__errno_location@plt>
   12420:	mov	r7, r0
   12424:	ldr	r5, [r0]
   12428:	mov	r0, r6
   1242c:	bl	11368 <ferror_unlocked@plt>
   12430:	cmp	r0, #0
   12434:	moveq	r5, r0
   12438:	movw	r1, #15532	; 0x3cac
   1243c:	movt	r1, #2
   12440:	mov	r0, r4
   12444:	bl	11248 <strcmp@plt>
   12448:	cmp	r0, #0
   1244c:	beq	124a4 <__assert_fail@plt+0xf8c>
   12450:	mov	r0, r6
   12454:	bl	12b2c <__assert_fail@plt+0x1614>
   12458:	cmp	r5, #0
   1245c:	bne	12468 <__assert_fail@plt+0xf50>
   12460:	cmp	r0, #0
   12464:	ldrne	r5, [r7]
   12468:	cmp	r5, #0
   1246c:	beq	124b4 <__assert_fail@plt+0xf9c>
   12470:	mov	r6, #0
   12474:	mov	r0, #0
   12478:	mov	r1, #3
   1247c:	mov	r2, r4
   12480:	bl	14494 <__assert_fail@plt+0x2f7c>
   12484:	mov	r3, r0
   12488:	movw	r2, #14146	; 0x3742
   1248c:	movt	r2, #2
   12490:	mov	r0, #0
   12494:	mov	r1, r5
   12498:	bl	11380 <error@plt>
   1249c:	mov	r0, r6
   124a0:	pop	{r4, r5, r6, r7, fp, pc}
   124a4:	mov	r0, r6
   124a8:	bl	114b8 <clearerr_unlocked@plt>
   124ac:	cmp	r5, #0
   124b0:	bne	12470 <__assert_fail@plt+0xf58>
   124b4:	mov	r6, #1
   124b8:	mov	r0, r6
   124bc:	pop	{r4, r5, r6, r7, fp, pc}
   124c0:	push	{r4, r5, fp, lr}
   124c4:	add	fp, sp, #8
   124c8:	mov	r4, r0
   124cc:	movw	r0, #21848	; 0x5558
   124d0:	movt	r0, #3
   124d4:	mov	r1, r4
   124d8:	bl	12cf0 <__assert_fail@plt+0x17d8>
   124dc:	cmp	r0, #0
   124e0:	popeq	{r4, r5, fp, pc}
   124e4:	movw	r5, #21848	; 0x5558
   124e8:	movt	r5, #3
   124ec:	b	12508 <__assert_fail@plt+0xff0>
   124f0:	bl	12720 <__assert_fail@plt+0x1208>
   124f4:	mov	r0, r5
   124f8:	mov	r1, r4
   124fc:	bl	12cf0 <__assert_fail@plt+0x17d8>
   12500:	cmp	r0, #0
   12504:	beq	12544 <__assert_fail@plt+0x102c>
   12508:	bl	12548 <__assert_fail@plt+0x1030>
   1250c:	cmp	r0, #3
   12510:	bhi	124f4 <__assert_fail@plt+0xfdc>
   12514:	add	r1, pc, #0
   12518:	ldr	pc, [r1, r0, lsl #2]
   1251c:	andeq	r2, r1, ip, lsr #10
   12520:	andeq	r2, r1, r4, lsr r5
   12524:	andeq	r2, r1, ip, lsr r5
   12528:	strdeq	r2, [r1], -r0
   1252c:	bl	12654 <__assert_fail@plt+0x113c>
   12530:	b	124f4 <__assert_fail@plt+0xfdc>
   12534:	bl	12698 <__assert_fail@plt+0x1180>
   12538:	b	124f4 <__assert_fail@plt+0xfdc>
   1253c:	bl	126dc <__assert_fail@plt+0x11c4>
   12540:	b	124f4 <__assert_fail@plt+0xfdc>
   12544:	pop	{r4, r5, fp, pc}
   12548:	push	{r4, r5, r6, r7, fp, lr}
   1254c:	add	fp, sp, #16
   12550:	movw	r0, #21848	; 0x5558
   12554:	movt	r0, #3
   12558:	ldr	r1, [r0, #4]
   1255c:	sub	r7, r1, #1
   12560:	mov	r4, #3
   12564:	cmp	r7, #2
   12568:	bcc	125a4 <__assert_fail@plt+0x108c>
   1256c:	movw	r1, #21840	; 0x5550
   12570:	movt	r1, #3
   12574:	ldr	r5, [r1]
   12578:	cmp	r5, #2
   1257c:	bcc	125a4 <__assert_fail@plt+0x108c>
   12580:	movw	r1, #20828	; 0x515c
   12584:	movt	r1, #3
   12588:	ldr	r1, [r1]
   1258c:	ldr	r6, [r0, #8]
   12590:	mov	r0, r6
   12594:	mov	r2, #2
   12598:	bl	113e0 <bcmp@plt>
   1259c:	cmp	r0, #0
   125a0:	beq	125ac <__assert_fail@plt+0x1094>
   125a4:	mov	r0, r4
   125a8:	pop	{r4, r5, r6, r7, fp, pc}
   125ac:	movw	r0, #21824	; 0x5540
   125b0:	movt	r0, #3
   125b4:	ldr	r2, [r0]
   125b8:	cmp	r7, r2
   125bc:	bne	125dc <__assert_fail@plt+0x10c4>
   125c0:	movw	r0, #21828	; 0x5544
   125c4:	movt	r0, #3
   125c8:	ldr	r1, [r0]
   125cc:	mov	r0, r6
   125d0:	bl	113e0 <bcmp@plt>
   125d4:	cmp	r0, #0
   125d8:	beq	1263c <__assert_fail@plt+0x1124>
   125dc:	movw	r0, #21832	; 0x5548
   125e0:	movt	r0, #3
   125e4:	ldr	r2, [r0]
   125e8:	cmp	r7, r2
   125ec:	bne	1260c <__assert_fail@plt+0x10f4>
   125f0:	movw	r0, #21836	; 0x554c
   125f4:	movt	r0, #3
   125f8:	ldr	r1, [r0]
   125fc:	mov	r0, r6
   12600:	bl	113e0 <bcmp@plt>
   12604:	cmp	r0, #0
   12608:	beq	12648 <__assert_fail@plt+0x1130>
   1260c:	cmp	r7, r5
   12610:	bne	125a4 <__assert_fail@plt+0x108c>
   12614:	movw	r0, #21844	; 0x5554
   12618:	movt	r0, #3
   1261c:	ldr	r1, [r0]
   12620:	mov	r0, r6
   12624:	mov	r2, r5
   12628:	bl	113e0 <bcmp@plt>
   1262c:	cmp	r0, #0
   12630:	moveq	r4, #2
   12634:	mov	r0, r4
   12638:	pop	{r4, r5, r6, r7, fp, pc}
   1263c:	mov	r4, #0
   12640:	mov	r0, r4
   12644:	pop	{r4, r5, r6, r7, fp, pc}
   12648:	mov	r4, #1
   1264c:	mov	r0, r4
   12650:	pop	{r4, r5, r6, r7, fp, pc}
   12654:	push	{fp, lr}
   12658:	mov	fp, sp
   1265c:	movw	r0, #21876	; 0x5574
   12660:	movt	r0, #3
   12664:	movw	r1, #20956	; 0x51dc
   12668:	movt	r1, #3
   1266c:	str	r1, [r0]
   12670:	movw	r0, #20776	; 0x5128
   12674:	movt	r0, #3
   12678:	ldr	r0, [r0]
   1267c:	movw	r1, #21872	; 0x5570
   12680:	movt	r1, #3
   12684:	str	r0, [r1]
   12688:	bl	128b8 <__assert_fail@plt+0x13a0>
   1268c:	mov	r0, #10
   12690:	pop	{fp, lr}
   12694:	b	1150c <putchar_unlocked@plt>
   12698:	push	{fp, lr}
   1269c:	mov	fp, sp
   126a0:	movw	r0, #21876	; 0x5574
   126a4:	movt	r0, #3
   126a8:	movw	r1, #21244	; 0x52fc
   126ac:	movt	r1, #3
   126b0:	str	r1, [r0]
   126b4:	movw	r0, #20780	; 0x512c
   126b8:	movt	r0, #3
   126bc:	ldr	r0, [r0]
   126c0:	movw	r1, #21872	; 0x5570
   126c4:	movt	r1, #3
   126c8:	str	r0, [r1]
   126cc:	bl	128b8 <__assert_fail@plt+0x13a0>
   126d0:	mov	r0, #10
   126d4:	pop	{fp, lr}
   126d8:	b	1150c <putchar_unlocked@plt>
   126dc:	push	{fp, lr}
   126e0:	mov	fp, sp
   126e4:	movw	r0, #21876	; 0x5574
   126e8:	movt	r0, #3
   126ec:	movw	r1, #21532	; 0x541c
   126f0:	movt	r1, #3
   126f4:	str	r1, [r0]
   126f8:	movw	r0, #20784	; 0x5130
   126fc:	movt	r0, #3
   12700:	ldr	r0, [r0]
   12704:	movw	r1, #21872	; 0x5570
   12708:	movt	r1, #3
   1270c:	str	r0, [r1]
   12710:	bl	128b8 <__assert_fail@plt+0x13a0>
   12714:	mov	r0, #10
   12718:	pop	{fp, lr}
   1271c:	b	1150c <putchar_unlocked@plt>
   12720:	push	{r4, r5, r6, sl, fp, lr}
   12724:	add	fp, sp, #16
   12728:	sub	sp, sp, #8
   1272c:	movw	r0, #21872	; 0x5570
   12730:	movt	r0, #3
   12734:	ldr	r0, [r0]
   12738:	ldrb	r0, [r0]
   1273c:	sub	r0, r0, #97	; 0x61
   12740:	cmp	r0, #19
   12744:	movw	r5, #20940	; 0x51cc
   12748:	movt	r5, #3
   1274c:	movw	r4, #21848	; 0x5558
   12750:	movt	r4, #3
   12754:	bhi	1289c <__assert_fail@plt+0x1384>
   12758:	add	r1, pc, #0
   1275c:	ldr	pc, [r1, r0, lsl #2]
   12760:			; <UNDEFINED> instruction: 0x000127b0
   12764:	muleq	r1, ip, r8
   12768:	muleq	r1, ip, r8
   1276c:	muleq	r1, ip, r8
   12770:	muleq	r1, ip, r8
   12774:	muleq	r1, ip, r8
   12778:	muleq	r1, ip, r8
   1277c:	muleq	r1, ip, r8
   12780:	muleq	r1, ip, r8
   12784:	muleq	r1, ip, r8
   12788:	muleq	r1, ip, r8
   1278c:	muleq	r1, ip, r8
   12790:	muleq	r1, ip, r8
   12794:	andeq	r2, r1, r8, lsl #17
   12798:	muleq	r1, ip, r8
   1279c:	andeq	r2, r1, r0, lsl r8
   127a0:	muleq	r1, ip, r8
   127a4:	muleq	r1, ip, r8
   127a8:	muleq	r1, ip, r8
   127ac:	andeq	r2, r1, r4, ror r8
   127b0:	movw	r0, #20808	; 0x5148
   127b4:	movt	r0, #3
   127b8:	ldrd	r0, [r0]
   127bc:	subs	r2, r0, #2
   127c0:	sbcs	r2, r1, #0
   127c4:	blt	12880 <__assert_fail@plt+0x1368>
   127c8:	ldr	r2, [r4, #4]
   127cc:	cmp	r2, #1
   127d0:	movw	r6, #21888	; 0x5580
   127d4:	movt	r6, #3
   127d8:	bgt	127fc <__assert_fail@plt+0x12e4>
   127dc:	ldrd	r2, [r6]
   127e0:	adds	r2, r2, #1
   127e4:	adc	r3, r3, #0
   127e8:	strd	r2, [r6]
   127ec:	eor	r0, r2, r0
   127f0:	eor	r1, r3, r1
   127f4:	orrs	r0, r0, r1
   127f8:	bne	12888 <__assert_fail@plt+0x1370>
   127fc:	bl	128f8 <__assert_fail@plt+0x13e0>
   12800:	mov	r0, #0
   12804:	str	r0, [r6]
   12808:	str	r0, [r6, #4]
   1280c:	b	1289c <__assert_fail@plt+0x1384>
   12810:	movw	r0, #21876	; 0x5574
   12814:	movt	r0, #3
   12818:	ldr	r0, [r0]
   1281c:	ldr	r2, [r4, #4]
   12820:	ldr	r1, [r4, #8]
   12824:	mov	r3, #0
   12828:	sub	r2, r2, #1
   1282c:	stm	sp, {r2, r3}
   12830:	mov	r3, #0
   12834:	bl	15ea4 <__assert_fail@plt+0x498c>
   12838:	cmn	r0, #1
   1283c:	beq	12888 <__assert_fail@plt+0x1370>
   12840:	cmn	r0, #2
   12844:	bne	12880 <__assert_fail@plt+0x1368>
   12848:	bl	11404 <__errno_location@plt>
   1284c:	ldr	r4, [r0]
   12850:	movw	r1, #15063	; 0x3ad7
   12854:	movt	r1, #2
   12858:	mov	r0, #0
   1285c:	mov	r2, #5
   12860:	bl	11308 <dcgettext@plt>
   12864:	mov	r2, r0
   12868:	mov	r0, #1
   1286c:	mov	r1, r4
   12870:	bl	11380 <error@plt>
   12874:	ldr	r0, [r4, #4]
   12878:	cmp	r0, #2
   1287c:	blt	12888 <__assert_fail@plt+0x1370>
   12880:	bl	128f8 <__assert_fail@plt+0x13e0>
   12884:	b	1289c <__assert_fail@plt+0x1384>
   12888:	ldr	r1, [r5]
   1288c:	movw	r0, #21860	; 0x5564
   12890:	movt	r0, #3
   12894:	ldr	r0, [r0]
   12898:	bl	1120c <fputs_unlocked@plt>
   1289c:	ldr	r3, [r5]
   128a0:	ldr	r2, [r4, #4]
   128a4:	ldr	r0, [r4, #8]
   128a8:	mov	r1, #1
   128ac:	sub	sp, fp, #16
   128b0:	pop	{r4, r5, r6, sl, fp, lr}
   128b4:	b	112e4 <fwrite_unlocked@plt>
   128b8:	movw	r0, #21820	; 0x553c
   128bc:	movt	r0, #3
   128c0:	ldrb	r0, [r0]
   128c4:	cmp	r0, #0
   128c8:	bxne	lr
   128cc:	movw	r0, #21880	; 0x5578
   128d0:	movt	r0, #3
   128d4:	mov	r1, #0
   128d8:	strb	r1, [r0]
   128dc:	movw	r0, #20792	; 0x5138
   128e0:	movt	r0, #3
   128e4:	ldrd	r0, [r0]
   128e8:	movw	r2, #21864	; 0x5568
   128ec:	movt	r2, #3
   128f0:	strd	r0, [r2]
   128f4:	bx	lr
   128f8:	push	{r4, r5, r6, r7, fp, lr}
   128fc:	add	fp, sp, #16
   12900:	sub	sp, sp, #16
   12904:	movw	r4, #21880	; 0x5578
   12908:	movt	r4, #3
   1290c:	ldrb	r0, [r4]
   12910:	cmp	r0, #1
   12914:	beq	129c0 <__assert_fail@plt+0x14a8>
   12918:	movw	r0, #20820	; 0x5154
   1291c:	movt	r0, #3
   12920:	ldr	r2, [r0]
   12924:	movw	r0, #20824	; 0x5158
   12928:	movt	r0, #3
   1292c:	ldr	r1, [r0]
   12930:	movw	r6, #21864	; 0x5568
   12934:	movt	r6, #3
   12938:	ldm	r6, {r0, r3}
   1293c:	movw	r5, #20816	; 0x5150
   12940:	movt	r5, #3
   12944:	ldr	r5, [r5]
   12948:	stm	sp, {r0, r3, r5}
   1294c:	mov	r5, #1
   12950:	mov	r0, #1
   12954:	bl	11440 <__printf_chk@plt>
   12958:	movw	r0, #20800	; 0x5140
   1295c:	movt	r0, #3
   12960:	ldrd	r0, [r0]
   12964:	ldrd	r2, [r6]
   12968:	adds	r0, r2, r0
   1296c:	adc	r7, r3, r1
   12970:	stm	r6, {r0, r7}
   12974:	mov	r0, #0
   12978:	cmn	r3, #1
   1297c:	mov	r2, #0
   12980:	movwgt	r2, #1
   12984:	cmn	r7, #1
   12988:	mov	r3, #0
   1298c:	movwgt	r3, #1
   12990:	subs	r3, r2, r3
   12994:	movwne	r3, #1
   12998:	cmn	r1, #1
   1299c:	movwgt	r0, #1
   129a0:	sub	r0, r2, r0
   129a4:	clz	r0, r0
   129a8:	lsr	r0, r0, #5
   129ac:	and	r0, r0, r3
   129b0:	cmp	r0, #1
   129b4:	strbeq	r5, [r4]
   129b8:	sub	sp, fp, #16
   129bc:	pop	{r4, r5, r6, r7, fp, pc}
   129c0:	movw	r1, #15098	; 0x3afa
   129c4:	movt	r1, #2
   129c8:	mov	r0, #0
   129cc:	mov	r2, #5
   129d0:	bl	11308 <dcgettext@plt>
   129d4:	mov	r2, r0
   129d8:	mov	r0, #1
   129dc:	mov	r1, #0
   129e0:	bl	11380 <error@plt>
   129e4:	movw	r1, #21896	; 0x5588
   129e8:	movt	r1, #3
   129ec:	str	r0, [r1]
   129f0:	bx	lr
   129f4:	movw	r1, #21900	; 0x558c
   129f8:	movt	r1, #3
   129fc:	strb	r0, [r1]
   12a00:	bx	lr
   12a04:	push	{r4, r5, r6, sl, fp, lr}
   12a08:	add	fp, sp, #16
   12a0c:	sub	sp, sp, #8
   12a10:	movw	r0, #20940	; 0x51cc
   12a14:	movt	r0, #3
   12a18:	ldr	r0, [r0]
   12a1c:	bl	22a10 <__assert_fail@plt+0x114f8>
   12a20:	cmp	r0, #0
   12a24:	beq	12a4c <__assert_fail@plt+0x1534>
   12a28:	movw	r0, #21900	; 0x558c
   12a2c:	movt	r0, #3
   12a30:	ldrb	r0, [r0]
   12a34:	cmp	r0, #0
   12a38:	beq	12a6c <__assert_fail@plt+0x1554>
   12a3c:	bl	11404 <__errno_location@plt>
   12a40:	ldr	r0, [r0]
   12a44:	cmp	r0, #32
   12a48:	bne	12a6c <__assert_fail@plt+0x1554>
   12a4c:	movw	r0, #20928	; 0x51c0
   12a50:	movt	r0, #3
   12a54:	ldr	r0, [r0]
   12a58:	bl	22a10 <__assert_fail@plt+0x114f8>
   12a5c:	cmp	r0, #0
   12a60:	subeq	sp, fp, #16
   12a64:	popeq	{r4, r5, r6, sl, fp, pc}
   12a68:	b	12adc <__assert_fail@plt+0x15c4>
   12a6c:	movw	r1, #15447	; 0x3c57
   12a70:	movt	r1, #2
   12a74:	mov	r0, #0
   12a78:	mov	r2, #5
   12a7c:	bl	11308 <dcgettext@plt>
   12a80:	mov	r4, r0
   12a84:	movw	r0, #21896	; 0x5588
   12a88:	movt	r0, #3
   12a8c:	ldr	r6, [r0]
   12a90:	bl	11404 <__errno_location@plt>
   12a94:	ldr	r5, [r0]
   12a98:	cmp	r6, #0
   12a9c:	bne	12ab8 <__assert_fail@plt+0x15a0>
   12aa0:	movw	r2, #14146	; 0x3742
   12aa4:	movt	r2, #2
   12aa8:	mov	r0, #0
   12aac:	mov	r1, r5
   12ab0:	mov	r3, r4
   12ab4:	b	12ad8 <__assert_fail@plt+0x15c0>
   12ab8:	mov	r0, r6
   12abc:	bl	14484 <__assert_fail@plt+0x2f6c>
   12ac0:	mov	r3, r0
   12ac4:	str	r4, [sp]
   12ac8:	movw	r2, #15459	; 0x3c63
   12acc:	movt	r2, #2
   12ad0:	mov	r0, #0
   12ad4:	mov	r1, r5
   12ad8:	bl	11380 <error@plt>
   12adc:	movw	r0, #20840	; 0x5168
   12ae0:	movt	r0, #3
   12ae4:	ldr	r0, [r0]
   12ae8:	bl	1129c <_exit@plt>
   12aec:	b	11254 <posix_fadvise64@plt>
   12af0:	cmp	r0, #0
   12af4:	bxeq	lr
   12af8:	push	{r4, sl, fp, lr}
   12afc:	add	fp, sp, #8
   12b00:	sub	sp, sp, #16
   12b04:	mov	r4, r1
   12b08:	bl	1144c <fileno@plt>
   12b0c:	mov	r1, #0
   12b10:	str	r1, [sp]
   12b14:	stmib	sp, {r1, r4}
   12b18:	mov	r2, #0
   12b1c:	mov	r3, #0
   12b20:	bl	12aec <__assert_fail@plt+0x15d4>
   12b24:	sub	sp, fp, #8
   12b28:	pop	{r4, sl, fp, pc}
   12b2c:	push	{r4, r5, fp, lr}
   12b30:	add	fp, sp, #8
   12b34:	sub	sp, sp, #8
   12b38:	mov	r4, r0
   12b3c:	bl	1144c <fileno@plt>
   12b40:	cmn	r0, #1
   12b44:	ble	12bbc <__assert_fail@plt+0x16a4>
   12b48:	mov	r0, r4
   12b4c:	bl	113a4 <__freading@plt>
   12b50:	cmp	r0, #0
   12b54:	beq	12b80 <__assert_fail@plt+0x1668>
   12b58:	mov	r0, r4
   12b5c:	bl	1144c <fileno@plt>
   12b60:	mov	r1, #1
   12b64:	str	r1, [sp]
   12b68:	mov	r2, #0
   12b6c:	mov	r3, #0
   12b70:	bl	11344 <lseek64@plt>
   12b74:	and	r0, r0, r1
   12b78:	cmn	r0, #1
   12b7c:	beq	12bbc <__assert_fail@plt+0x16a4>
   12b80:	mov	r0, r4
   12b84:	bl	12bcc <__assert_fail@plt+0x16b4>
   12b88:	cmp	r0, #0
   12b8c:	beq	12bbc <__assert_fail@plt+0x16a4>
   12b90:	bl	11404 <__errno_location@plt>
   12b94:	ldr	r5, [r0]
   12b98:	mov	r0, r4
   12b9c:	bl	11470 <fclose@plt>
   12ba0:	cmp	r5, #0
   12ba4:	beq	12bb4 <__assert_fail@plt+0x169c>
   12ba8:	bl	11404 <__errno_location@plt>
   12bac:	str	r5, [r0]
   12bb0:	mvn	r0, #0
   12bb4:	sub	sp, fp, #8
   12bb8:	pop	{r4, r5, fp, pc}
   12bbc:	mov	r0, r4
   12bc0:	sub	sp, fp, #8
   12bc4:	pop	{r4, r5, fp, lr}
   12bc8:	b	11470 <fclose@plt>
   12bcc:	push	{r4, sl, fp, lr}
   12bd0:	add	fp, sp, #8
   12bd4:	mov	r4, r0
   12bd8:	cmp	r0, #0
   12bdc:	beq	12bf4 <__assert_fail@plt+0x16dc>
   12be0:	mov	r0, r4
   12be4:	bl	113a4 <__freading@plt>
   12be8:	cmp	r0, #0
   12bec:	movne	r0, r4
   12bf0:	blne	12c00 <__assert_fail@plt+0x16e8>
   12bf4:	mov	r0, r4
   12bf8:	pop	{r4, sl, fp, lr}
   12bfc:	b	1126c <fflush@plt>
   12c00:	push	{fp, lr}
   12c04:	mov	fp, sp
   12c08:	sub	sp, sp, #8
   12c0c:	ldrb	r1, [r0, #1]
   12c10:	tst	r1, #1
   12c14:	beq	12c2c <__assert_fail@plt+0x1714>
   12c18:	mov	r1, #1
   12c1c:	str	r1, [sp]
   12c20:	mov	r2, #0
   12c24:	mov	r3, #0
   12c28:	bl	12c34 <__assert_fail@plt+0x171c>
   12c2c:	mov	sp, fp
   12c30:	pop	{fp, pc}
   12c34:	push	{r4, r5, r6, r7, fp, lr}
   12c38:	add	fp, sp, #16
   12c3c:	sub	sp, sp, #8
   12c40:	mov	r5, r3
   12c44:	mov	r6, r2
   12c48:	mov	r4, r0
   12c4c:	ldr	r0, [r0, #4]
   12c50:	ldr	r1, [r4, #8]
   12c54:	cmp	r1, r0
   12c58:	bne	12c74 <__assert_fail@plt+0x175c>
   12c5c:	ldrd	r0, [r4, #16]
   12c60:	cmp	r1, r0
   12c64:	bne	12c74 <__assert_fail@plt+0x175c>
   12c68:	ldr	r0, [r4, #36]	; 0x24
   12c6c:	cmp	r0, #0
   12c70:	beq	12c8c <__assert_fail@plt+0x1774>
   12c74:	mov	r0, r4
   12c78:	mov	r2, r6
   12c7c:	mov	r3, r5
   12c80:	sub	sp, fp, #16
   12c84:	pop	{r4, r5, r6, r7, fp, lr}
   12c88:	b	1147c <fseeko64@plt>
   12c8c:	ldr	r7, [fp, #8]
   12c90:	mov	r0, r4
   12c94:	bl	1144c <fileno@plt>
   12c98:	str	r7, [sp]
   12c9c:	mov	r2, r6
   12ca0:	mov	r3, r5
   12ca4:	bl	11344 <lseek64@plt>
   12ca8:	and	r2, r0, r1
   12cac:	cmn	r2, #1
   12cb0:	beq	12cd0 <__assert_fail@plt+0x17b8>
   12cb4:	strd	r0, [r4, #80]	; 0x50
   12cb8:	ldr	r0, [r4]
   12cbc:	bic	r0, r0, #16
   12cc0:	str	r0, [r4]
   12cc4:	mov	r0, #0
   12cc8:	sub	sp, fp, #16
   12ccc:	pop	{r4, r5, r6, r7, fp, pc}
   12cd0:	mvn	r0, #0
   12cd4:	sub	sp, fp, #16
   12cd8:	pop	{r4, r5, r6, r7, fp, pc}
   12cdc:	mov	r1, #0
   12ce0:	str	r1, [r0]
   12ce4:	str	r1, [r0, #4]
   12ce8:	str	r1, [r0, #8]
   12cec:	bx	lr
   12cf0:	mov	r2, #10
   12cf4:	b	12cf8 <__assert_fail@plt+0x17e0>
   12cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cfc:	add	fp, sp, #28
   12d00:	sub	sp, sp, #4
   12d04:	mov	sl, r2
   12d08:	mov	r8, r1
   12d0c:	mov	r4, r0
   12d10:	ldr	r5, [r0]
   12d14:	ldr	r6, [r0, #8]
   12d18:	mov	r0, r1
   12d1c:	bl	11500 <feof_unlocked@plt>
   12d20:	cmp	r0, #0
   12d24:	beq	12d30 <__assert_fail@plt+0x1818>
   12d28:	mov	r4, #0
   12d2c:	b	12dcc <__assert_fail@plt+0x18b4>
   12d30:	add	r9, r6, r5
   12d34:	mov	r7, r6
   12d38:	b	12d48 <__assert_fail@plt+0x1830>
   12d3c:	strb	r5, [r7], #1
   12d40:	cmp	r5, sl
   12d44:	beq	12dc4 <__assert_fail@plt+0x18ac>
   12d48:	mov	r0, r8
   12d4c:	bl	112fc <getc_unlocked@plt>
   12d50:	mov	r5, r0
   12d54:	cmn	r0, #1
   12d58:	bne	12d84 <__assert_fail@plt+0x186c>
   12d5c:	cmp	r7, r6
   12d60:	beq	12d28 <__assert_fail@plt+0x1810>
   12d64:	mov	r0, r8
   12d68:	bl	11368 <ferror_unlocked@plt>
   12d6c:	cmp	r0, #0
   12d70:	bne	12d28 <__assert_fail@plt+0x1810>
   12d74:	ldrb	r0, [r7, #-1]
   12d78:	cmp	r0, sl
   12d7c:	mov	r5, sl
   12d80:	beq	12dc4 <__assert_fail@plt+0x18ac>
   12d84:	cmp	r7, r9
   12d88:	bne	12d3c <__assert_fail@plt+0x1824>
   12d8c:	ldr	r7, [r4]
   12d90:	mov	r0, #1
   12d94:	str	r0, [sp]
   12d98:	mov	r0, r6
   12d9c:	mov	r1, r4
   12da0:	mov	r2, #1
   12da4:	mvn	r3, #0
   12da8:	bl	21cbc <__assert_fail@plt+0x107a4>
   12dac:	mov	r6, r0
   12db0:	str	r0, [r4, #8]
   12db4:	add	r7, r0, r7
   12db8:	ldr	r0, [r4]
   12dbc:	add	r9, r6, r0
   12dc0:	b	12d3c <__assert_fail@plt+0x1824>
   12dc4:	sub	r0, r7, r6
   12dc8:	str	r0, [r4, #4]
   12dcc:	mov	r0, r4
   12dd0:	sub	sp, fp, #28
   12dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dd8:	ldr	r0, [r0, #8]
   12ddc:	b	22b58 <__assert_fail@plt+0x11640>
   12de0:	push	{r4, r5, fp, lr}
   12de4:	add	fp, sp, #8
   12de8:	cmp	r0, #0
   12dec:	beq	12e80 <__assert_fail@plt+0x1968>
   12df0:	mov	r4, r0
   12df4:	mov	r1, #47	; 0x2f
   12df8:	bl	114a0 <strrchr@plt>
   12dfc:	cmp	r0, #0
   12e00:	mov	r5, r4
   12e04:	addne	r5, r0, #1
   12e08:	sub	r0, r5, r4
   12e0c:	cmp	r0, #7
   12e10:	blt	12e64 <__assert_fail@plt+0x194c>
   12e14:	sub	r0, r5, #7
   12e18:	movw	r1, #15522	; 0x3ca2
   12e1c:	movt	r1, #2
   12e20:	mov	r2, #7
   12e24:	bl	114e8 <strncmp@plt>
   12e28:	cmp	r0, #0
   12e2c:	bne	12e64 <__assert_fail@plt+0x194c>
   12e30:	movw	r1, #15530	; 0x3caa
   12e34:	movt	r1, #2
   12e38:	mov	r0, r5
   12e3c:	mov	r2, #3
   12e40:	bl	114e8 <strncmp@plt>
   12e44:	cmp	r0, #0
   12e48:	beq	12e54 <__assert_fail@plt+0x193c>
   12e4c:	mov	r4, r5
   12e50:	b	12e64 <__assert_fail@plt+0x194c>
   12e54:	add	r4, r5, #3
   12e58:	movw	r0, #20912	; 0x51b0
   12e5c:	movt	r0, #3
   12e60:	str	r4, [r0]
   12e64:	movw	r0, #20916	; 0x51b4
   12e68:	movt	r0, #3
   12e6c:	str	r4, [r0]
   12e70:	movw	r0, #21904	; 0x5590
   12e74:	movt	r0, #3
   12e78:	str	r4, [r0]
   12e7c:	pop	{r4, r5, fp, pc}
   12e80:	movw	r0, #20928	; 0x51c0
   12e84:	movt	r0, #3
   12e88:	ldr	r3, [r0]
   12e8c:	movw	r0, #15466	; 0x3c6a
   12e90:	movt	r0, #2
   12e94:	mov	r1, #55	; 0x37
   12e98:	mov	r2, #1
   12e9c:	bl	11338 <fwrite@plt>
   12ea0:	bl	114f4 <abort@plt>
   12ea4:	push	{r4, r5, r6, sl, fp, lr}
   12ea8:	add	fp, sp, #16
   12eac:	mov	r4, r0
   12eb0:	movw	r0, #21912	; 0x5598
   12eb4:	movt	r0, #3
   12eb8:	cmp	r4, #0
   12ebc:	moveq	r4, r0
   12ec0:	bl	11404 <__errno_location@plt>
   12ec4:	mov	r5, r0
   12ec8:	ldr	r6, [r0]
   12ecc:	mov	r0, r4
   12ed0:	mov	r1, #48	; 0x30
   12ed4:	bl	21e8c <__assert_fail@plt+0x10974>
   12ed8:	str	r6, [r5]
   12edc:	pop	{r4, r5, r6, sl, fp, pc}
   12ee0:	movw	r1, #21912	; 0x5598
   12ee4:	movt	r1, #3
   12ee8:	cmp	r0, #0
   12eec:	movne	r1, r0
   12ef0:	ldr	r0, [r1]
   12ef4:	bx	lr
   12ef8:	movw	r2, #21912	; 0x5598
   12efc:	movt	r2, #3
   12f00:	cmp	r0, #0
   12f04:	movne	r2, r0
   12f08:	str	r1, [r2]
   12f0c:	bx	lr
   12f10:	movw	r3, #21912	; 0x5598
   12f14:	movt	r3, #3
   12f18:	cmp	r0, #0
   12f1c:	movne	r3, r0
   12f20:	ubfx	r0, r1, #5, #3
   12f24:	add	ip, r3, r0, lsl #2
   12f28:	ldr	r3, [ip, #8]
   12f2c:	and	r1, r1, #31
   12f30:	mov	r0, #1
   12f34:	and	r0, r0, r3, lsr r1
   12f38:	and	r2, r2, #1
   12f3c:	eor	r2, r0, r2
   12f40:	eor	r1, r3, r2, lsl r1
   12f44:	str	r1, [ip, #8]
   12f48:	bx	lr
   12f4c:	movw	r2, #21912	; 0x5598
   12f50:	movt	r2, #3
   12f54:	cmp	r0, #0
   12f58:	movne	r2, r0
   12f5c:	ldr	r0, [r2, #4]
   12f60:	str	r1, [r2, #4]
   12f64:	bx	lr
   12f68:	push	{fp, lr}
   12f6c:	mov	fp, sp
   12f70:	movw	r3, #21912	; 0x5598
   12f74:	movt	r3, #3
   12f78:	cmp	r0, #0
   12f7c:	movne	r3, r0
   12f80:	mov	r0, #10
   12f84:	str	r0, [r3]
   12f88:	cmp	r1, #0
   12f8c:	cmpne	r2, #0
   12f90:	bne	12f98 <__assert_fail@plt+0x1a80>
   12f94:	bl	114f4 <abort@plt>
   12f98:	str	r1, [r3, #40]	; 0x28
   12f9c:	str	r2, [r3, #44]	; 0x2c
   12fa0:	pop	{fp, pc}
   12fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa8:	add	fp, sp, #28
   12fac:	sub	sp, sp, #20
   12fb0:	mov	r8, r3
   12fb4:	mov	r9, r2
   12fb8:	mov	sl, r1
   12fbc:	mov	r7, r0
   12fc0:	ldr	r0, [fp, #8]
   12fc4:	movw	r5, #21912	; 0x5598
   12fc8:	movt	r5, #3
   12fcc:	cmp	r0, #0
   12fd0:	movne	r5, r0
   12fd4:	bl	11404 <__errno_location@plt>
   12fd8:	mov	r4, r0
   12fdc:	ldm	r5, {r0, r1}
   12fe0:	ldr	r2, [r5, #40]	; 0x28
   12fe4:	ldr	r3, [r5, #44]	; 0x2c
   12fe8:	ldr	r6, [r4]
   12fec:	add	r5, r5, #8
   12ff0:	stm	sp, {r0, r1, r5}
   12ff4:	str	r2, [sp, #12]
   12ff8:	str	r3, [sp, #16]
   12ffc:	mov	r0, r7
   13000:	mov	r1, sl
   13004:	mov	r2, r9
   13008:	mov	r3, r8
   1300c:	bl	1301c <__assert_fail@plt+0x1b04>
   13010:	str	r6, [r4]
   13014:	sub	sp, fp, #28
   13018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1301c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13020:	add	fp, sp, #28
   13024:	sub	sp, sp, #156	; 0x9c
   13028:	mov	r9, r3
   1302c:	mov	r7, r1
   13030:	mov	r6, r0
   13034:	str	r2, [fp, #-80]	; 0xffffffb0
   13038:	add	r0, r2, #1
   1303c:	str	r0, [sp, #76]	; 0x4c
   13040:	ldr	r0, [fp, #12]
   13044:	and	r1, r0, #1
   13048:	str	r1, [sp, #40]	; 0x28
   1304c:	and	r1, r0, #4
   13050:	str	r1, [sp, #36]	; 0x24
   13054:	ubfx	r4, r0, #1, #1
   13058:	bl	11350 <__ctype_get_mb_cur_max@plt>
   1305c:	str	r0, [sp, #44]	; 0x2c
   13060:	ldr	r0, [fp, #24]
   13064:	str	r0, [sp, #88]	; 0x58
   13068:	ldr	r0, [fp, #20]
   1306c:	str	r0, [sp, #80]	; 0x50
   13070:	ldr	r1, [fp, #8]
   13074:	mov	r0, #0
   13078:	str	r0, [sp, #84]	; 0x54
   1307c:	mov	r0, #0
   13080:	str	r0, [fp, #-84]	; 0xffffffac
   13084:	mov	r0, #0
   13088:	str	r0, [fp, #-72]	; 0xffffffb8
   1308c:	mov	r0, #0
   13090:	mov	r2, #0
   13094:	str	r2, [fp, #-56]	; 0xffffffc8
   13098:	mov	r2, #0
   1309c:	str	r2, [sp, #64]	; 0x40
   130a0:	mov	r2, #1
   130a4:	str	r2, [fp, #-48]	; 0xffffffd0
   130a8:	cmp	r1, #10
   130ac:	bhi	13fd8 <__assert_fail@plt+0x2ac0>
   130b0:	mov	sl, r7
   130b4:	mov	r7, r1
   130b8:	add	r1, pc, #24
   130bc:	mov	r8, #0
   130c0:	mov	r2, #1
   130c4:	mov	r3, #0
   130c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   130cc:	mov	lr, r9
   130d0:	mov	r5, r6
   130d4:	ldr	pc, [r1, r7, lsl #2]
   130d8:	andeq	r3, r1, ip, lsr #3
   130dc:	andeq	r3, r1, ip, ror #3
   130e0:			; <UNDEFINED> instruction: 0x000131bc
   130e4:	andeq	r3, r1, r4, lsr #3
   130e8:	andeq	r3, r1, r0, ror #3
   130ec:	andeq	r3, r1, r0, asr #4
   130f0:	andeq	r3, r1, ip, asr #3
   130f4:	muleq	r1, ip, r2
   130f8:	andeq	r3, r1, r4, lsl #2
   130fc:	andeq	r3, r1, r4, lsl #2
   13100:	andeq	r3, r1, r0, lsr r1
   13104:	movw	r0, #15612	; 0x3cfc
   13108:	movt	r0, #2
   1310c:	mov	r1, r7
   13110:	bl	145e0 <__assert_fail@plt+0x30c8>
   13114:	str	r0, [sp, #80]	; 0x50
   13118:	movw	r0, #15614	; 0x3cfe
   1311c:	movt	r0, #2
   13120:	mov	r1, r7
   13124:	bl	145e0 <__assert_fail@plt+0x30c8>
   13128:	mov	r5, r6
   1312c:	str	r0, [sp, #88]	; 0x58
   13130:	mov	r8, #0
   13134:	tst	r4, #1
   13138:	str	r7, [fp, #-64]	; 0xffffffc0
   1313c:	bne	13174 <__assert_fail@plt+0x1c5c>
   13140:	ldr	r0, [sp, #80]	; 0x50
   13144:	ldrb	r0, [r0]
   13148:	cmp	r0, #0
   1314c:	beq	13174 <__assert_fail@plt+0x1c5c>
   13150:	ldr	r1, [sp, #80]	; 0x50
   13154:	add	r1, r1, #1
   13158:	mov	r8, #0
   1315c:	cmp	r8, sl
   13160:	strbcc	r0, [r5, r8]
   13164:	ldrb	r0, [r1, r8]
   13168:	add	r8, r8, #1
   1316c:	cmp	r0, #0
   13170:	bne	1315c <__assert_fail@plt+0x1c44>
   13174:	ldr	r7, [sp, #88]	; 0x58
   13178:	mov	r0, r7
   1317c:	bl	113ec <strlen@plt>
   13180:	mov	r5, r6
   13184:	str	r0, [fp, #-72]	; 0xffffffb8
   13188:	str	r7, [fp, #-84]	; 0xffffffac
   1318c:	mov	r2, #1
   13190:	mov	r3, r4
   13194:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13198:	mov	lr, r9
   1319c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   131a0:	b	1329c <__assert_fail@plt+0x1d84>
   131a4:	mov	r0, #1
   131a8:	b	131ec <__assert_fail@plt+0x1cd4>
   131ac:	mov	r7, #0
   131b0:	mov	r8, #0
   131b4:	mov	r2, r0
   131b8:	b	13298 <__assert_fail@plt+0x1d80>
   131bc:	tst	r4, #1
   131c0:	bne	131ec <__assert_fail@plt+0x1cd4>
   131c4:	mov	r2, r0
   131c8:	b	13214 <__assert_fail@plt+0x1cfc>
   131cc:	mov	r0, #1
   131d0:	str	r0, [fp, #-72]	; 0xffffffb8
   131d4:	mov	r8, #0
   131d8:	mov	r7, #5
   131dc:	b	13258 <__assert_fail@plt+0x1d40>
   131e0:	mov	r2, #1
   131e4:	tst	r4, #1
   131e8:	beq	13214 <__assert_fail@plt+0x1cfc>
   131ec:	mov	r1, #1
   131f0:	str	r1, [fp, #-72]	; 0xffffffb8
   131f4:	mov	r8, #0
   131f8:	mov	r7, #2
   131fc:	movw	r1, #15614	; 0x3cfe
   13200:	movt	r1, #2
   13204:	str	r1, [fp, #-84]	; 0xffffffac
   13208:	mov	r2, r0
   1320c:	mov	r3, #1
   13210:	b	1329c <__assert_fail@plt+0x1d84>
   13214:	mov	r8, #1
   13218:	mov	r7, #2
   1321c:	cmp	sl, #0
   13220:	movne	r0, #39	; 0x27
   13224:	strbne	r0, [r5]
   13228:	movw	r0, #15614	; 0x3cfe
   1322c:	movt	r0, #2
   13230:	str	r0, [fp, #-84]	; 0xffffffac
   13234:	mov	r0, #1
   13238:	str	r0, [fp, #-72]	; 0xffffffb8
   1323c:	b	13298 <__assert_fail@plt+0x1d80>
   13240:	mov	r7, #5
   13244:	tst	r4, #1
   13248:	beq	13270 <__assert_fail@plt+0x1d58>
   1324c:	mov	r0, #1
   13250:	str	r0, [fp, #-72]	; 0xffffffb8
   13254:	mov	r8, #0
   13258:	movw	r0, #15610	; 0x3cfa
   1325c:	movt	r0, #2
   13260:	str	r0, [fp, #-84]	; 0xffffffac
   13264:	mov	r2, #1
   13268:	mov	r3, #1
   1326c:	b	1329c <__assert_fail@plt+0x1d84>
   13270:	cmp	sl, #0
   13274:	movne	r0, #34	; 0x22
   13278:	strbne	r0, [r5]
   1327c:	mov	r8, #1
   13280:	movw	r0, #15610	; 0x3cfa
   13284:	movt	r0, #2
   13288:	str	r0, [fp, #-84]	; 0xffffffac
   1328c:	mov	r0, #1
   13290:	str	r0, [fp, #-72]	; 0xffffffb8
   13294:	mov	r2, #1
   13298:	mov	r3, #0
   1329c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132a0:	cmp	r0, #0
   132a4:	movwne	r0, #1
   132a8:	and	r1, r0, r3
   132ac:	and	r1, r2, r1
   132b0:	str	r1, [sp, #56]	; 0x38
   132b4:	sub	r1, r7, #2
   132b8:	clz	r1, r1
   132bc:	lsr	r1, r1, #5
   132c0:	and	r1, r1, r3
   132c4:	str	r1, [sp, #68]	; 0x44
   132c8:	str	r7, [fp, #-64]	; 0xffffffc0
   132cc:	subs	r1, r7, #2
   132d0:	movwne	r1, #1
   132d4:	eor	r4, r3, #1
   132d8:	str	r4, [fp, #-88]	; 0xffffffa8
   132dc:	orr	r4, r1, r4
   132e0:	str	r4, [sp, #72]	; 0x48
   132e4:	and	r1, r1, r2
   132e8:	and	r0, r0, r1
   132ec:	str	r0, [fp, #-60]	; 0xffffffc4
   132f0:	str	r3, [fp, #-76]	; 0xffffffb4
   132f4:	orr	r0, r1, r3
   132f8:	eor	r0, r0, #1
   132fc:	ldr	r1, [fp, #16]
   13300:	clz	r1, r1
   13304:	lsr	r1, r1, #5
   13308:	orr	r0, r1, r0
   1330c:	str	r0, [fp, #-68]	; 0xffffffbc
   13310:	str	r2, [sp, #92]	; 0x5c
   13314:	eor	r0, r2, #1
   13318:	str	r0, [sp, #60]	; 0x3c
   1331c:	mov	r7, #0
   13320:	cmn	lr, #1
   13324:	beq	13334 <__assert_fail@plt+0x1e1c>
   13328:	cmp	r7, lr
   1332c:	bne	13340 <__assert_fail@plt+0x1e28>
   13330:	b	13e4c <__assert_fail@plt+0x2934>
   13334:	ldrb	r0, [ip, r7]
   13338:	cmp	r0, #0
   1333c:	beq	13e4c <__assert_fail@plt+0x2934>
   13340:	mov	r9, #0
   13344:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13348:	cmp	r0, #0
   1334c:	beq	13380 <__assert_fail@plt+0x1e68>
   13350:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13354:	add	r4, r7, r0
   13358:	cmp	r0, #2
   1335c:	bcc	13378 <__assert_fail@plt+0x1e60>
   13360:	cmn	lr, #1
   13364:	bne	13378 <__assert_fail@plt+0x1e60>
   13368:	mov	r0, ip
   1336c:	bl	113ec <strlen@plt>
   13370:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13374:	mov	lr, r0
   13378:	cmp	r4, lr
   1337c:	bls	1338c <__assert_fail@plt+0x1e74>
   13380:	mov	r0, #0
   13384:	str	r0, [fp, #-52]	; 0xffffffcc
   13388:	b	133d0 <__assert_fail@plt+0x1eb8>
   1338c:	mov	r4, lr
   13390:	add	r0, ip, r7
   13394:	ldr	r1, [fp, #-84]	; 0xffffffac
   13398:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1339c:	bl	113e0 <bcmp@plt>
   133a0:	cmp	r0, #0
   133a4:	mov	r1, r0
   133a8:	movwne	r1, #1
   133ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133b0:	orr	r1, r1, r2
   133b4:	tst	r1, #1
   133b8:	beq	13f20 <__assert_fail@plt+0x2a08>
   133bc:	clz	r0, r0
   133c0:	lsr	r0, r0, #5
   133c4:	str	r0, [fp, #-52]	; 0xffffffcc
   133c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   133cc:	mov	lr, r4
   133d0:	ldrb	r4, [ip, r7]
   133d4:	cmp	r4, #126	; 0x7e
   133d8:	bhi	13908 <__assert_fail@plt+0x23f0>
   133dc:	mov	r6, #1
   133e0:	mov	r2, #110	; 0x6e
   133e4:	mov	r0, #97	; 0x61
   133e8:	add	r3, pc, #4
   133ec:	mov	r1, #0
   133f0:	ldr	pc, [r3, r4, lsl #2]
   133f4:	andeq	r3, r1, r8, ror #14
   133f8:	andeq	r3, r1, r8, lsl #18
   133fc:	andeq	r3, r1, r8, lsl #18
   13400:	andeq	r3, r1, r8, lsl #18
   13404:	andeq	r3, r1, r8, lsl #18
   13408:	andeq	r3, r1, r8, lsl #18
   1340c:	andeq	r3, r1, r8, lsl #18
   13410:	ldrdeq	r3, [r1], -ip
   13414:	andeq	r3, r1, r8, asr #14
   13418:	andeq	r3, r1, r0, asr #14
   1341c:	andeq	r3, r1, r4, asr r7
   13420:	andeq	r3, r1, r0, ror r8
   13424:	andeq	r3, r1, r8, lsr r7
   13428:	andeq	r3, r1, r0, asr r7
   1342c:	andeq	r3, r1, r8, lsl #18
   13430:	andeq	r3, r1, r8, lsl #18
   13434:	andeq	r3, r1, r8, lsl #18
   13438:	andeq	r3, r1, r8, lsl #18
   1343c:	andeq	r3, r1, r8, lsl #18
   13440:	andeq	r3, r1, r8, lsl #18
   13444:	andeq	r3, r1, r8, lsl #18
   13448:	andeq	r3, r1, r8, lsl #18
   1344c:	andeq	r3, r1, r8, lsl #18
   13450:	andeq	r3, r1, r8, lsl #18
   13454:	andeq	r3, r1, r8, lsl #18
   13458:	andeq	r3, r1, r8, lsl #18
   1345c:	andeq	r3, r1, r8, lsl #18
   13460:	andeq	r3, r1, r8, lsl #18
   13464:	andeq	r3, r1, r8, lsl #18
   13468:	andeq	r3, r1, r8, lsl #18
   1346c:	andeq	r3, r1, r8, lsl #18
   13470:	andeq	r3, r1, r8, lsl #18
   13474:	andeq	r3, r1, ip, ror #13
   13478:	strdeq	r3, [r1], -r0
   1347c:	strdeq	r3, [r1], -r0
   13480:	ldrdeq	r3, [r1], -r8
   13484:	strdeq	r3, [r1], -r0
   13488:	strdeq	r3, [r1], -r0
   1348c:	strdeq	r3, [r1], -r0
   13490:	andeq	r3, r1, r8, ror r8
   13494:	strdeq	r3, [r1], -r0
   13498:	strdeq	r3, [r1], -r0
   1349c:	strdeq	r3, [r1], -r0
   134a0:	strdeq	r3, [r1], -r0
   134a4:	strdeq	r3, [r1], -r0
   134a8:	strdeq	r3, [r1], -r0
   134ac:	strdeq	r3, [r1], -r0
   134b0:	strdeq	r3, [r1], -r0
   134b4:	strdeq	r3, [r1], -r0
   134b8:	strdeq	r3, [r1], -r0
   134bc:	strdeq	r3, [r1], -r0
   134c0:	strdeq	r3, [r1], -r0
   134c4:	strdeq	r3, [r1], -r0
   134c8:	strdeq	r3, [r1], -r0
   134cc:	strdeq	r3, [r1], -r0
   134d0:	strdeq	r3, [r1], -r0
   134d4:	strdeq	r3, [r1], -r0
   134d8:	strdeq	r3, [r1], -r0
   134dc:	strdeq	r3, [r1], -r0
   134e0:	strdeq	r3, [r1], -r0
   134e4:	strdeq	r3, [r1], -r0
   134e8:	strdeq	r3, [r1], -r0
   134ec:	strdeq	r3, [r1], -r0
   134f0:	andeq	r3, r1, r0, asr #16
   134f4:	andeq	r3, r1, r8, lsl #18
   134f8:	strdeq	r3, [r1], -r0
   134fc:	strdeq	r3, [r1], -r0
   13500:	strdeq	r3, [r1], -r0
   13504:	strdeq	r3, [r1], -r0
   13508:	strdeq	r3, [r1], -r0
   1350c:	strdeq	r3, [r1], -r0
   13510:	strdeq	r3, [r1], -r0
   13514:	strdeq	r3, [r1], -r0
   13518:	strdeq	r3, [r1], -r0
   1351c:	strdeq	r3, [r1], -r0
   13520:	strdeq	r3, [r1], -r0
   13524:	strdeq	r3, [r1], -r0
   13528:	strdeq	r3, [r1], -r0
   1352c:	strdeq	r3, [r1], -r0
   13530:	strdeq	r3, [r1], -r0
   13534:	strdeq	r3, [r1], -r0
   13538:	strdeq	r3, [r1], -r0
   1353c:	strdeq	r3, [r1], -r0
   13540:	strdeq	r3, [r1], -r0
   13544:	strdeq	r3, [r1], -r0
   13548:	strdeq	r3, [r1], -r0
   1354c:	strdeq	r3, [r1], -r0
   13550:	strdeq	r3, [r1], -r0
   13554:	strdeq	r3, [r1], -r0
   13558:	strdeq	r3, [r1], -r0
   1355c:	strdeq	r3, [r1], -r0
   13560:	strdeq	r3, [r1], -r0
   13564:	andeq	r3, r1, r8, lsl r7
   13568:	strdeq	r3, [r1], -r0
   1356c:	strdeq	r3, [r1], -r0
   13570:	strdeq	r3, [r1], -r0
   13574:	strdeq	r3, [r1], -r0
   13578:	strdeq	r3, [r1], -r0
   1357c:	strdeq	r3, [r1], -r0
   13580:	strdeq	r3, [r1], -r0
   13584:	strdeq	r3, [r1], -r0
   13588:	strdeq	r3, [r1], -r0
   1358c:	strdeq	r3, [r1], -r0
   13590:	strdeq	r3, [r1], -r0
   13594:	strdeq	r3, [r1], -r0
   13598:	strdeq	r3, [r1], -r0
   1359c:	strdeq	r3, [r1], -r0
   135a0:	strdeq	r3, [r1], -r0
   135a4:	strdeq	r3, [r1], -r0
   135a8:	strdeq	r3, [r1], -r0
   135ac:	strdeq	r3, [r1], -r0
   135b0:	strdeq	r3, [r1], -r0
   135b4:	strdeq	r3, [r1], -r0
   135b8:	strdeq	r3, [r1], -r0
   135bc:	strdeq	r3, [r1], -r0
   135c0:	strdeq	r3, [r1], -r0
   135c4:	strdeq	r3, [r1], -r0
   135c8:	strdeq	r3, [r1], -r0
   135cc:	strdeq	r3, [r1], -r0
   135d0:	strdeq	r3, [r1], -r0
   135d4:	strdeq	r3, [r1], -r0
   135d8:	strdeq	r3, [r1], -r0
   135dc:	strdeq	r3, [r1], -r0
   135e0:	andeq	r3, r1, ip, lsr #13
   135e4:	strdeq	r3, [r1], -r0
   135e8:	andeq	r3, r1, ip, lsr #13
   135ec:	ldrdeq	r3, [r1], -r8
   135f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135f4:	tst	r0, #1
   135f8:	bne	13624 <__assert_fail@plt+0x210c>
   135fc:	ubfx	r0, r4, #5, #3
   13600:	ldr	r1, [fp, #16]
   13604:	ldr	r0, [r1, r0, lsl #2]
   13608:	and	r1, r4, #31
   1360c:	mov	r2, #1
   13610:	tst	r0, r2, lsl r1
   13614:	beq	13624 <__assert_fail@plt+0x210c>
   13618:	mov	r0, r4
   1361c:	mov	r1, r6
   13620:	b	13638 <__assert_fail@plt+0x2120>
   13624:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13628:	cmp	r0, #0
   1362c:	mov	r0, r4
   13630:	mov	r1, r6
   13634:	beq	13970 <__assert_fail@plt+0x2458>
   13638:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1363c:	tst	r2, #1
   13640:	bne	13f34 <__assert_fail@plt+0x2a1c>
   13644:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13648:	subs	r2, r2, #2
   1364c:	movwne	r2, #1
   13650:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13654:	orr	r2, r2, r3
   13658:	tst	r2, #1
   1365c:	bne	13698 <__assert_fail@plt+0x2180>
   13660:	cmp	r8, sl
   13664:	movcc	r2, #39	; 0x27
   13668:	strbcc	r2, [r5, r8]
   1366c:	add	r2, r8, #1
   13670:	cmp	r2, sl
   13674:	movcc	r3, #36	; 0x24
   13678:	strbcc	r3, [r5, r2]
   1367c:	add	r2, r8, #2
   13680:	cmp	r2, sl
   13684:	movcc	r3, #39	; 0x27
   13688:	strbcc	r3, [r5, r2]
   1368c:	add	r8, r8, #3
   13690:	mov	r2, #1
   13694:	str	r2, [fp, #-56]	; 0xffffffc8
   13698:	cmp	r8, sl
   1369c:	movcc	r2, #92	; 0x5c
   136a0:	strbcc	r2, [r5, r8]
   136a4:	add	r8, r8, #1
   136a8:	b	139b4 <__assert_fail@plt+0x249c>
   136ac:	cmp	lr, #1
   136b0:	beq	136d8 <__assert_fail@plt+0x21c0>
   136b4:	mov	r6, #0
   136b8:	cmn	lr, #1
   136bc:	bne	136e4 <__assert_fail@plt+0x21cc>
   136c0:	ldrb	r0, [ip, #1]
   136c4:	cmp	r0, #0
   136c8:	beq	136d8 <__assert_fail@plt+0x21c0>
   136cc:	mvn	lr, #0
   136d0:	mov	r9, #0
   136d4:	b	135f0 <__assert_fail@plt+0x20d8>
   136d8:	mov	r6, #0
   136dc:	cmp	r7, #0
   136e0:	beq	136ec <__assert_fail@plt+0x21d4>
   136e4:	mov	r9, #0
   136e8:	b	135f0 <__assert_fail@plt+0x20d8>
   136ec:	mov	r1, #1
   136f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136f4:	cmp	r0, #2
   136f8:	bne	13710 <__assert_fail@plt+0x21f8>
   136fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13700:	tst	r0, #1
   13704:	mov	r6, r1
   13708:	beq	135f0 <__assert_fail@plt+0x20d8>
   1370c:	b	13f34 <__assert_fail@plt+0x2a1c>
   13710:	mov	r6, r1
   13714:	b	135f0 <__assert_fail@plt+0x20d8>
   13718:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1371c:	cmp	r0, #2
   13720:	bne	13954 <__assert_fail@plt+0x243c>
   13724:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13728:	tst	r0, #1
   1372c:	bne	13f34 <__assert_fail@plt+0x2a1c>
   13730:	mov	r9, #0
   13734:	b	13968 <__assert_fail@plt+0x2450>
   13738:	mov	r0, #102	; 0x66
   1373c:	b	139dc <__assert_fail@plt+0x24c4>
   13740:	mov	r2, #116	; 0x74
   13744:	b	13754 <__assert_fail@plt+0x223c>
   13748:	mov	r0, #98	; 0x62
   1374c:	b	139dc <__assert_fail@plt+0x24c4>
   13750:	mov	r2, #114	; 0x72
   13754:	ldr	r0, [sp, #72]	; 0x48
   13758:	tst	r0, #1
   1375c:	mov	r0, r2
   13760:	bne	139dc <__assert_fail@plt+0x24c4>
   13764:	b	13f34 <__assert_fail@plt+0x2a1c>
   13768:	ldr	r0, [sp, #92]	; 0x5c
   1376c:	tst	r0, #1
   13770:	beq	139f8 <__assert_fail@plt+0x24e0>
   13774:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13778:	tst	r0, #1
   1377c:	bne	13f34 <__assert_fail@plt+0x2a1c>
   13780:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13784:	subs	r0, r0, #2
   13788:	movwne	r0, #1
   1378c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13790:	orr	r0, r0, r1
   13794:	tst	r0, #1
   13798:	bne	137d4 <__assert_fail@plt+0x22bc>
   1379c:	cmp	r8, sl
   137a0:	movcc	r0, #39	; 0x27
   137a4:	strbcc	r0, [r5, r8]
   137a8:	add	r0, r8, #1
   137ac:	cmp	r0, sl
   137b0:	movcc	r1, #36	; 0x24
   137b4:	strbcc	r1, [r5, r0]
   137b8:	add	r0, r8, #2
   137bc:	cmp	r0, sl
   137c0:	movcc	r1, #39	; 0x27
   137c4:	strbcc	r1, [r5, r0]
   137c8:	add	r8, r8, #3
   137cc:	mov	r0, #1
   137d0:	str	r0, [fp, #-56]	; 0xffffffc8
   137d4:	cmp	r8, sl
   137d8:	movcc	r0, #92	; 0x5c
   137dc:	strbcc	r0, [r5, r8]
   137e0:	add	r0, r8, #1
   137e4:	mov	r6, #0
   137e8:	mov	r9, #1
   137ec:	mov	r4, #48	; 0x30
   137f0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   137f4:	cmp	r1, #2
   137f8:	beq	13bbc <__assert_fail@plt+0x26a4>
   137fc:	add	r1, r7, #1
   13800:	cmp	r1, lr
   13804:	bcs	13bbc <__assert_fail@plt+0x26a4>
   13808:	ldrb	r1, [ip, r1]
   1380c:	sub	r1, r1, #48	; 0x30
   13810:	uxtb	r1, r1
   13814:	cmp	r1, #9
   13818:	bhi	13bbc <__assert_fail@plt+0x26a4>
   1381c:	cmp	r0, sl
   13820:	movcc	r1, #48	; 0x30
   13824:	strbcc	r1, [r5, r0]
   13828:	add	r0, r8, #2
   1382c:	cmp	r0, sl
   13830:	movcc	r1, #48	; 0x30
   13834:	strbcc	r1, [r5, r0]
   13838:	add	r8, r8, #3
   1383c:	b	135f0 <__assert_fail@plt+0x20d8>
   13840:	mov	r9, #0
   13844:	mov	r4, #63	; 0x3f
   13848:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1384c:	cmp	r0, #5
   13850:	beq	13bc4 <__assert_fail@plt+0x26ac>
   13854:	cmp	r0, #2
   13858:	bne	13c6c <__assert_fail@plt+0x2754>
   1385c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13860:	tst	r0, #1
   13864:	mov	r6, #0
   13868:	beq	135f0 <__assert_fail@plt+0x20d8>
   1386c:	b	13f34 <__assert_fail@plt+0x2a1c>
   13870:	mov	r0, #118	; 0x76
   13874:	b	139dc <__assert_fail@plt+0x24c4>
   13878:	mov	r4, #39	; 0x27
   1387c:	mov	r0, #1
   13880:	str	r0, [sp, #64]	; 0x40
   13884:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13888:	cmp	r0, #2
   1388c:	bne	13a14 <__assert_fail@plt+0x24fc>
   13890:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13894:	tst	r0, #1
   13898:	bne	13f34 <__assert_fail@plt+0x2a1c>
   1389c:	ldr	r2, [sp, #84]	; 0x54
   138a0:	cmp	r2, #0
   138a4:	mov	r0, r2
   138a8:	movwne	r0, #1
   138ac:	clz	r1, sl
   138b0:	lsr	r1, r1, #5
   138b4:	orrs	r0, r0, r1
   138b8:	moveq	r2, sl
   138bc:	str	r2, [sp, #84]	; 0x54
   138c0:	moveq	sl, r0
   138c4:	cmp	r8, sl
   138c8:	movcc	r0, #39	; 0x27
   138cc:	strbcc	r0, [r5, r8]
   138d0:	add	r0, r8, #1
   138d4:	cmp	r0, sl
   138d8:	movcc	r1, #92	; 0x5c
   138dc:	strbcc	r1, [r5, r0]
   138e0:	add	r0, r8, #2
   138e4:	cmp	r0, sl
   138e8:	movcc	r1, #39	; 0x27
   138ec:	strbcc	r1, [r5, r0]
   138f0:	add	r8, r8, #3
   138f4:	mov	r0, #0
   138f8:	str	r0, [fp, #-56]	; 0xffffffc8
   138fc:	mov	r9, #0
   13900:	mov	r6, #1
   13904:	b	135f0 <__assert_fail@plt+0x20d8>
   13908:	ldr	r0, [sp, #44]	; 0x2c
   1390c:	cmp	r0, #1
   13910:	bne	13a1c <__assert_fail@plt+0x2504>
   13914:	str	lr, [sp, #32]
   13918:	bl	113c8 <__ctype_b_loc@plt>
   1391c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13920:	ldr	r0, [r0]
   13924:	add	r0, r0, r4, lsl #1
   13928:	ldrb	r0, [r0, #1]
   1392c:	ubfx	r6, r0, #6, #1
   13930:	mov	r2, #1
   13934:	ldr	r0, [sp, #60]	; 0x3c
   13938:	orr	r1, r6, r0
   1393c:	cmp	r2, #1
   13940:	bhi	13c74 <__assert_fail@plt+0x275c>
   13944:	tst	r1, #1
   13948:	beq	13c74 <__assert_fail@plt+0x275c>
   1394c:	ldr	lr, [sp, #32]
   13950:	b	135f0 <__assert_fail@plt+0x20d8>
   13954:	mov	r9, #0
   13958:	mov	r0, #92	; 0x5c
   1395c:	ldr	r1, [sp, #56]	; 0x38
   13960:	cmp	r1, #0
   13964:	beq	139dc <__assert_fail@plt+0x24c4>
   13968:	mov	r4, #92	; 0x5c
   1396c:	mov	r6, #0
   13970:	cmp	r9, #0
   13974:	bne	139ac <__assert_fail@plt+0x2494>
   13978:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1397c:	tst	r0, #1
   13980:	beq	139ac <__assert_fail@plt+0x2494>
   13984:	cmp	r8, sl
   13988:	movcc	r0, #39	; 0x27
   1398c:	strbcc	r0, [r5, r8]
   13990:	add	r0, r8, #1
   13994:	cmp	r0, sl
   13998:	movcc	r1, #39	; 0x27
   1399c:	strbcc	r1, [r5, r0]
   139a0:	add	r8, r8, #2
   139a4:	mov	r0, #0
   139a8:	str	r0, [fp, #-56]	; 0xffffffc8
   139ac:	mov	r1, r6
   139b0:	mov	r0, r4
   139b4:	cmp	r8, sl
   139b8:	strbcc	r0, [r5, r8]
   139bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   139c0:	and	r0, r0, r1
   139c4:	str	r0, [fp, #-48]	; 0xffffffd0
   139c8:	add	r8, r8, #1
   139cc:	add	r7, r7, #1
   139d0:	cmn	lr, #1
   139d4:	bne	13328 <__assert_fail@plt+0x1e10>
   139d8:	b	13334 <__assert_fail@plt+0x1e1c>
   139dc:	mov	r9, #0
   139e0:	ldr	r1, [sp, #92]	; 0x5c
   139e4:	tst	r1, #1
   139e8:	mov	r6, #0
   139ec:	mov	r1, #0
   139f0:	beq	135f0 <__assert_fail@plt+0x20d8>
   139f4:	b	13638 <__assert_fail@plt+0x2120>
   139f8:	mov	r4, #0
   139fc:	ldr	r0, [sp, #40]	; 0x28
   13a00:	cmp	r0, #0
   13a04:	mov	r9, #0
   13a08:	mov	r6, #0
   13a0c:	beq	135f0 <__assert_fail@plt+0x20d8>
   13a10:	b	139cc <__assert_fail@plt+0x24b4>
   13a14:	mov	r6, #1
   13a18:	b	135f0 <__assert_fail@plt+0x20d8>
   13a1c:	mov	r0, #0
   13a20:	str	r0, [fp, #-36]	; 0xffffffdc
   13a24:	str	r0, [fp, #-40]	; 0xffffffd8
   13a28:	cmn	lr, #1
   13a2c:	bne	13a40 <__assert_fail@plt+0x2528>
   13a30:	mov	r0, ip
   13a34:	bl	113ec <strlen@plt>
   13a38:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a3c:	mov	lr, r0
   13a40:	ldr	r0, [sp, #76]	; 0x4c
   13a44:	add	r0, r0, r7
   13a48:	str	r0, [sp, #24]
   13a4c:	mov	r6, #1
   13a50:	mov	r2, #0
   13a54:	sub	r0, fp, #40	; 0x28
   13a58:	mov	r3, r0
   13a5c:	str	r5, [sp, #28]
   13a60:	str	lr, [sp, #32]
   13a64:	b	13aa8 <__assert_fail@plt+0x2590>
   13a68:	ldr	r5, [sp, #52]	; 0x34
   13a6c:	add	r5, r0, r5
   13a70:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13a74:	bl	1132c <iswprint@plt>
   13a78:	cmp	r0, #0
   13a7c:	movwne	r0, #1
   13a80:	and	r6, r6, r0
   13a84:	sub	r0, fp, #40	; 0x28
   13a88:	bl	112d8 <mbsinit@plt>
   13a8c:	sub	r3, fp, #40	; 0x28
   13a90:	mov	r2, r5
   13a94:	ldr	lr, [sp, #32]
   13a98:	cmp	r0, #0
   13a9c:	ldr	r5, [sp, #28]
   13aa0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13aa4:	bne	13934 <__assert_fail@plt+0x241c>
   13aa8:	str	r2, [sp, #52]	; 0x34
   13aac:	add	r0, r2, r7
   13ab0:	add	r1, ip, r0
   13ab4:	str	r0, [sp, #48]	; 0x30
   13ab8:	sub	r2, lr, r0
   13abc:	sub	r0, fp, #44	; 0x2c
   13ac0:	bl	22c08 <__assert_fail@plt+0x116f0>
   13ac4:	cmp	r0, #0
   13ac8:	beq	13e40 <__assert_fail@plt+0x2928>
   13acc:	cmn	r0, #1
   13ad0:	beq	13dfc <__assert_fail@plt+0x28e4>
   13ad4:	cmn	r0, #2
   13ad8:	ldr	lr, [sp, #32]
   13adc:	beq	13e04 <__assert_fail@plt+0x28ec>
   13ae0:	cmp	r0, #2
   13ae4:	mov	r1, #0
   13ae8:	movwcc	r1, #1
   13aec:	ldr	r2, [sp, #68]	; 0x44
   13af0:	eor	r2, r2, #1
   13af4:	orrs	r1, r2, r1
   13af8:	bne	13a68 <__assert_fail@plt+0x2550>
   13afc:	ldr	r1, [sp, #52]	; 0x34
   13b00:	ldr	r2, [sp, #24]
   13b04:	add	r1, r2, r1
   13b08:	sub	r2, r0, #1
   13b0c:	b	13b1c <__assert_fail@plt+0x2604>
   13b10:	add	r1, r1, #1
   13b14:	subs	r2, r2, #1
   13b18:	beq	13a68 <__assert_fail@plt+0x2550>
   13b1c:	ldrb	r3, [r1]
   13b20:	sub	r3, r3, #91	; 0x5b
   13b24:	cmp	r3, #33	; 0x21
   13b28:	bhi	13b10 <__assert_fail@plt+0x25f8>
   13b2c:	add	r5, pc, #0
   13b30:	ldr	pc, [r5, r3, lsl #2]
   13b34:	andeq	r3, r1, ip, lsr #30
   13b38:	andeq	r3, r1, ip, lsr #30
   13b3c:	andeq	r3, r1, r0, lsl fp
   13b40:	andeq	r3, r1, ip, lsr #30
   13b44:	andeq	r3, r1, r0, lsl fp
   13b48:	andeq	r3, r1, ip, lsr #30
   13b4c:	andeq	r3, r1, r0, lsl fp
   13b50:	andeq	r3, r1, r0, lsl fp
   13b54:	andeq	r3, r1, r0, lsl fp
   13b58:	andeq	r3, r1, r0, lsl fp
   13b5c:	andeq	r3, r1, r0, lsl fp
   13b60:	andeq	r3, r1, r0, lsl fp
   13b64:	andeq	r3, r1, r0, lsl fp
   13b68:	andeq	r3, r1, r0, lsl fp
   13b6c:	andeq	r3, r1, r0, lsl fp
   13b70:	andeq	r3, r1, r0, lsl fp
   13b74:	andeq	r3, r1, r0, lsl fp
   13b78:	andeq	r3, r1, r0, lsl fp
   13b7c:	andeq	r3, r1, r0, lsl fp
   13b80:	andeq	r3, r1, r0, lsl fp
   13b84:	andeq	r3, r1, r0, lsl fp
   13b88:	andeq	r3, r1, r0, lsl fp
   13b8c:	andeq	r3, r1, r0, lsl fp
   13b90:	andeq	r3, r1, r0, lsl fp
   13b94:	andeq	r3, r1, r0, lsl fp
   13b98:	andeq	r3, r1, r0, lsl fp
   13b9c:	andeq	r3, r1, r0, lsl fp
   13ba0:	andeq	r3, r1, r0, lsl fp
   13ba4:	andeq	r3, r1, r0, lsl fp
   13ba8:	andeq	r3, r1, r0, lsl fp
   13bac:	andeq	r3, r1, r0, lsl fp
   13bb0:	andeq	r3, r1, r0, lsl fp
   13bb4:	andeq	r3, r1, r0, lsl fp
   13bb8:	andeq	r3, r1, ip, lsr #30
   13bbc:	mov	r8, r0
   13bc0:	b	135f0 <__assert_fail@plt+0x20d8>
   13bc4:	ldr	r0, [sp, #36]	; 0x24
   13bc8:	cmp	r0, #0
   13bcc:	beq	13c6c <__assert_fail@plt+0x2754>
   13bd0:	add	r0, r7, #2
   13bd4:	cmp	r0, lr
   13bd8:	bcs	13c6c <__assert_fail@plt+0x2754>
   13bdc:	add	r1, r7, ip
   13be0:	ldrb	r1, [r1, #1]
   13be4:	cmp	r1, #63	; 0x3f
   13be8:	bne	13c6c <__assert_fail@plt+0x2754>
   13bec:	ldrb	r1, [ip, r0]
   13bf0:	sub	r2, r1, #33	; 0x21
   13bf4:	cmp	r2, #29
   13bf8:	bhi	13c6c <__assert_fail@plt+0x2754>
   13bfc:	mov	r3, #1
   13c00:	movw	r6, #20929	; 0x51c1
   13c04:	movt	r6, #14336	; 0x3800
   13c08:	tst	r6, r3, lsl r2
   13c0c:	beq	13c6c <__assert_fail@plt+0x2754>
   13c10:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13c14:	tst	r2, #1
   13c18:	bne	13f34 <__assert_fail@plt+0x2a1c>
   13c1c:	cmp	r8, sl
   13c20:	movcc	r2, #63	; 0x3f
   13c24:	strbcc	r2, [r5, r8]
   13c28:	add	r2, r8, #1
   13c2c:	cmp	r2, sl
   13c30:	movcc	r3, #34	; 0x22
   13c34:	strbcc	r3, [r5, r2]
   13c38:	add	r2, r8, #2
   13c3c:	cmp	r2, sl
   13c40:	movcc	r3, #34	; 0x22
   13c44:	strbcc	r3, [r5, r2]
   13c48:	add	r2, r8, #3
   13c4c:	cmp	r2, sl
   13c50:	movcc	r3, #63	; 0x3f
   13c54:	strbcc	r3, [r5, r2]
   13c58:	add	r8, r8, #4
   13c5c:	mov	r7, r0
   13c60:	mov	r4, r1
   13c64:	mov	r6, #0
   13c68:	b	135f0 <__assert_fail@plt+0x20d8>
   13c6c:	mov	r6, #0
   13c70:	b	135f0 <__assert_fail@plt+0x20d8>
   13c74:	add	r0, r2, r7
   13c78:	str	r0, [sp, #52]	; 0x34
   13c7c:	mov	r2, #0
   13c80:	ldr	lr, [sp, #32]
   13c84:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13c88:	str	r1, [sp, #48]	; 0x30
   13c8c:	tst	r1, #1
   13c90:	bne	13d6c <__assert_fail@plt+0x2854>
   13c94:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13c98:	tst	r1, #1
   13c9c:	bne	13f34 <__assert_fail@plt+0x2a1c>
   13ca0:	mov	r3, r0
   13ca4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ca8:	subs	r1, r0, #2
   13cac:	movwne	r1, #1
   13cb0:	orr	r1, r1, r3
   13cb4:	tst	r1, #1
   13cb8:	bne	13cf0 <__assert_fail@plt+0x27d8>
   13cbc:	cmp	r8, sl
   13cc0:	movcc	r0, #39	; 0x27
   13cc4:	strbcc	r0, [r5, r8]
   13cc8:	add	r2, r8, #1
   13ccc:	cmp	r2, sl
   13cd0:	movcc	r0, #36	; 0x24
   13cd4:	strbcc	r0, [r5, r2]
   13cd8:	add	r2, r8, #2
   13cdc:	cmp	r2, sl
   13ce0:	movcc	r0, #39	; 0x27
   13ce4:	strbcc	r0, [r5, r2]
   13ce8:	add	r8, r8, #3
   13cec:	mov	r3, #1
   13cf0:	cmp	r8, sl
   13cf4:	movcc	r1, #92	; 0x5c
   13cf8:	strbcc	r1, [r5, r8]
   13cfc:	add	r2, r8, #1
   13d00:	cmp	r2, sl
   13d04:	bcs	13d18 <__assert_fail@plt+0x2800>
   13d08:	uxtb	r1, r4
   13d0c:	mov	r0, #48	; 0x30
   13d10:	orr	r1, r0, r1, lsr #6
   13d14:	strb	r1, [r5, r2]
   13d18:	add	r2, r8, #2
   13d1c:	cmp	r2, sl
   13d20:	lsrcc	r1, r4, #3
   13d24:	movcc	r0, #6
   13d28:	bficc	r1, r0, #3, #29
   13d2c:	strbcc	r1, [r5, r2]
   13d30:	mov	r0, #6
   13d34:	bfi	r4, r0, #3, #29
   13d38:	add	r8, r8, #3
   13d3c:	mov	r2, #1
   13d40:	mov	r0, r3
   13d44:	b	13d90 <__assert_fail@plt+0x2878>
   13d48:	cmp	r8, sl
   13d4c:	strbcc	r4, [r5, r8]
   13d50:	ldr	r1, [sp, #76]	; 0x4c
   13d54:	ldrb	r4, [r1, r7]
   13d58:	add	r8, r8, #1
   13d5c:	mov	r7, r3
   13d60:	ldr	r1, [sp, #48]	; 0x30
   13d64:	tst	r1, #1
   13d68:	beq	13c94 <__assert_fail@plt+0x277c>
   13d6c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13d70:	tst	r1, #1
   13d74:	beq	13d88 <__assert_fail@plt+0x2870>
   13d78:	cmp	r8, sl
   13d7c:	movcc	r1, #92	; 0x5c
   13d80:	strbcc	r1, [r5, r8]
   13d84:	add	r8, r8, #1
   13d88:	mov	r1, #0
   13d8c:	str	r1, [fp, #-52]	; 0xffffffcc
   13d90:	and	r9, r2, #1
   13d94:	add	r3, r7, #1
   13d98:	ldr	r1, [sp, #52]	; 0x34
   13d9c:	cmp	r1, r3
   13da0:	bls	13de4 <__assert_fail@plt+0x28cc>
   13da4:	cmp	r9, #0
   13da8:	movwne	r9, #1
   13dac:	mvn	r1, r0
   13db0:	orr	r1, r1, r9
   13db4:	tst	r1, #1
   13db8:	bne	13d48 <__assert_fail@plt+0x2830>
   13dbc:	cmp	r8, sl
   13dc0:	movcc	r1, #39	; 0x27
   13dc4:	strbcc	r1, [r5, r8]
   13dc8:	add	r1, r8, #1
   13dcc:	cmp	r1, sl
   13dd0:	movcc	r0, #39	; 0x27
   13dd4:	strbcc	r0, [r5, r1]
   13dd8:	add	r8, r8, #2
   13ddc:	mov	r0, #0
   13de0:	b	13d48 <__assert_fail@plt+0x2830>
   13de4:	str	r0, [fp, #-56]	; 0xffffffc8
   13de8:	cmp	r9, #0
   13dec:	movwne	r9, #1
   13df0:	cmp	r9, #0
   13df4:	beq	13978 <__assert_fail@plt+0x2460>
   13df8:	b	139ac <__assert_fail@plt+0x2494>
   13dfc:	mov	r6, #0
   13e00:	b	13e40 <__assert_fail@plt+0x2928>
   13e04:	mov	r6, #0
   13e08:	ldr	r0, [sp, #48]	; 0x30
   13e0c:	cmp	r0, lr
   13e10:	bcs	13e40 <__assert_fail@plt+0x2928>
   13e14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13e18:	add	r0, ip, r7
   13e1c:	ldr	r2, [sp, #52]	; 0x34
   13e20:	ldrb	r1, [r0, r2]
   13e24:	cmp	r1, #0
   13e28:	beq	13934 <__assert_fail@plt+0x241c>
   13e2c:	add	r2, r2, #1
   13e30:	add	r1, r7, r2
   13e34:	cmp	r1, lr
   13e38:	bcc	13e20 <__assert_fail@plt+0x2908>
   13e3c:	b	13934 <__assert_fail@plt+0x241c>
   13e40:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13e44:	ldr	r2, [sp, #52]	; 0x34
   13e48:	b	13934 <__assert_fail@plt+0x241c>
   13e4c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13e50:	eor	r0, r1, #2
   13e54:	orr	r0, r0, r8
   13e58:	clz	r0, r0
   13e5c:	lsr	r0, r0, #5
   13e60:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13e64:	tst	r3, r0
   13e68:	bne	13f34 <__assert_fail@plt+0x2a1c>
   13e6c:	mov	r6, r5
   13e70:	subs	r0, r1, #2
   13e74:	movwne	r0, #1
   13e78:	orr	r0, r3, r0
   13e7c:	tst	r0, #1
   13e80:	ldr	r2, [sp, #92]	; 0x5c
   13e84:	ldreq	r0, [sp, #64]	; 0x40
   13e88:	eoreq	r0, r0, #1
   13e8c:	tsteq	r0, #1
   13e90:	bne	13ed0 <__assert_fail@plt+0x29b8>
   13e94:	mov	r9, lr
   13e98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13e9c:	tst	r0, #1
   13ea0:	bne	13f9c <__assert_fail@plt+0x2a84>
   13ea4:	ldr	r0, [sp, #84]	; 0x54
   13ea8:	cmp	r0, #0
   13eac:	beq	13ed0 <__assert_fail@plt+0x29b8>
   13eb0:	mov	r0, #0
   13eb4:	str	r0, [fp, #-48]	; 0xffffffd0
   13eb8:	mov	r1, #2
   13ebc:	cmp	sl, #0
   13ec0:	mov	r0, r2
   13ec4:	mov	r4, r3
   13ec8:	ldr	r7, [sp, #84]	; 0x54
   13ecc:	beq	130a8 <__assert_fail@plt+0x1b90>
   13ed0:	ldr	r1, [fp, #-84]	; 0xffffffac
   13ed4:	clz	r0, r1
   13ed8:	lsr	r0, r0, #5
   13edc:	orr	r0, r0, r3
   13ee0:	tst	r0, #1
   13ee4:	bne	13f10 <__assert_fail@plt+0x29f8>
   13ee8:	ldrb	r0, [r1]
   13eec:	cmp	r0, #0
   13ef0:	beq	13f10 <__assert_fail@plt+0x29f8>
   13ef4:	add	r1, r1, #1
   13ef8:	cmp	r8, sl
   13efc:	strbcc	r0, [r6, r8]
   13f00:	add	r8, r8, #1
   13f04:	ldrb	r0, [r1], #1
   13f08:	cmp	r0, #0
   13f0c:	bne	13ef8 <__assert_fail@plt+0x29e0>
   13f10:	cmp	r8, sl
   13f14:	movcc	r0, #0
   13f18:	strbcc	r0, [r6, r8]
   13f1c:	b	13f90 <__assert_fail@plt+0x2a78>
   13f20:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13f24:	mov	lr, r4
   13f28:	b	13f34 <__assert_fail@plt+0x2a1c>
   13f2c:	ldr	r5, [sp, #28]
   13f30:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13f34:	mov	r0, #0
   13f38:	ldr	r1, [fp, #12]
   13f3c:	bic	r1, r1, #2
   13f40:	mov	r2, #2
   13f44:	ldr	r3, [sp, #92]	; 0x5c
   13f48:	tst	r3, #1
   13f4c:	movwne	r2, #4
   13f50:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f54:	cmp	r3, #2
   13f58:	movne	r2, r3
   13f5c:	str	r2, [sp]
   13f60:	str	r1, [sp, #4]
   13f64:	str	r0, [sp, #8]
   13f68:	ldr	r0, [sp, #80]	; 0x50
   13f6c:	str	r0, [sp, #12]
   13f70:	ldr	r0, [sp, #88]	; 0x58
   13f74:	str	r0, [sp, #16]
   13f78:	mov	r0, r5
   13f7c:	mov	r1, sl
   13f80:	mov	r2, ip
   13f84:	mov	r3, lr
   13f88:	bl	1301c <__assert_fail@plt+0x1b04>
   13f8c:	mov	r8, r0
   13f90:	mov	r0, r8
   13f94:	sub	sp, fp, #28
   13f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f9c:	mov	r0, #5
   13fa0:	str	r0, [sp]
   13fa4:	ldr	r0, [fp, #12]
   13fa8:	str	r0, [sp, #4]
   13fac:	ldr	r0, [fp, #16]
   13fb0:	str	r0, [sp, #8]
   13fb4:	ldr	r0, [sp, #80]	; 0x50
   13fb8:	str	r0, [sp, #12]
   13fbc:	ldr	r0, [sp, #88]	; 0x58
   13fc0:	str	r0, [sp, #16]
   13fc4:	mov	r0, r6
   13fc8:	ldr	r1, [sp, #84]	; 0x54
   13fcc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13fd0:	mov	r3, r9
   13fd4:	b	13f88 <__assert_fail@plt+0x2a70>
   13fd8:	bl	114f4 <abort@plt>
   13fdc:	mov	r3, r2
   13fe0:	mov	r2, #0
   13fe4:	b	13fe8 <__assert_fail@plt+0x2ad0>
   13fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fec:	add	fp, sp, #28
   13ff0:	sub	sp, sp, #36	; 0x24
   13ff4:	mov	r4, r2
   13ff8:	str	r2, [sp, #24]
   13ffc:	mov	r5, r1
   14000:	mov	r6, r0
   14004:	str	r0, [sp, #20]
   14008:	movw	r8, #21912	; 0x5598
   1400c:	movt	r8, #3
   14010:	cmp	r3, #0
   14014:	movne	r8, r3
   14018:	bl	11404 <__errno_location@plt>
   1401c:	str	r0, [sp, #28]
   14020:	ldm	r8, {r3, r9}
   14024:	ldr	r1, [r8, #40]	; 0x28
   14028:	ldr	r2, [r8, #44]	; 0x2c
   1402c:	ldr	r7, [r0]
   14030:	str	r7, [sp, #32]
   14034:	add	sl, r8, #8
   14038:	cmp	r4, #0
   1403c:	orreq	r9, r9, #1
   14040:	stm	sp, {r3, r9, sl}
   14044:	str	r1, [sp, #12]
   14048:	str	r2, [sp, #16]
   1404c:	mov	r0, #0
   14050:	mov	r1, #0
   14054:	mov	r2, r6
   14058:	mov	r3, r5
   1405c:	mov	r7, r5
   14060:	bl	1301c <__assert_fail@plt+0x1b04>
   14064:	mov	r5, r0
   14068:	add	r4, r0, #1
   1406c:	mov	r0, r4
   14070:	bl	21be0 <__assert_fail@plt+0x106c8>
   14074:	mov	r6, r0
   14078:	ldr	r0, [r8]
   1407c:	ldr	r1, [r8, #40]	; 0x28
   14080:	ldr	r2, [r8, #44]	; 0x2c
   14084:	stm	sp, {r0, r9, sl}
   14088:	str	r1, [sp, #12]
   1408c:	str	r2, [sp, #16]
   14090:	mov	r0, r6
   14094:	mov	r1, r4
   14098:	ldr	r2, [sp, #20]
   1409c:	mov	r3, r7
   140a0:	bl	1301c <__assert_fail@plt+0x1b04>
   140a4:	ldr	r0, [sp, #24]
   140a8:	ldr	r1, [sp, #32]
   140ac:	ldr	r2, [sp, #28]
   140b0:	str	r1, [r2]
   140b4:	cmp	r0, #0
   140b8:	strne	r5, [r0]
   140bc:	mov	r0, r6
   140c0:	sub	sp, fp, #28
   140c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   140cc:	add	fp, sp, #24
   140d0:	movw	r8, #20848	; 0x5170
   140d4:	movt	r8, #3
   140d8:	ldr	r4, [r8]
   140dc:	movw	r5, #20852	; 0x5174
   140e0:	movt	r5, #3
   140e4:	ldr	r0, [r5]
   140e8:	cmp	r0, #2
   140ec:	blt	14118 <__assert_fail@plt+0x2c00>
   140f0:	add	r7, r4, #12
   140f4:	mov	r6, #0
   140f8:	ldr	r0, [r7, r6, lsl #3]
   140fc:	bl	22b58 <__assert_fail@plt+0x11640>
   14100:	add	r0, r6, #1
   14104:	ldr	r1, [r5]
   14108:	add	r2, r6, #2
   1410c:	cmp	r2, r1
   14110:	mov	r6, r0
   14114:	blt	140f8 <__assert_fail@plt+0x2be0>
   14118:	ldr	r0, [r4, #4]
   1411c:	movw	r9, #21960	; 0x55c8
   14120:	movt	r9, #3
   14124:	cmp	r0, r9
   14128:	movw	r7, #20856	; 0x5178
   1412c:	movt	r7, #3
   14130:	beq	14140 <__assert_fail@plt+0x2c28>
   14134:	bl	22b58 <__assert_fail@plt+0x11640>
   14138:	mov	r0, #256	; 0x100
   1413c:	stm	r7, {r0, r9}
   14140:	cmp	r4, r7
   14144:	beq	14154 <__assert_fail@plt+0x2c3c>
   14148:	mov	r0, r4
   1414c:	bl	22b58 <__assert_fail@plt+0x11640>
   14150:	str	r7, [r8]
   14154:	mov	r0, #1
   14158:	str	r0, [r5]
   1415c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14160:	movw	r3, #21912	; 0x5598
   14164:	movt	r3, #3
   14168:	mvn	r2, #0
   1416c:	b	14170 <__assert_fail@plt+0x2c58>
   14170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14174:	add	fp, sp, #28
   14178:	sub	sp, sp, #44	; 0x2c
   1417c:	mov	r7, r3
   14180:	str	r2, [sp, #36]	; 0x24
   14184:	str	r1, [sp, #32]
   14188:	mov	r5, r0
   1418c:	bl	11404 <__errno_location@plt>
   14190:	cmp	r5, #0
   14194:	bmi	14304 <__assert_fail@plt+0x2dec>
   14198:	cmn	r5, #-2147483647	; 0x80000001
   1419c:	beq	14304 <__assert_fail@plt+0x2dec>
   141a0:	movw	r4, #20848	; 0x5170
   141a4:	movt	r4, #3
   141a8:	ldr	r6, [r4]
   141ac:	str	r0, [sp, #28]
   141b0:	ldr	r0, [r0]
   141b4:	str	r0, [sp, #24]
   141b8:	movw	r8, #20852	; 0x5174
   141bc:	movt	r8, #3
   141c0:	ldr	r1, [r8]
   141c4:	cmp	r1, r5
   141c8:	ble	141d4 <__assert_fail@plt+0x2cbc>
   141cc:	mov	sl, r6
   141d0:	b	14240 <__assert_fail@plt+0x2d28>
   141d4:	str	r1, [fp, #-32]	; 0xffffffe0
   141d8:	mov	r0, #8
   141dc:	str	r0, [sp]
   141e0:	movw	r9, #20856	; 0x5178
   141e4:	movt	r9, #3
   141e8:	subs	r0, r6, r9
   141ec:	movne	r0, r6
   141f0:	sub	r1, r5, r1
   141f4:	add	r2, r1, #1
   141f8:	sub	r1, fp, #32
   141fc:	mvn	r3, #-2147483648	; 0x80000000
   14200:	bl	21cbc <__assert_fail@plt+0x107a4>
   14204:	mov	sl, r0
   14208:	str	r0, [r4]
   1420c:	cmp	r6, r9
   14210:	bne	1421c <__assert_fail@plt+0x2d04>
   14214:	ldrd	r0, [r9]
   14218:	stm	sl, {r0, r1}
   1421c:	ldr	r1, [r8]
   14220:	add	r0, sl, r1, lsl #3
   14224:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14228:	sub	r1, r2, r1
   1422c:	lsl	r2, r1, #3
   14230:	mov	r1, #0
   14234:	bl	11428 <memset@plt>
   14238:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1423c:	str	r0, [r8]
   14240:	mov	r9, sl
   14244:	ldr	r6, [r9, r5, lsl #3]!
   14248:	ldr	r4, [r9, #4]!
   1424c:	ldm	r7, {r0, r1}
   14250:	ldr	r2, [r7, #40]	; 0x28
   14254:	ldr	r3, [r7, #44]	; 0x2c
   14258:	orr	r8, r1, #1
   1425c:	add	r1, r7, #8
   14260:	stm	sp, {r0, r8}
   14264:	str	r1, [sp, #20]
   14268:	add	r0, sp, #8
   1426c:	stm	r0, {r1, r2, r3}
   14270:	mov	r0, r4
   14274:	mov	r1, r6
   14278:	ldr	r2, [sp, #32]
   1427c:	ldr	r3, [sp, #36]	; 0x24
   14280:	bl	1301c <__assert_fail@plt+0x1b04>
   14284:	cmp	r6, r0
   14288:	bhi	142ec <__assert_fail@plt+0x2dd4>
   1428c:	add	r6, r0, #1
   14290:	str	r6, [sl, r5, lsl #3]
   14294:	movw	r0, #21960	; 0x55c8
   14298:	movt	r0, #3
   1429c:	cmp	r4, r0
   142a0:	beq	142ac <__assert_fail@plt+0x2d94>
   142a4:	mov	r0, r4
   142a8:	bl	22b58 <__assert_fail@plt+0x11640>
   142ac:	mov	r0, r6
   142b0:	bl	21be0 <__assert_fail@plt+0x106c8>
   142b4:	mov	r4, r0
   142b8:	str	r0, [r9]
   142bc:	ldr	r0, [r7]
   142c0:	ldr	r1, [r7, #40]	; 0x28
   142c4:	ldr	r2, [r7, #44]	; 0x2c
   142c8:	stm	sp, {r0, r8}
   142cc:	ldr	r0, [sp, #20]
   142d0:	add	r3, sp, #8
   142d4:	stm	r3, {r0, r1, r2}
   142d8:	mov	r0, r4
   142dc:	mov	r1, r6
   142e0:	ldr	r2, [sp, #32]
   142e4:	ldr	r3, [sp, #36]	; 0x24
   142e8:	bl	1301c <__assert_fail@plt+0x1b04>
   142ec:	ldr	r0, [sp, #28]
   142f0:	ldr	r1, [sp, #24]
   142f4:	str	r1, [r0]
   142f8:	mov	r0, r4
   142fc:	sub	sp, fp, #28
   14300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14304:	bl	114f4 <abort@plt>
   14308:	movw	r3, #21912	; 0x5598
   1430c:	movt	r3, #3
   14310:	b	14170 <__assert_fail@plt+0x2c58>
   14314:	mov	r1, r0
   14318:	mov	r0, #0
   1431c:	b	14160 <__assert_fail@plt+0x2c48>
   14320:	mov	r2, r1
   14324:	mov	r1, r0
   14328:	mov	r0, #0
   1432c:	b	14308 <__assert_fail@plt+0x2df0>
   14330:	push	{r4, r5, r6, sl, fp, lr}
   14334:	add	fp, sp, #16
   14338:	sub	sp, sp, #48	; 0x30
   1433c:	mov	r4, r2
   14340:	mov	r5, r0
   14344:	mov	r6, sp
   14348:	mov	r0, r6
   1434c:	bl	1436c <__assert_fail@plt+0x2e54>
   14350:	mov	r0, r5
   14354:	mov	r1, r4
   14358:	mvn	r2, #0
   1435c:	mov	r3, r6
   14360:	bl	14170 <__assert_fail@plt+0x2c58>
   14364:	sub	sp, fp, #16
   14368:	pop	{r4, r5, r6, sl, fp, pc}
   1436c:	push	{fp, lr}
   14370:	mov	fp, sp
   14374:	vmov.i32	q8, #0	; 0x00000000
   14378:	mov	r2, #32
   1437c:	mov	r3, r0
   14380:	vst1.32	{d16-d17}, [r3], r2
   14384:	vst1.32	{d16-d17}, [r3]
   14388:	add	r2, r0, #16
   1438c:	vst1.32	{d16-d17}, [r2]
   14390:	cmp	r1, #10
   14394:	strne	r1, [r0]
   14398:	popne	{fp, pc}
   1439c:	bl	114f4 <abort@plt>
   143a0:	push	{r4, r5, r6, r7, fp, lr}
   143a4:	add	fp, sp, #16
   143a8:	sub	sp, sp, #48	; 0x30
   143ac:	mov	r4, r3
   143b0:	mov	r5, r2
   143b4:	mov	r6, r0
   143b8:	mov	r7, sp
   143bc:	mov	r0, r7
   143c0:	bl	1436c <__assert_fail@plt+0x2e54>
   143c4:	mov	r0, r6
   143c8:	mov	r1, r5
   143cc:	mov	r2, r4
   143d0:	mov	r3, r7
   143d4:	bl	14170 <__assert_fail@plt+0x2c58>
   143d8:	sub	sp, fp, #16
   143dc:	pop	{r4, r5, r6, r7, fp, pc}
   143e0:	mov	r2, r1
   143e4:	mov	r1, r0
   143e8:	mov	r0, #0
   143ec:	b	14330 <__assert_fail@plt+0x2e18>
   143f0:	mov	r3, r2
   143f4:	mov	r2, r1
   143f8:	mov	r1, r0
   143fc:	mov	r0, #0
   14400:	b	143a0 <__assert_fail@plt+0x2e88>
   14404:	push	{r4, r5, r6, sl, fp, lr}
   14408:	add	fp, sp, #16
   1440c:	sub	sp, sp, #48	; 0x30
   14410:	mov	r4, r1
   14414:	mov	r5, r0
   14418:	movw	r0, #21912	; 0x5598
   1441c:	movt	r0, #3
   14420:	add	r1, r0, #16
   14424:	mov	r3, #32
   14428:	vld1.64	{d16-d17}, [r0], r3
   1442c:	vld1.64	{d18-d19}, [r1]
   14430:	mov	r6, sp
   14434:	add	r1, r6, #16
   14438:	vld1.64	{d20-d21}, [r0]
   1443c:	vst1.64	{d18-d19}, [r1]
   14440:	mov	r0, r6
   14444:	vst1.64	{d16-d17}, [r0], r3
   14448:	vst1.64	{d20-d21}, [r0]
   1444c:	mov	r0, r6
   14450:	mov	r1, r2
   14454:	mov	r2, #1
   14458:	bl	12f10 <__assert_fail@plt+0x19f8>
   1445c:	mov	r0, #0
   14460:	mov	r1, r5
   14464:	mov	r2, r4
   14468:	mov	r3, r6
   1446c:	bl	14170 <__assert_fail@plt+0x2c58>
   14470:	sub	sp, fp, #16
   14474:	pop	{r4, r5, r6, sl, fp, pc}
   14478:	mov	r2, r1
   1447c:	mvn	r1, #0
   14480:	b	14404 <__assert_fail@plt+0x2eec>
   14484:	mov	r1, #58	; 0x3a
   14488:	b	14478 <__assert_fail@plt+0x2f60>
   1448c:	mov	r2, #58	; 0x3a
   14490:	b	14404 <__assert_fail@plt+0x2eec>
   14494:	push	{r4, r5, r6, sl, fp, lr}
   14498:	add	fp, sp, #16
   1449c:	sub	sp, sp, #48	; 0x30
   144a0:	mov	r4, r2
   144a4:	mov	r5, r0
   144a8:	mov	r6, sp
   144ac:	mov	r0, r6
   144b0:	bl	1436c <__assert_fail@plt+0x2e54>
   144b4:	mov	r0, r6
   144b8:	mov	r1, #58	; 0x3a
   144bc:	mov	r2, #1
   144c0:	bl	12f10 <__assert_fail@plt+0x19f8>
   144c4:	mov	r0, r5
   144c8:	mov	r1, r4
   144cc:	mvn	r2, #0
   144d0:	mov	r3, r6
   144d4:	bl	14170 <__assert_fail@plt+0x2c58>
   144d8:	sub	sp, fp, #16
   144dc:	pop	{r4, r5, r6, sl, fp, pc}
   144e0:	push	{fp, lr}
   144e4:	mov	fp, sp
   144e8:	sub	sp, sp, #8
   144ec:	mvn	ip, #0
   144f0:	str	ip, [sp]
   144f4:	bl	14500 <__assert_fail@plt+0x2fe8>
   144f8:	mov	sp, fp
   144fc:	pop	{fp, pc}
   14500:	push	{r4, r5, r6, r7, fp, lr}
   14504:	add	fp, sp, #16
   14508:	sub	sp, sp, #48	; 0x30
   1450c:	mov	r7, r3
   14510:	mov	r5, r0
   14514:	movw	r0, #21912	; 0x5598
   14518:	movt	r0, #3
   1451c:	add	r3, r0, #16
   14520:	mov	r4, #32
   14524:	vld1.64	{d16-d17}, [r0], r4
   14528:	vld1.64	{d18-d19}, [r3]
   1452c:	mov	r6, sp
   14530:	add	r3, r6, #16
   14534:	vld1.64	{d20-d21}, [r0]
   14538:	vst1.64	{d18-d19}, [r3]
   1453c:	mov	r0, r6
   14540:	vst1.64	{d16-d17}, [r0], r4
   14544:	vst1.64	{d20-d21}, [r0]
   14548:	mov	r0, r6
   1454c:	bl	12f68 <__assert_fail@plt+0x1a50>
   14550:	ldr	r2, [fp, #8]
   14554:	mov	r0, r5
   14558:	mov	r1, r7
   1455c:	mov	r3, r6
   14560:	bl	14170 <__assert_fail@plt+0x2c58>
   14564:	sub	sp, fp, #16
   14568:	pop	{r4, r5, r6, r7, fp, pc}
   1456c:	mov	r3, r2
   14570:	mov	r2, r1
   14574:	mov	r1, r0
   14578:	mov	r0, #0
   1457c:	b	144e0 <__assert_fail@plt+0x2fc8>
   14580:	push	{fp, lr}
   14584:	mov	fp, sp
   14588:	sub	sp, sp, #8
   1458c:	mov	ip, r2
   14590:	mov	r2, r1
   14594:	mov	r1, r0
   14598:	str	r3, [sp]
   1459c:	mov	r0, #0
   145a0:	mov	r3, ip
   145a4:	bl	14500 <__assert_fail@plt+0x2fe8>
   145a8:	mov	sp, fp
   145ac:	pop	{fp, pc}
   145b0:	movw	r3, #20864	; 0x5180
   145b4:	movt	r3, #3
   145b8:	b	14170 <__assert_fail@plt+0x2c58>
   145bc:	mov	r2, r1
   145c0:	mov	r1, r0
   145c4:	mov	r0, #0
   145c8:	b	145b0 <__assert_fail@plt+0x3098>
   145cc:	mvn	r2, #0
   145d0:	b	145b0 <__assert_fail@plt+0x3098>
   145d4:	mov	r1, r0
   145d8:	mov	r0, #0
   145dc:	b	145cc <__assert_fail@plt+0x30b4>
   145e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145e4:	add	fp, sp, #24
   145e8:	sub	sp, sp, #16
   145ec:	mov	r4, r1
   145f0:	mov	r5, r0
   145f4:	mov	r7, #0
   145f8:	mov	r0, #0
   145fc:	mov	r1, r5
   14600:	mov	r2, #5
   14604:	bl	11308 <dcgettext@plt>
   14608:	cmp	r0, r5
   1460c:	beq	14618 <__assert_fail@plt+0x3100>
   14610:	sub	sp, fp, #24
   14614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14618:	bl	22bd0 <__assert_fail@plt+0x116b8>
   1461c:	mov	r6, r0
   14620:	mov	r8, #56	; 0x38
   14624:	mov	r0, #45	; 0x2d
   14628:	stm	sp, {r0, r8}
   1462c:	str	r7, [sp, #8]
   14630:	str	r7, [sp, #12]
   14634:	mov	r0, r6
   14638:	mov	r1, #85	; 0x55
   1463c:	mov	r2, #84	; 0x54
   14640:	mov	r3, #70	; 0x46
   14644:	bl	146dc <__assert_fail@plt+0x31c4>
   14648:	cmp	r0, #0
   1464c:	beq	14668 <__assert_fail@plt+0x3150>
   14650:	ldrb	r1, [r5]
   14654:	movw	r2, #15616	; 0x3d00
   14658:	movt	r2, #2
   1465c:	movw	r0, #15620	; 0x3d04
   14660:	movt	r0, #2
   14664:	b	146ac <__assert_fail@plt+0x3194>
   14668:	mov	r0, #48	; 0x30
   1466c:	mov	r1, #51	; 0x33
   14670:	str	r8, [sp]
   14674:	stmib	sp, {r0, r1}
   14678:	str	r0, [sp, #12]
   1467c:	mov	r0, r6
   14680:	mov	r1, #71	; 0x47
   14684:	mov	r2, #66	; 0x42
   14688:	mov	r3, #49	; 0x31
   1468c:	bl	146dc <__assert_fail@plt+0x31c4>
   14690:	cmp	r0, #0
   14694:	beq	146bc <__assert_fail@plt+0x31a4>
   14698:	ldrb	r1, [r5]
   1469c:	movw	r2, #15624	; 0x3d08
   146a0:	movt	r2, #2
   146a4:	movw	r0, #15628	; 0x3d0c
   146a8:	movt	r0, #2
   146ac:	cmp	r1, #96	; 0x60
   146b0:	moveq	r0, r2
   146b4:	sub	sp, fp, #24
   146b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146bc:	movw	r1, #15610	; 0x3cfa
   146c0:	movt	r1, #2
   146c4:	movw	r0, #15614	; 0x3cfe
   146c8:	movt	r0, #2
   146cc:	cmp	r4, #9
   146d0:	moveq	r0, r1
   146d4:	sub	sp, fp, #24
   146d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146dc:	push	{r4, r5, r6, r7, fp, lr}
   146e0:	add	fp, sp, #16
   146e4:	sub	sp, sp, #16
   146e8:	mov	r4, r3
   146ec:	mov	r5, r2
   146f0:	mov	r7, r1
   146f4:	mov	r6, r0
   146f8:	mov	r0, r1
   146fc:	bl	229a0 <__assert_fail@plt+0x11488>
   14700:	ldrb	r1, [r6]
   14704:	cmp	r0, #0
   14708:	andne	r1, r1, #223	; 0xdf
   1470c:	mov	r0, #0
   14710:	cmp	r1, r7
   14714:	bne	1474c <__assert_fail@plt+0x3234>
   14718:	cmp	r7, #0
   1471c:	beq	14754 <__assert_fail@plt+0x323c>
   14720:	ldr	r0, [fp, #20]
   14724:	ldr	r1, [fp, #16]
   14728:	ldr	r2, [fp, #12]
   1472c:	ldr	r3, [fp, #8]
   14730:	str	r2, [sp]
   14734:	str	r1, [sp, #4]
   14738:	str	r0, [sp, #8]
   1473c:	mov	r0, r6
   14740:	mov	r1, r5
   14744:	mov	r2, r4
   14748:	bl	14760 <__assert_fail@plt+0x3248>
   1474c:	sub	sp, fp, #16
   14750:	pop	{r4, r5, r6, r7, fp, pc}
   14754:	mov	r0, #1
   14758:	sub	sp, fp, #16
   1475c:	pop	{r4, r5, r6, r7, fp, pc}
   14760:	push	{r4, r5, r6, r7, fp, lr}
   14764:	add	fp, sp, #16
   14768:	sub	sp, sp, #8
   1476c:	mov	r4, r3
   14770:	mov	r5, r2
   14774:	mov	r7, r1
   14778:	mov	r6, r0
   1477c:	mov	r0, r1
   14780:	bl	229a0 <__assert_fail@plt+0x11488>
   14784:	ldrb	r1, [r6, #1]
   14788:	cmp	r0, #0
   1478c:	andne	r1, r1, #223	; 0xdf
   14790:	mov	r0, #0
   14794:	cmp	r1, r7
   14798:	bne	147c8 <__assert_fail@plt+0x32b0>
   1479c:	cmp	r7, #0
   147a0:	beq	147d0 <__assert_fail@plt+0x32b8>
   147a4:	ldr	r0, [fp, #16]
   147a8:	ldr	r1, [fp, #12]
   147ac:	ldr	r3, [fp, #8]
   147b0:	str	r1, [sp]
   147b4:	str	r0, [sp, #4]
   147b8:	mov	r0, r6
   147bc:	mov	r1, r5
   147c0:	mov	r2, r4
   147c4:	bl	147dc <__assert_fail@plt+0x32c4>
   147c8:	sub	sp, fp, #16
   147cc:	pop	{r4, r5, r6, r7, fp, pc}
   147d0:	mov	r0, #1
   147d4:	sub	sp, fp, #16
   147d8:	pop	{r4, r5, r6, r7, fp, pc}
   147dc:	push	{r4, r5, r6, r7, fp, lr}
   147e0:	add	fp, sp, #16
   147e4:	sub	sp, sp, #8
   147e8:	mov	r4, r3
   147ec:	mov	r5, r2
   147f0:	mov	r7, r1
   147f4:	mov	r6, r0
   147f8:	mov	r0, r1
   147fc:	bl	229a0 <__assert_fail@plt+0x11488>
   14800:	ldrb	r1, [r6, #2]
   14804:	cmp	r0, #0
   14808:	andne	r1, r1, #223	; 0xdf
   1480c:	mov	r0, #0
   14810:	cmp	r1, r7
   14814:	bne	1483c <__assert_fail@plt+0x3324>
   14818:	cmp	r7, #0
   1481c:	beq	14844 <__assert_fail@plt+0x332c>
   14820:	ldr	r0, [fp, #12]
   14824:	ldr	r3, [fp, #8]
   14828:	str	r0, [sp]
   1482c:	mov	r0, r6
   14830:	mov	r1, r5
   14834:	mov	r2, r4
   14838:	bl	14850 <__assert_fail@plt+0x3338>
   1483c:	sub	sp, fp, #16
   14840:	pop	{r4, r5, r6, r7, fp, pc}
   14844:	mov	r0, #1
   14848:	sub	sp, fp, #16
   1484c:	pop	{r4, r5, r6, r7, fp, pc}
   14850:	push	{r4, r5, r6, r7, fp, lr}
   14854:	add	fp, sp, #16
   14858:	mov	r4, r3
   1485c:	mov	r5, r2
   14860:	mov	r7, r1
   14864:	mov	r6, r0
   14868:	mov	r0, r1
   1486c:	bl	229a0 <__assert_fail@plt+0x11488>
   14870:	ldrb	r1, [r6, #3]
   14874:	ldr	r3, [fp, #8]
   14878:	cmp	r0, #0
   1487c:	andne	r1, r1, #223	; 0xdf
   14880:	mov	r0, #0
   14884:	cmp	r1, r7
   14888:	bne	148ac <__assert_fail@plt+0x3394>
   1488c:	cmp	r7, #0
   14890:	beq	148a8 <__assert_fail@plt+0x3390>
   14894:	mov	r0, r6
   14898:	mov	r1, r5
   1489c:	mov	r2, r4
   148a0:	pop	{r4, r5, r6, r7, fp, lr}
   148a4:	b	148b0 <__assert_fail@plt+0x3398>
   148a8:	mov	r0, #1
   148ac:	pop	{r4, r5, r6, r7, fp, pc}
   148b0:	push	{r4, r5, r6, r7, fp, lr}
   148b4:	add	fp, sp, #16
   148b8:	mov	r4, r3
   148bc:	mov	r5, r2
   148c0:	mov	r7, r1
   148c4:	mov	r6, r0
   148c8:	mov	r0, r1
   148cc:	bl	229a0 <__assert_fail@plt+0x11488>
   148d0:	ldrb	r1, [r6, #4]
   148d4:	cmp	r0, #0
   148d8:	andne	r1, r1, #223	; 0xdf
   148dc:	mov	r0, #0
   148e0:	cmp	r1, r7
   148e4:	bne	14908 <__assert_fail@plt+0x33f0>
   148e8:	cmp	r7, #0
   148ec:	beq	14904 <__assert_fail@plt+0x33ec>
   148f0:	mov	r0, r6
   148f4:	mov	r1, r5
   148f8:	mov	r2, r4
   148fc:	pop	{r4, r5, r6, r7, fp, lr}
   14900:	b	1490c <__assert_fail@plt+0x33f4>
   14904:	mov	r0, #1
   14908:	pop	{r4, r5, r6, r7, fp, pc}
   1490c:	push	{r4, r5, r6, sl, fp, lr}
   14910:	add	fp, sp, #16
   14914:	mov	r4, r2
   14918:	mov	r6, r1
   1491c:	mov	r5, r0
   14920:	mov	r0, r1
   14924:	bl	229a0 <__assert_fail@plt+0x11488>
   14928:	ldrb	r1, [r5, #5]
   1492c:	cmp	r0, #0
   14930:	andne	r1, r1, #223	; 0xdf
   14934:	mov	r0, #0
   14938:	cmp	r1, r6
   1493c:	bne	1495c <__assert_fail@plt+0x3444>
   14940:	cmp	r6, #0
   14944:	beq	14958 <__assert_fail@plt+0x3440>
   14948:	mov	r0, r5
   1494c:	mov	r1, r4
   14950:	pop	{r4, r5, r6, sl, fp, lr}
   14954:	b	14960 <__assert_fail@plt+0x3448>
   14958:	mov	r0, #1
   1495c:	pop	{r4, r5, r6, sl, fp, pc}
   14960:	push	{r4, r5, fp, lr}
   14964:	add	fp, sp, #8
   14968:	mov	r5, r1
   1496c:	mov	r4, r0
   14970:	mov	r0, r1
   14974:	bl	229a0 <__assert_fail@plt+0x11488>
   14978:	ldrb	r1, [r4, #6]
   1497c:	cmp	r0, #0
   14980:	andne	r1, r1, #223	; 0xdf
   14984:	mov	r0, #0
   14988:	cmp	r1, r5
   1498c:	popne	{r4, r5, fp, pc}
   14990:	cmp	r5, #0
   14994:	beq	149a4 <__assert_fail@plt+0x348c>
   14998:	mov	r0, r4
   1499c:	pop	{r4, r5, fp, lr}
   149a0:	b	149ac <__assert_fail@plt+0x3494>
   149a4:	mov	r0, #1
   149a8:	pop	{r4, r5, fp, pc}
   149ac:	push	{r4, sl, fp, lr}
   149b0:	add	fp, sp, #8
   149b4:	mov	r4, r0
   149b8:	mov	r0, #0
   149bc:	bl	229a0 <__assert_fail@plt+0x11488>
   149c0:	ldrb	r1, [r4, #7]
   149c4:	cmp	r0, #0
   149c8:	beq	149dc <__assert_fail@plt+0x34c4>
   149cc:	tst	r1, #223	; 0xdf
   149d0:	bne	149e4 <__assert_fail@plt+0x34cc>
   149d4:	mov	r0, #1
   149d8:	pop	{r4, sl, fp, pc}
   149dc:	cmp	r1, #0
   149e0:	beq	149d4 <__assert_fail@plt+0x34bc>
   149e4:	mov	r0, #0
   149e8:	pop	{r4, sl, fp, pc}
   149ec:	push	{fp, lr}
   149f0:	mov	fp, sp
   149f4:	mov	ip, r1
   149f8:	mov	lr, r0
   149fc:	movw	r0, #22216	; 0x56c8
   14a00:	movt	r0, #3
   14a04:	ldr	r3, [r0]
   14a08:	mov	r0, #16
   14a0c:	and	r0, r0, r3, lsr #21
   14a10:	ldrb	r1, [r2, #28]
   14a14:	and	r1, r1, #111	; 0x6f
   14a18:	orr	r0, r1, r0
   14a1c:	orr	r0, r0, #128	; 0x80
   14a20:	strb	r0, [r2, #28]
   14a24:	mov	r0, r2
   14a28:	mov	r1, lr
   14a2c:	mov	r2, ip
   14a30:	bl	14a6c <__assert_fail@plt+0x3554>
   14a34:	cmp	r0, #0
   14a38:	beq	14a64 <__assert_fail@plt+0x354c>
   14a3c:	movw	r1, #16104	; 0x3ee8
   14a40:	movt	r1, #2
   14a44:	ldr	r0, [r1, r0, lsl #2]
   14a48:	movw	r1, #15720	; 0x3d68
   14a4c:	movt	r1, #2
   14a50:	add	r1, r1, r0
   14a54:	mov	r0, #0
   14a58:	mov	r2, #5
   14a5c:	pop	{fp, lr}
   14a60:	b	11308 <dcgettext@plt>
   14a64:	mov	r0, #0
   14a68:	pop	{fp, pc}
   14a6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14a70:	add	fp, sp, #24
   14a74:	sub	sp, sp, #96	; 0x60
   14a78:	mov	r6, r3
   14a7c:	mov	r7, r2
   14a80:	mov	r8, r1
   14a84:	mov	r4, r0
   14a88:	mov	r0, #0
   14a8c:	str	r0, [fp, #-28]	; 0xffffffe4
   14a90:	str	r0, [r4, #24]
   14a94:	str	r0, [r4, #8]
   14a98:	str	r3, [r4, #12]
   14a9c:	ldrb	r0, [r4, #28]
   14aa0:	and	r0, r0, #144	; 0x90
   14aa4:	strb	r0, [r4, #28]
   14aa8:	ldr	r5, [r4]
   14aac:	ldr	r0, [r4, #4]
   14ab0:	cmp	r0, #159	; 0x9f
   14ab4:	bls	14c18 <__assert_fail@plt+0x3700>
   14ab8:	mov	r0, #160	; 0xa0
   14abc:	str	r0, [r4, #8]
   14ac0:	mov	r0, r5
   14ac4:	mov	r1, r7
   14ac8:	bl	1615c <__assert_fail@plt+0x4c44>
   14acc:	str	r0, [fp, #-28]	; 0xffffffe4
   14ad0:	cmp	r0, #0
   14ad4:	bne	14b08 <__assert_fail@plt+0x35f0>
   14ad8:	movw	r1, #0
   14adc:	movt	r1, #0
   14ae0:	movw	r2, #0
   14ae4:	movt	r2, #0
   14ae8:	orrs	r1, r2, r1
   14aec:	beq	14b08 <__assert_fail@plt+0x35f0>
   14af0:	add	r0, r5, #136	; 0x88
   14af4:	mov	r1, #0
   14af8:	bl	112c0 <pthread_mutex_init@plt>
   14afc:	cmp	r0, #0
   14b00:	bne	14c3c <__assert_fail@plt+0x3724>
   14b04:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14b08:	cmp	r0, #0
   14b0c:	bne	14c00 <__assert_fail@plt+0x36e8>
   14b10:	ldr	r3, [r4, #20]
   14b14:	str	r5, [sp, #4]
   14b18:	ubfx	r0, r6, #22, #1
   14b1c:	str	r0, [sp]
   14b20:	add	r0, sp, #8
   14b24:	mov	r1, r8
   14b28:	mov	r2, r7
   14b2c:	bl	16318 <__assert_fail@plt+0x4e00>
   14b30:	str	r0, [fp, #-28]	; 0xffffffe4
   14b34:	cmp	r0, #0
   14b38:	bne	14bd0 <__assert_fail@plt+0x36b8>
   14b3c:	mov	r0, #0
   14b40:	str	r0, [r4, #24]
   14b44:	add	r0, sp, #8
   14b48:	sub	r3, fp, #28
   14b4c:	mov	r1, r4
   14b50:	mov	r2, r6
   14b54:	bl	164ec <__assert_fail@plt+0x4fd4>
   14b58:	str	r0, [r5, #52]	; 0x34
   14b5c:	cmp	r0, #0
   14b60:	beq	14bd0 <__assert_fail@plt+0x36b8>
   14b64:	mov	r0, r4
   14b68:	bl	165c0 <__assert_fail@plt+0x50a8>
   14b6c:	str	r0, [fp, #-28]	; 0xffffffe4
   14b70:	cmp	r0, #0
   14b74:	bne	14bd0 <__assert_fail@plt+0x36b8>
   14b78:	ands	r0, r6, #4194304	; 0x400000
   14b7c:	bne	14b9c <__assert_fail@plt+0x3684>
   14b80:	ldrb	r0, [r5, #88]	; 0x58
   14b84:	ands	r0, r0, #4
   14b88:	beq	14b9c <__assert_fail@plt+0x3684>
   14b8c:	ldr	r0, [r4, #20]
   14b90:	cmp	r0, #0
   14b94:	moveq	r0, r5
   14b98:	bleq	167dc <__assert_fail@plt+0x52c4>
   14b9c:	mov	r0, r5
   14ba0:	bl	16980 <__assert_fail@plt+0x5468>
   14ba4:	str	r0, [fp, #-28]	; 0xffffffe4
   14ba8:	mov	r0, r4
   14bac:	bl	16468 <__assert_fail@plt+0x4f50>
   14bb0:	add	r0, sp, #8
   14bb4:	bl	164b8 <__assert_fail@plt+0x4fa0>
   14bb8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14bbc:	cmp	r0, #0
   14bc0:	bne	14be0 <__assert_fail@plt+0x36c8>
   14bc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14bc8:	sub	sp, fp, #24
   14bcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14bd0:	mov	r0, r4
   14bd4:	bl	16468 <__assert_fail@plt+0x4f50>
   14bd8:	add	r0, sp, #8
   14bdc:	bl	164b8 <__assert_fail@plt+0x4fa0>
   14be0:	movw	r0, #0
   14be4:	movt	r0, #0
   14be8:	movw	r1, #0
   14bec:	movt	r1, #0
   14bf0:	orrs	r0, r1, r0
   14bf4:	beq	14c00 <__assert_fail@plt+0x36e8>
   14bf8:	add	r0, r5, #136	; 0x88
   14bfc:	bl	11260 <pthread_mutex_destroy@plt>
   14c00:	mov	r0, r5
   14c04:	bl	15270 <__assert_fail@plt+0x3d58>
   14c08:	mov	r0, #0
   14c0c:	str	r0, [r4]
   14c10:	str	r0, [r4, #4]
   14c14:	b	14bc4 <__assert_fail@plt+0x36ac>
   14c18:	mov	r9, #160	; 0xa0
   14c1c:	mov	r0, r5
   14c20:	mov	r1, #160	; 0xa0
   14c24:	bl	22698 <__assert_fail@plt+0x11180>
   14c28:	cmp	r0, #0
   14c2c:	beq	14c48 <__assert_fail@plt+0x3730>
   14c30:	mov	r5, r0
   14c34:	stm	r4, {r0, r9}
   14c38:	b	14ab8 <__assert_fail@plt+0x35a0>
   14c3c:	mov	r0, #12
   14c40:	str	r0, [fp, #-28]	; 0xffffffe4
   14c44:	b	14c00 <__assert_fail@plt+0x36e8>
   14c48:	mov	r0, #12
   14c4c:	sub	sp, fp, #24
   14c50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c54:	movw	r2, #22216	; 0x56c8
   14c58:	movt	r2, #3
   14c5c:	ldr	r1, [r2]
   14c60:	str	r0, [r2]
   14c64:	mov	r0, r1
   14c68:	bx	lr
   14c6c:	push	{r4, r5, r6, sl, fp, lr}
   14c70:	add	fp, sp, #16
   14c74:	mov	r4, r0
   14c78:	ldr	r6, [r0]
   14c7c:	ldr	r5, [r0, #16]
   14c80:	mov	r0, r5
   14c84:	mov	r1, #0
   14c88:	mov	r2, #256	; 0x100
   14c8c:	bl	11428 <memset@plt>
   14c90:	ldr	r1, [r6, #36]	; 0x24
   14c94:	mov	r0, r4
   14c98:	mov	r2, r5
   14c9c:	bl	14cfc <__assert_fail@plt+0x37e4>
   14ca0:	ldr	r0, [r6, #36]	; 0x24
   14ca4:	ldr	r1, [r6, #40]	; 0x28
   14ca8:	cmp	r0, r1
   14cac:	movne	r0, r4
   14cb0:	movne	r2, r5
   14cb4:	blne	14cfc <__assert_fail@plt+0x37e4>
   14cb8:	ldr	r0, [r6, #36]	; 0x24
   14cbc:	ldr	r1, [r6, #44]	; 0x2c
   14cc0:	cmp	r0, r1
   14cc4:	movne	r0, r4
   14cc8:	movne	r2, r5
   14ccc:	blne	14cfc <__assert_fail@plt+0x37e4>
   14cd0:	ldr	r0, [r6, #36]	; 0x24
   14cd4:	ldr	r1, [r6, #48]	; 0x30
   14cd8:	cmp	r0, r1
   14cdc:	movne	r0, r4
   14ce0:	movne	r2, r5
   14ce4:	blne	14cfc <__assert_fail@plt+0x37e4>
   14ce8:	ldrb	r0, [r4, #28]
   14cec:	orr	r0, r0, #8
   14cf0:	strb	r0, [r4, #28]
   14cf4:	mov	r0, #0
   14cf8:	pop	{r4, r5, r6, sl, fp, pc}
   14cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d00:	add	fp, sp, #28
   14d04:	sub	sp, sp, #308	; 0x134
   14d08:	mov	r5, r2
   14d0c:	str	r0, [sp, #20]
   14d10:	ldr	r8, [r0]
   14d14:	ldr	r0, [r8, #92]	; 0x5c
   14d18:	mov	r9, #0
   14d1c:	cmp	r0, #1
   14d20:	bne	14d30 <__assert_fail@plt+0x3818>
   14d24:	ldr	r0, [sp, #20]
   14d28:	ldrb	r0, [r0, #14]
   14d2c:	ubfx	r9, r0, #6, #1
   14d30:	ldr	r0, [r1, #8]
   14d34:	cmp	r0, #1
   14d38:	blt	15078 <__assert_fail@plt+0x3b60>
   14d3c:	add	r0, sp, #32
   14d40:	add	r0, r0, #1
   14d44:	str	r0, [sp, #4]
   14d48:	mov	r7, #1
   14d4c:	movw	r0, #1
   14d50:	movt	r0, #32
   14d54:	add	r0, r0, #254	; 0xfe
   14d58:	str	r0, [sp, #8]
   14d5c:	mov	r2, #0
   14d60:	str	r1, [sp, #12]
   14d64:	str	r8, [sp, #24]
   14d68:	b	14d84 <__assert_fail@plt+0x386c>
   14d6c:	ldr	r1, [sp, #12]
   14d70:	ldr	r0, [r1, #8]
   14d74:	ldr	r2, [sp, #16]
   14d78:	add	r2, r2, #1
   14d7c:	cmp	r2, r0
   14d80:	bge	15078 <__assert_fail@plt+0x3b60>
   14d84:	ldr	r0, [r1, #12]
   14d88:	str	r2, [sp, #16]
   14d8c:	ldr	sl, [r0, r2, lsl #2]
   14d90:	ldr	r0, [r8]
   14d94:	add	r1, r0, sl, lsl #3
   14d98:	ldrb	r4, [r1, #4]
   14d9c:	cmp	r4, #1
   14da0:	beq	14e1c <__assert_fail@plt+0x3904>
   14da4:	cmp	r4, #6
   14da8:	beq	14f0c <__assert_fail@plt+0x39f4>
   14dac:	cmp	r4, #3
   14db0:	bne	14f8c <__assert_fail@plt+0x3a74>
   14db4:	mov	r4, #0
   14db8:	mov	r6, #0
   14dbc:	str	sl, [sp, #28]
   14dc0:	b	14dd8 <__assert_fail@plt+0x38c0>
   14dc4:	add	r6, r6, #1
   14dc8:	cmp	r6, #8
   14dcc:	ldr	r8, [sp, #24]
   14dd0:	ldr	sl, [sp, #28]
   14dd4:	beq	14d6c <__assert_fail@plt+0x3854>
   14dd8:	ldr	r0, [r8]
   14ddc:	ldr	r0, [r0, sl, lsl #3]
   14de0:	ldr	r8, [r0, r6, lsl #2]
   14de4:	mov	sl, #0
   14de8:	b	14dfc <__assert_fail@plt+0x38e4>
   14dec:	add	r4, r4, #1
   14df0:	add	sl, sl, #1
   14df4:	cmp	sl, #32
   14df8:	beq	14dc4 <__assert_fail@plt+0x38ac>
   14dfc:	tst	r8, r7, lsl sl
   14e00:	strbne	r7, [r5, r4]
   14e04:	cmpne	r9, #0
   14e08:	beq	14dec <__assert_fail@plt+0x38d4>
   14e0c:	mov	r0, r4
   14e10:	bl	112b4 <tolower@plt>
   14e14:	strb	r7, [r5, r0]
   14e18:	b	14dec <__assert_fail@plt+0x38d4>
   14e1c:	ldrb	r0, [r0, sl, lsl #3]
   14e20:	strb	r7, [r5, r0]
   14e24:	cmp	r9, #0
   14e28:	beq	14e34 <__assert_fail@plt+0x391c>
   14e2c:	bl	112b4 <tolower@plt>
   14e30:	strb	r7, [r5, r0]
   14e34:	ldr	r0, [sp, #20]
   14e38:	ldrb	r0, [r0, #14]
   14e3c:	tst	r0, #64	; 0x40
   14e40:	beq	14d6c <__assert_fail@plt+0x3854>
   14e44:	ldr	r0, [r8, #92]	; 0x5c
   14e48:	cmp	r0, #2
   14e4c:	blt	14d6c <__assert_fail@plt+0x3854>
   14e50:	ldr	r0, [r8]
   14e54:	ldrb	r0, [r0, sl, lsl #3]
   14e58:	strb	r0, [sp, #32]
   14e5c:	ldr	r0, [r8, #8]
   14e60:	add	r1, sl, #1
   14e64:	cmp	r1, r0
   14e68:	ldr	r0, [sp, #4]
   14e6c:	mov	r6, #0
   14e70:	movw	r4, #1
   14e74:	movt	r4, #32
   14e78:	bcs	14ebc <__assert_fail@plt+0x39a4>
   14e7c:	ldr	r0, [sp, #4]
   14e80:	ldr	r1, [r8]
   14e84:	add	r1, r1, sl, lsl #3
   14e88:	ldr	r2, [r1, #12]
   14e8c:	ldr	r3, [sp, #8]
   14e90:	and	r2, r2, r3
   14e94:	cmp	r2, r4
   14e98:	bne	14ebc <__assert_fail@plt+0x39a4>
   14e9c:	ldrb	r1, [r1, #8]
   14ea0:	strb	r1, [r0], #1
   14ea4:	add	r1, sl, #1
   14ea8:	ldr	r2, [r8, #8]
   14eac:	add	r3, sl, #2
   14eb0:	cmp	r3, r2
   14eb4:	mov	sl, r1
   14eb8:	bcc	14e80 <__assert_fail@plt+0x3968>
   14ebc:	str	r6, [fp, #-44]	; 0xffffffd4
   14ec0:	str	r6, [fp, #-48]	; 0xffffffd0
   14ec4:	add	r1, sp, #32
   14ec8:	sub	r4, r0, r1
   14ecc:	sub	r0, fp, #36	; 0x24
   14ed0:	mov	r2, r4
   14ed4:	sub	r3, fp, #48	; 0x30
   14ed8:	bl	22c08 <__assert_fail@plt+0x116f0>
   14edc:	cmp	r0, r4
   14ee0:	bne	14d6c <__assert_fail@plt+0x3854>
   14ee4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14ee8:	bl	112cc <towlower@plt>
   14eec:	mov	r1, r0
   14ef0:	add	r0, sp, #32
   14ef4:	sub	r2, fp, #48	; 0x30
   14ef8:	bl	11230 <wcrtomb@plt>
   14efc:	cmn	r0, #1
   14f00:	ldrbne	r0, [sp, #32]
   14f04:	strbne	r7, [r5, r0]
   14f08:	b	14d6c <__assert_fail@plt+0x3854>
   14f0c:	ldr	r4, [r0, sl, lsl #3]
   14f10:	ldr	r0, [r8, #92]	; 0x5c
   14f14:	cmp	r0, #2
   14f18:	blt	14fa4 <__assert_fail@plt+0x3a8c>
   14f1c:	ldr	r0, [r4, #36]	; 0x24
   14f20:	cmp	r0, #0
   14f24:	bne	14f40 <__assert_fail@plt+0x3a28>
   14f28:	ldrb	r0, [r4, #16]
   14f2c:	tst	r0, #1
   14f30:	bne	14f40 <__assert_fail@plt+0x3a28>
   14f34:	ldr	r0, [r4, #32]
   14f38:	cmp	r0, #0
   14f3c:	beq	14fa4 <__assert_fail@plt+0x3a8c>
   14f40:	mov	r4, #0
   14f44:	strb	r4, [fp, #-48]	; 0xffffffd0
   14f48:	str	r4, [sp, #36]	; 0x24
   14f4c:	str	r4, [sp, #32]
   14f50:	mov	r0, #0
   14f54:	sub	r1, fp, #48	; 0x30
   14f58:	mov	r2, #1
   14f5c:	add	r3, sp, #32
   14f60:	bl	22c08 <__assert_fail@plt+0x116f0>
   14f64:	cmn	r0, #2
   14f68:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   14f6c:	strbeq	r7, [r5, r0]
   14f70:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   14f74:	add	r0, r0, #1
   14f78:	strb	r0, [fp, #-48]	; 0xffffffd0
   14f7c:	uxtb	r1, r0
   14f80:	cmp	r1, r0
   14f84:	beq	14f48 <__assert_fail@plt+0x3a30>
   14f88:	b	14d6c <__assert_fail@plt+0x3854>
   14f8c:	cmp	r4, #7
   14f90:	bhi	14d6c <__assert_fail@plt+0x3854>
   14f94:	mov	r0, #164	; 0xa4
   14f98:	tst	r0, r7, lsl r4
   14f9c:	beq	14d6c <__assert_fail@plt+0x3854>
   14fa0:	b	15050 <__assert_fail@plt+0x3b38>
   14fa4:	ldr	r0, [r4, #20]
   14fa8:	cmp	r0, #1
   14fac:	blt	14d6c <__assert_fail@plt+0x3854>
   14fb0:	mov	r6, #0
   14fb4:	b	14fc8 <__assert_fail@plt+0x3ab0>
   14fb8:	add	r6, r6, #1
   14fbc:	ldr	r0, [r4, #20]
   14fc0:	cmp	r6, r0
   14fc4:	bge	14d6c <__assert_fail@plt+0x3854>
   14fc8:	mov	r0, #0
   14fcc:	str	r0, [fp, #-44]	; 0xffffffd4
   14fd0:	str	r0, [fp, #-48]	; 0xffffffd0
   14fd4:	ldr	r0, [r4]
   14fd8:	ldr	r1, [r0, r6, lsl #2]
   14fdc:	add	r0, sp, #32
   14fe0:	sub	r2, fp, #48	; 0x30
   14fe4:	bl	11230 <wcrtomb@plt>
   14fe8:	cmn	r0, #1
   14fec:	beq	15008 <__assert_fail@plt+0x3af0>
   14ff0:	ldrb	r0, [sp, #32]
   14ff4:	strb	r7, [r5, r0]
   14ff8:	cmp	r9, #0
   14ffc:	beq	15008 <__assert_fail@plt+0x3af0>
   15000:	bl	112b4 <tolower@plt>
   15004:	strb	r7, [r5, r0]
   15008:	ldr	r0, [sp, #20]
   1500c:	ldrb	r0, [r0, #14]
   15010:	tst	r0, #64	; 0x40
   15014:	beq	14fb8 <__assert_fail@plt+0x3aa0>
   15018:	ldr	r0, [r8, #92]	; 0x5c
   1501c:	cmp	r0, #2
   15020:	blt	14fb8 <__assert_fail@plt+0x3aa0>
   15024:	ldr	r0, [r4]
   15028:	ldr	r0, [r0, r6, lsl #2]
   1502c:	bl	112cc <towlower@plt>
   15030:	mov	r1, r0
   15034:	add	r0, sp, #32
   15038:	sub	r2, fp, #48	; 0x30
   1503c:	bl	11230 <wcrtomb@plt>
   15040:	cmn	r0, #1
   15044:	ldrbne	r0, [sp, #32]
   15048:	strbne	r7, [r5, r0]
   1504c:	b	14fb8 <__assert_fail@plt+0x3aa0>
   15050:	mov	r0, r5
   15054:	mov	r1, #1
   15058:	mov	r2, #256	; 0x100
   1505c:	bl	11428 <memset@plt>
   15060:	cmp	r4, #2
   15064:	bne	15078 <__assert_fail@plt+0x3b60>
   15068:	ldr	r1, [sp, #20]
   1506c:	ldrb	r0, [r1, #28]
   15070:	orr	r0, r0, #1
   15074:	strb	r0, [r1, #28]
   15078:	sub	sp, fp, #28
   1507c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15080:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15084:	add	fp, sp, #24
   15088:	mov	r7, r2
   1508c:	mov	r8, r1
   15090:	mov	r4, r0
   15094:	mov	r0, #0
   15098:	str	r0, [r4]
   1509c:	str	r0, [r4, #4]
   150a0:	str	r0, [r4, #8]
   150a4:	mov	r0, #256	; 0x100
   150a8:	bl	22668 <__assert_fail@plt+0x11150>
   150ac:	str	r0, [r4, #16]
   150b0:	cmp	r0, #0
   150b4:	beq	15164 <__assert_fail@plt+0x3c4c>
   150b8:	movw	r0, #45820	; 0xb2fc
   150bc:	movt	r0, #3
   150c0:	tst	r7, #1
   150c4:	movweq	r0, #710	; 0x2c6
   150c8:	movteq	r0, #257	; 0x101
   150cc:	and	r1, r7, #2
   150d0:	orr	r5, r0, r1, lsl #21
   150d4:	tst	r7, #4
   150d8:	bne	150ec <__assert_fail@plt+0x3bd4>
   150dc:	ldrb	r0, [r4, #28]
   150e0:	and	r0, r0, #127	; 0x7f
   150e4:	strb	r0, [r4, #28]
   150e8:	b	15108 <__assert_fail@plt+0x3bf0>
   150ec:	ldrb	r0, [r4, #28]
   150f0:	orr	r0, r0, #128	; 0x80
   150f4:	strb	r0, [r4, #28]
   150f8:	movw	r0, #45758	; 0xb2be
   150fc:	movt	r0, #323	; 0x143
   15100:	and	r0, r5, r0
   15104:	orr	r5, r0, #256	; 0x100
   15108:	mov	r6, #0
   1510c:	str	r6, [r4, #20]
   15110:	and	r0, r7, #8
   15114:	ldrb	r1, [r4, #28]
   15118:	and	r1, r1, #239	; 0xef
   1511c:	orr	r0, r1, r0, lsl #1
   15120:	strb	r0, [r4, #28]
   15124:	mov	r0, r8
   15128:	bl	113ec <strlen@plt>
   1512c:	mov	r2, r0
   15130:	mov	r0, r4
   15134:	mov	r1, r8
   15138:	mov	r3, r5
   1513c:	bl	14a6c <__assert_fail@plt+0x3554>
   15140:	mov	r5, r0
   15144:	cmp	r0, #16
   15148:	movweq	r5, #8
   1514c:	cmp	r5, #0
   15150:	bne	15170 <__assert_fail@plt+0x3c58>
   15154:	mov	r0, r4
   15158:	bl	14c6c <__assert_fail@plt+0x3754>
   1515c:	mov	r0, r6
   15160:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15164:	mov	r6, #12
   15168:	mov	r0, r6
   1516c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15170:	ldr	r0, [r4, #16]
   15174:	bl	22b58 <__assert_fail@plt+0x11640>
   15178:	str	r6, [r4, #16]
   1517c:	mov	r0, r5
   15180:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15184:	push	{r4, r5, r6, r7, fp, lr}
   15188:	add	fp, sp, #16
   1518c:	cmp	r0, #17
   15190:	bcs	15204 <__assert_fail@plt+0x3cec>
   15194:	mov	r5, r3
   15198:	mov	r4, r2
   1519c:	movw	r1, #16104	; 0x3ee8
   151a0:	movt	r1, #2
   151a4:	ldr	r0, [r1, r0, lsl #2]
   151a8:	movw	r1, #15720	; 0x3d68
   151ac:	movt	r1, #2
   151b0:	add	r1, r1, r0
   151b4:	mov	r0, #0
   151b8:	mov	r2, #5
   151bc:	bl	11308 <dcgettext@plt>
   151c0:	mov	r6, r0
   151c4:	bl	113ec <strlen@plt>
   151c8:	add	r7, r0, #1
   151cc:	cmp	r5, #0
   151d0:	beq	151ec <__assert_fail@plt+0x3cd4>
   151d4:	cmp	r7, r5
   151d8:	mov	r2, r7
   151dc:	bhi	151f4 <__assert_fail@plt+0x3cdc>
   151e0:	mov	r0, r4
   151e4:	mov	r1, r6
   151e8:	bl	112a8 <memcpy@plt>
   151ec:	mov	r0, r7
   151f0:	pop	{r4, r5, r6, r7, fp, pc}
   151f4:	sub	r2, r5, #1
   151f8:	mov	r0, #0
   151fc:	strb	r0, [r4, r2]
   15200:	b	151e0 <__assert_fail@plt+0x3cc8>
   15204:	bl	114f4 <abort@plt>
   15208:	push	{r4, r5, fp, lr}
   1520c:	add	fp, sp, #8
   15210:	mov	r4, r0
   15214:	ldr	r5, [r0]
   15218:	cmp	r5, #0
   1521c:	beq	15248 <__assert_fail@plt+0x3d30>
   15220:	movw	r0, #0
   15224:	movt	r0, #0
   15228:	movw	r1, #0
   1522c:	movt	r1, #0
   15230:	orrs	r0, r1, r0
   15234:	beq	15240 <__assert_fail@plt+0x3d28>
   15238:	add	r0, r5, #136	; 0x88
   1523c:	bl	11260 <pthread_mutex_destroy@plt>
   15240:	mov	r0, r5
   15244:	bl	15270 <__assert_fail@plt+0x3d58>
   15248:	mov	r5, #0
   1524c:	str	r5, [r4]
   15250:	str	r5, [r4, #4]
   15254:	ldr	r0, [r4, #16]
   15258:	bl	22b58 <__assert_fail@plt+0x11640>
   1525c:	str	r5, [r4, #16]
   15260:	ldr	r0, [r4, #20]
   15264:	bl	22b58 <__assert_fail@plt+0x11640>
   15268:	str	r5, [r4, #20]
   1526c:	pop	{r4, r5, fp, pc}
   15270:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15274:	add	fp, sp, #24
   15278:	mov	r8, r0
   1527c:	ldr	r0, [r0]
   15280:	cmp	r0, #0
   15284:	beq	152bc <__assert_fail@plt+0x3da4>
   15288:	ldr	r0, [r8, #8]
   1528c:	cmp	r0, #0
   15290:	beq	152bc <__assert_fail@plt+0x3da4>
   15294:	mov	r5, #0
   15298:	mov	r6, #0
   1529c:	ldr	r0, [r8]
   152a0:	add	r0, r0, r5
   152a4:	bl	16094 <__assert_fail@plt+0x4b7c>
   152a8:	add	r5, r5, #8
   152ac:	add	r6, r6, #1
   152b0:	ldr	r0, [r8, #8]
   152b4:	cmp	r6, r0
   152b8:	bcc	1529c <__assert_fail@plt+0x3d84>
   152bc:	ldr	r0, [r8, #12]
   152c0:	bl	22b58 <__assert_fail@plt+0x11640>
   152c4:	ldr	r0, [r8, #8]
   152c8:	cmp	r0, #0
   152cc:	beq	15330 <__assert_fail@plt+0x3e18>
   152d0:	mov	r5, #0
   152d4:	mov	r6, #8
   152d8:	b	152f0 <__assert_fail@plt+0x3dd8>
   152dc:	add	r6, r6, #12
   152e0:	add	r5, r5, #1
   152e4:	ldr	r0, [r8, #8]
   152e8:	cmp	r5, r0
   152ec:	bcs	15330 <__assert_fail@plt+0x3e18>
   152f0:	ldr	r0, [r8, #24]
   152f4:	cmp	r0, #0
   152f8:	beq	15304 <__assert_fail@plt+0x3dec>
   152fc:	ldr	r0, [r0, r6]
   15300:	bl	22b58 <__assert_fail@plt+0x11640>
   15304:	ldr	r0, [r8, #28]
   15308:	cmp	r0, #0
   1530c:	beq	15318 <__assert_fail@plt+0x3e00>
   15310:	ldr	r0, [r0, r6]
   15314:	bl	22b58 <__assert_fail@plt+0x11640>
   15318:	ldr	r0, [r8, #20]
   1531c:	cmp	r0, #0
   15320:	beq	152dc <__assert_fail@plt+0x3dc4>
   15324:	ldr	r0, [r0, r6]
   15328:	bl	22b58 <__assert_fail@plt+0x11640>
   1532c:	b	152dc <__assert_fail@plt+0x3dc4>
   15330:	ldr	r0, [r8, #20]
   15334:	bl	22b58 <__assert_fail@plt+0x11640>
   15338:	ldr	r0, [r8, #24]
   1533c:	bl	22b58 <__assert_fail@plt+0x11640>
   15340:	ldr	r0, [r8, #28]
   15344:	bl	22b58 <__assert_fail@plt+0x11640>
   15348:	ldr	r0, [r8]
   1534c:	bl	22b58 <__assert_fail@plt+0x11640>
   15350:	ldr	r0, [r8, #32]
   15354:	cmp	r0, #0
   15358:	beq	153bc <__assert_fail@plt+0x3ea4>
   1535c:	mov	r5, #0
   15360:	b	15380 <__assert_fail@plt+0x3e68>
   15364:	ldr	r0, [r7]
   15368:	bl	22b58 <__assert_fail@plt+0x11640>
   1536c:	add	r0, r5, #1
   15370:	ldr	r1, [r8, #68]	; 0x44
   15374:	cmp	r5, r1
   15378:	mov	r5, r0
   1537c:	bcs	153bc <__assert_fail@plt+0x3ea4>
   15380:	ldr	r6, [r8, #32]
   15384:	add	r0, r5, r5, lsl #1
   15388:	ldr	r0, [r6, r0, lsl #2]!
   1538c:	add	r7, r6, #8
   15390:	cmp	r0, #1
   15394:	blt	15364 <__assert_fail@plt+0x3e4c>
   15398:	mov	r4, #0
   1539c:	ldr	r0, [r7]
   153a0:	ldr	r0, [r0, r4, lsl #2]
   153a4:	bl	160c4 <__assert_fail@plt+0x4bac>
   153a8:	add	r4, r4, #1
   153ac:	ldr	r0, [r6]
   153b0:	cmp	r4, r0
   153b4:	blt	1539c <__assert_fail@plt+0x3e84>
   153b8:	b	15364 <__assert_fail@plt+0x3e4c>
   153bc:	ldr	r0, [r8, #32]
   153c0:	bl	22b58 <__assert_fail@plt+0x11640>
   153c4:	ldr	r0, [r8, #60]	; 0x3c
   153c8:	movw	r1, #16172	; 0x3f2c
   153cc:	movt	r1, #2
   153d0:	cmp	r0, r1
   153d4:	beq	153dc <__assert_fail@plt+0x3ec4>
   153d8:	bl	22b58 <__assert_fail@plt+0x11640>
   153dc:	ldr	r0, [r8, #132]	; 0x84
   153e0:	bl	22b58 <__assert_fail@plt+0x11640>
   153e4:	mov	r0, r8
   153e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   153ec:	b	22b58 <__assert_fail@plt+0x11640>
   153f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153f4:	add	fp, sp, #28
   153f8:	sub	sp, sp, #28
   153fc:	mov	r7, #2
   15400:	ldr	sl, [fp, #8]
   15404:	cmp	sl, #7
   15408:	bhi	154dc <__assert_fail@plt+0x3fc4>
   1540c:	mov	r6, r3
   15410:	mov	r9, r2
   15414:	mov	r4, r1
   15418:	mov	r5, r0
   1541c:	ldr	r0, [r0]
   15420:	str	r0, [sp, #24]
   15424:	tst	sl, #4
   15428:	bne	15440 <__assert_fail@plt+0x3f28>
   1542c:	mov	r0, r4
   15430:	bl	113ec <strlen@plt>
   15434:	mov	r7, r0
   15438:	mov	r8, #0
   1543c:	b	15448 <__assert_fail@plt+0x3f30>
   15440:	ldr	r8, [r6]
   15444:	ldr	r7, [r6, #4]
   15448:	movw	r0, #0
   1544c:	movt	r0, #0
   15450:	movw	r1, #0
   15454:	movt	r1, #0
   15458:	orrs	r0, r1, r0
   1545c:	str	r0, [sp, #20]
   15460:	beq	15470 <__assert_fail@plt+0x3f58>
   15464:	ldr	r0, [sp, #24]
   15468:	add	r0, r0, #136	; 0x88
   1546c:	bl	11290 <pthread_mutex_lock@plt>
   15470:	ldrb	r0, [r5, #28]
   15474:	tst	r0, #16
   15478:	bne	1548c <__assert_fail@plt+0x3f74>
   1547c:	str	r7, [sp]
   15480:	stmib	sp, {r7, r9}
   15484:	str	r6, [sp, #12]
   15488:	b	154a0 <__assert_fail@plt+0x3f88>
   1548c:	mov	r0, #0
   15490:	str	r7, [sp]
   15494:	str	r7, [sp, #4]
   15498:	str	r0, [sp, #8]
   1549c:	str	r0, [sp, #12]
   154a0:	str	sl, [sp, #16]
   154a4:	mov	r0, r5
   154a8:	mov	r1, r4
   154ac:	mov	r2, r7
   154b0:	mov	r3, r8
   154b4:	bl	154e8 <__assert_fail@plt+0x3fd0>
   154b8:	mov	r7, r0
   154bc:	ldr	r0, [sp, #20]
   154c0:	cmp	r0, #0
   154c4:	beq	154d4 <__assert_fail@plt+0x3fbc>
   154c8:	ldr	r0, [sp, #24]
   154cc:	add	r0, r0, #136	; 0x88
   154d0:	bl	111f4 <pthread_mutex_unlock@plt>
   154d4:	cmp	r7, #0
   154d8:	movwne	r7, #1
   154dc:	mov	r0, r7
   154e0:	sub	sp, fp, #28
   154e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154ec:	add	fp, sp, #28
   154f0:	sub	sp, sp, #196	; 0xc4
   154f4:	mov	r6, r3
   154f8:	str	r2, [sp, #52]	; 0x34
   154fc:	str	r1, [sp, #40]	; 0x28
   15500:	mov	r4, r0
   15504:	ldr	sl, [r0]
   15508:	add	r0, sp, #56	; 0x38
   1550c:	mov	r7, #0
   15510:	mov	r1, #0
   15514:	mov	r2, #136	; 0x88
   15518:	bl	11428 <memset@plt>
   1551c:	str	sl, [sp, #140]	; 0x8c
   15520:	ldr	r1, [r4, #16]
   15524:	ldr	r0, [fp, #16]
   15528:	ldr	ip, [fp, #8]
   1552c:	cmp	r1, #0
   15530:	mov	r5, #0
   15534:	beq	15550 <__assert_fail@plt+0x4038>
   15538:	ldrb	r2, [r4, #28]
   1553c:	and	r2, r2, #9
   15540:	cmp	r2, #8
   15544:	movne	r1, #0
   15548:	subs	r5, r6, ip
   1554c:	movne	r5, r1
   15550:	str	r6, [sp, #36]	; 0x24
   15554:	ldr	r1, [r4, #8]
   15558:	ldr	r2, [r4, #24]
   1555c:	mvn	r3, r2
   15560:	cmp	r2, r0
   15564:	addcc	r7, r3, r0
   15568:	mov	r8, #1
   1556c:	cmp	r1, #0
   15570:	beq	15a58 <__assert_fail@plt+0x4540>
   15574:	ldr	r1, [sl, #36]	; 0x24
   15578:	cmp	r1, #0
   1557c:	ldrne	r2, [sl, #40]	; 0x28
   15580:	cmpne	r2, #0
   15584:	beq	15a58 <__assert_fail@plt+0x4540>
   15588:	ldr	r3, [sl, #44]	; 0x2c
   1558c:	cmp	r3, #0
   15590:	ldrne	r6, [sl, #48]	; 0x30
   15594:	cmpne	r6, #0
   15598:	beq	15a58 <__assert_fail@plt+0x4540>
   1559c:	ldr	r6, [r4, #20]
   155a0:	ldr	r1, [r1, #8]
   155a4:	cmp	r1, #0
   155a8:	bne	155b8 <__assert_fail@plt+0x40a0>
   155ac:	ldr	r1, [r2, #8]
   155b0:	cmp	r1, #0
   155b4:	beq	15b94 <__assert_fail@plt+0x467c>
   155b8:	mov	r9, ip
   155bc:	ldr	r0, [fp, #16]
   155c0:	subs	r0, r0, r7
   155c4:	str	r0, [sp, #48]	; 0x30
   155c8:	mov	r0, #1
   155cc:	str	r0, [sp, #32]
   155d0:	bne	155e4 <__assert_fail@plt+0x40cc>
   155d4:	ldr	r0, [sl, #76]	; 0x4c
   155d8:	cmp	r0, #0
   155dc:	movwne	r0, #1
   155e0:	str	r0, [sp, #32]
   155e4:	ldr	r0, [sl, #8]
   155e8:	ldr	r1, [r4, #12]
   155ec:	str	sl, [sp, #8]
   155f0:	str	r6, [sp]
   155f4:	ubfx	r1, r1, #22, #1
   155f8:	str	r1, [sp, #4]
   155fc:	add	r3, r0, #1
   15600:	add	r0, sp, #56	; 0x38
   15604:	ldr	r1, [sp, #40]	; 0x28
   15608:	ldr	r2, [sp, #52]	; 0x34
   1560c:	bl	1be10 <__assert_fail@plt+0xa8f8>
   15610:	cmp	r0, #0
   15614:	bne	15c78 <__assert_fail@plt+0x4760>
   15618:	ldr	r1, [fp, #24]
   1561c:	ldr	r0, [fp, #12]
   15620:	str	r0, [sp, #108]	; 0x6c
   15624:	str	r0, [sp, #112]	; 0x70
   15628:	str	r4, [sp, #28]
   1562c:	ldrb	r0, [r4, #28]
   15630:	lsr	r0, r0, #7
   15634:	strb	r0, [sp, #133]	; 0x85
   15638:	ldr	r0, [sl, #76]	; 0x4c
   1563c:	lsl	r2, r0, #1
   15640:	add	r0, sp, #56	; 0x38
   15644:	bl	1bec0 <__assert_fail@plt+0xa9a8>
   15648:	cmp	r0, #0
   1564c:	bne	15c78 <__assert_fail@plt+0x4760>
   15650:	ldr	r0, [sp, #48]	; 0x30
   15654:	cmp	r0, #1
   15658:	bhi	15668 <__assert_fail@plt+0x4150>
   1565c:	ldrb	r0, [sl, #88]	; 0x58
   15660:	tst	r0, #2
   15664:	beq	15690 <__assert_fail@plt+0x4178>
   15668:	mov	r8, #12
   1566c:	ldr	r0, [sp, #92]	; 0x5c
   15670:	cmn	r0, #-1073741822	; 0xc0000002
   15674:	bhi	15a38 <__assert_fail@plt+0x4520>
   15678:	mov	r1, #4
   1567c:	add	r0, r1, r0, lsl #2
   15680:	bl	22668 <__assert_fail@plt+0x11150>
   15684:	str	r0, [sp, #156]	; 0x9c
   15688:	cmp	r0, #0
   1568c:	beq	15a38 <__assert_fail@plt+0x4520>
   15690:	str	r7, [sp, #12]
   15694:	ldr	r7, [sp, #36]	; 0x24
   15698:	str	r7, [fp, #-32]	; 0xffffffe0
   1569c:	mov	r0, #4
   156a0:	ldr	r1, [fp, #24]
   156a4:	tst	r1, #1
   156a8:	mov	r1, #4
   156ac:	movweq	r1, #6
   156b0:	str	r1, [sp, #116]	; 0x74
   156b4:	cmp	r9, r7
   156b8:	mov	r3, #1
   156bc:	mvnlt	r3, #0
   156c0:	mov	r4, r9
   156c4:	movlt	r4, r7
   156c8:	mov	r1, sl
   156cc:	mov	sl, r7
   156d0:	movlt	sl, r9
   156d4:	str	r1, [sp, #44]	; 0x2c
   156d8:	ldr	ip, [r1, #92]	; 0x5c
   156dc:	cmp	r5, #0
   156e0:	beq	15728 <__assert_fail@plt+0x4210>
   156e4:	cmp	ip, #1
   156e8:	ldr	r2, [sp, #52]	; 0x34
   156ec:	beq	1570c <__assert_fail@plt+0x41f4>
   156f0:	ldr	r0, [sp, #28]
   156f4:	ldr	r0, [r0, #12]
   156f8:	and	r0, r0, #4194304	; 0x400000
   156fc:	orr	r0, r6, r0
   15700:	clz	r0, r0
   15704:	lsr	r0, r0, #5
   15708:	lsl	r0, r0, #2
   1570c:	cmp	r6, #0
   15710:	mov	r1, r6
   15714:	movwne	r1, #1
   15718:	cmp	r9, r7
   1571c:	orrge	r1, r1, #2
   15720:	orr	r0, r1, r0
   15724:	b	15730 <__assert_fail@plt+0x4218>
   15728:	mov	r0, #8
   1572c:	ldr	r2, [sp, #52]	; 0x34
   15730:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15734:	cmp	r1, sl
   15738:	cmpge	r4, r1
   1573c:	blt	15a30 <__assert_fail@plt+0x4518>
   15740:	sub	r1, fp, #32
   15744:	cmp	r9, r7
   15748:	movwlt	r1, #0
   1574c:	str	r1, [sp, #24]
   15750:	sub	lr, r0, #4
   15754:	add	r9, sp, #56	; 0x38
   15758:	str	ip, [sp, #36]	; 0x24
   1575c:	ldr	r7, [sp, #40]	; 0x28
   15760:	str	r3, [sp, #20]
   15764:	str	lr, [sp, #16]
   15768:	cmp	lr, #4
   1576c:	bhi	1581c <__assert_fail@plt+0x4304>
   15770:	add	r0, pc, #0
   15774:	ldr	pc, [r0, lr, lsl #2]
   15778:	andeq	r5, r1, ip, lsl #15
   1577c:	andeq	r5, r1, ip, lsl #15
   15780:	andeq	r5, r1, ip, asr r8
   15784:	andeq	r5, r1, ip, lsl #17
   15788:	andeq	r5, r1, r8, asr #17
   1578c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15790:	cmp	r0, sl
   15794:	blt	15a30 <__assert_fail@plt+0x4518>
   15798:	mov	r1, #0
   1579c:	cmp	r0, r2
   157a0:	ldrblt	r1, [r7, r0]
   157a4:	cmp	r6, #0
   157a8:	ldrbne	r1, [r6, r1]
   157ac:	ldrb	r1, [r5, r1]
   157b0:	cmp	r1, #0
   157b4:	bne	158c8 <__assert_fail@plt+0x43b0>
   157b8:	sub	r1, r0, #1
   157bc:	str	r1, [fp, #-32]	; 0xffffffe0
   157c0:	cmp	r0, sl
   157c4:	mov	r0, r1
   157c8:	bgt	15798 <__assert_fail@plt+0x4280>
   157cc:	b	15a30 <__assert_fail@plt+0x4518>
   157d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   157d4:	add	r0, r0, r3
   157d8:	str	r0, [fp, #-32]	; 0xffffffe0
   157dc:	cmp	r0, sl
   157e0:	blt	15a30 <__assert_fail@plt+0x4518>
   157e4:	cmp	r0, r4
   157e8:	ble	1581c <__assert_fail@plt+0x4304>
   157ec:	b	15a30 <__assert_fail@plt+0x4518>
   157f0:	mov	r0, r9
   157f4:	ldr	r2, [fp, #24]
   157f8:	bl	1bf48 <__assert_fail@plt+0xaa30>
   157fc:	cmp	r0, #0
   15800:	bne	15c80 <__assert_fail@plt+0x4768>
   15804:	ldr	r0, [sp, #80]	; 0x50
   15808:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1580c:	sub	r0, r1, r0
   15810:	add	r9, sp, #56	; 0x38
   15814:	ldr	r3, [sp, #20]
   15818:	b	15834 <__assert_fail@plt+0x431c>
   1581c:	ldr	r0, [sp, #80]	; 0x50
   15820:	ldr	r2, [sp, #88]	; 0x58
   15824:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15828:	sub	r0, r1, r0
   1582c:	cmp	r0, r2
   15830:	bcs	157f0 <__assert_fail@plt+0x42d8>
   15834:	mov	r1, #0
   15838:	ldr	r2, [sp, #84]	; 0x54
   1583c:	cmp	r0, r2
   15840:	bcs	1584c <__assert_fail@plt+0x4334>
   15844:	ldr	r1, [sp, #60]	; 0x3c
   15848:	ldrb	r1, [r1, r0]
   1584c:	ldrb	r0, [r5, r1]
   15850:	cmp	r0, #0
   15854:	beq	157d0 <__assert_fail@plt+0x42b8>
   15858:	b	158c8 <__assert_fail@plt+0x43b0>
   1585c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15860:	cmp	r0, r4
   15864:	bge	158bc <__assert_fail@plt+0x43a4>
   15868:	ldrb	r1, [r7, r0]
   1586c:	ldrb	r1, [r5, r1]
   15870:	cmp	r1, #0
   15874:	bne	158bc <__assert_fail@plt+0x43a4>
   15878:	add	r0, r0, #1
   1587c:	str	r0, [fp, #-32]	; 0xffffffe0
   15880:	cmp	r0, r4
   15884:	blt	15868 <__assert_fail@plt+0x4350>
   15888:	b	158bc <__assert_fail@plt+0x43a4>
   1588c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15890:	cmp	r0, r4
   15894:	bge	158bc <__assert_fail@plt+0x43a4>
   15898:	ldrb	r1, [r7, r0]
   1589c:	ldrb	r1, [r6, r1]
   158a0:	ldrb	r1, [r5, r1]
   158a4:	cmp	r1, #0
   158a8:	bne	158bc <__assert_fail@plt+0x43a4>
   158ac:	add	r0, r0, #1
   158b0:	str	r0, [fp, #-32]	; 0xffffffe0
   158b4:	cmp	r0, r4
   158b8:	blt	15898 <__assert_fail@plt+0x4380>
   158bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   158c0:	cmp	r1, r4
   158c4:	beq	15a10 <__assert_fail@plt+0x44f8>
   158c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   158cc:	mov	r0, r9
   158d0:	ldr	r2, [fp, #24]
   158d4:	bl	1bf48 <__assert_fail@plt+0xaa30>
   158d8:	cmp	r0, #0
   158dc:	bne	15c80 <__assert_fail@plt+0x4768>
   158e0:	ldr	r0, [sp, #36]	; 0x24
   158e4:	cmp	r0, #1
   158e8:	add	r9, sp, #56	; 0x38
   158ec:	ldrne	r0, [sp, #84]	; 0x54
   158f0:	cmpne	r0, #0
   158f4:	bne	159fc <__assert_fail@plt+0x44e4>
   158f8:	mov	r0, #0
   158fc:	str	r0, [sp, #164]	; 0xa4
   15900:	str	r0, [sp, #176]	; 0xb0
   15904:	str	r0, [sp, #160]	; 0xa0
   15908:	mov	r0, r9
   1590c:	ldr	r1, [sp, #32]
   15910:	ldr	r2, [sp, #24]
   15914:	bl	1c580 <__assert_fail@plt+0xb068>
   15918:	cmn	r0, #1
   1591c:	beq	159c8 <__assert_fail@plt+0x44b0>
   15920:	mov	r2, r0
   15924:	cmn	r0, #2
   15928:	beq	15c88 <__assert_fail@plt+0x4770>
   1592c:	str	r2, [sp, #148]	; 0x94
   15930:	ldr	r9, [sp, #48]	; 0x30
   15934:	cmp	r9, #2
   15938:	bcc	1594c <__assert_fail@plt+0x4434>
   1593c:	ldr	r0, [sp, #28]
   15940:	ldrb	r0, [r0, #28]
   15944:	ands	r0, r0, #16
   15948:	beq	1595c <__assert_fail@plt+0x4444>
   1594c:	ldr	r0, [sp, #44]	; 0x2c
   15950:	ldr	r0, [r0, #76]	; 0x4c
   15954:	cmp	r0, #0
   15958:	beq	15970 <__assert_fail@plt+0x4458>
   1595c:	ldr	r0, [sp, #156]	; 0x9c
   15960:	ldr	r1, [r0, r2, lsl #2]
   15964:	add	r0, sp, #56	; 0x38
   15968:	bl	1c91c <__assert_fail@plt+0xb404>
   1596c:	str	r0, [sp, #152]	; 0x98
   15970:	cmp	r9, #2
   15974:	bcc	15998 <__assert_fail@plt+0x4480>
   15978:	ldr	r0, [sp, #28]
   1597c:	ldrb	r0, [r0, #28]
   15980:	ands	r0, r0, #16
   15984:	bne	15998 <__assert_fail@plt+0x4480>
   15988:	ldr	r0, [sp, #44]	; 0x2c
   1598c:	ldrb	r0, [r0, #88]	; 0x58
   15990:	tst	r0, #1
   15994:	bne	159a8 <__assert_fail@plt+0x4490>
   15998:	ldr	r0, [sp, #44]	; 0x2c
   1599c:	ldr	r0, [r0, #76]	; 0x4c
   159a0:	cmp	r0, #0
   159a4:	beq	15a64 <__assert_fail@plt+0x454c>
   159a8:	add	r0, sp, #56	; 0x38
   159ac:	bl	1c990 <__assert_fail@plt+0xb478>
   159b0:	cmp	r0, #0
   159b4:	beq	15a64 <__assert_fail@plt+0x454c>
   159b8:	mov	r8, r0
   159bc:	cmp	r0, #1
   159c0:	add	r9, sp, #56	; 0x38
   159c4:	bne	15a34 <__assert_fail@plt+0x451c>
   159c8:	mov	r0, r9
   159cc:	bl	1cbb4 <__assert_fail@plt+0xb69c>
   159d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   159d4:	ldr	r3, [sp, #20]
   159d8:	add	r0, r0, r3
   159dc:	str	r0, [fp, #-32]	; 0xffffffe0
   159e0:	cmp	r0, sl
   159e4:	blt	15a30 <__assert_fail@plt+0x4518>
   159e8:	cmp	r4, r0
   159ec:	ldr	r2, [sp, #52]	; 0x34
   159f0:	ldr	lr, [sp, #16]
   159f4:	bge	15768 <__assert_fail@plt+0x4250>
   159f8:	b	15a30 <__assert_fail@plt+0x4518>
   159fc:	ldr	r0, [sp, #64]	; 0x40
   15a00:	ldr	r0, [r0]
   15a04:	cmn	r0, #1
   15a08:	bne	158f8 <__assert_fail@plt+0x43e0>
   15a0c:	b	159d0 <__assert_fail@plt+0x44b8>
   15a10:	mov	r0, #0
   15a14:	cmp	r1, r2
   15a18:	ldrblt	r0, [r7, r1]
   15a1c:	cmp	r6, #0
   15a20:	ldrbne	r0, [r6, r0]
   15a24:	ldrb	r0, [r5, r0]
   15a28:	cmp	r0, #0
   15a2c:	bne	158c8 <__assert_fail@plt+0x43b0>
   15a30:	mov	r8, #1
   15a34:	ldr	sl, [sp, #44]	; 0x2c
   15a38:	ldr	r0, [sp, #156]	; 0x9c
   15a3c:	bl	22b58 <__assert_fail@plt+0x11640>
   15a40:	ldr	r0, [sl, #76]	; 0x4c
   15a44:	cmp	r0, #0
   15a48:	addne	r0, sp, #56	; 0x38
   15a4c:	blne	1cea8 <__assert_fail@plt+0xb990>
   15a50:	add	r0, sp, #56	; 0x38
   15a54:	bl	164b8 <__assert_fail@plt+0x4fa0>
   15a58:	mov	r0, r8
   15a5c:	sub	sp, fp, #28
   15a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a64:	ldr	r5, [sp, #48]	; 0x30
   15a68:	cmp	r5, #0
   15a6c:	beq	15c5c <__assert_fail@plt+0x4744>
   15a70:	cmp	r5, #1
   15a74:	ldr	sl, [sp, #44]	; 0x2c
   15a78:	ldr	r4, [sp, #12]
   15a7c:	ldr	r6, [fp, #16]
   15a80:	mov	r9, r6
   15a84:	ldr	r6, [fp, #20]
   15a88:	beq	15aa4 <__assert_fail@plt+0x458c>
   15a8c:	mvn	r0, r4
   15a90:	add	r0, r0, r9
   15a94:	lsl	r2, r0, #3
   15a98:	add	r0, r6, #8
   15a9c:	mov	r1, #255	; 0xff
   15aa0:	bl	11428 <memset@plt>
   15aa4:	mov	r0, #0
   15aa8:	ldr	r1, [sp, #148]	; 0x94
   15aac:	stm	r6, {r0, r1}
   15ab0:	cmp	r5, #2
   15ab4:	ldr	r0, [sp, #28]
   15ab8:	bcc	15b04 <__assert_fail@plt+0x45ec>
   15abc:	ldrb	r1, [r0, #28]
   15ac0:	ands	r1, r1, #16
   15ac4:	bne	15b04 <__assert_fail@plt+0x45ec>
   15ac8:	ldrb	r1, [sl, #88]	; 0x58
   15acc:	mov	r2, #0
   15ad0:	tst	r1, #1
   15ad4:	beq	15ae8 <__assert_fail@plt+0x45d0>
   15ad8:	ldr	r1, [sl, #76]	; 0x4c
   15adc:	mov	r2, #0
   15ae0:	cmp	r1, #0
   15ae4:	movwgt	r2, #1
   15ae8:	str	r2, [sp]
   15aec:	add	r1, sp, #56	; 0x38
   15af0:	ldr	r2, [sp, #48]	; 0x30
   15af4:	mov	r3, r6
   15af8:	bl	1cc64 <__assert_fail@plt+0xb74c>
   15afc:	cmp	r0, #0
   15b00:	bne	15c78 <__assert_fail@plt+0x4760>
   15b04:	add	r0, r6, #4
   15b08:	add	r1, sp, #56	; 0x38
   15b0c:	add	lr, r1, #32
   15b10:	ldrb	r2, [sp, #132]	; 0x84
   15b14:	mov	r3, r9
   15b18:	ldr	r6, [sp, #48]	; 0x30
   15b1c:	b	15b44 <__assert_fail@plt+0x462c>
   15b20:	ldmda	r0, {r1, r7}
   15b24:	ldr	r5, [fp, #-32]	; 0xffffffe0
   15b28:	add	r1, r1, r5
   15b2c:	add	r7, r7, r5
   15b30:	stmda	r0, {r1, r7}
   15b34:	add	r0, r0, #8
   15b38:	sub	r3, r3, #1
   15b3c:	cmp	r4, r3
   15b40:	beq	15bd0 <__assert_fail@plt+0x46b8>
   15b44:	ldr	r7, [r0, #-4]
   15b48:	cmn	r7, #1
   15b4c:	beq	15b34 <__assert_fail@plt+0x461c>
   15b50:	cmp	r2, #0
   15b54:	beq	15b20 <__assert_fail@plt+0x4608>
   15b58:	ldr	ip, [sp, #68]	; 0x44
   15b5c:	ldr	r5, [sp, #84]	; 0x54
   15b60:	cmp	r7, r5
   15b64:	mov	r1, lr
   15b68:	addne	r1, ip, r7, lsl #2
   15b6c:	ldr	r1, [r1]
   15b70:	str	r1, [r0, #-4]
   15b74:	ldr	r1, [r0]
   15b78:	cmp	r1, r5
   15b7c:	mov	r4, lr
   15b80:	addne	r4, ip, r1, lsl #2
   15b84:	ldr	r1, [r4]
   15b88:	ldr	r4, [sp, #12]
   15b8c:	str	r1, [r0]
   15b90:	b	15b20 <__assert_fail@plt+0x4608>
   15b94:	ldr	r1, [r3, #8]
   15b98:	cmp	r1, #0
   15b9c:	beq	15bac <__assert_fail@plt+0x4694>
   15ba0:	ldrsb	r1, [r4, #28]
   15ba4:	cmp	r1, #0
   15ba8:	bmi	155b8 <__assert_fail@plt+0x40a0>
   15bac:	mov	r9, #0
   15bb0:	ldr	r0, [sp, #36]	; 0x24
   15bb4:	cmp	r0, #0
   15bb8:	beq	15c6c <__assert_fail@plt+0x4754>
   15bbc:	cmp	ip, #0
   15bc0:	mov	r0, #0
   15bc4:	str	r0, [sp, #36]	; 0x24
   15bc8:	bne	15a58 <__assert_fail@plt+0x4540>
   15bcc:	b	155bc <__assert_fail@plt+0x40a4>
   15bd0:	cmp	r4, #0
   15bd4:	ble	15bec <__assert_fail@plt+0x46d4>
   15bd8:	ldr	r0, [fp, #20]
   15bdc:	add	r0, r0, r6, lsl #3
   15be0:	lsl	r2, r4, #3
   15be4:	mov	r1, #255	; 0xff
   15be8:	bl	11428 <memset@plt>
   15bec:	ldr	r0, [sl, #132]	; 0x84
   15bf0:	mov	r8, #0
   15bf4:	cmp	r0, #0
   15bf8:	beq	15a38 <__assert_fail@plt+0x4520>
   15bfc:	ldr	r1, [sp, #48]	; 0x30
   15c00:	cmp	r1, #2
   15c04:	bcc	15a38 <__assert_fail@plt+0x4520>
   15c08:	mov	r6, r9
   15c0c:	mvn	r1, r4
   15c10:	add	r1, r1, r9
   15c14:	mov	r2, #0
   15c18:	ldr	r6, [fp, #20]
   15c1c:	b	15c2c <__assert_fail@plt+0x4714>
   15c20:	add	r2, r2, #1
   15c24:	cmp	r1, r2
   15c28:	beq	15c64 <__assert_fail@plt+0x474c>
   15c2c:	ldr	r3, [r0, r2, lsl #2]
   15c30:	cmp	r2, r3
   15c34:	beq	15c20 <__assert_fail@plt+0x4708>
   15c38:	add	r7, r6, r2, lsl #3
   15c3c:	add	r3, r6, r3, lsl #3
   15c40:	ldr	r3, [r3, #8]
   15c44:	str	r3, [r7, #8]
   15c48:	ldr	r3, [r0, r2, lsl #2]
   15c4c:	add	r3, r6, r3, lsl #3
   15c50:	ldr	r3, [r3, #12]
   15c54:	str	r3, [r7, #12]
   15c58:	b	15c20 <__assert_fail@plt+0x4708>
   15c5c:	mov	r8, #0
   15c60:	b	15a34 <__assert_fail@plt+0x451c>
   15c64:	mov	r8, #0
   15c68:	b	15a38 <__assert_fail@plt+0x4520>
   15c6c:	mov	r0, #0
   15c70:	str	r0, [sp, #36]	; 0x24
   15c74:	b	155bc <__assert_fail@plt+0x40a4>
   15c78:	mov	r8, r0
   15c7c:	b	15a38 <__assert_fail@plt+0x4520>
   15c80:	mov	r8, r0
   15c84:	b	15a34 <__assert_fail@plt+0x451c>
   15c88:	mov	r8, #12
   15c8c:	b	15a34 <__assert_fail@plt+0x451c>
   15c90:	push	{fp, lr}
   15c94:	mov	fp, sp
   15c98:	sub	sp, sp, #16
   15c9c:	mov	ip, #1
   15ca0:	str	ip, [sp, #12]
   15ca4:	str	r2, [sp, #4]
   15ca8:	mov	ip, #0
   15cac:	str	ip, [sp]
   15cb0:	ldr	ip, [fp, #8]
   15cb4:	str	ip, [sp, #8]
   15cb8:	bl	15cc4 <__assert_fail@plt+0x47ac>
   15cbc:	mov	sp, fp
   15cc0:	pop	{fp, pc}
   15cc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cc8:	add	fp, sp, #28
   15ccc:	sub	sp, sp, #36	; 0x24
   15cd0:	mvn	r7, #0
   15cd4:	cmp	r3, #0
   15cd8:	bmi	15e1c <__assert_fail@plt+0x4904>
   15cdc:	mov	r9, r3
   15ce0:	mov	r6, r2
   15ce4:	cmp	r3, r2
   15ce8:	bgt	15e1c <__assert_fail@plt+0x4904>
   15cec:	mov	r5, r0
   15cf0:	str	r1, [sp, #28]
   15cf4:	ldr	r0, [fp, #8]
   15cf8:	add	r0, r0, r9
   15cfc:	ldr	r4, [r5]
   15d00:	cmp	r0, r6
   15d04:	mov	r8, r6
   15d08:	bicle	r8, r0, r0, asr #31
   15d0c:	movw	r0, #0
   15d10:	movt	r0, #0
   15d14:	movw	r1, #0
   15d18:	movt	r1, #0
   15d1c:	orrs	r0, r1, r0
   15d20:	str	r0, [sp, #32]
   15d24:	beq	15d30 <__assert_fail@plt+0x4818>
   15d28:	add	r0, r4, #136	; 0x88
   15d2c:	bl	11290 <pthread_mutex_lock@plt>
   15d30:	str	r4, [sp, #20]
   15d34:	ldr	r4, [fp, #16]
   15d38:	ldrb	r0, [r5, #28]
   15d3c:	ubfx	r1, r0, #5, #2
   15d40:	str	r1, [sp, #24]
   15d44:	cmp	r8, r9
   15d48:	ble	15d64 <__assert_fail@plt+0x484c>
   15d4c:	tst	r0, #8
   15d50:	bne	15d64 <__assert_fail@plt+0x484c>
   15d54:	ldr	r0, [r5, #16]
   15d58:	cmp	r0, #0
   15d5c:	movne	r0, r5
   15d60:	blne	14c6c <__assert_fail@plt+0x3754>
   15d64:	mov	r7, #1
   15d68:	mov	sl, #0
   15d6c:	cmp	r4, #0
   15d70:	beq	15da8 <__assert_fail@plt+0x4890>
   15d74:	ldrb	r0, [r5, #28]
   15d78:	ands	r1, r0, #16
   15d7c:	bne	15da8 <__assert_fail@plt+0x4890>
   15d80:	and	r0, r0, #6
   15d84:	cmp	r0, #4
   15d88:	bne	15d9c <__assert_fail@plt+0x4884>
   15d8c:	ldr	r7, [r4]
   15d90:	ldr	r0, [r5, #24]
   15d94:	cmp	r7, r0
   15d98:	bls	15e90 <__assert_fail@plt+0x4978>
   15d9c:	ldr	r0, [r5, #24]
   15da0:	add	r7, r0, #1
   15da4:	mov	sl, r4
   15da8:	lsl	r0, r7, #3
   15dac:	bl	22668 <__assert_fail@plt+0x11150>
   15db0:	cmp	r0, #0
   15db4:	beq	15e88 <__assert_fail@plt+0x4970>
   15db8:	mov	r4, r0
   15dbc:	ldr	r0, [fp, #12]
   15dc0:	str	r8, [sp]
   15dc4:	stmib	sp, {r0, r7}
   15dc8:	str	r4, [sp, #12]
   15dcc:	ldr	r0, [sp, #24]
   15dd0:	str	r0, [sp, #16]
   15dd4:	mov	r0, r5
   15dd8:	ldr	r1, [sp, #28]
   15ddc:	mov	r2, r6
   15de0:	mov	r3, r9
   15de4:	bl	154e8 <__assert_fail@plt+0x3fd0>
   15de8:	cmp	r0, #0
   15dec:	beq	15e28 <__assert_fail@plt+0x4910>
   15df0:	mvn	r7, #1
   15df4:	cmp	r0, #1
   15df8:	mvneq	r7, #0
   15dfc:	mov	r0, r4
   15e00:	bl	22b58 <__assert_fail@plt+0x11640>
   15e04:	ldr	r0, [sp, #32]
   15e08:	cmp	r0, #0
   15e0c:	beq	15e1c <__assert_fail@plt+0x4904>
   15e10:	ldr	r0, [sp, #20]
   15e14:	add	r0, r0, #136	; 0x88
   15e18:	bl	111f4 <pthread_mutex_unlock@plt>
   15e1c:	mov	r0, r7
   15e20:	sub	sp, fp, #28
   15e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e28:	cmp	sl, #0
   15e2c:	beq	15e60 <__assert_fail@plt+0x4948>
   15e30:	ldrb	r0, [r5, #28]
   15e34:	ubfx	r3, r0, #1, #2
   15e38:	mov	r0, sl
   15e3c:	mov	r1, r4
   15e40:	mov	r2, r7
   15e44:	bl	1bcac <__assert_fail@plt+0xa794>
   15e48:	ldrb	r1, [r5, #28]
   15e4c:	and	r1, r1, #249	; 0xf9
   15e50:	bfi	r1, r0, #1, #2
   15e54:	strb	r1, [r5, #28]
   15e58:	tst	r0, #3
   15e5c:	beq	15e80 <__assert_fail@plt+0x4968>
   15e60:	ldr	r0, [fp, #20]
   15e64:	cmp	r0, #0
   15e68:	beq	15e78 <__assert_fail@plt+0x4960>
   15e6c:	ldr	r0, [r4, #4]
   15e70:	sub	r7, r0, r9
   15e74:	b	15dfc <__assert_fail@plt+0x48e4>
   15e78:	ldr	r7, [r4]
   15e7c:	b	15dfc <__assert_fail@plt+0x48e4>
   15e80:	mvn	r7, #1
   15e84:	b	15dfc <__assert_fail@plt+0x48e4>
   15e88:	mvn	r7, #1
   15e8c:	b	15e04 <__assert_fail@plt+0x48ec>
   15e90:	cmp	r7, #1
   15e94:	bge	15da4 <__assert_fail@plt+0x488c>
   15e98:	mov	r7, #1
   15e9c:	mov	sl, #0
   15ea0:	b	15da8 <__assert_fail@plt+0x4890>
   15ea4:	push	{fp, lr}
   15ea8:	mov	fp, sp
   15eac:	sub	sp, sp, #16
   15eb0:	mov	ip, #0
   15eb4:	str	ip, [sp, #12]
   15eb8:	str	r2, [sp, #4]
   15ebc:	ldr	ip, [fp, #12]
   15ec0:	str	ip, [sp, #8]
   15ec4:	ldr	ip, [fp, #8]
   15ec8:	str	ip, [sp]
   15ecc:	bl	15cc4 <__assert_fail@plt+0x47ac>
   15ed0:	mov	sp, fp
   15ed4:	pop	{fp, pc}
   15ed8:	push	{fp, lr}
   15edc:	mov	fp, sp
   15ee0:	sub	sp, sp, #24
   15ee4:	mov	ip, #1
   15ee8:	str	ip, [sp, #20]
   15eec:	mov	ip, #0
   15ef0:	str	ip, [sp, #8]
   15ef4:	ldr	ip, [fp, #20]
   15ef8:	str	ip, [sp, #16]
   15efc:	ldr	ip, [fp, #16]
   15f00:	str	ip, [sp, #12]
   15f04:	ldr	ip, [fp, #12]
   15f08:	str	ip, [sp, #4]
   15f0c:	ldr	ip, [fp, #8]
   15f10:	str	ip, [sp]
   15f14:	bl	15f20 <__assert_fail@plt+0x4a08>
   15f18:	mov	sp, fp
   15f1c:	pop	{fp, pc}
   15f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f24:	add	fp, sp, #28
   15f28:	sub	sp, sp, #20
   15f2c:	mov	r6, r2
   15f30:	mov	r8, r1
   15f34:	mov	r1, r0
   15f38:	ldr	r4, [fp, #8]
   15f3c:	orr	r0, r4, r2
   15f40:	ldr	r2, [fp, #24]
   15f44:	orrs	r0, r0, r2
   15f48:	bmi	15ffc <__assert_fail@plt+0x4ae4>
   15f4c:	adds	sl, r6, r4
   15f50:	bvs	15ffc <__assert_fail@plt+0x4ae4>
   15f54:	mov	r5, #0
   15f58:	cmp	r4, #1
   15f5c:	blt	15fb0 <__assert_fail@plt+0x4a98>
   15f60:	mov	r9, r3
   15f64:	cmp	r6, #1
   15f68:	blt	15fb8 <__assert_fail@plt+0x4aa0>
   15f6c:	mov	r0, sl
   15f70:	mov	r5, r1
   15f74:	bl	22668 <__assert_fail@plt+0x11150>
   15f78:	cmp	r0, #0
   15f7c:	beq	15ffc <__assert_fail@plt+0x4ae4>
   15f80:	mov	r7, r0
   15f84:	mov	r1, r8
   15f88:	mov	r2, r6
   15f8c:	bl	112a8 <memcpy@plt>
   15f90:	add	r0, r7, r6
   15f94:	mov	r1, r9
   15f98:	mov	r2, r4
   15f9c:	bl	112a8 <memcpy@plt>
   15fa0:	ldr	r2, [fp, #24]
   15fa4:	mov	r1, r5
   15fa8:	mov	r5, r7
   15fac:	b	15fbc <__assert_fail@plt+0x4aa4>
   15fb0:	mov	r7, r8
   15fb4:	b	15fbc <__assert_fail@plt+0x4aa4>
   15fb8:	mov	r7, r9
   15fbc:	ldr	r0, [fp, #28]
   15fc0:	add	r6, fp, #12
   15fc4:	ldm	r6, {r3, r4, r6}
   15fc8:	str	r4, [sp]
   15fcc:	stmib	sp, {r2, r6}
   15fd0:	str	r0, [sp, #12]
   15fd4:	mov	r0, r1
   15fd8:	mov	r1, r7
   15fdc:	mov	r2, sl
   15fe0:	bl	15cc4 <__assert_fail@plt+0x47ac>
   15fe4:	mov	r4, r0
   15fe8:	mov	r0, r5
   15fec:	bl	22b58 <__assert_fail@plt+0x11640>
   15ff0:	mov	r0, r4
   15ff4:	sub	sp, fp, #28
   15ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ffc:	mvn	r0, #1
   16000:	sub	sp, fp, #28
   16004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16008:	push	{fp, lr}
   1600c:	mov	fp, sp
   16010:	sub	sp, sp, #24
   16014:	mov	ip, #0
   16018:	str	ip, [sp, #20]
   1601c:	ldr	ip, [fp, #24]
   16020:	str	ip, [sp, #16]
   16024:	ldr	ip, [fp, #20]
   16028:	str	ip, [sp, #12]
   1602c:	ldr	ip, [fp, #16]
   16030:	str	ip, [sp, #8]
   16034:	ldr	ip, [fp, #12]
   16038:	str	ip, [sp, #4]
   1603c:	ldr	ip, [fp, #8]
   16040:	str	ip, [sp]
   16044:	bl	15f20 <__assert_fail@plt+0x4a08>
   16048:	mov	sp, fp
   1604c:	pop	{fp, pc}
   16050:	push	{fp, lr}
   16054:	mov	fp, sp
   16058:	ldrb	ip, [r0, #28]
   1605c:	bic	ip, ip, #6
   16060:	cmp	r2, #0
   16064:	beq	1607c <__assert_fail@plt+0x4b64>
   16068:	ldr	lr, [fp, #8]
   1606c:	orr	ip, ip, #2
   16070:	strb	ip, [r0, #28]
   16074:	stm	r1, {r2, r3, lr}
   16078:	pop	{fp, pc}
   1607c:	strb	ip, [r0, #28]
   16080:	mov	r0, #0
   16084:	str	r0, [r1]
   16088:	str	r0, [r1, #4]
   1608c:	str	r0, [r1, #8]
   16090:	pop	{fp, pc}
   16094:	ldr	r1, [r0, #4]
   16098:	movw	r2, #255	; 0xff
   1609c:	movt	r2, #4
   160a0:	and	r1, r1, r2
   160a4:	cmp	r1, #6
   160a8:	bne	160b4 <__assert_fail@plt+0x4b9c>
   160ac:	ldr	r0, [r0]
   160b0:	b	16124 <__assert_fail@plt+0x4c0c>
   160b4:	cmp	r1, #3
   160b8:	bxne	lr
   160bc:	ldr	r0, [r0]
   160c0:	b	22b58 <__assert_fail@plt+0x11640>
   160c4:	push	{r4, sl, fp, lr}
   160c8:	add	fp, sp, #8
   160cc:	mov	r4, r0
   160d0:	ldr	r0, [r0, #24]
   160d4:	bl	22b58 <__assert_fail@plt+0x11640>
   160d8:	ldr	r0, [r4, #36]	; 0x24
   160dc:	bl	22b58 <__assert_fail@plt+0x11640>
   160e0:	ldr	r0, [r4, #40]	; 0x28
   160e4:	add	r1, r4, #4
   160e8:	cmp	r0, r1
   160ec:	beq	16100 <__assert_fail@plt+0x4be8>
   160f0:	ldr	r0, [r0, #8]
   160f4:	bl	22b58 <__assert_fail@plt+0x11640>
   160f8:	ldr	r0, [r4, #40]	; 0x28
   160fc:	bl	22b58 <__assert_fail@plt+0x11640>
   16100:	ldr	r0, [r4, #12]
   16104:	bl	22b58 <__assert_fail@plt+0x11640>
   16108:	ldr	r0, [r4, #48]	; 0x30
   1610c:	bl	22b58 <__assert_fail@plt+0x11640>
   16110:	ldr	r0, [r4, #44]	; 0x2c
   16114:	bl	22b58 <__assert_fail@plt+0x11640>
   16118:	mov	r0, r4
   1611c:	pop	{r4, sl, fp, lr}
   16120:	b	22b58 <__assert_fail@plt+0x11640>
   16124:	push	{r4, sl, fp, lr}
   16128:	add	fp, sp, #8
   1612c:	mov	r4, r0
   16130:	ldr	r0, [r0]
   16134:	bl	22b58 <__assert_fail@plt+0x11640>
   16138:	ldr	r0, [r4, #4]
   1613c:	bl	22b58 <__assert_fail@plt+0x11640>
   16140:	ldr	r0, [r4, #8]
   16144:	bl	22b58 <__assert_fail@plt+0x11640>
   16148:	ldr	r0, [r4, #12]
   1614c:	bl	22b58 <__assert_fail@plt+0x11640>
   16150:	mov	r0, r4
   16154:	pop	{r4, sl, fp, lr}
   16158:	b	22b58 <__assert_fail@plt+0x11640>
   1615c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16160:	add	fp, sp, #24
   16164:	mov	r5, r1
   16168:	mov	r9, r0
   1616c:	mov	r1, #0
   16170:	mov	r2, #160	; 0xa0
   16174:	bl	11428 <memset@plt>
   16178:	mov	r0, #31
   1617c:	str	r0, [r9, #64]	; 0x40
   16180:	movw	r0, #43689	; 0xaaa9
   16184:	movt	r0, #2730	; 0xaaa
   16188:	cmp	r5, r0
   1618c:	bhi	16310 <__assert_fail@plt+0x4df8>
   16190:	add	r0, r5, #1
   16194:	str	r0, [r9, #4]
   16198:	lsl	r0, r0, #3
   1619c:	bl	22668 <__assert_fail@plt+0x11150>
   161a0:	str	r0, [r9]
   161a4:	mov	r0, #1
   161a8:	mov	r6, r0
   161ac:	lsl	r0, r0, #1
   161b0:	cmp	r6, r5
   161b4:	bls	161a8 <__assert_fail@plt+0x4c90>
   161b8:	mov	r0, #12
   161bc:	mov	r1, r6
   161c0:	bl	22614 <__assert_fail@plt+0x110fc>
   161c4:	sub	r1, r6, #1
   161c8:	str	r1, [r9, #68]	; 0x44
   161cc:	str	r0, [r9, #32]
   161d0:	bl	11350 <__ctype_get_mb_cur_max@plt>
   161d4:	str	r0, [r9, #92]	; 0x5c
   161d8:	mov	r0, #14
   161dc:	bl	114ac <nl_langinfo@plt>
   161e0:	ldrb	r1, [r0]
   161e4:	orr	r1, r1, #32
   161e8:	cmp	r1, #117	; 0x75
   161ec:	bne	1623c <__assert_fail@plt+0x4d24>
   161f0:	ldrb	r1, [r0, #1]
   161f4:	orr	r1, r1, #32
   161f8:	cmp	r1, #116	; 0x74
   161fc:	bne	1623c <__assert_fail@plt+0x4d24>
   16200:	ldrb	r1, [r0, #2]
   16204:	orr	r1, r1, #32
   16208:	cmp	r1, #102	; 0x66
   1620c:	bne	1623c <__assert_fail@plt+0x4d24>
   16210:	ldrb	r1, [r0, #3]!
   16214:	cmp	r1, #45	; 0x2d
   16218:	addeq	r0, r0, #1
   1621c:	movw	r1, #16220	; 0x3f5c
   16220:	movt	r1, #2
   16224:	bl	11248 <strcmp@plt>
   16228:	cmp	r0, #0
   1622c:	bne	1623c <__assert_fail@plt+0x4d24>
   16230:	ldrb	r0, [r9, #88]	; 0x58
   16234:	orr	r0, r0, #4
   16238:	strb	r0, [r9, #88]	; 0x58
   1623c:	ldrb	r0, [r9, #88]	; 0x58
   16240:	and	r1, r0, #247	; 0xf7
   16244:	strb	r1, [r9, #88]	; 0x58
   16248:	ldr	r1, [r9, #92]	; 0x5c
   1624c:	cmp	r1, #2
   16250:	blt	162f4 <__assert_fail@plt+0x4ddc>
   16254:	tst	r0, #4
   16258:	bne	162e8 <__assert_fail@plt+0x4dd0>
   1625c:	mov	r8, #1
   16260:	mov	r0, #32
   16264:	mov	r1, #1
   16268:	bl	22614 <__assert_fail@plt+0x110fc>
   1626c:	str	r0, [r9, #60]	; 0x3c
   16270:	cmp	r0, #0
   16274:	beq	16310 <__assert_fail@plt+0x4df8>
   16278:	mov	r7, #0
   1627c:	mov	r6, #0
   16280:	b	16294 <__assert_fail@plt+0x4d7c>
   16284:	add	r7, r7, r4
   16288:	add	r6, r6, #1
   1628c:	cmp	r6, #8
   16290:	beq	162f4 <__assert_fail@plt+0x4ddc>
   16294:	mov	r4, #0
   16298:	b	162a8 <__assert_fail@plt+0x4d90>
   1629c:	add	r4, r4, #1
   162a0:	cmp	r4, #32
   162a4:	beq	16284 <__assert_fail@plt+0x4d6c>
   162a8:	add	r5, r7, r4
   162ac:	mov	r0, r5
   162b0:	bl	11434 <btowc@plt>
   162b4:	cmn	r0, #1
   162b8:	beq	162cc <__assert_fail@plt+0x4db4>
   162bc:	ldr	r1, [r9, #60]	; 0x3c
   162c0:	ldr	r2, [r1, r6, lsl #2]
   162c4:	orr	r2, r2, r8, lsl r4
   162c8:	str	r2, [r1, r6, lsl #2]
   162cc:	cmp	r5, #127	; 0x7f
   162d0:	bhi	1629c <__assert_fail@plt+0x4d84>
   162d4:	cmp	r5, r0
   162d8:	ldrbne	r0, [r9, #88]	; 0x58
   162dc:	orrne	r0, r0, #8
   162e0:	strbne	r0, [r9, #88]	; 0x58
   162e4:	b	1629c <__assert_fail@plt+0x4d84>
   162e8:	movw	r0, #16172	; 0x3f2c
   162ec:	movt	r0, #2
   162f0:	str	r0, [r9, #60]	; 0x3c
   162f4:	ldr	r0, [r9]
   162f8:	cmp	r0, #0
   162fc:	ldrne	r1, [r9, #32]
   16300:	movne	r0, #0
   16304:	cmpne	r1, #0
   16308:	moveq	r0, #12
   1630c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16310:	mov	r0, #12
   16314:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16318:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1631c:	add	fp, sp, #24
   16320:	sub	sp, sp, #8
   16324:	mov	r8, r3
   16328:	mov	r5, r2
   1632c:	mov	r7, r1
   16330:	mov	r4, r0
   16334:	vmov.i32	q8, #0	; 0x00000000
   16338:	mov	r0, #80	; 0x50
   1633c:	mov	r1, r4
   16340:	vst1.32	{d16-d17}, [r1], r0
   16344:	mov	r0, #0
   16348:	str	r0, [r1]
   1634c:	add	r0, r4, #64	; 0x40
   16350:	vst1.32	{d16-d17}, [r0]
   16354:	add	r0, r4, #48	; 0x30
   16358:	vst1.32	{d16-d17}, [r0]
   1635c:	add	r0, r4, #32
   16360:	vst1.32	{d16-d17}, [r0]
   16364:	add	r0, r4, #16
   16368:	vst1.32	{d16-d17}, [r0]
   1636c:	ldr	r6, [fp, #12]
   16370:	str	r6, [sp, #4]
   16374:	ldr	r9, [fp, #8]
   16378:	str	r9, [sp]
   1637c:	mov	r0, r7
   16380:	mov	r1, r2
   16384:	mov	r2, r4
   16388:	bl	16b70 <__assert_fail@plt+0x5658>
   1638c:	cmp	r5, #1
   16390:	blt	163a8 <__assert_fail@plt+0x4e90>
   16394:	add	r1, r5, #1
   16398:	mov	r0, r4
   1639c:	bl	16bc8 <__assert_fail@plt+0x56b0>
   163a0:	cmp	r0, #0
   163a4:	bne	16460 <__assert_fail@plt+0x4f48>
   163a8:	ldrb	r0, [r4, #75]	; 0x4b
   163ac:	cmp	r0, #0
   163b0:	ldrne	r7, [r4, #4]
   163b4:	str	r7, [r4, #4]
   163b8:	ldr	r0, [r6, #92]	; 0x5c
   163bc:	cmp	r9, #0
   163c0:	beq	1641c <__assert_fail@plt+0x4f04>
   163c4:	cmp	r0, #2
   163c8:	blt	16430 <__assert_fail@plt+0x4f18>
   163cc:	mov	r0, r4
   163d0:	bl	16c6c <__assert_fail@plt+0x5754>
   163d4:	cmp	r0, #0
   163d8:	bne	16460 <__assert_fail@plt+0x4f48>
   163dc:	ldr	r1, [r4, #32]
   163e0:	mov	r0, #0
   163e4:	cmp	r1, r5
   163e8:	bge	16460 <__assert_fail@plt+0x4f48>
   163ec:	ldr	r2, [r4, #28]
   163f0:	ldr	r1, [r4, #36]	; 0x24
   163f4:	ldr	r3, [r6, #92]	; 0x5c
   163f8:	add	r2, r3, r2
   163fc:	cmp	r1, r2
   16400:	bgt	16460 <__assert_fail@plt+0x4f48>
   16404:	lsl	r1, r1, #1
   16408:	mov	r0, r4
   1640c:	bl	16bc8 <__assert_fail@plt+0x56b0>
   16410:	cmp	r0, #0
   16414:	beq	163cc <__assert_fail@plt+0x4eb4>
   16418:	b	16460 <__assert_fail@plt+0x4f48>
   1641c:	cmp	r0, #2
   16420:	blt	1643c <__assert_fail@plt+0x4f24>
   16424:	mov	r0, r4
   16428:	bl	1727c <__assert_fail@plt+0x5d64>
   1642c:	b	1645c <__assert_fail@plt+0x4f44>
   16430:	mov	r0, r4
   16434:	bl	17208 <__assert_fail@plt+0x5cf0>
   16438:	b	1645c <__assert_fail@plt+0x4f44>
   1643c:	cmp	r8, #0
   16440:	beq	16450 <__assert_fail@plt+0x4f38>
   16444:	mov	r0, r4
   16448:	bl	17438 <__assert_fail@plt+0x5f20>
   1644c:	b	1645c <__assert_fail@plt+0x4f44>
   16450:	ldr	r0, [r4, #36]	; 0x24
   16454:	str	r0, [r4, #28]
   16458:	str	r0, [r4, #32]
   1645c:	mov	r0, #0
   16460:	sub	sp, fp, #24
   16464:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16468:	push	{r4, r5, fp, lr}
   1646c:	add	fp, sp, #8
   16470:	ldr	r4, [r0]
   16474:	ldr	r0, [r4, #56]	; 0x38
   16478:	cmp	r0, #0
   1647c:	beq	16494 <__assert_fail@plt+0x4f7c>
   16480:	ldr	r5, [r0]
   16484:	bl	22b58 <__assert_fail@plt+0x11640>
   16488:	cmp	r5, #0
   1648c:	mov	r0, r5
   16490:	bne	16480 <__assert_fail@plt+0x4f68>
   16494:	mov	r0, #31
   16498:	str	r0, [r4, #64]	; 0x40
   1649c:	mov	r5, #0
   164a0:	str	r5, [r4, #52]	; 0x34
   164a4:	str	r5, [r4, #56]	; 0x38
   164a8:	ldr	r0, [r4, #16]
   164ac:	bl	22b58 <__assert_fail@plt+0x11640>
   164b0:	str	r5, [r4, #16]
   164b4:	pop	{r4, r5, fp, pc}
   164b8:	push	{r4, sl, fp, lr}
   164bc:	add	fp, sp, #8
   164c0:	mov	r4, r0
   164c4:	ldr	r0, [r0, #8]
   164c8:	bl	22b58 <__assert_fail@plt+0x11640>
   164cc:	ldr	r0, [r4, #12]
   164d0:	bl	22b58 <__assert_fail@plt+0x11640>
   164d4:	ldrb	r0, [r4, #75]	; 0x4b
   164d8:	cmp	r0, #0
   164dc:	popeq	{r4, sl, fp, pc}
   164e0:	ldr	r0, [r4, #4]
   164e4:	pop	{r4, sl, fp, lr}
   164e8:	b	22b58 <__assert_fail@plt+0x11640>
   164ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164f0:	add	fp, sp, #28
   164f4:	sub	sp, sp, #20
   164f8:	mov	r8, r3
   164fc:	mov	r4, r2
   16500:	mov	r7, r1
   16504:	mov	r5, r0
   16508:	ldr	r9, [r1]
   1650c:	str	r2, [r9, #128]	; 0x80
   16510:	orr	r2, r2, #8388608	; 0x800000
   16514:	add	sl, sp, #12
   16518:	mov	r0, sl
   1651c:	mov	r1, r5
   16520:	bl	17490 <__assert_fail@plt+0x5f78>
   16524:	mov	r6, #0
   16528:	stm	sp, {r6, r8}
   1652c:	mov	r0, r5
   16530:	mov	r1, r7
   16534:	mov	r2, sl
   16538:	mov	r3, r4
   1653c:	bl	174b0 <__assert_fail@plt+0x5f98>
   16540:	mov	r7, r0
   16544:	cmp	r0, #0
   16548:	bne	16558 <__assert_fail@plt+0x5040>
   1654c:	ldr	r0, [r8]
   16550:	cmp	r0, #0
   16554:	bne	165a4 <__assert_fail@plt+0x508c>
   16558:	mov	r0, r9
   1655c:	mov	r1, #0
   16560:	mov	r2, #0
   16564:	mov	r3, #2
   16568:	bl	17618 <__assert_fail@plt+0x6100>
   1656c:	mov	r4, r0
   16570:	cmp	r7, #0
   16574:	beq	16594 <__assert_fail@plt+0x507c>
   16578:	mov	r0, r9
   1657c:	mov	r1, r7
   16580:	mov	r2, r4
   16584:	mov	r3, #16
   16588:	bl	17618 <__assert_fail@plt+0x6100>
   1658c:	mov	r6, r0
   16590:	b	16598 <__assert_fail@plt+0x5080>
   16594:	mov	r6, r4
   16598:	cmp	r4, #0
   1659c:	cmpne	r6, #0
   165a0:	beq	165b0 <__assert_fail@plt+0x5098>
   165a4:	mov	r0, r6
   165a8:	sub	sp, fp, #28
   165ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165b0:	mov	r0, #12
   165b4:	str	r0, [r8]
   165b8:	mov	r6, #0
   165bc:	b	165a4 <__assert_fail@plt+0x508c>
   165c0:	push	{r4, r5, r6, r7, fp, lr}
   165c4:	add	fp, sp, #16
   165c8:	mov	r6, r0
   165cc:	ldr	r4, [r0]
   165d0:	ldr	r0, [r4, #4]
   165d4:	lsl	r0, r0, #2
   165d8:	bl	22668 <__assert_fail@plt+0x11150>
   165dc:	str	r0, [r4, #12]
   165e0:	ldr	r0, [r4, #4]
   165e4:	lsl	r0, r0, #2
   165e8:	bl	22668 <__assert_fail@plt+0x11150>
   165ec:	str	r0, [r4, #16]
   165f0:	ldr	r0, [r4, #4]
   165f4:	add	r0, r0, r0, lsl #1
   165f8:	lsl	r0, r0, #2
   165fc:	bl	22668 <__assert_fail@plt+0x11150>
   16600:	str	r0, [r4, #20]
   16604:	ldr	r0, [r4, #4]
   16608:	add	r0, r0, r0, lsl #1
   1660c:	lsl	r0, r0, #2
   16610:	bl	22668 <__assert_fail@plt+0x11150>
   16614:	str	r0, [r4, #24]
   16618:	ldr	r1, [r4, #12]
   1661c:	mov	r7, #12
   16620:	cmp	r1, #0
   16624:	ldrne	r1, [r4, #16]
   16628:	cmpne	r1, #0
   1662c:	beq	16640 <__assert_fail@plt+0x5128>
   16630:	cmp	r0, #0
   16634:	ldrne	r0, [r4, #20]
   16638:	cmpne	r0, #0
   1663c:	bne	16648 <__assert_fail@plt+0x5130>
   16640:	mov	r0, r7
   16644:	pop	{r4, r5, r6, r7, fp, pc}
   16648:	ldr	r0, [r6, #24]
   1664c:	lsl	r0, r0, #2
   16650:	bl	22668 <__assert_fail@plt+0x11150>
   16654:	str	r0, [r4, #132]	; 0x84
   16658:	cmp	r0, #0
   1665c:	beq	16700 <__assert_fail@plt+0x51e8>
   16660:	ldr	r0, [r6, #24]
   16664:	cmp	r0, #0
   16668:	beq	16688 <__assert_fail@plt+0x5170>
   1666c:	ldr	r0, [r4, #132]	; 0x84
   16670:	mov	r1, #0
   16674:	str	r1, [r0, r1, lsl #2]
   16678:	add	r1, r1, #1
   1667c:	ldr	r2, [r6, #24]
   16680:	cmp	r1, r2
   16684:	bcc	16674 <__assert_fail@plt+0x515c>
   16688:	ldr	r0, [r4, #52]	; 0x34
   1668c:	movw	r1, #42416	; 0xa5b0
   16690:	movt	r1, #1
   16694:	mov	r2, r4
   16698:	bl	1a530 <__assert_fail@plt+0x9018>
   1669c:	ldr	r1, [r6, #24]
   166a0:	mov	r0, #0
   166a4:	cmp	r1, #0
   166a8:	beq	166e4 <__assert_fail@plt+0x51cc>
   166ac:	ldr	r2, [r4, #132]	; 0x84
   166b0:	ldr	r3, [r2]
   166b4:	cmp	r3, #0
   166b8:	bne	166e8 <__assert_fail@plt+0x51d0>
   166bc:	mov	r3, #1
   166c0:	mov	r0, r3
   166c4:	ldr	r1, [r6, #24]
   166c8:	cmp	r3, r1
   166cc:	bcs	166e8 <__assert_fail@plt+0x51d0>
   166d0:	ldr	r5, [r2, r0, lsl #2]
   166d4:	add	r3, r0, #1
   166d8:	cmp	r0, r5
   166dc:	beq	166c0 <__assert_fail@plt+0x51a8>
   166e0:	b	166e8 <__assert_fail@plt+0x51d0>
   166e4:	mov	r1, #0
   166e8:	cmp	r0, r1
   166ec:	bne	16700 <__assert_fail@plt+0x51e8>
   166f0:	ldr	r0, [r4, #132]	; 0x84
   166f4:	bl	22b58 <__assert_fail@plt+0x11640>
   166f8:	mov	r0, #0
   166fc:	str	r0, [r4, #132]	; 0x84
   16700:	ldr	r0, [r4, #52]	; 0x34
   16704:	movw	r1, #42568	; 0xa648
   16708:	movt	r1, #1
   1670c:	mov	r2, r6
   16710:	bl	1805c <__assert_fail@plt+0x6b44>
   16714:	cmp	r0, #0
   16718:	bne	167d8 <__assert_fail@plt+0x52c0>
   1671c:	ldr	r0, [r4, #52]	; 0x34
   16720:	movw	r1, #42704	; 0xa6d0
   16724:	movt	r1, #1
   16728:	mov	r2, r4
   1672c:	bl	1805c <__assert_fail@plt+0x6b44>
   16730:	cmp	r0, #0
   16734:	bne	167d8 <__assert_fail@plt+0x52c0>
   16738:	ldr	r0, [r4, #52]	; 0x34
   1673c:	movw	r1, #42848	; 0xa760
   16740:	movt	r1, #1
   16744:	mov	r2, r4
   16748:	bl	1a530 <__assert_fail@plt+0x9018>
   1674c:	ldr	r0, [r4, #52]	; 0x34
   16750:	movw	r1, #42948	; 0xa7c4
   16754:	movt	r1, #1
   16758:	mov	r2, r4
   1675c:	bl	1a530 <__assert_fail@plt+0x9018>
   16760:	cmp	r0, #0
   16764:	bne	167d8 <__assert_fail@plt+0x52c0>
   16768:	mov	r0, r4
   1676c:	bl	1a8e4 <__assert_fail@plt+0x93cc>
   16770:	cmp	r0, #0
   16774:	bne	167d8 <__assert_fail@plt+0x52c0>
   16778:	ldrb	r0, [r6, #28]
   1677c:	tst	r0, #16
   16780:	bne	1679c <__assert_fail@plt+0x5284>
   16784:	ldr	r0, [r6, #24]
   16788:	cmp	r0, #0
   1678c:	beq	1679c <__assert_fail@plt+0x5284>
   16790:	ldrb	r0, [r4, #88]	; 0x58
   16794:	tst	r0, #1
   16798:	bne	167a8 <__assert_fail@plt+0x5290>
   1679c:	ldr	r0, [r4, #76]	; 0x4c
   167a0:	cmp	r0, #0
   167a4:	beq	167d0 <__assert_fail@plt+0x52b8>
   167a8:	ldr	r0, [r4, #8]
   167ac:	add	r0, r0, r0, lsl #1
   167b0:	lsl	r0, r0, #2
   167b4:	bl	22668 <__assert_fail@plt+0x11150>
   167b8:	str	r0, [r4, #28]
   167bc:	cmp	r0, #0
   167c0:	beq	16640 <__assert_fail@plt+0x5128>
   167c4:	mov	r0, r4
   167c8:	pop	{r4, r5, r6, r7, fp, lr}
   167cc:	b	1a998 <__assert_fail@plt+0x9480>
   167d0:	mov	r7, #0
   167d4:	mov	r0, r7
   167d8:	pop	{r4, r5, r6, r7, fp, pc}
   167dc:	push	{r4, r5, r6, r7, fp, lr}
   167e0:	add	fp, sp, #16
   167e4:	ldr	r1, [r0, #8]
   167e8:	cmp	r1, #0
   167ec:	beq	1680c <__assert_fail@plt+0x52f4>
   167f0:	ldr	r3, [r0]
   167f4:	mov	r5, #0
   167f8:	mov	ip, #1
   167fc:	mov	lr, #139	; 0x8b
   16800:	mov	r2, #0
   16804:	mov	r4, #0
   16808:	b	1683c <__assert_fail@plt+0x5324>
   1680c:	mov	r2, #0
   16810:	mov	r5, #0
   16814:	b	168d8 <__assert_fail@plt+0x53c0>
   16818:	ldrsb	r1, [r1]
   1681c:	cmp	r1, #0
   16820:	mov	r1, #0
   16824:	movwmi	r1, #1
   16828:	orr	r2, r2, r1
   1682c:	ldr	r1, [r0, #8]
   16830:	add	r4, r4, #1
   16834:	cmp	r4, r1
   16838:	bcs	168d8 <__assert_fail@plt+0x53c0>
   1683c:	add	r1, r3, r4, lsl #3
   16840:	ldrb	r6, [r1, #4]
   16844:	sub	r6, r6, #1
   16848:	cmp	r6, #11
   1684c:	bhi	1697c <__assert_fail@plt+0x5464>
   16850:	add	r7, pc, #0
   16854:	ldr	pc, [r7, r6, lsl #2]
   16858:	andeq	r6, r1, r8, lsl r8
   1685c:	andeq	r6, r1, ip, lsr #16
   16860:	andeq	r6, r1, r8, lsl #17
   16864:	andeq	r6, r1, ip, lsr #16
   16868:	ldrdeq	r6, [r1], -r0
   1686c:	andeq	r6, r1, r8, ror r9
   16870:	andeq	r6, r1, ip, ror r9
   16874:	andeq	r6, r1, ip, lsr #16
   16878:	andeq	r6, r1, ip, lsr #16
   1687c:	andeq	r6, r1, ip, lsr #16
   16880:	andeq	r6, r1, ip, lsr #16
   16884:			; <UNDEFINED> instruction: 0x000168b0
   16888:	ldr	r1, [r3, r4, lsl #3]
   1688c:	add	r1, r1, #16
   16890:	mov	r6, #0
   16894:	ldr	r7, [r1, r6, lsl #2]
   16898:	cmp	r7, #0
   1689c:	bne	16978 <__assert_fail@plt+0x5460>
   168a0:	add	r6, r6, #1
   168a4:	cmp	r6, #4
   168a8:	bne	16894 <__assert_fail@plt+0x537c>
   168ac:	b	1682c <__assert_fail@plt+0x5314>
   168b0:	ldr	r1, [r3, r4, lsl #3]
   168b4:	sub	r1, r1, #16
   168b8:	ror	r1, r1, #4
   168bc:	cmp	r1, #7
   168c0:	bhi	16978 <__assert_fail@plt+0x5460>
   168c4:	tst	lr, ip, lsl r1
   168c8:	bne	1682c <__assert_fail@plt+0x5314>
   168cc:	b	16978 <__assert_fail@plt+0x5460>
   168d0:	mov	r5, #1
   168d4:	b	1682c <__assert_fail@plt+0x5314>
   168d8:	tst	r2, #1
   168dc:	tsteq	r5, #1
   168e0:	beq	16948 <__assert_fail@plt+0x5430>
   168e4:	ldr	r1, [r0, #8]
   168e8:	cmp	r1, #0
   168ec:	beq	16948 <__assert_fail@plt+0x5430>
   168f0:	mov	r2, #0
   168f4:	mov	r3, #7
   168f8:	b	16914 <__assert_fail@plt+0x53fc>
   168fc:	bfi	r1, r3, #0, #8
   16900:	str	r1, [r4, #4]
   16904:	ldr	r1, [r0, #8]
   16908:	add	r2, r2, #1
   1690c:	cmp	r2, r1
   16910:	bcs	16948 <__assert_fail@plt+0x5430>
   16914:	ldr	r1, [r0]
   16918:	add	r4, r1, r2, lsl #3
   1691c:	ldr	r1, [r4, #4]
   16920:	uxtb	r6, r1
   16924:	cmp	r6, #5
   16928:	beq	168fc <__assert_fail@plt+0x53e4>
   1692c:	cmp	r6, #1
   16930:	bne	16904 <__assert_fail@plt+0x53ec>
   16934:	ldrsb	r7, [r4]
   16938:	cmn	r7, #1
   1693c:	bgt	16904 <__assert_fail@plt+0x53ec>
   16940:	bic	r1, r1, #2097152	; 0x200000
   16944:	b	16900 <__assert_fail@plt+0x53e8>
   16948:	mov	r1, #1
   1694c:	str	r1, [r0, #92]	; 0x5c
   16950:	ldr	r1, [r0, #76]	; 0x4c
   16954:	mov	r2, #0
   16958:	cmp	r1, #0
   1695c:	movwgt	r2, #1
   16960:	orr	r1, r5, r2
   16964:	and	r1, r1, #1
   16968:	ldrb	r2, [r0, #88]	; 0x58
   1696c:	and	r2, r2, #249	; 0xf9
   16970:	orr	r1, r2, r1, lsl #1
   16974:	strb	r1, [r0, #88]	; 0x58
   16978:	pop	{r4, r5, r6, r7, fp, pc}
   1697c:	bl	114f4 <abort@plt>
   16980:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16984:	add	fp, sp, #24
   16988:	sub	sp, sp, #16
   1698c:	mov	r9, r0
   16990:	ldr	r0, [r0, #24]
   16994:	ldr	r1, [r9, #52]	; 0x34
   16998:	ldr	r1, [r1, #12]
   1699c:	ldr	r1, [r1, #28]
   169a0:	str	r1, [r9, #72]	; 0x48
   169a4:	add	r1, r1, r1, lsl #1
   169a8:	add	r1, r0, r1, lsl #2
   169ac:	mov	r0, sp
   169b0:	bl	1b6c4 <__assert_fail@plt+0xa1ac>
   169b4:	str	r0, [sp, #12]
   169b8:	cmp	r0, #0
   169bc:	bne	16aa0 <__assert_fail@plt+0x5588>
   169c0:	ldr	r0, [r9, #76]	; 0x4c
   169c4:	cmp	r0, #1
   169c8:	blt	16aa8 <__assert_fail@plt+0x5590>
   169cc:	ldr	r0, [sp, #4]
   169d0:	cmp	r0, #1
   169d4:	blt	16aa8 <__assert_fail@plt+0x5590>
   169d8:	mov	r7, #0
   169dc:	mov	r8, sp
   169e0:	b	169f4 <__assert_fail@plt+0x54dc>
   169e4:	add	r7, r7, #1
   169e8:	ldr	r0, [sp, #4]
   169ec:	cmp	r7, r0
   169f0:	bge	16aa8 <__assert_fail@plt+0x5590>
   169f4:	ldr	r2, [sp, #8]
   169f8:	ldr	r1, [r2, r7, lsl #2]
   169fc:	ldr	r3, [r9]
   16a00:	add	r6, r3, r1, lsl #3
   16a04:	ldrb	r6, [r6, #4]
   16a08:	cmp	r6, #4
   16a0c:	bne	169e4 <__assert_fail@plt+0x54cc>
   16a10:	mov	r6, #0
   16a14:	cmp	r0, #1
   16a18:	bge	16a2c <__assert_fail@plt+0x5514>
   16a1c:	b	16a50 <__assert_fail@plt+0x5538>
   16a20:	add	r6, r6, #1
   16a24:	cmp	r0, r6
   16a28:	beq	16a50 <__assert_fail@plt+0x5538>
   16a2c:	ldr	r5, [r2, r6, lsl #2]
   16a30:	add	r4, r3, r5, lsl #3
   16a34:	ldrb	r4, [r4, #4]
   16a38:	cmp	r4, #9
   16a3c:	bne	16a20 <__assert_fail@plt+0x5508>
   16a40:	ldr	r4, [r3, r1, lsl #3]
   16a44:	ldr	r5, [r3, r5, lsl #3]
   16a48:	cmp	r5, r4
   16a4c:	bne	16a20 <__assert_fail@plt+0x5508>
   16a50:	cmp	r6, r0
   16a54:	beq	169e4 <__assert_fail@plt+0x54cc>
   16a58:	ldr	r0, [r9, #20]
   16a5c:	add	r1, r1, r1, lsl #1
   16a60:	add	r0, r0, r1, lsl #2
   16a64:	ldr	r0, [r0, #8]
   16a68:	ldr	r6, [r0]
   16a6c:	mov	r0, r8
   16a70:	mov	r1, r6
   16a74:	bl	1b740 <__assert_fail@plt+0xa228>
   16a78:	cmp	r0, #0
   16a7c:	bne	169e4 <__assert_fail@plt+0x54cc>
   16a80:	ldr	r0, [r9, #24]
   16a84:	add	r1, r6, r6, lsl #1
   16a88:	add	r1, r0, r1, lsl #2
   16a8c:	mov	r0, r8
   16a90:	bl	1b2c0 <__assert_fail@plt+0x9da8>
   16a94:	mov	r7, #0
   16a98:	cmp	r0, #0
   16a9c:	beq	169e4 <__assert_fail@plt+0x54cc>
   16aa0:	sub	sp, fp, #24
   16aa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16aa8:	add	r0, sp, #12
   16aac:	mov	r2, sp
   16ab0:	mov	r1, r9
   16ab4:	mov	r3, #0
   16ab8:	bl	1b7b0 <__assert_fail@plt+0xa298>
   16abc:	str	r0, [r9, #36]	; 0x24
   16ac0:	cmp	r0, #0
   16ac4:	beq	16b44 <__assert_fail@plt+0x562c>
   16ac8:	ldrsb	r1, [r0, #52]	; 0x34
   16acc:	cmn	r1, #1
   16ad0:	ble	16ae4 <__assert_fail@plt+0x55cc>
   16ad4:	str	r0, [r9, #40]	; 0x28
   16ad8:	str	r0, [r9, #44]	; 0x2c
   16adc:	str	r0, [r9, #48]	; 0x30
   16ae0:	b	16b5c <__assert_fail@plt+0x5644>
   16ae4:	add	r5, sp, #12
   16ae8:	mov	r6, sp
   16aec:	mov	r0, r5
   16af0:	mov	r1, r9
   16af4:	mov	r2, r6
   16af8:	mov	r3, #1
   16afc:	bl	1b7b0 <__assert_fail@plt+0xa298>
   16b00:	str	r0, [r9, #40]	; 0x28
   16b04:	mov	r0, r5
   16b08:	mov	r1, r9
   16b0c:	mov	r2, r6
   16b10:	mov	r3, #2
   16b14:	bl	1b7b0 <__assert_fail@plt+0xa298>
   16b18:	str	r0, [r9, #44]	; 0x2c
   16b1c:	mov	r0, r5
   16b20:	mov	r1, r9
   16b24:	mov	r2, r6
   16b28:	mov	r3, #6
   16b2c:	bl	1b7b0 <__assert_fail@plt+0xa298>
   16b30:	str	r0, [r9, #48]	; 0x30
   16b34:	ldr	r1, [r9, #40]	; 0x28
   16b38:	cmp	r1, #0
   16b3c:	cmpne	r0, #0
   16b40:	bne	16b50 <__assert_fail@plt+0x5638>
   16b44:	ldr	r0, [sp, #12]
   16b48:	sub	sp, fp, #24
   16b4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b50:	ldr	r0, [r9, #44]	; 0x2c
   16b54:	cmp	r0, #0
   16b58:	beq	16b44 <__assert_fail@plt+0x562c>
   16b5c:	ldr	r0, [sp, #8]
   16b60:	bl	22b58 <__assert_fail@plt+0x11640>
   16b64:	mov	r0, #0
   16b68:	sub	sp, fp, #24
   16b6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b70:	str	r1, [r2, #48]	; 0x30
   16b74:	str	r0, [r2]
   16b78:	str	r3, [r2, #64]	; 0x40
   16b7c:	str	r1, [r2, #44]	; 0x2c
   16b80:	ldr	r0, [sp]
   16b84:	strb	r0, [r2, #72]	; 0x48
   16b88:	cmp	r3, #0
   16b8c:	movwne	r3, #1
   16b90:	orr	r0, r3, r0
   16b94:	strb	r0, [r2, #75]	; 0x4b
   16b98:	ldr	r0, [sp, #4]
   16b9c:	ldr	r3, [r0, #92]	; 0x5c
   16ba0:	str	r3, [r2, #80]	; 0x50
   16ba4:	ldrb	r3, [r0, #88]	; 0x58
   16ba8:	ubfx	r3, r3, #2, #1
   16bac:	strb	r3, [r2, #73]	; 0x49
   16bb0:	ldrb	r0, [r0, #88]	; 0x58
   16bb4:	str	r1, [r2, #56]	; 0x38
   16bb8:	str	r1, [r2, #52]	; 0x34
   16bbc:	ubfx	r0, r0, #3, #1
   16bc0:	strb	r0, [r2, #74]	; 0x4a
   16bc4:	bx	lr
   16bc8:	push	{r4, r5, r6, r7, fp, lr}
   16bcc:	add	fp, sp, #16
   16bd0:	mov	r4, r1
   16bd4:	mov	r5, r0
   16bd8:	ldr	r0, [r0, #80]	; 0x50
   16bdc:	cmp	r0, #2
   16be0:	blt	16c2c <__assert_fail@plt+0x5714>
   16be4:	mov	r6, #12
   16be8:	cmn	r4, #-1073741823	; 0xc0000001
   16bec:	bhi	16c58 <__assert_fail@plt+0x5740>
   16bf0:	ldr	r0, [r5, #8]
   16bf4:	lsl	r7, r4, #2
   16bf8:	mov	r1, r7
   16bfc:	bl	22698 <__assert_fail@plt+0x11180>
   16c00:	cmp	r0, #0
   16c04:	beq	16c58 <__assert_fail@plt+0x5740>
   16c08:	str	r0, [r5, #8]
   16c0c:	ldr	r0, [r5, #12]
   16c10:	cmp	r0, #0
   16c14:	beq	16c2c <__assert_fail@plt+0x5714>
   16c18:	mov	r1, r7
   16c1c:	bl	22698 <__assert_fail@plt+0x11180>
   16c20:	cmp	r0, #0
   16c24:	beq	16c58 <__assert_fail@plt+0x5740>
   16c28:	str	r0, [r5, #12]
   16c2c:	ldrb	r0, [r5, #75]	; 0x4b
   16c30:	cmp	r0, #0
   16c34:	beq	16c50 <__assert_fail@plt+0x5738>
   16c38:	ldr	r0, [r5, #4]
   16c3c:	mov	r1, r4
   16c40:	bl	22698 <__assert_fail@plt+0x11180>
   16c44:	cmp	r0, #0
   16c48:	beq	16c60 <__assert_fail@plt+0x5748>
   16c4c:	str	r0, [r5, #4]
   16c50:	str	r4, [r5, #36]	; 0x24
   16c54:	mov	r6, #0
   16c58:	mov	r0, r6
   16c5c:	pop	{r4, r5, r6, r7, fp, pc}
   16c60:	mov	r6, #12
   16c64:	mov	r0, r6
   16c68:	pop	{r4, r5, r6, r7, fp, pc}
   16c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c70:	add	fp, sp, #28
   16c74:	sub	sp, sp, #92	; 0x5c
   16c78:	mov	r9, r0
   16c7c:	ldrb	r0, [r0, #74]	; 0x4a
   16c80:	ldr	sl, [r9, #28]
   16c84:	ldr	r4, [r9, #36]	; 0x24
   16c88:	ldr	r1, [r9, #48]	; 0x30
   16c8c:	cmp	r4, r1
   16c90:	movgt	r4, r1
   16c94:	cmp	r0, #0
   16c98:	bne	16cb4 <__assert_fail@plt+0x579c>
   16c9c:	ldr	r0, [r9, #64]	; 0x40
   16ca0:	cmp	r0, #0
   16ca4:	bne	16cb4 <__assert_fail@plt+0x579c>
   16ca8:	ldrb	r0, [r9, #76]	; 0x4c
   16cac:	cmp	r0, #0
   16cb0:	beq	16cbc <__assert_fail@plt+0x57a4>
   16cb4:	ldr	r7, [r9, #32]
   16cb8:	b	16e90 <__assert_fail@plt+0x5978>
   16cbc:	cmp	r4, sl
   16cc0:	ble	16e64 <__assert_fail@plt+0x594c>
   16cc4:	add	r5, r9, #16
   16cc8:	str	r4, [sp, #4]
   16ccc:	b	16cf0 <__assert_fail@plt+0x57d8>
   16cd0:	ldr	r1, [r9, #4]
   16cd4:	strb	r0, [r1, sl]
   16cd8:	ldr	r1, [r9, #8]
   16cdc:	str	r0, [r1, sl, lsl #2]
   16ce0:	add	sl, sl, #1
   16ce4:	cmp	r4, sl
   16ce8:	mov	r7, sl
   16cec:	ble	171d4 <__assert_fail@plt+0x5cbc>
   16cf0:	ldr	r0, [r9]
   16cf4:	ldr	r1, [r9, #24]
   16cf8:	add	r1, r1, sl
   16cfc:	ldrb	r6, [r0, r1]
   16d00:	tst	r6, #128	; 0x80
   16d04:	bne	16d28 <__assert_fail@plt+0x5810>
   16d08:	mov	r0, r5
   16d0c:	bl	112d8 <mbsinit@plt>
   16d10:	cmp	r0, #0
   16d14:	beq	16d28 <__assert_fail@plt+0x5810>
   16d18:	mov	r0, r6
   16d1c:	bl	114dc <towupper@plt>
   16d20:	cmp	r0, #127	; 0x7f
   16d24:	bls	16cd0 <__assert_fail@plt+0x57b8>
   16d28:	ldm	r5, {r0, r1}
   16d2c:	str	r1, [fp, #-36]	; 0xffffffdc
   16d30:	str	r0, [fp, #-40]	; 0xffffffd8
   16d34:	sub	r2, r4, sl
   16d38:	ldr	r0, [r9]
   16d3c:	ldr	r1, [r9, #24]
   16d40:	add	r0, r0, r1
   16d44:	add	r1, r0, sl
   16d48:	add	r0, sp, #12
   16d4c:	mov	r3, r5
   16d50:	bl	22c08 <__assert_fail@plt+0x116f0>
   16d54:	mov	r4, r0
   16d58:	sub	r8, r0, #1
   16d5c:	cmn	r8, #4
   16d60:	bhi	16e1c <__assert_fail@plt+0x5904>
   16d64:	ldr	r0, [sp, #12]
   16d68:	bl	114dc <towupper@plt>
   16d6c:	mov	r6, r0
   16d70:	ldr	r0, [sp, #12]
   16d74:	cmp	r6, r0
   16d78:	bne	16d98 <__assert_fail@plt+0x5880>
   16d7c:	ldr	r1, [r9]
   16d80:	ldr	r0, [r9, #4]
   16d84:	ldr	r2, [r9, #24]
   16d88:	add	r0, r0, sl
   16d8c:	add	r1, r1, r2
   16d90:	add	r1, r1, sl
   16d94:	b	16dc0 <__assert_fail@plt+0x58a8>
   16d98:	add	r7, sp, #16
   16d9c:	mov	r0, r7
   16da0:	mov	r1, r6
   16da4:	sub	r2, fp, #40	; 0x28
   16da8:	bl	11230 <wcrtomb@plt>
   16dac:	cmp	r4, r0
   16db0:	bne	16e6c <__assert_fail@plt+0x5954>
   16db4:	ldr	r0, [r9, #4]
   16db8:	add	r0, r0, sl
   16dbc:	mov	r1, r7
   16dc0:	mov	r2, r4
   16dc4:	bl	112a8 <memcpy@plt>
   16dc8:	ldr	r0, [r9, #8]
   16dcc:	str	r6, [r0, sl, lsl #2]
   16dd0:	add	r1, r4, sl
   16dd4:	add	r6, sl, #1
   16dd8:	cmp	r6, r1
   16ddc:	bge	16e10 <__assert_fail@plt+0x58f8>
   16de0:	mvn	r1, #3
   16de4:	add	r2, r1, r4, lsl #2
   16de8:	add	r0, r0, sl, lsl #2
   16dec:	add	r0, r0, #4
   16df0:	mov	r1, #255	; 0xff
   16df4:	bl	11428 <memset@plt>
   16df8:	mov	sl, r6
   16dfc:	ldr	r4, [sp, #4]
   16e00:	subs	r8, r8, #1
   16e04:	add	sl, sl, #1
   16e08:	bne	16e00 <__assert_fail@plt+0x58e8>
   16e0c:	b	16ce4 <__assert_fail@plt+0x57cc>
   16e10:	mov	sl, r6
   16e14:	ldr	r4, [sp, #4]
   16e18:	b	16ce4 <__assert_fail@plt+0x57cc>
   16e1c:	add	r0, r4, #1
   16e20:	cmp	r0, #2
   16e24:	bcc	16e38 <__assert_fail@plt+0x5920>
   16e28:	ldr	r0, [r9, #36]	; 0x24
   16e2c:	ldr	r1, [r9, #48]	; 0x30
   16e30:	cmp	r0, r1
   16e34:	blt	16e7c <__assert_fail@plt+0x5964>
   16e38:	ldr	r0, [r9, #4]
   16e3c:	strb	r6, [r0, sl]
   16e40:	ldr	r0, [r9, #8]
   16e44:	str	r6, [r0, sl, lsl #2]
   16e48:	add	sl, sl, #1
   16e4c:	cmn	r4, #1
   16e50:	bne	16e14 <__assert_fail@plt+0x58fc>
   16e54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16e58:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16e5c:	stm	r5, {r0, r1}
   16e60:	b	16e14 <__assert_fail@plt+0x58fc>
   16e64:	mov	r7, sl
   16e68:	b	171d4 <__assert_fail@plt+0x5cbc>
   16e6c:	mov	r0, sl
   16e70:	ldr	r4, [sp, #4]
   16e74:	mov	r7, sl
   16e78:	b	16e98 <__assert_fail@plt+0x5980>
   16e7c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16e80:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16e84:	stm	r5, {r0, r1}
   16e88:	mov	r7, sl
   16e8c:	b	171d4 <__assert_fail@plt+0x5cbc>
   16e90:	cmp	sl, r4
   16e94:	bge	171d4 <__assert_fail@plt+0x5cbc>
   16e98:	mov	r6, r9
   16e9c:	ldr	r0, [r6, #16]!
   16ea0:	ldr	r1, [r6, #4]
   16ea4:	str	r0, [fp, #-40]	; 0xffffffd8
   16ea8:	str	r1, [fp, #-36]	; 0xffffffdc
   16eac:	str	r4, [sp, #4]
   16eb0:	sub	r2, r4, sl
   16eb4:	ldr	r0, [r6, #48]	; 0x30
   16eb8:	cmp	r0, #0
   16ebc:	str	r7, [sp]
   16ec0:	bne	16fa4 <__assert_fail@plt+0x5a8c>
   16ec4:	ldr	r0, [r9]
   16ec8:	ldr	r1, [r9, #24]
   16ecc:	add	r0, r0, r1
   16ed0:	add	r4, r0, r7
   16ed4:	add	r0, sp, #8
   16ed8:	mov	r1, r4
   16edc:	mov	r3, r6
   16ee0:	bl	22c08 <__assert_fail@plt+0x116f0>
   16ee4:	mov	r5, r0
   16ee8:	sub	r8, r0, #1
   16eec:	cmn	r8, #4
   16ef0:	bhi	16ffc <__assert_fail@plt+0x5ae4>
   16ef4:	ldr	r0, [sp, #8]
   16ef8:	bl	114dc <towupper@plt>
   16efc:	mov	r7, r0
   16f00:	ldr	r0, [sp, #8]
   16f04:	cmp	r7, r0
   16f08:	bne	16f1c <__assert_fail@plt+0x5a04>
   16f0c:	ldr	r0, [r9, #4]
   16f10:	add	r0, r0, sl
   16f14:	mov	r1, r4
   16f18:	b	16f40 <__assert_fail@plt+0x5a28>
   16f1c:	add	r0, sp, #16
   16f20:	sub	r2, fp, #40	; 0x28
   16f24:	mov	r1, r7
   16f28:	bl	11230 <wcrtomb@plt>
   16f2c:	cmp	r0, r5
   16f30:	bne	17078 <__assert_fail@plt+0x5b60>
   16f34:	ldr	r0, [r9, #4]
   16f38:	add	r0, r0, sl
   16f3c:	add	r1, sp, #16
   16f40:	mov	r2, r5
   16f44:	bl	112a8 <memcpy@plt>
   16f48:	ldrb	r0, [r9, #76]	; 0x4c
   16f4c:	cmp	r0, #0
   16f50:	bne	171a0 <__assert_fail@plt+0x5c88>
   16f54:	ldr	r0, [r9, #8]
   16f58:	str	r7, [r0, sl, lsl #2]
   16f5c:	ldr	r7, [sp]
   16f60:	add	r7, r5, r7
   16f64:	add	r1, r5, sl
   16f68:	add	r4, sl, #1
   16f6c:	cmp	r4, r1
   16f70:	bge	16f98 <__assert_fail@plt+0x5a80>
   16f74:	mvn	r1, #3
   16f78:	add	r2, r1, r5, lsl #2
   16f7c:	add	r0, r0, sl, lsl #2
   16f80:	add	r0, r0, #4
   16f84:	mov	r1, #255	; 0xff
   16f88:	bl	11428 <memset@plt>
   16f8c:	subs	r8, r8, #1
   16f90:	add	r4, r4, #1
   16f94:	bne	16f8c <__assert_fail@plt+0x5a74>
   16f98:	mov	sl, r4
   16f9c:	ldr	r4, [sp, #4]
   16fa0:	b	16e90 <__assert_fail@plt+0x5978>
   16fa4:	add	r4, sp, #16
   16fa8:	cmp	r2, #1
   16fac:	ldrge	r1, [r9, #80]	; 0x50
   16fb0:	cmpge	r1, #1
   16fb4:	blt	16ed4 <__assert_fail@plt+0x59bc>
   16fb8:	mov	r1, #0
   16fbc:	add	r4, sp, #16
   16fc0:	ldr	r3, [r9]
   16fc4:	ldr	r7, [r9, #24]
   16fc8:	add	r3, r3, r7
   16fcc:	ldr	r7, [sp]
   16fd0:	add	r3, r3, r7
   16fd4:	ldrb	r3, [r3, r1]
   16fd8:	ldrb	r3, [r0, r3]
   16fdc:	strb	r3, [r4, r1]
   16fe0:	add	r1, r1, #1
   16fe4:	cmp	r1, r2
   16fe8:	bge	16ed4 <__assert_fail@plt+0x59bc>
   16fec:	ldr	r3, [r9, #80]	; 0x50
   16ff0:	cmp	r1, r3
   16ff4:	blt	16fc0 <__assert_fail@plt+0x5aa8>
   16ff8:	b	16ed4 <__assert_fail@plt+0x59bc>
   16ffc:	add	r0, r5, #1
   17000:	cmp	r0, #2
   17004:	bcc	17018 <__assert_fail@plt+0x5b00>
   17008:	ldr	r0, [r9, #36]	; 0x24
   1700c:	ldr	r1, [r9, #48]	; 0x30
   17010:	cmp	r0, r1
   17014:	blt	171c4 <__assert_fail@plt+0x5cac>
   17018:	ldr	r0, [r9]
   1701c:	ldr	r2, [r9, #24]
   17020:	ldr	r1, [r9, #64]	; 0x40
   17024:	ldr	r7, [sp]
   17028:	add	r2, r2, r7
   1702c:	ldrb	r0, [r0, r2]
   17030:	cmp	r1, #0
   17034:	bne	171f4 <__assert_fail@plt+0x5cdc>
   17038:	ldr	r4, [sp, #4]
   1703c:	ldr	r1, [r9, #4]
   17040:	strb	r0, [r1, sl]
   17044:	ldrb	r1, [r9, #76]	; 0x4c
   17048:	cmp	r1, #0
   1704c:	bne	171fc <__assert_fail@plt+0x5ce4>
   17050:	ldr	r1, [r9, #8]
   17054:	str	r0, [r1, sl, lsl #2]
   17058:	add	sl, sl, #1
   1705c:	add	r7, r7, #1
   17060:	cmn	r5, #1
   17064:	bne	16e90 <__assert_fail@plt+0x5978>
   17068:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1706c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17070:	stm	r6, {r0, r1}
   17074:	b	16e90 <__assert_fail@plt+0x5978>
   17078:	mov	r2, r0
   1707c:	cmn	r0, #1
   17080:	beq	16f0c <__assert_fail@plt+0x59f4>
   17084:	add	r1, r2, sl
   17088:	ldr	r0, [r9, #36]	; 0x24
   1708c:	cmp	r1, r0
   17090:	bhi	171c4 <__assert_fail@plt+0x5cac>
   17094:	str	r1, [sp, #4]
   17098:	ldr	r1, [r9, #12]
   1709c:	cmp	r1, #0
   170a0:	bne	170c0 <__assert_fail@plt+0x5ba8>
   170a4:	lsl	r0, r0, #2
   170a8:	mov	r4, r2
   170ac:	bl	22668 <__assert_fail@plt+0x11150>
   170b0:	mov	r2, r4
   170b4:	str	r0, [r9, #12]
   170b8:	cmp	r0, #0
   170bc:	beq	171e8 <__assert_fail@plt+0x5cd0>
   170c0:	ldrb	r0, [r9, #76]	; 0x4c
   170c4:	cmp	r0, #0
   170c8:	bne	170f4 <__assert_fail@plt+0x5bdc>
   170cc:	cmp	sl, #0
   170d0:	beq	170ec <__assert_fail@plt+0x5bd4>
   170d4:	ldr	r0, [r9, #12]
   170d8:	mov	r1, #0
   170dc:	str	r1, [r0, r1, lsl #2]
   170e0:	add	r1, r1, #1
   170e4:	cmp	sl, r1
   170e8:	bne	170dc <__assert_fail@plt+0x5bc4>
   170ec:	mov	r0, #1
   170f0:	strb	r0, [r9, #76]	; 0x4c
   170f4:	ldr	r0, [r9, #4]
   170f8:	add	r0, r0, sl
   170fc:	add	r1, sp, #16
   17100:	mov	r4, r2
   17104:	bl	112a8 <memcpy@plt>
   17108:	ldr	r1, [r9, #8]
   1710c:	str	r7, [r1, sl, lsl #2]
   17110:	ldr	r0, [r9, #12]
   17114:	ldr	r6, [sp]
   17118:	str	r6, [r0, sl, lsl #2]
   1711c:	cmp	r4, #2
   17120:	bcc	17158 <__assert_fail@plt+0x5c40>
   17124:	add	r0, r0, sl, lsl #2
   17128:	add	r1, r1, sl, lsl #2
   1712c:	mov	r2, #1
   17130:	mvn	r3, #0
   17134:	cmp	r2, r5
   17138:	mov	r7, r8
   1713c:	movcc	r7, r2
   17140:	add	r7, r7, r6
   17144:	str	r7, [r0, r2, lsl #2]
   17148:	str	r3, [r1, r2, lsl #2]
   1714c:	add	r2, r2, #1
   17150:	cmp	r4, r2
   17154:	bne	17134 <__assert_fail@plt+0x5c1c>
   17158:	sub	r1, r4, r5
   1715c:	ldr	r0, [r9, #48]	; 0x30
   17160:	ldr	r2, [r9, #52]	; 0x34
   17164:	add	r0, r0, r1
   17168:	str	r0, [r9, #48]	; 0x30
   1716c:	cmp	r2, r6
   17170:	mov	r7, r6
   17174:	ble	17184 <__assert_fail@plt+0x5c6c>
   17178:	ldr	r2, [r9, #56]	; 0x38
   1717c:	add	r1, r2, r1
   17180:	str	r1, [r9, #56]	; 0x38
   17184:	add	r7, r5, r7
   17188:	ldr	r1, [r9, #36]	; 0x24
   1718c:	cmp	r1, r0
   17190:	movgt	r1, r0
   17194:	ldr	sl, [sp, #4]
   17198:	mov	r4, r1
   1719c:	b	16e90 <__assert_fail@plt+0x5978>
   171a0:	ldr	r0, [r9, #12]
   171a4:	add	r0, r0, sl, lsl #2
   171a8:	ldr	r1, [sp]
   171ac:	mov	r2, r5
   171b0:	str	r1, [r0], #4
   171b4:	add	r1, r1, #1
   171b8:	subs	r2, r2, #1
   171bc:	bne	171b0 <__assert_fail@plt+0x5c98>
   171c0:	b	16f54 <__assert_fail@plt+0x5a3c>
   171c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   171c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   171cc:	stm	r6, {r0, r1}
   171d0:	ldr	r7, [sp]
   171d4:	str	sl, [r9, #28]
   171d8:	str	r7, [r9, #32]
   171dc:	mov	r0, #0
   171e0:	sub	sp, fp, #28
   171e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171e8:	mov	r0, #12
   171ec:	sub	sp, fp, #28
   171f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171f4:	ldrb	r0, [r1, r0]
   171f8:	b	17038 <__assert_fail@plt+0x5b20>
   171fc:	ldr	r1, [r9, #12]
   17200:	str	r7, [r1, sl, lsl #2]
   17204:	b	17050 <__assert_fail@plt+0x5b38>
   17208:	push	{r4, r5, r6, sl, fp, lr}
   1720c:	add	fp, sp, #16
   17210:	mov	r4, r0
   17214:	ldr	r5, [r0, #28]
   17218:	ldr	r6, [r0, #36]	; 0x24
   1721c:	ldr	r0, [r0, #48]	; 0x30
   17220:	cmp	r6, r0
   17224:	movgt	r6, r0
   17228:	cmp	r5, r6
   1722c:	bge	17270 <__assert_fail@plt+0x5d58>
   17230:	ldr	r0, [r4]
   17234:	ldr	r2, [r4, #24]
   17238:	ldr	r1, [r4, #64]	; 0x40
   1723c:	add	r0, r0, r2
   17240:	ldrb	r0, [r0, r5]
   17244:	cmp	r1, #0
   17248:	bne	17268 <__assert_fail@plt+0x5d50>
   1724c:	bl	11494 <toupper@plt>
   17250:	ldr	r1, [r4, #4]
   17254:	strb	r0, [r1, r5]
   17258:	add	r5, r5, #1
   1725c:	cmp	r5, r6
   17260:	blt	17230 <__assert_fail@plt+0x5d18>
   17264:	b	17270 <__assert_fail@plt+0x5d58>
   17268:	ldrb	r0, [r1, r0]
   1726c:	b	1724c <__assert_fail@plt+0x5d34>
   17270:	str	r5, [r4, #28]
   17274:	str	r5, [r4, #32]
   17278:	pop	{r4, r5, r6, sl, fp, pc}
   1727c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17280:	add	fp, sp, #28
   17284:	sub	sp, sp, #76	; 0x4c
   17288:	mov	r4, r0
   1728c:	ldr	r6, [r0, #28]
   17290:	ldr	sl, [r0, #36]	; 0x24
   17294:	ldr	r0, [r0, #48]	; 0x30
   17298:	cmp	sl, r0
   1729c:	movgt	sl, r0
   172a0:	cmp	sl, r6
   172a4:	ble	17428 <__assert_fail@plt+0x5f10>
   172a8:	add	r9, r4, #16
   172ac:	add	r0, sp, #8
   172b0:	sub	r2, sl, r6
   172b4:	ldm	r9, {r3, r5}
   172b8:	ldr	r1, [r4, #64]	; 0x40
   172bc:	cmp	r1, #0
   172c0:	str	r3, [sp, #4]
   172c4:	bne	173a4 <__assert_fail@plt+0x5e8c>
   172c8:	ldr	r3, [r4]
   172cc:	ldr	r1, [r4, #24]
   172d0:	add	r1, r3, r1
   172d4:	add	r1, r1, r6
   172d8:	mov	r8, r0
   172dc:	mov	r3, r9
   172e0:	bl	22c08 <__assert_fail@plt+0x116f0>
   172e4:	mov	r7, r0
   172e8:	add	r0, r0, #1
   172ec:	cmp	r0, #2
   172f0:	bcc	1730c <__assert_fail@plt+0x5df4>
   172f4:	cmn	r7, #2
   172f8:	bne	17338 <__assert_fail@plt+0x5e20>
   172fc:	ldr	r0, [r4, #36]	; 0x24
   17300:	ldr	r1, [r4, #48]	; 0x30
   17304:	cmp	r0, r1
   17308:	blt	17420 <__assert_fail@plt+0x5f08>
   1730c:	ldr	r0, [r4]
   17310:	ldr	r1, [r4, #24]
   17314:	add	r1, r1, r6
   17318:	ldrb	r0, [r0, r1]
   1731c:	str	r0, [sp, #8]
   17320:	ldr	r1, [r4, #64]	; 0x40
   17324:	cmp	r1, #0
   17328:	bne	17414 <__assert_fail@plt+0x5efc>
   1732c:	ldr	r0, [sp, #4]
   17330:	stm	r9, {r0, r5}
   17334:	mov	r7, #1
   17338:	ldr	r0, [r4, #8]
   1733c:	ldr	r1, [sp, #8]
   17340:	str	r1, [r0, r6, lsl #2]
   17344:	add	r1, r7, r6
   17348:	add	r5, r6, #1
   1734c:	cmp	r5, r1
   17350:	bge	17390 <__assert_fail@plt+0x5e78>
   17354:	mvn	r1, #3
   17358:	add	r2, r1, r7, lsl #2
   1735c:	add	r0, r0, r6, lsl #2
   17360:	add	r0, r0, #4
   17364:	mov	r1, #255	; 0xff
   17368:	bl	11428 <memset@plt>
   1736c:	sub	r1, r7, #1
   17370:	mov	r6, r5
   17374:	mov	r0, r8
   17378:	subs	r1, r1, #1
   1737c:	add	r6, r6, #1
   17380:	bne	17378 <__assert_fail@plt+0x5e60>
   17384:	cmp	sl, r6
   17388:	bgt	172b0 <__assert_fail@plt+0x5d98>
   1738c:	b	17428 <__assert_fail@plt+0x5f10>
   17390:	mov	r6, r5
   17394:	mov	r0, r8
   17398:	cmp	sl, r6
   1739c:	bgt	172b0 <__assert_fail@plt+0x5d98>
   173a0:	b	17428 <__assert_fail@plt+0x5f10>
   173a4:	cmp	r2, #1
   173a8:	add	r1, sp, #12
   173ac:	blt	172d8 <__assert_fail@plt+0x5dc0>
   173b0:	ldr	r1, [r4, #80]	; 0x50
   173b4:	cmp	r1, #1
   173b8:	add	r1, sp, #12
   173bc:	blt	172d8 <__assert_fail@plt+0x5dc0>
   173c0:	mov	r7, #0
   173c4:	ldr	lr, [r4]
   173c8:	ldr	ip, [r4, #4]
   173cc:	ldr	r1, [r4, #24]
   173d0:	ldr	r3, [r4, #64]	; 0x40
   173d4:	add	r1, lr, r1
   173d8:	add	r1, r1, r6
   173dc:	ldrb	r1, [r1, r7]
   173e0:	ldrb	r1, [r3, r1]
   173e4:	add	r3, ip, r6
   173e8:	strb	r1, [r3, r7]
   173ec:	add	r3, sp, #12
   173f0:	strb	r1, [r3, r7]
   173f4:	add	r7, r7, #1
   173f8:	cmp	r7, r2
   173fc:	bge	1740c <__assert_fail@plt+0x5ef4>
   17400:	ldr	r1, [r4, #80]	; 0x50
   17404:	cmp	r7, r1
   17408:	blt	173c4 <__assert_fail@plt+0x5eac>
   1740c:	add	r1, sp, #12
   17410:	b	172d8 <__assert_fail@plt+0x5dc0>
   17414:	ldrb	r0, [r1, r0]
   17418:	str	r0, [sp, #8]
   1741c:	b	1732c <__assert_fail@plt+0x5e14>
   17420:	ldr	r0, [sp, #4]
   17424:	stm	r9, {r0, r5}
   17428:	str	r6, [r4, #28]
   1742c:	str	r6, [r4, #32]
   17430:	sub	sp, fp, #28
   17434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17438:	push	{r4, sl, fp, lr}
   1743c:	add	fp, sp, #8
   17440:	ldr	r1, [r0, #28]
   17444:	ldr	ip, [r0, #36]	; 0x24
   17448:	ldr	r3, [r0, #48]	; 0x30
   1744c:	cmp	ip, r3
   17450:	movgt	ip, r3
   17454:	cmp	r1, ip
   17458:	bge	17484 <__assert_fail@plt+0x5f6c>
   1745c:	ldm	r0, {r3, lr}
   17460:	ldr	r2, [r0, #24]
   17464:	ldr	r4, [r0, #64]	; 0x40
   17468:	add	r2, r3, r2
   1746c:	ldrb	r2, [r2, r1]
   17470:	ldrb	r2, [r4, r2]
   17474:	strb	r2, [lr, r1]
   17478:	add	r1, r1, #1
   1747c:	cmp	r1, ip
   17480:	blt	1745c <__assert_fail@plt+0x5f44>
   17484:	str	r1, [r0, #28]
   17488:	str	r1, [r0, #32]
   1748c:	pop	{r4, sl, fp, pc}
   17490:	push	{r4, sl, fp, lr}
   17494:	add	fp, sp, #8
   17498:	mov	r4, r1
   1749c:	bl	17650 <__assert_fail@plt+0x6138>
   174a0:	ldr	r1, [r4, #40]	; 0x28
   174a4:	add	r0, r1, r0
   174a8:	str	r0, [r4, #40]	; 0x28
   174ac:	pop	{r4, sl, fp, pc}
   174b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174b4:	add	fp, sp, #28
   174b8:	sub	sp, sp, #28
   174bc:	mov	r5, r2
   174c0:	mov	sl, r0
   174c4:	ldr	r4, [r1]
   174c8:	ldr	r0, [r4, #84]	; 0x54
   174cc:	str	r0, [sp, #12]
   174d0:	ldr	r7, [fp, #12]
   174d4:	str	r7, [sp, #4]
   174d8:	ldr	r8, [fp, #8]
   174dc:	str	r8, [sp]
   174e0:	mov	r0, sl
   174e4:	str	r1, [sp, #16]
   174e8:	str	r3, [sp, #20]
   174ec:	bl	17ee8 <__assert_fail@plt+0x69d0>
   174f0:	mov	r6, r0
   174f4:	cmp	r0, #0
   174f8:	bne	17508 <__assert_fail@plt+0x5ff0>
   174fc:	ldr	r0, [r7]
   17500:	cmp	r0, #0
   17504:	bne	17610 <__assert_fail@plt+0x60f8>
   17508:	ldr	r0, [sp, #20]
   1750c:	orr	r7, r0, #8388608	; 0x800000
   17510:	b	17544 <__assert_fail@plt+0x602c>
   17514:	ldr	r0, [r4, #84]	; 0x54
   17518:	ldr	r1, [sp, #24]
   1751c:	orr	r0, r0, r1
   17520:	str	r0, [r4, #84]	; 0x54
   17524:	mov	r8, r9
   17528:	mov	r0, r4
   1752c:	mov	r1, r6
   17530:	mov	r3, #10
   17534:	bl	17618 <__assert_fail@plt+0x6100>
   17538:	mov	r6, r0
   1753c:	cmp	r0, #0
   17540:	beq	17604 <__assert_fail@plt+0x60ec>
   17544:	ldrb	r0, [r5, #4]
   17548:	cmp	r0, #10
   1754c:	bne	175f4 <__assert_fail@plt+0x60dc>
   17550:	mov	r0, r5
   17554:	mov	r1, sl
   17558:	mov	r2, r7
   1755c:	bl	17490 <__assert_fail@plt+0x5f78>
   17560:	ldrb	r0, [r5, #4]
   17564:	orr	r1, r0, #8
   17568:	mov	r2, #0
   1756c:	cmp	r1, #10
   17570:	beq	17528 <__assert_fail@plt+0x6010>
   17574:	cmp	r8, #0
   17578:	beq	17584 <__assert_fail@plt+0x606c>
   1757c:	cmp	r0, #9
   17580:	beq	17528 <__assert_fail@plt+0x6010>
   17584:	ldr	r0, [r4, #84]	; 0x54
   17588:	str	r0, [sp, #24]
   1758c:	ldr	r0, [sp, #12]
   17590:	str	r0, [r4, #84]	; 0x54
   17594:	mov	r9, r8
   17598:	str	r8, [sp]
   1759c:	ldr	r8, [fp, #12]
   175a0:	str	r8, [sp, #4]
   175a4:	mov	r0, sl
   175a8:	ldr	r1, [sp, #16]
   175ac:	mov	r2, r5
   175b0:	ldr	r3, [sp, #20]
   175b4:	bl	17ee8 <__assert_fail@plt+0x69d0>
   175b8:	mov	r2, r0
   175bc:	cmp	r0, #0
   175c0:	bne	17514 <__assert_fail@plt+0x5ffc>
   175c4:	ldr	r0, [r8]
   175c8:	cmp	r0, #0
   175cc:	beq	17514 <__assert_fail@plt+0x5ffc>
   175d0:	cmp	r6, #0
   175d4:	beq	17610 <__assert_fail@plt+0x60f8>
   175d8:	movw	r1, #32980	; 0x80d4
   175dc:	movt	r1, #1
   175e0:	mov	r4, #0
   175e4:	mov	r0, r6
   175e8:	mov	r2, #0
   175ec:	bl	1805c <__assert_fail@plt+0x6b44>
   175f0:	b	175f8 <__assert_fail@plt+0x60e0>
   175f4:	mov	r4, r6
   175f8:	mov	r0, r4
   175fc:	sub	sp, fp, #28
   17600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17604:	mov	r0, #12
   17608:	ldr	r1, [fp, #12]
   1760c:	str	r0, [r1]
   17610:	mov	r4, #0
   17614:	b	175f8 <__assert_fail@plt+0x60e0>
   17618:	push	{fp, lr}
   1761c:	mov	fp, sp
   17620:	sub	sp, sp, #8
   17624:	mov	ip, #0
   17628:	str	ip, [sp]
   1762c:	uxtb	ip, r3
   17630:	ldr	r3, [sp, #4]
   17634:	bfc	r3, #0, #23
   17638:	orr	r3, r3, ip
   1763c:	str	r3, [sp, #4]
   17640:	mov	r3, sp
   17644:	bl	18694 <__assert_fail@plt+0x717c>
   17648:	mov	sp, fp
   1764c:	pop	{fp, pc}
   17650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17654:	add	fp, sp, #28
   17658:	sub	sp, sp, #12
   1765c:	mov	r7, r1
   17660:	mov	sl, r0
   17664:	ldr	r0, [r1, #40]	; 0x28
   17668:	ldr	r1, [r1, #56]	; 0x38
   1766c:	cmp	r1, r0
   17670:	ble	1774c <__assert_fail@plt+0x6234>
   17674:	mov	r9, r2
   17678:	ldr	r1, [r7, #4]
   1767c:	ldrb	r6, [r1, r0]
   17680:	mov	r5, sl
   17684:	strb	r6, [r5], #4
   17688:	ldr	r4, [r5]
   1768c:	bic	r0, r4, #6291456	; 0x600000
   17690:	str	r0, [r5]
   17694:	ldr	r0, [r7, #80]	; 0x50
   17698:	movw	r8, #65280	; 0xff00
   1769c:	movt	r8, #65439	; 0xff9f
   176a0:	cmp	r0, #2
   176a4:	blt	176c8 <__assert_fail@plt+0x61b0>
   176a8:	ldr	r1, [r7, #28]
   176ac:	ldr	r0, [r7, #40]	; 0x28
   176b0:	cmp	r0, r1
   176b4:	beq	176c8 <__assert_fail@plt+0x61b0>
   176b8:	ldr	r1, [r7, #8]
   176bc:	ldr	r0, [r1, r0, lsl #2]
   176c0:	cmn	r0, #1
   176c4:	beq	17b80 <__assert_fail@plt+0x6668>
   176c8:	cmp	r6, #92	; 0x5c
   176cc:	bne	1775c <__assert_fail@plt+0x6244>
   176d0:	ldr	r0, [r7, #40]	; 0x28
   176d4:	ldr	r1, [r7, #48]	; 0x30
   176d8:	add	r0, r0, #1
   176dc:	cmp	r0, r1
   176e0:	bge	177b0 <__assert_fail@plt+0x6298>
   176e4:	mov	r0, r7
   176e8:	bl	17e04 <__assert_fail@plt+0x68ec>
   176ec:	mov	r6, r0
   176f0:	strb	r0, [sl]
   176f4:	and	r0, r4, r8
   176f8:	orr	r4, r0, #1
   176fc:	str	r4, [sl, #4]
   17700:	ldr	r0, [r7, #80]	; 0x50
   17704:	cmp	r0, #2
   17708:	blt	179d4 <__assert_fail@plt+0x64bc>
   1770c:	ldr	r0, [r7, #40]	; 0x28
   17710:	add	r1, r0, #1
   17714:	mov	r0, r7
   17718:	bl	17ec4 <__assert_fail@plt+0x69ac>
   1771c:	mov	r7, r0
   17720:	bl	11410 <iswalnum@plt>
   17724:	cmp	r0, #0
   17728:	movwne	r0, #1
   1772c:	sub	r1, r7, #95	; 0x5f
   17730:	clz	r1, r1
   17734:	lsr	r1, r1, #5
   17738:	orr	r0, r1, r0
   1773c:	ldr	r1, [r5]
   17740:	bic	r1, r1, #4194304	; 0x400000
   17744:	orr	r0, r1, r0, lsl #22
   17748:	b	179f4 <__assert_fail@plt+0x64dc>
   1774c:	mov	r0, #2
   17750:	strb	r0, [sl, #4]
   17754:	mov	r8, #0
   17758:	b	17df8 <__assert_fail@plt+0x68e0>
   1775c:	and	r0, r4, r8
   17760:	orr	r4, r0, #1
   17764:	str	r4, [r5]
   17768:	ldr	r0, [r7, #80]	; 0x50
   1776c:	cmp	r0, #2
   17770:	blt	177bc <__assert_fail@plt+0x62a4>
   17774:	ldr	r1, [r7, #40]	; 0x28
   17778:	mov	r0, r7
   1777c:	bl	17ec4 <__assert_fail@plt+0x69ac>
   17780:	mov	r4, r0
   17784:	bl	11410 <iswalnum@plt>
   17788:	cmp	r0, #0
   1778c:	movwne	r0, #1
   17790:	sub	r1, r4, #95	; 0x5f
   17794:	clz	r1, r1
   17798:	lsr	r1, r1, #5
   1779c:	orr	r0, r1, r0
   177a0:	ldr	r1, [r5]
   177a4:	bic	r1, r1, #4194304	; 0x400000
   177a8:	orr	r0, r1, r0, lsl #22
   177ac:	b	177dc <__assert_fail@plt+0x62c4>
   177b0:	and	r0, r4, r8
   177b4:	orr	r0, r0, #36	; 0x24
   177b8:	b	17b8c <__assert_fail@plt+0x6674>
   177bc:	bl	113c8 <__ctype_b_loc@plt>
   177c0:	ldr	r0, [r0]
   177c4:	add	r0, r0, r6, lsl #1
   177c8:	ldrh	r0, [r0]
   177cc:	ubfx	r0, r0, #3, #1
   177d0:	cmp	r6, #95	; 0x5f
   177d4:	movweq	r0, #1
   177d8:	orr	r0, r4, r0, lsl #22
   177dc:	str	r0, [r5]
   177e0:	sub	r1, r6, #10
   177e4:	mov	r8, #1
   177e8:	cmp	r1, #115	; 0x73
   177ec:	bhi	17df8 <__assert_fail@plt+0x68e0>
   177f0:	add	r2, pc, #0
   177f4:	ldr	pc, [r2, r1, lsl #2]
   177f8:	andeq	r7, r1, r8, asr #19
   177fc:	strdeq	r7, [r1], -r8
   17800:	strdeq	r7, [r1], -r8
   17804:	strdeq	r7, [r1], -r8
   17808:	strdeq	r7, [r1], -r8
   1780c:	strdeq	r7, [r1], -r8
   17810:	strdeq	r7, [r1], -r8
   17814:	strdeq	r7, [r1], -r8
   17818:	strdeq	r7, [r1], -r8
   1781c:	strdeq	r7, [r1], -r8
   17820:	strdeq	r7, [r1], -r8
   17824:	strdeq	r7, [r1], -r8
   17828:	strdeq	r7, [r1], -r8
   1782c:	strdeq	r7, [r1], -r8
   17830:	strdeq	r7, [r1], -r8
   17834:	strdeq	r7, [r1], -r8
   17838:	strdeq	r7, [r1], -r8
   1783c:	strdeq	r7, [r1], -r8
   17840:	strdeq	r7, [r1], -r8
   17844:	strdeq	r7, [r1], -r8
   17848:	strdeq	r7, [r1], -r8
   1784c:	strdeq	r7, [r1], -r8
   17850:	strdeq	r7, [r1], -r8
   17854:	strdeq	r7, [r1], -r8
   17858:	strdeq	r7, [r1], -r8
   1785c:	strdeq	r7, [r1], -r8
   17860:	muleq	r1, r8, fp
   17864:	strdeq	r7, [r1], -r8
   17868:	strdeq	r7, [r1], -r8
   1786c:	strdeq	r7, [r1], -r8
   17870:	strdeq	r7, [r1], -r8
   17874:	andeq	r7, r1, r4, lsl #24
   17878:	andeq	r7, r1, r0, lsl ip
   1787c:	andeq	r7, r1, r8, lsl ip
   17880:	strdeq	r7, [r1], -r8
   17884:	strdeq	r7, [r1], -r8
   17888:	andeq	r7, r1, r8, lsr #24
   1788c:	strdeq	r7, [r1], -r8
   17890:	strdeq	r7, [r1], -r8
   17894:	strdeq	r7, [r1], -r8
   17898:	strdeq	r7, [r1], -r8
   1789c:	strdeq	r7, [r1], -r8
   178a0:	strdeq	r7, [r1], -r8
   178a4:	strdeq	r7, [r1], -r8
   178a8:	strdeq	r7, [r1], -r8
   178ac:	strdeq	r7, [r1], -r8
   178b0:	strdeq	r7, [r1], -r8
   178b4:	strdeq	r7, [r1], -r8
   178b8:	strdeq	r7, [r1], -r8
   178bc:	strdeq	r7, [r1], -r8
   178c0:	strdeq	r7, [r1], -r8
   178c4:	strdeq	r7, [r1], -r8
   178c8:	strdeq	r7, [r1], -r8
   178cc:	andeq	r7, r1, r0, lsr ip
   178d0:	strdeq	r7, [r1], -r8
   178d4:	strdeq	r7, [r1], -r8
   178d8:	strdeq	r7, [r1], -r8
   178dc:	strdeq	r7, [r1], -r8
   178e0:	strdeq	r7, [r1], -r8
   178e4:	strdeq	r7, [r1], -r8
   178e8:	strdeq	r7, [r1], -r8
   178ec:	strdeq	r7, [r1], -r8
   178f0:	strdeq	r7, [r1], -r8
   178f4:	strdeq	r7, [r1], -r8
   178f8:	strdeq	r7, [r1], -r8
   178fc:	strdeq	r7, [r1], -r8
   17900:	strdeq	r7, [r1], -r8
   17904:	strdeq	r7, [r1], -r8
   17908:	strdeq	r7, [r1], -r8
   1790c:	strdeq	r7, [r1], -r8
   17910:	strdeq	r7, [r1], -r8
   17914:	strdeq	r7, [r1], -r8
   17918:	strdeq	r7, [r1], -r8
   1791c:	strdeq	r7, [r1], -r8
   17920:	strdeq	r7, [r1], -r8
   17924:	strdeq	r7, [r1], -r8
   17928:	strdeq	r7, [r1], -r8
   1792c:	strdeq	r7, [r1], -r8
   17930:	strdeq	r7, [r1], -r8
   17934:	strdeq	r7, [r1], -r8
   17938:	strdeq	r7, [r1], -r8
   1793c:	andeq	r7, r1, r0, asr #24
   17940:	strdeq	r7, [r1], -r8
   17944:	strdeq	r7, [r1], -r8
   17948:	andeq	r7, r1, r8, asr #24
   1794c:	strdeq	r7, [r1], -r8
   17950:	strdeq	r7, [r1], -r8
   17954:	strdeq	r7, [r1], -r8
   17958:	strdeq	r7, [r1], -r8
   1795c:	strdeq	r7, [r1], -r8
   17960:	strdeq	r7, [r1], -r8
   17964:	strdeq	r7, [r1], -r8
   17968:	strdeq	r7, [r1], -r8
   1796c:	strdeq	r7, [r1], -r8
   17970:	strdeq	r7, [r1], -r8
   17974:	strdeq	r7, [r1], -r8
   17978:	strdeq	r7, [r1], -r8
   1797c:	strdeq	r7, [r1], -r8
   17980:	strdeq	r7, [r1], -r8
   17984:	strdeq	r7, [r1], -r8
   17988:	strdeq	r7, [r1], -r8
   1798c:	strdeq	r7, [r1], -r8
   17990:	strdeq	r7, [r1], -r8
   17994:	strdeq	r7, [r1], -r8
   17998:	strdeq	r7, [r1], -r8
   1799c:	strdeq	r7, [r1], -r8
   179a0:	strdeq	r7, [r1], -r8
   179a4:	strdeq	r7, [r1], -r8
   179a8:	strdeq	r7, [r1], -r8
   179ac:	strdeq	r7, [r1], -r8
   179b0:	strdeq	r7, [r1], -r8
   179b4:	strdeq	r7, [r1], -r8
   179b8:	strdeq	r7, [r1], -r8
   179bc:	andeq	r7, r1, r0, ror ip
   179c0:	andeq	r7, r1, r0, lsl #25
   179c4:	muleq	r1, r4, ip
   179c8:	tst	r9, #2048	; 0x800
   179cc:	bne	17c8c <__assert_fail@plt+0x6774>
   179d0:	b	17df8 <__assert_fail@plt+0x68e0>
   179d4:	bl	113c8 <__ctype_b_loc@plt>
   179d8:	ldr	r0, [r0]
   179dc:	add	r0, r0, r6, lsl #1
   179e0:	ldrh	r0, [r0]
   179e4:	ubfx	r0, r0, #3, #1
   179e8:	cmp	r6, #95	; 0x5f
   179ec:	movweq	r0, #1
   179f0:	orr	r0, r4, r0, lsl #22
   179f4:	str	r0, [r5]
   179f8:	sub	r1, r6, #39	; 0x27
   179fc:	mov	r8, #2
   17a00:	cmp	r1, #86	; 0x56
   17a04:	bhi	17df8 <__assert_fail@plt+0x68e0>
   17a08:	add	r2, pc, #0
   17a0c:	ldr	pc, [r2, r1, lsl #2]
   17a10:	ldrdeq	r7, [r1], -r0
   17a14:	andeq	r7, r1, r0, ror #25
   17a18:	strdeq	r7, [r1], -r0
   17a1c:	strdeq	r7, [r1], -r8
   17a20:	andeq	r7, r1, r0, lsl #26
   17a24:	strdeq	r7, [r1], -r8
   17a28:	strdeq	r7, [r1], -r8
   17a2c:	strdeq	r7, [r1], -r8
   17a30:	strdeq	r7, [r1], -r8
   17a34:	strdeq	r7, [r1], -r8
   17a38:	andeq	r7, r1, ip, ror #22
   17a3c:	andeq	r7, r1, ip, ror #22
   17a40:	andeq	r7, r1, ip, ror #22
   17a44:	andeq	r7, r1, ip, ror #22
   17a48:	andeq	r7, r1, ip, ror #22
   17a4c:	andeq	r7, r1, ip, ror #22
   17a50:	andeq	r7, r1, ip, ror #22
   17a54:	andeq	r7, r1, ip, ror #22
   17a58:	andeq	r7, r1, ip, ror #22
   17a5c:	strdeq	r7, [r1], -r8
   17a60:	strdeq	r7, [r1], -r8
   17a64:	andeq	r7, r1, r8, lsl sp
   17a68:	strdeq	r7, [r1], -r8
   17a6c:	andeq	r7, r1, r8, lsr #26
   17a70:	andeq	r7, r1, r8, lsr sp
   17a74:	strdeq	r7, [r1], -r8
   17a78:	strdeq	r7, [r1], -r8
   17a7c:	andeq	r7, r1, r0, asr sp
   17a80:	strdeq	r7, [r1], -r8
   17a84:	strdeq	r7, [r1], -r8
   17a88:	strdeq	r7, [r1], -r8
   17a8c:	strdeq	r7, [r1], -r8
   17a90:	strdeq	r7, [r1], -r8
   17a94:	strdeq	r7, [r1], -r8
   17a98:	strdeq	r7, [r1], -r8
   17a9c:	strdeq	r7, [r1], -r8
   17aa0:	strdeq	r7, [r1], -r8
   17aa4:	strdeq	r7, [r1], -r8
   17aa8:	strdeq	r7, [r1], -r8
   17aac:	strdeq	r7, [r1], -r8
   17ab0:	strdeq	r7, [r1], -r8
   17ab4:	strdeq	r7, [r1], -r8
   17ab8:	strdeq	r7, [r1], -r8
   17abc:	strdeq	r7, [r1], -r8
   17ac0:	andeq	r7, r1, r0, ror #26
   17ac4:	strdeq	r7, [r1], -r8
   17ac8:	strdeq	r7, [r1], -r8
   17acc:	strdeq	r7, [r1], -r8
   17ad0:	andeq	r7, r1, r0, ror sp
   17ad4:	strdeq	r7, [r1], -r8
   17ad8:	strdeq	r7, [r1], -r8
   17adc:	strdeq	r7, [r1], -r8
   17ae0:	strdeq	r7, [r1], -r8
   17ae4:	strdeq	r7, [r1], -r8
   17ae8:	strdeq	r7, [r1], -r8
   17aec:	strdeq	r7, [r1], -r8
   17af0:	strdeq	r7, [r1], -r8
   17af4:	andeq	r7, r1, r0, lsl #27
   17af8:	strdeq	r7, [r1], -r8
   17afc:	muleq	r1, r0, sp
   17b00:	strdeq	r7, [r1], -r8
   17b04:	strdeq	r7, [r1], -r8
   17b08:	strdeq	r7, [r1], -r8
   17b0c:	strdeq	r7, [r1], -r8
   17b10:	strdeq	r7, [r1], -r8
   17b14:	strdeq	r7, [r1], -r8
   17b18:	strdeq	r7, [r1], -r8
   17b1c:	strdeq	r7, [r1], -r8
   17b20:	strdeq	r7, [r1], -r8
   17b24:	strdeq	r7, [r1], -r8
   17b28:	strdeq	r7, [r1], -r8
   17b2c:	strdeq	r7, [r1], -r8
   17b30:	strdeq	r7, [r1], -r8
   17b34:	strdeq	r7, [r1], -r8
   17b38:	strdeq	r7, [r1], -r8
   17b3c:	strdeq	r7, [r1], -r8
   17b40:	andeq	r7, r1, r0, lsr #27
   17b44:	strdeq	r7, [r1], -r8
   17b48:	strdeq	r7, [r1], -r8
   17b4c:	strdeq	r7, [r1], -r8
   17b50:			; <UNDEFINED> instruction: 0x00017db0
   17b54:	strdeq	r7, [r1], -r8
   17b58:	strdeq	r7, [r1], -r8
   17b5c:	strdeq	r7, [r1], -r8
   17b60:	andeq	r7, r1, r0, asr #27
   17b64:	ldrdeq	r7, [r1], -r4
   17b68:	andeq	r7, r1, r0, ror #27
   17b6c:	tst	r9, #16384	; 0x4000
   17b70:	bne	17df8 <__assert_fail@plt+0x68e0>
   17b74:	sub	r1, r6, #49	; 0x31
   17b78:	mov	r2, #4
   17b7c:	b	17c60 <__assert_fail@plt+0x6748>
   17b80:	and	r0, r4, r8
   17b84:	orr	r0, r0, #1
   17b88:	orr	r0, r0, #2097152	; 0x200000
   17b8c:	str	r0, [r5]
   17b90:	mov	r8, #1
   17b94:	b	17df8 <__assert_fail@plt+0x68e0>
   17b98:	tst	r9, #8
   17b9c:	bne	17be4 <__assert_fail@plt+0x66cc>
   17ba0:	ldr	r0, [r7, #40]	; 0x28
   17ba4:	ldr	r1, [r7, #48]	; 0x30
   17ba8:	add	r0, r0, #1
   17bac:	cmp	r0, r1
   17bb0:	beq	17be4 <__assert_fail@plt+0x66cc>
   17bb4:	str	r0, [r7, #40]	; 0x28
   17bb8:	add	r0, sp, #4
   17bbc:	mov	r1, r7
   17bc0:	mov	r2, r9
   17bc4:	bl	17650 <__assert_fail@plt+0x6138>
   17bc8:	ldr	r0, [r7, #40]	; 0x28
   17bcc:	sub	r0, r0, #1
   17bd0:	str	r0, [r7, #40]	; 0x28
   17bd4:	ldrb	r0, [sp, #8]
   17bd8:	sub	r0, r0, #9
   17bdc:	cmp	r0, #1
   17be0:	bhi	17df8 <__assert_fail@plt+0x68e0>
   17be4:	mov	r0, #32
   17be8:	str	r0, [sl]
   17bec:	mov	r0, #12
   17bf0:	strb	r0, [sl, #4]
   17bf4:	b	17df8 <__assert_fail@plt+0x68e0>
   17bf8:	tst	r9, #8192	; 0x2000
   17bfc:	bne	17ce8 <__assert_fail@plt+0x67d0>
   17c00:	b	17df8 <__assert_fail@plt+0x68e0>
   17c04:	tst	r9, #8192	; 0x2000
   17c08:	bne	17cf8 <__assert_fail@plt+0x67e0>
   17c0c:	b	17df8 <__assert_fail@plt+0x68e0>
   17c10:	mov	r1, #11
   17c14:	b	17df0 <__assert_fail@plt+0x68d8>
   17c18:	movw	r1, #1026	; 0x402
   17c1c:	tst	r9, r1
   17c20:	bne	17df8 <__assert_fail@plt+0x68e0>
   17c24:	b	17d10 <__assert_fail@plt+0x67f8>
   17c28:	mov	r1, #5
   17c2c:	b	17df0 <__assert_fail@plt+0x68d8>
   17c30:	movw	r1, #1026	; 0x402
   17c34:	tst	r9, r1
   17c38:	bne	17df8 <__assert_fail@plt+0x68e0>
   17c3c:	b	17d48 <__assert_fail@plt+0x6830>
   17c40:	mov	r1, #20
   17c44:	b	17df0 <__assert_fail@plt+0x68d8>
   17c48:	movw	r1, #8
   17c4c:	movt	r1, #128	; 0x80
   17c50:	tst	r9, r1
   17c54:	beq	17ca4 <__assert_fail@plt+0x678c>
   17c58:	mov	r1, #16
   17c5c:	mov	r2, #12
   17c60:	bfi	r0, r2, #0, #8
   17c64:	str	r1, [sl]
   17c68:	str	r0, [sl, #4]
   17c6c:	b	17df8 <__assert_fail@plt+0x68e0>
   17c70:	and	r1, r9, #4608	; 0x1200
   17c74:	cmp	r1, #4608	; 0x1200
   17c78:	beq	17dcc <__assert_fail@plt+0x68b4>
   17c7c:	b	17df8 <__assert_fail@plt+0x68e0>
   17c80:	and	r1, r9, #33792	; 0x8400
   17c84:	cmp	r1, #32768	; 0x8000
   17c88:	bne	17df8 <__assert_fail@plt+0x68e0>
   17c8c:	mov	r1, #10
   17c90:	b	17df0 <__assert_fail@plt+0x68d8>
   17c94:	and	r1, r9, #4608	; 0x1200
   17c98:	cmp	r1, #4608	; 0x1200
   17c9c:	beq	17dec <__assert_fail@plt+0x68d4>
   17ca0:	b	17df8 <__assert_fail@plt+0x68e0>
   17ca4:	ldr	r1, [r7, #40]	; 0x28
   17ca8:	cmp	r1, #0
   17cac:	beq	17c58 <__assert_fail@plt+0x6740>
   17cb0:	tst	r9, #2048	; 0x800
   17cb4:	beq	17df8 <__assert_fail@plt+0x68e0>
   17cb8:	ldr	r2, [r7, #4]
   17cbc:	add	r1, r1, r2
   17cc0:	ldrb	r1, [r1, #-1]
   17cc4:	cmp	r1, #10
   17cc8:	beq	17c58 <__assert_fail@plt+0x6740>
   17ccc:	b	17df8 <__assert_fail@plt+0x68e0>
   17cd0:	tst	r9, #524288	; 0x80000
   17cd4:	bne	17df8 <__assert_fail@plt+0x68e0>
   17cd8:	mov	r1, #128	; 0x80
   17cdc:	b	17c5c <__assert_fail@plt+0x6744>
   17ce0:	tst	r9, #8192	; 0x2000
   17ce4:	bne	17df8 <__assert_fail@plt+0x68e0>
   17ce8:	mov	r1, #8
   17cec:	b	17df0 <__assert_fail@plt+0x68d8>
   17cf0:	tst	r9, #8192	; 0x2000
   17cf4:	bne	17df8 <__assert_fail@plt+0x68e0>
   17cf8:	mov	r1, #9
   17cfc:	b	17df0 <__assert_fail@plt+0x68d8>
   17d00:	movw	r1, #1026	; 0x402
   17d04:	and	r1, r9, r1
   17d08:	cmp	r1, #2
   17d0c:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d10:	mov	r1, #18
   17d14:	b	17df0 <__assert_fail@plt+0x68d8>
   17d18:	tst	r9, #524288	; 0x80000
   17d1c:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d20:	mov	r1, #6
   17d24:	b	17c5c <__assert_fail@plt+0x6744>
   17d28:	tst	r9, #524288	; 0x80000
   17d2c:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d30:	mov	r1, #9
   17d34:	b	17c5c <__assert_fail@plt+0x6744>
   17d38:	movw	r1, #1026	; 0x402
   17d3c:	and	r1, r9, r1
   17d40:	cmp	r1, #2
   17d44:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d48:	mov	r1, #19
   17d4c:	b	17df0 <__assert_fail@plt+0x68d8>
   17d50:	tst	r9, #524288	; 0x80000
   17d54:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d58:	mov	r1, #512	; 0x200
   17d5c:	b	17c5c <__assert_fail@plt+0x6744>
   17d60:	tst	r9, #524288	; 0x80000
   17d64:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d68:	mov	r1, #35	; 0x23
   17d6c:	b	17df0 <__assert_fail@plt+0x68d8>
   17d70:	tst	r9, #524288	; 0x80000
   17d74:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d78:	mov	r1, #33	; 0x21
   17d7c:	b	17df0 <__assert_fail@plt+0x68d8>
   17d80:	tst	r9, #524288	; 0x80000
   17d84:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d88:	mov	r1, #64	; 0x40
   17d8c:	b	17c5c <__assert_fail@plt+0x6744>
   17d90:	tst	r9, #524288	; 0x80000
   17d94:	bne	17df8 <__assert_fail@plt+0x68e0>
   17d98:	mov	r1, #256	; 0x100
   17d9c:	b	17c5c <__assert_fail@plt+0x6744>
   17da0:	tst	r9, #524288	; 0x80000
   17da4:	bne	17df8 <__assert_fail@plt+0x68e0>
   17da8:	mov	r1, #34	; 0x22
   17dac:	b	17df0 <__assert_fail@plt+0x68d8>
   17db0:	tst	r9, #524288	; 0x80000
   17db4:	bne	17df8 <__assert_fail@plt+0x68e0>
   17db8:	mov	r1, #32
   17dbc:	b	17df0 <__assert_fail@plt+0x68d8>
   17dc0:	and	r1, r9, #4608	; 0x1200
   17dc4:	cmp	r1, #512	; 0x200
   17dc8:	bne	17df8 <__assert_fail@plt+0x68e0>
   17dcc:	mov	r1, #23
   17dd0:	b	17df0 <__assert_fail@plt+0x68d8>
   17dd4:	tst	r9, #33792	; 0x8400
   17dd8:	bne	17df8 <__assert_fail@plt+0x68e0>
   17ddc:	b	17c8c <__assert_fail@plt+0x6774>
   17de0:	and	r1, r9, #4608	; 0x1200
   17de4:	cmp	r1, #512	; 0x200
   17de8:	bne	17df8 <__assert_fail@plt+0x68e0>
   17dec:	mov	r1, #24
   17df0:	bfi	r0, r1, #0, #8
   17df4:	str	r0, [r5]
   17df8:	mov	r0, r8
   17dfc:	sub	sp, fp, #28
   17e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e04:	push	{fp, lr}
   17e08:	mov	fp, sp
   17e0c:	ldrb	r1, [r0, #75]	; 0x4b
   17e10:	cmp	r1, #0
   17e14:	bne	17e34 <__assert_fail@plt+0x691c>
   17e18:	ldr	r1, [r0, #4]
   17e1c:	ldr	r0, [r0, #40]	; 0x28
   17e20:	add	r0, r0, r1
   17e24:	add	r0, r0, #1
   17e28:	ldrb	r3, [r0]
   17e2c:	uxtb	r0, r3
   17e30:	pop	{fp, pc}
   17e34:	ldr	r1, [r0, #80]	; 0x50
   17e38:	cmp	r1, #2
   17e3c:	blt	17e74 <__assert_fail@plt+0x695c>
   17e40:	ldr	r2, [r0, #8]
   17e44:	ldr	r3, [r0, #40]	; 0x28
   17e48:	add	ip, r3, #1
   17e4c:	ldr	r1, [r2, ip, lsl #2]
   17e50:	cmn	r1, #1
   17e54:	beq	17eb8 <__assert_fail@plt+0x69a0>
   17e58:	ldr	r1, [r0, #28]
   17e5c:	add	r3, r3, #2
   17e60:	cmp	r1, r3
   17e64:	beq	17e74 <__assert_fail@plt+0x695c>
   17e68:	ldr	r1, [r2, r3, lsl #2]
   17e6c:	cmn	r1, #1
   17e70:	beq	17eb8 <__assert_fail@plt+0x69a0>
   17e74:	ldrb	lr, [r0, #76]	; 0x4c
   17e78:	ldr	r1, [r0, #40]	; 0x28
   17e7c:	add	ip, r1, #1
   17e80:	cmp	lr, #0
   17e84:	mov	r3, ip
   17e88:	beq	17e94 <__assert_fail@plt+0x697c>
   17e8c:	ldr	r3, [r0, #12]
   17e90:	ldr	r3, [r3, ip, lsl #2]
   17e94:	ldr	r1, [r0]
   17e98:	ldr	r2, [r0, #24]
   17e9c:	add	r2, r2, r3
   17ea0:	add	r1, r1, r2
   17ea4:	ldrsb	r3, [r1]
   17ea8:	cmp	lr, #0
   17eac:	beq	17e2c <__assert_fail@plt+0x6914>
   17eb0:	cmn	r3, #1
   17eb4:	bgt	17e2c <__assert_fail@plt+0x6914>
   17eb8:	ldr	r0, [r0, #4]
   17ebc:	add	r0, r0, ip
   17ec0:	b	17e28 <__assert_fail@plt+0x6910>
   17ec4:	ldr	r2, [r0, #80]	; 0x50
   17ec8:	cmp	r2, #1
   17ecc:	bne	17edc <__assert_fail@plt+0x69c4>
   17ed0:	ldr	r0, [r0, #4]
   17ed4:	ldrb	r0, [r0, r1]
   17ed8:	bx	lr
   17edc:	ldr	r0, [r0, #8]
   17ee0:	ldr	r0, [r0, r1, lsl #2]
   17ee4:	bx	lr
   17ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eec:	add	fp, sp, #28
   17ef0:	sub	sp, sp, #20
   17ef4:	mov	r6, r2
   17ef8:	mov	r7, r1
   17efc:	mov	r1, r0
   17f00:	ldr	r0, [r7]
   17f04:	str	r0, [sp, #8]
   17f08:	ldr	r5, [fp, #12]
   17f0c:	str	r5, [sp, #4]
   17f10:	ldr	r4, [fp, #8]
   17f14:	str	r4, [sp]
   17f18:	str	r1, [sp, #12]
   17f1c:	mov	r0, r1
   17f20:	mov	r1, r7
   17f24:	str	r3, [sp, #16]
   17f28:	bl	180ec <__assert_fail@plt+0x6bd4>
   17f2c:	cmp	r0, #0
   17f30:	bne	17f68 <__assert_fail@plt+0x6a50>
   17f34:	ldr	r1, [r5]
   17f38:	cmp	r1, #0
   17f3c:	beq	17f68 <__assert_fail@plt+0x6a50>
   17f40:	mov	r6, #0
   17f44:	b	17fec <__assert_fail@plt+0x6ad4>
   17f48:	ldr	r0, [sp, #8]
   17f4c:	mov	r1, r5
   17f50:	mov	r2, r8
   17f54:	mov	r3, #16
   17f58:	bl	17618 <__assert_fail@plt+0x6100>
   17f5c:	cmp	r0, #0
   17f60:	mov	r4, r9
   17f64:	beq	17ff8 <__assert_fail@plt+0x6ae0>
   17f68:	mov	r5, r0
   17f6c:	ldrb	r0, [r6, #4]
   17f70:	orr	r1, r0, #8
   17f74:	cmp	r1, #10
   17f78:	beq	17fe8 <__assert_fail@plt+0x6ad0>
   17f7c:	cmp	r4, #0
   17f80:	beq	17f8c <__assert_fail@plt+0x6a74>
   17f84:	cmp	r0, #9
   17f88:	beq	17fe8 <__assert_fail@plt+0x6ad0>
   17f8c:	mov	r9, r4
   17f90:	str	r4, [sp]
   17f94:	ldr	sl, [fp, #12]
   17f98:	str	sl, [sp, #4]
   17f9c:	ldr	r0, [sp, #12]
   17fa0:	mov	r1, r7
   17fa4:	mov	r2, r6
   17fa8:	ldr	r3, [sp, #16]
   17fac:	bl	180ec <__assert_fail@plt+0x6bd4>
   17fb0:	mov	r8, r0
   17fb4:	cmp	r0, #0
   17fb8:	bne	17fc8 <__assert_fail@plt+0x6ab0>
   17fbc:	ldr	r0, [sl]
   17fc0:	cmp	r0, #0
   17fc4:	bne	18034 <__assert_fail@plt+0x6b1c>
   17fc8:	cmp	r5, #0
   17fcc:	cmpne	r8, #0
   17fd0:	bne	17f48 <__assert_fail@plt+0x6a30>
   17fd4:	cmp	r5, #0
   17fd8:	movne	r8, r5
   17fdc:	mov	r0, r8
   17fe0:	mov	r4, r9
   17fe4:	b	17f68 <__assert_fail@plt+0x6a50>
   17fe8:	mov	r6, r5
   17fec:	mov	r0, r6
   17ff0:	sub	sp, fp, #28
   17ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ff8:	movw	r4, #32980	; 0x80d4
   17ffc:	movt	r4, #1
   18000:	mov	r6, #0
   18004:	mov	r0, r8
   18008:	mov	r1, r4
   1800c:	mov	r2, #0
   18010:	bl	1805c <__assert_fail@plt+0x6b44>
   18014:	mov	r0, r5
   18018:	mov	r1, r4
   1801c:	mov	r2, #0
   18020:	bl	1805c <__assert_fail@plt+0x6b44>
   18024:	mov	r0, #12
   18028:	ldr	r1, [fp, #12]
   1802c:	str	r0, [r1]
   18030:	b	17fec <__assert_fail@plt+0x6ad4>
   18034:	cmp	r5, #0
   18038:	mov	r6, #0
   1803c:	beq	17fec <__assert_fail@plt+0x6ad4>
   18040:	movw	r1, #32980	; 0x80d4
   18044:	movt	r1, #1
   18048:	mov	r6, #0
   1804c:	mov	r0, r5
   18050:	mov	r2, #0
   18054:	bl	1805c <__assert_fail@plt+0x6b44>
   18058:	b	17fec <__assert_fail@plt+0x6ad4>
   1805c:	push	{r4, r5, r6, sl, fp, lr}
   18060:	add	fp, sp, #16
   18064:	mov	r4, r2
   18068:	mov	r5, r1
   1806c:	b	18074 <__assert_fail@plt+0x6b5c>
   18070:	ldr	r0, [r6, #8]
   18074:	mov	r6, r0
   18078:	ldr	r0, [r0, #4]
   1807c:	cmp	r0, #0
   18080:	bne	18074 <__assert_fail@plt+0x6b5c>
   18084:	ldr	r0, [r6, #8]
   18088:	cmp	r0, #0
   1808c:	bne	18070 <__assert_fail@plt+0x6b58>
   18090:	mov	r0, r4
   18094:	mov	r1, r6
   18098:	blx	r5
   1809c:	cmp	r0, #0
   180a0:	bne	180d0 <__assert_fail@plt+0x6bb8>
   180a4:	ldr	r1, [r6]
   180a8:	cmp	r1, #0
   180ac:	beq	180d0 <__assert_fail@plt+0x6bb8>
   180b0:	ldr	r0, [r1, #8]
   180b4:	cmp	r0, r6
   180b8:	mov	r6, r1
   180bc:	beq	18090 <__assert_fail@plt+0x6b78>
   180c0:	cmp	r0, #0
   180c4:	mov	r6, r1
   180c8:	beq	18090 <__assert_fail@plt+0x6b78>
   180cc:	b	18074 <__assert_fail@plt+0x6b5c>
   180d0:	pop	{r4, r5, r6, sl, fp, pc}
   180d4:	push	{fp, lr}
   180d8:	mov	fp, sp
   180dc:	add	r0, r1, #20
   180e0:	bl	16094 <__assert_fail@plt+0x4b7c>
   180e4:	mov	r0, #0
   180e8:	pop	{fp, pc}
   180ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180f0:	add	fp, sp, #28
   180f4:	sub	sp, sp, #12
   180f8:	mov	r9, r3
   180fc:	mov	r5, r2
   18100:	mov	r6, r1
   18104:	mov	sl, r0
   18108:	and	ip, r3, #16
   1810c:	and	r8, r3, #32
   18110:	and	r0, r3, #16777216	; 0x1000000
   18114:	str	r0, [sp, #8]
   18118:	ldr	r3, [fp, #12]
   1811c:	ldr	r4, [fp, #8]
   18120:	mvn	r1, #0
   18124:	ldr	r0, [r5, #4]
   18128:	uxtab	r1, r1, r0
   1812c:	ldr	r7, [r6]
   18130:	add	r2, pc, #0
   18134:	ldr	pc, [r2, r1, lsl #2]
   18138:	andeq	r8, r1, r0, asr #5
   1813c:	andeq	r8, r1, r8, ror r6
   18140:	muleq	r1, r4, r6
   18144:	andeq	r8, r1, ip, ror r3
   18148:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1814c:	muleq	r1, r4, r6
   18150:	muleq	r1, r4, r6
   18154:	andeq	r8, r1, ip, lsl r4
   18158:	andeq	r8, r1, r8, ror r2
   1815c:	andeq	r8, r1, r8, ror r6
   18160:	ldrdeq	r8, [r1], -r4
   18164:	andeq	r8, r1, r4, asr #8
   18168:	muleq	r1, r4, r6
   1816c:	muleq	r1, r4, r6
   18170:	muleq	r1, r4, r6
   18174:	muleq	r1, r4, r6
   18178:	muleq	r1, r4, r6
   1817c:	ldrdeq	r8, [r1], -r4
   18180:	ldrdeq	r8, [r1], -r4
   18184:	andeq	r8, r1, r4, lsl #9
   18188:	muleq	r1, r4, r6
   1818c:	muleq	r1, r4, r6
   18190:	andeq	r8, r1, r8, asr #3
   18194:	andeq	r8, r1, r8, lsl #5
   18198:	muleq	r1, r4, r6
   1819c:	muleq	r1, r4, r6
   181a0:	muleq	r1, r4, r6
   181a4:	muleq	r1, r4, r6
   181a8:	muleq	r1, r4, r6
   181ac:	muleq	r1, r4, r6
   181b0:	muleq	r1, r4, r6
   181b4:	andeq	r8, r1, r8, lsl #4
   181b8:	andeq	r8, r1, r8, lsl #4
   181bc:	andeq	r8, r1, ip, lsr r2
   181c0:	andeq	r8, r1, ip, lsr r2
   181c4:	andeq	r8, r1, ip, ror r5
   181c8:	ldr	r1, [sp, #8]
   181cc:	cmp	r1, #0
   181d0:	bne	18648 <__assert_fail@plt+0x7130>
   181d4:	cmp	r8, #0
   181d8:	bne	18648 <__assert_fail@plt+0x7130>
   181dc:	cmp	ip, #0
   181e0:	beq	18278 <__assert_fail@plt+0x6d60>
   181e4:	mov	r0, r5
   181e8:	mov	r1, sl
   181ec:	mov	r2, r9
   181f0:	mov	r7, ip
   181f4:	bl	17490 <__assert_fail@plt+0x5f78>
   181f8:	mvn	r1, #0
   181fc:	mov	ip, r7
   18200:	ldr	r3, [fp, #12]
   18204:	b	18124 <__assert_fail@plt+0x6c0c>
   18208:	mov	r8, sl
   1820c:	ldr	r1, [sl, #64]	; 0x40
   18210:	mvn	r2, #32
   18214:	uxtab	r0, r2, r0
   18218:	clz	r0, r0
   1821c:	lsr	r0, r0, #5
   18220:	stm	sp, {r0, r3}
   18224:	movw	r2, #16222	; 0x3f5e
   18228:	movt	r2, #2
   1822c:	mov	r4, r3
   18230:	movw	r3, #14721	; 0x3981
   18234:	movt	r3, #2
   18238:	b	1826c <__assert_fail@plt+0x6d54>
   1823c:	mov	r8, sl
   18240:	ldr	r1, [sl, #64]	; 0x40
   18244:	mvn	r2, #34	; 0x22
   18248:	uxtab	r0, r2, r0
   1824c:	clz	r0, r0
   18250:	lsr	r0, r0, #5
   18254:	stm	sp, {r0, r3}
   18258:	movw	r2, #16228	; 0x3f64
   1825c:	movt	r2, #2
   18260:	mov	r4, r3
   18264:	movw	r3, #15062	; 0x3ad6
   18268:	movt	r3, #2
   1826c:	mov	r0, r7
   18270:	bl	18e5c <__assert_fail@plt+0x7944>
   18274:	b	184a4 <__assert_fail@plt+0x6f8c>
   18278:	tst	r9, #131072	; 0x20000
   1827c:	uxtbeq	r1, r0
   18280:	cmpeq	r1, #9
   18284:	beq	18588 <__assert_fail@plt+0x7070>
   18288:	mov	r1, #1
   1828c:	bfi	r0, r1, #0, #8
   18290:	str	r0, [r5, #4]
   18294:	mov	r4, #0
   18298:	mov	r0, r7
   1829c:	mov	r1, #0
   182a0:	mov	r2, #0
   182a4:	mov	r3, r5
   182a8:	bl	18694 <__assert_fail@plt+0x717c>
   182ac:	mov	r6, r0
   182b0:	cmp	r0, #0
   182b4:	mov	r8, sl
   182b8:	bne	184bc <__assert_fail@plt+0x6fa4>
   182bc:	b	185fc <__assert_fail@plt+0x70e4>
   182c0:	mov	r4, #0
   182c4:	mov	r0, r7
   182c8:	mov	r1, #0
   182cc:	mov	r2, #0
   182d0:	mov	r3, r5
   182d4:	bl	18694 <__assert_fail@plt+0x717c>
   182d8:	cmp	r0, #0
   182dc:	beq	185fc <__assert_fail@plt+0x70e4>
   182e0:	mov	r6, r0
   182e4:	ldr	r0, [r7, #92]	; 0x5c
   182e8:	cmp	r0, #2
   182ec:	mov	r8, sl
   182f0:	blt	184bc <__assert_fail@plt+0x6fa4>
   182f4:	ldr	r0, [r8, #40]	; 0x28
   182f8:	ldr	r1, [r8, #56]	; 0x38
   182fc:	cmp	r1, r0
   18300:	ble	184bc <__assert_fail@plt+0x6fa4>
   18304:	ldr	r1, [r8, #28]
   18308:	cmp	r0, r1
   1830c:	beq	184bc <__assert_fail@plt+0x6fa4>
   18310:	ldr	r1, [r8, #8]
   18314:	ldr	r0, [r1, r0, lsl #2]
   18318:	cmn	r0, #1
   1831c:	bne	184bc <__assert_fail@plt+0x6fa4>
   18320:	mov	r0, r5
   18324:	mov	r1, r8
   18328:	mov	r2, r9
   1832c:	bl	17490 <__assert_fail@plt+0x5f78>
   18330:	mov	r0, r7
   18334:	mov	r1, #0
   18338:	mov	r2, #0
   1833c:	mov	r3, r5
   18340:	bl	18694 <__assert_fail@plt+0x717c>
   18344:	mov	r4, r0
   18348:	mov	r0, r7
   1834c:	mov	r1, r6
   18350:	mov	r2, r4
   18354:	mov	r3, #16
   18358:	bl	17618 <__assert_fail@plt+0x6100>
   1835c:	cmp	r4, #0
   18360:	ldr	r1, [fp, #12]
   18364:	movne	r6, r0
   18368:	cmpne	r0, #0
   1836c:	bne	182f4 <__assert_fail@plt+0x6ddc>
   18370:	mov	r0, #12
   18374:	str	r0, [r1]
   18378:	b	18678 <__assert_fail@plt+0x7160>
   1837c:	ldr	r0, [r5]
   18380:	mov	r1, #1
   18384:	ldr	r2, [r7, #84]	; 0x54
   18388:	tst	r2, r1, lsl r0
   1838c:	beq	18688 <__assert_fail@plt+0x7170>
   18390:	lsl	r0, r1, r0
   18394:	ldr	r1, [r7, #80]	; 0x50
   18398:	orr	r0, r1, r0
   1839c:	str	r0, [r7, #80]	; 0x50
   183a0:	mov	r4, #0
   183a4:	mov	r0, r7
   183a8:	mov	r1, #0
   183ac:	mov	r2, #0
   183b0:	mov	r3, r5
   183b4:	bl	18694 <__assert_fail@plt+0x717c>
   183b8:	cmp	r0, #0
   183bc:	beq	185fc <__assert_fail@plt+0x70e4>
   183c0:	mov	r6, r0
   183c4:	mov	r8, sl
   183c8:	ldr	r0, [r7, #76]	; 0x4c
   183cc:	add	r0, r0, #1
   183d0:	str	r0, [r7, #76]	; 0x4c
   183d4:	b	1840c <__assert_fail@plt+0x6ef4>
   183d8:	mov	r4, #0
   183dc:	mov	r0, r7
   183e0:	mov	r1, #0
   183e4:	mov	r2, #0
   183e8:	mov	r3, r5
   183ec:	bl	18694 <__assert_fail@plt+0x717c>
   183f0:	cmp	r0, #0
   183f4:	beq	185fc <__assert_fail@plt+0x70e4>
   183f8:	mov	r6, r0
   183fc:	ldr	r0, [r7, #92]	; 0x5c
   18400:	cmp	r0, #2
   18404:	mov	r8, sl
   18408:	blt	184bc <__assert_fail@plt+0x6fa4>
   1840c:	ldrb	r0, [r7, #88]	; 0x58
   18410:	orr	r0, r0, #2
   18414:	strb	r0, [r7, #88]	; 0x58
   18418:	b	184bc <__assert_fail@plt+0x6fa4>
   1841c:	add	r0, r4, #1
   18420:	stm	sp, {r0, r3}
   18424:	mov	r8, sl
   18428:	mov	r0, sl
   1842c:	mov	r1, r6
   18430:	mov	r2, r5
   18434:	mov	r4, r3
   18438:	mov	r3, r9
   1843c:	bl	18740 <__assert_fail@plt+0x7228>
   18440:	b	184a4 <__assert_fail@plt+0x6f8c>
   18444:	ldr	r0, [r5]
   18448:	movw	r1, #783	; 0x30f
   1844c:	tst	r0, r1
   18450:	beq	18468 <__assert_fail@plt+0x6f50>
   18454:	ldrb	r0, [r7, #88]	; 0x58
   18458:	tst	r0, #16
   1845c:	moveq	r0, r7
   18460:	bleq	18d74 <__assert_fail@plt+0x785c>
   18464:	ldr	r0, [r5]
   18468:	cmp	r0, #256	; 0x100
   1846c:	beq	18594 <__assert_fail@plt+0x707c>
   18470:	cmp	r0, #512	; 0x200
   18474:	bne	1860c <__assert_fail@plt+0x70f4>
   18478:	mov	r6, #10
   1847c:	mov	r0, #5
   18480:	b	1859c <__assert_fail@plt+0x7084>
   18484:	str	r3, [sp]
   18488:	mov	r8, sl
   1848c:	mov	r0, sl
   18490:	mov	r1, r7
   18494:	mov	r2, r5
   18498:	mov	r4, r3
   1849c:	mov	r3, r9
   184a0:	bl	18858 <__assert_fail@plt+0x7340>
   184a4:	mov	r6, r0
   184a8:	cmp	r0, #0
   184ac:	bne	184bc <__assert_fail@plt+0x6fa4>
   184b0:	ldr	r0, [r4]
   184b4:	cmp	r0, #0
   184b8:	bne	18678 <__assert_fail@plt+0x7160>
   184bc:	mov	r0, r5
   184c0:	mov	r1, r8
   184c4:	mov	r2, r9
   184c8:	bl	17490 <__assert_fail@plt+0x5f78>
   184cc:	mov	r4, #1
   184d0:	movw	r8, #2048	; 0x800
   184d4:	movt	r8, #140	; 0x8c
   184d8:	ldr	r2, [fp, #12]
   184dc:	ldrb	r0, [r5, #4]
   184e0:	cmp	r0, #23
   184e4:	bhi	18574 <__assert_fail@plt+0x705c>
   184e8:	tst	r8, r4, lsl r0
   184ec:	beq	18574 <__assert_fail@plt+0x705c>
   184f0:	str	r9, [sp]
   184f4:	str	r2, [sp, #4]
   184f8:	mov	r0, r6
   184fc:	mov	r1, sl
   18500:	mov	r2, r7
   18504:	mov	r3, r5
   18508:	bl	1904c <__assert_fail@plt+0x7b34>
   1850c:	ldr	r2, [fp, #12]
   18510:	cmp	r0, #0
   18514:	bne	18524 <__assert_fail@plt+0x700c>
   18518:	ldr	r1, [r2]
   1851c:	cmp	r1, #0
   18520:	bne	18654 <__assert_fail@plt+0x713c>
   18524:	ldr	r1, [sp, #8]
   18528:	cmp	r1, #0
   1852c:	mov	r6, r0
   18530:	beq	184dc <__assert_fail@plt+0x6fc4>
   18534:	ldrb	r1, [r5, #4]
   18538:	cmp	r1, #23
   1853c:	beq	1854c <__assert_fail@plt+0x7034>
   18540:	cmp	r1, #11
   18544:	mov	r6, r0
   18548:	bne	184dc <__assert_fail@plt+0x6fc4>
   1854c:	cmp	r0, #0
   18550:	beq	18568 <__assert_fail@plt+0x7050>
   18554:	movw	r1, #32980	; 0x80d4
   18558:	movt	r1, #1
   1855c:	mov	r2, #0
   18560:	bl	1805c <__assert_fail@plt+0x6b44>
   18564:	ldr	r2, [fp, #12]
   18568:	mov	r0, #13
   1856c:	str	r0, [r2]
   18570:	b	18678 <__assert_fail@plt+0x7160>
   18574:	mov	r4, r6
   18578:	b	1867c <__assert_fail@plt+0x7164>
   1857c:	mov	r0, #5
   18580:	str	r0, [r3]
   18584:	b	18678 <__assert_fail@plt+0x7160>
   18588:	mov	r0, #16
   1858c:	str	r0, [r3]
   18590:	b	18678 <__assert_fail@plt+0x7160>
   18594:	mov	r6, #9
   18598:	mov	r0, #6
   1859c:	str	r0, [r5]
   185a0:	mov	r4, #0
   185a4:	mov	r0, r7
   185a8:	mov	r1, #0
   185ac:	mov	r2, #0
   185b0:	mov	r3, r5
   185b4:	bl	18694 <__assert_fail@plt+0x717c>
   185b8:	mov	r8, r0
   185bc:	str	r6, [r5]
   185c0:	mov	r0, r7
   185c4:	mov	r1, #0
   185c8:	mov	r2, #0
   185cc:	mov	r3, r5
   185d0:	bl	18694 <__assert_fail@plt+0x717c>
   185d4:	mov	r1, r0
   185d8:	mov	r0, r7
   185dc:	mov	r7, r1
   185e0:	mov	r1, r8
   185e4:	mov	r2, r7
   185e8:	mov	r3, #10
   185ec:	bl	17618 <__assert_fail@plt+0x6100>
   185f0:	cmp	r8, #0
   185f4:	cmpne	r7, #0
   185f8:	bne	18624 <__assert_fail@plt+0x710c>
   185fc:	mov	r0, #12
   18600:	ldr	r1, [fp, #12]
   18604:	str	r0, [r1]
   18608:	b	1867c <__assert_fail@plt+0x7164>
   1860c:	mov	r4, #0
   18610:	mov	r0, r7
   18614:	mov	r1, #0
   18618:	mov	r2, #0
   1861c:	mov	r3, r5
   18620:	bl	18694 <__assert_fail@plt+0x717c>
   18624:	mov	r6, r0
   18628:	cmp	r0, #0
   1862c:	beq	185fc <__assert_fail@plt+0x70e4>
   18630:	mov	r0, r5
   18634:	mov	r1, sl
   18638:	mov	r2, r9
   1863c:	bl	17490 <__assert_fail@plt+0x5f78>
   18640:	mov	r4, r6
   18644:	b	1867c <__assert_fail@plt+0x7164>
   18648:	mov	r0, #13
   1864c:	str	r0, [r3]
   18650:	b	18678 <__assert_fail@plt+0x7160>
   18654:	cmp	r6, #0
   18658:	beq	18678 <__assert_fail@plt+0x7160>
   1865c:	movw	r1, #32980	; 0x80d4
   18660:	movt	r1, #1
   18664:	mov	r4, #0
   18668:	mov	r0, r6
   1866c:	mov	r2, #0
   18670:	bl	1805c <__assert_fail@plt+0x6b44>
   18674:	b	1867c <__assert_fail@plt+0x7164>
   18678:	mov	r4, #0
   1867c:	mov	r0, r4
   18680:	sub	sp, fp, #28
   18684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18688:	mov	r0, #6
   1868c:	ldr	r1, [fp, #12]
   18690:	b	18374 <__assert_fail@plt+0x6e5c>
   18694:	push	{r4, r5, r6, r7, fp, lr}
   18698:	add	fp, sp, #16
   1869c:	mov	r6, r3
   186a0:	mov	r4, r2
   186a4:	mov	r5, r1
   186a8:	mov	r7, r0
   186ac:	ldr	r0, [r0, #64]	; 0x40
   186b0:	cmp	r0, #31
   186b4:	beq	18710 <__assert_fail@plt+0x71f8>
   186b8:	ldr	r0, [r7, #56]	; 0x38
   186bc:	ldr	r1, [r7, #64]	; 0x40
   186c0:	add	r2, r1, #1
   186c4:	str	r2, [r7, #64]	; 0x40
   186c8:	add	r0, r0, r1, lsl #5
   186cc:	mov	r1, #0
   186d0:	str	r1, [r0, #4]!
   186d4:	str	r4, [r0, #8]
   186d8:	str	r5, [r0, #4]
   186dc:	ldm	r6, {r2, r3}
   186e0:	mvn	r7, #0
   186e4:	str	r7, [r0, #28]
   186e8:	str	r1, [r0, #16]
   186ec:	str	r1, [r0, #12]
   186f0:	str	r2, [r0, #20]
   186f4:	bic	r1, r3, #786432	; 0xc0000
   186f8:	str	r1, [r0, #24]
   186fc:	cmp	r5, #0
   18700:	strne	r0, [r5]
   18704:	cmp	r4, #0
   18708:	strne	r0, [r4]
   1870c:	pop	{r4, r5, r6, r7, fp, pc}
   18710:	mov	r0, #996	; 0x3e4
   18714:	bl	22668 <__assert_fail@plt+0x11150>
   18718:	cmp	r0, #0
   1871c:	beq	18738 <__assert_fail@plt+0x7220>
   18720:	ldr	r1, [r7, #56]	; 0x38
   18724:	str	r1, [r0]
   18728:	mov	r1, #0
   1872c:	str	r1, [r7, #64]	; 0x40
   18730:	str	r0, [r7, #56]	; 0x38
   18734:	b	186b8 <__assert_fail@plt+0x71a0>
   18738:	mov	r0, #0
   1873c:	pop	{r4, r5, r6, r7, fp, pc}
   18740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18744:	add	fp, sp, #28
   18748:	sub	sp, sp, #12
   1874c:	mov	r5, r3
   18750:	mov	r6, r2
   18754:	mov	r7, r1
   18758:	mov	r4, r0
   1875c:	ldr	r8, [r1]
   18760:	ldr	sl, [r1, #24]
   18764:	add	r0, sl, #1
   18768:	str	r0, [r1, #24]
   1876c:	orr	r2, r3, #8388608	; 0x800000
   18770:	mov	r0, r6
   18774:	mov	r1, r4
   18778:	bl	17490 <__assert_fail@plt+0x5f78>
   1877c:	ldrb	r0, [r6, #4]
   18780:	mov	r1, #0
   18784:	ldr	r9, [fp, #12]
   18788:	cmp	r0, #9
   1878c:	beq	187d8 <__assert_fail@plt+0x72c0>
   18790:	ldr	r0, [fp, #8]
   18794:	stm	sp, {r0, r9}
   18798:	mov	r0, r4
   1879c:	mov	r1, r7
   187a0:	mov	r2, r6
   187a4:	mov	r3, r5
   187a8:	bl	174b0 <__assert_fail@plt+0x5f98>
   187ac:	mov	r1, r0
   187b0:	ldr	r0, [r9]
   187b4:	mov	r5, #0
   187b8:	cmp	r0, #0
   187bc:	bne	18814 <__assert_fail@plt+0x72fc>
   187c0:	ldrb	r0, [r6, #4]
   187c4:	cmp	r0, #9
   187c8:	bne	1882c <__assert_fail@plt+0x7314>
   187cc:	ldr	r0, [r9]
   187d0:	cmp	r0, #0
   187d4:	bne	18814 <__assert_fail@plt+0x72fc>
   187d8:	cmp	sl, #8
   187dc:	bhi	187f0 <__assert_fail@plt+0x72d8>
   187e0:	ldr	r0, [r8, #84]	; 0x54
   187e4:	mov	r2, #1
   187e8:	orr	r0, r0, r2, lsl sl
   187ec:	str	r0, [r8, #84]	; 0x54
   187f0:	mov	r5, #0
   187f4:	mov	r0, r8
   187f8:	mov	r2, #0
   187fc:	mov	r3, #17
   18800:	bl	17618 <__assert_fail@plt+0x6100>
   18804:	cmp	r0, #0
   18808:	beq	18820 <__assert_fail@plt+0x7308>
   1880c:	str	sl, [r0, #20]
   18810:	mov	r5, r0
   18814:	mov	r0, r5
   18818:	sub	sp, fp, #28
   1881c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18820:	mov	r0, #12
   18824:	str	r0, [r9]
   18828:	b	18814 <__assert_fail@plt+0x72fc>
   1882c:	cmp	r1, #0
   18830:	beq	1884c <__assert_fail@plt+0x7334>
   18834:	movw	r2, #32980	; 0x80d4
   18838:	movt	r2, #1
   1883c:	mov	r0, r1
   18840:	mov	r1, r2
   18844:	mov	r2, #0
   18848:	bl	1805c <__assert_fail@plt+0x6b44>
   1884c:	mov	r0, #8
   18850:	str	r0, [r9]
   18854:	b	18814 <__assert_fail@plt+0x72fc>
   18858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1885c:	add	fp, sp, #28
   18860:	sub	sp, sp, #124	; 0x7c
   18864:	mov	r8, r3
   18868:	mov	r6, r2
   1886c:	mov	r9, r1
   18870:	mov	r7, r0
   18874:	mov	r5, #0
   18878:	str	r5, [fp, #-32]	; 0xffffffe0
   1887c:	str	r5, [fp, #-36]	; 0xffffffdc
   18880:	mov	r0, #32
   18884:	mov	r1, #1
   18888:	bl	22614 <__assert_fail@plt+0x110fc>
   1888c:	mov	r4, r0
   18890:	mov	r0, #40	; 0x28
   18894:	mov	r1, #1
   18898:	bl	22614 <__assert_fail@plt+0x110fc>
   1889c:	mov	sl, r0
   188a0:	cmp	r4, #0
   188a4:	cmpne	sl, #0
   188a8:	beq	18d2c <__assert_fail@plt+0x7814>
   188ac:	mov	r0, r6
   188b0:	mov	r1, r7
   188b4:	mov	r2, r8
   188b8:	bl	19380 <__assert_fail@plt+0x7e68>
   188bc:	mov	r5, r0
   188c0:	ldrb	r0, [r6, #4]
   188c4:	cmp	r0, #25
   188c8:	beq	188dc <__assert_fail@plt+0x73c4>
   188cc:	cmp	r0, #2
   188d0:	beq	18d24 <__assert_fail@plt+0x780c>
   188d4:	mov	r0, #0
   188d8:	b	18928 <__assert_fail@plt+0x7410>
   188dc:	ldrb	r0, [sl, #16]
   188e0:	orr	r0, r0, #1
   188e4:	strb	r0, [sl, #16]
   188e8:	tst	r8, #256	; 0x100
   188ec:	movne	r0, r4
   188f0:	movne	r1, #10
   188f4:	blne	194f4 <__assert_fail@plt+0x7fdc>
   188f8:	ldr	r0, [r7, #40]	; 0x28
   188fc:	add	r0, r0, r5
   18900:	str	r0, [r7, #40]	; 0x28
   18904:	mov	r0, r6
   18908:	mov	r1, r7
   1890c:	mov	r2, r8
   18910:	bl	19380 <__assert_fail@plt+0x7e68>
   18914:	mov	r5, r0
   18918:	ldrb	r0, [r6, #4]
   1891c:	cmp	r0, #2
   18920:	beq	18d24 <__assert_fail@plt+0x780c>
   18924:	mov	r0, #1
   18928:	str	r0, [sp, #20]
   1892c:	ldr	r0, [r6, #4]
   18930:	uxtb	r1, r0
   18934:	cmp	r1, #21
   18938:	moveq	r1, #1
   1893c:	bfieq	r0, r1, #0, #8
   18940:	streq	r0, [r6, #4]
   18944:	str	sl, [sp, #24]
   18948:	add	r0, sp, #68	; 0x44
   1894c:	str	r0, [fp, #-40]	; 0xffffffd8
   18950:	mov	r0, #3
   18954:	str	r0, [fp, #-44]	; 0xffffffd4
   18958:	mov	r0, #1
   1895c:	str	r8, [sp]
   18960:	str	r0, [sp, #4]
   18964:	sub	r0, fp, #44	; 0x2c
   18968:	mov	r1, r7
   1896c:	mov	r2, r6
   18970:	mov	r3, r5
   18974:	bl	19518 <__assert_fail@plt+0x8000>
   18978:	cmp	r0, #0
   1897c:	bne	18d14 <__assert_fail@plt+0x77fc>
   18980:	mov	r0, #0
   18984:	str	r0, [sp, #16]
   18988:	mov	r0, r6
   1898c:	mov	r1, r7
   18990:	mov	r2, r8
   18994:	bl	19380 <__assert_fail@plt+0x7e68>
   18998:	mov	sl, r0
   1899c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   189a0:	cmp	r5, #2
   189a4:	beq	18ac8 <__assert_fail@plt+0x75b0>
   189a8:	cmp	r5, #4
   189ac:	bne	189d0 <__assert_fail@plt+0x74b8>
   189b0:	ldr	r0, [r7, #64]	; 0x40
   189b4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   189b8:	stm	sp, {r1, r8}
   189bc:	mov	r1, r4
   189c0:	ldr	r2, [sp, #24]
   189c4:	sub	r3, fp, #36	; 0x24
   189c8:	bl	198b8 <__assert_fail@plt+0x83a0>
   189cc:	b	18ad4 <__assert_fail@plt+0x75bc>
   189d0:	ldrb	r0, [r6, #4]
   189d4:	cmp	r0, #22
   189d8:	beq	189e8 <__assert_fail@plt+0x74d0>
   189dc:	cmp	r0, #2
   189e0:	bne	18aa0 <__assert_fail@plt+0x7588>
   189e4:	b	18d10 <__assert_fail@plt+0x77f8>
   189e8:	ldr	r0, [r7, #40]	; 0x28
   189ec:	add	r0, r0, sl
   189f0:	str	r0, [r7, #40]	; 0x28
   189f4:	add	r0, sp, #28
   189f8:	mov	r1, r7
   189fc:	mov	r2, r8
   18a00:	bl	19380 <__assert_fail@plt+0x7e68>
   18a04:	mov	r3, r0
   18a08:	ldrb	r0, [sp, #32]
   18a0c:	cmp	r0, #21
   18a10:	beq	18a8c <__assert_fail@plt+0x7574>
   18a14:	cmp	r0, #2
   18a18:	sub	r1, fp, #52	; 0x34
   18a1c:	beq	18d10 <__assert_fail@plt+0x77f8>
   18a20:	mov	r0, #3
   18a24:	str	r0, [fp, #-52]	; 0xffffffcc
   18a28:	add	r0, sp, #36	; 0x24
   18a2c:	str	r0, [fp, #-48]	; 0xffffffd0
   18a30:	str	r8, [sp]
   18a34:	mov	r0, #1
   18a38:	str	r0, [sp, #4]
   18a3c:	mov	r0, r1
   18a40:	mov	r5, r1
   18a44:	mov	r1, r7
   18a48:	add	r2, sp, #28
   18a4c:	bl	19518 <__assert_fail@plt+0x8000>
   18a50:	cmp	r0, #0
   18a54:	bne	18d14 <__assert_fail@plt+0x77fc>
   18a58:	mov	r0, r6
   18a5c:	mov	r1, r7
   18a60:	mov	r2, r8
   18a64:	bl	19380 <__assert_fail@plt+0x7e68>
   18a68:	mov	sl, r0
   18a6c:	stm	sp, {r5, r9}
   18a70:	str	r8, [sp, #8]
   18a74:	mov	r0, r4
   18a78:	ldr	r1, [sp, #24]
   18a7c:	sub	r2, fp, #32
   18a80:	sub	r3, fp, #44	; 0x2c
   18a84:	bl	19620 <__assert_fail@plt+0x8108>
   18a88:	b	18ad4 <__assert_fail@plt+0x75bc>
   18a8c:	ldr	r0, [r7, #40]	; 0x28
   18a90:	sub	r0, r0, sl
   18a94:	str	r0, [r7, #40]	; 0x28
   18a98:	mov	r0, #1
   18a9c:	strb	r0, [r6, #4]
   18aa0:	add	r0, pc, #0
   18aa4:	ldr	pc, [r0, r5, lsl #2]
   18aa8:			; <UNDEFINED> instruction: 0x00018ab8
   18aac:	andeq	r8, r1, r4, lsr fp
   18ab0:	andeq	r8, r1, r8, asr #21
   18ab4:	andeq	r8, r1, r4, ror #22
   18ab8:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   18abc:	mov	r0, r4
   18ac0:	bl	194f4 <__assert_fail@plt+0x7fdc>
   18ac4:	b	18ae4 <__assert_fail@plt+0x75cc>
   18ac8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18acc:	mov	r0, r4
   18ad0:	bl	19840 <__assert_fail@plt+0x8328>
   18ad4:	ldr	r1, [fp, #8]
   18ad8:	str	r0, [r1]
   18adc:	cmp	r0, #0
   18ae0:	bne	18d1c <__assert_fail@plt+0x7804>
   18ae4:	ldrb	r0, [r6, #4]
   18ae8:	cmp	r0, #21
   18aec:	beq	18b9c <__assert_fail@plt+0x7684>
   18af0:	cmp	r0, #2
   18af4:	beq	18d10 <__assert_fail@plt+0x77f8>
   18af8:	add	r0, sp, #68	; 0x44
   18afc:	str	r0, [fp, #-40]	; 0xffffffd8
   18b00:	mov	r0, #3
   18b04:	str	r0, [fp, #-44]	; 0xffffffd4
   18b08:	str	r8, [sp]
   18b0c:	mov	r0, #0
   18b10:	str	r0, [sp, #4]
   18b14:	sub	r0, fp, #44	; 0x2c
   18b18:	mov	r1, r7
   18b1c:	mov	r2, r6
   18b20:	mov	r3, sl
   18b24:	bl	19518 <__assert_fail@plt+0x8000>
   18b28:	cmp	r0, #0
   18b2c:	beq	18988 <__assert_fail@plt+0x7470>
   18b30:	b	18d14 <__assert_fail@plt+0x77fc>
   18b34:	ldr	r5, [sp, #24]
   18b38:	ldr	r0, [r5, #20]
   18b3c:	ldr	r1, [sp, #16]
   18b40:	cmp	r1, r0
   18b44:	beq	18b74 <__assert_fail@plt+0x765c>
   18b48:	ldr	r0, [r5]
   18b4c:	ldr	r1, [r5, #20]
   18b50:	add	r2, r1, #1
   18b54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18b58:	str	r2, [r5, #20]
   18b5c:	str	r3, [r0, r1, lsl #2]
   18b60:	b	18ae4 <__assert_fail@plt+0x75cc>
   18b64:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18b68:	mov	r0, r4
   18b6c:	bl	1987c <__assert_fail@plt+0x8364>
   18b70:	b	18ad4 <__assert_fail@plt+0x75bc>
   18b74:	mov	r1, #1
   18b78:	orr	r0, r1, r0, lsl #1
   18b7c:	str	r0, [sp, #16]
   18b80:	lsl	r1, r0, #2
   18b84:	ldr	r0, [r5]
   18b88:	bl	22698 <__assert_fail@plt+0x11180>
   18b8c:	cmp	r0, #0
   18b90:	beq	18d4c <__assert_fail@plt+0x7834>
   18b94:	str	r0, [r5]
   18b98:	b	18b48 <__assert_fail@plt+0x7630>
   18b9c:	ldr	r0, [r7, #40]	; 0x28
   18ba0:	add	r0, r0, sl
   18ba4:	str	r0, [r7, #40]	; 0x28
   18ba8:	ldr	r0, [sp, #20]
   18bac:	cmp	r0, #0
   18bb0:	movne	r0, r4
   18bb4:	blne	1a114 <__assert_fail@plt+0x8bfc>
   18bb8:	ldr	r0, [r9, #92]	; 0x5c
   18bbc:	cmp	r0, #2
   18bc0:	ldr	sl, [sp, #24]
   18bc4:	blt	18bd4 <__assert_fail@plt+0x76bc>
   18bc8:	ldr	r1, [r9, #60]	; 0x3c
   18bcc:	mov	r0, r4
   18bd0:	bl	1a134 <__assert_fail@plt+0x8c1c>
   18bd4:	ldr	r0, [sl, #20]
   18bd8:	cmp	r0, #0
   18bdc:	bne	18c04 <__assert_fail@plt+0x76ec>
   18be0:	ldr	r0, [sl, #24]
   18be4:	cmp	r0, #0
   18be8:	bne	18c04 <__assert_fail@plt+0x76ec>
   18bec:	ldr	r0, [sl, #28]
   18bf0:	cmp	r0, #0
   18bf4:	bne	18c04 <__assert_fail@plt+0x76ec>
   18bf8:	ldr	r0, [sl, #32]
   18bfc:	cmp	r0, #0
   18c00:	beq	18cc0 <__assert_fail@plt+0x77a8>
   18c04:	ldrb	r0, [r9, #88]	; 0x58
   18c08:	orr	r0, r0, #2
   18c0c:	strb	r0, [r9, #88]	; 0x58
   18c10:	str	sl, [sp, #68]	; 0x44
   18c14:	ldr	r7, [sp, #72]	; 0x48
   18c18:	mov	r0, #6
   18c1c:	strb	r0, [sp, #72]	; 0x48
   18c20:	mov	r6, #0
   18c24:	add	r3, sp, #68	; 0x44
   18c28:	mov	r0, r9
   18c2c:	mov	r1, #0
   18c30:	mov	r2, #0
   18c34:	bl	18694 <__assert_fail@plt+0x717c>
   18c38:	cmp	r0, #0
   18c3c:	beq	18d50 <__assert_fail@plt+0x7838>
   18c40:	mov	r5, r0
   18c44:	bic	r0, r7, #255	; 0xff
   18c48:	ldr	r1, [r4, r6, lsl #2]
   18c4c:	cmp	r1, #0
   18c50:	bne	18c6c <__assert_fail@plt+0x7754>
   18c54:	add	r6, r6, #1
   18c58:	cmp	r6, #8
   18c5c:	bne	18c48 <__assert_fail@plt+0x7730>
   18c60:	mov	r0, r4
   18c64:	bl	22b58 <__assert_fail@plt+0x11640>
   18c68:	b	18cb4 <__assert_fail@plt+0x779c>
   18c6c:	str	r4, [sp, #68]	; 0x44
   18c70:	orr	r0, r0, #3
   18c74:	str	r0, [sp, #72]	; 0x48
   18c78:	add	r3, sp, #68	; 0x44
   18c7c:	mov	r0, r9
   18c80:	mov	r1, #0
   18c84:	mov	r2, #0
   18c88:	bl	18694 <__assert_fail@plt+0x717c>
   18c8c:	cmp	r0, #0
   18c90:	beq	18d50 <__assert_fail@plt+0x7838>
   18c94:	mov	r1, r0
   18c98:	mov	r0, r9
   18c9c:	mov	r2, r5
   18ca0:	mov	r3, #10
   18ca4:	bl	17618 <__assert_fail@plt+0x6100>
   18ca8:	mov	r5, r0
   18cac:	cmp	r0, #0
   18cb0:	beq	18d50 <__assert_fail@plt+0x7838>
   18cb4:	mov	r0, r5
   18cb8:	sub	sp, fp, #28
   18cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cc0:	ldr	r0, [r9, #92]	; 0x5c
   18cc4:	cmp	r0, #2
   18cc8:	blt	18ce4 <__assert_fail@plt+0x77cc>
   18ccc:	ldr	r0, [sl, #36]	; 0x24
   18cd0:	cmp	r0, #0
   18cd4:	bne	18c04 <__assert_fail@plt+0x76ec>
   18cd8:	ldrb	r0, [sl, #16]
   18cdc:	tst	r0, #1
   18ce0:	bne	18c04 <__assert_fail@plt+0x76ec>
   18ce4:	mov	r0, sl
   18ce8:	bl	16124 <__assert_fail@plt+0x4c0c>
   18cec:	str	r4, [sp, #68]	; 0x44
   18cf0:	mov	r0, #3
   18cf4:	strb	r0, [sp, #72]	; 0x48
   18cf8:	add	r3, sp, #68	; 0x44
   18cfc:	mov	r0, r9
   18d00:	mov	r1, #0
   18d04:	mov	r2, #0
   18d08:	bl	18694 <__assert_fail@plt+0x717c>
   18d0c:	b	18ca8 <__assert_fail@plt+0x7790>
   18d10:	mov	r0, #7
   18d14:	ldr	r1, [fp, #8]
   18d18:	str	r0, [r1]
   18d1c:	ldr	sl, [sp, #24]
   18d20:	b	18d5c <__assert_fail@plt+0x7844>
   18d24:	mov	r0, #2
   18d28:	b	18d54 <__assert_fail@plt+0x783c>
   18d2c:	mov	r0, r4
   18d30:	bl	22b58 <__assert_fail@plt+0x11640>
   18d34:	mov	r0, sl
   18d38:	bl	22b58 <__assert_fail@plt+0x11640>
   18d3c:	mov	r0, #12
   18d40:	ldr	r1, [fp, #8]
   18d44:	str	r0, [r1]
   18d48:	b	18cb4 <__assert_fail@plt+0x779c>
   18d4c:	mov	sl, r5
   18d50:	mov	r0, #12
   18d54:	ldr	r1, [fp, #8]
   18d58:	str	r0, [r1]
   18d5c:	mov	r0, r4
   18d60:	bl	22b58 <__assert_fail@plt+0x11640>
   18d64:	mov	r0, sl
   18d68:	bl	16124 <__assert_fail@plt+0x4c0c>
   18d6c:	mov	r5, #0
   18d70:	b	18cb4 <__assert_fail@plt+0x779c>
   18d74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18d78:	add	fp, sp, #24
   18d7c:	mov	r4, r0
   18d80:	ldrb	r0, [r0, #88]	; 0x58
   18d84:	orr	r1, r0, #16
   18d88:	strb	r1, [r4, #88]	; 0x58
   18d8c:	tst	r0, #8
   18d90:	bne	18dd0 <__assert_fail@plt+0x78b8>
   18d94:	mvn	r1, #-134217727	; 0xf8000001
   18d98:	mvn	r2, #2013265921	; 0x78000001
   18d9c:	movw	r3, #0
   18da0:	movt	r3, #1023	; 0x3ff
   18da4:	mov	r7, #0
   18da8:	str	r7, [r4, #96]	; 0x60
   18dac:	str	r3, [r4, #100]	; 0x64
   18db0:	str	r2, [r4, #104]	; 0x68
   18db4:	str	r1, [r4, #108]	; 0x6c
   18db8:	tst	r0, #4
   18dbc:	beq	18ddc <__assert_fail@plt+0x78c4>
   18dc0:	vmov.i32	q8, #0	; 0x00000000
   18dc4:	add	r0, r4, #112	; 0x70
   18dc8:	vst1.32	{d16-d17}, [r0]
   18dcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18dd0:	mov	r5, #0
   18dd4:	mov	r8, #0
   18dd8:	b	18de4 <__assert_fail@plt+0x78cc>
   18ddc:	mov	r8, #4
   18de0:	mov	r5, #128	; 0x80
   18de4:	bl	113c8 <__ctype_b_loc@plt>
   18de8:	ldr	r0, [r0]
   18dec:	add	r6, r0, r5, lsl #1
   18df0:	mov	r1, #1
   18df4:	b	18e0c <__assert_fail@plt+0x78f4>
   18df8:	add	r6, r6, #64	; 0x40
   18dfc:	add	r8, r8, #1
   18e00:	add	r5, r5, #32
   18e04:	cmp	r8, #8
   18e08:	beq	18e58 <__assert_fail@plt+0x7940>
   18e0c:	add	r0, r4, r8, lsl #2
   18e10:	add	r2, r0, #96	; 0x60
   18e14:	mov	r3, #0
   18e18:	mov	r0, r6
   18e1c:	b	18e3c <__assert_fail@plt+0x7924>
   18e20:	ldr	r7, [r2]
   18e24:	orr	r7, r7, r1, lsl r3
   18e28:	str	r7, [r2]
   18e2c:	add	r0, r0, #2
   18e30:	add	r3, r3, #1
   18e34:	cmp	r3, #32
   18e38:	beq	18df8 <__assert_fail@plt+0x78e0>
   18e3c:	add	r7, r5, r3
   18e40:	cmp	r7, #95	; 0x5f
   18e44:	beq	18e20 <__assert_fail@plt+0x7908>
   18e48:	ldrh	r7, [r0]
   18e4c:	ands	r7, r7, #8
   18e50:	beq	18e2c <__assert_fail@plt+0x7914>
   18e54:	b	18e20 <__assert_fail@plt+0x7908>
   18e58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e60:	add	fp, sp, #28
   18e64:	sub	sp, sp, #20
   18e68:	mov	r8, r3
   18e6c:	mov	r6, r2
   18e70:	mov	r4, r1
   18e74:	mov	r9, r0
   18e78:	mov	r7, #0
   18e7c:	str	r7, [sp, #16]
   18e80:	mov	r0, #32
   18e84:	mov	r1, #1
   18e88:	bl	22614 <__assert_fail@plt+0x110fc>
   18e8c:	ldr	r1, [fp, #12]
   18e90:	cmp	r0, #0
   18e94:	beq	19004 <__assert_fail@plt+0x7aec>
   18e98:	mov	r5, r0
   18e9c:	mov	r0, #40	; 0x28
   18ea0:	mov	r1, #1
   18ea4:	bl	22614 <__assert_fail@plt+0x110fc>
   18ea8:	cmp	r0, #0
   18eac:	beq	19010 <__assert_fail@plt+0x7af8>
   18eb0:	mov	sl, r0
   18eb4:	ldr	r1, [fp, #8]
   18eb8:	ldrb	r0, [r0, #16]
   18ebc:	and	r0, r0, #254	; 0xfe
   18ec0:	orr	r0, r0, r1
   18ec4:	strb	r0, [sl, #16]
   18ec8:	mov	r7, #0
   18ecc:	stm	sp, {r6, r7}
   18ed0:	add	r3, sp, #16
   18ed4:	mov	r0, r4
   18ed8:	mov	r1, r5
   18edc:	mov	r2, sl
   18ee0:	bl	198b8 <__assert_fail@plt+0x83a0>
   18ee4:	cmp	r0, #0
   18ee8:	bne	1902c <__assert_fail@plt+0x7b14>
   18eec:	ldrb	r0, [r8]
   18ef0:	cmp	r0, #0
   18ef4:	beq	18f14 <__assert_fail@plt+0x79fc>
   18ef8:	add	r4, r8, #1
   18efc:	uxtb	r1, r0
   18f00:	mov	r0, r5
   18f04:	bl	194f4 <__assert_fail@plt+0x7fdc>
   18f08:	ldrb	r0, [r4], #1
   18f0c:	cmp	r0, #0
   18f10:	bne	18efc <__assert_fail@plt+0x79e4>
   18f14:	ldr	r0, [fp, #8]
   18f18:	cmp	r0, #0
   18f1c:	movne	r0, r5
   18f20:	blne	1a114 <__assert_fail@plt+0x8bfc>
   18f24:	ldr	r0, [r9, #92]	; 0x5c
   18f28:	cmp	r0, #2
   18f2c:	blt	18f3c <__assert_fail@plt+0x7a24>
   18f30:	ldr	r1, [r9, #60]	; 0x3c
   18f34:	mov	r0, r5
   18f38:	bl	1a134 <__assert_fail@plt+0x8c1c>
   18f3c:	str	r5, [sp, #8]
   18f40:	ldr	r4, [sp, #12]
   18f44:	bfc	r4, #0, #23
   18f48:	orr	r0, r4, #3
   18f4c:	str	r0, [sp, #12]
   18f50:	mov	r7, #0
   18f54:	add	r3, sp, #8
   18f58:	mov	r0, r9
   18f5c:	mov	r1, #0
   18f60:	mov	r2, #0
   18f64:	bl	18694 <__assert_fail@plt+0x717c>
   18f68:	cmp	r0, #0
   18f6c:	beq	18fe8 <__assert_fail@plt+0x7ad0>
   18f70:	mov	r6, r0
   18f74:	ldr	r0, [r9, #92]	; 0x5c
   18f78:	cmp	r0, #2
   18f7c:	blt	18fd0 <__assert_fail@plt+0x7ab8>
   18f80:	str	sl, [sp, #8]
   18f84:	orr	r0, r4, #6
   18f88:	str	r0, [sp, #12]
   18f8c:	ldrb	r0, [r9, #88]	; 0x58
   18f90:	orr	r0, r0, #2
   18f94:	strb	r0, [r9, #88]	; 0x58
   18f98:	add	r3, sp, #8
   18f9c:	mov	r0, r9
   18fa0:	mov	r1, #0
   18fa4:	mov	r2, #0
   18fa8:	bl	18694 <__assert_fail@plt+0x717c>
   18fac:	cmp	r0, #0
   18fb0:	beq	18fe8 <__assert_fail@plt+0x7ad0>
   18fb4:	mov	r2, r0
   18fb8:	mov	r0, r9
   18fbc:	mov	r1, r6
   18fc0:	mov	r3, #10
   18fc4:	bl	17618 <__assert_fail@plt+0x6100>
   18fc8:	mov	r7, r0
   18fcc:	b	18fdc <__assert_fail@plt+0x7ac4>
   18fd0:	mov	r0, sl
   18fd4:	bl	16124 <__assert_fail@plt+0x4c0c>
   18fd8:	mov	r7, r6
   18fdc:	mov	r0, r7
   18fe0:	sub	sp, fp, #28
   18fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fe8:	mov	r0, r5
   18fec:	bl	22b58 <__assert_fail@plt+0x11640>
   18ff0:	mov	r0, sl
   18ff4:	bl	16124 <__assert_fail@plt+0x4c0c>
   18ff8:	mov	r0, #12
   18ffc:	ldr	r1, [fp, #12]
   19000:	b	19008 <__assert_fail@plt+0x7af0>
   19004:	mov	r0, #12
   19008:	str	r0, [r1]
   1900c:	b	18fdc <__assert_fail@plt+0x7ac4>
   19010:	mov	r0, r5
   19014:	bl	22b58 <__assert_fail@plt+0x11640>
   19018:	mov	r0, #12
   1901c:	ldr	r1, [fp, #12]
   19020:	str	r0, [r1]
   19024:	mov	r7, #0
   19028:	b	18fdc <__assert_fail@plt+0x7ac4>
   1902c:	mov	r6, r0
   19030:	mov	r0, r5
   19034:	bl	22b58 <__assert_fail@plt+0x11640>
   19038:	mov	r0, sl
   1903c:	bl	16124 <__assert_fail@plt+0x4c0c>
   19040:	ldr	r0, [fp, #12]
   19044:	str	r6, [r0]
   19048:	b	18fdc <__assert_fail@plt+0x7ac4>
   1904c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19050:	add	fp, sp, #28
   19054:	sub	sp, sp, #20
   19058:	mov	r7, r3
   1905c:	mov	r5, r2
   19060:	mov	r8, r1
   19064:	mov	r4, r0
   19068:	ldrb	r0, [r3, #4]
   1906c:	ldr	r1, [fp, #12]
   19070:	str	r1, [sp, #16]
   19074:	ldr	sl, [fp, #8]
   19078:	cmp	r0, #23
   1907c:	bne	190d4 <__assert_fail@plt+0x7bbc>
   19080:	ldr	r0, [r7]
   19084:	str	r0, [sp, #12]
   19088:	ldr	r0, [r7, #4]
   1908c:	str	r0, [sp, #8]
   19090:	ldr	r0, [r8, #40]	; 0x28
   19094:	str	r0, [sp, #4]
   19098:	mov	r0, r8
   1909c:	mov	r1, r7
   190a0:	mov	r2, sl
   190a4:	bl	1a384 <__assert_fail@plt+0x8e6c>
   190a8:	cmn	r0, #1
   190ac:	bne	190f0 <__assert_fail@plt+0x7bd8>
   190b0:	ldrb	r0, [r7, #4]
   190b4:	cmp	r0, #1
   190b8:	bne	190cc <__assert_fail@plt+0x7bb4>
   190bc:	ldrb	r0, [r7]
   190c0:	mov	r6, #0
   190c4:	cmp	r0, #44	; 0x2c
   190c8:	beq	190fc <__assert_fail@plt+0x7be4>
   190cc:	mov	r0, #10
   190d0:	b	19344 <__assert_fail@plt+0x7e2c>
   190d4:	mvn	r9, #0
   190d8:	cmp	r0, #19
   190dc:	movweq	r9, #1
   190e0:	sub	r0, r0, #18
   190e4:	clz	r0, r0
   190e8:	lsr	r6, r0, #5
   190ec:	b	1916c <__assert_fail@plt+0x7c54>
   190f0:	mov	r6, r0
   190f4:	cmn	r0, #2
   190f8:	beq	19274 <__assert_fail@plt+0x7d5c>
   190fc:	ldrb	r0, [r7, #4]
   19100:	cmp	r0, #24
   19104:	mov	r9, r6
   19108:	beq	1913c <__assert_fail@plt+0x7c24>
   1910c:	cmp	r0, #1
   19110:	bne	19274 <__assert_fail@plt+0x7d5c>
   19114:	ldrb	r0, [r7]
   19118:	cmp	r0, #44	; 0x2c
   1911c:	bne	19274 <__assert_fail@plt+0x7d5c>
   19120:	mov	r0, r8
   19124:	mov	r1, r7
   19128:	mov	r2, sl
   1912c:	bl	1a384 <__assert_fail@plt+0x8e6c>
   19130:	mov	r9, r0
   19134:	cmn	r0, #2
   19138:	beq	19274 <__assert_fail@plt+0x7d5c>
   1913c:	cmn	r9, #1
   19140:	beq	1914c <__assert_fail@plt+0x7c34>
   19144:	cmp	r6, r9
   19148:	bgt	190cc <__assert_fail@plt+0x7bb4>
   1914c:	ldrb	r0, [r7, #4]
   19150:	cmp	r0, #24
   19154:	bne	190cc <__assert_fail@plt+0x7bb4>
   19158:	cmn	r9, #1
   1915c:	mov	r0, r9
   19160:	moveq	r0, r6
   19164:	cmp	r0, #32768	; 0x8000
   19168:	bge	1935c <__assert_fail@plt+0x7e44>
   1916c:	mov	r0, r7
   19170:	mov	r1, r8
   19174:	mov	r2, sl
   19178:	bl	17490 <__assert_fail@plt+0x5f78>
   1917c:	cmp	r4, #0
   19180:	beq	1934c <__assert_fail@plt+0x7e34>
   19184:	orrs	r0, r9, r6
   19188:	beq	192a8 <__assert_fail@plt+0x7d90>
   1918c:	mov	r8, #0
   19190:	cmp	r6, #1
   19194:	bge	192c0 <__assert_fail@plt+0x7da8>
   19198:	ldrb	r0, [r4, #24]
   1919c:	cmp	r0, #17
   191a0:	bne	191b8 <__assert_fail@plt+0x7ca0>
   191a4:	ldr	r2, [r4, #20]
   191a8:	movw	r1, #42248	; 0xa508
   191ac:	movt	r1, #1
   191b0:	mov	r0, r4
   191b4:	bl	1805c <__assert_fail@plt+0x6b44>
   191b8:	mov	r3, #10
   191bc:	cmn	r9, #1
   191c0:	movweq	r3, #11
   191c4:	mov	r0, r5
   191c8:	mov	r1, r4
   191cc:	mov	r2, #0
   191d0:	bl	17618 <__assert_fail@plt+0x6100>
   191d4:	cmp	r0, #0
   191d8:	beq	19340 <__assert_fail@plt+0x7e28>
   191dc:	mov	r7, r0
   191e0:	add	r0, r6, #2
   191e4:	cmp	r0, r9
   191e8:	ble	19210 <__assert_fail@plt+0x7cf8>
   191ec:	cmp	r8, #0
   191f0:	beq	192a0 <__assert_fail@plt+0x7d88>
   191f4:	mov	r0, r5
   191f8:	mov	r1, r8
   191fc:	mov	r2, r7
   19200:	mov	r3, #16
   19204:	sub	sp, fp, #28
   19208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1920c:	b	17618 <__assert_fail@plt+0x6100>
   19210:	add	r6, r6, #1
   19214:	mov	r0, r4
   19218:	mov	r1, r5
   1921c:	bl	1a42c <__assert_fail@plt+0x8f14>
   19220:	mov	r4, r0
   19224:	mov	r0, r5
   19228:	mov	r1, r7
   1922c:	mov	r2, r4
   19230:	mov	r3, #16
   19234:	bl	17618 <__assert_fail@plt+0x6100>
   19238:	cmp	r4, #0
   1923c:	movne	r1, r0
   19240:	cmpne	r0, #0
   19244:	beq	19340 <__assert_fail@plt+0x7e28>
   19248:	mov	r0, r5
   1924c:	mov	r2, #0
   19250:	mov	r3, #10
   19254:	bl	17618 <__assert_fail@plt+0x6100>
   19258:	cmp	r0, #0
   1925c:	beq	19340 <__assert_fail@plt+0x7e28>
   19260:	mov	r7, r0
   19264:	add	r6, r6, #1
   19268:	cmp	r6, r9
   1926c:	blt	19214 <__assert_fail@plt+0x7cfc>
   19270:	b	191ec <__assert_fail@plt+0x7cd4>
   19274:	tst	sl, #2097152	; 0x200000
   19278:	beq	19364 <__assert_fail@plt+0x7e4c>
   1927c:	ldr	r0, [sp, #4]
   19280:	str	r0, [r8, #40]	; 0x28
   19284:	ldr	r0, [sp, #12]
   19288:	str	r0, [r7]
   1928c:	ldr	r0, [sp, #8]
   19290:	str	r0, [r7, #4]
   19294:	mov	r0, #1
   19298:	strb	r0, [r7, #4]
   1929c:	b	19350 <__assert_fail@plt+0x7e38>
   192a0:	mov	r4, r7
   192a4:	b	19350 <__assert_fail@plt+0x7e38>
   192a8:	movw	r1, #32980	; 0x80d4
   192ac:	movt	r1, #1
   192b0:	mov	r0, r4
   192b4:	mov	r2, #0
   192b8:	bl	1805c <__assert_fail@plt+0x6b44>
   192bc:	b	1934c <__assert_fail@plt+0x7e34>
   192c0:	bne	192ec <__assert_fail@plt+0x7dd4>
   192c4:	mov	r8, r4
   192c8:	cmp	r6, r9
   192cc:	beq	19338 <__assert_fail@plt+0x7e20>
   192d0:	mov	r0, r4
   192d4:	mov	r1, r5
   192d8:	bl	1a42c <__assert_fail@plt+0x8f14>
   192dc:	mov	r4, r0
   192e0:	cmp	r0, #0
   192e4:	bne	19198 <__assert_fail@plt+0x7c80>
   192e8:	b	19340 <__assert_fail@plt+0x7e28>
   192ec:	sub	r7, r6, #1
   192f0:	mov	r8, r4
   192f4:	mov	r0, r4
   192f8:	mov	r1, r5
   192fc:	bl	1a42c <__assert_fail@plt+0x8f14>
   19300:	mov	r4, r0
   19304:	mov	r0, r5
   19308:	mov	r1, r8
   1930c:	mov	r2, r4
   19310:	mov	r3, #16
   19314:	bl	17618 <__assert_fail@plt+0x6100>
   19318:	cmp	r4, #0
   1931c:	movne	r8, r0
   19320:	cmpne	r0, #0
   19324:	beq	19340 <__assert_fail@plt+0x7e28>
   19328:	subs	r7, r7, #1
   1932c:	bne	192f4 <__assert_fail@plt+0x7ddc>
   19330:	cmp	r6, r9
   19334:	bne	192d0 <__assert_fail@plt+0x7db8>
   19338:	mov	r4, r8
   1933c:	b	19350 <__assert_fail@plt+0x7e38>
   19340:	mov	r0, #12
   19344:	ldr	r1, [sp, #16]
   19348:	str	r0, [r1]
   1934c:	mov	r4, #0
   19350:	mov	r0, r4
   19354:	sub	sp, fp, #28
   19358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1935c:	mov	r0, #15
   19360:	b	19344 <__assert_fail@plt+0x7e2c>
   19364:	ldrb	r0, [r7, #4]
   19368:	mov	r1, #10
   1936c:	cmp	r0, #2
   19370:	movweq	r1, #9
   19374:	ldr	r0, [sp, #16]
   19378:	str	r1, [r0]
   1937c:	b	1934c <__assert_fail@plt+0x7e34>
   19380:	push	{r4, sl, fp, lr}
   19384:	add	fp, sp, #8
   19388:	ldr	ip, [r1, #40]	; 0x28
   1938c:	ldr	r3, [r1, #56]	; 0x38
   19390:	cmp	r3, ip
   19394:	ble	19414 <__assert_fail@plt+0x7efc>
   19398:	ldr	r3, [r1, #4]
   1939c:	ldrb	ip, [r3, ip]
   193a0:	strb	ip, [r0]
   193a4:	ldr	r3, [r1, #80]	; 0x50
   193a8:	cmp	r3, #2
   193ac:	blt	193d0 <__assert_fail@plt+0x7eb8>
   193b0:	ldr	lr, [r1, #28]
   193b4:	ldr	r4, [r1, #40]	; 0x28
   193b8:	cmp	r4, lr
   193bc:	beq	193d0 <__assert_fail@plt+0x7eb8>
   193c0:	ldr	r3, [r1, #8]
   193c4:	ldr	r3, [r3, r4, lsl #2]
   193c8:	cmn	r3, #1
   193cc:	beq	194c0 <__assert_fail@plt+0x7fa8>
   193d0:	tst	r2, #1
   193d4:	beq	19428 <__assert_fail@plt+0x7f10>
   193d8:	cmp	ip, #92	; 0x5c
   193dc:	bne	19428 <__assert_fail@plt+0x7f10>
   193e0:	ldr	r2, [r1, #40]	; 0x28
   193e4:	ldr	r3, [r1, #48]	; 0x30
   193e8:	add	r2, r2, #1
   193ec:	cmp	r2, r3
   193f0:	bge	194c0 <__assert_fail@plt+0x7fa8>
   193f4:	str	r2, [r1, #40]	; 0x28
   193f8:	ldr	r1, [r1, #4]
   193fc:	ldrb	r2, [r1, r2]
   19400:	mov	r1, #1
   19404:	strb	r1, [r0, #4]
   19408:	strb	r2, [r0]
   1940c:	mov	r0, r1
   19410:	pop	{r4, sl, fp, pc}
   19414:	mov	r1, #2
   19418:	strb	r1, [r0, #4]
   1941c:	mov	r1, #0
   19420:	mov	r0, r1
   19424:	pop	{r4, sl, fp, pc}
   19428:	cmp	ip, #92	; 0x5c
   1942c:	bgt	19480 <__assert_fail@plt+0x7f68>
   19430:	cmp	ip, #45	; 0x2d
   19434:	beq	19498 <__assert_fail@plt+0x7f80>
   19438:	cmp	ip, #91	; 0x5b
   1943c:	bne	194c0 <__assert_fail@plt+0x7fa8>
   19440:	ldr	r3, [r1, #40]	; 0x28
   19444:	ldr	r4, [r1, #48]	; 0x30
   19448:	add	r3, r3, #1
   1944c:	cmp	r3, r4
   19450:	bge	194b4 <__assert_fail@plt+0x7f9c>
   19454:	ldr	r1, [r1, #4]
   19458:	ldrb	r1, [r1, r3]
   1945c:	strb	r1, [r0]
   19460:	cmp	r1, #61	; 0x3d
   19464:	beq	194d0 <__assert_fail@plt+0x7fb8>
   19468:	cmp	r1, #58	; 0x3a
   1946c:	beq	194d8 <__assert_fail@plt+0x7fc0>
   19470:	cmp	r1, #46	; 0x2e
   19474:	bne	194bc <__assert_fail@plt+0x7fa4>
   19478:	mov	r1, #26
   1947c:	b	194e4 <__assert_fail@plt+0x7fcc>
   19480:	cmp	ip, #93	; 0x5d
   19484:	beq	194a0 <__assert_fail@plt+0x7f88>
   19488:	cmp	ip, #94	; 0x5e
   1948c:	bne	194c0 <__assert_fail@plt+0x7fa8>
   19490:	mov	r1, #25
   19494:	b	194a4 <__assert_fail@plt+0x7f8c>
   19498:	mov	r1, #22
   1949c:	b	194a4 <__assert_fail@plt+0x7f8c>
   194a0:	mov	r1, #21
   194a4:	strb	r1, [r0, #4]
   194a8:	mov	r1, #1
   194ac:	mov	r0, r1
   194b0:	pop	{r4, sl, fp, pc}
   194b4:	mov	r1, #0
   194b8:	strb	r1, [r0]
   194bc:	strb	ip, [r0]
   194c0:	mov	r1, #1
   194c4:	strb	r1, [r0, #4]
   194c8:	mov	r0, r1
   194cc:	pop	{r4, sl, fp, pc}
   194d0:	mov	r1, #28
   194d4:	b	194e4 <__assert_fail@plt+0x7fcc>
   194d8:	tst	r2, #4
   194dc:	beq	194bc <__assert_fail@plt+0x7fa4>
   194e0:	mov	r1, #30
   194e4:	strb	r1, [r0, #4]
   194e8:	mov	r1, #2
   194ec:	mov	r0, r1
   194f0:	pop	{r4, sl, fp, pc}
   194f4:	asr	r2, r1, #31
   194f8:	add	r2, r1, r2, lsr #27
   194fc:	asr	r2, r2, #5
   19500:	ldr	ip, [r0, r2, lsl #2]
   19504:	and	r1, r1, #31
   19508:	mov	r3, #1
   1950c:	orr	r1, ip, r3, lsl r1
   19510:	str	r1, [r0, r2, lsl #2]
   19514:	bx	lr
   19518:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1951c:	add	fp, sp, #24
   19520:	sub	sp, sp, #8
   19524:	mov	r5, r3
   19528:	mov	r8, r2
   1952c:	mov	r6, r1
   19530:	mov	r9, r0
   19534:	ldr	r7, [r1, #40]	; 0x28
   19538:	mov	r0, r1
   1953c:	mov	r1, r7
   19540:	bl	1a158 <__assert_fail@plt+0x8c40>
   19544:	cmp	r0, #2
   19548:	blt	19580 <__assert_fail@plt+0x8068>
   1954c:	mov	r4, r0
   19550:	mov	r0, #1
   19554:	str	r0, [r9]
   19558:	mov	r0, r6
   1955c:	mov	r1, r7
   19560:	bl	17ec4 <__assert_fail@plt+0x69ac>
   19564:	str	r0, [r9, #4]
   19568:	ldr	r0, [r6, #40]	; 0x28
   1956c:	add	r0, r0, r4
   19570:	str	r0, [r6, #40]	; 0x28
   19574:	mov	r0, #0
   19578:	sub	sp, fp, #24
   1957c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19580:	ldr	r0, [fp, #12]
   19584:	ldr	r2, [fp, #8]
   19588:	add	r1, r7, r5
   1958c:	str	r1, [r6, #40]	; 0x28
   19590:	ldrb	r1, [r8, #4]
   19594:	sub	r1, r1, #22
   19598:	cmp	r1, #8
   1959c:	bhi	19608 <__assert_fail@plt+0x80f0>
   195a0:	add	r3, pc, #0
   195a4:	ldr	pc, [r3, r1, lsl #2]
   195a8:	andeq	r9, r1, r4, ror #11
   195ac:	andeq	r9, r1, r8, lsl #12
   195b0:	andeq	r9, r1, r8, lsl #12
   195b4:	andeq	r9, r1, r8, lsl #12
   195b8:	andeq	r9, r1, ip, asr #11
   195bc:	andeq	r9, r1, r8, lsl #12
   195c0:	andeq	r9, r1, ip, asr #11
   195c4:	andeq	r9, r1, r8, lsl #12
   195c8:	andeq	r9, r1, ip, asr #11
   195cc:	mov	r0, r9
   195d0:	mov	r1, r6
   195d4:	mov	r2, r8
   195d8:	sub	sp, fp, #24
   195dc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   195e0:	b	1a1b4 <__assert_fail@plt+0x8c9c>
   195e4:	cmp	r0, #0
   195e8:	bne	19608 <__assert_fail@plt+0x80f0>
   195ec:	mov	r0, sp
   195f0:	mov	r1, r6
   195f4:	bl	19380 <__assert_fail@plt+0x7e68>
   195f8:	ldrb	r1, [sp, #4]
   195fc:	mov	r0, #11
   19600:	cmp	r1, #21
   19604:	bne	19618 <__assert_fail@plt+0x8100>
   19608:	mov	r0, #0
   1960c:	str	r0, [r9]
   19610:	ldrb	r1, [r8]
   19614:	strb	r1, [r9, #4]
   19618:	sub	sp, fp, #24
   1961c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19624:	add	fp, sp, #28
   19628:	sub	sp, sp, #12
   1962c:	mov	sl, r0
   19630:	ldr	r7, [r3]
   19634:	mov	r0, #11
   19638:	cmp	r7, #2
   1963c:	cmpne	r7, #4
   19640:	beq	19658 <__assert_fail@plt+0x8140>
   19644:	ldr	r8, [fp, #8]
   19648:	ldr	r5, [r8]
   1964c:	cmp	r5, #2
   19650:	cmpne	r5, #4
   19654:	bne	19660 <__assert_fail@plt+0x8148>
   19658:	sub	sp, fp, #28
   1965c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19660:	mov	r6, r3
   19664:	mov	r9, r2
   19668:	mov	r4, r1
   1966c:	cmp	r7, #3
   19670:	bne	19684 <__assert_fail@plt+0x816c>
   19674:	ldr	r0, [r6, #4]
   19678:	bl	113ec <strlen@plt>
   1967c:	cmp	r0, #1
   19680:	bhi	197c8 <__assert_fail@plt+0x82b0>
   19684:	cmp	r5, #3
   19688:	bne	1969c <__assert_fail@plt+0x8184>
   1968c:	ldr	r0, [r8, #4]
   19690:	bl	113ec <strlen@plt>
   19694:	cmp	r0, #1
   19698:	bhi	197c8 <__assert_fail@plt+0x82b0>
   1969c:	cmp	r7, #3
   196a0:	beq	196b4 <__assert_fail@plt+0x819c>
   196a4:	mov	r0, #0
   196a8:	cmp	r7, #0
   196ac:	ldrbeq	r0, [r6, #4]
   196b0:	b	196bc <__assert_fail@plt+0x81a4>
   196b4:	ldr	r0, [r6, #4]
   196b8:	ldrb	r0, [r0]
   196bc:	stmib	sp, {r4, r9}
   196c0:	cmp	r5, #3
   196c4:	beq	196d8 <__assert_fail@plt+0x81c0>
   196c8:	mov	r9, #0
   196cc:	cmp	r5, #0
   196d0:	ldrbeq	r9, [r8, #4]
   196d4:	b	196e0 <__assert_fail@plt+0x81c8>
   196d8:	ldr	r1, [r8, #4]
   196dc:	ldrb	r9, [r1]
   196e0:	ldr	r4, [fp, #12]
   196e4:	cmp	r7, #3
   196e8:	cmpne	r7, #0
   196ec:	bne	19700 <__assert_fail@plt+0x81e8>
   196f0:	mov	r1, r4
   196f4:	bl	1a374 <__assert_fail@plt+0x8e5c>
   196f8:	mov	r7, r0
   196fc:	b	19704 <__assert_fail@plt+0x81ec>
   19700:	ldr	r7, [r6, #4]
   19704:	ldr	r0, [r8]
   19708:	cmp	r0, #3
   1970c:	cmpne	r0, #0
   19710:	bne	19728 <__assert_fail@plt+0x8210>
   19714:	mov	r0, r9
   19718:	mov	r1, r4
   1971c:	bl	1a374 <__assert_fail@plt+0x8e5c>
   19720:	mov	r6, r0
   19724:	b	1972c <__assert_fail@plt+0x8214>
   19728:	ldr	r6, [r8, #4]
   1972c:	ldr	r1, [sp, #8]
   19730:	ldr	r5, [sp, #4]
   19734:	mov	r0, #3
   19738:	cmn	r7, #1
   1973c:	cmnne	r6, #1
   19740:	beq	19658 <__assert_fail@plt+0x8140>
   19744:	ldr	r0, [fp, #16]
   19748:	tst	r0, #65536	; 0x10000
   1974c:	beq	1975c <__assert_fail@plt+0x8244>
   19750:	cmp	r7, r6
   19754:	mov	r0, #11
   19758:	bhi	19658 <__assert_fail@plt+0x8140>
   1975c:	ldr	r0, [r4, #92]	; 0x5c
   19760:	cmp	r0, #2
   19764:	blt	19798 <__assert_fail@plt+0x8280>
   19768:	ldr	r0, [r5, #32]
   1976c:	ldr	r1, [r1]
   19770:	cmp	r1, r0
   19774:	beq	197d4 <__assert_fail@plt+0x82bc>
   19778:	ldr	r0, [r5, #4]
   1977c:	ldr	r1, [r5, #32]
   19780:	str	r7, [r0, r1, lsl #2]
   19784:	ldr	r0, [r5, #8]
   19788:	ldr	r1, [r5, #32]
   1978c:	add	r2, r1, #1
   19790:	str	r2, [r5, #32]
   19794:	str	r6, [r0, r1, lsl #2]
   19798:	mov	r5, #0
   1979c:	cmp	r7, r5
   197a0:	cmpls	r5, r6
   197a4:	movls	r0, sl
   197a8:	movls	r1, r5
   197ac:	blls	194f4 <__assert_fail@plt+0x7fdc>
   197b0:	add	r5, r5, #1
   197b4:	cmp	r5, #256	; 0x100
   197b8:	bne	1979c <__assert_fail@plt+0x8284>
   197bc:	mov	r0, #0
   197c0:	sub	sp, fp, #28
   197c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c8:	mov	r0, #3
   197cc:	sub	sp, fp, #28
   197d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197d4:	mov	r1, #1
   197d8:	orr	r8, r1, r0, lsl #1
   197dc:	lsl	r4, r8, #2
   197e0:	ldr	r0, [r5, #4]
   197e4:	mov	r1, r4
   197e8:	bl	22698 <__assert_fail@plt+0x11180>
   197ec:	mov	r9, r0
   197f0:	ldr	r0, [r5, #8]
   197f4:	mov	r1, r4
   197f8:	bl	22698 <__assert_fail@plt+0x11180>
   197fc:	mov	r4, r0
   19800:	cmp	r9, #0
   19804:	cmpne	r4, #0
   19808:	bne	19828 <__assert_fail@plt+0x8310>
   1980c:	mov	r0, r9
   19810:	bl	22b58 <__assert_fail@plt+0x11640>
   19814:	mov	r0, r4
   19818:	bl	22b58 <__assert_fail@plt+0x11640>
   1981c:	mov	r0, #12
   19820:	sub	sp, fp, #28
   19824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19828:	ldr	r5, [sp, #4]
   1982c:	str	r9, [r5, #4]
   19830:	str	r4, [r5, #8]
   19834:	ldr	r0, [sp, #8]
   19838:	str	r8, [r0]
   1983c:	b	19778 <__assert_fail@plt+0x8260>
   19840:	push	{r4, r5, fp, lr}
   19844:	add	fp, sp, #8
   19848:	mov	r5, r1
   1984c:	mov	r4, r0
   19850:	mov	r0, r1
   19854:	bl	113ec <strlen@plt>
   19858:	cmp	r0, #1
   1985c:	bne	19874 <__assert_fail@plt+0x835c>
   19860:	ldrb	r1, [r5]
   19864:	mov	r0, r4
   19868:	bl	194f4 <__assert_fail@plt+0x7fdc>
   1986c:	mov	r0, #0
   19870:	pop	{r4, r5, fp, pc}
   19874:	mov	r0, #3
   19878:	pop	{r4, r5, fp, pc}
   1987c:	push	{r4, r5, fp, lr}
   19880:	add	fp, sp, #8
   19884:	mov	r5, r1
   19888:	mov	r4, r0
   1988c:	mov	r0, r1
   19890:	bl	113ec <strlen@plt>
   19894:	cmp	r0, #1
   19898:	bne	198b0 <__assert_fail@plt+0x8398>
   1989c:	ldrb	r1, [r5]
   198a0:	mov	r0, r4
   198a4:	bl	194f4 <__assert_fail@plt+0x7fdc>
   198a8:	mov	r0, #0
   198ac:	pop	{r4, r5, fp, pc}
   198b0:	mov	r0, #3
   198b4:	pop	{r4, r5, fp, pc}
   198b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   198bc:	add	fp, sp, #24
   198c0:	mov	r5, r3
   198c4:	mov	r7, r2
   198c8:	mov	r4, r1
   198cc:	mov	r8, r0
   198d0:	ldr	r6, [fp, #8]
   198d4:	ldrb	r0, [fp, #14]
   198d8:	tst	r0, #64	; 0x40
   198dc:	beq	19918 <__assert_fail@plt+0x8400>
   198e0:	movw	r1, #16234	; 0x3f6a
   198e4:	movt	r1, #2
   198e8:	mov	r0, r6
   198ec:	bl	11248 <strcmp@plt>
   198f0:	cmp	r0, #0
   198f4:	beq	19910 <__assert_fail@plt+0x83f8>
   198f8:	movw	r1, #16240	; 0x3f70
   198fc:	movt	r1, #2
   19900:	mov	r0, r6
   19904:	bl	11248 <strcmp@plt>
   19908:	cmp	r0, #0
   1990c:	bne	19918 <__assert_fail@plt+0x8400>
   19910:	movw	r6, #16246	; 0x3f76
   19914:	movt	r6, #2
   19918:	ldr	r0, [r7, #36]	; 0x24
   1991c:	ldr	r1, [r5]
   19920:	cmp	r1, r0
   19924:	beq	19df4 <__assert_fail@plt+0x88dc>
   19928:	mov	r0, r6
   1992c:	bl	11218 <wctype@plt>
   19930:	ldr	r1, [r7, #12]
   19934:	ldr	r2, [r7, #36]	; 0x24
   19938:	add	r3, r2, #1
   1993c:	str	r3, [r7, #36]	; 0x24
   19940:	str	r0, [r1, r2, lsl #2]
   19944:	movw	r1, #16222	; 0x3f5e
   19948:	movt	r1, #2
   1994c:	mov	r0, r6
   19950:	bl	11248 <strcmp@plt>
   19954:	cmp	r0, #0
   19958:	beq	19ab8 <__assert_fail@plt+0x85a0>
   1995c:	movw	r1, #16252	; 0x3f7c
   19960:	movt	r1, #2
   19964:	mov	r0, r6
   19968:	bl	11248 <strcmp@plt>
   1996c:	cmp	r0, #0
   19970:	beq	19b00 <__assert_fail@plt+0x85e8>
   19974:	movw	r1, #16240	; 0x3f70
   19978:	movt	r1, #2
   1997c:	mov	r0, r6
   19980:	bl	11248 <strcmp@plt>
   19984:	cmp	r0, #0
   19988:	beq	19b48 <__assert_fail@plt+0x8630>
   1998c:	movw	r1, #16228	; 0x3f64
   19990:	movt	r1, #2
   19994:	mov	r0, r6
   19998:	bl	11248 <strcmp@plt>
   1999c:	cmp	r0, #0
   199a0:	beq	19b94 <__assert_fail@plt+0x867c>
   199a4:	movw	r1, #16246	; 0x3f76
   199a8:	movt	r1, #2
   199ac:	mov	r0, r6
   199b0:	bl	11248 <strcmp@plt>
   199b4:	cmp	r0, #0
   199b8:	beq	19be0 <__assert_fail@plt+0x86c8>
   199bc:	movw	r1, #16283	; 0x3f9b
   199c0:	movt	r1, #2
   199c4:	mov	r0, r6
   199c8:	bl	11248 <strcmp@plt>
   199cc:	cmp	r0, #0
   199d0:	beq	19c2c <__assert_fail@plt+0x8714>
   199d4:	movw	r1, #16258	; 0x3f82
   199d8:	movt	r1, #2
   199dc:	mov	r0, r6
   199e0:	bl	11248 <strcmp@plt>
   199e4:	cmp	r0, #0
   199e8:	beq	19c78 <__assert_fail@plt+0x8760>
   199ec:	movw	r1, #16234	; 0x3f6a
   199f0:	movt	r1, #2
   199f4:	mov	r0, r6
   199f8:	bl	11248 <strcmp@plt>
   199fc:	cmp	r0, #0
   19a00:	beq	19cc4 <__assert_fail@plt+0x87ac>
   19a04:	movw	r1, #16264	; 0x3f88
   19a08:	movt	r1, #2
   19a0c:	mov	r0, r6
   19a10:	bl	11248 <strcmp@plt>
   19a14:	cmp	r0, #0
   19a18:	beq	19d10 <__assert_fail@plt+0x87f8>
   19a1c:	movw	r1, #16270	; 0x3f8e
   19a20:	movt	r1, #2
   19a24:	mov	r0, r6
   19a28:	bl	11248 <strcmp@plt>
   19a2c:	cmp	r0, #0
   19a30:	beq	19d58 <__assert_fail@plt+0x8840>
   19a34:	movw	r1, #16276	; 0x3f94
   19a38:	movt	r1, #2
   19a3c:	mov	r0, r6
   19a40:	bl	11248 <strcmp@plt>
   19a44:	cmp	r0, #0
   19a48:	beq	19dac <__assert_fail@plt+0x8894>
   19a4c:	movw	r1, #16282	; 0x3f9a
   19a50:	movt	r1, #2
   19a54:	mov	r0, r6
   19a58:	bl	11248 <strcmp@plt>
   19a5c:	mov	r1, r0
   19a60:	mov	r0, #4
   19a64:	cmp	r1, #0
   19a68:	bne	19df0 <__assert_fail@plt+0x88d8>
   19a6c:	bl	113c8 <__ctype_b_loc@plt>
   19a70:	mov	r6, r0
   19a74:	cmp	r8, #0
   19a78:	bne	1a0cc <__assert_fail@plt+0x8bb4>
   19a7c:	mov	r7, #0
   19a80:	mov	r5, #0
   19a84:	ldr	r0, [r6]
   19a88:	add	r0, r0, r7
   19a8c:	ldrb	r0, [r0, #1]
   19a90:	tst	r0, #16
   19a94:	movne	r0, r4
   19a98:	movne	r1, r5
   19a9c:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19aa0:	add	r7, r7, #2
   19aa4:	add	r5, r5, #1
   19aa8:	mov	r0, #0
   19aac:	cmp	r5, #256	; 0x100
   19ab0:	bne	19a84 <__assert_fail@plt+0x856c>
   19ab4:	b	19df0 <__assert_fail@plt+0x88d8>
   19ab8:	bl	113c8 <__ctype_b_loc@plt>
   19abc:	mov	r6, r0
   19ac0:	cmp	r8, #0
   19ac4:	bne	19e1c <__assert_fail@plt+0x8904>
   19ac8:	mov	r7, #0
   19acc:	mov	r5, #0
   19ad0:	ldr	r0, [r6]
   19ad4:	ldrb	r0, [r0, r7]
   19ad8:	tst	r0, #8
   19adc:	movne	r0, r4
   19ae0:	movne	r1, r5
   19ae4:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19ae8:	add	r7, r7, #2
   19aec:	add	r5, r5, #1
   19af0:	cmp	r5, #256	; 0x100
   19af4:	bne	19ad0 <__assert_fail@plt+0x85b8>
   19af8:	mov	r0, #0
   19afc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b00:	bl	113c8 <__ctype_b_loc@plt>
   19b04:	mov	r6, r0
   19b08:	cmp	r8, #0
   19b0c:	bne	19e58 <__assert_fail@plt+0x8940>
   19b10:	mov	r7, #0
   19b14:	mov	r5, #0
   19b18:	ldr	r0, [r6]
   19b1c:	ldrb	r0, [r0, r7]
   19b20:	tst	r0, #2
   19b24:	movne	r0, r4
   19b28:	movne	r1, r5
   19b2c:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19b30:	add	r7, r7, #2
   19b34:	add	r5, r5, #1
   19b38:	cmp	r5, #256	; 0x100
   19b3c:	bne	19b18 <__assert_fail@plt+0x8600>
   19b40:	mov	r0, #0
   19b44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b48:	bl	113c8 <__ctype_b_loc@plt>
   19b4c:	mov	r6, r0
   19b50:	cmp	r8, #0
   19b54:	bne	19e94 <__assert_fail@plt+0x897c>
   19b58:	mov	r7, #0
   19b5c:	mov	r5, #0
   19b60:	ldr	r0, [r6]
   19b64:	add	r0, r0, r7
   19b68:	ldrb	r0, [r0, #1]
   19b6c:	tst	r0, #2
   19b70:	movne	r0, r4
   19b74:	movne	r1, r5
   19b78:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19b7c:	add	r7, r7, #2
   19b80:	add	r5, r5, #1
   19b84:	cmp	r5, #256	; 0x100
   19b88:	bne	19b60 <__assert_fail@plt+0x8648>
   19b8c:	mov	r0, #0
   19b90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b94:	bl	113c8 <__ctype_b_loc@plt>
   19b98:	mov	r6, r0
   19b9c:	cmp	r8, #0
   19ba0:	bne	19ed4 <__assert_fail@plt+0x89bc>
   19ba4:	mov	r7, #0
   19ba8:	mov	r5, #0
   19bac:	ldr	r0, [r6]
   19bb0:	add	r0, r0, r7
   19bb4:	ldrb	r0, [r0, #1]
   19bb8:	tst	r0, #32
   19bbc:	movne	r0, r4
   19bc0:	movne	r1, r5
   19bc4:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19bc8:	add	r7, r7, #2
   19bcc:	add	r5, r5, #1
   19bd0:	cmp	r5, #256	; 0x100
   19bd4:	bne	19bac <__assert_fail@plt+0x8694>
   19bd8:	mov	r0, #0
   19bdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19be0:	bl	113c8 <__ctype_b_loc@plt>
   19be4:	mov	r6, r0
   19be8:	cmp	r8, #0
   19bec:	bne	19f14 <__assert_fail@plt+0x89fc>
   19bf0:	mov	r7, #0
   19bf4:	mov	r5, #0
   19bf8:	ldr	r0, [r6]
   19bfc:	add	r0, r0, r7
   19c00:	ldrb	r0, [r0, #1]
   19c04:	tst	r0, #4
   19c08:	movne	r0, r4
   19c0c:	movne	r1, r5
   19c10:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19c14:	add	r7, r7, #2
   19c18:	add	r5, r5, #1
   19c1c:	cmp	r5, #256	; 0x100
   19c20:	bne	19bf8 <__assert_fail@plt+0x86e0>
   19c24:	mov	r0, #0
   19c28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c2c:	bl	113c8 <__ctype_b_loc@plt>
   19c30:	mov	r6, r0
   19c34:	cmp	r8, #0
   19c38:	bne	19f54 <__assert_fail@plt+0x8a3c>
   19c3c:	mov	r7, #0
   19c40:	mov	r5, #0
   19c44:	ldr	r0, [r6]
   19c48:	add	r0, r0, r7
   19c4c:	ldrb	r0, [r0, #1]
   19c50:	tst	r0, #8
   19c54:	movne	r0, r4
   19c58:	movne	r1, r5
   19c5c:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19c60:	add	r7, r7, #2
   19c64:	add	r5, r5, #1
   19c68:	cmp	r5, #256	; 0x100
   19c6c:	bne	19c44 <__assert_fail@plt+0x872c>
   19c70:	mov	r0, #0
   19c74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c78:	bl	113c8 <__ctype_b_loc@plt>
   19c7c:	mov	r6, r0
   19c80:	cmp	r8, #0
   19c84:	bne	19f94 <__assert_fail@plt+0x8a7c>
   19c88:	mov	r7, #0
   19c8c:	mov	r5, #0
   19c90:	ldr	r0, [r6]
   19c94:	add	r0, r0, r7
   19c98:	ldrb	r0, [r0, #1]
   19c9c:	tst	r0, #64	; 0x40
   19ca0:	movne	r0, r4
   19ca4:	movne	r1, r5
   19ca8:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19cac:	add	r7, r7, #2
   19cb0:	add	r5, r5, #1
   19cb4:	mov	r0, #0
   19cb8:	cmp	r5, #256	; 0x100
   19cbc:	bne	19c90 <__assert_fail@plt+0x8778>
   19cc0:	b	19df0 <__assert_fail@plt+0x88d8>
   19cc4:	bl	113c8 <__ctype_b_loc@plt>
   19cc8:	mov	r6, r0
   19ccc:	cmp	r8, #0
   19cd0:	bne	19fd4 <__assert_fail@plt+0x8abc>
   19cd4:	mov	r7, #0
   19cd8:	mov	r5, #0
   19cdc:	ldr	r0, [r6]
   19ce0:	add	r0, r0, r7
   19ce4:	ldrb	r0, [r0, #1]
   19ce8:	tst	r0, #1
   19cec:	movne	r0, r4
   19cf0:	movne	r1, r5
   19cf4:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19cf8:	add	r7, r7, #2
   19cfc:	add	r5, r5, #1
   19d00:	mov	r0, #0
   19d04:	cmp	r5, #256	; 0x100
   19d08:	bne	19cdc <__assert_fail@plt+0x87c4>
   19d0c:	b	19df0 <__assert_fail@plt+0x88d8>
   19d10:	bl	113c8 <__ctype_b_loc@plt>
   19d14:	mov	r6, r0
   19d18:	cmp	r8, #0
   19d1c:	bne	1a014 <__assert_fail@plt+0x8afc>
   19d20:	mov	r7, #0
   19d24:	mov	r5, #0
   19d28:	ldr	r0, [r6]
   19d2c:	ldrb	r0, [r0, r7]
   19d30:	tst	r0, #1
   19d34:	movne	r0, r4
   19d38:	movne	r1, r5
   19d3c:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19d40:	add	r7, r7, #2
   19d44:	add	r5, r5, #1
   19d48:	mov	r0, #0
   19d4c:	cmp	r5, #256	; 0x100
   19d50:	bne	19d28 <__assert_fail@plt+0x8810>
   19d54:	b	19df0 <__assert_fail@plt+0x88d8>
   19d58:	bl	113c8 <__ctype_b_loc@plt>
   19d5c:	mov	r6, r0
   19d60:	cmp	r8, #0
   19d64:	bne	1a050 <__assert_fail@plt+0x8b38>
   19d68:	mov	r7, #0
   19d6c:	mov	r5, #0
   19d70:	b	19d88 <__assert_fail@plt+0x8870>
   19d74:	add	r7, r7, #2
   19d78:	add	r5, r5, #1
   19d7c:	mov	r0, #0
   19d80:	cmp	r5, #256	; 0x100
   19d84:	beq	19df0 <__assert_fail@plt+0x88d8>
   19d88:	ldr	r0, [r6]
   19d8c:	add	r0, r0, r7
   19d90:	ldrsh	r0, [r0]
   19d94:	cmn	r0, #1
   19d98:	bgt	19d74 <__assert_fail@plt+0x885c>
   19d9c:	mov	r0, r4
   19da0:	mov	r1, r5
   19da4:	bl	194f4 <__assert_fail@plt+0x7fdc>
   19da8:	b	19d74 <__assert_fail@plt+0x885c>
   19dac:	bl	113c8 <__ctype_b_loc@plt>
   19db0:	mov	r6, r0
   19db4:	cmp	r8, #0
   19db8:	bne	1a090 <__assert_fail@plt+0x8b78>
   19dbc:	mov	r7, #0
   19dc0:	mov	r5, #0
   19dc4:	ldr	r0, [r6]
   19dc8:	ldrb	r0, [r0, r7]
   19dcc:	tst	r0, #4
   19dd0:	movne	r0, r4
   19dd4:	movne	r1, r5
   19dd8:	blne	194f4 <__assert_fail@plt+0x7fdc>
   19ddc:	add	r7, r7, #2
   19de0:	add	r5, r5, #1
   19de4:	mov	r0, #0
   19de8:	cmp	r5, #256	; 0x100
   19dec:	bne	19dc4 <__assert_fail@plt+0x88ac>
   19df0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19df4:	mov	r1, #1
   19df8:	orr	r9, r1, r0, lsl #1
   19dfc:	lsl	r1, r9, #2
   19e00:	ldr	r0, [r7, #12]
   19e04:	bl	22698 <__assert_fail@plt+0x11180>
   19e08:	cmp	r0, #0
   19e0c:	beq	1a10c <__assert_fail@plt+0x8bf4>
   19e10:	str	r0, [r7, #12]
   19e14:	str	r9, [r5]
   19e18:	b	19928 <__assert_fail@plt+0x8410>
   19e1c:	mov	r5, #0
   19e20:	b	19e38 <__assert_fail@plt+0x8920>
   19e24:	add	r8, r8, #1
   19e28:	add	r5, r5, #2
   19e2c:	mov	r0, #0
   19e30:	cmp	r5, #512	; 0x200
   19e34:	beq	19df0 <__assert_fail@plt+0x88d8>
   19e38:	ldr	r0, [r6]
   19e3c:	ldrb	r0, [r0, r5]
   19e40:	tst	r0, #8
   19e44:	beq	19e24 <__assert_fail@plt+0x890c>
   19e48:	ldrb	r1, [r8]
   19e4c:	mov	r0, r4
   19e50:	bl	194f4 <__assert_fail@plt+0x7fdc>
   19e54:	b	19e24 <__assert_fail@plt+0x890c>
   19e58:	mov	r5, #0
   19e5c:	b	19e74 <__assert_fail@plt+0x895c>
   19e60:	add	r8, r8, #1
   19e64:	add	r5, r5, #2
   19e68:	mov	r0, #0
   19e6c:	cmp	r5, #512	; 0x200
   19e70:	beq	19df0 <__assert_fail@plt+0x88d8>
   19e74:	ldr	r0, [r6]
   19e78:	ldrb	r0, [r0, r5]
   19e7c:	tst	r0, #2
   19e80:	beq	19e60 <__assert_fail@plt+0x8948>
   19e84:	ldrb	r1, [r8]
   19e88:	mov	r0, r4
   19e8c:	bl	194f4 <__assert_fail@plt+0x7fdc>
   19e90:	b	19e60 <__assert_fail@plt+0x8948>
   19e94:	mov	r5, #0
   19e98:	b	19eb0 <__assert_fail@plt+0x8998>
   19e9c:	add	r8, r8, #1
   19ea0:	add	r5, r5, #2
   19ea4:	mov	r0, #0
   19ea8:	cmp	r5, #512	; 0x200
   19eac:	beq	19df0 <__assert_fail@plt+0x88d8>
   19eb0:	ldr	r0, [r6]
   19eb4:	add	r0, r0, r5
   19eb8:	ldrb	r0, [r0, #1]
   19ebc:	tst	r0, #2
   19ec0:	beq	19e9c <__assert_fail@plt+0x8984>
   19ec4:	ldrb	r1, [r8]
   19ec8:	mov	r0, r4
   19ecc:	bl	194f4 <__assert_fail@plt+0x7fdc>
   19ed0:	b	19e9c <__assert_fail@plt+0x8984>
   19ed4:	mov	r5, #0
   19ed8:	b	19ef0 <__assert_fail@plt+0x89d8>
   19edc:	add	r8, r8, #1
   19ee0:	add	r5, r5, #2
   19ee4:	mov	r0, #0
   19ee8:	cmp	r5, #512	; 0x200
   19eec:	beq	19df0 <__assert_fail@plt+0x88d8>
   19ef0:	ldr	r0, [r6]
   19ef4:	add	r0, r0, r5
   19ef8:	ldrb	r0, [r0, #1]
   19efc:	tst	r0, #32
   19f00:	beq	19edc <__assert_fail@plt+0x89c4>
   19f04:	ldrb	r1, [r8]
   19f08:	mov	r0, r4
   19f0c:	bl	194f4 <__assert_fail@plt+0x7fdc>
   19f10:	b	19edc <__assert_fail@plt+0x89c4>
   19f14:	mov	r5, #0
   19f18:	b	19f30 <__assert_fail@plt+0x8a18>
   19f1c:	add	r8, r8, #1
   19f20:	add	r5, r5, #2
   19f24:	mov	r0, #0
   19f28:	cmp	r5, #512	; 0x200
   19f2c:	beq	19df0 <__assert_fail@plt+0x88d8>
   19f30:	ldr	r0, [r6]
   19f34:	add	r0, r0, r5
   19f38:	ldrb	r0, [r0, #1]
   19f3c:	tst	r0, #4
   19f40:	beq	19f1c <__assert_fail@plt+0x8a04>
   19f44:	ldrb	r1, [r8]
   19f48:	mov	r0, r4
   19f4c:	bl	194f4 <__assert_fail@plt+0x7fdc>
   19f50:	b	19f1c <__assert_fail@plt+0x8a04>
   19f54:	mov	r5, #0
   19f58:	b	19f70 <__assert_fail@plt+0x8a58>
   19f5c:	add	r8, r8, #1
   19f60:	add	r5, r5, #2
   19f64:	mov	r0, #0
   19f68:	cmp	r5, #512	; 0x200
   19f6c:	beq	19df0 <__assert_fail@plt+0x88d8>
   19f70:	ldr	r0, [r6]
   19f74:	add	r0, r0, r5
   19f78:	ldrb	r0, [r0, #1]
   19f7c:	tst	r0, #8
   19f80:	beq	19f5c <__assert_fail@plt+0x8a44>
   19f84:	ldrb	r1, [r8]
   19f88:	mov	r0, r4
   19f8c:	bl	194f4 <__assert_fail@plt+0x7fdc>
   19f90:	b	19f5c <__assert_fail@plt+0x8a44>
   19f94:	mov	r5, #0
   19f98:	b	19fb0 <__assert_fail@plt+0x8a98>
   19f9c:	add	r8, r8, #1
   19fa0:	add	r5, r5, #2
   19fa4:	mov	r0, #0
   19fa8:	cmp	r5, #512	; 0x200
   19fac:	beq	19df0 <__assert_fail@plt+0x88d8>
   19fb0:	ldr	r0, [r6]
   19fb4:	add	r0, r0, r5
   19fb8:	ldrb	r0, [r0, #1]
   19fbc:	tst	r0, #64	; 0x40
   19fc0:	beq	19f9c <__assert_fail@plt+0x8a84>
   19fc4:	ldrb	r1, [r8]
   19fc8:	mov	r0, r4
   19fcc:	bl	194f4 <__assert_fail@plt+0x7fdc>
   19fd0:	b	19f9c <__assert_fail@plt+0x8a84>
   19fd4:	mov	r5, #0
   19fd8:	b	19ff0 <__assert_fail@plt+0x8ad8>
   19fdc:	add	r8, r8, #1
   19fe0:	add	r5, r5, #2
   19fe4:	mov	r0, #0
   19fe8:	cmp	r5, #512	; 0x200
   19fec:	beq	19df0 <__assert_fail@plt+0x88d8>
   19ff0:	ldr	r0, [r6]
   19ff4:	add	r0, r0, r5
   19ff8:	ldrb	r0, [r0, #1]
   19ffc:	tst	r0, #1
   1a000:	beq	19fdc <__assert_fail@plt+0x8ac4>
   1a004:	ldrb	r1, [r8]
   1a008:	mov	r0, r4
   1a00c:	bl	194f4 <__assert_fail@plt+0x7fdc>
   1a010:	b	19fdc <__assert_fail@plt+0x8ac4>
   1a014:	mov	r5, #0
   1a018:	b	1a030 <__assert_fail@plt+0x8b18>
   1a01c:	add	r8, r8, #1
   1a020:	add	r5, r5, #2
   1a024:	mov	r0, #0
   1a028:	cmp	r5, #512	; 0x200
   1a02c:	beq	19df0 <__assert_fail@plt+0x88d8>
   1a030:	ldr	r0, [r6]
   1a034:	ldrb	r0, [r0, r5]
   1a038:	tst	r0, #1
   1a03c:	beq	1a01c <__assert_fail@plt+0x8b04>
   1a040:	ldrb	r1, [r8]
   1a044:	mov	r0, r4
   1a048:	bl	194f4 <__assert_fail@plt+0x7fdc>
   1a04c:	b	1a01c <__assert_fail@plt+0x8b04>
   1a050:	mov	r5, #0
   1a054:	b	1a06c <__assert_fail@plt+0x8b54>
   1a058:	add	r8, r8, #1
   1a05c:	add	r5, r5, #2
   1a060:	mov	r0, #0
   1a064:	cmp	r5, #512	; 0x200
   1a068:	beq	19df0 <__assert_fail@plt+0x88d8>
   1a06c:	ldr	r0, [r6]
   1a070:	add	r0, r0, r5
   1a074:	ldrsh	r0, [r0]
   1a078:	cmn	r0, #1
   1a07c:	bgt	1a058 <__assert_fail@plt+0x8b40>
   1a080:	ldrb	r1, [r8]
   1a084:	mov	r0, r4
   1a088:	bl	194f4 <__assert_fail@plt+0x7fdc>
   1a08c:	b	1a058 <__assert_fail@plt+0x8b40>
   1a090:	mov	r5, #0
   1a094:	b	1a0ac <__assert_fail@plt+0x8b94>
   1a098:	add	r8, r8, #1
   1a09c:	add	r5, r5, #2
   1a0a0:	mov	r0, #0
   1a0a4:	cmp	r5, #512	; 0x200
   1a0a8:	beq	19df0 <__assert_fail@plt+0x88d8>
   1a0ac:	ldr	r0, [r6]
   1a0b0:	ldrb	r0, [r0, r5]
   1a0b4:	tst	r0, #4
   1a0b8:	beq	1a098 <__assert_fail@plt+0x8b80>
   1a0bc:	ldrb	r1, [r8]
   1a0c0:	mov	r0, r4
   1a0c4:	bl	194f4 <__assert_fail@plt+0x7fdc>
   1a0c8:	b	1a098 <__assert_fail@plt+0x8b80>
   1a0cc:	mov	r5, #0
   1a0d0:	b	1a0e8 <__assert_fail@plt+0x8bd0>
   1a0d4:	add	r8, r8, #1
   1a0d8:	add	r5, r5, #2
   1a0dc:	mov	r0, #0
   1a0e0:	cmp	r5, #512	; 0x200
   1a0e4:	beq	19df0 <__assert_fail@plt+0x88d8>
   1a0e8:	ldr	r0, [r6]
   1a0ec:	add	r0, r0, r5
   1a0f0:	ldrb	r0, [r0, #1]
   1a0f4:	tst	r0, #16
   1a0f8:	beq	1a0d4 <__assert_fail@plt+0x8bbc>
   1a0fc:	ldrb	r1, [r8]
   1a100:	mov	r0, r4
   1a104:	bl	194f4 <__assert_fail@plt+0x7fdc>
   1a108:	b	1a0d4 <__assert_fail@plt+0x8bbc>
   1a10c:	mov	r0, #12
   1a110:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a114:	mov	r1, #0
   1a118:	ldr	r2, [r0, r1, lsl #2]
   1a11c:	mvn	r2, r2
   1a120:	str	r2, [r0, r1, lsl #2]
   1a124:	add	r1, r1, #1
   1a128:	cmp	r1, #8
   1a12c:	bne	1a118 <__assert_fail@plt+0x8c00>
   1a130:	bx	lr
   1a134:	mov	r2, #0
   1a138:	ldr	ip, [r1, r2, lsl #2]
   1a13c:	ldr	r3, [r0, r2, lsl #2]
   1a140:	and	r3, r3, ip
   1a144:	str	r3, [r0, r2, lsl #2]
   1a148:	add	r2, r2, #1
   1a14c:	cmp	r2, #8
   1a150:	bne	1a138 <__assert_fail@plt+0x8c20>
   1a154:	bx	lr
   1a158:	push	{fp, lr}
   1a15c:	mov	fp, sp
   1a160:	mov	lr, r0
   1a164:	ldr	r3, [r0, #80]	; 0x50
   1a168:	mov	r0, #1
   1a16c:	cmp	r3, #1
   1a170:	beq	1a1b0 <__assert_fail@plt+0x8c98>
   1a174:	ldr	ip, [lr, #28]
   1a178:	add	r3, r1, #1
   1a17c:	cmp	r3, ip
   1a180:	popge	{fp, pc}
   1a184:	ldr	r0, [lr, #8]
   1a188:	add	ip, r0, r1, lsl #2
   1a18c:	mov	r0, #1
   1a190:	ldr	r3, [ip, r0, lsl #2]
   1a194:	cmn	r3, #1
   1a198:	bne	1a1b0 <__assert_fail@plt+0x8c98>
   1a19c:	add	r0, r0, #1
   1a1a0:	add	r3, r1, r0
   1a1a4:	ldr	r2, [lr, #28]
   1a1a8:	cmp	r3, r2
   1a1ac:	blt	1a190 <__assert_fail@plt+0x8c78>
   1a1b0:	pop	{fp, pc}
   1a1b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a1b8:	add	fp, sp, #24
   1a1bc:	mov	r7, r1
   1a1c0:	mov	r9, r0
   1a1c4:	ldr	r0, [r1, #40]	; 0x28
   1a1c8:	ldr	r1, [r1, #56]	; 0x38
   1a1cc:	mov	r8, #7
   1a1d0:	cmp	r1, r0
   1a1d4:	ble	1a298 <__assert_fail@plt+0x8d80>
   1a1d8:	mov	r6, r2
   1a1dc:	ldrb	r5, [r2]
   1a1e0:	mov	r4, #0
   1a1e4:	b	1a1fc <__assert_fail@plt+0x8ce4>
   1a1e8:	ldr	r1, [r9, #4]
   1a1ec:	strb	r0, [r1, r4]
   1a1f0:	add	r4, r4, #1
   1a1f4:	cmp	r4, #32
   1a1f8:	beq	1a298 <__assert_fail@plt+0x8d80>
   1a1fc:	ldrb	r0, [r6, #4]
   1a200:	cmp	r0, #30
   1a204:	bne	1a214 <__assert_fail@plt+0x8cfc>
   1a208:	mov	r0, r7
   1a20c:	bl	1a2a0 <__assert_fail@plt+0x8d88>
   1a210:	b	1a228 <__assert_fail@plt+0x8d10>
   1a214:	ldr	r0, [r7, #4]
   1a218:	ldr	r1, [r7, #40]	; 0x28
   1a21c:	add	r2, r1, #1
   1a220:	str	r2, [r7, #40]	; 0x28
   1a224:	ldrb	r0, [r0, r1]
   1a228:	ldr	r1, [r7, #40]	; 0x28
   1a22c:	ldr	r2, [r7, #56]	; 0x38
   1a230:	cmp	r2, r1
   1a234:	ble	1a298 <__assert_fail@plt+0x8d80>
   1a238:	cmp	r0, r5
   1a23c:	bne	1a1e8 <__assert_fail@plt+0x8cd0>
   1a240:	ldr	r2, [r7, #4]
   1a244:	ldrb	r2, [r2, r1]
   1a248:	cmp	r2, #93	; 0x5d
   1a24c:	bne	1a1e8 <__assert_fail@plt+0x8cd0>
   1a250:	add	r0, r1, #1
   1a254:	str	r0, [r7, #40]	; 0x28
   1a258:	ldr	r0, [r9, #4]
   1a25c:	mov	r8, #0
   1a260:	strb	r8, [r0, r4]
   1a264:	ldrb	r0, [r6, #4]
   1a268:	cmp	r0, #30
   1a26c:	beq	1a288 <__assert_fail@plt+0x8d70>
   1a270:	cmp	r0, #28
   1a274:	beq	1a290 <__assert_fail@plt+0x8d78>
   1a278:	cmp	r0, #26
   1a27c:	bne	1a298 <__assert_fail@plt+0x8d80>
   1a280:	mov	r0, #3
   1a284:	b	1a294 <__assert_fail@plt+0x8d7c>
   1a288:	mov	r0, #4
   1a28c:	b	1a294 <__assert_fail@plt+0x8d7c>
   1a290:	mov	r0, #2
   1a294:	str	r0, [r9]
   1a298:	mov	r0, r8
   1a29c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a2a0:	push	{r4, r5, r6, sl, fp, lr}
   1a2a4:	add	fp, sp, #16
   1a2a8:	mov	r4, r0
   1a2ac:	ldrb	r0, [r0, #75]	; 0x4b
   1a2b0:	cmp	r0, #0
   1a2b4:	bne	1a2d4 <__assert_fail@plt+0x8dbc>
   1a2b8:	ldr	r0, [r4, #4]
   1a2bc:	ldr	r1, [r4, #40]	; 0x28
   1a2c0:	add	r2, r1, #1
   1a2c4:	str	r2, [r4, #40]	; 0x28
   1a2c8:	ldrb	r6, [r0, r1]
   1a2cc:	uxtb	r0, r6
   1a2d0:	pop	{r4, r5, r6, sl, fp, pc}
   1a2d4:	ldrb	r0, [r4, #76]	; 0x4c
   1a2d8:	cmp	r0, #0
   1a2dc:	beq	1a340 <__assert_fail@plt+0x8e28>
   1a2e0:	ldr	r0, [r4, #28]
   1a2e4:	ldr	r5, [r4, #40]	; 0x28
   1a2e8:	cmp	r5, r0
   1a2ec:	beq	1a300 <__assert_fail@plt+0x8de8>
   1a2f0:	ldr	r0, [r4, #8]
   1a2f4:	ldr	r0, [r0, r5, lsl #2]
   1a2f8:	cmn	r0, #1
   1a2fc:	beq	1a35c <__assert_fail@plt+0x8e44>
   1a300:	ldr	r0, [r4]
   1a304:	ldr	r1, [r4, #12]
   1a308:	ldr	r2, [r4, #24]
   1a30c:	ldr	r1, [r1, r5, lsl #2]
   1a310:	add	r1, r2, r1
   1a314:	add	r0, r0, r1
   1a318:	ldrsb	r6, [r0]
   1a31c:	cmn	r6, #1
   1a320:	ble	1a35c <__assert_fail@plt+0x8e44>
   1a324:	mov	r0, r4
   1a328:	mov	r1, r5
   1a32c:	bl	1a158 <__assert_fail@plt+0x8c40>
   1a330:	add	r0, r0, r5
   1a334:	str	r0, [r4, #40]	; 0x28
   1a338:	uxtb	r0, r6
   1a33c:	pop	{r4, r5, r6, sl, fp, pc}
   1a340:	ldr	r0, [r4]
   1a344:	ldr	r1, [r4, #24]
   1a348:	ldr	r2, [r4, #40]	; 0x28
   1a34c:	add	r3, r2, #1
   1a350:	str	r3, [r4, #40]	; 0x28
   1a354:	add	r1, r2, r1
   1a358:	b	1a2c8 <__assert_fail@plt+0x8db0>
   1a35c:	add	r0, r5, #1
   1a360:	str	r0, [r4, #40]	; 0x28
   1a364:	ldr	r0, [r4, #4]
   1a368:	ldrb	r6, [r0, r5]
   1a36c:	uxtb	r0, r6
   1a370:	pop	{r4, r5, r6, sl, fp, pc}
   1a374:	ldr	r1, [r1, #92]	; 0x5c
   1a378:	cmp	r1, #2
   1a37c:	bxlt	lr
   1a380:	b	11434 <btowc@plt>
   1a384:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a388:	add	fp, sp, #24
   1a38c:	mov	r4, r2
   1a390:	mov	r5, r1
   1a394:	mov	r6, r0
   1a398:	mvn	r1, #0
   1a39c:	movw	r8, #32816	; 0x8030
   1a3a0:	mov	r7, r1
   1a3a4:	mov	r0, r5
   1a3a8:	mov	r1, r6
   1a3ac:	mov	r2, r4
   1a3b0:	bl	17490 <__assert_fail@plt+0x5f78>
   1a3b4:	ldrb	r2, [r5, #4]
   1a3b8:	cmp	r2, #24
   1a3bc:	beq	1a424 <__assert_fail@plt+0x8f0c>
   1a3c0:	cmp	r2, #2
   1a3c4:	beq	1a420 <__assert_fail@plt+0x8f08>
   1a3c8:	ldrb	r0, [r5]
   1a3cc:	cmp	r0, #44	; 0x2c
   1a3d0:	beq	1a424 <__assert_fail@plt+0x8f0c>
   1a3d4:	mvn	r1, #1
   1a3d8:	cmp	r0, #48	; 0x30
   1a3dc:	bcc	1a3a0 <__assert_fail@plt+0x8e88>
   1a3e0:	cmp	r2, #1
   1a3e4:	bne	1a3a0 <__assert_fail@plt+0x8e88>
   1a3e8:	cmn	r7, #2
   1a3ec:	beq	1a3a0 <__assert_fail@plt+0x8e88>
   1a3f0:	cmp	r0, #57	; 0x39
   1a3f4:	bhi	1a3a0 <__assert_fail@plt+0x8e88>
   1a3f8:	cmn	r7, #1
   1a3fc:	beq	1a418 <__assert_fail@plt+0x8f00>
   1a400:	add	r1, r7, r7, lsl #2
   1a404:	add	r0, r0, r1, lsl #1
   1a408:	cmp	r0, r8
   1a40c:	movge	r0, r8
   1a410:	sub	r1, r0, #48	; 0x30
   1a414:	b	1a3a0 <__assert_fail@plt+0x8e88>
   1a418:	sub	r1, r0, #48	; 0x30
   1a41c:	b	1a3a0 <__assert_fail@plt+0x8e88>
   1a420:	mvn	r7, #1
   1a424:	mov	r0, r7
   1a428:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a42c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a430:	add	fp, sp, #24
   1a434:	sub	sp, sp, #8
   1a438:	mov	r8, r1
   1a43c:	mov	r5, r0
   1a440:	mov	r3, r0
   1a444:	ldr	r7, [r3], #20
   1a448:	mov	r6, #0
   1a44c:	mov	r0, r1
   1a450:	mov	r1, #0
   1a454:	mov	r2, #0
   1a458:	bl	18694 <__assert_fail@plt+0x717c>
   1a45c:	str	r0, [sp, #4]
   1a460:	cmp	r0, #0
   1a464:	beq	1a4fc <__assert_fail@plt+0x8fe4>
   1a468:	add	r4, sp, #4
   1a46c:	mov	r6, #0
   1a470:	str	r7, [r0]
   1a474:	ldr	r0, [r4]
   1a478:	ldr	r1, [r0, #24]
   1a47c:	orr	r1, r1, #262144	; 0x40000
   1a480:	str	r1, [r0, #24]
   1a484:	ldr	r0, [r5, #4]
   1a488:	ldr	r7, [r4]
   1a48c:	cmp	r0, #0
   1a490:	beq	1a4a0 <__assert_fail@plt+0x8f88>
   1a494:	add	r4, r7, #4
   1a498:	mov	r5, r0
   1a49c:	b	1a4d4 <__assert_fail@plt+0x8fbc>
   1a4a0:	mov	r1, #0
   1a4a4:	mov	r0, r5
   1a4a8:	ldr	r5, [r5, #8]
   1a4ac:	cmp	r5, r1
   1a4b0:	cmpne	r5, #0
   1a4b4:	bne	1a4d0 <__assert_fail@plt+0x8fb8>
   1a4b8:	ldr	r7, [r7]
   1a4bc:	ldr	r5, [r0]
   1a4c0:	cmp	r5, #0
   1a4c4:	mov	r1, r0
   1a4c8:	bne	1a4a4 <__assert_fail@plt+0x8f8c>
   1a4cc:	b	1a4f8 <__assert_fail@plt+0x8fe0>
   1a4d0:	add	r4, r7, #8
   1a4d4:	add	r3, r5, #20
   1a4d8:	mov	r0, r8
   1a4dc:	mov	r1, #0
   1a4e0:	mov	r2, #0
   1a4e4:	bl	18694 <__assert_fail@plt+0x717c>
   1a4e8:	str	r0, [r4]
   1a4ec:	cmp	r0, #0
   1a4f0:	bne	1a470 <__assert_fail@plt+0x8f58>
   1a4f4:	b	1a4fc <__assert_fail@plt+0x8fe4>
   1a4f8:	ldr	r6, [sp, #4]
   1a4fc:	mov	r0, r6
   1a500:	sub	sp, fp, #24
   1a504:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a508:	ldr	r2, [r1, #24]
   1a50c:	uxtb	r3, r2
   1a510:	cmp	r3, #17
   1a514:	bne	1a528 <__assert_fail@plt+0x9010>
   1a518:	ldr	r3, [r1, #20]
   1a51c:	cmp	r3, r0
   1a520:	orreq	r0, r2, #524288	; 0x80000
   1a524:	streq	r0, [r1, #24]
   1a528:	mov	r0, #0
   1a52c:	bx	lr
   1a530:	push	{r4, r5, r6, r7, fp, lr}
   1a534:	add	fp, sp, #16
   1a538:	mov	r4, r2
   1a53c:	mov	r5, r1
   1a540:	mov	r6, r0
   1a544:	mov	r0, r2
   1a548:	mov	r1, r6
   1a54c:	blx	r5
   1a550:	cmp	r0, #0
   1a554:	beq	1a574 <__assert_fail@plt+0x905c>
   1a558:	b	1a5ac <__assert_fail@plt+0x9094>
   1a55c:	mov	r0, r4
   1a560:	mov	r1, r7
   1a564:	blx	r5
   1a568:	cmp	r0, #0
   1a56c:	mov	r6, r7
   1a570:	bne	1a5ac <__assert_fail@plt+0x9094>
   1a574:	ldr	r7, [r6, #4]
   1a578:	cmp	r7, #0
   1a57c:	bne	1a55c <__assert_fail@plt+0x9044>
   1a580:	mov	r1, #0
   1a584:	mov	r0, r6
   1a588:	ldr	r7, [r6, #8]
   1a58c:	cmp	r7, r1
   1a590:	cmpne	r7, #0
   1a594:	bne	1a55c <__assert_fail@plt+0x9044>
   1a598:	ldr	r6, [r0]
   1a59c:	cmp	r6, #0
   1a5a0:	mov	r1, r0
   1a5a4:	bne	1a584 <__assert_fail@plt+0x906c>
   1a5a8:	mov	r0, #0
   1a5ac:	pop	{r4, r5, r6, r7, fp, pc}
   1a5b0:	ldrb	r2, [r1, #24]
   1a5b4:	cmp	r2, #17
   1a5b8:	beq	1a5ec <__assert_fail@plt+0x90d4>
   1a5bc:	cmp	r2, #4
   1a5c0:	bne	1a640 <__assert_fail@plt+0x9128>
   1a5c4:	ldr	r2, [r0, #132]	; 0x84
   1a5c8:	cmp	r2, #0
   1a5cc:	beq	1a640 <__assert_fail@plt+0x9128>
   1a5d0:	ldr	r3, [r1, #20]
   1a5d4:	ldr	r2, [r2, r3, lsl #2]
   1a5d8:	str	r2, [r1, #20]
   1a5dc:	ldr	r1, [r0, #80]	; 0x50
   1a5e0:	mov	r3, #1
   1a5e4:	orr	r1, r1, r3, lsl r2
   1a5e8:	b	1a63c <__assert_fail@plt+0x9124>
   1a5ec:	ldr	r2, [r1, #4]
   1a5f0:	cmp	r2, #0
   1a5f4:	beq	1a640 <__assert_fail@plt+0x9128>
   1a5f8:	ldrb	r3, [r2, #24]
   1a5fc:	cmp	r3, #17
   1a600:	bne	1a640 <__assert_fail@plt+0x9128>
   1a604:	ldr	r3, [r2, #4]
   1a608:	ldr	r2, [r2, #20]
   1a60c:	str	r3, [r1, #4]
   1a610:	cmp	r3, #0
   1a614:	strne	r1, [r3]
   1a618:	ldr	r1, [r1, #20]
   1a61c:	ldr	r3, [r0, #132]	; 0x84
   1a620:	ldr	r1, [r3, r1, lsl #2]
   1a624:	str	r1, [r3, r2, lsl #2]
   1a628:	cmp	r2, #31
   1a62c:	bgt	1a640 <__assert_fail@plt+0x9128>
   1a630:	ldr	r1, [r0, #80]	; 0x50
   1a634:	mov	r3, #1
   1a638:	bic	r1, r1, r3, lsl r2
   1a63c:	str	r1, [r0, #80]	; 0x50
   1a640:	mov	r0, #0
   1a644:	bx	lr
   1a648:	push	{r4, r5, fp, lr}
   1a64c:	add	fp, sp, #8
   1a650:	sub	sp, sp, #8
   1a654:	mov	r4, r1
   1a658:	mov	r5, r0
   1a65c:	mov	r0, #0
   1a660:	str	r0, [sp, #4]
   1a664:	ldr	r2, [r1, #4]
   1a668:	cmp	r2, #0
   1a66c:	beq	1a694 <__assert_fail@plt+0x917c>
   1a670:	ldrb	r0, [r2, #24]
   1a674:	cmp	r0, #17
   1a678:	bne	1a694 <__assert_fail@plt+0x917c>
   1a67c:	add	r0, sp, #4
   1a680:	mov	r1, r5
   1a684:	bl	1aa6c <__assert_fail@plt+0x9554>
   1a688:	str	r0, [r4, #4]
   1a68c:	cmp	r0, #0
   1a690:	strne	r4, [r0]
   1a694:	ldr	r2, [r4, #8]
   1a698:	cmp	r2, #0
   1a69c:	beq	1a6c4 <__assert_fail@plt+0x91ac>
   1a6a0:	ldrb	r0, [r2, #24]
   1a6a4:	cmp	r0, #17
   1a6a8:	bne	1a6c4 <__assert_fail@plt+0x91ac>
   1a6ac:	add	r0, sp, #4
   1a6b0:	mov	r1, r5
   1a6b4:	bl	1aa6c <__assert_fail@plt+0x9554>
   1a6b8:	str	r0, [r4, #8]
   1a6bc:	cmp	r0, #0
   1a6c0:	strne	r4, [r0]
   1a6c4:	ldr	r0, [sp, #4]
   1a6c8:	sub	sp, fp, #8
   1a6cc:	pop	{r4, r5, fp, pc}
   1a6d0:	push	{r4, r5, fp, lr}
   1a6d4:	add	fp, sp, #8
   1a6d8:	mov	r4, r1
   1a6dc:	mov	r5, r0
   1a6e0:	ldr	r2, [r1, #24]
   1a6e4:	uxtb	r0, r2
   1a6e8:	cmp	r0, #16
   1a6ec:	bne	1a70c <__assert_fail@plt+0x91f4>
   1a6f0:	ldr	r0, [r4, #4]
   1a6f4:	ldr	r1, [r0, #12]
   1a6f8:	str	r1, [r4, #12]
   1a6fc:	ldr	r0, [r0, #28]
   1a700:	str	r0, [r4, #28]
   1a704:	mov	r0, #0
   1a708:	pop	{r4, r5, fp, pc}
   1a70c:	str	r4, [r4, #12]
   1a710:	ldr	r1, [r4, #20]
   1a714:	mov	r0, r5
   1a718:	bl	1ab88 <__assert_fail@plt+0x9670>
   1a71c:	str	r0, [r4, #28]
   1a720:	cmn	r0, #1
   1a724:	beq	1a758 <__assert_fail@plt+0x9240>
   1a728:	mov	r1, r0
   1a72c:	ldrb	r2, [r4, #24]
   1a730:	mov	r0, #0
   1a734:	cmp	r2, #12
   1a738:	popne	{r4, r5, fp, pc}
   1a73c:	ldr	r2, [r5]
   1a740:	add	r1, r2, r1, lsl #3
   1a744:	ldr	r2, [r1, #4]
   1a748:	ldr	r3, [r4, #20]
   1a74c:	bfi	r2, r3, #8, #10
   1a750:	str	r2, [r1, #4]
   1a754:	pop	{r4, r5, fp, pc}
   1a758:	mov	r0, #12
   1a75c:	pop	{r4, r5, fp, pc}
   1a760:	ldrb	r0, [r1, #24]
   1a764:	cmp	r0, #16
   1a768:	beq	1a77c <__assert_fail@plt+0x9264>
   1a76c:	cmp	r0, #11
   1a770:	bne	1a798 <__assert_fail@plt+0x9280>
   1a774:	ldr	r0, [r1, #4]
   1a778:	b	1a7b8 <__assert_fail@plt+0x92a0>
   1a77c:	ldmib	r1, {r0, r2}
   1a780:	ldr	r3, [r2, #12]
   1a784:	str	r3, [r0, #16]
   1a788:	ldr	r0, [r1, #16]
   1a78c:	str	r0, [r2, #16]
   1a790:	mov	r0, #0
   1a794:	bx	lr
   1a798:	ldr	r0, [r1, #4]
   1a79c:	cmp	r0, #0
   1a7a0:	ldrne	r2, [r1, #16]
   1a7a4:	strne	r2, [r0, #16]
   1a7a8:	ldr	r0, [r1, #8]
   1a7ac:	cmp	r0, #0
   1a7b0:	beq	1a7bc <__assert_fail@plt+0x92a4>
   1a7b4:	ldr	r1, [r1, #16]
   1a7b8:	str	r1, [r0, #16]
   1a7bc:	mov	r0, #0
   1a7c0:	bx	lr
   1a7c4:	push	{fp, lr}
   1a7c8:	mov	fp, sp
   1a7cc:	ldr	r2, [r1, #24]
   1a7d0:	ldr	ip, [r1, #28]
   1a7d4:	mvn	r3, #1
   1a7d8:	uxtab	r2, r3, r2
   1a7dc:	cmp	r2, #14
   1a7e0:	bhi	1a894 <__assert_fail@plt+0x937c>
   1a7e4:	add	r3, pc, #0
   1a7e8:	ldr	pc, [r3, r2, lsl #2]
   1a7ec:	ldrdeq	sl, [r1], -ip
   1a7f0:	muleq	r1, r4, r8
   1a7f4:	andeq	sl, r1, r8, lsr #17
   1a7f8:	muleq	r1, r4, r8
   1a7fc:	muleq	r1, r4, r8
   1a800:	muleq	r1, r4, r8
   1a804:	andeq	sl, r1, r8, lsr #16
   1a808:	andeq	sl, r1, r8, lsr #16
   1a80c:	andeq	sl, r1, r4, asr #16
   1a810:	andeq	sl, r1, r4, asr #16
   1a814:	andeq	sl, r1, r8, lsr #16
   1a818:	muleq	r1, r4, r8
   1a81c:	muleq	r1, r4, r8
   1a820:	muleq	r1, r4, r8
   1a824:	ldrdeq	sl, [r1], -ip
   1a828:	ldr	r0, [r0, #20]
   1a82c:	add	r2, ip, ip, lsl #1
   1a830:	add	r0, r0, r2, lsl #2
   1a834:	ldr	r1, [r1, #16]
   1a838:	ldr	r1, [r1, #28]
   1a83c:	pop	{fp, lr}
   1a840:	b	1add4 <__assert_fail@plt+0x98bc>
   1a844:	ldrb	r2, [r0, #88]	; 0x58
   1a848:	orr	r2, r2, #1
   1a84c:	strb	r2, [r0, #88]	; 0x58
   1a850:	add	r3, r1, #16
   1a854:	ldr	lr, [r1, #4]
   1a858:	ldr	r1, [r1, #8]
   1a85c:	cmp	r1, #0
   1a860:	mov	r2, r3
   1a864:	addne	r2, r1, #12
   1a868:	ldr	r1, [r2]
   1a86c:	ldr	r2, [r1, #28]
   1a870:	cmp	lr, #0
   1a874:	addne	r3, lr, #12
   1a878:	ldr	r1, [r3]
   1a87c:	ldr	r1, [r1, #28]
   1a880:	ldr	r0, [r0, #20]
   1a884:	add	r3, ip, ip, lsl #1
   1a888:	add	r0, r0, r3, lsl #2
   1a88c:	pop	{fp, lr}
   1a890:	b	1ad58 <__assert_fail@plt+0x9840>
   1a894:	ldr	r0, [r0, #12]
   1a898:	ldr	r1, [r1, #16]
   1a89c:	ldr	r1, [r1, #28]
   1a8a0:	str	r1, [r0, ip, lsl #2]
   1a8a4:	b	1a8dc <__assert_fail@plt+0x93c4>
   1a8a8:	ldr	r3, [r0, #12]
   1a8ac:	ldr	r2, [r1, #16]
   1a8b0:	ldr	r2, [r2, #28]
   1a8b4:	str	r2, [r3, ip, lsl #2]
   1a8b8:	ldrb	r1, [r1, #24]
   1a8bc:	cmp	r1, #4
   1a8c0:	bne	1a8dc <__assert_fail@plt+0x93c4>
   1a8c4:	ldr	r0, [r0, #20]
   1a8c8:	add	r1, ip, ip, lsl #1
   1a8cc:	add	r0, r0, r1, lsl #2
   1a8d0:	mov	r1, r2
   1a8d4:	pop	{fp, lr}
   1a8d8:	b	1add4 <__assert_fail@plt+0x98bc>
   1a8dc:	mov	r0, #0
   1a8e0:	pop	{fp, pc}
   1a8e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a8e8:	add	fp, sp, #24
   1a8ec:	sub	sp, sp, #16
   1a8f0:	mov	r4, r0
   1a8f4:	mov	r7, #0
   1a8f8:	add	r8, sp, #4
   1a8fc:	mov	r6, #0
   1a900:	b	1a930 <__assert_fail@plt+0x9418>
   1a904:	mov	r0, r7
   1a908:	ldr	r1, [r4, #8]
   1a90c:	add	r2, r6, #1
   1a910:	subs	r3, r2, r1
   1a914:	mov	r6, r3
   1a918:	movne	r6, r2
   1a91c:	movwne	r3, #1
   1a920:	and	r7, r0, r3
   1a924:	tst	r0, #1
   1a928:	cmpeq	r2, r1
   1a92c:	beq	1a98c <__assert_fail@plt+0x9474>
   1a930:	ldr	r0, [r4, #24]
   1a934:	add	r5, r6, r6, lsl #1
   1a938:	add	r0, r0, r5, lsl #2
   1a93c:	ldr	r0, [r0, #4]
   1a940:	cmp	r0, #0
   1a944:	bne	1a904 <__assert_fail@plt+0x93ec>
   1a948:	mov	r0, r8
   1a94c:	mov	r1, r4
   1a950:	mov	r2, r6
   1a954:	mov	r3, #1
   1a958:	bl	1ae20 <__assert_fail@plt+0x9908>
   1a95c:	cmp	r0, #0
   1a960:	bne	1a990 <__assert_fail@plt+0x9478>
   1a964:	ldr	r0, [r4, #24]
   1a968:	add	r0, r0, r5, lsl #2
   1a96c:	ldr	r0, [r0, #4]
   1a970:	cmp	r0, #0
   1a974:	mov	r0, r7
   1a978:	bne	1a908 <__assert_fail@plt+0x93f0>
   1a97c:	ldr	r0, [sp, #12]
   1a980:	bl	22b58 <__assert_fail@plt+0x11640>
   1a984:	mov	r0, #1
   1a988:	b	1a908 <__assert_fail@plt+0x93f0>
   1a98c:	mov	r0, #0
   1a990:	sub	sp, fp, #24
   1a994:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a998:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a99c:	add	fp, sp, #24
   1a9a0:	mov	r4, r0
   1a9a4:	ldr	r0, [r0, #8]
   1a9a8:	cmp	r0, #0
   1a9ac:	beq	1aa5c <__assert_fail@plt+0x9544>
   1a9b0:	mov	r0, #0
   1a9b4:	mov	r1, #0
   1a9b8:	mov	r2, #0
   1a9bc:	ldr	r3, [r4, #28]
   1a9c0:	str	r0, [r3, r1]!
   1a9c4:	str	r0, [r3, #4]
   1a9c8:	str	r0, [r3, #8]
   1a9cc:	add	r1, r1, #12
   1a9d0:	add	r2, r2, #1
   1a9d4:	ldr	r3, [r4, #8]
   1a9d8:	cmp	r2, r3
   1a9dc:	bcc	1a9bc <__assert_fail@plt+0x94a4>
   1a9e0:	cmp	r3, #0
   1a9e4:	beq	1aa5c <__assert_fail@plt+0x9544>
   1a9e8:	mov	r5, #0
   1a9ec:	b	1aa00 <__assert_fail@plt+0x94e8>
   1a9f0:	add	r5, r5, #1
   1a9f4:	ldr	r0, [r4, #8]
   1a9f8:	cmp	r5, r0
   1a9fc:	bcs	1aa5c <__assert_fail@plt+0x9544>
   1aa00:	ldr	r0, [r4, #24]
   1aa04:	add	r8, r5, r5, lsl #1
   1aa08:	add	r0, r0, r8, lsl #2
   1aa0c:	ldr	r1, [r0, #4]
   1aa10:	cmp	r1, #1
   1aa14:	blt	1a9f0 <__assert_fail@plt+0x94d8>
   1aa18:	ldr	r7, [r0, #8]
   1aa1c:	mov	r6, #0
   1aa20:	ldr	r0, [r7, r6, lsl #2]
   1aa24:	add	r0, r0, r0, lsl #1
   1aa28:	ldr	r1, [r4, #28]
   1aa2c:	add	r0, r1, r0, lsl #2
   1aa30:	mov	r1, r5
   1aa34:	bl	1b660 <__assert_fail@plt+0xa148>
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1aa64 <__assert_fail@plt+0x954c>
   1aa40:	add	r6, r6, #1
   1aa44:	ldr	r0, [r4, #24]
   1aa48:	add	r0, r0, r8, lsl #2
   1aa4c:	ldr	r0, [r0, #4]
   1aa50:	cmp	r6, r0
   1aa54:	blt	1aa20 <__assert_fail@plt+0x9508>
   1aa58:	b	1a9f0 <__assert_fail@plt+0x94d8>
   1aa5c:	mov	r0, #0
   1aa60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa64:	mov	r0, #12
   1aa68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa70:	add	fp, sp, #28
   1aa74:	sub	sp, sp, #4
   1aa78:	mov	r9, r2
   1aa7c:	mov	r8, r0
   1aa80:	ldr	r5, [r2, #4]
   1aa84:	ldr	r6, [r1]
   1aa88:	cmp	r5, #0
   1aa8c:	ldrbne	r0, [r1, #28]
   1aa90:	andsne	r0, r0, #16
   1aa94:	bne	1ab60 <__assert_fail@plt+0x9648>
   1aa98:	mov	r0, r6
   1aa9c:	mov	r1, #0
   1aaa0:	mov	r2, #0
   1aaa4:	mov	r3, #8
   1aaa8:	bl	17618 <__assert_fail@plt+0x6100>
   1aaac:	mov	sl, r0
   1aab0:	mov	r0, r6
   1aab4:	mov	r1, #0
   1aab8:	mov	r2, #0
   1aabc:	mov	r3, #9
   1aac0:	bl	17618 <__assert_fail@plt+0x6100>
   1aac4:	mov	r4, r0
   1aac8:	cmp	r5, #0
   1aacc:	mov	r7, r0
   1aad0:	beq	1aaec <__assert_fail@plt+0x95d4>
   1aad4:	mov	r0, r6
   1aad8:	mov	r1, r5
   1aadc:	mov	r2, r4
   1aae0:	mov	r3, #16
   1aae4:	bl	17618 <__assert_fail@plt+0x6100>
   1aae8:	mov	r7, r0
   1aaec:	mov	r0, r6
   1aaf0:	mov	r1, sl
   1aaf4:	mov	r2, r7
   1aaf8:	mov	r3, #16
   1aafc:	bl	17618 <__assert_fail@plt+0x6100>
   1ab00:	cmp	r4, #0
   1ab04:	beq	1ab14 <__assert_fail@plt+0x95fc>
   1ab08:	cmp	sl, #0
   1ab0c:	cmpne	r7, #0
   1ab10:	bne	1ab24 <__assert_fail@plt+0x960c>
   1ab14:	mov	r0, #12
   1ab18:	str	r0, [r8]
   1ab1c:	mov	r5, #0
   1ab20:	b	1ab7c <__assert_fail@plt+0x9664>
   1ab24:	mov	r5, r0
   1ab28:	cmp	r0, #0
   1ab2c:	beq	1ab14 <__assert_fail@plt+0x95fc>
   1ab30:	ldr	r0, [r9, #20]
   1ab34:	str	r0, [r4, #20]
   1ab38:	str	r0, [sl, #20]
   1ab3c:	ldr	r0, [r4, #24]
   1ab40:	ldr	r1, [r9, #24]
   1ab44:	lsr	r1, r1, #19
   1ab48:	bfi	r0, r1, #19, #1
   1ab4c:	str	r0, [r4, #24]
   1ab50:	ldr	r0, [sl, #24]
   1ab54:	bfi	r0, r1, #19, #1
   1ab58:	str	r0, [sl, #24]
   1ab5c:	b	1ab7c <__assert_fail@plt+0x9664>
   1ab60:	ldr	r0, [r9, #20]
   1ab64:	cmp	r0, #31
   1ab68:	bgt	1ab7c <__assert_fail@plt+0x9664>
   1ab6c:	ldr	r1, [r6, #80]	; 0x50
   1ab70:	mov	r2, #1
   1ab74:	tst	r1, r2, lsl r0
   1ab78:	bne	1aa98 <__assert_fail@plt+0x9580>
   1ab7c:	mov	r0, r5
   1ab80:	sub	sp, fp, #28
   1ab84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab8c:	add	fp, sp, #28
   1ab90:	sub	sp, sp, #12
   1ab94:	mov	r5, r2
   1ab98:	mov	r9, r1
   1ab9c:	mov	r4, r0
   1aba0:	ldr	r7, [r0, #4]
   1aba4:	ldr	r0, [r0, #8]
   1aba8:	cmp	r0, r7
   1abac:	bcs	1ac7c <__assert_fail@plt+0x9764>
   1abb0:	ldr	r0, [r4]
   1abb4:	ldr	r1, [r4, #8]
   1abb8:	str	r9, [r0, r1, lsl #3]!
   1abbc:	str	r5, [r0, #4]
   1abc0:	ldr	r0, [r4]
   1abc4:	ldr	r1, [r4, #8]
   1abc8:	add	r0, r0, r1, lsl #3
   1abcc:	ldr	r1, [r0, #4]
   1abd0:	bfc	r1, #8, #10
   1abd4:	str	r1, [r0, #4]
   1abd8:	uxtb	r1, r5
   1abdc:	cmp	r1, #5
   1abe0:	bne	1abf4 <__assert_fail@plt+0x96dc>
   1abe4:	ldr	r2, [r4, #92]	; 0x5c
   1abe8:	mov	r0, #1048576	; 0x100000
   1abec:	cmp	r2, #1
   1abf0:	bgt	1ac04 <__assert_fail@plt+0x96ec>
   1abf4:	sub	r0, r1, #6
   1abf8:	clz	r0, r0
   1abfc:	lsr	r0, r0, #5
   1ac00:	lsl	r0, r0, #20
   1ac04:	ldr	r1, [r4]
   1ac08:	ldr	r2, [r4, #8]
   1ac0c:	add	r1, r1, r2, lsl #3
   1ac10:	ldr	r2, [r1, #4]
   1ac14:	bic	r2, r2, #1048576	; 0x100000
   1ac18:	orr	r0, r2, r0
   1ac1c:	str	r0, [r1, #4]
   1ac20:	ldr	r0, [r4, #8]
   1ac24:	ldr	r1, [r4, #12]
   1ac28:	mvn	r2, #0
   1ac2c:	str	r2, [r1, r0, lsl #2]
   1ac30:	ldr	r0, [r4, #8]
   1ac34:	ldr	r1, [r4, #20]
   1ac38:	add	r0, r0, r0, lsl #1
   1ac3c:	mov	r2, #0
   1ac40:	str	r2, [r1, r0, lsl #2]!
   1ac44:	str	r2, [r1, #4]
   1ac48:	str	r2, [r1, #8]
   1ac4c:	ldr	r0, [r4, #8]
   1ac50:	ldr	r1, [r4, #24]
   1ac54:	add	r0, r0, r0, lsl #1
   1ac58:	str	r2, [r1, r0, lsl #2]!
   1ac5c:	str	r2, [r1, #4]
   1ac60:	str	r2, [r1, #8]
   1ac64:	ldr	r6, [r4, #8]
   1ac68:	add	r0, r6, #1
   1ac6c:	str	r0, [r4, #8]
   1ac70:	mov	r0, r6
   1ac74:	sub	sp, fp, #28
   1ac78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac7c:	lsl	r1, r7, #1
   1ac80:	mvn	r6, #0
   1ac84:	movw	r0, #21845	; 0x5555
   1ac88:	movt	r0, #5461	; 0x1555
   1ac8c:	cmp	r1, r0
   1ac90:	bhi	1ac70 <__assert_fail@plt+0x9758>
   1ac94:	str	r1, [sp, #8]
   1ac98:	ldr	r0, [r4]
   1ac9c:	lsl	r1, r7, #4
   1aca0:	bl	22698 <__assert_fail@plt+0x11180>
   1aca4:	cmp	r0, #0
   1aca8:	beq	1ac70 <__assert_fail@plt+0x9758>
   1acac:	str	r0, [r4]
   1acb0:	ldr	r0, [r4, #12]
   1acb4:	lsl	r8, r7, #3
   1acb8:	mov	r1, r8
   1acbc:	bl	22698 <__assert_fail@plt+0x11180>
   1acc0:	str	r0, [sp, #4]
   1acc4:	ldr	r0, [r4, #16]
   1acc8:	mov	r1, r8
   1accc:	bl	22698 <__assert_fail@plt+0x11180>
   1acd0:	mov	r2, r0
   1acd4:	ldr	r0, [r4, #20]
   1acd8:	add	r1, r7, r7, lsl #1
   1acdc:	mov	r7, r2
   1ace0:	lsl	r8, r1, #3
   1ace4:	mov	r1, r8
   1ace8:	bl	22698 <__assert_fail@plt+0x11180>
   1acec:	mov	sl, r0
   1acf0:	ldr	r0, [r4, #24]
   1acf4:	mov	r1, r8
   1acf8:	bl	22698 <__assert_fail@plt+0x11180>
   1acfc:	mov	r8, r0
   1ad00:	ldr	r0, [sp, #4]
   1ad04:	cmp	r0, #0
   1ad08:	beq	1ad18 <__assert_fail@plt+0x9800>
   1ad0c:	cmp	r7, #0
   1ad10:	cmpne	sl, #0
   1ad14:	bne	1ad38 <__assert_fail@plt+0x9820>
   1ad18:	bl	22b58 <__assert_fail@plt+0x11640>
   1ad1c:	mov	r0, r7
   1ad20:	bl	22b58 <__assert_fail@plt+0x11640>
   1ad24:	mov	r0, sl
   1ad28:	bl	22b58 <__assert_fail@plt+0x11640>
   1ad2c:	mov	r0, r8
   1ad30:	bl	22b58 <__assert_fail@plt+0x11640>
   1ad34:	b	1ac70 <__assert_fail@plt+0x9758>
   1ad38:	cmp	r8, #0
   1ad3c:	beq	1ad18 <__assert_fail@plt+0x9800>
   1ad40:	add	r1, r4, #12
   1ad44:	stm	r1, {r0, r7, sl}
   1ad48:	str	r8, [r4, #24]
   1ad4c:	ldr	r0, [sp, #8]
   1ad50:	str	r0, [r4, #4]
   1ad54:	b	1abb0 <__assert_fail@plt+0x9698>
   1ad58:	push	{r4, r5, r6, sl, fp, lr}
   1ad5c:	add	fp, sp, #16
   1ad60:	mov	r5, r2
   1ad64:	mov	r4, r1
   1ad68:	mov	r6, r0
   1ad6c:	mov	r0, #2
   1ad70:	str	r0, [r6]
   1ad74:	mov	r0, #8
   1ad78:	bl	22668 <__assert_fail@plt+0x11150>
   1ad7c:	str	r0, [r6, #8]
   1ad80:	cmp	r0, #0
   1ad84:	beq	1adcc <__assert_fail@plt+0x98b4>
   1ad88:	cmp	r4, r5
   1ad8c:	bne	1ada8 <__assert_fail@plt+0x9890>
   1ad90:	mov	r0, #1
   1ad94:	str	r0, [r6, #4]
   1ad98:	ldr	r0, [r6, #8]
   1ad9c:	str	r4, [r0]
   1ada0:	mov	r0, #0
   1ada4:	pop	{r4, r5, r6, sl, fp, pc}
   1ada8:	mov	r0, #2
   1adac:	str	r0, [r6, #4]
   1adb0:	ldr	r0, [r6, #8]
   1adb4:	cmp	r4, r5
   1adb8:	stmlt	r0, {r4, r5}
   1adbc:	strge	r5, [r0]
   1adc0:	strge	r4, [r0, #4]
   1adc4:	mov	r0, #0
   1adc8:	pop	{r4, r5, r6, sl, fp, pc}
   1adcc:	mov	r0, #12
   1add0:	pop	{r4, r5, r6, sl, fp, pc}
   1add4:	push	{r4, r5, fp, lr}
   1add8:	add	fp, sp, #8
   1addc:	mov	r5, r1
   1ade0:	mov	r4, r0
   1ade4:	mov	r0, #1
   1ade8:	str	r0, [r4]
   1adec:	str	r0, [r4, #4]
   1adf0:	mov	r0, #4
   1adf4:	bl	22668 <__assert_fail@plt+0x11150>
   1adf8:	str	r0, [r4, #8]
   1adfc:	cmp	r0, #0
   1ae00:	strne	r5, [r0]
   1ae04:	movne	r0, #0
   1ae08:	popne	{r4, r5, fp, pc}
   1ae0c:	mov	r0, #0
   1ae10:	str	r0, [r4]
   1ae14:	str	r0, [r4, #4]
   1ae18:	mov	r0, #12
   1ae1c:	pop	{r4, r5, fp, pc}
   1ae20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae24:	add	fp, sp, #28
   1ae28:	sub	sp, sp, #44	; 0x2c
   1ae2c:	mov	r8, r3
   1ae30:	mov	r6, r2
   1ae34:	mov	r5, r1
   1ae38:	mov	r7, r0
   1ae3c:	ldr	r0, [r1, #20]
   1ae40:	add	r4, r2, r2, lsl #1
   1ae44:	add	r0, r0, r4, lsl #2
   1ae48:	ldr	r0, [r0, #4]
   1ae4c:	add	r1, r0, #1
   1ae50:	add	r0, sp, #32
   1ae54:	bl	1b034 <__assert_fail@plt+0x9b1c>
   1ae58:	cmp	r0, #0
   1ae5c:	bne	1b02c <__assert_fail@plt+0x9b14>
   1ae60:	ldr	r0, [sp, #36]	; 0x24
   1ae64:	ldr	r1, [sp, #40]	; 0x28
   1ae68:	add	r2, r0, #1
   1ae6c:	str	r2, [sp, #36]	; 0x24
   1ae70:	str	r6, [r1, r0, lsl #2]
   1ae74:	ldr	r0, [r5, #24]
   1ae78:	add	r0, r0, r4, lsl #2
   1ae7c:	mvn	r1, #0
   1ae80:	str	r1, [r0, #4]
   1ae84:	ldr	r1, [r5]
   1ae88:	add	r0, r1, r6, lsl #3
   1ae8c:	ldr	r0, [r0, #4]
   1ae90:	ubfx	r0, r0, #8, #10
   1ae94:	cmp	r0, #0
   1ae98:	beq	1aee8 <__assert_fail@plt+0x99d0>
   1ae9c:	ldr	r2, [r5, #20]
   1aea0:	add	r2, r2, r4, lsl #2
   1aea4:	ldr	r3, [r2, #4]
   1aea8:	cmp	r3, #0
   1aeac:	beq	1aee8 <__assert_fail@plt+0x99d0>
   1aeb0:	ldr	r2, [r2, #8]
   1aeb4:	ldr	r2, [r2]
   1aeb8:	add	r1, r1, r2, lsl #3
   1aebc:	ldrb	r1, [r1, #6]
   1aec0:	tst	r1, #4
   1aec4:	bne	1aee8 <__assert_fail@plt+0x99d0>
   1aec8:	str	r0, [sp]
   1aecc:	mov	r0, r5
   1aed0:	mov	r1, r6
   1aed4:	mov	r2, r6
   1aed8:	mov	r3, r6
   1aedc:	bl	1b064 <__assert_fail@plt+0x9b4c>
   1aee0:	cmp	r0, #0
   1aee4:	bne	1b02c <__assert_fail@plt+0x9b14>
   1aee8:	ldr	r0, [r5]
   1aeec:	add	r0, r0, r6, lsl #3
   1aef0:	ldrb	r0, [r0, #4]
   1aef4:	tst	r0, #8
   1aef8:	beq	1b000 <__assert_fail@plt+0x9ae8>
   1aefc:	ldr	r0, [r5, #20]
   1af00:	add	r1, r0, r4, lsl #2
   1af04:	ldr	r1, [r1, #4]
   1af08:	cmp	r1, #1
   1af0c:	blt	1b000 <__assert_fail@plt+0x9ae8>
   1af10:	str	r8, [sp, #8]
   1af14:	str	r7, [sp, #12]
   1af18:	mov	r8, #0
   1af1c:	add	r7, sp, #16
   1af20:	add	sl, sp, #32
   1af24:	mov	r6, #0
   1af28:	b	1af48 <__assert_fail@plt+0x9a30>
   1af2c:	mov	r8, #1
   1af30:	ldr	r0, [r5, #20]
   1af34:	add	r1, r0, r4, lsl #2
   1af38:	ldr	r1, [r1, #4]
   1af3c:	add	r6, r6, #1
   1af40:	cmp	r6, r1
   1af44:	bge	1afd4 <__assert_fail@plt+0x9abc>
   1af48:	add	r0, r0, r4, lsl #2
   1af4c:	ldr	r0, [r0, #8]
   1af50:	ldr	r2, [r0, r6, lsl #2]
   1af54:	add	r9, r2, r2, lsl #1
   1af58:	ldr	r0, [r5, #24]
   1af5c:	add	r0, r0, r9, lsl #2
   1af60:	ldr	r1, [r0, #4]
   1af64:	cmn	r1, #1
   1af68:	beq	1af2c <__assert_fail@plt+0x9a14>
   1af6c:	cmp	r1, #0
   1af70:	bne	1af90 <__assert_fail@plt+0x9a78>
   1af74:	mov	r0, r7
   1af78:	mov	r1, r5
   1af7c:	mov	r3, #0
   1af80:	bl	1ae20 <__assert_fail@plt+0x9908>
   1af84:	cmp	r0, #0
   1af88:	beq	1afa0 <__assert_fail@plt+0x9a88>
   1af8c:	b	1b02c <__assert_fail@plt+0x9b14>
   1af90:	vldr	d16, [r0]
   1af94:	ldr	r0, [r0, #8]
   1af98:	str	r0, [sp, #24]
   1af9c:	vstr	d16, [sp, #16]
   1afa0:	mov	r0, sl
   1afa4:	mov	r1, r7
   1afa8:	bl	1b2c0 <__assert_fail@plt+0x9da8>
   1afac:	cmp	r0, #0
   1afb0:	bne	1b02c <__assert_fail@plt+0x9b14>
   1afb4:	ldr	r0, [r5, #24]
   1afb8:	add	r0, r0, r9, lsl #2
   1afbc:	ldr	r0, [r0, #4]
   1afc0:	cmp	r0, #0
   1afc4:	bne	1af30 <__assert_fail@plt+0x9a18>
   1afc8:	ldr	r0, [sp, #24]
   1afcc:	bl	22b58 <__assert_fail@plt+0x11640>
   1afd0:	b	1af2c <__assert_fail@plt+0x9a14>
   1afd4:	tst	r8, #1
   1afd8:	ldr	r7, [sp, #12]
   1afdc:	ldr	r0, [sp, #8]
   1afe0:	beq	1b000 <__assert_fail@plt+0x9ae8>
   1afe4:	cmp	r0, #0
   1afe8:	bne	1b000 <__assert_fail@plt+0x9ae8>
   1afec:	ldr	r0, [r5, #24]
   1aff0:	add	r0, r0, r4, lsl #2
   1aff4:	mov	r1, #0
   1aff8:	str	r1, [r0, #4]
   1affc:	b	1b018 <__assert_fail@plt+0x9b00>
   1b000:	ldr	r0, [r5, #24]
   1b004:	vldr	d16, [sp, #32]
   1b008:	add	r0, r0, r4, lsl #2
   1b00c:	ldr	r1, [sp, #40]	; 0x28
   1b010:	str	r1, [r0, #8]
   1b014:	vstr	d16, [r0]
   1b018:	ldr	r0, [sp, #40]	; 0x28
   1b01c:	vldr	d16, [sp, #32]
   1b020:	str	r0, [r7, #8]
   1b024:	vstr	d16, [r7]
   1b028:	mov	r0, #0
   1b02c:	sub	sp, fp, #28
   1b030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b034:	push	{r4, r5, fp, lr}
   1b038:	add	fp, sp, #8
   1b03c:	mov	r5, r0
   1b040:	mov	r4, #0
   1b044:	stm	r0, {r1, r4}
   1b048:	lsl	r0, r1, #2
   1b04c:	bl	22668 <__assert_fail@plt+0x11150>
   1b050:	str	r0, [r5, #8]
   1b054:	cmp	r0, #0
   1b058:	moveq	r4, #12
   1b05c:	mov	r0, r4
   1b060:	pop	{r4, r5, fp, pc}
   1b064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b068:	add	fp, sp, #28
   1b06c:	sub	sp, sp, #20
   1b070:	str	r3, [sp, #8]
   1b074:	mov	r8, r2
   1b078:	mov	r9, r1
   1b07c:	mov	r5, r0
   1b080:	ldr	r0, [fp, #8]
   1b084:	str	r0, [sp, #16]
   1b088:	ldr	r0, [r5]
   1b08c:	add	r0, r0, r9, lsl #3
   1b090:	ldrb	r1, [r0, #4]!
   1b094:	cmp	r1, #4
   1b098:	bne	1b108 <__assert_fail@plt+0x9bf0>
   1b09c:	ldr	r0, [r5, #12]
   1b0a0:	ldr	r1, [r5, #20]
   1b0a4:	ldr	r6, [r0, r9, lsl #2]
   1b0a8:	add	r4, r8, r8, lsl #1
   1b0ac:	add	r0, r1, r4, lsl #2
   1b0b0:	mov	r1, #0
   1b0b4:	str	r1, [r0, #4]
   1b0b8:	mov	r0, r5
   1b0bc:	mov	r1, r6
   1b0c0:	ldr	r2, [sp, #16]
   1b0c4:	bl	1b450 <__assert_fail@plt+0x9f38>
   1b0c8:	mov	sl, #12
   1b0cc:	cmn	r0, #1
   1b0d0:	beq	1b284 <__assert_fail@plt+0x9d6c>
   1b0d4:	mov	r7, r0
   1b0d8:	ldr	r0, [r5, #12]
   1b0dc:	ldr	r1, [r0, r9, lsl #2]
   1b0e0:	str	r1, [r0, r8, lsl #2]
   1b0e4:	ldr	r0, [r5, #20]
   1b0e8:	add	r0, r0, r4, lsl #2
   1b0ec:	mov	r1, r7
   1b0f0:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1b0f4:	cmp	r0, #0
   1b0f8:	mov	r9, r6
   1b0fc:	mov	r8, r7
   1b100:	bne	1b088 <__assert_fail@plt+0x9b70>
   1b104:	b	1b284 <__assert_fail@plt+0x9d6c>
   1b108:	ldr	r1, [r5, #20]
   1b10c:	add	r6, r9, r9, lsl #1
   1b110:	add	r3, r1, r6, lsl #2
   1b114:	ldr	r2, [r3, #4]
   1b118:	cmp	r2, #0
   1b11c:	beq	1b268 <__assert_fail@plt+0x9d50>
   1b120:	ldr	r3, [r3, #8]
   1b124:	ldr	sl, [r3]
   1b128:	add	r7, r8, r8, lsl #1
   1b12c:	add	r4, r1, r7, lsl #2
   1b130:	mov	r1, #0
   1b134:	str	r1, [r4, #4]
   1b138:	cmp	r2, #1
   1b13c:	beq	1b230 <__assert_fail@plt+0x9d18>
   1b140:	str	r6, [sp, #12]
   1b144:	mov	r0, r5
   1b148:	mov	r1, sl
   1b14c:	ldr	r6, [sp, #16]
   1b150:	mov	r2, r6
   1b154:	bl	1b5e0 <__assert_fail@plt+0xa0c8>
   1b158:	cmn	r0, #1
   1b15c:	beq	1b178 <__assert_fail@plt+0x9c60>
   1b160:	mov	r1, r0
   1b164:	mov	r0, r4
   1b168:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1b16c:	cmp	r0, #0
   1b170:	bne	1b1e0 <__assert_fail@plt+0x9cc8>
   1b174:	b	1b2b8 <__assert_fail@plt+0x9da0>
   1b178:	mov	r9, sl
   1b17c:	mov	r8, r7
   1b180:	mov	r0, r5
   1b184:	mov	r1, sl
   1b188:	mov	r2, r6
   1b18c:	bl	1b450 <__assert_fail@plt+0x9f38>
   1b190:	mov	sl, #12
   1b194:	cmn	r0, #1
   1b198:	beq	1b284 <__assert_fail@plt+0x9d6c>
   1b19c:	mov	r7, r0
   1b1a0:	ldr	r0, [r5, #20]
   1b1a4:	add	r0, r0, r8, lsl #2
   1b1a8:	mov	r1, r7
   1b1ac:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1b1b0:	cmp	r0, #0
   1b1b4:	beq	1b284 <__assert_fail@plt+0x9d6c>
   1b1b8:	ldr	r6, [sp, #16]
   1b1bc:	str	r6, [sp]
   1b1c0:	mov	r0, r5
   1b1c4:	mov	r1, r9
   1b1c8:	mov	r2, r7
   1b1cc:	ldr	r3, [sp, #8]
   1b1d0:	bl	1b064 <__assert_fail@plt+0x9b4c>
   1b1d4:	cmp	r0, #0
   1b1d8:	mov	r7, r8
   1b1dc:	bne	1b280 <__assert_fail@plt+0x9d68>
   1b1e0:	ldr	r0, [r5, #20]
   1b1e4:	ldr	r1, [sp, #12]
   1b1e8:	add	r0, r0, r1, lsl #2
   1b1ec:	ldr	r0, [r0, #8]
   1b1f0:	ldr	r9, [r0, #4]
   1b1f4:	mov	r0, r5
   1b1f8:	mov	r1, r9
   1b1fc:	mov	r2, r6
   1b200:	bl	1b450 <__assert_fail@plt+0x9f38>
   1b204:	mov	sl, #12
   1b208:	cmn	r0, #1
   1b20c:	beq	1b284 <__assert_fail@plt+0x9d6c>
   1b210:	mov	r8, r0
   1b214:	ldr	r0, [r5, #20]
   1b218:	add	r0, r0, r7, lsl #2
   1b21c:	mov	r1, r8
   1b220:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1b224:	cmp	r0, #0
   1b228:	bne	1b088 <__assert_fail@plt+0x9b70>
   1b22c:	b	1b284 <__assert_fail@plt+0x9d6c>
   1b230:	ldr	r1, [sp, #8]
   1b234:	cmp	r9, r1
   1b238:	bne	1b244 <__assert_fail@plt+0x9d2c>
   1b23c:	cmp	r8, r9
   1b240:	bne	1b290 <__assert_fail@plt+0x9d78>
   1b244:	ldr	r0, [r0]
   1b248:	ubfx	r0, r0, #8, #10
   1b24c:	ldr	r2, [sp, #16]
   1b250:	orr	r2, r0, r2
   1b254:	mov	r0, r5
   1b258:	mov	r9, sl
   1b25c:	mov	r1, sl
   1b260:	str	r2, [sp, #16]
   1b264:	b	1b200 <__assert_fail@plt+0x9ce8>
   1b268:	ldr	r0, [r5, #12]
   1b26c:	ldr	r1, [r0, r9, lsl #2]
   1b270:	str	r1, [r0, r8, lsl #2]
   1b274:	mov	r0, #0
   1b278:	sub	sp, fp, #28
   1b27c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b280:	mov	sl, r0
   1b284:	mov	r0, sl
   1b288:	sub	sp, fp, #28
   1b28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b290:	mov	r0, r4
   1b294:	mov	r1, sl
   1b298:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1b29c:	mov	r1, r0
   1b2a0:	mov	sl, #12
   1b2a4:	mov	r0, #0
   1b2a8:	cmp	r1, #0
   1b2ac:	moveq	r0, sl
   1b2b0:	sub	sp, fp, #28
   1b2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2b8:	mov	sl, #12
   1b2bc:	b	1b284 <__assert_fail@plt+0x9d6c>
   1b2c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b2c4:	add	fp, sp, #24
   1b2c8:	mov	r8, #0
   1b2cc:	cmp	r1, #0
   1b2d0:	beq	1b424 <__assert_fail@plt+0x9f0c>
   1b2d4:	mov	r6, r1
   1b2d8:	ldr	r1, [r1, #4]
   1b2dc:	cmp	r1, #0
   1b2e0:	beq	1b424 <__assert_fail@plt+0x9f0c>
   1b2e4:	mov	r9, r0
   1b2e8:	ldr	r2, [r0]
   1b2ec:	ldr	r0, [r0, #4]
   1b2f0:	add	r3, r0, r1, lsl #1
   1b2f4:	cmp	r2, r3
   1b2f8:	bge	1b324 <__assert_fail@plt+0x9e0c>
   1b2fc:	add	r7, r2, r1
   1b300:	lsl	r1, r7, #3
   1b304:	ldr	r0, [r9, #8]
   1b308:	bl	22698 <__assert_fail@plt+0x11180>
   1b30c:	cmp	r0, #0
   1b310:	beq	1b444 <__assert_fail@plt+0x9f2c>
   1b314:	str	r0, [r9, #8]
   1b318:	lsl	r0, r7, #1
   1b31c:	str	r0, [r9]
   1b320:	ldr	r0, [r9, #4]
   1b324:	cmp	r0, #0
   1b328:	beq	1b42c <__assert_fail@plt+0x9f14>
   1b32c:	ldr	r2, [r6, #4]
   1b330:	add	r7, r0, r2, lsl #1
   1b334:	sub	r1, r0, #1
   1b338:	sub	r0, r2, #1
   1b33c:	orrs	r2, r0, r1
   1b340:	bmi	1b388 <__assert_fail@plt+0x9e70>
   1b344:	ldr	r2, [r6, #8]
   1b348:	ldr	r3, [r9, #8]
   1b34c:	b	1b36c <__assert_fail@plt+0x9e54>
   1b350:	subge	r1, r1, #1
   1b354:	sublt	r7, r7, #1
   1b358:	strlt	r4, [r3, r7, lsl #2]
   1b35c:	sublt	r0, r0, #1
   1b360:	orr	r5, r0, r1
   1b364:	cmn	r5, #1
   1b368:	ble	1b388 <__assert_fail@plt+0x9e70>
   1b36c:	ldr	r4, [r2, r0, lsl #2]
   1b370:	ldr	r5, [r3, r1, lsl #2]
   1b374:	cmp	r5, r4
   1b378:	bne	1b350 <__assert_fail@plt+0x9e38>
   1b37c:	sub	r1, r1, #1
   1b380:	sub	r0, r0, #1
   1b384:	b	1b360 <__assert_fail@plt+0x9e48>
   1b388:	cmp	r0, #0
   1b38c:	bmi	1b3ac <__assert_fail@plt+0x9e94>
   1b390:	add	r2, r0, #1
   1b394:	sub	r7, r7, r2
   1b398:	ldr	r0, [r9, #8]
   1b39c:	add	r0, r0, r7, lsl #2
   1b3a0:	ldr	r1, [r6, #8]
   1b3a4:	lsl	r2, r2, #2
   1b3a8:	bl	112a8 <memcpy@plt>
   1b3ac:	ldr	r1, [r6, #4]
   1b3b0:	ldr	r0, [r9, #4]
   1b3b4:	add	r1, r0, r1, lsl #1
   1b3b8:	sub	r1, r1, #1
   1b3bc:	sub	r2, r1, r7
   1b3c0:	adds	r2, r2, #1
   1b3c4:	bcs	1b424 <__assert_fail@plt+0x9f0c>
   1b3c8:	add	r3, r2, r0
   1b3cc:	str	r3, [r9, #4]
   1b3d0:	sub	r3, r0, #1
   1b3d4:	ldr	r0, [r9, #8]
   1b3d8:	ldr	r6, [r0, r3, lsl #2]
   1b3dc:	ldr	r5, [r0, r1, lsl #2]
   1b3e0:	cmp	r5, r6
   1b3e4:	ble	1b400 <__assert_fail@plt+0x9ee8>
   1b3e8:	add	r6, r2, r3
   1b3ec:	str	r5, [r0, r6, lsl #2]
   1b3f0:	subs	r2, r2, #1
   1b3f4:	sub	r1, r1, #1
   1b3f8:	bne	1b3d8 <__assert_fail@plt+0x9ec0>
   1b3fc:	b	1b424 <__assert_fail@plt+0x9f0c>
   1b400:	add	r5, r2, r3
   1b404:	str	r6, [r0, r5, lsl #2]
   1b408:	sub	r6, r3, #1
   1b40c:	cmp	r3, #0
   1b410:	mov	r3, r6
   1b414:	bgt	1b3d8 <__assert_fail@plt+0x9ec0>
   1b418:	add	r1, r0, r7, lsl #2
   1b41c:	lsl	r2, r2, #2
   1b420:	bl	112a8 <memcpy@plt>
   1b424:	mov	r0, r8
   1b428:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b42c:	ldr	r0, [r6, #4]
   1b430:	str	r0, [r9, #4]
   1b434:	ldr	r0, [r9, #8]
   1b438:	ldr	r2, [r6, #4]
   1b43c:	ldr	r1, [r6, #8]
   1b440:	b	1b41c <__assert_fail@plt+0x9f04>
   1b444:	mov	r8, #12
   1b448:	mov	r0, r8
   1b44c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b450:	push	{r4, r5, r6, sl, fp, lr}
   1b454:	add	fp, sp, #16
   1b458:	mov	r6, r2
   1b45c:	mov	r4, r1
   1b460:	mov	r5, r0
   1b464:	ldr	r0, [r0]
   1b468:	ldr	r1, [r0, r1, lsl #3]!
   1b46c:	ldr	r2, [r0, #4]
   1b470:	mov	r0, r5
   1b474:	bl	1ab88 <__assert_fail@plt+0x9670>
   1b478:	cmn	r0, #1
   1b47c:	ldrne	r1, [r5]
   1b480:	addne	r1, r1, r0, lsl #3
   1b484:	ldrne	r2, [r1, #4]
   1b488:	bfine	r2, r6, #8, #10
   1b48c:	strne	r2, [r1, #4]
   1b490:	ldrne	r1, [r5]
   1b494:	addne	r2, r1, r4, lsl #3
   1b498:	ldrne	r2, [r2, #4]
   1b49c:	movwne	r3, #65280	; 0xff00
   1b4a0:	movtne	r3, #3
   1b4a4:	andne	r2, r2, r3
   1b4a8:	addne	r1, r1, r0, lsl #3
   1b4ac:	ldrne	r3, [r1, #4]
   1b4b0:	orrne	r2, r2, r3
   1b4b4:	strne	r2, [r1, #4]
   1b4b8:	ldrne	r1, [r5]
   1b4bc:	addne	r1, r1, r0, lsl #3
   1b4c0:	ldrne	r2, [r1, #4]
   1b4c4:	orrne	r2, r2, #262144	; 0x40000
   1b4c8:	strne	r2, [r1, #4]
   1b4cc:	ldrne	r1, [r5, #16]
   1b4d0:	strne	r4, [r1, r0, lsl #2]
   1b4d4:	pop	{r4, r5, r6, sl, fp, pc}
   1b4d8:	push	{r4, r5, fp, lr}
   1b4dc:	add	fp, sp, #8
   1b4e0:	mov	r5, r1
   1b4e4:	mov	r4, r0
   1b4e8:	ldr	r2, [r0]
   1b4ec:	cmp	r2, #0
   1b4f0:	beq	1b51c <__assert_fail@plt+0xa004>
   1b4f4:	ldr	r1, [r4, #4]
   1b4f8:	cmp	r1, #0
   1b4fc:	bne	1b534 <__assert_fail@plt+0xa01c>
   1b500:	ldr	r0, [r4, #8]
   1b504:	str	r5, [r0]
   1b508:	ldr	r0, [r4, #4]
   1b50c:	add	r0, r0, #1
   1b510:	str	r0, [r4, #4]
   1b514:	mov	r0, #1
   1b518:	pop	{r4, r5, fp, pc}
   1b51c:	mov	r0, r4
   1b520:	mov	r1, r5
   1b524:	bl	1add4 <__assert_fail@plt+0x98bc>
   1b528:	clz	r0, r0
   1b52c:	lsr	r0, r0, #5
   1b530:	pop	{r4, r5, fp, pc}
   1b534:	cmp	r2, r1
   1b538:	bne	1b560 <__assert_fail@plt+0xa048>
   1b53c:	lsl	r0, r2, #1
   1b540:	str	r0, [r4]
   1b544:	ldr	r0, [r4, #8]
   1b548:	lsl	r1, r2, #3
   1b54c:	bl	22698 <__assert_fail@plt+0x11180>
   1b550:	cmp	r0, #0
   1b554:	beq	1b5d8 <__assert_fail@plt+0xa0c0>
   1b558:	str	r0, [r4, #8]
   1b55c:	ldr	r1, [r4, #4]
   1b560:	ldr	ip, [r4, #8]
   1b564:	ldr	r2, [ip]
   1b568:	cmp	r2, r5
   1b56c:	ble	1b5a0 <__assert_fail@plt+0xa088>
   1b570:	cmp	r1, #1
   1b574:	blt	1b5d0 <__assert_fail@plt+0xa0b8>
   1b578:	add	r3, ip, r1, lsl #2
   1b57c:	mov	r2, r3
   1b580:	ldr	r0, [r2, #-4]!
   1b584:	str	r0, [r3]
   1b588:	sub	r1, r1, #1
   1b58c:	cmp	r1, #0
   1b590:	mov	r3, r2
   1b594:	bgt	1b580 <__assert_fail@plt+0xa068>
   1b598:	mov	r1, #0
   1b59c:	b	1b5d0 <__assert_fail@plt+0xa0b8>
   1b5a0:	add	r2, ip, r1, lsl #2
   1b5a4:	ldr	r3, [r2, #-4]
   1b5a8:	cmp	r3, r5
   1b5ac:	ble	1b5d0 <__assert_fail@plt+0xa0b8>
   1b5b0:	sub	r1, r1, #2
   1b5b4:	str	r3, [r2]
   1b5b8:	ldr	r3, [r2, #-8]
   1b5bc:	sub	r2, r2, #4
   1b5c0:	sub	r1, r1, #1
   1b5c4:	cmp	r3, r5
   1b5c8:	bgt	1b5b4 <__assert_fail@plt+0xa09c>
   1b5cc:	add	r1, r1, #2
   1b5d0:	str	r5, [ip, r1, lsl #2]
   1b5d4:	b	1b508 <__assert_fail@plt+0x9ff0>
   1b5d8:	mov	r0, #0
   1b5dc:	pop	{r4, r5, fp, pc}
   1b5e0:	push	{r4, r5, fp, lr}
   1b5e4:	add	fp, sp, #8
   1b5e8:	mov	ip, r0
   1b5ec:	ldr	r3, [r0, #8]
   1b5f0:	sub	lr, r3, #1
   1b5f4:	mvn	r0, #0
   1b5f8:	cmp	lr, #1
   1b5fc:	blt	1b654 <__assert_fail@plt+0xa13c>
   1b600:	ldr	r4, [ip]
   1b604:	add	r4, r4, lr, lsl #3
   1b608:	ldr	r5, [r4, #4]
   1b60c:	ands	r4, r5, #262144	; 0x40000
   1b610:	beq	1b654 <__assert_fail@plt+0xa13c>
   1b614:	ldr	r4, [ip, #16]
   1b618:	sub	lr, r4, #4
   1b61c:	ldr	r4, [lr, r3, lsl #2]
   1b620:	cmp	r4, r1
   1b624:	ubfxeq	r4, r5, #8, #10
   1b628:	cmpeq	r4, r2
   1b62c:	beq	1b658 <__assert_fail@plt+0xa140>
   1b630:	sub	r4, r3, #2
   1b634:	cmp	r4, #1
   1b638:	blt	1b654 <__assert_fail@plt+0xa13c>
   1b63c:	ldr	r4, [ip]
   1b640:	add	r4, r4, r3, lsl #3
   1b644:	ldr	r5, [r4, #-12]
   1b648:	ands	r4, r5, #262144	; 0x40000
   1b64c:	sub	r3, r3, #1
   1b650:	bne	1b61c <__assert_fail@plt+0xa104>
   1b654:	pop	{r4, r5, fp, pc}
   1b658:	sub	r0, r3, #1
   1b65c:	pop	{r4, r5, fp, pc}
   1b660:	push	{r4, r5, fp, lr}
   1b664:	add	fp, sp, #8
   1b668:	mov	r4, r1
   1b66c:	mov	r5, r0
   1b670:	ldr	r0, [r0]
   1b674:	ldr	r1, [r5, #4]
   1b678:	cmp	r0, r1
   1b67c:	bne	1b6a4 <__assert_fail@plt+0xa18c>
   1b680:	mov	r1, #2
   1b684:	add	r0, r1, r0, lsl #1
   1b688:	str	r0, [r5]
   1b68c:	lsl	r1, r0, #2
   1b690:	ldr	r0, [r5, #8]
   1b694:	bl	22698 <__assert_fail@plt+0x11180>
   1b698:	cmp	r0, #0
   1b69c:	beq	1b6bc <__assert_fail@plt+0xa1a4>
   1b6a0:	str	r0, [r5, #8]
   1b6a4:	ldmib	r5, {r0, r1}
   1b6a8:	add	r2, r0, #1
   1b6ac:	str	r2, [r5, #4]
   1b6b0:	str	r4, [r1, r0, lsl #2]
   1b6b4:	mov	r0, #1
   1b6b8:	pop	{r4, r5, fp, pc}
   1b6bc:	mov	r0, #0
   1b6c0:	pop	{r4, r5, fp, pc}
   1b6c4:	push	{r4, r5, fp, lr}
   1b6c8:	add	fp, sp, #8
   1b6cc:	mov	r5, r1
   1b6d0:	mov	r4, r0
   1b6d4:	ldr	r0, [r1, #4]
   1b6d8:	str	r0, [r4, #4]
   1b6dc:	ldr	r1, [r1, #4]
   1b6e0:	cmp	r1, #1
   1b6e4:	blt	1b718 <__assert_fail@plt+0xa200>
   1b6e8:	str	r0, [r4]
   1b6ec:	lsl	r0, r0, #2
   1b6f0:	bl	22668 <__assert_fail@plt+0x11150>
   1b6f4:	str	r0, [r4, #8]
   1b6f8:	cmp	r0, #0
   1b6fc:	beq	1b72c <__assert_fail@plt+0xa214>
   1b700:	ldr	r2, [r5, #4]
   1b704:	ldr	r1, [r5, #8]
   1b708:	lsl	r2, r2, #2
   1b70c:	bl	112a8 <memcpy@plt>
   1b710:	mov	r0, #0
   1b714:	pop	{r4, r5, fp, pc}
   1b718:	mov	r0, #0
   1b71c:	str	r0, [r4]
   1b720:	str	r0, [r4, #4]
   1b724:	str	r0, [r4, #8]
   1b728:	pop	{r4, r5, fp, pc}
   1b72c:	mov	r0, #0
   1b730:	str	r0, [r4]
   1b734:	str	r0, [r4, #4]
   1b738:	mov	r0, #12
   1b73c:	pop	{r4, r5, fp, pc}
   1b740:	push	{r4, r5, r6, r7, fp, lr}
   1b744:	add	fp, sp, #16
   1b748:	mov	ip, r0
   1b74c:	ldr	r0, [r0, #4]
   1b750:	cmp	r0, #1
   1b754:	blt	1b7a8 <__assert_fail@plt+0xa290>
   1b758:	subs	r2, r0, #1
   1b75c:	mov	r0, #0
   1b760:	mov	r3, #0
   1b764:	beq	1b794 <__assert_fail@plt+0xa27c>
   1b768:	ldr	lr, [ip, #8]
   1b76c:	mov	r3, #0
   1b770:	mov	r4, #1
   1b774:	add	r5, r2, r3
   1b778:	lsr	r6, r5, #1
   1b77c:	ldr	r7, [lr, r6, lsl #2]
   1b780:	cmp	r7, r1
   1b784:	movge	r2, r6
   1b788:	addlt	r3, r4, r5, lsr #1
   1b78c:	cmp	r3, r2
   1b790:	bcc	1b774 <__assert_fail@plt+0xa25c>
   1b794:	ldr	r2, [ip, #8]
   1b798:	ldr	r2, [r2, r3, lsl #2]
   1b79c:	cmp	r2, r1
   1b7a0:	addeq	r0, r3, #1
   1b7a4:	pop	{r4, r5, r6, r7, fp, pc}
   1b7a8:	mov	r0, #0
   1b7ac:	pop	{r4, r5, r6, r7, fp, pc}
   1b7b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7b4:	add	fp, sp, #28
   1b7b8:	sub	sp, sp, #12
   1b7bc:	mov	r6, r1
   1b7c0:	ldr	r1, [r2, #4]
   1b7c4:	cmp	r1, #0
   1b7c8:	beq	1b898 <__assert_fail@plt+0xa380>
   1b7cc:	mov	r5, r3
   1b7d0:	mov	sl, r2
   1b7d4:	str	r0, [sp, #4]
   1b7d8:	mov	r0, r2
   1b7dc:	mov	r1, r3
   1b7e0:	bl	1b8ac <__assert_fail@plt+0xa394>
   1b7e4:	mov	r4, r0
   1b7e8:	ldr	r0, [r6, #32]
   1b7ec:	str	r6, [sp, #8]
   1b7f0:	ldr	r1, [r6, #68]	; 0x44
   1b7f4:	and	r1, r1, r4
   1b7f8:	add	r1, r1, r1, lsl #1
   1b7fc:	mov	r6, r0
   1b800:	ldr	r2, [r6, r1, lsl #2]!
   1b804:	cmp	r2, #1
   1b808:	blt	1b864 <__assert_fail@plt+0xa34c>
   1b80c:	add	r0, r0, r1, lsl #2
   1b810:	ldr	r8, [r0, #8]
   1b814:	mov	r9, #0
   1b818:	b	1b82c <__assert_fail@plt+0xa314>
   1b81c:	ldr	r0, [r6]
   1b820:	add	r9, r9, #1
   1b824:	cmp	r9, r0
   1b828:	bge	1b864 <__assert_fail@plt+0xa34c>
   1b82c:	ldr	r7, [r8, r9, lsl #2]
   1b830:	ldr	r0, [r7]
   1b834:	cmp	r0, r4
   1b838:	bne	1b81c <__assert_fail@plt+0xa304>
   1b83c:	ldrb	r0, [r7, #52]	; 0x34
   1b840:	and	r0, r0, #15
   1b844:	cmp	r0, r5
   1b848:	bne	1b81c <__assert_fail@plt+0xa304>
   1b84c:	ldr	r0, [r7, #40]	; 0x28
   1b850:	mov	r1, sl
   1b854:	bl	1b8d8 <__assert_fail@plt+0xa3c0>
   1b858:	cmp	r0, #0
   1b85c:	beq	1b81c <__assert_fail@plt+0xa304>
   1b860:	b	1b8a0 <__assert_fail@plt+0xa388>
   1b864:	ldr	r0, [sp, #8]
   1b868:	mov	r1, sl
   1b86c:	mov	r2, r5
   1b870:	mov	r3, r4
   1b874:	bl	1b940 <__assert_fail@plt+0xa428>
   1b878:	mov	r7, r0
   1b87c:	cmp	r0, #0
   1b880:	bne	1b8a0 <__assert_fail@plt+0xa388>
   1b884:	mov	r0, #12
   1b888:	ldr	r1, [sp, #4]
   1b88c:	str	r0, [r1]
   1b890:	mov	r7, #0
   1b894:	b	1b8a0 <__assert_fail@plt+0xa388>
   1b898:	mov	r7, #0
   1b89c:	str	r7, [r0]
   1b8a0:	mov	r0, r7
   1b8a4:	sub	sp, fp, #28
   1b8a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8ac:	mov	r2, r0
   1b8b0:	ldr	r3, [r0, #4]
   1b8b4:	add	r0, r3, r1
   1b8b8:	cmp	r3, #1
   1b8bc:	bxlt	lr
   1b8c0:	ldr	r1, [r2, #8]
   1b8c4:	ldr	r2, [r1], #4
   1b8c8:	add	r0, r2, r0
   1b8cc:	subs	r3, r3, #1
   1b8d0:	bne	1b8c4 <__assert_fail@plt+0xa3ac>
   1b8d4:	bx	lr
   1b8d8:	push	{fp, lr}
   1b8dc:	mov	fp, sp
   1b8e0:	mov	lr, r0
   1b8e4:	mov	r0, #0
   1b8e8:	cmp	lr, #0
   1b8ec:	cmpne	r1, #0
   1b8f0:	bne	1b8f8 <__assert_fail@plt+0xa3e0>
   1b8f4:	pop	{fp, pc}
   1b8f8:	ldr	ip, [lr, #4]
   1b8fc:	ldr	r3, [r1, #4]
   1b900:	cmp	ip, r3
   1b904:	popne	{fp, pc}
   1b908:	sub	r3, ip, #1
   1b90c:	add	r2, r3, #1
   1b910:	cmp	r2, #1
   1b914:	blt	1b938 <__assert_fail@plt+0xa420>
   1b918:	ldr	r2, [r1, #8]
   1b91c:	ldr	ip, [r2, r3, lsl #2]
   1b920:	ldr	r2, [lr, #8]
   1b924:	ldr	r2, [r2, r3, lsl #2]
   1b928:	sub	r3, r3, #1
   1b92c:	cmp	r2, ip
   1b930:	beq	1b90c <__assert_fail@plt+0xa3f4>
   1b934:	b	1b8f4 <__assert_fail@plt+0xa3dc>
   1b938:	mov	r0, #1
   1b93c:	pop	{fp, pc}
   1b940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b944:	add	fp, sp, #28
   1b948:	sub	sp, sp, #20
   1b94c:	mov	r8, r3
   1b950:	mov	r9, r2
   1b954:	mov	r7, r1
   1b958:	mov	r6, r0
   1b95c:	mov	r0, #56	; 0x38
   1b960:	mov	r1, #1
   1b964:	bl	22614 <__assert_fail@plt+0x110fc>
   1b968:	cmp	r0, #0
   1b96c:	beq	1bb40 <__assert_fail@plt+0xa628>
   1b970:	mov	r4, r0
   1b974:	add	r5, r0, #4
   1b978:	mov	r0, r5
   1b97c:	mov	r1, r7
   1b980:	bl	1b6c4 <__assert_fail@plt+0xa1ac>
   1b984:	cmp	r0, #0
   1b988:	bne	1bb48 <__assert_fail@plt+0xa630>
   1b98c:	str	r8, [sp, #4]
   1b990:	str	r5, [r4, #40]	; 0x28
   1b994:	and	r0, r9, #15
   1b998:	ldrb	r1, [r4, #52]	; 0x34
   1b99c:	and	r1, r1, #240	; 0xf0
   1b9a0:	orr	r0, r1, r0
   1b9a4:	strb	r0, [r4, #52]	; 0x34
   1b9a8:	ldr	r0, [r7, #4]
   1b9ac:	cmp	r0, #1
   1b9b0:	blt	1bb14 <__assert_fail@plt+0xa5fc>
   1b9b4:	mov	r3, r5
   1b9b8:	and	r0, r9, #4
   1b9bc:	str	r0, [sp]
   1b9c0:	and	r0, r9, #2
   1b9c4:	str	r0, [sp, #8]
   1b9c8:	and	r0, r9, #1
   1b9cc:	str	r0, [sp, #16]
   1b9d0:	mov	r8, #0
   1b9d4:	movw	r0, #65280	; 0xff00
   1b9d8:	movt	r0, #3
   1b9dc:	add	sl, r0, #255	; 0xff
   1b9e0:	mov	r9, #0
   1b9e4:	str	r5, [sp, #12]
   1b9e8:	b	1ba10 <__assert_fail@plt+0xa4f8>
   1b9ec:	sub	r1, r8, r9
   1b9f0:	mov	r0, r3
   1b9f4:	bl	1bb54 <__assert_fail@plt+0xa63c>
   1b9f8:	ldr	r3, [sp, #12]
   1b9fc:	add	r9, r9, #1
   1ba00:	ldr	r0, [r7, #4]
   1ba04:	add	r8, r8, #1
   1ba08:	cmp	r8, r0
   1ba0c:	bge	1bb14 <__assert_fail@plt+0xa5fc>
   1ba10:	ldr	r0, [r7, #8]
   1ba14:	ldr	r0, [r0, r8, lsl #2]
   1ba18:	ldr	r1, [r6]
   1ba1c:	add	r0, r1, r0, lsl #3
   1ba20:	ldr	r5, [r0, #4]
   1ba24:	and	r0, r5, sl
   1ba28:	cmp	r0, #1
   1ba2c:	beq	1ba00 <__assert_fail@plt+0xa4e8>
   1ba30:	movw	r0, #65280	; 0xff00
   1ba34:	movt	r0, #3
   1ba38:	and	r0, r5, r0
   1ba3c:	mov	r1, #32
   1ba40:	and	r1, r1, r5, lsr #15
   1ba44:	ldrb	r2, [r4, #52]	; 0x34
   1ba48:	orr	r1, r2, r1
   1ba4c:	strb	r1, [r4, #52]	; 0x34
   1ba50:	uxtb	r2, r5
   1ba54:	cmp	r2, #2
   1ba58:	beq	1ba6c <__assert_fail@plt+0xa554>
   1ba5c:	cmp	r2, #4
   1ba60:	bne	1ba78 <__assert_fail@plt+0xa560>
   1ba64:	mov	r2, #64	; 0x40
   1ba68:	b	1ba70 <__assert_fail@plt+0xa558>
   1ba6c:	mov	r2, #16
   1ba70:	orr	r1, r1, r2
   1ba74:	strb	r1, [r4, #52]	; 0x34
   1ba78:	cmp	r0, #0
   1ba7c:	beq	1ba00 <__assert_fail@plt+0xa4e8>
   1ba80:	ldr	r0, [r4, #40]	; 0x28
   1ba84:	cmp	r0, r3
   1ba88:	bne	1bac4 <__assert_fail@plt+0xa5ac>
   1ba8c:	mov	r0, #12
   1ba90:	bl	22668 <__assert_fail@plt+0x11150>
   1ba94:	cmp	r0, #0
   1ba98:	beq	1bb38 <__assert_fail@plt+0xa620>
   1ba9c:	str	r0, [r4, #40]	; 0x28
   1baa0:	mov	r1, r7
   1baa4:	bl	1b6c4 <__assert_fail@plt+0xa1ac>
   1baa8:	cmp	r0, #0
   1baac:	bne	1bb38 <__assert_fail@plt+0xa620>
   1bab0:	ldrb	r0, [r4, #52]	; 0x34
   1bab4:	orr	r0, r0, #128	; 0x80
   1bab8:	strb	r0, [r4, #52]	; 0x34
   1babc:	mov	r9, #0
   1bac0:	ldr	r3, [sp, #12]
   1bac4:	ldr	r0, [sp, #16]
   1bac8:	cmp	r0, #0
   1bacc:	bne	1bad8 <__assert_fail@plt+0xa5c0>
   1bad0:	ands	r0, r5, #256	; 0x100
   1bad4:	bne	1b9ec <__assert_fail@plt+0xa4d4>
   1bad8:	ldr	r0, [sp, #16]
   1badc:	cmp	r0, #0
   1bae0:	andsne	r0, r5, #512	; 0x200
   1bae4:	bne	1b9ec <__assert_fail@plt+0xa4d4>
   1bae8:	ldr	r0, [sp, #8]
   1baec:	cmp	r0, #0
   1baf0:	bne	1bafc <__assert_fail@plt+0xa5e4>
   1baf4:	ands	r0, r5, #4096	; 0x1000
   1baf8:	bne	1b9ec <__assert_fail@plt+0xa4d4>
   1bafc:	ldr	r0, [sp]
   1bb00:	cmp	r0, #0
   1bb04:	bne	1ba00 <__assert_fail@plt+0xa4e8>
   1bb08:	ands	r0, r5, #16384	; 0x4000
   1bb0c:	bne	1b9ec <__assert_fail@plt+0xa4d4>
   1bb10:	b	1ba00 <__assert_fail@plt+0xa4e8>
   1bb14:	mov	r0, r6
   1bb18:	mov	r1, r4
   1bb1c:	ldr	r2, [sp, #4]
   1bb20:	bl	1bb9c <__assert_fail@plt+0xa684>
   1bb24:	cmp	r0, #0
   1bb28:	bne	1bb38 <__assert_fail@plt+0xa620>
   1bb2c:	mov	r0, r4
   1bb30:	sub	sp, fp, #28
   1bb34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb38:	mov	r0, r4
   1bb3c:	bl	160c4 <__assert_fail@plt+0x4bac>
   1bb40:	mov	r4, #0
   1bb44:	b	1bb2c <__assert_fail@plt+0xa614>
   1bb48:	mov	r0, r4
   1bb4c:	bl	22b58 <__assert_fail@plt+0x11640>
   1bb50:	b	1bb40 <__assert_fail@plt+0xa628>
   1bb54:	cmp	r1, #0
   1bb58:	bxmi	lr
   1bb5c:	ldr	r2, [r0, #4]
   1bb60:	cmp	r2, r1
   1bb64:	subgt	r2, r2, #1
   1bb68:	strgt	r2, [r0, #4]
   1bb6c:	cmpgt	r2, r1
   1bb70:	bgt	1bb78 <__assert_fail@plt+0xa660>
   1bb74:	bx	lr
   1bb78:	ldr	r2, [r0, #8]
   1bb7c:	add	r3, r2, r1, lsl #2
   1bb80:	ldr	r3, [r3, #4]
   1bb84:	str	r3, [r2, r1, lsl #2]
   1bb88:	add	r1, r1, #1
   1bb8c:	ldr	r3, [r0, #4]
   1bb90:	cmp	r1, r3
   1bb94:	blt	1bb7c <__assert_fail@plt+0xa664>
   1bb98:	b	1bb74 <__assert_fail@plt+0xa65c>
   1bb9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bba0:	add	fp, sp, #28
   1bba4:	sub	sp, sp, #4
   1bba8:	mov	r9, r2
   1bbac:	mov	r4, r1
   1bbb0:	mov	r7, r0
   1bbb4:	str	r2, [r1]
   1bbb8:	ldr	r1, [r1, #8]
   1bbbc:	add	r5, r4, #16
   1bbc0:	mov	r0, r5
   1bbc4:	bl	1b034 <__assert_fail@plt+0x9b1c>
   1bbc8:	mov	r8, #12
   1bbcc:	cmp	r0, #0
   1bbd0:	bne	1bc6c <__assert_fail@plt+0xa754>
   1bbd4:	ldr	r0, [r4, #8]
   1bbd8:	cmp	r0, #1
   1bbdc:	blt	1bc28 <__assert_fail@plt+0xa710>
   1bbe0:	mov	r6, #0
   1bbe4:	b	1bbf8 <__assert_fail@plt+0xa6e0>
   1bbe8:	ldr	r0, [r4, #8]
   1bbec:	add	r6, r6, #1
   1bbf0:	cmp	r6, r0
   1bbf4:	bge	1bc28 <__assert_fail@plt+0xa710>
   1bbf8:	ldr	r0, [r4, #12]
   1bbfc:	ldr	r1, [r0, r6, lsl #2]
   1bc00:	ldr	r0, [r7]
   1bc04:	add	r0, r0, r1, lsl #3
   1bc08:	ldrb	r0, [r0, #4]
   1bc0c:	tst	r0, #8
   1bc10:	bne	1bbe8 <__assert_fail@plt+0xa6d0>
   1bc14:	mov	r0, r5
   1bc18:	bl	1b660 <__assert_fail@plt+0xa148>
   1bc1c:	cmp	r0, #0
   1bc20:	bne	1bbe8 <__assert_fail@plt+0xa6d0>
   1bc24:	b	1bc6c <__assert_fail@plt+0xa754>
   1bc28:	ldr	sl, [r7, #32]
   1bc2c:	ldr	r0, [r7, #68]	; 0x44
   1bc30:	and	r0, r0, r9
   1bc34:	add	r7, r0, r0, lsl #1
   1bc38:	mov	r6, sl
   1bc3c:	ldr	r1, [r6, r7, lsl #2]!
   1bc40:	mov	r5, r6
   1bc44:	ldr	r0, [r5, #4]!
   1bc48:	cmp	r0, r1
   1bc4c:	ble	1bc78 <__assert_fail@plt+0xa760>
   1bc50:	add	r0, sl, r7, lsl #2
   1bc54:	ldr	r0, [r0, #8]
   1bc58:	ldr	r1, [r6]
   1bc5c:	add	r2, r1, #1
   1bc60:	str	r2, [r6]
   1bc64:	str	r4, [r0, r1, lsl #2]
   1bc68:	mov	r8, #0
   1bc6c:	mov	r0, r8
   1bc70:	sub	sp, fp, #28
   1bc74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc78:	add	r9, sl, r7, lsl #2
   1bc7c:	ldr	r0, [r9, #8]!
   1bc80:	mov	r2, #2
   1bc84:	add	r1, r2, r1, lsl #1
   1bc88:	str	r1, [sp]
   1bc8c:	lsl	r1, r1, #2
   1bc90:	bl	22698 <__assert_fail@plt+0x11180>
   1bc94:	cmp	r0, #0
   1bc98:	beq	1bc6c <__assert_fail@plt+0xa754>
   1bc9c:	str	r0, [r9]
   1bca0:	ldr	r0, [sp]
   1bca4:	str	r0, [r5]
   1bca8:	b	1bc50 <__assert_fail@plt+0xa738>
   1bcac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcb0:	add	fp, sp, #28
   1bcb4:	sub	sp, sp, #4
   1bcb8:	mov	r5, r2
   1bcbc:	mov	sl, r1
   1bcc0:	mov	r4, r0
   1bcc4:	add	r8, r2, #1
   1bcc8:	cmp	r3, #1
   1bccc:	beq	1bd1c <__assert_fail@plt+0xa804>
   1bcd0:	cmp	r3, #0
   1bcd4:	bne	1bd60 <__assert_fail@plt+0xa848>
   1bcd8:	lsl	r6, r8, #2
   1bcdc:	mov	r0, r6
   1bce0:	bl	22668 <__assert_fail@plt+0x11150>
   1bce4:	str	r0, [r4, #4]
   1bce8:	mov	r7, #0
   1bcec:	cmp	r0, #0
   1bcf0:	beq	1bda0 <__assert_fail@plt+0xa888>
   1bcf4:	mov	r0, r6
   1bcf8:	bl	22668 <__assert_fail@plt+0x11150>
   1bcfc:	str	r0, [r4, #8]
   1bd00:	cmp	r0, #0
   1bd04:	beq	1bdfc <__assert_fail@plt+0xa8e4>
   1bd08:	str	r8, [r4]
   1bd0c:	mov	r6, #1
   1bd10:	cmp	r5, #1
   1bd14:	bge	1bd34 <__assert_fail@plt+0xa81c>
   1bd18:	b	1bd6c <__assert_fail@plt+0xa854>
   1bd1c:	ldr	r0, [r4]
   1bd20:	mov	r6, #1
   1bd24:	cmp	r8, r0
   1bd28:	bhi	1bdac <__assert_fail@plt+0xa894>
   1bd2c:	cmp	r5, #1
   1bd30:	blt	1bd6c <__assert_fail@plt+0xa854>
   1bd34:	add	r0, sl, #4
   1bd38:	ldmib	r4, {r1, r2}
   1bd3c:	mov	r3, r5
   1bd40:	ldr	r7, [r0, #-4]
   1bd44:	str	r7, [r1], #4
   1bd48:	ldr	r7, [r0]
   1bd4c:	str	r7, [r2], #4
   1bd50:	add	r0, r0, #8
   1bd54:	subs	r3, r3, #1
   1bd58:	bne	1bd40 <__assert_fail@plt+0xa828>
   1bd5c:	b	1bd70 <__assert_fail@plt+0xa858>
   1bd60:	mov	r6, #2
   1bd64:	cmp	r5, #1
   1bd68:	bge	1bd34 <__assert_fail@plt+0xa81c>
   1bd6c:	mov	r5, #0
   1bd70:	ldr	r0, [r4]
   1bd74:	cmp	r5, r0
   1bd78:	bcs	1bd9c <__assert_fail@plt+0xa884>
   1bd7c:	ldmib	r4, {r0, r1}
   1bd80:	mvn	r2, #0
   1bd84:	str	r2, [r1, r5, lsl #2]
   1bd88:	str	r2, [r0, r5, lsl #2]
   1bd8c:	add	r5, r5, #1
   1bd90:	ldr	r3, [r4]
   1bd94:	cmp	r5, r3
   1bd98:	bcc	1bd84 <__assert_fail@plt+0xa86c>
   1bd9c:	mov	r7, r6
   1bda0:	mov	r0, r7
   1bda4:	sub	sp, fp, #28
   1bda8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdac:	ldr	r0, [r4, #4]
   1bdb0:	lsl	r9, r8, #2
   1bdb4:	mov	r1, r9
   1bdb8:	bl	22698 <__assert_fail@plt+0x11180>
   1bdbc:	mov	r7, #0
   1bdc0:	str	r0, [sp]
   1bdc4:	cmp	r0, #0
   1bdc8:	beq	1bda0 <__assert_fail@plt+0xa888>
   1bdcc:	ldr	r0, [r4, #8]
   1bdd0:	mov	r1, r9
   1bdd4:	bl	22698 <__assert_fail@plt+0x11180>
   1bdd8:	cmp	r0, #0
   1bddc:	beq	1be08 <__assert_fail@plt+0xa8f0>
   1bde0:	str	r8, [r4]
   1bde4:	ldr	r1, [sp]
   1bde8:	str	r1, [r4, #4]
   1bdec:	str	r0, [r4, #8]
   1bdf0:	cmp	r5, #1
   1bdf4:	bge	1bd34 <__assert_fail@plt+0xa81c>
   1bdf8:	b	1bd6c <__assert_fail@plt+0xa854>
   1bdfc:	ldr	r0, [r4, #4]
   1be00:	bl	22b58 <__assert_fail@plt+0x11640>
   1be04:	b	1bda0 <__assert_fail@plt+0xa888>
   1be08:	ldr	r0, [sp]
   1be0c:	b	1be00 <__assert_fail@plt+0xa8e8>
   1be10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1be14:	add	fp, sp, #24
   1be18:	sub	sp, sp, #8
   1be1c:	mov	r7, r3
   1be20:	mov	r4, r2
   1be24:	mov	r8, r1
   1be28:	mov	r5, r0
   1be2c:	ldr	r9, [fp, #16]
   1be30:	ldr	r6, [r9, #92]	; 0x5c
   1be34:	str	r9, [sp, #4]
   1be38:	ldr	r0, [fp, #12]
   1be3c:	str	r0, [sp]
   1be40:	ldr	r3, [fp, #8]
   1be44:	mov	r0, r1
   1be48:	mov	r1, r2
   1be4c:	mov	r2, r5
   1be50:	bl	16b70 <__assert_fail@plt+0x5658>
   1be54:	cmp	r6, r7
   1be58:	movgt	r7, r6
   1be5c:	add	r1, r4, #1
   1be60:	cmp	r1, r7
   1be64:	movge	r1, r7
   1be68:	mov	r0, r5
   1be6c:	bl	16bc8 <__assert_fail@plt+0x56b0>
   1be70:	cmp	r0, #0
   1be74:	bne	1beb8 <__assert_fail@plt+0xa9a0>
   1be78:	add	r1, r9, #96	; 0x60
   1be7c:	str	r1, [r5, #68]	; 0x44
   1be80:	ldrb	r1, [r9, #88]	; 0x58
   1be84:	ubfx	r1, r1, #4, #1
   1be88:	strb	r1, [r5, #78]	; 0x4e
   1be8c:	ldrb	r1, [r5, #75]	; 0x4b
   1be90:	cmp	r1, #0
   1be94:	beq	1bea0 <__assert_fail@plt+0xa988>
   1be98:	mov	r4, #0
   1be9c:	b	1beb0 <__assert_fail@plt+0xa998>
   1bea0:	str	r8, [r5, #4]
   1bea4:	ldr	r1, [r9, #92]	; 0x5c
   1bea8:	cmp	r1, #1
   1beac:	movwgt	r4, #0
   1beb0:	str	r4, [r5, #28]
   1beb4:	str	r4, [r5, #32]
   1beb8:	sub	sp, fp, #24
   1bebc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bec0:	push	{r4, r5, r6, sl, fp, lr}
   1bec4:	add	fp, sp, #16
   1bec8:	mov	r4, r2
   1becc:	mov	r5, r0
   1bed0:	mvn	r0, #0
   1bed4:	str	r1, [r5, #88]	; 0x58
   1bed8:	str	r0, [r5, #92]	; 0x5c
   1bedc:	cmp	r2, #1
   1bee0:	blt	1bf2c <__assert_fail@plt+0xaa14>
   1bee4:	mov	r6, #12
   1bee8:	movw	r0, #43690	; 0xaaaa
   1beec:	movt	r0, #2730	; 0xaaa
   1bef0:	cmp	r4, r0
   1bef4:	bhi	1bf24 <__assert_fail@plt+0xaa0c>
   1bef8:	add	r0, r4, r4, lsl #1
   1befc:	lsl	r0, r0, #3
   1bf00:	bl	22668 <__assert_fail@plt+0x11150>
   1bf04:	str	r0, [r5, #116]	; 0x74
   1bf08:	lsl	r0, r4, #2
   1bf0c:	bl	22668 <__assert_fail@plt+0x11150>
   1bf10:	str	r0, [r5, #132]	; 0x84
   1bf14:	cmp	r0, #0
   1bf18:	ldrne	r0, [r5, #116]	; 0x74
   1bf1c:	cmpne	r0, #0
   1bf20:	bne	1bf2c <__assert_fail@plt+0xaa14>
   1bf24:	mov	r0, r6
   1bf28:	pop	{r4, r5, r6, sl, fp, pc}
   1bf2c:	str	r4, [r5, #128]	; 0x80
   1bf30:	mov	r0, #1
   1bf34:	str	r0, [r5, #120]	; 0x78
   1bf38:	str	r4, [r5, #112]	; 0x70
   1bf3c:	mov	r6, #0
   1bf40:	mov	r0, r6
   1bf44:	pop	{r4, r5, r6, sl, fp, pc}
   1bf48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf4c:	add	fp, sp, #28
   1bf50:	sub	sp, sp, #28
   1bf54:	mov	r6, r2
   1bf58:	mov	r7, r1
   1bf5c:	mov	r4, r0
   1bf60:	ldr	r0, [r0, #24]
   1bf64:	cmp	r0, r1
   1bf68:	ble	1c0d8 <__assert_fail@plt+0xabc0>
   1bf6c:	ldr	r0, [r4, #80]	; 0x50
   1bf70:	cmp	r0, #2
   1bf74:	movge	r0, #0
   1bf78:	strge	r0, [r4, #16]
   1bf7c:	strge	r0, [r4, #20]
   1bf80:	mov	r0, #0
   1bf84:	strb	r0, [r4, #76]	; 0x4c
   1bf88:	str	r0, [r4, #24]
   1bf8c:	str	r0, [r4, #28]
   1bf90:	str	r0, [r4, #32]
   1bf94:	mov	r0, #4
   1bf98:	tst	r6, #1
   1bf9c:	movweq	r0, #6
   1bfa0:	ldr	r1, [r4, #44]	; 0x2c
   1bfa4:	ldr	r2, [r4, #52]	; 0x34
   1bfa8:	str	r1, [r4, #48]	; 0x30
   1bfac:	str	r2, [r4, #56]	; 0x38
   1bfb0:	str	r0, [r4, #60]	; 0x3c
   1bfb4:	ldrb	r0, [r4, #75]	; 0x4b
   1bfb8:	cmp	r0, #0
   1bfbc:	mov	r5, r7
   1bfc0:	bne	1bfd0 <__assert_fail@plt+0xaab8>
   1bfc4:	ldr	r0, [r4]
   1bfc8:	str	r0, [r4, #4]
   1bfcc:	mov	r5, r7
   1bfd0:	cmp	r5, #0
   1bfd4:	beq	1c060 <__assert_fail@plt+0xab48>
   1bfd8:	ldr	r0, [r4, #32]
   1bfdc:	cmp	r5, r0
   1bfe0:	bge	1c0e8 <__assert_fail@plt+0xabd0>
   1bfe4:	ldrb	r0, [r4, #76]	; 0x4c
   1bfe8:	cmp	r0, #0
   1bfec:	bne	1c220 <__assert_fail@plt+0xad08>
   1bff0:	sub	r1, r5, #1
   1bff4:	mov	r0, r4
   1bff8:	mov	r2, r6
   1bffc:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1c000:	str	r0, [r4, #60]	; 0x3c
   1c004:	ldr	r0, [r4, #80]	; 0x50
   1c008:	cmp	r0, #2
   1c00c:	blt	1c028 <__assert_fail@plt+0xab10>
   1c010:	ldr	r0, [r4, #8]
   1c014:	ldr	r2, [r4, #28]
   1c018:	add	r1, r0, r5, lsl #2
   1c01c:	sub	r2, r2, r5
   1c020:	lsl	r2, r2, #2
   1c024:	bl	11278 <memmove@plt>
   1c028:	ldrb	r0, [r4, #75]	; 0x4b
   1c02c:	cmp	r0, #0
   1c030:	bne	1c318 <__assert_fail@plt+0xae00>
   1c034:	ldr	r0, [r4, #28]
   1c038:	ldr	r1, [r4, #32]
   1c03c:	sub	r0, r0, r5
   1c040:	sub	r1, r1, r5
   1c044:	str	r0, [r4, #28]
   1c048:	str	r1, [r4, #32]
   1c04c:	ldrb	r0, [r4, #75]	; 0x4b
   1c050:	cmp	r0, #0
   1c054:	ldreq	r0, [r4, #4]
   1c058:	addeq	r0, r0, r5
   1c05c:	streq	r0, [r4, #4]
   1c060:	str	r7, [r4, #24]
   1c064:	ldr	r0, [r4, #48]	; 0x30
   1c068:	ldr	r1, [r4, #56]	; 0x38
   1c06c:	ldr	r2, [r4, #80]	; 0x50
   1c070:	sub	r0, r0, r5
   1c074:	str	r0, [r4, #48]	; 0x30
   1c078:	sub	r1, r1, r5
   1c07c:	str	r1, [r4, #56]	; 0x38
   1c080:	cmp	r2, #2
   1c084:	blt	1c0ac <__assert_fail@plt+0xab94>
   1c088:	ldrb	r0, [r4, #72]	; 0x48
   1c08c:	cmp	r0, #0
   1c090:	beq	1c0c0 <__assert_fail@plt+0xaba8>
   1c094:	mov	r0, r4
   1c098:	bl	16c6c <__assert_fail@plt+0x5754>
   1c09c:	cmp	r0, #0
   1c0a0:	beq	1c0c8 <__assert_fail@plt+0xabb0>
   1c0a4:	sub	sp, fp, #28
   1c0a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0ac:	ldrb	r1, [r4, #75]	; 0x4b
   1c0b0:	cmp	r1, #0
   1c0b4:	bne	1c3ac <__assert_fail@plt+0xae94>
   1c0b8:	str	r0, [r4, #28]
   1c0bc:	b	1c0c8 <__assert_fail@plt+0xabb0>
   1c0c0:	mov	r0, r4
   1c0c4:	bl	1727c <__assert_fail@plt+0x5d64>
   1c0c8:	mov	r0, #0
   1c0cc:	str	r0, [r4, #40]	; 0x28
   1c0d0:	sub	sp, fp, #28
   1c0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0d8:	sub	r5, r7, r0
   1c0dc:	cmp	r5, #0
   1c0e0:	bne	1bfd8 <__assert_fail@plt+0xaac0>
   1c0e4:	b	1c060 <__assert_fail@plt+0xab48>
   1c0e8:	ldr	r9, [r4, #28]
   1c0ec:	ldrb	r0, [r4, #76]	; 0x4c
   1c0f0:	cmp	r0, #0
   1c0f4:	bne	1c4b4 <__assert_fail@plt+0xaf9c>
   1c0f8:	mov	r0, #0
   1c0fc:	str	r0, [r4, #28]
   1c100:	ldr	r1, [r4, #80]	; 0x50
   1c104:	cmp	r1, #2
   1c108:	blt	1c3c4 <__assert_fail@plt+0xaeac>
   1c10c:	mvn	r0, #0
   1c110:	str	r0, [sp, #24]
   1c114:	ldrb	r0, [r4, #73]	; 0x49
   1c118:	cmp	r0, #0
   1c11c:	beq	1c1d0 <__assert_fail@plt+0xacb8>
   1c120:	ldr	r2, [r4]
   1c124:	ldr	r0, [r4, #24]
   1c128:	add	r0, r2, r0
   1c12c:	add	r8, r0, r5
   1c130:	sub	r1, r5, r1
   1c134:	add	r1, r0, r1
   1c138:	cmp	r1, r2
   1c13c:	movcc	r1, r2
   1c140:	mov	sl, r8
   1c144:	sub	sl, sl, #1
   1c148:	cmp	sl, r1
   1c14c:	bcc	1c1c4 <__assert_fail@plt+0xacac>
   1c150:	ldrb	r2, [sl]
   1c154:	and	r2, r2, #192	; 0xc0
   1c158:	cmp	r2, #128	; 0x80
   1c15c:	beq	1c144 <__assert_fail@plt+0xac2c>
   1c160:	ldr	r1, [r4, #48]	; 0x30
   1c164:	add	r0, r0, r1
   1c168:	sub	r2, r0, sl
   1c16c:	ldr	r0, [r4, #64]	; 0x40
   1c170:	cmp	r0, #0
   1c174:	mov	r1, sl
   1c178:	bne	1c53c <__assert_fail@plt+0xb024>
   1c17c:	mov	r0, #0
   1c180:	str	r0, [sp, #20]
   1c184:	str	r0, [sp, #16]
   1c188:	add	r0, sp, #12
   1c18c:	add	r3, sp, #16
   1c190:	bl	22c08 <__assert_fail@plt+0x116f0>
   1c194:	sub	r1, r8, sl
   1c198:	cmp	r0, r1
   1c19c:	bcc	1c1c4 <__assert_fail@plt+0xacac>
   1c1a0:	cmn	r0, #3
   1c1a4:	bhi	1c1c4 <__assert_fail@plt+0xacac>
   1c1a8:	mov	r2, #0
   1c1ac:	str	r2, [r4, #16]
   1c1b0:	str	r2, [r4, #20]
   1c1b4:	sub	r0, r0, r1
   1c1b8:	str	r0, [r4, #28]
   1c1bc:	ldr	r0, [sp, #12]
   1c1c0:	str	r0, [sp, #24]
   1c1c4:	ldr	r8, [sp, #24]
   1c1c8:	cmn	r8, #1
   1c1cc:	bne	1c1f4 <__assert_fail@plt+0xacdc>
   1c1d0:	add	r2, sp, #24
   1c1d4:	mov	r0, r4
   1c1d8:	mov	r1, r7
   1c1dc:	bl	1cf98 <__assert_fail@plt+0xba80>
   1c1e0:	sub	r0, r0, r7
   1c1e4:	str	r0, [r4, #28]
   1c1e8:	ldr	r8, [sp, #24]
   1c1ec:	cmn	r8, #1
   1c1f0:	beq	1c474 <__assert_fail@plt+0xaf5c>
   1c1f4:	ldrb	r0, [r4, #78]	; 0x4e
   1c1f8:	cmp	r0, #0
   1c1fc:	bne	1c518 <__assert_fail@plt+0xb000>
   1c200:	mov	r0, #0
   1c204:	cmp	r8, #10
   1c208:	bne	1c484 <__assert_fail@plt+0xaf6c>
   1c20c:	ldrb	r0, [r4, #77]	; 0x4d
   1c210:	cmp	r0, #0
   1c214:	movwne	r0, #1
   1c218:	lsl	r0, r0, #1
   1c21c:	b	1c484 <__assert_fail@plt+0xaf6c>
   1c220:	ldr	r8, [r4, #12]
   1c224:	ldr	r9, [r4, #28]
   1c228:	mov	r0, #0
   1c22c:	mov	r1, r9
   1c230:	b	1c240 <__assert_fail@plt+0xad28>
   1c234:	cmp	r0, r3
   1c238:	mov	r1, r3
   1c23c:	bge	1c26c <__assert_fail@plt+0xad54>
   1c240:	add	r2, r0, r1
   1c244:	add	r2, r2, r2, lsr #31
   1c248:	asr	sl, r2, #1
   1c24c:	ldr	r2, [r8, sl, lsl #2]
   1c250:	cmp	r2, r5
   1c254:	mov	r3, sl
   1c258:	bgt	1c234 <__assert_fail@plt+0xad1c>
   1c25c:	bge	1c26c <__assert_fail@plt+0xad54>
   1c260:	add	r0, sl, #1
   1c264:	mov	r3, r1
   1c268:	b	1c234 <__assert_fail@plt+0xad1c>
   1c26c:	cmp	r2, r5
   1c270:	addlt	sl, sl, #1
   1c274:	sub	r1, sl, #1
   1c278:	mov	r0, r4
   1c27c:	mov	r2, r6
   1c280:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1c284:	str	r0, [r4, #60]	; 0x3c
   1c288:	cmp	r9, r5
   1c28c:	ble	1c330 <__assert_fail@plt+0xae18>
   1c290:	cmp	sl, r5
   1c294:	bne	1c330 <__assert_fail@plt+0xae18>
   1c298:	ldr	r0, [r8, sl, lsl #2]
   1c29c:	cmp	r0, r5
   1c2a0:	bne	1c330 <__assert_fail@plt+0xae18>
   1c2a4:	ldr	r0, [r4, #8]
   1c2a8:	add	r1, r0, r5, lsl #2
   1c2ac:	sub	r2, r9, r5
   1c2b0:	lsl	r2, r2, #2
   1c2b4:	bl	11278 <memmove@plt>
   1c2b8:	ldr	r0, [r4, #4]
   1c2bc:	ldr	r2, [r4, #28]
   1c2c0:	add	r1, r0, r5
   1c2c4:	sub	r2, r2, r5
   1c2c8:	bl	11278 <memmove@plt>
   1c2cc:	ldr	r0, [r4, #28]
   1c2d0:	ldr	r1, [r4, #32]
   1c2d4:	sub	r0, r0, r5
   1c2d8:	sub	r1, r1, r5
   1c2dc:	str	r0, [r4, #28]
   1c2e0:	str	r1, [r4, #32]
   1c2e4:	cmp	r0, #1
   1c2e8:	blt	1c04c <__assert_fail@plt+0xab34>
   1c2ec:	ldr	r0, [r4, #12]
   1c2f0:	add	r1, r0, r5, lsl #2
   1c2f4:	mov	r2, #0
   1c2f8:	ldr	r3, [r1, r2, lsl #2]
   1c2fc:	sub	r3, r3, r5
   1c300:	str	r3, [r0, r2, lsl #2]
   1c304:	add	r2, r2, #1
   1c308:	ldr	r3, [r4, #28]
   1c30c:	cmp	r2, r3
   1c310:	blt	1c2f8 <__assert_fail@plt+0xade0>
   1c314:	b	1c04c <__assert_fail@plt+0xab34>
   1c318:	ldr	r0, [r4, #4]
   1c31c:	ldr	r2, [r4, #28]
   1c320:	add	r1, r0, r5
   1c324:	sub	r2, r2, r5
   1c328:	bl	11278 <memmove@plt>
   1c32c:	b	1c034 <__assert_fail@plt+0xab1c>
   1c330:	mov	r0, #0
   1c334:	strb	r0, [r4, #76]	; 0x4c
   1c338:	sub	r0, r5, r7
   1c33c:	ldr	r1, [r4, #44]	; 0x2c
   1c340:	ldr	r2, [r4, #52]	; 0x34
   1c344:	add	r1, r0, r1
   1c348:	str	r1, [r4, #48]	; 0x30
   1c34c:	add	r0, r0, r2
   1c350:	str	r0, [r4, #56]	; 0x38
   1c354:	sub	r1, r8, #4
   1c358:	mov	r0, sl
   1c35c:	cmp	sl, #1
   1c360:	blt	1c374 <__assert_fail@plt+0xae5c>
   1c364:	ldr	r2, [r1, r0, lsl #2]
   1c368:	sub	sl, r0, #1
   1c36c:	cmp	r2, r5
   1c370:	beq	1c358 <__assert_fail@plt+0xae40>
   1c374:	cmp	r0, r9
   1c378:	bge	1c398 <__assert_fail@plt+0xae80>
   1c37c:	ldr	r1, [r4, #8]
   1c380:	ldr	r2, [r1, r0, lsl #2]
   1c384:	cmn	r2, #1
   1c388:	bne	1c398 <__assert_fail@plt+0xae80>
   1c38c:	add	r0, r0, #1
   1c390:	cmp	r9, r0
   1c394:	bne	1c380 <__assert_fail@plt+0xae68>
   1c398:	cmp	r0, r9
   1c39c:	bne	1c410 <__assert_fail@plt+0xaef8>
   1c3a0:	mov	r0, #0
   1c3a4:	str	r0, [r4, #28]
   1c3a8:	b	1c494 <__assert_fail@plt+0xaf7c>
   1c3ac:	ldrb	r0, [r4, #72]	; 0x48
   1c3b0:	cmp	r0, #0
   1c3b4:	beq	1c45c <__assert_fail@plt+0xaf44>
   1c3b8:	mov	r0, r4
   1c3bc:	bl	17208 <__assert_fail@plt+0x5cf0>
   1c3c0:	b	1c0c8 <__assert_fail@plt+0xabb0>
   1c3c4:	ldr	r2, [r4]
   1c3c8:	ldr	r3, [r4, #24]
   1c3cc:	ldr	r1, [r4, #64]	; 0x40
   1c3d0:	add	r3, r5, r3
   1c3d4:	add	r2, r3, r2
   1c3d8:	ldrb	r6, [r2, #-1]
   1c3dc:	str	r0, [r4, #32]
   1c3e0:	cmp	r1, #0
   1c3e4:	ldrbne	r6, [r1, r6]
   1c3e8:	ldr	r0, [r4, #68]	; 0x44
   1c3ec:	mov	r1, r6
   1c3f0:	bl	1d048 <__assert_fail@plt+0xbb30>
   1c3f4:	mov	r1, #1
   1c3f8:	cmp	r0, #0
   1c3fc:	moveq	r1, #0
   1c400:	cmpeq	r6, #10
   1c404:	beq	1c4a0 <__assert_fail@plt+0xaf88>
   1c408:	str	r1, [r4, #60]	; 0x3c
   1c40c:	b	1c04c <__assert_fail@plt+0xab34>
   1c410:	ldr	r0, [r8, r0, lsl #2]
   1c414:	subs	r0, r0, r5
   1c418:	str	r0, [r4, #28]
   1c41c:	beq	1c494 <__assert_fail@plt+0xaf7c>
   1c420:	ldr	r2, [r4, #28]
   1c424:	cmp	r2, #1
   1c428:	blt	1c44c <__assert_fail@plt+0xaf34>
   1c42c:	ldr	r0, [r4, #8]
   1c430:	mov	r1, #0
   1c434:	mvn	r3, #0
   1c438:	str	r3, [r0, r1, lsl #2]
   1c43c:	add	r1, r1, #1
   1c440:	ldr	r2, [r4, #28]
   1c444:	cmp	r1, r2
   1c448:	blt	1c438 <__assert_fail@plt+0xaf20>
   1c44c:	ldr	r0, [r4, #4]
   1c450:	mov	r1, #255	; 0xff
   1c454:	bl	11428 <memset@plt>
   1c458:	b	1c494 <__assert_fail@plt+0xaf7c>
   1c45c:	ldr	r0, [r4, #64]	; 0x40
   1c460:	cmp	r0, #0
   1c464:	beq	1c0c8 <__assert_fail@plt+0xabb0>
   1c468:	mov	r0, r4
   1c46c:	bl	17438 <__assert_fail@plt+0x5f20>
   1c470:	b	1c0c8 <__assert_fail@plt+0xabb0>
   1c474:	sub	r1, r9, #1
   1c478:	mov	r0, r4
   1c47c:	mov	r2, r6
   1c480:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1c484:	str	r0, [r4, #60]	; 0x3c
   1c488:	ldr	r0, [r4, #28]
   1c48c:	cmp	r0, #0
   1c490:	bne	1c4dc <__assert_fail@plt+0xafc4>
   1c494:	ldr	r0, [r4, #28]
   1c498:	str	r0, [r4, #32]
   1c49c:	b	1c04c <__assert_fail@plt+0xab34>
   1c4a0:	ldrb	r0, [r4, #77]	; 0x4d
   1c4a4:	cmp	r0, #0
   1c4a8:	movwne	r0, #1
   1c4ac:	lsl	r1, r0, #1
   1c4b0:	b	1c408 <__assert_fail@plt+0xaef0>
   1c4b4:	mov	r0, #0
   1c4b8:	strb	r0, [r4, #76]	; 0x4c
   1c4bc:	sub	r0, r5, r7
   1c4c0:	ldr	r1, [r4, #44]	; 0x2c
   1c4c4:	ldr	r2, [r4, #52]	; 0x34
   1c4c8:	add	r1, r0, r1
   1c4cc:	str	r1, [r4, #48]	; 0x30
   1c4d0:	add	r0, r0, r2
   1c4d4:	str	r0, [r4, #56]	; 0x38
   1c4d8:	b	1c0f8 <__assert_fail@plt+0xabe0>
   1c4dc:	ldr	r2, [r4, #28]
   1c4e0:	cmp	r2, #1
   1c4e4:	blt	1c508 <__assert_fail@plt+0xaff0>
   1c4e8:	ldr	r0, [r4, #8]
   1c4ec:	mov	r1, #0
   1c4f0:	mvn	r3, #0
   1c4f4:	str	r3, [r0, r1, lsl #2]
   1c4f8:	add	r1, r1, #1
   1c4fc:	ldr	r2, [r4, #28]
   1c500:	cmp	r1, r2
   1c504:	blt	1c4f4 <__assert_fail@plt+0xafdc>
   1c508:	ldrb	r0, [r4, #75]	; 0x4b
   1c50c:	cmp	r0, #0
   1c510:	bne	1c44c <__assert_fail@plt+0xaf34>
   1c514:	b	1c494 <__assert_fail@plt+0xaf7c>
   1c518:	mov	r0, r8
   1c51c:	bl	11410 <iswalnum@plt>
   1c520:	mov	r1, r0
   1c524:	mov	r0, #1
   1c528:	cmp	r8, #95	; 0x5f
   1c52c:	beq	1c484 <__assert_fail@plt+0xaf6c>
   1c530:	cmp	r1, #0
   1c534:	beq	1c200 <__assert_fail@plt+0xace8>
   1c538:	b	1c484 <__assert_fail@plt+0xaf6c>
   1c53c:	cmp	r2, #1
   1c540:	blt	1c578 <__assert_fail@plt+0xb060>
   1c544:	cmp	r2, #6
   1c548:	mov	r1, r2
   1c54c:	movge	r1, #6
   1c550:	sub	ip, r1, #1
   1c554:	add	r1, sp, #6
   1c558:	ldrb	r3, [sl, ip]
   1c55c:	ldrb	r3, [r0, r3]
   1c560:	strb	r3, [r1, ip]
   1c564:	sub	r3, ip, #1
   1c568:	cmp	ip, #0
   1c56c:	mov	ip, r3
   1c570:	bgt	1c558 <__assert_fail@plt+0xb040>
   1c574:	b	1c17c <__assert_fail@plt+0xac64>
   1c578:	add	r1, sp, #6
   1c57c:	b	1c17c <__assert_fail@plt+0xac64>
   1c580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c584:	add	fp, sp, #28
   1c588:	sub	sp, sp, #20
   1c58c:	mov	sl, r2
   1c590:	str	r1, [sp, #12]
   1c594:	mov	r7, r0
   1c598:	ldr	r4, [r0, #84]	; 0x54
   1c59c:	ldr	r5, [r0, #40]	; 0x28
   1c5a0:	mov	r0, #0
   1c5a4:	str	r0, [sp, #16]
   1c5a8:	cmp	r2, #0
   1c5ac:	str	r2, [sp, #8]
   1c5b0:	movwne	sl, #1
   1c5b4:	ldr	r6, [r4, #36]	; 0x24
   1c5b8:	ldrsb	r0, [r6, #52]	; 0x34
   1c5bc:	cmn	r0, #1
   1c5c0:	bgt	1c62c <__assert_fail@plt+0xb114>
   1c5c4:	ldr	r2, [r7, #88]	; 0x58
   1c5c8:	sub	r1, r5, #1
   1c5cc:	mov	r0, r7
   1c5d0:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1c5d4:	tst	r0, #1
   1c5d8:	bne	1c628 <__assert_fail@plt+0xb110>
   1c5dc:	mov	r3, r0
   1c5e0:	cmp	r0, #0
   1c5e4:	beq	1c62c <__assert_fail@plt+0xb114>
   1c5e8:	ands	r1, r3, #2
   1c5ec:	and	r0, r3, #4
   1c5f0:	cmpne	r0, #0
   1c5f4:	bne	1c834 <__assert_fail@plt+0xb31c>
   1c5f8:	cmp	r1, #0
   1c5fc:	bne	1c844 <__assert_fail@plt+0xb32c>
   1c600:	cmp	r0, #0
   1c604:	beq	1c62c <__assert_fail@plt+0xb114>
   1c608:	ldr	r2, [r6, #40]	; 0x28
   1c60c:	add	r0, sp, #16
   1c610:	mov	r1, r4
   1c614:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1c618:	mov	r6, r0
   1c61c:	cmp	r6, #0
   1c620:	bne	1c634 <__assert_fail@plt+0xb11c>
   1c624:	b	1c850 <__assert_fail@plt+0xb338>
   1c628:	ldr	r6, [r4, #40]	; 0x28
   1c62c:	cmp	r6, #0
   1c630:	beq	1c850 <__assert_fail@plt+0xb338>
   1c634:	ldr	r0, [r7, #100]	; 0x64
   1c638:	cmp	r0, #0
   1c63c:	str	r5, [sp]
   1c640:	beq	1c654 <__assert_fail@plt+0xb13c>
   1c644:	str	r6, [r0, r5, lsl #2]
   1c648:	ldr	r0, [r4, #76]	; 0x4c
   1c64c:	cmp	r0, #0
   1c650:	bne	1c880 <__assert_fail@plt+0xb368>
   1c654:	ldrb	r0, [r6, #52]	; 0x34
   1c658:	tst	r0, #16
   1c65c:	bne	1c858 <__assert_fail@plt+0xb340>
   1c660:	mov	r5, #0
   1c664:	mvn	r0, #0
   1c668:	str	r0, [sp, #4]
   1c66c:	ldr	r0, [r7, #40]	; 0x28
   1c670:	ldr	r1, [r7, #56]	; 0x38
   1c674:	cmp	r1, r0
   1c678:	ble	1c808 <__assert_fail@plt+0xb2f0>
   1c67c:	add	r3, sp, #16
   1c680:	b	1c6b4 <__assert_fail@plt+0xb19c>
   1c684:	ldr	r1, [r7, #40]	; 0x28
   1c688:	ldr	r0, [sp, #12]
   1c68c:	cmp	r0, #0
   1c690:	beq	1c828 <__assert_fail@plt+0xb310>
   1c694:	str	r1, [sp, #4]
   1c698:	mov	r0, #0
   1c69c:	str	r0, [sp, #8]
   1c6a0:	mov	r5, #1
   1c6a4:	ldr	r0, [r7, #40]	; 0x28
   1c6a8:	ldr	r1, [r7, #56]	; 0x38
   1c6ac:	cmp	r1, r0
   1c6b0:	ble	1c808 <__assert_fail@plt+0xb2f0>
   1c6b4:	mov	r9, r6
   1c6b8:	add	r8, r0, #1
   1c6bc:	ldr	r1, [r7, #36]	; 0x24
   1c6c0:	cmp	r8, r1
   1c6c4:	bge	1c7a8 <__assert_fail@plt+0xb290>
   1c6c8:	ldr	r1, [r7, #28]
   1c6cc:	cmp	r8, r1
   1c6d0:	bge	1c7b8 <__assert_fail@plt+0xb2a0>
   1c6d4:	mov	r0, r3
   1c6d8:	mov	r1, r7
   1c6dc:	mov	r2, r9
   1c6e0:	mov	r4, r3
   1c6e4:	bl	1d4e4 <__assert_fail@plt+0xbfcc>
   1c6e8:	mov	r6, r0
   1c6ec:	ldr	r0, [r7, #100]	; 0x64
   1c6f0:	cmp	r0, #0
   1c6f4:	beq	1c70c <__assert_fail@plt+0xb1f4>
   1c6f8:	mov	r0, r4
   1c6fc:	mov	r1, r7
   1c700:	mov	r2, r6
   1c704:	bl	1d594 <__assert_fail@plt+0xc07c>
   1c708:	mov	r6, r0
   1c70c:	cmp	r6, #0
   1c710:	bne	1c760 <__assert_fail@plt+0xb248>
   1c714:	ldr	r0, [sp, #16]
   1c718:	cmp	r0, #0
   1c71c:	bne	1c850 <__assert_fail@plt+0xb338>
   1c720:	ldr	r0, [sp, #12]
   1c724:	eor	r0, r0, #1
   1c728:	cmp	r5, #0
   1c72c:	mov	r1, r5
   1c730:	movwne	r1, #1
   1c734:	tst	r1, r0
   1c738:	bne	1c808 <__assert_fail@plt+0xb2f0>
   1c73c:	ldr	r0, [r7, #100]	; 0x64
   1c740:	cmp	r0, #0
   1c744:	beq	1c808 <__assert_fail@plt+0xb2f0>
   1c748:	add	r0, sp, #16
   1c74c:	mov	r1, r7
   1c750:	bl	1d6e0 <__assert_fail@plt+0xc1c8>
   1c754:	mov	r6, r0
   1c758:	cmp	r0, #0
   1c75c:	beq	1c808 <__assert_fail@plt+0xb2f0>
   1c760:	tst	sl, #1
   1c764:	bne	1c7e4 <__assert_fail@plt+0xb2cc>
   1c768:	mov	sl, #0
   1c76c:	add	r3, sp, #16
   1c770:	ldrb	r0, [r6, #52]	; 0x34
   1c774:	tst	r0, #16
   1c778:	beq	1c6a4 <__assert_fail@plt+0xb18c>
   1c77c:	sxtb	r0, r0
   1c780:	cmn	r0, #1
   1c784:	bgt	1c684 <__assert_fail@plt+0xb16c>
   1c788:	ldr	r2, [r7, #40]	; 0x28
   1c78c:	mov	r0, r7
   1c790:	mov	r1, r6
   1c794:	bl	1c91c <__assert_fail@plt+0xb404>
   1c798:	add	r3, sp, #16
   1c79c:	cmp	r0, #0
   1c7a0:	bne	1c684 <__assert_fail@plt+0xb16c>
   1c7a4:	b	1c6a4 <__assert_fail@plt+0xb18c>
   1c7a8:	ldr	r2, [r7, #48]	; 0x30
   1c7ac:	cmp	r1, r2
   1c7b0:	bge	1c6c8 <__assert_fail@plt+0xb1b0>
   1c7b4:	b	1c7c4 <__assert_fail@plt+0xb2ac>
   1c7b8:	ldr	r2, [r7, #48]	; 0x30
   1c7bc:	cmp	r1, r2
   1c7c0:	bge	1c6d4 <__assert_fail@plt+0xb1bc>
   1c7c4:	add	r1, r0, #2
   1c7c8:	mov	r0, r7
   1c7cc:	bl	1d410 <__assert_fail@plt+0xbef8>
   1c7d0:	add	r3, sp, #16
   1c7d4:	str	r0, [sp, #16]
   1c7d8:	cmp	r0, #0
   1c7dc:	beq	1c6d4 <__assert_fail@plt+0xb1bc>
   1c7e0:	b	1c850 <__assert_fail@plt+0xb338>
   1c7e4:	cmp	r9, r6
   1c7e8:	ldr	r0, [sp]
   1c7ec:	moveq	r0, r8
   1c7f0:	str	r0, [sp]
   1c7f4:	sub	r0, r9, r6
   1c7f8:	clz	r0, r0
   1c7fc:	lsr	r0, r0, #5
   1c800:	and	sl, sl, r0
   1c804:	b	1c76c <__assert_fail@plt+0xb254>
   1c808:	ldr	r2, [sp, #8]
   1c80c:	cmp	r2, #0
   1c810:	beq	1c824 <__assert_fail@plt+0xb30c>
   1c814:	ldr	r0, [r2]
   1c818:	ldr	r1, [sp]
   1c81c:	add	r0, r0, r1
   1c820:	str	r0, [r2]
   1c824:	ldr	r1, [sp, #4]
   1c828:	mov	r0, r1
   1c82c:	sub	sp, fp, #28
   1c830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c834:	ldr	r6, [r4, #48]	; 0x30
   1c838:	cmp	r6, #0
   1c83c:	bne	1c634 <__assert_fail@plt+0xb11c>
   1c840:	b	1c850 <__assert_fail@plt+0xb338>
   1c844:	ldr	r6, [r4, #44]	; 0x2c
   1c848:	cmp	r6, #0
   1c84c:	bne	1c634 <__assert_fail@plt+0xb11c>
   1c850:	mvn	r1, #1
   1c854:	b	1c828 <__assert_fail@plt+0xb310>
   1c858:	sxtb	r0, r0
   1c85c:	cmn	r0, #1
   1c860:	ble	1c8b8 <__assert_fail@plt+0xb3a0>
   1c864:	mov	r4, r5
   1c868:	mov	r5, #1
   1c86c:	ldr	r0, [sp, #12]
   1c870:	cmp	r0, #0
   1c874:	str	r4, [sp, #4]
   1c878:	bne	1c66c <__assert_fail@plt+0xb154>
   1c87c:	b	1c8f0 <__assert_fail@plt+0xb3d8>
   1c880:	add	r5, r6, #4
   1c884:	mov	sl, #0
   1c888:	mov	r0, r7
   1c88c:	mov	r1, r5
   1c890:	mov	r2, #0
   1c894:	bl	1d070 <__assert_fail@plt+0xbb58>
   1c898:	str	r0, [sp, #16]
   1c89c:	cmp	r0, #0
   1c8a0:	bne	1c914 <__assert_fail@plt+0xb3fc>
   1c8a4:	ldrb	r0, [r6, #52]	; 0x34
   1c8a8:	tst	r0, #64	; 0x40
   1c8ac:	bne	1c8f8 <__assert_fail@plt+0xb3e0>
   1c8b0:	ldr	r5, [sp]
   1c8b4:	b	1c654 <__assert_fail@plt+0xb13c>
   1c8b8:	mov	r0, r7
   1c8bc:	mov	r1, r6
   1c8c0:	mov	r2, r5
   1c8c4:	bl	1c91c <__assert_fail@plt+0xb404>
   1c8c8:	mov	r4, r5
   1c8cc:	mov	r5, r0
   1c8d0:	cmp	r0, #0
   1c8d4:	mvneq	r4, #0
   1c8d8:	str	r4, [sp, #4]
   1c8dc:	movwne	r5, #1
   1c8e0:	beq	1c66c <__assert_fail@plt+0xb154>
   1c8e4:	ldr	r0, [sp, #12]
   1c8e8:	cmp	r0, #0
   1c8ec:	bne	1c66c <__assert_fail@plt+0xb154>
   1c8f0:	ldr	r1, [sp]
   1c8f4:	b	1c828 <__assert_fail@plt+0xb310>
   1c8f8:	mov	r0, r7
   1c8fc:	mov	r1, r5
   1c900:	bl	1d104 <__assert_fail@plt+0xbbec>
   1c904:	str	r0, [sp, #16]
   1c908:	cmp	r0, #0
   1c90c:	ldr	r5, [sp]
   1c910:	beq	1c654 <__assert_fail@plt+0xb13c>
   1c914:	mov	r1, r0
   1c918:	b	1c828 <__assert_fail@plt+0xb310>
   1c91c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c920:	add	fp, sp, #24
   1c924:	mov	r3, r2
   1c928:	mov	r8, r1
   1c92c:	mov	r6, r0
   1c930:	ldr	r2, [r0, #88]	; 0x58
   1c934:	mov	r1, r3
   1c938:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1c93c:	mov	r9, r0
   1c940:	ldr	r0, [r8, #8]
   1c944:	cmp	r0, #1
   1c948:	blt	1c984 <__assert_fail@plt+0xb46c>
   1c94c:	ldr	r4, [r8, #12]
   1c950:	ldr	r6, [r6, #84]	; 0x54
   1c954:	mov	r5, #0
   1c958:	ldr	r7, [r4, r5, lsl #2]
   1c95c:	mov	r0, r6
   1c960:	mov	r1, r7
   1c964:	mov	r2, r9
   1c968:	bl	1fdcc <__assert_fail@plt+0xe8b4>
   1c96c:	cmp	r0, #0
   1c970:	bne	1c988 <__assert_fail@plt+0xb470>
   1c974:	add	r5, r5, #1
   1c978:	ldr	r0, [r8, #8]
   1c97c:	cmp	r5, r0
   1c980:	blt	1c958 <__assert_fail@plt+0xb440>
   1c984:	mov	r7, #0
   1c988:	mov	r0, r7
   1c98c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c994:	add	fp, sp, #28
   1c998:	sub	sp, sp, #44	; 0x2c
   1c99c:	ldr	r7, [r0, #92]	; 0x5c
   1c9a0:	cmn	r7, #-1073741822	; 0xc0000002
   1c9a4:	bhi	1cba4 <__assert_fail@plt+0xb68c>
   1c9a8:	ldr	r5, [r0, #84]	; 0x54
   1c9ac:	str	r0, [sp, #12]
   1c9b0:	ldr	sl, [r0, #96]	; 0x60
   1c9b4:	mov	r0, #4
   1c9b8:	add	r6, r0, r7, lsl #2
   1c9bc:	mov	r0, r6
   1c9c0:	bl	22668 <__assert_fail@plt+0x11150>
   1c9c4:	mov	r4, #12
   1c9c8:	cmp	r0, #0
   1c9cc:	beq	1cb74 <__assert_fail@plt+0xb65c>
   1c9d0:	mov	r9, r0
   1c9d4:	ldr	r0, [r5, #76]	; 0x4c
   1c9d8:	cmp	r0, #0
   1c9dc:	beq	1ca04 <__assert_fail@plt+0xb4ec>
   1c9e0:	mov	r0, r6
   1c9e4:	bl	22668 <__assert_fail@plt+0x11150>
   1c9e8:	cmp	r0, #0
   1c9ec:	beq	1cb78 <__assert_fail@plt+0xb660>
   1c9f0:	mov	r8, r0
   1c9f4:	str	r5, [sp, #8]
   1c9f8:	add	r4, sp, #16
   1c9fc:	mov	r5, sl
   1ca00:	b	1cabc <__assert_fail@plt+0xb5a4>
   1ca04:	str	r7, [sp]
   1ca08:	add	r4, sp, #16
   1ca0c:	mov	r8, #0
   1ca10:	mov	r0, r4
   1ca14:	mov	r1, r9
   1ca18:	mov	r2, #0
   1ca1c:	mov	r3, sl
   1ca20:	bl	1fe40 <__assert_fail@plt+0xe928>
   1ca24:	ldr	r0, [sp, #12]
   1ca28:	mov	r1, r4
   1ca2c:	bl	1fe60 <__assert_fail@plt+0xe948>
   1ca30:	mov	r4, r0
   1ca34:	ldr	r0, [sp, #40]	; 0x28
   1ca38:	bl	22b58 <__assert_fail@plt+0x11640>
   1ca3c:	cmp	r4, #0
   1ca40:	bne	1cb7c <__assert_fail@plt+0xb664>
   1ca44:	ldr	r0, [r9]
   1ca48:	cmp	r0, #0
   1ca4c:	bne	1cb58 <__assert_fail@plt+0xb640>
   1ca50:	mov	r4, #1
   1ca54:	b	1cb7c <__assert_fail@plt+0xb664>
   1ca58:	mov	r4, #1
   1ca5c:	cmp	r7, #1
   1ca60:	blt	1cb98 <__assert_fail@plt+0xb680>
   1ca64:	sub	r7, r7, #1
   1ca68:	ldr	sl, [sp, #12]
   1ca6c:	ldr	r0, [sl, #100]	; 0x64
   1ca70:	mov	r9, r1
   1ca74:	mov	r8, r6
   1ca78:	b	1ca90 <__assert_fail@plt+0xb578>
   1ca7c:	sub	r1, r7, #1
   1ca80:	add	r2, r7, #1
   1ca84:	cmp	r2, #2
   1ca88:	mov	r7, r1
   1ca8c:	blt	1cb7c <__assert_fail@plt+0xb664>
   1ca90:	ldr	r1, [r0, r7, lsl #2]
   1ca94:	cmp	r1, #0
   1ca98:	beq	1ca7c <__assert_fail@plt+0xb564>
   1ca9c:	ldrb	r2, [r1, #52]	; 0x34
   1caa0:	tst	r2, #16
   1caa4:	beq	1ca7c <__assert_fail@plt+0xb564>
   1caa8:	mov	r0, sl
   1caac:	mov	r2, r7
   1cab0:	bl	1c91c <__assert_fail@plt+0xb404>
   1cab4:	mov	r4, r5
   1cab8:	mov	r5, r0
   1cabc:	add	sl, r7, #1
   1cac0:	lsl	r2, sl, #2
   1cac4:	mov	r0, r8
   1cac8:	mov	r1, #0
   1cacc:	bl	11428 <memset@plt>
   1cad0:	str	r7, [sp]
   1cad4:	mov	r0, r4
   1cad8:	mov	r1, r9
   1cadc:	mov	r6, r8
   1cae0:	mov	r2, r8
   1cae4:	mov	r8, r5
   1cae8:	mov	r3, r5
   1caec:	bl	1fe40 <__assert_fail@plt+0xe928>
   1caf0:	ldr	r0, [sp, #12]
   1caf4:	mov	r5, r4
   1caf8:	mov	r1, r4
   1cafc:	bl	1fe60 <__assert_fail@plt+0xe948>
   1cb00:	mov	r4, r0
   1cb04:	ldr	r0, [sp, #40]	; 0x28
   1cb08:	bl	22b58 <__assert_fail@plt+0x11640>
   1cb0c:	cmp	r4, #0
   1cb10:	bne	1cbac <__assert_fail@plt+0xb694>
   1cb14:	mov	r1, r9
   1cb18:	ldr	r0, [r9]
   1cb1c:	cmp	r0, #0
   1cb20:	ldreq	r0, [r6]
   1cb24:	cmpeq	r0, #0
   1cb28:	beq	1ca58 <__assert_fail@plt+0xb540>
   1cb2c:	ldr	r0, [sp, #8]
   1cb30:	mov	r9, r1
   1cb34:	mov	r2, r6
   1cb38:	mov	r3, sl
   1cb3c:	bl	1ff78 <__assert_fail@plt+0xea60>
   1cb40:	mov	r4, r0
   1cb44:	mov	r0, r6
   1cb48:	bl	22b58 <__assert_fail@plt+0x11640>
   1cb4c:	cmp	r4, #0
   1cb50:	mov	sl, r8
   1cb54:	bne	1cb78 <__assert_fail@plt+0xb660>
   1cb58:	ldr	r4, [sp, #12]
   1cb5c:	ldr	r0, [r4, #100]	; 0x64
   1cb60:	bl	22b58 <__assert_fail@plt+0x11640>
   1cb64:	str	r7, [r4, #92]	; 0x5c
   1cb68:	str	sl, [r4, #96]	; 0x60
   1cb6c:	str	r9, [r4, #100]	; 0x64
   1cb70:	mov	r4, #0
   1cb74:	mov	r9, #0
   1cb78:	mov	r8, #0
   1cb7c:	mov	r0, r9
   1cb80:	bl	22b58 <__assert_fail@plt+0x11640>
   1cb84:	mov	r0, r8
   1cb88:	bl	22b58 <__assert_fail@plt+0x11640>
   1cb8c:	mov	r0, r4
   1cb90:	sub	sp, fp, #28
   1cb94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb98:	mov	r9, r1
   1cb9c:	mov	r8, r6
   1cba0:	b	1cb7c <__assert_fail@plt+0xb664>
   1cba4:	mov	r4, #12
   1cba8:	b	1cb8c <__assert_fail@plt+0xb674>
   1cbac:	mov	r8, r6
   1cbb0:	b	1cb7c <__assert_fail@plt+0xb664>
   1cbb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cbb8:	add	fp, sp, #24
   1cbbc:	mov	r8, r0
   1cbc0:	ldr	r0, [r0, #124]	; 0x7c
   1cbc4:	cmp	r0, #1
   1cbc8:	blt	1cc54 <__assert_fail@plt+0xb73c>
   1cbcc:	mov	r7, #0
   1cbd0:	b	1cbec <__assert_fail@plt+0xb6d4>
   1cbd4:	mov	r0, r5
   1cbd8:	bl	22b58 <__assert_fail@plt+0x11640>
   1cbdc:	add	r7, r7, #1
   1cbe0:	ldr	r0, [r8, #124]	; 0x7c
   1cbe4:	cmp	r7, r0
   1cbe8:	bge	1cc54 <__assert_fail@plt+0xb73c>
   1cbec:	ldr	r0, [r8, #132]	; 0x84
   1cbf0:	ldr	r5, [r0, r7, lsl #2]
   1cbf4:	ldr	r0, [r5, #16]
   1cbf8:	cmp	r0, #1
   1cbfc:	blt	1cc2c <__assert_fail@plt+0xb714>
   1cc00:	mov	r4, #0
   1cc04:	ldr	r0, [r5, #20]
   1cc08:	ldr	r6, [r0, r4, lsl #2]
   1cc0c:	ldr	r0, [r6, #16]
   1cc10:	bl	22b58 <__assert_fail@plt+0x11640>
   1cc14:	mov	r0, r6
   1cc18:	bl	22b58 <__assert_fail@plt+0x11640>
   1cc1c:	add	r4, r4, #1
   1cc20:	ldr	r0, [r5, #16]
   1cc24:	cmp	r4, r0
   1cc28:	blt	1cc04 <__assert_fail@plt+0xb6ec>
   1cc2c:	ldr	r0, [r5, #20]
   1cc30:	bl	22b58 <__assert_fail@plt+0x11640>
   1cc34:	ldr	r0, [r5, #8]
   1cc38:	cmp	r0, #0
   1cc3c:	beq	1cbd4 <__assert_fail@plt+0xb6bc>
   1cc40:	ldr	r0, [r0, #8]
   1cc44:	bl	22b58 <__assert_fail@plt+0x11640>
   1cc48:	ldr	r0, [r5, #8]
   1cc4c:	bl	22b58 <__assert_fail@plt+0x11640>
   1cc50:	b	1cbd4 <__assert_fail@plt+0xb6bc>
   1cc54:	mov	r0, #0
   1cc58:	str	r0, [r8, #108]	; 0x6c
   1cc5c:	str	r0, [r8, #124]	; 0x7c
   1cc60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cc64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc68:	add	fp, sp, #28
   1cc6c:	sub	sp, sp, #204	; 0xcc
   1cc70:	mov	r5, r3
   1cc74:	mov	r6, r2
   1cc78:	mov	r9, r1
   1cc7c:	ldr	r4, [r0]
   1cc80:	movw	r0, #16208	; 0x3f50
   1cc84:	movt	r0, #2
   1cc88:	vldr	d16, [r0]
   1cc8c:	ldr	r0, [r0, #8]
   1cc90:	str	r0, [fp, #-56]	; 0xffffffc8
   1cc94:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1cc98:	add	r0, sp, #28
   1cc9c:	bl	2103c <__assert_fail@plt+0xfb24>
   1cca0:	mov	r7, #0
   1cca4:	ldr	r0, [fp, #8]
   1cca8:	cmp	r0, #0
   1ccac:	mov	sl, #0
   1ccb0:	beq	1ccd4 <__assert_fail@plt+0xb7bc>
   1ccb4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1ccb8:	add	r0, r0, r0, lsl #1
   1ccbc:	lsl	r0, r0, #3
   1ccc0:	bl	22668 <__assert_fail@plt+0x11150>
   1ccc4:	str	r0, [fp, #-56]	; 0xffffffc8
   1ccc8:	cmp	r0, #0
   1cccc:	beq	1ce70 <__assert_fail@plt+0xb958>
   1ccd0:	sub	sl, fp, #64	; 0x40
   1ccd4:	ldr	r8, [r4, #72]	; 0x48
   1ccd8:	str	r7, [fp, #-44]	; 0xffffffd4
   1ccdc:	str	r7, [fp, #-48]	; 0xffffffd0
   1cce0:	str	r7, [fp, #-40]	; 0xffffffd8
   1cce4:	add	r0, sp, #28
   1cce8:	mov	r1, r6
   1ccec:	bl	21054 <__assert_fail@plt+0xfb3c>
   1ccf0:	mov	r7, #12
   1ccf4:	cmp	r0, #0
   1ccf8:	beq	1ce84 <__assert_fail@plt+0xb96c>
   1ccfc:	str	r4, [sp, #20]
   1cd00:	str	r9, [sp, #24]
   1cd04:	add	r0, sp, #28
   1cd08:	bl	2112c <__assert_fail@plt+0xfc14>
   1cd0c:	mov	r4, r0
   1cd10:	lsl	r2, r6, #3
   1cd14:	mov	r1, r5
   1cd18:	bl	112a8 <memcpy@plt>
   1cd1c:	ldr	r9, [r5]
   1cd20:	ldr	r0, [r5, #4]
   1cd24:	str	r9, [fp, #-32]	; 0xffffffe0
   1cd28:	mov	r7, #0
   1cd2c:	cmp	r9, r0
   1cd30:	bgt	1ce7c <__assert_fail@plt+0xb964>
   1cd34:	str	r9, [sp]
   1cd38:	str	r6, [sp, #4]
   1cd3c:	ldr	r0, [sp, #20]
   1cd40:	mov	r1, r5
   1cd44:	mov	r2, r4
   1cd48:	mov	r3, r8
   1cd4c:	bl	21134 <__assert_fail@plt+0xfc1c>
   1cd50:	ldr	r0, [r5, #4]
   1cd54:	cmp	r9, r0
   1cd58:	ldr	r9, [sp, #24]
   1cd5c:	bne	1cd6c <__assert_fail@plt+0xb854>
   1cd60:	ldr	r0, [r9, #96]	; 0x60
   1cd64:	cmp	r8, r0
   1cd68:	beq	1cd88 <__assert_fail@plt+0xb870>
   1cd6c:	cmp	sl, #0
   1cd70:	beq	1cdec <__assert_fail@plt+0xb8d4>
   1cd74:	sub	r0, fp, #48	; 0x30
   1cd78:	mov	r1, r8
   1cd7c:	bl	1b740 <__assert_fail@plt+0xa228>
   1cd80:	cmp	r0, #0
   1cd84:	beq	1cdec <__assert_fail@plt+0xb8d4>
   1cd88:	cmp	sl, #0
   1cd8c:	beq	1ce7c <__assert_fail@plt+0xb964>
   1cd90:	mov	r0, #0
   1cd94:	b	1cda4 <__assert_fail@plt+0xb88c>
   1cd98:	add	r0, r0, #1
   1cd9c:	cmp	r6, r0
   1cda0:	beq	1ce78 <__assert_fail@plt+0xb960>
   1cda4:	ldr	r1, [r5, r0, lsl #3]
   1cda8:	cmp	r1, #0
   1cdac:	bmi	1cd98 <__assert_fail@plt+0xb880>
   1cdb0:	add	r1, r5, r0, lsl #3
   1cdb4:	ldr	r1, [r1, #4]
   1cdb8:	cmn	r1, #1
   1cdbc:	bne	1cd98 <__assert_fail@plt+0xb880>
   1cdc0:	str	r4, [sp]
   1cdc4:	sub	r0, fp, #48	; 0x30
   1cdc8:	str	r0, [sp, #4]
   1cdcc:	mov	r0, sl
   1cdd0:	sub	r1, fp, #32
   1cdd4:	mov	r2, r6
   1cdd8:	mov	r3, r5
   1cddc:	bl	211ec <__assert_fail@plt+0xfcd4>
   1cde0:	mov	r8, r0
   1cde4:	cmp	r0, #0
   1cde8:	bmi	1ce78 <__assert_fail@plt+0xb960>
   1cdec:	sub	r0, fp, #32
   1cdf0:	stm	sp, {r0, r8}
   1cdf4:	sub	r0, fp, #48	; 0x30
   1cdf8:	str	r0, [sp, #8]
   1cdfc:	str	sl, [sp, #12]
   1ce00:	mov	r0, r9
   1ce04:	mov	r1, r6
   1ce08:	mov	r2, r5
   1ce0c:	mov	r3, r4
   1ce10:	bl	212a4 <__assert_fail@plt+0xfd8c>
   1ce14:	mov	r8, r0
   1ce18:	cmn	r0, #1
   1ce1c:	ble	1ce34 <__assert_fail@plt+0xb91c>
   1ce20:	ldr	r0, [r5, #4]
   1ce24:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1ce28:	cmp	r9, r0
   1ce2c:	ble	1cd34 <__assert_fail@plt+0xb81c>
   1ce30:	b	1ce7c <__assert_fail@plt+0xb964>
   1ce34:	cmn	r8, #2
   1ce38:	beq	1cea0 <__assert_fail@plt+0xb988>
   1ce3c:	str	r4, [sp]
   1ce40:	sub	r0, fp, #48	; 0x30
   1ce44:	str	r0, [sp, #4]
   1ce48:	mov	r0, sl
   1ce4c:	sub	r1, fp, #32
   1ce50:	mov	r2, r6
   1ce54:	mov	r3, r5
   1ce58:	bl	211ec <__assert_fail@plt+0xfcd4>
   1ce5c:	mov	r8, r0
   1ce60:	cmp	r0, #0
   1ce64:	bpl	1ce20 <__assert_fail@plt+0xb908>
   1ce68:	mov	r7, #1
   1ce6c:	b	1ce7c <__assert_fail@plt+0xb964>
   1ce70:	mov	r7, #12
   1ce74:	b	1ce94 <__assert_fail@plt+0xb97c>
   1ce78:	mov	r7, #0
   1ce7c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ce80:	bl	22b58 <__assert_fail@plt+0x11640>
   1ce84:	add	r0, sp, #28
   1ce88:	bl	210a8 <__assert_fail@plt+0xfb90>
   1ce8c:	mov	r0, sl
   1ce90:	bl	210c4 <__assert_fail@plt+0xfbac>
   1ce94:	mov	r0, r7
   1ce98:	sub	sp, fp, #28
   1ce9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cea0:	mov	r7, #12
   1cea4:	b	1ce7c <__assert_fail@plt+0xb964>
   1cea8:	push	{r4, sl, fp, lr}
   1ceac:	add	fp, sp, #8
   1ceb0:	mov	r4, r0
   1ceb4:	bl	1cbb4 <__assert_fail@plt+0xb69c>
   1ceb8:	ldr	r0, [r4, #132]	; 0x84
   1cebc:	bl	22b58 <__assert_fail@plt+0x11640>
   1cec0:	ldr	r0, [r4, #116]	; 0x74
   1cec4:	pop	{r4, sl, fp, lr}
   1cec8:	b	22b58 <__assert_fail@plt+0x11640>
   1cecc:	push	{r4, r5, fp, lr}
   1ced0:	add	fp, sp, #8
   1ced4:	mov	r4, r0
   1ced8:	cmn	r1, #1
   1cedc:	ble	1cf14 <__assert_fail@plt+0xb9fc>
   1cee0:	ldr	r0, [r4, #48]	; 0x30
   1cee4:	cmp	r0, r1
   1cee8:	beq	1cf70 <__assert_fail@plt+0xba58>
   1ceec:	ldr	r0, [r4, #80]	; 0x50
   1cef0:	cmp	r0, #2
   1cef4:	blt	1cf1c <__assert_fail@plt+0xba04>
   1cef8:	ldr	r0, [r4, #8]
   1cefc:	ldr	r5, [r0, r1, lsl #2]
   1cf00:	cmn	r5, #1
   1cf04:	bne	1cf44 <__assert_fail@plt+0xba2c>
   1cf08:	sub	r1, r1, #1
   1cf0c:	cmn	r1, #1
   1cf10:	bne	1cefc <__assert_fail@plt+0xb9e4>
   1cf14:	ldr	r0, [r4, #60]	; 0x3c
   1cf18:	pop	{r4, r5, fp, pc}
   1cf1c:	ldr	r2, [r4, #4]
   1cf20:	ldr	r0, [r4, #68]	; 0x44
   1cf24:	ldrb	r5, [r2, r1]
   1cf28:	mov	r1, r5
   1cf2c:	bl	1d048 <__assert_fail@plt+0xbb30>
   1cf30:	mov	r1, r0
   1cf34:	mov	r0, #1
   1cf38:	cmp	r1, #0
   1cf3c:	beq	1cf50 <__assert_fail@plt+0xba38>
   1cf40:	b	1cf6c <__assert_fail@plt+0xba54>
   1cf44:	ldrb	r0, [r4, #78]	; 0x4e
   1cf48:	cmp	r0, #0
   1cf4c:	bne	1cf7c <__assert_fail@plt+0xba64>
   1cf50:	mov	r0, #0
   1cf54:	cmp	r5, #10
   1cf58:	popne	{r4, r5, fp, pc}
   1cf5c:	ldrb	r0, [r4, #77]	; 0x4d
   1cf60:	cmp	r0, #0
   1cf64:	movwne	r0, #1
   1cf68:	lsl	r0, r0, #1
   1cf6c:	pop	{r4, r5, fp, pc}
   1cf70:	and	r0, r2, #2
   1cf74:	eor	r0, r0, #10
   1cf78:	pop	{r4, r5, fp, pc}
   1cf7c:	mov	r0, r5
   1cf80:	bl	11410 <iswalnum@plt>
   1cf84:	mov	r1, r0
   1cf88:	mov	r0, #1
   1cf8c:	cmp	r5, #95	; 0x5f
   1cf90:	bne	1cf38 <__assert_fail@plt+0xba20>
   1cf94:	b	1cf6c <__assert_fail@plt+0xba54>
   1cf98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf9c:	add	fp, sp, #28
   1cfa0:	sub	sp, sp, #12
   1cfa4:	str	r2, [sp, #4]
   1cfa8:	mov	sl, r1
   1cfac:	mov	r7, r0
   1cfb0:	ldr	r0, [r0, #24]
   1cfb4:	ldr	r1, [r7, #32]
   1cfb8:	add	r5, r1, r0
   1cfbc:	mvn	r1, #0
   1cfc0:	cmp	r5, sl
   1cfc4:	bge	1d034 <__assert_fail@plt+0xbb1c>
   1cfc8:	add	r4, r7, #16
   1cfcc:	ldr	r0, [r7]
   1cfd0:	ldr	r2, [r7, #44]	; 0x2c
   1cfd4:	add	r1, r0, r5
   1cfd8:	sub	r6, r2, r5
   1cfdc:	ldm	r4, {r8, r9}
   1cfe0:	add	r0, sp, #8
   1cfe4:	mov	r2, r6
   1cfe8:	mov	r3, r4
   1cfec:	bl	22c08 <__assert_fail@plt+0x116f0>
   1cff0:	sub	r1, r0, #1
   1cff4:	cmn	r1, #3
   1cff8:	bcs	1d010 <__assert_fail@plt+0xbaf8>
   1cffc:	ldr	r1, [sp, #8]
   1d000:	add	r5, r0, r5
   1d004:	cmp	r5, sl
   1d008:	blt	1cfcc <__assert_fail@plt+0xbab4>
   1d00c:	b	1d034 <__assert_fail@plt+0xbb1c>
   1d010:	mov	r1, #0
   1d014:	cmp	r6, #0
   1d018:	cmpne	r0, #0
   1d01c:	beq	1d028 <__assert_fail@plt+0xbb10>
   1d020:	ldr	r0, [r7]
   1d024:	ldrb	r1, [r0, r5]
   1d028:	stm	r4, {r8, r9}
   1d02c:	mov	r0, #1
   1d030:	b	1d000 <__assert_fail@plt+0xbae8>
   1d034:	ldr	r0, [sp, #4]
   1d038:	str	r1, [r0]
   1d03c:	mov	r0, r5
   1d040:	sub	sp, fp, #28
   1d044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d048:	asr	r2, r1, #31
   1d04c:	add	r2, r1, r2, lsr #27
   1d050:	asr	r2, r2, #5
   1d054:	ldr	r0, [r0, r2, lsl #2]
   1d058:	and	r1, r1, #31
   1d05c:	mov	r2, #1
   1d060:	and	r0, r0, r2, lsl r1
   1d064:	cmp	r0, #0
   1d068:	movwne	r0, #1
   1d06c:	bx	lr
   1d070:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d074:	add	fp, sp, #24
   1d078:	mov	r6, r0
   1d07c:	ldr	r0, [r1, #4]
   1d080:	cmp	r0, #1
   1d084:	blt	1d0fc <__assert_fail@plt+0xbbe4>
   1d088:	mov	r8, r2
   1d08c:	mov	r5, r1
   1d090:	ldr	r7, [r6, #84]	; 0x54
   1d094:	mov	r4, #0
   1d098:	mov	r9, #1
   1d09c:	b	1d0b0 <__assert_fail@plt+0xbb98>
   1d0a0:	add	r4, r4, #1
   1d0a4:	ldr	r0, [r5, #4]
   1d0a8:	cmp	r4, r0
   1d0ac:	bge	1d0fc <__assert_fail@plt+0xbbe4>
   1d0b0:	ldr	r0, [r5, #8]
   1d0b4:	ldr	r1, [r0, r4, lsl #2]
   1d0b8:	ldr	r0, [r7]
   1d0bc:	add	r2, r0, r1, lsl #3
   1d0c0:	ldrb	r2, [r2, #4]
   1d0c4:	cmp	r2, #8
   1d0c8:	bne	1d0a0 <__assert_fail@plt+0xbb88>
   1d0cc:	ldr	r0, [r0, r1, lsl #3]
   1d0d0:	cmp	r0, #31
   1d0d4:	bgt	1d0a0 <__assert_fail@plt+0xbb88>
   1d0d8:	ldr	r2, [r7, #80]	; 0x50
   1d0dc:	tst	r2, r9, lsl r0
   1d0e0:	beq	1d0a0 <__assert_fail@plt+0xbb88>
   1d0e4:	mov	r0, r6
   1d0e8:	mov	r2, r8
   1d0ec:	bl	1d754 <__assert_fail@plt+0xc23c>
   1d0f0:	cmp	r0, #0
   1d0f4:	beq	1d0a0 <__assert_fail@plt+0xbb88>
   1d0f8:	b	1d100 <__assert_fail@plt+0xbbe8>
   1d0fc:	mov	r0, #0
   1d100:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d108:	add	fp, sp, #28
   1d10c:	sub	sp, sp, #52	; 0x34
   1d110:	mov	r5, r0
   1d114:	ldr	r0, [r1, #4]
   1d118:	cmp	r0, #1
   1d11c:	blt	1d3f0 <__assert_fail@plt+0xbed8>
   1d120:	mov	r8, r1
   1d124:	ldr	r9, [r5, #84]	; 0x54
   1d128:	ldr	r0, [r5, #40]	; 0x28
   1d12c:	str	r0, [sp, #32]
   1d130:	mov	sl, #0
   1d134:	str	r1, [sp, #4]
   1d138:	str	r9, [sp, #16]
   1d13c:	b	1d150 <__assert_fail@plt+0xbc38>
   1d140:	ldr	r0, [r8, #4]
   1d144:	add	sl, sl, #1
   1d148:	cmp	sl, r0
   1d14c:	bge	1d3f0 <__assert_fail@plt+0xbed8>
   1d150:	ldr	r0, [r8, #8]
   1d154:	ldr	r4, [r0, sl, lsl #2]
   1d158:	ldr	r0, [r9]
   1d15c:	add	r0, r0, r4, lsl #3
   1d160:	ldr	r6, [r0, #4]
   1d164:	uxtb	r0, r6
   1d168:	cmp	r0, #4
   1d16c:	bne	1d140 <__assert_fail@plt+0xbc28>
   1d170:	movw	r0, #65280	; 0xff00
   1d174:	movt	r0, #3
   1d178:	tst	r6, r0
   1d17c:	beq	1d1d0 <__assert_fail@plt+0xbcb8>
   1d180:	ldr	r2, [r5, #88]	; 0x58
   1d184:	mov	r0, r5
   1d188:	ldr	r1, [sp, #32]
   1d18c:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1d190:	and	r1, r0, #1
   1d194:	tst	r6, #1024	; 0x400
   1d198:	beq	1d1a4 <__assert_fail@plt+0xbc8c>
   1d19c:	cmp	r1, #0
   1d1a0:	beq	1d140 <__assert_fail@plt+0xbc28>
   1d1a4:	tst	r6, #2048	; 0x800
   1d1a8:	cmpne	r1, #0
   1d1ac:	bne	1d140 <__assert_fail@plt+0xbc28>
   1d1b0:	tst	r6, #8192	; 0x2000
   1d1b4:	beq	1d1c0 <__assert_fail@plt+0xbca8>
   1d1b8:	ands	r1, r0, #2
   1d1bc:	beq	1d140 <__assert_fail@plt+0xbc28>
   1d1c0:	tst	r6, #32768	; 0x8000
   1d1c4:	beq	1d1d0 <__assert_fail@plt+0xbcb8>
   1d1c8:	ands	r0, r0, #8
   1d1cc:	beq	1d140 <__assert_fail@plt+0xbc28>
   1d1d0:	ldr	r6, [r5, #108]	; 0x6c
   1d1d4:	mov	r0, r5
   1d1d8:	mov	r1, r4
   1d1dc:	ldr	r2, [sp, #32]
   1d1e0:	bl	1d7e0 <__assert_fail@plt+0xc2c8>
   1d1e4:	str	r0, [fp, #-32]	; 0xffffffe0
   1d1e8:	cmp	r0, #0
   1d1ec:	bne	1d3f8 <__assert_fail@plt+0xbee0>
   1d1f0:	ldr	r0, [r5, #108]	; 0x6c
   1d1f4:	cmp	r6, r0
   1d1f8:	bge	1d140 <__assert_fail@plt+0xbc28>
   1d1fc:	add	r0, r6, r6, lsl #1
   1d200:	lsl	r7, r0, #3
   1d204:	str	r4, [sp, #8]
   1d208:	b	1d220 <__assert_fail@plt+0xbd08>
   1d20c:	add	r7, r7, #24
   1d210:	add	r6, r6, #1
   1d214:	ldr	r0, [r5, #108]	; 0x6c
   1d218:	cmp	r6, r0
   1d21c:	bge	1d140 <__assert_fail@plt+0xbc28>
   1d220:	ldr	r0, [r5, #116]	; 0x74
   1d224:	ldr	r1, [r0, r7]
   1d228:	cmp	r1, r4
   1d22c:	bne	1d20c <__assert_fail@plt+0xbcf4>
   1d230:	add	r0, r0, r7
   1d234:	ldr	r1, [r0, #4]
   1d238:	ldr	r2, [sp, #32]
   1d23c:	cmp	r1, r2
   1d240:	bne	1d20c <__assert_fail@plt+0xbcf4>
   1d244:	ldr	r2, [r0, #8]
   1d248:	ldr	r3, [r0, #12]
   1d24c:	ldr	r0, [r9, #24]
   1d250:	str	r0, [sp, #28]
   1d254:	cmp	r3, r2
   1d258:	bne	1d270 <__assert_fail@plt+0xbd58>
   1d25c:	ldr	r0, [r9, #20]
   1d260:	add	r1, r4, r4, lsl #1
   1d264:	add	r0, r0, r1, lsl #2
   1d268:	ldr	r0, [r0, #8]
   1d26c:	b	1d278 <__assert_fail@plt+0xbd60>
   1d270:	ldr	r0, [r9, #12]
   1d274:	add	r0, r0, r4, lsl #2
   1d278:	ldr	r0, [r0]
   1d27c:	add	r9, r0, r0, lsl #1
   1d280:	ldr	r4, [sp, #32]
   1d284:	str	r3, [sp, #20]
   1d288:	add	r0, r3, r4
   1d28c:	str	r2, [sp, #24]
   1d290:	sub	r8, r0, r2
   1d294:	sub	r1, r8, #1
   1d298:	ldr	r2, [r5, #88]	; 0x58
   1d29c:	mov	r0, r5
   1d2a0:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1d2a4:	mov	r3, r0
   1d2a8:	ldr	r0, [r5, #100]	; 0x64
   1d2ac:	ldr	r1, [r0, r4, lsl #2]
   1d2b0:	ldr	r0, [r0, r8, lsl #2]
   1d2b4:	cmp	r1, #0
   1d2b8:	beq	1d2c4 <__assert_fail@plt+0xbdac>
   1d2bc:	ldr	r1, [r1, #8]
   1d2c0:	b	1d2c8 <__assert_fail@plt+0xbdb0>
   1d2c4:	mov	r1, #0
   1d2c8:	str	r1, [sp, #12]
   1d2cc:	add	r4, sp, #36	; 0x24
   1d2d0:	ldr	r1, [sp, #28]
   1d2d4:	add	r2, r1, r9, lsl #2
   1d2d8:	cmp	r0, #0
   1d2dc:	str	r2, [sp, #28]
   1d2e0:	beq	1d350 <__assert_fail@plt+0xbe38>
   1d2e4:	mov	r9, r3
   1d2e8:	ldr	r1, [r0, #40]	; 0x28
   1d2ec:	mov	r0, r4
   1d2f0:	bl	1db88 <__assert_fail@plt+0xc670>
   1d2f4:	str	r0, [fp, #-32]	; 0xffffffe0
   1d2f8:	cmp	r0, #0
   1d2fc:	ldr	r1, [sp, #16]
   1d300:	bne	1d404 <__assert_fail@plt+0xbeec>
   1d304:	sub	r0, fp, #32
   1d308:	mov	r2, r4
   1d30c:	mov	r3, r9
   1d310:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1d314:	ldr	r1, [r5, #100]	; 0x64
   1d318:	str	r0, [r1, r8, lsl #2]
   1d31c:	ldr	r0, [sp, #44]	; 0x2c
   1d320:	bl	22b58 <__assert_fail@plt+0x11640>
   1d324:	ldr	r0, [r5, #100]	; 0x64
   1d328:	ldr	r0, [r0, r8, lsl #2]
   1d32c:	cmp	r0, #0
   1d330:	bne	1d340 <__assert_fail@plt+0xbe28>
   1d334:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d338:	cmp	r0, #0
   1d33c:	bne	1d3f8 <__assert_fail@plt+0xbee0>
   1d340:	ldr	r8, [sp, #4]
   1d344:	ldr	r4, [sp, #8]
   1d348:	ldr	r9, [sp, #16]
   1d34c:	b	1d38c <__assert_fail@plt+0xbe74>
   1d350:	sub	r0, fp, #32
   1d354:	ldr	r9, [sp, #16]
   1d358:	mov	r1, r9
   1d35c:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1d360:	ldr	r1, [r5, #100]	; 0x64
   1d364:	str	r0, [r1, r8, lsl #2]
   1d368:	ldr	r0, [r5, #100]	; 0x64
   1d36c:	ldr	r0, [r0, r8, lsl #2]
   1d370:	cmp	r0, #0
   1d374:	ldr	r8, [sp, #4]
   1d378:	ldr	r4, [sp, #8]
   1d37c:	bne	1d38c <__assert_fail@plt+0xbe74>
   1d380:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d384:	cmp	r0, #0
   1d388:	bne	1d3f8 <__assert_fail@plt+0xbee0>
   1d38c:	ldr	r0, [sp, #24]
   1d390:	ldr	r1, [sp, #20]
   1d394:	cmp	r1, r0
   1d398:	bne	1d20c <__assert_fail@plt+0xbcf4>
   1d39c:	ldr	r0, [r5, #100]	; 0x64
   1d3a0:	ldr	r1, [sp, #32]
   1d3a4:	ldr	r0, [r0, r1, lsl #2]
   1d3a8:	ldr	r0, [r0, #8]
   1d3ac:	ldr	r1, [sp, #12]
   1d3b0:	cmp	r0, r1
   1d3b4:	ble	1d20c <__assert_fail@plt+0xbcf4>
   1d3b8:	mov	r0, r5
   1d3bc:	ldr	r1, [sp, #28]
   1d3c0:	ldr	r2, [sp, #32]
   1d3c4:	bl	1d070 <__assert_fail@plt+0xbb58>
   1d3c8:	str	r0, [fp, #-32]	; 0xffffffe0
   1d3cc:	cmp	r0, #0
   1d3d0:	bne	1d3f8 <__assert_fail@plt+0xbee0>
   1d3d4:	mov	r0, r5
   1d3d8:	ldr	r1, [sp, #28]
   1d3dc:	bl	1d104 <__assert_fail@plt+0xbbec>
   1d3e0:	str	r0, [fp, #-32]	; 0xffffffe0
   1d3e4:	cmp	r0, #0
   1d3e8:	beq	1d20c <__assert_fail@plt+0xbcf4>
   1d3ec:	b	1d3f8 <__assert_fail@plt+0xbee0>
   1d3f0:	mov	r0, #0
   1d3f4:	str	r0, [fp, #-32]	; 0xffffffe0
   1d3f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d3fc:	sub	sp, fp, #28
   1d400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d404:	ldr	r0, [sp, #44]	; 0x2c
   1d408:	bl	22b58 <__assert_fail@plt+0x11640>
   1d40c:	b	1d3f8 <__assert_fail@plt+0xbee0>
   1d410:	push	{r4, r5, fp, lr}
   1d414:	add	fp, sp, #8
   1d418:	mov	r4, r0
   1d41c:	ldr	r0, [r0, #36]	; 0x24
   1d420:	mov	r5, #12
   1d424:	cmn	r0, #-536870910	; 0xe0000002
   1d428:	bhi	1d4dc <__assert_fail@plt+0xbfc4>
   1d42c:	ldr	r2, [r4, #48]	; 0x30
   1d430:	cmp	r2, r0, lsl #1
   1d434:	lslge	r2, r0, #1
   1d438:	cmp	r2, r1
   1d43c:	movle	r2, r1
   1d440:	mov	r0, r4
   1d444:	mov	r1, r2
   1d448:	bl	16bc8 <__assert_fail@plt+0x56b0>
   1d44c:	cmp	r0, #0
   1d450:	bne	1d4e0 <__assert_fail@plt+0xbfc8>
   1d454:	ldr	r0, [r4, #100]	; 0x64
   1d458:	cmp	r0, #0
   1d45c:	beq	1d47c <__assert_fail@plt+0xbf64>
   1d460:	ldr	r1, [r4, #36]	; 0x24
   1d464:	mov	r2, #4
   1d468:	add	r1, r2, r1, lsl #2
   1d46c:	bl	22698 <__assert_fail@plt+0x11180>
   1d470:	cmp	r0, #0
   1d474:	beq	1d4dc <__assert_fail@plt+0xbfc4>
   1d478:	str	r0, [r4, #100]	; 0x64
   1d47c:	ldr	r0, [r4, #80]	; 0x50
   1d480:	ldrb	r1, [r4, #72]	; 0x48
   1d484:	cmp	r1, #0
   1d488:	beq	1d4a8 <__assert_fail@plt+0xbf90>
   1d48c:	cmp	r0, #2
   1d490:	blt	1d4bc <__assert_fail@plt+0xbfa4>
   1d494:	mov	r0, r4
   1d498:	bl	16c6c <__assert_fail@plt+0x5754>
   1d49c:	cmp	r0, #0
   1d4a0:	beq	1d4d8 <__assert_fail@plt+0xbfc0>
   1d4a4:	pop	{r4, r5, fp, pc}
   1d4a8:	cmp	r0, #2
   1d4ac:	blt	1d4c8 <__assert_fail@plt+0xbfb0>
   1d4b0:	mov	r0, r4
   1d4b4:	bl	1727c <__assert_fail@plt+0x5d64>
   1d4b8:	b	1d4d8 <__assert_fail@plt+0xbfc0>
   1d4bc:	mov	r0, r4
   1d4c0:	bl	17208 <__assert_fail@plt+0x5cf0>
   1d4c4:	b	1d4d8 <__assert_fail@plt+0xbfc0>
   1d4c8:	ldr	r0, [r4, #64]	; 0x40
   1d4cc:	cmp	r0, #0
   1d4d0:	movne	r0, r4
   1d4d4:	blne	17438 <__assert_fail@plt+0x5f20>
   1d4d8:	mov	r5, #0
   1d4dc:	mov	r0, r5
   1d4e0:	pop	{r4, r5, fp, pc}
   1d4e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d4e8:	add	fp, sp, #24
   1d4ec:	mov	r6, r2
   1d4f0:	mov	r4, r1
   1d4f4:	mov	r5, r0
   1d4f8:	ldrb	r0, [r2, #52]	; 0x34
   1d4fc:	tst	r0, #32
   1d500:	bne	1d578 <__assert_fail@plt+0xc060>
   1d504:	ldr	r0, [r4, #4]
   1d508:	ldr	r1, [r4, #40]	; 0x28
   1d50c:	add	r2, r1, #1
   1d510:	str	r2, [r4, #40]	; 0x28
   1d514:	ldrb	r7, [r0, r1]
   1d518:	ldr	r0, [r6, #44]	; 0x2c
   1d51c:	cmp	r0, #0
   1d520:	ldrne	r0, [r0, r7, lsl #2]
   1d524:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d528:	ldr	r8, [r6, #48]	; 0x30
   1d52c:	cmp	r8, #0
   1d530:	bne	1d558 <__assert_fail@plt+0xc040>
   1d534:	ldr	r0, [r4, #84]	; 0x54
   1d538:	mov	r1, r6
   1d53c:	bl	1f37c <__assert_fail@plt+0xde64>
   1d540:	cmp	r0, #0
   1d544:	bne	1d518 <__assert_fail@plt+0xc000>
   1d548:	mov	r0, #12
   1d54c:	str	r0, [r5]
   1d550:	mov	r0, #0
   1d554:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d558:	ldr	r0, [r4, #40]	; 0x28
   1d55c:	ldr	r2, [r4, #88]	; 0x58
   1d560:	sub	r1, r0, #1
   1d564:	mov	r0, r4
   1d568:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1d56c:	bfi	r7, r0, #8, #1
   1d570:	ldr	r0, [r8, r7, lsl #2]
   1d574:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d578:	mov	r0, r4
   1d57c:	mov	r1, r6
   1d580:	bl	1f1ac <__assert_fail@plt+0xdc94>
   1d584:	str	r0, [r5]
   1d588:	cmp	r0, #0
   1d58c:	beq	1d504 <__assert_fail@plt+0xbfec>
   1d590:	b	1d550 <__assert_fail@plt+0xc038>
   1d594:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d598:	add	fp, sp, #24
   1d59c:	sub	sp, sp, #16
   1d5a0:	mov	r7, r2
   1d5a4:	mov	r4, r1
   1d5a8:	mov	r8, r0
   1d5ac:	ldr	r5, [r1, #40]	; 0x28
   1d5b0:	ldr	r6, [r1, #84]	; 0x54
   1d5b4:	ldr	r0, [r1, #100]	; 0x64
   1d5b8:	ldr	r1, [r1, #104]	; 0x68
   1d5bc:	cmp	r5, r1
   1d5c0:	ble	1d5d0 <__assert_fail@plt+0xc0b8>
   1d5c4:	str	r7, [r0, r5, lsl #2]
   1d5c8:	str	r5, [r4, #104]	; 0x68
   1d5cc:	b	1d66c <__assert_fail@plt+0xc154>
   1d5d0:	ldr	r1, [r0, r5, lsl #2]
   1d5d4:	cmp	r1, #0
   1d5d8:	beq	1d60c <__assert_fail@plt+0xc0f4>
   1d5dc:	ldr	r0, [r0, r5, lsl #2]
   1d5e0:	ldr	r2, [r0, #40]	; 0x28
   1d5e4:	cmp	r7, #0
   1d5e8:	beq	1d614 <__assert_fail@plt+0xc0fc>
   1d5ec:	ldr	r9, [r7, #40]	; 0x28
   1d5f0:	mov	r0, sp
   1d5f4:	mov	r1, r9
   1d5f8:	bl	1db88 <__assert_fail@plt+0xc670>
   1d5fc:	str	r0, [r8]
   1d600:	cmp	r0, #0
   1d604:	beq	1d628 <__assert_fail@plt+0xc110>
   1d608:	b	1d6d8 <__assert_fail@plt+0xc1c0>
   1d60c:	str	r7, [r0, r5, lsl #2]
   1d610:	b	1d66c <__assert_fail@plt+0xc154>
   1d614:	vldr	d16, [r2]
   1d618:	ldr	r0, [r2, #8]
   1d61c:	str	r0, [sp, #8]
   1d620:	vstr	d16, [sp]
   1d624:	mov	r9, #0
   1d628:	ldr	r0, [r4, #40]	; 0x28
   1d62c:	ldr	r2, [r4, #88]	; 0x58
   1d630:	sub	r1, r0, #1
   1d634:	mov	r0, r4
   1d638:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1d63c:	mov	r3, r0
   1d640:	mov	r2, sp
   1d644:	mov	r0, r8
   1d648:	mov	r1, r6
   1d64c:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1d650:	mov	r7, r0
   1d654:	ldr	r0, [r4, #100]	; 0x64
   1d658:	str	r7, [r0, r5, lsl #2]
   1d65c:	cmp	r9, #0
   1d660:	beq	1d66c <__assert_fail@plt+0xc154>
   1d664:	ldr	r0, [sp, #8]
   1d668:	bl	22b58 <__assert_fail@plt+0x11640>
   1d66c:	cmp	r7, #0
   1d670:	ldrne	r0, [r6, #76]	; 0x4c
   1d674:	cmpne	r0, #0
   1d678:	bne	1d688 <__assert_fail@plt+0xc170>
   1d67c:	mov	r0, r7
   1d680:	sub	sp, fp, #24
   1d684:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d688:	add	r6, r7, #4
   1d68c:	mov	r0, r4
   1d690:	mov	r1, r6
   1d694:	mov	r2, r5
   1d698:	bl	1d070 <__assert_fail@plt+0xbb58>
   1d69c:	str	r0, [r8]
   1d6a0:	cmp	r0, #0
   1d6a4:	bne	1d6d8 <__assert_fail@plt+0xc1c0>
   1d6a8:	ldrb	r0, [r7, #52]	; 0x34
   1d6ac:	tst	r0, #64	; 0x40
   1d6b0:	beq	1d67c <__assert_fail@plt+0xc164>
   1d6b4:	mov	r0, r4
   1d6b8:	mov	r1, r6
   1d6bc:	bl	1d104 <__assert_fail@plt+0xbbec>
   1d6c0:	str	r0, [r8]
   1d6c4:	cmp	r0, #0
   1d6c8:	mov	r7, #0
   1d6cc:	ldreq	r0, [r4, #100]	; 0x64
   1d6d0:	ldreq	r7, [r0, r5, lsl #2]
   1d6d4:	b	1d67c <__assert_fail@plt+0xc164>
   1d6d8:	mov	r7, #0
   1d6dc:	b	1d67c <__assert_fail@plt+0xc164>
   1d6e0:	push	{r4, r5, r6, sl, fp, lr}
   1d6e4:	add	fp, sp, #16
   1d6e8:	mov	r4, r1
   1d6ec:	mov	r6, r0
   1d6f0:	ldr	r1, [r4, #40]	; 0x28
   1d6f4:	ldr	r0, [r4, #104]	; 0x68
   1d6f8:	cmp	r1, r0
   1d6fc:	bge	1d74c <__assert_fail@plt+0xc234>
   1d700:	add	r2, r1, #1
   1d704:	ldr	r3, [r4, #40]	; 0x28
   1d708:	ldr	r5, [r4, #100]	; 0x64
   1d70c:	add	r3, r3, #1
   1d710:	str	r3, [r4, #40]	; 0x28
   1d714:	add	r1, r5, r1, lsl #2
   1d718:	ldr	r1, [r1, #4]
   1d71c:	cmp	r1, #0
   1d720:	mov	r1, r2
   1d724:	beq	1d6f8 <__assert_fail@plt+0xc1e0>
   1d728:	mov	r0, r6
   1d72c:	mov	r1, r4
   1d730:	mov	r2, #0
   1d734:	bl	1d594 <__assert_fail@plt+0xc07c>
   1d738:	cmp	r0, #0
   1d73c:	ldreq	r1, [r6]
   1d740:	cmpeq	r1, #0
   1d744:	beq	1d6f0 <__assert_fail@plt+0xc1d8>
   1d748:	pop	{r4, r5, r6, sl, fp, pc}
   1d74c:	mov	r0, #0
   1d750:	pop	{r4, r5, r6, sl, fp, pc}
   1d754:	push	{r4, r5, r6, r7, fp, lr}
   1d758:	add	fp, sp, #16
   1d75c:	mov	r4, r2
   1d760:	mov	r6, r1
   1d764:	mov	r5, r0
   1d768:	ldr	r0, [r0, #124]	; 0x7c
   1d76c:	ldr	r7, [r5, #128]	; 0x80
   1d770:	cmp	r0, r7
   1d774:	beq	1d7bc <__assert_fail@plt+0xc2a4>
   1d778:	mov	r0, #1
   1d77c:	mov	r1, #24
   1d780:	bl	22614 <__assert_fail@plt+0x110fc>
   1d784:	ldr	r1, [r5, #124]	; 0x7c
   1d788:	ldr	r2, [r5, #132]	; 0x84
   1d78c:	str	r0, [r2, r1, lsl #2]
   1d790:	ldr	r0, [r5, #132]	; 0x84
   1d794:	ldr	r0, [r0, r1, lsl #2]
   1d798:	cmp	r0, #0
   1d79c:	strne	r6, [r0, #4]
   1d7a0:	addne	r1, r1, #1
   1d7a4:	strne	r1, [r5, #124]	; 0x7c
   1d7a8:	strne	r4, [r0]
   1d7ac:	movne	r0, #0
   1d7b0:	popne	{r4, r5, r6, r7, fp, pc}
   1d7b4:	mov	r0, #12
   1d7b8:	pop	{r4, r5, r6, r7, fp, pc}
   1d7bc:	ldr	r0, [r5, #132]	; 0x84
   1d7c0:	lsl	r1, r7, #3
   1d7c4:	bl	22698 <__assert_fail@plt+0x11180>
   1d7c8:	cmp	r0, #0
   1d7cc:	beq	1d7b4 <__assert_fail@plt+0xc29c>
   1d7d0:	lsl	r1, r7, #1
   1d7d4:	str	r1, [r5, #128]	; 0x80
   1d7d8:	str	r0, [r5, #132]	; 0x84
   1d7dc:	b	1d778 <__assert_fail@plt+0xc260>
   1d7e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7e4:	add	fp, sp, #28
   1d7e8:	sub	sp, sp, #52	; 0x34
   1d7ec:	str	r1, [sp, #36]	; 0x24
   1d7f0:	mov	r4, r0
   1d7f4:	ldr	r5, [r0, #4]
   1d7f8:	ldr	r6, [r0, #84]	; 0x54
   1d7fc:	str	r2, [fp, #-36]	; 0xffffffdc
   1d800:	mov	r1, r2
   1d804:	bl	1ddbc <__assert_fail@plt+0xc8a4>
   1d808:	cmn	r0, #1
   1d80c:	beq	1d83c <__assert_fail@plt+0xc324>
   1d810:	ldr	r1, [r4, #116]	; 0x74
   1d814:	add	r0, r0, r0, lsl #1
   1d818:	add	r0, r1, r0, lsl #3
   1d81c:	ldr	r2, [sp, #36]	; 0x24
   1d820:	ldr	r1, [r0]
   1d824:	cmp	r1, r2
   1d828:	beq	1db68 <__assert_fail@plt+0xc650>
   1d82c:	ldrb	r1, [r0, #20]
   1d830:	add	r0, r0, #24
   1d834:	cmp	r1, #0
   1d838:	bne	1d820 <__assert_fail@plt+0xc308>
   1d83c:	ldr	r0, [r4, #124]	; 0x7c
   1d840:	cmp	r0, #1
   1d844:	blt	1db68 <__assert_fail@plt+0xc650>
   1d848:	mov	ip, r6
   1d84c:	ldr	r0, [r6]
   1d850:	ldr	r1, [sp, #36]	; 0x24
   1d854:	ldr	r2, [r0, r1, lsl #3]
   1d858:	mov	r6, #0
   1d85c:	str	r4, [sp, #28]
   1d860:	mov	r3, r5
   1d864:	str	ip, [sp, #24]
   1d868:	str	r2, [sp, #20]
   1d86c:	b	1d88c <__assert_fail@plt+0xc374>
   1d870:	ldr	ip, [sp, #24]
   1d874:	ldr	r2, [sp, #20]
   1d878:	ldr	r6, [sp, #16]
   1d87c:	add	r6, r6, #1
   1d880:	ldr	r0, [r4, #124]	; 0x7c
   1d884:	cmp	r6, r0
   1d888:	bge	1db68 <__assert_fail@plt+0xc650>
   1d88c:	ldr	r0, [r4, #132]	; 0x84
   1d890:	ldr	r7, [r0, r6, lsl #2]
   1d894:	ldr	r0, [r7, #4]
   1d898:	ldr	r1, [ip]
   1d89c:	ldr	r0, [r1, r0, lsl #3]
   1d8a0:	cmp	r0, r2
   1d8a4:	str	r6, [sp, #16]
   1d8a8:	bne	1d878 <__assert_fail@plt+0xc360>
   1d8ac:	ldr	r5, [r7]
   1d8b0:	ldr	r0, [r7, #16]
   1d8b4:	cmp	r0, #1
   1d8b8:	str	r7, [sp, #32]
   1d8bc:	mov	sl, #0
   1d8c0:	blt	1d998 <__assert_fail@plt+0xc480>
   1d8c4:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1d8c8:	mov	r9, r5
   1d8cc:	ldr	r0, [r7, #20]
   1d8d0:	ldr	r2, [r0, sl, lsl #2]
   1d8d4:	ldr	r0, [r2, #4]
   1d8d8:	str	r0, [fp, #-32]	; 0xffffffe0
   1d8dc:	sub	r5, r0, r9
   1d8e0:	cmp	r5, #1
   1d8e4:	blt	1d928 <__assert_fail@plt+0xc410>
   1d8e8:	add	r1, r5, r6
   1d8ec:	ldr	r0, [r4, #28]
   1d8f0:	cmp	r1, r0
   1d8f4:	str	r2, [sp, #40]	; 0x28
   1d8f8:	bgt	1d96c <__assert_fail@plt+0xc454>
   1d8fc:	add	r0, r3, r6
   1d900:	add	r1, r3, r9
   1d904:	mov	r8, r6
   1d908:	mov	r2, r5
   1d90c:	mov	r7, r3
   1d910:	bl	113e0 <bcmp@plt>
   1d914:	mov	r3, r7
   1d918:	cmp	r0, #0
   1d91c:	ldr	r7, [sp, #32]
   1d920:	ldr	r2, [sp, #40]	; 0x28
   1d924:	bne	1d9a0 <__assert_fail@plt+0xc488>
   1d928:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d92c:	str	r0, [sp]
   1d930:	mov	r0, r4
   1d934:	mov	r1, r7
   1d938:	ldr	r3, [sp, #36]	; 0x24
   1d93c:	bl	1dedc <__assert_fail@plt+0xc9c4>
   1d940:	cmp	r0, #1
   1d944:	bhi	1db78 <__assert_fail@plt+0xc660>
   1d948:	add	r6, r5, r6
   1d94c:	add	sl, sl, #1
   1d950:	ldr	r3, [r4, #4]
   1d954:	ldr	r0, [r7, #16]
   1d958:	cmp	sl, r0
   1d95c:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1d960:	mov	r9, r5
   1d964:	blt	1d8cc <__assert_fail@plt+0xc3b4>
   1d968:	b	1d9a4 <__assert_fail@plt+0xc48c>
   1d96c:	ldr	r0, [r4, #48]	; 0x30
   1d970:	cmp	r1, r0
   1d974:	bgt	1d9a0 <__assert_fail@plt+0xc488>
   1d978:	mov	r7, r6
   1d97c:	mov	r0, r4
   1d980:	bl	1de48 <__assert_fail@plt+0xc930>
   1d984:	cmp	r0, #0
   1d988:	bne	1db78 <__assert_fail@plt+0xc660>
   1d98c:	ldr	r3, [r4, #4]
   1d990:	mov	r6, r7
   1d994:	b	1d8fc <__assert_fail@plt+0xc3e4>
   1d998:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1d99c:	b	1d9a4 <__assert_fail@plt+0xc48c>
   1d9a0:	mov	r5, r9
   1d9a4:	ldr	r0, [r7, #16]
   1d9a8:	cmp	sl, r0
   1d9ac:	blt	1d870 <__assert_fail@plt+0xc358>
   1d9b0:	cmp	sl, #0
   1d9b4:	addne	r5, r5, #1
   1d9b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d9bc:	cmp	r5, r0
   1d9c0:	bgt	1d870 <__assert_fail@plt+0xc358>
   1d9c4:	ldr	ip, [sp, #24]
   1d9c8:	ldr	r2, [sp, #20]
   1d9cc:	b	1d9fc <__assert_fail@plt+0xc4e4>
   1d9d0:	ldr	r7, [sp, #32]
   1d9d4:	mov	r3, sl
   1d9d8:	mov	r6, r9
   1d9dc:	ldr	ip, [sp, #24]
   1d9e0:	ldr	r2, [sp, #20]
   1d9e4:	add	r1, r5, #1
   1d9e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d9ec:	cmp	r5, r0
   1d9f0:	mov	r5, r1
   1d9f4:	ldr	r4, [sp, #28]
   1d9f8:	bge	1d878 <__assert_fail@plt+0xc360>
   1d9fc:	ldr	r0, [r7]
   1da00:	cmp	r5, r0
   1da04:	ble	1da2c <__assert_fail@plt+0xc514>
   1da08:	ldr	r0, [r4, #28]
   1da0c:	cmp	r6, r0
   1da10:	bge	1db2c <__assert_fail@plt+0xc614>
   1da14:	ldrb	r0, [r3, r6]
   1da18:	add	r1, r3, r5
   1da1c:	ldrb	r1, [r1, #-1]
   1da20:	cmp	r0, r1
   1da24:	bne	1d878 <__assert_fail@plt+0xc360>
   1da28:	add	r6, r6, #1
   1da2c:	ldr	r0, [r4, #100]	; 0x64
   1da30:	ldr	r0, [r0, r5, lsl #2]
   1da34:	cmp	r0, #0
   1da38:	beq	1d9e4 <__assert_fail@plt+0xc4cc>
   1da3c:	mov	r9, r6
   1da40:	mov	sl, r3
   1da44:	add	r1, r0, #4
   1da48:	mov	r0, ip
   1da4c:	mov	r3, #9
   1da50:	bl	1df74 <__assert_fail@plt+0xca5c>
   1da54:	cmn	r0, #1
   1da58:	beq	1d9d0 <__assert_fail@plt+0xc4b8>
   1da5c:	mov	r4, r0
   1da60:	ldr	r1, [sp, #32]
   1da64:	ldr	r0, [r1, #8]
   1da68:	cmp	r0, #0
   1da6c:	bne	1da98 <__assert_fail@plt+0xc580>
   1da70:	ldr	r0, [r1]
   1da74:	sub	r0, r5, r0
   1da78:	add	r1, r0, #1
   1da7c:	mov	r8, #12
   1da80:	mov	r0, #12
   1da84:	bl	22614 <__assert_fail@plt+0x110fc>
   1da88:	ldr	r1, [sp, #32]
   1da8c:	str	r0, [r1, #8]
   1da90:	cmp	r0, #0
   1da94:	beq	1db6c <__assert_fail@plt+0xc654>
   1da98:	ldr	r3, [r1]
   1da9c:	ldr	r2, [r1, #4]
   1daa0:	ldr	r1, [r1, #8]
   1daa4:	stm	sp, {r4, r5}
   1daa8:	mov	r0, #9
   1daac:	str	r0, [sp, #8]
   1dab0:	ldr	r0, [sp, #28]
   1dab4:	bl	1dfd4 <__assert_fail@plt+0xcabc>
   1dab8:	ldr	r7, [sp, #32]
   1dabc:	cmp	r0, #1
   1dac0:	mov	r3, sl
   1dac4:	mov	r6, r9
   1dac8:	ldr	ip, [sp, #24]
   1dacc:	ldr	r2, [sp, #20]
   1dad0:	beq	1d9e4 <__assert_fail@plt+0xc4cc>
   1dad4:	mov	r8, r0
   1dad8:	cmp	r0, #0
   1dadc:	bne	1db6c <__assert_fail@plt+0xc654>
   1dae0:	mov	r0, r7
   1dae4:	mov	r1, r4
   1dae8:	mov	r2, r5
   1daec:	bl	1e3b8 <__assert_fail@plt+0xcea0>
   1daf0:	cmp	r0, #0
   1daf4:	beq	1db80 <__assert_fail@plt+0xc668>
   1daf8:	mov	r2, r0
   1dafc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1db00:	str	r0, [sp]
   1db04:	ldr	r4, [sp, #28]
   1db08:	mov	r0, r4
   1db0c:	mov	r1, r7
   1db10:	ldr	r3, [sp, #36]	; 0x24
   1db14:	bl	1dedc <__assert_fail@plt+0xc9c4>
   1db18:	cmp	r0, #1
   1db1c:	bhi	1db78 <__assert_fail@plt+0xc660>
   1db20:	ldr	r3, [r4, #4]
   1db24:	ldr	r7, [sp, #32]
   1db28:	b	1d9d8 <__assert_fail@plt+0xc4c0>
   1db2c:	ldr	r0, [r4, #48]	; 0x30
   1db30:	cmp	r6, r0
   1db34:	bge	1d878 <__assert_fail@plt+0xc360>
   1db38:	mov	r9, r6
   1db3c:	add	r1, r6, #1
   1db40:	mov	r0, r4
   1db44:	bl	1d410 <__assert_fail@plt+0xbef8>
   1db48:	cmp	r0, #0
   1db4c:	bne	1db78 <__assert_fail@plt+0xc660>
   1db50:	ldr	r3, [r4, #4]
   1db54:	ldr	r7, [sp, #32]
   1db58:	mov	r6, r9
   1db5c:	ldr	ip, [sp, #24]
   1db60:	ldr	r2, [sp, #20]
   1db64:	b	1da14 <__assert_fail@plt+0xc4fc>
   1db68:	mov	r8, #0
   1db6c:	mov	r0, r8
   1db70:	sub	sp, fp, #28
   1db74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db78:	mov	r8, r0
   1db7c:	b	1db6c <__assert_fail@plt+0xc654>
   1db80:	mov	r8, #12
   1db84:	b	1db6c <__assert_fail@plt+0xc654>
   1db88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db8c:	add	fp, sp, #28
   1db90:	sub	sp, sp, #4
   1db94:	mov	sl, r2
   1db98:	mov	r8, r0
   1db9c:	cmp	r1, #0
   1dba0:	beq	1dcd4 <__assert_fail@plt+0xc7bc>
   1dba4:	mov	r6, r1
   1dba8:	ldr	r0, [r1, #4]
   1dbac:	cmp	sl, #0
   1dbb0:	beq	1dcc0 <__assert_fail@plt+0xc7a8>
   1dbb4:	cmp	r0, #1
   1dbb8:	blt	1dcc0 <__assert_fail@plt+0xc7a8>
   1dbbc:	ldr	r1, [sl, #4]
   1dbc0:	cmp	r1, #1
   1dbc4:	blt	1dcc0 <__assert_fail@plt+0xc7a8>
   1dbc8:	add	r0, r1, r0
   1dbcc:	str	r0, [r8]
   1dbd0:	lsl	r0, r0, #2
   1dbd4:	bl	22668 <__assert_fail@plt+0x11150>
   1dbd8:	str	r0, [r8, #8]
   1dbdc:	cmp	r0, #0
   1dbe0:	beq	1ddb0 <__assert_fail@plt+0xc898>
   1dbe4:	ldr	r2, [sl, #4]
   1dbe8:	mov	r4, #0
   1dbec:	cmp	r2, #0
   1dbf0:	mov	r0, #0
   1dbf4:	movwgt	r0, #1
   1dbf8:	ldr	r3, [r6, #4]
   1dbfc:	cmp	r3, #1
   1dc00:	blt	1dd14 <__assert_fail@plt+0xc7fc>
   1dc04:	mov	r9, #0
   1dc08:	cmp	r2, #1
   1dc0c:	blt	1dd24 <__assert_fail@plt+0xc80c>
   1dc10:	mov	ip, #0
   1dc14:	mov	r0, #0
   1dc18:	mov	r4, ip
   1dc1c:	mov	r7, r0
   1dc20:	ldr	r0, [sl, #8]
   1dc24:	ldr	r1, [r0, r4, lsl #2]
   1dc28:	ldr	r0, [r6, #8]
   1dc2c:	ldr	r5, [r0, r9, lsl #2]
   1dc30:	cmp	r5, r1
   1dc34:	ble	1dc74 <__assert_fail@plt+0xc75c>
   1dc38:	ldr	r0, [r8, #8]
   1dc3c:	str	r1, [r0, r7, lsl #2]
   1dc40:	ldr	r2, [sl, #4]
   1dc44:	add	r1, r4, #1
   1dc48:	cmp	r2, r1
   1dc4c:	mov	r0, #0
   1dc50:	movwgt	r0, #1
   1dc54:	ldr	r3, [r6, #4]
   1dc58:	cmp	r3, r9
   1dc5c:	ble	1dd50 <__assert_fail@plt+0xc838>
   1dc60:	add	r7, r7, #1
   1dc64:	cmp	r2, r1
   1dc68:	mov	r4, r1
   1dc6c:	bgt	1dc20 <__assert_fail@plt+0xc708>
   1dc70:	b	1dd28 <__assert_fail@plt+0xc810>
   1dc74:	ldr	r0, [r8, #8]
   1dc78:	str	r5, [r0, r7, lsl #2]
   1dc7c:	add	lr, r4, #1
   1dc80:	cmp	r5, r1
   1dc84:	mov	ip, r4
   1dc88:	moveq	ip, lr
   1dc8c:	ldr	r2, [sl, #4]
   1dc90:	cmp	r2, ip
   1dc94:	mov	r0, #0
   1dc98:	movwgt	r0, #1
   1dc9c:	add	r9, r9, #1
   1dca0:	ldr	r3, [r6, #4]
   1dca4:	cmp	r3, r9
   1dca8:	ble	1dd98 <__assert_fail@plt+0xc880>
   1dcac:	add	r0, r7, #1
   1dcb0:	cmp	r2, ip
   1dcb4:	bgt	1dc18 <__assert_fail@plt+0xc700>
   1dcb8:	add	r7, r7, #1
   1dcbc:	b	1dd28 <__assert_fail@plt+0xc810>
   1dcc0:	cmp	r0, #1
   1dcc4:	blt	1dcd4 <__assert_fail@plt+0xc7bc>
   1dcc8:	mov	r0, r8
   1dccc:	mov	r1, r6
   1dcd0:	b	1dcf0 <__assert_fail@plt+0xc7d8>
   1dcd4:	cmp	sl, #0
   1dcd8:	beq	1dcfc <__assert_fail@plt+0xc7e4>
   1dcdc:	ldr	r0, [sl, #4]
   1dce0:	cmp	r0, #1
   1dce4:	blt	1dcfc <__assert_fail@plt+0xc7e4>
   1dce8:	mov	r0, r8
   1dcec:	mov	r1, sl
   1dcf0:	sub	sp, fp, #28
   1dcf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcf8:	b	1b6c4 <__assert_fail@plt+0xa1ac>
   1dcfc:	mov	r0, #0
   1dd00:	str	r0, [r8]
   1dd04:	str	r0, [r8, #4]
   1dd08:	str	r0, [r8, #8]
   1dd0c:	sub	sp, fp, #28
   1dd10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd14:	mov	r6, #0
   1dd18:	cmp	r0, #0
   1dd1c:	bne	1dd60 <__assert_fail@plt+0xc848>
   1dd20:	b	1dd88 <__assert_fail@plt+0xc870>
   1dd24:	mov	r7, #0
   1dd28:	ldr	r0, [r8, #8]
   1dd2c:	add	r0, r0, r7, lsl #2
   1dd30:	ldr	r1, [r6, #8]
   1dd34:	add	r1, r1, r9, lsl #2
   1dd38:	sub	r2, r3, r9
   1dd3c:	lsl	r2, r2, #2
   1dd40:	bl	112a8 <memcpy@plt>
   1dd44:	sub	r0, r7, r9
   1dd48:	ldr	r1, [r6, #4]
   1dd4c:	b	1dd84 <__assert_fail@plt+0xc86c>
   1dd50:	add	r6, r7, #1
   1dd54:	add	r4, r4, #1
   1dd58:	cmp	r0, #0
   1dd5c:	beq	1dd88 <__assert_fail@plt+0xc870>
   1dd60:	ldr	r0, [r8, #8]
   1dd64:	add	r0, r0, r6, lsl #2
   1dd68:	ldr	r1, [sl, #8]
   1dd6c:	add	r1, r1, r4, lsl #2
   1dd70:	sub	r2, r2, r4
   1dd74:	lsl	r2, r2, #2
   1dd78:	bl	112a8 <memcpy@plt>
   1dd7c:	sub	r0, r6, r4
   1dd80:	ldr	r1, [sl, #4]
   1dd84:	add	r6, r0, r1
   1dd88:	str	r6, [r8, #4]
   1dd8c:	mov	r0, #0
   1dd90:	sub	sp, fp, #28
   1dd94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd98:	cmp	r5, r1
   1dd9c:	moveq	r4, lr
   1dda0:	add	r6, r7, #1
   1dda4:	cmp	r0, #0
   1dda8:	bne	1dd60 <__assert_fail@plt+0xc848>
   1ddac:	b	1dd88 <__assert_fail@plt+0xc870>
   1ddb0:	mov	r0, #12
   1ddb4:	sub	sp, fp, #28
   1ddb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddbc:	push	{r4, r5, r6, r7, fp, lr}
   1ddc0:	add	fp, sp, #16
   1ddc4:	mov	ip, r0
   1ddc8:	ldr	lr, [r0, #108]	; 0x6c
   1ddcc:	cmp	lr, #1
   1ddd0:	blt	1de34 <__assert_fail@plt+0xc91c>
   1ddd4:	ldr	r2, [ip, #116]	; 0x74
   1ddd8:	mov	r0, #0
   1dddc:	mov	r3, #1
   1dde0:	mov	r4, lr
   1dde4:	add	r5, r0, r4
   1dde8:	add	r5, r5, r5, lsr #31
   1ddec:	asr	r6, r5, #1
   1ddf0:	add	r7, r6, r6, lsl #1
   1ddf4:	add	r7, r2, r7, lsl #3
   1ddf8:	ldr	r7, [r7, #4]
   1ddfc:	cmp	r7, r1
   1de00:	addlt	r0, r3, r5, asr #1
   1de04:	movge	r4, r6
   1de08:	cmp	r0, r4
   1de0c:	blt	1dde4 <__assert_fail@plt+0xc8cc>
   1de10:	cmp	r0, lr
   1de14:	bge	1de40 <__assert_fail@plt+0xc928>
   1de18:	ldr	r2, [ip, #116]	; 0x74
   1de1c:	add	r3, r0, r0, lsl #1
   1de20:	add	r2, r2, r3, lsl #3
   1de24:	ldr	r2, [r2, #4]
   1de28:	cmp	r2, r1
   1de2c:	mvnne	r0, #0
   1de30:	pop	{r4, r5, r6, r7, fp, pc}
   1de34:	mov	r0, #0
   1de38:	cmp	r0, lr
   1de3c:	blt	1de18 <__assert_fail@plt+0xc900>
   1de40:	mvn	r0, #0
   1de44:	pop	{r4, r5, r6, r7, fp, pc}
   1de48:	push	{r4, r5, r6, r7, fp, lr}
   1de4c:	add	fp, sp, #16
   1de50:	mov	r4, r1
   1de54:	mov	r5, r0
   1de58:	ldr	r0, [r0, #36]	; 0x24
   1de5c:	ldr	r7, [r5, #104]	; 0x68
   1de60:	cmp	r0, r1
   1de64:	bgt	1de74 <__assert_fail@plt+0xc95c>
   1de68:	ldr	r1, [r5, #48]	; 0x30
   1de6c:	cmp	r0, r1
   1de70:	blt	1de8c <__assert_fail@plt+0xc974>
   1de74:	ldr	r0, [r5, #28]
   1de78:	cmp	r0, r4
   1de7c:	bgt	1dea4 <__assert_fail@plt+0xc98c>
   1de80:	ldr	r1, [r5, #48]	; 0x30
   1de84:	cmp	r0, r1
   1de88:	bge	1dea4 <__assert_fail@plt+0xc98c>
   1de8c:	add	r1, r4, #1
   1de90:	mov	r0, r5
   1de94:	bl	1d410 <__assert_fail@plt+0xbef8>
   1de98:	mov	r6, r0
   1de9c:	cmp	r0, #0
   1dea0:	bne	1ded4 <__assert_fail@plt+0xc9bc>
   1dea4:	mov	r6, #0
   1dea8:	cmp	r7, r4
   1deac:	bge	1ded4 <__assert_fail@plt+0xc9bc>
   1deb0:	sub	r0, r4, r7
   1deb4:	lsl	r2, r0, #2
   1deb8:	ldr	r0, [r5, #100]	; 0x64
   1debc:	add	r0, r0, r7, lsl #2
   1dec0:	add	r0, r0, #4
   1dec4:	mov	r6, #0
   1dec8:	mov	r1, #0
   1decc:	bl	11428 <memset@plt>
   1ded0:	str	r4, [r5, #104]	; 0x68
   1ded4:	mov	r0, r6
   1ded8:	pop	{r4, r5, r6, r7, fp, pc}
   1dedc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dee0:	add	fp, sp, #24
   1dee4:	sub	sp, sp, #16
   1dee8:	mov	r7, r3
   1deec:	mov	r6, r2
   1def0:	mov	r8, r1
   1def4:	mov	r4, r0
   1def8:	ldr	r2, [r2]
   1defc:	ldr	r3, [r6, #4]
   1df00:	mov	r0, #8
   1df04:	str	r0, [sp, #8]
   1df08:	ldr	r5, [fp, #8]
   1df0c:	str	r5, [sp, #4]
   1df10:	str	r7, [sp]
   1df14:	add	r1, r6, #8
   1df18:	mov	r0, r4
   1df1c:	bl	1dfd4 <__assert_fail@plt+0xcabc>
   1df20:	cmp	r0, #0
   1df24:	beq	1df30 <__assert_fail@plt+0xca18>
   1df28:	sub	sp, fp, #24
   1df2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1df30:	ldr	r3, [r8]
   1df34:	ldr	r0, [r6, #4]
   1df38:	str	r0, [sp]
   1df3c:	mov	r0, r4
   1df40:	mov	r1, r7
   1df44:	mov	r2, r5
   1df48:	bl	1e43c <__assert_fail@plt+0xcf24>
   1df4c:	cmp	r0, #0
   1df50:	bne	1df28 <__assert_fail@plt+0xca10>
   1df54:	ldr	r0, [r6, #4]
   1df58:	add	r0, r0, r5
   1df5c:	ldr	r1, [r8]
   1df60:	sub	r1, r0, r1
   1df64:	mov	r0, r4
   1df68:	sub	sp, fp, #24
   1df6c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df70:	b	1de48 <__assert_fail@plt+0xc930>
   1df74:	push	{r4, r5, fp, lr}
   1df78:	add	fp, sp, #8
   1df7c:	ldr	r4, [r1, #4]
   1df80:	cmp	r4, #1
   1df84:	blt	1dfcc <__assert_fail@plt+0xcab4>
   1df88:	ldr	ip, [r0]
   1df8c:	ldr	lr, [r1, #8]
   1df90:	mov	r4, #0
   1df94:	b	1dfa8 <__assert_fail@plt+0xca90>
   1df98:	add	r4, r4, #1
   1df9c:	ldr	r0, [r1, #4]
   1dfa0:	cmp	r4, r0
   1dfa4:	bge	1dfcc <__assert_fail@plt+0xcab4>
   1dfa8:	ldr	r0, [lr, r4, lsl #2]
   1dfac:	add	r5, ip, r0, lsl #3
   1dfb0:	ldrb	r5, [r5, #4]
   1dfb4:	cmp	r5, r3
   1dfb8:	bne	1df98 <__assert_fail@plt+0xca80>
   1dfbc:	ldr	r5, [ip, r0, lsl #3]
   1dfc0:	cmp	r5, r2
   1dfc4:	bne	1df98 <__assert_fail@plt+0xca80>
   1dfc8:	pop	{r4, r5, fp, pc}
   1dfcc:	mvn	r0, #0
   1dfd0:	pop	{r4, r5, fp, pc}
   1dfd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfd8:	add	fp, sp, #28
   1dfdc:	sub	sp, sp, #52	; 0x34
   1dfe0:	mov	r7, r3
   1dfe4:	mov	r8, r2
   1dfe8:	mov	r6, r1
   1dfec:	mov	r4, r0
   1dff0:	ldr	r1, [r0, #84]	; 0x54
   1dff4:	mov	r0, #0
   1dff8:	str	r0, [fp, #-32]	; 0xffffffe0
   1dffc:	str	r1, [sp, #28]
   1e000:	ldr	r0, [r1]
   1e004:	ldr	r0, [r0, r2, lsl #3]
   1e008:	str	r0, [sp, #20]
   1e00c:	ldr	r0, [r4, #120]	; 0x78
   1e010:	ldr	sl, [fp, #12]
   1e014:	add	r0, r0, sl
   1e018:	ldr	r5, [r6, #4]
   1e01c:	cmp	r5, r0
   1e020:	ble	1e34c <__assert_fail@plt+0xce34>
   1e024:	ldr	r0, [r4, #40]	; 0x28
   1e028:	str	r0, [sp, #16]
   1e02c:	ldr	r2, [r4, #88]	; 0x58
   1e030:	ldr	r0, [r4, #100]	; 0x64
   1e034:	str	r0, [sp, #12]
   1e038:	ldr	r9, [r6]
   1e03c:	ldr	r0, [r6, #8]
   1e040:	str	r0, [r4, #100]	; 0x64
   1e044:	cmp	r9, #0
   1e048:	moveq	r9, r7
   1e04c:	str	r9, [r4, #40]	; 0x28
   1e050:	sub	r1, r9, #1
   1e054:	mov	r0, r4
   1e058:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1e05c:	cmp	r9, r7
   1e060:	mov	r5, r4
   1e064:	bne	1e0a8 <__assert_fail@plt+0xcb90>
   1e068:	mov	r7, r0
   1e06c:	add	r0, sp, #32
   1e070:	mov	r1, r8
   1e074:	bl	1add4 <__assert_fail@plt+0x98bc>
   1e078:	str	r0, [fp, #-32]	; 0xffffffe0
   1e07c:	cmp	r0, #0
   1e080:	bne	1e3b0 <__assert_fail@plt+0xce98>
   1e084:	add	r1, sp, #32
   1e088:	ldr	r0, [sp, #28]
   1e08c:	ldr	r2, [sp, #20]
   1e090:	ldr	r3, [fp, #16]
   1e094:	bl	1e538 <__assert_fail@plt+0xd020>
   1e098:	str	r0, [fp, #-32]	; 0xffffffe0
   1e09c:	cmp	r0, #0
   1e0a0:	beq	1e11c <__assert_fail@plt+0xcc04>
   1e0a4:	b	1e2d8 <__assert_fail@plt+0xcdc0>
   1e0a8:	ldr	r1, [r5, #100]	; 0x64
   1e0ac:	ldr	r8, [r1, r9, lsl #2]
   1e0b0:	cmp	r8, #0
   1e0b4:	beq	1e0dc <__assert_fail@plt+0xcbc4>
   1e0b8:	ldrb	r1, [r8, #52]	; 0x34
   1e0bc:	mov	r7, r0
   1e0c0:	tst	r1, #64	; 0x40
   1e0c4:	bne	1e0f8 <__assert_fail@plt+0xcbe0>
   1e0c8:	mov	r0, #0
   1e0cc:	str	r0, [sp, #36]	; 0x24
   1e0d0:	str	r0, [sp, #32]
   1e0d4:	str	r0, [sp, #40]	; 0x28
   1e0d8:	b	1e110 <__assert_fail@plt+0xcbf8>
   1e0dc:	mov	r8, #0
   1e0e0:	str	r8, [sp, #36]	; 0x24
   1e0e4:	str	r8, [sp, #32]
   1e0e8:	str	r8, [sp, #40]	; 0x28
   1e0ec:	cmp	r9, sl
   1e0f0:	blt	1e18c <__assert_fail@plt+0xcc74>
   1e0f4:	b	1e2f4 <__assert_fail@plt+0xcddc>
   1e0f8:	add	r1, r8, #4
   1e0fc:	add	r0, sp, #32
   1e100:	bl	1b6c4 <__assert_fail@plt+0xa1ac>
   1e104:	str	r0, [fp, #-32]	; 0xffffffe0
   1e108:	cmp	r0, #0
   1e10c:	bne	1e3b0 <__assert_fail@plt+0xce98>
   1e110:	ldrb	r0, [r8, #52]	; 0x34
   1e114:	tst	r0, #64	; 0x40
   1e118:	beq	1e184 <__assert_fail@plt+0xcc6c>
   1e11c:	ldr	r0, [sp, #36]	; 0x24
   1e120:	cmp	r0, #0
   1e124:	beq	1e150 <__assert_fail@plt+0xcc38>
   1e128:	ldr	r0, [fp, #16]
   1e12c:	str	r0, [sp]
   1e130:	add	r1, sp, #32
   1e134:	mov	r0, r5
   1e138:	mov	r2, r9
   1e13c:	ldr	r3, [sp, #20]
   1e140:	bl	1e630 <__assert_fail@plt+0xd118>
   1e144:	str	r0, [fp, #-32]	; 0xffffffe0
   1e148:	cmp	r0, #0
   1e14c:	bne	1e2d8 <__assert_fail@plt+0xcdc0>
   1e150:	sub	r0, fp, #32
   1e154:	add	r2, sp, #32
   1e158:	ldr	r1, [sp, #28]
   1e15c:	mov	r3, r7
   1e160:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1e164:	mov	r8, r0
   1e168:	cmp	r0, #0
   1e16c:	bne	1e17c <__assert_fail@plt+0xcc64>
   1e170:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e174:	cmp	r0, #0
   1e178:	bne	1e2d8 <__assert_fail@plt+0xcdc0>
   1e17c:	ldr	r0, [r5, #100]	; 0x64
   1e180:	str	r8, [r0, r9, lsl #2]
   1e184:	cmp	r9, sl
   1e188:	bge	1e2f4 <__assert_fail@plt+0xcddc>
   1e18c:	str	r6, [sp, #8]
   1e190:	rsb	r0, sl, #0
   1e194:	str	r0, [sp, #24]
   1e198:	add	r7, r9, #1
   1e19c:	add	r6, sp, #32
   1e1a0:	mov	sl, #0
   1e1a4:	ldr	r4, [sp, #20]
   1e1a8:	b	1e1d8 <__assert_fail@plt+0xccc0>
   1e1ac:	ldr	r0, [r5, #100]	; 0x64
   1e1b0:	str	r8, [r0, r7, lsl #2]
   1e1b4:	cmp	r8, #0
   1e1b8:	mov	r0, #0
   1e1bc:	addeq	r0, sl, #1
   1e1c0:	add	r7, r7, #1
   1e1c4:	ldr	r1, [sp, #24]
   1e1c8:	add	r1, r1, r7
   1e1cc:	cmp	r1, #1
   1e1d0:	mov	sl, r0
   1e1d4:	beq	1e2e8 <__assert_fail@plt+0xcdd0>
   1e1d8:	sub	r9, r7, #1
   1e1dc:	ldr	r0, [r5, #120]	; 0x78
   1e1e0:	cmp	sl, r0
   1e1e4:	bgt	1e2ec <__assert_fail@plt+0xcdd4>
   1e1e8:	mov	r0, #0
   1e1ec:	str	r0, [sp, #36]	; 0x24
   1e1f0:	ldr	r0, [r5, #100]	; 0x64
   1e1f4:	ldr	r0, [r0, r7, lsl #2]
   1e1f8:	cmp	r0, #0
   1e1fc:	beq	1e218 <__assert_fail@plt+0xcd00>
   1e200:	add	r1, r0, #4
   1e204:	mov	r0, r6
   1e208:	bl	1b2c0 <__assert_fail@plt+0x9da8>
   1e20c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e210:	cmp	r0, #0
   1e214:	bne	1e2d8 <__assert_fail@plt+0xcdc0>
   1e218:	cmp	r8, #0
   1e21c:	beq	1e240 <__assert_fail@plt+0xcd28>
   1e220:	add	r2, r8, #16
   1e224:	mov	r0, r5
   1e228:	mov	r1, r9
   1e22c:	mov	r3, r6
   1e230:	bl	1e8c8 <__assert_fail@plt+0xd3b0>
   1e234:	str	r0, [fp, #-32]	; 0xffffffe0
   1e238:	cmp	r0, #0
   1e23c:	bne	1e2d8 <__assert_fail@plt+0xcdc0>
   1e240:	ldr	r0, [sp, #36]	; 0x24
   1e244:	cmp	r0, #0
   1e248:	beq	1e29c <__assert_fail@plt+0xcd84>
   1e24c:	mov	r8, r5
   1e250:	ldr	r0, [sp, #28]
   1e254:	mov	r1, r6
   1e258:	mov	r2, r4
   1e25c:	ldr	r5, [fp, #16]
   1e260:	mov	r3, r5
   1e264:	bl	1e538 <__assert_fail@plt+0xd020>
   1e268:	str	r0, [fp, #-32]	; 0xffffffe0
   1e26c:	cmp	r0, #0
   1e270:	bne	1e2d8 <__assert_fail@plt+0xcdc0>
   1e274:	str	r5, [sp]
   1e278:	mov	r5, r8
   1e27c:	mov	r0, r8
   1e280:	mov	r1, r6
   1e284:	mov	r2, r7
   1e288:	mov	r3, r4
   1e28c:	bl	1e630 <__assert_fail@plt+0xd118>
   1e290:	str	r0, [fp, #-32]	; 0xffffffe0
   1e294:	cmp	r0, #0
   1e298:	bne	1e2d8 <__assert_fail@plt+0xcdc0>
   1e29c:	ldr	r2, [r5, #88]	; 0x58
   1e2a0:	mov	r0, r5
   1e2a4:	mov	r1, r9
   1e2a8:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1e2ac:	mov	r3, r0
   1e2b0:	sub	r0, fp, #32
   1e2b4:	ldr	r1, [sp, #28]
   1e2b8:	mov	r2, r6
   1e2bc:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1e2c0:	mov	r8, r0
   1e2c4:	cmp	r0, #0
   1e2c8:	bne	1e1ac <__assert_fail@plt+0xcc94>
   1e2cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e2d0:	cmp	r0, #0
   1e2d4:	beq	1e1ac <__assert_fail@plt+0xcc94>
   1e2d8:	ldr	r0, [sp, #40]	; 0x28
   1e2dc:	bl	22b58 <__assert_fail@plt+0x11640>
   1e2e0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1e2e4:	b	1e340 <__assert_fail@plt+0xce28>
   1e2e8:	sub	r9, r7, #1
   1e2ec:	ldr	r6, [sp, #8]
   1e2f0:	ldr	sl, [fp, #12]
   1e2f4:	ldr	r0, [sp, #40]	; 0x28
   1e2f8:	bl	22b58 <__assert_fail@plt+0x11640>
   1e2fc:	ldr	r0, [r5, #100]	; 0x64
   1e300:	ldr	r0, [r0, sl, lsl #2]
   1e304:	str	r9, [r6]
   1e308:	ldr	r1, [sp, #16]
   1e30c:	str	r1, [r5, #40]	; 0x28
   1e310:	ldr	r1, [sp, #12]
   1e314:	str	r1, [r5, #100]	; 0x64
   1e318:	cmp	r0, #0
   1e31c:	beq	1e33c <__assert_fail@plt+0xce24>
   1e320:	ldr	r1, [fp, #8]
   1e324:	add	r0, r0, #4
   1e328:	bl	1b740 <__assert_fail@plt+0xa228>
   1e32c:	mov	r4, #0
   1e330:	cmp	r0, #0
   1e334:	moveq	r4, #1
   1e338:	b	1e340 <__assert_fail@plt+0xce28>
   1e33c:	mov	r4, #1
   1e340:	mov	r0, r4
   1e344:	sub	sp, fp, #28
   1e348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e34c:	str	r4, [sp, #24]
   1e350:	mvn	r1, #-2147483648	; 0x80000000
   1e354:	sub	r1, r1, r5
   1e358:	mov	r4, #12
   1e35c:	cmp	r1, r0
   1e360:	ble	1e340 <__assert_fail@plt+0xce28>
   1e364:	add	r0, r0, #1
   1e368:	add	sl, r0, r5
   1e36c:	cmn	sl, #-1073741823	; 0xc0000001
   1e370:	bhi	1e340 <__assert_fail@plt+0xce28>
   1e374:	mov	r9, r0
   1e378:	ldr	r0, [r6, #8]
   1e37c:	lsl	r1, sl, #2
   1e380:	bl	22698 <__assert_fail@plt+0x11180>
   1e384:	cmp	r0, #0
   1e388:	beq	1e340 <__assert_fail@plt+0xce28>
   1e38c:	str	sl, [r6, #4]
   1e390:	str	r0, [r6, #8]
   1e394:	add	r0, r0, r5, lsl #2
   1e398:	lsl	r2, r9, #2
   1e39c:	mov	r1, #0
   1e3a0:	bl	11428 <memset@plt>
   1e3a4:	ldr	sl, [fp, #12]
   1e3a8:	ldr	r4, [sp, #24]
   1e3ac:	b	1e024 <__assert_fail@plt+0xcb0c>
   1e3b0:	mov	r4, r0
   1e3b4:	b	1e340 <__assert_fail@plt+0xce28>
   1e3b8:	push	{r4, r5, r6, r7, fp, lr}
   1e3bc:	add	fp, sp, #16
   1e3c0:	mov	r5, r2
   1e3c4:	mov	r6, r1
   1e3c8:	mov	r4, r0
   1e3cc:	ldr	r0, [r0, #12]
   1e3d0:	ldr	r1, [r4, #16]
   1e3d4:	cmp	r1, r0
   1e3d8:	beq	1e40c <__assert_fail@plt+0xcef4>
   1e3dc:	mov	r0, #1
   1e3e0:	mov	r1, #20
   1e3e4:	bl	22614 <__assert_fail@plt+0x110fc>
   1e3e8:	cmp	r0, #0
   1e3ec:	ldrne	r1, [r4, #16]
   1e3f0:	ldrne	r2, [r4, #20]
   1e3f4:	strne	r0, [r2, r1, lsl #2]
   1e3f8:	strne	r6, [r0]
   1e3fc:	strne	r5, [r0, #4]
   1e400:	addne	r1, r1, #1
   1e404:	strne	r1, [r4, #16]
   1e408:	pop	{r4, r5, r6, r7, fp, pc}
   1e40c:	mov	r1, #1
   1e410:	orr	r7, r1, r0, lsl #1
   1e414:	lsl	r1, r7, #2
   1e418:	ldr	r0, [r4, #20]
   1e41c:	bl	22698 <__assert_fail@plt+0x11180>
   1e420:	cmp	r0, #0
   1e424:	beq	1e434 <__assert_fail@plt+0xcf1c>
   1e428:	str	r7, [r4, #12]
   1e42c:	str	r0, [r4, #20]
   1e430:	b	1e3dc <__assert_fail@plt+0xcec4>
   1e434:	mov	r0, #0
   1e438:	pop	{r4, r5, r6, r7, fp, pc}
   1e43c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e440:	add	fp, sp, #24
   1e444:	mov	r5, r3
   1e448:	mov	r9, r2
   1e44c:	mov	r8, r1
   1e450:	mov	r4, r0
   1e454:	ldr	r1, [r0, #108]	; 0x6c
   1e458:	ldr	r2, [r0, #112]	; 0x70
   1e45c:	cmp	r1, r2
   1e460:	blt	1e4b0 <__assert_fail@plt+0xcf98>
   1e464:	ldr	r0, [r4, #116]	; 0x74
   1e468:	add	r1, r2, r2, lsl #1
   1e46c:	lsl	r1, r1, #4
   1e470:	bl	22698 <__assert_fail@plt+0x11180>
   1e474:	cmp	r0, #0
   1e478:	beq	1e528 <__assert_fail@plt+0xd010>
   1e47c:	str	r0, [r4, #116]	; 0x74
   1e480:	ldr	r1, [r4, #108]	; 0x6c
   1e484:	ldr	r2, [r4, #112]	; 0x70
   1e488:	add	r1, r1, r1, lsl #1
   1e48c:	add	r0, r0, r1, lsl #3
   1e490:	add	r1, r2, r2, lsl #1
   1e494:	lsl	r2, r1, #3
   1e498:	mov	r1, #0
   1e49c:	bl	11428 <memset@plt>
   1e4a0:	ldr	r1, [r4, #108]	; 0x6c
   1e4a4:	ldr	r0, [r4, #112]	; 0x70
   1e4a8:	lsl	r0, r0, #1
   1e4ac:	str	r0, [r4, #112]	; 0x70
   1e4b0:	ldr	r2, [fp, #8]
   1e4b4:	cmp	r1, #1
   1e4b8:	blt	1e4dc <__assert_fail@plt+0xcfc4>
   1e4bc:	ldr	r0, [r4, #116]	; 0x74
   1e4c0:	sub	r3, r1, #1
   1e4c4:	add	r3, r3, r3, lsl #1
   1e4c8:	add	r0, r0, r3, lsl #3
   1e4cc:	ldr	r3, [r0, #4]
   1e4d0:	cmp	r3, r9
   1e4d4:	moveq	r3, #1
   1e4d8:	strbeq	r3, [r0, #20]
   1e4dc:	mov	r0, #0
   1e4e0:	cmp	r2, r5
   1e4e4:	mov	r3, #0
   1e4e8:	mvneq	r3, #0
   1e4ec:	ldr	r7, [r4, #116]	; 0x74
   1e4f0:	add	r6, r1, r1, lsl #1
   1e4f4:	str	r8, [r7, r6, lsl #3]!
   1e4f8:	str	r9, [r7, #4]
   1e4fc:	str	r5, [r7, #8]
   1e500:	str	r2, [r7, #12]
   1e504:	str	r3, [r7, #16]
   1e508:	add	r1, r1, #1
   1e50c:	str	r1, [r4, #108]	; 0x6c
   1e510:	strb	r0, [r7, #20]
   1e514:	sub	r1, r2, r5
   1e518:	ldr	r2, [r4, #120]	; 0x78
   1e51c:	cmp	r2, r1
   1e520:	strlt	r1, [r4, #120]	; 0x78
   1e524:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e528:	ldr	r0, [r4, #116]	; 0x74
   1e52c:	bl	22b58 <__assert_fail@plt+0x11640>
   1e530:	mov	r0, #12
   1e534:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e53c:	add	fp, sp, #28
   1e540:	sub	sp, sp, #20
   1e544:	mov	r9, r3
   1e548:	mov	sl, r2
   1e54c:	mov	r4, r1
   1e550:	mov	r7, r0
   1e554:	ldr	r1, [r1, #4]
   1e558:	add	r0, sp, #8
   1e55c:	bl	1b034 <__assert_fail@plt+0x9b1c>
   1e560:	cmp	r0, #0
   1e564:	bne	1e628 <__assert_fail@plt+0xd110>
   1e568:	ldr	r0, [r4, #4]
   1e56c:	cmp	r0, #1
   1e570:	blt	1e5f0 <__assert_fail@plt+0xd0d8>
   1e574:	mov	r8, #0
   1e578:	ldr	r0, [r4, #8]
   1e57c:	ldr	r5, [r0, r8, lsl #2]
   1e580:	add	r0, r5, r5, lsl #1
   1e584:	ldr	r1, [r7, #24]
   1e588:	add	r6, r1, r0, lsl #2
   1e58c:	mov	r0, r7
   1e590:	mov	r1, r6
   1e594:	mov	r2, sl
   1e598:	mov	r3, r9
   1e59c:	bl	1df74 <__assert_fail@plt+0xca5c>
   1e5a0:	cmn	r0, #1
   1e5a4:	beq	1e5cc <__assert_fail@plt+0xd0b4>
   1e5a8:	str	r9, [sp]
   1e5ac:	mov	r0, r7
   1e5b0:	add	r1, sp, #8
   1e5b4:	mov	r2, r5
   1e5b8:	mov	r3, sl
   1e5bc:	bl	1ea80 <__assert_fail@plt+0xd568>
   1e5c0:	cmp	r0, #0
   1e5c4:	beq	1e5e0 <__assert_fail@plt+0xd0c8>
   1e5c8:	b	1e618 <__assert_fail@plt+0xd100>
   1e5cc:	add	r0, sp, #8
   1e5d0:	mov	r1, r6
   1e5d4:	bl	1b2c0 <__assert_fail@plt+0x9da8>
   1e5d8:	cmp	r0, #0
   1e5dc:	bne	1e618 <__assert_fail@plt+0xd100>
   1e5e0:	ldr	r0, [r4, #4]
   1e5e4:	add	r8, r8, #1
   1e5e8:	cmp	r8, r0
   1e5ec:	blt	1e578 <__assert_fail@plt+0xd060>
   1e5f0:	ldr	r0, [r4, #8]
   1e5f4:	bl	22b58 <__assert_fail@plt+0x11640>
   1e5f8:	vldr	d16, [sp, #8]
   1e5fc:	ldr	r0, [sp, #16]
   1e600:	str	r0, [r4, #8]
   1e604:	vstr	d16, [r4]
   1e608:	mov	r5, #0
   1e60c:	mov	r0, r5
   1e610:	sub	sp, fp, #28
   1e614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e618:	mov	r5, r0
   1e61c:	ldr	r0, [sp, #16]
   1e620:	bl	22b58 <__assert_fail@plt+0x11640>
   1e624:	b	1e60c <__assert_fail@plt+0xd0f4>
   1e628:	mov	r5, r0
   1e62c:	b	1e60c <__assert_fail@plt+0xd0f4>
   1e630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e634:	add	fp, sp, #28
   1e638:	sub	sp, sp, #44	; 0x2c
   1e63c:	str	r3, [sp, #8]
   1e640:	mov	sl, r1
   1e644:	ldr	r6, [r0, #84]	; 0x54
   1e648:	str	r0, [sp, #16]
   1e64c:	str	r2, [sp, #24]
   1e650:	mov	r1, r2
   1e654:	bl	1ddbc <__assert_fail@plt+0xc8a4>
   1e658:	mov	r1, #0
   1e65c:	cmn	r0, #1
   1e660:	beq	1e8bc <__assert_fail@plt+0xd3a4>
   1e664:	add	r1, r0, r0, lsl #1
   1e668:	add	r7, sp, #28
   1e66c:	str	r6, [sp, #20]
   1e670:	str	r1, [sp, #4]
   1e674:	ldr	r0, [sp, #16]
   1e678:	ldr	r0, [r0, #116]	; 0x74
   1e67c:	add	r0, r0, r1, lsl #3
   1e680:	add	r0, r0, #12
   1e684:	b	1e6a0 <__assert_fail@plt+0xd188>
   1e688:	ldr	r6, [sp, #20]
   1e68c:	add	r7, sp, #28
   1e690:	add	r0, r9, #24
   1e694:	ldrb	r1, [r9, #8]
   1e698:	cmp	r1, #0
   1e69c:	beq	1e8b0 <__assert_fail@plt+0xd398>
   1e6a0:	mov	r9, r0
   1e6a4:	ldr	r1, [r0, #-12]
   1e6a8:	mov	r0, sl
   1e6ac:	bl	1b740 <__assert_fail@plt+0xa228>
   1e6b0:	cmp	r0, #0
   1e6b4:	beq	1e690 <__assert_fail@plt+0xd178>
   1e6b8:	ldmda	r9, {r0, r1}
   1e6bc:	ldr	r2, [sp, #24]
   1e6c0:	add	r1, r1, r2
   1e6c4:	sub	r5, r1, r0
   1e6c8:	cmp	r5, r2
   1e6cc:	bne	1e780 <__assert_fail@plt+0xd268>
   1e6d0:	ldr	r0, [r6, #20]
   1e6d4:	ldr	r1, [r9, #-12]
   1e6d8:	add	r1, r1, r1, lsl #1
   1e6dc:	add	r0, r0, r1, lsl #2
   1e6e0:	ldr	r0, [r0, #8]
   1e6e4:	ldr	r4, [r0]
   1e6e8:	mov	r0, sl
   1e6ec:	mov	r1, r4
   1e6f0:	bl	1b740 <__assert_fail@plt+0xa228>
   1e6f4:	mov	r1, #4
   1e6f8:	cmp	r0, #0
   1e6fc:	bne	1e87c <__assert_fail@plt+0xd364>
   1e700:	mov	r0, r7
   1e704:	mov	r1, r4
   1e708:	bl	1add4 <__assert_fail@plt+0x98bc>
   1e70c:	mov	r4, r7
   1e710:	mov	r8, r0
   1e714:	str	r0, [fp, #-32]	; 0xffffffe0
   1e718:	mov	r0, r6
   1e71c:	mov	r1, r7
   1e720:	ldr	r2, [sp, #8]
   1e724:	ldr	r3, [fp, #8]
   1e728:	bl	1e538 <__assert_fail@plt+0xd020>
   1e72c:	mov	r7, r0
   1e730:	mov	r0, sl
   1e734:	mov	r1, r4
   1e738:	bl	1b2c0 <__assert_fail@plt+0x9da8>
   1e73c:	mov	r4, r0
   1e740:	ldr	r0, [sp, #36]	; 0x24
   1e744:	bl	22b58 <__assert_fail@plt+0x11640>
   1e748:	orr	r0, r7, r8
   1e74c:	orrs	r0, r0, r4
   1e750:	mov	r1, #2
   1e754:	beq	1e87c <__assert_fail@plt+0xd364>
   1e758:	cmp	r7, #0
   1e75c:	movne	r4, r7
   1e760:	cmp	r8, #0
   1e764:	movne	r4, r8
   1e768:	str	r4, [fp, #-32]	; 0xffffffe0
   1e76c:	mov	r1, #1
   1e770:	str	r4, [sp, #12]
   1e774:	cmp	r1, #0
   1e778:	bne	1e884 <__assert_fail@plt+0xd36c>
   1e77c:	b	1e688 <__assert_fail@plt+0xd170>
   1e780:	ldr	r0, [sp, #16]
   1e784:	ldr	r0, [r0, #100]	; 0x64
   1e788:	ldr	r0, [r0, r5, lsl #2]
   1e78c:	ldr	r1, [r9, #-12]
   1e790:	ldr	r2, [r6, #12]
   1e794:	ldr	r4, [r2, r1, lsl #2]
   1e798:	cmp	r0, #0
   1e79c:	beq	1e814 <__assert_fail@plt+0xd2fc>
   1e7a0:	add	r8, r0, #4
   1e7a4:	mov	r0, r8
   1e7a8:	mov	r1, r4
   1e7ac:	bl	1b740 <__assert_fail@plt+0xa228>
   1e7b0:	mov	r1, #4
   1e7b4:	cmp	r0, #0
   1e7b8:	bne	1e87c <__assert_fail@plt+0xd364>
   1e7bc:	mov	r0, r7
   1e7c0:	mov	r1, r8
   1e7c4:	bl	1b6c4 <__assert_fail@plt+0xa1ac>
   1e7c8:	mov	r8, r0
   1e7cc:	str	r0, [fp, #-32]	; 0xffffffe0
   1e7d0:	mov	r0, r7
   1e7d4:	mov	r1, r4
   1e7d8:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1e7dc:	cmp	r8, #0
   1e7e0:	bne	1e7ec <__assert_fail@plt+0xd2d4>
   1e7e4:	cmp	r0, #0
   1e7e8:	bne	1e82c <__assert_fail@plt+0xd314>
   1e7ec:	ldr	r0, [sp, #36]	; 0x24
   1e7f0:	bl	22b58 <__assert_fail@plt+0x11640>
   1e7f4:	cmp	r8, #0
   1e7f8:	movweq	r8, #12
   1e7fc:	str	r8, [fp, #-32]	; 0xffffffe0
   1e800:	mov	r1, #1
   1e804:	str	r8, [sp, #12]
   1e808:	cmp	r1, #0
   1e80c:	bne	1e884 <__assert_fail@plt+0xd36c>
   1e810:	b	1e688 <__assert_fail@plt+0xd170>
   1e814:	mov	r0, r7
   1e818:	mov	r1, r4
   1e81c:	bl	1add4 <__assert_fail@plt+0x98bc>
   1e820:	str	r0, [fp, #-32]	; 0xffffffe0
   1e824:	cmp	r0, #0
   1e828:	bne	1e898 <__assert_fail@plt+0xd380>
   1e82c:	sub	r0, fp, #32
   1e830:	mov	r1, r6
   1e834:	mov	r2, r7
   1e838:	bl	1eb8c <__assert_fail@plt+0xd674>
   1e83c:	ldr	r4, [sp, #16]
   1e840:	ldr	r1, [r4, #100]	; 0x64
   1e844:	str	r0, [r1, r5, lsl #2]
   1e848:	ldr	r0, [sp, #36]	; 0x24
   1e84c:	bl	22b58 <__assert_fail@plt+0x11640>
   1e850:	ldr	r0, [r4, #100]	; 0x64
   1e854:	ldr	r0, [r0, r5, lsl #2]
   1e858:	clz	r0, r0
   1e85c:	lsr	r1, r0, #5
   1e860:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e864:	cmp	r0, #0
   1e868:	mov	r2, r0
   1e86c:	movwne	r2, #1
   1e870:	ands	r1, r1, r2
   1e874:	ldreq	r0, [sp, #12]
   1e878:	str	r0, [sp, #12]
   1e87c:	cmp	r1, #0
   1e880:	beq	1e688 <__assert_fail@plt+0xd170>
   1e884:	cmp	r1, #4
   1e888:	ldr	r6, [sp, #20]
   1e88c:	add	r7, sp, #28
   1e890:	beq	1e690 <__assert_fail@plt+0xd178>
   1e894:	b	1e8a0 <__assert_fail@plt+0xd388>
   1e898:	mov	r1, #1
   1e89c:	b	1e878 <__assert_fail@plt+0xd360>
   1e8a0:	cmp	r1, #2
   1e8a4:	bne	1e8b8 <__assert_fail@plt+0xd3a0>
   1e8a8:	ldr	r1, [sp, #4]
   1e8ac:	b	1e674 <__assert_fail@plt+0xd15c>
   1e8b0:	mov	r1, #0
   1e8b4:	b	1e8bc <__assert_fail@plt+0xd3a4>
   1e8b8:	ldr	r1, [sp, #12]
   1e8bc:	mov	r0, r1
   1e8c0:	sub	sp, fp, #28
   1e8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8cc:	add	fp, sp, #28
   1e8d0:	sub	sp, sp, #36	; 0x24
   1e8d4:	str	r1, [sp, #12]
   1e8d8:	mov	r7, r0
   1e8dc:	ldr	r4, [r0, #84]	; 0x54
   1e8e0:	mov	r9, #0
   1e8e4:	str	r9, [sp, #32]
   1e8e8:	str	r9, [sp, #20]
   1e8ec:	str	r9, [sp, #16]
   1e8f0:	str	r9, [sp, #24]
   1e8f4:	ldr	r0, [r2, #4]
   1e8f8:	cmp	r0, #1
   1e8fc:	blt	1ea5c <__assert_fail@plt+0xd544>
   1e900:	mov	r8, r3
   1e904:	mov	r5, r2
   1e908:	mov	r6, #0
   1e90c:	str	r3, [sp, #4]
   1e910:	str	r2, [sp, #8]
   1e914:	b	1e950 <__assert_fail@plt+0xd438>
   1e918:	cmp	r0, #0
   1e91c:	mov	r7, r5
   1e920:	ldr	r5, [sp, #8]
   1e924:	beq	1e96c <__assert_fail@plt+0xd454>
   1e928:	ldr	r0, [r4, #12]
   1e92c:	ldr	r1, [r0, sl, lsl #2]
   1e930:	mov	r0, r8
   1e934:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1e938:	cmp	r0, #0
   1e93c:	beq	1ea70 <__assert_fail@plt+0xd558>
   1e940:	add	r6, r6, #1
   1e944:	ldr	r0, [r5, #4]
   1e948:	cmp	r6, r0
   1e94c:	bge	1ea58 <__assert_fail@plt+0xd540>
   1e950:	ldr	r0, [r5, #8]
   1e954:	ldr	sl, [r0, r6, lsl #2]
   1e958:	ldr	r0, [r4]
   1e95c:	add	r0, r0, sl, lsl #3
   1e960:	ldrb	r0, [r0, #6]
   1e964:	tst	r0, #16
   1e968:	bne	1e98c <__assert_fail@plt+0xd474>
   1e96c:	ldr	r0, [r4]
   1e970:	add	r1, r0, sl, lsl #3
   1e974:	mov	r0, r7
   1e978:	ldr	r2, [sp, #12]
   1e97c:	bl	1f078 <__assert_fail@plt+0xdb60>
   1e980:	cmp	r0, #0
   1e984:	bne	1e928 <__assert_fail@plt+0xd410>
   1e988:	b	1e940 <__assert_fail@plt+0xd428>
   1e98c:	mov	r0, r4
   1e990:	mov	r1, sl
   1e994:	mov	r2, r7
   1e998:	mov	r5, r7
   1e99c:	ldr	r7, [sp, #12]
   1e9a0:	mov	r3, r7
   1e9a4:	bl	1ed9c <__assert_fail@plt+0xd884>
   1e9a8:	cmp	r0, #2
   1e9ac:	blt	1e918 <__assert_fail@plt+0xd400>
   1e9b0:	add	r8, r0, r7
   1e9b4:	ldr	r0, [r5, #100]	; 0x64
   1e9b8:	ldr	r0, [r0, r8, lsl #2]
   1e9bc:	ldr	r1, [r4, #12]
   1e9c0:	ldr	r2, [r1, sl, lsl #2]
   1e9c4:	mov	r1, #0
   1e9c8:	str	r1, [sp, #20]
   1e9cc:	cmp	r0, #0
   1e9d0:	mov	r7, r5
   1e9d4:	add	r5, sp, #16
   1e9d8:	beq	1ea04 <__assert_fail@plt+0xd4ec>
   1e9dc:	add	r1, r0, #4
   1e9e0:	mov	r0, r5
   1e9e4:	mov	r9, r5
   1e9e8:	mov	r5, r2
   1e9ec:	bl	1b2c0 <__assert_fail@plt+0x9da8>
   1e9f0:	mov	r2, r5
   1e9f4:	mov	r5, r9
   1e9f8:	str	r0, [sp, #32]
   1e9fc:	cmp	r0, #0
   1ea00:	bne	1ea78 <__assert_fail@plt+0xd560>
   1ea04:	mov	r0, r5
   1ea08:	mov	r1, r2
   1ea0c:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1ea10:	cmp	r0, #0
   1ea14:	beq	1ea70 <__assert_fail@plt+0xd558>
   1ea18:	add	r0, sp, #32
   1ea1c:	mov	r1, r4
   1ea20:	mov	r2, r5
   1ea24:	bl	1eb8c <__assert_fail@plt+0xd674>
   1ea28:	ldr	r1, [r7, #100]	; 0x64
   1ea2c:	str	r0, [r1, r8, lsl #2]
   1ea30:	ldr	r0, [r7, #100]	; 0x64
   1ea34:	ldr	r0, [r0, r8, lsl #2]
   1ea38:	cmp	r0, #0
   1ea3c:	ldr	r8, [sp, #4]
   1ea40:	ldr	r5, [sp, #8]
   1ea44:	bne	1e928 <__assert_fail@plt+0xd410>
   1ea48:	ldr	r9, [sp, #32]
   1ea4c:	cmp	r9, #0
   1ea50:	beq	1e928 <__assert_fail@plt+0xd410>
   1ea54:	b	1ea5c <__assert_fail@plt+0xd544>
   1ea58:	mov	r9, #0
   1ea5c:	ldr	r0, [sp, #24]
   1ea60:	bl	22b58 <__assert_fail@plt+0x11640>
   1ea64:	mov	r0, r9
   1ea68:	sub	sp, fp, #28
   1ea6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea70:	mov	r9, #12
   1ea74:	b	1ea5c <__assert_fail@plt+0xd544>
   1ea78:	mov	r9, r0
   1ea7c:	b	1ea5c <__assert_fail@plt+0xd544>
   1ea80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ea84:	add	fp, sp, #24
   1ea88:	sub	sp, sp, #8
   1ea8c:	mov	r5, r3
   1ea90:	mov	r7, r2
   1ea94:	mov	r4, r1
   1ea98:	mov	r6, r0
   1ea9c:	mov	r0, r1
   1eaa0:	mov	r1, r2
   1eaa4:	bl	1b740 <__assert_fail@plt+0xa228>
   1eaa8:	cmp	r0, #0
   1eaac:	beq	1eabc <__assert_fail@plt+0xd5a4>
   1eab0:	mov	r0, #0
   1eab4:	sub	sp, fp, #24
   1eab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1eabc:	ldr	r8, [fp, #8]
   1eac0:	b	1eb0c <__assert_fail@plt+0xd5f4>
   1eac4:	ldr	r0, [r0, #8]
   1eac8:	ldr	r2, [r0, #4]
   1eacc:	str	r8, [sp]
   1ead0:	mov	r0, r6
   1ead4:	mov	r1, r4
   1ead8:	mov	r3, r5
   1eadc:	bl	1ea80 <__assert_fail@plt+0xd568>
   1eae0:	cmp	r0, #0
   1eae4:	bne	1eab4 <__assert_fail@plt+0xd59c>
   1eae8:	ldr	r0, [r6, #20]
   1eaec:	add	r0, r0, r7, lsl #2
   1eaf0:	ldr	r0, [r0, #8]
   1eaf4:	ldr	r7, [r0]
   1eaf8:	mov	r0, r4
   1eafc:	mov	r1, r7
   1eb00:	bl	1b740 <__assert_fail@plt+0xa228>
   1eb04:	cmp	r0, #0
   1eb08:	bne	1eab0 <__assert_fail@plt+0xd598>
   1eb0c:	ldr	r0, [r6]
   1eb10:	add	r1, r0, r7, lsl #3
   1eb14:	ldrb	r1, [r1, #4]
   1eb18:	cmp	r1, r8
   1eb1c:	bne	1eb2c <__assert_fail@plt+0xd614>
   1eb20:	ldr	r0, [r0, r7, lsl #3]
   1eb24:	cmp	r0, r5
   1eb28:	beq	1eb64 <__assert_fail@plt+0xd64c>
   1eb2c:	mov	r0, r4
   1eb30:	mov	r1, r7
   1eb34:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1eb38:	cmp	r0, #0
   1eb3c:	beq	1eb80 <__assert_fail@plt+0xd668>
   1eb40:	ldr	r0, [r6, #20]
   1eb44:	add	r7, r7, r7, lsl #1
   1eb48:	add	r0, r0, r7, lsl #2
   1eb4c:	ldr	r1, [r0, #4]
   1eb50:	cmp	r1, #2
   1eb54:	beq	1eac4 <__assert_fail@plt+0xd5ac>
   1eb58:	cmp	r1, #0
   1eb5c:	bne	1eae8 <__assert_fail@plt+0xd5d0>
   1eb60:	b	1eab0 <__assert_fail@plt+0xd598>
   1eb64:	cmp	r8, #9
   1eb68:	bne	1eab0 <__assert_fail@plt+0xd598>
   1eb6c:	mov	r0, r4
   1eb70:	mov	r1, r7
   1eb74:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1eb78:	cmp	r0, #0
   1eb7c:	bne	1eab0 <__assert_fail@plt+0xd598>
   1eb80:	mov	r0, #12
   1eb84:	sub	sp, fp, #24
   1eb88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1eb8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb90:	add	fp, sp, #28
   1eb94:	sub	sp, sp, #4
   1eb98:	mov	r9, r1
   1eb9c:	ldr	r1, [r2, #4]
   1eba0:	cmp	r1, #0
   1eba4:	beq	1ec50 <__assert_fail@plt+0xd738>
   1eba8:	mov	sl, r2
   1ebac:	str	r0, [sp]
   1ebb0:	mov	r6, #0
   1ebb4:	mov	r0, r2
   1ebb8:	mov	r1, #0
   1ebbc:	bl	1b8ac <__assert_fail@plt+0xa394>
   1ebc0:	mov	r7, r0
   1ebc4:	ldr	r0, [r9, #32]
   1ebc8:	ldr	r1, [r9, #68]	; 0x44
   1ebcc:	and	r1, r1, r7
   1ebd0:	add	r1, r1, r1, lsl #1
   1ebd4:	mov	r5, r0
   1ebd8:	ldr	r2, [r5, r1, lsl #2]!
   1ebdc:	cmp	r2, #1
   1ebe0:	blt	1ec28 <__assert_fail@plt+0xd710>
   1ebe4:	add	r0, r0, r1, lsl #2
   1ebe8:	ldr	r8, [r0, #8]
   1ebec:	b	1ec00 <__assert_fail@plt+0xd6e8>
   1ebf0:	ldr	r0, [r5]
   1ebf4:	add	r6, r6, #1
   1ebf8:	cmp	r6, r0
   1ebfc:	bge	1ec28 <__assert_fail@plt+0xd710>
   1ec00:	ldr	r4, [r8, r6, lsl #2]
   1ec04:	ldr	r0, [r4]
   1ec08:	cmp	r7, r0
   1ec0c:	bne	1ebf0 <__assert_fail@plt+0xd6d8>
   1ec10:	add	r0, r4, #4
   1ec14:	mov	r1, sl
   1ec18:	bl	1b8d8 <__assert_fail@plt+0xa3c0>
   1ec1c:	cmp	r0, #0
   1ec20:	beq	1ebf0 <__assert_fail@plt+0xd6d8>
   1ec24:	b	1ec44 <__assert_fail@plt+0xd72c>
   1ec28:	mov	r0, r9
   1ec2c:	mov	r1, sl
   1ec30:	mov	r2, r7
   1ec34:	bl	1ec70 <__assert_fail@plt+0xd758>
   1ec38:	mov	r4, r0
   1ec3c:	cmp	r0, #0
   1ec40:	beq	1ec5c <__assert_fail@plt+0xd744>
   1ec44:	mov	r0, r4
   1ec48:	sub	sp, fp, #28
   1ec4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec50:	mov	r4, #0
   1ec54:	str	r4, [r0]
   1ec58:	b	1ec44 <__assert_fail@plt+0xd72c>
   1ec5c:	mov	r0, #12
   1ec60:	ldr	r1, [sp]
   1ec64:	str	r0, [r1]
   1ec68:	mov	r4, #0
   1ec6c:	b	1ec44 <__assert_fail@plt+0xd72c>
   1ec70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ec74:	add	fp, sp, #24
   1ec78:	mov	r8, r2
   1ec7c:	mov	r7, r1
   1ec80:	mov	r9, r0
   1ec84:	mov	r0, #56	; 0x38
   1ec88:	mov	r1, #1
   1ec8c:	bl	22614 <__assert_fail@plt+0x110fc>
   1ec90:	cmp	r0, #0
   1ec94:	beq	1ed90 <__assert_fail@plt+0xd878>
   1ec98:	mov	r4, r0
   1ec9c:	add	r5, r0, #4
   1eca0:	mov	r0, r5
   1eca4:	mov	r1, r7
   1eca8:	bl	1b6c4 <__assert_fail@plt+0xa1ac>
   1ecac:	cmp	r0, #0
   1ecb0:	bne	1ed7c <__assert_fail@plt+0xd864>
   1ecb4:	str	r5, [r4, #40]	; 0x28
   1ecb8:	ldr	r0, [r7, #4]
   1ecbc:	cmp	r0, #1
   1ecc0:	blt	1ed5c <__assert_fail@plt+0xd844>
   1ecc4:	mov	r0, #0
   1ecc8:	movw	ip, #65280	; 0xff00
   1eccc:	movt	ip, #3
   1ecd0:	add	r2, ip, #255	; 0xff
   1ecd4:	mov	lr, #32
   1ecd8:	b	1ed00 <__assert_fail@plt+0xd7e8>
   1ecdc:	ldr	r3, [r5]
   1ece0:	tst	r3, ip
   1ece4:	beq	1ecf0 <__assert_fail@plt+0xd7d8>
   1ece8:	orr	r1, r1, #128	; 0x80
   1ecec:	strb	r1, [r4, #52]	; 0x34
   1ecf0:	ldr	r1, [r7, #4]
   1ecf4:	add	r0, r0, #1
   1ecf8:	cmp	r0, r1
   1ecfc:	bge	1ed5c <__assert_fail@plt+0xd844>
   1ed00:	ldr	r1, [r7, #8]
   1ed04:	ldr	r1, [r1, r0, lsl #2]
   1ed08:	ldr	r3, [r9]
   1ed0c:	add	r5, r3, r1, lsl #3
   1ed10:	ldr	r3, [r5, #4]!
   1ed14:	and	r1, r3, r2
   1ed18:	cmp	r1, #1
   1ed1c:	beq	1ecf0 <__assert_fail@plt+0xd7d8>
   1ed20:	and	r1, lr, r3, lsr #15
   1ed24:	ldrb	r6, [r4, #52]	; 0x34
   1ed28:	orr	r1, r6, r1
   1ed2c:	strb	r1, [r4, #52]	; 0x34
   1ed30:	uxtb	r3, r3
   1ed34:	cmp	r3, #12
   1ed38:	beq	1ece8 <__assert_fail@plt+0xd7d0>
   1ed3c:	cmp	r3, #4
   1ed40:	beq	1ed54 <__assert_fail@plt+0xd83c>
   1ed44:	cmp	r3, #2
   1ed48:	bne	1ecdc <__assert_fail@plt+0xd7c4>
   1ed4c:	orr	r1, r1, #16
   1ed50:	b	1ecec <__assert_fail@plt+0xd7d4>
   1ed54:	orr	r1, r1, #64	; 0x40
   1ed58:	b	1ecec <__assert_fail@plt+0xd7d4>
   1ed5c:	mov	r0, r9
   1ed60:	mov	r1, r4
   1ed64:	mov	r2, r8
   1ed68:	bl	1bb9c <__assert_fail@plt+0xa684>
   1ed6c:	cmp	r0, #0
   1ed70:	bne	1ed88 <__assert_fail@plt+0xd870>
   1ed74:	mov	r0, r4
   1ed78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ed7c:	mov	r0, r4
   1ed80:	bl	22b58 <__assert_fail@plt+0x11640>
   1ed84:	b	1ed90 <__assert_fail@plt+0xd878>
   1ed88:	mov	r0, r4
   1ed8c:	bl	160c4 <__assert_fail@plt+0x4bac>
   1ed90:	mov	r4, #0
   1ed94:	mov	r0, r4
   1ed98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ed9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eda0:	add	fp, sp, #28
   1eda4:	sub	sp, sp, #4
   1eda8:	mov	sl, r3
   1edac:	mov	r7, r2
   1edb0:	mov	r5, r0
   1edb4:	ldr	r6, [r0]
   1edb8:	add	r0, r6, r1, lsl #3
   1edbc:	ldrb	r8, [r0, #4]
   1edc0:	cmp	r8, #7
   1edc4:	beq	1ef68 <__assert_fail@plt+0xda50>
   1edc8:	mov	r4, r1
   1edcc:	mov	r0, r7
   1edd0:	mov	r1, sl
   1edd4:	bl	1a158 <__assert_fail@plt+0x8c40>
   1edd8:	mov	r9, r0
   1eddc:	mov	r2, #0
   1ede0:	cmp	r8, #5
   1ede4:	bne	1ee28 <__assert_fail@plt+0xd910>
   1ede8:	cmp	r9, #2
   1edec:	blt	1ef54 <__assert_fail@plt+0xda3c>
   1edf0:	ldr	r0, [r5, #128]	; 0x80
   1edf4:	tst	r0, #64	; 0x40
   1edf8:	bne	1ee0c <__assert_fail@plt+0xd8f4>
   1edfc:	ldr	r1, [r7, #4]
   1ee00:	ldrb	r1, [r1, sl]
   1ee04:	cmp	r1, #10
   1ee08:	beq	1ef54 <__assert_fail@plt+0xda3c>
   1ee0c:	tst	r0, #128	; 0x80
   1ee10:	beq	1ef50 <__assert_fail@plt+0xda38>
   1ee14:	ldr	r0, [r7, #4]
   1ee18:	ldrb	r0, [r0, sl]
   1ee1c:	cmp	r0, #0
   1ee20:	movne	r2, r9
   1ee24:	b	1ef54 <__assert_fail@plt+0xda3c>
   1ee28:	cmp	r8, #6
   1ee2c:	bne	1ef54 <__assert_fail@plt+0xda3c>
   1ee30:	cmp	r9, #2
   1ee34:	blt	1ef54 <__assert_fail@plt+0xda3c>
   1ee38:	ldr	r4, [r6, r4, lsl #3]
   1ee3c:	ldr	r0, [r4, #32]
   1ee40:	cmp	r0, #0
   1ee44:	bne	1ee60 <__assert_fail@plt+0xd948>
   1ee48:	ldr	r0, [r4, #36]	; 0x24
   1ee4c:	cmp	r0, #0
   1ee50:	bne	1ee60 <__assert_fail@plt+0xd948>
   1ee54:	ldr	r0, [r4, #20]
   1ee58:	cmp	r0, #0
   1ee5c:	beq	1ef60 <__assert_fail@plt+0xda48>
   1ee60:	mov	r0, r7
   1ee64:	mov	r1, sl
   1ee68:	bl	17ec4 <__assert_fail@plt+0x69ac>
   1ee6c:	mov	r6, r0
   1ee70:	ldr	r0, [r4, #20]
   1ee74:	cmp	r0, #1
   1ee78:	blt	1eea0 <__assert_fail@plt+0xd988>
   1ee7c:	ldr	r0, [r4]
   1ee80:	mov	r1, #0
   1ee84:	ldr	r2, [r0, r1, lsl #2]
   1ee88:	cmp	r6, r2
   1ee8c:	beq	1ef1c <__assert_fail@plt+0xda04>
   1ee90:	add	r1, r1, #1
   1ee94:	ldr	r2, [r4, #20]
   1ee98:	cmp	r1, r2
   1ee9c:	blt	1ee84 <__assert_fail@plt+0xd96c>
   1eea0:	ldr	r0, [r4, #36]	; 0x24
   1eea4:	cmp	r0, #1
   1eea8:	blt	1eed8 <__assert_fail@plt+0xd9c0>
   1eeac:	mov	r5, #0
   1eeb0:	ldr	r0, [r4, #12]
   1eeb4:	ldr	r1, [r0, r5, lsl #2]
   1eeb8:	mov	r0, r6
   1eebc:	bl	1123c <iswctype@plt>
   1eec0:	cmp	r0, #0
   1eec4:	bne	1ef1c <__assert_fail@plt+0xda04>
   1eec8:	add	r5, r5, #1
   1eecc:	ldr	r0, [r4, #36]	; 0x24
   1eed0:	cmp	r5, r0
   1eed4:	blt	1eeb0 <__assert_fail@plt+0xd998>
   1eed8:	ldr	r0, [r4, #32]
   1eedc:	cmp	r0, #1
   1eee0:	blt	1ef24 <__assert_fail@plt+0xda0c>
   1eee4:	ldr	r0, [r4, #4]
   1eee8:	mov	r1, #0
   1eeec:	b	1ef00 <__assert_fail@plt+0xd9e8>
   1eef0:	add	r1, r1, #1
   1eef4:	ldr	r2, [r4, #32]
   1eef8:	cmp	r1, r2
   1eefc:	bge	1ef24 <__assert_fail@plt+0xda0c>
   1ef00:	ldr	r2, [r0, r1, lsl #2]
   1ef04:	cmp	r2, r6
   1ef08:	bhi	1eef0 <__assert_fail@plt+0xd9d8>
   1ef0c:	ldr	r2, [r4, #8]
   1ef10:	ldr	r2, [r2, r1, lsl #2]
   1ef14:	cmp	r6, r2
   1ef18:	bhi	1eef0 <__assert_fail@plt+0xd9d8>
   1ef1c:	mov	r0, r9
   1ef20:	b	1ef28 <__assert_fail@plt+0xda10>
   1ef24:	mov	r0, #0
   1ef28:	ldrb	r1, [r4, #16]
   1ef2c:	tst	r1, #1
   1ef30:	mov	r2, #0
   1ef34:	bne	1ef40 <__assert_fail@plt+0xda28>
   1ef38:	mov	r2, r0
   1ef3c:	b	1ef54 <__assert_fail@plt+0xda3c>
   1ef40:	cmp	r0, #0
   1ef44:	bgt	1ef54 <__assert_fail@plt+0xda3c>
   1ef48:	cmp	r9, #1
   1ef4c:	movle	r9, #1
   1ef50:	mov	r2, r9
   1ef54:	mov	r0, r2
   1ef58:	sub	sp, fp, #28
   1ef5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef60:	mov	r6, #0
   1ef64:	b	1ee70 <__assert_fail@plt+0xd958>
   1ef68:	ldr	r0, [r7, #4]
   1ef6c:	ldrb	r5, [r0, sl]
   1ef70:	mov	r2, #0
   1ef74:	cmp	r5, #194	; 0xc2
   1ef78:	bcc	1ef54 <__assert_fail@plt+0xda3c>
   1ef7c:	ldr	r1, [r7, #48]	; 0x30
   1ef80:	add	r2, sl, #2
   1ef84:	cmp	r2, r1
   1ef88:	ble	1ef94 <__assert_fail@plt+0xda7c>
   1ef8c:	mov	r2, #0
   1ef90:	b	1ef54 <__assert_fail@plt+0xda3c>
   1ef94:	add	r0, sl, r0
   1ef98:	ldrb	r3, [r0, #1]
   1ef9c:	cmp	r5, #223	; 0xdf
   1efa0:	bhi	1efc4 <__assert_fail@plt+0xdaac>
   1efa4:	mov	r0, #0
   1efa8:	cmp	r3, #192	; 0xc0
   1efac:	movwcc	r0, #1
   1efb0:	lsl	r2, r0, #1
   1efb4:	sxtb	r0, r3
   1efb8:	cmn	r0, #1
   1efbc:	movwgt	r2, #0
   1efc0:	b	1ef54 <__assert_fail@plt+0xda3c>
   1efc4:	cmp	r5, #239	; 0xef
   1efc8:	bhi	1efe4 <__assert_fail@plt+0xdacc>
   1efcc:	mov	r2, #3
   1efd0:	cmp	r5, #224	; 0xe0
   1efd4:	bne	1f040 <__assert_fail@plt+0xdb28>
   1efd8:	cmp	r3, #160	; 0xa0
   1efdc:	bcc	1ef8c <__assert_fail@plt+0xda74>
   1efe0:	b	1f040 <__assert_fail@plt+0xdb28>
   1efe4:	cmp	r5, #247	; 0xf7
   1efe8:	bhi	1f004 <__assert_fail@plt+0xdaec>
   1efec:	mov	r2, #4
   1eff0:	cmp	r5, #240	; 0xf0
   1eff4:	bne	1f040 <__assert_fail@plt+0xdb28>
   1eff8:	cmp	r3, #144	; 0x90
   1effc:	bcc	1ef8c <__assert_fail@plt+0xda74>
   1f000:	b	1f040 <__assert_fail@plt+0xdb28>
   1f004:	cmp	r5, #251	; 0xfb
   1f008:	bhi	1f024 <__assert_fail@plt+0xdb0c>
   1f00c:	mov	r2, #5
   1f010:	cmp	r5, #248	; 0xf8
   1f014:	bne	1f040 <__assert_fail@plt+0xdb28>
   1f018:	cmp	r3, #136	; 0x88
   1f01c:	bcc	1ef8c <__assert_fail@plt+0xda74>
   1f020:	b	1f040 <__assert_fail@plt+0xdb28>
   1f024:	cmp	r5, #253	; 0xfd
   1f028:	bhi	1ef8c <__assert_fail@plt+0xda74>
   1f02c:	mov	r2, #6
   1f030:	cmp	r5, #252	; 0xfc
   1f034:	bne	1f040 <__assert_fail@plt+0xdb28>
   1f038:	cmp	r3, #132	; 0x84
   1f03c:	bcc	1ef8c <__assert_fail@plt+0xda74>
   1f040:	add	r3, r2, sl
   1f044:	cmp	r3, r1
   1f048:	bgt	1ef8c <__assert_fail@plt+0xda74>
   1f04c:	mov	r1, #1
   1f050:	ldrb	r3, [r0, r1]
   1f054:	sxtb	r7, r3
   1f058:	cmn	r7, #1
   1f05c:	bgt	1ef8c <__assert_fail@plt+0xda74>
   1f060:	cmp	r3, #191	; 0xbf
   1f064:	bhi	1ef8c <__assert_fail@plt+0xda74>
   1f068:	add	r1, r1, #1
   1f06c:	cmp	r2, r1
   1f070:	bne	1f050 <__assert_fail@plt+0xdb38>
   1f074:	b	1ef54 <__assert_fail@plt+0xda3c>
   1f078:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f07c:	add	fp, sp, #24
   1f080:	mov	r6, r0
   1f084:	ldr	r7, [r1, #4]
   1f088:	mvn	r0, #0
   1f08c:	uxtab	r0, r0, r7
   1f090:	mov	r8, #0
   1f094:	cmp	r0, #6
   1f098:	bhi	1f1a4 <__assert_fail@plt+0xdc8c>
   1f09c:	mov	r5, r2
   1f0a0:	ldr	r2, [r6, #4]
   1f0a4:	ldrb	r2, [r2, r5]
   1f0a8:	sxtb	r3, r2
   1f0ac:	add	r4, pc, #0
   1f0b0:	ldr	pc, [r4, r0, lsl #2]
   1f0b4:	ldrdeq	pc, [r1], -r0
   1f0b8:	andeq	pc, r1, r4, lsr #3
   1f0bc:	andeq	pc, r1, r4, ror #1
   1f0c0:	andeq	pc, r1, r4, lsr #3
   1f0c4:	andeq	pc, r1, r4, lsl #2
   1f0c8:	andeq	pc, r1, r4, lsr #3
   1f0cc:	strdeq	pc, [r1], -ip
   1f0d0:	ldrb	r0, [r1]
   1f0d4:	uxtb	r1, r3
   1f0d8:	cmp	r0, r1
   1f0dc:	beq	1f138 <__assert_fail@plt+0xdc20>
   1f0e0:	b	1f1a4 <__assert_fail@plt+0xdc8c>
   1f0e4:	ldr	r0, [r1]
   1f0e8:	mov	r1, r2
   1f0ec:	bl	1d048 <__assert_fail@plt+0xbb30>
   1f0f0:	cmp	r0, #0
   1f0f4:	bne	1f138 <__assert_fail@plt+0xdc20>
   1f0f8:	b	1f1a4 <__assert_fail@plt+0xdc8c>
   1f0fc:	cmp	r3, #0
   1f100:	bmi	1f1a4 <__assert_fail@plt+0xdc8c>
   1f104:	cmp	r2, #0
   1f108:	beq	1f128 <__assert_fail@plt+0xdc10>
   1f10c:	cmp	r2, #10
   1f110:	bne	1f138 <__assert_fail@plt+0xdc20>
   1f114:	ldr	r0, [r6, #84]	; 0x54
   1f118:	ldrb	r0, [r0, #128]	; 0x80
   1f11c:	tst	r0, #64	; 0x40
   1f120:	bne	1f138 <__assert_fail@plt+0xdc20>
   1f124:	b	1f1a4 <__assert_fail@plt+0xdc8c>
   1f128:	ldr	r0, [r6, #84]	; 0x54
   1f12c:	ldrb	r0, [r0, #128]	; 0x80
   1f130:	tst	r0, #128	; 0x80
   1f134:	bne	1f1a4 <__assert_fail@plt+0xdc8c>
   1f138:	movw	r0, #65280	; 0xff00
   1f13c:	movt	r0, #3
   1f140:	tst	r7, r0
   1f144:	beq	1f1a0 <__assert_fail@plt+0xdc88>
   1f148:	ldr	r2, [r6, #88]	; 0x58
   1f14c:	mov	r0, r6
   1f150:	mov	r1, r5
   1f154:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1f158:	and	r1, r0, #1
   1f15c:	tst	r7, #1024	; 0x400
   1f160:	beq	1f16c <__assert_fail@plt+0xdc54>
   1f164:	cmp	r1, #0
   1f168:	beq	1f1a4 <__assert_fail@plt+0xdc8c>
   1f16c:	tst	r7, #2048	; 0x800
   1f170:	cmpne	r1, #0
   1f174:	bne	1f1a4 <__assert_fail@plt+0xdc8c>
   1f178:	tst	r7, #8192	; 0x2000
   1f17c:	beq	1f188 <__assert_fail@plt+0xdc70>
   1f180:	ands	r1, r0, #2
   1f184:	beq	1f1a4 <__assert_fail@plt+0xdc8c>
   1f188:	uxth	r1, r7
   1f18c:	mov	r2, #1
   1f190:	eor	r1, r2, r1, lsr #15
   1f194:	and	r0, r0, #8
   1f198:	orr	r0, r1, r0, lsr #3
   1f19c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f1a0:	mov	r8, #1
   1f1a4:	mov	r0, r8
   1f1a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f1ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1b0:	add	fp, sp, #28
   1f1b4:	sub	sp, sp, #20
   1f1b8:	mov	r5, r0
   1f1bc:	ldr	r0, [r1, #8]
   1f1c0:	cmp	r0, #1
   1f1c4:	blt	1f370 <__assert_fail@plt+0xde58>
   1f1c8:	mov	r4, r1
   1f1cc:	ldr	sl, [r5, #84]	; 0x54
   1f1d0:	mov	r8, #0
   1f1d4:	movw	r9, #65280	; 0xff00
   1f1d8:	movt	r9, #3
   1f1dc:	b	1f1f0 <__assert_fail@plt+0xdcd8>
   1f1e0:	add	r8, r8, #1
   1f1e4:	ldr	r0, [r4, #8]
   1f1e8:	cmp	r8, r0
   1f1ec:	bge	1f370 <__assert_fail@plt+0xde58>
   1f1f0:	ldr	r0, [r4, #12]
   1f1f4:	ldr	r7, [r0, r8, lsl #2]
   1f1f8:	ldr	r0, [sl]
   1f1fc:	add	r0, r0, r7, lsl #3
   1f200:	ldr	r6, [r0, #4]
   1f204:	tst	r6, #1048576	; 0x100000
   1f208:	beq	1f1e0 <__assert_fail@plt+0xdcc8>
   1f20c:	tst	r6, r9
   1f210:	beq	1f264 <__assert_fail@plt+0xdd4c>
   1f214:	ldr	r1, [r5, #40]	; 0x28
   1f218:	ldr	r2, [r5, #88]	; 0x58
   1f21c:	mov	r0, r5
   1f220:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1f224:	and	r1, r0, #1
   1f228:	tst	r6, #1024	; 0x400
   1f22c:	beq	1f238 <__assert_fail@plt+0xdd20>
   1f230:	cmp	r1, #0
   1f234:	beq	1f1e0 <__assert_fail@plt+0xdcc8>
   1f238:	tst	r6, #2048	; 0x800
   1f23c:	cmpne	r1, #0
   1f240:	bne	1f1e0 <__assert_fail@plt+0xdcc8>
   1f244:	tst	r6, #8192	; 0x2000
   1f248:	beq	1f254 <__assert_fail@plt+0xdd3c>
   1f24c:	ands	r1, r0, #2
   1f250:	beq	1f1e0 <__assert_fail@plt+0xdcc8>
   1f254:	tst	r6, #32768	; 0x8000
   1f258:	beq	1f264 <__assert_fail@plt+0xdd4c>
   1f25c:	ands	r0, r0, #8
   1f260:	beq	1f1e0 <__assert_fail@plt+0xdcc8>
   1f264:	ldr	r3, [r5, #40]	; 0x28
   1f268:	mov	r0, sl
   1f26c:	mov	r1, r7
   1f270:	mov	r2, r5
   1f274:	bl	1ed9c <__assert_fail@plt+0xd884>
   1f278:	cmp	r0, #0
   1f27c:	beq	1f1e0 <__assert_fail@plt+0xdcc8>
   1f280:	ldr	r1, [r5, #40]	; 0x28
   1f284:	ldr	r2, [r5, #120]	; 0x78
   1f288:	cmp	r2, r0
   1f28c:	movlt	r2, r0
   1f290:	str	r2, [r5, #120]	; 0x78
   1f294:	add	r6, r1, r0
   1f298:	mov	r0, r5
   1f29c:	mov	r1, r6
   1f2a0:	bl	1de48 <__assert_fail@plt+0xc930>
   1f2a4:	str	r0, [sp, #16]
   1f2a8:	cmp	r0, #0
   1f2ac:	bne	1f368 <__assert_fail@plt+0xde50>
   1f2b0:	ldr	r0, [r5, #100]	; 0x64
   1f2b4:	ldr	r9, [r0, r6, lsl #2]
   1f2b8:	ldr	r0, [sl, #12]
   1f2bc:	ldr	r1, [sl, #24]
   1f2c0:	ldr	r0, [r0, r7, lsl #2]
   1f2c4:	add	r0, r0, r0, lsl #1
   1f2c8:	add	r2, r1, r0, lsl #2
   1f2cc:	cmp	r9, #0
   1f2d0:	beq	1f2f4 <__assert_fail@plt+0xdddc>
   1f2d4:	ldr	r1, [r9, #40]	; 0x28
   1f2d8:	mov	r7, sp
   1f2dc:	mov	r0, r7
   1f2e0:	bl	1db88 <__assert_fail@plt+0xc670>
   1f2e4:	str	r0, [sp, #16]
   1f2e8:	cmp	r0, #0
   1f2ec:	beq	1f308 <__assert_fail@plt+0xddf0>
   1f2f0:	b	1f368 <__assert_fail@plt+0xde50>
   1f2f4:	vldr	d16, [r2]
   1f2f8:	ldr	r0, [r2, #8]
   1f2fc:	str	r0, [sp, #8]
   1f300:	vstr	d16, [sp]
   1f304:	mov	r7, sp
   1f308:	ldr	r2, [r5, #88]	; 0x58
   1f30c:	sub	r1, r6, #1
   1f310:	mov	r0, r5
   1f314:	bl	1cecc <__assert_fail@plt+0xb9b4>
   1f318:	mov	r3, r0
   1f31c:	add	r0, sp, #16
   1f320:	mov	r1, sl
   1f324:	mov	r2, r7
   1f328:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1f32c:	ldr	r1, [r5, #100]	; 0x64
   1f330:	str	r0, [r1, r6, lsl #2]
   1f334:	cmp	r9, #0
   1f338:	beq	1f344 <__assert_fail@plt+0xde2c>
   1f33c:	ldr	r0, [sp, #8]
   1f340:	bl	22b58 <__assert_fail@plt+0x11640>
   1f344:	ldr	r0, [r5, #100]	; 0x64
   1f348:	ldr	r0, [r0, r6, lsl #2]
   1f34c:	cmp	r0, #0
   1f350:	movw	r9, #65280	; 0xff00
   1f354:	movt	r9, #3
   1f358:	bne	1f1e0 <__assert_fail@plt+0xdcc8>
   1f35c:	ldr	r0, [sp, #16]
   1f360:	cmp	r0, #0
   1f364:	beq	1f1e0 <__assert_fail@plt+0xdcc8>
   1f368:	sub	sp, fp, #28
   1f36c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f370:	mov	r0, #0
   1f374:	sub	sp, fp, #28
   1f378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f37c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f380:	add	fp, sp, #28
   1f384:	sub	sp, sp, #68	; 0x44
   1f388:	sub	sp, sp, #14336	; 0x3800
   1f38c:	mov	r4, r1
   1f390:	mov	r7, r0
   1f394:	mov	r6, #0
   1f398:	str	r6, [r1, #44]	; 0x2c
   1f39c:	str	r6, [r1, #48]	; 0x30
   1f3a0:	sub	lr, fp, #4096	; 0x1000
   1f3a4:	sub	r2, lr, #2128	; 0x850
   1f3a8:	add	r3, sp, #16
   1f3ac:	bl	1f84c <__assert_fail@plt+0xe334>
   1f3b0:	cmp	r0, #0
   1f3b4:	ble	1f754 <__assert_fail@plt+0xe23c>
   1f3b8:	mov	r5, r0
   1f3bc:	str	r4, [sp, #4]
   1f3c0:	add	r1, r0, #1
   1f3c4:	sub	r0, fp, #3120	; 0xc30
   1f3c8:	bl	1b034 <__assert_fail@plt+0x9b1c>
   1f3cc:	str	r0, [fp, #-36]	; 0xffffffdc
   1f3d0:	cmp	r0, #0
   1f3d4:	bne	1f720 <__assert_fail@plt+0xe208>
   1f3d8:	sub	r0, fp, #3152	; 0xc50
   1f3dc:	bl	1fd38 <__assert_fail@plt+0xe820>
   1f3e0:	sub	sl, fp, #3120	; 0xc30
   1f3e4:	sub	lr, fp, #3072	; 0xc00
   1f3e8:	sub	r6, lr, #36	; 0x24
   1f3ec:	mov	r9, #0
   1f3f0:	mov	r0, #0
   1f3f4:	str	r0, [sp, #8]
   1f3f8:	str	r5, [sp, #12]
   1f3fc:	b	1f444 <__assert_fail@plt+0xdf2c>
   1f400:	ldrsb	r0, [r8, #52]	; 0x34
   1f404:	cmn	r0, #1
   1f408:	ble	1f510 <__assert_fail@plt+0xdff8>
   1f40c:	sub	lr, fp, #2048	; 0x800
   1f410:	sub	r0, lr, #36	; 0x24
   1f414:	str	r8, [r0, r9, lsl #2]
   1f418:	sub	lr, fp, #1024	; 0x400
   1f41c:	sub	r0, lr, #36	; 0x24
   1f420:	ldr	r0, [r0, r9, lsl #2]
   1f424:	str	r0, [r6, r9, lsl #2]
   1f428:	add	r0, sp, #16
   1f42c:	add	r1, r0, r9, lsl #5
   1f430:	sub	r0, fp, #3152	; 0xc50
   1f434:	bl	1fd48 <__assert_fail@plt+0xe830>
   1f438:	add	r9, r9, #1
   1f43c:	cmp	r9, r5
   1f440:	beq	1f598 <__assert_fail@plt+0xe080>
   1f444:	mov	r0, #0
   1f448:	str	r0, [fp, #-3116]	; 0xfffff3d4
   1f44c:	add	r0, r9, r9, lsl #1
   1f450:	sub	lr, fp, #4096	; 0x1000
   1f454:	sub	r1, lr, #2128	; 0x850
   1f458:	add	r0, r1, r0, lsl #2
   1f45c:	mov	r4, r0
   1f460:	ldr	r1, [r4, #4]!
   1f464:	cmp	r1, #1
   1f468:	blt	1f4d4 <__assert_fail@plt+0xdfbc>
   1f46c:	ldr	r5, [r0, #8]
   1f470:	mov	r6, #0
   1f474:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f478:	b	1f48c <__assert_fail@plt+0xdf74>
   1f47c:	ldr	r0, [r4]
   1f480:	add	r6, r6, #1
   1f484:	cmp	r6, r0
   1f488:	bge	1f4c4 <__assert_fail@plt+0xdfac>
   1f48c:	ldr	r0, [r5, r6, lsl #2]
   1f490:	ldr	r2, [r7, #12]
   1f494:	ldr	r0, [r2, r0, lsl #2]
   1f498:	cmn	r0, #1
   1f49c:	beq	1f47c <__assert_fail@plt+0xdf64>
   1f4a0:	ldr	r1, [r7, #24]
   1f4a4:	add	r0, r0, r0, lsl #1
   1f4a8:	add	r1, r1, r0, lsl #2
   1f4ac:	mov	r0, sl
   1f4b0:	bl	1b2c0 <__assert_fail@plt+0x9da8>
   1f4b4:	mov	r1, #0
   1f4b8:	cmp	r0, #0
   1f4bc:	beq	1f47c <__assert_fail@plt+0xdf64>
   1f4c0:	b	1f718 <__assert_fail@plt+0xe200>
   1f4c4:	str	r1, [fp, #-36]	; 0xffffffdc
   1f4c8:	ldr	r5, [sp, #12]
   1f4cc:	sub	lr, fp, #3072	; 0xc00
   1f4d0:	sub	r6, lr, #36	; 0x24
   1f4d4:	sub	r0, fp, #36	; 0x24
   1f4d8:	mov	r1, r7
   1f4dc:	mov	r2, sl
   1f4e0:	mov	r3, #0
   1f4e4:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1f4e8:	mov	r8, r0
   1f4ec:	sub	lr, fp, #1024	; 0x400
   1f4f0:	sub	r0, lr, #36	; 0x24
   1f4f4:	str	r8, [r0, r9, lsl #2]
   1f4f8:	cmp	r8, #0
   1f4fc:	bne	1f400 <__assert_fail@plt+0xdee8>
   1f500:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f504:	cmp	r0, #0
   1f508:	beq	1f400 <__assert_fail@plt+0xdee8>
   1f50c:	b	1f720 <__assert_fail@plt+0xe208>
   1f510:	sub	r0, fp, #36	; 0x24
   1f514:	mov	r1, r7
   1f518:	mov	r2, sl
   1f51c:	mov	r3, #1
   1f520:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1f524:	sub	lr, fp, #2048	; 0x800
   1f528:	sub	r1, lr, #36	; 0x24
   1f52c:	str	r0, [r1, r9, lsl #2]
   1f530:	cmp	r0, #0
   1f534:	bne	1f544 <__assert_fail@plt+0xe02c>
   1f538:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f53c:	cmp	r1, #0
   1f540:	bne	1f720 <__assert_fail@plt+0xe208>
   1f544:	cmp	r8, r0
   1f548:	beq	1f568 <__assert_fail@plt+0xe050>
   1f54c:	ldr	r0, [r7, #92]	; 0x5c
   1f550:	cmp	r0, #1
   1f554:	mov	r0, #0
   1f558:	movwgt	r0, #1
   1f55c:	ldr	r1, [sp, #8]
   1f560:	orr	r1, r1, r0
   1f564:	str	r1, [sp, #8]
   1f568:	sub	r0, fp, #36	; 0x24
   1f56c:	mov	r1, r7
   1f570:	mov	r2, sl
   1f574:	mov	r3, #2
   1f578:	bl	1b7b0 <__assert_fail@plt+0xa298>
   1f57c:	str	r0, [r6, r9, lsl #2]
   1f580:	cmp	r0, #0
   1f584:	bne	1f428 <__assert_fail@plt+0xdf10>
   1f588:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f58c:	cmp	r0, #0
   1f590:	beq	1f428 <__assert_fail@plt+0xdf10>
   1f594:	b	1f720 <__assert_fail@plt+0xe208>
   1f598:	ldr	r0, [sp, #8]
   1f59c:	tst	r0, #1
   1f5a0:	bne	1f778 <__assert_fail@plt+0xe260>
   1f5a4:	mov	r0, #4
   1f5a8:	mov	r1, #256	; 0x100
   1f5ac:	bl	22614 <__assert_fail@plt+0x110fc>
   1f5b0:	mov	r8, r0
   1f5b4:	ldr	r0, [sp, #4]
   1f5b8:	str	r8, [r0, #44]	; 0x2c
   1f5bc:	cmp	r8, #0
   1f5c0:	beq	1f720 <__assert_fail@plt+0xe208>
   1f5c4:	mov	r0, #0
   1f5c8:	mov	r1, #0
   1f5cc:	add	r5, sp, #16
   1f5d0:	mov	r9, r5
   1f5d4:	b	1f5e8 <__assert_fail@plt+0xe0d0>
   1f5d8:	add	r9, r9, #4
   1f5dc:	add	r1, r1, #1
   1f5e0:	cmp	r1, #8
   1f5e4:	beq	1f66c <__assert_fail@plt+0xe154>
   1f5e8:	sub	r2, fp, #3152	; 0xc50
   1f5ec:	ldr	r2, [r2, r1, lsl #2]
   1f5f0:	cmp	r2, #0
   1f5f4:	beq	1f5d8 <__assert_fail@plt+0xe0c0>
   1f5f8:	add	r3, r7, r1, lsl #2
   1f5fc:	add	ip, r3, #96	; 0x60
   1f600:	lsl	r4, r1, #5
   1f604:	mov	r6, #1
   1f608:	tst	r2, #1
   1f60c:	bne	1f62c <__assert_fail@plt+0xe114>
   1f610:	add	r4, r4, #1
   1f614:	lsr	r3, r2, #1
   1f618:	lsl	r6, r6, #1
   1f61c:	cmp	r0, r2, lsr #1
   1f620:	mov	r2, r3
   1f624:	bne	1f608 <__assert_fail@plt+0xe0f0>
   1f628:	b	1f5d8 <__assert_fail@plt+0xe0c0>
   1f62c:	mov	lr, #0
   1f630:	ldr	r3, [r9, lr, lsl #3]
   1f634:	add	lr, lr, #4
   1f638:	tst	r3, r6
   1f63c:	beq	1f630 <__assert_fail@plt+0xe118>
   1f640:	ldr	r3, [ip]
   1f644:	tst	r3, r6
   1f648:	sub	r3, fp, #2048	; 0x800
   1f64c:	sub	r3, r3, #36	; 0x24
   1f650:	sub	r5, fp, #1024	; 0x400
   1f654:	sub	r5, r5, #36	; 0x24
   1f658:	moveq	r3, r5
   1f65c:	add	r3, r3, lr
   1f660:	ldr	r3, [r3, #-4]
   1f664:	str	r3, [r8, r4, lsl #2]
   1f668:	b	1f610 <__assert_fail@plt+0xe0f8>
   1f66c:	sub	lr, fp, #3072	; 0xc00
   1f670:	sub	r6, lr, #36	; 0x24
   1f674:	sub	r0, fp, #3152	; 0xc50
   1f678:	mov	r1, #10
   1f67c:	bl	1d048 <__assert_fail@plt+0xbb30>
   1f680:	cmp	r0, #0
   1f684:	beq	1f6d8 <__assert_fail@plt+0xe1c0>
   1f688:	ldr	r0, [sp, #12]
   1f68c:	cmp	r0, #1
   1f690:	blt	1f6d8 <__assert_fail@plt+0xe1c0>
   1f694:	add	r5, sp, #16
   1f698:	ldr	r4, [sp, #12]
   1f69c:	mov	r0, r5
   1f6a0:	mov	r1, #10
   1f6a4:	bl	1d048 <__assert_fail@plt+0xbb30>
   1f6a8:	cmp	r0, #0
   1f6ac:	bne	1f6c4 <__assert_fail@plt+0xe1ac>
   1f6b0:	add	r5, r5, #32
   1f6b4:	subs	r4, r4, #1
   1f6b8:	add	r6, r6, #4
   1f6bc:	bne	1f69c <__assert_fail@plt+0xe184>
   1f6c0:	b	1f6d8 <__assert_fail@plt+0xe1c0>
   1f6c4:	ldr	r0, [r6]
   1f6c8:	str	r0, [r8, #40]	; 0x28
   1f6cc:	ldr	r1, [sp, #8]
   1f6d0:	tst	r1, #1
   1f6d4:	strne	r0, [r8, #1064]	; 0x428
   1f6d8:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   1f6dc:	bl	22b58 <__assert_fail@plt+0x11640>
   1f6e0:	mov	r6, #1
   1f6e4:	ldr	r5, [sp, #12]
   1f6e8:	cmp	r5, #1
   1f6ec:	blt	1f70c <__assert_fail@plt+0xe1f4>
   1f6f0:	sub	lr, fp, #4096	; 0x1000
   1f6f4:	sub	r0, lr, #2128	; 0x850
   1f6f8:	add	r4, r0, #8
   1f6fc:	ldr	r0, [r4], #12
   1f700:	bl	22b58 <__assert_fail@plt+0x11640>
   1f704:	subs	r5, r5, #1
   1f708:	bne	1f6fc <__assert_fail@plt+0xe1e4>
   1f70c:	mov	r0, r6
   1f710:	sub	sp, fp, #28
   1f714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f718:	str	r0, [fp, #-36]	; 0xffffffdc
   1f71c:	ldr	r5, [sp, #12]
   1f720:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   1f724:	bl	22b58 <__assert_fail@plt+0x11640>
   1f728:	mov	r6, #0
   1f72c:	cmp	r5, #1
   1f730:	blt	1f70c <__assert_fail@plt+0xe1f4>
   1f734:	sub	lr, fp, #4096	; 0x1000
   1f738:	sub	r0, lr, #2128	; 0x850
   1f73c:	add	r4, r0, #8
   1f740:	ldr	r0, [r4], #12
   1f744:	bl	22b58 <__assert_fail@plt+0x11640>
   1f748:	subs	r5, r5, #1
   1f74c:	bne	1f740 <__assert_fail@plt+0xe228>
   1f750:	b	1f70c <__assert_fail@plt+0xe1f4>
   1f754:	bne	1f70c <__assert_fail@plt+0xe1f4>
   1f758:	mov	r0, #4
   1f75c:	mov	r1, #256	; 0x100
   1f760:	bl	22614 <__assert_fail@plt+0x110fc>
   1f764:	mov	r6, r0
   1f768:	str	r0, [r4, #44]	; 0x2c
   1f76c:	cmp	r0, #0
   1f770:	movwne	r6, #1
   1f774:	b	1f70c <__assert_fail@plt+0xe1f4>
   1f778:	mov	r0, #4
   1f77c:	mov	r1, #512	; 0x200
   1f780:	bl	22614 <__assert_fail@plt+0x110fc>
   1f784:	mov	r8, r0
   1f788:	ldr	r0, [sp, #4]
   1f78c:	str	r8, [r0, #48]	; 0x30
   1f790:	cmp	r8, #0
   1f794:	beq	1f720 <__assert_fail@plt+0xe208>
   1f798:	sub	lr, fp, #1024	; 0x400
   1f79c:	sub	r0, lr, #36	; 0x24
   1f7a0:	sub	ip, r0, #4
   1f7a4:	sub	lr, fp, #2048	; 0x800
   1f7a8:	sub	r0, lr, #36	; 0x24
   1f7ac:	sub	lr, r0, #4
   1f7b0:	mov	r2, #0
   1f7b4:	add	r3, sp, #16
   1f7b8:	mov	r7, #0
   1f7bc:	b	1f7d0 <__assert_fail@plt+0xe2b8>
   1f7c0:	add	r3, r3, #4
   1f7c4:	add	r7, r7, #1
   1f7c8:	cmp	r7, #8
   1f7cc:	beq	1f674 <__assert_fail@plt+0xe15c>
   1f7d0:	sub	r0, fp, #3152	; 0xc50
   1f7d4:	ldr	r5, [r0, r7, lsl #2]
   1f7d8:	cmp	r5, #0
   1f7dc:	beq	1f7c0 <__assert_fail@plt+0xe2a8>
   1f7e0:	lsl	r0, r7, #5
   1f7e4:	mov	r1, #1
   1f7e8:	tst	r5, #1
   1f7ec:	bne	1f80c <__assert_fail@plt+0xe2f4>
   1f7f0:	add	r0, r0, #1
   1f7f4:	lsr	r4, r5, #1
   1f7f8:	lsl	r1, r1, #1
   1f7fc:	cmp	r2, r5, lsr #1
   1f800:	mov	r5, r4
   1f804:	bne	1f7e8 <__assert_fail@plt+0xe2d0>
   1f808:	b	1f7c0 <__assert_fail@plt+0xe2a8>
   1f80c:	mov	r4, r3
   1f810:	mov	sl, ip
   1f814:	mov	r9, lr
   1f818:	add	sl, sl, #4
   1f81c:	add	r9, r9, #4
   1f820:	ldr	r6, [r4], #32
   1f824:	tst	r6, r1
   1f828:	beq	1f818 <__assert_fail@plt+0xe300>
   1f82c:	ldr	r4, [sl]
   1f830:	mov	r6, r8
   1f834:	str	r4, [r6, r0, lsl #2]!
   1f838:	ldr	r4, [r9]
   1f83c:	str	r4, [r6, #1024]	; 0x400
   1f840:	sub	r4, fp, #3072	; 0xc00
   1f844:	sub	r6, r4, #36	; 0x24
   1f848:	b	1f7f0 <__assert_fail@plt+0xe2d8>
   1f84c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f850:	add	fp, sp, #28
   1f854:	sub	sp, sp, #140	; 0x8c
   1f858:	str	r3, [sp, #32]
   1f85c:	str	r2, [sp, #28]
   1f860:	mov	r9, r1
   1f864:	mov	sl, r0
   1f868:	sub	r7, fp, #64	; 0x40
   1f86c:	mov	r0, r7
   1f870:	bl	1fd38 <__assert_fail@plt+0xe820>
   1f874:	ldr	r0, [r9, #8]
   1f878:	cmp	r0, #1
   1f87c:	blt	1fd00 <__assert_fail@plt+0xe7e8>
   1f880:	add	r6, sl, #96	; 0x60
   1f884:	mov	r0, #0
   1f888:	add	r5, sp, #72	; 0x48
   1f88c:	mov	r4, #0
   1f890:	str	sl, [sp]
   1f894:	str	r6, [sp, #8]
   1f898:	str	r9, [sp, #16]
   1f89c:	b	1f8c4 <__assert_fail@plt+0xe3ac>
   1f8a0:	mov	r0, r7
   1f8a4:	bl	1fd38 <__assert_fail@plt+0xe820>
   1f8a8:	ldr	r9, [sp, #16]
   1f8ac:	ldr	r0, [r9, #8]
   1f8b0:	ldr	r1, [sp, #36]	; 0x24
   1f8b4:	add	r1, r1, #1
   1f8b8:	cmp	r1, r0
   1f8bc:	mov	r0, r1
   1f8c0:	bge	1fd04 <__assert_fail@plt+0xe7ec>
   1f8c4:	str	r0, [sp, #36]	; 0x24
   1f8c8:	ldr	r0, [r9, #12]
   1f8cc:	ldr	r1, [sp, #36]	; 0x24
   1f8d0:	ldr	r8, [r0, r1, lsl #2]
   1f8d4:	ldr	r1, [sl]
   1f8d8:	add	r0, r1, r8, lsl #3
   1f8dc:	ldr	r9, [r0, #4]!
   1f8e0:	str	r0, [sp, #12]
   1f8e4:	uxtb	r0, r9
   1f8e8:	cmp	r0, #1
   1f8ec:	str	r0, [sp, #24]
   1f8f0:	bne	1f908 <__assert_fail@plt+0xe3f0>
   1f8f4:	str	r1, [sp, #20]
   1f8f8:	ldrb	r1, [r1, r8, lsl #3]
   1f8fc:	mov	r0, r7
   1f900:	bl	194f4 <__assert_fail@plt+0x7fdc>
   1f904:	b	1f9a0 <__assert_fail@plt+0xe488>
   1f908:	cmp	r0, #7
   1f90c:	beq	1f934 <__assert_fail@plt+0xe41c>
   1f910:	cmp	r0, #5
   1f914:	beq	1f950 <__assert_fail@plt+0xe438>
   1f918:	cmp	r0, #3
   1f91c:	bne	1f8a8 <__assert_fail@plt+0xe390>
   1f920:	str	r1, [sp, #20]
   1f924:	ldr	r1, [r1, r8, lsl #3]
   1f928:	mov	r0, r7
   1f92c:	bl	1fd48 <__assert_fail@plt+0xe830>
   1f930:	b	1f9a0 <__assert_fail@plt+0xe488>
   1f934:	str	r1, [sp, #20]
   1f938:	mvn	r0, #0
   1f93c:	str	r0, [fp, #-52]	; 0xffffffcc
   1f940:	str	r0, [fp, #-56]	; 0xffffffc8
   1f944:	str	r0, [fp, #-60]	; 0xffffffc4
   1f948:	str	r0, [fp, #-64]	; 0xffffffc0
   1f94c:	b	1f978 <__assert_fail@plt+0xe460>
   1f950:	ldr	r0, [sl, #92]	; 0x5c
   1f954:	cmp	r0, #2
   1f958:	str	r1, [sp, #20]
   1f95c:	blt	1f970 <__assert_fail@plt+0xe458>
   1f960:	ldr	r1, [sl, #60]	; 0x3c
   1f964:	mov	r0, r7
   1f968:	bl	1fd48 <__assert_fail@plt+0xe830>
   1f96c:	b	1f978 <__assert_fail@plt+0xe460>
   1f970:	mov	r0, r7
   1f974:	bl	1fd6c <__assert_fail@plt+0xe854>
   1f978:	ldrb	r0, [sl, #128]	; 0x80
   1f97c:	tst	r0, #64	; 0x40
   1f980:	moveq	r0, r7
   1f984:	moveq	r1, #10
   1f988:	bleq	1fd94 <__assert_fail@plt+0xe87c>
   1f98c:	ldrb	r0, [sl, #128]	; 0x80
   1f990:	tst	r0, #128	; 0x80
   1f994:	movne	r0, r7
   1f998:	movne	r1, #0
   1f99c:	blne	1fd94 <__assert_fail@plt+0xe87c>
   1f9a0:	movw	r0, #65280	; 0xff00
   1f9a4:	movt	r0, #3
   1f9a8:	ands	r0, r9, r0
   1f9ac:	beq	1fb2c <__assert_fail@plt+0xe614>
   1f9b0:	tst	r9, #8192	; 0x2000
   1f9b4:	beq	1f9e8 <__assert_fail@plt+0xe4d0>
   1f9b8:	mov	r0, r7
   1f9bc:	mov	r1, #10
   1f9c0:	bl	1d048 <__assert_fail@plt+0xbb30>
   1f9c4:	str	r0, [sp, #4]
   1f9c8:	mov	r0, r7
   1f9cc:	bl	1fd38 <__assert_fail@plt+0xe820>
   1f9d0:	ldr	r0, [sp, #4]
   1f9d4:	cmp	r0, #0
   1f9d8:	beq	1f8a8 <__assert_fail@plt+0xe390>
   1f9dc:	mov	r0, r7
   1f9e0:	mov	r1, #10
   1f9e4:	bl	194f4 <__assert_fail@plt+0x7fdc>
   1f9e8:	tst	r9, #32768	; 0x8000
   1f9ec:	bne	1f8a0 <__assert_fail@plt+0xe388>
   1f9f0:	tst	r9, #1024	; 0x400
   1f9f4:	beq	1fa90 <__assert_fail@plt+0xe578>
   1f9f8:	ldr	r0, [sp, #24]
   1f9fc:	cmp	r0, #1
   1fa00:	bne	1fa14 <__assert_fail@plt+0xe4fc>
   1fa04:	ldr	r0, [sp, #12]
   1fa08:	ldrb	r0, [r0, #2]
   1fa0c:	tst	r0, #64	; 0x40
   1fa10:	beq	1f8a0 <__assert_fail@plt+0xe388>
   1fa14:	ldr	r0, [sl, #92]	; 0x5c
   1fa18:	cmp	r0, #1
   1fa1c:	ble	1fa60 <__assert_fail@plt+0xe548>
   1fa20:	ldr	r1, [sl, #60]	; 0x3c
   1fa24:	mov	r0, #0
   1fa28:	mov	r2, #0
   1fa2c:	ldr	r3, [r6, r2, lsl #2]
   1fa30:	ldr	r6, [r1, r2, lsl #2]
   1fa34:	mvn	r6, r6
   1fa38:	orr	r3, r3, r6
   1fa3c:	ldr	r6, [r7, r2, lsl #2]
   1fa40:	and	r3, r6, r3
   1fa44:	ldr	r6, [sp, #8]
   1fa48:	str	r3, [r7, r2, lsl #2]
   1fa4c:	orr	r0, r3, r0
   1fa50:	add	r2, r2, #1
   1fa54:	cmp	r2, #8
   1fa58:	bne	1fa2c <__assert_fail@plt+0xe514>
   1fa5c:	b	1fa88 <__assert_fail@plt+0xe570>
   1fa60:	mov	r0, #0
   1fa64:	mov	r1, #0
   1fa68:	ldr	r2, [r6, r1, lsl #2]
   1fa6c:	ldr	r3, [r7, r1, lsl #2]
   1fa70:	and	r2, r3, r2
   1fa74:	str	r2, [r7, r1, lsl #2]
   1fa78:	orr	r0, r2, r0
   1fa7c:	add	r1, r1, #1
   1fa80:	cmp	r1, #8
   1fa84:	bne	1fa68 <__assert_fail@plt+0xe550>
   1fa88:	cmp	r0, #0
   1fa8c:	beq	1f8a8 <__assert_fail@plt+0xe390>
   1fa90:	tst	r9, #2048	; 0x800
   1fa94:	beq	1fb2c <__assert_fail@plt+0xe614>
   1fa98:	ldr	r0, [sp, #24]
   1fa9c:	cmp	r0, #1
   1faa0:	bne	1fab4 <__assert_fail@plt+0xe59c>
   1faa4:	ldr	r0, [sp, #12]
   1faa8:	ldrb	r0, [r0, #2]
   1faac:	tst	r0, #64	; 0x40
   1fab0:	bne	1f8a0 <__assert_fail@plt+0xe388>
   1fab4:	ldr	r0, [sl, #92]	; 0x5c
   1fab8:	cmp	r0, #1
   1fabc:	ble	1fafc <__assert_fail@plt+0xe5e4>
   1fac0:	ldr	r1, [sl, #60]	; 0x3c
   1fac4:	mov	r0, #0
   1fac8:	mov	r2, #0
   1facc:	ldr	r3, [r6, r2, lsl #2]
   1fad0:	ldr	r6, [r1, r2, lsl #2]
   1fad4:	and	r3, r6, r3
   1fad8:	ldr	r6, [r7, r2, lsl #2]
   1fadc:	bic	r3, r6, r3
   1fae0:	ldr	r6, [sp, #8]
   1fae4:	str	r3, [r7, r2, lsl #2]
   1fae8:	orr	r0, r3, r0
   1faec:	add	r2, r2, #1
   1faf0:	cmp	r2, #8
   1faf4:	bne	1facc <__assert_fail@plt+0xe5b4>
   1faf8:	b	1fb24 <__assert_fail@plt+0xe60c>
   1fafc:	mov	r0, #0
   1fb00:	mov	r1, #0
   1fb04:	ldr	r2, [r6, r1, lsl #2]
   1fb08:	ldr	r3, [r7, r1, lsl #2]
   1fb0c:	bic	r2, r3, r2
   1fb10:	str	r2, [r7, r1, lsl #2]
   1fb14:	orr	r0, r2, r0
   1fb18:	add	r1, r1, #1
   1fb1c:	cmp	r1, #8
   1fb20:	bne	1fb04 <__assert_fail@plt+0xe5ec>
   1fb24:	cmp	r0, #0
   1fb28:	beq	1f8a8 <__assert_fail@plt+0xe390>
   1fb2c:	cmp	r4, #1
   1fb30:	blt	1fc94 <__assert_fail@plt+0xe77c>
   1fb34:	str	r8, [sp, #12]
   1fb38:	mov	r8, #0
   1fb3c:	ldr	sl, [sp, #32]
   1fb40:	ldr	r9, [sp, #16]
   1fb44:	ldr	r6, [sp, #24]
   1fb48:	cmp	r6, #1
   1fb4c:	bne	1fb90 <__assert_fail@plt+0xe678>
   1fb50:	b	1fb70 <__assert_fail@plt+0xe658>
   1fb54:	mov	r4, ip
   1fb58:	add	sl, sl, #32
   1fb5c:	add	r8, r8, #1
   1fb60:	cmp	r8, r4
   1fb64:	bge	1fca4 <__assert_fail@plt+0xe78c>
   1fb68:	cmp	r6, #1
   1fb6c:	bne	1fb90 <__assert_fail@plt+0xe678>
   1fb70:	ldr	r0, [sp, #12]
   1fb74:	ldr	r1, [sp, #20]
   1fb78:	ldrb	r1, [r1, r0, lsl #3]
   1fb7c:	ldr	r0, [sp, #32]
   1fb80:	add	r0, r0, r8, lsl #5
   1fb84:	bl	1d048 <__assert_fail@plt+0xbb30>
   1fb88:	cmp	r0, #0
   1fb8c:	beq	1fb58 <__assert_fail@plt+0xe640>
   1fb90:	mov	ip, r4
   1fb94:	mov	r0, #0
   1fb98:	mov	r1, #0
   1fb9c:	ldr	r2, [r7, r1, lsl #2]
   1fba0:	ldr	r3, [sl, r1, lsl #2]
   1fba4:	and	r2, r3, r2
   1fba8:	str	r2, [r5, r1, lsl #2]
   1fbac:	orr	r0, r2, r0
   1fbb0:	add	r1, r1, #1
   1fbb4:	cmp	r1, #8
   1fbb8:	bne	1fb9c <__assert_fail@plt+0xe684>
   1fbbc:	cmp	r0, #0
   1fbc0:	beq	1fb54 <__assert_fail@plt+0xe63c>
   1fbc4:	mov	r9, #0
   1fbc8:	mov	r0, #0
   1fbcc:	mov	r1, #0
   1fbd0:	ldr	r2, [r7, r1, lsl #2]
   1fbd4:	ldr	r3, [sl, r1, lsl #2]
   1fbd8:	bic	r4, r3, r2
   1fbdc:	add	r6, sp, #40	; 0x28
   1fbe0:	str	r4, [r6, r1, lsl #2]
   1fbe4:	bic	r2, r2, r3
   1fbe8:	str	r2, [r7, r1, lsl #2]
   1fbec:	orr	r9, r2, r9
   1fbf0:	orr	r0, r4, r0
   1fbf4:	add	r1, r1, #1
   1fbf8:	cmp	r1, #8
   1fbfc:	bne	1fbd0 <__assert_fail@plt+0xe6b8>
   1fc00:	cmp	r0, #0
   1fc04:	beq	1fc50 <__assert_fail@plt+0xe738>
   1fc08:	mov	r4, ip
   1fc0c:	ldr	r6, [sp, #32]
   1fc10:	add	r0, r6, ip, lsl #5
   1fc14:	add	r1, sp, #40	; 0x28
   1fc18:	bl	1fdb8 <__assert_fail@plt+0xe8a0>
   1fc1c:	add	r0, r6, r8, lsl #5
   1fc20:	mov	r1, r5
   1fc24:	bl	1fdb8 <__assert_fail@plt+0xe8a0>
   1fc28:	add	r0, r4, r4, lsl #1
   1fc2c:	ldr	r2, [sp, #28]
   1fc30:	add	r0, r2, r0, lsl #2
   1fc34:	add	r1, r8, r8, lsl #1
   1fc38:	add	r1, r2, r1, lsl #2
   1fc3c:	bl	1b6c4 <__assert_fail@plt+0xa1ac>
   1fc40:	cmp	r0, #0
   1fc44:	bne	1fd10 <__assert_fail@plt+0xe7f8>
   1fc48:	add	r4, r4, #1
   1fc4c:	b	1fc54 <__assert_fail@plt+0xe73c>
   1fc50:	mov	r4, ip
   1fc54:	ldr	r0, [sp, #16]
   1fc58:	mov	r6, r0
   1fc5c:	ldr	r0, [r0, #12]
   1fc60:	ldr	r1, [sp, #36]	; 0x24
   1fc64:	ldr	r1, [r0, r1, lsl #2]
   1fc68:	add	r0, r8, r8, lsl #1
   1fc6c:	ldr	r2, [sp, #28]
   1fc70:	add	r0, r2, r0, lsl #2
   1fc74:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   1fc78:	cmp	r0, #0
   1fc7c:	beq	1fd10 <__assert_fail@plt+0xe7f8>
   1fc80:	cmp	r9, #0
   1fc84:	beq	1fca0 <__assert_fail@plt+0xe788>
   1fc88:	mov	r9, r6
   1fc8c:	ldr	r6, [sp, #24]
   1fc90:	b	1fb58 <__assert_fail@plt+0xe640>
   1fc94:	mov	r8, #0
   1fc98:	ldr	r9, [sp, #16]
   1fc9c:	b	1fca4 <__assert_fail@plt+0xe78c>
   1fca0:	mov	r9, r6
   1fca4:	cmp	r8, r4
   1fca8:	ldr	sl, [sp]
   1fcac:	bne	1fcf8 <__assert_fail@plt+0xe7e0>
   1fcb0:	ldr	r0, [sp, #32]
   1fcb4:	add	r0, r0, r4, lsl #5
   1fcb8:	mov	r1, r7
   1fcbc:	bl	1fdb8 <__assert_fail@plt+0xe8a0>
   1fcc0:	ldr	r0, [r9, #12]
   1fcc4:	ldr	r1, [sp, #36]	; 0x24
   1fcc8:	ldr	r1, [r0, r1, lsl #2]
   1fccc:	add	r0, r4, r4, lsl #1
   1fcd0:	ldr	r2, [sp, #28]
   1fcd4:	add	r0, r2, r0, lsl #2
   1fcd8:	bl	1add4 <__assert_fail@plt+0x98bc>
   1fcdc:	cmp	r0, #0
   1fce0:	ldr	r6, [sp, #8]
   1fce4:	bne	1fd10 <__assert_fail@plt+0xe7f8>
   1fce8:	mov	r0, r7
   1fcec:	bl	1fd38 <__assert_fail@plt+0xe820>
   1fcf0:	add	r4, r4, #1
   1fcf4:	b	1f8ac <__assert_fail@plt+0xe394>
   1fcf8:	ldr	r6, [sp, #8]
   1fcfc:	b	1f8ac <__assert_fail@plt+0xe394>
   1fd00:	mov	r4, #0
   1fd04:	mov	r0, r4
   1fd08:	sub	sp, fp, #28
   1fd0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd10:	cmp	r4, #1
   1fd14:	blt	1fd30 <__assert_fail@plt+0xe818>
   1fd18:	ldr	r0, [sp, #28]
   1fd1c:	add	r5, r0, #8
   1fd20:	ldr	r0, [r5], #12
   1fd24:	bl	22b58 <__assert_fail@plt+0x11640>
   1fd28:	subs	r4, r4, #1
   1fd2c:	bne	1fd20 <__assert_fail@plt+0xe808>
   1fd30:	mvn	r4, #0
   1fd34:	b	1fd04 <__assert_fail@plt+0xe7ec>
   1fd38:	vmov.i32	q8, #0	; 0x00000000
   1fd3c:	vst1.32	{d16-d17}, [r0]!
   1fd40:	vst1.32	{d16-d17}, [r0]
   1fd44:	bx	lr
   1fd48:	mov	r2, #0
   1fd4c:	ldr	ip, [r1, r2, lsl #2]
   1fd50:	ldr	r3, [r0, r2, lsl #2]
   1fd54:	orr	r3, r3, ip
   1fd58:	str	r3, [r0, r2, lsl #2]
   1fd5c:	add	r2, r2, #1
   1fd60:	cmp	r2, #8
   1fd64:	bne	1fd4c <__assert_fail@plt+0xe834>
   1fd68:	bx	lr
   1fd6c:	mvn	r1, #0
   1fd70:	str	r1, [r0]
   1fd74:	str	r1, [r0, #4]
   1fd78:	str	r1, [r0, #8]
   1fd7c:	str	r1, [r0, #12]
   1fd80:	str	r1, [r0, #16]
   1fd84:	str	r1, [r0, #20]
   1fd88:	str	r1, [r0, #24]
   1fd8c:	str	r1, [r0, #28]
   1fd90:	bx	lr
   1fd94:	asr	r2, r1, #31
   1fd98:	add	r2, r1, r2, lsr #27
   1fd9c:	asr	r2, r2, #5
   1fda0:	ldr	ip, [r0, r2, lsl #2]
   1fda4:	and	r1, r1, #31
   1fda8:	mov	r3, #1
   1fdac:	bic	r1, ip, r3, lsl r1
   1fdb0:	str	r1, [r0, r2, lsl #2]
   1fdb4:	bx	lr
   1fdb8:	vld1.32	{d16-d17}, [r1]!
   1fdbc:	vld1.32	{d18-d19}, [r1]
   1fdc0:	vst1.32	{d16-d17}, [r0]!
   1fdc4:	vst1.32	{d18-d19}, [r0]
   1fdc8:	bx	lr
   1fdcc:	ldr	r0, [r0]
   1fdd0:	add	r0, r0, r1, lsl #3
   1fdd4:	ldr	r1, [r0, #4]
   1fdd8:	uxtb	r3, r1
   1fddc:	mov	r0, #0
   1fde0:	cmp	r3, #2
   1fde4:	bne	1fe3c <__assert_fail@plt+0xe924>
   1fde8:	movw	r3, #65280	; 0xff00
   1fdec:	movt	r3, #3
   1fdf0:	tst	r1, r3
   1fdf4:	moveq	r0, #1
   1fdf8:	bxeq	lr
   1fdfc:	ands	ip, r2, #1
   1fe00:	bne	1fe0c <__assert_fail@plt+0xe8f4>
   1fe04:	ands	r3, r1, #1024	; 0x400
   1fe08:	bne	1fe3c <__assert_fail@plt+0xe924>
   1fe0c:	cmp	ip, #0
   1fe10:	andsne	r3, r1, #2048	; 0x800
   1fe14:	bne	1fe3c <__assert_fail@plt+0xe924>
   1fe18:	tst	r2, #2
   1fe1c:	bne	1fe28 <__assert_fail@plt+0xe910>
   1fe20:	ands	r3, r1, #8192	; 0x2000
   1fe24:	bxne	lr
   1fe28:	uxth	r0, r1
   1fe2c:	mov	r1, #1
   1fe30:	eor	r0, r1, r0, lsr #15
   1fe34:	and	r1, r2, #8
   1fe38:	orr	r0, r0, r1, lsr #3
   1fe3c:	bx	lr
   1fe40:	mov	ip, #0
   1fe44:	str	ip, [r0, #20]
   1fe48:	str	ip, [r0, #16]
   1fe4c:	stm	r0, {r1, r2, r3}
   1fe50:	str	ip, [r0, #24]
   1fe54:	ldr	r1, [sp]
   1fe58:	str	r1, [r0, #12]
   1fe5c:	bx	lr
   1fe60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe64:	add	fp, sp, #28
   1fe68:	sub	sp, sp, #12
   1fe6c:	mov	sl, r1
   1fe70:	mov	r6, r0
   1fe74:	ldr	r1, [r1, #8]
   1fe78:	ldr	r5, [sl, #12]
   1fe7c:	mov	r0, sp
   1fe80:	bl	1add4 <__assert_fail@plt+0x98bc>
   1fe84:	cmp	r0, #0
   1fe88:	bne	1ff70 <__assert_fail@plt+0xea58>
   1fe8c:	mov	r3, sp
   1fe90:	mov	r0, r6
   1fe94:	mov	r1, sl
   1fe98:	mov	r2, r5
   1fe9c:	bl	2002c <__assert_fail@plt+0xeb14>
   1fea0:	cmp	r0, #0
   1fea4:	bne	1ff3c <__assert_fail@plt+0xea24>
   1fea8:	mov	r9, #0
   1feac:	mov	r8, sp
   1feb0:	mov	r1, #0
   1feb4:	cmp	r5, #1
   1feb8:	bge	1fee8 <__assert_fail@plt+0xe9d0>
   1febc:	b	1ff44 <__assert_fail@plt+0xea2c>
   1fec0:	mov	r0, r6
   1fec4:	mov	r1, sl
   1fec8:	mov	r2, r5
   1fecc:	mov	r3, r8
   1fed0:	bl	2002c <__assert_fail@plt+0xeb14>
   1fed4:	cmp	r0, #0
   1fed8:	mov	r1, r4
   1fedc:	bne	1ff3c <__assert_fail@plt+0xea24>
   1fee0:	cmp	r5, #1
   1fee4:	blt	1ff44 <__assert_fail@plt+0xea2c>
   1fee8:	ldr	r0, [sl]
   1feec:	ldr	r2, [r0, r5, lsl #2]
   1fef0:	cmp	r2, #0
   1fef4:	mov	r4, #0
   1fef8:	addeq	r4, r1, #1
   1fefc:	ldr	r1, [r6, #120]	; 0x78
   1ff00:	cmp	r4, r1
   1ff04:	bgt	1ff4c <__assert_fail@plt+0xea34>
   1ff08:	str	r9, [sp, #4]
   1ff0c:	ldr	r0, [r6, #100]	; 0x64
   1ff10:	sub	r5, r5, #1
   1ff14:	ldr	r0, [r0, r5, lsl #2]
   1ff18:	cmp	r0, #0
   1ff1c:	beq	1fec0 <__assert_fail@plt+0xe9a8>
   1ff20:	mov	r0, r6
   1ff24:	mov	r1, sl
   1ff28:	mov	r2, r5
   1ff2c:	mov	r3, r8
   1ff30:	bl	20154 <__assert_fail@plt+0xec3c>
   1ff34:	cmp	r0, #0
   1ff38:	beq	1fec0 <__assert_fail@plt+0xe9a8>
   1ff3c:	mov	r7, r0
   1ff40:	b	1ff5c <__assert_fail@plt+0xea44>
   1ff44:	mov	r7, #0
   1ff48:	b	1ff5c <__assert_fail@plt+0xea44>
   1ff4c:	lsl	r2, r5, #2
   1ff50:	mov	r7, #0
   1ff54:	mov	r1, #0
   1ff58:	bl	11428 <memset@plt>
   1ff5c:	ldr	r0, [sp, #8]
   1ff60:	bl	22b58 <__assert_fail@plt+0x11640>
   1ff64:	mov	r0, r7
   1ff68:	sub	sp, fp, #28
   1ff6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff70:	mov	r7, r0
   1ff74:	b	1ff64 <__assert_fail@plt+0xea4c>
   1ff78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ff7c:	add	fp, sp, #24
   1ff80:	sub	sp, sp, #16
   1ff84:	cmp	r3, #1
   1ff88:	blt	20020 <__assert_fail@plt+0xeb08>
   1ff8c:	mov	r4, r3
   1ff90:	mov	r5, r2
   1ff94:	mov	r6, r1
   1ff98:	mov	r7, r0
   1ff9c:	mov	r8, sp
   1ffa0:	add	r9, sp, #12
   1ffa4:	b	1ffbc <__assert_fail@plt+0xeaa4>
   1ffa8:	str	r0, [r6]
   1ffac:	add	r6, r6, #4
   1ffb0:	add	r5, r5, #4
   1ffb4:	subs	r4, r4, #1
   1ffb8:	beq	20020 <__assert_fail@plt+0xeb08>
   1ffbc:	ldr	r0, [r5]
   1ffc0:	ldr	r1, [r6]
   1ffc4:	cmp	r1, #0
   1ffc8:	beq	1ffa8 <__assert_fail@plt+0xea90>
   1ffcc:	cmp	r0, #0
   1ffd0:	beq	1ffac <__assert_fail@plt+0xea94>
   1ffd4:	add	r1, r1, #4
   1ffd8:	add	r2, r0, #4
   1ffdc:	mov	r0, r8
   1ffe0:	bl	1db88 <__assert_fail@plt+0xc670>
   1ffe4:	str	r0, [sp, #12]
   1ffe8:	cmp	r0, #0
   1ffec:	bne	20018 <__assert_fail@plt+0xeb00>
   1fff0:	mov	r0, r9
   1fff4:	mov	r1, r7
   1fff8:	mov	r2, r8
   1fffc:	bl	1eb8c <__assert_fail@plt+0xd674>
   20000:	str	r0, [r6]
   20004:	ldr	r0, [sp, #8]
   20008:	bl	22b58 <__assert_fail@plt+0x11640>
   2000c:	ldr	r0, [sp, #12]
   20010:	cmp	r0, #0
   20014:	beq	1ffac <__assert_fail@plt+0xea94>
   20018:	sub	sp, fp, #24
   2001c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20020:	mov	r0, #0
   20024:	sub	sp, fp, #24
   20028:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2002c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20030:	add	fp, sp, #28
   20034:	sub	sp, sp, #12
   20038:	mov	sl, r2
   2003c:	mov	r8, r1
   20040:	mov	r6, r0
   20044:	ldr	r9, [r0, #84]	; 0x54
   20048:	mov	r0, #0
   2004c:	str	r0, [sp, #8]
   20050:	ldr	r1, [r6, #100]	; 0x64
   20054:	ldr	r7, [r1, r2, lsl #2]
   20058:	cmp	r7, #0
   2005c:	mov	r4, r7
   20060:	addne	r4, r4, #4
   20064:	ldr	r1, [r3, #4]
   20068:	cmp	r1, #0
   2006c:	beq	200fc <__assert_fail@plt+0xebe4>
   20070:	mov	r5, r3
   20074:	cmp	r7, #0
   20078:	beq	200cc <__assert_fail@plt+0xebb4>
   2007c:	mov	r0, r9
   20080:	mov	r1, r5
   20084:	mov	r2, r4
   20088:	bl	202a0 <__assert_fail@plt+0xed88>
   2008c:	str	r0, [sp, #8]
   20090:	cmp	r0, #0
   20094:	bne	20124 <__assert_fail@plt+0xec0c>
   20098:	ldr	r0, [r8, #20]
   2009c:	cmp	r0, #0
   200a0:	beq	200cc <__assert_fail@plt+0xebb4>
   200a4:	ldr	r0, [r6, #116]	; 0x74
   200a8:	stm	sp, {r0, sl}
   200ac:	add	r3, r8, #16
   200b0:	mov	r0, r9
   200b4:	mov	r1, r5
   200b8:	mov	r2, r4
   200bc:	bl	20378 <__assert_fail@plt+0xee60>
   200c0:	str	r0, [sp, #8]
   200c4:	cmp	r0, #0
   200c8:	bne	20124 <__assert_fail@plt+0xec0c>
   200cc:	add	r0, sp, #8
   200d0:	mov	r1, r9
   200d4:	mov	r2, r5
   200d8:	bl	1eb8c <__assert_fail@plt+0xd674>
   200dc:	ldr	r1, [r8]
   200e0:	str	r0, [r1, sl, lsl #2]
   200e4:	ldr	r0, [sp, #8]
   200e8:	cmp	r0, #0
   200ec:	bne	20124 <__assert_fail@plt+0xec0c>
   200f0:	cmp	r7, #0
   200f4:	bne	2010c <__assert_fail@plt+0xebf4>
   200f8:	b	20120 <__assert_fail@plt+0xec08>
   200fc:	ldr	r1, [r8]
   20100:	str	r0, [r1, sl, lsl #2]
   20104:	cmp	r7, #0
   20108:	beq	20120 <__assert_fail@plt+0xec08>
   2010c:	ldr	r0, [r6, #100]	; 0x64
   20110:	ldr	r0, [r0, sl, lsl #2]
   20114:	ldrb	r0, [r0, #52]	; 0x34
   20118:	tst	r0, #64	; 0x40
   2011c:	bne	2012c <__assert_fail@plt+0xec14>
   20120:	mov	r0, #0
   20124:	sub	sp, fp, #28
   20128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2012c:	mov	r0, r6
   20130:	mov	r1, r8
   20134:	mov	r2, sl
   20138:	mov	r3, r4
   2013c:	bl	205bc <__assert_fail@plt+0xf0a4>
   20140:	str	r0, [sp, #8]
   20144:	cmp	r0, #0
   20148:	moveq	r0, #0
   2014c:	sub	sp, fp, #28
   20150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20158:	add	fp, sp, #28
   2015c:	sub	sp, sp, #20
   20160:	str	r3, [sp, #12]
   20164:	mov	sl, r0
   20168:	ldr	r0, [r0, #100]	; 0x64
   2016c:	ldr	r7, [r0, r2, lsl #2]
   20170:	ldr	r0, [r7, #20]
   20174:	cmp	r0, #1
   20178:	blt	20288 <__assert_fail@plt+0xed70>
   2017c:	mov	r5, r2
   20180:	mov	r6, r1
   20184:	ldr	r8, [sl, #84]	; 0x54
   20188:	add	r0, r1, #16
   2018c:	str	r0, [sp, #8]
   20190:	add	r0, r2, #1
   20194:	str	r0, [sp, #16]
   20198:	mov	r9, #0
   2019c:	b	201c4 <__assert_fail@plt+0xecac>
   201a0:	ldr	r0, [sp, #12]
   201a4:	mov	r1, r4
   201a8:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   201ac:	cmp	r0, #0
   201b0:	beq	20294 <__assert_fail@plt+0xed7c>
   201b4:	add	r9, r9, #1
   201b8:	ldr	r0, [r7, #20]
   201bc:	cmp	r9, r0
   201c0:	bge	20288 <__assert_fail@plt+0xed70>
   201c4:	ldr	r0, [r7, #24]
   201c8:	ldr	r4, [r0, r9, lsl #2]
   201cc:	ldr	r0, [r8]
   201d0:	add	r0, r0, r4, lsl #3
   201d4:	ldrb	r0, [r0, #6]
   201d8:	tst	r0, #16
   201dc:	beq	20204 <__assert_fail@plt+0xecec>
   201e0:	ldr	r0, [r6, #12]
   201e4:	str	r0, [sp]
   201e8:	mov	r0, sl
   201ec:	mov	r1, r6
   201f0:	mov	r2, r4
   201f4:	mov	r3, r5
   201f8:	bl	20fbc <__assert_fail@plt+0xfaa4>
   201fc:	cmp	r0, #0
   20200:	bne	20254 <__assert_fail@plt+0xed3c>
   20204:	ldr	r0, [r8]
   20208:	add	r1, r0, r4, lsl #3
   2020c:	mov	r0, sl
   20210:	mov	r2, r5
   20214:	bl	1f078 <__assert_fail@plt+0xdb60>
   20218:	cmp	r0, #0
   2021c:	beq	201b4 <__assert_fail@plt+0xec9c>
   20220:	ldr	r0, [r6]
   20224:	ldr	r1, [sp, #16]
   20228:	ldr	r0, [r0, r1, lsl #2]
   2022c:	cmp	r0, #0
   20230:	beq	201b4 <__assert_fail@plt+0xec9c>
   20234:	ldr	r1, [r8, #12]
   20238:	ldr	r1, [r1, r4, lsl #2]
   2023c:	add	r0, r0, #4
   20240:	bl	1b740 <__assert_fail@plt+0xa228>
   20244:	mov	r1, r0
   20248:	mov	r0, #1
   2024c:	cmp	r1, #0
   20250:	beq	201b4 <__assert_fail@plt+0xec9c>
   20254:	ldr	r1, [r6, #20]
   20258:	cmp	r1, #0
   2025c:	beq	201a0 <__assert_fail@plt+0xec88>
   20260:	ldr	r1, [r8, #12]
   20264:	ldr	r2, [r1, r4, lsl #2]
   20268:	stm	sp, {r4, r5}
   2026c:	add	r3, r0, r5
   20270:	mov	r0, sl
   20274:	ldr	r1, [sp, #8]
   20278:	bl	20c50 <__assert_fail@plt+0xf738>
   2027c:	cmp	r0, #0
   20280:	beq	201a0 <__assert_fail@plt+0xec88>
   20284:	b	201b4 <__assert_fail@plt+0xec9c>
   20288:	mov	r0, #0
   2028c:	sub	sp, fp, #28
   20290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20294:	mov	r0, #12
   20298:	sub	sp, fp, #28
   2029c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   202a4:	add	fp, sp, #24
   202a8:	sub	sp, sp, #8
   202ac:	mov	r8, r2
   202b0:	mov	r5, r1
   202b4:	mov	r6, r0
   202b8:	mov	r0, #0
   202bc:	str	r0, [sp, #4]
   202c0:	add	r0, sp, #4
   202c4:	mov	r1, r6
   202c8:	mov	r2, r5
   202cc:	bl	1eb8c <__assert_fail@plt+0xd674>
   202d0:	ldr	r9, [sp, #4]
   202d4:	cmp	r9, #0
   202d8:	bne	20364 <__assert_fail@plt+0xee4c>
   202dc:	mov	r7, r0
   202e0:	ldr	r0, [r7, #28]!
   202e4:	cmp	r0, #0
   202e8:	bne	20350 <__assert_fail@plt+0xee38>
   202ec:	ldr	r1, [r5, #4]
   202f0:	mov	r0, r7
   202f4:	bl	1b034 <__assert_fail@plt+0x9b1c>
   202f8:	str	r0, [sp, #4]
   202fc:	mov	r9, #12
   20300:	cmp	r0, #0
   20304:	bne	20364 <__assert_fail@plt+0xee4c>
   20308:	ldr	r0, [r5, #4]
   2030c:	cmp	r0, #1
   20310:	blt	20350 <__assert_fail@plt+0xee38>
   20314:	mov	r4, #0
   20318:	ldr	r0, [r5, #8]
   2031c:	ldr	r0, [r0, r4, lsl #2]
   20320:	add	r0, r0, r0, lsl #1
   20324:	ldr	r1, [r6, #28]
   20328:	add	r1, r1, r0, lsl #2
   2032c:	mov	r0, r7
   20330:	bl	1b2c0 <__assert_fail@plt+0x9da8>
   20334:	cmp	r0, #0
   20338:	bne	20370 <__assert_fail@plt+0xee58>
   2033c:	add	r4, r4, #1
   20340:	ldr	r1, [r5, #4]
   20344:	cmp	r4, r1
   20348:	blt	20318 <__assert_fail@plt+0xee00>
   2034c:	str	r0, [sp, #4]
   20350:	mov	r0, r5
   20354:	mov	r1, r8
   20358:	mov	r2, r7
   2035c:	bl	208ac <__assert_fail@plt+0xf394>
   20360:	mov	r9, r0
   20364:	mov	r0, r9
   20368:	sub	sp, fp, #24
   2036c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20370:	str	r0, [sp, #4]
   20374:	b	20364 <__assert_fail@plt+0xee4c>
   20378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2037c:	add	fp, sp, #28
   20380:	sub	sp, sp, #12
   20384:	str	r2, [sp, #4]
   20388:	mov	ip, r0
   2038c:	ldr	r0, [r3, #4]
   20390:	cmp	r0, #1
   20394:	blt	205b0 <__assert_fail@plt+0xf098>
   20398:	mov	r9, r1
   2039c:	mov	r8, #0
   203a0:	str	ip, [sp]
   203a4:	str	r3, [sp, #8]
   203a8:	b	203c0 <__assert_fail@plt+0xeea8>
   203ac:	add	r8, r8, #1
   203b0:	ldr	r3, [sp, #8]
   203b4:	ldr	r0, [r3, #4]
   203b8:	cmp	r8, r0
   203bc:	bge	205b0 <__assert_fail@plt+0xf098>
   203c0:	ldr	r0, [r3, #8]
   203c4:	ldr	r0, [r0, r8, lsl #2]
   203c8:	add	r0, r0, r0, lsl #1
   203cc:	ldr	r1, [fp, #8]
   203d0:	add	r1, r1, r0, lsl #3
   203d4:	ldr	r2, [r1, #8]
   203d8:	ldr	r3, [fp, #12]
   203dc:	cmp	r2, r3
   203e0:	bge	203ac <__assert_fail@plt+0xee94>
   203e4:	ldr	r1, [r1, #4]
   203e8:	ldr	r2, [fp, #12]
   203ec:	cmp	r1, r2
   203f0:	blt	203ac <__assert_fail@plt+0xee94>
   203f4:	ldr	r1, [fp, #8]
   203f8:	ldr	r2, [r1, r0, lsl #3]!
   203fc:	ldr	r0, [ip]
   20400:	ldr	sl, [r0, r2, lsl #3]
   20404:	ldr	r1, [r1, #12]
   20408:	ldr	r2, [fp, #12]
   2040c:	cmp	r1, r2
   20410:	bne	20478 <__assert_fail@plt+0xef60>
   20414:	ldr	r1, [r9, #4]
   20418:	cmp	r1, #1
   2041c:	blt	203ac <__assert_fail@plt+0xee94>
   20420:	ldmib	r9, {r2, r3}
   20424:	mvn	r6, #0
   20428:	mov	r5, #0
   2042c:	mvn	r1, #0
   20430:	b	2044c <__assert_fail@plt+0xef34>
   20434:	ldr	r4, [r0, r7, lsl #3]
   20438:	cmp	sl, r4
   2043c:	moveq	r6, r7
   20440:	add	r5, r5, #1
   20444:	cmp	r5, r2
   20448:	bge	204e8 <__assert_fail@plt+0xefd0>
   2044c:	ldr	r7, [r3, r5, lsl #2]
   20450:	add	r4, r0, r7, lsl #3
   20454:	ldrb	r4, [r4, #4]
   20458:	cmp	r4, #9
   2045c:	beq	20434 <__assert_fail@plt+0xef1c>
   20460:	cmp	r4, #8
   20464:	bne	20440 <__assert_fail@plt+0xef28>
   20468:	ldr	r4, [r0, r7, lsl #3]
   2046c:	cmp	sl, r4
   20470:	moveq	r1, r7
   20474:	b	20440 <__assert_fail@plt+0xef28>
   20478:	ldr	r0, [r9, #4]
   2047c:	cmp	r0, #1
   20480:	blt	203ac <__assert_fail@plt+0xee94>
   20484:	mov	r5, #0
   20488:	b	2049c <__assert_fail@plt+0xef84>
   2048c:	ldr	r0, [r9, #4]
   20490:	add	r5, r5, #1
   20494:	cmp	r5, r0
   20498:	bge	203ac <__assert_fail@plt+0xee94>
   2049c:	ldr	r0, [r9, #8]
   204a0:	ldr	r1, [r0, r5, lsl #2]
   204a4:	ldr	r0, [ip]
   204a8:	add	r2, r0, r1, lsl #3
   204ac:	ldrb	r2, [r2, #4]
   204b0:	orr	r2, r2, #1
   204b4:	cmp	r2, #9
   204b8:	bne	2048c <__assert_fail@plt+0xef74>
   204bc:	ldr	r0, [r0, r1, lsl #3]
   204c0:	cmp	sl, r0
   204c4:	bne	2048c <__assert_fail@plt+0xef74>
   204c8:	mov	r0, ip
   204cc:	mov	r2, r9
   204d0:	ldr	r3, [sp, #4]
   204d4:	bl	20a9c <__assert_fail@plt+0xf584>
   204d8:	ldr	ip, [sp]
   204dc:	cmp	r0, #0
   204e0:	beq	2048c <__assert_fail@plt+0xef74>
   204e4:	b	205b4 <__assert_fail@plt+0xf09c>
   204e8:	cmp	r1, #0
   204ec:	bmi	2050c <__assert_fail@plt+0xeff4>
   204f0:	mov	r0, ip
   204f4:	mov	r2, r9
   204f8:	ldr	r3, [sp, #4]
   204fc:	bl	20a9c <__assert_fail@plt+0xf584>
   20500:	ldr	ip, [sp]
   20504:	cmp	r0, #0
   20508:	bne	205b4 <__assert_fail@plt+0xf09c>
   2050c:	cmp	r6, #0
   20510:	bmi	203ac <__assert_fail@plt+0xee94>
   20514:	ldr	r0, [r9, #4]
   20518:	cmp	r0, #1
   2051c:	blt	203ac <__assert_fail@plt+0xee94>
   20520:	mov	sl, #0
   20524:	b	20540 <__assert_fail@plt+0xf028>
   20528:	mov	r6, r5
   2052c:	mov	ip, r7
   20530:	ldr	r0, [r9, #4]
   20534:	add	sl, sl, #1
   20538:	cmp	sl, r0
   2053c:	bge	203ac <__assert_fail@plt+0xee94>
   20540:	ldr	r0, [r9, #8]
   20544:	ldr	r4, [r0, sl, lsl #2]
   20548:	add	r5, r4, r4, lsl #1
   2054c:	ldr	r0, [ip, #28]
   20550:	add	r0, r0, r5, lsl #2
   20554:	mov	r1, r6
   20558:	mov	r7, ip
   2055c:	bl	1b740 <__assert_fail@plt+0xa228>
   20560:	cmp	r0, #0
   20564:	bne	2052c <__assert_fail@plt+0xf014>
   20568:	ldr	r0, [r7, #24]
   2056c:	add	r0, r0, r5, lsl #2
   20570:	mov	r5, r6
   20574:	mov	r1, r6
   20578:	bl	1b740 <__assert_fail@plt+0xa228>
   2057c:	cmp	r0, #0
   20580:	bne	20528 <__assert_fail@plt+0xf010>
   20584:	mov	r0, r7
   20588:	mov	r1, r4
   2058c:	mov	r2, r9
   20590:	ldr	r3, [sp, #4]
   20594:	bl	20a9c <__assert_fail@plt+0xf584>
   20598:	cmp	r0, #0
   2059c:	bne	205b4 <__assert_fail@plt+0xf09c>
   205a0:	sub	sl, sl, #1
   205a4:	mov	r6, r5
   205a8:	ldr	ip, [sp]
   205ac:	b	20530 <__assert_fail@plt+0xf018>
   205b0:	mov	r0, #0
   205b4:	sub	sp, fp, #28
   205b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205c0:	add	fp, sp, #28
   205c4:	sub	sp, sp, #84	; 0x54
   205c8:	mov	r4, r3
   205cc:	mov	r7, r2
   205d0:	str	r1, [sp, #52]	; 0x34
   205d4:	ldr	r1, [r0, #84]	; 0x54
   205d8:	str	r1, [sp, #48]	; 0x30
   205dc:	str	r0, [sp, #44]	; 0x2c
   205e0:	mov	r1, r2
   205e4:	bl	1ddbc <__assert_fail@plt+0xc8a4>
   205e8:	str	r0, [sp, #20]
   205ec:	mov	sl, #0
   205f0:	cmn	r0, #1
   205f4:	beq	20890 <__assert_fail@plt+0xf378>
   205f8:	str	sl, [sp, #56]	; 0x38
   205fc:	str	r4, [sp, #24]
   20600:	ldr	r0, [r4, #4]
   20604:	cmp	r0, #1
   20608:	blt	20890 <__assert_fail@plt+0xf378>
   2060c:	add	r0, r7, #1
   20610:	str	r0, [sp, #8]
   20614:	add	r0, sp, #56	; 0x38
   20618:	add	r0, r0, #16
   2061c:	str	r0, [sp, #28]
   20620:	ldr	r2, [sp, #52]	; 0x34
   20624:	add	r0, r2, #16
   20628:	str	r0, [sp, #32]
   2062c:	ldr	r0, [sp, #20]
   20630:	add	r0, r0, r0, lsl #1
   20634:	str	r0, [sp, #16]
   20638:	lsl	r0, r0, #3
   2063c:	str	r0, [sp, #12]
   20640:	mov	r1, #0
   20644:	ldr	sl, [sp, #24]
   20648:	ldr	r3, [sp, #48]	; 0x30
   2064c:	str	r7, [sp, #40]	; 0x28
   20650:	b	20668 <__assert_fail@plt+0xf150>
   20654:	ldr	r1, [sp, #36]	; 0x24
   20658:	add	r1, r1, #1
   2065c:	ldr	r0, [sl, #4]
   20660:	cmp	r1, r0
   20664:	bge	20878 <__assert_fail@plt+0xf360>
   20668:	ldr	r0, [sl, #8]
   2066c:	str	r1, [sp, #36]	; 0x24
   20670:	ldr	r9, [r0, r1, lsl #2]
   20674:	ldr	r0, [r3]
   20678:	add	r0, r0, r9, lsl #3
   2067c:	ldrb	r0, [r0, #4]
   20680:	ldr	r1, [r2, #8]
   20684:	cmp	r9, r1
   20688:	bne	206a4 <__assert_fail@plt+0xf18c>
   2068c:	cmp	r0, #4
   20690:	bne	20654 <__assert_fail@plt+0xf13c>
   20694:	ldr	r0, [r2, #12]
   20698:	cmp	r0, r7
   2069c:	bne	206ac <__assert_fail@plt+0xf194>
   206a0:	b	20654 <__assert_fail@plt+0xf13c>
   206a4:	cmp	r0, #4
   206a8:	bne	20654 <__assert_fail@plt+0xf13c>
   206ac:	ldr	r0, [sp, #44]	; 0x2c
   206b0:	ldr	r0, [r0, #116]	; 0x74
   206b4:	ldr	r1, [sp, #16]
   206b8:	add	r5, r0, r1, lsl #3
   206bc:	ldr	r4, [sp, #12]
   206c0:	ldr	r8, [sp, #20]
   206c4:	b	206e4 <__assert_fail@plt+0xf1cc>
   206c8:	mov	r0, r5
   206cc:	add	r4, r4, #24
   206d0:	add	r5, r0, #24
   206d4:	add	r8, r8, #1
   206d8:	ldrb	r0, [r0, #20]
   206dc:	cmp	r0, #0
   206e0:	beq	20654 <__assert_fail@plt+0xf13c>
   206e4:	ldr	r0, [r5]
   206e8:	cmp	r0, r9
   206ec:	bne	206c8 <__assert_fail@plt+0xf1b0>
   206f0:	ldr	r0, [r5, #8]
   206f4:	ldr	r1, [r5, #12]
   206f8:	subs	r0, r1, r0
   206fc:	add	r6, r0, r7
   20700:	beq	20710 <__assert_fail@plt+0xf1f8>
   20704:	ldr	r0, [r3, #12]
   20708:	add	r0, r0, r9, lsl #2
   2070c:	b	20720 <__assert_fail@plt+0xf208>
   20710:	ldr	r0, [r3, #20]
   20714:	add	r1, r9, r9, lsl #1
   20718:	add	r0, r0, r1, lsl #2
   2071c:	ldr	r0, [r0, #8]
   20720:	ldr	r1, [r2, #12]
   20724:	cmp	r6, r1
   20728:	bgt	206c8 <__assert_fail@plt+0xf1b0>
   2072c:	ldr	r1, [r2]
   20730:	ldr	r1, [r1, r6, lsl #2]
   20734:	cmp	r1, #0
   20738:	beq	206c8 <__assert_fail@plt+0xf1b0>
   2073c:	ldr	r7, [r0]
   20740:	add	r0, r1, #4
   20744:	mov	r1, r7
   20748:	bl	1b740 <__assert_fail@plt+0xa228>
   2074c:	cmp	r0, #0
   20750:	beq	20864 <__assert_fail@plt+0xf34c>
   20754:	str	r7, [sp]
   20758:	str	r6, [sp, #4]
   2075c:	ldr	r0, [sp, #44]	; 0x2c
   20760:	ldr	r1, [sp, #32]
   20764:	mov	r2, r9
   20768:	ldr	r7, [sp, #40]	; 0x28
   2076c:	mov	r3, r7
   20770:	bl	20c50 <__assert_fail@plt+0xf738>
   20774:	cmp	r0, #0
   20778:	mov	r0, r5
   2077c:	ldr	r2, [sp, #52]	; 0x34
   20780:	ldr	r3, [sp, #48]	; 0x30
   20784:	bne	206cc <__assert_fail@plt+0xf1b4>
   20788:	ldr	r0, [sp, #56]	; 0x38
   2078c:	cmp	r0, #0
   20790:	bne	207c4 <__assert_fail@plt+0xf2ac>
   20794:	mov	r0, r2
   20798:	mov	r1, #12
   2079c:	vld1.32	{d16-d17}, [r0], r1
   207a0:	vld1.32	{d18-d19}, [r0]
   207a4:	add	r0, sp, #56	; 0x38
   207a8:	vst1.64	{d16-d17}, [r0], r1
   207ac:	vst1.32	{d18-d19}, [r0]
   207b0:	ldr	r0, [sp, #28]
   207b4:	ldr	r1, [sp, #32]
   207b8:	bl	1b6c4 <__assert_fail@plt+0xa1ac>
   207bc:	cmp	r0, #0
   207c0:	bne	2089c <__assert_fail@plt+0xf384>
   207c4:	str	r7, [sp, #68]	; 0x44
   207c8:	str	r9, [sp, #64]	; 0x40
   207cc:	ldr	r0, [sp, #28]
   207d0:	mov	r1, r8
   207d4:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   207d8:	cmp	r0, #0
   207dc:	beq	208a4 <__assert_fail@plt+0xf38c>
   207e0:	mov	r0, r7
   207e4:	ldr	r7, [sp, #56]	; 0x38
   207e8:	ldr	r5, [r7, r0, lsl #2]
   207ec:	ldr	r0, [sp, #44]	; 0x2c
   207f0:	add	r1, sp, #56	; 0x38
   207f4:	bl	1fe60 <__assert_fail@plt+0xe948>
   207f8:	cmp	r0, #0
   207fc:	bne	2089c <__assert_fail@plt+0xf384>
   20800:	ldr	r0, [sp, #52]	; 0x34
   20804:	ldr	r1, [r0, #4]
   20808:	cmp	r1, #0
   2080c:	beq	20828 <__assert_fail@plt+0xf310>
   20810:	ldr	r0, [sp, #48]	; 0x30
   20814:	mov	r2, r7
   20818:	ldr	r3, [sp, #8]
   2081c:	bl	1ff78 <__assert_fail@plt+0xea60>
   20820:	cmp	r0, #0
   20824:	bne	2089c <__assert_fail@plt+0xf384>
   20828:	ldr	r0, [sp, #40]	; 0x28
   2082c:	str	r5, [r7, r0, lsl #2]
   20830:	mov	r7, r0
   20834:	ldr	r5, [sp, #28]
   20838:	mov	r0, r5
   2083c:	mov	r1, r8
   20840:	bl	1b740 <__assert_fail@plt+0xa228>
   20844:	sub	r1, r0, #1
   20848:	mov	r0, r5
   2084c:	bl	1bb54 <__assert_fail@plt+0xa63c>
   20850:	ldr	r0, [sp, #44]	; 0x2c
   20854:	ldr	r0, [r0, #116]	; 0x74
   20858:	add	r0, r0, r4
   2085c:	ldr	sl, [sp, #24]
   20860:	b	2086c <__assert_fail@plt+0xf354>
   20864:	mov	r0, r5
   20868:	ldr	r7, [sp, #40]	; 0x28
   2086c:	ldr	r2, [sp, #52]	; 0x34
   20870:	ldr	r3, [sp, #48]	; 0x30
   20874:	b	206cc <__assert_fail@plt+0xf1b4>
   20878:	mov	sl, #0
   2087c:	ldr	r0, [sp, #56]	; 0x38
   20880:	cmp	r0, #0
   20884:	beq	20890 <__assert_fail@plt+0xf378>
   20888:	ldr	r0, [sp, #80]	; 0x50
   2088c:	bl	22b58 <__assert_fail@plt+0x11640>
   20890:	mov	r0, sl
   20894:	sub	sp, fp, #28
   20898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2089c:	mov	sl, r0
   208a0:	b	2087c <__assert_fail@plt+0xf364>
   208a4:	mov	sl, #12
   208a8:	b	2087c <__assert_fail@plt+0xf364>
   208ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208b0:	add	fp, sp, #28
   208b4:	sub	sp, sp, #4
   208b8:	mov	r9, r2
   208bc:	mov	r8, r0
   208c0:	ldr	r2, [r1, #4]
   208c4:	mov	r0, #0
   208c8:	cmp	r2, #0
   208cc:	beq	20a88 <__assert_fail@plt+0xf570>
   208d0:	mov	sl, r1
   208d4:	ldr	r1, [r9, #4]
   208d8:	cmp	r1, #0
   208dc:	beq	20a88 <__assert_fail@plt+0xf570>
   208e0:	add	r0, r1, r2
   208e4:	ldm	r8, {r1, r2}
   208e8:	add	r2, r2, r0
   208ec:	cmp	r2, r1
   208f0:	ble	20914 <__assert_fail@plt+0xf3fc>
   208f4:	add	r4, r1, r0
   208f8:	lsl	r1, r4, #2
   208fc:	ldr	r0, [r8, #8]
   20900:	bl	22698 <__assert_fail@plt+0x11180>
   20904:	cmp	r0, #0
   20908:	beq	20a90 <__assert_fail@plt+0xf578>
   2090c:	str	r4, [r8]
   20910:	str	r0, [r8, #8]
   20914:	ldr	r1, [r8, #4]
   20918:	ldr	r6, [sl, #4]
   2091c:	ldr	r0, [sl, #8]
   20920:	add	r3, r6, r1
   20924:	ldr	r5, [r9, #4]
   20928:	ldr	r2, [r9, #8]
   2092c:	add	ip, r3, r5
   20930:	sub	r7, r1, #1
   20934:	sub	r3, r5, #1
   20938:	sub	r4, r6, #1
   2093c:	ldr	r1, [r2, r3, lsl #2]
   20940:	ldr	r6, [r0, r4, lsl #2]
   20944:	cmp	r6, r1
   20948:	beq	20964 <__assert_fail@plt+0xf44c>
   2094c:	blt	20994 <__assert_fail@plt+0xf47c>
   20950:	sub	r1, r4, #1
   20954:	cmp	r4, #0
   20958:	mov	r4, r1
   2095c:	bgt	2093c <__assert_fail@plt+0xf424>
   20960:	b	209e4 <__assert_fail@plt+0xf4cc>
   20964:	cmp	r7, #0
   20968:	bmi	209c4 <__assert_fail@plt+0xf4ac>
   2096c:	ldr	r5, [r8, #8]
   20970:	mov	r1, r7
   20974:	ldr	r7, [r5, r1, lsl #2]
   20978:	cmp	r7, r6
   2097c:	ble	209a0 <__assert_fail@plt+0xf488>
   20980:	sub	r7, r1, #1
   20984:	cmp	r1, #0
   20988:	mov	r1, r7
   2098c:	bgt	20974 <__assert_fail@plt+0xf45c>
   20990:	b	209c4 <__assert_fail@plt+0xf4ac>
   20994:	subs	r3, r3, #1
   20998:	bge	2093c <__assert_fail@plt+0xf424>
   2099c:	b	209e4 <__assert_fail@plt+0xf4cc>
   209a0:	ldr	r7, [r8, #8]
   209a4:	ldr	r7, [r7, r1, lsl #2]
   209a8:	cmp	r7, r6
   209ac:	mov	r7, r1
   209b0:	bne	209c4 <__assert_fail@plt+0xf4ac>
   209b4:	mov	r7, r1
   209b8:	cmp	r4, #1
   209bc:	bge	209d8 <__assert_fail@plt+0xf4c0>
   209c0:	b	209e4 <__assert_fail@plt+0xf4cc>
   209c4:	ldr	r1, [r8, #8]
   209c8:	sub	ip, ip, #1
   209cc:	str	r6, [r1, ip, lsl #2]
   209d0:	cmp	r4, #1
   209d4:	blt	209e4 <__assert_fail@plt+0xf4cc>
   209d8:	subs	r3, r3, #1
   209dc:	sub	r4, r4, #1
   209e0:	bge	2093c <__assert_fail@plt+0xf424>
   209e4:	ldr	r1, [sl, #4]
   209e8:	ldr	r7, [r8, #4]
   209ec:	add	r0, r7, r1
   209f0:	ldr	r3, [r9, #4]
   209f4:	add	r0, r0, r3
   209f8:	sub	r0, r0, #1
   209fc:	sub	r6, r0, ip
   20a00:	add	r2, r6, #1
   20a04:	add	r5, r2, r7
   20a08:	str	r5, [r8, #4]
   20a0c:	cmp	r7, #1
   20a10:	blt	20a74 <__assert_fail@plt+0xf55c>
   20a14:	cmp	r6, #0
   20a18:	bmi	20a74 <__assert_fail@plt+0xf55c>
   20a1c:	add	r3, r7, r3
   20a20:	add	r1, r3, r1
   20a24:	sub	r3, r1, ip
   20a28:	ldr	r1, [r8, #8]
   20a2c:	add	r3, r1, r3, lsl #2
   20a30:	sub	r7, r7, #1
   20a34:	ldr	r6, [r1, r7, lsl #2]
   20a38:	ldr	r5, [r1, r0, lsl #2]
   20a3c:	cmp	r5, r6
   20a40:	bgt	20a5c <__assert_fail@plt+0xf544>
   20a44:	str	r6, [r3, r7, lsl #2]
   20a48:	sub	r6, r7, #1
   20a4c:	cmp	r7, #0
   20a50:	mov	r7, r6
   20a54:	bgt	20a34 <__assert_fail@plt+0xf51c>
   20a58:	b	20a74 <__assert_fail@plt+0xf55c>
   20a5c:	str	r5, [r3, r7, lsl #2]
   20a60:	sub	r3, r3, #4
   20a64:	subs	r2, r2, #1
   20a68:	sub	r0, r0, #1
   20a6c:	bne	20a34 <__assert_fail@plt+0xf51c>
   20a70:	mov	r2, #0
   20a74:	ldr	r0, [r8, #8]
   20a78:	add	r1, r0, ip, lsl #2
   20a7c:	lsl	r2, r2, #2
   20a80:	bl	112a8 <memcpy@plt>
   20a84:	mov	r0, #0
   20a88:	sub	sp, fp, #28
   20a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a90:	mov	r0, #12
   20a94:	sub	sp, fp, #28
   20a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20aa0:	add	fp, sp, #28
   20aa4:	sub	sp, sp, #28
   20aa8:	str	r3, [sp]
   20aac:	mov	r6, r1
   20ab0:	str	r0, [sp, #12]
   20ab4:	ldr	r0, [r0, #28]
   20ab8:	mov	r4, #0
   20abc:	str	r4, [sp, #20]
   20ac0:	str	r4, [sp, #16]
   20ac4:	str	r4, [sp, #24]
   20ac8:	add	r1, r1, r1, lsl #1
   20acc:	add	r1, r0, r1, lsl #2
   20ad0:	mov	r8, r1
   20ad4:	ldr	r0, [r8, #4]!
   20ad8:	cmp	r0, #1
   20adc:	blt	20c34 <__assert_fail@plt+0xf71c>
   20ae0:	str	r2, [sp, #4]
   20ae4:	str	r1, [sp, #8]
   20ae8:	add	sl, r1, #8
   20aec:	mov	r5, #0
   20af0:	b	20b38 <__assert_fail@plt+0xf620>
   20af4:	ldr	r0, [sp, #4]
   20af8:	mov	r1, r9
   20afc:	bl	1b740 <__assert_fail@plt+0xa228>
   20b00:	cmp	r0, #0
   20b04:	beq	20b9c <__assert_fail@plt+0xf684>
   20b08:	ldr	r0, [sp, #12]
   20b0c:	ldr	r0, [r0, #28]
   20b10:	add	r2, r0, r7, lsl #2
   20b14:	add	r0, sp, #16
   20b18:	ldr	r1, [sp]
   20b1c:	bl	208ac <__assert_fail@plt+0xf394>
   20b20:	cmp	r0, #0
   20b24:	bne	20c48 <__assert_fail@plt+0xf730>
   20b28:	add	r5, r5, #1
   20b2c:	ldr	r0, [r8]
   20b30:	cmp	r5, r0
   20b34:	bge	20bd0 <__assert_fail@plt+0xf6b8>
   20b38:	ldr	r0, [sl]
   20b3c:	ldr	r0, [r0, r5, lsl #2]
   20b40:	cmp	r0, r6
   20b44:	beq	20b28 <__assert_fail@plt+0xf610>
   20b48:	ldr	r1, [sp, #12]
   20b4c:	ldr	r1, [r1]
   20b50:	add	r1, r1, r0, lsl #3
   20b54:	ldrb	r1, [r1, #4]
   20b58:	tst	r1, #8
   20b5c:	beq	20b28 <__assert_fail@plt+0xf610>
   20b60:	ldr	r1, [sp, #12]
   20b64:	ldr	r1, [r1, #20]
   20b68:	add	r7, r0, r0, lsl #1
   20b6c:	add	r0, r1, r7, lsl #2
   20b70:	ldr	r1, [r0, #4]
   20b74:	ldr	r0, [r0, #8]
   20b78:	ldr	r9, [r0]
   20b7c:	mvn	r4, #0
   20b80:	cmp	r1, #2
   20b84:	ldrge	r4, [r0, #4]
   20b88:	ldr	r0, [sp, #8]
   20b8c:	mov	r1, r9
   20b90:	bl	1b740 <__assert_fail@plt+0xa228>
   20b94:	cmp	r0, #0
   20b98:	beq	20af4 <__assert_fail@plt+0xf5dc>
   20b9c:	cmp	r4, #1
   20ba0:	blt	20b28 <__assert_fail@plt+0xf610>
   20ba4:	ldr	r0, [sp, #8]
   20ba8:	mov	r1, r4
   20bac:	bl	1b740 <__assert_fail@plt+0xa228>
   20bb0:	cmp	r0, #0
   20bb4:	bne	20b28 <__assert_fail@plt+0xf610>
   20bb8:	ldr	r0, [sp, #4]
   20bbc:	mov	r1, r4
   20bc0:	bl	1b740 <__assert_fail@plt+0xa228>
   20bc4:	cmp	r0, #0
   20bc8:	bne	20b08 <__assert_fail@plt+0xf5f0>
   20bcc:	b	20b28 <__assert_fail@plt+0xf610>
   20bd0:	cmp	r0, #1
   20bd4:	blt	20c30 <__assert_fail@plt+0xf718>
   20bd8:	mov	r6, #0
   20bdc:	add	r4, sp, #16
   20be0:	ldr	r7, [sp, #4]
   20be4:	b	20bf8 <__assert_fail@plt+0xf6e0>
   20be8:	add	r6, r6, #1
   20bec:	ldr	r0, [r8]
   20bf0:	cmp	r6, r0
   20bf4:	bge	20c30 <__assert_fail@plt+0xf718>
   20bf8:	ldr	r0, [sl]
   20bfc:	ldr	r5, [r0, r6, lsl #2]
   20c00:	mov	r0, r4
   20c04:	mov	r1, r5
   20c08:	bl	1b740 <__assert_fail@plt+0xa228>
   20c0c:	cmp	r0, #0
   20c10:	bne	20be8 <__assert_fail@plt+0xf6d0>
   20c14:	mov	r0, r7
   20c18:	mov	r1, r5
   20c1c:	bl	1b740 <__assert_fail@plt+0xa228>
   20c20:	sub	r1, r0, #1
   20c24:	mov	r0, r7
   20c28:	bl	1bb54 <__assert_fail@plt+0xa63c>
   20c2c:	b	20be8 <__assert_fail@plt+0xf6d0>
   20c30:	mov	r4, #0
   20c34:	ldr	r0, [sp, #24]
   20c38:	bl	22b58 <__assert_fail@plt+0x11640>
   20c3c:	mov	r0, r4
   20c40:	sub	sp, fp, #28
   20c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c48:	mov	r4, r0
   20c4c:	b	20c34 <__assert_fail@plt+0xf71c>
   20c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c54:	add	fp, sp, #28
   20c58:	sub	sp, sp, #20
   20c5c:	str	r2, [sp, #12]
   20c60:	mov	r6, r1
   20c64:	mov	r7, r0
   20c68:	str	r3, [sp, #16]
   20c6c:	mov	r1, r3
   20c70:	bl	1ddbc <__assert_fail@plt+0xc8a4>
   20c74:	str	r0, [sp, #8]
   20c78:	ldr	r1, [fp, #12]
   20c7c:	mov	r0, r7
   20c80:	bl	1ddbc <__assert_fail@plt+0xc8a4>
   20c84:	mov	r4, r0
   20c88:	ldr	r0, [r6, #4]
   20c8c:	cmp	r0, #1
   20c90:	blt	20d14 <__assert_fail@plt+0xf7fc>
   20c94:	ldr	sl, [r7, #84]	; 0x54
   20c98:	mov	r5, #0
   20c9c:	ldr	r0, [r6, #8]
   20ca0:	ldr	r1, [r0, r5, lsl #2]
   20ca4:	add	r0, r1, r1, lsl #1
   20ca8:	ldr	r2, [r7, #116]	; 0x74
   20cac:	ldr	r0, [r2, r0, lsl #3]
   20cb0:	ldr	r2, [sl]
   20cb4:	ldr	r9, [r2, r0, lsl #3]
   20cb8:	ldr	r0, [sp, #16]
   20cbc:	str	r0, [sp]
   20cc0:	ldr	r0, [sp, #8]
   20cc4:	str	r0, [sp, #4]
   20cc8:	mov	r0, r7
   20ccc:	mov	r2, r9
   20cd0:	ldr	r3, [sp, #12]
   20cd4:	bl	20d2c <__assert_fail@plt+0xf814>
   20cd8:	mov	r8, r0
   20cdc:	ldr	r0, [r6, #8]
   20ce0:	ldr	r1, [r0, r5, lsl #2]
   20ce4:	ldr	r0, [fp, #12]
   20ce8:	stm	sp, {r0, r4}
   20cec:	mov	r0, r7
   20cf0:	mov	r2, r9
   20cf4:	ldr	r3, [fp, #8]
   20cf8:	bl	20d2c <__assert_fail@plt+0xf814>
   20cfc:	cmp	r0, r8
   20d00:	bne	20d20 <__assert_fail@plt+0xf808>
   20d04:	add	r5, r5, #1
   20d08:	ldr	r0, [r6, #4]
   20d0c:	cmp	r5, r0
   20d10:	blt	20c9c <__assert_fail@plt+0xf784>
   20d14:	mov	r0, #0
   20d18:	sub	sp, fp, #28
   20d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d20:	mov	r0, #1
   20d24:	sub	sp, fp, #28
   20d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d2c:	push	{r4, r5, fp, lr}
   20d30:	add	fp, sp, #8
   20d34:	sub	sp, sp, #8
   20d38:	ldr	r4, [r0, #116]	; 0x74
   20d3c:	add	r1, r1, r1, lsl #1
   20d40:	add	r4, r4, r1, lsl #3
   20d44:	ldr	ip, [r4, #8]
   20d48:	mvn	r1, #0
   20d4c:	ldr	lr, [fp, #8]
   20d50:	cmp	ip, lr
   20d54:	bgt	20da4 <__assert_fail@plt+0xf88c>
   20d58:	ldr	r4, [r4, #12]
   20d5c:	mov	r1, #1
   20d60:	cmp	r4, lr
   20d64:	blt	20da4 <__assert_fail@plt+0xf88c>
   20d68:	sub	r1, r4, lr
   20d6c:	clz	r1, r1
   20d70:	lsr	r4, r1, #5
   20d74:	mov	r5, #1
   20d78:	lsl	r1, r4, #1
   20d7c:	cmp	ip, lr
   20d80:	orreq	r1, r5, r4, lsl #1
   20d84:	cmp	r1, #0
   20d88:	beq	20da0 <__assert_fail@plt+0xf888>
   20d8c:	ldr	r5, [fp, #12]
   20d90:	str	r5, [sp]
   20d94:	bl	20db0 <__assert_fail@plt+0xf898>
   20d98:	sub	sp, fp, #8
   20d9c:	pop	{r4, r5, fp, pc}
   20da0:	mov	r1, #0
   20da4:	mov	r0, r1
   20da8:	sub	sp, fp, #8
   20dac:	pop	{r4, r5, fp, pc}
   20db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20db4:	add	fp, sp, #28
   20db8:	sub	sp, sp, #36	; 0x24
   20dbc:	mov	r6, r2
   20dc0:	mov	r5, r1
   20dc4:	mov	r7, r0
   20dc8:	ldr	r4, [r0, #84]	; 0x54
   20dcc:	ldr	r0, [r4, #24]
   20dd0:	str	r3, [sp, #32]
   20dd4:	add	r1, r3, r3, lsl #1
   20dd8:	add	r0, r0, r1, lsl #2
   20ddc:	mov	r2, r0
   20de0:	ldr	r1, [r2, #4]!
   20de4:	str	r2, [sp, #24]
   20de8:	cmp	r1, #1
   20dec:	blt	20f94 <__assert_fail@plt+0xfa7c>
   20df0:	mov	r1, #1
   20df4:	mvn	r2, r1, lsl r6
   20df8:	str	r2, [sp, #16]
   20dfc:	lsl	r1, r1, r6
   20e00:	str	r1, [sp, #20]
   20e04:	mov	sl, #0
   20e08:	cmp	r6, #31
   20e0c:	mov	r1, #0
   20e10:	movwgt	r1, #1
   20e14:	and	r2, r5, #2
   20e18:	str	r2, [sp, #8]
   20e1c:	orr	r1, r1, r2, lsr #1
   20e20:	str	r1, [sp, #12]
   20e24:	add	r0, r0, #8
   20e28:	str	r0, [sp, #28]
   20e2c:	and	r0, r5, #1
   20e30:	str	r0, [sp, #4]
   20e34:	b	20e4c <__assert_fail@plt+0xf934>
   20e38:	ldr	r0, [sp, #24]
   20e3c:	ldr	r0, [r0]
   20e40:	add	sl, sl, #1
   20e44:	cmp	sl, r0
   20e48:	bge	20f94 <__assert_fail@plt+0xfa7c>
   20e4c:	ldr	r0, [sp, #28]
   20e50:	ldr	r0, [r0]
   20e54:	ldr	r8, [r0, sl, lsl #2]
   20e58:	ldr	r0, [r4]
   20e5c:	add	r1, r0, r8, lsl #3
   20e60:	ldrb	r1, [r1, #4]
   20e64:	cmp	r1, #9
   20e68:	beq	20f54 <__assert_fail@plt+0xfa3c>
   20e6c:	cmp	r1, #8
   20e70:	beq	20f70 <__assert_fail@plt+0xfa58>
   20e74:	cmp	r1, #4
   20e78:	bne	20e38 <__assert_fail@plt+0xf920>
   20e7c:	ldr	r0, [fp, #8]
   20e80:	cmn	r0, #1
   20e84:	beq	20e38 <__assert_fail@plt+0xf920>
   20e88:	ldr	r0, [r7, #116]	; 0x74
   20e8c:	ldr	r1, [fp, #8]
   20e90:	add	r1, r1, r1, lsl #1
   20e94:	add	r0, r0, r1, lsl #3
   20e98:	add	r9, r0, #16
   20e9c:	b	20ec0 <__assert_fail@plt+0xf9a8>
   20ea0:	ldr	r0, [r9]
   20ea4:	ldr	r1, [sp, #16]
   20ea8:	and	r0, r0, r1
   20eac:	str	r0, [r9]
   20eb0:	ldrb	r0, [r9, #4]
   20eb4:	add	r9, r9, #24
   20eb8:	cmp	r0, #0
   20ebc:	beq	20e38 <__assert_fail@plt+0xf920>
   20ec0:	ldr	r0, [r9, #-16]
   20ec4:	cmp	r0, r8
   20ec8:	bne	20eb0 <__assert_fail@plt+0xf998>
   20ecc:	cmp	r6, #31
   20ed0:	bgt	20ee4 <__assert_fail@plt+0xf9cc>
   20ed4:	ldr	r0, [r9]
   20ed8:	ldr	r1, [sp, #20]
   20edc:	tst	r0, r1
   20ee0:	beq	20eb0 <__assert_fail@plt+0xf998>
   20ee4:	ldr	r0, [r4, #20]
   20ee8:	add	r1, r8, r8, lsl #1
   20eec:	add	r0, r0, r1, lsl #2
   20ef0:	ldr	r0, [r0, #8]
   20ef4:	ldr	r3, [r0]
   20ef8:	ldr	r0, [sp, #32]
   20efc:	cmp	r3, r0
   20f00:	beq	20fa0 <__assert_fail@plt+0xfa88>
   20f04:	ldr	r0, [fp, #8]
   20f08:	str	r0, [sp]
   20f0c:	mov	r0, r7
   20f10:	mov	r1, r5
   20f14:	mov	r2, r6
   20f18:	bl	20db0 <__assert_fail@plt+0xf898>
   20f1c:	cmp	r0, #0
   20f20:	beq	20f38 <__assert_fail@plt+0xfa20>
   20f24:	cmn	r0, #1
   20f28:	beq	20fb4 <__assert_fail@plt+0xfa9c>
   20f2c:	cmp	r6, #31
   20f30:	ble	20ea0 <__assert_fail@plt+0xf988>
   20f34:	b	20eb0 <__assert_fail@plt+0xf998>
   20f38:	ldr	r0, [sp, #12]
   20f3c:	cmp	r0, #0
   20f40:	beq	20ea0 <__assert_fail@plt+0xf988>
   20f44:	ldr	r0, [sp, #8]
   20f48:	cmp	r0, #0
   20f4c:	beq	20eb0 <__assert_fail@plt+0xf998>
   20f50:	b	20fb0 <__assert_fail@plt+0xfa98>
   20f54:	ldr	r1, [sp, #8]
   20f58:	cmp	r1, #0
   20f5c:	beq	20e38 <__assert_fail@plt+0xf920>
   20f60:	ldr	r0, [r0, r8, lsl #3]
   20f64:	cmp	r0, r6
   20f68:	bne	20e38 <__assert_fail@plt+0xf920>
   20f6c:	b	20fb0 <__assert_fail@plt+0xfa98>
   20f70:	ldr	r1, [sp, #4]
   20f74:	cmp	r1, #0
   20f78:	beq	20e38 <__assert_fail@plt+0xf920>
   20f7c:	ldr	r0, [r0, r8, lsl #3]
   20f80:	cmp	r0, r6
   20f84:	bne	20e38 <__assert_fail@plt+0xf920>
   20f88:	mvn	r0, #0
   20f8c:	sub	sp, fp, #28
   20f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f94:	ubfx	r0, r5, #1, #1
   20f98:	sub	sp, fp, #28
   20f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fa0:	ldr	r0, [sp, #4]
   20fa4:	rsb	r0, r0, #0
   20fa8:	sub	sp, fp, #28
   20fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fb0:	mov	r0, #0
   20fb4:	sub	sp, fp, #28
   20fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20fc0:	add	fp, sp, #24
   20fc4:	mov	r7, r3
   20fc8:	mov	r5, r2
   20fcc:	mov	r8, r1
   20fd0:	mov	r2, r0
   20fd4:	ldr	r6, [r0, #84]	; 0x54
   20fd8:	mov	r0, r6
   20fdc:	mov	r1, r5
   20fe0:	bl	1ed9c <__assert_fail@plt+0xd884>
   20fe4:	mov	r4, r0
   20fe8:	cmp	r0, #1
   20fec:	blt	21028 <__assert_fail@plt+0xfb10>
   20ff0:	ldr	r1, [fp, #8]
   20ff4:	add	r0, r4, r7
   20ff8:	cmp	r0, r1
   20ffc:	bgt	21028 <__assert_fail@plt+0xfb10>
   21000:	ldr	r1, [r8]
   21004:	ldr	r0, [r1, r0, lsl #2]
   21008:	cmp	r0, #0
   2100c:	beq	21030 <__assert_fail@plt+0xfb18>
   21010:	ldr	r1, [r6, #12]
   21014:	ldr	r1, [r1, r5, lsl #2]
   21018:	add	r0, r0, #4
   2101c:	bl	1b740 <__assert_fail@plt+0xa228>
   21020:	cmp	r0, #0
   21024:	moveq	r4, #0
   21028:	mov	r0, r4
   2102c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21030:	mov	r4, #0
   21034:	mov	r0, r4
   21038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2103c:	mov	r1, #16
   21040:	mov	r2, #0
   21044:	add	r3, r0, #12
   21048:	str	r2, [r0]
   2104c:	stmib	r0, {r1, r3}
   21050:	bx	lr
   21054:	push	{r4, sl, fp, lr}
   21058:	add	fp, sp, #8
   2105c:	mov	r4, r0
   21060:	ldr	r0, [r0]
   21064:	cmp	r0, r1
   21068:	bcs	2109c <__assert_fail@plt+0xfb84>
   2106c:	add	r2, r4, #12
   21070:	mov	r0, r4
   21074:	mov	r3, #8
   21078:	bl	22a94 <__assert_fail@plt+0x1157c>
   2107c:	mov	r1, r0
   21080:	mov	r0, #1
   21084:	cmp	r1, #0
   21088:	popne	{r4, sl, fp, pc}
   2108c:	mov	r0, r4
   21090:	bl	215ac <__assert_fail@plt+0x10094>
   21094:	mov	r0, #0
   21098:	pop	{r4, sl, fp, pc}
   2109c:	str	r1, [r4]
   210a0:	mov	r0, #1
   210a4:	pop	{r4, sl, fp, pc}
   210a8:	push	{r4, sl, fp, lr}
   210ac:	add	fp, sp, #8
   210b0:	mov	r4, r0
   210b4:	bl	215d4 <__assert_fail@plt+0x100bc>
   210b8:	mov	r0, r4
   210bc:	pop	{r4, sl, fp, lr}
   210c0:	b	2103c <__assert_fail@plt+0xfb24>
   210c4:	cmp	r0, #0
   210c8:	bxeq	lr
   210cc:	push	{r4, r5, r6, sl, fp, lr}
   210d0:	add	fp, sp, #16
   210d4:	mov	r4, r0
   210d8:	ldr	r1, [r0]
   210dc:	ldr	r0, [r0, #8]
   210e0:	cmp	r1, #1
   210e4:	blt	21124 <__assert_fail@plt+0xfc0c>
   210e8:	mov	r5, #0
   210ec:	mov	r6, #0
   210f0:	add	r0, r0, r5
   210f4:	ldr	r0, [r0, #20]
   210f8:	bl	22b58 <__assert_fail@plt+0x11640>
   210fc:	ldr	r0, [r4, #8]
   21100:	add	r0, r0, r5
   21104:	ldr	r0, [r0, #8]
   21108:	bl	22b58 <__assert_fail@plt+0x11640>
   2110c:	add	r5, r5, #24
   21110:	add	r6, r6, #1
   21114:	ldr	r1, [r4]
   21118:	ldr	r0, [r4, #8]
   2111c:	cmp	r6, r1
   21120:	blt	210f0 <__assert_fail@plt+0xfbd8>
   21124:	pop	{r4, r5, r6, sl, fp, lr}
   21128:	b	22b58 <__assert_fail@plt+0x11640>
   2112c:	ldr	r0, [r0, #8]
   21130:	bx	lr
   21134:	push	{r4, r5, fp, lr}
   21138:	add	fp, sp, #8
   2113c:	ldr	r4, [r0]
   21140:	add	r0, r4, r3, lsl #3
   21144:	ldr	r0, [r0, #4]
   21148:	uxtb	r5, r0
   2114c:	ldr	lr, [fp, #12]
   21150:	ldr	ip, [fp, #8]
   21154:	cmp	r5, #9
   21158:	beq	21184 <__assert_fail@plt+0xfc6c>
   2115c:	cmp	r5, #8
   21160:	bne	211e8 <__assert_fail@plt+0xfcd0>
   21164:	ldr	r0, [r4, r3, lsl #3]
   21168:	add	r0, r0, #1
   2116c:	cmp	r0, lr
   21170:	bge	211e8 <__assert_fail@plt+0xfcd0>
   21174:	str	ip, [r1, r0, lsl #3]!
   21178:	mvn	r0, #0
   2117c:	str	r0, [r1, #4]
   21180:	pop	{r4, r5, fp, pc}
   21184:	ldr	r3, [r4, r3, lsl #3]
   21188:	add	r3, r3, #1
   2118c:	cmp	r3, lr
   21190:	popge	{r4, r5, fp, pc}
   21194:	ldr	r4, [r1, r3, lsl #3]
   21198:	cmp	r4, ip
   2119c:	bge	211b4 <__assert_fail@plt+0xfc9c>
   211a0:	add	r0, r1, r3, lsl #3
   211a4:	str	ip, [r0, #4]
   211a8:	lsl	r3, lr, #3
   211ac:	mov	r0, r2
   211b0:	b	211d4 <__assert_fail@plt+0xfcbc>
   211b4:	tst	r0, #524288	; 0x80000
   211b8:	beq	211e0 <__assert_fail@plt+0xfcc8>
   211bc:	ldr	r0, [r2, r3, lsl #3]
   211c0:	cmn	r0, #1
   211c4:	beq	211e0 <__assert_fail@plt+0xfcc8>
   211c8:	lsl	r3, lr, #3
   211cc:	mov	r0, r1
   211d0:	mov	r1, r2
   211d4:	mov	r2, r3
   211d8:	pop	{r4, r5, fp, lr}
   211dc:	b	112a8 <memcpy@plt>
   211e0:	add	r0, r1, r3, lsl #3
   211e4:	str	ip, [r0, #4]
   211e8:	pop	{r4, r5, fp, pc}
   211ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   211f0:	add	fp, sp, #24
   211f4:	mov	r4, r0
   211f8:	mvn	r0, #0
   211fc:	cmp	r4, #0
   21200:	beq	212a0 <__assert_fail@plt+0xfd88>
   21204:	mov	r5, r2
   21208:	ldr	r2, [r4]
   2120c:	cmp	r2, #0
   21210:	beq	212a0 <__assert_fail@plt+0xfd88>
   21214:	ldr	r9, [fp, #12]
   21218:	ldr	r8, [fp, #8]
   2121c:	sub	r0, r2, #1
   21220:	str	r0, [r4]
   21224:	ldr	r2, [r4, #8]
   21228:	add	r6, r0, r0, lsl #1
   2122c:	ldr	r0, [r2, r6, lsl #3]!
   21230:	str	r0, [r1]
   21234:	ldr	r1, [r2, #8]
   21238:	lsl	r7, r5, #3
   2123c:	mov	r0, r3
   21240:	mov	r2, r7
   21244:	bl	112a8 <memcpy@plt>
   21248:	ldr	r0, [r4, #8]
   2124c:	add	r0, r0, r6, lsl #3
   21250:	ldr	r0, [r0, #8]
   21254:	add	r1, r0, r5, lsl #3
   21258:	mov	r0, r8
   2125c:	mov	r2, r7
   21260:	bl	112a8 <memcpy@plt>
   21264:	ldr	r0, [r9, #8]
   21268:	bl	22b58 <__assert_fail@plt+0x11640>
   2126c:	ldr	r0, [r4, #8]
   21270:	add	r0, r0, r6, lsl #3
   21274:	ldr	r0, [r0, #8]
   21278:	bl	22b58 <__assert_fail@plt+0x11640>
   2127c:	ldr	r0, [r4, #8]
   21280:	add	r0, r0, r6, lsl #3
   21284:	vldr	d16, [r0, #12]
   21288:	ldr	r0, [r0, #20]
   2128c:	str	r0, [r9, #8]
   21290:	vstr	d16, [r9]
   21294:	ldr	r0, [r4, #8]
   21298:	add	r0, r0, r6, lsl #3
   2129c:	ldr	r0, [r0, #4]
   212a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   212a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212a8:	add	fp, sp, #28
   212ac:	sub	sp, sp, #20
   212b0:	mov	r9, r3
   212b4:	mov	r5, r0
   212b8:	ldr	r4, [r0, #84]	; 0x54
   212bc:	ldr	r3, [r4]
   212c0:	ldr	sl, [fp, #12]
   212c4:	add	r0, r3, sl, lsl #3
   212c8:	ldr	r7, [r0, #4]
   212cc:	ldr	r0, [fp, #16]
   212d0:	ldr	r6, [fp, #8]
   212d4:	tst	r7, #8
   212d8:	bne	21398 <__assert_fail@plt+0xfe80>
   212dc:	tst	r7, #1048576	; 0x100000
   212e0:	bne	2148c <__assert_fail@plt+0xff74>
   212e4:	mov	ip, r1
   212e8:	mov	r9, r6
   212ec:	uxtb	r1, r7
   212f0:	cmp	r1, #4
   212f4:	bne	214b0 <__assert_fail@plt+0xff98>
   212f8:	ldr	r0, [r3, sl, lsl #3]
   212fc:	add	r0, r0, #1
   21300:	mov	r7, #0
   21304:	mov	r6, ip
   21308:	cmp	r0, ip
   2130c:	mov	r3, r2
   21310:	bge	21324 <__assert_fail@plt+0xfe0c>
   21314:	mov	r1, r3
   21318:	ldr	r2, [r1, r0, lsl #3]!
   2131c:	ldr	r1, [r1, #4]
   21320:	sub	r7, r1, r2
   21324:	ldr	r1, [fp, #20]
   21328:	cmp	r1, #0
   2132c:	beq	214e0 <__assert_fail@plt+0xffc8>
   21330:	mvn	r8, #0
   21334:	cmp	r0, r6
   21338:	bge	2154c <__assert_fail@plt+0x10034>
   2133c:	ldr	r1, [r3, r0, lsl #3]
   21340:	cmn	r1, #1
   21344:	beq	2154c <__assert_fail@plt+0x10034>
   21348:	add	r0, r3, r0, lsl #3
   2134c:	ldr	r0, [r0, #4]
   21350:	cmn	r0, #1
   21354:	beq	2154c <__assert_fail@plt+0x10034>
   21358:	cmp	r7, #0
   2135c:	beq	21558 <__assert_fail@plt+0x10040>
   21360:	mov	r0, r9
   21364:	ldr	r2, [r9]
   21368:	ldr	r0, [r5, #28]
   2136c:	sub	r0, r0, r2
   21370:	cmp	r0, r7
   21374:	blt	2154c <__assert_fail@plt+0x10034>
   21378:	ldr	r3, [r5, #4]
   2137c:	add	r0, r3, r1
   21380:	add	r1, r3, r2
   21384:	mov	r2, r7
   21388:	bl	113e0 <bcmp@plt>
   2138c:	cmp	r0, #0
   21390:	bne	2154c <__assert_fail@plt+0x10034>
   21394:	b	214e8 <__assert_fail@plt+0xffd0>
   21398:	str	r1, [sp, #12]
   2139c:	str	r2, [sp, #16]
   213a0:	ldr	r2, [r6]
   213a4:	ldr	r1, [r5, #100]	; 0x64
   213a8:	ldr	r5, [r1, r2, lsl #2]
   213ac:	ldr	r4, [r4, #20]
   213b0:	mov	r1, sl
   213b4:	bl	1b740 <__assert_fail@plt+0xa228>
   213b8:	cmp	r0, #0
   213bc:	bne	213d8 <__assert_fail@plt+0xfec0>
   213c0:	ldr	r0, [fp, #16]
   213c4:	mov	r1, sl
   213c8:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   213cc:	mvn	r8, #1
   213d0:	cmp	r0, #0
   213d4:	beq	2154c <__assert_fail@plt+0x10034>
   213d8:	add	r0, sl, sl, lsl #1
   213dc:	add	r1, r4, r0, lsl #2
   213e0:	mov	r0, r1
   213e4:	ldr	r2, [r0, #4]!
   213e8:	cmp	r2, #1
   213ec:	blt	214d8 <__assert_fail@plt+0xffc0>
   213f0:	add	sl, r5, #4
   213f4:	ldr	r7, [r1, #8]
   213f8:	ldr	r6, [r0]
   213fc:	mov	r5, #0
   21400:	mvn	r8, #0
   21404:	b	21418 <__assert_fail@plt+0xff00>
   21408:	mov	r8, r4
   2140c:	add	r5, r5, #1
   21410:	cmp	r5, r6
   21414:	bge	2154c <__assert_fail@plt+0x10034>
   21418:	ldr	r4, [r7, r5, lsl #2]
   2141c:	mov	r0, sl
   21420:	mov	r1, r4
   21424:	bl	1b740 <__assert_fail@plt+0xa228>
   21428:	cmp	r0, #0
   2142c:	beq	2140c <__assert_fail@plt+0xfef4>
   21430:	cmn	r8, #1
   21434:	beq	21408 <__assert_fail@plt+0xfef0>
   21438:	ldr	r5, [fp, #16]
   2143c:	mov	r0, r5
   21440:	mov	r1, r8
   21444:	bl	1b740 <__assert_fail@plt+0xa228>
   21448:	cmp	r0, #0
   2144c:	bne	21548 <__assert_fail@plt+0x10030>
   21450:	ldr	r0, [fp, #20]
   21454:	cmp	r0, #0
   21458:	beq	2154c <__assert_fail@plt+0x10034>
   2145c:	ldr	r1, [fp, #8]
   21460:	ldr	r1, [r1]
   21464:	ldr	r2, [sp, #16]
   21468:	stm	sp, {r2, r9}
   2146c:	str	r5, [sp, #8]
   21470:	mov	r2, r4
   21474:	ldr	r3, [sp, #12]
   21478:	bl	215ec <__assert_fail@plt+0x100d4>
   2147c:	mvn	r4, #1
   21480:	cmp	r0, #0
   21484:	movne	r8, r4
   21488:	b	2154c <__assert_fail@plt+0x10034>
   2148c:	mov	r9, r6
   21490:	ldr	r3, [r6]
   21494:	mov	r0, r4
   21498:	mov	r1, sl
   2149c:	mov	r2, r5
   214a0:	bl	1ed9c <__assert_fail@plt+0xd884>
   214a4:	mov	r7, r0
   214a8:	cmp	r0, #0
   214ac:	bne	214e8 <__assert_fail@plt+0xffd0>
   214b0:	ldr	r0, [r4]
   214b4:	add	r1, r0, sl, lsl #3
   214b8:	ldr	r2, [r9]
   214bc:	mov	r0, r5
   214c0:	bl	1f078 <__assert_fail@plt+0xdb60>
   214c4:	mvn	r8, #0
   214c8:	mov	r7, #1
   214cc:	cmp	r0, #0
   214d0:	bne	214e8 <__assert_fail@plt+0xffd0>
   214d4:	b	2154c <__assert_fail@plt+0x10034>
   214d8:	mvn	r8, #0
   214dc:	b	2154c <__assert_fail@plt+0x10034>
   214e0:	cmp	r7, #0
   214e4:	beq	21558 <__assert_fail@plt+0x10040>
   214e8:	ldr	r0, [r4, #12]
   214ec:	ldr	r4, [r0, sl, lsl #2]
   214f0:	ldr	r0, [r9]
   214f4:	add	r0, r0, r7
   214f8:	str	r0, [r9]
   214fc:	ldr	r1, [fp, #20]
   21500:	cmp	r1, #0
   21504:	beq	2153c <__assert_fail@plt+0x10024>
   21508:	ldr	r1, [r5, #92]	; 0x5c
   2150c:	mvn	r8, #0
   21510:	cmp	r0, r1
   21514:	bgt	2154c <__assert_fail@plt+0x10034>
   21518:	ldr	r1, [r5, #100]	; 0x64
   2151c:	ldr	r0, [r1, r0, lsl #2]
   21520:	cmp	r0, #0
   21524:	beq	2154c <__assert_fail@plt+0x10034>
   21528:	add	r0, r0, #4
   2152c:	mov	r1, r4
   21530:	bl	1b740 <__assert_fail@plt+0xa228>
   21534:	cmp	r0, #0
   21538:	beq	2154c <__assert_fail@plt+0x10034>
   2153c:	mov	r0, #0
   21540:	ldr	r1, [fp, #16]
   21544:	str	r0, [r1, #4]
   21548:	mov	r8, r4
   2154c:	mov	r0, r8
   21550:	sub	sp, fp, #28
   21554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21558:	ldr	r0, [fp, #16]
   2155c:	mov	r1, sl
   21560:	bl	1b4d8 <__assert_fail@plt+0x9fc0>
   21564:	cmp	r0, #0
   21568:	beq	215a4 <__assert_fail@plt+0x1008c>
   2156c:	ldr	r0, [r4, #20]
   21570:	add	r1, sl, sl, lsl #1
   21574:	add	r0, r0, r1, lsl #2
   21578:	ldr	r0, [r0, #8]
   2157c:	ldr	r8, [r0]
   21580:	ldr	r0, [r9]
   21584:	ldr	r1, [r5, #100]	; 0x64
   21588:	ldr	r0, [r1, r0, lsl #2]
   2158c:	add	r0, r0, #4
   21590:	mov	r1, r8
   21594:	bl	1b740 <__assert_fail@plt+0xa228>
   21598:	cmp	r0, #0
   2159c:	bne	2154c <__assert_fail@plt+0x10034>
   215a0:	b	214b0 <__assert_fail@plt+0xff98>
   215a4:	mvn	r8, #1
   215a8:	b	2154c <__assert_fail@plt+0x10034>
   215ac:	push	{r4, sl, fp, lr}
   215b0:	add	fp, sp, #8
   215b4:	mov	r4, r0
   215b8:	bl	215d4 <__assert_fail@plt+0x100bc>
   215bc:	mvn	r0, #0
   215c0:	mov	r1, #0
   215c4:	add	r2, r4, #12
   215c8:	str	r1, [r4]
   215cc:	stmib	r4, {r0, r2}
   215d0:	pop	{r4, sl, fp, pc}
   215d4:	mov	r1, r0
   215d8:	ldr	r0, [r0, #8]
   215dc:	add	r1, r1, #12
   215e0:	cmp	r0, r1
   215e4:	bxeq	lr
   215e8:	b	22b58 <__assert_fail@plt+0x11640>
   215ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215f0:	add	fp, sp, #28
   215f4:	sub	sp, sp, #12
   215f8:	mov	r6, r3
   215fc:	mov	r9, r2
   21600:	mov	r5, r1
   21604:	mov	r4, r0
   21608:	ldr	r7, [r0]
   2160c:	ldr	r1, [r0, #4]
   21610:	add	r0, r7, #1
   21614:	str	r0, [r4]
   21618:	ldr	r2, [fp, #16]
   2161c:	str	r2, [sp, #8]
   21620:	ldr	r2, [fp, #12]
   21624:	str	r2, [sp, #4]
   21628:	ldr	sl, [fp, #8]
   2162c:	cmp	r0, r1
   21630:	bne	2165c <__assert_fail@plt+0x10144>
   21634:	ldr	r0, [r4, #8]
   21638:	add	r1, r1, r1, lsl #1
   2163c:	lsl	r1, r1, #4
   21640:	bl	22698 <__assert_fail@plt+0x11180>
   21644:	cmp	r0, #0
   21648:	beq	216d0 <__assert_fail@plt+0x101b8>
   2164c:	str	r0, [r4, #8]
   21650:	ldr	r0, [r4, #4]
   21654:	lsl	r0, r0, #1
   21658:	str	r0, [r4, #4]
   2165c:	ldr	r0, [r4, #8]
   21660:	add	r8, r7, r7, lsl #1
   21664:	str	r5, [r0, r8, lsl #3]!
   21668:	str	r9, [r0, #4]
   2166c:	lsl	r0, r6, #4
   21670:	bl	22668 <__assert_fail@plt+0x11150>
   21674:	ldr	r1, [r4, #8]
   21678:	add	r1, r1, r8, lsl #3
   2167c:	str	r0, [r1, #8]
   21680:	cmp	r0, #0
   21684:	beq	216d0 <__assert_fail@plt+0x101b8>
   21688:	lsl	r5, r6, #3
   2168c:	mov	r1, sl
   21690:	mov	r2, r5
   21694:	bl	112a8 <memcpy@plt>
   21698:	ldr	r0, [r4, #8]
   2169c:	add	r0, r0, r8, lsl #3
   216a0:	ldr	r0, [r0, #8]
   216a4:	add	r0, r0, r6, lsl #3
   216a8:	ldr	r1, [sp, #4]
   216ac:	mov	r2, r5
   216b0:	bl	112a8 <memcpy@plt>
   216b4:	ldr	r0, [r4, #8]
   216b8:	add	r0, r0, r8, lsl #3
   216bc:	add	r0, r0, #12
   216c0:	ldr	r1, [sp, #8]
   216c4:	sub	sp, fp, #28
   216c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216cc:	b	1b6c4 <__assert_fail@plt+0xa1ac>
   216d0:	mov	r0, #12
   216d4:	sub	sp, fp, #28
   216d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   216e0:	add	fp, sp, #24
   216e4:	sub	sp, sp, #32
   216e8:	mov	r4, r2
   216ec:	mov	r8, r0
   216f0:	ldr	r6, [fp, #12]
   216f4:	ldr	r7, [fp, #8]
   216f8:	cmp	r1, #0
   216fc:	beq	21724 <__assert_fail@plt+0x1020c>
   21700:	mov	r5, r1
   21704:	str	r4, [sp]
   21708:	str	r3, [sp, #4]
   2170c:	movw	r2, #16289	; 0x3fa1
   21710:	movt	r2, #2
   21714:	mov	r0, r8
   21718:	mov	r1, #1
   2171c:	mov	r3, r5
   21720:	b	2173c <__assert_fail@plt+0x10224>
   21724:	str	r3, [sp]
   21728:	movw	r2, #16301	; 0x3fad
   2172c:	movt	r2, #2
   21730:	mov	r0, r8
   21734:	mov	r1, #1
   21738:	mov	r3, r4
   2173c:	bl	11458 <__fprintf_chk@plt>
   21740:	movw	r1, #16308	; 0x3fb4
   21744:	movt	r1, #2
   21748:	mov	r0, #0
   2174c:	mov	r2, #5
   21750:	bl	11308 <dcgettext@plt>
   21754:	mov	r3, r0
   21758:	movw	r0, #2022	; 0x7e6
   2175c:	str	r0, [sp]
   21760:	movw	r2, #17026	; 0x4282
   21764:	movt	r2, #2
   21768:	mov	r0, r8
   2176c:	mov	r1, #1
   21770:	bl	11458 <__fprintf_chk@plt>
   21774:	movw	r4, #14063	; 0x36ef
   21778:	movt	r4, #2
   2177c:	mov	r0, r4
   21780:	mov	r1, r8
   21784:	bl	1120c <fputs_unlocked@plt>
   21788:	movw	r1, #16312	; 0x3fb8
   2178c:	movt	r1, #2
   21790:	mov	r0, #0
   21794:	mov	r2, #5
   21798:	bl	11308 <dcgettext@plt>
   2179c:	mov	r2, r0
   217a0:	movw	r3, #16483	; 0x4063
   217a4:	movt	r3, #2
   217a8:	mov	r0, r8
   217ac:	mov	r1, #1
   217b0:	bl	11458 <__fprintf_chk@plt>
   217b4:	mov	r0, r4
   217b8:	mov	r1, r8
   217bc:	bl	1120c <fputs_unlocked@plt>
   217c0:	cmp	r6, #9
   217c4:	bhi	21800 <__assert_fail@plt+0x102e8>
   217c8:	add	r0, pc, #0
   217cc:	ldr	pc, [r0, r6, lsl #2]
   217d0:	strdeq	r1, [r2], -r8
   217d4:	andeq	r1, r2, ip, lsl #16
   217d8:	andeq	r1, r2, ip, lsr r8
   217dc:	andeq	r1, r2, r4, ror #16
   217e0:	andeq	r1, r2, ip, lsl #17
   217e4:			; <UNDEFINED> instruction: 0x000218b4
   217e8:	ldrdeq	r1, [r2], -ip
   217ec:	andeq	r1, r2, r4, lsl r9
   217f0:			; <UNDEFINED> instruction: 0x000219b4
   217f4:	andeq	r1, r2, ip, asr r9
   217f8:	sub	sp, fp, #24
   217fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21800:	movw	r1, #16836	; 0x41c4
   21804:	movt	r1, #2
   21808:	b	21964 <__assert_fail@plt+0x1044c>
   2180c:	movw	r1, #16517	; 0x4085
   21810:	movt	r1, #2
   21814:	mov	r0, #0
   21818:	mov	r2, #5
   2181c:	bl	11308 <dcgettext@plt>
   21820:	mov	r2, r0
   21824:	ldr	r3, [r7]
   21828:	mov	r0, r8
   2182c:	mov	r1, #1
   21830:	sub	sp, fp, #24
   21834:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   21838:	b	11458 <__fprintf_chk@plt>
   2183c:	movw	r1, #16533	; 0x4095
   21840:	movt	r1, #2
   21844:	mov	r0, #0
   21848:	mov	r2, #5
   2184c:	bl	11308 <dcgettext@plt>
   21850:	mov	r2, r0
   21854:	ldr	r3, [r7]
   21858:	ldr	r0, [r7, #4]
   2185c:	str	r0, [sp]
   21860:	b	21950 <__assert_fail@plt+0x10438>
   21864:	movw	r1, #16556	; 0x40ac
   21868:	movt	r1, #2
   2186c:	mov	r0, #0
   21870:	mov	r2, #5
   21874:	bl	11308 <dcgettext@plt>
   21878:	mov	r2, r0
   2187c:	ldr	r3, [r7]
   21880:	ldmib	r7, {r0, r1}
   21884:	stm	sp, {r0, r1}
   21888:	b	21950 <__assert_fail@plt+0x10438>
   2188c:	movw	r1, #16584	; 0x40c8
   21890:	movt	r1, #2
   21894:	mov	r0, #0
   21898:	mov	r2, #5
   2189c:	bl	11308 <dcgettext@plt>
   218a0:	mov	r2, r0
   218a4:	ldr	r3, [r7]
   218a8:	ldmib	r7, {r0, r1, r7}
   218ac:	stm	sp, {r0, r1, r7}
   218b0:	b	21950 <__assert_fail@plt+0x10438>
   218b4:	movw	r1, #16616	; 0x40e8
   218b8:	movt	r1, #2
   218bc:	mov	r0, #0
   218c0:	mov	r2, #5
   218c4:	bl	11308 <dcgettext@plt>
   218c8:	mov	r2, r0
   218cc:	ldr	r3, [r7]
   218d0:	ldmib	r7, {r0, r1, r6, r7}
   218d4:	stm	sp, {r0, r1, r6, r7}
   218d8:	b	21950 <__assert_fail@plt+0x10438>
   218dc:	movw	r1, #16652	; 0x410c
   218e0:	movt	r1, #2
   218e4:	mov	r0, #0
   218e8:	mov	r2, #5
   218ec:	bl	11308 <dcgettext@plt>
   218f0:	mov	r2, r0
   218f4:	ldr	r3, [r7]
   218f8:	ldmib	r7, {r0, r1, r6}
   218fc:	ldr	r5, [r7, #16]
   21900:	ldr	r7, [r7, #20]
   21904:	stm	sp, {r0, r1, r6}
   21908:	str	r5, [sp, #12]
   2190c:	str	r7, [sp, #16]
   21910:	b	21950 <__assert_fail@plt+0x10438>
   21914:	movw	r1, #16692	; 0x4134
   21918:	movt	r1, #2
   2191c:	mov	r0, #0
   21920:	mov	r2, #5
   21924:	bl	11308 <dcgettext@plt>
   21928:	mov	r2, r0
   2192c:	ldr	r3, [r7]
   21930:	ldmib	r7, {r0, r1, r6}
   21934:	ldr	r5, [r7, #16]
   21938:	ldr	r4, [r7, #20]
   2193c:	ldr	r7, [r7, #24]
   21940:	stm	sp, {r0, r1, r6}
   21944:	str	r5, [sp, #12]
   21948:	str	r4, [sp, #16]
   2194c:	str	r7, [sp, #20]
   21950:	mov	r0, r8
   21954:	mov	r1, #1
   21958:	b	21a04 <__assert_fail@plt+0x104ec>
   2195c:	movw	r1, #16784	; 0x4190
   21960:	movt	r1, #2
   21964:	mov	r0, #0
   21968:	mov	r2, #5
   2196c:	bl	11308 <dcgettext@plt>
   21970:	mov	ip, r0
   21974:	ldr	r3, [r7]
   21978:	ldr	r0, [r7, #4]
   2197c:	ldr	r1, [r7, #8]
   21980:	ldr	r6, [r7, #12]
   21984:	ldr	r5, [r7, #16]
   21988:	ldr	r4, [r7, #20]
   2198c:	ldr	r2, [r7, #24]
   21990:	ldr	lr, [r7, #28]
   21994:	ldr	r7, [r7, #32]
   21998:	stm	sp, {r0, r1, r6}
   2199c:	str	r5, [sp, #12]
   219a0:	str	r4, [sp, #16]
   219a4:	str	r2, [sp, #20]
   219a8:	str	lr, [sp, #24]
   219ac:	str	r7, [sp, #28]
   219b0:	b	219f8 <__assert_fail@plt+0x104e0>
   219b4:	movw	r1, #16736	; 0x4160
   219b8:	movt	r1, #2
   219bc:	mov	r0, #0
   219c0:	mov	r2, #5
   219c4:	bl	11308 <dcgettext@plt>
   219c8:	mov	ip, r0
   219cc:	ldr	r3, [r7]
   219d0:	ldmib	r7, {r0, r1, r6}
   219d4:	ldr	r5, [r7, #16]
   219d8:	ldr	r4, [r7, #20]
   219dc:	ldr	r2, [r7, #24]
   219e0:	ldr	r7, [r7, #28]
   219e4:	stm	sp, {r0, r1, r6}
   219e8:	str	r5, [sp, #12]
   219ec:	str	r4, [sp, #16]
   219f0:	str	r2, [sp, #20]
   219f4:	str	r7, [sp, #24]
   219f8:	mov	r0, r8
   219fc:	mov	r1, #1
   21a00:	mov	r2, ip
   21a04:	bl	11458 <__fprintf_chk@plt>
   21a08:	sub	sp, fp, #24
   21a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21a10:	push	{r4, sl, fp, lr}
   21a14:	add	fp, sp, #8
   21a18:	sub	sp, sp, #8
   21a1c:	mov	lr, #0
   21a20:	ldr	ip, [fp, #8]
   21a24:	ldr	r4, [ip, lr, lsl #2]
   21a28:	add	lr, lr, #1
   21a2c:	cmp	r4, #0
   21a30:	bne	21a24 <__assert_fail@plt+0x1050c>
   21a34:	sub	r4, lr, #1
   21a38:	str	ip, [sp]
   21a3c:	str	r4, [sp, #4]
   21a40:	bl	216dc <__assert_fail@plt+0x101c4>
   21a44:	sub	sp, fp, #8
   21a48:	pop	{r4, sl, fp, pc}
   21a4c:	push	{r4, r5, fp, lr}
   21a50:	add	fp, sp, #8
   21a54:	sub	sp, sp, #48	; 0x30
   21a58:	mov	ip, #0
   21a5c:	ldr	r4, [fp, #8]
   21a60:	add	lr, sp, #8
   21a64:	ldr	r5, [r4]
   21a68:	str	r5, [lr, ip, lsl #2]
   21a6c:	cmp	r5, #0
   21a70:	beq	21a88 <__assert_fail@plt+0x10570>
   21a74:	add	ip, ip, #1
   21a78:	add	r4, r4, #4
   21a7c:	cmp	ip, #10
   21a80:	bne	21a64 <__assert_fail@plt+0x1054c>
   21a84:	mov	ip, #10
   21a88:	str	lr, [sp]
   21a8c:	str	ip, [sp, #4]
   21a90:	bl	216dc <__assert_fail@plt+0x101c4>
   21a94:	sub	sp, fp, #8
   21a98:	pop	{r4, r5, fp, pc}
   21a9c:	push	{fp, lr}
   21aa0:	mov	fp, sp
   21aa4:	sub	sp, sp, #8
   21aa8:	add	ip, fp, #8
   21aac:	str	ip, [sp, #4]
   21ab0:	str	ip, [sp]
   21ab4:	bl	21a4c <__assert_fail@plt+0x10534>
   21ab8:	mov	sp, fp
   21abc:	pop	{fp, pc}
   21ac0:	push	{fp, lr}
   21ac4:	mov	fp, sp
   21ac8:	movw	r0, #20940	; 0x51cc
   21acc:	movt	r0, #3
   21ad0:	ldr	r1, [r0]
   21ad4:	movw	r0, #14063	; 0x36ef
   21ad8:	movt	r0, #2
   21adc:	bl	1120c <fputs_unlocked@plt>
   21ae0:	movw	r1, #16896	; 0x4200
   21ae4:	movt	r1, #2
   21ae8:	mov	r0, #0
   21aec:	mov	r2, #5
   21af0:	bl	11308 <dcgettext@plt>
   21af4:	mov	r1, r0
   21af8:	movw	r2, #16916	; 0x4214
   21afc:	movt	r2, #2
   21b00:	mov	r0, #1
   21b04:	bl	11440 <__printf_chk@plt>
   21b08:	movw	r1, #16938	; 0x422a
   21b0c:	movt	r1, #2
   21b10:	mov	r0, #0
   21b14:	mov	r2, #5
   21b18:	bl	11308 <dcgettext@plt>
   21b1c:	mov	r1, r0
   21b20:	movw	r2, #14386	; 0x3832
   21b24:	movt	r2, #2
   21b28:	movw	r3, #14679	; 0x3957
   21b2c:	movt	r3, #2
   21b30:	mov	r0, #1
   21b34:	bl	11440 <__printf_chk@plt>
   21b38:	movw	r1, #16958	; 0x423e
   21b3c:	movt	r1, #2
   21b40:	mov	r0, #0
   21b44:	mov	r2, #5
   21b48:	bl	11308 <dcgettext@plt>
   21b4c:	mov	r1, r0
   21b50:	movw	r2, #16997	; 0x4265
   21b54:	movt	r2, #2
   21b58:	mov	r0, #1
   21b5c:	pop	{fp, lr}
   21b60:	b	11440 <__printf_chk@plt>
   21b64:	b	21b68 <__assert_fail@plt+0x10650>
   21b68:	push	{r4, r5, r6, sl, fp, lr}
   21b6c:	add	fp, sp, #16
   21b70:	mov	r4, r2
   21b74:	mov	r5, r1
   21b78:	mov	r6, r0
   21b7c:	bl	22c6c <__assert_fail@plt+0x11754>
   21b80:	cmp	r0, #0
   21b84:	popne	{r4, r5, r6, sl, fp, pc}
   21b88:	cmp	r6, #0
   21b8c:	beq	21ba0 <__assert_fail@plt+0x10688>
   21b90:	cmp	r5, #0
   21b94:	cmpne	r4, #0
   21b98:	bne	21ba0 <__assert_fail@plt+0x10688>
   21b9c:	pop	{r4, r5, r6, sl, fp, pc}
   21ba0:	bl	21f2c <__assert_fail@plt+0x10a14>
   21ba4:	push	{fp, lr}
   21ba8:	mov	fp, sp
   21bac:	bl	22668 <__assert_fail@plt+0x11150>
   21bb0:	pop	{fp, lr}
   21bb4:	b	21bb8 <__assert_fail@plt+0x106a0>
   21bb8:	cmp	r0, #0
   21bbc:	bxne	lr
   21bc0:	push	{fp, lr}
   21bc4:	mov	fp, sp
   21bc8:	bl	21f2c <__assert_fail@plt+0x10a14>
   21bcc:	push	{fp, lr}
   21bd0:	mov	fp, sp
   21bd4:	bl	22b9c <__assert_fail@plt+0x11684>
   21bd8:	pop	{fp, lr}
   21bdc:	b	21bb8 <__assert_fail@plt+0x106a0>
   21be0:	b	21ba4 <__assert_fail@plt+0x1068c>
   21be4:	push	{r4, r5, fp, lr}
   21be8:	add	fp, sp, #8
   21bec:	mov	r4, r1
   21bf0:	mov	r5, r0
   21bf4:	bl	22698 <__assert_fail@plt+0x11180>
   21bf8:	cmp	r0, #0
   21bfc:	popne	{r4, r5, fp, pc}
   21c00:	cmp	r5, #0
   21c04:	beq	21c14 <__assert_fail@plt+0x106fc>
   21c08:	cmp	r4, #0
   21c0c:	bne	21c14 <__assert_fail@plt+0x106fc>
   21c10:	pop	{r4, r5, fp, pc}
   21c14:	bl	21f2c <__assert_fail@plt+0x10a14>
   21c18:	push	{fp, lr}
   21c1c:	mov	fp, sp
   21c20:	bl	22ba0 <__assert_fail@plt+0x11688>
   21c24:	pop	{fp, lr}
   21c28:	b	21bb8 <__assert_fail@plt+0x106a0>
   21c2c:	push	{fp, lr}
   21c30:	mov	fp, sp
   21c34:	bl	22bb0 <__assert_fail@plt+0x11698>
   21c38:	pop	{fp, lr}
   21c3c:	b	21bb8 <__assert_fail@plt+0x106a0>
   21c40:	mov	r2, r1
   21c44:	mov	r1, r0
   21c48:	mov	r0, #0
   21c4c:	b	21b68 <__assert_fail@plt+0x10650>
   21c50:	mov	r2, r1
   21c54:	mov	r1, r0
   21c58:	mov	r0, #0
   21c5c:	b	21c2c <__assert_fail@plt+0x10714>
   21c60:	mov	r2, #1
   21c64:	b	21c68 <__assert_fail@plt+0x10750>
   21c68:	push	{r4, r5, fp, lr}
   21c6c:	add	fp, sp, #8
   21c70:	mov	r4, r1
   21c74:	ldr	r5, [r1]
   21c78:	cmp	r0, #0
   21c7c:	beq	21c94 <__assert_fail@plt+0x1077c>
   21c80:	mov	r1, #1
   21c84:	add	r1, r1, r5, lsr #1
   21c88:	adds	r5, r5, r1
   21c8c:	bcc	21cac <__assert_fail@plt+0x10794>
   21c90:	bl	21f2c <__assert_fail@plt+0x10a14>
   21c94:	cmp	r5, #0
   21c98:	bne	21cac <__assert_fail@plt+0x10794>
   21c9c:	mov	r1, #64	; 0x40
   21ca0:	udiv	r5, r1, r2
   21ca4:	cmp	r2, #64	; 0x40
   21ca8:	addhi	r5, r5, #1
   21cac:	mov	r1, r5
   21cb0:	bl	21b68 <__assert_fail@plt+0x10650>
   21cb4:	str	r5, [r4]
   21cb8:	pop	{r4, r5, fp, pc}
   21cbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21cc0:	add	fp, sp, #24
   21cc4:	mov	r8, r1
   21cc8:	ldr	r6, [r1]
   21ccc:	add	r1, r6, r6, asr #1
   21cd0:	cmp	r1, r6
   21cd4:	mvnvs	r1, #-2147483648	; 0x80000000
   21cd8:	cmp	r1, r3
   21cdc:	mov	r5, r1
   21ce0:	movgt	r5, r3
   21ce4:	cmn	r3, #1
   21ce8:	movle	r5, r1
   21cec:	ldr	r4, [fp, #8]
   21cf0:	cmn	r4, #1
   21cf4:	ble	21d1c <__assert_fail@plt+0x10804>
   21cf8:	cmp	r4, #0
   21cfc:	beq	21d70 <__assert_fail@plt+0x10858>
   21d00:	cmn	r5, #1
   21d04:	ble	21d44 <__assert_fail@plt+0x1082c>
   21d08:	mvn	r7, #-2147483648	; 0x80000000
   21d0c:	udiv	r1, r7, r4
   21d10:	cmp	r1, r5
   21d14:	bge	21d70 <__assert_fail@plt+0x10858>
   21d18:	b	21d80 <__assert_fail@plt+0x10868>
   21d1c:	cmn	r5, #1
   21d20:	ble	21d60 <__assert_fail@plt+0x10848>
   21d24:	cmn	r4, #1
   21d28:	beq	21d70 <__assert_fail@plt+0x10858>
   21d2c:	mov	r1, #-2147483648	; 0x80000000
   21d30:	sdiv	r1, r1, r4
   21d34:	mvn	r7, #-2147483648	; 0x80000000
   21d38:	cmp	r1, r5
   21d3c:	bge	21d70 <__assert_fail@plt+0x10858>
   21d40:	b	21d80 <__assert_fail@plt+0x10868>
   21d44:	beq	21d70 <__assert_fail@plt+0x10858>
   21d48:	mov	r1, #-2147483648	; 0x80000000
   21d4c:	sdiv	r1, r1, r5
   21d50:	mvn	r7, #-2147483648	; 0x80000000
   21d54:	cmp	r1, r4
   21d58:	bge	21d70 <__assert_fail@plt+0x10858>
   21d5c:	b	21d80 <__assert_fail@plt+0x10868>
   21d60:	mvn	r7, #-2147483648	; 0x80000000
   21d64:	sdiv	r1, r7, r4
   21d68:	cmp	r5, r1
   21d6c:	blt	21d80 <__assert_fail@plt+0x10868>
   21d70:	mul	r1, r5, r4
   21d74:	mov	r7, #64	; 0x40
   21d78:	cmp	r1, #63	; 0x3f
   21d7c:	bgt	21d88 <__assert_fail@plt+0x10870>
   21d80:	sdiv	r5, r7, r4
   21d84:	mul	r1, r5, r4
   21d88:	cmp	r0, #0
   21d8c:	moveq	r7, #0
   21d90:	streq	r7, [r8]
   21d94:	sub	r7, r5, r6
   21d98:	cmp	r7, r2
   21d9c:	bge	21e48 <__assert_fail@plt+0x10930>
   21da0:	add	r5, r6, r2
   21da4:	mov	r1, #0
   21da8:	cmp	r5, r3
   21dac:	mov	r2, #0
   21db0:	movwgt	r2, #1
   21db4:	cmn	r3, #1
   21db8:	movwgt	r1, #1
   21dbc:	cmp	r5, r6
   21dc0:	bvs	21e30 <__assert_fail@plt+0x10918>
   21dc4:	ands	r1, r1, r2
   21dc8:	bne	21e30 <__assert_fail@plt+0x10918>
   21dcc:	cmn	r4, #1
   21dd0:	ble	21df8 <__assert_fail@plt+0x108e0>
   21dd4:	cmp	r4, #0
   21dd8:	beq	21e44 <__assert_fail@plt+0x1092c>
   21ddc:	cmn	r5, #1
   21de0:	ble	21e1c <__assert_fail@plt+0x10904>
   21de4:	mvn	r1, #-2147483648	; 0x80000000
   21de8:	udiv	r1, r1, r4
   21dec:	cmp	r1, r5
   21df0:	bge	21e44 <__assert_fail@plt+0x1092c>
   21df4:	b	21e30 <__assert_fail@plt+0x10918>
   21df8:	cmn	r5, #1
   21dfc:	ble	21e34 <__assert_fail@plt+0x1091c>
   21e00:	cmn	r4, #1
   21e04:	beq	21e44 <__assert_fail@plt+0x1092c>
   21e08:	mov	r1, #-2147483648	; 0x80000000
   21e0c:	sdiv	r1, r1, r4
   21e10:	cmp	r1, r5
   21e14:	bge	21e44 <__assert_fail@plt+0x1092c>
   21e18:	b	21e30 <__assert_fail@plt+0x10918>
   21e1c:	beq	21e44 <__assert_fail@plt+0x1092c>
   21e20:	mov	r1, #-2147483648	; 0x80000000
   21e24:	sdiv	r1, r1, r5
   21e28:	cmp	r1, r4
   21e2c:	bge	21e44 <__assert_fail@plt+0x1092c>
   21e30:	bl	21f2c <__assert_fail@plt+0x10a14>
   21e34:	mvn	r1, #-2147483648	; 0x80000000
   21e38:	sdiv	r1, r1, r4
   21e3c:	cmp	r5, r1
   21e40:	blt	21e30 <__assert_fail@plt+0x10918>
   21e44:	mul	r1, r5, r4
   21e48:	bl	21be4 <__assert_fail@plt+0x106cc>
   21e4c:	str	r5, [r8]
   21e50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21e54:	mov	r1, #1
   21e58:	b	21e5c <__assert_fail@plt+0x10944>
   21e5c:	push	{fp, lr}
   21e60:	mov	fp, sp
   21e64:	bl	22614 <__assert_fail@plt+0x110fc>
   21e68:	pop	{fp, lr}
   21e6c:	b	21bb8 <__assert_fail@plt+0x106a0>
   21e70:	mov	r1, #1
   21e74:	b	21e78 <__assert_fail@plt+0x10960>
   21e78:	push	{fp, lr}
   21e7c:	mov	fp, sp
   21e80:	bl	22bac <__assert_fail@plt+0x11694>
   21e84:	pop	{fp, lr}
   21e88:	b	21bb8 <__assert_fail@plt+0x106a0>
   21e8c:	push	{r4, r5, fp, lr}
   21e90:	add	fp, sp, #8
   21e94:	mov	r4, r1
   21e98:	mov	r5, r0
   21e9c:	mov	r0, r1
   21ea0:	bl	21ba4 <__assert_fail@plt+0x1068c>
   21ea4:	mov	r1, r5
   21ea8:	mov	r2, r4
   21eac:	pop	{r4, r5, fp, lr}
   21eb0:	b	112a8 <memcpy@plt>
   21eb4:	push	{r4, r5, fp, lr}
   21eb8:	add	fp, sp, #8
   21ebc:	mov	r4, r1
   21ec0:	mov	r5, r0
   21ec4:	mov	r0, r1
   21ec8:	bl	21bcc <__assert_fail@plt+0x106b4>
   21ecc:	mov	r1, r5
   21ed0:	mov	r2, r4
   21ed4:	pop	{r4, r5, fp, lr}
   21ed8:	b	112a8 <memcpy@plt>
   21edc:	push	{r4, r5, fp, lr}
   21ee0:	add	fp, sp, #8
   21ee4:	mov	r4, r1
   21ee8:	mov	r5, r0
   21eec:	add	r0, r1, #1
   21ef0:	bl	21bcc <__assert_fail@plt+0x106b4>
   21ef4:	mov	r1, #0
   21ef8:	strb	r1, [r0, r4]
   21efc:	mov	r1, r5
   21f00:	mov	r2, r4
   21f04:	pop	{r4, r5, fp, lr}
   21f08:	b	112a8 <memcpy@plt>
   21f0c:	push	{r4, sl, fp, lr}
   21f10:	add	fp, sp, #8
   21f14:	mov	r4, r0
   21f18:	bl	113ec <strlen@plt>
   21f1c:	add	r1, r0, #1
   21f20:	mov	r0, r4
   21f24:	pop	{r4, sl, fp, lr}
   21f28:	b	21e8c <__assert_fail@plt+0x10974>
   21f2c:	push	{fp, lr}
   21f30:	mov	fp, sp
   21f34:	movw	r0, #20840	; 0x5168
   21f38:	movt	r0, #3
   21f3c:	ldr	r4, [r0]
   21f40:	movw	r1, #17073	; 0x42b1
   21f44:	movt	r1, #2
   21f48:	mov	r0, #0
   21f4c:	mov	r2, #5
   21f50:	bl	11308 <dcgettext@plt>
   21f54:	mov	r3, r0
   21f58:	movw	r2, #14146	; 0x3742
   21f5c:	movt	r2, #2
   21f60:	mov	r0, r4
   21f64:	mov	r1, #0
   21f68:	bl	11380 <error@plt>
   21f6c:	bl	114f4 <abort@plt>
   21f70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21f74:	add	fp, sp, #24
   21f78:	sub	sp, sp, #16
   21f7c:	mov	r5, r3
   21f80:	mov	r6, r2
   21f84:	mov	r2, r1
   21f88:	mov	r8, r0
   21f8c:	ldr	r0, [fp, #16]
   21f90:	str	r0, [sp]
   21f94:	add	r3, sp, #8
   21f98:	mov	r0, r8
   21f9c:	mov	r1, #0
   21fa0:	bl	2207c <__assert_fail@plt+0x10b64>
   21fa4:	cmp	r0, #0
   21fa8:	bne	22058 <__assert_fail@plt+0x10b40>
   21fac:	ldr	r7, [sp, #8]
   21fb0:	ldr	r4, [sp, #12]
   21fb4:	subs	r0, r7, r6
   21fb8:	sbcs	r0, r4, r5
   21fbc:	blt	21fe0 <__assert_fail@plt+0x10ac8>
   21fc0:	ldr	r0, [fp, #12]
   21fc4:	ldr	r1, [fp, #8]
   21fc8:	subs	r1, r1, r7
   21fcc:	sbcs	r0, r0, r4
   21fd0:	ldrge	r0, [sp, #8]
   21fd4:	ldrge	r1, [sp, #12]
   21fd8:	subge	sp, fp, #24
   21fdc:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   21fe0:	subs	r0, r7, #1073741824	; 0x40000000
   21fe4:	sbcs	r0, r4, #0
   21fe8:	blt	21ff8 <__assert_fail@plt+0x10ae0>
   21fec:	bl	11404 <__errno_location@plt>
   21ff0:	mov	r1, #75	; 0x4b
   21ff4:	b	22014 <__assert_fail@plt+0x10afc>
   21ff8:	bl	11404 <__errno_location@plt>
   21ffc:	mvn	r1, #0
   22000:	mvn	r2, #1073741824	; 0x40000000
   22004:	subs	r2, r2, r7
   22008:	sbcs	r1, r1, r4
   2200c:	movlt	r1, #34	; 0x22
   22010:	movge	r1, #75	; 0x4b
   22014:	str	r1, [r0]
   22018:	ldr	r5, [fp, #24]
   2201c:	ldr	r6, [fp, #20]
   22020:	bl	11404 <__errno_location@plt>
   22024:	ldr	r4, [r0]
   22028:	mov	r0, r8
   2202c:	bl	145d4 <__assert_fail@plt+0x30bc>
   22030:	str	r0, [sp]
   22034:	subs	r1, r4, #22
   22038:	movne	r1, r4
   2203c:	cmp	r5, #0
   22040:	movweq	r5, #1
   22044:	movw	r2, #15459	; 0x3c63
   22048:	movt	r2, #2
   2204c:	mov	r0, r5
   22050:	mov	r3, r6
   22054:	bl	11380 <error@plt>
   22058:	cmp	r0, #1
   2205c:	beq	21fec <__assert_fail@plt+0x10ad4>
   22060:	cmp	r0, #3
   22064:	bne	22018 <__assert_fail@plt+0x10b00>
   22068:	bl	11404 <__errno_location@plt>
   2206c:	mov	r1, #0
   22070:	b	22014 <__assert_fail@plt+0x10afc>
   22074:	mov	r1, #10
   22078:	b	21f70 <__assert_fail@plt+0x10a58>
   2207c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22080:	add	fp, sp, #28
   22084:	sub	sp, sp, #20
   22088:	cmp	r2, #37	; 0x25
   2208c:	bcs	224a4 <__assert_fail@plt+0x10f8c>
   22090:	mov	r9, r3
   22094:	mov	r7, r2
   22098:	mov	r6, r1
   2209c:	mov	r4, r0
   220a0:	ldr	sl, [fp, #8]
   220a4:	bl	11404 <__errno_location@plt>
   220a8:	mov	r5, r0
   220ac:	mov	r0, #0
   220b0:	str	r0, [r5]
   220b4:	add	r8, sp, #16
   220b8:	cmp	r6, #0
   220bc:	movne	r8, r6
   220c0:	mov	r0, r4
   220c4:	mov	r1, r8
   220c8:	mov	r2, r7
   220cc:	bl	11464 <strtoimax@plt>
   220d0:	str	r1, [sp, #12]
   220d4:	str	r0, [sp, #8]
   220d8:	ldr	r7, [r8]
   220dc:	cmp	r7, r4
   220e0:	beq	2210c <__assert_fail@plt+0x10bf4>
   220e4:	ldr	r0, [r5]
   220e8:	cmp	r0, #0
   220ec:	beq	22148 <__assert_fail@plt+0x10c30>
   220f0:	mov	r5, #4
   220f4:	cmp	r0, #34	; 0x22
   220f8:	bne	22498 <__assert_fail@plt+0x10f80>
   220fc:	mov	r5, #1
   22100:	cmp	sl, #0
   22104:	bne	22154 <__assert_fail@plt+0x10c3c>
   22108:	b	2248c <__assert_fail@plt+0x10f74>
   2210c:	mov	r5, #4
   22110:	cmp	sl, #0
   22114:	beq	22498 <__assert_fail@plt+0x10f80>
   22118:	ldrb	r1, [r7]
   2211c:	cmp	r1, #0
   22120:	beq	22498 <__assert_fail@plt+0x10f80>
   22124:	mov	r0, sl
   22128:	bl	113f8 <strchr@plt>
   2212c:	cmp	r0, #0
   22130:	beq	22498 <__assert_fail@plt+0x10f80>
   22134:	mov	r5, #0
   22138:	str	r5, [sp, #12]
   2213c:	mov	r0, #1
   22140:	str	r0, [sp, #8]
   22144:	b	22154 <__assert_fail@plt+0x10c3c>
   22148:	mov	r5, r0
   2214c:	cmp	sl, #0
   22150:	beq	2248c <__assert_fail@plt+0x10f74>
   22154:	ldrb	r4, [r7]
   22158:	cmp	r4, #0
   2215c:	beq	2248c <__assert_fail@plt+0x10f74>
   22160:	mov	r0, sl
   22164:	mov	r1, r4
   22168:	bl	113f8 <strchr@plt>
   2216c:	cmp	r0, #0
   22170:	beq	223a8 <__assert_fail@plt+0x10e90>
   22174:	sub	r0, r4, #69	; 0x45
   22178:	mov	r1, #1
   2217c:	str	r1, [sp, #4]
   22180:	mov	r6, #1024	; 0x400
   22184:	cmp	r0, #47	; 0x2f
   22188:	bhi	222a4 <__assert_fail@plt+0x10d8c>
   2218c:	add	r1, pc, #0
   22190:	ldr	pc, [r1, r0, lsl #2]
   22194:	andeq	r2, r2, r4, asr r2
   22198:	andeq	r2, r2, r4, lsr #5
   2219c:	andeq	r2, r2, r4, asr r2
   221a0:	andeq	r2, r2, r4, lsr #5
   221a4:	andeq	r2, r2, r4, lsr #5
   221a8:	andeq	r2, r2, r4, lsr #5
   221ac:	andeq	r2, r2, r4, asr r2
   221b0:	andeq	r2, r2, r4, lsr #5
   221b4:	andeq	r2, r2, r4, asr r2
   221b8:	andeq	r2, r2, r4, lsr #5
   221bc:	andeq	r2, r2, r4, lsr #5
   221c0:	andeq	r2, r2, r4, asr r2
   221c4:	andeq	r2, r2, r4, lsr #5
   221c8:	andeq	r2, r2, r4, lsr #5
   221cc:	andeq	r2, r2, r4, lsr #5
   221d0:	andeq	r2, r2, r4, asr r2
   221d4:	andeq	r2, r2, r4, lsr #5
   221d8:	andeq	r2, r2, r4, lsr #5
   221dc:	andeq	r2, r2, r4, lsr #5
   221e0:	andeq	r2, r2, r4, lsr #5
   221e4:	andeq	r2, r2, r4, asr r2
   221e8:	andeq	r2, r2, r4, asr r2
   221ec:	andeq	r2, r2, r4, lsr #5
   221f0:	andeq	r2, r2, r4, lsr #5
   221f4:	andeq	r2, r2, r4, lsr #5
   221f8:	andeq	r2, r2, r4, lsr #5
   221fc:	andeq	r2, r2, r4, lsr #5
   22200:	andeq	r2, r2, r4, lsr #5
   22204:	andeq	r2, r2, r4, lsr #5
   22208:	andeq	r2, r2, r4, lsr #5
   2220c:	andeq	r2, r2, r4, lsr #5
   22210:	andeq	r2, r2, r4, lsr #5
   22214:	andeq	r2, r2, r4, lsr #5
   22218:	andeq	r2, r2, r4, lsr #5
   2221c:	andeq	r2, r2, r4, asr r2
   22220:	andeq	r2, r2, r4, lsr #5
   22224:	andeq	r2, r2, r4, lsr #5
   22228:	andeq	r2, r2, r4, lsr #5
   2222c:	andeq	r2, r2, r4, asr r2
   22230:	andeq	r2, r2, r4, lsr #5
   22234:	andeq	r2, r2, r4, asr r2
   22238:	andeq	r2, r2, r4, lsr #5
   2223c:	andeq	r2, r2, r4, lsr #5
   22240:	andeq	r2, r2, r4, lsr #5
   22244:	andeq	r2, r2, r4, lsr #5
   22248:	andeq	r2, r2, r4, lsr #5
   2224c:	andeq	r2, r2, r4, lsr #5
   22250:	andeq	r2, r2, r4, asr r2
   22254:	mov	r0, sl
   22258:	mov	r1, #48	; 0x30
   2225c:	bl	113f8 <strchr@plt>
   22260:	cmp	r0, #0
   22264:	beq	222a4 <__assert_fail@plt+0x10d8c>
   22268:	ldrb	r0, [r7, #1]
   2226c:	cmp	r0, #66	; 0x42
   22270:	cmpne	r0, #68	; 0x44
   22274:	bne	22288 <__assert_fail@plt+0x10d70>
   22278:	mov	r0, #2
   2227c:	str	r0, [sp, #4]
   22280:	mov	r6, #1000	; 0x3e8
   22284:	b	222a4 <__assert_fail@plt+0x10d8c>
   22288:	cmp	r0, #105	; 0x69
   2228c:	bne	222a4 <__assert_fail@plt+0x10d8c>
   22290:	ldrb	r0, [r7, #2]
   22294:	mov	r1, #1
   22298:	cmp	r0, #66	; 0x42
   2229c:	movweq	r1, #3
   222a0:	str	r1, [sp, #4]
   222a4:	sub	r1, r4, #66	; 0x42
   222a8:	cmp	r1, #53	; 0x35
   222ac:	bhi	223a8 <__assert_fail@plt+0x10e90>
   222b0:	mov	r0, #0
   222b4:	add	r2, pc, #0
   222b8:	ldr	pc, [r2, r1, lsl #2]
   222bc:	andeq	r2, r2, ip, lsl #8
   222c0:	andeq	r2, r2, r8, lsr #7
   222c4:	andeq	r2, r2, r8, lsr #7
   222c8:	andeq	r2, r2, r8, lsl r4
   222cc:	andeq	r2, r2, r8, lsr #7
   222d0:	muleq	r2, r4, r3
   222d4:	andeq	r2, r2, r8, lsr #7
   222d8:	andeq	r2, r2, r8, lsr #7
   222dc:	andeq	r2, r2, r8, lsr #7
   222e0:			; <UNDEFINED> instruction: 0x000223bc
   222e4:	andeq	r2, r2, r8, lsr #7
   222e8:	ldrdeq	r2, [r2], -r0
   222ec:	andeq	r2, r2, r8, lsr #7
   222f0:	andeq	r2, r2, r8, lsr #7
   222f4:	andeq	r2, r2, ip, lsr #8
   222f8:	andeq	r2, r2, r8, lsr #7
   222fc:	andeq	r2, r2, r8, lsr #7
   22300:	andeq	r2, r2, r8, lsr #7
   22304:	andeq	r2, r2, r4, ror #7
   22308:	andeq	r2, r2, r8, lsr #7
   2230c:	andeq	r2, r2, r8, lsr #7
   22310:	andeq	r2, r2, r8, lsr #7
   22314:	andeq	r2, r2, r8, lsr #7
   22318:	andeq	r2, r2, r0, asr #8
   2231c:	strdeq	r2, [r2], -r8
   22320:	andeq	r2, r2, r8, lsr #7
   22324:	andeq	r2, r2, r8, lsr #7
   22328:	andeq	r2, r2, r8, lsr #7
   2232c:	andeq	r2, r2, r8, lsr #7
   22330:	andeq	r2, r2, r8, lsr #7
   22334:	andeq	r2, r2, r8, lsr #7
   22338:	andeq	r2, r2, r8, lsr #7
   2233c:	andeq	r2, r2, r4, asr r4
   22340:	andeq	r2, r2, ip, ror #8
   22344:	andeq	r2, r2, r8, lsr #7
   22348:	andeq	r2, r2, r8, lsr #7
   2234c:	andeq	r2, r2, r8, lsr #7
   22350:	muleq	r2, r4, r3
   22354:	andeq	r2, r2, r8, lsr #7
   22358:	andeq	r2, r2, r8, lsr #7
   2235c:	andeq	r2, r2, r8, lsr #7
   22360:			; <UNDEFINED> instruction: 0x000223bc
   22364:	andeq	r2, r2, r8, lsr #7
   22368:	ldrdeq	r2, [r2], -r0
   2236c:	andeq	r2, r2, r8, lsr #7
   22370:	andeq	r2, r2, r8, lsr #7
   22374:	andeq	r2, r2, r8, lsr #7
   22378:	andeq	r2, r2, r8, lsr #7
   2237c:	andeq	r2, r2, r8, lsr #7
   22380:	andeq	r2, r2, r8, lsr #7
   22384:	andeq	r2, r2, r4, ror #7
   22388:	andeq	r2, r2, r8, lsr #7
   2238c:	andeq	r2, r2, r8, lsr #7
   22390:	andeq	r2, r2, r0, ror #8
   22394:	add	r0, sp, #8
   22398:	mov	r1, r6
   2239c:	mov	r2, #3
   223a0:	bl	225c8 <__assert_fail@plt+0x110b0>
   223a4:	b	2246c <__assert_fail@plt+0x10f54>
   223a8:	ldr	r0, [sp, #8]
   223ac:	ldr	r1, [sp, #12]
   223b0:	strd	r0, [r9]
   223b4:	orr	r5, r5, #2
   223b8:	b	22498 <__assert_fail@plt+0x10f80>
   223bc:	add	r0, sp, #8
   223c0:	mov	r1, r6
   223c4:	mov	r2, #1
   223c8:	bl	225c8 <__assert_fail@plt+0x110b0>
   223cc:	b	2246c <__assert_fail@plt+0x10f54>
   223d0:	add	r0, sp, #8
   223d4:	mov	r1, r6
   223d8:	mov	r2, #2
   223dc:	bl	225c8 <__assert_fail@plt+0x110b0>
   223e0:	b	2246c <__assert_fail@plt+0x10f54>
   223e4:	add	r0, sp, #8
   223e8:	mov	r1, r6
   223ec:	mov	r2, #4
   223f0:	bl	225c8 <__assert_fail@plt+0x110b0>
   223f4:	b	2246c <__assert_fail@plt+0x10f54>
   223f8:	add	r0, sp, #8
   223fc:	mov	r1, r6
   22400:	mov	r2, #7
   22404:	bl	225c8 <__assert_fail@plt+0x110b0>
   22408:	b	2246c <__assert_fail@plt+0x10f54>
   2240c:	add	r0, sp, #8
   22410:	mov	r1, #1024	; 0x400
   22414:	b	22468 <__assert_fail@plt+0x10f50>
   22418:	add	r0, sp, #8
   2241c:	mov	r1, r6
   22420:	mov	r2, #6
   22424:	bl	225c8 <__assert_fail@plt+0x110b0>
   22428:	b	2246c <__assert_fail@plt+0x10f54>
   2242c:	add	r0, sp, #8
   22430:	mov	r1, r6
   22434:	mov	r2, #5
   22438:	bl	225c8 <__assert_fail@plt+0x110b0>
   2243c:	b	2246c <__assert_fail@plt+0x10f54>
   22440:	add	r0, sp, #8
   22444:	mov	r1, r6
   22448:	mov	r2, #8
   2244c:	bl	225c8 <__assert_fail@plt+0x110b0>
   22450:	b	2246c <__assert_fail@plt+0x10f54>
   22454:	add	r0, sp, #8
   22458:	mov	r1, #512	; 0x200
   2245c:	b	22468 <__assert_fail@plt+0x10f50>
   22460:	add	r0, sp, #8
   22464:	mov	r1, #2
   22468:	bl	224c4 <__assert_fail@plt+0x10fac>
   2246c:	ldr	r1, [r8]
   22470:	ldr	r3, [sp, #4]
   22474:	add	r2, r1, r3
   22478:	str	r2, [r8]
   2247c:	ldrb	r1, [r1, r3]
   22480:	orr	r5, r0, r5
   22484:	cmp	r1, #0
   22488:	orrne	r5, r5, #2
   2248c:	ldr	r0, [sp, #8]
   22490:	ldr	r1, [sp, #12]
   22494:	strd	r0, [r9]
   22498:	mov	r0, r5
   2249c:	sub	sp, fp, #28
   224a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224a4:	movw	r0, #17090	; 0x42c2
   224a8:	movt	r0, #2
   224ac:	movw	r1, #17128	; 0x42e8
   224b0:	movt	r1, #2
   224b4:	movw	r3, #17144	; 0x42f8
   224b8:	movt	r3, #2
   224bc:	mov	r2, #85	; 0x55
   224c0:	bl	11518 <__assert_fail@plt>
   224c4:	push	{r4, r5, r6, r7, fp, lr}
   224c8:	add	fp, sp, #16
   224cc:	mov	r5, r1
   224d0:	mov	r4, r0
   224d4:	cmn	r1, #1
   224d8:	ble	22500 <__assert_fail@plt+0x10fe8>
   224dc:	cmp	r5, #0
   224e0:	beq	22564 <__assert_fail@plt+0x1104c>
   224e4:	ldrd	r6, [r4]
   224e8:	cmn	r7, #1
   224ec:	ble	22538 <__assert_fail@plt+0x11020>
   224f0:	asr	r3, r5, #31
   224f4:	mvn	r0, #0
   224f8:	mvn	r1, #-2147483648	; 0x80000000
   224fc:	b	22520 <__assert_fail@plt+0x11008>
   22500:	ldrd	r6, [r4]
   22504:	cmn	r7, #1
   22508:	ble	22580 <__assert_fail@plt+0x11068>
   2250c:	cmn	r5, #1
   22510:	beq	22564 <__assert_fail@plt+0x1104c>
   22514:	asr	r3, r5, #31
   22518:	mov	r0, #0
   2251c:	mov	r1, #-2147483648	; 0x80000000
   22520:	mov	r2, r5
   22524:	bl	22db8 <__assert_fail@plt+0x118a0>
   22528:	subs	r0, r0, r6
   2252c:	sbcs	r0, r1, r7
   22530:	bge	22564 <__assert_fail@plt+0x1104c>
   22534:	b	225a0 <__assert_fail@plt+0x11088>
   22538:	and	r0, r6, r7
   2253c:	cmn	r0, #1
   22540:	beq	22564 <__assert_fail@plt+0x1104c>
   22544:	mov	r0, #0
   22548:	mov	r1, #-2147483648	; 0x80000000
   2254c:	mov	r2, r6
   22550:	mov	r3, r7
   22554:	bl	22db8 <__assert_fail@plt+0x118a0>
   22558:	subs	r0, r0, r5
   2255c:	sbcs	r0, r1, r5, asr #31
   22560:	blt	225a0 <__assert_fail@plt+0x11088>
   22564:	ldrd	r0, [r4]
   22568:	umull	r2, r3, r0, r5
   2256c:	asr	r7, r5, #31
   22570:	mla	r0, r0, r7, r3
   22574:	mla	r1, r1, r5, r0
   22578:	mov	r0, #0
   2257c:	b	225bc <__assert_fail@plt+0x110a4>
   22580:	asr	r3, r5, #31
   22584:	mvn	r0, #0
   22588:	mvn	r1, #-2147483648	; 0x80000000
   2258c:	mov	r2, r5
   22590:	bl	22db8 <__assert_fail@plt+0x118a0>
   22594:	subs	r0, r6, r0
   22598:	sbcs	r0, r7, r1
   2259c:	bge	22564 <__assert_fail@plt+0x1104c>
   225a0:	ldr	r0, [r4, #4]
   225a4:	mvn	r1, #-2147483648	; 0x80000000
   225a8:	cmp	r0, #0
   225ac:	movmi	r1, #-2147483648	; 0x80000000
   225b0:	mvn	r2, #0
   225b4:	movwmi	r2, #0
   225b8:	mov	r0, #1
   225bc:	str	r2, [r4]
   225c0:	str	r1, [r4, #4]
   225c4:	pop	{r4, r5, r6, r7, fp, pc}
   225c8:	push	{r4, r5, r6, r7, fp, lr}
   225cc:	add	fp, sp, #16
   225d0:	cmp	r2, #0
   225d4:	beq	22608 <__assert_fail@plt+0x110f0>
   225d8:	mov	r4, r2
   225dc:	mov	r5, r1
   225e0:	mov	r7, r0
   225e4:	mov	r6, #0
   225e8:	mov	r0, r7
   225ec:	mov	r1, r5
   225f0:	bl	224c4 <__assert_fail@plt+0x10fac>
   225f4:	orr	r6, r0, r6
   225f8:	subs	r4, r4, #1
   225fc:	bne	225e8 <__assert_fail@plt+0x110d0>
   22600:	mov	r0, r6
   22604:	pop	{r4, r5, r6, r7, fp, pc}
   22608:	mov	r6, #0
   2260c:	mov	r0, r6
   22610:	pop	{r4, r5, r6, r7, fp, pc}
   22614:	clz	r2, r1
   22618:	lsr	r2, r2, #5
   2261c:	clz	r3, r0
   22620:	lsr	r3, r3, #5
   22624:	orrs	r2, r3, r2
   22628:	movwne	r1, #1
   2262c:	movwne	r0, #1
   22630:	cmp	r1, #0
   22634:	beq	22664 <__assert_fail@plt+0x1114c>
   22638:	mvn	r2, #-2147483648	; 0x80000000
   2263c:	udiv	r2, r2, r1
   22640:	cmp	r2, r0
   22644:	bcs	22664 <__assert_fail@plt+0x1114c>
   22648:	push	{fp, lr}
   2264c:	mov	fp, sp
   22650:	bl	11404 <__errno_location@plt>
   22654:	mov	r1, #12
   22658:	str	r1, [r0]
   2265c:	mov	r0, #0
   22660:	pop	{fp, pc}
   22664:	b	11200 <calloc@plt>
   22668:	cmp	r0, #0
   2266c:	movweq	r0, #1
   22670:	cmn	r0, #1
   22674:	ble	2267c <__assert_fail@plt+0x11164>
   22678:	b	1138c <malloc@plt>
   2267c:	push	{fp, lr}
   22680:	mov	fp, sp
   22684:	bl	11404 <__errno_location@plt>
   22688:	mov	r1, #12
   2268c:	str	r1, [r0]
   22690:	mov	r0, #0
   22694:	pop	{fp, pc}
   22698:	push	{fp, lr}
   2269c:	mov	fp, sp
   226a0:	cmp	r0, #0
   226a4:	beq	226c0 <__assert_fail@plt+0x111a8>
   226a8:	cmp	r1, #0
   226ac:	beq	226cc <__assert_fail@plt+0x111b4>
   226b0:	cmn	r1, #1
   226b4:	ble	226d8 <__assert_fail@plt+0x111c0>
   226b8:	pop	{fp, lr}
   226bc:	b	11314 <realloc@plt>
   226c0:	mov	r0, r1
   226c4:	pop	{fp, lr}
   226c8:	b	22668 <__assert_fail@plt+0x11150>
   226cc:	bl	22b58 <__assert_fail@plt+0x11640>
   226d0:	mov	r0, #0
   226d4:	pop	{fp, pc}
   226d8:	bl	11404 <__errno_location@plt>
   226dc:	mov	r1, #12
   226e0:	str	r1, [r0]
   226e4:	mov	r0, #0
   226e8:	pop	{fp, pc}
   226ec:	mov	r1, r0
   226f0:	sub	r2, r0, #65	; 0x41
   226f4:	mov	r0, #1
   226f8:	cmp	r2, #26
   226fc:	subcs	r2, r1, #97	; 0x61
   22700:	cmpcs	r2, #26
   22704:	bcs	2270c <__assert_fail@plt+0x111f4>
   22708:	bx	lr
   2270c:	sub	r1, r1, #48	; 0x30
   22710:	cmp	r1, #10
   22714:	movcs	r0, #0
   22718:	bx	lr
   2271c:	mov	r1, r0
   22720:	sub	r2, r0, #65	; 0x41
   22724:	mov	r0, #1
   22728:	cmp	r2, #26
   2272c:	subcs	r1, r1, #97	; 0x61
   22730:	cmpcs	r1, #26
   22734:	movcs	r0, #0
   22738:	bx	lr
   2273c:	mov	r1, #0
   22740:	cmp	r0, #128	; 0x80
   22744:	movwcc	r1, #1
   22748:	mov	r0, r1
   2274c:	bx	lr
   22750:	sub	r1, r0, #9
   22754:	clz	r1, r1
   22758:	lsr	r1, r1, #5
   2275c:	sub	r0, r0, #32
   22760:	clz	r0, r0
   22764:	lsr	r0, r0, #5
   22768:	orr	r0, r0, r1
   2276c:	bx	lr
   22770:	mov	r1, r0
   22774:	mov	r0, #1
   22778:	cmp	r1, #32
   2277c:	bxcc	lr
   22780:	cmp	r1, #127	; 0x7f
   22784:	movne	r0, #0
   22788:	bx	lr
   2278c:	sub	r1, r0, #48	; 0x30
   22790:	mov	r0, #0
   22794:	cmp	r1, #10
   22798:	movwcc	r0, #1
   2279c:	bx	lr
   227a0:	sub	r1, r0, #33	; 0x21
   227a4:	mov	r0, #0
   227a8:	cmp	r1, #94	; 0x5e
   227ac:	movwcc	r0, #1
   227b0:	bx	lr
   227b4:	sub	r1, r0, #97	; 0x61
   227b8:	mov	r0, #0
   227bc:	cmp	r1, #26
   227c0:	movwcc	r0, #1
   227c4:	bx	lr
   227c8:	sub	r1, r0, #32
   227cc:	mov	r0, #0
   227d0:	cmp	r1, #95	; 0x5f
   227d4:	movwcc	r0, #1
   227d8:	bx	lr
   227dc:	sub	r1, r0, #33	; 0x21
   227e0:	cmp	r1, #93	; 0x5d
   227e4:	bhi	22970 <__assert_fail@plt+0x11458>
   227e8:	mov	r0, #1
   227ec:	add	r2, pc, #0
   227f0:	ldr	pc, [r2, r1, lsl #2]
   227f4:	andeq	r2, r2, ip, ror #18
   227f8:	andeq	r2, r2, ip, ror #18
   227fc:	andeq	r2, r2, ip, ror #18
   22800:	andeq	r2, r2, ip, ror #18
   22804:	andeq	r2, r2, ip, ror #18
   22808:	andeq	r2, r2, ip, ror #18
   2280c:	andeq	r2, r2, ip, ror #18
   22810:	andeq	r2, r2, ip, ror #18
   22814:	andeq	r2, r2, ip, ror #18
   22818:	andeq	r2, r2, ip, ror #18
   2281c:	andeq	r2, r2, ip, ror #18
   22820:	andeq	r2, r2, ip, ror #18
   22824:	andeq	r2, r2, ip, ror #18
   22828:	andeq	r2, r2, ip, ror #18
   2282c:	andeq	r2, r2, ip, ror #18
   22830:	andeq	r2, r2, r0, ror r9
   22834:	andeq	r2, r2, r0, ror r9
   22838:	andeq	r2, r2, r0, ror r9
   2283c:	andeq	r2, r2, r0, ror r9
   22840:	andeq	r2, r2, r0, ror r9
   22844:	andeq	r2, r2, r0, ror r9
   22848:	andeq	r2, r2, r0, ror r9
   2284c:	andeq	r2, r2, r0, ror r9
   22850:	andeq	r2, r2, r0, ror r9
   22854:	andeq	r2, r2, r0, ror r9
   22858:	andeq	r2, r2, ip, ror #18
   2285c:	andeq	r2, r2, ip, ror #18
   22860:	andeq	r2, r2, ip, ror #18
   22864:	andeq	r2, r2, ip, ror #18
   22868:	andeq	r2, r2, ip, ror #18
   2286c:	andeq	r2, r2, ip, ror #18
   22870:	andeq	r2, r2, ip, ror #18
   22874:	andeq	r2, r2, r0, ror r9
   22878:	andeq	r2, r2, r0, ror r9
   2287c:	andeq	r2, r2, r0, ror r9
   22880:	andeq	r2, r2, r0, ror r9
   22884:	andeq	r2, r2, r0, ror r9
   22888:	andeq	r2, r2, r0, ror r9
   2288c:	andeq	r2, r2, r0, ror r9
   22890:	andeq	r2, r2, r0, ror r9
   22894:	andeq	r2, r2, r0, ror r9
   22898:	andeq	r2, r2, r0, ror r9
   2289c:	andeq	r2, r2, r0, ror r9
   228a0:	andeq	r2, r2, r0, ror r9
   228a4:	andeq	r2, r2, r0, ror r9
   228a8:	andeq	r2, r2, r0, ror r9
   228ac:	andeq	r2, r2, r0, ror r9
   228b0:	andeq	r2, r2, r0, ror r9
   228b4:	andeq	r2, r2, r0, ror r9
   228b8:	andeq	r2, r2, r0, ror r9
   228bc:	andeq	r2, r2, r0, ror r9
   228c0:	andeq	r2, r2, r0, ror r9
   228c4:	andeq	r2, r2, r0, ror r9
   228c8:	andeq	r2, r2, r0, ror r9
   228cc:	andeq	r2, r2, r0, ror r9
   228d0:	andeq	r2, r2, r0, ror r9
   228d4:	andeq	r2, r2, r0, ror r9
   228d8:	andeq	r2, r2, r0, ror r9
   228dc:	andeq	r2, r2, ip, ror #18
   228e0:	andeq	r2, r2, ip, ror #18
   228e4:	andeq	r2, r2, ip, ror #18
   228e8:	andeq	r2, r2, ip, ror #18
   228ec:	andeq	r2, r2, ip, ror #18
   228f0:	andeq	r2, r2, ip, ror #18
   228f4:	andeq	r2, r2, r0, ror r9
   228f8:	andeq	r2, r2, r0, ror r9
   228fc:	andeq	r2, r2, r0, ror r9
   22900:	andeq	r2, r2, r0, ror r9
   22904:	andeq	r2, r2, r0, ror r9
   22908:	andeq	r2, r2, r0, ror r9
   2290c:	andeq	r2, r2, r0, ror r9
   22910:	andeq	r2, r2, r0, ror r9
   22914:	andeq	r2, r2, r0, ror r9
   22918:	andeq	r2, r2, r0, ror r9
   2291c:	andeq	r2, r2, r0, ror r9
   22920:	andeq	r2, r2, r0, ror r9
   22924:	andeq	r2, r2, r0, ror r9
   22928:	andeq	r2, r2, r0, ror r9
   2292c:	andeq	r2, r2, r0, ror r9
   22930:	andeq	r2, r2, r0, ror r9
   22934:	andeq	r2, r2, r0, ror r9
   22938:	andeq	r2, r2, r0, ror r9
   2293c:	andeq	r2, r2, r0, ror r9
   22940:	andeq	r2, r2, r0, ror r9
   22944:	andeq	r2, r2, r0, ror r9
   22948:	andeq	r2, r2, r0, ror r9
   2294c:	andeq	r2, r2, r0, ror r9
   22950:	andeq	r2, r2, r0, ror r9
   22954:	andeq	r2, r2, r0, ror r9
   22958:	andeq	r2, r2, r0, ror r9
   2295c:	andeq	r2, r2, ip, ror #18
   22960:	andeq	r2, r2, ip, ror #18
   22964:	andeq	r2, r2, ip, ror #18
   22968:	andeq	r2, r2, ip, ror #18
   2296c:	bx	lr
   22970:	mov	r0, #0
   22974:	bx	lr
   22978:	sub	r0, r0, #9
   2297c:	cmp	r0, #23
   22980:	movhi	r0, #0
   22984:	bxhi	lr
   22988:	bic	r0, r0, #-16777216	; 0xff000000
   2298c:	movw	r1, #31
   22990:	movt	r1, #128	; 0x80
   22994:	mov	r2, #1
   22998:	and	r0, r2, r1, lsr r0
   2299c:	bx	lr
   229a0:	sub	r1, r0, #65	; 0x41
   229a4:	mov	r0, #0
   229a8:	cmp	r1, #26
   229ac:	movwcc	r0, #1
   229b0:	bx	lr
   229b4:	mov	r1, r0
   229b8:	sub	r2, r0, #48	; 0x30
   229bc:	mov	r0, #1
   229c0:	cmp	r2, #22
   229c4:	bhi	229dc <__assert_fail@plt+0x114c4>
   229c8:	mov	ip, #1
   229cc:	movw	r3, #1023	; 0x3ff
   229d0:	movt	r3, #126	; 0x7e
   229d4:	tst	r3, ip, lsl r2
   229d8:	bxne	lr
   229dc:	sub	r1, r1, #97	; 0x61
   229e0:	cmp	r1, #6
   229e4:	movcs	r0, #0
   229e8:	bxcs	lr
   229ec:	bx	lr
   229f0:	sub	r1, r0, #65	; 0x41
   229f4:	cmp	r1, #26
   229f8:	addcc	r0, r0, #32
   229fc:	bx	lr
   22a00:	sub	r1, r0, #97	; 0x61
   22a04:	cmp	r1, #26
   22a08:	subcc	r0, r0, #32
   22a0c:	bx	lr
   22a10:	push	{r4, r5, r6, sl, fp, lr}
   22a14:	add	fp, sp, #16
   22a18:	mov	r4, r0
   22a1c:	bl	1135c <__fpending@plt>
   22a20:	mov	r5, r0
   22a24:	mov	r0, r4
   22a28:	bl	11368 <ferror_unlocked@plt>
   22a2c:	mov	r6, r0
   22a30:	mov	r0, r4
   22a34:	bl	12b2c <__assert_fail@plt+0x1614>
   22a38:	cmp	r6, #0
   22a3c:	beq	22a60 <__assert_fail@plt+0x11548>
   22a40:	mvn	r4, #0
   22a44:	cmp	r0, #0
   22a48:	bne	22a8c <__assert_fail@plt+0x11574>
   22a4c:	bl	11404 <__errno_location@plt>
   22a50:	mov	r1, #0
   22a54:	str	r1, [r0]
   22a58:	mov	r0, r4
   22a5c:	pop	{r4, r5, r6, sl, fp, pc}
   22a60:	cmp	r0, #0
   22a64:	mov	r4, r0
   22a68:	mvnne	r4, #0
   22a6c:	cmp	r5, #0
   22a70:	bne	22a8c <__assert_fail@plt+0x11574>
   22a74:	cmp	r0, #0
   22a78:	beq	22a8c <__assert_fail@plt+0x11574>
   22a7c:	bl	11404 <__errno_location@plt>
   22a80:	ldr	r0, [r0]
   22a84:	subs	r4, r0, #9
   22a88:	mvnne	r4, #0
   22a8c:	mov	r0, r4
   22a90:	pop	{r4, r5, r6, sl, fp, pc}
   22a94:	push	{r4, r5, r6, r7, fp, lr}
   22a98:	add	fp, sp, #16
   22a9c:	mov	r5, r1
   22aa0:	mov	r4, r0
   22aa4:	ldr	r0, [r0, #4]
   22aa8:	cmp	r0, r1
   22aac:	bcs	22ae0 <__assert_fail@plt+0x115c8>
   22ab0:	mov	r6, r3
   22ab4:	cmp	r3, #0
   22ab8:	beq	22aec <__assert_fail@plt+0x115d4>
   22abc:	mvn	r0, #0
   22ac0:	udiv	r0, r0, r6
   22ac4:	cmp	r0, r5
   22ac8:	bcs	22aec <__assert_fail@plt+0x115d4>
   22acc:	bl	11404 <__errno_location@plt>
   22ad0:	mov	r1, #12
   22ad4:	str	r1, [r0]
   22ad8:	mov	r0, #0
   22adc:	pop	{r4, r5, r6, r7, fp, pc}
   22ae0:	str	r5, [r4]
   22ae4:	mov	r0, #1
   22ae8:	pop	{r4, r5, r6, r7, fp, pc}
   22aec:	mul	r1, r6, r5
   22af0:	ldr	r0, [r4, #8]
   22af4:	cmp	r0, r2
   22af8:	beq	22b10 <__assert_fail@plt+0x115f8>
   22afc:	bl	22698 <__assert_fail@plt+0x11180>
   22b00:	mov	r7, r0
   22b04:	cmp	r0, #0
   22b08:	bne	22b40 <__assert_fail@plt+0x11628>
   22b0c:	b	22b50 <__assert_fail@plt+0x11638>
   22b10:	mov	r0, r1
   22b14:	bl	22668 <__assert_fail@plt+0x11150>
   22b18:	cmp	r0, #0
   22b1c:	beq	22b50 <__assert_fail@plt+0x11638>
   22b20:	mov	r7, r0
   22b24:	ldr	r1, [r4, #8]
   22b28:	cmp	r1, #0
   22b2c:	beq	22b40 <__assert_fail@plt+0x11628>
   22b30:	ldr	r0, [r4]
   22b34:	mul	r2, r0, r6
   22b38:	mov	r0, r7
   22b3c:	bl	112a8 <memcpy@plt>
   22b40:	str	r5, [r4]
   22b44:	stmib	r4, {r5, r7}
   22b48:	mov	r0, #1
   22b4c:	pop	{r4, r5, r6, r7, fp, pc}
   22b50:	mov	r0, #0
   22b54:	pop	{r4, r5, r6, r7, fp, pc}
   22b58:	push	{r4, r5, r6, sl, fp, lr}
   22b5c:	add	fp, sp, #16
   22b60:	mov	r4, r0
   22b64:	bl	11404 <__errno_location@plt>
   22b68:	mov	r5, r0
   22b6c:	ldr	r6, [r0]
   22b70:	mov	r0, r4
   22b74:	bl	11284 <free@plt>
   22b78:	str	r6, [r5]
   22b7c:	pop	{r4, r5, r6, sl, fp, pc}
   22b80:	push	{fp, lr}
   22b84:	mov	fp, sp
   22b88:	bl	11404 <__errno_location@plt>
   22b8c:	mov	r1, #12
   22b90:	str	r1, [r0]
   22b94:	mov	r0, #0
   22b98:	pop	{fp, pc}
   22b9c:	b	22668 <__assert_fail@plt+0x11150>
   22ba0:	cmp	r1, #0
   22ba4:	orreq	r1, r1, #1
   22ba8:	b	22698 <__assert_fail@plt+0x11180>
   22bac:	b	22614 <__assert_fail@plt+0x110fc>
   22bb0:	clz	r3, r2
   22bb4:	lsr	ip, r3, #5
   22bb8:	clz	r3, r1
   22bbc:	lsr	r3, r3, #5
   22bc0:	orrs	r3, r3, ip
   22bc4:	movwne	r1, #1
   22bc8:	movwne	r2, #1
   22bcc:	b	22c6c <__assert_fail@plt+0x11754>
   22bd0:	push	{fp, lr}
   22bd4:	mov	fp, sp
   22bd8:	mov	r0, #14
   22bdc:	bl	114ac <nl_langinfo@plt>
   22be0:	movw	r1, #15062	; 0x3ad6
   22be4:	movt	r1, #2
   22be8:	cmp	r0, #0
   22bec:	movne	r1, r0
   22bf0:	ldrb	r2, [r1]
   22bf4:	movw	r0, #17222	; 0x4346
   22bf8:	movt	r0, #2
   22bfc:	cmp	r2, #0
   22c00:	movne	r0, r1
   22c04:	pop	{fp, pc}
   22c08:	push	{r4, r5, r6, r7, fp, lr}
   22c0c:	add	fp, sp, #16
   22c10:	sub	sp, sp, #8
   22c14:	mov	r7, r2
   22c18:	mov	r4, r1
   22c1c:	add	r5, sp, #4
   22c20:	cmp	r0, #0
   22c24:	movne	r5, r0
   22c28:	mov	r0, r5
   22c2c:	bl	11374 <mbrtowc@plt>
   22c30:	mov	r6, r0
   22c34:	cmp	r7, #0
   22c38:	beq	22c60 <__assert_fail@plt+0x11748>
   22c3c:	cmn	r6, #2
   22c40:	bcc	22c60 <__assert_fail@plt+0x11748>
   22c44:	mov	r0, #0
   22c48:	bl	22ca8 <__assert_fail@plt+0x11790>
   22c4c:	cmp	r0, #0
   22c50:	bne	22c60 <__assert_fail@plt+0x11748>
   22c54:	ldrb	r0, [r4]
   22c58:	str	r0, [r5]
   22c5c:	mov	r6, #1
   22c60:	mov	r0, r6
   22c64:	sub	sp, fp, #16
   22c68:	pop	{r4, r5, r6, r7, fp, pc}
   22c6c:	cmp	r2, #0
   22c70:	beq	22ca0 <__assert_fail@plt+0x11788>
   22c74:	mvn	r3, #0
   22c78:	udiv	r3, r3, r2
   22c7c:	cmp	r3, r1
   22c80:	bcs	22ca0 <__assert_fail@plt+0x11788>
   22c84:	push	{fp, lr}
   22c88:	mov	fp, sp
   22c8c:	bl	11404 <__errno_location@plt>
   22c90:	mov	r1, #12
   22c94:	str	r1, [r0]
   22c98:	mov	r0, #0
   22c9c:	pop	{fp, pc}
   22ca0:	mul	r1, r2, r1
   22ca4:	b	22698 <__assert_fail@plt+0x11180>
   22ca8:	push	{r4, sl, fp, lr}
   22cac:	add	fp, sp, #8
   22cb0:	sub	sp, sp, #264	; 0x108
   22cb4:	add	r1, sp, #7
   22cb8:	movw	r2, #257	; 0x101
   22cbc:	bl	22d14 <__assert_fail@plt+0x117fc>
   22cc0:	mov	r4, #0
   22cc4:	cmp	r0, #0
   22cc8:	bne	22d08 <__assert_fail@plt+0x117f0>
   22ccc:	add	r0, sp, #7
   22cd0:	movw	r1, #17228	; 0x434c
   22cd4:	movt	r1, #2
   22cd8:	mov	r2, #2
   22cdc:	bl	113e0 <bcmp@plt>
   22ce0:	cmp	r0, #0
   22ce4:	beq	22d08 <__assert_fail@plt+0x117f0>
   22ce8:	add	r0, sp, #7
   22cec:	movw	r1, #17230	; 0x434e
   22cf0:	movt	r1, #2
   22cf4:	mov	r2, #6
   22cf8:	bl	113e0 <bcmp@plt>
   22cfc:	mov	r4, r0
   22d00:	cmp	r0, #0
   22d04:	movwne	r4, #1
   22d08:	mov	r0, r4
   22d0c:	sub	sp, fp, #8
   22d10:	pop	{r4, sl, fp, pc}
   22d14:	b	22d18 <__assert_fail@plt+0x11800>
   22d18:	push	{r4, r5, r6, r7, fp, lr}
   22d1c:	add	fp, sp, #16
   22d20:	mov	r6, r2
   22d24:	mov	r4, r1
   22d28:	bl	22db0 <__assert_fail@plt+0x11898>
   22d2c:	cmp	r0, #0
   22d30:	beq	22d60 <__assert_fail@plt+0x11848>
   22d34:	mov	r7, r0
   22d38:	bl	113ec <strlen@plt>
   22d3c:	cmp	r0, r6
   22d40:	bcs	22d7c <__assert_fail@plt+0x11864>
   22d44:	add	r2, r0, #1
   22d48:	mov	r0, r4
   22d4c:	mov	r1, r7
   22d50:	bl	112a8 <memcpy@plt>
   22d54:	mov	r5, #0
   22d58:	mov	r0, r5
   22d5c:	pop	{r4, r5, r6, r7, fp, pc}
   22d60:	mov	r5, #22
   22d64:	cmp	r6, #0
   22d68:	beq	22da4 <__assert_fail@plt+0x1188c>
   22d6c:	mov	r0, #0
   22d70:	strb	r0, [r4]
   22d74:	mov	r0, r5
   22d78:	pop	{r4, r5, r6, r7, fp, pc}
   22d7c:	mov	r5, #34	; 0x22
   22d80:	cmp	r6, #0
   22d84:	beq	22da4 <__assert_fail@plt+0x1188c>
   22d88:	sub	r6, r6, #1
   22d8c:	mov	r0, r4
   22d90:	mov	r1, r7
   22d94:	mov	r2, r6
   22d98:	bl	112a8 <memcpy@plt>
   22d9c:	mov	r0, #0
   22da0:	strb	r0, [r4, r6]
   22da4:	mov	r0, r5
   22da8:	pop	{r4, r5, r6, r7, fp, pc}
   22dac:	b	22db0 <__assert_fail@plt+0x11898>
   22db0:	mov	r1, #0
   22db4:	b	11488 <setlocale@plt>
   22db8:	cmp	r3, #0
   22dbc:	cmpeq	r2, #0
   22dc0:	bne	22de4 <__assert_fail@plt+0x118cc>
   22dc4:	cmp	r1, #0
   22dc8:	movlt	r1, #-2147483648	; 0x80000000
   22dcc:	movlt	r0, #0
   22dd0:	blt	22de0 <__assert_fail@plt+0x118c8>
   22dd4:	cmpeq	r0, #0
   22dd8:	mvnne	r1, #-2147483648	; 0x80000000
   22ddc:	mvnne	r0, #0
   22de0:	b	22e8c <__assert_fail@plt+0x11974>
   22de4:	sub	sp, sp, #8
   22de8:	push	{sp, lr}
   22dec:	cmp	r1, #0
   22df0:	blt	22e10 <__assert_fail@plt+0x118f8>
   22df4:	cmp	r3, #0
   22df8:	blt	22e44 <__assert_fail@plt+0x1192c>
   22dfc:	bl	22e9c <__assert_fail@plt+0x11984>
   22e00:	ldr	lr, [sp, #4]
   22e04:	add	sp, sp, #8
   22e08:	pop	{r2, r3}
   22e0c:	bx	lr
   22e10:	rsbs	r0, r0, #0
   22e14:	sbc	r1, r1, r1, lsl #1
   22e18:	cmp	r3, #0
   22e1c:	blt	22e68 <__assert_fail@plt+0x11950>
   22e20:	bl	22e9c <__assert_fail@plt+0x11984>
   22e24:	ldr	lr, [sp, #4]
   22e28:	add	sp, sp, #8
   22e2c:	pop	{r2, r3}
   22e30:	rsbs	r0, r0, #0
   22e34:	sbc	r1, r1, r1, lsl #1
   22e38:	rsbs	r2, r2, #0
   22e3c:	sbc	r3, r3, r3, lsl #1
   22e40:	bx	lr
   22e44:	rsbs	r2, r2, #0
   22e48:	sbc	r3, r3, r3, lsl #1
   22e4c:	bl	22e9c <__assert_fail@plt+0x11984>
   22e50:	ldr	lr, [sp, #4]
   22e54:	add	sp, sp, #8
   22e58:	pop	{r2, r3}
   22e5c:	rsbs	r0, r0, #0
   22e60:	sbc	r1, r1, r1, lsl #1
   22e64:	bx	lr
   22e68:	rsbs	r2, r2, #0
   22e6c:	sbc	r3, r3, r3, lsl #1
   22e70:	bl	22e9c <__assert_fail@plt+0x11984>
   22e74:	ldr	lr, [sp, #4]
   22e78:	add	sp, sp, #8
   22e7c:	pop	{r2, r3}
   22e80:	rsbs	r2, r2, #0
   22e84:	sbc	r3, r3, r3, lsl #1
   22e88:	bx	lr
   22e8c:	push	{r1, lr}
   22e90:	mov	r0, #8
   22e94:	bl	11224 <raise@plt>
   22e98:	pop	{r1, pc}
   22e9c:	cmp	r1, r3
   22ea0:	cmpeq	r0, r2
   22ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ea8:	mov	r4, r0
   22eac:	movcc	r0, #0
   22eb0:	mov	r5, r1
   22eb4:	ldr	lr, [sp, #36]	; 0x24
   22eb8:	movcc	r1, r0
   22ebc:	bcc	22fb8 <__assert_fail@plt+0x11aa0>
   22ec0:	cmp	r3, #0
   22ec4:	clzeq	ip, r2
   22ec8:	clzne	ip, r3
   22ecc:	addeq	ip, ip, #32
   22ed0:	cmp	r5, #0
   22ed4:	clzeq	r1, r4
   22ed8:	addeq	r1, r1, #32
   22edc:	clzne	r1, r5
   22ee0:	sub	ip, ip, r1
   22ee4:	sub	sl, ip, #32
   22ee8:	lsl	r9, r3, ip
   22eec:	rsb	fp, ip, #32
   22ef0:	orr	r9, r9, r2, lsl sl
   22ef4:	orr	r9, r9, r2, lsr fp
   22ef8:	lsl	r8, r2, ip
   22efc:	cmp	r5, r9
   22f00:	cmpeq	r4, r8
   22f04:	movcc	r0, #0
   22f08:	movcc	r1, r0
   22f0c:	bcc	22f28 <__assert_fail@plt+0x11a10>
   22f10:	mov	r0, #1
   22f14:	subs	r4, r4, r8
   22f18:	lsl	r1, r0, sl
   22f1c:	orr	r1, r1, r0, lsr fp
   22f20:	lsl	r0, r0, ip
   22f24:	sbc	r5, r5, r9
   22f28:	cmp	ip, #0
   22f2c:	beq	22fb8 <__assert_fail@plt+0x11aa0>
   22f30:	lsr	r6, r8, #1
   22f34:	orr	r6, r6, r9, lsl #31
   22f38:	lsr	r7, r9, #1
   22f3c:	mov	r2, ip
   22f40:	b	22f64 <__assert_fail@plt+0x11a4c>
   22f44:	subs	r3, r4, r6
   22f48:	sbc	r8, r5, r7
   22f4c:	adds	r3, r3, r3
   22f50:	adc	r8, r8, r8
   22f54:	adds	r4, r3, #1
   22f58:	adc	r5, r8, #0
   22f5c:	subs	r2, r2, #1
   22f60:	beq	22f80 <__assert_fail@plt+0x11a68>
   22f64:	cmp	r5, r7
   22f68:	cmpeq	r4, r6
   22f6c:	bcs	22f44 <__assert_fail@plt+0x11a2c>
   22f70:	adds	r4, r4, r4
   22f74:	adc	r5, r5, r5
   22f78:	subs	r2, r2, #1
   22f7c:	bne	22f64 <__assert_fail@plt+0x11a4c>
   22f80:	lsr	r3, r4, ip
   22f84:	orr	r3, r3, r5, lsl fp
   22f88:	lsr	r2, r5, ip
   22f8c:	orr	r3, r3, r5, lsr sl
   22f90:	adds	r0, r0, r4
   22f94:	mov	r4, r3
   22f98:	lsl	r3, r2, ip
   22f9c:	orr	r3, r3, r4, lsl sl
   22fa0:	lsl	ip, r4, ip
   22fa4:	orr	r3, r3, r4, lsr fp
   22fa8:	adc	r1, r1, r5
   22fac:	subs	r0, r0, ip
   22fb0:	mov	r5, r2
   22fb4:	sbc	r1, r1, r3
   22fb8:	cmp	lr, #0
   22fbc:	strdne	r4, [lr]
   22fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22fc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22fc8:	mov	r7, r0
   22fcc:	ldr	r6, [pc, #72]	; 2301c <__assert_fail@plt+0x11b04>
   22fd0:	ldr	r5, [pc, #72]	; 23020 <__assert_fail@plt+0x11b08>
   22fd4:	add	r6, pc, r6
   22fd8:	add	r5, pc, r5
   22fdc:	sub	r6, r6, r5
   22fe0:	mov	r8, r1
   22fe4:	mov	r9, r2
   22fe8:	bl	111d4 <pthread_mutex_unlock@plt-0x20>
   22fec:	asrs	r6, r6, #2
   22ff0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22ff4:	mov	r4, #0
   22ff8:	add	r4, r4, #1
   22ffc:	ldr	r3, [r5], #4
   23000:	mov	r2, r9
   23004:	mov	r1, r8
   23008:	mov	r0, r7
   2300c:	blx	r3
   23010:	cmp	r6, r4
   23014:	bne	22ff8 <__assert_fail@plt+0x11ae0>
   23018:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2301c:	andeq	r1, r1, r0, lsr pc
   23020:	andeq	r1, r1, r8, lsr #30
   23024:	bx	lr
   23028:	ldr	r3, [pc, #12]	; 2303c <__assert_fail@plt+0x11b24>
   2302c:	mov	r1, #0
   23030:	add	r3, pc, r3
   23034:	ldr	r2, [r3]
   23038:	b	1141c <__cxa_atexit@plt>
   2303c:	andeq	r2, r1, ip, ror #1

Disassembly of section .fini:

00023040 <.fini>:
   23040:	push	{r3, lr}
   23044:	pop	{r3, pc}
