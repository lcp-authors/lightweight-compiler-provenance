
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010e34 <.init>:
   10e34:	push	{r3, lr}
   10e38:	bl	1110c <__assert_fail@plt+0x48>
   10e3c:	pop	{r3, pc}

Disassembly of section .plt:

00010e40 <calloc@plt-0x14>:
   10e40:	push	{lr}		; (str lr, [sp, #-4]!)
   10e44:	ldr	lr, [pc, #4]	; 10e50 <calloc@plt-0x4>
   10e48:	add	lr, pc, lr
   10e4c:	ldr	pc, [lr, #8]!
   10e50:			; <UNDEFINED> instruction: 0x000171b0

00010e54 <calloc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e60 <fputs_unlocked@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #424]!	; 0x1a8

00010e6c <raise@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #416]!	; 0x1a0

00010e78 <strcmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #408]!	; 0x198

00010e84 <posix_fadvise64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #400]!	; 0x190

00010e90 <fflush@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #392]!	; 0x188

00010e9c <memmove@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #384]!	; 0x180

00010ea8 <free@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #376]!	; 0x178

00010eb4 <_exit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #368]!	; 0x170

00010ec0 <memcpy@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #360]!	; 0x168

00010ecc <__strtoull_internal@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #352]!	; 0x160

00010ed8 <mbsinit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #344]!	; 0x158

00010ee4 <fwrite_unlocked@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #336]!	; 0x150

00010ef0 <memcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #328]!	; 0x148

00010efc <dcgettext@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #320]!	; 0x140

00010f08 <realloc@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #312]!	; 0x138

00010f14 <textdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #304]!	; 0x130

00010f20 <iswprint@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #296]!	; 0x128

00010f2c <fwrite@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #288]!	; 0x120

00010f38 <lseek64@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #280]!	; 0x118

00010f44 <__ctype_get_mb_cur_max@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #272]!	; 0x110

00010f50 <__fpending@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #264]!	; 0x108

00010f5c <mbrtowc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #256]!	; 0x100

00010f68 <error@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #248]!	; 0xf8

00010f74 <malloc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #240]!	; 0xf0

00010f80 <__libc_start_main@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #232]!	; 0xe8

00010f8c <__freading@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #224]!	; 0xe0

00010f98 <__gmon_start__@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #216]!	; 0xd8

00010fa4 <getopt_long@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #208]!	; 0xd0

00010fb0 <__ctype_b_loc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #200]!	; 0xc8

00010fbc <exit@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #192]!	; 0xc0

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #184]!	; 0xb8

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #176]!	; 0xb0

00010fe0 <__errno_location@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #168]!	; 0xa8

00010fec <__cxa_atexit@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #160]!	; 0xa0

00010ff8 <memset@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #152]!	; 0x98

00011004 <__printf_chk@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #144]!	; 0x90

00011010 <fileno@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #136]!	; 0x88

0001101c <__fprintf_chk@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #128]!	; 0x80

00011028 <memchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #120]!	; 0x78

00011034 <fclose@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #112]!	; 0x70

00011040 <fseeko64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #104]!	; 0x68

0001104c <__uflow@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #96]!	; 0x60

00011058 <__overflow@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #88]!	; 0x58

00011064 <setlocale@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #80]!	; 0x50

00011070 <strrchr@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #72]!	; 0x48

0001107c <nl_langinfo@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #64]!	; 0x40

00011088 <clearerr_unlocked@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #56]!	; 0x38

00011094 <fopen64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #48]!	; 0x30

000110a0 <bindtextdomain@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #40]!	; 0x28

000110ac <strncmp@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #32]!

000110b8 <abort@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #24]!

000110c4 <__assert_fail@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #16]!

Disassembly of section .text:

000110d0 <.text>:
   110d0:	mov	fp, #0
   110d4:	mov	lr, #0
   110d8:	pop	{r1}		; (ldr r1, [sp], #4)
   110dc:	mov	r2, sp
   110e0:	push	{r2}		; (str r2, [sp, #-4]!)
   110e4:	push	{r0}		; (str r0, [sp, #-4]!)
   110e8:	ldr	ip, [pc, #16]	; 11100 <__assert_fail@plt+0x3c>
   110ec:	push	{ip}		; (str ip, [sp, #-4]!)
   110f0:	ldr	r0, [pc, #12]	; 11104 <__assert_fail@plt+0x40>
   110f4:	ldr	r3, [pc, #12]	; 11108 <__assert_fail@plt+0x44>
   110f8:	bl	10f80 <__libc_start_main@plt>
   110fc:	bl	110b8 <abort@plt>
   11100:			; <UNDEFINED> instruction: 0x000171b0
   11104:	andeq	r1, r1, r4, ror r4
   11108:	andeq	r7, r1, r0, asr r1
   1110c:	ldr	r3, [pc, #20]	; 11128 <__assert_fail@plt+0x64>
   11110:	ldr	r2, [pc, #20]	; 1112c <__assert_fail@plt+0x68>
   11114:	add	r3, pc, r3
   11118:	ldr	r2, [r3, r2]
   1111c:	cmp	r2, #0
   11120:	bxeq	lr
   11124:	b	10f98 <__gmon_start__@plt>
   11128:	andeq	r6, r1, r4, ror #29
   1112c:	andeq	r0, r0, r0, ror #1
   11130:	ldr	r0, [pc, #24]	; 11150 <__assert_fail@plt+0x8c>
   11134:	ldr	r3, [pc, #24]	; 11154 <__assert_fail@plt+0x90>
   11138:	cmp	r3, r0
   1113c:	bxeq	lr
   11140:	ldr	r3, [pc, #16]	; 11158 <__assert_fail@plt+0x94>
   11144:	cmp	r3, #0
   11148:	bxeq	lr
   1114c:	bx	r3
   11150:	andeq	r8, r2, r8, lsr r1
   11154:	andeq	r8, r2, r8, lsr r1
   11158:	andeq	r0, r0, r0
   1115c:	ldr	r0, [pc, #36]	; 11188 <__assert_fail@plt+0xc4>
   11160:	ldr	r1, [pc, #36]	; 1118c <__assert_fail@plt+0xc8>
   11164:	sub	r1, r1, r0
   11168:	asr	r1, r1, #2
   1116c:	add	r1, r1, r1, lsr #31
   11170:	asrs	r1, r1, #1
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0xcc>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r8, r2, r8, lsr r1
   1118c:	andeq	r8, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	push	{r4, lr}
   11198:	ldr	r4, [pc, #24]	; 111b8 <__assert_fail@plt+0xf4>
   1119c:	ldrb	r3, [r4]
   111a0:	cmp	r3, #0
   111a4:	popne	{r4, pc}
   111a8:	bl	11130 <__assert_fail@plt+0x6c>
   111ac:	mov	r3, #1
   111b0:	strb	r3, [r4]
   111b4:	pop	{r4, pc}
   111b8:	andeq	r8, r2, ip, asr r1
   111bc:	b	1115c <__assert_fail@plt+0x98>
   111c0:	push	{fp, lr}
   111c4:	mov	fp, sp
   111c8:	sub	sp, sp, #56	; 0x38
   111cc:	mov	r4, r0
   111d0:	cmp	r0, #0
   111d4:	bne	11430 <__assert_fail@plt+0x36c>
   111d8:	movw	r1, #29187	; 0x7203
   111dc:	mov	r0, #0
   111e0:	mov	r2, #5
   111e4:	movt	r1, #1
   111e8:	bl	10efc <dcgettext@plt>
   111ec:	mov	r1, r0
   111f0:	movw	r0, #668	; 0x29c
   111f4:	movt	r0, #3
   111f8:	ldr	r2, [r0]
   111fc:	mov	r0, #1
   11200:	bl	11004 <__printf_chk@plt>
   11204:	movw	r1, #29229	; 0x722d
   11208:	mov	r0, #0
   1120c:	mov	r2, #5
   11210:	movt	r1, #1
   11214:	bl	10efc <dcgettext@plt>
   11218:	movw	r7, #33108	; 0x8154
   1121c:	movt	r7, #2
   11220:	ldr	r1, [r7]
   11224:	bl	10e60 <fputs_unlocked@plt>
   11228:	movw	r1, #30256	; 0x7630
   1122c:	mov	r0, #0
   11230:	mov	r2, #5
   11234:	movt	r1, #1
   11238:	bl	10efc <dcgettext@plt>
   1123c:	ldr	r1, [r7]
   11240:	bl	10e60 <fputs_unlocked@plt>
   11244:	movw	r1, #30312	; 0x7668
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	movt	r1, #1
   11254:	bl	10efc <dcgettext@plt>
   11258:	ldr	r1, [r7]
   1125c:	bl	10e60 <fputs_unlocked@plt>
   11260:	movw	r1, #29358	; 0x72ae
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10efc <dcgettext@plt>
   11274:	ldr	r1, [r7]
   11278:	bl	10e60 <fputs_unlocked@plt>
   1127c:	movw	r1, #29636	; 0x73c4
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	movt	r1, #1
   1128c:	bl	10efc <dcgettext@plt>
   11290:	ldr	r1, [r7]
   11294:	bl	10e60 <fputs_unlocked@plt>
   11298:	movw	r1, #29922	; 0x74e2
   1129c:	mov	r0, #0
   112a0:	mov	r2, #5
   112a4:	movt	r1, #1
   112a8:	bl	10efc <dcgettext@plt>
   112ac:	ldr	r1, [r7]
   112b0:	bl	10e60 <fputs_unlocked@plt>
   112b4:	movw	r1, #29967	; 0x750f
   112b8:	mov	r0, #0
   112bc:	mov	r2, #5
   112c0:	movt	r1, #1
   112c4:	bl	10efc <dcgettext@plt>
   112c8:	ldr	r1, [r7]
   112cc:	bl	10e60 <fputs_unlocked@plt>
   112d0:	movw	r0, #31024	; 0x7930
   112d4:	mov	r2, #48	; 0x30
   112d8:	mov	r6, sp
   112dc:	movw	r5, #30021	; 0x7545
   112e0:	movt	r0, #1
   112e4:	movt	r5, #1
   112e8:	add	r1, r0, #32
   112ec:	add	r3, r0, #16
   112f0:	vld1.64	{d18-d19}, [r0], r2
   112f4:	vld1.64	{d16-d17}, [r1]
   112f8:	vld1.64	{d20-d21}, [r3]
   112fc:	add	r1, r6, #32
   11300:	vldr	d22, [r0]
   11304:	add	r0, r6, #16
   11308:	vst1.64	{d16-d17}, [r1]
   1130c:	movw	r1, #30387	; 0x76b3
   11310:	vst1.64	{d20-d21}, [r0]
   11314:	mov	r0, r6
   11318:	vst1.64	{d18-d19}, [r0], r2
   1131c:	movt	r1, #1
   11320:	vstr	d22, [r0]
   11324:	mov	r0, r5
   11328:	bl	10e78 <strcmp@plt>
   1132c:	cmp	r0, #0
   11330:	ldrne	r1, [r6, #8]!
   11334:	cmpne	r1, #0
   11338:	bne	11324 <__assert_fail@plt+0x260>
   1133c:	ldr	r6, [r6, #4]
   11340:	movw	r1, #30482	; 0x7712
   11344:	mov	r0, #0
   11348:	mov	r2, #5
   1134c:	movt	r1, #1
   11350:	bl	10efc <dcgettext@plt>
   11354:	movw	r2, #30164	; 0x75d4
   11358:	movw	r3, #30505	; 0x7729
   1135c:	mov	r1, r0
   11360:	mov	r0, #1
   11364:	movt	r2, #1
   11368:	movt	r3, #1
   1136c:	bl	11004 <__printf_chk@plt>
   11370:	cmp	r6, #0
   11374:	mov	r0, #5
   11378:	mov	r1, #0
   1137c:	moveq	r6, r5
   11380:	bl	11064 <setlocale@plt>
   11384:	cmp	r0, #0
   11388:	beq	113c0 <__assert_fail@plt+0x2fc>
   1138c:	movw	r1, #30545	; 0x7751
   11390:	mov	r2, #3
   11394:	movt	r1, #1
   11398:	bl	110ac <strncmp@plt>
   1139c:	cmp	r0, #0
   113a0:	beq	113c0 <__assert_fail@plt+0x2fc>
   113a4:	movw	r1, #30549	; 0x7755
   113a8:	mov	r0, #0
   113ac:	mov	r2, #5
   113b0:	movt	r1, #1
   113b4:	bl	10efc <dcgettext@plt>
   113b8:	ldr	r1, [r7]
   113bc:	bl	10e60 <fputs_unlocked@plt>
   113c0:	movw	r1, #30620	; 0x779c
   113c4:	mov	r0, #0
   113c8:	mov	r2, #5
   113cc:	movt	r1, #1
   113d0:	bl	10efc <dcgettext@plt>
   113d4:	movw	r2, #30505	; 0x7729
   113d8:	mov	r1, r0
   113dc:	mov	r0, #1
   113e0:	mov	r3, r5
   113e4:	movt	r2, #1
   113e8:	bl	11004 <__printf_chk@plt>
   113ec:	movw	r1, #30647	; 0x77b7
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	movt	r1, #1
   113fc:	bl	10efc <dcgettext@plt>
   11400:	movw	r3, #30697	; 0x77e9
   11404:	mov	r1, r0
   11408:	movw	r0, #30415	; 0x76cf
   1140c:	cmp	r6, r5
   11410:	mov	r2, r6
   11414:	movt	r0, #1
   11418:	movt	r3, #1
   1141c:	moveq	r3, r0
   11420:	mov	r0, #1
   11424:	bl	11004 <__printf_chk@plt>
   11428:	mov	r0, r4
   1142c:	bl	10fbc <exit@plt>
   11430:	movw	r0, #33096	; 0x8148
   11434:	movw	r1, #29148	; 0x71dc
   11438:	mov	r2, #5
   1143c:	movt	r0, #2
   11440:	movt	r1, #1
   11444:	ldr	r5, [r0]
   11448:	mov	r0, #0
   1144c:	bl	10efc <dcgettext@plt>
   11450:	mov	r2, r0
   11454:	movw	r0, #668	; 0x29c
   11458:	mov	r1, #1
   1145c:	movt	r0, #3
   11460:	ldr	r3, [r0]
   11464:	mov	r0, r5
   11468:	bl	1101c <__fprintf_chk@plt>
   1146c:	mov	r0, r4
   11470:	bl	10fbc <exit@plt>
   11474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11478:	add	fp, sp, #28
   1147c:	sub	sp, sp, #36	; 0x24
   11480:	mov	r4, r0
   11484:	ldr	r0, [r1]
   11488:	mov	r6, r1
   1148c:	bl	13518 <__assert_fail@plt+0x2454>
   11490:	movw	r8, #30697	; 0x77e9
   11494:	mov	r0, #6
   11498:	movt	r8, #1
   1149c:	mov	r1, r8
   114a0:	bl	11064 <setlocale@plt>
   114a4:	movw	r5, #30168	; 0x75d8
   114a8:	movw	r1, #30025	; 0x7549
   114ac:	movt	r5, #1
   114b0:	movt	r1, #1
   114b4:	mov	r0, r5
   114b8:	bl	110a0 <bindtextdomain@plt>
   114bc:	mov	r0, r5
   114c0:	mov	r5, r4
   114c4:	bl	10f14 <textdomain@plt>
   114c8:	movw	r0, #12884	; 0x3254
   114cc:	movt	r0, #1
   114d0:	bl	171b4 <__assert_fail@plt+0x60f0>
   114d4:	movw	r0, #33120	; 0x8160
   114d8:	mov	sl, #0
   114dc:	movw	r1, #33124	; 0x8164
   114e0:	cmp	r4, #2
   114e4:	movt	r0, #2
   114e8:	movt	r1, #2
   114ec:	strb	sl, [r0]
   114f0:	movw	r0, #33121	; 0x8161
   114f4:	movt	r0, #2
   114f8:	strb	sl, [r0]
   114fc:	movw	r0, #33122	; 0x8162
   11500:	movt	r0, #2
   11504:	strb	sl, [r0]
   11508:	movw	r0, #33123	; 0x8163
   1150c:	movt	r0, #2
   11510:	strb	sl, [r0]
   11514:	mov	r0, #75	; 0x4b
   11518:	str	r0, [r1]
   1151c:	movw	r0, #33128	; 0x8168
   11520:	movt	r0, #2
   11524:	str	r8, [r0]
   11528:	movw	r0, #33132	; 0x816c
   1152c:	movt	r0, #2
   11530:	str	sl, [r0]
   11534:	movw	r0, #33136	; 0x8170
   11538:	movt	r0, #2
   1153c:	str	sl, [r0]
   11540:	movw	r0, #33140	; 0x8174
   11544:	movt	r0, #2
   11548:	str	sl, [r0]
   1154c:	blt	11588 <__assert_fail@plt+0x4c4>
   11550:	mov	r4, r6
   11554:	ldr	r1, [r4, #4]!
   11558:	ldrb	r0, [r1]
   1155c:	cmp	r0, #45	; 0x2d
   11560:	bne	11588 <__assert_fail@plt+0x4c4>
   11564:	ldrb	r0, [r1, #1]!
   11568:	sub	r0, r0, #48	; 0x30
   1156c:	str	r1, [sp, #32]
   11570:	cmp	r0, #9
   11574:	bhi	11588 <__assert_fail@plt+0x4c4>
   11578:	ldr	r0, [r6]
   1157c:	sub	r5, r5, #1
   11580:	str	r0, [r6, #4]
   11584:	b	11594 <__assert_fail@plt+0x4d0>
   11588:	mov	r0, #0
   1158c:	mov	r4, r6
   11590:	str	r0, [sp, #32]
   11594:	movw	r9, #30049	; 0x7561
   11598:	movw	r7, #30864	; 0x7890
   1159c:	mov	r0, #0
   115a0:	movt	r9, #1
   115a4:	movt	r7, #1
   115a8:	b	115b8 <__assert_fail@plt+0x4f4>
   115ac:	movw	r0, #33112	; 0x8158
   115b0:	movt	r0, #2
   115b4:	ldr	r0, [r0]
   115b8:	str	r0, [sp, #28]
   115bc:	b	115c8 <__assert_fail@plt+0x504>
   115c0:	mov	r1, #1
   115c4:	strb	r1, [r0]
   115c8:	mov	r0, r5
   115cc:	mov	r1, r4
   115d0:	mov	r2, r9
   115d4:	mov	r3, r7
   115d8:	str	sl, [sp]
   115dc:	bl	10fa4 <getopt_long@plt>
   115e0:	mov	r6, r0
   115e4:	cmp	r0, #98	; 0x62
   115e8:	ble	11740 <__assert_fail@plt+0x67c>
   115ec:	sub	r0, r6, #99	; 0x63
   115f0:	cmp	r0, #20
   115f4:	bhi	11a1c <__assert_fail@plt+0x958>
   115f8:	add	r1, pc, #0
   115fc:	ldr	pc, [r1, r0, lsl #2]
   11600:	andeq	r1, r1, r4, asr r6
   11604:	andeq	r1, r1, ip, lsl sl
   11608:	andeq	r1, r1, ip, lsl sl
   1160c:	andeq	r1, r1, ip, lsl sl
   11610:	andeq	r1, r1, ip, lsr #11
   11614:	andeq	r1, r1, ip, lsl sl
   11618:	andeq	r1, r1, ip, lsl sl
   1161c:	andeq	r1, r1, ip, lsl sl
   11620:	andeq	r1, r1, ip, lsl sl
   11624:	andeq	r1, r1, ip, lsl sl
   11628:	andeq	r1, r1, ip, lsl sl
   1162c:	andeq	r1, r1, ip, lsl sl
   11630:	andeq	r1, r1, ip, lsl sl
   11634:	andeq	r1, r1, ip, ror #12
   11638:	andeq	r1, r1, ip, lsl sl
   1163c:	andeq	r1, r1, ip, lsl sl
   11640:	andeq	r1, r1, r0, ror #12
   11644:	andeq	r1, r1, r4, lsr r7
   11648:	andeq	r1, r1, r4, lsl r7
   1164c:	andeq	r1, r1, ip, lsl sl
   11650:	andeq	r1, r1, r0, lsr #14
   11654:	movw	r0, #33123	; 0x8163
   11658:	movt	r0, #2
   1165c:	b	115c0 <__assert_fail@plt+0x4fc>
   11660:	movw	r0, #33121	; 0x8161
   11664:	movt	r0, #2
   11668:	b	115c0 <__assert_fail@plt+0x4fc>
   1166c:	movw	r0, #33136	; 0x8170
   11670:	mov	r6, r8
   11674:	movt	r0, #2
   11678:	str	sl, [r0]
   1167c:	movw	r0, #33112	; 0x8158
   11680:	movt	r0, #2
   11684:	ldr	r8, [r0]
   11688:	ldrb	r0, [r8]
   1168c:	cmp	r0, #32
   11690:	bne	116bc <__assert_fail@plt+0x5f8>
   11694:	mov	r0, #0
   11698:	add	r1, r8, r0
   1169c:	add	r0, r0, #1
   116a0:	ldrb	r1, [r1, #1]
   116a4:	cmp	r1, #32
   116a8:	beq	11698 <__assert_fail@plt+0x5d4>
   116ac:	movw	r1, #33136	; 0x8170
   116b0:	add	r8, r8, r0
   116b4:	movt	r1, #2
   116b8:	str	r0, [r1]
   116bc:	movw	r0, #33128	; 0x8168
   116c0:	movt	r0, #2
   116c4:	str	r8, [r0]
   116c8:	mov	r0, r8
   116cc:	bl	10fc8 <strlen@plt>
   116d0:	movw	r1, #33132	; 0x816c
   116d4:	movt	r1, #2
   116d8:	str	r0, [r1]
   116dc:	add	r1, r8, r0
   116e0:	mov	r0, r1
   116e4:	cmp	r1, r8
   116e8:	bls	116fc <__assert_fail@plt+0x638>
   116ec:	mov	r1, r0
   116f0:	ldrb	r2, [r1, #-1]!
   116f4:	cmp	r2, #32
   116f8:	beq	116e0 <__assert_fail@plt+0x61c>
   116fc:	movw	r1, #33140	; 0x8174
   11700:	strb	sl, [r0], -r8
   11704:	mov	r8, r6
   11708:	movt	r1, #2
   1170c:	str	r0, [r1]
   11710:	b	115c8 <__assert_fail@plt+0x504>
   11714:	movw	r0, #33120	; 0x8160
   11718:	movt	r0, #2
   1171c:	b	115c0 <__assert_fail@plt+0x4fc>
   11720:	movw	r0, #33112	; 0x8158
   11724:	movt	r0, #2
   11728:	ldr	r0, [r0]
   1172c:	str	r0, [sp, #32]
   11730:	b	115c8 <__assert_fail@plt+0x504>
   11734:	movw	r0, #33122	; 0x8162
   11738:	movt	r0, #2
   1173c:	b	115c0 <__assert_fail@plt+0x4fc>
   11740:	cmn	r6, #1
   11744:	bne	119bc <__assert_fail@plt+0x8f8>
   11748:	ldr	sl, [sp, #32]
   1174c:	movw	r7, #33124	; 0x8164
   11750:	movt	r7, #2
   11754:	cmp	sl, #0
   11758:	beq	117a0 <__assert_fail@plt+0x6dc>
   1175c:	movw	r1, #30192	; 0x75f0
   11760:	mov	r0, #0
   11764:	mov	r2, #5
   11768:	mov	r6, #0
   1176c:	movt	r1, #1
   11770:	bl	10efc <dcgettext@plt>
   11774:	movw	r1, #2500	; 0x9c4
   11778:	mov	r2, #0
   1177c:	mov	r3, #0
   11780:	stm	sp, {r1, r6, r8}
   11784:	str	r0, [sp, #12]
   11788:	mov	r0, sl
   1178c:	str	r6, [sp, #16]
   11790:	bl	15fd4 <__assert_fail@plt+0x4f10>
   11794:	mov	r6, r0
   11798:	str	r0, [r7]
   1179c:	b	117a4 <__assert_fail@plt+0x6e0>
   117a0:	ldr	r6, [r7]
   117a4:	ldr	r9, [sp, #28]
   117a8:	mov	r7, r5
   117ac:	cmp	r9, #0
   117b0:	beq	11814 <__assert_fail@plt+0x750>
   117b4:	movw	r1, #30192	; 0x75f0
   117b8:	mov	r0, #0
   117bc:	mov	r2, #5
   117c0:	mov	r5, #0
   117c4:	movt	r1, #1
   117c8:	bl	10efc <dcgettext@plt>
   117cc:	asr	r1, r6, #31
   117d0:	str	r6, [sp]
   117d4:	mov	r2, #0
   117d8:	mov	r3, #0
   117dc:	stmib	sp, {r1, r8}
   117e0:	str	r0, [sp, #12]
   117e4:	mov	r0, r9
   117e8:	str	r5, [sp, #16]
   117ec:	bl	15fd4 <__assert_fail@plt+0x4f10>
   117f0:	movw	r1, #33144	; 0x8178
   117f4:	cmp	sl, #0
   117f8:	movt	r1, #2
   117fc:	str	r0, [r1]
   11800:	bne	1183c <__assert_fail@plt+0x778>
   11804:	movw	r1, #33124	; 0x8164
   11808:	add	r0, r0, #10
   1180c:	movt	r1, #2
   11810:	b	11838 <__assert_fail@plt+0x774>
   11814:	mov	r0, #187	; 0xbb
   11818:	movw	r1, #34079	; 0x851f
   1181c:	mul	r0, r6, r0
   11820:	movt	r1, #20971	; 0x51eb
   11824:	smmul	r0, r0, r1
   11828:	asr	r1, r0, #6
   1182c:	add	r0, r1, r0, lsr #31
   11830:	movw	r1, #33144	; 0x8178
   11834:	movt	r1, #2
   11838:	str	r0, [r1]
   1183c:	movw	r5, #33088	; 0x8140
   11840:	movt	r5, #2
   11844:	ldr	r0, [r5]
   11848:	cmp	r0, r7
   1184c:	bne	118b8 <__assert_fail@plt+0x7f4>
   11850:	movw	r0, #33104	; 0x8150
   11854:	movw	r1, #31180	; 0x79cc
   11858:	movt	r0, #2
   1185c:	movt	r1, #1
   11860:	ldr	r0, [r0]
   11864:	bl	11a58 <__assert_fail@plt+0x994>
   11868:	mov	r6, r0
   1186c:	movw	r0, #33104	; 0x8150
   11870:	movt	r0, #2
   11874:	ldr	r0, [r0]
   11878:	bl	1337c <__assert_fail@plt+0x22b8>
   1187c:	cmp	r0, #0
   11880:	beq	119b0 <__assert_fail@plt+0x8ec>
   11884:	bl	10fe0 <__errno_location@plt>
   11888:	ldr	r4, [r0]
   1188c:	movw	r1, #30233	; 0x7619
   11890:	mov	r0, #0
   11894:	mov	r2, #5
   11898:	movt	r1, #1
   1189c:	bl	10efc <dcgettext@plt>
   118a0:	movw	r2, #31111	; 0x7987
   118a4:	mov	r3, r0
   118a8:	mov	r0, #1
   118ac:	mov	r1, r4
   118b0:	movt	r2, #1
   118b4:	bl	10f68 <error@plt>
   118b8:	mov	r6, #1
   118bc:	bge	119b0 <__assert_fail@plt+0x8ec>
   118c0:	movw	sl, #30789	; 0x7845
   118c4:	str	r4, [sp, #32]
   118c8:	movw	r4, #31180	; 0x79cc
   118cc:	mov	r1, #0
   118d0:	mov	r6, #1
   118d4:	str	r7, [sp, #28]
   118d8:	movt	r4, #1
   118dc:	movt	sl, #1
   118e0:	str	r1, [sp, #24]
   118e4:	ldr	r1, [sp, #32]
   118e8:	ldr	r7, [r1, r0, lsl #2]
   118ec:	mov	r1, r4
   118f0:	mov	r0, r7
   118f4:	bl	10e78 <strcmp@plt>
   118f8:	cmp	r0, #0
   118fc:	beq	11924 <__assert_fail@plt+0x860>
   11900:	mov	r0, r7
   11904:	mov	r1, sl
   11908:	bl	11094 <fopen64@plt>
   1190c:	cmp	r0, #0
   11910:	beq	11948 <__assert_fail@plt+0x884>
   11914:	mov	r1, r7
   11918:	bl	11a58 <__assert_fail@plt+0x994>
   1191c:	and	r6, r6, r0
   11920:	b	1198c <__assert_fail@plt+0x8c8>
   11924:	movw	r0, #33104	; 0x8150
   11928:	mov	r1, r7
   1192c:	movt	r0, #2
   11930:	ldr	r0, [r0]
   11934:	bl	11a58 <__assert_fail@plt+0x994>
   11938:	and	r6, r6, r0
   1193c:	mov	r0, #1
   11940:	str	r0, [sp, #24]
   11944:	b	1198c <__assert_fail@plt+0x8c8>
   11948:	bl	10fe0 <__errno_location@plt>
   1194c:	ldr	r9, [r0]
   11950:	movw	r1, #30206	; 0x75fe
   11954:	mov	r0, #0
   11958:	mov	r2, #5
   1195c:	mov	r6, #0
   11960:	movt	r1, #1
   11964:	bl	10efc <dcgettext@plt>
   11968:	mov	r8, r0
   1196c:	mov	r0, #4
   11970:	mov	r1, r7
   11974:	bl	14c24 <__assert_fail@plt+0x3b60>
   11978:	mov	r3, r0
   1197c:	mov	r0, #0
   11980:	mov	r1, r9
   11984:	mov	r2, r8
   11988:	bl	10f68 <error@plt>
   1198c:	ldr	r0, [r5]
   11990:	ldr	r1, [sp, #28]
   11994:	add	r0, r0, #1
   11998:	cmp	r0, r1
   1199c:	str	r0, [r5]
   119a0:	blt	118e4 <__assert_fail@plt+0x820>
   119a4:	ldr	r0, [sp, #24]
   119a8:	tst	r0, #1
   119ac:	bne	1186c <__assert_fail@plt+0x7a8>
   119b0:	eor	r0, r6, #1
   119b4:	sub	sp, fp, #28
   119b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119bc:	cmn	r6, #3
   119c0:	bne	11a0c <__assert_fail@plt+0x948>
   119c4:	movw	r0, #33008	; 0x80f0
   119c8:	movw	r2, #30178	; 0x75e2
   119cc:	mov	r1, #0
   119d0:	movt	r0, #2
   119d4:	movt	r2, #1
   119d8:	str	r1, [sp, #4]
   119dc:	movw	r1, #30021	; 0x7545
   119e0:	ldr	r3, [r0]
   119e4:	movw	r0, #33108	; 0x8154
   119e8:	str	r2, [sp]
   119ec:	movw	r2, #30164	; 0x75d4
   119f0:	movt	r1, #1
   119f4:	movt	r0, #2
   119f8:	movt	r2, #1
   119fc:	ldr	r0, [r0]
   11a00:	bl	15708 <__assert_fail@plt+0x4644>
   11a04:	mov	r0, #0
   11a08:	bl	10fbc <exit@plt>
   11a0c:	cmn	r6, #2
   11a10:	bne	11a1c <__assert_fail@plt+0x958>
   11a14:	mov	r0, #0
   11a18:	bl	111c0 <__assert_fail@plt+0xfc>
   11a1c:	sub	r0, r6, #48	; 0x30
   11a20:	cmp	r0, #9
   11a24:	bhi	11a50 <__assert_fail@plt+0x98c>
   11a28:	movw	r1, #30070	; 0x7576
   11a2c:	mov	r0, #0
   11a30:	mov	r2, #5
   11a34:	movt	r1, #1
   11a38:	bl	10efc <dcgettext@plt>
   11a3c:	mov	r2, r0
   11a40:	mov	r0, #0
   11a44:	mov	r1, #0
   11a48:	mov	r3, r6
   11a4c:	bl	10f68 <error@plt>
   11a50:	mov	r0, #1
   11a54:	bl	111c0 <__assert_fail@plt+0xfc>
   11a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a5c:	add	fp, sp, #28
   11a60:	push	{r1}		; (str r1, [sp, #-4]!)
   11a64:	mov	r1, #2
   11a68:	mov	r5, r0
   11a6c:	bl	13340 <__assert_fail@plt+0x227c>
   11a70:	movw	r0, #33152	; 0x8180
   11a74:	mov	r9, #0
   11a78:	movt	r0, #2
   11a7c:	str	r9, [r0]
   11a80:	movw	r0, #33148	; 0x817c
   11a84:	movt	r0, #2
   11a88:	strb	r9, [r0]
   11a8c:	mov	r0, r5
   11a90:	bl	123f8 <__assert_fail@plt+0x1334>
   11a94:	mov	r7, r0
   11a98:	movw	r0, #33156	; 0x8184
   11a9c:	movw	ip, #33168	; 0x8190
   11aa0:	movw	sl, #656	; 0x290
   11aa4:	movw	lr, #33164	; 0x818c
   11aa8:	movw	r8, #33108	; 0x8154
   11aac:	movt	r0, #2
   11ab0:	movt	ip, #2
   11ab4:	movt	sl, #3
   11ab8:	movt	lr, #2
   11abc:	movt	r8, #2
   11ac0:	str	r7, [r0]
   11ac4:	movw	r0, #33172	; 0x8194
   11ac8:	movt	r0, #2
   11acc:	b	11af4 <__assert_fail@plt+0xa30>
   11ad0:	movw	r0, #33156	; 0x8184
   11ad4:	movw	ip, #33168	; 0x8190
   11ad8:	movw	lr, #33164	; 0x818c
   11adc:	movt	r0, #2
   11ae0:	movt	ip, #2
   11ae4:	movt	lr, #2
   11ae8:	ldr	r7, [r0]
   11aec:	movw	r0, #33172	; 0x8194
   11af0:	movt	r0, #2
   11af4:	str	r9, [r0]
   11af8:	b	11b18 <__assert_fail@plt+0xa54>
   11afc:	mov	r0, r5
   11b00:	bl	123f8 <__assert_fail@plt+0x1334>
   11b04:	movw	ip, #33168	; 0x8190
   11b08:	movw	lr, #33164	; 0x818c
   11b0c:	mov	r7, r0
   11b10:	movt	ip, #2
   11b14:	movt	lr, #2
   11b18:	cmn	r7, #1
   11b1c:	cmpne	r7, #10
   11b20:	bne	11b7c <__assert_fail@plt+0xab8>
   11b24:	ldr	r6, [ip]
   11b28:	ldr	r0, [lr]
   11b2c:	str	r9, [sl]
   11b30:	cmp	r0, r6
   11b34:	bgt	11b44 <__assert_fail@plt+0xa80>
   11b38:	cmn	r7, #1
   11b3c:	cmpne	r7, #10
   11b40:	beq	11e70 <__assert_fail@plt+0xdac>
   11b44:	movw	r0, #33148	; 0x817c
   11b48:	mov	r2, #0
   11b4c:	movt	r0, #2
   11b50:	ldrb	r0, [r0]
   11b54:	cmp	r0, #1
   11b58:	bne	11c10 <__assert_fail@plt+0xb4c>
   11b5c:	cmp	r6, #8
   11b60:	mov	r9, #9
   11b64:	blt	11c10 <__assert_fail@plt+0xb4c>
   11b68:	asr	r0, r6, #31
   11b6c:	mov	r2, #0
   11b70:	add	r0, r6, r0, lsr #29
   11b74:	bic	r4, r0, #7
   11b78:	b	11bd4 <__assert_fail@plt+0xb10>
   11b7c:	movw	r0, #33136	; 0x8170
   11b80:	ldr	r6, [ip]
   11b84:	movt	r0, #2
   11b88:	ldr	r0, [r0]
   11b8c:	cmp	r6, r0
   11b90:	blt	11b28 <__assert_fail@plt+0xa64>
   11b94:	movw	r0, #33132	; 0x816c
   11b98:	movt	r0, #2
   11b9c:	ldr	r0, [r0]
   11ba0:	add	r1, r0, r6
   11ba4:	ldr	r0, [lr]
   11ba8:	cmp	r0, r1
   11bac:	blt	11b24 <__assert_fail@plt+0xa60>
   11bb0:	b	11f04 <__assert_fail@plt+0xe40>
   11bb4:	mov	r1, #9
   11bb8:	bl	11058 <__overflow@plt>
   11bbc:	ldr	r2, [sl]
   11bc0:	movw	lr, #33164	; 0x818c
   11bc4:	movw	ip, #33168	; 0x8190
   11bc8:	movt	lr, #2
   11bcc:	movt	ip, #2
   11bd0:	b	11bf4 <__assert_fail@plt+0xb30>
   11bd4:	ldr	r0, [r8]
   11bd8:	ldr	r1, [r0, #20]
   11bdc:	ldr	r3, [r0, #24]
   11be0:	cmp	r1, r3
   11be4:	bcs	11bb4 <__assert_fail@plt+0xaf0>
   11be8:	add	r3, r1, #1
   11bec:	str	r3, [r0, #20]
   11bf0:	strb	r9, [r1]
   11bf4:	asr	r0, r2, #31
   11bf8:	add	r0, r2, r0, lsr #29
   11bfc:	bic	r0, r0, #7
   11c00:	add	r2, r0, #8
   11c04:	cmp	r2, r4
   11c08:	str	r2, [sl]
   11c0c:	blt	11bd4 <__assert_fail@plt+0xb10>
   11c10:	cmp	r2, r6
   11c14:	bge	11c70 <__assert_fail@plt+0xbac>
   11c18:	mov	r4, #32
   11c1c:	b	11c40 <__assert_fail@plt+0xb7c>
   11c20:	mov	r1, #32
   11c24:	bl	11058 <__overflow@plt>
   11c28:	ldr	r2, [sl]
   11c2c:	movw	lr, #33164	; 0x818c
   11c30:	movw	ip, #33168	; 0x8190
   11c34:	movt	lr, #2
   11c38:	movt	ip, #2
   11c3c:	b	11c60 <__assert_fail@plt+0xb9c>
   11c40:	ldr	r0, [r8]
   11c44:	ldr	r1, [r0, #20]
   11c48:	ldr	r3, [r0, #24]
   11c4c:	cmp	r1, r3
   11c50:	bcs	11c20 <__assert_fail@plt+0xb5c>
   11c54:	add	r3, r1, #1
   11c58:	str	r3, [r0, #20]
   11c5c:	strb	r4, [r1]
   11c60:	add	r2, r2, #1
   11c64:	cmp	r2, r6
   11c68:	str	r2, [sl]
   11c6c:	blt	11c40 <__assert_fail@plt+0xb7c>
   11c70:	ldr	r6, [lr]
   11c74:	cmp	r2, r6
   11c78:	bne	11c90 <__assert_fail@plt+0xbcc>
   11c7c:	mov	r1, r2
   11c80:	mov	r6, r2
   11c84:	cmn	r7, #1
   11c88:	bne	11d0c <__assert_fail@plt+0xc48>
   11c8c:	b	11db8 <__assert_fail@plt+0xcf4>
   11c90:	movw	r0, #33128	; 0x8168
   11c94:	movt	r0, #2
   11c98:	ldr	r9, [r0]
   11c9c:	b	11cc0 <__assert_fail@plt+0xbfc>
   11ca0:	bl	11058 <__overflow@plt>
   11ca4:	movw	r0, #33164	; 0x818c
   11ca8:	ldr	r2, [sl]
   11cac:	movw	ip, #33168	; 0x8190
   11cb0:	movt	r0, #2
   11cb4:	movt	ip, #2
   11cb8:	ldr	r6, [r0]
   11cbc:	b	11cec <__assert_fail@plt+0xc28>
   11cc0:	ldrb	r1, [r9]
   11cc4:	cmp	r1, #0
   11cc8:	beq	11dac <__assert_fail@plt+0xce8>
   11ccc:	ldr	r0, [r8]
   11cd0:	ldr	r3, [r0, #20]
   11cd4:	ldr	r4, [r0, #24]
   11cd8:	cmp	r3, r4
   11cdc:	bcs	11ca0 <__assert_fail@plt+0xbdc>
   11ce0:	add	r4, r3, #1
   11ce4:	str	r4, [r0, #20]
   11ce8:	strb	r1, [r3]
   11cec:	add	r2, r2, #1
   11cf0:	add	r9, r9, #1
   11cf4:	mov	r1, r6
   11cf8:	cmp	r2, r6
   11cfc:	str	r2, [sl]
   11d00:	bne	11cc0 <__assert_fail@plt+0xbfc>
   11d04:	cmn	r7, #1
   11d08:	beq	11db8 <__assert_fail@plt+0xcf4>
   11d0c:	cmp	r7, #10
   11d10:	mov	r9, #0
   11d14:	beq	11e70 <__assert_fail@plt+0xdac>
   11d18:	movw	r0, #33148	; 0x817c
   11d1c:	movt	r0, #2
   11d20:	ldrb	r0, [r0]
   11d24:	cmp	r0, #1
   11d28:	bne	11d9c <__assert_fail@plt+0xcd8>
   11d2c:	asr	r0, r6, #31
   11d30:	add	r0, r6, r0, lsr #29
   11d34:	bic	r9, r0, #7
   11d38:	add	r0, r1, #1
   11d3c:	cmp	r0, r9
   11d40:	blt	11d5c <__assert_fail@plt+0xc98>
   11d44:	b	11d9c <__assert_fail@plt+0xcd8>
   11d48:	asr	r0, r1, #31
   11d4c:	add	r0, r1, r0, lsr #29
   11d50:	bic	r0, r0, #7
   11d54:	add	r1, r0, #8
   11d58:	str	r1, [sl]
   11d5c:	cmp	r1, r9
   11d60:	bge	11d9c <__assert_fail@plt+0xcd8>
   11d64:	ldr	r0, [r8]
   11d68:	ldr	r2, [r0, #20]
   11d6c:	ldr	r3, [r0, #24]
   11d70:	cmp	r2, r3
   11d74:	bcs	11d8c <__assert_fail@plt+0xcc8>
   11d78:	add	r3, r2, #1
   11d7c:	str	r3, [r0, #20]
   11d80:	mov	r0, #9
   11d84:	strb	r0, [r2]
   11d88:	b	11d48 <__assert_fail@plt+0xc84>
   11d8c:	mov	r1, #9
   11d90:	bl	11058 <__overflow@plt>
   11d94:	ldr	r1, [sl]
   11d98:	b	11d48 <__assert_fail@plt+0xc84>
   11d9c:	cmp	r1, r6
   11da0:	mov	r9, #0
   11da4:	bge	11e70 <__assert_fail@plt+0xdac>
   11da8:	b	11e18 <__assert_fail@plt+0xd54>
   11dac:	mov	r1, r2
   11db0:	cmn	r7, #1
   11db4:	bne	11d0c <__assert_fail@plt+0xc48>
   11db8:	movw	r1, #33140	; 0x8174
   11dbc:	ldr	r0, [ip]
   11dc0:	mov	r9, #0
   11dc4:	movt	r1, #2
   11dc8:	ldr	r1, [r1]
   11dcc:	add	r0, r1, r0
   11dd0:	cmp	r6, r0
   11dd4:	blt	11e70 <__assert_fail@plt+0xdac>
   11dd8:	ldr	r0, [r8]
   11ddc:	ldr	r1, [r0, #20]
   11de0:	ldr	r2, [r0, #24]
   11de4:	cmp	r1, r2
   11de8:	bcs	11e50 <__assert_fail@plt+0xd8c>
   11dec:	add	r2, r1, #1
   11df0:	str	r2, [r0, #20]
   11df4:	mov	r0, #10
   11df8:	strb	r0, [r1]
   11dfc:	cmn	r7, #1
   11e00:	bne	11e78 <__assert_fail@plt+0xdb4>
   11e04:	b	12310 <__assert_fail@plt+0x124c>
   11e08:	mov	r1, #32
   11e0c:	bl	11058 <__overflow@plt>
   11e10:	ldr	r1, [sl]
   11e14:	b	11e3c <__assert_fail@plt+0xd78>
   11e18:	ldr	r0, [r8]
   11e1c:	ldr	r2, [r0, #20]
   11e20:	ldr	r3, [r0, #24]
   11e24:	cmp	r2, r3
   11e28:	bcs	11e08 <__assert_fail@plt+0xd44>
   11e2c:	add	r3, r2, #1
   11e30:	str	r3, [r0, #20]
   11e34:	mov	r0, #32
   11e38:	strb	r0, [r2]
   11e3c:	add	r1, r1, #1
   11e40:	cmp	r1, r6
   11e44:	str	r1, [sl]
   11e48:	blt	11e18 <__assert_fail@plt+0xd54>
   11e4c:	b	11e70 <__assert_fail@plt+0xdac>
   11e50:	mov	r1, #10
   11e54:	bl	11058 <__overflow@plt>
   11e58:	cmn	r7, #1
   11e5c:	bne	11e78 <__assert_fail@plt+0xdb4>
   11e60:	b	12310 <__assert_fail@plt+0x124c>
   11e64:	add	r1, r0, #1
   11e68:	str	r1, [r5, #4]
   11e6c:	ldrb	r7, [r0]
   11e70:	cmn	r7, #1
   11e74:	beq	12310 <__assert_fail@plt+0x124c>
   11e78:	cmp	r7, #10
   11e7c:	beq	11ed0 <__assert_fail@plt+0xe0c>
   11e80:	ldr	r0, [r8]
   11e84:	ldr	r1, [r0, #20]
   11e88:	ldr	r2, [r0, #24]
   11e8c:	cmp	r1, r2
   11e90:	bcs	11ec4 <__assert_fail@plt+0xe00>
   11e94:	add	r2, r1, #1
   11e98:	str	r2, [r0, #20]
   11e9c:	strb	r7, [r1]
   11ea0:	ldmib	r5, {r0, r1}
   11ea4:	cmp	r0, r1
   11ea8:	bcc	11e64 <__assert_fail@plt+0xda0>
   11eac:	mov	r0, r5
   11eb0:	bl	1104c <__uflow@plt>
   11eb4:	mov	r7, r0
   11eb8:	cmn	r7, #1
   11ebc:	bne	11e78 <__assert_fail@plt+0xdb4>
   11ec0:	b	12310 <__assert_fail@plt+0x124c>
   11ec4:	uxtb	r1, r7
   11ec8:	bl	11058 <__overflow@plt>
   11ecc:	b	11ea0 <__assert_fail@plt+0xddc>
   11ed0:	ldr	r0, [r8]
   11ed4:	ldr	r1, [r0, #20]
   11ed8:	ldr	r2, [r0, #24]
   11edc:	cmp	r1, r2
   11ee0:	bcs	11ef8 <__assert_fail@plt+0xe34>
   11ee4:	add	r2, r1, #1
   11ee8:	str	r2, [r0, #20]
   11eec:	mov	r0, #10
   11ef0:	strb	r0, [r1]
   11ef4:	b	11afc <__assert_fail@plt+0xa38>
   11ef8:	mov	r1, #10
   11efc:	bl	11058 <__overflow@plt>
   11f00:	b	11afc <__assert_fail@plt+0xa38>
   11f04:	movw	r1, #33180	; 0x819c
   11f08:	movt	r1, #2
   11f0c:	str	r0, [r1]
   11f10:	movw	r0, #33176	; 0x8198
   11f14:	movw	r1, #33184	; 0x81a0
   11f18:	movt	r0, #2
   11f1c:	movt	r1, #2
   11f20:	mov	r4, r0
   11f24:	str	r6, [r0]
   11f28:	movw	r0, #38184	; 0x9528
   11f2c:	movt	r0, #2
   11f30:	str	r1, [r0]
   11f34:	movw	r0, #33160	; 0x8188
   11f38:	movw	r1, #38192	; 0x9530
   11f3c:	movt	r0, #2
   11f40:	movt	r1, #2
   11f44:	str	r1, [r0]
   11f48:	mov	r0, r5
   11f4c:	mov	r1, r7
   11f50:	bl	12844 <__assert_fail@plt+0x1780>
   11f54:	mov	r1, r0
   11f58:	movw	r0, #33168	; 0x8190
   11f5c:	ldr	r2, [r4]
   11f60:	movw	r6, #33164	; 0x818c
   11f64:	mov	r3, #0
   11f68:	movt	r0, #2
   11f6c:	movt	r6, #2
   11f70:	ldr	r0, [r0]
   11f74:	cmp	r0, r2
   11f78:	bne	11fb8 <__assert_fail@plt+0xef4>
   11f7c:	movw	r3, #33132	; 0x816c
   11f80:	ldr	r7, [r6]
   11f84:	movt	r3, #2
   11f88:	ldr	r3, [r3]
   11f8c:	add	r3, r3, r0
   11f90:	cmp	r7, r3
   11f94:	mov	r3, #0
   11f98:	movwge	r3, #1
   11f9c:	subs	r7, r1, #10
   11fa0:	movwne	r7, #1
   11fa4:	cmn	r1, #1
   11fa8:	and	r3, r7, r3
   11fac:	add	r7, r1, #1
   11fb0:	movwne	r7, #1
   11fb4:	and	r3, r7, r3
   11fb8:	movw	r7, #33121	; 0x8161
   11fbc:	movt	r7, #2
   11fc0:	ldrb	r7, [r7]
   11fc4:	cmp	r7, #0
   11fc8:	beq	12060 <__assert_fail@plt+0xf9c>
   11fcc:	movw	r0, #33180	; 0x819c
   11fd0:	movw	r2, #33152	; 0x8180
   11fd4:	movt	r0, #2
   11fd8:	movt	r2, #2
   11fdc:	ldr	r0, [r0]
   11fe0:	str	r0, [r2]
   11fe4:	movw	r7, #38192	; 0x9530
   11fe8:	movt	r7, #2
   11fec:	movw	r0, #33160	; 0x8188
   11ff0:	movt	r0, #2
   11ff4:	ldr	r4, [r0]
   11ff8:	cmp	r4, r7
   11ffc:	bls	123d8 <__assert_fail@plt+0x1314>
   12000:	ldrb	r0, [r4, #-16]
   12004:	orr	r0, r0, #10
   12008:	strb	r0, [r4, #-16]
   1200c:	movw	r0, #33156	; 0x8184
   12010:	movt	r0, #2
   12014:	str	r1, [r0]
   12018:	bl	125dc <__assert_fail@plt+0x1518>
   1201c:	movw	r0, #33180	; 0x819c
   12020:	movt	r0, #2
   12024:	ldr	r1, [r0]
   12028:	mov	r0, r7
   1202c:	bl	12e24 <__assert_fail@plt+0x1d60>
   12030:	ldr	r7, [r7, #24]
   12034:	movw	r6, #33152	; 0x8180
   12038:	movt	r6, #2
   1203c:	cmp	r7, r4
   12040:	beq	11ad0 <__assert_fail@plt+0xa0c>
   12044:	ldr	r1, [r6]
   12048:	mov	r0, r7
   1204c:	bl	12e24 <__assert_fail@plt+0x1d60>
   12050:	ldr	r7, [r7, #24]
   12054:	cmp	r7, r4
   12058:	bne	12044 <__assert_fail@plt+0xf80>
   1205c:	b	11ad0 <__assert_fail@plt+0xa0c>
   12060:	movw	r7, #33123	; 0x8163
   12064:	movt	r7, #2
   12068:	ldrb	r7, [r7]
   1206c:	cmp	r7, #0
   12070:	beq	12140 <__assert_fail@plt+0x107c>
   12074:	ldr	r7, [r6]
   12078:	movw	r6, #33180	; 0x819c
   1207c:	cmp	r3, #0
   12080:	movw	r3, #33152	; 0x8180
   12084:	movt	r6, #2
   12088:	movt	r3, #2
   1208c:	ldr	r6, [r6]
   12090:	movne	r6, r7
   12094:	cmp	r0, r2
   12098:	str	r6, [r3]
   1209c:	bne	11fe4 <__assert_fail@plt+0xf20>
   120a0:	movw	r2, #33132	; 0x816c
   120a4:	movt	r2, #2
   120a8:	ldr	r2, [r2]
   120ac:	add	r0, r2, r0
   120b0:	cmp	r7, r0
   120b4:	blt	11fe4 <__assert_fail@plt+0xf20>
   120b8:	cmn	r1, #1
   120bc:	movw	r4, #33152	; 0x8180
   120c0:	movw	r7, #38192	; 0x9530
   120c4:	movt	r4, #2
   120c8:	movt	r7, #2
   120cc:	cmpne	r1, #10
   120d0:	beq	11fec <__assert_fail@plt+0xf28>
   120d4:	mov	r0, r5
   120d8:	bl	12844 <__assert_fail@plt+0x1780>
   120dc:	movw	r2, #33176	; 0x8198
   120e0:	mov	r1, r0
   120e4:	movw	r0, #33168	; 0x8190
   120e8:	movt	r0, #2
   120ec:	movt	r2, #2
   120f0:	ldr	r0, [r0]
   120f4:	ldr	r2, [r2]
   120f8:	cmp	r0, r2
   120fc:	bne	11fec <__assert_fail@plt+0xf28>
   12100:	movw	r2, #33132	; 0x816c
   12104:	movt	r2, #2
   12108:	ldr	r2, [r2]
   1210c:	add	r2, r2, r0
   12110:	movw	r0, #33164	; 0x818c
   12114:	movt	r0, #2
   12118:	ldr	r0, [r0]
   1211c:	cmp	r0, r2
   12120:	blt	11fec <__assert_fail@plt+0xf28>
   12124:	cmn	r1, #1
   12128:	cmpne	r1, #10
   1212c:	beq	11fec <__assert_fail@plt+0xf28>
   12130:	ldr	r2, [r4]
   12134:	cmp	r0, r2
   12138:	beq	120d4 <__assert_fail@plt+0x1010>
   1213c:	b	11fec <__assert_fail@plt+0xf28>
   12140:	movw	r7, #33122	; 0x8162
   12144:	movt	r7, #2
   12148:	ldrb	r7, [r7]
   1214c:	cmp	r7, #1
   12150:	bne	1217c <__assert_fail@plt+0x10b8>
   12154:	cmp	r3, #0
   12158:	beq	12210 <__assert_fail@plt+0x114c>
   1215c:	movw	r3, #33180	; 0x819c
   12160:	movt	r3, #2
   12164:	ldr	r7, [r3]
   12168:	ldr	r3, [r6]
   1216c:	cmp	r3, r7
   12170:	mov	r4, r3
   12174:	beq	1221c <__assert_fail@plt+0x1158>
   12178:	b	12240 <__assert_fail@plt+0x117c>
   1217c:	movw	r3, #33180	; 0x819c
   12180:	movw	r4, #33152	; 0x8180
   12184:	movw	r7, #38192	; 0x9530
   12188:	cmp	r0, r2
   1218c:	movt	r3, #2
   12190:	movt	r4, #2
   12194:	movt	r7, #2
   12198:	ldr	r3, [r3]
   1219c:	str	r3, [r4]
   121a0:	bne	11fec <__assert_fail@plt+0xf28>
   121a4:	movw	r2, #33132	; 0x816c
   121a8:	movt	r2, #2
   121ac:	ldr	r2, [r2]
   121b0:	add	r2, r2, r0
   121b4:	ldr	r0, [r6]
   121b8:	cmp	r0, r2
   121bc:	blt	11fec <__assert_fail@plt+0xf28>
   121c0:	cmn	r1, #1
   121c4:	cmpne	r1, #10
   121c8:	beq	11fec <__assert_fail@plt+0xf28>
   121cc:	ldr	r2, [r4]
   121d0:	cmp	r0, r2
   121d4:	bne	11fec <__assert_fail@plt+0xf28>
   121d8:	mov	r0, r5
   121dc:	bl	12844 <__assert_fail@plt+0x1780>
   121e0:	movw	r2, #33176	; 0x8198
   121e4:	mov	r1, r0
   121e8:	movw	r0, #33168	; 0x8190
   121ec:	movw	r6, #33164	; 0x818c
   121f0:	movt	r0, #2
   121f4:	movt	r2, #2
   121f8:	movt	r6, #2
   121fc:	ldr	r0, [r0]
   12200:	ldr	r2, [r2]
   12204:	cmp	r0, r2
   12208:	beq	121a4 <__assert_fail@plt+0x10e0>
   1220c:	b	11fec <__assert_fail@plt+0xf28>
   12210:	movw	r3, #33180	; 0x819c
   12214:	movt	r3, #2
   12218:	ldr	r3, [r3]
   1221c:	movw	r7, #33152	; 0x8180
   12220:	movt	r7, #2
   12224:	ldr	r7, [r7]
   12228:	cmp	r7, r3
   1222c:	bne	12258 <__assert_fail@plt+0x1194>
   12230:	cmp	r3, #0
   12234:	mov	r4, #0
   12238:	mov	r7, r3
   1223c:	movweq	r4, #3
   12240:	movw	r3, #33152	; 0x8180
   12244:	movt	r3, #2
   12248:	str	r4, [r3]
   1224c:	cmp	r0, r2
   12250:	bne	11fe4 <__assert_fail@plt+0xf20>
   12254:	b	12264 <__assert_fail@plt+0x11a0>
   12258:	mov	r7, r3
   1225c:	cmp	r0, r2
   12260:	bne	11fe4 <__assert_fail@plt+0xf20>
   12264:	movw	r2, #33132	; 0x816c
   12268:	movt	r2, #2
   1226c:	ldr	r2, [r2]
   12270:	add	r2, r2, r0
   12274:	ldr	r0, [r6]
   12278:	cmp	r0, r2
   1227c:	blt	11fe4 <__assert_fail@plt+0xf20>
   12280:	cmn	r1, #1
   12284:	beq	11fe4 <__assert_fail@plt+0xf20>
   12288:	cmp	r1, #10
   1228c:	cmpne	r0, r7
   12290:	beq	11fe4 <__assert_fail@plt+0xf20>
   12294:	movw	r4, #33152	; 0x8180
   12298:	movw	r7, #38192	; 0x9530
   1229c:	movt	r4, #2
   122a0:	movt	r7, #2
   122a4:	mov	r0, r5
   122a8:	bl	12844 <__assert_fail@plt+0x1780>
   122ac:	movw	r2, #33176	; 0x8198
   122b0:	mov	r1, r0
   122b4:	movw	r0, #33168	; 0x8190
   122b8:	movt	r0, #2
   122bc:	movt	r2, #2
   122c0:	ldr	r0, [r0]
   122c4:	ldr	r2, [r2]
   122c8:	cmp	r0, r2
   122cc:	bne	11fec <__assert_fail@plt+0xf28>
   122d0:	movw	r2, #33132	; 0x816c
   122d4:	movt	r2, #2
   122d8:	ldr	r2, [r2]
   122dc:	add	r2, r2, r0
   122e0:	movw	r0, #33164	; 0x818c
   122e4:	movt	r0, #2
   122e8:	ldr	r0, [r0]
   122ec:	cmp	r0, r2
   122f0:	blt	11fec <__assert_fail@plt+0xf28>
   122f4:	cmn	r1, #1
   122f8:	cmpne	r1, #10
   122fc:	beq	11fec <__assert_fail@plt+0xf28>
   12300:	ldr	r2, [r4]
   12304:	cmp	r0, r2
   12308:	beq	122a4 <__assert_fail@plt+0x11e0>
   1230c:	b	11fec <__assert_fail@plt+0xf28>
   12310:	movw	r1, #33156	; 0x8184
   12314:	mvn	r0, #0
   12318:	mov	r6, #0
   1231c:	movt	r1, #2
   12320:	str	r0, [r1]
   12324:	ldr	r0, [r5]
   12328:	ands	r4, r0, #32
   1232c:	movw	r0, #33104	; 0x8150
   12330:	movt	r0, #2
   12334:	mvneq	r6, #0
   12338:	ldr	r0, [r0]
   1233c:	cmp	r0, r5
   12340:	beq	1237c <__assert_fail@plt+0x12b8>
   12344:	mov	r0, r5
   12348:	bl	1337c <__assert_fail@plt+0x22b8>
   1234c:	cmp	r4, #0
   12350:	bne	12364 <__assert_fail@plt+0x12a0>
   12354:	cmp	r0, #0
   12358:	beq	12364 <__assert_fail@plt+0x12a0>
   1235c:	bl	10fe0 <__errno_location@plt>
   12360:	ldr	r6, [r0]
   12364:	cmp	r6, #0
   12368:	blt	123cc <__assert_fail@plt+0x1308>
   1236c:	beq	12390 <__assert_fail@plt+0x12cc>
   12370:	movw	r5, #31111	; 0x7987
   12374:	movt	r5, #1
   12378:	b	123a8 <__assert_fail@plt+0x12e4>
   1237c:	mov	r0, r5
   12380:	bl	11088 <clearerr_unlocked@plt>
   12384:	cmp	r6, #0
   12388:	bge	1236c <__assert_fail@plt+0x12a8>
   1238c:	b	123cc <__assert_fail@plt+0x1308>
   12390:	movw	r1, #30780	; 0x783c
   12394:	mov	r0, #0
   12398:	mov	r2, #5
   1239c:	movt	r1, #1
   123a0:	bl	10efc <dcgettext@plt>
   123a4:	mov	r5, r0
   123a8:	ldr	r2, [sp]
   123ac:	mov	r0, #0
   123b0:	mov	r1, #3
   123b4:	bl	14ea0 <__assert_fail@plt+0x3ddc>
   123b8:	mov	r3, r0
   123bc:	mov	r0, #0
   123c0:	mov	r1, r6
   123c4:	mov	r2, r5
   123c8:	bl	10f68 <error@plt>
   123cc:	lsr	r0, r6, #31
   123d0:	sub	sp, fp, #28
   123d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123d8:	movw	r0, #30791	; 0x7847
   123dc:	movw	r1, #30809	; 0x7859
   123e0:	movw	r3, #30819	; 0x7863
   123e4:	movw	r2, #623	; 0x26f
   123e8:	movt	r0, #1
   123ec:	movt	r1, #1
   123f0:	movt	r3, #1
   123f4:	bl	110c4 <__assert_fail@plt>
   123f8:	push	{r4, r5, r6, r7, fp, lr}
   123fc:	add	fp, sp, #16
   12400:	movw	r5, #33164	; 0x818c
   12404:	mov	r4, r0
   12408:	mov	r0, #0
   1240c:	movt	r5, #2
   12410:	str	r0, [r5]
   12414:	ldmib	r4, {r0, r1}
   12418:	cmp	r0, r1
   1241c:	bcs	125d0 <__assert_fail@plt+0x150c>
   12420:	add	r1, r0, #1
   12424:	str	r1, [r4, #4]
   12428:	ldrb	r0, [r0]
   1242c:	movw	r6, #33148	; 0x817c
   12430:	mov	r7, #1
   12434:	movt	r6, #2
   12438:	cmp	r0, #9
   1243c:	bne	12458 <__assert_fail@plt+0x1394>
   12440:	b	1246c <__assert_fail@plt+0x13a8>
   12444:	add	r1, r0, #1
   12448:	str	r1, [r4, #4]
   1244c:	ldrb	r0, [r0]
   12450:	cmp	r0, #9
   12454:	beq	1246c <__assert_fail@plt+0x13a8>
   12458:	cmp	r0, #32
   1245c:	bne	124a8 <__assert_fail@plt+0x13e4>
   12460:	ldr	r0, [r5]
   12464:	add	r0, r0, #1
   12468:	b	12484 <__assert_fail@plt+0x13c0>
   1246c:	ldr	r0, [r5]
   12470:	strb	r7, [r6]
   12474:	asr	r1, r0, #31
   12478:	add	r0, r0, r1, lsr #29
   1247c:	bic	r0, r0, #7
   12480:	add	r0, r0, #8
   12484:	str	r0, [r5]
   12488:	ldmib	r4, {r0, r1}
   1248c:	cmp	r0, r1
   12490:	bcc	12444 <__assert_fail@plt+0x1380>
   12494:	mov	r0, r4
   12498:	bl	1104c <__uflow@plt>
   1249c:	cmp	r0, #9
   124a0:	bne	12458 <__assert_fail@plt+0x1394>
   124a4:	b	1246c <__assert_fail@plt+0x13a8>
   124a8:	movw	r1, #33140	; 0x8174
   124ac:	movt	r1, #2
   124b0:	ldr	r1, [r1]
   124b4:	cmp	r1, #0
   124b8:	beq	125a8 <__assert_fail@plt+0x14e4>
   124bc:	ldr	r1, [r5]
   124c0:	movw	r2, #33168	; 0x8190
   124c4:	movt	r2, #2
   124c8:	str	r1, [r2]
   124cc:	movw	r1, #33128	; 0x8168
   124d0:	movt	r1, #2
   124d4:	ldr	r2, [r1]
   124d8:	ldrb	r1, [r2]
   124dc:	cmp	r1, #0
   124e0:	beq	12534 <__assert_fail@plt+0x1470>
   124e4:	add	r7, r2, #1
   124e8:	uxtb	r1, r1
   124ec:	cmp	r0, r1
   124f0:	bne	125cc <__assert_fail@plt+0x1508>
   124f4:	ldr	r0, [r5]
   124f8:	add	r0, r0, #1
   124fc:	str	r0, [r5]
   12500:	ldmib	r4, {r0, r1}
   12504:	cmp	r0, r1
   12508:	bcs	12528 <__assert_fail@plt+0x1464>
   1250c:	add	r1, r0, #1
   12510:	str	r1, [r4, #4]
   12514:	ldrb	r0, [r0]
   12518:	ldrb	r1, [r7], #1
   1251c:	cmp	r1, #0
   12520:	bne	124e8 <__assert_fail@plt+0x1424>
   12524:	b	12534 <__assert_fail@plt+0x1470>
   12528:	mov	r0, r4
   1252c:	bl	1104c <__uflow@plt>
   12530:	b	12518 <__assert_fail@plt+0x1454>
   12534:	mov	r7, #1
   12538:	cmp	r0, #9
   1253c:	bne	12558 <__assert_fail@plt+0x1494>
   12540:	b	1256c <__assert_fail@plt+0x14a8>
   12544:	add	r1, r0, #1
   12548:	str	r1, [r4, #4]
   1254c:	ldrb	r0, [r0]
   12550:	cmp	r0, #9
   12554:	beq	1256c <__assert_fail@plt+0x14a8>
   12558:	cmp	r0, #32
   1255c:	popne	{r4, r5, r6, r7, fp, pc}
   12560:	ldr	r0, [r5]
   12564:	add	r0, r0, #1
   12568:	b	12584 <__assert_fail@plt+0x14c0>
   1256c:	ldr	r0, [r5]
   12570:	strb	r7, [r6]
   12574:	asr	r1, r0, #31
   12578:	add	r0, r0, r1, lsr #29
   1257c:	bic	r0, r0, #7
   12580:	add	r0, r0, #8
   12584:	str	r0, [r5]
   12588:	ldmib	r4, {r0, r1}
   1258c:	cmp	r0, r1
   12590:	bcc	12544 <__assert_fail@plt+0x1480>
   12594:	mov	r0, r4
   12598:	bl	1104c <__uflow@plt>
   1259c:	cmp	r0, #9
   125a0:	bne	12558 <__assert_fail@plt+0x1494>
   125a4:	b	1256c <__assert_fail@plt+0x14a8>
   125a8:	movw	r1, #33136	; 0x8170
   125ac:	ldr	r2, [r5]
   125b0:	movt	r1, #2
   125b4:	ldr	r1, [r1]
   125b8:	cmp	r1, r2
   125bc:	movlt	r2, r1
   125c0:	movw	r1, #33168	; 0x8190
   125c4:	movt	r1, #2
   125c8:	str	r2, [r1]
   125cc:	pop	{r4, r5, r6, r7, fp, pc}
   125d0:	mov	r0, r4
   125d4:	bl	1104c <__uflow@plt>
   125d8:	b	1242c <__assert_fail@plt+0x1368>
   125dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e0:	add	fp, sp, #28
   125e4:	sub	sp, sp, #24
   125e8:	movw	r0, #33160	; 0x8188
   125ec:	mov	r5, #0
   125f0:	movw	lr, #38192	; 0x9530
   125f4:	movt	r0, #2
   125f8:	movt	lr, #2
   125fc:	ldr	r0, [r0]
   12600:	str	r5, [r0, #20]
   12604:	ldr	r1, [r0, #4]
   12608:	str	r1, [sp]
   1260c:	movw	r1, #33124	; 0x8164
   12610:	movt	r1, #2
   12614:	ldr	r3, [r1]
   12618:	sub	r1, r0, #28
   1261c:	cmp	r1, lr
   12620:	str	r3, [r0, #4]
   12624:	bcc	12834 <__assert_fail@plt+0x1770>
   12628:	movw	r7, #33172	; 0x8194
   1262c:	movw	r2, #33144	; 0x8178
   12630:	mov	r9, r0
   12634:	movt	r7, #2
   12638:	movt	r2, #2
   1263c:	ldr	r8, [r7]
   12640:	movw	r7, #33152	; 0x8180
   12644:	ldr	r2, [r2]
   12648:	movt	r7, #2
   1264c:	ldr	r7, [r7]
   12650:	str	r7, [sp, #8]
   12654:	movw	r7, #33180	; 0x819c
   12658:	movt	r7, #2
   1265c:	ldr	r7, [r7]
   12660:	str	r7, [sp, #4]
   12664:	b	12670 <__assert_fail@plt+0x15ac>
   12668:	movw	r1, #4900	; 0x1324
   1266c:	b	127ec <__assert_fail@plt+0x1728>
   12670:	mov	r4, r1
   12674:	cmp	r1, lr
   12678:	ldr	r1, [sp, #8]
   1267c:	ldr	r6, [sp, #4]
   12680:	mov	r7, r9
   12684:	mvn	ip, #-2147483648	; 0x80000000
   12688:	str	r5, [sp, #16]
   1268c:	str	r4, [sp, #20]
   12690:	moveq	r1, r6
   12694:	ldr	r6, [r9, #-24]	; 0xffffffe8
   12698:	cmp	r8, #0
   1269c:	add	sl, r1, r6
   126a0:	str	r6, [sp, #12]
   126a4:	sub	r6, r4, lr
   126a8:	mov	r1, #0
   126ac:	clz	r6, r6
   126b0:	movwgt	r1, #1
   126b4:	lsr	r6, r6, #5
   126b8:	and	r6, r6, r1
   126bc:	mov	r1, r5
   126c0:	add	lr, r0, r1
   126c4:	cmp	r1, #0
   126c8:	beq	12704 <__assert_fail@plt+0x1640>
   126cc:	ldr	r4, [lr, #24]
   126d0:	sub	r5, r2, sl
   126d4:	add	r5, r5, r5, lsl #2
   126d8:	lsl	r5, r5, #1
   126dc:	mul	r5, r5, r5
   126e0:	cmp	r4, r0
   126e4:	beq	12708 <__assert_fail@plt+0x1644>
   126e8:	ldr	r4, [lr, #16]
   126ec:	sub	r4, sl, r4
   126f0:	add	r4, r4, r4, lsl #2
   126f4:	lsl	r4, r4, #1
   126f8:	mul	r4, r4, r4
   126fc:	add	r5, r5, r4, lsr #1
   12700:	b	12708 <__assert_fail@plt+0x1644>
   12704:	mov	r5, #0
   12708:	ldr	r4, [lr, #20]
   1270c:	cmp	r6, #0
   12710:	add	r9, r4, r5
   12714:	beq	1272c <__assert_fail@plt+0x1668>
   12718:	sub	r4, sl, r8
   1271c:	add	r4, r4, r4, lsl #2
   12720:	lsl	r4, r4, #1
   12724:	mul	r4, r4, r4
   12728:	add	r9, r9, r4, lsr #1
   1272c:	cmp	r9, ip
   12730:	strlt	sl, [r7, #-12]
   12734:	strlt	lr, [r7, #-4]
   12738:	movlt	ip, r9
   1273c:	cmp	r1, #0
   12740:	beq	12760 <__assert_fail@plt+0x169c>
   12744:	ldr	r4, [lr, #-20]	; 0xffffffec
   12748:	ldr	r5, [lr, #4]
   1274c:	add	r1, r1, #28
   12750:	add	r4, r4, sl
   12754:	add	sl, r4, r5
   12758:	cmp	sl, r3
   1275c:	blt	126c0 <__assert_fail@plt+0x15fc>
   12760:	ldr	r9, [sp, #20]
   12764:	movw	r4, #38192	; 0x9530
   12768:	movt	r4, #2
   1276c:	mov	lr, r4
   12770:	cmp	r9, r4
   12774:	bls	127cc <__assert_fail@plt+0x1708>
   12778:	ldrb	r6, [r7, #-44]	; 0xffffffd4
   1277c:	tst	r6, #2
   12780:	bne	127d8 <__assert_fail@plt+0x1714>
   12784:	ldr	r5, [sp, #16]
   12788:	movw	r1, #3300	; 0xce4
   1278c:	tst	r6, #4
   12790:	bne	127ec <__assert_fail@plt+0x1728>
   12794:	add	r1, lr, #28
   12798:	cmp	r9, r1
   1279c:	bls	12668 <__assert_fail@plt+0x15a4>
   127a0:	ldrb	r1, [r7, #-72]	; 0xffffffb8
   127a4:	tst	r1, #8
   127a8:	movw	r1, #4900	; 0x1324
   127ac:	beq	127ec <__assert_fail@plt+0x1728>
   127b0:	ldr	r1, [r7, #-52]	; 0xffffffcc
   127b4:	movw	r6, #40000	; 0x9c40
   127b8:	add	r1, r1, #2
   127bc:	sdiv	r1, r6, r1
   127c0:	movw	r6, #4900	; 0x1324
   127c4:	add	r1, r1, r6
   127c8:	b	127ec <__assert_fail@plt+0x1728>
   127cc:	ldr	r5, [sp, #16]
   127d0:	movw	r1, #4900	; 0x1324
   127d4:	b	127ec <__assert_fail@plt+0x1728>
   127d8:	ldr	r5, [sp, #16]
   127dc:	tst	r6, #8
   127e0:	mov	r1, #2400	; 0x960
   127e4:	movweq	r1, #37220	; 0x9164
   127e8:	movteq	r1, #5
   127ec:	ldrb	r6, [r7, #-16]
   127f0:	tst	r6, #1
   127f4:	bne	12818 <__assert_fail@plt+0x1754>
   127f8:	tst	r6, #8
   127fc:	beq	1281c <__assert_fail@plt+0x1758>
   12800:	ldr	r4, [sp, #12]
   12804:	add	r6, r4, #2
   12808:	movw	r4, #22500	; 0x57e4
   1280c:	sdiv	r6, r4, r6
   12810:	add	r1, r6, r1
   12814:	b	1281c <__assert_fail@plt+0x1758>
   12818:	sub	r1, r1, #1600	; 0x640
   1281c:	add	r1, r1, ip
   12820:	sub	r5, r5, #28
   12824:	str	r1, [r7, #-8]
   12828:	sub	r1, r9, #28
   1282c:	cmp	r1, lr
   12830:	bcs	12670 <__assert_fail@plt+0x15ac>
   12834:	ldr	r1, [sp]
   12838:	str	r1, [r0, #4]
   1283c:	sub	sp, fp, #28
   12840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12844:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12848:	add	fp, sp, #28
   1284c:	sub	sp, sp, #20
   12850:	movw	r9, #33160	; 0x8188
   12854:	movw	r2, #33184	; 0x81a0
   12858:	mov	r5, r1
   1285c:	mov	r4, r0
   12860:	movw	r1, #5000	; 0x1388
   12864:	movw	r8, #38184	; 0x9528
   12868:	movw	sl, #33164	; 0x818c
   1286c:	movt	r9, #2
   12870:	movt	r2, #2
   12874:	movt	r8, #2
   12878:	movt	sl, #2
   1287c:	ldr	r0, [r9]
   12880:	add	r6, r2, r1
   12884:	movw	r2, #38192	; 0x9530
   12888:	movw	r1, #27944	; 0x6d28
   1288c:	movt	r2, #2
   12890:	add	r1, r2, r1
   12894:	stm	sp, {r1, r6}
   12898:	ldr	r1, [r8]
   1289c:	str	r1, [r0]
   128a0:	cmp	r1, r6
   128a4:	bne	12958 <__assert_fail@plt+0x1894>
   128a8:	b	128b8 <__assert_fail@plt+0x17f4>
   128ac:	ldr	r1, [r8]
   128b0:	cmp	r1, r6
   128b4:	bne	12958 <__assert_fail@plt+0x1894>
   128b8:	movw	r0, #33121	; 0x8161
   128bc:	movt	r0, #2
   128c0:	ldrb	r0, [r0]
   128c4:	cmp	r0, #1
   128c8:	beq	12938 <__assert_fail@plt+0x1874>
   128cc:	movw	r0, #33123	; 0x8163
   128d0:	movt	r0, #2
   128d4:	ldrb	r0, [r0]
   128d8:	cmp	r0, #1
   128dc:	bne	128e8 <__assert_fail@plt+0x1824>
   128e0:	ldr	r0, [sl]
   128e4:	b	12944 <__assert_fail@plt+0x1880>
   128e8:	movw	r0, #33122	; 0x8162
   128ec:	movt	r0, #2
   128f0:	ldrb	r0, [r0]
   128f4:	cmp	r0, #1
   128f8:	bne	12938 <__assert_fail@plt+0x1874>
   128fc:	movw	r1, #33180	; 0x819c
   12900:	ldr	r0, [sl]
   12904:	movt	r1, #2
   12908:	ldr	r1, [r1]
   1290c:	cmp	r0, r1
   12910:	bne	12944 <__assert_fail@plt+0x1880>
   12914:	movw	r1, #33152	; 0x8180
   12918:	movt	r1, #2
   1291c:	ldr	r1, [r1]
   12920:	cmp	r1, r0
   12924:	bne	12950 <__assert_fail@plt+0x188c>
   12928:	cmp	r0, #0
   1292c:	mov	r0, #0
   12930:	movweq	r0, #3
   12934:	b	12944 <__assert_fail@plt+0x1880>
   12938:	movw	r0, #33180	; 0x819c
   1293c:	movt	r0, #2
   12940:	ldr	r0, [r0]
   12944:	movw	r1, #33152	; 0x8180
   12948:	movt	r1, #2
   1294c:	str	r0, [r1]
   12950:	bl	12c8c <__assert_fail@plt+0x1bc8>
   12954:	ldr	r1, [r8]
   12958:	add	r0, r1, #1
   1295c:	str	r0, [r8]
   12960:	strb	r5, [r1]
   12964:	ldmib	r4, {r0, r1}
   12968:	cmp	r0, r1
   1296c:	bcs	1299c <__assert_fail@plt+0x18d8>
   12970:	add	r1, r0, #1
   12974:	str	r1, [r4, #4]
   12978:	ldrb	r5, [r0]
   1297c:	bl	10fb0 <__ctype_b_loc@plt>
   12980:	mov	r7, r0
   12984:	ldr	r0, [r0]
   12988:	add	r0, r0, r5, lsl #1
   1298c:	ldrb	r0, [r0, #1]
   12990:	tst	r0, #32
   12994:	beq	128ac <__assert_fail@plt+0x17e8>
   12998:	b	129bc <__assert_fail@plt+0x18f8>
   1299c:	mov	r0, r4
   129a0:	bl	1104c <__uflow@plt>
   129a4:	mov	r5, r0
   129a8:	cmn	r0, #1
   129ac:	bne	1297c <__assert_fail@plt+0x18b8>
   129b0:	mvn	r5, #0
   129b4:	bl	10fb0 <__ctype_b_loc@plt>
   129b8:	mov	r7, r0
   129bc:	ldr	sl, [r9]
   129c0:	ldr	r6, [r8]
   129c4:	movw	r0, #33164	; 0x818c
   129c8:	movt	r0, #2
   129cc:	mov	r1, r0
   129d0:	ldr	r9, [sl]
   129d4:	sub	r2, r6, r9
   129d8:	str	r2, [sl, #4]
   129dc:	str	r2, [sp, #8]
   129e0:	ldr	r0, [r0]
   129e4:	add	r0, r0, r2
   129e8:	mov	r2, #6
   129ec:	str	r0, [r1]
   129f0:	str	r0, [sp, #16]
   129f4:	ldrb	r0, [r6, #-1]!
   129f8:	ldrb	r1, [r9]
   129fc:	str	r0, [sp, #12]
   12a00:	movw	r0, #30847	; 0x787f
   12a04:	movt	r0, #1
   12a08:	bl	11028 <memchr@plt>
   12a0c:	ldrb	r1, [sl, #12]
   12a10:	cmp	r0, #0
   12a14:	ldr	r2, [sp, #12]
   12a18:	str	sl, [sp, #12]
   12a1c:	movwne	r0, #1
   12a20:	bic	r1, r1, #1
   12a24:	orr	r1, r1, r0
   12a28:	strb	r1, [sl, #12]
   12a2c:	ldr	r0, [r7]
   12a30:	ldrb	r0, [r0, r2, lsl #1]
   12a34:	lsr	r0, r0, #2
   12a38:	bfi	r1, r0, #2, #1
   12a3c:	ldr	r0, [sp, #8]
   12a40:	strb	r1, [sl, #12]
   12a44:	movw	sl, #33164	; 0x818c
   12a48:	mov	r7, r1
   12a4c:	movt	sl, #2
   12a50:	cmp	r0, #2
   12a54:	blt	12a7c <__assert_fail@plt+0x19b8>
   12a58:	ldrb	r1, [r6]
   12a5c:	movw	r0, #30853	; 0x7885
   12a60:	mov	r2, #5
   12a64:	movt	r0, #1
   12a68:	bl	11028 <memchr@plt>
   12a6c:	cmp	r0, #0
   12a70:	subne	r6, r6, #1
   12a74:	cmpne	r6, r9
   12a78:	bhi	12a58 <__assert_fail@plt+0x1994>
   12a7c:	ldrb	r1, [r6]
   12a80:	movw	r0, #30858	; 0x788a
   12a84:	mov	r2, #4
   12a88:	movt	r0, #1
   12a8c:	bl	11028 <memchr@plt>
   12a90:	cmp	r0, #0
   12a94:	and	r1, r7, #253	; 0xfd
   12a98:	ldr	r6, [sp, #4]
   12a9c:	movw	r9, #33160	; 0x8188
   12aa0:	movw	r2, #33148	; 0x817c
   12aa4:	movwne	r0, #1
   12aa8:	movt	r9, #2
   12aac:	movt	r2, #2
   12ab0:	orr	r0, r1, r0, lsl #1
   12ab4:	ldr	r1, [sp, #12]
   12ab8:	strb	r0, [r1, #12]
   12abc:	cmp	r5, #9
   12ac0:	bne	12adc <__assert_fail@plt+0x1a18>
   12ac4:	b	12af0 <__assert_fail@plt+0x1a2c>
   12ac8:	add	r1, r0, #1
   12acc:	str	r1, [r4, #4]
   12ad0:	ldrb	r5, [r0]
   12ad4:	cmp	r5, #9
   12ad8:	beq	12af0 <__assert_fail@plt+0x1a2c>
   12adc:	cmp	r5, #32
   12ae0:	bne	12b3c <__assert_fail@plt+0x1a78>
   12ae4:	ldr	r0, [sl]
   12ae8:	add	r0, r0, #1
   12aec:	b	12b0c <__assert_fail@plt+0x1a48>
   12af0:	mov	r0, #1
   12af4:	strb	r0, [r2]
   12af8:	ldr	r0, [sl]
   12afc:	asr	r1, r0, #31
   12b00:	add	r0, r0, r1, lsr #29
   12b04:	bic	r0, r0, #7
   12b08:	add	r0, r0, #8
   12b0c:	str	r0, [sl]
   12b10:	ldmib	r4, {r0, r1}
   12b14:	cmp	r0, r1
   12b18:	bcc	12ac8 <__assert_fail@plt+0x1a04>
   12b1c:	mov	r0, r4
   12b20:	bl	1104c <__uflow@plt>
   12b24:	movw	r2, #33148	; 0x817c
   12b28:	mov	r5, r0
   12b2c:	movt	r2, #2
   12b30:	cmp	r5, #9
   12b34:	bne	12adc <__assert_fail@plt+0x1a18>
   12b38:	b	12af0 <__assert_fail@plt+0x1a2c>
   12b3c:	ldr	r0, [sl]
   12b40:	ldr	r1, [sp, #16]
   12b44:	cmn	r5, #1
   12b48:	sub	r3, r0, r1
   12b4c:	ldr	r1, [r9]
   12b50:	str	r3, [r1, #8]
   12b54:	ldrb	r2, [r1, #12]
   12b58:	beq	12b70 <__assert_fail@plt+0x1aac>
   12b5c:	mov	r7, #0
   12b60:	tst	r2, #2
   12b64:	beq	12b88 <__assert_fail@plt+0x1ac4>
   12b68:	cmp	r5, #10
   12b6c:	bne	12b7c <__assert_fail@plt+0x1ab8>
   12b70:	orr	r2, r2, #8
   12b74:	strb	r2, [r1, #12]
   12b78:	b	12bb0 <__assert_fail@plt+0x1aec>
   12b7c:	cmp	r3, #1
   12b80:	mov	r7, #0
   12b84:	movwgt	r7, #1
   12b88:	and	r2, r2, #247	; 0xf7
   12b8c:	cmp	r5, #10
   12b90:	orr	r2, r2, r7, lsl #3
   12b94:	strb	r2, [r1, #12]
   12b98:	beq	12bb0 <__assert_fail@plt+0x1aec>
   12b9c:	movw	r3, #33120	; 0x8160
   12ba0:	movt	r3, #2
   12ba4:	ldrb	r3, [r3]
   12ba8:	cmp	r3, #1
   12bac:	bne	12bc0 <__assert_fail@plt+0x1afc>
   12bb0:	tst	r2, #8
   12bb4:	mov	r2, #2
   12bb8:	movweq	r2, #1
   12bbc:	str	r2, [r1, #8]
   12bc0:	ldr	r2, [sp]
   12bc4:	cmp	r1, r2
   12bc8:	bne	12c68 <__assert_fail@plt+0x1ba4>
   12bcc:	movw	r1, #33121	; 0x8161
   12bd0:	movt	r1, #2
   12bd4:	ldrb	r1, [r1]
   12bd8:	cmp	r1, #1
   12bdc:	bne	12bf0 <__assert_fail@plt+0x1b2c>
   12be0:	movw	r0, #33180	; 0x819c
   12be4:	movt	r0, #2
   12be8:	ldr	r0, [r0]
   12bec:	b	12c54 <__assert_fail@plt+0x1b90>
   12bf0:	movw	r1, #33123	; 0x8163
   12bf4:	movt	r1, #2
   12bf8:	ldrb	r1, [r1]
   12bfc:	cmp	r1, #0
   12c00:	bne	12c54 <__assert_fail@plt+0x1b90>
   12c04:	movw	r2, #33122	; 0x8162
   12c08:	movw	r1, #33180	; 0x819c
   12c0c:	movt	r2, #2
   12c10:	movt	r1, #2
   12c14:	ldrb	r2, [r2]
   12c18:	ldr	r1, [r1]
   12c1c:	cmp	r2, #1
   12c20:	bne	12c50 <__assert_fail@plt+0x1b8c>
   12c24:	cmp	r0, r1
   12c28:	bne	12c54 <__assert_fail@plt+0x1b90>
   12c2c:	movw	r1, #33152	; 0x8180
   12c30:	movt	r1, #2
   12c34:	ldr	r1, [r1]
   12c38:	cmp	r1, r0
   12c3c:	bne	12c60 <__assert_fail@plt+0x1b9c>
   12c40:	cmp	r0, #0
   12c44:	mov	r0, #0
   12c48:	movweq	r0, #3
   12c4c:	b	12c54 <__assert_fail@plt+0x1b90>
   12c50:	mov	r0, r1
   12c54:	movw	r1, #33152	; 0x8180
   12c58:	movt	r1, #2
   12c5c:	str	r0, [r1]
   12c60:	bl	12c8c <__assert_fail@plt+0x1bc8>
   12c64:	ldr	r1, [r9]
   12c68:	cmp	r5, #10
   12c6c:	add	r0, r1, #28
   12c70:	cmnne	r5, #1
   12c74:	str	r0, [r9]
   12c78:	bne	12898 <__assert_fail@plt+0x17d4>
   12c7c:	mov	r0, r4
   12c80:	sub	sp, fp, #28
   12c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c88:	b	123f8 <__assert_fail@plt+0x1334>
   12c8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c90:	add	fp, sp, #24
   12c94:	movw	r9, #33160	; 0x8188
   12c98:	movw	r8, #38192	; 0x9530
   12c9c:	movt	r9, #2
   12ca0:	movt	r8, #2
   12ca4:	ldr	r6, [r9]
   12ca8:	cmp	r6, r8
   12cac:	beq	12d0c <__assert_fail@plt+0x1c48>
   12cb0:	bl	125dc <__assert_fail@plt+0x1518>
   12cb4:	ldr	r4, [r8, #24]
   12cb8:	cmp	r4, r6
   12cbc:	beq	12d44 <__assert_fail@plt+0x1c80>
   12cc0:	ldr	r3, [r4, #20]
   12cc4:	mvn	r2, #-2147483648	; 0x80000000
   12cc8:	mov	r5, r6
   12ccc:	mov	r1, r2
   12cd0:	ldr	r0, [r4, #24]
   12cd4:	ldr	r7, [r0, #20]
   12cd8:	sub	r3, r3, r7
   12cdc:	cmp	r3, r2
   12ce0:	movlt	r1, r3
   12ce4:	cmn	r1, #-2147483639	; 0x80000009
   12ce8:	addlt	r1, r1, #9
   12cec:	cmp	r3, r2
   12cf0:	mov	r3, r7
   12cf4:	movlt	r5, r4
   12cf8:	cmp	r0, r6
   12cfc:	mov	r4, r0
   12d00:	mov	r2, r1
   12d04:	bne	12cd0 <__assert_fail@plt+0x1c0c>
   12d08:	b	12d48 <__assert_fail@plt+0x1c84>
   12d0c:	movw	r5, #38184	; 0x9528
   12d10:	movw	r4, #33184	; 0x81a0
   12d14:	mov	r1, #1
   12d18:	movt	r5, #2
   12d1c:	movt	r4, #2
   12d20:	ldr	r0, [r5]
   12d24:	sub	r2, r0, r4
   12d28:	movw	r0, #33108	; 0x8154
   12d2c:	movt	r0, #2
   12d30:	ldr	r3, [r0]
   12d34:	mov	r0, r4
   12d38:	bl	10ee4 <fwrite_unlocked@plt>
   12d3c:	str	r4, [r5]
   12d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12d44:	mov	r5, r6
   12d48:	movw	r0, #33180	; 0x819c
   12d4c:	movt	r0, #2
   12d50:	ldr	r1, [r0]
   12d54:	mov	r0, r8
   12d58:	bl	12e24 <__assert_fail@plt+0x1d60>
   12d5c:	ldr	r6, [r8, #24]
   12d60:	cmp	r6, r5
   12d64:	beq	12d88 <__assert_fail@plt+0x1cc4>
   12d68:	movw	r4, #33152	; 0x8180
   12d6c:	movt	r4, #2
   12d70:	ldr	r1, [r4]
   12d74:	mov	r0, r6
   12d78:	bl	12e24 <__assert_fail@plt+0x1d60>
   12d7c:	ldr	r6, [r6, #24]
   12d80:	cmp	r6, r5
   12d84:	bne	12d70 <__assert_fail@plt+0x1cac>
   12d88:	movw	r4, #38184	; 0x9528
   12d8c:	ldr	r1, [r5]
   12d90:	movw	r6, #33184	; 0x81a0
   12d94:	movt	r4, #2
   12d98:	movt	r6, #2
   12d9c:	ldr	r7, [r4]
   12da0:	mov	r0, r6
   12da4:	sub	r2, r7, r1
   12da8:	bl	10e9c <memmove@plt>
   12dac:	ldr	r0, [r5]
   12db0:	sub	r0, r6, r0
   12db4:	ldr	r6, [r9]
   12db8:	add	r1, r7, r0
   12dbc:	str	r1, [r4]
   12dc0:	cmp	r5, r6
   12dc4:	bhi	12de4 <__assert_fail@plt+0x1d20>
   12dc8:	mov	r1, r5
   12dcc:	ldr	r2, [r1]
   12dd0:	add	r2, r2, r0
   12dd4:	str	r2, [r1], #28
   12dd8:	ldr	r6, [r9]
   12ddc:	cmp	r1, r6
   12de0:	bls	12dcc <__assert_fail@plt+0x1d08>
   12de4:	rsb	r0, r5, #28
   12de8:	mov	r1, r5
   12dec:	add	r2, r0, r6
   12df0:	mov	r0, r8
   12df4:	bl	10e9c <memmove@plt>
   12df8:	movw	r1, #56173	; 0xdb6d
   12dfc:	sub	r0, r5, r8
   12e00:	movt	r1, #28086	; 0x6db6
   12e04:	smmul	r1, r0, r1
   12e08:	sub	r0, r1, r0
   12e0c:	asr	r1, r0, #4
   12e10:	add	r0, r1, r0, lsr #31
   12e14:	rsb	r0, r0, r0, lsl #3
   12e18:	add	r0, r6, r0, lsl #2
   12e1c:	str	r0, [r9]
   12e20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e28:	add	fp, sp, #28
   12e2c:	sub	sp, sp, #4
   12e30:	movw	r5, #33148	; 0x817c
   12e34:	str	r0, [sp]
   12e38:	movw	r0, #33176	; 0x8198
   12e3c:	movw	sl, #656	; 0x290
   12e40:	mov	r6, r1
   12e44:	mov	r1, #0
   12e48:	movt	r0, #2
   12e4c:	movt	r5, #2
   12e50:	movt	sl, #3
   12e54:	ldr	r4, [r0]
   12e58:	ldrb	r0, [r5]
   12e5c:	str	r1, [sl]
   12e60:	cmp	r0, #1
   12e64:	bne	12edc <__assert_fail@plt+0x1e18>
   12e68:	cmp	r4, #8
   12e6c:	blt	12edc <__assert_fail@plt+0x1e18>
   12e70:	asr	r0, r4, #31
   12e74:	movw	r8, #33108	; 0x8154
   12e78:	mov	r1, #0
   12e7c:	mov	r9, #9
   12e80:	add	r0, r4, r0, lsr #29
   12e84:	movt	r8, #2
   12e88:	bic	r7, r0, #7
   12e8c:	b	12ea0 <__assert_fail@plt+0x1ddc>
   12e90:	mov	r1, #9
   12e94:	bl	11058 <__overflow@plt>
   12e98:	ldr	r1, [sl]
   12e9c:	b	12ec0 <__assert_fail@plt+0x1dfc>
   12ea0:	ldr	r0, [r8]
   12ea4:	ldr	r2, [r0, #20]
   12ea8:	ldr	r3, [r0, #24]
   12eac:	cmp	r2, r3
   12eb0:	bcs	12e90 <__assert_fail@plt+0x1dcc>
   12eb4:	add	r3, r2, #1
   12eb8:	str	r3, [r0, #20]
   12ebc:	strb	r9, [r2]
   12ec0:	asr	r0, r1, #31
   12ec4:	add	r0, r1, r0, lsr #29
   12ec8:	bic	r0, r0, #7
   12ecc:	add	r1, r0, #8
   12ed0:	cmp	r1, r7
   12ed4:	str	r1, [sl]
   12ed8:	blt	12ea0 <__assert_fail@plt+0x1ddc>
   12edc:	cmp	r1, r4
   12ee0:	bge	12f34 <__assert_fail@plt+0x1e70>
   12ee4:	movw	r7, #33108	; 0x8154
   12ee8:	mov	r5, #32
   12eec:	movt	r7, #2
   12ef0:	b	12f04 <__assert_fail@plt+0x1e40>
   12ef4:	mov	r1, #32
   12ef8:	bl	11058 <__overflow@plt>
   12efc:	ldr	r1, [sl]
   12f00:	b	12f24 <__assert_fail@plt+0x1e60>
   12f04:	ldr	r0, [r7]
   12f08:	ldr	r2, [r0, #20]
   12f0c:	ldr	r3, [r0, #24]
   12f10:	cmp	r2, r3
   12f14:	bcs	12ef4 <__assert_fail@plt+0x1e30>
   12f18:	add	r3, r2, #1
   12f1c:	str	r3, [r0, #20]
   12f20:	strb	r5, [r2]
   12f24:	add	r1, r1, #1
   12f28:	cmp	r1, r4
   12f2c:	str	r1, [sl]
   12f30:	blt	12f04 <__assert_fail@plt+0x1e40>
   12f34:	movw	r7, #33108	; 0x8154
   12f38:	movw	r0, #33128	; 0x8168
   12f3c:	movt	r0, #2
   12f40:	movt	r7, #2
   12f44:	ldr	r1, [r7]
   12f48:	ldr	r0, [r0]
   12f4c:	bl	10e60 <fputs_unlocked@plt>
   12f50:	movw	r0, #33140	; 0x8174
   12f54:	ldr	r1, [sl]
   12f58:	movw	lr, #33148	; 0x817c
   12f5c:	movt	r0, #2
   12f60:	movt	lr, #2
   12f64:	ldr	r0, [r0]
   12f68:	add	r1, r1, r0
   12f6c:	ldrb	r0, [lr]
   12f70:	str	r1, [sl]
   12f74:	cmp	r0, #1
   12f78:	bne	12fa8 <__assert_fail@plt+0x1ee4>
   12f7c:	asr	r0, r6, #31
   12f80:	add	r0, r6, r0, lsr #29
   12f84:	bic	r4, r0, #7
   12f88:	cmp	r1, r4
   12f8c:	bge	12fa8 <__assert_fail@plt+0x1ee4>
   12f90:	ldr	ip, [sp]
   12f94:	add	r0, r1, #1
   12f98:	cmp	r0, r4
   12f9c:	bge	13010 <__assert_fail@plt+0x1f4c>
   12fa0:	mov	r8, #9
   12fa4:	b	12fd4 <__assert_fail@plt+0x1f10>
   12fa8:	ldr	ip, [sp]
   12fac:	cmp	r1, r6
   12fb0:	blt	13018 <__assert_fail@plt+0x1f54>
   12fb4:	b	1306c <__assert_fail@plt+0x1fa8>
   12fb8:	mov	r1, #9
   12fbc:	bl	11058 <__overflow@plt>
   12fc0:	ldr	ip, [sp]
   12fc4:	ldr	r1, [sl]
   12fc8:	movw	lr, #33148	; 0x817c
   12fcc:	movt	lr, #2
   12fd0:	b	12ff4 <__assert_fail@plt+0x1f30>
   12fd4:	ldr	r0, [r7]
   12fd8:	ldr	r2, [r0, #20]
   12fdc:	ldr	r3, [r0, #24]
   12fe0:	cmp	r2, r3
   12fe4:	bcs	12fb8 <__assert_fail@plt+0x1ef4>
   12fe8:	add	r3, r2, #1
   12fec:	str	r3, [r0, #20]
   12ff0:	strb	r8, [r2]
   12ff4:	asr	r0, r1, #31
   12ff8:	add	r0, r1, r0, lsr #29
   12ffc:	bic	r0, r0, #7
   13000:	add	r1, r0, #8
   13004:	cmp	r1, r4
   13008:	str	r1, [sl]
   1300c:	blt	12fd4 <__assert_fail@plt+0x1f10>
   13010:	cmp	r1, r6
   13014:	bge	1306c <__assert_fail@plt+0x1fa8>
   13018:	mov	r4, #32
   1301c:	b	1303c <__assert_fail@plt+0x1f78>
   13020:	mov	r1, #32
   13024:	bl	11058 <__overflow@plt>
   13028:	ldr	ip, [sp]
   1302c:	ldr	r1, [sl]
   13030:	movw	lr, #33148	; 0x817c
   13034:	movt	lr, #2
   13038:	b	1305c <__assert_fail@plt+0x1f98>
   1303c:	ldr	r0, [r7]
   13040:	ldr	r2, [r0, #20]
   13044:	ldr	r3, [r0, #24]
   13048:	cmp	r2, r3
   1304c:	bcs	13020 <__assert_fail@plt+0x1f5c>
   13050:	add	r3, r2, #1
   13054:	str	r3, [r0, #20]
   13058:	strb	r4, [r2]
   1305c:	add	r1, r1, #1
   13060:	cmp	r1, r6
   13064:	str	r1, [sl]
   13068:	blt	1303c <__assert_fail@plt+0x1f78>
   1306c:	ldr	r0, [ip, #24]
   13070:	mov	r6, #9
   13074:	mov	r4, #32
   13078:	sub	r0, r0, #28
   1307c:	str	r0, [sp]
   13080:	b	13088 <__assert_fail@plt+0x1fc4>
   13084:	add	ip, ip, #28
   13088:	ldr	r5, [ip, #4]
   1308c:	cmp	r5, #0
   13090:	beq	130f4 <__assert_fail@plt+0x2030>
   13094:	ldr	r6, [ip]
   13098:	ldr	r0, [r7]
   1309c:	ldrb	r1, [r6], #1
   130a0:	ldr	r2, [r0, #20]
   130a4:	ldr	r3, [r0, #24]
   130a8:	cmp	r2, r3
   130ac:	bcs	130c8 <__assert_fail@plt+0x2004>
   130b0:	add	r3, r2, #1
   130b4:	str	r3, [r0, #20]
   130b8:	strb	r1, [r2]
   130bc:	subs	r5, r5, #1
   130c0:	bne	13098 <__assert_fail@plt+0x1fd4>
   130c4:	b	130e4 <__assert_fail@plt+0x2020>
   130c8:	mov	r8, ip
   130cc:	bl	11058 <__overflow@plt>
   130d0:	movw	lr, #33148	; 0x817c
   130d4:	mov	ip, r8
   130d8:	movt	lr, #2
   130dc:	subs	r5, r5, #1
   130e0:	bne	13098 <__assert_fail@plt+0x1fd4>
   130e4:	ldr	r1, [sl]
   130e8:	ldr	r0, [ip, #4]
   130ec:	mov	r6, #9
   130f0:	b	130f8 <__assert_fail@plt+0x2034>
   130f4:	mov	r0, #0
   130f8:	add	r1, r1, r0
   130fc:	ldr	r0, [sp]
   13100:	str	r1, [sl]
   13104:	cmp	ip, r0
   13108:	beq	131f0 <__assert_fail@plt+0x212c>
   1310c:	ldr	r0, [ip, #8]
   13110:	add	r8, r0, r1
   13114:	ldrb	r0, [lr]
   13118:	cmp	r0, #1
   1311c:	bne	131a4 <__assert_fail@plt+0x20e0>
   13120:	asr	r0, r8, #31
   13124:	add	r0, r8, r0, lsr #29
   13128:	bic	r9, r0, #7
   1312c:	add	r0, r1, #1
   13130:	cmp	r0, r9
   13134:	blt	13150 <__assert_fail@plt+0x208c>
   13138:	b	131a4 <__assert_fail@plt+0x20e0>
   1313c:	asr	r0, r1, #31
   13140:	add	r0, r1, r0, lsr #29
   13144:	bic	r0, r0, #7
   13148:	add	r1, r0, #8
   1314c:	str	r1, [sl]
   13150:	cmp	r1, r9
   13154:	bge	131a4 <__assert_fail@plt+0x20e0>
   13158:	ldr	r0, [r7]
   1315c:	ldr	r2, [r0, #20]
   13160:	ldr	r3, [r0, #24]
   13164:	cmp	r2, r3
   13168:	bcs	1317c <__assert_fail@plt+0x20b8>
   1316c:	add	r3, r2, #1
   13170:	str	r3, [r0, #20]
   13174:	strb	r6, [r2]
   13178:	b	1313c <__assert_fail@plt+0x2078>
   1317c:	mov	r1, #9
   13180:	mov	r5, ip
   13184:	bl	11058 <__overflow@plt>
   13188:	ldr	r1, [sl]
   1318c:	movw	lr, #33148	; 0x817c
   13190:	mov	ip, r5
   13194:	movt	lr, #2
   13198:	b	1313c <__assert_fail@plt+0x2078>
   1319c:	add	r1, r1, #1
   131a0:	str	r1, [sl]
   131a4:	cmp	r1, r8
   131a8:	bge	13084 <__assert_fail@plt+0x1fc0>
   131ac:	ldr	r0, [r7]
   131b0:	ldr	r2, [r0, #20]
   131b4:	ldr	r3, [r0, #24]
   131b8:	cmp	r2, r3
   131bc:	bcs	131d0 <__assert_fail@plt+0x210c>
   131c0:	add	r3, r2, #1
   131c4:	str	r3, [r0, #20]
   131c8:	strb	r4, [r2]
   131cc:	b	1319c <__assert_fail@plt+0x20d8>
   131d0:	mov	r1, #32
   131d4:	mov	r5, ip
   131d8:	bl	11058 <__overflow@plt>
   131dc:	ldr	r1, [sl]
   131e0:	movw	lr, #33148	; 0x817c
   131e4:	mov	ip, r5
   131e8:	movt	lr, #2
   131ec:	b	1319c <__assert_fail@plt+0x20d8>
   131f0:	movw	r0, #33172	; 0x8194
   131f4:	movt	r0, #2
   131f8:	str	r1, [r0]
   131fc:	ldr	r0, [r7]
   13200:	ldr	r1, [r0, #20]
   13204:	ldr	r2, [r0, #24]
   13208:	cmp	r1, r2
   1320c:	addcc	r2, r1, #1
   13210:	strcc	r2, [r0, #20]
   13214:	movcc	r0, #10
   13218:	strbcc	r0, [r1]
   1321c:	subcc	sp, fp, #28
   13220:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13224:	mov	r1, #10
   13228:	sub	sp, fp, #28
   1322c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13230:	b	11058 <__overflow@plt>
   13234:	movw	r1, #660	; 0x294
   13238:	movt	r1, #3
   1323c:	str	r0, [r1]
   13240:	bx	lr
   13244:	movw	r1, #664	; 0x298
   13248:	movt	r1, #3
   1324c:	strb	r0, [r1]
   13250:	bx	lr
   13254:	push	{r4, r5, r6, sl, fp, lr}
   13258:	add	fp, sp, #16
   1325c:	sub	sp, sp, #8
   13260:	movw	r0, #33108	; 0x8154
   13264:	movt	r0, #2
   13268:	ldr	r0, [r0]
   1326c:	bl	16d54 <__assert_fail@plt+0x5c90>
   13270:	cmp	r0, #0
   13274:	beq	1329c <__assert_fail@plt+0x21d8>
   13278:	movw	r0, #664	; 0x298
   1327c:	movt	r0, #3
   13280:	ldrb	r0, [r0]
   13284:	cmp	r0, #0
   13288:	beq	132bc <__assert_fail@plt+0x21f8>
   1328c:	bl	10fe0 <__errno_location@plt>
   13290:	ldr	r0, [r0]
   13294:	cmp	r0, #32
   13298:	bne	132bc <__assert_fail@plt+0x21f8>
   1329c:	movw	r0, #33096	; 0x8148
   132a0:	movt	r0, #2
   132a4:	ldr	r0, [r0]
   132a8:	bl	16d54 <__assert_fail@plt+0x5c90>
   132ac:	cmp	r0, #0
   132b0:	subeq	sp, fp, #16
   132b4:	popeq	{r4, r5, r6, sl, fp, pc}
   132b8:	b	1332c <__assert_fail@plt+0x2268>
   132bc:	movw	r1, #31095	; 0x7977
   132c0:	mov	r0, #0
   132c4:	mov	r2, #5
   132c8:	movt	r1, #1
   132cc:	bl	10efc <dcgettext@plt>
   132d0:	mov	r4, r0
   132d4:	movw	r0, #660	; 0x294
   132d8:	movt	r0, #3
   132dc:	ldr	r6, [r0]
   132e0:	bl	10fe0 <__errno_location@plt>
   132e4:	ldr	r5, [r0]
   132e8:	cmp	r6, #0
   132ec:	bne	13308 <__assert_fail@plt+0x2244>
   132f0:	movw	r2, #31111	; 0x7987
   132f4:	mov	r0, #0
   132f8:	mov	r1, r5
   132fc:	mov	r3, r4
   13300:	movt	r2, #1
   13304:	b	13328 <__assert_fail@plt+0x2264>
   13308:	mov	r0, r6
   1330c:	bl	14dc4 <__assert_fail@plt+0x3d00>
   13310:	movw	r2, #31107	; 0x7983
   13314:	mov	r3, r0
   13318:	str	r4, [sp]
   1331c:	mov	r0, #0
   13320:	mov	r1, r5
   13324:	movt	r2, #1
   13328:	bl	10f68 <error@plt>
   1332c:	movw	r0, #33012	; 0x80f4
   13330:	movt	r0, #2
   13334:	ldr	r0, [r0]
   13338:	bl	10eb4 <_exit@plt>
   1333c:	b	10e84 <posix_fadvise64@plt>
   13340:	cmp	r0, #0
   13344:	bxeq	lr
   13348:	push	{r4, sl, fp, lr}
   1334c:	add	fp, sp, #8
   13350:	sub	sp, sp, #16
   13354:	mov	r4, r1
   13358:	bl	11010 <fileno@plt>
   1335c:	mov	r1, #0
   13360:	mov	r2, #0
   13364:	mov	r3, #0
   13368:	str	r1, [sp]
   1336c:	stmib	sp, {r1, r4}
   13370:	bl	10e84 <posix_fadvise64@plt>
   13374:	sub	sp, fp, #8
   13378:	pop	{r4, sl, fp, pc}
   1337c:	push	{r4, r5, r6, sl, fp, lr}
   13380:	add	fp, sp, #16
   13384:	sub	sp, sp, #8
   13388:	mov	r4, r0
   1338c:	bl	11010 <fileno@plt>
   13390:	cmn	r0, #1
   13394:	ble	13408 <__assert_fail@plt+0x2344>
   13398:	mov	r0, r4
   1339c:	bl	10f8c <__freading@plt>
   133a0:	cmp	r0, #0
   133a4:	beq	133d0 <__assert_fail@plt+0x230c>
   133a8:	mov	r0, r4
   133ac:	bl	11010 <fileno@plt>
   133b0:	mov	r1, #1
   133b4:	mov	r2, #0
   133b8:	mov	r3, #0
   133bc:	str	r1, [sp]
   133c0:	bl	10f38 <lseek64@plt>
   133c4:	and	r0, r0, r1
   133c8:	cmn	r0, #1
   133cc:	beq	13408 <__assert_fail@plt+0x2344>
   133d0:	mov	r0, r4
   133d4:	bl	13418 <__assert_fail@plt+0x2354>
   133d8:	cmp	r0, #0
   133dc:	beq	13408 <__assert_fail@plt+0x2344>
   133e0:	bl	10fe0 <__errno_location@plt>
   133e4:	ldr	r6, [r0]
   133e8:	mov	r5, r0
   133ec:	mov	r0, r4
   133f0:	bl	11034 <fclose@plt>
   133f4:	cmp	r6, #0
   133f8:	strne	r6, [r5]
   133fc:	mvnne	r0, #0
   13400:	sub	sp, fp, #16
   13404:	pop	{r4, r5, r6, sl, fp, pc}
   13408:	mov	r0, r4
   1340c:	sub	sp, fp, #16
   13410:	pop	{r4, r5, r6, sl, fp, lr}
   13414:	b	11034 <fclose@plt>
   13418:	push	{r4, sl, fp, lr}
   1341c:	add	fp, sp, #8
   13420:	sub	sp, sp, #8
   13424:	mov	r4, r0
   13428:	cmp	r0, #0
   1342c:	beq	13448 <__assert_fail@plt+0x2384>
   13430:	mov	r0, r4
   13434:	bl	10f8c <__freading@plt>
   13438:	cmp	r0, #0
   1343c:	ldrbne	r0, [r4, #1]
   13440:	tstne	r0, #1
   13444:	bne	13458 <__assert_fail@plt+0x2394>
   13448:	mov	r0, r4
   1344c:	sub	sp, fp, #8
   13450:	pop	{r4, sl, fp, lr}
   13454:	b	10e90 <fflush@plt>
   13458:	mov	r0, #1
   1345c:	mov	r2, #0
   13460:	mov	r3, #0
   13464:	str	r0, [sp]
   13468:	mov	r0, r4
   1346c:	bl	13474 <__assert_fail@plt+0x23b0>
   13470:	b	13448 <__assert_fail@plt+0x2384>
   13474:	push	{r4, r5, r6, r7, fp, lr}
   13478:	add	fp, sp, #16
   1347c:	sub	sp, sp, #8
   13480:	mov	r4, r0
   13484:	ldr	r0, [r0, #4]
   13488:	mov	r5, r3
   1348c:	mov	r6, r2
   13490:	ldr	r1, [r4, #8]
   13494:	cmp	r1, r0
   13498:	bne	134b4 <__assert_fail@plt+0x23f0>
   1349c:	ldrd	r0, [r4, #16]
   134a0:	cmp	r1, r0
   134a4:	bne	134b4 <__assert_fail@plt+0x23f0>
   134a8:	ldr	r0, [r4, #36]	; 0x24
   134ac:	cmp	r0, #0
   134b0:	beq	134cc <__assert_fail@plt+0x2408>
   134b4:	mov	r0, r4
   134b8:	mov	r2, r6
   134bc:	mov	r3, r5
   134c0:	sub	sp, fp, #16
   134c4:	pop	{r4, r5, r6, r7, fp, lr}
   134c8:	b	11040 <fseeko64@plt>
   134cc:	ldr	r7, [fp, #8]
   134d0:	mov	r0, r4
   134d4:	bl	11010 <fileno@plt>
   134d8:	mov	r2, r6
   134dc:	mov	r3, r5
   134e0:	str	r7, [sp]
   134e4:	bl	10f38 <lseek64@plt>
   134e8:	and	r2, r0, r1
   134ec:	cmn	r2, #1
   134f0:	mvneq	r0, #0
   134f4:	subeq	sp, fp, #16
   134f8:	popeq	{r4, r5, r6, r7, fp, pc}
   134fc:	strd	r0, [r4, #80]	; 0x50
   13500:	ldr	r0, [r4]
   13504:	bic	r0, r0, #16
   13508:	str	r0, [r4]
   1350c:	mov	r0, #0
   13510:	sub	sp, fp, #16
   13514:	pop	{r4, r5, r6, r7, fp, pc}
   13518:	push	{r4, r5, fp, lr}
   1351c:	add	fp, sp, #8
   13520:	cmp	r0, #0
   13524:	beq	135b8 <__assert_fail@plt+0x24f4>
   13528:	mov	r1, #47	; 0x2f
   1352c:	mov	r4, r0
   13530:	bl	11070 <strrchr@plt>
   13534:	cmp	r0, #0
   13538:	mov	r5, r4
   1353c:	addne	r5, r0, #1
   13540:	sub	r0, r5, r4
   13544:	cmp	r0, #7
   13548:	blt	1359c <__assert_fail@plt+0x24d8>
   1354c:	movw	r1, #31170	; 0x79c2
   13550:	sub	r0, r5, #7
   13554:	mov	r2, #7
   13558:	movt	r1, #1
   1355c:	bl	110ac <strncmp@plt>
   13560:	cmp	r0, #0
   13564:	bne	1359c <__assert_fail@plt+0x24d8>
   13568:	movw	r1, #31178	; 0x79ca
   1356c:	mov	r0, r5
   13570:	mov	r2, #3
   13574:	movt	r1, #1
   13578:	bl	110ac <strncmp@plt>
   1357c:	cmp	r0, #0
   13580:	beq	1358c <__assert_fail@plt+0x24c8>
   13584:	mov	r4, r5
   13588:	b	1359c <__assert_fail@plt+0x24d8>
   1358c:	movw	r0, #33080	; 0x8138
   13590:	add	r4, r5, #3
   13594:	movt	r0, #2
   13598:	str	r4, [r0]
   1359c:	movw	r0, #33084	; 0x813c
   135a0:	movt	r0, #2
   135a4:	str	r4, [r0]
   135a8:	movw	r0, #668	; 0x29c
   135ac:	movt	r0, #3
   135b0:	str	r4, [r0]
   135b4:	pop	{r4, r5, fp, pc}
   135b8:	movw	r0, #33096	; 0x8148
   135bc:	mov	r1, #55	; 0x37
   135c0:	mov	r2, #1
   135c4:	movt	r0, #2
   135c8:	ldr	r3, [r0]
   135cc:	movw	r0, #31114	; 0x798a
   135d0:	movt	r0, #1
   135d4:	bl	10f2c <fwrite@plt>
   135d8:	bl	110b8 <abort@plt>
   135dc:	push	{r4, r5, r6, sl, fp, lr}
   135e0:	add	fp, sp, #16
   135e4:	mov	r4, r0
   135e8:	movw	r0, #672	; 0x2a0
   135ec:	movt	r0, #3
   135f0:	cmp	r4, #0
   135f4:	moveq	r4, r0
   135f8:	bl	10fe0 <__errno_location@plt>
   135fc:	ldr	r6, [r0]
   13600:	mov	r5, r0
   13604:	mov	r0, r4
   13608:	mov	r1, #48	; 0x30
   1360c:	bl	15d9c <__assert_fail@plt+0x4cd8>
   13610:	str	r6, [r5]
   13614:	pop	{r4, r5, r6, sl, fp, pc}
   13618:	movw	r1, #672	; 0x2a0
   1361c:	cmp	r0, #0
   13620:	movt	r1, #3
   13624:	movne	r1, r0
   13628:	ldr	r0, [r1]
   1362c:	bx	lr
   13630:	movw	r2, #672	; 0x2a0
   13634:	cmp	r0, #0
   13638:	movt	r2, #3
   1363c:	movne	r2, r0
   13640:	str	r1, [r2]
   13644:	bx	lr
   13648:	movw	r3, #672	; 0x2a0
   1364c:	cmp	r0, #0
   13650:	movt	r3, #3
   13654:	movne	r3, r0
   13658:	ubfx	r0, r1, #5, #3
   1365c:	and	r1, r1, #31
   13660:	add	r0, r3, r0, lsl #2
   13664:	ldr	r3, [r0, #8]
   13668:	eor	r2, r2, r3, lsr r1
   1366c:	and	r2, r2, #1
   13670:	eor	r2, r3, r2, lsl r1
   13674:	str	r2, [r0, #8]
   13678:	mov	r0, #1
   1367c:	and	r0, r0, r3, lsr r1
   13680:	bx	lr
   13684:	movw	r2, #672	; 0x2a0
   13688:	cmp	r0, #0
   1368c:	movt	r2, #3
   13690:	movne	r2, r0
   13694:	ldr	r0, [r2, #4]
   13698:	str	r1, [r2, #4]
   1369c:	bx	lr
   136a0:	movw	r3, #672	; 0x2a0
   136a4:	cmp	r0, #0
   136a8:	movt	r3, #3
   136ac:	movne	r3, r0
   136b0:	cmp	r1, #0
   136b4:	mov	r0, #10
   136b8:	cmpne	r2, #0
   136bc:	str	r0, [r3]
   136c0:	bne	136d0 <__assert_fail@plt+0x260c>
   136c4:	push	{fp, lr}
   136c8:	mov	fp, sp
   136cc:	bl	110b8 <abort@plt>
   136d0:	str	r1, [r3, #40]	; 0x28
   136d4:	str	r2, [r3, #44]	; 0x2c
   136d8:	bx	lr
   136dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136e0:	add	fp, sp, #28
   136e4:	sub	sp, sp, #20
   136e8:	mov	r7, r0
   136ec:	ldr	r0, [fp, #8]
   136f0:	movw	r5, #672	; 0x2a0
   136f4:	mov	r8, r3
   136f8:	mov	r9, r2
   136fc:	mov	sl, r1
   13700:	movt	r5, #3
   13704:	cmp	r0, #0
   13708:	movne	r5, r0
   1370c:	bl	10fe0 <__errno_location@plt>
   13710:	mov	r4, r0
   13714:	ldm	r5, {r0, r1}
   13718:	ldr	r2, [r5, #40]	; 0x28
   1371c:	ldr	r3, [r5, #44]	; 0x2c
   13720:	add	r5, r5, #8
   13724:	ldr	r6, [r4]
   13728:	stm	sp, {r0, r1, r5}
   1372c:	str	r2, [sp, #12]
   13730:	str	r3, [sp, #16]
   13734:	mov	r0, r7
   13738:	mov	r1, sl
   1373c:	mov	r2, r9
   13740:	mov	r3, r8
   13744:	bl	13754 <__assert_fail@plt+0x2690>
   13748:	str	r6, [r4]
   1374c:	sub	sp, fp, #28
   13750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13758:	add	fp, sp, #28
   1375c:	sub	sp, sp, #156	; 0x9c
   13760:	str	r0, [sp, #80]	; 0x50
   13764:	ldr	r0, [fp, #12]
   13768:	mov	r6, r1
   1376c:	mov	r9, r3
   13770:	str	r2, [fp, #-84]	; 0xffffffac
   13774:	and	r1, r0, #4
   13778:	str	r1, [sp, #32]
   1377c:	and	r1, r0, #1
   13780:	str	r1, [sp, #36]	; 0x24
   13784:	ubfx	r4, r0, #1, #1
   13788:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   1378c:	str	r0, [sp, #40]	; 0x28
   13790:	ldr	r0, [fp, #24]
   13794:	ldr	r7, [fp, #8]
   13798:	mov	r1, #0
   1379c:	mov	r5, #1
   137a0:	str	r1, [fp, #-56]	; 0xffffffc8
   137a4:	mov	r1, #0
   137a8:	str	r1, [sp, #60]	; 0x3c
   137ac:	str	r0, [sp, #76]	; 0x4c
   137b0:	ldr	r0, [fp, #20]
   137b4:	str	r0, [sp, #72]	; 0x48
   137b8:	mov	r0, #0
   137bc:	str	r0, [sp, #56]	; 0x38
   137c0:	mov	r0, #0
   137c4:	str	r0, [sp, #92]	; 0x5c
   137c8:	mov	r0, #0
   137cc:	str	r0, [fp, #-76]	; 0xffffffb4
   137d0:	mov	r0, #0
   137d4:	cmp	r7, #10
   137d8:	bhi	14758 <__assert_fail@plt+0x3694>
   137dc:	add	r1, pc, #28
   137e0:	mov	sl, r6
   137e4:	ldr	r6, [sp, #80]	; 0x50
   137e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   137ec:	mov	r8, #0
   137f0:	mov	r2, #1
   137f4:	mov	r3, #0
   137f8:	mov	lr, r9
   137fc:	ldr	pc, [r1, r7, lsl #2]
   13800:	andeq	r3, r1, r4, ror #17
   13804:	andeq	r3, r1, r0, lsl r9
   13808:	ldrdeq	r3, [r1], -r4
   1380c:	andeq	r3, r1, ip, asr #17
   13810:	andeq	r3, r1, r4, lsl #18
   13814:	andeq	r3, r1, r8, asr r9
   13818:	strdeq	r3, [r1], -r4
   1381c:			; <UNDEFINED> instruction: 0x000139b4
   13820:	andeq	r3, r1, ip, lsr #16
   13824:	andeq	r3, r1, ip, lsr #16
   13828:	andeq	r3, r1, r4, asr r8
   1382c:	movw	r0, #31258	; 0x7a1a
   13830:	mov	r1, r7
   13834:	movt	r0, #1
   13838:	bl	15164 <__assert_fail@plt+0x40a0>
   1383c:	str	r0, [sp, #72]	; 0x48
   13840:	movw	r0, #31260	; 0x7a1c
   13844:	mov	r1, r7
   13848:	movt	r0, #1
   1384c:	bl	15164 <__assert_fail@plt+0x40a0>
   13850:	str	r0, [sp, #76]	; 0x4c
   13854:	str	r5, [fp, #-48]	; 0xffffffd0
   13858:	mov	r8, #0
   1385c:	mov	r5, r7
   13860:	tst	r4, #1
   13864:	bne	1389c <__assert_fail@plt+0x27d8>
   13868:	ldr	r0, [sp, #72]	; 0x48
   1386c:	ldrb	r0, [r0]
   13870:	cmp	r0, #0
   13874:	beq	1389c <__assert_fail@plt+0x27d8>
   13878:	ldr	r1, [sp, #72]	; 0x48
   1387c:	mov	r8, #0
   13880:	add	r1, r1, #1
   13884:	cmp	r8, sl
   13888:	strbcc	r0, [r6, r8]
   1388c:	ldrb	r0, [r1, r8]
   13890:	add	r8, r8, #1
   13894:	cmp	r0, #0
   13898:	bne	13884 <__assert_fail@plt+0x27c0>
   1389c:	ldr	r7, [sp, #76]	; 0x4c
   138a0:	mov	r0, r7
   138a4:	bl	10fc8 <strlen@plt>
   138a8:	str	r7, [sp, #92]	; 0x5c
   138ac:	mov	r7, r5
   138b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   138b4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   138b8:	str	r0, [fp, #-76]	; 0xffffffb4
   138bc:	mov	r2, #1
   138c0:	mov	r3, r4
   138c4:	mov	lr, r9
   138c8:	b	139b4 <__assert_fail@plt+0x28f0>
   138cc:	mov	r0, #1
   138d0:	b	13910 <__assert_fail@plt+0x284c>
   138d4:	tst	r4, #1
   138d8:	bne	13910 <__assert_fail@plt+0x284c>
   138dc:	mov	r2, r0
   138e0:	b	13938 <__assert_fail@plt+0x2874>
   138e4:	mov	r7, #0
   138e8:	mov	r8, #0
   138ec:	mov	r2, r0
   138f0:	b	139b0 <__assert_fail@plt+0x28ec>
   138f4:	mov	r0, #1
   138f8:	mov	r8, #0
   138fc:	mov	r7, #5
   13900:	b	1396c <__assert_fail@plt+0x28a8>
   13904:	mov	r2, #1
   13908:	tst	r4, #1
   1390c:	beq	13938 <__assert_fail@plt+0x2874>
   13910:	mov	r1, #1
   13914:	mov	r8, #0
   13918:	mov	r7, #2
   1391c:	mov	r2, r0
   13920:	mov	r3, #1
   13924:	str	r1, [fp, #-76]	; 0xffffffb4
   13928:	movw	r1, #31260	; 0x7a1c
   1392c:	movt	r1, #1
   13930:	str	r1, [sp, #92]	; 0x5c
   13934:	b	139b4 <__assert_fail@plt+0x28f0>
   13938:	cmp	sl, #0
   1393c:	mov	r8, #1
   13940:	mov	r7, #2
   13944:	movne	r0, #39	; 0x27
   13948:	strbne	r0, [r6]
   1394c:	movw	r0, #31260	; 0x7a1c
   13950:	movt	r0, #1
   13954:	b	139a4 <__assert_fail@plt+0x28e0>
   13958:	mov	r7, #5
   1395c:	tst	r4, #1
   13960:	beq	13988 <__assert_fail@plt+0x28c4>
   13964:	mov	r0, #1
   13968:	mov	r8, #0
   1396c:	str	r0, [fp, #-76]	; 0xffffffb4
   13970:	movw	r0, #30856	; 0x7888
   13974:	mov	r2, #1
   13978:	mov	r3, #1
   1397c:	movt	r0, #1
   13980:	str	r0, [sp, #92]	; 0x5c
   13984:	b	139b4 <__assert_fail@plt+0x28f0>
   13988:	cmp	sl, #0
   1398c:	mov	r8, #1
   13990:	mov	r2, #1
   13994:	movne	r0, #34	; 0x22
   13998:	strbne	r0, [r6]
   1399c:	movw	r0, #30856	; 0x7888
   139a0:	movt	r0, #1
   139a4:	str	r0, [sp, #92]	; 0x5c
   139a8:	mov	r0, #1
   139ac:	str	r0, [fp, #-76]	; 0xffffffb4
   139b0:	mov	r3, #0
   139b4:	ldr	r0, [fp, #16]
   139b8:	str	r3, [fp, #-72]	; 0xffffffb8
   139bc:	str	r7, [fp, #-64]	; 0xffffffc0
   139c0:	str	r2, [sp, #84]	; 0x54
   139c4:	cmp	r0, #0
   139c8:	movwne	r0, #1
   139cc:	and	r0, r0, r3
   139d0:	str	r0, [fp, #-88]	; 0xffffffa8
   139d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   139d8:	cmp	r0, #0
   139dc:	movwne	r0, #1
   139e0:	subs	r4, r7, #2
   139e4:	mov	r7, #0
   139e8:	and	r1, r0, r3
   139ec:	str	r4, [fp, #-80]	; 0xffffffb0
   139f0:	and	r1, r2, r1
   139f4:	str	r1, [sp, #48]	; 0x30
   139f8:	clz	r1, r4
   139fc:	lsr	r1, r1, #5
   13a00:	and	r1, r1, r3
   13a04:	eor	r3, r3, #1
   13a08:	str	r1, [sp, #64]	; 0x40
   13a0c:	mov	r1, r4
   13a10:	str	r3, [sp, #88]	; 0x58
   13a14:	movwne	r1, #1
   13a18:	orr	r3, r1, r3
   13a1c:	and	r1, r1, r2
   13a20:	and	r0, r0, r1
   13a24:	str	r3, [sp, #68]	; 0x44
   13a28:	str	r1, [fp, #-68]	; 0xffffffbc
   13a2c:	str	r0, [fp, #-60]	; 0xffffffc4
   13a30:	eor	r0, r2, #1
   13a34:	str	r0, [sp, #52]	; 0x34
   13a38:	cmn	lr, #1
   13a3c:	beq	13a4c <__assert_fail@plt+0x2988>
   13a40:	cmp	r7, lr
   13a44:	bne	13a58 <__assert_fail@plt+0x2994>
   13a48:	b	14580 <__assert_fail@plt+0x34bc>
   13a4c:	ldrb	r0, [ip, r7]
   13a50:	cmp	r0, #0
   13a54:	beq	14588 <__assert_fail@plt+0x34c4>
   13a58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13a5c:	mov	r9, #0
   13a60:	str	r5, [fp, #-48]	; 0xffffffd0
   13a64:	cmp	r0, #0
   13a68:	beq	13a9c <__assert_fail@plt+0x29d8>
   13a6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13a70:	add	r4, r7, r0
   13a74:	cmp	r0, #2
   13a78:	bcc	13a94 <__assert_fail@plt+0x29d0>
   13a7c:	cmn	lr, #1
   13a80:	bne	13a94 <__assert_fail@plt+0x29d0>
   13a84:	mov	r0, ip
   13a88:	bl	10fc8 <strlen@plt>
   13a8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a90:	mov	lr, r0
   13a94:	cmp	r4, lr
   13a98:	bls	13aa4 <__assert_fail@plt+0x29e0>
   13a9c:	mov	r0, #0
   13aa0:	b	13ae4 <__assert_fail@plt+0x2a20>
   13aa4:	ldr	r1, [sp, #92]	; 0x5c
   13aa8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13aac:	add	r0, ip, r7
   13ab0:	mov	r4, lr
   13ab4:	bl	10ef0 <memcmp@plt>
   13ab8:	ldr	r2, [sp, #88]	; 0x58
   13abc:	cmp	r0, #0
   13ac0:	mov	r1, r0
   13ac4:	movwne	r1, #1
   13ac8:	orr	r1, r1, r2
   13acc:	tst	r1, #1
   13ad0:	beq	14618 <__assert_fail@plt+0x3554>
   13ad4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ad8:	clz	r0, r0
   13adc:	mov	lr, r4
   13ae0:	lsr	r0, r0, #5
   13ae4:	str	r0, [fp, #-52]	; 0xffffffcc
   13ae8:	ldrb	r5, [ip, r7]
   13aec:	cmp	r5, #126	; 0x7e
   13af0:	bhi	13ea8 <__assert_fail@plt+0x2de4>
   13af4:	add	r3, pc, #16
   13af8:	mov	r4, #1
   13afc:	mov	r2, #110	; 0x6e
   13b00:	mov	r0, #97	; 0x61
   13b04:	mov	r1, #0
   13b08:	ldr	pc, [r3, r5, lsl #2]
   13b0c:	andeq	r3, r1, r4, lsr #27
   13b10:	andeq	r3, r1, r8, lsr #29
   13b14:	andeq	r3, r1, r8, lsr #29
   13b18:	andeq	r3, r1, r8, lsr #29
   13b1c:	andeq	r3, r1, r8, lsr #29
   13b20:	andeq	r3, r1, r8, lsr #29
   13b24:	andeq	r3, r1, r8, lsr #29
   13b28:	andeq	r3, r1, ip, asr pc
   13b2c:	andeq	r3, r1, r4, lsl #27
   13b30:	andeq	r3, r1, ip, ror sp
   13b34:	muleq	r1, r0, sp
   13b38:	andeq	r3, r1, r0, lsl lr
   13b3c:	andeq	r3, r1, r4, ror sp
   13b40:	andeq	r3, r1, ip, lsl #27
   13b44:	andeq	r3, r1, r8, lsr #29
   13b48:	andeq	r3, r1, r8, lsr #29
   13b4c:	andeq	r3, r1, r8, lsr #29
   13b50:	andeq	r3, r1, r8, lsr #29
   13b54:	andeq	r3, r1, r8, lsr #29
   13b58:	andeq	r3, r1, r8, lsr #29
   13b5c:	andeq	r3, r1, r8, lsr #29
   13b60:	andeq	r3, r1, r8, lsr #29
   13b64:	andeq	r3, r1, r8, lsr #29
   13b68:	andeq	r3, r1, r8, lsr #29
   13b6c:	andeq	r3, r1, r8, lsr #29
   13b70:	andeq	r3, r1, r8, lsr #29
   13b74:	andeq	r3, r1, r8, lsr #29
   13b78:	andeq	r3, r1, r8, lsr #29
   13b7c:	andeq	r3, r1, r8, lsr #29
   13b80:	andeq	r3, r1, r8, lsr #29
   13b84:	andeq	r3, r1, r8, lsr #29
   13b88:	andeq	r3, r1, r8, lsr #29
   13b8c:	andeq	r3, r1, r4, lsl pc
   13b90:	andeq	r3, r1, r8, lsl pc
   13b94:	andeq	r3, r1, r8, lsl pc
   13b98:	andeq	r3, r1, ip, lsl sp
   13b9c:	andeq	r3, r1, r8, lsl pc
   13ba0:	andeq	r3, r1, r8, lsl #26
   13ba4:	andeq	r3, r1, r8, lsl pc
   13ba8:	andeq	r3, r1, r8, lsl lr
   13bac:	andeq	r3, r1, r8, lsl pc
   13bb0:	andeq	r3, r1, r8, lsl pc
   13bb4:	andeq	r3, r1, r8, lsl pc
   13bb8:	andeq	r3, r1, r8, lsl #26
   13bbc:	andeq	r3, r1, r8, lsl #26
   13bc0:	andeq	r3, r1, r8, lsl #26
   13bc4:	andeq	r3, r1, r8, lsl #26
   13bc8:	andeq	r3, r1, r8, lsl #26
   13bcc:	andeq	r3, r1, r8, lsl #26
   13bd0:	andeq	r3, r1, r8, lsl #26
   13bd4:	andeq	r3, r1, r8, lsl #26
   13bd8:	andeq	r3, r1, r8, lsl #26
   13bdc:	andeq	r3, r1, r8, lsl #26
   13be0:	andeq	r3, r1, r8, lsl #26
   13be4:	andeq	r3, r1, r8, lsl #26
   13be8:	andeq	r3, r1, r8, lsl #26
   13bec:	andeq	r3, r1, r8, lsl #26
   13bf0:	andeq	r3, r1, r8, lsl #26
   13bf4:	andeq	r3, r1, r8, lsl #26
   13bf8:	andeq	r3, r1, r8, lsl pc
   13bfc:	andeq	r3, r1, r8, lsl pc
   13c00:	andeq	r3, r1, r8, lsl pc
   13c04:	andeq	r3, r1, r8, lsl pc
   13c08:	andeq	r3, r1, r4, ror #27
   13c0c:	andeq	r3, r1, r8, lsr #29
   13c10:	andeq	r3, r1, r8, lsl #26
   13c14:	andeq	r3, r1, r8, lsl #26
   13c18:	andeq	r3, r1, r8, lsl #26
   13c1c:	andeq	r3, r1, r8, lsl #26
   13c20:	andeq	r3, r1, r8, lsl #26
   13c24:	andeq	r3, r1, r8, lsl #26
   13c28:	andeq	r3, r1, r8, lsl #26
   13c2c:	andeq	r3, r1, r8, lsl #26
   13c30:	andeq	r3, r1, r8, lsl #26
   13c34:	andeq	r3, r1, r8, lsl #26
   13c38:	andeq	r3, r1, r8, lsl #26
   13c3c:	andeq	r3, r1, r8, lsl #26
   13c40:	andeq	r3, r1, r8, lsl #26
   13c44:	andeq	r3, r1, r8, lsl #26
   13c48:	andeq	r3, r1, r8, lsl #26
   13c4c:	andeq	r3, r1, r8, lsl #26
   13c50:	andeq	r3, r1, r8, lsl #26
   13c54:	andeq	r3, r1, r8, lsl #26
   13c58:	andeq	r3, r1, r8, lsl #26
   13c5c:	andeq	r3, r1, r8, lsl #26
   13c60:	andeq	r3, r1, r8, lsl #26
   13c64:	andeq	r3, r1, r8, lsl #26
   13c68:	andeq	r3, r1, r8, lsl #26
   13c6c:	andeq	r3, r1, r8, lsl #26
   13c70:	andeq	r3, r1, r8, lsl #26
   13c74:	andeq	r3, r1, r8, lsl #26
   13c78:	andeq	r3, r1, r8, lsl pc
   13c7c:	andeq	r3, r1, r0, asr sp
   13c80:	andeq	r3, r1, r8, lsl #26
   13c84:	andeq	r3, r1, r8, lsl pc
   13c88:	andeq	r3, r1, r8, lsl #26
   13c8c:	andeq	r3, r1, r8, lsl pc
   13c90:	andeq	r3, r1, r8, lsl #26
   13c94:	andeq	r3, r1, r8, lsl #26
   13c98:	andeq	r3, r1, r8, lsl #26
   13c9c:	andeq	r3, r1, r8, lsl #26
   13ca0:	andeq	r3, r1, r8, lsl #26
   13ca4:	andeq	r3, r1, r8, lsl #26
   13ca8:	andeq	r3, r1, r8, lsl #26
   13cac:	andeq	r3, r1, r8, lsl #26
   13cb0:	andeq	r3, r1, r8, lsl #26
   13cb4:	andeq	r3, r1, r8, lsl #26
   13cb8:	andeq	r3, r1, r8, lsl #26
   13cbc:	andeq	r3, r1, r8, lsl #26
   13cc0:	andeq	r3, r1, r8, lsl #26
   13cc4:	andeq	r3, r1, r8, lsl #26
   13cc8:	andeq	r3, r1, r8, lsl #26
   13ccc:	andeq	r3, r1, r8, lsl #26
   13cd0:	andeq	r3, r1, r8, lsl #26
   13cd4:	andeq	r3, r1, r8, lsl #26
   13cd8:	andeq	r3, r1, r8, lsl #26
   13cdc:	andeq	r3, r1, r8, lsl #26
   13ce0:	andeq	r3, r1, r8, lsl #26
   13ce4:	andeq	r3, r1, r8, lsl #26
   13ce8:	andeq	r3, r1, r8, lsl #26
   13cec:	andeq	r3, r1, r8, lsl #26
   13cf0:	andeq	r3, r1, r8, lsl #26
   13cf4:	andeq	r3, r1, r8, lsl #26
   13cf8:	andeq	r3, r1, r0, lsr sp
   13cfc:	andeq	r3, r1, r8, lsl pc
   13d00:	andeq	r3, r1, r0, lsr sp
   13d04:	andeq	r3, r1, ip, lsl sp
   13d08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d0c:	cmp	r0, #0
   13d10:	beq	13f70 <__assert_fail@plt+0x2eac>
   13d14:	ldr	r0, [fp, #16]
   13d18:	b	13f74 <__assert_fail@plt+0x2eb0>
   13d1c:	mov	r4, #0
   13d20:	cmp	r7, #0
   13d24:	beq	13f14 <__assert_fail@plt+0x2e50>
   13d28:	mov	r9, #0
   13d2c:	b	13d08 <__assert_fail@plt+0x2c44>
   13d30:	mov	r4, #0
   13d34:	cmn	lr, #1
   13d38:	beq	13ef8 <__assert_fail@plt+0x2e34>
   13d3c:	cmp	r7, #0
   13d40:	bne	13d28 <__assert_fail@plt+0x2c64>
   13d44:	cmp	lr, #1
   13d48:	beq	13f14 <__assert_fail@plt+0x2e50>
   13d4c:	b	13d28 <__assert_fail@plt+0x2c64>
   13d50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d54:	cmp	r0, #2
   13d58:	bne	13f38 <__assert_fail@plt+0x2e74>
   13d5c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d60:	tst	r0, #1
   13d64:	bne	14634 <__assert_fail@plt+0x3570>
   13d68:	mov	r9, #0
   13d6c:	mov	r0, #92	; 0x5c
   13d70:	b	13f4c <__assert_fail@plt+0x2e88>
   13d74:	mov	r0, #102	; 0x66
   13d78:	b	13f5c <__assert_fail@plt+0x2e98>
   13d7c:	mov	r2, #116	; 0x74
   13d80:	b	13d90 <__assert_fail@plt+0x2ccc>
   13d84:	mov	r0, #98	; 0x62
   13d88:	b	13f5c <__assert_fail@plt+0x2e98>
   13d8c:	mov	r2, #114	; 0x72
   13d90:	ldr	r0, [sp, #68]	; 0x44
   13d94:	tst	r0, #1
   13d98:	mov	r0, r2
   13d9c:	bne	13f5c <__assert_fail@plt+0x2e98>
   13da0:	b	14634 <__assert_fail@plt+0x3570>
   13da4:	ldr	r0, [sp, #84]	; 0x54
   13da8:	tst	r0, #1
   13dac:	beq	1404c <__assert_fail@plt+0x2f88>
   13db0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13db4:	tst	r0, #1
   13db8:	bne	14744 <__assert_fail@plt+0x3680>
   13dbc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13dc0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13dc4:	cmp	r0, #2
   13dc8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13dcc:	movwne	r0, #1
   13dd0:	orr	r0, r0, r2
   13dd4:	tst	r0, #1
   13dd8:	beq	1441c <__assert_fail@plt+0x3358>
   13ddc:	mov	r0, r8
   13de0:	b	14450 <__assert_fail@plt+0x338c>
   13de4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13de8:	mov	r9, #0
   13dec:	mov	r5, #63	; 0x3f
   13df0:	cmp	r0, #5
   13df4:	beq	14200 <__assert_fail@plt+0x313c>
   13df8:	cmp	r0, #2
   13dfc:	bne	142a4 <__assert_fail@plt+0x31e0>
   13e00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13e04:	tst	r0, #1
   13e08:	beq	142a8 <__assert_fail@plt+0x31e4>
   13e0c:	b	14634 <__assert_fail@plt+0x3570>
   13e10:	mov	r0, #118	; 0x76
   13e14:	b	13f5c <__assert_fail@plt+0x2e98>
   13e18:	mov	r0, #1
   13e1c:	mov	r5, #39	; 0x27
   13e20:	str	r0, [sp, #60]	; 0x3c
   13e24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e28:	cmp	r0, #2
   13e2c:	bne	13ea0 <__assert_fail@plt+0x2ddc>
   13e30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13e34:	tst	r0, #1
   13e38:	bne	14634 <__assert_fail@plt+0x3570>
   13e3c:	ldr	r2, [sp, #56]	; 0x38
   13e40:	clz	r1, sl
   13e44:	mov	r9, #0
   13e48:	lsr	r1, r1, #5
   13e4c:	cmp	r2, #0
   13e50:	mov	r0, r2
   13e54:	movwne	r0, #1
   13e58:	orrs	r0, r0, r1
   13e5c:	moveq	r2, sl
   13e60:	moveq	sl, r0
   13e64:	cmp	r8, sl
   13e68:	str	r2, [sp, #56]	; 0x38
   13e6c:	movcc	r0, #39	; 0x27
   13e70:	strbcc	r0, [r6, r8]
   13e74:	add	r0, r8, #1
   13e78:	cmp	r0, sl
   13e7c:	movcc	r1, #92	; 0x5c
   13e80:	strbcc	r1, [r6, r0]
   13e84:	add	r0, r8, #2
   13e88:	add	r8, r8, #3
   13e8c:	cmp	r0, sl
   13e90:	movcc	r1, #39	; 0x27
   13e94:	strbcc	r1, [r6, r0]
   13e98:	mov	r0, #0
   13e9c:	str	r0, [fp, #-56]	; 0xffffffc8
   13ea0:	mov	r4, #1
   13ea4:	b	13d08 <__assert_fail@plt+0x2c44>
   13ea8:	ldr	r0, [sp, #40]	; 0x28
   13eac:	cmp	r0, #1
   13eb0:	bne	14078 <__assert_fail@plt+0x2fb4>
   13eb4:	str	lr, [sp, #28]
   13eb8:	bl	10fb0 <__ctype_b_loc@plt>
   13ebc:	ldr	r0, [r0]
   13ec0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ec4:	mov	r1, #1
   13ec8:	add	r0, r0, r5, lsl #1
   13ecc:	ldrb	r0, [r0, #1]
   13ed0:	ubfx	r4, r0, #6, #1
   13ed4:	ldr	r0, [sp, #52]	; 0x34
   13ed8:	mov	r2, r1
   13edc:	cmp	r1, #1
   13ee0:	orr	r0, r4, r0
   13ee4:	bhi	142b0 <__assert_fail@plt+0x31ec>
   13ee8:	tst	r0, #1
   13eec:	beq	142b0 <__assert_fail@plt+0x31ec>
   13ef0:	ldr	lr, [sp, #28]
   13ef4:	b	13d08 <__assert_fail@plt+0x2c44>
   13ef8:	cmp	r7, #0
   13efc:	ldrbeq	r0, [ip, #1]
   13f00:	cmpeq	r0, #0
   13f04:	beq	13f14 <__assert_fail@plt+0x2e50>
   13f08:	mvn	lr, #0
   13f0c:	mov	r9, #0
   13f10:	b	13d08 <__assert_fail@plt+0x2c44>
   13f14:	mov	r1, #1
   13f18:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f1c:	cmp	r0, #2
   13f20:	bne	13f30 <__assert_fail@plt+0x2e6c>
   13f24:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f28:	tst	r0, #1
   13f2c:	bne	14634 <__assert_fail@plt+0x3570>
   13f30:	mov	r4, r1
   13f34:	b	13d08 <__assert_fail@plt+0x2c44>
   13f38:	ldr	r1, [sp, #48]	; 0x30
   13f3c:	mov	r9, #0
   13f40:	mov	r0, #92	; 0x5c
   13f44:	cmp	r1, #0
   13f48:	beq	13f5c <__assert_fail@plt+0x2e98>
   13f4c:	mov	r4, #0
   13f50:	cmp	r9, #0
   13f54:	beq	144e8 <__assert_fail@plt+0x3424>
   13f58:	b	14524 <__assert_fail@plt+0x3460>
   13f5c:	ldr	r1, [sp, #84]	; 0x54
   13f60:	mov	r4, #0
   13f64:	mov	r9, #0
   13f68:	tst	r1, #1
   13f6c:	bne	13fac <__assert_fail@plt+0x2ee8>
   13f70:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13f74:	cmp	r0, #0
   13f78:	mov	r0, r5
   13f7c:	beq	13fa0 <__assert_fail@plt+0x2edc>
   13f80:	ldr	r1, [fp, #16]
   13f84:	ubfx	r0, r5, #5, #3
   13f88:	mov	r2, #1
   13f8c:	ldr	r0, [r1, r0, lsl #2]
   13f90:	and	r1, r5, #31
   13f94:	tst	r0, r2, lsl r1
   13f98:	mov	r0, r5
   13f9c:	bne	13fac <__assert_fail@plt+0x2ee8>
   13fa0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13fa4:	cmp	r1, #0
   13fa8:	beq	144e0 <__assert_fail@plt+0x341c>
   13fac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13fb0:	tst	r1, #1
   13fb4:	bne	1460c <__assert_fail@plt+0x3548>
   13fb8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13fbc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13fc0:	cmp	r1, #2
   13fc4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13fc8:	movwne	r1, #1
   13fcc:	orr	r1, r1, r2
   13fd0:	tst	r1, #1
   13fd4:	beq	13fe0 <__assert_fail@plt+0x2f1c>
   13fd8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fdc:	b	1401c <__assert_fail@plt+0x2f58>
   13fe0:	cmp	r8, sl
   13fe4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fe8:	movcc	r1, #39	; 0x27
   13fec:	strbcc	r1, [r6, r8]
   13ff0:	add	r1, r8, #1
   13ff4:	cmp	r1, sl
   13ff8:	movcc	r2, #36	; 0x24
   13ffc:	strbcc	r2, [r6, r1]
   14000:	add	r1, r8, #2
   14004:	add	r8, r8, #3
   14008:	cmp	r1, sl
   1400c:	movcc	r2, #39	; 0x27
   14010:	strbcc	r2, [r6, r1]
   14014:	mov	r1, #1
   14018:	str	r1, [fp, #-56]	; 0xffffffc8
   1401c:	cmp	r8, sl
   14020:	movcc	r1, #92	; 0x5c
   14024:	strbcc	r1, [r6, r8]
   14028:	add	r8, r8, #1
   1402c:	cmp	r8, sl
   14030:	and	r5, r5, r4
   14034:	add	r7, r7, #1
   14038:	strbcc	r0, [r6, r8]
   1403c:	add	r8, r8, #1
   14040:	cmn	lr, #1
   14044:	bne	13a40 <__assert_fail@plt+0x297c>
   14048:	b	13a4c <__assert_fail@plt+0x2988>
   1404c:	ldr	r0, [sp, #36]	; 0x24
   14050:	mov	r4, #0
   14054:	mov	r9, #0
   14058:	mov	r5, #0
   1405c:	cmp	r0, #0
   14060:	beq	13f70 <__assert_fail@plt+0x2eac>
   14064:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14068:	add	r7, r7, #1
   1406c:	cmn	lr, #1
   14070:	bne	13a40 <__assert_fail@plt+0x297c>
   14074:	b	13a4c <__assert_fail@plt+0x2988>
   14078:	mov	r0, #0
   1407c:	cmn	lr, #1
   14080:	str	r0, [fp, #-36]	; 0xffffffdc
   14084:	str	r0, [fp, #-40]	; 0xffffffd8
   14088:	bne	1409c <__assert_fail@plt+0x2fd8>
   1408c:	mov	r0, ip
   14090:	bl	10fc8 <strlen@plt>
   14094:	ldr	ip, [fp, #-84]	; 0xffffffac
   14098:	mov	lr, r0
   1409c:	add	r0, ip, r7
   140a0:	mov	r4, #1
   140a4:	mov	r6, #0
   140a8:	str	lr, [sp, #28]
   140ac:	str	r0, [sp, #24]
   140b0:	sub	r0, fp, #40	; 0x28
   140b4:	mov	r3, r0
   140b8:	str	r6, [sp, #44]	; 0x2c
   140bc:	add	r6, r6, r7
   140c0:	sub	r0, fp, #44	; 0x2c
   140c4:	add	r1, ip, r6
   140c8:	sub	r2, lr, r6
   140cc:	bl	16e38 <__assert_fail@plt+0x5d74>
   140d0:	cmp	r0, #0
   140d4:	beq	1456c <__assert_fail@plt+0x34a8>
   140d8:	cmn	r0, #1
   140dc:	beq	1452c <__assert_fail@plt+0x3468>
   140e0:	ldr	lr, [sp, #28]
   140e4:	cmn	r0, #2
   140e8:	beq	14534 <__assert_fail@plt+0x3470>
   140ec:	ldr	r2, [sp, #64]	; 0x40
   140f0:	cmp	r0, #2
   140f4:	mov	r1, #0
   140f8:	movwcc	r1, #1
   140fc:	eor	r2, r2, #1
   14100:	orrs	r1, r2, r1
   14104:	bne	141c4 <__assert_fail@plt+0x3100>
   14108:	ldr	r1, [sp, #44]	; 0x2c
   1410c:	ldr	r2, [sp, #24]
   14110:	add	r1, r2, r1
   14114:	mov	r2, #1
   14118:	ldrb	r3, [r1, r2]
   1411c:	sub	r3, r3, #91	; 0x5b
   14120:	cmp	r3, #33	; 0x21
   14124:	bhi	141b8 <__assert_fail@plt+0x30f4>
   14128:	add	r6, pc, #0
   1412c:	ldr	pc, [r6, r3, lsl #2]
   14130:	andeq	r4, r1, ip, lsr #12
   14134:	andeq	r4, r1, ip, lsr #12
   14138:			; <UNDEFINED> instruction: 0x000141b8
   1413c:	andeq	r4, r1, ip, lsr #12
   14140:			; <UNDEFINED> instruction: 0x000141b8
   14144:	andeq	r4, r1, ip, lsr #12
   14148:			; <UNDEFINED> instruction: 0x000141b8
   1414c:			; <UNDEFINED> instruction: 0x000141b8
   14150:			; <UNDEFINED> instruction: 0x000141b8
   14154:			; <UNDEFINED> instruction: 0x000141b8
   14158:			; <UNDEFINED> instruction: 0x000141b8
   1415c:			; <UNDEFINED> instruction: 0x000141b8
   14160:			; <UNDEFINED> instruction: 0x000141b8
   14164:			; <UNDEFINED> instruction: 0x000141b8
   14168:			; <UNDEFINED> instruction: 0x000141b8
   1416c:			; <UNDEFINED> instruction: 0x000141b8
   14170:			; <UNDEFINED> instruction: 0x000141b8
   14174:			; <UNDEFINED> instruction: 0x000141b8
   14178:			; <UNDEFINED> instruction: 0x000141b8
   1417c:			; <UNDEFINED> instruction: 0x000141b8
   14180:			; <UNDEFINED> instruction: 0x000141b8
   14184:			; <UNDEFINED> instruction: 0x000141b8
   14188:			; <UNDEFINED> instruction: 0x000141b8
   1418c:			; <UNDEFINED> instruction: 0x000141b8
   14190:			; <UNDEFINED> instruction: 0x000141b8
   14194:			; <UNDEFINED> instruction: 0x000141b8
   14198:			; <UNDEFINED> instruction: 0x000141b8
   1419c:			; <UNDEFINED> instruction: 0x000141b8
   141a0:			; <UNDEFINED> instruction: 0x000141b8
   141a4:			; <UNDEFINED> instruction: 0x000141b8
   141a8:			; <UNDEFINED> instruction: 0x000141b8
   141ac:			; <UNDEFINED> instruction: 0x000141b8
   141b0:			; <UNDEFINED> instruction: 0x000141b8
   141b4:	andeq	r4, r1, ip, lsr #12
   141b8:	add	r2, r2, #1
   141bc:	cmp	r2, r0
   141c0:	bcc	14118 <__assert_fail@plt+0x3054>
   141c4:	ldr	r6, [sp, #44]	; 0x2c
   141c8:	add	r6, r0, r6
   141cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   141d0:	bl	10f20 <iswprint@plt>
   141d4:	cmp	r0, #0
   141d8:	movwne	r0, #1
   141dc:	and	r4, r4, r0
   141e0:	sub	r0, fp, #40	; 0x28
   141e4:	bl	10ed8 <mbsinit@plt>
   141e8:	ldr	lr, [sp, #28]
   141ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   141f0:	sub	r3, fp, #40	; 0x28
   141f4:	cmp	r0, #0
   141f8:	beq	140b8 <__assert_fail@plt+0x2ff4>
   141fc:	b	14574 <__assert_fail@plt+0x34b0>
   14200:	ldr	r0, [sp, #32]
   14204:	cmp	r0, #0
   14208:	beq	142a4 <__assert_fail@plt+0x31e0>
   1420c:	add	r0, r7, #2
   14210:	cmp	r0, lr
   14214:	bcs	142a4 <__assert_fail@plt+0x31e0>
   14218:	add	r1, ip, r7
   1421c:	ldrb	r1, [r1, #1]
   14220:	cmp	r1, #63	; 0x3f
   14224:	bne	142a4 <__assert_fail@plt+0x31e0>
   14228:	ldrb	r5, [ip, r0]
   1422c:	sub	r1, r5, #33	; 0x21
   14230:	cmp	r1, #29
   14234:	bhi	142a4 <__assert_fail@plt+0x31e0>
   14238:	movw	r3, #20929	; 0x51c1
   1423c:	mov	r2, #1
   14240:	movt	r3, #14336	; 0x3800
   14244:	tst	r3, r2, lsl r1
   14248:	beq	142a4 <__assert_fail@plt+0x31e0>
   1424c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14250:	tst	r1, #1
   14254:	bne	1474c <__assert_fail@plt+0x3688>
   14258:	cmp	r8, sl
   1425c:	mov	r7, r0
   14260:	mov	r4, #0
   14264:	movcc	r1, #63	; 0x3f
   14268:	strbcc	r1, [r6, r8]
   1426c:	add	r1, r8, #1
   14270:	cmp	r1, sl
   14274:	movcc	r2, #34	; 0x22
   14278:	strbcc	r2, [r6, r1]
   1427c:	add	r1, r8, #2
   14280:	cmp	r1, sl
   14284:	movcc	r2, #34	; 0x22
   14288:	strbcc	r2, [r6, r1]
   1428c:	add	r1, r8, #3
   14290:	add	r8, r8, #4
   14294:	cmp	r1, sl
   14298:	movcc	r2, #63	; 0x3f
   1429c:	strbcc	r2, [r6, r1]
   142a0:	b	13d08 <__assert_fail@plt+0x2c44>
   142a4:	mov	r5, #63	; 0x3f
   142a8:	mov	r4, #0
   142ac:	b	13d08 <__assert_fail@plt+0x2c44>
   142b0:	add	r1, r2, r7
   142b4:	ldr	lr, [sp, #28]
   142b8:	mov	r3, #0
   142bc:	str	r1, [sp, #44]	; 0x2c
   142c0:	add	r1, r7, #1
   142c4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   142c8:	tst	r0, #1
   142cc:	bne	143a0 <__assert_fail@plt+0x32dc>
   142d0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   142d4:	tst	r2, #1
   142d8:	bne	14694 <__assert_fail@plt+0x35d0>
   142dc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   142e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   142e4:	cmp	r7, #2
   142e8:	movwne	r3, #1
   142ec:	orr	r3, r3, r2
   142f0:	tst	r3, #1
   142f4:	bne	14330 <__assert_fail@plt+0x326c>
   142f8:	cmp	r8, sl
   142fc:	add	r3, r8, #1
   14300:	movcc	r2, #39	; 0x27
   14304:	strbcc	r2, [r6, r8]
   14308:	cmp	r3, sl
   1430c:	movcc	r2, #36	; 0x24
   14310:	strbcc	r2, [r6, r3]
   14314:	add	r3, r8, #2
   14318:	add	r8, r8, #3
   1431c:	cmp	r3, sl
   14320:	movcc	r2, #39	; 0x27
   14324:	strbcc	r2, [r6, r3]
   14328:	mov	r2, #1
   1432c:	str	r2, [fp, #-56]	; 0xffffffc8
   14330:	cmp	r8, sl
   14334:	movcc	r3, #92	; 0x5c
   14338:	strbcc	r3, [r6, r8]
   1433c:	add	r3, r8, #1
   14340:	cmp	r3, sl
   14344:	andcc	r7, r5, #192	; 0xc0
   14348:	movcc	r2, #48	; 0x30
   1434c:	orrcc	r7, r2, r7, lsr #6
   14350:	strbcc	r7, [r6, r3]
   14354:	add	r3, r8, #2
   14358:	add	r8, r8, #3
   1435c:	cmp	r3, sl
   14360:	lsrcc	r7, r5, #3
   14364:	movcc	r2, #6
   14368:	bficc	r7, r2, #3, #29
   1436c:	mov	r2, #6
   14370:	strbcc	r7, [r6, r3]
   14374:	bfi	r5, r2, #3, #29
   14378:	mov	r3, #1
   1437c:	b	143c4 <__assert_fail@plt+0x3300>
   14380:	cmp	r8, sl
   14384:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14388:	strbcc	r5, [r6, r8]
   1438c:	add	r8, r8, #1
   14390:	ldrb	r5, [ip, r1]
   14394:	add	r1, r1, #1
   14398:	tst	r0, #1
   1439c:	beq	142d0 <__assert_fail@plt+0x320c>
   143a0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   143a4:	tst	r2, #1
   143a8:	beq	143bc <__assert_fail@plt+0x32f8>
   143ac:	cmp	r8, sl
   143b0:	movcc	r7, #92	; 0x5c
   143b4:	strbcc	r7, [r6, r8]
   143b8:	add	r8, r8, #1
   143bc:	mov	r2, #0
   143c0:	str	r2, [fp, #-52]	; 0xffffffcc
   143c4:	ldr	r2, [sp, #44]	; 0x2c
   143c8:	and	r9, r3, #1
   143cc:	cmp	r2, r1
   143d0:	bls	144d0 <__assert_fail@plt+0x340c>
   143d4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   143d8:	cmp	r9, #0
   143dc:	movwne	r9, #1
   143e0:	mvn	r7, r2
   143e4:	orr	r7, r7, r9
   143e8:	tst	r7, #1
   143ec:	bne	14380 <__assert_fail@plt+0x32bc>
   143f0:	cmp	r8, sl
   143f4:	movcc	r7, #39	; 0x27
   143f8:	strbcc	r7, [r6, r8]
   143fc:	add	r7, r8, #1
   14400:	add	r8, r8, #2
   14404:	cmp	r7, sl
   14408:	movcc	r2, #39	; 0x27
   1440c:	strbcc	r2, [r6, r7]
   14410:	mov	r2, #0
   14414:	str	r2, [fp, #-56]	; 0xffffffc8
   14418:	b	14380 <__assert_fail@plt+0x32bc>
   1441c:	cmp	r8, sl
   14420:	mov	r2, #1
   14424:	movcc	r0, #39	; 0x27
   14428:	strbcc	r0, [r6, r8]
   1442c:	add	r0, r8, #1
   14430:	cmp	r0, sl
   14434:	movcc	r1, #36	; 0x24
   14438:	strbcc	r1, [r6, r0]
   1443c:	add	r0, r8, #2
   14440:	cmp	r0, sl
   14444:	movcc	r1, #39	; 0x27
   14448:	strbcc	r1, [r6, r0]
   1444c:	add	r0, r8, #3
   14450:	cmp	r0, sl
   14454:	add	r8, r0, #1
   14458:	str	r2, [fp, #-56]	; 0xffffffc8
   1445c:	movcc	r1, #92	; 0x5c
   14460:	strbcc	r1, [r6, r0]
   14464:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14468:	cmp	r1, #2
   1446c:	beq	144c0 <__assert_fail@plt+0x33fc>
   14470:	add	r1, r7, #1
   14474:	mov	r4, #0
   14478:	mov	r9, #1
   1447c:	mov	r5, #48	; 0x30
   14480:	cmp	r1, lr
   14484:	bcs	13d08 <__assert_fail@plt+0x2c44>
   14488:	ldrb	r1, [ip, r1]
   1448c:	sub	r1, r1, #48	; 0x30
   14490:	uxtb	r1, r1
   14494:	cmp	r1, #9
   14498:	bhi	13d08 <__assert_fail@plt+0x2c44>
   1449c:	cmp	r8, sl
   144a0:	movcc	r1, #48	; 0x30
   144a4:	strbcc	r1, [r6, r8]
   144a8:	add	r1, r0, #2
   144ac:	add	r8, r0, #3
   144b0:	cmp	r1, sl
   144b4:	movcc	r2, #48	; 0x30
   144b8:	strbcc	r2, [r6, r1]
   144bc:	b	13d08 <__assert_fail@plt+0x2c44>
   144c0:	mov	r0, #48	; 0x30
   144c4:	mov	r9, #1
   144c8:	mov	r4, #0
   144cc:	b	13fa0 <__assert_fail@plt+0x2edc>
   144d0:	cmp	r9, #0
   144d4:	sub	r7, r1, #1
   144d8:	mov	r0, r5
   144dc:	movwne	r9, #1
   144e0:	cmp	r9, #0
   144e4:	bne	14524 <__assert_fail@plt+0x3460>
   144e8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   144ec:	tst	r1, #1
   144f0:	beq	14524 <__assert_fail@plt+0x3460>
   144f4:	cmp	r8, sl
   144f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   144fc:	movcc	r1, #39	; 0x27
   14500:	strbcc	r1, [r6, r8]
   14504:	add	r1, r8, #1
   14508:	add	r8, r8, #2
   1450c:	cmp	r1, sl
   14510:	movcc	r2, #39	; 0x27
   14514:	strbcc	r2, [r6, r1]
   14518:	mov	r1, #0
   1451c:	str	r1, [fp, #-56]	; 0xffffffc8
   14520:	b	1402c <__assert_fail@plt+0x2f68>
   14524:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14528:	b	1402c <__assert_fail@plt+0x2f68>
   1452c:	mov	r4, #0
   14530:	b	1456c <__assert_fail@plt+0x34a8>
   14534:	mov	r4, #0
   14538:	cmp	lr, r6
   1453c:	bls	1456c <__assert_fail@plt+0x34a8>
   14540:	ldr	ip, [fp, #-84]	; 0xffffffac
   14544:	ldr	r6, [sp, #44]	; 0x2c
   14548:	ldr	r0, [sp, #24]
   1454c:	ldrb	r0, [r0, r6]
   14550:	cmp	r0, #0
   14554:	beq	14574 <__assert_fail@plt+0x34b0>
   14558:	add	r6, r6, #1
   1455c:	add	r0, r7, r6
   14560:	cmp	r0, lr
   14564:	bcc	14548 <__assert_fail@plt+0x3484>
   14568:	b	14574 <__assert_fail@plt+0x34b0>
   1456c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14570:	ldr	r6, [sp, #44]	; 0x2c
   14574:	mov	r1, r6
   14578:	ldr	r6, [sp, #80]	; 0x50
   1457c:	b	13ed4 <__assert_fail@plt+0x2e10>
   14580:	mov	lr, r7
   14584:	b	1458c <__assert_fail@plt+0x34c8>
   14588:	mvn	lr, #0
   1458c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14590:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14594:	eor	r0, r7, #2
   14598:	orr	r0, r0, r8
   1459c:	clz	r0, r0
   145a0:	lsr	r0, r0, #5
   145a4:	tst	r1, r0
   145a8:	bne	14634 <__assert_fail@plt+0x3570>
   145ac:	mov	r0, r1
   145b0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   145b4:	cmp	r7, #2
   145b8:	movwne	r1, #1
   145bc:	orr	r0, r0, r1
   145c0:	tst	r0, #1
   145c4:	ldreq	r0, [sp, #60]	; 0x3c
   145c8:	eoreq	r0, r0, #1
   145cc:	tsteq	r0, #1
   145d0:	bne	146e0 <__assert_fail@plt+0x361c>
   145d4:	mov	r9, lr
   145d8:	tst	r5, #1
   145dc:	bne	1469c <__assert_fail@plt+0x35d8>
   145e0:	ldr	r6, [sp, #56]	; 0x38
   145e4:	mov	r4, #0
   145e8:	cmp	r6, #0
   145ec:	beq	146d8 <__assert_fail@plt+0x3614>
   145f0:	ldr	r0, [sp, #84]	; 0x54
   145f4:	mov	r1, #0
   145f8:	cmp	sl, #0
   145fc:	mov	r5, #0
   14600:	str	r1, [fp, #-72]	; 0xffffffb8
   14604:	beq	137d4 <__assert_fail@plt+0x2710>
   14608:	b	146e0 <__assert_fail@plt+0x361c>
   1460c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14610:	ldr	r2, [sp, #84]	; 0x54
   14614:	b	1463c <__assert_fail@plt+0x3578>
   14618:	ldr	ip, [fp, #-84]	; 0xffffffac
   1461c:	mov	r2, #1
   14620:	mov	lr, r4
   14624:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14628:	b	1463c <__assert_fail@plt+0x3578>
   1462c:	ldr	r6, [sp, #80]	; 0x50
   14630:	ldr	ip, [fp, #-84]	; 0xffffffac
   14634:	ldr	r2, [sp, #84]	; 0x54
   14638:	mov	r7, #2
   1463c:	mov	r0, #0
   14640:	ldr	r1, [fp, #12]
   14644:	tst	r2, #1
   14648:	mov	r2, r7
   1464c:	mov	r3, lr
   14650:	str	r0, [sp, #8]
   14654:	ldr	r0, [sp, #72]	; 0x48
   14658:	movwne	r2, #4
   1465c:	cmp	r7, #2
   14660:	movne	r2, r7
   14664:	str	r2, [sp]
   14668:	mov	r2, ip
   1466c:	bic	r1, r1, #2
   14670:	str	r0, [sp, #12]
   14674:	ldr	r0, [sp, #76]	; 0x4c
   14678:	str	r1, [sp, #4]
   1467c:	mov	r1, sl
   14680:	str	r0, [sp, #16]
   14684:	mov	r0, r6
   14688:	bl	13754 <__assert_fail@plt+0x2690>
   1468c:	mov	r8, r0
   14690:	b	14738 <__assert_fail@plt+0x3674>
   14694:	ldr	r2, [sp, #84]	; 0x54
   14698:	b	1463c <__assert_fail@plt+0x3578>
   1469c:	mov	r0, #5
   146a0:	ldr	r1, [sp, #56]	; 0x38
   146a4:	ldr	r2, [fp, #-84]	; 0xffffffac
   146a8:	mov	r3, r9
   146ac:	str	r0, [sp]
   146b0:	ldr	r0, [fp, #12]
   146b4:	str	r0, [sp, #4]
   146b8:	ldr	r0, [fp, #16]
   146bc:	str	r0, [sp, #8]
   146c0:	ldr	r0, [sp, #72]	; 0x48
   146c4:	str	r0, [sp, #12]
   146c8:	ldr	r0, [sp, #76]	; 0x4c
   146cc:	str	r0, [sp, #16]
   146d0:	ldr	r0, [sp, #80]	; 0x50
   146d4:	b	14688 <__assert_fail@plt+0x35c4>
   146d8:	mov	r0, #0
   146dc:	str	r0, [fp, #-72]	; 0xffffffb8
   146e0:	ldr	r1, [sp, #92]	; 0x5c
   146e4:	cmp	r1, #0
   146e8:	beq	14728 <__assert_fail@plt+0x3664>
   146ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   146f0:	ldr	r2, [sp, #80]	; 0x50
   146f4:	tst	r0, #1
   146f8:	bne	1472c <__assert_fail@plt+0x3668>
   146fc:	ldrb	r0, [r1]
   14700:	cmp	r0, #0
   14704:	beq	1472c <__assert_fail@plt+0x3668>
   14708:	add	r1, r1, #1
   1470c:	cmp	r8, sl
   14710:	strbcc	r0, [r2, r8]
   14714:	add	r8, r8, #1
   14718:	ldrb	r0, [r1], #1
   1471c:	cmp	r0, #0
   14720:	bne	1470c <__assert_fail@plt+0x3648>
   14724:	b	1472c <__assert_fail@plt+0x3668>
   14728:	ldr	r2, [sp, #80]	; 0x50
   1472c:	cmp	r8, sl
   14730:	movcc	r0, #0
   14734:	strbcc	r0, [r2, r8]
   14738:	mov	r0, r8
   1473c:	sub	sp, fp, #28
   14740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14744:	mov	r2, #1
   14748:	b	14624 <__assert_fail@plt+0x3560>
   1474c:	ldr	r2, [sp, #84]	; 0x54
   14750:	mov	r7, #5
   14754:	b	1463c <__assert_fail@plt+0x3578>
   14758:	bl	110b8 <abort@plt>
   1475c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14760:	add	fp, sp, #28
   14764:	sub	sp, sp, #28
   14768:	movw	r5, #672	; 0x2a0
   1476c:	cmp	r2, #0
   14770:	mov	r4, r1
   14774:	mov	r7, r0
   14778:	str	r0, [sp, #20]
   1477c:	movt	r5, #3
   14780:	movne	r5, r2
   14784:	bl	10fe0 <__errno_location@plt>
   14788:	mov	sl, r0
   1478c:	ldm	r5, {r0, r1}
   14790:	ldr	r2, [r5, #40]	; 0x28
   14794:	ldr	r3, [r5, #44]	; 0x2c
   14798:	add	r9, r5, #8
   1479c:	ldr	r6, [sl]
   147a0:	orr	r8, r1, #1
   147a4:	mov	r1, #0
   147a8:	str	r6, [sp, #24]
   147ac:	stm	sp, {r0, r8, r9}
   147b0:	str	r2, [sp, #12]
   147b4:	str	r3, [sp, #16]
   147b8:	mov	r0, #0
   147bc:	mov	r2, r7
   147c0:	mov	r3, r4
   147c4:	mov	r6, r4
   147c8:	bl	13754 <__assert_fail@plt+0x2690>
   147cc:	add	r7, r0, #1
   147d0:	mov	r0, r7
   147d4:	bl	1596c <__assert_fail@plt+0x48a8>
   147d8:	mov	r4, r0
   147dc:	ldr	r0, [r5]
   147e0:	ldr	r2, [r5, #44]	; 0x2c
   147e4:	ldr	r1, [r5, #40]	; 0x28
   147e8:	mov	r3, r6
   147ec:	stm	sp, {r0, r8, r9}
   147f0:	str	r2, [sp, #16]
   147f4:	str	r1, [sp, #12]
   147f8:	mov	r0, r4
   147fc:	mov	r1, r7
   14800:	ldr	r2, [sp, #20]
   14804:	bl	13754 <__assert_fail@plt+0x2690>
   14808:	ldr	r0, [sp, #24]
   1480c:	str	r0, [sl]
   14810:	mov	r0, r4
   14814:	sub	sp, fp, #28
   14818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1481c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14820:	add	fp, sp, #28
   14824:	sub	sp, sp, #36	; 0x24
   14828:	movw	r8, #672	; 0x2a0
   1482c:	cmp	r3, #0
   14830:	mov	r4, r2
   14834:	str	r2, [sp, #24]
   14838:	mov	r5, r1
   1483c:	mov	r6, r0
   14840:	str	r0, [sp, #20]
   14844:	movt	r8, #3
   14848:	movne	r8, r3
   1484c:	bl	10fe0 <__errno_location@plt>
   14850:	str	r0, [sp, #28]
   14854:	cmp	r4, #0
   14858:	add	sl, r8, #8
   1485c:	ldm	r8, {r3, r9}
   14860:	ldr	r7, [r0]
   14864:	ldr	r1, [r8, #40]	; 0x28
   14868:	ldr	r2, [r8, #44]	; 0x2c
   1486c:	mov	r0, #0
   14870:	orreq	r9, r9, #1
   14874:	str	r7, [sp, #32]
   14878:	mov	r7, r5
   1487c:	stm	sp, {r3, r9, sl}
   14880:	str	r1, [sp, #12]
   14884:	str	r2, [sp, #16]
   14888:	mov	r1, #0
   1488c:	mov	r2, r6
   14890:	mov	r3, r5
   14894:	bl	13754 <__assert_fail@plt+0x2690>
   14898:	add	r4, r0, #1
   1489c:	mov	r5, r0
   148a0:	mov	r0, r4
   148a4:	bl	1596c <__assert_fail@plt+0x48a8>
   148a8:	mov	r6, r0
   148ac:	ldr	r0, [r8]
   148b0:	ldr	r2, [r8, #44]	; 0x2c
   148b4:	ldr	r1, [r8, #40]	; 0x28
   148b8:	mov	r3, r7
   148bc:	stm	sp, {r0, r9, sl}
   148c0:	str	r2, [sp, #16]
   148c4:	str	r1, [sp, #12]
   148c8:	mov	r0, r6
   148cc:	mov	r1, r4
   148d0:	ldr	r2, [sp, #20]
   148d4:	bl	13754 <__assert_fail@plt+0x2690>
   148d8:	ldr	r0, [sp, #24]
   148dc:	ldr	r1, [sp, #32]
   148e0:	ldr	r2, [sp, #28]
   148e4:	cmp	r0, #0
   148e8:	str	r1, [r2]
   148ec:	strne	r5, [r0]
   148f0:	mov	r0, r6
   148f4:	sub	sp, fp, #28
   148f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14900:	add	fp, sp, #24
   14904:	movw	r5, #33020	; 0x80fc
   14908:	movw	r8, #33016	; 0x80f8
   1490c:	movt	r5, #2
   14910:	movt	r8, #2
   14914:	ldr	r0, [r5]
   14918:	ldr	r4, [r8]
   1491c:	cmp	r0, #2
   14920:	blt	1494c <__assert_fail@plt+0x3888>
   14924:	add	r7, r4, #12
   14928:	mov	r6, #0
   1492c:	ldr	r0, [r7, r6, lsl #3]
   14930:	bl	16dd8 <__assert_fail@plt+0x5d14>
   14934:	ldr	r1, [r5]
   14938:	add	r2, r6, #2
   1493c:	add	r0, r6, #1
   14940:	mov	r6, r0
   14944:	cmp	r2, r1
   14948:	blt	1492c <__assert_fail@plt+0x3868>
   1494c:	ldr	r0, [r4, #4]
   14950:	movw	r7, #720	; 0x2d0
   14954:	movt	r7, #3
   14958:	cmp	r0, r7
   1495c:	beq	14974 <__assert_fail@plt+0x38b0>
   14960:	bl	16dd8 <__assert_fail@plt+0x5d14>
   14964:	movw	r0, #33024	; 0x8100
   14968:	mov	r6, #256	; 0x100
   1496c:	movt	r0, #2
   14970:	strd	r6, [r0]
   14974:	movw	r6, #33024	; 0x8100
   14978:	movt	r6, #2
   1497c:	cmp	r4, r6
   14980:	beq	14990 <__assert_fail@plt+0x38cc>
   14984:	mov	r0, r4
   14988:	bl	16dd8 <__assert_fail@plt+0x5d14>
   1498c:	str	r6, [r8]
   14990:	mov	r0, #1
   14994:	str	r0, [r5]
   14998:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1499c:	movw	r3, #672	; 0x2a0
   149a0:	mvn	r2, #0
   149a4:	movt	r3, #3
   149a8:	b	149ac <__assert_fail@plt+0x38e8>
   149ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149b0:	add	fp, sp, #28
   149b4:	sub	sp, sp, #44	; 0x2c
   149b8:	mov	r7, r3
   149bc:	str	r2, [sp, #36]	; 0x24
   149c0:	str	r1, [sp, #32]
   149c4:	mov	r5, r0
   149c8:	bl	10fe0 <__errno_location@plt>
   149cc:	cmp	r5, #0
   149d0:	blt	14b3c <__assert_fail@plt+0x3a78>
   149d4:	cmn	r5, #-2147483647	; 0x80000001
   149d8:	beq	14b3c <__assert_fail@plt+0x3a78>
   149dc:	movw	r8, #33020	; 0x80fc
   149e0:	movw	r4, #33016	; 0x80f8
   149e4:	str	r0, [sp, #28]
   149e8:	ldr	r0, [r0]
   149ec:	movt	r8, #2
   149f0:	movt	r4, #2
   149f4:	ldr	r1, [r8]
   149f8:	ldr	r6, [r4]
   149fc:	str	r0, [sp, #24]
   14a00:	cmp	r1, r5
   14a04:	ble	14a10 <__assert_fail@plt+0x394c>
   14a08:	mov	sl, r6
   14a0c:	b	14a78 <__assert_fail@plt+0x39b4>
   14a10:	movw	r9, #33024	; 0x8100
   14a14:	mov	r0, #8
   14a18:	add	r2, r5, #1
   14a1c:	str	r1, [fp, #-32]	; 0xffffffe0
   14a20:	mvn	r3, #-2147483648	; 0x80000000
   14a24:	movt	r9, #2
   14a28:	str	r0, [sp]
   14a2c:	sub	r2, r2, r1
   14a30:	sub	r1, fp, #32
   14a34:	subs	r0, r6, r9
   14a38:	movne	r0, r6
   14a3c:	bl	15b6c <__assert_fail@plt+0x4aa8>
   14a40:	cmp	r6, r9
   14a44:	mov	sl, r0
   14a48:	str	r0, [r4]
   14a4c:	ldrdeq	r0, [r9]
   14a50:	stmeq	sl, {r0, r1}
   14a54:	ldr	r1, [r8]
   14a58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a5c:	add	r0, sl, r1, lsl #3
   14a60:	sub	r1, r2, r1
   14a64:	lsl	r2, r1, #3
   14a68:	mov	r1, #0
   14a6c:	bl	10ff8 <memset@plt>
   14a70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a74:	str	r0, [r8]
   14a78:	mov	r9, sl
   14a7c:	ldr	r6, [r9, r5, lsl #3]!
   14a80:	ldr	r4, [r9, #4]!
   14a84:	ldm	r7, {r0, r1}
   14a88:	ldr	r2, [r7, #40]	; 0x28
   14a8c:	ldr	r3, [r7, #44]	; 0x2c
   14a90:	orr	r8, r1, #1
   14a94:	add	r1, r7, #8
   14a98:	stm	sp, {r0, r8}
   14a9c:	add	r0, sp, #8
   14aa0:	str	r1, [sp, #20]
   14aa4:	stm	r0, {r1, r2, r3}
   14aa8:	mov	r0, r4
   14aac:	mov	r1, r6
   14ab0:	ldr	r2, [sp, #32]
   14ab4:	ldr	r3, [sp, #36]	; 0x24
   14ab8:	bl	13754 <__assert_fail@plt+0x2690>
   14abc:	cmp	r6, r0
   14ac0:	bhi	14b24 <__assert_fail@plt+0x3a60>
   14ac4:	add	r6, r0, #1
   14ac8:	movw	r0, #720	; 0x2d0
   14acc:	movt	r0, #3
   14ad0:	str	r6, [sl, r5, lsl #3]
   14ad4:	cmp	r4, r0
   14ad8:	beq	14ae4 <__assert_fail@plt+0x3a20>
   14adc:	mov	r0, r4
   14ae0:	bl	16dd8 <__assert_fail@plt+0x5d14>
   14ae4:	mov	r0, r6
   14ae8:	bl	1596c <__assert_fail@plt+0x48a8>
   14aec:	str	r0, [r9]
   14af0:	mov	r4, r0
   14af4:	add	r3, sp, #8
   14af8:	ldr	r0, [r7]
   14afc:	ldr	r1, [r7, #40]	; 0x28
   14b00:	ldr	r2, [r7, #44]	; 0x2c
   14b04:	stm	sp, {r0, r8}
   14b08:	ldr	r0, [sp, #20]
   14b0c:	stm	r3, {r0, r1, r2}
   14b10:	mov	r0, r4
   14b14:	mov	r1, r6
   14b18:	ldr	r2, [sp, #32]
   14b1c:	ldr	r3, [sp, #36]	; 0x24
   14b20:	bl	13754 <__assert_fail@plt+0x2690>
   14b24:	ldr	r0, [sp, #28]
   14b28:	ldr	r1, [sp, #24]
   14b2c:	str	r1, [r0]
   14b30:	mov	r0, r4
   14b34:	sub	sp, fp, #28
   14b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b3c:	bl	110b8 <abort@plt>
   14b40:	movw	r3, #672	; 0x2a0
   14b44:	movt	r3, #3
   14b48:	b	149ac <__assert_fail@plt+0x38e8>
   14b4c:	movw	r3, #672	; 0x2a0
   14b50:	mov	r1, r0
   14b54:	mov	r0, #0
   14b58:	mvn	r2, #0
   14b5c:	movt	r3, #3
   14b60:	b	149ac <__assert_fail@plt+0x38e8>
   14b64:	movw	r3, #672	; 0x2a0
   14b68:	mov	r2, r1
   14b6c:	mov	r1, r0
   14b70:	mov	r0, #0
   14b74:	movt	r3, #3
   14b78:	b	149ac <__assert_fail@plt+0x38e8>
   14b7c:	push	{fp, lr}
   14b80:	mov	fp, sp
   14b84:	sub	sp, sp, #48	; 0x30
   14b88:	vmov.i32	q8, #0	; 0x00000000
   14b8c:	mov	ip, #32
   14b90:	mov	r3, sp
   14b94:	mov	lr, r2
   14b98:	cmp	r1, #10
   14b9c:	add	r2, r3, #16
   14ba0:	vst1.64	{d16-d17}, [r3], ip
   14ba4:	vst1.64	{d16-d17}, [r3]
   14ba8:	vst1.64	{d16-d17}, [r2]
   14bac:	beq	14bcc <__assert_fail@plt+0x3b08>
   14bb0:	str	r1, [sp]
   14bb4:	mov	r3, sp
   14bb8:	mov	r1, lr
   14bbc:	mvn	r2, #0
   14bc0:	bl	149ac <__assert_fail@plt+0x38e8>
   14bc4:	mov	sp, fp
   14bc8:	pop	{fp, pc}
   14bcc:	bl	110b8 <abort@plt>
   14bd0:	push	{r4, sl, fp, lr}
   14bd4:	add	fp, sp, #8
   14bd8:	sub	sp, sp, #48	; 0x30
   14bdc:	mov	ip, r3
   14be0:	mov	r3, sp
   14be4:	vmov.i32	q8, #0	; 0x00000000
   14be8:	mov	lr, #32
   14bec:	cmp	r1, #10
   14bf0:	add	r4, r3, #16
   14bf4:	vst1.64	{d16-d17}, [r3], lr
   14bf8:	vst1.64	{d16-d17}, [r3]
   14bfc:	vst1.64	{d16-d17}, [r4]
   14c00:	beq	14c20 <__assert_fail@plt+0x3b5c>
   14c04:	str	r1, [sp]
   14c08:	mov	r1, r2
   14c0c:	mov	r3, sp
   14c10:	mov	r2, ip
   14c14:	bl	149ac <__assert_fail@plt+0x38e8>
   14c18:	sub	sp, fp, #8
   14c1c:	pop	{r4, sl, fp, pc}
   14c20:	bl	110b8 <abort@plt>
   14c24:	push	{fp, lr}
   14c28:	mov	fp, sp
   14c2c:	sub	sp, sp, #48	; 0x30
   14c30:	mov	r3, sp
   14c34:	vmov.i32	q8, #0	; 0x00000000
   14c38:	mov	ip, #32
   14c3c:	cmp	r0, #10
   14c40:	add	r2, r3, #16
   14c44:	vst1.64	{d16-d17}, [r3], ip
   14c48:	vst1.64	{d16-d17}, [r3]
   14c4c:	vst1.64	{d16-d17}, [r2]
   14c50:	beq	14c70 <__assert_fail@plt+0x3bac>
   14c54:	str	r0, [sp]
   14c58:	mov	r3, sp
   14c5c:	mov	r0, #0
   14c60:	mvn	r2, #0
   14c64:	bl	149ac <__assert_fail@plt+0x38e8>
   14c68:	mov	sp, fp
   14c6c:	pop	{fp, pc}
   14c70:	bl	110b8 <abort@plt>
   14c74:	push	{fp, lr}
   14c78:	mov	fp, sp
   14c7c:	sub	sp, sp, #48	; 0x30
   14c80:	mov	r3, sp
   14c84:	vmov.i32	q8, #0	; 0x00000000
   14c88:	mov	ip, #32
   14c8c:	cmp	r0, #10
   14c90:	add	lr, r3, #16
   14c94:	vst1.64	{d16-d17}, [r3], ip
   14c98:	vst1.64	{d16-d17}, [r3]
   14c9c:	vst1.64	{d16-d17}, [lr]
   14ca0:	beq	14cbc <__assert_fail@plt+0x3bf8>
   14ca4:	str	r0, [sp]
   14ca8:	mov	r3, sp
   14cac:	mov	r0, #0
   14cb0:	bl	149ac <__assert_fail@plt+0x38e8>
   14cb4:	mov	sp, fp
   14cb8:	pop	{fp, pc}
   14cbc:	bl	110b8 <abort@plt>
   14cc0:	push	{r4, sl, fp, lr}
   14cc4:	add	fp, sp, #8
   14cc8:	sub	sp, sp, #48	; 0x30
   14ccc:	mov	lr, r0
   14cd0:	movw	r0, #672	; 0x2a0
   14cd4:	mov	r3, #32
   14cd8:	mov	ip, r1
   14cdc:	mov	r4, #1
   14ce0:	movt	r0, #3
   14ce4:	add	r1, r0, #16
   14ce8:	vld1.64	{d16-d17}, [r0], r3
   14cec:	mov	r3, sp
   14cf0:	vld1.64	{d18-d19}, [r1]
   14cf4:	add	r1, r3, #16
   14cf8:	vld1.64	{d20-d21}, [r0]
   14cfc:	add	r0, r3, #32
   14d00:	vst1.64	{d18-d19}, [r1]
   14d04:	mov	r1, r3
   14d08:	vst1.64	{d20-d21}, [r0]
   14d0c:	mov	r0, #28
   14d10:	and	r0, r0, r2, lsr #3
   14d14:	and	r2, r2, #31
   14d18:	vst1.64	{d16-d17}, [r1], r0
   14d1c:	ldr	r0, [r1, #8]
   14d20:	bic	r4, r4, r0, lsr r2
   14d24:	eor	r0, r0, r4, lsl r2
   14d28:	mov	r2, ip
   14d2c:	str	r0, [r1, #8]
   14d30:	mov	r0, #0
   14d34:	mov	r1, lr
   14d38:	bl	149ac <__assert_fail@plt+0x38e8>
   14d3c:	sub	sp, fp, #8
   14d40:	pop	{r4, sl, fp, pc}
   14d44:	push	{fp, lr}
   14d48:	mov	fp, sp
   14d4c:	sub	sp, sp, #48	; 0x30
   14d50:	mov	ip, r0
   14d54:	movw	r0, #672	; 0x2a0
   14d58:	mov	r3, #32
   14d5c:	movt	r0, #3
   14d60:	add	r2, r0, #16
   14d64:	vld1.64	{d16-d17}, [r0], r3
   14d68:	mov	r3, sp
   14d6c:	vld1.64	{d18-d19}, [r2]
   14d70:	add	r2, r3, #16
   14d74:	vld1.64	{d20-d21}, [r0]
   14d78:	add	r0, r3, #32
   14d7c:	vst1.64	{d18-d19}, [r2]
   14d80:	mov	r2, r3
   14d84:	vst1.64	{d20-d21}, [r0]
   14d88:	mov	r0, #28
   14d8c:	and	r0, r0, r1, lsr #3
   14d90:	and	r1, r1, #31
   14d94:	vst1.64	{d16-d17}, [r2], r0
   14d98:	mov	r0, #1
   14d9c:	ldr	lr, [r2, #8]
   14da0:	bic	r0, r0, lr, lsr r1
   14da4:	eor	r0, lr, r0, lsl r1
   14da8:	mov	r1, ip
   14dac:	str	r0, [r2, #8]
   14db0:	mov	r0, #0
   14db4:	mvn	r2, #0
   14db8:	bl	149ac <__assert_fail@plt+0x38e8>
   14dbc:	mov	sp, fp
   14dc0:	pop	{fp, pc}
   14dc4:	push	{fp, lr}
   14dc8:	mov	fp, sp
   14dcc:	sub	sp, sp, #48	; 0x30
   14dd0:	movw	r2, #672	; 0x2a0
   14dd4:	mov	r3, #32
   14dd8:	mov	r1, r0
   14ddc:	movt	r2, #3
   14de0:	add	r0, r2, #16
   14de4:	vld1.64	{d16-d17}, [r2], r3
   14de8:	mov	r3, sp
   14dec:	vld1.64	{d18-d19}, [r0]
   14df0:	add	r0, r3, #16
   14df4:	vld1.64	{d20-d21}, [r2]
   14df8:	mov	r2, r3
   14dfc:	vst1.64	{d18-d19}, [r0]
   14e00:	add	r0, r3, #32
   14e04:	vst1.64	{d20-d21}, [r0]
   14e08:	mov	r0, #12
   14e0c:	vst1.64	{d16-d17}, [r2], r0
   14e10:	ldr	r0, [r2]
   14e14:	orr	r0, r0, #67108864	; 0x4000000
   14e18:	str	r0, [r2]
   14e1c:	mov	r0, #0
   14e20:	mvn	r2, #0
   14e24:	bl	149ac <__assert_fail@plt+0x38e8>
   14e28:	mov	sp, fp
   14e2c:	pop	{fp, pc}
   14e30:	push	{fp, lr}
   14e34:	mov	fp, sp
   14e38:	sub	sp, sp, #48	; 0x30
   14e3c:	mov	ip, r1
   14e40:	mov	r1, r0
   14e44:	movw	r0, #672	; 0x2a0
   14e48:	mov	r3, #32
   14e4c:	movt	r0, #3
   14e50:	add	r2, r0, #16
   14e54:	vld1.64	{d16-d17}, [r0], r3
   14e58:	mov	r3, sp
   14e5c:	vld1.64	{d18-d19}, [r2]
   14e60:	add	r2, r3, #16
   14e64:	vld1.64	{d20-d21}, [r0]
   14e68:	add	r0, r3, #32
   14e6c:	vst1.64	{d18-d19}, [r2]
   14e70:	mov	r2, r3
   14e74:	vst1.64	{d20-d21}, [r0]
   14e78:	mov	r0, #12
   14e7c:	vst1.64	{d16-d17}, [r2], r0
   14e80:	ldr	r0, [r2]
   14e84:	orr	r0, r0, #67108864	; 0x4000000
   14e88:	str	r0, [r2]
   14e8c:	mov	r0, #0
   14e90:	mov	r2, ip
   14e94:	bl	149ac <__assert_fail@plt+0x38e8>
   14e98:	mov	sp, fp
   14e9c:	pop	{fp, pc}
   14ea0:	push	{r4, sl, fp, lr}
   14ea4:	add	fp, sp, #8
   14ea8:	sub	sp, sp, #96	; 0x60
   14eac:	mov	ip, r2
   14eb0:	mov	r2, sp
   14eb4:	vmov.i32	q8, #0	; 0x00000000
   14eb8:	mov	r4, #28
   14ebc:	cmp	r1, #10
   14ec0:	mov	r3, r2
   14ec4:	add	lr, r2, #16
   14ec8:	vst1.64	{d16-d17}, [r3], r4
   14ecc:	vst1.64	{d16-d17}, [lr]
   14ed0:	vst1.32	{d16-d17}, [r3]
   14ed4:	beq	14f24 <__assert_fail@plt+0x3e60>
   14ed8:	vld1.64	{d16-d17}, [r2], r4
   14edc:	vld1.64	{d18-d19}, [lr]
   14ee0:	add	r3, sp, #48	; 0x30
   14ee4:	add	r4, r3, #4
   14ee8:	vld1.32	{d20-d21}, [r2]
   14eec:	add	r2, r3, #20
   14ef0:	vst1.32	{d16-d17}, [r4]
   14ef4:	vst1.32	{d18-d19}, [r2]
   14ef8:	add	r2, r3, #32
   14efc:	vst1.32	{d20-d21}, [r2]
   14f00:	str	r1, [sp, #48]	; 0x30
   14f04:	mvn	r2, #0
   14f08:	ldr	r1, [sp, #60]	; 0x3c
   14f0c:	orr	r1, r1, #67108864	; 0x4000000
   14f10:	str	r1, [sp, #60]	; 0x3c
   14f14:	mov	r1, ip
   14f18:	bl	149ac <__assert_fail@plt+0x38e8>
   14f1c:	sub	sp, fp, #8
   14f20:	pop	{r4, sl, fp, pc}
   14f24:	bl	110b8 <abort@plt>
   14f28:	push	{r4, r5, fp, lr}
   14f2c:	add	fp, sp, #8
   14f30:	sub	sp, sp, #48	; 0x30
   14f34:	mov	ip, r3
   14f38:	movw	r3, #672	; 0x2a0
   14f3c:	mov	lr, #32
   14f40:	cmp	r1, #0
   14f44:	mov	r5, sp
   14f48:	movt	r3, #3
   14f4c:	cmpne	r2, #0
   14f50:	add	r4, r3, #16
   14f54:	vld1.64	{d16-d17}, [r3], lr
   14f58:	vld1.64	{d18-d19}, [r4]
   14f5c:	add	r4, r5, #16
   14f60:	vld1.64	{d20-d21}, [r3]
   14f64:	vst1.64	{d16-d17}, [r5], lr
   14f68:	mov	r3, #10
   14f6c:	vst1.64	{d18-d19}, [r4]
   14f70:	vst1.64	{d20-d21}, [r5]
   14f74:	str	r3, [sp]
   14f78:	bne	14f80 <__assert_fail@plt+0x3ebc>
   14f7c:	bl	110b8 <abort@plt>
   14f80:	str	r2, [sp, #44]	; 0x2c
   14f84:	str	r1, [sp, #40]	; 0x28
   14f88:	mov	r3, sp
   14f8c:	mov	r1, ip
   14f90:	mvn	r2, #0
   14f94:	bl	149ac <__assert_fail@plt+0x38e8>
   14f98:	sub	sp, fp, #8
   14f9c:	pop	{r4, r5, fp, pc}
   14fa0:	push	{r4, r5, fp, lr}
   14fa4:	add	fp, sp, #8
   14fa8:	sub	sp, sp, #48	; 0x30
   14fac:	mov	lr, r3
   14fb0:	movw	r3, #672	; 0x2a0
   14fb4:	mov	ip, #32
   14fb8:	cmp	r1, #0
   14fbc:	mov	r5, sp
   14fc0:	movt	r3, #3
   14fc4:	cmpne	r2, #0
   14fc8:	add	r4, r3, #16
   14fcc:	vld1.64	{d16-d17}, [r3], ip
   14fd0:	vld1.64	{d18-d19}, [r4]
   14fd4:	add	r4, r5, #16
   14fd8:	vld1.64	{d20-d21}, [r3]
   14fdc:	vst1.64	{d16-d17}, [r5], ip
   14fe0:	mov	r3, #10
   14fe4:	vst1.64	{d18-d19}, [r4]
   14fe8:	vst1.64	{d20-d21}, [r5]
   14fec:	str	r3, [sp]
   14ff0:	bne	14ff8 <__assert_fail@plt+0x3f34>
   14ff4:	bl	110b8 <abort@plt>
   14ff8:	ldr	ip, [fp, #8]
   14ffc:	str	r2, [sp, #44]	; 0x2c
   15000:	str	r1, [sp, #40]	; 0x28
   15004:	mov	r3, sp
   15008:	mov	r1, lr
   1500c:	mov	r2, ip
   15010:	bl	149ac <__assert_fail@plt+0x38e8>
   15014:	sub	sp, fp, #8
   15018:	pop	{r4, r5, fp, pc}
   1501c:	push	{r4, sl, fp, lr}
   15020:	add	fp, sp, #8
   15024:	sub	sp, sp, #48	; 0x30
   15028:	mov	ip, r2
   1502c:	movw	r2, #672	; 0x2a0
   15030:	mov	lr, #32
   15034:	cmp	r0, #0
   15038:	mov	r4, sp
   1503c:	movt	r2, #3
   15040:	cmpne	r1, #0
   15044:	add	r3, r2, #16
   15048:	vld1.64	{d16-d17}, [r2], lr
   1504c:	vld1.64	{d18-d19}, [r3]
   15050:	add	r3, r4, #16
   15054:	vld1.64	{d20-d21}, [r2]
   15058:	vst1.64	{d16-d17}, [r4], lr
   1505c:	mov	r2, #10
   15060:	vst1.64	{d18-d19}, [r3]
   15064:	vst1.64	{d20-d21}, [r4]
   15068:	str	r2, [sp]
   1506c:	bne	15074 <__assert_fail@plt+0x3fb0>
   15070:	bl	110b8 <abort@plt>
   15074:	str	r1, [sp, #44]	; 0x2c
   15078:	str	r0, [sp, #40]	; 0x28
   1507c:	mov	r3, sp
   15080:	mov	r0, #0
   15084:	mov	r1, ip
   15088:	mvn	r2, #0
   1508c:	bl	149ac <__assert_fail@plt+0x38e8>
   15090:	sub	sp, fp, #8
   15094:	pop	{r4, sl, fp, pc}
   15098:	push	{r4, r5, fp, lr}
   1509c:	add	fp, sp, #8
   150a0:	sub	sp, sp, #48	; 0x30
   150a4:	mov	lr, r2
   150a8:	movw	r2, #672	; 0x2a0
   150ac:	mov	ip, r3
   150b0:	mov	r3, #32
   150b4:	cmp	r0, #0
   150b8:	mov	r5, sp
   150bc:	movt	r2, #3
   150c0:	cmpne	r1, #0
   150c4:	add	r4, r2, #16
   150c8:	vld1.64	{d16-d17}, [r2], r3
   150cc:	vld1.64	{d18-d19}, [r4]
   150d0:	add	r4, r5, #16
   150d4:	vld1.64	{d20-d21}, [r2]
   150d8:	vst1.64	{d16-d17}, [r5], r3
   150dc:	mov	r2, #10
   150e0:	vst1.64	{d18-d19}, [r4]
   150e4:	vst1.64	{d20-d21}, [r5]
   150e8:	str	r2, [sp]
   150ec:	bne	150f4 <__assert_fail@plt+0x4030>
   150f0:	bl	110b8 <abort@plt>
   150f4:	str	r1, [sp, #44]	; 0x2c
   150f8:	str	r0, [sp, #40]	; 0x28
   150fc:	mov	r3, sp
   15100:	mov	r0, #0
   15104:	mov	r1, lr
   15108:	mov	r2, ip
   1510c:	bl	149ac <__assert_fail@plt+0x38e8>
   15110:	sub	sp, fp, #8
   15114:	pop	{r4, r5, fp, pc}
   15118:	movw	r3, #33032	; 0x8108
   1511c:	movt	r3, #2
   15120:	b	149ac <__assert_fail@plt+0x38e8>
   15124:	movw	r3, #33032	; 0x8108
   15128:	mov	r2, r1
   1512c:	mov	r1, r0
   15130:	mov	r0, #0
   15134:	movt	r3, #2
   15138:	b	149ac <__assert_fail@plt+0x38e8>
   1513c:	movw	r3, #33032	; 0x8108
   15140:	mvn	r2, #0
   15144:	movt	r3, #2
   15148:	b	149ac <__assert_fail@plt+0x38e8>
   1514c:	movw	r3, #33032	; 0x8108
   15150:	mov	r1, r0
   15154:	mov	r0, #0
   15158:	mvn	r2, #0
   1515c:	movt	r3, #2
   15160:	b	149ac <__assert_fail@plt+0x38e8>
   15164:	push	{r4, r5, fp, lr}
   15168:	add	fp, sp, #8
   1516c:	mov	r5, r0
   15170:	mov	r4, r1
   15174:	mov	r0, #0
   15178:	mov	r2, #5
   1517c:	mov	r1, r5
   15180:	bl	10efc <dcgettext@plt>
   15184:	cmp	r0, r5
   15188:	popne	{r4, r5, fp, pc}
   1518c:	bl	16e00 <__assert_fail@plt+0x5d3c>
   15190:	ldrb	r1, [r0]
   15194:	and	r1, r1, #223	; 0xdf
   15198:	cmp	r1, #71	; 0x47
   1519c:	beq	15204 <__assert_fail@plt+0x4140>
   151a0:	cmp	r1, #85	; 0x55
   151a4:	bne	15228 <__assert_fail@plt+0x4164>
   151a8:	ldrb	r1, [r0, #1]
   151ac:	and	r1, r1, #223	; 0xdf
   151b0:	cmp	r1, #84	; 0x54
   151b4:	bne	15228 <__assert_fail@plt+0x4164>
   151b8:	ldrb	r1, [r0, #2]
   151bc:	and	r1, r1, #223	; 0xdf
   151c0:	cmp	r1, #70	; 0x46
   151c4:	ldrbeq	r1, [r0, #3]
   151c8:	cmpeq	r1, #45	; 0x2d
   151cc:	bne	15228 <__assert_fail@plt+0x4164>
   151d0:	ldrb	r1, [r0, #4]
   151d4:	cmp	r1, #56	; 0x38
   151d8:	ldrbeq	r0, [r0, #5]
   151dc:	cmpeq	r0, #0
   151e0:	bne	15228 <__assert_fail@plt+0x4164>
   151e4:	ldrb	r1, [r5]
   151e8:	movw	r2, #31262	; 0x7a1e
   151ec:	movw	r0, #31266	; 0x7a22
   151f0:	movt	r2, #1
   151f4:	movt	r0, #1
   151f8:	cmp	r1, #96	; 0x60
   151fc:	moveq	r0, r2
   15200:	pop	{r4, r5, fp, pc}
   15204:	ldrb	r1, [r0, #1]
   15208:	and	r1, r1, #223	; 0xdf
   1520c:	cmp	r1, #66	; 0x42
   15210:	bne	15228 <__assert_fail@plt+0x4164>
   15214:	ldrb	r1, [r0, #2]
   15218:	cmp	r1, #49	; 0x31
   1521c:	ldrbeq	r1, [r0, #3]
   15220:	cmpeq	r1, #56	; 0x38
   15224:	beq	15244 <__assert_fail@plt+0x4180>
   15228:	movw	r1, #30856	; 0x7888
   1522c:	movw	r0, #31260	; 0x7a1c
   15230:	cmp	r4, #9
   15234:	movt	r1, #1
   15238:	movt	r0, #1
   1523c:	moveq	r0, r1
   15240:	pop	{r4, r5, fp, pc}
   15244:	ldrb	r1, [r0, #4]
   15248:	cmp	r1, #48	; 0x30
   1524c:	ldrbeq	r1, [r0, #5]
   15250:	cmpeq	r1, #51	; 0x33
   15254:	bne	15228 <__assert_fail@plt+0x4164>
   15258:	ldrb	r1, [r0, #6]
   1525c:	cmp	r1, #48	; 0x30
   15260:	ldrbeq	r0, [r0, #7]
   15264:	cmpeq	r0, #0
   15268:	bne	15228 <__assert_fail@plt+0x4164>
   1526c:	ldrb	r1, [r5]
   15270:	movw	r2, #31270	; 0x7a26
   15274:	movw	r0, #31274	; 0x7a2a
   15278:	movt	r2, #1
   1527c:	movt	r0, #1
   15280:	b	151f8 <__assert_fail@plt+0x4134>
   15284:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15288:	add	fp, sp, #24
   1528c:	sub	sp, sp, #32
   15290:	ldr	r6, [fp, #12]
   15294:	ldr	r7, [fp, #8]
   15298:	mov	r4, r2
   1529c:	mov	r8, r0
   152a0:	cmp	r1, #0
   152a4:	beq	152cc <__assert_fail@plt+0x4208>
   152a8:	movw	r2, #31364	; 0x7a84
   152ac:	mov	r5, r1
   152b0:	str	r3, [sp, #4]
   152b4:	str	r4, [sp]
   152b8:	mov	r0, r8
   152bc:	mov	r1, #1
   152c0:	movt	r2, #1
   152c4:	mov	r3, r5
   152c8:	b	152e4 <__assert_fail@plt+0x4220>
   152cc:	movw	r2, #31376	; 0x7a90
   152d0:	str	r3, [sp]
   152d4:	mov	r0, r8
   152d8:	mov	r1, #1
   152dc:	mov	r3, r4
   152e0:	movt	r2, #1
   152e4:	bl	1101c <__fprintf_chk@plt>
   152e8:	movw	r1, #31383	; 0x7a97
   152ec:	mov	r0, #0
   152f0:	mov	r2, #5
   152f4:	movt	r1, #1
   152f8:	bl	10efc <dcgettext@plt>
   152fc:	movw	r2, #32101	; 0x7d65
   15300:	mov	r3, r0
   15304:	movw	r0, #2022	; 0x7e6
   15308:	mov	r1, #1
   1530c:	str	r0, [sp]
   15310:	movt	r2, #1
   15314:	mov	r0, r8
   15318:	bl	1101c <__fprintf_chk@plt>
   1531c:	movw	r4, #30696	; 0x77e8
   15320:	mov	r1, r8
   15324:	movt	r4, #1
   15328:	mov	r0, r4
   1532c:	bl	10e60 <fputs_unlocked@plt>
   15330:	movw	r1, #31387	; 0x7a9b
   15334:	mov	r0, #0
   15338:	mov	r2, #5
   1533c:	movt	r1, #1
   15340:	bl	10efc <dcgettext@plt>
   15344:	movw	r3, #31558	; 0x7b46
   15348:	mov	r2, r0
   1534c:	mov	r0, r8
   15350:	mov	r1, #1
   15354:	movt	r3, #1
   15358:	bl	1101c <__fprintf_chk@plt>
   1535c:	mov	r0, r4
   15360:	mov	r1, r8
   15364:	bl	10e60 <fputs_unlocked@plt>
   15368:	cmp	r6, #9
   1536c:	bhi	153a8 <__assert_fail@plt+0x42e4>
   15370:	add	r0, pc, #0
   15374:	ldr	pc, [r0, r6, lsl #2]
   15378:	andeq	r5, r1, r0, lsr #7
   1537c:			; <UNDEFINED> instruction: 0x000153b4
   15380:	andeq	r5, r1, r4, ror #7
   15384:	andeq	r5, r1, ip, lsl #8
   15388:	andeq	r5, r1, r4, lsr r4
   1538c:	andeq	r5, r1, ip, asr r4
   15390:	andeq	r5, r1, r4, lsl #9
   15394:			; <UNDEFINED> instruction: 0x000154bc
   15398:	andeq	r5, r1, ip, asr r5
   1539c:	andeq	r5, r1, r4, lsl #10
   153a0:	sub	sp, fp, #24
   153a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153a8:	movw	r1, #31911	; 0x7ca7
   153ac:	movt	r1, #1
   153b0:	b	1550c <__assert_fail@plt+0x4448>
   153b4:	movw	r1, #31592	; 0x7b68
   153b8:	mov	r0, #0
   153bc:	mov	r2, #5
   153c0:	movt	r1, #1
   153c4:	bl	10efc <dcgettext@plt>
   153c8:	ldr	r3, [r7]
   153cc:	mov	r2, r0
   153d0:	mov	r0, r8
   153d4:	mov	r1, #1
   153d8:	sub	sp, fp, #24
   153dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   153e0:	b	1101c <__fprintf_chk@plt>
   153e4:	movw	r1, #31608	; 0x7b78
   153e8:	mov	r0, #0
   153ec:	mov	r2, #5
   153f0:	movt	r1, #1
   153f4:	bl	10efc <dcgettext@plt>
   153f8:	mov	r2, r0
   153fc:	ldr	r3, [r7]
   15400:	ldr	r0, [r7, #4]
   15404:	str	r0, [sp]
   15408:	b	154f8 <__assert_fail@plt+0x4434>
   1540c:	movw	r1, #31631	; 0x7b8f
   15410:	mov	r0, #0
   15414:	mov	r2, #5
   15418:	movt	r1, #1
   1541c:	bl	10efc <dcgettext@plt>
   15420:	ldr	r3, [r7]
   15424:	mov	r2, r0
   15428:	ldmib	r7, {r0, r1}
   1542c:	stm	sp, {r0, r1}
   15430:	b	154f8 <__assert_fail@plt+0x4434>
   15434:	movw	r1, #31659	; 0x7bab
   15438:	mov	r0, #0
   1543c:	mov	r2, #5
   15440:	movt	r1, #1
   15444:	bl	10efc <dcgettext@plt>
   15448:	ldr	r3, [r7]
   1544c:	mov	r2, r0
   15450:	ldmib	r7, {r0, r1, r7}
   15454:	stm	sp, {r0, r1, r7}
   15458:	b	154f8 <__assert_fail@plt+0x4434>
   1545c:	movw	r1, #31691	; 0x7bcb
   15460:	mov	r0, #0
   15464:	mov	r2, #5
   15468:	movt	r1, #1
   1546c:	bl	10efc <dcgettext@plt>
   15470:	ldr	r3, [r7]
   15474:	mov	r2, r0
   15478:	ldmib	r7, {r0, r1, r6, r7}
   1547c:	stm	sp, {r0, r1, r6, r7}
   15480:	b	154f8 <__assert_fail@plt+0x4434>
   15484:	movw	r1, #31727	; 0x7bef
   15488:	mov	r0, #0
   1548c:	mov	r2, #5
   15490:	movt	r1, #1
   15494:	bl	10efc <dcgettext@plt>
   15498:	ldr	r3, [r7]
   1549c:	mov	r2, r0
   154a0:	ldmib	r7, {r0, r1, r6}
   154a4:	ldr	r5, [r7, #16]
   154a8:	ldr	r7, [r7, #20]
   154ac:	stm	sp, {r0, r1, r6}
   154b0:	str	r5, [sp, #12]
   154b4:	str	r7, [sp, #16]
   154b8:	b	154f8 <__assert_fail@plt+0x4434>
   154bc:	movw	r1, #31767	; 0x7c17
   154c0:	mov	r0, #0
   154c4:	mov	r2, #5
   154c8:	movt	r1, #1
   154cc:	bl	10efc <dcgettext@plt>
   154d0:	ldr	r3, [r7]
   154d4:	mov	r2, r0
   154d8:	ldmib	r7, {r0, r1, r6}
   154dc:	ldr	r5, [r7, #16]
   154e0:	ldr	r4, [r7, #20]
   154e4:	ldr	r7, [r7, #24]
   154e8:	stm	sp, {r0, r1, r6}
   154ec:	str	r5, [sp, #12]
   154f0:	str	r4, [sp, #16]
   154f4:	str	r7, [sp, #20]
   154f8:	mov	r0, r8
   154fc:	mov	r1, #1
   15500:	b	155ac <__assert_fail@plt+0x44e8>
   15504:	movw	r1, #31859	; 0x7c73
   15508:	movt	r1, #1
   1550c:	mov	r0, #0
   15510:	mov	r2, #5
   15514:	bl	10efc <dcgettext@plt>
   15518:	mov	ip, r0
   1551c:	ldr	r3, [r7]
   15520:	ldr	r0, [r7, #4]
   15524:	ldr	r1, [r7, #8]
   15528:	ldr	r6, [r7, #12]
   1552c:	ldr	r5, [r7, #16]
   15530:	ldr	r4, [r7, #20]
   15534:	ldr	r2, [r7, #24]
   15538:	ldr	lr, [r7, #28]
   1553c:	ldr	r7, [r7, #32]
   15540:	stm	sp, {r0, r1, r6}
   15544:	str	r5, [sp, #12]
   15548:	str	r4, [sp, #16]
   1554c:	str	r2, [sp, #20]
   15550:	str	lr, [sp, #24]
   15554:	str	r7, [sp, #28]
   15558:	b	155a0 <__assert_fail@plt+0x44dc>
   1555c:	movw	r1, #31811	; 0x7c43
   15560:	mov	r0, #0
   15564:	mov	r2, #5
   15568:	movt	r1, #1
   1556c:	bl	10efc <dcgettext@plt>
   15570:	mov	ip, r0
   15574:	ldr	r3, [r7]
   15578:	ldmib	r7, {r0, r1, r6}
   1557c:	ldr	r5, [r7, #16]
   15580:	ldr	r4, [r7, #20]
   15584:	ldr	r2, [r7, #24]
   15588:	ldr	r7, [r7, #28]
   1558c:	stm	sp, {r0, r1, r6}
   15590:	str	r5, [sp, #12]
   15594:	str	r4, [sp, #16]
   15598:	str	r2, [sp, #20]
   1559c:	str	r7, [sp, #24]
   155a0:	mov	r0, r8
   155a4:	mov	r1, #1
   155a8:	mov	r2, ip
   155ac:	bl	1101c <__fprintf_chk@plt>
   155b0:	sub	sp, fp, #24
   155b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155b8:	push	{r4, sl, fp, lr}
   155bc:	add	fp, sp, #8
   155c0:	sub	sp, sp, #8
   155c4:	ldr	ip, [fp, #8]
   155c8:	mov	lr, #0
   155cc:	ldr	r4, [ip, lr, lsl #2]
   155d0:	add	lr, lr, #1
   155d4:	cmp	r4, #0
   155d8:	bne	155cc <__assert_fail@plt+0x4508>
   155dc:	sub	r4, lr, #1
   155e0:	str	ip, [sp]
   155e4:	str	r4, [sp, #4]
   155e8:	bl	15284 <__assert_fail@plt+0x41c0>
   155ec:	sub	sp, fp, #8
   155f0:	pop	{r4, sl, fp, pc}
   155f4:	push	{fp, lr}
   155f8:	mov	fp, sp
   155fc:	sub	sp, sp, #48	; 0x30
   15600:	ldr	ip, [fp, #8]
   15604:	ldr	lr, [ip]
   15608:	cmp	lr, #0
   1560c:	str	lr, [sp, #8]
   15610:	beq	156ac <__assert_fail@plt+0x45e8>
   15614:	ldr	lr, [ip, #4]
   15618:	cmp	lr, #0
   1561c:	str	lr, [sp, #12]
   15620:	beq	156b4 <__assert_fail@plt+0x45f0>
   15624:	ldr	lr, [ip, #8]
   15628:	cmp	lr, #0
   1562c:	str	lr, [sp, #16]
   15630:	beq	156bc <__assert_fail@plt+0x45f8>
   15634:	ldr	lr, [ip, #12]
   15638:	cmp	lr, #0
   1563c:	str	lr, [sp, #20]
   15640:	beq	156c4 <__assert_fail@plt+0x4600>
   15644:	ldr	lr, [ip, #16]
   15648:	cmp	lr, #0
   1564c:	str	lr, [sp, #24]
   15650:	beq	156cc <__assert_fail@plt+0x4608>
   15654:	ldr	lr, [ip, #20]
   15658:	cmp	lr, #0
   1565c:	str	lr, [sp, #28]
   15660:	beq	156d4 <__assert_fail@plt+0x4610>
   15664:	ldr	lr, [ip, #24]
   15668:	cmp	lr, #0
   1566c:	str	lr, [sp, #32]
   15670:	beq	156dc <__assert_fail@plt+0x4618>
   15674:	ldr	lr, [ip, #28]
   15678:	cmp	lr, #0
   1567c:	str	lr, [sp, #36]	; 0x24
   15680:	beq	156e4 <__assert_fail@plt+0x4620>
   15684:	ldr	lr, [ip, #32]
   15688:	cmp	lr, #0
   1568c:	str	lr, [sp, #40]	; 0x28
   15690:	beq	156ec <__assert_fail@plt+0x4628>
   15694:	ldr	lr, [ip, #36]	; 0x24
   15698:	mov	ip, #10
   1569c:	cmp	lr, #0
   156a0:	str	lr, [sp, #44]	; 0x2c
   156a4:	movweq	ip, #9
   156a8:	b	156f0 <__assert_fail@plt+0x462c>
   156ac:	mov	ip, #0
   156b0:	b	156f0 <__assert_fail@plt+0x462c>
   156b4:	mov	ip, #1
   156b8:	b	156f0 <__assert_fail@plt+0x462c>
   156bc:	mov	ip, #2
   156c0:	b	156f0 <__assert_fail@plt+0x462c>
   156c4:	mov	ip, #3
   156c8:	b	156f0 <__assert_fail@plt+0x462c>
   156cc:	mov	ip, #4
   156d0:	b	156f0 <__assert_fail@plt+0x462c>
   156d4:	mov	ip, #5
   156d8:	b	156f0 <__assert_fail@plt+0x462c>
   156dc:	mov	ip, #6
   156e0:	b	156f0 <__assert_fail@plt+0x462c>
   156e4:	mov	ip, #7
   156e8:	b	156f0 <__assert_fail@plt+0x462c>
   156ec:	mov	ip, #8
   156f0:	add	lr, sp, #8
   156f4:	str	ip, [sp, #4]
   156f8:	str	lr, [sp]
   156fc:	bl	15284 <__assert_fail@plt+0x41c0>
   15700:	mov	sp, fp
   15704:	pop	{fp, pc}
   15708:	push	{fp, lr}
   1570c:	mov	fp, sp
   15710:	sub	sp, sp, #56	; 0x38
   15714:	add	ip, fp, #8
   15718:	str	ip, [sp, #12]
   1571c:	ldr	lr, [fp, #8]
   15720:	cmp	lr, #0
   15724:	str	lr, [sp, #16]
   15728:	beq	157c4 <__assert_fail@plt+0x4700>
   1572c:	ldr	lr, [ip, #4]
   15730:	cmp	lr, #0
   15734:	str	lr, [sp, #20]
   15738:	beq	157cc <__assert_fail@plt+0x4708>
   1573c:	ldr	lr, [ip, #8]
   15740:	cmp	lr, #0
   15744:	str	lr, [sp, #24]
   15748:	beq	157d4 <__assert_fail@plt+0x4710>
   1574c:	ldr	lr, [ip, #12]
   15750:	cmp	lr, #0
   15754:	str	lr, [sp, #28]
   15758:	beq	157dc <__assert_fail@plt+0x4718>
   1575c:	ldr	lr, [ip, #16]
   15760:	cmp	lr, #0
   15764:	str	lr, [sp, #32]
   15768:	beq	157e4 <__assert_fail@plt+0x4720>
   1576c:	ldr	lr, [ip, #20]
   15770:	cmp	lr, #0
   15774:	str	lr, [sp, #36]	; 0x24
   15778:	beq	157ec <__assert_fail@plt+0x4728>
   1577c:	ldr	lr, [ip, #24]
   15780:	cmp	lr, #0
   15784:	str	lr, [sp, #40]	; 0x28
   15788:	beq	157f4 <__assert_fail@plt+0x4730>
   1578c:	ldr	lr, [ip, #28]
   15790:	cmp	lr, #0
   15794:	str	lr, [sp, #44]	; 0x2c
   15798:	beq	157fc <__assert_fail@plt+0x4738>
   1579c:	ldr	lr, [ip, #32]
   157a0:	cmp	lr, #0
   157a4:	str	lr, [sp, #48]	; 0x30
   157a8:	beq	15804 <__assert_fail@plt+0x4740>
   157ac:	ldr	lr, [ip, #36]	; 0x24
   157b0:	mov	ip, #10
   157b4:	cmp	lr, #0
   157b8:	str	lr, [sp, #52]	; 0x34
   157bc:	movweq	ip, #9
   157c0:	b	15808 <__assert_fail@plt+0x4744>
   157c4:	mov	ip, #0
   157c8:	b	15808 <__assert_fail@plt+0x4744>
   157cc:	mov	ip, #1
   157d0:	b	15808 <__assert_fail@plt+0x4744>
   157d4:	mov	ip, #2
   157d8:	b	15808 <__assert_fail@plt+0x4744>
   157dc:	mov	ip, #3
   157e0:	b	15808 <__assert_fail@plt+0x4744>
   157e4:	mov	ip, #4
   157e8:	b	15808 <__assert_fail@plt+0x4744>
   157ec:	mov	ip, #5
   157f0:	b	15808 <__assert_fail@plt+0x4744>
   157f4:	mov	ip, #6
   157f8:	b	15808 <__assert_fail@plt+0x4744>
   157fc:	mov	ip, #7
   15800:	b	15808 <__assert_fail@plt+0x4744>
   15804:	mov	ip, #8
   15808:	add	lr, sp, #16
   1580c:	str	ip, [sp, #4]
   15810:	str	lr, [sp]
   15814:	bl	15284 <__assert_fail@plt+0x41c0>
   15818:	mov	sp, fp
   1581c:	pop	{fp, pc}
   15820:	push	{fp, lr}
   15824:	mov	fp, sp
   15828:	movw	r0, #33108	; 0x8154
   1582c:	movt	r0, #2
   15830:	ldr	r1, [r0]
   15834:	movw	r0, #30696	; 0x77e8
   15838:	movt	r0, #1
   1583c:	bl	10e60 <fputs_unlocked@plt>
   15840:	movw	r1, #31971	; 0x7ce3
   15844:	mov	r0, #0
   15848:	mov	r2, #5
   1584c:	movt	r1, #1
   15850:	bl	10efc <dcgettext@plt>
   15854:	movw	r2, #31991	; 0x7cf7
   15858:	mov	r1, r0
   1585c:	mov	r0, #1
   15860:	movt	r2, #1
   15864:	bl	11004 <__printf_chk@plt>
   15868:	movw	r1, #32013	; 0x7d0d
   1586c:	mov	r0, #0
   15870:	mov	r2, #5
   15874:	movt	r1, #1
   15878:	bl	10efc <dcgettext@plt>
   1587c:	movw	r2, #30164	; 0x75d4
   15880:	movw	r3, #30505	; 0x7729
   15884:	mov	r1, r0
   15888:	mov	r0, #1
   1588c:	movt	r2, #1
   15890:	movt	r3, #1
   15894:	bl	11004 <__printf_chk@plt>
   15898:	movw	r1, #32033	; 0x7d21
   1589c:	mov	r0, #0
   158a0:	mov	r2, #5
   158a4:	movt	r1, #1
   158a8:	bl	10efc <dcgettext@plt>
   158ac:	movw	r2, #32072	; 0x7d48
   158b0:	mov	r1, r0
   158b4:	mov	r0, #1
   158b8:	movt	r2, #1
   158bc:	pop	{fp, lr}
   158c0:	b	11004 <__printf_chk@plt>
   158c4:	push	{r4, r5, r6, sl, fp, lr}
   158c8:	add	fp, sp, #16
   158cc:	mov	r4, r2
   158d0:	mov	r5, r1
   158d4:	mov	r6, r0
   158d8:	bl	16e98 <__assert_fail@plt+0x5dd4>
   158dc:	cmp	r0, #0
   158e0:	popne	{r4, r5, r6, sl, fp, pc}
   158e4:	cmp	r6, #0
   158e8:	beq	158fc <__assert_fail@plt+0x4838>
   158ec:	cmp	r5, #0
   158f0:	cmpne	r4, #0
   158f4:	bne	158fc <__assert_fail@plt+0x4838>
   158f8:	pop	{r4, r5, r6, sl, fp, pc}
   158fc:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15900:	push	{r4, r5, r6, sl, fp, lr}
   15904:	add	fp, sp, #16
   15908:	mov	r4, r2
   1590c:	mov	r5, r1
   15910:	mov	r6, r0
   15914:	bl	16e98 <__assert_fail@plt+0x5dd4>
   15918:	cmp	r0, #0
   1591c:	popne	{r4, r5, r6, sl, fp, pc}
   15920:	cmp	r6, #0
   15924:	beq	15938 <__assert_fail@plt+0x4874>
   15928:	cmp	r5, #0
   1592c:	cmpne	r4, #0
   15930:	bne	15938 <__assert_fail@plt+0x4874>
   15934:	pop	{r4, r5, r6, sl, fp, pc}
   15938:	bl	15e9c <__assert_fail@plt+0x4dd8>
   1593c:	push	{fp, lr}
   15940:	mov	fp, sp
   15944:	bl	16cd0 <__assert_fail@plt+0x5c0c>
   15948:	cmp	r0, #0
   1594c:	popne	{fp, pc}
   15950:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15954:	push	{fp, lr}
   15958:	mov	fp, sp
   1595c:	bl	16cd0 <__assert_fail@plt+0x5c0c>
   15960:	cmp	r0, #0
   15964:	popne	{fp, pc}
   15968:	bl	15e9c <__assert_fail@plt+0x4dd8>
   1596c:	push	{fp, lr}
   15970:	mov	fp, sp
   15974:	bl	16cd0 <__assert_fail@plt+0x5c0c>
   15978:	cmp	r0, #0
   1597c:	popne	{fp, pc}
   15980:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15984:	push	{r4, r5, fp, lr}
   15988:	add	fp, sp, #8
   1598c:	mov	r4, r1
   15990:	mov	r5, r0
   15994:	bl	16d00 <__assert_fail@plt+0x5c3c>
   15998:	cmp	r0, #0
   1599c:	popne	{r4, r5, fp, pc}
   159a0:	cmp	r5, #0
   159a4:	beq	159b4 <__assert_fail@plt+0x48f0>
   159a8:	cmp	r4, #0
   159ac:	bne	159b4 <__assert_fail@plt+0x48f0>
   159b0:	pop	{r4, r5, fp, pc}
   159b4:	bl	15e9c <__assert_fail@plt+0x4dd8>
   159b8:	push	{fp, lr}
   159bc:	mov	fp, sp
   159c0:	cmp	r1, #0
   159c4:	orreq	r1, r1, #1
   159c8:	bl	16d00 <__assert_fail@plt+0x5c3c>
   159cc:	cmp	r0, #0
   159d0:	popne	{fp, pc}
   159d4:	bl	15e9c <__assert_fail@plt+0x4dd8>
   159d8:	push	{fp, lr}
   159dc:	mov	fp, sp
   159e0:	clz	r3, r2
   159e4:	lsr	ip, r3, #5
   159e8:	clz	r3, r1
   159ec:	lsr	r3, r3, #5
   159f0:	orrs	r3, r3, ip
   159f4:	movwne	r1, #1
   159f8:	movwne	r2, #1
   159fc:	bl	16e98 <__assert_fail@plt+0x5dd4>
   15a00:	cmp	r0, #0
   15a04:	popne	{fp, pc}
   15a08:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15a0c:	push	{fp, lr}
   15a10:	mov	fp, sp
   15a14:	mov	r2, r1
   15a18:	mov	r1, r0
   15a1c:	mov	r0, #0
   15a20:	bl	16e98 <__assert_fail@plt+0x5dd4>
   15a24:	cmp	r0, #0
   15a28:	popne	{fp, pc}
   15a2c:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15a30:	push	{fp, lr}
   15a34:	mov	fp, sp
   15a38:	mov	r2, r1
   15a3c:	mov	r1, r0
   15a40:	clz	r0, r2
   15a44:	clz	r3, r1
   15a48:	lsr	r0, r0, #5
   15a4c:	lsr	r3, r3, #5
   15a50:	orrs	r0, r3, r0
   15a54:	movwne	r1, #1
   15a58:	movwne	r2, #1
   15a5c:	mov	r0, #0
   15a60:	bl	16e98 <__assert_fail@plt+0x5dd4>
   15a64:	cmp	r0, #0
   15a68:	popne	{fp, pc}
   15a6c:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15a70:	push	{r4, r5, r6, sl, fp, lr}
   15a74:	add	fp, sp, #16
   15a78:	ldr	r5, [r1]
   15a7c:	mov	r4, r1
   15a80:	mov	r6, r0
   15a84:	cmp	r0, #0
   15a88:	beq	15aa0 <__assert_fail@plt+0x49dc>
   15a8c:	mov	r0, #1
   15a90:	add	r0, r0, r5, lsr #1
   15a94:	adds	r5, r5, r0
   15a98:	bcc	15aa8 <__assert_fail@plt+0x49e4>
   15a9c:	b	15ae4 <__assert_fail@plt+0x4a20>
   15aa0:	cmp	r5, #0
   15aa4:	movweq	r5, #64	; 0x40
   15aa8:	mov	r0, r6
   15aac:	mov	r1, r5
   15ab0:	mov	r2, #1
   15ab4:	bl	16e98 <__assert_fail@plt+0x5dd4>
   15ab8:	cmp	r5, #0
   15abc:	mov	r1, r5
   15ac0:	movwne	r1, #1
   15ac4:	cmp	r0, #0
   15ac8:	bne	15adc <__assert_fail@plt+0x4a18>
   15acc:	clz	r2, r6
   15ad0:	lsr	r2, r2, #5
   15ad4:	orrs	r1, r2, r1
   15ad8:	bne	15ae4 <__assert_fail@plt+0x4a20>
   15adc:	str	r5, [r4]
   15ae0:	pop	{r4, r5, r6, sl, fp, pc}
   15ae4:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15ae8:	push	{r4, r5, r6, r7, fp, lr}
   15aec:	add	fp, sp, #16
   15af0:	ldr	r5, [r1]
   15af4:	mov	r6, r2
   15af8:	mov	r4, r1
   15afc:	mov	r7, r0
   15b00:	cmp	r0, #0
   15b04:	beq	15b1c <__assert_fail@plt+0x4a58>
   15b08:	mov	r0, #1
   15b0c:	add	r0, r0, r5, lsr #1
   15b10:	adds	r5, r5, r0
   15b14:	bcc	15b34 <__assert_fail@plt+0x4a70>
   15b18:	b	15b68 <__assert_fail@plt+0x4aa4>
   15b1c:	cmp	r5, #0
   15b20:	bne	15b34 <__assert_fail@plt+0x4a70>
   15b24:	mov	r0, #64	; 0x40
   15b28:	cmp	r6, #64	; 0x40
   15b2c:	udiv	r5, r0, r6
   15b30:	addhi	r5, r5, #1
   15b34:	mov	r0, r7
   15b38:	mov	r1, r5
   15b3c:	mov	r2, r6
   15b40:	bl	16e98 <__assert_fail@plt+0x5dd4>
   15b44:	cmp	r0, #0
   15b48:	bne	15b60 <__assert_fail@plt+0x4a9c>
   15b4c:	cmp	r7, #0
   15b50:	beq	15b68 <__assert_fail@plt+0x4aa4>
   15b54:	cmp	r6, #0
   15b58:	cmpne	r5, #0
   15b5c:	bne	15b68 <__assert_fail@plt+0x4aa4>
   15b60:	str	r5, [r4]
   15b64:	pop	{r4, r5, r6, r7, fp, pc}
   15b68:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15b6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b70:	add	fp, sp, #24
   15b74:	mov	r8, r1
   15b78:	ldr	r1, [r1]
   15b7c:	mov	r5, r0
   15b80:	add	r0, r1, r1, asr #1
   15b84:	cmp	r0, r1
   15b88:	mvnvs	r0, #-2147483648	; 0x80000000
   15b8c:	cmp	r0, r3
   15b90:	mov	r7, r0
   15b94:	movgt	r7, r3
   15b98:	cmn	r3, #1
   15b9c:	movle	r7, r0
   15ba0:	ldr	r0, [fp, #8]
   15ba4:	cmn	r0, #1
   15ba8:	ble	15bd0 <__assert_fail@plt+0x4b0c>
   15bac:	cmp	r0, #0
   15bb0:	beq	15c24 <__assert_fail@plt+0x4b60>
   15bb4:	cmn	r7, #1
   15bb8:	ble	15bf8 <__assert_fail@plt+0x4b34>
   15bbc:	mvn	r4, #-2147483648	; 0x80000000
   15bc0:	udiv	r6, r4, r0
   15bc4:	cmp	r6, r7
   15bc8:	bge	15c24 <__assert_fail@plt+0x4b60>
   15bcc:	b	15c34 <__assert_fail@plt+0x4b70>
   15bd0:	cmn	r7, #1
   15bd4:	ble	15c14 <__assert_fail@plt+0x4b50>
   15bd8:	cmn	r0, #1
   15bdc:	beq	15c24 <__assert_fail@plt+0x4b60>
   15be0:	mov	r6, #-2147483648	; 0x80000000
   15be4:	mvn	r4, #-2147483648	; 0x80000000
   15be8:	sdiv	r6, r6, r0
   15bec:	cmp	r6, r7
   15bf0:	bge	15c24 <__assert_fail@plt+0x4b60>
   15bf4:	b	15c34 <__assert_fail@plt+0x4b70>
   15bf8:	beq	15c24 <__assert_fail@plt+0x4b60>
   15bfc:	mov	r6, #-2147483648	; 0x80000000
   15c00:	mvn	r4, #-2147483648	; 0x80000000
   15c04:	sdiv	r6, r6, r7
   15c08:	cmp	r6, r0
   15c0c:	bge	15c24 <__assert_fail@plt+0x4b60>
   15c10:	b	15c34 <__assert_fail@plt+0x4b70>
   15c14:	mvn	r4, #-2147483648	; 0x80000000
   15c18:	sdiv	r6, r4, r0
   15c1c:	cmp	r7, r6
   15c20:	blt	15c34 <__assert_fail@plt+0x4b70>
   15c24:	mul	r6, r7, r0
   15c28:	mov	r4, #64	; 0x40
   15c2c:	cmp	r6, #63	; 0x3f
   15c30:	bgt	15c3c <__assert_fail@plt+0x4b78>
   15c34:	sdiv	r7, r4, r0
   15c38:	mul	r6, r7, r0
   15c3c:	cmp	r5, #0
   15c40:	moveq	r4, #0
   15c44:	streq	r4, [r8]
   15c48:	sub	r4, r7, r1
   15c4c:	cmp	r4, r2
   15c50:	bge	15cfc <__assert_fail@plt+0x4c38>
   15c54:	add	r7, r1, r2
   15c58:	mov	r6, #0
   15c5c:	mov	r2, #0
   15c60:	cmp	r7, r3
   15c64:	movwgt	r6, #1
   15c68:	cmn	r3, #1
   15c6c:	movwgt	r2, #1
   15c70:	cmp	r7, r1
   15c74:	bvs	15d30 <__assert_fail@plt+0x4c6c>
   15c78:	ands	r1, r2, r6
   15c7c:	bne	15d30 <__assert_fail@plt+0x4c6c>
   15c80:	cmn	r0, #1
   15c84:	ble	15cac <__assert_fail@plt+0x4be8>
   15c88:	cmp	r0, #0
   15c8c:	beq	15cf8 <__assert_fail@plt+0x4c34>
   15c90:	cmn	r7, #1
   15c94:	ble	15cd0 <__assert_fail@plt+0x4c0c>
   15c98:	mvn	r1, #-2147483648	; 0x80000000
   15c9c:	udiv	r1, r1, r0
   15ca0:	cmp	r1, r7
   15ca4:	bge	15cf8 <__assert_fail@plt+0x4c34>
   15ca8:	b	15d30 <__assert_fail@plt+0x4c6c>
   15cac:	cmn	r7, #1
   15cb0:	ble	15ce8 <__assert_fail@plt+0x4c24>
   15cb4:	cmn	r0, #1
   15cb8:	beq	15cf8 <__assert_fail@plt+0x4c34>
   15cbc:	mov	r1, #-2147483648	; 0x80000000
   15cc0:	sdiv	r1, r1, r0
   15cc4:	cmp	r1, r7
   15cc8:	bge	15cf8 <__assert_fail@plt+0x4c34>
   15ccc:	b	15d30 <__assert_fail@plt+0x4c6c>
   15cd0:	beq	15cf8 <__assert_fail@plt+0x4c34>
   15cd4:	mov	r1, #-2147483648	; 0x80000000
   15cd8:	sdiv	r1, r1, r7
   15cdc:	cmp	r1, r0
   15ce0:	bge	15cf8 <__assert_fail@plt+0x4c34>
   15ce4:	b	15d30 <__assert_fail@plt+0x4c6c>
   15ce8:	mvn	r1, #-2147483648	; 0x80000000
   15cec:	sdiv	r1, r1, r0
   15cf0:	cmp	r7, r1
   15cf4:	blt	15d30 <__assert_fail@plt+0x4c6c>
   15cf8:	mul	r6, r7, r0
   15cfc:	mov	r0, r5
   15d00:	mov	r1, r6
   15d04:	bl	16d00 <__assert_fail@plt+0x5c3c>
   15d08:	cmp	r6, #0
   15d0c:	movwne	r6, #1
   15d10:	cmp	r0, #0
   15d14:	bne	15d28 <__assert_fail@plt+0x4c64>
   15d18:	clz	r1, r5
   15d1c:	lsr	r1, r1, #5
   15d20:	orrs	r1, r1, r6
   15d24:	bne	15d30 <__assert_fail@plt+0x4c6c>
   15d28:	str	r7, [r8]
   15d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d30:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15d34:	push	{fp, lr}
   15d38:	mov	fp, sp
   15d3c:	mov	r1, #1
   15d40:	bl	16c7c <__assert_fail@plt+0x5bb8>
   15d44:	cmp	r0, #0
   15d48:	popne	{fp, pc}
   15d4c:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15d50:	push	{fp, lr}
   15d54:	mov	fp, sp
   15d58:	bl	16c7c <__assert_fail@plt+0x5bb8>
   15d5c:	cmp	r0, #0
   15d60:	popne	{fp, pc}
   15d64:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15d68:	push	{fp, lr}
   15d6c:	mov	fp, sp
   15d70:	mov	r1, #1
   15d74:	bl	16c7c <__assert_fail@plt+0x5bb8>
   15d78:	cmp	r0, #0
   15d7c:	popne	{fp, pc}
   15d80:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15d84:	push	{fp, lr}
   15d88:	mov	fp, sp
   15d8c:	bl	16c7c <__assert_fail@plt+0x5bb8>
   15d90:	cmp	r0, #0
   15d94:	popne	{fp, pc}
   15d98:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15d9c:	push	{r4, r5, r6, sl, fp, lr}
   15da0:	add	fp, sp, #16
   15da4:	mov	r5, r0
   15da8:	mov	r0, r1
   15dac:	mov	r4, r1
   15db0:	bl	16cd0 <__assert_fail@plt+0x5c0c>
   15db4:	cmp	r0, #0
   15db8:	beq	15dd4 <__assert_fail@plt+0x4d10>
   15dbc:	mov	r1, r5
   15dc0:	mov	r2, r4
   15dc4:	mov	r6, r0
   15dc8:	bl	10ec0 <memcpy@plt>
   15dcc:	mov	r0, r6
   15dd0:	pop	{r4, r5, r6, sl, fp, pc}
   15dd4:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15dd8:	push	{r4, r5, r6, sl, fp, lr}
   15ddc:	add	fp, sp, #16
   15de0:	mov	r5, r0
   15de4:	mov	r0, r1
   15de8:	mov	r4, r1
   15dec:	bl	16cd0 <__assert_fail@plt+0x5c0c>
   15df0:	cmp	r0, #0
   15df4:	beq	15e10 <__assert_fail@plt+0x4d4c>
   15df8:	mov	r1, r5
   15dfc:	mov	r2, r4
   15e00:	mov	r6, r0
   15e04:	bl	10ec0 <memcpy@plt>
   15e08:	mov	r0, r6
   15e0c:	pop	{r4, r5, r6, sl, fp, pc}
   15e10:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15e14:	push	{r4, r5, r6, sl, fp, lr}
   15e18:	add	fp, sp, #16
   15e1c:	mov	r5, r0
   15e20:	add	r0, r1, #1
   15e24:	mov	r4, r1
   15e28:	bl	16cd0 <__assert_fail@plt+0x5c0c>
   15e2c:	cmp	r0, #0
   15e30:	beq	15e58 <__assert_fail@plt+0x4d94>
   15e34:	mov	r6, r0
   15e38:	mov	r0, #0
   15e3c:	mov	r1, r5
   15e40:	mov	r2, r4
   15e44:	strb	r0, [r6, r4]
   15e48:	mov	r0, r6
   15e4c:	bl	10ec0 <memcpy@plt>
   15e50:	mov	r0, r6
   15e54:	pop	{r4, r5, r6, sl, fp, pc}
   15e58:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15e5c:	push	{r4, r5, r6, sl, fp, lr}
   15e60:	add	fp, sp, #16
   15e64:	mov	r4, r0
   15e68:	bl	10fc8 <strlen@plt>
   15e6c:	add	r5, r0, #1
   15e70:	mov	r0, r5
   15e74:	bl	16cd0 <__assert_fail@plt+0x5c0c>
   15e78:	cmp	r0, #0
   15e7c:	beq	15e98 <__assert_fail@plt+0x4dd4>
   15e80:	mov	r1, r4
   15e84:	mov	r2, r5
   15e88:	mov	r6, r0
   15e8c:	bl	10ec0 <memcpy@plt>
   15e90:	mov	r0, r6
   15e94:	pop	{r4, r5, r6, sl, fp, pc}
   15e98:	bl	15e9c <__assert_fail@plt+0x4dd8>
   15e9c:	push	{fp, lr}
   15ea0:	mov	fp, sp
   15ea4:	movw	r0, #33012	; 0x80f4
   15ea8:	movw	r1, #32148	; 0x7d94
   15eac:	mov	r2, #5
   15eb0:	movt	r0, #2
   15eb4:	movt	r1, #1
   15eb8:	ldr	r4, [r0]
   15ebc:	mov	r0, #0
   15ec0:	bl	10efc <dcgettext@plt>
   15ec4:	movw	r2, #31111	; 0x7987
   15ec8:	mov	r3, r0
   15ecc:	mov	r0, r4
   15ed0:	mov	r1, #0
   15ed4:	movt	r2, #1
   15ed8:	bl	10f68 <error@plt>
   15edc:	bl	110b8 <abort@plt>
   15ee0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ee4:	add	fp, sp, #24
   15ee8:	sub	sp, sp, #16
   15eec:	mov	r8, r0
   15ef0:	ldr	r0, [fp, #16]
   15ef4:	mov	r5, r3
   15ef8:	mov	r6, r2
   15efc:	mov	r2, r1
   15f00:	add	r3, sp, #8
   15f04:	mov	r1, #0
   15f08:	str	r0, [sp]
   15f0c:	mov	r0, r8
   15f10:	bl	15fdc <__assert_fail@plt+0x4f18>
   15f14:	cmp	r0, #0
   15f18:	bne	15fa4 <__assert_fail@plt+0x4ee0>
   15f1c:	ldr	r4, [sp, #8]
   15f20:	ldr	r7, [sp, #12]
   15f24:	subs	r0, r4, r6
   15f28:	sbcs	r0, r7, r5
   15f2c:	bcc	15f50 <__assert_fail@plt+0x4e8c>
   15f30:	ldr	r1, [fp, #8]
   15f34:	ldr	r0, [fp, #12]
   15f38:	subs	r1, r1, r4
   15f3c:	sbcs	r0, r0, r7
   15f40:	movcs	r0, r4
   15f44:	movcs	r1, r7
   15f48:	subcs	sp, fp, #24
   15f4c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f50:	bl	10fe0 <__errno_location@plt>
   15f54:	subs	r1, r4, #1073741824	; 0x40000000
   15f58:	sbcs	r1, r7, #0
   15f5c:	movcc	r1, #34	; 0x22
   15f60:	movcs	r1, #75	; 0x4b
   15f64:	str	r1, [r0]
   15f68:	ldr	r6, [r0]
   15f6c:	ldr	r4, [fp, #24]
   15f70:	ldr	r5, [fp, #20]
   15f74:	mov	r0, r8
   15f78:	bl	1514c <__assert_fail@plt+0x4088>
   15f7c:	subs	r1, r6, #22
   15f80:	movw	r2, #31107	; 0x7983
   15f84:	str	r0, [sp]
   15f88:	mov	r3, r5
   15f8c:	movne	r1, r6
   15f90:	cmp	r4, #0
   15f94:	movt	r2, #1
   15f98:	movweq	r4, #1
   15f9c:	mov	r0, r4
   15fa0:	bl	10f68 <error@plt>
   15fa4:	cmp	r0, #1
   15fa8:	beq	15fc0 <__assert_fail@plt+0x4efc>
   15fac:	cmp	r0, #3
   15fb0:	bne	15fcc <__assert_fail@plt+0x4f08>
   15fb4:	bl	10fe0 <__errno_location@plt>
   15fb8:	mov	r1, #0
   15fbc:	b	15f64 <__assert_fail@plt+0x4ea0>
   15fc0:	bl	10fe0 <__errno_location@plt>
   15fc4:	mov	r1, #75	; 0x4b
   15fc8:	b	15f64 <__assert_fail@plt+0x4ea0>
   15fcc:	bl	10fe0 <__errno_location@plt>
   15fd0:	b	15f68 <__assert_fail@plt+0x4ea4>
   15fd4:	mov	r1, #10
   15fd8:	b	15ee0 <__assert_fail@plt+0x4e1c>
   15fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fe0:	add	fp, sp, #28
   15fe4:	sub	sp, sp, #44	; 0x2c
   15fe8:	cmp	r2, #37	; 0x25
   15fec:	bcs	16c5c <__assert_fail@plt+0x5b98>
   15ff0:	ldr	sl, [fp, #8]
   15ff4:	mov	r6, r2
   15ff8:	mov	r7, r1
   15ffc:	mov	r4, r0
   16000:	str	r3, [sp, #36]	; 0x24
   16004:	bl	10fe0 <__errno_location@plt>
   16008:	mov	r5, r0
   1600c:	mov	r0, #0
   16010:	str	r0, [r5]
   16014:	bl	10fb0 <__ctype_b_loc@plt>
   16018:	ldr	r1, [r0]
   1601c:	mov	r2, r4
   16020:	ldrb	r0, [r2], #1
   16024:	add	r3, r1, r0, lsl #1
   16028:	ldrb	r3, [r3, #1]
   1602c:	tst	r3, #32
   16030:	bne	16020 <__assert_fail@plt+0x4f5c>
   16034:	sub	r9, fp, #32
   16038:	cmp	r7, #0
   1603c:	mov	r8, #4
   16040:	movne	r9, r7
   16044:	cmp	r0, #45	; 0x2d
   16048:	beq	16c50 <__assert_fail@plt+0x5b8c>
   1604c:	mov	r0, r4
   16050:	mov	r1, r9
   16054:	mov	r2, r6
   16058:	mov	r3, #0
   1605c:	bl	10ecc <__strtoull_internal@plt>
   16060:	mov	r7, r1
   16064:	ldr	r1, [r9]
   16068:	cmp	r1, r4
   1606c:	beq	16098 <__assert_fail@plt+0x4fd4>
   16070:	mov	r6, r0
   16074:	ldr	r0, [r5]
   16078:	cmp	r0, #0
   1607c:	beq	160d4 <__assert_fail@plt+0x5010>
   16080:	cmp	r0, #34	; 0x22
   16084:	bne	16c50 <__assert_fail@plt+0x5b8c>
   16088:	mov	r8, #1
   1608c:	cmp	sl, #0
   16090:	bne	160e0 <__assert_fail@plt+0x501c>
   16094:	b	16c48 <__assert_fail@plt+0x5b84>
   16098:	cmp	sl, #0
   1609c:	beq	16c50 <__assert_fail@plt+0x5b8c>
   160a0:	mov	r5, r1
   160a4:	ldrb	r1, [r4]
   160a8:	cmp	r1, #0
   160ac:	beq	16c50 <__assert_fail@plt+0x5b8c>
   160b0:	mov	r0, sl
   160b4:	bl	10fd4 <strchr@plt>
   160b8:	cmp	r0, #0
   160bc:	beq	16c50 <__assert_fail@plt+0x5b8c>
   160c0:	mov	r1, r5
   160c4:	mov	r8, #0
   160c8:	mov	r6, #1
   160cc:	mov	r7, #0
   160d0:	b	160e0 <__assert_fail@plt+0x501c>
   160d4:	mov	r8, r0
   160d8:	cmp	sl, #0
   160dc:	beq	16c48 <__assert_fail@plt+0x5b84>
   160e0:	ldrb	r4, [r1]
   160e4:	cmp	r4, #0
   160e8:	beq	16c48 <__assert_fail@plt+0x5b84>
   160ec:	str	r1, [sp, #32]
   160f0:	mov	r0, sl
   160f4:	mov	r1, r4
   160f8:	bl	10fd4 <strchr@plt>
   160fc:	cmp	r0, #0
   16100:	beq	163c8 <__assert_fail@plt+0x5304>
   16104:	sub	r0, r4, #69	; 0x45
   16108:	mov	r1, #1
   1610c:	mov	r3, #0
   16110:	mov	r5, #1024	; 0x400
   16114:	cmp	r0, #47	; 0x2f
   16118:	str	r1, [sp, #28]
   1611c:	bhi	16220 <__assert_fail@plt+0x515c>
   16120:	add	r1, pc, #0
   16124:	ldr	pc, [r1, r0, lsl #2]
   16128:	andeq	r6, r1, r8, ror #3
   1612c:	andeq	r6, r1, r0, lsr #4
   16130:	andeq	r6, r1, r8, ror #3
   16134:	andeq	r6, r1, r0, lsr #4
   16138:	andeq	r6, r1, r0, lsr #4
   1613c:	andeq	r6, r1, r0, lsr #4
   16140:	andeq	r6, r1, r8, ror #3
   16144:	andeq	r6, r1, r0, lsr #4
   16148:	andeq	r6, r1, r8, ror #3
   1614c:	andeq	r6, r1, r0, lsr #4
   16150:	andeq	r6, r1, r0, lsr #4
   16154:	andeq	r6, r1, r8, ror #3
   16158:	andeq	r6, r1, r0, lsr #4
   1615c:	andeq	r6, r1, r0, lsr #4
   16160:	andeq	r6, r1, r0, lsr #4
   16164:	andeq	r6, r1, r8, ror #3
   16168:	andeq	r6, r1, r0, lsr #4
   1616c:	andeq	r6, r1, r0, lsr #4
   16170:	andeq	r6, r1, r0, lsr #4
   16174:	andeq	r6, r1, r0, lsr #4
   16178:	andeq	r6, r1, r8, ror #3
   1617c:	andeq	r6, r1, r8, ror #3
   16180:	andeq	r6, r1, r0, lsr #4
   16184:	andeq	r6, r1, r0, lsr #4
   16188:	andeq	r6, r1, r0, lsr #4
   1618c:	andeq	r6, r1, r0, lsr #4
   16190:	andeq	r6, r1, r0, lsr #4
   16194:	andeq	r6, r1, r0, lsr #4
   16198:	andeq	r6, r1, r0, lsr #4
   1619c:	andeq	r6, r1, r0, lsr #4
   161a0:	andeq	r6, r1, r0, lsr #4
   161a4:	andeq	r6, r1, r0, lsr #4
   161a8:	andeq	r6, r1, r0, lsr #4
   161ac:	andeq	r6, r1, r0, lsr #4
   161b0:	andeq	r6, r1, r8, ror #3
   161b4:	andeq	r6, r1, r0, lsr #4
   161b8:	andeq	r6, r1, r0, lsr #4
   161bc:	andeq	r6, r1, r0, lsr #4
   161c0:	andeq	r6, r1, r8, ror #3
   161c4:	andeq	r6, r1, r0, lsr #4
   161c8:	andeq	r6, r1, r8, ror #3
   161cc:	andeq	r6, r1, r0, lsr #4
   161d0:	andeq	r6, r1, r0, lsr #4
   161d4:	andeq	r6, r1, r0, lsr #4
   161d8:	andeq	r6, r1, r0, lsr #4
   161dc:	andeq	r6, r1, r0, lsr #4
   161e0:	andeq	r6, r1, r0, lsr #4
   161e4:	andeq	r6, r1, r8, ror #3
   161e8:	mov	r0, sl
   161ec:	mov	r1, #48	; 0x30
   161f0:	bl	10fd4 <strchr@plt>
   161f4:	cmp	r0, #0
   161f8:	beq	1621c <__assert_fail@plt+0x5158>
   161fc:	ldr	r1, [sp, #32]
   16200:	ldrb	r0, [r1, #1]
   16204:	cmp	r0, #66	; 0x42
   16208:	cmpne	r0, #68	; 0x44
   1620c:	bne	163d4 <__assert_fail@plt+0x5310>
   16210:	mov	r5, #1000	; 0x3e8
   16214:	mov	r0, #2
   16218:	str	r0, [sp, #28]
   1621c:	mov	r3, #0
   16220:	sub	r0, r4, #66	; 0x42
   16224:	cmp	r0, #53	; 0x35
   16228:	bhi	163c8 <__assert_fail@plt+0x5304>
   1622c:	add	r1, pc, #0
   16230:	ldr	pc, [r1, r0, lsl #2]
   16234:	andeq	r6, r1, r0, asr r7
   16238:	andeq	r6, r1, r8, asr #7
   1623c:	andeq	r6, r1, r8, asr #7
   16240:	andeq	r6, r1, r8, ror r7
   16244:	andeq	r6, r1, r8, asr #7
   16248:	andeq	r6, r1, ip, lsl #6
   1624c:	andeq	r6, r1, r8, asr #7
   16250:	andeq	r6, r1, r8, asr #7
   16254:	andeq	r6, r1, r8, asr #7
   16258:	strdeq	r6, [r1], -r8
   1625c:	andeq	r6, r1, r8, asr #7
   16260:	andeq	r6, r1, r0, asr #8
   16264:	andeq	r6, r1, r8, asr #7
   16268:	andeq	r6, r1, r8, asr #7
   1626c:	ldrdeq	r6, [r1], -r0
   16270:	andeq	r6, r1, r8, asr #7
   16274:	andeq	r6, r1, r8, asr #7
   16278:	andeq	r6, r1, r8, asr #7
   1627c:	andeq	r6, r1, ip, asr #9
   16280:	andeq	r6, r1, r8, asr #7
   16284:	andeq	r6, r1, r8, asr #7
   16288:	andeq	r6, r1, r8, asr #7
   1628c:	andeq	r6, r1, r8, asr #7
   16290:	strdeq	r6, [r1], -r8
   16294:			; <UNDEFINED> instruction: 0x000165b4
   16298:	andeq	r6, r1, r8, asr #7
   1629c:	andeq	r6, r1, r8, asr #7
   162a0:	andeq	r6, r1, r8, asr #7
   162a4:	andeq	r6, r1, r8, asr #7
   162a8:	andeq	r6, r1, r8, asr #7
   162ac:	andeq	r6, r1, r8, asr #7
   162b0:	andeq	r6, r1, r8, asr #7
   162b4:	ldrdeq	r6, [r1], -r0
   162b8:	andeq	r6, r1, r8, lsr #24
   162bc:	andeq	r6, r1, r8, asr #7
   162c0:	andeq	r6, r1, r8, asr #7
   162c4:	andeq	r6, r1, r8, asr #7
   162c8:	andeq	r6, r1, ip, lsl #6
   162cc:	andeq	r6, r1, r8, asr #7
   162d0:	andeq	r6, r1, r8, asr #7
   162d4:	andeq	r6, r1, r8, asr #7
   162d8:	strdeq	r6, [r1], -r8
   162dc:	andeq	r6, r1, r8, asr #7
   162e0:	andeq	r6, r1, r0, asr #8
   162e4:	andeq	r6, r1, r8, asr #7
   162e8:	andeq	r6, r1, r8, asr #7
   162ec:	andeq	r6, r1, r8, asr #7
   162f0:	andeq	r6, r1, r8, asr #7
   162f4:	andeq	r6, r1, r8, asr #7
   162f8:	andeq	r6, r1, r8, asr #7
   162fc:	andeq	r6, r1, ip, asr #9
   16300:	andeq	r6, r1, r8, asr #7
   16304:	andeq	r6, r1, r8, asr #7
   16308:	andeq	r6, r1, r4, lsl #24
   1630c:	mvn	r0, #0
   16310:	mvn	r1, #0
   16314:	mov	r2, r5
   16318:	mov	sl, r3
   1631c:	bl	16fdc <__assert_fail@plt+0x5f18>
   16320:	subs	r3, r0, r6
   16324:	mov	lr, #0
   16328:	umull	r4, r2, r6, r5
   1632c:	str	r1, [sp, #20]
   16330:	sbcs	r3, r1, r7
   16334:	mla	ip, r6, sl, r2
   16338:	mov	r2, r1
   1633c:	movwcc	lr, #1
   16340:	mla	r7, r7, r5, ip
   16344:	mov	r2, #0
   16348:	cmp	lr, #0
   1634c:	mvnne	r4, #0
   16350:	mvnne	r7, #0
   16354:	subs	r6, r0, r4
   16358:	sbcs	r6, r1, r7
   1635c:	movwcc	r2, #1
   16360:	umull	r3, r6, r4, r5
   16364:	cmp	r2, #0
   16368:	str	r6, [sp, #16]
   1636c:	mvnne	r3, #0
   16370:	cmp	r2, #0
   16374:	umull	r6, ip, r3, r5
   16378:	mla	r1, r3, sl, ip
   1637c:	ldr	ip, [sp, #16]
   16380:	str	r1, [sp, #12]
   16384:	mla	r4, r4, sl, ip
   16388:	mla	r4, r7, r5, r4
   1638c:	ldr	r7, [sp, #12]
   16390:	mvnne	r4, #0
   16394:	subs	r0, r0, r3
   16398:	ldr	r0, [sp, #20]
   1639c:	mla	r7, r4, r5, r7
   163a0:	sbcs	r0, r0, r4
   163a4:	mov	r0, #0
   163a8:	movwcc	r0, #1
   163ac:	cmp	r0, #0
   163b0:	mov	r1, r0
   163b4:	orr	r0, lr, r2
   163b8:	mvnne	r7, #0
   163bc:	mvnne	r6, #0
   163c0:	orr	r3, r0, r1
   163c4:	b	16c28 <__assert_fail@plt+0x5b64>
   163c8:	ldr	r0, [sp, #36]	; 0x24
   163cc:	orr	r8, r8, #2
   163d0:	b	16c4c <__assert_fail@plt+0x5b88>
   163d4:	cmp	r0, #105	; 0x69
   163d8:	mov	r3, #0
   163dc:	bne	16220 <__assert_fail@plt+0x515c>
   163e0:	ldrb	r0, [r1, #2]
   163e4:	mov	r1, #1
   163e8:	cmp	r0, #66	; 0x42
   163ec:	movweq	r1, #3
   163f0:	str	r1, [sp, #28]
   163f4:	b	16220 <__assert_fail@plt+0x515c>
   163f8:	mvn	r0, #0
   163fc:	mvn	r1, #0
   16400:	mov	r2, r5
   16404:	mov	r4, r3
   16408:	bl	16fdc <__assert_fail@plt+0x5f18>
   1640c:	subs	r0, r0, r6
   16410:	mov	r2, #0
   16414:	sbcs	r0, r1, r7
   16418:	movwcc	r2, #1
   1641c:	umull	r0, r1, r6, r5
   16420:	mla	r1, r6, r4, r1
   16424:	cmp	r2, #0
   16428:	mov	r3, r2
   1642c:	mla	r7, r7, r5, r1
   16430:	mvnne	r0, #0
   16434:	mvnne	r7, #0
   16438:	mov	r6, r0
   1643c:	b	16c28 <__assert_fail@plt+0x5b64>
   16440:	mvn	r0, #0
   16444:	mvn	r1, #0
   16448:	mov	r2, r5
   1644c:	str	r3, [sp, #24]
   16450:	bl	16fdc <__assert_fail@plt+0x5f18>
   16454:	subs	r3, r0, r6
   16458:	mov	ip, r0
   1645c:	umull	r4, r0, r6, r5
   16460:	mov	sl, #0
   16464:	sbcs	r3, r1, r7
   16468:	str	r0, [sp, #20]
   1646c:	ldr	r0, [sp, #24]
   16470:	mov	r3, #0
   16474:	movwcc	r3, #1
   16478:	cmp	r3, #0
   1647c:	mvnne	r4, #0
   16480:	cmp	r3, #0
   16484:	umull	lr, r2, r4, r5
   16488:	mla	r2, r4, r0, r2
   1648c:	str	r2, [sp, #16]
   16490:	ldr	r2, [sp, #20]
   16494:	mla	r6, r6, r0, r2
   16498:	ldr	r0, [sp, #16]
   1649c:	mla	r6, r7, r5, r6
   164a0:	mvnne	r6, #0
   164a4:	mla	r7, r6, r5, r0
   164a8:	subs	r0, ip, r4
   164ac:	sbcs	r0, r1, r6
   164b0:	movwcc	sl, #1
   164b4:	cmp	sl, #0
   164b8:	orr	r3, r3, sl
   164bc:	mvnne	lr, #0
   164c0:	mvnne	r7, #0
   164c4:	mov	r6, lr
   164c8:	b	16c28 <__assert_fail@plt+0x5b64>
   164cc:	mvn	r0, #0
   164d0:	mvn	r1, #0
   164d4:	mov	r2, r5
   164d8:	mov	sl, r3
   164dc:	bl	16fdc <__assert_fail@plt+0x5f18>
   164e0:	subs	r3, r0, r6
   164e4:	mov	ip, r1
   164e8:	umull	r2, lr, r6, r5
   164ec:	str	r0, [sp, #20]
   164f0:	sbcs	r3, r1, r7
   164f4:	mov	r1, #0
   164f8:	mla	r6, r6, sl, lr
   164fc:	mov	lr, #0
   16500:	str	ip, [sp, #16]
   16504:	movwcc	r1, #1
   16508:	mla	r7, r7, r5, r6
   1650c:	cmp	r1, #0
   16510:	mvnne	r2, #0
   16514:	cmp	r1, #0
   16518:	umull	r3, r4, r2, r5
   1651c:	mvnne	r7, #0
   16520:	mla	r4, r2, sl, r4
   16524:	subs	r2, r0, r2
   16528:	sbcs	r2, ip, r7
   1652c:	mla	r4, r7, r5, r4
   16530:	movwcc	lr, #1
   16534:	mov	r2, #0
   16538:	cmp	lr, #0
   1653c:	mvnne	r3, #0
   16540:	mvnne	r4, #0
   16544:	subs	r7, r0, r3
   16548:	mov	r0, r5
   1654c:	sbcs	r7, ip, r4
   16550:	movwcc	r2, #1
   16554:	umull	r5, r7, r3, r5
   16558:	cmp	r2, #0
   1655c:	mla	r3, r3, sl, r7
   16560:	mvnne	r5, #0
   16564:	mla	r3, r4, r0, r3
   16568:	cmp	r2, #0
   1656c:	umull	r6, ip, r5, r0
   16570:	mvnne	r3, #0
   16574:	mla	ip, r5, sl, ip
   16578:	mla	r7, r3, r0, ip
   1657c:	ldr	r0, [sp, #20]
   16580:	subs	r0, r0, r5
   16584:	ldr	r0, [sp, #16]
   16588:	sbcs	r0, r0, r3
   1658c:	mov	r0, #0
   16590:	movwcc	r0, #1
   16594:	cmp	r0, #0
   16598:	mov	r3, r0
   1659c:	orr	r0, r1, lr
   165a0:	orr	r0, r0, r2
   165a4:	mvnne	r7, #0
   165a8:	mvnne	r6, #0
   165ac:	orr	r3, r0, r3
   165b0:	b	16c28 <__assert_fail@plt+0x5b64>
   165b4:	mvn	r0, #0
   165b8:	mvn	r1, #0
   165bc:	mov	r2, r5
   165c0:	mov	r4, r3
   165c4:	str	r3, [sp, #24]
   165c8:	bl	16fdc <__assert_fail@plt+0x5f18>
   165cc:	umull	r3, r2, r6, r5
   165d0:	mla	r2, r6, r4, r2
   165d4:	subs	r6, r0, r6
   165d8:	sbcs	r6, r1, r7
   165dc:	mla	ip, r7, r5, r2
   165e0:	ldr	r2, [sp, #24]
   165e4:	mov	r6, #0
   165e8:	movwcc	r6, #1
   165ec:	cmp	r6, #0
   165f0:	str	r6, [sp, #20]
   165f4:	mov	r6, #0
   165f8:	mvnne	r3, #0
   165fc:	mvnne	ip, #0
   16600:	subs	r4, r0, r3
   16604:	umull	r7, lr, r3, r5
   16608:	sbcs	r4, r1, ip
   1660c:	mla	r3, r3, r2, lr
   16610:	movwcc	r6, #1
   16614:	cmp	r6, #0
   16618:	str	r6, [sp, #16]
   1661c:	mvnne	r7, #0
   16620:	cmp	r6, #0
   16624:	umull	sl, r4, r7, r5
   16628:	mla	r4, r7, r2, r4
   1662c:	mla	r2, ip, r5, r3
   16630:	mov	ip, #0
   16634:	mvnne	r2, #0
   16638:	subs	r3, r0, r7
   1663c:	mla	r6, r2, r5, r4
   16640:	mov	r4, r0
   16644:	sbcs	r2, r1, r2
   16648:	mov	r0, #0
   1664c:	movwcc	r0, #1
   16650:	mov	r3, r4
   16654:	cmp	r0, #0
   16658:	str	r0, [sp, #12]
   1665c:	mov	r0, r1
   16660:	str	r3, [sp, #4]
   16664:	mvnne	sl, #0
   16668:	mvnne	r6, #0
   1666c:	str	r0, [sp, #8]
   16670:	subs	r2, r4, sl
   16674:	ldr	r4, [sp, #24]
   16678:	sbcs	r2, r1, r6
   1667c:	movwcc	ip, #1
   16680:	umull	r7, r2, sl, r5
   16684:	cmp	ip, #0
   16688:	mla	r2, sl, r4, r2
   1668c:	mvnne	r7, #0
   16690:	cmp	ip, #0
   16694:	mov	sl, #0
   16698:	umull	r1, lr, r7, r5
   1669c:	mla	r2, r6, r5, r2
   166a0:	mvnne	r2, #0
   166a4:	mla	lr, r7, r4, lr
   166a8:	subs	r6, r3, r7
   166ac:	mla	lr, r2, r5, lr
   166b0:	sbcs	r2, r0, r2
   166b4:	movwcc	sl, #1
   166b8:	mov	r2, #0
   166bc:	cmp	sl, #0
   166c0:	mvnne	r1, #0
   166c4:	mvnne	lr, #0
   166c8:	subs	r6, r3, r1
   166cc:	ldr	r3, [sp, #24]
   166d0:	sbcs	r6, r0, lr
   166d4:	umull	r0, r7, r1, r5
   166d8:	movwcc	r2, #1
   166dc:	cmp	r2, #0
   166e0:	mvnne	r0, #0
   166e4:	mla	r1, r1, r3, r7
   166e8:	cmp	r2, #0
   166ec:	umull	r6, r4, r0, r5
   166f0:	mla	r1, lr, r5, r1
   166f4:	mla	r4, r0, r3, r4
   166f8:	ldr	r3, [sp, #4]
   166fc:	mvnne	r1, #0
   16700:	mla	r7, r1, r5, r4
   16704:	ldr	r5, [sp, #16]
   16708:	subs	r0, r3, r0
   1670c:	ldr	r0, [sp, #8]
   16710:	sbcs	r0, r0, r1
   16714:	mov	r0, #0
   16718:	movwcc	r0, #1
   1671c:	cmp	r0, #0
   16720:	mov	r1, r0
   16724:	ldr	r0, [sp, #20]
   16728:	mvnne	r7, #0
   1672c:	mvnne	r6, #0
   16730:	orr	r0, r0, r5
   16734:	ldr	r5, [sp, #12]
   16738:	orr	r0, r0, r5
   1673c:	orr	r0, r0, ip
   16740:	orr	r0, r0, sl
   16744:	orr	r0, r0, r2
   16748:	orr	r0, r0, r1
   1674c:	b	16bc8 <__assert_fail@plt+0x5b04>
   16750:	mov	r1, #0
   16754:	lsl	r2, r7, #10
   16758:	lsl	r0, r6, #10
   1675c:	lsr	r3, r7, #22
   16760:	cmp	r1, r7, lsr #22
   16764:	orr	r2, r2, r6, lsr #22
   16768:	mvnne	r0, #0
   1676c:	movwne	r3, #1
   16770:	cmp	r1, r7, lsr #22
   16774:	b	16bf4 <__assert_fail@plt+0x5b30>
   16778:	mvn	r0, #0
   1677c:	mvn	r1, #0
   16780:	mov	r2, r5
   16784:	mov	sl, r3
   16788:	bl	16fdc <__assert_fail@plt+0x5f18>
   1678c:	subs	r2, r0, r6
   16790:	mov	ip, r0
   16794:	mov	r0, #0
   16798:	sbcs	r2, r1, r7
   1679c:	movwcc	r0, #1
   167a0:	umull	r4, r2, r6, r5
   167a4:	cmp	r0, #0
   167a8:	mla	r2, r6, sl, r2
   167ac:	str	r0, [sp, #20]
   167b0:	mvnne	r4, #0
   167b4:	cmp	r0, #0
   167b8:	mla	r2, r7, r5, r2
   167bc:	mov	r0, #0
   167c0:	umull	lr, r3, r4, r5
   167c4:	mvnne	r2, #0
   167c8:	mla	r3, r4, sl, r3
   167cc:	mla	r6, r2, r5, r3
   167d0:	subs	r3, ip, r4
   167d4:	sbcs	r2, r1, r2
   167d8:	mov	r3, r1
   167dc:	movwcc	r0, #1
   167e0:	str	r3, [sp, #8]
   167e4:	cmp	r0, #0
   167e8:	str	r0, [sp, #16]
   167ec:	mov	r0, ip
   167f0:	mvnne	lr, #0
   167f4:	mvnne	r6, #0
   167f8:	str	r0, [sp, #12]
   167fc:	subs	r2, ip, lr
   16800:	umull	r7, r4, lr, r5
   16804:	sbcs	r2, r1, r6
   16808:	mla	r4, lr, sl, r4
   1680c:	mov	r2, #0
   16810:	mla	r6, r6, r5, r4
   16814:	mov	r4, #0
   16818:	movwcc	r2, #1
   1681c:	cmp	r2, #0
   16820:	mvnne	r7, #0
   16824:	cmp	r2, #0
   16828:	umull	r1, ip, r7, r5
   1682c:	mvnne	r6, #0
   16830:	mla	ip, r7, sl, ip
   16834:	subs	r7, r0, r7
   16838:	mla	lr, r6, r5, ip
   1683c:	sbcs	r7, r3, r6
   16840:	mov	ip, #0
   16844:	movwcc	ip, #1
   16848:	cmp	ip, #0
   1684c:	mvnne	r1, #0
   16850:	mvnne	lr, #0
   16854:	subs	r7, r0, r1
   16858:	sbcs	r7, r3, lr
   1685c:	movwcc	r4, #1
   16860:	umull	r0, r7, r1, r5
   16864:	cmp	r4, #0
   16868:	mla	r1, r1, sl, r7
   1686c:	mvnne	r0, #0
   16870:	mla	r1, lr, r5, r1
   16874:	cmp	r4, #0
   16878:	umull	r6, r3, r0, r5
   1687c:	mvnne	r1, #0
   16880:	mla	r3, r0, sl, r3
   16884:	mla	r7, r1, r5, r3
   16888:	ldr	r3, [sp, #12]
   1688c:	subs	r0, r3, r0
   16890:	ldr	r3, [sp, #16]
   16894:	ldr	r0, [sp, #8]
   16898:	sbcs	r0, r0, r1
   1689c:	mov	r0, #0
   168a0:	movwcc	r0, #1
   168a4:	cmp	r0, #0
   168a8:	mov	r1, r0
   168ac:	ldr	r0, [sp, #20]
   168b0:	mvnne	r7, #0
   168b4:	mvnne	r6, #0
   168b8:	orr	r0, r0, r3
   168bc:	orr	r0, r0, r2
   168c0:	orr	r0, r0, ip
   168c4:	orr	r0, r0, r4
   168c8:	orr	r3, r0, r1
   168cc:	b	16c28 <__assert_fail@plt+0x5b64>
   168d0:	mvn	r0, #0
   168d4:	mvn	r1, #0
   168d8:	mov	r2, r5
   168dc:	mov	sl, r3
   168e0:	bl	16fdc <__assert_fail@plt+0x5f18>
   168e4:	umull	r3, r2, r6, r5
   168e8:	mov	lr, r1
   168ec:	mov	r1, r0
   168f0:	mla	r2, r6, sl, r2
   168f4:	subs	r6, r0, r6
   168f8:	mov	r0, #0
   168fc:	sbcs	r6, lr, r7
   16900:	mla	r2, r7, r5, r2
   16904:	movwcc	r0, #1
   16908:	cmp	r0, #0
   1690c:	str	r0, [sp, #20]
   16910:	mov	r0, r1
   16914:	mvnne	r3, #0
   16918:	mvnne	r2, #0
   1691c:	str	r0, [sp, #16]
   16920:	subs	r4, r1, r3
   16924:	umull	r7, ip, r3, r5
   16928:	sbcs	r4, lr, r2
   1692c:	mla	r3, r3, sl, ip
   16930:	mov	ip, #0
   16934:	mov	r4, #0
   16938:	mla	r2, r2, r5, r3
   1693c:	movwcc	r4, #1
   16940:	cmp	r4, #0
   16944:	mvnne	r7, #0
   16948:	cmp	r4, #0
   1694c:	umull	r1, r6, r7, r5
   16950:	mvnne	r2, #0
   16954:	mla	r6, r7, sl, r6
   16958:	mla	r3, r2, r5, r6
   1695c:	subs	r6, r0, r7
   16960:	sbcs	r2, lr, r2
   16964:	movwcc	ip, #1
   16968:	mov	r2, #0
   1696c:	cmp	ip, #0
   16970:	mvnne	r1, #0
   16974:	mvnne	r3, #0
   16978:	subs	r6, r0, r1
   1697c:	sbcs	r6, lr, r3
   16980:	movwcc	r2, #1
   16984:	umull	r0, r6, r1, r5
   16988:	cmp	r2, #0
   1698c:	str	r6, [sp, #12]
   16990:	mvnne	r0, #0
   16994:	cmp	r2, #0
   16998:	umull	r6, r7, r0, r5
   1699c:	mla	r7, r0, sl, r7
   169a0:	str	r7, [sp, #8]
   169a4:	ldr	r7, [sp, #12]
   169a8:	mla	r1, r1, sl, r7
   169ac:	mla	r1, r3, r5, r1
   169b0:	ldr	r3, [sp, #8]
   169b4:	mvnne	r1, #0
   169b8:	mla	r7, r1, r5, r3
   169bc:	ldr	r3, [sp, #16]
   169c0:	subs	r0, r3, r0
   169c4:	sbcs	r0, lr, r1
   169c8:	mov	r0, #0
   169cc:	movwcc	r0, #1
   169d0:	cmp	r0, #0
   169d4:	mov	r1, r0
   169d8:	ldr	r0, [sp, #20]
   169dc:	mvnne	r7, #0
   169e0:	mvnne	r6, #0
   169e4:	orr	r0, r0, r4
   169e8:	orr	r0, r0, ip
   169ec:	orr	r0, r0, r2
   169f0:	orr	r3, r0, r1
   169f4:	b	16c28 <__assert_fail@plt+0x5b64>
   169f8:	mvn	r0, #0
   169fc:	mvn	r1, #0
   16a00:	mov	r2, r5
   16a04:	mov	sl, r3
   16a08:	bl	16fdc <__assert_fail@plt+0x5f18>
   16a0c:	mov	lr, r0
   16a10:	subs	r0, r0, r6
   16a14:	mov	r2, #0
   16a18:	mov	ip, r1
   16a1c:	str	sl, [sp, #24]
   16a20:	sbcs	r0, r1, r7
   16a24:	umull	r3, r1, r6, r5
   16a28:	str	lr, [sp, #4]
   16a2c:	movwcc	r2, #1
   16a30:	mla	r6, r6, sl, r1
   16a34:	mov	r1, #0
   16a38:	cmp	r2, #0
   16a3c:	mla	r7, r7, r5, r6
   16a40:	str	r2, [sp, #20]
   16a44:	mvnne	r3, #0
   16a48:	cmp	r2, #0
   16a4c:	mov	r2, #0
   16a50:	umull	r0, r4, r3, r5
   16a54:	mvnne	r7, #0
   16a58:	mla	r4, r3, sl, r4
   16a5c:	subs	r3, lr, r3
   16a60:	sbcs	r3, ip, r7
   16a64:	mla	r4, r7, r5, r4
   16a68:	movwcc	r1, #1
   16a6c:	cmp	r1, #0
   16a70:	str	r1, [sp, #16]
   16a74:	mvnne	r0, #0
   16a78:	mvnne	r4, #0
   16a7c:	subs	r3, lr, r0
   16a80:	sbcs	r3, ip, r4
   16a84:	movwcc	r2, #1
   16a88:	umull	r6, r3, r0, r5
   16a8c:	cmp	r2, #0
   16a90:	mla	r0, r0, sl, r3
   16a94:	str	r2, [sp, #12]
   16a98:	mvnne	r6, #0
   16a9c:	mla	r0, r4, r5, r0
   16aa0:	cmp	r2, #0
   16aa4:	ldr	r4, [sp, #24]
   16aa8:	umull	r1, r7, r6, r5
   16aac:	mvnne	r0, #0
   16ab0:	subs	r3, lr, r6
   16ab4:	mla	r7, r6, sl, r7
   16ab8:	mov	r3, ip
   16abc:	mla	r7, r0, r5, r7
   16ac0:	sbcs	r0, ip, r0
   16ac4:	str	r3, [sp]
   16ac8:	mov	r0, #0
   16acc:	movwcc	r0, #1
   16ad0:	cmp	r0, #0
   16ad4:	str	r0, [sp, #8]
   16ad8:	mvnne	r1, #0
   16adc:	mvnne	r7, #0
   16ae0:	subs	r0, lr, r1
   16ae4:	sbcs	r0, ip, r7
   16ae8:	mov	ip, #0
   16aec:	movwcc	ip, #1
   16af0:	umull	r6, r0, r1, r5
   16af4:	cmp	ip, #0
   16af8:	mla	r1, r1, r4, r0
   16afc:	mov	r0, lr
   16b00:	mvnne	r6, #0
   16b04:	mla	r1, r7, r5, r1
   16b08:	cmp	ip, #0
   16b0c:	umull	r2, sl, r6, r5
   16b10:	mvnne	r1, #0
   16b14:	mla	sl, r6, r4, sl
   16b18:	subs	r6, lr, r6
   16b1c:	mov	lr, #0
   16b20:	mla	r7, r1, r5, sl
   16b24:	sbcs	r1, r3, r1
   16b28:	movwcc	lr, #1
   16b2c:	ldr	r1, [sp, #24]
   16b30:	cmp	lr, #0
   16b34:	mvnne	r2, #0
   16b38:	mvnne	r7, #0
   16b3c:	subs	r6, r0, r2
   16b40:	umull	r0, sl, r2, r5
   16b44:	sbcs	r6, r3, r7
   16b48:	mov	r3, #0
   16b4c:	mla	r2, r2, r1, sl
   16b50:	movwcc	r3, #1
   16b54:	mla	r2, r7, r5, r2
   16b58:	cmp	r3, #0
   16b5c:	mvnne	r0, #0
   16b60:	cmp	r3, #0
   16b64:	umull	r6, r4, r0, r5
   16b68:	mvnne	r2, #0
   16b6c:	mla	r4, r0, r1, r4
   16b70:	ldr	r1, [sp, #4]
   16b74:	mla	r7, r2, r5, r4
   16b78:	ldr	r5, [sp, #16]
   16b7c:	subs	r0, r1, r0
   16b80:	ldr	r0, [sp]
   16b84:	sbcs	r0, r0, r2
   16b88:	mov	r0, #0
   16b8c:	movwcc	r0, #1
   16b90:	cmp	r0, #0
   16b94:	mov	r2, r0
   16b98:	ldr	r0, [sp, #20]
   16b9c:	mvnne	r7, #0
   16ba0:	mvnne	r6, #0
   16ba4:	orr	r0, r0, r5
   16ba8:	ldr	r5, [sp, #12]
   16bac:	orr	r0, r0, r5
   16bb0:	ldr	r5, [sp, #8]
   16bb4:	orr	r0, r0, r5
   16bb8:	orr	r0, r0, ip
   16bbc:	orr	r0, r0, lr
   16bc0:	orr	r0, r0, r3
   16bc4:	orr	r0, r0, r2
   16bc8:	and	r3, r0, #1
   16bcc:	b	16c28 <__assert_fail@plt+0x5b64>
   16bd0:	mov	r1, #0
   16bd4:	lsl	r2, r7, #9
   16bd8:	lsl	r0, r6, #9
   16bdc:	lsr	r3, r7, #23
   16be0:	cmp	r1, r7, lsr #23
   16be4:	orr	r2, r2, r6, lsr #23
   16be8:	mvnne	r0, #0
   16bec:	movwne	r3, #1
   16bf0:	cmp	r1, r7, lsr #23
   16bf4:	mvnne	r2, #0
   16bf8:	mov	r6, r0
   16bfc:	mov	r7, r2
   16c00:	b	16c28 <__assert_fail@plt+0x5b64>
   16c04:	lsl	r1, r7, #1
   16c08:	lsl	r0, r6, #1
   16c0c:	cmp	r7, #0
   16c10:	lsr	r3, r7, #31
   16c14:	orr	r1, r1, r6, lsr #31
   16c18:	mvnlt	r0, #0
   16c1c:	mvnlt	r1, #0
   16c20:	mov	r6, r0
   16c24:	mov	r7, r1
   16c28:	ldr	r1, [sp, #32]
   16c2c:	ldr	r2, [sp, #28]
   16c30:	orr	r8, r3, r8
   16c34:	add	r0, r1, r2
   16c38:	str	r0, [r9]
   16c3c:	ldrb	r0, [r1, r2]
   16c40:	cmp	r0, #0
   16c44:	orrne	r8, r8, #2
   16c48:	ldr	r0, [sp, #36]	; 0x24
   16c4c:	strd	r6, [r0]
   16c50:	mov	r0, r8
   16c54:	sub	sp, fp, #28
   16c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c5c:	movw	r0, #32165	; 0x7da5
   16c60:	movw	r1, #32203	; 0x7dcb
   16c64:	movw	r3, #32219	; 0x7ddb
   16c68:	mov	r2, #85	; 0x55
   16c6c:	movt	r0, #1
   16c70:	movt	r1, #1
   16c74:	movt	r3, #1
   16c78:	bl	110c4 <__assert_fail@plt>
   16c7c:	clz	r2, r1
   16c80:	clz	r3, r0
   16c84:	lsr	r2, r2, #5
   16c88:	lsr	r3, r3, #5
   16c8c:	orrs	r2, r3, r2
   16c90:	movwne	r1, #1
   16c94:	movwne	r0, #1
   16c98:	cmp	r1, #0
   16c9c:	beq	16ccc <__assert_fail@plt+0x5c08>
   16ca0:	mvn	r2, #-2147483648	; 0x80000000
   16ca4:	udiv	r2, r2, r1
   16ca8:	cmp	r2, r0
   16cac:	bcs	16ccc <__assert_fail@plt+0x5c08>
   16cb0:	push	{fp, lr}
   16cb4:	mov	fp, sp
   16cb8:	bl	10fe0 <__errno_location@plt>
   16cbc:	mov	r1, #12
   16cc0:	str	r1, [r0]
   16cc4:	mov	r0, #0
   16cc8:	pop	{fp, pc}
   16ccc:	b	10e54 <calloc@plt>
   16cd0:	cmp	r0, #0
   16cd4:	movweq	r0, #1
   16cd8:	cmn	r0, #1
   16cdc:	ble	16ce4 <__assert_fail@plt+0x5c20>
   16ce0:	b	10f74 <malloc@plt>
   16ce4:	push	{fp, lr}
   16ce8:	mov	fp, sp
   16cec:	bl	10fe0 <__errno_location@plt>
   16cf0:	mov	r1, #12
   16cf4:	str	r1, [r0]
   16cf8:	mov	r0, #0
   16cfc:	pop	{fp, pc}
   16d00:	push	{fp, lr}
   16d04:	mov	fp, sp
   16d08:	cmp	r0, #0
   16d0c:	beq	16d28 <__assert_fail@plt+0x5c64>
   16d10:	cmp	r1, #0
   16d14:	beq	16d34 <__assert_fail@plt+0x5c70>
   16d18:	cmn	r1, #1
   16d1c:	ble	16d40 <__assert_fail@plt+0x5c7c>
   16d20:	pop	{fp, lr}
   16d24:	b	10f08 <realloc@plt>
   16d28:	mov	r0, r1
   16d2c:	pop	{fp, lr}
   16d30:	b	16cd0 <__assert_fail@plt+0x5c0c>
   16d34:	bl	16dd8 <__assert_fail@plt+0x5d14>
   16d38:	mov	r0, #0
   16d3c:	pop	{fp, pc}
   16d40:	bl	10fe0 <__errno_location@plt>
   16d44:	mov	r1, #12
   16d48:	str	r1, [r0]
   16d4c:	mov	r0, #0
   16d50:	pop	{fp, pc}
   16d54:	push	{r4, r5, r6, sl, fp, lr}
   16d58:	add	fp, sp, #16
   16d5c:	mov	r4, r0
   16d60:	bl	10f50 <__fpending@plt>
   16d64:	ldr	r6, [r4]
   16d68:	mov	r5, r0
   16d6c:	mov	r0, r4
   16d70:	bl	1337c <__assert_fail@plt+0x22b8>
   16d74:	tst	r6, #32
   16d78:	bne	16db0 <__assert_fail@plt+0x5cec>
   16d7c:	cmp	r0, #0
   16d80:	mov	r4, r0
   16d84:	mvnne	r4, #0
   16d88:	cmp	r5, #0
   16d8c:	bne	16dbc <__assert_fail@plt+0x5cf8>
   16d90:	cmp	r0, #0
   16d94:	beq	16dbc <__assert_fail@plt+0x5cf8>
   16d98:	bl	10fe0 <__errno_location@plt>
   16d9c:	ldr	r0, [r0]
   16da0:	subs	r4, r0, #9
   16da4:	mvnne	r4, #0
   16da8:	mov	r0, r4
   16dac:	pop	{r4, r5, r6, sl, fp, pc}
   16db0:	mvn	r4, #0
   16db4:	cmp	r0, #0
   16db8:	beq	16dc4 <__assert_fail@plt+0x5d00>
   16dbc:	mov	r0, r4
   16dc0:	pop	{r4, r5, r6, sl, fp, pc}
   16dc4:	bl	10fe0 <__errno_location@plt>
   16dc8:	mov	r1, #0
   16dcc:	str	r1, [r0]
   16dd0:	mov	r0, r4
   16dd4:	pop	{r4, r5, r6, sl, fp, pc}
   16dd8:	push	{r4, r5, r6, sl, fp, lr}
   16ddc:	add	fp, sp, #16
   16de0:	mov	r4, r0
   16de4:	bl	10fe0 <__errno_location@plt>
   16de8:	ldr	r6, [r0]
   16dec:	mov	r5, r0
   16df0:	mov	r0, r4
   16df4:	bl	10ea8 <free@plt>
   16df8:	str	r6, [r5]
   16dfc:	pop	{r4, r5, r6, sl, fp, pc}
   16e00:	push	{fp, lr}
   16e04:	mov	fp, sp
   16e08:	mov	r0, #14
   16e0c:	bl	1107c <nl_langinfo@plt>
   16e10:	movw	r1, #30697	; 0x77e9
   16e14:	cmp	r0, #0
   16e18:	movt	r1, #1
   16e1c:	movne	r1, r0
   16e20:	movw	r0, #32298	; 0x7e2a
   16e24:	ldrb	r2, [r1]
   16e28:	movt	r0, #1
   16e2c:	cmp	r2, #0
   16e30:	movne	r0, r1
   16e34:	pop	{fp, pc}
   16e38:	push	{r4, r5, r6, r7, fp, lr}
   16e3c:	add	fp, sp, #16
   16e40:	sub	sp, sp, #8
   16e44:	add	r5, sp, #4
   16e48:	cmp	r0, #0
   16e4c:	mov	r7, r2
   16e50:	mov	r4, r1
   16e54:	movne	r5, r0
   16e58:	mov	r0, r5
   16e5c:	bl	10f5c <mbrtowc@plt>
   16e60:	mov	r6, r0
   16e64:	cmp	r7, #0
   16e68:	beq	16e8c <__assert_fail@plt+0x5dc8>
   16e6c:	cmn	r6, #2
   16e70:	bcc	16e8c <__assert_fail@plt+0x5dc8>
   16e74:	mov	r0, #0
   16e78:	bl	16ed4 <__assert_fail@plt+0x5e10>
   16e7c:	cmp	r0, #0
   16e80:	ldrbeq	r0, [r4]
   16e84:	moveq	r6, #1
   16e88:	streq	r0, [r5]
   16e8c:	mov	r0, r6
   16e90:	sub	sp, fp, #16
   16e94:	pop	{r4, r5, r6, r7, fp, pc}
   16e98:	cmp	r2, #0
   16e9c:	beq	16ecc <__assert_fail@plt+0x5e08>
   16ea0:	mvn	r3, #0
   16ea4:	udiv	r3, r3, r2
   16ea8:	cmp	r3, r1
   16eac:	bcs	16ecc <__assert_fail@plt+0x5e08>
   16eb0:	push	{fp, lr}
   16eb4:	mov	fp, sp
   16eb8:	bl	10fe0 <__errno_location@plt>
   16ebc:	mov	r1, #12
   16ec0:	str	r1, [r0]
   16ec4:	mov	r0, #0
   16ec8:	pop	{fp, pc}
   16ecc:	mul	r1, r2, r1
   16ed0:	b	16d00 <__assert_fail@plt+0x5c3c>
   16ed4:	push	{r4, sl, fp, lr}
   16ed8:	add	fp, sp, #8
   16edc:	sub	sp, sp, #264	; 0x108
   16ee0:	add	r1, sp, #7
   16ee4:	movw	r2, #257	; 0x101
   16ee8:	bl	16f38 <__assert_fail@plt+0x5e74>
   16eec:	mov	r4, #0
   16ef0:	cmp	r0, #0
   16ef4:	bne	16f2c <__assert_fail@plt+0x5e68>
   16ef8:	movw	r1, #32304	; 0x7e30
   16efc:	add	r0, sp, #7
   16f00:	movt	r1, #1
   16f04:	bl	10e78 <strcmp@plt>
   16f08:	cmp	r0, #0
   16f0c:	beq	16f2c <__assert_fail@plt+0x5e68>
   16f10:	movw	r1, #32306	; 0x7e32
   16f14:	add	r0, sp, #7
   16f18:	movt	r1, #1
   16f1c:	bl	10e78 <strcmp@plt>
   16f20:	mov	r4, r0
   16f24:	cmp	r0, #0
   16f28:	movwne	r4, #1
   16f2c:	mov	r0, r4
   16f30:	sub	sp, fp, #8
   16f34:	pop	{r4, sl, fp, pc}
   16f38:	push	{r4, r5, r6, r7, fp, lr}
   16f3c:	add	fp, sp, #16
   16f40:	mov	r4, r1
   16f44:	mov	r1, #0
   16f48:	mov	r6, r2
   16f4c:	bl	11064 <setlocale@plt>
   16f50:	cmp	r0, #0
   16f54:	beq	16f84 <__assert_fail@plt+0x5ec0>
   16f58:	mov	r7, r0
   16f5c:	bl	10fc8 <strlen@plt>
   16f60:	cmp	r0, r6
   16f64:	bcs	16fa4 <__assert_fail@plt+0x5ee0>
   16f68:	add	r2, r0, #1
   16f6c:	mov	r0, r4
   16f70:	mov	r1, r7
   16f74:	bl	10ec0 <memcpy@plt>
   16f78:	mov	r5, #0
   16f7c:	mov	r0, r5
   16f80:	pop	{r4, r5, r6, r7, fp, pc}
   16f84:	cmp	r6, #0
   16f88:	mov	r5, #22
   16f8c:	movne	r0, #0
   16f90:	strbne	r0, [r4]
   16f94:	movne	r0, r5
   16f98:	popne	{r4, r5, r6, r7, fp, pc}
   16f9c:	mov	r0, r5
   16fa0:	pop	{r4, r5, r6, r7, fp, pc}
   16fa4:	mov	r5, #34	; 0x22
   16fa8:	cmp	r6, #0
   16fac:	beq	16fcc <__assert_fail@plt+0x5f08>
   16fb0:	sub	r6, r6, #1
   16fb4:	mov	r0, r4
   16fb8:	mov	r1, r7
   16fbc:	mov	r2, r6
   16fc0:	bl	10ec0 <memcpy@plt>
   16fc4:	mov	r0, #0
   16fc8:	strb	r0, [r4, r6]
   16fcc:	mov	r0, r5
   16fd0:	pop	{r4, r5, r6, r7, fp, pc}
   16fd4:	mov	r1, #0
   16fd8:	b	11064 <setlocale@plt>
   16fdc:	cmp	r3, #0
   16fe0:	cmpeq	r2, #0
   16fe4:	bne	16ffc <__assert_fail@plt+0x5f38>
   16fe8:	cmp	r1, #0
   16fec:	cmpeq	r0, #0
   16ff0:	mvnne	r1, #0
   16ff4:	mvnne	r0, #0
   16ff8:	b	17018 <__assert_fail@plt+0x5f54>
   16ffc:	sub	sp, sp, #8
   17000:	push	{sp, lr}
   17004:	bl	17028 <__assert_fail@plt+0x5f64>
   17008:	ldr	lr, [sp, #4]
   1700c:	add	sp, sp, #8
   17010:	pop	{r2, r3}
   17014:	bx	lr
   17018:	push	{r1, lr}
   1701c:	mov	r0, #8
   17020:	bl	10e6c <raise@plt>
   17024:	pop	{r1, pc}
   17028:	cmp	r1, r3
   1702c:	cmpeq	r0, r2
   17030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17034:	mov	r4, r0
   17038:	movcc	r0, #0
   1703c:	mov	r5, r1
   17040:	ldr	lr, [sp, #36]	; 0x24
   17044:	movcc	r1, r0
   17048:	bcc	17144 <__assert_fail@plt+0x6080>
   1704c:	cmp	r3, #0
   17050:	clzeq	ip, r2
   17054:	clzne	ip, r3
   17058:	addeq	ip, ip, #32
   1705c:	cmp	r5, #0
   17060:	clzeq	r1, r4
   17064:	addeq	r1, r1, #32
   17068:	clzne	r1, r5
   1706c:	sub	ip, ip, r1
   17070:	sub	sl, ip, #32
   17074:	lsl	r9, r3, ip
   17078:	rsb	fp, ip, #32
   1707c:	orr	r9, r9, r2, lsl sl
   17080:	orr	r9, r9, r2, lsr fp
   17084:	lsl	r8, r2, ip
   17088:	cmp	r5, r9
   1708c:	cmpeq	r4, r8
   17090:	movcc	r0, #0
   17094:	movcc	r1, r0
   17098:	bcc	170b4 <__assert_fail@plt+0x5ff0>
   1709c:	mov	r0, #1
   170a0:	subs	r4, r4, r8
   170a4:	lsl	r1, r0, sl
   170a8:	orr	r1, r1, r0, lsr fp
   170ac:	lsl	r0, r0, ip
   170b0:	sbc	r5, r5, r9
   170b4:	cmp	ip, #0
   170b8:	beq	17144 <__assert_fail@plt+0x6080>
   170bc:	lsr	r6, r8, #1
   170c0:	orr	r6, r6, r9, lsl #31
   170c4:	lsr	r7, r9, #1
   170c8:	mov	r2, ip
   170cc:	b	170f0 <__assert_fail@plt+0x602c>
   170d0:	subs	r3, r4, r6
   170d4:	sbc	r8, r5, r7
   170d8:	adds	r3, r3, r3
   170dc:	adc	r8, r8, r8
   170e0:	adds	r4, r3, #1
   170e4:	adc	r5, r8, #0
   170e8:	subs	r2, r2, #1
   170ec:	beq	1710c <__assert_fail@plt+0x6048>
   170f0:	cmp	r5, r7
   170f4:	cmpeq	r4, r6
   170f8:	bcs	170d0 <__assert_fail@plt+0x600c>
   170fc:	adds	r4, r4, r4
   17100:	adc	r5, r5, r5
   17104:	subs	r2, r2, #1
   17108:	bne	170f0 <__assert_fail@plt+0x602c>
   1710c:	lsr	r3, r4, ip
   17110:	orr	r3, r3, r5, lsl fp
   17114:	lsr	r2, r5, ip
   17118:	orr	r3, r3, r5, lsr sl
   1711c:	adds	r0, r0, r4
   17120:	mov	r4, r3
   17124:	lsl	r3, r2, ip
   17128:	orr	r3, r3, r4, lsl sl
   1712c:	lsl	ip, r4, ip
   17130:	orr	r3, r3, r4, lsr fp
   17134:	adc	r1, r1, r5
   17138:	subs	r0, r0, ip
   1713c:	mov	r5, r2
   17140:	sbc	r1, r1, r3
   17144:	cmp	lr, #0
   17148:	strdne	r4, [lr]
   1714c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17150:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17154:	mov	r7, r0
   17158:	ldr	r6, [pc, #72]	; 171a8 <__assert_fail@plt+0x60e4>
   1715c:	ldr	r5, [pc, #72]	; 171ac <__assert_fail@plt+0x60e8>
   17160:	add	r6, pc, r6
   17164:	add	r5, pc, r5
   17168:	sub	r6, r6, r5
   1716c:	mov	r8, r1
   17170:	mov	r9, r2
   17174:	bl	10e34 <calloc@plt-0x20>
   17178:	asrs	r6, r6, #2
   1717c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17180:	mov	r4, #0
   17184:	add	r4, r4, #1
   17188:	ldr	r3, [r5], #4
   1718c:	mov	r2, r9
   17190:	mov	r1, r8
   17194:	mov	r0, r7
   17198:	blx	r3
   1719c:	cmp	r6, r4
   171a0:	bne	17184 <__assert_fail@plt+0x60c0>
   171a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171a8:	andeq	r0, r1, r4, lsr #27
   171ac:	muleq	r1, ip, sp
   171b0:	bx	lr
   171b4:	ldr	r3, [pc, #12]	; 171c8 <__assert_fail@plt+0x6104>
   171b8:	mov	r1, #0
   171bc:	add	r3, pc, r3
   171c0:	ldr	r2, [r3]
   171c4:	b	10fec <__cxa_atexit@plt>
   171c8:	andeq	r0, r1, r8, lsr #30

Disassembly of section .fini:

000171cc <.fini>:
   171cc:	push	{r3, lr}
   171d0:	pop	{r3, pc}
