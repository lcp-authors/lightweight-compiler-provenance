
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010cd8 <.init>:
   10cd8:	push	{r3, lr}
   10cdc:	bl	10fbc <__assert_fail@plt+0x48>
   10ce0:	pop	{r3, pc}

Disassembly of section .plt:

00010ce4 <fstatfs64@plt-0x14>:
   10ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce8:	ldr	lr, [pc, #4]	; 10cf4 <fstatfs64@plt-0x4>
   10cec:	add	lr, pc, lr
   10cf0:	ldr	pc, [lr, #8]!
   10cf4:	andeq	r9, r1, ip, lsl #6

00010cf8 <fstatfs64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #780]!	; 0x30c

00010d04 <calloc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #772]!	; 0x304

00010d10 <raise@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #764]!	; 0x2fc

00010d1c <strcmp@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #756]!	; 0x2f4

00010d28 <strtol@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #748]!	; 0x2ec

00010d34 <getpwuid@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d40 <printf@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #732]!	; 0x2dc

00010d4c <getuid@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #724]!	; 0x2d4

00010d58 <memmove@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #716]!	; 0x2cc

00010d64 <free@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d70 <memcpy@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #700]!	; 0x2bc

00010d7c <time@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #692]!	; 0x2b4

00010d88 <ctime@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #684]!	; 0x2ac

00010d94 <realloc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #676]!	; 0x2a4

00010da0 <funlockfile@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #668]!	; 0x29c

00010dac <__fxstatat64@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #660]!	; 0x294

00010db8 <__fxstat64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #652]!	; 0x28c

00010dc4 <readlink@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #644]!	; 0x284

00010dd0 <fwrite@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #636]!	; 0x27c

00010ddc <ioctl@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #628]!	; 0x274

00010de8 <strcpy@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #620]!	; 0x26c

00010df4 <open64@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #612]!	; 0x264

00010e00 <getenv@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #604]!	; 0x25c

00010e0c <malloc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #596]!	; 0x254

00010e18 <__libc_start_main@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #588]!	; 0x24c

00010e24 <strerror@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #580]!	; 0x244

00010e30 <__gmon_start__@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #572]!	; 0x23c

00010e3c <__ctype_b_loc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #564]!	; 0x234

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #556]!	; 0x22c

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #548]!	; 0x224

00010e60 <openat64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #540]!	; 0x21c

00010e6c <fprintf@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #532]!	; 0x214

00010e78 <__errno_location@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #524]!	; 0x20c

00010e84 <snprintf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #516]!	; 0x204

00010e90 <memset@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #508]!	; 0x1fc

00010e9c <fcntl64@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea8 <strrchr@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #492]!	; 0x1ec

00010eb4 <fputc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ec0 <readdir64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #476]!	; 0x1dc

00010ecc <fdopendir@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed8 <putc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ee4 <dirfd@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #452]!	; 0x1c4

00010ef0 <flockfile@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #444]!	; 0x1bc

00010efc <fchdir@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #436]!	; 0x1b4

00010f08 <qsort@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #428]!	; 0x1ac

00010f14 <__xstat64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f20 <isatty@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #412]!	; 0x19c

00010f2c <strncmp@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #404]!	; 0x194

00010f38 <abort@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #396]!	; 0x18c

00010f44 <close@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #388]!	; 0x184

00010f50 <__lxstat64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #380]!	; 0x17c

00010f5c <closedir@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #372]!	; 0x174

00010f68 <getgrgid@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #364]!	; 0x16c

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #356]!	; 0x164

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e18 <__libc_start_main@plt>
   10fac:	bl	10f38 <abort@plt>
   10fb0:	andeq	r8, r1, r0, lsl #25
   10fb4:	andeq	r1, r1, r0, ror r0
   10fb8:	andeq	r8, r1, r0, lsr #24
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e30 <__gmon_start__@plt>
   10fd8:	andeq	r9, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, r4, ror #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	sl, r2, r4, lsl r1
   11004:	andeq	sl, r2, r4, lsl r1
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	sl, r2, r4, lsl r1
   1103c:	andeq	sl, r2, r4, lsl r1
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	sl, r2, r0, lsr #2
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	b	11074 <__assert_fail@plt+0x100>
   11074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11078:	add	fp, sp, #28
   1107c:	sub	sp, sp, #12
   11080:	mov	r4, r1
   11084:	movw	r1, #41332	; 0xa174
   11088:	mov	r5, r0
   1108c:	mov	r0, #0
   11090:	movw	r9, #41320	; 0xa168
   11094:	movw	r8, #41360	; 0xa190
   11098:	movw	r6, #41316	; 0xa164
   1109c:	movw	sl, #41404	; 0xa1bc
   110a0:	mov	r7, #1
   110a4:	movt	r1, #2
   110a8:	movt	r9, #2
   110ac:	movt	r8, #2
   110b0:	movt	r6, #2
   110b4:	movt	sl, #2
   110b8:	str	r0, [r1]
   110bc:	movw	r1, #41252	; 0xa124
   110c0:	str	r0, [r9]
   110c4:	str	r0, [r8]
   110c8:	str	r0, [r6]
   110cc:	str	r0, [sl]
   110d0:	movt	r1, #2
   110d4:	strb	r0, [r1]
   110d8:	movw	r1, #41324	; 0xa16c
   110dc:	movt	r1, #2
   110e0:	str	r0, [r1]
   110e4:	movw	r1, #41376	; 0xa1a0
   110e8:	movt	r1, #2
   110ec:	str	r0, [r1]
   110f0:	movw	r1, #41340	; 0xa17c
   110f4:	movt	r1, #2
   110f8:	str	r0, [r1]
   110fc:	movw	r1, #41392	; 0xa1b0
   11100:	movt	r1, #2
   11104:	str	r0, [r1]
   11108:	movw	r1, #41396	; 0xa1b4
   1110c:	movt	r1, #2
   11110:	str	r0, [r1]
   11114:	movw	r1, #41380	; 0xa1a4
   11118:	movt	r1, #2
   1111c:	str	r0, [r1]
   11120:	movw	r1, #41372	; 0xa19c
   11124:	movt	r1, #2
   11128:	str	r0, [r1]
   1112c:	movw	r1, #41344	; 0xa180
   11130:	movt	r1, #2
   11134:	str	r0, [r1]
   11138:	movw	r1, #41400	; 0xa1b8
   1113c:	movt	r1, #2
   11140:	str	r0, [r1]
   11144:	movw	r1, #41368	; 0xa198
   11148:	movt	r1, #2
   1114c:	str	r0, [r1]
   11150:	movw	r1, #41336	; 0xa178
   11154:	movt	r1, #2
   11158:	str	r0, [r1]
   1115c:	movw	r1, #41328	; 0xa170
   11160:	movt	r1, #2
   11164:	str	r0, [r1]
   11168:	movw	r1, #41312	; 0xa160
   1116c:	movt	r1, #2
   11170:	str	r0, [r1]
   11174:	movw	r1, #41308	; 0xa15c
   11178:	movt	r1, #2
   1117c:	str	r0, [r1]
   11180:	movw	r1, #41384	; 0xa1a8
   11184:	movt	r1, #2
   11188:	str	r0, [r1]
   1118c:	movw	r1, #41352	; 0xa188
   11190:	movt	r1, #2
   11194:	str	r0, [r1]
   11198:	movw	r1, #41364	; 0xa194
   1119c:	movt	r1, #2
   111a0:	str	r0, [r1]
   111a4:	movw	r1, #41348	; 0xa184
   111a8:	movt	r1, #2
   111ac:	str	r0, [r1]
   111b0:	mov	r0, #1
   111b4:	bl	10f20 <isatty@plt>
   111b8:	cmp	r0, #0
   111bc:	beq	1121c <__assert_fail@plt+0x2a8>
   111c0:	movw	r0, #35988	; 0x8c94
   111c4:	movt	r0, #1
   111c8:	bl	10e00 <getenv@plt>
   111cc:	cmp	r0, #0
   111d0:	beq	111f0 <__assert_fail@plt+0x27c>
   111d4:	mov	r1, #0
   111d8:	mov	r2, #10
   111dc:	bl	10d28 <strtol@plt>
   111e0:	movw	r1, #41204	; 0xa0f4
   111e4:	movt	r1, #2
   111e8:	str	r0, [r1]
   111ec:	b	11208 <__assert_fail@plt+0x294>
   111f0:	add	r2, sp, #4
   111f4:	mov	r0, #1
   111f8:	movw	r1, #21523	; 0x5413
   111fc:	bl	184b8 <__assert_fail@plt+0x7544>
   11200:	cmp	r0, #0
   11204:	beq	1182c <__assert_fail@plt+0x8b8>
   11208:	movw	r1, #41400	; 0xa1b8
   1120c:	mov	r6, r9
   11210:	mov	r0, #1
   11214:	movt	r1, #2
   11218:	str	r0, [r1]
   1121c:	str	r7, [r6]
   11220:	bl	10d4c <getuid@plt>
   11224:	cmp	r0, #0
   11228:	bne	1123c <__assert_fail@plt+0x2c8>
   1122c:	movw	r1, #41396	; 0xa1b4
   11230:	mov	r0, #1
   11234:	movt	r1, #2
   11238:	str	r0, [r1]
   1123c:	movw	r1, #41224	; 0xa108
   11240:	movw	r7, #35996	; 0x8c9c
   11244:	movw	r9, #41376	; 0xa1a0
   11248:	mov	r0, #1
   1124c:	mov	r6, #20
   11250:	movt	r1, #2
   11254:	movt	r7, #1
   11258:	movt	r9, #2
   1125c:	str	r0, [r1]
   11260:	b	11270 <__assert_fail@plt+0x2fc>
   11264:	movw	r1, #41320	; 0xa168
   11268:	movt	r1, #2
   1126c:	str	r0, [r1]
   11270:	mov	r0, r5
   11274:	mov	r1, r4
   11278:	mov	r2, r7
   1127c:	bl	16f60 <__assert_fail@plt+0x5fec>
   11280:	add	r0, r0, #1
   11284:	cmp	r0, #121	; 0x79
   11288:	bhi	117fc <__assert_fail@plt+0x888>
   1128c:	add	r1, pc, #0
   11290:	ldr	pc, [r1, r0, lsl #2]
   11294:	andeq	r1, r1, r4, lsl r7
   11298:	strdeq	r1, [r1], -ip
   1129c:	strdeq	r1, [r1], -ip
   112a0:	strdeq	r1, [r1], -ip
   112a4:	strdeq	r1, [r1], -ip
   112a8:	strdeq	r1, [r1], -ip
   112ac:	strdeq	r1, [r1], -ip
   112b0:	strdeq	r1, [r1], -ip
   112b4:	strdeq	r1, [r1], -ip
   112b8:	strdeq	r1, [r1], -ip
   112bc:	strdeq	r1, [r1], -ip
   112c0:	strdeq	r1, [r1], -ip
   112c4:	strdeq	r1, [r1], -ip
   112c8:	strdeq	r1, [r1], -ip
   112cc:	strdeq	r1, [r1], -ip
   112d0:	strdeq	r1, [r1], -ip
   112d4:	strdeq	r1, [r1], -ip
   112d8:	strdeq	r1, [r1], -ip
   112dc:	strdeq	r1, [r1], -ip
   112e0:	strdeq	r1, [r1], -ip
   112e4:	strdeq	r1, [r1], -ip
   112e8:	strdeq	r1, [r1], -ip
   112ec:	strdeq	r1, [r1], -ip
   112f0:	strdeq	r1, [r1], -ip
   112f4:	strdeq	r1, [r1], -ip
   112f8:	strdeq	r1, [r1], -ip
   112fc:	strdeq	r1, [r1], -ip
   11300:	strdeq	r1, [r1], -ip
   11304:	strdeq	r1, [r1], -ip
   11308:	strdeq	r1, [r1], -ip
   1130c:	strdeq	r1, [r1], -ip
   11310:	strdeq	r1, [r1], -ip
   11314:	strdeq	r1, [r1], -ip
   11318:	strdeq	r1, [r1], -ip
   1131c:	strdeq	r1, [r1], -ip
   11320:	strdeq	r1, [r1], -ip
   11324:	strdeq	r1, [r1], -ip
   11328:	strdeq	r1, [r1], -ip
   1132c:	strdeq	r1, [r1], -ip
   11330:	strdeq	r1, [r1], -ip
   11334:	strdeq	r1, [r1], -ip
   11338:	strdeq	r1, [r1], -ip
   1133c:	strdeq	r1, [r1], -ip
   11340:	strdeq	r1, [r1], -ip
   11344:	strdeq	r1, [r1], -ip
   11348:	strdeq	r1, [r1], -ip
   1134c:	strdeq	r1, [r1], -ip
   11350:	strdeq	r1, [r1], -ip
   11354:	strdeq	r1, [r1], -ip
   11358:	strdeq	r1, [r1], -ip
   1135c:	andeq	r1, r1, ip, ror r4
   11360:	strdeq	r1, [r1], -ip
   11364:	strdeq	r1, [r1], -ip
   11368:	strdeq	r1, [r1], -ip
   1136c:	strdeq	r1, [r1], -ip
   11370:	strdeq	r1, [r1], -ip
   11374:	strdeq	r1, [r1], -ip
   11378:	strdeq	r1, [r1], -ip
   1137c:	strdeq	r1, [r1], -ip
   11380:	strdeq	r1, [r1], -ip
   11384:	strdeq	r1, [r1], -ip
   11388:	strdeq	r1, [r1], -ip
   1138c:	strdeq	r1, [r1], -ip
   11390:	strdeq	r1, [r1], -ip
   11394:	strdeq	r1, [r1], -ip
   11398:	strdeq	r1, [r1], -ip
   1139c:	andeq	r1, r1, r0, asr #10
   113a0:	strdeq	r1, [r1], -ip
   113a4:	muleq	r1, ip, r4
   113a8:	strdeq	r1, [r1], -ip
   113ac:	strdeq	r1, [r1], -ip
   113b0:	andeq	r1, r1, ip, asr #9
   113b4:	strdeq	r1, [r1], -ip
   113b8:	strdeq	r1, [r1], -ip
   113bc:	strdeq	r1, [r1], -ip
   113c0:	strdeq	r1, [r1], -ip
   113c4:	strdeq	r1, [r1], -ip
   113c8:	andeq	r1, r1, r0, ror #9
   113cc:	strdeq	r1, [r1], -ip
   113d0:	strdeq	r1, [r1], -ip
   113d4:	strdeq	r1, [r1], -ip
   113d8:	strdeq	r1, [r1], -ip
   113dc:	strdeq	r1, [r1], -ip
   113e0:	andeq	r1, r1, ip, ror #9
   113e4:	andeq	r1, r1, r0, lsl #10
   113e8:	andeq	r1, r1, r4, lsl r5
   113ec:	strdeq	r1, [r1], -ip
   113f0:	strdeq	r1, [r1], -ip
   113f4:	andeq	r1, r1, r8, lsr #10
   113f8:	strdeq	r1, [r1], -ip
   113fc:	strdeq	r1, [r1], -ip
   11400:	strdeq	r1, [r1], -ip
   11404:	strdeq	r1, [r1], -ip
   11408:	strdeq	r1, [r1], -ip
   1140c:	strdeq	r1, [r1], -ip
   11410:	strdeq	r1, [r1], -ip
   11414:	strdeq	r1, [r1], -ip
   11418:	strdeq	r1, [r1], -ip
   1141c:	andeq	r1, r1, ip, lsr r5
   11420:	strdeq	r1, [r1], -ip
   11424:	andeq	r1, r1, r4, asr r5
   11428:	andeq	r1, r1, r8, ror r5
   1142c:	strdeq	r1, [r1], -ip
   11430:	muleq	r1, ip, r5
   11434:	andeq	r1, r1, r0, ror r2
   11438:	strdeq	r1, [r1], -ip
   1143c:			; <UNDEFINED> instruction: 0x000115b0
   11440:	strdeq	r1, [r1], -ip
   11444:	andeq	r1, r1, r4, asr #11
   11448:	ldrdeq	r1, [r1], -r8
   1144c:	strdeq	r1, [r1], -r4
   11450:	andeq	r1, r1, r4, lsr #12
   11454:	andeq	r1, r1, r4, asr r6
   11458:	andeq	r1, r1, r8, ror #12
   1145c:	andeq	r1, r1, ip, ror r6
   11460:	muleq	r1, r0, r6
   11464:	andeq	r1, r1, r4, lsr #13
   11468:			; <UNDEFINED> instruction: 0x000116b8
   1146c:	andeq	r1, r1, ip, asr #13
   11470:	strdeq	r1, [r1], -ip
   11474:	strdeq	r1, [r1], -ip
   11478:	strdeq	r1, [r1], -r0
   1147c:	movw	r1, #41316	; 0xa164
   11480:	mov	r0, #0
   11484:	mov	r2, #1
   11488:	movt	r1, #2
   1148c:	str	r0, [sl]
   11490:	str	r0, [r8]
   11494:	str	r2, [r1]
   11498:	b	1164c <__assert_fail@plt+0x6d8>
   1149c:	movw	r1, #41320	; 0xa168
   114a0:	mov	r2, #1
   114a4:	mov	r0, #0
   114a8:	movt	r1, #2
   114ac:	str	r0, [sl]
   114b0:	str	r0, [r9]
   114b4:	str	r0, [r8]
   114b8:	str	r2, [r1]
   114bc:	movw	r1, #41316	; 0xa164
   114c0:	movt	r1, #2
   114c4:	str	r0, [r1]
   114c8:	b	11270 <__assert_fail@plt+0x2fc>
   114cc:	movw	r1, #41348	; 0xa184
   114d0:	mov	r0, #1
   114d4:	movt	r1, #2
   114d8:	str	r0, [r1]
   114dc:	b	11270 <__assert_fail@plt+0x2fc>
   114e0:	bic	r0, r6, #18
   114e4:	orr	r6, r0, #2
   114e8:	b	11270 <__assert_fail@plt+0x2fc>
   114ec:	movw	r1, #41328	; 0xa170
   114f0:	mov	r0, #1
   114f4:	movt	r1, #2
   114f8:	str	r0, [r1]
   114fc:	b	11270 <__assert_fail@plt+0x2fc>
   11500:	movw	r0, #41204	; 0xa0f4
   11504:	mov	r1, #1
   11508:	movt	r0, #2
   1150c:	str	r1, [r0, #4]
   11510:	b	11270 <__assert_fail@plt+0x2fc>
   11514:	movw	r1, #41368	; 0xa198
   11518:	mov	r0, #1
   1151c:	movt	r1, #2
   11520:	str	r0, [r1]
   11524:	b	11270 <__assert_fail@plt+0x2fc>
   11528:	movw	r1, #41352	; 0xa188
   1152c:	mov	r0, #1
   11530:	movt	r1, #2
   11534:	str	r0, [r1]
   11538:	b	11270 <__assert_fail@plt+0x2fc>
   1153c:	orr	r6, r6, #32
   11540:	movw	r1, #41396	; 0xa1b4
   11544:	mov	r0, #1
   11548:	movt	r1, #2
   1154c:	str	r0, [r1]
   11550:	b	11270 <__assert_fail@plt+0x2fc>
   11554:	movw	r1, #41340	; 0xa17c
   11558:	mov	r0, #0
   1155c:	movt	r1, #2
   11560:	str	r0, [r1]
   11564:	movw	r1, #41384	; 0xa1a8
   11568:	mov	r0, #1
   1156c:	movt	r1, #2
   11570:	str	r0, [r1]
   11574:	b	11270 <__assert_fail@plt+0x2fc>
   11578:	movw	r1, #41328	; 0xa170
   1157c:	mov	r0, #0
   11580:	movt	r1, #2
   11584:	str	r0, [r1]
   11588:	movw	r1, #41380	; 0xa1a4
   1158c:	mov	r0, #1
   11590:	movt	r1, #2
   11594:	str	r0, [r1]
   11598:	b	11270 <__assert_fail@plt+0x2fc>
   1159c:	movw	r1, #41344	; 0xa180
   115a0:	mov	r0, #1
   115a4:	movt	r1, #2
   115a8:	str	r0, [r1]
   115ac:	b	11270 <__assert_fail@plt+0x2fc>
   115b0:	movw	r1, #41332	; 0xa174
   115b4:	mov	r0, #1
   115b8:	movt	r1, #2
   115bc:	str	r0, [r1]
   115c0:	b	11270 <__assert_fail@plt+0x2fc>
   115c4:	movw	r0, #41388	; 0xa1ac
   115c8:	mov	r1, #1024	; 0x400
   115cc:	movt	r0, #2
   115d0:	str	r1, [r0]
   115d4:	b	11270 <__assert_fail@plt+0x2fc>
   115d8:	movw	r1, #41372	; 0xa19c
   115dc:	mov	r0, #0
   115e0:	movt	r1, #2
   115e4:	str	r0, [r1]
   115e8:	mov	r1, #1
   115ec:	str	r1, [r8]
   115f0:	b	1163c <__assert_fail@plt+0x6c8>
   115f4:	movw	r0, #41316	; 0xa164
   115f8:	mov	r1, #0
   115fc:	movt	r0, #2
   11600:	str	r1, [r8]
   11604:	str	r1, [r9]
   11608:	str	r1, [r0]
   1160c:	mov	r0, #1
   11610:	str	r0, [sl]
   11614:	movw	r0, #41320	; 0xa168
   11618:	movt	r0, #2
   1161c:	str	r1, [r0]
   11620:	b	11270 <__assert_fail@plt+0x2fc>
   11624:	movw	r1, #41372	; 0xa19c
   11628:	mov	r0, #1
   1162c:	movt	r1, #2
   11630:	str	r0, [r8]
   11634:	str	r0, [r1]
   11638:	mov	r0, #0
   1163c:	movw	r1, #41316	; 0xa164
   11640:	str	r0, [sl]
   11644:	movt	r1, #2
   11648:	str	r0, [r1]
   1164c:	str	r0, [r9]
   11650:	b	11264 <__assert_fail@plt+0x2f0>
   11654:	movw	r1, #41324	; 0xa16c
   11658:	mov	r0, #1
   1165c:	movt	r1, #2
   11660:	str	r0, [r1]
   11664:	b	11270 <__assert_fail@plt+0x2fc>
   11668:	movw	r1, #41364	; 0xa194
   1166c:	mov	r0, #1
   11670:	movt	r1, #2
   11674:	str	r0, [r1]
   11678:	b	11270 <__assert_fail@plt+0x2fc>
   1167c:	movw	r1, #41400	; 0xa1b8
   11680:	mov	r0, #1
   11684:	movt	r1, #2
   11688:	str	r0, [r1]
   1168c:	b	11270 <__assert_fail@plt+0x2fc>
   11690:	movw	r1, #41336	; 0xa178
   11694:	mov	r0, #1
   11698:	movt	r1, #2
   1169c:	str	r0, [r1]
   116a0:	b	11270 <__assert_fail@plt+0x2fc>
   116a4:	movw	r1, #41308	; 0xa15c
   116a8:	mov	r0, #1
   116ac:	movt	r1, #2
   116b0:	str	r0, [r1]
   116b4:	b	11270 <__assert_fail@plt+0x2fc>
   116b8:	movw	r0, #41204	; 0xa0f4
   116bc:	mov	r1, #2
   116c0:	movt	r0, #2
   116c4:	str	r1, [r0, #4]
   116c8:	b	11270 <__assert_fail@plt+0x2fc>
   116cc:	movw	r1, #41384	; 0xa1a8
   116d0:	mov	r0, #0
   116d4:	movt	r1, #2
   116d8:	str	r0, [r1]
   116dc:	movw	r1, #41340	; 0xa17c
   116e0:	mov	r0, #1
   116e4:	movt	r1, #2
   116e8:	str	r0, [r1]
   116ec:	b	11270 <__assert_fail@plt+0x2fc>
   116f0:	mov	r1, #1
   116f4:	mov	r0, #0
   116f8:	str	r1, [r9]
   116fc:	movw	r1, #41316	; 0xa164
   11700:	str	r0, [sl]
   11704:	str	r0, [r8]
   11708:	movt	r1, #2
   1170c:	str	r0, [r1]
   11710:	b	11264 <__assert_fail@plt+0x2f0>
   11714:	movw	r0, #41348	; 0xa184
   11718:	movw	r2, #41380	; 0xa1a4
   1171c:	ldr	r3, [r8]
   11720:	movw	ip, #41204	; 0xa0f4
   11724:	movt	r0, #2
   11728:	movt	r2, #2
   1172c:	movt	ip, #2
   11730:	ldr	r0, [r0]
   11734:	ldr	r2, [r2]
   11738:	orr	r1, r0, r3
   1173c:	orr	r2, r1, r2
   11740:	movw	r1, #41308	; 0xa15c
   11744:	movt	r1, #2
   11748:	ldr	r1, [r1]
   1174c:	orr	r7, r1, r3
   11750:	movw	r1, #41332	; 0xa174
   11754:	movt	r1, #2
   11758:	ldr	r1, [r1]
   1175c:	orr	r1, r7, r1
   11760:	orr	r0, r1, r0
   11764:	movw	r1, #41364	; 0xa194
   11768:	movt	r1, #2
   1176c:	ldr	r1, [r1]
   11770:	orr	r1, r0, r1
   11774:	ldr	r0, [ip, #4]
   11778:	orrs	r1, r1, r0
   1177c:	movw	r1, #41352	; 0xa188
   11780:	orreq	r6, r6, #8
   11784:	cmp	r2, #0
   11788:	movt	r1, #2
   1178c:	orreq	r6, r6, #1
   11790:	ldr	r1, [r1]
   11794:	cmp	r1, #0
   11798:	movw	r1, #41224	; 0xa108
   1179c:	orrne	r6, r6, #128	; 0x80
   117a0:	cmp	r7, #0
   117a4:	movt	r1, #2
   117a8:	ldr	r2, [r1]
   117ac:	movwne	r1, #41388	; 0xa1ac
   117b0:	movne	r7, #2
   117b4:	movtne	r1, #2
   117b8:	strne	r7, [r1]
   117bc:	movw	r1, #41336	; 0xa178
   117c0:	movw	r7, #41252	; 0xa124
   117c4:	movt	r1, #2
   117c8:	movt	r7, #2
   117cc:	ldr	r1, [r1]
   117d0:	cmp	r1, #0
   117d4:	beq	11808 <__assert_fail@plt+0x894>
   117d8:	cmp	r0, #2
   117dc:	beq	1183c <__assert_fail@plt+0x8c8>
   117e0:	cmp	r0, #1
   117e4:	beq	1185c <__assert_fail@plt+0x8e8>
   117e8:	cmp	r0, #0
   117ec:	bne	118ec <__assert_fail@plt+0x978>
   117f0:	movw	r0, #12564	; 0x3114
   117f4:	movt	r0, #1
   117f8:	b	118e8 <__assert_fail@plt+0x974>
   117fc:	bl	130d8 <__assert_fail@plt+0x2164>
   11800:	sub	sp, fp, #28
   11804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11808:	cmp	r0, #2
   1180c:	beq	11868 <__assert_fail@plt+0x8f4>
   11810:	cmp	r0, #1
   11814:	beq	11888 <__assert_fail@plt+0x914>
   11818:	cmp	r0, #0
   1181c:	bne	118ec <__assert_fail@plt+0x978>
   11820:	movw	r0, #12552	; 0x3108
   11824:	movt	r0, #1
   11828:	b	118e8 <__assert_fail@plt+0x974>
   1182c:	ldrh	r0, [sp, #6]
   11830:	cmp	r0, #0
   11834:	bne	111e0 <__assert_fail@plt+0x26c>
   11838:	b	11208 <__assert_fail@plt+0x294>
   1183c:	movw	r0, #41340	; 0xa17c
   11840:	movt	r0, #2
   11844:	ldr	r0, [r0]
   11848:	cmp	r0, #0
   1184c:	beq	11894 <__assert_fail@plt+0x920>
   11850:	movw	r0, #12892	; 0x325c
   11854:	movt	r0, #1
   11858:	b	118e8 <__assert_fail@plt+0x974>
   1185c:	movw	r0, #13284	; 0x33e4
   11860:	movt	r0, #1
   11864:	b	118e8 <__assert_fail@plt+0x974>
   11868:	movw	r0, #41340	; 0xa17c
   1186c:	movt	r0, #2
   11870:	ldr	r0, [r0]
   11874:	cmp	r0, #0
   11878:	beq	118b4 <__assert_fail@plt+0x940>
   1187c:	movw	r0, #12788	; 0x31f4
   11880:	movt	r0, #1
   11884:	b	118e8 <__assert_fail@plt+0x974>
   11888:	movw	r0, #13204	; 0x3394
   1188c:	movt	r0, #1
   11890:	b	118e8 <__assert_fail@plt+0x974>
   11894:	movw	r0, #41384	; 0xa1a8
   11898:	movt	r0, #2
   1189c:	ldr	r0, [r0]
   118a0:	cmp	r0, #0
   118a4:	beq	118d4 <__assert_fail@plt+0x960>
   118a8:	movw	r0, #13100	; 0x332c
   118ac:	movt	r0, #1
   118b0:	b	118e8 <__assert_fail@plt+0x974>
   118b4:	movw	r0, #41384	; 0xa1a8
   118b8:	movt	r0, #2
   118bc:	ldr	r0, [r0]
   118c0:	cmp	r0, #0
   118c4:	beq	118e0 <__assert_fail@plt+0x96c>
   118c8:	movw	r0, #12996	; 0x32c4
   118cc:	movt	r0, #1
   118d0:	b	118e8 <__assert_fail@plt+0x974>
   118d4:	movw	r0, #12684	; 0x318c
   118d8:	movt	r0, #1
   118dc:	b	118e8 <__assert_fail@plt+0x974>
   118e0:	movw	r0, #12580	; 0x3124
   118e4:	movt	r0, #1
   118e8:	str	r0, [r7, #4]
   118ec:	movw	r1, #41316	; 0xa164
   118f0:	sub	r0, r5, r2
   118f4:	movt	r1, #2
   118f8:	ldr	r1, [r1]
   118fc:	cmp	r1, #0
   11900:	beq	11910 <__assert_fail@plt+0x99c>
   11904:	movw	r3, #8996	; 0x2324
   11908:	movt	r3, #1
   1190c:	b	11958 <__assert_fail@plt+0x9e4>
   11910:	ldr	r1, [r9]
   11914:	cmp	r1, #0
   11918:	beq	11928 <__assert_fail@plt+0x9b4>
   1191c:	movw	r3, #11628	; 0x2d6c
   11920:	movt	r3, #1
   11924:	b	11958 <__assert_fail@plt+0x9e4>
   11928:	cmp	r3, #0
   1192c:	beq	1193c <__assert_fail@plt+0x9c8>
   11930:	movw	r3, #9324	; 0x246c
   11934:	movt	r3, #1
   11938:	b	11958 <__assert_fail@plt+0x9e4>
   1193c:	ldr	r1, [sl]
   11940:	movw	r5, #10832	; 0x2a50
   11944:	movw	r3, #12108	; 0x2f4c
   11948:	movt	r5, #1
   1194c:	movt	r3, #1
   11950:	cmp	r1, #0
   11954:	moveq	r3, r5
   11958:	cmp	r0, #0
   1195c:	str	r3, [r7, #8]
   11960:	addeq	r1, ip, #8
   11964:	moveq	r0, #1
   11968:	addne	r1, r4, r2, lsl #2
   1196c:	mov	r2, r6
   11970:	bl	11988 <__assert_fail@plt+0xa14>
   11974:	movw	r0, #41356	; 0xa18c
   11978:	movt	r0, #2
   1197c:	ldr	r0, [r0]
   11980:	sub	sp, fp, #28
   11984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1198c:	add	fp, sp, #28
   11990:	sub	sp, sp, #4
   11994:	mov	r7, r0
   11998:	movw	r0, #41344	; 0xa180
   1199c:	mov	r6, r2
   119a0:	movw	r2, #7520	; 0x1d60
   119a4:	mov	r5, r1
   119a8:	movt	r0, #2
   119ac:	movt	r2, #1
   119b0:	ldr	r0, [r0]
   119b4:	cmp	r0, #0
   119b8:	mov	r0, r1
   119bc:	mov	r1, r6
   119c0:	movne	r2, #0
   119c4:	bl	135c0 <__assert_fail@plt+0x264c>
   119c8:	cmp	r0, #0
   119cc:	beq	11cec <__assert_fail@plt+0xd78>
   119d0:	mov	r1, #0
   119d4:	mov	r4, r0
   119d8:	mov	r5, #0
   119dc:	bl	15928 <__assert_fail@plt+0x49b4>
   119e0:	mov	r1, r0
   119e4:	mov	r0, #0
   119e8:	bl	11e08 <__assert_fail@plt+0xe94>
   119ec:	movw	r0, #41380	; 0xa1a4
   119f0:	movt	r0, #2
   119f4:	ldr	r0, [r0]
   119f8:	cmp	r0, #0
   119fc:	bne	11ce4 <__assert_fail@plt+0xd70>
   11a00:	movw	r8, #41328	; 0xa170
   11a04:	mov	r0, #4096	; 0x1000
   11a08:	movt	r8, #2
   11a0c:	ldr	r1, [r8]
   11a10:	cmp	r1, #0
   11a14:	andeq	r5, r0, r6, lsl #9
   11a18:	mov	r0, r4
   11a1c:	bl	14068 <__assert_fail@plt+0x30f4>
   11a20:	cmp	r0, #0
   11a24:	beq	11cd4 <__assert_fail@plt+0xd60>
   11a28:	mov	r6, r0
   11a2c:	cmp	r7, #1
   11a30:	ble	11b94 <__assert_fail@plt+0xc20>
   11a34:	movw	r9, #41396	; 0xa1b4
   11a38:	movw	sl, #41252	; 0xa124
   11a3c:	movt	r9, #2
   11a40:	movt	sl, #2
   11a44:	b	11ab0 <__assert_fail@plt+0xb3c>
   11a48:	movw	r0, #41240	; 0xa118
   11a4c:	mov	r7, r9
   11a50:	movt	r0, #2
   11a54:	ldr	r9, [r0]
   11a58:	ldr	r0, [r6, #32]
   11a5c:	bl	10e24 <strerror@plt>
   11a60:	movw	r1, #36201	; 0x8d69
   11a64:	mov	r3, r0
   11a68:	mov	r0, r9
   11a6c:	add	r2, r6, #168	; 0xa8
   11a70:	mov	r9, r7
   11a74:	movt	r1, #1
   11a78:	bl	10e6c <fprintf@plt>
   11a7c:	movw	r1, #41356	; 0xa18c
   11a80:	mov	r0, #1
   11a84:	movt	r1, #2
   11a88:	str	r0, [r1]
   11a8c:	b	11b7c <__assert_fail@plt+0xc08>
   11a90:	movw	r0, #41240	; 0xa118
   11a94:	movw	r1, #36047	; 0x8ccf
   11a98:	add	r2, r6, #168	; 0xa8
   11a9c:	movt	r0, #2
   11aa0:	movt	r1, #1
   11aa4:	ldr	r0, [r0]
   11aa8:	bl	10e6c <fprintf@plt>
   11aac:	b	11b7c <__assert_fail@plt+0xc08>
   11ab0:	ldrh	r0, [r6, #56]	; 0x38
   11ab4:	sub	r0, r0, #1
   11ab8:	cmp	r0, #6
   11abc:	bhi	11b7c <__assert_fail@plt+0xc08>
   11ac0:	add	r1, pc, #0
   11ac4:	ldr	pc, [r1, r0, lsl #2]
   11ac8:	andeq	r1, r1, r4, ror #21
   11acc:	muleq	r1, r0, sl
   11ad0:	andeq	r1, r1, ip, ror fp
   11ad4:	andeq	r1, r1, r8, asr #20
   11ad8:	andeq	r1, r1, ip, ror fp
   11adc:	andeq	r1, r1, ip, ror fp
   11ae0:	andeq	r1, r1, r8, asr #20
   11ae4:	ldrb	r0, [r6, #168]	; 0xa8
   11ae8:	cmp	r0, #46	; 0x2e
   11aec:	bne	11b08 <__assert_fail@plt+0xb94>
   11af0:	ldr	r0, [r6, #48]	; 0x30
   11af4:	cmp	r0, #0
   11af8:	beq	11b08 <__assert_fail@plt+0xb94>
   11afc:	ldr	r0, [r9]
   11b00:	cmp	r0, #0
   11b04:	beq	11b7c <__assert_fail@plt+0xc08>
   11b08:	ldrb	r0, [sl]
   11b0c:	ldr	r1, [r6, #28]
   11b10:	cmp	r0, #0
   11b14:	beq	11b28 <__assert_fail@plt+0xbb4>
   11b18:	movw	r0, #36041	; 0x8cc9
   11b1c:	movt	r0, #1
   11b20:	bl	10d40 <printf@plt>
   11b24:	b	11b3c <__assert_fail@plt+0xbc8>
   11b28:	movw	r0, #36042	; 0x8cca
   11b2c:	movt	r0, #1
   11b30:	bl	10d40 <printf@plt>
   11b34:	mov	r0, #1
   11b38:	strb	r0, [sl]
   11b3c:	mov	r0, r4
   11b40:	mov	r1, r5
   11b44:	bl	15928 <__assert_fail@plt+0x49b4>
   11b48:	mov	r7, r0
   11b4c:	mov	r0, r6
   11b50:	mov	r1, r7
   11b54:	bl	11e08 <__assert_fail@plt+0xe94>
   11b58:	cmp	r7, #0
   11b5c:	beq	11b7c <__assert_fail@plt+0xc08>
   11b60:	ldr	r0, [r8]
   11b64:	cmp	r0, #0
   11b68:	bne	11b7c <__assert_fail@plt+0xc08>
   11b6c:	mov	r0, r4
   11b70:	mov	r1, r6
   11b74:	mov	r2, #4
   11b78:	bl	158fc <__assert_fail@plt+0x4988>
   11b7c:	mov	r0, r4
   11b80:	bl	14068 <__assert_fail@plt+0x30f4>
   11b84:	mov	r6, r0
   11b88:	cmp	r0, #0
   11b8c:	bne	11ab0 <__assert_fail@plt+0xb3c>
   11b90:	b	11cd4 <__assert_fail@plt+0xd60>
   11b94:	movw	r9, #41252	; 0xa124
   11b98:	movw	sl, #36041	; 0x8cc9
   11b9c:	movt	r9, #2
   11ba0:	movt	sl, #1
   11ba4:	b	11c08 <__assert_fail@plt+0xc94>
   11ba8:	movw	r0, #41240	; 0xa118
   11bac:	movt	r0, #2
   11bb0:	ldr	r7, [r0]
   11bb4:	ldr	r0, [r6, #32]
   11bb8:	bl	10e24 <strerror@plt>
   11bbc:	movw	r1, #36201	; 0x8d69
   11bc0:	mov	r3, r0
   11bc4:	add	r2, r6, #168	; 0xa8
   11bc8:	mov	r0, r7
   11bcc:	movt	r1, #1
   11bd0:	bl	10e6c <fprintf@plt>
   11bd4:	movw	r0, #41356	; 0xa18c
   11bd8:	mov	r1, #1
   11bdc:	movt	r0, #2
   11be0:	str	r1, [r0]
   11be4:	b	11cc0 <__assert_fail@plt+0xd4c>
   11be8:	movw	r0, #41240	; 0xa118
   11bec:	movw	r1, #36047	; 0x8ccf
   11bf0:	add	r2, r6, #168	; 0xa8
   11bf4:	movt	r0, #2
   11bf8:	movt	r1, #1
   11bfc:	ldr	r0, [r0]
   11c00:	bl	10e6c <fprintf@plt>
   11c04:	b	11cc0 <__assert_fail@plt+0xd4c>
   11c08:	ldrh	r0, [r6, #56]	; 0x38
   11c0c:	sub	r0, r0, #1
   11c10:	cmp	r0, #6
   11c14:	bhi	11cc0 <__assert_fail@plt+0xd4c>
   11c18:	add	r1, pc, #0
   11c1c:	ldr	pc, [r1, r0, lsl #2]
   11c20:	andeq	r1, r1, ip, lsr ip
   11c24:	andeq	r1, r1, r8, ror #23
   11c28:	andeq	r1, r1, r0, asr #25
   11c2c:	andeq	r1, r1, r8, lsr #23
   11c30:	andeq	r1, r1, r0, asr #25
   11c34:	andeq	r1, r1, r0, asr #25
   11c38:	andeq	r1, r1, r8, lsr #23
   11c3c:	ldrb	r0, [r6, #168]	; 0xa8
   11c40:	cmp	r0, #46	; 0x2e
   11c44:	bne	11c68 <__assert_fail@plt+0xcf4>
   11c48:	ldr	r0, [r6, #48]	; 0x30
   11c4c:	cmp	r0, #0
   11c50:	beq	11c68 <__assert_fail@plt+0xcf4>
   11c54:	movw	r0, #41396	; 0xa1b4
   11c58:	movt	r0, #2
   11c5c:	ldr	r0, [r0]
   11c60:	cmp	r0, #0
   11c64:	beq	11cc0 <__assert_fail@plt+0xd4c>
   11c68:	ldrb	r0, [r9]
   11c6c:	cmp	r0, #1
   11c70:	bne	11c80 <__assert_fail@plt+0xd0c>
   11c74:	ldr	r1, [r6, #28]
   11c78:	mov	r0, sl
   11c7c:	bl	10d40 <printf@plt>
   11c80:	mov	r0, r4
   11c84:	mov	r1, r5
   11c88:	bl	15928 <__assert_fail@plt+0x49b4>
   11c8c:	mov	r7, r0
   11c90:	mov	r0, r6
   11c94:	mov	r1, r7
   11c98:	bl	11e08 <__assert_fail@plt+0xe94>
   11c9c:	cmp	r7, #0
   11ca0:	beq	11cc0 <__assert_fail@plt+0xd4c>
   11ca4:	ldr	r0, [r8]
   11ca8:	cmp	r0, #0
   11cac:	bne	11cc0 <__assert_fail@plt+0xd4c>
   11cb0:	mov	r0, r4
   11cb4:	mov	r1, r6
   11cb8:	mov	r2, #4
   11cbc:	bl	158fc <__assert_fail@plt+0x4988>
   11cc0:	mov	r0, r4
   11cc4:	bl	14068 <__assert_fail@plt+0x30f4>
   11cc8:	mov	r6, r0
   11ccc:	cmp	r0, #0
   11cd0:	bne	11c08 <__assert_fail@plt+0xc94>
   11cd4:	bl	10e78 <__errno_location@plt>
   11cd8:	ldr	r0, [r0]
   11cdc:	cmp	r0, #0
   11ce0:	bne	11d24 <__assert_fail@plt+0xdb0>
   11ce4:	sub	sp, fp, #28
   11ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cec:	movw	r0, #41240	; 0xa118
   11cf0:	ldr	r4, [r5]
   11cf4:	movt	r0, #2
   11cf8:	ldr	r5, [r0]
   11cfc:	bl	10e78 <__errno_location@plt>
   11d00:	ldr	r0, [r0]
   11d04:	bl	10e24 <strerror@plt>
   11d08:	movw	r1, #36024	; 0x8cb8
   11d0c:	mov	r3, r0
   11d10:	mov	r0, r5
   11d14:	mov	r2, r4
   11d18:	movt	r1, #1
   11d1c:	bl	10e6c <fprintf@plt>
   11d20:	b	11d48 <__assert_fail@plt+0xdd4>
   11d24:	movw	r1, #41240	; 0xa118
   11d28:	movt	r1, #2
   11d2c:	ldr	r4, [r1]
   11d30:	bl	10e24 <strerror@plt>
   11d34:	movw	r1, #36076	; 0x8cec
   11d38:	mov	r2, r0
   11d3c:	mov	r0, r4
   11d40:	movt	r1, #1
   11d44:	bl	10e6c <fprintf@plt>
   11d48:	movw	r0, #41356	; 0xa18c
   11d4c:	mov	r1, #1
   11d50:	movt	r0, #2
   11d54:	str	r1, [r0]
   11d58:	sub	sp, fp, #28
   11d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d60:	ldr	r0, [r0]
   11d64:	mov	r2, #0
   11d68:	ldrh	r3, [r0, #56]	; 0x38
   11d6c:	cmp	r3, #7
   11d70:	beq	11da8 <__assert_fail@plt+0xe34>
   11d74:	ldr	r1, [r1]
   11d78:	ldrh	ip, [r1, #56]	; 0x38
   11d7c:	cmp	ip, #7
   11d80:	beq	11da8 <__assert_fail@plt+0xe34>
   11d84:	cmp	r3, #10
   11d88:	cmpne	ip, #10
   11d8c:	bne	11db0 <__assert_fail@plt+0xe3c>
   11d90:	mov	r2, #1
   11d94:	cmp	ip, #10
   11d98:	mvneq	r2, #0
   11d9c:	cmp	r3, #10
   11da0:	cmpeq	ip, #10
   11da4:	beq	11dec <__assert_fail@plt+0xe78>
   11da8:	mov	r0, r2
   11dac:	bx	lr
   11db0:	cmp	r3, ip
   11db4:	beq	11ddc <__assert_fail@plt+0xe68>
   11db8:	push	{fp, lr}
   11dbc:	mov	fp, sp
   11dc0:	movw	r2, #41380	; 0xa1a4
   11dc4:	ldr	lr, [r0, #48]	; 0x30
   11dc8:	movt	r2, #2
   11dcc:	ldr	r2, [r2]
   11dd0:	orrs	r2, r2, lr
   11dd4:	pop	{fp, lr}
   11dd8:	beq	11df0 <__assert_fail@plt+0xe7c>
   11ddc:	movw	r2, #41252	; 0xa124
   11de0:	movt	r2, #2
   11de4:	ldr	r2, [r2, #4]
   11de8:	bx	r2
   11dec:	b	13108 <__assert_fail@plt+0x2194>
   11df0:	mov	r2, #1
   11df4:	cmp	r3, #1
   11df8:	mvnne	r2, #0
   11dfc:	cmpne	ip, #1
   11e00:	beq	11da8 <__assert_fail@plt+0xe34>
   11e04:	b	11ddc <__assert_fail@plt+0xe68>
   11e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e0c:	add	fp, sp, #28
   11e10:	sub	sp, sp, #180	; 0xb4
   11e14:	cmp	r1, #0
   11e18:	beq	122d8 <__assert_fail@plt+0x1364>
   11e1c:	mov	lr, r0
   11e20:	movw	r0, #41332	; 0xa174
   11e24:	movw	r2, #41360	; 0xa190
   11e28:	mov	sl, #0
   11e2c:	str	r1, [sp, #4]
   11e30:	mov	r4, r1
   11e34:	mov	r5, #0
   11e38:	mov	r7, #0
   11e3c:	mov	r1, #0
   11e40:	mov	ip, #0
   11e44:	movt	r0, #2
   11e48:	movt	r2, #2
   11e4c:	str	lr, [sp, #12]
   11e50:	ldr	r0, [r0]
   11e54:	ldr	r2, [r2]
   11e58:	orr	r0, r2, r0
   11e5c:	movw	r2, #41308	; 0xa15c
   11e60:	movt	r2, #2
   11e64:	ldr	r2, [r2]
   11e68:	orr	r0, r0, r2
   11e6c:	str	r0, [sp, #44]	; 0x2c
   11e70:	mov	r0, #0
   11e74:	str	r0, [sp, #40]	; 0x28
   11e78:	mov	r0, #0
   11e7c:	str	r0, [sp, #56]	; 0x38
   11e80:	mov	r0, #0
   11e84:	str	r0, [sp, #36]	; 0x24
   11e88:	mov	r0, #0
   11e8c:	str	r0, [sp, #32]
   11e90:	mov	r0, #0
   11e94:	str	r0, [sp, #28]
   11e98:	mov	r0, #0
   11e9c:	str	r0, [sp, #60]	; 0x3c
   11ea0:	mov	r0, #0
   11ea4:	str	r0, [sp, #8]
   11ea8:	mov	r0, #0
   11eac:	str	r0, [sp, #52]	; 0x34
   11eb0:	ldrh	r0, [r4, #56]	; 0x38
   11eb4:	cmp	r0, #10
   11eb8:	cmpne	r0, #7
   11ebc:	beq	12178 <__assert_fail@plt+0x1204>
   11ec0:	cmp	lr, #0
   11ec4:	beq	11eec <__assert_fail@plt+0xf78>
   11ec8:	ldrb	r0, [r4, #168]	; 0xa8
   11ecc:	cmp	r0, #46	; 0x2e
   11ed0:	bne	11f20 <__assert_fail@plt+0xfac>
   11ed4:	movw	r0, #41396	; 0xa1b4
   11ed8:	movt	r0, #2
   11edc:	ldr	r0, [r0]
   11ee0:	cmp	r0, #0
   11ee4:	beq	11f08 <__assert_fail@plt+0xf94>
   11ee8:	b	11f20 <__assert_fail@plt+0xfac>
   11eec:	cmp	r0, #1
   11ef0:	bne	11f20 <__assert_fail@plt+0xfac>
   11ef4:	movw	r0, #41380	; 0xa1a4
   11ef8:	movt	r0, #2
   11efc:	ldr	r0, [r0]
   11f00:	cmp	r0, #0
   11f04:	bne	11f20 <__assert_fail@plt+0xfac>
   11f08:	mov	r0, #1
   11f0c:	str	r0, [r4, #16]
   11f10:	ldr	r4, [r4, #8]
   11f14:	cmp	r4, #0
   11f18:	bne	11eb0 <__assert_fail@plt+0xf3c>
   11f1c:	b	121d8 <__assert_fail@plt+0x1264>
   11f20:	ldr	r0, [r4, #52]	; 0x34
   11f24:	cmp	r0, r1
   11f28:	movhi	r1, r0
   11f2c:	ldr	r0, [sp, #44]	; 0x2c
   11f30:	cmp	r0, #0
   11f34:	beq	12164 <__assert_fail@plt+0x11f0>
   11f38:	str	r1, [sp, #64]	; 0x40
   11f3c:	str	r7, [sp, #48]	; 0x30
   11f40:	ldr	r3, [sp, #60]	; 0x3c
   11f44:	ldr	r9, [sp, #52]	; 0x34
   11f48:	ldrd	r0, [r4, #160]	; 0xa0
   11f4c:	subs	r2, r3, r0
   11f50:	rscs	r1, r1, #0
   11f54:	ldr	r2, [r4, #84]	; 0x54
   11f58:	movcc	r3, r0
   11f5c:	str	r3, [sp, #60]	; 0x3c
   11f60:	ldrd	r0, [r4, #128]	; 0x80
   11f64:	ldrd	r6, [r4, #112]	; 0x70
   11f68:	subs	r3, r9, r0
   11f6c:	rscs	r1, r1, r9, asr #31
   11f70:	movlt	r9, r0
   11f74:	subs	r1, sl, r6
   11f78:	sbcs	r1, r5, r7
   11f7c:	str	r9, [sp, #52]	; 0x34
   11f80:	mov	r1, #0
   11f84:	movwlt	r1, #1
   11f88:	cmp	r1, #0
   11f8c:	ldr	r1, [sp, #56]	; 0x38
   11f90:	movne	r5, r7
   11f94:	movne	sl, r6
   11f98:	cmp	r2, ip
   11f9c:	movhi	ip, r2
   11fa0:	add	r1, r1, r0
   11fa4:	movw	r0, #41360	; 0xa190
   11fa8:	movt	r0, #2
   11fac:	str	r1, [sp, #56]	; 0x38
   11fb0:	ldr	r0, [r0]
   11fb4:	cmp	r0, #0
   11fb8:	beq	1215c <__assert_fail@plt+0x11e8>
   11fbc:	movw	r0, #41372	; 0xa19c
   11fc0:	mov	r9, #0
   11fc4:	str	ip, [sp, #20]
   11fc8:	str	r5, [sp, #24]
   11fcc:	movt	r0, #2
   11fd0:	ldr	r0, [r0]
   11fd4:	cmp	r0, #0
   11fd8:	beq	11ffc <__assert_fail@plt+0x1088>
   11fdc:	ldr	r0, [r4, #88]	; 0x58
   11fe0:	mov	r1, #0
   11fe4:	add	r2, sp, #90	; 0x5a
   11fe8:	bl	1845c <__assert_fail@plt+0x74e8>
   11fec:	mov	r8, r0
   11ff0:	cmp	r9, #0
   11ff4:	bne	12048 <__assert_fail@plt+0x10d4>
   11ff8:	b	12034 <__assert_fail@plt+0x10c0>
   11ffc:	ldr	r0, [r4, #88]	; 0x58
   12000:	bl	10d34 <getpwuid@plt>
   12004:	cmp	r0, #0
   12008:	mov	r8, #0
   1200c:	mov	r9, #0
   12010:	ldrne	r8, [r0]
   12014:	ldr	r0, [r4, #92]	; 0x5c
   12018:	bl	10f68 <getgrgid@plt>
   1201c:	cmp	r0, #0
   12020:	ldrne	r9, [r0]
   12024:	cmp	r8, #0
   12028:	beq	11fdc <__assert_fail@plt+0x1068>
   1202c:	cmp	r9, #0
   12030:	bne	12048 <__assert_fail@plt+0x10d4>
   12034:	ldr	r0, [r4, #92]	; 0x5c
   12038:	mov	r1, #0
   1203c:	add	r2, sp, #69	; 0x45
   12040:	bl	1845c <__assert_fail@plt+0x74e8>
   12044:	mov	r9, r0
   12048:	mov	r0, r8
   1204c:	bl	10e48 <strlen@plt>
   12050:	mov	r5, r0
   12054:	mov	r0, r9
   12058:	bl	10e48 <strlen@plt>
   1205c:	movw	r1, #41324	; 0xa16c
   12060:	ldr	r3, [sp, #40]	; 0x28
   12064:	movw	r2, #36321	; 0x8de1
   12068:	add	r7, r0, r5
   1206c:	movt	r1, #2
   12070:	movt	r2, #1
   12074:	ldr	r1, [r1]
   12078:	cmp	r1, #0
   1207c:	movne	r3, r2
   12080:	mov	r2, #1
   12084:	str	r3, [sp, #40]	; 0x28
   12088:	ldr	r3, [sp, #28]
   1208c:	moveq	r2, r3
   12090:	cmp	r3, #1
   12094:	movle	r3, r2
   12098:	ldr	r2, [sp, #36]	; 0x24
   1209c:	str	r3, [sp, #28]
   120a0:	cmp	r5, r2
   120a4:	movgt	r2, r5
   120a8:	str	r2, [sp, #36]	; 0x24
   120ac:	ldr	r2, [sp, #32]
   120b0:	cmp	r0, r2
   120b4:	movgt	r2, r0
   120b8:	cmp	r1, #0
   120bc:	movwne	r1, #1
   120c0:	str	r2, [sp, #32]
   120c4:	add	r0, r7, r1
   120c8:	add	r0, r0, #19
   120cc:	bl	1862c <__assert_fail@plt+0x76b8>
   120d0:	cmp	r0, #0
   120d4:	beq	122e0 <__assert_fail@plt+0x136c>
   120d8:	str	sl, [sp, #16]
   120dc:	add	sl, r0, #12
   120e0:	mov	r6, r0
   120e4:	mov	r1, r8
   120e8:	str	sl, [r0]
   120ec:	mov	r0, sl
   120f0:	bl	10de8 <strcpy@plt>
   120f4:	add	r0, sl, r5
   120f8:	mov	r1, r9
   120fc:	add	r0, r0, #1
   12100:	str	r0, [r6, #4]
   12104:	bl	10de8 <strcpy@plt>
   12108:	ldr	r0, [r4, #80]	; 0x50
   1210c:	and	r0, r0, #45056	; 0xb000
   12110:	orr	r0, r0, #16384	; 0x4000
   12114:	cmp	r0, #24576	; 0x6000
   12118:	moveq	r0, #1
   1211c:	streq	r0, [sp, #8]
   12120:	movw	r0, #41324	; 0xa16c
   12124:	movt	r0, #2
   12128:	ldr	r0, [r0]
   1212c:	cmp	r0, #0
   12130:	beq	12148 <__assert_fail@plt+0x11d4>
   12134:	ldr	r1, [sp, #40]	; 0x28
   12138:	add	r0, sl, r7
   1213c:	add	r0, r0, #2
   12140:	str	r0, [r6, #8]
   12144:	bl	10de8 <strcpy@plt>
   12148:	ldr	sl, [sp, #16]
   1214c:	ldr	r5, [sp, #24]
   12150:	ldr	ip, [sp, #20]
   12154:	ldr	lr, [sp, #12]
   12158:	str	r6, [r4, #20]
   1215c:	ldr	r7, [sp, #48]	; 0x30
   12160:	ldr	r1, [sp, #64]	; 0x40
   12164:	add	r7, r7, #1
   12168:	ldr	r4, [r4, #8]
   1216c:	cmp	r4, #0
   12170:	bne	11eb0 <__assert_fail@plt+0xf3c>
   12174:	b	121d8 <__assert_fail@plt+0x1264>
   12178:	movw	r0, #41240	; 0xa118
   1217c:	mov	r9, ip
   12180:	str	r1, [sp, #64]	; 0x40
   12184:	movt	r0, #2
   12188:	ldr	r6, [r0]
   1218c:	ldr	r0, [r4, #32]
   12190:	bl	10e24 <strerror@plt>
   12194:	movw	r1, #36201	; 0x8d69
   12198:	mov	r3, r0
   1219c:	add	r2, r4, #168	; 0xa8
   121a0:	mov	r0, r6
   121a4:	movt	r1, #1
   121a8:	bl	10e6c <fprintf@plt>
   121ac:	movw	r0, #41356	; 0xa18c
   121b0:	mov	r1, #1
   121b4:	ldr	lr, [sp, #12]
   121b8:	mov	ip, r9
   121bc:	movt	r0, #2
   121c0:	str	r1, [r4, #16]
   121c4:	str	r1, [r0]
   121c8:	ldr	r1, [sp, #64]	; 0x40
   121cc:	ldr	r4, [r4, #8]
   121d0:	cmp	r4, #0
   121d4:	bne	11eb0 <__assert_fail@plt+0xf3c>
   121d8:	ldr	r0, [sp, #4]
   121dc:	cmp	r7, #0
   121e0:	beq	122d8 <__assert_fail@plt+0x1364>
   121e4:	str	r7, [fp, #-64]	; 0xffffffc0
   121e8:	str	r0, [fp, #-76]	; 0xffffffb4
   121ec:	ldr	r0, [sp, #44]	; 0x2c
   121f0:	str	r1, [fp, #-60]	; 0xffffffc4
   121f4:	cmp	r0, #0
   121f8:	beq	12290 <__assert_fail@plt+0x131c>
   121fc:	ldr	r0, [sp, #56]	; 0x38
   12200:	sub	r6, fp, #97	; 0x61
   12204:	mov	r4, r5
   12208:	mov	r5, ip
   1220c:	mov	r2, r6
   12210:	str	r0, [fp, #-72]	; 0xffffffb8
   12214:	ldr	r0, [sp, #8]
   12218:	str	r0, [fp, #-68]	; 0xffffffbc
   1221c:	ldr	r0, [sp, #52]	; 0x34
   12220:	asr	r1, r0, #31
   12224:	bl	1845c <__assert_fail@plt+0x74e8>
   12228:	bl	10e48 <strlen@plt>
   1222c:	str	r0, [fp, #-56]	; 0xffffffc8
   12230:	ldr	r0, [sp, #28]
   12234:	mov	r1, #0
   12238:	mov	r2, r6
   1223c:	str	r0, [fp, #-52]	; 0xffffffcc
   12240:	ldr	r0, [sp, #32]
   12244:	str	r0, [fp, #-48]	; 0xffffffd0
   12248:	ldr	r0, [sp, #60]	; 0x3c
   1224c:	bl	1845c <__assert_fail@plt+0x74e8>
   12250:	bl	10e48 <strlen@plt>
   12254:	str	r0, [fp, #-44]	; 0xffffffd4
   12258:	mov	r0, r5
   1225c:	mov	r1, #0
   12260:	mov	r2, r6
   12264:	bl	1845c <__assert_fail@plt+0x74e8>
   12268:	bl	10e48 <strlen@plt>
   1226c:	str	r0, [fp, #-40]	; 0xffffffd8
   12270:	mov	r0, sl
   12274:	mov	r1, r4
   12278:	mov	r2, r6
   1227c:	bl	1845c <__assert_fail@plt+0x74e8>
   12280:	bl	10e48 <strlen@plt>
   12284:	str	r0, [fp, #-36]	; 0xffffffdc
   12288:	ldr	r0, [sp, #36]	; 0x24
   1228c:	str	r0, [fp, #-32]	; 0xffffffe0
   12290:	movw	r4, #41252	; 0xa124
   12294:	sub	r0, fp, #76	; 0x4c
   12298:	movt	r4, #2
   1229c:	ldr	r1, [r4, #8]
   122a0:	blx	r1
   122a4:	mov	r0, #1
   122a8:	strb	r0, [r4]
   122ac:	movw	r0, #41360	; 0xa190
   122b0:	ldr	r4, [sp, #4]
   122b4:	movt	r0, #2
   122b8:	ldr	r0, [r0]
   122bc:	cmp	r0, #0
   122c0:	beq	122d8 <__assert_fail@plt+0x1364>
   122c4:	ldr	r0, [r4, #20]
   122c8:	bl	13598 <__assert_fail@plt+0x2624>
   122cc:	ldr	r4, [r4, #8]
   122d0:	cmp	r4, #0
   122d4:	bne	122c4 <__assert_fail@plt+0x1350>
   122d8:	sub	sp, fp, #28
   122dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e0:	movw	r0, #41240	; 0xa118
   122e4:	movt	r0, #2
   122e8:	ldr	r4, [r0]
   122ec:	bl	10e78 <__errno_location@plt>
   122f0:	ldr	r0, [r0]
   122f4:	bl	10e24 <strerror@plt>
   122f8:	movw	r1, #36089	; 0x8cf9
   122fc:	mov	r2, r0
   12300:	mov	r0, r4
   12304:	movt	r1, #1
   12308:	bl	10e6c <fprintf@plt>
   1230c:	movw	r1, #41356	; 0xa18c
   12310:	mov	r0, #1
   12314:	movt	r1, #2
   12318:	str	r0, [r1]
   1231c:	sub	sp, fp, #28
   12320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12324:	push	{r4, r5, r6, sl, fp, lr}
   12328:	add	fp, sp, #16
   1232c:	ldr	r5, [r0]
   12330:	cmp	r5, #0
   12334:	popeq	{r4, r5, r6, sl, fp, pc}
   12338:	movw	r6, #41244	; 0xa11c
   1233c:	mov	r4, r0
   12340:	movt	r6, #2
   12344:	ldr	r0, [r5, #16]
   12348:	cmp	r0, #1
   1234c:	beq	1236c <__assert_fail@plt+0x13f8>
   12350:	ldr	r2, [r4, #20]
   12354:	ldr	r1, [r4, #32]
   12358:	mov	r0, r5
   1235c:	bl	1237c <__assert_fail@plt+0x1408>
   12360:	ldr	r1, [r6]
   12364:	mov	r0, #10
   12368:	bl	10ed8 <putc@plt>
   1236c:	ldr	r5, [r5, #8]
   12370:	cmp	r5, #0
   12374:	bne	12344 <__assert_fail@plt+0x13d0>
   12378:	pop	{r4, r5, r6, sl, fp, pc}
   1237c:	push	{r4, r5, r6, sl, fp, lr}
   12380:	add	fp, sp, #16
   12384:	mov	r4, r0
   12388:	movw	r0, #41332	; 0xa174
   1238c:	mov	r6, r2
   12390:	movt	r0, #2
   12394:	ldr	r0, [r0]
   12398:	cmp	r0, #0
   1239c:	beq	123b8 <__assert_fail@plt+0x1444>
   123a0:	ldr	r2, [r4, #160]	; 0xa0
   123a4:	movw	r0, #36111	; 0x8d0f
   123a8:	movt	r0, #1
   123ac:	bl	10d40 <printf@plt>
   123b0:	mov	r5, r0
   123b4:	b	123bc <__assert_fail@plt+0x1448>
   123b8:	mov	r5, #0
   123bc:	movw	r0, #41308	; 0xa15c
   123c0:	movt	r0, #2
   123c4:	ldr	r0, [r0]
   123c8:	cmp	r0, #0
   123cc:	beq	12410 <__assert_fail@plt+0x149c>
   123d0:	movw	r2, #41388	; 0xa1ac
   123d4:	ldrd	r0, [r4, #128]	; 0x80
   123d8:	movt	r2, #2
   123dc:	ldr	r2, [r2]
   123e0:	sub	r3, r2, #1
   123e4:	adds	r0, r0, r3
   123e8:	adc	r1, r1, r3, asr #31
   123ec:	asr	r3, r2, #31
   123f0:	bl	189d8 <__assert_fail@plt+0x7a64>
   123f4:	mov	r2, r0
   123f8:	movw	r0, #36156	; 0x8d3c
   123fc:	mov	r3, r1
   12400:	mov	r1, r6
   12404:	movt	r0, #1
   12408:	bl	10d40 <printf@plt>
   1240c:	add	r5, r0, r5
   12410:	add	r0, r4, #168	; 0xa8
   12414:	bl	13054 <__assert_fail@plt+0x20e0>
   12418:	add	r5, r0, r5
   1241c:	movw	r0, #41348	; 0xa184
   12420:	movt	r0, #2
   12424:	ldr	r0, [r0]
   12428:	cmp	r0, #0
   1242c:	beq	12444 <__assert_fail@plt+0x14d0>
   12430:	ldr	r0, [r4, #80]	; 0x50
   12434:	bl	12988 <__assert_fail@plt+0x1a14>
   12438:	add	r5, r0, r5
   1243c:	mov	r0, r5
   12440:	pop	{r4, r5, r6, sl, fp, pc}
   12444:	movw	r0, #41364	; 0xa194
   12448:	movt	r0, #2
   1244c:	ldr	r0, [r0]
   12450:	cmp	r0, #0
   12454:	beq	1243c <__assert_fail@plt+0x14c8>
   12458:	ldr	r0, [r4, #80]	; 0x50
   1245c:	and	r1, r0, #61440	; 0xf000
   12460:	cmp	r1, #16384	; 0x4000
   12464:	beq	12434 <__assert_fail@plt+0x14c0>
   12468:	b	1243c <__assert_fail@plt+0x14c8>
   1246c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12470:	add	fp, sp, #28
   12474:	sub	sp, sp, #44	; 0x2c
   12478:	sub	sp, sp, #8192	; 0x2000
   1247c:	ldr	r9, [r0]
   12480:	mov	r5, r0
   12484:	ldr	r0, [r9, #48]	; 0x30
   12488:	cmp	r0, #0
   1248c:	beq	124dc <__assert_fail@plt+0x1568>
   12490:	movw	r0, #41360	; 0xa190
   12494:	movw	r1, #41308	; 0xa15c
   12498:	movt	r0, #2
   1249c:	movt	r1, #2
   124a0:	ldr	r0, [r0]
   124a4:	ldr	r1, [r1]
   124a8:	orrs	r0, r1, r0
   124ac:	beq	124dc <__assert_fail@plt+0x1568>
   124b0:	movw	r0, #41388	; 0xa1ac
   124b4:	ldr	r1, [r5, #4]
   124b8:	movt	r0, #2
   124bc:	ldr	r0, [r0]
   124c0:	add	r1, r1, r0
   124c4:	sub	r1, r1, #1
   124c8:	udiv	r1, r1, r0
   124cc:	movw	r0, #36100	; 0x8d04
   124d0:	movt	r0, #1
   124d4:	bl	10d40 <printf@plt>
   124d8:	ldr	r9, [r5]
   124dc:	cmp	r9, #0
   124e0:	beq	127e4 <__assert_fail@plt+0x1870>
   124e4:	add	sl, sp, #40	; 0x28
   124e8:	b	12520 <__assert_fail@plt+0x15ac>
   124ec:	movw	r0, #41240	; 0xa118
   124f0:	movt	r0, #2
   124f4:	ldr	r8, [r0]
   124f8:	bl	10e78 <__errno_location@plt>
   124fc:	ldr	r0, [r0]
   12500:	bl	10e24 <strerror@plt>
   12504:	movw	r1, #36196	; 0x8d64
   12508:	mov	r3, r0
   1250c:	mov	r0, r8
   12510:	mov	r2, r6
   12514:	movt	r1, #1
   12518:	bl	10e6c <fprintf@plt>
   1251c:	b	127c4 <__assert_fail@plt+0x1850>
   12520:	ldr	r0, [r9, #16]
   12524:	cmp	r0, #1
   12528:	beq	127d8 <__assert_fail@plt+0x1864>
   1252c:	movw	r0, #41332	; 0xa174
   12530:	movt	r0, #2
   12534:	ldr	r0, [r0]
   12538:	cmp	r0, #0
   1253c:	beq	12554 <__assert_fail@plt+0x15e0>
   12540:	ldr	r2, [r9, #160]	; 0xa0
   12544:	ldr	r1, [r5, #32]
   12548:	movw	r0, #36111	; 0x8d0f
   1254c:	movt	r0, #1
   12550:	bl	10d40 <printf@plt>
   12554:	movw	r0, #41308	; 0xa15c
   12558:	movt	r0, #2
   1255c:	ldr	r0, [r0]
   12560:	cmp	r0, #0
   12564:	beq	125a4 <__assert_fail@plt+0x1630>
   12568:	movw	r2, #41388	; 0xa1ac
   1256c:	ldrd	r0, [r9, #128]	; 0x80
   12570:	movt	r2, #2
   12574:	ldr	r2, [r2]
   12578:	sub	r3, r2, #1
   1257c:	adds	r0, r0, r3
   12580:	adc	r1, r1, r3, asr #31
   12584:	asr	r3, r2, #31
   12588:	bl	189d8 <__assert_fail@plt+0x7a64>
   1258c:	mov	r3, r1
   12590:	ldr	r1, [r5, #20]
   12594:	mov	r2, r0
   12598:	movw	r0, #36156	; 0x8d3c
   1259c:	movt	r0, #1
   125a0:	bl	10d40 <printf@plt>
   125a4:	ldr	r0, [r9, #80]	; 0x50
   125a8:	add	r4, sp, #20
   125ac:	mov	r1, r4
   125b0:	bl	13434 <__assert_fail@plt+0x24c0>
   125b4:	ldr	r7, [r9, #20]
   125b8:	ldr	r0, [r5, #28]
   125bc:	ldr	r1, [r5, #44]	; 0x2c
   125c0:	ldr	r2, [r5, #36]	; 0x24
   125c4:	mov	r8, r5
   125c8:	ldr	r3, [r9, #84]	; 0x54
   125cc:	ldr	r6, [r7]
   125d0:	ldr	r5, [r7, #4]
   125d4:	stm	sp, {r1, r6}
   125d8:	str	r0, [sp, #8]
   125dc:	movw	r0, #36117	; 0x8d15
   125e0:	mov	r1, r4
   125e4:	str	r5, [sp, #12]
   125e8:	mov	r5, r8
   125ec:	movt	r0, #1
   125f0:	bl	10d40 <printf@plt>
   125f4:	movw	r0, #41324	; 0xa16c
   125f8:	movt	r0, #2
   125fc:	ldr	r0, [r0]
   12600:	cmp	r0, #0
   12604:	beq	1261c <__assert_fail@plt+0x16a8>
   12608:	ldr	r2, [r7, #8]
   1260c:	ldr	r1, [r5, #24]
   12610:	movw	r0, #36137	; 0x8d29
   12614:	movt	r0, #1
   12618:	bl	10d40 <printf@plt>
   1261c:	ldr	r0, [r9, #80]	; 0x50
   12620:	sub	lr, fp, #4096	; 0x1000
   12624:	sub	r6, lr, #32
   12628:	and	r0, r0, #45056	; 0xb000
   1262c:	orr	r0, r0, #16384	; 0x4000
   12630:	cmp	r0, #24576	; 0x6000
   12634:	bne	12654 <__assert_fail@plt+0x16e0>
   12638:	ldr	r0, [r9, #96]	; 0x60
   1263c:	ubfx	r1, r0, #8, #8
   12640:	uxtb	r2, r0
   12644:	movw	r0, #36143	; 0x8d2f
   12648:	movt	r0, #1
   1264c:	bl	10d40 <printf@plt>
   12650:	b	126a4 <__assert_fail@plt+0x1730>
   12654:	ldr	r0, [r5, #8]
   12658:	ldr	r3, [r5, #40]	; 0x28
   1265c:	cmp	r0, #0
   12660:	beq	12684 <__assert_fail@plt+0x1710>
   12664:	ldrd	r0, [r9, #112]	; 0x70
   12668:	movw	r2, #36177	; 0x8d51
   1266c:	movt	r2, #1
   12670:	stm	sp, {r0, r1}
   12674:	movw	r0, #36153	; 0x8d39
   12678:	rsb	r1, r3, #8
   1267c:	movt	r0, #1
   12680:	b	126a0 <__assert_fail@plt+0x172c>
   12684:	ldr	r2, [r9, #112]	; 0x70
   12688:	ldr	r5, [r9, #116]	; 0x74
   1268c:	movw	r0, #36156	; 0x8d3c
   12690:	mov	r1, r3
   12694:	movt	r0, #1
   12698:	mov	r3, r5
   1269c:	mov	r5, r8
   126a0:	bl	10d40 <printf@plt>
   126a4:	movw	r0, #41340	; 0xa17c
   126a8:	movt	r0, #2
   126ac:	ldr	r0, [r0]
   126b0:	cmp	r0, #0
   126b4:	beq	126c0 <__assert_fail@plt+0x174c>
   126b8:	ldr	r0, [r9, #136]	; 0x88
   126bc:	b	126d8 <__assert_fail@plt+0x1764>
   126c0:	movw	r0, #41384	; 0xa1a8
   126c4:	movt	r0, #2
   126c8:	ldr	r0, [r0]
   126cc:	cmp	r0, #0
   126d0:	ldreq	r0, [r9, #144]	; 0x90
   126d4:	ldrne	r0, [r9, #152]	; 0x98
   126d8:	bl	127ec <__assert_fail@plt+0x1878>
   126dc:	add	r8, r9, #168	; 0xa8
   126e0:	mov	r0, r8
   126e4:	bl	13054 <__assert_fail@plt+0x20e0>
   126e8:	movw	r0, #41348	; 0xa184
   126ec:	movt	r0, #2
   126f0:	ldr	r0, [r0]
   126f4:	cmp	r0, #0
   126f8:	beq	12718 <__assert_fail@plt+0x17a4>
   126fc:	ldr	r0, [r9, #80]	; 0x50
   12700:	bl	12988 <__assert_fail@plt+0x1a14>
   12704:	ldr	r0, [r9, #80]	; 0x50
   12708:	and	r0, r0, #61440	; 0xf000
   1270c:	cmp	r0, #40960	; 0xa000
   12710:	beq	1274c <__assert_fail@plt+0x17d8>
   12714:	b	127c4 <__assert_fail@plt+0x1850>
   12718:	movw	r0, #41364	; 0xa194
   1271c:	movt	r0, #2
   12720:	ldr	r0, [r0]
   12724:	cmp	r0, #0
   12728:	beq	1273c <__assert_fail@plt+0x17c8>
   1272c:	ldr	r0, [r9, #80]	; 0x50
   12730:	and	r1, r0, #61440	; 0xf000
   12734:	cmp	r1, #16384	; 0x4000
   12738:	bleq	12988 <__assert_fail@plt+0x1a14>
   1273c:	ldr	r0, [r9, #80]	; 0x50
   12740:	and	r0, r0, #61440	; 0xf000
   12744:	cmp	r0, #40960	; 0xa000
   12748:	bne	127c4 <__assert_fail@plt+0x1850>
   1274c:	ldr	r0, [r9, #48]	; 0x30
   12750:	cmp	r0, #0
   12754:	beq	12778 <__assert_fail@plt+0x1804>
   12758:	ldr	r0, [r9, #4]
   1275c:	movw	r2, #36190	; 0x8d5e
   12760:	mov	r1, #4096	; 0x1000
   12764:	movt	r2, #1
   12768:	ldr	r3, [r0, #24]
   1276c:	mov	r0, r6
   12770:	str	r8, [sp]
   12774:	b	1278c <__assert_fail@plt+0x1818>
   12778:	movw	r2, #36097	; 0x8d01
   1277c:	mov	r0, r6
   12780:	mov	r1, #4096	; 0x1000
   12784:	mov	r3, r8
   12788:	movt	r2, #1
   1278c:	bl	10e84 <snprintf@plt>
   12790:	mov	r0, r6
   12794:	mov	r1, sl
   12798:	movw	r2, #4095	; 0xfff
   1279c:	bl	10dc4 <readlink@plt>
   127a0:	cmn	r0, #1
   127a4:	beq	124ec <__assert_fail@plt+0x1578>
   127a8:	mov	r1, #0
   127ac:	strb	r1, [sl, r0]
   127b0:	movw	r0, #36209	; 0x8d71
   127b4:	movt	r0, #1
   127b8:	bl	10d40 <printf@plt>
   127bc:	mov	r0, sl
   127c0:	bl	13054 <__assert_fail@plt+0x20e0>
   127c4:	movw	r0, #41244	; 0xa11c
   127c8:	movt	r0, #2
   127cc:	ldr	r1, [r0]
   127d0:	mov	r0, #10
   127d4:	bl	10ed8 <putc@plt>
   127d8:	ldr	r9, [r9, #8]
   127dc:	cmp	r9, #0
   127e0:	bne	12520 <__assert_fail@plt+0x15ac>
   127e4:	sub	sp, fp, #28
   127e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ec:	push	{r4, r5, r6, sl, fp, lr}
   127f0:	add	fp, sp, #16
   127f4:	sub	sp, sp, #8
   127f8:	str	r0, [sp, #4]
   127fc:	add	r0, sp, #4
   12800:	bl	10d88 <ctime@plt>
   12804:	movw	r5, #41244	; 0xa11c
   12808:	mov	r4, r0
   1280c:	ldrb	r0, [r0, #4]
   12810:	movt	r5, #2
   12814:	ldr	r1, [r5]
   12818:	bl	10ed8 <putc@plt>
   1281c:	ldrb	r0, [r4, #5]
   12820:	ldr	r1, [r5]
   12824:	bl	10ed8 <putc@plt>
   12828:	ldrb	r0, [r4, #6]
   1282c:	ldr	r1, [r5]
   12830:	bl	10ed8 <putc@plt>
   12834:	ldrb	r0, [r4, #7]
   12838:	ldr	r1, [r5]
   1283c:	bl	10ed8 <putc@plt>
   12840:	ldrb	r0, [r4, #8]
   12844:	ldr	r1, [r5]
   12848:	bl	10ed8 <putc@plt>
   1284c:	ldrb	r0, [r4, #9]
   12850:	ldr	r1, [r5]
   12854:	bl	10ed8 <putc@plt>
   12858:	ldrb	r0, [r4, #10]
   1285c:	ldr	r1, [r5]
   12860:	bl	10ed8 <putc@plt>
   12864:	movw	r0, #41368	; 0xa198
   12868:	movt	r0, #2
   1286c:	ldr	r0, [r0]
   12870:	cmp	r0, #0
   12874:	beq	128e4 <__assert_fail@plt+0x1970>
   12878:	ldr	r1, [r5]
   1287c:	ldrb	r0, [r4, #11]
   12880:	bl	10ed8 <putc@plt>
   12884:	ldrb	r0, [r4, #12]
   12888:	ldr	r1, [r5]
   1288c:	bl	10ed8 <putc@plt>
   12890:	ldrb	r0, [r4, #13]
   12894:	ldr	r1, [r5]
   12898:	bl	10ed8 <putc@plt>
   1289c:	ldrb	r0, [r4, #14]
   128a0:	ldr	r1, [r5]
   128a4:	bl	10ed8 <putc@plt>
   128a8:	ldrb	r0, [r4, #15]
   128ac:	ldr	r1, [r5]
   128b0:	bl	10ed8 <putc@plt>
   128b4:	ldrb	r0, [r4, #16]
   128b8:	ldr	r1, [r5]
   128bc:	bl	10ed8 <putc@plt>
   128c0:	ldrb	r0, [r4, #17]
   128c4:	ldr	r1, [r5]
   128c8:	bl	10ed8 <putc@plt>
   128cc:	ldrb	r0, [r4, #18]
   128d0:	ldr	r1, [r5]
   128d4:	bl	10ed8 <putc@plt>
   128d8:	ldrb	r0, [r4, #19]
   128dc:	ldr	r1, [r5]
   128e0:	b	12940 <__assert_fail@plt+0x19cc>
   128e4:	ldr	r0, [sp, #4]
   128e8:	add	r0, r0, #61696	; 0xf100
   128ec:	add	r6, r0, #15663104	; 0xef0000
   128f0:	mov	r0, #0
   128f4:	bl	10d7c <time@plt>
   128f8:	cmp	r6, r0
   128fc:	ble	12938 <__assert_fail@plt+0x19c4>
   12900:	ldr	r1, [r5]
   12904:	ldrb	r0, [r4, #11]
   12908:	bl	10ed8 <putc@plt>
   1290c:	ldrb	r0, [r4, #12]
   12910:	ldr	r1, [r5]
   12914:	bl	10ed8 <putc@plt>
   12918:	ldrb	r0, [r4, #13]
   1291c:	ldr	r1, [r5]
   12920:	bl	10ed8 <putc@plt>
   12924:	ldrb	r0, [r4, #14]
   12928:	ldr	r1, [r5]
   1292c:	bl	10ed8 <putc@plt>
   12930:	ldrb	r0, [r4, #15]
   12934:	b	1296c <__assert_fail@plt+0x19f8>
   12938:	ldr	r1, [r5]
   1293c:	mov	r0, #32
   12940:	bl	10ed8 <putc@plt>
   12944:	ldrb	r0, [r4, #20]
   12948:	ldr	r1, [r5]
   1294c:	bl	10ed8 <putc@plt>
   12950:	ldrb	r0, [r4, #21]
   12954:	ldr	r1, [r5]
   12958:	bl	10ed8 <putc@plt>
   1295c:	ldrb	r0, [r4, #22]
   12960:	ldr	r1, [r5]
   12964:	bl	10ed8 <putc@plt>
   12968:	ldrb	r0, [r4, #23]
   1296c:	ldr	r1, [r5]
   12970:	bl	10ed8 <putc@plt>
   12974:	ldr	r1, [r5]
   12978:	mov	r0, #32
   1297c:	bl	10ed8 <putc@plt>
   12980:	sub	sp, fp, #16
   12984:	pop	{r4, r5, r6, sl, fp, pc}
   12988:	push	{fp, lr}
   1298c:	mov	fp, sp
   12990:	and	r1, r0, #61440	; 0xf000
   12994:	cmp	r1, #40960	; 0xa000
   12998:	bge	129c8 <__assert_fail@plt+0x1a54>
   1299c:	cmp	r1, #4096	; 0x1000
   129a0:	beq	12a18 <__assert_fail@plt+0x1aa4>
   129a4:	cmp	r1, #16384	; 0x4000
   129a8:	bne	129f0 <__assert_fail@plt+0x1a7c>
   129ac:	movw	r0, #41244	; 0xa11c
   129b0:	movt	r0, #2
   129b4:	ldr	r1, [r0]
   129b8:	mov	r0, #47	; 0x2f
   129bc:	bl	10ed8 <putc@plt>
   129c0:	mov	r0, #1
   129c4:	pop	{fp, pc}
   129c8:	beq	12a34 <__assert_fail@plt+0x1ac0>
   129cc:	cmp	r1, #49152	; 0xc000
   129d0:	bne	129f0 <__assert_fail@plt+0x1a7c>
   129d4:	movw	r0, #41244	; 0xa11c
   129d8:	movt	r0, #2
   129dc:	ldr	r1, [r0]
   129e0:	mov	r0, #61	; 0x3d
   129e4:	bl	10ed8 <putc@plt>
   129e8:	mov	r0, #1
   129ec:	pop	{fp, pc}
   129f0:	tst	r0, #73	; 0x49
   129f4:	moveq	r0, #0
   129f8:	popeq	{fp, pc}
   129fc:	movw	r0, #41244	; 0xa11c
   12a00:	movt	r0, #2
   12a04:	ldr	r1, [r0]
   12a08:	mov	r0, #42	; 0x2a
   12a0c:	bl	10ed8 <putc@plt>
   12a10:	mov	r0, #1
   12a14:	pop	{fp, pc}
   12a18:	movw	r0, #41244	; 0xa11c
   12a1c:	movt	r0, #2
   12a20:	ldr	r1, [r0]
   12a24:	mov	r0, #124	; 0x7c
   12a28:	bl	10ed8 <putc@plt>
   12a2c:	mov	r0, #1
   12a30:	pop	{fp, pc}
   12a34:	movw	r0, #41244	; 0xa11c
   12a38:	movt	r0, #2
   12a3c:	ldr	r1, [r0]
   12a40:	mov	r0, #64	; 0x40
   12a44:	bl	10ed8 <putc@plt>
   12a48:	mov	r0, #1
   12a4c:	pop	{fp, pc}
   12a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a54:	add	fp, sp, #28
   12a58:	sub	sp, sp, #12
   12a5c:	movw	r1, #41332	; 0xa174
   12a60:	mov	r4, r0
   12a64:	ldr	r0, [r0, #16]
   12a68:	movw	r6, #41308	; 0xa15c
   12a6c:	movw	r2, #41364	; 0xa194
   12a70:	movt	r1, #2
   12a74:	movt	r6, #2
   12a78:	movt	r2, #2
   12a7c:	ldr	r1, [r1]
   12a80:	ldr	r2, [r2]
   12a84:	cmp	r1, #0
   12a88:	ldrne	r1, [r4, #32]
   12a8c:	addne	r0, r0, r1
   12a90:	ldr	r1, [r6]
   12a94:	addne	r0, r0, #1
   12a98:	cmp	r1, #0
   12a9c:	ldrne	r1, [r4, #20]
   12aa0:	addne	r0, r0, r1
   12aa4:	movw	r1, #41348	; 0xa184
   12aa8:	movt	r1, #2
   12aac:	addne	r0, r0, #1
   12ab0:	ldr	r1, [r1]
   12ab4:	orrs	r1, r2, r1
   12ab8:	movw	r1, #41204	; 0xa0f4
   12abc:	addne	r0, r0, #1
   12ac0:	movt	r1, #2
   12ac4:	add	r0, r0, #1
   12ac8:	ldr	r1, [r1]
   12acc:	add	r1, r1, #1
   12ad0:	cmp	r1, r0, lsl #1
   12ad4:	bge	12b24 <__assert_fail@plt+0x1bb0>
   12ad8:	ldr	r5, [r4]
   12adc:	cmp	r5, #0
   12ae0:	beq	12cec <__assert_fail@plt+0x1d78>
   12ae4:	movw	r6, #41244	; 0xa11c
   12ae8:	movt	r6, #2
   12aec:	ldr	r0, [r5, #16]
   12af0:	cmp	r0, #1
   12af4:	beq	12b14 <__assert_fail@plt+0x1ba0>
   12af8:	ldr	r2, [r4, #20]
   12afc:	ldr	r1, [r4, #32]
   12b00:	mov	r0, r5
   12b04:	bl	1237c <__assert_fail@plt+0x1408>
   12b08:	ldr	r1, [r6]
   12b0c:	mov	r0, #10
   12b10:	bl	10ed8 <putc@plt>
   12b14:	ldr	r5, [r5, #8]
   12b18:	cmp	r5, #0
   12b1c:	bne	12aec <__assert_fail@plt+0x1b78>
   12b20:	b	12cec <__assert_fail@plt+0x1d78>
   12b24:	sdiv	r0, r1, r0
   12b28:	str	r0, [sp]
   12b2c:	sdiv	r0, r1, r0
   12b30:	cmp	r0, #0
   12b34:	str	r0, [sp, #8]
   12b38:	beq	12cec <__assert_fail@plt+0x1d78>
   12b3c:	movw	r5, #41220	; 0xa104
   12b40:	ldr	r1, [r4, #12]
   12b44:	movt	r5, #2
   12b48:	ldr	r0, [r5]
   12b4c:	cmp	r1, r0
   12b50:	ble	12b7c <__assert_fail@plt+0x1c08>
   12b54:	movw	r7, #41264	; 0xa130
   12b58:	lsl	r1, r1, #2
   12b5c:	movt	r7, #2
   12b60:	ldr	r0, [r7]
   12b64:	bl	1865c <__assert_fail@plt+0x76e8>
   12b68:	cmp	r0, #0
   12b6c:	beq	12cf4 <__assert_fail@plt+0x1d80>
   12b70:	ldr	r1, [r4, #12]
   12b74:	str	r0, [r7]
   12b78:	str	r1, [r5]
   12b7c:	movw	r0, #41264	; 0xa130
   12b80:	ldr	r1, [r4]
   12b84:	mov	r2, #0
   12b88:	movt	r0, #2
   12b8c:	str	r2, [sp, #4]
   12b90:	ldr	r0, [r0]
   12b94:	ldr	r2, [r1, #16]
   12b98:	cmp	r2, #1
   12b9c:	ldrne	r2, [sp, #4]
   12ba0:	strne	r1, [r0, r2, lsl #2]
   12ba4:	addne	r2, r2, #1
   12ba8:	ldr	r1, [r1, #8]
   12bac:	strne	r2, [sp, #4]
   12bb0:	cmp	r1, #0
   12bb4:	bne	12b94 <__assert_fail@plt+0x1c20>
   12bb8:	ldm	sp, {r0, r1}
   12bbc:	sdiv	r5, r1, r0
   12bc0:	mls	r0, r5, r0, r1
   12bc4:	cmp	r0, #0
   12bc8:	ldr	r0, [r4]
   12bcc:	addne	r5, r5, #1
   12bd0:	ldr	r0, [r0, #48]	; 0x30
   12bd4:	cmp	r0, #0
   12bd8:	movwne	r0, #41360	; 0xa190
   12bdc:	ldrne	r1, [r6]
   12be0:	movtne	r0, #2
   12be4:	ldrne	r0, [r0]
   12be8:	orrsne	r0, r1, r0
   12bec:	bne	12bfc <__assert_fail@plt+0x1c88>
   12bf0:	cmp	r5, #1
   12bf4:	bge	12c2c <__assert_fail@plt+0x1cb8>
   12bf8:	b	12cec <__assert_fail@plt+0x1d78>
   12bfc:	movw	r0, #41388	; 0xa1ac
   12c00:	ldr	r1, [r4, #4]
   12c04:	movt	r0, #2
   12c08:	ldr	r0, [r0]
   12c0c:	add	r1, r1, r0
   12c10:	sub	r1, r1, #1
   12c14:	udiv	r1, r1, r0
   12c18:	movw	r0, #36100	; 0x8d04
   12c1c:	movt	r0, #1
   12c20:	bl	10d40 <printf@plt>
   12c24:	cmp	r5, #1
   12c28:	blt	12cec <__assert_fail@plt+0x1d78>
   12c2c:	movw	r8, #41244	; 0xa11c
   12c30:	mov	r6, #0
   12c34:	movt	r8, #2
   12c38:	movw	r0, #41264	; 0xa130
   12c3c:	ldr	r2, [r4, #20]
   12c40:	ldr	r1, [r4, #32]
   12c44:	movt	r0, #2
   12c48:	ldr	r0, [r0]
   12c4c:	ldr	r0, [r0, r6, lsl #2]
   12c50:	bl	1237c <__assert_fail@plt+0x1408>
   12c54:	ldr	r1, [sp, #4]
   12c58:	add	r9, r6, r5
   12c5c:	cmp	r9, r1
   12c60:	bge	12cd4 <__assert_fail@plt+0x1d60>
   12c64:	mov	sl, #0
   12c68:	ldr	r1, [sp]
   12c6c:	add	sl, sl, #1
   12c70:	cmp	sl, r1
   12c74:	beq	12cd4 <__assert_fail@plt+0x1d60>
   12c78:	ldr	r1, [sp, #8]
   12c7c:	mov	r7, r4
   12c80:	cmp	r0, r1
   12c84:	bge	12ca4 <__assert_fail@plt+0x1d30>
   12c88:	ldr	r1, [sp, #8]
   12c8c:	sub	r4, r1, r0
   12c90:	ldr	r1, [r8]
   12c94:	mov	r0, #32
   12c98:	bl	10ed8 <putc@plt>
   12c9c:	subs	r4, r4, #1
   12ca0:	bne	12c90 <__assert_fail@plt+0x1d1c>
   12ca4:	movw	r0, #41264	; 0xa130
   12ca8:	ldr	r2, [r7, #20]
   12cac:	ldr	r1, [r7, #32]
   12cb0:	mov	r4, r7
   12cb4:	movt	r0, #2
   12cb8:	ldr	r0, [r0]
   12cbc:	ldr	r0, [r0, r9, lsl #2]
   12cc0:	bl	1237c <__assert_fail@plt+0x1408>
   12cc4:	ldr	r1, [sp, #4]
   12cc8:	add	r9, r9, r5
   12ccc:	cmp	r9, r1
   12cd0:	blt	12c68 <__assert_fail@plt+0x1cf4>
   12cd4:	ldr	r1, [r8]
   12cd8:	mov	r0, #10
   12cdc:	bl	10ed8 <putc@plt>
   12ce0:	add	r6, r6, #1
   12ce4:	cmp	r6, r5
   12ce8:	bne	12c38 <__assert_fail@plt+0x1cc4>
   12cec:	sub	sp, fp, #28
   12cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf4:	movw	r0, #41240	; 0xa118
   12cf8:	movt	r0, #2
   12cfc:	ldr	r5, [r0]
   12d00:	bl	10e78 <__errno_location@plt>
   12d04:	ldr	r0, [r0]
   12d08:	bl	10e24 <strerror@plt>
   12d0c:	movw	r1, #36163	; 0x8d43
   12d10:	mov	r2, r0
   12d14:	mov	r0, r5
   12d18:	movt	r1, #1
   12d1c:	bl	10e6c <fprintf@plt>
   12d20:	ldr	r5, [r4]
   12d24:	cmp	r5, #0
   12d28:	beq	12cec <__assert_fail@plt+0x1d78>
   12d2c:	movw	r6, #41244	; 0xa11c
   12d30:	movt	r6, #2
   12d34:	ldr	r0, [r5, #16]
   12d38:	cmp	r0, #1
   12d3c:	beq	12d5c <__assert_fail@plt+0x1de8>
   12d40:	ldr	r2, [r4, #20]
   12d44:	ldr	r1, [r4, #32]
   12d48:	mov	r0, r5
   12d4c:	bl	1237c <__assert_fail@plt+0x1408>
   12d50:	ldr	r1, [r6]
   12d54:	mov	r0, #10
   12d58:	bl	10ed8 <putc@plt>
   12d5c:	ldr	r5, [r5, #8]
   12d60:	cmp	r5, #0
   12d64:	bne	12d34 <__assert_fail@plt+0x1dc0>
   12d68:	b	12cec <__assert_fail@plt+0x1d78>
   12d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d70:	add	fp, sp, #28
   12d74:	sub	sp, sp, #4
   12d78:	mov	sl, r0
   12d7c:	ldr	r1, [r0, #16]
   12d80:	movw	r0, #41332	; 0xa174
   12d84:	movw	r3, #41364	; 0xa194
   12d88:	movt	r0, #2
   12d8c:	movt	r3, #2
   12d90:	ldr	r0, [r0]
   12d94:	ldr	r3, [r3]
   12d98:	cmp	r0, #0
   12d9c:	ldrne	r0, [sl, #32]
   12da0:	addne	r0, r1, r0
   12da4:	addne	r1, r0, #1
   12da8:	movw	r0, #41308	; 0xa15c
   12dac:	movt	r0, #2
   12db0:	ldr	r0, [r0]
   12db4:	cmp	r0, #0
   12db8:	ldrne	r2, [sl, #20]
   12dbc:	addne	r1, r1, r2
   12dc0:	movw	r2, #41348	; 0xa184
   12dc4:	movt	r2, #2
   12dc8:	addne	r1, r1, #1
   12dcc:	ldr	r2, [r2]
   12dd0:	orrs	r2, r3, r2
   12dd4:	movw	r2, #41204	; 0xa0f4
   12dd8:	addne	r1, r1, #1
   12ddc:	movt	r2, #2
   12de0:	add	r1, r1, #1
   12de4:	ldr	r2, [r2]
   12de8:	add	r2, r2, #1
   12dec:	cmp	r2, r1, lsl #1
   12df0:	bge	12e40 <__assert_fail@plt+0x1ecc>
   12df4:	ldr	r5, [sl]
   12df8:	cmp	r5, #0
   12dfc:	beq	12e7c <__assert_fail@plt+0x1f08>
   12e00:	movw	r6, #41244	; 0xa11c
   12e04:	movt	r6, #2
   12e08:	ldr	r0, [r5, #16]
   12e0c:	cmp	r0, #1
   12e10:	beq	12e30 <__assert_fail@plt+0x1ebc>
   12e14:	ldr	r2, [sl, #20]
   12e18:	ldr	r1, [sl, #32]
   12e1c:	mov	r0, r5
   12e20:	bl	1237c <__assert_fail@plt+0x1408>
   12e24:	ldr	r1, [r6]
   12e28:	mov	r0, #10
   12e2c:	bl	10ed8 <putc@plt>
   12e30:	ldr	r5, [r5, #8]
   12e34:	cmp	r5, #0
   12e38:	bne	12e08 <__assert_fail@plt+0x1e94>
   12e3c:	b	12e7c <__assert_fail@plt+0x1f08>
   12e40:	sdiv	r9, r2, r1
   12e44:	sdiv	r8, r2, r9
   12e48:	cmp	r8, #0
   12e4c:	beq	12e7c <__assert_fail@plt+0x1f08>
   12e50:	ldr	r5, [sl]
   12e54:	ldr	r1, [r5, #48]	; 0x30
   12e58:	cmp	r1, #0
   12e5c:	movwne	r1, #41360	; 0xa190
   12e60:	movtne	r1, #2
   12e64:	ldrne	r1, [r1]
   12e68:	orrsne	r0, r0, r1
   12e6c:	bne	12e84 <__assert_fail@plt+0x1f10>
   12e70:	cmp	r5, #0
   12e74:	bne	12ebc <__assert_fail@plt+0x1f48>
   12e78:	b	12f30 <__assert_fail@plt+0x1fbc>
   12e7c:	sub	sp, fp, #28
   12e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e84:	movw	r0, #41388	; 0xa1ac
   12e88:	ldr	r1, [sl, #4]
   12e8c:	mov	r3, #0
   12e90:	movt	r0, #2
   12e94:	ldr	r0, [r0]
   12e98:	add	r1, r1, r0
   12e9c:	sub	r1, r1, #1
   12ea0:	udiv	r2, r1, r0
   12ea4:	movw	r0, #36178	; 0x8d52
   12ea8:	movt	r0, #1
   12eac:	bl	10d40 <printf@plt>
   12eb0:	ldr	r5, [sl]
   12eb4:	cmp	r5, #0
   12eb8:	beq	12f30 <__assert_fail@plt+0x1fbc>
   12ebc:	movw	r7, #41244	; 0xa11c
   12ec0:	mov	r6, #0
   12ec4:	movt	r7, #2
   12ec8:	ldr	r0, [r5, #16]
   12ecc:	cmp	r0, #1
   12ed0:	beq	12f24 <__assert_fail@plt+0x1fb0>
   12ed4:	cmp	r6, r9
   12ed8:	blt	12eec <__assert_fail@plt+0x1f78>
   12edc:	ldr	r1, [r7]
   12ee0:	mov	r0, #10
   12ee4:	bl	10ed8 <putc@plt>
   12ee8:	mov	r6, #0
   12eec:	ldr	r2, [sl, #20]
   12ef0:	ldr	r1, [sl, #32]
   12ef4:	mov	r0, r5
   12ef8:	bl	1237c <__assert_fail@plt+0x1408>
   12efc:	add	r6, r6, #1
   12f00:	cmp	r6, r9
   12f04:	cmplt	r0, r8
   12f08:	bge	12f24 <__assert_fail@plt+0x1fb0>
   12f0c:	sub	r4, r8, r0
   12f10:	ldr	r1, [r7]
   12f14:	mov	r0, #32
   12f18:	bl	10ed8 <putc@plt>
   12f1c:	subs	r4, r4, #1
   12f20:	bne	12f10 <__assert_fail@plt+0x1f9c>
   12f24:	ldr	r5, [r5, #8]
   12f28:	cmp	r5, #0
   12f2c:	bne	12ec8 <__assert_fail@plt+0x1f54>
   12f30:	movw	r0, #41244	; 0xa11c
   12f34:	movt	r0, #2
   12f38:	ldr	r1, [r0]
   12f3c:	mov	r0, #10
   12f40:	sub	sp, fp, #28
   12f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f48:	b	10ed8 <putc@plt>
   12f4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f50:	add	fp, sp, #24
   12f54:	mov	r4, r0
   12f58:	movw	r0, #41332	; 0xa174
   12f5c:	movt	r0, #2
   12f60:	ldr	r5, [r4]
   12f64:	ldr	r0, [r0]
   12f68:	cmp	r0, #0
   12f6c:	ldrne	r0, [r4, #32]
   12f70:	addne	r6, r0, #1
   12f74:	movw	r0, #41308	; 0xa15c
   12f78:	movt	r0, #2
   12f7c:	moveq	r6, #0
   12f80:	ldr	r0, [r0]
   12f84:	cmp	r0, #0
   12f88:	ldrne	r0, [r4, #20]
   12f8c:	addne	r0, r6, r0
   12f90:	addne	r6, r0, #1
   12f94:	movw	r0, #41348	; 0xa184
   12f98:	movt	r0, #2
   12f9c:	ldr	r0, [r0]
   12fa0:	cmp	r0, #0
   12fa4:	addne	r6, r6, #1
   12fa8:	cmp	r5, #0
   12fac:	beq	1303c <__assert_fail@plt+0x20c8>
   12fb0:	movw	r9, #41244	; 0xa11c
   12fb4:	movw	r8, #41204	; 0xa0f4
   12fb8:	mov	r7, #0
   12fbc:	movt	r9, #2
   12fc0:	movt	r8, #2
   12fc4:	ldr	r0, [r5, #16]
   12fc8:	cmp	r0, #1
   12fcc:	beq	13030 <__assert_fail@plt+0x20bc>
   12fd0:	cmp	r7, #1
   12fd4:	blt	1301c <__assert_fail@plt+0x20a8>
   12fd8:	ldr	r1, [r9]
   12fdc:	mov	r0, #44	; 0x2c
   12fe0:	bl	10ed8 <putc@plt>
   12fe4:	ldr	r1, [r5, #52]	; 0x34
   12fe8:	add	r7, r7, #2
   12fec:	ldr	r2, [r8]
   12ff0:	add	r0, r6, r7
   12ff4:	add	r0, r0, r1
   12ff8:	ldr	r1, [r9]
   12ffc:	cmp	r0, r2
   13000:	bcs	13010 <__assert_fail@plt+0x209c>
   13004:	mov	r0, #32
   13008:	bl	10ed8 <putc@plt>
   1300c:	b	1301c <__assert_fail@plt+0x20a8>
   13010:	mov	r0, #10
   13014:	bl	10ed8 <putc@plt>
   13018:	mov	r7, #0
   1301c:	ldr	r2, [r4, #20]
   13020:	ldr	r1, [r4, #32]
   13024:	mov	r0, r5
   13028:	bl	1237c <__assert_fail@plt+0x1408>
   1302c:	add	r7, r0, r7
   13030:	ldr	r5, [r5, #8]
   13034:	cmp	r5, #0
   13038:	bne	12fc4 <__assert_fail@plt+0x2050>
   1303c:	movw	r0, #41244	; 0xa11c
   13040:	movt	r0, #2
   13044:	ldr	r1, [r0]
   13048:	mov	r0, #10
   1304c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   13050:	b	10ed8 <putc@plt>
   13054:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13058:	add	fp, sp, #24
   1305c:	ldrb	r7, [r0]
   13060:	cmp	r7, #0
   13064:	moveq	r4, #0
   13068:	moveq	r0, r4
   1306c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   13070:	add	r6, r0, #1
   13074:	bl	10e3c <__ctype_b_loc@plt>
   13078:	movw	r8, #41400	; 0xa1b8
   1307c:	movw	r9, #41244	; 0xa11c
   13080:	mov	r5, r0
   13084:	mov	r4, #0
   13088:	movt	r8, #2
   1308c:	movt	r9, #2
   13090:	ldr	r2, [r5]
   13094:	uxtb	r1, r7
   13098:	ldr	r0, [r8]
   1309c:	add	r2, r2, r1, lsl #1
   130a0:	cmp	r0, #0
   130a4:	mov	r0, r1
   130a8:	ldrh	r2, [r2]
   130ac:	movwne	r0, #63	; 0x3f
   130b0:	tst	r2, #16384	; 0x4000
   130b4:	movne	r0, r1
   130b8:	ldr	r1, [r9]
   130bc:	bl	10ed8 <putc@plt>
   130c0:	ldrb	r7, [r6, r4]
   130c4:	add	r4, r4, #1
   130c8:	cmp	r7, #0
   130cc:	bne	13090 <__assert_fail@plt+0x211c>
   130d0:	mov	r0, r4
   130d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   130d8:	push	{fp, lr}
   130dc:	mov	fp, sp
   130e0:	movw	r0, #41240	; 0xa118
   130e4:	mov	r1, #51	; 0x33
   130e8:	mov	r2, #1
   130ec:	movt	r0, #2
   130f0:	ldr	r3, [r0]
   130f4:	movw	r0, #36214	; 0x8d76
   130f8:	movt	r0, #1
   130fc:	bl	10dd0 <fwrite@plt>
   13100:	mov	r0, #1
   13104:	pop	{fp, pc}
   13108:	add	r0, r0, #168	; 0xa8
   1310c:	add	r1, r1, #168	; 0xa8
   13110:	b	10d1c <strcmp@plt>
   13114:	add	r2, r1, #168	; 0xa8
   13118:	add	r1, r0, #168	; 0xa8
   1311c:	mov	r0, r2
   13120:	b	10d1c <strcmp@plt>
   13124:	ldr	r3, [r0, #144]	; 0x90
   13128:	ldr	r2, [r1, #144]	; 0x90
   1312c:	mov	ip, r0
   13130:	mov	r0, #1
   13134:	cmp	r2, r3
   13138:	ble	13140 <__assert_fail@plt+0x21cc>
   1313c:	bx	lr
   13140:	bne	13160 <__assert_fail@plt+0x21ec>
   13144:	push	{r4, sl, fp, lr}
   13148:	add	fp, sp, #8
   1314c:	ldr	lr, [ip, #148]	; 0x94
   13150:	ldr	r4, [r1, #148]	; 0x94
   13154:	cmp	r4, lr
   13158:	pop	{r4, sl, fp, lr}
   1315c:	bgt	1313c <__assert_fail@plt+0x21c8>
   13160:	mvn	r0, #0
   13164:	cmp	r2, r3
   13168:	bxlt	lr
   1316c:	bne	13180 <__assert_fail@plt+0x220c>
   13170:	ldr	r2, [ip, #148]	; 0x94
   13174:	ldr	r3, [r1, #148]	; 0x94
   13178:	cmp	r3, r2
   1317c:	blt	1313c <__assert_fail@plt+0x21c8>
   13180:	add	r0, ip, #168	; 0xa8
   13184:	add	r1, r1, #168	; 0xa8
   13188:	b	10d1c <strcmp@plt>
   1318c:	push	{r4, sl, fp, lr}
   13190:	add	fp, sp, #8
   13194:	ldr	r3, [r0, #144]	; 0x90
   13198:	ldr	r2, [r1, #144]	; 0x90
   1319c:	mov	ip, r0
   131a0:	mvn	r0, #0
   131a4:	cmp	r2, r3
   131a8:	bgt	131f0 <__assert_fail@plt+0x227c>
   131ac:	bne	131c0 <__assert_fail@plt+0x224c>
   131b0:	ldr	lr, [ip, #148]	; 0x94
   131b4:	ldr	r4, [r1, #148]	; 0x94
   131b8:	cmp	r4, lr
   131bc:	bgt	131f0 <__assert_fail@plt+0x227c>
   131c0:	mov	r0, #1
   131c4:	cmp	r2, r3
   131c8:	blt	131f0 <__assert_fail@plt+0x227c>
   131cc:	bne	131e0 <__assert_fail@plt+0x226c>
   131d0:	ldr	r2, [ip, #148]	; 0x94
   131d4:	ldr	r3, [r1, #148]	; 0x94
   131d8:	cmp	r3, r2
   131dc:	poplt	{r4, sl, fp, pc}
   131e0:	add	r0, ip, #168	; 0xa8
   131e4:	add	r1, r1, #168	; 0xa8
   131e8:	bl	10d1c <strcmp@plt>
   131ec:	rsb	r0, r0, #0
   131f0:	pop	{r4, sl, fp, pc}
   131f4:	ldr	r3, [r0, #136]	; 0x88
   131f8:	ldr	r2, [r1, #136]	; 0x88
   131fc:	mov	ip, r0
   13200:	mov	r0, #1
   13204:	cmp	r2, r3
   13208:	ble	13210 <__assert_fail@plt+0x229c>
   1320c:	bx	lr
   13210:	bne	13230 <__assert_fail@plt+0x22bc>
   13214:	push	{r4, sl, fp, lr}
   13218:	add	fp, sp, #8
   1321c:	ldr	lr, [ip, #140]	; 0x8c
   13220:	ldr	r4, [r1, #140]	; 0x8c
   13224:	cmp	r4, lr
   13228:	pop	{r4, sl, fp, lr}
   1322c:	bgt	1320c <__assert_fail@plt+0x2298>
   13230:	mvn	r0, #0
   13234:	cmp	r2, r3
   13238:	bxlt	lr
   1323c:	bne	13250 <__assert_fail@plt+0x22dc>
   13240:	ldr	r2, [ip, #140]	; 0x8c
   13244:	ldr	r3, [r1, #140]	; 0x8c
   13248:	cmp	r3, r2
   1324c:	blt	1320c <__assert_fail@plt+0x2298>
   13250:	add	r0, ip, #168	; 0xa8
   13254:	add	r1, r1, #168	; 0xa8
   13258:	b	10d1c <strcmp@plt>
   1325c:	push	{r4, sl, fp, lr}
   13260:	add	fp, sp, #8
   13264:	ldr	r3, [r0, #136]	; 0x88
   13268:	ldr	r2, [r1, #136]	; 0x88
   1326c:	mov	ip, r0
   13270:	mvn	r0, #0
   13274:	cmp	r2, r3
   13278:	bgt	132c0 <__assert_fail@plt+0x234c>
   1327c:	bne	13290 <__assert_fail@plt+0x231c>
   13280:	ldr	lr, [ip, #140]	; 0x8c
   13284:	ldr	r4, [r1, #140]	; 0x8c
   13288:	cmp	r4, lr
   1328c:	bgt	132c0 <__assert_fail@plt+0x234c>
   13290:	mov	r0, #1
   13294:	cmp	r2, r3
   13298:	blt	132c0 <__assert_fail@plt+0x234c>
   1329c:	bne	132b0 <__assert_fail@plt+0x233c>
   132a0:	ldr	r2, [ip, #140]	; 0x8c
   132a4:	ldr	r3, [r1, #140]	; 0x8c
   132a8:	cmp	r3, r2
   132ac:	poplt	{r4, sl, fp, pc}
   132b0:	add	r0, ip, #168	; 0xa8
   132b4:	add	r1, r1, #168	; 0xa8
   132b8:	bl	10d1c <strcmp@plt>
   132bc:	rsb	r0, r0, #0
   132c0:	pop	{r4, sl, fp, pc}
   132c4:	ldr	r3, [r0, #152]	; 0x98
   132c8:	ldr	r2, [r1, #152]	; 0x98
   132cc:	mov	ip, r0
   132d0:	mov	r0, #1
   132d4:	cmp	r2, r3
   132d8:	ble	132e0 <__assert_fail@plt+0x236c>
   132dc:	bx	lr
   132e0:	bne	13300 <__assert_fail@plt+0x238c>
   132e4:	push	{r4, sl, fp, lr}
   132e8:	add	fp, sp, #8
   132ec:	ldr	lr, [ip, #156]	; 0x9c
   132f0:	ldr	r4, [r1, #156]	; 0x9c
   132f4:	cmp	r4, lr
   132f8:	pop	{r4, sl, fp, lr}
   132fc:	bgt	132dc <__assert_fail@plt+0x2368>
   13300:	mvn	r0, #0
   13304:	cmp	r2, r3
   13308:	bxlt	lr
   1330c:	bne	13320 <__assert_fail@plt+0x23ac>
   13310:	ldr	r2, [ip, #156]	; 0x9c
   13314:	ldr	r3, [r1, #156]	; 0x9c
   13318:	cmp	r3, r2
   1331c:	blt	132dc <__assert_fail@plt+0x2368>
   13320:	add	r0, ip, #168	; 0xa8
   13324:	add	r1, r1, #168	; 0xa8
   13328:	b	10d1c <strcmp@plt>
   1332c:	push	{r4, sl, fp, lr}
   13330:	add	fp, sp, #8
   13334:	ldr	r3, [r0, #152]	; 0x98
   13338:	ldr	r2, [r1, #152]	; 0x98
   1333c:	mov	ip, r0
   13340:	mvn	r0, #0
   13344:	cmp	r2, r3
   13348:	bgt	13390 <__assert_fail@plt+0x241c>
   1334c:	bne	13360 <__assert_fail@plt+0x23ec>
   13350:	ldr	lr, [ip, #156]	; 0x9c
   13354:	ldr	r4, [r1, #156]	; 0x9c
   13358:	cmp	r4, lr
   1335c:	bgt	13390 <__assert_fail@plt+0x241c>
   13360:	mov	r0, #1
   13364:	cmp	r2, r3
   13368:	blt	13390 <__assert_fail@plt+0x241c>
   1336c:	bne	13380 <__assert_fail@plt+0x240c>
   13370:	ldr	r2, [ip, #156]	; 0x9c
   13374:	ldr	r3, [r1, #156]	; 0x9c
   13378:	cmp	r3, r2
   1337c:	poplt	{r4, sl, fp, pc}
   13380:	add	r0, ip, #168	; 0xa8
   13384:	add	r1, r1, #168	; 0xa8
   13388:	bl	10d1c <strcmp@plt>
   1338c:	rsb	r0, r0, #0
   13390:	pop	{r4, sl, fp, pc}
   13394:	push	{r4, r5, r6, sl, fp, lr}
   13398:	add	fp, sp, #16
   1339c:	ldr	r4, [r0, #112]	; 0x70
   133a0:	ldr	r3, [r0, #116]	; 0x74
   133a4:	ldr	r6, [r1, #112]	; 0x70
   133a8:	ldr	r5, [r1, #116]	; 0x74
   133ac:	mov	ip, #1
   133b0:	subs	r2, r4, r6
   133b4:	sbcs	r2, r3, r5
   133b8:	blt	133cc <__assert_fail@plt+0x2458>
   133bc:	subs	r2, r6, r4
   133c0:	mvn	ip, #0
   133c4:	sbcs	r2, r5, r3
   133c8:	bge	133d4 <__assert_fail@plt+0x2460>
   133cc:	mov	r0, ip
   133d0:	pop	{r4, r5, r6, sl, fp, pc}
   133d4:	add	r0, r0, #168	; 0xa8
   133d8:	add	r1, r1, #168	; 0xa8
   133dc:	pop	{r4, r5, r6, sl, fp, lr}
   133e0:	b	10d1c <strcmp@plt>
   133e4:	push	{r4, r5, r6, sl, fp, lr}
   133e8:	add	fp, sp, #16
   133ec:	ldr	r4, [r0, #112]	; 0x70
   133f0:	ldr	r3, [r0, #116]	; 0x74
   133f4:	ldr	r6, [r1, #112]	; 0x70
   133f8:	ldr	r5, [r1, #116]	; 0x74
   133fc:	mvn	ip, #0
   13400:	subs	r2, r4, r6
   13404:	sbcs	r2, r3, r5
   13408:	blt	1342c <__assert_fail@plt+0x24b8>
   1340c:	subs	r2, r6, r4
   13410:	mov	ip, #1
   13414:	sbcs	r2, r5, r3
   13418:	blt	1342c <__assert_fail@plt+0x24b8>
   1341c:	add	r0, r0, #168	; 0xa8
   13420:	add	r1, r1, #168	; 0xa8
   13424:	bl	10d1c <strcmp@plt>
   13428:	rsb	ip, r0, #0
   1342c:	mov	r0, ip
   13430:	pop	{r4, r5, r6, sl, fp, pc}
   13434:	and	r2, r0, #61440	; 0xf000
   13438:	sub	r2, r2, #4096	; 0x1000
   1343c:	lsr	r3, r2, #12
   13440:	cmp	r3, #11
   13444:	bhi	13494 <__assert_fail@plt+0x2520>
   13448:	add	r2, pc, #4
   1344c:	mov	ip, #45	; 0x2d
   13450:	ldr	pc, [r2, r3, lsl #2]
   13454:	andeq	r3, r1, r4, lsl #9
   13458:	andeq	r3, r1, ip, lsl #9
   1345c:	muleq	r1, r4, r4
   13460:	muleq	r1, ip, r4
   13464:	muleq	r1, r4, r4
   13468:			; <UNDEFINED> instruction: 0x000134b4
   1346c:	muleq	r1, r4, r4
   13470:			; <UNDEFINED> instruction: 0x000134b8
   13474:	muleq	r1, r4, r4
   13478:	andeq	r3, r1, r4, lsr #9
   1347c:	muleq	r1, r4, r4
   13480:	andeq	r3, r1, ip, lsr #9
   13484:	mov	ip, #112	; 0x70
   13488:	b	134b8 <__assert_fail@plt+0x2544>
   1348c:	mov	ip, #99	; 0x63
   13490:	b	134b8 <__assert_fail@plt+0x2544>
   13494:	mov	ip, #63	; 0x3f
   13498:	b	134b8 <__assert_fail@plt+0x2544>
   1349c:	mov	ip, #100	; 0x64
   134a0:	b	134b8 <__assert_fail@plt+0x2544>
   134a4:	mov	ip, #108	; 0x6c
   134a8:	b	134b8 <__assert_fail@plt+0x2544>
   134ac:	mov	ip, #115	; 0x73
   134b0:	b	134b8 <__assert_fail@plt+0x2544>
   134b4:	mov	ip, #98	; 0x62
   134b8:	push	{fp, lr}
   134bc:	mov	fp, sp
   134c0:	mov	r2, #32
   134c4:	tst	r0, #256	; 0x100
   134c8:	mov	r3, #114	; 0x72
   134cc:	strb	ip, [r1]
   134d0:	mov	ip, #114	; 0x72
   134d4:	mov	lr, #45	; 0x2d
   134d8:	strh	r2, [r1, #10]
   134dc:	movweq	r3, #45	; 0x2d
   134e0:	tst	r0, #128	; 0x80
   134e4:	mov	r2, #119	; 0x77
   134e8:	movweq	r2, #45	; 0x2d
   134ec:	strb	r3, [r1, #1]
   134f0:	tst	r0, #32
   134f4:	mov	r3, #119	; 0x77
   134f8:	strb	r2, [r1, #2]
   134fc:	mov	r2, #114	; 0x72
   13500:	movweq	r2, #45	; 0x2d
   13504:	tst	r0, #16
   13508:	strb	r2, [r1, #4]
   1350c:	mov	r2, #119	; 0x77
   13510:	movweq	r2, #45	; 0x2d
   13514:	tst	r0, #4
   13518:	movweq	ip, #45	; 0x2d
   1351c:	tst	r0, #2
   13520:	strb	r2, [r1, #5]
   13524:	movweq	r3, #45	; 0x2d
   13528:	strb	ip, [r1, #7]
   1352c:	ands	r2, r0, #64	; 0x40
   13530:	mov	ip, #45	; 0x2d
   13534:	strb	r3, [r1, #8]
   13538:	mov	r3, #83	; 0x53
   1353c:	movwne	lr, #120	; 0x78
   13540:	mov	r2, #83	; 0x53
   13544:	movwne	r3, #115	; 0x73
   13548:	tst	r0, #2048	; 0x800
   1354c:	moveq	r3, lr
   13550:	strb	r3, [r1, #3]
   13554:	ands	r3, r0, #8
   13558:	mov	r3, #45	; 0x2d
   1355c:	movwne	r2, #115	; 0x73
   13560:	movwne	r3, #120	; 0x78
   13564:	tst	r0, #1024	; 0x400
   13568:	moveq	r2, r3
   1356c:	strb	r2, [r1, #6]
   13570:	ands	r2, r0, #1
   13574:	mov	r2, #84	; 0x54
   13578:	movwne	ip, #120	; 0x78
   1357c:	movwne	r2, #116	; 0x74
   13580:	tst	r0, #512	; 0x200
   13584:	moveq	r2, ip
   13588:	strb	r2, [r1, #9]
   1358c:	pop	{fp, pc}
   13590:	ldr	r0, [r0, #16]
   13594:	b	13434 <__assert_fail@plt+0x24c0>
   13598:	push	{r4, r5, r6, sl, fp, lr}
   1359c:	add	fp, sp, #16
   135a0:	mov	r4, r0
   135a4:	bl	10e78 <__errno_location@plt>
   135a8:	ldr	r6, [r0]
   135ac:	mov	r5, r0
   135b0:	mov	r0, r4
   135b4:	bl	10d64 <free@plt>
   135b8:	str	r6, [r5]
   135bc:	pop	{r4, r5, r6, sl, fp, pc}
   135c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c4:	add	fp, sp, #28
   135c8:	sub	sp, sp, #28
   135cc:	cmp	r1, #4096	; 0x1000
   135d0:	bcs	135ec <__assert_fail@plt+0x2678>
   135d4:	mov	sl, r0
   135d8:	and	r0, r1, #516	; 0x204
   135dc:	mov	r6, r1
   135e0:	cmp	r0, #516	; 0x204
   135e4:	tstne	r6, #18
   135e8:	bne	13608 <__assert_fail@plt+0x2694>
   135ec:	bl	10e78 <__errno_location@plt>
   135f0:	mov	r1, #22
   135f4:	mov	r4, #0
   135f8:	str	r1, [r0]
   135fc:	mov	r0, r4
   13600:	sub	sp, fp, #28
   13604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13608:	mov	r0, #1
   1360c:	mov	r1, #96	; 0x60
   13610:	mov	r5, r2
   13614:	bl	185d8 <__assert_fail@plt+0x7664>
   13618:	cmp	r0, #0
   1361c:	beq	13bd8 <__assert_fail@plt+0x2c64>
   13620:	mov	r4, r0
   13624:	mvn	r0, #99	; 0x63
   13628:	tst	r6, #2
   1362c:	mov	r1, r6
   13630:	str	r0, [r4, #32]
   13634:	bic	r0, r6, #516	; 0x204
   13638:	str	r5, [r4, #44]	; 0x2c
   1363c:	str	r4, [sp, #24]
   13640:	orrne	r1, r0, #4
   13644:	str	r1, [r4, #48]	; 0x30
   13648:	ldr	r0, [sl]
   1364c:	cmp	r0, #0
   13650:	beq	136b4 <__assert_fail@plt+0x2740>
   13654:	add	r7, sl, #4
   13658:	mov	r4, #0
   1365c:	bl	10e48 <strlen@plt>
   13660:	cmp	r0, r4
   13664:	movhi	r4, r0
   13668:	ldr	r0, [r7], #4
   1366c:	cmp	r0, #0
   13670:	bne	1365c <__assert_fail@plt+0x26e8>
   13674:	add	r0, r4, #1
   13678:	ldr	r4, [sp, #24]
   1367c:	cmp	r0, #4096	; 0x1000
   13680:	movls	r0, #4096	; 0x1000
   13684:	ldr	r1, [r4, #36]	; 0x24
   13688:	add	r0, r0, #256	; 0x100
   1368c:	adds	r1, r0, r1
   13690:	bcc	136c8 <__assert_fail@plt+0x2754>
   13694:	ldr	r0, [r4, #24]
   13698:	bl	13598 <__assert_fail@plt+0x2624>
   1369c:	mov	r0, #0
   136a0:	str	r0, [r4, #24]
   136a4:	bl	10e78 <__errno_location@plt>
   136a8:	mov	r1, #36	; 0x24
   136ac:	str	r1, [r0]
   136b0:	b	13bd0 <__assert_fail@plt+0x2c5c>
   136b4:	mov	r0, #4096	; 0x1000
   136b8:	ldr	r1, [r4, #36]	; 0x24
   136bc:	add	r0, r0, #256	; 0x100
   136c0:	adds	r1, r0, r1
   136c4:	bcs	13694 <__assert_fail@plt+0x2720>
   136c8:	str	r1, [r4, #36]	; 0x24
   136cc:	ldr	r0, [r4, #24]
   136d0:	bl	1865c <__assert_fail@plt+0x76e8>
   136d4:	cmp	r0, #0
   136d8:	beq	1373c <__assert_fail@plt+0x27c8>
   136dc:	str	r0, [r4, #24]
   136e0:	ldr	r0, [sl]
   136e4:	cmp	r0, #0
   136e8:	beq	13750 <__assert_fail@plt+0x27dc>
   136ec:	mov	r0, #176	; 0xb0
   136f0:	bl	1862c <__assert_fail@plt+0x76b8>
   136f4:	cmp	r0, #0
   136f8:	beq	13bc8 <__assert_fail@plt+0x2c54>
   136fc:	ldr	r1, [r4, #24]
   13700:	mov	r7, r0
   13704:	mov	r0, #0
   13708:	mov	r2, #196608	; 0x30000
   1370c:	strb	r0, [r7, #168]	; 0xa8
   13710:	str	r2, [r7, #58]	; 0x3a
   13714:	mvn	r2, #0
   13718:	str	r0, [r7, #12]
   1371c:	str	r0, [r7, #16]
   13720:	str	r0, [r7, #20]
   13724:	str	r4, [r7, #44]	; 0x2c
   13728:	str	r2, [r7, #48]	; 0x30
   1372c:	str	r0, [r7, #52]	; 0x34
   13730:	str	r1, [r7, #28]
   13734:	str	r0, [r7, #32]
   13738:	b	13754 <__assert_fail@plt+0x27e0>
   1373c:	ldr	r0, [r4, #24]
   13740:	bl	13598 <__assert_fail@plt+0x2624>
   13744:	mov	r0, #0
   13748:	str	r0, [r4, #24]
   1374c:	b	13bd0 <__assert_fail@plt+0x2c5c>
   13750:	mov	r7, #0
   13754:	cmp	r5, #0
   13758:	ldrbne	r0, [r4, #49]	; 0x31
   1375c:	ubfxne	r0, r0, #2, #1
   13760:	ldr	r4, [sl]
   13764:	moveq	r0, #1
   13768:	str	r0, [sp, #12]
   1376c:	cmp	r4, #0
   13770:	beq	138d8 <__assert_fail@plt+0x2964>
   13774:	tst	r6, #2048	; 0x800
   13778:	str	r7, [sp, #20]
   1377c:	str	r5, [sp, #16]
   13780:	bne	138fc <__assert_fail@plt+0x2988>
   13784:	mov	r0, #0
   13788:	mov	r8, #0
   1378c:	mov	r5, #0
   13790:	str	r0, [sp, #8]
   13794:	mov	r0, r4
   13798:	bl	10e48 <strlen@plt>
   1379c:	mov	r9, r0
   137a0:	cmp	r0, #3
   137a4:	bcc	137d4 <__assert_fail@plt+0x2860>
   137a8:	add	r0, r4, r9
   137ac:	ldrb	r0, [r0, #-1]
   137b0:	cmp	r0, #47	; 0x2f
   137b4:	bne	137d4 <__assert_fail@plt+0x2860>
   137b8:	sub	r0, r4, #2
   137bc:	ldrb	r1, [r0, r9]
   137c0:	cmp	r1, #47	; 0x2f
   137c4:	bne	137d4 <__assert_fail@plt+0x2860>
   137c8:	sub	r9, r9, #1
   137cc:	cmp	r9, #1
   137d0:	bhi	137bc <__assert_fail@plt+0x2848>
   137d4:	add	r0, r9, #176	; 0xb0
   137d8:	bic	r0, r0, #7
   137dc:	bl	1862c <__assert_fail@plt+0x76b8>
   137e0:	cmp	r0, #0
   137e4:	beq	13a3c <__assert_fail@plt+0x2ac8>
   137e8:	add	r6, r0, #168	; 0xa8
   137ec:	mov	r7, r0
   137f0:	mov	r1, r4
   137f4:	mov	r2, r9
   137f8:	mov	r0, r6
   137fc:	bl	10d70 <memcpy@plt>
   13800:	ldr	r0, [sp, #24]
   13804:	mov	r4, #0
   13808:	mov	r1, #196608	; 0x30000
   1380c:	cmp	r8, #0
   13810:	strb	r4, [r6, r9]
   13814:	str	r1, [r7, #58]	; 0x3a
   13818:	add	r1, r7, #44	; 0x2c
   1381c:	ldr	r2, [r0, #24]
   13820:	stm	r1, {r0, r4, r9}
   13824:	ldr	r1, [sp, #20]
   13828:	str	r1, [r7, #4]
   1382c:	str	r4, [r7, #12]
   13830:	str	r4, [r7, #16]
   13834:	str	r4, [r7, #20]
   13838:	str	r6, [r7, #24]
   1383c:	str	r2, [r7, #28]
   13840:	ldr	r2, [sp, #12]
   13844:	mov	r1, r8
   13848:	str	r4, [r7, #32]
   1384c:	movwne	r1, #1
   13850:	tst	r2, r1
   13854:	beq	13884 <__assert_fail@plt+0x2910>
   13858:	mov	r0, #2
   1385c:	str	r0, [r7, #112]	; 0x70
   13860:	mov	r0, #11
   13864:	str	r4, [r7, #116]	; 0x74
   13868:	strh	r0, [r7, #56]	; 0x38
   1386c:	ldr	r0, [sp, #16]
   13870:	cmp	r0, #0
   13874:	beq	138a0 <__assert_fail@plt+0x292c>
   13878:	str	r8, [r7, #8]
   1387c:	mov	r8, r7
   13880:	b	138b8 <__assert_fail@plt+0x2944>
   13884:	mov	r1, r7
   13888:	mov	r2, #0
   1388c:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13890:	strh	r0, [r7, #56]	; 0x38
   13894:	ldr	r0, [sp, #16]
   13898:	cmp	r0, #0
   1389c:	bne	13878 <__assert_fail@plt+0x2904>
   138a0:	cmp	r8, #0
   138a4:	str	r4, [r7, #8]
   138a8:	beq	138cc <__assert_fail@plt+0x2958>
   138ac:	ldr	r0, [sp, #8]
   138b0:	str	r7, [sp, #8]
   138b4:	str	r7, [r0, #8]
   138b8:	ldr	r4, [sl, #4]!
   138bc:	add	r5, r5, #1
   138c0:	cmp	r4, #0
   138c4:	bne	13794 <__assert_fail@plt+0x2820>
   138c8:	b	13a4c <__assert_fail@plt+0x2ad8>
   138cc:	mov	r0, r7
   138d0:	str	r7, [sp, #8]
   138d4:	b	1387c <__assert_fail@plt+0x2908>
   138d8:	ldr	r4, [sp, #24]
   138dc:	mov	r8, #0
   138e0:	mov	r0, #176	; 0xb0
   138e4:	bl	1862c <__assert_fail@plt+0x76b8>
   138e8:	cmp	r0, #0
   138ec:	bne	13aa8 <__assert_fail@plt+0x2b34>
   138f0:	mov	r0, #0
   138f4:	str	r0, [r4]
   138f8:	b	13b8c <__assert_fail@plt+0x2c18>
   138fc:	add	r0, sl, #4
   13900:	mov	r9, #0
   13904:	mov	r8, #0
   13908:	mov	r5, #0
   1390c:	str	r0, [sp, #8]
   13910:	ldr	r0, [sp, #12]
   13914:	eor	r0, r0, #1
   13918:	str	r0, [sp, #12]
   1391c:	mov	r0, #0
   13920:	str	r0, [sp, #4]
   13924:	mov	r0, r4
   13928:	mov	sl, r5
   1392c:	bl	10e48 <strlen@plt>
   13930:	mov	r7, r0
   13934:	add	r0, r0, #176	; 0xb0
   13938:	bic	r0, r0, #7
   1393c:	bl	1862c <__assert_fail@plt+0x76b8>
   13940:	cmp	r0, #0
   13944:	beq	13a3c <__assert_fail@plt+0x2ac8>
   13948:	add	r6, r0, #168	; 0xa8
   1394c:	mov	r5, r0
   13950:	mov	r1, r4
   13954:	mov	r2, r7
   13958:	mov	r0, r6
   1395c:	bl	10d70 <memcpy@plt>
   13960:	ldr	r0, [sp, #24]
   13964:	mov	r1, #196608	; 0x30000
   13968:	strb	r9, [r6, r7]
   1396c:	str	r1, [r5, #58]	; 0x3a
   13970:	ldr	r1, [sp, #20]
   13974:	ldr	r2, [r0, #24]
   13978:	str	r0, [r5, #44]	; 0x2c
   1397c:	str	r9, [r5, #48]	; 0x30
   13980:	str	r7, [r5, #52]	; 0x34
   13984:	str	r1, [r5, #4]
   13988:	str	r9, [r5, #12]
   1398c:	str	r9, [r5, #16]
   13990:	str	r9, [r5, #20]
   13994:	str	r6, [r5, #24]
   13998:	clz	r1, r8
   1399c:	lsr	r1, r1, #5
   139a0:	str	r2, [r5, #28]
   139a4:	ldr	r2, [sp, #12]
   139a8:	str	r9, [r5, #32]
   139ac:	orrs	r1, r2, r1
   139b0:	bne	139e0 <__assert_fail@plt+0x2a6c>
   139b4:	mov	r0, #2
   139b8:	str	r0, [r5, #112]	; 0x70
   139bc:	str	r9, [r5, #116]	; 0x74
   139c0:	mov	r0, #11
   139c4:	strh	r0, [r5, #56]	; 0x38
   139c8:	ldr	r0, [sp, #16]
   139cc:	cmp	r0, #0
   139d0:	beq	139fc <__assert_fail@plt+0x2a88>
   139d4:	str	r8, [r5, #8]
   139d8:	mov	r8, r5
   139dc:	b	13a14 <__assert_fail@plt+0x2aa0>
   139e0:	mov	r1, r5
   139e4:	mov	r2, #0
   139e8:	bl	13c24 <__assert_fail@plt+0x2cb0>
   139ec:	strh	r0, [r5, #56]	; 0x38
   139f0:	ldr	r0, [sp, #16]
   139f4:	cmp	r0, #0
   139f8:	bne	139d4 <__assert_fail@plt+0x2a60>
   139fc:	cmp	r8, #0
   13a00:	str	r9, [r5, #8]
   13a04:	beq	13a30 <__assert_fail@plt+0x2abc>
   13a08:	ldr	r0, [sp, #4]
   13a0c:	str	r5, [sp, #4]
   13a10:	str	r5, [r0, #8]
   13a14:	ldr	r0, [sp, #8]
   13a18:	mov	r5, sl
   13a1c:	add	r5, sl, #1
   13a20:	ldr	r4, [r0, sl, lsl #2]
   13a24:	cmp	r4, #0
   13a28:	bne	13924 <__assert_fail@plt+0x29b0>
   13a2c:	b	13a4c <__assert_fail@plt+0x2ad8>
   13a30:	mov	r0, r5
   13a34:	str	r5, [sp, #4]
   13a38:	b	139d8 <__assert_fail@plt+0x2a64>
   13a3c:	ldr	r7, [sp, #20]
   13a40:	cmp	r8, #0
   13a44:	bne	13b94 <__assert_fail@plt+0x2c20>
   13a48:	b	13bbc <__assert_fail@plt+0x2c48>
   13a4c:	ldr	r0, [sp, #16]
   13a50:	cmp	r0, #0
   13a54:	beq	13a90 <__assert_fail@plt+0x2b1c>
   13a58:	ldr	r7, [sp, #20]
   13a5c:	ldr	r4, [sp, #24]
   13a60:	cmp	r5, #2
   13a64:	bcc	13a98 <__assert_fail@plt+0x2b24>
   13a68:	mov	r0, r4
   13a6c:	mov	r1, r8
   13a70:	mov	r2, r5
   13a74:	bl	13dbc <__assert_fail@plt+0x2e48>
   13a78:	mov	r8, r0
   13a7c:	mov	r0, #176	; 0xb0
   13a80:	bl	1862c <__assert_fail@plt+0x76b8>
   13a84:	cmp	r0, #0
   13a88:	bne	13aa8 <__assert_fail@plt+0x2b34>
   13a8c:	b	138f0 <__assert_fail@plt+0x297c>
   13a90:	ldr	r7, [sp, #20]
   13a94:	ldr	r4, [sp, #24]
   13a98:	mov	r0, #176	; 0xb0
   13a9c:	bl	1862c <__assert_fail@plt+0x76b8>
   13aa0:	cmp	r0, #0
   13aa4:	beq	138f0 <__assert_fail@plt+0x297c>
   13aa8:	ldr	r2, [r4, #24]
   13aac:	mov	r1, #0
   13ab0:	mov	r3, #196608	; 0x30000
   13ab4:	str	r0, [r4]
   13ab8:	str	r1, [r0, #52]	; 0x34
   13abc:	strb	r1, [r0, #168]	; 0xa8
   13ac0:	str	r4, [r0, #44]	; 0x2c
   13ac4:	str	r3, [r0, #58]	; 0x3a
   13ac8:	str	r2, [r0, #28]
   13acc:	mov	r2, #9
   13ad0:	str	r1, [r0, #32]
   13ad4:	strh	r2, [r0, #56]	; 0x38
   13ad8:	str	r8, [r0, #8]
   13adc:	str	r1, [r0, #12]
   13ae0:	str	r1, [r0, #16]
   13ae4:	str	r1, [r0, #20]
   13ae8:	mov	r1, #1
   13aec:	str	r1, [r0, #48]	; 0x30
   13af0:	ldrh	r0, [r4, #48]	; 0x30
   13af4:	movw	r1, #258	; 0x102
   13af8:	tst	r0, r1
   13afc:	beq	13b38 <__assert_fail@plt+0x2bc4>
   13b00:	movw	r0, #13720	; 0x3598
   13b04:	movw	r2, #23364	; 0x5b44
   13b08:	movw	r3, #23396	; 0x5b64
   13b0c:	mov	r1, #0
   13b10:	movt	r0, #1
   13b14:	movt	r2, #1
   13b18:	movt	r3, #1
   13b1c:	str	r0, [sp]
   13b20:	mov	r0, #31
   13b24:	bl	17458 <__assert_fail@plt+0x64e4>
   13b28:	cmp	r0, #0
   13b2c:	str	r0, [r4, #56]	; 0x38
   13b30:	bne	13b50 <__assert_fail@plt+0x2bdc>
   13b34:	b	13b8c <__assert_fail@plt+0x2c18>
   13b38:	mov	r0, #32
   13b3c:	bl	1862c <__assert_fail@plt+0x76b8>
   13b40:	cmp	r0, #0
   13b44:	str	r0, [r4, #56]	; 0x38
   13b48:	beq	13b8c <__assert_fail@plt+0x2c18>
   13b4c:	bl	186b0 <__assert_fail@plt+0x773c>
   13b50:	ldr	r4, [sp, #24]
   13b54:	ldr	r0, [r4, #48]	; 0x30
   13b58:	tst	r0, #516	; 0x204
   13b5c:	bne	13c0c <__assert_fail@plt+0x2c98>
   13b60:	mov	r1, #32768	; 0x8000
   13b64:	tst	r0, #512	; 0x200
   13b68:	and	r1, r1, r0, lsl #11
   13b6c:	orr	r1, r1, #18688	; 0x4900
   13b70:	orr	r2, r1, #524288	; 0x80000
   13b74:	bne	13be8 <__assert_fail@plt+0x2c74>
   13b78:	movw	r0, #36267	; 0x8dab
   13b7c:	mov	r1, r2
   13b80:	movt	r0, #1
   13b84:	bl	18984 <__assert_fail@plt+0x7a10>
   13b88:	b	13bf8 <__assert_fail@plt+0x2c84>
   13b8c:	cmp	r8, #0
   13b90:	beq	13bbc <__assert_fail@plt+0x2c48>
   13b94:	ldrd	r4, [r8, #8]
   13b98:	cmp	r5, #0
   13b9c:	beq	13ba8 <__assert_fail@plt+0x2c34>
   13ba0:	mov	r0, r5
   13ba4:	bl	10f5c <closedir@plt>
   13ba8:	mov	r0, r8
   13bac:	bl	13598 <__assert_fail@plt+0x2624>
   13bb0:	cmp	r4, #0
   13bb4:	mov	r8, r4
   13bb8:	bne	13b94 <__assert_fail@plt+0x2c20>
   13bbc:	mov	r0, r7
   13bc0:	bl	13598 <__assert_fail@plt+0x2624>
   13bc4:	ldr	r4, [sp, #24]
   13bc8:	ldr	r0, [r4, #24]
   13bcc:	bl	13598 <__assert_fail@plt+0x2624>
   13bd0:	mov	r0, r4
   13bd4:	bl	13598 <__assert_fail@plt+0x2624>
   13bd8:	mov	r4, #0
   13bdc:	mov	r0, r4
   13be0:	sub	sp, fp, #28
   13be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be8:	ldr	r0, [r4, #32]
   13bec:	movw	r1, #36267	; 0x8dab
   13bf0:	movt	r1, #1
   13bf4:	bl	184f4 <__assert_fail@plt+0x7580>
   13bf8:	str	r0, [r4, #28]
   13bfc:	cmn	r0, #1
   13c00:	ldrle	r0, [r4, #48]	; 0x30
   13c04:	orrle	r0, r0, #4
   13c08:	strle	r0, [r4, #48]	; 0x30
   13c0c:	add	r0, r4, #60	; 0x3c
   13c10:	mvn	r1, #0
   13c14:	bl	1838c <__assert_fail@plt+0x7418>
   13c18:	mov	r0, r4
   13c1c:	sub	sp, fp, #28
   13c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c24:	push	{r4, r5, r6, sl, fp, lr}
   13c28:	add	fp, sp, #16
   13c2c:	sub	sp, sp, #8
   13c30:	mov	r4, r1
   13c34:	ldr	r1, [r0, #48]	; 0x30
   13c38:	ldr	r3, [r4, #48]	; 0x30
   13c3c:	add	r5, r4, #64	; 0x40
   13c40:	cmp	r3, #0
   13c44:	andeq	r3, r1, #1
   13c48:	orreq	r2, r3, r2
   13c4c:	cmp	r2, #0
   13c50:	andseq	r1, r1, #2
   13c54:	beq	13cb0 <__assert_fail@plt+0x2d3c>
   13c58:	ldr	r1, [r4, #24]
   13c5c:	mov	r0, #3
   13c60:	mov	r2, r5
   13c64:	bl	10f14 <__xstat64@plt>
   13c68:	cmp	r0, #0
   13c6c:	beq	13d30 <__assert_fail@plt+0x2dbc>
   13c70:	bl	10e78 <__errno_location@plt>
   13c74:	mov	r6, r0
   13c78:	ldr	r0, [r0]
   13c7c:	cmp	r0, #2
   13c80:	bne	13ce0 <__assert_fail@plt+0x2d6c>
   13c84:	ldr	r1, [r4, #24]
   13c88:	mov	r0, #3
   13c8c:	mov	r2, r5
   13c90:	bl	10f50 <__lxstat64@plt>
   13c94:	cmp	r0, #0
   13c98:	bne	13cdc <__assert_fail@plt+0x2d68>
   13c9c:	mov	r0, #0
   13ca0:	str	r0, [r6]
   13ca4:	mov	r0, #13
   13ca8:	sub	sp, fp, #16
   13cac:	pop	{r4, r5, r6, sl, fp, pc}
   13cb0:	ldr	r1, [r0, #32]
   13cb4:	ldr	r2, [r4, #24]
   13cb8:	mov	r0, #256	; 0x100
   13cbc:	mov	r3, r5
   13cc0:	str	r0, [sp]
   13cc4:	mov	r0, #3
   13cc8:	bl	10dac <__fxstatat64@plt>
   13ccc:	cmp	r0, #0
   13cd0:	beq	13d30 <__assert_fail@plt+0x2dbc>
   13cd4:	bl	10e78 <__errno_location@plt>
   13cd8:	mov	r6, r0
   13cdc:	ldr	r0, [r6]
   13ce0:	vmov.i32	q8, #0	; 0x00000000
   13ce4:	add	r1, r5, #80	; 0x50
   13ce8:	str	r0, [r4, #32]
   13cec:	mov	r0, #0
   13cf0:	vst1.64	{d16-d17}, [r1]
   13cf4:	add	r1, r5, #64	; 0x40
   13cf8:	str	r0, [r5, #96]	; 0x60
   13cfc:	vst1.64	{d16-d17}, [r1]
   13d00:	add	r1, r5, #48	; 0x30
   13d04:	vst1.64	{d16-d17}, [r1]
   13d08:	add	r1, r5, #32
   13d0c:	vst1.64	{d16-d17}, [r1]
   13d10:	add	r1, r5, #16
   13d14:	vst1.64	{d16-d17}, [r1]
   13d18:	mov	r1, #100	; 0x64
   13d1c:	vst1.64	{d16-d17}, [r5], r1
   13d20:	str	r0, [r5]
   13d24:	mov	r0, #10
   13d28:	sub	sp, fp, #16
   13d2c:	pop	{r4, r5, r6, sl, fp, pc}
   13d30:	ldr	r0, [r4, #80]	; 0x50
   13d34:	and	r0, r0, #61440	; 0xf000
   13d38:	cmp	r0, #40960	; 0xa000
   13d3c:	beq	13d98 <__assert_fail@plt+0x2e24>
   13d40:	cmp	r0, #32768	; 0x8000
   13d44:	moveq	r0, #8
   13d48:	subeq	sp, fp, #16
   13d4c:	popeq	{r4, r5, r6, sl, fp, pc}
   13d50:	cmp	r0, #16384	; 0x4000
   13d54:	bne	13d8c <__assert_fail@plt+0x2e18>
   13d58:	ldrb	r1, [r4, #168]	; 0xa8
   13d5c:	mov	r0, #1
   13d60:	cmp	r1, #46	; 0x2e
   13d64:	bne	13d84 <__assert_fail@plt+0x2e10>
   13d68:	ldrb	r1, [r4, #169]	; 0xa9
   13d6c:	cmp	r1, #0
   13d70:	beq	13da4 <__assert_fail@plt+0x2e30>
   13d74:	cmp	r1, #46	; 0x2e
   13d78:	ldrbeq	r1, [r4, #170]	; 0xaa
   13d7c:	cmpeq	r1, #0
   13d80:	beq	13da4 <__assert_fail@plt+0x2e30>
   13d84:	sub	sp, fp, #16
   13d88:	pop	{r4, r5, r6, sl, fp, pc}
   13d8c:	mov	r0, #3
   13d90:	sub	sp, fp, #16
   13d94:	pop	{r4, r5, r6, sl, fp, pc}
   13d98:	mov	r0, #12
   13d9c:	sub	sp, fp, #16
   13da0:	pop	{r4, r5, r6, sl, fp, pc}
   13da4:	ldr	r1, [r4, #48]	; 0x30
   13da8:	mov	r0, #5
   13dac:	cmp	r1, #0
   13db0:	movweq	r0, #1
   13db4:	sub	sp, fp, #16
   13db8:	pop	{r4, r5, r6, sl, fp, pc}
   13dbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13dc0:	add	fp, sp, #24
   13dc4:	ldrd	r8, [r0, #40]	; 0x28
   13dc8:	mov	r5, r2
   13dcc:	mov	r4, r1
   13dd0:	mov	r6, r0
   13dd4:	cmp	r8, r2
   13dd8:	bcs	13e18 <__assert_fail@plt+0x2ea4>
   13ddc:	add	r1, r5, #40	; 0x28
   13de0:	cmn	r1, #-1073741823	; 0xc0000001
   13de4:	str	r1, [r6, #40]	; 0x28
   13de8:	bhi	13ea4 <__assert_fail@plt+0x2f30>
   13dec:	add	r7, r6, #8
   13df0:	lsl	r1, r1, #2
   13df4:	ldr	r0, [r7]
   13df8:	bl	1865c <__assert_fail@plt+0x76e8>
   13dfc:	cmp	r0, #0
   13e00:	beq	13ea4 <__assert_fail@plt+0x2f30>
   13e04:	mov	r6, r7
   13e08:	str	r0, [r7]
   13e0c:	cmp	r4, #0
   13e10:	bne	13e24 <__assert_fail@plt+0x2eb0>
   13e14:	b	13e38 <__assert_fail@plt+0x2ec4>
   13e18:	ldr	r0, [r6, #8]!
   13e1c:	cmp	r4, #0
   13e20:	beq	13e38 <__assert_fail@plt+0x2ec4>
   13e24:	str	r4, [r0], #4
   13e28:	ldr	r4, [r4, #8]
   13e2c:	cmp	r4, #0
   13e30:	bne	13e24 <__assert_fail@plt+0x2eb0>
   13e34:	ldr	r0, [r6]
   13e38:	mov	r1, r5
   13e3c:	mov	r2, #4
   13e40:	mov	r3, r9
   13e44:	bl	10f08 <qsort@plt>
   13e48:	ldr	r7, [r6]
   13e4c:	subs	r0, r5, #1
   13e50:	ldr	r4, [r7]
   13e54:	mov	r1, r4
   13e58:	beq	13e94 <__assert_fail@plt+0x2f20>
   13e5c:	mov	r1, r7
   13e60:	cmp	r5, #2
   13e64:	ldr	r2, [r1, #4]!
   13e68:	str	r2, [r4, #8]
   13e6c:	beq	13e90 <__assert_fail@plt+0x2f1c>
   13e70:	rsb	r3, r5, #2
   13e74:	mov	r2, r1
   13e78:	ldr	r6, [r2, #4]!
   13e7c:	ldr	r1, [r1]
   13e80:	adds	r3, r3, #1
   13e84:	str	r6, [r1, #8]
   13e88:	mov	r1, r2
   13e8c:	bne	13e78 <__assert_fail@plt+0x2f04>
   13e90:	ldr	r1, [r7, r0, lsl #2]
   13e94:	mov	r0, #0
   13e98:	str	r0, [r1, #8]
   13e9c:	mov	r0, r4
   13ea0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ea4:	ldr	r0, [r6, #8]
   13ea8:	bl	13598 <__assert_fail@plt+0x2624>
   13eac:	mov	r0, #0
   13eb0:	str	r0, [r6, #40]	; 0x28
   13eb4:	str	r0, [r6, #8]
   13eb8:	mov	r0, r4
   13ebc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ec0:	push	{r4, r5, r6, r7, fp, lr}
   13ec4:	add	fp, sp, #16
   13ec8:	mov	r4, r0
   13ecc:	ldr	r0, [r0]
   13ed0:	cmp	r0, #0
   13ed4:	beq	13f14 <__assert_fail@plt+0x2fa0>
   13ed8:	ldr	r1, [r0, #48]	; 0x30
   13edc:	cmp	r1, #0
   13ee0:	blt	13f08 <__assert_fail@plt+0x2f94>
   13ee4:	ldr	r5, [r0, #8]
   13ee8:	cmp	r5, #0
   13eec:	ldreq	r5, [r0, #4]
   13ef0:	bl	13598 <__assert_fail@plt+0x2624>
   13ef4:	ldr	r0, [r5, #48]	; 0x30
   13ef8:	cmn	r0, #1
   13efc:	mov	r0, r5
   13f00:	bgt	13ee4 <__assert_fail@plt+0x2f70>
   13f04:	b	13f0c <__assert_fail@plt+0x2f98>
   13f08:	mov	r5, r0
   13f0c:	mov	r0, r5
   13f10:	bl	13598 <__assert_fail@plt+0x2624>
   13f14:	ldr	r5, [r4, #4]
   13f18:	cmp	r5, #0
   13f1c:	beq	13f48 <__assert_fail@plt+0x2fd4>
   13f20:	ldrd	r6, [r5, #8]
   13f24:	cmp	r7, #0
   13f28:	beq	13f34 <__assert_fail@plt+0x2fc0>
   13f2c:	mov	r0, r7
   13f30:	bl	10f5c <closedir@plt>
   13f34:	mov	r0, r5
   13f38:	bl	13598 <__assert_fail@plt+0x2624>
   13f3c:	cmp	r6, #0
   13f40:	mov	r5, r6
   13f44:	bne	13f20 <__assert_fail@plt+0x2fac>
   13f48:	ldr	r0, [r4, #8]
   13f4c:	bl	13598 <__assert_fail@plt+0x2624>
   13f50:	ldr	r0, [r4, #24]
   13f54:	bl	13598 <__assert_fail@plt+0x2624>
   13f58:	ldr	r0, [r4, #48]	; 0x30
   13f5c:	tst	r0, #512	; 0x200
   13f60:	bne	13f9c <__assert_fail@plt+0x3028>
   13f64:	mov	r6, #0
   13f68:	tst	r0, #4
   13f6c:	bne	13fc0 <__assert_fail@plt+0x304c>
   13f70:	ldr	r0, [r4, #28]
   13f74:	bl	10efc <fchdir@plt>
   13f78:	cmp	r0, #0
   13f7c:	beq	14050 <__assert_fail@plt+0x30dc>
   13f80:	bl	10e78 <__errno_location@plt>
   13f84:	ldr	r6, [r0]
   13f88:	ldr	r0, [r4, #28]
   13f8c:	bl	10f44 <close@plt>
   13f90:	cmp	r6, #0
   13f94:	beq	13fb0 <__assert_fail@plt+0x303c>
   13f98:	b	13fc0 <__assert_fail@plt+0x304c>
   13f9c:	ldr	r0, [r4, #32]
   13fa0:	mov	r6, #0
   13fa4:	cmp	r0, #0
   13fa8:	blt	13fc0 <__assert_fail@plt+0x304c>
   13fac:	bl	10f44 <close@plt>
   13fb0:	cmp	r0, #0
   13fb4:	beq	13fc0 <__assert_fail@plt+0x304c>
   13fb8:	bl	10e78 <__errno_location@plt>
   13fbc:	ldr	r6, [r0]
   13fc0:	add	r5, r4, #60	; 0x3c
   13fc4:	b	13fcc <__assert_fail@plt+0x3058>
   13fc8:	bl	10f44 <close@plt>
   13fcc:	mov	r0, r5
   13fd0:	bl	183b0 <__assert_fail@plt+0x743c>
   13fd4:	cmp	r0, #0
   13fd8:	bne	13ff0 <__assert_fail@plt+0x307c>
   13fdc:	mov	r0, r5
   13fe0:	bl	18404 <__assert_fail@plt+0x7490>
   13fe4:	cmp	r0, #0
   13fe8:	bge	13fc8 <__assert_fail@plt+0x3054>
   13fec:	b	13fcc <__assert_fail@plt+0x3058>
   13ff0:	ldr	r0, [r4, #52]	; 0x34
   13ff4:	cmp	r0, #0
   13ff8:	beq	14000 <__assert_fail@plt+0x308c>
   13ffc:	bl	17774 <__assert_fail@plt+0x6800>
   14000:	ldrh	r0, [r4, #48]	; 0x30
   14004:	movw	r1, #258	; 0x102
   14008:	tst	r0, r1
   1400c:	beq	14024 <__assert_fail@plt+0x30b0>
   14010:	ldr	r0, [r4, #56]	; 0x38
   14014:	cmp	r0, #0
   14018:	beq	1402c <__assert_fail@plt+0x30b8>
   1401c:	bl	17774 <__assert_fail@plt+0x6800>
   14020:	b	1402c <__assert_fail@plt+0x30b8>
   14024:	ldr	r0, [r4, #56]	; 0x38
   14028:	bl	13598 <__assert_fail@plt+0x2624>
   1402c:	mov	r0, r4
   14030:	bl	13598 <__assert_fail@plt+0x2624>
   14034:	cmp	r6, #0
   14038:	moveq	r0, #0
   1403c:	popeq	{r4, r5, r6, r7, fp, pc}
   14040:	bl	10e78 <__errno_location@plt>
   14044:	str	r6, [r0]
   14048:	mvn	r0, #0
   1404c:	pop	{r4, r5, r6, r7, fp, pc}
   14050:	mov	r6, #0
   14054:	ldr	r0, [r4, #28]
   14058:	bl	10f44 <close@plt>
   1405c:	cmp	r6, #0
   14060:	beq	13fb0 <__assert_fail@plt+0x303c>
   14064:	b	13fc0 <__assert_fail@plt+0x304c>
   14068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1406c:	add	fp, sp, #28
   14070:	sub	sp, sp, #4
   14074:	ldr	r6, [r0]
   14078:	mov	sl, #0
   1407c:	cmp	r6, #0
   14080:	beq	14908 <__assert_fail@plt+0x3994>
   14084:	mov	r4, r0
   14088:	ldr	r0, [r0, #48]	; 0x30
   1408c:	tst	r0, #8192	; 0x2000
   14090:	bne	14908 <__assert_fail@plt+0x3994>
   14094:	ldrh	r1, [r6, #60]	; 0x3c
   14098:	mov	r2, #3
   1409c:	strh	r2, [r6, #60]	; 0x3c
   140a0:	cmp	r1, #1
   140a4:	beq	14124 <__assert_fail@plt+0x31b0>
   140a8:	mov	r5, r6
   140ac:	cmp	r1, #2
   140b0:	bne	14148 <__assert_fail@plt+0x31d4>
   140b4:	ldrh	r2, [r5, #56]!	; 0x38
   140b8:	movw	r3, #65534	; 0xfffe
   140bc:	and	r3, r2, r3
   140c0:	cmp	r3, #12
   140c4:	bne	1414c <__assert_fail@plt+0x31d8>
   140c8:	mov	r0, r4
   140cc:	mov	r1, r6
   140d0:	mov	r2, #1
   140d4:	bl	13c24 <__assert_fail@plt+0x2cb0>
   140d8:	strh	r0, [r6, #56]	; 0x38
   140dc:	cmp	r0, #1
   140e0:	ldreq	r0, [r4, #48]	; 0x30
   140e4:	tsteq	r0, #4
   140e8:	bne	14400 <__assert_fail@plt+0x348c>
   140ec:	mov	r1, #32768	; 0x8000
   140f0:	tst	r0, #512	; 0x200
   140f4:	and	r1, r1, r0, lsl #11
   140f8:	orr	r1, r1, #18688	; 0x4900
   140fc:	orr	r2, r1, #524288	; 0x80000
   14100:	bne	14614 <__assert_fail@plt+0x36a0>
   14104:	movw	r0, #36267	; 0x8dab
   14108:	mov	r1, r2
   1410c:	movt	r0, #1
   14110:	bl	18984 <__assert_fail@plt+0x7a10>
   14114:	cmn	r0, #1
   14118:	str	r0, [r6, #36]	; 0x24
   1411c:	bgt	14630 <__assert_fail@plt+0x36bc>
   14120:	b	14674 <__assert_fail@plt+0x3700>
   14124:	mov	r0, r4
   14128:	mov	r1, r6
   1412c:	mov	r2, #0
   14130:	bl	13c24 <__assert_fail@plt+0x2cb0>
   14134:	strh	r0, [r6, #56]	; 0x38
   14138:	mov	sl, r6
   1413c:	mov	r0, sl
   14140:	sub	sp, fp, #28
   14144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14148:	ldrh	r2, [r5, #56]!	; 0x38
   1414c:	cmp	r2, #1
   14150:	bne	141d0 <__assert_fail@plt+0x325c>
   14154:	cmp	r1, #4
   14158:	bne	14240 <__assert_fail@plt+0x32cc>
   1415c:	ldrb	r0, [r6, #58]	; 0x3a
   14160:	tst	r0, #2
   14164:	beq	14170 <__assert_fail@plt+0x31fc>
   14168:	ldr	r0, [r6, #36]	; 0x24
   1416c:	bl	10f44 <close@plt>
   14170:	ldr	r5, [r4, #4]
   14174:	cmp	r5, #0
   14178:	beq	141ac <__assert_fail@plt+0x3238>
   1417c:	ldrd	r8, [r5, #8]
   14180:	cmp	r9, #0
   14184:	beq	14190 <__assert_fail@plt+0x321c>
   14188:	mov	r0, r9
   1418c:	bl	10f5c <closedir@plt>
   14190:	mov	r0, r5
   14194:	bl	13598 <__assert_fail@plt+0x2624>
   14198:	cmp	r8, #0
   1419c:	mov	r5, r8
   141a0:	bne	1417c <__assert_fail@plt+0x3208>
   141a4:	mov	r0, #0
   141a8:	str	r0, [r4, #4]
   141ac:	mov	r0, #6
   141b0:	strh	r0, [r6, #56]	; 0x38
   141b4:	mov	r0, r4
   141b8:	mov	r1, r6
   141bc:	bl	14918 <__assert_fail@plt+0x39a4>
   141c0:	mov	sl, r6
   141c4:	mov	r0, sl
   141c8:	sub	sp, fp, #28
   141cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d0:	mov	r7, r6
   141d4:	ldr	r6, [r7, #8]
   141d8:	cmp	r6, #0
   141dc:	beq	142d0 <__assert_fail@plt+0x335c>
   141e0:	mov	r0, r7
   141e4:	str	r6, [r4]
   141e8:	bl	13598 <__assert_fail@plt+0x2624>
   141ec:	ldr	r0, [r6, #48]	; 0x30
   141f0:	cmp	r0, #0
   141f4:	beq	14318 <__assert_fail@plt+0x33a4>
   141f8:	ldrh	r0, [r6, #60]	; 0x3c
   141fc:	mov	r7, r6
   14200:	cmp	r0, #4
   14204:	beq	141d4 <__assert_fail@plt+0x3260>
   14208:	cmp	r0, #2
   1420c:	bne	143c4 <__assert_fail@plt+0x3450>
   14210:	mov	r0, r4
   14214:	mov	r1, r6
   14218:	mov	r2, #1
   1421c:	bl	13c24 <__assert_fail@plt+0x2cb0>
   14220:	strh	r0, [r6, #56]	; 0x38
   14224:	cmp	r0, #1
   14228:	ldreq	r0, [r4, #48]	; 0x30
   1422c:	tsteq	r0, #4
   14230:	beq	14814 <__assert_fail@plt+0x38a0>
   14234:	mov	r0, #3
   14238:	strh	r0, [r6, #60]	; 0x3c
   1423c:	b	143c4 <__assert_fail@plt+0x3450>
   14240:	tst	r0, #64	; 0x40
   14244:	beq	14260 <__assert_fail@plt+0x32ec>
   14248:	ldrd	r2, [r4, #16]
   1424c:	ldrd	r8, [r6, #64]	; 0x40
   14250:	eor	r1, r9, r3
   14254:	eor	r2, r8, r2
   14258:	orrs	r1, r2, r1
   1425c:	bne	1415c <__assert_fail@plt+0x31e8>
   14260:	ldr	r7, [r4, #4]
   14264:	cmp	r7, #0
   14268:	beq	143a0 <__assert_fail@plt+0x342c>
   1426c:	tst	r0, #4096	; 0x1000
   14270:	bne	14368 <__assert_fail@plt+0x33f4>
   14274:	ldr	r3, [r6, #24]
   14278:	mov	r0, r4
   1427c:	mov	r1, r6
   14280:	mvn	r2, #0
   14284:	bl	149e8 <__assert_fail@plt+0x3a74>
   14288:	cmp	r0, #0
   1428c:	beq	143b8 <__assert_fail@plt+0x3444>
   14290:	bl	10e78 <__errno_location@plt>
   14294:	ldr	r0, [r0]
   14298:	str	r0, [r6, #32]
   1429c:	ldrh	r0, [r6, #58]	; 0x3a
   142a0:	orr	r0, r0, #1
   142a4:	strh	r0, [r6, #58]	; 0x3a
   142a8:	ldr	r0, [r4, #4]
   142ac:	cmp	r0, #0
   142b0:	beq	143b8 <__assert_fail@plt+0x3444>
   142b4:	ldmib	r0, {r1, r2}
   142b8:	ldr	r1, [r1, #24]
   142bc:	cmp	r2, #0
   142c0:	str	r1, [r0, #24]
   142c4:	mov	r0, r2
   142c8:	bne	142b4 <__assert_fail@plt+0x3340>
   142cc:	b	143b8 <__assert_fail@plt+0x3444>
   142d0:	ldr	r0, [r7, #4]
   142d4:	ldr	r1, [r0, #12]
   142d8:	cmp	r1, #0
   142dc:	beq	14340 <__assert_fail@plt+0x33cc>
   142e0:	str	r0, [r4]
   142e4:	mov	r2, #0
   142e8:	ldr	r1, [r4, #24]
   142ec:	ldr	r0, [r0, #40]	; 0x28
   142f0:	strb	r2, [r1, r0]
   142f4:	mov	r0, r4
   142f8:	mov	r1, #3
   142fc:	bl	14c90 <__assert_fail@plt+0x3d1c>
   14300:	cmp	r0, #0
   14304:	beq	14588 <__assert_fail@plt+0x3614>
   14308:	mov	r6, r0
   1430c:	mov	r0, r7
   14310:	bl	13598 <__assert_fail@plt+0x2624>
   14314:	b	143c4 <__assert_fail@plt+0x3450>
   14318:	mov	r0, r4
   1431c:	bl	1586c <__assert_fail@plt+0x48f8>
   14320:	ldr	r1, [r4, #48]	; 0x30
   14324:	cmp	r0, #0
   14328:	beq	14348 <__assert_fail@plt+0x33d4>
   1432c:	orr	r0, r1, #8192	; 0x2000
   14330:	str	r0, [r4, #48]	; 0x30
   14334:	mov	r0, sl
   14338:	sub	sp, fp, #28
   1433c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14340:	mov	sl, r0
   14344:	b	1459c <__assert_fail@plt+0x3628>
   14348:	movw	r0, #258	; 0x102
   1434c:	tst	r1, r0
   14350:	beq	1469c <__assert_fail@plt+0x3728>
   14354:	ldr	r0, [r4, #56]	; 0x38
   14358:	cmp	r0, #0
   1435c:	beq	146a4 <__assert_fail@plt+0x3730>
   14360:	bl	17774 <__assert_fail@plt+0x6800>
   14364:	b	146a4 <__assert_fail@plt+0x3730>
   14368:	bic	r0, r0, #4096	; 0x1000
   1436c:	str	r0, [r4, #48]	; 0x30
   14370:	ldrd	r8, [r7, #8]
   14374:	cmp	r9, #0
   14378:	beq	14384 <__assert_fail@plt+0x3410>
   1437c:	mov	r0, r9
   14380:	bl	10f5c <closedir@plt>
   14384:	mov	r0, r7
   14388:	bl	13598 <__assert_fail@plt+0x2624>
   1438c:	cmp	r8, #0
   14390:	mov	r7, r8
   14394:	bne	14370 <__assert_fail@plt+0x33fc>
   14398:	mov	r0, #0
   1439c:	str	r0, [r4, #4]
   143a0:	mov	r0, r4
   143a4:	mov	r1, #3
   143a8:	bl	14c90 <__assert_fail@plt+0x3d1c>
   143ac:	cmp	r0, #0
   143b0:	str	r0, [r4, #4]
   143b4:	beq	14550 <__assert_fail@plt+0x35dc>
   143b8:	ldr	r6, [r4, #4]
   143bc:	mov	r0, #0
   143c0:	str	r0, [r4, #4]
   143c4:	ldr	r0, [r6, #4]
   143c8:	ldr	r1, [r0, #28]
   143cc:	ldr	r0, [r0, #40]	; 0x28
   143d0:	sub	r2, r0, #1
   143d4:	ldrb	r1, [r1, r2]
   143d8:	cmp	r1, #47	; 0x2f
   143dc:	ldr	r1, [r4, #24]
   143e0:	moveq	r0, r2
   143e4:	mov	r2, #47	; 0x2f
   143e8:	strb	r2, [r1, r0]!
   143ec:	ldr	r2, [r6, #52]	; 0x34
   143f0:	add	r0, r1, #1
   143f4:	add	r1, r6, #168	; 0xa8
   143f8:	add	r2, r2, #1
   143fc:	bl	10d58 <memmove@plt>
   14400:	str	r6, [r4]
   14404:	ldrh	r0, [r6, #56]	; 0x38
   14408:	cmp	r0, #11
   1440c:	bne	14440 <__assert_fail@plt+0x34cc>
   14410:	ldrd	r0, [r6, #112]	; 0x70
   14414:	eor	r2, r0, #1
   14418:	orrs	r2, r2, r1
   1441c:	beq	144e8 <__assert_fail@plt+0x3574>
   14420:	eor	r0, r0, #2
   14424:	orrs	r0, r0, r1
   14428:	bne	14914 <__assert_fail@plt+0x39a0>
   1442c:	mov	r0, r4
   14430:	mov	r1, r6
   14434:	mov	r2, #0
   14438:	bl	13c24 <__assert_fail@plt+0x2cb0>
   1443c:	strh	r0, [r6, #56]	; 0x38
   14440:	cmp	r0, #1
   14444:	bne	144d8 <__assert_fail@plt+0x3564>
   14448:	ldr	r0, [r6, #48]	; 0x30
   1444c:	cmp	r0, #0
   14450:	ldrdeq	r0, [r6, #64]	; 0x40
   14454:	strdeq	r0, [r4, #16]
   14458:	movw	r1, #258	; 0x102
   1445c:	ldrh	r0, [r4, #48]	; 0x30
   14460:	tst	r0, r1
   14464:	beq	144f8 <__assert_fail@plt+0x3584>
   14468:	mov	r0, #24
   1446c:	bl	1862c <__assert_fail@plt+0x76b8>
   14470:	cmp	r0, #0
   14474:	beq	14528 <__assert_fail@plt+0x35b4>
   14478:	mov	r7, r0
   1447c:	ldrd	r0, [r6, #64]	; 0x40
   14480:	add	r2, r7, #8
   14484:	stm	r7, {r0, r1}
   14488:	ldrd	r0, [r6, #160]	; 0xa0
   1448c:	stm	r2, {r0, r1, r6}
   14490:	mov	r1, r7
   14494:	ldr	r0, [r4, #56]	; 0x38
   14498:	bl	18090 <__assert_fail@plt+0x711c>
   1449c:	cmp	r0, r7
   144a0:	beq	14578 <__assert_fail@plt+0x3604>
   144a4:	mov	r4, r0
   144a8:	mov	r0, r7
   144ac:	bl	13598 <__assert_fail@plt+0x2624>
   144b0:	cmp	r4, #0
   144b4:	beq	14528 <__assert_fail@plt+0x35b4>
   144b8:	ldr	r0, [r4, #16]
   144bc:	mov	r1, #2
   144c0:	mov	sl, r6
   144c4:	strh	r1, [r6, #56]	; 0x38
   144c8:	str	r0, [r6]
   144cc:	mov	r0, sl
   144d0:	sub	sp, fp, #28
   144d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144d8:	mov	sl, r6
   144dc:	mov	r0, sl
   144e0:	sub	sp, fp, #28
   144e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e8:	mov	sl, r6
   144ec:	mov	r0, sl
   144f0:	sub	sp, fp, #28
   144f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144f8:	ldr	r0, [r4, #56]	; 0x38
   144fc:	add	r1, r6, #64	; 0x40
   14500:	bl	186cc <__assert_fail@plt+0x7758>
   14504:	cmp	r0, #0
   14508:	beq	14540 <__assert_fail@plt+0x35cc>
   1450c:	mov	r0, #2
   14510:	mov	sl, r6
   14514:	strh	r0, [r6, #56]	; 0x38
   14518:	str	r6, [r6]
   1451c:	mov	r0, sl
   14520:	sub	sp, fp, #28
   14524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14528:	bl	10e78 <__errno_location@plt>
   1452c:	mov	r1, #12
   14530:	str	r1, [r0]
   14534:	mov	r0, sl
   14538:	sub	sp, fp, #28
   1453c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14540:	mov	sl, r6
   14544:	mov	r0, sl
   14548:	sub	sp, fp, #28
   1454c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14550:	ldrb	r0, [r4, #49]	; 0x31
   14554:	tst	r0, #32
   14558:	bne	14908 <__assert_fail@plt+0x3994>
   1455c:	ldr	r0, [r6, #32]
   14560:	cmp	r0, #0
   14564:	ldrhne	r0, [r5]
   14568:	cmpne	r0, #4
   1456c:	movne	r0, #7
   14570:	strhne	r0, [r5]
   14574:	b	141b4 <__assert_fail@plt+0x3240>
   14578:	mov	sl, r6
   1457c:	mov	r0, sl
   14580:	sub	sp, fp, #28
   14584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14588:	ldrb	r0, [r4, #49]	; 0x31
   1458c:	mov	sl, #0
   14590:	tst	r0, #32
   14594:	bne	14908 <__assert_fail@plt+0x3994>
   14598:	ldr	sl, [r7, #4]
   1459c:	mov	r0, r7
   145a0:	str	sl, [r4]
   145a4:	bl	13598 <__assert_fail@plt+0x2624>
   145a8:	ldr	r0, [sl, #48]	; 0x30
   145ac:	cmn	r0, #1
   145b0:	beq	14650 <__assert_fail@plt+0x36dc>
   145b4:	ldrh	r0, [sl, #56]	; 0x38
   145b8:	cmp	r0, #11
   145bc:	beq	14914 <__assert_fail@plt+0x39a0>
   145c0:	ldr	r0, [sl, #40]	; 0x28
   145c4:	ldr	r1, [r4, #24]
   145c8:	mov	r2, #0
   145cc:	strb	r2, [r1, r0]
   145d0:	ldr	r0, [sl, #48]	; 0x30
   145d4:	cmp	r0, #0
   145d8:	beq	14794 <__assert_fail@plt+0x3820>
   145dc:	ldrh	r0, [sl, #58]	; 0x3a
   145e0:	tst	r0, #2
   145e4:	bne	147cc <__assert_fail@plt+0x3858>
   145e8:	tst	r0, #1
   145ec:	bne	148cc <__assert_fail@plt+0x3958>
   145f0:	ldr	r1, [sl, #4]
   145f4:	movw	r3, #36266	; 0x8daa
   145f8:	mov	r0, r4
   145fc:	mvn	r2, #0
   14600:	movt	r3, #1
   14604:	bl	149e8 <__assert_fail@plt+0x3a74>
   14608:	cmp	r0, #0
   1460c:	bne	147a4 <__assert_fail@plt+0x3830>
   14610:	b	148cc <__assert_fail@plt+0x3958>
   14614:	ldr	r0, [r4, #32]
   14618:	movw	r1, #36267	; 0x8dab
   1461c:	movt	r1, #1
   14620:	bl	184f4 <__assert_fail@plt+0x7580>
   14624:	cmn	r0, #1
   14628:	str	r0, [r6, #36]	; 0x24
   1462c:	ble	14674 <__assert_fail@plt+0x3700>
   14630:	ldrh	r0, [r6, #58]	; 0x3a
   14634:	orr	r0, r0, #2
   14638:	strh	r0, [r6, #58]	; 0x3a
   1463c:	str	r6, [r4]
   14640:	ldrh	r0, [r6, #56]	; 0x38
   14644:	cmp	r0, #11
   14648:	beq	14410 <__assert_fail@plt+0x349c>
   1464c:	b	14440 <__assert_fail@plt+0x34cc>
   14650:	mov	r0, sl
   14654:	bl	13598 <__assert_fail@plt+0x2624>
   14658:	bl	10e78 <__errno_location@plt>
   1465c:	mov	sl, #0
   14660:	str	sl, [r0]
   14664:	str	sl, [r4]
   14668:	mov	r0, sl
   1466c:	sub	sp, fp, #28
   14670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14674:	bl	10e78 <__errno_location@plt>
   14678:	ldr	r0, [r0]
   1467c:	mov	r1, #7
   14680:	strh	r1, [r6, #56]	; 0x38
   14684:	str	r0, [r6, #32]
   14688:	str	r6, [r4]
   1468c:	ldrh	r0, [r6, #56]	; 0x38
   14690:	cmp	r0, #11
   14694:	beq	14410 <__assert_fail@plt+0x349c>
   14698:	b	14440 <__assert_fail@plt+0x34cc>
   1469c:	ldr	r0, [r4, #56]	; 0x38
   146a0:	bl	13598 <__assert_fail@plt+0x2624>
   146a4:	ldr	r1, [r6, #52]	; 0x34
   146a8:	add	r7, r6, #168	; 0xa8
   146ac:	str	r1, [r6, #40]	; 0x28
   146b0:	add	r2, r1, #1
   146b4:	mov	r1, r7
   146b8:	ldr	r0, [r4, #24]
   146bc:	bl	10d58 <memmove@plt>
   146c0:	mov	r0, r7
   146c4:	mov	r1, #47	; 0x2f
   146c8:	bl	10ea8 <strrchr@plt>
   146cc:	cmp	r0, #0
   146d0:	beq	1470c <__assert_fail@plt+0x3798>
   146d4:	cmp	r0, r7
   146d8:	bne	146e8 <__assert_fail@plt+0x3774>
   146dc:	ldrb	r1, [r6, #169]	; 0xa9
   146e0:	cmp	r1, #0
   146e4:	beq	1470c <__assert_fail@plt+0x3798>
   146e8:	add	r8, r0, #1
   146ec:	mov	r0, r8
   146f0:	bl	10e48 <strlen@plt>
   146f4:	mov	r9, r0
   146f8:	add	r2, r0, #1
   146fc:	mov	r0, r7
   14700:	mov	r1, r8
   14704:	bl	10d58 <memmove@plt>
   14708:	str	r9, [r6, #52]	; 0x34
   1470c:	ldr	r0, [r4, #24]
   14710:	movw	r1, #258	; 0x102
   14714:	str	r0, [r6, #24]
   14718:	str	r0, [r6, #28]
   1471c:	ldrh	r0, [r4, #48]	; 0x30
   14720:	tst	r0, r1
   14724:	beq	14768 <__assert_fail@plt+0x37f4>
   14728:	movw	r0, #13720	; 0x3598
   1472c:	movw	r2, #23364	; 0x5b44
   14730:	movw	r3, #23396	; 0x5b64
   14734:	mov	r1, #0
   14738:	movt	r0, #1
   1473c:	movt	r2, #1
   14740:	movt	r3, #1
   14744:	str	r0, [sp]
   14748:	mov	r0, #31
   1474c:	bl	17458 <__assert_fail@plt+0x64e4>
   14750:	str	r0, [r4, #56]	; 0x38
   14754:	str	r6, [r4]
   14758:	ldrh	r0, [r6, #56]	; 0x38
   1475c:	cmp	r0, #11
   14760:	beq	14410 <__assert_fail@plt+0x349c>
   14764:	b	14440 <__assert_fail@plt+0x34cc>
   14768:	mov	r0, #32
   1476c:	bl	1862c <__assert_fail@plt+0x76b8>
   14770:	cmp	r0, #0
   14774:	str	r0, [r4, #56]	; 0x38
   14778:	beq	14400 <__assert_fail@plt+0x348c>
   1477c:	bl	186b0 <__assert_fail@plt+0x773c>
   14780:	str	r6, [r4]
   14784:	ldrh	r0, [r6, #56]	; 0x38
   14788:	cmp	r0, #11
   1478c:	beq	14410 <__assert_fail@plt+0x349c>
   14790:	b	14440 <__assert_fail@plt+0x34cc>
   14794:	mov	r0, r4
   14798:	bl	1586c <__assert_fail@plt+0x48f8>
   1479c:	cmp	r0, #0
   147a0:	beq	148cc <__assert_fail@plt+0x3958>
   147a4:	bl	10e78 <__errno_location@plt>
   147a8:	ldr	r0, [r0]
   147ac:	str	r0, [sl, #32]
   147b0:	ldr	r0, [r4, #48]	; 0x30
   147b4:	orr	r0, r0, #8192	; 0x2000
   147b8:	str	r0, [r4, #48]	; 0x30
   147bc:	ldrh	r0, [sl, #56]	; 0x38
   147c0:	cmp	r0, #2
   147c4:	bne	148d8 <__assert_fail@plt+0x3964>
   147c8:	b	148fc <__assert_fail@plt+0x3988>
   147cc:	ldr	r0, [r4, #48]	; 0x30
   147d0:	tst	r0, #4
   147d4:	bne	1484c <__assert_fail@plt+0x38d8>
   147d8:	mov	r5, sl
   147dc:	tst	r0, #512	; 0x200
   147e0:	ldr	r6, [r5, #36]!	; 0x24
   147e4:	bne	14898 <__assert_fail@plt+0x3924>
   147e8:	mov	r0, r6
   147ec:	bl	10efc <fchdir@plt>
   147f0:	cmp	r0, #0
   147f4:	beq	148c4 <__assert_fail@plt+0x3950>
   147f8:	bl	10e78 <__errno_location@plt>
   147fc:	ldr	r0, [r0]
   14800:	str	r0, [sl, #32]
   14804:	ldr	r0, [r4, #48]	; 0x30
   14808:	orr	r0, r0, #8192	; 0x2000
   1480c:	str	r0, [r4, #48]	; 0x30
   14810:	b	148c4 <__assert_fail@plt+0x3950>
   14814:	mov	r1, #32768	; 0x8000
   14818:	tst	r0, #512	; 0x200
   1481c:	and	r1, r1, r0, lsl #11
   14820:	orr	r1, r1, #18688	; 0x4900
   14824:	orr	r2, r1, #524288	; 0x80000
   14828:	bne	14854 <__assert_fail@plt+0x38e0>
   1482c:	movw	r0, #36267	; 0x8dab
   14830:	mov	r1, r2
   14834:	movt	r0, #1
   14838:	bl	18984 <__assert_fail@plt+0x7a10>
   1483c:	cmn	r0, #1
   14840:	str	r0, [r6, #36]	; 0x24
   14844:	bgt	14870 <__assert_fail@plt+0x38fc>
   14848:	b	14880 <__assert_fail@plt+0x390c>
   1484c:	add	r5, sl, #36	; 0x24
   14850:	b	148c4 <__assert_fail@plt+0x3950>
   14854:	ldr	r0, [r4, #32]
   14858:	movw	r1, #36267	; 0x8dab
   1485c:	movt	r1, #1
   14860:	bl	184f4 <__assert_fail@plt+0x7580>
   14864:	cmn	r0, #1
   14868:	str	r0, [r6, #36]	; 0x24
   1486c:	ble	14880 <__assert_fail@plt+0x390c>
   14870:	ldrh	r0, [r6, #58]	; 0x3a
   14874:	orr	r0, r0, #2
   14878:	strh	r0, [r6, #58]	; 0x3a
   1487c:	b	14234 <__assert_fail@plt+0x32c0>
   14880:	bl	10e78 <__errno_location@plt>
   14884:	ldr	r0, [r0]
   14888:	mov	r1, #7
   1488c:	strh	r1, [r6, #56]	; 0x38
   14890:	str	r0, [r6, #32]
   14894:	b	14234 <__assert_fail@plt+0x32c0>
   14898:	ldr	r1, [r4, #32]
   1489c:	cmp	r1, r6
   148a0:	bne	148ac <__assert_fail@plt+0x3938>
   148a4:	cmn	r1, #100	; 0x64
   148a8:	bne	14914 <__assert_fail@plt+0x39a0>
   148ac:	add	r0, r4, #60	; 0x3c
   148b0:	bl	183b8 <__assert_fail@plt+0x7444>
   148b4:	cmp	r0, #0
   148b8:	blt	148c0 <__assert_fail@plt+0x394c>
   148bc:	bl	10f44 <close@plt>
   148c0:	str	r6, [r4, #32]
   148c4:	ldr	r0, [r5]
   148c8:	bl	10f44 <close@plt>
   148cc:	ldrh	r0, [sl, #56]	; 0x38
   148d0:	cmp	r0, #2
   148d4:	beq	148fc <__assert_fail@plt+0x3988>
   148d8:	ldr	r0, [sl, #32]
   148dc:	mov	r1, #7
   148e0:	cmp	r0, #0
   148e4:	movweq	r1, #6
   148e8:	strh	r1, [sl, #56]	; 0x38
   148ec:	bne	148fc <__assert_fail@plt+0x3988>
   148f0:	mov	r0, r4
   148f4:	mov	r1, sl
   148f8:	bl	14918 <__assert_fail@plt+0x39a4>
   148fc:	ldrb	r0, [r4, #49]	; 0x31
   14900:	tst	r0, #32
   14904:	movne	sl, #0
   14908:	mov	r0, sl
   1490c:	sub	sp, fp, #28
   14910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14914:	bl	10f38 <abort@plt>
   14918:	push	{r4, r5, r6, r7, fp, lr}
   1491c:	add	fp, sp, #16
   14920:	sub	sp, sp, #24
   14924:	ldrh	r2, [r0, #48]	; 0x30
   14928:	movw	r3, #258	; 0x102
   1492c:	add	lr, r1, #64	; 0x40
   14930:	tst	r2, r3
   14934:	beq	1496c <__assert_fail@plt+0x39f8>
   14938:	ldrd	r2, [lr]
   1493c:	stm	sp, {r2, r3}
   14940:	ldrd	r2, [r1, #160]	; 0xa0
   14944:	mov	r1, sp
   14948:	str	r3, [sp, #12]
   1494c:	str	r2, [sp, #8]
   14950:	ldr	r0, [r0, #56]	; 0x38
   14954:	bl	180d8 <__assert_fail@plt+0x7164>
   14958:	cmp	r0, #0
   1495c:	beq	149e4 <__assert_fail@plt+0x3a70>
   14960:	bl	13598 <__assert_fail@plt+0x2624>
   14964:	sub	sp, fp, #16
   14968:	pop	{r4, r5, r6, r7, fp, pc}
   1496c:	ldr	r2, [r1, #4]
   14970:	cmp	r2, #0
   14974:	beq	149dc <__assert_fail@plt+0x3a68>
   14978:	ldr	r3, [r2, #48]	; 0x30
   1497c:	cmp	r3, #0
   14980:	blt	149dc <__assert_fail@plt+0x3a68>
   14984:	ldr	ip, [r0, #56]	; 0x38
   14988:	ldrd	r4, [ip, #16]
   1498c:	orrs	r3, r4, r5
   14990:	beq	149e4 <__assert_fail@plt+0x3a70>
   14994:	ldrd	r4, [r1, #160]	; 0xa0
   14998:	ldrd	r6, [ip]
   1499c:	eor	r1, r7, r5
   149a0:	eor	r3, r6, r4
   149a4:	orrs	r1, r3, r1
   149a8:	bne	149dc <__assert_fail@plt+0x3a68>
   149ac:	ldr	r1, [ip, #8]!
   149b0:	ldrd	r4, [lr]
   149b4:	ldr	r3, [ip, #4]
   149b8:	eor	r1, r1, r4
   149bc:	eor	r3, r3, r5
   149c0:	orrs	r1, r1, r3
   149c4:	bne	149dc <__assert_fail@plt+0x3a68>
   149c8:	ldrd	r4, [r2, #64]	; 0x40
   149cc:	strd	r4, [ip]
   149d0:	ldr	r0, [r0, #56]	; 0x38
   149d4:	ldrd	r2, [r2, #160]	; 0xa0
   149d8:	strd	r2, [r0]
   149dc:	sub	sp, fp, #16
   149e0:	pop	{r4, r5, r6, r7, fp, pc}
   149e4:	bl	10f38 <abort@plt>
   149e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149ec:	add	fp, sp, #28
   149f0:	sub	sp, sp, #108	; 0x6c
   149f4:	mov	r7, r3
   149f8:	mov	r4, r2
   149fc:	mov	r8, r1
   14a00:	mov	sl, r0
   14a04:	cmp	r3, #0
   14a08:	beq	14a94 <__assert_fail@plt+0x3b20>
   14a0c:	movw	r1, #36266	; 0x8daa
   14a10:	mov	r0, r7
   14a14:	movt	r1, #1
   14a18:	bl	10d1c <strcmp@plt>
   14a1c:	mov	r6, r0
   14a20:	cmp	r0, #0
   14a24:	movwne	r6, #1
   14a28:	ldr	r0, [sl, #48]	; 0x30
   14a2c:	tst	r0, #4
   14a30:	bne	14aa4 <__assert_fail@plt+0x3b30>
   14a34:	cmn	r4, #1
   14a38:	mov	r1, #0
   14a3c:	mov	r9, #0
   14a40:	movwgt	r1, #1
   14a44:	orrs	r1, r1, r6
   14a48:	bne	14acc <__assert_fail@plt+0x3b58>
   14a4c:	ands	r0, r0, #512	; 0x200
   14a50:	beq	14acc <__assert_fail@plt+0x3b58>
   14a54:	add	r4, sl, #60	; 0x3c
   14a58:	mov	r0, r4
   14a5c:	bl	183b0 <__assert_fail@plt+0x743c>
   14a60:	cmp	r0, #0
   14a64:	bne	14ad4 <__assert_fail@plt+0x3b60>
   14a68:	mov	r0, r4
   14a6c:	bl	18404 <__assert_fail@plt+0x7490>
   14a70:	cmn	r0, #1
   14a74:	ble	14ad4 <__assert_fail@plt+0x3b60>
   14a78:	mov	r4, r0
   14a7c:	mov	r9, #0
   14a80:	mov	r7, #0
   14a84:	ldr	r5, [sl, #48]	; 0x30
   14a88:	tst	r5, #2
   14a8c:	beq	14b18 <__assert_fail@plt+0x3ba4>
   14a90:	b	14b60 <__assert_fail@plt+0x3bec>
   14a94:	mov	r6, #1
   14a98:	ldr	r0, [sl, #48]	; 0x30
   14a9c:	tst	r0, #4
   14aa0:	beq	14a34 <__assert_fail@plt+0x3ac0>
   14aa4:	mov	r5, #0
   14aa8:	cmp	r4, #0
   14aac:	blt	14b54 <__assert_fail@plt+0x3be0>
   14ab0:	ands	r0, r0, #512	; 0x200
   14ab4:	beq	14b54 <__assert_fail@plt+0x3be0>
   14ab8:	mov	r0, r4
   14abc:	bl	10f44 <close@plt>
   14ac0:	mov	r0, r5
   14ac4:	sub	sp, fp, #28
   14ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14acc:	cmn	r4, #1
   14ad0:	bgt	14b0c <__assert_fail@plt+0x3b98>
   14ad4:	ldr	r0, [sl, #48]	; 0x30
   14ad8:	mov	r1, #32768	; 0x8000
   14adc:	and	r1, r1, r0, lsl #11
   14ae0:	tst	r0, #512	; 0x200
   14ae4:	orr	r1, r1, #18688	; 0x4900
   14ae8:	orr	r2, r1, #524288	; 0x80000
   14aec:	bne	14b88 <__assert_fail@plt+0x3c14>
   14af0:	mov	r0, r7
   14af4:	mov	r1, r2
   14af8:	bl	18984 <__assert_fail@plt+0x7a10>
   14afc:	mov	r4, r0
   14b00:	mov	r9, #1
   14b04:	cmp	r0, #0
   14b08:	blt	14ba4 <__assert_fail@plt+0x3c30>
   14b0c:	ldr	r5, [sl, #48]	; 0x30
   14b10:	tst	r5, #2
   14b14:	bne	14b60 <__assert_fail@plt+0x3bec>
   14b18:	cmp	r7, #0
   14b1c:	beq	14b38 <__assert_fail@plt+0x3bc4>
   14b20:	movw	r1, #36266	; 0x8daa
   14b24:	mov	r0, r7
   14b28:	movt	r1, #1
   14b2c:	bl	10d1c <strcmp@plt>
   14b30:	cmp	r0, #0
   14b34:	beq	14b60 <__assert_fail@plt+0x3bec>
   14b38:	tst	r5, #512	; 0x200
   14b3c:	bne	14bf4 <__assert_fail@plt+0x3c80>
   14b40:	mov	r0, r4
   14b44:	bl	10efc <fchdir@plt>
   14b48:	mov	r5, r0
   14b4c:	cmp	r9, #0
   14b50:	bne	14c3c <__assert_fail@plt+0x3cc8>
   14b54:	mov	r0, r5
   14b58:	sub	sp, fp, #28
   14b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b60:	mov	r2, sp
   14b64:	mov	r0, #3
   14b68:	mov	r1, r4
   14b6c:	bl	10db8 <__fxstat64@plt>
   14b70:	cmp	r0, #0
   14b74:	beq	14bb4 <__assert_fail@plt+0x3c40>
   14b78:	mvn	r5, #0
   14b7c:	cmp	r9, #0
   14b80:	beq	14b54 <__assert_fail@plt+0x3be0>
   14b84:	b	14c3c <__assert_fail@plt+0x3cc8>
   14b88:	ldr	r0, [sl, #32]
   14b8c:	mov	r1, r7
   14b90:	bl	184f4 <__assert_fail@plt+0x7580>
   14b94:	mov	r4, r0
   14b98:	mov	r9, #1
   14b9c:	cmp	r0, #0
   14ba0:	bge	14b0c <__assert_fail@plt+0x3b98>
   14ba4:	mvn	r5, #0
   14ba8:	mov	r0, r5
   14bac:	sub	sp, fp, #28
   14bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bb4:	ldrd	r0, [r8, #64]	; 0x40
   14bb8:	ldm	sp, {r2, r3}
   14bbc:	eor	r1, r1, r3
   14bc0:	eor	r0, r0, r2
   14bc4:	orrs	r0, r0, r1
   14bc8:	bne	14c24 <__assert_fail@plt+0x3cb0>
   14bcc:	ldrd	r0, [r8, #160]	; 0xa0
   14bd0:	ldr	r2, [sp, #96]	; 0x60
   14bd4:	ldr	r3, [sp, #100]	; 0x64
   14bd8:	eor	r1, r1, r3
   14bdc:	eor	r0, r0, r2
   14be0:	orrs	r0, r0, r1
   14be4:	bne	14c24 <__assert_fail@plt+0x3cb0>
   14be8:	ldr	r5, [sl, #48]	; 0x30
   14bec:	tst	r5, #512	; 0x200
   14bf0:	beq	14b40 <__assert_fail@plt+0x3bcc>
   14bf4:	ldr	r1, [sl, #32]
   14bf8:	cmp	r1, r4
   14bfc:	bne	14c08 <__assert_fail@plt+0x3c94>
   14c00:	cmn	r1, #100	; 0x64
   14c04:	bne	14c8c <__assert_fail@plt+0x3d18>
   14c08:	cmp	r6, #0
   14c0c:	beq	14c60 <__assert_fail@plt+0x3cec>
   14c10:	add	r0, sl, #60	; 0x3c
   14c14:	bl	183b8 <__assert_fail@plt+0x7444>
   14c18:	cmp	r0, #0
   14c1c:	bge	14c74 <__assert_fail@plt+0x3d00>
   14c20:	b	14c78 <__assert_fail@plt+0x3d04>
   14c24:	bl	10e78 <__errno_location@plt>
   14c28:	mov	r1, #2
   14c2c:	str	r1, [r0]
   14c30:	mvn	r5, #0
   14c34:	cmp	r9, #0
   14c38:	beq	14b54 <__assert_fail@plt+0x3be0>
   14c3c:	bl	10e78 <__errno_location@plt>
   14c40:	ldr	r7, [r0]
   14c44:	mov	r6, r0
   14c48:	mov	r0, r4
   14c4c:	bl	10f44 <close@plt>
   14c50:	str	r7, [r6]
   14c54:	mov	r0, r5
   14c58:	sub	sp, fp, #28
   14c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c60:	tst	r5, #4
   14c64:	bne	14c78 <__assert_fail@plt+0x3d04>
   14c68:	cmp	r1, #0
   14c6c:	blt	14c78 <__assert_fail@plt+0x3d04>
   14c70:	mov	r0, r1
   14c74:	bl	10f44 <close@plt>
   14c78:	str	r4, [sl, #32]
   14c7c:	mov	r5, #0
   14c80:	mov	r0, r5
   14c84:	sub	sp, fp, #28
   14c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c8c:	bl	10f38 <abort@plt>
   14c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c94:	add	fp, sp, #28
   14c98:	sub	sp, sp, #76	; 0x4c
   14c9c:	ldr	r8, [r0]
   14ca0:	mov	r9, r1
   14ca4:	mov	r5, r0
   14ca8:	str	r0, [sp, #52]	; 0x34
   14cac:	ldr	r4, [r8, #12]
   14cb0:	cmp	r4, #0
   14cb4:	beq	14d00 <__assert_fail@plt+0x3d8c>
   14cb8:	mov	r0, r4
   14cbc:	bl	10ee4 <dirfd@plt>
   14cc0:	cmn	r0, #1
   14cc4:	str	r0, [fp, #-32]	; 0xffffffe0
   14cc8:	ble	14d38 <__assert_fail@plt+0x3dc4>
   14ccc:	mov	r1, r5
   14cd0:	mvn	r2, #0
   14cd4:	str	r4, [sp, #12]
   14cd8:	str	r9, [sp, #4]
   14cdc:	mov	ip, #0
   14ce0:	ldr	r0, [r1, #44]!	; 0x2c
   14ce4:	cmp	r0, #0
   14ce8:	str	r1, [fp, #-48]	; 0xffffffd0
   14cec:	add	sl, r1, #4
   14cf0:	movweq	r2, #34464	; 0x86a0
   14cf4:	movteq	r2, #1
   14cf8:	str	r2, [sp, #28]
   14cfc:	b	14fc8 <__assert_fail@plt+0x4054>
   14d00:	mov	sl, r5
   14d04:	mvn	r0, #99	; 0x63
   14d08:	mov	r2, #0
   14d0c:	ldr	r3, [sl, #48]!	; 0x30
   14d10:	and	r1, r3, #516	; 0x204
   14d14:	cmp	r1, #512	; 0x200
   14d18:	ldr	r1, [r8, #24]
   14d1c:	ldreq	r0, [r5, #32]
   14d20:	tst	r3, #16
   14d24:	beq	14d60 <__assert_fail@plt+0x3dec>
   14d28:	tst	r3, #1
   14d2c:	bne	14d54 <__assert_fail@plt+0x3de0>
   14d30:	mov	r2, #32768	; 0x8000
   14d34:	b	14d60 <__assert_fail@plt+0x3dec>
   14d38:	ldr	r0, [r8, #12]
   14d3c:	bl	10f5c <closedir@plt>
   14d40:	mov	r6, #0
   14d44:	str	r6, [r8, #12]
   14d48:	cmp	r9, #3
   14d4c:	beq	14dac <__assert_fail@plt+0x3e38>
   14d50:	b	1567c <__assert_fail@plt+0x4708>
   14d54:	ldr	r3, [r8, #48]	; 0x30
   14d58:	cmp	r3, #0
   14d5c:	movne	r2, #32768	; 0x8000
   14d60:	sub	r3, fp, #32
   14d64:	bl	18538 <__assert_fail@plt+0x75c4>
   14d68:	cmp	r0, #0
   14d6c:	str	r0, [r8, #12]
   14d70:	beq	14da0 <__assert_fail@plt+0x3e2c>
   14d74:	ldrh	r0, [r8, #56]	; 0x38
   14d78:	cmp	r0, #11
   14d7c:	bne	14dcc <__assert_fail@plt+0x3e58>
   14d80:	mov	r0, r5
   14d84:	mov	r1, r8
   14d88:	mov	r2, #0
   14d8c:	bl	13c24 <__assert_fail@plt+0x2cb0>
   14d90:	mov	r7, r8
   14d94:	strh	r0, [r8, #56]	; 0x38
   14d98:	mov	r6, r5
   14d9c:	b	14ea0 <__assert_fail@plt+0x3f2c>
   14da0:	mov	r6, #0
   14da4:	cmp	r9, #3
   14da8:	bne	1567c <__assert_fail@plt+0x4708>
   14dac:	mov	r0, #4
   14db0:	strh	r0, [r8, #56]	; 0x38
   14db4:	bl	10e78 <__errno_location@plt>
   14db8:	ldr	r0, [r0]
   14dbc:	str	r0, [r8, #32]
   14dc0:	mov	r0, r6
   14dc4:	sub	sp, fp, #28
   14dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dcc:	ldrb	r0, [sl, #1]
   14dd0:	mov	r7, r8
   14dd4:	mov	r6, r5
   14dd8:	tst	r0, #1
   14ddc:	beq	14ea0 <__assert_fail@plt+0x3f2c>
   14de0:	mov	r0, r6
   14de4:	mov	r1, r7
   14de8:	mov	r5, r7
   14dec:	bl	14918 <__assert_fail@plt+0x39a4>
   14df0:	mov	r0, r6
   14df4:	mov	r1, r7
   14df8:	mov	r2, #0
   14dfc:	bl	13c24 <__assert_fail@plt+0x2cb0>
   14e00:	ldrh	r0, [r6, #48]	; 0x30
   14e04:	movw	r1, #258	; 0x102
   14e08:	tst	r0, r1
   14e0c:	beq	14e80 <__assert_fail@plt+0x3f0c>
   14e10:	mov	r0, #24
   14e14:	bl	1862c <__assert_fail@plt+0x76b8>
   14e18:	cmp	r0, #0
   14e1c:	beq	15838 <__assert_fail@plt+0x48c4>
   14e20:	mov	r5, r0
   14e24:	ldrd	r0, [r7, #64]	; 0x40
   14e28:	add	r2, r5, #8
   14e2c:	stm	r5, {r0, r1}
   14e30:	ldrd	r0, [r7, #160]	; 0xa0
   14e34:	stm	r2, {r0, r1, r7}
   14e38:	mov	r1, r5
   14e3c:	ldr	r6, [sp, #52]	; 0x34
   14e40:	ldr	r0, [r6, #56]	; 0x38
   14e44:	bl	18090 <__assert_fail@plt+0x711c>
   14e48:	cmp	r0, r5
   14e4c:	beq	14ea0 <__assert_fail@plt+0x3f2c>
   14e50:	mov	r8, r0
   14e54:	mov	r0, r5
   14e58:	bl	13598 <__assert_fail@plt+0x2624>
   14e5c:	cmp	r8, #0
   14e60:	beq	15838 <__assert_fail@plt+0x48c4>
   14e64:	ldr	r0, [r8, #16]
   14e68:	ldr	r6, [sp, #52]	; 0x34
   14e6c:	mov	r1, #2
   14e70:	mov	r2, r7
   14e74:	strh	r1, [r7, #56]	; 0x38
   14e78:	str	r0, [r7]
   14e7c:	b	14ea0 <__assert_fail@plt+0x3f2c>
   14e80:	ldr	r0, [r6, #56]	; 0x38
   14e84:	add	r1, r5, #64	; 0x40
   14e88:	bl	186cc <__assert_fail@plt+0x7758>
   14e8c:	cmp	r0, #0
   14e90:	movne	r0, #2
   14e94:	movne	r1, r7
   14e98:	strhne	r0, [r7, #56]	; 0x38
   14e9c:	strne	r7, [r7]
   14ea0:	mov	r1, r6
   14ea4:	mov	r5, r6
   14ea8:	mov	r8, r7
   14eac:	str	r9, [sp, #4]
   14eb0:	str	r4, [sp, #12]
   14eb4:	ldr	r0, [r1, #44]!	; 0x2c
   14eb8:	str	r1, [fp, #-48]	; 0xffffffd0
   14ebc:	mvn	r1, #0
   14ec0:	cmp	r0, #0
   14ec4:	movweq	r1, #34464	; 0x86a0
   14ec8:	movteq	r1, #1
   14ecc:	cmp	r9, #2
   14ed0:	str	r1, [sp, #28]
   14ed4:	bne	14ef0 <__assert_fail@plt+0x3f7c>
   14ed8:	mov	ip, #1
   14edc:	cmp	r9, #3
   14ee0:	bne	14fc8 <__assert_fail@plt+0x4054>
   14ee4:	sub	r0, r9, #3
   14ee8:	mov	r5, #0
   14eec:	b	14f10 <__assert_fail@plt+0x3f9c>
   14ef0:	ldr	r0, [sl]
   14ef4:	and	r0, r0, #56	; 0x38
   14ef8:	cmp	r0, #24
   14efc:	ldreq	r0, [r8, #84]	; 0x54
   14f00:	cmpeq	r0, #2
   14f04:	beq	157f8 <__assert_fail@plt+0x4884>
   14f08:	sub	r0, r9, #3
   14f0c:	mov	r5, #1
   14f10:	clz	r0, r0
   14f14:	lsr	r6, r0, #5
   14f18:	ldrb	r0, [sl, #1]
   14f1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14f20:	tst	r0, #2
   14f24:	beq	14f40 <__assert_fail@plt+0x3fcc>
   14f28:	mov	r0, r2
   14f2c:	movw	r1, #1030	; 0x406
   14f30:	mov	r2, #3
   14f34:	bl	187a4 <__assert_fail@plt+0x7830>
   14f38:	mov	r2, r0
   14f3c:	str	r0, [fp, #-32]	; 0xffffffe0
   14f40:	cmp	r2, #0
   14f44:	blt	14f60 <__assert_fail@plt+0x3fec>
   14f48:	ldr	r0, [sp, #52]	; 0x34
   14f4c:	mov	r1, r8
   14f50:	mov	r3, #0
   14f54:	bl	149e8 <__assert_fail@plt+0x3a74>
   14f58:	cmp	r0, #0
   14f5c:	beq	14fc0 <__assert_fail@plt+0x404c>
   14f60:	and	r0, r6, r5
   14f64:	cmp	r0, #1
   14f68:	bne	14f78 <__assert_fail@plt+0x4004>
   14f6c:	bl	10e78 <__errno_location@plt>
   14f70:	ldr	r0, [r0]
   14f74:	str	r0, [r8, #32]
   14f78:	ldrh	r0, [r8, #58]	; 0x3a
   14f7c:	orr	r0, r0, #1
   14f80:	strh	r0, [r8, #58]	; 0x3a
   14f84:	ldr	r0, [r8, #12]
   14f88:	bl	10f5c <closedir@plt>
   14f8c:	mov	r4, #0
   14f90:	ldr	r5, [sp, #52]	; 0x34
   14f94:	str	r4, [r8, #12]
   14f98:	ldr	r0, [sl]
   14f9c:	tst	r0, #512	; 0x200
   14fa0:	beq	14fb4 <__assert_fail@plt+0x4040>
   14fa4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14fa8:	cmp	r0, #0
   14fac:	blt	14fb4 <__assert_fail@plt+0x4040>
   14fb0:	bl	10f44 <close@plt>
   14fb4:	mov	ip, #1
   14fb8:	str	r4, [r8, #12]
   14fbc:	b	14fc8 <__assert_fail@plt+0x4054>
   14fc0:	ldr	r5, [sp, #52]	; 0x34
   14fc4:	mov	ip, #0
   14fc8:	ldr	r0, [r8, #40]	; 0x28
   14fcc:	ldr	r1, [r8, #28]
   14fd0:	mov	r7, #0
   14fd4:	sub	r2, r0, #1
   14fd8:	ldrb	r1, [r1, r2]
   14fdc:	cmp	r1, #47	; 0x2f
   14fe0:	ldrb	r1, [sl]
   14fe4:	moveq	r0, r2
   14fe8:	tst	r1, #4
   14fec:	mov	r1, #0
   14ff0:	str	r1, [sp, #40]	; 0x28
   14ff4:	beq	1500c <__assert_fail@plt+0x4098>
   14ff8:	ldr	r1, [r5, #24]
   14ffc:	mov	r2, #47	; 0x2f
   15000:	strb	r2, [r1, r0]!
   15004:	add	r1, r1, #1
   15008:	str	r1, [sp, #40]	; 0x28
   1500c:	ldr	r6, [r8, #12]
   15010:	add	r1, r0, #1
   15014:	str	r1, [fp, #-44]	; 0xffffffd4
   15018:	cmp	r6, #0
   1501c:	beq	153bc <__assert_fail@plt+0x4448>
   15020:	ldr	r0, [r8, #48]	; 0x30
   15024:	str	ip, [sp]
   15028:	add	r0, r0, #1
   1502c:	str	r0, [sp, #20]
   15030:	ldr	r0, [r5, #36]	; 0x24
   15034:	mov	r5, #0
   15038:	sub	r0, r0, r1
   1503c:	str	r0, [sp, #44]	; 0x2c
   15040:	bl	10e78 <__errno_location@plt>
   15044:	str	r0, [sp, #36]	; 0x24
   15048:	mov	r0, #0
   1504c:	mov	r7, #0
   15050:	mov	r4, #0
   15054:	str	r8, [sp, #24]
   15058:	str	sl, [sp, #32]
   1505c:	str	r0, [sp, #48]	; 0x30
   15060:	mov	r0, #0
   15064:	str	r0, [sp, #8]
   15068:	mov	r0, #0
   1506c:	str	r0, [sp, #16]
   15070:	ldr	r0, [sp, #36]	; 0x24
   15074:	str	r7, [fp, #-36]	; 0xffffffdc
   15078:	str	r5, [r0]
   1507c:	mov	r0, r6
   15080:	bl	10ec0 <readdir64@plt>
   15084:	cmp	r0, #0
   15088:	beq	15520 <__assert_fail@plt+0x45ac>
   1508c:	mov	r9, r0
   15090:	ldrb	r0, [sl]
   15094:	str	r4, [fp, #-40]	; 0xffffffd8
   15098:	mov	r1, sl
   1509c:	add	r4, r9, #19
   150a0:	tst	r0, #32
   150a4:	ldrbeq	r0, [r4]
   150a8:	cmpeq	r0, #46	; 0x2e
   150ac:	beq	151a8 <__assert_fail@plt+0x4234>
   150b0:	mov	r0, r4
   150b4:	bl	10e48 <strlen@plt>
   150b8:	mov	r5, r0
   150bc:	add	r0, r0, #176	; 0xb0
   150c0:	bic	r0, r0, #7
   150c4:	bl	1862c <__assert_fail@plt+0x76b8>
   150c8:	mov	r6, r0
   150cc:	cmp	r0, #0
   150d0:	beq	156dc <__assert_fail@plt+0x4768>
   150d4:	add	sl, r6, #168	; 0xa8
   150d8:	mov	r1, r4
   150dc:	mov	r2, r5
   150e0:	mov	r0, sl
   150e4:	bl	10d70 <memcpy@plt>
   150e8:	ldr	r2, [sp, #52]	; 0x34
   150ec:	mov	r0, #0
   150f0:	mov	r1, #196608	; 0x30000
   150f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150f8:	strb	r0, [sl, r5]
   150fc:	str	r5, [r6, #52]	; 0x34
   15100:	str	r2, [r6, #44]	; 0x2c
   15104:	add	r7, r5, r3
   15108:	ldr	r4, [r2, #24]
   1510c:	str	r1, [r6, #58]	; 0x3a
   15110:	str	r0, [r6, #12]
   15114:	str	r0, [r6, #16]
   15118:	str	r0, [r6, #20]
   1511c:	str	r4, [r6, #28]
   15120:	str	r0, [r6, #32]
   15124:	ldr	r0, [sp, #44]	; 0x2c
   15128:	cmp	r5, r0
   1512c:	bcs	15144 <__assert_fail@plt+0x41d0>
   15130:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15134:	mov	r5, r2
   15138:	cmp	r7, r3
   1513c:	bcs	151fc <__assert_fail@plt+0x4288>
   15140:	b	15580 <__assert_fail@plt+0x460c>
   15144:	ldr	r1, [r2, #36]	; 0x24
   15148:	movw	r0, #257	; 0x101
   1514c:	mov	r5, r2
   15150:	add	r0, r7, r0
   15154:	adds	r1, r0, r1
   15158:	bcs	15688 <__assert_fail@plt+0x4714>
   1515c:	mov	r0, r4
   15160:	str	r1, [r5, #36]	; 0x24
   15164:	bl	1865c <__assert_fail@plt+0x76e8>
   15168:	cmp	r0, #0
   1516c:	beq	156c8 <__assert_fail@plt+0x4754>
   15170:	cmp	r0, r4
   15174:	str	r0, [r5, #24]
   15178:	beq	151e0 <__assert_fail@plt+0x426c>
   1517c:	ldr	r1, [sp, #32]
   15180:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15184:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15188:	ldrb	r1, [r1]
   1518c:	tst	r1, #4
   15190:	ldr	r1, [sp, #40]	; 0x28
   15194:	addne	r1, r0, r3
   15198:	mov	r0, #1
   1519c:	str	r1, [sp, #40]	; 0x28
   151a0:	str	r0, [sp, #16]
   151a4:	b	151e8 <__assert_fail@plt+0x4274>
   151a8:	ldrb	r0, [r9, #20]
   151ac:	cmp	r0, #0
   151b0:	beq	151c4 <__assert_fail@plt+0x4250>
   151b4:	cmp	r0, #46	; 0x2e
   151b8:	ldrbeq	r0, [r9, #21]
   151bc:	cmpeq	r0, #0
   151c0:	bne	150b0 <__assert_fail@plt+0x413c>
   151c4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   151c8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   151cc:	mov	r5, #0
   151d0:	ldr	r6, [r8, #12]
   151d4:	cmp	r6, #0
   151d8:	bne	15070 <__assert_fail@plt+0x40fc>
   151dc:	b	153a0 <__assert_fail@plt+0x442c>
   151e0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   151e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151e8:	ldr	r0, [r5, #36]	; 0x24
   151ec:	sub	r0, r0, r3
   151f0:	str	r0, [sp, #44]	; 0x2c
   151f4:	cmp	r7, r3
   151f8:	bcc	15580 <__assert_fail@plt+0x460c>
   151fc:	ldr	r0, [sp, #20]
   15200:	str	r0, [r6, #48]	; 0x30
   15204:	ldr	r0, [r5]
   15208:	str	r7, [r6, #40]	; 0x28
   1520c:	str	r0, [r6, #4]
   15210:	ldrd	r0, [r9]
   15214:	strd	r0, [r6, #160]	; 0xa0
   15218:	ldrb	r0, [r5, #48]	; 0x30
   1521c:	tst	r0, #4
   15220:	bne	1522c <__assert_fail@plt+0x42b8>
   15224:	str	sl, [r6, #24]
   15228:	b	15248 <__assert_fail@plt+0x42d4>
   1522c:	ldr	r0, [r6, #28]
   15230:	ldr	r1, [r6, #52]	; 0x34
   15234:	str	r0, [r6, #24]
   15238:	ldr	r0, [sp, #40]	; 0x28
   1523c:	add	r2, r1, #1
   15240:	mov	r1, sl
   15244:	bl	10d58 <memmove@plt>
   15248:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1524c:	ldr	sl, [sp, #32]
   15250:	ldr	r8, [sp, #24]
   15254:	ldr	r0, [r0]
   15258:	ldr	r2, [sl]
   1525c:	cmp	r0, #0
   15260:	beq	1528c <__assert_fail@plt+0x4318>
   15264:	ands	r0, r2, #1024	; 0x400
   15268:	bne	1528c <__assert_fail@plt+0x4318>
   1526c:	mov	r0, r5
   15270:	mov	r1, r6
   15274:	mov	r2, #0
   15278:	bl	13c24 <__assert_fail@plt+0x2cb0>
   1527c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15280:	mov	r5, #0
   15284:	strh	r0, [r6, #56]	; 0x38
   15288:	b	15304 <__assert_fail@plt+0x4390>
   1528c:	ldrb	r3, [r9, #18]
   15290:	mov	r0, #0
   15294:	tst	r2, #8
   15298:	mov	r1, #0
   1529c:	beq	152c0 <__assert_fail@plt+0x434c>
   152a0:	orr	r1, r3, #4
   152a4:	cmp	r1, #4
   152a8:	mov	r1, #0
   152ac:	beq	152c0 <__assert_fail@plt+0x434c>
   152b0:	eor	r1, r3, #10
   152b4:	and	r2, r2, #16
   152b8:	orrs	r1, r2, r1
   152bc:	movwne	r1, #1
   152c0:	mov	r2, #11
   152c4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   152c8:	mov	r5, #0
   152cc:	strh	r2, [r6, #56]	; 0x38
   152d0:	sub	r2, r3, #1
   152d4:	uxtb	r3, r2
   152d8:	cmp	r3, #11
   152dc:	sxtbls	r0, r2
   152e0:	movwls	r2, #36272	; 0x8db0
   152e4:	movtls	r2, #1
   152e8:	ldrls	r0, [r2, r0, lsl #2]
   152ec:	cmp	r1, #0
   152f0:	str	r0, [r6, #80]	; 0x50
   152f4:	mov	r0, #2
   152f8:	movwne	r0, #1
   152fc:	str	r0, [r6, #112]	; 0x70
   15300:	str	r5, [r6, #116]	; 0x74
   15304:	cmp	r7, #0
   15308:	str	r5, [r6, #8]
   1530c:	ldrne	r0, [sp, #48]	; 0x30
   15310:	moveq	r7, r6
   15314:	strne	r6, [r0, #8]
   15318:	movw	r0, #10000	; 0x2710
   1531c:	cmp	r4, r0
   15320:	bne	15374 <__assert_fail@plt+0x4400>
   15324:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15328:	ldr	r0, [r0]
   1532c:	cmp	r0, #0
   15330:	bne	15374 <__assert_fail@plt+0x4400>
   15334:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15338:	mov	r0, r8
   1533c:	bl	15be4 <__assert_fail@plt+0x4c70>
   15340:	mov	r1, #0
   15344:	str	r1, [sp, #8]
   15348:	movw	r1, #19778	; 0x4d42
   1534c:	movt	r1, #65363	; 0xff53
   15350:	cmp	r0, r1
   15354:	movwne	r1, #26985	; 0x6969
   15358:	cmpne	r0, r1
   1535c:	beq	15374 <__assert_fail@plt+0x4400>
   15360:	movw	r1, #6548	; 0x1994
   15364:	movt	r1, #258	; 0x102
   15368:	cmp	r0, r1
   1536c:	movne	r0, #1
   15370:	strne	r0, [sp, #8]
   15374:	ldr	r0, [sp, #28]
   15378:	add	r4, r4, #1
   1537c:	cmp	r0, r4
   15380:	mov	r0, #0
   15384:	movwls	r0, #15
   15388:	cmp	r0, #0
   1538c:	bne	15600 <__assert_fail@plt+0x468c>
   15390:	str	r6, [sp, #48]	; 0x30
   15394:	ldr	r6, [r8, #12]
   15398:	cmp	r6, #0
   1539c:	bne	15070 <__assert_fail@plt+0x40fc>
   153a0:	ldr	r0, [sp, #16]
   153a4:	ldr	ip, [sp]
   153a8:	ldr	r6, [sp, #8]
   153ac:	ldr	r5, [sp, #52]	; 0x34
   153b0:	tst	r0, #1
   153b4:	beq	153c4 <__assert_fail@plt+0x4450>
   153b8:	b	1576c <__assert_fail@plt+0x47f8>
   153bc:	mov	r4, #0
   153c0:	mov	r6, #0
   153c4:	ldrb	r0, [sl]
   153c8:	tst	r0, #4
   153cc:	beq	153f8 <__assert_fail@plt+0x4484>
   153d0:	ldr	r2, [sp, #40]	; 0x28
   153d4:	ldr	r0, [r5, #36]	; 0x24
   153d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153dc:	cmp	r3, r0
   153e0:	sub	r1, r2, #1
   153e4:	mov	r0, #0
   153e8:	moveq	r2, r1
   153ec:	cmp	r4, #0
   153f0:	moveq	r2, r1
   153f4:	strb	r0, [r2]
   153f8:	ldr	r0, [sp, #12]
   153fc:	cmp	r0, #0
   15400:	movwne	r0, #1
   15404:	orrs	r0, r0, ip
   15408:	beq	1546c <__assert_fail@plt+0x44f8>
   1540c:	cmp	r4, #0
   15410:	bne	154ac <__assert_fail@plt+0x4538>
   15414:	ldr	r0, [sp, #4]
   15418:	cmp	r0, #3
   1541c:	bne	15434 <__assert_fail@plt+0x44c0>
   15420:	ldrh	r0, [r8, #56]	; 0x38
   15424:	cmp	r0, #4
   15428:	cmpne	r0, #7
   1542c:	movne	r0, #6
   15430:	strhne	r0, [r8, #56]	; 0x38
   15434:	mov	r6, #0
   15438:	cmp	r7, #0
   1543c:	beq	1567c <__assert_fail@plt+0x4708>
   15440:	ldrd	r4, [r7, #8]
   15444:	cmp	r5, #0
   15448:	beq	15454 <__assert_fail@plt+0x44e0>
   1544c:	mov	r0, r5
   15450:	bl	10f5c <closedir@plt>
   15454:	mov	r0, r7
   15458:	bl	13598 <__assert_fail@plt+0x2624>
   1545c:	cmp	r4, #0
   15460:	mov	r7, r4
   15464:	bne	15440 <__assert_fail@plt+0x44cc>
   15468:	b	1567c <__assert_fail@plt+0x4708>
   1546c:	ldr	r0, [sp, #4]
   15470:	cmp	r0, #1
   15474:	cmpne	r4, #0
   15478:	bne	154ac <__assert_fail@plt+0x4538>
   1547c:	ldr	r0, [r8, #48]	; 0x30
   15480:	cmp	r0, #0
   15484:	beq	15624 <__assert_fail@plt+0x46b0>
   15488:	ldr	r1, [r8, #4]
   1548c:	movw	r3, #36266	; 0x8daa
   15490:	mov	r0, r5
   15494:	mvn	r2, #0
   15498:	movt	r3, #1
   1549c:	bl	149e8 <__assert_fail@plt+0x3a74>
   154a0:	cmp	r0, #0
   154a4:	bne	15634 <__assert_fail@plt+0x46c0>
   154a8:	b	1540c <__assert_fail@plt+0x4498>
   154ac:	tst	r6, #1
   154b0:	beq	154e8 <__assert_fail@plt+0x4574>
   154b4:	movw	r0, #23468	; 0x5bac
   154b8:	mov	r1, r7
   154bc:	mov	r2, r4
   154c0:	movt	r0, #1
   154c4:	str	r0, [r5, #44]	; 0x2c
   154c8:	mov	r0, r5
   154cc:	bl	13dbc <__assert_fail@plt+0x2e48>
   154d0:	mov	r6, r0
   154d4:	mov	r0, #0
   154d8:	str	r0, [r5, #44]	; 0x2c
   154dc:	mov	r0, r6
   154e0:	sub	sp, fp, #28
   154e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e8:	cmp	r4, #2
   154ec:	bcc	156a8 <__assert_fail@plt+0x4734>
   154f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   154f4:	ldr	r0, [r0]
   154f8:	cmp	r0, #0
   154fc:	beq	156b8 <__assert_fail@plt+0x4744>
   15500:	mov	r0, r5
   15504:	mov	r1, r7
   15508:	mov	r2, r4
   1550c:	bl	13dbc <__assert_fail@plt+0x2e48>
   15510:	mov	r6, r0
   15514:	mov	r0, r6
   15518:	sub	sp, fp, #28
   1551c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15520:	ldr	r0, [sp, #36]	; 0x24
   15524:	ldr	r0, [r0]
   15528:	cmp	r0, #0
   1552c:	beq	15548 <__assert_fail@plt+0x45d4>
   15530:	str	r0, [r8, #32]
   15534:	ldr	r0, [sp, #12]
   15538:	orrs	r0, r0, r4
   1553c:	mov	r0, #4
   15540:	movwne	r0, #7
   15544:	strh	r0, [r8, #56]	; 0x38
   15548:	ldr	r0, [r8, #12]
   1554c:	ldr	r6, [sp, #8]
   15550:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15554:	ldr	r5, [sp, #52]	; 0x34
   15558:	cmp	r0, #0
   1555c:	beq	1575c <__assert_fail@plt+0x47e8>
   15560:	bl	10f5c <closedir@plt>
   15564:	mov	r0, #0
   15568:	ldr	ip, [sp]
   1556c:	str	r0, [r8, #12]
   15570:	ldr	r0, [sp, #16]
   15574:	tst	r0, #1
   15578:	beq	153c4 <__assert_fail@plt+0x4450>
   1557c:	b	1576c <__assert_fail@plt+0x47f8>
   15580:	mov	r0, r6
   15584:	bl	13598 <__assert_fail@plt+0x2624>
   15588:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1558c:	ldr	r7, [sp, #24]
   15590:	cmp	r6, #0
   15594:	beq	155c0 <__assert_fail@plt+0x464c>
   15598:	ldrd	r4, [r6, #8]
   1559c:	cmp	r5, #0
   155a0:	beq	155ac <__assert_fail@plt+0x4638>
   155a4:	mov	r0, r5
   155a8:	bl	10f5c <closedir@plt>
   155ac:	mov	r0, r6
   155b0:	bl	13598 <__assert_fail@plt+0x2624>
   155b4:	cmp	r4, #0
   155b8:	mov	r6, r4
   155bc:	bne	15598 <__assert_fail@plt+0x4624>
   155c0:	ldr	r0, [r7, #12]
   155c4:	bl	10f5c <closedir@plt>
   155c8:	ldr	r1, [sp, #32]
   155cc:	mov	r6, #0
   155d0:	mov	r0, #7
   155d4:	str	r6, [r7, #12]
   155d8:	strh	r0, [r7, #56]	; 0x38
   155dc:	ldr	r0, [r1]
   155e0:	orr	r0, r0, #8192	; 0x2000
   155e4:	str	r0, [r1]
   155e8:	ldr	r1, [sp, #36]	; 0x24
   155ec:	mov	r0, #36	; 0x24
   155f0:	str	r0, [r1]
   155f4:	mov	r0, r6
   155f8:	sub	sp, fp, #28
   155fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15600:	ldr	ip, [sp]
   15604:	cmp	r0, #15
   15608:	bne	15844 <__assert_fail@plt+0x48d0>
   1560c:	ldr	r6, [sp, #8]
   15610:	ldr	r5, [sp, #52]	; 0x34
   15614:	ldr	r0, [sp, #16]
   15618:	tst	r0, #1
   1561c:	beq	153c4 <__assert_fail@plt+0x4450>
   15620:	b	1576c <__assert_fail@plt+0x47f8>
   15624:	mov	r0, r5
   15628:	bl	1586c <__assert_fail@plt+0x48f8>
   1562c:	cmp	r0, #0
   15630:	beq	1540c <__assert_fail@plt+0x4498>
   15634:	mov	r0, #7
   15638:	mov	r6, #0
   1563c:	cmp	r7, #0
   15640:	strh	r0, [r8, #56]	; 0x38
   15644:	ldr	r0, [sl]
   15648:	orr	r0, r0, #8192	; 0x2000
   1564c:	str	r0, [sl]
   15650:	beq	1567c <__assert_fail@plt+0x4708>
   15654:	ldrd	r4, [r7, #8]
   15658:	cmp	r5, #0
   1565c:	beq	15668 <__assert_fail@plt+0x46f4>
   15660:	mov	r0, r5
   15664:	bl	10f5c <closedir@plt>
   15668:	mov	r0, r7
   1566c:	bl	13598 <__assert_fail@plt+0x2624>
   15670:	cmp	r4, #0
   15674:	mov	r7, r4
   15678:	bne	15654 <__assert_fail@plt+0x46e0>
   1567c:	mov	r0, r6
   15680:	sub	sp, fp, #28
   15684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15688:	mov	r0, r4
   1568c:	bl	13598 <__assert_fail@plt+0x2624>
   15690:	ldr	r1, [sp, #36]	; 0x24
   15694:	mov	r0, #0
   15698:	str	r0, [r5, #24]
   1569c:	mov	r0, #36	; 0x24
   156a0:	str	r0, [r1]
   156a4:	b	156d8 <__assert_fail@plt+0x4764>
   156a8:	mov	r6, r7
   156ac:	mov	r0, r6
   156b0:	sub	sp, fp, #28
   156b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156b8:	mov	r6, r7
   156bc:	mov	r0, r6
   156c0:	sub	sp, fp, #28
   156c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156c8:	ldr	r0, [r5, #24]
   156cc:	bl	13598 <__assert_fail@plt+0x2624>
   156d0:	mov	r0, #0
   156d4:	str	r0, [r5, #24]
   156d8:	ldr	r8, [sp, #24]
   156dc:	ldr	r0, [sp, #36]	; 0x24
   156e0:	ldr	r4, [r0]
   156e4:	mov	r0, r6
   156e8:	bl	13598 <__assert_fail@plt+0x2624>
   156ec:	ldr	r5, [fp, #-36]	; 0xffffffdc
   156f0:	cmp	r5, #0
   156f4:	beq	15720 <__assert_fail@plt+0x47ac>
   156f8:	ldrd	r6, [r5, #8]
   156fc:	cmp	r7, #0
   15700:	beq	1570c <__assert_fail@plt+0x4798>
   15704:	mov	r0, r7
   15708:	bl	10f5c <closedir@plt>
   1570c:	mov	r0, r5
   15710:	bl	13598 <__assert_fail@plt+0x2624>
   15714:	cmp	r6, #0
   15718:	mov	r5, r6
   1571c:	bne	156f8 <__assert_fail@plt+0x4784>
   15720:	ldr	r0, [r8, #12]
   15724:	bl	10f5c <closedir@plt>
   15728:	ldr	r1, [sp, #32]
   1572c:	mov	r6, #0
   15730:	mov	r0, #7
   15734:	str	r6, [r8, #12]
   15738:	strh	r0, [r8, #56]	; 0x38
   1573c:	ldr	r0, [r1]
   15740:	orr	r0, r0, #8192	; 0x2000
   15744:	str	r0, [r1]
   15748:	ldr	r0, [sp, #36]	; 0x24
   1574c:	str	r4, [r0]
   15750:	mov	r0, r6
   15754:	sub	sp, fp, #28
   15758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1575c:	ldr	ip, [sp]
   15760:	ldr	r0, [sp, #16]
   15764:	tst	r0, #1
   15768:	beq	153c4 <__assert_fail@plt+0x4450>
   1576c:	ldr	r1, [r5, #4]
   15770:	ldr	r0, [r5, #24]
   15774:	cmp	r1, #0
   15778:	beq	157a8 <__assert_fail@plt+0x4834>
   1577c:	ldr	r2, [r1, #24]
   15780:	add	r3, r1, #168	; 0xa8
   15784:	cmp	r2, r3
   15788:	ldrne	r3, [r1, #28]
   1578c:	subne	r2, r2, r3
   15790:	addne	r2, r0, r2
   15794:	strne	r2, [r1, #24]
   15798:	str	r0, [r1, #28]
   1579c:	ldr	r1, [r1, #8]
   157a0:	cmp	r1, #0
   157a4:	bne	1577c <__assert_fail@plt+0x4808>
   157a8:	ldr	r1, [r7, #48]	; 0x30
   157ac:	cmp	r1, #0
   157b0:	blt	153c4 <__assert_fail@plt+0x4450>
   157b4:	mov	r1, r7
   157b8:	ldr	r2, [r1, #24]
   157bc:	add	r3, r1, #168	; 0xa8
   157c0:	cmp	r2, r3
   157c4:	ldrne	r3, [r1, #28]
   157c8:	subne	r2, r2, r3
   157cc:	addne	r2, r0, r2
   157d0:	strne	r2, [r1, #24]
   157d4:	str	r0, [r1, #28]
   157d8:	ldr	r2, [r1, #8]
   157dc:	cmp	r2, #0
   157e0:	ldreq	r2, [r1, #4]
   157e4:	ldr	r1, [r2, #48]	; 0x30
   157e8:	cmn	r1, #1
   157ec:	mov	r1, r2
   157f0:	bgt	157b8 <__assert_fail@plt+0x4844>
   157f4:	b	153c4 <__assert_fail@plt+0x4450>
   157f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   157fc:	mov	r0, r8
   15800:	bl	15be4 <__assert_fail@plt+0x4c70>
   15804:	movw	r1, #26984	; 0x6968
   15808:	cmp	r0, r1
   1580c:	ble	15854 <__assert_fail@plt+0x48e0>
   15810:	movw	r1, #26985	; 0x6969
   15814:	cmp	r0, r1
   15818:	movwne	r1, #16719	; 0x414f
   1581c:	movtne	r1, #21318	; 0x5346
   15820:	cmpne	r0, r1
   15824:	beq	14f08 <__assert_fail@plt+0x3f94>
   15828:	movw	r1, #40864	; 0x9fa0
   1582c:	cmp	r0, r1
   15830:	beq	14f08 <__assert_fail@plt+0x3f94>
   15834:	b	14ed8 <__assert_fail@plt+0x3f64>
   15838:	bl	10e78 <__errno_location@plt>
   1583c:	mov	r1, #12
   15840:	str	r1, [r0]
   15844:	mov	r6, #0
   15848:	mov	r0, r6
   1584c:	sub	sp, fp, #28
   15850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15854:	movw	r1, #19778	; 0x4d42
   15858:	movt	r1, #65363	; 0xff53
   1585c:	cmp	r0, r1
   15860:	cmpne	r0, #0
   15864:	beq	14f08 <__assert_fail@plt+0x3f94>
   15868:	b	14ed8 <__assert_fail@plt+0x3f64>
   1586c:	push	{r4, r5, fp, lr}
   15870:	add	fp, sp, #8
   15874:	mov	r5, r0
   15878:	ldr	r0, [r0, #48]	; 0x30
   1587c:	mov	r4, #0
   15880:	tst	r0, #4
   15884:	bne	158c8 <__assert_fail@plt+0x4954>
   15888:	tst	r0, #512	; 0x200
   1588c:	bne	158a8 <__assert_fail@plt+0x4934>
   15890:	ldr	r0, [r5, #28]
   15894:	bl	10efc <fchdir@plt>
   15898:	mov	r4, r0
   1589c:	cmp	r0, #0
   158a0:	movwne	r4, #1
   158a4:	b	158c8 <__assert_fail@plt+0x4954>
   158a8:	ldr	r1, [r5, #32]
   158ac:	add	r0, r5, #60	; 0x3c
   158b0:	bl	183b8 <__assert_fail@plt+0x7444>
   158b4:	cmp	r0, #0
   158b8:	blt	158c0 <__assert_fail@plt+0x494c>
   158bc:	bl	10f44 <close@plt>
   158c0:	mvn	r0, #99	; 0x63
   158c4:	str	r0, [r5, #32]
   158c8:	add	r5, r5, #60	; 0x3c
   158cc:	b	158d4 <__assert_fail@plt+0x4960>
   158d0:	bl	10f44 <close@plt>
   158d4:	mov	r0, r5
   158d8:	bl	183b0 <__assert_fail@plt+0x743c>
   158dc:	cmp	r0, #0
   158e0:	movne	r0, r4
   158e4:	popne	{r4, r5, fp, pc}
   158e8:	mov	r0, r5
   158ec:	bl	18404 <__assert_fail@plt+0x7490>
   158f0:	cmp	r0, #0
   158f4:	bge	158d0 <__assert_fail@plt+0x495c>
   158f8:	b	158d4 <__assert_fail@plt+0x4960>
   158fc:	cmp	r2, #5
   15900:	movcc	r0, #0
   15904:	strhcc	r2, [r1, #60]	; 0x3c
   15908:	bxcc	lr
   1590c:	push	{fp, lr}
   15910:	mov	fp, sp
   15914:	bl	10e78 <__errno_location@plt>
   15918:	mov	r1, #22
   1591c:	str	r1, [r0]
   15920:	mov	r0, #1
   15924:	pop	{fp, pc}
   15928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1592c:	add	fp, sp, #28
   15930:	sub	sp, sp, #4
   15934:	mov	r9, r0
   15938:	orr	r0, r1, #4096	; 0x1000
   1593c:	cmp	r0, #4096	; 0x1000
   15940:	bne	15988 <__assert_fail@plt+0x4a14>
   15944:	ldr	r8, [r9]
   15948:	mov	r7, r1
   1594c:	bl	10e78 <__errno_location@plt>
   15950:	mov	r5, #0
   15954:	mov	sl, r0
   15958:	str	r5, [r0]
   1595c:	ldrb	r0, [r9, #49]	; 0x31
   15960:	tst	r0, #32
   15964:	bne	1597c <__assert_fail@plt+0x4a08>
   15968:	ldrh	r0, [r8, #56]	; 0x38
   1596c:	cmp	r0, #1
   15970:	beq	159a4 <__assert_fail@plt+0x4a30>
   15974:	cmp	r0, #9
   15978:	ldreq	r5, [r8, #8]
   1597c:	mov	r0, r5
   15980:	sub	sp, fp, #28
   15984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15988:	bl	10e78 <__errno_location@plt>
   1598c:	mov	r1, #22
   15990:	mov	r5, #0
   15994:	str	r1, [r0]
   15998:	mov	r0, r5
   1599c:	sub	sp, fp, #28
   159a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159a4:	ldr	r6, [r9, #4]
   159a8:	cmp	r6, #0
   159ac:	beq	159dc <__assert_fail@plt+0x4a68>
   159b0:	ldr	r4, [r6, #8]
   159b4:	ldr	r1, [r6, #12]
   159b8:	cmp	r1, #0
   159bc:	beq	159c8 <__assert_fail@plt+0x4a54>
   159c0:	mov	r0, r1
   159c4:	bl	10f5c <closedir@plt>
   159c8:	mov	r0, r6
   159cc:	bl	13598 <__assert_fail@plt+0x2624>
   159d0:	cmp	r4, #0
   159d4:	mov	r6, r4
   159d8:	bne	159b0 <__assert_fail@plt+0x4a3c>
   159dc:	cmp	r7, #4096	; 0x1000
   159e0:	mov	r4, #1
   159e4:	ldreq	r0, [r9, #48]	; 0x30
   159e8:	moveq	r4, #2
   159ec:	orreq	r0, r0, #4096	; 0x1000
   159f0:	streq	r0, [r9, #48]	; 0x30
   159f4:	ldr	r0, [r8, #48]	; 0x30
   159f8:	cmp	r0, #0
   159fc:	bne	15a54 <__assert_fail@plt+0x4ae0>
   15a00:	ldr	r0, [r8, #24]
   15a04:	ldrb	r0, [r0]
   15a08:	cmp	r0, #47	; 0x2f
   15a0c:	beq	15a54 <__assert_fail@plt+0x4ae0>
   15a10:	ldr	r0, [r9, #48]	; 0x30
   15a14:	tst	r0, #4
   15a18:	bne	15a54 <__assert_fail@plt+0x4ae0>
   15a1c:	mov	r1, #32768	; 0x8000
   15a20:	tst	r0, #512	; 0x200
   15a24:	and	r1, r1, r0, lsl #11
   15a28:	orr	r1, r1, #18688	; 0x4900
   15a2c:	orr	r2, r1, #524288	; 0x80000
   15a30:	bne	15a74 <__assert_fail@plt+0x4b00>
   15a34:	movw	r0, #36267	; 0x8dab
   15a38:	mov	r1, r2
   15a3c:	movt	r0, #1
   15a40:	bl	18984 <__assert_fail@plt+0x7a10>
   15a44:	mov	r8, r0
   15a48:	cmn	r0, #1
   15a4c:	bgt	15a90 <__assert_fail@plt+0x4b1c>
   15a50:	b	15ad8 <__assert_fail@plt+0x4b64>
   15a54:	mov	r0, r9
   15a58:	mov	r1, r4
   15a5c:	bl	14c90 <__assert_fail@plt+0x3d1c>
   15a60:	mov	r5, r0
   15a64:	str	r0, [r9, #4]
   15a68:	mov	r0, r5
   15a6c:	sub	sp, fp, #28
   15a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a74:	ldr	r0, [r9, #32]
   15a78:	movw	r1, #36267	; 0x8dab
   15a7c:	movt	r1, #1
   15a80:	bl	184f4 <__assert_fail@plt+0x7580>
   15a84:	mov	r8, r0
   15a88:	cmn	r0, #1
   15a8c:	ble	15ad8 <__assert_fail@plt+0x4b64>
   15a90:	mov	r0, r9
   15a94:	mov	r1, r4
   15a98:	bl	14c90 <__assert_fail@plt+0x3d1c>
   15a9c:	str	r0, [r9, #4]
   15aa0:	ldrb	r0, [r9, #49]	; 0x31
   15aa4:	tst	r0, #2
   15aa8:	bne	15aec <__assert_fail@plt+0x4b78>
   15aac:	mov	r0, r8
   15ab0:	bl	10efc <fchdir@plt>
   15ab4:	cmp	r0, #0
   15ab8:	beq	15b28 <__assert_fail@plt+0x4bb4>
   15abc:	ldr	r4, [sl]
   15ac0:	mov	r0, r8
   15ac4:	bl	10f44 <close@plt>
   15ac8:	str	r4, [sl]
   15acc:	mov	r0, r5
   15ad0:	sub	sp, fp, #28
   15ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad8:	mov	r5, #0
   15adc:	str	r5, [r9, #4]
   15ae0:	mov	r0, r5
   15ae4:	sub	sp, fp, #28
   15ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aec:	ldr	r1, [r9, #32]
   15af0:	cmp	r1, r8
   15af4:	bne	15b00 <__assert_fail@plt+0x4b8c>
   15af8:	cmn	r1, #100	; 0x64
   15afc:	bne	15b40 <__assert_fail@plt+0x4bcc>
   15b00:	add	r0, r9, #60	; 0x3c
   15b04:	bl	183b8 <__assert_fail@plt+0x7444>
   15b08:	cmp	r0, #0
   15b0c:	blt	15b14 <__assert_fail@plt+0x4ba0>
   15b10:	bl	10f44 <close@plt>
   15b14:	str	r8, [r9, #32]
   15b18:	ldr	r5, [r9, #4]
   15b1c:	mov	r0, r5
   15b20:	sub	sp, fp, #28
   15b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b28:	mov	r0, r8
   15b2c:	bl	10f44 <close@plt>
   15b30:	ldr	r5, [r9, #4]
   15b34:	mov	r0, r5
   15b38:	sub	sp, fp, #28
   15b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b40:	bl	10f38 <abort@plt>
   15b44:	push	{fp, lr}
   15b48:	mov	fp, sp
   15b4c:	mov	r2, r1
   15b50:	ldrd	r0, [r0, #8]
   15b54:	mov	r3, #0
   15b58:	bl	18aac <__assert_fail@plt+0x7b38>
   15b5c:	mov	r0, r2
   15b60:	pop	{fp, pc}
   15b64:	push	{r4, r5, fp, lr}
   15b68:	add	fp, sp, #8
   15b6c:	ldrd	r2, [r1, #8]
   15b70:	ldrd	r4, [r0, #8]
   15b74:	eor	r3, r5, r3
   15b78:	eor	r2, r4, r2
   15b7c:	orrs	r2, r2, r3
   15b80:	mov	r2, #0
   15b84:	bne	15ba4 <__assert_fail@plt+0x4c30>
   15b88:	ldrd	r2, [r1]
   15b8c:	ldrd	r0, [r0]
   15b90:	eor	r1, r1, r3
   15b94:	eor	r0, r0, r2
   15b98:	orr	r0, r0, r1
   15b9c:	clz	r0, r0
   15ba0:	lsr	r2, r0, #5
   15ba4:	mov	r0, r2
   15ba8:	pop	{r4, r5, fp, pc}
   15bac:	push	{r4, r5, fp, lr}
   15bb0:	add	fp, sp, #8
   15bb4:	ldr	r0, [r0]
   15bb8:	ldrd	r2, [r0, #160]	; 0xa0
   15bbc:	ldr	r0, [r1]
   15bc0:	ldrd	r4, [r0, #160]	; 0xa0
   15bc4:	mov	r0, #0
   15bc8:	subs	r1, r4, r2
   15bcc:	sbcs	r1, r5, r3
   15bd0:	movwcc	r0, #1
   15bd4:	subs	r1, r2, r4
   15bd8:	sbcs	r1, r3, r5
   15bdc:	subcc	r0, r0, #1
   15be0:	pop	{r4, r5, fp, pc}
   15be4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15be8:	add	fp, sp, #24
   15bec:	sub	sp, sp, #96	; 0x60
   15bf0:	ldr	r7, [r0, #44]	; 0x2c
   15bf4:	mov	r4, r0
   15bf8:	mov	r5, #0
   15bfc:	ldrb	r0, [r7, #49]	; 0x31
   15c00:	tst	r0, #2
   15c04:	beq	15cb4 <__assert_fail@plt+0x4d40>
   15c08:	ldr	r6, [r7, #52]	; 0x34
   15c0c:	mov	r9, r1
   15c10:	cmp	r6, #0
   15c14:	bne	15c54 <__assert_fail@plt+0x4ce0>
   15c18:	movw	r0, #13720	; 0x3598
   15c1c:	movw	r2, #23840	; 0x5d20
   15c20:	movw	r3, #23872	; 0x5d40
   15c24:	mov	r1, #0
   15c28:	mov	r8, #0
   15c2c:	movt	r0, #1
   15c30:	movt	r2, #1
   15c34:	movt	r3, #1
   15c38:	str	r0, [sp]
   15c3c:	mov	r0, #13
   15c40:	bl	17458 <__assert_fail@plt+0x64e4>
   15c44:	mov	r6, r0
   15c48:	cmp	r0, #0
   15c4c:	str	r0, [r7, #52]	; 0x34
   15c50:	beq	15c94 <__assert_fail@plt+0x4d20>
   15c54:	ldrd	r0, [r4, #64]	; 0x40
   15c58:	str	r1, [sp, #12]
   15c5c:	str	r0, [sp, #8]
   15c60:	add	r1, sp, #8
   15c64:	mov	r0, r6
   15c68:	bl	17190 <__assert_fail@plt+0x621c>
   15c6c:	cmp	r0, #0
   15c70:	beq	15c84 <__assert_fail@plt+0x4d10>
   15c74:	ldr	r5, [r0, #8]
   15c78:	mov	r0, r5
   15c7c:	sub	sp, fp, #24
   15c80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c84:	mov	r8, #1
   15c88:	cmp	r9, #0
   15c8c:	bge	15ca0 <__assert_fail@plt+0x4d2c>
   15c90:	b	15cb4 <__assert_fail@plt+0x4d40>
   15c94:	mov	r6, #0
   15c98:	cmp	r9, #0
   15c9c:	blt	15cb4 <__assert_fail@plt+0x4d40>
   15ca0:	add	r1, sp, #8
   15ca4:	mov	r0, r9
   15ca8:	bl	10cf8 <fstatfs64@plt>
   15cac:	cmp	r0, #0
   15cb0:	beq	15cc0 <__assert_fail@plt+0x4d4c>
   15cb4:	mov	r0, r5
   15cb8:	sub	sp, fp, #24
   15cbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15cc0:	cmp	r8, #0
   15cc4:	beq	15d10 <__assert_fail@plt+0x4d9c>
   15cc8:	mov	r0, #16
   15ccc:	bl	1862c <__assert_fail@plt+0x76b8>
   15cd0:	cmp	r0, #0
   15cd4:	beq	15d10 <__assert_fail@plt+0x4d9c>
   15cd8:	mov	r5, r0
   15cdc:	ldrd	r0, [r4, #64]	; 0x40
   15ce0:	ldr	r2, [sp, #8]
   15ce4:	stm	r5, {r0, r1, r2}
   15ce8:	mov	r0, r6
   15cec:	mov	r1, r5
   15cf0:	bl	18090 <__assert_fail@plt+0x711c>
   15cf4:	cmp	r0, #0
   15cf8:	beq	15d08 <__assert_fail@plt+0x4d94>
   15cfc:	cmp	r0, r5
   15d00:	beq	15d10 <__assert_fail@plt+0x4d9c>
   15d04:	bl	10f38 <abort@plt>
   15d08:	mov	r0, r5
   15d0c:	bl	13598 <__assert_fail@plt+0x2624>
   15d10:	ldr	r5, [sp, #8]
   15d14:	mov	r0, r5
   15d18:	sub	sp, fp, #24
   15d1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15d20:	push	{fp, lr}
   15d24:	mov	fp, sp
   15d28:	mov	r2, r1
   15d2c:	ldrd	r0, [r0]
   15d30:	mov	r3, #0
   15d34:	bl	18aac <__assert_fail@plt+0x7b38>
   15d38:	mov	r0, r2
   15d3c:	pop	{fp, pc}
   15d40:	ldrd	r2, [r1]
   15d44:	ldrd	r0, [r0]
   15d48:	eor	r1, r1, r3
   15d4c:	eor	r0, r0, r2
   15d50:	orr	r0, r0, r1
   15d54:	clz	r0, r0
   15d58:	lsr	r0, r0, #5
   15d5c:	bx	lr
   15d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d64:	add	fp, sp, #28
   15d68:	sub	sp, sp, #68	; 0x44
   15d6c:	mvn	r6, #0
   15d70:	cmp	r0, #1
   15d74:	blt	164e0 <__assert_fail@plt+0x556c>
   15d78:	mov	r7, r2
   15d7c:	ldr	r2, [fp, #16]
   15d80:	mov	r5, r3
   15d84:	mov	r3, r0
   15d88:	mov	sl, r1
   15d8c:	mov	r0, #0
   15d90:	ldr	r9, [r2]
   15d94:	ldr	r6, [r2, #4]
   15d98:	str	r0, [r2, #12]
   15d9c:	cmp	r9, #0
   15da0:	beq	15dc4 <__assert_fail@plt+0x4e50>
   15da4:	ldr	r0, [r2, #16]
   15da8:	cmp	r0, #0
   15dac:	beq	15dcc <__assert_fail@plt+0x4e58>
   15db0:	ldrb	r0, [r7]
   15db4:	cmp	r0, #45	; 0x2d
   15db8:	cmpne	r0, #43	; 0x2b
   15dbc:	addeq	r7, r7, #1
   15dc0:	b	15e40 <__assert_fail@plt+0x4ecc>
   15dc4:	mov	r9, #1
   15dc8:	str	r9, [r2]
   15dcc:	mov	r0, #0
   15dd0:	str	r9, [r2, #28]
   15dd4:	str	r9, [r2, #32]
   15dd8:	str	r0, [r2, #20]
   15ddc:	ldrb	r1, [r7]
   15de0:	cmp	r1, #43	; 0x2b
   15de4:	beq	15df4 <__assert_fail@plt+0x4e80>
   15de8:	cmp	r1, #45	; 0x2d
   15dec:	bne	15e00 <__assert_fail@plt+0x4e8c>
   15df0:	mov	r0, #2
   15df4:	str	r0, [r2, #24]
   15df8:	add	r7, r7, #1
   15dfc:	b	15e38 <__assert_fail@plt+0x4ec4>
   15e00:	ldr	r0, [fp, #20]
   15e04:	cmp	r0, #0
   15e08:	bne	15e30 <__assert_fail@plt+0x4ebc>
   15e0c:	movw	r0, #36396	; 0x8e2c
   15e10:	mov	r8, r2
   15e14:	mov	r4, r3
   15e18:	movt	r0, #1
   15e1c:	bl	10e00 <getenv@plt>
   15e20:	mov	r3, r4
   15e24:	mov	r2, r8
   15e28:	cmp	r0, #0
   15e2c:	beq	164ec <__assert_fail@plt+0x5578>
   15e30:	mov	r0, #0
   15e34:	str	r0, [r2, #24]
   15e38:	mov	r0, #1
   15e3c:	str	r0, [r2, #16]
   15e40:	ldrb	r0, [r7]
   15e44:	ldr	r4, [r2, #20]
   15e48:	str	r5, [sp, #48]	; 0x30
   15e4c:	subs	r0, r0, #58	; 0x3a
   15e50:	movne	r0, r6
   15e54:	cmp	r4, #0
   15e58:	str	r0, [fp, #-44]	; 0xffffffd4
   15e5c:	ldrbne	r0, [r4]
   15e60:	cmpne	r0, #0
   15e64:	bne	15efc <__assert_fail@plt+0x4f88>
   15e68:	mov	r4, r2
   15e6c:	mov	r6, r2
   15e70:	str	r7, [sp, #32]
   15e74:	ldr	r1, [r4, #32]!
   15e78:	cmp	r1, r9
   15e7c:	mov	r8, r1
   15e80:	strgt	r9, [r4]
   15e84:	movgt	r8, r9
   15e88:	ldr	r5, [r6, #28]!
   15e8c:	cmp	r5, r9
   15e90:	strgt	r9, [r6]
   15e94:	movgt	r5, r9
   15e98:	ldr	r7, [r2, #24]
   15e9c:	cmp	r7, #1
   15ea0:	bne	161e0 <__assert_fail@plt+0x526c>
   15ea4:	cmp	r5, r8
   15ea8:	cmpne	r8, r9
   15eac:	bne	15fc4 <__assert_fail@plt+0x5050>
   15eb0:	cmp	r8, r9
   15eb4:	mov	r1, r6
   15eb8:	mov	r0, r9
   15ebc:	bne	161c4 <__assert_fail@plt+0x5250>
   15ec0:	mov	r8, r9
   15ec4:	cmp	r9, r3
   15ec8:	bge	161d8 <__assert_fail@plt+0x5264>
   15ecc:	ldr	r0, [sl, r8, lsl #2]
   15ed0:	ldrb	r1, [r0]
   15ed4:	cmp	r1, #45	; 0x2d
   15ed8:	bne	15ee8 <__assert_fail@plt+0x4f74>
   15edc:	ldrb	r0, [r0, #1]
   15ee0:	cmp	r0, #0
   15ee4:	bne	161d8 <__assert_fail@plt+0x5264>
   15ee8:	add	r8, r8, #1
   15eec:	cmp	r8, r3
   15ef0:	str	r8, [r2]
   15ef4:	blt	15ecc <__assert_fail@plt+0x4f58>
   15ef8:	b	161d8 <__assert_fail@plt+0x5264>
   15efc:	str	r3, [fp, #-40]	; 0xffffffd8
   15f00:	add	r8, r4, #1
   15f04:	mov	r0, r7
   15f08:	mov	r5, r2
   15f0c:	str	r8, [r2, #20]
   15f10:	ldrb	r6, [r4]
   15f14:	mov	r1, r6
   15f18:	bl	10e54 <strchr@plt>
   15f1c:	ldrb	r1, [r4, #1]
   15f20:	mov	r3, r5
   15f24:	cmp	r1, #0
   15f28:	orr	r1, r6, #1
   15f2c:	addeq	r9, r9, #1
   15f30:	streq	r9, [r5]
   15f34:	cmp	r1, #59	; 0x3b
   15f38:	cmpne	r0, #0
   15f3c:	bne	15f60 <__assert_fail@plt+0x4fec>
   15f40:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15f44:	cmp	r0, #0
   15f48:	bne	165ac <__assert_fail@plt+0x5638>
   15f4c:	str	r6, [r3, #8]
   15f50:	mov	r6, #63	; 0x3f
   15f54:	mov	r0, r6
   15f58:	sub	sp, fp, #28
   15f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f60:	ldrb	r2, [r0]
   15f64:	ldrb	r1, [r0, #1]
   15f68:	cmp	r2, #87	; 0x57
   15f6c:	bne	162c8 <__assert_fail@plt+0x5354>
   15f70:	ldr	r2, [sp, #48]	; 0x30
   15f74:	cmp	r2, #0
   15f78:	beq	162c8 <__assert_fail@plt+0x5354>
   15f7c:	cmp	r1, #59	; 0x3b
   15f80:	bne	162c8 <__assert_fail@plt+0x5354>
   15f84:	ldrb	r0, [r8]
   15f88:	cmp	r0, #0
   15f8c:	bne	165dc <__assert_fail@plt+0x5668>
   15f90:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15f94:	cmp	r9, r0
   15f98:	bne	165d8 <__assert_fail@plt+0x5664>
   15f9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15fa0:	cmp	r0, #0
   15fa4:	bne	1666c <__assert_fail@plt+0x56f8>
   15fa8:	str	r6, [r3, #8]
   15fac:	ldrb	r6, [r7]
   15fb0:	cmp	r6, #58	; 0x3a
   15fb4:	movwne	r6, #63	; 0x3f
   15fb8:	mov	r0, r6
   15fbc:	sub	sp, fp, #28
   15fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fc4:	cmp	r9, r8
   15fc8:	str	r7, [sp, #20]
   15fcc:	str	r6, [sp, #24]
   15fd0:	str	r5, [sp, #36]	; 0x24
   15fd4:	str	r4, [sp, #28]
   15fd8:	str	r3, [fp, #-40]	; 0xffffffd8
   15fdc:	ble	1619c <__assert_fail@plt+0x5228>
   15fe0:	ldr	r0, [sp, #36]	; 0x24
   15fe4:	cmp	r0, r8
   15fe8:	bge	1619c <__assert_fail@plt+0x5228>
   15fec:	add	r0, sl, r8, lsl #2
   15ff0:	mvn	r1, r1
   15ff4:	ldr	r2, [sp, #36]	; 0x24
   15ff8:	mov	r3, r9
   15ffc:	str	r0, [fp, #-32]	; 0xffffffe0
   16000:	mvn	r0, r9
   16004:	cmp	r0, r1
   16008:	movgt	r1, r0
   1600c:	add	r0, r1, #1
   16010:	str	r1, [fp, #-36]	; 0xffffffdc
   16014:	str	r0, [sp, #44]	; 0x2c
   16018:	add	r0, sl, #4
   1601c:	str	r0, [sp, #40]	; 0x28
   16020:	sub	ip, r8, r2
   16024:	sub	r7, r3, r8
   16028:	cmp	r7, ip
   1602c:	ble	160e8 <__assert_fail@plt+0x5174>
   16030:	sub	r4, r3, ip
   16034:	cmp	ip, #1
   16038:	blt	160d4 <__assert_fail@plt+0x5160>
   1603c:	mov	r7, #0
   16040:	cmp	ip, #4
   16044:	bcc	1609c <__assert_fail@plt+0x5128>
   16048:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1604c:	ldr	r1, [sp, #40]	; 0x28
   16050:	add	lr, sl, r2, lsl #2
   16054:	add	r0, r0, r3
   16058:	add	r0, r0, r2
   1605c:	add	r0, r1, r0, lsl #2
   16060:	add	r1, sl, r3, lsl #2
   16064:	cmp	lr, r1
   16068:	ldrcc	r1, [fp, #-32]	; 0xffffffe0
   1606c:	cmpcc	r0, r1
   16070:	bcc	1609c <__assert_fail@plt+0x5128>
   16074:	bic	r7, ip, #3
   16078:	mov	r1, r7
   1607c:	vld1.32	{d16-d17}, [r0]
   16080:	vld1.32	{d18-d19}, [lr]
   16084:	subs	r1, r1, #4
   16088:	vst1.32	{d16-d17}, [lr]!
   1608c:	vst1.32	{d18-d19}, [r0]!
   16090:	bne	1607c <__assert_fail@plt+0x5108>
   16094:	cmp	ip, r7
   16098:	beq	160d4 <__assert_fail@plt+0x5160>
   1609c:	add	r0, sl, r3, lsl #2
   160a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   160a4:	add	r1, r7, r2
   160a8:	add	r1, sl, r1, lsl #2
   160ac:	add	r3, r3, r7
   160b0:	add	r3, r3, r2
   160b4:	add	r7, r0, r3, lsl #2
   160b8:	ldr	r5, [r1]
   160bc:	add	r3, r3, #1
   160c0:	ldr	r6, [r7, #4]
   160c4:	cmn	r3, #1
   160c8:	str	r6, [r1], #4
   160cc:	str	r5, [r7, #4]
   160d0:	bne	160b4 <__assert_fail@plt+0x5140>
   160d4:	mov	r3, r4
   160d8:	cmp	r3, r8
   160dc:	cmpgt	r8, r2
   160e0:	bgt	16020 <__assert_fail@plt+0x50ac>
   160e4:	b	1619c <__assert_fail@plt+0x5228>
   160e8:	cmp	r7, #1
   160ec:	blt	1618c <__assert_fail@plt+0x5218>
   160f0:	mov	r4, #0
   160f4:	cmp	r7, #3
   160f8:	bls	16158 <__assert_fail@plt+0x51e4>
   160fc:	add	r1, sl, r3, lsl #2
   16100:	add	r0, sl, r2, lsl #2
   16104:	cmp	r0, r1
   16108:	bcs	1612c <__assert_fail@plt+0x51b8>
   1610c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16110:	ldr	r6, [sp, #40]	; 0x28
   16114:	add	r1, r1, r3
   16118:	add	r1, r1, r2
   1611c:	add	r1, r6, r1, lsl #2
   16120:	ldr	r6, [fp, #-32]	; 0xffffffe0
   16124:	cmp	r6, r1
   16128:	bcc	16158 <__assert_fail@plt+0x51e4>
   1612c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   16130:	bic	r4, r7, #3
   16134:	mov	r1, r4
   16138:	vld1.32	{d16-d17}, [r6]
   1613c:	vld1.32	{d18-d19}, [r0]
   16140:	subs	r1, r1, #4
   16144:	vst1.32	{d16-d17}, [r0]!
   16148:	vst1.32	{d18-d19}, [r6]!
   1614c:	bne	16138 <__assert_fail@plt+0x51c4>
   16150:	cmp	r7, r4
   16154:	beq	1618c <__assert_fail@plt+0x5218>
   16158:	ldr	r1, [sp, #44]	; 0x2c
   1615c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16160:	add	r6, r4, r2
   16164:	add	r1, r1, r3
   16168:	add	r0, r0, r4, lsl #2
   1616c:	sub	r1, r1, r4
   16170:	add	r4, sl, r6, lsl #2
   16174:	ldr	r6, [r4]
   16178:	ldr	r5, [r0]
   1617c:	subs	r1, r1, #1
   16180:	str	r5, [r4], #4
   16184:	str	r6, [r0], #4
   16188:	bne	16174 <__assert_fail@plt+0x5200>
   1618c:	add	r2, r7, r2
   16190:	cmp	r3, r8
   16194:	cmpgt	r8, r2
   16198:	bgt	16020 <__assert_fail@plt+0x50ac>
   1619c:	ldr	r0, [sp, #36]	; 0x24
   161a0:	ldr	r4, [sp, #28]
   161a4:	ldr	r6, [sp, #24]
   161a8:	ldr	r2, [fp, #16]
   161ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161b0:	ldr	r7, [sp, #20]
   161b4:	add	r0, r0, r9
   161b8:	mov	r1, r4
   161bc:	sub	r0, r0, r8
   161c0:	str	r0, [r6]
   161c4:	mov	r5, r0
   161c8:	str	r9, [r1]
   161cc:	mov	r8, r9
   161d0:	cmp	r9, r3
   161d4:	blt	15ecc <__assert_fail@plt+0x4f58>
   161d8:	mov	r9, r8
   161dc:	str	r8, [r4]
   161e0:	cmp	r9, r3
   161e4:	beq	164d4 <__assert_fail@plt+0x5560>
   161e8:	ldr	r0, [sl, r9, lsl #2]
   161ec:	movw	r1, #36320	; 0x8de0
   161f0:	str	r3, [fp, #-40]	; 0xffffffd8
   161f4:	movt	r1, #1
   161f8:	bl	10d1c <strcmp@plt>
   161fc:	cmp	r0, #0
   16200:	beq	16298 <__assert_fail@plt+0x5324>
   16204:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16208:	ldr	r2, [fp, #16]
   1620c:	cmp	r9, r3
   16210:	beq	164d4 <__assert_fail@plt+0x5560>
   16214:	ldr	r0, [sl, r9, lsl #2]
   16218:	mvn	r6, #0
   1621c:	ldrb	r1, [r0]
   16220:	cmp	r1, #45	; 0x2d
   16224:	bne	162f0 <__assert_fail@plt+0x537c>
   16228:	mov	r4, r0
   1622c:	ldrb	r1, [r4, #1]!
   16230:	cmp	r1, #0
   16234:	beq	162f0 <__assert_fail@plt+0x537c>
   16238:	ldr	r6, [sp, #48]	; 0x30
   1623c:	cmp	r6, #0
   16240:	beq	1650c <__assert_fail@plt+0x5598>
   16244:	ldr	r5, [fp, #12]
   16248:	ldr	r7, [sp, #32]
   1624c:	cmp	r1, #45	; 0x2d
   16250:	bne	16514 <__assert_fail@plt+0x55a0>
   16254:	add	r0, r0, #2
   16258:	mov	r1, sl
   1625c:	str	r0, [r2, #20]
   16260:	ldr	r0, [fp, #8]
   16264:	stm	sp, {r0, r5}
   16268:	str	r2, [sp, #8]
   1626c:	mov	r2, r7
   16270:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16274:	str	r0, [sp, #12]
   16278:	movw	r0, #36320	; 0x8de0
   1627c:	movt	r0, #1
   16280:	str	r0, [sp, #16]
   16284:	mov	r0, r3
   16288:	mov	r3, r6
   1628c:	bl	166c4 <__assert_fail@plt+0x5750>
   16290:	sub	sp, fp, #28
   16294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16298:	ldr	r2, [fp, #16]
   1629c:	add	r3, r9, #1
   162a0:	cmp	r5, r8
   162a4:	cmpne	r8, r3
   162a8:	str	r3, [r2]
   162ac:	bne	16310 <__assert_fail@plt+0x539c>
   162b0:	cmp	r5, r8
   162b4:	ldr	r8, [fp, #-40]	; 0xffffffd8
   162b8:	mov	r1, r6
   162bc:	mov	r0, r3
   162c0:	beq	164c4 <__assert_fail@plt+0x5550>
   162c4:	b	164cc <__assert_fail@plt+0x5558>
   162c8:	cmp	r1, #58	; 0x3a
   162cc:	bne	164e0 <__assert_fail@plt+0x556c>
   162d0:	ldrb	r0, [r0, #2]
   162d4:	ldrb	r1, [r8]
   162d8:	cmp	r0, #58	; 0x3a
   162dc:	bne	164f4 <__assert_fail@plt+0x5580>
   162e0:	cmp	r1, #0
   162e4:	bne	164fc <__assert_fail@plt+0x5588>
   162e8:	mov	r0, #0
   162ec:	b	16634 <__assert_fail@plt+0x56c0>
   162f0:	cmp	r7, #0
   162f4:	strne	r0, [r2, #12]
   162f8:	addne	r0, r9, #1
   162fc:	movne	r6, #1
   16300:	strne	r0, [r2]
   16304:	mov	r0, r6
   16308:	sub	sp, fp, #28
   1630c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16310:	cmp	r9, r8
   16314:	str	r3, [fp, #-36]	; 0xffffffdc
   16318:	str	r6, [sp, #24]
   1631c:	str	r5, [sp, #36]	; 0x24
   16320:	str	r4, [sp, #28]
   16324:	blt	164a0 <__assert_fail@plt+0x552c>
   16328:	ldr	r0, [sp, #36]	; 0x24
   1632c:	cmp	r0, r8
   16330:	bge	164a0 <__assert_fail@plt+0x552c>
   16334:	sub	r0, sl, r8, lsl #2
   16338:	ldr	r7, [sp, #36]	; 0x24
   1633c:	add	r9, sl, r8, lsl #2
   16340:	str	r0, [fp, #-44]	; 0xffffffd4
   16344:	rsb	r0, r8, #0
   16348:	str	r0, [fp, #-32]	; 0xffffffe0
   1634c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16350:	sub	r4, r8, r7
   16354:	sub	r3, r0, r8
   16358:	cmp	r3, r4
   1635c:	ble	163fc <__assert_fail@plt+0x5488>
   16360:	sub	r3, r0, r4
   16364:	cmp	r4, #1
   16368:	blt	163e8 <__assert_fail@plt+0x5474>
   1636c:	mov	r1, #0
   16370:	cmp	r4, #4
   16374:	bcc	163b8 <__assert_fail@plt+0x5444>
   16378:	add	r2, sl, r0, lsl #2
   1637c:	add	lr, sl, r7, lsl #2
   16380:	add	ip, sl, r3, lsl #2
   16384:	cmp	lr, r2
   16388:	cmpcc	ip, r9
   1638c:	bcc	163b8 <__assert_fail@plt+0x5444>
   16390:	bic	r1, r4, #3
   16394:	mov	r2, r1
   16398:	vld1.32	{d16-d17}, [ip]
   1639c:	vld1.32	{d18-d19}, [lr]
   163a0:	subs	r2, r2, #4
   163a4:	vst1.32	{d16-d17}, [lr]!
   163a8:	vst1.32	{d18-d19}, [ip]!
   163ac:	bne	16398 <__assert_fail@plt+0x5424>
   163b0:	cmp	r4, r1
   163b4:	beq	163e8 <__assert_fail@plt+0x5474>
   163b8:	add	r0, r7, r0
   163bc:	sub	r2, r8, r1
   163c0:	add	r1, r1, r7
   163c4:	add	r1, sl, r1, lsl #2
   163c8:	add	r0, sl, r0, lsl #2
   163cc:	ldr	r6, [r0, -r2, lsl #2]
   163d0:	ldr	r5, [r1]
   163d4:	str	r6, [r1], #4
   163d8:	str	r5, [r0, -r2, lsl #2]
   163dc:	sub	r2, r2, #1
   163e0:	cmp	r7, r2
   163e4:	bne	163cc <__assert_fail@plt+0x5458>
   163e8:	mov	r0, r3
   163ec:	cmp	r0, r8
   163f0:	cmpgt	r8, r7
   163f4:	bgt	16350 <__assert_fail@plt+0x53dc>
   163f8:	b	164a0 <__assert_fail@plt+0x552c>
   163fc:	cmp	r3, #1
   16400:	blt	16490 <__assert_fail@plt+0x551c>
   16404:	mov	r4, #0
   16408:	cmp	r3, #3
   1640c:	bls	1645c <__assert_fail@plt+0x54e8>
   16410:	add	r2, sl, r0, lsl #2
   16414:	add	r1, sl, r7, lsl #2
   16418:	cmp	r1, r2
   1641c:	ldrcc	r6, [fp, #-44]	; 0xffffffd4
   16420:	addcc	r2, r7, r0
   16424:	addcc	r2, r6, r2, lsl #2
   16428:	cmpcc	r9, r2
   1642c:	bcc	1645c <__assert_fail@plt+0x54e8>
   16430:	bic	r4, r3, #3
   16434:	mov	r6, r9
   16438:	mov	r2, r4
   1643c:	vld1.32	{d16-d17}, [r6]
   16440:	vld1.32	{d18-d19}, [r1]
   16444:	subs	r2, r2, #4
   16448:	vst1.32	{d16-d17}, [r1]!
   1644c:	vst1.32	{d18-d19}, [r6]!
   16450:	bne	1643c <__assert_fail@plt+0x54c8>
   16454:	cmp	r3, r4
   16458:	beq	16490 <__assert_fail@plt+0x551c>
   1645c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16460:	add	r2, r4, r7
   16464:	add	r6, r8, r4
   16468:	add	r2, sl, r2, lsl #2
   1646c:	add	r1, r1, r0
   16470:	sub	r1, r1, r4
   16474:	add	r4, sl, r6, lsl #2
   16478:	ldr	r6, [r2]
   1647c:	ldr	r5, [r4]
   16480:	subs	r1, r1, #1
   16484:	str	r5, [r2], #4
   16488:	str	r6, [r4], #4
   1648c:	bne	16478 <__assert_fail@plt+0x5504>
   16490:	add	r7, r3, r7
   16494:	cmp	r0, r8
   16498:	cmpgt	r8, r7
   1649c:	bgt	16350 <__assert_fail@plt+0x53dc>
   164a0:	ldr	r0, [sp, #36]	; 0x24
   164a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   164a8:	ldr	r1, [sp, #24]
   164ac:	ldr	r2, [fp, #16]
   164b0:	add	r0, r0, r3
   164b4:	sub	r0, r0, r8
   164b8:	ldr	r8, [fp, #-40]	; 0xffffffd8
   164bc:	str	r0, [r1]
   164c0:	ldr	r1, [sp, #28]
   164c4:	mov	r5, r0
   164c8:	str	r3, [r1]
   164cc:	str	r8, [r2]
   164d0:	str	r8, [r2, #32]
   164d4:	cmp	r5, r8
   164d8:	mvn	r6, #0
   164dc:	strne	r5, [r2]
   164e0:	mov	r0, r6
   164e4:	sub	sp, fp, #28
   164e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ec:	mov	r0, #1
   164f0:	b	15e34 <__assert_fail@plt+0x4ec0>
   164f4:	cmp	r1, #0
   164f8:	beq	16580 <__assert_fail@plt+0x560c>
   164fc:	add	r0, r9, #1
   16500:	str	r8, [r3, #12]
   16504:	str	r0, [r3]
   16508:	b	16638 <__assert_fail@plt+0x56c4>
   1650c:	ldr	r7, [sp, #32]
   16510:	b	16664 <__assert_fail@plt+0x56f0>
   16514:	cmp	r5, #0
   16518:	beq	16664 <__assert_fail@plt+0x56f0>
   1651c:	ldrb	r0, [r0, #2]
   16520:	cmp	r0, #0
   16524:	beq	1664c <__assert_fail@plt+0x56d8>
   16528:	ldr	r1, [fp, #8]
   1652c:	str	r4, [r2, #20]
   16530:	movw	r0, #36321	; 0x8de1
   16534:	movt	r0, #1
   16538:	stm	sp, {r1, r5}
   1653c:	str	r2, [sp, #8]
   16540:	str	r0, [sp, #16]
   16544:	mov	r0, r3
   16548:	mov	r2, r7
   1654c:	mov	r3, r6
   16550:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16554:	str	r1, [sp, #12]
   16558:	mov	r1, sl
   1655c:	bl	166c4 <__assert_fail@plt+0x5750>
   16560:	ldr	r2, [fp, #16]
   16564:	mov	r6, r0
   16568:	cmn	r0, #1
   1656c:	bne	164e0 <__assert_fail@plt+0x556c>
   16570:	ldr	r9, [r2]
   16574:	ldr	r0, [sl, r9, lsl #2]
   16578:	add	r4, r0, #1
   1657c:	b	16664 <__assert_fail@plt+0x56f0>
   16580:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16584:	cmp	r9, r0
   16588:	bne	16628 <__assert_fail@plt+0x56b4>
   1658c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16590:	cmp	r0, #0
   16594:	bne	16698 <__assert_fail@plt+0x5724>
   16598:	str	r6, [r3, #8]
   1659c:	ldrb	r6, [r7]
   165a0:	cmp	r6, #58	; 0x3a
   165a4:	movwne	r6, #63	; 0x3f
   165a8:	b	16638 <__assert_fail@plt+0x56c4>
   165ac:	movw	r0, #41240	; 0xa118
   165b0:	ldr	r2, [sl]
   165b4:	movw	r1, #36323	; 0x8de3
   165b8:	mov	r4, r3
   165bc:	mov	r3, r6
   165c0:	movt	r0, #2
   165c4:	movt	r1, #1
   165c8:	ldr	r0, [r0]
   165cc:	bl	10e6c <fprintf@plt>
   165d0:	mov	r3, r4
   165d4:	b	15f4c <__assert_fail@plt+0x4fd8>
   165d8:	ldr	r8, [sl, r9, lsl #2]
   165dc:	ldr	r2, [fp, #8]
   165e0:	mov	r0, #0
   165e4:	str	r8, [r3, #12]
   165e8:	movw	r1, #36392	; 0x8e28
   165ec:	str	r0, [r3, #12]
   165f0:	str	r8, [r3, #20]
   165f4:	movt	r1, #1
   165f8:	str	r2, [sp]
   165fc:	stmib	sp, {r0, r3}
   16600:	str	r1, [sp, #16]
   16604:	mov	r1, sl
   16608:	mov	r2, r7
   1660c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16610:	ldr	r3, [sp, #48]	; 0x30
   16614:	str	r0, [sp, #12]
   16618:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1661c:	bl	166c4 <__assert_fail@plt+0x5750>
   16620:	sub	sp, fp, #28
   16624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16628:	add	r0, r9, #1
   1662c:	str	r0, [r3]
   16630:	ldr	r0, [sl, r9, lsl #2]
   16634:	str	r0, [r3, #12]
   16638:	mov	r0, #0
   1663c:	str	r0, [r3, #20]
   16640:	mov	r0, r6
   16644:	sub	sp, fp, #28
   16648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1664c:	mov	r0, r7
   16650:	bl	10e54 <strchr@plt>
   16654:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16658:	ldr	r2, [fp, #16]
   1665c:	cmp	r0, #0
   16660:	beq	16528 <__assert_fail@plt+0x55b4>
   16664:	str	r4, [r2, #20]
   16668:	b	15f00 <__assert_fail@plt+0x4f8c>
   1666c:	movw	r0, #41240	; 0xa118
   16670:	ldr	r2, [sl]
   16674:	movw	r1, #36351	; 0x8dff
   16678:	mov	r4, r3
   1667c:	mov	r3, r6
   16680:	movt	r0, #2
   16684:	movt	r1, #1
   16688:	ldr	r0, [r0]
   1668c:	bl	10e6c <fprintf@plt>
   16690:	mov	r3, r4
   16694:	b	15fa8 <__assert_fail@plt+0x5034>
   16698:	movw	r0, #41240	; 0xa118
   1669c:	ldr	r2, [sl]
   166a0:	movw	r1, #36351	; 0x8dff
   166a4:	mov	r4, r3
   166a8:	mov	r3, r6
   166ac:	movt	r0, #2
   166b0:	movt	r1, #1
   166b4:	ldr	r0, [r0]
   166b8:	bl	10e6c <fprintf@plt>
   166bc:	mov	r3, r4
   166c0:	b	16598 <__assert_fail@plt+0x5624>
   166c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166c8:	add	fp, sp, #28
   166cc:	sub	sp, sp, #44	; 0x2c
   166d0:	str	r0, [sp, #8]
   166d4:	ldr	r0, [fp, #16]
   166d8:	str	r2, [sp, #12]
   166dc:	str	r1, [sp, #16]
   166e0:	ldr	r8, [r0, #20]
   166e4:	mov	r9, r8
   166e8:	ldrb	r0, [r9]
   166ec:	cmp	r0, #0
   166f0:	cmpne	r0, #61	; 0x3d
   166f4:	beq	1670c <__assert_fail@plt+0x5798>
   166f8:	add	r9, r9, #1
   166fc:	ldrb	r0, [r9]
   16700:	cmp	r0, #0
   16704:	cmpne	r0, #61	; 0x3d
   16708:	bne	166f8 <__assert_fail@plt+0x5784>
   1670c:	ldr	sl, [r3]
   16710:	mvn	r0, #0
   16714:	str	r0, [sp, #24]
   16718:	cmp	sl, #0
   1671c:	beq	168c0 <__assert_fail@plt+0x594c>
   16720:	sub	r0, r9, r8
   16724:	mov	r4, #0
   16728:	mov	r6, sl
   1672c:	mov	r7, r3
   16730:	str	r3, [sp, #28]
   16734:	str	r0, [fp, #-32]	; 0xffffffe0
   16738:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1673c:	mov	r0, r6
   16740:	mov	r1, r8
   16744:	bl	10f2c <strncmp@plt>
   16748:	cmp	r0, #0
   1674c:	bne	16764 <__assert_fail@plt+0x57f0>
   16750:	mov	r0, r6
   16754:	bl	10e48 <strlen@plt>
   16758:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1675c:	cmp	r1, r0
   16760:	beq	168dc <__assert_fail@plt+0x5968>
   16764:	ldr	r6, [r7, #16]!
   16768:	add	r4, r4, #1
   1676c:	cmp	r6, #0
   16770:	bne	16738 <__assert_fail@plt+0x57c4>
   16774:	cmp	sl, #0
   16778:	beq	168e4 <__assert_fail@plt+0x5970>
   1677c:	ldr	r0, [fp, #12]
   16780:	cmp	r0, #0
   16784:	beq	16964 <__assert_fail@plt+0x59f0>
   16788:	ldr	r0, [fp, #20]
   1678c:	cmp	r0, #0
   16790:	beq	16c88 <__assert_fail@plt+0x5d14>
   16794:	mov	r0, #0
   16798:	ldr	r6, [sp, #28]
   1679c:	mov	r5, #0
   167a0:	mov	r7, #0
   167a4:	str	r0, [sp, #32]
   167a8:	mvn	r0, #0
   167ac:	str	r0, [sp, #24]
   167b0:	mov	r0, #0
   167b4:	str	r0, [sp, #4]
   167b8:	mov	r0, #0
   167bc:	str	r0, [sp, #20]
   167c0:	b	167d4 <__assert_fail@plt+0x5860>
   167c4:	ldr	r0, [fp, #16]
   167c8:	add	r1, r1, #1
   167cc:	mov	r5, r1
   167d0:	ldr	r8, [r0, #20]
   167d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   167d8:	mov	r0, sl
   167dc:	mov	r1, r8
   167e0:	bl	10f2c <strncmp@plt>
   167e4:	cmp	r0, #0
   167e8:	beq	16800 <__assert_fail@plt+0x588c>
   167ec:	mov	r1, r5
   167f0:	ldr	sl, [r6, #16]!
   167f4:	cmp	sl, #0
   167f8:	bne	167c4 <__assert_fail@plt+0x5850>
   167fc:	b	16b1c <__assert_fail@plt+0x5ba8>
   16800:	cmp	r7, #0
   16804:	beq	16880 <__assert_fail@plt+0x590c>
   16808:	ldr	r0, [sp, #32]
   1680c:	mov	r1, r5
   16810:	cmp	r0, #0
   16814:	bne	167f0 <__assert_fail@plt+0x587c>
   16818:	ldr	r8, [sp, #20]
   1681c:	cmp	r8, #0
   16820:	bne	1685c <__assert_fail@plt+0x58e8>
   16824:	mov	r0, r4
   16828:	bl	1862c <__assert_fail@plt+0x76b8>
   1682c:	cmp	r0, #0
   16830:	beq	1689c <__assert_fail@plt+0x5928>
   16834:	mov	r1, #0
   16838:	mov	r2, r4
   1683c:	mov	r8, r0
   16840:	bl	10e90 <memset@plt>
   16844:	ldr	r0, [sp, #24]
   16848:	mov	r1, #1
   1684c:	mov	r2, #1
   16850:	str	r1, [sp, #4]
   16854:	mov	r1, r5
   16858:	strb	r2, [r8, r0]
   1685c:	mov	r0, #1
   16860:	str	r8, [sp, #20]
   16864:	strb	r0, [r8, r1]
   16868:	mov	r0, #0
   1686c:	str	r0, [sp, #32]
   16870:	ldr	sl, [r6, #16]!
   16874:	cmp	sl, #0
   16878:	bne	167c4 <__assert_fail@plt+0x5850>
   1687c:	b	16b1c <__assert_fail@plt+0x5ba8>
   16880:	mov	r7, r6
   16884:	mov	r1, r5
   16888:	str	r5, [sp, #24]
   1688c:	ldr	sl, [r6, #16]!
   16890:	cmp	sl, #0
   16894:	bne	167c4 <__assert_fail@plt+0x5850>
   16898:	b	16b1c <__assert_fail@plt+0x5ba8>
   1689c:	mov	r0, #1
   168a0:	mov	r1, r5
   168a4:	str	r0, [sp, #32]
   168a8:	mov	r0, #0
   168ac:	str	r0, [sp, #20]
   168b0:	ldr	sl, [r6, #16]!
   168b4:	cmp	sl, #0
   168b8:	bne	167c4 <__assert_fail@plt+0x5850>
   168bc:	b	16b1c <__assert_fail@plt+0x5ba8>
   168c0:	mov	r0, #0
   168c4:	mov	r4, #0
   168c8:	mov	r7, #0
   168cc:	mov	r1, #0
   168d0:	mov	r8, #0
   168d4:	mov	r6, r3
   168d8:	b	168f8 <__assert_fail@plt+0x5984>
   168dc:	str	r4, [sp, #24]
   168e0:	b	16b40 <__assert_fail@plt+0x5bcc>
   168e4:	ldr	r6, [sp, #28]
   168e8:	mov	r0, #0
   168ec:	mov	r7, #0
   168f0:	mov	r1, #0
   168f4:	mov	r8, #0
   168f8:	str	r0, [sp, #32]
   168fc:	cmp	r1, #0
   16900:	ldreq	r0, [sp, #32]
   16904:	cmpeq	r0, #0
   16908:	beq	16b38 <__assert_fail@plt+0x5bc4>
   1690c:	ldr	r0, [fp, #20]
   16910:	cmp	r0, #0
   16914:	bne	16d68 <__assert_fail@plt+0x5df4>
   16918:	cmp	r8, #0
   1691c:	beq	16928 <__assert_fail@plt+0x59b4>
   16920:	mov	r0, r1
   16924:	bl	13598 <__assert_fail@plt+0x2624>
   16928:	ldr	r0, [fp, #16]
   1692c:	ldr	r4, [r0, #20]
   16930:	mov	r5, r0
   16934:	mov	r0, r4
   16938:	bl	10e48 <strlen@plt>
   1693c:	mov	r1, #0
   16940:	add	r0, r4, r0
   16944:	str	r1, [r5, #8]
   16948:	str	r0, [r5, #20]
   1694c:	ldr	r0, [r5]
   16950:	add	r0, r0, #1
   16954:	str	r0, [r5]
   16958:	mov	r0, #63	; 0x3f
   1695c:	sub	sp, fp, #28
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16964:	mov	r0, #0
   16968:	mov	r6, #0
   1696c:	mov	r7, #0
   16970:	str	r0, [sp, #36]	; 0x24
   16974:	mvn	r0, #0
   16978:	str	r0, [sp, #24]
   1697c:	mov	r0, #0
   16980:	str	r0, [sp, #32]
   16984:	mov	r0, #0
   16988:	str	r0, [sp, #4]
   1698c:	mov	r0, #0
   16990:	str	r0, [sp, #20]
   16994:	b	169ac <__assert_fail@plt+0x5a38>
   16998:	ldr	r0, [fp, #16]
   1699c:	add	r3, r3, #16
   169a0:	add	r6, r6, #1
   169a4:	str	r3, [sp, #36]	; 0x24
   169a8:	ldr	r8, [r0, #20]
   169ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   169b0:	mov	r0, sl
   169b4:	mov	r1, r8
   169b8:	bl	10f2c <strncmp@plt>
   169bc:	cmp	r0, #0
   169c0:	beq	169e0 <__assert_fail@plt+0x5a6c>
   169c4:	ldr	r5, [sp, #28]
   169c8:	ldr	r3, [sp, #36]	; 0x24
   169cc:	add	r0, r5, r6, lsl #4
   169d0:	ldr	sl, [r0, #16]
   169d4:	cmp	sl, #0
   169d8:	bne	16998 <__assert_fail@plt+0x5a24>
   169dc:	b	16b1c <__assert_fail@plt+0x5ba8>
   169e0:	ldr	r5, [sp, #28]
   169e4:	ldr	r3, [sp, #36]	; 0x24
   169e8:	cmp	r7, #0
   169ec:	add	r0, r5, r3
   169f0:	beq	16a88 <__assert_fail@plt+0x5b14>
   169f4:	ldr	r1, [r0, #4]
   169f8:	ldr	r2, [r7, #4]
   169fc:	cmp	r2, r1
   16a00:	bne	16a14 <__assert_fail@plt+0x5aa0>
   16a04:	ldr	r1, [r0, #8]
   16a08:	ldr	r2, [r7, #8]
   16a0c:	cmp	r2, r1
   16a10:	beq	16aa4 <__assert_fail@plt+0x5b30>
   16a14:	ldr	r0, [sp, #32]
   16a18:	cmp	r0, #0
   16a1c:	bne	169cc <__assert_fail@plt+0x5a58>
   16a20:	ldr	r0, [fp, #20]
   16a24:	cmp	r0, #0
   16a28:	beq	16ac4 <__assert_fail@plt+0x5b50>
   16a2c:	ldr	r8, [sp, #20]
   16a30:	mov	r0, #0
   16a34:	str	r0, [sp, #32]
   16a38:	cmp	r8, #0
   16a3c:	bne	16ad8 <__assert_fail@plt+0x5b64>
   16a40:	mov	r0, r4
   16a44:	bl	1862c <__assert_fail@plt+0x76b8>
   16a48:	cmp	r0, #0
   16a4c:	beq	16af8 <__assert_fail@plt+0x5b84>
   16a50:	mov	r8, r0
   16a54:	mov	r0, #0
   16a58:	mov	r1, #0
   16a5c:	mov	r2, r4
   16a60:	str	r0, [sp, #32]
   16a64:	mov	r0, r8
   16a68:	bl	10e90 <memset@plt>
   16a6c:	ldr	r3, [sp, #36]	; 0x24
   16a70:	ldr	r0, [sp, #24]
   16a74:	mov	r2, #1
   16a78:	mov	r1, #1
   16a7c:	str	r1, [sp, #4]
   16a80:	strb	r2, [r8, r0]
   16a84:	b	16ad8 <__assert_fail@plt+0x5b64>
   16a88:	mov	r7, r0
   16a8c:	str	r6, [sp, #24]
   16a90:	add	r0, r5, r6, lsl #4
   16a94:	ldr	sl, [r0, #16]
   16a98:	cmp	sl, #0
   16a9c:	bne	16998 <__assert_fail@plt+0x5a24>
   16aa0:	b	16b1c <__assert_fail@plt+0x5ba8>
   16aa4:	ldr	r1, [sp, #32]
   16aa8:	cmp	r1, #0
   16aac:	bne	169cc <__assert_fail@plt+0x5a58>
   16ab0:	ldr	r0, [r0, #12]
   16ab4:	ldr	r1, [r7, #12]
   16ab8:	cmp	r1, r0
   16abc:	bne	16a20 <__assert_fail@plt+0x5aac>
   16ac0:	b	169cc <__assert_fail@plt+0x5a58>
   16ac4:	ldr	r8, [sp, #20]
   16ac8:	mov	r0, #1
   16acc:	str	r0, [sp, #32]
   16ad0:	cmp	r8, #0
   16ad4:	beq	16b04 <__assert_fail@plt+0x5b90>
   16ad8:	mov	r0, #1
   16adc:	str	r8, [sp, #20]
   16ae0:	strb	r0, [r8, r6]
   16ae4:	add	r0, r5, r6, lsl #4
   16ae8:	ldr	sl, [r0, #16]
   16aec:	cmp	sl, #0
   16af0:	bne	16998 <__assert_fail@plt+0x5a24>
   16af4:	b	16b1c <__assert_fail@plt+0x5ba8>
   16af8:	ldr	r3, [sp, #36]	; 0x24
   16afc:	mov	r0, #1
   16b00:	str	r0, [sp, #32]
   16b04:	mov	r0, #0
   16b08:	str	r0, [sp, #20]
   16b0c:	add	r0, r5, r6, lsl #4
   16b10:	ldr	sl, [r0, #16]
   16b14:	cmp	sl, #0
   16b18:	bne	16998 <__assert_fail@plt+0x5a24>
   16b1c:	ldr	r6, [sp, #28]
   16b20:	ldr	r1, [sp, #20]
   16b24:	ldr	r8, [sp, #4]
   16b28:	cmp	r1, #0
   16b2c:	ldreq	r0, [sp, #32]
   16b30:	cmpeq	r0, #0
   16b34:	bne	1690c <__assert_fail@plt+0x5998>
   16b38:	cmp	r7, #0
   16b3c:	beq	16be4 <__assert_fail@plt+0x5c70>
   16b40:	ldr	r1, [fp, #16]
   16b44:	mov	r0, #0
   16b48:	str	r0, [r1, #20]
   16b4c:	mov	r2, r1
   16b50:	ldr	r1, [r1]
   16b54:	add	r0, r1, #1
   16b58:	str	r0, [r2]
   16b5c:	ldrb	r3, [r9]
   16b60:	ldr	r2, [r7, #4]
   16b64:	cmp	r3, #0
   16b68:	beq	16b84 <__assert_fail@plt+0x5c10>
   16b6c:	cmp	r2, #0
   16b70:	beq	16c64 <__assert_fail@plt+0x5cf0>
   16b74:	ldr	r1, [fp, #16]
   16b78:	add	r0, r9, #1
   16b7c:	str	r0, [r1, #12]
   16b80:	b	16bb0 <__assert_fail@plt+0x5c3c>
   16b84:	cmp	r2, #1
   16b88:	bne	16bb0 <__assert_fail@plt+0x5c3c>
   16b8c:	ldr	r2, [sp, #8]
   16b90:	cmp	r0, r2
   16b94:	bge	16d38 <__assert_fail@plt+0x5dc4>
   16b98:	ldr	r2, [fp, #16]
   16b9c:	add	r1, r1, #2
   16ba0:	str	r1, [r2]
   16ba4:	ldr	r1, [sp, #16]
   16ba8:	ldr	r0, [r1, r0, lsl #2]
   16bac:	str	r0, [r2, #12]
   16bb0:	ldr	r0, [fp, #8]
   16bb4:	cmp	r0, #0
   16bb8:	ldrne	r1, [sp, #24]
   16bbc:	strne	r1, [r0]
   16bc0:	ldr	r1, [r7, #8]
   16bc4:	ldr	r0, [r7, #12]
   16bc8:	cmp	r1, #0
   16bcc:	strne	r0, [r1]
   16bd0:	movne	r0, #0
   16bd4:	subne	sp, fp, #28
   16bd8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bdc:	sub	sp, fp, #28
   16be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16be4:	ldr	r0, [fp, #12]
   16be8:	cmp	r0, #0
   16bec:	beq	16c30 <__assert_fail@plt+0x5cbc>
   16bf0:	ldr	r0, [fp, #16]
   16bf4:	ldr	r1, [sp, #16]
   16bf8:	ldr	r0, [r0]
   16bfc:	ldr	r0, [r1, r0, lsl #2]
   16c00:	ldrb	r0, [r0, #1]
   16c04:	cmp	r0, #45	; 0x2d
   16c08:	beq	16c30 <__assert_fail@plt+0x5cbc>
   16c0c:	ldr	r0, [fp, #16]
   16c10:	ldr	r0, [r0, #20]
   16c14:	ldrb	r1, [r0]
   16c18:	ldr	r0, [sp, #12]
   16c1c:	bl	10e54 <strchr@plt>
   16c20:	mov	r1, r0
   16c24:	mvn	r0, #0
   16c28:	cmp	r1, #0
   16c2c:	bne	16d60 <__assert_fail@plt+0x5dec>
   16c30:	ldr	r0, [fp, #20]
   16c34:	cmp	r0, #0
   16c38:	bne	16e60 <__assert_fail@plt+0x5eec>
   16c3c:	ldr	r1, [fp, #16]
   16c40:	mov	r0, #0
   16c44:	str	r0, [r1, #20]
   16c48:	str	r0, [r1, #8]
   16c4c:	ldr	r0, [r1]
   16c50:	add	r0, r0, #1
   16c54:	str	r0, [r1]
   16c58:	mov	r0, #63	; 0x3f
   16c5c:	sub	sp, fp, #28
   16c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c64:	ldr	r0, [fp, #20]
   16c68:	cmp	r0, #0
   16c6c:	bne	16e94 <__assert_fail@plt+0x5f20>
   16c70:	ldr	r0, [r7, #12]
   16c74:	ldr	r1, [fp, #16]
   16c78:	str	r0, [r1, #8]
   16c7c:	mov	r0, #63	; 0x3f
   16c80:	sub	sp, fp, #28
   16c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c88:	ldr	r5, [sp, #28]
   16c8c:	mov	r0, #0
   16c90:	mov	r6, #0
   16c94:	mov	r7, #0
   16c98:	str	r0, [sp, #32]
   16c9c:	mvn	r0, #0
   16ca0:	str	r0, [sp, #24]
   16ca4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16ca8:	mov	r0, sl
   16cac:	mov	r1, r8
   16cb0:	bl	10f2c <strncmp@plt>
   16cb4:	cmp	r0, #0
   16cb8:	beq	16cd0 <__assert_fail@plt+0x5d5c>
   16cbc:	ldr	sl, [r5, #16]!
   16cc0:	add	r6, r6, #1
   16cc4:	cmp	sl, #0
   16cc8:	bne	16ca4 <__assert_fail@plt+0x5d30>
   16ccc:	b	16d18 <__assert_fail@plt+0x5da4>
   16cd0:	cmp	r7, #0
   16cd4:	beq	16cfc <__assert_fail@plt+0x5d88>
   16cd8:	ldr	r0, [sp, #32]
   16cdc:	cmp	r0, #0
   16ce0:	movweq	r0, #1
   16ce4:	str	r0, [sp, #32]
   16ce8:	ldr	sl, [r5, #16]!
   16cec:	add	r6, r6, #1
   16cf0:	cmp	sl, #0
   16cf4:	bne	16ca4 <__assert_fail@plt+0x5d30>
   16cf8:	b	16d18 <__assert_fail@plt+0x5da4>
   16cfc:	mov	r7, r5
   16d00:	mov	r0, r6
   16d04:	str	r6, [sp, #24]
   16d08:	ldr	sl, [r5, #16]!
   16d0c:	add	r6, r6, #1
   16d10:	cmp	sl, #0
   16d14:	bne	16ca4 <__assert_fail@plt+0x5d30>
   16d18:	ldr	r6, [sp, #28]
   16d1c:	mov	r1, #0
   16d20:	mov	r8, #0
   16d24:	cmp	r1, #0
   16d28:	ldreq	r0, [sp, #32]
   16d2c:	cmpeq	r0, #0
   16d30:	bne	1690c <__assert_fail@plt+0x5998>
   16d34:	b	16b38 <__assert_fail@plt+0x5bc4>
   16d38:	ldr	r0, [fp, #20]
   16d3c:	cmp	r0, #0
   16d40:	bne	16ec4 <__assert_fail@plt+0x5f50>
   16d44:	ldr	r0, [r7, #12]
   16d48:	ldr	r1, [fp, #16]
   16d4c:	str	r0, [r1, #8]
   16d50:	ldr	r0, [sp, #12]
   16d54:	ldrb	r0, [r0]
   16d58:	cmp	r0, #58	; 0x3a
   16d5c:	movwne	r0, #63	; 0x3f
   16d60:	sub	sp, fp, #28
   16d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d68:	movw	sl, #41240	; 0xa118
   16d6c:	mov	r9, r1
   16d70:	ldr	r1, [sp, #32]
   16d74:	movt	sl, #2
   16d78:	ldr	r0, [sl]
   16d7c:	cmp	r1, #0
   16d80:	beq	16db8 <__assert_fail@plt+0x5e44>
   16d84:	ldr	r1, [sp, #16]
   16d88:	ldr	r3, [fp, #24]
   16d8c:	ldr	r2, [r1]
   16d90:	ldr	r1, [fp, #16]
   16d94:	ldr	r1, [r1, #20]
   16d98:	str	r1, [sp]
   16d9c:	movw	r1, #36412	; 0x8e3c
   16da0:	movt	r1, #1
   16da4:	bl	10e6c <fprintf@plt>
   16da8:	mov	r1, r9
   16dac:	cmp	r8, #0
   16db0:	bne	16920 <__assert_fail@plt+0x59ac>
   16db4:	b	16928 <__assert_fail@plt+0x59b4>
   16db8:	bl	10ef0 <flockfile@plt>
   16dbc:	ldr	r1, [fp, #16]
   16dc0:	ldr	r0, [sp, #16]
   16dc4:	ldr	r5, [fp, #24]
   16dc8:	ldr	r1, [r1, #20]
   16dcc:	ldr	r2, [r0]
   16dd0:	ldr	r0, [sl]
   16dd4:	mov	r3, r5
   16dd8:	str	r1, [sp]
   16ddc:	movw	r1, #36444	; 0x8e5c
   16de0:	movt	r1, #1
   16de4:	bl	10e6c <fprintf@plt>
   16de8:	cmp	r4, #0
   16dec:	beq	16e3c <__assert_fail@plt+0x5ec8>
   16df0:	mov	r7, r9
   16df4:	ldrb	r0, [r7]
   16df8:	cmp	r0, #0
   16dfc:	bne	16e14 <__assert_fail@plt+0x5ea0>
   16e00:	add	r6, r6, #16
   16e04:	add	r7, r7, #1
   16e08:	subs	r4, r4, #1
   16e0c:	bne	16df4 <__assert_fail@plt+0x5e80>
   16e10:	b	16e3c <__assert_fail@plt+0x5ec8>
   16e14:	ldr	r3, [r6]
   16e18:	ldr	r0, [sl]
   16e1c:	movw	r1, #36491	; 0x8e8b
   16e20:	mov	r2, r5
   16e24:	movt	r1, #1
   16e28:	bl	10e6c <fprintf@plt>
   16e2c:	add	r6, r6, #16
   16e30:	add	r7, r7, #1
   16e34:	subs	r4, r4, #1
   16e38:	bne	16df4 <__assert_fail@plt+0x5e80>
   16e3c:	ldr	r1, [sl]
   16e40:	mov	r0, #10
   16e44:	bl	10eb4 <fputc@plt>
   16e48:	ldr	r0, [sl]
   16e4c:	bl	10da0 <funlockfile@plt>
   16e50:	mov	r1, r9
   16e54:	cmp	r8, #0
   16e58:	bne	16920 <__assert_fail@plt+0x59ac>
   16e5c:	b	16928 <__assert_fail@plt+0x59b4>
   16e60:	ldr	r1, [fp, #16]
   16e64:	ldr	r0, [sp, #16]
   16e68:	ldr	r3, [fp, #24]
   16e6c:	ldr	r2, [r0]
   16e70:	movw	r0, #41240	; 0xa118
   16e74:	ldr	r1, [r1, #20]
   16e78:	movt	r0, #2
   16e7c:	ldr	r0, [r0]
   16e80:	str	r1, [sp]
   16e84:	movw	r1, #36499	; 0x8e93
   16e88:	movt	r1, #1
   16e8c:	bl	10e6c <fprintf@plt>
   16e90:	b	16c3c <__assert_fail@plt+0x5cc8>
   16e94:	ldr	r0, [sp, #16]
   16e98:	ldr	r1, [r7]
   16e9c:	ldr	r3, [fp, #24]
   16ea0:	ldr	r2, [r0]
   16ea4:	movw	r0, #41240	; 0xa118
   16ea8:	str	r1, [sp]
   16eac:	movw	r1, #36531	; 0x8eb3
   16eb0:	movt	r0, #2
   16eb4:	movt	r1, #1
   16eb8:	ldr	r0, [r0]
   16ebc:	bl	10e6c <fprintf@plt>
   16ec0:	b	16c70 <__assert_fail@plt+0x5cfc>
   16ec4:	ldr	r0, [sp, #16]
   16ec8:	ldr	r1, [r7]
   16ecc:	ldr	r3, [fp, #24]
   16ed0:	ldr	r2, [r0]
   16ed4:	movw	r0, #41240	; 0xa118
   16ed8:	str	r1, [sp]
   16edc:	movw	r1, #36576	; 0x8ee0
   16ee0:	movt	r0, #2
   16ee4:	movt	r1, #1
   16ee8:	ldr	r0, [r0]
   16eec:	bl	10e6c <fprintf@plt>
   16ef0:	b	16d44 <__assert_fail@plt+0x5dd0>
   16ef4:	push	{r4, r5, r6, r7, fp, lr}
   16ef8:	add	fp, sp, #16
   16efc:	sub	sp, sp, #16
   16f00:	movw	r6, #41224	; 0xa108
   16f04:	movw	r7, #41268	; 0xa134
   16f08:	movt	r6, #2
   16f0c:	movt	r7, #2
   16f10:	ldm	r6, {r4, r5}
   16f14:	stm	r7, {r4, r5}
   16f18:	ldr	r5, [fp, #16]
   16f1c:	str	r7, [sp, #8]
   16f20:	str	r5, [sp, #12]
   16f24:	ldr	r5, [fp, #12]
   16f28:	str	r5, [sp, #4]
   16f2c:	ldr	r5, [fp, #8]
   16f30:	str	r5, [sp]
   16f34:	bl	15d60 <__assert_fail@plt+0x4dec>
   16f38:	ldr	r1, [r7]
   16f3c:	ldr	r2, [r7, #8]
   16f40:	ldr	r3, [r7, #12]
   16f44:	str	r1, [r6]
   16f48:	movw	r1, #41408	; 0xa1c0
   16f4c:	str	r2, [r6, #8]
   16f50:	movt	r1, #2
   16f54:	str	r3, [r1]
   16f58:	sub	sp, fp, #16
   16f5c:	pop	{r4, r5, r6, r7, fp, pc}
   16f60:	push	{r4, r5, r6, sl, fp, lr}
   16f64:	add	fp, sp, #16
   16f68:	sub	sp, sp, #16
   16f6c:	movw	r5, #41224	; 0xa108
   16f70:	movw	r6, #41268	; 0xa134
   16f74:	movt	r5, #2
   16f78:	movt	r6, #2
   16f7c:	ldm	r5, {r3, r4}
   16f80:	stm	r6, {r3, r4}
   16f84:	mov	r4, #0
   16f88:	mov	r3, #1
   16f8c:	str	r4, [sp]
   16f90:	stmib	sp, {r4, r6}
   16f94:	str	r3, [sp, #12]
   16f98:	mov	r3, #0
   16f9c:	bl	15d60 <__assert_fail@plt+0x4dec>
   16fa0:	ldr	r1, [r6]
   16fa4:	ldr	r2, [r6, #8]
   16fa8:	ldr	r3, [r6, #12]
   16fac:	str	r1, [r5]
   16fb0:	movw	r1, #41408	; 0xa1c0
   16fb4:	str	r2, [r5, #8]
   16fb8:	movt	r1, #2
   16fbc:	str	r3, [r1]
   16fc0:	sub	sp, fp, #16
   16fc4:	pop	{r4, r5, r6, sl, fp, pc}
   16fc8:	ldr	r0, [r0, #8]
   16fcc:	bx	lr
   16fd0:	ldr	r0, [r0, #12]
   16fd4:	bx	lr
   16fd8:	ldr	r0, [r0, #16]
   16fdc:	bx	lr
   16fe0:	ldm	r0, {r2, ip}
   16fe4:	mov	r0, #0
   16fe8:	cmp	r2, ip
   16fec:	bxcs	lr
   16ff0:	mov	r0, #0
   16ff4:	ldr	r1, [r2]
   16ff8:	cmp	r1, #0
   16ffc:	beq	17020 <__assert_fail@plt+0x60ac>
   17000:	mov	r3, #0
   17004:	mov	r1, r2
   17008:	ldr	r1, [r1, #4]
   1700c:	add	r3, r3, #1
   17010:	cmp	r1, #0
   17014:	bne	17008 <__assert_fail@plt+0x6094>
   17018:	cmp	r3, r0
   1701c:	movhi	r0, r3
   17020:	add	r2, r2, #8
   17024:	cmp	r2, ip
   17028:	bcc	16ff4 <__assert_fail@plt+0x6080>
   1702c:	bx	lr
   17030:	push	{fp, lr}
   17034:	mov	fp, sp
   17038:	ldm	r0, {r3, ip}
   1703c:	mov	lr, #0
   17040:	mov	r1, #0
   17044:	cmp	r3, ip
   17048:	bcs	17084 <__assert_fail@plt+0x6110>
   1704c:	mov	r1, #0
   17050:	mov	lr, #0
   17054:	ldr	r2, [r3]
   17058:	cmp	r2, #0
   1705c:	beq	17078 <__assert_fail@plt+0x6104>
   17060:	mov	r2, r3
   17064:	ldr	r2, [r2, #4]
   17068:	add	r1, r1, #1
   1706c:	cmp	r2, #0
   17070:	bne	17064 <__assert_fail@plt+0x60f0>
   17074:	add	lr, lr, #1
   17078:	add	r3, r3, #8
   1707c:	cmp	r3, ip
   17080:	bcc	17054 <__assert_fail@plt+0x60e0>
   17084:	ldr	r2, [r0, #12]
   17088:	cmp	lr, r2
   1708c:	bne	170a4 <__assert_fail@plt+0x6130>
   17090:	ldr	r2, [r0, #16]
   17094:	mov	r0, #1
   17098:	cmp	r1, r2
   1709c:	movne	r0, #0
   170a0:	pop	{fp, pc}
   170a4:	mov	r0, #0
   170a8:	pop	{fp, pc}
   170ac:	nop	{0}
   170b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   170b4:	add	fp, sp, #24
   170b8:	sub	sp, sp, #8
   170bc:	ldr	r6, [r0]
   170c0:	ldmib	r0, {r3, r7, r8}
   170c4:	ldr	r2, [r0, #16]
   170c8:	mov	r4, r1
   170cc:	mov	r5, #0
   170d0:	cmp	r6, r3
   170d4:	bcs	17114 <__assert_fail@plt+0x61a0>
   170d8:	mov	r5, #0
   170dc:	ldr	r0, [r6]
   170e0:	cmp	r0, #0
   170e4:	beq	17108 <__assert_fail@plt+0x6194>
   170e8:	mov	r0, #0
   170ec:	mov	r1, r6
   170f0:	ldr	r1, [r1, #4]
   170f4:	add	r0, r0, #1
   170f8:	cmp	r1, #0
   170fc:	bne	170f0 <__assert_fail@plt+0x617c>
   17100:	cmp	r0, r5
   17104:	movhi	r5, r0
   17108:	add	r6, r6, #8
   1710c:	cmp	r6, r3
   17110:	bcc	170dc <__assert_fail@plt+0x6168>
   17114:	movw	r1, #36616	; 0x8f08
   17118:	mov	r0, r4
   1711c:	movt	r1, #1
   17120:	bl	10e6c <fprintf@plt>
   17124:	movw	r1, #36640	; 0x8f20
   17128:	mov	r0, r4
   1712c:	mov	r2, r7
   17130:	movt	r1, #1
   17134:	bl	10e6c <fprintf@plt>
   17138:	vldr	d16, [pc, #72]	; 17188 <__assert_fail@plt+0x6214>
   1713c:	vmov	s0, r8
   17140:	movw	r1, #36664	; 0x8f38
   17144:	mov	r0, r4
   17148:	mov	r2, r8
   1714c:	vcvt.f64.u32	d17, s0
   17150:	vmov	s0, r7
   17154:	movt	r1, #1
   17158:	vcvt.f64.u32	d18, s0
   1715c:	vmul.f64	d16, d17, d16
   17160:	vdiv.f64	d16, d16, d18
   17164:	vstr	d16, [sp]
   17168:	bl	10e6c <fprintf@plt>
   1716c:	movw	r1, #36697	; 0x8f59
   17170:	mov	r0, r4
   17174:	mov	r2, r5
   17178:	movt	r1, #1
   1717c:	sub	sp, fp, #24
   17180:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17184:	b	10e6c <fprintf@plt>
   17188:	andeq	r0, r0, r0
   1718c:	subsmi	r0, r9, r0
   17190:	push	{r4, r5, r6, r7, fp, lr}
   17194:	add	fp, sp, #16
   17198:	mov	r4, r1
   1719c:	ldr	r1, [r0, #8]
   171a0:	ldr	r2, [r0, #24]
   171a4:	mov	r5, r0
   171a8:	mov	r0, r4
   171ac:	blx	r2
   171b0:	ldr	r1, [r5, #8]
   171b4:	cmp	r0, r1
   171b8:	bcs	17224 <__assert_fail@plt+0x62b0>
   171bc:	ldr	r7, [r5]
   171c0:	mov	r6, #0
   171c4:	ldr	r1, [r7, r0, lsl #3]!
   171c8:	cmp	r1, #0
   171cc:	cmpne	r7, #0
   171d0:	bne	171e0 <__assert_fail@plt+0x626c>
   171d4:	mov	r0, r6
   171d8:	pop	{r4, r5, r6, r7, fp, pc}
   171dc:	ldr	r1, [r7]
   171e0:	cmp	r1, r4
   171e4:	beq	1720c <__assert_fail@plt+0x6298>
   171e8:	ldr	r2, [r5, #28]
   171ec:	mov	r0, r4
   171f0:	blx	r2
   171f4:	cmp	r0, #0
   171f8:	bne	17218 <__assert_fail@plt+0x62a4>
   171fc:	ldr	r7, [r7, #4]
   17200:	cmp	r7, #0
   17204:	bne	171dc <__assert_fail@plt+0x6268>
   17208:	b	171d4 <__assert_fail@plt+0x6260>
   1720c:	mov	r6, r4
   17210:	mov	r0, r6
   17214:	pop	{r4, r5, r6, r7, fp, pc}
   17218:	ldr	r6, [r7]
   1721c:	mov	r0, r6
   17220:	pop	{r4, r5, r6, r7, fp, pc}
   17224:	bl	10f38 <abort@plt>
   17228:	ldr	r1, [r0, #16]
   1722c:	cmp	r1, #0
   17230:	moveq	r0, #0
   17234:	bxeq	lr
   17238:	ldm	r0, {r1, r2}
   1723c:	cmp	r1, r2
   17240:	bcs	17258 <__assert_fail@plt+0x62e4>
   17244:	ldr	r0, [r1], #8
   17248:	cmp	r0, #0
   1724c:	bxne	lr
   17250:	cmp	r1, r2
   17254:	bcc	17244 <__assert_fail@plt+0x62d0>
   17258:	push	{fp, lr}
   1725c:	mov	fp, sp
   17260:	bl	10f38 <abort@plt>
   17264:	push	{r4, r5, fp, lr}
   17268:	add	fp, sp, #8
   1726c:	mov	r5, r1
   17270:	ldr	r1, [r0, #8]
   17274:	ldr	r2, [r0, #24]
   17278:	mov	r4, r0
   1727c:	mov	r0, r5
   17280:	blx	r2
   17284:	ldr	r1, [r4, #8]
   17288:	cmp	r0, r1
   1728c:	bcs	172e8 <__assert_fail@plt+0x6374>
   17290:	ldr	r1, [r4]
   17294:	add	r2, r1, r0, lsl #3
   17298:	ldr	r3, [r2]
   1729c:	ldr	r2, [r2, #4]
   172a0:	cmp	r3, r5
   172a4:	beq	172b4 <__assert_fail@plt+0x6340>
   172a8:	cmp	r2, #0
   172ac:	bne	17298 <__assert_fail@plt+0x6324>
   172b0:	b	172c0 <__assert_fail@plt+0x634c>
   172b4:	cmp	r2, #0
   172b8:	ldrne	r0, [r2]
   172bc:	popne	{r4, r5, fp, pc}
   172c0:	ldr	r2, [r4, #4]
   172c4:	add	r0, r1, r0, lsl #3
   172c8:	add	r1, r0, #8
   172cc:	cmp	r1, r2
   172d0:	movcs	r0, #0
   172d4:	popcs	{r4, r5, fp, pc}
   172d8:	ldr	r0, [r1], #8
   172dc:	cmp	r0, #0
   172e0:	popne	{r4, r5, fp, pc}
   172e4:	b	172cc <__assert_fail@plt+0x6358>
   172e8:	bl	10f38 <abort@plt>
   172ec:	push	{r4, r5, fp, lr}
   172f0:	add	fp, sp, #8
   172f4:	ldm	r0, {r5, lr}
   172f8:	mov	ip, r0
   172fc:	mov	r0, #0
   17300:	cmp	r5, lr
   17304:	bcs	17360 <__assert_fail@plt+0x63ec>
   17308:	mov	r0, #0
   1730c:	ldr	r3, [r5]
   17310:	cmp	r3, #0
   17314:	cmpne	r5, #0
   17318:	bne	1732c <__assert_fail@plt+0x63b8>
   1731c:	add	r5, r5, #8
   17320:	cmp	r5, lr
   17324:	bcc	1730c <__assert_fail@plt+0x6398>
   17328:	b	17360 <__assert_fail@plt+0x63ec>
   1732c:	mov	r3, r5
   17330:	cmp	r0, r2
   17334:	popcs	{r4, r5, fp, pc}
   17338:	ldr	r4, [r3]
   1733c:	str	r4, [r1, r0, lsl #2]
   17340:	add	r0, r0, #1
   17344:	ldr	r3, [r3, #4]
   17348:	cmp	r3, #0
   1734c:	bne	17330 <__assert_fail@plt+0x63bc>
   17350:	ldr	lr, [ip, #4]
   17354:	add	r5, r5, #8
   17358:	cmp	r5, lr
   1735c:	bcc	1730c <__assert_fail@plt+0x6398>
   17360:	pop	{r4, r5, fp, pc}
   17364:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17368:	add	fp, sp, #24
   1736c:	mov	r5, r1
   17370:	ldr	r4, [r0]
   17374:	ldr	r1, [r0, #4]
   17378:	mov	r6, #0
   1737c:	cmp	r4, r1
   17380:	bcs	173fc <__assert_fail@plt+0x6488>
   17384:	mov	r9, r2
   17388:	mov	r8, r0
   1738c:	mov	r6, #0
   17390:	ldr	r0, [r4]
   17394:	cmp	r0, #0
   17398:	cmpne	r4, #0
   1739c:	bne	173b0 <__assert_fail@plt+0x643c>
   173a0:	add	r4, r4, #8
   173a4:	cmp	r4, r1
   173a8:	bcc	17390 <__assert_fail@plt+0x641c>
   173ac:	b	173fc <__assert_fail@plt+0x6488>
   173b0:	mov	r1, r9
   173b4:	blx	r5
   173b8:	cmp	r0, #0
   173bc:	beq	173fc <__assert_fail@plt+0x6488>
   173c0:	mov	r7, r4
   173c4:	ldr	r7, [r7, #4]
   173c8:	add	r6, r6, #1
   173cc:	cmp	r7, #0
   173d0:	beq	173ec <__assert_fail@plt+0x6478>
   173d4:	ldr	r0, [r7]
   173d8:	mov	r1, r9
   173dc:	blx	r5
   173e0:	cmp	r0, #0
   173e4:	bne	173c4 <__assert_fail@plt+0x6450>
   173e8:	b	173fc <__assert_fail@plt+0x6488>
   173ec:	ldr	r1, [r8, #4]
   173f0:	add	r4, r4, #8
   173f4:	cmp	r4, r1
   173f8:	bcc	17390 <__assert_fail@plt+0x641c>
   173fc:	mov	r0, r6
   17400:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17404:	ldrb	r2, [r0]
   17408:	cmp	r2, #0
   1740c:	moveq	r0, #0
   17410:	bxeq	lr
   17414:	add	r3, r0, #1
   17418:	mov	r0, #0
   1741c:	rsb	r0, r0, r0, lsl #5
   17420:	uxtab	r0, r0, r2
   17424:	udiv	r2, r0, r1
   17428:	mls	r0, r2, r1, r0
   1742c:	ldrb	r2, [r3], #1
   17430:	cmp	r2, #0
   17434:	bne	1741c <__assert_fail@plt+0x64a8>
   17438:	bx	lr
   1743c:	movw	r1, #36728	; 0x8f78
   17440:	movt	r1, #1
   17444:	vld1.32	{d16-d17}, [r1]!
   17448:	ldr	r1, [r1]
   1744c:	vst1.32	{d16-d17}, [r0]!
   17450:	str	r1, [r0]
   17454:	bx	lr
   17458:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1745c:	add	fp, sp, #24
   17460:	movw	r9, #30372	; 0x76a4
   17464:	movw	r5, #30352	; 0x7690
   17468:	cmp	r3, #0
   1746c:	mov	r6, r0
   17470:	mov	r0, #40	; 0x28
   17474:	mov	r7, r1
   17478:	movt	r9, #1
   1747c:	movt	r5, #1
   17480:	movne	r9, r3
   17484:	cmp	r2, #0
   17488:	movne	r5, r2
   1748c:	bl	1862c <__assert_fail@plt+0x76b8>
   17490:	mov	r8, #0
   17494:	cmp	r0, #0
   17498:	beq	17678 <__assert_fail@plt+0x6704>
   1749c:	mov	r4, r0
   174a0:	cmp	r7, #0
   174a4:	beq	17554 <__assert_fail@plt+0x65e0>
   174a8:	movw	r0, #36728	; 0x8f78
   174ac:	str	r7, [r4, #20]
   174b0:	movt	r0, #1
   174b4:	cmp	r7, r0
   174b8:	beq	17560 <__assert_fail@plt+0x65ec>
   174bc:	vldr	s2, [pc, #444]	; 17680 <__assert_fail@plt+0x670c>
   174c0:	vldr	s0, [r7, #8]
   174c4:	vcmpe.f32	s0, s2
   174c8:	vmrs	APSR_nzcv, fpscr
   174cc:	ble	17538 <__assert_fail@plt+0x65c4>
   174d0:	vldr	s4, [pc, #428]	; 17684 <__assert_fail@plt+0x6710>
   174d4:	vcmpe.f32	s0, s4
   174d8:	vmrs	APSR_nzcv, fpscr
   174dc:	bpl	17538 <__assert_fail@plt+0x65c4>
   174e0:	vldr	s4, [pc, #416]	; 17688 <__assert_fail@plt+0x6714>
   174e4:	vldr	s6, [r7, #12]
   174e8:	vcmpe.f32	s6, s4
   174ec:	vmrs	APSR_nzcv, fpscr
   174f0:	ble	17538 <__assert_fail@plt+0x65c4>
   174f4:	vldr	s4, [r7]
   174f8:	vcmpe.f32	s4, #0.0
   174fc:	vmrs	APSR_nzcv, fpscr
   17500:	blt	17538 <__assert_fail@plt+0x65c4>
   17504:	vadd.f32	s2, s4, s2
   17508:	vcmpe.f32	s2, s0
   1750c:	vmrs	APSR_nzcv, fpscr
   17510:	bpl	17538 <__assert_fail@plt+0x65c4>
   17514:	vldr	s0, [r7, #4]
   17518:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1751c:	vcmpe.f32	s0, s4
   17520:	vmrs	APSR_nzcv, fpscr
   17524:	bhi	17538 <__assert_fail@plt+0x65c4>
   17528:	vcmpe.f32	s2, s0
   1752c:	mov	r0, r7
   17530:	vmrs	APSR_nzcv, fpscr
   17534:	bmi	17560 <__assert_fail@plt+0x65ec>
   17538:	movw	r0, #36728	; 0x8f78
   1753c:	movt	r0, #1
   17540:	str	r0, [r4, #20]
   17544:	mov	r0, r4
   17548:	bl	13598 <__assert_fail@plt+0x2624>
   1754c:	mov	r0, r8
   17550:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17554:	movw	r0, #36728	; 0x8f78
   17558:	movt	r0, #1
   1755c:	str	r0, [r4, #20]
   17560:	ldrb	r1, [r0, #16]
   17564:	cmp	r1, #0
   17568:	bne	17594 <__assert_fail@plt+0x6620>
   1756c:	vldr	s0, [r0, #8]
   17570:	vldr	s4, [pc, #276]	; 1768c <__assert_fail@plt+0x6718>
   17574:	vmov	s2, r6
   17578:	vcvt.f32.u32	s2, s2
   1757c:	vdiv.f32	s2, s2, s0
   17580:	vcmpe.f32	s2, s4
   17584:	vcvt.u32.f32	s0, s2
   17588:	vmrs	APSR_nzcv, fpscr
   1758c:	bge	17614 <__assert_fail@plt+0x66a0>
   17590:	vmov	r6, s0
   17594:	cmp	r6, #10
   17598:	movls	r6, #10
   1759c:	orr	r0, r6, #1
   175a0:	cmn	r0, #1
   175a4:	beq	17614 <__assert_fail@plt+0x66a0>
   175a8:	ldr	r6, [fp, #8]
   175ac:	mov	r1, #3
   175b0:	cmp	r0, #10
   175b4:	bcc	175ec <__assert_fail@plt+0x6678>
   175b8:	mov	r1, #3
   175bc:	mov	r3, #9
   175c0:	mov	r2, #12
   175c4:	udiv	r7, r0, r1
   175c8:	mls	r7, r7, r1, r0
   175cc:	cmp	r7, #0
   175d0:	beq	175ec <__assert_fail@plt+0x6678>
   175d4:	add	r3, r3, r2
   175d8:	add	r2, r2, #8
   175dc:	add	r1, r1, #2
   175e0:	add	r3, r3, #4
   175e4:	cmp	r3, r0
   175e8:	bcc	175c4 <__assert_fail@plt+0x6650>
   175ec:	udiv	r2, r0, r1
   175f0:	mls	r1, r2, r1, r0
   175f4:	cmp	r1, #0
   175f8:	bne	1760c <__assert_fail@plt+0x6698>
   175fc:	add	r0, r0, #2
   17600:	cmn	r0, #1
   17604:	bne	175ac <__assert_fail@plt+0x6638>
   17608:	b	17614 <__assert_fail@plt+0x66a0>
   1760c:	cmp	r0, #536870912	; 0x20000000
   17610:	bcc	1762c <__assert_fail@plt+0x66b8>
   17614:	mov	r0, #0
   17618:	str	r0, [r4, #8]
   1761c:	mov	r0, r4
   17620:	bl	13598 <__assert_fail@plt+0x2624>
   17624:	mov	r0, r8
   17628:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1762c:	cmp	r0, #0
   17630:	str	r0, [r4, #8]
   17634:	beq	1761c <__assert_fail@plt+0x66a8>
   17638:	mov	r1, #8
   1763c:	bl	185d8 <__assert_fail@plt+0x7664>
   17640:	cmp	r0, #0
   17644:	str	r0, [r4]
   17648:	beq	1761c <__assert_fail@plt+0x66a8>
   1764c:	mov	r1, #0
   17650:	mov	r8, r4
   17654:	str	r1, [r4, #12]
   17658:	str	r1, [r4, #16]
   1765c:	str	r5, [r4, #24]
   17660:	str	r9, [r4, #28]
   17664:	str	r6, [r4, #32]
   17668:	str	r1, [r4, #36]	; 0x24
   1766c:	ldr	r1, [r4, #8]
   17670:	add	r0, r0, r1, lsl #3
   17674:	str	r0, [r4, #4]
   17678:	mov	r0, r8
   1767c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17680:	stclcc	12, cr12, [ip, #820]	; 0x334
   17684:	svccc	0x00666666
   17688:	svccc	0x008ccccd
   1768c:	svcmi	0x00800000
   17690:	ror	r2, r0, #3
   17694:	udiv	r2, r2, r1
   17698:	mul	r1, r2, r1
   1769c:	rsb	r0, r1, r0, ror #3
   176a0:	bx	lr
   176a4:	sub	r0, r0, r1
   176a8:	clz	r0, r0
   176ac:	lsr	r0, r0, #5
   176b0:	bx	lr
   176b4:	push	{r4, r5, r6, r7, fp, lr}
   176b8:	add	fp, sp, #16
   176bc:	mov	r4, r0
   176c0:	ldr	r5, [r0]
   176c4:	ldr	r0, [r0, #4]
   176c8:	cmp	r5, r0
   176cc:	bcs	17764 <__assert_fail@plt+0x67f0>
   176d0:	mov	r6, #0
   176d4:	ldr	r1, [r5]
   176d8:	cmp	r1, #0
   176dc:	beq	17758 <__assert_fail@plt+0x67e4>
   176e0:	ldr	r1, [r4, #32]
   176e4:	ldr	r7, [r5, #4]
   176e8:	cmp	r1, #0
   176ec:	mov	r0, r1
   176f0:	movwne	r0, #1
   176f4:	cmp	r7, #0
   176f8:	beq	1773c <__assert_fail@plt+0x67c8>
   176fc:	tst	r0, #1
   17700:	beq	17710 <__assert_fail@plt+0x679c>
   17704:	ldr	r0, [r7]
   17708:	blx	r1
   1770c:	ldr	r1, [r4, #32]
   17710:	str	r6, [r7]
   17714:	cmp	r1, #0
   17718:	ldr	r0, [r4, #36]	; 0x24
   1771c:	ldr	r2, [r7, #4]
   17720:	str	r0, [r7, #4]
   17724:	mov	r0, r1
   17728:	str	r7, [r4, #36]	; 0x24
   1772c:	mov	r7, r2
   17730:	movwne	r0, #1
   17734:	cmp	r2, #0
   17738:	bne	176fc <__assert_fail@plt+0x6788>
   1773c:	cmp	r0, #0
   17740:	beq	1774c <__assert_fail@plt+0x67d8>
   17744:	ldr	r0, [r5]
   17748:	blx	r1
   1774c:	str	r6, [r5]
   17750:	str	r6, [r5, #4]
   17754:	ldr	r0, [r4, #4]
   17758:	add	r5, r5, #8
   1775c:	cmp	r5, r0
   17760:	bcc	176d4 <__assert_fail@plt+0x6760>
   17764:	mov	r0, #0
   17768:	str	r0, [r4, #12]
   1776c:	str	r0, [r4, #16]
   17770:	pop	{r4, r5, r6, r7, fp, pc}
   17774:	push	{r4, r5, r6, sl, fp, lr}
   17778:	add	fp, sp, #16
   1777c:	mov	r4, r0
   17780:	ldr	r0, [r0, #32]
   17784:	cmp	r0, #0
   17788:	ldrne	r0, [r4, #16]
   1778c:	cmpne	r0, #0
   17790:	beq	177f8 <__assert_fail@plt+0x6884>
   17794:	ldr	r5, [r4]
   17798:	ldr	r1, [r4, #4]
   1779c:	cmp	r5, r1
   177a0:	bcc	177b4 <__assert_fail@plt+0x6840>
   177a4:	b	177f8 <__assert_fail@plt+0x6884>
   177a8:	add	r5, r5, #8
   177ac:	cmp	r5, r1
   177b0:	bcs	177f8 <__assert_fail@plt+0x6884>
   177b4:	ldr	r0, [r5]
   177b8:	cmp	r0, #0
   177bc:	cmpne	r5, #0
   177c0:	beq	177a8 <__assert_fail@plt+0x6834>
   177c4:	ldr	r1, [r4, #32]
   177c8:	blx	r1
   177cc:	ldr	r6, [r5, #4]
   177d0:	cmp	r6, #0
   177d4:	beq	177f0 <__assert_fail@plt+0x687c>
   177d8:	ldr	r1, [r4, #32]
   177dc:	ldr	r0, [r6]
   177e0:	blx	r1
   177e4:	ldr	r6, [r6, #4]
   177e8:	cmp	r6, #0
   177ec:	bne	177d8 <__assert_fail@plt+0x6864>
   177f0:	ldr	r1, [r4, #4]
   177f4:	b	177a8 <__assert_fail@plt+0x6834>
   177f8:	ldr	r5, [r4]
   177fc:	ldr	r1, [r4, #4]
   17800:	cmp	r5, r1
   17804:	bcc	17818 <__assert_fail@plt+0x68a4>
   17808:	b	17840 <__assert_fail@plt+0x68cc>
   1780c:	add	r5, r5, #8
   17810:	cmp	r5, r1
   17814:	bcs	17840 <__assert_fail@plt+0x68cc>
   17818:	ldr	r0, [r5, #4]
   1781c:	cmp	r0, #0
   17820:	beq	1780c <__assert_fail@plt+0x6898>
   17824:	ldr	r6, [r0, #4]
   17828:	bl	13598 <__assert_fail@plt+0x2624>
   1782c:	cmp	r6, #0
   17830:	mov	r0, r6
   17834:	bne	17824 <__assert_fail@plt+0x68b0>
   17838:	ldr	r1, [r4, #4]
   1783c:	b	1780c <__assert_fail@plt+0x6898>
   17840:	ldr	r0, [r4, #36]	; 0x24
   17844:	cmp	r0, #0
   17848:	beq	17860 <__assert_fail@plt+0x68ec>
   1784c:	ldr	r5, [r0, #4]
   17850:	bl	13598 <__assert_fail@plt+0x2624>
   17854:	cmp	r5, #0
   17858:	mov	r0, r5
   1785c:	bne	1784c <__assert_fail@plt+0x68d8>
   17860:	ldr	r0, [r4]
   17864:	bl	13598 <__assert_fail@plt+0x2624>
   17868:	mov	r0, r4
   1786c:	pop	{r4, r5, r6, sl, fp, lr}
   17870:	b	13598 <__assert_fail@plt+0x2624>
   17874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17878:	add	fp, sp, #28
   1787c:	sub	sp, sp, #44	; 0x2c
   17880:	mov	r7, r0
   17884:	mov	r4, r0
   17888:	ldr	r0, [r7, #20]!
   1788c:	ldrb	r2, [r0, #16]
   17890:	cmp	r2, #0
   17894:	bne	178c4 <__assert_fail@plt+0x6950>
   17898:	vldr	s0, [r0, #8]
   1789c:	vldr	s4, [pc, #576]	; 17ae4 <__assert_fail@plt+0x6b70>
   178a0:	vmov	s2, r1
   178a4:	mov	r5, #0
   178a8:	vcvt.f32.u32	s2, s2
   178ac:	vdiv.f32	s2, s2, s0
   178b0:	vcmpe.f32	s2, s4
   178b4:	vcvt.u32.f32	s0, s2
   178b8:	vmrs	APSR_nzcv, fpscr
   178bc:	bge	179e8 <__assert_fail@plt+0x6a74>
   178c0:	vmov	r1, s0
   178c4:	cmp	r1, #10
   178c8:	mov	r5, #0
   178cc:	movls	r1, #10
   178d0:	orr	r6, r1, #1
   178d4:	cmn	r6, #1
   178d8:	bne	178ec <__assert_fail@plt+0x6978>
   178dc:	b	179e8 <__assert_fail@plt+0x6a74>
   178e0:	add	r6, r6, #2
   178e4:	cmn	r6, #1
   178e8:	beq	179e8 <__assert_fail@plt+0x6a74>
   178ec:	mov	r0, #3
   178f0:	cmp	r6, #10
   178f4:	bcc	1792c <__assert_fail@plt+0x69b8>
   178f8:	mov	r0, #3
   178fc:	mov	r2, #9
   17900:	mov	r1, #12
   17904:	udiv	r3, r6, r0
   17908:	mls	r3, r3, r0, r6
   1790c:	cmp	r3, #0
   17910:	beq	1792c <__assert_fail@plt+0x69b8>
   17914:	add	r2, r2, r1
   17918:	add	r1, r1, #8
   1791c:	add	r0, r0, #2
   17920:	add	r2, r2, #4
   17924:	cmp	r2, r6
   17928:	bcc	17904 <__assert_fail@plt+0x6990>
   1792c:	udiv	r1, r6, r0
   17930:	mls	r0, r1, r0, r6
   17934:	cmp	r0, #0
   17938:	beq	178e0 <__assert_fail@plt+0x696c>
   1793c:	sub	r0, r6, #1
   17940:	cmn	r0, #-536870910	; 0xe0000002
   17944:	bhi	179e8 <__assert_fail@plt+0x6a74>
   17948:	ldr	r0, [r4, #8]
   1794c:	cmp	r6, r0
   17950:	bne	17964 <__assert_fail@plt+0x69f0>
   17954:	mov	r5, #1
   17958:	mov	r0, r5
   1795c:	sub	sp, fp, #28
   17960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17964:	mov	r0, r6
   17968:	mov	r1, #8
   1796c:	bl	185d8 <__assert_fail@plt+0x7664>
   17970:	cmp	r0, #0
   17974:	str	r0, [sp, #4]
   17978:	beq	179e8 <__assert_fail@plt+0x6a74>
   1797c:	mov	r1, #0
   17980:	add	r0, r0, r6, lsl #3
   17984:	str	r6, [sp, #12]
   17988:	add	r5, sp, #4
   1798c:	mov	sl, r4
   17990:	mov	r2, #0
   17994:	str	r1, [sp, #16]
   17998:	str	r1, [sp, #20]
   1799c:	str	r0, [sp, #8]
   179a0:	add	r0, r5, #20
   179a4:	mov	r1, r4
   179a8:	vld1.32	{d16-d17}, [r7]
   179ac:	vst1.32	{d16-d17}, [r0]
   179b0:	ldr	r0, [sl, #36]!	; 0x24
   179b4:	str	r0, [sp, #40]	; 0x28
   179b8:	mov	r0, r5
   179bc:	bl	17ae8 <__assert_fail@plt+0x6b74>
   179c0:	cmp	r0, #0
   179c4:	beq	179f4 <__assert_fail@plt+0x6a80>
   179c8:	ldr	r0, [r4]
   179cc:	bl	13598 <__assert_fail@plt+0x2624>
   179d0:	mov	r0, #36	; 0x24
   179d4:	vld1.32	{d16-d17}, [r5], r0
   179d8:	vst1.32	{d16-d17}, [r4], r0
   179dc:	ldr	r0, [r5]
   179e0:	mov	r5, #1
   179e4:	str	r0, [r4]
   179e8:	mov	r0, r5
   179ec:	sub	sp, fp, #28
   179f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179f4:	ldr	r0, [sp, #40]	; 0x28
   179f8:	str	r0, [sl]
   179fc:	ldr	r0, [sp, #8]
   17a00:	ldr	r8, [sp, #4]
   17a04:	cmp	r8, r0
   17a08:	str	r0, [sp]
   17a0c:	bcs	17ab0 <__assert_fail@plt+0x6b3c>
   17a10:	mov	r9, #0
   17a14:	ldr	r0, [r8]
   17a18:	cmp	r0, #0
   17a1c:	beq	17aa0 <__assert_fail@plt+0x6b2c>
   17a20:	ldr	r6, [r8, #4]
   17a24:	cmp	r6, #0
   17a28:	beq	17a9c <__assert_fail@plt+0x6b28>
   17a2c:	ldr	r1, [r4, #8]
   17a30:	ldr	r5, [r6]
   17a34:	ldr	r2, [r4, #24]
   17a38:	mov	r0, r5
   17a3c:	blx	r2
   17a40:	ldr	r1, [r4, #8]
   17a44:	cmp	r0, r1
   17a48:	bcs	17ae0 <__assert_fail@plt+0x6b6c>
   17a4c:	ldr	r3, [r4]
   17a50:	ldr	r2, [r6, #4]
   17a54:	ldr	r7, [r3, r0, lsl #3]
   17a58:	cmp	r7, #0
   17a5c:	beq	17a6c <__assert_fail@plt+0x6af8>
   17a60:	add	r0, r3, r0, lsl #3
   17a64:	add	r0, r0, #4
   17a68:	b	17a84 <__assert_fail@plt+0x6b10>
   17a6c:	str	r5, [r3, r0, lsl #3]
   17a70:	ldr	r0, [r4, #12]
   17a74:	add	r0, r0, #1
   17a78:	str	r0, [r4, #12]
   17a7c:	mov	r0, sl
   17a80:	str	r9, [r6]
   17a84:	ldr	r3, [r0]
   17a88:	cmp	r2, #0
   17a8c:	str	r3, [r6, #4]
   17a90:	str	r6, [r0]
   17a94:	mov	r6, r2
   17a98:	bne	17a30 <__assert_fail@plt+0x6abc>
   17a9c:	str	r9, [r8, #4]
   17aa0:	ldr	r0, [sp]
   17aa4:	add	r8, r8, #8
   17aa8:	cmp	r8, r0
   17aac:	bcc	17a14 <__assert_fail@plt+0x6aa0>
   17ab0:	add	r1, sp, #4
   17ab4:	mov	r0, r4
   17ab8:	mov	r2, #0
   17abc:	mov	r5, #0
   17ac0:	bl	17ae8 <__assert_fail@plt+0x6b74>
   17ac4:	cmp	r0, #0
   17ac8:	beq	17ae0 <__assert_fail@plt+0x6b6c>
   17acc:	ldr	r0, [sp, #4]
   17ad0:	bl	13598 <__assert_fail@plt+0x2624>
   17ad4:	mov	r0, r5
   17ad8:	sub	sp, fp, #28
   17adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ae0:	bl	10f38 <abort@plt>
   17ae4:	svcmi	0x00800000
   17ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17aec:	add	fp, sp, #28
   17af0:	sub	sp, sp, #4
   17af4:	ldr	r8, [r1]
   17af8:	ldr	r3, [r1, #4]
   17afc:	mov	r6, r0
   17b00:	mov	r0, #1
   17b04:	str	r1, [sp]
   17b08:	cmp	r8, r3
   17b0c:	bcs	17d0c <__assert_fail@plt+0x6d98>
   17b10:	add	r9, r6, #36	; 0x24
   17b14:	cmp	r2, #0
   17b18:	beq	17bc4 <__assert_fail@plt+0x6c50>
   17b1c:	mov	sl, #0
   17b20:	ldr	r1, [r8]
   17b24:	cmp	r1, #0
   17b28:	beq	17bb4 <__assert_fail@plt+0x6c40>
   17b2c:	ldr	r7, [r8, #4]
   17b30:	cmp	r7, #0
   17b34:	beq	17bb0 <__assert_fail@plt+0x6c3c>
   17b38:	ldr	r1, [r6, #8]
   17b3c:	ldr	r4, [r7]
   17b40:	ldr	r2, [r6, #24]
   17b44:	mov	r0, r4
   17b48:	blx	r2
   17b4c:	ldr	r1, [r6, #8]
   17b50:	cmp	r0, r1
   17b54:	bcs	17d20 <__assert_fail@plt+0x6dac>
   17b58:	ldr	r3, [r6]
   17b5c:	ldr	r2, [r7, #4]
   17b60:	ldr	r5, [r3, r0, lsl #3]
   17b64:	cmp	r5, #0
   17b68:	beq	17b78 <__assert_fail@plt+0x6c04>
   17b6c:	add	r0, r3, r0, lsl #3
   17b70:	add	r0, r0, #4
   17b74:	b	17b90 <__assert_fail@plt+0x6c1c>
   17b78:	str	r4, [r3, r0, lsl #3]
   17b7c:	ldr	r0, [r6, #12]
   17b80:	add	r0, r0, #1
   17b84:	str	r0, [r6, #12]
   17b88:	mov	r0, r9
   17b8c:	str	sl, [r7]
   17b90:	ldr	r3, [r0]
   17b94:	cmp	r2, #0
   17b98:	str	r3, [r7, #4]
   17b9c:	str	r7, [r0]
   17ba0:	mov	r7, r2
   17ba4:	bne	17b3c <__assert_fail@plt+0x6bc8>
   17ba8:	ldr	r0, [sp]
   17bac:	ldr	r3, [r0, #4]
   17bb0:	str	sl, [r8, #4]
   17bb4:	add	r8, r8, #8
   17bb8:	cmp	r8, r3
   17bbc:	bcc	17b20 <__assert_fail@plt+0x6bac>
   17bc0:	b	17d08 <__assert_fail@plt+0x6d94>
   17bc4:	mov	r5, #0
   17bc8:	ldr	sl, [r8]
   17bcc:	cmp	sl, #0
   17bd0:	beq	17cfc <__assert_fail@plt+0x6d88>
   17bd4:	ldr	r7, [r8, #4]
   17bd8:	ldr	r1, [r6, #8]
   17bdc:	cmp	r7, #0
   17be0:	beq	17c5c <__assert_fail@plt+0x6ce8>
   17be4:	mov	sl, #0
   17be8:	ldr	r4, [r7]
   17bec:	ldr	r2, [r6, #24]
   17bf0:	mov	r0, r4
   17bf4:	blx	r2
   17bf8:	ldr	r1, [r6, #8]
   17bfc:	cmp	r0, r1
   17c00:	bcs	17d20 <__assert_fail@plt+0x6dac>
   17c04:	ldr	r3, [r6]
   17c08:	ldr	r2, [r7, #4]
   17c0c:	ldr	r5, [r3, r0, lsl #3]
   17c10:	cmp	r5, #0
   17c14:	beq	17c24 <__assert_fail@plt+0x6cb0>
   17c18:	add	r0, r3, r0, lsl #3
   17c1c:	add	r0, r0, #4
   17c20:	b	17c3c <__assert_fail@plt+0x6cc8>
   17c24:	str	r4, [r3, r0, lsl #3]
   17c28:	ldr	r0, [r6, #12]
   17c2c:	add	r0, r0, #1
   17c30:	str	r0, [r6, #12]
   17c34:	mov	r0, r9
   17c38:	str	sl, [r7]
   17c3c:	ldr	r3, [r0]
   17c40:	cmp	r2, #0
   17c44:	str	r3, [r7, #4]
   17c48:	str	r7, [r0]
   17c4c:	mov	r7, r2
   17c50:	bne	17be8 <__assert_fail@plt+0x6c74>
   17c54:	ldr	sl, [r8]
   17c58:	mov	r5, #0
   17c5c:	str	r5, [r8, #4]
   17c60:	mov	r0, sl
   17c64:	ldr	r2, [r6, #24]
   17c68:	blx	r2
   17c6c:	mov	r4, r0
   17c70:	ldr	r0, [r6, #8]
   17c74:	cmp	r4, r0
   17c78:	bcs	17d20 <__assert_fail@plt+0x6dac>
   17c7c:	ldr	r7, [r6]
   17c80:	ldr	r0, [r7, r4, lsl #3]
   17c84:	cmp	r0, #0
   17c88:	beq	17ca8 <__assert_fail@plt+0x6d34>
   17c8c:	ldr	r0, [r9]
   17c90:	cmp	r0, #0
   17c94:	beq	17cbc <__assert_fail@plt+0x6d48>
   17c98:	mov	r1, r0
   17c9c:	ldr	r2, [r1, #4]!
   17ca0:	str	r2, [r9]
   17ca4:	b	17cd0 <__assert_fail@plt+0x6d5c>
   17ca8:	str	sl, [r7, r4, lsl #3]
   17cac:	ldr	r0, [r6, #12]
   17cb0:	add	r0, r0, #1
   17cb4:	str	r0, [r6, #12]
   17cb8:	b	17ce4 <__assert_fail@plt+0x6d70>
   17cbc:	mov	r0, #8
   17cc0:	bl	1862c <__assert_fail@plt+0x76b8>
   17cc4:	cmp	r0, #0
   17cc8:	beq	17d14 <__assert_fail@plt+0x6da0>
   17ccc:	add	r1, r0, #4
   17cd0:	str	sl, [r0]
   17cd4:	add	r2, r7, r4, lsl #3
   17cd8:	ldr	r3, [r2, #4]
   17cdc:	str	r3, [r1]
   17ce0:	str	r0, [r2, #4]
   17ce4:	ldr	r0, [sp]
   17ce8:	str	r5, [r8]
   17cec:	ldr	r1, [r0, #12]
   17cf0:	ldr	r3, [r0, #4]
   17cf4:	sub	r1, r1, #1
   17cf8:	str	r1, [r0, #12]
   17cfc:	add	r8, r8, #8
   17d00:	cmp	r8, r3
   17d04:	bcc	17bc8 <__assert_fail@plt+0x6c54>
   17d08:	mov	r0, #1
   17d0c:	sub	sp, fp, #28
   17d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d14:	mov	r0, #0
   17d18:	sub	sp, fp, #28
   17d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d20:	bl	10f38 <abort@plt>
   17d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d28:	add	fp, sp, #28
   17d2c:	sub	sp, sp, #4
   17d30:	cmp	r1, #0
   17d34:	beq	18078 <__assert_fail@plt+0x7104>
   17d38:	mov	r8, r2
   17d3c:	mov	sl, r1
   17d40:	ldr	r1, [r0, #8]
   17d44:	ldr	r2, [r0, #24]
   17d48:	mov	r4, r0
   17d4c:	mov	r0, sl
   17d50:	blx	r2
   17d54:	mov	r7, r0
   17d58:	ldr	r0, [r4, #8]
   17d5c:	cmp	r7, r0
   17d60:	bcs	18078 <__assert_fail@plt+0x7104>
   17d64:	ldr	r5, [r4]
   17d68:	mov	r9, r5
   17d6c:	ldr	r1, [r9, r7, lsl #3]!
   17d70:	cmp	r1, #0
   17d74:	beq	17e08 <__assert_fail@plt+0x6e94>
   17d78:	cmp	r1, sl
   17d7c:	beq	17da8 <__assert_fail@plt+0x6e34>
   17d80:	ldr	r2, [r4, #28]
   17d84:	mov	r0, sl
   17d88:	blx	r2
   17d8c:	cmp	r0, #0
   17d90:	mov	r6, r9
   17d94:	beq	17dc4 <__assert_fail@plt+0x6e50>
   17d98:	ldr	r0, [r6]
   17d9c:	cmp	r0, #0
   17da0:	bne	17dac <__assert_fail@plt+0x6e38>
   17da4:	b	17e08 <__assert_fail@plt+0x6e94>
   17da8:	mov	r0, sl
   17dac:	cmp	r8, #0
   17db0:	mov	r7, #0
   17db4:	strne	r0, [r8]
   17db8:	mov	r0, r7
   17dbc:	sub	sp, fp, #28
   17dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dc4:	add	r6, r5, r7, lsl #3
   17dc8:	ldr	r0, [r6, #4]!
   17dcc:	cmp	r0, #0
   17dd0:	beq	17e08 <__assert_fail@plt+0x6e94>
   17dd4:	ldr	r1, [r0]
   17dd8:	cmp	r1, sl
   17ddc:	beq	17dfc <__assert_fail@plt+0x6e88>
   17de0:	ldr	r2, [r4, #28]
   17de4:	mov	r0, sl
   17de8:	blx	r2
   17dec:	ldr	r6, [r6]
   17df0:	cmp	r0, #0
   17df4:	beq	17dc8 <__assert_fail@plt+0x6e54>
   17df8:	b	17d98 <__assert_fail@plt+0x6e24>
   17dfc:	mov	r0, sl
   17e00:	cmp	r0, #0
   17e04:	bne	17dac <__assert_fail@plt+0x6e38>
   17e08:	vldr	s0, [r4, #8]
   17e0c:	vldr	s2, [r4, #12]
   17e10:	ldr	r0, [r4, #20]
   17e14:	vcvt.f32.u32	s0, s0
   17e18:	vcvt.f32.u32	s4, s2
   17e1c:	vldr	s2, [r0, #8]
   17e20:	vmul.f32	s6, s2, s0
   17e24:	vcmpe.f32	s6, s4
   17e28:	vmrs	APSR_nzcv, fpscr
   17e2c:	bpl	17f90 <__assert_fail@plt+0x701c>
   17e30:	movw	r1, #36728	; 0x8f78
   17e34:	movt	r1, #1
   17e38:	cmp	r0, r1
   17e3c:	beq	17ed8 <__assert_fail@plt+0x6f64>
   17e40:	vldr	s6, [pc, #564]	; 1807c <__assert_fail@plt+0x7108>
   17e44:	vcmpe.f32	s2, s6
   17e48:	vmrs	APSR_nzcv, fpscr
   17e4c:	ble	17eb4 <__assert_fail@plt+0x6f40>
   17e50:	vldr	s8, [pc, #552]	; 18080 <__assert_fail@plt+0x710c>
   17e54:	vcmpe.f32	s2, s8
   17e58:	vmrs	APSR_nzcv, fpscr
   17e5c:	bpl	17eb4 <__assert_fail@plt+0x6f40>
   17e60:	vldr	s8, [pc, #540]	; 18084 <__assert_fail@plt+0x7110>
   17e64:	vldr	s10, [r0, #12]
   17e68:	vcmpe.f32	s10, s8
   17e6c:	vmrs	APSR_nzcv, fpscr
   17e70:	ble	17eb4 <__assert_fail@plt+0x6f40>
   17e74:	vldr	s8, [r0]
   17e78:	vcmpe.f32	s8, #0.0
   17e7c:	vmrs	APSR_nzcv, fpscr
   17e80:	blt	17eb4 <__assert_fail@plt+0x6f40>
   17e84:	vadd.f32	s6, s8, s6
   17e88:	vcmpe.f32	s6, s2
   17e8c:	vmrs	APSR_nzcv, fpscr
   17e90:	bpl	17eb4 <__assert_fail@plt+0x6f40>
   17e94:	vldr	s8, [r0, #4]
   17e98:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17e9c:	vcmpe.f32	s8, s10
   17ea0:	vmrs	APSR_nzcv, fpscr
   17ea4:	bhi	17eb4 <__assert_fail@plt+0x6f40>
   17ea8:	vcmpe.f32	s6, s8
   17eac:	vmrs	APSR_nzcv, fpscr
   17eb0:	bmi	17ec4 <__assert_fail@plt+0x6f50>
   17eb4:	vldr	s2, [pc, #460]	; 18088 <__assert_fail@plt+0x7114>
   17eb8:	movw	r0, #36728	; 0x8f78
   17ebc:	movt	r0, #1
   17ec0:	str	r0, [r4, #20]
   17ec4:	vmul.f32	s6, s2, s0
   17ec8:	vcmpe.f32	s6, s4
   17ecc:	vmrs	APSR_nzcv, fpscr
   17ed0:	bmi	17eec <__assert_fail@plt+0x6f78>
   17ed4:	b	17f90 <__assert_fail@plt+0x701c>
   17ed8:	mov	r0, r1
   17edc:	vmul.f32	s6, s2, s0
   17ee0:	vcmpe.f32	s6, s4
   17ee4:	vmrs	APSR_nzcv, fpscr
   17ee8:	bpl	17f90 <__assert_fail@plt+0x701c>
   17eec:	vldr	s4, [r0, #12]
   17ef0:	ldrb	r0, [r0, #16]
   17ef4:	mvn	r7, #0
   17ef8:	vmul.f32	s0, s4, s0
   17efc:	vldr	s4, [pc, #392]	; 1808c <__assert_fail@plt+0x7118>
   17f00:	cmp	r0, #0
   17f04:	vmul.f32	s2, s2, s0
   17f08:	vseleq.f32	s0, s2, s0
   17f0c:	vcmpe.f32	s0, s4
   17f10:	vmrs	APSR_nzcv, fpscr
   17f14:	bge	1800c <__assert_fail@plt+0x7098>
   17f18:	vcvt.u32.f32	s0, s0
   17f1c:	mov	r0, r4
   17f20:	vmov	r1, s0
   17f24:	bl	17874 <__assert_fail@plt+0x6900>
   17f28:	cmp	r0, #0
   17f2c:	beq	1800c <__assert_fail@plt+0x7098>
   17f30:	ldr	r1, [r4, #8]
   17f34:	ldr	r2, [r4, #24]
   17f38:	mov	r0, sl
   17f3c:	blx	r2
   17f40:	mov	r7, r0
   17f44:	ldr	r0, [r4, #8]
   17f48:	cmp	r7, r0
   17f4c:	bcs	18078 <__assert_fail@plt+0x7104>
   17f50:	ldr	r5, [r4]
   17f54:	mov	r9, r5
   17f58:	ldr	r1, [r9, r7, lsl #3]!
   17f5c:	cmp	r1, #0
   17f60:	beq	17fb8 <__assert_fail@plt+0x7044>
   17f64:	cmp	r1, sl
   17f68:	mov	r0, sl
   17f6c:	beq	17f88 <__assert_fail@plt+0x7014>
   17f70:	ldr	r2, [r4, #28]
   17f74:	mov	r0, sl
   17f78:	blx	r2
   17f7c:	cmp	r0, #0
   17f80:	beq	18028 <__assert_fail@plt+0x70b4>
   17f84:	ldr	r0, [r9]
   17f88:	cmp	r0, #0
   17f8c:	bne	18078 <__assert_fail@plt+0x7104>
   17f90:	ldr	r0, [r9]
   17f94:	cmp	r0, #0
   17f98:	beq	17fb8 <__assert_fail@plt+0x7044>
   17f9c:	ldr	r0, [r4, #36]	; 0x24
   17fa0:	cmp	r0, #0
   17fa4:	beq	17fd8 <__assert_fail@plt+0x7064>
   17fa8:	mov	r1, r0
   17fac:	ldr	r2, [r1, #4]!
   17fb0:	str	r2, [r4, #36]	; 0x24
   17fb4:	b	17fec <__assert_fail@plt+0x7078>
   17fb8:	str	sl, [r9]
   17fbc:	ldr	r0, [r4, #12]
   17fc0:	ldr	r1, [r4, #16]
   17fc4:	add	r0, r0, #1
   17fc8:	add	r1, r1, #1
   17fcc:	str	r0, [r4, #12]
   17fd0:	str	r1, [r4, #16]
   17fd4:	b	18008 <__assert_fail@plt+0x7094>
   17fd8:	mov	r0, #8
   17fdc:	bl	1862c <__assert_fail@plt+0x76b8>
   17fe0:	cmp	r0, #0
   17fe4:	beq	18018 <__assert_fail@plt+0x70a4>
   17fe8:	add	r1, r0, #4
   17fec:	str	sl, [r0]
   17ff0:	ldr	r2, [r9, #4]
   17ff4:	str	r2, [r1]
   17ff8:	str	r0, [r9, #4]
   17ffc:	ldr	r0, [r4, #16]
   18000:	add	r0, r0, #1
   18004:	str	r0, [r4, #16]
   18008:	mov	r7, #1
   1800c:	mov	r0, r7
   18010:	sub	sp, fp, #28
   18014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18018:	mvn	r7, #0
   1801c:	mov	r0, r7
   18020:	sub	sp, fp, #28
   18024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18028:	add	r6, r5, r7, lsl #3
   1802c:	ldr	r0, [r6, #4]!
   18030:	cmp	r0, #0
   18034:	beq	17f90 <__assert_fail@plt+0x701c>
   18038:	ldr	r1, [r0]
   1803c:	cmp	r1, sl
   18040:	beq	1806c <__assert_fail@plt+0x70f8>
   18044:	ldr	r2, [r4, #28]
   18048:	mov	r0, sl
   1804c:	blx	r2
   18050:	ldr	r6, [r6]
   18054:	cmp	r0, #0
   18058:	beq	1802c <__assert_fail@plt+0x70b8>
   1805c:	ldr	r0, [r6]
   18060:	cmp	r0, #0
   18064:	beq	17f90 <__assert_fail@plt+0x701c>
   18068:	b	18078 <__assert_fail@plt+0x7104>
   1806c:	mov	r0, sl
   18070:	cmp	r0, #0
   18074:	beq	17f90 <__assert_fail@plt+0x701c>
   18078:	bl	10f38 <abort@plt>
   1807c:	stclcc	12, cr12, [ip, #820]	; 0x334
   18080:	svccc	0x00666666
   18084:	svccc	0x008ccccd
   18088:	svccc	0x004ccccd
   1808c:	svcmi	0x00800000
   18090:	push	{r4, sl, fp, lr}
   18094:	add	fp, sp, #8
   18098:	sub	sp, sp, #8
   1809c:	add	r2, sp, #4
   180a0:	mov	r4, r1
   180a4:	bl	17d24 <__assert_fail@plt+0x6db0>
   180a8:	cmn	r0, #1
   180ac:	beq	180c8 <__assert_fail@plt+0x7154>
   180b0:	ldr	r1, [sp, #4]
   180b4:	cmp	r0, #0
   180b8:	moveq	r4, r1
   180bc:	mov	r0, r4
   180c0:	sub	sp, fp, #8
   180c4:	pop	{r4, sl, fp, pc}
   180c8:	mov	r4, #0
   180cc:	mov	r0, r4
   180d0:	sub	sp, fp, #8
   180d4:	pop	{r4, sl, fp, pc}
   180d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   180dc:	add	fp, sp, #24
   180e0:	mov	r9, r1
   180e4:	ldr	r1, [r0, #8]
   180e8:	ldr	r2, [r0, #24]
   180ec:	mov	r5, r0
   180f0:	mov	r0, r9
   180f4:	blx	r2
   180f8:	mov	r7, r0
   180fc:	ldr	r0, [r5, #8]
   18100:	cmp	r7, r0
   18104:	bcs	18374 <__assert_fail@plt+0x7400>
   18108:	ldr	r6, [r5]
   1810c:	mov	r8, #0
   18110:	mov	r4, r6
   18114:	ldr	r1, [r4, r7, lsl #3]!
   18118:	cmp	r1, #0
   1811c:	beq	181d0 <__assert_fail@plt+0x725c>
   18120:	cmp	r1, r9
   18124:	beq	18140 <__assert_fail@plt+0x71cc>
   18128:	ldr	r2, [r5, #28]
   1812c:	mov	r0, r9
   18130:	blx	r2
   18134:	cmp	r0, #0
   18138:	beq	18178 <__assert_fail@plt+0x7204>
   1813c:	ldr	r9, [r4]
   18140:	add	r0, r6, r7, lsl #3
   18144:	ldr	r0, [r0, #4]
   18148:	cmp	r0, #0
   1814c:	beq	181c0 <__assert_fail@plt+0x724c>
   18150:	ldm	r0, {r1, r2}
   18154:	stm	r4, {r1, r2}
   18158:	mov	r1, #0
   1815c:	str	r1, [r0]
   18160:	ldr	r1, [r5, #36]	; 0x24
   18164:	str	r1, [r0, #4]
   18168:	str	r0, [r5, #36]	; 0x24
   1816c:	cmp	r9, #0
   18170:	bne	18208 <__assert_fail@plt+0x7294>
   18174:	b	181d0 <__assert_fail@plt+0x725c>
   18178:	add	r7, r6, r7, lsl #3
   1817c:	ldr	r0, [r7, #4]!
   18180:	cmp	r0, #0
   18184:	beq	181d0 <__assert_fail@plt+0x725c>
   18188:	ldr	r1, [r0]
   1818c:	cmp	r1, r9
   18190:	beq	181d8 <__assert_fail@plt+0x7264>
   18194:	ldr	r2, [r5, #28]
   18198:	mov	r0, r9
   1819c:	blx	r2
   181a0:	ldr	r1, [r7]
   181a4:	cmp	r0, #0
   181a8:	bne	181e0 <__assert_fail@plt+0x726c>
   181ac:	ldr	r0, [r1, #4]!
   181b0:	cmp	r0, #0
   181b4:	mov	r7, r1
   181b8:	bne	18188 <__assert_fail@plt+0x7214>
   181bc:	b	181d0 <__assert_fail@plt+0x725c>
   181c0:	mov	r0, #0
   181c4:	str	r0, [r4]
   181c8:	cmp	r9, #0
   181cc:	bne	18208 <__assert_fail@plt+0x7294>
   181d0:	mov	r0, r8
   181d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   181d8:	mov	r1, r0
   181dc:	b	181e4 <__assert_fail@plt+0x7270>
   181e0:	ldr	r9, [r1]
   181e4:	ldr	r0, [r1, #4]
   181e8:	str	r0, [r7]
   181ec:	mov	r0, #0
   181f0:	str	r0, [r1]
   181f4:	ldr	r0, [r5, #36]	; 0x24
   181f8:	str	r0, [r1, #4]
   181fc:	str	r1, [r5, #36]	; 0x24
   18200:	cmp	r9, #0
   18204:	beq	181d0 <__assert_fail@plt+0x725c>
   18208:	ldr	r0, [r5, #16]
   1820c:	sub	r0, r0, #1
   18210:	str	r0, [r5, #16]
   18214:	ldr	r0, [r4]
   18218:	cmp	r0, #0
   1821c:	bne	18334 <__assert_fail@plt+0x73c0>
   18220:	ldr	r0, [r5, #12]
   18224:	vldr	s0, [r5, #8]
   18228:	sub	r1, r0, #1
   1822c:	str	r1, [r5, #12]
   18230:	vmov	s2, r1
   18234:	ldr	r0, [r5, #20]
   18238:	vcvt.f32.u32	s0, s0
   1823c:	vcvt.f32.u32	s2, s2
   18240:	vldr	s4, [r0]
   18244:	vmul.f32	s6, s4, s0
   18248:	vcmpe.f32	s6, s2
   1824c:	vmrs	APSR_nzcv, fpscr
   18250:	ble	18334 <__assert_fail@plt+0x73c0>
   18254:	movw	r1, #36728	; 0x8f78
   18258:	movt	r1, #1
   1825c:	cmp	r0, r1
   18260:	beq	182c8 <__assert_fail@plt+0x7354>
   18264:	vldr	s8, [pc, #268]	; 18378 <__assert_fail@plt+0x7404>
   18268:	vldr	s6, [r0, #8]
   1826c:	vcmpe.f32	s6, s8
   18270:	vmrs	APSR_nzcv, fpscr
   18274:	ble	182a4 <__assert_fail@plt+0x7330>
   18278:	vldr	s10, [pc, #252]	; 1837c <__assert_fail@plt+0x7408>
   1827c:	vcmpe.f32	s6, s10
   18280:	vmrs	APSR_nzcv, fpscr
   18284:	bpl	182a4 <__assert_fail@plt+0x7330>
   18288:	vcmpe.f32	s4, #0.0
   1828c:	vmrs	APSR_nzcv, fpscr
   18290:	vldrge	s10, [r0, #12]
   18294:	vldrge	s12, [pc, #228]	; 18380 <__assert_fail@plt+0x740c>
   18298:	vcmpege.f32	s10, s12
   1829c:	vmrsge	APSR_nzcv, fpscr
   182a0:	bgt	18340 <__assert_fail@plt+0x73cc>
   182a4:	vldr	s4, [pc, #216]	; 18384 <__assert_fail@plt+0x7410>
   182a8:	movw	r0, #36728	; 0x8f78
   182ac:	movt	r0, #1
   182b0:	str	r0, [r5, #20]
   182b4:	vmul.f32	s4, s4, s0
   182b8:	vcmpe.f32	s4, s2
   182bc:	vmrs	APSR_nzcv, fpscr
   182c0:	bgt	182dc <__assert_fail@plt+0x7368>
   182c4:	b	18334 <__assert_fail@plt+0x73c0>
   182c8:	mov	r0, r1
   182cc:	vmul.f32	s4, s4, s0
   182d0:	vcmpe.f32	s4, s2
   182d4:	vmrs	APSR_nzcv, fpscr
   182d8:	ble	18334 <__assert_fail@plt+0x73c0>
   182dc:	ldrb	r1, [r0, #16]
   182e0:	vldr	s2, [r0, #4]
   182e4:	cmp	r1, #0
   182e8:	vmul.f32	s0, s2, s0
   182ec:	vldreq	s2, [r0, #8]
   182f0:	mov	r0, r5
   182f4:	vmuleq.f32	s0, s0, s2
   182f8:	vcvt.u32.f32	s0, s0
   182fc:	vmov	r1, s0
   18300:	bl	17874 <__assert_fail@plt+0x6900>
   18304:	cmp	r0, #0
   18308:	bne	18334 <__assert_fail@plt+0x73c0>
   1830c:	ldr	r0, [r5, #36]	; 0x24
   18310:	cmp	r0, #0
   18314:	beq	1832c <__assert_fail@plt+0x73b8>
   18318:	ldr	r4, [r0, #4]
   1831c:	bl	13598 <__assert_fail@plt+0x2624>
   18320:	cmp	r4, #0
   18324:	mov	r0, r4
   18328:	bne	18318 <__assert_fail@plt+0x73a4>
   1832c:	mov	r0, #0
   18330:	str	r0, [r5, #36]	; 0x24
   18334:	mov	r8, r9
   18338:	mov	r0, r8
   1833c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18340:	vadd.f32	s8, s4, s8
   18344:	vcmpe.f32	s8, s6
   18348:	vmrs	APSR_nzcv, fpscr
   1834c:	bpl	182a4 <__assert_fail@plt+0x7330>
   18350:	vldr	s6, [r0, #4]
   18354:	vmov.f32	s10, #112	; 0x3f800000  1.0
   18358:	vcmpe.f32	s6, s10
   1835c:	vmrs	APSR_nzcv, fpscr
   18360:	bhi	182a4 <__assert_fail@plt+0x7330>
   18364:	vcmpe.f32	s8, s6
   18368:	vmrs	APSR_nzcv, fpscr
   1836c:	bmi	182cc <__assert_fail@plt+0x7358>
   18370:	b	182a4 <__assert_fail@plt+0x7330>
   18374:	bl	10f38 <abort@plt>
   18378:	stclcc	12, cr12, [ip, #820]	; 0x334
   1837c:	svccc	0x00666666
   18380:	svccc	0x008ccccd
   18384:	andeq	r0, r0, r0
   18388:	b	180d8 <__assert_fail@plt+0x7164>
   1838c:	mov	r3, #1
   18390:	mov	r2, #0
   18394:	vdup.32	q8, r1
   18398:	strb	r3, [r0, #28]
   1839c:	str	r2, [r0, #20]
   183a0:	str	r2, [r0, #24]
   183a4:	vst1.32	{d16-d17}, [r0]!
   183a8:	str	r1, [r0]
   183ac:	bx	lr
   183b0:	ldrb	r0, [r0, #28]
   183b4:	bx	lr
   183b8:	push	{fp, lr}
   183bc:	mov	fp, sp
   183c0:	ldrb	r3, [r0, #28]
   183c4:	ldr	r2, [r0, #20]
   183c8:	eor	lr, r3, #1
   183cc:	add	r2, r2, lr
   183d0:	and	r3, r2, #3
   183d4:	ldr	ip, [r0, r3, lsl #2]
   183d8:	str	r1, [r0, r3, lsl #2]
   183dc:	str	r3, [r0, #20]
   183e0:	ldr	r1, [r0, #24]
   183e4:	cmp	r3, r1
   183e8:	addeq	r1, r2, lr
   183ec:	andeq	r1, r1, #3
   183f0:	streq	r1, [r0, #24]
   183f4:	mov	r1, #0
   183f8:	strb	r1, [r0, #28]
   183fc:	mov	r0, ip
   18400:	pop	{fp, pc}
   18404:	ldrb	r1, [r0, #28]
   18408:	cmp	r1, #0
   1840c:	bne	18450 <__assert_fail@plt+0x74dc>
   18410:	ldr	r3, [r0, #20]
   18414:	ldr	r2, [r0, #16]
   18418:	ldr	r1, [r0, r3, lsl #2]
   1841c:	str	r2, [r0, r3, lsl #2]
   18420:	ldr	r2, [r0, #20]
   18424:	ldr	r3, [r0, #24]
   18428:	cmp	r2, r3
   1842c:	moveq	r2, #1
   18430:	strbeq	r2, [r0, #28]
   18434:	moveq	r0, r1
   18438:	bxeq	lr
   1843c:	sub	r2, r2, #1
   18440:	and	r2, r2, #3
   18444:	str	r2, [r0, #20]
   18448:	mov	r0, r1
   1844c:	bx	lr
   18450:	push	{fp, lr}
   18454:	mov	fp, sp
   18458:	bl	10f38 <abort@plt>
   1845c:	push	{r4, r5, r6, sl, fp, lr}
   18460:	add	fp, sp, #16
   18464:	mov	r5, r0
   18468:	mov	r0, #0
   1846c:	mov	r4, r1
   18470:	add	r6, r2, #19
   18474:	strb	r0, [r2, #20]
   18478:	mov	r0, r5
   1847c:	mov	r1, r4
   18480:	mov	r2, #10
   18484:	mov	r3, #0
   18488:	bl	18aac <__assert_fail@plt+0x7b38>
   1848c:	add	r2, r0, r0, lsl #2
   18490:	sub	r2, r5, r2, lsl #1
   18494:	orr	r2, r2, #48	; 0x30
   18498:	strb	r2, [r6], #-1
   1849c:	rsbs	r2, r5, #9
   184a0:	mov	r5, r0
   184a4:	rscs	r2, r4, #0
   184a8:	mov	r4, r1
   184ac:	bcc	18478 <__assert_fail@plt+0x7504>
   184b0:	add	r0, r6, #1
   184b4:	pop	{r4, r5, r6, sl, fp, pc}
   184b8:	sub	sp, sp, #8
   184bc:	push	{fp, lr}
   184c0:	mov	fp, sp
   184c4:	sub	sp, sp, #8
   184c8:	str	r2, [fp, #8]
   184cc:	add	r2, fp, #8
   184d0:	str	r3, [fp, #12]
   184d4:	orr	r2, r2, #4
   184d8:	str	r2, [sp, #4]
   184dc:	ldr	r2, [fp, #8]
   184e0:	bl	10ddc <ioctl@plt>
   184e4:	mov	sp, fp
   184e8:	pop	{fp, lr}
   184ec:	add	sp, sp, #8
   184f0:	bx	lr
   184f4:	sub	sp, sp, #4
   184f8:	push	{fp, lr}
   184fc:	mov	fp, sp
   18500:	sub	sp, sp, #4
   18504:	str	r3, [fp, #8]
   18508:	mov	r3, #0
   1850c:	tst	r2, #64	; 0x40
   18510:	addne	r3, fp, #8
   18514:	addne	r3, r3, #4
   18518:	strne	r3, [sp]
   1851c:	ldrne	r3, [fp, #8]
   18520:	bl	10e60 <openat64@plt>
   18524:	bl	18594 <__assert_fail@plt+0x7620>
   18528:	mov	sp, fp
   1852c:	pop	{fp, lr}
   18530:	add	sp, sp, #4
   18534:	bx	lr
   18538:	push	{r4, r5, r6, sl, fp, lr}
   1853c:	add	fp, sp, #16
   18540:	orr	r2, r2, #18688	; 0x4900
   18544:	mov	r4, r3
   18548:	orr	r2, r2, #524288	; 0x80000
   1854c:	bl	184f4 <__assert_fail@plt+0x7580>
   18550:	mov	r5, r0
   18554:	mov	r0, #0
   18558:	cmp	r5, #0
   1855c:	poplt	{r4, r5, r6, sl, fp, pc}
   18560:	mov	r0, r5
   18564:	bl	10ecc <fdopendir@plt>
   18568:	cmp	r0, #0
   1856c:	strne	r5, [r4]
   18570:	popne	{r4, r5, r6, sl, fp, pc}
   18574:	bl	10e78 <__errno_location@plt>
   18578:	ldr	r6, [r0]
   1857c:	mov	r4, r0
   18580:	mov	r0, r5
   18584:	bl	10f44 <close@plt>
   18588:	mov	r0, #0
   1858c:	str	r6, [r4]
   18590:	pop	{r4, r5, r6, sl, fp, pc}
   18594:	push	{r4, r5, r6, r7, fp, lr}
   18598:	add	fp, sp, #16
   1859c:	mov	r4, r0
   185a0:	cmp	r0, #2
   185a4:	movhi	r0, r4
   185a8:	pophi	{r4, r5, r6, r7, fp, pc}
   185ac:	mov	r0, r4
   185b0:	bl	189cc <__assert_fail@plt+0x7a58>
   185b4:	mov	r5, r0
   185b8:	bl	10e78 <__errno_location@plt>
   185bc:	ldr	r7, [r0]
   185c0:	mov	r6, r0
   185c4:	mov	r0, r4
   185c8:	bl	10f44 <close@plt>
   185cc:	mov	r0, r5
   185d0:	str	r7, [r6]
   185d4:	pop	{r4, r5, r6, r7, fp, pc}
   185d8:	clz	r2, r1
   185dc:	clz	r3, r0
   185e0:	lsr	r2, r2, #5
   185e4:	lsr	r3, r3, #5
   185e8:	orrs	r2, r3, r2
   185ec:	movwne	r1, #1
   185f0:	movwne	r0, #1
   185f4:	cmp	r1, #0
   185f8:	beq	18628 <__assert_fail@plt+0x76b4>
   185fc:	mvn	r2, #-2147483648	; 0x80000000
   18600:	udiv	r2, r2, r1
   18604:	cmp	r2, r0
   18608:	bcs	18628 <__assert_fail@plt+0x76b4>
   1860c:	push	{fp, lr}
   18610:	mov	fp, sp
   18614:	bl	10e78 <__errno_location@plt>
   18618:	mov	r1, #12
   1861c:	str	r1, [r0]
   18620:	mov	r0, #0
   18624:	pop	{fp, pc}
   18628:	b	10d04 <calloc@plt>
   1862c:	cmp	r0, #0
   18630:	movweq	r0, #1
   18634:	cmn	r0, #1
   18638:	ble	18640 <__assert_fail@plt+0x76cc>
   1863c:	b	10e0c <malloc@plt>
   18640:	push	{fp, lr}
   18644:	mov	fp, sp
   18648:	bl	10e78 <__errno_location@plt>
   1864c:	mov	r1, #12
   18650:	str	r1, [r0]
   18654:	mov	r0, #0
   18658:	pop	{fp, pc}
   1865c:	push	{fp, lr}
   18660:	mov	fp, sp
   18664:	cmp	r0, #0
   18668:	beq	18684 <__assert_fail@plt+0x7710>
   1866c:	cmp	r1, #0
   18670:	beq	18690 <__assert_fail@plt+0x771c>
   18674:	cmn	r1, #1
   18678:	ble	1869c <__assert_fail@plt+0x7728>
   1867c:	pop	{fp, lr}
   18680:	b	10d94 <realloc@plt>
   18684:	mov	r0, r1
   18688:	pop	{fp, lr}
   1868c:	b	1862c <__assert_fail@plt+0x76b8>
   18690:	bl	13598 <__assert_fail@plt+0x2624>
   18694:	mov	r0, #0
   18698:	pop	{fp, pc}
   1869c:	bl	10e78 <__errno_location@plt>
   186a0:	mov	r1, #12
   186a4:	str	r1, [r0]
   186a8:	mov	r0, #0
   186ac:	pop	{fp, pc}
   186b0:	movw	r2, #62998	; 0xf616
   186b4:	mov	r1, #0
   186b8:	movt	r2, #149	; 0x95
   186bc:	str	r1, [r0, #16]
   186c0:	str	r1, [r0, #20]
   186c4:	str	r2, [r0, #24]
   186c8:	bx	lr
   186cc:	push	{r4, r5, r6, r7, fp, lr}
   186d0:	add	fp, sp, #16
   186d4:	ldr	r2, [r0, #24]
   186d8:	movw	r3, #62998	; 0xf616
   186dc:	movt	r3, #149	; 0x95
   186e0:	cmp	r2, r3
   186e4:	bne	18784 <__assert_fail@plt+0x7810>
   186e8:	mov	r3, r0
   186ec:	ldr	r2, [r3, #16]!
   186f0:	ldr	lr, [r3, #4]
   186f4:	orrs	r5, r2, lr
   186f8:	beq	18730 <__assert_fail@plt+0x77bc>
   186fc:	ldrd	r4, [r0]
   18700:	ldrd	r6, [r1, #96]	; 0x60
   18704:	eor	r7, r7, r5
   18708:	eor	r6, r6, r4
   1870c:	orrs	r7, r6, r7
   18710:	bne	18730 <__assert_fail@plt+0x77bc>
   18714:	ldrd	r4, [r0, #8]
   18718:	ldrd	r6, [r1]
   1871c:	mov	ip, #1
   18720:	eor	r7, r7, r5
   18724:	eor	r6, r6, r4
   18728:	orrs	r7, r6, r7
   1872c:	beq	18750 <__assert_fail@plt+0x77dc>
   18730:	adds	r4, r2, #1
   18734:	mov	ip, #0
   18738:	adc	r5, lr, #0
   1873c:	and	r2, r4, r2
   18740:	strd	r4, [r3]
   18744:	and	r3, r5, lr
   18748:	orrs	r2, r2, r3
   1874c:	beq	18758 <__assert_fail@plt+0x77e4>
   18750:	mov	r0, ip
   18754:	pop	{r4, r5, r6, r7, fp, pc}
   18758:	orrs	r2, r4, r5
   1875c:	moveq	ip, #1
   18760:	moveq	r0, ip
   18764:	popeq	{r4, r5, r6, r7, fp, pc}
   18768:	ldrd	r2, [r1]
   1876c:	str	r3, [r0, #12]
   18770:	str	r2, [r0, #8]
   18774:	ldrd	r2, [r1, #96]	; 0x60
   18778:	stm	r0, {r2, r3}
   1877c:	mov	r0, ip
   18780:	pop	{r4, r5, r6, r7, fp, pc}
   18784:	movw	r0, #36748	; 0x8f8c
   18788:	movw	r1, #36772	; 0x8fa4
   1878c:	movw	r3, #36786	; 0x8fb2
   18790:	mov	r2, #60	; 0x3c
   18794:	movt	r0, #1
   18798:	movt	r1, #1
   1879c:	movt	r3, #1
   187a0:	bl	10f74 <__assert_fail@plt>
   187a4:	sub	sp, sp, #8
   187a8:	push	{r4, r5, r6, r7, fp, lr}
   187ac:	add	fp, sp, #16
   187b0:	sub	sp, sp, #8
   187b4:	mov	r5, r0
   187b8:	add	r0, fp, #8
   187bc:	cmp	r1, #11
   187c0:	str	r3, [fp, #12]
   187c4:	str	r2, [fp, #8]
   187c8:	str	r0, [sp, #4]
   187cc:	bhi	18808 <__assert_fail@plt+0x7894>
   187d0:	mov	r0, #1
   187d4:	movw	r2, #1300	; 0x514
   187d8:	tst	r2, r0, lsl r1
   187dc:	bne	188c8 <__assert_fail@plt+0x7954>
   187e0:	movw	r2, #2570	; 0xa0a
   187e4:	tst	r2, r0, lsl r1
   187e8:	bne	18830 <__assert_fail@plt+0x78bc>
   187ec:	cmp	r1, #0
   187f0:	bne	18808 <__assert_fail@plt+0x7894>
   187f4:	ldr	r0, [sp, #4]
   187f8:	add	r1, r0, #4
   187fc:	str	r1, [sp, #4]
   18800:	mov	r1, #0
   18804:	b	188d4 <__assert_fail@plt+0x7960>
   18808:	sub	r0, r1, #1024	; 0x400
   1880c:	cmp	r0, #10
   18810:	bhi	188c8 <__assert_fail@plt+0x7954>
   18814:	mov	r2, #1
   18818:	movw	r3, #645	; 0x285
   1881c:	tst	r3, r2, lsl r0
   18820:	bne	188c8 <__assert_fail@plt+0x7954>
   18824:	movw	r3, #1282	; 0x502
   18828:	tst	r3, r2, lsl r0
   1882c:	beq	1883c <__assert_fail@plt+0x78c8>
   18830:	mov	r0, r5
   18834:	bl	10e9c <fcntl64@plt>
   18838:	b	188e0 <__assert_fail@plt+0x796c>
   1883c:	cmp	r0, #6
   18840:	bne	188c8 <__assert_fail@plt+0x7954>
   18844:	ldr	r0, [sp, #4]
   18848:	movw	r7, #41304	; 0xa158
   1884c:	movt	r7, #2
   18850:	add	r1, r0, #4
   18854:	str	r1, [sp, #4]
   18858:	ldr	r6, [r0]
   1885c:	ldr	r0, [r7]
   18860:	cmp	r0, #0
   18864:	blt	18904 <__assert_fail@plt+0x7990>
   18868:	mov	r0, r5
   1886c:	movw	r1, #1030	; 0x406
   18870:	mov	r2, r6
   18874:	bl	10e9c <fcntl64@plt>
   18878:	mov	r4, r0
   1887c:	cmn	r0, #1
   18880:	bgt	188f8 <__assert_fail@plt+0x7984>
   18884:	bl	10e78 <__errno_location@plt>
   18888:	ldr	r0, [r0]
   1888c:	cmp	r0, #22
   18890:	bne	188f8 <__assert_fail@plt+0x7984>
   18894:	mov	r0, r5
   18898:	mov	r1, #0
   1889c:	mov	r2, r6
   188a0:	bl	10e9c <fcntl64@plt>
   188a4:	mov	r4, r0
   188a8:	cmp	r0, #0
   188ac:	blt	188e4 <__assert_fail@plt+0x7970>
   188b0:	mvn	r0, #0
   188b4:	str	r0, [r7]
   188b8:	mov	r0, #1
   188bc:	cmp	r0, #0
   188c0:	bne	18930 <__assert_fail@plt+0x79bc>
   188c4:	b	188e4 <__assert_fail@plt+0x7970>
   188c8:	ldr	r0, [sp, #4]
   188cc:	add	r2, r0, #4
   188d0:	str	r2, [sp, #4]
   188d4:	ldr	r2, [r0]
   188d8:	mov	r0, r5
   188dc:	bl	10e9c <fcntl64@plt>
   188e0:	mov	r4, r0
   188e4:	mov	r0, r4
   188e8:	sub	sp, fp, #16
   188ec:	pop	{r4, r5, r6, r7, fp, lr}
   188f0:	add	sp, sp, #8
   188f4:	bx	lr
   188f8:	mov	r0, #1
   188fc:	str	r0, [r7]
   18900:	b	188e4 <__assert_fail@plt+0x7970>
   18904:	mov	r0, r5
   18908:	mov	r1, #0
   1890c:	mov	r2, r6
   18910:	bl	10e9c <fcntl64@plt>
   18914:	mov	r4, r0
   18918:	ldr	r0, [r7]
   1891c:	add	r0, r0, #1
   18920:	clz	r0, r0
   18924:	lsr	r0, r0, #5
   18928:	cmp	r0, #0
   1892c:	beq	188e4 <__assert_fail@plt+0x7970>
   18930:	cmp	r4, #0
   18934:	blt	188e4 <__assert_fail@plt+0x7970>
   18938:	mov	r0, r4
   1893c:	mov	r1, #1
   18940:	bl	10e9c <fcntl64@plt>
   18944:	cmp	r0, #0
   18948:	blt	18964 <__assert_fail@plt+0x79f0>
   1894c:	orr	r2, r0, #1
   18950:	mov	r0, r4
   18954:	mov	r1, #2
   18958:	bl	10e9c <fcntl64@plt>
   1895c:	cmn	r0, #1
   18960:	bne	188e4 <__assert_fail@plt+0x7970>
   18964:	bl	10e78 <__errno_location@plt>
   18968:	ldr	r6, [r0]
   1896c:	mov	r5, r0
   18970:	mov	r0, r4
   18974:	bl	10f44 <close@plt>
   18978:	str	r6, [r5]
   1897c:	mvn	r4, #0
   18980:	b	188e4 <__assert_fail@plt+0x7970>
   18984:	sub	sp, sp, #8
   18988:	push	{fp, lr}
   1898c:	mov	fp, sp
   18990:	sub	sp, sp, #8
   18994:	str	r2, [fp, #8]
   18998:	mov	r2, #0
   1899c:	tst	r1, #64	; 0x40
   189a0:	str	r3, [fp, #12]
   189a4:	addne	r2, fp, #8
   189a8:	orrne	r2, r2, #4
   189ac:	strne	r2, [sp, #4]
   189b0:	ldrne	r2, [fp, #8]
   189b4:	bl	10df4 <open64@plt>
   189b8:	bl	18594 <__assert_fail@plt+0x7620>
   189bc:	mov	sp, fp
   189c0:	pop	{fp, lr}
   189c4:	add	sp, sp, #8
   189c8:	bx	lr
   189cc:	mov	r1, #0
   189d0:	mov	r2, #3
   189d4:	b	187a4 <__assert_fail@plt+0x7830>
   189d8:	cmp	r3, #0
   189dc:	cmpeq	r2, #0
   189e0:	bne	18a04 <__assert_fail@plt+0x7a90>
   189e4:	cmp	r1, #0
   189e8:	movlt	r1, #-2147483648	; 0x80000000
   189ec:	movlt	r0, #0
   189f0:	blt	18a00 <__assert_fail@plt+0x7a8c>
   189f4:	cmpeq	r0, #0
   189f8:	mvnne	r1, #-2147483648	; 0x80000000
   189fc:	mvnne	r0, #0
   18a00:	b	18ae8 <__assert_fail@plt+0x7b74>
   18a04:	sub	sp, sp, #8
   18a08:	push	{sp, lr}
   18a0c:	cmp	r1, #0
   18a10:	blt	18a30 <__assert_fail@plt+0x7abc>
   18a14:	cmp	r3, #0
   18a18:	blt	18a64 <__assert_fail@plt+0x7af0>
   18a1c:	bl	18af8 <__assert_fail@plt+0x7b84>
   18a20:	ldr	lr, [sp, #4]
   18a24:	add	sp, sp, #8
   18a28:	pop	{r2, r3}
   18a2c:	bx	lr
   18a30:	rsbs	r0, r0, #0
   18a34:	sbc	r1, r1, r1, lsl #1
   18a38:	cmp	r3, #0
   18a3c:	blt	18a88 <__assert_fail@plt+0x7b14>
   18a40:	bl	18af8 <__assert_fail@plt+0x7b84>
   18a44:	ldr	lr, [sp, #4]
   18a48:	add	sp, sp, #8
   18a4c:	pop	{r2, r3}
   18a50:	rsbs	r0, r0, #0
   18a54:	sbc	r1, r1, r1, lsl #1
   18a58:	rsbs	r2, r2, #0
   18a5c:	sbc	r3, r3, r3, lsl #1
   18a60:	bx	lr
   18a64:	rsbs	r2, r2, #0
   18a68:	sbc	r3, r3, r3, lsl #1
   18a6c:	bl	18af8 <__assert_fail@plt+0x7b84>
   18a70:	ldr	lr, [sp, #4]
   18a74:	add	sp, sp, #8
   18a78:	pop	{r2, r3}
   18a7c:	rsbs	r0, r0, #0
   18a80:	sbc	r1, r1, r1, lsl #1
   18a84:	bx	lr
   18a88:	rsbs	r2, r2, #0
   18a8c:	sbc	r3, r3, r3, lsl #1
   18a90:	bl	18af8 <__assert_fail@plt+0x7b84>
   18a94:	ldr	lr, [sp, #4]
   18a98:	add	sp, sp, #8
   18a9c:	pop	{r2, r3}
   18aa0:	rsbs	r2, r2, #0
   18aa4:	sbc	r3, r3, r3, lsl #1
   18aa8:	bx	lr
   18aac:	cmp	r3, #0
   18ab0:	cmpeq	r2, #0
   18ab4:	bne	18acc <__assert_fail@plt+0x7b58>
   18ab8:	cmp	r1, #0
   18abc:	cmpeq	r0, #0
   18ac0:	mvnne	r1, #0
   18ac4:	mvnne	r0, #0
   18ac8:	b	18ae8 <__assert_fail@plt+0x7b74>
   18acc:	sub	sp, sp, #8
   18ad0:	push	{sp, lr}
   18ad4:	bl	18af8 <__assert_fail@plt+0x7b84>
   18ad8:	ldr	lr, [sp, #4]
   18adc:	add	sp, sp, #8
   18ae0:	pop	{r2, r3}
   18ae4:	bx	lr
   18ae8:	push	{r1, lr}
   18aec:	mov	r0, #8
   18af0:	bl	10d10 <raise@plt>
   18af4:	pop	{r1, pc}
   18af8:	cmp	r1, r3
   18afc:	cmpeq	r0, r2
   18b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b04:	mov	r4, r0
   18b08:	movcc	r0, #0
   18b0c:	mov	r5, r1
   18b10:	ldr	lr, [sp, #36]	; 0x24
   18b14:	movcc	r1, r0
   18b18:	bcc	18c14 <__assert_fail@plt+0x7ca0>
   18b1c:	cmp	r3, #0
   18b20:	clzeq	ip, r2
   18b24:	clzne	ip, r3
   18b28:	addeq	ip, ip, #32
   18b2c:	cmp	r5, #0
   18b30:	clzeq	r1, r4
   18b34:	addeq	r1, r1, #32
   18b38:	clzne	r1, r5
   18b3c:	sub	ip, ip, r1
   18b40:	sub	sl, ip, #32
   18b44:	lsl	r9, r3, ip
   18b48:	rsb	fp, ip, #32
   18b4c:	orr	r9, r9, r2, lsl sl
   18b50:	orr	r9, r9, r2, lsr fp
   18b54:	lsl	r8, r2, ip
   18b58:	cmp	r5, r9
   18b5c:	cmpeq	r4, r8
   18b60:	movcc	r0, #0
   18b64:	movcc	r1, r0
   18b68:	bcc	18b84 <__assert_fail@plt+0x7c10>
   18b6c:	mov	r0, #1
   18b70:	subs	r4, r4, r8
   18b74:	lsl	r1, r0, sl
   18b78:	orr	r1, r1, r0, lsr fp
   18b7c:	lsl	r0, r0, ip
   18b80:	sbc	r5, r5, r9
   18b84:	cmp	ip, #0
   18b88:	beq	18c14 <__assert_fail@plt+0x7ca0>
   18b8c:	lsr	r6, r8, #1
   18b90:	orr	r6, r6, r9, lsl #31
   18b94:	lsr	r7, r9, #1
   18b98:	mov	r2, ip
   18b9c:	b	18bc0 <__assert_fail@plt+0x7c4c>
   18ba0:	subs	r3, r4, r6
   18ba4:	sbc	r8, r5, r7
   18ba8:	adds	r3, r3, r3
   18bac:	adc	r8, r8, r8
   18bb0:	adds	r4, r3, #1
   18bb4:	adc	r5, r8, #0
   18bb8:	subs	r2, r2, #1
   18bbc:	beq	18bdc <__assert_fail@plt+0x7c68>
   18bc0:	cmp	r5, r7
   18bc4:	cmpeq	r4, r6
   18bc8:	bcs	18ba0 <__assert_fail@plt+0x7c2c>
   18bcc:	adds	r4, r4, r4
   18bd0:	adc	r5, r5, r5
   18bd4:	subs	r2, r2, #1
   18bd8:	bne	18bc0 <__assert_fail@plt+0x7c4c>
   18bdc:	lsr	r3, r4, ip
   18be0:	orr	r3, r3, r5, lsl fp
   18be4:	lsr	r2, r5, ip
   18be8:	orr	r3, r3, r5, lsr sl
   18bec:	adds	r0, r0, r4
   18bf0:	mov	r4, r3
   18bf4:	lsl	r3, r2, ip
   18bf8:	orr	r3, r3, r4, lsl sl
   18bfc:	lsl	ip, r4, ip
   18c00:	orr	r3, r3, r4, lsr fp
   18c04:	adc	r1, r1, r5
   18c08:	subs	r0, r0, ip
   18c0c:	mov	r5, r2
   18c10:	sbc	r1, r1, r3
   18c14:	cmp	lr, #0
   18c18:	strdne	r4, [lr]
   18c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c24:	mov	r7, r0
   18c28:	ldr	r6, [pc, #72]	; 18c78 <__assert_fail@plt+0x7d04>
   18c2c:	ldr	r5, [pc, #72]	; 18c7c <__assert_fail@plt+0x7d08>
   18c30:	add	r6, pc, r6
   18c34:	add	r5, pc, r5
   18c38:	sub	r6, r6, r5
   18c3c:	mov	r8, r1
   18c40:	mov	r9, r2
   18c44:	bl	10cd8 <fstatfs64@plt-0x20>
   18c48:	asrs	r6, r6, #2
   18c4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c50:	mov	r4, #0
   18c54:	add	r4, r4, #1
   18c58:	ldr	r3, [r5], #4
   18c5c:	mov	r2, r9
   18c60:	mov	r1, r8
   18c64:	mov	r0, r7
   18c68:	blx	r3
   18c6c:	cmp	r6, r4
   18c70:	bne	18c54 <__assert_fail@plt+0x7ce0>
   18c74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c78:	ldrdeq	r1, [r1], -r4
   18c7c:	andeq	r1, r1, ip, asr #5
   18c80:	bx	lr

Disassembly of section .fini:

00018c84 <.fini>:
   18c84:	push	{r3, lr}
   18c88:	pop	{r3, pc}
