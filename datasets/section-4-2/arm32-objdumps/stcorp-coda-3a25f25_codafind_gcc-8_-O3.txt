
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

00010880 <.init>:
   10880:	push	{r3, lr}
   10884:	bl	10d30 <_start@@Base+0x3c>
   10888:	pop	{r3, pc}

Disassembly of section .plt:

0001088c <coda_match_filefilter@plt-0x14>:
   1088c:	push	{lr}		; (str lr, [sp, #-4]!)
   10890:	ldr	lr, [pc, #4]	; 1089c <coda_match_filefilter@plt-0x4>
   10894:	add	lr, pc, lr
   10898:	ldr	pc, [lr, #8]!
   1089c:	andeq	r1, r1, r4, ror #14

000108a0 <coda_match_filefilter@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #69632	; 0x11000
   108a8:	ldr	pc, [ip, #1892]!	; 0x764

000108ac <strcmp@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #69632	; 0x11000
   108b4:	ldr	pc, [ip, #1884]!	; 0x75c

000108b8 <printf@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #69632	; 0x11000
   108c0:	ldr	pc, [ip, #1876]!	; 0x754

000108c4 <coda_set_definition_path_conditional@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #69632	; 0x11000
   108cc:	ldr	pc, [ip, #1868]!	; 0x74c

000108d0 <coda_set_definition_path@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #69632	; 0x11000
   108d8:	ldr	pc, [ip, #1860]!	; 0x744

000108dc <fwrite@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #69632	; 0x11000
   108e4:	ldr	pc, [ip, #1852]!	; 0x73c

000108e8 <coda_done@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #69632	; 0x11000
   108f0:	ldr	pc, [ip, #1844]!	; 0x734

000108f4 <puts@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #69632	; 0x11000
   108fc:	ldr	pc, [ip, #1836]!	; 0x72c

00010900 <__libc_start_main@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #69632	; 0x11000
   10908:	ldr	pc, [ip, #1828]!	; 0x724

0001090c <__gmon_start__@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #69632	; 0x11000
   10914:	ldr	pc, [ip, #1820]!	; 0x71c

00010918 <exit@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #69632	; 0x11000
   10920:	ldr	pc, [ip, #1812]!	; 0x714

00010924 <fprintf@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #69632	; 0x11000
   1092c:	ldr	pc, [ip, #1804]!	; 0x70c

00010930 <coda_init@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #69632	; 0x11000
   10938:	ldr	pc, [ip, #1796]!	; 0x704

0001093c <coda_set_option_perform_conversions@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #69632	; 0x11000
   10944:	ldr	pc, [ip, #1788]!	; 0x6fc

00010948 <putchar@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #69632	; 0x11000
   10950:	ldr	pc, [ip, #1780]!	; 0x6f4

00010954 <coda_errno_to_string@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #69632	; 0x11000
   1095c:	ldr	pc, [ip, #1772]!	; 0x6ec

00010960 <coda_get_libcoda_version@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #69632	; 0x11000
   10968:	ldr	pc, [ip, #1764]!	; 0x6e4

0001096c <coda_get_errno@plt>:
   1096c:	add	ip, pc, #0, 12
   10970:	add	ip, ip, #69632	; 0x11000
   10974:	ldr	pc, [ip, #1756]!	; 0x6dc

00010978 <abort@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #69632	; 0x11000
   10980:	ldr	pc, [ip, #1748]!	; 0x6d4

00010984 <__assert_fail@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #69632	; 0x11000
   1098c:	ldr	pc, [ip, #1740]!	; 0x6cc

Disassembly of section .text:

00010990 <main@@Base>:
   10990:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10994:	movw	r4, #8304	; 0x2070
   10998:	movt	r4, #2
   1099c:	cmp	r0, #1
   109a0:	strd	r6, [sp, #8]
   109a4:	strd	r8, [sp, #16]
   109a8:	mov	r8, #0
   109ac:	strd	sl, [sp, #24]
   109b0:	str	lr, [sp, #32]
   109b4:	sub	sp, sp, #36	; 0x24
   109b8:	str	r8, [r4]
   109bc:	beq	109e4 <main@@Base+0x54>
   109c0:	mov	r7, r1
   109c4:	mov	r5, r0
   109c8:	ldr	r6, [r7, #4]
   109cc:	movw	r1, #5820	; 0x16bc
   109d0:	movt	r1, #1
   109d4:	mov	r0, r6
   109d8:	bl	108ac <strcmp@plt>
   109dc:	cmp	r0, r8
   109e0:	bne	109f0 <main@@Base+0x60>
   109e4:	bl	10de4 <_start@@Base+0xf0>
   109e8:	mov	r0, #0
   109ec:	bl	10918 <exit@plt>
   109f0:	movw	r1, #5824	; 0x16c0
   109f4:	movt	r1, #1
   109f8:	mov	r0, r6
   109fc:	bl	108ac <strcmp@plt>
   10a00:	cmp	r0, r8
   10a04:	beq	109e4 <main@@Base+0x54>
   10a08:	movw	r1, #5832	; 0x16c8
   10a0c:	movt	r1, #1
   10a10:	mov	r0, r6
   10a14:	bl	108ac <strcmp@plt>
   10a18:	cmp	r0, #0
   10a1c:	beq	10b64 <main@@Base+0x1d4>
   10a20:	movw	r1, #5836	; 0x16cc
   10a24:	movt	r1, #1
   10a28:	mov	r0, r6
   10a2c:	bl	108ac <strcmp@plt>
   10a30:	cmp	r0, #0
   10a34:	beq	10b64 <main@@Base+0x1d4>
   10a38:	cmp	r5, #2
   10a3c:	ble	10b94 <main@@Base+0x204>
   10a40:	mov	r0, r6
   10a44:	movw	r1, #5912	; 0x1718
   10a48:	movt	r1, #1
   10a4c:	bl	108ac <strcmp@plt>
   10a50:	subs	r6, r0, #0
   10a54:	beq	10c8c <main@@Base+0x2fc>
   10a58:	mov	r1, r8
   10a5c:	movw	r2, #5916	; 0x171c
   10a60:	movt	r2, #1
   10a64:	ldr	r0, [r7]
   10a68:	bl	108c4 <coda_set_definition_path_conditional@plt>
   10a6c:	cmp	r0, #0
   10a70:	bne	10cc0 <main@@Base+0x330>
   10a74:	mov	fp, #1
   10a78:	movw	r2, #5960	; 0x1748
   10a7c:	movt	r2, #1
   10a80:	movw	r3, #4600	; 0x11f8
   10a84:	movt	r3, #1
   10a88:	str	r2, [sp, #8]
   10a8c:	movw	r2, #5976	; 0x1758
   10a90:	movt	r2, #1
   10a94:	movw	r9, #5956	; 0x1744
   10a98:	movt	r9, #1
   10a9c:	str	r2, [sp, #12]
   10aa0:	movw	r2, #5980	; 0x175c
   10aa4:	movt	r2, #1
   10aa8:	mov	sl, #1
   10aac:	str	r4, [sp, #16]
   10ab0:	mov	r4, r3
   10ab4:	str	r2, [sp, #28]
   10ab8:	movw	r2, #5964	; 0x174c
   10abc:	movt	r2, #1
   10ac0:	str	r2, [sp, #24]
   10ac4:	mov	r2, #0
   10ac8:	str	r2, [sp, #20]
   10acc:	b	10b40 <main@@Base+0x1b0>
   10ad0:	mov	r1, r4
   10ad4:	mov	r0, r6
   10ad8:	bl	108ac <strcmp@plt>
   10adc:	cmp	r0, #0
   10ae0:	beq	10b5c <main@@Base+0x1cc>
   10ae4:	mov	r0, r6
   10ae8:	ldr	r1, [sp, #8]
   10aec:	bl	108ac <strcmp@plt>
   10af0:	cmp	r0, #0
   10af4:	beq	10b0c <main@@Base+0x17c>
   10af8:	mov	r0, r6
   10afc:	ldr	r1, [sp, #24]
   10b00:	bl	108ac <strcmp@plt>
   10b04:	cmp	r0, #0
   10b08:	bne	10c20 <main@@Base+0x290>
   10b0c:	add	r2, fp, #1
   10b10:	cmp	r2, r5
   10b14:	bge	10c20 <main@@Base+0x290>
   10b18:	add	r8, r7, r8
   10b1c:	ldr	r1, [r8, #4]
   10b20:	ldrb	r0, [r1]
   10b24:	cmp	r0, #45	; 0x2d
   10b28:	movne	fp, r2
   10b2c:	strne	r1, [sp, #20]
   10b30:	beq	10c20 <main@@Base+0x290>
   10b34:	add	fp, fp, #1
   10b38:	cmp	r5, fp
   10b3c:	ble	10c58 <main@@Base+0x2c8>
   10b40:	ldr	r6, [r7, fp, lsl #2]
   10b44:	mov	r1, r9
   10b48:	lsl	r8, fp, #2
   10b4c:	mov	r0, r6
   10b50:	bl	108ac <strcmp@plt>
   10b54:	cmp	r0, #0
   10b58:	bne	10ad0 <main@@Base+0x140>
   10b5c:	mov	sl, r0
   10b60:	b	10b34 <main@@Base+0x1a4>
   10b64:	bl	10960 <coda_get_libcoda_version@plt>
   10b68:	mov	r1, r0
   10b6c:	movw	r0, #5848	; 0x16d8
   10b70:	movt	r0, #1
   10b74:	bl	108b8 <printf@plt>
   10b78:	movw	r0, #5864	; 0x16e8
   10b7c:	movt	r0, #1
   10b80:	bl	108f4 <puts@plt>
   10b84:	mov	r0, #10
   10b88:	bl	10948 <putchar@plt>
   10b8c:	mov	r0, #0
   10b90:	bl	10918 <exit@plt>
   10b94:	mov	r1, r8
   10b98:	movw	r2, #5916	; 0x171c
   10b9c:	movt	r2, #1
   10ba0:	ldr	r0, [r7]
   10ba4:	bl	108c4 <coda_set_definition_path_conditional@plt>
   10ba8:	cmp	r0, #0
   10bac:	bne	10cc0 <main@@Base+0x330>
   10bb0:	cmp	r5, #2
   10bb4:	movne	fp, #1
   10bb8:	movne	sl, fp
   10bbc:	strne	r0, [sp, #20]
   10bc0:	beq	10a74 <main@@Base+0xe4>
   10bc4:	bl	10930 <coda_init@plt>
   10bc8:	subs	r4, r0, #0
   10bcc:	bne	10cc0 <main@@Base+0x330>
   10bd0:	mov	r0, sl
   10bd4:	bl	1093c <coda_set_option_perform_conversions@plt>
   10bd8:	add	r2, r7, fp, lsl #2
   10bdc:	sub	r1, r5, fp
   10be0:	movw	r3, #3904	; 0xf40
   10be4:	movt	r3, #1
   10be8:	str	r4, [sp]
   10bec:	ldr	r0, [sp, #20]
   10bf0:	bl	108a0 <coda_match_filefilter@plt>
   10bf4:	subs	r4, r0, #0
   10bf8:	bne	10cc0 <main@@Base+0x330>
   10bfc:	bl	108e8 <coda_done@plt>
   10c00:	mov	r0, r4
   10c04:	add	sp, sp, #36	; 0x24
   10c08:	ldrd	r4, [sp]
   10c0c:	ldrd	r6, [sp, #8]
   10c10:	ldrd	r8, [sp, #16]
   10c14:	ldrd	sl, [sp, #24]
   10c18:	add	sp, sp, #32
   10c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   10c20:	mov	r0, r6
   10c24:	ldr	r1, [sp, #12]
   10c28:	bl	108ac <strcmp@plt>
   10c2c:	cmp	r0, #0
   10c30:	beq	10c48 <main@@Base+0x2b8>
   10c34:	mov	r0, r6
   10c38:	ldr	r1, [sp, #28]
   10c3c:	bl	108ac <strcmp@plt>
   10c40:	cmp	r0, #0
   10c44:	bne	10cb0 <main@@Base+0x320>
   10c48:	ldr	r3, [sp, #16]
   10c4c:	mov	r2, #1
   10c50:	str	r2, [r3]
   10c54:	b	10b34 <main@@Base+0x1a4>
   10c58:	cmp	r5, fp
   10c5c:	bne	10bc4 <main@@Base+0x234>
   10c60:	movw	r3, #8296	; 0x2068
   10c64:	movt	r3, #2
   10c68:	mov	r2, #25
   10c6c:	mov	r1, #1
   10c70:	ldr	r3, [r3]
   10c74:	movw	r0, #5992	; 0x1768
   10c78:	movt	r0, #1
   10c7c:	bl	108dc <fwrite@plt>
   10c80:	bl	10de4 <_start@@Base+0xf0>
   10c84:	mov	r0, #1
   10c88:	bl	10918 <exit@plt>
   10c8c:	ldr	r0, [r7, #8]
   10c90:	bl	108d0 <coda_set_definition_path@plt>
   10c94:	cmp	r5, #3
   10c98:	moveq	fp, r5
   10c9c:	moveq	sl, #1
   10ca0:	streq	r6, [sp, #20]
   10ca4:	beq	10c58 <main@@Base+0x2c8>
   10ca8:	mov	fp, #3
   10cac:	b	10a78 <main@@Base+0xe8>
   10cb0:	ldrb	r2, [r6]
   10cb4:	cmp	r2, #45	; 0x2d
   10cb8:	bne	10bc4 <main@@Base+0x234>
   10cbc:	b	10c60 <main@@Base+0x2d0>
   10cc0:	movw	r3, #8296	; 0x2068
   10cc4:	movt	r3, #2
   10cc8:	ldr	r4, [r3]
   10ccc:	bl	1096c <coda_get_errno@plt>
   10cd0:	ldr	r0, [r0]
   10cd4:	bl	10954 <coda_errno_to_string@plt>
   10cd8:	mov	r2, r0
   10cdc:	movw	r1, #5944	; 0x1738
   10ce0:	movt	r1, #1
   10ce4:	mov	r0, r4
   10ce8:	bl	10924 <fprintf@plt>
   10cec:	mov	r0, #1
   10cf0:	bl	10918 <exit@plt>

00010cf4 <_start@@Base>:
   10cf4:	mov	fp, #0
   10cf8:	mov	lr, #0
   10cfc:	pop	{r1}		; (ldr r1, [sp], #4)
   10d00:	mov	r2, sp
   10d04:	push	{r2}		; (str r2, [sp, #-4]!)
   10d08:	push	{r0}		; (str r0, [sp, #-4]!)
   10d0c:	ldr	ip, [pc, #16]	; 10d24 <_start@@Base+0x30>
   10d10:	push	{ip}		; (str ip, [sp, #-4]!)
   10d14:	ldr	r0, [pc, #12]	; 10d28 <_start@@Base+0x34>
   10d18:	ldr	r3, [pc, #12]	; 10d2c <_start@@Base+0x38>
   10d1c:	bl	10900 <__libc_start_main@plt>
   10d20:	bl	10978 <abort@plt>
   10d24:	andeq	r1, r1, r4, lsl #2
   10d28:	muleq	r1, r0, r9
   10d2c:	andeq	r1, r1, r4, lsr #1
   10d30:	ldr	r3, [pc, #20]	; 10d4c <_start@@Base+0x58>
   10d34:	ldr	r2, [pc, #20]	; 10d50 <_start@@Base+0x5c>
   10d38:	add	r3, pc, r3
   10d3c:	ldr	r2, [r3, r2]
   10d40:	cmp	r2, #0
   10d44:	bxeq	lr
   10d48:	b	1090c <__gmon_start__@plt>
   10d4c:	andeq	r1, r1, r0, asr #5
   10d50:	andeq	r0, r0, ip, asr r0
   10d54:	ldr	r0, [pc, #24]	; 10d74 <_start@@Base+0x80>
   10d58:	ldr	r3, [pc, #24]	; 10d78 <_start@@Base+0x84>
   10d5c:	cmp	r3, r0
   10d60:	bxeq	lr
   10d64:	ldr	r3, [pc, #16]	; 10d7c <_start@@Base+0x88>
   10d68:	cmp	r3, #0
   10d6c:	bxeq	lr
   10d70:	bx	r3
   10d74:	andeq	r2, r2, r8, rrx
   10d78:	andeq	r2, r2, r8, rrx
   10d7c:	andeq	r0, r0, r0
   10d80:	ldr	r0, [pc, #36]	; 10dac <_start@@Base+0xb8>
   10d84:	ldr	r1, [pc, #36]	; 10db0 <_start@@Base+0xbc>
   10d88:	sub	r1, r1, r0
   10d8c:	asr	r1, r1, #2
   10d90:	add	r1, r1, r1, lsr #31
   10d94:	asrs	r1, r1, #1
   10d98:	bxeq	lr
   10d9c:	ldr	r3, [pc, #16]	; 10db4 <_start@@Base+0xc0>
   10da0:	cmp	r3, #0
   10da4:	bxeq	lr
   10da8:	bx	r3
   10dac:	andeq	r2, r2, r8, rrx
   10db0:	andeq	r2, r2, r8, rrx
   10db4:	andeq	r0, r0, r0
   10db8:	push	{r4, lr}
   10dbc:	ldr	r4, [pc, #24]	; 10ddc <_start@@Base+0xe8>
   10dc0:	ldrb	r3, [r4]
   10dc4:	cmp	r3, #0
   10dc8:	popne	{r4, pc}
   10dcc:	bl	10d54 <_start@@Base+0x60>
   10dd0:	mov	r3, #1
   10dd4:	strb	r3, [r4]
   10dd8:	pop	{r4, pc}
   10ddc:	andeq	r2, r2, ip, rrx
   10de0:	b	10d80 <_start@@Base+0x8c>
   10de4:	movw	r0, #4384	; 0x1120
   10de8:	movt	r0, #1
   10dec:	str	r4, [sp, #-8]!
   10df0:	str	lr, [sp, #4]
   10df4:	bl	108f4 <puts@plt>
   10df8:	movw	r0, #4392	; 0x1128
   10dfc:	movt	r0, #1
   10e00:	bl	108f4 <puts@plt>
   10e04:	movw	r0, #4460	; 0x116c
   10e08:	movt	r0, #1
   10e0c:	bl	108f4 <puts@plt>
   10e10:	movw	r0, #4540	; 0x11bc
   10e14:	movt	r0, #1
   10e18:	bl	108f4 <puts@plt>
   10e1c:	mov	r0, #10
   10e20:	bl	10948 <putchar@plt>
   10e24:	movw	r0, #4564	; 0x11d4
   10e28:	movt	r0, #1
   10e2c:	bl	108f4 <puts@plt>
   10e30:	movw	r0, #4584	; 0x11e8
   10e34:	movt	r0, #1
   10e38:	bl	108f4 <puts@plt>
   10e3c:	movw	r0, #4624	; 0x1210
   10e40:	movt	r0, #1
   10e44:	bl	108f4 <puts@plt>
   10e48:	movw	r0, #4684	; 0x124c
   10e4c:	movt	r0, #1
   10e50:	bl	108f4 <puts@plt>
   10e54:	movw	r0, #4732	; 0x127c
   10e58:	movt	r0, #1
   10e5c:	bl	108f4 <puts@plt>
   10e60:	movw	r0, #4804	; 0x12c4
   10e64:	movt	r0, #1
   10e68:	bl	108f4 <puts@plt>
   10e6c:	movw	r0, #4884	; 0x1314
   10e70:	movt	r0, #1
   10e74:	bl	108f4 <puts@plt>
   10e78:	movw	r0, #4928	; 0x1340
   10e7c:	movt	r0, #1
   10e80:	bl	108f4 <puts@plt>
   10e84:	movw	r0, #4956	; 0x135c
   10e88:	movt	r0, #1
   10e8c:	bl	108f4 <puts@plt>
   10e90:	mov	r0, #10
   10e94:	bl	10948 <putchar@plt>
   10e98:	movw	r0, #5012	; 0x1394
   10e9c:	movt	r0, #1
   10ea0:	bl	108f4 <puts@plt>
   10ea4:	movw	r0, #5036	; 0x13ac
   10ea8:	movt	r0, #1
   10eac:	bl	108f4 <puts@plt>
   10eb0:	mov	r0, #10
   10eb4:	bl	10948 <putchar@plt>
   10eb8:	movw	r0, #5068	; 0x13cc
   10ebc:	movt	r0, #1
   10ec0:	bl	108f4 <puts@plt>
   10ec4:	movw	r0, #5096	; 0x13e8
   10ec8:	movt	r0, #1
   10ecc:	bl	108f4 <puts@plt>
   10ed0:	mov	r0, #10
   10ed4:	bl	10948 <putchar@plt>
   10ed8:	movw	r0, #5148	; 0x141c
   10edc:	movt	r0, #1
   10ee0:	bl	108f4 <puts@plt>
   10ee4:	movw	r0, #5228	; 0x146c
   10ee8:	movt	r0, #1
   10eec:	bl	108f4 <puts@plt>
   10ef0:	movw	r0, #5304	; 0x14b8
   10ef4:	movt	r0, #1
   10ef8:	bl	108f4 <puts@plt>
   10efc:	movw	r0, #5348	; 0x14e4
   10f00:	movt	r0, #1
   10f04:	bl	108f4 <puts@plt>
   10f08:	movw	r0, #5424	; 0x1530
   10f0c:	movt	r0, #1
   10f10:	bl	108f4 <puts@plt>
   10f14:	movw	r0, #5496	; 0x1578
   10f18:	movt	r0, #1
   10f1c:	bl	108f4 <puts@plt>
   10f20:	movw	r0, #5560	; 0x15b8
   10f24:	movt	r0, #1
   10f28:	bl	108f4 <puts@plt>
   10f2c:	mov	r0, #10
   10f30:	ldr	r4, [sp]
   10f34:	ldr	lr, [sp, #4]
   10f38:	add	sp, sp, #8
   10f3c:	b	10948 <putchar@plt>

00010f40 <callback@@Base>:
   10f40:	str	r4, [sp, #-8]!
   10f44:	subs	r4, r1, #0
   10f48:	mov	r1, r0
   10f4c:	str	lr, [sp, #4]
   10f50:	beq	10f90 <callback@@Base+0x50>
   10f54:	cmp	r4, #2
   10f58:	beq	11020 <callback@@Base+0xe0>
   10f5c:	cmp	r4, #1
   10f60:	beq	10fc0 <callback@@Base+0x80>
   10f64:	movw	r3, #8304	; 0x2070
   10f68:	movt	r3, #2
   10f6c:	ldr	r3, [r3]
   10f70:	cmp	r3, #0
   10f74:	bne	10ff0 <callback@@Base+0xb0>
   10f78:	cmp	r4, #4
   10f7c:	beq	1104c <callback@@Base+0x10c>
   10f80:	ldr	r4, [sp]
   10f84:	add	sp, sp, #4
   10f88:	mov	r0, #0
   10f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   10f90:	movw	r0, #8296	; 0x2068
   10f94:	movt	r0, #2
   10f98:	mov	r3, r2
   10f9c:	mov	r2, r1
   10fa0:	ldr	r0, [r0]
   10fa4:	movw	r1, #5624	; 0x15f8
   10fa8:	movt	r1, #1
   10fac:	bl	10924 <fprintf@plt>
   10fb0:	ldr	r4, [sp]
   10fb4:	add	sp, sp, #4
   10fb8:	mov	r0, #0
   10fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   10fc0:	movw	r0, #8296	; 0x2068
   10fc4:	movt	r0, #2
   10fc8:	mov	r3, r2
   10fcc:	mov	r2, r1
   10fd0:	ldr	r0, [r0]
   10fd4:	movw	r1, #5664	; 0x1620
   10fd8:	movt	r1, #1
   10fdc:	bl	10924 <fprintf@plt>
   10fe0:	ldr	r4, [sp]
   10fe4:	add	sp, sp, #4
   10fe8:	mov	r0, #0
   10fec:	pop	{pc}		; (ldr pc, [sp], #4)
   10ff0:	movw	r0, #5696	; 0x1640
   10ff4:	movt	r0, #1
   10ff8:	bl	108b8 <printf@plt>
   10ffc:	cmp	r4, #5
   11000:	ldrls	pc, [pc, r4, lsl #2]
   11004:	b	10f80 <callback@@Base+0x40>
   11008:	andeq	r1, r1, r4, lsl #1
   1100c:	andeq	r0, r1, r0, lsl #31
   11010:	andeq	r0, r1, r0, lsl #31
   11014:	andeq	r1, r1, r4, ror r0
   11018:	andeq	r1, r1, r4, rrx
   1101c:	andeq	r1, r1, r4, asr r0
   11020:	movw	r3, #8296	; 0x2068
   11024:	movt	r3, #2
   11028:	mov	r2, r0
   1102c:	movw	r1, #5632	; 0x1600
   11030:	movt	r1, #1
   11034:	ldr	r0, [r3]
   11038:	bl	10924 <fprintf@plt>
   1103c:	ldr	r4, [sp]
   11040:	add	sp, sp, #4
   11044:	mov	r0, #0
   11048:	pop	{pc}		; (ldr pc, [sp], #4)
   1104c:	bl	108f4 <puts@plt>
   11050:	b	10f80 <callback@@Base+0x40>
   11054:	movw	r0, #5800	; 0x16a8
   11058:	movt	r0, #1
   1105c:	bl	108f4 <puts@plt>
   11060:	b	10f80 <callback@@Base+0x40>
   11064:	movw	r0, #5812	; 0x16b4
   11068:	movt	r0, #1
   1106c:	bl	108f4 <puts@plt>
   11070:	b	10f80 <callback@@Base+0x40>
   11074:	movw	r0, #5780	; 0x1694
   11078:	movt	r0, #1
   1107c:	bl	108f4 <puts@plt>
   11080:	b	10f80 <callback@@Base+0x40>
   11084:	movw	r3, #4372	; 0x1114
   11088:	movt	r3, #1
   1108c:	movw	r1, #5704	; 0x1648
   11090:	movt	r1, #1
   11094:	movw	r0, #5776	; 0x1690
   11098:	movt	r0, #1
   1109c:	mov	r2, #110	; 0x6e
   110a0:	bl	10984 <__assert_fail@plt>

000110a4 <__libc_csu_init@@Base>:
   110a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   110a8:	mov	r7, r0
   110ac:	ldr	r6, [pc, #72]	; 110fc <__libc_csu_init@@Base+0x58>
   110b0:	ldr	r5, [pc, #72]	; 11100 <__libc_csu_init@@Base+0x5c>
   110b4:	add	r6, pc, r6
   110b8:	add	r5, pc, r5
   110bc:	sub	r6, r6, r5
   110c0:	mov	r8, r1
   110c4:	mov	r9, r2
   110c8:	bl	10880 <coda_match_filefilter@plt-0x20>
   110cc:	asrs	r6, r6, #2
   110d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   110d4:	mov	r4, #0
   110d8:	add	r4, r4, #1
   110dc:	ldr	r3, [r5], #4
   110e0:	mov	r2, r9
   110e4:	mov	r1, r8
   110e8:	mov	r0, r7
   110ec:	blx	r3
   110f0:	cmp	r6, r4
   110f4:	bne	110d8 <__libc_csu_init@@Base+0x34>
   110f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110fc:	andeq	r0, r1, r0, asr #28
   11100:	andeq	r0, r1, r8, lsr lr

00011104 <__libc_csu_fini@@Base>:
   11104:	bx	lr

Disassembly of section .fini:

00011108 <.fini>:
   11108:	push	{r3, lr}
   1110c:	pop	{r3, pc}
