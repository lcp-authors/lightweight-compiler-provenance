
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010cd8 <.init>:
   10cd8:	push	{r3, lr}
   10cdc:	bl	10fbc <__assert_fail@plt+0x48>
   10ce0:	pop	{r3, pc}

Disassembly of section .plt:

00010ce4 <fstatfs64@plt-0x14>:
   10ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce8:	ldr	lr, [pc, #4]	; 10cf4 <fstatfs64@plt-0x4>
   10cec:	add	lr, pc, lr
   10cf0:	ldr	pc, [lr, #8]!
   10cf4:	andeq	r9, r1, ip, lsl #6

00010cf8 <fstatfs64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #780]!	; 0x30c

00010d04 <calloc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #772]!	; 0x304

00010d10 <raise@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #764]!	; 0x2fc

00010d1c <strcmp@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #756]!	; 0x2f4

00010d28 <strtol@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #748]!	; 0x2ec

00010d34 <getpwuid@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d40 <printf@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #732]!	; 0x2dc

00010d4c <getuid@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #724]!	; 0x2d4

00010d58 <memmove@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #716]!	; 0x2cc

00010d64 <free@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d70 <memcpy@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #700]!	; 0x2bc

00010d7c <time@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #692]!	; 0x2b4

00010d88 <ctime@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #684]!	; 0x2ac

00010d94 <realloc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #676]!	; 0x2a4

00010da0 <funlockfile@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #668]!	; 0x29c

00010dac <__fxstatat64@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #660]!	; 0x294

00010db8 <__fxstat64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #652]!	; 0x28c

00010dc4 <readlink@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #644]!	; 0x284

00010dd0 <fwrite@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #636]!	; 0x27c

00010ddc <ioctl@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #628]!	; 0x274

00010de8 <strcpy@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #620]!	; 0x26c

00010df4 <open64@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #612]!	; 0x264

00010e00 <getenv@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #604]!	; 0x25c

00010e0c <malloc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #596]!	; 0x254

00010e18 <__libc_start_main@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #588]!	; 0x24c

00010e24 <strerror@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #580]!	; 0x244

00010e30 <__gmon_start__@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #572]!	; 0x23c

00010e3c <__ctype_b_loc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #564]!	; 0x234

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #556]!	; 0x22c

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #548]!	; 0x224

00010e60 <openat64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #540]!	; 0x21c

00010e6c <fprintf@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #532]!	; 0x214

00010e78 <__errno_location@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #524]!	; 0x20c

00010e84 <snprintf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #516]!	; 0x204

00010e90 <memset@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #508]!	; 0x1fc

00010e9c <fcntl64@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea8 <strrchr@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #492]!	; 0x1ec

00010eb4 <fputc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ec0 <readdir64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #476]!	; 0x1dc

00010ecc <fdopendir@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed8 <putc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ee4 <dirfd@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #452]!	; 0x1c4

00010ef0 <flockfile@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #444]!	; 0x1bc

00010efc <fchdir@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #436]!	; 0x1b4

00010f08 <qsort@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #428]!	; 0x1ac

00010f14 <__xstat64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f20 <isatty@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #412]!	; 0x19c

00010f2c <strncmp@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #404]!	; 0x194

00010f38 <abort@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #396]!	; 0x18c

00010f44 <close@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #388]!	; 0x184

00010f50 <__lxstat64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #380]!	; 0x17c

00010f5c <closedir@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #372]!	; 0x174

00010f68 <getgrgid@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #364]!	; 0x16c

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #356]!	; 0x164

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e18 <__libc_start_main@plt>
   10fac:	bl	10f38 <abort@plt>
   10fb0:	strdeq	r9, [r1], -ip
   10fb4:	andeq	r1, r1, r0, ror r0
   10fb8:	muleq	r1, ip, r1
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e30 <__gmon_start__@plt>
   10fd8:	andeq	r9, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, r4, ror #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	sl, r2, r0, lsl r1
   11004:	andeq	sl, r2, r0, lsl r1
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	sl, r2, r0, lsl r1
   1103c:	andeq	sl, r2, r0, lsl r1
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	sl, r2, r8, lsl r1
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	b	11074 <__assert_fail@plt+0x100>
   11074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11078:	add	fp, sp, #28
   1107c:	sub	sp, sp, #12
   11080:	mov	r4, r1
   11084:	movw	r1, #41244	; 0xa11c
   11088:	mov	r5, r0
   1108c:	mov	r0, #0
   11090:	movw	r9, #41316	; 0xa164
   11094:	movw	r8, #41356	; 0xa18c
   11098:	movw	r6, #41312	; 0xa160
   1109c:	movw	sl, #41400	; 0xa1b8
   110a0:	mov	r7, #1
   110a4:	movt	r1, #2
   110a8:	movt	r9, #2
   110ac:	movt	r8, #2
   110b0:	movt	r6, #2
   110b4:	movt	sl, #2
   110b8:	strb	r0, [r1]
   110bc:	movw	r1, #41328	; 0xa170
   110c0:	str	r0, [r9]
   110c4:	str	r0, [r8]
   110c8:	str	r0, [r6]
   110cc:	str	r0, [sl]
   110d0:	movt	r1, #2
   110d4:	str	r0, [r1]
   110d8:	movw	r1, #41320	; 0xa168
   110dc:	movt	r1, #2
   110e0:	str	r0, [r1]
   110e4:	movw	r1, #41372	; 0xa19c
   110e8:	movt	r1, #2
   110ec:	str	r0, [r1]
   110f0:	movw	r1, #41336	; 0xa178
   110f4:	movt	r1, #2
   110f8:	str	r0, [r1]
   110fc:	movw	r1, #41388	; 0xa1ac
   11100:	movt	r1, #2
   11104:	str	r0, [r1]
   11108:	movw	r1, #41392	; 0xa1b0
   1110c:	movt	r1, #2
   11110:	str	r0, [r1]
   11114:	movw	r1, #41376	; 0xa1a0
   11118:	movt	r1, #2
   1111c:	str	r0, [r1]
   11120:	movw	r1, #41368	; 0xa198
   11124:	movt	r1, #2
   11128:	str	r0, [r1]
   1112c:	movw	r1, #41340	; 0xa17c
   11130:	movt	r1, #2
   11134:	str	r0, [r1]
   11138:	movw	r1, #41396	; 0xa1b4
   1113c:	movt	r1, #2
   11140:	str	r0, [r1]
   11144:	movw	r1, #41364	; 0xa194
   11148:	movt	r1, #2
   1114c:	str	r0, [r1]
   11150:	movw	r1, #41332	; 0xa174
   11154:	movt	r1, #2
   11158:	str	r0, [r1]
   1115c:	movw	r1, #41324	; 0xa16c
   11160:	movt	r1, #2
   11164:	str	r0, [r1]
   11168:	movw	r1, #41308	; 0xa15c
   1116c:	movt	r1, #2
   11170:	str	r0, [r1]
   11174:	movw	r1, #41380	; 0xa1a4
   11178:	movt	r1, #2
   1117c:	str	r0, [r1]
   11180:	movw	r1, #41304	; 0xa158
   11184:	movt	r1, #2
   11188:	str	r0, [r1]
   1118c:	movw	r1, #41348	; 0xa184
   11190:	movt	r1, #2
   11194:	str	r0, [r1]
   11198:	movw	r1, #41360	; 0xa190
   1119c:	movt	r1, #2
   111a0:	str	r0, [r1]
   111a4:	movw	r1, #41344	; 0xa180
   111a8:	movt	r1, #2
   111ac:	str	r0, [r1]
   111b0:	mov	r0, #1
   111b4:	bl	10f20 <isatty@plt>
   111b8:	cmp	r0, #0
   111bc:	beq	1121c <__assert_fail@plt+0x2a8>
   111c0:	movw	r0, #37388	; 0x920c
   111c4:	movt	r0, #1
   111c8:	bl	10e00 <getenv@plt>
   111cc:	cmp	r0, #0
   111d0:	beq	111f0 <__assert_fail@plt+0x27c>
   111d4:	mov	r1, #0
   111d8:	mov	r2, #10
   111dc:	bl	10d28 <strtol@plt>
   111e0:	movw	r1, #41204	; 0xa0f4
   111e4:	movt	r1, #2
   111e8:	str	r0, [r1]
   111ec:	b	11208 <__assert_fail@plt+0x294>
   111f0:	add	r2, sp, #4
   111f4:	mov	r0, #1
   111f8:	movw	r1, #21523	; 0x5413
   111fc:	bl	18a4c <__assert_fail@plt+0x7ad8>
   11200:	cmp	r0, #0
   11204:	beq	11824 <__assert_fail@plt+0x8b0>
   11208:	movw	r1, #41396	; 0xa1b4
   1120c:	mov	r6, r9
   11210:	mov	r0, #1
   11214:	movt	r1, #2
   11218:	str	r0, [r1]
   1121c:	str	r7, [r6]
   11220:	bl	10d4c <getuid@plt>
   11224:	cmp	r0, #0
   11228:	bne	1123c <__assert_fail@plt+0x2c8>
   1122c:	movw	r1, #41392	; 0xa1b0
   11230:	mov	r0, #1
   11234:	movt	r1, #2
   11238:	str	r0, [r1]
   1123c:	movw	r1, #41220	; 0xa104
   11240:	movw	r7, #37396	; 0x9214
   11244:	movw	r9, #41244	; 0xa11c
   11248:	mov	r0, #1
   1124c:	mov	r6, #20
   11250:	movt	r1, #2
   11254:	movt	r7, #1
   11258:	movt	r9, #2
   1125c:	str	r0, [r1]
   11260:	b	11278 <__assert_fail@plt+0x304>
   11264:	orr	r6, r6, #32
   11268:	movw	r1, #41392	; 0xa1b0
   1126c:	mov	r0, #1
   11270:	movt	r1, #2
   11274:	str	r0, [r1]
   11278:	mov	r0, r5
   1127c:	mov	r1, r4
   11280:	mov	r2, r7
   11284:	bl	17480 <__assert_fail@plt+0x650c>
   11288:	add	r0, r0, #1
   1128c:	cmp	r0, #121	; 0x79
   11290:	bhi	117f4 <__assert_fail@plt+0x880>
   11294:	add	r1, pc, #0
   11298:	ldr	pc, [r1, r0, lsl #2]
   1129c:	andeq	r1, r1, ip, lsl r7
   112a0:	strdeq	r1, [r1], -r4
   112a4:	strdeq	r1, [r1], -r4
   112a8:	strdeq	r1, [r1], -r4
   112ac:	strdeq	r1, [r1], -r4
   112b0:	strdeq	r1, [r1], -r4
   112b4:	strdeq	r1, [r1], -r4
   112b8:	strdeq	r1, [r1], -r4
   112bc:	strdeq	r1, [r1], -r4
   112c0:	strdeq	r1, [r1], -r4
   112c4:	strdeq	r1, [r1], -r4
   112c8:	strdeq	r1, [r1], -r4
   112cc:	strdeq	r1, [r1], -r4
   112d0:	strdeq	r1, [r1], -r4
   112d4:	strdeq	r1, [r1], -r4
   112d8:	strdeq	r1, [r1], -r4
   112dc:	strdeq	r1, [r1], -r4
   112e0:	strdeq	r1, [r1], -r4
   112e4:	strdeq	r1, [r1], -r4
   112e8:	strdeq	r1, [r1], -r4
   112ec:	strdeq	r1, [r1], -r4
   112f0:	strdeq	r1, [r1], -r4
   112f4:	strdeq	r1, [r1], -r4
   112f8:	strdeq	r1, [r1], -r4
   112fc:	strdeq	r1, [r1], -r4
   11300:	strdeq	r1, [r1], -r4
   11304:	strdeq	r1, [r1], -r4
   11308:	strdeq	r1, [r1], -r4
   1130c:	strdeq	r1, [r1], -r4
   11310:	strdeq	r1, [r1], -r4
   11314:	strdeq	r1, [r1], -r4
   11318:	strdeq	r1, [r1], -r4
   1131c:	strdeq	r1, [r1], -r4
   11320:	strdeq	r1, [r1], -r4
   11324:	strdeq	r1, [r1], -r4
   11328:	strdeq	r1, [r1], -r4
   1132c:	strdeq	r1, [r1], -r4
   11330:	strdeq	r1, [r1], -r4
   11334:	strdeq	r1, [r1], -r4
   11338:	strdeq	r1, [r1], -r4
   1133c:	strdeq	r1, [r1], -r4
   11340:	strdeq	r1, [r1], -r4
   11344:	strdeq	r1, [r1], -r4
   11348:	strdeq	r1, [r1], -r4
   1134c:	strdeq	r1, [r1], -r4
   11350:	strdeq	r1, [r1], -r4
   11354:	strdeq	r1, [r1], -r4
   11358:	strdeq	r1, [r1], -r4
   1135c:	strdeq	r1, [r1], -r4
   11360:	strdeq	r1, [r1], -r4
   11364:	andeq	r1, r1, r4, lsl #9
   11368:	strdeq	r1, [r1], -r4
   1136c:	strdeq	r1, [r1], -r4
   11370:	strdeq	r1, [r1], -r4
   11374:	strdeq	r1, [r1], -r4
   11378:	strdeq	r1, [r1], -r4
   1137c:	strdeq	r1, [r1], -r4
   11380:	strdeq	r1, [r1], -r4
   11384:	strdeq	r1, [r1], -r4
   11388:	strdeq	r1, [r1], -r4
   1138c:	strdeq	r1, [r1], -r4
   11390:	strdeq	r1, [r1], -r4
   11394:	strdeq	r1, [r1], -r4
   11398:	strdeq	r1, [r1], -r4
   1139c:	strdeq	r1, [r1], -r4
   113a0:	strdeq	r1, [r1], -r4
   113a4:	andeq	r1, r1, r8, ror #4
   113a8:	strdeq	r1, [r1], -r4
   113ac:	andeq	r1, r1, r4, lsr #9
   113b0:	strdeq	r1, [r1], -r4
   113b4:	strdeq	r1, [r1], -r4
   113b8:	ldrdeq	r1, [r1], -ip
   113bc:	strdeq	r1, [r1], -r4
   113c0:	strdeq	r1, [r1], -r4
   113c4:	strdeq	r1, [r1], -r4
   113c8:	strdeq	r1, [r1], -r4
   113cc:	strdeq	r1, [r1], -r4
   113d0:	strdeq	r1, [r1], -r0
   113d4:	strdeq	r1, [r1], -r4
   113d8:	strdeq	r1, [r1], -r4
   113dc:	strdeq	r1, [r1], -r4
   113e0:	strdeq	r1, [r1], -r4
   113e4:	strdeq	r1, [r1], -r4
   113e8:	strdeq	r1, [r1], -ip
   113ec:	andeq	r1, r1, r0, lsl r5
   113f0:	andeq	r1, r1, ip, lsl r5
   113f4:	strdeq	r1, [r1], -r4
   113f8:	strdeq	r1, [r1], -r4
   113fc:	andeq	r1, r1, r0, lsr r5
   11400:	strdeq	r1, [r1], -r4
   11404:	strdeq	r1, [r1], -r4
   11408:	strdeq	r1, [r1], -r4
   1140c:	strdeq	r1, [r1], -r4
   11410:	strdeq	r1, [r1], -r4
   11414:	strdeq	r1, [r1], -r4
   11418:	strdeq	r1, [r1], -r4
   1141c:	strdeq	r1, [r1], -r4
   11420:	strdeq	r1, [r1], -r4
   11424:	andeq	r1, r1, r4, ror #4
   11428:	strdeq	r1, [r1], -r4
   1142c:	andeq	r1, r1, r4, asr #10
   11430:	andeq	r1, r1, r8, ror #10
   11434:	strdeq	r1, [r1], -r4
   11438:	andeq	r1, r1, ip, lsl #11
   1143c:	andeq	r1, r1, r8, ror r2
   11440:	strdeq	r1, [r1], -r4
   11444:	andeq	r1, r1, r0, lsr #11
   11448:	strdeq	r1, [r1], -r4
   1144c:			; <UNDEFINED> instruction: 0x000115b4
   11450:	andeq	r1, r1, r8, asr #11
   11454:	andeq	r1, r1, r4, ror #11
   11458:	andeq	r1, r1, ip, lsl r6
   1145c:	andeq	r1, r1, r0, asr r6
   11460:	andeq	r1, r1, r4, ror #12
   11464:	andeq	r1, r1, r8, ror r6
   11468:	andeq	r1, r1, ip, lsl #13
   1146c:	andeq	r1, r1, r0, lsr #13
   11470:			; <UNDEFINED> instruction: 0x000116b4
   11474:	andeq	r1, r1, r0, asr #13
   11478:	strdeq	r1, [r1], -r4
   1147c:	strdeq	r1, [r1], -r4
   11480:	andeq	r1, r1, r4, ror #13
   11484:	movw	r1, #41312	; 0xa160
   11488:	mov	r0, #0
   1148c:	mov	r2, #1
   11490:	movt	r1, #2
   11494:	str	r0, [sl]
   11498:	str	r0, [r8]
   1149c:	str	r2, [r1]
   114a0:	b	11644 <__assert_fail@plt+0x6d0>
   114a4:	movw	r1, #41316	; 0xa164
   114a8:	mov	r2, #1
   114ac:	mov	r0, #0
   114b0:	movt	r1, #2
   114b4:	str	r0, [sl]
   114b8:	str	r0, [r8]
   114bc:	str	r2, [r1]
   114c0:	movw	r1, #41312	; 0xa160
   114c4:	movt	r1, #2
   114c8:	str	r0, [r1]
   114cc:	movw	r1, #41372	; 0xa19c
   114d0:	movt	r1, #2
   114d4:	str	r0, [r1]
   114d8:	b	11278 <__assert_fail@plt+0x304>
   114dc:	movw	r1, #41344	; 0xa180
   114e0:	mov	r0, #1
   114e4:	movt	r1, #2
   114e8:	str	r0, [r1]
   114ec:	b	11278 <__assert_fail@plt+0x304>
   114f0:	orr	r0, r6, #2
   114f4:	bic	r6, r0, #16
   114f8:	b	11278 <__assert_fail@plt+0x304>
   114fc:	movw	r1, #41324	; 0xa16c
   11500:	mov	r0, #1
   11504:	movt	r1, #2
   11508:	str	r0, [r1]
   1150c:	b	11278 <__assert_fail@plt+0x304>
   11510:	mov	r0, #1
   11514:	str	r0, [r9, #4]
   11518:	b	11278 <__assert_fail@plt+0x304>
   1151c:	movw	r1, #41364	; 0xa194
   11520:	mov	r0, #1
   11524:	movt	r1, #2
   11528:	str	r0, [r1]
   1152c:	b	11278 <__assert_fail@plt+0x304>
   11530:	movw	r1, #41348	; 0xa184
   11534:	mov	r0, #1
   11538:	movt	r1, #2
   1153c:	str	r0, [r1]
   11540:	b	11278 <__assert_fail@plt+0x304>
   11544:	movw	r1, #41336	; 0xa178
   11548:	mov	r0, #0
   1154c:	movt	r1, #2
   11550:	str	r0, [r1]
   11554:	movw	r1, #41380	; 0xa1a4
   11558:	mov	r0, #1
   1155c:	movt	r1, #2
   11560:	str	r0, [r1]
   11564:	b	11278 <__assert_fail@plt+0x304>
   11568:	movw	r1, #41324	; 0xa16c
   1156c:	mov	r0, #0
   11570:	movt	r1, #2
   11574:	str	r0, [r1]
   11578:	movw	r1, #41376	; 0xa1a0
   1157c:	mov	r0, #1
   11580:	movt	r1, #2
   11584:	str	r0, [r1]
   11588:	b	11278 <__assert_fail@plt+0x304>
   1158c:	movw	r1, #41340	; 0xa17c
   11590:	mov	r0, #1
   11594:	movt	r1, #2
   11598:	str	r0, [r1]
   1159c:	b	11278 <__assert_fail@plt+0x304>
   115a0:	movw	r1, #41328	; 0xa170
   115a4:	mov	r0, #1
   115a8:	movt	r1, #2
   115ac:	str	r0, [r1]
   115b0:	b	11278 <__assert_fail@plt+0x304>
   115b4:	movw	r0, #41384	; 0xa1a8
   115b8:	mov	r1, #1024	; 0x400
   115bc:	movt	r0, #2
   115c0:	str	r1, [r0]
   115c4:	b	11278 <__assert_fail@plt+0x304>
   115c8:	movw	r1, #41368	; 0xa198
   115cc:	mov	r0, #0
   115d0:	movt	r1, #2
   115d4:	str	r0, [r1]
   115d8:	mov	r1, #1
   115dc:	str	r1, [r8]
   115e0:	b	11634 <__assert_fail@plt+0x6c0>
   115e4:	movw	r0, #41312	; 0xa160
   115e8:	mov	r1, #0
   115ec:	movt	r0, #2
   115f0:	str	r1, [r8]
   115f4:	str	r1, [r0]
   115f8:	mov	r0, #1
   115fc:	str	r0, [sl]
   11600:	movw	r0, #41372	; 0xa19c
   11604:	movt	r0, #2
   11608:	str	r1, [r0]
   1160c:	movw	r0, #41316	; 0xa164
   11610:	movt	r0, #2
   11614:	str	r1, [r0]
   11618:	b	11278 <__assert_fail@plt+0x304>
   1161c:	movw	r1, #41368	; 0xa198
   11620:	mov	r0, #1
   11624:	movt	r1, #2
   11628:	str	r0, [r8]
   1162c:	str	r0, [r1]
   11630:	mov	r0, #0
   11634:	movw	r1, #41312	; 0xa160
   11638:	str	r0, [sl]
   1163c:	movt	r1, #2
   11640:	str	r0, [r1]
   11644:	movw	r1, #41372	; 0xa19c
   11648:	movt	r1, #2
   1164c:	b	11708 <__assert_fail@plt+0x794>
   11650:	movw	r1, #41320	; 0xa168
   11654:	mov	r0, #1
   11658:	movt	r1, #2
   1165c:	str	r0, [r1]
   11660:	b	11278 <__assert_fail@plt+0x304>
   11664:	movw	r1, #41360	; 0xa190
   11668:	mov	r0, #1
   1166c:	movt	r1, #2
   11670:	str	r0, [r1]
   11674:	b	11278 <__assert_fail@plt+0x304>
   11678:	movw	r1, #41396	; 0xa1b4
   1167c:	mov	r0, #1
   11680:	movt	r1, #2
   11684:	str	r0, [r1]
   11688:	b	11278 <__assert_fail@plt+0x304>
   1168c:	movw	r1, #41332	; 0xa174
   11690:	mov	r0, #1
   11694:	movt	r1, #2
   11698:	str	r0, [r1]
   1169c:	b	11278 <__assert_fail@plt+0x304>
   116a0:	movw	r1, #41304	; 0xa158
   116a4:	mov	r0, #1
   116a8:	movt	r1, #2
   116ac:	str	r0, [r1]
   116b0:	b	11278 <__assert_fail@plt+0x304>
   116b4:	mov	r0, #2
   116b8:	str	r0, [r9, #4]
   116bc:	b	11278 <__assert_fail@plt+0x304>
   116c0:	movw	r1, #41380	; 0xa1a4
   116c4:	mov	r0, #0
   116c8:	movt	r1, #2
   116cc:	str	r0, [r1]
   116d0:	movw	r1, #41336	; 0xa178
   116d4:	mov	r0, #1
   116d8:	movt	r1, #2
   116dc:	str	r0, [r1]
   116e0:	b	11278 <__assert_fail@plt+0x304>
   116e4:	movw	r2, #41372	; 0xa19c
   116e8:	mov	r1, #1
   116ec:	mov	r0, #0
   116f0:	movt	r2, #2
   116f4:	str	r0, [sl]
   116f8:	str	r0, [r8]
   116fc:	str	r1, [r2]
   11700:	movw	r1, #41312	; 0xa160
   11704:	movt	r1, #2
   11708:	str	r0, [r1]
   1170c:	movw	r1, #41316	; 0xa164
   11710:	movt	r1, #2
   11714:	str	r0, [r1]
   11718:	b	11278 <__assert_fail@plt+0x304>
   1171c:	movw	r0, #41344	; 0xa180
   11720:	movw	r3, #41376	; 0xa1a0
   11724:	ldr	r2, [r8]
   11728:	movw	r7, #41328	; 0xa170
   1172c:	movt	r0, #2
   11730:	movt	r3, #2
   11734:	movt	r7, #2
   11738:	ldr	r0, [r0]
   1173c:	ldr	r3, [r3]
   11740:	ldr	r7, [r7]
   11744:	orr	r1, r0, r2
   11748:	orr	r1, r1, r3
   1174c:	movw	r3, #41304	; 0xa158
   11750:	movt	r3, #2
   11754:	ldr	r3, [r3]
   11758:	orr	r3, r3, r2
   1175c:	orr	r7, r3, r7
   11760:	orr	r0, r7, r0
   11764:	movw	r7, #41360	; 0xa190
   11768:	movt	r7, #2
   1176c:	ldr	r7, [r7]
   11770:	orr	r7, r0, r7
   11774:	ldr	r0, [r9, #4]
   11778:	orrs	r7, r7, r0
   1177c:	orreq	r6, r6, #8
   11780:	cmp	r1, #0
   11784:	movw	r1, #41348	; 0xa184
   11788:	movt	r1, #2
   1178c:	orreq	r6, r6, #1
   11790:	ldr	r1, [r1]
   11794:	cmp	r1, #0
   11798:	movw	r1, #41220	; 0xa104
   1179c:	orrne	r6, r6, #128	; 0x80
   117a0:	cmp	r3, #0
   117a4:	movt	r1, #2
   117a8:	movwne	r3, #41384	; 0xa1a8
   117ac:	movne	r7, #2
   117b0:	movtne	r3, #2
   117b4:	ldr	r1, [r1]
   117b8:	strne	r7, [r3]
   117bc:	movw	r3, #41332	; 0xa174
   117c0:	movt	r3, #2
   117c4:	ldr	r3, [r3]
   117c8:	cmp	r3, #0
   117cc:	beq	11800 <__assert_fail@plt+0x88c>
   117d0:	cmp	r0, #2
   117d4:	beq	11834 <__assert_fail@plt+0x8c0>
   117d8:	cmp	r0, #1
   117dc:	beq	11854 <__assert_fail@plt+0x8e0>
   117e0:	cmp	r0, #0
   117e4:	bne	118e4 <__assert_fail@plt+0x970>
   117e8:	movw	r0, #12852	; 0x3234
   117ec:	movt	r0, #1
   117f0:	b	118e0 <__assert_fail@plt+0x96c>
   117f4:	bl	131f8 <__assert_fail@plt+0x2284>
   117f8:	sub	sp, fp, #28
   117fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11800:	cmp	r0, #2
   11804:	beq	11860 <__assert_fail@plt+0x8ec>
   11808:	cmp	r0, #1
   1180c:	beq	11880 <__assert_fail@plt+0x90c>
   11810:	cmp	r0, #0
   11814:	bne	118e4 <__assert_fail@plt+0x970>
   11818:	movw	r0, #12840	; 0x3228
   1181c:	movt	r0, #1
   11820:	b	118e0 <__assert_fail@plt+0x96c>
   11824:	ldrh	r0, [sp, #6]
   11828:	cmp	r0, #0
   1182c:	bne	111e0 <__assert_fail@plt+0x26c>
   11830:	b	11208 <__assert_fail@plt+0x294>
   11834:	movw	r0, #41336	; 0xa178
   11838:	movt	r0, #2
   1183c:	ldr	r0, [r0]
   11840:	cmp	r0, #0
   11844:	beq	1188c <__assert_fail@plt+0x918>
   11848:	movw	r0, #13180	; 0x337c
   1184c:	movt	r0, #1
   11850:	b	118e0 <__assert_fail@plt+0x96c>
   11854:	movw	r0, #13572	; 0x3504
   11858:	movt	r0, #1
   1185c:	b	118e0 <__assert_fail@plt+0x96c>
   11860:	movw	r0, #41336	; 0xa178
   11864:	movt	r0, #2
   11868:	ldr	r0, [r0]
   1186c:	cmp	r0, #0
   11870:	beq	118ac <__assert_fail@plt+0x938>
   11874:	movw	r0, #13076	; 0x3314
   11878:	movt	r0, #1
   1187c:	b	118e0 <__assert_fail@plt+0x96c>
   11880:	movw	r0, #13492	; 0x34b4
   11884:	movt	r0, #1
   11888:	b	118e0 <__assert_fail@plt+0x96c>
   1188c:	movw	r0, #41380	; 0xa1a4
   11890:	movt	r0, #2
   11894:	ldr	r0, [r0]
   11898:	cmp	r0, #0
   1189c:	beq	118cc <__assert_fail@plt+0x958>
   118a0:	movw	r0, #13388	; 0x344c
   118a4:	movt	r0, #1
   118a8:	b	118e0 <__assert_fail@plt+0x96c>
   118ac:	movw	r0, #41380	; 0xa1a4
   118b0:	movt	r0, #2
   118b4:	ldr	r0, [r0]
   118b8:	cmp	r0, #0
   118bc:	beq	118d8 <__assert_fail@plt+0x964>
   118c0:	movw	r0, #13284	; 0x33e4
   118c4:	movt	r0, #1
   118c8:	b	118e0 <__assert_fail@plt+0x96c>
   118cc:	movw	r0, #12972	; 0x32ac
   118d0:	movt	r0, #1
   118d4:	b	118e0 <__assert_fail@plt+0x96c>
   118d8:	movw	r0, #12868	; 0x3244
   118dc:	movt	r0, #1
   118e0:	str	r0, [r9, #8]
   118e4:	movw	r3, #41312	; 0xa160
   118e8:	sub	r0, r5, r1
   118ec:	movt	r3, #2
   118f0:	ldr	r3, [r3]
   118f4:	cmp	r3, #0
   118f8:	beq	11918 <__assert_fail@plt+0x9a4>
   118fc:	movw	r2, #9140	; 0x23b4
   11900:	movt	r2, #1
   11904:	cmp	r0, #0
   11908:	str	r2, [r9, #12]
   1190c:	beq	11940 <__assert_fail@plt+0x9cc>
   11910:	add	r1, r4, r1, lsl #2
   11914:	b	11950 <__assert_fail@plt+0x9dc>
   11918:	movw	r3, #41372	; 0xa19c
   1191c:	movt	r3, #2
   11920:	ldr	r3, [r3]
   11924:	cmp	r3, #0
   11928:	beq	1196c <__assert_fail@plt+0x9f8>
   1192c:	movw	r2, #11856	; 0x2e50
   11930:	movt	r2, #1
   11934:	cmp	r0, #0
   11938:	str	r2, [r9, #12]
   1193c:	bne	11910 <__assert_fail@plt+0x99c>
   11940:	movw	r0, #41204	; 0xa0f4
   11944:	movt	r0, #2
   11948:	add	r1, r0, #4
   1194c:	mov	r0, #1
   11950:	mov	r2, r6
   11954:	bl	119b8 <__assert_fail@plt+0xa44>
   11958:	movw	r0, #41352	; 0xa188
   1195c:	movt	r0, #2
   11960:	ldr	r0, [r0]
   11964:	sub	sp, fp, #28
   11968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1196c:	cmp	r2, #0
   11970:	beq	1198c <__assert_fail@plt+0xa18>
   11974:	movw	r2, #9500	; 0x251c
   11978:	movt	r2, #1
   1197c:	cmp	r0, #0
   11980:	str	r2, [r9, #12]
   11984:	bne	11910 <__assert_fail@plt+0x99c>
   11988:	b	11940 <__assert_fail@plt+0x9cc>
   1198c:	ldr	r3, [sl]
   11990:	movw	r7, #10956	; 0x2acc
   11994:	movw	r2, #12368	; 0x3050
   11998:	movt	r7, #1
   1199c:	movt	r2, #1
   119a0:	cmp	r3, #0
   119a4:	moveq	r2, r7
   119a8:	cmp	r0, #0
   119ac:	str	r2, [r9, #12]
   119b0:	bne	11910 <__assert_fail@plt+0x99c>
   119b4:	b	11940 <__assert_fail@plt+0x9cc>
   119b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119bc:	add	fp, sp, #28
   119c0:	sub	sp, sp, #4
   119c4:	mov	r7, r0
   119c8:	movw	r0, #41340	; 0xa17c
   119cc:	mov	r6, r2
   119d0:	movw	r2, #7596	; 0x1dac
   119d4:	mov	r5, r1
   119d8:	movt	r0, #2
   119dc:	movt	r2, #1
   119e0:	ldr	r0, [r0]
   119e4:	cmp	r0, #0
   119e8:	mov	r0, r1
   119ec:	mov	r1, r6
   119f0:	movne	r2, #0
   119f4:	bl	136e0 <__assert_fail@plt+0x276c>
   119f8:	cmp	r0, #0
   119fc:	beq	11d38 <__assert_fail@plt+0xdc4>
   11a00:	mov	r1, #0
   11a04:	mov	r4, r0
   11a08:	mov	r5, #0
   11a0c:	bl	15ab0 <__assert_fail@plt+0x4b3c>
   11a10:	mov	r1, r0
   11a14:	mov	r0, #0
   11a18:	bl	11e58 <__assert_fail@plt+0xee4>
   11a1c:	movw	r0, #41376	; 0xa1a0
   11a20:	movt	r0, #2
   11a24:	ldr	r0, [r0]
   11a28:	cmp	r0, #0
   11a2c:	bne	11d30 <__assert_fail@plt+0xdbc>
   11a30:	movw	r8, #41324	; 0xa16c
   11a34:	mov	r0, #4096	; 0x1000
   11a38:	movt	r8, #2
   11a3c:	ldr	r1, [r8]
   11a40:	cmp	r1, #0
   11a44:	andeq	r5, r0, r6, lsl #9
   11a48:	mov	r0, r4
   11a4c:	bl	14220 <__assert_fail@plt+0x32ac>
   11a50:	cmp	r0, #0
   11a54:	beq	11d20 <__assert_fail@plt+0xdac>
   11a58:	mov	r6, r0
   11a5c:	cmp	r7, #1
   11a60:	ble	11bd0 <__assert_fail@plt+0xc5c>
   11a64:	movw	r9, #41392	; 0xa1b0
   11a68:	movw	sl, #41244	; 0xa11c
   11a6c:	movt	r9, #2
   11a70:	movt	sl, #2
   11a74:	ldrh	r0, [r6, #56]	; 0x38
   11a78:	sub	r0, r0, #1
   11a7c:	cmp	r0, #6
   11a80:	bls	11af0 <__assert_fail@plt+0xb7c>
   11a84:	b	11acc <__assert_fail@plt+0xb58>
   11a88:	movw	r0, #41232	; 0xa110
   11a8c:	mov	r7, r9
   11a90:	movt	r0, #2
   11a94:	ldr	r9, [r0]
   11a98:	ldr	r0, [r6, #32]
   11a9c:	bl	10e24 <strerror@plt>
   11aa0:	movw	r1, #37601	; 0x92e1
   11aa4:	mov	r3, r0
   11aa8:	mov	r0, r9
   11aac:	add	r2, r6, #168	; 0xa8
   11ab0:	mov	r9, r7
   11ab4:	movt	r1, #1
   11ab8:	bl	10e6c <fprintf@plt>
   11abc:	movw	r1, #41352	; 0xa188
   11ac0:	mov	r0, #1
   11ac4:	movt	r1, #2
   11ac8:	str	r0, [r1]
   11acc:	mov	r0, r4
   11ad0:	bl	14220 <__assert_fail@plt+0x32ac>
   11ad4:	mov	r6, r0
   11ad8:	cmp	r0, #0
   11adc:	beq	11d20 <__assert_fail@plt+0xdac>
   11ae0:	ldrh	r0, [r6, #56]	; 0x38
   11ae4:	sub	r0, r0, #1
   11ae8:	cmp	r0, #6
   11aec:	bhi	11acc <__assert_fail@plt+0xb58>
   11af0:	add	r1, pc, #0
   11af4:	ldr	pc, [r1, r0, lsl #2]
   11af8:	andeq	r1, r1, r4, lsl fp
   11afc:			; <UNDEFINED> instruction: 0x00011bb0
   11b00:	andeq	r1, r1, ip, asr #21
   11b04:	andeq	r1, r1, r8, lsl #21
   11b08:	andeq	r1, r1, ip, asr #21
   11b0c:	andeq	r1, r1, ip, asr #21
   11b10:	andeq	r1, r1, r8, lsl #21
   11b14:	ldrb	r0, [r6, #168]	; 0xa8
   11b18:	cmp	r0, #46	; 0x2e
   11b1c:	bne	11b38 <__assert_fail@plt+0xbc4>
   11b20:	ldr	r0, [r6, #48]	; 0x30
   11b24:	cmp	r0, #0
   11b28:	beq	11b38 <__assert_fail@plt+0xbc4>
   11b2c:	ldr	r0, [r9]
   11b30:	cmp	r0, #0
   11b34:	beq	11acc <__assert_fail@plt+0xb58>
   11b38:	ldrb	r0, [sl]
   11b3c:	ldr	r1, [r6, #28]
   11b40:	cmp	r0, #0
   11b44:	beq	11b58 <__assert_fail@plt+0xbe4>
   11b48:	movw	r0, #37441	; 0x9241
   11b4c:	movt	r0, #1
   11b50:	bl	10d40 <printf@plt>
   11b54:	b	11b6c <__assert_fail@plt+0xbf8>
   11b58:	movw	r0, #37442	; 0x9242
   11b5c:	movt	r0, #1
   11b60:	bl	10d40 <printf@plt>
   11b64:	mov	r0, #1
   11b68:	strb	r0, [sl]
   11b6c:	mov	r0, r4
   11b70:	mov	r1, r5
   11b74:	bl	15ab0 <__assert_fail@plt+0x4b3c>
   11b78:	mov	r7, r0
   11b7c:	mov	r0, r6
   11b80:	mov	r1, r7
   11b84:	bl	11e58 <__assert_fail@plt+0xee4>
   11b88:	cmp	r7, #0
   11b8c:	beq	11acc <__assert_fail@plt+0xb58>
   11b90:	ldr	r0, [r8]
   11b94:	cmp	r0, #0
   11b98:	bne	11acc <__assert_fail@plt+0xb58>
   11b9c:	mov	r0, r4
   11ba0:	mov	r1, r6
   11ba4:	mov	r2, #4
   11ba8:	bl	15a80 <__assert_fail@plt+0x4b0c>
   11bac:	b	11acc <__assert_fail@plt+0xb58>
   11bb0:	movw	r0, #41232	; 0xa110
   11bb4:	movw	r1, #37447	; 0x9247
   11bb8:	add	r2, r6, #168	; 0xa8
   11bbc:	movt	r0, #2
   11bc0:	movt	r1, #1
   11bc4:	ldr	r0, [r0]
   11bc8:	bl	10e6c <fprintf@plt>
   11bcc:	b	11acc <__assert_fail@plt+0xb58>
   11bd0:	movw	r9, #41244	; 0xa11c
   11bd4:	movw	sl, #37441	; 0x9241
   11bd8:	movt	r9, #2
   11bdc:	movt	sl, #1
   11be0:	ldrh	r0, [r6, #56]	; 0x38
   11be4:	sub	r0, r0, #1
   11be8:	cmp	r0, #6
   11bec:	bls	11c54 <__assert_fail@plt+0xce0>
   11bf0:	b	11c30 <__assert_fail@plt+0xcbc>
   11bf4:	movw	r0, #41232	; 0xa110
   11bf8:	movt	r0, #2
   11bfc:	ldr	r7, [r0]
   11c00:	ldr	r0, [r6, #32]
   11c04:	bl	10e24 <strerror@plt>
   11c08:	movw	r1, #37601	; 0x92e1
   11c0c:	mov	r3, r0
   11c10:	add	r2, r6, #168	; 0xa8
   11c14:	mov	r0, r7
   11c18:	movt	r1, #1
   11c1c:	bl	10e6c <fprintf@plt>
   11c20:	movw	r0, #41352	; 0xa188
   11c24:	mov	r1, #1
   11c28:	movt	r0, #2
   11c2c:	str	r1, [r0]
   11c30:	mov	r0, r4
   11c34:	bl	14220 <__assert_fail@plt+0x32ac>
   11c38:	mov	r6, r0
   11c3c:	cmp	r0, #0
   11c40:	beq	11d20 <__assert_fail@plt+0xdac>
   11c44:	ldrh	r0, [r6, #56]	; 0x38
   11c48:	sub	r0, r0, #1
   11c4c:	cmp	r0, #6
   11c50:	bhi	11c30 <__assert_fail@plt+0xcbc>
   11c54:	add	r1, pc, #0
   11c58:	ldr	pc, [r1, r0, lsl #2]
   11c5c:	andeq	r1, r1, r8, ror ip
   11c60:	andeq	r1, r1, r0, lsl #26
   11c64:	andeq	r1, r1, r0, lsr ip
   11c68:	strdeq	r1, [r1], -r4
   11c6c:	andeq	r1, r1, r0, lsr ip
   11c70:	andeq	r1, r1, r0, lsr ip
   11c74:	strdeq	r1, [r1], -r4
   11c78:	ldrb	r0, [r6, #168]	; 0xa8
   11c7c:	cmp	r0, #46	; 0x2e
   11c80:	bne	11ca4 <__assert_fail@plt+0xd30>
   11c84:	ldr	r0, [r6, #48]	; 0x30
   11c88:	cmp	r0, #0
   11c8c:	beq	11ca4 <__assert_fail@plt+0xd30>
   11c90:	movw	r0, #41392	; 0xa1b0
   11c94:	movt	r0, #2
   11c98:	ldr	r0, [r0]
   11c9c:	cmp	r0, #0
   11ca0:	beq	11c30 <__assert_fail@plt+0xcbc>
   11ca4:	ldrb	r0, [r9]
   11ca8:	cmp	r0, #1
   11cac:	bne	11cbc <__assert_fail@plt+0xd48>
   11cb0:	ldr	r1, [r6, #28]
   11cb4:	mov	r0, sl
   11cb8:	bl	10d40 <printf@plt>
   11cbc:	mov	r0, r4
   11cc0:	mov	r1, r5
   11cc4:	bl	15ab0 <__assert_fail@plt+0x4b3c>
   11cc8:	mov	r7, r0
   11ccc:	mov	r0, r6
   11cd0:	mov	r1, r7
   11cd4:	bl	11e58 <__assert_fail@plt+0xee4>
   11cd8:	cmp	r7, #0
   11cdc:	beq	11c30 <__assert_fail@plt+0xcbc>
   11ce0:	ldr	r0, [r8]
   11ce4:	cmp	r0, #0
   11ce8:	bne	11c30 <__assert_fail@plt+0xcbc>
   11cec:	mov	r0, r4
   11cf0:	mov	r1, r6
   11cf4:	mov	r2, #4
   11cf8:	bl	15a80 <__assert_fail@plt+0x4b0c>
   11cfc:	b	11c30 <__assert_fail@plt+0xcbc>
   11d00:	movw	r0, #41232	; 0xa110
   11d04:	movw	r1, #37447	; 0x9247
   11d08:	add	r2, r6, #168	; 0xa8
   11d0c:	movt	r0, #2
   11d10:	movt	r1, #1
   11d14:	ldr	r0, [r0]
   11d18:	bl	10e6c <fprintf@plt>
   11d1c:	b	11c30 <__assert_fail@plt+0xcbc>
   11d20:	bl	10e78 <__errno_location@plt>
   11d24:	ldr	r0, [r0]
   11d28:	cmp	r0, #0
   11d2c:	bne	11d70 <__assert_fail@plt+0xdfc>
   11d30:	sub	sp, fp, #28
   11d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d38:	movw	r0, #41232	; 0xa110
   11d3c:	ldr	r4, [r5]
   11d40:	movt	r0, #2
   11d44:	ldr	r5, [r0]
   11d48:	bl	10e78 <__errno_location@plt>
   11d4c:	ldr	r0, [r0]
   11d50:	bl	10e24 <strerror@plt>
   11d54:	movw	r1, #37424	; 0x9230
   11d58:	mov	r3, r0
   11d5c:	mov	r0, r5
   11d60:	mov	r2, r4
   11d64:	movt	r1, #1
   11d68:	bl	10e6c <fprintf@plt>
   11d6c:	b	11d94 <__assert_fail@plt+0xe20>
   11d70:	movw	r1, #41232	; 0xa110
   11d74:	movt	r1, #2
   11d78:	ldr	r4, [r1]
   11d7c:	bl	10e24 <strerror@plt>
   11d80:	movw	r1, #37476	; 0x9264
   11d84:	mov	r2, r0
   11d88:	mov	r0, r4
   11d8c:	movt	r1, #1
   11d90:	bl	10e6c <fprintf@plt>
   11d94:	movw	r0, #41352	; 0xa188
   11d98:	mov	r1, #1
   11d9c:	movt	r0, #2
   11da0:	str	r1, [r0]
   11da4:	sub	sp, fp, #28
   11da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dac:	push	{fp, lr}
   11db0:	mov	fp, sp
   11db4:	ldr	r0, [r0]
   11db8:	mov	r2, #0
   11dbc:	ldrh	r3, [r0, #56]	; 0x38
   11dc0:	cmp	r3, #7
   11dc4:	beq	11dfc <__assert_fail@plt+0xe88>
   11dc8:	ldr	r1, [r1]
   11dcc:	ldrh	ip, [r1, #56]	; 0x38
   11dd0:	cmp	ip, #7
   11dd4:	beq	11dfc <__assert_fail@plt+0xe88>
   11dd8:	cmp	r3, #10
   11ddc:	cmpne	ip, #10
   11de0:	bne	11e04 <__assert_fail@plt+0xe90>
   11de4:	cmp	ip, #10
   11de8:	mov	r2, #1
   11dec:	mvneq	r2, #0
   11df0:	cmp	r3, #10
   11df4:	cmpeq	ip, #10
   11df8:	beq	11e38 <__assert_fail@plt+0xec4>
   11dfc:	mov	r0, r2
   11e00:	pop	{fp, pc}
   11e04:	cmp	r3, ip
   11e08:	beq	11e24 <__assert_fail@plt+0xeb0>
   11e0c:	movw	r2, #41376	; 0xa1a0
   11e10:	ldr	lr, [r0, #48]	; 0x30
   11e14:	movt	r2, #2
   11e18:	ldr	r2, [r2]
   11e1c:	orrs	r2, r2, lr
   11e20:	beq	11e40 <__assert_fail@plt+0xecc>
   11e24:	movw	r2, #41244	; 0xa11c
   11e28:	movt	r2, #2
   11e2c:	ldr	r2, [r2, #8]
   11e30:	pop	{fp, lr}
   11e34:	bx	r2
   11e38:	pop	{fp, lr}
   11e3c:	b	13228 <__assert_fail@plt+0x22b4>
   11e40:	cmp	r3, #1
   11e44:	mov	r2, #1
   11e48:	mvnne	r2, #0
   11e4c:	cmpne	ip, #1
   11e50:	beq	11dfc <__assert_fail@plt+0xe88>
   11e54:	b	11e24 <__assert_fail@plt+0xeb0>
   11e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e5c:	add	fp, sp, #28
   11e60:	sub	sp, sp, #180	; 0xb4
   11e64:	cmp	r1, #0
   11e68:	beq	12368 <__assert_fail@plt+0x13f4>
   11e6c:	mov	r5, r0
   11e70:	movw	r0, #41328	; 0xa170
   11e74:	movw	r2, #41356	; 0xa18c
   11e78:	mov	sl, #0
   11e7c:	mov	lr, #1
   11e80:	str	r1, [sp, #4]
   11e84:	mov	r4, r1
   11e88:	mov	r1, #0
   11e8c:	mov	r6, #0
   11e90:	mov	r9, #0
   11e94:	movt	r0, #2
   11e98:	movt	r2, #2
   11e9c:	str	r5, [sp, #16]
   11ea0:	ldr	r0, [r0]
   11ea4:	ldr	r2, [r2]
   11ea8:	orr	r0, r2, r0
   11eac:	movw	r2, #41304	; 0xa158
   11eb0:	movt	r2, #2
   11eb4:	ldr	r2, [r2]
   11eb8:	orr	ip, r0, r2
   11ebc:	mov	r0, #0
   11ec0:	mov	r2, #0
   11ec4:	str	r0, [sp, #64]	; 0x40
   11ec8:	mov	r0, #0
   11ecc:	str	ip, [sp, #12]
   11ed0:	str	r0, [sp, #44]	; 0x2c
   11ed4:	mov	r0, #0
   11ed8:	str	r0, [sp, #60]	; 0x3c
   11edc:	mov	r0, #0
   11ee0:	str	r0, [sp, #36]	; 0x24
   11ee4:	mov	r0, #0
   11ee8:	str	r0, [sp, #28]
   11eec:	mov	r0, #0
   11ef0:	str	r0, [sp, #32]
   11ef4:	mov	r0, #0
   11ef8:	str	r0, [sp, #8]
   11efc:	mov	r0, #0
   11f00:	str	r0, [sp, #56]	; 0x38
   11f04:	ldrh	r0, [r4, #56]	; 0x38
   11f08:	cmp	r0, #10
   11f0c:	cmpne	r0, #7
   11f10:	bne	11f58 <__assert_fail@plt+0xfe4>
   11f14:	b	12200 <__assert_fail@plt+0x128c>
   11f18:	str	r6, [r4, #20]
   11f1c:	ldr	sl, [sp, #20]
   11f20:	ldr	r5, [sp, #16]
   11f24:	ldr	r6, [sp, #40]	; 0x28
   11f28:	ldr	ip, [sp, #12]
   11f2c:	mov	lr, #1
   11f30:	ldr	r1, [sp, #52]	; 0x34
   11f34:	ldr	r2, [sp, #48]	; 0x30
   11f38:	add	r1, r1, #1
   11f3c:	ldr	r4, [r4, #8]
   11f40:	cmp	r4, #0
   11f44:	beq	12274 <__assert_fail@plt+0x1300>
   11f48:	ldrh	r0, [r4, #56]	; 0x38
   11f4c:	cmp	r0, #10
   11f50:	cmpne	r0, #7
   11f54:	beq	12200 <__assert_fail@plt+0x128c>
   11f58:	cmp	r5, #0
   11f5c:	beq	11f94 <__assert_fail@plt+0x1020>
   11f60:	ldrb	r0, [r4, #168]	; 0xa8
   11f64:	cmp	r0, #46	; 0x2e
   11f68:	bne	11fc4 <__assert_fail@plt+0x1050>
   11f6c:	movw	r0, #41392	; 0xa1b0
   11f70:	movt	r0, #2
   11f74:	ldr	r0, [r0]
   11f78:	cmp	r0, #0
   11f7c:	bne	11fc4 <__assert_fail@plt+0x1050>
   11f80:	str	lr, [r4, #16]
   11f84:	ldr	r4, [r4, #8]
   11f88:	cmp	r4, #0
   11f8c:	bne	11f48 <__assert_fail@plt+0xfd4>
   11f90:	b	12274 <__assert_fail@plt+0x1300>
   11f94:	cmp	r0, #1
   11f98:	bne	11fc4 <__assert_fail@plt+0x1050>
   11f9c:	movw	r0, #41376	; 0xa1a0
   11fa0:	movt	r0, #2
   11fa4:	ldr	r0, [r0]
   11fa8:	cmp	r0, #0
   11fac:	bne	11fc4 <__assert_fail@plt+0x1050>
   11fb0:	str	lr, [r4, #16]
   11fb4:	ldr	r4, [r4, #8]
   11fb8:	cmp	r4, #0
   11fbc:	bne	11f48 <__assert_fail@plt+0xfd4>
   11fc0:	b	12274 <__assert_fail@plt+0x1300>
   11fc4:	ldr	r0, [r4, #52]	; 0x34
   11fc8:	cmp	r0, r2
   11fcc:	movhi	r2, r0
   11fd0:	cmp	ip, #0
   11fd4:	beq	11f38 <__assert_fail@plt+0xfc4>
   11fd8:	str	r2, [sp, #48]	; 0x30
   11fdc:	str	r1, [sp, #52]	; 0x34
   11fe0:	add	r2, r4, #160	; 0xa0
   11fe4:	add	r1, r4, #128	; 0x80
   11fe8:	add	r0, r4, #112	; 0x70
   11fec:	ldrd	r2, [r2]
   11ff0:	subs	r7, r6, r2
   11ff4:	ldr	r7, [sp, #56]	; 0x38
   11ff8:	rscs	r3, r3, #0
   11ffc:	movcc	r6, r2
   12000:	ldrd	r2, [r1]
   12004:	subs	r1, r7, r2
   12008:	rscs	r1, r3, r7, asr #31
   1200c:	movlt	r7, r2
   12010:	str	r7, [sp, #56]	; 0x38
   12014:	ldr	r7, [sp, #64]	; 0x40
   12018:	ldrd	r0, [r0]
   1201c:	subs	r3, sl, r0
   12020:	sbcs	r3, r7, r1
   12024:	mov	r3, #0
   12028:	movwlt	r3, #1
   1202c:	cmp	r3, #0
   12030:	movne	sl, r0
   12034:	ldr	r0, [sp, #60]	; 0x3c
   12038:	movne	r7, r1
   1203c:	mov	r1, r7
   12040:	str	r7, [sp, #64]	; 0x40
   12044:	add	r0, r0, r2
   12048:	str	r0, [sp, #60]	; 0x3c
   1204c:	ldr	r0, [r4, #84]	; 0x54
   12050:	cmp	r0, r9
   12054:	movhi	r9, r0
   12058:	movw	r0, #41356	; 0xa18c
   1205c:	movt	r0, #2
   12060:	ldr	r0, [r0]
   12064:	cmp	r0, #0
   12068:	beq	11f30 <__assert_fail@plt+0xfbc>
   1206c:	movw	r0, #41368	; 0xa198
   12070:	str	r9, [sp, #24]
   12074:	mov	r9, #0
   12078:	str	r6, [sp, #40]	; 0x28
   1207c:	movt	r0, #2
   12080:	ldr	r0, [r0]
   12084:	cmp	r0, #0
   12088:	beq	120ac <__assert_fail@plt+0x1138>
   1208c:	ldr	r0, [r4, #88]	; 0x58
   12090:	mov	r1, #0
   12094:	add	r2, sp, #90	; 0x5a
   12098:	bl	189f0 <__assert_fail@plt+0x7a7c>
   1209c:	mov	r8, r0
   120a0:	cmp	r9, #0
   120a4:	bne	120f8 <__assert_fail@plt+0x1184>
   120a8:	b	120e4 <__assert_fail@plt+0x1170>
   120ac:	ldr	r0, [r4, #88]	; 0x58
   120b0:	bl	10d34 <getpwuid@plt>
   120b4:	cmp	r0, #0
   120b8:	mov	r8, #0
   120bc:	mov	r9, #0
   120c0:	ldrne	r8, [r0]
   120c4:	ldr	r0, [r4, #92]	; 0x5c
   120c8:	bl	10f68 <getgrgid@plt>
   120cc:	cmp	r0, #0
   120d0:	ldrne	r9, [r0]
   120d4:	cmp	r8, #0
   120d8:	beq	1208c <__assert_fail@plt+0x1118>
   120dc:	cmp	r9, #0
   120e0:	bne	120f8 <__assert_fail@plt+0x1184>
   120e4:	ldr	r0, [r4, #92]	; 0x5c
   120e8:	mov	r1, #0
   120ec:	add	r2, sp, #69	; 0x45
   120f0:	bl	189f0 <__assert_fail@plt+0x7a7c>
   120f4:	mov	r9, r0
   120f8:	mov	r0, r8
   120fc:	bl	10e48 <strlen@plt>
   12100:	mov	r5, r0
   12104:	mov	r0, r9
   12108:	bl	10e48 <strlen@plt>
   1210c:	movw	r1, #41320	; 0xa168
   12110:	movw	r2, #37721	; 0x9359
   12114:	ldr	r3, [sp, #44]	; 0x2c
   12118:	add	r7, r0, r5
   1211c:	movt	r1, #2
   12120:	movt	r2, #1
   12124:	ldr	r1, [r1]
   12128:	cmp	r1, #0
   1212c:	movne	r3, r2
   12130:	mov	r2, #1
   12134:	str	r3, [sp, #44]	; 0x2c
   12138:	ldr	r3, [sp, #32]
   1213c:	moveq	r2, r3
   12140:	cmp	r3, #1
   12144:	movle	r3, r2
   12148:	ldr	r2, [sp, #36]	; 0x24
   1214c:	str	r3, [sp, #32]
   12150:	cmp	r5, r2
   12154:	movgt	r2, r5
   12158:	str	r2, [sp, #36]	; 0x24
   1215c:	ldr	r2, [sp, #28]
   12160:	cmp	r0, r2
   12164:	movgt	r2, r0
   12168:	cmp	r1, #0
   1216c:	movwne	r1, #1
   12170:	str	r2, [sp, #28]
   12174:	add	r0, r7, r1
   12178:	add	r0, r0, #19
   1217c:	bl	18bb8 <__assert_fail@plt+0x7c44>
   12180:	cmp	r0, #0
   12184:	beq	12370 <__assert_fail@plt+0x13fc>
   12188:	str	sl, [sp, #20]
   1218c:	add	sl, r0, #12
   12190:	mov	r6, r0
   12194:	mov	r1, r8
   12198:	str	sl, [r0]
   1219c:	mov	r0, sl
   121a0:	bl	10de8 <strcpy@plt>
   121a4:	add	r0, r5, sl
   121a8:	mov	r1, r9
   121ac:	add	r0, r0, #1
   121b0:	str	r0, [r6, #4]
   121b4:	bl	10de8 <strcpy@plt>
   121b8:	ldr	r0, [r4, #80]	; 0x50
   121bc:	ldr	r9, [sp, #24]
   121c0:	and	r0, r0, #45056	; 0xb000
   121c4:	orr	r0, r0, #16384	; 0x4000
   121c8:	cmp	r0, #24576	; 0x6000
   121cc:	moveq	r0, #1
   121d0:	streq	r0, [sp, #8]
   121d4:	movw	r0, #41320	; 0xa168
   121d8:	movt	r0, #2
   121dc:	ldr	r0, [r0]
   121e0:	cmp	r0, #0
   121e4:	beq	11f18 <__assert_fail@plt+0xfa4>
   121e8:	ldr	r1, [sp, #44]	; 0x2c
   121ec:	add	r0, r7, sl
   121f0:	add	r0, r0, #2
   121f4:	str	r0, [r6, #8]
   121f8:	bl	10de8 <strcpy@plt>
   121fc:	b	11f18 <__assert_fail@plt+0xfa4>
   12200:	movw	r0, #41232	; 0xa110
   12204:	str	r6, [sp, #40]	; 0x28
   12208:	mov	r5, sl
   1220c:	mov	r6, r1
   12210:	mov	sl, r2
   12214:	movt	r0, #2
   12218:	ldr	r7, [r0]
   1221c:	ldr	r0, [r4, #32]
   12220:	bl	10e24 <strerror@plt>
   12224:	movw	r1, #37601	; 0x92e1
   12228:	mov	r3, r0
   1222c:	add	r2, r4, #168	; 0xa8
   12230:	mov	r0, r7
   12234:	movt	r1, #1
   12238:	bl	10e6c <fprintf@plt>
   1223c:	mov	r2, sl
   12240:	mov	sl, r5
   12244:	mov	r1, r6
   12248:	ldr	ip, [sp, #12]
   1224c:	ldr	r6, [sp, #40]	; 0x28
   12250:	ldr	r5, [sp, #16]
   12254:	movw	r0, #41352	; 0xa188
   12258:	mov	lr, #1
   1225c:	movt	r0, #2
   12260:	str	lr, [r4, #16]
   12264:	str	lr, [r0]
   12268:	ldr	r4, [r4, #8]
   1226c:	cmp	r4, #0
   12270:	bne	11f48 <__assert_fail@plt+0xfd4>
   12274:	ldr	r0, [sp, #4]
   12278:	cmp	r1, #0
   1227c:	beq	12368 <__assert_fail@plt+0x13f4>
   12280:	cmp	ip, #0
   12284:	str	r2, [fp, #-60]	; 0xffffffc4
   12288:	str	r1, [fp, #-64]	; 0xffffffc0
   1228c:	str	r0, [fp, #-76]	; 0xffffffb4
   12290:	beq	12320 <__assert_fail@plt+0x13ac>
   12294:	ldr	r0, [sp, #60]	; 0x3c
   12298:	sub	r4, fp, #97	; 0x61
   1229c:	mov	r2, r4
   122a0:	str	r0, [fp, #-72]	; 0xffffffb8
   122a4:	ldr	r0, [sp, #8]
   122a8:	str	r0, [fp, #-68]	; 0xffffffbc
   122ac:	ldr	r0, [sp, #56]	; 0x38
   122b0:	asr	r1, r0, #31
   122b4:	bl	189f0 <__assert_fail@plt+0x7a7c>
   122b8:	bl	10e48 <strlen@plt>
   122bc:	ldr	r1, [sp, #28]
   122c0:	mov	r2, r4
   122c4:	str	r1, [fp, #-48]	; 0xffffffd0
   122c8:	ldr	r1, [sp, #32]
   122cc:	str	r1, [fp, #-52]	; 0xffffffcc
   122d0:	str	r0, [fp, #-56]	; 0xffffffc8
   122d4:	mov	r0, r6
   122d8:	mov	r1, #0
   122dc:	bl	189f0 <__assert_fail@plt+0x7a7c>
   122e0:	bl	10e48 <strlen@plt>
   122e4:	str	r0, [fp, #-44]	; 0xffffffd4
   122e8:	mov	r0, r9
   122ec:	mov	r1, #0
   122f0:	mov	r2, r4
   122f4:	bl	189f0 <__assert_fail@plt+0x7a7c>
   122f8:	bl	10e48 <strlen@plt>
   122fc:	ldr	r1, [sp, #64]	; 0x40
   12300:	str	r0, [fp, #-40]	; 0xffffffd8
   12304:	mov	r0, sl
   12308:	mov	r2, r4
   1230c:	bl	189f0 <__assert_fail@plt+0x7a7c>
   12310:	bl	10e48 <strlen@plt>
   12314:	ldr	r1, [sp, #36]	; 0x24
   12318:	str	r1, [fp, #-32]	; 0xffffffe0
   1231c:	str	r0, [fp, #-36]	; 0xffffffdc
   12320:	movw	r4, #41244	; 0xa11c
   12324:	sub	r0, fp, #76	; 0x4c
   12328:	movt	r4, #2
   1232c:	ldr	r1, [r4, #12]
   12330:	blx	r1
   12334:	mov	r0, #1
   12338:	strb	r0, [r4]
   1233c:	movw	r0, #41356	; 0xa18c
   12340:	ldr	r4, [sp, #4]
   12344:	movt	r0, #2
   12348:	ldr	r0, [r0]
   1234c:	cmp	r0, #0
   12350:	beq	12368 <__assert_fail@plt+0x13f4>
   12354:	ldr	r0, [r4, #20]
   12358:	bl	136b8 <__assert_fail@plt+0x2744>
   1235c:	ldr	r4, [r4, #8]
   12360:	cmp	r4, #0
   12364:	bne	12354 <__assert_fail@plt+0x13e0>
   12368:	sub	sp, fp, #28
   1236c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12370:	movw	r0, #41232	; 0xa110
   12374:	movt	r0, #2
   12378:	ldr	r4, [r0]
   1237c:	bl	10e78 <__errno_location@plt>
   12380:	ldr	r0, [r0]
   12384:	bl	10e24 <strerror@plt>
   12388:	movw	r1, #37489	; 0x9271
   1238c:	mov	r2, r0
   12390:	mov	r0, r4
   12394:	movt	r1, #1
   12398:	bl	10e6c <fprintf@plt>
   1239c:	movw	r1, #41352	; 0xa188
   123a0:	mov	r0, #1
   123a4:	movt	r1, #2
   123a8:	str	r0, [r1]
   123ac:	sub	sp, fp, #28
   123b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123b4:	push	{r4, r5, r6, sl, fp, lr}
   123b8:	add	fp, sp, #16
   123bc:	ldr	r5, [r0]
   123c0:	cmp	r5, #0
   123c4:	beq	12420 <__assert_fail@plt+0x14ac>
   123c8:	movw	r6, #41236	; 0xa114
   123cc:	mov	r4, r0
   123d0:	movt	r6, #2
   123d4:	ldr	r0, [r5, #16]
   123d8:	cmp	r0, #1
   123dc:	bne	123f8 <__assert_fail@plt+0x1484>
   123e0:	ldr	r5, [r5, #8]
   123e4:	cmp	r5, #0
   123e8:	beq	12420 <__assert_fail@plt+0x14ac>
   123ec:	ldr	r0, [r5, #16]
   123f0:	cmp	r0, #1
   123f4:	beq	123e0 <__assert_fail@plt+0x146c>
   123f8:	ldr	r2, [r4, #20]
   123fc:	ldr	r1, [r4, #32]
   12400:	mov	r0, r5
   12404:	bl	12424 <__assert_fail@plt+0x14b0>
   12408:	ldr	r1, [r6]
   1240c:	mov	r0, #10
   12410:	bl	10ed8 <putc@plt>
   12414:	ldr	r5, [r5, #8]
   12418:	cmp	r5, #0
   1241c:	bne	123ec <__assert_fail@plt+0x1478>
   12420:	pop	{r4, r5, r6, sl, fp, pc}
   12424:	push	{r4, r5, r6, sl, fp, lr}
   12428:	add	fp, sp, #16
   1242c:	mov	r4, r0
   12430:	movw	r0, #41328	; 0xa170
   12434:	mov	r6, r2
   12438:	movt	r0, #2
   1243c:	ldr	r0, [r0]
   12440:	cmp	r0, #0
   12444:	beq	12464 <__assert_fail@plt+0x14f0>
   12448:	add	r0, r4, #160	; 0xa0
   1244c:	ldr	r2, [r0]
   12450:	movw	r0, #37511	; 0x9287
   12454:	movt	r0, #1
   12458:	bl	10d40 <printf@plt>
   1245c:	mov	r5, r0
   12460:	b	12468 <__assert_fail@plt+0x14f4>
   12464:	mov	r5, #0
   12468:	movw	r0, #41304	; 0xa158
   1246c:	movt	r0, #2
   12470:	ldr	r0, [r0]
   12474:	cmp	r0, #0
   12478:	beq	124c0 <__assert_fail@plt+0x154c>
   1247c:	movw	r2, #41384	; 0xa1a8
   12480:	add	r0, r4, #128	; 0x80
   12484:	movt	r2, #2
   12488:	ldrd	r0, [r0]
   1248c:	ldr	r2, [r2]
   12490:	sub	r3, r2, #1
   12494:	adds	r0, r0, r3
   12498:	adc	r1, r1, r3, asr #31
   1249c:	asr	r3, r2, #31
   124a0:	bl	18f54 <__assert_fail@plt+0x7fe0>
   124a4:	mov	r2, r0
   124a8:	movw	r0, #37556	; 0x92b4
   124ac:	mov	r3, r1
   124b0:	mov	r1, r6
   124b4:	movt	r0, #1
   124b8:	bl	10d40 <printf@plt>
   124bc:	add	r5, r0, r5
   124c0:	add	r0, r4, #168	; 0xa8
   124c4:	bl	13170 <__assert_fail@plt+0x21fc>
   124c8:	add	r5, r0, r5
   124cc:	movw	r0, #41344	; 0xa180
   124d0:	movt	r0, #2
   124d4:	ldr	r0, [r0]
   124d8:	cmp	r0, #0
   124dc:	beq	124f4 <__assert_fail@plt+0x1580>
   124e0:	ldr	r0, [r4, #80]	; 0x50
   124e4:	bl	12a50 <__assert_fail@plt+0x1adc>
   124e8:	add	r5, r0, r5
   124ec:	mov	r0, r5
   124f0:	pop	{r4, r5, r6, sl, fp, pc}
   124f4:	movw	r0, #41360	; 0xa190
   124f8:	movt	r0, #2
   124fc:	ldr	r0, [r0]
   12500:	cmp	r0, #0
   12504:	beq	124ec <__assert_fail@plt+0x1578>
   12508:	ldr	r0, [r4, #80]	; 0x50
   1250c:	and	r1, r0, #61440	; 0xf000
   12510:	cmp	r1, #16384	; 0x4000
   12514:	beq	124e4 <__assert_fail@plt+0x1570>
   12518:	b	124ec <__assert_fail@plt+0x1578>
   1251c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12520:	add	fp, sp, #28
   12524:	sub	sp, sp, #44	; 0x2c
   12528:	sub	sp, sp, #8192	; 0x2000
   1252c:	ldr	r9, [r0]
   12530:	mov	sl, r0
   12534:	movw	r5, #41304	; 0xa158
   12538:	movt	r5, #2
   1253c:	ldr	r0, [r9, #48]	; 0x30
   12540:	cmp	r0, #0
   12544:	beq	1258c <__assert_fail@plt+0x1618>
   12548:	movw	r0, #41356	; 0xa18c
   1254c:	ldr	r1, [r5]
   12550:	movt	r0, #2
   12554:	ldr	r0, [r0]
   12558:	orrs	r0, r1, r0
   1255c:	beq	1258c <__assert_fail@plt+0x1618>
   12560:	movw	r0, #41384	; 0xa1a8
   12564:	ldr	r1, [sl, #4]
   12568:	movt	r0, #2
   1256c:	ldr	r0, [r0]
   12570:	add	r1, r1, r0
   12574:	sub	r1, r1, #1
   12578:	udiv	r1, r1, r0
   1257c:	movw	r0, #37500	; 0x927c
   12580:	movt	r0, #1
   12584:	bl	10d40 <printf@plt>
   12588:	ldr	r9, [sl]
   1258c:	cmp	r9, #0
   12590:	beq	128ac <__assert_fail@plt+0x1938>
   12594:	sub	lr, fp, #4096	; 0x1000
   12598:	sub	r6, lr, #32
   1259c:	ldr	r0, [r9, #16]
   125a0:	cmp	r0, #1
   125a4:	beq	125f8 <__assert_fail@plt+0x1684>
   125a8:	b	12610 <__assert_fail@plt+0x169c>
   125ac:	movw	r0, #41232	; 0xa110
   125b0:	movt	r0, #2
   125b4:	ldr	r8, [r0]
   125b8:	bl	10e78 <__errno_location@plt>
   125bc:	ldr	r0, [r0]
   125c0:	bl	10e24 <strerror@plt>
   125c4:	movw	r1, #37596	; 0x92dc
   125c8:	mov	r3, r0
   125cc:	mov	r0, r8
   125d0:	mov	r2, r6
   125d4:	movt	r1, #1
   125d8:	bl	10e6c <fprintf@plt>
   125dc:	movw	r0, #41236	; 0xa114
   125e0:	movt	r0, #2
   125e4:	ldr	r1, [r0]
   125e8:	mov	r0, #10
   125ec:	bl	10ed8 <putc@plt>
   125f0:	movw	r5, #41304	; 0xa158
   125f4:	movt	r5, #2
   125f8:	ldr	r9, [r9, #8]
   125fc:	cmp	r9, #0
   12600:	beq	128ac <__assert_fail@plt+0x1938>
   12604:	ldr	r0, [r9, #16]
   12608:	cmp	r0, #1
   1260c:	beq	125f8 <__assert_fail@plt+0x1684>
   12610:	movw	r0, #41328	; 0xa170
   12614:	movt	r0, #2
   12618:	ldr	r0, [r0]
   1261c:	cmp	r0, #0
   12620:	beq	1263c <__assert_fail@plt+0x16c8>
   12624:	add	r0, r9, #160	; 0xa0
   12628:	ldr	r1, [sl, #32]
   1262c:	ldr	r2, [r0]
   12630:	movw	r0, #37511	; 0x9287
   12634:	movt	r0, #1
   12638:	bl	10d40 <printf@plt>
   1263c:	ldr	r0, [r5]
   12640:	mov	r8, r6
   12644:	cmp	r0, #0
   12648:	beq	1268c <__assert_fail@plt+0x1718>
   1264c:	movw	r2, #41384	; 0xa1a8
   12650:	add	r0, r9, #128	; 0x80
   12654:	movt	r2, #2
   12658:	ldrd	r0, [r0]
   1265c:	ldr	r2, [r2]
   12660:	sub	r3, r2, #1
   12664:	adds	r0, r0, r3
   12668:	adc	r1, r1, r3, asr #31
   1266c:	asr	r3, r2, #31
   12670:	bl	18f54 <__assert_fail@plt+0x7fe0>
   12674:	mov	r3, r1
   12678:	ldr	r1, [sl, #20]
   1267c:	mov	r2, r0
   12680:	movw	r0, #37556	; 0x92b4
   12684:	movt	r0, #1
   12688:	bl	10d40 <printf@plt>
   1268c:	ldr	r0, [r9, #80]	; 0x50
   12690:	add	r4, sp, #20
   12694:	mov	r1, r4
   12698:	bl	13554 <__assert_fail@plt+0x25e0>
   1269c:	ldr	r7, [r9, #20]
   126a0:	ldr	r0, [sl, #28]
   126a4:	ldr	r1, [sl, #44]	; 0x2c
   126a8:	ldr	r2, [sl, #36]	; 0x24
   126ac:	ldr	r3, [r9, #84]	; 0x54
   126b0:	ldr	r5, [r7, #4]
   126b4:	ldr	r6, [r7]
   126b8:	stm	sp, {r1, r6}
   126bc:	str	r0, [sp, #8]
   126c0:	movw	r0, #37517	; 0x928d
   126c4:	mov	r1, r4
   126c8:	movt	r0, #1
   126cc:	str	r5, [sp, #12]
   126d0:	bl	10d40 <printf@plt>
   126d4:	movw	r0, #41320	; 0xa168
   126d8:	movt	r0, #2
   126dc:	ldr	r0, [r0]
   126e0:	cmp	r0, #0
   126e4:	beq	126fc <__assert_fail@plt+0x1788>
   126e8:	ldr	r2, [r7, #8]
   126ec:	ldr	r1, [sl, #24]
   126f0:	movw	r0, #37537	; 0x92a1
   126f4:	movt	r0, #1
   126f8:	bl	10d40 <printf@plt>
   126fc:	ldr	r0, [r9, #80]	; 0x50
   12700:	mov	r6, r8
   12704:	add	r4, sp, #40	; 0x28
   12708:	and	r0, r0, #45056	; 0xb000
   1270c:	orr	r0, r0, #16384	; 0x4000
   12710:	cmp	r0, #24576	; 0x6000
   12714:	bne	12738 <__assert_fail@plt+0x17c4>
   12718:	add	r0, r9, #96	; 0x60
   1271c:	ldr	r0, [r0]
   12720:	ubfx	r1, r0, #8, #8
   12724:	uxtb	r2, r0
   12728:	movw	r0, #37543	; 0x92a7
   1272c:	movt	r0, #1
   12730:	bl	10d40 <printf@plt>
   12734:	b	12784 <__assert_fail@plt+0x1810>
   12738:	ldr	r1, [sl, #8]
   1273c:	ldr	r3, [sl, #40]	; 0x28
   12740:	add	r0, r9, #112	; 0x70
   12744:	cmp	r1, #0
   12748:	beq	1276c <__assert_fail@plt+0x17f8>
   1274c:	ldrd	r0, [r0]
   12750:	movw	r2, #37577	; 0x92c9
   12754:	movt	r2, #1
   12758:	stm	sp, {r0, r1}
   1275c:	movw	r0, #37553	; 0x92b1
   12760:	rsb	r1, r3, #8
   12764:	movt	r0, #1
   12768:	b	12780 <__assert_fail@plt+0x180c>
   1276c:	ldm	r0, {r2, r5}
   12770:	movw	r0, #37556	; 0x92b4
   12774:	mov	r1, r3
   12778:	mov	r3, r5
   1277c:	movt	r0, #1
   12780:	bl	10d40 <printf@plt>
   12784:	movw	r0, #41336	; 0xa178
   12788:	movt	r0, #2
   1278c:	ldr	r0, [r0]
   12790:	cmp	r0, #0
   12794:	beq	127a0 <__assert_fail@plt+0x182c>
   12798:	add	r0, r9, #136	; 0x88
   1279c:	b	127b8 <__assert_fail@plt+0x1844>
   127a0:	movw	r0, #41380	; 0xa1a4
   127a4:	movt	r0, #2
   127a8:	ldr	r0, [r0]
   127ac:	cmp	r0, #0
   127b0:	addeq	r0, r9, #144	; 0x90
   127b4:	addne	r0, r9, #152	; 0x98
   127b8:	ldr	r0, [r0]
   127bc:	bl	128b4 <__assert_fail@plt+0x1940>
   127c0:	add	r8, r9, #168	; 0xa8
   127c4:	mov	r0, r8
   127c8:	bl	13170 <__assert_fail@plt+0x21fc>
   127cc:	movw	r0, #41344	; 0xa180
   127d0:	movt	r0, #2
   127d4:	ldr	r0, [r0]
   127d8:	cmp	r0, #0
   127dc:	beq	127fc <__assert_fail@plt+0x1888>
   127e0:	ldr	r0, [r9, #80]	; 0x50
   127e4:	bl	12a50 <__assert_fail@plt+0x1adc>
   127e8:	ldr	r0, [r9, #80]	; 0x50
   127ec:	and	r0, r0, #61440	; 0xf000
   127f0:	cmp	r0, #40960	; 0xa000
   127f4:	bne	125dc <__assert_fail@plt+0x1668>
   127f8:	b	12830 <__assert_fail@plt+0x18bc>
   127fc:	movw	r0, #41360	; 0xa190
   12800:	movt	r0, #2
   12804:	ldr	r0, [r0]
   12808:	cmp	r0, #0
   1280c:	beq	12820 <__assert_fail@plt+0x18ac>
   12810:	ldr	r0, [r9, #80]	; 0x50
   12814:	and	r1, r0, #61440	; 0xf000
   12818:	cmp	r1, #16384	; 0x4000
   1281c:	bleq	12a50 <__assert_fail@plt+0x1adc>
   12820:	ldr	r0, [r9, #80]	; 0x50
   12824:	and	r0, r0, #61440	; 0xf000
   12828:	cmp	r0, #40960	; 0xa000
   1282c:	bne	125dc <__assert_fail@plt+0x1668>
   12830:	ldr	r0, [r9, #48]	; 0x30
   12834:	cmp	r0, #0
   12838:	beq	1285c <__assert_fail@plt+0x18e8>
   1283c:	ldr	r0, [r9, #4]
   12840:	movw	r2, #37590	; 0x92d6
   12844:	mov	r1, #4096	; 0x1000
   12848:	movt	r2, #1
   1284c:	ldr	r3, [r0, #24]
   12850:	mov	r0, r6
   12854:	str	r8, [sp]
   12858:	b	12870 <__assert_fail@plt+0x18fc>
   1285c:	movw	r2, #37497	; 0x9279
   12860:	mov	r0, r6
   12864:	mov	r1, #4096	; 0x1000
   12868:	mov	r3, r8
   1286c:	movt	r2, #1
   12870:	bl	10e84 <snprintf@plt>
   12874:	mov	r0, r6
   12878:	mov	r1, r4
   1287c:	movw	r2, #4095	; 0xfff
   12880:	bl	10dc4 <readlink@plt>
   12884:	cmn	r0, #1
   12888:	beq	125ac <__assert_fail@plt+0x1638>
   1288c:	mov	r1, #0
   12890:	strb	r1, [r4, r0]
   12894:	movw	r0, #37609	; 0x92e9
   12898:	movt	r0, #1
   1289c:	bl	10d40 <printf@plt>
   128a0:	mov	r0, r4
   128a4:	bl	13170 <__assert_fail@plt+0x21fc>
   128a8:	b	125dc <__assert_fail@plt+0x1668>
   128ac:	sub	sp, fp, #28
   128b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   128b8:	add	fp, sp, #24
   128bc:	sub	sp, sp, #8
   128c0:	str	r0, [sp, #4]
   128c4:	add	r0, sp, #4
   128c8:	bl	10d88 <ctime@plt>
   128cc:	movw	r5, #41236	; 0xa114
   128d0:	mov	r4, r0
   128d4:	ldrb	r0, [r0, #4]
   128d8:	movt	r5, #2
   128dc:	ldr	r1, [r5]
   128e0:	bl	10ed8 <putc@plt>
   128e4:	ldrb	r0, [r4, #5]
   128e8:	ldr	r1, [r5]
   128ec:	bl	10ed8 <putc@plt>
   128f0:	ldrb	r0, [r4, #6]
   128f4:	ldr	r1, [r5]
   128f8:	bl	10ed8 <putc@plt>
   128fc:	ldrb	r0, [r4, #7]
   12900:	ldr	r1, [r5]
   12904:	bl	10ed8 <putc@plt>
   12908:	ldrb	r0, [r4, #8]
   1290c:	ldr	r1, [r5]
   12910:	bl	10ed8 <putc@plt>
   12914:	ldrb	r0, [r4, #9]
   12918:	ldr	r1, [r5]
   1291c:	bl	10ed8 <putc@plt>
   12920:	ldrb	r0, [r4, #10]
   12924:	ldr	r1, [r5]
   12928:	bl	10ed8 <putc@plt>
   1292c:	movw	r0, #41364	; 0xa194
   12930:	movt	r0, #2
   12934:	ldr	r0, [r0]
   12938:	cmp	r0, #0
   1293c:	beq	129b8 <__assert_fail@plt+0x1a44>
   12940:	ldr	r1, [r5]
   12944:	ldrb	r0, [r4, #11]
   12948:	bl	10ed8 <putc@plt>
   1294c:	ldrb	r0, [r4, #12]
   12950:	ldr	r1, [r5]
   12954:	bl	10ed8 <putc@plt>
   12958:	ldrb	r0, [r4, #13]
   1295c:	ldr	r1, [r5]
   12960:	bl	10ed8 <putc@plt>
   12964:	ldrb	r0, [r4, #14]
   12968:	ldr	r1, [r5]
   1296c:	bl	10ed8 <putc@plt>
   12970:	ldrb	r0, [r4, #15]
   12974:	ldr	r1, [r5]
   12978:	bl	10ed8 <putc@plt>
   1297c:	ldrb	r0, [r4, #16]
   12980:	ldr	r1, [r5]
   12984:	bl	10ed8 <putc@plt>
   12988:	ldrb	r0, [r4, #17]
   1298c:	ldr	r1, [r5]
   12990:	bl	10ed8 <putc@plt>
   12994:	ldrb	r0, [r4, #18]
   12998:	ldr	r1, [r5]
   1299c:	bl	10ed8 <putc@plt>
   129a0:	mov	r8, #23
   129a4:	mov	r9, #22
   129a8:	mov	r6, #21
   129ac:	mov	r7, #20
   129b0:	mov	r0, #19
   129b4:	b	129e8 <__assert_fail@plt+0x1a74>
   129b8:	ldr	r0, [sp, #4]
   129bc:	add	r0, r0, #61696	; 0xf100
   129c0:	add	r6, r0, #15663104	; 0xef0000
   129c4:	mov	r0, #0
   129c8:	bl	10d7c <time@plt>
   129cc:	cmp	r6, r0
   129d0:	ble	129f0 <__assert_fail@plt+0x1a7c>
   129d4:	mov	r8, #15
   129d8:	mov	r9, #14
   129dc:	mov	r6, #13
   129e0:	mov	r7, #12
   129e4:	mov	r0, #11
   129e8:	ldrb	r0, [r4, r0]
   129ec:	b	12a04 <__assert_fail@plt+0x1a90>
   129f0:	mov	r8, #23
   129f4:	mov	r9, #22
   129f8:	mov	r6, #21
   129fc:	mov	r7, #20
   12a00:	mov	r0, #32
   12a04:	ldr	r1, [r5]
   12a08:	bl	10ed8 <putc@plt>
   12a0c:	ldrb	r0, [r4, r7]
   12a10:	ldr	r1, [r5]
   12a14:	bl	10ed8 <putc@plt>
   12a18:	ldrb	r0, [r4, r6]
   12a1c:	ldr	r1, [r5]
   12a20:	bl	10ed8 <putc@plt>
   12a24:	ldrb	r0, [r4, r9]
   12a28:	ldr	r1, [r5]
   12a2c:	bl	10ed8 <putc@plt>
   12a30:	ldrb	r0, [r4, r8]
   12a34:	ldr	r1, [r5]
   12a38:	bl	10ed8 <putc@plt>
   12a3c:	ldr	r1, [r5]
   12a40:	mov	r0, #32
   12a44:	bl	10ed8 <putc@plt>
   12a48:	sub	sp, fp, #24
   12a4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12a50:	and	r1, r0, #61440	; 0xf000
   12a54:	cmp	r1, #40960	; 0xa000
   12a58:	bge	12a74 <__assert_fail@plt+0x1b00>
   12a5c:	cmp	r1, #4096	; 0x1000
   12a60:	beq	12a9c <__assert_fail@plt+0x1b28>
   12a64:	mov	r2, #47	; 0x2f
   12a68:	cmp	r1, #16384	; 0x4000
   12a6c:	beq	12aa8 <__assert_fail@plt+0x1b34>
   12a70:	b	12a88 <__assert_fail@plt+0x1b14>
   12a74:	beq	12aa4 <__assert_fail@plt+0x1b30>
   12a78:	cmp	r1, #49152	; 0xc000
   12a7c:	bne	12a88 <__assert_fail@plt+0x1b14>
   12a80:	mov	r2, #61	; 0x3d
   12a84:	b	12aa8 <__assert_fail@plt+0x1b34>
   12a88:	tst	r0, #73	; 0x49
   12a8c:	mov	r2, #42	; 0x2a
   12a90:	moveq	r0, #0
   12a94:	bxeq	lr
   12a98:	b	12aa8 <__assert_fail@plt+0x1b34>
   12a9c:	mov	r2, #124	; 0x7c
   12aa0:	b	12aa8 <__assert_fail@plt+0x1b34>
   12aa4:	mov	r2, #64	; 0x40
   12aa8:	push	{fp, lr}
   12aac:	mov	fp, sp
   12ab0:	movw	r0, #41236	; 0xa114
   12ab4:	movt	r0, #2
   12ab8:	ldr	r1, [r0]
   12abc:	mov	r0, r2
   12ac0:	bl	10ed8 <putc@plt>
   12ac4:	mov	r0, #1
   12ac8:	pop	{fp, pc}
   12acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad0:	add	fp, sp, #28
   12ad4:	sub	sp, sp, #20
   12ad8:	movw	r1, #41328	; 0xa170
   12adc:	mov	r4, r0
   12ae0:	ldr	r0, [r0, #16]
   12ae4:	movw	r5, #41304	; 0xa158
   12ae8:	movw	r2, #41360	; 0xa190
   12aec:	movt	r1, #2
   12af0:	movt	r5, #2
   12af4:	movt	r2, #2
   12af8:	ldr	r1, [r1]
   12afc:	ldr	r2, [r2]
   12b00:	cmp	r1, #0
   12b04:	ldrne	r1, [r4, #32]
   12b08:	addne	r0, r0, r1
   12b0c:	ldr	r1, [r5]
   12b10:	addne	r0, r0, #1
   12b14:	cmp	r1, #0
   12b18:	ldrne	r1, [r4, #20]
   12b1c:	addne	r0, r0, r1
   12b20:	movw	r1, #41344	; 0xa180
   12b24:	movt	r1, #2
   12b28:	addne	r0, r0, #1
   12b2c:	ldr	r1, [r1]
   12b30:	orrs	r1, r2, r1
   12b34:	movw	r1, #41204	; 0xa0f4
   12b38:	movt	r1, #2
   12b3c:	addne	r0, r0, #1
   12b40:	add	r0, r0, #1
   12b44:	ldr	r1, [r1]
   12b48:	add	r1, r1, #1
   12b4c:	cmp	r1, r0, lsl #1
   12b50:	bge	12bb8 <__assert_fail@plt+0x1c44>
   12b54:	ldr	r5, [r4]
   12b58:	cmp	r5, #0
   12b5c:	beq	12e48 <__assert_fail@plt+0x1ed4>
   12b60:	movw	r6, #41236	; 0xa114
   12b64:	movt	r6, #2
   12b68:	ldr	r0, [r5, #16]
   12b6c:	cmp	r0, #1
   12b70:	bne	12b8c <__assert_fail@plt+0x1c18>
   12b74:	ldr	r5, [r5, #8]
   12b78:	cmp	r5, #0
   12b7c:	beq	12e48 <__assert_fail@plt+0x1ed4>
   12b80:	ldr	r0, [r5, #16]
   12b84:	cmp	r0, #1
   12b88:	beq	12b74 <__assert_fail@plt+0x1c00>
   12b8c:	ldr	r2, [r4, #20]
   12b90:	ldr	r1, [r4, #32]
   12b94:	mov	r0, r5
   12b98:	bl	12424 <__assert_fail@plt+0x14b0>
   12b9c:	ldr	r1, [r6]
   12ba0:	mov	r0, #10
   12ba4:	bl	10ed8 <putc@plt>
   12ba8:	ldr	r5, [r5, #8]
   12bac:	cmp	r5, #0
   12bb0:	bne	12b80 <__assert_fail@plt+0x1c0c>
   12bb4:	b	12e48 <__assert_fail@plt+0x1ed4>
   12bb8:	sdiv	r0, r1, r0
   12bbc:	str	r0, [sp, #8]
   12bc0:	sdiv	r0, r1, r0
   12bc4:	cmp	r0, #0
   12bc8:	str	r0, [sp, #16]
   12bcc:	beq	12e48 <__assert_fail@plt+0x1ed4>
   12bd0:	movw	r7, #41216	; 0xa100
   12bd4:	ldr	r1, [r4, #12]
   12bd8:	movw	r6, #41260	; 0xa12c
   12bdc:	movt	r7, #2
   12be0:	movt	r6, #2
   12be4:	ldr	r0, [r7]
   12be8:	cmp	r1, r0
   12bec:	ble	12c10 <__assert_fail@plt+0x1c9c>
   12bf0:	ldr	r0, [r6]
   12bf4:	lsl	r1, r1, #2
   12bf8:	bl	18be8 <__assert_fail@plt+0x7c74>
   12bfc:	cmp	r0, #0
   12c00:	beq	12dbc <__assert_fail@plt+0x1e48>
   12c04:	ldr	r1, [r4, #12]
   12c08:	str	r0, [r6]
   12c0c:	str	r1, [r7]
   12c10:	ldr	r0, [r6]
   12c14:	ldr	r1, [r4]
   12c18:	mov	r2, #0
   12c1c:	str	r2, [sp, #12]
   12c20:	ldr	r2, [r1, #16]
   12c24:	cmp	r2, #1
   12c28:	bne	12c44 <__assert_fail@plt+0x1cd0>
   12c2c:	ldr	r1, [r1, #8]
   12c30:	cmp	r1, #0
   12c34:	beq	12c60 <__assert_fail@plt+0x1cec>
   12c38:	ldr	r2, [r1, #16]
   12c3c:	cmp	r2, #1
   12c40:	beq	12c2c <__assert_fail@plt+0x1cb8>
   12c44:	ldr	r2, [sp, #12]
   12c48:	str	r1, [r0, r2, lsl #2]
   12c4c:	add	r2, r2, #1
   12c50:	str	r2, [sp, #12]
   12c54:	ldr	r1, [r1, #8]
   12c58:	cmp	r1, #0
   12c5c:	bne	12c38 <__assert_fail@plt+0x1cc4>
   12c60:	ldr	r0, [sp, #8]
   12c64:	ldr	r1, [sp, #12]
   12c68:	sdiv	r7, r1, r0
   12c6c:	mls	r0, r7, r0, r1
   12c70:	cmp	r0, #0
   12c74:	ldr	r0, [r4]
   12c78:	addne	r7, r7, #1
   12c7c:	ldr	r0, [r0, #48]	; 0x30
   12c80:	cmp	r0, #0
   12c84:	beq	12cc8 <__assert_fail@plt+0x1d54>
   12c88:	movw	r0, #41356	; 0xa18c
   12c8c:	ldr	r1, [r5]
   12c90:	movt	r0, #2
   12c94:	ldr	r0, [r0]
   12c98:	orrs	r0, r1, r0
   12c9c:	beq	12cc8 <__assert_fail@plt+0x1d54>
   12ca0:	movw	r0, #41384	; 0xa1a8
   12ca4:	ldr	r1, [r4, #4]
   12ca8:	movt	r0, #2
   12cac:	ldr	r0, [r0]
   12cb0:	add	r1, r1, r0
   12cb4:	sub	r1, r1, #1
   12cb8:	udiv	r1, r1, r0
   12cbc:	movw	r0, #37500	; 0x927c
   12cc0:	movt	r0, #1
   12cc4:	bl	10d40 <printf@plt>
   12cc8:	cmp	r7, #1
   12ccc:	blt	12e48 <__assert_fail@plt+0x1ed4>
   12cd0:	movw	r8, #41236	; 0xa114
   12cd4:	mov	r5, #0
   12cd8:	movt	r8, #2
   12cdc:	b	12d08 <__assert_fail@plt+0x1d94>
   12ce0:	ldr	r1, [r8]
   12ce4:	mov	r0, #10
   12ce8:	bl	10ed8 <putc@plt>
   12cec:	ldr	r5, [sp, #4]
   12cf0:	mov	r7, r6
   12cf4:	add	r5, r5, #1
   12cf8:	cmp	r5, r6
   12cfc:	movw	r6, #41260	; 0xa12c
   12d00:	movt	r6, #2
   12d04:	beq	12e48 <__assert_fail@plt+0x1ed4>
   12d08:	ldr	r0, [r6]
   12d0c:	ldr	r2, [r4, #20]
   12d10:	ldr	r1, [r4, #32]
   12d14:	ldr	r0, [r0, r5, lsl #2]
   12d18:	bl	12424 <__assert_fail@plt+0x14b0>
   12d1c:	ldr	r1, [sp, #12]
   12d20:	add	r9, r5, r7
   12d24:	mov	r6, r7
   12d28:	str	r5, [sp, #4]
   12d2c:	cmp	r9, r1
   12d30:	bge	12ce0 <__assert_fail@plt+0x1d6c>
   12d34:	mov	sl, #0
   12d38:	ldr	r1, [sp, #8]
   12d3c:	add	sl, sl, #1
   12d40:	cmp	sl, r1
   12d44:	bne	12d8c <__assert_fail@plt+0x1e18>
   12d48:	b	12ce0 <__assert_fail@plt+0x1d6c>
   12d4c:	movw	r0, #41260	; 0xa12c
   12d50:	ldr	r2, [r7, #20]
   12d54:	ldr	r1, [r7, #32]
   12d58:	mov	r4, r7
   12d5c:	movt	r0, #2
   12d60:	ldr	r0, [r0]
   12d64:	ldr	r0, [r0, r9, lsl #2]
   12d68:	bl	12424 <__assert_fail@plt+0x14b0>
   12d6c:	ldr	r1, [sp, #12]
   12d70:	add	r9, r9, r6
   12d74:	cmp	r9, r1
   12d78:	bge	12ce0 <__assert_fail@plt+0x1d6c>
   12d7c:	ldr	r1, [sp, #8]
   12d80:	add	sl, sl, #1
   12d84:	cmp	sl, r1
   12d88:	beq	12ce0 <__assert_fail@plt+0x1d6c>
   12d8c:	ldr	r1, [sp, #16]
   12d90:	mov	r7, r4
   12d94:	cmp	r0, r1
   12d98:	bge	12d4c <__assert_fail@plt+0x1dd8>
   12d9c:	ldr	r1, [sp, #16]
   12da0:	sub	r4, r1, r0
   12da4:	ldr	r1, [r8]
   12da8:	mov	r0, #32
   12dac:	bl	10ed8 <putc@plt>
   12db0:	subs	r4, r4, #1
   12db4:	bne	12da4 <__assert_fail@plt+0x1e30>
   12db8:	b	12d4c <__assert_fail@plt+0x1dd8>
   12dbc:	movw	r0, #41232	; 0xa110
   12dc0:	movt	r0, #2
   12dc4:	ldr	r5, [r0]
   12dc8:	bl	10e78 <__errno_location@plt>
   12dcc:	ldr	r0, [r0]
   12dd0:	bl	10e24 <strerror@plt>
   12dd4:	movw	r1, #37563	; 0x92bb
   12dd8:	mov	r2, r0
   12ddc:	mov	r0, r5
   12de0:	movt	r1, #1
   12de4:	bl	10e6c <fprintf@plt>
   12de8:	ldr	r5, [r4]
   12dec:	cmp	r5, #0
   12df0:	beq	12e48 <__assert_fail@plt+0x1ed4>
   12df4:	movw	r6, #41236	; 0xa114
   12df8:	movt	r6, #2
   12dfc:	ldr	r0, [r5, #16]
   12e00:	cmp	r0, #1
   12e04:	bne	12e20 <__assert_fail@plt+0x1eac>
   12e08:	ldr	r5, [r5, #8]
   12e0c:	cmp	r5, #0
   12e10:	beq	12e48 <__assert_fail@plt+0x1ed4>
   12e14:	ldr	r0, [r5, #16]
   12e18:	cmp	r0, #1
   12e1c:	beq	12e08 <__assert_fail@plt+0x1e94>
   12e20:	ldr	r2, [r4, #20]
   12e24:	ldr	r1, [r4, #32]
   12e28:	mov	r0, r5
   12e2c:	bl	12424 <__assert_fail@plt+0x14b0>
   12e30:	ldr	r1, [r6]
   12e34:	mov	r0, #10
   12e38:	bl	10ed8 <putc@plt>
   12e3c:	ldr	r5, [r5, #8]
   12e40:	cmp	r5, #0
   12e44:	bne	12e14 <__assert_fail@plt+0x1ea0>
   12e48:	sub	sp, fp, #28
   12e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e54:	add	fp, sp, #28
   12e58:	sub	sp, sp, #4
   12e5c:	mov	sl, r0
   12e60:	ldr	r1, [r0, #16]
   12e64:	movw	r0, #41328	; 0xa170
   12e68:	movw	r3, #41360	; 0xa190
   12e6c:	movt	r0, #2
   12e70:	movt	r3, #2
   12e74:	ldr	r0, [r0]
   12e78:	ldr	r3, [r3]
   12e7c:	cmp	r0, #0
   12e80:	ldrne	r0, [sl, #32]
   12e84:	addne	r0, r1, r0
   12e88:	addne	r1, r0, #1
   12e8c:	movw	r0, #41304	; 0xa158
   12e90:	movt	r0, #2
   12e94:	ldr	r0, [r0]
   12e98:	cmp	r0, #0
   12e9c:	ldrne	r2, [sl, #20]
   12ea0:	addne	r1, r1, r2
   12ea4:	movw	r2, #41344	; 0xa180
   12ea8:	movt	r2, #2
   12eac:	addne	r1, r1, #1
   12eb0:	ldr	r2, [r2]
   12eb4:	orrs	r2, r3, r2
   12eb8:	movw	r2, #41204	; 0xa0f4
   12ebc:	movt	r2, #2
   12ec0:	addne	r1, r1, #1
   12ec4:	add	r1, r1, #1
   12ec8:	ldr	r2, [r2]
   12ecc:	add	r2, r2, #1
   12ed0:	cmp	r2, r1, lsl #1
   12ed4:	bge	12f3c <__assert_fail@plt+0x1fc8>
   12ed8:	ldr	r5, [sl]
   12edc:	cmp	r5, #0
   12ee0:	beq	13034 <__assert_fail@plt+0x20c0>
   12ee4:	movw	r6, #41236	; 0xa114
   12ee8:	movt	r6, #2
   12eec:	ldr	r0, [r5, #16]
   12ef0:	cmp	r0, #1
   12ef4:	bne	12f10 <__assert_fail@plt+0x1f9c>
   12ef8:	ldr	r5, [r5, #8]
   12efc:	cmp	r5, #0
   12f00:	beq	13034 <__assert_fail@plt+0x20c0>
   12f04:	ldr	r0, [r5, #16]
   12f08:	cmp	r0, #1
   12f0c:	beq	12ef8 <__assert_fail@plt+0x1f84>
   12f10:	ldr	r2, [sl, #20]
   12f14:	ldr	r1, [sl, #32]
   12f18:	mov	r0, r5
   12f1c:	bl	12424 <__assert_fail@plt+0x14b0>
   12f20:	ldr	r1, [r6]
   12f24:	mov	r0, #10
   12f28:	bl	10ed8 <putc@plt>
   12f2c:	ldr	r5, [r5, #8]
   12f30:	cmp	r5, #0
   12f34:	bne	12f04 <__assert_fail@plt+0x1f90>
   12f38:	b	13034 <__assert_fail@plt+0x20c0>
   12f3c:	sdiv	r9, r2, r1
   12f40:	sdiv	r8, r2, r9
   12f44:	cmp	r8, #0
   12f48:	beq	13034 <__assert_fail@plt+0x20c0>
   12f4c:	ldr	r5, [sl]
   12f50:	ldr	r1, [r5, #48]	; 0x30
   12f54:	cmp	r1, #0
   12f58:	beq	12fa0 <__assert_fail@plt+0x202c>
   12f5c:	movw	r1, #41356	; 0xa18c
   12f60:	movt	r1, #2
   12f64:	ldr	r1, [r1]
   12f68:	orrs	r0, r0, r1
   12f6c:	beq	12fa0 <__assert_fail@plt+0x202c>
   12f70:	movw	r0, #41384	; 0xa1a8
   12f74:	ldr	r1, [sl, #4]
   12f78:	mov	r3, #0
   12f7c:	movt	r0, #2
   12f80:	ldr	r0, [r0]
   12f84:	add	r1, r1, r0
   12f88:	sub	r1, r1, #1
   12f8c:	udiv	r2, r1, r0
   12f90:	movw	r0, #37578	; 0x92ca
   12f94:	movt	r0, #1
   12f98:	bl	10d40 <printf@plt>
   12f9c:	ldr	r5, [sl]
   12fa0:	movw	r7, #41236	; 0xa114
   12fa4:	cmp	r5, #0
   12fa8:	movt	r7, #2
   12fac:	beq	1303c <__assert_fail@plt+0x20c8>
   12fb0:	mov	r6, #0
   12fb4:	ldr	r0, [r5, #16]
   12fb8:	cmp	r0, #1
   12fbc:	beq	12fe4 <__assert_fail@plt+0x2070>
   12fc0:	b	12ffc <__assert_fail@plt+0x2088>
   12fc4:	ldr	r2, [sl, #20]
   12fc8:	ldr	r1, [sl, #32]
   12fcc:	mov	r0, r5
   12fd0:	bl	12424 <__assert_fail@plt+0x14b0>
   12fd4:	add	r6, r6, #1
   12fd8:	cmp	r6, r9
   12fdc:	cmplt	r0, r8
   12fe0:	blt	13018 <__assert_fail@plt+0x20a4>
   12fe4:	ldr	r5, [r5, #8]
   12fe8:	cmp	r5, #0
   12fec:	beq	1303c <__assert_fail@plt+0x20c8>
   12ff0:	ldr	r0, [r5, #16]
   12ff4:	cmp	r0, #1
   12ff8:	beq	12fe4 <__assert_fail@plt+0x2070>
   12ffc:	cmp	r6, r9
   13000:	blt	12fc4 <__assert_fail@plt+0x2050>
   13004:	ldr	r1, [r7]
   13008:	mov	r0, #10
   1300c:	bl	10ed8 <putc@plt>
   13010:	mov	r6, #0
   13014:	b	12fc4 <__assert_fail@plt+0x2050>
   13018:	sub	r4, r8, r0
   1301c:	ldr	r1, [r7]
   13020:	mov	r0, #32
   13024:	bl	10ed8 <putc@plt>
   13028:	subs	r4, r4, #1
   1302c:	bne	1301c <__assert_fail@plt+0x20a8>
   13030:	b	12fe4 <__assert_fail@plt+0x2070>
   13034:	sub	sp, fp, #28
   13038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1303c:	ldr	r1, [r7]
   13040:	mov	r0, #10
   13044:	sub	sp, fp, #28
   13048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1304c:	b	10ed8 <putc@plt>
   13050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13054:	add	fp, sp, #28
   13058:	sub	sp, sp, #4
   1305c:	mov	r4, r0
   13060:	movw	r0, #41328	; 0xa170
   13064:	movt	r0, #2
   13068:	ldr	r0, [r0]
   1306c:	cmp	r0, #0
   13070:	beq	13080 <__assert_fail@plt+0x210c>
   13074:	ldr	r0, [r4, #32]
   13078:	add	r6, r0, #1
   1307c:	b	13084 <__assert_fail@plt+0x2110>
   13080:	mov	r6, #0
   13084:	movw	r0, #41304	; 0xa158
   13088:	ldr	r5, [r4]
   1308c:	movw	sl, #41236	; 0xa114
   13090:	movt	r0, #2
   13094:	movt	sl, #2
   13098:	ldr	r0, [r0]
   1309c:	cmp	r0, #0
   130a0:	ldrne	r0, [r4, #20]
   130a4:	addne	r0, r6, r0
   130a8:	addne	r6, r0, #1
   130ac:	movw	r0, #41344	; 0xa180
   130b0:	movt	r0, #2
   130b4:	ldr	r0, [r0]
   130b8:	cmp	r0, #0
   130bc:	addne	r6, r6, #1
   130c0:	cmp	r5, #0
   130c4:	beq	1315c <__assert_fail@plt+0x21e8>
   130c8:	mov	r7, #0
   130cc:	ldr	r0, [r5, #16]
   130d0:	cmp	r0, #1
   130d4:	beq	130f0 <__assert_fail@plt+0x217c>
   130d8:	b	13108 <__assert_fail@plt+0x2194>
   130dc:	ldr	r2, [r4, #20]
   130e0:	ldr	r1, [r4, #32]
   130e4:	mov	r0, r5
   130e8:	bl	12424 <__assert_fail@plt+0x14b0>
   130ec:	add	r7, r0, r7
   130f0:	ldr	r5, [r5, #8]
   130f4:	cmp	r5, #0
   130f8:	beq	1315c <__assert_fail@plt+0x21e8>
   130fc:	ldr	r0, [r5, #16]
   13100:	cmp	r0, #1
   13104:	beq	130f0 <__assert_fail@plt+0x217c>
   13108:	cmp	r7, #1
   1310c:	blt	130dc <__assert_fail@plt+0x2168>
   13110:	ldr	r1, [sl]
   13114:	mov	r0, #44	; 0x2c
   13118:	bl	10ed8 <putc@plt>
   1311c:	ldr	r1, [r5, #52]	; 0x34
   13120:	add	r7, r7, #2
   13124:	add	r0, r6, r7
   13128:	add	r8, r0, r1
   1312c:	movw	r0, #41204	; 0xa0f4
   13130:	ldr	r1, [sl]
   13134:	movt	r0, #2
   13138:	ldr	r9, [r0]
   1313c:	mov	r0, #10
   13140:	cmp	r8, r9
   13144:	movwcc	r0, #32
   13148:	bl	10ed8 <putc@plt>
   1314c:	cmp	r8, r9
   13150:	mov	r0, #0
   13154:	movcs	r7, r0
   13158:	b	130dc <__assert_fail@plt+0x2168>
   1315c:	ldr	r1, [sl]
   13160:	mov	r0, #10
   13164:	sub	sp, fp, #28
   13168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1316c:	b	10ed8 <putc@plt>
   13170:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13174:	add	fp, sp, #24
   13178:	ldrb	r7, [r0]
   1317c:	cmp	r7, #0
   13180:	beq	131ec <__assert_fail@plt+0x2278>
   13184:	add	r6, r0, #1
   13188:	bl	10e3c <__ctype_b_loc@plt>
   1318c:	movw	r8, #41396	; 0xa1b4
   13190:	movw	r9, #41236	; 0xa114
   13194:	mov	r5, r0
   13198:	mov	r4, #0
   1319c:	movt	r8, #2
   131a0:	movt	r9, #2
   131a4:	ldr	r2, [r5]
   131a8:	uxtb	r1, r7
   131ac:	ldr	r0, [r8]
   131b0:	add	r2, r2, r1, lsl #1
   131b4:	cmp	r0, #0
   131b8:	mov	r0, r1
   131bc:	movwne	r0, #63	; 0x3f
   131c0:	ldrh	r2, [r2]
   131c4:	tst	r2, #16384	; 0x4000
   131c8:	movne	r0, r1
   131cc:	ldr	r1, [r9]
   131d0:	bl	10ed8 <putc@plt>
   131d4:	ldrb	r7, [r6, r4]
   131d8:	add	r4, r4, #1
   131dc:	cmp	r7, #0
   131e0:	bne	131a4 <__assert_fail@plt+0x2230>
   131e4:	mov	r0, r4
   131e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131ec:	mov	r4, #0
   131f0:	mov	r0, r4
   131f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131f8:	push	{fp, lr}
   131fc:	mov	fp, sp
   13200:	movw	r0, #41232	; 0xa110
   13204:	mov	r1, #51	; 0x33
   13208:	mov	r2, #1
   1320c:	movt	r0, #2
   13210:	ldr	r3, [r0]
   13214:	movw	r0, #37614	; 0x92ee
   13218:	movt	r0, #1
   1321c:	bl	10dd0 <fwrite@plt>
   13220:	mov	r0, #1
   13224:	pop	{fp, pc}
   13228:	add	r0, r0, #168	; 0xa8
   1322c:	add	r1, r1, #168	; 0xa8
   13230:	b	10d1c <strcmp@plt>
   13234:	add	r2, r1, #168	; 0xa8
   13238:	add	r1, r0, #168	; 0xa8
   1323c:	mov	r0, r2
   13240:	b	10d1c <strcmp@plt>
   13244:	push	{r4, sl, fp, lr}
   13248:	add	fp, sp, #8
   1324c:	ldr	r3, [r0, #144]	; 0x90
   13250:	ldr	r2, [r1, #144]	; 0x90
   13254:	mov	ip, r0
   13258:	mov	r0, #1
   1325c:	cmp	r2, r3
   13260:	ble	13268 <__assert_fail@plt+0x22f4>
   13264:	pop	{r4, sl, fp, pc}
   13268:	bne	1327c <__assert_fail@plt+0x2308>
   1326c:	ldr	lr, [ip, #148]	; 0x94
   13270:	ldr	r4, [r1, #148]	; 0x94
   13274:	cmp	r4, lr
   13278:	bgt	13264 <__assert_fail@plt+0x22f0>
   1327c:	mvn	r0, #0
   13280:	cmp	r2, r3
   13284:	poplt	{r4, sl, fp, pc}
   13288:	bne	1329c <__assert_fail@plt+0x2328>
   1328c:	ldr	r2, [ip, #148]	; 0x94
   13290:	ldr	r3, [r1, #148]	; 0x94
   13294:	cmp	r3, r2
   13298:	blt	13264 <__assert_fail@plt+0x22f0>
   1329c:	add	r0, ip, #168	; 0xa8
   132a0:	add	r1, r1, #168	; 0xa8
   132a4:	pop	{r4, sl, fp, lr}
   132a8:	b	10d1c <strcmp@plt>
   132ac:	push	{r4, sl, fp, lr}
   132b0:	add	fp, sp, #8
   132b4:	ldr	r3, [r0, #144]	; 0x90
   132b8:	ldr	r2, [r1, #144]	; 0x90
   132bc:	mov	ip, r0
   132c0:	mvn	r0, #0
   132c4:	cmp	r2, r3
   132c8:	bgt	13310 <__assert_fail@plt+0x239c>
   132cc:	bne	132e0 <__assert_fail@plt+0x236c>
   132d0:	ldr	lr, [ip, #148]	; 0x94
   132d4:	ldr	r4, [r1, #148]	; 0x94
   132d8:	cmp	r4, lr
   132dc:	bgt	13310 <__assert_fail@plt+0x239c>
   132e0:	mov	r0, #1
   132e4:	cmp	r2, r3
   132e8:	blt	13310 <__assert_fail@plt+0x239c>
   132ec:	bne	13300 <__assert_fail@plt+0x238c>
   132f0:	ldr	r2, [ip, #148]	; 0x94
   132f4:	ldr	r3, [r1, #148]	; 0x94
   132f8:	cmp	r3, r2
   132fc:	poplt	{r4, sl, fp, pc}
   13300:	add	r0, ip, #168	; 0xa8
   13304:	add	r1, r1, #168	; 0xa8
   13308:	bl	10d1c <strcmp@plt>
   1330c:	rsb	r0, r0, #0
   13310:	pop	{r4, sl, fp, pc}
   13314:	push	{r4, sl, fp, lr}
   13318:	add	fp, sp, #8
   1331c:	ldr	r3, [r0, #136]	; 0x88
   13320:	ldr	r2, [r1, #136]	; 0x88
   13324:	mov	ip, r0
   13328:	mov	r0, #1
   1332c:	cmp	r2, r3
   13330:	ble	13338 <__assert_fail@plt+0x23c4>
   13334:	pop	{r4, sl, fp, pc}
   13338:	bne	1334c <__assert_fail@plt+0x23d8>
   1333c:	ldr	lr, [ip, #140]	; 0x8c
   13340:	ldr	r4, [r1, #140]	; 0x8c
   13344:	cmp	r4, lr
   13348:	bgt	13334 <__assert_fail@plt+0x23c0>
   1334c:	mvn	r0, #0
   13350:	cmp	r2, r3
   13354:	poplt	{r4, sl, fp, pc}
   13358:	bne	1336c <__assert_fail@plt+0x23f8>
   1335c:	ldr	r2, [ip, #140]	; 0x8c
   13360:	ldr	r3, [r1, #140]	; 0x8c
   13364:	cmp	r3, r2
   13368:	blt	13334 <__assert_fail@plt+0x23c0>
   1336c:	add	r0, ip, #168	; 0xa8
   13370:	add	r1, r1, #168	; 0xa8
   13374:	pop	{r4, sl, fp, lr}
   13378:	b	10d1c <strcmp@plt>
   1337c:	push	{r4, sl, fp, lr}
   13380:	add	fp, sp, #8
   13384:	ldr	r3, [r0, #136]	; 0x88
   13388:	ldr	r2, [r1, #136]	; 0x88
   1338c:	mov	ip, r0
   13390:	mvn	r0, #0
   13394:	cmp	r2, r3
   13398:	bgt	133e0 <__assert_fail@plt+0x246c>
   1339c:	bne	133b0 <__assert_fail@plt+0x243c>
   133a0:	ldr	lr, [ip, #140]	; 0x8c
   133a4:	ldr	r4, [r1, #140]	; 0x8c
   133a8:	cmp	r4, lr
   133ac:	bgt	133e0 <__assert_fail@plt+0x246c>
   133b0:	mov	r0, #1
   133b4:	cmp	r2, r3
   133b8:	blt	133e0 <__assert_fail@plt+0x246c>
   133bc:	bne	133d0 <__assert_fail@plt+0x245c>
   133c0:	ldr	r2, [ip, #140]	; 0x8c
   133c4:	ldr	r3, [r1, #140]	; 0x8c
   133c8:	cmp	r3, r2
   133cc:	poplt	{r4, sl, fp, pc}
   133d0:	add	r0, ip, #168	; 0xa8
   133d4:	add	r1, r1, #168	; 0xa8
   133d8:	bl	10d1c <strcmp@plt>
   133dc:	rsb	r0, r0, #0
   133e0:	pop	{r4, sl, fp, pc}
   133e4:	push	{r4, sl, fp, lr}
   133e8:	add	fp, sp, #8
   133ec:	ldr	r3, [r0, #152]	; 0x98
   133f0:	ldr	r2, [r1, #152]	; 0x98
   133f4:	mov	ip, r0
   133f8:	mov	r0, #1
   133fc:	cmp	r2, r3
   13400:	ble	13408 <__assert_fail@plt+0x2494>
   13404:	pop	{r4, sl, fp, pc}
   13408:	bne	1341c <__assert_fail@plt+0x24a8>
   1340c:	ldr	lr, [ip, #156]	; 0x9c
   13410:	ldr	r4, [r1, #156]	; 0x9c
   13414:	cmp	r4, lr
   13418:	bgt	13404 <__assert_fail@plt+0x2490>
   1341c:	mvn	r0, #0
   13420:	cmp	r2, r3
   13424:	poplt	{r4, sl, fp, pc}
   13428:	bne	1343c <__assert_fail@plt+0x24c8>
   1342c:	ldr	r2, [ip, #156]	; 0x9c
   13430:	ldr	r3, [r1, #156]	; 0x9c
   13434:	cmp	r3, r2
   13438:	blt	13404 <__assert_fail@plt+0x2490>
   1343c:	add	r0, ip, #168	; 0xa8
   13440:	add	r1, r1, #168	; 0xa8
   13444:	pop	{r4, sl, fp, lr}
   13448:	b	10d1c <strcmp@plt>
   1344c:	push	{r4, sl, fp, lr}
   13450:	add	fp, sp, #8
   13454:	ldr	r3, [r0, #152]	; 0x98
   13458:	ldr	r2, [r1, #152]	; 0x98
   1345c:	mov	ip, r0
   13460:	mvn	r0, #0
   13464:	cmp	r2, r3
   13468:	bgt	134b0 <__assert_fail@plt+0x253c>
   1346c:	bne	13480 <__assert_fail@plt+0x250c>
   13470:	ldr	lr, [ip, #156]	; 0x9c
   13474:	ldr	r4, [r1, #156]	; 0x9c
   13478:	cmp	r4, lr
   1347c:	bgt	134b0 <__assert_fail@plt+0x253c>
   13480:	mov	r0, #1
   13484:	cmp	r2, r3
   13488:	blt	134b0 <__assert_fail@plt+0x253c>
   1348c:	bne	134a0 <__assert_fail@plt+0x252c>
   13490:	ldr	r2, [ip, #156]	; 0x9c
   13494:	ldr	r3, [r1, #156]	; 0x9c
   13498:	cmp	r3, r2
   1349c:	poplt	{r4, sl, fp, pc}
   134a0:	add	r0, ip, #168	; 0xa8
   134a4:	add	r1, r1, #168	; 0xa8
   134a8:	bl	10d1c <strcmp@plt>
   134ac:	rsb	r0, r0, #0
   134b0:	pop	{r4, sl, fp, pc}
   134b4:	push	{r4, r5, r6, sl, fp, lr}
   134b8:	add	fp, sp, #16
   134bc:	ldr	r4, [r0, #112]	; 0x70
   134c0:	ldr	r6, [r1, #112]	; 0x70
   134c4:	ldr	r3, [r0, #116]	; 0x74
   134c8:	ldr	r5, [r1, #116]	; 0x74
   134cc:	mov	ip, #1
   134d0:	subs	r2, r4, r6
   134d4:	sbcs	r2, r3, r5
   134d8:	blt	134ec <__assert_fail@plt+0x2578>
   134dc:	subs	r2, r6, r4
   134e0:	mvn	ip, #0
   134e4:	sbcs	r2, r5, r3
   134e8:	bge	134f4 <__assert_fail@plt+0x2580>
   134ec:	mov	r0, ip
   134f0:	pop	{r4, r5, r6, sl, fp, pc}
   134f4:	add	r0, r0, #168	; 0xa8
   134f8:	add	r1, r1, #168	; 0xa8
   134fc:	pop	{r4, r5, r6, sl, fp, lr}
   13500:	b	10d1c <strcmp@plt>
   13504:	push	{r4, r5, r6, sl, fp, lr}
   13508:	add	fp, sp, #16
   1350c:	ldr	r4, [r0, #112]	; 0x70
   13510:	ldr	r6, [r1, #112]	; 0x70
   13514:	ldr	r3, [r0, #116]	; 0x74
   13518:	ldr	r5, [r1, #116]	; 0x74
   1351c:	mvn	ip, #0
   13520:	subs	r2, r4, r6
   13524:	sbcs	r2, r3, r5
   13528:	blt	1354c <__assert_fail@plt+0x25d8>
   1352c:	subs	r2, r6, r4
   13530:	mov	ip, #1
   13534:	sbcs	r2, r5, r3
   13538:	blt	1354c <__assert_fail@plt+0x25d8>
   1353c:	add	r0, r0, #168	; 0xa8
   13540:	add	r1, r1, #168	; 0xa8
   13544:	bl	10d1c <strcmp@plt>
   13548:	rsb	ip, r0, #0
   1354c:	mov	r0, ip
   13550:	pop	{r4, r5, r6, sl, fp, pc}
   13554:	push	{fp, lr}
   13558:	mov	fp, sp
   1355c:	and	r2, r0, #61440	; 0xf000
   13560:	sub	r2, r2, #4096	; 0x1000
   13564:	lsr	r3, r2, #12
   13568:	cmp	r3, #11
   1356c:	bhi	135bc <__assert_fail@plt+0x2648>
   13570:	add	r2, pc, #4
   13574:	mov	ip, #45	; 0x2d
   13578:	ldr	pc, [r2, r3, lsl #2]
   1357c:	andeq	r3, r1, ip, lsr #11
   13580:			; <UNDEFINED> instruction: 0x000135b4
   13584:			; <UNDEFINED> instruction: 0x000135bc
   13588:	andeq	r3, r1, r4, asr #11
   1358c:			; <UNDEFINED> instruction: 0x000135bc
   13590:	ldrdeq	r3, [r1], -ip
   13594:			; <UNDEFINED> instruction: 0x000135bc
   13598:	andeq	r3, r1, r0, ror #11
   1359c:			; <UNDEFINED> instruction: 0x000135bc
   135a0:	andeq	r3, r1, ip, asr #11
   135a4:			; <UNDEFINED> instruction: 0x000135bc
   135a8:	ldrdeq	r3, [r1], -r4
   135ac:	mov	ip, #112	; 0x70
   135b0:	b	135e0 <__assert_fail@plt+0x266c>
   135b4:	mov	ip, #99	; 0x63
   135b8:	b	135e0 <__assert_fail@plt+0x266c>
   135bc:	mov	ip, #63	; 0x3f
   135c0:	b	135e0 <__assert_fail@plt+0x266c>
   135c4:	mov	ip, #100	; 0x64
   135c8:	b	135e0 <__assert_fail@plt+0x266c>
   135cc:	mov	ip, #108	; 0x6c
   135d0:	b	135e0 <__assert_fail@plt+0x266c>
   135d4:	mov	ip, #115	; 0x73
   135d8:	b	135e0 <__assert_fail@plt+0x266c>
   135dc:	mov	ip, #98	; 0x62
   135e0:	tst	r0, #2
   135e4:	mov	r3, #119	; 0x77
   135e8:	mov	r2, #32
   135ec:	mov	lr, #45	; 0x2d
   135f0:	movweq	r3, #45	; 0x2d
   135f4:	tst	r0, #4
   135f8:	strh	r2, [r1, #10]
   135fc:	mov	r2, #114	; 0x72
   13600:	strb	ip, [r1]
   13604:	mov	ip, #119	; 0x77
   13608:	movweq	r2, #45	; 0x2d
   1360c:	tst	r0, #16
   13610:	strb	r3, [r1, #8]
   13614:	mov	r3, #114	; 0x72
   13618:	strb	r2, [r1, #7]
   1361c:	mov	r2, #119	; 0x77
   13620:	movweq	r2, #45	; 0x2d
   13624:	tst	r0, #32
   13628:	strb	r2, [r1, #5]
   1362c:	mov	r2, #114	; 0x72
   13630:	movweq	r2, #45	; 0x2d
   13634:	tst	r0, #128	; 0x80
   13638:	movweq	ip, #45	; 0x2d
   1363c:	tst	r0, #256	; 0x100
   13640:	strb	r2, [r1, #4]
   13644:	movweq	r3, #45	; 0x2d
   13648:	ands	r2, r0, #1
   1364c:	strb	ip, [r1, #2]
   13650:	mov	r2, #84	; 0x54
   13654:	mov	ip, #45	; 0x2d
   13658:	strb	r3, [r1, #1]
   1365c:	mov	r3, #45	; 0x2d
   13660:	movwne	r3, #120	; 0x78
   13664:	movwne	r2, #116	; 0x74
   13668:	tst	r0, #512	; 0x200
   1366c:	moveq	r2, r3
   13670:	mov	r3, #83	; 0x53
   13674:	strb	r2, [r1, #9]
   13678:	ands	r2, r0, #8
   1367c:	mov	r2, #83	; 0x53
   13680:	movwne	lr, #120	; 0x78
   13684:	movwne	r2, #115	; 0x73
   13688:	tst	r0, #1024	; 0x400
   1368c:	moveq	r2, lr
   13690:	strb	r2, [r1, #6]
   13694:	ands	r2, r0, #64	; 0x40
   13698:	movwne	ip, #120	; 0x78
   1369c:	movwne	r3, #115	; 0x73
   136a0:	tst	r0, #2048	; 0x800
   136a4:	moveq	r3, ip
   136a8:	strb	r3, [r1, #3]
   136ac:	pop	{fp, pc}
   136b0:	ldr	r0, [r0, #16]
   136b4:	b	13554 <__assert_fail@plt+0x25e0>
   136b8:	push	{r4, r5, r6, sl, fp, lr}
   136bc:	add	fp, sp, #16
   136c0:	mov	r4, r0
   136c4:	bl	10e78 <__errno_location@plt>
   136c8:	ldr	r6, [r0]
   136cc:	mov	r5, r0
   136d0:	mov	r0, r4
   136d4:	bl	10d64 <free@plt>
   136d8:	str	r6, [r5]
   136dc:	pop	{r4, r5, r6, sl, fp, pc}
   136e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136e4:	add	fp, sp, #28
   136e8:	sub	sp, sp, #28
   136ec:	cmp	r1, #4096	; 0x1000
   136f0:	bcs	1370c <__assert_fail@plt+0x2798>
   136f4:	mov	sl, r0
   136f8:	and	r0, r1, #516	; 0x204
   136fc:	mov	r6, r1
   13700:	cmp	r0, #516	; 0x204
   13704:	tstne	r6, #18
   13708:	bne	13728 <__assert_fail@plt+0x27b4>
   1370c:	bl	10e78 <__errno_location@plt>
   13710:	mov	r1, #22
   13714:	mov	r4, #0
   13718:	str	r1, [r0]
   1371c:	mov	r0, r4
   13720:	sub	sp, fp, #28
   13724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13728:	mov	r0, #1
   1372c:	mov	r1, #96	; 0x60
   13730:	mov	r5, r2
   13734:	bl	18b64 <__assert_fail@plt+0x7bf0>
   13738:	cmp	r0, #0
   1373c:	beq	13d1c <__assert_fail@plt+0x2da8>
   13740:	mov	r4, r0
   13744:	mvn	r0, #99	; 0x63
   13748:	tst	r6, #2
   1374c:	mov	r1, r6
   13750:	str	r0, [r4, #32]
   13754:	bic	r0, r6, #516	; 0x204
   13758:	str	r5, [r4, #44]	; 0x2c
   1375c:	str	r4, [sp, #24]
   13760:	orrne	r1, r0, #4
   13764:	str	r1, [r4, #48]	; 0x30
   13768:	ldr	r0, [sl]
   1376c:	cmp	r0, #0
   13770:	beq	137d4 <__assert_fail@plt+0x2860>
   13774:	add	r7, sl, #4
   13778:	mov	r4, #0
   1377c:	bl	10e48 <strlen@plt>
   13780:	cmp	r0, r4
   13784:	movhi	r4, r0
   13788:	ldr	r0, [r7], #4
   1378c:	cmp	r0, #0
   13790:	bne	1377c <__assert_fail@plt+0x2808>
   13794:	add	r0, r4, #1
   13798:	ldr	r4, [sp, #24]
   1379c:	cmp	r0, #4096	; 0x1000
   137a0:	movls	r0, #4096	; 0x1000
   137a4:	ldr	r1, [r4, #36]	; 0x24
   137a8:	add	r0, r0, #256	; 0x100
   137ac:	adds	r1, r0, r1
   137b0:	bcc	137e8 <__assert_fail@plt+0x2874>
   137b4:	ldr	r0, [r4, #24]
   137b8:	bl	136b8 <__assert_fail@plt+0x2744>
   137bc:	mov	r0, #0
   137c0:	str	r0, [r4, #24]
   137c4:	bl	10e78 <__errno_location@plt>
   137c8:	mov	r1, #36	; 0x24
   137cc:	str	r1, [r0]
   137d0:	b	13d14 <__assert_fail@plt+0x2da0>
   137d4:	mov	r0, #4096	; 0x1000
   137d8:	ldr	r1, [r4, #36]	; 0x24
   137dc:	add	r0, r0, #256	; 0x100
   137e0:	adds	r1, r0, r1
   137e4:	bcs	137b4 <__assert_fail@plt+0x2840>
   137e8:	str	r1, [r4, #36]	; 0x24
   137ec:	ldr	r0, [r4, #24]
   137f0:	bl	18be8 <__assert_fail@plt+0x7c74>
   137f4:	cmp	r0, #0
   137f8:	beq	139f4 <__assert_fail@plt+0x2a80>
   137fc:	str	r0, [r4, #24]
   13800:	ldr	r0, [sl]
   13804:	cmp	r0, #0
   13808:	beq	13a08 <__assert_fail@plt+0x2a94>
   1380c:	mov	r0, #176	; 0xb0
   13810:	bl	18bb8 <__assert_fail@plt+0x7c44>
   13814:	cmp	r0, #0
   13818:	beq	13d0c <__assert_fail@plt+0x2d98>
   1381c:	ldr	r1, [r4, #24]
   13820:	mov	r7, r0
   13824:	mov	r0, #0
   13828:	mov	r2, #196608	; 0x30000
   1382c:	strb	r0, [r7, #168]	; 0xa8
   13830:	str	r2, [r7, #58]	; 0x3a
   13834:	mvn	r2, #0
   13838:	str	r4, [r7, #44]	; 0x2c
   1383c:	str	r2, [r7, #48]	; 0x30
   13840:	str	r0, [r7, #52]	; 0x34
   13844:	str	r0, [r7, #12]
   13848:	str	r0, [r7, #16]
   1384c:	str	r0, [r7, #20]
   13850:	str	r1, [r7, #28]
   13854:	str	r0, [r7, #32]
   13858:	cmp	r5, #0
   1385c:	beq	13a14 <__assert_fail@plt+0x2aa0>
   13860:	ldrb	r0, [r4, #49]	; 0x31
   13864:	ubfx	r0, r0, #2, #1
   13868:	ldr	r4, [sl]
   1386c:	str	r0, [sp, #12]
   13870:	cmp	r4, #0
   13874:	beq	13a28 <__assert_fail@plt+0x2ab4>
   13878:	tst	r6, #2048	; 0x800
   1387c:	str	r5, [sp, #16]
   13880:	str	r7, [sp, #20]
   13884:	bne	13a4c <__assert_fail@plt+0x2ad8>
   13888:	mov	r0, #0
   1388c:	mov	r8, #0
   13890:	mov	r5, #0
   13894:	str	r0, [sp, #8]
   13898:	b	138ec <__assert_fail@plt+0x2978>
   1389c:	cmp	r8, #0
   138a0:	str	r4, [r7, #8]
   138a4:	beq	138c8 <__assert_fail@plt+0x2954>
   138a8:	ldr	r0, [sp, #8]
   138ac:	str	r7, [sp, #8]
   138b0:	str	r7, [r0, #8]
   138b4:	ldr	r4, [sl, #4]!
   138b8:	add	r5, r5, #1
   138bc:	cmp	r4, #0
   138c0:	bne	138ec <__assert_fail@plt+0x2978>
   138c4:	b	13ba0 <__assert_fail@plt+0x2c2c>
   138c8:	mov	r0, r7
   138cc:	str	r7, [sp, #8]
   138d0:	b	138d8 <__assert_fail@plt+0x2964>
   138d4:	str	r8, [r7, #8]
   138d8:	mov	r8, r7
   138dc:	ldr	r4, [sl, #4]!
   138e0:	add	r5, r5, #1
   138e4:	cmp	r4, #0
   138e8:	beq	13ba0 <__assert_fail@plt+0x2c2c>
   138ec:	mov	r0, r4
   138f0:	bl	10e48 <strlen@plt>
   138f4:	mov	r9, r0
   138f8:	cmp	r0, #3
   138fc:	bcc	1392c <__assert_fail@plt+0x29b8>
   13900:	add	r0, r9, r4
   13904:	ldrb	r0, [r0, #-1]
   13908:	cmp	r0, #47	; 0x2f
   1390c:	bne	1392c <__assert_fail@plt+0x29b8>
   13910:	sub	r0, r4, #2
   13914:	ldrb	r1, [r0, r9]
   13918:	cmp	r1, #47	; 0x2f
   1391c:	bne	1392c <__assert_fail@plt+0x29b8>
   13920:	sub	r9, r9, #1
   13924:	cmp	r9, #1
   13928:	bhi	13914 <__assert_fail@plt+0x29a0>
   1392c:	add	r0, r9, #176	; 0xb0
   13930:	bic	r0, r0, #7
   13934:	bl	18bb8 <__assert_fail@plt+0x7c44>
   13938:	cmp	r0, #0
   1393c:	beq	13b90 <__assert_fail@plt+0x2c1c>
   13940:	add	r6, r0, #168	; 0xa8
   13944:	mov	r7, r0
   13948:	mov	r1, r4
   1394c:	mov	r2, r9
   13950:	mov	r0, r6
   13954:	bl	10d70 <memcpy@plt>
   13958:	ldr	r0, [sp, #24]
   1395c:	ldr	r1, [sp, #20]
   13960:	mov	r4, #0
   13964:	cmp	r8, #0
   13968:	strb	r4, [r6, r9]
   1396c:	ldr	r2, [r0, #24]
   13970:	str	r1, [r7, #4]
   13974:	add	r1, r7, #44	; 0x2c
   13978:	stm	r1, {r0, r4, r9}
   1397c:	mov	r1, #196608	; 0x30000
   13980:	str	r1, [r7, #58]	; 0x3a
   13984:	str	r4, [r7, #12]
   13988:	str	r4, [r7, #16]
   1398c:	str	r4, [r7, #20]
   13990:	str	r6, [r7, #24]
   13994:	mov	r1, r8
   13998:	movwne	r1, #1
   1399c:	str	r2, [r7, #28]
   139a0:	ldr	r2, [sp, #12]
   139a4:	str	r4, [r7, #32]
   139a8:	tst	r2, r1
   139ac:	beq	139d4 <__assert_fail@plt+0x2a60>
   139b0:	mov	r0, #2
   139b4:	str	r0, [r7, #112]	; 0x70
   139b8:	mov	r0, #11
   139bc:	str	r4, [r7, #116]	; 0x74
   139c0:	strh	r0, [r7, #56]	; 0x38
   139c4:	ldr	r0, [sp, #16]
   139c8:	cmp	r0, #0
   139cc:	bne	138d4 <__assert_fail@plt+0x2960>
   139d0:	b	1389c <__assert_fail@plt+0x2928>
   139d4:	mov	r1, r7
   139d8:	mov	r2, #0
   139dc:	bl	13d90 <__assert_fail@plt+0x2e1c>
   139e0:	strh	r0, [r7, #56]	; 0x38
   139e4:	ldr	r0, [sp, #16]
   139e8:	cmp	r0, #0
   139ec:	bne	138d4 <__assert_fail@plt+0x2960>
   139f0:	b	1389c <__assert_fail@plt+0x2928>
   139f4:	ldr	r0, [r4, #24]
   139f8:	bl	136b8 <__assert_fail@plt+0x2744>
   139fc:	mov	r0, #0
   13a00:	str	r0, [r4, #24]
   13a04:	b	13d14 <__assert_fail@plt+0x2da0>
   13a08:	mov	r7, #0
   13a0c:	cmp	r5, #0
   13a10:	bne	13860 <__assert_fail@plt+0x28ec>
   13a14:	mov	r0, #1
   13a18:	ldr	r4, [sl]
   13a1c:	str	r0, [sp, #12]
   13a20:	cmp	r4, #0
   13a24:	bne	13878 <__assert_fail@plt+0x2904>
   13a28:	ldr	r4, [sp, #24]
   13a2c:	mov	r8, #0
   13a30:	mov	r0, #176	; 0xb0
   13a34:	bl	18bb8 <__assert_fail@plt+0x7c44>
   13a38:	cmp	r0, #0
   13a3c:	bne	13bf8 <__assert_fail@plt+0x2c84>
   13a40:	mov	r0, #0
   13a44:	str	r0, [r4]
   13a48:	b	13cc8 <__assert_fail@plt+0x2d54>
   13a4c:	add	r0, sl, #4
   13a50:	mov	r9, #0
   13a54:	mov	r8, #0
   13a58:	mov	r5, #0
   13a5c:	str	r0, [sp, #8]
   13a60:	ldr	r0, [sp, #12]
   13a64:	eor	r0, r0, #1
   13a68:	str	r0, [sp, #12]
   13a6c:	mov	r0, #0
   13a70:	str	r0, [sp, #4]
   13a74:	b	13aa8 <__assert_fail@plt+0x2b34>
   13a78:	cmp	r8, #0
   13a7c:	str	r9, [r5, #8]
   13a80:	beq	13b84 <__assert_fail@plt+0x2c10>
   13a84:	ldr	r0, [sp, #4]
   13a88:	str	r5, [sp, #4]
   13a8c:	str	r5, [r0, #8]
   13a90:	ldr	r0, [sp, #8]
   13a94:	mov	r5, sl
   13a98:	add	r5, sl, #1
   13a9c:	ldr	r4, [r0, sl, lsl #2]
   13aa0:	cmp	r4, #0
   13aa4:	beq	13ba0 <__assert_fail@plt+0x2c2c>
   13aa8:	mov	r0, r4
   13aac:	mov	sl, r5
   13ab0:	bl	10e48 <strlen@plt>
   13ab4:	mov	r7, r0
   13ab8:	add	r0, r0, #176	; 0xb0
   13abc:	bic	r0, r0, #7
   13ac0:	bl	18bb8 <__assert_fail@plt+0x7c44>
   13ac4:	cmp	r0, #0
   13ac8:	beq	13b90 <__assert_fail@plt+0x2c1c>
   13acc:	add	r6, r0, #168	; 0xa8
   13ad0:	mov	r5, r0
   13ad4:	mov	r1, r4
   13ad8:	mov	r2, r7
   13adc:	mov	r0, r6
   13ae0:	bl	10d70 <memcpy@plt>
   13ae4:	ldr	r0, [sp, #24]
   13ae8:	ldr	r1, [sp, #20]
   13aec:	strb	r9, [r6, r7]
   13af0:	ldr	r2, [r0, #24]
   13af4:	str	r1, [r5, #4]
   13af8:	mov	r1, #196608	; 0x30000
   13afc:	str	r0, [r5, #44]	; 0x2c
   13b00:	str	r9, [r5, #48]	; 0x30
   13b04:	str	r7, [r5, #52]	; 0x34
   13b08:	str	r1, [r5, #58]	; 0x3a
   13b0c:	str	r9, [r5, #12]
   13b10:	str	r9, [r5, #16]
   13b14:	str	r9, [r5, #20]
   13b18:	str	r6, [r5, #24]
   13b1c:	clz	r1, r8
   13b20:	lsr	r1, r1, #5
   13b24:	str	r2, [r5, #28]
   13b28:	ldr	r2, [sp, #12]
   13b2c:	str	r9, [r5, #32]
   13b30:	orrs	r1, r2, r1
   13b34:	bne	13b5c <__assert_fail@plt+0x2be8>
   13b38:	mov	r0, #2
   13b3c:	str	r0, [r5, #112]	; 0x70
   13b40:	str	r9, [r5, #116]	; 0x74
   13b44:	mov	r0, #11
   13b48:	strh	r0, [r5, #56]	; 0x38
   13b4c:	ldr	r0, [sp, #16]
   13b50:	cmp	r0, #0
   13b54:	bne	13b78 <__assert_fail@plt+0x2c04>
   13b58:	b	13a78 <__assert_fail@plt+0x2b04>
   13b5c:	mov	r1, r5
   13b60:	mov	r2, #0
   13b64:	bl	13d90 <__assert_fail@plt+0x2e1c>
   13b68:	strh	r0, [r5, #56]	; 0x38
   13b6c:	ldr	r0, [sp, #16]
   13b70:	cmp	r0, #0
   13b74:	beq	13a78 <__assert_fail@plt+0x2b04>
   13b78:	str	r8, [r5, #8]
   13b7c:	mov	r8, r5
   13b80:	b	13a90 <__assert_fail@plt+0x2b1c>
   13b84:	mov	r0, r5
   13b88:	str	r5, [sp, #4]
   13b8c:	b	13b7c <__assert_fail@plt+0x2c08>
   13b90:	ldr	r7, [sp, #20]
   13b94:	cmp	r8, #0
   13b98:	bne	13ce8 <__assert_fail@plt+0x2d74>
   13b9c:	b	13d00 <__assert_fail@plt+0x2d8c>
   13ba0:	ldr	r0, [sp, #16]
   13ba4:	ldr	r7, [sp, #20]
   13ba8:	cmp	r0, #0
   13bac:	beq	13be4 <__assert_fail@plt+0x2c70>
   13bb0:	ldr	r4, [sp, #24]
   13bb4:	cmp	r5, #2
   13bb8:	bcc	13be8 <__assert_fail@plt+0x2c74>
   13bbc:	mov	r0, r4
   13bc0:	mov	r1, r8
   13bc4:	mov	r2, r5
   13bc8:	bl	13f28 <__assert_fail@plt+0x2fb4>
   13bcc:	mov	r8, r0
   13bd0:	mov	r0, #176	; 0xb0
   13bd4:	bl	18bb8 <__assert_fail@plt+0x7c44>
   13bd8:	cmp	r0, #0
   13bdc:	bne	13bf8 <__assert_fail@plt+0x2c84>
   13be0:	b	13a40 <__assert_fail@plt+0x2acc>
   13be4:	ldr	r4, [sp, #24]
   13be8:	mov	r0, #176	; 0xb0
   13bec:	bl	18bb8 <__assert_fail@plt+0x7c44>
   13bf0:	cmp	r0, #0
   13bf4:	beq	13a40 <__assert_fail@plt+0x2acc>
   13bf8:	ldr	r2, [r4, #24]
   13bfc:	mov	r1, #0
   13c00:	mov	r3, #196608	; 0x30000
   13c04:	str	r0, [r4]
   13c08:	str	r1, [r0, #52]	; 0x34
   13c0c:	strb	r1, [r0, #168]	; 0xa8
   13c10:	str	r4, [r0, #44]	; 0x2c
   13c14:	str	r3, [r0, #58]	; 0x3a
   13c18:	str	r2, [r0, #28]
   13c1c:	mov	r2, #9
   13c20:	str	r1, [r0, #32]
   13c24:	strh	r2, [r0, #56]	; 0x38
   13c28:	str	r8, [r0, #8]
   13c2c:	str	r1, [r0, #12]
   13c30:	str	r1, [r0, #16]
   13c34:	str	r1, [r0, #20]
   13c38:	mov	r1, #1
   13c3c:	str	r1, [r0, #48]	; 0x30
   13c40:	ldrh	r0, [r4, #48]	; 0x30
   13c44:	movw	r1, #258	; 0x102
   13c48:	tst	r0, r1
   13c4c:	beq	13c88 <__assert_fail@plt+0x2d14>
   13c50:	movw	r0, #14008	; 0x36b8
   13c54:	movw	r2, #23768	; 0x5cd8
   13c58:	movw	r3, #23800	; 0x5cf8
   13c5c:	mov	r1, #0
   13c60:	movt	r0, #1
   13c64:	movt	r2, #1
   13c68:	movt	r3, #1
   13c6c:	str	r0, [sp]
   13c70:	mov	r0, #31
   13c74:	bl	179cc <__assert_fail@plt+0x6a58>
   13c78:	cmp	r0, #0
   13c7c:	str	r0, [r4, #56]	; 0x38
   13c80:	bne	13ca0 <__assert_fail@plt+0x2d2c>
   13c84:	b	13cc8 <__assert_fail@plt+0x2d54>
   13c88:	mov	r0, #32
   13c8c:	bl	18bb8 <__assert_fail@plt+0x7c44>
   13c90:	cmp	r0, #0
   13c94:	str	r0, [r4, #56]	; 0x38
   13c98:	beq	13cc8 <__assert_fail@plt+0x2d54>
   13c9c:	bl	18c3c <__assert_fail@plt+0x7cc8>
   13ca0:	ldr	r4, [sp, #24]
   13ca4:	ldr	r0, [r4, #48]	; 0x30
   13ca8:	tst	r0, #516	; 0x204
   13cac:	beq	13d2c <__assert_fail@plt+0x2db8>
   13cb0:	add	r0, r4, #60	; 0x3c
   13cb4:	mvn	r1, #0
   13cb8:	bl	18928 <__assert_fail@plt+0x79b4>
   13cbc:	mov	r0, r4
   13cc0:	sub	sp, fp, #28
   13cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cc8:	cmp	r8, #0
   13ccc:	bne	13ce8 <__assert_fail@plt+0x2d74>
   13cd0:	b	13d00 <__assert_fail@plt+0x2d8c>
   13cd4:	mov	r0, r8
   13cd8:	bl	136b8 <__assert_fail@plt+0x2744>
   13cdc:	cmp	r4, #0
   13ce0:	mov	r8, r4
   13ce4:	beq	13d00 <__assert_fail@plt+0x2d8c>
   13ce8:	ldrd	r4, [r8, #8]
   13cec:	cmp	r5, #0
   13cf0:	beq	13cd4 <__assert_fail@plt+0x2d60>
   13cf4:	mov	r0, r5
   13cf8:	bl	10f5c <closedir@plt>
   13cfc:	b	13cd4 <__assert_fail@plt+0x2d60>
   13d00:	mov	r0, r7
   13d04:	bl	136b8 <__assert_fail@plt+0x2744>
   13d08:	ldr	r4, [sp, #24]
   13d0c:	ldr	r0, [r4, #24]
   13d10:	bl	136b8 <__assert_fail@plt+0x2744>
   13d14:	mov	r0, r4
   13d18:	bl	136b8 <__assert_fail@plt+0x2744>
   13d1c:	mov	r4, #0
   13d20:	mov	r0, r4
   13d24:	sub	sp, fp, #28
   13d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d2c:	mov	r1, #32768	; 0x8000
   13d30:	tst	r0, #512	; 0x200
   13d34:	and	r1, r1, r0, lsl #11
   13d38:	orr	r1, r1, #18688	; 0x4900
   13d3c:	orr	r2, r1, #524288	; 0x80000
   13d40:	bne	13d64 <__assert_fail@plt+0x2df0>
   13d44:	movw	r0, #37667	; 0x9323
   13d48:	mov	r1, r2
   13d4c:	movt	r0, #1
   13d50:	bl	18f0c <__assert_fail@plt+0x7f98>
   13d54:	cmn	r0, #1
   13d58:	str	r0, [r4, #28]
   13d5c:	bgt	13cb0 <__assert_fail@plt+0x2d3c>
   13d60:	b	13d80 <__assert_fail@plt+0x2e0c>
   13d64:	ldr	r0, [r4, #32]
   13d68:	movw	r1, #37667	; 0x9323
   13d6c:	movt	r1, #1
   13d70:	bl	18a84 <__assert_fail@plt+0x7b10>
   13d74:	cmn	r0, #1
   13d78:	str	r0, [r4, #28]
   13d7c:	bgt	13cb0 <__assert_fail@plt+0x2d3c>
   13d80:	ldr	r0, [r4, #48]	; 0x30
   13d84:	orr	r0, r0, #4
   13d88:	str	r0, [r4, #48]	; 0x30
   13d8c:	b	13cb0 <__assert_fail@plt+0x2d3c>
   13d90:	push	{r4, r5, r6, sl, fp, lr}
   13d94:	add	fp, sp, #16
   13d98:	sub	sp, sp, #8
   13d9c:	mov	r4, r1
   13da0:	ldr	r1, [r0, #48]	; 0x30
   13da4:	ldr	r3, [r4, #48]	; 0x30
   13da8:	add	r5, r4, #64	; 0x40
   13dac:	cmp	r3, #0
   13db0:	andeq	r3, r1, #1
   13db4:	orreq	r2, r3, r2
   13db8:	cmp	r2, #0
   13dbc:	andseq	r1, r1, #2
   13dc0:	beq	13e1c <__assert_fail@plt+0x2ea8>
   13dc4:	ldr	r1, [r4, #24]
   13dc8:	mov	r0, #3
   13dcc:	mov	r2, r5
   13dd0:	bl	10f14 <__xstat64@plt>
   13dd4:	cmp	r0, #0
   13dd8:	beq	13e9c <__assert_fail@plt+0x2f28>
   13ddc:	bl	10e78 <__errno_location@plt>
   13de0:	mov	r6, r0
   13de4:	ldr	r0, [r0]
   13de8:	cmp	r0, #2
   13dec:	bne	13e4c <__assert_fail@plt+0x2ed8>
   13df0:	ldr	r1, [r4, #24]
   13df4:	mov	r0, #3
   13df8:	mov	r2, r5
   13dfc:	bl	10f50 <__lxstat64@plt>
   13e00:	cmp	r0, #0
   13e04:	bne	13e48 <__assert_fail@plt+0x2ed4>
   13e08:	mov	r0, #0
   13e0c:	str	r0, [r6]
   13e10:	mov	r0, #13
   13e14:	sub	sp, fp, #16
   13e18:	pop	{r4, r5, r6, sl, fp, pc}
   13e1c:	ldr	r1, [r0, #32]
   13e20:	ldr	r2, [r4, #24]
   13e24:	mov	r0, #256	; 0x100
   13e28:	mov	r3, r5
   13e2c:	str	r0, [sp]
   13e30:	mov	r0, #3
   13e34:	bl	10dac <__fxstatat64@plt>
   13e38:	cmp	r0, #0
   13e3c:	beq	13e9c <__assert_fail@plt+0x2f28>
   13e40:	bl	10e78 <__errno_location@plt>
   13e44:	mov	r6, r0
   13e48:	ldr	r0, [r6]
   13e4c:	vmov.i32	q8, #0	; 0x00000000
   13e50:	add	r1, r5, #80	; 0x50
   13e54:	str	r0, [r4, #32]
   13e58:	mov	r0, #0
   13e5c:	str	r0, [r5, #96]	; 0x60
   13e60:	vst1.64	{d16-d17}, [r1]
   13e64:	add	r1, r5, #64	; 0x40
   13e68:	vst1.64	{d16-d17}, [r1]
   13e6c:	add	r1, r5, #48	; 0x30
   13e70:	vst1.64	{d16-d17}, [r1]
   13e74:	add	r1, r5, #32
   13e78:	vst1.64	{d16-d17}, [r1]
   13e7c:	add	r1, r5, #16
   13e80:	vst1.64	{d16-d17}, [r1]
   13e84:	mov	r1, #100	; 0x64
   13e88:	vst1.64	{d16-d17}, [r5], r1
   13e8c:	str	r0, [r5]
   13e90:	mov	r0, #10
   13e94:	sub	sp, fp, #16
   13e98:	pop	{r4, r5, r6, sl, fp, pc}
   13e9c:	ldr	r0, [r4, #80]	; 0x50
   13ea0:	and	r0, r0, #61440	; 0xf000
   13ea4:	cmp	r0, #40960	; 0xa000
   13ea8:	beq	13f10 <__assert_fail@plt+0x2f9c>
   13eac:	cmp	r0, #32768	; 0x8000
   13eb0:	beq	13f04 <__assert_fail@plt+0x2f90>
   13eb4:	cmp	r0, #16384	; 0x4000
   13eb8:	bne	13f1c <__assert_fail@plt+0x2fa8>
   13ebc:	ldrb	r1, [r4, #168]	; 0xa8
   13ec0:	mov	r0, #1
   13ec4:	cmp	r1, #46	; 0x2e
   13ec8:	bne	13f20 <__assert_fail@plt+0x2fac>
   13ecc:	ldrb	r1, [r4, #169]	; 0xa9
   13ed0:	cmp	r1, #0
   13ed4:	beq	13eec <__assert_fail@plt+0x2f78>
   13ed8:	cmp	r1, #46	; 0x2e
   13edc:	bne	13f20 <__assert_fail@plt+0x2fac>
   13ee0:	ldrb	r1, [r4, #170]	; 0xaa
   13ee4:	cmp	r1, #0
   13ee8:	bne	13f20 <__assert_fail@plt+0x2fac>
   13eec:	ldr	r1, [r4, #48]	; 0x30
   13ef0:	mov	r0, #5
   13ef4:	cmp	r1, #0
   13ef8:	movweq	r0, #1
   13efc:	sub	sp, fp, #16
   13f00:	pop	{r4, r5, r6, sl, fp, pc}
   13f04:	mov	r0, #8
   13f08:	sub	sp, fp, #16
   13f0c:	pop	{r4, r5, r6, sl, fp, pc}
   13f10:	mov	r0, #12
   13f14:	sub	sp, fp, #16
   13f18:	pop	{r4, r5, r6, sl, fp, pc}
   13f1c:	mov	r0, #3
   13f20:	sub	sp, fp, #16
   13f24:	pop	{r4, r5, r6, sl, fp, pc}
   13f28:	push	{r4, r5, r6, r7, fp, lr}
   13f2c:	add	fp, sp, #16
   13f30:	mov	r6, r0
   13f34:	ldr	r7, [r0, #44]	; 0x2c
   13f38:	ldr	r0, [r0, #40]	; 0x28
   13f3c:	mov	r5, r2
   13f40:	mov	r4, r1
   13f44:	cmp	r0, r2
   13f48:	bcs	13f80 <__assert_fail@plt+0x300c>
   13f4c:	add	r1, r5, #40	; 0x28
   13f50:	cmn	r1, #-1073741823	; 0xc0000001
   13f54:	str	r1, [r6, #40]	; 0x28
   13f58:	bhi	14024 <__assert_fail@plt+0x30b0>
   13f5c:	ldr	r0, [r6, #8]
   13f60:	lsl	r1, r1, #2
   13f64:	bl	18be8 <__assert_fail@plt+0x7c74>
   13f68:	cmp	r0, #0
   13f6c:	beq	14024 <__assert_fail@plt+0x30b0>
   13f70:	str	r0, [r6, #8]
   13f74:	cmp	r4, #0
   13f78:	bne	13f8c <__assert_fail@plt+0x3018>
   13f7c:	b	13fa0 <__assert_fail@plt+0x302c>
   13f80:	ldr	r0, [r6, #8]
   13f84:	cmp	r4, #0
   13f88:	beq	13fa0 <__assert_fail@plt+0x302c>
   13f8c:	str	r4, [r0], #4
   13f90:	ldr	r4, [r4, #8]
   13f94:	cmp	r4, #0
   13f98:	bne	13f8c <__assert_fail@plt+0x3018>
   13f9c:	ldr	r0, [r6, #8]
   13fa0:	mov	r1, r5
   13fa4:	mov	r2, #4
   13fa8:	mov	r3, r7
   13fac:	bl	10f08 <qsort@plt>
   13fb0:	ldr	r0, [r6, #8]
   13fb4:	cmp	r5, #1
   13fb8:	ldr	r4, [r0]
   13fbc:	mov	r1, r4
   13fc0:	beq	14048 <__assert_fail@plt+0x30d4>
   13fc4:	mov	r2, r0
   13fc8:	ldr	r1, [r2, #4]!
   13fcc:	str	r1, [r4, #8]
   13fd0:	subs	r1, r5, #2
   13fd4:	beq	14040 <__assert_fail@plt+0x30cc>
   13fd8:	tst	r1, #1
   13fdc:	beq	13ff4 <__assert_fail@plt+0x3080>
   13fe0:	ldr	r1, [r0, #8]!
   13fe4:	ldr	r2, [r0, #-4]
   13fe8:	str	r1, [r2, #8]
   13fec:	sub	r1, r5, #3
   13ff0:	mov	r2, r0
   13ff4:	cmp	r5, #3
   13ff8:	beq	14044 <__assert_fail@plt+0x30d0>
   13ffc:	mov	r0, r2
   14000:	ldm	r2, {r3, r7}
   14004:	subs	r1, r1, #2
   14008:	str	r7, [r3, #8]
   1400c:	ldr	r3, [r0, #8]!
   14010:	ldr	r2, [r2, #4]
   14014:	str	r3, [r2, #8]
   14018:	mov	r2, r0
   1401c:	bne	14000 <__assert_fail@plt+0x308c>
   14020:	b	14044 <__assert_fail@plt+0x30d0>
   14024:	ldr	r0, [r6, #8]
   14028:	bl	136b8 <__assert_fail@plt+0x2744>
   1402c:	mov	r0, #0
   14030:	str	r0, [r6, #40]	; 0x28
   14034:	str	r0, [r6, #8]
   14038:	mov	r0, r4
   1403c:	pop	{r4, r5, r6, r7, fp, pc}
   14040:	mov	r0, r2
   14044:	ldr	r1, [r0]
   14048:	mov	r0, #0
   1404c:	str	r0, [r1, #8]
   14050:	mov	r0, r4
   14054:	pop	{r4, r5, r6, r7, fp, pc}
   14058:	push	{r4, r5, r6, r7, fp, lr}
   1405c:	add	fp, sp, #16
   14060:	mov	r4, r0
   14064:	ldr	r0, [r0]
   14068:	cmp	r0, #0
   1406c:	beq	140ac <__assert_fail@plt+0x3138>
   14070:	ldr	r1, [r0, #48]	; 0x30
   14074:	cmp	r1, #0
   14078:	bmi	140a0 <__assert_fail@plt+0x312c>
   1407c:	ldr	r5, [r0, #8]
   14080:	cmp	r5, #0
   14084:	ldreq	r5, [r0, #4]
   14088:	bl	136b8 <__assert_fail@plt+0x2744>
   1408c:	ldr	r0, [r5, #48]	; 0x30
   14090:	cmn	r0, #1
   14094:	mov	r0, r5
   14098:	bgt	1407c <__assert_fail@plt+0x3108>
   1409c:	b	140a4 <__assert_fail@plt+0x3130>
   140a0:	mov	r5, r0
   140a4:	mov	r0, r5
   140a8:	bl	136b8 <__assert_fail@plt+0x2744>
   140ac:	ldr	r5, [r4, #4]
   140b0:	cmp	r5, #0
   140b4:	bne	140d0 <__assert_fail@plt+0x315c>
   140b8:	b	140e8 <__assert_fail@plt+0x3174>
   140bc:	mov	r0, r5
   140c0:	bl	136b8 <__assert_fail@plt+0x2744>
   140c4:	cmp	r6, #0
   140c8:	mov	r5, r6
   140cc:	beq	140e8 <__assert_fail@plt+0x3174>
   140d0:	ldrd	r6, [r5, #8]
   140d4:	cmp	r7, #0
   140d8:	beq	140bc <__assert_fail@plt+0x3148>
   140dc:	mov	r0, r7
   140e0:	bl	10f5c <closedir@plt>
   140e4:	b	140bc <__assert_fail@plt+0x3148>
   140e8:	ldr	r0, [r4, #8]
   140ec:	bl	136b8 <__assert_fail@plt+0x2744>
   140f0:	ldr	r0, [r4, #24]
   140f4:	bl	136b8 <__assert_fail@plt+0x2744>
   140f8:	ldr	r0, [r4, #48]	; 0x30
   140fc:	tst	r0, #512	; 0x200
   14100:	bne	1413c <__assert_fail@plt+0x31c8>
   14104:	mov	r6, #0
   14108:	tst	r0, #4
   1410c:	bne	14160 <__assert_fail@plt+0x31ec>
   14110:	ldr	r0, [r4, #28]
   14114:	bl	10efc <fchdir@plt>
   14118:	cmp	r0, #0
   1411c:	beq	14208 <__assert_fail@plt+0x3294>
   14120:	bl	10e78 <__errno_location@plt>
   14124:	ldr	r6, [r0]
   14128:	ldr	r0, [r4, #28]
   1412c:	bl	10f44 <close@plt>
   14130:	cmp	r6, #0
   14134:	beq	14150 <__assert_fail@plt+0x31dc>
   14138:	b	14160 <__assert_fail@plt+0x31ec>
   1413c:	ldr	r0, [r4, #32]
   14140:	mov	r6, #0
   14144:	cmp	r0, #0
   14148:	bmi	14160 <__assert_fail@plt+0x31ec>
   1414c:	bl	10f44 <close@plt>
   14150:	cmp	r0, #0
   14154:	beq	14160 <__assert_fail@plt+0x31ec>
   14158:	bl	10e78 <__errno_location@plt>
   1415c:	ldr	r6, [r0]
   14160:	add	r5, r4, #60	; 0x3c
   14164:	mov	r0, r5
   14168:	bl	1894c <__assert_fail@plt+0x79d8>
   1416c:	cmp	r0, #0
   14170:	bne	14198 <__assert_fail@plt+0x3224>
   14174:	mov	r0, r5
   14178:	bl	189a0 <__assert_fail@plt+0x7a2c>
   1417c:	cmp	r0, #0
   14180:	bmi	14164 <__assert_fail@plt+0x31f0>
   14184:	bl	10f44 <close@plt>
   14188:	mov	r0, r5
   1418c:	bl	1894c <__assert_fail@plt+0x79d8>
   14190:	cmp	r0, #0
   14194:	beq	14174 <__assert_fail@plt+0x3200>
   14198:	ldr	r0, [r4, #52]	; 0x34
   1419c:	cmp	r0, #0
   141a0:	beq	141a8 <__assert_fail@plt+0x3234>
   141a4:	bl	17ce8 <__assert_fail@plt+0x6d74>
   141a8:	ldrh	r0, [r4, #48]	; 0x30
   141ac:	movw	r1, #258	; 0x102
   141b0:	tst	r0, r1
   141b4:	beq	141e8 <__assert_fail@plt+0x3274>
   141b8:	ldr	r0, [r4, #56]	; 0x38
   141bc:	cmp	r0, #0
   141c0:	beq	141c8 <__assert_fail@plt+0x3254>
   141c4:	bl	17ce8 <__assert_fail@plt+0x6d74>
   141c8:	mov	r0, r4
   141cc:	bl	136b8 <__assert_fail@plt+0x2744>
   141d0:	cmp	r6, #0
   141d4:	beq	14200 <__assert_fail@plt+0x328c>
   141d8:	bl	10e78 <__errno_location@plt>
   141dc:	str	r6, [r0]
   141e0:	mvn	r0, #0
   141e4:	pop	{r4, r5, r6, r7, fp, pc}
   141e8:	ldr	r0, [r4, #56]	; 0x38
   141ec:	bl	136b8 <__assert_fail@plt+0x2744>
   141f0:	mov	r0, r4
   141f4:	bl	136b8 <__assert_fail@plt+0x2744>
   141f8:	cmp	r6, #0
   141fc:	bne	141d8 <__assert_fail@plt+0x3264>
   14200:	mov	r0, #0
   14204:	pop	{r4, r5, r6, r7, fp, pc}
   14208:	mov	r6, #0
   1420c:	ldr	r0, [r4, #28]
   14210:	bl	10f44 <close@plt>
   14214:	cmp	r6, #0
   14218:	beq	14150 <__assert_fail@plt+0x31dc>
   1421c:	b	14160 <__assert_fail@plt+0x31ec>
   14220:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14224:	add	fp, sp, #24
   14228:	sub	sp, sp, #8
   1422c:	ldr	r6, [r0]
   14230:	mov	r5, #0
   14234:	cmp	r6, #0
   14238:	beq	149e0 <__assert_fail@plt+0x3a6c>
   1423c:	mov	r4, r0
   14240:	ldr	r0, [r0, #48]	; 0x30
   14244:	tst	r0, #8192	; 0x2000
   14248:	bne	149e0 <__assert_fail@plt+0x3a6c>
   1424c:	ldrh	r1, [r6, #60]	; 0x3c
   14250:	mov	r2, #3
   14254:	strh	r2, [r6, #60]	; 0x3c
   14258:	cmp	r1, #1
   1425c:	beq	142fc <__assert_fail@plt+0x3388>
   14260:	cmp	r1, #2
   14264:	bne	14320 <__assert_fail@plt+0x33ac>
   14268:	ldrh	r2, [r6, #56]	; 0x38
   1426c:	bic	r3, r2, #1
   14270:	cmp	r3, #12
   14274:	bne	14324 <__assert_fail@plt+0x33b0>
   14278:	mov	r0, r4
   1427c:	mov	r1, r6
   14280:	mov	r2, #1
   14284:	bl	13d90 <__assert_fail@plt+0x2e1c>
   14288:	cmp	r0, #1
   1428c:	strh	r0, [r6, #56]	; 0x38
   14290:	bne	148f4 <__assert_fail@plt+0x3980>
   14294:	ldr	r0, [r4, #48]	; 0x30
   14298:	tst	r0, #4
   1429c:	bne	148f4 <__assert_fail@plt+0x3980>
   142a0:	mov	r1, #32768	; 0x8000
   142a4:	tst	r0, #512	; 0x200
   142a8:	and	r1, r1, r0, lsl #11
   142ac:	orr	r1, r1, #18688	; 0x4900
   142b0:	orr	r2, r1, #524288	; 0x80000
   142b4:	bne	14628 <__assert_fail@plt+0x36b4>
   142b8:	movw	r0, #37667	; 0x9323
   142bc:	mov	r1, r2
   142c0:	movt	r0, #1
   142c4:	bl	18f0c <__assert_fail@plt+0x7f98>
   142c8:	cmn	r0, #1
   142cc:	str	r0, [r6, #36]	; 0x24
   142d0:	bgt	14644 <__assert_fail@plt+0x36d0>
   142d4:	bl	10e78 <__errno_location@plt>
   142d8:	ldr	r0, [r0]
   142dc:	mov	r1, #7
   142e0:	strh	r1, [r6, #56]	; 0x38
   142e4:	str	r0, [r6, #32]
   142e8:	str	r6, [r4]
   142ec:	ldrh	r0, [r6, #56]	; 0x38
   142f0:	cmp	r0, #11
   142f4:	beq	14904 <__assert_fail@plt+0x3990>
   142f8:	b	14938 <__assert_fail@plt+0x39c4>
   142fc:	mov	r0, r4
   14300:	mov	r1, r6
   14304:	mov	r2, #0
   14308:	bl	13d90 <__assert_fail@plt+0x2e1c>
   1430c:	strh	r0, [r6, #56]	; 0x38
   14310:	mov	r5, r6
   14314:	mov	r0, r5
   14318:	sub	sp, fp, #24
   1431c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14320:	ldrh	r2, [r6, #56]	; 0x38
   14324:	cmp	r2, #1
   14328:	bne	14384 <__assert_fail@plt+0x3410>
   1432c:	cmp	r1, #4
   14330:	bne	14438 <__assert_fail@plt+0x34c4>
   14334:	ldrb	r0, [r6, #58]	; 0x3a
   14338:	tst	r0, #2
   1433c:	beq	14348 <__assert_fail@plt+0x33d4>
   14340:	ldr	r0, [r6, #36]	; 0x24
   14344:	bl	10f44 <close@plt>
   14348:	ldr	r5, [r4, #4]
   1434c:	cmp	r5, #0
   14350:	bne	1436c <__assert_fail@plt+0x33f8>
   14354:	b	144d0 <__assert_fail@plt+0x355c>
   14358:	mov	r0, r5
   1435c:	bl	136b8 <__assert_fail@plt+0x2744>
   14360:	cmp	r8, #0
   14364:	mov	r5, r8
   14368:	beq	144c8 <__assert_fail@plt+0x3554>
   1436c:	ldrd	r8, [r5, #8]
   14370:	cmp	r9, #0
   14374:	beq	14358 <__assert_fail@plt+0x33e4>
   14378:	mov	r0, r9
   1437c:	bl	10f5c <closedir@plt>
   14380:	b	14358 <__assert_fail@plt+0x33e4>
   14384:	mov	r7, r6
   14388:	ldr	r6, [r7, #8]
   1438c:	cmp	r6, #0
   14390:	beq	144f4 <__assert_fail@plt+0x3580>
   14394:	mov	r0, r7
   14398:	str	r6, [r4]
   1439c:	bl	136b8 <__assert_fail@plt+0x2744>
   143a0:	ldr	r0, [r6, #48]	; 0x30
   143a4:	cmp	r0, #0
   143a8:	beq	1453c <__assert_fail@plt+0x35c8>
   143ac:	ldrh	r0, [r6, #60]	; 0x3c
   143b0:	mov	r7, r6
   143b4:	cmp	r0, #4
   143b8:	beq	14388 <__assert_fail@plt+0x3414>
   143bc:	cmp	r0, #2
   143c0:	bne	148b8 <__assert_fail@plt+0x3944>
   143c4:	mov	r0, r4
   143c8:	mov	r1, r6
   143cc:	mov	r2, #1
   143d0:	bl	13d90 <__assert_fail@plt+0x2e1c>
   143d4:	cmp	r0, #1
   143d8:	strh	r0, [r6, #56]	; 0x38
   143dc:	bne	148b0 <__assert_fail@plt+0x393c>
   143e0:	ldr	r0, [r4, #48]	; 0x30
   143e4:	tst	r0, #4
   143e8:	bne	148b0 <__assert_fail@plt+0x393c>
   143ec:	mov	r1, #32768	; 0x8000
   143f0:	tst	r0, #512	; 0x200
   143f4:	and	r1, r1, r0, lsl #11
   143f8:	orr	r1, r1, #18688	; 0x4900
   143fc:	orr	r2, r1, #524288	; 0x80000
   14400:	bne	14888 <__assert_fail@plt+0x3914>
   14404:	movw	r0, #37667	; 0x9323
   14408:	mov	r1, r2
   1440c:	movt	r0, #1
   14410:	bl	18f0c <__assert_fail@plt+0x7f98>
   14414:	cmn	r0, #1
   14418:	str	r0, [r6, #36]	; 0x24
   1441c:	bgt	148a4 <__assert_fail@plt+0x3930>
   14420:	bl	10e78 <__errno_location@plt>
   14424:	ldr	r0, [r0]
   14428:	mov	r1, #7
   1442c:	strh	r1, [r6, #56]	; 0x38
   14430:	str	r0, [r6, #32]
   14434:	b	148b0 <__assert_fail@plt+0x393c>
   14438:	tst	r0, #64	; 0x40
   1443c:	beq	14458 <__assert_fail@plt+0x34e4>
   14440:	ldrd	r2, [r4, #16]
   14444:	ldrd	r8, [r6, #64]	; 0x40
   14448:	eor	r1, r9, r3
   1444c:	eor	r2, r8, r2
   14450:	orrs	r1, r2, r1
   14454:	bne	14334 <__assert_fail@plt+0x33c0>
   14458:	ldr	r7, [r4, #4]
   1445c:	cmp	r7, #0
   14460:	beq	145d4 <__assert_fail@plt+0x3660>
   14464:	tst	r0, #4096	; 0x1000
   14468:	bne	1458c <__assert_fail@plt+0x3618>
   1446c:	ldr	r3, [r6, #24]
   14470:	mov	r0, r4
   14474:	mov	r1, r6
   14478:	mvn	r2, #0
   1447c:	bl	14b9c <__assert_fail@plt+0x3c28>
   14480:	cmp	r0, #0
   14484:	beq	145ec <__assert_fail@plt+0x3678>
   14488:	bl	10e78 <__errno_location@plt>
   1448c:	ldr	r0, [r0]
   14490:	str	r0, [r6, #32]
   14494:	ldrh	r0, [r6, #58]	; 0x3a
   14498:	orr	r0, r0, #1
   1449c:	strh	r0, [r6, #58]	; 0x3a
   144a0:	ldr	r0, [r4, #4]
   144a4:	cmp	r0, #0
   144a8:	beq	145ec <__assert_fail@plt+0x3678>
   144ac:	ldmib	r0, {r1, r2}
   144b0:	cmp	r2, #0
   144b4:	ldr	r1, [r1, #24]
   144b8:	str	r1, [r0, #24]
   144bc:	mov	r0, r2
   144c0:	bne	144ac <__assert_fail@plt+0x3538>
   144c4:	b	145ec <__assert_fail@plt+0x3678>
   144c8:	mov	r0, #0
   144cc:	str	r0, [r4, #4]
   144d0:	mov	r0, #6
   144d4:	strh	r0, [r6, #56]	; 0x38
   144d8:	mov	r0, r4
   144dc:	mov	r1, r6
   144e0:	bl	14ac0 <__assert_fail@plt+0x3b4c>
   144e4:	mov	r5, r6
   144e8:	mov	r0, r5
   144ec:	sub	sp, fp, #24
   144f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144f4:	ldr	r0, [r7, #4]
   144f8:	ldr	r1, [r0, #12]
   144fc:	cmp	r1, #0
   14500:	beq	14564 <__assert_fail@plt+0x35f0>
   14504:	str	r0, [r4]
   14508:	mov	r2, #0
   1450c:	ldr	r1, [r4, #24]
   14510:	ldr	r0, [r0, #40]	; 0x28
   14514:	strb	r2, [r1, r0]
   14518:	mov	r0, r4
   1451c:	mov	r1, #3
   14520:	bl	14e4c <__assert_fail@plt+0x3ed8>
   14524:	cmp	r0, #0
   14528:	beq	14664 <__assert_fail@plt+0x36f0>
   1452c:	mov	r6, r0
   14530:	mov	r0, r7
   14534:	bl	136b8 <__assert_fail@plt+0x2744>
   14538:	b	148b8 <__assert_fail@plt+0x3944>
   1453c:	mov	r0, r4
   14540:	bl	159e4 <__assert_fail@plt+0x4a70>
   14544:	ldr	r1, [r4, #48]	; 0x30
   14548:	cmp	r0, #0
   1454c:	beq	1456c <__assert_fail@plt+0x35f8>
   14550:	orr	r0, r1, #8192	; 0x2000
   14554:	str	r0, [r4, #48]	; 0x30
   14558:	mov	r0, r5
   1455c:	sub	sp, fp, #24
   14560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14564:	mov	r5, r0
   14568:	b	14678 <__assert_fail@plt+0x3704>
   1456c:	movw	r0, #258	; 0x102
   14570:	tst	r1, r0
   14574:	beq	14714 <__assert_fail@plt+0x37a0>
   14578:	ldr	r0, [r4, #56]	; 0x38
   1457c:	cmp	r0, #0
   14580:	beq	1471c <__assert_fail@plt+0x37a8>
   14584:	bl	17ce8 <__assert_fail@plt+0x6d74>
   14588:	b	1471c <__assert_fail@plt+0x37a8>
   1458c:	bic	r0, r0, #4096	; 0x1000
   14590:	str	r0, [r4, #48]	; 0x30
   14594:	ldrd	r8, [r7, #8]
   14598:	cmp	r9, #0
   1459c:	bne	145c0 <__assert_fail@plt+0x364c>
   145a0:	mov	r0, r7
   145a4:	bl	136b8 <__assert_fail@plt+0x2744>
   145a8:	cmp	r8, #0
   145ac:	mov	r7, r8
   145b0:	beq	145cc <__assert_fail@plt+0x3658>
   145b4:	ldrd	r8, [r7, #8]
   145b8:	cmp	r9, #0
   145bc:	beq	145a0 <__assert_fail@plt+0x362c>
   145c0:	mov	r0, r9
   145c4:	bl	10f5c <closedir@plt>
   145c8:	b	145a0 <__assert_fail@plt+0x362c>
   145cc:	mov	r0, #0
   145d0:	str	r0, [r4, #4]
   145d4:	mov	r0, r4
   145d8:	mov	r1, #3
   145dc:	bl	14e4c <__assert_fail@plt+0x3ed8>
   145e0:	cmp	r0, #0
   145e4:	str	r0, [r4, #4]
   145e8:	beq	145fc <__assert_fail@plt+0x3688>
   145ec:	ldr	r6, [r4, #4]
   145f0:	mov	r0, #0
   145f4:	str	r0, [r4, #4]
   145f8:	b	148b8 <__assert_fail@plt+0x3944>
   145fc:	ldrb	r0, [r4, #49]	; 0x31
   14600:	tst	r0, #32
   14604:	bne	149e0 <__assert_fail@plt+0x3a6c>
   14608:	ldr	r0, [r6, #32]
   1460c:	cmp	r0, #0
   14610:	beq	144d8 <__assert_fail@plt+0x3564>
   14614:	ldrh	r0, [r6, #56]	; 0x38
   14618:	cmp	r0, #4
   1461c:	beq	144d8 <__assert_fail@plt+0x3564>
   14620:	mov	r0, #7
   14624:	b	144d4 <__assert_fail@plt+0x3560>
   14628:	ldr	r0, [r4, #32]
   1462c:	movw	r1, #37667	; 0x9323
   14630:	movt	r1, #1
   14634:	bl	18a84 <__assert_fail@plt+0x7b10>
   14638:	cmn	r0, #1
   1463c:	str	r0, [r6, #36]	; 0x24
   14640:	ble	142d4 <__assert_fail@plt+0x3360>
   14644:	ldrh	r0, [r6, #58]	; 0x3a
   14648:	orr	r0, r0, #2
   1464c:	strh	r0, [r6, #58]	; 0x3a
   14650:	str	r6, [r4]
   14654:	ldrh	r0, [r6, #56]	; 0x38
   14658:	cmp	r0, #11
   1465c:	beq	14904 <__assert_fail@plt+0x3990>
   14660:	b	14938 <__assert_fail@plt+0x39c4>
   14664:	ldrb	r0, [r4, #49]	; 0x31
   14668:	mov	r5, #0
   1466c:	tst	r0, #32
   14670:	bne	149e0 <__assert_fail@plt+0x3a6c>
   14674:	ldr	r5, [r7, #4]
   14678:	mov	r0, r7
   1467c:	str	r5, [r4]
   14680:	bl	136b8 <__assert_fail@plt+0x2744>
   14684:	ldr	r0, [r5, #48]	; 0x30
   14688:	cmn	r0, #1
   1468c:	beq	146f0 <__assert_fail@plt+0x377c>
   14690:	ldrh	r0, [r5, #56]	; 0x38
   14694:	cmp	r0, #11
   14698:	beq	14abc <__assert_fail@plt+0x3b48>
   1469c:	ldr	r0, [r5, #40]	; 0x28
   146a0:	ldr	r1, [r4, #24]
   146a4:	mov	r2, #0
   146a8:	strb	r2, [r1, r0]
   146ac:	ldr	r0, [r5, #48]	; 0x30
   146b0:	cmp	r0, #0
   146b4:	beq	1480c <__assert_fail@plt+0x3898>
   146b8:	ldrh	r0, [r5, #58]	; 0x3a
   146bc:	tst	r0, #2
   146c0:	bne	14844 <__assert_fail@plt+0x38d0>
   146c4:	tst	r0, #1
   146c8:	bne	14a74 <__assert_fail@plt+0x3b00>
   146cc:	ldr	r1, [r5, #4]
   146d0:	movw	r3, #37666	; 0x9322
   146d4:	mov	r0, r4
   146d8:	mvn	r2, #0
   146dc:	movt	r3, #1
   146e0:	bl	14b9c <__assert_fail@plt+0x3c28>
   146e4:	cmp	r0, #0
   146e8:	bne	1481c <__assert_fail@plt+0x38a8>
   146ec:	b	14a74 <__assert_fail@plt+0x3b00>
   146f0:	mov	r0, r5
   146f4:	bl	136b8 <__assert_fail@plt+0x2744>
   146f8:	bl	10e78 <__errno_location@plt>
   146fc:	mov	r5, #0
   14700:	str	r5, [r0]
   14704:	str	r5, [r4]
   14708:	mov	r0, r5
   1470c:	sub	sp, fp, #24
   14710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14714:	ldr	r0, [r4, #56]	; 0x38
   14718:	bl	136b8 <__assert_fail@plt+0x2744>
   1471c:	ldr	r1, [r6, #52]	; 0x34
   14720:	add	r7, r6, #168	; 0xa8
   14724:	str	r1, [r6, #40]	; 0x28
   14728:	add	r2, r1, #1
   1472c:	mov	r1, r7
   14730:	ldr	r0, [r4, #24]
   14734:	bl	10d58 <memmove@plt>
   14738:	mov	r0, r7
   1473c:	mov	r1, #47	; 0x2f
   14740:	bl	10ea8 <strrchr@plt>
   14744:	cmp	r0, #0
   14748:	beq	14784 <__assert_fail@plt+0x3810>
   1474c:	cmp	r0, r7
   14750:	bne	14760 <__assert_fail@plt+0x37ec>
   14754:	ldrb	r1, [r6, #169]	; 0xa9
   14758:	cmp	r1, #0
   1475c:	beq	14784 <__assert_fail@plt+0x3810>
   14760:	add	r8, r0, #1
   14764:	mov	r0, r8
   14768:	bl	10e48 <strlen@plt>
   1476c:	mov	r9, r0
   14770:	add	r2, r0, #1
   14774:	mov	r0, r7
   14778:	mov	r1, r8
   1477c:	bl	10d58 <memmove@plt>
   14780:	str	r9, [r6, #52]	; 0x34
   14784:	ldr	r0, [r4, #24]
   14788:	movw	r1, #258	; 0x102
   1478c:	str	r0, [r6, #24]
   14790:	str	r0, [r6, #28]
   14794:	ldrh	r0, [r4, #48]	; 0x30
   14798:	tst	r0, r1
   1479c:	beq	147e0 <__assert_fail@plt+0x386c>
   147a0:	movw	r0, #14008	; 0x36b8
   147a4:	movw	r2, #23768	; 0x5cd8
   147a8:	movw	r3, #23800	; 0x5cf8
   147ac:	mov	r1, #0
   147b0:	movt	r0, #1
   147b4:	movt	r2, #1
   147b8:	movt	r3, #1
   147bc:	str	r0, [sp]
   147c0:	mov	r0, #31
   147c4:	bl	179cc <__assert_fail@plt+0x6a58>
   147c8:	str	r0, [r4, #56]	; 0x38
   147cc:	str	r6, [r4]
   147d0:	ldrh	r0, [r6, #56]	; 0x38
   147d4:	cmp	r0, #11
   147d8:	beq	14904 <__assert_fail@plt+0x3990>
   147dc:	b	14938 <__assert_fail@plt+0x39c4>
   147e0:	mov	r0, #32
   147e4:	bl	18bb8 <__assert_fail@plt+0x7c44>
   147e8:	cmp	r0, #0
   147ec:	str	r0, [r4, #56]	; 0x38
   147f0:	beq	148f4 <__assert_fail@plt+0x3980>
   147f4:	bl	18c3c <__assert_fail@plt+0x7cc8>
   147f8:	str	r6, [r4]
   147fc:	ldrh	r0, [r6, #56]	; 0x38
   14800:	cmp	r0, #11
   14804:	beq	14904 <__assert_fail@plt+0x3990>
   14808:	b	14938 <__assert_fail@plt+0x39c4>
   1480c:	mov	r0, r4
   14810:	bl	159e4 <__assert_fail@plt+0x4a70>
   14814:	cmp	r0, #0
   14818:	beq	14a74 <__assert_fail@plt+0x3b00>
   1481c:	bl	10e78 <__errno_location@plt>
   14820:	ldr	r0, [r0]
   14824:	str	r0, [r5, #32]
   14828:	ldr	r0, [r4, #48]	; 0x30
   1482c:	orr	r0, r0, #8192	; 0x2000
   14830:	str	r0, [r4, #48]	; 0x30
   14834:	ldrh	r0, [r5, #56]	; 0x38
   14838:	cmp	r0, #2
   1483c:	bne	14a80 <__assert_fail@plt+0x3b0c>
   14840:	b	14aa4 <__assert_fail@plt+0x3b30>
   14844:	ldr	r0, [r4, #48]	; 0x30
   14848:	tst	r0, #4
   1484c:	bne	14a6c <__assert_fail@plt+0x3af8>
   14850:	ldr	r6, [r5, #36]	; 0x24
   14854:	tst	r0, #512	; 0x200
   14858:	bne	14a40 <__assert_fail@plt+0x3acc>
   1485c:	mov	r0, r6
   14860:	bl	10efc <fchdir@plt>
   14864:	cmp	r0, #0
   14868:	beq	14a6c <__assert_fail@plt+0x3af8>
   1486c:	bl	10e78 <__errno_location@plt>
   14870:	ldr	r0, [r0]
   14874:	str	r0, [r5, #32]
   14878:	ldr	r0, [r4, #48]	; 0x30
   1487c:	orr	r0, r0, #8192	; 0x2000
   14880:	str	r0, [r4, #48]	; 0x30
   14884:	b	14a6c <__assert_fail@plt+0x3af8>
   14888:	ldr	r0, [r4, #32]
   1488c:	movw	r1, #37667	; 0x9323
   14890:	movt	r1, #1
   14894:	bl	18a84 <__assert_fail@plt+0x7b10>
   14898:	cmn	r0, #1
   1489c:	str	r0, [r6, #36]	; 0x24
   148a0:	ble	14420 <__assert_fail@plt+0x34ac>
   148a4:	ldrh	r0, [r6, #58]	; 0x3a
   148a8:	orr	r0, r0, #2
   148ac:	strh	r0, [r6, #58]	; 0x3a
   148b0:	mov	r0, #3
   148b4:	strh	r0, [r6, #60]	; 0x3c
   148b8:	ldr	r0, [r6, #4]
   148bc:	ldr	r1, [r0, #28]
   148c0:	ldr	r0, [r0, #40]	; 0x28
   148c4:	sub	r2, r0, #1
   148c8:	ldrb	r1, [r1, r2]
   148cc:	cmp	r1, #47	; 0x2f
   148d0:	ldr	r1, [r4, #24]
   148d4:	moveq	r0, r2
   148d8:	mov	r2, #47	; 0x2f
   148dc:	strb	r2, [r1, r0]!
   148e0:	ldr	r2, [r6, #52]	; 0x34
   148e4:	add	r0, r1, #1
   148e8:	add	r1, r6, #168	; 0xa8
   148ec:	add	r2, r2, #1
   148f0:	bl	10d58 <memmove@plt>
   148f4:	str	r6, [r4]
   148f8:	ldrh	r0, [r6, #56]	; 0x38
   148fc:	cmp	r0, #11
   14900:	bne	14938 <__assert_fail@plt+0x39c4>
   14904:	add	r0, r6, #112	; 0x70
   14908:	ldrd	r0, [r0]
   1490c:	eor	r2, r0, #1
   14910:	orrs	r2, r2, r1
   14914:	beq	149ec <__assert_fail@plt+0x3a78>
   14918:	eor	r0, r0, #2
   1491c:	orrs	r0, r0, r1
   14920:	bne	14abc <__assert_fail@plt+0x3b48>
   14924:	mov	r0, r4
   14928:	mov	r1, r6
   1492c:	mov	r2, #0
   14930:	bl	13d90 <__assert_fail@plt+0x2e1c>
   14934:	strh	r0, [r6, #56]	; 0x38
   14938:	cmp	r0, #1
   1493c:	bne	149dc <__assert_fail@plt+0x3a68>
   14940:	ldr	r0, [r6, #48]	; 0x30
   14944:	add	r8, r6, #64	; 0x40
   14948:	cmp	r0, #0
   1494c:	bne	14958 <__assert_fail@plt+0x39e4>
   14950:	ldrd	r0, [r8]
   14954:	strd	r0, [r4, #16]
   14958:	ldrh	r0, [r4, #48]	; 0x30
   1495c:	movw	r1, #258	; 0x102
   14960:	tst	r0, r1
   14964:	beq	149fc <__assert_fail@plt+0x3a88>
   14968:	mov	r0, #24
   1496c:	bl	18bb8 <__assert_fail@plt+0x7c44>
   14970:	cmp	r0, #0
   14974:	beq	14a28 <__assert_fail@plt+0x3ab4>
   14978:	ldrd	r2, [r8]
   1497c:	mov	r7, r0
   14980:	add	r0, r6, #160	; 0xa0
   14984:	stm	r7, {r2, r3}
   14988:	add	r2, r7, #8
   1498c:	ldrd	r0, [r0]
   14990:	stm	r2, {r0, r1, r6}
   14994:	mov	r1, r7
   14998:	ldr	r0, [r4, #56]	; 0x38
   1499c:	bl	18628 <__assert_fail@plt+0x76b4>
   149a0:	cmp	r0, r7
   149a4:	beq	149ec <__assert_fail@plt+0x3a78>
   149a8:	mov	r4, r0
   149ac:	mov	r0, r7
   149b0:	bl	136b8 <__assert_fail@plt+0x2744>
   149b4:	cmp	r4, #0
   149b8:	beq	14a28 <__assert_fail@plt+0x3ab4>
   149bc:	ldr	r0, [r4, #16]
   149c0:	mov	r1, #2
   149c4:	mov	r5, r6
   149c8:	strh	r1, [r6, #56]	; 0x38
   149cc:	str	r0, [r6]
   149d0:	mov	r0, r5
   149d4:	sub	sp, fp, #24
   149d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149dc:	mov	r5, r6
   149e0:	mov	r0, r5
   149e4:	sub	sp, fp, #24
   149e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149ec:	mov	r5, r6
   149f0:	mov	r0, r5
   149f4:	sub	sp, fp, #24
   149f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149fc:	ldr	r0, [r4, #56]	; 0x38
   14a00:	mov	r1, r8
   14a04:	bl	18c58 <__assert_fail@plt+0x7ce4>
   14a08:	cmp	r0, #0
   14a0c:	mov	r5, r6
   14a10:	movne	r0, #2
   14a14:	strhne	r0, [r6, #56]	; 0x38
   14a18:	strne	r6, [r6]
   14a1c:	mov	r0, r5
   14a20:	sub	sp, fp, #24
   14a24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a28:	bl	10e78 <__errno_location@plt>
   14a2c:	mov	r1, #12
   14a30:	str	r1, [r0]
   14a34:	mov	r0, r5
   14a38:	sub	sp, fp, #24
   14a3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a40:	ldr	r1, [r4, #32]
   14a44:	cmp	r1, r6
   14a48:	bne	14a54 <__assert_fail@plt+0x3ae0>
   14a4c:	cmn	r1, #100	; 0x64
   14a50:	bne	14abc <__assert_fail@plt+0x3b48>
   14a54:	add	r0, r4, #60	; 0x3c
   14a58:	bl	18954 <__assert_fail@plt+0x79e0>
   14a5c:	cmp	r0, #0
   14a60:	bmi	14a68 <__assert_fail@plt+0x3af4>
   14a64:	bl	10f44 <close@plt>
   14a68:	str	r6, [r4, #32]
   14a6c:	ldr	r0, [r5, #36]	; 0x24
   14a70:	bl	10f44 <close@plt>
   14a74:	ldrh	r0, [r5, #56]	; 0x38
   14a78:	cmp	r0, #2
   14a7c:	beq	14aa4 <__assert_fail@plt+0x3b30>
   14a80:	ldr	r0, [r5, #32]
   14a84:	mov	r1, #7
   14a88:	cmp	r0, #0
   14a8c:	movweq	r1, #6
   14a90:	strh	r1, [r5, #56]	; 0x38
   14a94:	bne	14aa4 <__assert_fail@plt+0x3b30>
   14a98:	mov	r0, r4
   14a9c:	mov	r1, r5
   14aa0:	bl	14ac0 <__assert_fail@plt+0x3b4c>
   14aa4:	ldrb	r0, [r4, #49]	; 0x31
   14aa8:	tst	r0, #32
   14aac:	movne	r5, #0
   14ab0:	mov	r0, r5
   14ab4:	sub	sp, fp, #24
   14ab8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14abc:	bl	10f38 <abort@plt>
   14ac0:	push	{r4, r5, r7, sl, fp, lr}
   14ac4:	add	fp, sp, #16
   14ac8:	sub	sp, sp, #24
   14acc:	ldrh	r2, [r0, #48]	; 0x30
   14ad0:	movw	r3, #258	; 0x102
   14ad4:	add	lr, r1, #64	; 0x40
   14ad8:	add	r4, r1, #160	; 0xa0
   14adc:	tst	r2, r3
   14ae0:	beq	14b18 <__assert_fail@plt+0x3ba4>
   14ae4:	ldrd	r2, [lr]
   14ae8:	mov	r1, sp
   14aec:	stm	sp, {r2, r3}
   14af0:	ldrd	r2, [r4]
   14af4:	str	r3, [sp, #12]
   14af8:	str	r2, [sp, #8]
   14afc:	ldr	r0, [r0, #56]	; 0x38
   14b00:	bl	18670 <__assert_fail@plt+0x76fc>
   14b04:	cmp	r0, #0
   14b08:	beq	14b98 <__assert_fail@plt+0x3c24>
   14b0c:	bl	136b8 <__assert_fail@plt+0x2744>
   14b10:	sub	sp, fp, #16
   14b14:	pop	{r4, r5, r7, sl, fp, pc}
   14b18:	ldr	r1, [r1, #4]
   14b1c:	cmp	r1, #0
   14b20:	beq	14b90 <__assert_fail@plt+0x3c1c>
   14b24:	ldr	r2, [r1, #48]	; 0x30
   14b28:	cmp	r2, #0
   14b2c:	bmi	14b90 <__assert_fail@plt+0x3c1c>
   14b30:	ldr	ip, [r0, #56]	; 0x38
   14b34:	ldrd	r2, [ip, #16]
   14b38:	orrs	r2, r2, r3
   14b3c:	beq	14b98 <__assert_fail@plt+0x3c24>
   14b40:	ldrd	r2, [r4]
   14b44:	ldrd	r4, [ip]
   14b48:	eor	r3, r5, r3
   14b4c:	eor	r2, r4, r2
   14b50:	orrs	r2, r2, r3
   14b54:	bne	14b90 <__assert_fail@plt+0x3c1c>
   14b58:	add	r3, ip, #8
   14b5c:	ldm	lr, {r2, r5}
   14b60:	ldm	r3, {r4, r7}
   14b64:	eor	r7, r7, r5
   14b68:	eor	r2, r4, r2
   14b6c:	orrs	r2, r2, r7
   14b70:	bne	14b90 <__assert_fail@plt+0x3c1c>
   14b74:	add	r2, r1, #64	; 0x40
   14b78:	add	r1, r1, #160	; 0xa0
   14b7c:	ldm	r2, {r2, r5}
   14b80:	stm	r3, {r2, r5}
   14b84:	ldr	r0, [r0, #56]	; 0x38
   14b88:	ldrd	r2, [r1]
   14b8c:	strd	r2, [r0]
   14b90:	sub	sp, fp, #16
   14b94:	pop	{r4, r5, r7, sl, fp, pc}
   14b98:	bl	10f38 <abort@plt>
   14b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ba0:	add	fp, sp, #28
   14ba4:	sub	sp, sp, #108	; 0x6c
   14ba8:	mov	r7, r3
   14bac:	mov	r4, r2
   14bb0:	mov	r8, r1
   14bb4:	mov	sl, r0
   14bb8:	cmp	r3, #0
   14bbc:	beq	14c48 <__assert_fail@plt+0x3cd4>
   14bc0:	movw	r1, #37666	; 0x9322
   14bc4:	mov	r0, r7
   14bc8:	movt	r1, #1
   14bcc:	bl	10d1c <strcmp@plt>
   14bd0:	cmp	r0, #0
   14bd4:	mov	r6, r0
   14bd8:	movwne	r6, #1
   14bdc:	ldr	r0, [sl, #48]	; 0x30
   14be0:	tst	r0, #4
   14be4:	bne	14c58 <__assert_fail@plt+0x3ce4>
   14be8:	cmn	r4, #1
   14bec:	mov	r1, #0
   14bf0:	mov	r9, #0
   14bf4:	movwgt	r1, #1
   14bf8:	orrs	r1, r1, r6
   14bfc:	bne	14c80 <__assert_fail@plt+0x3d0c>
   14c00:	ands	r0, r0, #512	; 0x200
   14c04:	beq	14c80 <__assert_fail@plt+0x3d0c>
   14c08:	add	r4, sl, #60	; 0x3c
   14c0c:	mov	r0, r4
   14c10:	bl	1894c <__assert_fail@plt+0x79d8>
   14c14:	cmp	r0, #0
   14c18:	bne	14c88 <__assert_fail@plt+0x3d14>
   14c1c:	mov	r0, r4
   14c20:	bl	189a0 <__assert_fail@plt+0x7a2c>
   14c24:	cmn	r0, #1
   14c28:	ble	14c88 <__assert_fail@plt+0x3d14>
   14c2c:	mov	r4, r0
   14c30:	mov	r9, #0
   14c34:	mov	r7, #0
   14c38:	ldr	r5, [sl, #48]	; 0x30
   14c3c:	tst	r5, #2
   14c40:	beq	14ccc <__assert_fail@plt+0x3d58>
   14c44:	b	14d14 <__assert_fail@plt+0x3da0>
   14c48:	mov	r6, #1
   14c4c:	ldr	r0, [sl, #48]	; 0x30
   14c50:	tst	r0, #4
   14c54:	beq	14be8 <__assert_fail@plt+0x3c74>
   14c58:	mov	r5, #0
   14c5c:	cmp	r4, #0
   14c60:	bmi	14d08 <__assert_fail@plt+0x3d94>
   14c64:	ands	r0, r0, #512	; 0x200
   14c68:	beq	14d08 <__assert_fail@plt+0x3d94>
   14c6c:	mov	r0, r4
   14c70:	bl	10f44 <close@plt>
   14c74:	mov	r0, r5
   14c78:	sub	sp, fp, #28
   14c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c80:	cmn	r4, #1
   14c84:	bgt	14cc0 <__assert_fail@plt+0x3d4c>
   14c88:	ldr	r0, [sl, #48]	; 0x30
   14c8c:	mov	r1, #32768	; 0x8000
   14c90:	and	r1, r1, r0, lsl #11
   14c94:	tst	r0, #512	; 0x200
   14c98:	orr	r1, r1, #18688	; 0x4900
   14c9c:	orr	r2, r1, #524288	; 0x80000
   14ca0:	bne	14d3c <__assert_fail@plt+0x3dc8>
   14ca4:	mov	r0, r7
   14ca8:	mov	r1, r2
   14cac:	bl	18f0c <__assert_fail@plt+0x7f98>
   14cb0:	mov	r4, r0
   14cb4:	mov	r9, #1
   14cb8:	cmp	r0, #0
   14cbc:	bmi	14d58 <__assert_fail@plt+0x3de4>
   14cc0:	ldr	r5, [sl, #48]	; 0x30
   14cc4:	tst	r5, #2
   14cc8:	bne	14d14 <__assert_fail@plt+0x3da0>
   14ccc:	cmp	r7, #0
   14cd0:	beq	14cec <__assert_fail@plt+0x3d78>
   14cd4:	movw	r1, #37666	; 0x9322
   14cd8:	mov	r0, r7
   14cdc:	movt	r1, #1
   14ce0:	bl	10d1c <strcmp@plt>
   14ce4:	cmp	r0, #0
   14ce8:	beq	14d14 <__assert_fail@plt+0x3da0>
   14cec:	tst	r5, #512	; 0x200
   14cf0:	bne	14db0 <__assert_fail@plt+0x3e3c>
   14cf4:	mov	r0, r4
   14cf8:	bl	10efc <fchdir@plt>
   14cfc:	mov	r5, r0
   14d00:	cmp	r9, #0
   14d04:	bne	14df8 <__assert_fail@plt+0x3e84>
   14d08:	mov	r0, r5
   14d0c:	sub	sp, fp, #28
   14d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d14:	mov	r2, sp
   14d18:	mov	r0, #3
   14d1c:	mov	r1, r4
   14d20:	bl	10db8 <__fxstat64@plt>
   14d24:	cmp	r0, #0
   14d28:	beq	14d68 <__assert_fail@plt+0x3df4>
   14d2c:	mvn	r5, #0
   14d30:	cmp	r9, #0
   14d34:	beq	14d08 <__assert_fail@plt+0x3d94>
   14d38:	b	14df8 <__assert_fail@plt+0x3e84>
   14d3c:	ldr	r0, [sl, #32]
   14d40:	mov	r1, r7
   14d44:	bl	18a84 <__assert_fail@plt+0x7b10>
   14d48:	mov	r4, r0
   14d4c:	mov	r9, #1
   14d50:	cmp	r0, #0
   14d54:	bpl	14cc0 <__assert_fail@plt+0x3d4c>
   14d58:	mvn	r5, #0
   14d5c:	mov	r0, r5
   14d60:	sub	sp, fp, #28
   14d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d68:	add	r0, r8, #64	; 0x40
   14d6c:	ldm	sp, {r2, r3}
   14d70:	ldrd	r0, [r0]
   14d74:	eor	r1, r1, r3
   14d78:	eor	r0, r0, r2
   14d7c:	orrs	r0, r0, r1
   14d80:	bne	14de0 <__assert_fail@plt+0x3e6c>
   14d84:	add	r0, r8, #160	; 0xa0
   14d88:	ldr	r2, [sp, #96]	; 0x60
   14d8c:	ldr	r3, [sp, #100]	; 0x64
   14d90:	ldrd	r0, [r0]
   14d94:	eor	r1, r1, r3
   14d98:	eor	r0, r0, r2
   14d9c:	orrs	r0, r0, r1
   14da0:	bne	14de0 <__assert_fail@plt+0x3e6c>
   14da4:	ldr	r5, [sl, #48]	; 0x30
   14da8:	tst	r5, #512	; 0x200
   14dac:	beq	14cf4 <__assert_fail@plt+0x3d80>
   14db0:	ldr	r1, [sl, #32]
   14db4:	cmp	r1, r4
   14db8:	bne	14dc4 <__assert_fail@plt+0x3e50>
   14dbc:	cmn	r1, #100	; 0x64
   14dc0:	bne	14e48 <__assert_fail@plt+0x3ed4>
   14dc4:	cmp	r6, #0
   14dc8:	beq	14e1c <__assert_fail@plt+0x3ea8>
   14dcc:	add	r0, sl, #60	; 0x3c
   14dd0:	bl	18954 <__assert_fail@plt+0x79e0>
   14dd4:	cmp	r0, #0
   14dd8:	bpl	14e30 <__assert_fail@plt+0x3ebc>
   14ddc:	b	14e34 <__assert_fail@plt+0x3ec0>
   14de0:	bl	10e78 <__errno_location@plt>
   14de4:	mov	r1, #2
   14de8:	str	r1, [r0]
   14dec:	mvn	r5, #0
   14df0:	cmp	r9, #0
   14df4:	beq	14d08 <__assert_fail@plt+0x3d94>
   14df8:	bl	10e78 <__errno_location@plt>
   14dfc:	ldr	r7, [r0]
   14e00:	mov	r6, r0
   14e04:	mov	r0, r4
   14e08:	bl	10f44 <close@plt>
   14e0c:	str	r7, [r6]
   14e10:	mov	r0, r5
   14e14:	sub	sp, fp, #28
   14e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e1c:	tst	r5, #4
   14e20:	bne	14e34 <__assert_fail@plt+0x3ec0>
   14e24:	cmp	r1, #0
   14e28:	bmi	14e34 <__assert_fail@plt+0x3ec0>
   14e2c:	mov	r0, r1
   14e30:	bl	10f44 <close@plt>
   14e34:	str	r4, [sl, #32]
   14e38:	mov	r5, #0
   14e3c:	mov	r0, r5
   14e40:	sub	sp, fp, #28
   14e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e48:	bl	10f38 <abort@plt>
   14e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e50:	add	fp, sp, #28
   14e54:	sub	sp, sp, #68	; 0x44
   14e58:	ldr	sl, [r0]
   14e5c:	mov	r4, r1
   14e60:	mov	r5, r0
   14e64:	str	r0, [fp, #-44]	; 0xffffffd4
   14e68:	ldr	r6, [sl, #12]
   14e6c:	cmp	r6, #0
   14e70:	beq	14eb8 <__assert_fail@plt+0x3f44>
   14e74:	mov	r0, r6
   14e78:	bl	10ee4 <dirfd@plt>
   14e7c:	cmn	r0, #1
   14e80:	str	r0, [fp, #-32]	; 0xffffffe0
   14e84:	ble	14eec <__assert_fail@plt+0x3f78>
   14e88:	mov	r1, r5
   14e8c:	str	r6, [sp, #12]
   14e90:	str	r4, [sp, #4]
   14e94:	mov	r7, #0
   14e98:	ldr	r0, [r1, #44]!	; 0x2c
   14e9c:	str	r1, [sp, #20]
   14ea0:	mvn	r1, #0
   14ea4:	cmp	r0, #0
   14ea8:	movweq	r1, #34464	; 0x86a0
   14eac:	movteq	r1, #1
   14eb0:	str	r1, [sp, #32]
   14eb4:	b	151e4 <__assert_fail@plt+0x4270>
   14eb8:	ldr	r3, [r5, #48]	; 0x30
   14ebc:	mvn	r0, #99	; 0x63
   14ec0:	mov	r2, #0
   14ec4:	and	r1, r3, #516	; 0x204
   14ec8:	cmp	r1, #512	; 0x200
   14ecc:	ldr	r1, [sl, #24]
   14ed0:	ldreq	r0, [r5, #32]
   14ed4:	tst	r3, #16
   14ed8:	beq	14f14 <__assert_fail@plt+0x3fa0>
   14edc:	tst	r3, #1
   14ee0:	bne	14f08 <__assert_fail@plt+0x3f94>
   14ee4:	mov	r2, #32768	; 0x8000
   14ee8:	b	14f14 <__assert_fail@plt+0x3fa0>
   14eec:	ldr	r0, [sl, #12]
   14ef0:	bl	10f5c <closedir@plt>
   14ef4:	mov	r6, #0
   14ef8:	str	r6, [sl, #12]
   14efc:	cmp	r4, #3
   14f00:	beq	14f5c <__assert_fail@plt+0x3fe8>
   14f04:	b	158f4 <__assert_fail@plt+0x4980>
   14f08:	ldr	r3, [sl, #48]	; 0x30
   14f0c:	cmp	r3, #0
   14f10:	movne	r2, #32768	; 0x8000
   14f14:	sub	r3, fp, #32
   14f18:	bl	18abc <__assert_fail@plt+0x7b48>
   14f1c:	cmp	r0, #0
   14f20:	str	r0, [sl, #12]
   14f24:	beq	14f50 <__assert_fail@plt+0x3fdc>
   14f28:	ldrh	r0, [sl, #56]	; 0x38
   14f2c:	cmp	r0, #11
   14f30:	bne	14f7c <__assert_fail@plt+0x4008>
   14f34:	mov	r0, r5
   14f38:	mov	r1, sl
   14f3c:	mov	r2, #0
   14f40:	bl	13d90 <__assert_fail@plt+0x2e1c>
   14f44:	strh	r0, [sl, #56]	; 0x38
   14f48:	mov	r7, r5
   14f4c:	b	15048 <__assert_fail@plt+0x40d4>
   14f50:	mov	r6, #0
   14f54:	cmp	r4, #3
   14f58:	bne	158f4 <__assert_fail@plt+0x4980>
   14f5c:	mov	r0, #4
   14f60:	strh	r0, [sl, #56]	; 0x38
   14f64:	bl	10e78 <__errno_location@plt>
   14f68:	ldr	r0, [r0]
   14f6c:	str	r0, [sl, #32]
   14f70:	mov	r0, r6
   14f74:	sub	sp, fp, #28
   14f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f7c:	ldrb	r0, [r5, #49]	; 0x31
   14f80:	mov	r7, r5
   14f84:	tst	r0, #1
   14f88:	beq	15048 <__assert_fail@plt+0x40d4>
   14f8c:	mov	r0, r7
   14f90:	mov	r1, sl
   14f94:	add	r8, sl, #64	; 0x40
   14f98:	bl	14ac0 <__assert_fail@plt+0x3b4c>
   14f9c:	mov	r0, r7
   14fa0:	mov	r1, sl
   14fa4:	mov	r2, #0
   14fa8:	bl	13d90 <__assert_fail@plt+0x2e1c>
   14fac:	ldrh	r0, [r7, #48]	; 0x30
   14fb0:	movw	r1, #258	; 0x102
   14fb4:	tst	r0, r1
   14fb8:	beq	1502c <__assert_fail@plt+0x40b8>
   14fbc:	mov	r0, #24
   14fc0:	bl	18bb8 <__assert_fail@plt+0x7c44>
   14fc4:	cmp	r0, #0
   14fc8:	beq	150f0 <__assert_fail@plt+0x417c>
   14fcc:	ldrd	r2, [r8]
   14fd0:	mov	r5, r0
   14fd4:	add	r0, sl, #160	; 0xa0
   14fd8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   14fdc:	stm	r5, {r2, r3}
   14fe0:	add	r2, r5, #8
   14fe4:	ldrd	r0, [r0]
   14fe8:	stm	r2, {r0, r1, sl}
   14fec:	mov	r1, r5
   14ff0:	ldr	r0, [r7, #56]	; 0x38
   14ff4:	bl	18628 <__assert_fail@plt+0x76b4>
   14ff8:	cmp	r0, r5
   14ffc:	beq	15048 <__assert_fail@plt+0x40d4>
   15000:	mov	r8, r0
   15004:	mov	r0, r5
   15008:	bl	136b8 <__assert_fail@plt+0x2744>
   1500c:	cmp	r8, #0
   15010:	beq	150f0 <__assert_fail@plt+0x417c>
   15014:	ldr	r7, [fp, #-44]	; 0xffffffd4
   15018:	ldr	r0, [r8, #16]
   1501c:	mov	r1, #2
   15020:	strh	r1, [sl, #56]	; 0x38
   15024:	str	r0, [sl]
   15028:	b	15048 <__assert_fail@plt+0x40d4>
   1502c:	ldr	r0, [r7, #56]	; 0x38
   15030:	mov	r1, r8
   15034:	bl	18c58 <__assert_fail@plt+0x7ce4>
   15038:	cmp	r0, #0
   1503c:	movne	r0, #2
   15040:	strhne	r0, [sl, #56]	; 0x38
   15044:	strne	sl, [sl]
   15048:	mov	r1, r7
   1504c:	mov	r5, r7
   15050:	str	r4, [sp, #4]
   15054:	str	r6, [sp, #12]
   15058:	ldr	r0, [r1, #44]!	; 0x2c
   1505c:	str	r1, [sp, #20]
   15060:	mvn	r1, #0
   15064:	cmp	r0, #0
   15068:	movweq	r1, #34464	; 0x86a0
   1506c:	movteq	r1, #1
   15070:	cmp	r4, #2
   15074:	str	r1, [sp, #32]
   15078:	bne	15094 <__assert_fail@plt+0x4120>
   1507c:	mov	r7, #1
   15080:	cmp	r4, #3
   15084:	bne	151e4 <__assert_fail@plt+0x4270>
   15088:	sub	r0, r4, #3
   1508c:	mov	r5, #0
   15090:	b	15128 <__assert_fail@plt+0x41b4>
   15094:	ldr	r0, [r5, #48]	; 0x30
   15098:	and	r0, r0, #56	; 0x38
   1509c:	cmp	r0, #24
   150a0:	bne	15120 <__assert_fail@plt+0x41ac>
   150a4:	ldr	r0, [sl, #84]	; 0x54
   150a8:	cmp	r0, #2
   150ac:	bne	15120 <__assert_fail@plt+0x41ac>
   150b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   150b4:	mov	r0, sl
   150b8:	bl	15d78 <__assert_fail@plt+0x4e04>
   150bc:	movw	r1, #26984	; 0x6968
   150c0:	cmp	r0, r1
   150c4:	ble	1510c <__assert_fail@plt+0x4198>
   150c8:	movw	r1, #26985	; 0x6969
   150cc:	cmp	r0, r1
   150d0:	movwne	r1, #16719	; 0x414f
   150d4:	movtne	r1, #21318	; 0x5346
   150d8:	cmpne	r0, r1
   150dc:	beq	15120 <__assert_fail@plt+0x41ac>
   150e0:	movw	r1, #40864	; 0x9fa0
   150e4:	cmp	r0, r1
   150e8:	beq	15120 <__assert_fail@plt+0x41ac>
   150ec:	b	1507c <__assert_fail@plt+0x4108>
   150f0:	bl	10e78 <__errno_location@plt>
   150f4:	mov	r1, #12
   150f8:	mov	r6, #0
   150fc:	str	r1, [r0]
   15100:	mov	r0, r6
   15104:	sub	sp, fp, #28
   15108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1510c:	movw	r1, #19778	; 0x4d42
   15110:	movt	r1, #65363	; 0xff53
   15114:	cmp	r0, r1
   15118:	cmpne	r0, #0
   1511c:	bne	1507c <__assert_fail@plt+0x4108>
   15120:	sub	r0, r4, #3
   15124:	mov	r5, #1
   15128:	clz	r0, r0
   1512c:	lsr	r7, r0, #5
   15130:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15134:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15138:	ldrb	r0, [r0, #49]	; 0x31
   1513c:	tst	r0, #2
   15140:	beq	1515c <__assert_fail@plt+0x41e8>
   15144:	mov	r0, r2
   15148:	movw	r1, #1030	; 0x406
   1514c:	mov	r2, #3
   15150:	bl	18d2c <__assert_fail@plt+0x7db8>
   15154:	mov	r2, r0
   15158:	str	r0, [fp, #-32]	; 0xffffffe0
   1515c:	cmp	r2, #0
   15160:	bmi	1517c <__assert_fail@plt+0x4208>
   15164:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15168:	mov	r1, sl
   1516c:	mov	r3, #0
   15170:	bl	14b9c <__assert_fail@plt+0x3c28>
   15174:	cmp	r0, #0
   15178:	beq	151dc <__assert_fail@plt+0x4268>
   1517c:	and	r0, r7, r5
   15180:	cmp	r0, #1
   15184:	bne	15194 <__assert_fail@plt+0x4220>
   15188:	bl	10e78 <__errno_location@plt>
   1518c:	ldr	r0, [r0]
   15190:	str	r0, [sl, #32]
   15194:	ldrh	r0, [sl, #58]	; 0x3a
   15198:	orr	r0, r0, #1
   1519c:	strh	r0, [sl, #58]	; 0x3a
   151a0:	ldr	r0, [sl, #12]
   151a4:	bl	10f5c <closedir@plt>
   151a8:	ldr	r5, [fp, #-44]	; 0xffffffd4
   151ac:	mov	r4, #0
   151b0:	str	r4, [sl, #12]
   151b4:	ldrb	r0, [r5, #49]	; 0x31
   151b8:	tst	r0, #2
   151bc:	beq	151d0 <__assert_fail@plt+0x425c>
   151c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   151c4:	cmp	r0, #0
   151c8:	bmi	151d0 <__assert_fail@plt+0x425c>
   151cc:	bl	10f44 <close@plt>
   151d0:	mov	r7, #1
   151d4:	str	r4, [sl, #12]
   151d8:	b	151e4 <__assert_fail@plt+0x4270>
   151dc:	ldr	r5, [fp, #-44]	; 0xffffffd4
   151e0:	mov	r7, #0
   151e4:	ldr	r0, [sl, #40]	; 0x28
   151e8:	ldr	r1, [sl, #28]
   151ec:	mov	r9, #0
   151f0:	sub	r2, r0, #1
   151f4:	ldrb	r1, [r1, r2]
   151f8:	cmp	r1, #47	; 0x2f
   151fc:	ldrb	r1, [r5, #48]	; 0x30
   15200:	moveq	r0, r2
   15204:	tst	r1, #4
   15208:	mov	r1, #0
   1520c:	str	r1, [sp, #40]	; 0x28
   15210:	beq	15228 <__assert_fail@plt+0x42b4>
   15214:	ldr	r1, [r5, #24]
   15218:	mov	r2, #47	; 0x2f
   1521c:	strb	r2, [r1, r0]!
   15220:	add	r1, r1, #1
   15224:	str	r1, [sp, #40]	; 0x28
   15228:	ldr	r6, [sl, #12]
   1522c:	add	r1, r0, #1
   15230:	str	r1, [fp, #-40]	; 0xffffffd8
   15234:	cmp	r6, #0
   15238:	beq	15600 <__assert_fail@plt+0x468c>
   1523c:	ldr	r0, [sl, #48]	; 0x30
   15240:	str	r7, [sp]
   15244:	mov	r7, #0
   15248:	add	r0, r0, #1
   1524c:	str	r0, [sp, #24]
   15250:	ldr	r0, [r5, #36]	; 0x24
   15254:	sub	r0, r0, r1
   15258:	str	r0, [sp, #44]	; 0x2c
   1525c:	bl	10e78 <__errno_location@plt>
   15260:	str	r0, [sp, #36]	; 0x24
   15264:	mov	r0, #0
   15268:	mov	r9, #0
   1526c:	mov	r4, #0
   15270:	str	sl, [sp, #28]
   15274:	str	r0, [sp, #48]	; 0x30
   15278:	mov	r0, #0
   1527c:	str	r0, [sp, #8]
   15280:	mov	r0, #0
   15284:	str	r0, [sp, #16]
   15288:	ldr	r0, [sp, #36]	; 0x24
   1528c:	str	r7, [r0]
   15290:	mov	r0, r6
   15294:	bl	10ec0 <readdir64@plt>
   15298:	cmp	r0, #0
   1529c:	beq	1567c <__assert_fail@plt+0x4708>
   152a0:	mov	r8, r0
   152a4:	ldrb	r0, [r5, #48]	; 0x30
   152a8:	tst	r0, #32
   152ac:	bne	152dc <__assert_fail@plt+0x4368>
   152b0:	ldrb	r0, [r8, #19]
   152b4:	cmp	r0, #46	; 0x2e
   152b8:	bne	152dc <__assert_fail@plt+0x4368>
   152bc:	ldrb	r0, [r8, #20]
   152c0:	cmp	r0, #0
   152c4:	beq	15598 <__assert_fail@plt+0x4624>
   152c8:	cmp	r0, #46	; 0x2e
   152cc:	bne	152dc <__assert_fail@plt+0x4368>
   152d0:	ldrb	r0, [r8, #21]
   152d4:	cmp	r0, #0
   152d8:	beq	15598 <__assert_fail@plt+0x4624>
   152dc:	str	r4, [fp, #-36]	; 0xffffffdc
   152e0:	add	r4, r8, #19
   152e4:	mov	r0, r4
   152e8:	bl	10e48 <strlen@plt>
   152ec:	mov	r5, r0
   152f0:	add	r0, r0, #176	; 0xb0
   152f4:	bic	r0, r0, #7
   152f8:	bl	18bb8 <__assert_fail@plt+0x7c44>
   152fc:	mov	r6, r0
   15300:	cmp	r0, #0
   15304:	beq	15960 <__assert_fail@plt+0x49ec>
   15308:	add	sl, r6, #168	; 0xa8
   1530c:	mov	r1, r4
   15310:	mov	r2, r5
   15314:	mov	r0, sl
   15318:	bl	10d70 <memcpy@plt>
   1531c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15320:	strb	r7, [sl, r5]
   15324:	str	r5, [r6, #52]	; 0x34
   15328:	mov	r0, #196608	; 0x30000
   1532c:	ldr	r1, [sp, #44]	; 0x2c
   15330:	str	r2, [r6, #44]	; 0x2c
   15334:	cmp	r5, r1
   15338:	ldr	r4, [r2, #24]
   1533c:	str	r7, [r6, #12]
   15340:	str	r7, [r6, #16]
   15344:	str	r7, [r6, #20]
   15348:	str	r0, [r6, #58]	; 0x3a
   1534c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15350:	str	r4, [r6, #28]
   15354:	str	r7, [r6, #32]
   15358:	add	r7, r5, r0
   1535c:	bcs	15370 <__assert_fail@plt+0x43fc>
   15360:	mov	r5, r2
   15364:	cmp	r7, r0
   15368:	bcs	153e8 <__assert_fail@plt+0x4474>
   1536c:	b	15840 <__assert_fail@plt+0x48cc>
   15370:	ldr	r1, [r2, #36]	; 0x24
   15374:	movw	r0, #257	; 0x101
   15378:	mov	r5, r2
   1537c:	add	r0, r7, r0
   15380:	adds	r1, r0, r1
   15384:	bcs	1592c <__assert_fail@plt+0x49b8>
   15388:	mov	r0, r4
   1538c:	str	r1, [r5, #36]	; 0x24
   15390:	bl	18be8 <__assert_fail@plt+0x7c74>
   15394:	cmp	r0, #0
   15398:	beq	1594c <__assert_fail@plt+0x49d8>
   1539c:	cmp	r0, r4
   153a0:	str	r0, [r5, #24]
   153a4:	beq	153cc <__assert_fail@plt+0x4458>
   153a8:	ldrb	r1, [r5, #48]	; 0x30
   153ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   153b0:	tst	r1, #4
   153b4:	ldr	r1, [sp, #40]	; 0x28
   153b8:	addne	r1, r0, r2
   153bc:	mov	r0, #1
   153c0:	str	r1, [sp, #40]	; 0x28
   153c4:	str	r0, [sp, #16]
   153c8:	b	153d0 <__assert_fail@plt+0x445c>
   153cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   153d0:	ldr	r0, [r5, #36]	; 0x24
   153d4:	sub	r0, r0, r2
   153d8:	str	r0, [sp, #44]	; 0x2c
   153dc:	mov	r0, r2
   153e0:	cmp	r7, r0
   153e4:	bcc	15840 <__assert_fail@plt+0x48cc>
   153e8:	ldr	r0, [sp, #24]
   153ec:	add	r4, r6, #112	; 0x70
   153f0:	str	r0, [r6, #48]	; 0x30
   153f4:	ldr	r0, [r5]
   153f8:	str	r7, [r6, #40]	; 0x28
   153fc:	str	r0, [r6, #4]
   15400:	ldrd	r0, [r8]
   15404:	strd	r0, [r4, #48]	; 0x30
   15408:	ldrb	r0, [r5, #48]	; 0x30
   1540c:	tst	r0, #4
   15410:	bne	1541c <__assert_fail@plt+0x44a8>
   15414:	str	sl, [r6, #24]
   15418:	b	15438 <__assert_fail@plt+0x44c4>
   1541c:	ldr	r0, [r6, #28]
   15420:	ldr	r1, [r6, #52]	; 0x34
   15424:	str	r0, [r6, #24]
   15428:	ldr	r0, [sp, #40]	; 0x28
   1542c:	add	r2, r1, #1
   15430:	mov	r1, sl
   15434:	bl	10d58 <memmove@plt>
   15438:	ldr	r0, [r5, #44]	; 0x2c
   1543c:	ldr	r2, [r5, #48]	; 0x30
   15440:	ldr	sl, [sp, #28]
   15444:	mov	r7, #0
   15448:	cmp	r0, #0
   1544c:	beq	154f4 <__assert_fail@plt+0x4580>
   15450:	ands	r0, r2, #1024	; 0x400
   15454:	bne	154f4 <__assert_fail@plt+0x4580>
   15458:	mov	r0, r5
   1545c:	mov	r1, r6
   15460:	mov	r2, #0
   15464:	bl	13d90 <__assert_fail@plt+0x2e1c>
   15468:	strh	r0, [r6, #56]	; 0x38
   1546c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   15470:	cmp	r9, #0
   15474:	str	r7, [r6, #8]
   15478:	beq	15574 <__assert_fail@plt+0x4600>
   1547c:	ldr	r0, [sp, #48]	; 0x30
   15480:	str	r6, [r0, #8]
   15484:	movw	r0, #10000	; 0x2710
   15488:	cmp	r4, r0
   1548c:	bne	15584 <__assert_fail@plt+0x4610>
   15490:	ldr	r0, [sp, #20]
   15494:	ldr	r0, [r0]
   15498:	cmp	r0, #0
   1549c:	bne	15584 <__assert_fail@plt+0x4610>
   154a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   154a4:	mov	r0, sl
   154a8:	bl	15d78 <__assert_fail@plt+0x4e04>
   154ac:	mov	r1, #0
   154b0:	str	r1, [sp, #8]
   154b4:	movw	r1, #19778	; 0x4d42
   154b8:	movt	r1, #65363	; 0xff53
   154bc:	cmp	r0, r1
   154c0:	movwne	r1, #26985	; 0x6969
   154c4:	cmpne	r0, r1
   154c8:	beq	15584 <__assert_fail@plt+0x4610>
   154cc:	movw	r1, #6548	; 0x1994
   154d0:	movt	r1, #258	; 0x102
   154d4:	cmp	r0, r1
   154d8:	movne	r0, #1
   154dc:	strne	r0, [sp, #8]
   154e0:	ldr	r0, [sp, #32]
   154e4:	add	r4, r4, #1
   154e8:	cmp	r0, r4
   154ec:	bhi	15594 <__assert_fail@plt+0x4620>
   154f0:	b	155a4 <__assert_fail@plt+0x4630>
   154f4:	ldrb	r3, [r8, #18]
   154f8:	mov	r0, #0
   154fc:	tst	r2, #8
   15500:	mov	r1, #0
   15504:	beq	15528 <__assert_fail@plt+0x45b4>
   15508:	orr	r1, r3, #4
   1550c:	cmp	r1, #4
   15510:	mov	r1, #0
   15514:	beq	15528 <__assert_fail@plt+0x45b4>
   15518:	eor	r1, r3, #10
   1551c:	and	r2, r2, #16
   15520:	orrs	r1, r2, r1
   15524:	movwne	r1, #1
   15528:	mov	r2, #11
   1552c:	strh	r2, [r6, #56]	; 0x38
   15530:	sub	r2, r3, #1
   15534:	uxtb	r3, r2
   15538:	cmp	r3, #11
   1553c:	bhi	15550 <__assert_fail@plt+0x45dc>
   15540:	sxtb	r0, r2
   15544:	movw	r2, #37672	; 0x9328
   15548:	movt	r2, #1
   1554c:	ldr	r0, [r2, r0, lsl #2]
   15550:	cmp	r1, #0
   15554:	str	r0, [r6, #80]	; 0x50
   15558:	mov	r0, #2
   1555c:	movwne	r0, #1
   15560:	stm	r4, {r0, r7}
   15564:	ldr	r4, [fp, #-36]	; 0xffffffdc
   15568:	cmp	r9, #0
   1556c:	str	r7, [r6, #8]
   15570:	bne	1547c <__assert_fail@plt+0x4508>
   15574:	mov	r9, r6
   15578:	movw	r0, #10000	; 0x2710
   1557c:	cmp	r4, r0
   15580:	beq	15490 <__assert_fail@plt+0x451c>
   15584:	ldr	r0, [sp, #32]
   15588:	add	r4, r4, #1
   1558c:	cmp	r0, r4
   15590:	bls	155a4 <__assert_fail@plt+0x4630>
   15594:	str	r6, [sp, #48]	; 0x30
   15598:	ldr	r6, [sl, #12]
   1559c:	cmp	r6, #0
   155a0:	bne	15288 <__assert_fail@plt+0x4314>
   155a4:	ldr	r0, [sp, #16]
   155a8:	ldr	r7, [sp]
   155ac:	ldr	r6, [sp, #8]
   155b0:	tst	r0, #1
   155b4:	beq	156d0 <__assert_fail@plt+0x475c>
   155b8:	ldr	r1, [r5, #4]
   155bc:	ldr	r0, [r5, #24]
   155c0:	cmp	r1, #0
   155c4:	bne	155dc <__assert_fail@plt+0x4668>
   155c8:	b	15618 <__assert_fail@plt+0x46a4>
   155cc:	str	r0, [r1, #28]
   155d0:	ldr	r1, [r1, #8]
   155d4:	cmp	r1, #0
   155d8:	beq	15618 <__assert_fail@plt+0x46a4>
   155dc:	ldr	r2, [r1, #24]
   155e0:	add	r3, r1, #168	; 0xa8
   155e4:	cmp	r2, r3
   155e8:	beq	155cc <__assert_fail@plt+0x4658>
   155ec:	ldr	r3, [r1, #28]
   155f0:	sub	r2, r2, r3
   155f4:	add	r2, r0, r2
   155f8:	str	r2, [r1, #24]
   155fc:	b	155cc <__assert_fail@plt+0x4658>
   15600:	mov	r4, #0
   15604:	mov	r6, #0
   15608:	ldrb	r0, [r5, #48]	; 0x30
   1560c:	tst	r0, #4
   15610:	bne	156dc <__assert_fail@plt+0x4768>
   15614:	b	15704 <__assert_fail@plt+0x4790>
   15618:	ldr	r1, [r9, #48]	; 0x30
   1561c:	cmp	r1, #0
   15620:	bmi	156d0 <__assert_fail@plt+0x475c>
   15624:	mov	r1, r9
   15628:	ldr	r2, [r1, #24]
   1562c:	add	r3, r1, #168	; 0xa8
   15630:	cmp	r2, r3
   15634:	bne	15668 <__assert_fail@plt+0x46f4>
   15638:	str	r0, [r1, #28]
   1563c:	ldr	r2, [r1, #8]
   15640:	cmp	r2, #0
   15644:	ldreq	r2, [r1, #4]
   15648:	ldr	r1, [r2, #48]	; 0x30
   1564c:	cmn	r1, #1
   15650:	mov	r1, r2
   15654:	ble	156d0 <__assert_fail@plt+0x475c>
   15658:	ldr	r2, [r1, #24]
   1565c:	add	r3, r1, #168	; 0xa8
   15660:	cmp	r2, r3
   15664:	beq	15638 <__assert_fail@plt+0x46c4>
   15668:	ldr	r3, [r1, #28]
   1566c:	sub	r2, r2, r3
   15670:	add	r2, r0, r2
   15674:	str	r2, [r1, #24]
   15678:	b	15638 <__assert_fail@plt+0x46c4>
   1567c:	ldr	r0, [sp, #36]	; 0x24
   15680:	ldr	r0, [r0]
   15684:	cmp	r0, #0
   15688:	beq	156a4 <__assert_fail@plt+0x4730>
   1568c:	str	r0, [sl, #32]
   15690:	ldr	r0, [sp, #12]
   15694:	orrs	r0, r0, r4
   15698:	mov	r0, #4
   1569c:	movwne	r0, #7
   156a0:	strh	r0, [sl, #56]	; 0x38
   156a4:	ldr	r0, [sl, #12]
   156a8:	ldr	r6, [sp, #8]
   156ac:	cmp	r0, #0
   156b0:	beq	156c0 <__assert_fail@plt+0x474c>
   156b4:	bl	10f5c <closedir@plt>
   156b8:	mov	r0, #0
   156bc:	str	r0, [sl, #12]
   156c0:	ldr	r0, [sp, #16]
   156c4:	ldr	r7, [sp]
   156c8:	tst	r0, #1
   156cc:	bne	155b8 <__assert_fail@plt+0x4644>
   156d0:	ldrb	r0, [r5, #48]	; 0x30
   156d4:	tst	r0, #4
   156d8:	beq	15704 <__assert_fail@plt+0x4790>
   156dc:	ldr	r2, [sp, #40]	; 0x28
   156e0:	ldr	r0, [r5, #36]	; 0x24
   156e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   156e8:	cmp	r3, r0
   156ec:	sub	r1, r2, #1
   156f0:	mov	r0, #0
   156f4:	moveq	r2, r1
   156f8:	cmp	r4, #0
   156fc:	moveq	r2, r1
   15700:	strb	r0, [r2]
   15704:	ldr	r0, [sp, #12]
   15708:	cmp	r0, #0
   1570c:	movwne	r0, #1
   15710:	orrs	r0, r0, r7
   15714:	beq	1577c <__assert_fail@plt+0x4808>
   15718:	cmp	r4, #0
   1571c:	bne	157bc <__assert_fail@plt+0x4848>
   15720:	ldr	r0, [sp, #4]
   15724:	cmp	r0, #3
   15728:	bne	15740 <__assert_fail@plt+0x47cc>
   1572c:	ldrh	r0, [sl, #56]	; 0x38
   15730:	cmp	r0, #4
   15734:	cmpne	r0, #7
   15738:	movne	r0, #6
   1573c:	strhne	r0, [sl, #56]	; 0x38
   15740:	mov	r6, #0
   15744:	cmp	r9, #0
   15748:	bne	15764 <__assert_fail@plt+0x47f0>
   1574c:	b	158f4 <__assert_fail@plt+0x4980>
   15750:	mov	r0, r9
   15754:	bl	136b8 <__assert_fail@plt+0x2744>
   15758:	cmp	r4, #0
   1575c:	mov	r9, r4
   15760:	beq	158f4 <__assert_fail@plt+0x4980>
   15764:	ldrd	r4, [r9, #8]
   15768:	cmp	r5, #0
   1576c:	beq	15750 <__assert_fail@plt+0x47dc>
   15770:	mov	r0, r5
   15774:	bl	10f5c <closedir@plt>
   15778:	b	15750 <__assert_fail@plt+0x47dc>
   1577c:	ldr	r0, [sp, #4]
   15780:	cmp	r0, #1
   15784:	cmpne	r4, #0
   15788:	bne	157bc <__assert_fail@plt+0x4848>
   1578c:	ldr	r0, [sl, #48]	; 0x30
   15790:	cmp	r0, #0
   15794:	beq	158c4 <__assert_fail@plt+0x4950>
   15798:	ldr	r1, [sl, #4]
   1579c:	movw	r3, #37666	; 0x9322
   157a0:	mov	r0, r5
   157a4:	mvn	r2, #0
   157a8:	movt	r3, #1
   157ac:	bl	14b9c <__assert_fail@plt+0x3c28>
   157b0:	cmp	r0, #0
   157b4:	bne	158d4 <__assert_fail@plt+0x4960>
   157b8:	b	15718 <__assert_fail@plt+0x47a4>
   157bc:	tst	r6, #1
   157c0:	beq	157f8 <__assert_fail@plt+0x4884>
   157c4:	movw	r0, #23872	; 0x5d40
   157c8:	mov	r1, r9
   157cc:	mov	r2, r4
   157d0:	movt	r0, #1
   157d4:	str	r0, [r5, #44]	; 0x2c
   157d8:	mov	r0, r5
   157dc:	bl	13f28 <__assert_fail@plt+0x2fb4>
   157e0:	mov	r6, r0
   157e4:	mov	r0, #0
   157e8:	str	r0, [r5, #44]	; 0x2c
   157ec:	mov	r0, r6
   157f0:	sub	sp, fp, #28
   157f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f8:	cmp	r4, #2
   157fc:	bcc	15830 <__assert_fail@plt+0x48bc>
   15800:	ldr	r0, [sp, #20]
   15804:	ldr	r0, [r0]
   15808:	cmp	r0, #0
   1580c:	beq	15830 <__assert_fail@plt+0x48bc>
   15810:	mov	r0, r5
   15814:	mov	r1, r9
   15818:	mov	r2, r4
   1581c:	bl	13f28 <__assert_fail@plt+0x2fb4>
   15820:	mov	r6, r0
   15824:	mov	r0, r6
   15828:	sub	sp, fp, #28
   1582c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15830:	mov	r6, r9
   15834:	mov	r0, r6
   15838:	sub	sp, fp, #28
   1583c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15840:	mov	r0, r6
   15844:	bl	136b8 <__assert_fail@plt+0x2744>
   15848:	ldr	r7, [sp, #28]
   1584c:	cmp	r9, #0
   15850:	bne	1586c <__assert_fail@plt+0x48f8>
   15854:	b	15884 <__assert_fail@plt+0x4910>
   15858:	mov	r0, r9
   1585c:	bl	136b8 <__assert_fail@plt+0x2744>
   15860:	cmp	r4, #0
   15864:	mov	r9, r4
   15868:	beq	15884 <__assert_fail@plt+0x4910>
   1586c:	ldrd	r4, [r9, #8]
   15870:	cmp	r5, #0
   15874:	beq	15858 <__assert_fail@plt+0x48e4>
   15878:	mov	r0, r5
   1587c:	bl	10f5c <closedir@plt>
   15880:	b	15858 <__assert_fail@plt+0x48e4>
   15884:	ldr	r0, [r7, #12]
   15888:	bl	10f5c <closedir@plt>
   1588c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15890:	mov	r0, #7
   15894:	mov	r6, #0
   15898:	strh	r0, [r7, #56]	; 0x38
   1589c:	str	r6, [r7, #12]
   158a0:	ldr	r0, [r1, #48]	; 0x30
   158a4:	orr	r0, r0, #8192	; 0x2000
   158a8:	str	r0, [r1, #48]	; 0x30
   158ac:	ldr	r1, [sp, #36]	; 0x24
   158b0:	mov	r0, #36	; 0x24
   158b4:	str	r0, [r1]
   158b8:	mov	r0, r6
   158bc:	sub	sp, fp, #28
   158c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158c4:	mov	r0, r5
   158c8:	bl	159e4 <__assert_fail@plt+0x4a70>
   158cc:	cmp	r0, #0
   158d0:	beq	15718 <__assert_fail@plt+0x47a4>
   158d4:	mov	r0, #7
   158d8:	mov	r6, #0
   158dc:	cmp	r9, #0
   158e0:	strh	r0, [sl, #56]	; 0x38
   158e4:	ldr	r0, [r5, #48]	; 0x30
   158e8:	orr	r0, r0, #8192	; 0x2000
   158ec:	str	r0, [r5, #48]	; 0x30
   158f0:	bne	15914 <__assert_fail@plt+0x49a0>
   158f4:	mov	r0, r6
   158f8:	sub	sp, fp, #28
   158fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15900:	mov	r0, r9
   15904:	bl	136b8 <__assert_fail@plt+0x2744>
   15908:	cmp	r4, #0
   1590c:	mov	r9, r4
   15910:	beq	158f4 <__assert_fail@plt+0x4980>
   15914:	ldrd	r4, [r9, #8]
   15918:	cmp	r5, #0
   1591c:	beq	15900 <__assert_fail@plt+0x498c>
   15920:	mov	r0, r5
   15924:	bl	10f5c <closedir@plt>
   15928:	b	15900 <__assert_fail@plt+0x498c>
   1592c:	mov	r0, r4
   15930:	bl	136b8 <__assert_fail@plt+0x2744>
   15934:	ldr	r1, [sp, #36]	; 0x24
   15938:	mov	r0, #0
   1593c:	str	r0, [r5, #24]
   15940:	mov	r0, #36	; 0x24
   15944:	str	r0, [r1]
   15948:	b	1595c <__assert_fail@plt+0x49e8>
   1594c:	ldr	r0, [r5, #24]
   15950:	bl	136b8 <__assert_fail@plt+0x2744>
   15954:	mov	r0, #0
   15958:	str	r0, [r5, #24]
   1595c:	ldr	sl, [sp, #28]
   15960:	ldr	r0, [sp, #36]	; 0x24
   15964:	ldr	r4, [r0]
   15968:	mov	r0, r6
   1596c:	bl	136b8 <__assert_fail@plt+0x2744>
   15970:	ldr	r5, [fp, #-44]	; 0xffffffd4
   15974:	cmp	r9, #0
   15978:	bne	15994 <__assert_fail@plt+0x4a20>
   1597c:	b	159ac <__assert_fail@plt+0x4a38>
   15980:	mov	r0, r9
   15984:	bl	136b8 <__assert_fail@plt+0x2744>
   15988:	cmp	r6, #0
   1598c:	mov	r9, r6
   15990:	beq	159ac <__assert_fail@plt+0x4a38>
   15994:	ldrd	r6, [r9, #8]
   15998:	cmp	r7, #0
   1599c:	beq	15980 <__assert_fail@plt+0x4a0c>
   159a0:	mov	r0, r7
   159a4:	bl	10f5c <closedir@plt>
   159a8:	b	15980 <__assert_fail@plt+0x4a0c>
   159ac:	ldr	r0, [sl, #12]
   159b0:	bl	10f5c <closedir@plt>
   159b4:	mov	r0, #7
   159b8:	mov	r6, #0
   159bc:	strh	r0, [sl, #56]	; 0x38
   159c0:	str	r6, [sl, #12]
   159c4:	ldr	r0, [r5, #48]	; 0x30
   159c8:	orr	r0, r0, #8192	; 0x2000
   159cc:	str	r0, [r5, #48]	; 0x30
   159d0:	ldr	r0, [sp, #36]	; 0x24
   159d4:	str	r4, [r0]
   159d8:	mov	r0, r6
   159dc:	sub	sp, fp, #28
   159e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159e4:	push	{r4, r5, fp, lr}
   159e8:	add	fp, sp, #8
   159ec:	mov	r5, r0
   159f0:	ldr	r0, [r0, #48]	; 0x30
   159f4:	mov	r4, #0
   159f8:	tst	r0, #4
   159fc:	bne	15a40 <__assert_fail@plt+0x4acc>
   15a00:	tst	r0, #512	; 0x200
   15a04:	bne	15a20 <__assert_fail@plt+0x4aac>
   15a08:	ldr	r0, [r5, #28]
   15a0c:	bl	10efc <fchdir@plt>
   15a10:	cmp	r0, #0
   15a14:	mov	r4, r0
   15a18:	movwne	r4, #1
   15a1c:	b	15a40 <__assert_fail@plt+0x4acc>
   15a20:	ldr	r1, [r5, #32]
   15a24:	add	r0, r5, #60	; 0x3c
   15a28:	bl	18954 <__assert_fail@plt+0x79e0>
   15a2c:	cmp	r0, #0
   15a30:	bmi	15a38 <__assert_fail@plt+0x4ac4>
   15a34:	bl	10f44 <close@plt>
   15a38:	mvn	r0, #99	; 0x63
   15a3c:	str	r0, [r5, #32]
   15a40:	add	r5, r5, #60	; 0x3c
   15a44:	mov	r0, r5
   15a48:	bl	1894c <__assert_fail@plt+0x79d8>
   15a4c:	cmp	r0, #0
   15a50:	bne	15a78 <__assert_fail@plt+0x4b04>
   15a54:	mov	r0, r5
   15a58:	bl	189a0 <__assert_fail@plt+0x7a2c>
   15a5c:	cmp	r0, #0
   15a60:	bmi	15a44 <__assert_fail@plt+0x4ad0>
   15a64:	bl	10f44 <close@plt>
   15a68:	mov	r0, r5
   15a6c:	bl	1894c <__assert_fail@plt+0x79d8>
   15a70:	cmp	r0, #0
   15a74:	beq	15a54 <__assert_fail@plt+0x4ae0>
   15a78:	mov	r0, r4
   15a7c:	pop	{r4, r5, fp, pc}
   15a80:	push	{fp, lr}
   15a84:	mov	fp, sp
   15a88:	cmp	r2, #5
   15a8c:	bcc	15aa4 <__assert_fail@plt+0x4b30>
   15a90:	bl	10e78 <__errno_location@plt>
   15a94:	mov	r1, #22
   15a98:	str	r1, [r0]
   15a9c:	mov	r0, #1
   15aa0:	pop	{fp, pc}
   15aa4:	mov	r0, #0
   15aa8:	strh	r2, [r1, #60]	; 0x3c
   15aac:	pop	{fp, pc}
   15ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ab4:	add	fp, sp, #28
   15ab8:	sub	sp, sp, #4
   15abc:	mov	r9, r0
   15ac0:	mvn	r0, #4096	; 0x1000
   15ac4:	tst	r1, r0
   15ac8:	beq	15ae8 <__assert_fail@plt+0x4b74>
   15acc:	bl	10e78 <__errno_location@plt>
   15ad0:	mov	r1, #22
   15ad4:	mov	r5, #0
   15ad8:	str	r1, [r0]
   15adc:	mov	r0, r5
   15ae0:	sub	sp, fp, #28
   15ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ae8:	ldr	r8, [r9]
   15aec:	mov	r7, r1
   15af0:	bl	10e78 <__errno_location@plt>
   15af4:	mov	r5, #0
   15af8:	mov	sl, r0
   15afc:	str	r5, [r0]
   15b00:	ldrb	r0, [r9, #49]	; 0x31
   15b04:	tst	r0, #32
   15b08:	bne	15b20 <__assert_fail@plt+0x4bac>
   15b0c:	ldrh	r0, [r8, #56]	; 0x38
   15b10:	cmp	r0, #1
   15b14:	beq	15b2c <__assert_fail@plt+0x4bb8>
   15b18:	cmp	r0, #9
   15b1c:	ldreq	r5, [r8, #8]
   15b20:	mov	r0, r5
   15b24:	sub	sp, fp, #28
   15b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b2c:	ldr	r6, [r9, #4]
   15b30:	cmp	r6, #0
   15b34:	bne	15b50 <__assert_fail@plt+0x4bdc>
   15b38:	b	15b6c <__assert_fail@plt+0x4bf8>
   15b3c:	mov	r0, r6
   15b40:	bl	136b8 <__assert_fail@plt+0x2744>
   15b44:	cmp	r4, #0
   15b48:	mov	r6, r4
   15b4c:	beq	15b6c <__assert_fail@plt+0x4bf8>
   15b50:	ldr	r1, [r6, #12]
   15b54:	ldr	r4, [r6, #8]
   15b58:	cmp	r1, #0
   15b5c:	beq	15b3c <__assert_fail@plt+0x4bc8>
   15b60:	mov	r0, r1
   15b64:	bl	10f5c <closedir@plt>
   15b68:	b	15b3c <__assert_fail@plt+0x4bc8>
   15b6c:	mov	r4, #1
   15b70:	cmp	r7, #4096	; 0x1000
   15b74:	bne	15b88 <__assert_fail@plt+0x4c14>
   15b78:	ldr	r0, [r9, #48]	; 0x30
   15b7c:	mov	r4, #2
   15b80:	orr	r0, r0, #4096	; 0x1000
   15b84:	str	r0, [r9, #48]	; 0x30
   15b88:	ldr	r0, [r8, #48]	; 0x30
   15b8c:	cmp	r0, #0
   15b90:	bne	15be8 <__assert_fail@plt+0x4c74>
   15b94:	ldr	r0, [r8, #24]
   15b98:	ldrb	r0, [r0]
   15b9c:	cmp	r0, #47	; 0x2f
   15ba0:	beq	15be8 <__assert_fail@plt+0x4c74>
   15ba4:	ldr	r0, [r9, #48]	; 0x30
   15ba8:	tst	r0, #4
   15bac:	bne	15be8 <__assert_fail@plt+0x4c74>
   15bb0:	mov	r1, #32768	; 0x8000
   15bb4:	tst	r0, #512	; 0x200
   15bb8:	and	r1, r1, r0, lsl #11
   15bbc:	orr	r1, r1, #18688	; 0x4900
   15bc0:	orr	r2, r1, #524288	; 0x80000
   15bc4:	bne	15c08 <__assert_fail@plt+0x4c94>
   15bc8:	movw	r0, #37667	; 0x9323
   15bcc:	mov	r1, r2
   15bd0:	movt	r0, #1
   15bd4:	bl	18f0c <__assert_fail@plt+0x7f98>
   15bd8:	mov	r8, r0
   15bdc:	cmn	r0, #1
   15be0:	bgt	15c24 <__assert_fail@plt+0x4cb0>
   15be4:	b	15c6c <__assert_fail@plt+0x4cf8>
   15be8:	mov	r0, r9
   15bec:	mov	r1, r4
   15bf0:	bl	14e4c <__assert_fail@plt+0x3ed8>
   15bf4:	mov	r5, r0
   15bf8:	str	r0, [r9, #4]
   15bfc:	mov	r0, r5
   15c00:	sub	sp, fp, #28
   15c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c08:	ldr	r0, [r9, #32]
   15c0c:	movw	r1, #37667	; 0x9323
   15c10:	movt	r1, #1
   15c14:	bl	18a84 <__assert_fail@plt+0x7b10>
   15c18:	mov	r8, r0
   15c1c:	cmn	r0, #1
   15c20:	ble	15c6c <__assert_fail@plt+0x4cf8>
   15c24:	mov	r0, r9
   15c28:	mov	r1, r4
   15c2c:	bl	14e4c <__assert_fail@plt+0x3ed8>
   15c30:	str	r0, [r9, #4]
   15c34:	ldrb	r0, [r9, #49]	; 0x31
   15c38:	tst	r0, #2
   15c3c:	bne	15c80 <__assert_fail@plt+0x4d0c>
   15c40:	mov	r0, r8
   15c44:	bl	10efc <fchdir@plt>
   15c48:	cmp	r0, #0
   15c4c:	beq	15cbc <__assert_fail@plt+0x4d48>
   15c50:	ldr	r4, [sl]
   15c54:	mov	r0, r8
   15c58:	bl	10f44 <close@plt>
   15c5c:	str	r4, [sl]
   15c60:	mov	r0, r5
   15c64:	sub	sp, fp, #28
   15c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c6c:	mov	r5, #0
   15c70:	str	r5, [r9, #4]
   15c74:	mov	r0, r5
   15c78:	sub	sp, fp, #28
   15c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c80:	ldr	r1, [r9, #32]
   15c84:	cmp	r1, r8
   15c88:	bne	15c94 <__assert_fail@plt+0x4d20>
   15c8c:	cmn	r1, #100	; 0x64
   15c90:	bne	15cd4 <__assert_fail@plt+0x4d60>
   15c94:	add	r0, r9, #60	; 0x3c
   15c98:	bl	18954 <__assert_fail@plt+0x79e0>
   15c9c:	cmp	r0, #0
   15ca0:	bmi	15ca8 <__assert_fail@plt+0x4d34>
   15ca4:	bl	10f44 <close@plt>
   15ca8:	str	r8, [r9, #32]
   15cac:	ldr	r5, [r9, #4]
   15cb0:	mov	r0, r5
   15cb4:	sub	sp, fp, #28
   15cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cbc:	mov	r0, r8
   15cc0:	bl	10f44 <close@plt>
   15cc4:	ldr	r5, [r9, #4]
   15cc8:	mov	r0, r5
   15ccc:	sub	sp, fp, #28
   15cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd4:	bl	10f38 <abort@plt>
   15cd8:	push	{fp, lr}
   15cdc:	mov	fp, sp
   15ce0:	mov	r2, r1
   15ce4:	ldrd	r0, [r0, #8]
   15ce8:	mov	r3, #0
   15cec:	bl	19028 <__assert_fail@plt+0x80b4>
   15cf0:	mov	r0, r2
   15cf4:	pop	{fp, pc}
   15cf8:	push	{r4, r5, fp, lr}
   15cfc:	add	fp, sp, #8
   15d00:	ldrd	r2, [r1, #8]
   15d04:	ldrd	r4, [r0, #8]
   15d08:	eor	r3, r5, r3
   15d0c:	eor	r2, r4, r2
   15d10:	orrs	r2, r2, r3
   15d14:	mov	r2, #0
   15d18:	bne	15d38 <__assert_fail@plt+0x4dc4>
   15d1c:	ldrd	r2, [r1]
   15d20:	ldrd	r0, [r0]
   15d24:	eor	r1, r1, r3
   15d28:	eor	r0, r0, r2
   15d2c:	orr	r0, r0, r1
   15d30:	clz	r0, r0
   15d34:	lsr	r2, r0, #5
   15d38:	mov	r0, r2
   15d3c:	pop	{r4, r5, fp, pc}
   15d40:	push	{r4, r5, fp, lr}
   15d44:	add	fp, sp, #8
   15d48:	ldr	r0, [r0]
   15d4c:	ldrd	r2, [r0, #160]	; 0xa0
   15d50:	ldr	r0, [r1]
   15d54:	ldrd	r4, [r0, #160]	; 0xa0
   15d58:	mov	r0, #0
   15d5c:	subs	r1, r4, r2
   15d60:	sbcs	r1, r5, r3
   15d64:	movwcc	r0, #1
   15d68:	subs	r1, r2, r4
   15d6c:	sbcs	r1, r3, r5
   15d70:	subcc	r0, r0, #1
   15d74:	pop	{r4, r5, fp, pc}
   15d78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15d7c:	add	fp, sp, #24
   15d80:	sub	sp, sp, #96	; 0x60
   15d84:	ldr	r7, [r0, #44]	; 0x2c
   15d88:	mov	r4, r0
   15d8c:	mov	r5, #0
   15d90:	ldrb	r0, [r7, #49]	; 0x31
   15d94:	tst	r0, #2
   15d98:	beq	15e48 <__assert_fail@plt+0x4ed4>
   15d9c:	ldr	r6, [r7, #52]	; 0x34
   15da0:	mov	r9, r1
   15da4:	cmp	r6, #0
   15da8:	bne	15de8 <__assert_fail@plt+0x4e74>
   15dac:	movw	r0, #14008	; 0x36b8
   15db0:	movw	r2, #24244	; 0x5eb4
   15db4:	movw	r3, #24276	; 0x5ed4
   15db8:	mov	r1, #0
   15dbc:	mov	r8, #0
   15dc0:	movt	r0, #1
   15dc4:	movt	r2, #1
   15dc8:	movt	r3, #1
   15dcc:	str	r0, [sp]
   15dd0:	mov	r0, #13
   15dd4:	bl	179cc <__assert_fail@plt+0x6a58>
   15dd8:	mov	r6, r0
   15ddc:	cmp	r0, #0
   15de0:	str	r0, [r7, #52]	; 0x34
   15de4:	beq	15e28 <__assert_fail@plt+0x4eb4>
   15de8:	ldrd	r0, [r4, #64]	; 0x40
   15dec:	str	r1, [sp, #12]
   15df0:	str	r0, [sp, #8]
   15df4:	add	r1, sp, #8
   15df8:	mov	r0, r6
   15dfc:	bl	176f8 <__assert_fail@plt+0x6784>
   15e00:	cmp	r0, #0
   15e04:	beq	15e18 <__assert_fail@plt+0x4ea4>
   15e08:	ldr	r5, [r0, #8]
   15e0c:	mov	r0, r5
   15e10:	sub	sp, fp, #24
   15e14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e18:	mov	r8, #1
   15e1c:	cmp	r9, #0
   15e20:	bpl	15e34 <__assert_fail@plt+0x4ec0>
   15e24:	b	15e48 <__assert_fail@plt+0x4ed4>
   15e28:	mov	r6, #0
   15e2c:	cmp	r9, #0
   15e30:	bmi	15e48 <__assert_fail@plt+0x4ed4>
   15e34:	add	r1, sp, #8
   15e38:	mov	r0, r9
   15e3c:	bl	10cf8 <fstatfs64@plt>
   15e40:	cmp	r0, #0
   15e44:	beq	15e54 <__assert_fail@plt+0x4ee0>
   15e48:	mov	r0, r5
   15e4c:	sub	sp, fp, #24
   15e50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e54:	cmp	r8, #0
   15e58:	beq	15ea4 <__assert_fail@plt+0x4f30>
   15e5c:	mov	r0, #16
   15e60:	bl	18bb8 <__assert_fail@plt+0x7c44>
   15e64:	cmp	r0, #0
   15e68:	beq	15ea4 <__assert_fail@plt+0x4f30>
   15e6c:	mov	r5, r0
   15e70:	ldrd	r0, [r4, #64]	; 0x40
   15e74:	ldr	r2, [sp, #8]
   15e78:	stm	r5, {r0, r1, r2}
   15e7c:	mov	r0, r6
   15e80:	mov	r1, r5
   15e84:	bl	18628 <__assert_fail@plt+0x76b4>
   15e88:	cmp	r0, #0
   15e8c:	beq	15e9c <__assert_fail@plt+0x4f28>
   15e90:	cmp	r0, r5
   15e94:	beq	15ea4 <__assert_fail@plt+0x4f30>
   15e98:	bl	10f38 <abort@plt>
   15e9c:	mov	r0, r5
   15ea0:	bl	136b8 <__assert_fail@plt+0x2744>
   15ea4:	ldr	r5, [sp, #8]
   15ea8:	mov	r0, r5
   15eac:	sub	sp, fp, #24
   15eb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15eb4:	push	{fp, lr}
   15eb8:	mov	fp, sp
   15ebc:	mov	r2, r1
   15ec0:	ldrd	r0, [r0]
   15ec4:	mov	r3, #0
   15ec8:	bl	19028 <__assert_fail@plt+0x80b4>
   15ecc:	mov	r0, r2
   15ed0:	pop	{fp, pc}
   15ed4:	ldrd	r2, [r1]
   15ed8:	ldrd	r0, [r0]
   15edc:	eor	r1, r1, r3
   15ee0:	eor	r0, r0, r2
   15ee4:	orr	r0, r0, r1
   15ee8:	clz	r0, r0
   15eec:	lsr	r0, r0, #5
   15ef0:	bx	lr
   15ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef8:	add	fp, sp, #28
   15efc:	sub	sp, sp, #92	; 0x5c
   15f00:	mvn	r4, #0
   15f04:	cmp	r0, #1
   15f08:	blt	16a54 <__assert_fail@plt+0x5ae0>
   15f0c:	ldr	ip, [fp, #16]
   15f10:	mov	r9, r2
   15f14:	mov	r2, r0
   15f18:	mov	r8, r1
   15f1c:	mov	r0, #0
   15f20:	str	r3, [fp, #-48]	; 0xffffffd0
   15f24:	ldr	r6, [ip]
   15f28:	ldr	r4, [ip, #4]
   15f2c:	str	r0, [ip, #12]
   15f30:	cmp	r6, #0
   15f34:	beq	15f58 <__assert_fail@plt+0x4fe4>
   15f38:	ldr	r0, [ip, #16]
   15f3c:	cmp	r0, #0
   15f40:	beq	15f60 <__assert_fail@plt+0x4fec>
   15f44:	ldrb	r0, [r9]
   15f48:	cmp	r0, #45	; 0x2d
   15f4c:	cmpne	r0, #43	; 0x2b
   15f50:	addeq	r9, r9, #1
   15f54:	b	15fd4 <__assert_fail@plt+0x5060>
   15f58:	mov	r6, #1
   15f5c:	str	r6, [ip]
   15f60:	mov	r0, #0
   15f64:	str	r6, [ip, #28]
   15f68:	str	r6, [ip, #32]
   15f6c:	str	r0, [ip, #20]
   15f70:	ldrb	r1, [r9]
   15f74:	cmp	r1, #43	; 0x2b
   15f78:	beq	15f88 <__assert_fail@plt+0x5014>
   15f7c:	cmp	r1, #45	; 0x2d
   15f80:	bne	15f94 <__assert_fail@plt+0x5020>
   15f84:	mov	r0, #2
   15f88:	str	r0, [ip, #24]
   15f8c:	add	r9, r9, #1
   15f90:	b	15fcc <__assert_fail@plt+0x5058>
   15f94:	ldr	r0, [fp, #20]
   15f98:	cmp	r0, #0
   15f9c:	bne	15fc4 <__assert_fail@plt+0x5050>
   15fa0:	movw	r0, #37796	; 0x93a4
   15fa4:	mov	r5, ip
   15fa8:	mov	r7, r2
   15fac:	movt	r0, #1
   15fb0:	bl	10e00 <getenv@plt>
   15fb4:	mov	r2, r7
   15fb8:	mov	ip, r5
   15fbc:	cmp	r0, #0
   15fc0:	beq	16a60 <__assert_fail@plt+0x5aec>
   15fc4:	mov	r0, #0
   15fc8:	str	r0, [ip, #24]
   15fcc:	mov	r0, #1
   15fd0:	str	r0, [ip, #16]
   15fd4:	ldrb	r0, [r9]
   15fd8:	ldr	r5, [ip, #20]
   15fdc:	str	r8, [fp, #-32]	; 0xffffffe0
   15fe0:	subs	r1, r0, #58	; 0x3a
   15fe4:	movne	r1, r4
   15fe8:	cmp	r5, #0
   15fec:	str	r1, [fp, #-44]	; 0xffffffd4
   15ff0:	beq	16064 <__assert_fail@plt+0x50f0>
   15ff4:	ldrb	r0, [r5]
   15ff8:	cmp	r0, #0
   15ffc:	beq	16064 <__assert_fail@plt+0x50f0>
   16000:	str	r2, [fp, #-36]	; 0xffffffdc
   16004:	add	r8, r5, #1
   16008:	mov	r0, r9
   1600c:	mov	r7, ip
   16010:	str	r8, [ip, #20]
   16014:	ldrb	r4, [r5]
   16018:	mov	r1, r4
   1601c:	bl	10e54 <strchr@plt>
   16020:	ldrb	r1, [r5, #1]
   16024:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16028:	cmp	r1, #0
   1602c:	orr	r1, r4, #1
   16030:	addeq	r6, r6, #1
   16034:	streq	r6, [r7]
   16038:	cmp	r1, #59	; 0x3b
   1603c:	cmpne	r0, #0
   16040:	bne	160c4 <__assert_fail@plt+0x5150>
   16044:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16048:	cmp	r0, #0
   1604c:	bne	16a94 <__assert_fail@plt+0x5b20>
   16050:	str	r4, [r7, #8]
   16054:	mov	r4, #63	; 0x3f
   16058:	mov	r0, r4
   1605c:	sub	sp, fp, #28
   16060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16064:	mov	r3, ip
   16068:	str	r9, [sp, #48]	; 0x30
   1606c:	mov	r5, ip
   16070:	ldr	r9, [r3, #32]!
   16074:	cmp	r9, r6
   16078:	strgt	r6, [r3]
   1607c:	movgt	r9, r6
   16080:	ldr	r7, [r5, #28]!
   16084:	cmp	r7, r6
   16088:	strgt	r6, [r5]
   1608c:	movgt	r7, r6
   16090:	ldr	r4, [ip, #24]
   16094:	cmp	r4, #1
   16098:	bne	16570 <__assert_fail@plt+0x55fc>
   1609c:	cmp	r7, r9
   160a0:	cmpne	r9, r6
   160a4:	bne	16150 <__assert_fail@plt+0x51dc>
   160a8:	cmp	r9, r6
   160ac:	mov	r1, r5
   160b0:	mov	r0, r6
   160b4:	bne	1651c <__assert_fail@plt+0x55a8>
   160b8:	cmp	r6, r2
   160bc:	blt	16540 <__assert_fail@plt+0x55cc>
   160c0:	b	1655c <__assert_fail@plt+0x55e8>
   160c4:	ldrb	r2, [r0]
   160c8:	ldrb	r1, [r0, #1]
   160cc:	cmp	r2, #87	; 0x57
   160d0:	bne	16128 <__assert_fail@plt+0x51b4>
   160d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   160d8:	cmp	r2, #0
   160dc:	beq	16128 <__assert_fail@plt+0x51b4>
   160e0:	cmp	r1, #59	; 0x3b
   160e4:	bne	16128 <__assert_fail@plt+0x51b4>
   160e8:	ldrb	r0, [r8]
   160ec:	cmp	r0, #0
   160f0:	bne	16ac4 <__assert_fail@plt+0x5b50>
   160f4:	cmp	r6, r3
   160f8:	bne	16abc <__assert_fail@plt+0x5b48>
   160fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16100:	cmp	r0, #0
   16104:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16108:	bne	16bc4 <__assert_fail@plt+0x5c50>
   1610c:	str	r4, [r7, #8]
   16110:	ldrb	r4, [r9]
   16114:	cmp	r4, #58	; 0x3a
   16118:	movwne	r4, #63	; 0x3f
   1611c:	mov	r0, r4
   16120:	sub	sp, fp, #28
   16124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16128:	cmp	r1, #58	; 0x3a
   1612c:	bne	16a54 <__assert_fail@plt+0x5ae0>
   16130:	ldrb	r0, [r0, #2]
   16134:	ldrb	r1, [r8]
   16138:	cmp	r0, #58	; 0x3a
   1613c:	bne	1668c <__assert_fail@plt+0x5718>
   16140:	cmp	r1, #0
   16144:	bne	16694 <__assert_fail@plt+0x5720>
   16148:	mov	r0, #0
   1614c:	b	16b84 <__assert_fail@plt+0x5c10>
   16150:	cmp	r6, r9
   16154:	str	r4, [sp, #28]
   16158:	str	r5, [sp, #56]	; 0x38
   1615c:	str	r7, [fp, #-40]	; 0xffffffd8
   16160:	str	r3, [sp, #52]	; 0x34
   16164:	str	r2, [fp, #-36]	; 0xffffffdc
   16168:	ble	164f8 <__assert_fail@plt+0x5584>
   1616c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16170:	cmp	r0, r9
   16174:	bge	164f8 <__assert_fail@plt+0x5584>
   16178:	add	r0, r8, r9, lsl #2
   1617c:	ldr	lr, [fp, #-40]	; 0xffffffd8
   16180:	mov	r2, r6
   16184:	str	r0, [fp, #-52]	; 0xffffffcc
   16188:	sub	r0, r8, r9, lsl #2
   1618c:	str	r0, [sp, #32]
   16190:	rsb	r0, r9, #1
   16194:	add	r0, r8, r0, lsl #2
   16198:	str	r0, [sp, #44]	; 0x2c
   1619c:	mvn	r0, r9
   161a0:	str	r0, [fp, #-56]	; 0xffffffc8
   161a4:	add	r0, r8, r0, lsl #2
   161a8:	add	r0, r0, #4
   161ac:	str	r0, [sp, #24]
   161b0:	add	r0, r8, #4
   161b4:	str	r0, [sp, #60]	; 0x3c
   161b8:	sub	r4, r9, lr
   161bc:	sub	r0, r2, r9
   161c0:	cmp	r0, r4
   161c4:	bgt	161ec <__assert_fail@plt+0x5278>
   161c8:	b	16298 <__assert_fail@plt+0x5324>
   161cc:	mov	r2, sl
   161d0:	cmp	r2, r9
   161d4:	cmpgt	r9, lr
   161d8:	ble	164f8 <__assert_fail@plt+0x5584>
   161dc:	sub	r4, r9, lr
   161e0:	sub	r0, r2, r9
   161e4:	cmp	r0, r4
   161e8:	ble	16298 <__assert_fail@plt+0x5324>
   161ec:	sub	sl, r2, r4
   161f0:	cmp	r4, #1
   161f4:	blt	161cc <__assert_fail@plt+0x5258>
   161f8:	mov	r3, #0
   161fc:	cmp	r4, #4
   16200:	bcc	16454 <__assert_fail@plt+0x54e0>
   16204:	add	r5, r8, r2, lsl #2
   16208:	add	r1, r8, lr, lsl #2
   1620c:	cmp	r1, r5
   16210:	bcs	16224 <__assert_fail@plt+0x52b0>
   16214:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16218:	add	r5, r8, sl, lsl #2
   1621c:	cmp	r5, r0
   16220:	bcc	16454 <__assert_fail@plt+0x54e0>
   16224:	bic	r3, r4, #3
   16228:	mov	r0, #1
   1622c:	str	sl, [sp, #40]	; 0x28
   16230:	subs	r5, r3, #4
   16234:	add	r5, r0, r5, lsr #2
   16238:	and	r0, r5, #1
   1623c:	str	r0, [sp, #36]	; 0x24
   16240:	beq	16410 <__assert_fail@plt+0x549c>
   16244:	sub	r8, r5, r0
   16248:	ldr	r0, [sp, #24]
   1624c:	add	r5, r2, lr
   16250:	mov	r7, #0
   16254:	add	sl, r0, r5, lsl #2
   16258:	mov	r5, #0
   1625c:	add	ip, r1, r5
   16260:	add	r0, sl, r5
   16264:	add	r5, r5, #32
   16268:	subs	r8, r8, #2
   1626c:	add	r7, r7, #8
   16270:	vld1.32	{d16-d17}, [r0]
   16274:	vld1.32	{d18-d19}, [ip]
   16278:	vst1.32	{d16-d17}, [ip]!
   1627c:	vst1.32	{d18-d19}, [r0]!
   16280:	vld1.32	{d16-d17}, [r0]
   16284:	vld1.32	{d18-d19}, [ip]
   16288:	vst1.32	{d16-d17}, [ip]
   1628c:	vst1.32	{d18-d19}, [r0]
   16290:	bne	1625c <__assert_fail@plt+0x52e8>
   16294:	b	16414 <__assert_fail@plt+0x54a0>
   16298:	cmp	r0, #1
   1629c:	blt	163f8 <__assert_fail@plt+0x5484>
   162a0:	mov	sl, #0
   162a4:	cmp	r0, #3
   162a8:	bls	16374 <__assert_fail@plt+0x5400>
   162ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162b0:	add	r1, r3, r2, lsl #2
   162b4:	add	r8, r3, lr, lsl #2
   162b8:	cmp	r8, r1
   162bc:	bcs	162d8 <__assert_fail@plt+0x5364>
   162c0:	ldr	r3, [sp, #32]
   162c4:	add	r1, r2, lr
   162c8:	add	r1, r3, r1, lsl #2
   162cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   162d0:	cmp	r3, r1
   162d4:	bcc	16374 <__assert_fail@plt+0x5400>
   162d8:	bic	sl, r0, #3
   162dc:	mov	r3, #1
   162e0:	subs	r1, sl, #4
   162e4:	add	r1, r3, r1, lsr #2
   162e8:	and	r3, r1, #1
   162ec:	str	r3, [sp, #40]	; 0x28
   162f0:	beq	164e0 <__assert_fail@plt+0x556c>
   162f4:	sub	r7, r3, r1
   162f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   162fc:	mov	r1, #0
   16300:	mov	ip, #32
   16304:	mov	r5, r3
   16308:	mov	r4, r8
   1630c:	adds	r7, r7, #2
   16310:	add	r1, r1, #8
   16314:	vld1.32	{d16-d17}, [r5]!
   16318:	vld1.32	{d18-d19}, [r4]!
   1631c:	vst1.32	{d16-d17}, [r8], ip
   16320:	vst1.32	{d18-d19}, [r3], ip
   16324:	vld1.32	{d16-d17}, [r5]
   16328:	vld1.32	{d18-d19}, [r4]
   1632c:	vst1.32	{d16-d17}, [r4]
   16330:	vst1.32	{d18-d19}, [r5]
   16334:	bne	16304 <__assert_fail@plt+0x5390>
   16338:	ldr	r3, [sp, #40]	; 0x28
   1633c:	ldr	ip, [fp, #16]
   16340:	cmp	r3, #0
   16344:	beq	1636c <__assert_fail@plt+0x53f8>
   16348:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1634c:	add	r3, r1, lr
   16350:	add	r1, r1, r9
   16354:	add	r3, r4, r3, lsl #2
   16358:	add	r1, r4, r1, lsl #2
   1635c:	vld1.32	{d16-d17}, [r1]
   16360:	vld1.32	{d18-d19}, [r3]
   16364:	vst1.32	{d16-d17}, [r3]
   16368:	vst1.32	{d18-d19}, [r1]
   1636c:	cmp	r0, sl
   16370:	beq	163f8 <__assert_fail@plt+0x5484>
   16374:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16378:	tst	r0, #1
   1637c:	mov	r4, sl
   16380:	add	r1, r2, r1
   16384:	beq	163a8 <__assert_fail@plt+0x5434>
   16388:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1638c:	add	r7, sl, r9
   16390:	add	r4, sl, lr
   16394:	ldr	r5, [r3, r7, lsl #2]
   16398:	ldr	r8, [r3, r4, lsl #2]
   1639c:	str	r5, [r3, r4, lsl #2]
   163a0:	orr	r4, sl, #1
   163a4:	str	r8, [r3, r7, lsl #2]
   163a8:	cmp	r1, sl
   163ac:	beq	163f8 <__assert_fail@plt+0x5484>
   163b0:	ldr	r3, [sp, #60]	; 0x3c
   163b4:	add	r1, lr, r4
   163b8:	add	r4, r9, r4
   163bc:	add	r1, r3, r1, lsl #2
   163c0:	add	r3, r3, r4, lsl #2
   163c4:	sub	r4, r4, r2
   163c8:	ldr	r7, [r1, #-4]
   163cc:	ldr	r5, [r3, #-4]
   163d0:	adds	r4, r4, #2
   163d4:	str	r5, [r1, #-4]
   163d8:	str	r7, [r3, #-4]
   163dc:	ldr	r7, [r1]
   163e0:	ldr	r5, [r3]
   163e4:	str	r5, [r1]
   163e8:	str	r7, [r3]
   163ec:	add	r1, r1, #8
   163f0:	add	r3, r3, #8
   163f4:	bne	163c8 <__assert_fail@plt+0x5454>
   163f8:	ldr	r8, [fp, #-32]	; 0xffffffe0
   163fc:	add	lr, r0, lr
   16400:	cmp	r2, r9
   16404:	cmpgt	r9, lr
   16408:	bgt	161dc <__assert_fail@plt+0x5268>
   1640c:	b	164f8 <__assert_fail@plt+0x5584>
   16410:	mov	r7, #0
   16414:	ldr	r0, [sp, #36]	; 0x24
   16418:	ldr	r8, [fp, #-32]	; 0xffffffe0
   1641c:	ldr	sl, [sp, #40]	; 0x28
   16420:	cmp	r0, #0
   16424:	beq	16448 <__assert_fail@plt+0x54d4>
   16428:	add	r0, r7, lr
   1642c:	add	r1, r7, sl
   16430:	add	r0, r8, r0, lsl #2
   16434:	add	r1, r8, r1, lsl #2
   16438:	vld1.32	{d16-d17}, [r1]
   1643c:	vld1.32	{d18-d19}, [r0]
   16440:	vst1.32	{d16-d17}, [r0]
   16444:	vst1.32	{d18-d19}, [r1]
   16448:	ldr	ip, [fp, #16]
   1644c:	cmp	r4, r3
   16450:	beq	161cc <__assert_fail@plt+0x5258>
   16454:	mvn	r0, r3
   16458:	tst	r4, #1
   1645c:	add	r1, r9, r0
   16460:	beq	16480 <__assert_fail@plt+0x550c>
   16464:	add	r0, r3, lr
   16468:	add	r5, r3, sl
   1646c:	orr	r3, r3, #1
   16470:	ldr	r7, [r8, r0, lsl #2]
   16474:	ldr	r4, [r8, r5, lsl #2]
   16478:	str	r4, [r8, r0, lsl #2]
   1647c:	str	r7, [r8, r5, lsl #2]
   16480:	cmp	r1, lr
   16484:	beq	161cc <__assert_fail@plt+0x5258>
   16488:	ldr	r4, [sp, #60]	; 0x3c
   1648c:	add	r0, lr, r3
   16490:	sub	r1, r9, r3
   16494:	add	r4, r4, r0, lsl #2
   16498:	add	r0, r2, lr
   1649c:	ldr	r2, [sp, #44]	; 0x2c
   164a0:	add	r0, r0, r3
   164a4:	add	r2, r2, r0, lsl #2
   164a8:	ldr	r0, [r4, #-4]
   164ac:	ldr	r3, [r2, #-4]
   164b0:	sub	r1, r1, #2
   164b4:	cmp	lr, r1
   164b8:	str	r3, [r4, #-4]
   164bc:	str	r0, [r2, #-4]
   164c0:	ldr	r0, [r4]
   164c4:	ldr	r3, [r2]
   164c8:	str	r3, [r4]
   164cc:	str	r0, [r2]
   164d0:	add	r2, r2, #8
   164d4:	add	r4, r4, #8
   164d8:	bne	164a8 <__assert_fail@plt+0x5534>
   164dc:	b	161cc <__assert_fail@plt+0x5258>
   164e0:	mov	r1, #0
   164e4:	ldr	r3, [sp, #40]	; 0x28
   164e8:	ldr	ip, [fp, #16]
   164ec:	cmp	r3, #0
   164f0:	bne	16348 <__assert_fail@plt+0x53d4>
   164f4:	b	1636c <__assert_fail@plt+0x53f8>
   164f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   164fc:	ldr	r3, [sp, #52]	; 0x34
   16500:	ldr	r5, [sp, #56]	; 0x38
   16504:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16508:	ldr	r4, [sp, #28]
   1650c:	add	r0, r0, r6
   16510:	mov	r1, r3
   16514:	sub	r0, r0, r9
   16518:	str	r0, [r5]
   1651c:	mov	r7, r0
   16520:	str	r6, [r1]
   16524:	cmp	r6, r2
   16528:	blt	16540 <__assert_fail@plt+0x55cc>
   1652c:	b	1655c <__assert_fail@plt+0x55e8>
   16530:	add	r6, r6, #1
   16534:	cmp	r2, r6
   16538:	str	r6, [ip]
   1653c:	beq	16564 <__assert_fail@plt+0x55f0>
   16540:	ldr	r0, [r8, r6, lsl #2]
   16544:	ldrb	r1, [r0]
   16548:	cmp	r1, #45	; 0x2d
   1654c:	bne	16530 <__assert_fail@plt+0x55bc>
   16550:	ldrb	r0, [r0, #1]
   16554:	cmp	r0, #0
   16558:	beq	16530 <__assert_fail@plt+0x55bc>
   1655c:	mov	r9, r6
   16560:	b	16568 <__assert_fail@plt+0x55f4>
   16564:	mov	r9, r2
   16568:	mov	r6, r9
   1656c:	str	r9, [r3]
   16570:	cmp	r6, r2
   16574:	beq	16a48 <__assert_fail@plt+0x5ad4>
   16578:	mov	sl, r4
   1657c:	movw	r4, #37720	; 0x9358
   16580:	ldr	r0, [r8, r6, lsl #2]
   16584:	str	r5, [sp, #56]	; 0x38
   16588:	str	r7, [fp, #-40]	; 0xffffffd8
   1658c:	str	r3, [sp, #52]	; 0x34
   16590:	str	r2, [fp, #-36]	; 0xffffffdc
   16594:	movt	r4, #1
   16598:	mov	r1, r4
   1659c:	bl	10d1c <strcmp@plt>
   165a0:	cmp	r0, #0
   165a4:	beq	16634 <__assert_fail@plt+0x56c0>
   165a8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   165ac:	ldr	ip, [fp, #16]
   165b0:	ldr	r7, [fp, #-40]	; 0xffffffd8
   165b4:	cmp	r6, r2
   165b8:	beq	16a48 <__assert_fail@plt+0x5ad4>
   165bc:	ldr	r5, [r8, r6, lsl #2]
   165c0:	mov	r3, r4
   165c4:	mvn	r4, #0
   165c8:	ldrb	r0, [r5]
   165cc:	cmp	r0, #45	; 0x2d
   165d0:	bne	1666c <__assert_fail@plt+0x56f8>
   165d4:	mov	r7, r5
   165d8:	ldrb	r1, [r7, #1]!
   165dc:	cmp	r1, #0
   165e0:	beq	1666c <__assert_fail@plt+0x56f8>
   165e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   165e8:	cmp	r0, #0
   165ec:	beq	16bb4 <__assert_fail@plt+0x5c40>
   165f0:	ldr	r9, [fp, #12]
   165f4:	cmp	r1, #45	; 0x2d
   165f8:	bne	16b10 <__assert_fail@plt+0x5b9c>
   165fc:	add	r0, r5, #2
   16600:	mov	r1, r8
   16604:	str	r0, [ip, #20]
   16608:	ldr	r0, [fp, #8]
   1660c:	stm	sp, {r0, r9, ip}
   16610:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16614:	str	r3, [sp, #16]
   16618:	str	r0, [sp, #12]
   1661c:	mov	r0, r2
   16620:	ldr	r2, [sp, #48]	; 0x30
   16624:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16628:	bl	16c0c <__assert_fail@plt+0x5c98>
   1662c:	sub	sp, fp, #28
   16630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16634:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16638:	ldr	ip, [fp, #16]
   1663c:	ldr	lr, [fp, #-36]	; 0xffffffdc
   16640:	add	r2, r6, #1
   16644:	cmp	r0, r9
   16648:	str	r2, [ip]
   1664c:	cmpne	r9, r2
   16650:	bne	166a4 <__assert_fail@plt+0x5730>
   16654:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16658:	ldr	r1, [sp, #56]	; 0x38
   1665c:	cmp	r0, r9
   16660:	mov	r0, r2
   16664:	beq	16a30 <__assert_fail@plt+0x5abc>
   16668:	b	16a38 <__assert_fail@plt+0x5ac4>
   1666c:	cmp	sl, #0
   16670:	addne	r0, r6, #1
   16674:	strne	r5, [ip, #12]
   16678:	movne	r4, #1
   1667c:	strne	r0, [ip]
   16680:	mov	r0, r4
   16684:	sub	sp, fp, #28
   16688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1668c:	cmp	r1, #0
   16690:	beq	16a68 <__assert_fail@plt+0x5af4>
   16694:	add	r0, r6, #1
   16698:	str	r8, [r7, #12]
   1669c:	str	r0, [r7]
   166a0:	b	16b88 <__assert_fail@plt+0x5c14>
   166a4:	cmp	r6, r9
   166a8:	str	r2, [sp, #48]	; 0x30
   166ac:	blt	16a10 <__assert_fail@plt+0x5a9c>
   166b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   166b4:	cmp	r0, r9
   166b8:	bge	16a10 <__assert_fail@plt+0x5a9c>
   166bc:	add	r0, r8, r9, lsl #2
   166c0:	ldr	ip, [fp, #-40]	; 0xffffffd8
   166c4:	str	r0, [fp, #-44]	; 0xffffffd4
   166c8:	sub	r0, r8, r9, lsl #2
   166cc:	str	r0, [sp, #44]	; 0x2c
   166d0:	rsb	r0, r9, #1
   166d4:	add	r0, r8, r0, lsl #2
   166d8:	str	r0, [fp, #-56]	; 0xffffffc8
   166dc:	mvn	r0, r9
   166e0:	str	r0, [fp, #-48]	; 0xffffffd0
   166e4:	add	r0, r8, r0, lsl #2
   166e8:	add	r0, r0, #4
   166ec:	str	r0, [sp, #40]	; 0x28
   166f0:	add	r0, r8, #4
   166f4:	str	r0, [fp, #-52]	; 0xffffffcc
   166f8:	ldr	r0, [sp, #48]	; 0x30
   166fc:	sub	r4, r9, ip
   16700:	sub	sl, r0, r9
   16704:	cmp	sl, r4
   16708:	bgt	16730 <__assert_fail@plt+0x57bc>
   1670c:	b	167d8 <__assert_fail@plt+0x5864>
   16710:	mov	r0, r3
   16714:	cmp	r0, r9
   16718:	cmpgt	r9, ip
   1671c:	ble	16a10 <__assert_fail@plt+0x5a9c>
   16720:	sub	r4, r9, ip
   16724:	sub	sl, r0, r9
   16728:	cmp	sl, r4
   1672c:	ble	167d8 <__assert_fail@plt+0x5864>
   16730:	sub	r3, r0, r4
   16734:	cmp	r4, #1
   16738:	blt	16710 <__assert_fail@plt+0x579c>
   1673c:	mov	r1, #0
   16740:	cmp	r4, #4
   16744:	bcc	168b8 <__assert_fail@plt+0x5944>
   16748:	add	r2, r8, r0, lsl #2
   1674c:	add	r7, r8, ip, lsl #2
   16750:	cmp	r7, r2
   16754:	bcs	16768 <__assert_fail@plt+0x57f4>
   16758:	ldr	r5, [fp, #-44]	; 0xffffffd4
   1675c:	add	r2, r8, r3, lsl #2
   16760:	cmp	r2, r5
   16764:	bcc	168b8 <__assert_fail@plt+0x5944>
   16768:	bic	r1, r4, #3
   1676c:	mov	r6, #1
   16770:	subs	r2, r1, #4
   16774:	add	r2, r6, r2, lsr #2
   16778:	and	r6, r2, #1
   1677c:	str	r6, [sp, #60]	; 0x3c
   16780:	beq	16878 <__assert_fail@plt+0x5904>
   16784:	ldr	r5, [sp, #40]	; 0x28
   16788:	sub	r2, r6, r2
   1678c:	add	r6, ip, r0
   16790:	add	lr, r5, r6, lsl #2
   16794:	mov	r5, #0
   16798:	mov	r6, #0
   1679c:	add	sl, r7, r5
   167a0:	add	r8, lr, r5
   167a4:	adds	r2, r2, #2
   167a8:	add	r5, r5, #32
   167ac:	add	r6, r6, #8
   167b0:	vld1.32	{d16-d17}, [r8]
   167b4:	vld1.32	{d18-d19}, [sl]
   167b8:	vst1.32	{d16-d17}, [sl]!
   167bc:	vst1.32	{d18-d19}, [r8]!
   167c0:	vld1.32	{d16-d17}, [r8]
   167c4:	vld1.32	{d18-d19}, [sl]
   167c8:	vst1.32	{d16-d17}, [sl]
   167cc:	vst1.32	{d18-d19}, [r8]
   167d0:	bne	1679c <__assert_fail@plt+0x5828>
   167d4:	b	1687c <__assert_fail@plt+0x5908>
   167d8:	cmp	sl, #1
   167dc:	blt	16a00 <__assert_fail@plt+0x5a8c>
   167e0:	mov	r1, #0
   167e4:	cmp	sl, #3
   167e8:	bls	16980 <__assert_fail@plt+0x5a0c>
   167ec:	add	r2, r8, r0, lsl #2
   167f0:	add	r7, r8, ip, lsl #2
   167f4:	cmp	r7, r2
   167f8:	bcs	16814 <__assert_fail@plt+0x58a0>
   167fc:	ldr	r3, [sp, #44]	; 0x2c
   16800:	add	r2, ip, r0
   16804:	add	r2, r3, r2, lsl #2
   16808:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1680c:	cmp	r3, r2
   16810:	bcc	16980 <__assert_fail@plt+0x5a0c>
   16814:	bic	r1, sl, #3
   16818:	mov	r3, #1
   1681c:	subs	r2, r1, #4
   16820:	add	r2, r3, r2, lsr #2
   16824:	and	r3, r2, #1
   16828:	str	r3, [sp, #60]	; 0x3c
   1682c:	beq	16944 <__assert_fail@plt+0x59d0>
   16830:	ldr	r5, [fp, #-44]	; 0xffffffd4
   16834:	sub	r6, r3, r2
   16838:	mov	r4, #0
   1683c:	mov	lr, #32
   16840:	mov	r2, r5
   16844:	mov	r3, r7
   16848:	adds	r6, r6, #2
   1684c:	add	r4, r4, #8
   16850:	vld1.32	{d16-d17}, [r2]!
   16854:	vld1.32	{d18-d19}, [r3]!
   16858:	vst1.32	{d16-d17}, [r7], lr
   1685c:	vst1.32	{d18-d19}, [r5], lr
   16860:	vld1.32	{d16-d17}, [r2]
   16864:	vld1.32	{d18-d19}, [r3]
   16868:	vst1.32	{d16-d17}, [r3]
   1686c:	vst1.32	{d18-d19}, [r2]
   16870:	bne	16840 <__assert_fail@plt+0x58cc>
   16874:	b	16948 <__assert_fail@plt+0x59d4>
   16878:	mov	r6, #0
   1687c:	ldr	r2, [sp, #60]	; 0x3c
   16880:	ldr	r8, [fp, #-32]	; 0xffffffe0
   16884:	ldr	lr, [fp, #-36]	; 0xffffffdc
   16888:	cmp	r2, #0
   1688c:	beq	168b0 <__assert_fail@plt+0x593c>
   16890:	add	r2, r6, ip
   16894:	add	r7, r6, r3
   16898:	add	r2, r8, r2, lsl #2
   1689c:	add	r7, r8, r7, lsl #2
   168a0:	vld1.32	{d16-d17}, [r7]
   168a4:	vld1.32	{d18-d19}, [r2]
   168a8:	vst1.32	{d16-d17}, [r2]
   168ac:	vst1.32	{d18-d19}, [r7]
   168b0:	cmp	r4, r1
   168b4:	beq	16710 <__assert_fail@plt+0x579c>
   168b8:	mvn	r2, r1
   168bc:	tst	r4, #1
   168c0:	add	r2, r9, r2
   168c4:	beq	168e4 <__assert_fail@plt+0x5970>
   168c8:	add	r7, r1, ip
   168cc:	add	r5, r1, r3
   168d0:	orr	r1, r1, #1
   168d4:	ldr	r6, [r8, r7, lsl #2]
   168d8:	ldr	r4, [r8, r5, lsl #2]
   168dc:	str	r4, [r8, r7, lsl #2]
   168e0:	str	r6, [r8, r5, lsl #2]
   168e4:	cmp	r2, ip
   168e8:	beq	16710 <__assert_fail@plt+0x579c>
   168ec:	add	r0, ip, r0
   168f0:	sub	r2, r9, r1
   168f4:	add	r7, ip, r1
   168f8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   168fc:	add	r0, r0, r1
   16900:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16904:	add	r7, r4, r7, lsl #2
   16908:	add	r0, r1, r0, lsl #2
   1690c:	ldr	r1, [r7, #-4]
   16910:	ldr	r6, [r0, #-4]
   16914:	sub	r2, r2, #2
   16918:	cmp	ip, r2
   1691c:	str	r6, [r7, #-4]
   16920:	str	r1, [r0, #-4]
   16924:	ldr	r1, [r7]
   16928:	ldr	r6, [r0]
   1692c:	str	r6, [r7]
   16930:	str	r1, [r0]
   16934:	add	r0, r0, #8
   16938:	add	r7, r7, #8
   1693c:	bne	1690c <__assert_fail@plt+0x5998>
   16940:	b	16710 <__assert_fail@plt+0x579c>
   16944:	mov	r4, #0
   16948:	ldr	r2, [sp, #60]	; 0x3c
   1694c:	cmp	r2, #0
   16950:	beq	16974 <__assert_fail@plt+0x5a00>
   16954:	add	r2, r4, ip
   16958:	add	r3, r4, r9
   1695c:	add	r2, r8, r2, lsl #2
   16960:	add	r3, r8, r3, lsl #2
   16964:	vld1.32	{d16-d17}, [r3]
   16968:	vld1.32	{d18-d19}, [r2]
   1696c:	vst1.32	{d16-d17}, [r2]
   16970:	vst1.32	{d18-d19}, [r3]
   16974:	ldr	lr, [fp, #-36]	; 0xffffffdc
   16978:	cmp	sl, r1
   1697c:	beq	16a00 <__assert_fail@plt+0x5a8c>
   16980:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16984:	tst	sl, #1
   16988:	mov	r3, r1
   1698c:	add	r2, r0, r2
   16990:	beq	169b0 <__assert_fail@plt+0x5a3c>
   16994:	add	r6, r1, r9
   16998:	add	r3, r1, ip
   1699c:	ldr	r5, [r8, r6, lsl #2]
   169a0:	ldr	r7, [r8, r3, lsl #2]
   169a4:	str	r5, [r8, r3, lsl #2]
   169a8:	orr	r3, r1, #1
   169ac:	str	r7, [r8, r6, lsl #2]
   169b0:	cmp	r2, r1
   169b4:	beq	16a00 <__assert_fail@plt+0x5a8c>
   169b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   169bc:	add	r1, ip, r3
   169c0:	add	r3, r9, r3
   169c4:	add	r1, r2, r1, lsl #2
   169c8:	add	r2, r2, r3, lsl #2
   169cc:	sub	r3, r3, r0
   169d0:	ldr	r7, [r1, #-4]
   169d4:	ldr	r6, [r2, #-4]
   169d8:	adds	r3, r3, #2
   169dc:	str	r6, [r1, #-4]
   169e0:	str	r7, [r2, #-4]
   169e4:	ldr	r7, [r1]
   169e8:	ldr	r6, [r2]
   169ec:	str	r6, [r1]
   169f0:	str	r7, [r2]
   169f4:	add	r1, r1, #8
   169f8:	add	r2, r2, #8
   169fc:	bne	169d0 <__assert_fail@plt+0x5a5c>
   16a00:	add	ip, sl, ip
   16a04:	cmp	r0, r9
   16a08:	cmpgt	r9, ip
   16a0c:	bgt	16720 <__assert_fail@plt+0x57ac>
   16a10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16a14:	ldr	r2, [sp, #48]	; 0x30
   16a18:	ldr	r1, [sp, #56]	; 0x38
   16a1c:	ldr	ip, [fp, #16]
   16a20:	add	r0, r0, r2
   16a24:	sub	r0, r0, r9
   16a28:	str	r0, [r1]
   16a2c:	ldr	r1, [sp, #52]	; 0x34
   16a30:	str	r2, [r1]
   16a34:	str	r0, [fp, #-40]	; 0xffffffd8
   16a38:	ldr	r7, [fp, #-40]	; 0xffffffd8
   16a3c:	str	lr, [ip]
   16a40:	str	lr, [ip, #32]
   16a44:	mov	r9, lr
   16a48:	cmp	r7, r9
   16a4c:	mvn	r4, #0
   16a50:	strne	r7, [ip]
   16a54:	mov	r0, r4
   16a58:	sub	sp, fp, #28
   16a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a60:	mov	r0, #1
   16a64:	b	15fc8 <__assert_fail@plt+0x5054>
   16a68:	cmp	r6, r3
   16a6c:	bne	16b74 <__assert_fail@plt+0x5c00>
   16a70:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16a74:	cmp	r0, #0
   16a78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16a7c:	bne	16be8 <__assert_fail@plt+0x5c74>
   16a80:	str	r4, [r7, #8]
   16a84:	ldrb	r4, [r9]
   16a88:	cmp	r4, #58	; 0x3a
   16a8c:	movwne	r4, #63	; 0x3f
   16a90:	b	16b88 <__assert_fail@plt+0x5c14>
   16a94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16a98:	movw	r1, #37723	; 0x935b
   16a9c:	mov	r3, r4
   16aa0:	movt	r1, #1
   16aa4:	ldr	r2, [r0]
   16aa8:	movw	r0, #41232	; 0xa110
   16aac:	movt	r0, #2
   16ab0:	ldr	r0, [r0]
   16ab4:	bl	10e6c <fprintf@plt>
   16ab8:	b	16050 <__assert_fail@plt+0x50dc>
   16abc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16ac0:	ldr	r8, [r0, r6, lsl #2]
   16ac4:	ldr	r2, [fp, #8]
   16ac8:	movw	r1, #37792	; 0x93a0
   16acc:	str	r8, [r7, #12]
   16ad0:	mov	r0, #0
   16ad4:	movt	r1, #1
   16ad8:	str	r0, [r7, #12]
   16adc:	str	r8, [r7, #20]
   16ae0:	str	r2, [sp]
   16ae4:	stmib	sp, {r0, r7}
   16ae8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16aec:	str	r1, [sp, #16]
   16af0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16af4:	mov	r2, r9
   16af8:	str	r0, [sp, #12]
   16afc:	mov	r0, r3
   16b00:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16b04:	bl	16c0c <__assert_fail@plt+0x5c98>
   16b08:	sub	sp, fp, #28
   16b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b10:	cmp	r9, #0
   16b14:	beq	16bb4 <__assert_fail@plt+0x5c40>
   16b18:	ldrb	r0, [r5, #2]
   16b1c:	cmp	r0, #0
   16b20:	beq	16b9c <__assert_fail@plt+0x5c28>
   16b24:	ldr	r1, [fp, #8]
   16b28:	movw	r0, #37721	; 0x9359
   16b2c:	str	r7, [ip, #20]
   16b30:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16b34:	movt	r0, #1
   16b38:	stm	sp, {r1, r9, ip}
   16b3c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16b40:	str	r0, [sp, #16]
   16b44:	mov	r0, r2
   16b48:	ldr	r2, [sp, #48]	; 0x30
   16b4c:	str	r1, [sp, #12]
   16b50:	mov	r1, r8
   16b54:	bl	16c0c <__assert_fail@plt+0x5c98>
   16b58:	ldr	ip, [fp, #16]
   16b5c:	mov	r4, r0
   16b60:	cmn	r0, #1
   16b64:	bne	16a54 <__assert_fail@plt+0x5ae0>
   16b68:	ldr	r6, [ip]
   16b6c:	ldr	r5, [r8, r6, lsl #2]
   16b70:	b	16bb4 <__assert_fail@plt+0x5c40>
   16b74:	add	r0, r6, #1
   16b78:	str	r0, [r7]
   16b7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16b80:	ldr	r0, [r0, r6, lsl #2]
   16b84:	str	r0, [r7, #12]
   16b88:	mov	r0, #0
   16b8c:	str	r0, [r7, #20]
   16b90:	mov	r0, r4
   16b94:	sub	sp, fp, #28
   16b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b9c:	ldr	r0, [sp, #48]	; 0x30
   16ba0:	bl	10e54 <strchr@plt>
   16ba4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16ba8:	ldr	ip, [fp, #16]
   16bac:	cmp	r0, #0
   16bb0:	beq	16b24 <__assert_fail@plt+0x5bb0>
   16bb4:	ldr	r9, [sp, #48]	; 0x30
   16bb8:	add	r5, r5, #1
   16bbc:	str	r5, [ip, #20]
   16bc0:	b	16004 <__assert_fail@plt+0x5090>
   16bc4:	ldr	r2, [r0]
   16bc8:	movw	r0, #41232	; 0xa110
   16bcc:	movw	r1, #37751	; 0x9377
   16bd0:	mov	r3, r4
   16bd4:	movt	r0, #2
   16bd8:	movt	r1, #1
   16bdc:	ldr	r0, [r0]
   16be0:	bl	10e6c <fprintf@plt>
   16be4:	b	1610c <__assert_fail@plt+0x5198>
   16be8:	ldr	r2, [r0]
   16bec:	movw	r0, #41232	; 0xa110
   16bf0:	movw	r1, #37751	; 0x9377
   16bf4:	mov	r3, r4
   16bf8:	movt	r0, #2
   16bfc:	movt	r1, #1
   16c00:	ldr	r0, [r0]
   16c04:	bl	10e6c <fprintf@plt>
   16c08:	b	16a80 <__assert_fail@plt+0x5b0c>
   16c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c10:	add	fp, sp, #28
   16c14:	sub	sp, sp, #44	; 0x2c
   16c18:	str	r0, [sp, #8]
   16c1c:	ldr	r0, [fp, #16]
   16c20:	str	r2, [sp, #12]
   16c24:	str	r1, [sp, #16]
   16c28:	ldr	r8, [r0, #20]
   16c2c:	mov	r9, r8
   16c30:	b	16c38 <__assert_fail@plt+0x5cc4>
   16c34:	add	r9, r9, #1
   16c38:	ldrb	r0, [r9]
   16c3c:	cmp	r0, #0
   16c40:	cmpne	r0, #61	; 0x3d
   16c44:	bne	16c34 <__assert_fail@plt+0x5cc0>
   16c48:	ldr	sl, [r3]
   16c4c:	mvn	r0, #0
   16c50:	str	r0, [sp, #24]
   16c54:	cmp	sl, #0
   16c58:	beq	16e04 <__assert_fail@plt+0x5e90>
   16c5c:	sub	r0, r9, r8
   16c60:	mov	r4, #0
   16c64:	mov	r6, sl
   16c68:	mov	r7, r3
   16c6c:	str	r3, [sp, #28]
   16c70:	str	r0, [fp, #-32]	; 0xffffffe0
   16c74:	b	16c88 <__assert_fail@plt+0x5d14>
   16c78:	ldr	r6, [r7, #16]!
   16c7c:	add	r4, r4, #1
   16c80:	cmp	r6, #0
   16c84:	beq	16cbc <__assert_fail@plt+0x5d48>
   16c88:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16c8c:	mov	r0, r6
   16c90:	mov	r1, r8
   16c94:	bl	10f2c <strncmp@plt>
   16c98:	cmp	r0, #0
   16c9c:	bne	16c78 <__assert_fail@plt+0x5d04>
   16ca0:	mov	r0, r6
   16ca4:	bl	10e48 <strlen@plt>
   16ca8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16cac:	cmp	r1, r0
   16cb0:	bne	16c78 <__assert_fail@plt+0x5d04>
   16cb4:	str	r4, [sp, #24]
   16cb8:	b	17078 <__assert_fail@plt+0x6104>
   16cbc:	cmp	sl, #0
   16cc0:	beq	16e20 <__assert_fail@plt+0x5eac>
   16cc4:	ldr	r0, [fp, #12]
   16cc8:	cmp	r0, #0
   16ccc:	beq	16ea0 <__assert_fail@plt+0x5f2c>
   16cd0:	ldr	r0, [fp, #20]
   16cd4:	cmp	r0, #0
   16cd8:	beq	171bc <__assert_fail@plt+0x6248>
   16cdc:	mov	r0, #0
   16ce0:	ldr	r6, [sp, #28]
   16ce4:	mov	r5, #0
   16ce8:	mov	r7, #0
   16cec:	str	r0, [sp, #32]
   16cf0:	mvn	r0, #0
   16cf4:	str	r0, [sp, #24]
   16cf8:	mov	r0, #0
   16cfc:	str	r0, [sp, #4]
   16d00:	mov	r0, #0
   16d04:	str	r0, [sp, #20]
   16d08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16d0c:	mov	r0, sl
   16d10:	mov	r1, r8
   16d14:	bl	10f2c <strncmp@plt>
   16d18:	cmp	r0, #0
   16d1c:	beq	16d44 <__assert_fail@plt+0x5dd0>
   16d20:	mov	r1, r5
   16d24:	ldr	sl, [r6, #16]!
   16d28:	cmp	sl, #0
   16d2c:	beq	17054 <__assert_fail@plt+0x60e0>
   16d30:	ldr	r0, [fp, #16]
   16d34:	add	r1, r1, #1
   16d38:	mov	r5, r1
   16d3c:	ldr	r8, [r0, #20]
   16d40:	b	16d08 <__assert_fail@plt+0x5d94>
   16d44:	cmp	r7, #0
   16d48:	beq	16dc4 <__assert_fail@plt+0x5e50>
   16d4c:	ldr	r0, [sp, #32]
   16d50:	mov	r1, r5
   16d54:	cmp	r0, #0
   16d58:	bne	16d24 <__assert_fail@plt+0x5db0>
   16d5c:	ldr	r8, [sp, #20]
   16d60:	cmp	r8, #0
   16d64:	bne	16da0 <__assert_fail@plt+0x5e2c>
   16d68:	mov	r0, r4
   16d6c:	bl	18bb8 <__assert_fail@plt+0x7c44>
   16d70:	cmp	r0, #0
   16d74:	beq	16de0 <__assert_fail@plt+0x5e6c>
   16d78:	mov	r1, #0
   16d7c:	mov	r2, r4
   16d80:	mov	r8, r0
   16d84:	bl	10e90 <memset@plt>
   16d88:	ldr	r0, [sp, #24]
   16d8c:	mov	r1, #1
   16d90:	mov	r2, #1
   16d94:	str	r1, [sp, #4]
   16d98:	mov	r1, r5
   16d9c:	strb	r2, [r8, r0]
   16da0:	mov	r0, #1
   16da4:	str	r8, [sp, #20]
   16da8:	strb	r0, [r8, r1]
   16dac:	mov	r0, #0
   16db0:	str	r0, [sp, #32]
   16db4:	ldr	sl, [r6, #16]!
   16db8:	cmp	sl, #0
   16dbc:	bne	16d30 <__assert_fail@plt+0x5dbc>
   16dc0:	b	17054 <__assert_fail@plt+0x60e0>
   16dc4:	mov	r7, r6
   16dc8:	mov	r1, r5
   16dcc:	str	r5, [sp, #24]
   16dd0:	ldr	sl, [r6, #16]!
   16dd4:	cmp	sl, #0
   16dd8:	bne	16d30 <__assert_fail@plt+0x5dbc>
   16ddc:	b	17054 <__assert_fail@plt+0x60e0>
   16de0:	mov	r0, #1
   16de4:	mov	r1, r5
   16de8:	str	r0, [sp, #32]
   16dec:	mov	r0, #0
   16df0:	str	r0, [sp, #20]
   16df4:	ldr	sl, [r6, #16]!
   16df8:	cmp	sl, #0
   16dfc:	bne	16d30 <__assert_fail@plt+0x5dbc>
   16e00:	b	17054 <__assert_fail@plt+0x60e0>
   16e04:	mov	r0, #0
   16e08:	mov	r4, #0
   16e0c:	mov	r7, #0
   16e10:	mov	r1, #0
   16e14:	mov	r8, #0
   16e18:	mov	r6, r3
   16e1c:	b	16e34 <__assert_fail@plt+0x5ec0>
   16e20:	ldr	r6, [sp, #28]
   16e24:	mov	r0, #0
   16e28:	mov	r7, #0
   16e2c:	mov	r1, #0
   16e30:	mov	r8, #0
   16e34:	str	r0, [sp, #32]
   16e38:	cmp	r1, #0
   16e3c:	ldreq	r0, [sp, #32]
   16e40:	cmpeq	r0, #0
   16e44:	beq	17070 <__assert_fail@plt+0x60fc>
   16e48:	ldr	r0, [fp, #20]
   16e4c:	cmp	r0, #0
   16e50:	bne	17288 <__assert_fail@plt+0x6314>
   16e54:	cmp	r8, #0
   16e58:	beq	16e64 <__assert_fail@plt+0x5ef0>
   16e5c:	mov	r0, r1
   16e60:	bl	136b8 <__assert_fail@plt+0x2744>
   16e64:	ldr	r0, [fp, #16]
   16e68:	ldr	r4, [r0, #20]
   16e6c:	mov	r5, r0
   16e70:	mov	r0, r4
   16e74:	bl	10e48 <strlen@plt>
   16e78:	mov	r1, #0
   16e7c:	add	r0, r4, r0
   16e80:	str	r1, [r5, #8]
   16e84:	str	r0, [r5, #20]
   16e88:	ldr	r0, [r5]
   16e8c:	add	r0, r0, #1
   16e90:	str	r0, [r5]
   16e94:	mov	r0, #63	; 0x3f
   16e98:	sub	sp, fp, #28
   16e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea0:	mov	r0, #0
   16ea4:	mov	r6, #0
   16ea8:	mov	r7, #0
   16eac:	str	r0, [sp, #36]	; 0x24
   16eb0:	mvn	r0, #0
   16eb4:	str	r0, [sp, #24]
   16eb8:	mov	r0, #0
   16ebc:	str	r0, [sp, #32]
   16ec0:	mov	r0, #0
   16ec4:	str	r0, [sp, #4]
   16ec8:	mov	r0, #0
   16ecc:	str	r0, [sp, #20]
   16ed0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16ed4:	mov	r0, sl
   16ed8:	mov	r1, r8
   16edc:	bl	10f2c <strncmp@plt>
   16ee0:	cmp	r0, #0
   16ee4:	beq	16f18 <__assert_fail@plt+0x5fa4>
   16ee8:	ldr	r5, [sp, #28]
   16eec:	ldr	r3, [sp, #36]	; 0x24
   16ef0:	add	r0, r5, r6, lsl #4
   16ef4:	ldr	sl, [r0, #16]
   16ef8:	cmp	sl, #0
   16efc:	beq	17054 <__assert_fail@plt+0x60e0>
   16f00:	ldr	r0, [fp, #16]
   16f04:	add	r3, r3, #16
   16f08:	add	r6, r6, #1
   16f0c:	str	r3, [sp, #36]	; 0x24
   16f10:	ldr	r8, [r0, #20]
   16f14:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16f18:	ldr	r5, [sp, #28]
   16f1c:	ldr	r3, [sp, #36]	; 0x24
   16f20:	cmp	r7, #0
   16f24:	add	r0, r5, r3
   16f28:	beq	16fc0 <__assert_fail@plt+0x604c>
   16f2c:	ldr	r1, [r0, #4]
   16f30:	ldr	r2, [r7, #4]
   16f34:	cmp	r2, r1
   16f38:	bne	16f4c <__assert_fail@plt+0x5fd8>
   16f3c:	ldr	r1, [r0, #8]
   16f40:	ldr	r2, [r7, #8]
   16f44:	cmp	r2, r1
   16f48:	beq	16fdc <__assert_fail@plt+0x6068>
   16f4c:	ldr	r0, [sp, #32]
   16f50:	cmp	r0, #0
   16f54:	bne	16ef0 <__assert_fail@plt+0x5f7c>
   16f58:	ldr	r0, [fp, #20]
   16f5c:	cmp	r0, #0
   16f60:	beq	16ffc <__assert_fail@plt+0x6088>
   16f64:	ldr	r8, [sp, #20]
   16f68:	mov	r0, #0
   16f6c:	str	r0, [sp, #32]
   16f70:	cmp	r8, #0
   16f74:	bne	17010 <__assert_fail@plt+0x609c>
   16f78:	mov	r0, r4
   16f7c:	bl	18bb8 <__assert_fail@plt+0x7c44>
   16f80:	cmp	r0, #0
   16f84:	beq	17030 <__assert_fail@plt+0x60bc>
   16f88:	mov	r8, r0
   16f8c:	mov	r0, #0
   16f90:	mov	r1, #0
   16f94:	mov	r2, r4
   16f98:	str	r0, [sp, #32]
   16f9c:	mov	r0, r8
   16fa0:	bl	10e90 <memset@plt>
   16fa4:	ldr	r3, [sp, #36]	; 0x24
   16fa8:	ldr	r0, [sp, #24]
   16fac:	mov	r2, #1
   16fb0:	mov	r1, #1
   16fb4:	str	r1, [sp, #4]
   16fb8:	strb	r2, [r8, r0]
   16fbc:	b	17010 <__assert_fail@plt+0x609c>
   16fc0:	mov	r7, r0
   16fc4:	str	r6, [sp, #24]
   16fc8:	add	r0, r5, r6, lsl #4
   16fcc:	ldr	sl, [r0, #16]
   16fd0:	cmp	sl, #0
   16fd4:	bne	16f00 <__assert_fail@plt+0x5f8c>
   16fd8:	b	17054 <__assert_fail@plt+0x60e0>
   16fdc:	ldr	r1, [sp, #32]
   16fe0:	cmp	r1, #0
   16fe4:	bne	16ef0 <__assert_fail@plt+0x5f7c>
   16fe8:	ldr	r0, [r0, #12]
   16fec:	ldr	r1, [r7, #12]
   16ff0:	cmp	r1, r0
   16ff4:	bne	16f58 <__assert_fail@plt+0x5fe4>
   16ff8:	b	16ef0 <__assert_fail@plt+0x5f7c>
   16ffc:	ldr	r8, [sp, #20]
   17000:	mov	r0, #1
   17004:	str	r0, [sp, #32]
   17008:	cmp	r8, #0
   1700c:	beq	1703c <__assert_fail@plt+0x60c8>
   17010:	mov	r0, #1
   17014:	str	r8, [sp, #20]
   17018:	strb	r0, [r8, r6]
   1701c:	add	r0, r5, r6, lsl #4
   17020:	ldr	sl, [r0, #16]
   17024:	cmp	sl, #0
   17028:	bne	16f00 <__assert_fail@plt+0x5f8c>
   1702c:	b	17054 <__assert_fail@plt+0x60e0>
   17030:	ldr	r3, [sp, #36]	; 0x24
   17034:	mov	r0, #1
   17038:	str	r0, [sp, #32]
   1703c:	mov	r0, #0
   17040:	str	r0, [sp, #20]
   17044:	add	r0, r5, r6, lsl #4
   17048:	ldr	sl, [r0, #16]
   1704c:	cmp	sl, #0
   17050:	bne	16f00 <__assert_fail@plt+0x5f8c>
   17054:	ldr	r6, [sp, #28]
   17058:	ldr	r1, [sp, #20]
   1705c:	ldr	r8, [sp, #4]
   17060:	cmp	r1, #0
   17064:	ldreq	r0, [sp, #32]
   17068:	cmpeq	r0, #0
   1706c:	bne	16e48 <__assert_fail@plt+0x5ed4>
   17070:	cmp	r7, #0
   17074:	beq	17118 <__assert_fail@plt+0x61a4>
   17078:	ldr	r1, [fp, #16]
   1707c:	mov	r0, #0
   17080:	str	r0, [r1, #20]
   17084:	mov	r2, r1
   17088:	ldr	r1, [r1]
   1708c:	add	r0, r1, #1
   17090:	str	r0, [r2]
   17094:	ldrb	r3, [r9]
   17098:	ldr	r2, [r7, #4]
   1709c:	cmp	r3, #0
   170a0:	beq	170bc <__assert_fail@plt+0x6148>
   170a4:	cmp	r2, #0
   170a8:	beq	17198 <__assert_fail@plt+0x6224>
   170ac:	ldr	r1, [fp, #16]
   170b0:	add	r0, r9, #1
   170b4:	str	r0, [r1, #12]
   170b8:	b	170e8 <__assert_fail@plt+0x6174>
   170bc:	cmp	r2, #1
   170c0:	bne	170e8 <__assert_fail@plt+0x6174>
   170c4:	ldr	r2, [sp, #8]
   170c8:	cmp	r0, r2
   170cc:	bge	17258 <__assert_fail@plt+0x62e4>
   170d0:	ldr	r2, [fp, #16]
   170d4:	add	r1, r1, #2
   170d8:	str	r1, [r2]
   170dc:	ldr	r1, [sp, #16]
   170e0:	ldr	r0, [r1, r0, lsl #2]
   170e4:	str	r0, [r2, #12]
   170e8:	ldr	r0, [fp, #8]
   170ec:	cmp	r0, #0
   170f0:	ldrne	r1, [sp, #24]
   170f4:	strne	r1, [r0]
   170f8:	ldr	r1, [r7, #8]
   170fc:	ldr	r0, [r7, #12]
   17100:	cmp	r1, #0
   17104:	beq	17280 <__assert_fail@plt+0x630c>
   17108:	str	r0, [r1]
   1710c:	mov	r0, #0
   17110:	sub	sp, fp, #28
   17114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17118:	ldr	r0, [fp, #12]
   1711c:	cmp	r0, #0
   17120:	beq	17164 <__assert_fail@plt+0x61f0>
   17124:	ldr	r0, [fp, #16]
   17128:	ldr	r1, [sp, #16]
   1712c:	ldr	r0, [r0]
   17130:	ldr	r0, [r1, r0, lsl #2]
   17134:	ldrb	r0, [r0, #1]
   17138:	cmp	r0, #45	; 0x2d
   1713c:	beq	17164 <__assert_fail@plt+0x61f0>
   17140:	ldr	r0, [fp, #16]
   17144:	ldr	r0, [r0, #20]
   17148:	ldrb	r1, [r0]
   1714c:	ldr	r0, [sp, #12]
   17150:	bl	10e54 <strchr@plt>
   17154:	mov	r1, r0
   17158:	mvn	r0, #0
   1715c:	cmp	r1, #0
   17160:	bne	17280 <__assert_fail@plt+0x630c>
   17164:	ldr	r0, [fp, #20]
   17168:	cmp	r0, #0
   1716c:	bne	17380 <__assert_fail@plt+0x640c>
   17170:	ldr	r1, [fp, #16]
   17174:	mov	r0, #0
   17178:	str	r0, [r1, #20]
   1717c:	str	r0, [r1, #8]
   17180:	ldr	r0, [r1]
   17184:	add	r0, r0, #1
   17188:	str	r0, [r1]
   1718c:	mov	r0, #63	; 0x3f
   17190:	sub	sp, fp, #28
   17194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17198:	ldr	r0, [fp, #20]
   1719c:	cmp	r0, #0
   171a0:	bne	173b4 <__assert_fail@plt+0x6440>
   171a4:	ldr	r0, [r7, #12]
   171a8:	ldr	r1, [fp, #16]
   171ac:	str	r0, [r1, #8]
   171b0:	mov	r0, #63	; 0x3f
   171b4:	sub	sp, fp, #28
   171b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171bc:	ldr	r5, [sp, #28]
   171c0:	mov	r0, #0
   171c4:	mov	r6, #0
   171c8:	mov	r7, #0
   171cc:	str	r0, [sp, #32]
   171d0:	mvn	r0, #0
   171d4:	str	r0, [sp, #24]
   171d8:	b	171fc <__assert_fail@plt+0x6288>
   171dc:	ldr	r0, [sp, #32]
   171e0:	cmp	r0, #0
   171e4:	movweq	r0, #1
   171e8:	str	r0, [sp, #32]
   171ec:	ldr	sl, [r5, #16]!
   171f0:	add	r6, r6, #1
   171f4:	cmp	sl, #0
   171f8:	beq	17238 <__assert_fail@plt+0x62c4>
   171fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17200:	mov	r0, sl
   17204:	mov	r1, r8
   17208:	bl	10f2c <strncmp@plt>
   1720c:	cmp	r0, #0
   17210:	bne	171ec <__assert_fail@plt+0x6278>
   17214:	cmp	r7, #0
   17218:	bne	171dc <__assert_fail@plt+0x6268>
   1721c:	mov	r7, r5
   17220:	mov	r0, r6
   17224:	str	r6, [sp, #24]
   17228:	ldr	sl, [r5, #16]!
   1722c:	add	r6, r6, #1
   17230:	cmp	sl, #0
   17234:	bne	171fc <__assert_fail@plt+0x6288>
   17238:	ldr	r6, [sp, #28]
   1723c:	mov	r1, #0
   17240:	mov	r8, #0
   17244:	cmp	r1, #0
   17248:	ldreq	r0, [sp, #32]
   1724c:	cmpeq	r0, #0
   17250:	bne	16e48 <__assert_fail@plt+0x5ed4>
   17254:	b	17070 <__assert_fail@plt+0x60fc>
   17258:	ldr	r0, [fp, #20]
   1725c:	cmp	r0, #0
   17260:	bne	173e4 <__assert_fail@plt+0x6470>
   17264:	ldr	r0, [r7, #12]
   17268:	ldr	r1, [fp, #16]
   1726c:	str	r0, [r1, #8]
   17270:	ldr	r0, [sp, #12]
   17274:	ldrb	r0, [r0]
   17278:	cmp	r0, #58	; 0x3a
   1727c:	movwne	r0, #63	; 0x3f
   17280:	sub	sp, fp, #28
   17284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17288:	movw	sl, #41232	; 0xa110
   1728c:	mov	r9, r1
   17290:	ldr	r1, [sp, #32]
   17294:	movt	sl, #2
   17298:	ldr	r0, [sl]
   1729c:	cmp	r1, #0
   172a0:	beq	172d8 <__assert_fail@plt+0x6364>
   172a4:	ldr	r1, [sp, #16]
   172a8:	ldr	r3, [fp, #24]
   172ac:	ldr	r2, [r1]
   172b0:	ldr	r1, [fp, #16]
   172b4:	ldr	r1, [r1, #20]
   172b8:	str	r1, [sp]
   172bc:	movw	r1, #37812	; 0x93b4
   172c0:	movt	r1, #1
   172c4:	bl	10e6c <fprintf@plt>
   172c8:	mov	r1, r9
   172cc:	cmp	r8, #0
   172d0:	bne	16e5c <__assert_fail@plt+0x5ee8>
   172d4:	b	16e64 <__assert_fail@plt+0x5ef0>
   172d8:	bl	10ef0 <flockfile@plt>
   172dc:	ldr	r1, [fp, #16]
   172e0:	ldr	r0, [sp, #16]
   172e4:	ldr	r5, [fp, #24]
   172e8:	ldr	r1, [r1, #20]
   172ec:	ldr	r2, [r0]
   172f0:	ldr	r0, [sl]
   172f4:	mov	r3, r5
   172f8:	str	r1, [sp]
   172fc:	movw	r1, #37844	; 0x93d4
   17300:	movt	r1, #1
   17304:	bl	10e6c <fprintf@plt>
   17308:	cmp	r4, #0
   1730c:	beq	1735c <__assert_fail@plt+0x63e8>
   17310:	mov	r7, r9
   17314:	ldrb	r0, [r7]
   17318:	cmp	r0, #0
   1731c:	bne	17334 <__assert_fail@plt+0x63c0>
   17320:	add	r6, r6, #16
   17324:	add	r7, r7, #1
   17328:	subs	r4, r4, #1
   1732c:	bne	17314 <__assert_fail@plt+0x63a0>
   17330:	b	1735c <__assert_fail@plt+0x63e8>
   17334:	ldr	r3, [r6]
   17338:	ldr	r0, [sl]
   1733c:	movw	r1, #37891	; 0x9403
   17340:	mov	r2, r5
   17344:	movt	r1, #1
   17348:	bl	10e6c <fprintf@plt>
   1734c:	add	r6, r6, #16
   17350:	add	r7, r7, #1
   17354:	subs	r4, r4, #1
   17358:	bne	17314 <__assert_fail@plt+0x63a0>
   1735c:	ldr	r1, [sl]
   17360:	mov	r0, #10
   17364:	bl	10eb4 <fputc@plt>
   17368:	ldr	r0, [sl]
   1736c:	bl	10da0 <funlockfile@plt>
   17370:	mov	r1, r9
   17374:	cmp	r8, #0
   17378:	bne	16e5c <__assert_fail@plt+0x5ee8>
   1737c:	b	16e64 <__assert_fail@plt+0x5ef0>
   17380:	ldr	r1, [fp, #16]
   17384:	ldr	r0, [sp, #16]
   17388:	ldr	r3, [fp, #24]
   1738c:	ldr	r2, [r0]
   17390:	movw	r0, #41232	; 0xa110
   17394:	ldr	r1, [r1, #20]
   17398:	movt	r0, #2
   1739c:	ldr	r0, [r0]
   173a0:	str	r1, [sp]
   173a4:	movw	r1, #37899	; 0x940b
   173a8:	movt	r1, #1
   173ac:	bl	10e6c <fprintf@plt>
   173b0:	b	17170 <__assert_fail@plt+0x61fc>
   173b4:	ldr	r0, [sp, #16]
   173b8:	ldr	r1, [r7]
   173bc:	ldr	r3, [fp, #24]
   173c0:	ldr	r2, [r0]
   173c4:	movw	r0, #41232	; 0xa110
   173c8:	str	r1, [sp]
   173cc:	movw	r1, #37931	; 0x942b
   173d0:	movt	r0, #2
   173d4:	movt	r1, #1
   173d8:	ldr	r0, [r0]
   173dc:	bl	10e6c <fprintf@plt>
   173e0:	b	171a4 <__assert_fail@plt+0x6230>
   173e4:	ldr	r0, [sp, #16]
   173e8:	ldr	r1, [r7]
   173ec:	ldr	r3, [fp, #24]
   173f0:	ldr	r2, [r0]
   173f4:	movw	r0, #41232	; 0xa110
   173f8:	str	r1, [sp]
   173fc:	movw	r1, #37976	; 0x9458
   17400:	movt	r0, #2
   17404:	movt	r1, #1
   17408:	ldr	r0, [r0]
   1740c:	bl	10e6c <fprintf@plt>
   17410:	b	17264 <__assert_fail@plt+0x62f0>
   17414:	push	{r4, r5, r6, r7, fp, lr}
   17418:	add	fp, sp, #16
   1741c:	sub	sp, sp, #16
   17420:	movw	r6, #41220	; 0xa104
   17424:	movw	r7, #41264	; 0xa130
   17428:	movt	r6, #2
   1742c:	movt	r7, #2
   17430:	ldm	r6, {r4, r5}
   17434:	str	r7, [sp, #8]
   17438:	stm	r7, {r4, r5}
   1743c:	ldr	r5, [fp, #16]
   17440:	str	r5, [sp, #12]
   17444:	ldr	r5, [fp, #12]
   17448:	str	r5, [sp, #4]
   1744c:	ldr	r5, [fp, #8]
   17450:	str	r5, [sp]
   17454:	bl	15ef4 <__assert_fail@plt+0x4f80>
   17458:	ldr	r1, [r7]
   1745c:	ldr	r2, [r7, #8]
   17460:	ldr	r3, [r7, #12]
   17464:	str	r1, [r6]
   17468:	movw	r1, #41404	; 0xa1bc
   1746c:	str	r2, [r6, #8]
   17470:	movt	r1, #2
   17474:	str	r3, [r1]
   17478:	sub	sp, fp, #16
   1747c:	pop	{r4, r5, r6, r7, fp, pc}
   17480:	push	{r4, r5, r6, sl, fp, lr}
   17484:	add	fp, sp, #16
   17488:	sub	sp, sp, #16
   1748c:	movw	r5, #41220	; 0xa104
   17490:	movw	r6, #41264	; 0xa130
   17494:	movt	r5, #2
   17498:	movt	r6, #2
   1749c:	ldm	r5, {r3, r4}
   174a0:	stm	r6, {r3, r4}
   174a4:	mov	r4, #0
   174a8:	mov	r3, #1
   174ac:	str	r4, [sp]
   174b0:	stmib	sp, {r4, r6}
   174b4:	str	r3, [sp, #12]
   174b8:	mov	r3, #0
   174bc:	bl	15ef4 <__assert_fail@plt+0x4f80>
   174c0:	ldr	r1, [r6]
   174c4:	ldr	r2, [r6, #8]
   174c8:	ldr	r3, [r6, #12]
   174cc:	str	r1, [r5]
   174d0:	movw	r1, #41404	; 0xa1bc
   174d4:	str	r2, [r5, #8]
   174d8:	movt	r1, #2
   174dc:	str	r3, [r1]
   174e0:	sub	sp, fp, #16
   174e4:	pop	{r4, r5, r6, sl, fp, pc}
   174e8:	ldr	r0, [r0, #8]
   174ec:	bx	lr
   174f0:	ldr	r0, [r0, #12]
   174f4:	bx	lr
   174f8:	ldr	r0, [r0, #16]
   174fc:	bx	lr
   17500:	ldm	r0, {r2, ip}
   17504:	mov	r0, #0
   17508:	cmp	r2, ip
   1750c:	bxcs	lr
   17510:	mov	r0, #0
   17514:	ldr	r1, [r2]
   17518:	cmp	r1, #0
   1751c:	bne	17538 <__assert_fail@plt+0x65c4>
   17520:	add	r2, r2, #8
   17524:	cmp	r2, ip
   17528:	bcs	17564 <__assert_fail@plt+0x65f0>
   1752c:	ldr	r1, [r2]
   17530:	cmp	r1, #0
   17534:	beq	17520 <__assert_fail@plt+0x65ac>
   17538:	mov	r3, #0
   1753c:	mov	r1, r2
   17540:	ldr	r1, [r1, #4]
   17544:	add	r3, r3, #1
   17548:	cmp	r1, #0
   1754c:	bne	17540 <__assert_fail@plt+0x65cc>
   17550:	cmp	r3, r0
   17554:	movhi	r0, r3
   17558:	add	r2, r2, #8
   1755c:	cmp	r2, ip
   17560:	bcc	1752c <__assert_fail@plt+0x65b8>
   17564:	bx	lr
   17568:	push	{fp, lr}
   1756c:	mov	fp, sp
   17570:	ldm	r0, {r3, ip}
   17574:	mov	lr, #0
   17578:	mov	r1, #0
   1757c:	cmp	r3, ip
   17580:	bcs	175d4 <__assert_fail@plt+0x6660>
   17584:	mov	r1, #0
   17588:	mov	lr, #0
   1758c:	ldr	r2, [r3]
   17590:	cmp	r2, #0
   17594:	bne	175b0 <__assert_fail@plt+0x663c>
   17598:	add	r3, r3, #8
   1759c:	cmp	r3, ip
   175a0:	bcs	175d4 <__assert_fail@plt+0x6660>
   175a4:	ldr	r2, [r3]
   175a8:	cmp	r2, #0
   175ac:	beq	17598 <__assert_fail@plt+0x6624>
   175b0:	mov	r2, r3
   175b4:	ldr	r2, [r2, #4]
   175b8:	add	r1, r1, #1
   175bc:	cmp	r2, #0
   175c0:	bne	175b4 <__assert_fail@plt+0x6640>
   175c4:	add	lr, lr, #1
   175c8:	add	r3, r3, #8
   175cc:	cmp	r3, ip
   175d0:	bcc	175a4 <__assert_fail@plt+0x6630>
   175d4:	ldr	r2, [r0, #12]
   175d8:	cmp	lr, r2
   175dc:	bne	175f4 <__assert_fail@plt+0x6680>
   175e0:	ldr	r2, [r0, #16]
   175e4:	mov	r0, #1
   175e8:	cmp	r1, r2
   175ec:	movne	r0, #0
   175f0:	pop	{fp, pc}
   175f4:	mov	r0, #0
   175f8:	pop	{fp, pc}
   175fc:	nop	{0}
   17600:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17604:	add	fp, sp, #24
   17608:	sub	sp, sp, #8
   1760c:	ldr	r6, [r0]
   17610:	ldmib	r0, {r3, r7, r8}
   17614:	ldr	r2, [r0, #16]
   17618:	mov	r4, r1
   1761c:	mov	r5, #0
   17620:	cmp	r6, r3
   17624:	bcs	1767c <__assert_fail@plt+0x6708>
   17628:	mov	r5, #0
   1762c:	ldr	r0, [r6]
   17630:	cmp	r0, #0
   17634:	bne	17650 <__assert_fail@plt+0x66dc>
   17638:	add	r6, r6, #8
   1763c:	cmp	r6, r3
   17640:	bcs	1767c <__assert_fail@plt+0x6708>
   17644:	ldr	r0, [r6]
   17648:	cmp	r0, #0
   1764c:	beq	17638 <__assert_fail@plt+0x66c4>
   17650:	mov	r0, #0
   17654:	mov	r1, r6
   17658:	ldr	r1, [r1, #4]
   1765c:	add	r0, r0, #1
   17660:	cmp	r1, #0
   17664:	bne	17658 <__assert_fail@plt+0x66e4>
   17668:	cmp	r0, r5
   1766c:	movhi	r5, r0
   17670:	add	r6, r6, #8
   17674:	cmp	r6, r3
   17678:	bcc	17644 <__assert_fail@plt+0x66d0>
   1767c:	movw	r1, #38016	; 0x9480
   17680:	mov	r0, r4
   17684:	movt	r1, #1
   17688:	bl	10e6c <fprintf@plt>
   1768c:	movw	r1, #38040	; 0x9498
   17690:	mov	r0, r4
   17694:	mov	r2, r7
   17698:	movt	r1, #1
   1769c:	bl	10e6c <fprintf@plt>
   176a0:	vmov	s0, r8
   176a4:	vldr	d16, [pc, #68]	; 176f0 <__assert_fail@plt+0x677c>
   176a8:	movw	r1, #38064	; 0x94b0
   176ac:	mov	r0, r4
   176b0:	mov	r2, r8
   176b4:	movt	r1, #1
   176b8:	vcvt.f64.u32	d17, s0
   176bc:	vmov	s0, r7
   176c0:	vcvt.f64.u32	d18, s0
   176c4:	vmul.f64	d16, d17, d16
   176c8:	vdiv.f64	d16, d16, d18
   176cc:	vstr	d16, [sp]
   176d0:	bl	10e6c <fprintf@plt>
   176d4:	movw	r1, #38097	; 0x94d1
   176d8:	mov	r0, r4
   176dc:	mov	r2, r5
   176e0:	movt	r1, #1
   176e4:	sub	sp, fp, #24
   176e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   176ec:	b	10e6c <fprintf@plt>
   176f0:	andeq	r0, r0, r0
   176f4:	subsmi	r0, r9, r0
   176f8:	push	{r4, r5, r6, r7, fp, lr}
   176fc:	add	fp, sp, #16
   17700:	mov	r4, r1
   17704:	ldr	r1, [r0, #8]
   17708:	ldr	r2, [r0, #24]
   1770c:	mov	r5, r0
   17710:	mov	r0, r4
   17714:	blx	r2
   17718:	ldr	r1, [r5, #8]
   1771c:	cmp	r0, r1
   17720:	bcs	17788 <__assert_fail@plt+0x6814>
   17724:	ldr	r7, [r5]
   17728:	mov	r6, #0
   1772c:	ldr	r1, [r7, r0, lsl #3]!
   17730:	cmp	r1, #0
   17734:	cmpne	r7, #0
   17738:	bne	17768 <__assert_fail@plt+0x67f4>
   1773c:	mov	r0, r6
   17740:	pop	{r4, r5, r6, r7, fp, pc}
   17744:	ldr	r2, [r5, #28]
   17748:	mov	r0, r4
   1774c:	blx	r2
   17750:	cmp	r0, #0
   17754:	bne	1777c <__assert_fail@plt+0x6808>
   17758:	ldr	r7, [r7, #4]
   1775c:	cmp	r7, #0
   17760:	beq	1773c <__assert_fail@plt+0x67c8>
   17764:	ldr	r1, [r7]
   17768:	cmp	r1, r4
   1776c:	bne	17744 <__assert_fail@plt+0x67d0>
   17770:	mov	r6, r4
   17774:	mov	r0, r6
   17778:	pop	{r4, r5, r6, r7, fp, pc}
   1777c:	ldr	r6, [r7]
   17780:	mov	r0, r6
   17784:	pop	{r4, r5, r6, r7, fp, pc}
   17788:	bl	10f38 <abort@plt>
   1778c:	push	{fp, lr}
   17790:	mov	fp, sp
   17794:	ldr	r1, [r0, #16]
   17798:	cmp	r1, #0
   1779c:	beq	177bc <__assert_fail@plt+0x6848>
   177a0:	ldm	r0, {r1, r2}
   177a4:	cmp	r1, r2
   177a8:	bcs	177c4 <__assert_fail@plt+0x6850>
   177ac:	ldr	r0, [r1], #8
   177b0:	cmp	r0, #0
   177b4:	beq	177a4 <__assert_fail@plt+0x6830>
   177b8:	pop	{fp, pc}
   177bc:	mov	r0, #0
   177c0:	pop	{fp, pc}
   177c4:	bl	10f38 <abort@plt>
   177c8:	push	{r4, r5, fp, lr}
   177cc:	add	fp, sp, #8
   177d0:	mov	r5, r1
   177d4:	ldr	r1, [r0, #8]
   177d8:	ldr	r2, [r0, #24]
   177dc:	mov	r4, r0
   177e0:	mov	r0, r5
   177e4:	blx	r2
   177e8:	ldr	r1, [r4, #8]
   177ec:	cmp	r0, r1
   177f0:	bcs	17854 <__assert_fail@plt+0x68e0>
   177f4:	ldr	r1, [r4]
   177f8:	add	r2, r1, r0, lsl #3
   177fc:	ldr	r3, [r2]
   17800:	ldr	r2, [r2, #4]
   17804:	cmp	r3, r5
   17808:	beq	17818 <__assert_fail@plt+0x68a4>
   1780c:	cmp	r2, #0
   17810:	bne	177fc <__assert_fail@plt+0x6888>
   17814:	b	17828 <__assert_fail@plt+0x68b4>
   17818:	cmp	r2, #0
   1781c:	beq	17828 <__assert_fail@plt+0x68b4>
   17820:	ldr	r0, [r2]
   17824:	pop	{r4, r5, fp, pc}
   17828:	ldr	r2, [r4, #4]
   1782c:	add	r0, r1, r0, lsl #3
   17830:	add	r1, r0, #8
   17834:	cmp	r1, r2
   17838:	bcs	1784c <__assert_fail@plt+0x68d8>
   1783c:	ldr	r0, [r1], #8
   17840:	cmp	r0, #0
   17844:	beq	17834 <__assert_fail@plt+0x68c0>
   17848:	pop	{r4, r5, fp, pc}
   1784c:	mov	r0, #0
   17850:	pop	{r4, r5, fp, pc}
   17854:	bl	10f38 <abort@plt>
   17858:	push	{r4, r5, fp, lr}
   1785c:	add	fp, sp, #8
   17860:	ldm	r0, {r5, lr}
   17864:	mov	ip, r0
   17868:	mov	r0, #0
   1786c:	cmp	r5, lr
   17870:	popcs	{r4, r5, fp, pc}
   17874:	mov	r0, #0
   17878:	ldr	r3, [r5]
   1787c:	cmp	r3, #0
   17880:	cmpne	r5, #0
   17884:	beq	17890 <__assert_fail@plt+0x691c>
   17888:	b	178ac <__assert_fail@plt+0x6938>
   1788c:	ldr	lr, [ip, #4]
   17890:	add	r5, r5, #8
   17894:	cmp	r5, lr
   17898:	bcs	178d4 <__assert_fail@plt+0x6960>
   1789c:	ldr	r3, [r5]
   178a0:	cmp	r3, #0
   178a4:	cmpne	r5, #0
   178a8:	beq	17890 <__assert_fail@plt+0x691c>
   178ac:	mov	r3, r5
   178b0:	cmp	r0, r2
   178b4:	bcs	178d4 <__assert_fail@plt+0x6960>
   178b8:	ldr	r4, [r3]
   178bc:	str	r4, [r1, r0, lsl #2]
   178c0:	add	r0, r0, #1
   178c4:	ldr	r3, [r3, #4]
   178c8:	cmp	r3, #0
   178cc:	bne	178b0 <__assert_fail@plt+0x693c>
   178d0:	b	1788c <__assert_fail@plt+0x6918>
   178d4:	pop	{r4, r5, fp, pc}
   178d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   178dc:	add	fp, sp, #24
   178e0:	mov	r5, r1
   178e4:	ldr	r4, [r0]
   178e8:	ldr	r1, [r0, #4]
   178ec:	mov	r6, #0
   178f0:	cmp	r4, r1
   178f4:	bcs	17970 <__assert_fail@plt+0x69fc>
   178f8:	mov	r9, r2
   178fc:	mov	r8, r0
   17900:	mov	r6, #0
   17904:	ldr	r0, [r4]
   17908:	cmp	r0, #0
   1790c:	cmpne	r4, #0
   17910:	beq	1791c <__assert_fail@plt+0x69a8>
   17914:	b	17938 <__assert_fail@plt+0x69c4>
   17918:	ldr	r1, [r8, #4]
   1791c:	add	r4, r4, #8
   17920:	cmp	r4, r1
   17924:	bcs	17970 <__assert_fail@plt+0x69fc>
   17928:	ldr	r0, [r4]
   1792c:	cmp	r0, #0
   17930:	cmpne	r4, #0
   17934:	beq	1791c <__assert_fail@plt+0x69a8>
   17938:	mov	r1, r9
   1793c:	blx	r5
   17940:	cmp	r0, #0
   17944:	beq	17970 <__assert_fail@plt+0x69fc>
   17948:	mov	r7, r4
   1794c:	ldr	r7, [r7, #4]
   17950:	add	r6, r6, #1
   17954:	cmp	r7, #0
   17958:	beq	17918 <__assert_fail@plt+0x69a4>
   1795c:	ldr	r0, [r7]
   17960:	mov	r1, r9
   17964:	blx	r5
   17968:	cmp	r0, #0
   1796c:	bne	1794c <__assert_fail@plt+0x69d8>
   17970:	mov	r0, r6
   17974:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17978:	ldrb	r2, [r0]
   1797c:	cmp	r2, #0
   17980:	moveq	r0, #0
   17984:	bxeq	lr
   17988:	add	r3, r0, #1
   1798c:	mov	r0, #0
   17990:	rsb	r0, r0, r0, lsl #5
   17994:	uxtab	r0, r0, r2
   17998:	udiv	r2, r0, r1
   1799c:	mls	r0, r2, r1, r0
   179a0:	ldrb	r2, [r3], #1
   179a4:	cmp	r2, #0
   179a8:	bne	17990 <__assert_fail@plt+0x6a1c>
   179ac:	bx	lr
   179b0:	movw	r1, #38128	; 0x94f0
   179b4:	movt	r1, #1
   179b8:	vld1.32	{d16-d17}, [r1]!
   179bc:	ldr	r1, [r1]
   179c0:	vst1.32	{d16-d17}, [r0]!
   179c4:	str	r1, [r0]
   179c8:	bx	lr
   179cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   179d0:	add	fp, sp, #24
   179d4:	movw	r9, #31744	; 0x7c00
   179d8:	cmp	r3, #0
   179dc:	movw	r5, #31724	; 0x7bec
   179e0:	mov	r6, r0
   179e4:	mov	r0, #40	; 0x28
   179e8:	mov	r7, r1
   179ec:	movt	r9, #1
   179f0:	movne	r9, r3
   179f4:	cmp	r2, #0
   179f8:	movt	r5, #1
   179fc:	movne	r5, r2
   17a00:	bl	18bb8 <__assert_fail@plt+0x7c44>
   17a04:	mov	r8, #0
   17a08:	cmp	r0, #0
   17a0c:	beq	17bd4 <__assert_fail@plt+0x6c60>
   17a10:	mov	r4, r0
   17a14:	movw	r0, #38128	; 0x94f0
   17a18:	cmp	r7, #0
   17a1c:	movt	r0, #1
   17a20:	moveq	r7, r0
   17a24:	cmp	r7, r0
   17a28:	str	r7, [r4, #20]
   17a2c:	beq	17aa8 <__assert_fail@plt+0x6b34>
   17a30:	vldr	s2, [pc, #420]	; 17bdc <__assert_fail@plt+0x6c68>
   17a34:	vldr	s0, [r7, #8]
   17a38:	vcmpe.f32	s0, s2
   17a3c:	vmrs	APSR_nzcv, fpscr
   17a40:	ble	17b54 <__assert_fail@plt+0x6be0>
   17a44:	vldr	s4, [pc, #404]	; 17be0 <__assert_fail@plt+0x6c6c>
   17a48:	vcmpe.f32	s0, s4
   17a4c:	vmrs	APSR_nzcv, fpscr
   17a50:	bpl	17b54 <__assert_fail@plt+0x6be0>
   17a54:	vldr	s4, [pc, #392]	; 17be4 <__assert_fail@plt+0x6c70>
   17a58:	vldr	s6, [r7, #12]
   17a5c:	vcmpe.f32	s6, s4
   17a60:	vmrs	APSR_nzcv, fpscr
   17a64:	ble	17b54 <__assert_fail@plt+0x6be0>
   17a68:	vldr	s4, [r7]
   17a6c:	vcmpe.f32	s4, #0.0
   17a70:	vmrs	APSR_nzcv, fpscr
   17a74:	blt	17b54 <__assert_fail@plt+0x6be0>
   17a78:	vadd.f32	s2, s4, s2
   17a7c:	vcmpe.f32	s2, s0
   17a80:	vmrs	APSR_nzcv, fpscr
   17a84:	bpl	17b54 <__assert_fail@plt+0x6be0>
   17a88:	vldr	s0, [r7, #4]
   17a8c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17a90:	vcmpe.f32	s0, s4
   17a94:	vmrs	APSR_nzcv, fpscr
   17a98:	bhi	17b54 <__assert_fail@plt+0x6be0>
   17a9c:	vcmpe.f32	s2, s0
   17aa0:	vmrs	APSR_nzcv, fpscr
   17aa4:	bpl	17b54 <__assert_fail@plt+0x6be0>
   17aa8:	ldrb	r0, [r7, #16]
   17aac:	cmp	r0, #0
   17ab0:	bne	17adc <__assert_fail@plt+0x6b68>
   17ab4:	vmov	s2, r6
   17ab8:	vldr	s0, [r7, #8]
   17abc:	vldr	s4, [pc, #292]	; 17be8 <__assert_fail@plt+0x6c74>
   17ac0:	vcvt.f32.u32	s2, s2
   17ac4:	vdiv.f32	s2, s2, s0
   17ac8:	vcvt.u32.f32	s0, s2
   17acc:	vcmpe.f32	s2, s4
   17ad0:	vmrs	APSR_nzcv, fpscr
   17ad4:	bge	17b70 <__assert_fail@plt+0x6bfc>
   17ad8:	vmov	r6, s0
   17adc:	cmp	r6, #10
   17ae0:	movls	r6, #10
   17ae4:	orr	r0, r6, #1
   17ae8:	cmn	r0, #1
   17aec:	beq	17b70 <__assert_fail@plt+0x6bfc>
   17af0:	ldr	r6, [fp, #8]
   17af4:	mov	r1, #3
   17af8:	cmp	r0, #10
   17afc:	bcc	17b34 <__assert_fail@plt+0x6bc0>
   17b00:	mov	r1, #3
   17b04:	mov	r3, #9
   17b08:	mov	r2, #12
   17b0c:	udiv	r7, r0, r1
   17b10:	mls	r7, r7, r1, r0
   17b14:	cmp	r7, #0
   17b18:	beq	17b34 <__assert_fail@plt+0x6bc0>
   17b1c:	add	r3, r3, r2
   17b20:	add	r2, r2, #8
   17b24:	add	r1, r1, #2
   17b28:	add	r3, r3, #4
   17b2c:	cmp	r3, r0
   17b30:	bcc	17b0c <__assert_fail@plt+0x6b98>
   17b34:	udiv	r2, r0, r1
   17b38:	mls	r1, r2, r1, r0
   17b3c:	cmp	r1, #0
   17b40:	bne	17b68 <__assert_fail@plt+0x6bf4>
   17b44:	add	r0, r0, #2
   17b48:	cmn	r0, #1
   17b4c:	bne	17af4 <__assert_fail@plt+0x6b80>
   17b50:	b	17b70 <__assert_fail@plt+0x6bfc>
   17b54:	str	r0, [r4, #20]
   17b58:	mov	r0, r4
   17b5c:	bl	136b8 <__assert_fail@plt+0x2744>
   17b60:	mov	r0, r8
   17b64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b68:	cmp	r0, #536870912	; 0x20000000
   17b6c:	bcc	17b88 <__assert_fail@plt+0x6c14>
   17b70:	mov	r0, #0
   17b74:	str	r0, [r4, #8]
   17b78:	mov	r0, r4
   17b7c:	bl	136b8 <__assert_fail@plt+0x2744>
   17b80:	mov	r0, r8
   17b84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b88:	cmp	r0, #0
   17b8c:	str	r0, [r4, #8]
   17b90:	beq	17b78 <__assert_fail@plt+0x6c04>
   17b94:	mov	r1, #8
   17b98:	bl	18b64 <__assert_fail@plt+0x7bf0>
   17b9c:	cmp	r0, #0
   17ba0:	str	r0, [r4]
   17ba4:	beq	17b78 <__assert_fail@plt+0x6c04>
   17ba8:	mov	r1, #0
   17bac:	str	r5, [r4, #24]
   17bb0:	str	r9, [r4, #28]
   17bb4:	str	r6, [r4, #32]
   17bb8:	mov	r8, r4
   17bbc:	str	r1, [r4, #36]	; 0x24
   17bc0:	str	r1, [r4, #12]
   17bc4:	str	r1, [r4, #16]
   17bc8:	ldr	r1, [r4, #8]
   17bcc:	add	r0, r0, r1, lsl #3
   17bd0:	str	r0, [r4, #4]
   17bd4:	mov	r0, r8
   17bd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17bdc:	stclcc	12, cr12, [ip, #820]	; 0x334
   17be0:	svccc	0x00666666
   17be4:	svccc	0x008ccccd
   17be8:	svcmi	0x00800000
   17bec:	ror	r2, r0, #3
   17bf0:	udiv	r2, r2, r1
   17bf4:	mul	r1, r2, r1
   17bf8:	rsb	r0, r1, r0, ror #3
   17bfc:	bx	lr
   17c00:	sub	r0, r0, r1
   17c04:	clz	r0, r0
   17c08:	lsr	r0, r0, #5
   17c0c:	bx	lr
   17c10:	push	{r4, r5, r6, r7, fp, lr}
   17c14:	add	fp, sp, #16
   17c18:	mov	r4, r0
   17c1c:	ldr	r5, [r0]
   17c20:	ldr	r0, [r0, #4]
   17c24:	cmp	r5, r0
   17c28:	bcs	17cd8 <__assert_fail@plt+0x6d64>
   17c2c:	mov	r6, #0
   17c30:	ldr	r1, [r5]
   17c34:	cmp	r1, #0
   17c38:	bne	17c64 <__assert_fail@plt+0x6cf0>
   17c3c:	b	17c4c <__assert_fail@plt+0x6cd8>
   17c40:	str	r6, [r5]
   17c44:	str	r6, [r5, #4]
   17c48:	ldr	r0, [r4, #4]
   17c4c:	add	r5, r5, #8
   17c50:	cmp	r5, r0
   17c54:	bcs	17cd8 <__assert_fail@plt+0x6d64>
   17c58:	ldr	r1, [r5]
   17c5c:	cmp	r1, #0
   17c60:	beq	17c4c <__assert_fail@plt+0x6cd8>
   17c64:	ldr	r1, [r4, #32]
   17c68:	ldr	r7, [r5, #4]
   17c6c:	cmp	r1, #0
   17c70:	mov	r0, r1
   17c74:	movwne	r0, #1
   17c78:	cmp	r7, #0
   17c7c:	bne	17cc0 <__assert_fail@plt+0x6d4c>
   17c80:	cmp	r0, #0
   17c84:	beq	17c40 <__assert_fail@plt+0x6ccc>
   17c88:	ldr	r0, [r5]
   17c8c:	blx	r1
   17c90:	b	17c40 <__assert_fail@plt+0x6ccc>
   17c94:	str	r6, [r7]
   17c98:	cmp	r1, #0
   17c9c:	ldr	r2, [r7, #4]
   17ca0:	ldr	r0, [r4, #36]	; 0x24
   17ca4:	str	r0, [r7, #4]
   17ca8:	mov	r0, r1
   17cac:	str	r7, [r4, #36]	; 0x24
   17cb0:	movwne	r0, #1
   17cb4:	cmp	r2, #0
   17cb8:	mov	r7, r2
   17cbc:	beq	17c80 <__assert_fail@plt+0x6d0c>
   17cc0:	tst	r0, #1
   17cc4:	beq	17c94 <__assert_fail@plt+0x6d20>
   17cc8:	ldr	r0, [r7]
   17ccc:	blx	r1
   17cd0:	ldr	r1, [r4, #32]
   17cd4:	b	17c94 <__assert_fail@plt+0x6d20>
   17cd8:	mov	r0, #0
   17cdc:	str	r0, [r4, #12]
   17ce0:	str	r0, [r4, #16]
   17ce4:	pop	{r4, r5, r6, r7, fp, pc}
   17ce8:	push	{r4, r5, r6, sl, fp, lr}
   17cec:	add	fp, sp, #16
   17cf0:	mov	r4, r0
   17cf4:	ldr	r0, [r0, #32]
   17cf8:	cmp	r0, #0
   17cfc:	beq	17d70 <__assert_fail@plt+0x6dfc>
   17d00:	ldr	r0, [r4, #16]
   17d04:	cmp	r0, #0
   17d08:	beq	17d70 <__assert_fail@plt+0x6dfc>
   17d0c:	ldr	r5, [r4]
   17d10:	ldr	r1, [r4, #4]
   17d14:	cmp	r5, r1
   17d18:	bcc	17d30 <__assert_fail@plt+0x6dbc>
   17d1c:	b	17d70 <__assert_fail@plt+0x6dfc>
   17d20:	ldr	r1, [r4, #4]
   17d24:	add	r5, r5, #8
   17d28:	cmp	r5, r1
   17d2c:	bcs	17d70 <__assert_fail@plt+0x6dfc>
   17d30:	ldr	r0, [r5]
   17d34:	cmp	r0, #0
   17d38:	cmpne	r5, #0
   17d3c:	beq	17d24 <__assert_fail@plt+0x6db0>
   17d40:	ldr	r1, [r4, #32]
   17d44:	blx	r1
   17d48:	ldr	r6, [r5, #4]
   17d4c:	cmp	r6, #0
   17d50:	beq	17d20 <__assert_fail@plt+0x6dac>
   17d54:	ldr	r1, [r4, #32]
   17d58:	ldr	r0, [r6]
   17d5c:	blx	r1
   17d60:	ldr	r6, [r6, #4]
   17d64:	cmp	r6, #0
   17d68:	bne	17d54 <__assert_fail@plt+0x6de0>
   17d6c:	b	17d20 <__assert_fail@plt+0x6dac>
   17d70:	ldr	r5, [r4]
   17d74:	ldr	r1, [r4, #4]
   17d78:	cmp	r5, r1
   17d7c:	bcc	17d90 <__assert_fail@plt+0x6e1c>
   17d80:	b	17db8 <__assert_fail@plt+0x6e44>
   17d84:	add	r5, r5, #8
   17d88:	cmp	r5, r1
   17d8c:	bcs	17db8 <__assert_fail@plt+0x6e44>
   17d90:	ldr	r0, [r5, #4]
   17d94:	cmp	r0, #0
   17d98:	beq	17d84 <__assert_fail@plt+0x6e10>
   17d9c:	ldr	r6, [r0, #4]
   17da0:	bl	136b8 <__assert_fail@plt+0x2744>
   17da4:	cmp	r6, #0
   17da8:	mov	r0, r6
   17dac:	bne	17d9c <__assert_fail@plt+0x6e28>
   17db0:	ldr	r1, [r4, #4]
   17db4:	b	17d84 <__assert_fail@plt+0x6e10>
   17db8:	ldr	r0, [r4, #36]	; 0x24
   17dbc:	cmp	r0, #0
   17dc0:	beq	17dd8 <__assert_fail@plt+0x6e64>
   17dc4:	ldr	r5, [r0, #4]
   17dc8:	bl	136b8 <__assert_fail@plt+0x2744>
   17dcc:	cmp	r5, #0
   17dd0:	mov	r0, r5
   17dd4:	bne	17dc4 <__assert_fail@plt+0x6e50>
   17dd8:	ldr	r0, [r4]
   17ddc:	bl	136b8 <__assert_fail@plt+0x2744>
   17de0:	mov	r0, r4
   17de4:	pop	{r4, r5, r6, sl, fp, lr}
   17de8:	b	136b8 <__assert_fail@plt+0x2744>
   17dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17df0:	add	fp, sp, #28
   17df4:	sub	sp, sp, #44	; 0x2c
   17df8:	mov	r7, r0
   17dfc:	mov	r4, r0
   17e00:	ldr	r0, [r7, #20]!
   17e04:	ldrb	r2, [r0, #16]
   17e08:	cmp	r2, #0
   17e0c:	bne	17e3c <__assert_fail@plt+0x6ec8>
   17e10:	vmov	s2, r1
   17e14:	vldr	s0, [r0, #8]
   17e18:	vldr	s4, [pc, #592]	; 18070 <__assert_fail@plt+0x70fc>
   17e1c:	mov	r5, #0
   17e20:	vcvt.f32.u32	s2, s2
   17e24:	vdiv.f32	s2, s2, s0
   17e28:	vcvt.u32.f32	s0, s2
   17e2c:	vcmpe.f32	s2, s4
   17e30:	vmrs	APSR_nzcv, fpscr
   17e34:	bge	17f60 <__assert_fail@plt+0x6fec>
   17e38:	vmov	r1, s0
   17e3c:	cmp	r1, #10
   17e40:	mov	r5, #0
   17e44:	movls	r1, #10
   17e48:	orr	r6, r1, #1
   17e4c:	cmn	r6, #1
   17e50:	beq	17f60 <__assert_fail@plt+0x6fec>
   17e54:	mov	r0, #3
   17e58:	cmp	r6, #10
   17e5c:	bcc	17e94 <__assert_fail@plt+0x6f20>
   17e60:	mov	r0, #3
   17e64:	mov	r2, #9
   17e68:	mov	r1, #12
   17e6c:	udiv	r3, r6, r0
   17e70:	mls	r3, r3, r0, r6
   17e74:	cmp	r3, #0
   17e78:	beq	17e94 <__assert_fail@plt+0x6f20>
   17e7c:	add	r2, r2, r1
   17e80:	add	r1, r1, #8
   17e84:	add	r0, r0, #2
   17e88:	add	r2, r2, #4
   17e8c:	cmp	r2, r6
   17e90:	bcc	17e6c <__assert_fail@plt+0x6ef8>
   17e94:	udiv	r1, r6, r0
   17e98:	mls	r0, r1, r0, r6
   17e9c:	cmp	r0, #0
   17ea0:	bne	17eb4 <__assert_fail@plt+0x6f40>
   17ea4:	add	r6, r6, #2
   17ea8:	cmn	r6, #1
   17eac:	bne	17e54 <__assert_fail@plt+0x6ee0>
   17eb0:	b	17f60 <__assert_fail@plt+0x6fec>
   17eb4:	sub	r0, r6, #1
   17eb8:	cmn	r0, #-536870910	; 0xe0000002
   17ebc:	bhi	17f60 <__assert_fail@plt+0x6fec>
   17ec0:	ldr	r0, [r4, #8]
   17ec4:	cmp	r6, r0
   17ec8:	bne	17edc <__assert_fail@plt+0x6f68>
   17ecc:	mov	r5, #1
   17ed0:	mov	r0, r5
   17ed4:	sub	sp, fp, #28
   17ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17edc:	mov	r0, r6
   17ee0:	mov	r1, #8
   17ee4:	bl	18b64 <__assert_fail@plt+0x7bf0>
   17ee8:	cmp	r0, #0
   17eec:	str	r0, [sp, #4]
   17ef0:	beq	17f60 <__assert_fail@plt+0x6fec>
   17ef4:	add	r0, r0, r6, lsl #3
   17ef8:	mov	r1, #0
   17efc:	add	r5, sp, #4
   17f00:	mov	sl, r4
   17f04:	mov	r2, #0
   17f08:	str	r1, [sp, #20]
   17f0c:	str	r1, [sp, #16]
   17f10:	str	r6, [sp, #12]
   17f14:	mov	r1, r4
   17f18:	str	r0, [sp, #8]
   17f1c:	add	r0, r5, #20
   17f20:	vld1.32	{d16-d17}, [r7]
   17f24:	vst1.32	{d16-d17}, [r0]
   17f28:	ldr	r0, [sl, #36]!	; 0x24
   17f2c:	str	r0, [sp, #40]	; 0x28
   17f30:	mov	r0, r5
   17f34:	bl	18074 <__assert_fail@plt+0x7100>
   17f38:	cmp	r0, #0
   17f3c:	beq	17f6c <__assert_fail@plt+0x6ff8>
   17f40:	ldr	r0, [r4]
   17f44:	bl	136b8 <__assert_fail@plt+0x2744>
   17f48:	mov	r0, #36	; 0x24
   17f4c:	vld1.32	{d16-d17}, [r5], r0
   17f50:	vst1.32	{d16-d17}, [r4], r0
   17f54:	ldr	r0, [r5]
   17f58:	mov	r5, #1
   17f5c:	str	r0, [r4]
   17f60:	mov	r0, r5
   17f64:	sub	sp, fp, #28
   17f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f6c:	ldr	r0, [sp, #40]	; 0x28
   17f70:	str	r0, [sl]
   17f74:	ldr	r0, [sp, #8]
   17f78:	ldr	r8, [sp, #4]
   17f7c:	cmp	r8, r0
   17f80:	str	r0, [sp]
   17f84:	bcs	1803c <__assert_fail@plt+0x70c8>
   17f88:	mov	r9, #0
   17f8c:	ldr	r0, [r8]
   17f90:	cmp	r0, #0
   17f94:	bne	17fbc <__assert_fail@plt+0x7048>
   17f98:	b	17fa0 <__assert_fail@plt+0x702c>
   17f9c:	str	r9, [r8, #4]
   17fa0:	ldr	r0, [sp]
   17fa4:	add	r8, r8, #8
   17fa8:	cmp	r8, r0
   17fac:	bcs	1803c <__assert_fail@plt+0x70c8>
   17fb0:	ldr	r0, [r8]
   17fb4:	cmp	r0, #0
   17fb8:	beq	17fa0 <__assert_fail@plt+0x702c>
   17fbc:	ldr	r6, [r8, #4]
   17fc0:	cmp	r6, #0
   17fc4:	beq	17f9c <__assert_fail@plt+0x7028>
   17fc8:	ldr	r1, [r4, #8]
   17fcc:	b	17ff0 <__assert_fail@plt+0x707c>
   17fd0:	add	r0, r3, r0, lsl #3
   17fd4:	add	r0, r0, #4
   17fd8:	ldr	r3, [r0]
   17fdc:	cmp	r2, #0
   17fe0:	str	r3, [r6, #4]
   17fe4:	str	r6, [r0]
   17fe8:	mov	r6, r2
   17fec:	beq	17f9c <__assert_fail@plt+0x7028>
   17ff0:	ldr	r5, [r6]
   17ff4:	ldr	r2, [r4, #24]
   17ff8:	mov	r0, r5
   17ffc:	blx	r2
   18000:	ldr	r1, [r4, #8]
   18004:	cmp	r0, r1
   18008:	bcs	1806c <__assert_fail@plt+0x70f8>
   1800c:	ldr	r3, [r4]
   18010:	ldr	r2, [r6, #4]
   18014:	ldr	r7, [r3, r0, lsl #3]
   18018:	cmp	r7, #0
   1801c:	bne	17fd0 <__assert_fail@plt+0x705c>
   18020:	str	r5, [r3, r0, lsl #3]
   18024:	ldr	r0, [r4, #12]
   18028:	add	r0, r0, #1
   1802c:	str	r0, [r4, #12]
   18030:	mov	r0, sl
   18034:	str	r9, [r6]
   18038:	b	17fd8 <__assert_fail@plt+0x7064>
   1803c:	add	r1, sp, #4
   18040:	mov	r0, r4
   18044:	mov	r2, #0
   18048:	mov	r5, #0
   1804c:	bl	18074 <__assert_fail@plt+0x7100>
   18050:	cmp	r0, #0
   18054:	beq	1806c <__assert_fail@plt+0x70f8>
   18058:	ldr	r0, [sp, #4]
   1805c:	bl	136b8 <__assert_fail@plt+0x2744>
   18060:	mov	r0, r5
   18064:	sub	sp, fp, #28
   18068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1806c:	bl	10f38 <abort@plt>
   18070:	svcmi	0x00800000
   18074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18078:	add	fp, sp, #28
   1807c:	sub	sp, sp, #4
   18080:	ldr	r8, [r1]
   18084:	ldr	r3, [r1, #4]
   18088:	mov	r6, r0
   1808c:	mov	r0, #1
   18090:	str	r1, [sp]
   18094:	cmp	r8, r3
   18098:	bcs	182ac <__assert_fail@plt+0x7338>
   1809c:	add	sl, r6, #36	; 0x24
   180a0:	cmp	r2, #0
   180a4:	beq	18160 <__assert_fail@plt+0x71ec>
   180a8:	mov	r9, #0
   180ac:	ldr	r1, [r8]
   180b0:	cmp	r1, #0
   180b4:	bne	180e0 <__assert_fail@plt+0x716c>
   180b8:	b	180c8 <__assert_fail@plt+0x7154>
   180bc:	ldr	r0, [sp]
   180c0:	ldr	r3, [r0, #4]
   180c4:	str	r9, [r8, #4]
   180c8:	add	r8, r8, #8
   180cc:	cmp	r8, r3
   180d0:	bcs	182a8 <__assert_fail@plt+0x7334>
   180d4:	ldr	r1, [r8]
   180d8:	cmp	r1, #0
   180dc:	beq	180c8 <__assert_fail@plt+0x7154>
   180e0:	ldr	r7, [r8, #4]
   180e4:	cmp	r7, #0
   180e8:	beq	180c4 <__assert_fail@plt+0x7150>
   180ec:	ldr	r1, [r6, #8]
   180f0:	b	18124 <__assert_fail@plt+0x71b0>
   180f4:	str	r4, [r3, r0, lsl #3]
   180f8:	ldr	r0, [r6, #12]
   180fc:	add	r0, r0, #1
   18100:	str	r0, [r6, #12]
   18104:	mov	r0, sl
   18108:	str	r9, [r7]
   1810c:	ldr	r3, [r0]
   18110:	cmp	r2, #0
   18114:	str	r3, [r7, #4]
   18118:	str	r7, [r0]
   1811c:	mov	r7, r2
   18120:	beq	180bc <__assert_fail@plt+0x7148>
   18124:	ldr	r4, [r7]
   18128:	ldr	r2, [r6, #24]
   1812c:	mov	r0, r4
   18130:	blx	r2
   18134:	ldr	r1, [r6, #8]
   18138:	cmp	r0, r1
   1813c:	bcs	182c0 <__assert_fail@plt+0x734c>
   18140:	ldr	r3, [r6]
   18144:	ldr	r2, [r7, #4]
   18148:	ldr	r5, [r3, r0, lsl #3]
   1814c:	cmp	r5, #0
   18150:	beq	180f4 <__assert_fail@plt+0x7180>
   18154:	add	r0, r3, r0, lsl #3
   18158:	add	r0, r0, #4
   1815c:	b	1810c <__assert_fail@plt+0x7198>
   18160:	mov	r5, #0
   18164:	ldr	r7, [r8]
   18168:	cmp	r7, #0
   1816c:	bne	181b4 <__assert_fail@plt+0x7240>
   18170:	b	1819c <__assert_fail@plt+0x7228>
   18174:	str	r7, [r9, r4, lsl #3]
   18178:	ldr	r0, [r6, #12]
   1817c:	add	r0, r0, #1
   18180:	str	r0, [r6, #12]
   18184:	ldr	r0, [sp]
   18188:	str	r5, [r8]
   1818c:	ldr	r1, [r0, #12]
   18190:	ldr	r3, [r0, #4]
   18194:	sub	r1, r1, #1
   18198:	str	r1, [r0, #12]
   1819c:	add	r8, r8, #8
   181a0:	cmp	r8, r3
   181a4:	bcs	182a8 <__assert_fail@plt+0x7334>
   181a8:	ldr	r7, [r8]
   181ac:	cmp	r7, #0
   181b0:	beq	1819c <__assert_fail@plt+0x7228>
   181b4:	ldr	r9, [r8, #4]
   181b8:	ldr	r1, [r6, #8]
   181bc:	cmp	r9, #0
   181c0:	bne	181e8 <__assert_fail@plt+0x7274>
   181c4:	b	18238 <__assert_fail@plt+0x72c4>
   181c8:	add	r0, r3, r0, lsl #3
   181cc:	add	r0, r0, #4
   181d0:	ldr	r3, [r0]
   181d4:	cmp	r2, #0
   181d8:	str	r3, [r9, #4]
   181dc:	str	r9, [r0]
   181e0:	mov	r9, r2
   181e4:	beq	18234 <__assert_fail@plt+0x72c0>
   181e8:	ldr	r4, [r9]
   181ec:	ldr	r2, [r6, #24]
   181f0:	mov	r0, r4
   181f4:	blx	r2
   181f8:	ldr	r1, [r6, #8]
   181fc:	cmp	r0, r1
   18200:	bcs	182c0 <__assert_fail@plt+0x734c>
   18204:	ldr	r3, [r6]
   18208:	ldr	r2, [r9, #4]
   1820c:	ldr	r7, [r3, r0, lsl #3]
   18210:	cmp	r7, #0
   18214:	bne	181c8 <__assert_fail@plt+0x7254>
   18218:	str	r4, [r3, r0, lsl #3]
   1821c:	ldr	r0, [r6, #12]
   18220:	add	r0, r0, #1
   18224:	str	r0, [r6, #12]
   18228:	mov	r0, sl
   1822c:	str	r5, [r9]
   18230:	b	181d0 <__assert_fail@plt+0x725c>
   18234:	ldr	r7, [r8]
   18238:	str	r5, [r8, #4]
   1823c:	mov	r0, r7
   18240:	ldr	r2, [r6, #24]
   18244:	blx	r2
   18248:	mov	r4, r0
   1824c:	ldr	r0, [r6, #8]
   18250:	cmp	r4, r0
   18254:	bcs	182c0 <__assert_fail@plt+0x734c>
   18258:	ldr	r9, [r6]
   1825c:	ldr	r0, [r9, r4, lsl #3]
   18260:	cmp	r0, #0
   18264:	beq	18174 <__assert_fail@plt+0x7200>
   18268:	ldr	r0, [sl]
   1826c:	cmp	r0, #0
   18270:	beq	18280 <__assert_fail@plt+0x730c>
   18274:	ldr	r1, [r0, #4]
   18278:	str	r1, [sl]
   1827c:	b	18290 <__assert_fail@plt+0x731c>
   18280:	mov	r0, #8
   18284:	bl	18bb8 <__assert_fail@plt+0x7c44>
   18288:	cmp	r0, #0
   1828c:	beq	182b4 <__assert_fail@plt+0x7340>
   18290:	add	r1, r9, r4, lsl #3
   18294:	str	r7, [r0]
   18298:	ldr	r2, [r1, #4]
   1829c:	str	r2, [r0, #4]
   182a0:	str	r0, [r1, #4]
   182a4:	b	18184 <__assert_fail@plt+0x7210>
   182a8:	mov	r0, #1
   182ac:	sub	sp, fp, #28
   182b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182b4:	mov	r0, #0
   182b8:	sub	sp, fp, #28
   182bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c0:	bl	10f38 <abort@plt>
   182c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182c8:	add	fp, sp, #28
   182cc:	sub	sp, sp, #4
   182d0:	cmp	r1, #0
   182d4:	beq	18610 <__assert_fail@plt+0x769c>
   182d8:	mov	r8, r2
   182dc:	mov	sl, r1
   182e0:	ldr	r1, [r0, #8]
   182e4:	ldr	r2, [r0, #24]
   182e8:	mov	r4, r0
   182ec:	mov	r0, sl
   182f0:	blx	r2
   182f4:	mov	r7, r0
   182f8:	ldr	r0, [r4, #8]
   182fc:	cmp	r7, r0
   18300:	bcs	18610 <__assert_fail@plt+0x769c>
   18304:	ldr	r5, [r4]
   18308:	mov	r9, r5
   1830c:	ldr	r1, [r9, r7, lsl #3]!
   18310:	cmp	r1, #0
   18314:	beq	183a8 <__assert_fail@plt+0x7434>
   18318:	cmp	r1, sl
   1831c:	beq	18348 <__assert_fail@plt+0x73d4>
   18320:	ldr	r2, [r4, #28]
   18324:	mov	r0, sl
   18328:	blx	r2
   1832c:	cmp	r0, #0
   18330:	mov	r6, r9
   18334:	beq	18364 <__assert_fail@plt+0x73f0>
   18338:	ldr	r0, [r6]
   1833c:	cmp	r0, #0
   18340:	bne	1834c <__assert_fail@plt+0x73d8>
   18344:	b	183a8 <__assert_fail@plt+0x7434>
   18348:	mov	r0, sl
   1834c:	cmp	r8, #0
   18350:	mov	r7, #0
   18354:	strne	r0, [r8]
   18358:	mov	r0, r7
   1835c:	sub	sp, fp, #28
   18360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18364:	add	r6, r5, r7, lsl #3
   18368:	ldr	r0, [r6, #4]!
   1836c:	cmp	r0, #0
   18370:	beq	183a8 <__assert_fail@plt+0x7434>
   18374:	ldr	r1, [r0]
   18378:	cmp	r1, sl
   1837c:	beq	1839c <__assert_fail@plt+0x7428>
   18380:	ldr	r2, [r4, #28]
   18384:	mov	r0, sl
   18388:	blx	r2
   1838c:	ldr	r6, [r6]
   18390:	cmp	r0, #0
   18394:	beq	18368 <__assert_fail@plt+0x73f4>
   18398:	b	18338 <__assert_fail@plt+0x73c4>
   1839c:	mov	r0, sl
   183a0:	cmp	r0, #0
   183a4:	bne	1834c <__assert_fail@plt+0x73d8>
   183a8:	vldr	s0, [r4, #8]
   183ac:	vldr	s2, [r4, #12]
   183b0:	ldr	r0, [r4, #20]
   183b4:	vcvt.f32.u32	s0, s0
   183b8:	vcvt.f32.u32	s4, s2
   183bc:	vldr	s2, [r0, #8]
   183c0:	vmul.f32	s6, s2, s0
   183c4:	vcmpe.f32	s6, s4
   183c8:	vmrs	APSR_nzcv, fpscr
   183cc:	bpl	18530 <__assert_fail@plt+0x75bc>
   183d0:	movw	r1, #38128	; 0x94f0
   183d4:	movt	r1, #1
   183d8:	cmp	r0, r1
   183dc:	beq	18478 <__assert_fail@plt+0x7504>
   183e0:	vldr	s6, [pc, #556]	; 18614 <__assert_fail@plt+0x76a0>
   183e4:	vcmpe.f32	s2, s6
   183e8:	vmrs	APSR_nzcv, fpscr
   183ec:	ble	18454 <__assert_fail@plt+0x74e0>
   183f0:	vldr	s8, [pc, #544]	; 18618 <__assert_fail@plt+0x76a4>
   183f4:	vcmpe.f32	s2, s8
   183f8:	vmrs	APSR_nzcv, fpscr
   183fc:	bpl	18454 <__assert_fail@plt+0x74e0>
   18400:	vldr	s8, [pc, #532]	; 1861c <__assert_fail@plt+0x76a8>
   18404:	vldr	s10, [r0, #12]
   18408:	vcmpe.f32	s10, s8
   1840c:	vmrs	APSR_nzcv, fpscr
   18410:	ble	18454 <__assert_fail@plt+0x74e0>
   18414:	vldr	s8, [r0]
   18418:	vcmpe.f32	s8, #0.0
   1841c:	vmrs	APSR_nzcv, fpscr
   18420:	blt	18454 <__assert_fail@plt+0x74e0>
   18424:	vadd.f32	s6, s8, s6
   18428:	vcmpe.f32	s6, s2
   1842c:	vmrs	APSR_nzcv, fpscr
   18430:	bpl	18454 <__assert_fail@plt+0x74e0>
   18434:	vldr	s8, [r0, #4]
   18438:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1843c:	vcmpe.f32	s8, s10
   18440:	vmrs	APSR_nzcv, fpscr
   18444:	bhi	18454 <__assert_fail@plt+0x74e0>
   18448:	vcmpe.f32	s6, s8
   1844c:	vmrs	APSR_nzcv, fpscr
   18450:	bmi	18464 <__assert_fail@plt+0x74f0>
   18454:	vldr	s2, [pc, #452]	; 18620 <__assert_fail@plt+0x76ac>
   18458:	movw	r0, #38128	; 0x94f0
   1845c:	movt	r0, #1
   18460:	str	r0, [r4, #20]
   18464:	vmul.f32	s6, s2, s0
   18468:	vcmpe.f32	s6, s4
   1846c:	vmrs	APSR_nzcv, fpscr
   18470:	bmi	1848c <__assert_fail@plt+0x7518>
   18474:	b	18530 <__assert_fail@plt+0x75bc>
   18478:	mov	r0, r1
   1847c:	vmul.f32	s6, s2, s0
   18480:	vcmpe.f32	s6, s4
   18484:	vmrs	APSR_nzcv, fpscr
   18488:	bpl	18530 <__assert_fail@plt+0x75bc>
   1848c:	vldr	s4, [r0, #12]
   18490:	ldrb	r0, [r0, #16]
   18494:	mvn	r7, #0
   18498:	cmp	r0, #0
   1849c:	vmul.f32	s0, s4, s0
   184a0:	vldr	s4, [pc, #380]	; 18624 <__assert_fail@plt+0x76b0>
   184a4:	vmul.f32	s2, s2, s0
   184a8:	vseleq.f32	s0, s2, s0
   184ac:	vcmpe.f32	s0, s4
   184b0:	vmrs	APSR_nzcv, fpscr
   184b4:	bge	185a4 <__assert_fail@plt+0x7630>
   184b8:	vcvt.u32.f32	s0, s0
   184bc:	mov	r0, r4
   184c0:	vmov	r1, s0
   184c4:	bl	17dec <__assert_fail@plt+0x6e78>
   184c8:	cmp	r0, #0
   184cc:	beq	185a4 <__assert_fail@plt+0x7630>
   184d0:	ldr	r1, [r4, #8]
   184d4:	ldr	r2, [r4, #24]
   184d8:	mov	r0, sl
   184dc:	blx	r2
   184e0:	mov	r7, r0
   184e4:	ldr	r0, [r4, #8]
   184e8:	cmp	r7, r0
   184ec:	bcs	18610 <__assert_fail@plt+0x769c>
   184f0:	ldr	r5, [r4]
   184f4:	mov	r9, r5
   184f8:	ldr	r1, [r9, r7, lsl #3]!
   184fc:	cmp	r1, #0
   18500:	beq	18530 <__assert_fail@plt+0x75bc>
   18504:	cmp	r1, sl
   18508:	mov	r0, sl
   1850c:	beq	18528 <__assert_fail@plt+0x75b4>
   18510:	ldr	r2, [r4, #28]
   18514:	mov	r0, sl
   18518:	blx	r2
   1851c:	cmp	r0, #0
   18520:	beq	185c0 <__assert_fail@plt+0x764c>
   18524:	ldr	r0, [r9]
   18528:	cmp	r0, #0
   1852c:	bne	18610 <__assert_fail@plt+0x769c>
   18530:	ldr	r0, [r9]
   18534:	cmp	r0, #0
   18538:	beq	18554 <__assert_fail@plt+0x75e0>
   1853c:	ldr	r0, [r4, #36]	; 0x24
   18540:	cmp	r0, #0
   18544:	beq	18574 <__assert_fail@plt+0x7600>
   18548:	ldr	r1, [r0, #4]
   1854c:	str	r1, [r4, #36]	; 0x24
   18550:	b	18584 <__assert_fail@plt+0x7610>
   18554:	str	sl, [r9]
   18558:	ldr	r0, [r4, #12]
   1855c:	ldr	r1, [r4, #16]
   18560:	add	r0, r0, #1
   18564:	add	r1, r1, #1
   18568:	str	r0, [r4, #12]
   1856c:	str	r1, [r4, #16]
   18570:	b	185a0 <__assert_fail@plt+0x762c>
   18574:	mov	r0, #8
   18578:	bl	18bb8 <__assert_fail@plt+0x7c44>
   1857c:	cmp	r0, #0
   18580:	beq	185b0 <__assert_fail@plt+0x763c>
   18584:	str	sl, [r0]
   18588:	ldr	r1, [r9, #4]
   1858c:	str	r1, [r0, #4]
   18590:	str	r0, [r9, #4]
   18594:	ldr	r0, [r4, #16]
   18598:	add	r0, r0, #1
   1859c:	str	r0, [r4, #16]
   185a0:	mov	r7, #1
   185a4:	mov	r0, r7
   185a8:	sub	sp, fp, #28
   185ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185b0:	mvn	r7, #0
   185b4:	mov	r0, r7
   185b8:	sub	sp, fp, #28
   185bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185c0:	add	r6, r5, r7, lsl #3
   185c4:	ldr	r0, [r6, #4]!
   185c8:	cmp	r0, #0
   185cc:	beq	18530 <__assert_fail@plt+0x75bc>
   185d0:	ldr	r1, [r0]
   185d4:	cmp	r1, sl
   185d8:	beq	18604 <__assert_fail@plt+0x7690>
   185dc:	ldr	r2, [r4, #28]
   185e0:	mov	r0, sl
   185e4:	blx	r2
   185e8:	ldr	r6, [r6]
   185ec:	cmp	r0, #0
   185f0:	beq	185c4 <__assert_fail@plt+0x7650>
   185f4:	ldr	r0, [r6]
   185f8:	cmp	r0, #0
   185fc:	beq	18530 <__assert_fail@plt+0x75bc>
   18600:	b	18610 <__assert_fail@plt+0x769c>
   18604:	mov	r0, sl
   18608:	cmp	r0, #0
   1860c:	beq	18530 <__assert_fail@plt+0x75bc>
   18610:	bl	10f38 <abort@plt>
   18614:	stclcc	12, cr12, [ip, #820]	; 0x334
   18618:	svccc	0x00666666
   1861c:	svccc	0x008ccccd
   18620:	svccc	0x004ccccd
   18624:	svcmi	0x00800000
   18628:	push	{r4, sl, fp, lr}
   1862c:	add	fp, sp, #8
   18630:	sub	sp, sp, #8
   18634:	add	r2, sp, #4
   18638:	mov	r4, r1
   1863c:	bl	182c4 <__assert_fail@plt+0x7350>
   18640:	cmn	r0, #1
   18644:	beq	18660 <__assert_fail@plt+0x76ec>
   18648:	ldr	r1, [sp, #4]
   1864c:	cmp	r0, #0
   18650:	moveq	r4, r1
   18654:	mov	r0, r4
   18658:	sub	sp, fp, #8
   1865c:	pop	{r4, sl, fp, pc}
   18660:	mov	r4, #0
   18664:	mov	r0, r4
   18668:	sub	sp, fp, #8
   1866c:	pop	{r4, sl, fp, pc}
   18670:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18674:	add	fp, sp, #24
   18678:	mov	r9, r1
   1867c:	ldr	r1, [r0, #8]
   18680:	ldr	r2, [r0, #24]
   18684:	mov	r5, r0
   18688:	mov	r0, r9
   1868c:	blx	r2
   18690:	mov	r7, r0
   18694:	ldr	r0, [r5, #8]
   18698:	cmp	r7, r0
   1869c:	bcs	18910 <__assert_fail@plt+0x799c>
   186a0:	ldr	r6, [r5]
   186a4:	mov	r8, #0
   186a8:	mov	r4, r6
   186ac:	ldr	r1, [r4, r7, lsl #3]!
   186b0:	cmp	r1, #0
   186b4:	beq	18768 <__assert_fail@plt+0x77f4>
   186b8:	cmp	r1, r9
   186bc:	beq	186d8 <__assert_fail@plt+0x7764>
   186c0:	ldr	r2, [r5, #28]
   186c4:	mov	r0, r9
   186c8:	blx	r2
   186cc:	cmp	r0, #0
   186d0:	beq	18710 <__assert_fail@plt+0x779c>
   186d4:	ldr	r9, [r4]
   186d8:	add	r0, r6, r7, lsl #3
   186dc:	ldr	r0, [r0, #4]
   186e0:	cmp	r0, #0
   186e4:	beq	18758 <__assert_fail@plt+0x77e4>
   186e8:	ldm	r0, {r1, r2}
   186ec:	stm	r4, {r1, r2}
   186f0:	mov	r1, #0
   186f4:	str	r1, [r0]
   186f8:	ldr	r1, [r5, #36]	; 0x24
   186fc:	str	r1, [r0, #4]
   18700:	str	r0, [r5, #36]	; 0x24
   18704:	cmp	r9, #0
   18708:	bne	187a0 <__assert_fail@plt+0x782c>
   1870c:	b	18768 <__assert_fail@plt+0x77f4>
   18710:	add	r7, r6, r7, lsl #3
   18714:	ldr	r0, [r7, #4]!
   18718:	cmp	r0, #0
   1871c:	beq	18768 <__assert_fail@plt+0x77f4>
   18720:	ldr	r1, [r0]
   18724:	cmp	r1, r9
   18728:	beq	18770 <__assert_fail@plt+0x77fc>
   1872c:	ldr	r2, [r5, #28]
   18730:	mov	r0, r9
   18734:	blx	r2
   18738:	ldr	r1, [r7]
   1873c:	cmp	r0, #0
   18740:	bne	18778 <__assert_fail@plt+0x7804>
   18744:	ldr	r0, [r1, #4]!
   18748:	mov	r7, r1
   1874c:	cmp	r0, #0
   18750:	bne	18720 <__assert_fail@plt+0x77ac>
   18754:	b	18768 <__assert_fail@plt+0x77f4>
   18758:	mov	r0, #0
   1875c:	str	r0, [r4]
   18760:	cmp	r9, #0
   18764:	bne	187a0 <__assert_fail@plt+0x782c>
   18768:	mov	r0, r8
   1876c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18770:	mov	r1, r0
   18774:	b	1877c <__assert_fail@plt+0x7808>
   18778:	ldr	r9, [r1]
   1877c:	ldr	r0, [r1, #4]
   18780:	str	r0, [r7]
   18784:	mov	r0, #0
   18788:	str	r0, [r1]
   1878c:	ldr	r0, [r5, #36]	; 0x24
   18790:	str	r0, [r1, #4]
   18794:	str	r1, [r5, #36]	; 0x24
   18798:	cmp	r9, #0
   1879c:	beq	18768 <__assert_fail@plt+0x77f4>
   187a0:	ldr	r0, [r5, #16]
   187a4:	sub	r0, r0, #1
   187a8:	str	r0, [r5, #16]
   187ac:	ldr	r0, [r4]
   187b0:	cmp	r0, #0
   187b4:	bne	18904 <__assert_fail@plt+0x7990>
   187b8:	ldr	r0, [r5, #12]
   187bc:	vldr	s0, [r5, #8]
   187c0:	sub	r1, r0, #1
   187c4:	str	r1, [r5, #12]
   187c8:	vmov	s2, r1
   187cc:	ldr	r0, [r5, #20]
   187d0:	vcvt.f32.u32	s0, s0
   187d4:	vcvt.f32.u32	s2, s2
   187d8:	vldr	s4, [r0]
   187dc:	vmul.f32	s6, s4, s0
   187e0:	vcmpe.f32	s6, s2
   187e4:	vmrs	APSR_nzcv, fpscr
   187e8:	ble	18904 <__assert_fail@plt+0x7990>
   187ec:	movw	r1, #38128	; 0x94f0
   187f0:	movt	r1, #1
   187f4:	cmp	r0, r1
   187f8:	beq	18894 <__assert_fail@plt+0x7920>
   187fc:	vldr	s8, [pc, #272]	; 18914 <__assert_fail@plt+0x79a0>
   18800:	vldr	s6, [r0, #8]
   18804:	vcmpe.f32	s6, s8
   18808:	vmrs	APSR_nzcv, fpscr
   1880c:	ble	18870 <__assert_fail@plt+0x78fc>
   18810:	vldr	s10, [pc, #256]	; 18918 <__assert_fail@plt+0x79a4>
   18814:	vcmpe.f32	s6, s10
   18818:	vmrs	APSR_nzcv, fpscr
   1881c:	bpl	18870 <__assert_fail@plt+0x78fc>
   18820:	vcmpe.f32	s4, #0.0
   18824:	vmrs	APSR_nzcv, fpscr
   18828:	blt	18870 <__assert_fail@plt+0x78fc>
   1882c:	vldr	s10, [r0, #12]
   18830:	vldr	s12, [pc, #228]	; 1891c <__assert_fail@plt+0x79a8>
   18834:	vcmpe.f32	s10, s12
   18838:	vmrs	APSR_nzcv, fpscr
   1883c:	ble	18870 <__assert_fail@plt+0x78fc>
   18840:	vadd.f32	s8, s4, s8
   18844:	vcmpe.f32	s8, s6
   18848:	vmrs	APSR_nzcv, fpscr
   1884c:	bpl	18870 <__assert_fail@plt+0x78fc>
   18850:	vldr	s6, [r0, #4]
   18854:	vmov.f32	s10, #112	; 0x3f800000  1.0
   18858:	vcmpe.f32	s6, s10
   1885c:	vmrs	APSR_nzcv, fpscr
   18860:	bhi	18870 <__assert_fail@plt+0x78fc>
   18864:	vcmpe.f32	s8, s6
   18868:	vmrs	APSR_nzcv, fpscr
   1886c:	bmi	18880 <__assert_fail@plt+0x790c>
   18870:	vldr	s4, [pc, #168]	; 18920 <__assert_fail@plt+0x79ac>
   18874:	movw	r0, #38128	; 0x94f0
   18878:	movt	r0, #1
   1887c:	str	r0, [r5, #20]
   18880:	vmul.f32	s4, s4, s0
   18884:	vcmpe.f32	s4, s2
   18888:	vmrs	APSR_nzcv, fpscr
   1888c:	bgt	188a8 <__assert_fail@plt+0x7934>
   18890:	b	18904 <__assert_fail@plt+0x7990>
   18894:	mov	r0, r1
   18898:	vmul.f32	s4, s4, s0
   1889c:	vcmpe.f32	s4, s2
   188a0:	vmrs	APSR_nzcv, fpscr
   188a4:	ble	18904 <__assert_fail@plt+0x7990>
   188a8:	vldr	s2, [r0, #4]
   188ac:	ldrb	r1, [r0, #16]
   188b0:	cmp	r1, #0
   188b4:	vmul.f32	s0, s2, s0
   188b8:	bne	188c4 <__assert_fail@plt+0x7950>
   188bc:	vldr	s2, [r0, #8]
   188c0:	vmul.f32	s0, s0, s2
   188c4:	vcvt.u32.f32	s0, s0
   188c8:	mov	r0, r5
   188cc:	vmov	r1, s0
   188d0:	bl	17dec <__assert_fail@plt+0x6e78>
   188d4:	cmp	r0, #0
   188d8:	bne	18904 <__assert_fail@plt+0x7990>
   188dc:	ldr	r0, [r5, #36]	; 0x24
   188e0:	cmp	r0, #0
   188e4:	beq	188fc <__assert_fail@plt+0x7988>
   188e8:	ldr	r4, [r0, #4]
   188ec:	bl	136b8 <__assert_fail@plt+0x2744>
   188f0:	cmp	r4, #0
   188f4:	mov	r0, r4
   188f8:	bne	188e8 <__assert_fail@plt+0x7974>
   188fc:	mov	r0, #0
   18900:	str	r0, [r5, #36]	; 0x24
   18904:	mov	r8, r9
   18908:	mov	r0, r8
   1890c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18910:	bl	10f38 <abort@plt>
   18914:	stclcc	12, cr12, [ip, #820]	; 0x334
   18918:	svccc	0x00666666
   1891c:	svccc	0x008ccccd
   18920:	andeq	r0, r0, r0
   18924:	b	18670 <__assert_fail@plt+0x76fc>
   18928:	vdup.32	q8, r1
   1892c:	mov	r2, #0
   18930:	str	r2, [r0, #20]
   18934:	str	r2, [r0, #24]
   18938:	mov	r2, #1
   1893c:	strb	r2, [r0, #28]
   18940:	vst1.32	{d16-d17}, [r0]!
   18944:	str	r1, [r0]
   18948:	bx	lr
   1894c:	ldrb	r0, [r0, #28]
   18950:	bx	lr
   18954:	push	{fp, lr}
   18958:	mov	fp, sp
   1895c:	ldrb	r3, [r0, #28]
   18960:	ldr	r2, [r0, #20]
   18964:	eor	lr, r3, #1
   18968:	add	r2, r2, lr
   1896c:	and	r3, r2, #3
   18970:	ldr	ip, [r0, r3, lsl #2]
   18974:	str	r1, [r0, r3, lsl #2]
   18978:	str	r3, [r0, #20]
   1897c:	ldr	r1, [r0, #24]
   18980:	cmp	r3, r1
   18984:	addeq	r1, r2, lr
   18988:	andeq	r1, r1, #3
   1898c:	streq	r1, [r0, #24]
   18990:	mov	r1, #0
   18994:	strb	r1, [r0, #28]
   18998:	mov	r0, ip
   1899c:	pop	{fp, pc}
   189a0:	push	{fp, lr}
   189a4:	mov	fp, sp
   189a8:	ldrb	r1, [r0, #28]
   189ac:	cmp	r1, #0
   189b0:	bne	189ec <__assert_fail@plt+0x7a78>
   189b4:	ldr	r3, [r0, #20]
   189b8:	ldr	r2, [r0, #16]
   189bc:	ldr	r1, [r0, r3, lsl #2]
   189c0:	str	r2, [r0, r3, lsl #2]
   189c4:	ldr	r2, [r0, #20]
   189c8:	ldr	r3, [r0, #24]
   189cc:	cmp	r2, r3
   189d0:	moveq	r2, #1
   189d4:	strbeq	r2, [r0, #28]
   189d8:	subne	r2, r2, #1
   189dc:	andne	r2, r2, #3
   189e0:	strne	r2, [r0, #20]
   189e4:	mov	r0, r1
   189e8:	pop	{fp, pc}
   189ec:	bl	10f38 <abort@plt>
   189f0:	push	{r4, r5, r6, sl, fp, lr}
   189f4:	add	fp, sp, #16
   189f8:	mov	r5, r0
   189fc:	mov	r0, #0
   18a00:	mov	r4, r1
   18a04:	add	r6, r2, #19
   18a08:	strb	r0, [r2, #20]
   18a0c:	mov	r0, r5
   18a10:	mov	r1, r4
   18a14:	mov	r2, #10
   18a18:	mov	r3, #0
   18a1c:	bl	19028 <__assert_fail@plt+0x80b4>
   18a20:	add	r2, r0, r0, lsl #2
   18a24:	sub	r2, r5, r2, lsl #1
   18a28:	orr	r2, r2, #48	; 0x30
   18a2c:	strb	r2, [r6], #-1
   18a30:	rsbs	r2, r5, #9
   18a34:	mov	r5, r0
   18a38:	rscs	r2, r4, #0
   18a3c:	mov	r4, r1
   18a40:	bcc	18a0c <__assert_fail@plt+0x7a98>
   18a44:	add	r0, r6, #1
   18a48:	pop	{r4, r5, r6, sl, fp, pc}
   18a4c:	sub	sp, sp, #8
   18a50:	push	{fp, lr}
   18a54:	mov	fp, sp
   18a58:	sub	sp, sp, #8
   18a5c:	str	r3, [fp, #12]
   18a60:	add	r3, fp, #8
   18a64:	str	r2, [fp, #8]
   18a68:	orr	r3, r3, #4
   18a6c:	str	r3, [sp, #4]
   18a70:	bl	10ddc <ioctl@plt>
   18a74:	mov	sp, fp
   18a78:	pop	{fp, lr}
   18a7c:	add	sp, sp, #8
   18a80:	bx	lr
   18a84:	sub	sp, sp, #4
   18a88:	push	{fp, lr}
   18a8c:	mov	fp, sp
   18a90:	sub	sp, sp, #4
   18a94:	str	r3, [fp, #8]
   18a98:	tst	r2, #64	; 0x40
   18a9c:	mov	r3, #0
   18aa0:	ldrne	r3, [fp, #8]
   18aa4:	bl	10e60 <openat64@plt>
   18aa8:	bl	18b1c <__assert_fail@plt+0x7ba8>
   18aac:	mov	sp, fp
   18ab0:	pop	{fp, lr}
   18ab4:	add	sp, sp, #4
   18ab8:	bx	lr
   18abc:	push	{r4, r5, r6, sl, fp, lr}
   18ac0:	add	fp, sp, #16
   18ac4:	orr	r2, r2, #18688	; 0x4900
   18ac8:	mov	r4, r3
   18acc:	orr	r2, r2, #524288	; 0x80000
   18ad0:	bl	18a84 <__assert_fail@plt+0x7b10>
   18ad4:	mov	r5, r0
   18ad8:	mov	r0, #0
   18adc:	cmp	r5, #0
   18ae0:	bmi	18b18 <__assert_fail@plt+0x7ba4>
   18ae4:	mov	r0, r5
   18ae8:	bl	10ecc <fdopendir@plt>
   18aec:	cmp	r0, #0
   18af0:	beq	18afc <__assert_fail@plt+0x7b88>
   18af4:	str	r5, [r4]
   18af8:	pop	{r4, r5, r6, sl, fp, pc}
   18afc:	bl	10e78 <__errno_location@plt>
   18b00:	ldr	r6, [r0]
   18b04:	mov	r4, r0
   18b08:	mov	r0, r5
   18b0c:	bl	10f44 <close@plt>
   18b10:	mov	r0, #0
   18b14:	str	r6, [r4]
   18b18:	pop	{r4, r5, r6, sl, fp, pc}
   18b1c:	push	{r4, r5, r6, r7, fp, lr}
   18b20:	add	fp, sp, #16
   18b24:	mov	r4, r0
   18b28:	cmp	r0, #2
   18b2c:	bhi	18b5c <__assert_fail@plt+0x7be8>
   18b30:	mov	r0, r4
   18b34:	bl	18f48 <__assert_fail@plt+0x7fd4>
   18b38:	mov	r5, r0
   18b3c:	bl	10e78 <__errno_location@plt>
   18b40:	ldr	r7, [r0]
   18b44:	mov	r6, r0
   18b48:	mov	r0, r4
   18b4c:	bl	10f44 <close@plt>
   18b50:	mov	r0, r5
   18b54:	str	r7, [r6]
   18b58:	pop	{r4, r5, r6, r7, fp, pc}
   18b5c:	mov	r0, r4
   18b60:	pop	{r4, r5, r6, r7, fp, pc}
   18b64:	clz	r2, r1
   18b68:	clz	r3, r0
   18b6c:	lsr	r2, r2, #5
   18b70:	lsr	r3, r3, #5
   18b74:	orrs	r2, r3, r2
   18b78:	movwne	r1, #1
   18b7c:	movwne	r0, #1
   18b80:	cmp	r1, #0
   18b84:	beq	18bb4 <__assert_fail@plt+0x7c40>
   18b88:	mvn	r2, #-2147483648	; 0x80000000
   18b8c:	udiv	r2, r2, r1
   18b90:	cmp	r2, r0
   18b94:	bcs	18bb4 <__assert_fail@plt+0x7c40>
   18b98:	push	{fp, lr}
   18b9c:	mov	fp, sp
   18ba0:	bl	10e78 <__errno_location@plt>
   18ba4:	mov	r1, #12
   18ba8:	str	r1, [r0]
   18bac:	mov	r0, #0
   18bb0:	pop	{fp, pc}
   18bb4:	b	10d04 <calloc@plt>
   18bb8:	cmp	r0, #0
   18bbc:	movweq	r0, #1
   18bc0:	cmn	r0, #1
   18bc4:	ble	18bcc <__assert_fail@plt+0x7c58>
   18bc8:	b	10e0c <malloc@plt>
   18bcc:	push	{fp, lr}
   18bd0:	mov	fp, sp
   18bd4:	bl	10e78 <__errno_location@plt>
   18bd8:	mov	r1, #12
   18bdc:	str	r1, [r0]
   18be0:	mov	r0, #0
   18be4:	pop	{fp, pc}
   18be8:	push	{fp, lr}
   18bec:	mov	fp, sp
   18bf0:	cmp	r0, #0
   18bf4:	beq	18c10 <__assert_fail@plt+0x7c9c>
   18bf8:	cmp	r1, #0
   18bfc:	beq	18c1c <__assert_fail@plt+0x7ca8>
   18c00:	cmn	r1, #1
   18c04:	ble	18c28 <__assert_fail@plt+0x7cb4>
   18c08:	pop	{fp, lr}
   18c0c:	b	10d94 <realloc@plt>
   18c10:	mov	r0, r1
   18c14:	pop	{fp, lr}
   18c18:	b	18bb8 <__assert_fail@plt+0x7c44>
   18c1c:	bl	136b8 <__assert_fail@plt+0x2744>
   18c20:	mov	r0, #0
   18c24:	pop	{fp, pc}
   18c28:	bl	10e78 <__errno_location@plt>
   18c2c:	mov	r1, #12
   18c30:	str	r1, [r0]
   18c34:	mov	r0, #0
   18c38:	pop	{fp, pc}
   18c3c:	movw	r2, #62998	; 0xf616
   18c40:	mov	r1, #0
   18c44:	movt	r2, #149	; 0x95
   18c48:	str	r1, [r0, #16]
   18c4c:	str	r1, [r0, #20]
   18c50:	str	r2, [r0, #24]
   18c54:	bx	lr
   18c58:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   18c5c:	add	fp, sp, #24
   18c60:	ldr	r2, [r0, #24]
   18c64:	movw	r3, #62998	; 0xf616
   18c68:	movt	r3, #149	; 0x95
   18c6c:	cmp	r2, r3
   18c70:	bne	18d0c <__assert_fail@plt+0x7d98>
   18c74:	add	r3, r0, #16
   18c78:	add	ip, r0, #8
   18c7c:	ldrd	r4, [r3]
   18c80:	orrs	r2, r4, r5
   18c84:	beq	18cc0 <__assert_fail@plt+0x7d4c>
   18c88:	ldr	r6, [r1, #96]	; 0x60
   18c8c:	ldr	r9, [r1, #100]	; 0x64
   18c90:	ldm	r0, {r2, r7}
   18c94:	eor	r7, r9, r7
   18c98:	eor	r2, r6, r2
   18c9c:	orrs	r2, r2, r7
   18ca0:	bne	18cc0 <__assert_fail@plt+0x7d4c>
   18ca4:	ldm	ip, {r2, r7}
   18ca8:	ldm	r1, {r6, r9}
   18cac:	eor	r7, r9, r7
   18cb0:	eor	r2, r6, r2
   18cb4:	orrs	r2, r2, r7
   18cb8:	mov	r2, #1
   18cbc:	beq	18cf8 <__assert_fail@plt+0x7d84>
   18cc0:	adds	r6, r4, #1
   18cc4:	adc	r7, r5, #0
   18cc8:	and	r2, r6, r4
   18ccc:	strd	r6, [r3]
   18cd0:	and	r3, r7, r5
   18cd4:	orrs	r2, r2, r3
   18cd8:	mov	r2, #0
   18cdc:	bne	18cf8 <__assert_fail@plt+0x7d84>
   18ce0:	orrs	r3, r6, r7
   18ce4:	beq	18d00 <__assert_fail@plt+0x7d8c>
   18ce8:	ldrd	r4, [r1]
   18cec:	strd	r4, [ip]
   18cf0:	ldrd	r4, [r1, #96]	; 0x60
   18cf4:	strd	r4, [r0]
   18cf8:	mov	r0, r2
   18cfc:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   18d00:	mov	r2, #1
   18d04:	mov	r0, r2
   18d08:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   18d0c:	movw	r0, #38148	; 0x9504
   18d10:	movw	r1, #38172	; 0x951c
   18d14:	movw	r3, #38186	; 0x952a
   18d18:	mov	r2, #60	; 0x3c
   18d1c:	movt	r0, #1
   18d20:	movt	r1, #1
   18d24:	movt	r3, #1
   18d28:	bl	10f74 <__assert_fail@plt>
   18d2c:	sub	sp, sp, #8
   18d30:	push	{r4, r5, r6, r7, fp, lr}
   18d34:	add	fp, sp, #16
   18d38:	sub	sp, sp, #8
   18d3c:	mov	r5, r0
   18d40:	add	r0, fp, #8
   18d44:	cmp	r1, #11
   18d48:	str	r2, [fp, #8]
   18d4c:	str	r3, [fp, #12]
   18d50:	str	r0, [sp, #4]
   18d54:	bhi	18d90 <__assert_fail@plt+0x7e1c>
   18d58:	mov	r0, #1
   18d5c:	movw	r2, #1300	; 0x514
   18d60:	tst	r2, r0, lsl r1
   18d64:	bne	18e50 <__assert_fail@plt+0x7edc>
   18d68:	movw	r2, #2570	; 0xa0a
   18d6c:	tst	r2, r0, lsl r1
   18d70:	bne	18db8 <__assert_fail@plt+0x7e44>
   18d74:	cmp	r1, #0
   18d78:	bne	18d90 <__assert_fail@plt+0x7e1c>
   18d7c:	ldr	r0, [sp, #4]
   18d80:	add	r1, r0, #4
   18d84:	str	r1, [sp, #4]
   18d88:	mov	r1, #0
   18d8c:	b	18e5c <__assert_fail@plt+0x7ee8>
   18d90:	sub	r0, r1, #1024	; 0x400
   18d94:	cmp	r0, #10
   18d98:	bhi	18e50 <__assert_fail@plt+0x7edc>
   18d9c:	mov	r2, #1
   18da0:	movw	r3, #645	; 0x285
   18da4:	tst	r3, r2, lsl r0
   18da8:	bne	18e50 <__assert_fail@plt+0x7edc>
   18dac:	movw	r3, #1282	; 0x502
   18db0:	tst	r3, r2, lsl r0
   18db4:	beq	18dc4 <__assert_fail@plt+0x7e50>
   18db8:	mov	r0, r5
   18dbc:	bl	10e9c <fcntl64@plt>
   18dc0:	b	18e68 <__assert_fail@plt+0x7ef4>
   18dc4:	cmp	r0, #6
   18dc8:	bne	18e50 <__assert_fail@plt+0x7edc>
   18dcc:	ldr	r0, [sp, #4]
   18dd0:	movw	r7, #41300	; 0xa154
   18dd4:	movt	r7, #2
   18dd8:	add	r1, r0, #4
   18ddc:	str	r1, [sp, #4]
   18de0:	ldr	r6, [r0]
   18de4:	ldr	r0, [r7]
   18de8:	cmp	r0, #0
   18dec:	bmi	18e8c <__assert_fail@plt+0x7f18>
   18df0:	mov	r0, r5
   18df4:	movw	r1, #1030	; 0x406
   18df8:	mov	r2, r6
   18dfc:	bl	10e9c <fcntl64@plt>
   18e00:	mov	r4, r0
   18e04:	cmn	r0, #1
   18e08:	bgt	18e80 <__assert_fail@plt+0x7f0c>
   18e0c:	bl	10e78 <__errno_location@plt>
   18e10:	ldr	r0, [r0]
   18e14:	cmp	r0, #22
   18e18:	bne	18e80 <__assert_fail@plt+0x7f0c>
   18e1c:	mov	r0, r5
   18e20:	mov	r1, #0
   18e24:	mov	r2, r6
   18e28:	bl	10e9c <fcntl64@plt>
   18e2c:	mov	r4, r0
   18e30:	cmp	r0, #0
   18e34:	bmi	18e6c <__assert_fail@plt+0x7ef8>
   18e38:	mvn	r0, #0
   18e3c:	str	r0, [r7]
   18e40:	mov	r0, #1
   18e44:	cmp	r0, #0
   18e48:	bne	18eb8 <__assert_fail@plt+0x7f44>
   18e4c:	b	18e6c <__assert_fail@plt+0x7ef8>
   18e50:	ldr	r0, [sp, #4]
   18e54:	add	r2, r0, #4
   18e58:	str	r2, [sp, #4]
   18e5c:	ldr	r2, [r0]
   18e60:	mov	r0, r5
   18e64:	bl	10e9c <fcntl64@plt>
   18e68:	mov	r4, r0
   18e6c:	mov	r0, r4
   18e70:	sub	sp, fp, #16
   18e74:	pop	{r4, r5, r6, r7, fp, lr}
   18e78:	add	sp, sp, #8
   18e7c:	bx	lr
   18e80:	mov	r0, #1
   18e84:	str	r0, [r7]
   18e88:	b	18e6c <__assert_fail@plt+0x7ef8>
   18e8c:	mov	r0, r5
   18e90:	mov	r1, #0
   18e94:	mov	r2, r6
   18e98:	bl	10e9c <fcntl64@plt>
   18e9c:	mov	r4, r0
   18ea0:	ldr	r0, [r7]
   18ea4:	add	r0, r0, #1
   18ea8:	clz	r0, r0
   18eac:	lsr	r0, r0, #5
   18eb0:	cmp	r0, #0
   18eb4:	beq	18e6c <__assert_fail@plt+0x7ef8>
   18eb8:	cmp	r4, #0
   18ebc:	bmi	18e6c <__assert_fail@plt+0x7ef8>
   18ec0:	mov	r0, r4
   18ec4:	mov	r1, #1
   18ec8:	bl	10e9c <fcntl64@plt>
   18ecc:	cmp	r0, #0
   18ed0:	bmi	18eec <__assert_fail@plt+0x7f78>
   18ed4:	orr	r2, r0, #1
   18ed8:	mov	r0, r4
   18edc:	mov	r1, #2
   18ee0:	bl	10e9c <fcntl64@plt>
   18ee4:	cmn	r0, #1
   18ee8:	bne	18e6c <__assert_fail@plt+0x7ef8>
   18eec:	bl	10e78 <__errno_location@plt>
   18ef0:	ldr	r6, [r0]
   18ef4:	mov	r5, r0
   18ef8:	mov	r0, r4
   18efc:	bl	10f44 <close@plt>
   18f00:	str	r6, [r5]
   18f04:	mvn	r4, #0
   18f08:	b	18e6c <__assert_fail@plt+0x7ef8>
   18f0c:	sub	sp, sp, #8
   18f10:	push	{fp, lr}
   18f14:	mov	fp, sp
   18f18:	sub	sp, sp, #8
   18f1c:	str	r2, [fp, #8]
   18f20:	str	r3, [fp, #12]
   18f24:	tst	r1, #64	; 0x40
   18f28:	mov	r2, #0
   18f2c:	ldrne	r2, [fp, #8]
   18f30:	bl	10df4 <open64@plt>
   18f34:	bl	18b1c <__assert_fail@plt+0x7ba8>
   18f38:	mov	sp, fp
   18f3c:	pop	{fp, lr}
   18f40:	add	sp, sp, #8
   18f44:	bx	lr
   18f48:	mov	r1, #0
   18f4c:	mov	r2, #3
   18f50:	b	18d2c <__assert_fail@plt+0x7db8>
   18f54:	cmp	r3, #0
   18f58:	cmpeq	r2, #0
   18f5c:	bne	18f80 <__assert_fail@plt+0x800c>
   18f60:	cmp	r1, #0
   18f64:	movlt	r1, #-2147483648	; 0x80000000
   18f68:	movlt	r0, #0
   18f6c:	blt	18f7c <__assert_fail@plt+0x8008>
   18f70:	cmpeq	r0, #0
   18f74:	mvnne	r1, #-2147483648	; 0x80000000
   18f78:	mvnne	r0, #0
   18f7c:	b	19064 <__assert_fail@plt+0x80f0>
   18f80:	sub	sp, sp, #8
   18f84:	push	{sp, lr}
   18f88:	cmp	r1, #0
   18f8c:	blt	18fac <__assert_fail@plt+0x8038>
   18f90:	cmp	r3, #0
   18f94:	blt	18fe0 <__assert_fail@plt+0x806c>
   18f98:	bl	19074 <__assert_fail@plt+0x8100>
   18f9c:	ldr	lr, [sp, #4]
   18fa0:	add	sp, sp, #8
   18fa4:	pop	{r2, r3}
   18fa8:	bx	lr
   18fac:	rsbs	r0, r0, #0
   18fb0:	sbc	r1, r1, r1, lsl #1
   18fb4:	cmp	r3, #0
   18fb8:	blt	19004 <__assert_fail@plt+0x8090>
   18fbc:	bl	19074 <__assert_fail@plt+0x8100>
   18fc0:	ldr	lr, [sp, #4]
   18fc4:	add	sp, sp, #8
   18fc8:	pop	{r2, r3}
   18fcc:	rsbs	r0, r0, #0
   18fd0:	sbc	r1, r1, r1, lsl #1
   18fd4:	rsbs	r2, r2, #0
   18fd8:	sbc	r3, r3, r3, lsl #1
   18fdc:	bx	lr
   18fe0:	rsbs	r2, r2, #0
   18fe4:	sbc	r3, r3, r3, lsl #1
   18fe8:	bl	19074 <__assert_fail@plt+0x8100>
   18fec:	ldr	lr, [sp, #4]
   18ff0:	add	sp, sp, #8
   18ff4:	pop	{r2, r3}
   18ff8:	rsbs	r0, r0, #0
   18ffc:	sbc	r1, r1, r1, lsl #1
   19000:	bx	lr
   19004:	rsbs	r2, r2, #0
   19008:	sbc	r3, r3, r3, lsl #1
   1900c:	bl	19074 <__assert_fail@plt+0x8100>
   19010:	ldr	lr, [sp, #4]
   19014:	add	sp, sp, #8
   19018:	pop	{r2, r3}
   1901c:	rsbs	r2, r2, #0
   19020:	sbc	r3, r3, r3, lsl #1
   19024:	bx	lr
   19028:	cmp	r3, #0
   1902c:	cmpeq	r2, #0
   19030:	bne	19048 <__assert_fail@plt+0x80d4>
   19034:	cmp	r1, #0
   19038:	cmpeq	r0, #0
   1903c:	mvnne	r1, #0
   19040:	mvnne	r0, #0
   19044:	b	19064 <__assert_fail@plt+0x80f0>
   19048:	sub	sp, sp, #8
   1904c:	push	{sp, lr}
   19050:	bl	19074 <__assert_fail@plt+0x8100>
   19054:	ldr	lr, [sp, #4]
   19058:	add	sp, sp, #8
   1905c:	pop	{r2, r3}
   19060:	bx	lr
   19064:	push	{r1, lr}
   19068:	mov	r0, #8
   1906c:	bl	10d10 <raise@plt>
   19070:	pop	{r1, pc}
   19074:	cmp	r1, r3
   19078:	cmpeq	r0, r2
   1907c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19080:	mov	r4, r0
   19084:	movcc	r0, #0
   19088:	mov	r5, r1
   1908c:	ldr	lr, [sp, #36]	; 0x24
   19090:	movcc	r1, r0
   19094:	bcc	19190 <__assert_fail@plt+0x821c>
   19098:	cmp	r3, #0
   1909c:	clzeq	ip, r2
   190a0:	clzne	ip, r3
   190a4:	addeq	ip, ip, #32
   190a8:	cmp	r5, #0
   190ac:	clzeq	r1, r4
   190b0:	addeq	r1, r1, #32
   190b4:	clzne	r1, r5
   190b8:	sub	ip, ip, r1
   190bc:	sub	sl, ip, #32
   190c0:	lsl	r9, r3, ip
   190c4:	rsb	fp, ip, #32
   190c8:	orr	r9, r9, r2, lsl sl
   190cc:	orr	r9, r9, r2, lsr fp
   190d0:	lsl	r8, r2, ip
   190d4:	cmp	r5, r9
   190d8:	cmpeq	r4, r8
   190dc:	movcc	r0, #0
   190e0:	movcc	r1, r0
   190e4:	bcc	19100 <__assert_fail@plt+0x818c>
   190e8:	mov	r0, #1
   190ec:	subs	r4, r4, r8
   190f0:	lsl	r1, r0, sl
   190f4:	orr	r1, r1, r0, lsr fp
   190f8:	lsl	r0, r0, ip
   190fc:	sbc	r5, r5, r9
   19100:	cmp	ip, #0
   19104:	beq	19190 <__assert_fail@plt+0x821c>
   19108:	lsr	r6, r8, #1
   1910c:	orr	r6, r6, r9, lsl #31
   19110:	lsr	r7, r9, #1
   19114:	mov	r2, ip
   19118:	b	1913c <__assert_fail@plt+0x81c8>
   1911c:	subs	r3, r4, r6
   19120:	sbc	r8, r5, r7
   19124:	adds	r3, r3, r3
   19128:	adc	r8, r8, r8
   1912c:	adds	r4, r3, #1
   19130:	adc	r5, r8, #0
   19134:	subs	r2, r2, #1
   19138:	beq	19158 <__assert_fail@plt+0x81e4>
   1913c:	cmp	r5, r7
   19140:	cmpeq	r4, r6
   19144:	bcs	1911c <__assert_fail@plt+0x81a8>
   19148:	adds	r4, r4, r4
   1914c:	adc	r5, r5, r5
   19150:	subs	r2, r2, #1
   19154:	bne	1913c <__assert_fail@plt+0x81c8>
   19158:	lsr	r3, r4, ip
   1915c:	orr	r3, r3, r5, lsl fp
   19160:	lsr	r2, r5, ip
   19164:	orr	r3, r3, r5, lsr sl
   19168:	adds	r0, r0, r4
   1916c:	mov	r4, r3
   19170:	lsl	r3, r2, ip
   19174:	orr	r3, r3, r4, lsl sl
   19178:	lsl	ip, r4, ip
   1917c:	orr	r3, r3, r4, lsr fp
   19180:	adc	r1, r1, r5
   19184:	subs	r0, r0, ip
   19188:	mov	r5, r2
   1918c:	sbc	r1, r1, r3
   19190:	cmp	lr, #0
   19194:	strdne	r4, [lr]
   19198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1919c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191a0:	mov	r7, r0
   191a4:	ldr	r6, [pc, #72]	; 191f4 <__assert_fail@plt+0x8280>
   191a8:	ldr	r5, [pc, #72]	; 191f8 <__assert_fail@plt+0x8284>
   191ac:	add	r6, pc, r6
   191b0:	add	r5, pc, r5
   191b4:	sub	r6, r6, r5
   191b8:	mov	r8, r1
   191bc:	mov	r9, r2
   191c0:	bl	10cd8 <fstatfs64@plt-0x20>
   191c4:	asrs	r6, r6, #2
   191c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   191cc:	mov	r4, #0
   191d0:	add	r4, r4, #1
   191d4:	ldr	r3, [r5], #4
   191d8:	mov	r2, r9
   191dc:	mov	r1, r8
   191e0:	mov	r0, r7
   191e4:	blx	r3
   191e8:	cmp	r6, r4
   191ec:	bne	191d0 <__assert_fail@plt+0x825c>
   191f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191f4:	andeq	r0, r1, r8, asr sp
   191f8:	andeq	r0, r1, r0, asr sp
   191fc:	bx	lr

Disassembly of section .fini:

00019200 <.fini>:
   19200:	push	{r3, lr}
   19204:	pop	{r3, pc}
