
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010bcc <.init>:
   10bcc:	push	{r3, lr}
   10bd0:	bl	11240 <__assert_fail@plt+0x414>
   10bd4:	pop	{r3, pc}

Disassembly of section .plt:

00010bd8 <calloc@plt-0x14>:
   10bd8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bdc:	ldr	lr, [pc, #4]	; 10be8 <calloc@plt-0x4>
   10be0:	add	lr, pc, lr
   10be4:	ldr	pc, [lr, #8]!
   10be8:	andeq	r4, r1, r8, lsl r4

00010bec <calloc@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #20, 20	; 0x14000
   10bf4:	ldr	pc, [ip, #1048]!	; 0x418

00010bf8 <fputs_unlocked@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #20, 20	; 0x14000
   10c00:	ldr	pc, [ip, #1040]!	; 0x410

00010c04 <strcmp@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #20, 20	; 0x14000
   10c0c:	ldr	pc, [ip, #1032]!	; 0x408

00010c10 <strtol@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #20, 20	; 0x14000
   10c18:	ldr	pc, [ip, #1024]!	; 0x400

00010c1c <fflush@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #20, 20	; 0x14000
   10c24:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c28 <free@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #20, 20	; 0x14000
   10c30:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c34 <_exit@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #20, 20	; 0x14000
   10c3c:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c40 <memcpy@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #20, 20	; 0x14000
   10c48:	ldr	pc, [ip, #992]!	; 0x3e0

00010c4c <execvp@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #20, 20	; 0x14000
   10c54:	ldr	pc, [ip, #984]!	; 0x3d8

00010c58 <mbsinit@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #20, 20	; 0x14000
   10c60:	ldr	pc, [ip, #976]!	; 0x3d0

00010c64 <memcmp@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #20, 20	; 0x14000
   10c6c:	ldr	pc, [ip, #968]!	; 0x3c8

00010c70 <fputc_unlocked@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #20, 20	; 0x14000
   10c78:	ldr	pc, [ip, #960]!	; 0x3c0

00010c7c <dcgettext@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #20, 20	; 0x14000
   10c84:	ldr	pc, [ip, #952]!	; 0x3b8

00010c88 <realloc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #944]!	; 0x3b0

00010c94 <getpriority@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #936]!	; 0x3a8

00010ca0 <textdomain@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #928]!	; 0x3a0

00010cac <iswprint@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #920]!	; 0x398

00010cb8 <lseek64@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #912]!	; 0x390

00010cc4 <__ctype_get_mb_cur_max@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #904]!	; 0x388

00010cd0 <__fpending@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #896]!	; 0x380

00010cdc <ferror_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #888]!	; 0x378

00010ce8 <mbrtowc@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #880]!	; 0x370

00010cf4 <error@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #872]!	; 0x368

00010d00 <setpriority@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #864]!	; 0x360

00010d0c <malloc@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #856]!	; 0x358

00010d18 <__libc_start_main@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #848]!	; 0x350

00010d24 <__freading@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #840]!	; 0x348

00010d30 <__gmon_start__@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #832]!	; 0x340

00010d3c <getopt_long@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #824]!	; 0x338

00010d48 <__ctype_b_loc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #816]!	; 0x330

00010d54 <exit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #808]!	; 0x328

00010d60 <strlen@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #800]!	; 0x320

00010d6c <strchr@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #792]!	; 0x318

00010d78 <__errno_location@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #784]!	; 0x310

00010d84 <__cxa_atexit@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #776]!	; 0x308

00010d90 <memset@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #768]!	; 0x300

00010d9c <__printf_chk@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #760]!	; 0x2f8

00010da8 <fileno@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #752]!	; 0x2f0

00010db4 <__fprintf_chk@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #744]!	; 0x2e8

00010dc0 <fclose@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #736]!	; 0x2e0

00010dcc <fseeko64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #728]!	; 0x2d8

00010dd8 <setlocale@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #720]!	; 0x2d0

00010de4 <strrchr@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #712]!	; 0x2c8

00010df0 <nl_langinfo@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dfc <bindtextdomain@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #696]!	; 0x2b8

00010e08 <fputs@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #688]!	; 0x2b0

00010e14 <strncmp@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #680]!	; 0x2a8

00010e20 <abort@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #672]!	; 0x2a0

00010e2c <__assert_fail@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #664]!	; 0x298

Disassembly of section .text:

00010e38 <.text>:
   10e38:	push	{r4, lr}
   10e3c:	bl	10d78 <__errno_location@plt>
   10e40:	mov	r3, #12
   10e44:	str	r3, [r0]
   10e48:	mov	r0, #0
   10e4c:	pop	{r4, pc}
   10e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e54:	mov	r7, r0
   10e58:	sub	sp, sp, #20
   10e5c:	mov	r6, r1
   10e60:	mov	r4, #1
   10e64:	mov	r5, #0
   10e68:	ldr	r0, [r1]
   10e6c:	bl	11670 <__assert_fail@plt+0x844>
   10e70:	ldr	r1, [pc, #824]	; 111b0 <__assert_fail@plt+0x384>
   10e74:	mov	r0, #6
   10e78:	bl	10dd8 <setlocale@plt>
   10e7c:	ldr	r1, [pc, #816]	; 111b4 <__assert_fail@plt+0x388>
   10e80:	ldr	r0, [pc, #816]	; 111b8 <__assert_fail@plt+0x38c>
   10e84:	bl	10dfc <bindtextdomain@plt>
   10e88:	ldr	r0, [pc, #808]	; 111b8 <__assert_fail@plt+0x38c>
   10e8c:	bl	10ca0 <textdomain@plt>
   10e90:	ldr	r3, [pc, #804]	; 111bc <__assert_fail@plt+0x390>
   10e94:	mov	r2, #125	; 0x7d
   10e98:	ldr	r0, [pc, #800]	; 111c0 <__assert_fail@plt+0x394>
   10e9c:	ldr	r8, [pc, #800]	; 111c4 <__assert_fail@plt+0x398>
   10ea0:	str	r2, [r3]
   10ea4:	ldr	r9, [pc, #796]	; 111c8 <__assert_fail@plt+0x39c>
   10ea8:	ldr	sl, [pc, #796]	; 111cc <__assert_fail@plt+0x3a0>
   10eac:	bl	13d54 <__assert_fail@plt+0x2f28>
   10eb0:	cmp	r4, r7
   10eb4:	blt	10f14 <__assert_fail@plt+0xe8>
   10eb8:	cmp	r5, #0
   10ebc:	beq	11154 <__assert_fail@plt+0x328>
   10ec0:	ldr	r3, [pc, #744]	; 111b0 <__assert_fail@plt+0x384>
   10ec4:	mov	r2, #10
   10ec8:	mov	r1, #0
   10ecc:	mov	r0, r5
   10ed0:	str	r3, [sp]
   10ed4:	add	r3, sp, #12
   10ed8:	bl	134d4 <__assert_fail@plt+0x26a8>
   10edc:	cmp	r0, #1
   10ee0:	bls	11000 <__assert_fail@plt+0x1d4>
   10ee4:	mov	r2, #5
   10ee8:	ldr	r1, [pc, #736]	; 111d0 <__assert_fail@plt+0x3a4>
   10eec:	mov	r0, #0
   10ef0:	bl	10c7c <dcgettext@plt>
   10ef4:	mov	r4, r0
   10ef8:	mov	r0, r5
   10efc:	bl	12c70 <__assert_fail@plt+0x1e44>
   10f00:	mov	r3, r0
   10f04:	mov	r2, r4
   10f08:	mov	r1, #0
   10f0c:	mov	r0, #125	; 0x7d
   10f10:	bl	10cf4 <error@plt>
   10f14:	ldr	r2, [r6, r4, lsl #2]
   10f18:	lsl	r1, r4, #2
   10f1c:	ldrb	r3, [r2]
   10f20:	cmp	r3, #45	; 0x2d
   10f24:	bne	10f58 <__assert_fail@plt+0x12c>
   10f28:	ldrb	r3, [r2, #1]
   10f2c:	sub	r3, r3, #43	; 0x2b
   10f30:	and	r3, r3, #253	; 0xfd
   10f34:	cmp	r3, #0
   10f38:	movne	r3, r2
   10f3c:	addeq	r3, r2, #1
   10f40:	ldrb	r3, [r3, #1]
   10f44:	sub	r3, r3, #48	; 0x30
   10f48:	cmp	r3, #9
   10f4c:	addls	r5, r2, #1
   10f50:	addls	r4, r4, #1
   10f54:	bls	10eb0 <__assert_fail@plt+0x84>
   10f58:	ldr	r3, [r6]
   10f5c:	sub	r1, r1, #4
   10f60:	mov	fp, #0
   10f64:	sub	r0, r4, #1
   10f68:	mov	r2, sl
   10f6c:	sub	r0, r7, r0
   10f70:	str	r3, [r6, r1]
   10f74:	mov	r3, r9
   10f78:	add	r1, r6, r1
   10f7c:	str	fp, [r8]
   10f80:	str	fp, [sp]
   10f84:	bl	10d3c <getopt_long@plt>
   10f88:	ldr	r3, [r8]
   10f8c:	cmn	r0, #2
   10f90:	sub	r3, r3, #1
   10f94:	add	r4, r4, r3
   10f98:	beq	10fcc <__assert_fail@plt+0x1a0>
   10f9c:	bgt	10fb0 <__assert_fail@plt+0x184>
   10fa0:	cmn	r0, #3
   10fa4:	beq	10fd4 <__assert_fail@plt+0x1a8>
   10fa8:	mov	r0, #125	; 0x7d
   10fac:	b	10fd0 <__assert_fail@plt+0x1a4>
   10fb0:	cmn	r0, #1
   10fb4:	beq	10eb8 <__assert_fail@plt+0x8c>
   10fb8:	cmp	r0, #110	; 0x6e
   10fbc:	bne	10fa8 <__assert_fail@plt+0x17c>
   10fc0:	ldr	r3, [pc, #524]	; 111d4 <__assert_fail@plt+0x3a8>
   10fc4:	ldr	r5, [r3]
   10fc8:	b	10eb0 <__assert_fail@plt+0x84>
   10fcc:	mov	r0, fp
   10fd0:	bl	112f4 <__assert_fail@plt+0x4c8>
   10fd4:	ldr	r3, [pc, #508]	; 111d8 <__assert_fail@plt+0x3ac>
   10fd8:	ldr	r0, [pc, #508]	; 111dc <__assert_fail@plt+0x3b0>
   10fdc:	ldr	r2, [pc, #508]	; 111e0 <__assert_fail@plt+0x3b4>
   10fe0:	stm	sp, {r3, fp}
   10fe4:	ldr	r3, [pc, #504]	; 111e4 <__assert_fail@plt+0x3b8>
   10fe8:	ldr	r1, [pc, #504]	; 111e8 <__assert_fail@plt+0x3bc>
   10fec:	ldr	r0, [r0]
   10ff0:	ldr	r3, [r3]
   10ff4:	bl	130bc <__assert_fail@plt+0x2290>
   10ff8:	mov	r0, fp
   10ffc:	bl	10d54 <exit@plt>
   11000:	ldr	r5, [sp, #12]
   11004:	mvn	r3, #38	; 0x26
   11008:	cmp	r5, #39	; 0x27
   1100c:	movge	r5, #39	; 0x27
   11010:	cmp	r5, r3
   11014:	movlt	r5, r3
   11018:	cmp	r4, r7
   1101c:	bne	11060 <__assert_fail@plt+0x234>
   11020:	mov	r2, #5
   11024:	ldr	r1, [pc, #448]	; 111ec <__assert_fail@plt+0x3c0>
   11028:	mov	r0, #0
   1102c:	bl	10c7c <dcgettext@plt>
   11030:	mov	r1, #0
   11034:	mov	r2, r0
   11038:	mov	r0, r1
   1103c:	bl	10cf4 <error@plt>
   11040:	b	10fa8 <__assert_fail@plt+0x17c>
   11044:	ldr	r1, [pc, #420]	; 111f0 <__assert_fail@plt+0x3c4>
   11048:	mov	r0, #1
   1104c:	mov	r4, #0
   11050:	bl	10d9c <__printf_chk@plt>
   11054:	mov	r0, r4
   11058:	add	sp, sp, #20
   1105c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11060:	bl	10d78 <__errno_location@plt>
   11064:	mov	r8, #0
   11068:	mov	r7, r0
   1106c:	mov	r1, r8
   11070:	mov	r0, r8
   11074:	str	r8, [r7]
   11078:	bl	10c94 <getpriority@plt>
   1107c:	cmn	r0, #1
   11080:	bne	110ac <__assert_fail@plt+0x280>
   11084:	ldr	r9, [r7]
   11088:	cmp	r9, r8
   1108c:	beq	110ac <__assert_fail@plt+0x280>
   11090:	mov	r2, #5
   11094:	ldr	r1, [pc, #344]	; 111f4 <__assert_fail@plt+0x3c8>
   11098:	mov	r0, r8
   1109c:	bl	10c7c <dcgettext@plt>
   110a0:	mov	r2, r0
   110a4:	mov	r1, r9
   110a8:	b	111a8 <__assert_fail@plt+0x37c>
   110ac:	mov	r1, #0
   110b0:	add	r2, r0, r5
   110b4:	mov	r0, r1
   110b8:	bl	10d00 <setpriority@plt>
   110bc:	cmp	r0, #0
   110c0:	bne	11104 <__assert_fail@plt+0x2d8>
   110c4:	lsl	r8, r4, #2
   110c8:	ldr	r0, [r6, r4, lsl #2]
   110cc:	add	r1, r6, r8
   110d0:	bl	10c4c <execvp@plt>
   110d4:	ldr	r5, [r7]
   110d8:	ldr	r0, [r6, r8]
   110dc:	cmp	r5, #2
   110e0:	moveq	r4, #127	; 0x7f
   110e4:	movne	r4, #126	; 0x7e
   110e8:	bl	12c70 <__assert_fail@plt+0x1e44>
   110ec:	mov	r3, r0
   110f0:	ldr	r2, [pc, #256]	; 111f8 <__assert_fail@plt+0x3cc>
   110f4:	mov	r1, r5
   110f8:	mov	r0, #0
   110fc:	bl	10cf4 <error@plt>
   11100:	b	11054 <__assert_fail@plt+0x228>
   11104:	ldr	r5, [r7]
   11108:	mov	r2, #5
   1110c:	mov	r0, #0
   11110:	ldr	r1, [pc, #228]	; 111fc <__assert_fail@plt+0x3d0>
   11114:	cmp	r5, #13
   11118:	cmpne	r5, #1
   1111c:	movne	r8, #125	; 0x7d
   11120:	moveq	r8, #0
   11124:	bl	10c7c <dcgettext@plt>
   11128:	mov	r2, r0
   1112c:	mov	r1, r5
   11130:	mov	r0, r8
   11134:	bl	10cf4 <error@plt>
   11138:	ldr	r3, [pc, #192]	; 11200 <__assert_fail@plt+0x3d4>
   1113c:	ldr	r0, [r3]
   11140:	bl	10cdc <ferror_unlocked@plt>
   11144:	cmp	r0, #0
   11148:	movne	r4, #125	; 0x7d
   1114c:	beq	110c4 <__assert_fail@plt+0x298>
   11150:	b	11054 <__assert_fail@plt+0x228>
   11154:	bl	10d78 <__errno_location@plt>
   11158:	cmp	r4, r7
   1115c:	mov	r8, r0
   11160:	movne	r5, #10
   11164:	bne	11060 <__assert_fail@plt+0x234>
   11168:	mov	r1, r5
   1116c:	mov	r0, r5
   11170:	str	r5, [r8]
   11174:	bl	10c94 <getpriority@plt>
   11178:	cmn	r0, #1
   1117c:	mov	r2, r0
   11180:	bne	11044 <__assert_fail@plt+0x218>
   11184:	ldr	r4, [r8]
   11188:	cmp	r4, #0
   1118c:	beq	11044 <__assert_fail@plt+0x218>
   11190:	mov	r2, #5
   11194:	ldr	r1, [pc, #88]	; 111f4 <__assert_fail@plt+0x3c8>
   11198:	mov	r0, r5
   1119c:	bl	10c7c <dcgettext@plt>
   111a0:	mov	r2, r0
   111a4:	mov	r1, r4
   111a8:	mov	r0, #125	; 0x7d
   111ac:	bl	10cf4 <error@plt>
   111b0:			; <UNDEFINED> instruction: 0x000141b6
   111b4:			; <UNDEFINED> instruction: 0x000141b7
   111b8:	andeq	r4, r1, r4, lsl r1
   111bc:	andeq	r5, r2, r0, ror #1
   111c0:	muleq	r1, ip, r5
   111c4:	andeq	r5, r2, r0, lsr r1
   111c8:			; <UNDEFINED> instruction: 0x00013db0
   111cc:	andeq	r4, r1, pc, asr #3
   111d0:	andeq	r4, r1, r3, ror #3
   111d4:	andeq	r5, r2, r0, asr #2
   111d8:	ldrdeq	r4, [r1], -r3
   111dc:	andeq	r5, r2, ip, lsr r1
   111e0:	andeq	r4, r1, r0, lsl r1
   111e4:	ldrdeq	r5, [r2], -ip
   111e8:	strdeq	r3, [r1], -r0
   111ec:	strdeq	r4, [r1], -r9
   111f0:	andeq	r4, r1, r8, lsr r2
   111f4:	andeq	r4, r1, r4, lsr #4
   111f8:	ldrdeq	r4, [r1], -fp
   111fc:	andeq	r4, r1, ip, lsr r2
   11200:	andeq	r5, r2, r8, lsr r1
   11204:	mov	fp, #0
   11208:	mov	lr, #0
   1120c:	pop	{r1}		; (ldr r1, [sp], #4)
   11210:	mov	r2, sp
   11214:	push	{r2}		; (str r2, [sp, #-4]!)
   11218:	push	{r0}		; (str r0, [sp, #-4]!)
   1121c:	ldr	ip, [pc, #16]	; 11234 <__assert_fail@plt+0x408>
   11220:	push	{ip}		; (str ip, [sp, #-4]!)
   11224:	ldr	r0, [pc, #12]	; 11238 <__assert_fail@plt+0x40c>
   11228:	ldr	r3, [pc, #12]	; 1123c <__assert_fail@plt+0x410>
   1122c:	bl	10d18 <__libc_start_main@plt>
   11230:	bl	10e20 <abort@plt>
   11234:	andeq	r3, r1, r0, asr sp
   11238:	andeq	r0, r1, r0, asr lr
   1123c:	strdeq	r3, [r1], -r0
   11240:	ldr	r3, [pc, #20]	; 1125c <__assert_fail@plt+0x430>
   11244:	ldr	r2, [pc, #20]	; 11260 <__assert_fail@plt+0x434>
   11248:	add	r3, pc, r3
   1124c:	ldr	r2, [r3, r2]
   11250:	cmp	r2, #0
   11254:	bxeq	lr
   11258:	b	10d30 <__gmon_start__@plt>
   1125c:			; <UNDEFINED> instruction: 0x00013db0
   11260:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11264:	ldr	r0, [pc, #24]	; 11284 <__assert_fail@plt+0x458>
   11268:	ldr	r3, [pc, #24]	; 11288 <__assert_fail@plt+0x45c>
   1126c:	cmp	r3, r0
   11270:	bxeq	lr
   11274:	ldr	r3, [pc, #16]	; 1128c <__assert_fail@plt+0x460>
   11278:	cmp	r3, #0
   1127c:	bxeq	lr
   11280:	bx	r3
   11284:	andeq	r5, r2, r4, lsr #2
   11288:	andeq	r5, r2, r4, lsr #2
   1128c:	andeq	r0, r0, r0
   11290:	ldr	r0, [pc, #36]	; 112bc <__assert_fail@plt+0x490>
   11294:	ldr	r1, [pc, #36]	; 112c0 <__assert_fail@plt+0x494>
   11298:	sub	r1, r1, r0
   1129c:	asr	r1, r1, #2
   112a0:	add	r1, r1, r1, lsr #31
   112a4:	asrs	r1, r1, #1
   112a8:	bxeq	lr
   112ac:	ldr	r3, [pc, #16]	; 112c4 <__assert_fail@plt+0x498>
   112b0:	cmp	r3, #0
   112b4:	bxeq	lr
   112b8:	bx	r3
   112bc:	andeq	r5, r2, r4, lsr #2
   112c0:	andeq	r5, r2, r4, lsr #2
   112c4:	andeq	r0, r0, r0
   112c8:	push	{r4, lr}
   112cc:	ldr	r4, [pc, #24]	; 112ec <__assert_fail@plt+0x4c0>
   112d0:	ldrb	r3, [r4]
   112d4:	cmp	r3, #0
   112d8:	popne	{r4, pc}
   112dc:	bl	11264 <__assert_fail@plt+0x438>
   112e0:	mov	r3, #1
   112e4:	strb	r3, [r4]
   112e8:	pop	{r4, pc}
   112ec:	andeq	r5, r2, r4, asr #2
   112f0:	b	11290 <__assert_fail@plt+0x464>
   112f4:	subs	r4, r0, #0
   112f8:	push	{r7, lr}
   112fc:	sub	sp, sp, #56	; 0x38
   11300:	ldr	r5, [pc, #540]	; 11524 <__assert_fail@plt+0x6f8>
   11304:	beq	1133c <__assert_fail@plt+0x510>
   11308:	mov	r2, #5
   1130c:	mov	r0, #0
   11310:	ldr	r3, [pc, #528]	; 11528 <__assert_fail@plt+0x6fc>
   11314:	ldr	r1, [pc, #528]	; 1152c <__assert_fail@plt+0x700>
   11318:	ldr	r6, [r3]
   1131c:	bl	10c7c <dcgettext@plt>
   11320:	mov	r2, r0
   11324:	mov	r1, #1
   11328:	ldr	r3, [r5]
   1132c:	mov	r0, r6
   11330:	bl	10db4 <__fprintf_chk@plt>
   11334:	mov	r0, r4
   11338:	bl	10d54 <exit@plt>
   1133c:	mov	r2, #5
   11340:	ldr	r1, [pc, #488]	; 11530 <__assert_fail@plt+0x704>
   11344:	mov	r6, sp
   11348:	bl	10c7c <dcgettext@plt>
   1134c:	mov	r1, r0
   11350:	mov	r0, #1
   11354:	ldr	r2, [r5]
   11358:	bl	10d9c <__printf_chk@plt>
   1135c:	ldr	r5, [pc, #464]	; 11534 <__assert_fail@plt+0x708>
   11360:	mov	r2, #5
   11364:	mov	r0, r4
   11368:	ldr	r1, [pc, #456]	; 11538 <__assert_fail@plt+0x70c>
   1136c:	bl	10c7c <dcgettext@plt>
   11370:	mov	r1, r0
   11374:	mov	r3, #19
   11378:	ldr	r7, [pc, #444]	; 1153c <__assert_fail@plt+0x710>
   1137c:	mvn	r2, #19
   11380:	mov	r0, #1
   11384:	bl	10d9c <__printf_chk@plt>
   11388:	mov	r2, #5
   1138c:	ldr	r1, [pc, #428]	; 11540 <__assert_fail@plt+0x714>
   11390:	mov	r0, r4
   11394:	bl	10c7c <dcgettext@plt>
   11398:	ldr	r1, [r5]
   1139c:	bl	10bf8 <fputs_unlocked@plt>
   113a0:	mov	r2, #5
   113a4:	ldr	r1, [pc, #408]	; 11544 <__assert_fail@plt+0x718>
   113a8:	mov	r0, r4
   113ac:	bl	10c7c <dcgettext@plt>
   113b0:	ldr	r1, [r5]
   113b4:	bl	10bf8 <fputs_unlocked@plt>
   113b8:	mov	r2, #5
   113bc:	ldr	r1, [pc, #388]	; 11548 <__assert_fail@plt+0x71c>
   113c0:	mov	r0, r4
   113c4:	bl	10c7c <dcgettext@plt>
   113c8:	ldr	r1, [r5]
   113cc:	bl	10bf8 <fputs_unlocked@plt>
   113d0:	mov	r2, #5
   113d4:	ldr	r1, [pc, #368]	; 1154c <__assert_fail@plt+0x720>
   113d8:	mov	r0, r4
   113dc:	bl	10c7c <dcgettext@plt>
   113e0:	ldr	r1, [r5]
   113e4:	bl	10bf8 <fputs_unlocked@plt>
   113e8:	mov	r2, #5
   113ec:	ldr	r1, [pc, #348]	; 11550 <__assert_fail@plt+0x724>
   113f0:	mov	r0, r4
   113f4:	bl	10c7c <dcgettext@plt>
   113f8:	mov	r1, r0
   113fc:	ldr	r2, [pc, #312]	; 1153c <__assert_fail@plt+0x710>
   11400:	mov	r0, #1
   11404:	bl	10d9c <__printf_chk@plt>
   11408:	ldr	lr, [pc, #324]	; 11554 <__assert_fail@plt+0x728>
   1140c:	mov	ip, sp
   11410:	ldm	lr!, {r0, r1, r2, r3}
   11414:	stmia	ip!, {r0, r1, r2, r3}
   11418:	ldm	lr!, {r0, r1, r2, r3}
   1141c:	stmia	ip!, {r0, r1, r2, r3}
   11420:	ldm	lr!, {r0, r1, r2, r3}
   11424:	stmia	ip!, {r0, r1, r2, r3}
   11428:	ldm	lr, {r0, r1}
   1142c:	stm	ip, {r0, r1}
   11430:	ldr	r1, [r6]
   11434:	cmp	r1, #0
   11438:	bne	114dc <__assert_fail@plt+0x6b0>
   1143c:	ldr	r6, [r6, #4]
   11440:	mov	r2, #5
   11444:	mov	r0, #0
   11448:	ldr	r7, [pc, #236]	; 1153c <__assert_fail@plt+0x710>
   1144c:	ldr	r1, [pc, #260]	; 11558 <__assert_fail@plt+0x72c>
   11450:	cmp	r6, #0
   11454:	moveq	r6, r7
   11458:	bl	10c7c <dcgettext@plt>
   1145c:	mov	r1, r0
   11460:	ldr	r3, [pc, #244]	; 1155c <__assert_fail@plt+0x730>
   11464:	mov	r0, #1
   11468:	ldr	r2, [pc, #240]	; 11560 <__assert_fail@plt+0x734>
   1146c:	bl	10d9c <__printf_chk@plt>
   11470:	mov	r1, #0
   11474:	mov	r0, #5
   11478:	bl	10dd8 <setlocale@plt>
   1147c:	cmp	r0, #0
   11480:	bne	114f4 <__assert_fail@plt+0x6c8>
   11484:	mov	r2, #5
   11488:	ldr	r1, [pc, #212]	; 11564 <__assert_fail@plt+0x738>
   1148c:	mov	r0, #0
   11490:	bl	10c7c <dcgettext@plt>
   11494:	mov	r1, r0
   11498:	ldr	r3, [pc, #156]	; 1153c <__assert_fail@plt+0x710>
   1149c:	mov	r0, #1
   114a0:	ldr	r2, [pc, #180]	; 1155c <__assert_fail@plt+0x730>
   114a4:	bl	10d9c <__printf_chk@plt>
   114a8:	mov	r2, #5
   114ac:	ldr	r1, [pc, #180]	; 11568 <__assert_fail@plt+0x73c>
   114b0:	mov	r0, #0
   114b4:	bl	10c7c <dcgettext@plt>
   114b8:	ldr	r2, [pc, #172]	; 1156c <__assert_fail@plt+0x740>
   114bc:	cmp	r6, r7
   114c0:	mov	r1, r0
   114c4:	mov	r0, #1
   114c8:	ldr	r3, [pc, #160]	; 11570 <__assert_fail@plt+0x744>
   114cc:	moveq	r3, r2
   114d0:	mov	r2, r6
   114d4:	bl	10d9c <__printf_chk@plt>
   114d8:	b	11334 <__assert_fail@plt+0x508>
   114dc:	mov	r0, r7
   114e0:	bl	10c04 <strcmp@plt>
   114e4:	cmp	r0, #0
   114e8:	beq	1143c <__assert_fail@plt+0x610>
   114ec:	add	r6, r6, #8
   114f0:	b	11430 <__assert_fail@plt+0x604>
   114f4:	mov	r2, #3
   114f8:	ldr	r1, [pc, #116]	; 11574 <__assert_fail@plt+0x748>
   114fc:	bl	10e14 <strncmp@plt>
   11500:	cmp	r0, #0
   11504:	beq	11484 <__assert_fail@plt+0x658>
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #100]	; 11578 <__assert_fail@plt+0x74c>
   11510:	mov	r0, #0
   11514:	bl	10c7c <dcgettext@plt>
   11518:	ldr	r1, [r5]
   1151c:	bl	10bf8 <fputs_unlocked@plt>
   11520:	b	11484 <__assert_fail@plt+0x658>
   11524:	andeq	r5, r2, r0, asr r1
   11528:	andeq	r5, r2, r8, lsr r1
   1152c:	strdeq	r3, [r1], -r5
   11530:	andeq	r3, r1, ip, lsl lr
   11534:	andeq	r5, r2, ip, lsr r1
   11538:	andeq	r3, r1, r3, asr #28
   1153c:	strdeq	r3, [r1], -r0
   11540:	andeq	r3, r1, r1, lsr #30
   11544:	andeq	r3, r1, ip, ror #30
   11548:	andeq	r3, r1, pc, lsr #31
   1154c:	ldrdeq	r3, [r1], -ip
   11550:	andeq	r4, r1, r2, lsl r0
   11554:	andeq	r3, r1, r8, ror sp
   11558:	ldrdeq	r4, [r1], -r1
   1155c:	andeq	r4, r1, r8, ror #1
   11560:	andeq	r4, r1, r0, lsl r1
   11564:	andeq	r4, r1, r9, ror #2
   11568:	andeq	r4, r1, r4, lsl #3
   1156c:	andeq	r4, r1, ip, ror #4
   11570:			; <UNDEFINED> instruction: 0x000141b6
   11574:	andeq	r4, r1, lr, lsl r1
   11578:	andeq	r4, r1, r2, lsr #2
   1157c:	ldr	r3, [pc, #4]	; 11588 <__assert_fail@plt+0x75c>
   11580:	str	r0, [r3]
   11584:	bx	lr
   11588:	andeq	r5, r2, r8, asr #2
   1158c:	ldr	r3, [pc, #4]	; 11598 <__assert_fail@plt+0x76c>
   11590:	strb	r0, [r3, #4]
   11594:	bx	lr
   11598:	andeq	r5, r2, r8, asr #2
   1159c:	ldr	r3, [pc, #176]	; 11654 <__assert_fail@plt+0x828>
   115a0:	push	{r0, r1, r4, r5, r6, lr}
   115a4:	ldr	r0, [r3]
   115a8:	bl	138e8 <__assert_fail@plt+0x2abc>
   115ac:	cmp	r0, #0
   115b0:	beq	11638 <__assert_fail@plt+0x80c>
   115b4:	ldr	r4, [pc, #156]	; 11658 <__assert_fail@plt+0x82c>
   115b8:	bl	10d78 <__errno_location@plt>
   115bc:	mov	r5, r0
   115c0:	ldrb	r6, [r4, #4]
   115c4:	cmp	r6, #0
   115c8:	beq	115d8 <__assert_fail@plt+0x7ac>
   115cc:	ldr	r3, [r0]
   115d0:	cmp	r3, #32
   115d4:	beq	11638 <__assert_fail@plt+0x80c>
   115d8:	mov	r2, #5
   115dc:	ldr	r1, [pc, #120]	; 1165c <__assert_fail@plt+0x830>
   115e0:	mov	r0, #0
   115e4:	bl	10c7c <dcgettext@plt>
   115e8:	mov	r6, r0
   115ec:	ldr	r0, [r4]
   115f0:	cmp	r0, #0
   115f4:	beq	11624 <__assert_fail@plt+0x7f8>
   115f8:	ldr	r4, [r5]
   115fc:	bl	12b20 <__assert_fail@plt+0x1cf4>
   11600:	mov	r3, r0
   11604:	ldr	r2, [pc, #84]	; 11660 <__assert_fail@plt+0x834>
   11608:	mov	r0, #0
   1160c:	str	r6, [sp]
   11610:	mov	r1, r4
   11614:	bl	10cf4 <error@plt>
   11618:	ldr	r3, [pc, #68]	; 11664 <__assert_fail@plt+0x838>
   1161c:	ldr	r0, [r3]
   11620:	bl	10c34 <_exit@plt>
   11624:	mov	r3, r6
   11628:	ldr	r2, [pc, #56]	; 11668 <__assert_fail@plt+0x83c>
   1162c:	ldr	r1, [r5]
   11630:	bl	10cf4 <error@plt>
   11634:	b	11618 <__assert_fail@plt+0x7ec>
   11638:	ldr	r3, [pc, #44]	; 1166c <__assert_fail@plt+0x840>
   1163c:	ldr	r0, [r3]
   11640:	bl	138e8 <__assert_fail@plt+0x2abc>
   11644:	cmp	r0, #0
   11648:	bne	11618 <__assert_fail@plt+0x7ec>
   1164c:	add	sp, sp, #8
   11650:	pop	{r4, r5, r6, pc}
   11654:	andeq	r5, r2, ip, lsr r1
   11658:	andeq	r5, r2, r8, asr #2
   1165c:	andeq	r4, r1, fp, asr #5
   11660:	ldrdeq	r4, [r1], -r7
   11664:	andeq	r5, r2, r0, ror #1
   11668:	ldrdeq	r4, [r1], -fp
   1166c:	andeq	r5, r2, r8, lsr r1
   11670:	push	{r4, r5, r6, lr}
   11674:	subs	r4, r0, #0
   11678:	bne	11690 <__assert_fail@plt+0x864>
   1167c:	ldr	r3, [pc, #124]	; 11700 <__assert_fail@plt+0x8d4>
   11680:	ldr	r0, [pc, #124]	; 11704 <__assert_fail@plt+0x8d8>
   11684:	ldr	r1, [r3]
   11688:	bl	10e08 <fputs@plt>
   1168c:	bl	10e20 <abort@plt>
   11690:	mov	r1, #47	; 0x2f
   11694:	bl	10de4 <strrchr@plt>
   11698:	subs	r6, r0, #0
   1169c:	beq	116ec <__assert_fail@plt+0x8c0>
   116a0:	add	r5, r6, #1
   116a4:	sub	r3, r5, r4
   116a8:	cmp	r3, #6
   116ac:	ble	116ec <__assert_fail@plt+0x8c0>
   116b0:	mov	r2, #7
   116b4:	ldr	r1, [pc, #76]	; 11708 <__assert_fail@plt+0x8dc>
   116b8:	sub	r0, r6, #6
   116bc:	bl	10e14 <strncmp@plt>
   116c0:	cmp	r0, #0
   116c4:	bne	116ec <__assert_fail@plt+0x8c0>
   116c8:	mov	r2, #3
   116cc:	ldr	r1, [pc, #56]	; 1170c <__assert_fail@plt+0x8e0>
   116d0:	mov	r0, r5
   116d4:	bl	10e14 <strncmp@plt>
   116d8:	cmp	r0, #0
   116dc:	ldreq	r3, [pc, #44]	; 11710 <__assert_fail@plt+0x8e4>
   116e0:	addeq	r4, r6, #4
   116e4:	movne	r4, r5
   116e8:	streq	r4, [r3]
   116ec:	ldr	r3, [pc, #32]	; 11714 <__assert_fail@plt+0x8e8>
   116f0:	str	r4, [r3]
   116f4:	ldr	r3, [pc, #28]	; 11718 <__assert_fail@plt+0x8ec>
   116f8:	str	r4, [r3]
   116fc:	pop	{r4, r5, r6, pc}
   11700:	andeq	r5, r2, r8, lsr r1
   11704:	ldrdeq	r4, [r1], -lr
   11708:	andeq	r4, r1, r6, lsl r3
   1170c:	andeq	r4, r1, lr, lsl r3
   11710:	andeq	r5, r2, r8, lsr #2
   11714:	andeq	r5, r2, r0, asr r1
   11718:	andeq	r5, r2, ip, lsr #2
   1171c:	push	{r4, lr}
   11720:	mov	r2, #48	; 0x30
   11724:	mov	r4, r1
   11728:	mov	r1, #0
   1172c:	bl	10d90 <memset@plt>
   11730:	cmp	r4, #10
   11734:	bne	1173c <__assert_fail@plt+0x910>
   11738:	bl	10e20 <abort@plt>
   1173c:	str	r4, [r0]
   11740:	pop	{r4, pc}
   11744:	push	{r4, r5, r6, lr}
   11748:	mov	r2, #5
   1174c:	mov	r6, r0
   11750:	mov	r5, r1
   11754:	mov	r1, r0
   11758:	mov	r0, #0
   1175c:	bl	10c7c <dcgettext@plt>
   11760:	cmp	r6, r0
   11764:	mov	r4, r0
   11768:	bne	117d8 <__assert_fail@plt+0x9ac>
   1176c:	bl	13b60 <__assert_fail@plt+0x2d34>
   11770:	ldrb	r3, [r0]
   11774:	bic	r3, r3, #32
   11778:	cmp	r3, #85	; 0x55
   1177c:	bne	117e0 <__assert_fail@plt+0x9b4>
   11780:	ldrb	r3, [r0, #1]
   11784:	bic	r3, r3, #32
   11788:	cmp	r3, #84	; 0x54
   1178c:	bne	11850 <__assert_fail@plt+0xa24>
   11790:	ldrb	r3, [r0, #2]
   11794:	bic	r3, r3, #32
   11798:	cmp	r3, #70	; 0x46
   1179c:	bne	11850 <__assert_fail@plt+0xa24>
   117a0:	ldrb	r3, [r0, #3]
   117a4:	cmp	r3, #45	; 0x2d
   117a8:	bne	11850 <__assert_fail@plt+0xa24>
   117ac:	ldrb	r3, [r0, #4]
   117b0:	cmp	r3, #56	; 0x38
   117b4:	bne	11850 <__assert_fail@plt+0xa24>
   117b8:	ldrb	r3, [r0, #5]
   117bc:	cmp	r3, #0
   117c0:	bne	11850 <__assert_fail@plt+0xa24>
   117c4:	ldrb	r2, [r4]
   117c8:	ldr	r3, [pc, #144]	; 11860 <__assert_fail@plt+0xa34>
   117cc:	ldr	r4, [pc, #144]	; 11864 <__assert_fail@plt+0xa38>
   117d0:	cmp	r2, #96	; 0x60
   117d4:	movne	r4, r3
   117d8:	mov	r0, r4
   117dc:	pop	{r4, r5, r6, pc}
   117e0:	cmp	r3, #71	; 0x47
   117e4:	bne	11850 <__assert_fail@plt+0xa24>
   117e8:	ldrb	r3, [r0, #1]
   117ec:	bic	r3, r3, #32
   117f0:	cmp	r3, #66	; 0x42
   117f4:	bne	11850 <__assert_fail@plt+0xa24>
   117f8:	ldrb	r3, [r0, #2]
   117fc:	cmp	r3, #49	; 0x31
   11800:	bne	11850 <__assert_fail@plt+0xa24>
   11804:	ldrb	r3, [r0, #3]
   11808:	cmp	r3, #56	; 0x38
   1180c:	bne	11850 <__assert_fail@plt+0xa24>
   11810:	ldrb	r3, [r0, #4]
   11814:	cmp	r3, #48	; 0x30
   11818:	bne	11850 <__assert_fail@plt+0xa24>
   1181c:	ldrb	r3, [r0, #5]
   11820:	cmp	r3, #51	; 0x33
   11824:	bne	11850 <__assert_fail@plt+0xa24>
   11828:	ldrb	r3, [r0, #6]
   1182c:	cmp	r3, #48	; 0x30
   11830:	bne	11850 <__assert_fail@plt+0xa24>
   11834:	ldrb	r3, [r0, #7]
   11838:	cmp	r3, #0
   1183c:	bne	11850 <__assert_fail@plt+0xa24>
   11840:	ldrb	r2, [r4]
   11844:	ldr	r3, [pc, #28]	; 11868 <__assert_fail@plt+0xa3c>
   11848:	ldr	r4, [pc, #28]	; 1186c <__assert_fail@plt+0xa40>
   1184c:	b	117d0 <__assert_fail@plt+0x9a4>
   11850:	ldr	r4, [pc, #24]	; 11870 <__assert_fail@plt+0xa44>
   11854:	cmp	r5, #9
   11858:	ldr	r3, [pc, #20]	; 11874 <__assert_fail@plt+0xa48>
   1185c:	b	117d4 <__assert_fail@plt+0x9a8>
   11860:	andeq	r4, r1, sl, ror r3
   11864:	andeq	r4, r1, r5, lsl #7
   11868:	andeq	r4, r1, lr, ror r3
   1186c:	andeq	r4, r1, r1, lsl #7
   11870:	andeq	r4, r1, r8, ror r3
   11874:	andeq	r4, r1, r9, lsl #7
   11878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1187c:	sub	sp, sp, #108	; 0x6c
   11880:	mov	r8, r0
   11884:	mov	r5, r1
   11888:	mov	r6, #0
   1188c:	str	r3, [sp, #40]	; 0x28
   11890:	str	r2, [sp, #48]	; 0x30
   11894:	ldr	sl, [sp, #144]	; 0x90
   11898:	bl	10cc4 <__ctype_get_mb_cur_max@plt>
   1189c:	ldr	r3, [sp, #148]	; 0x94
   118a0:	str	r6, [sp, #24]
   118a4:	str	r6, [sp, #32]
   118a8:	str	r6, [sp, #44]	; 0x2c
   118ac:	str	r6, [sp, #52]	; 0x34
   118b0:	ubfx	r7, r3, #1, #1
   118b4:	mov	r3, #1
   118b8:	str	r6, [sp, #60]	; 0x3c
   118bc:	str	r3, [sp, #72]	; 0x48
   118c0:	str	r0, [sp, #76]	; 0x4c
   118c4:	cmp	sl, #10
   118c8:	ldrls	pc, [pc, sl, lsl #2]
   118cc:	b	11b10 <__assert_fail@plt+0xce4>
   118d0:	strdeq	r1, [r1], -ip
   118d4:	andeq	r1, r1, r8, lsr #22
   118d8:	andeq	r1, r1, ip, lsr #21
   118dc:	andeq	r1, r1, r4, asr #21
   118e0:	muleq	r1, r4, sl
   118e4:	andeq	r1, r1, ip, ror #19
   118e8:	andeq	r1, r1, ip, asr #19
   118ec:	andeq	r1, r1, r4, lsl fp
   118f0:	andeq	r1, r1, ip, lsl sl
   118f4:	andeq	r1, r1, ip, lsl sl
   118f8:	andeq	r1, r1, ip, lsl sl
   118fc:	mov	r4, sl
   11900:	mov	r7, #0
   11904:	mov	r9, r5
   11908:	mov	r3, #0
   1190c:	str	r6, [sp, #68]	; 0x44
   11910:	str	r3, [sp, #28]
   11914:	ldr	r3, [sp, #40]	; 0x28
   11918:	cmn	r3, #1
   1191c:	bne	124bc <__assert_fail@plt+0x1690>
   11920:	ldr	r2, [sp, #28]
   11924:	ldr	r3, [sp, #48]	; 0x30
   11928:	ldrb	r3, [r3, r2]
   1192c:	adds	r3, r3, #0
   11930:	movne	r3, #1
   11934:	str	r3, [sp, #36]	; 0x24
   11938:	ldr	r3, [sp, #36]	; 0x24
   1193c:	cmp	r3, #0
   11940:	bne	11b4c <__assert_fail@plt+0xd20>
   11944:	sub	r3, sl, #2
   11948:	cmp	r4, #0
   1194c:	clz	r3, r3
   11950:	movne	r2, #0
   11954:	lsr	r3, r3, #5
   11958:	andeq	r2, r3, r7
   1195c:	cmp	r2, #0
   11960:	bne	11d10 <__assert_fail@plt+0xee4>
   11964:	eor	r7, r7, #1
   11968:	ands	r3, r3, r7
   1196c:	beq	12534 <__assert_fail@plt+0x1708>
   11970:	ldr	r2, [sp, #68]	; 0x44
   11974:	cmp	r2, #0
   11978:	beq	124fc <__assert_fail@plt+0x16d0>
   1197c:	ldr	r3, [sp, #72]	; 0x48
   11980:	cmp	r3, #0
   11984:	beq	124d0 <__assert_fail@plt+0x16a4>
   11988:	ldr	r2, [sp, #48]	; 0x30
   1198c:	ldr	r3, [sp, #160]	; 0xa0
   11990:	ldr	r1, [sp, #60]	; 0x3c
   11994:	str	r3, [sp, #16]
   11998:	ldr	r3, [sp, #156]	; 0x9c
   1199c:	str	r3, [sp, #12]
   119a0:	ldr	r3, [sp, #152]	; 0x98
   119a4:	str	r3, [sp, #8]
   119a8:	ldr	r3, [sp, #148]	; 0x94
   119ac:	str	r3, [sp, #4]
   119b0:	mov	r3, #5
   119b4:	str	r3, [sp]
   119b8:	ldr	r3, [sp, #40]	; 0x28
   119bc:	mov	r0, r8
   119c0:	bl	11878 <__assert_fail@plt+0xa4c>
   119c4:	mov	r4, r0
   119c8:	b	12528 <__assert_fail@plt+0x16fc>
   119cc:	ldr	r3, [pc, #2948]	; 12558 <__assert_fail@plt+0x172c>
   119d0:	mov	r7, #1
   119d4:	mov	r4, #0
   119d8:	mov	sl, #5
   119dc:	str	r7, [sp, #24]
   119e0:	str	r7, [sp, #32]
   119e4:	str	r3, [sp, #44]	; 0x2c
   119e8:	b	11904 <__assert_fail@plt+0xad8>
   119ec:	cmp	r7, #0
   119f0:	bne	11b34 <__assert_fail@plt+0xd08>
   119f4:	cmp	r5, #0
   119f8:	mov	r4, #1
   119fc:	movne	r3, #34	; 0x22
   11a00:	strbne	r3, [r8]
   11a04:	mov	r3, #1
   11a08:	str	r3, [sp, #24]
   11a0c:	str	r3, [sp, #32]
   11a10:	ldr	r3, [pc, #2880]	; 12558 <__assert_fail@plt+0x172c>
   11a14:	str	r3, [sp, #44]	; 0x2c
   11a18:	b	11904 <__assert_fail@plt+0xad8>
   11a1c:	cmp	sl, #10
   11a20:	beq	11a44 <__assert_fail@plt+0xc18>
   11a24:	mov	r1, sl
   11a28:	ldr	r0, [pc, #2860]	; 1255c <__assert_fail@plt+0x1730>
   11a2c:	bl	11744 <__assert_fail@plt+0x918>
   11a30:	mov	r1, sl
   11a34:	str	r0, [sp, #156]	; 0x9c
   11a38:	ldr	r0, [pc, #2848]	; 12560 <__assert_fail@plt+0x1734>
   11a3c:	bl	11744 <__assert_fail@plt+0x918>
   11a40:	str	r0, [sp, #160]	; 0xa0
   11a44:	cmp	r7, #0
   11a48:	moveq	r4, r7
   11a4c:	beq	11a64 <__assert_fail@plt+0xc38>
   11a50:	mov	r4, #0
   11a54:	b	11a74 <__assert_fail@plt+0xc48>
   11a58:	cmp	r5, r4
   11a5c:	strbhi	r3, [r8, r4]
   11a60:	add	r4, r4, #1
   11a64:	ldr	r3, [sp, #156]	; 0x9c
   11a68:	ldrb	r3, [r3, r4]
   11a6c:	cmp	r3, #0
   11a70:	bne	11a58 <__assert_fail@plt+0xc2c>
   11a74:	ldr	r0, [sp, #160]	; 0xa0
   11a78:	bl	10d60 <strlen@plt>
   11a7c:	ldr	r3, [sp, #160]	; 0xa0
   11a80:	str	r0, [sp, #32]
   11a84:	str	r3, [sp, #44]	; 0x2c
   11a88:	mov	r3, #1
   11a8c:	str	r3, [sp, #24]
   11a90:	b	11904 <__assert_fail@plt+0xad8>
   11a94:	mov	r3, #1
   11a98:	cmp	r7, #0
   11a9c:	streq	r3, [sp, #24]
   11aa0:	beq	11ae4 <__assert_fail@plt+0xcb8>
   11aa4:	str	r3, [sp, #32]
   11aa8:	b	11ad0 <__assert_fail@plt+0xca4>
   11aac:	cmp	r7, #0
   11ab0:	beq	11ae4 <__assert_fail@plt+0xcb8>
   11ab4:	mov	r3, #1
   11ab8:	str	r3, [sp, #32]
   11abc:	ldr	r3, [pc, #2716]	; 12560 <__assert_fail@plt+0x1734>
   11ac0:	b	11b44 <__assert_fail@plt+0xd18>
   11ac4:	mov	r7, #1
   11ac8:	str	r7, [sp, #24]
   11acc:	str	r7, [sp, #32]
   11ad0:	ldr	r3, [pc, #2696]	; 12560 <__assert_fail@plt+0x1734>
   11ad4:	mov	r4, #0
   11ad8:	str	r3, [sp, #44]	; 0x2c
   11adc:	mov	sl, #2
   11ae0:	b	11904 <__assert_fail@plt+0xad8>
   11ae4:	cmp	r5, #0
   11ae8:	movne	r3, #39	; 0x27
   11aec:	movne	r7, #0
   11af0:	strbne	r3, [r8]
   11af4:	moveq	r7, r5
   11af8:	mov	r3, #1
   11afc:	mov	r4, #1
   11b00:	str	r3, [sp, #32]
   11b04:	ldr	r3, [pc, #2644]	; 12560 <__assert_fail@plt+0x1734>
   11b08:	str	r3, [sp, #44]	; 0x2c
   11b0c:	b	11adc <__assert_fail@plt+0xcb0>
   11b10:	bl	10e20 <abort@plt>
   11b14:	mov	r3, #1
   11b18:	mov	r7, #0
   11b1c:	str	r3, [sp, #24]
   11b20:	mov	r4, #0
   11b24:	b	11904 <__assert_fail@plt+0xad8>
   11b28:	mov	r7, #1
   11b2c:	str	sl, [sp, #32]
   11b30:	b	11ad0 <__assert_fail@plt+0xca4>
   11b34:	mov	r3, #1
   11b38:	str	r7, [sp, #24]
   11b3c:	str	r3, [sp, #32]
   11b40:	ldr	r3, [pc, #2576]	; 12558 <__assert_fail@plt+0x172c>
   11b44:	str	r3, [sp, #44]	; 0x2c
   11b48:	b	11b20 <__assert_fail@plt+0xcf4>
   11b4c:	ldr	fp, [sp, #24]
   11b50:	ldr	r3, [sp, #32]
   11b54:	cmp	sl, #2
   11b58:	moveq	fp, #0
   11b5c:	andne	fp, fp, #1
   11b60:	adds	r5, r3, #0
   11b64:	movne	r5, #1
   11b68:	ands	r3, fp, r5
   11b6c:	str	r3, [sp, #64]	; 0x40
   11b70:	beq	11c40 <__assert_fail@plt+0xe14>
   11b74:	ldr	r3, [sp, #28]
   11b78:	ldr	r2, [sp, #32]
   11b7c:	cmp	r2, #1
   11b80:	add	r6, r3, r2
   11b84:	mov	r3, r2
   11b88:	ldr	r2, [sp, #40]	; 0x28
   11b8c:	movls	r3, #0
   11b90:	movhi	r3, #1
   11b94:	cmn	r2, #1
   11b98:	movne	r3, #0
   11b9c:	cmp	r3, #0
   11ba0:	beq	11bb0 <__assert_fail@plt+0xd84>
   11ba4:	ldr	r0, [sp, #48]	; 0x30
   11ba8:	bl	10d60 <strlen@plt>
   11bac:	str	r0, [sp, #40]	; 0x28
   11bb0:	ldr	r3, [sp, #40]	; 0x28
   11bb4:	cmp	r6, r3
   11bb8:	bhi	11c38 <__assert_fail@plt+0xe0c>
   11bbc:	ldr	r0, [sp, #28]
   11bc0:	ldr	r2, [sp, #32]
   11bc4:	ldr	r3, [sp, #48]	; 0x30
   11bc8:	ldr	r1, [sp, #44]	; 0x2c
   11bcc:	add	r0, r3, r0
   11bd0:	bl	10c64 <memcmp@plt>
   11bd4:	cmp	r0, #0
   11bd8:	bne	11c38 <__assert_fail@plt+0xe0c>
   11bdc:	cmp	r7, #0
   11be0:	beq	11c40 <__assert_fail@plt+0xe14>
   11be4:	str	r7, [sp, #24]
   11be8:	ldr	r3, [sp, #24]
   11bec:	mov	r1, r9
   11bf0:	ldr	r2, [sp, #48]	; 0x30
   11bf4:	cmp	sl, #2
   11bf8:	movne	r3, #0
   11bfc:	andeq	r3, r3, #1
   11c00:	cmp	r3, #0
   11c04:	ldr	r3, [sp, #160]	; 0xa0
   11c08:	movne	sl, #4
   11c0c:	str	sl, [sp]
   11c10:	str	r3, [sp, #16]
   11c14:	ldr	r3, [sp, #156]	; 0x9c
   11c18:	str	r3, [sp, #12]
   11c1c:	mov	r3, #0
   11c20:	str	r3, [sp, #8]
   11c24:	ldr	r3, [sp, #148]	; 0x94
   11c28:	bic	r3, r3, #2
   11c2c:	str	r3, [sp, #4]
   11c30:	ldr	r3, [sp, #40]	; 0x28
   11c34:	b	119bc <__assert_fail@plt+0xb90>
   11c38:	mov	r3, #0
   11c3c:	str	r3, [sp, #64]	; 0x40
   11c40:	ldr	r2, [sp, #28]
   11c44:	ldr	r3, [sp, #48]	; 0x30
   11c48:	add	r3, r3, r2
   11c4c:	str	r3, [sp, #80]	; 0x50
   11c50:	ldr	r3, [sp, #48]	; 0x30
   11c54:	ldrb	r6, [r3, r2]
   11c58:	cmp	r6, #58	; 0x3a
   11c5c:	bhi	11dc0 <__assert_fail@plt+0xf94>
   11c60:	cmp	r6, #43	; 0x2b
   11c64:	bcs	11f80 <__assert_fail@plt+0x1154>
   11c68:	cmp	r6, #32
   11c6c:	beq	11fd4 <__assert_fail@plt+0x11a8>
   11c70:	bhi	11d18 <__assert_fail@plt+0xeec>
   11c74:	cmp	r6, #9
   11c78:	beq	1217c <__assert_fail@plt+0x1350>
   11c7c:	bhi	11cdc <__assert_fail@plt+0xeb0>
   11c80:	cmp	r6, #7
   11c84:	beq	1218c <__assert_fail@plt+0x1360>
   11c88:	bhi	121a8 <__assert_fail@plt+0x137c>
   11c8c:	cmp	r6, #0
   11c90:	beq	11ff0 <__assert_fail@plt+0x11c4>
   11c94:	ldr	r3, [sp, #76]	; 0x4c
   11c98:	cmp	r3, #1
   11c9c:	bne	121f4 <__assert_fail@plt+0x13c8>
   11ca0:	bl	10d48 <__ctype_b_loc@plt>
   11ca4:	ldr	r2, [r0]
   11ca8:	sxth	r3, r6
   11cac:	lsl	r3, r3, #1
   11cb0:	ldrh	r5, [r2, r3]
   11cb4:	ldr	r3, [sp, #76]	; 0x4c
   11cb8:	ubfx	r5, r5, #14, #1
   11cbc:	str	r3, [sp, #56]	; 0x38
   11cc0:	ldr	r3, [sp, #24]
   11cc4:	eor	fp, r5, #1
   11cc8:	and	fp, fp, r3
   11ccc:	ands	fp, fp, #255	; 0xff
   11cd0:	beq	11eb0 <__assert_fail@plt+0x1084>
   11cd4:	mov	r5, #0
   11cd8:	b	122a0 <__assert_fail@plt+0x1474>
   11cdc:	cmp	r6, #11
   11ce0:	beq	121b0 <__assert_fail@plt+0x1384>
   11ce4:	bcc	12184 <__assert_fail@plt+0x1358>
   11ce8:	cmp	r6, #12
   11cec:	beq	121b8 <__assert_fail@plt+0x138c>
   11cf0:	cmp	r6, #13
   11cf4:	moveq	r3, #114	; 0x72
   11cf8:	bne	11c94 <__assert_fail@plt+0xe68>
   11cfc:	cmp	sl, #2
   11d00:	movne	r2, #0
   11d04:	andeq	r2, r7, #1
   11d08:	cmp	r2, #0
   11d0c:	beq	12190 <__assert_fail@plt+0x1364>
   11d10:	mov	sl, #2
   11d14:	b	11be8 <__assert_fail@plt+0xdbc>
   11d18:	cmp	r6, #37	; 0x25
   11d1c:	beq	11f80 <__assert_fail@plt+0x1154>
   11d20:	bhi	11d34 <__assert_fail@plt+0xf08>
   11d24:	cmp	r6, #35	; 0x23
   11d28:	beq	11fc8 <__assert_fail@plt+0x119c>
   11d2c:	mov	r5, #0
   11d30:	b	11fd8 <__assert_fail@plt+0x11ac>
   11d34:	cmp	r6, #39	; 0x27
   11d38:	bne	11d2c <__assert_fail@plt+0xf00>
   11d3c:	cmp	sl, #2
   11d40:	ldrne	r5, [sp, #36]	; 0x24
   11d44:	movne	r3, r5
   11d48:	strne	r3, [sp, #68]	; 0x44
   11d4c:	bne	120cc <__assert_fail@plt+0x12a0>
   11d50:	cmp	r7, #0
   11d54:	bne	11be8 <__assert_fail@plt+0xdbc>
   11d58:	ldr	r3, [sp, #60]	; 0x3c
   11d5c:	cmp	r9, #0
   11d60:	clz	r3, r3
   11d64:	lsr	r3, r3, #5
   11d68:	moveq	r3, #0
   11d6c:	cmp	r3, #0
   11d70:	strne	r9, [sp, #60]	; 0x3c
   11d74:	movne	r9, #0
   11d78:	bne	11d88 <__assert_fail@plt+0xf5c>
   11d7c:	cmp	r9, r4
   11d80:	movhi	r3, #39	; 0x27
   11d84:	strbhi	r3, [r8, r4]
   11d88:	add	r3, r4, #1
   11d8c:	ldr	r5, [sp, #36]	; 0x24
   11d90:	mov	fp, #0
   11d94:	cmp	r3, r9
   11d98:	movcc	r2, #92	; 0x5c
   11d9c:	str	fp, [sp, #52]	; 0x34
   11da0:	strbcc	r2, [r8, r3]
   11da4:	add	r3, r4, #2
   11da8:	add	r4, r4, #3
   11dac:	cmp	r3, r9
   11db0:	str	r5, [sp, #68]	; 0x44
   11db4:	movcc	r2, #39	; 0x27
   11db8:	strbcc	r2, [r8, r3]
   11dbc:	b	11eb0 <__assert_fail@plt+0x1084>
   11dc0:	cmp	r6, #94	; 0x5e
   11dc4:	beq	11d2c <__assert_fail@plt+0xf00>
   11dc8:	bhi	11f88 <__assert_fail@plt+0x115c>
   11dcc:	cmp	r6, #90	; 0x5a
   11dd0:	bhi	11f74 <__assert_fail@plt+0x1148>
   11dd4:	cmp	r6, #65	; 0x41
   11dd8:	bcs	11f80 <__assert_fail@plt+0x1154>
   11ddc:	cmp	r6, #62	; 0x3e
   11de0:	bls	11d2c <__assert_fail@plt+0xf00>
   11de4:	cmp	r6, #63	; 0x3f
   11de8:	bne	11c94 <__assert_fail@plt+0xe68>
   11dec:	cmp	sl, #2
   11df0:	beq	120d4 <__assert_fail@plt+0x12a8>
   11df4:	cmp	sl, #5
   11df8:	movne	fp, #0
   11dfc:	bne	124a4 <__assert_fail@plt+0x1678>
   11e00:	ldr	r3, [sp, #148]	; 0x94
   11e04:	tst	r3, #4
   11e08:	beq	120dc <__assert_fail@plt+0x12b0>
   11e0c:	ldr	r3, [sp, #28]
   11e10:	add	r2, r3, #2
   11e14:	ldr	r3, [sp, #40]	; 0x28
   11e18:	cmp	r2, r3
   11e1c:	bcs	120dc <__assert_fail@plt+0x12b0>
   11e20:	ldr	r1, [sp, #28]
   11e24:	ldr	r3, [sp, #48]	; 0x30
   11e28:	add	r3, r3, r1
   11e2c:	ldrb	r1, [r3, #1]
   11e30:	cmp	r1, #63	; 0x3f
   11e34:	bne	120dc <__assert_fail@plt+0x12b0>
   11e38:	ldr	r3, [sp, #48]	; 0x30
   11e3c:	ldrb	r6, [r3, r2]
   11e40:	sub	r3, r6, #33	; 0x21
   11e44:	uxtb	r3, r3
   11e48:	cmp	r3, #29
   11e4c:	bhi	124ac <__assert_fail@plt+0x1680>
   11e50:	ldr	r0, [pc, #1804]	; 12564 <__assert_fail@plt+0x1738>
   11e54:	mov	r5, #1
   11e58:	ands	r5, r0, r5, lsl r3
   11e5c:	beq	124b4 <__assert_fail@plt+0x1688>
   11e60:	cmp	r7, #0
   11e64:	bne	11be8 <__assert_fail@plt+0xdbc>
   11e68:	cmp	r9, r4
   11e6c:	add	r3, r4, #1
   11e70:	str	r2, [sp, #28]
   11e74:	mov	r5, #0
   11e78:	strbhi	r1, [r8, r4]
   11e7c:	cmp	r9, r3
   11e80:	mov	fp, r5
   11e84:	movhi	r1, #34	; 0x22
   11e88:	strbhi	r1, [r8, r3]
   11e8c:	add	r3, r4, #2
   11e90:	cmp	r9, r3
   11e94:	movhi	r1, #34	; 0x22
   11e98:	strbhi	r1, [r8, r3]
   11e9c:	add	r3, r4, #3
   11ea0:	add	r4, r4, #4
   11ea4:	cmp	r9, r3
   11ea8:	movhi	r1, #63	; 0x3f
   11eac:	strbhi	r1, [r8, r3]
   11eb0:	ldr	r3, [sp, #24]
   11eb4:	eor	r3, r3, #1
   11eb8:	cmp	sl, #2
   11ebc:	orreq	r3, r3, #1
   11ec0:	eor	r3, r3, #1
   11ec4:	orr	r3, r7, r3
   11ec8:	tst	r3, #255	; 0xff
   11ecc:	beq	11ef8 <__assert_fail@plt+0x10cc>
   11ed0:	ldr	r3, [sp, #152]	; 0x98
   11ed4:	cmp	r3, #0
   11ed8:	beq	11ef8 <__assert_fail@plt+0x10cc>
   11edc:	ldr	r1, [sp, #152]	; 0x98
   11ee0:	ubfx	r2, r6, #5, #8
   11ee4:	and	r3, r6, #31
   11ee8:	ldr	r2, [r1, r2, lsl #2]
   11eec:	lsr	r3, r2, r3
   11ef0:	tst	r3, #1
   11ef4:	bne	11f04 <__assert_fail@plt+0x10d8>
   11ef8:	ldr	r3, [sp, #64]	; 0x40
   11efc:	cmp	r3, #0
   11f00:	beq	120fc <__assert_fail@plt+0x12d0>
   11f04:	sub	r3, sl, #2
   11f08:	cmp	r7, #0
   11f0c:	clz	r3, r3
   11f10:	lsr	r3, r3, #5
   11f14:	bne	11be8 <__assert_fail@plt+0xdbc>
   11f18:	ldr	r2, [sp, #52]	; 0x34
   11f1c:	eor	r2, r2, #1
   11f20:	ands	r3, r3, r2
   11f24:	beq	11f5c <__assert_fail@plt+0x1130>
   11f28:	cmp	r9, r4
   11f2c:	str	r3, [sp, #52]	; 0x34
   11f30:	movhi	r2, #39	; 0x27
   11f34:	strbhi	r2, [r8, r4]
   11f38:	add	r2, r4, #1
   11f3c:	cmp	r9, r2
   11f40:	movhi	r1, #36	; 0x24
   11f44:	strbhi	r1, [r8, r2]
   11f48:	add	r2, r4, #2
   11f4c:	add	r4, r4, #3
   11f50:	cmp	r9, r2
   11f54:	movhi	r1, #39	; 0x27
   11f58:	strbhi	r1, [r8, r2]
   11f5c:	cmp	r9, r4
   11f60:	ldr	fp, [sp, #36]	; 0x24
   11f64:	movhi	r3, #92	; 0x5c
   11f68:	strbhi	r3, [r8, r4]
   11f6c:	add	r4, r4, #1
   11f70:	b	120fc <__assert_fail@plt+0x12d0>
   11f74:	cmp	r6, #92	; 0x5c
   11f78:	beq	120e4 <__assert_fail@plt+0x12b8>
   11f7c:	bls	11d2c <__assert_fail@plt+0xf00>
   11f80:	ldr	r5, [sp, #36]	; 0x24
   11f84:	b	120cc <__assert_fail@plt+0x12a0>
   11f88:	cmp	r6, #122	; 0x7a
   11f8c:	bhi	11fac <__assert_fail@plt+0x1180>
   11f90:	cmp	r6, #97	; 0x61
   11f94:	bcs	11f80 <__assert_fail@plt+0x1154>
   11f98:	cmp	r6, #95	; 0x5f
   11f9c:	beq	11f80 <__assert_fail@plt+0x1154>
   11fa0:	cmp	r6, #96	; 0x60
   11fa4:	bne	11c94 <__assert_fail@plt+0xe68>
   11fa8:	b	11d2c <__assert_fail@plt+0xf00>
   11fac:	cmp	r6, #124	; 0x7c
   11fb0:	beq	11d2c <__assert_fail@plt+0xf00>
   11fb4:	bcc	121c0 <__assert_fail@plt+0x1394>
   11fb8:	cmp	r6, #125	; 0x7d
   11fbc:	beq	121c0 <__assert_fail@plt+0x1394>
   11fc0:	cmp	r6, #126	; 0x7e
   11fc4:	bne	11c94 <__assert_fail@plt+0xe68>
   11fc8:	ldr	r3, [sp, #28]
   11fcc:	cmp	r3, #0
   11fd0:	bne	120dc <__assert_fail@plt+0x12b0>
   11fd4:	ldr	r5, [sp, #36]	; 0x24
   11fd8:	cmp	sl, #2
   11fdc:	movne	fp, #0
   11fe0:	andeq	fp, r7, #1
   11fe4:	cmp	fp, #0
   11fe8:	beq	11eb0 <__assert_fail@plt+0x1084>
   11fec:	b	11d10 <__assert_fail@plt+0xee4>
   11ff0:	ldr	r3, [sp, #24]
   11ff4:	cmp	r3, #0
   11ff8:	beq	120c0 <__assert_fail@plt+0x1294>
   11ffc:	sub	r2, sl, #2
   12000:	cmp	r7, #0
   12004:	clz	r2, r2
   12008:	lsr	r2, r2, #5
   1200c:	bne	11be4 <__assert_fail@plt+0xdb8>
   12010:	ldr	r3, [sp, #52]	; 0x34
   12014:	eor	r3, r3, #1
   12018:	ands	r2, r2, r3
   1201c:	moveq	r3, r4
   12020:	beq	12058 <__assert_fail@plt+0x122c>
   12024:	cmp	r9, r4
   12028:	str	r2, [sp, #52]	; 0x34
   1202c:	movhi	r3, #39	; 0x27
   12030:	strbhi	r3, [r8, r4]
   12034:	add	r3, r4, #1
   12038:	cmp	r9, r3
   1203c:	movhi	r1, #36	; 0x24
   12040:	strbhi	r1, [r8, r3]
   12044:	add	r3, r4, #2
   12048:	cmp	r9, r3
   1204c:	movhi	r1, #39	; 0x27
   12050:	strbhi	r1, [r8, r3]
   12054:	add	r3, r4, #3
   12058:	cmp	r9, r3
   1205c:	add	r4, r3, #1
   12060:	movhi	r2, #92	; 0x5c
   12064:	strbhi	r2, [r8, r3]
   12068:	cmp	fp, #0
   1206c:	beq	12494 <__assert_fail@plt+0x1668>
   12070:	ldr	r2, [sp, #28]
   12074:	ldr	r1, [sp, #40]	; 0x28
   12078:	add	r2, r2, #1
   1207c:	cmp	r2, r1
   12080:	bcs	120b8 <__assert_fail@plt+0x128c>
   12084:	ldr	r1, [sp, #48]	; 0x30
   12088:	mov	r6, #48	; 0x30
   1208c:	ldrb	r2, [r1, r2]
   12090:	sub	r2, r2, #48	; 0x30
   12094:	cmp	r2, #9
   12098:	bhi	124a4 <__assert_fail@plt+0x1678>
   1209c:	cmp	r9, r4
   120a0:	add	r2, r3, #2
   120a4:	strbhi	r6, [r8, r4]
   120a8:	cmp	r9, r2
   120ac:	add	r4, r3, #3
   120b0:	movhi	r1, #48	; 0x30
   120b4:	strbhi	r1, [r8, r2]
   120b8:	mov	r5, #0
   120bc:	b	1249c <__assert_fail@plt+0x1670>
   120c0:	ldr	r3, [sp, #148]	; 0x94
   120c4:	ands	r5, r3, #1
   120c8:	bne	12150 <__assert_fail@plt+0x1324>
   120cc:	mov	fp, #0
   120d0:	b	11eb0 <__assert_fail@plt+0x1084>
   120d4:	cmp	r7, #0
   120d8:	bne	11be8 <__assert_fail@plt+0xdbc>
   120dc:	mov	r5, #0
   120e0:	b	120cc <__assert_fail@plt+0x12a0>
   120e4:	cmp	sl, #2
   120e8:	bne	1215c <__assert_fail@plt+0x1330>
   120ec:	cmp	r7, #0
   120f0:	bne	11be8 <__assert_fail@plt+0xdbc>
   120f4:	mov	r5, r7
   120f8:	mov	fp, r7
   120fc:	ldr	r3, [sp, #52]	; 0x34
   12100:	eor	fp, fp, #1
   12104:	tst	r3, fp
   12108:	beq	12134 <__assert_fail@plt+0x1308>
   1210c:	cmp	r9, r4
   12110:	movhi	r3, #39	; 0x27
   12114:	strbhi	r3, [r8, r4]
   12118:	add	r3, r4, #1
   1211c:	add	r4, r4, #2
   12120:	cmp	r9, r3
   12124:	movhi	r2, #39	; 0x27
   12128:	strbhi	r2, [r8, r3]
   1212c:	mov	r3, #0
   12130:	str	r3, [sp, #52]	; 0x34
   12134:	cmp	r9, r4
   12138:	ldr	r3, [sp, #72]	; 0x48
   1213c:	strbhi	r6, [r8, r4]
   12140:	cmp	r5, #0
   12144:	add	r4, r4, #1
   12148:	moveq	r3, #0
   1214c:	str	r3, [sp, #72]	; 0x48
   12150:	ldr	r3, [sp, #28]
   12154:	add	r3, r3, #1
   12158:	b	11910 <__assert_fail@plt+0xae4>
   1215c:	ldr	r3, [sp, #24]
   12160:	and	r3, r3, r7
   12164:	tst	r5, r3
   12168:	moveq	r3, r6
   1216c:	beq	11cfc <__assert_fail@plt+0xed0>
   12170:	mov	fp, #0
   12174:	mov	r5, fp
   12178:	b	120fc <__assert_fail@plt+0x12d0>
   1217c:	mov	r3, #116	; 0x74
   12180:	b	11cfc <__assert_fail@plt+0xed0>
   12184:	mov	r3, #110	; 0x6e
   12188:	b	11cfc <__assert_fail@plt+0xed0>
   1218c:	mov	r3, #97	; 0x61
   12190:	ldr	r2, [sp, #24]
   12194:	cmp	r2, #0
   12198:	beq	120dc <__assert_fail@plt+0x12b0>
   1219c:	mov	r6, r3
   121a0:	mov	r5, #0
   121a4:	b	11f04 <__assert_fail@plt+0x10d8>
   121a8:	mov	r3, #98	; 0x62
   121ac:	b	12190 <__assert_fail@plt+0x1364>
   121b0:	mov	r3, #118	; 0x76
   121b4:	b	12190 <__assert_fail@plt+0x1364>
   121b8:	mov	r3, #102	; 0x66
   121bc:	b	12190 <__assert_fail@plt+0x1364>
   121c0:	ldr	r3, [sp, #40]	; 0x28
   121c4:	cmn	r3, #1
   121c8:	bne	121e8 <__assert_fail@plt+0x13bc>
   121cc:	ldr	r3, [sp, #48]	; 0x30
   121d0:	ldrb	r3, [r3, #1]
   121d4:	adds	r3, r3, #0
   121d8:	movne	r3, #1
   121dc:	cmp	r3, #0
   121e0:	bne	120dc <__assert_fail@plt+0x12b0>
   121e4:	b	11fc8 <__assert_fail@plt+0x119c>
   121e8:	ldr	r3, [sp, #40]	; 0x28
   121ec:	subs	r3, r3, #1
   121f0:	b	121d8 <__assert_fail@plt+0x13ac>
   121f4:	mov	r3, #0
   121f8:	mov	r2, #0
   121fc:	strd	r2, [sp, #96]	; 0x60
   12200:	ldr	r3, [sp, #40]	; 0x28
   12204:	cmn	r3, #1
   12208:	bne	12218 <__assert_fail@plt+0x13ec>
   1220c:	ldr	r0, [sp, #48]	; 0x30
   12210:	bl	10d60 <strlen@plt>
   12214:	str	r0, [sp, #40]	; 0x28
   12218:	ldr	r5, [sp, #36]	; 0x24
   1221c:	mov	r3, #0
   12220:	str	r3, [sp, #56]	; 0x38
   12224:	ldr	r3, [sp, #28]
   12228:	add	r0, sp, #92	; 0x5c
   1222c:	ldr	r1, [sp, #40]	; 0x28
   12230:	ldr	r2, [sp, #56]	; 0x38
   12234:	add	r2, r3, r2
   12238:	ldr	r3, [sp, #48]	; 0x30
   1223c:	add	fp, r3, r2
   12240:	sub	r2, r1, r2
   12244:	add	r3, sp, #96	; 0x60
   12248:	mov	r1, fp
   1224c:	bl	13b94 <__assert_fail@plt+0x2d68>
   12250:	subs	r2, r0, #0
   12254:	beq	12294 <__assert_fail@plt+0x1468>
   12258:	cmn	r2, #1
   1225c:	beq	12468 <__assert_fail@plt+0x163c>
   12260:	cmn	r2, #2
   12264:	bne	123d8 <__assert_fail@plt+0x15ac>
   12268:	ldr	r3, [sp, #28]
   1226c:	ldr	r2, [sp, #56]	; 0x38
   12270:	add	r3, r3, r2
   12274:	ldr	r2, [sp, #40]	; 0x28
   12278:	cmp	r2, r3
   1227c:	bls	12468 <__assert_fail@plt+0x163c>
   12280:	ldr	r2, [sp, #56]	; 0x38
   12284:	ldr	r3, [sp, #80]	; 0x50
   12288:	ldrb	r5, [r3, r2]
   1228c:	cmp	r5, #0
   12290:	bne	123c8 <__assert_fail@plt+0x159c>
   12294:	ldr	r3, [sp, #56]	; 0x38
   12298:	cmp	r3, #1
   1229c:	bls	11cc0 <__assert_fail@plt+0xe94>
   122a0:	ldr	r3, [sp, #28]
   122a4:	mov	fp, #0
   122a8:	mov	ip, #92	; 0x5c
   122ac:	ldr	r2, [sp, #56]	; 0x38
   122b0:	add	r3, r3, r2
   122b4:	ldr	r2, [sp, #24]
   122b8:	str	r3, [sp, #36]	; 0x24
   122bc:	eor	r3, r5, #1
   122c0:	and	r3, r3, r2
   122c4:	mov	r2, #39	; 0x27
   122c8:	uxtb	r3, r3
   122cc:	cmp	r3, #0
   122d0:	beq	12470 <__assert_fail@plt+0x1644>
   122d4:	sub	r0, sl, #2
   122d8:	cmp	r7, #0
   122dc:	clz	r0, r0
   122e0:	lsr	r0, r0, #5
   122e4:	bne	11be4 <__assert_fail@plt+0xdb8>
   122e8:	ldr	r1, [sp, #52]	; 0x34
   122ec:	eor	r1, r1, #1
   122f0:	ands	r1, r0, r1
   122f4:	beq	12324 <__assert_fail@plt+0x14f8>
   122f8:	cmp	r9, r4
   122fc:	add	r0, r4, #1
   12300:	str	r1, [sp, #52]	; 0x34
   12304:	strbhi	r2, [r8, r4]
   12308:	cmp	r9, r0
   1230c:	movhi	lr, #36	; 0x24
   12310:	strbhi	lr, [r8, r0]
   12314:	add	r0, r4, #2
   12318:	add	r4, r4, #3
   1231c:	cmp	r9, r0
   12320:	strbhi	r2, [r8, r0]
   12324:	cmp	r9, r4
   12328:	add	r0, r4, #1
   1232c:	mov	fp, r3
   12330:	strbhi	ip, [r8, r4]
   12334:	cmp	r9, r0
   12338:	lsrhi	r1, r6, #6
   1233c:	addhi	r1, r1, #48	; 0x30
   12340:	strbhi	r1, [r8, r0]
   12344:	add	r0, r4, #2
   12348:	add	r4, r4, #3
   1234c:	cmp	r9, r0
   12350:	ubfxhi	r1, r6, #3, #3
   12354:	and	r6, r6, #7
   12358:	add	r6, r6, #48	; 0x30
   1235c:	addhi	r1, r1, #48	; 0x30
   12360:	strbhi	r1, [r8, r0]
   12364:	eor	r0, fp, #1
   12368:	ldr	r1, [sp, #28]
   1236c:	ldr	lr, [sp, #52]	; 0x34
   12370:	add	r1, r1, #1
   12374:	and	r0, r0, lr
   12378:	ldr	lr, [sp, #36]	; 0x24
   1237c:	cmp	r1, lr
   12380:	bcs	120fc <__assert_fail@plt+0x12d0>
   12384:	cmp	r0, #0
   12388:	beq	123ac <__assert_fail@plt+0x1580>
   1238c:	cmp	r9, r4
   12390:	add	r0, r4, #1
   12394:	strbhi	r2, [r8, r4]
   12398:	cmp	r9, r0
   1239c:	add	r4, r4, #2
   123a0:	strbhi	r2, [r8, r0]
   123a4:	mov	r0, #0
   123a8:	str	r0, [sp, #52]	; 0x34
   123ac:	ldr	r0, [sp, #48]	; 0x30
   123b0:	cmp	r9, r4
   123b4:	str	r1, [sp, #28]
   123b8:	strbhi	r6, [r8, r4]
   123bc:	add	r4, r4, #1
   123c0:	ldrb	r6, [r0, r1]
   123c4:	b	122cc <__assert_fail@plt+0x14a0>
   123c8:	ldr	r3, [sp, #56]	; 0x38
   123cc:	add	r3, r3, #1
   123d0:	str	r3, [sp, #56]	; 0x38
   123d4:	b	12268 <__assert_fail@plt+0x143c>
   123d8:	cmp	sl, #2
   123dc:	movne	r3, #0
   123e0:	andeq	r3, r7, #1
   123e4:	cmp	r3, #0
   123e8:	movne	r1, #1
   123ec:	bne	12448 <__assert_fail@plt+0x161c>
   123f0:	ldr	r0, [sp, #92]	; 0x5c
   123f4:	str	r2, [sp, #84]	; 0x54
   123f8:	bl	10cac <iswprint@plt>
   123fc:	ldr	r3, [sp, #56]	; 0x38
   12400:	cmp	r0, #0
   12404:	add	r0, sp, #96	; 0x60
   12408:	moveq	r5, #0
   1240c:	ldr	r2, [sp, #84]	; 0x54
   12410:	add	r3, r3, r2
   12414:	str	r3, [sp, #56]	; 0x38
   12418:	bl	10c58 <mbsinit@plt>
   1241c:	cmp	r0, #0
   12420:	beq	12224 <__assert_fail@plt+0x13f8>
   12424:	b	12294 <__assert_fail@plt+0x1468>
   12428:	ldrb	r3, [fp, #1]!
   1242c:	cmp	r3, #94	; 0x5e
   12430:	beq	11d10 <__assert_fail@plt+0xee4>
   12434:	bhi	12454 <__assert_fail@plt+0x1628>
   12438:	sub	r3, r3, #91	; 0x5b
   1243c:	cmp	r3, #1
   12440:	bls	11d10 <__assert_fail@plt+0xee4>
   12444:	add	r1, r1, #1
   12448:	cmp	r1, r2
   1244c:	bne	12428 <__assert_fail@plt+0x15fc>
   12450:	b	123f0 <__assert_fail@plt+0x15c4>
   12454:	cmp	r3, #96	; 0x60
   12458:	beq	11d10 <__assert_fail@plt+0xee4>
   1245c:	cmp	r3, #124	; 0x7c
   12460:	bne	12444 <__assert_fail@plt+0x1618>
   12464:	b	11d10 <__assert_fail@plt+0xee4>
   12468:	mov	r5, #0
   1246c:	b	12294 <__assert_fail@plt+0x1468>
   12470:	ldr	r1, [sp, #64]	; 0x40
   12474:	cmp	r1, #0
   12478:	beq	12364 <__assert_fail@plt+0x1538>
   1247c:	cmp	r9, r4
   12480:	mov	r1, #0
   12484:	strbhi	ip, [r8, r4]
   12488:	add	r4, r4, #1
   1248c:	str	r1, [sp, #64]	; 0x40
   12490:	b	12364 <__assert_fail@plt+0x1538>
   12494:	mov	r5, fp
   12498:	ldr	fp, [sp, #24]
   1249c:	mov	r6, #48	; 0x30
   124a0:	b	11eb0 <__assert_fail@plt+0x1084>
   124a4:	mov	r5, #0
   124a8:	b	11eb0 <__assert_fail@plt+0x1084>
   124ac:	mov	r6, r1
   124b0:	b	120dc <__assert_fail@plt+0x12b0>
   124b4:	mov	r6, r1
   124b8:	b	120cc <__assert_fail@plt+0x12a0>
   124bc:	ldr	r2, [sp, #28]
   124c0:	ldr	r3, [sp, #40]	; 0x28
   124c4:	subs	r3, r3, r2
   124c8:	movne	r3, #1
   124cc:	b	11934 <__assert_fail@plt+0xb08>
   124d0:	ldr	r3, [sp, #60]	; 0x3c
   124d4:	mov	sl, #2
   124d8:	ldr	r7, [sp, #72]	; 0x48
   124dc:	adds	r6, r3, #0
   124e0:	mov	r5, r3
   124e4:	movne	r6, #1
   124e8:	cmp	r9, #0
   124ec:	movne	r6, #0
   124f0:	cmp	r6, #0
   124f4:	bne	118c4 <__assert_fail@plt+0xa98>
   124f8:	ldr	r3, [sp, #68]	; 0x44
   124fc:	ldr	r2, [sp, #44]	; 0x2c
   12500:	cmp	r2, #0
   12504:	moveq	r3, #0
   12508:	andne	r3, r3, #1
   1250c:	cmp	r3, #0
   12510:	movne	r3, r2
   12514:	subne	r3, r3, #1
   12518:	bne	12548 <__assert_fail@plt+0x171c>
   1251c:	cmp	r9, r4
   12520:	movhi	r3, #0
   12524:	strbhi	r3, [r8, r4]
   12528:	mov	r0, r4
   1252c:	add	sp, sp, #108	; 0x6c
   12530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12534:	mov	r3, r7
   12538:	b	124fc <__assert_fail@plt+0x16d0>
   1253c:	cmp	r9, r4
   12540:	strbhi	r2, [r8, r4]
   12544:	add	r4, r4, #1
   12548:	ldrb	r2, [r3, #1]!
   1254c:	cmp	r2, #0
   12550:	bne	1253c <__assert_fail@plt+0x1710>
   12554:	b	1251c <__assert_fail@plt+0x16f0>
   12558:	andeq	r4, r1, r8, ror r3
   1255c:	andeq	r4, r1, fp, lsl #7
   12560:	andeq	r4, r1, r9, lsl #7
   12564:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1256c:	sub	sp, sp, #52	; 0x34
   12570:	mov	r6, r0
   12574:	mov	r5, r3
   12578:	mov	r8, r1
   1257c:	mov	r9, r2
   12580:	bl	10d78 <__errno_location@plt>
   12584:	ldr	r3, [r0]
   12588:	cmn	r6, #-2147483647	; 0x80000001
   1258c:	str	r0, [sp, #24]
   12590:	ldr	r7, [pc, #368]	; 12708 <__assert_fail@plt+0x18dc>
   12594:	str	r3, [sp, #32]
   12598:	movne	r3, #0
   1259c:	moveq	r3, #1
   125a0:	orrs	r3, r3, r6, lsr #31
   125a4:	ldr	r4, [r7]
   125a8:	beq	125b0 <__assert_fail@plt+0x1784>
   125ac:	bl	10e20 <abort@plt>
   125b0:	ldr	r2, [r7, #4]
   125b4:	cmp	r2, r6
   125b8:	bgt	12628 <__assert_fail@plt+0x17fc>
   125bc:	add	sl, r7, #8
   125c0:	mov	r3, #8
   125c4:	cmp	r4, sl
   125c8:	add	r1, sp, #44	; 0x2c
   125cc:	str	r2, [sp, #44]	; 0x2c
   125d0:	sub	r2, r6, r2
   125d4:	movne	r0, r4
   125d8:	moveq	r0, #0
   125dc:	add	r2, r2, #1
   125e0:	str	r3, [sp]
   125e4:	mvn	r3, #-2147483648	; 0x80000000
   125e8:	bl	132bc <__assert_fail@plt+0x2490>
   125ec:	cmp	r4, sl
   125f0:	mov	fp, r0
   125f4:	str	r0, [r7]
   125f8:	ldmeq	r4, {r0, r1}
   125fc:	mov	r4, fp
   12600:	ldr	r2, [sp, #44]	; 0x2c
   12604:	stmeq	fp, {r0, r1}
   12608:	mov	r1, #0
   1260c:	ldr	r0, [r7, #4]
   12610:	sub	r2, r2, r0
   12614:	add	r0, fp, r0, lsl #3
   12618:	lsl	r2, r2, #3
   1261c:	bl	10d90 <memset@plt>
   12620:	ldr	r3, [sp, #44]	; 0x2c
   12624:	str	r3, [r7, #4]
   12628:	ldr	r3, [r5, #4]
   1262c:	add	sl, r4, r6, lsl #3
   12630:	mov	r2, r8
   12634:	ldr	fp, [r4, r6, lsl #3]
   12638:	ldr	r7, [sl, #4]
   1263c:	orr	r3, r3, #1
   12640:	str	r3, [sp, #28]
   12644:	add	r3, r5, #8
   12648:	mov	r1, fp
   1264c:	str	r3, [sp, #36]	; 0x24
   12650:	mov	r0, r7
   12654:	ldr	r3, [r5, #44]	; 0x2c
   12658:	str	r3, [sp, #16]
   1265c:	ldr	r3, [r5, #40]	; 0x28
   12660:	str	r3, [sp, #12]
   12664:	add	r3, r5, #8
   12668:	str	r3, [sp, #8]
   1266c:	ldr	r3, [sp, #28]
   12670:	str	r3, [sp, #4]
   12674:	ldr	r3, [r5]
   12678:	str	r3, [sp]
   1267c:	mov	r3, r9
   12680:	bl	11878 <__assert_fail@plt+0xa4c>
   12684:	cmp	fp, r0
   12688:	bhi	126f0 <__assert_fail@plt+0x18c4>
   1268c:	ldr	r3, [pc, #120]	; 1270c <__assert_fail@plt+0x18e0>
   12690:	add	fp, r0, #1
   12694:	str	fp, [r4, r6, lsl #3]
   12698:	cmp	r7, r3
   1269c:	beq	126a8 <__assert_fail@plt+0x187c>
   126a0:	mov	r0, r7
   126a4:	bl	13a50 <__assert_fail@plt+0x2c24>
   126a8:	mov	r0, fp
   126ac:	bl	131ac <__assert_fail@plt+0x2380>
   126b0:	ldr	r3, [r5, #44]	; 0x2c
   126b4:	mov	r2, r8
   126b8:	mov	r1, fp
   126bc:	str	r0, [sl, #4]
   126c0:	mov	r7, r0
   126c4:	str	r3, [sp, #16]
   126c8:	ldr	r3, [r5, #40]	; 0x28
   126cc:	str	r3, [sp, #12]
   126d0:	add	r3, r5, #8
   126d4:	str	r3, [sp, #8]
   126d8:	ldr	r3, [sp, #28]
   126dc:	str	r3, [sp, #4]
   126e0:	ldr	r3, [r5]
   126e4:	str	r3, [sp]
   126e8:	mov	r3, r9
   126ec:	bl	11878 <__assert_fail@plt+0xa4c>
   126f0:	ldr	r3, [sp, #24]
   126f4:	mov	r0, r7
   126f8:	ldr	r2, [sp, #32]
   126fc:	str	r2, [r3]
   12700:	add	sp, sp, #52	; 0x34
   12704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12708:	andeq	r5, r2, r4, ror #1
   1270c:	andeq	r5, r2, r4, asr r1
   12710:	push	{r4, r5, r6, lr}
   12714:	mov	r5, r0
   12718:	bl	10d78 <__errno_location@plt>
   1271c:	mov	r4, r0
   12720:	cmp	r5, #0
   12724:	ldr	r0, [pc, #20]	; 12740 <__assert_fail@plt+0x1914>
   12728:	mov	r1, #48	; 0x30
   1272c:	movne	r0, r5
   12730:	ldr	r6, [r4]
   12734:	bl	133ac <__assert_fail@plt+0x2580>
   12738:	str	r6, [r4]
   1273c:	pop	{r4, r5, r6, pc}
   12740:	andeq	r5, r2, r4, asr r2
   12744:	ldr	r3, [pc, #12]	; 12758 <__assert_fail@plt+0x192c>
   12748:	cmp	r0, #0
   1274c:	moveq	r0, r3
   12750:	ldr	r0, [r0]
   12754:	bx	lr
   12758:	andeq	r5, r2, r4, asr r2
   1275c:	ldr	r3, [pc, #12]	; 12770 <__assert_fail@plt+0x1944>
   12760:	cmp	r0, #0
   12764:	moveq	r0, r3
   12768:	str	r1, [r0]
   1276c:	bx	lr
   12770:	andeq	r5, r2, r4, asr r2
   12774:	ldr	r3, [pc, #52]	; 127b0 <__assert_fail@plt+0x1984>
   12778:	cmp	r0, #0
   1277c:	push	{lr}		; (str lr, [sp, #-4]!)
   12780:	lsr	lr, r1, #5
   12784:	and	r1, r1, #31
   12788:	moveq	r0, r3
   1278c:	add	r3, r0, #8
   12790:	ldr	ip, [r3, lr, lsl #2]
   12794:	lsr	r0, ip, r1
   12798:	eor	r2, r2, r0
   1279c:	and	r0, r0, #1
   127a0:	and	r2, r2, #1
   127a4:	eor	r1, ip, r2, lsl r1
   127a8:	str	r1, [r3, lr, lsl #2]
   127ac:	pop	{pc}		; (ldr pc, [sp], #4)
   127b0:	andeq	r5, r2, r4, asr r2
   127b4:	ldr	r3, [pc, #16]	; 127cc <__assert_fail@plt+0x19a0>
   127b8:	cmp	r0, #0
   127bc:	movne	r3, r0
   127c0:	ldr	r0, [r3, #4]
   127c4:	str	r1, [r3, #4]
   127c8:	bx	lr
   127cc:	andeq	r5, r2, r4, asr r2
   127d0:	ldr	r3, [pc, #44]	; 12804 <__assert_fail@plt+0x19d8>
   127d4:	cmp	r0, #0
   127d8:	moveq	r0, r3
   127dc:	mov	r3, #10
   127e0:	cmp	r2, #0
   127e4:	cmpne	r1, #0
   127e8:	str	r3, [r0]
   127ec:	bne	127f8 <__assert_fail@plt+0x19cc>
   127f0:	push	{r4, lr}
   127f4:	bl	10e20 <abort@plt>
   127f8:	str	r1, [r0, #40]	; 0x28
   127fc:	str	r2, [r0, #44]	; 0x2c
   12800:	bx	lr
   12804:	andeq	r5, r2, r4, asr r2
   12808:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1280c:	sub	sp, sp, #24
   12810:	mov	sl, r3
   12814:	mov	r7, r0
   12818:	mov	r8, r1
   1281c:	mov	r9, r2
   12820:	ldr	r4, [sp, #56]	; 0x38
   12824:	ldr	r3, [pc, #88]	; 12884 <__assert_fail@plt+0x1a58>
   12828:	cmp	r4, #0
   1282c:	moveq	r4, r3
   12830:	bl	10d78 <__errno_location@plt>
   12834:	ldr	r3, [r4, #44]	; 0x2c
   12838:	mov	r5, r0
   1283c:	mov	r2, r9
   12840:	mov	r1, r8
   12844:	mov	r0, r7
   12848:	ldr	r6, [r5]
   1284c:	str	r3, [sp, #16]
   12850:	ldr	r3, [r4, #40]	; 0x28
   12854:	str	r3, [sp, #12]
   12858:	add	r3, r4, #8
   1285c:	str	r3, [sp, #8]
   12860:	ldr	r3, [r4, #4]
   12864:	str	r3, [sp, #4]
   12868:	ldr	r3, [r4]
   1286c:	str	r3, [sp]
   12870:	mov	r3, sl
   12874:	bl	11878 <__assert_fail@plt+0xa4c>
   12878:	str	r6, [r5]
   1287c:	add	sp, sp, #24
   12880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12884:	andeq	r5, r2, r4, asr r2
   12888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1288c:	cmp	r3, #0
   12890:	sub	sp, sp, #44	; 0x2c
   12894:	mov	r6, r2
   12898:	mov	sl, r1
   1289c:	mov	r9, r0
   128a0:	ldr	r4, [pc, #176]	; 12958 <__assert_fail@plt+0x1b2c>
   128a4:	movne	r4, r3
   128a8:	bl	10d78 <__errno_location@plt>
   128ac:	ldr	r3, [r0]
   128b0:	mov	r1, #0
   128b4:	mov	r2, r9
   128b8:	mov	r8, r0
   128bc:	mov	r0, r1
   128c0:	ldr	r5, [r4, #4]
   128c4:	add	fp, r4, #8
   128c8:	str	r3, [sp, #28]
   128cc:	ldr	r3, [r4, #44]	; 0x2c
   128d0:	cmp	r6, #0
   128d4:	orreq	r5, r5, #1
   128d8:	str	r3, [sp, #16]
   128dc:	ldr	r3, [r4, #40]	; 0x28
   128e0:	stmib	sp, {r5, fp}
   128e4:	str	r3, [sp, #12]
   128e8:	ldr	r3, [r4]
   128ec:	str	r3, [sp]
   128f0:	mov	r3, sl
   128f4:	bl	11878 <__assert_fail@plt+0xa4c>
   128f8:	add	r1, r0, #1
   128fc:	mov	r7, r0
   12900:	mov	r0, r1
   12904:	str	r1, [sp, #36]	; 0x24
   12908:	bl	131ac <__assert_fail@plt+0x2380>
   1290c:	ldr	r3, [r4, #44]	; 0x2c
   12910:	mov	r2, r9
   12914:	ldr	r1, [sp, #36]	; 0x24
   12918:	str	r3, [sp, #16]
   1291c:	ldr	r3, [r4, #40]	; 0x28
   12920:	stmib	sp, {r5, fp}
   12924:	str	r0, [sp, #32]
   12928:	str	r3, [sp, #12]
   1292c:	ldr	r3, [r4]
   12930:	str	r3, [sp]
   12934:	mov	r3, sl
   12938:	bl	11878 <__assert_fail@plt+0xa4c>
   1293c:	ldr	r3, [sp, #28]
   12940:	cmp	r6, #0
   12944:	ldr	r0, [sp, #32]
   12948:	str	r3, [r8]
   1294c:	strne	r7, [r6]
   12950:	add	sp, sp, #44	; 0x2c
   12954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12958:	andeq	r5, r2, r4, asr r2
   1295c:	mov	r3, r2
   12960:	mov	r2, #0
   12964:	b	12888 <__assert_fail@plt+0x1a5c>
   12968:	push	{r4, r5, r6, r7, r8, lr}
   1296c:	mov	r6, #1
   12970:	ldr	r4, [pc, #100]	; 129dc <__assert_fail@plt+0x1bb0>
   12974:	ldr	r5, [r4]
   12978:	add	r7, r5, #4
   1297c:	ldr	r3, [r4, #4]
   12980:	cmp	r3, r6
   12984:	bgt	129cc <__assert_fail@plt+0x1ba0>
   12988:	ldr	r6, [pc, #80]	; 129e0 <__assert_fail@plt+0x1bb4>
   1298c:	ldr	r0, [r5, #4]
   12990:	cmp	r0, r6
   12994:	beq	129a8 <__assert_fail@plt+0x1b7c>
   12998:	bl	13a50 <__assert_fail@plt+0x2c24>
   1299c:	mov	r3, #256	; 0x100
   129a0:	str	r3, [r4, #8]
   129a4:	str	r6, [r4, #12]
   129a8:	ldr	r6, [pc, #52]	; 129e4 <__assert_fail@plt+0x1bb8>
   129ac:	cmp	r5, r6
   129b0:	beq	129c0 <__assert_fail@plt+0x1b94>
   129b4:	mov	r0, r5
   129b8:	bl	13a50 <__assert_fail@plt+0x2c24>
   129bc:	str	r6, [r4]
   129c0:	mov	r3, #1
   129c4:	str	r3, [r4, #4]
   129c8:	pop	{r4, r5, r6, r7, r8, pc}
   129cc:	ldr	r0, [r7, r6, lsl #3]
   129d0:	add	r6, r6, #1
   129d4:	bl	13a50 <__assert_fail@plt+0x2c24>
   129d8:	b	1297c <__assert_fail@plt+0x1b50>
   129dc:	andeq	r5, r2, r4, ror #1
   129e0:	andeq	r5, r2, r4, asr r1
   129e4:	andeq	r5, r2, ip, ror #1
   129e8:	ldr	r3, [pc, #4]	; 129f4 <__assert_fail@plt+0x1bc8>
   129ec:	mvn	r2, #0
   129f0:	b	12568 <__assert_fail@plt+0x173c>
   129f4:	andeq	r5, r2, r4, asr r2
   129f8:	ldr	r3, [pc]	; 12a00 <__assert_fail@plt+0x1bd4>
   129fc:	b	12568 <__assert_fail@plt+0x173c>
   12a00:	andeq	r5, r2, r4, asr r2
   12a04:	mov	r1, r0
   12a08:	mov	r0, #0
   12a0c:	b	129e8 <__assert_fail@plt+0x1bbc>
   12a10:	mov	r2, r1
   12a14:	mov	r1, r0
   12a18:	mov	r0, #0
   12a1c:	b	129f8 <__assert_fail@plt+0x1bcc>
   12a20:	push	{r4, r5, lr}
   12a24:	sub	sp, sp, #52	; 0x34
   12a28:	mov	r5, r2
   12a2c:	mov	r4, r0
   12a30:	mov	r0, sp
   12a34:	bl	1171c <__assert_fail@plt+0x8f0>
   12a38:	mov	r3, sp
   12a3c:	mvn	r2, #0
   12a40:	mov	r1, r5
   12a44:	mov	r0, r4
   12a48:	bl	12568 <__assert_fail@plt+0x173c>
   12a4c:	add	sp, sp, #52	; 0x34
   12a50:	pop	{r4, r5, pc}
   12a54:	push	{r4, r5, r6, lr}
   12a58:	sub	sp, sp, #48	; 0x30
   12a5c:	mov	r5, r2
   12a60:	mov	r6, r3
   12a64:	mov	r4, r0
   12a68:	mov	r0, sp
   12a6c:	bl	1171c <__assert_fail@plt+0x8f0>
   12a70:	mov	r3, sp
   12a74:	mov	r2, r6
   12a78:	mov	r1, r5
   12a7c:	mov	r0, r4
   12a80:	bl	12568 <__assert_fail@plt+0x173c>
   12a84:	add	sp, sp, #48	; 0x30
   12a88:	pop	{r4, r5, r6, pc}
   12a8c:	mov	r2, r1
   12a90:	mov	r1, r0
   12a94:	mov	r0, #0
   12a98:	b	12a20 <__assert_fail@plt+0x1bf4>
   12a9c:	mov	r3, r2
   12aa0:	mov	r2, r1
   12aa4:	mov	r1, r0
   12aa8:	mov	r0, #0
   12aac:	b	12a54 <__assert_fail@plt+0x1c28>
   12ab0:	push	{r4, r5, r6, lr}
   12ab4:	mov	r4, r0
   12ab8:	mov	r5, r1
   12abc:	mov	r6, r2
   12ac0:	sub	sp, sp, #48	; 0x30
   12ac4:	mov	ip, sp
   12ac8:	ldr	lr, [pc, #64]	; 12b10 <__assert_fail@plt+0x1ce4>
   12acc:	ldm	lr!, {r0, r1, r2, r3}
   12ad0:	stmia	ip!, {r0, r1, r2, r3}
   12ad4:	ldm	lr!, {r0, r1, r2, r3}
   12ad8:	stmia	ip!, {r0, r1, r2, r3}
   12adc:	ldm	lr, {r0, r1, r2, r3}
   12ae0:	stm	ip, {r0, r1, r2, r3}
   12ae4:	mov	r1, r6
   12ae8:	mov	r2, #1
   12aec:	mov	r0, sp
   12af0:	bl	12774 <__assert_fail@plt+0x1948>
   12af4:	mov	r3, sp
   12af8:	mov	r2, r5
   12afc:	mov	r1, r4
   12b00:	mov	r0, #0
   12b04:	bl	12568 <__assert_fail@plt+0x173c>
   12b08:	add	sp, sp, #48	; 0x30
   12b0c:	pop	{r4, r5, r6, pc}
   12b10:	andeq	r5, r2, r4, asr r2
   12b14:	mov	r2, r1
   12b18:	mvn	r1, #0
   12b1c:	b	12ab0 <__assert_fail@plt+0x1c84>
   12b20:	mov	r1, #58	; 0x3a
   12b24:	b	12b14 <__assert_fail@plt+0x1ce8>
   12b28:	mov	r2, #58	; 0x3a
   12b2c:	b	12ab0 <__assert_fail@plt+0x1c84>
   12b30:	push	{r4, r5, lr}
   12b34:	sub	sp, sp, #100	; 0x64
   12b38:	mov	r4, r0
   12b3c:	mov	r0, sp
   12b40:	mov	r5, r2
   12b44:	bl	1171c <__assert_fail@plt+0x8f0>
   12b48:	mov	ip, sp
   12b4c:	add	lr, sp, #48	; 0x30
   12b50:	ldm	ip!, {r0, r1, r2, r3}
   12b54:	stmia	lr!, {r0, r1, r2, r3}
   12b58:	ldm	ip!, {r0, r1, r2, r3}
   12b5c:	stmia	lr!, {r0, r1, r2, r3}
   12b60:	ldm	ip, {r0, r1, r2, r3}
   12b64:	stm	lr, {r0, r1, r2, r3}
   12b68:	mov	r2, #1
   12b6c:	mov	r1, #58	; 0x3a
   12b70:	add	r0, sp, #48	; 0x30
   12b74:	bl	12774 <__assert_fail@plt+0x1948>
   12b78:	add	r3, sp, #48	; 0x30
   12b7c:	mvn	r2, #0
   12b80:	mov	r1, r5
   12b84:	mov	r0, r4
   12b88:	bl	12568 <__assert_fail@plt+0x173c>
   12b8c:	add	sp, sp, #100	; 0x64
   12b90:	pop	{r4, r5, pc}
   12b94:	push	{r4, r5, r6, r7, lr}
   12b98:	mov	r4, r0
   12b9c:	mov	r6, r1
   12ba0:	mov	r7, r2
   12ba4:	mov	r5, r3
   12ba8:	sub	sp, sp, #52	; 0x34
   12bac:	ldr	lr, [pc, #68]	; 12bf8 <__assert_fail@plt+0x1dcc>
   12bb0:	mov	ip, sp
   12bb4:	ldm	lr!, {r0, r1, r2, r3}
   12bb8:	stmia	ip!, {r0, r1, r2, r3}
   12bbc:	ldm	lr!, {r0, r1, r2, r3}
   12bc0:	stmia	ip!, {r0, r1, r2, r3}
   12bc4:	ldm	lr, {r0, r1, r2, r3}
   12bc8:	stm	ip, {r0, r1, r2, r3}
   12bcc:	mov	r2, r7
   12bd0:	mov	r1, r6
   12bd4:	mov	r0, sp
   12bd8:	bl	127d0 <__assert_fail@plt+0x19a4>
   12bdc:	ldr	r2, [sp, #72]	; 0x48
   12be0:	mov	r3, sp
   12be4:	mov	r1, r5
   12be8:	mov	r0, r4
   12bec:	bl	12568 <__assert_fail@plt+0x173c>
   12bf0:	add	sp, sp, #52	; 0x34
   12bf4:	pop	{r4, r5, r6, r7, pc}
   12bf8:	andeq	r5, r2, r4, asr r2
   12bfc:	mvn	ip, #0
   12c00:	push	{r0, r1, r2, lr}
   12c04:	str	ip, [sp]
   12c08:	bl	12b94 <__assert_fail@plt+0x1d68>
   12c0c:	add	sp, sp, #12
   12c10:	pop	{pc}		; (ldr pc, [sp], #4)
   12c14:	mov	r3, r2
   12c18:	mov	r2, r1
   12c1c:	mov	r1, r0
   12c20:	mov	r0, #0
   12c24:	b	12bfc <__assert_fail@plt+0x1dd0>
   12c28:	push	{r0, r1, r2, lr}
   12c2c:	str	r3, [sp]
   12c30:	mov	r3, r2
   12c34:	mov	r2, r1
   12c38:	mov	r1, r0
   12c3c:	mov	r0, #0
   12c40:	bl	12b94 <__assert_fail@plt+0x1d68>
   12c44:	add	sp, sp, #12
   12c48:	pop	{pc}		; (ldr pc, [sp], #4)
   12c4c:	ldr	r3, [pc]	; 12c54 <__assert_fail@plt+0x1e28>
   12c50:	b	12568 <__assert_fail@plt+0x173c>
   12c54:	strdeq	r5, [r2], -r4
   12c58:	mov	r2, r1
   12c5c:	mov	r1, r0
   12c60:	mov	r0, #0
   12c64:	b	12c4c <__assert_fail@plt+0x1e20>
   12c68:	mvn	r2, #0
   12c6c:	b	12c4c <__assert_fail@plt+0x1e20>
   12c70:	mov	r1, r0
   12c74:	mov	r0, #0
   12c78:	b	12c68 <__assert_fail@plt+0x1e3c>
   12c7c:	push	{r4, r5, r6, lr}
   12c80:	cmp	r1, #0
   12c84:	sub	sp, sp, #32
   12c88:	mov	r5, r0
   12c8c:	ldr	r4, [sp, #48]	; 0x30
   12c90:	ldr	r6, [sp, #52]	; 0x34
   12c94:	beq	12d48 <__assert_fail@plt+0x1f1c>
   12c98:	strd	r2, [sp]
   12c9c:	mov	r3, r1
   12ca0:	mov	r1, #1
   12ca4:	ldr	r2, [pc, #856]	; 13004 <__assert_fail@plt+0x21d8>
   12ca8:	bl	10db4 <__fprintf_chk@plt>
   12cac:	mov	r2, #5
   12cb0:	ldr	r1, [pc, #848]	; 13008 <__assert_fail@plt+0x21dc>
   12cb4:	mov	r0, #0
   12cb8:	bl	10c7c <dcgettext@plt>
   12cbc:	movw	r3, #2022	; 0x7e6
   12cc0:	ldr	r2, [pc, #836]	; 1300c <__assert_fail@plt+0x21e0>
   12cc4:	mov	r1, #1
   12cc8:	str	r3, [sp]
   12ccc:	mov	r3, r0
   12cd0:	mov	r0, r5
   12cd4:	bl	10db4 <__fprintf_chk@plt>
   12cd8:	mov	r1, r5
   12cdc:	mov	r0, #10
   12ce0:	bl	10c70 <fputc_unlocked@plt>
   12ce4:	mov	r2, #5
   12ce8:	ldr	r1, [pc, #800]	; 13010 <__assert_fail@plt+0x21e4>
   12cec:	mov	r0, #0
   12cf0:	bl	10c7c <dcgettext@plt>
   12cf4:	mov	r2, r0
   12cf8:	mov	r1, #1
   12cfc:	ldr	r3, [pc, #784]	; 13014 <__assert_fail@plt+0x21e8>
   12d00:	mov	r0, r5
   12d04:	bl	10db4 <__fprintf_chk@plt>
   12d08:	mov	r1, r5
   12d0c:	mov	r0, #10
   12d10:	bl	10c70 <fputc_unlocked@plt>
   12d14:	cmp	r6, #9
   12d18:	ldrls	pc, [pc, r6, lsl #2]
   12d1c:	b	12ff8 <__assert_fail@plt+0x21cc>
   12d20:	andeq	r2, r1, r8, lsr lr
   12d24:	andeq	r2, r1, r0, ror #26
   12d28:	andeq	r2, r1, ip, lsl #27
   12d2c:	andeq	r2, r1, r0, asr #27
   12d30:	strdeq	r2, [r1], -ip
   12d34:	andeq	r2, r1, r0, asr #28
   12d38:	andeq	r2, r1, r8, lsl #29
   12d3c:	ldrdeq	r2, [r1], -r8
   12d40:	andeq	r2, r1, r0, lsr pc
   12d44:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12d48:	mov	r1, #1
   12d4c:	str	r3, [sp]
   12d50:	mov	r3, r2
   12d54:	ldr	r2, [pc, #700]	; 13018 <__assert_fail@plt+0x21ec>
   12d58:	bl	10db4 <__fprintf_chk@plt>
   12d5c:	b	12cac <__assert_fail@plt+0x1e80>
   12d60:	mov	r2, #5
   12d64:	ldr	r1, [pc, #688]	; 1301c <__assert_fail@plt+0x21f0>
   12d68:	mov	r0, #0
   12d6c:	bl	10c7c <dcgettext@plt>
   12d70:	ldr	r3, [r4]
   12d74:	mov	r2, r0
   12d78:	mov	r1, #1
   12d7c:	mov	r0, r5
   12d80:	add	sp, sp, #32
   12d84:	pop	{r4, r5, r6, lr}
   12d88:	b	10db4 <__fprintf_chk@plt>
   12d8c:	mov	r2, #5
   12d90:	ldr	r1, [pc, #648]	; 13020 <__assert_fail@plt+0x21f4>
   12d94:	mov	r0, #0
   12d98:	bl	10c7c <dcgettext@plt>
   12d9c:	ldr	r3, [r4, #4]
   12da0:	mov	r2, r0
   12da4:	mov	r1, #1
   12da8:	mov	r0, r5
   12dac:	str	r3, [sp, #48]	; 0x30
   12db0:	ldr	r3, [r4]
   12db4:	add	sp, sp, #32
   12db8:	pop	{r4, r5, r6, lr}
   12dbc:	b	10db4 <__fprintf_chk@plt>
   12dc0:	mov	r2, #5
   12dc4:	ldr	r1, [pc, #600]	; 13024 <__assert_fail@plt+0x21f8>
   12dc8:	mov	r0, #0
   12dcc:	bl	10c7c <dcgettext@plt>
   12dd0:	ldr	r3, [r4, #8]
   12dd4:	mov	r2, r0
   12dd8:	mov	r1, #1
   12ddc:	mov	r0, r5
   12de0:	str	r3, [sp, #52]	; 0x34
   12de4:	ldr	r3, [r4, #4]
   12de8:	str	r3, [sp, #48]	; 0x30
   12dec:	ldr	r3, [r4]
   12df0:	add	sp, sp, #32
   12df4:	pop	{r4, r5, r6, lr}
   12df8:	b	10db4 <__fprintf_chk@plt>
   12dfc:	mov	r2, #5
   12e00:	ldr	r1, [pc, #544]	; 13028 <__assert_fail@plt+0x21fc>
   12e04:	mov	r0, #0
   12e08:	bl	10c7c <dcgettext@plt>
   12e0c:	ldr	r3, [r4, #12]
   12e10:	mov	r2, r0
   12e14:	mov	r1, #1
   12e18:	mov	r0, r5
   12e1c:	str	r3, [sp, #8]
   12e20:	ldr	r3, [r4, #8]
   12e24:	str	r3, [sp, #4]
   12e28:	ldr	r3, [r4, #4]
   12e2c:	str	r3, [sp]
   12e30:	ldr	r3, [r4]
   12e34:	bl	10db4 <__fprintf_chk@plt>
   12e38:	add	sp, sp, #32
   12e3c:	pop	{r4, r5, r6, pc}
   12e40:	mov	r2, #5
   12e44:	ldr	r1, [pc, #480]	; 1302c <__assert_fail@plt+0x2200>
   12e48:	mov	r0, #0
   12e4c:	bl	10c7c <dcgettext@plt>
   12e50:	ldr	r3, [r4, #16]
   12e54:	mov	r2, r0
   12e58:	mov	r1, #1
   12e5c:	mov	r0, r5
   12e60:	str	r3, [sp, #12]
   12e64:	ldr	r3, [r4, #12]
   12e68:	str	r3, [sp, #8]
   12e6c:	ldr	r3, [r4, #8]
   12e70:	str	r3, [sp, #4]
   12e74:	ldr	r3, [r4, #4]
   12e78:	str	r3, [sp]
   12e7c:	ldr	r3, [r4]
   12e80:	bl	10db4 <__fprintf_chk@plt>
   12e84:	b	12e38 <__assert_fail@plt+0x200c>
   12e88:	mov	r2, #5
   12e8c:	ldr	r1, [pc, #412]	; 13030 <__assert_fail@plt+0x2204>
   12e90:	mov	r0, #0
   12e94:	bl	10c7c <dcgettext@plt>
   12e98:	ldr	r3, [r4, #20]
   12e9c:	mov	r2, r0
   12ea0:	mov	r1, #1
   12ea4:	mov	r0, r5
   12ea8:	str	r3, [sp, #16]
   12eac:	ldr	r3, [r4, #16]
   12eb0:	str	r3, [sp, #12]
   12eb4:	ldr	r3, [r4, #12]
   12eb8:	str	r3, [sp, #8]
   12ebc:	ldr	r3, [r4, #8]
   12ec0:	str	r3, [sp, #4]
   12ec4:	ldr	r3, [r4, #4]
   12ec8:	str	r3, [sp]
   12ecc:	ldr	r3, [r4]
   12ed0:	bl	10db4 <__fprintf_chk@plt>
   12ed4:	b	12e38 <__assert_fail@plt+0x200c>
   12ed8:	mov	r2, #5
   12edc:	ldr	r1, [pc, #336]	; 13034 <__assert_fail@plt+0x2208>
   12ee0:	mov	r0, #0
   12ee4:	bl	10c7c <dcgettext@plt>
   12ee8:	ldr	r3, [r4, #24]
   12eec:	mov	r2, r0
   12ef0:	mov	r1, #1
   12ef4:	mov	r0, r5
   12ef8:	str	r3, [sp, #20]
   12efc:	ldr	r3, [r4, #20]
   12f00:	str	r3, [sp, #16]
   12f04:	ldr	r3, [r4, #16]
   12f08:	str	r3, [sp, #12]
   12f0c:	ldr	r3, [r4, #12]
   12f10:	str	r3, [sp, #8]
   12f14:	ldr	r3, [r4, #8]
   12f18:	str	r3, [sp, #4]
   12f1c:	ldr	r3, [r4, #4]
   12f20:	str	r3, [sp]
   12f24:	ldr	r3, [r4]
   12f28:	bl	10db4 <__fprintf_chk@plt>
   12f2c:	b	12e38 <__assert_fail@plt+0x200c>
   12f30:	mov	r2, #5
   12f34:	ldr	r1, [pc, #252]	; 13038 <__assert_fail@plt+0x220c>
   12f38:	mov	r0, #0
   12f3c:	bl	10c7c <dcgettext@plt>
   12f40:	ldr	r3, [r4, #28]
   12f44:	mov	r2, r0
   12f48:	mov	r1, #1
   12f4c:	mov	r0, r5
   12f50:	str	r3, [sp, #24]
   12f54:	ldr	r3, [r4, #24]
   12f58:	str	r3, [sp, #20]
   12f5c:	ldr	r3, [r4, #20]
   12f60:	str	r3, [sp, #16]
   12f64:	ldr	r3, [r4, #16]
   12f68:	str	r3, [sp, #12]
   12f6c:	ldr	r3, [r4, #12]
   12f70:	str	r3, [sp, #8]
   12f74:	ldr	r3, [r4, #8]
   12f78:	str	r3, [sp, #4]
   12f7c:	ldr	r3, [r4, #4]
   12f80:	str	r3, [sp]
   12f84:	ldr	r3, [r4]
   12f88:	bl	10db4 <__fprintf_chk@plt>
   12f8c:	b	12e38 <__assert_fail@plt+0x200c>
   12f90:	ldr	r1, [pc, #164]	; 1303c <__assert_fail@plt+0x2210>
   12f94:	mov	r2, #5
   12f98:	mov	r0, #0
   12f9c:	bl	10c7c <dcgettext@plt>
   12fa0:	ldr	r3, [r4, #32]
   12fa4:	mov	r2, r0
   12fa8:	mov	r1, #1
   12fac:	mov	r0, r5
   12fb0:	str	r3, [sp, #28]
   12fb4:	ldr	r3, [r4, #28]
   12fb8:	str	r3, [sp, #24]
   12fbc:	ldr	r3, [r4, #24]
   12fc0:	str	r3, [sp, #20]
   12fc4:	ldr	r3, [r4, #20]
   12fc8:	str	r3, [sp, #16]
   12fcc:	ldr	r3, [r4, #16]
   12fd0:	str	r3, [sp, #12]
   12fd4:	ldr	r3, [r4, #12]
   12fd8:	str	r3, [sp, #8]
   12fdc:	ldr	r3, [r4, #8]
   12fe0:	str	r3, [sp, #4]
   12fe4:	ldr	r3, [r4, #4]
   12fe8:	str	r3, [sp]
   12fec:	ldr	r3, [r4]
   12ff0:	bl	10db4 <__fprintf_chk@plt>
   12ff4:	b	12e38 <__assert_fail@plt+0x200c>
   12ff8:	mov	r2, #5
   12ffc:	ldr	r1, [pc, #60]	; 13040 <__assert_fail@plt+0x2214>
   13000:	b	12f98 <__assert_fail@plt+0x216c>
   13004:	ldrdeq	r4, [r1], -r9
   13008:	andeq	r4, r1, ip, ror #7
   1300c:			; <UNDEFINED> instruction: 0x000146ba
   13010:	strdeq	r4, [r1], -r0
   13014:	muleq	r1, fp, r4
   13018:	andeq	r4, r1, r5, ror #7
   1301c:			; <UNDEFINED> instruction: 0x000144bd
   13020:	andeq	r4, r1, sp, asr #9
   13024:	andeq	r4, r1, r4, ror #9
   13028:	andeq	r4, r1, r0, lsl #10
   1302c:	andeq	r4, r1, r0, lsr #10
   13030:	andeq	r4, r1, r4, asr #10
   13034:	andeq	r4, r1, ip, ror #10
   13038:	muleq	r1, r8, r5
   1303c:	andeq	r4, r1, r8, asr #11
   13040:	strdeq	r4, [r1], -ip
   13044:	push	{r0, r1, r4, lr}
   13048:	mov	ip, #0
   1304c:	ldr	lr, [sp, #16]
   13050:	ldr	r4, [lr, ip, lsl #2]
   13054:	cmp	r4, #0
   13058:	bne	13070 <__assert_fail@plt+0x2244>
   1305c:	str	lr, [sp]
   13060:	str	ip, [sp, #4]
   13064:	bl	12c7c <__assert_fail@plt+0x1e50>
   13068:	add	sp, sp, #8
   1306c:	pop	{r4, pc}
   13070:	add	ip, ip, #1
   13074:	b	13050 <__assert_fail@plt+0x2224>
   13078:	push	{r4, r5, r6, lr}
   1307c:	sub	sp, sp, #48	; 0x30
   13080:	mov	ip, #0
   13084:	add	lr, sp, #8
   13088:	mov	r5, lr
   1308c:	ldr	r6, [sp, #64]	; 0x40
   13090:	ldr	r4, [r6, ip, lsl #2]
   13094:	cmp	r4, #0
   13098:	str	r4, [lr], #4
   1309c:	beq	130ac <__assert_fail@plt+0x2280>
   130a0:	add	ip, ip, #1
   130a4:	cmp	ip, #10
   130a8:	bne	13090 <__assert_fail@plt+0x2264>
   130ac:	stm	sp, {r5, ip}
   130b0:	bl	12c7c <__assert_fail@plt+0x1e50>
   130b4:	add	sp, sp, #48	; 0x30
   130b8:	pop	{r4, r5, r6, pc}
   130bc:	push	{r3}		; (str r3, [sp, #-4]!)
   130c0:	push	{r0, r1, r2, r3, lr}
   130c4:	add	r3, sp, #24
   130c8:	str	r3, [sp]
   130cc:	str	r3, [sp, #12]
   130d0:	ldr	r3, [sp, #20]
   130d4:	bl	13078 <__assert_fail@plt+0x224c>
   130d8:	add	sp, sp, #16
   130dc:	pop	{lr}		; (ldr lr, [sp], #4)
   130e0:	add	sp, sp, #4
   130e4:	bx	lr
   130e8:	ldr	r3, [pc, #116]	; 13164 <__assert_fail@plt+0x2338>
   130ec:	mov	r0, #10
   130f0:	push	{r4, lr}
   130f4:	ldr	r1, [r3]
   130f8:	bl	10c70 <fputc_unlocked@plt>
   130fc:	mov	r2, #5
   13100:	ldr	r1, [pc, #96]	; 13168 <__assert_fail@plt+0x233c>
   13104:	mov	r0, #0
   13108:	bl	10c7c <dcgettext@plt>
   1310c:	mov	r1, r0
   13110:	ldr	r2, [pc, #84]	; 1316c <__assert_fail@plt+0x2340>
   13114:	mov	r0, #1
   13118:	bl	10d9c <__printf_chk@plt>
   1311c:	mov	r2, #5
   13120:	ldr	r1, [pc, #72]	; 13170 <__assert_fail@plt+0x2344>
   13124:	mov	r0, #0
   13128:	bl	10c7c <dcgettext@plt>
   1312c:	mov	r1, r0
   13130:	ldr	r3, [pc, #60]	; 13174 <__assert_fail@plt+0x2348>
   13134:	mov	r0, #1
   13138:	ldr	r2, [pc, #56]	; 13178 <__assert_fail@plt+0x234c>
   1313c:	bl	10d9c <__printf_chk@plt>
   13140:	mov	r2, #5
   13144:	ldr	r1, [pc, #48]	; 1317c <__assert_fail@plt+0x2350>
   13148:	mov	r0, #0
   1314c:	bl	10c7c <dcgettext@plt>
   13150:	mov	r1, r0
   13154:	ldr	r2, [pc, #36]	; 13180 <__assert_fail@plt+0x2354>
   13158:	mov	r0, #1
   1315c:	pop	{r4, lr}
   13160:	b	10d9c <__printf_chk@plt>
   13164:	andeq	r5, r2, ip, lsr r1
   13168:	andeq	r4, r1, r8, lsr r6
   1316c:	andeq	r4, r1, ip, asr #12
   13170:	andeq	r4, r1, r2, ror #12
   13174:	andeq	r4, r1, r8, ror #1
   13178:	andeq	r4, r1, r0, lsl r1
   1317c:	andeq	r4, r1, r6, ror r6
   13180:	muleq	r1, sp, r6
   13184:	push	{r4, lr}
   13188:	bl	13878 <__assert_fail@plt+0x2a4c>
   1318c:	cmp	r0, #0
   13190:	popne	{r4, pc}
   13194:	bl	1343c <__assert_fail@plt+0x2610>
   13198:	push	{r4, lr}
   1319c:	bl	13878 <__assert_fail@plt+0x2a4c>
   131a0:	cmp	r0, #0
   131a4:	popne	{r4, pc}
   131a8:	bl	1343c <__assert_fail@plt+0x2610>
   131ac:	b	13184 <__assert_fail@plt+0x2358>
   131b0:	push	{r4, r5, r6, lr}
   131b4:	mov	r5, r0
   131b8:	mov	r4, r1
   131bc:	bl	138a4 <__assert_fail@plt+0x2a78>
   131c0:	cmp	r0, #0
   131c4:	popne	{r4, r5, r6, pc}
   131c8:	adds	r4, r4, #0
   131cc:	movne	r4, #1
   131d0:	cmp	r5, #0
   131d4:	moveq	r4, #1
   131d8:	cmp	r4, #0
   131dc:	popeq	{r4, r5, r6, pc}
   131e0:	bl	1343c <__assert_fail@plt+0x2610>
   131e4:	push	{r4, lr}
   131e8:	bl	13b3c <__assert_fail@plt+0x2d10>
   131ec:	cmp	r0, #0
   131f0:	popne	{r4, pc}
   131f4:	bl	1343c <__assert_fail@plt+0x2610>
   131f8:	push	{r4, r5, r6, lr}
   131fc:	mov	r6, r0
   13200:	mov	r5, r1
   13204:	mov	r4, r2
   13208:	bl	13be4 <__assert_fail@plt+0x2db8>
   1320c:	cmp	r0, #0
   13210:	popne	{r4, r5, r6, pc}
   13214:	cmp	r6, #0
   13218:	beq	13228 <__assert_fail@plt+0x23fc>
   1321c:	cmp	r5, #0
   13220:	cmpne	r4, #0
   13224:	popeq	{r4, r5, r6, pc}
   13228:	bl	1343c <__assert_fail@plt+0x2610>
   1322c:	b	131f8 <__assert_fail@plt+0x23cc>
   13230:	push	{r4, lr}
   13234:	bl	13b4c <__assert_fail@plt+0x2d20>
   13238:	cmp	r0, #0
   1323c:	popne	{r4, pc}
   13240:	bl	1343c <__assert_fail@plt+0x2610>
   13244:	mov	r2, r1
   13248:	mov	r1, r0
   1324c:	mov	r0, #0
   13250:	b	131f8 <__assert_fail@plt+0x23cc>
   13254:	mov	r2, r1
   13258:	mov	r1, r0
   1325c:	mov	r0, #0
   13260:	b	13230 <__assert_fail@plt+0x2404>
   13264:	cmp	r0, #0
   13268:	push	{r4, r5, r6, lr}
   1326c:	mov	r5, r1
   13270:	ldr	r4, [r1]
   13274:	bne	132a0 <__assert_fail@plt+0x2474>
   13278:	cmp	r4, #0
   1327c:	bne	13290 <__assert_fail@plt+0x2464>
   13280:	mov	r4, #64	; 0x40
   13284:	udiv	r4, r4, r2
   13288:	cmp	r2, #64	; 0x40
   1328c:	addhi	r4, r4, #1
   13290:	mov	r1, r4
   13294:	bl	131f8 <__assert_fail@plt+0x23cc>
   13298:	str	r4, [r5]
   1329c:	pop	{r4, r5, r6, pc}
   132a0:	lsr	r3, r4, #1
   132a4:	add	r3, r3, #1
   132a8:	adds	r4, r4, r3
   132ac:	bcc	13290 <__assert_fail@plt+0x2464>
   132b0:	bl	1343c <__assert_fail@plt+0x2610>
   132b4:	mov	r2, #1
   132b8:	b	13264 <__assert_fail@plt+0x2438>
   132bc:	ldr	ip, [r1]
   132c0:	push	{r4, r5, r6, r7, r8, lr}
   132c4:	mov	r5, r1
   132c8:	mvn	r8, r3
   132cc:	lsr	r8, r8, #31
   132d0:	ldr	lr, [sp, #24]
   132d4:	asr	r1, ip, #1
   132d8:	adds	r4, ip, r1
   132dc:	mvnvs	r4, #-2147483648	; 0x80000000
   132e0:	cmp	r3, r4
   132e4:	movge	r1, #0
   132e8:	andlt	r1, r8, #1
   132ec:	cmp	r1, #0
   132f0:	movne	r4, r3
   132f4:	smull	r6, r7, r4, lr
   132f8:	cmp	r7, r6, asr #31
   132fc:	bne	13314 <__assert_fail@plt+0x24e8>
   13300:	cmp	r6, #63	; 0x3f
   13304:	mov	r1, r6
   13308:	bgt	13324 <__assert_fail@plt+0x24f8>
   1330c:	mov	r1, #64	; 0x40
   13310:	b	13318 <__assert_fail@plt+0x24ec>
   13314:	mvn	r1, #-2147483648	; 0x80000000
   13318:	sdiv	r4, r1, lr
   1331c:	mls	r6, lr, r4, r1
   13320:	sub	r1, r1, r6
   13324:	cmp	r0, #0
   13328:	sub	r6, r4, ip
   1332c:	streq	r0, [r5]
   13330:	cmp	r6, r2
   13334:	bge	13368 <__assert_fail@plt+0x253c>
   13338:	adds	r4, ip, r2
   1333c:	bvs	13364 <__assert_fail@plt+0x2538>
   13340:	cmp	r4, r3
   13344:	movle	r3, #0
   13348:	andgt	r3, r8, #1
   1334c:	cmp	r3, #0
   13350:	bne	13364 <__assert_fail@plt+0x2538>
   13354:	smull	r2, r3, r4, lr
   13358:	cmp	r3, r2, asr #31
   1335c:	mov	r1, r2
   13360:	beq	13368 <__assert_fail@plt+0x253c>
   13364:	bl	1343c <__assert_fail@plt+0x2610>
   13368:	bl	131b0 <__assert_fail@plt+0x2384>
   1336c:	str	r4, [r5]
   13370:	pop	{r4, r5, r6, r7, r8, pc}
   13374:	push	{r4, lr}
   13378:	bl	13824 <__assert_fail@plt+0x29f8>
   1337c:	cmp	r0, #0
   13380:	popne	{r4, pc}
   13384:	bl	1343c <__assert_fail@plt+0x2610>
   13388:	mov	r1, #1
   1338c:	b	13374 <__assert_fail@plt+0x2548>
   13390:	push	{r4, lr}
   13394:	bl	13824 <__assert_fail@plt+0x29f8>
   13398:	cmp	r0, #0
   1339c:	popne	{r4, pc}
   133a0:	bl	1343c <__assert_fail@plt+0x2610>
   133a4:	mov	r1, #1
   133a8:	b	13390 <__assert_fail@plt+0x2564>
   133ac:	push	{r4, r5, r6, lr}
   133b0:	mov	r4, r1
   133b4:	mov	r5, r0
   133b8:	mov	r0, r1
   133bc:	bl	13184 <__assert_fail@plt+0x2358>
   133c0:	mov	r2, r4
   133c4:	mov	r1, r5
   133c8:	pop	{r4, r5, r6, lr}
   133cc:	b	10c40 <memcpy@plt>
   133d0:	push	{r4, r5, r6, lr}
   133d4:	mov	r4, r1
   133d8:	mov	r5, r0
   133dc:	mov	r0, r1
   133e0:	bl	13198 <__assert_fail@plt+0x236c>
   133e4:	mov	r2, r4
   133e8:	mov	r1, r5
   133ec:	pop	{r4, r5, r6, lr}
   133f0:	b	10c40 <memcpy@plt>
   133f4:	push	{r4, r5, r6, lr}
   133f8:	mov	r5, r0
   133fc:	add	r0, r1, #1
   13400:	mov	r4, r1
   13404:	bl	13198 <__assert_fail@plt+0x236c>
   13408:	mov	r2, #0
   1340c:	mov	r1, r5
   13410:	strb	r2, [r0, r4]
   13414:	mov	r2, r4
   13418:	pop	{r4, r5, r6, lr}
   1341c:	b	10c40 <memcpy@plt>
   13420:	push	{r4, lr}
   13424:	mov	r4, r0
   13428:	bl	10d60 <strlen@plt>
   1342c:	add	r1, r0, #1
   13430:	mov	r0, r4
   13434:	pop	{r4, lr}
   13438:	b	133ac <__assert_fail@plt+0x2580>
   1343c:	ldr	r3, [pc, #44]	; 13470 <__assert_fail@plt+0x2644>
   13440:	mov	r2, #5
   13444:	mov	r0, #0
   13448:	push	{r4, lr}
   1344c:	ldr	r1, [pc, #32]	; 13474 <__assert_fail@plt+0x2648>
   13450:	ldr	r4, [r3]
   13454:	bl	10c7c <dcgettext@plt>
   13458:	mov	r3, r0
   1345c:	ldr	r2, [pc, #20]	; 13478 <__assert_fail@plt+0x264c>
   13460:	mov	r1, #0
   13464:	mov	r0, r4
   13468:	bl	10cf4 <error@plt>
   1346c:	bl	10e20 <abort@plt>
   13470:	andeq	r5, r2, r0, ror #1
   13474:	andeq	r4, r1, r9, ror #13
   13478:	ldrdeq	r4, [r1], -fp
   1347c:	subs	r2, r2, #1
   13480:	mov	r3, #0
   13484:	bcs	13490 <__assert_fail@plt+0x2664>
   13488:	mov	r0, r3
   1348c:	bx	lr
   13490:	push	{r4, r5, lr}
   13494:	ldr	ip, [r0]
   13498:	smull	r4, r5, ip, r1
   1349c:	cmp	r5, r4, asr #31
   134a0:	moveq	ip, #0
   134a4:	streq	r4, [r0]
   134a8:	beq	134c0 <__assert_fail@plt+0x2694>
   134ac:	cmp	ip, #0
   134b0:	movlt	ip, #-2147483648	; 0x80000000
   134b4:	mvnge	ip, #-2147483648	; 0x80000000
   134b8:	str	ip, [r0]
   134bc:	mov	ip, #1
   134c0:	subs	r2, r2, #1
   134c4:	orr	r3, r3, ip
   134c8:	bcs	13494 <__assert_fail@plt+0x2668>
   134cc:	mov	r0, r3
   134d0:	pop	{r4, r5, pc}
   134d4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d8:	cmp	r2, #36	; 0x24
   134dc:	ldr	r6, [sp, #48]	; 0x30
   134e0:	bls	134f8 <__assert_fail@plt+0x26cc>
   134e4:	ldr	r3, [pc, #812]	; 13818 <__assert_fail@plt+0x29ec>
   134e8:	mov	r2, #85	; 0x55
   134ec:	ldr	r1, [pc, #808]	; 1381c <__assert_fail@plt+0x29f0>
   134f0:	ldr	r0, [pc, #808]	; 13820 <__assert_fail@plt+0x29f4>
   134f4:	bl	10e2c <__assert_fail@plt>
   134f8:	cmp	r1, #0
   134fc:	mov	r7, r1
   13500:	mov	r4, r0
   13504:	moveq	r7, sp
   13508:	mov	r9, r2
   1350c:	mov	r8, r3
   13510:	bl	10d78 <__errno_location@plt>
   13514:	mov	sl, r0
   13518:	mov	r5, #0
   1351c:	mov	r2, r9
   13520:	mov	r1, r7
   13524:	mov	r0, r4
   13528:	str	r5, [sl]
   1352c:	bl	10c10 <strtol@plt>
   13530:	ldr	r9, [r7]
   13534:	str	r0, [sp, #4]
   13538:	cmp	r9, r4
   1353c:	bne	13574 <__assert_fail@plt+0x2748>
   13540:	cmp	r6, r5
   13544:	beq	1356c <__assert_fail@plt+0x2740>
   13548:	ldrb	r1, [r4]
   1354c:	cmp	r1, r5
   13550:	beq	1356c <__assert_fail@plt+0x2740>
   13554:	mov	r0, r6
   13558:	bl	10d6c <strchr@plt>
   1355c:	cmp	r0, r5
   13560:	movne	r3, #1
   13564:	strne	r3, [sp, #4]
   13568:	bne	13598 <__assert_fail@plt+0x276c>
   1356c:	mov	r5, #4
   13570:	b	135c4 <__assert_fail@plt+0x2798>
   13574:	ldr	r5, [sl]
   13578:	cmp	r5, #0
   1357c:	beq	1358c <__assert_fail@plt+0x2760>
   13580:	cmp	r5, #34	; 0x22
   13584:	bne	1356c <__assert_fail@plt+0x2740>
   13588:	mov	r5, #1
   1358c:	cmp	r6, #0
   13590:	streq	r0, [r8]
   13594:	beq	135c4 <__assert_fail@plt+0x2798>
   13598:	ldrb	r4, [r9]
   1359c:	cmp	r4, #0
   135a0:	beq	137d0 <__assert_fail@plt+0x29a4>
   135a4:	mov	r1, r4
   135a8:	mov	r0, r6
   135ac:	bl	10d6c <strchr@plt>
   135b0:	cmp	r0, #0
   135b4:	bne	135d0 <__assert_fail@plt+0x27a4>
   135b8:	ldr	r3, [sp, #4]
   135bc:	orr	r5, r5, #2
   135c0:	str	r3, [r8]
   135c4:	mov	r0, r5
   135c8:	add	sp, sp, #12
   135cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135d0:	cmp	r4, #84	; 0x54
   135d4:	beq	13628 <__assert_fail@plt+0x27fc>
   135d8:	bhi	13610 <__assert_fail@plt+0x27e4>
   135dc:	cmp	r4, #75	; 0x4b
   135e0:	beq	13628 <__assert_fail@plt+0x27fc>
   135e4:	bhi	13600 <__assert_fail@plt+0x27d4>
   135e8:	cmp	r4, #69	; 0x45
   135ec:	beq	13628 <__assert_fail@plt+0x27fc>
   135f0:	cmp	r4, #71	; 0x47
   135f4:	beq	13628 <__assert_fail@plt+0x27fc>
   135f8:	mov	r6, #1
   135fc:	b	136dc <__assert_fail@plt+0x28b0>
   13600:	cmp	r4, #77	; 0x4d
   13604:	beq	13628 <__assert_fail@plt+0x27fc>
   13608:	cmp	r4, #80	; 0x50
   1360c:	b	135f4 <__assert_fail@plt+0x27c8>
   13610:	cmp	r4, #103	; 0x67
   13614:	beq	13628 <__assert_fail@plt+0x27fc>
   13618:	bhi	136b4 <__assert_fail@plt+0x2888>
   1361c:	sub	r3, r4, #89	; 0x59
   13620:	cmp	r3, #1
   13624:	bhi	135f8 <__assert_fail@plt+0x27cc>
   13628:	mov	r1, #48	; 0x30
   1362c:	mov	r0, r6
   13630:	bl	10d6c <strchr@plt>
   13634:	cmp	r0, #0
   13638:	beq	135f8 <__assert_fail@plt+0x27cc>
   1363c:	ldrb	r3, [r9, #1]
   13640:	cmp	r3, #68	; 0x44
   13644:	moveq	r6, #2
   13648:	moveq	r1, #1000	; 0x3e8
   1364c:	beq	1366c <__assert_fail@plt+0x2840>
   13650:	cmp	r3, #105	; 0x69
   13654:	beq	136cc <__assert_fail@plt+0x28a0>
   13658:	cmp	r3, #66	; 0x42
   1365c:	moveq	r6, #2
   13660:	movne	r6, #1
   13664:	moveq	r1, #1000	; 0x3e8
   13668:	movne	r1, #1024	; 0x400
   1366c:	cmp	r4, #89	; 0x59
   13670:	beq	13808 <__assert_fail@plt+0x29dc>
   13674:	bhi	13704 <__assert_fail@plt+0x28d8>
   13678:	cmp	r4, #75	; 0x4b
   1367c:	beq	13744 <__assert_fail@plt+0x2918>
   13680:	bhi	136e4 <__assert_fail@plt+0x28b8>
   13684:	cmp	r4, #69	; 0x45
   13688:	beq	137dc <__assert_fail@plt+0x29b0>
   1368c:	cmp	r4, #71	; 0x47
   13690:	beq	137e8 <__assert_fail@plt+0x29bc>
   13694:	cmp	r4, #66	; 0x42
   13698:	bne	135b8 <__assert_fail@plt+0x278c>
   1369c:	ldr	r3, [sp, #4]
   136a0:	asr	r1, r3, #31
   136a4:	lsl	r2, r1, #10
   136a8:	lsl	r1, r3, #10
   136ac:	orr	r2, r2, r3, lsr #22
   136b0:	b	13794 <__assert_fail@plt+0x2968>
   136b4:	cmp	r4, #109	; 0x6d
   136b8:	beq	13628 <__assert_fail@plt+0x27fc>
   136bc:	cmp	r4, #116	; 0x74
   136c0:	beq	13628 <__assert_fail@plt+0x27fc>
   136c4:	cmp	r4, #107	; 0x6b
   136c8:	b	135f4 <__assert_fail@plt+0x27c8>
   136cc:	ldrb	r3, [r9, #2]
   136d0:	cmp	r3, #66	; 0x42
   136d4:	movne	r6, #1
   136d8:	moveq	r6, #3
   136dc:	mov	r1, #1024	; 0x400
   136e0:	b	1366c <__assert_fail@plt+0x2840>
   136e4:	cmp	r4, #80	; 0x50
   136e8:	beq	137f0 <__assert_fail@plt+0x29c4>
   136ec:	cmp	r4, #84	; 0x54
   136f0:	beq	137f8 <__assert_fail@plt+0x29cc>
   136f4:	cmp	r4, #77	; 0x4d
   136f8:	bne	135b8 <__assert_fail@plt+0x278c>
   136fc:	mov	r2, #2
   13700:	b	137e0 <__assert_fail@plt+0x29b4>
   13704:	cmp	r4, #103	; 0x67
   13708:	beq	137e8 <__assert_fail@plt+0x29bc>
   1370c:	bhi	13730 <__assert_fail@plt+0x2904>
   13710:	cmp	r4, #98	; 0x62
   13714:	beq	13780 <__assert_fail@plt+0x2954>
   13718:	cmp	r4, #99	; 0x63
   1371c:	beq	13810 <__assert_fail@plt+0x29e4>
   13720:	cmp	r4, #90	; 0x5a
   13724:	bne	135b8 <__assert_fail@plt+0x278c>
   13728:	mov	r2, #7
   1372c:	b	137e0 <__assert_fail@plt+0x29b4>
   13730:	cmp	r4, #109	; 0x6d
   13734:	beq	136fc <__assert_fail@plt+0x28d0>
   13738:	bhi	1374c <__assert_fail@plt+0x2920>
   1373c:	cmp	r4, #107	; 0x6b
   13740:	bne	135b8 <__assert_fail@plt+0x278c>
   13744:	mov	r2, #1
   13748:	b	137e0 <__assert_fail@plt+0x29b4>
   1374c:	cmp	r4, #116	; 0x74
   13750:	beq	137f8 <__assert_fail@plt+0x29cc>
   13754:	cmp	r4, #119	; 0x77
   13758:	bne	135b8 <__assert_fail@plt+0x278c>
   1375c:	ldr	r1, [sp, #4]
   13760:	asr	fp, r1, #31
   13764:	adds	r2, r1, r1
   13768:	adc	r3, fp, fp
   1376c:	cmp	r3, r2, asr #31
   13770:	streq	r2, [sp, #4]
   13774:	beq	13810 <__assert_fail@plt+0x29e4>
   13778:	cmp	r1, #0
   1377c:	b	137a4 <__assert_fail@plt+0x2978>
   13780:	ldr	r3, [sp, #4]
   13784:	asr	r1, r3, #31
   13788:	lsl	r2, r1, #9
   1378c:	lsl	r1, r3, #9
   13790:	orr	r2, r2, r3, lsr #23
   13794:	cmp	r2, r1, asr #31
   13798:	streq	r1, [sp, #4]
   1379c:	beq	13810 <__assert_fail@plt+0x29e4>
   137a0:	cmp	r3, #0
   137a4:	movlt	r3, #-2147483648	; 0x80000000
   137a8:	mvnge	r3, #-2147483648	; 0x80000000
   137ac:	mov	r0, #1
   137b0:	str	r3, [sp, #4]
   137b4:	ldr	r3, [r7]
   137b8:	orr	r5, r5, r0
   137bc:	add	r2, r3, r6
   137c0:	str	r2, [r7]
   137c4:	ldrb	r3, [r3, r6]
   137c8:	cmp	r3, #0
   137cc:	orrne	r5, r5, #2
   137d0:	ldr	r3, [sp, #4]
   137d4:	str	r3, [r8]
   137d8:	b	135c4 <__assert_fail@plt+0x2798>
   137dc:	mov	r2, #6
   137e0:	add	r0, sp, #4
   137e4:	b	13800 <__assert_fail@plt+0x29d4>
   137e8:	mov	r2, #3
   137ec:	b	137e0 <__assert_fail@plt+0x29b4>
   137f0:	mov	r2, #5
   137f4:	b	137e0 <__assert_fail@plt+0x29b4>
   137f8:	mov	r2, #4
   137fc:	add	r0, sp, r2
   13800:	bl	1347c <__assert_fail@plt+0x2650>
   13804:	b	137b4 <__assert_fail@plt+0x2988>
   13808:	mov	r2, #8
   1380c:	b	137e0 <__assert_fail@plt+0x29b4>
   13810:	mov	r0, #0
   13814:	b	137b4 <__assert_fail@plt+0x2988>
   13818:	strdeq	r4, [r1], -sl
   1381c:	andeq	r4, r1, r2, lsl #14
   13820:	andeq	r4, r1, r0, lsl r7
   13824:	cmp	r1, #0
   13828:	cmpne	r0, #0
   1382c:	beq	13864 <__assert_fail@plt+0x2a38>
   13830:	push	{r4, r5, r6, lr}
   13834:	umull	r4, r5, r0, r1
   13838:	adds	r3, r5, #0
   1383c:	movne	r3, #1
   13840:	cmp	r4, #0
   13844:	blt	13850 <__assert_fail@plt+0x2a24>
   13848:	cmp	r3, #0
   1384c:	beq	13870 <__assert_fail@plt+0x2a44>
   13850:	bl	10d78 <__errno_location@plt>
   13854:	mov	r3, #12
   13858:	str	r3, [r0]
   1385c:	mov	r0, #0
   13860:	pop	{r4, r5, r6, pc}
   13864:	mov	r1, #1
   13868:	mov	r0, r1
   1386c:	b	10bec <calloc@plt>
   13870:	pop	{r4, r5, r6, lr}
   13874:	b	1386c <__assert_fail@plt+0x2a40>
   13878:	cmp	r0, #0
   1387c:	beq	1389c <__assert_fail@plt+0x2a70>
   13880:	bge	138a0 <__assert_fail@plt+0x2a74>
   13884:	push	{r4, lr}
   13888:	bl	10d78 <__errno_location@plt>
   1388c:	mov	r3, #12
   13890:	str	r3, [r0]
   13894:	mov	r0, #0
   13898:	pop	{r4, pc}
   1389c:	mov	r0, #1
   138a0:	b	10d0c <malloc@plt>
   138a4:	cmp	r0, #0
   138a8:	bne	138b4 <__assert_fail@plt+0x2a88>
   138ac:	mov	r0, r1
   138b0:	b	13878 <__assert_fail@plt+0x2a4c>
   138b4:	cmp	r1, #0
   138b8:	push	{r4, lr}
   138bc:	bne	138cc <__assert_fail@plt+0x2aa0>
   138c0:	bl	13a50 <__assert_fail@plt+0x2c24>
   138c4:	mov	r0, #0
   138c8:	pop	{r4, pc}
   138cc:	blt	138d8 <__assert_fail@plt+0x2aac>
   138d0:	pop	{r4, lr}
   138d4:	b	10c88 <realloc@plt>
   138d8:	bl	10d78 <__errno_location@plt>
   138dc:	mov	r3, #12
   138e0:	str	r3, [r0]
   138e4:	b	138c4 <__assert_fail@plt+0x2a98>
   138e8:	push	{r4, r5, r6, lr}
   138ec:	mov	r4, r0
   138f0:	bl	10cd0 <__fpending@plt>
   138f4:	mov	r5, r0
   138f8:	mov	r0, r4
   138fc:	bl	10cdc <ferror_unlocked@plt>
   13900:	mov	r6, r0
   13904:	mov	r0, r4
   13908:	bl	13958 <__assert_fail@plt+0x2b2c>
   1390c:	cmp	r6, #0
   13910:	mov	r4, r0
   13914:	bne	13940 <__assert_fail@plt+0x2b14>
   13918:	cmp	r0, #0
   1391c:	beq	13938 <__assert_fail@plt+0x2b0c>
   13920:	cmp	r5, #0
   13924:	bne	13950 <__assert_fail@plt+0x2b24>
   13928:	bl	10d78 <__errno_location@plt>
   1392c:	ldr	r4, [r0]
   13930:	subs	r4, r4, #9
   13934:	mvnne	r4, #0
   13938:	mov	r0, r4
   1393c:	pop	{r4, r5, r6, pc}
   13940:	cmp	r0, #0
   13944:	bne	13950 <__assert_fail@plt+0x2b24>
   13948:	bl	10d78 <__errno_location@plt>
   1394c:	str	r4, [r0]
   13950:	mvn	r4, #0
   13954:	b	13938 <__assert_fail@plt+0x2b0c>
   13958:	push	{r0, r1, r2, r4, r5, lr}
   1395c:	mov	r4, r0
   13960:	bl	10da8 <fileno@plt>
   13964:	cmp	r0, #0
   13968:	mov	r0, r4
   1396c:	bge	1397c <__assert_fail@plt+0x2b50>
   13970:	add	sp, sp, #12
   13974:	pop	{r4, r5, lr}
   13978:	b	10dc0 <fclose@plt>
   1397c:	bl	10d24 <__freading@plt>
   13980:	cmp	r0, #0
   13984:	bne	139c0 <__assert_fail@plt+0x2b94>
   13988:	mov	r0, r4
   1398c:	bl	13a00 <__assert_fail@plt+0x2bd4>
   13990:	cmp	r0, #0
   13994:	bne	139f4 <__assert_fail@plt+0x2bc8>
   13998:	mov	r5, #0
   1399c:	mov	r0, r4
   139a0:	bl	10dc0 <fclose@plt>
   139a4:	cmp	r5, #0
   139a8:	beq	139b8 <__assert_fail@plt+0x2b8c>
   139ac:	bl	10d78 <__errno_location@plt>
   139b0:	str	r5, [r0]
   139b4:	mvn	r0, #0
   139b8:	add	sp, sp, #12
   139bc:	pop	{r4, r5, pc}
   139c0:	mov	r0, r4
   139c4:	bl	10da8 <fileno@plt>
   139c8:	mov	r3, #1
   139cc:	mov	r2, #0
   139d0:	str	r3, [sp]
   139d4:	mov	r3, #0
   139d8:	bl	10cb8 <lseek64@plt>
   139dc:	mvn	r3, #0
   139e0:	mvn	r2, #0
   139e4:	cmp	r1, r3
   139e8:	cmpeq	r0, r2
   139ec:	bne	13988 <__assert_fail@plt+0x2b5c>
   139f0:	b	13998 <__assert_fail@plt+0x2b6c>
   139f4:	bl	10d78 <__errno_location@plt>
   139f8:	ldr	r5, [r0]
   139fc:	b	1399c <__assert_fail@plt+0x2b70>
   13a00:	push	{r0, r1, r4, lr}
   13a04:	subs	r4, r0, #0
   13a08:	bne	13a1c <__assert_fail@plt+0x2bf0>
   13a0c:	mov	r0, r4
   13a10:	add	sp, sp, #8
   13a14:	pop	{r4, lr}
   13a18:	b	10c1c <fflush@plt>
   13a1c:	bl	10d24 <__freading@plt>
   13a20:	cmp	r0, #0
   13a24:	beq	13a0c <__assert_fail@plt+0x2be0>
   13a28:	ldr	r3, [r4]
   13a2c:	tst	r3, #256	; 0x100
   13a30:	beq	13a0c <__assert_fail@plt+0x2be0>
   13a34:	mov	r3, #1
   13a38:	mov	r2, #0
   13a3c:	mov	r0, r4
   13a40:	str	r3, [sp]
   13a44:	mov	r3, #0
   13a48:	bl	13aa0 <__assert_fail@plt+0x2c74>
   13a4c:	b	13a0c <__assert_fail@plt+0x2be0>
   13a50:	push	{r0, r1, r2, r4, r5, lr}
   13a54:	mov	r5, r0
   13a58:	bl	10d78 <__errno_location@plt>
   13a5c:	mov	r4, r0
   13a60:	mov	r0, r5
   13a64:	ldr	r3, [r4]
   13a68:	str	r3, [sp]
   13a6c:	str	r3, [sp, #4]
   13a70:	mov	r3, #0
   13a74:	str	r3, [r4]
   13a78:	bl	10c28 <free@plt>
   13a7c:	ldr	r3, [r4]
   13a80:	add	r2, sp, #8
   13a84:	clz	r3, r3
   13a88:	lsr	r3, r3, #5
   13a8c:	add	r3, r2, r3, lsl #2
   13a90:	ldr	r3, [r3, #-8]
   13a94:	str	r3, [r4]
   13a98:	add	sp, sp, #12
   13a9c:	pop	{r4, r5, pc}
   13aa0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13aa4:	mov	r4, r0
   13aa8:	ldmib	r0, {ip, lr}
   13aac:	ldr	r8, [sp, #32]
   13ab0:	cmp	lr, ip
   13ab4:	bne	13b24 <__assert_fail@plt+0x2cf8>
   13ab8:	ldr	ip, [r0, #16]
   13abc:	ldr	lr, [r0, #20]
   13ac0:	cmp	lr, ip
   13ac4:	bne	13b24 <__assert_fail@plt+0x2cf8>
   13ac8:	ldr	r5, [r0, #36]	; 0x24
   13acc:	cmp	r5, #0
   13ad0:	bne	13b24 <__assert_fail@plt+0x2cf8>
   13ad4:	mov	r6, r2
   13ad8:	mov	r7, r3
   13adc:	bl	10da8 <fileno@plt>
   13ae0:	mov	r2, r6
   13ae4:	mov	r3, r7
   13ae8:	str	r8, [sp]
   13aec:	bl	10cb8 <lseek64@plt>
   13af0:	mvn	r3, #0
   13af4:	mvn	r2, #0
   13af8:	cmp	r1, r3
   13afc:	cmpeq	r0, r2
   13b00:	mvneq	r0, #0
   13b04:	beq	13b1c <__assert_fail@plt+0x2cf0>
   13b08:	ldr	r3, [r4]
   13b0c:	strd	r0, [r4, #80]	; 0x50
   13b10:	mov	r0, r5
   13b14:	bic	r3, r3, #16
   13b18:	str	r3, [r4]
   13b1c:	add	sp, sp, #8
   13b20:	pop	{r4, r5, r6, r7, r8, pc}
   13b24:	mov	r0, r4
   13b28:	str	r8, [sp, #32]
   13b2c:	add	sp, sp, #8
   13b30:	pop	{r4, r5, r6, r7, r8, lr}
   13b34:	b	10dcc <fseeko64@plt>
   13b38:	b	13878 <__assert_fail@plt+0x2a4c>
   13b3c:	cmp	r1, #0
   13b40:	orreq	r1, r1, #1
   13b44:	b	138a4 <__assert_fail@plt+0x2a78>
   13b48:	b	13824 <__assert_fail@plt+0x29f8>
   13b4c:	cmp	r2, #0
   13b50:	cmpne	r1, #0
   13b54:	moveq	r2, #1
   13b58:	moveq	r1, r2
   13b5c:	b	13be4 <__assert_fail@plt+0x2db8>
   13b60:	push	{r4, lr}
   13b64:	mov	r0, #14
   13b68:	bl	10df0 <nl_langinfo@plt>
   13b6c:	cmp	r0, #0
   13b70:	beq	13b88 <__assert_fail@plt+0x2d5c>
   13b74:	ldrb	r2, [r0]
   13b78:	ldr	r3, [pc, #16]	; 13b90 <__assert_fail@plt+0x2d64>
   13b7c:	cmp	r2, #0
   13b80:	moveq	r0, r3
   13b84:	pop	{r4, pc}
   13b88:	ldr	r0, [pc]	; 13b90 <__assert_fail@plt+0x2d64>
   13b8c:	pop	{r4, pc}
   13b90:	andeq	r4, r1, r6, lsr r7
   13b94:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13b98:	subs	r5, r0, #0
   13b9c:	mov	r7, r2
   13ba0:	addeq	r5, sp, #4
   13ba4:	mov	r6, r1
   13ba8:	mov	r0, r5
   13bac:	bl	10ce8 <mbrtowc@plt>
   13bb0:	cmp	r7, #0
   13bb4:	cmnne	r0, #3
   13bb8:	mov	r4, r0
   13bbc:	bls	13bd8 <__assert_fail@plt+0x2dac>
   13bc0:	mov	r0, #0
   13bc4:	bl	13c10 <__assert_fail@plt+0x2de4>
   13bc8:	cmp	r0, #0
   13bcc:	ldrbeq	r3, [r6]
   13bd0:	moveq	r4, #1
   13bd4:	streq	r3, [r5]
   13bd8:	mov	r0, r4
   13bdc:	add	sp, sp, #12
   13be0:	pop	{r4, r5, r6, r7, pc}
   13be4:	umull	r2, r3, r1, r2
   13be8:	cmp	r3, #0
   13bec:	bne	13bf8 <__assert_fail@plt+0x2dcc>
   13bf0:	mov	r1, r2
   13bf4:	b	138a4 <__assert_fail@plt+0x2a78>
   13bf8:	push	{r4, lr}
   13bfc:	bl	10d78 <__errno_location@plt>
   13c00:	mov	r3, #12
   13c04:	str	r3, [r0]
   13c08:	mov	r0, #0
   13c0c:	pop	{r4, pc}
   13c10:	push	{lr}		; (str lr, [sp, #-4]!)
   13c14:	sub	sp, sp, #268	; 0x10c
   13c18:	movw	r2, #257	; 0x101
   13c1c:	add	r1, sp, #4
   13c20:	bl	13c6c <__assert_fail@plt+0x2e40>
   13c24:	cmp	r0, #0
   13c28:	movne	r0, #0
   13c2c:	bne	13c5c <__assert_fail@plt+0x2e30>
   13c30:	ldr	r1, [pc, #44]	; 13c64 <__assert_fail@plt+0x2e38>
   13c34:	add	r0, sp, #4
   13c38:	bl	10c04 <strcmp@plt>
   13c3c:	cmp	r0, #0
   13c40:	beq	13c58 <__assert_fail@plt+0x2e2c>
   13c44:	ldr	r1, [pc, #28]	; 13c68 <__assert_fail@plt+0x2e3c>
   13c48:	add	r0, sp, #4
   13c4c:	bl	10c04 <strcmp@plt>
   13c50:	adds	r0, r0, #0
   13c54:	movne	r0, #1
   13c58:	and	r0, r0, #1
   13c5c:	add	sp, sp, #268	; 0x10c
   13c60:	pop	{pc}		; (ldr pc, [sp], #4)
   13c64:	andeq	r4, r1, ip, lsr r7
   13c68:	andeq	r4, r1, lr, lsr r7
   13c6c:	push	{r4, r5, r6, lr}
   13c70:	mov	r5, r1
   13c74:	mov	r1, #0
   13c78:	mov	r4, r2
   13c7c:	bl	10dd8 <setlocale@plt>
   13c80:	subs	r6, r0, #0
   13c84:	bne	13c98 <__assert_fail@plt+0x2e6c>
   13c88:	cmp	r4, #0
   13c8c:	mov	r0, #22
   13c90:	strbne	r6, [r5]
   13c94:	pop	{r4, r5, r6, pc}
   13c98:	bl	10d60 <strlen@plt>
   13c9c:	cmp	r4, r0
   13ca0:	bls	13cbc <__assert_fail@plt+0x2e90>
   13ca4:	add	r2, r0, #1
   13ca8:	mov	r1, r6
   13cac:	mov	r0, r5
   13cb0:	bl	10c40 <memcpy@plt>
   13cb4:	mov	r0, #0
   13cb8:	pop	{r4, r5, r6, pc}
   13cbc:	cmp	r4, #0
   13cc0:	beq	13ce0 <__assert_fail@plt+0x2eb4>
   13cc4:	sub	r4, r4, #1
   13cc8:	mov	r1, r6
   13ccc:	mov	r2, r4
   13cd0:	mov	r0, r5
   13cd4:	bl	10c40 <memcpy@plt>
   13cd8:	mov	r3, #0
   13cdc:	strb	r3, [r5, r4]
   13ce0:	mov	r0, #34	; 0x22
   13ce4:	pop	{r4, r5, r6, pc}
   13ce8:	mov	r1, #0
   13cec:	b	10dd8 <setlocale@plt>
   13cf0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cf4:	mov	r7, r0
   13cf8:	ldr	r6, [pc, #72]	; 13d48 <__assert_fail@plt+0x2f1c>
   13cfc:	ldr	r5, [pc, #72]	; 13d4c <__assert_fail@plt+0x2f20>
   13d00:	add	r6, pc, r6
   13d04:	add	r5, pc, r5
   13d08:	sub	r6, r6, r5
   13d0c:	mov	r8, r1
   13d10:	mov	r9, r2
   13d14:	bl	10bcc <calloc@plt-0x20>
   13d18:	asrs	r6, r6, #2
   13d1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d20:	mov	r4, #0
   13d24:	add	r4, r4, #1
   13d28:	ldr	r3, [r5], #4
   13d2c:	mov	r2, r9
   13d30:	mov	r1, r8
   13d34:	mov	r0, r7
   13d38:	blx	r3
   13d3c:	cmp	r6, r4
   13d40:	bne	13d24 <__assert_fail@plt+0x2ef8>
   13d44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d48:	andeq	r1, r1, ip, lsl #4
   13d4c:	andeq	r1, r1, r4, lsl #4
   13d50:	bx	lr
   13d54:	ldr	r3, [pc, #12]	; 13d68 <__assert_fail@plt+0x2f3c>
   13d58:	mov	r1, #0
   13d5c:	add	r3, pc, r3
   13d60:	ldr	r2, [r3]
   13d64:	b	10d84 <__cxa_atexit@plt>
   13d68:	andeq	r1, r1, r4, ror r3

Disassembly of section .fini:

00013d6c <.fini>:
   13d6c:	push	{r3, lr}
   13d70:	pop	{r3, pc}
