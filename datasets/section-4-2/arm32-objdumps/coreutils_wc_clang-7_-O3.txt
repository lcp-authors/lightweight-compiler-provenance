
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011278 <.init>:
   11278:	push	{r3, lr}
   1127c:	bl	115fc <__assert_fail@plt+0x4c>
   11280:	pop	{r3, pc}

Disassembly of section .plt:

00011284 <calloc@plt-0x14>:
   11284:	push	{lr}		; (str lr, [sp, #-4]!)
   11288:	ldr	lr, [pc, #4]	; 11294 <calloc@plt-0x4>
   1128c:	add	lr, pc, lr
   11290:	ldr	pc, [lr, #8]!
   11294:	andeq	r7, r1, ip, ror #26

00011298 <calloc@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #94208	; 0x17000
   112a0:	ldr	pc, [ip, #3436]!	; 0xd6c

000112a4 <fputs_unlocked@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #94208	; 0x17000
   112ac:	ldr	pc, [ip, #3428]!	; 0xd64

000112b0 <raise@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #94208	; 0x17000
   112b8:	ldr	pc, [ip, #3420]!	; 0xd5c

000112bc <strcmp@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #94208	; 0x17000
   112c4:	ldr	pc, [ip, #3412]!	; 0xd54

000112c8 <posix_fadvise64@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #94208	; 0x17000
   112d0:	ldr	pc, [ip, #3404]!	; 0xd4c

000112d4 <read@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #94208	; 0x17000
   112dc:	ldr	pc, [ip, #3396]!	; 0xd44

000112e0 <fflush@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #94208	; 0x17000
   112e8:	ldr	pc, [ip, #3388]!	; 0xd3c

000112ec <wcwidth@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #94208	; 0x17000
   112f4:	ldr	pc, [ip, #3380]!	; 0xd34

000112f8 <memmove@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #94208	; 0x17000
   11300:	ldr	pc, [ip, #3372]!	; 0xd2c

00011304 <free@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #94208	; 0x17000
   1130c:	ldr	pc, [ip, #3364]!	; 0xd24

00011310 <ferror@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #94208	; 0x17000
   11318:	ldr	pc, [ip, #3356]!	; 0xd1c

0001131c <_exit@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #94208	; 0x17000
   11324:	ldr	pc, [ip, #3348]!	; 0xd14

00011328 <memcpy@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #94208	; 0x17000
   11330:	ldr	pc, [ip, #3340]!	; 0xd0c

00011334 <mbsinit@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #94208	; 0x17000
   1133c:	ldr	pc, [ip, #3332]!	; 0xd04

00011340 <memcmp@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #94208	; 0x17000
   11348:	ldr	pc, [ip, #3324]!	; 0xcfc

0001134c <dcgettext@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #94208	; 0x17000
   11354:	ldr	pc, [ip, #3316]!	; 0xcf4

00011358 <sysconf@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #94208	; 0x17000
   11360:	ldr	pc, [ip, #3308]!	; 0xcec

00011364 <realloc@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #94208	; 0x17000
   1136c:	ldr	pc, [ip, #3300]!	; 0xce4

00011370 <textdomain@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #94208	; 0x17000
   11378:	ldr	pc, [ip, #3292]!	; 0xcdc

0001137c <iswcntrl@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #94208	; 0x17000
   11384:	ldr	pc, [ip, #3284]!	; 0xcd4

00011388 <rawmemchr@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #94208	; 0x17000
   11390:	ldr	pc, [ip, #3276]!	; 0xccc

00011394 <iswprint@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #94208	; 0x17000
   1139c:	ldr	pc, [ip, #3268]!	; 0xcc4

000113a0 <__fxstat64@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #94208	; 0x17000
   113a8:	ldr	pc, [ip, #3260]!	; 0xcbc

000113ac <fwrite@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #94208	; 0x17000
   113b4:	ldr	pc, [ip, #3252]!	; 0xcb4

000113b8 <lseek64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #94208	; 0x17000
   113c0:	ldr	pc, [ip, #3244]!	; 0xcac

000113c4 <__ctype_get_mb_cur_max@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #94208	; 0x17000
   113cc:	ldr	pc, [ip, #3236]!	; 0xca4

000113d0 <__fpending@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #94208	; 0x17000
   113d8:	ldr	pc, [ip, #3228]!	; 0xc9c

000113dc <mbrtowc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #94208	; 0x17000
   113e4:	ldr	pc, [ip, #3220]!	; 0xc94

000113e8 <error@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #94208	; 0x17000
   113f0:	ldr	pc, [ip, #3212]!	; 0xc8c

000113f4 <open64@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #94208	; 0x17000
   113fc:	ldr	pc, [ip, #3204]!	; 0xc84

00011400 <getenv@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #94208	; 0x17000
   11408:	ldr	pc, [ip, #3196]!	; 0xc7c

0001140c <sysinfo@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #94208	; 0x17000
   11414:	ldr	pc, [ip, #3188]!	; 0xc74

00011418 <malloc@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #94208	; 0x17000
   11420:	ldr	pc, [ip, #3180]!	; 0xc6c

00011424 <__libc_start_main@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #94208	; 0x17000
   1142c:	ldr	pc, [ip, #3172]!	; 0xc64

00011430 <__freading@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #94208	; 0x17000
   11438:	ldr	pc, [ip, #3164]!	; 0xc5c

0001143c <__gmon_start__@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #94208	; 0x17000
   11444:	ldr	pc, [ip, #3156]!	; 0xc54

00011448 <getopt_long@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #94208	; 0x17000
   11450:	ldr	pc, [ip, #3148]!	; 0xc4c

00011454 <__ctype_b_loc@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #94208	; 0x17000
   1145c:	ldr	pc, [ip, #3140]!	; 0xc44

00011460 <exit@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #94208	; 0x17000
   11468:	ldr	pc, [ip, #3132]!	; 0xc3c

0001146c <feof@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #94208	; 0x17000
   11474:	ldr	pc, [ip, #3124]!	; 0xc34

00011478 <iswspace@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #94208	; 0x17000
   11480:	ldr	pc, [ip, #3116]!	; 0xc2c

00011484 <strlen@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #94208	; 0x17000
   1148c:	ldr	pc, [ip, #3108]!	; 0xc24

00011490 <strchr@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #94208	; 0x17000
   11498:	ldr	pc, [ip, #3100]!	; 0xc1c

0001149c <getpagesize@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #94208	; 0x17000
   114a4:	ldr	pc, [ip, #3092]!	; 0xc14

000114a8 <__errno_location@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #94208	; 0x17000
   114b0:	ldr	pc, [ip, #3084]!	; 0xc0c

000114b4 <__cxa_atexit@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #94208	; 0x17000
   114bc:	ldr	pc, [ip, #3076]!	; 0xc04

000114c0 <setvbuf@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #94208	; 0x17000
   114c8:	ldr	pc, [ip, #3068]!	; 0xbfc

000114cc <memset@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #94208	; 0x17000
   114d4:	ldr	pc, [ip, #3060]!	; 0xbf4

000114d8 <btowc@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #94208	; 0x17000
   114e0:	ldr	pc, [ip, #3052]!	; 0xbec

000114e4 <fgetc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #94208	; 0x17000
   114ec:	ldr	pc, [ip, #3044]!	; 0xbe4

000114f0 <__printf_chk@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #94208	; 0x17000
   114f8:	ldr	pc, [ip, #3036]!	; 0xbdc

000114fc <fileno@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #94208	; 0x17000
   11504:	ldr	pc, [ip, #3028]!	; 0xbd4

00011508 <__fprintf_chk@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #94208	; 0x17000
   11510:	ldr	pc, [ip, #3020]!	; 0xbcc

00011514 <fclose@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #94208	; 0x17000
   1151c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011520 <fseeko64@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #94208	; 0x17000
   11528:	ldr	pc, [ip, #3004]!	; 0xbbc

0001152c <__overflow@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #94208	; 0x17000
   11534:	ldr	pc, [ip, #2996]!	; 0xbb4

00011538 <setlocale@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #94208	; 0x17000
   11540:	ldr	pc, [ip, #2988]!	; 0xbac

00011544 <strrchr@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #94208	; 0x17000
   1154c:	ldr	pc, [ip, #2980]!	; 0xba4

00011550 <nl_langinfo@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #94208	; 0x17000
   11558:	ldr	pc, [ip, #2972]!	; 0xb9c

0001155c <fopen64@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #94208	; 0x17000
   11564:	ldr	pc, [ip, #2964]!	; 0xb94

00011568 <bindtextdomain@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #94208	; 0x17000
   11570:	ldr	pc, [ip, #2956]!	; 0xb8c

00011574 <getdelim@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #94208	; 0x17000
   1157c:	ldr	pc, [ip, #2948]!	; 0xb84

00011580 <__xstat64@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #94208	; 0x17000
   11588:	ldr	pc, [ip, #2940]!	; 0xb7c

0001158c <strncmp@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #94208	; 0x17000
   11594:	ldr	pc, [ip, #2932]!	; 0xb74

00011598 <abort@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #94208	; 0x17000
   115a0:	ldr	pc, [ip, #2924]!	; 0xb6c

000115a4 <close@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #94208	; 0x17000
   115ac:	ldr	pc, [ip, #2916]!	; 0xb64

000115b0 <__assert_fail@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #94208	; 0x17000
   115b8:	ldr	pc, [ip, #2908]!	; 0xb5c

Disassembly of section .text:

000115c0 <_obstack_begin@@Base-0x5944>:
   115c0:	mov	fp, #0
   115c4:	mov	lr, #0
   115c8:	pop	{r1}		; (ldr r1, [sp], #4)
   115cc:	mov	r2, sp
   115d0:	push	{r2}		; (str r2, [sp, #-4]!)
   115d4:	push	{r0}		; (str r0, [sp, #-4]!)
   115d8:	ldr	ip, [pc, #16]	; 115f0 <__assert_fail@plt+0x40>
   115dc:	push	{ip}		; (str ip, [sp, #-4]!)
   115e0:	ldr	r0, [pc, #12]	; 115f4 <__assert_fail@plt+0x44>
   115e4:	ldr	r3, [pc, #12]	; 115f8 <__assert_fail@plt+0x48>
   115e8:	bl	11424 <__libc_start_main@plt>
   115ec:	bl	11598 <abort@plt>
   115f0:	andeq	r7, r1, r0, lsl #19
   115f4:	andeq	r1, r1, r0, asr r9
   115f8:	andeq	r7, r1, r0, lsr #18
   115fc:	ldr	r3, [pc, #20]	; 11618 <__assert_fail@plt+0x68>
   11600:	ldr	r2, [pc, #20]	; 1161c <__assert_fail@plt+0x6c>
   11604:	add	r3, pc, r3
   11608:	ldr	r2, [r3, r2]
   1160c:	cmp	r2, #0
   11610:	bxeq	lr
   11614:	b	1143c <__gmon_start__@plt>
   11618:	strdeq	r7, [r1], -r4
   1161c:	andeq	r0, r0, r8, lsl r1
   11620:	ldr	r0, [pc, #24]	; 11640 <__assert_fail@plt+0x90>
   11624:	ldr	r3, [pc, #24]	; 11644 <__assert_fail@plt+0x94>
   11628:	cmp	r3, r0
   1162c:	bxeq	lr
   11630:	ldr	r3, [pc, #16]	; 11648 <__assert_fail@plt+0x98>
   11634:	cmp	r3, #0
   11638:	bxeq	lr
   1163c:	bx	r3
   11640:	andeq	r9, r2, r4, ror r1
   11644:	andeq	r9, r2, r4, ror r1
   11648:	andeq	r0, r0, r0
   1164c:	ldr	r0, [pc, #36]	; 11678 <__assert_fail@plt+0xc8>
   11650:	ldr	r1, [pc, #36]	; 1167c <__assert_fail@plt+0xcc>
   11654:	sub	r1, r1, r0
   11658:	asr	r1, r1, #2
   1165c:	add	r1, r1, r1, lsr #31
   11660:	asrs	r1, r1, #1
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0xd0>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	r9, r2, r4, ror r1
   1167c:	andeq	r9, r2, r4, ror r1
   11680:	andeq	r0, r0, r0
   11684:	push	{r4, lr}
   11688:	ldr	r4, [pc, #24]	; 116a8 <__assert_fail@plt+0xf8>
   1168c:	ldrb	r3, [r4]
   11690:	cmp	r3, #0
   11694:	popne	{r4, pc}
   11698:	bl	11620 <__assert_fail@plt+0x70>
   1169c:	mov	r3, #1
   116a0:	strb	r3, [r4]
   116a4:	pop	{r4, pc}
   116a8:	muleq	r2, ip, r1
   116ac:	b	1164c <__assert_fail@plt+0x9c>
   116b0:	push	{fp, lr}
   116b4:	mov	fp, sp
   116b8:	sub	sp, sp, #56	; 0x38
   116bc:	mov	r4, r0
   116c0:	cmp	r0, #0
   116c4:	bne	11908 <__assert_fail@plt+0x358>
   116c8:	movw	r1, #31187	; 0x79d3
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	1134c <dcgettext@plt>
   116dc:	mov	r1, r0
   116e0:	movw	r0, #37352	; 0x91e8
   116e4:	movt	r0, #2
   116e8:	ldr	r2, [r0]
   116ec:	mov	r0, #1
   116f0:	mov	r3, r2
   116f4:	bl	114f0 <__printf_chk@plt>
   116f8:	movw	r1, #31258	; 0x7a1a
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	1134c <dcgettext@plt>
   1170c:	movw	r7, #37268	; 0x9194
   11710:	movt	r7, #2
   11714:	ldr	r1, [r7]
   11718:	bl	112a4 <fputs_unlocked@plt>
   1171c:	movw	r1, #32567	; 0x7f37
   11720:	mov	r0, #0
   11724:	mov	r2, #5
   11728:	movt	r1, #1
   1172c:	bl	1134c <dcgettext@plt>
   11730:	ldr	r1, [r7]
   11734:	bl	112a4 <fputs_unlocked@plt>
   11738:	movw	r1, #31452	; 0x7adc
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #1
   11748:	bl	1134c <dcgettext@plt>
   1174c:	ldr	r1, [r7]
   11750:	bl	112a4 <fputs_unlocked@plt>
   11754:	movw	r1, #31753	; 0x7c09
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	movt	r1, #1
   11764:	bl	1134c <dcgettext@plt>
   11768:	ldr	r1, [r7]
   1176c:	bl	112a4 <fputs_unlocked@plt>
   11770:	movw	r1, #32054	; 0x7d36
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	movt	r1, #1
   11780:	bl	1134c <dcgettext@plt>
   11784:	ldr	r1, [r7]
   11788:	bl	112a4 <fputs_unlocked@plt>
   1178c:	movw	r1, #32099	; 0x7d63
   11790:	mov	r0, #0
   11794:	mov	r2, #5
   11798:	movt	r1, #1
   1179c:	bl	1134c <dcgettext@plt>
   117a0:	ldr	r1, [r7]
   117a4:	bl	112a4 <fputs_unlocked@plt>
   117a8:	movw	r0, #33168	; 0x8190
   117ac:	mov	r2, #48	; 0x30
   117b0:	mov	r6, sp
   117b4:	movw	r5, #32153	; 0x7d99
   117b8:	movt	r0, #1
   117bc:	movt	r5, #1
   117c0:	add	r1, r0, #32
   117c4:	add	r3, r0, #16
   117c8:	vld1.64	{d18-d19}, [r0], r2
   117cc:	vld1.64	{d16-d17}, [r1]
   117d0:	vld1.64	{d20-d21}, [r3]
   117d4:	add	r1, r6, #32
   117d8:	vldr	d22, [r0]
   117dc:	add	r0, r6, #16
   117e0:	vst1.64	{d16-d17}, [r1]
   117e4:	movw	r1, #32623	; 0x7f6f
   117e8:	vst1.64	{d20-d21}, [r0]
   117ec:	mov	r0, r6
   117f0:	vst1.64	{d18-d19}, [r0], r2
   117f4:	movt	r1, #1
   117f8:	vstr	d22, [r0]
   117fc:	mov	r0, r5
   11800:	bl	112bc <strcmp@plt>
   11804:	cmp	r0, #0
   11808:	ldrne	r1, [r6, #8]!
   1180c:	cmpne	r1, #0
   11810:	bne	117fc <__assert_fail@plt+0x24c>
   11814:	ldr	r6, [r6, #4]
   11818:	movw	r1, #32718	; 0x7fce
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #1
   11828:	bl	1134c <dcgettext@plt>
   1182c:	movw	r2, #32202	; 0x7dca
   11830:	movw	r3, #32741	; 0x7fe5
   11834:	mov	r1, r0
   11838:	mov	r0, #1
   1183c:	movt	r2, #1
   11840:	movt	r3, #1
   11844:	bl	114f0 <__printf_chk@plt>
   11848:	cmp	r6, #0
   1184c:	mov	r0, #5
   11850:	mov	r1, #0
   11854:	moveq	r6, r5
   11858:	bl	11538 <setlocale@plt>
   1185c:	cmp	r0, #0
   11860:	beq	11898 <__assert_fail@plt+0x2e8>
   11864:	movw	r1, #32781	; 0x800d
   11868:	mov	r2, #3
   1186c:	movt	r1, #1
   11870:	bl	1158c <strncmp@plt>
   11874:	cmp	r0, #0
   11878:	beq	11898 <__assert_fail@plt+0x2e8>
   1187c:	movw	r1, #32785	; 0x8011
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	movt	r1, #1
   1188c:	bl	1134c <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	112a4 <fputs_unlocked@plt>
   11898:	movw	r1, #32856	; 0x8058
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #1
   118a8:	bl	1134c <dcgettext@plt>
   118ac:	movw	r2, #32741	; 0x7fe5
   118b0:	mov	r1, r0
   118b4:	mov	r0, #1
   118b8:	mov	r3, r5
   118bc:	movt	r2, #1
   118c0:	bl	114f0 <__printf_chk@plt>
   118c4:	movw	r1, #32883	; 0x8073
   118c8:	mov	r0, #0
   118cc:	mov	r2, #5
   118d0:	movt	r1, #1
   118d4:	bl	1134c <dcgettext@plt>
   118d8:	movw	r3, #32933	; 0x80a5
   118dc:	mov	r1, r0
   118e0:	movw	r0, #32651	; 0x7f8b
   118e4:	cmp	r6, r5
   118e8:	mov	r2, r6
   118ec:	movt	r0, #1
   118f0:	movt	r3, #1
   118f4:	moveq	r3, r0
   118f8:	mov	r0, #1
   118fc:	bl	114f0 <__printf_chk@plt>
   11900:	mov	r0, r4
   11904:	bl	11460 <exit@plt>
   11908:	movw	r0, #37256	; 0x9188
   1190c:	movw	r1, #31148	; 0x79ac
   11910:	mov	r2, #5
   11914:	movt	r0, #2
   11918:	movt	r1, #1
   1191c:	ldr	r5, [r0]
   11920:	mov	r0, #0
   11924:	bl	1134c <dcgettext@plt>
   11928:	mov	r2, r0
   1192c:	movw	r0, #37352	; 0x91e8
   11930:	mov	r1, #1
   11934:	movt	r0, #2
   11938:	ldr	r3, [r0]
   1193c:	mov	r0, r5
   11940:	bl	11508 <__fprintf_chk@plt>
   11944:	mov	r0, r4
   11948:	bl	11460 <exit@plt>
   1194c:	nop	{0}
   11950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11954:	add	fp, sp, #28
   11958:	sub	sp, sp, #4
   1195c:	vpush	{d8-d10}
   11960:	sub	sp, sp, #312	; 0x138
   11964:	mov	r6, r0
   11968:	ldr	r0, [r1]
   1196c:	mov	r5, r1
   11970:	bl	13d70 <__assert_fail@plt+0x27c0>
   11974:	movw	r1, #32933	; 0x80a5
   11978:	mov	r0, #6
   1197c:	movt	r1, #1
   11980:	bl	11538 <setlocale@plt>
   11984:	movw	r4, #32206	; 0x7dce
   11988:	movw	r1, #32156	; 0x7d9c
   1198c:	movt	r4, #1
   11990:	movt	r1, #1
   11994:	mov	r0, r4
   11998:	bl	11568 <bindtextdomain@plt>
   1199c:	mov	r0, r4
   119a0:	bl	11370 <textdomain@plt>
   119a4:	movw	r0, #14200	; 0x3778
   119a8:	movt	r0, #1
   119ac:	bl	17984 <_obstack_memory_used@@Base+0x6f0>
   119b0:	bl	1149c <getpagesize@plt>
   119b4:	movw	r7, #37280	; 0x91a0
   119b8:	mov	r1, #0
   119bc:	mov	r2, #1
   119c0:	mov	r3, #0
   119c4:	mov	r4, #0
   119c8:	movt	r7, #2
   119cc:	str	r0, [r7, #8]
   119d0:	movw	r0, #37268	; 0x9194
   119d4:	movt	r0, #2
   119d8:	ldr	r0, [r0]
   119dc:	bl	114c0 <setvbuf@plt>
   119e0:	movw	r0, #32180	; 0x7db4
   119e4:	movt	r0, #1
   119e8:	bl	11400 <getenv@plt>
   119ec:	cmp	r0, #0
   119f0:	str	r4, [r7, #24]
   119f4:	str	r4, [r7, #28]
   119f8:	str	r4, [r7, #32]
   119fc:	str	r4, [r7, #36]	; 0x24
   11a00:	str	r4, [r7, #40]	; 0x28
   11a04:	str	r4, [r7, #44]	; 0x2c
   11a08:	str	r4, [r7, #48]	; 0x30
   11a0c:	str	r4, [r7, #52]	; 0x34
   11a10:	str	r4, [r7, #56]	; 0x38
   11a14:	str	r4, [r7, #60]	; 0x3c
   11a18:	str	r4, [r7, #1]
   11a1c:	strb	r4, [r7, #5]
   11a20:	movw	sl, #32196	; 0x7dc4
   11a24:	movw	r8, #33008	; 0x80f0
   11a28:	add	r9, r7, #1
   11a2c:	movwne	r0, #1
   11a30:	movt	sl, #1
   11a34:	movt	r8, #1
   11a38:	strb	r0, [r7]
   11a3c:	add	r0, r7, #5
   11a40:	str	r0, [sp, #52]	; 0x34
   11a44:	add	r0, r7, #4
   11a48:	str	r0, [sp, #48]	; 0x30
   11a4c:	add	r0, r7, #2
   11a50:	add	r7, r7, #3
   11a54:	str	r0, [sp, #40]	; 0x28
   11a58:	mov	r0, #0
   11a5c:	b	11a74 <__assert_fail@plt+0x4c4>
   11a60:	andeq	r0, r0, r0
   11a64:	cmnmi	r4, r0
   11a68:	movw	r0, #37272	; 0x9198
   11a6c:	movt	r0, #2
   11a70:	ldr	r0, [r0]
   11a74:	str	r0, [sp, #44]	; 0x2c
   11a78:	b	11a84 <__assert_fail@plt+0x4d4>
   11a7c:	mov	r1, #1
   11a80:	strb	r1, [r0]
   11a84:	mov	r0, r6
   11a88:	mov	r1, r5
   11a8c:	mov	r2, sl
   11a90:	mov	r3, r8
   11a94:	str	r4, [sp]
   11a98:	bl	11448 <getopt_long@plt>
   11a9c:	cmp	r0, #75	; 0x4b
   11aa0:	ble	11ba8 <__assert_fail@plt+0x5f8>
   11aa4:	sub	r1, r0, #76	; 0x4c
   11aa8:	cmp	r1, #43	; 0x2b
   11aac:	bhi	11b74 <__assert_fail@plt+0x5c4>
   11ab0:	add	r2, pc, #4
   11ab4:	mov	r0, r9
   11ab8:	ldr	pc, [r2, r1, lsl #2]
   11abc:	andeq	r1, r1, ip, ror #22
   11ac0:	andeq	r2, r1, r4, ror #8
   11ac4:	andeq	r2, r1, r4, ror #8
   11ac8:	andeq	r2, r1, r4, ror #8
   11acc:	andeq	r2, r1, r4, ror #8
   11ad0:	andeq	r2, r1, r4, ror #8
   11ad4:	andeq	r2, r1, r4, ror #8
   11ad8:	andeq	r2, r1, r4, ror #8
   11adc:	andeq	r2, r1, r4, ror #8
   11ae0:	andeq	r2, r1, r4, ror #8
   11ae4:	andeq	r2, r1, r4, ror #8
   11ae8:	andeq	r2, r1, r4, ror #8
   11aec:	andeq	r2, r1, r4, ror #8
   11af0:	andeq	r2, r1, r4, ror #8
   11af4:	andeq	r2, r1, r4, ror #8
   11af8:	andeq	r2, r1, r4, ror #8
   11afc:	andeq	r2, r1, r4, ror #8
   11b00:	andeq	r2, r1, r4, ror #8
   11b04:	andeq	r2, r1, r4, ror #8
   11b08:	andeq	r2, r1, r4, ror #8
   11b0c:	andeq	r2, r1, r4, ror #8
   11b10:	andeq	r2, r1, r4, ror #8
   11b14:	andeq	r2, r1, r4, ror #8
   11b18:	andeq	r1, r1, ip, ror sl
   11b1c:	andeq	r2, r1, r4, ror #8
   11b20:	andeq	r2, r1, r4, ror #8
   11b24:	andeq	r2, r1, r4, ror #8
   11b28:	andeq	r2, r1, r4, ror #8
   11b2c:	andeq	r2, r1, r4, ror #8
   11b30:	andeq	r2, r1, r4, ror #8
   11b34:	andeq	r2, r1, r4, ror #8
   11b38:	andeq	r2, r1, r4, ror #8
   11b3c:	andeq	r1, r1, r8, lsl #23
   11b40:	andeq	r1, r1, r0, lsl #23
   11b44:	andeq	r2, r1, r4, ror #8
   11b48:	andeq	r2, r1, r4, ror #8
   11b4c:	andeq	r2, r1, r4, ror #8
   11b50:	andeq	r2, r1, r4, ror #8
   11b54:	andeq	r2, r1, r4, ror #8
   11b58:	andeq	r2, r1, r4, ror #8
   11b5c:	andeq	r2, r1, r4, ror #8
   11b60:	andeq	r2, r1, r4, ror #8
   11b64:	andeq	r2, r1, r4, ror #8
   11b68:	muleq	r1, r0, fp
   11b6c:	ldr	r0, [sp, #52]	; 0x34
   11b70:	b	11a7c <__assert_fail@plt+0x4cc>
   11b74:	cmp	r0, #256	; 0x100
   11b78:	beq	11a84 <__assert_fail@plt+0x4d4>
   11b7c:	b	11b98 <__assert_fail@plt+0x5e8>
   11b80:	ldr	r0, [sp, #40]	; 0x28
   11b84:	b	11a7c <__assert_fail@plt+0x4cc>
   11b88:	ldr	r0, [sp, #48]	; 0x30
   11b8c:	b	11a7c <__assert_fail@plt+0x4cc>
   11b90:	mov	r0, r7
   11b94:	b	11a7c <__assert_fail@plt+0x4cc>
   11b98:	movw	r1, #257	; 0x101
   11b9c:	cmp	r0, r1
   11ba0:	beq	11a68 <__assert_fail@plt+0x4b8>
   11ba4:	b	12464 <__assert_fail@plt+0xeb4>
   11ba8:	cmn	r0, #1
   11bac:	bne	123ec <__assert_fail@plt+0xe3c>
   11bb0:	movw	sl, #37280	; 0x91a0
   11bb4:	movt	sl, #2
   11bb8:	ldrb	r0, [sl, #4]
   11bbc:	cmp	r0, #0
   11bc0:	ldrbeq	r0, [sl, #3]
   11bc4:	cmpeq	r0, #0
   11bc8:	beq	12324 <__assert_fail@plt+0xd74>
   11bcc:	movw	r7, #37248	; 0x9180
   11bd0:	ldr	r1, [sp, #44]	; 0x2c
   11bd4:	movt	r7, #2
   11bd8:	ldr	r0, [r7]
   11bdc:	cmp	r1, #0
   11be0:	beq	11c64 <__assert_fail@plt+0x6b4>
   11be4:	cmp	r0, r6
   11be8:	blt	1248c <__assert_fail@plt+0xedc>
   11bec:	ldr	r6, [sp, #44]	; 0x2c
   11bf0:	movw	r1, #33362	; 0x8252
   11bf4:	movt	r1, #1
   11bf8:	mov	r0, r6
   11bfc:	bl	112bc <strcmp@plt>
   11c00:	cmp	r0, #0
   11c04:	beq	11c8c <__assert_fail@plt+0x6dc>
   11c08:	movw	r1, #32383	; 0x7e7f
   11c0c:	mov	r0, r6
   11c10:	movt	r1, #1
   11c14:	bl	1155c <fopen64@plt>
   11c18:	mov	r5, r0
   11c1c:	cmp	r0, #0
   11c20:	bne	11c98 <__assert_fail@plt+0x6e8>
   11c24:	bl	114a8 <__errno_location@plt>
   11c28:	ldr	r4, [r0]
   11c2c:	movw	r1, #32312	; 0x7e38
   11c30:	mov	r0, #0
   11c34:	mov	r2, #5
   11c38:	movt	r1, #1
   11c3c:	bl	1134c <dcgettext@plt>
   11c40:	mov	r5, r0
   11c44:	mov	r0, #4
   11c48:	mov	r1, r6
   11c4c:	bl	157c4 <__assert_fail@plt+0x4214>
   11c50:	mov	r3, r0
   11c54:	mov	r0, #1
   11c58:	mov	r1, r4
   11c5c:	mov	r2, r5
   11c60:	bl	113e8 <error@plt>
   11c64:	subs	r9, r6, r0
   11c68:	add	r7, sl, #12
   11c6c:	addgt	r7, r5, r0, lsl #2
   11c70:	movle	r9, #1
   11c74:	mov	r0, r7
   11c78:	bl	135e8 <__assert_fail@plt+0x2038>
   11c7c:	mov	r4, #0
   11c80:	cmp	r0, #0
   11c84:	bne	11d24 <__assert_fail@plt+0x774>
   11c88:	b	12460 <__assert_fail@plt+0xeb0>
   11c8c:	movw	r0, #37264	; 0x9190
   11c90:	movt	r0, #2
   11c94:	ldr	r5, [r0]
   11c98:	mov	r0, r5
   11c9c:	bl	114fc <fileno@plt>
   11ca0:	mov	r1, r0
   11ca4:	add	r2, sp, #56	; 0x38
   11ca8:	mov	r0, #3
   11cac:	bl	113a0 <__fxstat64@plt>
   11cb0:	cmp	r0, #0
   11cb4:	bne	11d08 <__assert_fail@plt+0x758>
   11cb8:	ldr	r0, [sp, #72]	; 0x48
   11cbc:	and	r0, r0, #61440	; 0xf000
   11cc0:	cmp	r0, #32768	; 0x8000
   11cc4:	bne	11d08 <__assert_fail@plt+0x758>
   11cc8:	ldr	r0, [sp, #104]	; 0x68
   11ccc:	ldr	r1, [sp, #108]	; 0x6c
   11cd0:	bl	1774c <_obstack_memory_used@@Base+0x4b8>
   11cd4:	vldr	d9, [pc, #-636]	; 11a60 <__assert_fail@plt+0x4b0>
   11cd8:	vmov	d8, r0, r1
   11cdc:	bl	13c68 <__assert_fail@plt+0x26b8>
   11ce0:	vmov.f64	d10, #96	; 0x3f000000  0.5
   11ce4:	vmul.f64	d16, d0, d10
   11ce8:	vcmpe.f64	d16, d9
   11cec:	vmrs	APSR_nzcv, fpscr
   11cf0:	bgt	11cfc <__assert_fail@plt+0x74c>
   11cf4:	bl	13c68 <__assert_fail@plt+0x26b8>
   11cf8:	vmul.f64	d9, d0, d10
   11cfc:	vcmpe.f64	d9, d8
   11d00:	vmrs	APSR_nzcv, fpscr
   11d04:	bge	1239c <__assert_fail@plt+0xdec>
   11d08:	mov	r0, r5
   11d0c:	bl	1361c <__assert_fail@plt+0x206c>
   11d10:	mov	r7, #0
   11d14:	mov	r9, #0
   11d18:	mov	r4, #0
   11d1c:	cmp	r0, #0
   11d20:	beq	12460 <__assert_fail@plt+0xeb0>
   11d24:	str	r0, [sp, #48]	; 0x30
   11d28:	cmp	r9, #0
   11d2c:	mov	r0, r9
   11d30:	mov	r1, #112	; 0x70
   11d34:	movweq	r0, #1
   11d38:	bl	16838 <__assert_fail@plt+0x5288>
   11d3c:	cmp	r9, #0
   11d40:	str	r0, [sp, #52]	; 0x34
   11d44:	str	r4, [sp, #40]	; 0x28
   11d48:	beq	11d80 <__assert_fail@plt+0x7d0>
   11d4c:	cmp	r9, #1
   11d50:	bne	11da0 <__assert_fail@plt+0x7f0>
   11d54:	ldrb	r2, [sl, #3]
   11d58:	ldrb	r3, [sl, #4]
   11d5c:	ldrb	r1, [sl, #2]
   11d60:	ldrb	r0, [sl, #1]
   11d64:	add	r2, r2, r3
   11d68:	add	r1, r2, r1
   11d6c:	add	r0, r1, r0
   11d70:	ldrb	r1, [sl, #5]
   11d74:	add	r0, r0, r1
   11d78:	cmp	r0, #1
   11d7c:	bne	11da0 <__assert_fail@plt+0x7f0>
   11d80:	ldr	r1, [sp, #52]	; 0x34
   11d84:	mov	r0, #1
   11d88:	str	r0, [r1]
   11d8c:	mov	r4, #1
   11d90:	cmp	r9, #0
   11d94:	mov	r5, #1
   11d98:	bne	11e1c <__assert_fail@plt+0x86c>
   11d9c:	b	11ee4 <__assert_fail@plt+0x934>
   11da0:	ldr	r0, [sp, #52]	; 0x34
   11da4:	movw	r8, #33362	; 0x8252
   11da8:	mov	r5, r9
   11dac:	movt	r8, #1
   11db0:	add	r6, r0, #8
   11db4:	ldr	r4, [r7]
   11db8:	cmp	r4, #0
   11dbc:	beq	11de8 <__assert_fail@plt+0x838>
   11dc0:	mov	r0, r4
   11dc4:	mov	r1, r8
   11dc8:	bl	112bc <strcmp@plt>
   11dcc:	cmp	r0, #0
   11dd0:	beq	11de8 <__assert_fail@plt+0x838>
   11dd4:	mov	r0, #3
   11dd8:	mov	r1, r4
   11ddc:	mov	r2, r6
   11de0:	bl	11580 <__xstat64@plt>
   11de4:	b	11df8 <__assert_fail@plt+0x848>
   11de8:	mov	r0, #3
   11dec:	mov	r1, #0
   11df0:	mov	r2, r6
   11df4:	bl	113a0 <__fxstat64@plt>
   11df8:	str	r0, [r6, #-8]
   11dfc:	add	r7, r7, #4
   11e00:	subs	r5, r5, #1
   11e04:	add	r6, r6, #112	; 0x70
   11e08:	bne	11db4 <__assert_fail@plt+0x804>
   11e0c:	mov	r4, #1
   11e10:	cmp	r9, #0
   11e14:	mov	r5, #1
   11e18:	beq	11ee4 <__assert_fail@plt+0x934>
   11e1c:	ldr	r0, [sp, #52]	; 0x34
   11e20:	mov	r5, #1
   11e24:	ldr	r2, [r0]
   11e28:	cmp	r2, #0
   11e2c:	bgt	11ee4 <__assert_fail@plt+0x934>
   11e30:	ldr	r1, [sp, #52]	; 0x34
   11e34:	sub	r0, r9, #1
   11e38:	mov	r7, #0
   11e3c:	mov	r8, #1
   11e40:	mov	r6, #0
   11e44:	add	r1, r1, #112	; 0x70
   11e48:	cmp	r2, #0
   11e4c:	bne	11e84 <__assert_fail@plt+0x8d4>
   11e50:	ldr	r2, [r1, #-88]	; 0xffffffa8
   11e54:	and	r2, r2, #61440	; 0xf000
   11e58:	cmp	r2, #32768	; 0x8000
   11e5c:	bne	11e90 <__assert_fail@plt+0x8e0>
   11e60:	ldrd	r2, [r1, #-56]	; 0xffffffc8
   11e64:	adds	r7, r2, r7
   11e68:	adc	r6, r3, r6
   11e6c:	cmp	r0, #0
   11e70:	beq	11e9c <__assert_fail@plt+0x8ec>
   11e74:	ldr	r2, [r1], #112	; 0x70
   11e78:	sub	r0, r0, #1
   11e7c:	cmp	r2, #0
   11e80:	beq	11e50 <__assert_fail@plt+0x8a0>
   11e84:	cmp	r0, #0
   11e88:	bne	11e74 <__assert_fail@plt+0x8c4>
   11e8c:	b	11e9c <__assert_fail@plt+0x8ec>
   11e90:	mov	r8, #7
   11e94:	cmp	r0, #0
   11e98:	bne	11e74 <__assert_fail@plt+0x8c4>
   11e9c:	subs	r0, r7, #10
   11ea0:	mov	r5, #1
   11ea4:	sbcs	r0, r6, #0
   11ea8:	bcc	11edc <__assert_fail@plt+0x92c>
   11eac:	mov	r5, #1
   11eb0:	mov	r0, r7
   11eb4:	mov	r1, r6
   11eb8:	mov	r2, #10
   11ebc:	mov	r3, #0
   11ec0:	bl	177ac <_obstack_memory_used@@Base+0x518>
   11ec4:	rsbs	r2, r7, #99	; 0x63
   11ec8:	add	r5, r5, #1
   11ecc:	mov	r7, r0
   11ed0:	rscs	r2, r6, #0
   11ed4:	mov	r6, r1
   11ed8:	bcc	11eb0 <__assert_fail@plt+0x900>
   11edc:	cmp	r5, r8
   11ee0:	movlt	r5, r8
   11ee4:	str	r5, [sl, #16]
   11ee8:	ldr	r5, [sp, #48]	; 0x30
   11eec:	add	r1, sp, #56	; 0x38
   11ef0:	mov	r0, r5
   11ef4:	bl	13650 <__assert_fail@plt+0x20a0>
   11ef8:	ldr	r6, [sp, #44]	; 0x2c
   11efc:	cmp	r0, #0
   11f00:	beq	12178 <__assert_fail@plt+0xbc8>
   11f04:	mov	sl, r0
   11f08:	mov	r8, #1
   11f0c:	mov	r7, #0
   11f10:	cmp	r6, #0
   11f14:	mov	r0, #0
   11f18:	beq	11f54 <__assert_fail@plt+0x9a4>
   11f1c:	movw	r1, #33362	; 0x8252
   11f20:	mov	r0, r6
   11f24:	movt	r1, #1
   11f28:	bl	112bc <strcmp@plt>
   11f2c:	cmp	r0, #0
   11f30:	mov	r0, #0
   11f34:	bne	11f54 <__assert_fail@plt+0x9a4>
   11f38:	movw	r1, #33362	; 0x8252
   11f3c:	mov	r0, sl
   11f40:	movt	r1, #1
   11f44:	bl	112bc <strcmp@plt>
   11f48:	cmp	r0, #0
   11f4c:	mov	r0, #0
   11f50:	beq	1205c <__assert_fail@plt+0xaac>
   11f54:	ldrb	r1, [sl]
   11f58:	cmp	r1, #0
   11f5c:	beq	120a8 <__assert_fail@plt+0xaf8>
   11f60:	mov	r4, #0
   11f64:	cmp	r0, #0
   11f68:	bne	12140 <__assert_fail@plt+0xb90>
   11f6c:	ldr	r1, [sp, #52]	; 0x34
   11f70:	cmp	r9, #0
   11f74:	mov	r0, r9
   11f78:	movne	r0, r7
   11f7c:	rsb	r0, r0, r0, lsl #3
   11f80:	add	r5, r1, r0, lsl #4
   11f84:	movw	r1, #33362	; 0x8252
   11f88:	mov	r0, sl
   11f8c:	movt	r1, #1
   11f90:	bl	112bc <strcmp@plt>
   11f94:	cmp	r0, #0
   11f98:	beq	12020 <__assert_fail@plt+0xa70>
   11f9c:	mov	r0, sl
   11fa0:	mov	r1, #0
   11fa4:	bl	113f4 <open64@plt>
   11fa8:	cmn	r0, #1
   11fac:	beq	11fe4 <__assert_fail@plt+0xa34>
   11fb0:	mov	r6, r0
   11fb4:	mov	r0, #0
   11fb8:	mov	r1, sl
   11fbc:	mov	r2, r5
   11fc0:	str	r0, [sp]
   11fc4:	str	r0, [sp, #4]
   11fc8:	mov	r0, r6
   11fcc:	bl	12750 <__assert_fail@plt+0x11a0>
   11fd0:	mov	r5, r0
   11fd4:	mov	r0, r6
   11fd8:	bl	115a4 <close@plt>
   11fdc:	cmp	r0, #0
   11fe0:	beq	12018 <__assert_fail@plt+0xa68>
   11fe4:	bl	114a8 <__errno_location@plt>
   11fe8:	ldr	r6, [r0]
   11fec:	mov	r0, #0
   11ff0:	mov	r1, #3
   11ff4:	mov	r2, sl
   11ff8:	mov	r5, #0
   11ffc:	bl	15a40 <__assert_fail@plt+0x4490>
   12000:	movw	r2, #33260	; 0x81ec
   12004:	mov	r3, r0
   12008:	mov	r0, #0
   1200c:	mov	r1, r6
   12010:	movt	r2, #1
   12014:	bl	113e8 <error@plt>
   12018:	ldr	r6, [sp, #44]	; 0x2c
   1201c:	b	12050 <__assert_fail@plt+0xaa0>
   12020:	movw	r0, #37280	; 0x91a0
   12024:	mov	r1, #1
   12028:	mov	r2, r5
   1202c:	movt	r0, #2
   12030:	strb	r1, [r0, #6]
   12034:	mvn	r0, #0
   12038:	mov	r1, sl
   1203c:	str	r0, [sp]
   12040:	str	r0, [sp, #4]
   12044:	mov	r0, #0
   12048:	bl	12750 <__assert_fail@plt+0x11a0>
   1204c:	mov	r5, r0
   12050:	and	r4, r8, r5
   12054:	ldr	r5, [sp, #48]	; 0x30
   12058:	b	12140 <__assert_fail@plt+0xb90>
   1205c:	movw	r1, #32457	; 0x7ec9
   12060:	mov	r0, #0
   12064:	mov	r2, #5
   12068:	movt	r1, #1
   1206c:	bl	1134c <dcgettext@plt>
   12070:	mov	r5, r0
   12074:	mov	r0, #4
   12078:	mov	r1, sl
   1207c:	bl	157c4 <__assert_fail@plt+0x4214>
   12080:	mov	r2, r5
   12084:	ldr	r5, [sp, #48]	; 0x30
   12088:	mov	r3, r0
   1208c:	mov	r0, #0
   12090:	mov	r1, #0
   12094:	bl	113e8 <error@plt>
   12098:	mov	r0, #1
   1209c:	ldrb	r1, [sl]
   120a0:	cmp	r1, #0
   120a4:	bne	11f60 <__assert_fail@plt+0x9b0>
   120a8:	cmp	r6, #0
   120ac:	beq	12110 <__assert_fail@plt+0xb60>
   120b0:	mov	r0, r5
   120b4:	bl	13708 <__assert_fail@plt+0x2158>
   120b8:	mov	r5, r0
   120bc:	mov	r0, #0
   120c0:	mov	r1, #3
   120c4:	mov	r2, r6
   120c8:	mov	r4, #0
   120cc:	bl	15a40 <__assert_fail@plt+0x4490>
   120d0:	movw	r1, #32520	; 0x7f08
   120d4:	mov	r6, r0
   120d8:	mov	r0, #0
   120dc:	mov	r2, #5
   120e0:	movt	r1, #1
   120e4:	bl	1134c <dcgettext@plt>
   120e8:	str	r5, [sp]
   120ec:	mov	r3, r6
   120f0:	ldr	r5, [sp, #48]	; 0x30
   120f4:	ldr	r6, [sp, #44]	; 0x2c
   120f8:	movw	r2, #32550	; 0x7f26
   120fc:	str	r0, [sp, #4]
   12100:	mov	r0, #0
   12104:	mov	r1, #0
   12108:	movt	r2, #1
   1210c:	b	1213c <__assert_fail@plt+0xb8c>
   12110:	movw	r1, #32520	; 0x7f08
   12114:	mov	r0, #0
   12118:	mov	r2, #5
   1211c:	mov	r4, #0
   12120:	movt	r1, #1
   12124:	bl	1134c <dcgettext@plt>
   12128:	movw	r2, #33260	; 0x81ec
   1212c:	mov	r3, r0
   12130:	mov	r0, #0
   12134:	mov	r1, #0
   12138:	movt	r2, #1
   1213c:	bl	113e8 <error@plt>
   12140:	cmp	r9, #0
   12144:	ldreq	r0, [sp, #52]	; 0x34
   12148:	moveq	r1, #1
   1214c:	streq	r1, [r0]
   12150:	mov	r0, r5
   12154:	add	r1, sp, #56	; 0x38
   12158:	bl	13650 <__assert_fail@plt+0x20a0>
   1215c:	cmp	r4, #0
   12160:	mov	sl, r0
   12164:	add	r7, r7, #1
   12168:	movwne	r4, #1
   1216c:	cmp	r0, #0
   12170:	mov	r8, r4
   12174:	bne	11f10 <__assert_fail@plt+0x960>
   12178:	ldr	r0, [sp, #56]	; 0x38
   1217c:	cmp	r0, #2
   12180:	beq	121f0 <__assert_fail@plt+0xc40>
   12184:	movw	r7, #37280	; 0x91a0
   12188:	cmp	r0, #4
   1218c:	movt	r7, #2
   12190:	bne	12458 <__assert_fail@plt+0xea8>
   12194:	bl	114a8 <__errno_location@plt>
   12198:	ldr	r6, [r0]
   1219c:	movw	r1, #32370	; 0x7e72
   121a0:	mov	r0, #0
   121a4:	mov	r2, #5
   121a8:	mov	r4, #0
   121ac:	movt	r1, #1
   121b0:	bl	1134c <dcgettext@plt>
   121b4:	ldr	r2, [sp, #44]	; 0x2c
   121b8:	mov	r5, r0
   121bc:	mov	r0, #0
   121c0:	mov	r1, #3
   121c4:	bl	15a40 <__assert_fail@plt+0x4490>
   121c8:	mov	r3, r0
   121cc:	mov	r0, #0
   121d0:	mov	r1, r6
   121d4:	mov	r2, r5
   121d8:	bl	113e8 <error@plt>
   121dc:	ldr	r5, [sp, #48]	; 0x30
   121e0:	ldr	r0, [sp, #40]	; 0x28
   121e4:	cmp	r0, #0
   121e8:	bne	12210 <__assert_fail@plt+0xc60>
   121ec:	b	12218 <__assert_fail@plt+0xc68>
   121f0:	cmp	r6, #0
   121f4:	movw	r7, #37280	; 0x91a0
   121f8:	movt	r7, #2
   121fc:	eorseq	r0, r4, #1
   12200:	beq	12354 <__assert_fail@plt+0xda4>
   12204:	ldr	r0, [sp, #40]	; 0x28
   12208:	cmp	r0, #0
   1220c:	beq	12218 <__assert_fail@plt+0xc68>
   12210:	add	r0, sp, #164	; 0xa4
   12214:	bl	15d84 <__assert_fail@plt+0x47d4>
   12218:	mov	r0, r5
   1221c:	bl	13708 <__assert_fail@plt+0x2158>
   12220:	cmp	r0, #2
   12224:	bcc	122e4 <__assert_fail@plt+0xd34>
   12228:	ldr	r0, [r7, #24]
   1222c:	movw	r1, #32561	; 0x7f31
   12230:	mov	r2, #5
   12234:	movt	r1, #1
   12238:	str	r0, [sp, #44]	; 0x2c
   1223c:	ldr	r0, [r7, #28]
   12240:	ldr	r7, [r7, #32]
   12244:	str	r0, [sp, #40]	; 0x28
   12248:	movw	r0, #37280	; 0x91a0
   1224c:	movt	r0, #2
   12250:	ldr	sl, [r0, #36]	; 0x24
   12254:	movw	r0, #37280	; 0x91a0
   12258:	movt	r0, #2
   1225c:	ldr	r8, [r0, #40]	; 0x28
   12260:	movw	r0, #37280	; 0x91a0
   12264:	movt	r0, #2
   12268:	ldr	r9, [r0, #44]	; 0x2c
   1226c:	movw	r0, #37280	; 0x91a0
   12270:	movt	r0, #2
   12274:	ldr	r0, [r0, #48]	; 0x30
   12278:	str	r0, [sp, #32]
   1227c:	movw	r0, #37280	; 0x91a0
   12280:	movt	r0, #2
   12284:	ldr	r0, [r0, #52]	; 0x34
   12288:	str	r0, [sp, #36]	; 0x24
   1228c:	movw	r0, #37280	; 0x91a0
   12290:	movt	r0, #2
   12294:	ldr	r6, [r0, #56]	; 0x38
   12298:	ldr	r5, [r0, #60]	; 0x3c
   1229c:	mov	r0, #0
   122a0:	bl	1134c <dcgettext@plt>
   122a4:	stm	sp, {r8, r9}
   122a8:	str	r7, [sp, #8]
   122ac:	movw	r7, #37280	; 0x91a0
   122b0:	str	r0, [sp, #24]
   122b4:	mov	r0, r6
   122b8:	str	sl, [sp, #12]
   122bc:	ldr	r1, [sp, #44]	; 0x2c
   122c0:	ldr	r2, [sp, #32]
   122c4:	ldr	r3, [sp, #36]	; 0x24
   122c8:	movt	r7, #2
   122cc:	str	r1, [sp, #16]
   122d0:	ldr	r1, [sp, #40]	; 0x28
   122d4:	str	r1, [sp, #20]
   122d8:	mov	r1, r5
   122dc:	ldr	r5, [sp, #48]	; 0x30
   122e0:	bl	12558 <__assert_fail@plt+0xfa8>
   122e4:	mov	r0, r5
   122e8:	bl	1372c <__assert_fail@plt+0x217c>
   122ec:	ldr	r0, [sp, #52]	; 0x34
   122f0:	bl	139a8 <__assert_fail@plt+0x23f8>
   122f4:	ldrb	r0, [r7, #6]
   122f8:	cmp	r0, #1
   122fc:	bne	12310 <__assert_fail@plt+0xd60>
   12300:	mov	r0, #0
   12304:	bl	115a4 <close@plt>
   12308:	cmp	r0, #0
   1230c:	bne	12508 <__assert_fail@plt+0xf58>
   12310:	eor	r0, r4, #1
   12314:	sub	sp, fp, #56	; 0x38
   12318:	vpop	{d8-d10}
   1231c:	add	sp, sp, #4
   12320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12324:	ldrb	r0, [sl, #2]
   12328:	cmp	r0, #0
   1232c:	ldrbeq	r0, [sl, #1]
   12330:	cmpeq	r0, #0
   12334:	bne	11bcc <__assert_fail@plt+0x61c>
   12338:	ldrb	r0, [sl, #5]
   1233c:	cmp	r0, #0
   12340:	moveq	r0, #1
   12344:	strbeq	r0, [sl, #1]
   12348:	movweq	r0, #257	; 0x101
   1234c:	strheq	r0, [sl, #3]
   12350:	b	11bcc <__assert_fail@plt+0x61c>
   12354:	mov	r0, r5
   12358:	bl	13708 <__assert_fail@plt+0x2158>
   1235c:	cmp	r0, #0
   12360:	bne	12204 <__assert_fail@plt+0xc54>
   12364:	ldr	r2, [sp, #52]	; 0x34
   12368:	mov	r0, #1
   1236c:	mov	r1, #0
   12370:	strb	r0, [r7, #6]
   12374:	mvn	r0, #0
   12378:	str	r0, [sp]
   1237c:	str	r0, [sp, #4]
   12380:	mov	r0, #0
   12384:	bl	12750 <__assert_fail@plt+0x11a0>
   12388:	and	r4, r4, r0
   1238c:	ldr	r0, [sp, #40]	; 0x28
   12390:	cmp	r0, #0
   12394:	bne	12210 <__assert_fail@plt+0xc60>
   12398:	b	12218 <__assert_fail@plt+0xc68>
   1239c:	add	r4, sp, #164	; 0xa4
   123a0:	mov	r0, r4
   123a4:	bl	15d04 <__assert_fail@plt+0x4754>
   123a8:	mov	r0, r5
   123ac:	mov	r1, r4
   123b0:	bl	15db8 <__assert_fail@plt+0x4808>
   123b4:	cmp	r0, #0
   123b8:	beq	12520 <__assert_fail@plt+0xf70>
   123bc:	mov	r0, r5
   123c0:	bl	138a4 <__assert_fail@plt+0x22f4>
   123c4:	cmp	r0, #0
   123c8:	bne	12520 <__assert_fail@plt+0xf70>
   123cc:	ldr	r7, [sp, #168]	; 0xa8
   123d0:	ldr	r9, [sp, #164]	; 0xa4
   123d4:	mov	r0, r7
   123d8:	bl	135e8 <__assert_fail@plt+0x2038>
   123dc:	mov	r4, #1
   123e0:	cmp	r0, #0
   123e4:	bne	11d24 <__assert_fail@plt+0x774>
   123e8:	b	12460 <__assert_fail@plt+0xeb0>
   123ec:	cmn	r0, #3
   123f0:	bne	12448 <__assert_fail@plt+0xe98>
   123f4:	movw	r0, #37160	; 0x9128
   123f8:	movw	r2, #32227	; 0x7de3
   123fc:	mov	r1, #0
   12400:	movw	r7, #32216	; 0x7dd8
   12404:	movt	r0, #2
   12408:	movt	r2, #1
   1240c:	str	r1, [sp, #8]
   12410:	movw	r1, #32153	; 0x7d99
   12414:	movt	r7, #1
   12418:	ldr	r3, [r0]
   1241c:	movw	r0, #37268	; 0x9194
   12420:	str	r2, [sp, #4]
   12424:	movw	r2, #32202	; 0x7dca
   12428:	movt	r1, #1
   1242c:	str	r7, [sp]
   12430:	movt	r0, #2
   12434:	movt	r2, #1
   12438:	ldr	r0, [r0]
   1243c:	bl	16534 <__assert_fail@plt+0x4f84>
   12440:	mov	r0, #0
   12444:	bl	11460 <exit@plt>
   12448:	cmn	r0, #2
   1244c:	bne	12464 <__assert_fail@plt+0xeb4>
   12450:	mov	r0, #0
   12454:	bl	116b0 <__assert_fail@plt+0x100>
   12458:	cmp	r0, #3
   1245c:	bne	1246c <__assert_fail@plt+0xebc>
   12460:	bl	16cc8 <__assert_fail@plt+0x5718>
   12464:	mov	r0, #1
   12468:	bl	116b0 <__assert_fail@plt+0x100>
   1246c:	movw	r0, #32385	; 0x7e81
   12470:	movw	r1, #32425	; 0x7ea9
   12474:	movw	r3, #32434	; 0x7eb2
   12478:	movw	r2, #938	; 0x3aa
   1247c:	movt	r0, #1
   12480:	movt	r1, #1
   12484:	movt	r3, #1
   12488:	bl	115b0 <__assert_fail@plt>
   1248c:	movw	r1, #32243	; 0x7df3
   12490:	mov	r0, #0
   12494:	mov	r2, #5
   12498:	movt	r1, #1
   1249c:	bl	1134c <dcgettext@plt>
   124a0:	mov	r4, r0
   124a4:	ldr	r0, [r7]
   124a8:	ldr	r1, [r5, r0, lsl #2]
   124ac:	mov	r0, #4
   124b0:	bl	157c4 <__assert_fail@plt+0x4214>
   124b4:	mov	r3, r0
   124b8:	mov	r0, #0
   124bc:	mov	r1, #0
   124c0:	mov	r2, r4
   124c4:	bl	113e8 <error@plt>
   124c8:	movw	r0, #37256	; 0x9188
   124cc:	movw	r1, #32260	; 0x7e04
   124d0:	mov	r2, #5
   124d4:	movt	r0, #2
   124d8:	movt	r1, #1
   124dc:	ldr	r4, [r0]
   124e0:	mov	r0, #0
   124e4:	bl	1134c <dcgettext@plt>
   124e8:	movw	r2, #33552	; 0x8310
   124ec:	mov	r3, r0
   124f0:	mov	r0, r4
   124f4:	mov	r1, #1
   124f8:	movt	r2, #1
   124fc:	bl	11508 <__fprintf_chk@plt>
   12500:	mov	r0, #1
   12504:	bl	116b0 <__assert_fail@plt+0x100>
   12508:	bl	114a8 <__errno_location@plt>
   1250c:	ldr	r1, [r0]
   12510:	movw	r2, #33362	; 0x8252
   12514:	mov	r0, #1
   12518:	movt	r2, #1
   1251c:	bl	113e8 <error@plt>
   12520:	movw	r1, #32339	; 0x7e53
   12524:	mov	r0, #0
   12528:	mov	r2, #5
   1252c:	movt	r1, #1
   12530:	bl	1134c <dcgettext@plt>
   12534:	mov	r4, r0
   12538:	mov	r0, #4
   1253c:	mov	r1, r6
   12540:	bl	157c4 <__assert_fail@plt+0x4214>
   12544:	mov	r3, r0
   12548:	mov	r0, #1
   1254c:	mov	r1, #0
   12550:	mov	r2, r4
   12554:	bl	113e8 <error@plt>
   12558:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1255c:	add	fp, sp, #24
   12560:	sub	sp, sp, #24
   12564:	movw	r6, #37280	; 0x91a0
   12568:	mov	r7, r2
   1256c:	movw	r8, #33224	; 0x81c8
   12570:	mov	r9, r3
   12574:	movt	r6, #2
   12578:	movt	r8, #1
   1257c:	ldrb	r2, [r6, #4]
   12580:	cmp	r2, #1
   12584:	bne	125c0 <__assert_fail@plt+0x1010>
   12588:	ldr	r4, [r6, #16]
   1258c:	add	r2, sp, #3
   12590:	bl	13a74 <__assert_fail@plt+0x24c4>
   12594:	movw	r5, #33224	; 0x81c8
   12598:	mov	r3, r0
   1259c:	mov	r0, #1
   125a0:	mov	r2, r4
   125a4:	movt	r5, #1
   125a8:	add	r1, r5, #1
   125ac:	bl	114f0 <__printf_chk@plt>
   125b0:	ldrb	r0, [r6, #3]
   125b4:	cmp	r0, #1
   125b8:	beq	125d0 <__assert_fail@plt+0x1020>
   125bc:	b	12600 <__assert_fail@plt+0x1050>
   125c0:	add	r5, r8, #1
   125c4:	ldrb	r0, [r6, #3]
   125c8:	cmp	r0, #1
   125cc:	bne	12600 <__assert_fail@plt+0x1050>
   125d0:	ldr	r4, [r6, #16]
   125d4:	add	r2, sp, #3
   125d8:	mov	r0, r7
   125dc:	mov	r1, r9
   125e0:	bl	13a74 <__assert_fail@plt+0x24c4>
   125e4:	mov	r3, r0
   125e8:	mov	r0, #1
   125ec:	mov	r1, r5
   125f0:	mov	r2, r4
   125f4:	bl	114f0 <__printf_chk@plt>
   125f8:	movw	r5, #33224	; 0x81c8
   125fc:	movt	r5, #1
   12600:	ldrb	r0, [r6, #2]
   12604:	cmp	r0, #1
   12608:	beq	12654 <__assert_fail@plt+0x10a4>
   1260c:	ldrb	r0, [r6, #1]
   12610:	cmp	r0, #1
   12614:	bne	12690 <__assert_fail@plt+0x10e0>
   12618:	ldr	r1, [fp, #20]
   1261c:	ldr	r0, [fp, #16]
   12620:	ldr	r4, [r6, #16]
   12624:	add	r2, sp, #3
   12628:	bl	13a74 <__assert_fail@plt+0x24c4>
   1262c:	mov	r3, r0
   12630:	mov	r0, #1
   12634:	mov	r1, r5
   12638:	mov	r2, r4
   1263c:	bl	114f0 <__printf_chk@plt>
   12640:	ldrb	r0, [r6, #5]
   12644:	ldr	r5, [fp, #32]
   12648:	cmp	r0, #1
   1264c:	beq	126a4 <__assert_fail@plt+0x10f4>
   12650:	b	126cc <__assert_fail@plt+0x111c>
   12654:	ldr	r1, [fp, #12]
   12658:	ldr	r0, [fp, #8]
   1265c:	ldr	r4, [r6, #16]
   12660:	add	r2, sp, #3
   12664:	bl	13a74 <__assert_fail@plt+0x24c4>
   12668:	mov	r3, r0
   1266c:	mov	r0, #1
   12670:	mov	r1, r5
   12674:	mov	r2, r4
   12678:	bl	114f0 <__printf_chk@plt>
   1267c:	movw	r5, #33224	; 0x81c8
   12680:	movt	r5, #1
   12684:	ldrb	r0, [r6, #1]
   12688:	cmp	r0, #1
   1268c:	beq	12618 <__assert_fail@plt+0x1068>
   12690:	mov	r8, r5
   12694:	ldrb	r0, [r6, #5]
   12698:	ldr	r5, [fp, #32]
   1269c:	cmp	r0, #1
   126a0:	bne	126cc <__assert_fail@plt+0x111c>
   126a4:	ldr	r1, [fp, #28]
   126a8:	ldr	r0, [fp, #24]
   126ac:	ldr	r4, [r6, #16]
   126b0:	add	r2, sp, #3
   126b4:	bl	13a74 <__assert_fail@plt+0x24c4>
   126b8:	mov	r3, r0
   126bc:	mov	r0, #1
   126c0:	mov	r1, r8
   126c4:	mov	r2, r4
   126c8:	bl	114f0 <__printf_chk@plt>
   126cc:	cmp	r5, #0
   126d0:	beq	12710 <__assert_fail@plt+0x1160>
   126d4:	mov	r0, r5
   126d8:	mov	r1, #10
   126dc:	bl	11490 <strchr@plt>
   126e0:	cmp	r0, #0
   126e4:	beq	126fc <__assert_fail@plt+0x114c>
   126e8:	mov	r0, #0
   126ec:	mov	r1, #3
   126f0:	mov	r2, r5
   126f4:	bl	15a40 <__assert_fail@plt+0x4490>
   126f8:	mov	r5, r0
   126fc:	movw	r1, #33259	; 0x81eb
   12700:	mov	r0, #1
   12704:	mov	r2, r5
   12708:	movt	r1, #1
   1270c:	bl	114f0 <__printf_chk@plt>
   12710:	movw	r0, #37268	; 0x9194
   12714:	movt	r0, #2
   12718:	ldr	r0, [r0]
   1271c:	ldr	r1, [r0, #20]
   12720:	ldr	r2, [r0, #24]
   12724:	cmp	r1, r2
   12728:	addcc	r2, r1, #1
   1272c:	strcc	r2, [r0, #20]
   12730:	movcc	r0, #10
   12734:	strbcc	r0, [r1]
   12738:	subcc	sp, fp, #24
   1273c:	popcc	{r4, r5, r6, r7, r8, r9, fp, pc}
   12740:	mov	r1, #10
   12744:	bl	1152c <__overflow@plt>
   12748:	sub	sp, fp, #24
   1274c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12754:	add	fp, sp, #28
   12758:	sub	sp, sp, #4
   1275c:	vpush	{d8-d10}
   12760:	sub	sp, sp, #112	; 0x70
   12764:	sub	sp, sp, #16384	; 0x4000
   12768:	str	r0, [sp, #44]	; 0x2c
   1276c:	mov	r9, r2
   12770:	mov	r4, r1
   12774:	cmp	r1, #0
   12778:	mov	r0, r1
   1277c:	bne	12794 <__assert_fail@plt+0x11e4>
   12780:	movw	r1, #32993	; 0x80e1
   12784:	mov	r0, #0
   12788:	mov	r2, #5
   1278c:	movt	r1, #1
   12790:	bl	1134c <dcgettext@plt>
   12794:	str	r0, [sp, #28]
   12798:	bl	113c4 <__ctype_get_mb_cur_max@plt>
   1279c:	movw	r8, #37280	; 0x91a0
   127a0:	cmp	r0, #1
   127a4:	mov	r2, #0
   127a8:	mov	r1, #0
   127ac:	movt	r8, #2
   127b0:	movwhi	r2, #1
   127b4:	cmp	r0, #2
   127b8:	mov	r0, #0
   127bc:	ldrb	r7, [r8, #2]
   127c0:	ldrb	r3, [r8, #1]
   127c4:	movwcc	r0, #1
   127c8:	ldrb	r5, [r8, #3]
   127cc:	and	r0, r7, r0
   127d0:	and	sl, r2, r7
   127d4:	orr	r0, r3, r0
   127d8:	eor	r0, r0, #1
   127dc:	orr	r6, sl, r0
   127e0:	ldrb	r0, [r8, #5]
   127e4:	tst	r6, #1
   127e8:	orr	r5, r5, r0
   127ec:	ldrbeq	r0, [r8, #4]
   127f0:	cmpeq	r0, #0
   127f4:	beq	12824 <__assert_fail@plt+0x1274>
   127f8:	mov	r0, #2
   127fc:	mov	r1, #0
   12800:	mov	r2, #0
   12804:	mov	r3, #0
   12808:	str	r0, [sp, #8]
   1280c:	ldr	r0, [sp, #44]	; 0x2c
   12810:	str	r1, [sp]
   12814:	str	r1, [sp, #4]
   12818:	bl	13864 <__assert_fail@plt+0x22b4>
   1281c:	ldrb	r1, [r8, #4]
   12820:	b	1282c <__assert_fail@plt+0x127c>
   12824:	tst	r5, #1
   12828:	bne	127f8 <__assert_fail@plt+0x1248>
   1282c:	orr	r0, r5, r1
   12830:	str	r4, [sp, #32]
   12834:	str	sl, [sp, #36]	; 0x24
   12838:	orr	r0, r6, r0
   1283c:	tst	r0, #1
   12840:	beq	12c70 <__assert_fail@plt+0x16c0>
   12844:	orr	r0, sl, r5
   12848:	tst	r0, #1
   1284c:	beq	12d6c <__assert_fail@plt+0x17bc>
   12850:	bl	113c4 <__ctype_get_mb_cur_max@plt>
   12854:	cmp	r0, #1
   12858:	bls	12f70 <__assert_fail@plt+0x19c0>
   1285c:	mov	r0, #0
   12860:	mov	r1, #0
   12864:	mov	r8, #0
   12868:	mov	r4, #0
   1286c:	mov	r7, #0
   12870:	str	r0, [sp, #40]	; 0x28
   12874:	mov	r0, #0
   12878:	str	r1, [sp, #100]	; 0x64
   1287c:	str	r1, [sp, #96]	; 0x60
   12880:	str	r0, [sp, #56]	; 0x38
   12884:	mov	r0, #0
   12888:	str	r0, [sp, #52]	; 0x34
   1288c:	mov	r0, #0
   12890:	str	r0, [sp, #48]	; 0x30
   12894:	mov	r0, #0
   12898:	str	r0, [sp, #72]	; 0x48
   1289c:	mov	r0, #0
   128a0:	str	r0, [sp, #68]	; 0x44
   128a4:	mov	r0, #0
   128a8:	str	r0, [sp, #76]	; 0x4c
   128ac:	mov	r0, #0
   128b0:	str	r0, [sp, #80]	; 0x50
   128b4:	mov	r0, #0
   128b8:	str	r0, [sp, #84]	; 0x54
   128bc:	mov	r0, #0
   128c0:	str	r0, [sp, #64]	; 0x40
   128c4:	mov	r0, #0
   128c8:	str	r0, [sp, #60]	; 0x3c
   128cc:	mov	r5, #0
   128d0:	b	12910 <__assert_fail@plt+0x1360>
   128d4:	cmp	r9, #16384	; 0x4000
   128d8:	add	r0, sp, #104	; 0x68
   128dc:	addeq	sl, sl, #1
   128e0:	subeq	r9, r9, #1
   128e4:	mov	r1, sl
   128e8:	mov	r2, r9
   128ec:	bl	112f8 <memmove@plt>
   128f0:	mov	r5, r9
   128f4:	b	12910 <__assert_fail@plt+0x1360>
   128f8:	str	r5, [sp, #96]	; 0x60
   128fc:	str	r7, [sp, #100]	; 0x64
   12900:	mov	r7, #1
   12904:	cmp	r9, #0
   12908:	mov	r5, #0
   1290c:	bne	128d4 <__assert_fail@plt+0x1324>
   12910:	add	r0, sp, #104	; 0x68
   12914:	rsb	r2, r5, #16384	; 0x4000
   12918:	add	r1, r0, r5
   1291c:	ldr	r0, [sp, #44]	; 0x2c
   12920:	bl	16044 <__assert_fail@plt+0x4a94>
   12924:	cmp	r0, #0
   12928:	beq	13274 <__assert_fail@plt+0x1cc4>
   1292c:	cmn	r0, #1
   12930:	beq	13290 <__assert_fail@plt+0x1ce0>
   12934:	ldr	r1, [sp, #40]	; 0x28
   12938:	add	r9, r0, r5
   1293c:	add	sl, sp, #104	; 0x68
   12940:	adds	r1, r1, r0
   12944:	ldr	r0, [sp, #56]	; 0x38
   12948:	str	r1, [sp, #40]	; 0x28
   1294c:	adc	r0, r0, #0
   12950:	str	r0, [sp, #56]	; 0x38
   12954:	b	12b24 <__assert_fail@plt+0x1574>
   12958:	mov	r0, #0
   1295c:	mov	r6, #1
   12960:	str	r0, [sp, #92]	; 0x5c
   12964:	bl	11394 <iswprint@plt>
   12968:	cmp	r0, #0
   1296c:	bne	129e4 <__assert_fail@plt+0x1434>
   12970:	b	12aa8 <__assert_fail@plt+0x14f8>
   12974:	ldr	r0, [sp, #52]	; 0x34
   12978:	adds	r0, r0, #1
   1297c:	str	r0, [sp, #52]	; 0x34
   12980:	ldr	r0, [sp, #48]	; 0x30
   12984:	adc	r0, r0, #0
   12988:	str	r0, [sp, #48]	; 0x30
   1298c:	ldr	r1, [sp, #72]	; 0x48
   12990:	ldr	r3, [sp, #64]	; 0x40
   12994:	ldr	r2, [sp, #68]	; 0x44
   12998:	ldr	r5, [sp, #60]	; 0x3c
   1299c:	subs	r0, r1, r3
   129a0:	sbcs	r0, r2, r5
   129a4:	mov	r0, #0
   129a8:	movwcc	r0, #1
   129ac:	cmp	r0, #0
   129b0:	mov	r0, #0
   129b4:	movne	r2, r5
   129b8:	movne	r1, r3
   129bc:	str	r0, [sp, #64]	; 0x40
   129c0:	mov	r0, #0
   129c4:	str	r2, [sp, #68]	; 0x44
   129c8:	str	r1, [sp, #72]	; 0x48
   129cc:	b	12a7c <__assert_fail@plt+0x14cc>
   129d0:	cmp	r1, #0
   129d4:	beq	12ac4 <__assert_fail@plt+0x1514>
   129d8:	bl	11394 <iswprint@plt>
   129dc:	cmp	r0, #0
   129e0:	beq	12aa8 <__assert_fail@plt+0x14f8>
   129e4:	movw	r0, #37280	; 0x91a0
   129e8:	movt	r0, #2
   129ec:	ldrb	r0, [r0, #5]
   129f0:	cmp	r0, #1
   129f4:	bne	12a1c <__assert_fail@plt+0x146c>
   129f8:	ldr	r0, [sp, #92]	; 0x5c
   129fc:	bl	112ec <wcwidth@plt>
   12a00:	ldr	r1, [sp, #64]	; 0x40
   12a04:	bic	r0, r0, r0, asr #31
   12a08:	adds	r1, r1, r0
   12a0c:	ldr	r0, [sp, #60]	; 0x3c
   12a10:	str	r1, [sp, #64]	; 0x40
   12a14:	adc	r0, r0, #0
   12a18:	str	r0, [sp, #60]	; 0x3c
   12a1c:	ldr	r0, [sp, #92]	; 0x5c
   12a20:	bl	11478 <iswspace@plt>
   12a24:	cmp	r0, #0
   12a28:	bne	12a80 <__assert_fail@plt+0x14d0>
   12a2c:	movw	r0, #37280	; 0x91a0
   12a30:	movt	r0, #2
   12a34:	ldrb	r0, [r0]
   12a38:	cmp	r0, #0
   12a3c:	bne	12b00 <__assert_fail@plt+0x1550>
   12a40:	ldr	r0, [sp, #92]	; 0x5c
   12a44:	movw	r1, #8238	; 0x202e
   12a48:	cmp	r0, r1
   12a4c:	bgt	12b08 <__assert_fail@plt+0x1558>
   12a50:	cmp	r0, #160	; 0xa0
   12a54:	beq	12a80 <__assert_fail@plt+0x14d0>
   12a58:	movw	r1, #8199	; 0x2007
   12a5c:	cmp	r0, r1
   12a60:	beq	12a80 <__assert_fail@plt+0x14d0>
   12a64:	b	12b00 <__assert_fail@plt+0x1550>
   12a68:	ldr	r0, [sp, #64]	; 0x40
   12a6c:	adds	r0, r0, #1
   12a70:	str	r0, [sp, #64]	; 0x40
   12a74:	ldr	r0, [sp, #60]	; 0x3c
   12a78:	adc	r0, r0, #0
   12a7c:	str	r0, [sp, #60]	; 0x3c
   12a80:	ldr	r0, [sp, #84]	; 0x54
   12a84:	ldr	r1, [sp, #76]	; 0x4c
   12a88:	and	r0, r0, #1
   12a8c:	adds	r1, r1, r0
   12a90:	ldr	r0, [sp, #80]	; 0x50
   12a94:	str	r1, [sp, #76]	; 0x4c
   12a98:	adc	r0, r0, #0
   12a9c:	str	r0, [sp, #80]	; 0x50
   12aa0:	mov	r0, #0
   12aa4:	str	r0, [sp, #84]	; 0x54
   12aa8:	adds	r8, r8, #1
   12aac:	sub	r9, r9, r6
   12ab0:	add	sl, sl, r6
   12ab4:	adc	r4, r4, #0
   12ab8:	cmp	r9, #0
   12abc:	bne	12b24 <__assert_fail@plt+0x1574>
   12ac0:	b	128cc <__assert_fail@plt+0x131c>
   12ac4:	bl	11454 <__ctype_b_loc@plt>
   12ac8:	ldrb	r1, [sl]
   12acc:	ldr	r0, [r0]
   12ad0:	add	r0, r0, r1, lsl #1
   12ad4:	ldrh	r0, [r0]
   12ad8:	tst	r0, #16384	; 0x4000
   12adc:	beq	12aa8 <__assert_fail@plt+0x14f8>
   12ae0:	ldr	r1, [sp, #64]	; 0x40
   12ae4:	adds	r1, r1, #1
   12ae8:	str	r1, [sp, #64]	; 0x40
   12aec:	ldr	r1, [sp, #60]	; 0x3c
   12af0:	adc	r1, r1, #0
   12af4:	tst	r0, #8192	; 0x2000
   12af8:	str	r1, [sp, #60]	; 0x3c
   12afc:	bne	12a80 <__assert_fail@plt+0x14d0>
   12b00:	mov	r0, #1
   12b04:	b	12aa4 <__assert_fail@plt+0x14f4>
   12b08:	movw	r1, #8239	; 0x202f
   12b0c:	cmp	r0, r1
   12b10:	beq	12a80 <__assert_fail@plt+0x14d0>
   12b14:	movw	r1, #8288	; 0x2060
   12b18:	cmp	r0, r1
   12b1c:	beq	12a80 <__assert_fail@plt+0x14d0>
   12b20:	b	12b00 <__assert_fail@plt+0x1550>
   12b24:	tst	r7, #1
   12b28:	bne	12b70 <__assert_fail@plt+0x15c0>
   12b2c:	ldrb	r0, [sl]
   12b30:	movw	r2, #33264	; 0x81f0
   12b34:	mov	r3, #1
   12b38:	movt	r2, #1
   12b3c:	ubfx	r1, r0, #5, #3
   12b40:	ldr	r1, [r2, r1, lsl #2]
   12b44:	and	r2, r0, #31
   12b48:	tst	r1, r3, lsl r2
   12b4c:	beq	12b70 <__assert_fail@plt+0x15c0>
   12b50:	str	r0, [sp, #92]	; 0x5c
   12b54:	mov	r6, #1
   12b58:	mov	r7, #0
   12b5c:	mov	r1, #0
   12b60:	sub	r2, r0, #9
   12b64:	cmp	r2, #23
   12b68:	bls	12bcc <__assert_fail@plt+0x161c>
   12b6c:	b	129d0 <__assert_fail@plt+0x1420>
   12b70:	ldr	r5, [sp, #96]	; 0x60
   12b74:	ldr	r7, [sp, #100]	; 0x64
   12b78:	add	r0, sp, #92	; 0x5c
   12b7c:	mov	r1, sl
   12b80:	mov	r2, r9
   12b84:	add	r3, sp, #96	; 0x60
   12b88:	bl	13b80 <__assert_fail@plt+0x25d0>
   12b8c:	cmn	r0, #1
   12b90:	beq	12c58 <__assert_fail@plt+0x16a8>
   12b94:	mov	r6, r0
   12b98:	cmn	r0, #2
   12b9c:	beq	128f8 <__assert_fail@plt+0x1348>
   12ba0:	add	r0, sp, #96	; 0x60
   12ba4:	bl	11334 <mbsinit@plt>
   12ba8:	clz	r0, r0
   12bac:	cmp	r6, #0
   12bb0:	lsr	r7, r0, #5
   12bb4:	beq	12958 <__assert_fail@plt+0x13a8>
   12bb8:	ldr	r0, [sp, #92]	; 0x5c
   12bbc:	mov	r1, #1
   12bc0:	sub	r2, r0, #9
   12bc4:	cmp	r2, #23
   12bc8:	bhi	129d0 <__assert_fail@plt+0x1420>
   12bcc:	add	r3, pc, #0
   12bd0:	ldr	pc, [r3, r2, lsl #2]
   12bd4:	andeq	r2, r1, r4, lsr ip
   12bd8:	andeq	r2, r1, r4, ror r9
   12bdc:	andeq	r2, r1, r0, lsl #21
   12be0:	andeq	r2, r1, ip, lsl #19
   12be4:	andeq	r2, r1, ip, lsl #19
   12be8:	ldrdeq	r2, [r1], -r0
   12bec:	ldrdeq	r2, [r1], -r0
   12bf0:	ldrdeq	r2, [r1], -r0
   12bf4:	ldrdeq	r2, [r1], -r0
   12bf8:	ldrdeq	r2, [r1], -r0
   12bfc:	ldrdeq	r2, [r1], -r0
   12c00:	ldrdeq	r2, [r1], -r0
   12c04:	ldrdeq	r2, [r1], -r0
   12c08:	ldrdeq	r2, [r1], -r0
   12c0c:	ldrdeq	r2, [r1], -r0
   12c10:	ldrdeq	r2, [r1], -r0
   12c14:	ldrdeq	r2, [r1], -r0
   12c18:	ldrdeq	r2, [r1], -r0
   12c1c:	ldrdeq	r2, [r1], -r0
   12c20:	ldrdeq	r2, [r1], -r0
   12c24:	ldrdeq	r2, [r1], -r0
   12c28:	ldrdeq	r2, [r1], -r0
   12c2c:	ldrdeq	r2, [r1], -r0
   12c30:	andeq	r2, r1, r8, ror #20
   12c34:	ldr	r2, [sp, #64]	; 0x40
   12c38:	ldr	r1, [sp, #60]	; 0x3c
   12c3c:	adds	r0, r2, #8
   12c40:	and	r2, r2, #7
   12c44:	adc	r1, r1, #0
   12c48:	subs	r0, r0, r2
   12c4c:	str	r0, [sp, #64]	; 0x40
   12c50:	sbc	r0, r1, #0
   12c54:	b	12a7c <__assert_fail@plt+0x14cc>
   12c58:	sub	r9, r9, #1
   12c5c:	add	sl, sl, #1
   12c60:	mov	r7, #1
   12c64:	cmp	r9, #0
   12c68:	bne	12b24 <__assert_fail@plt+0x1574>
   12c6c:	b	128cc <__assert_fail@plt+0x131c>
   12c70:	ldr	r0, [r9]
   12c74:	cmp	r0, #1
   12c78:	blt	12c90 <__assert_fail@plt+0x16e0>
   12c7c:	ldr	r1, [sp, #44]	; 0x2c
   12c80:	add	r2, r9, #8
   12c84:	mov	r0, #3
   12c88:	bl	113a0 <__fxstat64@plt>
   12c8c:	str	r0, [r9]
   12c90:	cmp	r0, #0
   12c94:	mov	r0, #0
   12c98:	mov	r7, #0
   12c9c:	mov	r6, #0
   12ca0:	str	r0, [sp, #56]	; 0x38
   12ca4:	beq	12f2c <__assert_fail@plt+0x197c>
   12ca8:	mov	r0, #2
   12cac:	mov	r2, #0
   12cb0:	mov	r3, #0
   12cb4:	str	r7, [sp]
   12cb8:	str	r7, [sp, #4]
   12cbc:	str	r0, [sp, #8]
   12cc0:	ldr	r0, [sp, #44]	; 0x2c
   12cc4:	bl	13864 <__assert_fail@plt+0x22b4>
   12cc8:	movw	r8, #37280	; 0x91a0
   12ccc:	add	r4, sp, #104	; 0x68
   12cd0:	mov	r7, r6
   12cd4:	movt	r8, #2
   12cd8:	b	12cec <__assert_fail@plt+0x173c>
   12cdc:	adds	r7, r7, r0
   12ce0:	ldr	r0, [sp, #56]	; 0x38
   12ce4:	adc	r0, r0, #0
   12ce8:	str	r0, [sp, #56]	; 0x38
   12cec:	ldr	r0, [sp, #44]	; 0x2c
   12cf0:	mov	r1, r4
   12cf4:	mov	r2, #16384	; 0x4000
   12cf8:	bl	16044 <__assert_fail@plt+0x4a94>
   12cfc:	cmp	r0, #0
   12d00:	beq	12f00 <__assert_fail@plt+0x1950>
   12d04:	cmn	r0, #1
   12d08:	bne	12cdc <__assert_fail@plt+0x172c>
   12d0c:	bl	114a8 <__errno_location@plt>
   12d10:	ldr	r2, [sp, #28]
   12d14:	ldr	r4, [r0]
   12d18:	mov	r0, #0
   12d1c:	mov	r1, #3
   12d20:	mov	r9, #0
   12d24:	bl	15a40 <__assert_fail@plt+0x4490>
   12d28:	movw	r2, #33260	; 0x81ec
   12d2c:	mov	r3, r0
   12d30:	mov	r0, #0
   12d34:	mov	r1, r4
   12d38:	movt	r2, #1
   12d3c:	bl	113e8 <error@plt>
   12d40:	mov	r0, #0
   12d44:	mov	r5, #0
   12d48:	mov	ip, #0
   12d4c:	mov	lr, #0
   12d50:	mov	r6, #0
   12d54:	mov	r3, #0
   12d58:	mov	r2, #0
   12d5c:	str	r0, [sp, #76]	; 0x4c
   12d60:	mov	r0, #0
   12d64:	str	r0, [sp, #44]	; 0x2c
   12d68:	b	1346c <__assert_fail@plt+0x1ebc>
   12d6c:	mov	r0, #0
   12d70:	mov	r7, #0
   12d74:	add	r1, sp, #104	; 0x68
   12d78:	vmov.i32	d9, #0	; 0x00000000
   12d7c:	vmov.i32	d10, #10	; 0x0000000a
   12d80:	mov	r9, #0
   12d84:	mov	r4, #0
   12d88:	mov	r8, #0
   12d8c:	str	r0, [sp, #56]	; 0x38
   12d90:	b	12dc0 <__assert_fail@plt+0x1810>
   12d94:	movw	r2, #34953	; 0x8889
   12d98:	subs	r0, r4, r9
   12d9c:	mov	r9, #0
   12da0:	mov	r7, sl
   12da4:	movt	r2, #34952	; 0x8888
   12da8:	sbc	r1, r8, r5
   12dac:	umull	r2, r3, r6, r2
   12db0:	rsbs	r0, r0, r3, lsr #3
   12db4:	rscs	r0, r1, #0
   12db8:	add	r1, sp, #104	; 0x68
   12dbc:	movwcs	r9, #1
   12dc0:	ldr	r0, [sp, #44]	; 0x2c
   12dc4:	mov	r2, #16384	; 0x4000
   12dc8:	mov	r5, r8
   12dcc:	bl	16044 <__assert_fail@plt+0x4a94>
   12dd0:	cmp	r0, #0
   12dd4:	beq	131f0 <__assert_fail@plt+0x1c40>
   12dd8:	movw	r8, #37280	; 0x91a0
   12ddc:	mov	r6, r0
   12de0:	cmn	r0, #1
   12de4:	movt	r8, #2
   12de8:	beq	13200 <__assert_fail@plt+0x1c50>
   12dec:	ldr	r0, [sp, #56]	; 0x38
   12df0:	mov	sl, r7
   12df4:	add	r1, sp, #104	; 0x68
   12df8:	adds	sl, sl, r6
   12dfc:	add	r7, r1, r6
   12e00:	adc	r0, r0, #0
   12e04:	tst	r9, #1
   12e08:	str	r0, [sp, #56]	; 0x38
   12e0c:	beq	12e5c <__assert_fail@plt+0x18ac>
   12e10:	mov	r0, #10
   12e14:	strb	r0, [r7]
   12e18:	mov	r0, r1
   12e1c:	mov	r1, #10
   12e20:	bl	11388 <rawmemchr@plt>
   12e24:	cmp	r0, r7
   12e28:	mov	r9, r4
   12e2c:	mov	r8, r5
   12e30:	bcs	12d94 <__assert_fail@plt+0x17e4>
   12e34:	mov	r4, r9
   12e38:	mov	r8, r5
   12e3c:	adds	r4, r4, #1
   12e40:	add	r0, r0, #1
   12e44:	mov	r1, #10
   12e48:	adc	r8, r8, #0
   12e4c:	bl	11388 <rawmemchr@plt>
   12e50:	cmp	r0, r7
   12e54:	bcc	12e3c <__assert_fail@plt+0x188c>
   12e58:	b	12d94 <__assert_fail@plt+0x17e4>
   12e5c:	cmp	r6, #2
   12e60:	mov	r9, r4
   12e64:	mov	r8, r5
   12e68:	mov	r0, r1
   12e6c:	bcc	12edc <__assert_fail@plt+0x192c>
   12e70:	vmov.32	d8[0], r9
   12e74:	bic	ip, r6, #1
   12e78:	add	r3, sp, #104	; 0x68
   12e7c:	add	r1, sp, #88	; 0x58
   12e80:	vmov.32	d8[1], r5
   12e84:	add	r0, r3, ip
   12e88:	mov	r2, ip
   12e8c:	vorr	q8, q4, q4
   12e90:	ldrh	r4, [r3], #2
   12e94:	subs	r2, r2, #2
   12e98:	strh	r4, [sp, #88]	; 0x58
   12e9c:	vld1.16	{d18[0]}, [r1 :16]
   12ea0:	add	r4, pc, #984	; 0x3d8
   12ea4:	vld1.64	{d20-d21}, [r4 :128]
   12ea8:	vmovl.u8	q9, d18
   12eac:	vmovl.u16	q9, d18
   12eb0:	vceq.i32	d18, d18, d10
   12eb4:	vmovl.u32	q9, d18
   12eb8:	vand	q9, q9, q10
   12ebc:	vadd.i64	q8, q8, q9
   12ec0:	bne	12e90 <__assert_fail@plt+0x18e0>
   12ec4:	vorr	d18, d17, d17
   12ec8:	cmp	r6, ip
   12ecc:	vadd.i64	q8, q8, q9
   12ed0:	vmov.32	r8, d16[1]
   12ed4:	vmov.32	r4, d16[0]
   12ed8:	beq	12d94 <__assert_fail@plt+0x17e4>
   12edc:	ldrb	r3, [r0], #1
   12ee0:	adds	r1, r4, #1
   12ee4:	adc	r2, r8, #0
   12ee8:	cmp	r3, #10
   12eec:	moveq	r4, r1
   12ef0:	moveq	r8, r2
   12ef4:	cmp	r7, r0
   12ef8:	bne	12edc <__assert_fail@plt+0x192c>
   12efc:	b	12d94 <__assert_fail@plt+0x17e4>
   12f00:	mov	r0, #1
   12f04:	mov	r9, #0
   12f08:	mov	r5, #0
   12f0c:	mov	ip, #0
   12f10:	mov	lr, #0
   12f14:	mov	r6, #0
   12f18:	mov	r3, #0
   12f1c:	mov	r2, #0
   12f20:	str	r0, [sp, #44]	; 0x2c
   12f24:	mov	r0, #0
   12f28:	b	13468 <__assert_fail@plt+0x1eb8>
   12f2c:	ldr	r0, [r9, #24]
   12f30:	and	r0, r0, #53248	; 0xd000
   12f34:	orr	r0, r0, #8192	; 0x2000
   12f38:	cmp	r0, #40960	; 0xa000
   12f3c:	bne	1332c <__assert_fail@plt+0x1d7c>
   12f40:	ldr	r0, [r9, #60]	; 0x3c
   12f44:	mov	r6, #0
   12f48:	cmp	r0, #0
   12f4c:	mov	r0, #0
   12f50:	str	r0, [sp, #56]	; 0x38
   12f54:	blt	12ca8 <__assert_fail@plt+0x16f8>
   12f58:	ldr	r8, [fp, #12]
   12f5c:	ldr	r6, [r9, #56]	; 0x38
   12f60:	cmn	r8, #1
   12f64:	ble	133dc <__assert_fail@plt+0x1e2c>
   12f68:	ldr	r5, [fp, #8]
   12f6c:	b	133fc <__assert_fail@plt+0x1e4c>
   12f70:	mov	r0, #0
   12f74:	mov	r7, #0
   12f78:	add	r9, sp, #104	; 0x68
   12f7c:	mov	r8, #0
   12f80:	mov	sl, #0
   12f84:	mov	r6, #0
   12f88:	str	r0, [sp, #56]	; 0x38
   12f8c:	mov	r0, #0
   12f90:	str	r0, [sp, #52]	; 0x34
   12f94:	mov	r0, #0
   12f98:	str	r0, [sp, #48]	; 0x30
   12f9c:	mov	r0, #0
   12fa0:	str	r0, [sp, #72]	; 0x48
   12fa4:	mov	r0, #0
   12fa8:	str	r0, [sp, #68]	; 0x44
   12fac:	mov	r0, #0
   12fb0:	str	r0, [sp, #80]	; 0x50
   12fb4:	mov	r0, #0
   12fb8:	str	r0, [sp, #84]	; 0x54
   12fbc:	b	12fec <__assert_fail@plt+0x1a3c>
   12fc0:	str	r7, [sp, #80]	; 0x50
   12fc4:	ldr	r7, [sp, #40]	; 0x28
   12fc8:	ldr	r0, [sp, #76]	; 0x4c
   12fcc:	add	r9, sp, #104	; 0x68
   12fd0:	str	r3, [sp, #84]	; 0x54
   12fd4:	str	r2, [sp, #68]	; 0x44
   12fd8:	str	ip, [sp, #72]	; 0x48
   12fdc:	adds	r7, r7, r0
   12fe0:	ldr	r0, [sp, #56]	; 0x38
   12fe4:	adc	r0, r0, #0
   12fe8:	str	r0, [sp, #56]	; 0x38
   12fec:	ldr	r0, [sp, #44]	; 0x2c
   12ff0:	mov	r1, r9
   12ff4:	mov	r2, #16384	; 0x4000
   12ff8:	bl	16044 <__assert_fail@plt+0x4a94>
   12ffc:	cmp	r0, #0
   13000:	beq	1333c <__assert_fail@plt+0x1d8c>
   13004:	cmn	r0, #1
   13008:	beq	13348 <__assert_fail@plt+0x1d98>
   1300c:	str	r7, [sp, #40]	; 0x28
   13010:	ldr	ip, [sp, #72]	; 0x48
   13014:	ldr	r2, [sp, #68]	; 0x44
   13018:	ldr	r7, [sp, #80]	; 0x50
   1301c:	ldr	r3, [sp, #84]	; 0x54
   13020:	mov	r5, r0
   13024:	str	r0, [sp, #76]	; 0x4c
   13028:	ldrb	r4, [r9], #1
   1302c:	sub	r0, r4, #9
   13030:	cmp	r0, #23
   13034:	bhi	13100 <__assert_fail@plt+0x1b50>
   13038:	add	r1, pc, #0
   1303c:	ldr	pc, [r1, r0, lsl #2]
   13040:	andeq	r3, r1, r0, lsr #1
   13044:	andeq	r3, r1, r0, asr #1
   13048:	ldrdeq	r3, [r1], -r4
   1304c:	ldrdeq	r3, [r1], -r8
   13050:	ldrdeq	r3, [r1], -r8
   13054:	andeq	r3, r1, r0, lsl #2
   13058:	andeq	r3, r1, r0, lsl #2
   1305c:	andeq	r3, r1, r0, lsl #2
   13060:	andeq	r3, r1, r0, lsl #2
   13064:	andeq	r3, r1, r0, lsl #2
   13068:	andeq	r3, r1, r0, lsl #2
   1306c:	andeq	r3, r1, r0, lsl #2
   13070:	andeq	r3, r1, r0, lsl #2
   13074:	andeq	r3, r1, r0, lsl #2
   13078:	andeq	r3, r1, r0, lsl #2
   1307c:	andeq	r3, r1, r0, lsl #2
   13080:	andeq	r3, r1, r0, lsl #2
   13084:	andeq	r3, r1, r0, lsl #2
   13088:	andeq	r3, r1, r0, lsl #2
   1308c:	andeq	r3, r1, r0, lsl #2
   13090:	andeq	r3, r1, r0, lsl #2
   13094:	andeq	r3, r1, r0, lsl #2
   13098:	andeq	r3, r1, r0, lsl #2
   1309c:	andeq	r3, r1, ip, ror #2
   130a0:	adds	r0, sl, #8
   130a4:	adc	r1, r6, #0
   130a8:	mov	r6, r2
   130ac:	and	r2, sl, #7
   130b0:	subs	sl, r0, r2
   130b4:	mov	r2, r6
   130b8:	sbc	r6, r1, #0
   130bc:	b	131d4 <__assert_fail@plt+0x1c24>
   130c0:	ldr	r0, [sp, #52]	; 0x34
   130c4:	adds	r0, r0, #1
   130c8:	str	r0, [sp, #52]	; 0x34
   130cc:	ldr	r0, [sp, #48]	; 0x30
   130d0:	adc	r0, r0, #0
   130d4:	str	r0, [sp, #48]	; 0x30
   130d8:	subs	r0, ip, sl
   130dc:	sbcs	r0, r2, r6
   130e0:	mov	r0, #0
   130e4:	movwcc	r0, #1
   130e8:	cmp	r0, #0
   130ec:	movne	r2, r6
   130f0:	movne	ip, sl
   130f4:	mov	sl, #0
   130f8:	mov	r6, #0
   130fc:	b	131d4 <__assert_fail@plt+0x1c24>
   13100:	str	r3, [sp, #84]	; 0x54
   13104:	str	r2, [sp, #68]	; 0x44
   13108:	str	ip, [sp, #72]	; 0x48
   1310c:	bl	11454 <__ctype_b_loc@plt>
   13110:	ldr	r0, [r0]
   13114:	add	r0, r0, r4, lsl #1
   13118:	ldrh	r0, [r0]
   1311c:	tst	r0, #16384	; 0x4000
   13120:	beq	13154 <__assert_fail@plt+0x1ba4>
   13124:	adds	sl, sl, #1
   13128:	adc	r6, r6, #0
   1312c:	tst	r0, #8192	; 0x2000
   13130:	bne	131c8 <__assert_fail@plt+0x1c18>
   13134:	mov	r0, r4
   13138:	bl	114d8 <btowc@plt>
   1313c:	movw	r1, #37280	; 0x91a0
   13140:	movt	r1, #2
   13144:	ldrb	r1, [r1]
   13148:	cmp	r1, #0
   1314c:	beq	13178 <__assert_fail@plt+0x1bc8>
   13150:	mov	r8, #1
   13154:	ldr	ip, [sp, #72]	; 0x48
   13158:	ldr	r2, [sp, #68]	; 0x44
   1315c:	ldr	r3, [sp, #84]	; 0x54
   13160:	subs	r5, r5, #1
   13164:	bne	13028 <__assert_fail@plt+0x1a78>
   13168:	b	12fc0 <__assert_fail@plt+0x1a10>
   1316c:	adds	sl, sl, #1
   13170:	adc	r6, r6, #0
   13174:	b	131d4 <__assert_fail@plt+0x1c24>
   13178:	movw	r1, #8238	; 0x202e
   1317c:	cmp	r0, r1
   13180:	bgt	13194 <__assert_fail@plt+0x1be4>
   13184:	cmp	r0, #160	; 0xa0
   13188:	beq	131c8 <__assert_fail@plt+0x1c18>
   1318c:	movw	r1, #8199	; 0x2007
   13190:	b	131a4 <__assert_fail@plt+0x1bf4>
   13194:	movw	r1, #8239	; 0x202f
   13198:	cmp	r0, r1
   1319c:	beq	131c8 <__assert_fail@plt+0x1c18>
   131a0:	movw	r1, #8288	; 0x2060
   131a4:	ldr	ip, [sp, #72]	; 0x48
   131a8:	ldr	r2, [sp, #68]	; 0x44
   131ac:	ldr	r3, [sp, #84]	; 0x54
   131b0:	cmp	r0, r1
   131b4:	beq	131d4 <__assert_fail@plt+0x1c24>
   131b8:	mov	r8, #1
   131bc:	subs	r5, r5, #1
   131c0:	bne	13028 <__assert_fail@plt+0x1a78>
   131c4:	b	12fc0 <__assert_fail@plt+0x1a10>
   131c8:	ldr	ip, [sp, #72]	; 0x48
   131cc:	ldr	r2, [sp, #68]	; 0x44
   131d0:	ldr	r3, [sp, #84]	; 0x54
   131d4:	and	r0, r8, #1
   131d8:	mov	r8, #0
   131dc:	adds	r7, r7, r0
   131e0:	adc	r3, r3, #0
   131e4:	subs	r5, r5, #1
   131e8:	bne	13028 <__assert_fail@plt+0x1a78>
   131ec:	b	12fc0 <__assert_fail@plt+0x1a10>
   131f0:	movw	r8, #37280	; 0x91a0
   131f4:	mov	r0, #1
   131f8:	movt	r8, #2
   131fc:	b	13248 <__assert_fail@plt+0x1c98>
   13200:	bl	114a8 <__errno_location@plt>
   13204:	ldr	r2, [sp, #28]
   13208:	ldr	r4, [r0]
   1320c:	mov	r0, #0
   13210:	mov	r1, #3
   13214:	mov	r7, #0
   13218:	bl	15a40 <__assert_fail@plt+0x4490>
   1321c:	movw	r2, #33260	; 0x81ec
   13220:	mov	r3, r0
   13224:	mov	r0, #0
   13228:	mov	r1, r4
   1322c:	movt	r2, #1
   13230:	bl	113e8 <error@plt>
   13234:	mov	r0, #0
   13238:	mov	r4, #0
   1323c:	mov	r5, #0
   13240:	str	r0, [sp, #56]	; 0x38
   13244:	mov	r0, #0
   13248:	str	r0, [sp, #44]	; 0x2c
   1324c:	ldr	sl, [sp, #32]
   13250:	mov	r0, #0
   13254:	mov	ip, #0
   13258:	mov	lr, #0
   1325c:	mov	r6, #0
   13260:	mov	r3, #0
   13264:	mov	r2, #0
   13268:	mov	r9, r4
   1326c:	str	r0, [sp, #76]	; 0x4c
   13270:	b	13470 <__assert_fail@plt+0x1ec0>
   13274:	mov	r0, #1
   13278:	str	r0, [sp, #44]	; 0x2c
   1327c:	b	132c8 <__assert_fail@plt+0x1d18>
   13280:	andeq	r0, r0, r1
   13284:	andeq	r0, r0, r0
   13288:	andeq	r0, r0, r1
   1328c:	andeq	r0, r0, r0
   13290:	bl	114a8 <__errno_location@plt>
   13294:	ldr	r2, [sp, #28]
   13298:	ldr	r6, [r0]
   1329c:	mov	r0, #0
   132a0:	mov	r1, #3
   132a4:	str	r0, [sp, #44]	; 0x2c
   132a8:	mov	r0, #0
   132ac:	bl	15a40 <__assert_fail@plt+0x4490>
   132b0:	movw	r2, #33260	; 0x81ec
   132b4:	mov	r3, r0
   132b8:	mov	r0, #0
   132bc:	mov	r1, r6
   132c0:	movt	r2, #1
   132c4:	bl	113e8 <error@plt>
   132c8:	mov	r3, r4
   132cc:	ldr	ip, [sp, #72]	; 0x48
   132d0:	ldr	r4, [sp, #64]	; 0x40
   132d4:	ldr	lr, [sp, #68]	; 0x44
   132d8:	ldr	r5, [sp, #60]	; 0x3c
   132dc:	ldr	sl, [sp, #84]	; 0x54
   132e0:	ldr	r9, [sp, #76]	; 0x4c
   132e4:	mov	r0, #0
   132e8:	ldr	r7, [sp, #40]	; 0x28
   132ec:	mov	r6, r8
   132f0:	movw	r8, #37280	; 0x91a0
   132f4:	movt	r8, #2
   132f8:	subs	r1, ip, r4
   132fc:	sbcs	r1, lr, r5
   13300:	movwcc	r0, #1
   13304:	cmp	r0, #0
   13308:	and	r0, sl, #1
   1330c:	movne	lr, r5
   13310:	movne	ip, r4
   13314:	adds	r2, r9, r0
   13318:	ldr	r0, [sp, #80]	; 0x50
   1331c:	ldr	r9, [sp, #52]	; 0x34
   13320:	ldr	r5, [sp, #48]	; 0x30
   13324:	adc	r0, r0, #0
   13328:	b	13468 <__assert_fail@plt+0x1eb8>
   1332c:	mov	r0, #0
   13330:	mov	r6, #0
   13334:	str	r0, [sp, #56]	; 0x38
   13338:	b	12ca8 <__assert_fail@plt+0x16f8>
   1333c:	mov	r0, #1
   13340:	str	r0, [sp, #44]	; 0x2c
   13344:	b	13380 <__assert_fail@plt+0x1dd0>
   13348:	bl	114a8 <__errno_location@plt>
   1334c:	ldr	r2, [sp, #28]
   13350:	ldr	r5, [r0]
   13354:	mov	r0, #0
   13358:	mov	r1, #3
   1335c:	str	r0, [sp, #44]	; 0x2c
   13360:	mov	r0, #0
   13364:	bl	15a40 <__assert_fail@plt+0x4490>
   13368:	movw	r2, #33260	; 0x81ec
   1336c:	mov	r3, r0
   13370:	mov	r0, #0
   13374:	mov	r1, r5
   13378:	movt	r2, #1
   1337c:	bl	113e8 <error@plt>
   13380:	ldr	ip, [sp, #72]	; 0x48
   13384:	ldr	lr, [sp, #68]	; 0x44
   13388:	ldr	r1, [sp, #80]	; 0x50
   1338c:	ldr	r9, [sp, #52]	; 0x34
   13390:	ldr	r5, [sp, #48]	; 0x30
   13394:	mov	r3, #0
   13398:	subs	r0, ip, sl
   1339c:	sbcs	r0, lr, r6
   133a0:	mov	r0, #0
   133a4:	movwcc	r0, #1
   133a8:	cmp	r0, #0
   133ac:	and	r0, r8, #1
   133b0:	movw	r8, #37280	; 0x91a0
   133b4:	movne	lr, r6
   133b8:	movne	ip, sl
   133bc:	adds	r2, r1, r0
   133c0:	ldr	r0, [sp, #84]	; 0x54
   133c4:	ldr	sl, [sp, #32]
   133c8:	mov	r6, #0
   133cc:	movt	r8, #2
   133d0:	adc	r0, r0, #0
   133d4:	str	r0, [sp, #76]	; 0x4c
   133d8:	b	13470 <__assert_fail@plt+0x1ec0>
   133dc:	mov	r0, #1
   133e0:	mov	r2, #0
   133e4:	mov	r3, #0
   133e8:	str	r0, [sp]
   133ec:	ldr	r0, [sp, #44]	; 0x2c
   133f0:	bl	113b8 <lseek64@plt>
   133f4:	mov	r5, r0
   133f8:	mov	r8, r1
   133fc:	movw	r0, #37280	; 0x91a0
   13400:	movt	r0, #2
   13404:	ldr	r0, [r0, #8]
   13408:	udiv	r1, r6, r0
   1340c:	mls	r0, r1, r0, r6
   13410:	cmp	r0, #0
   13414:	beq	13560 <__assert_fail@plt+0x1fb0>
   13418:	subs	r7, r6, r5
   1341c:	mov	r0, #0
   13420:	mov	r9, #0
   13424:	mov	r5, #0
   13428:	mov	ip, #0
   1342c:	mov	lr, #0
   13430:	mov	r6, #0
   13434:	mov	r3, #0
   13438:	mov	r2, #0
   1343c:	rscs	r1, r8, #0
   13440:	movw	r8, #37280	; 0x91a0
   13444:	movwlt	r0, #1
   13448:	movt	r8, #2
   1344c:	cmp	r0, #0
   13450:	mov	r0, #1
   13454:	movwne	r1, #0
   13458:	str	r0, [sp, #44]	; 0x2c
   1345c:	mov	r0, #0
   13460:	movwne	r7, #0
   13464:	str	r1, [sp, #56]	; 0x38
   13468:	str	r0, [sp, #76]	; 0x4c
   1346c:	ldr	sl, [sp, #32]
   13470:	ldr	r1, [sp, #36]	; 0x24
   13474:	ldrb	r0, [r8, #2]
   13478:	ldr	r4, [sp, #56]	; 0x38
   1347c:	str	ip, [sp, #72]	; 0x48
   13480:	str	lr, [sp, #68]	; 0x44
   13484:	eor	r1, r1, #1
   13488:	ands	r0, r0, r1
   1348c:	mov	r1, r5
   13490:	movne	r6, r7
   13494:	movne	r3, r4
   13498:	add	r0, sp, #12
   1349c:	str	r6, [sp, #80]	; 0x50
   134a0:	str	r6, [sp]
   134a4:	str	r3, [sp, #84]	; 0x54
   134a8:	stmib	sp, {r3, r7}
   134ac:	stm	r0, {r4, ip, lr}
   134b0:	str	sl, [sp, #24]
   134b4:	mov	sl, r5
   134b8:	mov	r0, r9
   134bc:	mov	r6, r2
   134c0:	ldr	r5, [sp, #76]	; 0x4c
   134c4:	mov	r3, r5
   134c8:	bl	12558 <__assert_fail@plt+0xfa8>
   134cc:	ldr	r0, [r8, #56]	; 0x38
   134d0:	ldr	r2, [sp, #80]	; 0x50
   134d4:	add	r3, r8, #24
   134d8:	adds	r0, r0, r9
   134dc:	str	r0, [r8, #56]	; 0x38
   134e0:	ldr	r0, [r8, #60]	; 0x3c
   134e4:	adc	r0, r0, sl
   134e8:	str	r0, [r8, #60]	; 0x3c
   134ec:	ldr	r0, [r8, #48]	; 0x30
   134f0:	adds	r0, r0, r6
   134f4:	str	r0, [r8, #48]	; 0x30
   134f8:	ldr	r0, [r8, #52]	; 0x34
   134fc:	ldr	r1, [r8, #40]	; 0x28
   13500:	adc	r0, r0, r5
   13504:	adds	r1, r1, r2
   13508:	str	r1, [r8, #40]	; 0x28
   1350c:	str	r0, [r8, #52]	; 0x34
   13510:	ldr	r1, [sp, #84]	; 0x54
   13514:	ldr	r0, [r8, #44]	; 0x2c
   13518:	adc	r0, r0, r1
   1351c:	str	r0, [r8, #44]	; 0x2c
   13520:	ldm	r3, {r0, r1, r2, r3}
   13524:	ldr	r9, [sp, #72]	; 0x48
   13528:	ldr	sl, [sp, #68]	; 0x44
   1352c:	adds	r2, r2, r7
   13530:	str	r2, [r8, #32]
   13534:	adc	r2, r3, r4
   13538:	subs	r0, r0, r9
   1353c:	sbcs	r0, r1, sl
   13540:	str	r2, [r8, #36]	; 0x24
   13544:	strcc	r9, [r8, #24]
   13548:	strcc	sl, [r8, #28]
   1354c:	ldr	r0, [sp, #44]	; 0x2c
   13550:	sub	sp, fp, #56	; 0x38
   13554:	vpop	{d8-d10}
   13558:	add	sp, sp, #4
   1355c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13560:	ldr	r0, [r9, #64]	; 0x40
   13564:	movw	r2, #513	; 0x201
   13568:	movw	r1, #513	; 0x201
   1356c:	cmp	r0, #536870913	; 0x20000001
   13570:	addcc	r2, r0, #1
   13574:	cmp	r0, #0
   13578:	movle	r2, r1
   1357c:	udiv	r0, r6, r2
   13580:	mov	r6, #0
   13584:	mul	r4, r0, r2
   13588:	subs	r0, r5, r4
   1358c:	sbcs	r0, r8, #0
   13590:	mov	r0, #0
   13594:	str	r0, [sp, #56]	; 0x38
   13598:	bcs	12ca8 <__assert_fail@plt+0x16f8>
   1359c:	mov	r0, #1
   135a0:	mov	r2, r4
   135a4:	mov	r3, #0
   135a8:	mvn	r9, #0
   135ac:	mov	r6, #0
   135b0:	str	r0, [sp]
   135b4:	ldr	r0, [sp, #44]	; 0x2c
   135b8:	bl	113b8 <lseek64@plt>
   135bc:	subs	r0, r9, r0
   135c0:	sbcs	r0, r9, r1
   135c4:	movwlt	r6, #1
   135c8:	subs	r0, r4, r5
   135cc:	rsc	r1, r8, #0
   135d0:	cmp	r6, #0
   135d4:	moveq	r0, r6
   135d8:	moveq	r1, r6
   135dc:	mov	r6, r0
   135e0:	str	r1, [sp, #56]	; 0x38
   135e4:	b	12ca8 <__assert_fail@plt+0x16f8>
   135e8:	push	{r4, sl, fp, lr}
   135ec:	add	fp, sp, #8
   135f0:	mov	r4, r0
   135f4:	mov	r0, #24
   135f8:	bl	16d60 <__assert_fail@plt+0x57b0>
   135fc:	cmp	r0, #0
   13600:	movne	r1, #0
   13604:	strne	r1, [r0]
   13608:	strne	r4, [r0, #16]
   1360c:	strne	r4, [r0, #20]
   13610:	popne	{r4, sl, fp, pc}
   13614:	mov	r0, #0
   13618:	pop	{r4, sl, fp, pc}
   1361c:	push	{r4, sl, fp, lr}
   13620:	add	fp, sp, #8
   13624:	mov	r4, r0
   13628:	mov	r0, #24
   1362c:	bl	16d60 <__assert_fail@plt+0x57b0>
   13630:	cmp	r0, #0
   13634:	moveq	r0, #0
   13638:	popeq	{r4, sl, fp, pc}
   1363c:	mov	r1, r0
   13640:	vmov.i32	q8, #0	; 0x00000000
   13644:	str	r4, [r1], #4
   13648:	vst1.32	{d16-d17}, [r1]
   1364c:	pop	{r4, sl, fp, pc}
   13650:	push	{r4, r5, r6, sl, fp, lr}
   13654:	add	fp, sp, #16
   13658:	ldr	r3, [r0]
   1365c:	mov	r4, r1
   13660:	mov	r5, r0
   13664:	cmp	r3, #0
   13668:	beq	136a4 <__assert_fail@plt+0x20f4>
   1366c:	add	r0, r5, #8
   13670:	add	r1, r5, #12
   13674:	mov	r2, #0
   13678:	mov	r6, #0
   1367c:	bl	11574 <getdelim@plt>
   13680:	cmn	r0, #1
   13684:	ble	136d4 <__assert_fail@plt+0x2124>
   13688:	mov	r0, #1
   1368c:	str	r0, [r4]
   13690:	ldmib	r5, {r0, r6}
   13694:	add	r0, r0, #1
   13698:	str	r0, [r5, #4]
   1369c:	mov	r0, r6
   136a0:	pop	{r4, r5, r6, sl, fp, pc}
   136a4:	ldr	r0, [r5, #20]
   136a8:	ldr	r0, [r0]
   136ac:	cmp	r0, #0
   136b0:	beq	136f4 <__assert_fail@plt+0x2144>
   136b4:	mov	r0, #1
   136b8:	str	r0, [r4]
   136bc:	ldr	r0, [r5, #20]
   136c0:	add	r1, r0, #4
   136c4:	str	r1, [r5, #20]
   136c8:	ldr	r6, [r0]
   136cc:	mov	r0, r6
   136d0:	pop	{r4, r5, r6, sl, fp, pc}
   136d4:	ldr	r0, [r5]
   136d8:	bl	1146c <feof@plt>
   136dc:	cmp	r0, #0
   136e0:	mov	r1, #2
   136e4:	mov	r0, r6
   136e8:	movweq	r1, #4
   136ec:	str	r1, [r4]
   136f0:	pop	{r4, r5, r6, sl, fp, pc}
   136f4:	mov	r0, #2
   136f8:	mov	r6, #0
   136fc:	str	r0, [r4]
   13700:	mov	r0, r6
   13704:	pop	{r4, r5, r6, sl, fp, pc}
   13708:	ldr	r1, [r0]
   1370c:	cmp	r1, #0
   13710:	ldrne	r0, [r0, #4]
   13714:	bxne	lr
   13718:	ldr	r1, [r0, #16]
   1371c:	ldr	r0, [r0, #20]
   13720:	sub	r0, r0, r1
   13724:	asr	r0, r0, #2
   13728:	bx	lr
   1372c:	push	{r4, sl, fp, lr}
   13730:	add	fp, sp, #8
   13734:	mov	r4, r0
   13738:	ldr	r0, [r0]
   1373c:	cmp	r0, #0
   13740:	beq	1374c <__assert_fail@plt+0x219c>
   13744:	ldr	r0, [r4, #8]
   13748:	bl	139a8 <__assert_fail@plt+0x23f8>
   1374c:	mov	r0, r4
   13750:	pop	{r4, sl, fp, lr}
   13754:	b	139a8 <__assert_fail@plt+0x23f8>
   13758:	movw	r1, #37344	; 0x91e0
   1375c:	movt	r1, #2
   13760:	str	r0, [r1, #4]
   13764:	bx	lr
   13768:	movw	r1, #37344	; 0x91e0
   1376c:	movt	r1, #2
   13770:	strb	r0, [r1]
   13774:	bx	lr
   13778:	push	{r4, r5, r6, sl, fp, lr}
   1377c:	add	fp, sp, #16
   13780:	sub	sp, sp, #8
   13784:	movw	r0, #37268	; 0x9194
   13788:	movt	r0, #2
   1378c:	ldr	r0, [r0]
   13790:	bl	16de4 <__assert_fail@plt+0x5834>
   13794:	cmp	r0, #0
   13798:	beq	137c0 <__assert_fail@plt+0x2210>
   1379c:	movw	r5, #37344	; 0x91e0
   137a0:	movt	r5, #2
   137a4:	ldrb	r0, [r5]
   137a8:	cmp	r0, #0
   137ac:	beq	137ec <__assert_fail@plt+0x223c>
   137b0:	bl	114a8 <__errno_location@plt>
   137b4:	ldr	r0, [r0]
   137b8:	cmp	r0, #32
   137bc:	bne	137ec <__assert_fail@plt+0x223c>
   137c0:	movw	r0, #37256	; 0x9188
   137c4:	movt	r0, #2
   137c8:	ldr	r0, [r0]
   137cc:	bl	16de4 <__assert_fail@plt+0x5834>
   137d0:	cmp	r0, #0
   137d4:	subeq	sp, fp, #16
   137d8:	popeq	{r4, r5, r6, sl, fp, pc}
   137dc:	movw	r0, #37164	; 0x912c
   137e0:	movt	r0, #2
   137e4:	ldr	r0, [r0]
   137e8:	bl	1131c <_exit@plt>
   137ec:	movw	r1, #33244	; 0x81dc
   137f0:	mov	r0, #0
   137f4:	mov	r2, #5
   137f8:	movt	r1, #1
   137fc:	bl	1134c <dcgettext@plt>
   13800:	ldr	r6, [r5, #4]
   13804:	mov	r4, r0
   13808:	bl	114a8 <__errno_location@plt>
   1380c:	ldr	r5, [r0]
   13810:	cmp	r6, #0
   13814:	bne	13830 <__assert_fail@plt+0x2280>
   13818:	movw	r2, #33260	; 0x81ec
   1381c:	mov	r0, #0
   13820:	mov	r1, r5
   13824:	mov	r3, r4
   13828:	movt	r2, #1
   1382c:	b	13850 <__assert_fail@plt+0x22a0>
   13830:	mov	r0, r6
   13834:	bl	15964 <__assert_fail@plt+0x43b4>
   13838:	movw	r2, #33256	; 0x81e8
   1383c:	mov	r3, r0
   13840:	str	r4, [sp]
   13844:	mov	r0, #0
   13848:	mov	r1, r5
   1384c:	movt	r2, #1
   13850:	bl	113e8 <error@plt>
   13854:	movw	r0, #37164	; 0x912c
   13858:	movt	r0, #2
   1385c:	ldr	r0, [r0]
   13860:	bl	1131c <_exit@plt>
   13864:	b	112c8 <posix_fadvise64@plt>
   13868:	cmp	r0, #0
   1386c:	bxeq	lr
   13870:	push	{r4, sl, fp, lr}
   13874:	add	fp, sp, #8
   13878:	sub	sp, sp, #16
   1387c:	mov	r4, r1
   13880:	bl	114fc <fileno@plt>
   13884:	mov	r1, #0
   13888:	mov	r2, #0
   1388c:	mov	r3, #0
   13890:	str	r1, [sp]
   13894:	stmib	sp, {r1, r4}
   13898:	bl	112c8 <posix_fadvise64@plt>
   1389c:	sub	sp, fp, #8
   138a0:	pop	{r4, sl, fp, pc}
   138a4:	push	{r4, r5, r6, sl, fp, lr}
   138a8:	add	fp, sp, #16
   138ac:	sub	sp, sp, #8
   138b0:	mov	r4, r0
   138b4:	bl	114fc <fileno@plt>
   138b8:	cmn	r0, #1
   138bc:	ble	13930 <__assert_fail@plt+0x2380>
   138c0:	mov	r0, r4
   138c4:	bl	11430 <__freading@plt>
   138c8:	cmp	r0, #0
   138cc:	beq	138f8 <__assert_fail@plt+0x2348>
   138d0:	mov	r0, r4
   138d4:	bl	114fc <fileno@plt>
   138d8:	mov	r1, #1
   138dc:	mov	r2, #0
   138e0:	mov	r3, #0
   138e4:	str	r1, [sp]
   138e8:	bl	113b8 <lseek64@plt>
   138ec:	and	r0, r0, r1
   138f0:	cmn	r0, #1
   138f4:	beq	13930 <__assert_fail@plt+0x2380>
   138f8:	mov	r0, r4
   138fc:	bl	13940 <__assert_fail@plt+0x2390>
   13900:	cmp	r0, #0
   13904:	beq	13930 <__assert_fail@plt+0x2380>
   13908:	bl	114a8 <__errno_location@plt>
   1390c:	ldr	r6, [r0]
   13910:	mov	r5, r0
   13914:	mov	r0, r4
   13918:	bl	11514 <fclose@plt>
   1391c:	cmp	r6, #0
   13920:	strne	r6, [r5]
   13924:	mvnne	r0, #0
   13928:	sub	sp, fp, #16
   1392c:	pop	{r4, r5, r6, sl, fp, pc}
   13930:	mov	r0, r4
   13934:	sub	sp, fp, #16
   13938:	pop	{r4, r5, r6, sl, fp, lr}
   1393c:	b	11514 <fclose@plt>
   13940:	push	{r4, sl, fp, lr}
   13944:	add	fp, sp, #8
   13948:	sub	sp, sp, #8
   1394c:	mov	r4, r0
   13950:	cmp	r0, #0
   13954:	beq	13970 <__assert_fail@plt+0x23c0>
   13958:	mov	r0, r4
   1395c:	bl	11430 <__freading@plt>
   13960:	cmp	r0, #0
   13964:	ldrbne	r0, [r4, #1]
   13968:	tstne	r0, #1
   1396c:	bne	13980 <__assert_fail@plt+0x23d0>
   13970:	mov	r0, r4
   13974:	sub	sp, fp, #8
   13978:	pop	{r4, sl, fp, lr}
   1397c:	b	112e0 <fflush@plt>
   13980:	mov	r0, #1
   13984:	mov	r2, #0
   13988:	mov	r3, #0
   1398c:	str	r0, [sp]
   13990:	mov	r0, r4
   13994:	bl	139d0 <__assert_fail@plt+0x2420>
   13998:	mov	r0, r4
   1399c:	sub	sp, fp, #8
   139a0:	pop	{r4, sl, fp, lr}
   139a4:	b	112e0 <fflush@plt>
   139a8:	push	{r4, r5, r6, sl, fp, lr}
   139ac:	add	fp, sp, #16
   139b0:	mov	r4, r0
   139b4:	bl	114a8 <__errno_location@plt>
   139b8:	ldr	r6, [r0]
   139bc:	mov	r5, r0
   139c0:	mov	r0, r4
   139c4:	bl	11304 <free@plt>
   139c8:	str	r6, [r5]
   139cc:	pop	{r4, r5, r6, sl, fp, pc}
   139d0:	push	{r4, r5, r6, r7, fp, lr}
   139d4:	add	fp, sp, #16
   139d8:	sub	sp, sp, #8
   139dc:	mov	r4, r0
   139e0:	ldr	r0, [r0, #4]
   139e4:	mov	r5, r3
   139e8:	mov	r6, r2
   139ec:	ldr	r1, [r4, #8]
   139f0:	cmp	r1, r0
   139f4:	bne	13a10 <__assert_fail@plt+0x2460>
   139f8:	ldrd	r0, [r4, #16]
   139fc:	cmp	r1, r0
   13a00:	bne	13a10 <__assert_fail@plt+0x2460>
   13a04:	ldr	r0, [r4, #36]	; 0x24
   13a08:	cmp	r0, #0
   13a0c:	beq	13a28 <__assert_fail@plt+0x2478>
   13a10:	mov	r0, r4
   13a14:	mov	r2, r6
   13a18:	mov	r3, r5
   13a1c:	sub	sp, fp, #16
   13a20:	pop	{r4, r5, r6, r7, fp, lr}
   13a24:	b	11520 <fseeko64@plt>
   13a28:	ldr	r7, [fp, #8]
   13a2c:	mov	r0, r4
   13a30:	bl	114fc <fileno@plt>
   13a34:	mov	r2, r6
   13a38:	mov	r3, r5
   13a3c:	str	r7, [sp]
   13a40:	bl	113b8 <lseek64@plt>
   13a44:	and	r2, r0, r1
   13a48:	cmn	r2, #1
   13a4c:	mvneq	r0, #0
   13a50:	subeq	sp, fp, #16
   13a54:	popeq	{r4, r5, r6, r7, fp, pc}
   13a58:	strd	r0, [r4, #80]	; 0x50
   13a5c:	ldr	r0, [r4]
   13a60:	bic	r0, r0, #16
   13a64:	str	r0, [r4]
   13a68:	mov	r0, #0
   13a6c:	sub	sp, fp, #16
   13a70:	pop	{r4, r5, r6, r7, fp, pc}
   13a74:	push	{r4, r5, r6, sl, fp, lr}
   13a78:	add	fp, sp, #16
   13a7c:	mov	r5, r0
   13a80:	mov	r0, #0
   13a84:	mov	r4, r1
   13a88:	add	r6, r2, #19
   13a8c:	strb	r0, [r2, #20]
   13a90:	mov	r0, r5
   13a94:	mov	r1, r4
   13a98:	mov	r2, #10
   13a9c:	mov	r3, #0
   13aa0:	bl	177ac <_obstack_memory_used@@Base+0x518>
   13aa4:	add	r2, r0, r0, lsl #2
   13aa8:	sub	r2, r5, r2, lsl #1
   13aac:	orr	r2, r2, #48	; 0x30
   13ab0:	strb	r2, [r6], #-1
   13ab4:	rsbs	r2, r5, #9
   13ab8:	mov	r5, r0
   13abc:	rscs	r2, r4, #0
   13ac0:	mov	r4, r1
   13ac4:	bcc	13a90 <__assert_fail@plt+0x24e0>
   13ac8:	add	r0, r6, #1
   13acc:	pop	{r4, r5, r6, sl, fp, pc}
   13ad0:	push	{r4, sl, fp, lr}
   13ad4:	add	fp, sp, #8
   13ad8:	mov	r4, r0
   13adc:	bl	112ec <wcwidth@plt>
   13ae0:	cmn	r0, #1
   13ae4:	popgt	{r4, sl, fp, pc}
   13ae8:	mov	r0, r4
   13aec:	bl	1137c <iswcntrl@plt>
   13af0:	clz	r0, r0
   13af4:	lsr	r0, r0, #5
   13af8:	pop	{r4, sl, fp, pc}
   13afc:	push	{r4, r5, r6, sl, fp, lr}
   13b00:	add	fp, sp, #16
   13b04:	mov	r4, r0
   13b08:	mov	r0, r1
   13b0c:	mov	r5, r1
   13b10:	ldr	r1, [r0], #16
   13b14:	cmp	r1, r0
   13b18:	beq	13b24 <__assert_fail@plt+0x2574>
   13b1c:	mov	r6, r1
   13b20:	b	13b34 <__assert_fail@plt+0x2584>
   13b24:	ldr	r2, [r5, #4]
   13b28:	add	r6, r4, #16
   13b2c:	mov	r0, r6
   13b30:	bl	11328 <memcpy@plt>
   13b34:	str	r6, [r4]
   13b38:	ldr	r0, [r5, #4]
   13b3c:	str	r0, [r4, #4]
   13b40:	ldrb	r0, [r5, #8]
   13b44:	strb	r0, [r4, #8]
   13b48:	cmp	r0, #0
   13b4c:	ldrne	r0, [r5, #12]
   13b50:	strne	r0, [r4, #12]
   13b54:	pop	{r4, r5, r6, sl, fp, pc}
   13b58:	movw	r2, #33264	; 0x81f0
   13b5c:	ubfx	r1, r0, #5, #3
   13b60:	and	r0, r0, #31
   13b64:	movt	r2, #1
   13b68:	ldr	r1, [r2, r1, lsl #2]
   13b6c:	mov	r2, #1
   13b70:	and	r0, r1, r2, lsl r0
   13b74:	cmp	r0, #0
   13b78:	movwne	r0, #1
   13b7c:	bx	lr
   13b80:	push	{r4, r5, r6, r7, fp, lr}
   13b84:	add	fp, sp, #16
   13b88:	sub	sp, sp, #8
   13b8c:	add	r5, sp, #4
   13b90:	cmp	r0, #0
   13b94:	mov	r7, r2
   13b98:	mov	r4, r1
   13b9c:	movne	r5, r0
   13ba0:	mov	r0, r5
   13ba4:	bl	113dc <mbrtowc@plt>
   13ba8:	mov	r6, r0
   13bac:	cmp	r7, #0
   13bb0:	beq	13bd4 <__assert_fail@plt+0x2624>
   13bb4:	cmn	r6, #2
   13bb8:	bcc	13bd4 <__assert_fail@plt+0x2624>
   13bbc:	mov	r0, #0
   13bc0:	bl	16e68 <__assert_fail@plt+0x58b8>
   13bc4:	cmp	r0, #0
   13bc8:	ldrbeq	r0, [r4]
   13bcc:	moveq	r6, #1
   13bd0:	streq	r0, [r5]
   13bd4:	mov	r0, r6
   13bd8:	sub	sp, fp, #16
   13bdc:	pop	{r4, r5, r6, r7, fp, pc}
   13be0:	push	{r4, sl, fp, lr}
   13be4:	add	fp, sp, #8
   13be8:	sub	sp, sp, #64	; 0x40
   13bec:	mov	r0, #85	; 0x55
   13bf0:	bl	11358 <sysconf@plt>
   13bf4:	mov	r4, r0
   13bf8:	mov	r0, #30
   13bfc:	bl	11358 <sysconf@plt>
   13c00:	orr	r1, r0, r4
   13c04:	cmn	r1, #1
   13c08:	ble	13c28 <__assert_fail@plt+0x2678>
   13c0c:	vmov	s0, r0
   13c10:	vcvt.f64.s32	d16, s0
   13c14:	vmov	s0, r4
   13c18:	vcvt.f64.s32	d17, s0
   13c1c:	vmul.f64	d0, d17, d16
   13c20:	sub	sp, fp, #8
   13c24:	pop	{r4, sl, fp, pc}
   13c28:	mov	r0, sp
   13c2c:	bl	1140c <sysinfo@plt>
   13c30:	cmp	r0, #0
   13c34:	vldrne	d0, [pc, #36]	; 13c60 <__assert_fail@plt+0x26b0>
   13c38:	subne	sp, fp, #8
   13c3c:	popne	{r4, sl, fp, pc}
   13c40:	vldr	s0, [sp, #16]
   13c44:	vldr	s2, [sp, #52]	; 0x34
   13c48:	vcvt.f64.u32	d16, s2
   13c4c:	vcvt.f64.u32	d17, s0
   13c50:	vmul.f64	d0, d17, d16
   13c54:	sub	sp, fp, #8
   13c58:	pop	{r4, sl, fp, pc}
   13c5c:	nop	{0}
   13c60:	andeq	r0, r0, r0
   13c64:	orrsmi	r0, r0, r0
   13c68:	push	{r4, sl, fp, lr}
   13c6c:	add	fp, sp, #8
   13c70:	sub	sp, sp, #64	; 0x40
   13c74:	mov	r0, #86	; 0x56
   13c78:	bl	11358 <sysconf@plt>
   13c7c:	mov	r4, r0
   13c80:	mov	r0, #30
   13c84:	bl	11358 <sysconf@plt>
   13c88:	orr	r1, r0, r4
   13c8c:	cmp	r1, #0
   13c90:	blt	13cb0 <__assert_fail@plt+0x2700>
   13c94:	vmov	s0, r0
   13c98:	vcvt.f64.s32	d16, s0
   13c9c:	vmov	s0, r4
   13ca0:	vcvt.f64.s32	d17, s0
   13ca4:	vmul.f64	d0, d17, d16
   13ca8:	sub	sp, fp, #8
   13cac:	pop	{r4, sl, fp, pc}
   13cb0:	mov	r0, sp
   13cb4:	bl	1140c <sysinfo@plt>
   13cb8:	cmp	r0, #0
   13cbc:	beq	13d04 <__assert_fail@plt+0x2754>
   13cc0:	mov	r0, #85	; 0x55
   13cc4:	bl	11358 <sysconf@plt>
   13cc8:	mov	r4, r0
   13ccc:	mov	r0, #30
   13cd0:	bl	11358 <sysconf@plt>
   13cd4:	orr	r1, r0, r4
   13cd8:	cmn	r1, #1
   13cdc:	ble	13d2c <__assert_fail@plt+0x277c>
   13ce0:	vmov	s0, r0
   13ce4:	vcvt.f64.s32	d16, s0
   13ce8:	vmov	s0, r4
   13cec:	vcvt.f64.s32	d17, s0
   13cf0:	vmul.f64	d16, d17, d16
   13cf4:	vmov.f64	d17, #80	; 0x3e800000  0.250
   13cf8:	vmul.f64	d0, d16, d17
   13cfc:	sub	sp, fp, #8
   13d00:	pop	{r4, sl, fp, pc}
   13d04:	vldr	s0, [sp, #20]
   13d08:	vldr	s2, [sp, #28]
   13d0c:	vldr	s4, [sp, #52]	; 0x34
   13d10:	vcvt.f64.u32	d16, s2
   13d14:	vcvt.f64.u32	d17, s0
   13d18:	vcvt.f64.u32	d18, s4
   13d1c:	vadd.f64	d16, d17, d16
   13d20:	vmul.f64	d0, d16, d18
   13d24:	sub	sp, fp, #8
   13d28:	pop	{r4, sl, fp, pc}
   13d2c:	mov	r0, sp
   13d30:	bl	1140c <sysinfo@plt>
   13d34:	cmp	r0, #0
   13d38:	beq	13d50 <__assert_fail@plt+0x27a0>
   13d3c:	vldr	d16, [pc, #36]	; 13d68 <__assert_fail@plt+0x27b8>
   13d40:	vmov.f64	d17, #80	; 0x3e800000  0.250
   13d44:	vmul.f64	d0, d16, d17
   13d48:	sub	sp, fp, #8
   13d4c:	pop	{r4, sl, fp, pc}
   13d50:	vldr	s0, [sp, #16]
   13d54:	vldr	s2, [sp, #52]	; 0x34
   13d58:	vcvt.f64.u32	d16, s2
   13d5c:	vcvt.f64.u32	d17, s0
   13d60:	b	13cf0 <__assert_fail@plt+0x2740>
   13d64:	nop	{0}
   13d68:	andeq	r0, r0, r0
   13d6c:	orrsmi	r0, r0, r0
   13d70:	push	{r4, r5, fp, lr}
   13d74:	add	fp, sp, #8
   13d78:	cmp	r0, #0
   13d7c:	beq	13e10 <__assert_fail@plt+0x2860>
   13d80:	mov	r1, #47	; 0x2f
   13d84:	mov	r4, r0
   13d88:	bl	11544 <strrchr@plt>
   13d8c:	cmp	r0, #0
   13d90:	mov	r5, r4
   13d94:	addne	r5, r0, #1
   13d98:	sub	r0, r5, r4
   13d9c:	cmp	r0, #7
   13da0:	blt	13df4 <__assert_fail@plt+0x2844>
   13da4:	movw	r1, #33352	; 0x8248
   13da8:	sub	r0, r5, #7
   13dac:	mov	r2, #7
   13db0:	movt	r1, #1
   13db4:	bl	1158c <strncmp@plt>
   13db8:	cmp	r0, #0
   13dbc:	bne	13df4 <__assert_fail@plt+0x2844>
   13dc0:	movw	r1, #33360	; 0x8250
   13dc4:	mov	r0, r5
   13dc8:	mov	r2, #3
   13dcc:	movt	r1, #1
   13dd0:	bl	1158c <strncmp@plt>
   13dd4:	cmp	r0, #0
   13dd8:	beq	13de4 <__assert_fail@plt+0x2834>
   13ddc:	mov	r4, r5
   13de0:	b	13df4 <__assert_fail@plt+0x2844>
   13de4:	movw	r0, #37240	; 0x9178
   13de8:	add	r4, r5, #3
   13dec:	movt	r0, #2
   13df0:	str	r4, [r0]
   13df4:	movw	r0, #37244	; 0x917c
   13df8:	movt	r0, #2
   13dfc:	str	r4, [r0]
   13e00:	movw	r0, #37352	; 0x91e8
   13e04:	movt	r0, #2
   13e08:	str	r4, [r0]
   13e0c:	pop	{r4, r5, fp, pc}
   13e10:	movw	r0, #37256	; 0x9188
   13e14:	mov	r1, #55	; 0x37
   13e18:	mov	r2, #1
   13e1c:	movt	r0, #2
   13e20:	ldr	r3, [r0]
   13e24:	movw	r0, #33296	; 0x8210
   13e28:	movt	r0, #1
   13e2c:	bl	113ac <fwrite@plt>
   13e30:	bl	11598 <abort@plt>
   13e34:	push	{r4, r5, r6, sl, fp, lr}
   13e38:	add	fp, sp, #16
   13e3c:	mov	r4, r0
   13e40:	movw	r0, #37360	; 0x91f0
   13e44:	movt	r0, #2
   13e48:	cmp	r4, #0
   13e4c:	moveq	r4, r0
   13e50:	bl	114a8 <__errno_location@plt>
   13e54:	ldr	r6, [r0]
   13e58:	mov	r5, r0
   13e5c:	mov	r0, r4
   13e60:	mov	r1, #48	; 0x30
   13e64:	bl	16bc8 <__assert_fail@plt+0x5618>
   13e68:	str	r6, [r5]
   13e6c:	pop	{r4, r5, r6, sl, fp, pc}
   13e70:	movw	r1, #37360	; 0x91f0
   13e74:	cmp	r0, #0
   13e78:	movt	r1, #2
   13e7c:	movne	r1, r0
   13e80:	ldr	r0, [r1]
   13e84:	bx	lr
   13e88:	movw	r2, #37360	; 0x91f0
   13e8c:	cmp	r0, #0
   13e90:	movt	r2, #2
   13e94:	movne	r2, r0
   13e98:	str	r1, [r2]
   13e9c:	bx	lr
   13ea0:	movw	r3, #37360	; 0x91f0
   13ea4:	cmp	r0, #0
   13ea8:	movt	r3, #2
   13eac:	movne	r3, r0
   13eb0:	ubfx	r0, r1, #5, #3
   13eb4:	and	r1, r1, #31
   13eb8:	add	r0, r3, r0, lsl #2
   13ebc:	ldr	r3, [r0, #8]
   13ec0:	eor	r2, r2, r3, lsr r1
   13ec4:	and	r2, r2, #1
   13ec8:	eor	r2, r3, r2, lsl r1
   13ecc:	str	r2, [r0, #8]
   13ed0:	mov	r0, #1
   13ed4:	and	r0, r0, r3, lsr r1
   13ed8:	bx	lr
   13edc:	movw	r2, #37360	; 0x91f0
   13ee0:	cmp	r0, #0
   13ee4:	movt	r2, #2
   13ee8:	movne	r2, r0
   13eec:	ldr	r0, [r2, #4]
   13ef0:	str	r1, [r2, #4]
   13ef4:	bx	lr
   13ef8:	movw	r3, #37360	; 0x91f0
   13efc:	cmp	r0, #0
   13f00:	movt	r3, #2
   13f04:	movne	r3, r0
   13f08:	cmp	r1, #0
   13f0c:	mov	r0, #10
   13f10:	cmpne	r2, #0
   13f14:	str	r0, [r3]
   13f18:	bne	13f28 <__assert_fail@plt+0x2978>
   13f1c:	push	{fp, lr}
   13f20:	mov	fp, sp
   13f24:	bl	11598 <abort@plt>
   13f28:	str	r1, [r3, #40]	; 0x28
   13f2c:	str	r2, [r3, #44]	; 0x2c
   13f30:	bx	lr
   13f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f38:	add	fp, sp, #28
   13f3c:	sub	sp, sp, #20
   13f40:	mov	r7, r0
   13f44:	ldr	r0, [fp, #8]
   13f48:	movw	r5, #37360	; 0x91f0
   13f4c:	mov	r8, r3
   13f50:	mov	r9, r2
   13f54:	mov	sl, r1
   13f58:	movt	r5, #2
   13f5c:	cmp	r0, #0
   13f60:	movne	r5, r0
   13f64:	bl	114a8 <__errno_location@plt>
   13f68:	mov	r4, r0
   13f6c:	ldm	r5, {r0, r1}
   13f70:	ldr	r2, [r5, #40]	; 0x28
   13f74:	ldr	r3, [r5, #44]	; 0x2c
   13f78:	add	r5, r5, #8
   13f7c:	ldr	r6, [r4]
   13f80:	stm	sp, {r0, r1, r5}
   13f84:	str	r2, [sp, #12]
   13f88:	str	r3, [sp, #16]
   13f8c:	mov	r0, r7
   13f90:	mov	r1, sl
   13f94:	mov	r2, r9
   13f98:	mov	r3, r8
   13f9c:	bl	13fac <__assert_fail@plt+0x29fc>
   13fa0:	str	r6, [r4]
   13fa4:	sub	sp, fp, #28
   13fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fb0:	add	fp, sp, #28
   13fb4:	sub	sp, sp, #156	; 0x9c
   13fb8:	str	r0, [sp, #76]	; 0x4c
   13fbc:	ldr	r0, [fp, #12]
   13fc0:	mov	r6, r1
   13fc4:	str	r3, [sp, #84]	; 0x54
   13fc8:	str	r2, [fp, #-84]	; 0xffffffac
   13fcc:	and	r1, r0, #4
   13fd0:	str	r1, [sp, #24]
   13fd4:	and	r1, r0, #1
   13fd8:	str	r1, [sp, #28]
   13fdc:	ubfx	r8, r0, #1, #1
   13fe0:	bl	113c4 <__ctype_get_mb_cur_max@plt>
   13fe4:	str	r0, [sp, #32]
   13fe8:	ldr	r0, [fp, #24]
   13fec:	ldr	r7, [fp, #8]
   13ff0:	mov	r1, #0
   13ff4:	mov	r2, #0
   13ff8:	mov	r4, #1
   13ffc:	str	r1, [sp, #52]	; 0x34
   14000:	str	r0, [sp, #72]	; 0x48
   14004:	ldr	r0, [fp, #20]
   14008:	str	r0, [sp, #68]	; 0x44
   1400c:	mov	r0, #0
   14010:	str	r0, [sp, #48]	; 0x30
   14014:	mov	r0, #0
   14018:	str	r0, [sp, #92]	; 0x5c
   1401c:	mov	r0, #0
   14020:	str	r0, [fp, #-76]	; 0xffffffb4
   14024:	mov	r0, #0
   14028:	cmp	r7, #10
   1402c:	bhi	15314 <__assert_fail@plt+0x3d64>
   14030:	add	r1, pc, #28
   14034:	mov	sl, r6
   14038:	ldr	r6, [sp, #76]	; 0x4c
   1403c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14040:	ldr	lr, [sp, #84]	; 0x54
   14044:	mov	r9, #0
   14048:	mov	r3, #1
   1404c:	mov	r5, #0
   14050:	ldr	pc, [r1, r7, lsl #2]
   14054:	andeq	r4, r1, r4, lsr #2
   14058:	andeq	r4, r1, r0, ror #2
   1405c:	andeq	r4, r1, r4, lsr r1
   14060:	andeq	r4, r1, ip, lsl r1
   14064:	andeq	r4, r1, r4, asr r1
   14068:	andeq	r4, r1, r8, lsl #3
   1406c:	andeq	r4, r1, r4, asr #2
   14070:	muleq	r1, r4, r3
   14074:	andeq	r4, r1, r0, lsl #1
   14078:	andeq	r4, r1, r0, lsl #1
   1407c:	andeq	r4, r1, r8, lsr #6
   14080:	mov	r9, r4
   14084:	movw	r4, #33440	; 0x82a0
   14088:	mov	r5, r8
   1408c:	mov	r8, r2
   14090:	mov	r0, #0
   14094:	mov	r2, #5
   14098:	movt	r4, #1
   1409c:	mov	r1, r4
   140a0:	bl	1134c <dcgettext@plt>
   140a4:	cmp	r0, r4
   140a8:	str	r0, [sp, #68]	; 0x44
   140ac:	bne	1423c <__assert_fail@plt+0x2c8c>
   140b0:	bl	16ecc <__assert_fail@plt+0x591c>
   140b4:	ldrb	r1, [r0]
   140b8:	and	r1, r1, #223	; 0xdf
   140bc:	cmp	r1, #71	; 0x47
   140c0:	beq	14208 <__assert_fail@plt+0x2c58>
   140c4:	cmp	r1, #85	; 0x55
   140c8:	bne	14220 <__assert_fail@plt+0x2c70>
   140cc:	ldrb	r1, [r0, #1]
   140d0:	and	r1, r1, #223	; 0xdf
   140d4:	cmp	r1, #84	; 0x54
   140d8:	bne	14220 <__assert_fail@plt+0x2c70>
   140dc:	ldrb	r1, [r0, #2]
   140e0:	and	r1, r1, #223	; 0xdf
   140e4:	cmp	r1, #70	; 0x46
   140e8:	bne	14220 <__assert_fail@plt+0x2c70>
   140ec:	ldrb	r1, [r0, #3]
   140f0:	cmp	r1, #45	; 0x2d
   140f4:	ldrbeq	r1, [r0, #4]
   140f8:	cmpeq	r1, #56	; 0x38
   140fc:	bne	14220 <__assert_fail@plt+0x2c70>
   14100:	ldrb	r0, [r0, #5]
   14104:	cmp	r0, #0
   14108:	movw	r0, #33444	; 0x82a4
   1410c:	movt	r0, #1
   14110:	str	r0, [sp, #68]	; 0x44
   14114:	bne	14220 <__assert_fail@plt+0x2c70>
   14118:	b	1423c <__assert_fail@plt+0x2c8c>
   1411c:	mov	r0, #1
   14120:	b	14160 <__assert_fail@plt+0x2bb0>
   14124:	mov	r7, #0
   14128:	mov	r9, #0
   1412c:	mov	r3, r0
   14130:	b	14200 <__assert_fail@plt+0x2c50>
   14134:	tst	r8, #1
   14138:	bne	14160 <__assert_fail@plt+0x2bb0>
   1413c:	mov	r3, r0
   14140:	b	141b8 <__assert_fail@plt+0x2c08>
   14144:	mov	r0, #1
   14148:	mov	r9, #0
   1414c:	mov	r7, #5
   14150:	b	1419c <__assert_fail@plt+0x2bec>
   14154:	mov	r3, #1
   14158:	tst	r8, #1
   1415c:	beq	141b8 <__assert_fail@plt+0x2c08>
   14160:	mov	r1, #1
   14164:	mov	r9, #0
   14168:	mov	r7, #2
   1416c:	mov	r3, r0
   14170:	mov	r5, #1
   14174:	str	r1, [fp, #-76]	; 0xffffffb4
   14178:	movw	r1, #33442	; 0x82a2
   1417c:	movt	r1, #1
   14180:	str	r1, [sp, #92]	; 0x5c
   14184:	b	14394 <__assert_fail@plt+0x2de4>
   14188:	mov	r7, #5
   1418c:	tst	r8, #1
   14190:	beq	141d8 <__assert_fail@plt+0x2c28>
   14194:	mov	r0, #1
   14198:	mov	r9, #0
   1419c:	str	r0, [fp, #-76]	; 0xffffffb4
   141a0:	movw	r0, #32423	; 0x7ea7
   141a4:	mov	r3, #1
   141a8:	mov	r5, #1
   141ac:	movt	r0, #1
   141b0:	str	r0, [sp, #92]	; 0x5c
   141b4:	b	14394 <__assert_fail@plt+0x2de4>
   141b8:	cmp	sl, #0
   141bc:	mov	r9, #1
   141c0:	mov	r7, #2
   141c4:	movne	r0, #39	; 0x27
   141c8:	strbne	r0, [r6]
   141cc:	movw	r0, #33442	; 0x82a2
   141d0:	movt	r0, #1
   141d4:	b	141f4 <__assert_fail@plt+0x2c44>
   141d8:	cmp	sl, #0
   141dc:	mov	r9, #1
   141e0:	mov	r3, #1
   141e4:	movne	r0, #34	; 0x22
   141e8:	strbne	r0, [r6]
   141ec:	movw	r0, #32423	; 0x7ea7
   141f0:	movt	r0, #1
   141f4:	str	r0, [sp, #92]	; 0x5c
   141f8:	mov	r0, #1
   141fc:	str	r0, [fp, #-76]	; 0xffffffb4
   14200:	mov	r5, #0
   14204:	b	14394 <__assert_fail@plt+0x2de4>
   14208:	ldrb	r1, [r0, #1]
   1420c:	and	r1, r1, #223	; 0xdf
   14210:	cmp	r1, #66	; 0x42
   14214:	ldrbeq	r1, [r0, #2]
   14218:	cmpeq	r1, #49	; 0x31
   1421c:	beq	1513c <__assert_fail@plt+0x3b8c>
   14220:	movw	r0, #33442	; 0x82a2
   14224:	movw	r1, #32423	; 0x7ea7
   14228:	cmp	r7, #9
   1422c:	movt	r0, #1
   14230:	movt	r1, #1
   14234:	moveq	r0, r1
   14238:	str	r0, [sp, #68]	; 0x44
   1423c:	movw	r4, #33442	; 0x82a2
   14240:	mov	r0, #0
   14244:	mov	r2, #5
   14248:	movt	r4, #1
   1424c:	mov	r1, r4
   14250:	bl	1134c <dcgettext@plt>
   14254:	cmp	r0, r4
   14258:	str	r0, [sp, #72]	; 0x48
   1425c:	beq	1426c <__assert_fail@plt+0x2cbc>
   14260:	mov	r4, r9
   14264:	mov	r2, r8
   14268:	b	14324 <__assert_fail@plt+0x2d74>
   1426c:	bl	16ecc <__assert_fail@plt+0x591c>
   14270:	ldrb	r1, [r0]
   14274:	mov	r4, r9
   14278:	and	r1, r1, #223	; 0xdf
   1427c:	cmp	r1, #71	; 0x47
   14280:	beq	142dc <__assert_fail@plt+0x2d2c>
   14284:	cmp	r1, #85	; 0x55
   14288:	mov	r2, r8
   1428c:	bne	14304 <__assert_fail@plt+0x2d54>
   14290:	ldrb	r1, [r0, #1]
   14294:	and	r1, r1, #223	; 0xdf
   14298:	cmp	r1, #84	; 0x54
   1429c:	bne	14304 <__assert_fail@plt+0x2d54>
   142a0:	ldrb	r1, [r0, #2]
   142a4:	and	r1, r1, #223	; 0xdf
   142a8:	cmp	r1, #70	; 0x46
   142ac:	ldrbeq	r1, [r0, #3]
   142b0:	cmpeq	r1, #45	; 0x2d
   142b4:	bne	14304 <__assert_fail@plt+0x2d54>
   142b8:	ldrb	r1, [r0, #4]
   142bc:	cmp	r1, #56	; 0x38
   142c0:	ldrbeq	r0, [r0, #5]
   142c4:	cmpeq	r0, #0
   142c8:	bne	14304 <__assert_fail@plt+0x2d54>
   142cc:	movw	r0, #33448	; 0x82a8
   142d0:	movt	r0, #1
   142d4:	str	r0, [sp, #72]	; 0x48
   142d8:	b	14324 <__assert_fail@plt+0x2d74>
   142dc:	ldrb	r1, [r0, #1]
   142e0:	mov	r2, r8
   142e4:	and	r1, r1, #223	; 0xdf
   142e8:	cmp	r1, #66	; 0x42
   142ec:	bne	14304 <__assert_fail@plt+0x2d54>
   142f0:	ldrb	r1, [r0, #2]
   142f4:	cmp	r1, #49	; 0x31
   142f8:	ldrbeq	r1, [r0, #3]
   142fc:	cmpeq	r1, #56	; 0x38
   14300:	beq	15180 <__assert_fail@plt+0x3bd0>
   14304:	movw	r0, #33442	; 0x82a2
   14308:	cmp	r7, #9
   1430c:	movt	r0, #1
   14310:	mov	r1, r0
   14314:	movw	r0, #32423	; 0x7ea7
   14318:	movt	r0, #1
   1431c:	moveq	r1, r0
   14320:	str	r1, [sp, #72]	; 0x48
   14324:	mov	r8, r5
   14328:	mov	r9, #0
   1432c:	tst	r8, #1
   14330:	mov	r5, r8
   14334:	str	r2, [fp, #-48]	; 0xffffffd0
   14338:	bne	14370 <__assert_fail@plt+0x2dc0>
   1433c:	ldr	r0, [sp, #68]	; 0x44
   14340:	ldrb	r0, [r0]
   14344:	cmp	r0, #0
   14348:	beq	14370 <__assert_fail@plt+0x2dc0>
   1434c:	ldr	r1, [sp, #68]	; 0x44
   14350:	mov	r9, #0
   14354:	add	r1, r1, #1
   14358:	cmp	r9, sl
   1435c:	strbcc	r0, [r6, r9]
   14360:	ldrb	r0, [r1, r9]
   14364:	add	r9, r9, #1
   14368:	cmp	r0, #0
   1436c:	bne	14358 <__assert_fail@plt+0x2da8>
   14370:	ldr	r8, [sp, #72]	; 0x48
   14374:	mov	r0, r8
   14378:	bl	11484 <strlen@plt>
   1437c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14380:	ldr	lr, [sp, #84]	; 0x54
   14384:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14388:	str	r0, [fp, #-76]	; 0xffffffb4
   1438c:	str	r8, [sp, #92]	; 0x5c
   14390:	mov	r3, #1
   14394:	ldr	r0, [fp, #16]
   14398:	str	r7, [fp, #-64]	; 0xffffffc0
   1439c:	str	r5, [fp, #-72]	; 0xffffffb8
   143a0:	str	r3, [sp, #80]	; 0x50
   143a4:	cmp	r0, #0
   143a8:	movwne	r0, #1
   143ac:	and	r0, r0, r5
   143b0:	str	r0, [fp, #-88]	; 0xffffffa8
   143b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   143b8:	cmp	r0, #0
   143bc:	movwne	r0, #1
   143c0:	subs	r7, r7, #2
   143c4:	and	r1, r0, r5
   143c8:	str	r7, [fp, #-80]	; 0xffffffb0
   143cc:	and	r1, r3, r1
   143d0:	str	r1, [sp, #40]	; 0x28
   143d4:	clz	r1, r7
   143d8:	lsr	r1, r1, #5
   143dc:	and	r1, r1, r5
   143e0:	eor	r5, r5, #1
   143e4:	str	r1, [sp, #36]	; 0x24
   143e8:	mov	r1, r7
   143ec:	str	r5, [sp, #88]	; 0x58
   143f0:	mov	r7, #0
   143f4:	movwne	r1, #1
   143f8:	orr	r5, r1, r5
   143fc:	and	r1, r1, r3
   14400:	and	r0, r0, r1
   14404:	str	r5, [sp, #60]	; 0x3c
   14408:	str	r1, [fp, #-68]	; 0xffffffbc
   1440c:	str	r0, [fp, #-60]	; 0xffffffc4
   14410:	eor	r0, r3, #1
   14414:	str	r0, [sp, #44]	; 0x2c
   14418:	cmn	lr, #1
   1441c:	beq	1442c <__assert_fail@plt+0x2e7c>
   14420:	cmp	r7, lr
   14424:	bne	14438 <__assert_fail@plt+0x2e88>
   14428:	b	150b0 <__assert_fail@plt+0x3b00>
   1442c:	ldrb	r0, [ip, r7]
   14430:	cmp	r0, #0
   14434:	beq	150b8 <__assert_fail@plt+0x3b08>
   14438:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1443c:	mov	r8, #0
   14440:	str	r4, [fp, #-52]	; 0xffffffcc
   14444:	str	r2, [fp, #-48]	; 0xffffffd0
   14448:	cmp	r0, #0
   1444c:	beq	14480 <__assert_fail@plt+0x2ed0>
   14450:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14454:	add	r4, r7, r0
   14458:	cmp	r0, #2
   1445c:	bcc	14478 <__assert_fail@plt+0x2ec8>
   14460:	cmn	lr, #1
   14464:	bne	14478 <__assert_fail@plt+0x2ec8>
   14468:	mov	r0, ip
   1446c:	bl	11484 <strlen@plt>
   14470:	ldr	ip, [fp, #-84]	; 0xffffffac
   14474:	mov	lr, r0
   14478:	cmp	r4, lr
   1447c:	bls	14498 <__assert_fail@plt+0x2ee8>
   14480:	mov	r0, #0
   14484:	str	r0, [fp, #-56]	; 0xffffffc8
   14488:	ldrb	r5, [ip, r7]
   1448c:	cmp	r5, #126	; 0x7e
   14490:	bls	144e8 <__assert_fail@plt+0x2f38>
   14494:	b	148f0 <__assert_fail@plt+0x3340>
   14498:	ldr	r1, [sp, #92]	; 0x5c
   1449c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   144a0:	add	r0, ip, r7
   144a4:	mov	r4, lr
   144a8:	bl	11340 <memcmp@plt>
   144ac:	ldr	r2, [sp, #88]	; 0x58
   144b0:	cmp	r0, #0
   144b4:	mov	r1, r0
   144b8:	movwne	r1, #1
   144bc:	orr	r1, r1, r2
   144c0:	tst	r1, #1
   144c4:	beq	151c4 <__assert_fail@plt+0x3c14>
   144c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   144cc:	clz	r0, r0
   144d0:	mov	lr, r4
   144d4:	lsr	r0, r0, #5
   144d8:	str	r0, [fp, #-56]	; 0xffffffc8
   144dc:	ldrb	r5, [ip, r7]
   144e0:	cmp	r5, #126	; 0x7e
   144e4:	bhi	148f0 <__assert_fail@plt+0x3340>
   144e8:	add	r3, pc, #16
   144ec:	mov	r4, #1
   144f0:	mov	r2, #110	; 0x6e
   144f4:	mov	r0, #97	; 0x61
   144f8:	mov	r1, #0
   144fc:	ldr	pc, [r3, r5, lsl #2]
   14500:	ldrdeq	r4, [r1], -r0
   14504:	strdeq	r4, [r1], -r0
   14508:	strdeq	r4, [r1], -r0
   1450c:	strdeq	r4, [r1], -r0
   14510:	strdeq	r4, [r1], -r0
   14514:	strdeq	r4, [r1], -r0
   14518:	strdeq	r4, [r1], -r0
   1451c:	andeq	r4, r1, ip, asr #19
   14520:			; <UNDEFINED> instruction: 0x000147b0
   14524:	muleq	r1, r8, r7
   14528:			; <UNDEFINED> instruction: 0x000147bc
   1452c:	andeq	r4, r1, ip, asr #16
   14530:	muleq	r1, r0, r7
   14534:			; <UNDEFINED> instruction: 0x000147b8
   14538:	strdeq	r4, [r1], -r0
   1453c:	strdeq	r4, [r1], -r0
   14540:	strdeq	r4, [r1], -r0
   14544:	strdeq	r4, [r1], -r0
   14548:	strdeq	r4, [r1], -r0
   1454c:	strdeq	r4, [r1], -r0
   14550:	strdeq	r4, [r1], -r0
   14554:	strdeq	r4, [r1], -r0
   14558:	strdeq	r4, [r1], -r0
   1455c:	strdeq	r4, [r1], -r0
   14560:	strdeq	r4, [r1], -r0
   14564:	strdeq	r4, [r1], -r0
   14568:	strdeq	r4, [r1], -r0
   1456c:	strdeq	r4, [r1], -r0
   14570:	strdeq	r4, [r1], -r0
   14574:	strdeq	r4, [r1], -r0
   14578:	strdeq	r4, [r1], -r0
   1457c:	strdeq	r4, [r1], -r0
   14580:	andeq	r4, r1, r8, asr #18
   14584:	andeq	r4, r1, ip, asr #18
   14588:	andeq	r4, r1, ip, asr #18
   1458c:	andeq	r4, r1, ip, lsl r7
   14590:	andeq	r4, r1, ip, asr #18
   14594:	strdeq	r4, [r1], -ip
   14598:	andeq	r4, r1, ip, asr #18
   1459c:	andeq	r4, r1, r4, asr r8
   145a0:	andeq	r4, r1, ip, asr #18
   145a4:	andeq	r4, r1, ip, asr #18
   145a8:	andeq	r4, r1, ip, asr #18
   145ac:	strdeq	r4, [r1], -ip
   145b0:	strdeq	r4, [r1], -ip
   145b4:	strdeq	r4, [r1], -ip
   145b8:	strdeq	r4, [r1], -ip
   145bc:	strdeq	r4, [r1], -ip
   145c0:	strdeq	r4, [r1], -ip
   145c4:	strdeq	r4, [r1], -ip
   145c8:	strdeq	r4, [r1], -ip
   145cc:	strdeq	r4, [r1], -ip
   145d0:	strdeq	r4, [r1], -ip
   145d4:	strdeq	r4, [r1], -ip
   145d8:	strdeq	r4, [r1], -ip
   145dc:	strdeq	r4, [r1], -ip
   145e0:	strdeq	r4, [r1], -ip
   145e4:	strdeq	r4, [r1], -ip
   145e8:	strdeq	r4, [r1], -ip
   145ec:	andeq	r4, r1, ip, asr #18
   145f0:	andeq	r4, r1, ip, asr #18
   145f4:	andeq	r4, r1, ip, asr #18
   145f8:	andeq	r4, r1, ip, asr #18
   145fc:	andeq	r4, r1, r0, lsl r8
   14600:	strdeq	r4, [r1], -r0
   14604:	strdeq	r4, [r1], -ip
   14608:	strdeq	r4, [r1], -ip
   1460c:	strdeq	r4, [r1], -ip
   14610:	strdeq	r4, [r1], -ip
   14614:	strdeq	r4, [r1], -ip
   14618:	strdeq	r4, [r1], -ip
   1461c:	strdeq	r4, [r1], -ip
   14620:	strdeq	r4, [r1], -ip
   14624:	strdeq	r4, [r1], -ip
   14628:	strdeq	r4, [r1], -ip
   1462c:	strdeq	r4, [r1], -ip
   14630:	strdeq	r4, [r1], -ip
   14634:	strdeq	r4, [r1], -ip
   14638:	strdeq	r4, [r1], -ip
   1463c:	strdeq	r4, [r1], -ip
   14640:	strdeq	r4, [r1], -ip
   14644:	strdeq	r4, [r1], -ip
   14648:	strdeq	r4, [r1], -ip
   1464c:	strdeq	r4, [r1], -ip
   14650:	strdeq	r4, [r1], -ip
   14654:	strdeq	r4, [r1], -ip
   14658:	strdeq	r4, [r1], -ip
   1465c:	strdeq	r4, [r1], -ip
   14660:	strdeq	r4, [r1], -ip
   14664:	strdeq	r4, [r1], -ip
   14668:	strdeq	r4, [r1], -ip
   1466c:	andeq	r4, r1, ip, asr #18
   14670:	andeq	r4, r1, ip, asr r7
   14674:	strdeq	r4, [r1], -ip
   14678:	andeq	r4, r1, ip, asr #18
   1467c:	strdeq	r4, [r1], -ip
   14680:	andeq	r4, r1, ip, asr #18
   14684:	strdeq	r4, [r1], -ip
   14688:	strdeq	r4, [r1], -ip
   1468c:	strdeq	r4, [r1], -ip
   14690:	strdeq	r4, [r1], -ip
   14694:	strdeq	r4, [r1], -ip
   14698:	strdeq	r4, [r1], -ip
   1469c:	strdeq	r4, [r1], -ip
   146a0:	strdeq	r4, [r1], -ip
   146a4:	strdeq	r4, [r1], -ip
   146a8:	strdeq	r4, [r1], -ip
   146ac:	strdeq	r4, [r1], -ip
   146b0:	strdeq	r4, [r1], -ip
   146b4:	strdeq	r4, [r1], -ip
   146b8:	strdeq	r4, [r1], -ip
   146bc:	strdeq	r4, [r1], -ip
   146c0:	strdeq	r4, [r1], -ip
   146c4:	strdeq	r4, [r1], -ip
   146c8:	strdeq	r4, [r1], -ip
   146cc:	strdeq	r4, [r1], -ip
   146d0:	strdeq	r4, [r1], -ip
   146d4:	strdeq	r4, [r1], -ip
   146d8:	strdeq	r4, [r1], -ip
   146dc:	strdeq	r4, [r1], -ip
   146e0:	strdeq	r4, [r1], -ip
   146e4:	strdeq	r4, [r1], -ip
   146e8:	strdeq	r4, [r1], -ip
   146ec:	andeq	r4, r1, ip, lsr r7
   146f0:	andeq	r4, r1, ip, asr #18
   146f4:	andeq	r4, r1, ip, lsr r7
   146f8:	andeq	r4, r1, ip, lsl r7
   146fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14700:	cmp	r0, #0
   14704:	beq	149e0 <__assert_fail@plt+0x3430>
   14708:	ldr	r0, [fp, #16]
   1470c:	cmp	r0, #0
   14710:	mov	r0, r5
   14714:	bne	149f0 <__assert_fail@plt+0x3440>
   14718:	b	14a10 <__assert_fail@plt+0x3460>
   1471c:	mov	r4, #0
   14720:	cmp	r7, #0
   14724:	beq	14948 <__assert_fail@plt+0x3398>
   14728:	mov	r8, #0
   1472c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14730:	cmp	r0, #0
   14734:	bne	14708 <__assert_fail@plt+0x3158>
   14738:	b	149e0 <__assert_fail@plt+0x3430>
   1473c:	mov	r4, #0
   14740:	cmn	lr, #1
   14744:	beq	14920 <__assert_fail@plt+0x3370>
   14748:	cmp	r7, #0
   1474c:	bne	14728 <__assert_fail@plt+0x3178>
   14750:	cmp	lr, #1
   14754:	beq	14948 <__assert_fail@plt+0x3398>
   14758:	b	14728 <__assert_fail@plt+0x3178>
   1475c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14760:	cmp	r0, #2
   14764:	bne	14978 <__assert_fail@plt+0x33c8>
   14768:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1476c:	tst	r0, #1
   14770:	bne	151d8 <__assert_fail@plt+0x3c28>
   14774:	mov	r8, #0
   14778:	mov	r0, #92	; 0x5c
   1477c:	mov	r4, #0
   14780:	cmp	r8, #0
   14784:	beq	14998 <__assert_fail@plt+0x33e8>
   14788:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1478c:	b	14a8c <__assert_fail@plt+0x34dc>
   14790:	mov	r0, #102	; 0x66
   14794:	b	149cc <__assert_fail@plt+0x341c>
   14798:	mov	r2, #116	; 0x74
   1479c:	ldr	r0, [sp, #60]	; 0x3c
   147a0:	tst	r0, #1
   147a4:	mov	r0, r2
   147a8:	bne	149cc <__assert_fail@plt+0x341c>
   147ac:	b	151d8 <__assert_fail@plt+0x3c28>
   147b0:	mov	r0, #98	; 0x62
   147b4:	b	149cc <__assert_fail@plt+0x341c>
   147b8:	mov	r2, #114	; 0x72
   147bc:	ldr	r0, [sp, #60]	; 0x3c
   147c0:	tst	r0, #1
   147c4:	mov	r0, r2
   147c8:	bne	149cc <__assert_fail@plt+0x341c>
   147cc:	b	151d8 <__assert_fail@plt+0x3c28>
   147d0:	ldr	r0, [sp, #80]	; 0x50
   147d4:	tst	r0, #1
   147d8:	beq	14ab4 <__assert_fail@plt+0x3504>
   147dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   147e0:	tst	r0, #1
   147e4:	bne	15300 <__assert_fail@plt+0x3d50>
   147e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   147ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   147f0:	cmp	r0, #2
   147f4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   147f8:	movwne	r0, #1
   147fc:	orr	r0, r0, r2
   14800:	tst	r0, #1
   14804:	beq	14dac <__assert_fail@plt+0x37fc>
   14808:	mov	r0, r9
   1480c:	b	14de0 <__assert_fail@plt+0x3830>
   14810:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14814:	mov	r8, #0
   14818:	mov	r5, #63	; 0x3f
   1481c:	cmp	r0, #5
   14820:	beq	14c68 <__assert_fail@plt+0x36b8>
   14824:	cmp	r0, #2
   14828:	bne	14d18 <__assert_fail@plt+0x3768>
   1482c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14830:	tst	r0, #1
   14834:	bne	151d8 <__assert_fail@plt+0x3c28>
   14838:	mov	r4, #0
   1483c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14840:	cmp	r0, #0
   14844:	bne	14708 <__assert_fail@plt+0x3158>
   14848:	b	149e0 <__assert_fail@plt+0x3430>
   1484c:	mov	r0, #118	; 0x76
   14850:	b	149cc <__assert_fail@plt+0x341c>
   14854:	mov	r0, #1
   14858:	mov	r5, #39	; 0x27
   1485c:	str	r0, [sp, #52]	; 0x34
   14860:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14864:	cmp	r0, #2
   14868:	bne	148dc <__assert_fail@plt+0x332c>
   1486c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14870:	tst	r0, #1
   14874:	bne	151d8 <__assert_fail@plt+0x3c28>
   14878:	ldr	r2, [sp, #48]	; 0x30
   1487c:	clz	r1, sl
   14880:	mov	r8, #0
   14884:	lsr	r1, r1, #5
   14888:	cmp	r2, #0
   1488c:	mov	r0, r2
   14890:	movwne	r0, #1
   14894:	orrs	r0, r0, r1
   14898:	moveq	r2, sl
   1489c:	moveq	sl, r0
   148a0:	cmp	r9, sl
   148a4:	str	r2, [sp, #48]	; 0x30
   148a8:	movcc	r0, #39	; 0x27
   148ac:	strbcc	r0, [r6, r9]
   148b0:	add	r0, r9, #1
   148b4:	cmp	r0, sl
   148b8:	movcc	r1, #92	; 0x5c
   148bc:	strbcc	r1, [r6, r0]
   148c0:	add	r0, r9, #2
   148c4:	add	r9, r9, #3
   148c8:	cmp	r0, sl
   148cc:	movcc	r1, #39	; 0x27
   148d0:	strbcc	r1, [r6, r0]
   148d4:	mov	r0, #0
   148d8:	str	r0, [fp, #-48]	; 0xffffffd0
   148dc:	mov	r4, #1
   148e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   148e4:	cmp	r0, #0
   148e8:	bne	14708 <__assert_fail@plt+0x3158>
   148ec:	b	149e0 <__assert_fail@plt+0x3430>
   148f0:	ldr	r0, [sp, #32]
   148f4:	cmp	r0, #1
   148f8:	bne	14ae4 <__assert_fail@plt+0x3534>
   148fc:	str	lr, [sp, #84]	; 0x54
   14900:	bl	11454 <__ctype_b_loc@plt>
   14904:	ldr	r0, [r0]
   14908:	ldr	ip, [fp, #-84]	; 0xffffffac
   1490c:	mov	r1, #1
   14910:	add	r0, r0, r5, lsl #1
   14914:	ldrb	r0, [r0, #1]
   14918:	ubfx	r4, r0, #6, #1
   1491c:	b	14edc <__assert_fail@plt+0x392c>
   14920:	cmp	r7, #0
   14924:	ldrbeq	r0, [ip, #1]
   14928:	cmpeq	r0, #0
   1492c:	beq	14948 <__assert_fail@plt+0x3398>
   14930:	mvn	lr, #0
   14934:	mov	r8, #0
   14938:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1493c:	cmp	r0, #0
   14940:	bne	14708 <__assert_fail@plt+0x3158>
   14944:	b	149e0 <__assert_fail@plt+0x3430>
   14948:	mov	r1, #1
   1494c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14950:	cmp	r0, #2
   14954:	bne	14964 <__assert_fail@plt+0x33b4>
   14958:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1495c:	tst	r0, #1
   14960:	bne	151d8 <__assert_fail@plt+0x3c28>
   14964:	mov	r4, r1
   14968:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1496c:	cmp	r0, #0
   14970:	bne	14708 <__assert_fail@plt+0x3158>
   14974:	b	149e0 <__assert_fail@plt+0x3430>
   14978:	ldr	r1, [sp, #40]	; 0x28
   1497c:	mov	r8, #0
   14980:	mov	r0, #92	; 0x5c
   14984:	cmp	r1, #0
   14988:	beq	149cc <__assert_fail@plt+0x341c>
   1498c:	mov	r4, #0
   14990:	cmp	r8, #0
   14994:	bne	14788 <__assert_fail@plt+0x31d8>
   14998:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1499c:	tst	r2, #1
   149a0:	beq	14a8c <__assert_fail@plt+0x34dc>
   149a4:	cmp	r9, sl
   149a8:	movcc	r1, #39	; 0x27
   149ac:	strbcc	r1, [r6, r9]
   149b0:	add	r1, r9, #1
   149b4:	add	r9, r9, #2
   149b8:	cmp	r1, sl
   149bc:	movcc	r2, #39	; 0x27
   149c0:	strbcc	r2, [r6, r1]
   149c4:	mov	r2, #0
   149c8:	b	14a8c <__assert_fail@plt+0x34dc>
   149cc:	ldr	r1, [sp, #80]	; 0x50
   149d0:	mov	r4, #0
   149d4:	mov	r8, #0
   149d8:	tst	r1, #1
   149dc:	bne	14a1c <__assert_fail@plt+0x346c>
   149e0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   149e4:	cmp	r0, #0
   149e8:	mov	r0, r5
   149ec:	beq	14a10 <__assert_fail@plt+0x3460>
   149f0:	ldr	r1, [fp, #16]
   149f4:	ubfx	r0, r5, #5, #3
   149f8:	mov	r2, #1
   149fc:	ldr	r0, [r1, r0, lsl #2]
   14a00:	and	r1, r5, #31
   14a04:	tst	r0, r2, lsl r1
   14a08:	mov	r0, r5
   14a0c:	bne	14a1c <__assert_fail@plt+0x346c>
   14a10:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14a14:	cmp	r1, #0
   14a18:	beq	14e74 <__assert_fail@plt+0x38c4>
   14a1c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14a20:	tst	r1, #1
   14a24:	bne	151b8 <__assert_fail@plt+0x3c08>
   14a28:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14a2c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14a30:	cmp	r1, #2
   14a34:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14a38:	movwne	r1, #1
   14a3c:	orr	r1, r1, r2
   14a40:	tst	r1, #1
   14a44:	bne	14a7c <__assert_fail@plt+0x34cc>
   14a48:	cmp	r9, sl
   14a4c:	movcc	r1, #39	; 0x27
   14a50:	strbcc	r1, [r6, r9]
   14a54:	add	r1, r9, #1
   14a58:	cmp	r1, sl
   14a5c:	movcc	r2, #36	; 0x24
   14a60:	strbcc	r2, [r6, r1]
   14a64:	add	r1, r9, #2
   14a68:	add	r9, r9, #3
   14a6c:	cmp	r1, sl
   14a70:	movcc	r2, #39	; 0x27
   14a74:	strbcc	r2, [r6, r1]
   14a78:	mov	r2, #1
   14a7c:	cmp	r9, sl
   14a80:	movcc	r1, #92	; 0x5c
   14a84:	strbcc	r1, [r6, r9]
   14a88:	add	r9, r9, #1
   14a8c:	cmp	r9, sl
   14a90:	add	r7, r7, #1
   14a94:	strbcc	r0, [r6, r9]
   14a98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14a9c:	add	r9, r9, #1
   14aa0:	and	r0, r0, r4
   14aa4:	mov	r4, r0
   14aa8:	cmn	lr, #1
   14aac:	bne	14420 <__assert_fail@plt+0x2e70>
   14ab0:	b	1442c <__assert_fail@plt+0x2e7c>
   14ab4:	ldr	r0, [sp, #28]
   14ab8:	mov	r4, #0
   14abc:	mov	r8, #0
   14ac0:	mov	r5, #0
   14ac4:	cmp	r0, #0
   14ac8:	beq	149e0 <__assert_fail@plt+0x3430>
   14acc:	ldr	r4, [fp, #-52]	; 0xffffffcc
   14ad0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14ad4:	add	r7, r7, #1
   14ad8:	cmn	lr, #1
   14adc:	bne	14420 <__assert_fail@plt+0x2e70>
   14ae0:	b	1442c <__assert_fail@plt+0x2e7c>
   14ae4:	mov	r0, #0
   14ae8:	cmn	lr, #1
   14aec:	str	r0, [fp, #-36]	; 0xffffffdc
   14af0:	str	r0, [fp, #-40]	; 0xffffffd8
   14af4:	bne	14b08 <__assert_fail@plt+0x3558>
   14af8:	mov	r0, ip
   14afc:	bl	11484 <strlen@plt>
   14b00:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b04:	mov	lr, r0
   14b08:	ldr	r0, [sp, #36]	; 0x24
   14b0c:	str	sl, [sp, #56]	; 0x38
   14b10:	str	lr, [sp, #84]	; 0x54
   14b14:	cmp	r0, #0
   14b18:	beq	14d30 <__assert_fail@plt+0x3780>
   14b1c:	add	r0, ip, r7
   14b20:	mov	r4, #1
   14b24:	mov	r6, #0
   14b28:	sub	sl, fp, #40	; 0x28
   14b2c:	str	r0, [sp, #20]
   14b30:	str	r6, [sp, #64]	; 0x40
   14b34:	add	r6, r6, r7
   14b38:	sub	r0, fp, #44	; 0x2c
   14b3c:	mov	r3, sl
   14b40:	add	r1, ip, r6
   14b44:	sub	r2, lr, r6
   14b48:	bl	13b80 <__assert_fail@plt+0x25d0>
   14b4c:	cmn	r0, #2
   14b50:	beq	14e8c <__assert_fail@plt+0x38dc>
   14b54:	ldr	sl, [sp, #56]	; 0x38
   14b58:	cmn	r0, #1
   14b5c:	beq	14e80 <__assert_fail@plt+0x38d0>
   14b60:	cmp	r0, #0
   14b64:	beq	14e84 <__assert_fail@plt+0x38d4>
   14b68:	cmp	r0, #2
   14b6c:	bcc	14c2c <__assert_fail@plt+0x367c>
   14b70:	ldr	r1, [sp, #64]	; 0x40
   14b74:	ldr	r2, [sp, #20]
   14b78:	add	r1, r2, r1
   14b7c:	mov	r2, #1
   14b80:	ldrb	r3, [r1, r2]
   14b84:	sub	r3, r3, #91	; 0x5b
   14b88:	cmp	r3, #33	; 0x21
   14b8c:	bhi	14c20 <__assert_fail@plt+0x3670>
   14b90:	add	r6, pc, #0
   14b94:	ldr	pc, [r6, r3, lsl #2]
   14b98:	andeq	r5, r1, r4, ror #3
   14b9c:	andeq	r5, r1, r4, ror #3
   14ba0:	andeq	r4, r1, r0, lsr #24
   14ba4:	andeq	r5, r1, r4, ror #3
   14ba8:	andeq	r4, r1, r0, lsr #24
   14bac:	andeq	r5, r1, r4, ror #3
   14bb0:	andeq	r4, r1, r0, lsr #24
   14bb4:	andeq	r4, r1, r0, lsr #24
   14bb8:	andeq	r4, r1, r0, lsr #24
   14bbc:	andeq	r4, r1, r0, lsr #24
   14bc0:	andeq	r4, r1, r0, lsr #24
   14bc4:	andeq	r4, r1, r0, lsr #24
   14bc8:	andeq	r4, r1, r0, lsr #24
   14bcc:	andeq	r4, r1, r0, lsr #24
   14bd0:	andeq	r4, r1, r0, lsr #24
   14bd4:	andeq	r4, r1, r0, lsr #24
   14bd8:	andeq	r4, r1, r0, lsr #24
   14bdc:	andeq	r4, r1, r0, lsr #24
   14be0:	andeq	r4, r1, r0, lsr #24
   14be4:	andeq	r4, r1, r0, lsr #24
   14be8:	andeq	r4, r1, r0, lsr #24
   14bec:	andeq	r4, r1, r0, lsr #24
   14bf0:	andeq	r4, r1, r0, lsr #24
   14bf4:	andeq	r4, r1, r0, lsr #24
   14bf8:	andeq	r4, r1, r0, lsr #24
   14bfc:	andeq	r4, r1, r0, lsr #24
   14c00:	andeq	r4, r1, r0, lsr #24
   14c04:	andeq	r4, r1, r0, lsr #24
   14c08:	andeq	r4, r1, r0, lsr #24
   14c0c:	andeq	r4, r1, r0, lsr #24
   14c10:	andeq	r4, r1, r0, lsr #24
   14c14:	andeq	r4, r1, r0, lsr #24
   14c18:	andeq	r4, r1, r0, lsr #24
   14c1c:	andeq	r5, r1, r4, ror #3
   14c20:	add	r2, r2, #1
   14c24:	cmp	r2, r0
   14c28:	bcc	14b80 <__assert_fail@plt+0x35d0>
   14c2c:	ldr	r6, [sp, #64]	; 0x40
   14c30:	add	r6, r0, r6
   14c34:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14c38:	bl	11394 <iswprint@plt>
   14c3c:	cmp	r0, #0
   14c40:	sub	sl, fp, #40	; 0x28
   14c44:	movwne	r0, #1
   14c48:	and	r4, r4, r0
   14c4c:	mov	r0, sl
   14c50:	bl	11334 <mbsinit@plt>
   14c54:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c58:	ldr	lr, [sp, #84]	; 0x54
   14c5c:	cmp	r0, #0
   14c60:	beq	14b30 <__assert_fail@plt+0x3580>
   14c64:	b	14ed0 <__assert_fail@plt+0x3920>
   14c68:	ldr	r0, [sp, #24]
   14c6c:	cmp	r0, #0
   14c70:	beq	14d18 <__assert_fail@plt+0x3768>
   14c74:	add	r0, r7, #2
   14c78:	cmp	r0, lr
   14c7c:	bcs	14d18 <__assert_fail@plt+0x3768>
   14c80:	add	r1, ip, r7
   14c84:	ldrb	r1, [r1, #1]
   14c88:	cmp	r1, #63	; 0x3f
   14c8c:	bne	14d18 <__assert_fail@plt+0x3768>
   14c90:	ldrb	r5, [ip, r0]
   14c94:	sub	r1, r5, #33	; 0x21
   14c98:	cmp	r1, #29
   14c9c:	bhi	14d18 <__assert_fail@plt+0x3768>
   14ca0:	movw	r3, #20929	; 0x51c1
   14ca4:	mov	r2, #1
   14ca8:	movt	r3, #14336	; 0x3800
   14cac:	tst	r3, r2, lsl r1
   14cb0:	beq	14d18 <__assert_fail@plt+0x3768>
   14cb4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14cb8:	tst	r1, #1
   14cbc:	bne	15308 <__assert_fail@plt+0x3d58>
   14cc0:	cmp	r9, sl
   14cc4:	mov	r7, r0
   14cc8:	mov	r4, #0
   14ccc:	movcc	r1, #63	; 0x3f
   14cd0:	strbcc	r1, [r6, r9]
   14cd4:	add	r1, r9, #1
   14cd8:	cmp	r1, sl
   14cdc:	movcc	r2, #34	; 0x22
   14ce0:	strbcc	r2, [r6, r1]
   14ce4:	add	r1, r9, #2
   14ce8:	cmp	r1, sl
   14cec:	movcc	r2, #34	; 0x22
   14cf0:	strbcc	r2, [r6, r1]
   14cf4:	add	r1, r9, #3
   14cf8:	add	r9, r9, #4
   14cfc:	cmp	r1, sl
   14d00:	movcc	r2, #63	; 0x3f
   14d04:	strbcc	r2, [r6, r1]
   14d08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14d0c:	cmp	r0, #0
   14d10:	bne	14708 <__assert_fail@plt+0x3158>
   14d14:	b	149e0 <__assert_fail@plt+0x3430>
   14d18:	mov	r5, #63	; 0x3f
   14d1c:	mov	r4, #0
   14d20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14d24:	cmp	r0, #0
   14d28:	bne	14708 <__assert_fail@plt+0x3158>
   14d2c:	b	149e0 <__assert_fail@plt+0x3430>
   14d30:	mov	r4, #1
   14d34:	mov	r6, #0
   14d38:	sub	sl, fp, #40	; 0x28
   14d3c:	str	r6, [sp, #64]	; 0x40
   14d40:	add	r6, r6, r7
   14d44:	sub	r0, fp, #44	; 0x2c
   14d48:	mov	r3, sl
   14d4c:	add	r1, ip, r6
   14d50:	sub	r2, lr, r6
   14d54:	bl	13b80 <__assert_fail@plt+0x25d0>
   14d58:	cmn	r0, #2
   14d5c:	beq	14e8c <__assert_fail@plt+0x38dc>
   14d60:	cmn	r0, #1
   14d64:	beq	14e80 <__assert_fail@plt+0x38d0>
   14d68:	ldr	r6, [sp, #64]	; 0x40
   14d6c:	cmp	r0, #0
   14d70:	beq	14ecc <__assert_fail@plt+0x391c>
   14d74:	add	r6, r0, r6
   14d78:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14d7c:	bl	11394 <iswprint@plt>
   14d80:	cmp	r0, #0
   14d84:	sub	sl, fp, #40	; 0x28
   14d88:	movwne	r0, #1
   14d8c:	and	r4, r4, r0
   14d90:	mov	r0, sl
   14d94:	bl	11334 <mbsinit@plt>
   14d98:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d9c:	ldr	lr, [sp, #84]	; 0x54
   14da0:	cmp	r0, #0
   14da4:	beq	14d3c <__assert_fail@plt+0x378c>
   14da8:	b	14ed0 <__assert_fail@plt+0x3920>
   14dac:	cmp	r9, sl
   14db0:	mov	r2, #1
   14db4:	movcc	r0, #39	; 0x27
   14db8:	strbcc	r0, [r6, r9]
   14dbc:	add	r0, r9, #1
   14dc0:	cmp	r0, sl
   14dc4:	movcc	r1, #36	; 0x24
   14dc8:	strbcc	r1, [r6, r0]
   14dcc:	add	r0, r9, #2
   14dd0:	cmp	r0, sl
   14dd4:	movcc	r1, #39	; 0x27
   14dd8:	strbcc	r1, [r6, r0]
   14ddc:	add	r0, r9, #3
   14de0:	cmp	r0, sl
   14de4:	add	r9, r0, #1
   14de8:	str	r2, [fp, #-48]	; 0xffffffd0
   14dec:	movcc	r1, #92	; 0x5c
   14df0:	strbcc	r1, [r6, r0]
   14df4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14df8:	cmp	r1, #2
   14dfc:	beq	14e5c <__assert_fail@plt+0x38ac>
   14e00:	add	r1, r7, #1
   14e04:	mov	r4, #0
   14e08:	mov	r8, #1
   14e0c:	mov	r5, #48	; 0x30
   14e10:	cmp	r1, lr
   14e14:	bcs	146fc <__assert_fail@plt+0x314c>
   14e18:	ldrb	r1, [ip, r1]
   14e1c:	sub	r1, r1, #48	; 0x30
   14e20:	uxtb	r1, r1
   14e24:	cmp	r1, #9
   14e28:	bhi	146fc <__assert_fail@plt+0x314c>
   14e2c:	cmp	r9, sl
   14e30:	movcc	r1, #48	; 0x30
   14e34:	strbcc	r1, [r6, r9]
   14e38:	add	r1, r0, #2
   14e3c:	add	r9, r0, #3
   14e40:	cmp	r1, sl
   14e44:	movcc	r2, #48	; 0x30
   14e48:	strbcc	r2, [r6, r1]
   14e4c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14e50:	cmp	r0, #0
   14e54:	bne	14708 <__assert_fail@plt+0x3158>
   14e58:	b	149e0 <__assert_fail@plt+0x3430>
   14e5c:	mov	r0, #48	; 0x30
   14e60:	mov	r8, #1
   14e64:	mov	r4, #0
   14e68:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14e6c:	cmp	r1, #0
   14e70:	bne	14a1c <__assert_fail@plt+0x346c>
   14e74:	cmp	r8, #0
   14e78:	beq	14998 <__assert_fail@plt+0x33e8>
   14e7c:	b	14788 <__assert_fail@plt+0x31d8>
   14e80:	mov	r4, #0
   14e84:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e88:	b	14ec4 <__assert_fail@plt+0x3914>
   14e8c:	ldr	r1, [sp, #84]	; 0x54
   14e90:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e94:	mov	r4, #0
   14e98:	cmp	r6, r1
   14e9c:	bcs	14ec4 <__assert_fail@plt+0x3914>
   14ea0:	ldrb	r0, [ip, r6]
   14ea4:	cmp	r0, #0
   14ea8:	beq	14ec4 <__assert_fail@plt+0x3914>
   14eac:	ldr	r0, [sp, #64]	; 0x40
   14eb0:	add	r0, r0, #1
   14eb4:	add	r6, r0, r7
   14eb8:	str	r0, [sp, #64]	; 0x40
   14ebc:	cmp	r6, r1
   14ec0:	bcc	14ea0 <__assert_fail@plt+0x38f0>
   14ec4:	ldr	r6, [sp, #64]	; 0x40
   14ec8:	b	14ed0 <__assert_fail@plt+0x3920>
   14ecc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ed0:	mov	r1, r6
   14ed4:	ldr	r6, [sp, #76]	; 0x4c
   14ed8:	ldr	sl, [sp, #56]	; 0x38
   14edc:	ldr	r0, [sp, #44]	; 0x2c
   14ee0:	cmp	r1, #1
   14ee4:	orr	r2, r4, r0
   14ee8:	mov	r0, r1
   14eec:	bhi	14f0c <__assert_fail@plt+0x395c>
   14ef0:	tst	r2, #1
   14ef4:	beq	14f0c <__assert_fail@plt+0x395c>
   14ef8:	ldr	lr, [sp, #84]	; 0x54
   14efc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f00:	cmp	r0, #0
   14f04:	bne	14708 <__assert_fail@plt+0x3158>
   14f08:	b	149e0 <__assert_fail@plt+0x3430>
   14f0c:	str	r2, [sp, #64]	; 0x40
   14f10:	add	r0, r0, r7
   14f14:	add	r1, r7, #1
   14f18:	ldr	lr, [sp, #84]	; 0x54
   14f1c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14f20:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14f24:	mov	r3, #0
   14f28:	str	r0, [sp, #56]	; 0x38
   14f2c:	ldr	r0, [sp, #64]	; 0x40
   14f30:	tst	r0, #1
   14f34:	bne	1501c <__assert_fail@plt+0x3a6c>
   14f38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14f3c:	tst	r0, #1
   14f40:	bne	151bc <__assert_fail@plt+0x3c0c>
   14f44:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14f48:	cmp	r7, #2
   14f4c:	movwne	r3, #1
   14f50:	orr	r3, r3, r2
   14f54:	tst	r3, #1
   14f58:	bne	14f90 <__assert_fail@plt+0x39e0>
   14f5c:	cmp	r9, sl
   14f60:	add	r3, r9, #1
   14f64:	movcc	r2, #39	; 0x27
   14f68:	strbcc	r2, [r6, r9]
   14f6c:	cmp	r3, sl
   14f70:	movcc	r2, #36	; 0x24
   14f74:	strbcc	r2, [r6, r3]
   14f78:	add	r3, r9, #2
   14f7c:	add	r9, r9, #3
   14f80:	cmp	r3, sl
   14f84:	movcc	r2, #39	; 0x27
   14f88:	strbcc	r2, [r6, r3]
   14f8c:	mov	r2, #1
   14f90:	cmp	r9, sl
   14f94:	mov	r0, r2
   14f98:	movcc	r3, #92	; 0x5c
   14f9c:	strbcc	r3, [r6, r9]
   14fa0:	add	r3, r9, #1
   14fa4:	cmp	r3, sl
   14fa8:	andcc	r7, r5, #192	; 0xc0
   14fac:	movcc	r2, #48	; 0x30
   14fb0:	orrcc	r7, r2, r7, lsr #6
   14fb4:	strbcc	r7, [r6, r3]
   14fb8:	add	r3, r9, #2
   14fbc:	add	r9, r9, #3
   14fc0:	cmp	r3, sl
   14fc4:	lsrcc	r7, r5, #3
   14fc8:	movcc	r2, #6
   14fcc:	bficc	r7, r2, #3, #29
   14fd0:	mov	r2, #6
   14fd4:	strbcc	r7, [r6, r3]
   14fd8:	bfi	r5, r2, #3, #29
   14fdc:	mov	r3, #1
   14fe0:	mov	r2, r0
   14fe4:	ldr	r0, [sp, #56]	; 0x38
   14fe8:	and	r8, r3, #1
   14fec:	cmp	r0, r1
   14ff0:	bhi	15050 <__assert_fail@plt+0x3aa0>
   14ff4:	b	15090 <__assert_fail@plt+0x3ae0>
   14ff8:	cmp	r9, sl
   14ffc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15000:	strbcc	r5, [r6, r9]
   15004:	add	r9, r9, #1
   15008:	ldrb	r5, [ip, r1]
   1500c:	add	r1, r1, #1
   15010:	ldr	r0, [sp, #64]	; 0x40
   15014:	tst	r0, #1
   15018:	beq	14f38 <__assert_fail@plt+0x3988>
   1501c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   15020:	tst	r7, #1
   15024:	beq	15038 <__assert_fail@plt+0x3a88>
   15028:	cmp	r9, sl
   1502c:	movcc	r7, #92	; 0x5c
   15030:	strbcc	r7, [r6, r9]
   15034:	add	r9, r9, #1
   15038:	mov	r7, #0
   1503c:	str	r7, [fp, #-56]	; 0xffffffc8
   15040:	ldr	r0, [sp, #56]	; 0x38
   15044:	and	r8, r3, #1
   15048:	cmp	r0, r1
   1504c:	bls	15090 <__assert_fail@plt+0x3ae0>
   15050:	cmp	r8, #0
   15054:	mvn	r7, r2
   15058:	movwne	r8, #1
   1505c:	orr	r7, r7, r8
   15060:	tst	r7, #1
   15064:	bne	14ff8 <__assert_fail@plt+0x3a48>
   15068:	cmp	r9, sl
   1506c:	movcc	r7, #39	; 0x27
   15070:	strbcc	r7, [r6, r9]
   15074:	add	r7, r9, #1
   15078:	add	r9, r9, #2
   1507c:	cmp	r7, sl
   15080:	movcc	r2, #39	; 0x27
   15084:	strbcc	r2, [r6, r7]
   15088:	mov	r2, #0
   1508c:	b	14ff8 <__assert_fail@plt+0x3a48>
   15090:	cmp	r8, #0
   15094:	sub	r7, r1, #1
   15098:	mov	r0, r5
   1509c:	str	r2, [fp, #-48]	; 0xffffffd0
   150a0:	movwne	r8, #1
   150a4:	cmp	r8, #0
   150a8:	beq	14998 <__assert_fail@plt+0x33e8>
   150ac:	b	14788 <__assert_fail@plt+0x31d8>
   150b0:	mov	lr, r7
   150b4:	b	150bc <__assert_fail@plt+0x3b0c>
   150b8:	mvn	lr, #0
   150bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   150c0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   150c4:	eor	r0, r7, #2
   150c8:	orr	r0, r0, r9
   150cc:	clz	r0, r0
   150d0:	lsr	r0, r0, #5
   150d4:	tst	r1, r0
   150d8:	bne	151d8 <__assert_fail@plt+0x3c28>
   150dc:	mov	r0, r1
   150e0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   150e4:	cmp	r7, #2
   150e8:	movwne	r1, #1
   150ec:	orr	r0, r0, r1
   150f0:	tst	r0, #1
   150f4:	ldreq	r0, [sp, #52]	; 0x34
   150f8:	streq	lr, [sp, #84]	; 0x54
   150fc:	eoreq	r0, r0, #1
   15100:	tsteq	r0, #1
   15104:	bne	1529c <__assert_fail@plt+0x3cec>
   15108:	tst	r4, #1
   1510c:	bne	15258 <__assert_fail@plt+0x3ca8>
   15110:	ldr	r6, [sp, #48]	; 0x30
   15114:	mov	r8, #0
   15118:	cmp	r6, #0
   1511c:	beq	15294 <__assert_fail@plt+0x3ce4>
   15120:	ldr	r0, [sp, #80]	; 0x50
   15124:	mov	r1, #0
   15128:	cmp	sl, #0
   1512c:	mov	r4, #0
   15130:	str	r1, [fp, #-72]	; 0xffffffb8
   15134:	beq	14028 <__assert_fail@plt+0x2a78>
   15138:	b	1529c <__assert_fail@plt+0x3cec>
   1513c:	ldrb	r1, [r0, #3]
   15140:	cmp	r1, #56	; 0x38
   15144:	ldrbeq	r1, [r0, #4]
   15148:	cmpeq	r1, #48	; 0x30
   1514c:	bne	14220 <__assert_fail@plt+0x2c70>
   15150:	ldrb	r1, [r0, #5]
   15154:	cmp	r1, #51	; 0x33
   15158:	ldrbeq	r1, [r0, #6]
   1515c:	cmpeq	r1, #48	; 0x30
   15160:	bne	14220 <__assert_fail@plt+0x2c70>
   15164:	ldrb	r0, [r0, #7]
   15168:	cmp	r0, #0
   1516c:	movw	r0, #33452	; 0x82ac
   15170:	movt	r0, #1
   15174:	str	r0, [sp, #68]	; 0x44
   15178:	bne	14220 <__assert_fail@plt+0x2c70>
   1517c:	b	1423c <__assert_fail@plt+0x2c8c>
   15180:	ldrb	r1, [r0, #4]
   15184:	cmp	r1, #48	; 0x30
   15188:	ldrbeq	r1, [r0, #5]
   1518c:	cmpeq	r1, #51	; 0x33
   15190:	bne	14304 <__assert_fail@plt+0x2d54>
   15194:	ldrb	r1, [r0, #6]
   15198:	cmp	r1, #48	; 0x30
   1519c:	ldrbeq	r0, [r0, #7]
   151a0:	cmpeq	r0, #0
   151a4:	bne	14304 <__assert_fail@plt+0x2d54>
   151a8:	movw	r0, #33456	; 0x82b0
   151ac:	movt	r0, #1
   151b0:	str	r0, [sp, #72]	; 0x48
   151b4:	b	14324 <__assert_fail@plt+0x2d74>
   151b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   151bc:	ldr	r2, [sp, #80]	; 0x50
   151c0:	b	151f8 <__assert_fail@plt+0x3c48>
   151c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   151c8:	mov	r2, #1
   151cc:	mov	lr, r4
   151d0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   151d4:	b	151f8 <__assert_fail@plt+0x3c48>
   151d8:	ldr	r2, [sp, #80]	; 0x50
   151dc:	mov	r7, #2
   151e0:	b	151f8 <__assert_fail@plt+0x3c48>
   151e4:	ldr	r6, [sp, #76]	; 0x4c
   151e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   151ec:	ldr	lr, [sp, #84]	; 0x54
   151f0:	ldr	r2, [sp, #80]	; 0x50
   151f4:	mov	r7, #2
   151f8:	mov	r0, #0
   151fc:	ldr	r1, [fp, #12]
   15200:	tst	r2, #1
   15204:	mov	r2, r7
   15208:	mov	r3, lr
   1520c:	str	r0, [sp, #8]
   15210:	ldr	r0, [sp, #68]	; 0x44
   15214:	movwne	r2, #4
   15218:	cmp	r7, #2
   1521c:	movne	r2, r7
   15220:	str	r2, [sp]
   15224:	mov	r2, ip
   15228:	bic	r1, r1, #2
   1522c:	str	r0, [sp, #12]
   15230:	ldr	r0, [sp, #72]	; 0x48
   15234:	str	r1, [sp, #4]
   15238:	mov	r1, sl
   1523c:	str	r0, [sp, #16]
   15240:	mov	r0, r6
   15244:	bl	13fac <__assert_fail@plt+0x29fc>
   15248:	mov	r9, r0
   1524c:	mov	r0, r9
   15250:	sub	sp, fp, #28
   15254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15258:	mov	r0, #5
   1525c:	ldr	r1, [sp, #48]	; 0x30
   15260:	ldr	r2, [fp, #-84]	; 0xffffffac
   15264:	ldr	r3, [sp, #84]	; 0x54
   15268:	str	r0, [sp]
   1526c:	ldr	r0, [fp, #12]
   15270:	str	r0, [sp, #4]
   15274:	ldr	r0, [fp, #16]
   15278:	str	r0, [sp, #8]
   1527c:	ldr	r0, [sp, #68]	; 0x44
   15280:	str	r0, [sp, #12]
   15284:	ldr	r0, [sp, #72]	; 0x48
   15288:	str	r0, [sp, #16]
   1528c:	ldr	r0, [sp, #76]	; 0x4c
   15290:	b	15244 <__assert_fail@plt+0x3c94>
   15294:	mov	r0, #0
   15298:	str	r0, [fp, #-72]	; 0xffffffb8
   1529c:	ldr	r1, [sp, #92]	; 0x5c
   152a0:	cmp	r1, #0
   152a4:	beq	152e4 <__assert_fail@plt+0x3d34>
   152a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   152ac:	ldr	r2, [sp, #76]	; 0x4c
   152b0:	tst	r0, #1
   152b4:	bne	152e8 <__assert_fail@plt+0x3d38>
   152b8:	ldrb	r0, [r1]
   152bc:	cmp	r0, #0
   152c0:	beq	152e8 <__assert_fail@plt+0x3d38>
   152c4:	add	r1, r1, #1
   152c8:	cmp	r9, sl
   152cc:	strbcc	r0, [r2, r9]
   152d0:	add	r9, r9, #1
   152d4:	ldrb	r0, [r1], #1
   152d8:	cmp	r0, #0
   152dc:	bne	152c8 <__assert_fail@plt+0x3d18>
   152e0:	b	152e8 <__assert_fail@plt+0x3d38>
   152e4:	ldr	r2, [sp, #76]	; 0x4c
   152e8:	cmp	r9, sl
   152ec:	movcc	r0, #0
   152f0:	strbcc	r0, [r2, r9]
   152f4:	mov	r0, r9
   152f8:	sub	sp, fp, #28
   152fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15300:	mov	r2, #1
   15304:	b	151d0 <__assert_fail@plt+0x3c20>
   15308:	ldr	r2, [sp, #80]	; 0x50
   1530c:	mov	r7, #5
   15310:	b	151f8 <__assert_fail@plt+0x3c48>
   15314:	bl	11598 <abort@plt>
   15318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1531c:	add	fp, sp, #28
   15320:	sub	sp, sp, #28
   15324:	movw	r5, #37360	; 0x91f0
   15328:	cmp	r2, #0
   1532c:	mov	r4, r1
   15330:	mov	r7, r0
   15334:	str	r0, [sp, #20]
   15338:	movt	r5, #2
   1533c:	movne	r5, r2
   15340:	bl	114a8 <__errno_location@plt>
   15344:	mov	sl, r0
   15348:	ldm	r5, {r0, r1}
   1534c:	ldr	r2, [r5, #40]	; 0x28
   15350:	ldr	r3, [r5, #44]	; 0x2c
   15354:	add	r9, r5, #8
   15358:	ldr	r6, [sl]
   1535c:	orr	r8, r1, #1
   15360:	mov	r1, #0
   15364:	str	r6, [sp, #24]
   15368:	stm	sp, {r0, r8, r9}
   1536c:	str	r2, [sp, #12]
   15370:	str	r3, [sp, #16]
   15374:	mov	r0, #0
   15378:	mov	r2, r7
   1537c:	mov	r3, r4
   15380:	mov	r6, r4
   15384:	bl	13fac <__assert_fail@plt+0x29fc>
   15388:	add	r7, r0, #1
   1538c:	mov	r0, r7
   15390:	bl	16798 <__assert_fail@plt+0x51e8>
   15394:	mov	r4, r0
   15398:	ldr	r0, [r5]
   1539c:	ldr	r2, [r5, #44]	; 0x2c
   153a0:	ldr	r1, [r5, #40]	; 0x28
   153a4:	mov	r3, r6
   153a8:	stm	sp, {r0, r8, r9}
   153ac:	str	r2, [sp, #16]
   153b0:	str	r1, [sp, #12]
   153b4:	mov	r0, r4
   153b8:	mov	r1, r7
   153bc:	ldr	r2, [sp, #20]
   153c0:	bl	13fac <__assert_fail@plt+0x29fc>
   153c4:	ldr	r0, [sp, #24]
   153c8:	str	r0, [sl]
   153cc:	mov	r0, r4
   153d0:	sub	sp, fp, #28
   153d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153dc:	add	fp, sp, #28
   153e0:	sub	sp, sp, #36	; 0x24
   153e4:	movw	r8, #37360	; 0x91f0
   153e8:	cmp	r3, #0
   153ec:	mov	r4, r2
   153f0:	str	r2, [sp, #24]
   153f4:	mov	r5, r1
   153f8:	mov	r6, r0
   153fc:	str	r0, [sp, #20]
   15400:	movt	r8, #2
   15404:	movne	r8, r3
   15408:	bl	114a8 <__errno_location@plt>
   1540c:	str	r0, [sp, #28]
   15410:	cmp	r4, #0
   15414:	add	sl, r8, #8
   15418:	ldm	r8, {r3, r9}
   1541c:	ldr	r7, [r0]
   15420:	ldr	r1, [r8, #40]	; 0x28
   15424:	ldr	r2, [r8, #44]	; 0x2c
   15428:	mov	r0, #0
   1542c:	orreq	r9, r9, #1
   15430:	str	r7, [sp, #32]
   15434:	mov	r7, r5
   15438:	stm	sp, {r3, r9, sl}
   1543c:	str	r1, [sp, #12]
   15440:	str	r2, [sp, #16]
   15444:	mov	r1, #0
   15448:	mov	r2, r6
   1544c:	mov	r3, r5
   15450:	bl	13fac <__assert_fail@plt+0x29fc>
   15454:	add	r4, r0, #1
   15458:	mov	r5, r0
   1545c:	mov	r0, r4
   15460:	bl	16798 <__assert_fail@plt+0x51e8>
   15464:	mov	r6, r0
   15468:	ldr	r0, [r8]
   1546c:	ldr	r2, [r8, #44]	; 0x2c
   15470:	ldr	r1, [r8, #40]	; 0x28
   15474:	mov	r3, r7
   15478:	stm	sp, {r0, r9, sl}
   1547c:	str	r2, [sp, #16]
   15480:	str	r1, [sp, #12]
   15484:	mov	r0, r6
   15488:	mov	r1, r4
   1548c:	ldr	r2, [sp, #20]
   15490:	bl	13fac <__assert_fail@plt+0x29fc>
   15494:	ldr	r0, [sp, #24]
   15498:	ldr	r1, [sp, #32]
   1549c:	ldr	r2, [sp, #28]
   154a0:	cmp	r0, #0
   154a4:	str	r1, [r2]
   154a8:	strne	r5, [r0]
   154ac:	mov	r0, r6
   154b0:	sub	sp, fp, #28
   154b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154b8:	push	{r4, r5, r6, r7, fp, lr}
   154bc:	add	fp, sp, #16
   154c0:	movw	r4, #37216	; 0x9160
   154c4:	movt	r4, #2
   154c8:	ldrd	r6, [r4]
   154cc:	cmp	r7, #2
   154d0:	blt	154fc <__assert_fail@plt+0x3f4c>
   154d4:	add	r5, r6, #12
   154d8:	mov	r7, #0
   154dc:	ldr	r0, [r5, r7, lsl #3]
   154e0:	bl	139a8 <__assert_fail@plt+0x23f8>
   154e4:	ldr	r1, [r4, #4]
   154e8:	add	r2, r7, #2
   154ec:	add	r0, r7, #1
   154f0:	mov	r7, r0
   154f4:	cmp	r2, r1
   154f8:	blt	154dc <__assert_fail@plt+0x3f2c>
   154fc:	ldr	r0, [r6, #4]
   15500:	movw	r5, #37408	; 0x9220
   15504:	movt	r5, #2
   15508:	cmp	r0, r5
   1550c:	beq	15520 <__assert_fail@plt+0x3f70>
   15510:	bl	139a8 <__assert_fail@plt+0x23f8>
   15514:	mov	r0, #256	; 0x100
   15518:	str	r0, [r4, #8]
   1551c:	str	r5, [r4, #12]
   15520:	add	r5, r4, #8
   15524:	cmp	r6, r5
   15528:	beq	15538 <__assert_fail@plt+0x3f88>
   1552c:	mov	r0, r6
   15530:	bl	139a8 <__assert_fail@plt+0x23f8>
   15534:	str	r5, [r4]
   15538:	mov	r0, #1
   1553c:	str	r0, [r4, #4]
   15540:	pop	{r4, r5, r6, r7, fp, pc}
   15544:	movw	r3, #37360	; 0x91f0
   15548:	mvn	r2, #0
   1554c:	movt	r3, #2
   15550:	b	15554 <__assert_fail@plt+0x3fa4>
   15554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15558:	add	fp, sp, #28
   1555c:	sub	sp, sp, #44	; 0x2c
   15560:	mov	r7, r3
   15564:	str	r2, [sp, #36]	; 0x24
   15568:	str	r1, [sp, #32]
   1556c:	mov	r5, r0
   15570:	bl	114a8 <__errno_location@plt>
   15574:	cmp	r5, #0
   15578:	blt	156dc <__assert_fail@plt+0x412c>
   1557c:	cmn	r5, #-2147483647	; 0x80000001
   15580:	beq	156dc <__assert_fail@plt+0x412c>
   15584:	movw	r8, #37216	; 0x9160
   15588:	mov	r4, r0
   1558c:	movt	r8, #2
   15590:	ldr	r6, [r8]
   15594:	ldr	r1, [r8, #4]
   15598:	ldr	r0, [r0]
   1559c:	str	r4, [sp, #28]
   155a0:	cmp	r1, r5
   155a4:	str	r0, [sp, #24]
   155a8:	ble	155b4 <__assert_fail@plt+0x4004>
   155ac:	mov	sl, r6
   155b0:	b	15618 <__assert_fail@plt+0x4068>
   155b4:	mov	r0, #8
   155b8:	add	r9, r8, #8
   155bc:	add	r2, r5, #1
   155c0:	str	r1, [fp, #-32]	; 0xffffffe0
   155c4:	mvn	r3, #-2147483648	; 0x80000000
   155c8:	str	r0, [sp]
   155cc:	subs	r0, r6, r9
   155d0:	sub	r2, r2, r1
   155d4:	sub	r1, fp, #32
   155d8:	movne	r0, r6
   155dc:	bl	16998 <__assert_fail@plt+0x53e8>
   155e0:	str	r0, [r8]
   155e4:	cmp	r6, r9
   155e8:	mov	sl, r0
   155ec:	ldrdeq	r0, [r8, #8]
   155f0:	stmeq	sl, {r0, r1}
   155f4:	ldr	r1, [r8, #4]
   155f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   155fc:	add	r0, sl, r1, lsl #3
   15600:	sub	r1, r2, r1
   15604:	lsl	r2, r1, #3
   15608:	mov	r1, #0
   1560c:	bl	114cc <memset@plt>
   15610:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15614:	str	r0, [r8, #4]
   15618:	mov	r9, sl
   1561c:	ldr	r6, [r9, r5, lsl #3]!
   15620:	ldr	r4, [r9, #4]!
   15624:	ldm	r7, {r0, r1}
   15628:	ldr	r2, [r7, #40]	; 0x28
   1562c:	ldr	r3, [r7, #44]	; 0x2c
   15630:	orr	r8, r1, #1
   15634:	add	r1, r7, #8
   15638:	stm	sp, {r0, r8}
   1563c:	add	r0, sp, #8
   15640:	str	r1, [sp, #20]
   15644:	stm	r0, {r1, r2, r3}
   15648:	mov	r0, r4
   1564c:	mov	r1, r6
   15650:	ldr	r2, [sp, #32]
   15654:	ldr	r3, [sp, #36]	; 0x24
   15658:	bl	13fac <__assert_fail@plt+0x29fc>
   1565c:	cmp	r6, r0
   15660:	bhi	156c4 <__assert_fail@plt+0x4114>
   15664:	add	r6, r0, #1
   15668:	movw	r0, #37408	; 0x9220
   1566c:	movt	r0, #2
   15670:	str	r6, [sl, r5, lsl #3]
   15674:	cmp	r4, r0
   15678:	beq	15684 <__assert_fail@plt+0x40d4>
   1567c:	mov	r0, r4
   15680:	bl	139a8 <__assert_fail@plt+0x23f8>
   15684:	mov	r0, r6
   15688:	bl	16798 <__assert_fail@plt+0x51e8>
   1568c:	str	r0, [r9]
   15690:	mov	r4, r0
   15694:	add	r3, sp, #8
   15698:	ldr	r0, [r7]
   1569c:	ldr	r1, [r7, #40]	; 0x28
   156a0:	ldr	r2, [r7, #44]	; 0x2c
   156a4:	stm	sp, {r0, r8}
   156a8:	ldr	r0, [sp, #20]
   156ac:	stm	r3, {r0, r1, r2}
   156b0:	mov	r0, r4
   156b4:	mov	r1, r6
   156b8:	ldr	r2, [sp, #32]
   156bc:	ldr	r3, [sp, #36]	; 0x24
   156c0:	bl	13fac <__assert_fail@plt+0x29fc>
   156c4:	ldr	r1, [sp, #24]
   156c8:	ldr	r0, [sp, #28]
   156cc:	str	r1, [r0]
   156d0:	mov	r0, r4
   156d4:	sub	sp, fp, #28
   156d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156dc:	bl	11598 <abort@plt>
   156e0:	movw	r3, #37360	; 0x91f0
   156e4:	movt	r3, #2
   156e8:	b	15554 <__assert_fail@plt+0x3fa4>
   156ec:	movw	r3, #37360	; 0x91f0
   156f0:	mov	r1, r0
   156f4:	mov	r0, #0
   156f8:	mvn	r2, #0
   156fc:	movt	r3, #2
   15700:	b	15554 <__assert_fail@plt+0x3fa4>
   15704:	movw	r3, #37360	; 0x91f0
   15708:	mov	r2, r1
   1570c:	mov	r1, r0
   15710:	mov	r0, #0
   15714:	movt	r3, #2
   15718:	b	15554 <__assert_fail@plt+0x3fa4>
   1571c:	push	{fp, lr}
   15720:	mov	fp, sp
   15724:	sub	sp, sp, #48	; 0x30
   15728:	vmov.i32	q8, #0	; 0x00000000
   1572c:	mov	ip, #32
   15730:	mov	r3, sp
   15734:	mov	lr, r2
   15738:	cmp	r1, #10
   1573c:	add	r2, r3, #16
   15740:	vst1.64	{d16-d17}, [r3], ip
   15744:	vst1.64	{d16-d17}, [r3]
   15748:	vst1.64	{d16-d17}, [r2]
   1574c:	beq	1576c <__assert_fail@plt+0x41bc>
   15750:	str	r1, [sp]
   15754:	mov	r3, sp
   15758:	mov	r1, lr
   1575c:	mvn	r2, #0
   15760:	bl	15554 <__assert_fail@plt+0x3fa4>
   15764:	mov	sp, fp
   15768:	pop	{fp, pc}
   1576c:	bl	11598 <abort@plt>
   15770:	push	{r4, sl, fp, lr}
   15774:	add	fp, sp, #8
   15778:	sub	sp, sp, #48	; 0x30
   1577c:	mov	ip, r3
   15780:	mov	r3, sp
   15784:	vmov.i32	q8, #0	; 0x00000000
   15788:	mov	lr, #32
   1578c:	cmp	r1, #10
   15790:	add	r4, r3, #16
   15794:	vst1.64	{d16-d17}, [r3], lr
   15798:	vst1.64	{d16-d17}, [r3]
   1579c:	vst1.64	{d16-d17}, [r4]
   157a0:	beq	157c0 <__assert_fail@plt+0x4210>
   157a4:	str	r1, [sp]
   157a8:	mov	r1, r2
   157ac:	mov	r3, sp
   157b0:	mov	r2, ip
   157b4:	bl	15554 <__assert_fail@plt+0x3fa4>
   157b8:	sub	sp, fp, #8
   157bc:	pop	{r4, sl, fp, pc}
   157c0:	bl	11598 <abort@plt>
   157c4:	push	{fp, lr}
   157c8:	mov	fp, sp
   157cc:	sub	sp, sp, #48	; 0x30
   157d0:	mov	r3, sp
   157d4:	vmov.i32	q8, #0	; 0x00000000
   157d8:	mov	ip, #32
   157dc:	cmp	r0, #10
   157e0:	add	r2, r3, #16
   157e4:	vst1.64	{d16-d17}, [r3], ip
   157e8:	vst1.64	{d16-d17}, [r3]
   157ec:	vst1.64	{d16-d17}, [r2]
   157f0:	beq	15810 <__assert_fail@plt+0x4260>
   157f4:	str	r0, [sp]
   157f8:	mov	r3, sp
   157fc:	mov	r0, #0
   15800:	mvn	r2, #0
   15804:	bl	15554 <__assert_fail@plt+0x3fa4>
   15808:	mov	sp, fp
   1580c:	pop	{fp, pc}
   15810:	bl	11598 <abort@plt>
   15814:	push	{fp, lr}
   15818:	mov	fp, sp
   1581c:	sub	sp, sp, #48	; 0x30
   15820:	mov	r3, sp
   15824:	vmov.i32	q8, #0	; 0x00000000
   15828:	mov	ip, #32
   1582c:	cmp	r0, #10
   15830:	add	lr, r3, #16
   15834:	vst1.64	{d16-d17}, [r3], ip
   15838:	vst1.64	{d16-d17}, [r3]
   1583c:	vst1.64	{d16-d17}, [lr]
   15840:	beq	1585c <__assert_fail@plt+0x42ac>
   15844:	str	r0, [sp]
   15848:	mov	r3, sp
   1584c:	mov	r0, #0
   15850:	bl	15554 <__assert_fail@plt+0x3fa4>
   15854:	mov	sp, fp
   15858:	pop	{fp, pc}
   1585c:	bl	11598 <abort@plt>
   15860:	push	{r4, sl, fp, lr}
   15864:	add	fp, sp, #8
   15868:	sub	sp, sp, #48	; 0x30
   1586c:	mov	lr, r0
   15870:	movw	r0, #37360	; 0x91f0
   15874:	mov	r3, #32
   15878:	mov	ip, r1
   1587c:	mov	r4, #1
   15880:	movt	r0, #2
   15884:	add	r1, r0, #16
   15888:	vld1.64	{d16-d17}, [r0], r3
   1588c:	mov	r3, sp
   15890:	vld1.64	{d18-d19}, [r1]
   15894:	add	r1, r3, #16
   15898:	vld1.64	{d20-d21}, [r0]
   1589c:	add	r0, r3, #32
   158a0:	vst1.64	{d18-d19}, [r1]
   158a4:	mov	r1, r3
   158a8:	vst1.64	{d20-d21}, [r0]
   158ac:	mov	r0, #28
   158b0:	and	r0, r0, r2, lsr #3
   158b4:	and	r2, r2, #31
   158b8:	vst1.64	{d16-d17}, [r1], r0
   158bc:	ldr	r0, [r1, #8]
   158c0:	bic	r4, r4, r0, lsr r2
   158c4:	eor	r0, r0, r4, lsl r2
   158c8:	mov	r2, ip
   158cc:	str	r0, [r1, #8]
   158d0:	mov	r0, #0
   158d4:	mov	r1, lr
   158d8:	bl	15554 <__assert_fail@plt+0x3fa4>
   158dc:	sub	sp, fp, #8
   158e0:	pop	{r4, sl, fp, pc}
   158e4:	push	{fp, lr}
   158e8:	mov	fp, sp
   158ec:	sub	sp, sp, #48	; 0x30
   158f0:	mov	ip, r0
   158f4:	movw	r0, #37360	; 0x91f0
   158f8:	mov	r3, #32
   158fc:	movt	r0, #2
   15900:	add	r2, r0, #16
   15904:	vld1.64	{d16-d17}, [r0], r3
   15908:	mov	r3, sp
   1590c:	vld1.64	{d18-d19}, [r2]
   15910:	add	r2, r3, #16
   15914:	vld1.64	{d20-d21}, [r0]
   15918:	add	r0, r3, #32
   1591c:	vst1.64	{d18-d19}, [r2]
   15920:	mov	r2, r3
   15924:	vst1.64	{d20-d21}, [r0]
   15928:	mov	r0, #28
   1592c:	and	r0, r0, r1, lsr #3
   15930:	and	r1, r1, #31
   15934:	vst1.64	{d16-d17}, [r2], r0
   15938:	mov	r0, #1
   1593c:	ldr	lr, [r2, #8]
   15940:	bic	r0, r0, lr, lsr r1
   15944:	eor	r0, lr, r0, lsl r1
   15948:	mov	r1, ip
   1594c:	str	r0, [r2, #8]
   15950:	mov	r0, #0
   15954:	mvn	r2, #0
   15958:	bl	15554 <__assert_fail@plt+0x3fa4>
   1595c:	mov	sp, fp
   15960:	pop	{fp, pc}
   15964:	push	{fp, lr}
   15968:	mov	fp, sp
   1596c:	sub	sp, sp, #48	; 0x30
   15970:	movw	r2, #37360	; 0x91f0
   15974:	mov	r3, #32
   15978:	mov	r1, r0
   1597c:	movt	r2, #2
   15980:	add	r0, r2, #16
   15984:	vld1.64	{d16-d17}, [r2], r3
   15988:	mov	r3, sp
   1598c:	vld1.64	{d18-d19}, [r0]
   15990:	add	r0, r3, #16
   15994:	vld1.64	{d20-d21}, [r2]
   15998:	mov	r2, r3
   1599c:	vst1.64	{d18-d19}, [r0]
   159a0:	add	r0, r3, #32
   159a4:	vst1.64	{d20-d21}, [r0]
   159a8:	mov	r0, #12
   159ac:	vst1.64	{d16-d17}, [r2], r0
   159b0:	ldr	r0, [r2]
   159b4:	orr	r0, r0, #67108864	; 0x4000000
   159b8:	str	r0, [r2]
   159bc:	mov	r0, #0
   159c0:	mvn	r2, #0
   159c4:	bl	15554 <__assert_fail@plt+0x3fa4>
   159c8:	mov	sp, fp
   159cc:	pop	{fp, pc}
   159d0:	push	{fp, lr}
   159d4:	mov	fp, sp
   159d8:	sub	sp, sp, #48	; 0x30
   159dc:	mov	ip, r1
   159e0:	mov	r1, r0
   159e4:	movw	r0, #37360	; 0x91f0
   159e8:	mov	r3, #32
   159ec:	movt	r0, #2
   159f0:	add	r2, r0, #16
   159f4:	vld1.64	{d16-d17}, [r0], r3
   159f8:	mov	r3, sp
   159fc:	vld1.64	{d18-d19}, [r2]
   15a00:	add	r2, r3, #16
   15a04:	vld1.64	{d20-d21}, [r0]
   15a08:	add	r0, r3, #32
   15a0c:	vst1.64	{d18-d19}, [r2]
   15a10:	mov	r2, r3
   15a14:	vst1.64	{d20-d21}, [r0]
   15a18:	mov	r0, #12
   15a1c:	vst1.64	{d16-d17}, [r2], r0
   15a20:	ldr	r0, [r2]
   15a24:	orr	r0, r0, #67108864	; 0x4000000
   15a28:	str	r0, [r2]
   15a2c:	mov	r0, #0
   15a30:	mov	r2, ip
   15a34:	bl	15554 <__assert_fail@plt+0x3fa4>
   15a38:	mov	sp, fp
   15a3c:	pop	{fp, pc}
   15a40:	push	{r4, sl, fp, lr}
   15a44:	add	fp, sp, #8
   15a48:	sub	sp, sp, #96	; 0x60
   15a4c:	mov	ip, r2
   15a50:	mov	r2, sp
   15a54:	vmov.i32	q8, #0	; 0x00000000
   15a58:	mov	r4, #28
   15a5c:	cmp	r1, #10
   15a60:	mov	r3, r2
   15a64:	add	lr, r2, #16
   15a68:	vst1.64	{d16-d17}, [r3], r4
   15a6c:	vst1.64	{d16-d17}, [lr]
   15a70:	vst1.32	{d16-d17}, [r3]
   15a74:	beq	15ac4 <__assert_fail@plt+0x4514>
   15a78:	vld1.64	{d16-d17}, [r2], r4
   15a7c:	vld1.64	{d18-d19}, [lr]
   15a80:	add	r3, sp, #48	; 0x30
   15a84:	add	r4, r3, #4
   15a88:	vld1.32	{d20-d21}, [r2]
   15a8c:	add	r2, r3, #20
   15a90:	vst1.32	{d16-d17}, [r4]
   15a94:	vst1.32	{d18-d19}, [r2]
   15a98:	add	r2, r3, #32
   15a9c:	vst1.32	{d20-d21}, [r2]
   15aa0:	str	r1, [sp, #48]	; 0x30
   15aa4:	mvn	r2, #0
   15aa8:	ldr	r1, [sp, #60]	; 0x3c
   15aac:	orr	r1, r1, #67108864	; 0x4000000
   15ab0:	str	r1, [sp, #60]	; 0x3c
   15ab4:	mov	r1, ip
   15ab8:	bl	15554 <__assert_fail@plt+0x3fa4>
   15abc:	sub	sp, fp, #8
   15ac0:	pop	{r4, sl, fp, pc}
   15ac4:	bl	11598 <abort@plt>
   15ac8:	push	{r4, r5, fp, lr}
   15acc:	add	fp, sp, #8
   15ad0:	sub	sp, sp, #48	; 0x30
   15ad4:	mov	ip, r3
   15ad8:	movw	r3, #37360	; 0x91f0
   15adc:	mov	lr, #32
   15ae0:	cmp	r1, #0
   15ae4:	mov	r5, sp
   15ae8:	movt	r3, #2
   15aec:	cmpne	r2, #0
   15af0:	add	r4, r3, #16
   15af4:	vld1.64	{d16-d17}, [r3], lr
   15af8:	vld1.64	{d18-d19}, [r4]
   15afc:	add	r4, r5, #16
   15b00:	vld1.64	{d20-d21}, [r3]
   15b04:	vst1.64	{d16-d17}, [r5], lr
   15b08:	mov	r3, #10
   15b0c:	vst1.64	{d18-d19}, [r4]
   15b10:	vst1.64	{d20-d21}, [r5]
   15b14:	str	r3, [sp]
   15b18:	bne	15b20 <__assert_fail@plt+0x4570>
   15b1c:	bl	11598 <abort@plt>
   15b20:	str	r2, [sp, #44]	; 0x2c
   15b24:	str	r1, [sp, #40]	; 0x28
   15b28:	mov	r3, sp
   15b2c:	mov	r1, ip
   15b30:	mvn	r2, #0
   15b34:	bl	15554 <__assert_fail@plt+0x3fa4>
   15b38:	sub	sp, fp, #8
   15b3c:	pop	{r4, r5, fp, pc}
   15b40:	push	{r4, r5, fp, lr}
   15b44:	add	fp, sp, #8
   15b48:	sub	sp, sp, #48	; 0x30
   15b4c:	mov	lr, r3
   15b50:	movw	r3, #37360	; 0x91f0
   15b54:	mov	ip, #32
   15b58:	cmp	r1, #0
   15b5c:	mov	r5, sp
   15b60:	movt	r3, #2
   15b64:	cmpne	r2, #0
   15b68:	add	r4, r3, #16
   15b6c:	vld1.64	{d16-d17}, [r3], ip
   15b70:	vld1.64	{d18-d19}, [r4]
   15b74:	add	r4, r5, #16
   15b78:	vld1.64	{d20-d21}, [r3]
   15b7c:	vst1.64	{d16-d17}, [r5], ip
   15b80:	mov	r3, #10
   15b84:	vst1.64	{d18-d19}, [r4]
   15b88:	vst1.64	{d20-d21}, [r5]
   15b8c:	str	r3, [sp]
   15b90:	bne	15b98 <__assert_fail@plt+0x45e8>
   15b94:	bl	11598 <abort@plt>
   15b98:	ldr	ip, [fp, #8]
   15b9c:	str	r2, [sp, #44]	; 0x2c
   15ba0:	str	r1, [sp, #40]	; 0x28
   15ba4:	mov	r3, sp
   15ba8:	mov	r1, lr
   15bac:	mov	r2, ip
   15bb0:	bl	15554 <__assert_fail@plt+0x3fa4>
   15bb4:	sub	sp, fp, #8
   15bb8:	pop	{r4, r5, fp, pc}
   15bbc:	push	{r4, sl, fp, lr}
   15bc0:	add	fp, sp, #8
   15bc4:	sub	sp, sp, #48	; 0x30
   15bc8:	mov	ip, r2
   15bcc:	movw	r2, #37360	; 0x91f0
   15bd0:	mov	lr, #32
   15bd4:	cmp	r0, #0
   15bd8:	mov	r4, sp
   15bdc:	movt	r2, #2
   15be0:	cmpne	r1, #0
   15be4:	add	r3, r2, #16
   15be8:	vld1.64	{d16-d17}, [r2], lr
   15bec:	vld1.64	{d18-d19}, [r3]
   15bf0:	add	r3, r4, #16
   15bf4:	vld1.64	{d20-d21}, [r2]
   15bf8:	vst1.64	{d16-d17}, [r4], lr
   15bfc:	mov	r2, #10
   15c00:	vst1.64	{d18-d19}, [r3]
   15c04:	vst1.64	{d20-d21}, [r4]
   15c08:	str	r2, [sp]
   15c0c:	bne	15c14 <__assert_fail@plt+0x4664>
   15c10:	bl	11598 <abort@plt>
   15c14:	str	r1, [sp, #44]	; 0x2c
   15c18:	str	r0, [sp, #40]	; 0x28
   15c1c:	mov	r3, sp
   15c20:	mov	r0, #0
   15c24:	mov	r1, ip
   15c28:	mvn	r2, #0
   15c2c:	bl	15554 <__assert_fail@plt+0x3fa4>
   15c30:	sub	sp, fp, #8
   15c34:	pop	{r4, sl, fp, pc}
   15c38:	push	{r4, r5, fp, lr}
   15c3c:	add	fp, sp, #8
   15c40:	sub	sp, sp, #48	; 0x30
   15c44:	mov	lr, r2
   15c48:	movw	r2, #37360	; 0x91f0
   15c4c:	mov	ip, r3
   15c50:	mov	r3, #32
   15c54:	cmp	r0, #0
   15c58:	mov	r5, sp
   15c5c:	movt	r2, #2
   15c60:	cmpne	r1, #0
   15c64:	add	r4, r2, #16
   15c68:	vld1.64	{d16-d17}, [r2], r3
   15c6c:	vld1.64	{d18-d19}, [r4]
   15c70:	add	r4, r5, #16
   15c74:	vld1.64	{d20-d21}, [r2]
   15c78:	vst1.64	{d16-d17}, [r5], r3
   15c7c:	mov	r2, #10
   15c80:	vst1.64	{d18-d19}, [r4]
   15c84:	vst1.64	{d20-d21}, [r5]
   15c88:	str	r2, [sp]
   15c8c:	bne	15c94 <__assert_fail@plt+0x46e4>
   15c90:	bl	11598 <abort@plt>
   15c94:	str	r1, [sp, #44]	; 0x2c
   15c98:	str	r0, [sp, #40]	; 0x28
   15c9c:	mov	r3, sp
   15ca0:	mov	r0, #0
   15ca4:	mov	r1, lr
   15ca8:	mov	r2, ip
   15cac:	bl	15554 <__assert_fail@plt+0x3fa4>
   15cb0:	sub	sp, fp, #8
   15cb4:	pop	{r4, r5, fp, pc}
   15cb8:	movw	r3, #37168	; 0x9130
   15cbc:	movt	r3, #2
   15cc0:	b	15554 <__assert_fail@plt+0x3fa4>
   15cc4:	movw	r3, #37168	; 0x9130
   15cc8:	mov	r2, r1
   15ccc:	mov	r1, r0
   15cd0:	mov	r0, #0
   15cd4:	movt	r3, #2
   15cd8:	b	15554 <__assert_fail@plt+0x3fa4>
   15cdc:	movw	r3, #37168	; 0x9130
   15ce0:	mvn	r2, #0
   15ce4:	movt	r3, #2
   15ce8:	b	15554 <__assert_fail@plt+0x3fa4>
   15cec:	movw	r3, #37168	; 0x9130
   15cf0:	mov	r1, r0
   15cf4:	mov	r0, #0
   15cf8:	mvn	r2, #0
   15cfc:	movt	r3, #2
   15d00:	b	15554 <__assert_fail@plt+0x3fa4>
   15d04:	push	{r4, r5, r6, sl, fp, lr}
   15d08:	add	fp, sp, #16
   15d0c:	sub	sp, sp, #8
   15d10:	movw	r5, #28000	; 0x6d60
   15d14:	movw	r6, #14760	; 0x39a8
   15d18:	mov	r4, r0
   15d1c:	mov	r0, #0
   15d20:	mov	r1, #0
   15d24:	mov	r2, #0
   15d28:	movt	r5, #1
   15d2c:	str	r0, [r4]
   15d30:	str	r0, [r4, #4]
   15d34:	str	r0, [r4, #8]
   15d38:	movt	r6, #1
   15d3c:	add	r0, r4, #12
   15d40:	mov	r3, r5
   15d44:	str	r6, [sp]
   15d48:	bl	16f04 <_obstack_begin@@Base>
   15d4c:	add	r0, r4, #56	; 0x38
   15d50:	mov	r1, #0
   15d54:	mov	r2, #0
   15d58:	mov	r3, r5
   15d5c:	str	r6, [sp]
   15d60:	bl	16f04 <_obstack_begin@@Base>
   15d64:	add	r0, r4, #100	; 0x64
   15d68:	mov	r1, #0
   15d6c:	mov	r2, #0
   15d70:	mov	r3, r5
   15d74:	str	r6, [sp]
   15d78:	bl	16f04 <_obstack_begin@@Base>
   15d7c:	sub	sp, fp, #16
   15d80:	pop	{r4, r5, r6, sl, fp, pc}
   15d84:	push	{r4, sl, fp, lr}
   15d88:	add	fp, sp, #8
   15d8c:	mov	r4, r0
   15d90:	add	r0, r0, #12
   15d94:	mov	r1, #0
   15d98:	bl	171fc <_obstack_free@@Base>
   15d9c:	add	r0, r4, #56	; 0x38
   15da0:	mov	r1, #0
   15da4:	bl	171fc <_obstack_free@@Base>
   15da8:	add	r0, r4, #100	; 0x64
   15dac:	mov	r1, #0
   15db0:	pop	{r4, sl, fp, lr}
   15db4:	b	171fc <_obstack_free@@Base>
   15db8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15dbc:	add	fp, sp, #24
   15dc0:	mov	r5, r1
   15dc4:	mov	r8, r0
   15dc8:	bl	114e4 <fgetc@plt>
   15dcc:	cmn	r0, #1
   15dd0:	beq	15e78 <__assert_fail@plt+0x48c8>
   15dd4:	mov	r7, r0
   15dd8:	add	r6, r5, #12
   15ddc:	add	r4, r5, #24
   15de0:	ldr	r0, [r5, #24]
   15de4:	ldr	r1, [r5, #28]
   15de8:	cmp	r1, r0
   15dec:	bne	15e00 <__assert_fail@plt+0x4850>
   15df0:	mov	r0, r6
   15df4:	mov	r1, #1
   15df8:	bl	17058 <_obstack_newchunk@@Base>
   15dfc:	ldr	r0, [r4]
   15e00:	add	r1, r0, #1
   15e04:	cmp	r7, #0
   15e08:	str	r1, [r4]
   15e0c:	strb	r7, [r0]
   15e10:	bne	15e1c <__assert_fail@plt+0x486c>
   15e14:	mov	r0, r5
   15e18:	bl	15f70 <__assert_fail@plt+0x49c0>
   15e1c:	mov	r0, r8
   15e20:	bl	114e4 <fgetc@plt>
   15e24:	mov	r7, r0
   15e28:	cmn	r0, #1
   15e2c:	bne	15de0 <__assert_fail@plt+0x4830>
   15e30:	ldr	r1, [r5, #20]
   15e34:	ldr	r0, [r5, #24]
   15e38:	cmp	r0, r1
   15e3c:	beq	15e90 <__assert_fail@plt+0x48e0>
   15e40:	ldr	r1, [r5, #28]
   15e44:	cmp	r1, r0
   15e48:	bne	15e5c <__assert_fail@plt+0x48ac>
   15e4c:	mov	r0, r6
   15e50:	mov	r1, #1
   15e54:	bl	17058 <_obstack_newchunk@@Base>
   15e58:	ldr	r0, [r4]
   15e5c:	add	r1, r0, #1
   15e60:	str	r1, [r5, #24]
   15e64:	mov	r1, #0
   15e68:	strb	r1, [r0]
   15e6c:	mov	r0, r5
   15e70:	bl	15f70 <__assert_fail@plt+0x49c0>
   15e74:	b	15e90 <__assert_fail@plt+0x48e0>
   15e78:	add	r4, r5, #24
   15e7c:	add	r6, r5, #12
   15e80:	ldr	r1, [r5, #20]
   15e84:	ldr	r0, [r5, #24]
   15e88:	cmp	r0, r1
   15e8c:	bne	15e40 <__assert_fail@plt+0x4890>
   15e90:	ldr	r0, [r5, #68]	; 0x44
   15e94:	ldr	r1, [r5, #72]	; 0x48
   15e98:	sub	r1, r1, r0
   15e9c:	cmp	r1, #4
   15ea0:	bcs	15eb4 <__assert_fail@plt+0x4904>
   15ea4:	add	r0, r5, #56	; 0x38
   15ea8:	mov	r1, #4
   15eac:	bl	17058 <_obstack_newchunk@@Base>
   15eb0:	ldr	r0, [r5, #68]	; 0x44
   15eb4:	mov	r1, #0
   15eb8:	str	r1, [r0]
   15ebc:	ldr	r1, [r5, #68]	; 0x44
   15ec0:	ldr	r0, [r5, #64]	; 0x40
   15ec4:	add	r2, r1, #4
   15ec8:	str	r2, [r5, #68]	; 0x44
   15ecc:	cmp	r2, r0
   15ed0:	ldrbeq	r1, [r5, #96]	; 0x60
   15ed4:	orreq	r1, r1, #2
   15ed8:	strbeq	r1, [r5, #96]	; 0x60
   15edc:	ldr	r7, [r5, #80]	; 0x50
   15ee0:	ldr	r3, [r5, #60]	; 0x3c
   15ee4:	ldr	r1, [r5, #72]	; 0x48
   15ee8:	add	r2, r7, r2
   15eec:	bic	r2, r2, r7
   15ef0:	sub	r7, r2, r3
   15ef4:	sub	r3, r1, r3
   15ef8:	str	r2, [r5, #68]	; 0x44
   15efc:	cmp	r7, r3
   15f00:	movhi	r2, r1
   15f04:	strhi	r1, [r5, #68]	; 0x44
   15f08:	str	r0, [r5, #4]
   15f0c:	str	r2, [r5, #64]	; 0x40
   15f10:	ldr	r0, [r5, #108]	; 0x6c
   15f14:	ldr	r2, [r5, #112]	; 0x70
   15f18:	cmp	r2, r0
   15f1c:	ldrbeq	r1, [r5, #140]	; 0x8c
   15f20:	orreq	r1, r1, #2
   15f24:	strbeq	r1, [r5, #140]	; 0x8c
   15f28:	ldr	r7, [r5, #124]	; 0x7c
   15f2c:	ldr	r3, [r5, #104]	; 0x68
   15f30:	ldr	r1, [r5, #116]	; 0x74
   15f34:	add	r2, r7, r2
   15f38:	bic	r2, r2, r7
   15f3c:	sub	r7, r2, r3
   15f40:	sub	r3, r1, r3
   15f44:	str	r2, [r5, #112]	; 0x70
   15f48:	cmp	r7, r3
   15f4c:	strhi	r1, [r5, #112]	; 0x70
   15f50:	str	r0, [r5, #8]
   15f54:	movhi	r2, r1
   15f58:	mov	r0, r8
   15f5c:	str	r2, [r5, #108]	; 0x6c
   15f60:	bl	11310 <ferror@plt>
   15f64:	clz	r0, r0
   15f68:	lsr	r0, r0, #5
   15f6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f70:	push	{r4, r5, r6, r7, fp, lr}
   15f74:	add	fp, sp, #16
   15f78:	ldr	r5, [r0, #20]
   15f7c:	ldr	r6, [r0, #24]
   15f80:	mov	r4, r0
   15f84:	cmp	r6, r5
   15f88:	mvn	r7, r5
   15f8c:	ldrbeq	r0, [r4, #52]	; 0x34
   15f90:	orreq	r0, r0, #2
   15f94:	strbeq	r0, [r4, #52]	; 0x34
   15f98:	ldr	r1, [r4, #36]	; 0x24
   15f9c:	ldr	r2, [r4, #16]
   15fa0:	ldr	r0, [r4, #28]
   15fa4:	add	r3, r1, r6
   15fa8:	bic	r1, r3, r1
   15fac:	sub	r3, r1, r2
   15fb0:	sub	r2, r0, r2
   15fb4:	str	r1, [r4, #24]
   15fb8:	cmp	r3, r2
   15fbc:	movhi	r1, r0
   15fc0:	strhi	r0, [r4, #24]
   15fc4:	str	r1, [r4, #20]
   15fc8:	ldr	r0, [r4, #68]	; 0x44
   15fcc:	ldr	r1, [r4, #72]	; 0x48
   15fd0:	sub	r1, r1, r0
   15fd4:	cmp	r1, #4
   15fd8:	bcs	15fec <__assert_fail@plt+0x4a3c>
   15fdc:	add	r0, r4, #56	; 0x38
   15fe0:	mov	r1, #4
   15fe4:	bl	17058 <_obstack_newchunk@@Base>
   15fe8:	ldr	r0, [r4, #68]	; 0x44
   15fec:	str	r5, [r0]
   15ff0:	add	r6, r6, r7
   15ff4:	ldr	r1, [r4, #68]	; 0x44
   15ff8:	ldr	r0, [r4, #112]	; 0x70
   15ffc:	ldr	r2, [r4, #116]	; 0x74
   16000:	add	r1, r1, #4
   16004:	str	r1, [r4, #68]	; 0x44
   16008:	sub	r1, r2, r0
   1600c:	cmp	r1, #4
   16010:	bcs	16024 <__assert_fail@plt+0x4a74>
   16014:	add	r0, r4, #100	; 0x64
   16018:	mov	r1, #4
   1601c:	bl	17058 <_obstack_newchunk@@Base>
   16020:	ldr	r0, [r4, #112]	; 0x70
   16024:	str	r6, [r0]
   16028:	ldr	r0, [r4]
   1602c:	ldr	r1, [r4, #112]	; 0x70
   16030:	add	r1, r1, #4
   16034:	add	r0, r0, #1
   16038:	str	r1, [r4, #112]	; 0x70
   1603c:	str	r0, [r4]
   16040:	pop	{r4, r5, r6, r7, fp, pc}
   16044:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16048:	add	fp, sp, #24
   1604c:	movw	r8, #0
   16050:	mov	r6, r2
   16054:	mov	r4, r1
   16058:	mov	r5, r0
   1605c:	movt	r8, #32752	; 0x7ff0
   16060:	mov	r0, r5
   16064:	mov	r1, r4
   16068:	mov	r2, r6
   1606c:	bl	112d4 <read@plt>
   16070:	mov	r7, r0
   16074:	cmn	r0, #1
   16078:	bgt	160a0 <__assert_fail@plt+0x4af0>
   1607c:	bl	114a8 <__errno_location@plt>
   16080:	ldr	r0, [r0]
   16084:	cmp	r0, #4
   16088:	beq	16060 <__assert_fail@plt+0x4ab0>
   1608c:	cmp	r6, r8
   16090:	bls	160a0 <__assert_fail@plt+0x4af0>
   16094:	cmp	r0, #22
   16098:	mov	r6, r8
   1609c:	beq	16060 <__assert_fail@plt+0x4ab0>
   160a0:	mov	r0, r7
   160a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   160ac:	add	fp, sp, #24
   160b0:	sub	sp, sp, #32
   160b4:	ldr	r6, [fp, #12]
   160b8:	ldr	r7, [fp, #8]
   160bc:	mov	r4, r2
   160c0:	mov	r8, r0
   160c4:	cmp	r1, #0
   160c8:	beq	160f0 <__assert_fail@plt+0x4b40>
   160cc:	movw	r2, #33544	; 0x8308
   160d0:	mov	r5, r1
   160d4:	str	r3, [sp, #4]
   160d8:	str	r4, [sp]
   160dc:	mov	r0, r8
   160e0:	mov	r1, #1
   160e4:	movt	r2, #1
   160e8:	mov	r3, r5
   160ec:	b	16108 <__assert_fail@plt+0x4b58>
   160f0:	movw	r2, #33556	; 0x8314
   160f4:	str	r3, [sp]
   160f8:	mov	r0, r8
   160fc:	mov	r1, #1
   16100:	mov	r3, r4
   16104:	movt	r2, #1
   16108:	bl	11508 <__fprintf_chk@plt>
   1610c:	movw	r1, #33563	; 0x831b
   16110:	mov	r0, #0
   16114:	mov	r2, #5
   16118:	movt	r1, #1
   1611c:	bl	1134c <dcgettext@plt>
   16120:	movw	r2, #34281	; 0x85e9
   16124:	mov	r3, r0
   16128:	movw	r0, #2022	; 0x7e6
   1612c:	mov	r1, #1
   16130:	str	r0, [sp]
   16134:	movt	r2, #1
   16138:	mov	r0, r8
   1613c:	bl	11508 <__fprintf_chk@plt>
   16140:	movw	r4, #32932	; 0x80a4
   16144:	mov	r1, r8
   16148:	movt	r4, #1
   1614c:	mov	r0, r4
   16150:	bl	112a4 <fputs_unlocked@plt>
   16154:	movw	r1, #33567	; 0x831f
   16158:	mov	r0, #0
   1615c:	mov	r2, #5
   16160:	movt	r1, #1
   16164:	bl	1134c <dcgettext@plt>
   16168:	movw	r3, #33738	; 0x83ca
   1616c:	mov	r2, r0
   16170:	mov	r0, r8
   16174:	mov	r1, #1
   16178:	movt	r3, #1
   1617c:	bl	11508 <__fprintf_chk@plt>
   16180:	mov	r0, r4
   16184:	mov	r1, r8
   16188:	bl	112a4 <fputs_unlocked@plt>
   1618c:	cmp	r6, #9
   16190:	bhi	161cc <__assert_fail@plt+0x4c1c>
   16194:	add	r0, pc, #0
   16198:	ldr	pc, [r0, r6, lsl #2]
   1619c:	andeq	r6, r1, r4, asr #3
   161a0:	ldrdeq	r6, [r1], -r8
   161a4:	andeq	r6, r1, r8, lsl #4
   161a8:	andeq	r6, r1, r0, lsr r2
   161ac:	andeq	r6, r1, r8, asr r2
   161b0:	andeq	r6, r1, r0, lsl #5
   161b4:	andeq	r6, r1, r8, lsr #5
   161b8:	andeq	r6, r1, r0, ror #5
   161bc:	andeq	r6, r1, r8, lsl #7
   161c0:	andeq	r6, r1, r0, lsr r3
   161c4:	sub	sp, fp, #24
   161c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161cc:	movw	r1, #34091	; 0x852b
   161d0:	movt	r1, #1
   161d4:	b	16338 <__assert_fail@plt+0x4d88>
   161d8:	movw	r1, #33772	; 0x83ec
   161dc:	mov	r0, #0
   161e0:	mov	r2, #5
   161e4:	movt	r1, #1
   161e8:	bl	1134c <dcgettext@plt>
   161ec:	ldr	r3, [r7]
   161f0:	mov	r2, r0
   161f4:	mov	r0, r8
   161f8:	mov	r1, #1
   161fc:	sub	sp, fp, #24
   16200:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16204:	b	11508 <__fprintf_chk@plt>
   16208:	movw	r1, #33788	; 0x83fc
   1620c:	mov	r0, #0
   16210:	mov	r2, #5
   16214:	movt	r1, #1
   16218:	bl	1134c <dcgettext@plt>
   1621c:	mov	r2, r0
   16220:	ldr	r3, [r7]
   16224:	ldr	r0, [r7, #4]
   16228:	str	r0, [sp]
   1622c:	b	1631c <__assert_fail@plt+0x4d6c>
   16230:	movw	r1, #33811	; 0x8413
   16234:	mov	r0, #0
   16238:	mov	r2, #5
   1623c:	movt	r1, #1
   16240:	bl	1134c <dcgettext@plt>
   16244:	ldr	r3, [r7]
   16248:	mov	r2, r0
   1624c:	ldmib	r7, {r0, r1}
   16250:	stm	sp, {r0, r1}
   16254:	b	1631c <__assert_fail@plt+0x4d6c>
   16258:	movw	r1, #33839	; 0x842f
   1625c:	mov	r0, #0
   16260:	mov	r2, #5
   16264:	movt	r1, #1
   16268:	bl	1134c <dcgettext@plt>
   1626c:	ldr	r3, [r7]
   16270:	mov	r2, r0
   16274:	ldmib	r7, {r0, r1, r7}
   16278:	stm	sp, {r0, r1, r7}
   1627c:	b	1631c <__assert_fail@plt+0x4d6c>
   16280:	movw	r1, #33871	; 0x844f
   16284:	mov	r0, #0
   16288:	mov	r2, #5
   1628c:	movt	r1, #1
   16290:	bl	1134c <dcgettext@plt>
   16294:	ldr	r3, [r7]
   16298:	mov	r2, r0
   1629c:	ldmib	r7, {r0, r1, r6, r7}
   162a0:	stm	sp, {r0, r1, r6, r7}
   162a4:	b	1631c <__assert_fail@plt+0x4d6c>
   162a8:	movw	r1, #33907	; 0x8473
   162ac:	mov	r0, #0
   162b0:	mov	r2, #5
   162b4:	movt	r1, #1
   162b8:	bl	1134c <dcgettext@plt>
   162bc:	ldr	r3, [r7]
   162c0:	mov	r2, r0
   162c4:	ldmib	r7, {r0, r1, r6}
   162c8:	ldr	r5, [r7, #16]
   162cc:	ldr	r7, [r7, #20]
   162d0:	stm	sp, {r0, r1, r6}
   162d4:	str	r5, [sp, #12]
   162d8:	str	r7, [sp, #16]
   162dc:	b	1631c <__assert_fail@plt+0x4d6c>
   162e0:	movw	r1, #33947	; 0x849b
   162e4:	mov	r0, #0
   162e8:	mov	r2, #5
   162ec:	movt	r1, #1
   162f0:	bl	1134c <dcgettext@plt>
   162f4:	ldr	r3, [r7]
   162f8:	mov	r2, r0
   162fc:	ldmib	r7, {r0, r1, r6}
   16300:	ldr	r5, [r7, #16]
   16304:	ldr	r4, [r7, #20]
   16308:	ldr	r7, [r7, #24]
   1630c:	stm	sp, {r0, r1, r6}
   16310:	str	r5, [sp, #12]
   16314:	str	r4, [sp, #16]
   16318:	str	r7, [sp, #20]
   1631c:	mov	r0, r8
   16320:	mov	r1, #1
   16324:	bl	11508 <__fprintf_chk@plt>
   16328:	sub	sp, fp, #24
   1632c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16330:	movw	r1, #34039	; 0x84f7
   16334:	movt	r1, #1
   16338:	mov	r0, #0
   1633c:	mov	r2, #5
   16340:	bl	1134c <dcgettext@plt>
   16344:	mov	ip, r0
   16348:	ldr	r3, [r7]
   1634c:	ldr	r0, [r7, #4]
   16350:	ldr	r1, [r7, #8]
   16354:	ldr	r6, [r7, #12]
   16358:	ldr	r5, [r7, #16]
   1635c:	ldr	r4, [r7, #20]
   16360:	ldr	r2, [r7, #24]
   16364:	ldr	lr, [r7, #28]
   16368:	ldr	r7, [r7, #32]
   1636c:	stm	sp, {r0, r1, r6}
   16370:	str	r5, [sp, #12]
   16374:	str	r4, [sp, #16]
   16378:	str	r2, [sp, #20]
   1637c:	str	lr, [sp, #24]
   16380:	str	r7, [sp, #28]
   16384:	b	163cc <__assert_fail@plt+0x4e1c>
   16388:	movw	r1, #33991	; 0x84c7
   1638c:	mov	r0, #0
   16390:	mov	r2, #5
   16394:	movt	r1, #1
   16398:	bl	1134c <dcgettext@plt>
   1639c:	mov	ip, r0
   163a0:	ldr	r3, [r7]
   163a4:	ldmib	r7, {r0, r1, r6}
   163a8:	ldr	r5, [r7, #16]
   163ac:	ldr	r4, [r7, #20]
   163b0:	ldr	r2, [r7, #24]
   163b4:	ldr	r7, [r7, #28]
   163b8:	stm	sp, {r0, r1, r6}
   163bc:	str	r5, [sp, #12]
   163c0:	str	r4, [sp, #16]
   163c4:	str	r2, [sp, #20]
   163c8:	str	r7, [sp, #24]
   163cc:	mov	r0, r8
   163d0:	mov	r1, #1
   163d4:	mov	r2, ip
   163d8:	bl	11508 <__fprintf_chk@plt>
   163dc:	sub	sp, fp, #24
   163e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   163e4:	push	{r4, sl, fp, lr}
   163e8:	add	fp, sp, #8
   163ec:	sub	sp, sp, #8
   163f0:	ldr	ip, [fp, #8]
   163f4:	mov	lr, #0
   163f8:	ldr	r4, [ip, lr, lsl #2]
   163fc:	add	lr, lr, #1
   16400:	cmp	r4, #0
   16404:	bne	163f8 <__assert_fail@plt+0x4e48>
   16408:	sub	r4, lr, #1
   1640c:	str	ip, [sp]
   16410:	str	r4, [sp, #4]
   16414:	bl	160a8 <__assert_fail@plt+0x4af8>
   16418:	sub	sp, fp, #8
   1641c:	pop	{r4, sl, fp, pc}
   16420:	push	{fp, lr}
   16424:	mov	fp, sp
   16428:	sub	sp, sp, #48	; 0x30
   1642c:	ldr	ip, [fp, #8]
   16430:	ldr	lr, [ip]
   16434:	cmp	lr, #0
   16438:	str	lr, [sp, #8]
   1643c:	beq	164d8 <__assert_fail@plt+0x4f28>
   16440:	ldr	lr, [ip, #4]
   16444:	cmp	lr, #0
   16448:	str	lr, [sp, #12]
   1644c:	beq	164e0 <__assert_fail@plt+0x4f30>
   16450:	ldr	lr, [ip, #8]
   16454:	cmp	lr, #0
   16458:	str	lr, [sp, #16]
   1645c:	beq	164e8 <__assert_fail@plt+0x4f38>
   16460:	ldr	lr, [ip, #12]
   16464:	cmp	lr, #0
   16468:	str	lr, [sp, #20]
   1646c:	beq	164f0 <__assert_fail@plt+0x4f40>
   16470:	ldr	lr, [ip, #16]
   16474:	cmp	lr, #0
   16478:	str	lr, [sp, #24]
   1647c:	beq	164f8 <__assert_fail@plt+0x4f48>
   16480:	ldr	lr, [ip, #20]
   16484:	cmp	lr, #0
   16488:	str	lr, [sp, #28]
   1648c:	beq	16500 <__assert_fail@plt+0x4f50>
   16490:	ldr	lr, [ip, #24]
   16494:	cmp	lr, #0
   16498:	str	lr, [sp, #32]
   1649c:	beq	16508 <__assert_fail@plt+0x4f58>
   164a0:	ldr	lr, [ip, #28]
   164a4:	cmp	lr, #0
   164a8:	str	lr, [sp, #36]	; 0x24
   164ac:	beq	16510 <__assert_fail@plt+0x4f60>
   164b0:	ldr	lr, [ip, #32]
   164b4:	cmp	lr, #0
   164b8:	str	lr, [sp, #40]	; 0x28
   164bc:	beq	16518 <__assert_fail@plt+0x4f68>
   164c0:	ldr	lr, [ip, #36]	; 0x24
   164c4:	mov	ip, #10
   164c8:	cmp	lr, #0
   164cc:	str	lr, [sp, #44]	; 0x2c
   164d0:	movweq	ip, #9
   164d4:	b	1651c <__assert_fail@plt+0x4f6c>
   164d8:	mov	ip, #0
   164dc:	b	1651c <__assert_fail@plt+0x4f6c>
   164e0:	mov	ip, #1
   164e4:	b	1651c <__assert_fail@plt+0x4f6c>
   164e8:	mov	ip, #2
   164ec:	b	1651c <__assert_fail@plt+0x4f6c>
   164f0:	mov	ip, #3
   164f4:	b	1651c <__assert_fail@plt+0x4f6c>
   164f8:	mov	ip, #4
   164fc:	b	1651c <__assert_fail@plt+0x4f6c>
   16500:	mov	ip, #5
   16504:	b	1651c <__assert_fail@plt+0x4f6c>
   16508:	mov	ip, #6
   1650c:	b	1651c <__assert_fail@plt+0x4f6c>
   16510:	mov	ip, #7
   16514:	b	1651c <__assert_fail@plt+0x4f6c>
   16518:	mov	ip, #8
   1651c:	add	lr, sp, #8
   16520:	str	ip, [sp, #4]
   16524:	str	lr, [sp]
   16528:	bl	160a8 <__assert_fail@plt+0x4af8>
   1652c:	mov	sp, fp
   16530:	pop	{fp, pc}
   16534:	push	{fp, lr}
   16538:	mov	fp, sp
   1653c:	sub	sp, sp, #56	; 0x38
   16540:	add	ip, fp, #8
   16544:	str	ip, [sp, #12]
   16548:	ldr	lr, [fp, #8]
   1654c:	cmp	lr, #0
   16550:	str	lr, [sp, #16]
   16554:	beq	165f0 <__assert_fail@plt+0x5040>
   16558:	ldr	lr, [ip, #4]
   1655c:	cmp	lr, #0
   16560:	str	lr, [sp, #20]
   16564:	beq	165f8 <__assert_fail@plt+0x5048>
   16568:	ldr	lr, [ip, #8]
   1656c:	cmp	lr, #0
   16570:	str	lr, [sp, #24]
   16574:	beq	16600 <__assert_fail@plt+0x5050>
   16578:	ldr	lr, [ip, #12]
   1657c:	cmp	lr, #0
   16580:	str	lr, [sp, #28]
   16584:	beq	16608 <__assert_fail@plt+0x5058>
   16588:	ldr	lr, [ip, #16]
   1658c:	cmp	lr, #0
   16590:	str	lr, [sp, #32]
   16594:	beq	16610 <__assert_fail@plt+0x5060>
   16598:	ldr	lr, [ip, #20]
   1659c:	cmp	lr, #0
   165a0:	str	lr, [sp, #36]	; 0x24
   165a4:	beq	16618 <__assert_fail@plt+0x5068>
   165a8:	ldr	lr, [ip, #24]
   165ac:	cmp	lr, #0
   165b0:	str	lr, [sp, #40]	; 0x28
   165b4:	beq	16620 <__assert_fail@plt+0x5070>
   165b8:	ldr	lr, [ip, #28]
   165bc:	cmp	lr, #0
   165c0:	str	lr, [sp, #44]	; 0x2c
   165c4:	beq	16628 <__assert_fail@plt+0x5078>
   165c8:	ldr	lr, [ip, #32]
   165cc:	cmp	lr, #0
   165d0:	str	lr, [sp, #48]	; 0x30
   165d4:	beq	16630 <__assert_fail@plt+0x5080>
   165d8:	ldr	lr, [ip, #36]	; 0x24
   165dc:	mov	ip, #10
   165e0:	cmp	lr, #0
   165e4:	str	lr, [sp, #52]	; 0x34
   165e8:	movweq	ip, #9
   165ec:	b	16634 <__assert_fail@plt+0x5084>
   165f0:	mov	ip, #0
   165f4:	b	16634 <__assert_fail@plt+0x5084>
   165f8:	mov	ip, #1
   165fc:	b	16634 <__assert_fail@plt+0x5084>
   16600:	mov	ip, #2
   16604:	b	16634 <__assert_fail@plt+0x5084>
   16608:	mov	ip, #3
   1660c:	b	16634 <__assert_fail@plt+0x5084>
   16610:	mov	ip, #4
   16614:	b	16634 <__assert_fail@plt+0x5084>
   16618:	mov	ip, #5
   1661c:	b	16634 <__assert_fail@plt+0x5084>
   16620:	mov	ip, #6
   16624:	b	16634 <__assert_fail@plt+0x5084>
   16628:	mov	ip, #7
   1662c:	b	16634 <__assert_fail@plt+0x5084>
   16630:	mov	ip, #8
   16634:	add	lr, sp, #16
   16638:	str	ip, [sp, #4]
   1663c:	str	lr, [sp]
   16640:	bl	160a8 <__assert_fail@plt+0x4af8>
   16644:	mov	sp, fp
   16648:	pop	{fp, pc}
   1664c:	push	{fp, lr}
   16650:	mov	fp, sp
   16654:	movw	r0, #37268	; 0x9194
   16658:	movt	r0, #2
   1665c:	ldr	r1, [r0]
   16660:	movw	r0, #32932	; 0x80a4
   16664:	movt	r0, #1
   16668:	bl	112a4 <fputs_unlocked@plt>
   1666c:	movw	r1, #34151	; 0x8567
   16670:	mov	r0, #0
   16674:	mov	r2, #5
   16678:	movt	r1, #1
   1667c:	bl	1134c <dcgettext@plt>
   16680:	movw	r2, #34171	; 0x857b
   16684:	mov	r1, r0
   16688:	mov	r0, #1
   1668c:	movt	r2, #1
   16690:	bl	114f0 <__printf_chk@plt>
   16694:	movw	r1, #34193	; 0x8591
   16698:	mov	r0, #0
   1669c:	mov	r2, #5
   166a0:	movt	r1, #1
   166a4:	bl	1134c <dcgettext@plt>
   166a8:	movw	r2, #32202	; 0x7dca
   166ac:	movw	r3, #32741	; 0x7fe5
   166b0:	mov	r1, r0
   166b4:	mov	r0, #1
   166b8:	movt	r2, #1
   166bc:	movt	r3, #1
   166c0:	bl	114f0 <__printf_chk@plt>
   166c4:	movw	r1, #34213	; 0x85a5
   166c8:	mov	r0, #0
   166cc:	mov	r2, #5
   166d0:	movt	r1, #1
   166d4:	bl	1134c <dcgettext@plt>
   166d8:	movw	r2, #34252	; 0x85cc
   166dc:	mov	r1, r0
   166e0:	mov	r0, #1
   166e4:	movt	r2, #1
   166e8:	pop	{fp, lr}
   166ec:	b	114f0 <__printf_chk@plt>
   166f0:	push	{r4, r5, r6, sl, fp, lr}
   166f4:	add	fp, sp, #16
   166f8:	mov	r4, r2
   166fc:	mov	r5, r1
   16700:	mov	r6, r0
   16704:	bl	1730c <_obstack_memory_used@@Base+0x78>
   16708:	cmp	r0, #0
   1670c:	popne	{r4, r5, r6, sl, fp, pc}
   16710:	cmp	r6, #0
   16714:	beq	16728 <__assert_fail@plt+0x5178>
   16718:	cmp	r5, #0
   1671c:	cmpne	r4, #0
   16720:	bne	16728 <__assert_fail@plt+0x5178>
   16724:	pop	{r4, r5, r6, sl, fp, pc}
   16728:	bl	16cc8 <__assert_fail@plt+0x5718>
   1672c:	push	{r4, r5, r6, sl, fp, lr}
   16730:	add	fp, sp, #16
   16734:	mov	r4, r2
   16738:	mov	r5, r1
   1673c:	mov	r6, r0
   16740:	bl	1730c <_obstack_memory_used@@Base+0x78>
   16744:	cmp	r0, #0
   16748:	popne	{r4, r5, r6, sl, fp, pc}
   1674c:	cmp	r6, #0
   16750:	beq	16764 <__assert_fail@plt+0x51b4>
   16754:	cmp	r5, #0
   16758:	cmpne	r4, #0
   1675c:	bne	16764 <__assert_fail@plt+0x51b4>
   16760:	pop	{r4, r5, r6, sl, fp, pc}
   16764:	bl	16cc8 <__assert_fail@plt+0x5718>
   16768:	push	{fp, lr}
   1676c:	mov	fp, sp
   16770:	bl	16d60 <__assert_fail@plt+0x57b0>
   16774:	cmp	r0, #0
   16778:	popne	{fp, pc}
   1677c:	bl	16cc8 <__assert_fail@plt+0x5718>
   16780:	push	{fp, lr}
   16784:	mov	fp, sp
   16788:	bl	16d60 <__assert_fail@plt+0x57b0>
   1678c:	cmp	r0, #0
   16790:	popne	{fp, pc}
   16794:	bl	16cc8 <__assert_fail@plt+0x5718>
   16798:	push	{fp, lr}
   1679c:	mov	fp, sp
   167a0:	bl	16d60 <__assert_fail@plt+0x57b0>
   167a4:	cmp	r0, #0
   167a8:	popne	{fp, pc}
   167ac:	bl	16cc8 <__assert_fail@plt+0x5718>
   167b0:	push	{r4, r5, fp, lr}
   167b4:	add	fp, sp, #8
   167b8:	mov	r4, r1
   167bc:	mov	r5, r0
   167c0:	bl	16d90 <__assert_fail@plt+0x57e0>
   167c4:	cmp	r0, #0
   167c8:	popne	{r4, r5, fp, pc}
   167cc:	cmp	r5, #0
   167d0:	beq	167e0 <__assert_fail@plt+0x5230>
   167d4:	cmp	r4, #0
   167d8:	bne	167e0 <__assert_fail@plt+0x5230>
   167dc:	pop	{r4, r5, fp, pc}
   167e0:	bl	16cc8 <__assert_fail@plt+0x5718>
   167e4:	push	{fp, lr}
   167e8:	mov	fp, sp
   167ec:	cmp	r1, #0
   167f0:	orreq	r1, r1, #1
   167f4:	bl	16d90 <__assert_fail@plt+0x57e0>
   167f8:	cmp	r0, #0
   167fc:	popne	{fp, pc}
   16800:	bl	16cc8 <__assert_fail@plt+0x5718>
   16804:	push	{fp, lr}
   16808:	mov	fp, sp
   1680c:	clz	r3, r2
   16810:	lsr	ip, r3, #5
   16814:	clz	r3, r1
   16818:	lsr	r3, r3, #5
   1681c:	orrs	r3, r3, ip
   16820:	movwne	r1, #1
   16824:	movwne	r2, #1
   16828:	bl	1730c <_obstack_memory_used@@Base+0x78>
   1682c:	cmp	r0, #0
   16830:	popne	{fp, pc}
   16834:	bl	16cc8 <__assert_fail@plt+0x5718>
   16838:	push	{fp, lr}
   1683c:	mov	fp, sp
   16840:	mov	r2, r1
   16844:	mov	r1, r0
   16848:	mov	r0, #0
   1684c:	bl	1730c <_obstack_memory_used@@Base+0x78>
   16850:	cmp	r0, #0
   16854:	popne	{fp, pc}
   16858:	bl	16cc8 <__assert_fail@plt+0x5718>
   1685c:	push	{fp, lr}
   16860:	mov	fp, sp
   16864:	mov	r2, r1
   16868:	mov	r1, r0
   1686c:	clz	r0, r2
   16870:	clz	r3, r1
   16874:	lsr	r0, r0, #5
   16878:	lsr	r3, r3, #5
   1687c:	orrs	r0, r3, r0
   16880:	movwne	r1, #1
   16884:	movwne	r2, #1
   16888:	mov	r0, #0
   1688c:	bl	1730c <_obstack_memory_used@@Base+0x78>
   16890:	cmp	r0, #0
   16894:	popne	{fp, pc}
   16898:	bl	16cc8 <__assert_fail@plt+0x5718>
   1689c:	push	{r4, r5, r6, sl, fp, lr}
   168a0:	add	fp, sp, #16
   168a4:	ldr	r5, [r1]
   168a8:	mov	r4, r1
   168ac:	mov	r6, r0
   168b0:	cmp	r0, #0
   168b4:	beq	168cc <__assert_fail@plt+0x531c>
   168b8:	mov	r0, #1
   168bc:	add	r0, r0, r5, lsr #1
   168c0:	adds	r5, r5, r0
   168c4:	bcc	168d4 <__assert_fail@plt+0x5324>
   168c8:	b	16910 <__assert_fail@plt+0x5360>
   168cc:	cmp	r5, #0
   168d0:	movweq	r5, #64	; 0x40
   168d4:	mov	r0, r6
   168d8:	mov	r1, r5
   168dc:	mov	r2, #1
   168e0:	bl	1730c <_obstack_memory_used@@Base+0x78>
   168e4:	cmp	r5, #0
   168e8:	mov	r1, r5
   168ec:	movwne	r1, #1
   168f0:	cmp	r0, #0
   168f4:	bne	16908 <__assert_fail@plt+0x5358>
   168f8:	clz	r2, r6
   168fc:	lsr	r2, r2, #5
   16900:	orrs	r1, r2, r1
   16904:	bne	16910 <__assert_fail@plt+0x5360>
   16908:	str	r5, [r4]
   1690c:	pop	{r4, r5, r6, sl, fp, pc}
   16910:	bl	16cc8 <__assert_fail@plt+0x5718>
   16914:	push	{r4, r5, r6, r7, fp, lr}
   16918:	add	fp, sp, #16
   1691c:	ldr	r5, [r1]
   16920:	mov	r6, r2
   16924:	mov	r4, r1
   16928:	mov	r7, r0
   1692c:	cmp	r0, #0
   16930:	beq	16948 <__assert_fail@plt+0x5398>
   16934:	mov	r0, #1
   16938:	add	r0, r0, r5, lsr #1
   1693c:	adds	r5, r5, r0
   16940:	bcc	16960 <__assert_fail@plt+0x53b0>
   16944:	b	16994 <__assert_fail@plt+0x53e4>
   16948:	cmp	r5, #0
   1694c:	bne	16960 <__assert_fail@plt+0x53b0>
   16950:	mov	r0, #64	; 0x40
   16954:	cmp	r6, #64	; 0x40
   16958:	udiv	r5, r0, r6
   1695c:	addhi	r5, r5, #1
   16960:	mov	r0, r7
   16964:	mov	r1, r5
   16968:	mov	r2, r6
   1696c:	bl	1730c <_obstack_memory_used@@Base+0x78>
   16970:	cmp	r0, #0
   16974:	bne	1698c <__assert_fail@plt+0x53dc>
   16978:	cmp	r7, #0
   1697c:	beq	16994 <__assert_fail@plt+0x53e4>
   16980:	cmp	r6, #0
   16984:	cmpne	r5, #0
   16988:	bne	16994 <__assert_fail@plt+0x53e4>
   1698c:	str	r5, [r4]
   16990:	pop	{r4, r5, r6, r7, fp, pc}
   16994:	bl	16cc8 <__assert_fail@plt+0x5718>
   16998:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1699c:	add	fp, sp, #24
   169a0:	mov	r8, r1
   169a4:	ldr	r1, [r1]
   169a8:	mov	r5, r0
   169ac:	add	r0, r1, r1, asr #1
   169b0:	cmp	r0, r1
   169b4:	mvnvs	r0, #-2147483648	; 0x80000000
   169b8:	cmp	r0, r3
   169bc:	mov	r7, r0
   169c0:	movgt	r7, r3
   169c4:	cmn	r3, #1
   169c8:	movle	r7, r0
   169cc:	ldr	r0, [fp, #8]
   169d0:	cmn	r0, #1
   169d4:	ble	169fc <__assert_fail@plt+0x544c>
   169d8:	cmp	r0, #0
   169dc:	beq	16a50 <__assert_fail@plt+0x54a0>
   169e0:	cmn	r7, #1
   169e4:	ble	16a24 <__assert_fail@plt+0x5474>
   169e8:	mvn	r4, #-2147483648	; 0x80000000
   169ec:	udiv	r6, r4, r0
   169f0:	cmp	r6, r7
   169f4:	bge	16a50 <__assert_fail@plt+0x54a0>
   169f8:	b	16a60 <__assert_fail@plt+0x54b0>
   169fc:	cmn	r7, #1
   16a00:	ble	16a40 <__assert_fail@plt+0x5490>
   16a04:	cmn	r0, #1
   16a08:	beq	16a50 <__assert_fail@plt+0x54a0>
   16a0c:	mov	r6, #-2147483648	; 0x80000000
   16a10:	mvn	r4, #-2147483648	; 0x80000000
   16a14:	sdiv	r6, r6, r0
   16a18:	cmp	r6, r7
   16a1c:	bge	16a50 <__assert_fail@plt+0x54a0>
   16a20:	b	16a60 <__assert_fail@plt+0x54b0>
   16a24:	beq	16a50 <__assert_fail@plt+0x54a0>
   16a28:	mov	r6, #-2147483648	; 0x80000000
   16a2c:	mvn	r4, #-2147483648	; 0x80000000
   16a30:	sdiv	r6, r6, r7
   16a34:	cmp	r6, r0
   16a38:	bge	16a50 <__assert_fail@plt+0x54a0>
   16a3c:	b	16a60 <__assert_fail@plt+0x54b0>
   16a40:	mvn	r4, #-2147483648	; 0x80000000
   16a44:	sdiv	r6, r4, r0
   16a48:	cmp	r7, r6
   16a4c:	blt	16a60 <__assert_fail@plt+0x54b0>
   16a50:	mul	r6, r7, r0
   16a54:	mov	r4, #64	; 0x40
   16a58:	cmp	r6, #63	; 0x3f
   16a5c:	bgt	16a68 <__assert_fail@plt+0x54b8>
   16a60:	sdiv	r7, r4, r0
   16a64:	mul	r6, r7, r0
   16a68:	cmp	r5, #0
   16a6c:	moveq	r4, #0
   16a70:	streq	r4, [r8]
   16a74:	sub	r4, r7, r1
   16a78:	cmp	r4, r2
   16a7c:	bge	16b28 <__assert_fail@plt+0x5578>
   16a80:	add	r7, r1, r2
   16a84:	mov	r6, #0
   16a88:	mov	r2, #0
   16a8c:	cmp	r7, r3
   16a90:	movwgt	r6, #1
   16a94:	cmn	r3, #1
   16a98:	movwgt	r2, #1
   16a9c:	cmp	r7, r1
   16aa0:	bvs	16b5c <__assert_fail@plt+0x55ac>
   16aa4:	ands	r1, r2, r6
   16aa8:	bne	16b5c <__assert_fail@plt+0x55ac>
   16aac:	cmn	r0, #1
   16ab0:	ble	16ad8 <__assert_fail@plt+0x5528>
   16ab4:	cmp	r0, #0
   16ab8:	beq	16b24 <__assert_fail@plt+0x5574>
   16abc:	cmn	r7, #1
   16ac0:	ble	16afc <__assert_fail@plt+0x554c>
   16ac4:	mvn	r1, #-2147483648	; 0x80000000
   16ac8:	udiv	r1, r1, r0
   16acc:	cmp	r1, r7
   16ad0:	bge	16b24 <__assert_fail@plt+0x5574>
   16ad4:	b	16b5c <__assert_fail@plt+0x55ac>
   16ad8:	cmn	r7, #1
   16adc:	ble	16b14 <__assert_fail@plt+0x5564>
   16ae0:	cmn	r0, #1
   16ae4:	beq	16b24 <__assert_fail@plt+0x5574>
   16ae8:	mov	r1, #-2147483648	; 0x80000000
   16aec:	sdiv	r1, r1, r0
   16af0:	cmp	r1, r7
   16af4:	bge	16b24 <__assert_fail@plt+0x5574>
   16af8:	b	16b5c <__assert_fail@plt+0x55ac>
   16afc:	beq	16b24 <__assert_fail@plt+0x5574>
   16b00:	mov	r1, #-2147483648	; 0x80000000
   16b04:	sdiv	r1, r1, r7
   16b08:	cmp	r1, r0
   16b0c:	bge	16b24 <__assert_fail@plt+0x5574>
   16b10:	b	16b5c <__assert_fail@plt+0x55ac>
   16b14:	mvn	r1, #-2147483648	; 0x80000000
   16b18:	sdiv	r1, r1, r0
   16b1c:	cmp	r7, r1
   16b20:	blt	16b5c <__assert_fail@plt+0x55ac>
   16b24:	mul	r6, r7, r0
   16b28:	mov	r0, r5
   16b2c:	mov	r1, r6
   16b30:	bl	16d90 <__assert_fail@plt+0x57e0>
   16b34:	cmp	r6, #0
   16b38:	movwne	r6, #1
   16b3c:	cmp	r0, #0
   16b40:	bne	16b54 <__assert_fail@plt+0x55a4>
   16b44:	clz	r1, r5
   16b48:	lsr	r1, r1, #5
   16b4c:	orrs	r1, r1, r6
   16b50:	bne	16b5c <__assert_fail@plt+0x55ac>
   16b54:	str	r7, [r8]
   16b58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b5c:	bl	16cc8 <__assert_fail@plt+0x5718>
   16b60:	push	{fp, lr}
   16b64:	mov	fp, sp
   16b68:	mov	r1, #1
   16b6c:	bl	16d0c <__assert_fail@plt+0x575c>
   16b70:	cmp	r0, #0
   16b74:	popne	{fp, pc}
   16b78:	bl	16cc8 <__assert_fail@plt+0x5718>
   16b7c:	push	{fp, lr}
   16b80:	mov	fp, sp
   16b84:	bl	16d0c <__assert_fail@plt+0x575c>
   16b88:	cmp	r0, #0
   16b8c:	popne	{fp, pc}
   16b90:	bl	16cc8 <__assert_fail@plt+0x5718>
   16b94:	push	{fp, lr}
   16b98:	mov	fp, sp
   16b9c:	mov	r1, #1
   16ba0:	bl	16d0c <__assert_fail@plt+0x575c>
   16ba4:	cmp	r0, #0
   16ba8:	popne	{fp, pc}
   16bac:	bl	16cc8 <__assert_fail@plt+0x5718>
   16bb0:	push	{fp, lr}
   16bb4:	mov	fp, sp
   16bb8:	bl	16d0c <__assert_fail@plt+0x575c>
   16bbc:	cmp	r0, #0
   16bc0:	popne	{fp, pc}
   16bc4:	bl	16cc8 <__assert_fail@plt+0x5718>
   16bc8:	push	{r4, r5, r6, sl, fp, lr}
   16bcc:	add	fp, sp, #16
   16bd0:	mov	r5, r0
   16bd4:	mov	r0, r1
   16bd8:	mov	r4, r1
   16bdc:	bl	16d60 <__assert_fail@plt+0x57b0>
   16be0:	cmp	r0, #0
   16be4:	beq	16c00 <__assert_fail@plt+0x5650>
   16be8:	mov	r1, r5
   16bec:	mov	r2, r4
   16bf0:	mov	r6, r0
   16bf4:	bl	11328 <memcpy@plt>
   16bf8:	mov	r0, r6
   16bfc:	pop	{r4, r5, r6, sl, fp, pc}
   16c00:	bl	16cc8 <__assert_fail@plt+0x5718>
   16c04:	push	{r4, r5, r6, sl, fp, lr}
   16c08:	add	fp, sp, #16
   16c0c:	mov	r5, r0
   16c10:	mov	r0, r1
   16c14:	mov	r4, r1
   16c18:	bl	16d60 <__assert_fail@plt+0x57b0>
   16c1c:	cmp	r0, #0
   16c20:	beq	16c3c <__assert_fail@plt+0x568c>
   16c24:	mov	r1, r5
   16c28:	mov	r2, r4
   16c2c:	mov	r6, r0
   16c30:	bl	11328 <memcpy@plt>
   16c34:	mov	r0, r6
   16c38:	pop	{r4, r5, r6, sl, fp, pc}
   16c3c:	bl	16cc8 <__assert_fail@plt+0x5718>
   16c40:	push	{r4, r5, r6, sl, fp, lr}
   16c44:	add	fp, sp, #16
   16c48:	mov	r5, r0
   16c4c:	add	r0, r1, #1
   16c50:	mov	r4, r1
   16c54:	bl	16d60 <__assert_fail@plt+0x57b0>
   16c58:	cmp	r0, #0
   16c5c:	beq	16c84 <__assert_fail@plt+0x56d4>
   16c60:	mov	r6, r0
   16c64:	mov	r0, #0
   16c68:	mov	r1, r5
   16c6c:	mov	r2, r4
   16c70:	strb	r0, [r6, r4]
   16c74:	mov	r0, r6
   16c78:	bl	11328 <memcpy@plt>
   16c7c:	mov	r0, r6
   16c80:	pop	{r4, r5, r6, sl, fp, pc}
   16c84:	bl	16cc8 <__assert_fail@plt+0x5718>
   16c88:	push	{r4, r5, r6, sl, fp, lr}
   16c8c:	add	fp, sp, #16
   16c90:	mov	r4, r0
   16c94:	bl	11484 <strlen@plt>
   16c98:	add	r5, r0, #1
   16c9c:	mov	r0, r5
   16ca0:	bl	16d60 <__assert_fail@plt+0x57b0>
   16ca4:	cmp	r0, #0
   16ca8:	beq	16cc4 <__assert_fail@plt+0x5714>
   16cac:	mov	r1, r4
   16cb0:	mov	r2, r5
   16cb4:	mov	r6, r0
   16cb8:	bl	11328 <memcpy@plt>
   16cbc:	mov	r0, r6
   16cc0:	pop	{r4, r5, r6, sl, fp, pc}
   16cc4:	bl	16cc8 <__assert_fail@plt+0x5718>
   16cc8:	push	{fp, lr}
   16ccc:	mov	fp, sp
   16cd0:	movw	r0, #37164	; 0x912c
   16cd4:	movw	r1, #34328	; 0x8618
   16cd8:	mov	r2, #5
   16cdc:	movt	r0, #2
   16ce0:	movt	r1, #1
   16ce4:	ldr	r4, [r0]
   16ce8:	mov	r0, #0
   16cec:	bl	1134c <dcgettext@plt>
   16cf0:	movw	r2, #33260	; 0x81ec
   16cf4:	mov	r3, r0
   16cf8:	mov	r0, r4
   16cfc:	mov	r1, #0
   16d00:	movt	r2, #1
   16d04:	bl	113e8 <error@plt>
   16d08:	bl	11598 <abort@plt>
   16d0c:	clz	r2, r1
   16d10:	clz	r3, r0
   16d14:	lsr	r2, r2, #5
   16d18:	lsr	r3, r3, #5
   16d1c:	orrs	r2, r3, r2
   16d20:	movwne	r1, #1
   16d24:	movwne	r0, #1
   16d28:	cmp	r1, #0
   16d2c:	beq	16d5c <__assert_fail@plt+0x57ac>
   16d30:	mvn	r2, #-2147483648	; 0x80000000
   16d34:	udiv	r2, r2, r1
   16d38:	cmp	r2, r0
   16d3c:	bcs	16d5c <__assert_fail@plt+0x57ac>
   16d40:	push	{fp, lr}
   16d44:	mov	fp, sp
   16d48:	bl	114a8 <__errno_location@plt>
   16d4c:	mov	r1, #12
   16d50:	str	r1, [r0]
   16d54:	mov	r0, #0
   16d58:	pop	{fp, pc}
   16d5c:	b	11298 <calloc@plt>
   16d60:	cmp	r0, #0
   16d64:	movweq	r0, #1
   16d68:	cmn	r0, #1
   16d6c:	ble	16d74 <__assert_fail@plt+0x57c4>
   16d70:	b	11418 <malloc@plt>
   16d74:	push	{fp, lr}
   16d78:	mov	fp, sp
   16d7c:	bl	114a8 <__errno_location@plt>
   16d80:	mov	r1, #12
   16d84:	str	r1, [r0]
   16d88:	mov	r0, #0
   16d8c:	pop	{fp, pc}
   16d90:	push	{fp, lr}
   16d94:	mov	fp, sp
   16d98:	cmp	r0, #0
   16d9c:	beq	16db8 <__assert_fail@plt+0x5808>
   16da0:	cmp	r1, #0
   16da4:	beq	16dc4 <__assert_fail@plt+0x5814>
   16da8:	cmn	r1, #1
   16dac:	ble	16dd0 <__assert_fail@plt+0x5820>
   16db0:	pop	{fp, lr}
   16db4:	b	11364 <realloc@plt>
   16db8:	mov	r0, r1
   16dbc:	pop	{fp, lr}
   16dc0:	b	16d60 <__assert_fail@plt+0x57b0>
   16dc4:	bl	139a8 <__assert_fail@plt+0x23f8>
   16dc8:	mov	r0, #0
   16dcc:	pop	{fp, pc}
   16dd0:	bl	114a8 <__errno_location@plt>
   16dd4:	mov	r1, #12
   16dd8:	str	r1, [r0]
   16ddc:	mov	r0, #0
   16de0:	pop	{fp, pc}
   16de4:	push	{r4, r5, r6, sl, fp, lr}
   16de8:	add	fp, sp, #16
   16dec:	mov	r4, r0
   16df0:	bl	113d0 <__fpending@plt>
   16df4:	ldr	r6, [r4]
   16df8:	mov	r5, r0
   16dfc:	mov	r0, r4
   16e00:	bl	138a4 <__assert_fail@plt+0x22f4>
   16e04:	tst	r6, #32
   16e08:	bne	16e40 <__assert_fail@plt+0x5890>
   16e0c:	cmp	r0, #0
   16e10:	mov	r4, r0
   16e14:	mvnne	r4, #0
   16e18:	cmp	r5, #0
   16e1c:	bne	16e4c <__assert_fail@plt+0x589c>
   16e20:	cmp	r0, #0
   16e24:	beq	16e4c <__assert_fail@plt+0x589c>
   16e28:	bl	114a8 <__errno_location@plt>
   16e2c:	ldr	r0, [r0]
   16e30:	subs	r4, r0, #9
   16e34:	mvnne	r4, #0
   16e38:	mov	r0, r4
   16e3c:	pop	{r4, r5, r6, sl, fp, pc}
   16e40:	mvn	r4, #0
   16e44:	cmp	r0, #0
   16e48:	beq	16e54 <__assert_fail@plt+0x58a4>
   16e4c:	mov	r0, r4
   16e50:	pop	{r4, r5, r6, sl, fp, pc}
   16e54:	bl	114a8 <__errno_location@plt>
   16e58:	mov	r1, #0
   16e5c:	str	r1, [r0]
   16e60:	mov	r0, r4
   16e64:	pop	{r4, r5, r6, sl, fp, pc}
   16e68:	push	{r4, sl, fp, lr}
   16e6c:	add	fp, sp, #8
   16e70:	sub	sp, sp, #264	; 0x108
   16e74:	add	r1, sp, #7
   16e78:	movw	r2, #257	; 0x101
   16e7c:	bl	17348 <_obstack_memory_used@@Base+0xb4>
   16e80:	mov	r4, #0
   16e84:	cmp	r0, #0
   16e88:	bne	16ec0 <__assert_fail@plt+0x5910>
   16e8c:	movw	r1, #34345	; 0x8629
   16e90:	add	r0, sp, #7
   16e94:	movt	r1, #1
   16e98:	bl	112bc <strcmp@plt>
   16e9c:	cmp	r0, #0
   16ea0:	beq	16ec0 <__assert_fail@plt+0x5910>
   16ea4:	movw	r1, #34347	; 0x862b
   16ea8:	add	r0, sp, #7
   16eac:	movt	r1, #1
   16eb0:	bl	112bc <strcmp@plt>
   16eb4:	mov	r4, r0
   16eb8:	cmp	r0, #0
   16ebc:	movwne	r4, #1
   16ec0:	mov	r0, r4
   16ec4:	sub	sp, fp, #8
   16ec8:	pop	{r4, sl, fp, pc}
   16ecc:	push	{fp, lr}
   16ed0:	mov	fp, sp
   16ed4:	mov	r0, #14
   16ed8:	bl	11550 <nl_langinfo@plt>
   16edc:	movw	r1, #32933	; 0x80a5
   16ee0:	cmp	r0, #0
   16ee4:	movt	r1, #1
   16ee8:	movne	r1, r0
   16eec:	movw	r0, #34353	; 0x8631
   16ef0:	ldrb	r2, [r1]
   16ef4:	movt	r0, #1
   16ef8:	cmp	r2, #0
   16efc:	movne	r0, r1
   16f00:	pop	{fp, pc}

00016f04 <_obstack_begin@@Base>:
   16f04:	push	{r4, r5, r6, sl, fp, lr}
   16f08:	add	fp, sp, #16
   16f0c:	cmp	r1, #0
   16f10:	mov	r4, r0
   16f14:	str	r3, [r0, #28]
   16f18:	mov	r5, r2
   16f1c:	movweq	r1, #4072	; 0xfe8
   16f20:	cmp	r2, #0
   16f24:	str	r1, [r0]
   16f28:	ldr	r0, [fp, #8]
   16f2c:	movweq	r5, #8
   16f30:	sub	r6, r5, #1
   16f34:	str	r0, [r4, #32]
   16f38:	str	r6, [r4, #24]
   16f3c:	ldrb	r0, [r4, #40]	; 0x28
   16f40:	and	r0, r0, #254	; 0xfe
   16f44:	strb	r0, [r4, #40]	; 0x28
   16f48:	mov	r0, r1
   16f4c:	blx	r3
   16f50:	cmp	r0, #0
   16f54:	str	r0, [r4, #4]
   16f58:	addne	r1, r6, r0
   16f5c:	rsbne	r2, r5, #0
   16f60:	addne	r1, r1, #8
   16f64:	andne	r1, r1, r2
   16f68:	strne	r1, [r4, #12]
   16f6c:	strne	r1, [r4, #8]
   16f70:	ldrne	r1, [r4]
   16f74:	addne	r1, r0, r1
   16f78:	strne	r1, [r0]
   16f7c:	strne	r1, [r4, #16]
   16f80:	movne	r1, #0
   16f84:	strne	r1, [r0, #4]
   16f88:	ldrbne	r0, [r4, #40]	; 0x28
   16f8c:	andne	r0, r0, #249	; 0xf9
   16f90:	strbne	r0, [r4, #40]	; 0x28
   16f94:	movne	r0, #1
   16f98:	popne	{r4, r5, r6, sl, fp, pc}
   16f9c:	movw	r0, #37232	; 0x9170
   16fa0:	movt	r0, #2
   16fa4:	ldr	r0, [r0]
   16fa8:	blx	r0

00016fac <_obstack_begin_1@@Base>:
   16fac:	push	{r4, r5, r6, sl, fp, lr}
   16fb0:	add	fp, sp, #16
   16fb4:	cmp	r1, #0
   16fb8:	mov	r4, r0
   16fbc:	str	r3, [r0, #28]
   16fc0:	mov	r5, r2
   16fc4:	movweq	r1, #4072	; 0xfe8
   16fc8:	cmp	r2, #0
   16fcc:	str	r1, [r0]
   16fd0:	ldr	r0, [fp, #8]
   16fd4:	movweq	r5, #8
   16fd8:	sub	r6, r5, #1
   16fdc:	str	r0, [r4, #32]
   16fe0:	ldr	r0, [fp, #12]
   16fe4:	str	r0, [r4, #36]	; 0x24
   16fe8:	str	r6, [r4, #24]
   16fec:	ldrb	r2, [r4, #40]	; 0x28
   16ff0:	orr	r2, r2, #1
   16ff4:	strb	r2, [r4, #40]	; 0x28
   16ff8:	blx	r3
   16ffc:	cmp	r0, #0
   17000:	str	r0, [r4, #4]
   17004:	addne	r1, r6, r0
   17008:	rsbne	r2, r5, #0
   1700c:	addne	r1, r1, #8
   17010:	andne	r1, r1, r2
   17014:	strne	r1, [r4, #12]
   17018:	strne	r1, [r4, #8]
   1701c:	ldrne	r1, [r4]
   17020:	addne	r1, r0, r1
   17024:	strne	r1, [r0]
   17028:	strne	r1, [r4, #16]
   1702c:	movne	r1, #0
   17030:	strne	r1, [r0, #4]
   17034:	ldrbne	r0, [r4, #40]	; 0x28
   17038:	andne	r0, r0, #249	; 0xf9
   1703c:	strbne	r0, [r4, #40]	; 0x28
   17040:	movne	r0, #1
   17044:	popne	{r4, r5, r6, sl, fp, pc}
   17048:	movw	r0, #37232	; 0x9170
   1704c:	movt	r0, #2
   17050:	ldr	r0, [r0]
   17054:	blx	r0

00017058 <_obstack_newchunk@@Base>:
   17058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1705c:	add	fp, sp, #28
   17060:	sub	sp, sp, #4
   17064:	mov	r4, r0
   17068:	ldr	r2, [r0]
   1706c:	ldr	r0, [r0, #8]
   17070:	ldr	r3, [r4, #12]
   17074:	sub	r9, r3, r0
   17078:	ldr	r0, [r4, #24]
   1707c:	mov	r3, #0
   17080:	add	r1, r9, r1
   17084:	adds	r6, r1, r0
   17088:	adc	r0, r3, #0
   1708c:	mov	r3, #100	; 0x64
   17090:	add	r3, r3, r9, lsr #3
   17094:	adds	r7, r3, r6
   17098:	movcs	r7, r6
   1709c:	cmp	r7, r2
   170a0:	movcc	r7, r2
   170a4:	cmp	r1, r9
   170a8:	bcc	171ac <_obstack_newchunk@@Base+0x154>
   170ac:	cmp	r0, #0
   170b0:	bne	171ac <_obstack_newchunk@@Base+0x154>
   170b4:	ldrb	r0, [r4, #40]	; 0x28
   170b8:	ldr	r8, [r4, #4]
   170bc:	tst	r0, #1
   170c0:	bne	170e0 <_obstack_newchunk@@Base+0x88>
   170c4:	ldr	r1, [r4, #28]
   170c8:	mov	r0, r7
   170cc:	blx	r1
   170d0:	mov	r6, r0
   170d4:	cmp	r0, #0
   170d8:	bne	170fc <_obstack_newchunk@@Base+0xa4>
   170dc:	b	171ac <_obstack_newchunk@@Base+0x154>
   170e0:	ldr	r2, [r4, #28]
   170e4:	ldr	r0, [r4, #36]	; 0x24
   170e8:	mov	r1, r7
   170ec:	blx	r2
   170f0:	mov	r6, r0
   170f4:	cmp	r0, #0
   170f8:	beq	171ac <_obstack_newchunk@@Base+0x154>
   170fc:	add	r0, r6, r7
   17100:	str	r6, [r4, #4]
   17104:	str	r8, [r6, #4]
   17108:	mov	r2, r9
   1710c:	str	r0, [r4, #16]
   17110:	str	r0, [r6]
   17114:	ldr	r5, [r4, #24]
   17118:	ldr	sl, [r4, #8]
   1711c:	add	r0, r5, r6
   17120:	mov	r1, sl
   17124:	add	r0, r0, #8
   17128:	bic	r7, r0, r5
   1712c:	mov	r0, r7
   17130:	bl	11328 <memcpy@plt>
   17134:	ldrb	r0, [r4, #40]	; 0x28
   17138:	tst	r0, #2
   1713c:	bne	1718c <_obstack_newchunk@@Base+0x134>
   17140:	add	r1, r5, r8
   17144:	mvn	r0, r5
   17148:	add	r1, r1, #8
   1714c:	and	r0, r1, r0
   17150:	cmp	sl, r0
   17154:	bne	1718c <_obstack_newchunk@@Base+0x134>
   17158:	ldr	r0, [r8, #4]
   1715c:	str	r0, [r6, #4]
   17160:	ldrb	r0, [r4, #40]	; 0x28
   17164:	tst	r0, #1
   17168:	bne	1717c <_obstack_newchunk@@Base+0x124>
   1716c:	ldr	r1, [r4, #32]
   17170:	mov	r0, r8
   17174:	blx	r1
   17178:	b	1718c <_obstack_newchunk@@Base+0x134>
   1717c:	ldr	r2, [r4, #32]
   17180:	ldr	r0, [r4, #36]	; 0x24
   17184:	mov	r1, r8
   17188:	blx	r2
   1718c:	add	r0, r7, r9
   17190:	str	r7, [r4, #8]
   17194:	str	r0, [r4, #12]
   17198:	ldrb	r0, [r4, #40]	; 0x28
   1719c:	and	r0, r0, #253	; 0xfd
   171a0:	strb	r0, [r4, #40]	; 0x28
   171a4:	sub	sp, fp, #28
   171a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171ac:	movw	r0, #37232	; 0x9170
   171b0:	movt	r0, #2
   171b4:	ldr	r0, [r0]
   171b8:	blx	r0

000171bc <_obstack_allocated_p@@Base>:
   171bc:	ldr	r2, [r0, #4]
   171c0:	mov	r0, #0
   171c4:	cmp	r2, #0
   171c8:	bxeq	lr
   171cc:	cmp	r2, r1
   171d0:	bcc	171e8 <_obstack_allocated_p@@Base+0x2c>
   171d4:	ldr	r2, [r2, #4]
   171d8:	cmp	r2, #0
   171dc:	bxeq	lr
   171e0:	cmp	r2, r1
   171e4:	bcs	171d4 <_obstack_allocated_p@@Base+0x18>
   171e8:	ldr	r3, [r2]
   171ec:	cmp	r3, r1
   171f0:	bcc	171d4 <_obstack_allocated_p@@Base+0x18>
   171f4:	mov	r0, #1
   171f8:	bx	lr

000171fc <_obstack_free@@Base>:
   171fc:	push	{r4, r5, r6, sl, fp, lr}
   17200:	add	fp, sp, #16
   17204:	mov	r5, r1
   17208:	ldr	r1, [r0, #4]
   1720c:	cmp	r1, #0
   17210:	beq	17270 <_obstack_free@@Base+0x74>
   17214:	mov	r4, r0
   17218:	cmp	r1, r5
   1721c:	bcs	1722c <_obstack_free@@Base+0x30>
   17220:	ldr	r0, [r1]
   17224:	cmp	r0, r5
   17228:	bcs	1727c <_obstack_free@@Base+0x80>
   1722c:	ldrb	r0, [r4, #40]	; 0x28
   17230:	ldr	r6, [r1, #4]
   17234:	tst	r0, #1
   17238:	bne	1724c <_obstack_free@@Base+0x50>
   1723c:	ldr	r2, [r4, #32]
   17240:	mov	r0, r1
   17244:	blx	r2
   17248:	b	17258 <_obstack_free@@Base+0x5c>
   1724c:	ldr	r2, [r4, #32]
   17250:	ldr	r0, [r4, #36]	; 0x24
   17254:	blx	r2
   17258:	ldrb	r0, [r4, #40]	; 0x28
   1725c:	cmp	r6, #0
   17260:	mov	r1, r6
   17264:	orr	r0, r0, #2
   17268:	strb	r0, [r4, #40]	; 0x28
   1726c:	bne	17218 <_obstack_free@@Base+0x1c>
   17270:	cmp	r5, #0
   17274:	popeq	{r4, r5, r6, sl, fp, pc}
   17278:	bl	11598 <abort@plt>
   1727c:	str	r5, [r4, #8]
   17280:	str	r5, [r4, #12]
   17284:	ldr	r0, [r1]
   17288:	str	r1, [r4, #4]
   1728c:	str	r0, [r4, #16]
   17290:	pop	{r4, r5, r6, sl, fp, pc}

00017294 <_obstack_memory_used@@Base>:
   17294:	ldr	r1, [r0, #4]
   17298:	mov	r0, #0
   1729c:	b	172b0 <_obstack_memory_used@@Base+0x1c>
   172a0:	ldr	r2, [r1]
   172a4:	sub	r0, r0, r1
   172a8:	ldr	r1, [r1, #4]
   172ac:	add	r0, r0, r2
   172b0:	cmp	r1, #0
   172b4:	bxeq	lr
   172b8:	b	172a0 <_obstack_memory_used@@Base+0xc>
   172bc:	push	{fp, lr}
   172c0:	mov	fp, sp
   172c4:	movw	r0, #37256	; 0x9188
   172c8:	movw	r1, #34328	; 0x8618
   172cc:	mov	r2, #5
   172d0:	movt	r0, #2
   172d4:	movt	r1, #1
   172d8:	ldr	r4, [r0]
   172dc:	mov	r0, #0
   172e0:	bl	1134c <dcgettext@plt>
   172e4:	movw	r2, #33552	; 0x8310
   172e8:	mov	r3, r0
   172ec:	mov	r0, r4
   172f0:	mov	r1, #1
   172f4:	movt	r2, #1
   172f8:	bl	11508 <__fprintf_chk@plt>
   172fc:	movw	r0, #37164	; 0x912c
   17300:	movt	r0, #2
   17304:	ldr	r0, [r0]
   17308:	bl	11460 <exit@plt>
   1730c:	cmp	r2, #0
   17310:	beq	17340 <_obstack_memory_used@@Base+0xac>
   17314:	mvn	r3, #0
   17318:	udiv	r3, r3, r2
   1731c:	cmp	r3, r1
   17320:	bcs	17340 <_obstack_memory_used@@Base+0xac>
   17324:	push	{fp, lr}
   17328:	mov	fp, sp
   1732c:	bl	114a8 <__errno_location@plt>
   17330:	mov	r1, #12
   17334:	str	r1, [r0]
   17338:	mov	r0, #0
   1733c:	pop	{fp, pc}
   17340:	mul	r1, r2, r1
   17344:	b	16d90 <__assert_fail@plt+0x57e0>
   17348:	push	{r4, r5, r6, r7, fp, lr}
   1734c:	add	fp, sp, #16
   17350:	mov	r4, r1
   17354:	mov	r1, #0
   17358:	mov	r6, r2
   1735c:	bl	11538 <setlocale@plt>
   17360:	cmp	r0, #0
   17364:	beq	17394 <_obstack_memory_used@@Base+0x100>
   17368:	mov	r7, r0
   1736c:	bl	11484 <strlen@plt>
   17370:	cmp	r0, r6
   17374:	bcs	173b4 <_obstack_memory_used@@Base+0x120>
   17378:	add	r2, r0, #1
   1737c:	mov	r0, r4
   17380:	mov	r1, r7
   17384:	bl	11328 <memcpy@plt>
   17388:	mov	r5, #0
   1738c:	mov	r0, r5
   17390:	pop	{r4, r5, r6, r7, fp, pc}
   17394:	cmp	r6, #0
   17398:	mov	r5, #22
   1739c:	movne	r0, #0
   173a0:	strbne	r0, [r4]
   173a4:	movne	r0, r5
   173a8:	popne	{r4, r5, r6, r7, fp, pc}
   173ac:	mov	r0, r5
   173b0:	pop	{r4, r5, r6, r7, fp, pc}
   173b4:	mov	r5, #34	; 0x22
   173b8:	cmp	r6, #0
   173bc:	beq	173dc <_obstack_memory_used@@Base+0x148>
   173c0:	sub	r6, r6, #1
   173c4:	mov	r0, r4
   173c8:	mov	r1, r7
   173cc:	mov	r2, r6
   173d0:	bl	11328 <memcpy@plt>
   173d4:	mov	r0, #0
   173d8:	strb	r0, [r4, r6]
   173dc:	mov	r0, r5
   173e0:	pop	{r4, r5, r6, r7, fp, pc}
   173e4:	mov	r1, #0
   173e8:	b	11538 <setlocale@plt>
   173ec:	eor	r1, r1, #-2147483648	; 0x80000000
   173f0:	b	173f8 <_obstack_memory_used@@Base+0x164>
   173f4:	eor	r3, r3, #-2147483648	; 0x80000000
   173f8:	push	{r4, r5, lr}
   173fc:	lsl	r4, r1, #1
   17400:	lsl	r5, r3, #1
   17404:	teq	r4, r5
   17408:	teqeq	r0, r2
   1740c:	orrsne	ip, r4, r0
   17410:	orrsne	ip, r5, r2
   17414:	mvnsne	ip, r4, asr #21
   17418:	mvnsne	ip, r5, asr #21
   1741c:	beq	17608 <_obstack_memory_used@@Base+0x374>
   17420:	lsr	r4, r4, #21
   17424:	rsbs	r5, r4, r5, lsr #21
   17428:	rsblt	r5, r5, #0
   1742c:	ble	1744c <_obstack_memory_used@@Base+0x1b8>
   17430:	add	r4, r4, r5
   17434:	eor	r2, r0, r2
   17438:	eor	r3, r1, r3
   1743c:	eor	r0, r2, r0
   17440:	eor	r1, r3, r1
   17444:	eor	r2, r0, r2
   17448:	eor	r3, r1, r3
   1744c:	cmp	r5, #54	; 0x36
   17450:	pophi	{r4, r5, pc}
   17454:	tst	r1, #-2147483648	; 0x80000000
   17458:	lsl	r1, r1, #12
   1745c:	mov	ip, #1048576	; 0x100000
   17460:	orr	r1, ip, r1, lsr #12
   17464:	beq	17470 <_obstack_memory_used@@Base+0x1dc>
   17468:	rsbs	r0, r0, #0
   1746c:	rsc	r1, r1, #0
   17470:	tst	r3, #-2147483648	; 0x80000000
   17474:	lsl	r3, r3, #12
   17478:	orr	r3, ip, r3, lsr #12
   1747c:	beq	17488 <_obstack_memory_used@@Base+0x1f4>
   17480:	rsbs	r2, r2, #0
   17484:	rsc	r3, r3, #0
   17488:	teq	r4, r5
   1748c:	beq	175f0 <_obstack_memory_used@@Base+0x35c>
   17490:	sub	r4, r4, #1
   17494:	rsbs	lr, r5, #32
   17498:	blt	174b4 <_obstack_memory_used@@Base+0x220>
   1749c:	lsl	ip, r2, lr
   174a0:	adds	r0, r0, r2, lsr r5
   174a4:	adc	r1, r1, #0
   174a8:	adds	r0, r0, r3, lsl lr
   174ac:	adcs	r1, r1, r3, asr r5
   174b0:	b	174d0 <_obstack_memory_used@@Base+0x23c>
   174b4:	sub	r5, r5, #32
   174b8:	add	lr, lr, #32
   174bc:	cmp	r2, #1
   174c0:	lsl	ip, r3, lr
   174c4:	orrcs	ip, ip, #2
   174c8:	adds	r0, r0, r3, asr r5
   174cc:	adcs	r1, r1, r3, asr #31
   174d0:	and	r5, r1, #-2147483648	; 0x80000000
   174d4:	bpl	174e4 <_obstack_memory_used@@Base+0x250>
   174d8:	rsbs	ip, ip, #0
   174dc:	rscs	r0, r0, #0
   174e0:	rsc	r1, r1, #0
   174e4:	cmp	r1, #1048576	; 0x100000
   174e8:	bcc	17528 <_obstack_memory_used@@Base+0x294>
   174ec:	cmp	r1, #2097152	; 0x200000
   174f0:	bcc	17510 <_obstack_memory_used@@Base+0x27c>
   174f4:	lsrs	r1, r1, #1
   174f8:	rrxs	r0, r0
   174fc:	rrx	ip, ip
   17500:	add	r4, r4, #1
   17504:	lsl	r2, r4, #21
   17508:	cmn	r2, #4194304	; 0x400000
   1750c:	bcs	17668 <_obstack_memory_used@@Base+0x3d4>
   17510:	cmp	ip, #-2147483648	; 0x80000000
   17514:	lsrseq	ip, r0, #1
   17518:	adcs	r0, r0, #0
   1751c:	adc	r1, r1, r4, lsl #20
   17520:	orr	r1, r1, r5
   17524:	pop	{r4, r5, pc}
   17528:	lsls	ip, ip, #1
   1752c:	adcs	r0, r0, r0
   17530:	adc	r1, r1, r1
   17534:	tst	r1, #1048576	; 0x100000
   17538:	sub	r4, r4, #1
   1753c:	bne	17510 <_obstack_memory_used@@Base+0x27c>
   17540:	teq	r1, #0
   17544:	moveq	r1, r0
   17548:	moveq	r0, #0
   1754c:	clz	r3, r1
   17550:	addeq	r3, r3, #32
   17554:	sub	r3, r3, #11
   17558:	subs	r2, r3, #32
   1755c:	bge	17580 <_obstack_memory_used@@Base+0x2ec>
   17560:	adds	r2, r2, #12
   17564:	ble	1757c <_obstack_memory_used@@Base+0x2e8>
   17568:	add	ip, r2, #20
   1756c:	rsb	r2, r2, #12
   17570:	lsl	r0, r1, ip
   17574:	lsr	r1, r1, r2
   17578:	b	17590 <_obstack_memory_used@@Base+0x2fc>
   1757c:	add	r2, r2, #20
   17580:	rsble	ip, r2, #32
   17584:	lsl	r1, r1, r2
   17588:	orrle	r1, r1, r0, lsr ip
   1758c:	lslle	r0, r0, r2
   17590:	subs	r4, r4, r3
   17594:	addge	r1, r1, r4, lsl #20
   17598:	orrge	r1, r1, r5
   1759c:	popge	{r4, r5, pc}
   175a0:	mvn	r4, r4
   175a4:	subs	r4, r4, #31
   175a8:	bge	175e4 <_obstack_memory_used@@Base+0x350>
   175ac:	adds	r4, r4, #12
   175b0:	bgt	175cc <_obstack_memory_used@@Base+0x338>
   175b4:	add	r4, r4, #20
   175b8:	rsb	r2, r4, #32
   175bc:	lsr	r0, r0, r4
   175c0:	orr	r0, r0, r1, lsl r2
   175c4:	orr	r1, r5, r1, lsr r4
   175c8:	pop	{r4, r5, pc}
   175cc:	rsb	r4, r4, #12
   175d0:	rsb	r2, r4, #32
   175d4:	lsr	r0, r0, r2
   175d8:	orr	r0, r0, r1, lsl r4
   175dc:	mov	r1, r5
   175e0:	pop	{r4, r5, pc}
   175e4:	lsr	r0, r1, r4
   175e8:	mov	r1, r5
   175ec:	pop	{r4, r5, pc}
   175f0:	teq	r4, #0
   175f4:	eor	r3, r3, #1048576	; 0x100000
   175f8:	eoreq	r1, r1, #1048576	; 0x100000
   175fc:	addeq	r4, r4, #1
   17600:	subne	r5, r5, #1
   17604:	b	17490 <_obstack_memory_used@@Base+0x1fc>
   17608:	mvns	ip, r4, asr #21
   1760c:	mvnsne	ip, r5, asr #21
   17610:	beq	17678 <_obstack_memory_used@@Base+0x3e4>
   17614:	teq	r4, r5
   17618:	teqeq	r0, r2
   1761c:	beq	17630 <_obstack_memory_used@@Base+0x39c>
   17620:	orrs	ip, r4, r0
   17624:	moveq	r1, r3
   17628:	moveq	r0, r2
   1762c:	pop	{r4, r5, pc}
   17630:	teq	r1, r3
   17634:	movne	r1, #0
   17638:	movne	r0, #0
   1763c:	popne	{r4, r5, pc}
   17640:	lsrs	ip, r4, #21
   17644:	bne	17658 <_obstack_memory_used@@Base+0x3c4>
   17648:	lsls	r0, r0, #1
   1764c:	adcs	r1, r1, r1
   17650:	orrcs	r1, r1, #-2147483648	; 0x80000000
   17654:	pop	{r4, r5, pc}
   17658:	adds	r4, r4, #4194304	; 0x400000
   1765c:	addcc	r1, r1, #1048576	; 0x100000
   17660:	popcc	{r4, r5, pc}
   17664:	and	r5, r1, #-2147483648	; 0x80000000
   17668:	orr	r1, r5, #2130706432	; 0x7f000000
   1766c:	orr	r1, r1, #15728640	; 0xf00000
   17670:	mov	r0, #0
   17674:	pop	{r4, r5, pc}
   17678:	mvns	ip, r4, asr #21
   1767c:	movne	r1, r3
   17680:	movne	r0, r2
   17684:	mvnseq	ip, r5, asr #21
   17688:	movne	r3, r1
   1768c:	movne	r2, r0
   17690:	orrs	r4, r0, r1, lsl #12
   17694:	orrseq	r5, r2, r3, lsl #12
   17698:	teqeq	r1, r3
   1769c:	orrne	r1, r1, #524288	; 0x80000
   176a0:	pop	{r4, r5, pc}
   176a4:	teq	r0, #0
   176a8:	moveq	r1, #0
   176ac:	bxeq	lr
   176b0:	push	{r4, r5, lr}
   176b4:	mov	r4, #1024	; 0x400
   176b8:	add	r4, r4, #50	; 0x32
   176bc:	mov	r5, #0
   176c0:	mov	r1, #0
   176c4:	b	17540 <_obstack_memory_used@@Base+0x2ac>
   176c8:	teq	r0, #0
   176cc:	moveq	r1, #0
   176d0:	bxeq	lr
   176d4:	push	{r4, r5, lr}
   176d8:	mov	r4, #1024	; 0x400
   176dc:	add	r4, r4, #50	; 0x32
   176e0:	ands	r5, r0, #-2147483648	; 0x80000000
   176e4:	rsbmi	r0, r0, #0
   176e8:	mov	r1, #0
   176ec:	b	17540 <_obstack_memory_used@@Base+0x2ac>
   176f0:	lsls	r2, r0, #1
   176f4:	asr	r1, r2, #3
   176f8:	rrx	r1, r1
   176fc:	lsl	r0, r2, #28
   17700:	andsne	r3, r2, #-16777216	; 0xff000000
   17704:	teqne	r3, #-16777216	; 0xff000000
   17708:	eorne	r1, r1, #939524096	; 0x38000000
   1770c:	bxne	lr
   17710:	bics	r2, r2, #-16777216	; 0xff000000
   17714:	bxeq	lr
   17718:	teq	r3, #-16777216	; 0xff000000
   1771c:	orreq	r1, r1, #524288	; 0x80000
   17720:	bxeq	lr
   17724:	push	{r4, r5, lr}
   17728:	mov	r4, #896	; 0x380
   1772c:	and	r5, r1, #-2147483648	; 0x80000000
   17730:	bic	r1, r1, #-2147483648	; 0x80000000
   17734:	b	17540 <_obstack_memory_used@@Base+0x2ac>
   17738:	orrs	r2, r0, r1
   1773c:	bxeq	lr
   17740:	push	{r4, r5, lr}
   17744:	mov	r5, #0
   17748:	b	17768 <_obstack_memory_used@@Base+0x4d4>
   1774c:	orrs	r2, r0, r1
   17750:	bxeq	lr
   17754:	push	{r4, r5, lr}
   17758:	ands	r5, r1, #-2147483648	; 0x80000000
   1775c:	bpl	17768 <_obstack_memory_used@@Base+0x4d4>
   17760:	rsbs	r0, r0, #0
   17764:	rsc	r1, r1, #0
   17768:	mov	r4, #1024	; 0x400
   1776c:	add	r4, r4, #50	; 0x32
   17770:	lsrs	ip, r1, #22
   17774:	beq	174e4 <_obstack_memory_used@@Base+0x250>
   17778:	mov	r2, #3
   1777c:	lsrs	ip, ip, #3
   17780:	addne	r2, r2, #3
   17784:	lsrs	ip, ip, #3
   17788:	addne	r2, r2, #3
   1778c:	add	r2, r2, ip, lsr #3
   17790:	rsb	r3, r2, #32
   17794:	lsl	ip, r0, r3
   17798:	lsr	r0, r0, r2
   1779c:	orr	r0, r0, r1, lsl r3
   177a0:	lsr	r1, r1, r2
   177a4:	add	r4, r4, r2
   177a8:	b	174e4 <_obstack_memory_used@@Base+0x250>
   177ac:	cmp	r3, #0
   177b0:	cmpeq	r2, #0
   177b4:	bne	177cc <_obstack_memory_used@@Base+0x538>
   177b8:	cmp	r1, #0
   177bc:	cmpeq	r0, #0
   177c0:	mvnne	r1, #0
   177c4:	mvnne	r0, #0
   177c8:	b	177e8 <_obstack_memory_used@@Base+0x554>
   177cc:	sub	sp, sp, #8
   177d0:	push	{sp, lr}
   177d4:	bl	177f8 <_obstack_memory_used@@Base+0x564>
   177d8:	ldr	lr, [sp, #4]
   177dc:	add	sp, sp, #8
   177e0:	pop	{r2, r3}
   177e4:	bx	lr
   177e8:	push	{r1, lr}
   177ec:	mov	r0, #8
   177f0:	bl	112b0 <raise@plt>
   177f4:	pop	{r1, pc}
   177f8:	cmp	r1, r3
   177fc:	cmpeq	r0, r2
   17800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17804:	mov	r4, r0
   17808:	movcc	r0, #0
   1780c:	mov	r5, r1
   17810:	ldr	lr, [sp, #36]	; 0x24
   17814:	movcc	r1, r0
   17818:	bcc	17914 <_obstack_memory_used@@Base+0x680>
   1781c:	cmp	r3, #0
   17820:	clzeq	ip, r2
   17824:	clzne	ip, r3
   17828:	addeq	ip, ip, #32
   1782c:	cmp	r5, #0
   17830:	clzeq	r1, r4
   17834:	addeq	r1, r1, #32
   17838:	clzne	r1, r5
   1783c:	sub	ip, ip, r1
   17840:	sub	sl, ip, #32
   17844:	lsl	r9, r3, ip
   17848:	rsb	fp, ip, #32
   1784c:	orr	r9, r9, r2, lsl sl
   17850:	orr	r9, r9, r2, lsr fp
   17854:	lsl	r8, r2, ip
   17858:	cmp	r5, r9
   1785c:	cmpeq	r4, r8
   17860:	movcc	r0, #0
   17864:	movcc	r1, r0
   17868:	bcc	17884 <_obstack_memory_used@@Base+0x5f0>
   1786c:	mov	r0, #1
   17870:	subs	r4, r4, r8
   17874:	lsl	r1, r0, sl
   17878:	orr	r1, r1, r0, lsr fp
   1787c:	lsl	r0, r0, ip
   17880:	sbc	r5, r5, r9
   17884:	cmp	ip, #0
   17888:	beq	17914 <_obstack_memory_used@@Base+0x680>
   1788c:	lsr	r6, r8, #1
   17890:	orr	r6, r6, r9, lsl #31
   17894:	lsr	r7, r9, #1
   17898:	mov	r2, ip
   1789c:	b	178c0 <_obstack_memory_used@@Base+0x62c>
   178a0:	subs	r3, r4, r6
   178a4:	sbc	r8, r5, r7
   178a8:	adds	r3, r3, r3
   178ac:	adc	r8, r8, r8
   178b0:	adds	r4, r3, #1
   178b4:	adc	r5, r8, #0
   178b8:	subs	r2, r2, #1
   178bc:	beq	178dc <_obstack_memory_used@@Base+0x648>
   178c0:	cmp	r5, r7
   178c4:	cmpeq	r4, r6
   178c8:	bcs	178a0 <_obstack_memory_used@@Base+0x60c>
   178cc:	adds	r4, r4, r4
   178d0:	adc	r5, r5, r5
   178d4:	subs	r2, r2, #1
   178d8:	bne	178c0 <_obstack_memory_used@@Base+0x62c>
   178dc:	lsr	r3, r4, ip
   178e0:	orr	r3, r3, r5, lsl fp
   178e4:	lsr	r2, r5, ip
   178e8:	orr	r3, r3, r5, lsr sl
   178ec:	adds	r0, r0, r4
   178f0:	mov	r4, r3
   178f4:	lsl	r3, r2, ip
   178f8:	orr	r3, r3, r4, lsl sl
   178fc:	lsl	ip, r4, ip
   17900:	orr	r3, r3, r4, lsr fp
   17904:	adc	r1, r1, r5
   17908:	subs	r0, r0, ip
   1790c:	mov	r5, r2
   17910:	sbc	r1, r1, r3
   17914:	cmp	lr, #0
   17918:	strdne	r4, [lr]
   1791c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17920:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17924:	mov	r7, r0
   17928:	ldr	r6, [pc, #72]	; 17978 <_obstack_memory_used@@Base+0x6e4>
   1792c:	ldr	r5, [pc, #72]	; 1797c <_obstack_memory_used@@Base+0x6e8>
   17930:	add	r6, pc, r6
   17934:	add	r5, pc, r5
   17938:	sub	r6, r6, r5
   1793c:	mov	r8, r1
   17940:	mov	r9, r2
   17944:	bl	11278 <calloc@plt-0x20>
   17948:	asrs	r6, r6, #2
   1794c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17950:	mov	r4, #0
   17954:	add	r4, r4, #1
   17958:	ldr	r3, [r5], #4
   1795c:	mov	r2, r9
   17960:	mov	r1, r8
   17964:	mov	r0, r7
   17968:	blx	r3
   1796c:	cmp	r6, r4
   17970:	bne	17954 <_obstack_memory_used@@Base+0x6c0>
   17974:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17978:	ldrdeq	r1, [r1], -r4
   1797c:	andeq	r1, r1, ip, asr #11
   17980:	bx	lr
   17984:	ldr	r3, [pc, #12]	; 17998 <_obstack_memory_used@@Base+0x704>
   17988:	mov	r1, #0
   1798c:	add	r3, pc, r3
   17990:	ldr	r2, [r3]
   17994:	b	114b4 <__cxa_atexit@plt>
   17998:	muleq	r1, r0, r7

Disassembly of section .fini:

0001799c <.fini>:
   1799c:	push	{r3, lr}
   179a0:	pop	{r3, pc}
