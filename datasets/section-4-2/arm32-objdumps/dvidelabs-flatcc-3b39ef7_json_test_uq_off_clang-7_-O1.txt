
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

00014e10 <.init>:
   14e10:	push	{r3, lr}
   14e14:	bl	14f8c <_start@@Base+0x3c>
   14e18:	pop	{r3, pc}

Disassembly of section .plt:

00014e1c <raise@plt-0x14>:
   14e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   14e20:	ldr	lr, [pc, #4]	; 14e2c <raise@plt-0x4>
   14e24:	add	lr, pc, lr
   14e28:	ldr	pc, [lr, #8]!
   14e2c:	ldrdeq	r3, [r3], -r4

00014e30 <raise@plt>:
   14e30:	add	ip, pc, #0, 12
   14e34:	add	ip, ip, #208896	; 0x33000
   14e38:	ldr	pc, [ip, #468]!	; 0x1d4

00014e3c <strcmp@plt>:
   14e3c:	add	ip, pc, #0, 12
   14e40:	add	ip, ip, #208896	; 0x33000
   14e44:	ldr	pc, [ip, #460]!	; 0x1cc

00014e48 <memmove@plt>:
   14e48:	add	ip, pc, #0, 12
   14e4c:	add	ip, ip, #208896	; 0x33000
   14e50:	ldr	pc, [ip, #452]!	; 0x1c4

00014e54 <free@plt>:
   14e54:	add	ip, pc, #0, 12
   14e58:	add	ip, ip, #208896	; 0x33000
   14e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00014e60 <memcpy@plt>:
   14e60:	add	ip, pc, #0, 12
   14e64:	add	ip, ip, #208896	; 0x33000
   14e68:	ldr	pc, [ip, #436]!	; 0x1b4

00014e6c <memcmp@plt>:
   14e6c:	add	ip, pc, #0, 12
   14e70:	add	ip, ip, #208896	; 0x33000
   14e74:	ldr	pc, [ip, #428]!	; 0x1ac

00014e78 <__isinff@plt>:
   14e78:	add	ip, pc, #0, 12
   14e7c:	add	ip, ip, #208896	; 0x33000
   14e80:	ldr	pc, [ip, #420]!	; 0x1a4

00014e84 <__isinf@plt>:
   14e84:	add	ip, pc, #0, 12
   14e88:	add	ip, ip, #208896	; 0x33000
   14e8c:	ldr	pc, [ip, #412]!	; 0x19c

00014e90 <realloc@plt>:
   14e90:	add	ip, pc, #0, 12
   14e94:	add	ip, ip, #208896	; 0x33000
   14e98:	ldr	pc, [ip, #404]!	; 0x194

00014e9c <fwrite@plt>:
   14e9c:	add	ip, pc, #0, 12
   14ea0:	add	ip, ip, #208896	; 0x33000
   14ea4:	ldr	pc, [ip, #396]!	; 0x18c

00014ea8 <malloc@plt>:
   14ea8:	add	ip, pc, #0, 12
   14eac:	add	ip, ip, #208896	; 0x33000
   14eb0:	ldr	pc, [ip, #388]!	; 0x184

00014eb4 <__libc_start_main@plt>:
   14eb4:	add	ip, pc, #0, 12
   14eb8:	add	ip, ip, #208896	; 0x33000
   14ebc:	ldr	pc, [ip, #380]!	; 0x17c

00014ec0 <__gmon_start__@plt>:
   14ec0:	add	ip, pc, #0, 12
   14ec4:	add	ip, ip, #208896	; 0x33000
   14ec8:	ldr	pc, [ip, #372]!	; 0x174

00014ecc <strlen@plt>:
   14ecc:	add	ip, pc, #0, 12
   14ed0:	add	ip, ip, #208896	; 0x33000
   14ed4:	ldr	pc, [ip, #364]!	; 0x16c

00014ed8 <fprintf@plt>:
   14ed8:	add	ip, pc, #0, 12
   14edc:	add	ip, ip, #208896	; 0x33000
   14ee0:	ldr	pc, [ip, #356]!	; 0x164

00014ee4 <posix_memalign@plt>:
   14ee4:	add	ip, pc, #0, 12
   14ee8:	add	ip, ip, #208896	; 0x33000
   14eec:	ldr	pc, [ip, #348]!	; 0x15c

00014ef0 <memset@plt>:
   14ef0:	add	ip, pc, #0, 12
   14ef4:	add	ip, ip, #208896	; 0x33000
   14ef8:	ldr	pc, [ip, #340]!	; 0x154

00014efc <strncpy@plt>:
   14efc:	add	ip, pc, #0, 12
   14f00:	add	ip, ip, #208896	; 0x33000
   14f04:	ldr	pc, [ip, #332]!	; 0x14c

00014f08 <strtod@plt>:
   14f08:	add	ip, pc, #0, 12
   14f0c:	add	ip, ip, #208896	; 0x33000
   14f10:	ldr	pc, [ip, #324]!	; 0x144

00014f14 <memchr@plt>:
   14f14:	add	ip, pc, #0, 12
   14f18:	add	ip, ip, #208896	; 0x33000
   14f1c:	ldr	pc, [ip, #316]!	; 0x13c

00014f20 <fputc@plt>:
   14f20:	add	ip, pc, #0, 12
   14f24:	add	ip, ip, #208896	; 0x33000
   14f28:	ldr	pc, [ip, #308]!	; 0x134

00014f2c <sprintf@plt>:
   14f2c:	add	ip, pc, #0, 12
   14f30:	add	ip, ip, #208896	; 0x33000
   14f34:	ldr	pc, [ip, #300]!	; 0x12c

00014f38 <abort@plt>:
   14f38:	add	ip, pc, #0, 12
   14f3c:	add	ip, ip, #208896	; 0x33000
   14f40:	ldr	pc, [ip, #292]!	; 0x124

00014f44 <__assert_fail@plt>:
   14f44:	add	ip, pc, #0, 12
   14f48:	add	ip, ip, #208896	; 0x33000
   14f4c:	ldr	pc, [ip, #284]!	; 0x11c

Disassembly of section .text:

00014f50 <_start@@Base>:
   14f50:	mov	fp, #0
   14f54:	mov	lr, #0
   14f58:	pop	{r1}		; (ldr r1, [sp], #4)
   14f5c:	mov	r2, sp
   14f60:	push	{r2}		; (str r2, [sp, #-4]!)
   14f64:	push	{r0}		; (str r0, [sp, #-4]!)
   14f68:	ldr	ip, [pc, #16]	; 14f80 <_start@@Base+0x30>
   14f6c:	push	{ip}		; (str ip, [sp, #-4]!)
   14f70:	ldr	r0, [pc, #12]	; 14f84 <_start@@Base+0x34>
   14f74:	ldr	r3, [pc, #12]	; 14f88 <_start@@Base+0x38>
   14f78:	bl	14eb4 <__libc_start_main@plt>
   14f7c:	bl	14f38 <abort@plt>
   14f80:	andeq	r1, r3, ip, ror #7
   14f84:	andeq	r5, r1, r8, lsl #27
   14f88:	andeq	r1, r3, ip, lsl #7
   14f8c:	ldr	r3, [pc, #20]	; 14fa8 <_start@@Base+0x58>
   14f90:	ldr	r2, [pc, #20]	; 14fac <_start@@Base+0x5c>
   14f94:	add	r3, pc, r3
   14f98:	ldr	r2, [r3, r2]
   14f9c:	cmp	r2, #0
   14fa0:	bxeq	lr
   14fa4:	b	14ec0 <__gmon_start__@plt>
   14fa8:	andeq	r3, r3, r4, rrx
   14fac:	andeq	r0, r0, ip, rrx
   14fb0:	ldr	r0, [pc, #24]	; 14fd0 <_start@@Base+0x80>
   14fb4:	ldr	r3, [pc, #24]	; 14fd4 <_start@@Base+0x84>
   14fb8:	cmp	r3, r0
   14fbc:	bxeq	lr
   14fc0:	ldr	r3, [pc, #16]	; 14fd8 <_start@@Base+0x88>
   14fc4:	cmp	r3, #0
   14fc8:	bxeq	lr
   14fcc:	bx	r3
   14fd0:	andeq	r8, r4, r4, asr #6
   14fd4:	andeq	r8, r4, r4, asr #6
   14fd8:	andeq	r0, r0, r0
   14fdc:	ldr	r0, [pc, #36]	; 15008 <_start@@Base+0xb8>
   14fe0:	ldr	r1, [pc, #36]	; 1500c <_start@@Base+0xbc>
   14fe4:	sub	r1, r1, r0
   14fe8:	asr	r1, r1, #2
   14fec:	add	r1, r1, r1, lsr #31
   14ff0:	asrs	r1, r1, #1
   14ff4:	bxeq	lr
   14ff8:	ldr	r3, [pc, #16]	; 15010 <_start@@Base+0xc0>
   14ffc:	cmp	r3, #0
   15000:	bxeq	lr
   15004:	bx	r3
   15008:	andeq	r8, r4, r4, asr #6
   1500c:	andeq	r8, r4, r4, asr #6
   15010:	andeq	r0, r0, r0
   15014:	push	{r4, lr}
   15018:	ldr	r4, [pc, #24]	; 15038 <_start@@Base+0xe8>
   1501c:	ldrb	r3, [r4]
   15020:	cmp	r3, #0
   15024:	popne	{r4, pc}
   15028:	bl	14fb0 <_start@@Base+0x60>
   1502c:	mov	r3, #1
   15030:	strb	r3, [r4]
   15034:	pop	{r4, pc}
   15038:	andeq	r8, r4, r0, asr r3
   1503c:	b	14fdc <_start@@Base+0x8c>

00015040 <test_json@@Base>:
   15040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15044:	add	fp, sp, #28
   15048:	sub	sp, sp, #348	; 0x15c
   1504c:	mov	r7, r3
   15050:	mov	r9, r2
   15054:	mov	r8, r1
   15058:	mov	r6, r0
   1505c:	add	r4, sp, #104	; 0x68
   15060:	mov	r0, r4
   15064:	bl	210d0 <flatcc_builder_init@@Base>
   15068:	add	r5, sp, #16
   1506c:	mov	sl, #0
   15070:	mov	r0, r5
   15074:	mov	r1, #0
   15078:	bl	2fb8c <flatcc_json_printer_init_dynamic_buffer@@Base>
   1507c:	ldr	r1, [fp, #12]
   15080:	mov	r0, r5
   15084:	bl	15324 <test_json@@Base+0x2e4>
   15088:	mov	r0, r8
   1508c:	bl	14ecc <strlen@plt>
   15090:	mov	r3, r0
   15094:	ldm	r6, {r0, r1}
   15098:	stmib	sp, {r0, r1}
   1509c:	ldr	r0, [fp, #8]
   150a0:	str	r0, [sp]
   150a4:	add	r1, sp, #64	; 0x40
   150a8:	mov	r0, r4
   150ac:	mov	r2, r8
   150b0:	bl	28418 <flatcc_json_parser_table_as_root@@Base>
   150b4:	ldr	r4, [fp, #16]
   150b8:	cmp	r0, r7
   150bc:	bne	15168 <test_json@@Base+0x128>
   150c0:	cmp	r7, #0
   150c4:	beq	150d0 <test_json@@Base+0x90>
   150c8:	mov	r5, #0
   150cc:	b	15144 <test_json@@Base+0x104>
   150d0:	add	r0, sp, #104	; 0x68
   150d4:	sub	r1, fp, #36	; 0x24
   150d8:	bl	24084 <flatcc_builder_finalize_aligned_buffer@@Base>
   150dc:	mov	r5, r0
   150e0:	ldr	r2, [r6]
   150e4:	ldr	r3, [r6, #12]
   150e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   150ec:	bl	25288 <flatcc_verify_table_as_root@@Base>
   150f0:	cmp	r0, #0
   150f4:	bne	15220 <test_json@@Base+0x1e0>
   150f8:	ldr	r3, [r6]
   150fc:	ldr	r0, [r6, #8]
   15100:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15104:	str	r0, [sp]
   15108:	add	r6, sp, #16
   1510c:	mov	r0, r6
   15110:	mov	r1, r5
   15114:	bl	2f71c <flatcc_json_printer_table_as_root@@Base>
   15118:	sub	r1, fp, #40	; 0x28
   1511c:	mov	r0, r6
   15120:	bl	2fcb8 <flatcc_json_printer_get_buffer@@Base>
   15124:	mov	r6, r0
   15128:	cmp	r0, #0
   1512c:	beq	1519c <test_json@@Base+0x15c>
   15130:	mov	r0, r9
   15134:	mov	r1, r6
   15138:	bl	14e3c <strcmp@plt>
   1513c:	cmp	r0, #0
   15140:	bne	1519c <test_json@@Base+0x15c>
   15144:	mov	r0, r5
   15148:	bl	24164 <flatcc_builder_aligned_free@@Base>
   1514c:	add	r0, sp, #104	; 0x68
   15150:	bl	21248 <flatcc_builder_clear@@Base>
   15154:	add	r0, sp, #16
   15158:	bl	2fd1c <flatcc_json_printer_clear@@Base>
   1515c:	mov	r0, sl
   15160:	sub	sp, fp, #28
   15164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15168:	movw	r6, #33608	; 0x8348
   1516c:	movt	r6, #4
   15170:	cmp	r7, #0
   15174:	beq	151fc <test_json@@Base+0x1bc>
   15178:	ldr	r5, [r6]
   1517c:	cmp	r0, #0
   15180:	bne	15278 <test_json@@Base+0x238>
   15184:	mov	r0, r7
   15188:	bl	25f40 <flatcc_json_parser_error_string@@Base>
   1518c:	mov	r3, r0
   15190:	movw	r1, #5162	; 0x142a
   15194:	movt	r1, #3
   15198:	b	15210 <test_json@@Base+0x1d0>
   1519c:	movw	r7, #33608	; 0x8348
   151a0:	movt	r7, #4
   151a4:	ldr	r0, [r7]
   151a8:	movw	r1, #5376	; 0x1500
   151ac:	movt	r1, #3
   151b0:	mov	r2, r4
   151b4:	bl	14ed8 <fprintf@plt>
   151b8:	ldr	r0, [r7]
   151bc:	movw	r4, #16201	; 0x3f49
   151c0:	movt	r4, #3
   151c4:	mov	r1, r4
   151c8:	mov	r2, r6
   151cc:	bl	14ed8 <fprintf@plt>
   151d0:	ldr	r3, [r7]
   151d4:	movw	r0, #5429	; 0x1535
   151d8:	movt	r0, #3
   151dc:	mov	r1, #10
   151e0:	mov	r2, #1
   151e4:	bl	14e9c <fwrite@plt>
   151e8:	ldr	r0, [r7]
   151ec:	mov	r1, r4
   151f0:	mov	r2, r9
   151f4:	bl	14ed8 <fprintf@plt>
   151f8:	b	15250 <test_json@@Base+0x210>
   151fc:	ldr	r5, [r6]
   15200:	bl	25f40 <flatcc_json_parser_error_string@@Base>
   15204:	mov	r3, r0
   15208:	movw	r1, #5226	; 0x146a
   1520c:	movt	r1, #3
   15210:	mov	r0, r5
   15214:	mov	r2, r4
   15218:	bl	14ed8 <fprintf@plt>
   1521c:	b	152b4 <test_json@@Base+0x274>
   15220:	movw	r1, #33608	; 0x8348
   15224:	movt	r1, #4
   15228:	ldr	r6, [r1]
   1522c:	bl	2493c <flatcc_verify_error_string@@Base>
   15230:	str	r0, [sp]
   15234:	movw	r1, #5262	; 0x148e
   15238:	movt	r1, #3
   1523c:	movw	r2, #5301	; 0x14b5
   15240:	movt	r2, #3
   15244:	mov	r0, r6
   15248:	mov	r3, r4
   1524c:	bl	14ed8 <fprintf@plt>
   15250:	mvn	sl, #0
   15254:	cmp	r5, #0
   15258:	beq	150c8 <test_json@@Base+0x88>
   1525c:	movw	r0, #33608	; 0x8348
   15260:	movt	r0, #4
   15264:	ldr	r2, [r0]
   15268:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1526c:	mov	r0, r5
   15270:	bl	15378 <test_json@@Base+0x338>
   15274:	b	15144 <test_json@@Base+0x104>
   15278:	bl	25f40 <flatcc_json_parser_error_string@@Base>
   1527c:	mov	r3, r0
   15280:	movw	r1, #5124	; 0x1404
   15284:	movt	r1, #3
   15288:	mov	r0, r5
   1528c:	mov	r2, r4
   15290:	bl	14ed8 <fprintf@plt>
   15294:	ldr	r4, [r6]
   15298:	mov	r0, r7
   1529c:	bl	25f40 <flatcc_json_parser_error_string@@Base>
   152a0:	mov	r2, r0
   152a4:	movw	r1, #5195	; 0x144b
   152a8:	movt	r1, #3
   152ac:	mov	r0, r4
   152b0:	bl	14ed8 <fprintf@plt>
   152b4:	ldr	r0, [r6]
   152b8:	movw	r1, #16201	; 0x3f49
   152bc:	movt	r1, #3
   152c0:	mov	r2, r8
   152c4:	bl	14ed8 <fprintf@plt>
   152c8:	movw	r4, #33608	; 0x8348
   152cc:	movt	r4, #4
   152d0:	ldr	r3, [r4]
   152d4:	ldr	r0, [sp, #80]	; 0x50
   152d8:	cmp	r0, #2
   152dc:	blt	15308 <test_json@@Base+0x2c8>
   152e0:	mov	r5, #0
   152e4:	mov	r0, #32
   152e8:	mov	r1, r3
   152ec:	bl	14f20 <fputc@plt>
   152f0:	add	r5, r5, #1
   152f4:	ldr	r3, [r4]
   152f8:	ldr	r0, [sp, #80]	; 0x50
   152fc:	sub	r0, r0, #1
   15300:	cmp	r5, r0
   15304:	blt	152e4 <test_json@@Base+0x2a4>
   15308:	movw	r0, #5259	; 0x148b
   1530c:	movt	r0, #3
   15310:	mov	r1, #2
   15314:	mov	r2, #1
   15318:	bl	14e9c <fwrite@plt>
   1531c:	mvn	sl, #0
   15320:	b	150c8 <test_json@@Base+0x88>
   15324:	push	{r4, r5, fp, lr}
   15328:	add	fp, sp, #8
   1532c:	mov	r5, r1
   15330:	mov	r4, r0
   15334:	and	r0, r1, #1
   15338:	strb	r0, [r4, #26]
   1533c:	uxtb	r0, r1
   15340:	ubfx	r1, r0, #1, #1
   15344:	strb	r1, [r4, #27]
   15348:	ubfx	r1, r0, #2, #1
   1534c:	strb	r1, [r4, #28]
   15350:	ubfx	r0, r0, #3, #1
   15354:	strb	r0, [r4, #29]
   15358:	tst	r5, #16
   1535c:	movne	r0, r4
   15360:	blne	16638 <main@@Base+0x8b0>
   15364:	tst	r5, #32
   15368:	popeq	{r4, r5, fp, pc}
   1536c:	mov	r0, r4
   15370:	pop	{r4, r5, fp, lr}
   15374:	b	16644 <main@@Base+0x8bc>
   15378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1537c:	add	fp, sp, #28
   15380:	sub	sp, sp, #20
   15384:	mov	r4, r2
   15388:	mov	r5, r1
   1538c:	mov	r6, r0
   15390:	movw	r1, #16194	; 0x3f42
   15394:	movt	r1, #3
   15398:	movw	r2, #5440	; 0x1540
   1539c:	movt	r2, #3
   153a0:	mov	r0, r4
   153a4:	bl	14ed8 <fprintf@plt>
   153a8:	cmp	r5, #0
   153ac:	beq	15488 <test_json@@Base+0x448>
   153b0:	add	r7, sp, #3
   153b4:	movw	sl, #16213	; 0x3f55
   153b8:	movt	sl, #3
   153bc:	mov	r8, #0
   153c0:	ands	r9, r8, #15
   153c4:	beq	153e0 <test_json@@Base+0x3a0>
   153c8:	tst	r8, #7
   153cc:	bne	15410 <test_json@@Base+0x3d0>
   153d0:	mov	r0, #32
   153d4:	mov	r1, r4
   153d8:	bl	14f20 <fputc@plt>
   153dc:	b	15410 <test_json@@Base+0x3d0>
   153e0:	cmp	r8, #0
   153e4:	beq	153fc <test_json@@Base+0x3bc>
   153e8:	mov	r0, r4
   153ec:	movw	r1, #16199	; 0x3f47
   153f0:	movt	r1, #3
   153f4:	mov	r2, r7
   153f8:	bl	14ed8 <fprintf@plt>
   153fc:	mov	r0, r4
   15400:	movw	r1, #16205	; 0x3f4d
   15404:	movt	r1, #3
   15408:	mov	r2, r8
   1540c:	bl	14ed8 <fprintf@plt>
   15410:	ldrb	r2, [r6, r8]
   15414:	mov	r0, r4
   15418:	mov	r1, sl
   1541c:	bl	14ed8 <fprintf@plt>
   15420:	ldrb	r0, [r6, r8]
   15424:	sub	r1, r0, #32
   15428:	uxtb	r1, r1
   1542c:	cmp	r1, #94	; 0x5e
   15430:	movwhi	r0, #46	; 0x2e
   15434:	strb	r0, [r7, r9]
   15438:	add	r0, r7, r9
   1543c:	mov	r1, #0
   15440:	strb	r1, [r0, #1]
   15444:	add	r8, r8, #1
   15448:	cmp	r5, r8
   1544c:	bne	153c0 <test_json@@Base+0x380>
   15450:	tst	r5, #15
   15454:	beq	15488 <test_json@@Base+0x448>
   15458:	add	r6, r5, #1
   1545c:	movw	r5, #16219	; 0x3f5b
   15460:	movt	r5, #3
   15464:	mov	r0, r5
   15468:	mov	r1, #3
   1546c:	mov	r2, #1
   15470:	mov	r3, r4
   15474:	bl	14e9c <fwrite@plt>
   15478:	add	r0, r6, #1
   1547c:	tst	r6, #15
   15480:	mov	r6, r0
   15484:	bne	15464 <test_json@@Base+0x424>
   15488:	movw	r1, #16199	; 0x3f47
   1548c:	movt	r1, #3
   15490:	add	r2, sp, #3
   15494:	mov	r0, r4
   15498:	bl	14ed8 <fprintf@plt>
   1549c:	sub	sp, fp, #28
   154a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000154a4 <edge_case_tests@@Base>:
   154a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a8:	add	fp, sp, #28
   154ac:	sub	sp, sp, #28
   154b0:	mov	r0, #158	; 0x9e
   154b4:	mov	r9, #0
   154b8:	str	r9, [sp]
   154bc:	str	r9, [sp, #4]
   154c0:	str	r0, [sp, #8]
   154c4:	movw	r4, #17152	; 0x4300
   154c8:	movt	r4, #3
   154cc:	movw	r1, #5454	; 0x154e
   154d0:	movt	r1, #3
   154d4:	movw	r2, #5507	; 0x1583
   154d8:	movt	r2, #3
   154dc:	mov	r0, r4
   154e0:	mov	r3, #0
   154e4:	bl	15040 <test_json@@Base>
   154e8:	str	r0, [sp, #24]
   154ec:	mov	r0, #168	; 0xa8
   154f0:	mov	r7, #2
   154f4:	stm	sp, {r7, r9}
   154f8:	str	r0, [sp, #8]
   154fc:	movw	r5, #5537	; 0x15a1
   15500:	movt	r5, #3
   15504:	movw	sl, #5570	; 0x15c2
   15508:	movt	sl, #3
   1550c:	mov	r0, r4
   15510:	mov	r1, r5
   15514:	mov	r2, sl
   15518:	mov	r3, #0
   1551c:	bl	15040 <test_json@@Base>
   15520:	str	r0, [sp, #20]
   15524:	mov	r0, #172	; 0xac
   15528:	str	r9, [sp]
   1552c:	str	r7, [sp, #4]
   15530:	str	r0, [sp, #8]
   15534:	movw	r1, #5604	; 0x15e4
   15538:	movt	r1, #3
   1553c:	movw	r2, #5643	; 0x160b
   15540:	movt	r2, #3
   15544:	mov	r0, r4
   15548:	mov	r3, #0
   1554c:	bl	15040 <test_json@@Base>
   15550:	str	r0, [sp, #16]
   15554:	mov	r0, #176	; 0xb0
   15558:	mov	r1, #4
   1555c:	str	r7, [sp]
   15560:	str	r1, [sp, #4]
   15564:	str	r0, [sp, #8]
   15568:	movw	r2, #5672	; 0x1628
   1556c:	movt	r2, #3
   15570:	mov	r0, r4
   15574:	mov	r1, r5
   15578:	mov	r3, #0
   1557c:	bl	15040 <test_json@@Base>
   15580:	str	r0, [sp, #12]
   15584:	mov	r0, #180	; 0xb4
   15588:	mov	r1, #8
   1558c:	str	r9, [sp]
   15590:	str	r1, [sp, #4]
   15594:	str	r0, [sp, #8]
   15598:	movw	r1, #5691	; 0x163b
   1559c:	movt	r1, #3
   155a0:	movw	r2, #5725	; 0x165d
   155a4:	movt	r2, #3
   155a8:	mov	r0, r4
   155ac:	mov	r3, #0
   155b0:	bl	15040 <test_json@@Base>
   155b4:	mov	r6, r0
   155b8:	mov	r0, #195	; 0xc3
   155bc:	stm	sp, {r7, r9}
   155c0:	str	r0, [sp, #8]
   155c4:	movw	r1, #5999	; 0x176f
   155c8:	movt	r1, #3
   155cc:	mov	r0, r4
   155d0:	mov	r2, sl
   155d4:	mov	r3, #0
   155d8:	bl	15040 <test_json@@Base>
   155dc:	mov	r7, r0
   155e0:	mov	r0, #199	; 0xc7
   155e4:	mov	sl, #1
   155e8:	str	sl, [sp]
   155ec:	str	r9, [sp, #4]
   155f0:	str	r0, [sp, #8]
   155f4:	movw	r5, #6037	; 0x1795
   155f8:	movt	r5, #3
   155fc:	movw	r2, #6087	; 0x17c7
   15600:	movt	r2, #3
   15604:	mov	r0, r4
   15608:	mov	r1, r5
   1560c:	mov	r3, #0
   15610:	bl	15040 <test_json@@Base>
   15614:	mov	r8, r0
   15618:	mov	r0, #203	; 0xcb
   1561c:	str	sl, [sp]
   15620:	str	sl, [sp, #4]
   15624:	str	r0, [sp, #8]
   15628:	movw	r2, #6114	; 0x17e2
   1562c:	movt	r2, #3
   15630:	mov	r0, r4
   15634:	mov	r1, r5
   15638:	mov	r3, #0
   1563c:	bl	15040 <test_json@@Base>
   15640:	mov	r1, #209	; 0xd1
   15644:	str	sl, [sp]
   15648:	str	r9, [sp, #4]
   1564c:	str	r1, [sp, #8]
   15650:	ldr	r1, [sp, #24]
   15654:	ldr	r2, [sp, #20]
   15658:	orr	r1, r2, r1
   1565c:	ldr	r2, [sp, #16]
   15660:	orr	r1, r1, r2
   15664:	ldr	r2, [sp, #12]
   15668:	orr	r1, r1, r2
   1566c:	orr	r1, r1, r6
   15670:	orr	r1, r1, r7
   15674:	orr	r1, r1, r8
   15678:	orr	r5, r1, r0
   1567c:	movw	r1, #6137	; 0x17f9
   15680:	movt	r1, #3
   15684:	mov	r0, r4
   15688:	movw	r2, #6087	; 0x17c7
   1568c:	movt	r2, #3
   15690:	mov	r3, #0
   15694:	bl	15040 <test_json@@Base>
   15698:	orr	r0, r5, r0
   1569c:	sub	sp, fp, #28
   156a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000156a4 <error_case_tests@@Base>:
   156a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156a8:	add	fp, sp, #28
   156ac:	sub	sp, sp, #36	; 0x24
   156b0:	movw	r0, #285	; 0x11d
   156b4:	mov	r6, #0
   156b8:	str	r6, [sp]
   156bc:	str	r6, [sp, #4]
   156c0:	str	r0, [sp, #8]
   156c4:	movw	r4, #17152	; 0x4300
   156c8:	movt	r4, #3
   156cc:	movw	r1, #6250	; 0x186a
   156d0:	movt	r1, #3
   156d4:	mov	r0, r4
   156d8:	mov	r2, #0
   156dc:	mov	r3, #13
   156e0:	bl	15040 <test_json@@Base>
   156e4:	str	r0, [sp, #32]
   156e8:	movw	r0, #287	; 0x11f
   156ec:	str	r6, [sp]
   156f0:	str	r6, [sp, #4]
   156f4:	str	r0, [sp, #8]
   156f8:	movw	r1, #6276	; 0x1884
   156fc:	movt	r1, #3
   15700:	mov	r0, r4
   15704:	mov	r2, #0
   15708:	mov	r3, #13
   1570c:	bl	15040 <test_json@@Base>
   15710:	str	r0, [sp, #28]
   15714:	movw	r0, #289	; 0x121
   15718:	str	r6, [sp]
   1571c:	str	r6, [sp, #4]
   15720:	str	r0, [sp, #8]
   15724:	movw	r1, #6373	; 0x18e5
   15728:	movt	r1, #3
   1572c:	mov	r0, r4
   15730:	mov	r2, #0
   15734:	mov	r3, #13
   15738:	bl	15040 <test_json@@Base>
   1573c:	str	r0, [sp, #24]
   15740:	movw	r0, #291	; 0x123
   15744:	str	r6, [sp]
   15748:	str	r6, [sp, #4]
   1574c:	str	r0, [sp, #8]
   15750:	movw	r1, #6467	; 0x1943
   15754:	movt	r1, #3
   15758:	mov	r0, r4
   1575c:	mov	r2, #0
   15760:	mov	r3, #13
   15764:	bl	15040 <test_json@@Base>
   15768:	str	r0, [sp, #20]
   1576c:	movw	r0, #293	; 0x125
   15770:	str	r6, [sp]
   15774:	str	r6, [sp, #4]
   15778:	str	r0, [sp, #8]
   1577c:	movw	r1, #6555	; 0x199b
   15780:	movt	r1, #3
   15784:	mov	r0, r4
   15788:	mov	r2, #0
   1578c:	mov	r3, #13
   15790:	bl	15040 <test_json@@Base>
   15794:	str	r0, [sp, #16]
   15798:	mov	r0, #296	; 0x128
   1579c:	str	r6, [sp]
   157a0:	str	r6, [sp, #4]
   157a4:	str	r0, [sp, #8]
   157a8:	movw	r1, #6640	; 0x19f0
   157ac:	movt	r1, #3
   157b0:	mov	r0, r4
   157b4:	mov	r2, #0
   157b8:	mov	r3, #13
   157bc:	bl	15040 <test_json@@Base>
   157c0:	mov	r7, r0
   157c4:	movw	r0, #299	; 0x12b
   157c8:	str	r6, [sp]
   157cc:	str	r6, [sp, #4]
   157d0:	str	r0, [sp, #8]
   157d4:	movw	r1, #6798	; 0x1a8e
   157d8:	movt	r1, #3
   157dc:	mov	r0, r4
   157e0:	mov	r2, #0
   157e4:	mov	r3, #13
   157e8:	bl	15040 <test_json@@Base>
   157ec:	mov	r8, r0
   157f0:	movw	r0, #303	; 0x12f
   157f4:	str	r6, [sp]
   157f8:	str	r6, [sp, #4]
   157fc:	str	r0, [sp, #8]
   15800:	movw	r1, #6953	; 0x1b29
   15804:	movt	r1, #3
   15808:	mov	r0, r4
   1580c:	mov	r2, #0
   15810:	mov	r3, #13
   15814:	bl	15040 <test_json@@Base>
   15818:	mov	r9, r0
   1581c:	movw	r0, #307	; 0x133
   15820:	str	r6, [sp]
   15824:	str	r6, [sp, #4]
   15828:	str	r0, [sp, #8]
   1582c:	movw	r1, #7152	; 0x1bf0
   15830:	movt	r1, #3
   15834:	mov	r0, r4
   15838:	mov	r2, #0
   1583c:	mov	r3, #13
   15840:	bl	15040 <test_json@@Base>
   15844:	mov	sl, r0
   15848:	movw	r0, #311	; 0x137
   1584c:	str	r6, [sp]
   15850:	str	r6, [sp, #4]
   15854:	str	r0, [sp, #8]
   15858:	movw	r1, #7351	; 0x1cb7
   1585c:	movt	r1, #3
   15860:	mov	r0, r4
   15864:	mov	r2, #0
   15868:	mov	r3, #5
   1586c:	bl	15040 <test_json@@Base>
   15870:	mov	r5, r0
   15874:	movw	r0, #314	; 0x13a
   15878:	str	r6, [sp]
   1587c:	str	r6, [sp, #4]
   15880:	str	r0, [sp, #8]
   15884:	movw	r1, #7375	; 0x1ccf
   15888:	movt	r1, #3
   1588c:	mov	r0, r4
   15890:	mov	r2, #0
   15894:	mov	r3, #5
   15898:	bl	15040 <test_json@@Base>
   1589c:	movw	r1, #317	; 0x13d
   158a0:	str	r6, [sp]
   158a4:	str	r6, [sp, #4]
   158a8:	str	r1, [sp, #8]
   158ac:	ldr	r1, [sp, #32]
   158b0:	ldr	r2, [sp, #28]
   158b4:	orr	r1, r2, r1
   158b8:	ldr	r2, [sp, #24]
   158bc:	orr	r1, r1, r2
   158c0:	ldr	r2, [sp, #20]
   158c4:	orr	r1, r1, r2
   158c8:	ldr	r2, [sp, #16]
   158cc:	orr	r1, r1, r2
   158d0:	orr	r1, r1, r7
   158d4:	orr	r1, r1, r8
   158d8:	orr	r1, r1, r9
   158dc:	orr	r1, r1, sl
   158e0:	orr	r1, r1, r5
   158e4:	orr	r5, r1, r0
   158e8:	movw	r1, #7413	; 0x1cf5
   158ec:	movt	r1, #3
   158f0:	mov	r0, r4
   158f4:	mov	r2, #0
   158f8:	mov	r3, #5
   158fc:	bl	15040 <test_json@@Base>
   15900:	orr	r0, r5, r0
   15904:	sub	sp, fp, #28
   15908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001590c <base64_tests@@Base>:
   1590c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15910:	add	fp, sp, #28
   15914:	sub	sp, sp, #20
   15918:	movw	r0, #369	; 0x171
   1591c:	mov	r8, #0
   15920:	str	r8, [sp]
   15924:	str	r8, [sp, #4]
   15928:	str	r0, [sp, #8]
   1592c:	movw	r4, #17152	; 0x4300
   15930:	movt	r4, #3
   15934:	movw	r1, #7469	; 0x1d2d
   15938:	movt	r1, #3
   1593c:	movw	r2, #5672	; 0x1628
   15940:	movt	r2, #3
   15944:	mov	r0, r4
   15948:	mov	r3, #0
   1594c:	bl	15040 <test_json@@Base>
   15950:	str	r0, [sp, #16]
   15954:	mov	r0, #372	; 0x174
   15958:	str	r8, [sp]
   1595c:	str	r8, [sp, #4]
   15960:	str	r0, [sp, #8]
   15964:	movw	r1, #7491	; 0x1d43
   15968:	movt	r1, #3
   1596c:	movw	r2, #7530	; 0x1d6a
   15970:	movt	r2, #3
   15974:	mov	r0, r4
   15978:	mov	r3, #0
   1597c:	bl	15040 <test_json@@Base>
   15980:	mov	r9, r0
   15984:	mov	r0, #376	; 0x178
   15988:	str	r8, [sp]
   1598c:	str	r8, [sp, #4]
   15990:	str	r0, [sp, #8]
   15994:	movw	r1, #7565	; 0x1d8d
   15998:	movt	r1, #3
   1599c:	movw	r6, #7750	; 0x1e46
   159a0:	movt	r6, #3
   159a4:	mov	r0, r4
   159a8:	mov	r2, r6
   159ac:	mov	r3, #0
   159b0:	bl	15040 <test_json@@Base>
   159b4:	mov	sl, r0
   159b8:	movw	r0, #379	; 0x17b
   159bc:	str	r8, [sp]
   159c0:	str	r8, [sp, #4]
   159c4:	str	r0, [sp, #8]
   159c8:	movw	r1, #7930	; 0x1efa
   159cc:	movt	r1, #3
   159d0:	movw	r7, #8118	; 0x1fb6
   159d4:	movt	r7, #3
   159d8:	mov	r0, r4
   159dc:	mov	r2, r7
   159e0:	mov	r3, #0
   159e4:	bl	15040 <test_json@@Base>
   159e8:	mov	r5, r0
   159ec:	movw	r0, #382	; 0x17e
   159f0:	str	r8, [sp]
   159f4:	str	r8, [sp, #4]
   159f8:	str	r0, [sp, #8]
   159fc:	movw	r1, #8301	; 0x206d
   15a00:	movt	r1, #3
   15a04:	mov	r0, r4
   15a08:	mov	r2, r6
   15a0c:	mov	r3, #0
   15a10:	bl	15040 <test_json@@Base>
   15a14:	mov	r6, r0
   15a18:	movw	r0, #385	; 0x181
   15a1c:	str	r8, [sp]
   15a20:	str	r8, [sp, #4]
   15a24:	str	r0, [sp, #8]
   15a28:	movw	r1, #8484	; 0x2124
   15a2c:	movt	r1, #3
   15a30:	mov	r0, r4
   15a34:	mov	r2, r7
   15a38:	mov	r3, #0
   15a3c:	bl	15040 <test_json@@Base>
   15a40:	mov	r7, r0
   15a44:	mov	r0, #388	; 0x184
   15a48:	str	r8, [sp]
   15a4c:	str	r8, [sp, #4]
   15a50:	str	r0, [sp, #8]
   15a54:	movw	r1, #8670	; 0x21de
   15a58:	movt	r1, #3
   15a5c:	mov	r0, r4
   15a60:	mov	r2, #0
   15a64:	mov	r3, #31
   15a68:	bl	15040 <test_json@@Base>
   15a6c:	movw	r1, #391	; 0x187
   15a70:	str	r8, [sp]
   15a74:	str	r8, [sp, #4]
   15a78:	str	r1, [sp, #8]
   15a7c:	ldr	r1, [sp, #16]
   15a80:	orr	r1, r9, r1
   15a84:	orr	r1, r1, sl
   15a88:	orr	r1, r1, r5
   15a8c:	orr	r1, r1, r6
   15a90:	orr	r1, r1, r7
   15a94:	orr	r5, r1, r0
   15a98:	movw	r1, #8855	; 0x2297
   15a9c:	movt	r1, #3
   15aa0:	mov	r0, r4
   15aa4:	mov	r2, #0
   15aa8:	mov	r3, #32
   15aac:	bl	15040 <test_json@@Base>
   15ab0:	orr	r0, r5, r0
   15ab4:	sub	sp, fp, #28
   15ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015abc <mixed_type_union_tests@@Base>:
   15abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ac0:	add	fp, sp, #28
   15ac4:	sub	sp, sp, #20
   15ac8:	mov	r0, #432	; 0x1b0
   15acc:	mov	r8, #0
   15ad0:	str	r8, [sp]
   15ad4:	str	r8, [sp, #4]
   15ad8:	str	r0, [sp, #8]
   15adc:	movw	r4, #17168	; 0x4310
   15ae0:	movt	r4, #3
   15ae4:	movw	r1, #9043	; 0x2353
   15ae8:	movt	r1, #3
   15aec:	movw	r2, #9122	; 0x23a2
   15af0:	movt	r2, #3
   15af4:	mov	r0, r4
   15af8:	mov	r3, #0
   15afc:	bl	15040 <test_json@@Base>
   15b00:	str	r0, [sp, #16]
   15b04:	movw	r0, #437	; 0x1b5
   15b08:	str	r8, [sp]
   15b0c:	str	r8, [sp, #4]
   15b10:	str	r0, [sp, #8]
   15b14:	movw	r1, #9193	; 0x23e9
   15b18:	movt	r1, #3
   15b1c:	movw	r9, #9324	; 0x246c
   15b20:	movt	r9, #3
   15b24:	mov	r0, r4
   15b28:	mov	r2, r9
   15b2c:	mov	r3, #0
   15b30:	bl	15040 <test_json@@Base>
   15b34:	mov	sl, r0
   15b38:	movw	r0, #442	; 0x1ba
   15b3c:	str	r8, [sp]
   15b40:	str	r8, [sp, #4]
   15b44:	str	r0, [sp, #8]
   15b48:	movw	r1, #9443	; 0x24e3
   15b4c:	movt	r1, #3
   15b50:	mov	r0, r4
   15b54:	mov	r2, r9
   15b58:	mov	r3, #0
   15b5c:	bl	15040 <test_json@@Base>
   15b60:	mov	r5, r0
   15b64:	movw	r0, #449	; 0x1c1
   15b68:	str	r8, [sp]
   15b6c:	str	r8, [sp, #4]
   15b70:	str	r0, [sp, #8]
   15b74:	movw	r1, #9593	; 0x2579
   15b78:	movt	r1, #3
   15b7c:	movw	r2, #9814	; 0x2656
   15b80:	movt	r2, #3
   15b84:	mov	r0, r4
   15b88:	mov	r3, #0
   15b8c:	bl	15040 <test_json@@Base>
   15b90:	mov	r6, r0
   15b94:	movw	r0, #458	; 0x1ca
   15b98:	str	r8, [sp]
   15b9c:	str	r8, [sp, #4]
   15ba0:	str	r0, [sp, #8]
   15ba4:	movw	r1, #9999	; 0x270f
   15ba8:	movt	r1, #3
   15bac:	movw	r2, #10261	; 0x2815
   15bb0:	movt	r2, #3
   15bb4:	mov	r0, r4
   15bb8:	mov	r3, #0
   15bbc:	bl	15040 <test_json@@Base>
   15bc0:	mov	r7, r0
   15bc4:	movw	r0, #469	; 0x1d5
   15bc8:	str	r8, [sp]
   15bcc:	str	r8, [sp, #4]
   15bd0:	str	r0, [sp, #8]
   15bd4:	movw	r1, #10483	; 0x28f3
   15bd8:	movt	r1, #3
   15bdc:	movw	r2, #10868	; 0x2a74
   15be0:	movt	r2, #3
   15be4:	mov	r0, r4
   15be8:	mov	r3, #0
   15bec:	bl	15040 <test_json@@Base>
   15bf0:	movw	r1, #474	; 0x1da
   15bf4:	str	r8, [sp]
   15bf8:	str	r8, [sp, #4]
   15bfc:	str	r1, [sp, #8]
   15c00:	ldr	r1, [sp, #16]
   15c04:	orr	r1, sl, r1
   15c08:	orr	r1, r1, r5
   15c0c:	orr	r1, r1, r6
   15c10:	orr	r1, r1, r7
   15c14:	orr	r5, r1, r0
   15c18:	movw	r1, #11194	; 0x2bba
   15c1c:	movt	r1, #3
   15c20:	mov	r0, r4
   15c24:	mov	r2, r9
   15c28:	mov	r3, #0
   15c2c:	bl	15040 <test_json@@Base>
   15c30:	orr	r0, r5, r0
   15c34:	sub	sp, fp, #28
   15c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015c3c <union_vector_tests@@Base>:
   15c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c40:	add	fp, sp, #28
   15c44:	sub	sp, sp, #12
   15c48:	movw	r0, #485	; 0x1e5
   15c4c:	mov	r7, #0
   15c50:	str	r7, [sp]
   15c54:	str	r7, [sp, #4]
   15c58:	str	r0, [sp, #8]
   15c5c:	movw	r4, #17184	; 0x4320
   15c60:	movt	r4, #3
   15c64:	movw	r1, #11335	; 0x2c47
   15c68:	movt	r1, #3
   15c6c:	movw	r8, #11399	; 0x2c87
   15c70:	movt	r8, #3
   15c74:	mov	r0, r4
   15c78:	mov	r2, r8
   15c7c:	mov	r3, #0
   15c80:	bl	15040 <test_json@@Base>
   15c84:	mov	r9, r0
   15c88:	mov	r0, #488	; 0x1e8
   15c8c:	str	r7, [sp]
   15c90:	str	r7, [sp, #4]
   15c94:	str	r0, [sp, #8]
   15c98:	movw	r1, #11455	; 0x2cbf
   15c9c:	movt	r1, #3
   15ca0:	movw	r2, #11506	; 0x2cf2
   15ca4:	movt	r2, #3
   15ca8:	mov	r0, r4
   15cac:	mov	r3, #0
   15cb0:	bl	15040 <test_json@@Base>
   15cb4:	mov	sl, r0
   15cb8:	movw	r0, #491	; 0x1eb
   15cbc:	str	r7, [sp]
   15cc0:	str	r7, [sp, #4]
   15cc4:	str	r0, [sp, #8]
   15cc8:	movw	r1, #11549	; 0x2d1d
   15ccc:	movt	r1, #3
   15cd0:	movw	r2, #11626	; 0x2d6a
   15cd4:	movt	r2, #3
   15cd8:	mov	r0, r4
   15cdc:	mov	r3, #0
   15ce0:	bl	15040 <test_json@@Base>
   15ce4:	mov	r6, r0
   15ce8:	movw	r0, #494	; 0x1ee
   15cec:	str	r7, [sp]
   15cf0:	str	r7, [sp, #4]
   15cf4:	str	r0, [sp, #8]
   15cf8:	movw	r1, #11694	; 0x2dae
   15cfc:	movt	r1, #3
   15d00:	movw	r2, #11819	; 0x2e2b
   15d04:	movt	r2, #3
   15d08:	mov	r0, r4
   15d0c:	mov	r3, #0
   15d10:	bl	15040 <test_json@@Base>
   15d14:	mov	r5, r0
   15d18:	movw	r0, #497	; 0x1f1
   15d1c:	str	r7, [sp]
   15d20:	str	r7, [sp, #4]
   15d24:	str	r0, [sp, #8]
   15d28:	movw	r1, #11927	; 0x2e97
   15d2c:	movt	r1, #3
   15d30:	mov	r0, r4
   15d34:	mov	r2, r8
   15d38:	mov	r3, #0
   15d3c:	bl	15040 <test_json@@Base>
   15d40:	mov	r1, #500	; 0x1f4
   15d44:	str	r7, [sp]
   15d48:	str	r7, [sp, #4]
   15d4c:	str	r1, [sp, #8]
   15d50:	orr	r1, sl, r9
   15d54:	orr	r1, r1, r6
   15d58:	orr	r1, r1, r5
   15d5c:	orr	r5, r1, r0
   15d60:	movw	r1, #11990	; 0x2ed6
   15d64:	movt	r1, #3
   15d68:	movw	r2, #12092	; 0x2f3c
   15d6c:	movt	r2, #3
   15d70:	mov	r0, r4
   15d74:	mov	r3, #0
   15d78:	bl	15040 <test_json@@Base>
   15d7c:	orr	r0, r5, r0
   15d80:	sub	sp, fp, #28
   15d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015d88 <main@@Base>:
   15d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d8c:	add	fp, sp, #28
   15d90:	sub	sp, sp, #164	; 0xa4
   15d94:	bl	154a4 <edge_case_tests@@Base>
   15d98:	str	r0, [fp, #-32]	; 0xffffffe0
   15d9c:	bl	156a4 <error_case_tests@@Base>
   15da0:	str	r0, [fp, #-36]	; 0xffffffdc
   15da4:	bl	15c3c <union_vector_tests@@Base>
   15da8:	str	r0, [fp, #-40]	; 0xffffffd8
   15dac:	bl	1590c <base64_tests@@Base>
   15db0:	str	r0, [fp, #-44]	; 0xffffffd4
   15db4:	bl	15abc <mixed_type_union_tests@@Base>
   15db8:	str	r0, [fp, #-48]	; 0xffffffd0
   15dbc:	movw	r0, #525	; 0x20d
   15dc0:	mov	r8, #0
   15dc4:	str	r8, [sp]
   15dc8:	str	r8, [sp, #4]
   15dcc:	str	r0, [sp, #8]
   15dd0:	movw	r4, #17152	; 0x4300
   15dd4:	movt	r4, #3
   15dd8:	movw	r1, #12184	; 0x2f98
   15ddc:	movt	r1, #3
   15de0:	movw	r9, #5672	; 0x1628
   15de4:	movt	r9, #3
   15de8:	mov	r0, r4
   15dec:	mov	r2, r9
   15df0:	mov	r3, #0
   15df4:	bl	15040 <test_json@@Base>
   15df8:	str	r0, [fp, #-52]	; 0xffffffcc
   15dfc:	mov	r0, #528	; 0x210
   15e00:	str	r8, [sp]
   15e04:	str	r8, [sp, #4]
   15e08:	str	r0, [sp, #8]
   15e0c:	movw	r1, #12207	; 0x2faf
   15e10:	movt	r1, #3
   15e14:	movw	r5, #12246	; 0x2fd6
   15e18:	movt	r5, #3
   15e1c:	mov	r0, r4
   15e20:	mov	r2, r5
   15e24:	mov	r3, #0
   15e28:	bl	15040 <test_json@@Base>
   15e2c:	str	r0, [fp, #-56]	; 0xffffffc8
   15e30:	movw	r0, #531	; 0x213
   15e34:	str	r8, [sp]
   15e38:	str	r8, [sp, #4]
   15e3c:	str	r0, [sp, #8]
   15e40:	movw	r1, #12279	; 0x2ff7
   15e44:	movt	r1, #3
   15e48:	movw	r7, #12319	; 0x301f
   15e4c:	movt	r7, #3
   15e50:	mov	r0, r4
   15e54:	mov	r2, r7
   15e58:	mov	r3, #0
   15e5c:	bl	15040 <test_json@@Base>
   15e60:	str	r0, [fp, #-60]	; 0xffffffc4
   15e64:	movw	r0, #534	; 0x216
   15e68:	str	r8, [sp]
   15e6c:	str	r8, [sp, #4]
   15e70:	str	r0, [sp, #8]
   15e74:	movw	r1, #12354	; 0x3042
   15e78:	movt	r1, #3
   15e7c:	movw	r6, #12403	; 0x3073
   15e80:	movt	r6, #3
   15e84:	mov	r0, r4
   15e88:	mov	r2, r6
   15e8c:	mov	r3, #0
   15e90:	bl	15040 <test_json@@Base>
   15e94:	str	r0, [fp, #-64]	; 0xffffffc0
   15e98:	movw	r0, #537	; 0x219
   15e9c:	str	r8, [sp]
   15ea0:	str	r8, [sp, #4]
   15ea4:	str	r0, [sp, #8]
   15ea8:	movw	r1, #12447	; 0x309f
   15eac:	movt	r1, #3
   15eb0:	mov	r0, r4
   15eb4:	mov	r2, r6
   15eb8:	mov	r3, #0
   15ebc:	bl	15040 <test_json@@Base>
   15ec0:	str	r0, [fp, #-68]	; 0xffffffbc
   15ec4:	mov	r0, #540	; 0x21c
   15ec8:	str	r8, [sp]
   15ecc:	str	r8, [sp, #4]
   15ed0:	str	r0, [sp, #8]
   15ed4:	movw	r1, #12505	; 0x30d9
   15ed8:	movt	r1, #3
   15edc:	mov	r0, r4
   15ee0:	mov	r2, r5
   15ee4:	mov	r3, #0
   15ee8:	bl	15040 <test_json@@Base>
   15eec:	str	r0, [fp, #-72]	; 0xffffffb8
   15ef0:	movw	r0, #543	; 0x21f
   15ef4:	str	r8, [sp]
   15ef8:	str	r8, [sp, #4]
   15efc:	str	r0, [sp, #8]
   15f00:	movw	r1, #12543	; 0x30ff
   15f04:	movt	r1, #3
   15f08:	mov	r0, r4
   15f0c:	mov	r2, r7
   15f10:	mov	r3, #0
   15f14:	bl	15040 <test_json@@Base>
   15f18:	str	r0, [fp, #-76]	; 0xffffffb4
   15f1c:	movw	r0, #547	; 0x223
   15f20:	str	r8, [sp]
   15f24:	str	r8, [sp, #4]
   15f28:	str	r0, [sp, #8]
   15f2c:	movw	r1, #12584	; 0x3128
   15f30:	movt	r1, #3
   15f34:	mov	r0, r4
   15f38:	mov	r2, r9
   15f3c:	mov	r3, #0
   15f40:	bl	15040 <test_json@@Base>
   15f44:	str	r0, [fp, #-80]	; 0xffffffb0
   15f48:	movw	r0, #551	; 0x227
   15f4c:	str	r8, [sp]
   15f50:	str	r8, [sp, #4]
   15f54:	str	r0, [sp, #8]
   15f58:	movw	r1, #5537	; 0x15a1
   15f5c:	movt	r1, #3
   15f60:	mov	r0, r4
   15f64:	mov	r2, r9
   15f68:	mov	r3, #0
   15f6c:	bl	15040 <test_json@@Base>
   15f70:	str	r0, [fp, #-84]	; 0xffffffac
   15f74:	movw	r0, #601	; 0x259
   15f78:	str	r8, [sp]
   15f7c:	str	r8, [sp, #4]
   15f80:	str	r0, [sp, #8]
   15f84:	movw	r1, #12623	; 0x314f
   15f88:	movt	r1, #3
   15f8c:	mov	r0, r4
   15f90:	mov	r2, r5
   15f94:	mov	r3, #0
   15f98:	bl	15040 <test_json@@Base>
   15f9c:	str	r0, [fp, #-88]	; 0xffffffa8
   15fa0:	mov	r0, #604	; 0x25c
   15fa4:	str	r8, [sp]
   15fa8:	str	r8, [sp, #4]
   15fac:	str	r0, [sp, #8]
   15fb0:	movw	r1, #12656	; 0x3170
   15fb4:	movt	r1, #3
   15fb8:	mov	r0, r4
   15fbc:	mov	r2, r7
   15fc0:	mov	r3, #0
   15fc4:	bl	15040 <test_json@@Base>
   15fc8:	str	r0, [fp, #-92]	; 0xffffffa4
   15fcc:	movw	r0, #607	; 0x25f
   15fd0:	str	r8, [sp]
   15fd4:	str	r8, [sp, #4]
   15fd8:	str	r0, [sp, #8]
   15fdc:	movw	r1, #12689	; 0x3191
   15fe0:	movt	r1, #3
   15fe4:	movw	r2, #12722	; 0x31b2
   15fe8:	movt	r2, #3
   15fec:	mov	r0, r4
   15ff0:	mov	r3, #0
   15ff4:	bl	15040 <test_json@@Base>
   15ff8:	str	r0, [sp, #96]	; 0x60
   15ffc:	movw	r0, #610	; 0x262
   16000:	str	r8, [sp]
   16004:	str	r8, [sp, #4]
   16008:	str	r0, [sp, #8]
   1600c:	movw	r1, #12760	; 0x31d8
   16010:	movt	r1, #3
   16014:	mov	r0, r4
   16018:	mov	r2, r6
   1601c:	mov	r3, #0
   16020:	bl	15040 <test_json@@Base>
   16024:	str	r0, [sp, #92]	; 0x5c
   16028:	movw	r0, #613	; 0x265
   1602c:	str	r8, [sp]
   16030:	str	r8, [sp, #4]
   16034:	str	r0, [sp, #8]
   16038:	movw	r1, #12794	; 0x31fa
   1603c:	movt	r1, #3
   16040:	movw	r2, #12828	; 0x321c
   16044:	movt	r2, #3
   16048:	mov	r0, r4
   1604c:	mov	r3, #0
   16050:	bl	15040 <test_json@@Base>
   16054:	str	r0, [sp, #88]	; 0x58
   16058:	mov	r0, #616	; 0x268
   1605c:	str	r8, [sp]
   16060:	str	r8, [sp, #4]
   16064:	str	r0, [sp, #8]
   16068:	movw	r1, #12858	; 0x323a
   1606c:	movt	r1, #3
   16070:	movw	r2, #12892	; 0x325c
   16074:	movt	r2, #3
   16078:	mov	r0, r4
   1607c:	mov	r3, #0
   16080:	bl	15040 <test_json@@Base>
   16084:	str	r0, [sp, #84]	; 0x54
   16088:	movw	r0, #619	; 0x26b
   1608c:	str	r8, [sp]
   16090:	str	r8, [sp, #4]
   16094:	str	r0, [sp, #8]
   16098:	movw	r1, #12922	; 0x327a
   1609c:	movt	r1, #3
   160a0:	movw	r2, #12955	; 0x329b
   160a4:	movt	r2, #3
   160a8:	mov	r0, r4
   160ac:	mov	r3, #0
   160b0:	bl	15040 <test_json@@Base>
   160b4:	str	r0, [sp, #80]	; 0x50
   160b8:	movw	r0, #622	; 0x26e
   160bc:	str	r8, [sp]
   160c0:	str	r8, [sp, #4]
   160c4:	str	r0, [sp, #8]
   160c8:	movw	r1, #12984	; 0x32b8
   160cc:	movt	r1, #3
   160d0:	mov	r0, r4
   160d4:	mov	r2, r5
   160d8:	mov	r3, #0
   160dc:	bl	15040 <test_json@@Base>
   160e0:	str	r0, [sp, #76]	; 0x4c
   160e4:	movw	r0, #625	; 0x271
   160e8:	str	r8, [sp]
   160ec:	str	r8, [sp, #4]
   160f0:	str	r0, [sp, #8]
   160f4:	movw	r1, #13027	; 0x32e3
   160f8:	movt	r1, #3
   160fc:	mov	r0, r4
   16100:	mov	r2, r5
   16104:	mov	r3, #0
   16108:	bl	15040 <test_json@@Base>
   1610c:	str	r0, [sp, #72]	; 0x48
   16110:	mov	r0, #628	; 0x274
   16114:	str	r8, [sp]
   16118:	str	r8, [sp, #4]
   1611c:	str	r0, [sp, #8]
   16120:	movw	r5, #13085	; 0x331d
   16124:	movt	r5, #3
   16128:	movw	r6, #13127	; 0x3347
   1612c:	movt	r6, #3
   16130:	mov	r0, r4
   16134:	mov	r1, r5
   16138:	mov	r2, r6
   1613c:	mov	r3, #0
   16140:	bl	15040 <test_json@@Base>
   16144:	str	r0, [sp, #68]	; 0x44
   16148:	movw	r0, #631	; 0x277
   1614c:	str	r8, [sp]
   16150:	str	r8, [sp, #4]
   16154:	str	r0, [sp, #8]
   16158:	mov	r0, r4
   1615c:	mov	r1, r5
   16160:	mov	r2, r6
   16164:	mov	r3, #0
   16168:	bl	15040 <test_json@@Base>
   1616c:	str	r0, [sp, #64]	; 0x40
   16170:	movw	r0, #634	; 0x27a
   16174:	str	r8, [sp]
   16178:	str	r8, [sp, #4]
   1617c:	str	r0, [sp, #8]
   16180:	movw	r1, #13153	; 0x3361
   16184:	movt	r1, #3
   16188:	movw	r2, #13234	; 0x33b2
   1618c:	movt	r2, #3
   16190:	mov	r0, r4
   16194:	mov	r3, #0
   16198:	bl	15040 <test_json@@Base>
   1619c:	str	r0, [sp, #60]	; 0x3c
   161a0:	movw	r0, #638	; 0x27e
   161a4:	str	r8, [sp]
   161a8:	str	r8, [sp, #4]
   161ac:	str	r0, [sp, #8]
   161b0:	movw	r1, #13305	; 0x33f9
   161b4:	movt	r1, #3
   161b8:	movw	r2, #13390	; 0x344e
   161bc:	movt	r2, #3
   161c0:	mov	r0, r4
   161c4:	mov	r3, #0
   161c8:	bl	15040 <test_json@@Base>
   161cc:	str	r0, [sp, #56]	; 0x38
   161d0:	movw	r0, #642	; 0x282
   161d4:	str	r8, [sp]
   161d8:	str	r8, [sp, #4]
   161dc:	str	r0, [sp, #8]
   161e0:	movw	r1, #13464	; 0x3498
   161e4:	movt	r1, #3
   161e8:	movw	r2, #13575	; 0x3507
   161ec:	movt	r2, #3
   161f0:	mov	r0, r4
   161f4:	mov	r3, #0
   161f8:	bl	15040 <test_json@@Base>
   161fc:	str	r0, [sp, #52]	; 0x34
   16200:	movw	r0, #646	; 0x286
   16204:	str	r8, [sp]
   16208:	str	r8, [sp, #4]
   1620c:	str	r0, [sp, #8]
   16210:	movw	r1, #13673	; 0x3569
   16214:	movt	r1, #3
   16218:	mov	r0, r4
   1621c:	mov	r2, r9
   16220:	mov	r3, #0
   16224:	bl	15040 <test_json@@Base>
   16228:	str	r0, [sp, #48]	; 0x30
   1622c:	movw	r0, #649	; 0x289
   16230:	str	r8, [sp]
   16234:	str	r8, [sp, #4]
   16238:	str	r0, [sp, #8]
   1623c:	movw	r1, #13716	; 0x3594
   16240:	movt	r1, #3
   16244:	mov	r0, r4
   16248:	mov	r2, r9
   1624c:	mov	r3, #0
   16250:	bl	15040 <test_json@@Base>
   16254:	str	r0, [sp, #44]	; 0x2c
   16258:	mov	r0, #716	; 0x2cc
   1625c:	str	r8, [sp]
   16260:	str	r8, [sp, #4]
   16264:	str	r0, [sp, #8]
   16268:	movw	r1, #13754	; 0x35ba
   1626c:	movt	r1, #3
   16270:	movw	r2, #13863	; 0x3627
   16274:	movt	r2, #3
   16278:	mov	r0, r4
   1627c:	mov	r3, #0
   16280:	bl	15040 <test_json@@Base>
   16284:	str	r0, [sp, #40]	; 0x28
   16288:	movw	r0, #731	; 0x2db
   1628c:	str	r8, [sp]
   16290:	str	r8, [sp, #4]
   16294:	str	r0, [sp, #8]
   16298:	movw	r1, #13957	; 0x3685
   1629c:	movt	r1, #3
   162a0:	movw	r2, #14018	; 0x36c2
   162a4:	movt	r2, #3
   162a8:	mov	r0, r4
   162ac:	mov	r3, #0
   162b0:	bl	15040 <test_json@@Base>
   162b4:	str	r0, [sp, #36]	; 0x24
   162b8:	movw	r0, #734	; 0x2de
   162bc:	str	r8, [sp]
   162c0:	str	r8, [sp, #4]
   162c4:	str	r0, [sp, #8]
   162c8:	movw	r1, #14066	; 0x36f2
   162cc:	movt	r1, #3
   162d0:	movw	r2, #14092	; 0x370c
   162d4:	movt	r2, #3
   162d8:	mov	r0, r4
   162dc:	mov	r3, #0
   162e0:	bl	15040 <test_json@@Base>
   162e4:	str	r0, [sp, #32]
   162e8:	movw	r0, #738	; 0x2e2
   162ec:	str	r8, [sp]
   162f0:	str	r8, [sp, #4]
   162f4:	str	r0, [sp, #8]
   162f8:	movw	r1, #14110	; 0x371e
   162fc:	movt	r1, #3
   16300:	movw	r5, #14182	; 0x3766
   16304:	movt	r5, #3
   16308:	mov	r0, r4
   1630c:	mov	r2, r5
   16310:	mov	r3, #0
   16314:	bl	15040 <test_json@@Base>
   16318:	str	r0, [sp, #28]
   1631c:	movw	r0, #750	; 0x2ee
   16320:	str	r8, [sp]
   16324:	str	r8, [sp, #4]
   16328:	str	r0, [sp, #8]
   1632c:	movw	r1, #14247	; 0x37a7
   16330:	movt	r1, #3
   16334:	mov	r0, r4
   16338:	mov	r2, r5
   1633c:	mov	r3, #0
   16340:	bl	15040 <test_json@@Base>
   16344:	str	r0, [sp, #24]
   16348:	movw	r0, #766	; 0x2fe
   1634c:	str	r8, [sp]
   16350:	str	r8, [sp, #4]
   16354:	str	r0, [sp, #8]
   16358:	movw	r1, #14404	; 0x3844
   1635c:	movt	r1, #3
   16360:	movw	r2, #14443	; 0x386b
   16364:	movt	r2, #3
   16368:	mov	r0, r4
   1636c:	mov	r3, #0
   16370:	bl	15040 <test_json@@Base>
   16374:	str	r0, [sp, #20]
   16378:	movw	r0, #770	; 0x302
   1637c:	str	r8, [sp]
   16380:	str	r8, [sp, #4]
   16384:	str	r0, [sp, #8]
   16388:	movw	r1, #14477	; 0x388d
   1638c:	movt	r1, #3
   16390:	movw	r2, #14524	; 0x38bc
   16394:	movt	r2, #3
   16398:	mov	r0, r4
   1639c:	mov	r3, #0
   163a0:	bl	15040 <test_json@@Base>
   163a4:	str	r0, [sp, #16]
   163a8:	mov	r0, #776	; 0x308
   163ac:	str	r8, [sp]
   163b0:	str	r8, [sp, #4]
   163b4:	str	r0, [sp, #8]
   163b8:	movw	r1, #14566	; 0x38e6
   163bc:	movt	r1, #3
   163c0:	movw	r2, #14689	; 0x3961
   163c4:	movt	r2, #3
   163c8:	mov	r0, r4
   163cc:	mov	r3, #0
   163d0:	bl	15040 <test_json@@Base>
   163d4:	mov	r7, r0
   163d8:	movw	r0, #781	; 0x30d
   163dc:	str	r8, [sp]
   163e0:	str	r8, [sp, #4]
   163e4:	str	r0, [sp, #8]
   163e8:	movw	r1, #14801	; 0x39d1
   163ec:	movt	r1, #3
   163f0:	mov	r0, r4
   163f4:	mov	r2, r9
   163f8:	mov	r3, #0
   163fc:	bl	15040 <test_json@@Base>
   16400:	mov	r6, r0
   16404:	movw	r0, #786	; 0x312
   16408:	str	r8, [sp]
   1640c:	str	r8, [sp, #4]
   16410:	str	r0, [sp, #8]
   16414:	movw	r1, #14921	; 0x3a49
   16418:	movt	r1, #3
   1641c:	movw	r2, #15043	; 0x3ac3
   16420:	movt	r2, #3
   16424:	mov	r0, r4
   16428:	mov	r3, #0
   1642c:	bl	15040 <test_json@@Base>
   16430:	mov	r9, r0
   16434:	movw	r0, #791	; 0x317
   16438:	str	r8, [sp]
   1643c:	str	r8, [sp, #4]
   16440:	str	r0, [sp, #8]
   16444:	movw	r1, #15154	; 0x3b32
   16448:	movt	r1, #3
   1644c:	movw	r2, #15293	; 0x3bbd
   16450:	movt	r2, #3
   16454:	mov	r0, r4
   16458:	mov	r3, #0
   1645c:	bl	15040 <test_json@@Base>
   16460:	mov	sl, r0
   16464:	mov	r0, #796	; 0x31c
   16468:	str	r8, [sp]
   1646c:	str	r8, [sp, #4]
   16470:	str	r0, [sp, #8]
   16474:	movw	r1, #15419	; 0x3c3b
   16478:	movt	r1, #3
   1647c:	movw	r2, #15542	; 0x3cb6
   16480:	movt	r2, #3
   16484:	mov	r0, r4
   16488:	mov	r3, #0
   1648c:	bl	15040 <test_json@@Base>
   16490:	mov	r5, r0
   16494:	movw	r0, #801	; 0x321
   16498:	str	r8, [sp]
   1649c:	str	r8, [sp, #4]
   164a0:	str	r0, [sp, #8]
   164a4:	movw	r1, #15654	; 0x3d26
   164a8:	movt	r1, #3
   164ac:	movw	r2, #15792	; 0x3db0
   164b0:	movt	r2, #3
   164b4:	mov	r0, r4
   164b8:	mov	r3, #0
   164bc:	bl	15040 <test_json@@Base>
   164c0:	movw	r1, #806	; 0x326
   164c4:	str	r8, [sp]
   164c8:	str	r8, [sp, #4]
   164cc:	str	r1, [sp, #8]
   164d0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   164d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   164d8:	orr	r1, r2, r1
   164dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   164e0:	orr	r1, r1, r2
   164e4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   164e8:	orr	r1, r1, r2
   164ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   164f0:	orr	r1, r1, r2
   164f4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   164f8:	orr	r1, r1, r2
   164fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16500:	orr	r1, r1, r2
   16504:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16508:	orr	r1, r1, r2
   1650c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16510:	orr	r1, r1, r2
   16514:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16518:	orr	r1, r1, r2
   1651c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16520:	orr	r1, r1, r2
   16524:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16528:	orr	r1, r1, r2
   1652c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16530:	orr	r1, r1, r2
   16534:	ldr	r2, [fp, #-84]	; 0xffffffac
   16538:	orr	r1, r1, r2
   1653c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16540:	orr	r1, r1, r2
   16544:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16548:	orr	r1, r1, r2
   1654c:	ldr	r2, [sp, #96]	; 0x60
   16550:	orr	r1, r1, r2
   16554:	ldr	r2, [sp, #92]	; 0x5c
   16558:	orr	r1, r1, r2
   1655c:	ldr	r2, [sp, #88]	; 0x58
   16560:	orr	r1, r1, r2
   16564:	ldr	r2, [sp, #84]	; 0x54
   16568:	orr	r1, r1, r2
   1656c:	ldr	r2, [sp, #80]	; 0x50
   16570:	orr	r1, r1, r2
   16574:	ldr	r2, [sp, #76]	; 0x4c
   16578:	orr	r1, r1, r2
   1657c:	ldr	r2, [sp, #72]	; 0x48
   16580:	orr	r1, r1, r2
   16584:	ldr	r2, [sp, #68]	; 0x44
   16588:	orr	r1, r1, r2
   1658c:	ldr	r2, [sp, #64]	; 0x40
   16590:	orr	r1, r1, r2
   16594:	ldr	r2, [sp, #60]	; 0x3c
   16598:	orr	r1, r1, r2
   1659c:	ldr	r2, [sp, #56]	; 0x38
   165a0:	orr	r1, r1, r2
   165a4:	ldr	r2, [sp, #52]	; 0x34
   165a8:	orr	r1, r1, r2
   165ac:	ldr	r2, [sp, #48]	; 0x30
   165b0:	orr	r1, r1, r2
   165b4:	ldr	r2, [sp, #44]	; 0x2c
   165b8:	orr	r1, r1, r2
   165bc:	ldr	r2, [sp, #40]	; 0x28
   165c0:	orr	r1, r1, r2
   165c4:	ldr	r2, [sp, #36]	; 0x24
   165c8:	orr	r1, r1, r2
   165cc:	ldr	r2, [sp, #32]
   165d0:	orr	r1, r1, r2
   165d4:	ldr	r2, [sp, #28]
   165d8:	orr	r1, r1, r2
   165dc:	ldr	r2, [sp, #24]
   165e0:	orr	r1, r1, r2
   165e4:	ldr	r2, [sp, #20]
   165e8:	orr	r1, r1, r2
   165ec:	ldr	r2, [sp, #16]
   165f0:	orr	r1, r1, r2
   165f4:	orr	r1, r1, r7
   165f8:	orr	r1, r1, r6
   165fc:	orr	r1, r1, r9
   16600:	orr	r1, r1, sl
   16604:	orr	r1, r1, r5
   16608:	orr	r5, r1, r0
   1660c:	movw	r1, #15919	; 0x3e2f
   16610:	movt	r1, #3
   16614:	movw	r2, #16062	; 0x3ebe
   16618:	movt	r2, #3
   1661c:	mov	r0, r4
   16620:	mov	r3, #0
   16624:	bl	15040 <test_json@@Base>
   16628:	orrs	r0, r5, r0
   1662c:	mvnne	r0, #0
   16630:	sub	sp, fp, #28
   16634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16638:	mov	r1, #2
   1663c:	strb	r1, [r0, #25]
   16640:	bx	lr
   16644:	push	{r4, sl, fp, lr}
   16648:	add	fp, sp, #8
   1664c:	mov	r4, r0
   16650:	bl	16638 <main@@Base+0x8b0>
   16654:	mov	r0, r4
   16658:	bl	16668 <main@@Base+0x8e0>
   1665c:	mov	r0, r4
   16660:	pop	{r4, sl, fp, lr}
   16664:	b	16674 <main@@Base+0x8ec>
   16668:	mov	r1, #1
   1666c:	strb	r1, [r0, #26]
   16670:	bx	lr
   16674:	mov	r1, #0
   16678:	strb	r1, [r0, #27]
   1667c:	bx	lr
   16680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16684:	add	fp, sp, #28
   16688:	sub	sp, sp, #4
   1668c:	vpush	{d8-d9}
   16690:	sub	sp, sp, #56	; 0x38
   16694:	mov	r6, r3
   16698:	mov	r4, r2
   1669c:	mov	r9, r1
   166a0:	mov	r1, #0
   166a4:	str	r1, [r3]
   166a8:	str	r0, [sp, #28]
   166ac:	ldr	r0, [r0]
   166b0:	mov	r1, #36	; 0x24
   166b4:	bl	226c8 <flatcc_builder_start_table@@Base>
   166b8:	cmp	r0, #0
   166bc:	beq	166ec <main@@Base+0x964>
   166c0:	ldr	r0, [sp, #28]
   166c4:	mov	r1, r9
   166c8:	mov	r2, r4
   166cc:	mov	r3, #33	; 0x21
   166d0:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   166d4:	mov	r9, r0
   166d8:	mov	r0, r9
   166dc:	sub	sp, fp, #48	; 0x30
   166e0:	vpop	{d8-d9}
   166e4:	add	sp, sp, #4
   166e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ec:	add	r0, sp, #44	; 0x2c
   166f0:	str	r0, [sp]
   166f4:	ldr	r0, [sp, #28]
   166f8:	mov	r1, r9
   166fc:	mov	r2, r4
   16700:	mov	r3, #1
   16704:	bl	27900 <flatcc_json_parser_prepare_unions@@Base>
   16708:	cmp	r0, r4
   1670c:	beq	166c0 <main@@Base+0x938>
   16710:	add	r3, sp, #52	; 0x34
   16714:	ldr	r0, [sp, #28]
   16718:	mov	r1, r9
   1671c:	mov	r2, r4
   16720:	bl	195f0 <main@@Base+0x3868>
   16724:	mov	r9, r0
   16728:	ldr	r0, [sp, #52]	; 0x34
   1672c:	cmp	r0, #0
   16730:	beq	18c10 <main@@Base+0x2e88>
   16734:	vmov.f32	s16, #8	; 0x40400000  3.0
   16738:	vldr	s18, [pc, #1016]	; 16b38 <main@@Base+0xdb0>
   1673c:	movw	r0, #13407	; 0x345f
   16740:	movt	r0, #29494	; 0x7336
   16744:	sub	r0, r0, #512	; 0x200
   16748:	sub	r0, r0, #196608	; 0x30000
   1674c:	add	r1, sp, #16
   16750:	stm	r1, {r0, r4, r6}
   16754:	b	174d8 <main@@Base+0x1750>
   16758:	ldr	r0, [sp, #28]
   1675c:	mov	r1, r8
   16760:	b	18bd8 <main@@Base+0x2e50>
   16764:	ldr	r0, [sp, #28]
   16768:	b	16ff0 <main@@Base+0x1268>
   1676c:	and	r0, r1, #-16777216	; 0xff000000
   16770:	teq	r0, #1728053248	; 0x67000000
   16774:	add	r8, sp, #52	; 0x34
   16778:	bne	16a4c <main@@Base+0xcc4>
   1677c:	ldr	r0, [sp, #28]
   16780:	mov	r1, r7
   16784:	mov	r2, r4
   16788:	mov	r3, #1
   1678c:	bl	196ac <main@@Base+0x3924>
   16790:	mov	r9, r0
   16794:	cmp	r7, r0
   16798:	beq	16a64 <main@@Base+0xcdc>
   1679c:	ldr	r0, [sp, #28]
   167a0:	ldr	r0, [r0]
   167a4:	bl	22484 <flatcc_builder_start_offset_vector@@Base>
   167a8:	cmp	r0, #0
   167ac:	bne	166c0 <main@@Base+0x938>
   167b0:	ldr	r0, [sp, #28]
   167b4:	mov	r1, r9
   167b8:	mov	r2, r4
   167bc:	mov	r3, r8
   167c0:	bl	1a22c <main@@Base+0x44a4>
   167c4:	b	167e4 <main@@Base+0xa5c>
   167c8:	ldr	r1, [sp, #48]	; 0x30
   167cc:	str	r1, [r0]
   167d0:	ldr	r0, [sp, #28]
   167d4:	mov	r1, r9
   167d8:	mov	r2, r4
   167dc:	mov	r3, r8
   167e0:	bl	1a484 <main@@Base+0x46fc>
   167e4:	mov	r9, r0
   167e8:	ldr	r0, [sp, #52]	; 0x34
   167ec:	cmp	r0, #0
   167f0:	beq	1718c <main@@Base+0x1404>
   167f4:	ldr	r0, [sp, #28]
   167f8:	mov	r1, r9
   167fc:	mov	r2, r4
   16800:	add	r3, sp, #48	; 0x30
   16804:	bl	277b4 <flatcc_json_parser_build_string@@Base>
   16808:	mov	r9, r0
   1680c:	ldr	r0, [sp, #48]	; 0x30
   16810:	cmp	r0, #0
   16814:	beq	166c0 <main@@Base+0x938>
   16818:	ldr	r0, [sp, #28]
   1681c:	ldr	r0, [r0]
   16820:	mov	r1, #1
   16824:	bl	21fd0 <flatcc_builder_extend_offset_vector@@Base>
   16828:	cmp	r0, #0
   1682c:	bne	167c8 <main@@Base+0xa40>
   16830:	b	166c0 <main@@Base+0x938>
   16834:	str	r8, [sp]
   16838:	ldr	r0, [sp, #28]
   1683c:	mov	r1, r7
   16840:	mov	r2, r4
   16844:	movw	r3, #32888	; 0x8078
   16848:	movt	r3, #4
   1684c:	bl	1a0f4 <main@@Base+0x436c>
   16850:	mov	r9, r0
   16854:	cmp	r0, r7
   16858:	ldr	r6, [sp, #24]
   1685c:	cmpne	r9, r4
   16860:	beq	166c0 <main@@Base+0x938>
   16864:	ldrb	r4, [sp, #32]
   16868:	cmp	r4, #8
   1686c:	add	r8, sp, #52	; 0x34
   16870:	bne	16884 <main@@Base+0xafc>
   16874:	ldr	r0, [sp, #28]
   16878:	ldrb	r0, [r0, #8]
   1687c:	tst	r0, #2
   16880:	beq	170fc <main@@Base+0x1374>
   16884:	ldr	r0, [sp, #28]
   16888:	ldr	r0, [r0]
   1688c:	mov	r1, #6
   16890:	mov	r2, #1
   16894:	mov	r3, #1
   16898:	bl	234dc <flatcc_builder_table_add@@Base>
   1689c:	cmp	r0, #0
   168a0:	beq	18c88 <main@@Base+0x2f00>
   168a4:	sxtb	r1, r4
   168a8:	bl	1a20c <main@@Base+0x4484>
   168ac:	b	170fc <main@@Base+0x1374>
   168b0:	ldr	r0, [sp, #28]
   168b4:	mov	r1, r9
   168b8:	b	16ff0 <main@@Base+0x1268>
   168bc:	mov	r7, r9
   168c0:	b	16a4c <main@@Base+0xcc4>
   168c4:	ldr	r0, [sp, #28]
   168c8:	mov	r1, r7
   168cc:	b	18bd8 <main@@Base+0x2e50>
   168d0:	movw	r2, #24428	; 0x5f6c
   168d4:	movt	r2, #102	; 0x66
   168d8:	eor	r2, r2, r1, lsr #8
   168dc:	lsr	r0, r0, #8
   168e0:	orr	r0, r0, r1, lsl #24
   168e4:	movw	r1, #26483	; 0x6773
   168e8:	movt	r1, #28526	; 0x6f6e
   168ec:	eor	r0, r0, r1
   168f0:	orrs	r0, r0, r2
   168f4:	add	r8, sp, #52	; 0x34
   168f8:	bne	16a4c <main@@Base+0xcc4>
   168fc:	ldr	r0, [sp, #28]
   16900:	mov	r1, r7
   16904:	mov	r2, r4
   16908:	mov	r3, #7
   1690c:	bl	196ac <main@@Base+0x3924>
   16910:	mov	r9, r0
   16914:	cmp	r7, r0
   16918:	beq	16a64 <main@@Base+0xcdc>
   1691c:	ldr	r0, [sp, #28]
   16920:	ldr	r0, [r0]
   16924:	mov	r1, #8
   16928:	mov	r2, #8
   1692c:	mvn	r3, #-536870912	; 0xe0000000
   16930:	bl	223f4 <flatcc_builder_start_vector@@Base>
   16934:	cmp	r0, #0
   16938:	bne	166c0 <main@@Base+0x938>
   1693c:	ldr	r0, [sp, #28]
   16940:	mov	r1, r9
   16944:	mov	r2, r4
   16948:	mov	r3, r8
   1694c:	bl	1a22c <main@@Base+0x44a4>
   16950:	mov	r9, r0
   16954:	ldr	r0, [sp, #52]	; 0x34
   16958:	cmp	r0, #0
   1695c:	beq	16a24 <main@@Base+0xc9c>
   16960:	mov	r0, #0
   16964:	str	r0, [sp, #36]	; 0x24
   16968:	str	r0, [sp, #32]
   1696c:	ldr	r0, [sp, #28]
   16970:	ldr	r0, [r0]
   16974:	mov	r1, #1
   16978:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   1697c:	cmp	r0, #0
   16980:	beq	166c0 <main@@Base+0x938>
   16984:	mov	r7, r0
   16988:	ldr	r0, [sp, #28]
   1698c:	mov	r1, r9
   16990:	mov	r2, r4
   16994:	mov	r5, r4
   16998:	add	r4, sp, #32
   1699c:	mov	r3, r4
   169a0:	bl	1bec0 <main@@Base+0x6138>
   169a4:	mov	r6, r0
   169a8:	cmp	r9, r0
   169ac:	beq	169bc <main@@Base+0xc34>
   169b0:	mov	r9, r6
   169b4:	mov	r4, r5
   169b8:	b	169ec <main@@Base+0xc64>
   169bc:	str	r4, [sp]
   169c0:	ldr	r0, [sp, #28]
   169c4:	mov	r1, r6
   169c8:	mov	r2, r5
   169cc:	movw	r3, #33148	; 0x817c
   169d0:	movt	r3, #4
   169d4:	bl	1bf54 <main@@Base+0x61cc>
   169d8:	mov	r9, r0
   169dc:	cmp	r0, r6
   169e0:	mov	r4, r5
   169e4:	cmpne	r9, r4
   169e8:	beq	166c0 <main@@Base+0x938>
   169ec:	ldr	r2, [sp, #32]
   169f0:	ldr	r3, [sp, #36]	; 0x24
   169f4:	mov	r0, r7
   169f8:	bl	1c07c <main@@Base+0x62f4>
   169fc:	ldr	r0, [sp, #28]
   16a00:	mov	r1, r9
   16a04:	mov	r2, r4
   16a08:	mov	r3, r8
   16a0c:	bl	1a484 <main@@Base+0x46fc>
   16a10:	mov	r9, r0
   16a14:	ldr	r0, [sp, #52]	; 0x34
   16a18:	cmp	r0, #0
   16a1c:	ldr	r6, [sp, #24]
   16a20:	bne	16960 <main@@Base+0xbd8>
   16a24:	ldr	r0, [sp, #28]
   16a28:	ldr	r0, [r0]
   16a2c:	bl	23044 <flatcc_builder_end_vector@@Base>
   16a30:	str	r0, [sp, #48]	; 0x30
   16a34:	cmp	r0, #0
   16a38:	beq	166c0 <main@@Base+0x938>
   16a3c:	ldr	r0, [sp, #28]
   16a40:	ldr	r0, [r0]
   16a44:	mov	r1, #32
   16a48:	b	17384 <main@@Base+0x15fc>
   16a4c:	ldr	r0, [sp, #28]
   16a50:	mov	r1, r7
   16a54:	mov	r2, r4
   16a58:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   16a5c:	mov	r9, r0
   16a60:	b	18bec <main@@Base+0x2e64>
   16a64:	ldr	r0, [sp, #28]
   16a68:	mov	r1, r9
   16a6c:	b	16a54 <main@@Base+0xccc>
   16a70:	ldrb	r1, [sp, #32]
   16a74:	mov	r0, r7
   16a78:	bl	1a464 <main@@Base+0x46dc>
   16a7c:	ldr	r0, [sp, #28]
   16a80:	mov	r1, r9
   16a84:	mov	r2, r4
   16a88:	mov	r3, r8
   16a8c:	bl	1a484 <main@@Base+0x46fc>
   16a90:	mov	r9, r0
   16a94:	ldr	r0, [sp, #52]	; 0x34
   16a98:	cmp	r0, #0
   16a9c:	beq	17360 <main@@Base+0x15d8>
   16aa0:	mov	r0, #0
   16aa4:	strb	r0, [sp, #32]
   16aa8:	ldr	r0, [sp, #28]
   16aac:	ldr	r0, [r0]
   16ab0:	mov	r1, #1
   16ab4:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   16ab8:	cmp	r0, #0
   16abc:	beq	166c0 <main@@Base+0x938>
   16ac0:	mov	r7, r0
   16ac4:	ldr	r0, [sp, #28]
   16ac8:	mov	r1, r9
   16acc:	mov	r2, r4
   16ad0:	mov	r5, r4
   16ad4:	add	r4, sp, #32
   16ad8:	mov	r3, r4
   16adc:	bl	1a2bc <main@@Base+0x4534>
   16ae0:	mov	r6, r0
   16ae4:	cmp	r9, r0
   16ae8:	beq	16afc <main@@Base+0xd74>
   16aec:	mov	r9, r6
   16af0:	ldr	r6, [sp, #24]
   16af4:	mov	r4, r5
   16af8:	b	16a70 <main@@Base+0xce8>
   16afc:	str	r4, [sp]
   16b00:	ldr	r0, [sp, #28]
   16b04:	mov	r1, r6
   16b08:	mov	r2, r5
   16b0c:	movw	r3, #33124	; 0x8164
   16b10:	movt	r3, #4
   16b14:	bl	1a34c <main@@Base+0x45c4>
   16b18:	mov	r9, r0
   16b1c:	cmp	r0, r6
   16b20:	mov	r4, r5
   16b24:	beq	166c0 <main@@Base+0x938>
   16b28:	cmp	r9, r4
   16b2c:	ldr	r6, [sp, #24]
   16b30:	bne	16a70 <main@@Base+0xce8>
   16b34:	b	166c0 <main@@Base+0x938>
   16b38:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   16b3c:	add	r6, r6, #8
   16b40:	mov	r0, r6
   16b44:	mov	r1, r4
   16b48:	bl	196a8 <main@@Base+0x3920>
   16b4c:	and	r0, r1, #-16777216	; 0xff000000
   16b50:	teq	r0, #1627389952	; 0x61000000
   16b54:	bne	16fdc <main@@Base+0x1254>
   16b58:	ldr	r0, [sp, #28]
   16b5c:	mov	r1, r6
   16b60:	mov	r2, r4
   16b64:	mov	r3, #1
   16b68:	bl	196ac <main@@Base+0x3924>
   16b6c:	mov	r7, r0
   16b70:	cmp	r6, r0
   16b74:	beq	16fe8 <main@@Base+0x1260>
   16b78:	mov	r0, #0
   16b7c:	str	r0, [sp, #32]
   16b80:	ldr	r0, [sp, #28]
   16b84:	mov	r1, r7
   16b88:	mov	r2, r4
   16b8c:	mov	r5, r4
   16b90:	add	r4, sp, #32
   16b94:	mov	r3, r4
   16b98:	bl	1bcf8 <main@@Base+0x5f70>
   16b9c:	mov	r6, r0
   16ba0:	cmp	r7, r0
   16ba4:	beq	17304 <main@@Base+0x157c>
   16ba8:	mov	r9, r6
   16bac:	mov	r4, r5
   16bb0:	b	17334 <main@@Base+0x15ac>
   16bb4:	ldr	r0, [sp, #28]
   16bb8:	mov	r1, r7
   16bbc:	mov	r2, r4
   16bc0:	mov	r3, #8
   16bc4:	bl	196ac <main@@Base+0x3924>
   16bc8:	mov	r6, r0
   16bcc:	cmp	r7, r0
   16bd0:	beq	16f60 <main@@Base+0x11d8>
   16bd4:	mov	r0, #0
   16bd8:	str	r0, [sp, #36]	; 0x24
   16bdc:	str	r0, [sp, #32]
   16be0:	ldr	r0, [sp, #28]
   16be4:	mov	r1, r6
   16be8:	mov	r2, r4
   16bec:	mov	r5, r4
   16bf0:	add	r4, sp, #32
   16bf4:	mov	r3, r4
   16bf8:	bl	1c26c <main@@Base+0x64e4>
   16bfc:	mov	r7, r0
   16c00:	cmp	r6, r0
   16c04:	beq	17280 <main@@Base+0x14f8>
   16c08:	mov	r9, r7
   16c0c:	mov	r4, r5
   16c10:	b	172b0 <main@@Base+0x1528>
   16c14:	str	r4, [sp]
   16c18:	ldr	r0, [sp, #28]
   16c1c:	mov	r1, r7
   16c20:	mov	r2, r5
   16c24:	movw	r3, #32980	; 0x80d4
   16c28:	movt	r3, #4
   16c2c:	bl	1b298 <main@@Base+0x5510>
   16c30:	mov	r9, r0
   16c34:	cmp	r0, r7
   16c38:	mov	r4, r5
   16c3c:	cmpne	r9, r4
   16c40:	beq	166c0 <main@@Base+0x938>
   16c44:	ldrb	r6, [sp, #32]
   16c48:	cmp	r6, #1
   16c4c:	bne	16c60 <main@@Base+0xed8>
   16c50:	ldr	r0, [sp, #28]
   16c54:	ldrb	r0, [r0, #8]
   16c58:	tst	r0, #2
   16c5c:	beq	172fc <main@@Base+0x1574>
   16c60:	ldr	r0, [sp, #28]
   16c64:	ldr	r0, [r0]
   16c68:	mov	r1, #15
   16c6c:	mov	r2, #1
   16c70:	mov	r3, #1
   16c74:	bl	234dc <flatcc_builder_table_add@@Base>
   16c78:	cmp	r0, #0
   16c7c:	beq	166c0 <main@@Base+0x938>
   16c80:	mov	r1, r6
   16c84:	bl	1b3b0 <main@@Base+0x5628>
   16c88:	b	172fc <main@@Base+0x1574>
   16c8c:	ldr	r6, [sp, #24]
   16c90:	bl	23044 <flatcc_builder_end_vector@@Base>
   16c94:	str	r0, [sp, #48]	; 0x30
   16c98:	cmp	r0, #0
   16c9c:	beq	166c0 <main@@Base+0x938>
   16ca0:	ldr	r0, [sp, #28]
   16ca4:	ldr	r0, [r0]
   16ca8:	mov	r1, #31
   16cac:	b	17384 <main@@Base+0x15fc>
   16cb0:	bl	23044 <flatcc_builder_end_vector@@Base>
   16cb4:	str	r0, [sp, #48]	; 0x30
   16cb8:	cmp	r0, #0
   16cbc:	beq	166c0 <main@@Base+0x938>
   16cc0:	ldr	r0, [sp, #28]
   16cc4:	ldr	r0, [r0]
   16cc8:	mov	r1, #29
   16ccc:	b	17384 <main@@Base+0x15fc>
   16cd0:	str	r4, [sp]
   16cd4:	ldr	r0, [sp, #28]
   16cd8:	mov	r1, r7
   16cdc:	mov	r2, r5
   16ce0:	movw	r3, #33028	; 0x8104
   16ce4:	movt	r3, #4
   16ce8:	bl	1bd88 <main@@Base+0x6000>
   16cec:	mov	r9, r0
   16cf0:	cmp	r0, r7
   16cf4:	mov	r4, r5
   16cf8:	cmpne	r9, r4
   16cfc:	beq	166c0 <main@@Base+0x938>
   16d00:	ldr	r6, [sp, #32]
   16d04:	cmp	r6, #0
   16d08:	bne	16d1c <main@@Base+0xf94>
   16d0c:	ldr	r0, [sp, #28]
   16d10:	ldrb	r0, [r0, #8]
   16d14:	tst	r0, #2
   16d18:	beq	172fc <main@@Base+0x1574>
   16d1c:	ldr	r0, [sp, #28]
   16d20:	ldr	r0, [r0]
   16d24:	mov	r1, #16
   16d28:	mov	r2, #4
   16d2c:	mov	r3, #4
   16d30:	bl	234dc <flatcc_builder_table_add@@Base>
   16d34:	cmp	r0, #0
   16d38:	beq	166c0 <main@@Base+0x938>
   16d3c:	mov	r1, r6
   16d40:	bl	1bea0 <main@@Base+0x6118>
   16d44:	b	172fc <main@@Base+0x1574>
   16d48:	str	r4, [sp]
   16d4c:	ldr	r0, [sp, #28]
   16d50:	mov	r1, r7
   16d54:	mov	r2, r5
   16d58:	movw	r3, #32916	; 0x8094
   16d5c:	movt	r3, #4
   16d60:	bl	1a5d4 <main@@Base+0x484c>
   16d64:	mov	r9, r0
   16d68:	cmp	r0, r7
   16d6c:	ldr	r6, [sp, #24]
   16d70:	mov	r4, r5
   16d74:	cmpne	r9, r4
   16d78:	beq	166c0 <main@@Base+0x938>
   16d7c:	ldrh	r4, [sp, #32]
   16d80:	cmp	r4, #100	; 0x64
   16d84:	bne	16d98 <main@@Base+0x1010>
   16d88:	ldr	r0, [sp, #28]
   16d8c:	ldrb	r0, [r0, #8]
   16d90:	tst	r0, #2
   16d94:	beq	170fc <main@@Base+0x1374>
   16d98:	ldr	r0, [sp, #28]
   16d9c:	ldr	r0, [r0]
   16da0:	mov	r1, #2
   16da4:	b	170e0 <main@@Base+0x1358>
   16da8:	str	r4, [sp]
   16dac:	ldr	r0, [sp, #28]
   16db0:	mov	r1, r7
   16db4:	mov	r2, r8
   16db8:	movw	r3, #32992	; 0x80e0
   16dbc:	movt	r3, #4
   16dc0:	bl	1bbd8 <main@@Base+0x5e50>
   16dc4:	mov	r9, r0
   16dc8:	cmp	r0, r7
   16dcc:	ldr	r6, [sp, #24]
   16dd0:	mov	r4, r8
   16dd4:	beq	166c0 <main@@Base+0x938>
   16dd8:	cmp	r9, r4
   16ddc:	add	r8, sp, #52	; 0x34
   16de0:	beq	166c0 <main@@Base+0x938>
   16de4:	vldr	s0, [sp, #32]
   16de8:	vcmp.f32	s0, s16
   16dec:	vmrs	APSR_nzcv, fpscr
   16df0:	bne	16e04 <main@@Base+0x107c>
   16df4:	ldr	r0, [sp, #28]
   16df8:	ldrb	r0, [r0, #8]
   16dfc:	tst	r0, #2
   16e00:	beq	18bec <main@@Base+0x2e64>
   16e04:	ldr	r0, [sp, #28]
   16e08:	ldr	r0, [r0]
   16e0c:	mov	r1, #26
   16e10:	b	1716c <main@@Base+0x13e4>
   16e14:	ldr	r0, [sp, #28]
   16e18:	ldr	r0, [r0]
   16e1c:	bl	22538 <flatcc_builder_end_offset_vector@@Base>
   16e20:	str	r0, [sp, #48]	; 0x30
   16e24:	cmp	r0, #0
   16e28:	beq	166c0 <main@@Base+0x938>
   16e2c:	ldr	r0, [sp, #28]
   16e30:	ldr	r0, [r0]
   16e34:	mov	r1, #28
   16e38:	b	17384 <main@@Base+0x15fc>
   16e3c:	ldr	r0, [sp, #28]
   16e40:	ldr	r0, [r0]
   16e44:	bl	22538 <flatcc_builder_end_offset_vector@@Base>
   16e48:	str	r0, [sp, #48]	; 0x30
   16e4c:	cmp	r0, #0
   16e50:	beq	166c0 <main@@Base+0x938>
   16e54:	ldr	r0, [sp, #28]
   16e58:	ldr	r0, [r0]
   16e5c:	mov	r1, #11
   16e60:	b	17384 <main@@Base+0x15fc>
   16e64:	ldr	r0, [sp, #28]
   16e68:	b	16a54 <main@@Base+0xccc>
   16e6c:	add	r6, r6, #8
   16e70:	mov	r0, r6
   16e74:	mov	r1, r4
   16e78:	bl	196a8 <main@@Base+0x3920>
   16e7c:	and	r0, r1, #-16777216	; 0xff000000
   16e80:	teq	r0, #1627389952	; 0x61000000
   16e84:	bne	16fdc <main@@Base+0x1254>
   16e88:	ldr	r0, [sp, #28]
   16e8c:	mov	r1, r6
   16e90:	mov	r2, r4
   16e94:	mov	r3, #1
   16e98:	bl	196ac <main@@Base+0x3924>
   16e9c:	mov	r7, r0
   16ea0:	cmp	r6, r0
   16ea4:	beq	16fe8 <main@@Base+0x1260>
   16ea8:	mov	r0, #0
   16eac:	str	r0, [sp, #36]	; 0x24
   16eb0:	str	r0, [sp, #32]
   16eb4:	ldr	r0, [sp, #28]
   16eb8:	mov	r1, r7
   16ebc:	mov	r2, r4
   16ec0:	mov	r5, r4
   16ec4:	add	r4, sp, #32
   16ec8:	mov	r3, r4
   16ecc:	bl	1bec0 <main@@Base+0x6138>
   16ed0:	mov	r6, r0
   16ed4:	cmp	r7, r0
   16ed8:	beq	1739c <main@@Base+0x1614>
   16edc:	mov	r9, r6
   16ee0:	mov	r4, r5
   16ee4:	b	173cc <main@@Base+0x1644>
   16ee8:	add	r6, r6, #8
   16eec:	mov	r0, r6
   16ef0:	mov	r1, r4
   16ef4:	bl	196a8 <main@@Base+0x3920>
   16ef8:	and	r0, r1, #-16777216	; 0xff000000
   16efc:	teq	r0, #1627389952	; 0x61000000
   16f00:	bne	16fdc <main@@Base+0x1254>
   16f04:	ldr	r0, [sp, #28]
   16f08:	mov	r1, r6
   16f0c:	mov	r2, r4
   16f10:	mov	r3, #1
   16f14:	bl	196ac <main@@Base+0x3924>
   16f18:	mov	r7, r0
   16f1c:	cmp	r6, r0
   16f20:	beq	16fe8 <main@@Base+0x1260>
   16f24:	mov	r0, #0
   16f28:	str	r0, [sp, #32]
   16f2c:	ldr	r0, [sp, #28]
   16f30:	mov	r1, r7
   16f34:	mov	r2, r4
   16f38:	mov	r5, r4
   16f3c:	add	r4, sp, #32
   16f40:	mov	r3, r4
   16f44:	bl	1c0a4 <main@@Base+0x631c>
   16f48:	mov	r6, r0
   16f4c:	cmp	r7, r0
   16f50:	beq	1741c <main@@Base+0x1694>
   16f54:	mov	r9, r6
   16f58:	mov	r4, r5
   16f5c:	b	1744c <main@@Base+0x16c4>
   16f60:	add	r6, r6, #8
   16f64:	mov	r0, r6
   16f68:	mov	r1, r4
   16f6c:	bl	196a8 <main@@Base+0x3920>
   16f70:	and	r0, r1, #-16777216	; 0xff000000
   16f74:	teq	r0, #1627389952	; 0x61000000
   16f78:	bne	16fdc <main@@Base+0x1254>
   16f7c:	ldr	r0, [sp, #28]
   16f80:	mov	r1, r6
   16f84:	mov	r2, r4
   16f88:	mov	r3, #1
   16f8c:	bl	196ac <main@@Base+0x3924>
   16f90:	mov	r7, r0
   16f94:	cmp	r6, r0
   16f98:	beq	16fe8 <main@@Base+0x1260>
   16f9c:	mov	r0, #0
   16fa0:	str	r0, [sp, #36]	; 0x24
   16fa4:	str	r0, [sp, #32]
   16fa8:	ldr	r0, [sp, #28]
   16fac:	mov	r1, r7
   16fb0:	mov	r2, r4
   16fb4:	mov	r5, r4
   16fb8:	add	r4, sp, #32
   16fbc:	mov	r3, r4
   16fc0:	bl	1c26c <main@@Base+0x64e4>
   16fc4:	mov	r6, r0
   16fc8:	cmp	r7, r0
   16fcc:	beq	17478 <main@@Base+0x16f0>
   16fd0:	mov	r9, r6
   16fd4:	mov	r4, r5
   16fd8:	b	174a8 <main@@Base+0x1720>
   16fdc:	ldr	r0, [sp, #28]
   16fe0:	mov	r1, r6
   16fe4:	b	16ff0 <main@@Base+0x1268>
   16fe8:	ldr	r0, [sp, #28]
   16fec:	mov	r1, r7
   16ff0:	mov	r2, r4
   16ff4:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   16ff8:	mov	r9, r0
   16ffc:	ldr	r6, [sp, #24]
   17000:	b	18bec <main@@Base+0x2e64>
   17004:	str	r4, [sp]
   17008:	ldr	r0, [sp, #28]
   1700c:	mov	r1, r7
   17010:	mov	r2, r5
   17014:	movw	r3, #33052	; 0x811c
   17018:	movt	r3, #4
   1701c:	bl	1bf54 <main@@Base+0x61cc>
   17020:	mov	r9, r0
   17024:	cmp	r0, r7
   17028:	mov	r4, r5
   1702c:	cmpne	r9, r4
   17030:	beq	166c0 <main@@Base+0x938>
   17034:	ldr	r7, [sp, #32]
   17038:	ldr	r6, [sp, #36]	; 0x24
   1703c:	orrs	r0, r7, r6
   17040:	bne	17054 <main@@Base+0x12cc>
   17044:	ldr	r0, [sp, #28]
   17048:	ldrb	r0, [r0, #8]
   1704c:	tst	r0, #2
   17050:	beq	172fc <main@@Base+0x1574>
   17054:	ldr	r0, [sp, #28]
   17058:	ldr	r0, [r0]
   1705c:	mov	r1, #18
   17060:	mov	r2, #8
   17064:	mov	r3, #8
   17068:	bl	234dc <flatcc_builder_table_add@@Base>
   1706c:	cmp	r0, #0
   17070:	beq	166c0 <main@@Base+0x938>
   17074:	mov	r2, r7
   17078:	mov	r3, r6
   1707c:	bl	1c07c <main@@Base+0x62f4>
   17080:	b	172fc <main@@Base+0x1574>
   17084:	str	r4, [sp]
   17088:	ldr	r0, [sp, #28]
   1708c:	mov	r1, r7
   17090:	mov	r2, r5
   17094:	movw	r3, #32940	; 0x80ac
   17098:	movt	r3, #4
   1709c:	bl	1a5d4 <main@@Base+0x484c>
   170a0:	mov	r9, r0
   170a4:	cmp	r0, r7
   170a8:	ldr	r6, [sp, #24]
   170ac:	mov	r4, r5
   170b0:	cmpne	r9, r4
   170b4:	beq	166c0 <main@@Base+0x938>
   170b8:	ldrh	r4, [sp, #32]
   170bc:	cmp	r4, #150	; 0x96
   170c0:	bne	170d4 <main@@Base+0x134c>
   170c4:	ldr	r0, [sp, #28]
   170c8:	ldrb	r0, [r0, #8]
   170cc:	tst	r0, #2
   170d0:	beq	170fc <main@@Base+0x1374>
   170d4:	ldr	r0, [sp, #28]
   170d8:	ldr	r0, [r0]
   170dc:	mov	r1, #1
   170e0:	mov	r2, #2
   170e4:	mov	r3, #2
   170e8:	bl	234dc <flatcc_builder_table_add@@Base>
   170ec:	cmp	r0, #0
   170f0:	beq	18c88 <main@@Base+0x2f00>
   170f4:	sxth	r1, r4
   170f8:	bl	1a6ec <main@@Base+0x4964>
   170fc:	ldr	r4, [sp, #20]
   17100:	b	18bec <main@@Base+0x2e64>
   17104:	str	r4, [sp]
   17108:	ldr	r0, [sp, #28]
   1710c:	mov	r1, r7
   17110:	mov	r2, r8
   17114:	movw	r3, #33004	; 0x80ec
   17118:	movt	r3, #4
   1711c:	bl	1bbd8 <main@@Base+0x5e50>
   17120:	mov	r9, r0
   17124:	cmp	r0, r7
   17128:	ldr	r6, [sp, #24]
   1712c:	mov	r4, r8
   17130:	beq	166c0 <main@@Base+0x938>
   17134:	cmp	r9, r4
   17138:	add	r8, sp, #52	; 0x34
   1713c:	beq	166c0 <main@@Base+0x938>
   17140:	vldr	s0, [sp, #32]
   17144:	vcmp.f32	s0, s18
   17148:	vmrs	APSR_nzcv, fpscr
   1714c:	bne	17160 <main@@Base+0x13d8>
   17150:	ldr	r0, [sp, #28]
   17154:	ldrb	r0, [r0, #8]
   17158:	tst	r0, #2
   1715c:	beq	18bec <main@@Base+0x2e64>
   17160:	ldr	r0, [sp, #28]
   17164:	ldr	r0, [r0]
   17168:	mov	r1, #25
   1716c:	mov	r2, #4
   17170:	mov	r3, #4
   17174:	bl	234dc <flatcc_builder_table_add@@Base>
   17178:	cmp	r0, #0
   1717c:	beq	166c0 <main@@Base+0x938>
   17180:	vldr	s0, [sp, #32]
   17184:	bl	1bce0 <main@@Base+0x5f58>
   17188:	b	18bec <main@@Base+0x2e64>
   1718c:	ldr	r0, [sp, #28]
   17190:	ldr	r0, [r0]
   17194:	bl	22538 <flatcc_builder_end_offset_vector@@Base>
   17198:	str	r0, [sp, #48]	; 0x30
   1719c:	cmp	r0, #0
   171a0:	beq	166c0 <main@@Base+0x938>
   171a4:	ldr	r0, [sp, #28]
   171a8:	ldr	r0, [r0]
   171ac:	mov	r1, #10
   171b0:	b	17384 <main@@Base+0x15fc>
   171b4:	ldr	r0, [sp, #28]
   171b8:	ldr	r0, [r0]
   171bc:	mov	r1, #0
   171c0:	mov	r2, #0
   171c4:	mov	r3, #0
   171c8:	bl	219e0 <flatcc_builder_start_buffer@@Base>
   171cc:	cmp	r0, #0
   171d0:	bne	166c0 <main@@Base+0x938>
   171d4:	ldr	r0, [sp, #28]
   171d8:	mov	r1, r9
   171dc:	mov	r2, r4
   171e0:	add	r3, sp, #48	; 0x30
   171e4:	bl	16680 <main@@Base+0x8f8>
   171e8:	mov	r9, r0
   171ec:	ldr	r1, [sp, #48]	; 0x30
   171f0:	cmp	r1, #0
   171f4:	beq	166c0 <main@@Base+0x938>
   171f8:	ldr	r0, [sp, #28]
   171fc:	ldr	r0, [r0]
   17200:	bl	21b94 <flatcc_builder_end_buffer@@Base>
   17204:	b	1736c <main@@Base+0x15e4>
   17208:	str	r4, [sp]
   1720c:	ldr	r0, [sp, #28]
   17210:	mov	r1, r7
   17214:	mov	r2, r5
   17218:	movw	r3, #33076	; 0x8134
   1721c:	movt	r3, #4
   17220:	bl	1c134 <main@@Base+0x63ac>
   17224:	mov	r9, r0
   17228:	cmp	r0, r7
   1722c:	mov	r4, r5
   17230:	cmpne	r9, r4
   17234:	beq	166c0 <main@@Base+0x938>
   17238:	ldr	r6, [sp, #32]
   1723c:	cmp	r6, #0
   17240:	bne	17254 <main@@Base+0x14cc>
   17244:	ldr	r0, [sp, #28]
   17248:	ldrb	r0, [r0, #8]
   1724c:	tst	r0, #2
   17250:	beq	172fc <main@@Base+0x1574>
   17254:	ldr	r0, [sp, #28]
   17258:	ldr	r0, [r0]
   1725c:	mov	r1, #17
   17260:	mov	r2, #4
   17264:	mov	r3, #4
   17268:	bl	234dc <flatcc_builder_table_add@@Base>
   1726c:	cmp	r0, #0
   17270:	beq	166c0 <main@@Base+0x938>
   17274:	mov	r1, r6
   17278:	bl	1c24c <main@@Base+0x64c4>
   1727c:	b	172fc <main@@Base+0x1574>
   17280:	str	r4, [sp]
   17284:	ldr	r0, [sp, #28]
   17288:	mov	r1, r7
   1728c:	mov	r2, r5
   17290:	movw	r3, #33100	; 0x814c
   17294:	movt	r3, #4
   17298:	bl	1c300 <main@@Base+0x6578>
   1729c:	mov	r9, r0
   172a0:	cmp	r0, r7
   172a4:	mov	r4, r5
   172a8:	cmpne	r9, r4
   172ac:	beq	166c0 <main@@Base+0x938>
   172b0:	ldr	r6, [sp, #32]
   172b4:	ldr	r7, [sp, #36]	; 0x24
   172b8:	orrs	r0, r6, r7
   172bc:	bne	172d0 <main@@Base+0x1548>
   172c0:	ldr	r0, [sp, #28]
   172c4:	ldrb	r0, [r0, #8]
   172c8:	tst	r0, #2
   172cc:	beq	172fc <main@@Base+0x1574>
   172d0:	ldr	r0, [sp, #28]
   172d4:	ldr	r0, [r0]
   172d8:	mov	r1, #19
   172dc:	mov	r2, #8
   172e0:	mov	r3, #8
   172e4:	bl	234dc <flatcc_builder_table_add@@Base>
   172e8:	cmp	r0, #0
   172ec:	beq	166c0 <main@@Base+0x938>
   172f0:	mov	r2, r6
   172f4:	mov	r3, r7
   172f8:	bl	1c428 <main@@Base+0x66a0>
   172fc:	ldr	r6, [sp, #24]
   17300:	b	18bec <main@@Base+0x2e64>
   17304:	str	r4, [sp]
   17308:	ldr	r0, [sp, #28]
   1730c:	mov	r1, r6
   17310:	mov	r2, r5
   17314:	movw	r3, #33040	; 0x8110
   17318:	movt	r3, #4
   1731c:	bl	1bd88 <main@@Base+0x6000>
   17320:	mov	r9, r0
   17324:	cmp	r0, r6
   17328:	mov	r4, r5
   1732c:	cmpne	r9, r4
   17330:	beq	166c0 <main@@Base+0x938>
   17334:	ldr	r6, [sp, #32]
   17338:	cmp	r6, #0
   1733c:	bne	17350 <main@@Base+0x15c8>
   17340:	ldr	r0, [sp, #28]
   17344:	ldrb	r0, [r0, #8]
   17348:	tst	r0, #2
   1734c:	beq	172fc <main@@Base+0x1574>
   17350:	ldr	r0, [sp, #28]
   17354:	ldr	r0, [r0]
   17358:	mov	r1, #20
   1735c:	b	16d28 <main@@Base+0xfa0>
   17360:	ldr	r0, [sp, #28]
   17364:	ldr	r0, [r0]
   17368:	bl	23044 <flatcc_builder_end_vector@@Base>
   1736c:	str	r0, [sp, #48]	; 0x30
   17370:	cmp	r0, #0
   17374:	beq	166c0 <main@@Base+0x938>
   17378:	ldr	r0, [sp, #28]
   1737c:	ldr	r0, [r0]
   17380:	mov	r1, #13
   17384:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   17388:	cmp	r0, #0
   1738c:	beq	166c0 <main@@Base+0x938>
   17390:	ldr	r1, [sp, #48]	; 0x30
   17394:	str	r1, [r0]
   17398:	b	18bec <main@@Base+0x2e64>
   1739c:	str	r4, [sp]
   173a0:	ldr	r0, [sp, #28]
   173a4:	mov	r1, r6
   173a8:	mov	r2, r5
   173ac:	movw	r3, #33064	; 0x8128
   173b0:	movt	r3, #4
   173b4:	bl	1bf54 <main@@Base+0x61cc>
   173b8:	mov	r9, r0
   173bc:	cmp	r0, r6
   173c0:	mov	r4, r5
   173c4:	cmpne	r9, r4
   173c8:	beq	166c0 <main@@Base+0x938>
   173cc:	ldr	r6, [sp, #32]
   173d0:	ldr	r7, [sp, #36]	; 0x24
   173d4:	orrs	r0, r6, r7
   173d8:	bne	173ec <main@@Base+0x1664>
   173dc:	ldr	r0, [sp, #28]
   173e0:	ldrb	r0, [r0, #8]
   173e4:	tst	r0, #2
   173e8:	beq	172fc <main@@Base+0x1574>
   173ec:	ldr	r0, [sp, #28]
   173f0:	ldr	r0, [r0]
   173f4:	mov	r1, #22
   173f8:	mov	r2, #8
   173fc:	mov	r3, #8
   17400:	bl	234dc <flatcc_builder_table_add@@Base>
   17404:	cmp	r0, #0
   17408:	beq	166c0 <main@@Base+0x938>
   1740c:	mov	r2, r6
   17410:	mov	r3, r7
   17414:	bl	1c07c <main@@Base+0x62f4>
   17418:	b	172fc <main@@Base+0x1574>
   1741c:	str	r4, [sp]
   17420:	ldr	r0, [sp, #28]
   17424:	mov	r1, r6
   17428:	mov	r2, r5
   1742c:	movw	r3, #33088	; 0x8140
   17430:	movt	r3, #4
   17434:	bl	1c134 <main@@Base+0x63ac>
   17438:	mov	r9, r0
   1743c:	cmp	r0, r6
   17440:	mov	r4, r5
   17444:	cmpne	r9, r4
   17448:	beq	166c0 <main@@Base+0x938>
   1744c:	ldr	r6, [sp, #32]
   17450:	cmp	r6, #0
   17454:	bne	17468 <main@@Base+0x16e0>
   17458:	ldr	r0, [sp, #28]
   1745c:	ldrb	r0, [r0, #8]
   17460:	tst	r0, #2
   17464:	beq	172fc <main@@Base+0x1574>
   17468:	ldr	r0, [sp, #28]
   1746c:	ldr	r0, [r0]
   17470:	mov	r1, #21
   17474:	b	17260 <main@@Base+0x14d8>
   17478:	str	r4, [sp]
   1747c:	ldr	r0, [sp, #28]
   17480:	mov	r1, r6
   17484:	mov	r2, r5
   17488:	movw	r3, #33112	; 0x8158
   1748c:	movt	r3, #4
   17490:	bl	1c300 <main@@Base+0x6578>
   17494:	mov	r9, r0
   17498:	cmp	r0, r6
   1749c:	mov	r4, r5
   174a0:	cmpne	r9, r4
   174a4:	beq	166c0 <main@@Base+0x938>
   174a8:	ldr	r6, [sp, #32]
   174ac:	ldr	r7, [sp, #36]	; 0x24
   174b0:	orrs	r0, r6, r7
   174b4:	bne	174c8 <main@@Base+0x1740>
   174b8:	ldr	r0, [sp, #28]
   174bc:	ldrb	r0, [r0, #8]
   174c0:	tst	r0, #2
   174c4:	beq	172fc <main@@Base+0x1574>
   174c8:	ldr	r0, [sp, #28]
   174cc:	ldr	r0, [r0]
   174d0:	mov	r1, #23
   174d4:	b	172dc <main@@Base+0x1554>
   174d8:	ldr	r0, [sp, #28]
   174dc:	mov	r1, r9
   174e0:	mov	r2, r4
   174e4:	bl	19680 <main@@Base+0x38f8>
   174e8:	mov	r8, r0
   174ec:	mov	r1, r4
   174f0:	bl	196a8 <main@@Base+0x3920>
   174f4:	mov	sl, r0
   174f8:	mov	r7, r1
   174fc:	movw	r0, #29281	; 0x7261
   17500:	movt	r0, #24946	; 0x6172
   17504:	subs	r0, sl, r0
   17508:	movw	r3, #29556	; 0x7374
   1750c:	movt	r3, #29797	; 0x7465
   17510:	sbcs	r0, r1, r3
   17514:	bcs	175c0 <main@@Base+0x1838>
   17518:	movw	r0, #28004	; 0x6d64
   1751c:	movt	r0, #28257	; 0x6e61
   17520:	cmp	r7, r0
   17524:	bhi	1779c <main@@Base+0x1a14>
   17528:	movw	r0, #25975	; 0x6577
   1752c:	movt	r0, #26220	; 0x666c
   17530:	cmp	r7, r0
   17534:	bhi	178c0 <main@@Base+0x1b38>
   17538:	movw	r0, #27759	; 0x6c6f
   1753c:	movt	r0, #25455	; 0x636f
   17540:	eor	r1, r7, r0
   17544:	and	r0, sl, #-16777216	; 0xff000000
   17548:	eor	r2, r0, #1912602624	; 0x72000000
   1754c:	orrs	r1, r2, r1
   17550:	beq	1806c <main@@Base+0x22e4>
   17554:	movw	r1, #25965	; 0x656d
   17558:	movt	r1, #25966	; 0x656e
   1755c:	eor	r1, r7, r1
   17560:	eor	r0, r0, #2030043136	; 0x79000000
   17564:	orrs	r0, r0, r1
   17568:	bne	189ac <main@@Base+0x2c24>
   1756c:	ldr	r0, [sp, #28]
   17570:	mov	r1, r8
   17574:	mov	r2, r4
   17578:	mov	r3, #5
   1757c:	bl	196ac <main@@Base+0x3924>
   17580:	mov	r1, r0
   17584:	cmp	r8, r0
   17588:	beq	185f4 <main@@Base+0x286c>
   1758c:	ldr	r0, [sp, #28]
   17590:	mov	r2, r4
   17594:	add	r3, sp, #48	; 0x30
   17598:	bl	16680 <main@@Base+0x8f8>
   1759c:	mov	r9, r0
   175a0:	ldr	r0, [sp, #48]	; 0x30
   175a4:	cmp	r0, #0
   175a8:	add	r8, sp, #52	; 0x34
   175ac:	beq	166c0 <main@@Base+0x938>
   175b0:	ldr	r0, [sp, #28]
   175b4:	ldr	r0, [r0]
   175b8:	mov	r1, #12
   175bc:	b	17384 <main@@Base+0x15fc>
   175c0:	movw	r0, #0
   175c4:	movt	r0, #26163	; 0x6633
   175c8:	subs	r0, sl, r0
   175cc:	sbcs	r0, r7, r3
   175d0:	bcs	1782c <main@@Base+0x1aa4>
   175d4:	movw	r0, #29281	; 0x7261
   175d8:	movt	r0, #24946	; 0x6172
   175dc:	eor	r1, sl, r0
   175e0:	eor	r0, r7, r3
   175e4:	orrs	r1, r1, r0
   175e8:	bne	17a2c <main@@Base+0x1ca4>
   175ec:	add	r7, r8, #8
   175f0:	mov	r0, r7
   175f4:	mov	r1, r4
   175f8:	bl	196a8 <main@@Base+0x3920>
   175fc:	movw	r2, #26989	; 0x696d
   17600:	movt	r2, #29810	; 0x7472
   17604:	subs	r2, r2, r0
   17608:	movw	r5, #26227	; 0x6673
   1760c:	movt	r5, #31087	; 0x796f
   17610:	sbcs	r2, r5, r1
   17614:	bcc	17c74 <main@@Base+0x1eec>
   17618:	movw	r2, #29797	; 0x7465
   1761c:	movt	r2, #28530	; 0x6f72
   17620:	eor	r2, r0, r2
   17624:	eor	r3, r1, r5
   17628:	orrs	r2, r2, r3
   1762c:	beq	185fc <main@@Base+0x2874>
   17630:	movw	r2, #27763	; 0x6c73
   17634:	movt	r2, #28527	; 0x6f6f
   17638:	eor	r0, r0, r2
   1763c:	movw	r2, #26210	; 0x6662
   17640:	movt	r2, #31087	; 0x796f
   17644:	eor	r1, r1, r2
   17648:	orrs	r0, r0, r1
   1764c:	bne	186f4 <main@@Base+0x296c>
   17650:	ldr	r0, [sp, #28]
   17654:	mov	r1, r7
   17658:	mov	r2, r4
   1765c:	mov	r3, #8
   17660:	bl	196ac <main@@Base+0x3924>
   17664:	mov	r9, r0
   17668:	cmp	r7, r0
   1766c:	add	r8, sp, #52	; 0x34
   17670:	beq	168bc <main@@Base+0xb34>
   17674:	ldr	r0, [sp, #28]
   17678:	ldr	r0, [r0]
   1767c:	mov	r1, #1
   17680:	mov	r2, #1
   17684:	mvn	r3, #0
   17688:	bl	223f4 <flatcc_builder_start_vector@@Base>
   1768c:	cmp	r0, #0
   17690:	bne	166c0 <main@@Base+0x938>
   17694:	ldr	r0, [sp, #28]
   17698:	mov	r1, r9
   1769c:	mov	r2, r4
   176a0:	mov	r3, r8
   176a4:	bl	1a22c <main@@Base+0x44a4>
   176a8:	mov	r9, r0
   176ac:	ldr	r0, [sp, #52]	; 0x34
   176b0:	cmp	r0, #0
   176b4:	beq	17774 <main@@Base+0x19ec>
   176b8:	mov	r0, #0
   176bc:	strb	r0, [sp, #32]
   176c0:	ldr	r0, [sp, #28]
   176c4:	ldr	r0, [r0]
   176c8:	mov	r1, #1
   176cc:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   176d0:	cmp	r0, #0
   176d4:	beq	166c0 <main@@Base+0x938>
   176d8:	mov	r7, r0
   176dc:	ldr	r0, [sp, #28]
   176e0:	mov	r1, r9
   176e4:	mov	r2, r4
   176e8:	mov	r5, r4
   176ec:	add	r4, sp, #32
   176f0:	mov	r3, r4
   176f4:	bl	1b1e4 <main@@Base+0x545c>
   176f8:	mov	r6, r0
   176fc:	cmp	r9, r0
   17700:	beq	17710 <main@@Base+0x1988>
   17704:	mov	r9, r6
   17708:	mov	r4, r5
   1770c:	b	17740 <main@@Base+0x19b8>
   17710:	str	r4, [sp]
   17714:	ldr	r0, [sp, #28]
   17718:	mov	r1, r6
   1771c:	mov	r2, r5
   17720:	movw	r3, #32968	; 0x80c8
   17724:	movt	r3, #4
   17728:	bl	1b298 <main@@Base+0x5510>
   1772c:	mov	r9, r0
   17730:	cmp	r0, r6
   17734:	mov	r4, r5
   17738:	cmpne	r9, r4
   1773c:	beq	166c0 <main@@Base+0x938>
   17740:	ldrb	r1, [sp, #32]
   17744:	mov	r0, r7
   17748:	bl	1b3b0 <main@@Base+0x5628>
   1774c:	ldr	r0, [sp, #28]
   17750:	mov	r1, r9
   17754:	mov	r2, r4
   17758:	mov	r3, r8
   1775c:	bl	1a484 <main@@Base+0x46fc>
   17760:	mov	r9, r0
   17764:	ldr	r0, [sp, #52]	; 0x34
   17768:	cmp	r0, #0
   1776c:	ldr	r6, [sp, #24]
   17770:	bne	176b8 <main@@Base+0x1930>
   17774:	ldr	r0, [sp, #28]
   17778:	ldr	r0, [r0]
   1777c:	bl	23044 <flatcc_builder_end_vector@@Base>
   17780:	str	r0, [sp, #48]	; 0x30
   17784:	cmp	r0, #0
   17788:	beq	166c0 <main@@Base+0x938>
   1778c:	ldr	r0, [sp, #28]
   17790:	ldr	r0, [r0]
   17794:	mov	r1, #24
   17798:	b	17384 <main@@Base+0x15fc>
   1779c:	movw	r0, #29555	; 0x7373
   177a0:	movt	r0, #29797	; 0x7465
   177a4:	cmp	r7, r0
   177a8:	movw	r1, #29285	; 0x7265
   177ac:	movt	r1, #28769	; 0x7061
   177b0:	movw	r2, #24430	; 0x5f6e
   177b4:	movt	r2, #28276	; 0x6e74
   177b8:	bhi	17ae4 <main@@Base+0x1d5c>
   177bc:	subs	r0, sl, r2
   177c0:	sbcs	r0, r7, r1
   177c4:	bcs	17d24 <main@@Base+0x1f9c>
   177c8:	movw	r0, #28005	; 0x6d65
   177cc:	movt	r0, #28257	; 0x6e61
   177d0:	teq	r7, r0
   177d4:	bne	189ac <main@@Base+0x2c24>
   177d8:	ldr	r0, [sp, #28]
   177dc:	mov	r1, r8
   177e0:	mov	r2, r4
   177e4:	mov	r3, #4
   177e8:	bl	196ac <main@@Base+0x3924>
   177ec:	mov	r1, r0
   177f0:	cmp	r8, r0
   177f4:	beq	185f4 <main@@Base+0x286c>
   177f8:	ldr	r0, [sp, #28]
   177fc:	mov	r2, r4
   17800:	add	r3, sp, #48	; 0x30
   17804:	bl	277b4 <flatcc_json_parser_build_string@@Base>
   17808:	mov	r9, r0
   1780c:	ldr	r0, [sp, #48]	; 0x30
   17810:	cmp	r0, #0
   17814:	add	r8, sp, #52	; 0x34
   17818:	beq	166c0 <main@@Base+0x938>
   1781c:	ldr	r0, [sp, #28]
   17820:	ldr	r0, [r0]
   17824:	mov	r1, #3
   17828:	b	17384 <main@@Base+0x15fc>
   1782c:	movw	r1, #29544	; 0x7368
   17830:	movt	r1, #26721	; 0x6861
   17834:	subs	r0, sl, r1
   17838:	sbcs	r0, r7, r3
   1783c:	bcs	17bc4 <main@@Base+0x1e3c>
   17840:	eor	r0, r7, r3
   17844:	bfc	sl, #0, #16
   17848:	movw	r1, #0
   1784c:	movt	r1, #26163	; 0x6633
   17850:	eor	r1, sl, r1
   17854:	orrs	r0, r1, r0
   17858:	bne	189ac <main@@Base+0x2c24>
   1785c:	ldr	r0, [sp, #28]
   17860:	mov	r1, r8
   17864:	mov	r2, r4
   17868:	mov	r3, #6
   1786c:	bl	196ac <main@@Base+0x3924>
   17870:	mov	r6, r0
   17874:	cmp	r8, r0
   17878:	beq	18bd0 <main@@Base+0x2e48>
   1787c:	mov	r0, #0
   17880:	str	r0, [sp, #32]
   17884:	ldr	r0, [sp, #28]
   17888:	mov	r1, r6
   1788c:	mov	r2, r4
   17890:	mov	r5, r4
   17894:	add	r4, sp, #32
   17898:	mov	r3, r4
   1789c:	bl	26c68 <flatcc_json_parser_float@@Base>
   178a0:	mov	r7, r0
   178a4:	cmp	r6, r0
   178a8:	add	r8, sp, #52	; 0x34
   178ac:	beq	189c4 <main@@Base+0x2c3c>
   178b0:	mov	r9, r7
   178b4:	ldr	r6, [sp, #24]
   178b8:	mov	r4, r5
   178bc:	b	189f8 <main@@Base+0x2c70>
   178c0:	movw	r0, #65535	; 0xffff
   178c4:	movt	r0, #26735	; 0x686f
   178c8:	cmp	r7, r0
   178cc:	bhi	17de8 <main@@Base+0x2060>
   178d0:	movw	r0, #25976	; 0x6578
   178d4:	movt	r0, #26220	; 0x666c
   178d8:	teq	r7, r0
   178dc:	bne	189ac <main@@Base+0x2c24>
   178e0:	ldr	r0, [sp, #28]
   178e4:	mov	r1, r8
   178e8:	mov	r2, r4
   178ec:	mov	r3, #4
   178f0:	bl	196ac <main@@Base+0x3924>
   178f4:	mov	r9, r0
   178f8:	cmp	r8, r0
   178fc:	beq	18838 <main@@Base+0x2ab0>
   17900:	ldr	r0, [sp, #28]
   17904:	ldr	r0, [r0]
   17908:	mov	r1, #1
   1790c:	mov	r2, #1
   17910:	mvn	r3, #0
   17914:	bl	223f4 <flatcc_builder_start_vector@@Base>
   17918:	cmp	r0, #0
   1791c:	add	r8, sp, #52	; 0x34
   17920:	bne	166c0 <main@@Base+0x938>
   17924:	ldr	r0, [sp, #28]
   17928:	mov	r1, r9
   1792c:	mov	r2, r4
   17930:	mov	r3, r8
   17934:	bl	1a22c <main@@Base+0x44a4>
   17938:	mov	r9, r0
   1793c:	ldr	r0, [sp, #52]	; 0x34
   17940:	cmp	r0, #0
   17944:	beq	17a04 <main@@Base+0x1c7c>
   17948:	mov	r0, #0
   1794c:	strb	r0, [sp, #32]
   17950:	ldr	r0, [sp, #28]
   17954:	ldr	r0, [r0]
   17958:	mov	r1, #1
   1795c:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   17960:	cmp	r0, #0
   17964:	beq	166c0 <main@@Base+0x938>
   17968:	mov	r7, r0
   1796c:	ldr	r0, [sp, #28]
   17970:	mov	r1, r9
   17974:	mov	r2, r4
   17978:	mov	r5, r4
   1797c:	add	r4, sp, #32
   17980:	mov	r3, r4
   17984:	bl	1a2bc <main@@Base+0x4534>
   17988:	mov	r6, r0
   1798c:	cmp	r9, r0
   17990:	beq	179a0 <main@@Base+0x1c18>
   17994:	mov	r9, r6
   17998:	mov	r4, r5
   1799c:	b	179d0 <main@@Base+0x1c48>
   179a0:	str	r4, [sp]
   179a4:	ldr	r0, [sp, #28]
   179a8:	mov	r1, r6
   179ac:	mov	r2, r5
   179b0:	movw	r3, #32904	; 0x8088
   179b4:	movt	r3, #4
   179b8:	bl	1a34c <main@@Base+0x45c4>
   179bc:	mov	r9, r0
   179c0:	cmp	r0, r6
   179c4:	mov	r4, r5
   179c8:	cmpne	r9, r4
   179cc:	beq	166c0 <main@@Base+0x938>
   179d0:	ldrb	r1, [sp, #32]
   179d4:	mov	r0, r7
   179d8:	bl	1a464 <main@@Base+0x46dc>
   179dc:	ldr	r0, [sp, #28]
   179e0:	mov	r1, r9
   179e4:	mov	r2, r4
   179e8:	mov	r3, r8
   179ec:	bl	1a484 <main@@Base+0x46fc>
   179f0:	mov	r9, r0
   179f4:	ldr	r0, [sp, #52]	; 0x34
   179f8:	cmp	r0, #0
   179fc:	ldr	r6, [sp, #24]
   17a00:	bne	17948 <main@@Base+0x1bc0>
   17a04:	ldr	r0, [sp, #28]
   17a08:	ldr	r0, [r0]
   17a0c:	bl	23044 <flatcc_builder_end_vector@@Base>
   17a10:	str	r0, [sp, #48]	; 0x30
   17a14:	cmp	r0, #0
   17a18:	beq	166c0 <main@@Base+0x938>
   17a1c:	ldr	r0, [sp, #28]
   17a20:	ldr	r0, [r0]
   17a24:	mov	r1, #30
   17a28:	b	17384 <main@@Base+0x15fc>
   17a2c:	movw	r1, #28788	; 0x7074
   17a30:	movt	r1, #25965	; 0x656d
   17a34:	subs	r1, sl, r1
   17a38:	sbcs	r1, r7, r3
   17a3c:	bcs	17e78 <main@@Base+0x20f0>
   17a40:	movw	r1, #28524	; 0x6f6c
   17a44:	movt	r1, #25199	; 0x626f
   17a48:	eor	r1, sl, r1
   17a4c:	orrs	r1, r1, r0
   17a50:	beq	186fc <main@@Base+0x2974>
   17a54:	movw	r1, #29541	; 0x7365
   17a58:	movt	r1, #25185	; 0x6261
   17a5c:	eor	r1, sl, r1
   17a60:	orrs	r0, r1, r0
   17a64:	bne	189ac <main@@Base+0x2c24>
   17a68:	add	r6, r8, #8
   17a6c:	mov	r0, r6
   17a70:	mov	r1, r4
   17a74:	bl	196a8 <main@@Base+0x3920>
   17a78:	bfc	r1, #0, #16
   17a7c:	movw	r0, #0
   17a80:	movt	r0, #13876	; 0x3634
   17a84:	teq	r1, r0
   17a88:	bne	18bd0 <main@@Base+0x2e48>
   17a8c:	ldr	r0, [sp, #28]
   17a90:	mov	r1, r6
   17a94:	mov	r2, r4
   17a98:	mov	r3, #2
   17a9c:	bl	196ac <main@@Base+0x3924>
   17aa0:	mov	r1, r0
   17aa4:	cmp	r6, r0
   17aa8:	add	r8, sp, #52	; 0x34
   17aac:	beq	16764 <main@@Base+0x9dc>
   17ab0:	ldr	r0, [sp, #28]
   17ab4:	mov	r2, r4
   17ab8:	add	r3, sp, #48	; 0x30
   17abc:	bl	1b5fc <main@@Base+0x5874>
   17ac0:	mov	r9, r0
   17ac4:	ldr	r0, [sp, #48]	; 0x30
   17ac8:	cmp	r0, #0
   17acc:	ldr	r6, [sp, #24]
   17ad0:	beq	166c0 <main@@Base+0x938>
   17ad4:	ldr	r0, [sp, #28]
   17ad8:	ldr	r0, [r0]
   17adc:	mov	r1, #35	; 0x23
   17ae0:	b	17384 <main@@Base+0x15fc>
   17ae4:	eor	r6, r7, r3
   17ae8:	and	r4, sl, #-16777216	; 0xff000000
   17aec:	eor	r0, r4, #872415232	; 0x34000000
   17af0:	orrs	r0, r0, r6
   17af4:	bne	17f10 <main@@Base+0x2188>
   17af8:	ldr	r0, [sp, #28]
   17afc:	mov	r1, r8
   17b00:	ldr	r4, [sp, #20]
   17b04:	mov	r2, r4
   17b08:	mov	r3, #5
   17b0c:	bl	196ac <main@@Base+0x3924>
   17b10:	mov	r9, r0
   17b14:	cmp	r8, r0
   17b18:	beq	18b34 <main@@Base+0x2dac>
   17b1c:	ldr	r0, [sp, #28]
   17b20:	ldr	r0, [r0]
   17b24:	mov	r1, #4
   17b28:	mov	r2, #2
   17b2c:	mvn	r3, #-1073741824	; 0xc0000000
   17b30:	bl	223f4 <flatcc_builder_start_vector@@Base>
   17b34:	cmp	r0, #0
   17b38:	bne	166c0 <main@@Base+0x938>
   17b3c:	ldr	r5, [sp, #28]
   17b40:	mov	r0, r5
   17b44:	mov	r1, r9
   17b48:	mov	r2, r4
   17b4c:	add	r8, sp, #52	; 0x34
   17b50:	mov	r3, r8
   17b54:	bl	1a22c <main@@Base+0x44a4>
   17b58:	mov	r9, r0
   17b5c:	ldr	r0, [r5]
   17b60:	ldr	r1, [sp, #52]	; 0x34
   17b64:	cmp	r1, #0
   17b68:	beq	18a28 <main@@Base+0x2ca0>
   17b6c:	ldr	r6, [sp, #24]
   17b70:	mov	r1, #1
   17b74:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   17b78:	cmp	r0, #0
   17b7c:	beq	166c0 <main@@Base+0x938>
   17b80:	mov	r3, r0
   17b84:	ldr	r5, [sp, #28]
   17b88:	mov	r0, r5
   17b8c:	mov	r1, r9
   17b90:	mov	r2, r4
   17b94:	bl	1ac80 <main@@Base+0x4ef8>
   17b98:	mov	r1, r0
   17b9c:	mov	r0, r5
   17ba0:	mov	r2, r4
   17ba4:	mov	r3, r8
   17ba8:	bl	1a484 <main@@Base+0x46fc>
   17bac:	mov	r9, r0
   17bb0:	ldr	r0, [r5]
   17bb4:	ldr	r1, [sp, #52]	; 0x34
   17bb8:	cmp	r1, #0
   17bbc:	bne	17b70 <main@@Base+0x1de8>
   17bc0:	b	18a2c <main@@Base+0x2ca4>
   17bc4:	eor	r1, sl, r1
   17bc8:	eor	r0, r7, r3
   17bcc:	orrs	r1, r1, r0
   17bd0:	bne	17f78 <main@@Base+0x21f0>
   17bd4:	add	r7, r8, #8
   17bd8:	mov	r0, r7
   17bdc:	mov	r1, r4
   17be0:	bl	196a8 <main@@Base+0x3920>
   17be4:	movw	r3, #30257	; 0x7631
   17be8:	movt	r3, #26222	; 0x666e
   17bec:	subs	r2, r0, r3
   17bf0:	movw	r2, #13407	; 0x345f
   17bf4:	movt	r2, #29494	; 0x7336
   17bf8:	sbcs	r2, r1, r2
   17bfc:	bcs	18130 <main@@Base+0x23a8>
   17c00:	eor	r0, r0, r3
   17c04:	ldr	r2, [sp, #16]
   17c08:	eor	r1, r1, r2
   17c0c:	orrs	r0, r0, r1
   17c10:	add	r8, sp, #52	; 0x34
   17c14:	bne	16a4c <main@@Base+0xcc4>
   17c18:	ldr	r0, [sp, #28]
   17c1c:	mov	r1, r7
   17c20:	mov	r2, r4
   17c24:	mov	r3, #8
   17c28:	bl	196ac <main@@Base+0x3924>
   17c2c:	mov	r6, r0
   17c30:	cmp	r7, r0
   17c34:	beq	16b3c <main@@Base+0xdb4>
   17c38:	mov	r0, #0
   17c3c:	str	r0, [sp, #32]
   17c40:	ldr	r0, [sp, #28]
   17c44:	mov	r1, r6
   17c48:	mov	r2, r4
   17c4c:	mov	r5, r4
   17c50:	add	r4, sp, #32
   17c54:	mov	r3, r4
   17c58:	bl	1bcf8 <main@@Base+0x5f70>
   17c5c:	mov	r7, r0
   17c60:	cmp	r6, r0
   17c64:	beq	16cd0 <main@@Base+0xf48>
   17c68:	mov	r9, r7
   17c6c:	mov	r4, r5
   17c70:	b	16d00 <main@@Base+0xf78>
   17c74:	movw	r2, #27749	; 0x6c65
   17c78:	movt	r2, #24930	; 0x6162
   17c7c:	eor	r2, r0, r2
   17c80:	movw	r3, #26228	; 0x6674
   17c84:	movt	r3, #31087	; 0x796f
   17c88:	eor	r3, r1, r3
   17c8c:	orrs	r2, r2, r3
   17c90:	beq	1875c <main@@Base+0x29d4>
   17c94:	movw	r2, #26990	; 0x696e
   17c98:	movt	r2, #29810	; 0x7472
   17c9c:	eor	r0, r0, r2
   17ca0:	eor	r1, r1, r5
   17ca4:	orrs	r0, r0, r1
   17ca8:	bne	186e8 <main@@Base+0x2960>
   17cac:	add	r7, r8, #16
   17cb0:	mov	r0, r7
   17cb4:	mov	r1, r4
   17cb8:	bl	196a8 <main@@Base+0x3920>
   17cbc:	mov	r0, r1
   17cc0:	bfc	r0, #0, #16
   17cc4:	movw	r2, #0
   17cc8:	movt	r2, #26418	; 0x6732
   17ccc:	teq	r0, r2
   17cd0:	bne	1676c <main@@Base+0x9e4>
   17cd4:	ldr	r0, [sp, #28]
   17cd8:	mov	r1, r7
   17cdc:	mov	r2, r4
   17ce0:	mov	r3, #2
   17ce4:	bl	196ac <main@@Base+0x3924>
   17ce8:	mov	r9, r0
   17cec:	cmp	r7, r0
   17cf0:	add	r8, sp, #52	; 0x34
   17cf4:	beq	16a64 <main@@Base+0xcdc>
   17cf8:	ldr	r0, [sp, #28]
   17cfc:	ldr	r0, [r0]
   17d00:	bl	22484 <flatcc_builder_start_offset_vector@@Base>
   17d04:	cmp	r0, #0
   17d08:	bne	166c0 <main@@Base+0x938>
   17d0c:	ldr	r0, [sp, #28]
   17d10:	mov	r1, r9
   17d14:	mov	r2, r4
   17d18:	mov	r3, r8
   17d1c:	bl	1a22c <main@@Base+0x44a4>
   17d20:	b	180e0 <main@@Base+0x2358>
   17d24:	eor	r0, sl, r2
   17d28:	eor	r1, r7, r1
   17d2c:	orrs	r0, r0, r1
   17d30:	bne	181c8 <main@@Base+0x2440>
   17d34:	add	r6, r8, #8
   17d38:	mov	r0, r6
   17d3c:	mov	r1, r4
   17d40:	bl	196a8 <main@@Base+0x3920>
   17d44:	movw	r2, #25971	; 0x6573
   17d48:	movt	r2, #24941	; 0x616d
   17d4c:	eor	r1, r1, r2
   17d50:	movw	r2, #25445	; 0x6365
   17d54:	movt	r2, #28769	; 0x7061
   17d58:	eor	r0, r0, r2
   17d5c:	orrs	r0, r0, r1
   17d60:	bne	18bd0 <main@@Base+0x2e48>
   17d64:	add	r7, r8, #16
   17d68:	mov	r0, r7
   17d6c:	mov	r1, r4
   17d70:	bl	196a8 <main@@Base+0x3920>
   17d74:	movw	r2, #25971	; 0x6573
   17d78:	movt	r2, #24436	; 0x5f74
   17d7c:	eor	r1, r1, r2
   17d80:	and	r0, r0, #-16777216	; 0xff000000
   17d84:	eor	r0, r0, #1946157056	; 0x74000000
   17d88:	orrs	r0, r0, r1
   17d8c:	bne	168c4 <main@@Base+0xb3c>
   17d90:	ldr	r0, [sp, #28]
   17d94:	mov	r1, r7
   17d98:	mov	r2, r4
   17d9c:	mov	r3, #5
   17da0:	bl	196ac <main@@Base+0x3924>
   17da4:	mov	r1, r0
   17da8:	cmp	r7, r0
   17dac:	ldr	r6, [sp, #24]
   17db0:	add	r8, sp, #52	; 0x34
   17db4:	beq	16e64 <main@@Base+0x10dc>
   17db8:	ldr	r0, [sp, #28]
   17dbc:	mov	r2, r4
   17dc0:	add	r3, sp, #48	; 0x30
   17dc4:	bl	1a70c <main@@Base+0x4984>
   17dc8:	mov	r9, r0
   17dcc:	ldr	r0, [sp, #48]	; 0x30
   17dd0:	cmp	r0, #0
   17dd4:	beq	166c0 <main@@Base+0x938>
   17dd8:	ldr	r0, [sp, #28]
   17ddc:	ldr	r0, [r0]
   17de0:	mov	r1, #34	; 0x22
   17de4:	b	17384 <main@@Base+0x15fc>
   17de8:	movw	r2, #28530	; 0x6f72
   17dec:	movt	r2, #28276	; 0x6e74
   17df0:	subs	r0, sl, r2
   17df4:	movw	r1, #30309	; 0x7665
   17df8:	movt	r1, #26990	; 0x696e
   17dfc:	sbcs	r0, r7, r1
   17e00:	bcs	1823c <main@@Base+0x24b4>
   17e04:	bfc	r7, #0, #16
   17e08:	movw	r0, #0
   17e0c:	movt	r0, #26736	; 0x6870
   17e10:	teq	r7, r0
   17e14:	bne	189ac <main@@Base+0x2c24>
   17e18:	ldr	r0, [sp, #28]
   17e1c:	mov	r1, r8
   17e20:	mov	r2, r4
   17e24:	mov	r3, #2
   17e28:	bl	196ac <main@@Base+0x3924>
   17e2c:	mov	r6, r0
   17e30:	cmp	r8, r0
   17e34:	beq	18bd0 <main@@Base+0x2e48>
   17e38:	mov	r0, #0
   17e3c:	strh	r0, [sp, #32]
   17e40:	ldr	r0, [sp, #28]
   17e44:	mov	r1, r6
   17e48:	mov	r2, r4
   17e4c:	mov	r5, r4
   17e50:	add	r4, sp, #32
   17e54:	mov	r3, r4
   17e58:	bl	1a544 <main@@Base+0x47bc>
   17e5c:	mov	r7, r0
   17e60:	cmp	r6, r0
   17e64:	add	r8, sp, #52	; 0x34
   17e68:	beq	16d48 <main@@Base+0xfc0>
   17e6c:	mov	r9, r7
   17e70:	ldr	r6, [sp, #24]
   17e74:	b	16d7c <main@@Base+0xff4>
   17e78:	mvn	r1, #-1711276032	; 0x9a000000
   17e7c:	subs	r1, r1, sl
   17e80:	sbcs	r1, r3, r7
   17e84:	bcc	183b8 <main@@Base+0x2630>
   17e88:	movw	r1, #28788	; 0x7074
   17e8c:	movt	r1, #25965	; 0x656d
   17e90:	eor	r1, sl, r1
   17e94:	orrs	r0, r1, r0
   17e98:	bne	189ac <main@@Base+0x2c24>
   17e9c:	add	r6, r8, #8
   17ea0:	mov	r0, r6
   17ea4:	mov	r1, r4
   17ea8:	bl	196a8 <main@@Base+0x3920>
   17eac:	and	r0, r1, #-16777216	; 0xff000000
   17eb0:	teq	r0, #2030043136	; 0x79000000
   17eb4:	bne	18bd0 <main@@Base+0x2e48>
   17eb8:	ldr	r0, [sp, #28]
   17ebc:	mov	r1, r6
   17ec0:	mov	r2, r4
   17ec4:	mov	r3, #1
   17ec8:	bl	196ac <main@@Base+0x3924>
   17ecc:	mov	r1, r0
   17ed0:	cmp	r6, r0
   17ed4:	add	r8, sp, #52	; 0x34
   17ed8:	beq	16764 <main@@Base+0x9dc>
   17edc:	ldr	r0, [sp, #28]
   17ee0:	mov	r2, r4
   17ee4:	add	r3, sp, #48	; 0x30
   17ee8:	bl	1b878 <main@@Base+0x5af0>
   17eec:	mov	r9, r0
   17ef0:	ldr	r0, [sp, #48]	; 0x30
   17ef4:	cmp	r0, #0
   17ef8:	ldr	r6, [sp, #24]
   17efc:	beq	166c0 <main@@Base+0x938>
   17f00:	ldr	r0, [sp, #28]
   17f04:	ldr	r0, [r0]
   17f08:	mov	r1, #14
   17f0c:	b	17384 <main@@Base+0x15fc>
   17f10:	teq	r7, r3
   17f14:	bne	18a58 <main@@Base+0x2cd0>
   17f18:	ldr	r9, [sp, #28]
   17f1c:	mov	r0, r9
   17f20:	mov	r1, r8
   17f24:	ldr	r5, [sp, #20]
   17f28:	mov	r2, r5
   17f2c:	mov	r3, #4
   17f30:	bl	196ac <main@@Base+0x3924>
   17f34:	mov	r1, r0
   17f38:	cmp	r8, r0
   17f3c:	beq	18a4c <main@@Base+0x2cc4>
   17f40:	ldr	r0, [sp, #44]	; 0x2c
   17f44:	mov	r2, #8
   17f48:	str	r2, [sp]
   17f4c:	str	r0, [sp, #4]
   17f50:	movw	r0, #44688	; 0xae90
   17f54:	movt	r0, #1
   17f58:	str	r0, [sp, #8]
   17f5c:	mov	r0, r9
   17f60:	mov	r2, r5
   17f64:	mov	r3, #0
   17f68:	bl	279c8 <flatcc_json_parser_union@@Base>
   17f6c:	mov	r9, r0
   17f70:	mov	r4, r5
   17f74:	b	18be4 <main@@Base+0x2e5c>
   17f78:	movw	r3, #24431	; 0x5f6f
   17f7c:	movt	r3, #28530	; 0x6f72
   17f80:	subs	r1, sl, r3
   17f84:	movw	r2, #25460	; 0x6374
   17f88:	movt	r2, #30309	; 0x7665
   17f8c:	sbcs	r1, r7, r2
   17f90:	bcs	18444 <main@@Base+0x26bc>
   17f94:	movw	r1, #29556	; 0x7374
   17f98:	movt	r1, #28261	; 0x6e65
   17f9c:	eor	r1, sl, r1
   17fa0:	orrs	r0, r1, r0
   17fa4:	bne	189ac <main@@Base+0x2c24>
   17fa8:	add	r6, r8, #8
   17fac:	mov	r0, r6
   17fb0:	mov	r1, r4
   17fb4:	bl	196a8 <main@@Base+0x3920>
   17fb8:	movw	r2, #26220	; 0x666c
   17fbc:	movt	r2, #25956	; 0x6564
   17fc0:	eor	r1, r1, r2
   17fc4:	movw	r2, #25205	; 0x6275
   17fc8:	movt	r2, #24948	; 0x6174
   17fcc:	eor	r0, r0, r2
   17fd0:	orrs	r0, r0, r1
   17fd4:	bne	18bd0 <main@@Base+0x2e48>
   17fd8:	add	r6, r8, #16
   17fdc:	mov	r0, r6
   17fe0:	mov	r1, r4
   17fe4:	bl	196a8 <main@@Base+0x3920>
   17fe8:	movw	r0, #25970	; 0x6572
   17fec:	movt	r0, #26214	; 0x6666
   17ff0:	teq	r1, r0
   17ff4:	bne	18bd0 <main@@Base+0x2e48>
   17ff8:	ldr	r0, [sp, #28]
   17ffc:	mov	r1, r6
   18000:	mov	r2, r4
   18004:	mov	r3, #4
   18008:	bl	196ac <main@@Base+0x3924>
   1800c:	mov	r9, r0
   18010:	cmp	r6, r0
   18014:	add	r8, sp, #52	; 0x34
   18018:	beq	168b0 <main@@Base+0xb28>
   1801c:	cmp	r9, r4
   18020:	ldr	r6, [sp, #24]
   18024:	beq	171b4 <main@@Base+0x142c>
   18028:	ldrb	r0, [r9]
   1802c:	cmp	r0, #91	; 0x5b
   18030:	bne	171b4 <main@@Base+0x142c>
   18034:	ldr	r0, [sp, #28]
   18038:	ldr	r0, [r0]
   1803c:	mov	r1, #1
   18040:	mov	r2, #1
   18044:	mvn	r3, #0
   18048:	bl	223f4 <flatcc_builder_start_vector@@Base>
   1804c:	cmp	r0, #0
   18050:	bne	166c0 <main@@Base+0x938>
   18054:	ldr	r0, [sp, #28]
   18058:	mov	r1, r9
   1805c:	mov	r2, r4
   18060:	mov	r3, r8
   18064:	bl	1a22c <main@@Base+0x44a4>
   18068:	b	16a90 <main@@Base+0xd08>
   1806c:	ldr	r0, [sp, #28]
   18070:	mov	r1, r8
   18074:	mov	r2, r4
   18078:	mov	r3, #5
   1807c:	bl	196ac <main@@Base+0x3924>
   18080:	mov	r6, r0
   18084:	cmp	r8, r0
   18088:	beq	18bd0 <main@@Base+0x2e48>
   1808c:	mov	r0, #0
   18090:	strb	r0, [sp, #32]
   18094:	ldr	r0, [sp, #28]
   18098:	mov	r1, r6
   1809c:	mov	r2, r4
   180a0:	add	r8, sp, #32
   180a4:	mov	r3, r8
   180a8:	bl	1a064 <main@@Base+0x42dc>
   180ac:	mov	r7, r0
   180b0:	cmp	r6, r0
   180b4:	beq	16834 <main@@Base+0xaac>
   180b8:	mov	r9, r7
   180bc:	ldr	r6, [sp, #24]
   180c0:	b	16864 <main@@Base+0xadc>
   180c4:	ldr	r1, [sp, #48]	; 0x30
   180c8:	str	r1, [r0]
   180cc:	ldr	r0, [sp, #28]
   180d0:	mov	r1, r9
   180d4:	mov	r2, r4
   180d8:	mov	r3, r8
   180dc:	bl	1a484 <main@@Base+0x46fc>
   180e0:	mov	r9, r0
   180e4:	ldr	r0, [sp, #52]	; 0x34
   180e8:	cmp	r0, #0
   180ec:	beq	16e14 <main@@Base+0x108c>
   180f0:	ldr	r0, [sp, #28]
   180f4:	mov	r1, r9
   180f8:	mov	r2, r4
   180fc:	add	r3, sp, #48	; 0x30
   18100:	bl	277b4 <flatcc_json_parser_build_string@@Base>
   18104:	mov	r9, r0
   18108:	ldr	r0, [sp, #48]	; 0x30
   1810c:	cmp	r0, #0
   18110:	beq	166c0 <main@@Base+0x938>
   18114:	ldr	r0, [sp, #28]
   18118:	ldr	r0, [r0]
   1811c:	mov	r1, #1
   18120:	bl	21fd0 <flatcc_builder_extend_offset_vector@@Base>
   18124:	cmp	r0, #0
   18128:	bne	180c4 <main@@Base+0x233c>
   1812c:	b	166c0 <main@@Base+0x938>
   18130:	movw	r2, #30256	; 0x7630
   18134:	movt	r2, #26222	; 0x666e
   18138:	subs	r2, r2, r0
   1813c:	movw	r2, #12895	; 0x325f
   18140:	movt	r2, #30003	; 0x7533
   18144:	sbcs	r2, r2, r1
   18148:	add	r8, sp, #52	; 0x34
   1814c:	eor	r0, r0, r3
   18150:	bcc	18844 <main@@Base+0x2abc>
   18154:	movw	r2, #13407	; 0x345f
   18158:	movt	r2, #29494	; 0x7336
   1815c:	eor	r1, r1, r2
   18160:	orrs	r0, r0, r1
   18164:	bne	16a4c <main@@Base+0xcc4>
   18168:	ldr	r0, [sp, #28]
   1816c:	mov	r1, r7
   18170:	mov	r2, r4
   18174:	mov	r3, #8
   18178:	bl	196ac <main@@Base+0x3924>
   1817c:	mov	r6, r0
   18180:	cmp	r7, r0
   18184:	beq	16e6c <main@@Base+0x10e4>
   18188:	mov	r0, #0
   1818c:	str	r0, [sp, #36]	; 0x24
   18190:	str	r0, [sp, #32]
   18194:	ldr	r0, [sp, #28]
   18198:	mov	r1, r6
   1819c:	mov	r2, r4
   181a0:	mov	r5, r4
   181a4:	add	r4, sp, #32
   181a8:	mov	r3, r4
   181ac:	bl	1bec0 <main@@Base+0x6138>
   181b0:	mov	r7, r0
   181b4:	cmp	r6, r0
   181b8:	beq	17004 <main@@Base+0x127c>
   181bc:	mov	r9, r7
   181c0:	mov	r4, r5
   181c4:	b	17034 <main@@Base+0x12ac>
   181c8:	bic	r0, r7, #255	; 0xff
   181cc:	movw	r1, #29440	; 0x7300
   181d0:	movt	r1, #28783	; 0x706f
   181d4:	teq	r0, r1
   181d8:	bne	189ac <main@@Base+0x2c24>
   181dc:	ldr	r0, [sp, #28]
   181e0:	mov	r1, r8
   181e4:	mov	r2, r4
   181e8:	mov	r3, #3
   181ec:	bl	196ac <main@@Base+0x3924>
   181f0:	mov	r9, r0
   181f4:	cmp	r8, r0
   181f8:	beq	18838 <main@@Base+0x2ab0>
   181fc:	ldr	r0, [sp, #28]
   18200:	ldr	r0, [r0]
   18204:	mov	r1, #0
   18208:	mov	r2, #32
   1820c:	mov	r3, #16
   18210:	bl	234dc <flatcc_builder_table_add@@Base>
   18214:	cmp	r0, #0
   18218:	add	r8, sp, #52	; 0x34
   1821c:	beq	166c0 <main@@Base+0x938>
   18220:	mov	r3, r0
   18224:	ldr	r0, [sp, #28]
   18228:	mov	r1, r9
   1822c:	mov	r2, r4
   18230:	bl	1a7f4 <main@@Base+0x4a6c>
   18234:	mov	r9, r0
   18238:	b	18bec <main@@Base+0x2e64>
   1823c:	eor	r0, sl, r2
   18240:	eor	r1, r7, r1
   18244:	orrs	r0, r0, r1
   18248:	bne	188c8 <main@@Base+0x2b40>
   1824c:	add	r6, r8, #8
   18250:	mov	r0, r6
   18254:	mov	r1, r4
   18258:	bl	196a8 <main@@Base+0x3920>
   1825c:	and	r0, r1, #-16777216	; 0xff000000
   18260:	teq	r0, #2030043136	; 0x79000000
   18264:	bne	18bd0 <main@@Base+0x2e48>
   18268:	ldr	r0, [sp, #28]
   1826c:	mov	r1, r6
   18270:	mov	r2, r4
   18274:	mov	r3, #1
   18278:	bl	196ac <main@@Base+0x3924>
   1827c:	mov	r9, r0
   18280:	cmp	r6, r0
   18284:	add	r8, sp, #52	; 0x34
   18288:	beq	168b0 <main@@Base+0xb28>
   1828c:	ldr	r0, [sp, #28]
   18290:	ldr	r0, [r0]
   18294:	mov	r1, #1
   18298:	mov	r2, #1
   1829c:	mvn	r3, #0
   182a0:	bl	223f4 <flatcc_builder_start_vector@@Base>
   182a4:	cmp	r0, #0
   182a8:	ldr	r6, [sp, #24]
   182ac:	bne	166c0 <main@@Base+0x938>
   182b0:	ldr	r0, [sp, #28]
   182b4:	mov	r1, r9
   182b8:	mov	r2, r4
   182bc:	mov	r3, r8
   182c0:	bl	1a22c <main@@Base+0x44a4>
   182c4:	mov	r9, r0
   182c8:	ldr	r0, [sp, #52]	; 0x34
   182cc:	cmp	r0, #0
   182d0:	beq	18390 <main@@Base+0x2608>
   182d4:	mov	r0, #0
   182d8:	strb	r0, [sp, #32]
   182dc:	ldr	r0, [sp, #28]
   182e0:	ldr	r0, [r0]
   182e4:	mov	r1, #1
   182e8:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   182ec:	cmp	r0, #0
   182f0:	beq	166c0 <main@@Base+0x938>
   182f4:	mov	r7, r0
   182f8:	ldr	r0, [sp, #28]
   182fc:	mov	r1, r9
   18300:	mov	r2, r4
   18304:	mov	r5, r4
   18308:	add	r4, sp, #32
   1830c:	mov	r3, r4
   18310:	bl	1a2bc <main@@Base+0x4534>
   18314:	mov	r6, r0
   18318:	cmp	r9, r0
   1831c:	beq	1832c <main@@Base+0x25a4>
   18320:	mov	r9, r6
   18324:	mov	r4, r5
   18328:	b	1835c <main@@Base+0x25d4>
   1832c:	str	r4, [sp]
   18330:	ldr	r0, [sp, #28]
   18334:	mov	r1, r6
   18338:	mov	r2, r5
   1833c:	movw	r3, #32928	; 0x80a0
   18340:	movt	r3, #4
   18344:	bl	1a34c <main@@Base+0x45c4>
   18348:	mov	r9, r0
   1834c:	cmp	r0, r6
   18350:	mov	r4, r5
   18354:	cmpne	r9, r4
   18358:	beq	166c0 <main@@Base+0x938>
   1835c:	ldrb	r1, [sp, #32]
   18360:	mov	r0, r7
   18364:	bl	1a464 <main@@Base+0x46dc>
   18368:	ldr	r0, [sp, #28]
   1836c:	mov	r1, r9
   18370:	mov	r2, r4
   18374:	mov	r3, r8
   18378:	bl	1a484 <main@@Base+0x46fc>
   1837c:	mov	r9, r0
   18380:	ldr	r0, [sp, #52]	; 0x34
   18384:	cmp	r0, #0
   18388:	ldr	r6, [sp, #24]
   1838c:	bne	182d4 <main@@Base+0x254c>
   18390:	ldr	r0, [sp, #28]
   18394:	ldr	r0, [r0]
   18398:	bl	23044 <flatcc_builder_end_vector@@Base>
   1839c:	str	r0, [sp, #48]	; 0x30
   183a0:	cmp	r0, #0
   183a4:	beq	166c0 <main@@Base+0x938>
   183a8:	ldr	r0, [sp, #28]
   183ac:	ldr	r0, [r0]
   183b0:	mov	r1, #5
   183b4:	b	17384 <main@@Base+0x15fc>
   183b8:	mov	r1, sl
   183bc:	bfc	r1, #0, #16
   183c0:	movw	r2, #0
   183c4:	movt	r2, #26163	; 0x6633
   183c8:	subs	r2, r2, #65536	; 0x10000
   183cc:	eor	r1, r1, r2
   183d0:	sbc	r2, r3, #0
   183d4:	eor	r2, r7, r2
   183d8:	orrs	r1, r1, r2
   183dc:	bne	18938 <main@@Base+0x2bb0>
   183e0:	ldr	r0, [sp, #28]
   183e4:	mov	r1, r8
   183e8:	mov	r2, r4
   183ec:	mov	r3, #6
   183f0:	bl	196ac <main@@Base+0x3924>
   183f4:	mov	r6, r0
   183f8:	cmp	r8, r0
   183fc:	beq	18bd0 <main@@Base+0x2e48>
   18400:	mov	r0, #0
   18404:	str	r0, [sp, #32]
   18408:	ldr	r0, [sp, #28]
   1840c:	mov	r1, r6
   18410:	mov	r2, r4
   18414:	mov	r8, r4
   18418:	add	r4, sp, #32
   1841c:	mov	r3, r4
   18420:	bl	26c68 <flatcc_json_parser_float@@Base>
   18424:	mov	r7, r0
   18428:	cmp	r6, r0
   1842c:	beq	16da8 <main@@Base+0x1020>
   18430:	mov	r9, r7
   18434:	ldr	r6, [sp, #24]
   18438:	mov	r4, r8
   1843c:	add	r8, sp, #52	; 0x34
   18440:	b	16de4 <main@@Base+0x105c>
   18444:	eor	r0, sl, r3
   18448:	eor	r1, r7, r2
   1844c:	orrs	r0, r0, r1
   18450:	bne	189ac <main@@Base+0x2c24>
   18454:	add	r7, r8, #8
   18458:	mov	r0, r7
   1845c:	mov	r1, r4
   18460:	bl	196a8 <main@@Base+0x3920>
   18464:	movw	r2, #25711	; 0x646f
   18468:	movt	r2, #26207	; 0x665f
   1846c:	eor	r2, r1, r2
   18470:	movw	r3, #27749	; 0x6c65
   18474:	movt	r3, #30050	; 0x7562
   18478:	eor	r3, r0, r3
   1847c:	orrs	r2, r3, r2
   18480:	bne	168d0 <main@@Base+0xb48>
   18484:	add	r6, r8, #16
   18488:	mov	r0, r6
   1848c:	mov	r1, r4
   18490:	bl	196a8 <main@@Base+0x3920>
   18494:	and	r0, r1, #-16777216	; 0xff000000
   18498:	teq	r0, #1929379840	; 0x73000000
   1849c:	bne	18bd0 <main@@Base+0x2e48>
   184a0:	ldr	r0, [sp, #28]
   184a4:	mov	r1, r6
   184a8:	mov	r2, r4
   184ac:	mov	r3, #1
   184b0:	bl	196ac <main@@Base+0x3924>
   184b4:	mov	r9, r0
   184b8:	cmp	r6, r0
   184bc:	add	r8, sp, #52	; 0x34
   184c0:	beq	168b0 <main@@Base+0xb28>
   184c4:	ldr	r0, [sp, #28]
   184c8:	ldr	r0, [r0]
   184cc:	mov	r1, #8
   184d0:	mov	r2, #8
   184d4:	mvn	r3, #-536870912	; 0xe0000000
   184d8:	bl	223f4 <flatcc_builder_start_vector@@Base>
   184dc:	cmp	r0, #0
   184e0:	ldr	r6, [sp, #24]
   184e4:	bne	166c0 <main@@Base+0x938>
   184e8:	ldr	r0, [sp, #28]
   184ec:	mov	r1, r9
   184f0:	mov	r2, r4
   184f4:	mov	r3, r8
   184f8:	bl	1a22c <main@@Base+0x44a4>
   184fc:	mov	r9, r0
   18500:	ldr	r0, [sp, #52]	; 0x34
   18504:	cmp	r0, #0
   18508:	beq	185cc <main@@Base+0x2844>
   1850c:	mov	r0, #0
   18510:	str	r0, [sp, #36]	; 0x24
   18514:	str	r0, [sp, #32]
   18518:	ldr	r0, [sp, #28]
   1851c:	ldr	r0, [r0]
   18520:	mov	r1, #1
   18524:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   18528:	cmp	r0, #0
   1852c:	beq	166c0 <main@@Base+0x938>
   18530:	mov	r7, r0
   18534:	ldr	r0, [sp, #28]
   18538:	mov	r1, r9
   1853c:	mov	r2, r4
   18540:	mov	r5, r4
   18544:	add	r4, sp, #32
   18548:	mov	r3, r4
   1854c:	bl	26b90 <flatcc_json_parser_double@@Base>
   18550:	mov	r6, r0
   18554:	cmp	r9, r0
   18558:	beq	18568 <main@@Base+0x27e0>
   1855c:	mov	r9, r6
   18560:	mov	r4, r5
   18564:	b	18598 <main@@Base+0x2810>
   18568:	str	r4, [sp]
   1856c:	ldr	r0, [sp, #28]
   18570:	mov	r1, r6
   18574:	mov	r2, r5
   18578:	movw	r3, #33136	; 0x8170
   1857c:	movt	r3, #4
   18580:	bl	1c450 <main@@Base+0x66c8>
   18584:	mov	r9, r0
   18588:	cmp	r0, r6
   1858c:	mov	r4, r5
   18590:	cmpne	r9, r4
   18594:	beq	166c0 <main@@Base+0x938>
   18598:	vldr	d0, [sp, #32]
   1859c:	mov	r0, r7
   185a0:	bl	1c560 <main@@Base+0x67d8>
   185a4:	ldr	r0, [sp, #28]
   185a8:	mov	r1, r9
   185ac:	mov	r2, r4
   185b0:	mov	r3, r8
   185b4:	bl	1a484 <main@@Base+0x46fc>
   185b8:	mov	r9, r0
   185bc:	ldr	r0, [sp, #52]	; 0x34
   185c0:	cmp	r0, #0
   185c4:	ldr	r6, [sp, #24]
   185c8:	bne	1850c <main@@Base+0x2784>
   185cc:	ldr	r0, [sp, #28]
   185d0:	ldr	r0, [r0]
   185d4:	bl	23044 <flatcc_builder_end_vector@@Base>
   185d8:	str	r0, [sp, #48]	; 0x30
   185dc:	cmp	r0, #0
   185e0:	beq	166c0 <main@@Base+0x938>
   185e4:	ldr	r0, [sp, #28]
   185e8:	ldr	r0, [r0]
   185ec:	mov	r1, #33	; 0x21
   185f0:	b	17384 <main@@Base+0x15fc>
   185f4:	ldr	r0, [sp, #28]
   185f8:	b	189b4 <main@@Base+0x2c2c>
   185fc:	add	r7, r8, #16
   18600:	mov	r0, r7
   18604:	mov	r1, r4
   18608:	bl	196a8 <main@@Base+0x3920>
   1860c:	lsr	r0, r0, #8
   18610:	orr	r0, r0, r1, lsl #24
   18614:	movw	r2, #25460	; 0x6374
   18618:	movt	r2, #29301	; 0x7275
   1861c:	eor	r0, r0, r2
   18620:	movw	r2, #29556	; 0x7374
   18624:	movt	r2, #100	; 0x64
   18628:	eor	r1, r2, r1, lsr #8
   1862c:	orrs	r0, r0, r1
   18630:	bne	186e8 <main@@Base+0x2960>
   18634:	ldr	r0, [sp, #28]
   18638:	mov	r1, r7
   1863c:	mov	r2, r4
   18640:	mov	r3, #7
   18644:	bl	196ac <main@@Base+0x3924>
   18648:	mov	r9, r0
   1864c:	cmp	r7, r0
   18650:	add	r8, sp, #52	; 0x34
   18654:	beq	16a64 <main@@Base+0xcdc>
   18658:	ldr	r0, [sp, #28]
   1865c:	ldr	r0, [r0]
   18660:	mov	r1, #8
   18664:	mov	r2, #4
   18668:	mvn	r3, #-536870912	; 0xe0000000
   1866c:	bl	223f4 <flatcc_builder_start_vector@@Base>
   18670:	cmp	r0, #0
   18674:	bne	166c0 <main@@Base+0x938>
   18678:	ldr	r5, [sp, #28]
   1867c:	mov	r0, r5
   18680:	mov	r1, r9
   18684:	mov	r2, r4
   18688:	mov	r3, r8
   1868c:	bl	1a22c <main@@Base+0x44a4>
   18690:	b	186c0 <main@@Base+0x2938>
   18694:	mov	r3, r0
   18698:	ldr	r5, [sp, #28]
   1869c:	mov	r0, r5
   186a0:	mov	r1, r9
   186a4:	mov	r2, r4
   186a8:	bl	1b3d0 <main@@Base+0x5648>
   186ac:	mov	r1, r0
   186b0:	mov	r0, r5
   186b4:	mov	r2, r4
   186b8:	mov	r3, r8
   186bc:	bl	1a484 <main@@Base+0x46fc>
   186c0:	mov	r9, r0
   186c4:	ldr	r0, [r5]
   186c8:	ldr	r1, [sp, #52]	; 0x34
   186cc:	cmp	r1, #0
   186d0:	beq	16cb0 <main@@Base+0xf28>
   186d4:	mov	r1, #1
   186d8:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   186dc:	cmp	r0, #0
   186e0:	bne	18694 <main@@Base+0x290c>
   186e4:	b	166c0 <main@@Base+0x938>
   186e8:	ldr	r0, [sp, #28]
   186ec:	mov	r1, r7
   186f0:	b	189b4 <main@@Base+0x2c2c>
   186f4:	add	r8, sp, #52	; 0x34
   186f8:	b	16a4c <main@@Base+0xcc4>
   186fc:	ldr	r0, [sp, #28]
   18700:	mov	r1, r8
   18704:	mov	r2, r4
   18708:	mov	r3, #8
   1870c:	bl	196ac <main@@Base+0x3924>
   18710:	mov	r6, r0
   18714:	cmp	r8, r0
   18718:	beq	18bd0 <main@@Base+0x2e48>
   1871c:	mov	r0, #0
   18720:	strb	r0, [sp, #32]
   18724:	ldr	r0, [sp, #28]
   18728:	mov	r1, r6
   1872c:	mov	r2, r4
   18730:	mov	r5, r4
   18734:	add	r4, sp, #32
   18738:	mov	r3, r4
   1873c:	bl	1b1e4 <main@@Base+0x545c>
   18740:	mov	r7, r0
   18744:	cmp	r6, r0
   18748:	add	r8, sp, #52	; 0x34
   1874c:	beq	16c14 <main@@Base+0xe8c>
   18750:	mov	r9, r7
   18754:	mov	r4, r5
   18758:	b	16c44 <main@@Base+0xebc>
   1875c:	add	r6, r8, #16
   18760:	mov	r0, r6
   18764:	mov	r1, r4
   18768:	bl	196a8 <main@@Base+0x3920>
   1876c:	and	r0, r1, #-16777216	; 0xff000000
   18770:	teq	r0, #1929379840	; 0x73000000
   18774:	bne	18bd0 <main@@Base+0x2e48>
   18778:	ldr	r0, [sp, #28]
   1877c:	mov	r1, r6
   18780:	mov	r2, r4
   18784:	mov	r3, #1
   18788:	bl	196ac <main@@Base+0x3924>
   1878c:	mov	r9, r0
   18790:	cmp	r6, r0
   18794:	add	r8, sp, #52	; 0x34
   18798:	beq	168b0 <main@@Base+0xb28>
   1879c:	ldr	r0, [sp, #28]
   187a0:	ldr	r0, [r0]
   187a4:	bl	22484 <flatcc_builder_start_offset_vector@@Base>
   187a8:	cmp	r0, #0
   187ac:	ldr	r6, [sp, #24]
   187b0:	bne	166c0 <main@@Base+0x938>
   187b4:	ldr	r0, [sp, #28]
   187b8:	mov	r1, r9
   187bc:	mov	r2, r4
   187c0:	mov	r3, r8
   187c4:	bl	1a22c <main@@Base+0x44a4>
   187c8:	b	187e8 <main@@Base+0x2a60>
   187cc:	ldr	r1, [sp, #48]	; 0x30
   187d0:	str	r1, [r0]
   187d4:	ldr	r0, [sp, #28]
   187d8:	mov	r1, r9
   187dc:	mov	r2, r4
   187e0:	mov	r3, r8
   187e4:	bl	1a484 <main@@Base+0x46fc>
   187e8:	mov	r9, r0
   187ec:	ldr	r0, [sp, #52]	; 0x34
   187f0:	cmp	r0, #0
   187f4:	beq	16e3c <main@@Base+0x10b4>
   187f8:	ldr	r0, [sp, #28]
   187fc:	mov	r1, r9
   18800:	mov	r2, r4
   18804:	add	r3, sp, #48	; 0x30
   18808:	bl	16680 <main@@Base+0x8f8>
   1880c:	mov	r9, r0
   18810:	ldr	r0, [sp, #48]	; 0x30
   18814:	cmp	r0, #0
   18818:	beq	166c0 <main@@Base+0x938>
   1881c:	ldr	r0, [sp, #28]
   18820:	ldr	r0, [r0]
   18824:	mov	r1, #1
   18828:	bl	21fd0 <flatcc_builder_extend_offset_vector@@Base>
   1882c:	cmp	r0, #0
   18830:	bne	187cc <main@@Base+0x2a44>
   18834:	b	166c0 <main@@Base+0x938>
   18838:	ldr	r0, [sp, #28]
   1883c:	mov	r1, r9
   18840:	b	189b4 <main@@Base+0x2c2c>
   18844:	movw	r2, #13407	; 0x345f
   18848:	movt	r2, #30006	; 0x7536
   1884c:	eor	r2, r1, r2
   18850:	orrs	r2, r0, r2
   18854:	beq	16bb4 <main@@Base+0xe2c>
   18858:	movw	r2, #12895	; 0x325f
   1885c:	movt	r2, #30003	; 0x7533
   18860:	eor	r1, r1, r2
   18864:	orrs	r0, r0, r1
   18868:	bne	16a4c <main@@Base+0xcc4>
   1886c:	ldr	r0, [sp, #28]
   18870:	mov	r1, r7
   18874:	mov	r2, r4
   18878:	mov	r3, #8
   1887c:	bl	196ac <main@@Base+0x3924>
   18880:	mov	r6, r0
   18884:	cmp	r7, r0
   18888:	beq	16ee8 <main@@Base+0x1160>
   1888c:	mov	r0, #0
   18890:	str	r0, [sp, #32]
   18894:	ldr	r0, [sp, #28]
   18898:	mov	r1, r6
   1889c:	mov	r2, r4
   188a0:	mov	r5, r4
   188a4:	add	r4, sp, #32
   188a8:	mov	r3, r4
   188ac:	bl	1c0a4 <main@@Base+0x631c>
   188b0:	mov	r7, r0
   188b4:	cmp	r6, r0
   188b8:	beq	17208 <main@@Base+0x1480>
   188bc:	mov	r9, r7
   188c0:	mov	r4, r5
   188c4:	b	17238 <main@@Base+0x14b0>
   188c8:	movw	r0, #28257	; 0x6e61
   188cc:	movt	r0, #28001	; 0x6d61
   188d0:	teq	r7, r0
   188d4:	bne	189ac <main@@Base+0x2c24>
   188d8:	ldr	r0, [sp, #28]
   188dc:	mov	r1, r8
   188e0:	mov	r2, r4
   188e4:	mov	r3, #4
   188e8:	bl	196ac <main@@Base+0x3924>
   188ec:	mov	r6, r0
   188f0:	cmp	r8, r0
   188f4:	beq	18bd0 <main@@Base+0x2e48>
   188f8:	mov	r0, #0
   188fc:	strh	r0, [sp, #32]
   18900:	ldr	r0, [sp, #28]
   18904:	mov	r1, r6
   18908:	mov	r2, r4
   1890c:	mov	r5, r4
   18910:	add	r4, sp, #32
   18914:	mov	r3, r4
   18918:	bl	1a544 <main@@Base+0x47bc>
   1891c:	mov	r7, r0
   18920:	cmp	r6, r0
   18924:	add	r8, sp, #52	; 0x34
   18928:	beq	17084 <main@@Base+0x12fc>
   1892c:	mov	r9, r7
   18930:	ldr	r6, [sp, #24]
   18934:	b	170b8 <main@@Base+0x1330>
   18938:	and	r1, sl, #-16777216	; 0xff000000
   1893c:	eor	r1, r1, #1711276032	; 0x66000000
   18940:	orrs	r0, r1, r0
   18944:	bne	189ac <main@@Base+0x2c24>
   18948:	ldr	r0, [sp, #28]
   1894c:	mov	r1, r8
   18950:	mov	r2, r4
   18954:	mov	r3, #5
   18958:	bl	196ac <main@@Base+0x3924>
   1895c:	mov	r6, r0
   18960:	cmp	r8, r0
   18964:	beq	18bd0 <main@@Base+0x2e48>
   18968:	mov	r0, #0
   1896c:	str	r0, [sp, #32]
   18970:	ldr	r0, [sp, #28]
   18974:	mov	r1, r6
   18978:	mov	r2, r4
   1897c:	mov	r8, r4
   18980:	add	r4, sp, #32
   18984:	mov	r3, r4
   18988:	bl	26c68 <flatcc_json_parser_float@@Base>
   1898c:	mov	r7, r0
   18990:	cmp	r6, r0
   18994:	beq	17104 <main@@Base+0x137c>
   18998:	mov	r9, r7
   1899c:	ldr	r6, [sp, #24]
   189a0:	mov	r4, r8
   189a4:	add	r8, sp, #52	; 0x34
   189a8:	b	17140 <main@@Base+0x13b8>
   189ac:	ldr	r0, [sp, #28]
   189b0:	mov	r1, r8
   189b4:	mov	r2, r4
   189b8:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   189bc:	mov	r9, r0
   189c0:	b	18be8 <main@@Base+0x2e60>
   189c4:	str	r4, [sp]
   189c8:	ldr	r0, [sp, #28]
   189cc:	mov	r1, r7
   189d0:	mov	r2, r5
   189d4:	movw	r3, #33016	; 0x80f8
   189d8:	movt	r3, #4
   189dc:	bl	1bbd8 <main@@Base+0x5e50>
   189e0:	mov	r9, r0
   189e4:	cmp	r0, r7
   189e8:	ldr	r6, [sp, #24]
   189ec:	mov	r4, r5
   189f0:	cmpne	r9, r4
   189f4:	beq	166c0 <main@@Base+0x938>
   189f8:	vldr	s0, [sp, #32]
   189fc:	vcmp.f32	s0, #0.0
   18a00:	vmrs	APSR_nzcv, fpscr
   18a04:	bne	18a18 <main@@Base+0x2c90>
   18a08:	ldr	r0, [sp, #28]
   18a0c:	ldrb	r0, [r0, #8]
   18a10:	tst	r0, #2
   18a14:	beq	18bec <main@@Base+0x2e64>
   18a18:	ldr	r0, [sp, #28]
   18a1c:	ldr	r0, [r0]
   18a20:	mov	r1, #27
   18a24:	b	1716c <main@@Base+0x13e4>
   18a28:	ldr	r6, [sp, #24]
   18a2c:	bl	23044 <flatcc_builder_end_vector@@Base>
   18a30:	str	r0, [sp, #48]	; 0x30
   18a34:	cmp	r0, #0
   18a38:	beq	166c0 <main@@Base+0x938>
   18a3c:	ldr	r0, [sp, #28]
   18a40:	ldr	r0, [r0]
   18a44:	mov	r1, #9
   18a48:	b	17384 <main@@Base+0x15fc>
   18a4c:	mov	r8, r1
   18a50:	movw	r3, #29556	; 0x7374
   18a54:	movt	r3, #29797	; 0x7465
   18a58:	eor	r0, r7, r3
   18a5c:	eor	r1, r4, #889192448	; 0x35000000
   18a60:	orrs	r0, r1, r0
   18a64:	bne	18b3c <main@@Base+0x2db4>
   18a68:	ldr	r0, [sp, #28]
   18a6c:	mov	r1, r8
   18a70:	ldr	r4, [sp, #20]
   18a74:	mov	r2, r4
   18a78:	mov	r3, #5
   18a7c:	bl	196ac <main@@Base+0x3924>
   18a80:	mov	r9, r0
   18a84:	cmp	r8, r0
   18a88:	beq	18b34 <main@@Base+0x2dac>
   18a8c:	ldr	r0, [sp, #28]
   18a90:	ldr	r0, [r0]
   18a94:	mov	r1, #4
   18a98:	mov	r2, #2
   18a9c:	mvn	r3, #-1073741824	; 0xc0000000
   18aa0:	bl	223f4 <flatcc_builder_start_vector@@Base>
   18aa4:	cmp	r0, #0
   18aa8:	bne	166c0 <main@@Base+0x938>
   18aac:	ldr	r5, [sp, #28]
   18ab0:	mov	r0, r5
   18ab4:	mov	r1, r9
   18ab8:	mov	r2, r4
   18abc:	add	r8, sp, #52	; 0x34
   18ac0:	mov	r3, r8
   18ac4:	bl	1a22c <main@@Base+0x44a4>
   18ac8:	mov	r9, r0
   18acc:	ldr	r0, [r5]
   18ad0:	ldr	r1, [sp, #52]	; 0x34
   18ad4:	cmp	r1, #0
   18ad8:	beq	16c8c <main@@Base+0xf04>
   18adc:	ldr	r6, [sp, #24]
   18ae0:	mov	r1, #1
   18ae4:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   18ae8:	cmp	r0, #0
   18aec:	beq	166c0 <main@@Base+0x938>
   18af0:	mov	r3, r0
   18af4:	ldr	r5, [sp, #28]
   18af8:	mov	r0, r5
   18afc:	mov	r1, r9
   18b00:	mov	r2, r4
   18b04:	bl	1ac80 <main@@Base+0x4ef8>
   18b08:	mov	r1, r0
   18b0c:	mov	r0, r5
   18b10:	mov	r2, r4
   18b14:	mov	r3, r8
   18b18:	bl	1a484 <main@@Base+0x46fc>
   18b1c:	mov	r9, r0
   18b20:	ldr	r0, [r5]
   18b24:	ldr	r1, [sp, #52]	; 0x34
   18b28:	cmp	r1, #0
   18b2c:	bne	18ae0 <main@@Base+0x2d58>
   18b30:	b	16c90 <main@@Base+0xf08>
   18b34:	mov	r8, r9
   18b38:	b	18b40 <main@@Base+0x2db8>
   18b3c:	ldr	r4, [sp, #20]
   18b40:	movw	r0, #31088	; 0x7970
   18b44:	movt	r0, #24436	; 0x5f74
   18b48:	eor	r0, sl, r0
   18b4c:	orrs	r0, r0, r6
   18b50:	bne	16758 <main@@Base+0x9d0>
   18b54:	add	r6, r8, #8
   18b58:	mov	r0, r6
   18b5c:	mov	r1, r4
   18b60:	bl	196a8 <main@@Base+0x3920>
   18b64:	and	r0, r1, #-16777216	; 0xff000000
   18b68:	teq	r0, #1694498816	; 0x65000000
   18b6c:	bne	18bd0 <main@@Base+0x2e48>
   18b70:	ldr	r0, [sp, #28]
   18b74:	mov	r1, r6
   18b78:	mov	r2, r4
   18b7c:	mov	r3, #1
   18b80:	bl	196ac <main@@Base+0x3924>
   18b84:	mov	r1, r0
   18b88:	cmp	r6, r0
   18b8c:	add	r8, sp, #52	; 0x34
   18b90:	beq	16764 <main@@Base+0x9dc>
   18b94:	ldr	r0, [sp, #44]	; 0x2c
   18b98:	mov	r2, #8
   18b9c:	str	r2, [sp]
   18ba0:	str	r0, [sp, #4]
   18ba4:	movw	r0, #32952	; 0x80b8
   18ba8:	movt	r0, #4
   18bac:	str	r0, [sp, #8]
   18bb0:	movw	r0, #44688	; 0xae90
   18bb4:	movt	r0, #1
   18bb8:	str	r0, [sp, #12]
   18bbc:	ldr	r0, [sp, #28]
   18bc0:	mov	r2, r4
   18bc4:	mov	r3, #0
   18bc8:	bl	27aec <flatcc_json_parser_union_type@@Base>
   18bcc:	b	16ff8 <main@@Base+0x1270>
   18bd0:	ldr	r0, [sp, #28]
   18bd4:	mov	r1, r6
   18bd8:	mov	r2, r4
   18bdc:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   18be0:	mov	r9, r0
   18be4:	ldr	r6, [sp, #24]
   18be8:	add	r8, sp, #52	; 0x34
   18bec:	ldr	r0, [sp, #28]
   18bf0:	mov	r1, r9
   18bf4:	mov	r2, r4
   18bf8:	mov	r3, r8
   18bfc:	bl	1c578 <main@@Base+0x67f0>
   18c00:	mov	r9, r0
   18c04:	ldr	r0, [sp, #52]	; 0x34
   18c08:	cmp	r0, #0
   18c0c:	bne	174d8 <main@@Base+0x1750>
   18c10:	ldr	r0, [sp, #28]
   18c14:	ldr	r0, [r0, #20]
   18c18:	cmp	r0, #0
   18c1c:	bne	166c0 <main@@Base+0x938>
   18c20:	ldr	r0, [sp, #28]
   18c24:	ldr	r0, [r0]
   18c28:	mov	r1, #3
   18c2c:	bl	22c5c <flatcc_builder_check_required_field@@Base>
   18c30:	cmp	r0, #0
   18c34:	beq	18c6c <main@@Base+0x2ee4>
   18c38:	ldr	r3, [sp, #44]	; 0x2c
   18c3c:	ldr	r5, [sp, #28]
   18c40:	mov	r0, r5
   18c44:	mov	r1, r9
   18c48:	mov	r2, r4
   18c4c:	bl	2796c <flatcc_json_parser_finalize_unions@@Base>
   18c50:	mov	r9, r0
   18c54:	ldr	r0, [r5]
   18c58:	bl	22de8 <flatcc_builder_end_table@@Base>
   18c5c:	str	r0, [r6]
   18c60:	cmp	r0, #0
   18c64:	bne	166d8 <main@@Base+0x950>
   18c68:	b	166c0 <main@@Base+0x938>
   18c6c:	ldr	r0, [sp, #28]
   18c70:	mov	r1, r9
   18c74:	mov	r2, r4
   18c78:	mov	r3, #29
   18c7c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   18c80:	mov	r9, r0
   18c84:	b	166c0 <main@@Base+0x938>
   18c88:	ldr	r4, [sp, #20]
   18c8c:	b	166c0 <main@@Base+0x938>
   18c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c94:	add	fp, sp, #28
   18c98:	sub	sp, sp, #20
   18c9c:	mov	r4, r1
   18ca0:	mov	r5, r0
   18ca4:	movw	r0, #65252	; 0xfee4
   18ca8:	movt	r0, #1
   18cac:	mov	r1, #3
   18cb0:	str	r1, [sp]
   18cb4:	str	r0, [sp, #4]
   18cb8:	mov	r8, #0
   18cbc:	movw	r3, #16239	; 0x3f6f
   18cc0:	movt	r3, #3
   18cc4:	mov	r0, r5
   18cc8:	mov	r1, r4
   18ccc:	mov	r2, #0
   18cd0:	bl	2f474 <flatcc_json_printer_struct_field@@Base>
   18cd4:	mov	r0, #150	; 0x96
   18cd8:	mov	r1, #4
   18cdc:	str	r1, [sp]
   18ce0:	mov	r6, #4
   18ce4:	str	r0, [sp, #4]
   18ce8:	movw	r3, #16243	; 0x3f73
   18cec:	movt	r3, #3
   18cf0:	mov	r0, r5
   18cf4:	mov	r1, r4
   18cf8:	mov	r2, #1
   18cfc:	bl	2aa60 <flatcc_json_printer_int16_field@@Base>
   18d00:	mov	r0, #100	; 0x64
   18d04:	mov	r1, #2
   18d08:	str	r1, [sp]
   18d0c:	str	r0, [sp, #4]
   18d10:	movw	r3, #16248	; 0x3f78
   18d14:	movt	r3, #3
   18d18:	mov	r0, r5
   18d1c:	mov	r1, r4
   18d20:	mov	r2, #2
   18d24:	bl	2aa60 <flatcc_json_printer_int16_field@@Base>
   18d28:	str	r6, [sp]
   18d2c:	movw	r3, #16251	; 0x3f7b
   18d30:	movt	r3, #3
   18d34:	mov	r0, r5
   18d38:	mov	r1, r4
   18d3c:	mov	r2, #3
   18d40:	bl	2a34c <flatcc_json_printer_string_field@@Base>
   18d44:	mov	r0, #9
   18d48:	str	r0, [sp]
   18d4c:	mov	r7, #5
   18d50:	movw	r3, #16256	; 0x3f80
   18d54:	movt	r3, #3
   18d58:	mov	r0, r5
   18d5c:	mov	r1, r4
   18d60:	mov	r2, #5
   18d64:	bl	2c1f4 <flatcc_json_printer_uint8_vector_field@@Base>
   18d68:	movw	r0, #65504	; 0xffe0
   18d6c:	movt	r0, #1
   18d70:	mov	r1, #8
   18d74:	str	r7, [sp]
   18d78:	mov	r7, #5
   18d7c:	str	r1, [sp, #4]
   18d80:	str	r0, [sp, #8]
   18d84:	movw	r3, #16266	; 0x3f8a
   18d88:	movt	r3, #3
   18d8c:	mov	r0, r5
   18d90:	mov	r1, r4
   18d94:	mov	r2, #6
   18d98:	bl	2b2c0 <flatcc_json_printer_int8_enum_field@@Base>
   18d9c:	movw	r0, #300	; 0x12c
   18da0:	movt	r0, #2
   18da4:	movw	r1, #184	; 0xb8
   18da8:	movt	r1, #2
   18dac:	str	r6, [sp]
   18db0:	str	r1, [sp, #4]
   18db4:	str	r0, [sp, #8]
   18db8:	movw	r3, #16642	; 0x4102
   18dbc:	movt	r3, #3
   18dc0:	mov	r0, r5
   18dc4:	mov	r1, r4
   18dc8:	mov	r2, #8
   18dcc:	bl	2f0d0 <flatcc_json_printer_union_field@@Base>
   18dd0:	movw	r0, #388	; 0x184
   18dd4:	movt	r0, #2
   18dd8:	str	r7, [sp]
   18ddc:	mov	sl, #5
   18de0:	str	r6, [sp, #4]
   18de4:	str	r0, [sp, #8]
   18de8:	movw	r3, #16272	; 0x3f90
   18dec:	movt	r3, #3
   18df0:	mov	r0, r5
   18df4:	mov	r1, r4
   18df8:	mov	r2, #9
   18dfc:	bl	2e6ec <flatcc_json_printer_struct_vector_field@@Base>
   18e00:	mov	r7, #17
   18e04:	str	r7, [sp]
   18e08:	movw	r3, #16278	; 0x3f96
   18e0c:	movt	r3, #3
   18e10:	mov	r0, r5
   18e14:	mov	r1, r4
   18e18:	mov	r2, #10
   18e1c:	bl	2e968 <flatcc_json_printer_string_vector_field@@Base>
   18e20:	movw	r9, #35984	; 0x8c90
   18e24:	movt	r9, #1
   18e28:	stm	sp, {r7, r9}
   18e2c:	movw	r3, #16296	; 0x3fa8
   18e30:	movt	r3, #3
   18e34:	mov	r0, r5
   18e38:	mov	r1, r4
   18e3c:	mov	r2, #11
   18e40:	bl	2eb10 <flatcc_json_printer_table_vector_field@@Base>
   18e44:	str	sl, [sp]
   18e48:	mov	sl, #5
   18e4c:	str	r9, [sp, #4]
   18e50:	movw	r3, #16314	; 0x3fba
   18e54:	movt	r3, #3
   18e58:	mov	r0, r5
   18e5c:	mov	r1, r4
   18e60:	mov	r2, #12
   18e64:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   18e68:	mov	r0, #20
   18e6c:	stm	sp, {r0, r8, r9}
   18e70:	movw	r3, #16320	; 0x3fc0
   18e74:	movt	r3, #3
   18e78:	mov	r0, r5
   18e7c:	mov	r1, r4
   18e80:	mov	r2, #13
   18e84:	bl	2f8cc <flatcc_json_printer_table_as_nested_root@@Base>
   18e88:	movw	r0, #484	; 0x1e4
   18e8c:	movt	r0, #2
   18e90:	mov	r1, #9
   18e94:	str	r1, [sp]
   18e98:	str	r0, [sp, #4]
   18e9c:	movw	r3, #16341	; 0x3fd5
   18ea0:	movt	r3, #3
   18ea4:	mov	r0, r5
   18ea8:	mov	r1, r4
   18eac:	mov	r2, #14
   18eb0:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   18eb4:	mov	r9, #8
   18eb8:	str	r9, [sp]
   18ebc:	mov	r0, #1
   18ec0:	str	r0, [sp, #4]
   18ec4:	movw	r3, #16351	; 0x3fdf
   18ec8:	movt	r3, #3
   18ecc:	mov	r0, r5
   18ed0:	mov	r1, r4
   18ed4:	mov	r2, #15
   18ed8:	bl	2ac9c <flatcc_json_printer_bool_field@@Base>
   18edc:	mov	r6, #16
   18ee0:	stm	sp, {r6, r8}
   18ee4:	movw	r3, #16360	; 0x3fe8
   18ee8:	movt	r3, #3
   18eec:	mov	r0, r5
   18ef0:	mov	r1, r4
   18ef4:	mov	r2, #16
   18ef8:	bl	2ab14 <flatcc_json_printer_int32_field@@Base>
   18efc:	stm	sp, {r6, r8}
   18f00:	movw	r3, #16377	; 0x3ff9
   18f04:	movt	r3, #3
   18f08:	mov	r0, r5
   18f0c:	mov	r1, r4
   18f10:	mov	r2, #17
   18f14:	bl	2a824 <flatcc_json_printer_uint32_field@@Base>
   18f18:	str	r8, [sp, #8]
   18f1c:	str	r8, [sp, #12]
   18f20:	str	r6, [sp]
   18f24:	movw	r3, #16394	; 0x400a
   18f28:	movt	r3, #3
   18f2c:	mov	r0, r5
   18f30:	mov	r1, r4
   18f34:	mov	r2, #18
   18f38:	bl	2abc8 <flatcc_json_printer_int64_field@@Base>
   18f3c:	str	r8, [sp, #8]
   18f40:	str	r8, [sp, #12]
   18f44:	str	r6, [sp]
   18f48:	movw	r3, #16411	; 0x401b
   18f4c:	movt	r3, #3
   18f50:	mov	r0, r5
   18f54:	mov	r1, r4
   18f58:	mov	r2, #19
   18f5c:	bl	2a8d8 <flatcc_json_printer_uint64_field@@Base>
   18f60:	stm	sp, {r7, r8}
   18f64:	movw	r3, #16428	; 0x402c
   18f68:	movt	r3, #3
   18f6c:	mov	r0, r5
   18f70:	mov	r1, r4
   18f74:	mov	r2, #20
   18f78:	bl	2ab14 <flatcc_json_printer_int32_field@@Base>
   18f7c:	stm	sp, {r7, r8}
   18f80:	movw	r3, #16446	; 0x403e
   18f84:	movt	r3, #3
   18f88:	mov	r0, r5
   18f8c:	mov	r1, r4
   18f90:	mov	r2, #21
   18f94:	bl	2a824 <flatcc_json_printer_uint32_field@@Base>
   18f98:	str	r8, [sp, #8]
   18f9c:	str	r8, [sp, #12]
   18fa0:	str	r7, [sp]
   18fa4:	movw	r3, #16464	; 0x4050
   18fa8:	movt	r3, #3
   18fac:	mov	r0, r5
   18fb0:	mov	r1, r4
   18fb4:	mov	r2, #22
   18fb8:	bl	2abc8 <flatcc_json_printer_int64_field@@Base>
   18fbc:	str	r8, [sp, #8]
   18fc0:	str	r8, [sp, #12]
   18fc4:	str	r7, [sp]
   18fc8:	mov	r8, #23
   18fcc:	movw	r3, #16482	; 0x4062
   18fd0:	movt	r3, #3
   18fd4:	mov	r0, r5
   18fd8:	mov	r1, r4
   18fdc:	mov	r2, #23
   18fe0:	bl	2a8d8 <flatcc_json_printer_uint64_field@@Base>
   18fe4:	str	r6, [sp]
   18fe8:	movw	r3, #16500	; 0x4074
   18fec:	movt	r3, #3
   18ff0:	mov	r0, r5
   18ff4:	mov	r1, r4
   18ff8:	mov	r2, #24
   18ffc:	bl	2cfb4 <flatcc_json_printer_bool_vector_field@@Base>
   19000:	str	sl, [sp]
   19004:	vldr	s0, [pc, #392]	; 19194 <main@@Base+0x340c>
   19008:	movw	r3, #16517	; 0x4085
   1900c:	movt	r3, #3
   19010:	mov	r0, r5
   19014:	mov	r1, r4
   19018:	mov	r2, #25
   1901c:	bl	2ad90 <flatcc_json_printer_float_field@@Base>
   19020:	mov	r6, #6
   19024:	str	r6, [sp]
   19028:	movw	r3, #16523	; 0x408b
   1902c:	movt	r3, #3
   19030:	vmov.f32	s0, #8	; 0x40400000  3.0
   19034:	mov	r0, r5
   19038:	mov	r1, r4
   1903c:	mov	r2, #26
   19040:	bl	2ad90 <flatcc_json_printer_float_field@@Base>
   19044:	str	r6, [sp]
   19048:	vldr	s0, [pc, #328]	; 19198 <main@@Base+0x3410>
   1904c:	movw	r3, #16530	; 0x4092
   19050:	movt	r3, #3
   19054:	mov	r0, r5
   19058:	mov	r1, r4
   1905c:	mov	r2, #27
   19060:	bl	2ad90 <flatcc_json_printer_float_field@@Base>
   19064:	mov	r0, #18
   19068:	str	r0, [sp]
   1906c:	movw	r3, #16537	; 0x4099
   19070:	movt	r3, #3
   19074:	mov	r0, r5
   19078:	mov	r1, r4
   1907c:	mov	r2, #28
   19080:	bl	2e968 <flatcc_json_printer_string_vector_field@@Base>
   19084:	movw	r0, #616	; 0x268
   19088:	movt	r0, #2
   1908c:	stm	sp, {r8, r9}
   19090:	str	r0, [sp, #8]
   19094:	movw	r3, #16556	; 0x40ac
   19098:	movt	r3, #3
   1909c:	mov	r0, r5
   190a0:	mov	r1, r4
   190a4:	mov	r2, #29
   190a8:	bl	2e6ec <flatcc_json_printer_struct_vector_field@@Base>
   190ac:	mov	r6, #4
   190b0:	str	r6, [sp]
   190b4:	movw	r3, #16580	; 0x40c4
   190b8:	movt	r3, #3
   190bc:	mov	r0, r5
   190c0:	mov	r1, r4
   190c4:	mov	r2, #30
   190c8:	bl	2c1f4 <flatcc_json_printer_uint8_vector_field@@Base>
   190cc:	str	sl, [sp]
   190d0:	str	r6, [sp, #4]
   190d4:	movw	r0, #388	; 0x184
   190d8:	movt	r0, #2
   190dc:	str	r0, [sp, #8]
   190e0:	movw	r3, #16585	; 0x40c9
   190e4:	movt	r3, #3
   190e8:	mov	r0, r5
   190ec:	mov	r1, r4
   190f0:	mov	r2, #31
   190f4:	bl	2e6ec <flatcc_json_printer_struct_vector_field@@Base>
   190f8:	mov	r0, #15
   190fc:	str	r0, [sp]
   19100:	movw	r3, #16591	; 0x40cf
   19104:	movt	r3, #3
   19108:	mov	r0, r5
   1910c:	mov	r1, r4
   19110:	mov	r2, #32
   19114:	bl	2cdfc <flatcc_json_printer_int64_vector_field@@Base>
   19118:	str	r7, [sp]
   1911c:	movw	r3, #16607	; 0x40df
   19120:	movt	r3, #3
   19124:	mov	r0, r5
   19128:	mov	r1, r4
   1912c:	mov	r2, #33	; 0x21
   19130:	bl	2d32c <flatcc_json_printer_double_vector_field@@Base>
   19134:	movw	r0, #724	; 0x2d4
   19138:	movt	r0, #2
   1913c:	mov	r1, #21
   19140:	str	r1, [sp]
   19144:	str	r0, [sp, #4]
   19148:	movw	r3, #16625	; 0x40f1
   1914c:	movt	r3, #3
   19150:	mov	r0, r5
   19154:	mov	r1, r4
   19158:	mov	r2, #34	; 0x22
   1915c:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   19160:	movw	r0, #728	; 0x2d8
   19164:	movt	r0, #2
   19168:	mov	r1, #10
   1916c:	str	r1, [sp]
   19170:	str	r0, [sp, #4]
   19174:	movw	r3, #16647	; 0x4107
   19178:	movt	r3, #3
   1917c:	mov	r0, r5
   19180:	mov	r1, r4
   19184:	mov	r2, #35	; 0x23
   19188:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   1918c:	sub	sp, fp, #28
   19190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19194:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   19198:	andeq	r0, r0, r0
   1919c:	push	{r4, r5, r6, r7, fp, lr}
   191a0:	add	fp, sp, #16
   191a4:	sub	sp, sp, #8
   191a8:	mov	r4, r0
   191ac:	mov	r1, #0
   191b0:	mov	r2, #32
   191b4:	mov	r3, #16
   191b8:	bl	2495c <flatcc_verify_field@@Base>
   191bc:	cmp	r0, #0
   191c0:	bne	195c8 <main@@Base+0x3840>
   191c4:	mov	r0, r4
   191c8:	mov	r1, #2
   191cc:	mov	r2, #2
   191d0:	mov	r3, #2
   191d4:	bl	2495c <flatcc_verify_field@@Base>
   191d8:	cmp	r0, #0
   191dc:	bne	195c8 <main@@Base+0x3840>
   191e0:	mov	r0, r4
   191e4:	mov	r1, #1
   191e8:	mov	r2, #2
   191ec:	mov	r3, #2
   191f0:	bl	2495c <flatcc_verify_field@@Base>
   191f4:	cmp	r0, #0
   191f8:	bne	195c8 <main@@Base+0x3840>
   191fc:	mov	r0, r4
   19200:	mov	r1, #3
   19204:	mov	r2, #1
   19208:	bl	249c8 <flatcc_verify_string_field@@Base>
   1920c:	cmp	r0, #0
   19210:	bne	195c8 <main@@Base+0x3840>
   19214:	mov	r5, #1
   19218:	mov	r0, r4
   1921c:	mov	r1, #6
   19220:	mov	r2, #1
   19224:	mov	r3, #1
   19228:	bl	2495c <flatcc_verify_field@@Base>
   1922c:	cmp	r0, #0
   19230:	bne	195c8 <main@@Base+0x3840>
   19234:	mvn	r0, #0
   19238:	str	r5, [sp]
   1923c:	str	r0, [sp, #4]
   19240:	mov	r0, r4
   19244:	mov	r1, #5
   19248:	mov	r2, #0
   1924c:	mov	r3, #1
   19250:	bl	24b1c <flatcc_verify_vector_field@@Base>
   19254:	cmp	r0, #0
   19258:	bne	195c8 <main@@Base+0x3840>
   1925c:	movw	r3, #37276	; 0x919c
   19260:	movt	r3, #1
   19264:	mov	r0, r4
   19268:	mov	r1, #11
   1926c:	mov	r2, #0
   19270:	bl	24e84 <flatcc_verify_table_vector_field@@Base>
   19274:	cmp	r0, #0
   19278:	bne	195c8 <main@@Base+0x3840>
   1927c:	mov	r0, r4
   19280:	mov	r1, #10
   19284:	mov	r2, #0
   19288:	bl	24c08 <flatcc_verify_string_vector_field@@Base>
   1928c:	cmp	r0, #0
   19290:	bne	195c8 <main@@Base+0x3840>
   19294:	mov	r0, r4
   19298:	mov	r1, #28
   1929c:	mov	r2, #0
   192a0:	bl	24c08 <flatcc_verify_string_vector_field@@Base>
   192a4:	cmp	r0, #0
   192a8:	bne	195c8 <main@@Base+0x3840>
   192ac:	mvn	r0, #0
   192b0:	mov	r1, #1
   192b4:	str	r1, [sp]
   192b8:	str	r0, [sp, #4]
   192bc:	mov	r0, r4
   192c0:	mov	r1, #24
   192c4:	mov	r2, #0
   192c8:	mov	r3, #1
   192cc:	bl	24b1c <flatcc_verify_vector_field@@Base>
   192d0:	cmp	r0, #0
   192d4:	bne	195c8 <main@@Base+0x3840>
   192d8:	mvn	r0, #-536870912	; 0xe0000000
   192dc:	mov	r1, #4
   192e0:	str	r1, [sp]
   192e4:	str	r0, [sp, #4]
   192e8:	mov	r0, r4
   192ec:	mov	r1, #29
   192f0:	mov	r2, #0
   192f4:	mov	r3, #8
   192f8:	bl	24b1c <flatcc_verify_vector_field@@Base>
   192fc:	cmp	r0, #0
   19300:	bne	195c8 <main@@Base+0x3840>
   19304:	movw	r5, #37276	; 0x919c
   19308:	movt	r5, #1
   1930c:	mov	r0, r4
   19310:	mov	r1, #12
   19314:	mov	r2, #0
   19318:	mov	r3, r5
   1931c:	bl	24d18 <flatcc_verify_table_field@@Base>
   19320:	cmp	r0, #0
   19324:	bne	195c8 <main@@Base+0x3840>
   19328:	movw	r3, #2568	; 0xa08
   1932c:	movt	r3, #2
   19330:	mov	r0, r4
   19334:	mov	r1, #8
   19338:	mov	r2, #0
   1933c:	bl	25548 <flatcc_verify_union_field@@Base>
   19340:	cmp	r0, #0
   19344:	bne	195c8 <main@@Base+0x3840>
   19348:	mvn	r6, #-1073741824	; 0xc0000000
   1934c:	mov	r7, #2
   19350:	str	r7, [sp]
   19354:	str	r6, [sp, #4]
   19358:	mov	r0, r4
   1935c:	mov	r1, #9
   19360:	mov	r2, #0
   19364:	mov	r3, #4
   19368:	bl	24b1c <flatcc_verify_vector_field@@Base>
   1936c:	cmp	r0, #0
   19370:	bne	195c8 <main@@Base+0x3840>
   19374:	str	r7, [sp]
   19378:	str	r6, [sp, #4]
   1937c:	mov	r0, r4
   19380:	mov	r1, #31
   19384:	mov	r2, #0
   19388:	mov	r3, #4
   1938c:	bl	24b1c <flatcc_verify_vector_field@@Base>
   19390:	cmp	r0, #0
   19394:	bne	195c8 <main@@Base+0x3840>
   19398:	mov	r0, #1
   1939c:	stm	sp, {r0, r5}
   193a0:	mov	r0, r4
   193a4:	mov	r1, #13
   193a8:	mov	r2, #0
   193ac:	mov	r3, #0
   193b0:	bl	25440 <flatcc_verify_table_as_nested_root@@Base>
   193b4:	cmp	r0, #0
   193b8:	bne	195c8 <main@@Base+0x3840>
   193bc:	movw	r3, #2612	; 0xa34
   193c0:	movt	r3, #2
   193c4:	mov	r0, r4
   193c8:	mov	r1, #14
   193cc:	mov	r2, #0
   193d0:	bl	24d18 <flatcc_verify_table_field@@Base>
   193d4:	cmp	r0, #0
   193d8:	bne	195c8 <main@@Base+0x3840>
   193dc:	mov	r0, r4
   193e0:	mov	r1, #15
   193e4:	mov	r2, #1
   193e8:	mov	r3, #1
   193ec:	bl	2495c <flatcc_verify_field@@Base>
   193f0:	cmp	r0, #0
   193f4:	bne	195c8 <main@@Base+0x3840>
   193f8:	mov	r0, r4
   193fc:	mov	r1, #16
   19400:	mov	r2, #4
   19404:	mov	r3, #4
   19408:	bl	2495c <flatcc_verify_field@@Base>
   1940c:	cmp	r0, #0
   19410:	bne	195c8 <main@@Base+0x3840>
   19414:	mov	r0, r4
   19418:	mov	r1, #17
   1941c:	mov	r2, #4
   19420:	mov	r3, #4
   19424:	bl	2495c <flatcc_verify_field@@Base>
   19428:	cmp	r0, #0
   1942c:	bne	195c8 <main@@Base+0x3840>
   19430:	mov	r0, r4
   19434:	mov	r1, #18
   19438:	mov	r2, #8
   1943c:	mov	r3, #8
   19440:	bl	2495c <flatcc_verify_field@@Base>
   19444:	cmp	r0, #0
   19448:	bne	195c8 <main@@Base+0x3840>
   1944c:	mov	r0, r4
   19450:	mov	r1, #19
   19454:	mov	r2, #8
   19458:	mov	r3, #8
   1945c:	bl	2495c <flatcc_verify_field@@Base>
   19460:	cmp	r0, #0
   19464:	bne	195c8 <main@@Base+0x3840>
   19468:	mov	r0, r4
   1946c:	mov	r1, #20
   19470:	mov	r2, #4
   19474:	mov	r3, #4
   19478:	bl	2495c <flatcc_verify_field@@Base>
   1947c:	cmp	r0, #0
   19480:	bne	195c8 <main@@Base+0x3840>
   19484:	mov	r0, r4
   19488:	mov	r1, #21
   1948c:	mov	r2, #4
   19490:	mov	r3, #4
   19494:	bl	2495c <flatcc_verify_field@@Base>
   19498:	cmp	r0, #0
   1949c:	bne	195c8 <main@@Base+0x3840>
   194a0:	mov	r0, r4
   194a4:	mov	r1, #22
   194a8:	mov	r2, #8
   194ac:	mov	r3, #8
   194b0:	bl	2495c <flatcc_verify_field@@Base>
   194b4:	cmp	r0, #0
   194b8:	bne	195c8 <main@@Base+0x3840>
   194bc:	mov	r0, r4
   194c0:	mov	r1, #23
   194c4:	mov	r2, #8
   194c8:	mov	r3, #8
   194cc:	bl	2495c <flatcc_verify_field@@Base>
   194d0:	cmp	r0, #0
   194d4:	bne	195c8 <main@@Base+0x3840>
   194d8:	mov	r0, r4
   194dc:	mov	r1, #25
   194e0:	mov	r2, #4
   194e4:	mov	r3, #4
   194e8:	bl	2495c <flatcc_verify_field@@Base>
   194ec:	cmp	r0, #0
   194f0:	bne	195c8 <main@@Base+0x3840>
   194f4:	mov	r0, r4
   194f8:	mov	r1, #26
   194fc:	mov	r2, #4
   19500:	mov	r3, #4
   19504:	bl	2495c <flatcc_verify_field@@Base>
   19508:	cmp	r0, #0
   1950c:	bne	195c8 <main@@Base+0x3840>
   19510:	mov	r0, r4
   19514:	mov	r1, #27
   19518:	mov	r2, #4
   1951c:	mov	r3, #4
   19520:	bl	2495c <flatcc_verify_field@@Base>
   19524:	cmp	r0, #0
   19528:	bne	195c8 <main@@Base+0x3840>
   1952c:	mvn	r0, #0
   19530:	mov	r1, #1
   19534:	str	r1, [sp]
   19538:	str	r0, [sp, #4]
   1953c:	mov	r0, r4
   19540:	mov	r1, #30
   19544:	mov	r2, #0
   19548:	mov	r3, #1
   1954c:	bl	24b1c <flatcc_verify_vector_field@@Base>
   19550:	cmp	r0, #0
   19554:	bne	195c8 <main@@Base+0x3840>
   19558:	mvn	r5, #-536870912	; 0xe0000000
   1955c:	mov	r6, #8
   19560:	str	r6, [sp]
   19564:	str	r5, [sp, #4]
   19568:	mov	r0, r4
   1956c:	mov	r1, #32
   19570:	mov	r2, #0
   19574:	mov	r3, #8
   19578:	bl	24b1c <flatcc_verify_vector_field@@Base>
   1957c:	cmp	r0, #0
   19580:	bne	195c8 <main@@Base+0x3840>
   19584:	str	r6, [sp]
   19588:	str	r5, [sp, #4]
   1958c:	mov	r0, r4
   19590:	mov	r1, #33	; 0x21
   19594:	mov	r2, #0
   19598:	mov	r3, #8
   1959c:	bl	24b1c <flatcc_verify_vector_field@@Base>
   195a0:	cmp	r0, #0
   195a4:	bne	195c8 <main@@Base+0x3840>
   195a8:	movw	r3, #2700	; 0xa8c
   195ac:	movt	r3, #2
   195b0:	mov	r0, r4
   195b4:	mov	r1, #34	; 0x22
   195b8:	mov	r2, #0
   195bc:	bl	24d18 <flatcc_verify_table_field@@Base>
   195c0:	cmp	r0, #0
   195c4:	beq	195d0 <main@@Base+0x3848>
   195c8:	sub	sp, fp, #16
   195cc:	pop	{r4, r5, r6, r7, fp, pc}
   195d0:	movw	r3, #2708	; 0xa94
   195d4:	movt	r3, #2
   195d8:	mov	r0, r4
   195dc:	mov	r1, #35	; 0x23
   195e0:	mov	r2, #0
   195e4:	sub	sp, fp, #16
   195e8:	pop	{r4, r5, r6, r7, fp, lr}
   195ec:	b	24d18 <flatcc_verify_table_field@@Base>
   195f0:	push	{r4, r5, r6, sl, fp, lr}
   195f4:	add	fp, sp, #16
   195f8:	mov	r5, r3
   195fc:	mov	r4, r2
   19600:	mov	r6, r0
   19604:	cmp	r1, r2
   19608:	beq	19658 <main@@Base+0x38d0>
   1960c:	ldrb	r0, [r1]
   19610:	cmp	r0, #123	; 0x7b
   19614:	bne	19658 <main@@Base+0x38d0>
   19618:	add	r1, r1, #1
   1961c:	mov	r0, r6
   19620:	mov	r2, r4
   19624:	bl	1c638 <main@@Base+0x68b0>
   19628:	cmp	r0, r4
   1962c:	beq	19674 <main@@Base+0x38ec>
   19630:	ldrb	r1, [r0]
   19634:	cmp	r1, #125	; 0x7d
   19638:	bne	19674 <main@@Base+0x38ec>
   1963c:	mov	r1, #0
   19640:	str	r1, [r5]
   19644:	add	r1, r0, #1
   19648:	mov	r0, r6
   1964c:	mov	r2, r4
   19650:	pop	{r4, r5, r6, sl, fp, lr}
   19654:	b	1c638 <main@@Base+0x68b0>
   19658:	mov	r0, #0
   1965c:	str	r0, [r5]
   19660:	mov	r0, r6
   19664:	mov	r2, r4
   19668:	mov	r3, #21
   1966c:	pop	{r4, r5, r6, sl, fp, lr}
   19670:	b	25f60 <flatcc_json_parser_set_error@@Base>
   19674:	mov	r1, #1
   19678:	str	r1, [r5]
   1967c:	pop	{r4, r5, r6, sl, fp, pc}
   19680:	cmp	r1, r2
   19684:	beq	19698 <main@@Base+0x3910>
   19688:	ldrb	r3, [r1]
   1968c:	cmp	r3, #34	; 0x22
   19690:	bne	196a0 <main@@Base+0x3918>
   19694:	add	r1, r1, #1
   19698:	mov	r0, r1
   1969c:	bx	lr
   196a0:	mov	r3, #5
   196a4:	b	25f60 <flatcc_json_parser_set_error@@Base>
   196a8:	b	1c670 <main@@Base+0x68e8>
   196ac:	push	{r4, r5, fp, lr}
   196b0:	add	fp, sp, #8
   196b4:	mov	r5, r0
   196b8:	sub	r0, r2, r1
   196bc:	cmp	r0, r3
   196c0:	ble	19710 <main@@Base+0x3988>
   196c4:	ldrb	r0, [r1, r3]
   196c8:	cmp	r0, #34	; 0x22
   196cc:	bne	19710 <main@@Base+0x3988>
   196d0:	mov	r4, r2
   196d4:	add	r0, r1, r3
   196d8:	add	r1, r0, #1
   196dc:	mov	r0, r5
   196e0:	bl	1c638 <main@@Base+0x68b0>
   196e4:	mov	r1, r0
   196e8:	cmp	r0, r4
   196ec:	beq	19718 <main@@Base+0x3990>
   196f0:	ldrb	r0, [r1]
   196f4:	cmp	r0, #58	; 0x3a
   196f8:	bne	19718 <main@@Base+0x3990>
   196fc:	add	r1, r1, #1
   19700:	mov	r0, r5
   19704:	mov	r2, r4
   19708:	pop	{r4, r5, fp, lr}
   1970c:	b	1c638 <main@@Base+0x68b0>
   19710:	mov	r0, r1
   19714:	pop	{r4, r5, fp, pc}
   19718:	mov	r0, r5
   1971c:	mov	r2, r4
   19720:	mov	r3, #4
   19724:	pop	{r4, r5, fp, lr}
   19728:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1972c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19730:	add	fp, sp, #24
   19734:	sub	sp, sp, #8
   19738:	mov	r9, r3
   1973c:	mov	r6, r2
   19740:	mov	r5, r1
   19744:	mov	r7, r0
   19748:	mov	r0, r1
   1974c:	mov	r1, r2
   19750:	bl	196a8 <main@@Base+0x3920>
   19754:	ldr	ip, [fp, #12]
   19758:	ldr	r8, [fp, #8]
   1975c:	movw	r3, #25957	; 0x6565
   19760:	movt	r3, #18290	; 0x4772
   19764:	mvn	r4, #-1845493760	; 0x92000000
   19768:	subs	r4, r4, r0
   1976c:	sbcs	r4, r3, r1
   19770:	bcc	197b0 <main@@Base+0x3a28>
   19774:	movw	r0, #30053	; 0x7565
   19778:	movt	r0, #17004	; 0x426c
   1977c:	teq	r1, r0
   19780:	bne	1983c <main@@Base+0x3ab4>
   19784:	str	ip, [sp]
   19788:	mov	r0, r7
   1978c:	mov	r1, r5
   19790:	mov	r2, r6
   19794:	mov	r3, #4
   19798:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1979c:	cmp	r0, r5
   197a0:	beq	1983c <main@@Base+0x3ab4>
   197a4:	mov	r1, #0
   197a8:	mov	r2, #8
   197ac:	b	1982c <main@@Base+0x3aa4>
   197b0:	bic	r4, r1, #255	; 0xff
   197b4:	movw	r2, #25600	; 0x6400
   197b8:	movt	r2, #21093	; 0x5265
   197bc:	teq	r4, r2
   197c0:	bne	197f0 <main@@Base+0x3a68>
   197c4:	str	ip, [sp]
   197c8:	mov	r0, r7
   197cc:	mov	r1, r5
   197d0:	mov	r2, r6
   197d4:	mov	r3, #3
   197d8:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   197dc:	cmp	r0, r5
   197e0:	beq	1983c <main@@Base+0x3ab4>
   197e4:	mov	r1, #0
   197e8:	mov	r2, #1
   197ec:	b	1982c <main@@Base+0x3aa4>
   197f0:	eor	r1, r1, r3
   197f4:	and	r0, r0, #-16777216	; 0xff000000
   197f8:	eor	r0, r0, #1845493760	; 0x6e000000
   197fc:	orrs	r0, r0, r1
   19800:	bne	1983c <main@@Base+0x3ab4>
   19804:	str	ip, [sp]
   19808:	mov	r0, r7
   1980c:	mov	r1, r5
   19810:	mov	r2, r6
   19814:	mov	r3, #5
   19818:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1981c:	cmp	r0, r5
   19820:	beq	1983c <main@@Base+0x3ab4>
   19824:	mov	r1, #0
   19828:	mov	r2, #2
   1982c:	str	r2, [r8]
   19830:	str	r1, [r8, #4]
   19834:	str	r1, [r9]
   19838:	mov	r5, r0
   1983c:	mov	r0, r5
   19840:	sub	sp, fp, #24
   19844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1984c:	add	fp, sp, #28
   19850:	sub	sp, sp, #4
   19854:	mov	r9, r3
   19858:	mov	r5, r2
   1985c:	mov	r7, r1
   19860:	mov	sl, r0
   19864:	mov	r0, r1
   19868:	mov	r1, r2
   1986c:	bl	196a8 <main@@Base+0x3920>
   19870:	movw	r2, #30815	; 0x785f
   19874:	movt	r2, #26725	; 0x6865
   19878:	movw	r4, #30061	; 0x756d
   1987c:	movt	r4, #25966	; 0x656e
   19880:	subs	r3, r0, r4
   19884:	sbcs	r3, r1, r2
   19888:	bcs	198ec <main@@Base+0x3b64>
   1988c:	bic	r3, r1, #255	; 0xff
   19890:	movw	r2, #27759	; 0x6c6f
   19894:	movt	r2, #17263	; 0x436f
   19898:	mvn	r4, #-1912602624	; 0x8e000000
   1989c:	subs	r4, r4, r0
   198a0:	sbcs	r4, r2, r1
   198a4:	bcc	19944 <main@@Base+0x3bbc>
   198a8:	movw	r0, #30976	; 0x7900
   198ac:	movt	r0, #16750	; 0x416e
   198b0:	teq	r3, r0
   198b4:	bne	19ae0 <main@@Base+0x3d58>
   198b8:	mov	r0, r7
   198bc:	mov	r1, r5
   198c0:	mov	r2, #3
   198c4:	bl	1c700 <main@@Base+0x6978>
   198c8:	cmp	r0, r7
   198cc:	beq	19ae0 <main@@Base+0x3d58>
   198d0:	mov	r1, r0
   198d4:	mov	r0, sl
   198d8:	mov	r2, r5
   198dc:	mov	r3, r9
   198e0:	sub	sp, fp, #28
   198e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198e8:	b	1af94 <main@@Base+0x520c>
   198ec:	add	r3, r2, #64512	; 0xfc00
   198f0:	add	r3, r3, #17301504	; 0x1080000
   198f4:	subs	r6, r0, r4
   198f8:	sbcs	r6, r1, r3
   198fc:	bcs	19988 <main@@Base+0x3c00>
   19900:	eor	r0, r0, r4
   19904:	eor	r1, r1, r2
   19908:	orrs	r0, r0, r1
   1990c:	bne	19ae0 <main@@Base+0x3d58>
   19910:	mov	r0, r7
   19914:	mov	r1, r5
   19918:	mov	r2, #8
   1991c:	bl	1c700 <main@@Base+0x6978>
   19920:	cmp	r0, r7
   19924:	beq	19ae0 <main@@Base+0x3d58>
   19928:	mov	r1, r0
   1992c:	mov	r0, sl
   19930:	mov	r2, r5
   19934:	mov	r3, r9
   19938:	sub	sp, fp, #28
   1993c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19940:	b	1c838 <main@@Base+0x6ab0>
   19944:	movw	r4, #28416	; 0x6f00
   19948:	movt	r4, #18031	; 0x466f
   1994c:	teq	r3, r4
   19950:	bne	199e0 <main@@Base+0x3c58>
   19954:	mov	r0, r7
   19958:	mov	r1, r5
   1995c:	mov	r2, #3
   19960:	bl	1c700 <main@@Base+0x6978>
   19964:	cmp	r0, r7
   19968:	beq	19ae0 <main@@Base+0x3d58>
   1996c:	mov	r1, r0
   19970:	mov	r0, sl
   19974:	mov	r2, r5
   19978:	mov	r3, r9
   1997c:	sub	sp, fp, #28
   19980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19984:	b	1c720 <main@@Base+0x6998>
   19988:	sub	r2, r2, #4352	; 0x1100
   1998c:	sub	r2, r2, #-100663296	; 0xfa000000
   19990:	subs	r6, r0, r4
   19994:	sbcs	r2, r1, r2
   19998:	bcs	19a28 <main@@Base+0x3ca0>
   1999c:	eor	r0, r0, r4
   199a0:	eor	r1, r1, r3
   199a4:	orrs	r0, r0, r1
   199a8:	bne	19ae0 <main@@Base+0x3d58>
   199ac:	mov	r0, r7
   199b0:	mov	r1, r5
   199b4:	mov	r2, #8
   199b8:	bl	1c700 <main@@Base+0x6978>
   199bc:	cmp	r0, r7
   199c0:	beq	19ae0 <main@@Base+0x3d58>
   199c4:	mov	r1, r0
   199c8:	mov	r0, sl
   199cc:	mov	r2, r5
   199d0:	mov	r3, r9
   199d4:	sub	sp, fp, #28
   199d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199dc:	b	1c960 <main@@Base+0x6bd8>
   199e0:	eor	r1, r1, r2
   199e4:	and	r0, r0, #-16777216	; 0xff000000
   199e8:	eor	r0, r0, #1912602624	; 0x72000000
   199ec:	orrs	r0, r0, r1
   199f0:	bne	19ae0 <main@@Base+0x3d58>
   199f4:	mov	r0, r7
   199f8:	mov	r1, r5
   199fc:	mov	r2, #5
   19a00:	bl	1c700 <main@@Base+0x6978>
   19a04:	cmp	r0, r7
   19a08:	beq	19ae0 <main@@Base+0x3d58>
   19a0c:	mov	r1, r0
   19a10:	mov	r0, sl
   19a14:	mov	r2, r5
   19a18:	mov	r3, r9
   19a1c:	sub	sp, fp, #28
   19a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a24:	b	1972c <main@@Base+0x39a4>
   19a28:	movw	r2, #29817	; 0x7479
   19a2c:	movt	r2, #28016	; 0x6d70
   19a30:	eor	r2, r0, r2
   19a34:	movw	r3, #29797	; 0x7465
   19a38:	movt	r3, #28271	; 0x6e6f
   19a3c:	eor	r3, r1, r3
   19a40:	orrs	r2, r2, r3
   19a44:	beq	19a94 <main@@Base+0x3d0c>
   19a48:	eor	r0, r0, r4
   19a4c:	movw	r2, #26463	; 0x675f
   19a50:	movt	r2, #28261	; 0x6e65
   19a54:	eor	r1, r1, r2
   19a58:	orrs	r0, r0, r1
   19a5c:	bne	19ae0 <main@@Base+0x3d58>
   19a60:	mov	r0, r7
   19a64:	mov	r1, r5
   19a68:	mov	r2, #8
   19a6c:	bl	1c700 <main@@Base+0x6978>
   19a70:	cmp	r0, r7
   19a74:	beq	19ae0 <main@@Base+0x3d58>
   19a78:	mov	r1, r0
   19a7c:	mov	r0, sl
   19a80:	mov	r2, r5
   19a84:	mov	r3, r9
   19a88:	sub	sp, fp, #28
   19a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a90:	b	1cad4 <main@@Base+0x6d4c>
   19a94:	add	r8, r7, #8
   19a98:	mov	r0, r8
   19a9c:	mov	r1, r5
   19aa0:	bl	196a8 <main@@Base+0x3920>
   19aa4:	teq	r1, r4
   19aa8:	bne	19ae0 <main@@Base+0x3d58>
   19aac:	mov	r0, r8
   19ab0:	mov	r1, r5
   19ab4:	mov	r2, #4
   19ab8:	bl	1c700 <main@@Base+0x6978>
   19abc:	cmp	r0, r8
   19ac0:	beq	19ae0 <main@@Base+0x3d58>
   19ac4:	mov	r1, r0
   19ac8:	mov	r0, sl
   19acc:	mov	r2, r5
   19ad0:	mov	r3, r9
   19ad4:	sub	sp, fp, #28
   19ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19adc:	b	1cbe4 <main@@Base+0x6e5c>
   19ae0:	mov	r0, r7
   19ae4:	sub	sp, fp, #28
   19ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19af0:	add	fp, sp, #28
   19af4:	sub	sp, sp, #4
   19af8:	mov	sl, r3
   19afc:	mov	r5, r2
   19b00:	mov	r7, r1
   19b04:	mov	r8, r0
   19b08:	mov	r0, r1
   19b0c:	mov	r1, r2
   19b10:	bl	196a8 <main@@Base+0x3920>
   19b14:	movw	r2, #18273	; 0x4761
   19b18:	movt	r2, #19833	; 0x4d79
   19b1c:	movw	r3, #11844	; 0x2e44
   19b20:	movt	r3, #28005	; 0x6d65
   19b24:	subs	r3, r3, r0
   19b28:	sbcs	r3, r2, r1
   19b2c:	bcc	19bcc <main@@Base+0x3e44>
   19b30:	movw	r2, #31022	; 0x792e
   19b34:	movt	r2, #24947	; 0x6173
   19b38:	eor	r0, r0, r2
   19b3c:	movw	r2, #28276	; 0x6e74
   19b40:	movt	r2, #18017	; 0x4661
   19b44:	eor	r1, r1, r2
   19b48:	orrs	r0, r0, r1
   19b4c:	bne	1a058 <main@@Base+0x42d0>
   19b50:	add	r0, r7, #8
   19b54:	mov	r1, r5
   19b58:	bl	196a8 <main@@Base+0x3920>
   19b5c:	movw	r2, #24946	; 0x6172
   19b60:	movt	r2, #17256	; 0x4368
   19b64:	eor	r1, r1, r2
   19b68:	movw	r2, #29797	; 0x7465
   19b6c:	movt	r2, #24931	; 0x6163
   19b70:	eor	r0, r0, r2
   19b74:	orrs	r0, r0, r1
   19b78:	bne	1a058 <main@@Base+0x42d0>
   19b7c:	add	r4, r7, #16
   19b80:	mov	r0, r4
   19b84:	mov	r1, r5
   19b88:	bl	196a8 <main@@Base+0x3920>
   19b8c:	and	r0, r1, #-16777216	; 0xff000000
   19b90:	teq	r0, #1912602624	; 0x72000000
   19b94:	bne	1a058 <main@@Base+0x42d0>
   19b98:	mov	r0, r4
   19b9c:	mov	r1, r5
   19ba0:	mov	r2, #1
   19ba4:	bl	1c700 <main@@Base+0x6978>
   19ba8:	cmp	r0, r4
   19bac:	beq	1a058 <main@@Base+0x42d0>
   19bb0:	mov	r1, r0
   19bb4:	mov	r0, r8
   19bb8:	mov	r2, r5
   19bbc:	mov	r3, sl
   19bc0:	sub	sp, fp, #28
   19bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bc8:	b	1cc60 <main@@Base+0x6ed8>
   19bcc:	movw	r3, #11855	; 0x2e4f
   19bd0:	movt	r3, #28005	; 0x6d65
   19bd4:	eor	r3, r0, r3
   19bd8:	eor	r1, r1, r2
   19bdc:	orrs	r2, r3, r1
   19be0:	beq	19ca4 <main@@Base+0x3f1c>
   19be4:	movw	r2, #11845	; 0x2e45
   19be8:	movt	r2, #28005	; 0x6d65
   19bec:	eor	r0, r0, r2
   19bf0:	orrs	r0, r0, r1
   19bf4:	bne	1a058 <main@@Base+0x42d0>
   19bf8:	add	r0, r7, #8
   19bfc:	mov	r1, r5
   19c00:	bl	196a8 <main@@Base+0x3920>
   19c04:	movw	r2, #28016	; 0x6d70
   19c08:	movt	r2, #30817	; 0x7861
   19c0c:	movw	r3, #11880	; 0x2e68
   19c10:	movt	r3, #27749	; 0x6c65
   19c14:	subs	r6, r0, r3
   19c18:	sbcs	r6, r1, r2
   19c1c:	bcs	19d78 <main@@Base+0x3ff0>
   19c20:	subs	r6, r3, #37	; 0x25
   19c24:	sbc	r4, r2, #0
   19c28:	subs	r6, r0, r6
   19c2c:	sbcs	r6, r1, r4
   19c30:	bcs	19df4 <main@@Base+0x406c>
   19c34:	subs	r3, r3, #39	; 0x27
   19c38:	eor	r0, r0, r3
   19c3c:	sbc	r2, r2, #0
   19c40:	eor	r1, r1, r2
   19c44:	orrs	r0, r0, r1
   19c48:	bne	1a058 <main@@Base+0x42d0>
   19c4c:	add	r4, r7, #16
   19c50:	mov	r0, r4
   19c54:	mov	r1, r5
   19c58:	bl	196a8 <main@@Base+0x3920>
   19c5c:	bfc	r1, #0, #16
   19c60:	movw	r0, #0
   19c64:	movt	r0, #28281	; 0x6e79
   19c68:	teq	r1, r0
   19c6c:	bne	1a058 <main@@Base+0x42d0>
   19c70:	mov	r0, r4
   19c74:	mov	r1, r5
   19c78:	mov	r2, #2
   19c7c:	bl	1c700 <main@@Base+0x6978>
   19c80:	cmp	r0, r4
   19c84:	beq	1a058 <main@@Base+0x42d0>
   19c88:	mov	r1, r0
   19c8c:	mov	r0, r8
   19c90:	mov	r2, r5
   19c94:	mov	r3, sl
   19c98:	sub	sp, fp, #28
   19c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ca0:	b	1af94 <main@@Base+0x520c>
   19ca4:	add	r0, r7, #8
   19ca8:	mov	r1, r5
   19cac:	bl	196a8 <main@@Base+0x3920>
   19cb0:	movw	r2, #25970	; 0x6572
   19cb4:	movt	r2, #29800	; 0x7468
   19cb8:	eor	r1, r1, r2
   19cbc:	movw	r2, #28005	; 0x6d65
   19cc0:	movt	r2, #20065	; 0x4e61
   19cc4:	eor	r0, r0, r2
   19cc8:	orrs	r0, r0, r1
   19ccc:	bne	1a058 <main@@Base+0x42d0>
   19cd0:	add	r0, r7, #16
   19cd4:	mov	r1, r5
   19cd8:	bl	196a8 <main@@Base+0x3920>
   19cdc:	movw	r2, #24931	; 0x6163
   19ce0:	movt	r2, #21360	; 0x5370
   19ce4:	eor	r1, r1, r2
   19ce8:	movw	r2, #18034	; 0x4672
   19cec:	movt	r2, #25902	; 0x652e
   19cf0:	eor	r0, r0, r2
   19cf4:	orrs	r0, r0, r1
   19cf8:	bne	1a058 <main@@Base+0x42d0>
   19cfc:	add	r0, r7, #24
   19d00:	mov	r1, r5
   19d04:	bl	196a8 <main@@Base+0x3920>
   19d08:	movw	r2, #18798	; 0x496e
   19d0c:	movt	r2, #28525	; 0x6f6d
   19d10:	eor	r1, r1, r2
   19d14:	movw	r2, #30052	; 0x7564
   19d18:	movt	r2, #25452	; 0x636c
   19d1c:	eor	r0, r0, r2
   19d20:	orrs	r0, r0, r1
   19d24:	bne	1a058 <main@@Base+0x42d0>
   19d28:	add	r4, r7, #32
   19d2c:	mov	r0, r4
   19d30:	mov	r1, r5
   19d34:	bl	196a8 <main@@Base+0x3920>
   19d38:	and	r0, r1, #-16777216	; 0xff000000
   19d3c:	teq	r0, #1694498816	; 0x65000000
   19d40:	bne	1a058 <main@@Base+0x42d0>
   19d44:	mov	r0, r4
   19d48:	mov	r1, r5
   19d4c:	mov	r2, #1
   19d50:	bl	1c700 <main@@Base+0x6978>
   19d54:	cmp	r0, r4
   19d58:	beq	1a058 <main@@Base+0x42d0>
   19d5c:	mov	r1, r0
   19d60:	mov	r0, r8
   19d64:	mov	r2, r5
   19d68:	mov	r3, sl
   19d6c:	sub	sp, fp, #28
   19d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d74:	b	1cee4 <main@@Base+0x715c>
   19d78:	eor	r6, r0, r3
   19d7c:	eor	r4, r1, r2
   19d80:	orrs	r6, r6, r4
   19d84:	bne	19e74 <main@@Base+0x40ec>
   19d88:	add	r4, r7, #16
   19d8c:	mov	r0, r4
   19d90:	mov	r1, r5
   19d94:	bl	196a8 <main@@Base+0x3920>
   19d98:	movw	r2, #24421	; 0x5f65
   19d9c:	movt	r2, #25959	; 0x6567
   19da0:	add	r2, r2, #1114112	; 0x110000
   19da4:	eor	r1, r1, r2
   19da8:	bic	r0, r0, #255	; 0xff
   19dac:	movw	r2, #27904	; 0x6d00
   19db0:	movt	r2, #28277	; 0x6e75
   19db4:	eor	r0, r0, r2
   19db8:	orrs	r0, r0, r1
   19dbc:	bne	1a058 <main@@Base+0x42d0>
   19dc0:	mov	r0, r4
   19dc4:	mov	r1, r5
   19dc8:	mov	r2, #7
   19dcc:	bl	1c700 <main@@Base+0x6978>
   19dd0:	cmp	r0, r4
   19dd4:	beq	1a058 <main@@Base+0x42d0>
   19dd8:	mov	r1, r0
   19ddc:	mov	r0, r8
   19de0:	mov	r2, r5
   19de4:	mov	r3, sl
   19de8:	sub	sp, fp, #28
   19dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19df0:	b	1c838 <main@@Base+0x6ab0>
   19df4:	movw	r3, #11846	; 0x2e46
   19df8:	movt	r3, #27749	; 0x6c65
   19dfc:	eor	r3, r0, r3
   19e00:	eor	r1, r1, r2
   19e04:	orrs	r2, r3, r1
   19e08:	beq	19f84 <main@@Base+0x41fc>
   19e0c:	movw	r2, #11843	; 0x2e43
   19e10:	movt	r2, #27749	; 0x6c65
   19e14:	eor	r0, r0, r2
   19e18:	orrs	r0, r0, r1
   19e1c:	bne	1a058 <main@@Base+0x42d0>
   19e20:	add	r4, r7, #16
   19e24:	mov	r0, r4
   19e28:	mov	r1, r5
   19e2c:	bl	196a8 <main@@Base+0x3920>
   19e30:	movw	r0, #28530	; 0x6f72
   19e34:	movt	r0, #28524	; 0x6f6c
   19e38:	teq	r1, r0
   19e3c:	bne	1a058 <main@@Base+0x42d0>
   19e40:	mov	r0, r4
   19e44:	mov	r1, r5
   19e48:	mov	r2, #4
   19e4c:	bl	1c700 <main@@Base+0x6978>
   19e50:	cmp	r0, r4
   19e54:	beq	1a058 <main@@Base+0x42d0>
   19e58:	mov	r1, r0
   19e5c:	mov	r0, r8
   19e60:	mov	r2, r5
   19e64:	mov	r3, sl
   19e68:	sub	sp, fp, #28
   19e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e70:	b	1972c <main@@Base+0x39a4>
   19e74:	add	ip, r3, #6
   19e78:	subs	r6, r0, ip
   19e7c:	sbcs	r1, r1, r2
   19e80:	bcs	19f04 <main@@Base+0x417c>
   19e84:	add	r1, r3, #1
   19e88:	eor	r0, r0, r1
   19e8c:	orrs	r0, r0, r4
   19e90:	bne	1a058 <main@@Base+0x42d0>
   19e94:	add	r4, r7, #16
   19e98:	mov	r0, r4
   19e9c:	mov	r1, r5
   19ea0:	bl	196a8 <main@@Base+0x3920>
   19ea4:	movw	r2, #24421	; 0x5f65
   19ea8:	movt	r2, #25959	; 0x6567
   19eac:	add	r2, r2, #851968	; 0xd0000
   19eb0:	add	r2, r2, #150994944	; 0x9000000
   19eb4:	eor	r1, r1, r2
   19eb8:	bic	r0, r0, #255	; 0xff
   19ebc:	movw	r2, #27904	; 0x6d00
   19ec0:	movt	r2, #28277	; 0x6e75
   19ec4:	eor	r0, r0, r2
   19ec8:	orrs	r0, r0, r1
   19ecc:	bne	1a058 <main@@Base+0x42d0>
   19ed0:	mov	r0, r4
   19ed4:	mov	r1, r5
   19ed8:	mov	r2, #7
   19edc:	bl	1c700 <main@@Base+0x6978>
   19ee0:	cmp	r0, r4
   19ee4:	beq	1a058 <main@@Base+0x42d0>
   19ee8:	mov	r1, r0
   19eec:	mov	r0, r8
   19ef0:	mov	r2, r5
   19ef4:	mov	r3, sl
   19ef8:	sub	sp, fp, #28
   19efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f00:	b	1c960 <main@@Base+0x6bd8>
   19f04:	eor	r0, r0, ip
   19f08:	orrs	r0, r0, r4
   19f0c:	bne	1a058 <main@@Base+0x42d0>
   19f10:	add	r6, r7, #16
   19f14:	mov	r0, r6
   19f18:	mov	r1, r5
   19f1c:	bl	196a8 <main@@Base+0x3920>
   19f20:	mov	r4, r0
   19f24:	mov	r9, r1
   19f28:	lsr	r0, r0, #8
   19f2c:	orr	r0, r0, r1, lsl #24
   19f30:	movw	r1, #30061	; 0x756d
   19f34:	movt	r1, #25966	; 0x656e
   19f38:	eor	r0, r0, r1
   19f3c:	movw	r1, #26463	; 0x675f
   19f40:	movt	r1, #101	; 0x65
   19f44:	eor	r1, r1, r9, lsr #8
   19f48:	orrs	r0, r0, r1
   19f4c:	bne	19fe0 <main@@Base+0x4258>
   19f50:	mov	r0, r6
   19f54:	mov	r1, r5
   19f58:	mov	r2, #7
   19f5c:	bl	1c700 <main@@Base+0x6978>
   19f60:	mov	r1, r0
   19f64:	cmp	r0, r6
   19f68:	beq	19fdc <main@@Base+0x4254>
   19f6c:	mov	r0, r8
   19f70:	mov	r2, r5
   19f74:	mov	r3, sl
   19f78:	sub	sp, fp, #28
   19f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f80:	b	1cad4 <main@@Base+0x6d4c>
   19f84:	add	r4, r7, #16
   19f88:	mov	r0, r4
   19f8c:	mov	r1, r5
   19f90:	bl	196a8 <main@@Base+0x3920>
   19f94:	bfc	r1, #0, #16
   19f98:	movw	r0, #0
   19f9c:	movt	r0, #28527	; 0x6f6f
   19fa0:	teq	r1, r0
   19fa4:	bne	1a058 <main@@Base+0x42d0>
   19fa8:	mov	r0, r4
   19fac:	mov	r1, r5
   19fb0:	mov	r2, #2
   19fb4:	bl	1c700 <main@@Base+0x6978>
   19fb8:	cmp	r0, r4
   19fbc:	beq	1a058 <main@@Base+0x42d0>
   19fc0:	mov	r1, r0
   19fc4:	mov	r0, r8
   19fc8:	mov	r2, r5
   19fcc:	mov	r3, sl
   19fd0:	sub	sp, fp, #28
   19fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fd8:	b	1c720 <main@@Base+0x6998>
   19fdc:	mov	r6, r1
   19fe0:	movw	r0, #31077	; 0x7965
   19fe4:	movt	r0, #28788	; 0x7074
   19fe8:	eor	r0, r4, r0
   19fec:	movw	r1, #25965	; 0x656d
   19ff0:	movt	r1, #28532	; 0x6f74
   19ff4:	eor	r1, r9, r1
   19ff8:	orrs	r0, r0, r1
   19ffc:	bne	1a058 <main@@Base+0x42d0>
   1a000:	add	r4, r6, #8
   1a004:	mov	r0, r4
   1a008:	mov	r1, r5
   1a00c:	bl	196a8 <main@@Base+0x3920>
   1a010:	bic	r0, r1, #255	; 0xff
   1a014:	movw	r1, #27904	; 0x6d00
   1a018:	movt	r1, #28277	; 0x6e75
   1a01c:	teq	r0, r1
   1a020:	bne	1a058 <main@@Base+0x42d0>
   1a024:	mov	r0, r4
   1a028:	mov	r1, r5
   1a02c:	mov	r2, #3
   1a030:	bl	1c700 <main@@Base+0x6978>
   1a034:	cmp	r0, r4
   1a038:	beq	1a058 <main@@Base+0x42d0>
   1a03c:	mov	r1, r0
   1a040:	mov	r0, r8
   1a044:	mov	r2, r5
   1a048:	mov	r3, sl
   1a04c:	sub	sp, fp, #28
   1a050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a054:	b	1cbe4 <main@@Base+0x6e5c>
   1a058:	mov	r0, r7
   1a05c:	sub	sp, fp, #28
   1a060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a064:	push	{r4, r5, r6, r7, fp, lr}
   1a068:	add	fp, sp, #16
   1a06c:	sub	sp, sp, #24
   1a070:	mov	r7, r1
   1a074:	mov	r6, r0
   1a078:	mov	r0, #0
   1a07c:	str	r0, [sp, #20]
   1a080:	str	r0, [sp, #16]
   1a084:	str	r0, [sp, #12]
   1a088:	strb	r0, [r3]
   1a08c:	cmp	r1, r2
   1a090:	beq	1a0e8 <main@@Base+0x4360>
   1a094:	mov	r5, r3
   1a098:	mov	r4, r2
   1a09c:	add	r0, sp, #16
   1a0a0:	str	r0, [sp]
   1a0a4:	add	r3, sp, #12
   1a0a8:	mov	r0, r6
   1a0ac:	mov	r1, r7
   1a0b0:	bl	272d4 <flatcc_json_parser_integer@@Base>
   1a0b4:	mov	r1, r0
   1a0b8:	cmp	r0, r7
   1a0bc:	beq	1a0e4 <main@@Base+0x435c>
   1a0c0:	ldr	r3, [sp, #12]
   1a0c4:	ldr	r0, [sp, #16]
   1a0c8:	ldr	r2, [sp, #20]
   1a0cc:	stm	sp, {r0, r2, r5}
   1a0d0:	mov	r0, r6
   1a0d4:	mov	r2, r4
   1a0d8:	bl	1cfe8 <main@@Base+0x7260>
   1a0dc:	mov	r7, r0
   1a0e0:	b	1a0e8 <main@@Base+0x4360>
   1a0e4:	mov	r7, r1
   1a0e8:	mov	r0, r7
   1a0ec:	sub	sp, fp, #16
   1a0f0:	pop	{r4, r5, r6, r7, fp, pc}
   1a0f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0f8:	add	fp, sp, #28
   1a0fc:	sub	sp, sp, #36	; 0x24
   1a100:	mov	r8, r3
   1a104:	mov	r6, r2
   1a108:	mov	r5, r0
   1a10c:	mov	r0, #0
   1a110:	strb	r0, [fp, #-29]	; 0xffffffe3
   1a114:	ldr	sl, [fp, #8]
   1a118:	strb	r0, [sl]
   1a11c:	mov	r0, r5
   1a120:	bl	1d044 <main@@Base+0x72bc>
   1a124:	mov	r4, r0
   1a128:	cmp	r0, r6
   1a12c:	beq	1a1f4 <main@@Base+0x446c>
   1a130:	mov	r9, r8
   1a134:	ldr	r7, [r9]
   1a138:	add	r0, sp, #24
   1a13c:	str	r0, [sp]
   1a140:	add	r0, sp, #16
   1a144:	str	r0, [sp, #4]
   1a148:	mov	r0, r5
   1a14c:	mov	r1, r4
   1a150:	mov	r2, r6
   1a154:	add	r3, sp, #20
   1a158:	blx	r7
   1a15c:	mov	r7, r0
   1a160:	cmp	r0, r6
   1a164:	beq	1a200 <main@@Base+0x4478>
   1a168:	cmp	r7, r4
   1a16c:	beq	1a1c8 <main@@Base+0x4440>
   1a170:	ldr	r3, [sp, #20]
   1a174:	ldr	r0, [sp, #24]
   1a178:	ldr	r1, [sp, #28]
   1a17c:	stm	sp, {r0, r1}
   1a180:	sub	r0, fp, #29
   1a184:	str	r0, [sp, #8]
   1a188:	mov	r0, r5
   1a18c:	mov	r1, r7
   1a190:	mov	r2, r6
   1a194:	bl	1cfe8 <main@@Base+0x7260>
   1a198:	cmp	r0, r6
   1a19c:	beq	1a1fc <main@@Base+0x4474>
   1a1a0:	ldrb	r0, [sl]
   1a1a4:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1a1a8:	add	r0, r0, r1
   1a1ac:	strb	r0, [sl]
   1a1b0:	ldr	r0, [sp, #16]
   1a1b4:	cmp	r0, #0
   1a1b8:	mov	r4, r7
   1a1bc:	mov	r9, r8
   1a1c0:	bne	1a134 <main@@Base+0x43ac>
   1a1c4:	b	1a200 <main@@Base+0x4478>
   1a1c8:	ldr	r0, [r9, #4]!
   1a1cc:	cmp	r0, #0
   1a1d0:	mov	r4, r7
   1a1d4:	bne	1a134 <main@@Base+0x43ac>
   1a1d8:	mov	r0, r5
   1a1dc:	mov	r1, r7
   1a1e0:	mov	r2, r6
   1a1e4:	mov	r3, #23
   1a1e8:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1a1ec:	mov	r7, r0
   1a1f0:	b	1a200 <main@@Base+0x4478>
   1a1f4:	mov	r7, r4
   1a1f8:	b	1a200 <main@@Base+0x4478>
   1a1fc:	mov	r7, r6
   1a200:	mov	r0, r7
   1a204:	sub	sp, fp, #28
   1a208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a20c:	push	{r4, r5, fp, lr}
   1a210:	add	fp, sp, #8
   1a214:	mov	r4, r1
   1a218:	mov	r5, r0
   1a21c:	mov	r0, r1
   1a220:	bl	1d06c <main@@Base+0x72e4>
   1a224:	strb	r4, [r5]
   1a228:	pop	{r4, r5, fp, pc}
   1a22c:	push	{r4, r5, r6, sl, fp, lr}
   1a230:	add	fp, sp, #16
   1a234:	mov	r5, r3
   1a238:	mov	r4, r2
   1a23c:	mov	r6, r0
   1a240:	cmp	r1, r2
   1a244:	beq	1a294 <main@@Base+0x450c>
   1a248:	ldrb	r0, [r1]
   1a24c:	cmp	r0, #91	; 0x5b
   1a250:	bne	1a294 <main@@Base+0x450c>
   1a254:	add	r1, r1, #1
   1a258:	mov	r0, r6
   1a25c:	mov	r2, r4
   1a260:	bl	1c638 <main@@Base+0x68b0>
   1a264:	cmp	r0, r4
   1a268:	beq	1a2b0 <main@@Base+0x4528>
   1a26c:	ldrb	r1, [r0]
   1a270:	cmp	r1, #93	; 0x5d
   1a274:	bne	1a2b0 <main@@Base+0x4528>
   1a278:	mov	r1, #0
   1a27c:	str	r1, [r5]
   1a280:	add	r1, r0, #1
   1a284:	mov	r0, r6
   1a288:	mov	r2, r4
   1a28c:	pop	{r4, r5, r6, sl, fp, lr}
   1a290:	b	1c638 <main@@Base+0x68b0>
   1a294:	mov	r0, #0
   1a298:	str	r0, [r5]
   1a29c:	mov	r0, r6
   1a2a0:	mov	r2, r4
   1a2a4:	mov	r3, #22
   1a2a8:	pop	{r4, r5, r6, sl, fp, lr}
   1a2ac:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1a2b0:	mov	r1, #1
   1a2b4:	str	r1, [r5]
   1a2b8:	pop	{r4, r5, r6, sl, fp, pc}
   1a2bc:	push	{r4, r5, r6, r7, fp, lr}
   1a2c0:	add	fp, sp, #16
   1a2c4:	sub	sp, sp, #24
   1a2c8:	mov	r7, r1
   1a2cc:	mov	r6, r0
   1a2d0:	mov	r0, #0
   1a2d4:	str	r0, [sp, #20]
   1a2d8:	str	r0, [sp, #16]
   1a2dc:	str	r0, [sp, #12]
   1a2e0:	strb	r0, [r3]
   1a2e4:	cmp	r1, r2
   1a2e8:	beq	1a340 <main@@Base+0x45b8>
   1a2ec:	mov	r5, r3
   1a2f0:	mov	r4, r2
   1a2f4:	add	r0, sp, #16
   1a2f8:	str	r0, [sp]
   1a2fc:	add	r3, sp, #12
   1a300:	mov	r0, r6
   1a304:	mov	r1, r7
   1a308:	bl	272d4 <flatcc_json_parser_integer@@Base>
   1a30c:	mov	r1, r0
   1a310:	cmp	r0, r7
   1a314:	beq	1a33c <main@@Base+0x45b4>
   1a318:	ldr	r3, [sp, #12]
   1a31c:	ldr	r0, [sp, #16]
   1a320:	ldr	r2, [sp, #20]
   1a324:	stm	sp, {r0, r2, r5}
   1a328:	mov	r0, r6
   1a32c:	mov	r2, r4
   1a330:	bl	1d070 <main@@Base+0x72e8>
   1a334:	mov	r7, r0
   1a338:	b	1a340 <main@@Base+0x45b8>
   1a33c:	mov	r7, r1
   1a340:	mov	r0, r7
   1a344:	sub	sp, fp, #16
   1a348:	pop	{r4, r5, r6, r7, fp, pc}
   1a34c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a350:	add	fp, sp, #28
   1a354:	sub	sp, sp, #36	; 0x24
   1a358:	mov	r8, r3
   1a35c:	mov	r6, r2
   1a360:	mov	r5, r0
   1a364:	mov	r0, #0
   1a368:	strb	r0, [fp, #-29]	; 0xffffffe3
   1a36c:	ldr	sl, [fp, #8]
   1a370:	strb	r0, [sl]
   1a374:	mov	r0, r5
   1a378:	bl	1d044 <main@@Base+0x72bc>
   1a37c:	mov	r4, r0
   1a380:	cmp	r0, r6
   1a384:	beq	1a44c <main@@Base+0x46c4>
   1a388:	mov	r9, r8
   1a38c:	ldr	r7, [r9]
   1a390:	add	r0, sp, #24
   1a394:	str	r0, [sp]
   1a398:	add	r0, sp, #16
   1a39c:	str	r0, [sp, #4]
   1a3a0:	mov	r0, r5
   1a3a4:	mov	r1, r4
   1a3a8:	mov	r2, r6
   1a3ac:	add	r3, sp, #20
   1a3b0:	blx	r7
   1a3b4:	mov	r7, r0
   1a3b8:	cmp	r0, r6
   1a3bc:	beq	1a458 <main@@Base+0x46d0>
   1a3c0:	cmp	r7, r4
   1a3c4:	beq	1a420 <main@@Base+0x4698>
   1a3c8:	ldr	r3, [sp, #20]
   1a3cc:	ldr	r0, [sp, #24]
   1a3d0:	ldr	r1, [sp, #28]
   1a3d4:	stm	sp, {r0, r1}
   1a3d8:	sub	r0, fp, #29
   1a3dc:	str	r0, [sp, #8]
   1a3e0:	mov	r0, r5
   1a3e4:	mov	r1, r7
   1a3e8:	mov	r2, r6
   1a3ec:	bl	1d070 <main@@Base+0x72e8>
   1a3f0:	cmp	r0, r6
   1a3f4:	beq	1a454 <main@@Base+0x46cc>
   1a3f8:	ldrb	r0, [sl]
   1a3fc:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1a400:	add	r0, r0, r1
   1a404:	strb	r0, [sl]
   1a408:	ldr	r0, [sp, #16]
   1a40c:	cmp	r0, #0
   1a410:	mov	r4, r7
   1a414:	mov	r9, r8
   1a418:	bne	1a38c <main@@Base+0x4604>
   1a41c:	b	1a458 <main@@Base+0x46d0>
   1a420:	ldr	r0, [r9, #4]!
   1a424:	cmp	r0, #0
   1a428:	mov	r4, r7
   1a42c:	bne	1a38c <main@@Base+0x4604>
   1a430:	mov	r0, r5
   1a434:	mov	r1, r7
   1a438:	mov	r2, r6
   1a43c:	mov	r3, #23
   1a440:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1a444:	mov	r7, r0
   1a448:	b	1a458 <main@@Base+0x46d0>
   1a44c:	mov	r7, r4
   1a450:	b	1a458 <main@@Base+0x46d0>
   1a454:	mov	r7, r6
   1a458:	mov	r0, r7
   1a45c:	sub	sp, fp, #28
   1a460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a464:	push	{r4, r5, fp, lr}
   1a468:	add	fp, sp, #8
   1a46c:	mov	r4, r1
   1a470:	mov	r5, r0
   1a474:	mov	r0, r1
   1a478:	bl	1d0b8 <main@@Base+0x7330>
   1a47c:	strb	r4, [r5]
   1a480:	pop	{r4, r5, fp, pc}
   1a484:	push	{r4, r5, r6, sl, fp, lr}
   1a488:	add	fp, sp, #16
   1a48c:	mov	r6, r3
   1a490:	mov	r4, r2
   1a494:	mov	r5, r0
   1a498:	bl	1c638 <main@@Base+0x68b0>
   1a49c:	mov	r1, r0
   1a4a0:	cmp	r0, r4
   1a4a4:	beq	1a4e8 <main@@Base+0x4760>
   1a4a8:	ldrb	r0, [r1]
   1a4ac:	cmp	r0, #44	; 0x2c
   1a4b0:	bne	1a4f0 <main@@Base+0x4768>
   1a4b4:	add	r1, r1, #1
   1a4b8:	mov	r0, r5
   1a4bc:	mov	r2, r4
   1a4c0:	bl	1c638 <main@@Base+0x68b0>
   1a4c4:	mov	r1, r0
   1a4c8:	cmp	r0, r4
   1a4cc:	beq	1a518 <main@@Base+0x4790>
   1a4d0:	ldrb	r0, [r1]
   1a4d4:	cmp	r0, #93	; 0x5d
   1a4d8:	bne	1a534 <main@@Base+0x47ac>
   1a4dc:	mov	r0, #0
   1a4e0:	str	r0, [r6]
   1a4e4:	b	1a504 <main@@Base+0x477c>
   1a4e8:	mov	r0, #0
   1a4ec:	b	1a538 <main@@Base+0x47b0>
   1a4f0:	mov	r0, #0
   1a4f4:	str	r0, [r6]
   1a4f8:	ldrb	r0, [r1]
   1a4fc:	cmp	r0, #93	; 0x5d
   1a500:	bne	1a520 <main@@Base+0x4798>
   1a504:	add	r1, r1, #1
   1a508:	mov	r0, r5
   1a50c:	mov	r2, r4
   1a510:	pop	{r4, r5, r6, sl, fp, lr}
   1a514:	b	1c638 <main@@Base+0x68b0>
   1a518:	mov	r0, #0
   1a51c:	str	r0, [r6]
   1a520:	mov	r0, r5
   1a524:	mov	r2, r4
   1a528:	mov	r3, #9
   1a52c:	pop	{r4, r5, r6, sl, fp, lr}
   1a530:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1a534:	mov	r0, #1
   1a538:	str	r0, [r6]
   1a53c:	mov	r0, r1
   1a540:	pop	{r4, r5, r6, sl, fp, pc}
   1a544:	push	{r4, r5, r6, r7, fp, lr}
   1a548:	add	fp, sp, #16
   1a54c:	sub	sp, sp, #24
   1a550:	mov	r7, r1
   1a554:	mov	r6, r0
   1a558:	mov	r0, #0
   1a55c:	str	r0, [sp, #20]
   1a560:	str	r0, [sp, #16]
   1a564:	str	r0, [sp, #12]
   1a568:	strh	r0, [r3]
   1a56c:	cmp	r1, r2
   1a570:	beq	1a5c8 <main@@Base+0x4840>
   1a574:	mov	r5, r3
   1a578:	mov	r4, r2
   1a57c:	add	r0, sp, #16
   1a580:	str	r0, [sp]
   1a584:	add	r3, sp, #12
   1a588:	mov	r0, r6
   1a58c:	mov	r1, r7
   1a590:	bl	272d4 <flatcc_json_parser_integer@@Base>
   1a594:	mov	r1, r0
   1a598:	cmp	r0, r7
   1a59c:	beq	1a5c4 <main@@Base+0x483c>
   1a5a0:	ldr	r3, [sp, #12]
   1a5a4:	ldr	r0, [sp, #16]
   1a5a8:	ldr	r2, [sp, #20]
   1a5ac:	stm	sp, {r0, r2, r5}
   1a5b0:	mov	r0, r6
   1a5b4:	mov	r2, r4
   1a5b8:	bl	1d0bc <main@@Base+0x7334>
   1a5bc:	mov	r7, r0
   1a5c0:	b	1a5c8 <main@@Base+0x4840>
   1a5c4:	mov	r7, r1
   1a5c8:	mov	r0, r7
   1a5cc:	sub	sp, fp, #16
   1a5d0:	pop	{r4, r5, r6, r7, fp, pc}
   1a5d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5d8:	add	fp, sp, #28
   1a5dc:	sub	sp, sp, #36	; 0x24
   1a5e0:	mov	r8, r3
   1a5e4:	mov	r6, r2
   1a5e8:	mov	r5, r0
   1a5ec:	mov	r0, #0
   1a5f0:	strh	r0, [fp, #-30]	; 0xffffffe2
   1a5f4:	ldr	sl, [fp, #8]
   1a5f8:	strh	r0, [sl]
   1a5fc:	mov	r0, r5
   1a600:	bl	1d044 <main@@Base+0x72bc>
   1a604:	mov	r4, r0
   1a608:	cmp	r0, r6
   1a60c:	beq	1a6d4 <main@@Base+0x494c>
   1a610:	mov	r9, r8
   1a614:	ldr	r7, [r9]
   1a618:	add	r0, sp, #24
   1a61c:	str	r0, [sp]
   1a620:	add	r0, sp, #16
   1a624:	str	r0, [sp, #4]
   1a628:	mov	r0, r5
   1a62c:	mov	r1, r4
   1a630:	mov	r2, r6
   1a634:	add	r3, sp, #20
   1a638:	blx	r7
   1a63c:	mov	r7, r0
   1a640:	cmp	r0, r6
   1a644:	beq	1a6e0 <main@@Base+0x4958>
   1a648:	cmp	r7, r4
   1a64c:	beq	1a6a8 <main@@Base+0x4920>
   1a650:	ldr	r3, [sp, #20]
   1a654:	ldr	r0, [sp, #24]
   1a658:	ldr	r1, [sp, #28]
   1a65c:	stm	sp, {r0, r1}
   1a660:	sub	r0, fp, #30
   1a664:	str	r0, [sp, #8]
   1a668:	mov	r0, r5
   1a66c:	mov	r1, r7
   1a670:	mov	r2, r6
   1a674:	bl	1d0bc <main@@Base+0x7334>
   1a678:	cmp	r0, r6
   1a67c:	beq	1a6dc <main@@Base+0x4954>
   1a680:	ldrh	r0, [sl]
   1a684:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1a688:	add	r0, r0, r1
   1a68c:	strh	r0, [sl]
   1a690:	ldr	r0, [sp, #16]
   1a694:	cmp	r0, #0
   1a698:	mov	r4, r7
   1a69c:	mov	r9, r8
   1a6a0:	bne	1a614 <main@@Base+0x488c>
   1a6a4:	b	1a6e0 <main@@Base+0x4958>
   1a6a8:	ldr	r0, [r9, #4]!
   1a6ac:	cmp	r0, #0
   1a6b0:	mov	r4, r7
   1a6b4:	bne	1a614 <main@@Base+0x488c>
   1a6b8:	mov	r0, r5
   1a6bc:	mov	r1, r7
   1a6c0:	mov	r2, r6
   1a6c4:	mov	r3, #23
   1a6c8:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1a6cc:	mov	r7, r0
   1a6d0:	b	1a6e0 <main@@Base+0x4958>
   1a6d4:	mov	r7, r4
   1a6d8:	b	1a6e0 <main@@Base+0x4958>
   1a6dc:	mov	r7, r6
   1a6e0:	mov	r0, r7
   1a6e4:	sub	sp, fp, #28
   1a6e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6ec:	push	{r4, r5, fp, lr}
   1a6f0:	add	fp, sp, #8
   1a6f4:	mov	r4, r1
   1a6f8:	mov	r5, r0
   1a6fc:	mov	r0, r1
   1a700:	bl	1d11c <main@@Base+0x7394>
   1a704:	strh	r4, [r5]
   1a708:	pop	{r4, r5, fp, pc}
   1a70c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a710:	add	fp, sp, #24
   1a714:	sub	sp, sp, #8
   1a718:	mov	r8, r3
   1a71c:	mov	r4, r2
   1a720:	mov	r7, r1
   1a724:	mov	r5, r0
   1a728:	mov	r0, #0
   1a72c:	str	r0, [r3]
   1a730:	ldr	r0, [r5]
   1a734:	mov	r1, #0
   1a738:	bl	226c8 <flatcc_builder_start_table@@Base>
   1a73c:	cmp	r0, #0
   1a740:	bne	1a7d0 <main@@Base+0x4a48>
   1a744:	add	r3, sp, #4
   1a748:	mov	r0, r5
   1a74c:	mov	r1, r7
   1a750:	mov	r2, r4
   1a754:	bl	195f0 <main@@Base+0x3868>
   1a758:	mov	r7, r0
   1a75c:	ldr	r0, [sp, #4]
   1a760:	cmp	r0, #0
   1a764:	beq	1a7b0 <main@@Base+0x4a28>
   1a768:	add	r6, sp, #4
   1a76c:	mov	r0, r5
   1a770:	mov	r1, r7
   1a774:	mov	r2, r4
   1a778:	bl	19680 <main@@Base+0x38f8>
   1a77c:	mov	r1, r0
   1a780:	mov	r0, r5
   1a784:	mov	r2, r4
   1a788:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1a78c:	mov	r1, r0
   1a790:	mov	r0, r5
   1a794:	mov	r2, r4
   1a798:	mov	r3, r6
   1a79c:	bl	1c578 <main@@Base+0x67f0>
   1a7a0:	mov	r7, r0
   1a7a4:	ldr	r0, [sp, #4]
   1a7a8:	cmp	r0, #0
   1a7ac:	bne	1a76c <main@@Base+0x49e4>
   1a7b0:	ldr	r0, [r5, #20]
   1a7b4:	cmp	r0, #0
   1a7b8:	bne	1a7d0 <main@@Base+0x4a48>
   1a7bc:	ldr	r0, [r5]
   1a7c0:	bl	22de8 <flatcc_builder_end_table@@Base>
   1a7c4:	str	r0, [r8]
   1a7c8:	cmp	r0, #0
   1a7cc:	bne	1a7e8 <main@@Base+0x4a60>
   1a7d0:	mov	r0, r5
   1a7d4:	mov	r1, r7
   1a7d8:	mov	r2, r4
   1a7dc:	mov	r3, #33	; 0x21
   1a7e0:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1a7e4:	mov	r7, r0
   1a7e8:	mov	r0, r7
   1a7ec:	sub	sp, fp, #24
   1a7f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a7f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7f8:	add	fp, sp, #28
   1a7fc:	sub	sp, sp, #44	; 0x2c
   1a800:	mov	r6, r3
   1a804:	mov	r4, r2
   1a808:	mov	r5, r0
   1a80c:	sub	r3, fp, #32
   1a810:	bl	195f0 <main@@Base+0x3868>
   1a814:	mov	r1, r0
   1a818:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a81c:	cmp	r0, #0
   1a820:	beq	1ac74 <main@@Base+0x4eec>
   1a824:	add	r0, r6, #4
   1a828:	str	r0, [sp, #12]
   1a82c:	add	r0, r6, #8
   1a830:	str	r0, [sp, #8]
   1a834:	add	r0, r6, #26
   1a838:	str	r0, [sp, #20]
   1a83c:	add	r0, r6, #16
   1a840:	str	r0, [sp, #28]
   1a844:	str	r6, [sp, #16]
   1a848:	add	r0, r6, #24
   1a84c:	str	r0, [sp, #24]
   1a850:	movw	r9, #29556	; 0x7374
   1a854:	movt	r9, #29797	; 0x7465
   1a858:	mvn	r8, #-855638016	; 0xcd000000
   1a85c:	sub	sl, fp, #32
   1a860:	mov	r0, r5
   1a864:	mov	r2, r4
   1a868:	bl	19680 <main@@Base+0x38f8>
   1a86c:	mov	r7, r0
   1a870:	mov	r1, r4
   1a874:	bl	196a8 <main@@Base+0x3920>
   1a878:	subs	r2, r8, r0
   1a87c:	sbcs	r2, r9, r1
   1a880:	bcc	1a938 <main@@Base+0x4bb0>
   1a884:	eor	r2, r1, r9
   1a888:	and	r0, r0, #-16777216	; 0xff000000
   1a88c:	eor	r3, r0, #822083584	; 0x31000000
   1a890:	orrs	r2, r3, r2
   1a894:	beq	1aa30 <main@@Base+0x4ca8>
   1a898:	eor	r1, r1, r9
   1a89c:	eor	r0, r0, #838860800	; 0x32000000
   1a8a0:	orrs	r0, r0, r1
   1a8a4:	bne	1ab64 <main@@Base+0x4ddc>
   1a8a8:	mov	r0, r5
   1a8ac:	mov	r1, r7
   1a8b0:	mov	r2, r4
   1a8b4:	mov	r3, #5
   1a8b8:	bl	196ac <main@@Base+0x3924>
   1a8bc:	mov	r6, r0
   1a8c0:	cmp	r7, r0
   1a8c4:	beq	1ac24 <main@@Base+0x4e9c>
   1a8c8:	mov	r0, #0
   1a8cc:	strb	r0, [sp, #32]
   1a8d0:	mov	r0, r5
   1a8d4:	mov	r1, r6
   1a8d8:	mov	r2, r4
   1a8dc:	add	sl, sp, #32
   1a8e0:	mov	r3, sl
   1a8e4:	bl	1a064 <main@@Base+0x42dc>
   1a8e8:	mov	r7, r0
   1a8ec:	cmp	r6, r0
   1a8f0:	bne	1a924 <main@@Base+0x4b9c>
   1a8f4:	str	sl, [sp]
   1a8f8:	mov	r0, r5
   1a8fc:	mov	r1, r7
   1a900:	mov	r2, r4
   1a904:	movw	r3, #33160	; 0x8188
   1a908:	movt	r3, #4
   1a90c:	bl	1a0f4 <main@@Base+0x436c>
   1a910:	mov	r1, r0
   1a914:	cmp	r0, r7
   1a918:	cmpne	r1, r4
   1a91c:	beq	1ac60 <main@@Base+0x4ed8>
   1a920:	mov	r7, r1
   1a924:	sub	sl, fp, #32
   1a928:	ldrsb	r1, [sp, #32]
   1a92c:	ldr	r0, [sp, #24]
   1a930:	bl	1a20c <main@@Base+0x4484>
   1a934:	b	1ac38 <main@@Base+0x4eb0>
   1a938:	cmn	r1, #-2013265919	; 0x88000001
   1a93c:	bhi	1a988 <main@@Base+0x4c00>
   1a940:	eor	r1, r1, r9
   1a944:	and	r0, r0, #-16777216	; 0xff000000
   1a948:	eor	r0, r0, #855638016	; 0x33000000
   1a94c:	orrs	r0, r0, r1
   1a950:	bne	1ab64 <main@@Base+0x4ddc>
   1a954:	mov	r0, r5
   1a958:	mov	r1, r7
   1a95c:	mov	r2, r4
   1a960:	mov	r3, #5
   1a964:	bl	196ac <main@@Base+0x3924>
   1a968:	mov	r1, r0
   1a96c:	cmp	r7, r0
   1a970:	beq	1ab8c <main@@Base+0x4e04>
   1a974:	mov	r0, r5
   1a978:	mov	r2, r4
   1a97c:	ldr	r3, [sp, #20]
   1a980:	bl	1ac80 <main@@Base+0x4ef8>
   1a984:	b	1ac34 <main@@Base+0x4eac>
   1a988:	and	r0, r1, #-16777216	; 0xff000000
   1a98c:	lsr	r1, r1, #24
   1a990:	cmp	r1, #120	; 0x78
   1a994:	bhi	1aac4 <main@@Base+0x4d3c>
   1a998:	teq	r0, #2013265920	; 0x78000000
   1a99c:	bne	1ab64 <main@@Base+0x4ddc>
   1a9a0:	mov	r0, r5
   1a9a4:	mov	r1, r7
   1a9a8:	mov	r2, r4
   1a9ac:	mov	r3, #1
   1a9b0:	bl	196ac <main@@Base+0x3924>
   1a9b4:	mov	r6, r0
   1a9b8:	cmp	r7, r0
   1a9bc:	beq	1ac24 <main@@Base+0x4e9c>
   1a9c0:	mov	r0, #0
   1a9c4:	str	r0, [sp, #32]
   1a9c8:	mov	r0, r5
   1a9cc:	mov	r1, r6
   1a9d0:	mov	r2, r4
   1a9d4:	add	sl, sp, #32
   1a9d8:	mov	r3, sl
   1a9dc:	bl	26c68 <flatcc_json_parser_float@@Base>
   1a9e0:	mov	r7, r0
   1a9e4:	cmp	r6, r0
   1a9e8:	bne	1aa1c <main@@Base+0x4c94>
   1a9ec:	str	sl, [sp]
   1a9f0:	mov	r0, r5
   1a9f4:	mov	r1, r7
   1a9f8:	mov	r2, r4
   1a9fc:	movw	r3, #33188	; 0x81a4
   1aa00:	movt	r3, #4
   1aa04:	bl	1bbd8 <main@@Base+0x5e50>
   1aa08:	mov	r1, r0
   1aa0c:	cmp	r0, r7
   1aa10:	cmpne	r1, r4
   1aa14:	beq	1ac60 <main@@Base+0x4ed8>
   1aa18:	mov	r7, r1
   1aa1c:	sub	sl, fp, #32
   1aa20:	vldr	s0, [sp, #32]
   1aa24:	ldr	r0, [sp, #16]
   1aa28:	bl	1bce0 <main@@Base+0x5f58>
   1aa2c:	b	1ac38 <main@@Base+0x4eb0>
   1aa30:	mov	r0, r5
   1aa34:	mov	r1, r7
   1aa38:	mov	r2, r4
   1aa3c:	mov	r3, #5
   1aa40:	bl	196ac <main@@Base+0x3924>
   1aa44:	mov	r8, r0
   1aa48:	cmp	r7, r0
   1aa4c:	beq	1ab70 <main@@Base+0x4de8>
   1aa50:	mov	r0, #0
   1aa54:	str	r0, [sp, #36]	; 0x24
   1aa58:	str	r0, [sp, #32]
   1aa5c:	mov	r0, r5
   1aa60:	mov	r1, r8
   1aa64:	mov	r2, r4
   1aa68:	add	r6, sp, #32
   1aa6c:	mov	r3, r6
   1aa70:	bl	26b90 <flatcc_json_parser_double@@Base>
   1aa74:	mov	r7, r0
   1aa78:	cmp	r8, r0
   1aa7c:	bne	1aab0 <main@@Base+0x4d28>
   1aa80:	str	r6, [sp]
   1aa84:	mov	r0, r5
   1aa88:	mov	r1, r7
   1aa8c:	mov	r2, r4
   1aa90:	movw	r3, #33176	; 0x8198
   1aa94:	movt	r3, #4
   1aa98:	bl	1c450 <main@@Base+0x66c8>
   1aa9c:	mov	r1, r0
   1aaa0:	cmp	r0, r7
   1aaa4:	cmpne	r1, r4
   1aaa8:	beq	1ac60 <main@@Base+0x4ed8>
   1aaac:	mov	r7, r1
   1aab0:	mvn	r8, #-855638016	; 0xcd000000
   1aab4:	vldr	d0, [sp, #32]
   1aab8:	ldr	r0, [sp, #28]
   1aabc:	bl	1c560 <main@@Base+0x67d8>
   1aac0:	b	1ac38 <main@@Base+0x4eb0>
   1aac4:	teq	r0, #2030043136	; 0x79000000
   1aac8:	beq	1ab94 <main@@Base+0x4e0c>
   1aacc:	teq	r0, #2046820352	; 0x7a000000
   1aad0:	bne	1ab64 <main@@Base+0x4ddc>
   1aad4:	mov	r0, r5
   1aad8:	mov	r1, r7
   1aadc:	mov	r2, r4
   1aae0:	mov	r3, #1
   1aae4:	bl	196ac <main@@Base+0x3924>
   1aae8:	mov	r6, r0
   1aaec:	cmp	r7, r0
   1aaf0:	beq	1ac24 <main@@Base+0x4e9c>
   1aaf4:	mov	r0, #0
   1aaf8:	str	r0, [sp, #32]
   1aafc:	mov	r0, r5
   1ab00:	mov	r1, r6
   1ab04:	mov	r2, r4
   1ab08:	add	sl, sp, #32
   1ab0c:	mov	r3, sl
   1ab10:	bl	26c68 <flatcc_json_parser_float@@Base>
   1ab14:	mov	r7, r0
   1ab18:	cmp	r6, r0
   1ab1c:	bne	1ab50 <main@@Base+0x4dc8>
   1ab20:	str	sl, [sp]
   1ab24:	mov	r0, r5
   1ab28:	mov	r1, r7
   1ab2c:	mov	r2, r4
   1ab30:	movw	r3, #33200	; 0x81b0
   1ab34:	movt	r3, #4
   1ab38:	bl	1bbd8 <main@@Base+0x5e50>
   1ab3c:	mov	r1, r0
   1ab40:	cmp	r0, r7
   1ab44:	cmpne	r1, r4
   1ab48:	beq	1ac60 <main@@Base+0x4ed8>
   1ab4c:	mov	r7, r1
   1ab50:	sub	sl, fp, #32
   1ab54:	vldr	s0, [sp, #32]
   1ab58:	ldr	r0, [sp, #8]
   1ab5c:	bl	1bce0 <main@@Base+0x5f58>
   1ab60:	b	1ac38 <main@@Base+0x4eb0>
   1ab64:	mov	r0, r5
   1ab68:	mov	r1, r7
   1ab6c:	b	1ac2c <main@@Base+0x4ea4>
   1ab70:	mov	r0, r5
   1ab74:	mov	r1, r8
   1ab78:	mov	r2, r4
   1ab7c:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1ab80:	mov	r7, r0
   1ab84:	mvn	r8, #-855638016	; 0xcd000000
   1ab88:	b	1ac38 <main@@Base+0x4eb0>
   1ab8c:	mov	r0, r5
   1ab90:	b	1ac2c <main@@Base+0x4ea4>
   1ab94:	mov	r0, r5
   1ab98:	mov	r1, r7
   1ab9c:	mov	r2, r4
   1aba0:	mov	r3, #1
   1aba4:	bl	196ac <main@@Base+0x3924>
   1aba8:	mov	r6, r0
   1abac:	cmp	r7, r0
   1abb0:	beq	1ac24 <main@@Base+0x4e9c>
   1abb4:	mov	r0, #0
   1abb8:	str	r0, [sp, #32]
   1abbc:	mov	r0, r5
   1abc0:	mov	r1, r6
   1abc4:	mov	r2, r4
   1abc8:	add	sl, sp, #32
   1abcc:	mov	r3, sl
   1abd0:	bl	26c68 <flatcc_json_parser_float@@Base>
   1abd4:	mov	r7, r0
   1abd8:	cmp	r6, r0
   1abdc:	bne	1ac10 <main@@Base+0x4e88>
   1abe0:	str	sl, [sp]
   1abe4:	mov	r0, r5
   1abe8:	mov	r1, r7
   1abec:	mov	r2, r4
   1abf0:	movw	r3, #33212	; 0x81bc
   1abf4:	movt	r3, #4
   1abf8:	bl	1bbd8 <main@@Base+0x5e50>
   1abfc:	mov	r1, r0
   1ac00:	cmp	r0, r7
   1ac04:	cmpne	r1, r4
   1ac08:	beq	1ac60 <main@@Base+0x4ed8>
   1ac0c:	mov	r7, r1
   1ac10:	sub	sl, fp, #32
   1ac14:	vldr	s0, [sp, #32]
   1ac18:	ldr	r0, [sp, #12]
   1ac1c:	bl	1bce0 <main@@Base+0x5f58>
   1ac20:	b	1ac38 <main@@Base+0x4eb0>
   1ac24:	mov	r0, r5
   1ac28:	mov	r1, r6
   1ac2c:	mov	r2, r4
   1ac30:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1ac34:	mov	r7, r0
   1ac38:	mov	r0, r5
   1ac3c:	mov	r1, r7
   1ac40:	mov	r2, r4
   1ac44:	mov	r3, sl
   1ac48:	bl	1c578 <main@@Base+0x67f0>
   1ac4c:	mov	r1, r0
   1ac50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ac54:	cmp	r0, #0
   1ac58:	bne	1a860 <main@@Base+0x4ad8>
   1ac5c:	b	1ac74 <main@@Base+0x4eec>
   1ac60:	mov	r0, r5
   1ac64:	mov	r2, r4
   1ac68:	mov	r3, #33	; 0x21
   1ac6c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1ac70:	mov	r1, r0
   1ac74:	mov	r0, r1
   1ac78:	sub	sp, fp, #28
   1ac7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac84:	add	fp, sp, #28
   1ac88:	sub	sp, sp, #20
   1ac8c:	mov	r6, r3
   1ac90:	mov	r4, r2
   1ac94:	mov	r5, r0
   1ac98:	add	r3, sp, #16
   1ac9c:	bl	195f0 <main@@Base+0x3868>
   1aca0:	mov	r1, r0
   1aca4:	ldr	r0, [sp, #16]
   1aca8:	cmp	r0, #0
   1acac:	beq	1ae84 <main@@Base+0x50fc>
   1acb0:	str	r6, [sp, #8]
   1acb4:	add	r0, r6, #2
   1acb8:	str	r0, [sp, #4]
   1acbc:	add	sl, sp, #12
   1acc0:	add	r9, sp, #16
   1acc4:	mov	r0, r5
   1acc8:	mov	r2, r4
   1accc:	bl	19680 <main@@Base+0x38f8>
   1acd0:	mov	r6, r0
   1acd4:	mov	r1, r4
   1acd8:	bl	196a8 <main@@Base+0x3920>
   1acdc:	and	r0, r1, #-16777216	; 0xff000000
   1ace0:	teq	r0, #1627389952	; 0x61000000
   1ace4:	beq	1ad84 <main@@Base+0x4ffc>
   1ace8:	teq	r0, #1644167168	; 0x62000000
   1acec:	bne	1ae0c <main@@Base+0x5084>
   1acf0:	mov	r7, sl
   1acf4:	mov	r0, r5
   1acf8:	mov	r1, r6
   1acfc:	mov	r2, r4
   1ad00:	mov	r3, #1
   1ad04:	bl	196ac <main@@Base+0x3924>
   1ad08:	mov	sl, r0
   1ad0c:	cmp	r6, r0
   1ad10:	beq	1ae18 <main@@Base+0x5090>
   1ad14:	mov	r0, #0
   1ad18:	strb	r0, [sp, #15]
   1ad1c:	mov	r0, r5
   1ad20:	mov	r1, sl
   1ad24:	mov	r2, r4
   1ad28:	add	r6, sp, #15
   1ad2c:	mov	r3, r6
   1ad30:	bl	1a064 <main@@Base+0x42dc>
   1ad34:	mov	r8, r0
   1ad38:	cmp	sl, r0
   1ad3c:	bne	1ad70 <main@@Base+0x4fe8>
   1ad40:	str	r6, [sp]
   1ad44:	mov	r0, r5
   1ad48:	mov	r1, r8
   1ad4c:	mov	r2, r4
   1ad50:	movw	r3, #33224	; 0x81c8
   1ad54:	movt	r3, #4
   1ad58:	bl	1a0f4 <main@@Base+0x436c>
   1ad5c:	mov	r1, r0
   1ad60:	cmp	r0, r8
   1ad64:	cmpne	r1, r4
   1ad68:	beq	1ae70 <main@@Base+0x50e8>
   1ad6c:	mov	r8, r1
   1ad70:	mov	sl, r7
   1ad74:	ldrsb	r1, [sp, #15]
   1ad78:	ldr	r0, [sp, #4]
   1ad7c:	bl	1a20c <main@@Base+0x4484>
   1ad80:	b	1ae48 <main@@Base+0x50c0>
   1ad84:	mov	r0, r5
   1ad88:	mov	r1, r6
   1ad8c:	mov	r2, r4
   1ad90:	mov	r3, #1
   1ad94:	bl	196ac <main@@Base+0x3924>
   1ad98:	mov	r7, r0
   1ad9c:	cmp	r6, r0
   1ada0:	beq	1ae34 <main@@Base+0x50ac>
   1ada4:	mov	r0, #0
   1ada8:	strh	r0, [sp, #12]
   1adac:	mov	r0, r5
   1adb0:	mov	r1, r7
   1adb4:	mov	r2, r4
   1adb8:	mov	r3, sl
   1adbc:	bl	1a544 <main@@Base+0x47bc>
   1adc0:	mov	r8, r0
   1adc4:	cmp	r7, r0
   1adc8:	bne	1adfc <main@@Base+0x5074>
   1adcc:	str	sl, [sp]
   1add0:	mov	r0, r5
   1add4:	mov	r1, r8
   1add8:	mov	r2, r4
   1addc:	movw	r3, #33236	; 0x81d4
   1ade0:	movt	r3, #4
   1ade4:	bl	1a5d4 <main@@Base+0x484c>
   1ade8:	mov	r1, r0
   1adec:	cmp	r0, r8
   1adf0:	cmpne	r1, r4
   1adf4:	beq	1ae70 <main@@Base+0x50e8>
   1adf8:	mov	r8, r1
   1adfc:	ldrsh	r1, [sp, #12]
   1ae00:	ldr	r0, [sp, #8]
   1ae04:	bl	1a6ec <main@@Base+0x4964>
   1ae08:	b	1ae48 <main@@Base+0x50c0>
   1ae0c:	mov	r0, r5
   1ae10:	mov	r1, r6
   1ae14:	b	1ae3c <main@@Base+0x50b4>
   1ae18:	mov	r0, r5
   1ae1c:	mov	r1, sl
   1ae20:	mov	r2, r4
   1ae24:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1ae28:	mov	r8, r0
   1ae2c:	mov	sl, r7
   1ae30:	b	1ae48 <main@@Base+0x50c0>
   1ae34:	mov	r0, r5
   1ae38:	mov	r1, r7
   1ae3c:	mov	r2, r4
   1ae40:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1ae44:	mov	r8, r0
   1ae48:	mov	r0, r5
   1ae4c:	mov	r1, r8
   1ae50:	mov	r2, r4
   1ae54:	mov	r3, r9
   1ae58:	bl	1c578 <main@@Base+0x67f0>
   1ae5c:	mov	r1, r0
   1ae60:	ldr	r0, [sp, #16]
   1ae64:	cmp	r0, #0
   1ae68:	bne	1acc4 <main@@Base+0x4f3c>
   1ae6c:	b	1ae84 <main@@Base+0x50fc>
   1ae70:	mov	r0, r5
   1ae74:	mov	r2, r4
   1ae78:	mov	r3, #33	; 0x21
   1ae7c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1ae80:	mov	r1, r0
   1ae84:	mov	r0, r1
   1ae88:	sub	sp, fp, #28
   1ae8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae90:	push	{r4, r5, r6, sl, fp, lr}
   1ae94:	add	fp, sp, #16
   1ae98:	mov	r4, r2
   1ae9c:	mov	r5, r0
   1aea0:	ldr	r6, [fp, #8]
   1aea4:	mov	r0, #0
   1aea8:	str	r0, [r6]
   1aeac:	cmp	r3, #4
   1aeb0:	bhi	1af50 <main@@Base+0x51c8>
   1aeb4:	add	r0, pc, #0
   1aeb8:	ldr	pc, [r0, r3, lsl #2]
   1aebc:	ldrdeq	sl, [r1], -r0
   1aec0:	andeq	sl, r1, r0, ror #29
   1aec4:	strdeq	sl, [r1], -r4
   1aec8:	andeq	sl, r1, r8, lsl #30
   1aecc:	andeq	sl, r1, ip, lsl pc
   1aed0:	mov	r0, r5
   1aed4:	mov	r2, r4
   1aed8:	pop	{r4, r5, r6, sl, fp, lr}
   1aedc:	b	1d120 <main@@Base+0x7398>
   1aee0:	mov	r0, r5
   1aee4:	mov	r2, r4
   1aee8:	mov	r3, r6
   1aeec:	bl	16680 <main@@Base+0x8f8>
   1aef0:	b	1af2c <main@@Base+0x51a4>
   1aef4:	mov	r0, r5
   1aef8:	mov	r2, r4
   1aefc:	mov	r3, r6
   1af00:	bl	1d14c <main@@Base+0x73c4>
   1af04:	b	1af2c <main@@Base+0x51a4>
   1af08:	mov	r0, r5
   1af0c:	mov	r2, r4
   1af10:	mov	r3, r6
   1af14:	bl	1d598 <main@@Base+0x7810>
   1af18:	b	1af2c <main@@Base+0x51a4>
   1af1c:	mov	r0, r5
   1af20:	mov	r2, r4
   1af24:	mov	r3, r6
   1af28:	bl	1d680 <main@@Base+0x78f8>
   1af2c:	mov	r1, r0
   1af30:	ldr	r0, [r5, #20]
   1af34:	cmp	r0, #0
   1af38:	bne	1af48 <main@@Base+0x51c0>
   1af3c:	ldr	r0, [r6]
   1af40:	cmp	r0, #0
   1af44:	beq	1af70 <main@@Base+0x51e8>
   1af48:	mov	r0, r1
   1af4c:	pop	{r4, r5, r6, sl, fp, pc}
   1af50:	ldrb	r0, [r5, #8]
   1af54:	tst	r0, #1
   1af58:	bne	1af84 <main@@Base+0x51fc>
   1af5c:	mov	r0, r5
   1af60:	mov	r2, r4
   1af64:	mov	r3, #15
   1af68:	pop	{r4, r5, r6, sl, fp, lr}
   1af6c:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1af70:	mov	r0, r5
   1af74:	mov	r2, r4
   1af78:	mov	r3, #33	; 0x21
   1af7c:	pop	{r4, r5, r6, sl, fp, lr}
   1af80:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1af84:	mov	r0, r5
   1af88:	mov	r2, r4
   1af8c:	pop	{r4, r5, r6, sl, fp, lr}
   1af90:	b	26738 <flatcc_json_parser_generic_json@@Base>
   1af94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af98:	add	fp, sp, #28
   1af9c:	sub	sp, sp, #4
   1afa0:	mov	r8, r3
   1afa4:	mov	r6, r2
   1afa8:	mov	r5, r1
   1afac:	mov	r9, r0
   1afb0:	mov	r0, r1
   1afb4:	mov	r1, r2
   1afb8:	bl	196a8 <main@@Base+0x3920>
   1afbc:	mov	r7, r0
   1afc0:	mov	r4, r1
   1afc4:	movw	r1, #28275	; 0x6e73
   1afc8:	movt	r1, #19823	; 0x4d6f
   1afcc:	movw	r0, #29184	; 0x7200
   1afd0:	movt	r0, #29797	; 0x7465
   1afd4:	ldr	r3, [fp, #12]
   1afd8:	ldr	sl, [fp, #8]
   1afdc:	subs	r2, r7, r0
   1afe0:	sbcs	r2, r4, r1
   1afe4:	bcs	1b028 <main@@Base+0x52a0>
   1afe8:	bic	r0, r4, #255	; 0xff
   1afec:	movw	r1, #29696	; 0x7400
   1aff0:	movt	r1, #16748	; 0x416c
   1aff4:	teq	r0, r1
   1aff8:	bne	1b074 <main@@Base+0x52ec>
   1affc:	str	r3, [sp]
   1b000:	mov	r0, r9
   1b004:	mov	r1, r5
   1b008:	mov	r2, r6
   1b00c:	mov	r3, #3
   1b010:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1b014:	cmp	r0, r5
   1b018:	beq	1b074 <main@@Base+0x52ec>
   1b01c:	mov	r1, #0
   1b020:	mov	r2, #4
   1b024:	b	1b064 <main@@Base+0x52dc>
   1b028:	eor	r1, r4, r1
   1b02c:	add	r2, r0, #50	; 0x32
   1b030:	eor	r2, r7, r2
   1b034:	orrs	r2, r2, r1
   1b038:	bne	1b080 <main@@Base+0x52f8>
   1b03c:	str	r3, [sp]
   1b040:	mov	r0, r9
   1b044:	mov	r1, r5
   1b048:	mov	r2, r6
   1b04c:	mov	r3, #8
   1b050:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1b054:	cmp	r0, r5
   1b058:	beq	1b074 <main@@Base+0x52ec>
   1b05c:	mov	r1, #0
   1b060:	mov	r2, #3
   1b064:	str	r2, [sl]
   1b068:	str	r1, [sl, #4]
   1b06c:	str	r1, [r8]
   1b070:	mov	r5, r0
   1b074:	mov	r0, r5
   1b078:	sub	sp, fp, #28
   1b07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b080:	bic	r2, r7, #255	; 0xff
   1b084:	eor	r0, r2, r0
   1b088:	orrs	r0, r0, r1
   1b08c:	mov	sl, r5
   1b090:	bne	1b0d8 <main@@Base+0x5350>
   1b094:	str	r3, [sp]
   1b098:	mov	r0, r9
   1b09c:	mov	r1, r5
   1b0a0:	mov	r2, r6
   1b0a4:	mov	r3, #7
   1b0a8:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1b0ac:	mov	sl, r0
   1b0b0:	cmp	r0, r5
   1b0b4:	beq	1b0d4 <main@@Base+0x534c>
   1b0b8:	mov	r1, #0
   1b0bc:	mov	r0, #1
   1b0c0:	ldr	r2, [fp, #8]
   1b0c4:	strd	r0, [r2]
   1b0c8:	str	r1, [r8]
   1b0cc:	mov	r5, sl
   1b0d0:	b	1b074 <main@@Base+0x52ec>
   1b0d4:	ldr	r3, [fp, #12]
   1b0d8:	movw	r0, #20037	; 0x4e45
   1b0dc:	movt	r0, #20047	; 0x4e4f
   1b0e0:	teq	r4, r0
   1b0e4:	bne	1b124 <main@@Base+0x539c>
   1b0e8:	str	r3, [sp]
   1b0ec:	mov	r0, r9
   1b0f0:	mov	r1, sl
   1b0f4:	mov	r2, r6
   1b0f8:	mov	r3, #4
   1b0fc:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1b100:	cmp	r0, sl
   1b104:	beq	1b11c <main@@Base+0x5394>
   1b108:	mov	r1, #0
   1b10c:	ldr	r2, [fp, #8]
   1b110:	str	r1, [r2]
   1b114:	str	r1, [r2, #4]
   1b118:	b	1b06c <main@@Base+0x52e4>
   1b11c:	mov	sl, r0
   1b120:	ldr	r3, [fp, #12]
   1b124:	movw	r0, #28016	; 0x6d70
   1b128:	movt	r0, #21353	; 0x5369
   1b12c:	eor	r0, r7, r0
   1b130:	movw	r1, #29556	; 0x7374
   1b134:	movt	r1, #21605	; 0x5465
   1b138:	eor	r1, r4, r1
   1b13c:	orrs	r0, r0, r1
   1b140:	bne	1b074 <main@@Base+0x52ec>
   1b144:	mov	r7, r3
   1b148:	add	r0, sl, #8
   1b14c:	mov	r1, r6
   1b150:	bl	196a8 <main@@Base+0x3920>
   1b154:	movw	r2, #21601	; 0x5461
   1b158:	movt	r2, #27749	; 0x6c65
   1b15c:	eor	r1, r1, r2
   1b160:	movw	r2, #25943	; 0x6557
   1b164:	movt	r2, #25196	; 0x626c
   1b168:	eor	r0, r0, r2
   1b16c:	orrs	r0, r0, r1
   1b170:	bne	1b074 <main@@Base+0x52ec>
   1b174:	add	r4, sl, #16
   1b178:	mov	r0, r4
   1b17c:	mov	r1, r6
   1b180:	bl	196a8 <main@@Base+0x3920>
   1b184:	lsr	r0, r0, #8
   1b188:	orr	r0, r0, r1, lsl #24
   1b18c:	movw	r2, #30061	; 0x756d
   1b190:	movt	r2, #17774	; 0x456e
   1b194:	eor	r0, r0, r2
   1b198:	movw	r2, #29800	; 0x7468
   1b19c:	movt	r2, #105	; 0x69
   1b1a0:	eor	r1, r2, r1, lsr #8
   1b1a4:	orrs	r0, r0, r1
   1b1a8:	bne	1b074 <main@@Base+0x52ec>
   1b1ac:	str	r7, [sp]
   1b1b0:	mov	r0, r9
   1b1b4:	mov	r1, r4
   1b1b8:	mov	r2, r6
   1b1bc:	mov	r3, #7
   1b1c0:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1b1c4:	cmp	r0, r4
   1b1c8:	ldr	r3, [fp, #8]
   1b1cc:	beq	1b074 <main@@Base+0x52ec>
   1b1d0:	mov	r1, #0
   1b1d4:	mov	r2, #2
   1b1d8:	str	r2, [r3]
   1b1dc:	str	r1, [r3, #4]
   1b1e0:	b	1b06c <main@@Base+0x52e4>
   1b1e4:	push	{r4, r5, r6, r7, fp, lr}
   1b1e8:	add	fp, sp, #16
   1b1ec:	sub	sp, sp, #8
   1b1f0:	mov	r4, r3
   1b1f4:	mov	r6, r2
   1b1f8:	mov	r5, r1
   1b1fc:	mov	r7, r0
   1b200:	sub	r0, r2, r1
   1b204:	cmp	r0, #4
   1b208:	blt	1b244 <main@@Base+0x54bc>
   1b20c:	ldr	r1, [r5]
   1b210:	movw	r2, #29300	; 0x7274
   1b214:	movt	r2, #25973	; 0x6575
   1b218:	cmp	r1, r2
   1b21c:	beq	1b270 <main@@Base+0x54e8>
   1b220:	cmp	r0, #5
   1b224:	blt	1b244 <main@@Base+0x54bc>
   1b228:	movw	r1, #16233	; 0x3f69
   1b22c:	movt	r1, #3
   1b230:	mov	r0, r5
   1b234:	mov	r2, #5
   1b238:	bl	14e6c <memcmp@plt>
   1b23c:	cmp	r0, #0
   1b240:	beq	1b284 <main@@Base+0x54fc>
   1b244:	add	r3, sp, #7
   1b248:	mov	r0, r7
   1b24c:	mov	r1, r5
   1b250:	mov	r2, r6
   1b254:	bl	1a2bc <main@@Base+0x4534>
   1b258:	ldrb	r1, [sp, #7]
   1b25c:	cmp	r1, #0
   1b260:	movwne	r1, #1
   1b264:	strb	r1, [r4]
   1b268:	sub	sp, fp, #16
   1b26c:	pop	{r4, r5, r6, r7, fp, pc}
   1b270:	mov	r0, #1
   1b274:	strb	r0, [r4]
   1b278:	add	r0, r5, #4
   1b27c:	sub	sp, fp, #16
   1b280:	pop	{r4, r5, r6, r7, fp, pc}
   1b284:	mov	r0, #0
   1b288:	strb	r0, [r4]
   1b28c:	add	r0, r5, #5
   1b290:	sub	sp, fp, #16
   1b294:	pop	{r4, r5, r6, r7, fp, pc}
   1b298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b29c:	add	fp, sp, #28
   1b2a0:	sub	sp, sp, #36	; 0x24
   1b2a4:	mov	r8, r3
   1b2a8:	mov	r6, r2
   1b2ac:	mov	r5, r0
   1b2b0:	mov	r0, #0
   1b2b4:	strb	r0, [fp, #-29]	; 0xffffffe3
   1b2b8:	ldr	sl, [fp, #8]
   1b2bc:	strb	r0, [sl]
   1b2c0:	mov	r0, r5
   1b2c4:	bl	1d044 <main@@Base+0x72bc>
   1b2c8:	mov	r4, r0
   1b2cc:	cmp	r0, r6
   1b2d0:	beq	1b398 <main@@Base+0x5610>
   1b2d4:	mov	r9, r8
   1b2d8:	ldr	r7, [r9]
   1b2dc:	add	r0, sp, #24
   1b2e0:	str	r0, [sp]
   1b2e4:	add	r0, sp, #16
   1b2e8:	str	r0, [sp, #4]
   1b2ec:	mov	r0, r5
   1b2f0:	mov	r1, r4
   1b2f4:	mov	r2, r6
   1b2f8:	add	r3, sp, #20
   1b2fc:	blx	r7
   1b300:	mov	r7, r0
   1b304:	cmp	r0, r6
   1b308:	beq	1b3a4 <main@@Base+0x561c>
   1b30c:	cmp	r7, r4
   1b310:	beq	1b36c <main@@Base+0x55e4>
   1b314:	ldr	r3, [sp, #20]
   1b318:	ldr	r0, [sp, #24]
   1b31c:	ldr	r1, [sp, #28]
   1b320:	stm	sp, {r0, r1}
   1b324:	sub	r0, fp, #29
   1b328:	str	r0, [sp, #8]
   1b32c:	mov	r0, r5
   1b330:	mov	r1, r7
   1b334:	mov	r2, r6
   1b338:	bl	1fd10 <main@@Base+0x9f88>
   1b33c:	cmp	r0, r6
   1b340:	beq	1b3a0 <main@@Base+0x5618>
   1b344:	ldrb	r0, [sl]
   1b348:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1b34c:	add	r0, r0, r1
   1b350:	strb	r0, [sl]
   1b354:	ldr	r0, [sp, #16]
   1b358:	cmp	r0, #0
   1b35c:	mov	r4, r7
   1b360:	mov	r9, r8
   1b364:	bne	1b2d8 <main@@Base+0x5550>
   1b368:	b	1b3a4 <main@@Base+0x561c>
   1b36c:	ldr	r0, [r9, #4]!
   1b370:	cmp	r0, #0
   1b374:	mov	r4, r7
   1b378:	bne	1b2d8 <main@@Base+0x5550>
   1b37c:	mov	r0, r5
   1b380:	mov	r1, r7
   1b384:	mov	r2, r6
   1b388:	mov	r3, #23
   1b38c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1b390:	mov	r7, r0
   1b394:	b	1b3a4 <main@@Base+0x561c>
   1b398:	mov	r7, r4
   1b39c:	b	1b3a4 <main@@Base+0x561c>
   1b3a0:	mov	r7, r6
   1b3a4:	mov	r0, r7
   1b3a8:	sub	sp, fp, #28
   1b3ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3b0:	push	{r4, r5, fp, lr}
   1b3b4:	add	fp, sp, #8
   1b3b8:	mov	r4, r1
   1b3bc:	mov	r5, r0
   1b3c0:	mov	r0, r1
   1b3c4:	bl	1fd3c <main@@Base+0x9fb4>
   1b3c8:	strb	r4, [r5]
   1b3cc:	pop	{r4, r5, fp, pc}
   1b3d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3d4:	add	fp, sp, #28
   1b3d8:	sub	sp, sp, #20
   1b3dc:	mov	r7, r3
   1b3e0:	mov	r4, r2
   1b3e4:	mov	r5, r0
   1b3e8:	add	r3, sp, #16
   1b3ec:	bl	195f0 <main@@Base+0x3868>
   1b3f0:	mov	r1, r0
   1b3f4:	ldr	r0, [sp, #16]
   1b3f8:	cmp	r0, #0
   1b3fc:	beq	1b5f0 <main@@Base+0x5868>
   1b400:	add	r0, r7, #4
   1b404:	str	r0, [sp, #4]
   1b408:	add	r8, sp, #12
   1b40c:	mov	r0, r5
   1b410:	mov	r2, r4
   1b414:	bl	19680 <main@@Base+0x38f8>
   1b418:	mov	r6, r0
   1b41c:	mov	r1, r4
   1b420:	bl	196a8 <main@@Base+0x3920>
   1b424:	mov	r2, r1
   1b428:	bfc	r2, #0, #16
   1b42c:	movw	r3, #0
   1b430:	movt	r3, #26980	; 0x6964
   1b434:	teq	r2, r3
   1b438:	bne	1b4c0 <main@@Base+0x5738>
   1b43c:	mov	r0, r5
   1b440:	mov	r1, r6
   1b444:	mov	r2, r4
   1b448:	mov	r3, #2
   1b44c:	bl	196ac <main@@Base+0x3924>
   1b450:	mov	sl, r0
   1b454:	cmp	r6, r0
   1b458:	beq	1b544 <main@@Base+0x57bc>
   1b45c:	mov	r0, #0
   1b460:	str	r0, [sp, #12]
   1b464:	mov	r0, r5
   1b468:	mov	r1, sl
   1b46c:	mov	r2, r4
   1b470:	mov	r3, r8
   1b474:	bl	1c0a4 <main@@Base+0x631c>
   1b478:	mov	r9, r0
   1b47c:	cmp	sl, r0
   1b480:	bne	1b4b4 <main@@Base+0x572c>
   1b484:	str	r8, [sp]
   1b488:	mov	r0, r5
   1b48c:	mov	r1, r9
   1b490:	mov	r2, r4
   1b494:	movw	r3, #33556	; 0x8314
   1b498:	movt	r3, #4
   1b49c:	bl	1c134 <main@@Base+0x63ac>
   1b4a0:	mov	r1, r0
   1b4a4:	cmp	r0, r9
   1b4a8:	cmpne	r1, r4
   1b4ac:	beq	1b5dc <main@@Base+0x5854>
   1b4b0:	mov	r9, r1
   1b4b4:	ldr	r1, [sp, #12]
   1b4b8:	mov	r0, r7
   1b4bc:	b	1b5b0 <main@@Base+0x5828>
   1b4c0:	movw	r2, #25445	; 0x6365
   1b4c4:	movt	r2, #24942	; 0x616e
   1b4c8:	eor	r0, r0, r2
   1b4cc:	movw	r2, #29556	; 0x7374
   1b4d0:	movt	r2, #25705	; 0x6469
   1b4d4:	eor	r1, r1, r2
   1b4d8:	orrs	r0, r0, r1
   1b4dc:	bne	1b538 <main@@Base+0x57b0>
   1b4e0:	mov	sl, r7
   1b4e4:	mov	r0, r5
   1b4e8:	mov	r1, r6
   1b4ec:	mov	r2, r4
   1b4f0:	mov	r3, #8
   1b4f4:	bl	196ac <main@@Base+0x3924>
   1b4f8:	mov	r7, r0
   1b4fc:	cmp	r6, r0
   1b500:	beq	1b55c <main@@Base+0x57d4>
   1b504:	mov	r0, #0
   1b508:	str	r0, [sp, #8]
   1b50c:	mov	r0, r5
   1b510:	mov	r1, r7
   1b514:	mov	r2, r4
   1b518:	add	r6, sp, #8
   1b51c:	mov	r3, r6
   1b520:	bl	1c0a4 <main@@Base+0x631c>
   1b524:	mov	r9, r0
   1b528:	cmp	r7, r0
   1b52c:	beq	1b578 <main@@Base+0x57f0>
   1b530:	mov	r7, sl
   1b534:	b	1b5ac <main@@Base+0x5824>
   1b538:	mov	r0, r5
   1b53c:	mov	r1, r6
   1b540:	b	1b54c <main@@Base+0x57c4>
   1b544:	mov	r0, r5
   1b548:	mov	r1, sl
   1b54c:	mov	r2, r4
   1b550:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1b554:	mov	r9, r0
   1b558:	b	1b5b4 <main@@Base+0x582c>
   1b55c:	mov	r0, r5
   1b560:	mov	r1, r7
   1b564:	mov	r2, r4
   1b568:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1b56c:	mov	r9, r0
   1b570:	mov	r7, sl
   1b574:	b	1b5b4 <main@@Base+0x582c>
   1b578:	str	r6, [sp]
   1b57c:	mov	r0, r5
   1b580:	mov	r1, r9
   1b584:	mov	r2, r4
   1b588:	movw	r3, #33568	; 0x8320
   1b58c:	movt	r3, #4
   1b590:	bl	1c134 <main@@Base+0x63ac>
   1b594:	mov	r1, r0
   1b598:	cmp	r0, r9
   1b59c:	cmpne	r1, r4
   1b5a0:	beq	1b5dc <main@@Base+0x5854>
   1b5a4:	mov	r7, sl
   1b5a8:	mov	r9, r1
   1b5ac:	ldmib	sp, {r0, r1}
   1b5b0:	bl	1c24c <main@@Base+0x64c4>
   1b5b4:	mov	r0, r5
   1b5b8:	mov	r1, r9
   1b5bc:	mov	r2, r4
   1b5c0:	add	r3, sp, #16
   1b5c4:	bl	1c578 <main@@Base+0x67f0>
   1b5c8:	mov	r1, r0
   1b5cc:	ldr	r0, [sp, #16]
   1b5d0:	cmp	r0, #0
   1b5d4:	bne	1b40c <main@@Base+0x5684>
   1b5d8:	b	1b5f0 <main@@Base+0x5868>
   1b5dc:	mov	r0, r5
   1b5e0:	mov	r2, r4
   1b5e4:	mov	r3, #33	; 0x21
   1b5e8:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1b5ec:	mov	r1, r0
   1b5f0:	mov	r0, r1
   1b5f4:	sub	sp, fp, #28
   1b5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b600:	add	fp, sp, #28
   1b604:	sub	sp, sp, #20
   1b608:	mov	r7, r3
   1b60c:	mov	r4, r2
   1b610:	mov	r6, r1
   1b614:	mov	r5, r0
   1b618:	mov	r0, #0
   1b61c:	str	r0, [r3]
   1b620:	ldr	r0, [r5]
   1b624:	mov	r1, #3
   1b628:	bl	226c8 <flatcc_builder_start_table@@Base>
   1b62c:	cmp	r0, #0
   1b630:	bne	1b838 <main@@Base+0x5ab0>
   1b634:	add	r3, sp, #16
   1b638:	mov	r0, r5
   1b63c:	mov	r1, r6
   1b640:	mov	r2, r4
   1b644:	bl	195f0 <main@@Base+0x3868>
   1b648:	mov	r6, r0
   1b64c:	ldr	r0, [sp, #16]
   1b650:	cmp	r0, #0
   1b654:	str	r7, [sp, #8]
   1b658:	beq	1b82c <main@@Base+0x5aa4>
   1b65c:	movw	r7, #29556	; 0x7374
   1b660:	movt	r7, #28261	; 0x6e65
   1b664:	movw	r8, #0
   1b668:	movt	r8, #25956	; 0x6564
   1b66c:	movw	r9, #29793	; 0x7461
   1b670:	movt	r9, #25697	; 0x6461
   1b674:	add	sl, sp, #16
   1b678:	mov	r0, r5
   1b67c:	mov	r1, r6
   1b680:	mov	r2, r4
   1b684:	bl	19680 <main@@Base+0x38f8>
   1b688:	mov	r6, r0
   1b68c:	mov	r1, r4
   1b690:	bl	196a8 <main@@Base+0x3920>
   1b694:	subs	r2, r0, r8
   1b698:	sbcs	r2, r1, r7
   1b69c:	bcs	1b6fc <main@@Base+0x5974>
   1b6a0:	teq	r1, r9
   1b6a4:	bne	1b7ec <main@@Base+0x5a64>
   1b6a8:	mov	r0, r5
   1b6ac:	mov	r1, r6
   1b6b0:	mov	r2, r4
   1b6b4:	mov	r3, #4
   1b6b8:	bl	196ac <main@@Base+0x3924>
   1b6bc:	mov	r1, r0
   1b6c0:	cmp	r6, r0
   1b6c4:	beq	1b7f8 <main@@Base+0x5a70>
   1b6c8:	mov	r0, #0
   1b6cc:	str	r0, [sp]
   1b6d0:	mov	r0, r5
   1b6d4:	mov	r2, r4
   1b6d8:	add	r3, sp, #12
   1b6dc:	bl	273f4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b6e0:	mov	r6, r0
   1b6e4:	ldr	r0, [sp, #12]
   1b6e8:	cmp	r0, #0
   1b6ec:	beq	1b838 <main@@Base+0x5ab0>
   1b6f0:	ldr	r0, [r5]
   1b6f4:	mov	r1, #0
   1b6f8:	b	1b7d4 <main@@Base+0x5a4c>
   1b6fc:	movw	r2, #29292	; 0x726c
   1b700:	movt	r2, #117	; 0x75
   1b704:	eor	r2, r2, r1, lsr #8
   1b708:	lsr	r3, r0, #8
   1b70c:	orr	r3, r3, r1, lsl #24
   1b710:	eor	r3, r3, r9
   1b714:	orrs	r2, r3, r2
   1b718:	bne	1b770 <main@@Base+0x59e8>
   1b71c:	mov	r0, r5
   1b720:	mov	r1, r6
   1b724:	mov	r2, r4
   1b728:	mov	r3, #7
   1b72c:	bl	196ac <main@@Base+0x3924>
   1b730:	mov	r1, r0
   1b734:	cmp	r6, r0
   1b738:	beq	1b7f8 <main@@Base+0x5a70>
   1b73c:	mov	r0, #1
   1b740:	str	r0, [sp]
   1b744:	mov	r0, r5
   1b748:	mov	r2, r4
   1b74c:	add	r3, sp, #12
   1b750:	bl	273f4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b754:	mov	r6, r0
   1b758:	ldr	r0, [sp, #12]
   1b75c:	cmp	r0, #0
   1b760:	beq	1b838 <main@@Base+0x5ab0>
   1b764:	ldr	r0, [r5]
   1b768:	mov	r1, #1
   1b76c:	b	1b7d4 <main@@Base+0x5a4c>
   1b770:	eor	r1, r1, r7
   1b774:	bfc	r0, #0, #16
   1b778:	eor	r0, r0, r8
   1b77c:	orrs	r0, r0, r1
   1b780:	bne	1b7ec <main@@Base+0x5a64>
   1b784:	mov	r0, r5
   1b788:	mov	r1, r6
   1b78c:	mov	r2, r4
   1b790:	mov	r3, #6
   1b794:	bl	196ac <main@@Base+0x3924>
   1b798:	mov	r1, r0
   1b79c:	cmp	r6, r0
   1b7a0:	beq	1b7f8 <main@@Base+0x5a70>
   1b7a4:	mov	r0, #0
   1b7a8:	str	r0, [sp]
   1b7ac:	mov	r0, r5
   1b7b0:	mov	r2, r4
   1b7b4:	add	r3, sp, #12
   1b7b8:	bl	273f4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b7bc:	mov	r6, r0
   1b7c0:	ldr	r0, [sp, #12]
   1b7c4:	cmp	r0, #0
   1b7c8:	beq	1b838 <main@@Base+0x5ab0>
   1b7cc:	ldr	r0, [r5]
   1b7d0:	mov	r1, #2
   1b7d4:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   1b7d8:	cmp	r0, #0
   1b7dc:	beq	1b838 <main@@Base+0x5ab0>
   1b7e0:	ldr	r1, [sp, #12]
   1b7e4:	str	r1, [r0]
   1b7e8:	b	1b808 <main@@Base+0x5a80>
   1b7ec:	mov	r0, r5
   1b7f0:	mov	r1, r6
   1b7f4:	b	1b7fc <main@@Base+0x5a74>
   1b7f8:	mov	r0, r5
   1b7fc:	mov	r2, r4
   1b800:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1b804:	mov	r6, r0
   1b808:	mov	r0, r5
   1b80c:	mov	r1, r6
   1b810:	mov	r2, r4
   1b814:	mov	r3, sl
   1b818:	bl	1c578 <main@@Base+0x67f0>
   1b81c:	mov	r6, r0
   1b820:	ldr	r0, [sp, #16]
   1b824:	cmp	r0, #0
   1b828:	bne	1b678 <main@@Base+0x58f0>
   1b82c:	ldr	r0, [r5, #20]
   1b830:	cmp	r0, #0
   1b834:	beq	1b85c <main@@Base+0x5ad4>
   1b838:	mov	r0, r5
   1b83c:	mov	r1, r6
   1b840:	mov	r2, r4
   1b844:	mov	r3, #33	; 0x21
   1b848:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1b84c:	mov	r6, r0
   1b850:	mov	r0, r6
   1b854:	sub	sp, fp, #28
   1b858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b85c:	ldr	r0, [r5]
   1b860:	bl	22de8 <flatcc_builder_end_table@@Base>
   1b864:	ldr	r1, [sp, #8]
   1b868:	str	r0, [r1]
   1b86c:	cmp	r0, #0
   1b870:	bne	1b850 <main@@Base+0x5ac8>
   1b874:	b	1b838 <main@@Base+0x5ab0>
   1b878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b87c:	add	fp, sp, #28
   1b880:	sub	sp, sp, #28
   1b884:	mov	r6, r3
   1b888:	mov	r4, r2
   1b88c:	mov	sl, r1
   1b890:	mov	r5, r0
   1b894:	mov	r0, #0
   1b898:	str	r0, [r3]
   1b89c:	ldr	r0, [r5]
   1b8a0:	mov	r1, #3
   1b8a4:	bl	226c8 <flatcc_builder_start_table@@Base>
   1b8a8:	cmp	r0, #0
   1b8ac:	beq	1b8d4 <main@@Base+0x5b4c>
   1b8b0:	mov	r0, r5
   1b8b4:	mov	r1, sl
   1b8b8:	mov	r2, r4
   1b8bc:	mov	r3, #33	; 0x21
   1b8c0:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1b8c4:	mov	sl, r0
   1b8c8:	mov	r0, sl
   1b8cc:	sub	sp, fp, #28
   1b8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8d4:	str	r6, [sp, #4]
   1b8d8:	add	r3, sp, #24
   1b8dc:	mov	r0, r5
   1b8e0:	mov	r1, sl
   1b8e4:	mov	r2, r4
   1b8e8:	bl	195f0 <main@@Base+0x3868>
   1b8ec:	mov	sl, r0
   1b8f0:	ldr	r0, [sp, #24]
   1b8f4:	cmp	r0, #0
   1b8f8:	beq	1bbb0 <main@@Base+0x5e28>
   1b8fc:	movw	r9, #65535	; 0xffff
   1b900:	movt	r9, #26979	; 0x6963
   1b904:	add	r8, sp, #24
   1b908:	mov	r0, r5
   1b90c:	mov	r1, sl
   1b910:	mov	r2, r4
   1b914:	bl	19680 <main@@Base+0x38f8>
   1b918:	mov	r6, r0
   1b91c:	mov	r1, r4
   1b920:	bl	196a8 <main@@Base+0x3920>
   1b924:	cmp	r1, r9
   1b928:	bhi	1b99c <main@@Base+0x5c14>
   1b92c:	movw	r2, #30062	; 0x756e
   1b930:	movt	r2, #25455	; 0x636f
   1b934:	eor	r1, r1, r2
   1b938:	and	r0, r0, #-16777216	; 0xff000000
   1b93c:	eor	r0, r0, #1946157056	; 0x74000000
   1b940:	orrs	r0, r0, r1
   1b944:	bne	1ba7c <main@@Base+0x5cf4>
   1b948:	mov	r0, r5
   1b94c:	mov	r1, r6
   1b950:	mov	r2, r4
   1b954:	mov	r3, #5
   1b958:	bl	196ac <main@@Base+0x3924>
   1b95c:	mov	r7, r0
   1b960:	cmp	r6, r0
   1b964:	add	sl, sp, #8
   1b968:	beq	1ba88 <main@@Base+0x5d00>
   1b96c:	mov	r0, #0
   1b970:	strh	r0, [sp, #8]
   1b974:	mov	r0, r5
   1b978:	mov	r1, r7
   1b97c:	mov	r2, r4
   1b980:	mov	r3, sl
   1b984:	bl	1f948 <main@@Base+0x9bc0>
   1b988:	mov	r6, r0
   1b98c:	cmp	r7, r0
   1b990:	beq	1ba94 <main@@Base+0x5d0c>
   1b994:	mov	sl, r6
   1b998:	b	1bac0 <main@@Base+0x5d38>
   1b99c:	bic	r0, r1, #255	; 0xff
   1b9a0:	movw	r2, #27648	; 0x6c00
   1b9a4:	movt	r2, #30305	; 0x7661
   1b9a8:	teq	r0, r2
   1b9ac:	add	sl, sp, #8
   1b9b0:	bne	1ba08 <main@@Base+0x5c80>
   1b9b4:	mov	r0, r5
   1b9b8:	mov	r1, r6
   1b9bc:	mov	r2, r4
   1b9c0:	mov	r3, #3
   1b9c4:	bl	196ac <main@@Base+0x3924>
   1b9c8:	mov	r7, r0
   1b9cc:	cmp	r6, r0
   1b9d0:	beq	1ba88 <main@@Base+0x5d00>
   1b9d4:	mov	r0, #0
   1b9d8:	str	r0, [sp, #12]
   1b9dc:	str	r0, [sp, #8]
   1b9e0:	mov	r0, r5
   1b9e4:	mov	r1, r7
   1b9e8:	mov	r2, r4
   1b9ec:	mov	r3, sl
   1b9f0:	bl	1bec0 <main@@Base+0x6138>
   1b9f4:	mov	r6, r0
   1b9f8:	cmp	r7, r0
   1b9fc:	beq	1bb00 <main@@Base+0x5d78>
   1ba00:	mov	sl, r6
   1ba04:	b	1bb2c <main@@Base+0x5da4>
   1ba08:	bfc	r1, #0, #16
   1ba0c:	movw	r0, #0
   1ba10:	movt	r0, #26980	; 0x6964
   1ba14:	teq	r1, r0
   1ba18:	bne	1ba7c <main@@Base+0x5cf4>
   1ba1c:	mov	r0, r5
   1ba20:	mov	r1, r6
   1ba24:	mov	r2, r4
   1ba28:	mov	r3, #2
   1ba2c:	bl	196ac <main@@Base+0x3924>
   1ba30:	mov	r1, r0
   1ba34:	cmp	r6, r0
   1ba38:	beq	1bb7c <main@@Base+0x5df4>
   1ba3c:	mov	r0, r5
   1ba40:	mov	r2, r4
   1ba44:	add	r3, sp, #20
   1ba48:	bl	277b4 <flatcc_json_parser_build_string@@Base>
   1ba4c:	mov	sl, r0
   1ba50:	ldr	r0, [sp, #20]
   1ba54:	cmp	r0, #0
   1ba58:	beq	1b8b0 <main@@Base+0x5b28>
   1ba5c:	ldr	r0, [r5]
   1ba60:	mov	r1, #0
   1ba64:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   1ba68:	cmp	r0, #0
   1ba6c:	beq	1b8b0 <main@@Base+0x5b28>
   1ba70:	ldr	r1, [sp, #20]
   1ba74:	str	r1, [r0]
   1ba78:	b	1bb8c <main@@Base+0x5e04>
   1ba7c:	mov	r0, r5
   1ba80:	mov	r1, r6
   1ba84:	b	1bb80 <main@@Base+0x5df8>
   1ba88:	mov	r0, r5
   1ba8c:	mov	r1, r7
   1ba90:	b	1bb80 <main@@Base+0x5df8>
   1ba94:	str	sl, [sp]
   1ba98:	mov	r0, r5
   1ba9c:	mov	r1, r6
   1baa0:	mov	r2, r4
   1baa4:	movw	r3, #33580	; 0x832c
   1baa8:	movt	r3, #4
   1baac:	bl	1f9d8 <main@@Base+0x9c50>
   1bab0:	mov	sl, r0
   1bab4:	cmp	r0, r6
   1bab8:	cmpne	sl, r4
   1babc:	beq	1b8b0 <main@@Base+0x5b28>
   1bac0:	ldrh	r6, [sp, #8]
   1bac4:	cmp	r6, #0
   1bac8:	bne	1bad8 <main@@Base+0x5d50>
   1bacc:	ldrb	r0, [r5, #8]
   1bad0:	tst	r0, #2
   1bad4:	beq	1bb8c <main@@Base+0x5e04>
   1bad8:	ldr	r0, [r5]
   1badc:	mov	r1, #2
   1bae0:	mov	r2, #2
   1bae4:	mov	r3, #2
   1bae8:	bl	234dc <flatcc_builder_table_add@@Base>
   1baec:	cmp	r0, #0
   1baf0:	beq	1b8b0 <main@@Base+0x5b28>
   1baf4:	mov	r1, r6
   1baf8:	bl	1faf0 <main@@Base+0x9d68>
   1bafc:	b	1bb8c <main@@Base+0x5e04>
   1bb00:	str	sl, [sp]
   1bb04:	mov	r0, r5
   1bb08:	mov	r1, r6
   1bb0c:	mov	r2, r4
   1bb10:	movw	r3, #33592	; 0x8338
   1bb14:	movt	r3, #4
   1bb18:	bl	1bf54 <main@@Base+0x61cc>
   1bb1c:	mov	sl, r0
   1bb20:	cmp	r0, r6
   1bb24:	cmpne	sl, r4
   1bb28:	beq	1b8b0 <main@@Base+0x5b28>
   1bb2c:	mov	r7, r9
   1bb30:	ldr	r6, [sp, #8]
   1bb34:	ldr	r9, [sp, #12]
   1bb38:	orrs	r0, r6, r9
   1bb3c:	bne	1bb4c <main@@Base+0x5dc4>
   1bb40:	ldrb	r0, [r5, #8]
   1bb44:	tst	r0, #2
   1bb48:	beq	1bb74 <main@@Base+0x5dec>
   1bb4c:	ldr	r0, [r5]
   1bb50:	mov	r1, #1
   1bb54:	mov	r2, #8
   1bb58:	mov	r3, #8
   1bb5c:	bl	234dc <flatcc_builder_table_add@@Base>
   1bb60:	cmp	r0, #0
   1bb64:	beq	1b8b0 <main@@Base+0x5b28>
   1bb68:	mov	r2, r6
   1bb6c:	mov	r3, r9
   1bb70:	bl	1c07c <main@@Base+0x62f4>
   1bb74:	mov	r9, r7
   1bb78:	b	1bb8c <main@@Base+0x5e04>
   1bb7c:	mov	r0, r5
   1bb80:	mov	r2, r4
   1bb84:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1bb88:	mov	sl, r0
   1bb8c:	mov	r0, r5
   1bb90:	mov	r1, sl
   1bb94:	mov	r2, r4
   1bb98:	mov	r3, r8
   1bb9c:	bl	1c578 <main@@Base+0x67f0>
   1bba0:	mov	sl, r0
   1bba4:	ldr	r0, [sp, #24]
   1bba8:	cmp	r0, #0
   1bbac:	bne	1b908 <main@@Base+0x5b80>
   1bbb0:	ldr	r0, [r5, #20]
   1bbb4:	cmp	r0, #0
   1bbb8:	bne	1b8b0 <main@@Base+0x5b28>
   1bbbc:	ldr	r0, [r5]
   1bbc0:	bl	22de8 <flatcc_builder_end_table@@Base>
   1bbc4:	ldr	r1, [sp, #4]
   1bbc8:	str	r0, [r1]
   1bbcc:	cmp	r0, #0
   1bbd0:	bne	1b8c8 <main@@Base+0x5b40>
   1bbd4:	b	1b8b0 <main@@Base+0x5b28>
   1bbd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbdc:	add	fp, sp, #28
   1bbe0:	sub	sp, sp, #28
   1bbe4:	mov	r8, r3
   1bbe8:	mov	r7, r2
   1bbec:	mov	r5, r0
   1bbf0:	mov	r0, #0
   1bbf4:	str	r0, [sp, #24]
   1bbf8:	ldr	sl, [fp, #8]
   1bbfc:	str	r0, [sl]
   1bc00:	mov	r0, r5
   1bc04:	bl	1d044 <main@@Base+0x72bc>
   1bc08:	mov	r6, r0
   1bc0c:	cmp	r0, r7
   1bc10:	beq	1bcc8 <main@@Base+0x5f40>
   1bc14:	mov	r9, r8
   1bc18:	ldr	r4, [r9]
   1bc1c:	add	r0, sp, #16
   1bc20:	str	r0, [sp]
   1bc24:	add	r0, sp, #8
   1bc28:	str	r0, [sp, #4]
   1bc2c:	mov	r0, r5
   1bc30:	mov	r1, r6
   1bc34:	mov	r2, r7
   1bc38:	add	r3, sp, #12
   1bc3c:	blx	r4
   1bc40:	mov	r4, r0
   1bc44:	cmp	r0, r7
   1bc48:	beq	1bcd4 <main@@Base+0x5f4c>
   1bc4c:	cmp	r4, r6
   1bc50:	beq	1bc9c <main@@Base+0x5f14>
   1bc54:	add	r3, sp, #12
   1bc58:	ldm	r3, {r1, r2, r3}
   1bc5c:	add	r0, sp, #24
   1bc60:	str	r0, [sp]
   1bc64:	mov	r0, r4
   1bc68:	bl	1fd40 <main@@Base+0x9fb8>
   1bc6c:	cmp	r4, r7
   1bc70:	beq	1bcd0 <main@@Base+0x5f48>
   1bc74:	vldr	s0, [sp, #24]
   1bc78:	vldr	s2, [sl]
   1bc7c:	vadd.f32	s0, s0, s2
   1bc80:	vstr	s0, [sl]
   1bc84:	ldr	r0, [sp, #8]
   1bc88:	cmp	r0, #0
   1bc8c:	mov	r6, r4
   1bc90:	mov	r9, r8
   1bc94:	bne	1bc18 <main@@Base+0x5e90>
   1bc98:	b	1bcd4 <main@@Base+0x5f4c>
   1bc9c:	ldr	r0, [r9, #4]!
   1bca0:	cmp	r0, #0
   1bca4:	mov	r6, r4
   1bca8:	bne	1bc18 <main@@Base+0x5e90>
   1bcac:	mov	r0, r5
   1bcb0:	mov	r1, r4
   1bcb4:	mov	r2, r7
   1bcb8:	mov	r3, #23
   1bcbc:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1bcc0:	mov	r4, r0
   1bcc4:	b	1bcd4 <main@@Base+0x5f4c>
   1bcc8:	mov	r4, r6
   1bccc:	b	1bcd4 <main@@Base+0x5f4c>
   1bcd0:	mov	r4, r7
   1bcd4:	mov	r0, r4
   1bcd8:	sub	sp, fp, #28
   1bcdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bce0:	push	{r4, sl, fp, lr}
   1bce4:	add	fp, sp, #8
   1bce8:	mov	r4, r0
   1bcec:	bl	1fd7c <main@@Base+0x9ff4>
   1bcf0:	vstr	s0, [r4]
   1bcf4:	pop	{r4, sl, fp, pc}
   1bcf8:	push	{r4, r5, r6, r7, fp, lr}
   1bcfc:	add	fp, sp, #16
   1bd00:	sub	sp, sp, #24
   1bd04:	mov	r7, r1
   1bd08:	mov	r6, r0
   1bd0c:	mov	r0, #0
   1bd10:	str	r0, [sp, #20]
   1bd14:	str	r0, [sp, #16]
   1bd18:	str	r0, [sp, #12]
   1bd1c:	str	r0, [r3]
   1bd20:	cmp	r1, r2
   1bd24:	beq	1bd7c <main@@Base+0x5ff4>
   1bd28:	mov	r5, r3
   1bd2c:	mov	r4, r2
   1bd30:	add	r0, sp, #16
   1bd34:	str	r0, [sp]
   1bd38:	add	r3, sp, #12
   1bd3c:	mov	r0, r6
   1bd40:	mov	r1, r7
   1bd44:	bl	272d4 <flatcc_json_parser_integer@@Base>
   1bd48:	mov	r1, r0
   1bd4c:	cmp	r0, r7
   1bd50:	beq	1bd78 <main@@Base+0x5ff0>
   1bd54:	ldr	r3, [sp, #12]
   1bd58:	ldr	r0, [sp, #16]
   1bd5c:	ldr	r2, [sp, #20]
   1bd60:	stm	sp, {r0, r2, r5}
   1bd64:	mov	r0, r6
   1bd68:	mov	r2, r4
   1bd6c:	bl	1fd80 <main@@Base+0x9ff8>
   1bd70:	mov	r7, r0
   1bd74:	b	1bd7c <main@@Base+0x5ff4>
   1bd78:	mov	r7, r1
   1bd7c:	mov	r0, r7
   1bd80:	sub	sp, fp, #16
   1bd84:	pop	{r4, r5, r6, r7, fp, pc}
   1bd88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd8c:	add	fp, sp, #28
   1bd90:	sub	sp, sp, #36	; 0x24
   1bd94:	mov	r8, r3
   1bd98:	mov	r6, r2
   1bd9c:	mov	r5, r0
   1bda0:	mov	r0, #0
   1bda4:	str	r0, [sp, #32]
   1bda8:	ldr	sl, [fp, #8]
   1bdac:	str	r0, [sl]
   1bdb0:	mov	r0, r5
   1bdb4:	bl	1d044 <main@@Base+0x72bc>
   1bdb8:	mov	r4, r0
   1bdbc:	cmp	r0, r6
   1bdc0:	beq	1be88 <main@@Base+0x6100>
   1bdc4:	mov	r9, r8
   1bdc8:	ldr	r7, [r9]
   1bdcc:	add	r0, sp, #24
   1bdd0:	str	r0, [sp]
   1bdd4:	add	r0, sp, #16
   1bdd8:	str	r0, [sp, #4]
   1bddc:	mov	r0, r5
   1bde0:	mov	r1, r4
   1bde4:	mov	r2, r6
   1bde8:	add	r3, sp, #20
   1bdec:	blx	r7
   1bdf0:	mov	r7, r0
   1bdf4:	cmp	r0, r6
   1bdf8:	beq	1be94 <main@@Base+0x610c>
   1bdfc:	cmp	r7, r4
   1be00:	beq	1be5c <main@@Base+0x60d4>
   1be04:	ldr	r3, [sp, #20]
   1be08:	ldr	r0, [sp, #24]
   1be0c:	ldr	r1, [sp, #28]
   1be10:	stm	sp, {r0, r1}
   1be14:	add	r0, sp, #32
   1be18:	str	r0, [sp, #8]
   1be1c:	mov	r0, r5
   1be20:	mov	r1, r7
   1be24:	mov	r2, r6
   1be28:	bl	1fd80 <main@@Base+0x9ff8>
   1be2c:	cmp	r0, r6
   1be30:	beq	1be90 <main@@Base+0x6108>
   1be34:	ldr	r0, [sl]
   1be38:	ldr	r1, [sp, #32]
   1be3c:	add	r0, r0, r1
   1be40:	str	r0, [sl]
   1be44:	ldr	r0, [sp, #16]
   1be48:	cmp	r0, #0
   1be4c:	mov	r4, r7
   1be50:	mov	r9, r8
   1be54:	bne	1bdc8 <main@@Base+0x6040>
   1be58:	b	1be94 <main@@Base+0x610c>
   1be5c:	ldr	r0, [r9, #4]!
   1be60:	cmp	r0, #0
   1be64:	mov	r4, r7
   1be68:	bne	1bdc8 <main@@Base+0x6040>
   1be6c:	mov	r0, r5
   1be70:	mov	r1, r7
   1be74:	mov	r2, r6
   1be78:	mov	r3, #23
   1be7c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1be80:	mov	r7, r0
   1be84:	b	1be94 <main@@Base+0x610c>
   1be88:	mov	r7, r4
   1be8c:	b	1be94 <main@@Base+0x610c>
   1be90:	mov	r7, r6
   1be94:	mov	r0, r7
   1be98:	sub	sp, fp, #28
   1be9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bea0:	push	{r4, r5, fp, lr}
   1bea4:	add	fp, sp, #8
   1bea8:	mov	r4, r1
   1beac:	mov	r5, r0
   1beb0:	mov	r0, r1
   1beb4:	bl	1fddc <main@@Base+0xa054>
   1beb8:	str	r4, [r5]
   1bebc:	pop	{r4, r5, fp, pc}
   1bec0:	push	{r4, r5, r6, r7, fp, lr}
   1bec4:	add	fp, sp, #16
   1bec8:	sub	sp, sp, #24
   1becc:	mov	r7, r1
   1bed0:	mov	r6, r0
   1bed4:	mov	r0, #0
   1bed8:	str	r0, [sp, #20]
   1bedc:	str	r0, [sp, #16]
   1bee0:	str	r0, [sp, #12]
   1bee4:	str	r0, [r3]
   1bee8:	str	r0, [r3, #4]
   1beec:	cmp	r1, r2
   1bef0:	beq	1bf48 <main@@Base+0x61c0>
   1bef4:	mov	r5, r3
   1bef8:	mov	r4, r2
   1befc:	add	r0, sp, #16
   1bf00:	str	r0, [sp]
   1bf04:	add	r3, sp, #12
   1bf08:	mov	r0, r6
   1bf0c:	mov	r1, r7
   1bf10:	bl	272d4 <flatcc_json_parser_integer@@Base>
   1bf14:	mov	r1, r0
   1bf18:	cmp	r0, r7
   1bf1c:	beq	1bf44 <main@@Base+0x61bc>
   1bf20:	ldr	r3, [sp, #12]
   1bf24:	ldr	r0, [sp, #16]
   1bf28:	ldr	r2, [sp, #20]
   1bf2c:	stm	sp, {r0, r2, r5}
   1bf30:	mov	r0, r6
   1bf34:	mov	r2, r4
   1bf38:	bl	1fde0 <main@@Base+0xa058>
   1bf3c:	mov	r7, r0
   1bf40:	b	1bf48 <main@@Base+0x61c0>
   1bf44:	mov	r7, r1
   1bf48:	mov	r0, r7
   1bf4c:	sub	sp, fp, #16
   1bf50:	pop	{r4, r5, r6, r7, fp, pc}
   1bf54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf58:	add	fp, sp, #28
   1bf5c:	sub	sp, sp, #44	; 0x2c
   1bf60:	mov	r8, r3
   1bf64:	mov	r6, r2
   1bf68:	mov	r5, r0
   1bf6c:	mov	r0, #0
   1bf70:	str	r0, [sp, #36]	; 0x24
   1bf74:	str	r0, [sp, #32]
   1bf78:	ldr	sl, [fp, #8]
   1bf7c:	str	r0, [sl]
   1bf80:	str	r0, [sl, #4]
   1bf84:	mov	r0, r5
   1bf88:	bl	1d044 <main@@Base+0x72bc>
   1bf8c:	mov	r4, r0
   1bf90:	cmp	r0, r6
   1bf94:	beq	1c064 <main@@Base+0x62dc>
   1bf98:	mov	r9, r8
   1bf9c:	ldr	r7, [r9]
   1bfa0:	add	r0, sp, #24
   1bfa4:	str	r0, [sp]
   1bfa8:	add	r0, sp, #16
   1bfac:	str	r0, [sp, #4]
   1bfb0:	mov	r0, r5
   1bfb4:	mov	r1, r4
   1bfb8:	mov	r2, r6
   1bfbc:	add	r3, sp, #20
   1bfc0:	blx	r7
   1bfc4:	mov	r7, r0
   1bfc8:	cmp	r0, r6
   1bfcc:	beq	1c070 <main@@Base+0x62e8>
   1bfd0:	cmp	r7, r4
   1bfd4:	beq	1c038 <main@@Base+0x62b0>
   1bfd8:	ldr	r3, [sp, #20]
   1bfdc:	ldr	r0, [sp, #24]
   1bfe0:	ldr	r1, [sp, #28]
   1bfe4:	stm	sp, {r0, r1}
   1bfe8:	add	r0, sp, #32
   1bfec:	str	r0, [sp, #8]
   1bff0:	mov	r0, r5
   1bff4:	mov	r1, r7
   1bff8:	mov	r2, r6
   1bffc:	bl	1fde0 <main@@Base+0xa058>
   1c000:	cmp	r0, r6
   1c004:	beq	1c06c <main@@Base+0x62e4>
   1c008:	ldrd	r0, [sl]
   1c00c:	ldr	r2, [sp, #32]
   1c010:	ldr	r3, [sp, #36]	; 0x24
   1c014:	adds	r0, r0, r2
   1c018:	adc	r1, r1, r3
   1c01c:	strd	r0, [sl]
   1c020:	ldr	r0, [sp, #16]
   1c024:	cmp	r0, #0
   1c028:	mov	r4, r7
   1c02c:	mov	r9, r8
   1c030:	bne	1bf9c <main@@Base+0x6214>
   1c034:	b	1c070 <main@@Base+0x62e8>
   1c038:	ldr	r0, [r9, #4]!
   1c03c:	cmp	r0, #0
   1c040:	mov	r4, r7
   1c044:	bne	1bf9c <main@@Base+0x6214>
   1c048:	mov	r0, r5
   1c04c:	mov	r1, r7
   1c050:	mov	r2, r6
   1c054:	mov	r3, #23
   1c058:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1c05c:	mov	r7, r0
   1c060:	b	1c070 <main@@Base+0x62e8>
   1c064:	mov	r7, r4
   1c068:	b	1c070 <main@@Base+0x62e8>
   1c06c:	mov	r7, r6
   1c070:	mov	r0, r7
   1c074:	sub	sp, fp, #28
   1c078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c07c:	push	{r4, r6, r7, sl, fp, lr}
   1c080:	add	fp, sp, #16
   1c084:	mov	r1, r3
   1c088:	mov	r6, r2
   1c08c:	mov	r4, r0
   1c090:	mov	r0, r2
   1c094:	bl	1fe38 <main@@Base+0xa0b0>
   1c098:	mov	r7, r1
   1c09c:	strd	r6, [r4]
   1c0a0:	pop	{r4, r6, r7, sl, fp, pc}
   1c0a4:	push	{r4, r5, r6, r7, fp, lr}
   1c0a8:	add	fp, sp, #16
   1c0ac:	sub	sp, sp, #24
   1c0b0:	mov	r7, r1
   1c0b4:	mov	r6, r0
   1c0b8:	mov	r0, #0
   1c0bc:	str	r0, [sp, #20]
   1c0c0:	str	r0, [sp, #16]
   1c0c4:	str	r0, [sp, #12]
   1c0c8:	str	r0, [r3]
   1c0cc:	cmp	r1, r2
   1c0d0:	beq	1c128 <main@@Base+0x63a0>
   1c0d4:	mov	r5, r3
   1c0d8:	mov	r4, r2
   1c0dc:	add	r0, sp, #16
   1c0e0:	str	r0, [sp]
   1c0e4:	add	r3, sp, #12
   1c0e8:	mov	r0, r6
   1c0ec:	mov	r1, r7
   1c0f0:	bl	272d4 <flatcc_json_parser_integer@@Base>
   1c0f4:	mov	r1, r0
   1c0f8:	cmp	r0, r7
   1c0fc:	beq	1c124 <main@@Base+0x639c>
   1c100:	ldr	r3, [sp, #12]
   1c104:	ldr	r0, [sp, #16]
   1c108:	ldr	r2, [sp, #20]
   1c10c:	stm	sp, {r0, r2, r5}
   1c110:	mov	r0, r6
   1c114:	mov	r2, r4
   1c118:	bl	1fe3c <main@@Base+0xa0b4>
   1c11c:	mov	r7, r0
   1c120:	b	1c128 <main@@Base+0x63a0>
   1c124:	mov	r7, r1
   1c128:	mov	r0, r7
   1c12c:	sub	sp, fp, #16
   1c130:	pop	{r4, r5, r6, r7, fp, pc}
   1c134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c138:	add	fp, sp, #28
   1c13c:	sub	sp, sp, #36	; 0x24
   1c140:	mov	r8, r3
   1c144:	mov	r6, r2
   1c148:	mov	r5, r0
   1c14c:	mov	r0, #0
   1c150:	str	r0, [sp, #32]
   1c154:	ldr	sl, [fp, #8]
   1c158:	str	r0, [sl]
   1c15c:	mov	r0, r5
   1c160:	bl	1d044 <main@@Base+0x72bc>
   1c164:	mov	r4, r0
   1c168:	cmp	r0, r6
   1c16c:	beq	1c234 <main@@Base+0x64ac>
   1c170:	mov	r9, r8
   1c174:	ldr	r7, [r9]
   1c178:	add	r0, sp, #24
   1c17c:	str	r0, [sp]
   1c180:	add	r0, sp, #16
   1c184:	str	r0, [sp, #4]
   1c188:	mov	r0, r5
   1c18c:	mov	r1, r4
   1c190:	mov	r2, r6
   1c194:	add	r3, sp, #20
   1c198:	blx	r7
   1c19c:	mov	r7, r0
   1c1a0:	cmp	r0, r6
   1c1a4:	beq	1c240 <main@@Base+0x64b8>
   1c1a8:	cmp	r7, r4
   1c1ac:	beq	1c208 <main@@Base+0x6480>
   1c1b0:	ldr	r3, [sp, #20]
   1c1b4:	ldr	r0, [sp, #24]
   1c1b8:	ldr	r1, [sp, #28]
   1c1bc:	stm	sp, {r0, r1}
   1c1c0:	add	r0, sp, #32
   1c1c4:	str	r0, [sp, #8]
   1c1c8:	mov	r0, r5
   1c1cc:	mov	r1, r7
   1c1d0:	mov	r2, r6
   1c1d4:	bl	1fe3c <main@@Base+0xa0b4>
   1c1d8:	cmp	r0, r6
   1c1dc:	beq	1c23c <main@@Base+0x64b4>
   1c1e0:	ldr	r0, [sl]
   1c1e4:	ldr	r1, [sp, #32]
   1c1e8:	add	r0, r0, r1
   1c1ec:	str	r0, [sl]
   1c1f0:	ldr	r0, [sp, #16]
   1c1f4:	cmp	r0, #0
   1c1f8:	mov	r4, r7
   1c1fc:	mov	r9, r8
   1c200:	bne	1c174 <main@@Base+0x63ec>
   1c204:	b	1c240 <main@@Base+0x64b8>
   1c208:	ldr	r0, [r9, #4]!
   1c20c:	cmp	r0, #0
   1c210:	mov	r4, r7
   1c214:	bne	1c174 <main@@Base+0x63ec>
   1c218:	mov	r0, r5
   1c21c:	mov	r1, r7
   1c220:	mov	r2, r6
   1c224:	mov	r3, #23
   1c228:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1c22c:	mov	r7, r0
   1c230:	b	1c240 <main@@Base+0x64b8>
   1c234:	mov	r7, r4
   1c238:	b	1c240 <main@@Base+0x64b8>
   1c23c:	mov	r7, r6
   1c240:	mov	r0, r7
   1c244:	sub	sp, fp, #28
   1c248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c24c:	push	{r4, r5, fp, lr}
   1c250:	add	fp, sp, #8
   1c254:	mov	r4, r1
   1c258:	mov	r5, r0
   1c25c:	mov	r0, r1
   1c260:	bl	1fe74 <main@@Base+0xa0ec>
   1c264:	str	r4, [r5]
   1c268:	pop	{r4, r5, fp, pc}
   1c26c:	push	{r4, r5, r6, r7, fp, lr}
   1c270:	add	fp, sp, #16
   1c274:	sub	sp, sp, #24
   1c278:	mov	r7, r1
   1c27c:	mov	r6, r0
   1c280:	mov	r0, #0
   1c284:	str	r0, [sp, #20]
   1c288:	str	r0, [sp, #16]
   1c28c:	str	r0, [sp, #12]
   1c290:	str	r0, [r3]
   1c294:	str	r0, [r3, #4]
   1c298:	cmp	r1, r2
   1c29c:	beq	1c2f4 <main@@Base+0x656c>
   1c2a0:	mov	r5, r3
   1c2a4:	mov	r4, r2
   1c2a8:	add	r0, sp, #16
   1c2ac:	str	r0, [sp]
   1c2b0:	add	r3, sp, #12
   1c2b4:	mov	r0, r6
   1c2b8:	mov	r1, r7
   1c2bc:	bl	272d4 <flatcc_json_parser_integer@@Base>
   1c2c0:	mov	r1, r0
   1c2c4:	cmp	r0, r7
   1c2c8:	beq	1c2f0 <main@@Base+0x6568>
   1c2cc:	ldr	r3, [sp, #12]
   1c2d0:	ldr	r0, [sp, #16]
   1c2d4:	ldr	r2, [sp, #20]
   1c2d8:	stm	sp, {r0, r2, r5}
   1c2dc:	mov	r0, r6
   1c2e0:	mov	r2, r4
   1c2e4:	bl	1fe78 <main@@Base+0xa0f0>
   1c2e8:	mov	r7, r0
   1c2ec:	b	1c2f4 <main@@Base+0x656c>
   1c2f0:	mov	r7, r1
   1c2f4:	mov	r0, r7
   1c2f8:	sub	sp, fp, #16
   1c2fc:	pop	{r4, r5, r6, r7, fp, pc}
   1c300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c304:	add	fp, sp, #28
   1c308:	sub	sp, sp, #44	; 0x2c
   1c30c:	mov	r8, r3
   1c310:	mov	r6, r2
   1c314:	mov	r5, r0
   1c318:	mov	r0, #0
   1c31c:	str	r0, [sp, #36]	; 0x24
   1c320:	str	r0, [sp, #32]
   1c324:	ldr	sl, [fp, #8]
   1c328:	str	r0, [sl]
   1c32c:	str	r0, [sl, #4]
   1c330:	mov	r0, r5
   1c334:	bl	1d044 <main@@Base+0x72bc>
   1c338:	mov	r4, r0
   1c33c:	cmp	r0, r6
   1c340:	beq	1c410 <main@@Base+0x6688>
   1c344:	mov	r9, r8
   1c348:	ldr	r7, [r9]
   1c34c:	add	r0, sp, #24
   1c350:	str	r0, [sp]
   1c354:	add	r0, sp, #16
   1c358:	str	r0, [sp, #4]
   1c35c:	mov	r0, r5
   1c360:	mov	r1, r4
   1c364:	mov	r2, r6
   1c368:	add	r3, sp, #20
   1c36c:	blx	r7
   1c370:	mov	r7, r0
   1c374:	cmp	r0, r6
   1c378:	beq	1c41c <main@@Base+0x6694>
   1c37c:	cmp	r7, r4
   1c380:	beq	1c3e4 <main@@Base+0x665c>
   1c384:	ldr	r3, [sp, #20]
   1c388:	ldr	r0, [sp, #24]
   1c38c:	ldr	r1, [sp, #28]
   1c390:	stm	sp, {r0, r1}
   1c394:	add	r0, sp, #32
   1c398:	str	r0, [sp, #8]
   1c39c:	mov	r0, r5
   1c3a0:	mov	r1, r7
   1c3a4:	mov	r2, r6
   1c3a8:	bl	1fe78 <main@@Base+0xa0f0>
   1c3ac:	cmp	r0, r6
   1c3b0:	beq	1c418 <main@@Base+0x6690>
   1c3b4:	ldrd	r0, [sl]
   1c3b8:	ldr	r2, [sp, #32]
   1c3bc:	ldr	r3, [sp, #36]	; 0x24
   1c3c0:	adds	r0, r0, r2
   1c3c4:	adc	r1, r1, r3
   1c3c8:	strd	r0, [sl]
   1c3cc:	ldr	r0, [sp, #16]
   1c3d0:	cmp	r0, #0
   1c3d4:	mov	r4, r7
   1c3d8:	mov	r9, r8
   1c3dc:	bne	1c348 <main@@Base+0x65c0>
   1c3e0:	b	1c41c <main@@Base+0x6694>
   1c3e4:	ldr	r0, [r9, #4]!
   1c3e8:	cmp	r0, #0
   1c3ec:	mov	r4, r7
   1c3f0:	bne	1c348 <main@@Base+0x65c0>
   1c3f4:	mov	r0, r5
   1c3f8:	mov	r1, r7
   1c3fc:	mov	r2, r6
   1c400:	mov	r3, #23
   1c404:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1c408:	mov	r7, r0
   1c40c:	b	1c41c <main@@Base+0x6694>
   1c410:	mov	r7, r4
   1c414:	b	1c41c <main@@Base+0x6694>
   1c418:	mov	r7, r6
   1c41c:	mov	r0, r7
   1c420:	sub	sp, fp, #28
   1c424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c428:	push	{r4, r6, r7, sl, fp, lr}
   1c42c:	add	fp, sp, #16
   1c430:	mov	r1, r3
   1c434:	mov	r6, r2
   1c438:	mov	r4, r0
   1c43c:	mov	r0, r2
   1c440:	bl	1fe9c <main@@Base+0xa114>
   1c444:	mov	r7, r1
   1c448:	strd	r6, [r4]
   1c44c:	pop	{r4, r6, r7, sl, fp, pc}
   1c450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c454:	add	fp, sp, #28
   1c458:	sub	sp, sp, #36	; 0x24
   1c45c:	mov	r8, r3
   1c460:	mov	r7, r2
   1c464:	mov	r5, r0
   1c468:	mov	r0, #0
   1c46c:	str	r0, [sp, #28]
   1c470:	str	r0, [sp, #24]
   1c474:	ldr	sl, [fp, #8]
   1c478:	str	r0, [sl]
   1c47c:	str	r0, [sl, #4]
   1c480:	mov	r0, r5
   1c484:	bl	1d044 <main@@Base+0x72bc>
   1c488:	mov	r6, r0
   1c48c:	cmp	r0, r7
   1c490:	beq	1c548 <main@@Base+0x67c0>
   1c494:	mov	r9, r8
   1c498:	ldr	r4, [r9]
   1c49c:	add	r0, sp, #16
   1c4a0:	str	r0, [sp]
   1c4a4:	add	r0, sp, #8
   1c4a8:	str	r0, [sp, #4]
   1c4ac:	mov	r0, r5
   1c4b0:	mov	r1, r6
   1c4b4:	mov	r2, r7
   1c4b8:	add	r3, sp, #12
   1c4bc:	blx	r4
   1c4c0:	mov	r4, r0
   1c4c4:	cmp	r0, r7
   1c4c8:	beq	1c554 <main@@Base+0x67cc>
   1c4cc:	cmp	r4, r6
   1c4d0:	beq	1c51c <main@@Base+0x6794>
   1c4d4:	add	r3, sp, #12
   1c4d8:	ldm	r3, {r1, r2, r3}
   1c4dc:	add	r0, sp, #24
   1c4e0:	str	r0, [sp]
   1c4e4:	mov	r0, r4
   1c4e8:	bl	1fea0 <main@@Base+0xa118>
   1c4ec:	cmp	r4, r7
   1c4f0:	beq	1c550 <main@@Base+0x67c8>
   1c4f4:	vldr	d16, [sp, #24]
   1c4f8:	vldr	d17, [sl]
   1c4fc:	vadd.f64	d16, d16, d17
   1c500:	vstr	d16, [sl]
   1c504:	ldr	r0, [sp, #8]
   1c508:	cmp	r0, #0
   1c50c:	mov	r6, r4
   1c510:	mov	r9, r8
   1c514:	bne	1c498 <main@@Base+0x6710>
   1c518:	b	1c554 <main@@Base+0x67cc>
   1c51c:	ldr	r0, [r9, #4]!
   1c520:	cmp	r0, #0
   1c524:	mov	r6, r4
   1c528:	bne	1c498 <main@@Base+0x6710>
   1c52c:	mov	r0, r5
   1c530:	mov	r1, r4
   1c534:	mov	r2, r7
   1c538:	mov	r3, #23
   1c53c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1c540:	mov	r4, r0
   1c544:	b	1c554 <main@@Base+0x67cc>
   1c548:	mov	r4, r6
   1c54c:	b	1c554 <main@@Base+0x67cc>
   1c550:	mov	r4, r7
   1c554:	mov	r0, r4
   1c558:	sub	sp, fp, #28
   1c55c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c560:	push	{r4, sl, fp, lr}
   1c564:	add	fp, sp, #8
   1c568:	mov	r4, r0
   1c56c:	bl	1fee0 <main@@Base+0xa158>
   1c570:	vstr	d0, [r4]
   1c574:	pop	{r4, sl, fp, pc}
   1c578:	push	{r4, r5, r6, sl, fp, lr}
   1c57c:	add	fp, sp, #16
   1c580:	mov	r6, r3
   1c584:	mov	r4, r2
   1c588:	mov	r5, r0
   1c58c:	bl	1c638 <main@@Base+0x68b0>
   1c590:	mov	r1, r0
   1c594:	cmp	r0, r4
   1c598:	beq	1c5dc <main@@Base+0x6854>
   1c59c:	ldrb	r0, [r1]
   1c5a0:	cmp	r0, #44	; 0x2c
   1c5a4:	bne	1c5e4 <main@@Base+0x685c>
   1c5a8:	add	r1, r1, #1
   1c5ac:	mov	r0, r5
   1c5b0:	mov	r2, r4
   1c5b4:	bl	1c638 <main@@Base+0x68b0>
   1c5b8:	mov	r1, r0
   1c5bc:	cmp	r0, r4
   1c5c0:	beq	1c60c <main@@Base+0x6884>
   1c5c4:	ldrb	r0, [r1]
   1c5c8:	cmp	r0, #125	; 0x7d
   1c5cc:	bne	1c628 <main@@Base+0x68a0>
   1c5d0:	mov	r0, #0
   1c5d4:	str	r0, [r6]
   1c5d8:	b	1c5f8 <main@@Base+0x6870>
   1c5dc:	mov	r0, #0
   1c5e0:	b	1c62c <main@@Base+0x68a4>
   1c5e4:	mov	r0, #0
   1c5e8:	str	r0, [r6]
   1c5ec:	ldrb	r0, [r1]
   1c5f0:	cmp	r0, #125	; 0x7d
   1c5f4:	bne	1c614 <main@@Base+0x688c>
   1c5f8:	add	r1, r1, #1
   1c5fc:	mov	r0, r5
   1c600:	mov	r2, r4
   1c604:	pop	{r4, r5, r6, sl, fp, lr}
   1c608:	b	1c638 <main@@Base+0x68b0>
   1c60c:	mov	r0, #0
   1c610:	str	r0, [r6]
   1c614:	mov	r0, r5
   1c618:	mov	r2, r4
   1c61c:	mov	r3, #10
   1c620:	pop	{r4, r5, r6, sl, fp, lr}
   1c624:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1c628:	mov	r0, #1
   1c62c:	str	r0, [r6]
   1c630:	mov	r0, r1
   1c634:	pop	{r4, r5, r6, sl, fp, pc}
   1c638:	sub	r3, r2, r1
   1c63c:	cmp	r3, #2
   1c640:	blt	1c66c <main@@Base+0x68e4>
   1c644:	ldrb	r3, [r1]
   1c648:	cmp	r3, #32
   1c64c:	movhi	r0, r1
   1c650:	bxhi	lr
   1c654:	bne	1c66c <main@@Base+0x68e4>
   1c658:	mov	ip, r1
   1c65c:	ldrb	r3, [ip, #1]!
   1c660:	cmp	r3, #32
   1c664:	movhi	r0, ip
   1c668:	bxhi	lr
   1c66c:	b	25fdc <flatcc_json_parser_space_ext@@Base>
   1c670:	mov	ip, r0
   1c674:	sub	r0, r1, r0
   1c678:	cmp	r0, #8
   1c67c:	movcs	r0, #8
   1c680:	and	r0, r0, #15
   1c684:	sub	r3, r0, #1
   1c688:	mov	r1, #0
   1c68c:	mov	r0, #0
   1c690:	cmp	r3, #7
   1c694:	bxhi	lr
   1c698:	add	r2, pc, #0
   1c69c:	ldr	pc, [r2, r3, lsl #2]
   1c6a0:	strdeq	ip, [r1], -r4
   1c6a4:	andeq	ip, r1, ip, ror #13
   1c6a8:	andeq	ip, r1, r4, ror #13
   1c6ac:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c6b0:	ldrdeq	ip, [r1], -r4
   1c6b4:	andeq	ip, r1, ip, asr #13
   1c6b8:	andeq	ip, r1, r4, asr #13
   1c6bc:	andeq	ip, r1, r0, asr #13
   1c6c0:	ldrb	r0, [ip, #7]
   1c6c4:	ldrb	r2, [ip, #6]
   1c6c8:	orr	r0, r0, r2, lsl #8
   1c6cc:	ldrb	r2, [ip, #5]
   1c6d0:	orr	r0, r0, r2, lsl #16
   1c6d4:	ldrb	r2, [ip, #4]
   1c6d8:	orr	r0, r0, r2, lsl #24
   1c6dc:	ldrb	r2, [ip, #3]
   1c6e0:	orr	r1, r2, r1
   1c6e4:	ldrb	r2, [ip, #2]
   1c6e8:	orr	r1, r1, r2, lsl #8
   1c6ec:	ldrb	r2, [ip, #1]
   1c6f0:	orr	r1, r1, r2, lsl #16
   1c6f4:	ldrb	r2, [ip]
   1c6f8:	orr	r1, r1, r2, lsl #24
   1c6fc:	bx	lr
   1c700:	sub	r1, r1, r0
   1c704:	cmp	r1, r2
   1c708:	bxle	lr
   1c70c:	mov	r1, r0
   1c710:	ldrb	r2, [r1, r2]!
   1c714:	cmp	r2, #46	; 0x2e
   1c718:	addeq	r0, r1, #1
   1c71c:	bx	lr
   1c720:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c724:	add	fp, sp, #24
   1c728:	sub	sp, sp, #8
   1c72c:	mov	r8, r3
   1c730:	mov	r6, r2
   1c734:	mov	r5, r1
   1c738:	mov	r7, r0
   1c73c:	mov	r0, r1
   1c740:	mov	r1, r2
   1c744:	bl	196a8 <main@@Base+0x3920>
   1c748:	movw	r2, #20577	; 0x5061
   1c74c:	movt	r2, #18798	; 0x496e
   1c750:	eor	r2, r1, r2
   1c754:	movw	r3, #28276	; 0x6e74
   1c758:	movt	r3, #29285	; 0x7265
   1c75c:	eor	r0, r0, r3
   1c760:	orrs	r0, r0, r2
   1c764:	ldr	r9, [fp, #12]
   1c768:	bne	1c7dc <main@@Base+0x6a54>
   1c76c:	add	r0, r5, #8
   1c770:	mov	r1, r6
   1c774:	bl	196a8 <main@@Base+0x3920>
   1c778:	movw	r2, #28005	; 0x6d65
   1c77c:	movt	r2, #20065	; 0x4e61
   1c780:	eor	r1, r1, r2
   1c784:	movw	r2, #24931	; 0x6163
   1c788:	movt	r2, #29552	; 0x7370
   1c78c:	eor	r0, r0, r2
   1c790:	orrs	r0, r0, r1
   1c794:	bne	1c82c <main@@Base+0x6aa4>
   1c798:	add	r4, r5, #16
   1c79c:	mov	r0, r4
   1c7a0:	mov	r1, r6
   1c7a4:	bl	196a8 <main@@Base+0x3920>
   1c7a8:	and	r0, r1, #-16777216	; 0xff000000
   1c7ac:	teq	r0, #1694498816	; 0x65000000
   1c7b0:	bne	1c82c <main@@Base+0x6aa4>
   1c7b4:	str	r9, [sp]
   1c7b8:	mov	r9, #1
   1c7bc:	mov	r0, r7
   1c7c0:	mov	r1, r4
   1c7c4:	mov	r2, r6
   1c7c8:	mov	r3, #1
   1c7cc:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1c7d0:	cmp	r0, r4
   1c7d4:	bne	1c810 <main@@Base+0x6a88>
   1c7d8:	b	1c82c <main@@Base+0x6aa4>
   1c7dc:	movw	r0, #20037	; 0x4e45
   1c7e0:	movt	r0, #20047	; 0x4e4f
   1c7e4:	teq	r1, r0
   1c7e8:	bne	1c82c <main@@Base+0x6aa4>
   1c7ec:	str	r9, [sp]
   1c7f0:	mov	r0, r7
   1c7f4:	mov	r1, r5
   1c7f8:	mov	r2, r6
   1c7fc:	mov	r3, #4
   1c800:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1c804:	cmp	r0, r5
   1c808:	beq	1c82c <main@@Base+0x6aa4>
   1c80c:	mov	r9, #0
   1c810:	mov	r1, #0
   1c814:	mov	r5, r0
   1c818:	ldr	r0, [fp, #8]
   1c81c:	str	r9, [r0]
   1c820:	str	r1, [r0, #4]
   1c824:	mov	r0, #0
   1c828:	str	r0, [r8]
   1c82c:	mov	r0, r5
   1c830:	sub	sp, fp, #24
   1c834:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c838:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c83c:	add	fp, sp, #24
   1c840:	sub	sp, sp, #8
   1c844:	mov	r9, r3
   1c848:	mov	r6, r2
   1c84c:	mov	r5, r1
   1c850:	mov	r7, r0
   1c854:	mov	r0, r1
   1c858:	mov	r1, r2
   1c85c:	bl	196a8 <main@@Base+0x3920>
   1c860:	ldr	r2, [fp, #12]
   1c864:	ldr	r8, [fp, #8]
   1c868:	movw	r3, #30769	; 0x7831
   1c86c:	movt	r3, #26725	; 0x6865
   1c870:	cmp	r1, r3
   1c874:	bhi	1c8ac <main@@Base+0x6b24>
   1c878:	teq	r1, r3
   1c87c:	bne	1c954 <main@@Base+0x6bcc>
   1c880:	str	r2, [sp]
   1c884:	mov	r0, r7
   1c888:	mov	r1, r5
   1c88c:	mov	r2, r6
   1c890:	mov	r3, #4
   1c894:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1c898:	cmp	r0, r5
   1c89c:	beq	1c954 <main@@Base+0x6bcc>
   1c8a0:	mov	r1, #0
   1c8a4:	mov	r2, #3
   1c8a8:	b	1c944 <main@@Base+0x6bbc>
   1c8ac:	movw	r3, #26725	; 0x6865
   1c8b0:	eor	r3, r3, r1, lsr #16
   1c8b4:	lsr	r0, r0, #16
   1c8b8:	orr	r0, r0, r1, lsl #16
   1c8bc:	movw	r4, #25959	; 0x6567
   1c8c0:	movt	r4, #30830	; 0x786e
   1c8c4:	eor	r0, r0, r4
   1c8c8:	orrs	r0, r0, r3
   1c8cc:	bne	1c908 <main@@Base+0x6b80>
   1c8d0:	str	r2, [sp]
   1c8d4:	mov	r0, r7
   1c8d8:	mov	r1, r5
   1c8dc:	mov	r2, r6
   1c8e0:	mov	r3, #6
   1c8e4:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1c8e8:	cmp	r0, r5
   1c8ec:	beq	1c954 <main@@Base+0x6bcc>
   1c8f0:	mvn	r1, #0
   1c8f4:	mvn	r2, #1
   1c8f8:	str	r2, [r8]
   1c8fc:	str	r1, [r8, #4]
   1c900:	mov	r1, #1
   1c904:	b	1c94c <main@@Base+0x6bc4>
   1c908:	movw	r0, #30770	; 0x7832
   1c90c:	movt	r0, #26725	; 0x6865
   1c910:	teq	r1, r0
   1c914:	bne	1c954 <main@@Base+0x6bcc>
   1c918:	str	r2, [sp]
   1c91c:	mov	r0, r7
   1c920:	mov	r1, r5
   1c924:	mov	r2, r6
   1c928:	mov	r3, #4
   1c92c:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1c930:	cmp	r0, r5
   1c934:	beq	1c954 <main@@Base+0x6bcc>
   1c938:	mov	r1, #0
   1c93c:	movw	r2, #48815	; 0xbeaf
   1c940:	movt	r2, #32431	; 0x7eaf
   1c944:	str	r2, [r8]
   1c948:	str	r1, [r8, #4]
   1c94c:	str	r1, [r9]
   1c950:	mov	r5, r0
   1c954:	mov	r0, r5
   1c958:	sub	sp, fp, #24
   1c95c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c960:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c964:	add	fp, sp, #24
   1c968:	sub	sp, sp, #8
   1c96c:	mov	r9, r3
   1c970:	mov	r6, r2
   1c974:	mov	r5, r1
   1c978:	mov	r7, r0
   1c97c:	mov	r0, r1
   1c980:	mov	r1, r2
   1c984:	bl	196a8 <main@@Base+0x3920>
   1c988:	ldr	ip, [fp, #12]
   1c98c:	ldr	r8, [fp, #8]
   1c990:	movw	r3, #29745	; 0x7431
   1c994:	movt	r3, #26990	; 0x696e
   1c998:	cmp	r1, r3
   1c99c:	bhi	1c9d4 <main@@Base+0x6c4c>
   1c9a0:	teq	r1, r3
   1c9a4:	bne	1cac8 <main@@Base+0x6d40>
   1c9a8:	str	ip, [sp]
   1c9ac:	mov	r0, r7
   1c9b0:	mov	r1, r5
   1c9b4:	mov	r2, r6
   1c9b8:	mov	r3, #4
   1c9bc:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1c9c0:	cmp	r0, r5
   1c9c4:	beq	1cac8 <main@@Base+0x6d40>
   1c9c8:	mov	r1, #0
   1c9cc:	mov	r2, #2
   1c9d0:	b	1ca28 <main@@Base+0x6ca0>
   1c9d4:	movw	r4, #29806	; 0x746e
   1c9d8:	movt	r4, #26990	; 0x696e
   1c9dc:	movw	r3, #0
   1c9e0:	movt	r3, #25959	; 0x6567
   1c9e4:	subs	r2, r0, r3
   1c9e8:	sbcs	r2, r1, r4
   1c9ec:	bcs	1ca34 <main@@Base+0x6cac>
   1c9f0:	movw	r0, #29746	; 0x7432
   1c9f4:	movt	r0, #26990	; 0x696e
   1c9f8:	teq	r1, r0
   1c9fc:	bne	1cac8 <main@@Base+0x6d40>
   1ca00:	str	ip, [sp]
   1ca04:	mov	r0, r7
   1ca08:	mov	r1, r5
   1ca0c:	mov	r2, r6
   1ca10:	mov	r3, #4
   1ca14:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1ca18:	cmp	r0, r5
   1ca1c:	beq	1cac8 <main@@Base+0x6d40>
   1ca20:	mov	r1, #0
   1ca24:	mov	r2, #42	; 0x2a
   1ca28:	str	r2, [r8]
   1ca2c:	str	r1, [r8, #4]
   1ca30:	b	1cac0 <main@@Base+0x6d38>
   1ca34:	eor	r1, r1, r4
   1ca38:	add	r2, r3, #12800	; 0x3200
   1ca3c:	bic	r4, r0, #255	; 0xff
   1ca40:	eor	r2, r4, r2
   1ca44:	orrs	r2, r2, r1
   1ca48:	bne	1ca7c <main@@Base+0x6cf4>
   1ca4c:	str	ip, [sp]
   1ca50:	mov	r0, r7
   1ca54:	mov	r1, r5
   1ca58:	mov	r2, r6
   1ca5c:	mov	r3, #7
   1ca60:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1ca64:	cmp	r0, r5
   1ca68:	beq	1cac8 <main@@Base+0x6d40>
   1ca6c:	mvn	r1, #0
   1ca70:	mvn	r2, #1
   1ca74:	add	r2, r2, #1
   1ca78:	b	1cab4 <main@@Base+0x6d2c>
   1ca7c:	bfc	r0, #0, #16
   1ca80:	eor	r0, r0, r3
   1ca84:	orrs	r0, r0, r1
   1ca88:	bne	1cac8 <main@@Base+0x6d40>
   1ca8c:	str	ip, [sp]
   1ca90:	mov	r0, r7
   1ca94:	mov	r1, r5
   1ca98:	mov	r2, r6
   1ca9c:	mov	r3, #6
   1caa0:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1caa4:	cmp	r0, r5
   1caa8:	beq	1cac8 <main@@Base+0x6d40>
   1caac:	mvn	r1, #0
   1cab0:	mvn	r2, #1
   1cab4:	str	r2, [r8]
   1cab8:	str	r1, [r8, #4]
   1cabc:	mov	r1, #1
   1cac0:	str	r1, [r9]
   1cac4:	mov	r5, r0
   1cac8:	mov	r0, r5
   1cacc:	sub	sp, fp, #24
   1cad0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cad4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cad8:	add	fp, sp, #24
   1cadc:	sub	sp, sp, #8
   1cae0:	mov	r4, r3
   1cae4:	mov	r6, r2
   1cae8:	mov	r5, r1
   1caec:	mov	r7, r0
   1caf0:	mov	r0, r1
   1caf4:	mov	r1, r2
   1caf8:	bl	196a8 <main@@Base+0x3920>
   1cafc:	ldr	r0, [fp, #12]
   1cb00:	ldr	r8, [fp, #8]
   1cb04:	movw	r2, #26417	; 0x6731
   1cb08:	movt	r2, #28261	; 0x6e65
   1cb0c:	cmp	r1, r2
   1cb10:	bhi	1cb48 <main@@Base+0x6dc0>
   1cb14:	teq	r1, r2
   1cb18:	bne	1cbd8 <main@@Base+0x6e50>
   1cb1c:	str	r0, [sp]
   1cb20:	mov	r0, r7
   1cb24:	mov	r1, r5
   1cb28:	mov	r2, r6
   1cb2c:	mov	r3, #4
   1cb30:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cb34:	cmp	r0, r5
   1cb38:	beq	1cbd8 <main@@Base+0x6e50>
   1cb3c:	mvn	r1, #0
   1cb40:	mvn	r2, #11
   1cb44:	b	1cbc4 <main@@Base+0x6e3c>
   1cb48:	movw	r2, #26418	; 0x6732
   1cb4c:	movt	r2, #28261	; 0x6e65
   1cb50:	teq	r1, r2
   1cb54:	beq	1cb98 <main@@Base+0x6e10>
   1cb58:	movw	r2, #26419	; 0x6733
   1cb5c:	movt	r2, #28261	; 0x6e65
   1cb60:	teq	r1, r2
   1cb64:	bne	1cbd8 <main@@Base+0x6e50>
   1cb68:	str	r0, [sp]
   1cb6c:	mov	r0, r7
   1cb70:	mov	r1, r5
   1cb74:	mov	r2, r6
   1cb78:	mov	r3, #4
   1cb7c:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cb80:	cmp	r0, r5
   1cb84:	beq	1cbd8 <main@@Base+0x6e50>
   1cb88:	mvn	r1, #0
   1cb8c:	mvn	r2, #11
   1cb90:	add	r2, r2, #2
   1cb94:	b	1cbc4 <main@@Base+0x6e3c>
   1cb98:	str	r0, [sp]
   1cb9c:	mov	r0, r7
   1cba0:	mov	r1, r5
   1cba4:	mov	r2, r6
   1cba8:	mov	r3, #4
   1cbac:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cbb0:	cmp	r0, r5
   1cbb4:	beq	1cbd8 <main@@Base+0x6e50>
   1cbb8:	mvn	r1, #0
   1cbbc:	mvn	r2, #11
   1cbc0:	add	r2, r2, #1
   1cbc4:	str	r2, [r8]
   1cbc8:	str	r1, [r8, #4]
   1cbcc:	mov	r1, #1
   1cbd0:	str	r1, [r4]
   1cbd4:	mov	r5, r0
   1cbd8:	mov	r0, r5
   1cbdc:	sub	sp, fp, #24
   1cbe0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cbe4:	push	{r4, r5, r6, r7, fp, lr}
   1cbe8:	add	fp, sp, #16
   1cbec:	sub	sp, sp, #8
   1cbf0:	mov	r4, r3
   1cbf4:	mov	r6, r2
   1cbf8:	mov	r5, r1
   1cbfc:	mov	r7, r0
   1cc00:	mov	r0, r1
   1cc04:	mov	r1, r2
   1cc08:	bl	196a8 <main@@Base+0x3920>
   1cc0c:	and	r0, r1, #-16777216	; 0xff000000
   1cc10:	teq	r0, #2013265920	; 0x78000000
   1cc14:	bne	1cc54 <main@@Base+0x6ecc>
   1cc18:	ldr	r0, [fp, #12]
   1cc1c:	str	r0, [sp]
   1cc20:	mov	r0, r7
   1cc24:	mov	r1, r5
   1cc28:	mov	r2, r6
   1cc2c:	mov	r3, #1
   1cc30:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cc34:	cmp	r0, r5
   1cc38:	beq	1cc54 <main@@Base+0x6ecc>
   1cc3c:	ldr	r1, [fp, #8]
   1cc40:	mov	r2, #0
   1cc44:	str	r2, [r1]
   1cc48:	str	r2, [r1, #4]
   1cc4c:	str	r2, [r4]
   1cc50:	mov	r5, r0
   1cc54:	mov	r0, r5
   1cc58:	sub	sp, fp, #16
   1cc5c:	pop	{r4, r5, r6, r7, fp, pc}
   1cc60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc64:	add	fp, sp, #28
   1cc68:	sub	sp, sp, #4
   1cc6c:	mov	r9, r3
   1cc70:	mov	r6, r2
   1cc74:	mov	r5, r1
   1cc78:	mov	sl, r0
   1cc7c:	mov	r0, r1
   1cc80:	mov	r1, r2
   1cc84:	bl	196a8 <main@@Base+0x3920>
   1cc88:	ldr	lr, [fp, #12]
   1cc8c:	ldr	r8, [fp, #8]
   1cc90:	movw	r2, #20036	; 0x4e44
   1cc94:	movt	r2, #20047	; 0x4e4f
   1cc98:	cmp	r1, r2
   1cc9c:	bhi	1cd04 <main@@Base+0x6f7c>
   1cca0:	and	r2, r0, #-16777216	; 0xff000000
   1cca4:	movw	r4, #28523	; 0x6f6b
   1cca8:	movt	r4, #17007	; 0x426f
   1ccac:	movw	r3, #28160	; 0x6e00
   1ccb0:	movt	r3, #18017	; 0x4661
   1ccb4:	subs	r7, r0, r3
   1ccb8:	sbcs	r7, r1, r4
   1ccbc:	bcs	1cd58 <main@@Base+0x6fd0>
   1ccc0:	movw	r0, #27756	; 0x6c6c
   1ccc4:	movt	r0, #16997	; 0x4265
   1ccc8:	eor	r0, r1, r0
   1cccc:	eor	r1, r2, #1694498816	; 0x65000000
   1ccd0:	orrs	r0, r1, r0
   1ccd4:	bne	1ce94 <main@@Base+0x710c>
   1ccd8:	str	lr, [sp]
   1ccdc:	mov	r0, sl
   1cce0:	mov	r1, r5
   1cce4:	mov	r2, r6
   1cce8:	mov	r3, #5
   1ccec:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1ccf0:	cmp	r0, r5
   1ccf4:	beq	1ce94 <main@@Base+0x710c>
   1ccf8:	mov	r1, #0
   1ccfc:	mov	r2, #9
   1cd00:	b	1ce84 <main@@Base+0x70fc>
   1cd04:	movw	r3, #26725	; 0x6865
   1cd08:	movt	r3, #20340	; 0x4f74
   1cd0c:	mvn	r2, #-1912602624	; 0x8e000000
   1cd10:	subs	r2, r2, r0
   1cd14:	sbcs	r2, r3, r1
   1cd18:	bcc	1cd9c <main@@Base+0x7014>
   1cd1c:	movw	r0, #20037	; 0x4e45
   1cd20:	movt	r0, #20047	; 0x4e4f
   1cd24:	teq	r1, r0
   1cd28:	bne	1ce94 <main@@Base+0x710c>
   1cd2c:	str	lr, [sp]
   1cd30:	mov	r0, sl
   1cd34:	mov	r1, r5
   1cd38:	mov	r2, r6
   1cd3c:	mov	r3, #4
   1cd40:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cd44:	cmp	r0, r5
   1cd48:	beq	1ce94 <main@@Base+0x710c>
   1cd4c:	mov	r1, #0
   1cd50:	str	r1, [r8]
   1cd54:	b	1ce88 <main@@Base+0x7100>
   1cd58:	movw	r7, #19553	; 0x4c61
   1cd5c:	movt	r7, #19829	; 0x4d75
   1cd60:	eor	r7, r1, r7
   1cd64:	eor	r2, r2, #1845493760	; 0x6e000000
   1cd68:	orrs	r2, r2, r7
   1cd6c:	bne	1cdf8 <main@@Base+0x7070>
   1cd70:	str	lr, [sp]
   1cd74:	mov	r0, sl
   1cd78:	mov	r1, r5
   1cd7c:	mov	r2, r6
   1cd80:	mov	r3, #5
   1cd84:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cd88:	cmp	r0, r5
   1cd8c:	beq	1ce94 <main@@Base+0x710c>
   1cd90:	mov	r1, #0
   1cd94:	mov	r2, #2
   1cd98:	b	1ce84 <main@@Base+0x70fc>
   1cd9c:	movw	ip, #28789	; 0x7075
   1cda0:	movt	ip, #21089	; 0x5261
   1cda4:	movw	r4, #25964	; 0x656c
   1cda8:	movt	r4, #28282	; 0x6e7a
   1cdac:	subs	r2, r0, r4
   1cdb0:	sbcs	r2, r1, ip
   1cdb4:	bcs	1ce38 <main@@Base+0x70b0>
   1cdb8:	eor	r1, r1, r3
   1cdbc:	and	r0, r0, #-16777216	; 0xff000000
   1cdc0:	eor	r0, r0, #1912602624	; 0x72000000
   1cdc4:	orrs	r0, r0, r1
   1cdc8:	bne	1ce94 <main@@Base+0x710c>
   1cdcc:	str	lr, [sp]
   1cdd0:	mov	r0, sl
   1cdd4:	mov	r1, r5
   1cdd8:	mov	r2, r6
   1cddc:	mov	r3, #5
   1cde0:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cde4:	cmp	r0, r5
   1cde8:	beq	1ce94 <main@@Base+0x710c>
   1cdec:	mov	r1, #0
   1cdf0:	mov	r2, #11
   1cdf4:	b	1ce84 <main@@Base+0x70fc>
   1cdf8:	eor	r1, r1, r4
   1cdfc:	bic	r0, r0, #255	; 0xff
   1ce00:	eor	r0, r0, r3
   1ce04:	orrs	r0, r0, r1
   1ce08:	bne	1ce94 <main@@Base+0x710c>
   1ce0c:	str	lr, [sp]
   1ce10:	mov	r0, sl
   1ce14:	mov	r1, r5
   1ce18:	mov	r2, r6
   1ce1c:	mov	r3, #7
   1ce20:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1ce24:	cmp	r0, r5
   1ce28:	beq	1ce94 <main@@Base+0x710c>
   1ce2c:	mov	r1, #0
   1ce30:	mov	r2, #10
   1ce34:	b	1ce84 <main@@Base+0x70fc>
   1ce38:	movw	r2, #21870	; 0x556e
   1ce3c:	eor	r2, r2, r1, lsr #16
   1ce40:	lsr	r3, r0, #16
   1ce44:	orr	r3, r3, r1, lsl #16
   1ce48:	movw	r7, #25956	; 0x6564
   1ce4c:	movt	r7, #30067	; 0x7573
   1ce50:	eor	r3, r3, r7
   1ce54:	orrs	r2, r3, r2
   1ce58:	bne	1cea0 <main@@Base+0x7118>
   1ce5c:	str	lr, [sp]
   1ce60:	mov	r0, sl
   1ce64:	mov	r1, r5
   1ce68:	mov	r2, r6
   1ce6c:	mov	r3, #6
   1ce70:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1ce74:	cmp	r0, r5
   1ce78:	beq	1ce94 <main@@Base+0x710c>
   1ce7c:	mov	r1, #0
   1ce80:	mov	r2, #255	; 0xff
   1ce84:	str	r2, [r8]
   1ce88:	str	r1, [r8, #4]
   1ce8c:	str	r1, [r9]
   1ce90:	mov	r5, r0
   1ce94:	mov	r0, r5
   1ce98:	sub	sp, fp, #28
   1ce9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cea0:	eor	r0, r0, r4
   1cea4:	eor	r1, r1, ip
   1cea8:	orrs	r0, r0, r1
   1ceac:	bne	1ce94 <main@@Base+0x710c>
   1ceb0:	str	lr, [sp]
   1ceb4:	mov	r4, #8
   1ceb8:	mov	r0, sl
   1cebc:	mov	r1, r5
   1cec0:	mov	r2, r6
   1cec4:	mov	r3, #8
   1cec8:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cecc:	cmp	r0, r5
   1ced0:	beq	1ce94 <main@@Base+0x710c>
   1ced4:	mov	r5, #0
   1ced8:	strd	r4, [r8]
   1cedc:	str	r5, [r9]
   1cee0:	b	1ce90 <main@@Base+0x7108>
   1cee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cee8:	add	fp, sp, #28
   1ceec:	sub	sp, sp, #4
   1cef0:	mov	r8, r3
   1cef4:	mov	r6, r2
   1cef8:	mov	r5, r1
   1cefc:	mov	r9, r0
   1cf00:	mov	r0, r1
   1cf04:	mov	r1, r2
   1cf08:	bl	196a8 <main@@Base+0x3920>
   1cf0c:	mov	r7, r0
   1cf10:	mov	r4, r1
   1cf14:	bic	r0, r1, #255	; 0xff
   1cf18:	ldr	sl, [fp, #12]
   1cf1c:	movw	r1, #28416	; 0x6f00
   1cf20:	movt	r1, #18031	; 0x466f
   1cf24:	teq	r0, r1
   1cf28:	mov	r0, r5
   1cf2c:	bne	1cf5c <main@@Base+0x71d4>
   1cf30:	str	sl, [sp]
   1cf34:	mov	r0, r9
   1cf38:	mov	r1, r5
   1cf3c:	mov	r2, r6
   1cf40:	mov	r3, #3
   1cf44:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cf48:	cmp	r0, r5
   1cf4c:	beq	1cf5c <main@@Base+0x71d4>
   1cf50:	mov	r3, #0
   1cf54:	mov	r2, #17
   1cf58:	b	1cfc8 <main@@Base+0x7240>
   1cf5c:	movw	r1, #25942	; 0x6556
   1cf60:	movt	r1, #30052	; 0x7564
   1cf64:	eor	r1, r7, r1
   1cf68:	movw	r2, #25452	; 0x636c
   1cf6c:	movt	r2, #18798	; 0x496e
   1cf70:	eor	r2, r4, r2
   1cf74:	orrs	r1, r1, r2
   1cf78:	bne	1cfdc <main@@Base+0x7254>
   1cf7c:	add	r4, r0, #8
   1cf80:	mov	r0, r4
   1cf84:	mov	r1, r6
   1cf88:	bl	196a8 <main@@Base+0x3920>
   1cf8c:	bfc	r1, #0, #16
   1cf90:	movw	r0, #0
   1cf94:	movt	r0, #24940	; 0x616c
   1cf98:	teq	r1, r0
   1cf9c:	bne	1cfdc <main@@Base+0x7254>
   1cfa0:	str	sl, [sp]
   1cfa4:	mov	r0, r9
   1cfa8:	mov	r1, r4
   1cfac:	mov	r2, r6
   1cfb0:	mov	r3, #2
   1cfb4:	bl	2658c <flatcc_json_parser_match_constant@@Base>
   1cfb8:	cmp	r0, r4
   1cfbc:	beq	1cfdc <main@@Base+0x7254>
   1cfc0:	mov	r2, #0
   1cfc4:	mov	r3, #0
   1cfc8:	mov	r5, r0
   1cfcc:	ldr	r0, [fp, #8]
   1cfd0:	strd	r2, [r0]
   1cfd4:	mov	r0, #0
   1cfd8:	str	r0, [r8]
   1cfdc:	mov	r0, r5
   1cfe0:	sub	sp, fp, #28
   1cfe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfe8:	push	{r4, sl, fp, lr}
   1cfec:	add	fp, sp, #8
   1cff0:	ldr	r4, [fp, #12]
   1cff4:	ldr	ip, [fp, #8]
   1cff8:	ldr	lr, [fp, #16]
   1cffc:	cmp	r3, #0
   1d000:	beq	1d01c <main@@Base+0x7294>
   1d004:	subs	r3, ip, #129	; 0x81
   1d008:	sbcs	r3, r4, #0
   1d00c:	bcc	1d034 <main@@Base+0x72ac>
   1d010:	mov	r3, #8
   1d014:	pop	{r4, sl, fp, lr}
   1d018:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1d01c:	subs	r3, ip, #128	; 0x80
   1d020:	sbcs	r3, r4, #0
   1d024:	bcc	1d038 <main@@Base+0x72b0>
   1d028:	mov	r3, #7
   1d02c:	pop	{r4, sl, fp, lr}
   1d030:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1d034:	rsb	ip, ip, #0
   1d038:	strb	ip, [lr]
   1d03c:	mov	r0, r1
   1d040:	pop	{r4, sl, fp, pc}
   1d044:	push	{r4, r5, fp, lr}
   1d048:	add	fp, sp, #8
   1d04c:	mov	r4, r2
   1d050:	mov	r5, r0
   1d054:	bl	19680 <main@@Base+0x38f8>
   1d058:	mov	r1, r0
   1d05c:	mov	r0, r5
   1d060:	mov	r2, r4
   1d064:	pop	{r4, r5, fp, lr}
   1d068:	b	1c638 <main@@Base+0x68b0>
   1d06c:	bx	lr
   1d070:	push	{fp, lr}
   1d074:	mov	fp, sp
   1d078:	cmp	r3, #0
   1d07c:	beq	1d08c <main@@Base+0x7304>
   1d080:	mov	r3, #8
   1d084:	pop	{fp, lr}
   1d088:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1d08c:	ldr	ip, [fp, #12]
   1d090:	ldr	lr, [fp, #8]
   1d094:	subs	r3, lr, #256	; 0x100
   1d098:	sbcs	r3, ip, #0
   1d09c:	ldrcc	r0, [fp, #16]
   1d0a0:	strbcc	lr, [r0]
   1d0a4:	movcc	r0, r1
   1d0a8:	popcc	{fp, pc}
   1d0ac:	mov	r3, #7
   1d0b0:	pop	{fp, lr}
   1d0b4:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1d0b8:	bx	lr
   1d0bc:	push	{r4, sl, fp, lr}
   1d0c0:	add	fp, sp, #8
   1d0c4:	ldr	r4, [fp, #12]
   1d0c8:	ldr	ip, [fp, #8]
   1d0cc:	ldr	lr, [fp, #16]
   1d0d0:	cmp	r3, #0
   1d0d4:	beq	1d0f4 <main@@Base+0x736c>
   1d0d8:	movw	r3, #32769	; 0x8001
   1d0dc:	subs	r3, ip, r3
   1d0e0:	sbcs	r3, r4, #0
   1d0e4:	bcc	1d10c <main@@Base+0x7384>
   1d0e8:	mov	r3, #8
   1d0ec:	pop	{r4, sl, fp, lr}
   1d0f0:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1d0f4:	subs	r3, ip, #32768	; 0x8000
   1d0f8:	sbcs	r3, r4, #0
   1d0fc:	bcc	1d110 <main@@Base+0x7388>
   1d100:	mov	r3, #7
   1d104:	pop	{r4, sl, fp, lr}
   1d108:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1d10c:	rsb	ip, ip, #0
   1d110:	strh	ip, [lr]
   1d114:	mov	r0, r1
   1d118:	pop	{r4, sl, fp, pc}
   1d11c:	bx	lr
   1d120:	sub	r3, r2, r1
   1d124:	cmp	r3, #4
   1d128:	blt	1d144 <main@@Base+0x73bc>
   1d12c:	ldr	ip, [r1]
   1d130:	movw	r3, #30062	; 0x756e
   1d134:	movt	r3, #27756	; 0x6c6c
   1d138:	cmp	ip, r3
   1d13c:	addeq	r0, r1, #4
   1d140:	bxeq	lr
   1d144:	mov	r3, #26
   1d148:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1d14c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d150:	add	fp, sp, #28
   1d154:	sub	sp, sp, #20
   1d158:	mov	r5, r3
   1d15c:	mov	r4, r2
   1d160:	mov	r8, r1
   1d164:	mov	r9, r0
   1d168:	mov	r0, #0
   1d16c:	str	r0, [r3]
   1d170:	ldr	r0, [r9]
   1d174:	mov	r1, #4
   1d178:	bl	226c8 <flatcc_builder_start_table@@Base>
   1d17c:	cmp	r0, #0
   1d180:	beq	1d1a8 <main@@Base+0x7420>
   1d184:	mov	r0, r9
   1d188:	mov	r1, r8
   1d18c:	mov	r2, r4
   1d190:	mov	r3, #33	; 0x21
   1d194:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1d198:	mov	r8, r0
   1d19c:	mov	r0, r8
   1d1a0:	sub	sp, fp, #28
   1d1a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1a8:	add	r3, sp, #16
   1d1ac:	mov	r0, r9
   1d1b0:	mov	r1, r8
   1d1b4:	mov	r2, r4
   1d1b8:	bl	195f0 <main@@Base+0x3868>
   1d1bc:	mov	r8, r0
   1d1c0:	ldr	r0, [sp, #16]
   1d1c4:	cmp	r0, #0
   1d1c8:	str	r5, [sp, #8]
   1d1cc:	beq	1d570 <main@@Base+0x77e8>
   1d1d0:	add	sl, sp, #13
   1d1d4:	add	r7, sp, #12
   1d1d8:	mov	r0, r9
   1d1dc:	mov	r1, r8
   1d1e0:	mov	r2, r4
   1d1e4:	bl	19680 <main@@Base+0x38f8>
   1d1e8:	mov	r5, r0
   1d1ec:	mov	r1, r4
   1d1f0:	bl	196a8 <main@@Base+0x3920>
   1d1f4:	mov	r6, r1
   1d1f8:	lsr	r1, r0, #16
   1d1fc:	orr	r1, r1, r6, lsl #16
   1d200:	movw	r2, #29234	; 0x7232
   1d204:	movt	r2, #27759	; 0x6c6f
   1d208:	eor	r1, r1, r2
   1d20c:	movw	r2, #25455	; 0x636f
   1d210:	eor	r2, r2, r6, lsr #16
   1d214:	orrs	r1, r1, r2
   1d218:	bne	1d270 <main@@Base+0x74e8>
   1d21c:	mov	r0, r9
   1d220:	mov	r1, r5
   1d224:	mov	r2, r4
   1d228:	mov	r3, #6
   1d22c:	bl	196ac <main@@Base+0x3924>
   1d230:	mov	r7, r0
   1d234:	cmp	r5, r0
   1d238:	add	r5, sp, #15
   1d23c:	beq	1d2e0 <main@@Base+0x7558>
   1d240:	mov	r0, #0
   1d244:	strb	r0, [sp, #15]
   1d248:	mov	r0, r9
   1d24c:	mov	r1, r7
   1d250:	mov	r2, r4
   1d254:	mov	r3, r5
   1d258:	bl	1a064 <main@@Base+0x42dc>
   1d25c:	mov	r6, r0
   1d260:	cmp	r7, r0
   1d264:	beq	1d3d8 <main@@Base+0x7650>
   1d268:	mov	r8, r6
   1d26c:	b	1d404 <main@@Base+0x767c>
   1d270:	movw	r1, #27759	; 0x6c6f
   1d274:	movt	r1, #25455	; 0x636f
   1d278:	eor	r1, r6, r1
   1d27c:	and	r0, r0, #-16777216	; 0xff000000
   1d280:	eor	r0, r0, #1912602624	; 0x72000000
   1d284:	orrs	r0, r0, r1
   1d288:	bne	1d2e8 <main@@Base+0x7560>
   1d28c:	mov	r0, r9
   1d290:	mov	r1, r5
   1d294:	mov	r2, r4
   1d298:	mov	r3, #5
   1d29c:	bl	196ac <main@@Base+0x3924>
   1d2a0:	mov	r7, r0
   1d2a4:	cmp	r5, r0
   1d2a8:	beq	1d2e0 <main@@Base+0x7558>
   1d2ac:	mov	r0, #0
   1d2b0:	strb	r0, [sp, #14]
   1d2b4:	mov	r0, r9
   1d2b8:	mov	r1, r7
   1d2bc:	mov	r2, r4
   1d2c0:	add	r5, sp, #14
   1d2c4:	mov	r3, r5
   1d2c8:	bl	1a064 <main@@Base+0x42dc>
   1d2cc:	mov	r6, r0
   1d2d0:	cmp	r7, r0
   1d2d4:	beq	1d428 <main@@Base+0x76a0>
   1d2d8:	mov	r8, r6
   1d2dc:	b	1d454 <main@@Base+0x76cc>
   1d2e0:	mov	r5, r7
   1d2e4:	add	r7, sp, #12
   1d2e8:	bic	r0, r6, #255	; 0xff
   1d2ec:	movw	r1, #12800	; 0x3200
   1d2f0:	movt	r1, #30051	; 0x7563
   1d2f4:	teq	r0, r1
   1d2f8:	bne	1d34c <main@@Base+0x75c4>
   1d2fc:	mov	r0, r9
   1d300:	mov	r1, r5
   1d304:	mov	r2, r4
   1d308:	mov	r3, #3
   1d30c:	bl	196ac <main@@Base+0x3924>
   1d310:	mov	r6, r0
   1d314:	cmp	r5, r0
   1d318:	beq	1d3b4 <main@@Base+0x762c>
   1d31c:	mov	r0, #0
   1d320:	strb	r0, [sp, #13]
   1d324:	mov	r0, r9
   1d328:	mov	r1, r6
   1d32c:	mov	r2, r4
   1d330:	mov	r3, sl
   1d334:	bl	1a2bc <main@@Base+0x4534>
   1d338:	mov	r7, r0
   1d33c:	cmp	r6, r0
   1d340:	beq	1d494 <main@@Base+0x770c>
   1d344:	mov	r8, r7
   1d348:	b	1d4c0 <main@@Base+0x7738>
   1d34c:	bfc	r6, #0, #16
   1d350:	movw	r0, #0
   1d354:	movt	r0, #30051	; 0x7563
   1d358:	teq	r6, r0
   1d35c:	bne	1d3c0 <main@@Base+0x7638>
   1d360:	mov	r0, r9
   1d364:	mov	r1, r5
   1d368:	mov	r2, r4
   1d36c:	mov	r3, #2
   1d370:	bl	196ac <main@@Base+0x3924>
   1d374:	mov	r6, r0
   1d378:	cmp	r5, r0
   1d37c:	beq	1d3b4 <main@@Base+0x762c>
   1d380:	mov	r0, #0
   1d384:	strb	r0, [sp, #12]
   1d388:	mov	r0, r9
   1d38c:	mov	r1, r6
   1d390:	mov	r2, r4
   1d394:	mov	r3, r7
   1d398:	bl	1a2bc <main@@Base+0x4534>
   1d39c:	mov	r1, r7
   1d3a0:	mov	r7, r0
   1d3a4:	cmp	r6, r0
   1d3a8:	beq	1d4e4 <main@@Base+0x775c>
   1d3ac:	mov	r8, r7
   1d3b0:	b	1d510 <main@@Base+0x7788>
   1d3b4:	mov	r0, r9
   1d3b8:	mov	r1, r6
   1d3bc:	b	1d3c8 <main@@Base+0x7640>
   1d3c0:	mov	r0, r9
   1d3c4:	mov	r1, r5
   1d3c8:	mov	r2, r4
   1d3cc:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1d3d0:	mov	r8, r0
   1d3d4:	b	1d54c <main@@Base+0x77c4>
   1d3d8:	str	r5, [sp]
   1d3dc:	mov	r0, r9
   1d3e0:	mov	r1, r6
   1d3e4:	mov	r2, r4
   1d3e8:	movw	r3, #33248	; 0x81e0
   1d3ec:	movt	r3, #4
   1d3f0:	bl	1a0f4 <main@@Base+0x436c>
   1d3f4:	mov	r8, r0
   1d3f8:	cmp	r0, r6
   1d3fc:	cmpne	r8, r4
   1d400:	beq	1d184 <main@@Base+0x73fc>
   1d404:	ldrb	r5, [sp, #15]
   1d408:	cmp	r5, #2
   1d40c:	add	r7, sp, #12
   1d410:	ldrbeq	r0, [r9, #8]
   1d414:	tsteq	r0, #2
   1d418:	beq	1d54c <main@@Base+0x77c4>
   1d41c:	ldr	r0, [r9]
   1d420:	mov	r1, #1
   1d424:	b	1d474 <main@@Base+0x76ec>
   1d428:	str	r5, [sp]
   1d42c:	mov	r0, r9
   1d430:	mov	r1, r6
   1d434:	mov	r2, r4
   1d438:	movw	r3, #33264	; 0x81f0
   1d43c:	movt	r3, #4
   1d440:	bl	1a0f4 <main@@Base+0x436c>
   1d444:	mov	r8, r0
   1d448:	cmp	r0, r6
   1d44c:	cmpne	r8, r4
   1d450:	beq	1d184 <main@@Base+0x73fc>
   1d454:	ldrb	r5, [sp, #14]
   1d458:	cmp	r5, #2
   1d45c:	add	r7, sp, #12
   1d460:	ldrbeq	r0, [r9, #8]
   1d464:	tsteq	r0, #2
   1d468:	beq	1d54c <main@@Base+0x77c4>
   1d46c:	ldr	r0, [r9]
   1d470:	mov	r1, #0
   1d474:	mov	r2, #1
   1d478:	mov	r3, #1
   1d47c:	bl	234dc <flatcc_builder_table_add@@Base>
   1d480:	cmp	r0, #0
   1d484:	beq	1d184 <main@@Base+0x73fc>
   1d488:	sxtb	r1, r5
   1d48c:	bl	1a20c <main@@Base+0x4484>
   1d490:	b	1d54c <main@@Base+0x77c4>
   1d494:	str	sl, [sp]
   1d498:	mov	r0, r9
   1d49c:	mov	r1, r7
   1d4a0:	mov	r2, r4
   1d4a4:	movw	r3, #33280	; 0x8200
   1d4a8:	movt	r3, #4
   1d4ac:	bl	1a34c <main@@Base+0x45c4>
   1d4b0:	mov	r8, r0
   1d4b4:	cmp	r0, r7
   1d4b8:	cmpne	r8, r4
   1d4bc:	beq	1d184 <main@@Base+0x73fc>
   1d4c0:	ldrb	r6, [sp, #13]
   1d4c4:	cmp	r6, #2
   1d4c8:	add	r7, sp, #12
   1d4cc:	ldrbeq	r0, [r9, #8]
   1d4d0:	tsteq	r0, #2
   1d4d4:	beq	1d54c <main@@Base+0x77c4>
   1d4d8:	ldr	r0, [r9]
   1d4dc:	mov	r1, #3
   1d4e0:	b	1d530 <main@@Base+0x77a8>
   1d4e4:	str	r1, [sp]
   1d4e8:	mov	r0, r9
   1d4ec:	mov	r1, r7
   1d4f0:	mov	r2, r4
   1d4f4:	movw	r3, #33292	; 0x820c
   1d4f8:	movt	r3, #4
   1d4fc:	bl	1a34c <main@@Base+0x45c4>
   1d500:	mov	r8, r0
   1d504:	cmp	r0, r7
   1d508:	cmpne	r8, r4
   1d50c:	beq	1d184 <main@@Base+0x73fc>
   1d510:	ldrb	r6, [sp, #12]
   1d514:	cmp	r6, #2
   1d518:	add	r7, sp, #12
   1d51c:	ldrbeq	r0, [r9, #8]
   1d520:	tsteq	r0, #2
   1d524:	beq	1d54c <main@@Base+0x77c4>
   1d528:	ldr	r0, [r9]
   1d52c:	mov	r1, #2
   1d530:	mov	r2, #1
   1d534:	mov	r3, #1
   1d538:	bl	234dc <flatcc_builder_table_add@@Base>
   1d53c:	cmp	r0, #0
   1d540:	beq	1d184 <main@@Base+0x73fc>
   1d544:	mov	r1, r6
   1d548:	bl	1a464 <main@@Base+0x46dc>
   1d54c:	mov	r0, r9
   1d550:	mov	r1, r8
   1d554:	mov	r2, r4
   1d558:	add	r3, sp, #16
   1d55c:	bl	1c578 <main@@Base+0x67f0>
   1d560:	mov	r8, r0
   1d564:	ldr	r0, [sp, #16]
   1d568:	cmp	r0, #0
   1d56c:	bne	1d1d8 <main@@Base+0x7450>
   1d570:	ldr	r0, [r9, #20]
   1d574:	cmp	r0, #0
   1d578:	bne	1d184 <main@@Base+0x73fc>
   1d57c:	ldr	r0, [r9]
   1d580:	bl	22de8 <flatcc_builder_end_table@@Base>
   1d584:	ldr	r1, [sp, #8]
   1d588:	str	r0, [r1]
   1d58c:	cmp	r0, #0
   1d590:	bne	1d19c <main@@Base+0x7414>
   1d594:	b	1d184 <main@@Base+0x73fc>
   1d598:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d59c:	add	fp, sp, #24
   1d5a0:	sub	sp, sp, #8
   1d5a4:	mov	r8, r3
   1d5a8:	mov	r4, r2
   1d5ac:	mov	r7, r1
   1d5b0:	mov	r5, r0
   1d5b4:	mov	r0, #0
   1d5b8:	str	r0, [r3]
   1d5bc:	ldr	r0, [r5]
   1d5c0:	mov	r1, #0
   1d5c4:	bl	226c8 <flatcc_builder_start_table@@Base>
   1d5c8:	cmp	r0, #0
   1d5cc:	bne	1d65c <main@@Base+0x78d4>
   1d5d0:	add	r3, sp, #4
   1d5d4:	mov	r0, r5
   1d5d8:	mov	r1, r7
   1d5dc:	mov	r2, r4
   1d5e0:	bl	195f0 <main@@Base+0x3868>
   1d5e4:	mov	r7, r0
   1d5e8:	ldr	r0, [sp, #4]
   1d5ec:	cmp	r0, #0
   1d5f0:	beq	1d63c <main@@Base+0x78b4>
   1d5f4:	add	r6, sp, #4
   1d5f8:	mov	r0, r5
   1d5fc:	mov	r1, r7
   1d600:	mov	r2, r4
   1d604:	bl	19680 <main@@Base+0x38f8>
   1d608:	mov	r1, r0
   1d60c:	mov	r0, r5
   1d610:	mov	r2, r4
   1d614:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1d618:	mov	r1, r0
   1d61c:	mov	r0, r5
   1d620:	mov	r2, r4
   1d624:	mov	r3, r6
   1d628:	bl	1c578 <main@@Base+0x67f0>
   1d62c:	mov	r7, r0
   1d630:	ldr	r0, [sp, #4]
   1d634:	cmp	r0, #0
   1d638:	bne	1d5f8 <main@@Base+0x7870>
   1d63c:	ldr	r0, [r5, #20]
   1d640:	cmp	r0, #0
   1d644:	bne	1d65c <main@@Base+0x78d4>
   1d648:	ldr	r0, [r5]
   1d64c:	bl	22de8 <flatcc_builder_end_table@@Base>
   1d650:	str	r0, [r8]
   1d654:	cmp	r0, #0
   1d658:	bne	1d674 <main@@Base+0x78ec>
   1d65c:	mov	r0, r5
   1d660:	mov	r1, r7
   1d664:	mov	r2, r4
   1d668:	mov	r3, #33	; 0x21
   1d66c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1d670:	mov	r7, r0
   1d674:	mov	r0, r7
   1d678:	sub	sp, fp, #24
   1d67c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d684:	add	fp, sp, #28
   1d688:	sub	sp, sp, #36	; 0x24
   1d68c:	mov	r7, r3
   1d690:	mov	r4, r2
   1d694:	mov	r6, r1
   1d698:	mov	r5, r0
   1d69c:	mov	r0, #0
   1d6a0:	str	r0, [r3]
   1d6a4:	ldr	r0, [r5]
   1d6a8:	mov	r1, #4
   1d6ac:	bl	226c8 <flatcc_builder_start_table@@Base>
   1d6b0:	cmp	r0, #0
   1d6b4:	beq	1d6dc <main@@Base+0x7954>
   1d6b8:	mov	r0, r5
   1d6bc:	mov	r1, r6
   1d6c0:	mov	r2, r4
   1d6c4:	mov	r3, #33	; 0x21
   1d6c8:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1d6cc:	mov	r6, r0
   1d6d0:	mov	r0, r6
   1d6d4:	sub	sp, fp, #28
   1d6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6dc:	add	r0, sp, #24
   1d6e0:	str	r0, [sp]
   1d6e4:	mov	r0, r5
   1d6e8:	mov	r1, r6
   1d6ec:	mov	r2, r4
   1d6f0:	mov	r3, #1
   1d6f4:	bl	27900 <flatcc_json_parser_prepare_unions@@Base>
   1d6f8:	cmp	r0, r4
   1d6fc:	beq	1d6b8 <main@@Base+0x7930>
   1d700:	str	r7, [sp, #20]
   1d704:	add	r3, sp, #32
   1d708:	mov	r0, r5
   1d70c:	mov	r1, r6
   1d710:	mov	r2, r4
   1d714:	bl	195f0 <main@@Base+0x3868>
   1d718:	mov	r6, r0
   1d71c:	ldr	r0, [sp, #32]
   1d720:	cmp	r0, #0
   1d724:	beq	1d990 <main@@Base+0x7c08>
   1d728:	movw	r0, #30976	; 0x7900
   1d72c:	movt	r0, #24942	; 0x616e
   1d730:	add	r9, r0, #95	; 0x5f
   1d734:	add	sl, sp, #32
   1d738:	mov	r0, r5
   1d73c:	mov	r1, r6
   1d740:	mov	r2, r4
   1d744:	bl	19680 <main@@Base+0x38f8>
   1d748:	mov	r6, r0
   1d74c:	mov	r1, r4
   1d750:	bl	196a8 <main@@Base+0x3920>
   1d754:	mov	r7, r0
   1d758:	mov	r8, r1
   1d75c:	movw	r0, #28281	; 0x6e79
   1d760:	movt	r0, #28001	; 0x6d61
   1d764:	eor	r0, r1, r0
   1d768:	eor	r1, r7, r9
   1d76c:	orrs	r1, r1, r0
   1d770:	bne	1d7fc <main@@Base+0x7a74>
   1d774:	add	r6, r6, #8
   1d778:	mov	r0, r6
   1d77c:	mov	r1, r4
   1d780:	bl	196a8 <main@@Base+0x3920>
   1d784:	movw	r0, #28773	; 0x7065
   1d788:	movt	r0, #29817	; 0x7479
   1d78c:	teq	r1, r0
   1d790:	bne	1d950 <main@@Base+0x7bc8>
   1d794:	mov	r0, r5
   1d798:	mov	r1, r6
   1d79c:	mov	r2, r4
   1d7a0:	mov	r3, #4
   1d7a4:	bl	196ac <main@@Base+0x3924>
   1d7a8:	mov	r1, r0
   1d7ac:	cmp	r6, r0
   1d7b0:	beq	1d95c <main@@Base+0x7bd4>
   1d7b4:	ldr	r0, [sp, #24]
   1d7b8:	mov	r2, #3
   1d7bc:	str	r2, [sp]
   1d7c0:	str	r0, [sp, #4]
   1d7c4:	movw	r0, #33304	; 0x8218
   1d7c8:	movt	r0, #4
   1d7cc:	str	r0, [sp, #8]
   1d7d0:	movw	r0, #44688	; 0xae90
   1d7d4:	movt	r0, #1
   1d7d8:	str	r0, [sp, #12]
   1d7dc:	movw	r0, #55760	; 0xd9d0
   1d7e0:	movt	r0, #1
   1d7e4:	str	r0, [sp, #16]
   1d7e8:	mov	r0, r5
   1d7ec:	mov	r2, r4
   1d7f0:	mov	r3, #0
   1d7f4:	bl	28098 <flatcc_json_parser_union_type_vector@@Base>
   1d7f8:	b	1d968 <main@@Base+0x7be0>
   1d7fc:	bic	r1, r7, #255	; 0xff
   1d800:	movw	r2, #30976	; 0x7900
   1d804:	movt	r2, #24942	; 0x616e
   1d808:	eor	r1, r1, r2
   1d80c:	orrs	r0, r1, r0
   1d810:	bne	1d868 <main@@Base+0x7ae0>
   1d814:	mov	r0, r5
   1d818:	mov	r1, r6
   1d81c:	mov	r2, r4
   1d820:	mov	r3, #7
   1d824:	bl	196ac <main@@Base+0x3924>
   1d828:	mov	r1, r0
   1d82c:	cmp	r6, r0
   1d830:	beq	1d864 <main@@Base+0x7adc>
   1d834:	ldr	r0, [sp, #24]
   1d838:	mov	r2, #3
   1d83c:	str	r2, [sp]
   1d840:	str	r0, [sp, #4]
   1d844:	movw	r0, #44688	; 0xae90
   1d848:	movt	r0, #1
   1d84c:	str	r0, [sp, #8]
   1d850:	mov	r0, r5
   1d854:	mov	r2, r4
   1d858:	mov	r3, #0
   1d85c:	bl	27e3c <flatcc_json_parser_union_vector@@Base>
   1d860:	b	1d968 <main@@Base+0x7be0>
   1d864:	mov	r6, r1
   1d868:	movw	r0, #28786	; 0x7072
   1d86c:	eor	r0, r0, r8, lsr #16
   1d870:	lsr	r1, r7, #16
   1d874:	orr	r1, r1, r8, lsl #16
   1d878:	movw	r2, #27000	; 0x6978
   1d87c:	movt	r2, #25958	; 0x6566
   1d880:	eor	r1, r1, r2
   1d884:	orrs	r0, r1, r0
   1d888:	bne	1d8d8 <main@@Base+0x7b50>
   1d88c:	mov	r0, r5
   1d890:	mov	r1, r6
   1d894:	mov	r2, r4
   1d898:	mov	r3, #6
   1d89c:	bl	196ac <main@@Base+0x3924>
   1d8a0:	mov	r1, r0
   1d8a4:	cmp	r6, r0
   1d8a8:	beq	1d95c <main@@Base+0x7bd4>
   1d8ac:	mov	r0, r5
   1d8b0:	mov	r2, r4
   1d8b4:	add	r3, sp, #28
   1d8b8:	bl	1d9e4 <main@@Base+0x7c5c>
   1d8bc:	mov	r6, r0
   1d8c0:	ldr	r7, [sp, #28]
   1d8c4:	cmp	r7, #0
   1d8c8:	beq	1d6b8 <main@@Base+0x7930>
   1d8cc:	ldr	r0, [r5]
   1d8d0:	mov	r1, #0
   1d8d4:	b	1d93c <main@@Base+0x7bb4>
   1d8d8:	movw	r0, #30313	; 0x7669
   1d8dc:	movt	r0, #28015	; 0x6d6f
   1d8e0:	eor	r0, r8, r0
   1d8e4:	and	r1, r7, #-16777216	; 0xff000000
   1d8e8:	eor	r1, r1, #1694498816	; 0x65000000
   1d8ec:	orrs	r0, r1, r0
   1d8f0:	bne	1d950 <main@@Base+0x7bc8>
   1d8f4:	mov	r0, r5
   1d8f8:	mov	r1, r6
   1d8fc:	mov	r2, r4
   1d900:	mov	r3, #5
   1d904:	bl	196ac <main@@Base+0x3924>
   1d908:	mov	r1, r0
   1d90c:	cmp	r6, r0
   1d910:	beq	1d95c <main@@Base+0x7bd4>
   1d914:	mov	r0, r5
   1d918:	mov	r2, r4
   1d91c:	add	r3, sp, #28
   1d920:	bl	1dcf8 <main@@Base+0x7f70>
   1d924:	mov	r6, r0
   1d928:	ldr	r7, [sp, #28]
   1d92c:	cmp	r7, #0
   1d930:	beq	1d6b8 <main@@Base+0x7930>
   1d934:	ldr	r0, [r5]
   1d938:	mov	r1, #1
   1d93c:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   1d940:	cmp	r0, #0
   1d944:	beq	1d6b8 <main@@Base+0x7930>
   1d948:	str	r7, [r0]
   1d94c:	b	1d96c <main@@Base+0x7be4>
   1d950:	mov	r0, r5
   1d954:	mov	r1, r6
   1d958:	b	1d960 <main@@Base+0x7bd8>
   1d95c:	mov	r0, r5
   1d960:	mov	r2, r4
   1d964:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1d968:	mov	r6, r0
   1d96c:	mov	r0, r5
   1d970:	mov	r1, r6
   1d974:	mov	r2, r4
   1d978:	mov	r3, sl
   1d97c:	bl	1c578 <main@@Base+0x67f0>
   1d980:	mov	r6, r0
   1d984:	ldr	r0, [sp, #32]
   1d988:	cmp	r0, #0
   1d98c:	bne	1d738 <main@@Base+0x79b0>
   1d990:	ldr	r0, [r5, #20]
   1d994:	cmp	r0, #0
   1d998:	bne	1d6b8 <main@@Base+0x7930>
   1d99c:	ldr	r3, [sp, #24]
   1d9a0:	mov	r0, r5
   1d9a4:	mov	r1, r6
   1d9a8:	mov	r2, r4
   1d9ac:	bl	2796c <flatcc_json_parser_finalize_unions@@Base>
   1d9b0:	mov	r6, r0
   1d9b4:	ldr	r0, [r5]
   1d9b8:	bl	22de8 <flatcc_builder_end_table@@Base>
   1d9bc:	ldr	r1, [sp, #20]
   1d9c0:	str	r0, [r1]
   1d9c4:	cmp	r0, #0
   1d9c8:	bne	1d6d0 <main@@Base+0x7948>
   1d9cc:	b	1d6b8 <main@@Base+0x7930>
   1d9d0:	mov	r1, #0
   1d9d4:	cmp	r0, #5
   1d9d8:	movwcc	r1, #1
   1d9dc:	mov	r0, r1
   1d9e0:	bx	lr
   1d9e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9e8:	add	fp, sp, #28
   1d9ec:	sub	sp, sp, #12
   1d9f0:	mov	r7, r3
   1d9f4:	mov	r4, r2
   1d9f8:	mov	r6, r1
   1d9fc:	mov	r5, r0
   1da00:	mov	r0, #0
   1da04:	str	r0, [r3]
   1da08:	ldr	r0, [r5]
   1da0c:	mov	r1, #3
   1da10:	bl	226c8 <flatcc_builder_start_table@@Base>
   1da14:	cmp	r0, #0
   1da18:	bne	1dcb8 <main@@Base+0x7f30>
   1da1c:	add	r3, sp, #8
   1da20:	mov	r0, r5
   1da24:	mov	r1, r6
   1da28:	mov	r2, r4
   1da2c:	bl	195f0 <main@@Base+0x3868>
   1da30:	mov	r6, r0
   1da34:	ldr	r0, [sp, #8]
   1da38:	cmp	r0, #0
   1da3c:	str	r7, [sp]
   1da40:	beq	1dcac <main@@Base+0x7f24>
   1da44:	movw	r9, #29556	; 0x7374
   1da48:	movt	r9, #29797	; 0x7465
   1da4c:	movw	sl, #28526	; 0x6f6e
   1da50:	movt	sl, #27251	; 0x6a73
   1da54:	movw	r8, #25958	; 0x6566
   1da58:	movt	r8, #28786	; 0x7072
   1da5c:	add	r7, sp, #8
   1da60:	b	1da78 <main@@Base+0x7cf0>
   1da64:	mov	r0, r5
   1da68:	mov	r2, r4
   1da6c:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1da70:	mov	r6, r0
   1da74:	b	1dbd0 <main@@Base+0x7e48>
   1da78:	mov	r0, r5
   1da7c:	mov	r1, r6
   1da80:	mov	r2, r4
   1da84:	bl	19680 <main@@Base+0x38f8>
   1da88:	mov	r6, r0
   1da8c:	mov	r1, r4
   1da90:	bl	196a8 <main@@Base+0x3920>
   1da94:	eor	r1, r1, r9
   1da98:	eor	r0, r0, sl
   1da9c:	orrs	r0, r0, r1
   1daa0:	bne	1dc74 <main@@Base+0x7eec>
   1daa4:	add	r7, r6, #8
   1daa8:	mov	r0, r7
   1daac:	mov	r1, r4
   1dab0:	bl	196a8 <main@@Base+0x3920>
   1dab4:	eor	r1, r1, r8
   1dab8:	movw	r2, #28769	; 0x7061
   1dabc:	movt	r2, #27000	; 0x6978
   1dac0:	eor	r0, r0, r2
   1dac4:	orrs	r0, r0, r1
   1dac8:	bne	1db50 <main@@Base+0x7dc8>
   1dacc:	add	r6, r6, #16
   1dad0:	mov	r0, r6
   1dad4:	mov	r1, r4
   1dad8:	bl	196a8 <main@@Base+0x3920>
   1dadc:	movw	r2, #26990	; 0x696e
   1dae0:	movt	r2, #29299	; 0x7273
   1dae4:	eor	r7, r1, r2
   1dae8:	mov	r8, r0
   1daec:	bfc	r8, #0, #16
   1daf0:	movw	r1, #0
   1daf4:	movt	r1, #26418	; 0x6732
   1daf8:	eor	r1, r8, r1
   1dafc:	orrs	r1, r1, r7
   1db00:	bne	1db68 <main@@Base+0x7de0>
   1db04:	mov	r0, r5
   1db08:	mov	r1, r6
   1db0c:	mov	r2, r4
   1db10:	mov	r3, #6
   1db14:	bl	196ac <main@@Base+0x3924>
   1db18:	mov	r1, r0
   1db1c:	cmp	r6, r0
   1db20:	beq	1dbe0 <main@@Base+0x7e58>
   1db24:	mov	r0, r5
   1db28:	mov	r2, r4
   1db2c:	add	r3, sp, #4
   1db30:	bl	1e45c <main@@Base+0x86d4>
   1db34:	mov	r6, r0
   1db38:	ldr	r7, [sp, #4]
   1db3c:	cmp	r7, #0
   1db40:	beq	1dcb8 <main@@Base+0x7f30>
   1db44:	ldr	r0, [r5]
   1db48:	mov	r1, #1
   1db4c:	b	1dbc0 <main@@Base+0x7e38>
   1db50:	mov	r0, r5
   1db54:	mov	r1, r7
   1db58:	mov	r2, r4
   1db5c:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1db60:	mov	r6, r0
   1db64:	b	1dbd8 <main@@Base+0x7e50>
   1db68:	and	r0, r0, #-16777216	; 0xff000000
   1db6c:	eor	r0, r0, #1728053248	; 0x67000000
   1db70:	orrs	r0, r0, r7
   1db74:	bne	1dbec <main@@Base+0x7e64>
   1db78:	mov	r0, r5
   1db7c:	mov	r1, r6
   1db80:	mov	r2, r4
   1db84:	mov	r3, #5
   1db88:	bl	196ac <main@@Base+0x3924>
   1db8c:	mov	r1, r0
   1db90:	cmp	r6, r0
   1db94:	beq	1dbe8 <main@@Base+0x7e60>
   1db98:	mov	r0, r5
   1db9c:	mov	r2, r4
   1dba0:	add	r3, sp, #4
   1dba4:	bl	1e7a0 <main@@Base+0x8a18>
   1dba8:	mov	r6, r0
   1dbac:	ldr	r7, [sp, #4]
   1dbb0:	cmp	r7, #0
   1dbb4:	beq	1dcb8 <main@@Base+0x7f30>
   1dbb8:	ldr	r0, [r5]
   1dbbc:	mov	r1, #0
   1dbc0:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   1dbc4:	cmp	r0, #0
   1dbc8:	beq	1dcb8 <main@@Base+0x7f30>
   1dbcc:	str	r7, [r0]
   1dbd0:	movw	r8, #25958	; 0x6566
   1dbd4:	movt	r8, #28786	; 0x7072
   1dbd8:	add	r7, sp, #8
   1dbdc:	b	1dc88 <main@@Base+0x7f00>
   1dbe0:	mov	r6, r1
   1dbe4:	b	1dc68 <main@@Base+0x7ee0>
   1dbe8:	mov	r6, r1
   1dbec:	movw	r0, #0
   1dbf0:	movt	r0, #26418	; 0x6732
   1dbf4:	add	r0, r0, #65536	; 0x10000
   1dbf8:	eor	r0, r8, r0
   1dbfc:	orrs	r0, r0, r7
   1dc00:	bne	1dc68 <main@@Base+0x7ee0>
   1dc04:	mov	r0, r5
   1dc08:	mov	r1, r6
   1dc0c:	mov	r2, r4
   1dc10:	mov	r3, #6
   1dc14:	bl	196ac <main@@Base+0x3924>
   1dc18:	mov	r1, r0
   1dc1c:	cmp	r6, r0
   1dc20:	beq	1da64 <main@@Base+0x7cdc>
   1dc24:	mov	r0, r5
   1dc28:	mov	r2, r4
   1dc2c:	add	r3, sp, #4
   1dc30:	bl	1eef0 <main@@Base+0x9168>
   1dc34:	mov	r6, r0
   1dc38:	ldr	r7, [sp, #4]
   1dc3c:	cmp	r7, #0
   1dc40:	movw	r8, #25958	; 0x6566
   1dc44:	movt	r8, #28786	; 0x7072
   1dc48:	beq	1dcb8 <main@@Base+0x7f30>
   1dc4c:	ldr	r0, [r5]
   1dc50:	mov	r1, #2
   1dc54:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   1dc58:	cmp	r0, #0
   1dc5c:	beq	1dcb8 <main@@Base+0x7f30>
   1dc60:	str	r7, [r0]
   1dc64:	b	1dbd8 <main@@Base+0x7e50>
   1dc68:	movw	r8, #25958	; 0x6566
   1dc6c:	movt	r8, #28786	; 0x7072
   1dc70:	add	r7, sp, #8
   1dc74:	mov	r0, r5
   1dc78:	mov	r1, r6
   1dc7c:	mov	r2, r4
   1dc80:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1dc84:	mov	r6, r0
   1dc88:	mov	r0, r5
   1dc8c:	mov	r1, r6
   1dc90:	mov	r2, r4
   1dc94:	mov	r3, r7
   1dc98:	bl	1c578 <main@@Base+0x67f0>
   1dc9c:	mov	r6, r0
   1dca0:	ldr	r0, [sp, #8]
   1dca4:	cmp	r0, #0
   1dca8:	bne	1da78 <main@@Base+0x7cf0>
   1dcac:	ldr	r0, [r5, #20]
   1dcb0:	cmp	r0, #0
   1dcb4:	beq	1dcdc <main@@Base+0x7f54>
   1dcb8:	mov	r0, r5
   1dcbc:	mov	r1, r6
   1dcc0:	mov	r2, r4
   1dcc4:	mov	r3, #33	; 0x21
   1dcc8:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1dccc:	mov	r6, r0
   1dcd0:	mov	r0, r6
   1dcd4:	sub	sp, fp, #28
   1dcd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcdc:	ldr	r0, [r5]
   1dce0:	bl	22de8 <flatcc_builder_end_table@@Base>
   1dce4:	ldr	r1, [sp]
   1dce8:	str	r0, [r1]
   1dcec:	cmp	r0, #0
   1dcf0:	bne	1dcd0 <main@@Base+0x7f48>
   1dcf4:	b	1dcb8 <main@@Base+0x7f30>
   1dcf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcfc:	add	fp, sp, #28
   1dd00:	sub	sp, sp, #36	; 0x24
   1dd04:	mov	r7, r3
   1dd08:	mov	r4, r2
   1dd0c:	mov	r6, r1
   1dd10:	mov	r5, r0
   1dd14:	mov	r0, #0
   1dd18:	str	r0, [r3]
   1dd1c:	ldr	r0, [r5]
   1dd20:	mov	r1, #10
   1dd24:	bl	226c8 <flatcc_builder_start_table@@Base>
   1dd28:	cmp	r0, #0
   1dd2c:	beq	1dd54 <main@@Base+0x7fcc>
   1dd30:	mov	r0, r5
   1dd34:	mov	r1, r6
   1dd38:	mov	r2, r4
   1dd3c:	mov	r3, #33	; 0x21
   1dd40:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1dd44:	mov	r6, r0
   1dd48:	mov	r0, r6
   1dd4c:	sub	sp, fp, #28
   1dd50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd54:	add	r0, sp, #28
   1dd58:	str	r0, [sp]
   1dd5c:	mov	r0, r5
   1dd60:	mov	r1, r6
   1dd64:	mov	r2, r4
   1dd68:	mov	r3, #5
   1dd6c:	bl	27900 <flatcc_json_parser_prepare_unions@@Base>
   1dd70:	cmp	r0, r4
   1dd74:	beq	1dd30 <main@@Base+0x7fa8>
   1dd78:	add	r3, sp, #32
   1dd7c:	mov	r0, r5
   1dd80:	mov	r1, r6
   1dd84:	mov	r2, r4
   1dd88:	bl	195f0 <main@@Base+0x3868>
   1dd8c:	mov	r6, r0
   1dd90:	ldr	r0, [sp, #32]
   1dd94:	cmp	r0, #0
   1dd98:	str	r7, [sp, #20]
   1dd9c:	beq	1e41c <main@@Base+0x8694>
   1dda0:	movw	r8, #24946	; 0x6172
   1dda4:	movt	r8, #25448	; 0x6368
   1dda8:	movw	r9, #29797	; 0x7465
   1ddac:	movt	r9, #24931	; 0x6163
   1ddb0:	movw	r0, #24436	; 0x5f74
   1ddb4:	movt	r0, #29299	; 0x7273
   1ddb8:	movw	sl, #29817	; 0x7479
   1ddbc:	movt	sl, #28511	; 0x6f5f
   1ddc0:	add	r0, r0, #65536	; 0x10000
   1ddc4:	add	r0, r0, #16777216	; 0x1000000
   1ddc8:	str	r0, [sp, #24]
   1ddcc:	add	r7, sp, #32
   1ddd0:	b	1de0c <main@@Base+0x8084>
   1ddd4:	mov	r0, r5
   1ddd8:	mov	r1, r6
   1dddc:	b	1ddf0 <main@@Base+0x8068>
   1dde0:	mov	r0, r5
   1dde4:	mov	r1, r7
   1dde8:	b	1ddf0 <main@@Base+0x8068>
   1ddec:	mov	r0, r5
   1ddf0:	mov	r2, r4
   1ddf4:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1ddf8:	mov	r1, r0
   1ddfc:	movw	r9, #29797	; 0x7465
   1de00:	movt	r9, #24931	; 0x6163
   1de04:	add	r7, sp, #32
   1de08:	b	1e3fc <main@@Base+0x8674>
   1de0c:	mov	r0, r5
   1de10:	mov	r1, r6
   1de14:	mov	r2, r4
   1de18:	bl	19680 <main@@Base+0x38f8>
   1de1c:	mov	r6, r0
   1de20:	mov	r1, r4
   1de24:	bl	196a8 <main@@Base+0x3920>
   1de28:	subs	r2, r0, r9
   1de2c:	sbcs	r2, r1, r8
   1de30:	bcs	1defc <main@@Base+0x8174>
   1de34:	eor	r3, r0, sl
   1de38:	movw	r2, #28005	; 0x6d65
   1de3c:	movt	r2, #25441	; 0x6361
   1de40:	eor	r2, r1, r2
   1de44:	orrs	r3, r3, r2
   1de48:	beq	1e0b4 <main@@Base+0x832c>
   1de4c:	movw	r3, #28265	; 0x6e69
   1de50:	movt	r3, #26479	; 0x676f
   1de54:	eor	r3, r0, r3
   1de58:	movw	r7, #29793	; 0x7461
   1de5c:	movt	r7, #24942	; 0x616e
   1de60:	eor	r1, r1, r7
   1de64:	orrs	r1, r3, r1
   1de68:	bne	1e134 <main@@Base+0x83ac>
   1de6c:	add	r6, r6, #8
   1de70:	mov	r0, r6
   1de74:	mov	r1, r4
   1de78:	bl	196a8 <main@@Base+0x3920>
   1de7c:	ldr	r2, [sp, #24]
   1de80:	eor	r2, r1, r2
   1de84:	bic	r0, r0, #255	; 0xff
   1de88:	movw	r3, #25856	; 0x6500
   1de8c:	movt	r3, #31088	; 0x7970
   1de90:	eor	r0, r0, r3
   1de94:	orrs	r0, r0, r2
   1de98:	bne	1e198 <main@@Base+0x8410>
   1de9c:	mov	r0, r5
   1dea0:	mov	r1, r6
   1dea4:	mov	r2, r4
   1dea8:	mov	r3, #7
   1deac:	bl	196ac <main@@Base+0x3924>
   1deb0:	mov	r1, r0
   1deb4:	cmp	r6, r0
   1deb8:	add	r7, sp, #32
   1debc:	beq	1e3ec <main@@Base+0x8664>
   1dec0:	ldr	r0, [sp, #28]
   1dec4:	mov	r2, #3
   1dec8:	str	r2, [sp]
   1decc:	str	r0, [sp, #4]
   1ded0:	movw	r0, #33440	; 0x82a0
   1ded4:	movt	r0, #4
   1ded8:	str	r0, [sp, #8]
   1dedc:	movw	r0, #62184	; 0xf2e8
   1dee0:	movt	r0, #1
   1dee4:	str	r0, [sp, #12]
   1dee8:	mov	r0, r5
   1deec:	mov	r2, r4
   1def0:	mov	r3, #1
   1def4:	bl	27aec <flatcc_json_parser_union_type@@Base>
   1def8:	b	1e3f8 <main@@Base+0x8670>
   1defc:	movw	r2, #26720	; 0x6860
   1df00:	movt	r2, #24419	; 0x5f63
   1df04:	subs	r2, r2, r0
   1df08:	movw	r2, #26990	; 0x696e
   1df0c:	movt	r2, #28001	; 0x6d61
   1df10:	sbcs	r2, r2, r1
   1df14:	bcc	1dfc4 <main@@Base+0x823c>
   1df18:	eor	r0, r0, r9
   1df1c:	eor	r1, r1, r8
   1df20:	orrs	r0, r0, r1
   1df24:	bne	1e3e0 <main@@Base+0x8658>
   1df28:	add	r6, r6, #8
   1df2c:	mov	r0, r6
   1df30:	mov	r1, r4
   1df34:	bl	196a8 <main@@Base+0x3920>
   1df38:	movw	r2, #24436	; 0x5f74
   1df3c:	movt	r2, #29299	; 0x7273
   1df40:	eor	r2, r1, r2
   1df44:	bic	r0, r0, #255	; 0xff
   1df48:	movw	r3, #25856	; 0x6500
   1df4c:	movt	r3, #31088	; 0x7970
   1df50:	eor	r0, r0, r3
   1df54:	orrs	r0, r0, r2
   1df58:	bne	1e2ac <main@@Base+0x8524>
   1df5c:	mov	r0, r5
   1df60:	mov	r1, r6
   1df64:	mov	r2, r4
   1df68:	mov	r3, #7
   1df6c:	bl	196ac <main@@Base+0x3924>
   1df70:	mov	r1, r0
   1df74:	cmp	r6, r0
   1df78:	beq	1e3ec <main@@Base+0x8664>
   1df7c:	ldr	r0, [sp, #28]
   1df80:	mov	r2, #9
   1df84:	str	r2, [sp]
   1df88:	str	r0, [sp, #4]
   1df8c:	movw	r0, #33472	; 0x82c0
   1df90:	movt	r0, #4
   1df94:	str	r0, [sp, #8]
   1df98:	movw	r0, #62184	; 0xf2e8
   1df9c:	movt	r0, #1
   1dfa0:	str	r0, [sp, #12]
   1dfa4:	movw	r0, #62480	; 0xf410
   1dfa8:	movt	r0, #1
   1dfac:	str	r0, [sp, #16]
   1dfb0:	mov	r0, r5
   1dfb4:	mov	r2, r4
   1dfb8:	mov	r3, #4
   1dfbc:	bl	28098 <flatcc_json_parser_union_type_vector@@Base>
   1dfc0:	b	1e3f8 <main@@Base+0x8670>
   1dfc4:	movw	r2, #26979	; 0x6963
   1dfc8:	movt	r2, #24427	; 0x5f6b
   1dfcc:	eor	r2, r0, r2
   1dfd0:	movw	r3, #25701	; 0x6465
   1dfd4:	movt	r3, #29545	; 0x7369
   1dfd8:	eor	r3, r1, r3
   1dfdc:	orrs	r2, r2, r3
   1dfe0:	beq	1e200 <main@@Base+0x8478>
   1dfe4:	movw	r2, #26721	; 0x6861
   1dfe8:	movt	r2, #24419	; 0x5f63
   1dfec:	eor	r0, r0, r2
   1dff0:	movw	r2, #26990	; 0x696e
   1dff4:	movt	r2, #28001	; 0x6d61
   1dff8:	eor	r1, r1, r2
   1dffc:	orrs	r0, r0, r1
   1e000:	bne	1e3e0 <main@@Base+0x8658>
   1e004:	movw	r9, #25856	; 0x6500
   1e008:	movt	r9, #31088	; 0x7970
   1e00c:	add	r7, r6, #8
   1e010:	mov	r0, r7
   1e014:	mov	r1, r4
   1e018:	bl	196a8 <main@@Base+0x3920>
   1e01c:	movw	r2, #25460	; 0x6374
   1e020:	movt	r2, #29281	; 0x7261
   1e024:	eor	r2, r1, r2
   1e028:	movw	r3, #24436	; 0x5f74
   1e02c:	movt	r3, #25970	; 0x6572
   1e030:	eor	r3, r0, r3
   1e034:	orrs	r2, r3, r2
   1e038:	bne	1e310 <main@@Base+0x8588>
   1e03c:	add	r6, r6, #16
   1e040:	mov	r0, r6
   1e044:	mov	r1, r4
   1e048:	bl	196a8 <main@@Base+0x3920>
   1e04c:	bic	r0, r1, #255	; 0xff
   1e050:	teq	r0, r9
   1e054:	bne	1ddd4 <main@@Base+0x804c>
   1e058:	mov	r0, r5
   1e05c:	mov	r1, r6
   1e060:	mov	r2, r4
   1e064:	mov	r3, #3
   1e068:	bl	196ac <main@@Base+0x3924>
   1e06c:	mov	r1, r0
   1e070:	cmp	r6, r0
   1e074:	beq	1ddec <main@@Base+0x8064>
   1e078:	ldr	r0, [sp, #28]
   1e07c:	mov	r2, #1
   1e080:	str	r2, [sp]
   1e084:	str	r0, [sp, #4]
   1e088:	movw	r0, #33488	; 0x82d0
   1e08c:	movt	r0, #4
   1e090:	str	r0, [sp, #8]
   1e094:	movw	r0, #62184	; 0xf2e8
   1e098:	movt	r0, #1
   1e09c:	str	r0, [sp, #12]
   1e0a0:	mov	r0, r5
   1e0a4:	mov	r2, r4
   1e0a8:	mov	r3, #0
   1e0ac:	bl	27aec <flatcc_json_parser_union_type@@Base>
   1e0b0:	b	1ddf8 <main@@Base+0x8070>
   1e0b4:	add	r6, r6, #8
   1e0b8:	mov	r0, r6
   1e0bc:	mov	r1, r4
   1e0c0:	bl	196a8 <main@@Base+0x3920>
   1e0c4:	bfc	r1, #0, #16
   1e0c8:	movw	r0, #0
   1e0cc:	movt	r0, #28773	; 0x7065
   1e0d0:	teq	r1, r0
   1e0d4:	bne	1e3e0 <main@@Base+0x8658>
   1e0d8:	mov	r0, r5
   1e0dc:	mov	r1, r6
   1e0e0:	mov	r2, r4
   1e0e4:	mov	r3, #2
   1e0e8:	bl	196ac <main@@Base+0x3924>
   1e0ec:	mov	r1, r0
   1e0f0:	cmp	r6, r0
   1e0f4:	beq	1e3ec <main@@Base+0x8664>
   1e0f8:	ldr	r0, [sp, #28]
   1e0fc:	mov	r2, #7
   1e100:	str	r2, [sp]
   1e104:	str	r0, [sp, #4]
   1e108:	movw	r0, #33456	; 0x82b0
   1e10c:	movt	r0, #4
   1e110:	str	r0, [sp, #8]
   1e114:	movw	r0, #62184	; 0xf2e8
   1e118:	movt	r0, #1
   1e11c:	str	r0, [sp, #12]
   1e120:	mov	r0, r5
   1e124:	mov	r2, r4
   1e128:	mov	r3, #3
   1e12c:	bl	27aec <flatcc_json_parser_union_type@@Base>
   1e130:	b	1e3f8 <main@@Base+0x8670>
   1e134:	and	r0, r0, #-16777216	; 0xff000000
   1e138:	eor	r0, r0, #1862270976	; 0x6f000000
   1e13c:	orrs	r0, r0, r2
   1e140:	bne	1e290 <main@@Base+0x8508>
   1e144:	mov	r0, r5
   1e148:	mov	r1, r6
   1e14c:	mov	r2, r4
   1e150:	mov	r3, #5
   1e154:	bl	196ac <main@@Base+0x3924>
   1e158:	mov	r1, r0
   1e15c:	cmp	r6, r0
   1e160:	add	r7, sp, #32
   1e164:	beq	1e3ec <main@@Base+0x8664>
   1e168:	ldr	r0, [sp, #28]
   1e16c:	mov	r2, #7
   1e170:	str	r2, [sp]
   1e174:	str	r0, [sp, #4]
   1e178:	movw	r0, #62184	; 0xf2e8
   1e17c:	movt	r0, #1
   1e180:	str	r0, [sp, #8]
   1e184:	mov	r0, r5
   1e188:	mov	r2, r4
   1e18c:	mov	r3, #3
   1e190:	bl	279c8 <flatcc_json_parser_union@@Base>
   1e194:	b	1e3f8 <main@@Base+0x8670>
   1e198:	bfc	r1, #0, #16
   1e19c:	movw	r0, #0
   1e1a0:	movt	r0, #29556	; 0x7374
   1e1a4:	teq	r1, r0
   1e1a8:	add	r7, sp, #32
   1e1ac:	bne	1e3e0 <main@@Base+0x8658>
   1e1b0:	mov	r0, r5
   1e1b4:	mov	r1, r6
   1e1b8:	mov	r2, r4
   1e1bc:	mov	r3, #2
   1e1c0:	bl	196ac <main@@Base+0x3924>
   1e1c4:	mov	r1, r0
   1e1c8:	cmp	r6, r0
   1e1cc:	beq	1e3ec <main@@Base+0x8664>
   1e1d0:	ldr	r0, [sp, #28]
   1e1d4:	mov	r2, #3
   1e1d8:	str	r2, [sp]
   1e1dc:	str	r0, [sp, #4]
   1e1e0:	movw	r0, #62184	; 0xf2e8
   1e1e4:	movt	r0, #1
   1e1e8:	str	r0, [sp, #8]
   1e1ec:	mov	r0, r5
   1e1f0:	mov	r2, r4
   1e1f4:	mov	r3, #1
   1e1f8:	bl	279c8 <flatcc_json_parser_union@@Base>
   1e1fc:	b	1e3f8 <main@@Base+0x8670>
   1e200:	add	r6, r6, #8
   1e204:	mov	r0, r6
   1e208:	mov	r1, r4
   1e20c:	bl	196a8 <main@@Base+0x3920>
   1e210:	lsr	r0, r0, #16
   1e214:	orr	r0, r0, r1, lsl #16
   1e218:	movw	r2, #28773	; 0x7065
   1e21c:	movt	r2, #29817	; 0x7479
   1e220:	eor	r0, r0, r2
   1e224:	movw	r2, #27487	; 0x6b5f
   1e228:	eor	r2, r2, r1, lsr #16
   1e22c:	orrs	r0, r0, r2
   1e230:	bne	1e384 <main@@Base+0x85fc>
   1e234:	mov	r0, r5
   1e238:	mov	r1, r6
   1e23c:	mov	r2, r4
   1e240:	mov	r3, #6
   1e244:	bl	196ac <main@@Base+0x3924>
   1e248:	mov	r1, r0
   1e24c:	cmp	r6, r0
   1e250:	beq	1e3ec <main@@Base+0x8664>
   1e254:	ldr	r0, [sp, #28]
   1e258:	mov	r2, #5
   1e25c:	str	r2, [sp]
   1e260:	str	r0, [sp, #4]
   1e264:	movw	r0, #33504	; 0x82e0
   1e268:	movt	r0, #4
   1e26c:	str	r0, [sp, #8]
   1e270:	movw	r0, #62184	; 0xf2e8
   1e274:	movt	r0, #1
   1e278:	str	r0, [sp, #12]
   1e27c:	mov	r0, r5
   1e280:	mov	r2, r4
   1e284:	mov	r3, #2
   1e288:	bl	27aec <flatcc_json_parser_union_type@@Base>
   1e28c:	b	1e3f8 <main@@Base+0x8670>
   1e290:	mov	r0, r5
   1e294:	mov	r1, r6
   1e298:	mov	r2, r4
   1e29c:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1e2a0:	mov	r1, r0
   1e2a4:	add	r7, sp, #32
   1e2a8:	b	1e3fc <main@@Base+0x8674>
   1e2ac:	bfc	r1, #0, #16
   1e2b0:	movw	r0, #0
   1e2b4:	movt	r0, #29299	; 0x7273
   1e2b8:	teq	r1, r0
   1e2bc:	bne	1e3e0 <main@@Base+0x8658>
   1e2c0:	mov	r0, r5
   1e2c4:	mov	r1, r6
   1e2c8:	mov	r2, r4
   1e2cc:	mov	r3, #2
   1e2d0:	bl	196ac <main@@Base+0x3924>
   1e2d4:	mov	r1, r0
   1e2d8:	cmp	r6, r0
   1e2dc:	beq	1e3ec <main@@Base+0x8664>
   1e2e0:	ldr	r0, [sp, #28]
   1e2e4:	mov	r2, #9
   1e2e8:	str	r2, [sp]
   1e2ec:	str	r0, [sp, #4]
   1e2f0:	movw	r0, #62184	; 0xf2e8
   1e2f4:	movt	r0, #1
   1e2f8:	str	r0, [sp, #8]
   1e2fc:	mov	r0, r5
   1e300:	mov	r2, r4
   1e304:	mov	r3, #4
   1e308:	bl	27e3c <flatcc_json_parser_union_vector@@Base>
   1e30c:	b	1e3f8 <main@@Base+0x8670>
   1e310:	movw	r2, #29281	; 0x7261
   1e314:	eor	r2, r2, r1, lsr #16
   1e318:	lsr	r0, r0, #16
   1e31c:	orr	r0, r0, r1, lsl #16
   1e320:	movw	r1, #25970	; 0x6572
   1e324:	movt	r1, #25460	; 0x6374
   1e328:	eor	r0, r0, r1
   1e32c:	orrs	r0, r0, r2
   1e330:	bne	1dde0 <main@@Base+0x8058>
   1e334:	mov	r0, r5
   1e338:	mov	r1, r7
   1e33c:	mov	r2, r4
   1e340:	mov	r3, #6
   1e344:	bl	196ac <main@@Base+0x3924>
   1e348:	mov	r1, r0
   1e34c:	cmp	r7, r0
   1e350:	beq	1ddec <main@@Base+0x8064>
   1e354:	ldr	r0, [sp, #28]
   1e358:	mov	r2, #1
   1e35c:	str	r2, [sp]
   1e360:	str	r0, [sp, #4]
   1e364:	movw	r0, #62184	; 0xf2e8
   1e368:	movt	r0, #1
   1e36c:	str	r0, [sp, #8]
   1e370:	mov	r0, r5
   1e374:	mov	r2, r4
   1e378:	mov	r3, #0
   1e37c:	bl	279c8 <flatcc_json_parser_union@@Base>
   1e380:	b	1ddf8 <main@@Base+0x8070>
   1e384:	and	r0, r1, #-16777216	; 0xff000000
   1e388:	teq	r0, #1795162112	; 0x6b000000
   1e38c:	bne	1e3e0 <main@@Base+0x8658>
   1e390:	mov	r0, r5
   1e394:	mov	r1, r6
   1e398:	mov	r2, r4
   1e39c:	mov	r3, #1
   1e3a0:	bl	196ac <main@@Base+0x3924>
   1e3a4:	mov	r1, r0
   1e3a8:	cmp	r6, r0
   1e3ac:	beq	1e3ec <main@@Base+0x8664>
   1e3b0:	ldr	r0, [sp, #28]
   1e3b4:	mov	r2, #5
   1e3b8:	str	r2, [sp]
   1e3bc:	str	r0, [sp, #4]
   1e3c0:	movw	r0, #62184	; 0xf2e8
   1e3c4:	movt	r0, #1
   1e3c8:	str	r0, [sp, #8]
   1e3cc:	mov	r0, r5
   1e3d0:	mov	r2, r4
   1e3d4:	mov	r3, #2
   1e3d8:	bl	279c8 <flatcc_json_parser_union@@Base>
   1e3dc:	b	1e3f8 <main@@Base+0x8670>
   1e3e0:	mov	r0, r5
   1e3e4:	mov	r1, r6
   1e3e8:	b	1e3f0 <main@@Base+0x8668>
   1e3ec:	mov	r0, r5
   1e3f0:	mov	r2, r4
   1e3f4:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1e3f8:	mov	r1, r0
   1e3fc:	mov	r0, r5
   1e400:	mov	r2, r4
   1e404:	mov	r3, r7
   1e408:	bl	1c578 <main@@Base+0x67f0>
   1e40c:	mov	r6, r0
   1e410:	ldr	r0, [sp, #32]
   1e414:	cmp	r0, #0
   1e418:	bne	1de0c <main@@Base+0x8084>
   1e41c:	ldr	r0, [r5, #20]
   1e420:	cmp	r0, #0
   1e424:	bne	1dd30 <main@@Base+0x7fa8>
   1e428:	ldr	r3, [sp, #28]
   1e42c:	mov	r0, r5
   1e430:	mov	r1, r6
   1e434:	mov	r2, r4
   1e438:	bl	2796c <flatcc_json_parser_finalize_unions@@Base>
   1e43c:	mov	r6, r0
   1e440:	ldr	r0, [r5]
   1e444:	bl	22de8 <flatcc_builder_end_table@@Base>
   1e448:	ldr	r1, [sp, #20]
   1e44c:	str	r0, [r1]
   1e450:	cmp	r0, #0
   1e454:	bne	1dd48 <main@@Base+0x7fc0>
   1e458:	b	1dd30 <main@@Base+0x7fa8>
   1e45c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e460:	add	fp, sp, #28
   1e464:	sub	sp, sp, #20
   1e468:	mov	r6, r3
   1e46c:	mov	r4, r2
   1e470:	mov	r9, r1
   1e474:	mov	r5, r0
   1e478:	mov	r0, #0
   1e47c:	str	r0, [r3]
   1e480:	ldr	r0, [r5]
   1e484:	mov	r1, #2
   1e488:	bl	226c8 <flatcc_builder_start_table@@Base>
   1e48c:	cmp	r0, #0
   1e490:	bne	1e760 <main@@Base+0x89d8>
   1e494:	str	r6, [sp, #4]
   1e498:	add	r3, sp, #16
   1e49c:	mov	r0, r5
   1e4a0:	mov	r1, r9
   1e4a4:	mov	r2, r4
   1e4a8:	bl	195f0 <main@@Base+0x3868>
   1e4ac:	mov	r9, r0
   1e4b0:	ldr	r0, [sp, #16]
   1e4b4:	cmp	r0, #0
   1e4b8:	beq	1e754 <main@@Base+0x89cc>
   1e4bc:	movw	sl, #24929	; 0x6161
   1e4c0:	movt	sl, #24929	; 0x6161
   1e4c4:	movw	r7, #25186	; 0x6262
   1e4c8:	movt	r7, #24418	; 0x5f62
   1e4cc:	add	r8, sp, #16
   1e4d0:	mov	r0, r5
   1e4d4:	mov	r1, r9
   1e4d8:	mov	r2, r4
   1e4dc:	bl	19680 <main@@Base+0x38f8>
   1e4e0:	mov	r6, r0
   1e4e4:	mov	r1, r4
   1e4e8:	bl	196a8 <main@@Base+0x3920>
   1e4ec:	eor	r1, r1, sl
   1e4f0:	eor	r0, r0, r7
   1e4f4:	orrs	r0, r0, r1
   1e4f8:	bne	1e608 <main@@Base+0x8880>
   1e4fc:	add	r6, r6, #8
   1e500:	mov	r0, r6
   1e504:	mov	r1, r4
   1e508:	bl	196a8 <main@@Base+0x3920>
   1e50c:	lsr	r2, r0, #8
   1e510:	orr	r2, r2, r1, lsl #24
   1e514:	movw	r3, #28787	; 0x7073
   1e518:	movt	r3, #29797	; 0x7465
   1e51c:	eor	r2, r2, r3
   1e520:	movw	r3, #24435	; 0x5f73
   1e524:	movt	r3, #98	; 0x62
   1e528:	eor	r3, r3, r1, lsr #8
   1e52c:	orrs	r2, r2, r3
   1e530:	bne	1e58c <main@@Base+0x8804>
   1e534:	mov	r0, r5
   1e538:	mov	r1, r6
   1e53c:	mov	r2, r4
   1e540:	mov	r3, #7
   1e544:	bl	196ac <main@@Base+0x3924>
   1e548:	mov	r7, r0
   1e54c:	cmp	r6, r0
   1e550:	beq	1e620 <main@@Base+0x8898>
   1e554:	mov	r0, #0
   1e558:	str	r0, [sp, #12]
   1e55c:	str	r0, [sp, #8]
   1e560:	mov	r0, r5
   1e564:	mov	r1, r7
   1e568:	mov	r2, r4
   1e56c:	add	r9, sp, #8
   1e570:	mov	r3, r9
   1e574:	bl	1bec0 <main@@Base+0x6138>
   1e578:	mov	r6, r0
   1e57c:	cmp	r7, r0
   1e580:	beq	1e638 <main@@Base+0x88b0>
   1e584:	mov	r9, r6
   1e588:	b	1e664 <main@@Base+0x88dc>
   1e58c:	movw	r2, #29791	; 0x745f
   1e590:	movt	r2, #24946	; 0x6172
   1e594:	eor	r0, r0, r2
   1e598:	movw	r2, #29556	; 0x7374
   1e59c:	movt	r2, #25183	; 0x625f
   1e5a0:	eor	r1, r1, r2
   1e5a4:	orrs	r0, r0, r1
   1e5a8:	bne	1e608 <main@@Base+0x8880>
   1e5ac:	mov	r0, r5
   1e5b0:	mov	r1, r6
   1e5b4:	mov	r2, r4
   1e5b8:	mov	r3, #8
   1e5bc:	bl	196ac <main@@Base+0x3924>
   1e5c0:	mov	r7, r0
   1e5c4:	cmp	r6, r0
   1e5c8:	beq	1e620 <main@@Base+0x8898>
   1e5cc:	mov	r0, #0
   1e5d0:	str	r0, [sp, #8]
   1e5d4:	mov	r0, r5
   1e5d8:	mov	r1, r7
   1e5dc:	mov	r2, r4
   1e5e0:	add	r9, sp, #8
   1e5e4:	mov	r3, r9
   1e5e8:	bl	1c0a4 <main@@Base+0x631c>
   1e5ec:	mov	r6, r0
   1e5f0:	cmp	r7, r0
   1e5f4:	beq	1e6e0 <main@@Base+0x8958>
   1e5f8:	mov	r9, r6
   1e5fc:	movw	r7, #25186	; 0x6262
   1e600:	movt	r7, #24418	; 0x5f62
   1e604:	b	1e714 <main@@Base+0x898c>
   1e608:	mov	r0, r5
   1e60c:	mov	r1, r6
   1e610:	mov	r2, r4
   1e614:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1e618:	mov	r9, r0
   1e61c:	b	1e6b8 <main@@Base+0x8930>
   1e620:	mov	r0, r5
   1e624:	mov	r1, r7
   1e628:	mov	r2, r4
   1e62c:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1e630:	mov	r9, r0
   1e634:	b	1e6b0 <main@@Base+0x8928>
   1e638:	str	r9, [sp]
   1e63c:	mov	r0, r5
   1e640:	mov	r1, r6
   1e644:	mov	r2, r4
   1e648:	movw	r3, #33320	; 0x8228
   1e64c:	movt	r3, #4
   1e650:	bl	1bf54 <main@@Base+0x61cc>
   1e654:	mov	r9, r0
   1e658:	cmp	r0, r6
   1e65c:	cmpne	r9, r4
   1e660:	beq	1e760 <main@@Base+0x89d8>
   1e664:	mov	r7, sl
   1e668:	ldr	r6, [sp, #8]
   1e66c:	ldr	sl, [sp, #12]
   1e670:	orrs	r0, r6, sl
   1e674:	bne	1e684 <main@@Base+0x88fc>
   1e678:	ldrb	r0, [r5, #8]
   1e67c:	tst	r0, #2
   1e680:	beq	1e6ac <main@@Base+0x8924>
   1e684:	ldr	r0, [r5]
   1e688:	mov	r1, #0
   1e68c:	mov	r2, #8
   1e690:	mov	r3, #8
   1e694:	bl	234dc <flatcc_builder_table_add@@Base>
   1e698:	cmp	r0, #0
   1e69c:	beq	1e760 <main@@Base+0x89d8>
   1e6a0:	mov	r2, r6
   1e6a4:	mov	r3, sl
   1e6a8:	bl	1c07c <main@@Base+0x62f4>
   1e6ac:	mov	sl, r7
   1e6b0:	movw	r7, #25186	; 0x6262
   1e6b4:	movt	r7, #24418	; 0x5f62
   1e6b8:	mov	r0, r5
   1e6bc:	mov	r1, r9
   1e6c0:	mov	r2, r4
   1e6c4:	mov	r3, r8
   1e6c8:	bl	1c578 <main@@Base+0x67f0>
   1e6cc:	mov	r9, r0
   1e6d0:	ldr	r0, [sp, #16]
   1e6d4:	cmp	r0, #0
   1e6d8:	bne	1e4d0 <main@@Base+0x8748>
   1e6dc:	b	1e754 <main@@Base+0x89cc>
   1e6e0:	str	r9, [sp]
   1e6e4:	mov	r0, r5
   1e6e8:	mov	r1, r6
   1e6ec:	mov	r2, r4
   1e6f0:	movw	r3, #33332	; 0x8234
   1e6f4:	movt	r3, #4
   1e6f8:	bl	1c134 <main@@Base+0x63ac>
   1e6fc:	mov	r9, r0
   1e700:	cmp	r0, r6
   1e704:	movw	r7, #25186	; 0x6262
   1e708:	movt	r7, #24418	; 0x5f62
   1e70c:	cmpne	r9, r4
   1e710:	beq	1e760 <main@@Base+0x89d8>
   1e714:	ldr	r6, [sp, #8]
   1e718:	cmp	r6, #0
   1e71c:	bne	1e72c <main@@Base+0x89a4>
   1e720:	ldrb	r0, [r5, #8]
   1e724:	tst	r0, #2
   1e728:	beq	1e6b8 <main@@Base+0x8930>
   1e72c:	ldr	r0, [r5]
   1e730:	mov	r1, #1
   1e734:	mov	r2, #4
   1e738:	mov	r3, #4
   1e73c:	bl	234dc <flatcc_builder_table_add@@Base>
   1e740:	cmp	r0, #0
   1e744:	beq	1e760 <main@@Base+0x89d8>
   1e748:	mov	r1, r6
   1e74c:	bl	1c24c <main@@Base+0x64c4>
   1e750:	b	1e6b8 <main@@Base+0x8930>
   1e754:	ldr	r0, [r5, #20]
   1e758:	cmp	r0, #0
   1e75c:	beq	1e784 <main@@Base+0x89fc>
   1e760:	mov	r0, r5
   1e764:	mov	r1, r9
   1e768:	mov	r2, r4
   1e76c:	mov	r3, #33	; 0x21
   1e770:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1e774:	mov	r9, r0
   1e778:	mov	r0, r9
   1e77c:	sub	sp, fp, #28
   1e780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e784:	ldr	r0, [r5]
   1e788:	bl	22de8 <flatcc_builder_end_table@@Base>
   1e78c:	ldr	r1, [sp, #4]
   1e790:	str	r0, [r1]
   1e794:	cmp	r0, #0
   1e798:	bne	1e778 <main@@Base+0x89f0>
   1e79c:	b	1e760 <main@@Base+0x89d8>
   1e7a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7a4:	add	fp, sp, #28
   1e7a8:	sub	sp, sp, #44	; 0x2c
   1e7ac:	mov	r5, r3
   1e7b0:	mov	r4, r2
   1e7b4:	mov	r8, r1
   1e7b8:	mov	sl, r0
   1e7bc:	mov	r0, #0
   1e7c0:	str	r0, [r3]
   1e7c4:	ldr	r0, [sl]
   1e7c8:	mov	r1, #9
   1e7cc:	bl	226c8 <flatcc_builder_start_table@@Base>
   1e7d0:	cmp	r0, #0
   1e7d4:	beq	1e7fc <main@@Base+0x8a74>
   1e7d8:	mov	r0, sl
   1e7dc:	mov	r1, r8
   1e7e0:	mov	r2, r4
   1e7e4:	mov	r3, #33	; 0x21
   1e7e8:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1e7ec:	mov	r8, r0
   1e7f0:	mov	r0, r8
   1e7f4:	sub	sp, fp, #28
   1e7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7fc:	str	r5, [sp, #8]
   1e800:	sub	r3, fp, #32
   1e804:	mov	r0, sl
   1e808:	mov	r1, r8
   1e80c:	mov	r2, r4
   1e810:	bl	195f0 <main@@Base+0x3868>
   1e814:	mov	r8, r0
   1e818:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e81c:	cmp	r0, #0
   1e820:	beq	1eec8 <main@@Base+0x9140>
   1e824:	movw	r1, #24929	; 0x6161
   1e828:	movt	r1, #24929	; 0x6161
   1e82c:	add	r9, sp, #24
   1e830:	movw	r0, #257	; 0x101
   1e834:	movt	r0, #257	; 0x101
   1e838:	add	r0, r1, r0
   1e83c:	str	r0, [sp, #16]
   1e840:	movw	r0, #514	; 0x202
   1e844:	movt	r0, #514	; 0x202
   1e848:	add	r0, r1, r0
   1e84c:	str	r0, [sp, #20]
   1e850:	movw	r0, #771	; 0x303
   1e854:	movt	r0, #771	; 0x303
   1e858:	add	r0, r1, r0
   1e85c:	str	r0, [sp, #12]
   1e860:	mov	r0, sl
   1e864:	mov	r1, r8
   1e868:	mov	r2, r4
   1e86c:	bl	19680 <main@@Base+0x38f8>
   1e870:	mov	r7, r0
   1e874:	mov	r1, r4
   1e878:	bl	196a8 <main@@Base+0x3920>
   1e87c:	mov	r6, r1
   1e880:	movw	r1, #25442	; 0x6362
   1e884:	movt	r1, #25443	; 0x6363
   1e888:	cmp	r6, r1
   1e88c:	bhi	1e91c <main@@Base+0x8b94>
   1e890:	movw	r1, #13108	; 0x3334
   1e894:	movt	r1, #12594	; 0x3132
   1e898:	eor	r5, r0, r1
   1e89c:	movw	r1, #24929	; 0x6161
   1e8a0:	movt	r1, #24929	; 0x6161
   1e8a4:	eor	r0, r6, r1
   1e8a8:	orrs	r0, r5, r0
   1e8ac:	bne	1e98c <main@@Base+0x8c04>
   1e8b0:	add	r6, r7, #8
   1e8b4:	mov	r0, r6
   1e8b8:	mov	r1, r4
   1e8bc:	bl	196a8 <main@@Base+0x3920>
   1e8c0:	and	r0, r1, #-16777216	; 0xff000000
   1e8c4:	teq	r0, #889192448	; 0x35000000
   1e8c8:	bne	1eca8 <main@@Base+0x8f20>
   1e8cc:	mov	r0, sl
   1e8d0:	mov	r1, r6
   1e8d4:	mov	r2, r4
   1e8d8:	mov	r3, #1
   1e8dc:	bl	196ac <main@@Base+0x3924>
   1e8e0:	mov	r7, r0
   1e8e4:	cmp	r6, r0
   1e8e8:	beq	1ecb4 <main@@Base+0x8f2c>
   1e8ec:	mov	r0, #0
   1e8f0:	str	r0, [sp, #24]
   1e8f4:	mov	r0, sl
   1e8f8:	mov	r1, r7
   1e8fc:	mov	r2, r4
   1e900:	mov	r3, r9
   1e904:	bl	1c0a4 <main@@Base+0x631c>
   1e908:	mov	r6, r0
   1e90c:	cmp	r7, r0
   1e910:	beq	1eccc <main@@Base+0x8f44>
   1e914:	mov	r8, r6
   1e918:	b	1ecf8 <main@@Base+0x8f70>
   1e91c:	movw	r1, #13108	; 0x3334
   1e920:	movt	r1, #12594	; 0x3132
   1e924:	eor	r5, r0, r1
   1e928:	ldr	r0, [sp, #20]
   1e92c:	eor	r0, r6, r0
   1e930:	orrs	r0, r5, r0
   1e934:	bne	1e9e0 <main@@Base+0x8c58>
   1e938:	mov	r0, sl
   1e93c:	mov	r1, r7
   1e940:	mov	r2, r4
   1e944:	mov	r3, #8
   1e948:	bl	196ac <main@@Base+0x3924>
   1e94c:	mov	r6, r0
   1e950:	cmp	r7, r0
   1e954:	beq	1ea3c <main@@Base+0x8cb4>
   1e958:	mov	r0, #0
   1e95c:	str	r0, [sp, #28]
   1e960:	str	r0, [sp, #24]
   1e964:	mov	r0, sl
   1e968:	mov	r1, r6
   1e96c:	mov	r2, r4
   1e970:	mov	r3, r9
   1e974:	bl	1bec0 <main@@Base+0x6138>
   1e978:	mov	r7, r0
   1e97c:	cmp	r6, r0
   1e980:	beq	1eaa8 <main@@Base+0x8d20>
   1e984:	mov	r8, r7
   1e988:	b	1ead4 <main@@Base+0x8d4c>
   1e98c:	teq	r6, r1
   1e990:	bne	1eb00 <main@@Base+0x8d78>
   1e994:	mov	r0, sl
   1e998:	mov	r1, r7
   1e99c:	mov	r2, r4
   1e9a0:	mov	r3, #4
   1e9a4:	bl	196ac <main@@Base+0x3924>
   1e9a8:	mov	r1, r0
   1e9ac:	cmp	r7, r0
   1e9b0:	beq	1eafc <main@@Base+0x8d74>
   1e9b4:	mov	r0, sl
   1e9b8:	mov	r2, r4
   1e9bc:	add	r3, sp, #36	; 0x24
   1e9c0:	bl	277b4 <flatcc_json_parser_build_string@@Base>
   1e9c4:	mov	r8, r0
   1e9c8:	ldr	r0, [sp, #36]	; 0x24
   1e9cc:	cmp	r0, #0
   1e9d0:	beq	1e7d8 <main@@Base+0x8a50>
   1e9d4:	ldr	r0, [sl]
   1e9d8:	mov	r1, #0
   1e9dc:	b	1ebbc <main@@Base+0x8e34>
   1e9e0:	movw	r0, #25443	; 0x6363
   1e9e4:	movt	r0, #25443	; 0x6363
   1e9e8:	teq	r6, r0
   1e9ec:	bne	1ebd8 <main@@Base+0x8e50>
   1e9f0:	mov	r0, sl
   1e9f4:	mov	r1, r7
   1e9f8:	mov	r2, r4
   1e9fc:	mov	r3, #4
   1ea00:	bl	196ac <main@@Base+0x3924>
   1ea04:	mov	r1, r0
   1ea08:	cmp	r7, r0
   1ea0c:	beq	1ebd4 <main@@Base+0x8e4c>
   1ea10:	mov	r0, sl
   1ea14:	mov	r2, r4
   1ea18:	add	r3, sp, #36	; 0x24
   1ea1c:	bl	277b4 <flatcc_json_parser_build_string@@Base>
   1ea20:	mov	r8, r0
   1ea24:	ldr	r0, [sp, #36]	; 0x24
   1ea28:	cmp	r0, #0
   1ea2c:	beq	1e7d8 <main@@Base+0x8a50>
   1ea30:	ldr	r0, [sl]
   1ea34:	mov	r1, #4
   1ea38:	b	1ebbc <main@@Base+0x8e34>
   1ea3c:	add	r6, r6, #8
   1ea40:	mov	r0, r6
   1ea44:	mov	r1, r4
   1ea48:	bl	196a8 <main@@Base+0x3920>
   1ea4c:	and	r0, r1, #-16777216	; 0xff000000
   1ea50:	teq	r0, #889192448	; 0x35000000
   1ea54:	bne	1eca8 <main@@Base+0x8f20>
   1ea58:	mov	r0, sl
   1ea5c:	mov	r1, r6
   1ea60:	mov	r2, r4
   1ea64:	mov	r3, #1
   1ea68:	bl	196ac <main@@Base+0x3924>
   1ea6c:	mov	r7, r0
   1ea70:	cmp	r6, r0
   1ea74:	beq	1ecb4 <main@@Base+0x8f2c>
   1ea78:	mov	r0, #0
   1ea7c:	str	r0, [sp, #24]
   1ea80:	mov	r0, sl
   1ea84:	mov	r1, r7
   1ea88:	mov	r2, r4
   1ea8c:	mov	r3, r9
   1ea90:	bl	1c0a4 <main@@Base+0x631c>
   1ea94:	mov	r6, r0
   1ea98:	cmp	r7, r0
   1ea9c:	beq	1edec <main@@Base+0x9064>
   1eaa0:	mov	r8, r6
   1eaa4:	b	1ee18 <main@@Base+0x9090>
   1eaa8:	str	r9, [sp]
   1eaac:	mov	r0, sl
   1eab0:	mov	r1, r7
   1eab4:	mov	r2, r4
   1eab8:	movw	r3, #33368	; 0x8258
   1eabc:	movt	r3, #4
   1eac0:	bl	1bf54 <main@@Base+0x61cc>
   1eac4:	mov	r8, r0
   1eac8:	cmp	r0, r7
   1eacc:	cmpne	r8, r4
   1ead0:	beq	1e7d8 <main@@Base+0x8a50>
   1ead4:	ldr	r6, [sp, #24]
   1ead8:	ldr	r7, [sp, #28]
   1eadc:	orrs	r0, r6, r7
   1eae0:	bne	1eaf0 <main@@Base+0x8d68>
   1eae4:	ldrb	r0, [sl, #8]
   1eae8:	tst	r0, #2
   1eaec:	beq	1eea4 <main@@Base+0x911c>
   1eaf0:	ldr	r0, [sl]
   1eaf4:	mov	r1, #5
   1eaf8:	b	1edc0 <main@@Base+0x9038>
   1eafc:	mov	r7, r1
   1eb00:	ldr	r0, [sp, #16]
   1eb04:	eor	r0, r6, r0
   1eb08:	orrs	r0, r5, r0
   1eb0c:	bne	1eb64 <main@@Base+0x8ddc>
   1eb10:	mov	r0, sl
   1eb14:	mov	r1, r7
   1eb18:	mov	r2, r4
   1eb1c:	mov	r3, #8
   1eb20:	bl	196ac <main@@Base+0x3924>
   1eb24:	mov	r6, r0
   1eb28:	cmp	r7, r0
   1eb2c:	beq	1eca8 <main@@Base+0x8f20>
   1eb30:	mov	r0, #0
   1eb34:	str	r0, [sp, #28]
   1eb38:	str	r0, [sp, #24]
   1eb3c:	mov	r0, sl
   1eb40:	mov	r1, r6
   1eb44:	mov	r2, r4
   1eb48:	mov	r3, r9
   1eb4c:	bl	1bec0 <main@@Base+0x6138>
   1eb50:	mov	r7, r0
   1eb54:	cmp	r6, r0
   1eb58:	beq	1ed1c <main@@Base+0x8f94>
   1eb5c:	mov	r8, r7
   1eb60:	b	1ed48 <main@@Base+0x8fc0>
   1eb64:	movw	r0, #25186	; 0x6262
   1eb68:	movt	r0, #25186	; 0x6262
   1eb6c:	teq	r6, r0
   1eb70:	bne	1ecb4 <main@@Base+0x8f2c>
   1eb74:	mov	r0, sl
   1eb78:	mov	r1, r7
   1eb7c:	mov	r2, r4
   1eb80:	mov	r3, #4
   1eb84:	bl	196ac <main@@Base+0x3924>
   1eb88:	mov	r1, r0
   1eb8c:	cmp	r7, r0
   1eb90:	beq	1ede4 <main@@Base+0x905c>
   1eb94:	mov	r0, sl
   1eb98:	mov	r2, r4
   1eb9c:	add	r3, sp, #36	; 0x24
   1eba0:	bl	277b4 <flatcc_json_parser_build_string@@Base>
   1eba4:	mov	r8, r0
   1eba8:	ldr	r0, [sp, #36]	; 0x24
   1ebac:	cmp	r0, #0
   1ebb0:	beq	1e7d8 <main@@Base+0x8a50>
   1ebb4:	ldr	r0, [sl]
   1ebb8:	mov	r1, #2
   1ebbc:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   1ebc0:	cmp	r0, #0
   1ebc4:	beq	1e7d8 <main@@Base+0x8a50>
   1ebc8:	ldr	r1, [sp, #36]	; 0x24
   1ebcc:	str	r1, [r0]
   1ebd0:	b	1eea4 <main@@Base+0x911c>
   1ebd4:	mov	r7, r1
   1ebd8:	ldr	r0, [sp, #12]
   1ebdc:	eor	r0, r6, r0
   1ebe0:	orrs	r0, r5, r0
   1ebe4:	bne	1ecb4 <main@@Base+0x8f2c>
   1ebe8:	mov	r0, sl
   1ebec:	mov	r1, r7
   1ebf0:	mov	r2, r4
   1ebf4:	mov	r3, #8
   1ebf8:	bl	196ac <main@@Base+0x3924>
   1ebfc:	mov	r6, r0
   1ec00:	cmp	r7, r0
   1ec04:	beq	1ec3c <main@@Base+0x8eb4>
   1ec08:	mov	r0, #0
   1ec0c:	str	r0, [sp, #28]
   1ec10:	str	r0, [sp, #24]
   1ec14:	mov	r0, sl
   1ec18:	mov	r1, r6
   1ec1c:	mov	r2, r4
   1ec20:	mov	r3, r9
   1ec24:	bl	1bec0 <main@@Base+0x6138>
   1ec28:	mov	r7, r0
   1ec2c:	cmp	r6, r0
   1ec30:	beq	1ed70 <main@@Base+0x8fe8>
   1ec34:	mov	r8, r7
   1ec38:	b	1ed9c <main@@Base+0x9014>
   1ec3c:	add	r6, r6, #8
   1ec40:	mov	r0, r6
   1ec44:	mov	r1, r4
   1ec48:	bl	196a8 <main@@Base+0x3920>
   1ec4c:	and	r0, r1, #-16777216	; 0xff000000
   1ec50:	teq	r0, #889192448	; 0x35000000
   1ec54:	bne	1eca8 <main@@Base+0x8f20>
   1ec58:	mov	r0, sl
   1ec5c:	mov	r1, r6
   1ec60:	mov	r2, r4
   1ec64:	mov	r3, #1
   1ec68:	bl	196ac <main@@Base+0x3924>
   1ec6c:	mov	r7, r0
   1ec70:	cmp	r6, r0
   1ec74:	beq	1ecb4 <main@@Base+0x8f2c>
   1ec78:	mov	r0, #0
   1ec7c:	str	r0, [sp, #24]
   1ec80:	mov	r0, sl
   1ec84:	mov	r1, r7
   1ec88:	mov	r2, r4
   1ec8c:	mov	r3, r9
   1ec90:	bl	1c0a4 <main@@Base+0x631c>
   1ec94:	mov	r6, r0
   1ec98:	cmp	r7, r0
   1ec9c:	beq	1ee3c <main@@Base+0x90b4>
   1eca0:	mov	r8, r6
   1eca4:	b	1ee68 <main@@Base+0x90e0>
   1eca8:	mov	r0, sl
   1ecac:	mov	r1, r6
   1ecb0:	b	1ecbc <main@@Base+0x8f34>
   1ecb4:	mov	r0, sl
   1ecb8:	mov	r1, r7
   1ecbc:	mov	r2, r4
   1ecc0:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1ecc4:	mov	r8, r0
   1ecc8:	b	1eea4 <main@@Base+0x911c>
   1eccc:	str	r9, [sp]
   1ecd0:	mov	r0, sl
   1ecd4:	mov	r1, r6
   1ecd8:	mov	r2, r4
   1ecdc:	movw	r3, #33344	; 0x8240
   1ece0:	movt	r3, #4
   1ece4:	bl	1c134 <main@@Base+0x63ac>
   1ece8:	mov	r8, r0
   1ecec:	cmp	r0, r6
   1ecf0:	cmpne	r8, r4
   1ecf4:	beq	1e7d8 <main@@Base+0x8a50>
   1ecf8:	ldr	r6, [sp, #24]
   1ecfc:	cmp	r6, #0
   1ed00:	bne	1ed10 <main@@Base+0x8f88>
   1ed04:	ldrb	r0, [sl, #8]
   1ed08:	tst	r0, #2
   1ed0c:	beq	1eea4 <main@@Base+0x911c>
   1ed10:	ldr	r0, [sl]
   1ed14:	mov	r1, #1
   1ed18:	b	1ee88 <main@@Base+0x9100>
   1ed1c:	str	r9, [sp]
   1ed20:	mov	r0, sl
   1ed24:	mov	r1, r7
   1ed28:	mov	r2, r4
   1ed2c:	movw	r3, #33356	; 0x824c
   1ed30:	movt	r3, #4
   1ed34:	bl	1bf54 <main@@Base+0x61cc>
   1ed38:	mov	r8, r0
   1ed3c:	cmp	r0, r7
   1ed40:	cmpne	r8, r4
   1ed44:	beq	1e7d8 <main@@Base+0x8a50>
   1ed48:	ldr	r6, [sp, #24]
   1ed4c:	ldr	r7, [sp, #28]
   1ed50:	orrs	r0, r6, r7
   1ed54:	bne	1ed64 <main@@Base+0x8fdc>
   1ed58:	ldrb	r0, [sl, #8]
   1ed5c:	tst	r0, #2
   1ed60:	beq	1eea4 <main@@Base+0x911c>
   1ed64:	ldr	r0, [sl]
   1ed68:	mov	r1, #3
   1ed6c:	b	1edc0 <main@@Base+0x9038>
   1ed70:	str	r9, [sp]
   1ed74:	mov	r0, sl
   1ed78:	mov	r1, r7
   1ed7c:	mov	r2, r4
   1ed80:	movw	r3, #33392	; 0x8270
   1ed84:	movt	r3, #4
   1ed88:	bl	1bf54 <main@@Base+0x61cc>
   1ed8c:	mov	r8, r0
   1ed90:	cmp	r0, r7
   1ed94:	cmpne	r8, r4
   1ed98:	beq	1e7d8 <main@@Base+0x8a50>
   1ed9c:	ldr	r6, [sp, #24]
   1eda0:	ldr	r7, [sp, #28]
   1eda4:	orrs	r0, r6, r7
   1eda8:	bne	1edb8 <main@@Base+0x9030>
   1edac:	ldrb	r0, [sl, #8]
   1edb0:	tst	r0, #2
   1edb4:	beq	1eea4 <main@@Base+0x911c>
   1edb8:	ldr	r0, [sl]
   1edbc:	mov	r1, #7
   1edc0:	mov	r2, #8
   1edc4:	mov	r3, #8
   1edc8:	bl	234dc <flatcc_builder_table_add@@Base>
   1edcc:	cmp	r0, #0
   1edd0:	beq	1e7d8 <main@@Base+0x8a50>
   1edd4:	mov	r2, r6
   1edd8:	mov	r3, r7
   1eddc:	bl	1c07c <main@@Base+0x62f4>
   1ede0:	b	1eea4 <main@@Base+0x911c>
   1ede4:	mov	r0, sl
   1ede8:	b	1ecbc <main@@Base+0x8f34>
   1edec:	str	r9, [sp]
   1edf0:	mov	r0, sl
   1edf4:	mov	r1, r6
   1edf8:	mov	r2, r4
   1edfc:	movw	r3, #33380	; 0x8264
   1ee00:	movt	r3, #4
   1ee04:	bl	1c134 <main@@Base+0x63ac>
   1ee08:	mov	r8, r0
   1ee0c:	cmp	r0, r6
   1ee10:	cmpne	r8, r4
   1ee14:	beq	1e7d8 <main@@Base+0x8a50>
   1ee18:	ldr	r6, [sp, #24]
   1ee1c:	cmp	r6, #0
   1ee20:	bne	1ee30 <main@@Base+0x90a8>
   1ee24:	ldrb	r0, [sl, #8]
   1ee28:	tst	r0, #2
   1ee2c:	beq	1eea4 <main@@Base+0x911c>
   1ee30:	ldr	r0, [sl]
   1ee34:	mov	r1, #6
   1ee38:	b	1ee88 <main@@Base+0x9100>
   1ee3c:	str	r9, [sp]
   1ee40:	mov	r0, sl
   1ee44:	mov	r1, r6
   1ee48:	mov	r2, r4
   1ee4c:	movw	r3, #33404	; 0x827c
   1ee50:	movt	r3, #4
   1ee54:	bl	1c134 <main@@Base+0x63ac>
   1ee58:	mov	r8, r0
   1ee5c:	cmp	r0, r6
   1ee60:	cmpne	r8, r4
   1ee64:	beq	1e7d8 <main@@Base+0x8a50>
   1ee68:	ldr	r6, [sp, #24]
   1ee6c:	cmp	r6, #0
   1ee70:	bne	1ee80 <main@@Base+0x90f8>
   1ee74:	ldrb	r0, [sl, #8]
   1ee78:	tst	r0, #2
   1ee7c:	beq	1eea4 <main@@Base+0x911c>
   1ee80:	ldr	r0, [sl]
   1ee84:	mov	r1, #8
   1ee88:	mov	r2, #4
   1ee8c:	mov	r3, #4
   1ee90:	bl	234dc <flatcc_builder_table_add@@Base>
   1ee94:	cmp	r0, #0
   1ee98:	beq	1e7d8 <main@@Base+0x8a50>
   1ee9c:	mov	r1, r6
   1eea0:	bl	1c24c <main@@Base+0x64c4>
   1eea4:	mov	r0, sl
   1eea8:	mov	r1, r8
   1eeac:	mov	r2, r4
   1eeb0:	sub	r3, fp, #32
   1eeb4:	bl	1c578 <main@@Base+0x67f0>
   1eeb8:	mov	r8, r0
   1eebc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1eec0:	cmp	r0, #0
   1eec4:	bne	1e860 <main@@Base+0x8ad8>
   1eec8:	ldr	r0, [sl, #20]
   1eecc:	cmp	r0, #0
   1eed0:	bne	1e7d8 <main@@Base+0x8a50>
   1eed4:	ldr	r0, [sl]
   1eed8:	bl	22de8 <flatcc_builder_end_table@@Base>
   1eedc:	ldr	r1, [sp, #8]
   1eee0:	str	r0, [r1]
   1eee4:	cmp	r0, #0
   1eee8:	bne	1e7f0 <main@@Base+0x8a68>
   1eeec:	b	1e7d8 <main@@Base+0x8a50>
   1eef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eef4:	add	fp, sp, #28
   1eef8:	sub	sp, sp, #20
   1eefc:	mov	r6, r3
   1ef00:	mov	r4, r2
   1ef04:	mov	r8, r1
   1ef08:	mov	r5, r0
   1ef0c:	mov	r0, #0
   1ef10:	str	r0, [r3]
   1ef14:	ldr	r0, [r5]
   1ef18:	mov	r1, #2
   1ef1c:	bl	226c8 <flatcc_builder_start_table@@Base>
   1ef20:	cmp	r0, #0
   1ef24:	beq	1ef4c <main@@Base+0x91c4>
   1ef28:	mov	r0, r5
   1ef2c:	mov	r1, r8
   1ef30:	mov	r2, r4
   1ef34:	mov	r3, #33	; 0x21
   1ef38:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1ef3c:	mov	r8, r0
   1ef40:	mov	r0, r8
   1ef44:	sub	sp, fp, #28
   1ef48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef4c:	str	r6, [sp, #4]
   1ef50:	add	r3, sp, #16
   1ef54:	mov	r0, r5
   1ef58:	mov	r1, r8
   1ef5c:	mov	r2, r4
   1ef60:	bl	195f0 <main@@Base+0x3868>
   1ef64:	mov	r8, r0
   1ef68:	ldr	r0, [sp, #16]
   1ef6c:	cmp	r0, #0
   1ef70:	beq	1f228 <main@@Base+0x94a0>
   1ef74:	movw	r9, #24929	; 0x6161
   1ef78:	movt	r9, #24929	; 0x6161
   1ef7c:	movw	sl, #25186	; 0x6262
   1ef80:	movt	sl, #24418	; 0x5f62
   1ef84:	add	r6, sp, #16
   1ef88:	b	1f06c <main@@Base+0x92e4>
   1ef8c:	str	r8, [sp]
   1ef90:	mov	r0, r5
   1ef94:	mov	r1, r6
   1ef98:	mov	r2, r4
   1ef9c:	movw	r3, #33416	; 0x8288
   1efa0:	movt	r3, #4
   1efa4:	bl	1c134 <main@@Base+0x63ac>
   1efa8:	mov	r8, r0
   1efac:	cmp	r0, r6
   1efb0:	cmpne	r8, r4
   1efb4:	beq	1ef28 <main@@Base+0x91a0>
   1efb8:	ldr	r6, [sp, #8]
   1efbc:	cmp	r6, #0
   1efc0:	bne	1efd0 <main@@Base+0x9248>
   1efc4:	ldrb	r0, [r5, #8]
   1efc8:	tst	r0, #2
   1efcc:	beq	1f200 <main@@Base+0x9478>
   1efd0:	ldr	r0, [r5]
   1efd4:	mov	r1, #1
   1efd8:	mov	r2, #4
   1efdc:	mov	r3, #4
   1efe0:	bl	234dc <flatcc_builder_table_add@@Base>
   1efe4:	cmp	r0, #0
   1efe8:	beq	1ef28 <main@@Base+0x91a0>
   1efec:	mov	r1, r6
   1eff0:	bl	1c24c <main@@Base+0x64c4>
   1eff4:	b	1f200 <main@@Base+0x9478>
   1eff8:	str	r8, [sp]
   1effc:	mov	r0, r5
   1f000:	mov	r1, r6
   1f004:	mov	r2, r4
   1f008:	movw	r3, #33428	; 0x8294
   1f00c:	movt	r3, #4
   1f010:	bl	1bf54 <main@@Base+0x61cc>
   1f014:	mov	r8, r0
   1f018:	cmp	r0, r6
   1f01c:	cmpne	r8, r4
   1f020:	beq	1ef28 <main@@Base+0x91a0>
   1f024:	ldr	r6, [sp, #8]
   1f028:	ldr	r7, [sp, #12]
   1f02c:	orrs	r0, r6, r7
   1f030:	bne	1f040 <main@@Base+0x92b8>
   1f034:	ldrb	r0, [r5, #8]
   1f038:	tst	r0, #2
   1f03c:	beq	1f200 <main@@Base+0x9478>
   1f040:	ldr	r0, [r5]
   1f044:	mov	r1, #0
   1f048:	mov	r2, #8
   1f04c:	mov	r3, #8
   1f050:	bl	234dc <flatcc_builder_table_add@@Base>
   1f054:	cmp	r0, #0
   1f058:	beq	1ef28 <main@@Base+0x91a0>
   1f05c:	mov	r2, r6
   1f060:	mov	r3, r7
   1f064:	bl	1c07c <main@@Base+0x62f4>
   1f068:	b	1f200 <main@@Base+0x9478>
   1f06c:	mov	r0, r5
   1f070:	mov	r1, r8
   1f074:	mov	r2, r4
   1f078:	bl	19680 <main@@Base+0x38f8>
   1f07c:	mov	r7, r0
   1f080:	mov	r1, r4
   1f084:	bl	196a8 <main@@Base+0x3920>
   1f088:	eor	r1, r1, r9
   1f08c:	eor	r0, r0, sl
   1f090:	orrs	r0, r0, r1
   1f094:	bne	1f148 <main@@Base+0x93c0>
   1f098:	add	r6, r7, #8
   1f09c:	mov	r0, r6
   1f0a0:	mov	r1, r4
   1f0a4:	bl	196a8 <main@@Base+0x3920>
   1f0a8:	movw	r2, #29556	; 0x7374
   1f0ac:	movt	r2, #25183	; 0x625f
   1f0b0:	eor	r2, r1, r2
   1f0b4:	movw	r3, #29791	; 0x745f
   1f0b8:	movt	r3, #24946	; 0x6172
   1f0bc:	eor	r3, r0, r3
   1f0c0:	orrs	r2, r3, r2
   1f0c4:	bne	1f160 <main@@Base+0x93d8>
   1f0c8:	add	r6, r7, #16
   1f0cc:	mov	r0, r6
   1f0d0:	mov	r1, r4
   1f0d4:	bl	196a8 <main@@Base+0x3920>
   1f0d8:	movw	r2, #25968	; 0x6570
   1f0dc:	movt	r2, #29556	; 0x7374
   1f0e0:	eor	r1, r1, r2
   1f0e4:	and	r0, r0, #-16777216	; 0xff000000
   1f0e8:	eor	r0, r0, #1929379840	; 0x73000000
   1f0ec:	orrs	r0, r0, r1
   1f0f0:	bne	1f1e0 <main@@Base+0x9458>
   1f0f4:	mov	r0, r5
   1f0f8:	mov	r1, r6
   1f0fc:	mov	r2, r4
   1f100:	mov	r3, #5
   1f104:	bl	196ac <main@@Base+0x3924>
   1f108:	mov	r7, r0
   1f10c:	cmp	r6, r0
   1f110:	add	r8, sp, #8
   1f114:	beq	1f1ec <main@@Base+0x9464>
   1f118:	mov	r0, #0
   1f11c:	str	r0, [sp, #8]
   1f120:	mov	r0, r5
   1f124:	mov	r1, r7
   1f128:	mov	r2, r4
   1f12c:	mov	r3, r8
   1f130:	bl	1c0a4 <main@@Base+0x631c>
   1f134:	mov	r6, r0
   1f138:	cmp	r7, r0
   1f13c:	beq	1ef8c <main@@Base+0x9204>
   1f140:	mov	r8, r6
   1f144:	b	1efb8 <main@@Base+0x9230>
   1f148:	mov	r0, r5
   1f14c:	mov	r1, r7
   1f150:	mov	r2, r4
   1f154:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1f158:	mov	r8, r0
   1f15c:	b	1f204 <main@@Base+0x947c>
   1f160:	movw	r2, #24435	; 0x5f73
   1f164:	movt	r2, #98	; 0x62
   1f168:	eor	r2, r2, r1, lsr #8
   1f16c:	lsr	r0, r0, #8
   1f170:	orr	r0, r0, r1, lsl #24
   1f174:	movw	r1, #28787	; 0x7073
   1f178:	movt	r1, #29797	; 0x7465
   1f17c:	eor	r0, r0, r1
   1f180:	orrs	r0, r0, r2
   1f184:	bne	1f1e0 <main@@Base+0x9458>
   1f188:	mov	r0, r5
   1f18c:	mov	r1, r6
   1f190:	mov	r2, r4
   1f194:	mov	r3, #7
   1f198:	bl	196ac <main@@Base+0x3924>
   1f19c:	mov	r7, r0
   1f1a0:	cmp	r6, r0
   1f1a4:	add	r8, sp, #8
   1f1a8:	beq	1f1ec <main@@Base+0x9464>
   1f1ac:	mov	r0, #0
   1f1b0:	str	r0, [sp, #12]
   1f1b4:	str	r0, [sp, #8]
   1f1b8:	mov	r0, r5
   1f1bc:	mov	r1, r7
   1f1c0:	mov	r2, r4
   1f1c4:	mov	r3, r8
   1f1c8:	bl	1bec0 <main@@Base+0x6138>
   1f1cc:	mov	r6, r0
   1f1d0:	cmp	r7, r0
   1f1d4:	beq	1eff8 <main@@Base+0x9270>
   1f1d8:	mov	r8, r6
   1f1dc:	b	1f024 <main@@Base+0x929c>
   1f1e0:	mov	r0, r5
   1f1e4:	mov	r1, r6
   1f1e8:	b	1f1f4 <main@@Base+0x946c>
   1f1ec:	mov	r0, r5
   1f1f0:	mov	r1, r7
   1f1f4:	mov	r2, r4
   1f1f8:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1f1fc:	mov	r8, r0
   1f200:	add	r6, sp, #16
   1f204:	mov	r0, r5
   1f208:	mov	r1, r8
   1f20c:	mov	r2, r4
   1f210:	mov	r3, r6
   1f214:	bl	1c578 <main@@Base+0x67f0>
   1f218:	mov	r8, r0
   1f21c:	ldr	r0, [sp, #16]
   1f220:	cmp	r0, #0
   1f224:	bne	1f06c <main@@Base+0x92e4>
   1f228:	ldr	r0, [r5, #20]
   1f22c:	cmp	r0, #0
   1f230:	bne	1ef28 <main@@Base+0x91a0>
   1f234:	ldr	r0, [r5]
   1f238:	bl	22de8 <flatcc_builder_end_table@@Base>
   1f23c:	ldr	r1, [sp, #4]
   1f240:	str	r0, [r1]
   1f244:	cmp	r0, #0
   1f248:	bne	1ef40 <main@@Base+0x91b8>
   1f24c:	b	1ef28 <main@@Base+0x91a0>
   1f250:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f254:	add	fp, sp, #24
   1f258:	mov	r8, r3
   1f25c:	mov	r5, r2
   1f260:	mov	r7, r1
   1f264:	mov	r6, r0
   1f268:	mov	r0, r1
   1f26c:	mov	r1, r2
   1f270:	bl	196a8 <main@@Base+0x3920>
   1f274:	movw	r2, #24946	; 0x6172
   1f278:	movt	r2, #17256	; 0x4368
   1f27c:	eor	r1, r1, r2
   1f280:	movw	r2, #29797	; 0x7465
   1f284:	movt	r2, #24931	; 0x6163
   1f288:	eor	r0, r0, r2
   1f28c:	orrs	r0, r0, r1
   1f290:	bne	1f2e0 <main@@Base+0x9558>
   1f294:	add	r4, r7, #8
   1f298:	mov	r0, r4
   1f29c:	mov	r1, r5
   1f2a0:	bl	196a8 <main@@Base+0x3920>
   1f2a4:	and	r0, r1, #-16777216	; 0xff000000
   1f2a8:	teq	r0, #1912602624	; 0x72000000
   1f2ac:	bne	1f2e0 <main@@Base+0x9558>
   1f2b0:	mov	r0, r4
   1f2b4:	mov	r1, r5
   1f2b8:	mov	r2, #1
   1f2bc:	bl	1c700 <main@@Base+0x6978>
   1f2c0:	cmp	r0, r4
   1f2c4:	beq	1f2e0 <main@@Base+0x9558>
   1f2c8:	mov	r1, r0
   1f2cc:	mov	r0, r6
   1f2d0:	mov	r2, r5
   1f2d4:	mov	r3, r8
   1f2d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f2dc:	b	1cc60 <main@@Base+0x6ed8>
   1f2e0:	mov	r0, r7
   1f2e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f2e8:	push	{r4, r5, r6, sl, fp, lr}
   1f2ec:	add	fp, sp, #16
   1f2f0:	mov	r4, r2
   1f2f4:	mov	r5, r0
   1f2f8:	ldr	r6, [fp, #8]
   1f2fc:	mov	r0, #0
   1f300:	str	r0, [r6]
   1f304:	cmp	r3, #11
   1f308:	bhi	1f358 <main@@Base+0x95d0>
   1f30c:	add	r0, pc, #0
   1f310:	ldr	pc, [r0, r3, lsl #2]
   1f314:	muleq	r1, r4, r3
   1f318:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   1f31c:	andeq	pc, r1, r4, lsr #7
   1f320:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   1f324:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   1f328:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   1f32c:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   1f330:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   1f334:			; <UNDEFINED> instruction: 0x0001f3b8
   1f338:	andeq	pc, r1, r4, asr #6
   1f33c:	andeq	pc, r1, r4, asr #6
   1f340:	andeq	pc, r1, r0, ror #6
   1f344:	mov	r0, r5
   1f348:	mov	r2, r4
   1f34c:	mov	r3, r6
   1f350:	bl	1f70c <main@@Base+0x9984>
   1f354:	b	1f3c8 <main@@Base+0x9640>
   1f358:	cmp	r3, #255	; 0xff
   1f35c:	bne	1f374 <main@@Base+0x95ec>
   1f360:	mov	r0, r5
   1f364:	mov	r2, r4
   1f368:	mov	r3, r6
   1f36c:	bl	277b4 <flatcc_json_parser_build_string@@Base>
   1f370:	b	1f3c8 <main@@Base+0x9640>
   1f374:	ldrb	r0, [r5, #8]
   1f378:	tst	r0, #1
   1f37c:	bne	1f400 <main@@Base+0x9678>
   1f380:	mov	r0, r5
   1f384:	mov	r2, r4
   1f388:	mov	r3, #15
   1f38c:	pop	{r4, r5, r6, sl, fp, lr}
   1f390:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1f394:	mov	r0, r5
   1f398:	mov	r2, r4
   1f39c:	pop	{r4, r5, r6, sl, fp, lr}
   1f3a0:	b	1d120 <main@@Base+0x7398>
   1f3a4:	mov	r0, r5
   1f3a8:	mov	r2, r4
   1f3ac:	mov	r3, r6
   1f3b0:	bl	1f438 <main@@Base+0x96b0>
   1f3b4:	b	1f3c8 <main@@Base+0x9640>
   1f3b8:	mov	r0, r5
   1f3bc:	mov	r2, r4
   1f3c0:	mov	r3, r6
   1f3c4:	bl	1f684 <main@@Base+0x98fc>
   1f3c8:	mov	r1, r0
   1f3cc:	ldr	r0, [r5, #20]
   1f3d0:	cmp	r0, #0
   1f3d4:	bne	1f3e4 <main@@Base+0x965c>
   1f3d8:	ldr	r0, [r6]
   1f3dc:	cmp	r0, #0
   1f3e0:	beq	1f3ec <main@@Base+0x9664>
   1f3e4:	mov	r0, r1
   1f3e8:	pop	{r4, r5, r6, sl, fp, pc}
   1f3ec:	mov	r0, r5
   1f3f0:	mov	r2, r4
   1f3f4:	mov	r3, #33	; 0x21
   1f3f8:	pop	{r4, r5, r6, sl, fp, lr}
   1f3fc:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1f400:	mov	r0, r5
   1f404:	mov	r2, r4
   1f408:	pop	{r4, r5, r6, sl, fp, lr}
   1f40c:	b	26738 <flatcc_json_parser_generic_json@@Base>
   1f410:	add	r0, r0, #1
   1f414:	uxtb	r1, r0
   1f418:	cmp	r1, #12
   1f41c:	movhi	r0, #0
   1f420:	bxhi	lr
   1f424:	sxtb	r0, r0
   1f428:	movw	r1, #17200	; 0x4330
   1f42c:	movt	r1, #3
   1f430:	ldr	r0, [r1, r0, lsl #2]
   1f434:	bx	lr
   1f438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f43c:	add	fp, sp, #28
   1f440:	sub	sp, sp, #20
   1f444:	mov	r7, r3
   1f448:	mov	r4, r2
   1f44c:	mov	r6, r1
   1f450:	mov	r5, r0
   1f454:	mov	r0, #0
   1f458:	str	r0, [r3]
   1f45c:	ldr	r0, [r5]
   1f460:	mov	r1, #1
   1f464:	bl	226c8 <flatcc_builder_start_table@@Base>
   1f468:	cmp	r0, #0
   1f46c:	bne	1f660 <main@@Base+0x98d8>
   1f470:	add	r3, sp, #16
   1f474:	mov	r0, r5
   1f478:	mov	r1, r6
   1f47c:	mov	r2, r4
   1f480:	bl	195f0 <main@@Base+0x3868>
   1f484:	mov	r6, r0
   1f488:	ldr	r0, [sp, #16]
   1f48c:	cmp	r0, #0
   1f490:	str	r7, [sp, #8]
   1f494:	beq	1f63c <main@@Base+0x98b4>
   1f498:	movw	r8, #28530	; 0x6f72
   1f49c:	movt	r8, #29559	; 0x7377
   1f4a0:	movw	sl, #24948	; 0x6174
   1f4a4:	movt	sl, #25695	; 0x645f
   1f4a8:	add	r9, sp, #16
   1f4ac:	b	1f524 <main@@Base+0x979c>
   1f4b0:	str	r6, [sp]
   1f4b4:	mov	r0, r5
   1f4b8:	mov	r1, r8
   1f4bc:	mov	r2, r4
   1f4c0:	movw	r3, #33520	; 0x82f0
   1f4c4:	movt	r3, #4
   1f4c8:	bl	1bd88 <main@@Base+0x6000>
   1f4cc:	mov	r6, r0
   1f4d0:	cmp	r0, r8
   1f4d4:	cmpne	r6, r4
   1f4d8:	beq	1f660 <main@@Base+0x98d8>
   1f4dc:	ldr	r8, [sp, #12]
   1f4e0:	cmp	r8, #0
   1f4e4:	bne	1f4f4 <main@@Base+0x976c>
   1f4e8:	ldrb	r0, [r5, #8]
   1f4ec:	tst	r0, #2
   1f4f0:	beq	1f518 <main@@Base+0x9790>
   1f4f4:	ldr	r0, [r5]
   1f4f8:	mov	r1, #0
   1f4fc:	mov	r2, #4
   1f500:	mov	r3, #4
   1f504:	bl	234dc <flatcc_builder_table_add@@Base>
   1f508:	cmp	r0, #0
   1f50c:	beq	1f660 <main@@Base+0x98d8>
   1f510:	mov	r1, r8
   1f514:	bl	1bea0 <main@@Base+0x6118>
   1f518:	movw	r8, #28530	; 0x6f72
   1f51c:	movt	r8, #29559	; 0x7377
   1f520:	b	1f618 <main@@Base+0x9890>
   1f524:	mov	r0, r5
   1f528:	mov	r1, r6
   1f52c:	mov	r2, r4
   1f530:	bl	19680 <main@@Base+0x38f8>
   1f534:	mov	r6, r0
   1f538:	mov	r1, r4
   1f53c:	bl	196a8 <main@@Base+0x3920>
   1f540:	eor	r1, r1, r8
   1f544:	eor	r0, r0, sl
   1f548:	orrs	r0, r0, r1
   1f54c:	bne	1f5f8 <main@@Base+0x9870>
   1f550:	add	r7, r6, #8
   1f554:	mov	r0, r7
   1f558:	mov	r1, r4
   1f55c:	bl	196a8 <main@@Base+0x3920>
   1f560:	movw	r2, #25451	; 0x636b
   1f564:	movt	r2, #29793	; 0x7461
   1f568:	eor	r1, r1, r2
   1f56c:	movw	r2, #24941	; 0x616d
   1f570:	movt	r2, #24420	; 0x5f64
   1f574:	eor	r0, r0, r2
   1f578:	orrs	r0, r0, r1
   1f57c:	bne	1f604 <main@@Base+0x987c>
   1f580:	add	r6, r6, #16
   1f584:	mov	r0, r6
   1f588:	mov	r1, r4
   1f58c:	bl	196a8 <main@@Base+0x3920>
   1f590:	bic	r0, r1, #255	; 0xff
   1f594:	movw	r1, #25856	; 0x6500
   1f598:	movt	r1, #24935	; 0x6167
   1f59c:	teq	r0, r1
   1f5a0:	bne	1f5f8 <main@@Base+0x9870>
   1f5a4:	mov	r0, r5
   1f5a8:	mov	r1, r6
   1f5ac:	mov	r2, r4
   1f5b0:	mov	r3, #3
   1f5b4:	bl	196ac <main@@Base+0x3924>
   1f5b8:	mov	r7, r0
   1f5bc:	cmp	r6, r0
   1f5c0:	beq	1f604 <main@@Base+0x987c>
   1f5c4:	mov	r0, #0
   1f5c8:	str	r0, [sp, #12]
   1f5cc:	mov	r0, r5
   1f5d0:	mov	r1, r7
   1f5d4:	mov	r2, r4
   1f5d8:	add	r6, sp, #12
   1f5dc:	mov	r3, r6
   1f5e0:	bl	1bcf8 <main@@Base+0x5f70>
   1f5e4:	mov	r8, r0
   1f5e8:	cmp	r7, r0
   1f5ec:	beq	1f4b0 <main@@Base+0x9728>
   1f5f0:	mov	r6, r8
   1f5f4:	b	1f4dc <main@@Base+0x9754>
   1f5f8:	mov	r0, r5
   1f5fc:	mov	r1, r6
   1f600:	b	1f60c <main@@Base+0x9884>
   1f604:	mov	r0, r5
   1f608:	mov	r1, r7
   1f60c:	mov	r2, r4
   1f610:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1f614:	mov	r6, r0
   1f618:	mov	r0, r5
   1f61c:	mov	r1, r6
   1f620:	mov	r2, r4
   1f624:	mov	r3, r9
   1f628:	bl	1c578 <main@@Base+0x67f0>
   1f62c:	mov	r6, r0
   1f630:	ldr	r0, [sp, #16]
   1f634:	cmp	r0, #0
   1f638:	bne	1f524 <main@@Base+0x979c>
   1f63c:	ldr	r0, [r5, #20]
   1f640:	cmp	r0, #0
   1f644:	bne	1f660 <main@@Base+0x98d8>
   1f648:	ldr	r0, [r5]
   1f64c:	bl	22de8 <flatcc_builder_end_table@@Base>
   1f650:	ldr	r1, [sp, #8]
   1f654:	str	r0, [r1]
   1f658:	cmp	r0, #0
   1f65c:	bne	1f678 <main@@Base+0x98f0>
   1f660:	mov	r0, r5
   1f664:	mov	r1, r6
   1f668:	mov	r2, r4
   1f66c:	mov	r3, #33	; 0x21
   1f670:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1f674:	mov	r6, r0
   1f678:	mov	r0, r6
   1f67c:	sub	sp, fp, #28
   1f680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f684:	push	{r4, r5, r6, r7, fp, lr}
   1f688:	add	fp, sp, #16
   1f68c:	mov	r7, r3
   1f690:	mov	r4, r2
   1f694:	mov	r6, r1
   1f698:	mov	r5, r0
   1f69c:	mov	r0, #0
   1f6a0:	str	r0, [r3]
   1f6a4:	ldr	r0, [r5]
   1f6a8:	mov	r1, #2
   1f6ac:	mov	r2, #2
   1f6b0:	bl	21cc8 <flatcc_builder_start_struct@@Base>
   1f6b4:	cmp	r0, #0
   1f6b8:	beq	1f6f4 <main@@Base+0x996c>
   1f6bc:	mov	r3, r0
   1f6c0:	mov	r0, r5
   1f6c4:	mov	r1, r6
   1f6c8:	mov	r2, r4
   1f6cc:	bl	1f794 <main@@Base+0x9a0c>
   1f6d0:	mov	r6, r0
   1f6d4:	cmp	r0, r4
   1f6d8:	beq	1f6f4 <main@@Base+0x996c>
   1f6dc:	ldr	r0, [r5]
   1f6e0:	bl	21da4 <flatcc_builder_end_struct@@Base>
   1f6e4:	str	r0, [r7]
   1f6e8:	cmp	r0, #0
   1f6ec:	movne	r0, r6
   1f6f0:	popne	{r4, r5, r6, r7, fp, pc}
   1f6f4:	mov	r0, r5
   1f6f8:	mov	r1, r6
   1f6fc:	mov	r2, r4
   1f700:	mov	r3, #33	; 0x21
   1f704:	pop	{r4, r5, r6, r7, fp, lr}
   1f708:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1f70c:	push	{r4, r5, r6, r7, fp, lr}
   1f710:	add	fp, sp, #16
   1f714:	mov	r7, r3
   1f718:	mov	r4, r2
   1f71c:	mov	r6, r1
   1f720:	mov	r5, r0
   1f724:	mov	r0, #0
   1f728:	str	r0, [r3]
   1f72c:	ldr	r0, [r5]
   1f730:	mov	r1, #4
   1f734:	mov	r2, #4
   1f738:	bl	21cc8 <flatcc_builder_start_struct@@Base>
   1f73c:	cmp	r0, #0
   1f740:	beq	1f77c <main@@Base+0x99f4>
   1f744:	mov	r3, r0
   1f748:	mov	r0, r5
   1f74c:	mov	r1, r6
   1f750:	mov	r2, r4
   1f754:	bl	1fb5c <main@@Base+0x9dd4>
   1f758:	mov	r6, r0
   1f75c:	cmp	r0, r4
   1f760:	beq	1f77c <main@@Base+0x99f4>
   1f764:	ldr	r0, [r5]
   1f768:	bl	21da4 <flatcc_builder_end_struct@@Base>
   1f76c:	str	r0, [r7]
   1f770:	cmp	r0, #0
   1f774:	movne	r0, r6
   1f778:	popne	{r4, r5, r6, r7, fp, pc}
   1f77c:	mov	r0, r5
   1f780:	mov	r1, r6
   1f784:	mov	r2, r4
   1f788:	mov	r3, #33	; 0x21
   1f78c:	pop	{r4, r5, r6, r7, fp, lr}
   1f790:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1f794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f798:	add	fp, sp, #28
   1f79c:	sub	sp, sp, #20
   1f7a0:	str	r3, [sp, #8]
   1f7a4:	mov	r4, r2
   1f7a8:	mov	r5, r0
   1f7ac:	add	r3, sp, #16
   1f7b0:	bl	195f0 <main@@Base+0x3868>
   1f7b4:	mov	r1, r0
   1f7b8:	ldr	r0, [sp, #16]
   1f7bc:	cmp	r0, #0
   1f7c0:	beq	1f93c <main@@Base+0x9bb4>
   1f7c4:	movw	r8, #26994	; 0x6972
   1f7c8:	movt	r8, #26721	; 0x6861
   1f7cc:	movw	r9, #25966	; 0x656e
   1f7d0:	movt	r9, #24428	; 0x5f6c
   1f7d4:	movw	r7, #26624	; 0x6800
   1f7d8:	movt	r7, #26484	; 0x6774
   1f7dc:	add	sl, sp, #14
   1f7e0:	mov	r0, r5
   1f7e4:	mov	r2, r4
   1f7e8:	bl	19680 <main@@Base+0x38f8>
   1f7ec:	mov	r6, r0
   1f7f0:	mov	r1, r4
   1f7f4:	bl	196a8 <main@@Base+0x3920>
   1f7f8:	eor	r1, r1, r8
   1f7fc:	eor	r0, r0, r9
   1f800:	orrs	r0, r0, r1
   1f804:	bne	1f87c <main@@Base+0x9af4>
   1f808:	add	r6, r6, #8
   1f80c:	mov	r0, r6
   1f810:	mov	r1, r4
   1f814:	bl	196a8 <main@@Base+0x3920>
   1f818:	bic	r0, r1, #255	; 0xff
   1f81c:	teq	r0, r7
   1f820:	bne	1f87c <main@@Base+0x9af4>
   1f824:	mov	r0, r5
   1f828:	mov	r1, r6
   1f82c:	mov	r2, r4
   1f830:	mov	r3, #3
   1f834:	bl	196ac <main@@Base+0x3924>
   1f838:	mov	r8, r0
   1f83c:	cmp	r6, r0
   1f840:	beq	1f894 <main@@Base+0x9b0c>
   1f844:	mov	r0, #0
   1f848:	strh	r0, [sp, #14]
   1f84c:	mov	r0, r5
   1f850:	mov	r1, r8
   1f854:	mov	r2, r4
   1f858:	mov	r9, sl
   1f85c:	mov	r3, sl
   1f860:	bl	1f948 <main@@Base+0x9bc0>
   1f864:	mov	r6, r0
   1f868:	cmp	r8, r0
   1f86c:	beq	1f8b4 <main@@Base+0x9b2c>
   1f870:	movw	r8, #26994	; 0x6972
   1f874:	movt	r8, #26721	; 0x6861
   1f878:	b	1f8ec <main@@Base+0x9b64>
   1f87c:	mov	r0, r5
   1f880:	mov	r1, r6
   1f884:	mov	r2, r4
   1f888:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1f88c:	mov	r6, r0
   1f890:	b	1f900 <main@@Base+0x9b78>
   1f894:	mov	r0, r5
   1f898:	mov	r1, r8
   1f89c:	mov	r2, r4
   1f8a0:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1f8a4:	mov	r6, r0
   1f8a8:	movw	r8, #26994	; 0x6972
   1f8ac:	movt	r8, #26721	; 0x6861
   1f8b0:	b	1f8f8 <main@@Base+0x9b70>
   1f8b4:	str	r9, [sp]
   1f8b8:	mov	r0, r5
   1f8bc:	mov	r1, r6
   1f8c0:	mov	r2, r4
   1f8c4:	movw	r3, #33532	; 0x82fc
   1f8c8:	movt	r3, #4
   1f8cc:	bl	1f9d8 <main@@Base+0x9c50>
   1f8d0:	mov	r1, r0
   1f8d4:	cmp	r0, r6
   1f8d8:	movw	r8, #26994	; 0x6972
   1f8dc:	movt	r8, #26721	; 0x6861
   1f8e0:	cmpne	r1, r4
   1f8e4:	beq	1f928 <main@@Base+0x9ba0>
   1f8e8:	mov	r6, r1
   1f8ec:	ldrh	r1, [sp, #14]
   1f8f0:	ldr	r0, [sp, #8]
   1f8f4:	bl	1faf0 <main@@Base+0x9d68>
   1f8f8:	movw	r9, #25966	; 0x656e
   1f8fc:	movt	r9, #24428	; 0x5f6c
   1f900:	mov	r0, r5
   1f904:	mov	r1, r6
   1f908:	mov	r2, r4
   1f90c:	add	r3, sp, #16
   1f910:	bl	1c578 <main@@Base+0x67f0>
   1f914:	mov	r1, r0
   1f918:	ldr	r0, [sp, #16]
   1f91c:	cmp	r0, #0
   1f920:	bne	1f7e0 <main@@Base+0x9a58>
   1f924:	b	1f93c <main@@Base+0x9bb4>
   1f928:	mov	r0, r5
   1f92c:	mov	r2, r4
   1f930:	mov	r3, #33	; 0x21
   1f934:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1f938:	mov	r1, r0
   1f93c:	mov	r0, r1
   1f940:	sub	sp, fp, #28
   1f944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f948:	push	{r4, r5, r6, r7, fp, lr}
   1f94c:	add	fp, sp, #16
   1f950:	sub	sp, sp, #24
   1f954:	mov	r7, r1
   1f958:	mov	r6, r0
   1f95c:	mov	r0, #0
   1f960:	str	r0, [sp, #20]
   1f964:	str	r0, [sp, #16]
   1f968:	str	r0, [sp, #12]
   1f96c:	strh	r0, [r3]
   1f970:	cmp	r1, r2
   1f974:	beq	1f9cc <main@@Base+0x9c44>
   1f978:	mov	r5, r3
   1f97c:	mov	r4, r2
   1f980:	add	r0, sp, #16
   1f984:	str	r0, [sp]
   1f988:	add	r3, sp, #12
   1f98c:	mov	r0, r6
   1f990:	mov	r1, r7
   1f994:	bl	272d4 <flatcc_json_parser_integer@@Base>
   1f998:	mov	r1, r0
   1f99c:	cmp	r0, r7
   1f9a0:	beq	1f9c8 <main@@Base+0x9c40>
   1f9a4:	ldr	r3, [sp, #12]
   1f9a8:	ldr	r0, [sp, #16]
   1f9ac:	ldr	r2, [sp, #20]
   1f9b0:	stm	sp, {r0, r2, r5}
   1f9b4:	mov	r0, r6
   1f9b8:	mov	r2, r4
   1f9bc:	bl	1fb10 <main@@Base+0x9d88>
   1f9c0:	mov	r7, r0
   1f9c4:	b	1f9cc <main@@Base+0x9c44>
   1f9c8:	mov	r7, r1
   1f9cc:	mov	r0, r7
   1f9d0:	sub	sp, fp, #16
   1f9d4:	pop	{r4, r5, r6, r7, fp, pc}
   1f9d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9dc:	add	fp, sp, #28
   1f9e0:	sub	sp, sp, #36	; 0x24
   1f9e4:	mov	r8, r3
   1f9e8:	mov	r6, r2
   1f9ec:	mov	r5, r0
   1f9f0:	mov	r0, #0
   1f9f4:	strh	r0, [fp, #-30]	; 0xffffffe2
   1f9f8:	ldr	sl, [fp, #8]
   1f9fc:	strh	r0, [sl]
   1fa00:	mov	r0, r5
   1fa04:	bl	1d044 <main@@Base+0x72bc>
   1fa08:	mov	r4, r0
   1fa0c:	cmp	r0, r6
   1fa10:	beq	1fad8 <main@@Base+0x9d50>
   1fa14:	mov	r9, r8
   1fa18:	ldr	r7, [r9]
   1fa1c:	add	r0, sp, #24
   1fa20:	str	r0, [sp]
   1fa24:	add	r0, sp, #16
   1fa28:	str	r0, [sp, #4]
   1fa2c:	mov	r0, r5
   1fa30:	mov	r1, r4
   1fa34:	mov	r2, r6
   1fa38:	add	r3, sp, #20
   1fa3c:	blx	r7
   1fa40:	mov	r7, r0
   1fa44:	cmp	r0, r6
   1fa48:	beq	1fae4 <main@@Base+0x9d5c>
   1fa4c:	cmp	r7, r4
   1fa50:	beq	1faac <main@@Base+0x9d24>
   1fa54:	ldr	r3, [sp, #20]
   1fa58:	ldr	r0, [sp, #24]
   1fa5c:	ldr	r1, [sp, #28]
   1fa60:	stm	sp, {r0, r1}
   1fa64:	sub	r0, fp, #30
   1fa68:	str	r0, [sp, #8]
   1fa6c:	mov	r0, r5
   1fa70:	mov	r1, r7
   1fa74:	mov	r2, r6
   1fa78:	bl	1fb10 <main@@Base+0x9d88>
   1fa7c:	cmp	r0, r6
   1fa80:	beq	1fae0 <main@@Base+0x9d58>
   1fa84:	ldrh	r0, [sl]
   1fa88:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1fa8c:	add	r0, r0, r1
   1fa90:	strh	r0, [sl]
   1fa94:	ldr	r0, [sp, #16]
   1fa98:	cmp	r0, #0
   1fa9c:	mov	r4, r7
   1faa0:	mov	r9, r8
   1faa4:	bne	1fa18 <main@@Base+0x9c90>
   1faa8:	b	1fae4 <main@@Base+0x9d5c>
   1faac:	ldr	r0, [r9, #4]!
   1fab0:	cmp	r0, #0
   1fab4:	mov	r4, r7
   1fab8:	bne	1fa18 <main@@Base+0x9c90>
   1fabc:	mov	r0, r5
   1fac0:	mov	r1, r7
   1fac4:	mov	r2, r6
   1fac8:	mov	r3, #23
   1facc:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1fad0:	mov	r7, r0
   1fad4:	b	1fae4 <main@@Base+0x9d5c>
   1fad8:	mov	r7, r4
   1fadc:	b	1fae4 <main@@Base+0x9d5c>
   1fae0:	mov	r7, r6
   1fae4:	mov	r0, r7
   1fae8:	sub	sp, fp, #28
   1faec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faf0:	push	{r4, r5, fp, lr}
   1faf4:	add	fp, sp, #8
   1faf8:	mov	r4, r1
   1fafc:	mov	r5, r0
   1fb00:	mov	r0, r1
   1fb04:	bl	1fb58 <main@@Base+0x9dd0>
   1fb08:	strh	r4, [r5]
   1fb0c:	pop	{r4, r5, fp, pc}
   1fb10:	push	{fp, lr}
   1fb14:	mov	fp, sp
   1fb18:	cmp	r3, #0
   1fb1c:	beq	1fb2c <main@@Base+0x9da4>
   1fb20:	mov	r3, #8
   1fb24:	pop	{fp, lr}
   1fb28:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fb2c:	ldr	ip, [fp, #12]
   1fb30:	ldr	lr, [fp, #8]
   1fb34:	subs	r3, lr, #65536	; 0x10000
   1fb38:	sbcs	r3, ip, #0
   1fb3c:	ldrcc	r0, [fp, #16]
   1fb40:	strhcc	lr, [r0]
   1fb44:	movcc	r0, r1
   1fb48:	popcc	{fp, pc}
   1fb4c:	mov	r3, #7
   1fb50:	pop	{fp, lr}
   1fb54:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fb58:	bx	lr
   1fb5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb60:	add	fp, sp, #28
   1fb64:	sub	sp, sp, #20
   1fb68:	str	r3, [sp, #8]
   1fb6c:	mov	r4, r2
   1fb70:	mov	r5, r0
   1fb74:	add	r3, sp, #16
   1fb78:	bl	195f0 <main@@Base+0x3868>
   1fb7c:	mov	r1, r0
   1fb80:	ldr	r0, [sp, #16]
   1fb84:	cmp	r0, #0
   1fb88:	beq	1fd04 <main@@Base+0x9f7c>
   1fb8c:	movw	r8, #28523	; 0x6f6b
   1fb90:	movt	r8, #25199	; 0x626f
   1fb94:	movw	r9, #29285	; 0x7265
   1fb98:	movt	r9, #29535	; 0x735f
   1fb9c:	movw	r7, #0
   1fba0:	movt	r7, #24932	; 0x6164
   1fba4:	add	sl, sp, #12
   1fba8:	mov	r0, r5
   1fbac:	mov	r2, r4
   1fbb0:	bl	19680 <main@@Base+0x38f8>
   1fbb4:	mov	r6, r0
   1fbb8:	mov	r1, r4
   1fbbc:	bl	196a8 <main@@Base+0x3920>
   1fbc0:	eor	r1, r1, r8
   1fbc4:	eor	r0, r0, r9
   1fbc8:	orrs	r0, r0, r1
   1fbcc:	bne	1fc44 <main@@Base+0x9ebc>
   1fbd0:	add	r6, r6, #8
   1fbd4:	mov	r0, r6
   1fbd8:	mov	r1, r4
   1fbdc:	bl	196a8 <main@@Base+0x3920>
   1fbe0:	bfc	r1, #0, #16
   1fbe4:	teq	r1, r7
   1fbe8:	bne	1fc44 <main@@Base+0x9ebc>
   1fbec:	mov	r0, r5
   1fbf0:	mov	r1, r6
   1fbf4:	mov	r2, r4
   1fbf8:	mov	r3, #2
   1fbfc:	bl	196ac <main@@Base+0x3924>
   1fc00:	mov	r8, r0
   1fc04:	cmp	r6, r0
   1fc08:	beq	1fc5c <main@@Base+0x9ed4>
   1fc0c:	mov	r0, #0
   1fc10:	str	r0, [sp, #12]
   1fc14:	mov	r0, r5
   1fc18:	mov	r1, r8
   1fc1c:	mov	r2, r4
   1fc20:	mov	r9, sl
   1fc24:	mov	r3, sl
   1fc28:	bl	1bcf8 <main@@Base+0x5f70>
   1fc2c:	mov	r6, r0
   1fc30:	cmp	r8, r0
   1fc34:	beq	1fc7c <main@@Base+0x9ef4>
   1fc38:	movw	r8, #28523	; 0x6f6b
   1fc3c:	movt	r8, #25199	; 0x626f
   1fc40:	b	1fcb4 <main@@Base+0x9f2c>
   1fc44:	mov	r0, r5
   1fc48:	mov	r1, r6
   1fc4c:	mov	r2, r4
   1fc50:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1fc54:	mov	r6, r0
   1fc58:	b	1fcc8 <main@@Base+0x9f40>
   1fc5c:	mov	r0, r5
   1fc60:	mov	r1, r8
   1fc64:	mov	r2, r4
   1fc68:	bl	2663c <flatcc_json_parser_unmatched_symbol@@Base>
   1fc6c:	mov	r6, r0
   1fc70:	movw	r8, #28523	; 0x6f6b
   1fc74:	movt	r8, #25199	; 0x626f
   1fc78:	b	1fcc0 <main@@Base+0x9f38>
   1fc7c:	str	r9, [sp]
   1fc80:	mov	r0, r5
   1fc84:	mov	r1, r6
   1fc88:	mov	r2, r4
   1fc8c:	movw	r3, #33544	; 0x8308
   1fc90:	movt	r3, #4
   1fc94:	bl	1bd88 <main@@Base+0x6000>
   1fc98:	mov	r1, r0
   1fc9c:	cmp	r0, r6
   1fca0:	movw	r8, #28523	; 0x6f6b
   1fca4:	movt	r8, #25199	; 0x626f
   1fca8:	cmpne	r1, r4
   1fcac:	beq	1fcf0 <main@@Base+0x9f68>
   1fcb0:	mov	r6, r1
   1fcb4:	ldr	r1, [sp, #12]
   1fcb8:	ldr	r0, [sp, #8]
   1fcbc:	bl	1bea0 <main@@Base+0x6118>
   1fcc0:	movw	r9, #29285	; 0x7265
   1fcc4:	movt	r9, #29535	; 0x735f
   1fcc8:	mov	r0, r5
   1fccc:	mov	r1, r6
   1fcd0:	mov	r2, r4
   1fcd4:	add	r3, sp, #16
   1fcd8:	bl	1c578 <main@@Base+0x67f0>
   1fcdc:	mov	r1, r0
   1fce0:	ldr	r0, [sp, #16]
   1fce4:	cmp	r0, #0
   1fce8:	bne	1fba8 <main@@Base+0x9e20>
   1fcec:	b	1fd04 <main@@Base+0x9f7c>
   1fcf0:	mov	r0, r5
   1fcf4:	mov	r2, r4
   1fcf8:	mov	r3, #33	; 0x21
   1fcfc:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   1fd00:	mov	r1, r0
   1fd04:	mov	r0, r1
   1fd08:	sub	sp, fp, #28
   1fd0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd10:	cmp	r3, #0
   1fd14:	beq	1fd20 <main@@Base+0x9f98>
   1fd18:	mov	r3, #8
   1fd1c:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fd20:	ldr	r2, [sp]
   1fd24:	ldmib	sp, {r0, r3}
   1fd28:	orrs	r0, r2, r0
   1fd2c:	movwne	r0, #1
   1fd30:	strb	r0, [r3]
   1fd34:	mov	r0, r1
   1fd38:	bx	lr
   1fd3c:	bx	lr
   1fd40:	push	{r4, r5, fp, lr}
   1fd44:	add	fp, sp, #8
   1fd48:	mov	r4, r1
   1fd4c:	mov	r5, r0
   1fd50:	mov	r0, r2
   1fd54:	mov	r1, r3
   1fd58:	bl	3118c <flatcc_json_printer_clear@@Base+0x1470>
   1fd5c:	ldr	r1, [fp, #8]
   1fd60:	vmov	s0, r0
   1fd64:	vneg.f32	s2, s0
   1fd68:	cmp	r4, #0
   1fd6c:	vseleq.f32	s0, s0, s2
   1fd70:	vstr	s0, [r1]
   1fd74:	mov	r0, r5
   1fd78:	pop	{r4, r5, fp, pc}
   1fd7c:	bx	lr
   1fd80:	push	{r4, sl, fp, lr}
   1fd84:	add	fp, sp, #8
   1fd88:	ldr	r4, [fp, #12]
   1fd8c:	ldr	ip, [fp, #8]
   1fd90:	ldr	lr, [fp, #16]
   1fd94:	cmp	r3, #0
   1fd98:	beq	1fdb4 <main@@Base+0xa02c>
   1fd9c:	subs	r3, ip, #-2147483647	; 0x80000001
   1fda0:	sbcs	r3, r4, #0
   1fda4:	bcc	1fdcc <main@@Base+0xa044>
   1fda8:	mov	r3, #8
   1fdac:	pop	{r4, sl, fp, lr}
   1fdb0:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fdb4:	subs	r3, ip, #-2147483648	; 0x80000000
   1fdb8:	sbcs	r3, r4, #0
   1fdbc:	bcc	1fdd0 <main@@Base+0xa048>
   1fdc0:	mov	r3, #7
   1fdc4:	pop	{r4, sl, fp, lr}
   1fdc8:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fdcc:	rsb	ip, ip, #0
   1fdd0:	str	ip, [lr]
   1fdd4:	mov	r0, r1
   1fdd8:	pop	{r4, sl, fp, pc}
   1fddc:	bx	lr
   1fde0:	push	{r4, r5, fp, lr}
   1fde4:	add	fp, sp, #8
   1fde8:	add	ip, fp, #8
   1fdec:	ldm	ip, {r4, r5, ip}
   1fdf0:	cmp	r3, #0
   1fdf4:	beq	1fe10 <main@@Base+0xa088>
   1fdf8:	subs	r3, r4, #1
   1fdfc:	sbcs	r3, r5, #-2147483648	; 0x80000000
   1fe00:	bcc	1fe24 <main@@Base+0xa09c>
   1fe04:	mov	r3, #8
   1fe08:	pop	{r4, r5, fp, lr}
   1fe0c:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fe10:	cmn	r5, #1
   1fe14:	bgt	1fe2c <main@@Base+0xa0a4>
   1fe18:	mov	r3, #7
   1fe1c:	pop	{r4, r5, fp, lr}
   1fe20:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fe24:	rsbs	r4, r4, #0
   1fe28:	rsc	r5, r5, #0
   1fe2c:	strd	r4, [ip]
   1fe30:	mov	r0, r1
   1fe34:	pop	{r4, r5, fp, pc}
   1fe38:	bx	lr
   1fe3c:	cmp	r3, #0
   1fe40:	beq	1fe4c <main@@Base+0xa0c4>
   1fe44:	mov	r3, #8
   1fe48:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fe4c:	ldr	r3, [sp, #4]
   1fe50:	cmp	r3, #0
   1fe54:	beq	1fe60 <main@@Base+0xa0d8>
   1fe58:	mov	r3, #7
   1fe5c:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fe60:	ldr	r0, [sp]
   1fe64:	ldr	r2, [sp, #8]
   1fe68:	str	r0, [r2]
   1fe6c:	mov	r0, r1
   1fe70:	bx	lr
   1fe74:	bx	lr
   1fe78:	cmp	r3, #0
   1fe7c:	beq	1fe88 <main@@Base+0xa100>
   1fe80:	mov	r3, #8
   1fe84:	b	25f60 <flatcc_json_parser_set_error@@Base>
   1fe88:	ldm	sp, {r2, r3}
   1fe8c:	ldr	r0, [sp, #8]
   1fe90:	strd	r2, [r0]
   1fe94:	mov	r0, r1
   1fe98:	bx	lr
   1fe9c:	bx	lr
   1fea0:	push	{r4, r5, fp, lr}
   1fea4:	add	fp, sp, #8
   1fea8:	mov	r4, r1
   1feac:	mov	r5, r0
   1feb0:	mov	r0, r2
   1feb4:	mov	r1, r3
   1feb8:	bl	30f54 <flatcc_json_printer_clear@@Base+0x1238>
   1febc:	eor	r2, r1, #-2147483648	; 0x80000000
   1fec0:	ldr	r3, [fp, #8]
   1fec4:	vmov	d16, r0, r1
   1fec8:	vmov	d17, r0, r2
   1fecc:	cmp	r4, #0
   1fed0:	vseleq.f64	d16, d16, d17
   1fed4:	vstr	d16, [r3]
   1fed8:	mov	r0, r5
   1fedc:	pop	{r4, r5, fp, pc}
   1fee0:	bx	lr
   1fee4:	push	{r4, r5, r6, sl, fp, lr}
   1fee8:	add	fp, sp, #16
   1feec:	sub	sp, sp, #16
   1fef0:	mov	r4, r1
   1fef4:	mov	r5, r0
   1fef8:	mov	r6, #1
   1fefc:	movw	r0, #16217	; 0x3f59
   1ff00:	movt	r0, #3
   1ff04:	stm	sp, {r0, r6}
   1ff08:	mov	r0, r5
   1ff0c:	mov	r1, #0
   1ff10:	mov	r2, r4
   1ff14:	mov	r3, #0
   1ff18:	bl	2bac4 <flatcc_json_printer_float_struct_field@@Base>
   1ff1c:	movw	r0, #26671	; 0x682f
   1ff20:	movt	r0, #3
   1ff24:	stm	sp, {r0, r6}
   1ff28:	mov	r0, r5
   1ff2c:	mov	r1, #1
   1ff30:	mov	r2, r4
   1ff34:	mov	r3, #4
   1ff38:	bl	2bac4 <flatcc_json_printer_float_struct_field@@Base>
   1ff3c:	movw	r0, #16658	; 0x4112
   1ff40:	movt	r0, #3
   1ff44:	stm	sp, {r0, r6}
   1ff48:	mov	r0, r5
   1ff4c:	mov	r1, #2
   1ff50:	mov	r2, r4
   1ff54:	mov	r3, #8
   1ff58:	bl	2bac4 <flatcc_json_printer_float_struct_field@@Base>
   1ff5c:	mov	r6, #5
   1ff60:	movw	r0, #16660	; 0x4114
   1ff64:	movt	r0, #3
   1ff68:	stm	sp, {r0, r6}
   1ff6c:	mov	r0, r5
   1ff70:	mov	r1, #3
   1ff74:	mov	r2, r4
   1ff78:	mov	r3, #16
   1ff7c:	bl	2bb2c <flatcc_json_printer_double_struct_field@@Base>
   1ff80:	movw	r0, #65504	; 0xffe0
   1ff84:	movt	r0, #1
   1ff88:	movw	r1, #16666	; 0x411a
   1ff8c:	movt	r1, #3
   1ff90:	stm	sp, {r1, r6}
   1ff94:	str	r0, [sp, #8]
   1ff98:	mov	r0, r5
   1ff9c:	mov	r1, #4
   1ffa0:	mov	r2, r4
   1ffa4:	mov	r3, #24
   1ffa8:	bl	2bda0 <flatcc_json_printer_int8_enum_struct_field@@Base>
   1ffac:	movw	r0, #388	; 0x184
   1ffb0:	movt	r0, #2
   1ffb4:	movw	r1, #16672	; 0x4120
   1ffb8:	movt	r1, #3
   1ffbc:	stm	sp, {r1, r6}
   1ffc0:	str	r0, [sp, #8]
   1ffc4:	mov	r0, r5
   1ffc8:	mov	r1, #5
   1ffcc:	mov	r2, r4
   1ffd0:	mov	r3, #26
   1ffd4:	bl	2f3bc <flatcc_json_printer_embedded_struct_field@@Base>
   1ffd8:	sub	sp, fp, #16
   1ffdc:	pop	{r4, r5, r6, sl, fp, pc}
   1ffe0:	push	{r4, r5, r6, r7, fp, lr}
   1ffe4:	add	fp, sp, #16
   1ffe8:	mov	r4, r0
   1ffec:	mvn	r0, #0
   1fff0:	uxtab	r0, r0, r1
   1fff4:	uxtb	r7, r1
   1fff8:	ands	r5, r0, r7
   1fffc:	movwne	r5, #1
   20000:	cmp	r1, #0
   20004:	beq	20060 <main@@Base+0xa2d8>
   20008:	ands	r0, r1, #244	; 0xf4
   2000c:	bne	20060 <main@@Base+0xa2d8>
   20010:	mov	r0, r4
   20014:	mov	r1, r5
   20018:	bl	2a2dc <flatcc_json_printer_delimit_enum_flags@@Base>
   2001c:	mov	r6, #0
   20020:	tst	r7, #1
   20024:	bne	2006c <main@@Base+0xa2e4>
   20028:	tst	r7, #2
   2002c:	bne	20090 <main@@Base+0xa308>
   20030:	tst	r7, #8
   20034:	beq	20050 <main@@Base+0xa2c8>
   20038:	movw	r2, #16688	; 0x4130
   2003c:	movt	r2, #3
   20040:	mov	r0, r4
   20044:	mov	r1, r6
   20048:	mov	r3, #4
   2004c:	bl	2a310 <flatcc_json_printer_enum_flag@@Base>
   20050:	mov	r0, r4
   20054:	mov	r1, r5
   20058:	pop	{r4, r5, r6, r7, fp, lr}
   2005c:	b	2a2dc <flatcc_json_printer_delimit_enum_flags@@Base>
   20060:	mov	r0, r4
   20064:	pop	{r4, r5, r6, r7, fp, lr}
   20068:	b	2a0a0 <flatcc_json_printer_int8@@Base>
   2006c:	movw	r2, #16678	; 0x4126
   20070:	movt	r2, #3
   20074:	mov	r0, r4
   20078:	mov	r1, #0
   2007c:	mov	r3, #3
   20080:	bl	2a310 <flatcc_json_printer_enum_flag@@Base>
   20084:	mov	r6, #1
   20088:	tst	r7, #2
   2008c:	beq	20030 <main@@Base+0xa2a8>
   20090:	movw	r2, #16682	; 0x412a
   20094:	movt	r2, #3
   20098:	mov	r0, r4
   2009c:	mov	r1, r6
   200a0:	mov	r3, #5
   200a4:	bl	2a310 <flatcc_json_printer_enum_flag@@Base>
   200a8:	add	r6, r6, #1
   200ac:	tst	r7, #8
   200b0:	bne	20038 <main@@Base+0xa2b0>
   200b4:	b	20050 <main@@Base+0xa2c8>
   200b8:	sub	r1, r1, #1
   200bc:	cmp	r1, #3
   200c0:	bhi	200ec <main@@Base+0xa364>
   200c4:	add	r2, pc, #0
   200c8:	ldr	pc, [r2, r1, lsl #2]
   200cc:	ldrdeq	r0, [r2], -ip
   200d0:	strdeq	r0, [r2], -ip
   200d4:	andeq	r0, r2, ip, lsl #2
   200d8:	andeq	r0, r2, ip, lsl r1
   200dc:	movw	r1, #16693	; 0x4135
   200e0:	movt	r1, #3
   200e4:	mov	r2, #7
   200e8:	b	2a250 <flatcc_json_printer_enum@@Base>
   200ec:	movw	r1, #23140	; 0x5a64
   200f0:	movt	r1, #3
   200f4:	mov	r2, #4
   200f8:	b	2a250 <flatcc_json_printer_enum@@Base>
   200fc:	movw	r1, #16701	; 0x413d
   20100:	movt	r1, #3
   20104:	mov	r2, #23
   20108:	b	2a250 <flatcc_json_printer_enum@@Base>
   2010c:	movw	r1, #16725	; 0x4155
   20110:	movt	r1, #3
   20114:	mov	r2, #8
   20118:	b	2a250 <flatcc_json_printer_enum@@Base>
   2011c:	movw	r1, #16734	; 0x415e
   20120:	movt	r1, #3
   20124:	mov	r2, #3
   20128:	b	2a250 <flatcc_json_printer_enum@@Base>
   2012c:	ldrb	r2, [r1, #8]
   20130:	sub	r2, r2, #1
   20134:	cmp	r2, #3
   20138:	bxhi	lr
   2013c:	add	r3, pc, #0
   20140:	ldr	pc, [r3, r2, lsl #2]
   20144:	andeq	r0, r2, r4, asr r1
   20148:	andeq	r0, r2, r8, ror r1
   2014c:	andeq	r0, r2, r0, ror #2
   20150:	andeq	r0, r2, ip, ror #2
   20154:	movw	r2, #35984	; 0x8c90
   20158:	movt	r2, #1
   2015c:	b	2f2d4 <flatcc_json_printer_union_table@@Base>
   20160:	movw	r2, #1024	; 0x400
   20164:	movt	r2, #2
   20168:	b	2f2d4 <flatcc_json_printer_union_table@@Base>
   2016c:	movw	r2, #1028	; 0x404
   20170:	movt	r2, #2
   20174:	b	2f2d4 <flatcc_json_printer_union_table@@Base>
   20178:	movw	r2, #860	; 0x35c
   2017c:	movt	r2, #2
   20180:	b	2f2d4 <flatcc_json_printer_union_table@@Base>
   20184:	push	{r4, r5, r6, sl, fp, lr}
   20188:	add	fp, sp, #16
   2018c:	sub	sp, sp, #8
   20190:	mov	r4, r1
   20194:	mov	r5, r0
   20198:	mov	r6, #1
   2019c:	movw	r0, #16444	; 0x403c
   201a0:	movt	r0, #3
   201a4:	stm	sp, {r0, r6}
   201a8:	mov	r0, r5
   201ac:	mov	r1, #0
   201b0:	mov	r2, r4
   201b4:	mov	r3, #0
   201b8:	bl	2b93c <flatcc_json_printer_int16_struct_field@@Base>
   201bc:	movw	r0, #16859	; 0x41db
   201c0:	movt	r0, #3
   201c4:	stm	sp, {r0, r6}
   201c8:	mov	r0, r5
   201cc:	mov	r1, #1
   201d0:	mov	r2, r4
   201d4:	mov	r3, #2
   201d8:	bl	2b8dc <flatcc_json_printer_int8_struct_field@@Base>
   201dc:	sub	sp, fp, #16
   201e0:	pop	{r4, r5, r6, sl, fp, pc}
   201e4:	push	{r4, r5, r6, sl, fp, lr}
   201e8:	add	fp, sp, #16
   201ec:	sub	sp, sp, #16
   201f0:	mov	r4, r1
   201f4:	mov	r5, r0
   201f8:	mov	r0, #2
   201fc:	str	r0, [sp]
   20200:	mov	r6, #0
   20204:	movw	r3, #17106	; 0x42d2
   20208:	movt	r3, #3
   2020c:	mov	r0, r5
   20210:	mov	r2, #0
   20214:	bl	2a34c <flatcc_json_printer_string_field@@Base>
   20218:	str	r6, [sp, #8]
   2021c:	str	r6, [sp, #12]
   20220:	mov	r0, #3
   20224:	str	r0, [sp]
   20228:	movw	r3, #17109	; 0x42d5
   2022c:	movt	r3, #3
   20230:	mov	r0, r5
   20234:	mov	r1, r4
   20238:	mov	r2, #1
   2023c:	bl	2abc8 <flatcc_json_printer_int64_field@@Base>
   20240:	mov	r0, #5
   20244:	stm	sp, {r0, r6}
   20248:	movw	r3, #19392	; 0x4bc0
   2024c:	movt	r3, #3
   20250:	mov	r0, r5
   20254:	mov	r1, r4
   20258:	mov	r2, #2
   2025c:	bl	2a770 <flatcc_json_printer_uint16_field@@Base>
   20260:	sub	sp, fp, #16
   20264:	pop	{r4, r5, r6, sl, fp, pc}
   20268:	push	{r4, r5, fp, lr}
   2026c:	add	fp, sp, #8
   20270:	sub	sp, sp, #8
   20274:	mov	r4, r1
   20278:	mov	r5, r0
   2027c:	mov	r0, #2
   20280:	movw	r1, #17106	; 0x42d2
   20284:	movt	r1, #3
   20288:	str	r1, [sp]
   2028c:	str	r0, [sp, #4]
   20290:	mov	r0, r5
   20294:	mov	r1, #0
   20298:	mov	r2, r4
   2029c:	mov	r3, #0
   202a0:	bl	2b814 <flatcc_json_printer_uint32_struct_field@@Base>
   202a4:	mov	r0, #8
   202a8:	movw	r1, #17113	; 0x42d9
   202ac:	movt	r1, #3
   202b0:	str	r1, [sp]
   202b4:	str	r0, [sp, #4]
   202b8:	mov	r0, r5
   202bc:	mov	r1, #1
   202c0:	mov	r2, r4
   202c4:	mov	r3, #4
   202c8:	bl	2b814 <flatcc_json_printer_uint32_struct_field@@Base>
   202cc:	sub	sp, fp, #8
   202d0:	pop	{r4, r5, fp, pc}
   202d4:	bx	lr
   202d8:	push	{r4, r5, r6, sl, fp, lr}
   202dc:	add	fp, sp, #16
   202e0:	sub	sp, sp, #8
   202e4:	mov	r4, r1
   202e8:	mov	r5, r0
   202ec:	mov	r6, #0
   202f0:	mov	r0, #4
   202f4:	stm	sp, {r0, r6}
   202f8:	movw	r3, #17125	; 0x42e5
   202fc:	movt	r3, #3
   20300:	mov	r0, r5
   20304:	mov	r2, #0
   20308:	bl	2a4d8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   2030c:	mov	r0, #1
   20310:	mov	r1, #7
   20314:	str	r1, [sp]
   20318:	str	r0, [sp, #4]
   2031c:	movw	r3, #17122	; 0x42e2
   20320:	movt	r3, #3
   20324:	mov	r0, r5
   20328:	mov	r1, r4
   2032c:	mov	r2, #1
   20330:	bl	2a4d8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20334:	mov	r0, #6
   20338:	stm	sp, {r0, r6}
   2033c:	movw	r3, #17130	; 0x42ea
   20340:	movt	r3, #3
   20344:	mov	r0, r5
   20348:	mov	r1, r4
   2034c:	mov	r2, #2
   20350:	bl	2a4d8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20354:	sub	sp, fp, #16
   20358:	pop	{r4, r5, r6, sl, fp, pc}
   2035c:	push	{r4, r5, r6, r7, fp, lr}
   20360:	add	fp, sp, #16
   20364:	sub	sp, sp, #16
   20368:	mov	r4, r1
   2036c:	mov	r5, r0
   20370:	movw	r7, #65504	; 0xffe0
   20374:	movt	r7, #1
   20378:	mov	r6, #2
   2037c:	mov	r0, #5
   20380:	stm	sp, {r0, r6, r7}
   20384:	movw	r3, #16266	; 0x3f8a
   20388:	movt	r3, #3
   2038c:	mov	r0, r5
   20390:	mov	r2, #0
   20394:	bl	2b2c0 <flatcc_json_printer_int8_enum_field@@Base>
   20398:	mov	r0, #6
   2039c:	stm	sp, {r0, r6, r7}
   203a0:	movw	r3, #16738	; 0x4162
   203a4:	movt	r3, #3
   203a8:	mov	r0, r5
   203ac:	mov	r1, r4
   203b0:	mov	r2, #1
   203b4:	bl	2b2c0 <flatcc_json_printer_int8_enum_field@@Base>
   203b8:	str	r6, [sp]
   203bc:	str	r6, [sp, #4]
   203c0:	movw	r3, #16745	; 0x4169
   203c4:	movt	r3, #3
   203c8:	mov	r0, r5
   203cc:	mov	r1, r4
   203d0:	mov	r2, #2
   203d4:	bl	2a6bc <flatcc_json_printer_uint8_field@@Base>
   203d8:	mov	r0, #3
   203dc:	stm	sp, {r0, r6}
   203e0:	movw	r3, #16748	; 0x416c
   203e4:	movt	r3, #3
   203e8:	mov	r0, r5
   203ec:	mov	r1, r4
   203f0:	mov	r2, #3
   203f4:	bl	2a6bc <flatcc_json_printer_uint8_field@@Base>
   203f8:	sub	sp, fp, #16
   203fc:	pop	{r4, r5, r6, r7, fp, pc}
   20400:	bx	lr
   20404:	push	{r4, r5, fp, lr}
   20408:	add	fp, sp, #8
   2040c:	sub	sp, sp, #16
   20410:	mov	r4, r1
   20414:	mov	r5, r0
   20418:	movw	r0, #1200	; 0x4b0
   2041c:	movt	r0, #2
   20420:	mov	r1, #6
   20424:	str	r1, [sp]
   20428:	str	r0, [sp, #4]
   2042c:	movw	r3, #16752	; 0x4170
   20430:	movt	r3, #3
   20434:	mov	r0, r5
   20438:	mov	r1, r4
   2043c:	mov	r2, #0
   20440:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   20444:	movw	r0, #1356	; 0x54c
   20448:	movt	r0, #2
   2044c:	mov	r1, #5
   20450:	str	r1, [sp]
   20454:	str	r0, [sp, #4]
   20458:	movw	r3, #16759	; 0x4177
   2045c:	movt	r3, #3
   20460:	mov	r0, r5
   20464:	mov	r1, r4
   20468:	mov	r2, #1
   2046c:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   20470:	movw	r0, #300	; 0x12c
   20474:	movt	r0, #2
   20478:	movw	r1, #184	; 0xb8
   2047c:	movt	r1, #2
   20480:	mov	r2, #7
   20484:	str	r2, [sp]
   20488:	str	r1, [sp, #4]
   2048c:	str	r0, [sp, #8]
   20490:	movw	r3, #16765	; 0x417d
   20494:	movt	r3, #3
   20498:	mov	r0, r5
   2049c:	mov	r1, r4
   204a0:	mov	r2, #3
   204a4:	bl	2ed40 <flatcc_json_printer_union_vector_field@@Base>
   204a8:	sub	sp, fp, #8
   204ac:	pop	{r4, r5, fp, pc}
   204b0:	push	{r4, r5, r6, sl, fp, lr}
   204b4:	add	fp, sp, #16
   204b8:	sub	sp, sp, #8
   204bc:	mov	r4, r1
   204c0:	mov	r5, r0
   204c4:	movw	r0, #1584	; 0x630
   204c8:	movt	r0, #2
   204cc:	mov	r1, #21
   204d0:	str	r1, [sp]
   204d4:	str	r0, [sp, #4]
   204d8:	movw	r3, #16773	; 0x4185
   204dc:	movt	r3, #3
   204e0:	mov	r0, r5
   204e4:	mov	r1, r4
   204e8:	mov	r2, #0
   204ec:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   204f0:	movw	r0, #1908	; 0x774
   204f4:	movt	r0, #2
   204f8:	mov	r6, #22
   204fc:	str	r6, [sp]
   20500:	str	r0, [sp, #4]
   20504:	movw	r3, #16795	; 0x419b
   20508:	movt	r3, #3
   2050c:	mov	r0, r5
   20510:	mov	r1, r4
   20514:	mov	r2, #1
   20518:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   2051c:	movw	r0, #2008	; 0x7d8
   20520:	movt	r0, #2
   20524:	str	r6, [sp]
   20528:	str	r0, [sp, #4]
   2052c:	movw	r3, #16818	; 0x41b2
   20530:	movt	r3, #3
   20534:	mov	r0, r5
   20538:	mov	r1, r4
   2053c:	mov	r2, #2
   20540:	bl	2f04c <flatcc_json_printer_table_field@@Base>
   20544:	sub	sp, fp, #16
   20548:	pop	{r4, r5, r6, sl, fp, pc}
   2054c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20550:	add	fp, sp, #24
   20554:	sub	sp, sp, #16
   20558:	mov	r4, r1
   2055c:	mov	r5, r0
   20560:	movw	r6, #2288	; 0x8f0
   20564:	movt	r6, #2
   20568:	movw	r7, #2108	; 0x83c
   2056c:	movt	r7, #2
   20570:	mov	r0, #14
   20574:	stm	sp, {r0, r7}
   20578:	str	r6, [sp, #8]
   2057c:	movw	r3, #16968	; 0x4248
   20580:	movt	r3, #3
   20584:	mov	r0, r5
   20588:	mov	r2, #1
   2058c:	bl	2f0d0 <flatcc_json_printer_union_field@@Base>
   20590:	mov	r8, #10
   20594:	str	r8, [sp]
   20598:	str	r7, [sp, #4]
   2059c:	str	r6, [sp, #8]
   205a0:	movw	r3, #16983	; 0x4257
   205a4:	movt	r3, #3
   205a8:	mov	r0, r5
   205ac:	mov	r1, r4
   205b0:	mov	r2, #3
   205b4:	bl	2f0d0 <flatcc_json_printer_union_field@@Base>
   205b8:	mov	r0, #9
   205bc:	stm	sp, {r0, r7}
   205c0:	str	r6, [sp, #8]
   205c4:	mov	r9, #5
   205c8:	movw	r3, #16994	; 0x4262
   205cc:	movt	r3, #3
   205d0:	mov	r0, r5
   205d4:	mov	r1, r4
   205d8:	mov	r2, #5
   205dc:	bl	2f0d0 <flatcc_json_printer_union_field@@Base>
   205e0:	str	r9, [sp]
   205e4:	str	r7, [sp, #4]
   205e8:	str	r6, [sp, #8]
   205ec:	movw	r3, #17004	; 0x426c
   205f0:	movt	r3, #3
   205f4:	mov	r0, r5
   205f8:	mov	r1, r4
   205fc:	mov	r2, #7
   20600:	bl	2f0d0 <flatcc_json_printer_union_field@@Base>
   20604:	str	r8, [sp]
   20608:	str	r7, [sp, #4]
   2060c:	str	r6, [sp, #8]
   20610:	movw	r3, #17010	; 0x4272
   20614:	movt	r3, #3
   20618:	mov	r0, r5
   2061c:	mov	r1, r4
   20620:	mov	r2, #9
   20624:	bl	2ed40 <flatcc_json_printer_union_vector_field@@Base>
   20628:	sub	sp, fp, #24
   2062c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20630:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20634:	add	fp, sp, #24
   20638:	sub	sp, sp, #16
   2063c:	mov	r4, r1
   20640:	mov	r5, r0
   20644:	mov	r9, #4
   20648:	str	r9, [sp]
   2064c:	mov	r6, #0
   20650:	movw	r3, #16841	; 0x41c9
   20654:	movt	r3, #3
   20658:	mov	r2, #0
   2065c:	bl	2a34c <flatcc_json_printer_string_field@@Base>
   20660:	mov	r8, #9
   20664:	str	r8, [sp]
   20668:	str	r6, [sp, #4]
   2066c:	movw	r3, #16846	; 0x41ce
   20670:	movt	r3, #3
   20674:	mov	r0, r5
   20678:	mov	r1, r4
   2067c:	mov	r2, #1
   20680:	bl	2a824 <flatcc_json_printer_uint32_field@@Base>
   20684:	str	r9, [sp]
   20688:	movw	r3, #16856	; 0x41d8
   2068c:	movt	r3, #3
   20690:	mov	r0, r5
   20694:	mov	r1, r4
   20698:	mov	r2, #2
   2069c:	bl	2a34c <flatcc_json_printer_string_field@@Base>
   206a0:	str	r6, [sp, #8]
   206a4:	str	r6, [sp, #12]
   206a8:	mov	r7, #8
   206ac:	str	r7, [sp]
   206b0:	movw	r3, #16861	; 0x41dd
   206b4:	movt	r3, #3
   206b8:	mov	r0, r5
   206bc:	mov	r1, r4
   206c0:	mov	r2, #3
   206c4:	bl	2abc8 <flatcc_json_printer_int64_field@@Base>
   206c8:	str	r9, [sp]
   206cc:	movw	r3, #16870	; 0x41e6
   206d0:	movt	r3, #3
   206d4:	mov	r0, r5
   206d8:	mov	r1, r4
   206dc:	mov	r2, #4
   206e0:	bl	2a34c <flatcc_json_printer_string_field@@Base>
   206e4:	str	r6, [sp, #8]
   206e8:	str	r6, [sp, #12]
   206ec:	str	r7, [sp]
   206f0:	movw	r3, #16875	; 0x41eb
   206f4:	movt	r3, #3
   206f8:	mov	r0, r5
   206fc:	mov	r1, r4
   20700:	mov	r2, #5
   20704:	bl	2abc8 <flatcc_json_printer_int64_field@@Base>
   20708:	str	r8, [sp]
   2070c:	str	r6, [sp, #4]
   20710:	movw	r3, #16884	; 0x41f4
   20714:	movt	r3, #3
   20718:	mov	r0, r5
   2071c:	mov	r1, r4
   20720:	mov	r2, #6
   20724:	bl	2a824 <flatcc_json_printer_uint32_field@@Base>
   20728:	str	r6, [sp, #8]
   2072c:	str	r6, [sp, #12]
   20730:	str	r7, [sp]
   20734:	movw	r3, #16894	; 0x41fe
   20738:	movt	r3, #3
   2073c:	mov	r0, r5
   20740:	mov	r1, r4
   20744:	mov	r2, #7
   20748:	bl	2abc8 <flatcc_json_printer_int64_field@@Base>
   2074c:	str	r8, [sp]
   20750:	str	r6, [sp, #4]
   20754:	movw	r3, #16903	; 0x4207
   20758:	movt	r3, #3
   2075c:	mov	r0, r5
   20760:	mov	r1, r4
   20764:	mov	r2, #8
   20768:	bl	2a824 <flatcc_json_printer_uint32_field@@Base>
   2076c:	sub	sp, fp, #24
   20770:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20774:	push	{r4, r5, r6, sl, fp, lr}
   20778:	add	fp, sp, #16
   2077c:	sub	sp, sp, #16
   20780:	mov	r4, r1
   20784:	mov	r5, r0
   20788:	mov	r6, #0
   2078c:	str	r6, [sp, #8]
   20790:	str	r6, [sp, #12]
   20794:	mov	r0, #15
   20798:	str	r0, [sp]
   2079c:	movw	r3, #16913	; 0x4211
   207a0:	movt	r3, #3
   207a4:	mov	r0, r5
   207a8:	mov	r2, #0
   207ac:	bl	2abc8 <flatcc_json_printer_int64_field@@Base>
   207b0:	mov	r0, #16
   207b4:	stm	sp, {r0, r6}
   207b8:	movw	r3, #16929	; 0x4221
   207bc:	movt	r3, #3
   207c0:	mov	r0, r5
   207c4:	mov	r1, r4
   207c8:	mov	r2, #1
   207cc:	bl	2a824 <flatcc_json_printer_uint32_field@@Base>
   207d0:	sub	sp, fp, #16
   207d4:	pop	{r4, r5, r6, sl, fp, pc}
   207d8:	push	{r4, r5, r6, sl, fp, lr}
   207dc:	add	fp, sp, #16
   207e0:	sub	sp, sp, #16
   207e4:	mov	r4, r1
   207e8:	mov	r5, r0
   207ec:	mov	r6, #0
   207f0:	str	r6, [sp, #8]
   207f4:	str	r6, [sp, #12]
   207f8:	mov	r0, #15
   207fc:	str	r0, [sp]
   20800:	movw	r3, #16913	; 0x4211
   20804:	movt	r3, #3
   20808:	mov	r0, r5
   2080c:	mov	r2, #0
   20810:	bl	2abc8 <flatcc_json_printer_int64_field@@Base>
   20814:	mov	r0, #21
   20818:	stm	sp, {r0, r6}
   2081c:	movw	r3, #16946	; 0x4232
   20820:	movt	r3, #3
   20824:	mov	r0, r5
   20828:	mov	r1, r4
   2082c:	mov	r2, #1
   20830:	bl	2a824 <flatcc_json_printer_uint32_field@@Base>
   20834:	sub	sp, fp, #16
   20838:	pop	{r4, r5, r6, sl, fp, pc}
   2083c:	sub	r2, r1, #2
   20840:	cmp	r2, #9
   20844:	bhi	20888 <main@@Base+0xab00>
   20848:	add	r1, pc, #0
   2084c:	ldr	pc, [r1, r2, lsl #2]
   20850:	andeq	r0, r2, r8, ror r8
   20854:	andeq	r0, r2, r0, lsr #17
   20858:	andeq	r0, r2, r0, lsr #17
   2085c:	andeq	r0, r2, r0, lsr #17
   20860:	andeq	r0, r2, r0, lsr #17
   20864:	andeq	r0, r2, r0, lsr #17
   20868:			; <UNDEFINED> instruction: 0x000208b0
   2086c:	andeq	r0, r2, r0, asr #17
   20870:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20874:	andeq	r0, r2, r0, ror #17
   20878:	movw	r1, #17021	; 0x427d
   2087c:	movt	r1, #3
   20880:	mov	r2, #5
   20884:	b	2a250 <flatcc_json_printer_enum@@Base>
   20888:	cmp	r1, #255	; 0xff
   2088c:	bne	208a0 <main@@Base+0xab18>
   20890:	movw	r1, #17056	; 0x42a0
   20894:	movt	r1, #3
   20898:	mov	r2, #6
   2089c:	b	2a250 <flatcc_json_printer_enum@@Base>
   208a0:	movw	r1, #23140	; 0x5a64
   208a4:	movt	r1, #3
   208a8:	mov	r2, #4
   208ac:	b	2a250 <flatcc_json_printer_enum@@Base>
   208b0:	movw	r1, #17027	; 0x4283
   208b4:	movt	r1, #3
   208b8:	mov	r2, #8
   208bc:	b	2a250 <flatcc_json_printer_enum@@Base>
   208c0:	movw	r1, #17036	; 0x428c
   208c4:	movt	r1, #3
   208c8:	mov	r2, #5
   208cc:	b	2a250 <flatcc_json_printer_enum@@Base>
   208d0:	movw	r1, #17042	; 0x4292
   208d4:	movt	r1, #3
   208d8:	mov	r2, #7
   208dc:	b	2a250 <flatcc_json_printer_enum@@Base>
   208e0:	movw	r1, #17050	; 0x429a
   208e4:	movt	r1, #3
   208e8:	mov	r2, #5
   208ec:	b	2a250 <flatcc_json_printer_enum@@Base>
   208f0:	ldrb	r3, [r1, #8]
   208f4:	sub	r2, r3, #2
   208f8:	cmp	r2, #9
   208fc:	bhi	2093c <main@@Base+0xabb4>
   20900:	add	r3, pc, #0
   20904:	ldr	pc, [r3, r2, lsl #2]
   20908:	andeq	r0, r2, r8, asr #18
   2090c:	andeq	r0, r2, r0, ror #18
   20910:	andeq	r0, r2, r0, ror #18
   20914:	andeq	r0, r2, r0, ror #18
   20918:	andeq	r0, r2, r0, ror #18
   2091c:	andeq	r0, r2, r0, ror #18
   20920:	andeq	r0, r2, r4, asr r9
   20924:	andeq	r0, r2, r0, lsr r9
   20928:	andeq	r0, r2, r0, lsr r9
   2092c:	andeq	r0, r2, r4, asr #18
   20930:	movw	r2, #2512	; 0x9d0
   20934:	movt	r2, #2
   20938:	b	2f308 <flatcc_json_printer_union_struct@@Base>
   2093c:	cmp	r3, #255	; 0xff
   20940:	bxne	lr
   20944:	b	2f398 <flatcc_json_printer_union_string@@Base>
   20948:	movw	r2, #2404	; 0x964
   2094c:	movt	r2, #2
   20950:	b	2f2d4 <flatcc_json_printer_union_table@@Base>
   20954:	movw	r2, #2456	; 0x998
   20958:	movt	r2, #2
   2095c:	b	2f308 <flatcc_json_printer_union_struct@@Base>
   20960:	bx	lr
   20964:	push	{fp, lr}
   20968:	mov	fp, sp
   2096c:	sub	sp, sp, #8
   20970:	mov	r2, #0
   20974:	mov	r3, #19
   20978:	str	r3, [sp]
   2097c:	str	r2, [sp, #4]
   20980:	movw	r3, #17063	; 0x42a7
   20984:	movt	r3, #3
   20988:	mov	r2, #0
   2098c:	bl	2ab14 <flatcc_json_printer_int32_field@@Base>
   20990:	mov	sp, fp
   20994:	pop	{fp, pc}
   20998:	push	{fp, lr}
   2099c:	mov	fp, sp
   209a0:	sub	sp, sp, #8
   209a4:	mov	r2, r1
   209a8:	mov	r1, #11
   209ac:	movw	r3, #17083	; 0x42bb
   209b0:	movt	r3, #3
   209b4:	str	r3, [sp]
   209b8:	str	r1, [sp, #4]
   209bc:	mov	r1, #0
   209c0:	mov	r3, #0
   209c4:	bl	2b7b4 <flatcc_json_printer_uint16_struct_field@@Base>
   209c8:	mov	sp, fp
   209cc:	pop	{fp, pc}
   209d0:	push	{fp, lr}
   209d4:	mov	fp, sp
   209d8:	sub	sp, sp, #8
   209dc:	mov	r2, r1
   209e0:	mov	r1, #10
   209e4:	movw	r3, #17095	; 0x42c7
   209e8:	movt	r3, #3
   209ec:	str	r3, [sp]
   209f0:	str	r1, [sp, #4]
   209f4:	mov	r1, #0
   209f8:	mov	r3, #0
   209fc:	bl	2b99c <flatcc_json_printer_int32_struct_field@@Base>
   20a00:	mov	sp, fp
   20a04:	pop	{fp, pc}
   20a08:	ldrb	r1, [r0, #12]
   20a0c:	sub	r1, r1, #1
   20a10:	uxtb	r2, r1
   20a14:	cmp	r2, #3
   20a18:	movhi	r0, #0
   20a1c:	bxhi	lr
   20a20:	sxtb	r1, r1
   20a24:	movw	r2, #17252	; 0x4364
   20a28:	movt	r2, #3
   20a2c:	ldr	r1, [r2, r1, lsl #2]
   20a30:	b	24fec <flatcc_verify_union_table@@Base>
   20a34:	push	{r4, sl, fp, lr}
   20a38:	add	fp, sp, #8
   20a3c:	mov	r4, r0
   20a40:	mov	r1, #0
   20a44:	mov	r2, #0
   20a48:	bl	249c8 <flatcc_verify_string_field@@Base>
   20a4c:	cmp	r0, #0
   20a50:	popne	{r4, sl, fp, pc}
   20a54:	mov	r0, r4
   20a58:	mov	r1, #1
   20a5c:	mov	r2, #8
   20a60:	mov	r3, #8
   20a64:	bl	2495c <flatcc_verify_field@@Base>
   20a68:	cmp	r0, #0
   20a6c:	beq	20a74 <main@@Base+0xacec>
   20a70:	pop	{r4, sl, fp, pc}
   20a74:	mov	r0, r4
   20a78:	mov	r1, #2
   20a7c:	mov	r2, #2
   20a80:	mov	r3, #2
   20a84:	pop	{r4, sl, fp, lr}
   20a88:	b	2495c <flatcc_verify_field@@Base>
   20a8c:	mov	r0, #0
   20a90:	bx	lr
   20a94:	push	{r4, r5, r6, sl, fp, lr}
   20a98:	add	fp, sp, #16
   20a9c:	sub	sp, sp, #8
   20aa0:	mov	r4, r0
   20aa4:	mvn	r5, #0
   20aa8:	mov	r6, #1
   20aac:	str	r6, [sp]
   20ab0:	str	r5, [sp, #4]
   20ab4:	mov	r1, #0
   20ab8:	mov	r2, #0
   20abc:	mov	r3, #1
   20ac0:	bl	24b1c <flatcc_verify_vector_field@@Base>
   20ac4:	cmp	r0, #0
   20ac8:	bne	20af0 <main@@Base+0xad68>
   20acc:	str	r6, [sp]
   20ad0:	str	r5, [sp, #4]
   20ad4:	mov	r0, r4
   20ad8:	mov	r1, #1
   20adc:	mov	r2, #0
   20ae0:	mov	r3, #1
   20ae4:	bl	24b1c <flatcc_verify_vector_field@@Base>
   20ae8:	cmp	r0, #0
   20aec:	beq	20af8 <main@@Base+0xad70>
   20af0:	sub	sp, fp, #16
   20af4:	pop	{r4, r5, r6, sl, fp, pc}
   20af8:	movw	r0, #37276	; 0x919c
   20afc:	movt	r0, #1
   20b00:	mov	r1, #1
   20b04:	str	r1, [sp]
   20b08:	str	r0, [sp, #4]
   20b0c:	mov	r0, r4
   20b10:	mov	r1, #2
   20b14:	mov	r2, #0
   20b18:	mov	r3, #0
   20b1c:	bl	25440 <flatcc_verify_table_as_nested_root@@Base>
   20b20:	sub	sp, fp, #16
   20b24:	pop	{r4, r5, r6, sl, fp, pc}
   20b28:	push	{r4, sl, fp, lr}
   20b2c:	add	fp, sp, #8
   20b30:	mov	r4, r0
   20b34:	mov	r1, #0
   20b38:	mov	r2, #1
   20b3c:	mov	r3, #1
   20b40:	bl	2495c <flatcc_verify_field@@Base>
   20b44:	cmp	r0, #0
   20b48:	bne	20b84 <main@@Base+0xadfc>
   20b4c:	mov	r0, r4
   20b50:	mov	r1, #1
   20b54:	mov	r2, #1
   20b58:	mov	r3, #1
   20b5c:	bl	2495c <flatcc_verify_field@@Base>
   20b60:	cmp	r0, #0
   20b64:	popne	{r4, sl, fp, pc}
   20b68:	mov	r0, r4
   20b6c:	mov	r1, #2
   20b70:	mov	r2, #1
   20b74:	mov	r3, #1
   20b78:	bl	2495c <flatcc_verify_field@@Base>
   20b7c:	cmp	r0, #0
   20b80:	beq	20b88 <main@@Base+0xae00>
   20b84:	pop	{r4, sl, fp, pc}
   20b88:	mov	r0, r4
   20b8c:	mov	r1, #3
   20b90:	mov	r2, #1
   20b94:	mov	r3, #1
   20b98:	pop	{r4, sl, fp, lr}
   20b9c:	b	2495c <flatcc_verify_field@@Base>
   20ba0:	mov	r0, #0
   20ba4:	bx	lr
   20ba8:	push	{r4, sl, fp, lr}
   20bac:	add	fp, sp, #8
   20bb0:	mov	r4, r0
   20bb4:	movw	r3, #3088	; 0xc10
   20bb8:	movt	r3, #2
   20bbc:	mov	r1, #0
   20bc0:	mov	r2, #0
   20bc4:	bl	24d18 <flatcc_verify_table_field@@Base>
   20bc8:	cmp	r0, #0
   20bcc:	popne	{r4, sl, fp, pc}
   20bd0:	movw	r3, #3192	; 0xc78
   20bd4:	movt	r3, #2
   20bd8:	mov	r0, r4
   20bdc:	mov	r1, #1
   20be0:	mov	r2, #0
   20be4:	bl	24d18 <flatcc_verify_table_field@@Base>
   20be8:	cmp	r0, #0
   20bec:	beq	20bf4 <main@@Base+0xae6c>
   20bf0:	pop	{r4, sl, fp, pc}
   20bf4:	movw	r3, #2568	; 0xa08
   20bf8:	movt	r3, #2
   20bfc:	mov	r0, r4
   20c00:	mov	r1, #3
   20c04:	mov	r2, #0
   20c08:	pop	{r4, sl, fp, lr}
   20c0c:	b	256b4 <flatcc_verify_union_vector_field@@Base>
   20c10:	push	{r4, sl, fp, lr}
   20c14:	add	fp, sp, #8
   20c18:	mov	r4, r0
   20c1c:	movw	r3, #3360	; 0xd20
   20c20:	movt	r3, #2
   20c24:	mov	r1, #0
   20c28:	mov	r2, #0
   20c2c:	bl	24d18 <flatcc_verify_table_field@@Base>
   20c30:	cmp	r0, #0
   20c34:	popne	{r4, sl, fp, pc}
   20c38:	movw	r3, #3608	; 0xe18
   20c3c:	movt	r3, #2
   20c40:	mov	r0, r4
   20c44:	mov	r1, #1
   20c48:	mov	r2, #0
   20c4c:	bl	24d18 <flatcc_verify_table_field@@Base>
   20c50:	cmp	r0, #0
   20c54:	beq	20c5c <main@@Base+0xaed4>
   20c58:	pop	{r4, sl, fp, pc}
   20c5c:	movw	r3, #3668	; 0xe54
   20c60:	movt	r3, #2
   20c64:	mov	r0, r4
   20c68:	mov	r1, #2
   20c6c:	mov	r2, #0
   20c70:	pop	{r4, sl, fp, lr}
   20c74:	b	24d18 <flatcc_verify_table_field@@Base>
   20c78:	push	{r4, sl, fp, lr}
   20c7c:	add	fp, sp, #8
   20c80:	mov	r4, r0
   20c84:	movw	r3, #3728	; 0xe90
   20c88:	movt	r3, #2
   20c8c:	mov	r1, #1
   20c90:	mov	r2, #0
   20c94:	bl	25548 <flatcc_verify_union_field@@Base>
   20c98:	cmp	r0, #0
   20c9c:	bne	20d00 <main@@Base+0xaf78>
   20ca0:	movw	r3, #3728	; 0xe90
   20ca4:	movt	r3, #2
   20ca8:	mov	r0, r4
   20cac:	mov	r1, #3
   20cb0:	mov	r2, #0
   20cb4:	bl	25548 <flatcc_verify_union_field@@Base>
   20cb8:	cmp	r0, #0
   20cbc:	bne	20d00 <main@@Base+0xaf78>
   20cc0:	movw	r3, #3728	; 0xe90
   20cc4:	movt	r3, #2
   20cc8:	mov	r0, r4
   20ccc:	mov	r1, #5
   20cd0:	mov	r2, #0
   20cd4:	bl	25548 <flatcc_verify_union_field@@Base>
   20cd8:	cmp	r0, #0
   20cdc:	popne	{r4, sl, fp, pc}
   20ce0:	movw	r3, #3728	; 0xe90
   20ce4:	movt	r3, #2
   20ce8:	mov	r0, r4
   20cec:	mov	r1, #7
   20cf0:	mov	r2, #0
   20cf4:	bl	25548 <flatcc_verify_union_field@@Base>
   20cf8:	cmp	r0, #0
   20cfc:	beq	20d04 <main@@Base+0xaf7c>
   20d00:	pop	{r4, sl, fp, pc}
   20d04:	movw	r3, #3728	; 0xe90
   20d08:	movt	r3, #2
   20d0c:	mov	r0, r4
   20d10:	mov	r1, #9
   20d14:	mov	r2, #0
   20d18:	pop	{r4, sl, fp, lr}
   20d1c:	b	256b4 <flatcc_verify_union_vector_field@@Base>
   20d20:	push	{r4, sl, fp, lr}
   20d24:	add	fp, sp, #8
   20d28:	mov	r4, r0
   20d2c:	mov	r1, #0
   20d30:	mov	r2, #0
   20d34:	bl	249c8 <flatcc_verify_string_field@@Base>
   20d38:	cmp	r0, #0
   20d3c:	bne	20dfc <main@@Base+0xb074>
   20d40:	mov	r0, r4
   20d44:	mov	r1, #1
   20d48:	mov	r2, #4
   20d4c:	mov	r3, #4
   20d50:	bl	2495c <flatcc_verify_field@@Base>
   20d54:	cmp	r0, #0
   20d58:	bne	20dfc <main@@Base+0xb074>
   20d5c:	mov	r0, r4
   20d60:	mov	r1, #2
   20d64:	mov	r2, #0
   20d68:	bl	249c8 <flatcc_verify_string_field@@Base>
   20d6c:	cmp	r0, #0
   20d70:	bne	20dfc <main@@Base+0xb074>
   20d74:	mov	r0, r4
   20d78:	mov	r1, #3
   20d7c:	mov	r2, #8
   20d80:	mov	r3, #8
   20d84:	bl	2495c <flatcc_verify_field@@Base>
   20d88:	cmp	r0, #0
   20d8c:	bne	20dfc <main@@Base+0xb074>
   20d90:	mov	r0, r4
   20d94:	mov	r1, #4
   20d98:	mov	r2, #0
   20d9c:	bl	249c8 <flatcc_verify_string_field@@Base>
   20da0:	cmp	r0, #0
   20da4:	bne	20dfc <main@@Base+0xb074>
   20da8:	mov	r0, r4
   20dac:	mov	r1, #5
   20db0:	mov	r2, #8
   20db4:	mov	r3, #8
   20db8:	bl	2495c <flatcc_verify_field@@Base>
   20dbc:	cmp	r0, #0
   20dc0:	bne	20dfc <main@@Base+0xb074>
   20dc4:	mov	r0, r4
   20dc8:	mov	r1, #6
   20dcc:	mov	r2, #4
   20dd0:	mov	r3, #4
   20dd4:	bl	2495c <flatcc_verify_field@@Base>
   20dd8:	cmp	r0, #0
   20ddc:	popne	{r4, sl, fp, pc}
   20de0:	mov	r0, r4
   20de4:	mov	r1, #7
   20de8:	mov	r2, #8
   20dec:	mov	r3, #8
   20df0:	bl	2495c <flatcc_verify_field@@Base>
   20df4:	cmp	r0, #0
   20df8:	beq	20e00 <main@@Base+0xb078>
   20dfc:	pop	{r4, sl, fp, pc}
   20e00:	mov	r0, r4
   20e04:	mov	r1, #8
   20e08:	mov	r2, #4
   20e0c:	mov	r3, #4
   20e10:	pop	{r4, sl, fp, lr}
   20e14:	b	2495c <flatcc_verify_field@@Base>
   20e18:	push	{r4, sl, fp, lr}
   20e1c:	add	fp, sp, #8
   20e20:	mov	r4, r0
   20e24:	mov	r1, #0
   20e28:	mov	r2, #8
   20e2c:	mov	r3, #8
   20e30:	bl	2495c <flatcc_verify_field@@Base>
   20e34:	cmp	r0, #0
   20e38:	popne	{r4, sl, fp, pc}
   20e3c:	mov	r0, r4
   20e40:	mov	r1, #1
   20e44:	mov	r2, #4
   20e48:	mov	r3, #4
   20e4c:	pop	{r4, sl, fp, lr}
   20e50:	b	2495c <flatcc_verify_field@@Base>
   20e54:	push	{r4, sl, fp, lr}
   20e58:	add	fp, sp, #8
   20e5c:	mov	r4, r0
   20e60:	mov	r1, #0
   20e64:	mov	r2, #8
   20e68:	mov	r3, #8
   20e6c:	bl	2495c <flatcc_verify_field@@Base>
   20e70:	cmp	r0, #0
   20e74:	popne	{r4, sl, fp, pc}
   20e78:	mov	r0, r4
   20e7c:	mov	r1, #1
   20e80:	mov	r2, #4
   20e84:	mov	r3, #4
   20e88:	pop	{r4, sl, fp, lr}
   20e8c:	b	2495c <flatcc_verify_field@@Base>
   20e90:	ldrb	r2, [r0, #12]
   20e94:	sub	r1, r2, #2
   20e98:	cmp	r1, #9
   20e9c:	bhi	20edc <main@@Base+0xb154>
   20ea0:	add	r2, pc, #0
   20ea4:	ldr	pc, [r2, r1, lsl #2]
   20ea8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20eac:	andeq	r0, r2, r8, ror #29
   20eb0:	andeq	r0, r2, r8, ror #29
   20eb4:	andeq	r0, r2, r8, ror #29
   20eb8:	andeq	r0, r2, r8, ror #29
   20ebc:	andeq	r0, r2, r8, ror #29
   20ec0:	strdeq	r0, [r2], -ip
   20ec4:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20ec8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20ecc:	andeq	r0, r2, r4, ror #29
   20ed0:	mov	r1, #4
   20ed4:	mov	r2, #4
   20ed8:	b	25020 <flatcc_verify_union_struct@@Base>
   20edc:	cmp	r2, #255	; 0xff
   20ee0:	bne	20ee8 <main@@Base+0xb160>
   20ee4:	b	250a0 <flatcc_verify_union_string@@Base>
   20ee8:	mov	r0, #0
   20eec:	bx	lr
   20ef0:	movw	r1, #3848	; 0xf08
   20ef4:	movt	r1, #2
   20ef8:	b	24fec <flatcc_verify_union_table@@Base>
   20efc:	mov	r1, #2
   20f00:	mov	r2, #2
   20f04:	b	25020 <flatcc_verify_union_struct@@Base>
   20f08:	mov	r1, #0
   20f0c:	mov	r2, #4
   20f10:	mov	r3, #4
   20f14:	b	2495c <flatcc_verify_field@@Base>

00020f18 <flatcc_builder_default_alloc@@Base>:
   20f18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20f1c:	add	fp, sp, #24
   20f20:	mov	r4, r1
   20f24:	cmp	r2, #0
   20f28:	beq	20f70 <flatcc_builder_default_alloc@@Base+0x58>
   20f2c:	mov	r8, r3
   20f30:	ldr	r0, [fp, #8]
   20f34:	sub	r1, r0, #1
   20f38:	cmp	r1, #6
   20f3c:	bhi	20f9c <flatcc_builder_default_alloc@@Base+0x84>
   20f40:	mov	r0, #256	; 0x100
   20f44:	add	r3, pc, #0
   20f48:	ldr	pc, [r3, r1, lsl #2]
   20f4c:			; <UNDEFINED> instruction: 0x00020fb0
   20f50:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   20f54:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   20f58:	andeq	r0, r2, r8, ror #30
   20f5c:	andeq	r0, r2, r4, lsr #31
   20f60:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   20f64:	andeq	r0, r2, ip, lsr #31
   20f68:	mov	r0, #288	; 0x120
   20f6c:	b	20fb0 <flatcc_builder_default_alloc@@Base+0x98>
   20f70:	ldr	r0, [r4]
   20f74:	cmp	r0, #0
   20f78:	moveq	r6, #0
   20f7c:	moveq	r0, r6
   20f80:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   20f84:	bl	14e54 <free@plt>
   20f88:	mov	r6, #0
   20f8c:	str	r6, [r4]
   20f90:	str	r6, [r4, #4]
   20f94:	mov	r0, r6
   20f98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20f9c:	mov	r0, #32
   20fa0:	b	20fb0 <flatcc_builder_default_alloc@@Base+0x98>
   20fa4:	mov	r0, r2
   20fa8:	b	20fb0 <flatcc_builder_default_alloc@@Base+0x98>
   20fac:	mov	r0, #64	; 0x40
   20fb0:	mov	r7, r0
   20fb4:	lsl	r0, r0, #1
   20fb8:	cmp	r7, r2
   20fbc:	bcc	20fb0 <flatcc_builder_default_alloc@@Base+0x98>
   20fc0:	ldr	r0, [r4, #4]
   20fc4:	mov	r6, #0
   20fc8:	cmp	r0, r2
   20fcc:	lsrcs	r0, r0, #1
   20fd0:	cmpcs	r0, r7
   20fd4:	bcs	2100c <flatcc_builder_default_alloc@@Base+0xf4>
   20fd8:	ldr	r0, [r4]
   20fdc:	mov	r1, r7
   20fe0:	bl	14e90 <realloc@plt>
   20fe4:	cmp	r0, #0
   20fe8:	mvneq	r6, #0
   20fec:	moveq	r0, r6
   20ff0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   20ff4:	mov	r5, r0
   20ff8:	cmp	r8, #0
   20ffc:	ldrne	r1, [r4, #4]
   21000:	cmpne	r7, r1
   21004:	bhi	21014 <flatcc_builder_default_alloc@@Base+0xfc>
   21008:	stm	r4, {r5, r7}
   2100c:	mov	r0, r6
   21010:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21014:	add	r0, r5, r1
   21018:	sub	r2, r7, r1
   2101c:	mov	r1, #0
   21020:	bl	14ef0 <memset@plt>
   21024:	b	21008 <flatcc_builder_default_alloc@@Base+0xf0>

00021028 <flatcc_builder_flush_vtable_cache@@Base>:
   21028:	push	{r4, r5, fp, lr}
   2102c:	add	fp, sp, #8
   21030:	mov	r4, r0
   21034:	ldr	r0, [r0, #116]	; 0x74
   21038:	cmp	r0, #0
   2103c:	popeq	{r4, r5, fp, pc}
   21040:	ldr	r0, [r4, #92]	; 0x5c
   21044:	ldr	r2, [r4, #96]	; 0x60
   21048:	mov	r5, #0
   2104c:	mov	r1, #0
   21050:	bl	14ef0 <memset@plt>
   21054:	mov	r0, #16
   21058:	str	r5, [r4, #120]	; 0x78
   2105c:	str	r0, [r4, #124]	; 0x7c
   21060:	pop	{r4, r5, fp, pc}

00021064 <flatcc_builder_custom_init@@Base>:
   21064:	push	{r4, r5, r6, r7, fp, lr}
   21068:	add	fp, sp, #16
   2106c:	mov	r5, r3
   21070:	mov	r6, r2
   21074:	mov	r7, r1
   21078:	mov	r4, r0
   2107c:	mov	r1, #0
   21080:	mov	r2, #232	; 0xe8
   21084:	bl	14ef0 <memset@plt>
   21088:	ldr	r0, [fp, #8]
   2108c:	cmp	r7, #0
   21090:	bne	210a8 <flatcc_builder_custom_init@@Base+0x44>
   21094:	mov	r1, #1
   21098:	str	r1, [r4, #184]	; 0xb8
   2109c:	add	r6, r4, #188	; 0xbc
   210a0:	movw	r7, #17468	; 0x443c
   210a4:	movt	r7, #2
   210a8:	movw	r1, #3864	; 0xf18
   210ac:	movt	r1, #2
   210b0:	cmp	r5, #0
   210b4:	movne	r1, r5
   210b8:	str	r6, [r4, #36]	; 0x24
   210bc:	str	r0, [r4, #40]	; 0x28
   210c0:	str	r7, [r4, #44]	; 0x2c
   210c4:	str	r1, [r4, #48]	; 0x30
   210c8:	mov	r0, #0
   210cc:	pop	{r4, r5, r6, r7, fp, pc}

000210d0 <flatcc_builder_init@@Base>:
   210d0:	push	{fp, lr}
   210d4:	mov	fp, sp
   210d8:	sub	sp, sp, #8
   210dc:	mov	r1, #0
   210e0:	str	r1, [sp]
   210e4:	mov	r1, #0
   210e8:	mov	r2, #0
   210ec:	mov	r3, #0
   210f0:	bl	21064 <flatcc_builder_custom_init@@Base>
   210f4:	mov	r0, #0
   210f8:	mov	sp, fp
   210fc:	pop	{fp, pc}

00021100 <flatcc_builder_custom_reset@@Base>:
   21100:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21104:	add	fp, sp, #24
   21108:	sub	sp, sp, #8
   2110c:	mov	r9, r2
   21110:	mov	r8, r1
   21114:	mov	r4, r0
   21118:	add	r7, r0, #52	; 0x34
   2111c:	mov	r5, #0
   21120:	ldr	r0, [r7]
   21124:	cmp	r0, #0
   21128:	beq	2116c <flatcc_builder_custom_reset@@Base+0x6c>
   2112c:	cmp	r9, #0
   21130:	cmpne	r5, #5
   21134:	beq	2115c <flatcc_builder_custom_reset@@Base+0x5c>
   21138:	ldr	r0, [r4, #40]	; 0x28
   2113c:	ldr	r6, [r4, #48]	; 0x30
   21140:	str	r5, [sp]
   21144:	mov	r1, r7
   21148:	mov	r2, #1
   2114c:	mov	r3, #1
   21150:	blx	r6
   21154:	cmp	r0, #0
   21158:	bne	2120c <flatcc_builder_custom_reset@@Base+0x10c>
   2115c:	ldm	r7, {r0, r2}
   21160:	mov	r1, #0
   21164:	bl	14ef0 <memset@plt>
   21168:	b	21178 <flatcc_builder_custom_reset@@Base+0x78>
   2116c:	ldr	r0, [r7, #4]
   21170:	cmp	r0, #0
   21174:	bne	2121c <flatcc_builder_custom_reset@@Base+0x11c>
   21178:	add	r7, r7, #8
   2117c:	add	r5, r5, #1
   21180:	cmp	r5, #8
   21184:	bcc	21120 <flatcc_builder_custom_reset@@Base+0x20>
   21188:	mov	r0, #0
   2118c:	str	r0, [r4, #120]	; 0x78
   21190:	ldr	r1, [r4, #124]	; 0x7c
   21194:	cmp	r1, #0
   21198:	movne	r1, #16
   2119c:	strne	r1, [r4, #124]	; 0x7c
   211a0:	vmov.i32	q8, #0	; 0x00000000
   211a4:	strh	r0, [r4, #128]	; 0x80
   211a8:	str	r0, [r4, #136]	; 0x88
   211ac:	str	r0, [r4, #140]	; 0x8c
   211b0:	str	r0, [r4, #32]
   211b4:	add	r1, r4, #148	; 0x94
   211b8:	vst1.32	{d16-d17}, [r1]
   211bc:	ldr	r1, [r4, #52]	; 0x34
   211c0:	ldr	r2, [r4, #60]	; 0x3c
   211c4:	ldr	r3, [r4, #76]	; 0x4c
   211c8:	str	r2, [r4, #16]
   211cc:	str	r0, [r4, #20]
   211d0:	str	r0, [r4, #24]
   211d4:	str	r3, [r4]
   211d8:	str	r1, [r4, #4]
   211dc:	cmp	r8, #0
   211e0:	movne	r0, #0
   211e4:	strne	r0, [r4, #172]	; 0xac
   211e8:	strne	r0, [r4, #176]	; 0xb0
   211ec:	strne	r0, [r4, #180]	; 0xb4
   211f0:	ldr	r0, [r4, #184]	; 0xb8
   211f4:	mov	r5, #0
   211f8:	cmp	r0, #0
   211fc:	beq	21210 <flatcc_builder_custom_reset@@Base+0x110>
   21200:	add	r0, r4, #188	; 0xbc
   21204:	bl	2431c <flatcc_emitter_reset@@Base>
   21208:	b	21210 <flatcc_builder_custom_reset@@Base+0x110>
   2120c:	mvn	r5, #0
   21210:	mov	r0, r5
   21214:	sub	sp, fp, #24
   21218:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2121c:	movw	r0, #17780	; 0x4574
   21220:	movt	r0, #3
   21224:	movw	r1, #17798	; 0x4586
   21228:	movt	r1, #3
   2122c:	movw	r3, #17868	; 0x45cc
   21230:	movt	r3, #3
   21234:	movw	r2, #434	; 0x1b2
   21238:	bl	14f44 <__assert_fail@plt>

0002123c <flatcc_builder_reset@@Base>:
   2123c:	mov	r1, #0
   21240:	mov	r2, #0
   21244:	b	21100 <flatcc_builder_custom_reset@@Base>

00021248 <flatcc_builder_clear@@Base>:
   21248:	push	{r4, r5, r6, r7, fp, lr}
   2124c:	add	fp, sp, #16
   21250:	sub	sp, sp, #8
   21254:	mov	r7, r0
   21258:	add	r5, r0, #52	; 0x34
   2125c:	mov	r6, #0
   21260:	ldr	r0, [r7, #40]	; 0x28
   21264:	ldr	r4, [r7, #48]	; 0x30
   21268:	str	r6, [sp]
   2126c:	mov	r1, r5
   21270:	mov	r2, #0
   21274:	mov	r3, #0
   21278:	blx	r4
   2127c:	add	r5, r5, #8
   21280:	add	r6, r6, #1
   21284:	cmp	r6, #8
   21288:	bne	21260 <flatcc_builder_clear@@Base+0x18>
   2128c:	ldr	r0, [r7, #184]	; 0xb8
   21290:	cmp	r0, #0
   21294:	beq	212a0 <flatcc_builder_clear@@Base+0x58>
   21298:	add	r0, r7, #188	; 0xbc
   2129c:	bl	243d8 <flatcc_emitter_clear@@Base>
   212a0:	mov	r0, r7
   212a4:	mov	r1, #0
   212a8:	mov	r2, #232	; 0xe8
   212ac:	sub	sp, fp, #16
   212b0:	pop	{r4, r5, r6, r7, fp, lr}
   212b4:	b	14ef0 <memset@plt>

000212b8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   212b8:	push	{r4, r5, r6, r7, fp, lr}
   212bc:	add	fp, sp, #16
   212c0:	sub	sp, sp, #8
   212c4:	mov	r4, r0
   212c8:	ldr	r2, [r0, #228]	; 0xe4
   212cc:	mov	r7, #0
   212d0:	str	r7, [sp]
   212d4:	add	r0, r1, #7
   212d8:	bic	r5, r0, #3
   212dc:	mov	r0, r4
   212e0:	mov	r1, #7
   212e4:	mov	r3, r5
   212e8:	bl	21330 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   212ec:	cmp	r0, #0
   212f0:	beq	21324 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   212f4:	mov	r6, r0
   212f8:	mov	r1, #0
   212fc:	mov	r2, r5
   21300:	bl	14ef0 <memset@plt>
   21304:	ldr	r0, [r4, #224]	; 0xe0
   21308:	str	r0, [r6], #4
   2130c:	ldr	r0, [r4, #228]	; 0xe4
   21310:	add	r1, r0, #4
   21314:	add	r0, r0, r5
   21318:	str	r1, [r4, #224]	; 0xe0
   2131c:	str	r0, [r4, #228]	; 0xe4
   21320:	mov	r7, r6
   21324:	mov	r0, r7
   21328:	sub	sp, fp, #16
   2132c:	pop	{r4, r5, r6, r7, fp, pc}
   21330:	push	{r4, r5, fp, lr}
   21334:	add	fp, sp, #8
   21338:	sub	sp, sp, #8
   2133c:	mov	r4, r2
   21340:	add	r2, r3, r2
   21344:	add	r3, r0, r1, lsl #3
   21348:	add	r5, r3, #52	; 0x34
   2134c:	ldr	r3, [r3, #56]	; 0x38
   21350:	cmp	r2, r3
   21354:	bls	2137c <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   21358:	ldr	r3, [fp, #8]
   2135c:	ldr	ip, [r0, #40]	; 0x28
   21360:	ldr	lr, [r0, #48]	; 0x30
   21364:	str	r1, [sp]
   21368:	mov	r0, ip
   2136c:	mov	r1, r5
   21370:	blx	lr
   21374:	cmp	r0, #0
   21378:	bne	2138c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   2137c:	ldr	r0, [r5]
   21380:	add	r0, r0, r4
   21384:	sub	sp, fp, #8
   21388:	pop	{r4, r5, fp, pc}
   2138c:	movw	r0, #22316	; 0x572c
   21390:	movt	r0, #3
   21394:	movw	r1, #17798	; 0x4586
   21398:	movt	r1, #3
   2139c:	movw	r3, #21862	; 0x5566
   213a0:	movt	r3, #3
   213a4:	mov	r2, #308	; 0x134
   213a8:	bl	14f44 <__assert_fail@plt>

000213ac <flatcc_builder_enter_user_frame@@Base>:
   213ac:	push	{r4, r5, r6, r7, fp, lr}
   213b0:	add	fp, sp, #16
   213b4:	sub	sp, sp, #8
   213b8:	mov	r4, r0
   213bc:	ldr	r2, [r0, #228]	; 0xe4
   213c0:	mov	r6, #0
   213c4:	str	r6, [sp]
   213c8:	add	r0, r1, #7
   213cc:	bic	r5, r0, #3
   213d0:	mov	r0, r4
   213d4:	mov	r1, #7
   213d8:	mov	r3, r5
   213dc:	bl	21330 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   213e0:	cmp	r0, #0
   213e4:	beq	21414 <flatcc_builder_enter_user_frame@@Base+0x68>
   213e8:	mov	r7, r0
   213ec:	mov	r1, #0
   213f0:	mov	r2, r5
   213f4:	bl	14ef0 <memset@plt>
   213f8:	ldr	r0, [r4, #224]	; 0xe0
   213fc:	str	r0, [r7]
   21400:	ldr	r0, [r4, #228]	; 0xe4
   21404:	add	r6, r0, #4
   21408:	add	r0, r0, r5
   2140c:	str	r6, [r4, #224]	; 0xe0
   21410:	str	r0, [r4, #228]	; 0xe4
   21414:	mov	r0, r6
   21418:	sub	sp, fp, #16
   2141c:	pop	{r4, r5, r6, r7, fp, pc}

00021420 <flatcc_builder_exit_user_frame@@Base>:
   21420:	ldr	r1, [r0, #224]	; 0xe0
   21424:	cmp	r1, #0
   21428:	subne	r2, r1, #4
   2142c:	strne	r2, [r0, #228]	; 0xe4
   21430:	ldrne	r2, [r0, #108]	; 0x6c
   21434:	addne	r1, r2, r1
   21438:	ldrne	r1, [r1, #-4]
   2143c:	strne	r1, [r0, #224]	; 0xe0
   21440:	movne	r0, r1
   21444:	bxne	lr
   21448:	push	{fp, lr}
   2144c:	mov	fp, sp
   21450:	movw	r0, #17930	; 0x460a
   21454:	movt	r0, #3
   21458:	movw	r1, #17798	; 0x4586
   2145c:	movt	r1, #3
   21460:	movw	r3, #17955	; 0x4623
   21464:	movt	r3, #3
   21468:	movw	r2, #542	; 0x21e
   2146c:	bl	14f44 <__assert_fail@plt>

00021470 <flatcc_builder_exit_user_frame_at@@Base>:
   21470:	ldr	r2, [r0, #224]	; 0xe0
   21474:	cmp	r2, r1
   21478:	bcc	21484 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   2147c:	str	r1, [r0, #224]	; 0xe0
   21480:	b	21420 <flatcc_builder_exit_user_frame@@Base>
   21484:	push	{fp, lr}
   21488:	mov	fp, sp
   2148c:	movw	r0, #18013	; 0x465d
   21490:	movt	r0, #3
   21494:	movw	r1, #17798	; 0x4586
   21498:	movt	r1, #3
   2149c:	movw	r3, #18044	; 0x467c
   214a0:	movt	r3, #3
   214a4:	movw	r2, #551	; 0x227
   214a8:	bl	14f44 <__assert_fail@plt>

000214ac <flatcc_builder_get_current_user_frame@@Base>:
   214ac:	ldr	r0, [r0, #224]	; 0xe0
   214b0:	bx	lr

000214b4 <flatcc_builder_get_user_frame_ptr@@Base>:
   214b4:	ldr	r0, [r0, #108]	; 0x6c
   214b8:	add	r0, r0, r1
   214bc:	bx	lr

000214c0 <flatcc_builder_embed_buffer@@Base>:
   214c0:	push	{r4, r5, r6, r7, fp, lr}
   214c4:	add	fp, sp, #16
   214c8:	sub	sp, sp, #80	; 0x50
   214cc:	mov	r5, r3
   214d0:	mov	r6, r2
   214d4:	mov	r2, r1
   214d8:	mov	r4, r0
   214dc:	ldr	r0, [fp, #8]
   214e0:	strh	r0, [fp, #-18]	; 0xffffffee
   214e4:	ldr	r3, [r4, #152]	; 0x98
   214e8:	cmp	r3, #0
   214ec:	movwne	r3, #1
   214f0:	sub	r1, fp, #18
   214f4:	mov	r0, r4
   214f8:	bl	215cc <flatcc_builder_embed_buffer@@Base+0x10c>
   214fc:	ldr	r0, [fp, #12]
   21500:	and	r0, r0, #2
   21504:	add	r1, r5, r0, lsl #1
   21508:	ldrh	r2, [fp, #-18]	; 0xffffffee
   2150c:	mov	r0, r4
   21510:	bl	21688 <flatcc_builder_embed_buffer@@Base+0x1c8>
   21514:	mov	r7, r0
   21518:	add	r0, r0, r5
   2151c:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   21520:	mov	r1, #0
   21524:	str	r1, [sp]
   21528:	str	r0, [fp, #-24]	; 0xffffffe8
   2152c:	str	r1, [sp, #4]
   21530:	ldr	r0, [r4, #152]	; 0x98
   21534:	cmp	r0, #0
   21538:	beq	21558 <flatcc_builder_embed_buffer@@Base+0x98>
   2153c:	sub	r0, fp, #24
   21540:	str	r0, [sp, #8]
   21544:	mov	r0, #4
   21548:	str	r0, [sp]
   2154c:	str	r0, [sp, #12]
   21550:	mov	r0, #1
   21554:	str	r0, [sp, #4]
   21558:	cmp	r5, #0
   2155c:	beq	21584 <flatcc_builder_embed_buffer@@Base+0xc4>
   21560:	ldm	sp, {r0, r1}
   21564:	add	r0, r0, r5
   21568:	str	r0, [sp]
   2156c:	mov	r0, sp
   21570:	add	r0, r0, r1, lsl #3
   21574:	str	r6, [r0, #8]
   21578:	str	r5, [r0, #12]
   2157c:	add	r0, r1, #1
   21580:	str	r0, [sp, #4]
   21584:	cmp	r7, #0
   21588:	beq	215b8 <flatcc_builder_embed_buffer@@Base+0xf8>
   2158c:	ldm	sp, {r0, r1}
   21590:	add	r0, r0, r7
   21594:	str	r0, [sp]
   21598:	mov	r0, sp
   2159c:	add	r0, r0, r1, lsl #3
   215a0:	movw	r2, #17268	; 0x4374
   215a4:	movt	r2, #3
   215a8:	str	r2, [r0, #8]
   215ac:	str	r7, [r0, #12]
   215b0:	add	r0, r1, #1
   215b4:	str	r0, [sp, #4]
   215b8:	mov	r1, sp
   215bc:	mov	r0, r4
   215c0:	bl	216a0 <flatcc_builder_embed_buffer@@Base+0x1e0>
   215c4:	sub	sp, fp, #16
   215c8:	pop	{r4, r5, r6, r7, fp, pc}
   215cc:	push	{r4, r5, r6, r7, fp, lr}
   215d0:	add	fp, sp, #16
   215d4:	sub	sp, sp, #72	; 0x48
   215d8:	mov	r6, r3
   215dc:	mov	r5, r2
   215e0:	mov	r7, r1
   215e4:	mov	r4, r0
   215e8:	cmp	r2, #0
   215ec:	bne	215fc <flatcc_builder_embed_buffer@@Base+0x13c>
   215f0:	ldrh	r5, [r4, #132]	; 0x84
   215f4:	cmp	r5, #0
   215f8:	movweq	r5, #1
   215fc:	mov	r0, r7
   21600:	mov	r1, #4
   21604:	bl	22474 <flatcc_builder_start_vector@@Base+0x80>
   21608:	mov	r0, r7
   2160c:	mov	r1, r5
   21610:	bl	22474 <flatcc_builder_start_vector@@Base+0x80>
   21614:	cmp	r6, #0
   21618:	bne	21660 <flatcc_builder_embed_buffer@@Base+0x1a0>
   2161c:	mov	r0, r4
   21620:	mov	r1, r5
   21624:	bl	24170 <flatcc_builder_get_emit_context@@Base+0x8>
   21628:	cmp	r0, #0
   2162c:	beq	21660 <flatcc_builder_embed_buffer@@Base+0x1a0>
   21630:	movw	r1, #17268	; 0x4374
   21634:	movt	r1, #3
   21638:	str	r1, [sp, #8]
   2163c:	str	r0, [sp]
   21640:	str	r0, [sp, #12]
   21644:	mov	r0, #1
   21648:	str	r0, [sp, #4]
   2164c:	mov	r1, sp
   21650:	mov	r0, r4
   21654:	bl	22800 <flatcc_builder_create_vtable@@Base+0x80>
   21658:	cmp	r0, #0
   2165c:	beq	21668 <flatcc_builder_embed_buffer@@Base+0x1a8>
   21660:	sub	sp, fp, #16
   21664:	pop	{r4, r5, r6, r7, fp, pc}
   21668:	movw	r0, #22316	; 0x572c
   2166c:	movt	r0, #3
   21670:	movw	r1, #17798	; 0x4586
   21674:	movt	r1, #3
   21678:	movw	r3, #21929	; 0x55a9
   2167c:	movt	r3, #3
   21680:	movw	r2, #702	; 0x2be
   21684:	bl	14f44 <__assert_fail@plt>
   21688:	ldr	r0, [r0, #136]	; 0x88
   2168c:	sub	r0, r0, r1
   21690:	sub	r1, r2, #1
   21694:	and	r0, r0, r1
   21698:	bx	lr
   2169c:	bx	lr
   216a0:	push	{r4, r5, fp, lr}
   216a4:	add	fp, sp, #8
   216a8:	sub	sp, sp, #8
   216ac:	ldr	r3, [r1]
   216b0:	cmp	r3, #0
   216b4:	ble	21714 <flatcc_builder_embed_buffer@@Base+0x254>
   216b8:	mov	r4, r0
   216bc:	ldr	r0, [r0, #136]	; 0x88
   216c0:	sub	r5, r0, r3
   216c4:	ldr	r2, [r1, #4]
   216c8:	ldr	r0, [r4, #36]	; 0x24
   216cc:	ldr	ip, [r4, #44]	; 0x2c
   216d0:	str	r3, [sp]
   216d4:	add	r1, r1, #8
   216d8:	mov	r3, r5
   216dc:	blx	ip
   216e0:	cmp	r0, #0
   216e4:	streq	r5, [r4, #136]	; 0x88
   216e8:	moveq	r0, r5
   216ec:	subeq	sp, fp, #8
   216f0:	popeq	{r4, r5, fp, pc}
   216f4:	movw	r0, #22316	; 0x572c
   216f8:	movt	r0, #3
   216fc:	movw	r1, #17798	; 0x4586
   21700:	movt	r1, #3
   21704:	movw	r3, #21995	; 0x55eb
   21708:	movt	r3, #3
   2170c:	movw	r2, #651	; 0x28b
   21710:	bl	14f44 <__assert_fail@plt>
   21714:	movw	r0, #22316	; 0x572c
   21718:	movt	r0, #3
   2171c:	movw	r1, #17798	; 0x4586
   21720:	movt	r1, #3
   21724:	movw	r3, #21995	; 0x55eb
   21728:	movt	r3, #3
   2172c:	movw	r2, #647	; 0x287
   21730:	bl	14f44 <__assert_fail@plt>

00021734 <flatcc_builder_create_buffer@@Base>:
   21734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21738:	add	fp, sp, #28
   2173c:	sub	sp, sp, #92	; 0x5c
   21740:	mov	r6, r3
   21744:	mov	r7, r1
   21748:	mov	r4, r0
   2174c:	ldr	r0, [fp, #8]
   21750:	strh	r0, [fp, #-30]	; 0xffffffe2
   21754:	mov	r0, #0
   21758:	str	r0, [sp, #4]
   2175c:	ldr	sl, [fp, #12]
   21760:	and	r9, sl, #1
   21764:	sub	r1, fp, #30
   21768:	mov	r0, r4
   2176c:	mov	r3, r9
   21770:	bl	215cc <flatcc_builder_embed_buffer@@Base+0x10c>
   21774:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   21778:	mov	r0, r4
   2177c:	mov	r1, r5
   21780:	bl	21904 <flatcc_builder_create_buffer@@Base+0x1d0>
   21784:	cmp	r7, #0
   21788:	str	r6, [sp]
   2178c:	beq	217a8 <flatcc_builder_create_buffer@@Base+0x74>
   21790:	ldr	r7, [r7]
   21794:	mov	r0, r7
   21798:	bl	21914 <flatcc_builder_create_buffer@@Base+0x1e0>
   2179c:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   217a0:	str	r7, [sp, #4]
   217a4:	b	217ac <flatcc_builder_create_buffer@@Base+0x78>
   217a8:	ldr	r7, [sp, #4]
   217ac:	mov	r8, #4
   217b0:	and	r0, r8, sl, lsl #1
   217b4:	cmp	r7, #0
   217b8:	mov	r6, r7
   217bc:	movwne	r6, #1
   217c0:	add	r0, r0, r6, lsl #2
   217c4:	add	r1, r0, #4
   217c8:	mov	r0, r4
   217cc:	mov	r2, r5
   217d0:	bl	21688 <flatcc_builder_embed_buffer@@Base+0x1c8>
   217d4:	mov	r1, #0
   217d8:	str	r1, [sp, #8]
   217dc:	str	r1, [sp, #12]
   217e0:	ands	ip, sl, #3
   217e4:	beq	21800 <flatcc_builder_create_buffer@@Base+0xcc>
   217e8:	sub	r1, fp, #40	; 0x28
   217ec:	str	r1, [sp, #16]
   217f0:	str	r8, [sp, #8]
   217f4:	str	r8, [sp, #20]
   217f8:	mov	r1, #1
   217fc:	str	r1, [sp, #12]
   21800:	ldr	r1, [sp, #8]
   21804:	ldr	r3, [sp, #12]
   21808:	add	r5, r1, #4
   2180c:	str	r5, [sp, #8]
   21810:	add	lr, sp, #8
   21814:	add	r1, lr, r3, lsl #3
   21818:	sub	r2, fp, #36	; 0x24
   2181c:	str	r2, [r1, #8]
   21820:	str	r8, [r1, #12]
   21824:	add	r1, r3, #1
   21828:	str	r1, [sp, #12]
   2182c:	cmp	r7, #0
   21830:	beq	21858 <flatcc_builder_create_buffer@@Base+0x124>
   21834:	lsl	r2, r6, #2
   21838:	add	r5, r5, r2
   2183c:	str	r5, [sp, #8]
   21840:	add	r1, lr, r1, lsl #3
   21844:	add	r5, sp, #4
   21848:	str	r5, [r1, #8]
   2184c:	str	r2, [r1, #12]
   21850:	add	r1, r3, #2
   21854:	str	r1, [sp, #12]
   21858:	cmp	r0, #0
   2185c:	beq	2188c <flatcc_builder_create_buffer@@Base+0x158>
   21860:	ldr	r1, [sp, #8]
   21864:	ldr	r2, [sp, #12]
   21868:	add	r1, r1, r0
   2186c:	str	r1, [sp, #8]
   21870:	add	r1, lr, r2, lsl #3
   21874:	movw	r3, #17268	; 0x4374
   21878:	movt	r3, #3
   2187c:	str	r3, [r1, #8]
   21880:	str	r0, [r1, #12]
   21884:	add	r0, r2, #1
   21888:	str	r0, [sp, #12]
   2188c:	ldr	r0, [r4, #136]	; 0x88
   21890:	ldr	r1, [sp, #8]
   21894:	sub	r5, r0, r1
   21898:	cmp	ip, #0
   2189c:	addne	r5, r5, #4
   218a0:	mov	r0, #144	; 0x90
   218a4:	cmp	r9, #0
   218a8:	movweq	r0, #140	; 0x8c
   218ac:	ldr	r0, [r4, r0]
   218b0:	sub	r0, r0, r5
   218b4:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   218b8:	str	r0, [fp, #-40]	; 0xffffffd8
   218bc:	ldr	r0, [sp]
   218c0:	sub	r0, r0, r5
   218c4:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   218c8:	str	r0, [fp, #-36]	; 0xffffffdc
   218cc:	add	r1, sp, #8
   218d0:	mov	r0, r4
   218d4:	bl	216a0 <flatcc_builder_embed_buffer@@Base+0x1e0>
   218d8:	cmp	r0, #0
   218dc:	subne	sp, fp, #28
   218e0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218e4:	movw	r0, #22316	; 0x572c
   218e8:	movt	r0, #3
   218ec:	movw	r1, #17798	; 0x4586
   218f0:	movt	r1, #3
   218f4:	movw	r3, #18113	; 0x46c1
   218f8:	movt	r3, #3
   218fc:	mov	r2, #772	; 0x304
   21900:	bl	14f44 <__assert_fail@plt>
   21904:	ldrh	r2, [r0, #128]	; 0x80
   21908:	cmp	r2, r1
   2190c:	strhcc	r1, [r0, #128]	; 0x80
   21910:	bx	lr
   21914:	bx	lr

00021918 <flatcc_builder_create_struct@@Base>:
   21918:	push	{r4, r5, r6, r7, fp, lr}
   2191c:	add	fp, sp, #16
   21920:	sub	sp, sp, #72	; 0x48
   21924:	cmp	r3, #0
   21928:	beq	219c0 <flatcc_builder_create_struct@@Base+0xa8>
   2192c:	mov	r7, r3
   21930:	mov	r5, r2
   21934:	mov	r6, r1
   21938:	mov	r4, r0
   2193c:	mov	r1, r3
   21940:	bl	21904 <flatcc_builder_create_buffer@@Base+0x1d0>
   21944:	mov	r0, r4
   21948:	mov	r1, r5
   2194c:	mov	r2, r7
   21950:	bl	21688 <flatcc_builder_embed_buffer@@Base+0x1c8>
   21954:	mov	r1, #0
   21958:	str	r1, [sp]
   2195c:	str	r1, [sp, #4]
   21960:	cmp	r5, #0
   21964:	strne	r6, [sp, #8]
   21968:	strne	r5, [sp]
   2196c:	strne	r5, [sp, #12]
   21970:	movne	r1, #1
   21974:	strne	r1, [sp, #4]
   21978:	cmp	r0, #0
   2197c:	beq	219ac <flatcc_builder_create_struct@@Base+0x94>
   21980:	ldm	sp, {r1, r2}
   21984:	add	r1, r1, r0
   21988:	str	r1, [sp]
   2198c:	mov	r1, sp
   21990:	add	r1, r1, r2, lsl #3
   21994:	movw	r3, #17268	; 0x4374
   21998:	movt	r3, #3
   2199c:	str	r3, [r1, #8]
   219a0:	str	r0, [r1, #12]
   219a4:	add	r0, r2, #1
   219a8:	str	r0, [sp, #4]
   219ac:	mov	r1, sp
   219b0:	mov	r0, r4
   219b4:	bl	216a0 <flatcc_builder_embed_buffer@@Base+0x1e0>
   219b8:	sub	sp, fp, #16
   219bc:	pop	{r4, r5, r6, r7, fp, pc}
   219c0:	movw	r0, #18244	; 0x4744
   219c4:	movt	r0, #3
   219c8:	movw	r1, #17798	; 0x4586
   219cc:	movt	r1, #3
   219d0:	movw	r3, #18255	; 0x474f
   219d4:	movt	r3, #3
   219d8:	movw	r2, #783	; 0x30f
   219dc:	bl	14f44 <__assert_fail@plt>

000219e0 <flatcc_builder_start_buffer@@Base>:
   219e0:	push	{r4, r5, r6, r7, fp, lr}
   219e4:	add	fp, sp, #16
   219e8:	mov	r6, r3
   219ec:	mov	r7, r2
   219f0:	mov	r5, r1
   219f4:	mov	r4, r0
   219f8:	ldrh	r1, [r0, #128]	; 0x80
   219fc:	bl	21a9c <flatcc_builder_start_buffer@@Base+0xbc>
   21a00:	mov	r1, r0
   21a04:	mvn	r0, #0
   21a08:	cmp	r1, #0
   21a0c:	popne	{r4, r5, r6, r7, fp, pc}
   21a10:	mov	r0, #1
   21a14:	strh	r0, [r4, #128]	; 0x80
   21a18:	ldrh	r1, [r4, #132]	; 0x84
   21a1c:	ldr	r2, [r4, #32]
   21a20:	strh	r1, [r2, #34]	; 0x22
   21a24:	strh	r7, [r4, #132]	; 0x84
   21a28:	ldrh	r1, [r4, #164]	; 0xa4
   21a2c:	ldr	r2, [r4, #32]
   21a30:	strh	r1, [r2, #32]
   21a34:	strh	r6, [r4, #164]	; 0xa4
   21a38:	ldr	r1, [r4, #32]
   21a3c:	ldr	r2, [r4, #144]	; 0x90
   21a40:	str	r2, [r1, #20]
   21a44:	ldr	r1, [r4, #32]
   21a48:	ldr	r2, [r4, #152]	; 0x98
   21a4c:	str	r2, [r1, #28]
   21a50:	ldr	r1, [r4, #32]
   21a54:	ldr	r2, [r4, #136]	; 0x88
   21a58:	ldr	r3, [r4, #148]	; 0x94
   21a5c:	ldr	r7, [r4, #168]	; 0xa8
   21a60:	add	r6, r3, #1
   21a64:	str	r2, [r4, #144]	; 0x90
   21a68:	str	r6, [r4, #148]	; 0x94
   21a6c:	str	r3, [r4, #152]	; 0x98
   21a70:	str	r7, [r1, #16]
   21a74:	movw	r1, #17268	; 0x4374
   21a78:	movt	r1, #3
   21a7c:	cmp	r5, #0
   21a80:	movne	r1, r5
   21a84:	ldr	r1, [r1]
   21a88:	str	r1, [r4, #168]	; 0xa8
   21a8c:	ldr	r1, [r4, #32]
   21a90:	strh	r0, [r1, #14]
   21a94:	mov	r0, #0
   21a98:	pop	{r4, r5, r6, r7, fp, pc}
   21a9c:	push	{r4, r5, r6, sl, fp, lr}
   21aa0:	add	fp, sp, #16
   21aa4:	sub	sp, sp, #8
   21aa8:	mov	r5, r1
   21aac:	mov	r4, r0
   21ab0:	ldr	r1, [r0, #156]	; 0x9c
   21ab4:	ldr	r2, [r0, #160]	; 0xa0
   21ab8:	add	r0, r1, #1
   21abc:	str	r0, [r4, #156]	; 0x9c
   21ac0:	cmp	r1, r2
   21ac4:	bge	21ad8 <flatcc_builder_start_buffer@@Base+0xf8>
   21ac8:	ldr	r0, [r4, #32]
   21acc:	add	r0, r0, #36	; 0x24
   21ad0:	str	r0, [r4, #32]
   21ad4:	b	21b4c <flatcc_builder_start_buffer@@Base+0x16c>
   21ad8:	ldr	r2, [r4, #176]	; 0xb0
   21adc:	mvn	r6, #0
   21ae0:	cmp	r2, #1
   21ae4:	cmpge	r1, r2
   21ae8:	bge	21b88 <flatcc_builder_start_buffer@@Base+0x1a8>
   21aec:	mov	r1, #0
   21af0:	str	r1, [sp]
   21af4:	add	r0, r0, r0, lsl #3
   21af8:	mvn	r1, #35	; 0x23
   21afc:	add	r2, r1, r0, lsl #2
   21b00:	mov	r0, r4
   21b04:	mov	r1, #4
   21b08:	mov	r3, #36	; 0x24
   21b0c:	bl	21330 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   21b10:	str	r0, [r4, #32]
   21b14:	cmp	r0, #0
   21b18:	beq	21b88 <flatcc_builder_start_buffer@@Base+0x1a8>
   21b1c:	ldr	r0, [r4, #88]	; 0x58
   21b20:	ldr	r1, [r4, #176]	; 0xb0
   21b24:	movw	r2, #36409	; 0x8e39
   21b28:	movt	r2, #14563	; 0x38e3
   21b2c:	umull	r0, r2, r0, r2
   21b30:	lsr	r0, r2, #3
   21b34:	cmp	r1, r2, lsr #3
   21b38:	mov	r2, r0
   21b3c:	movlt	r2, r1
   21b40:	cmp	r1, #0
   21b44:	movle	r2, r0
   21b48:	str	r2, [r4, #160]	; 0xa0
   21b4c:	ldr	r0, [r4, #20]
   21b50:	ldr	r1, [r4, #32]
   21b54:	str	r0, [r1, #8]
   21b58:	ldrh	r2, [r4, #130]	; 0x82
   21b5c:	strh	r2, [r1, #12]
   21b60:	strh	r5, [r4, #130]	; 0x82
   21b64:	ldr	r2, [r4, #28]
   21b68:	mvn	r3, #3
   21b6c:	stm	r1, {r2, r3}
   21b70:	mov	r6, #0
   21b74:	str	r6, [r4, #20]
   21b78:	add	r0, r0, r2
   21b7c:	add	r0, r0, #7
   21b80:	bic	r0, r0, #7
   21b84:	str	r0, [r4, #28]
   21b88:	mov	r0, r6
   21b8c:	sub	sp, fp, #16
   21b90:	pop	{r4, r5, r6, sl, fp, pc}

00021b94 <flatcc_builder_end_buffer@@Base>:
   21b94:	push	{r4, r5, r6, r7, fp, lr}
   21b98:	add	fp, sp, #16
   21b9c:	sub	sp, sp, #8
   21ba0:	mov	r4, r0
   21ba4:	ldr	r0, [r0, #32]
   21ba8:	ldrh	r0, [r0, #14]
   21bac:	cmp	r0, #1
   21bb0:	bne	21c3c <flatcc_builder_end_buffer@@Base+0xa8>
   21bb4:	mov	r5, r1
   21bb8:	ldr	r6, [r4, #152]	; 0x98
   21bbc:	ldrh	r7, [r4, #164]	; 0xa4
   21bc0:	ldrh	r1, [r4, #132]	; 0x84
   21bc4:	mov	r0, r4
   21bc8:	bl	21904 <flatcc_builder_create_buffer@@Base+0x1d0>
   21bcc:	and	r0, r7, #2
   21bd0:	cmp	r6, #0
   21bd4:	orrne	r0, r0, #1
   21bd8:	ldrh	r2, [r4, #132]	; 0x84
   21bdc:	ldrh	r1, [r4, #128]	; 0x80
   21be0:	str	r1, [sp]
   21be4:	str	r0, [sp, #4]
   21be8:	add	r1, r4, #168	; 0xa8
   21bec:	mov	r0, r4
   21bf0:	mov	r3, r5
   21bf4:	bl	21734 <flatcc_builder_create_buffer@@Base>
   21bf8:	mov	r5, r0
   21bfc:	cmp	r0, #0
   21c00:	beq	21c30 <flatcc_builder_end_buffer@@Base+0x9c>
   21c04:	ldr	r0, [r4, #32]
   21c08:	ldr	r1, [r0, #20]
   21c0c:	str	r1, [r4, #144]	; 0x90
   21c10:	ldr	r1, [r0, #28]
   21c14:	str	r1, [r4, #152]	; 0x98
   21c18:	ldr	r1, [r0, #16]
   21c1c:	str	r1, [r4, #168]	; 0xa8
   21c20:	ldrh	r0, [r0, #32]
   21c24:	strh	r0, [r4, #164]	; 0xa4
   21c28:	mov	r0, r4
   21c2c:	bl	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   21c30:	mov	r0, r5
   21c34:	sub	sp, fp, #16
   21c38:	pop	{r4, r5, r6, r7, fp, pc}
   21c3c:	movw	r0, #18357	; 0x47b5
   21c40:	movt	r0, #3
   21c44:	movw	r1, #17798	; 0x4586
   21c48:	movt	r1, #3
   21c4c:	movw	r3, #18401	; 0x47e1
   21c50:	movt	r3, #3
   21c54:	movw	r2, #838	; 0x346
   21c58:	bl	14f44 <__assert_fail@plt>
   21c5c:	push	{r4, sl, fp, lr}
   21c60:	add	fp, sp, #8
   21c64:	mov	r4, r0
   21c68:	ldr	r0, [r0, #16]
   21c6c:	ldr	r2, [r4, #20]
   21c70:	mov	r1, #0
   21c74:	bl	14ef0 <memset@plt>
   21c78:	ldr	r0, [r4, #32]
   21c7c:	ldr	r1, [r0, #8]
   21c80:	str	r1, [r4, #20]
   21c84:	ldr	r1, [r0]
   21c88:	str	r1, [r4, #28]
   21c8c:	ldr	r1, [r0, #4]
   21c90:	mov	r0, r4
   21c94:	bl	21d14 <flatcc_builder_start_struct@@Base+0x4c>
   21c98:	ldrh	r1, [r4, #130]	; 0x82
   21c9c:	mov	r0, r4
   21ca0:	bl	21904 <flatcc_builder_create_buffer@@Base+0x1d0>
   21ca4:	ldr	r0, [r4, #32]
   21ca8:	ldr	r1, [r4, #156]	; 0x9c
   21cac:	ldrh	r2, [r0, #12]
   21cb0:	sub	r0, r0, #36	; 0x24
   21cb4:	str	r0, [r4, #32]
   21cb8:	sub	r0, r1, #1
   21cbc:	str	r0, [r4, #156]	; 0x9c
   21cc0:	strh	r2, [r4, #130]	; 0x82
   21cc4:	pop	{r4, sl, fp, pc}

00021cc8 <flatcc_builder_start_struct@@Base>:
   21cc8:	push	{r4, r5, fp, lr}
   21ccc:	add	fp, sp, #8
   21cd0:	mov	r4, r1
   21cd4:	mov	r5, r0
   21cd8:	mov	r1, r2
   21cdc:	bl	21a9c <flatcc_builder_start_buffer@@Base+0xbc>
   21ce0:	cmp	r0, #0
   21ce4:	movne	r0, #0
   21ce8:	popne	{r4, r5, fp, pc}
   21cec:	ldr	r0, [r5, #32]
   21cf0:	mov	r1, #2
   21cf4:	strh	r1, [r0, #14]
   21cf8:	mov	r0, r5
   21cfc:	mvn	r1, #3
   21d00:	bl	21d14 <flatcc_builder_start_struct@@Base+0x4c>
   21d04:	mov	r0, r5
   21d08:	mov	r1, r4
   21d0c:	pop	{r4, r5, fp, lr}
   21d10:	b	21d4c <flatcc_builder_start_struct@@Base+0x84>
   21d14:	push	{fp, lr}
   21d18:	mov	fp, sp
   21d1c:	ldr	r2, [r0, #28]
   21d20:	ldr	ip, [r0, #32]
   21d24:	ldr	r3, [r0, #60]	; 0x3c
   21d28:	ldr	lr, [r0, #64]	; 0x40
   21d2c:	add	r3, r3, r2
   21d30:	str	r3, [r0, #16]
   21d34:	sub	r2, lr, r2
   21d38:	cmp	r2, r1
   21d3c:	movhi	r2, r1
   21d40:	str	r2, [r0, #24]
   21d44:	str	r1, [ip, #4]
   21d48:	pop	{fp, pc}
   21d4c:	push	{r4, r5, fp, lr}
   21d50:	add	fp, sp, #8
   21d54:	mov	r4, r0
   21d58:	ldr	r5, [r0, #20]
   21d5c:	ldr	r2, [r0, #24]
   21d60:	add	r0, r5, r1
   21d64:	str	r0, [r4, #20]
   21d68:	cmp	r0, r2
   21d6c:	bcc	21d90 <flatcc_builder_start_struct@@Base+0xc8>
   21d70:	add	r1, r0, #1
   21d74:	mov	r0, r4
   21d78:	mvn	r2, #3
   21d7c:	bl	24180 <flatcc_builder_get_emit_context@@Base+0x18>
   21d80:	mov	r1, r0
   21d84:	mov	r0, #0
   21d88:	cmp	r1, #0
   21d8c:	popne	{r4, r5, fp, pc}
   21d90:	ldr	r0, [r4, #16]
   21d94:	add	r0, r0, r5
   21d98:	pop	{r4, r5, fp, pc}

00021d9c <flatcc_builder_struct_edit@@Base>:
   21d9c:	ldr	r0, [r0, #16]
   21da0:	bx	lr

00021da4 <flatcc_builder_end_struct@@Base>:
   21da4:	push	{r4, r5, fp, lr}
   21da8:	add	fp, sp, #8
   21dac:	mov	r4, r0
   21db0:	ldr	r0, [r0, #32]
   21db4:	ldrh	r0, [r0, #14]
   21db8:	cmp	r0, #2
   21dbc:	bne	21dec <flatcc_builder_end_struct@@Base+0x48>
   21dc0:	ldrh	r3, [r4, #130]	; 0x82
   21dc4:	ldr	r1, [r4, #16]
   21dc8:	ldr	r2, [r4, #20]
   21dcc:	mov	r0, r4
   21dd0:	bl	21918 <flatcc_builder_create_struct@@Base>
   21dd4:	mov	r5, r0
   21dd8:	cmp	r0, #0
   21ddc:	movne	r0, r4
   21de0:	blne	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   21de4:	mov	r0, r5
   21de8:	pop	{r4, r5, fp, pc}
   21dec:	movw	r0, #18490	; 0x483a
   21df0:	movt	r0, #3
   21df4:	movw	r1, #17798	; 0x4586
   21df8:	movt	r1, #3
   21dfc:	movw	r3, #18534	; 0x4866
   21e00:	movt	r3, #3
   21e04:	mov	r2, #872	; 0x368
   21e08:	bl	14f44 <__assert_fail@plt>

00021e0c <flatcc_builder_extend_vector@@Base>:
   21e0c:	push	{r4, r5, fp, lr}
   21e10:	add	fp, sp, #8
   21e14:	mov	r5, r1
   21e18:	mov	r4, r0
   21e1c:	ldr	r0, [r0, #32]
   21e20:	ldr	r2, [r0, #24]
   21e24:	mov	r0, r4
   21e28:	bl	21e50 <flatcc_builder_extend_vector@@Base+0x44>
   21e2c:	cmp	r0, #0
   21e30:	movne	r0, #0
   21e34:	popne	{r4, r5, fp, pc}
   21e38:	ldr	r0, [r4, #32]
   21e3c:	ldr	r0, [r0, #16]
   21e40:	mul	r1, r0, r5
   21e44:	mov	r0, r4
   21e48:	pop	{r4, r5, fp, lr}
   21e4c:	b	21d4c <flatcc_builder_start_struct@@Base+0x84>
   21e50:	ldr	r0, [r0, #32]
   21e54:	ldr	r3, [r0, #20]
   21e58:	adds	r1, r3, r1
   21e5c:	bcs	21e70 <flatcc_builder_extend_vector@@Base+0x64>
   21e60:	cmp	r1, r2
   21e64:	strls	r1, [r0, #20]
   21e68:	movls	r0, #0
   21e6c:	bxls	lr
   21e70:	push	{fp, lr}
   21e74:	mov	fp, sp
   21e78:	movw	r0, #22069	; 0x5635
   21e7c:	movt	r0, #3
   21e80:	movw	r1, #17798	; 0x4586
   21e84:	movt	r1, #3
   21e88:	movw	r3, #22096	; 0x5650
   21e8c:	movt	r3, #3
   21e90:	mov	r2, #892	; 0x37c
   21e94:	bl	14f44 <__assert_fail@plt>

00021e98 <flatcc_builder_vector_push@@Base>:
   21e98:	push	{fp, lr}
   21e9c:	mov	fp, sp
   21ea0:	ldr	r2, [r0, #32]
   21ea4:	ldrh	r3, [r2, #14]
   21ea8:	cmp	r3, #4
   21eac:	bne	21ed8 <flatcc_builder_vector_push@@Base+0x40>
   21eb0:	ldr	ip, [r2, #20]
   21eb4:	ldr	r3, [r2, #24]
   21eb8:	cmp	ip, r3
   21ebc:	bhi	21ef8 <flatcc_builder_vector_push@@Base+0x60>
   21ec0:	add	r3, ip, #1
   21ec4:	str	r3, [r2, #20]
   21ec8:	ldr	r2, [r0, #32]
   21ecc:	ldr	r2, [r2, #16]
   21ed0:	pop	{fp, lr}
   21ed4:	b	21f18 <flatcc_builder_vector_push@@Base+0x80>
   21ed8:	movw	r0, #18601	; 0x48a9
   21edc:	movt	r0, #3
   21ee0:	movw	r1, #17798	; 0x4586
   21ee4:	movt	r1, #3
   21ee8:	movw	r3, #18645	; 0x48d5
   21eec:	movt	r3, #3
   21ef0:	movw	r2, #907	; 0x38b
   21ef4:	bl	14f44 <__assert_fail@plt>
   21ef8:	movw	r0, #18712	; 0x4918
   21efc:	movt	r0, #3
   21f00:	movw	r1, #17798	; 0x4586
   21f04:	movt	r1, #3
   21f08:	movw	r3, #18645	; 0x48d5
   21f0c:	movt	r3, #3
   21f10:	mov	r2, #908	; 0x38c
   21f14:	bl	14f44 <__assert_fail@plt>
   21f18:	push	{r4, r5, r6, sl, fp, lr}
   21f1c:	add	fp, sp, #16
   21f20:	mov	r4, r2
   21f24:	mov	r5, r1
   21f28:	mov	r1, r2
   21f2c:	bl	21d4c <flatcc_builder_start_struct@@Base+0x84>
   21f30:	mov	r6, r0
   21f34:	cmp	r0, #0
   21f38:	beq	21f4c <flatcc_builder_vector_push@@Base+0xb4>
   21f3c:	mov	r0, r6
   21f40:	mov	r1, r5
   21f44:	mov	r2, r4
   21f48:	bl	14e60 <memcpy@plt>
   21f4c:	mov	r0, r6
   21f50:	pop	{r4, r5, r6, sl, fp, pc}

00021f54 <flatcc_builder_append_vector@@Base>:
   21f54:	push	{r4, r5, r6, sl, fp, lr}
   21f58:	add	fp, sp, #16
   21f5c:	mov	r4, r1
   21f60:	mov	r6, r0
   21f64:	ldr	r0, [r0, #32]
   21f68:	ldrh	r1, [r0, #14]
   21f6c:	cmp	r1, #4
   21f70:	bne	21fb0 <flatcc_builder_append_vector@@Base+0x5c>
   21f74:	mov	r5, r2
   21f78:	ldr	r2, [r0, #24]
   21f7c:	mov	r0, r6
   21f80:	mov	r1, r5
   21f84:	bl	21e50 <flatcc_builder_extend_vector@@Base+0x44>
   21f88:	cmp	r0, #0
   21f8c:	movne	r0, #0
   21f90:	popne	{r4, r5, r6, sl, fp, pc}
   21f94:	ldr	r0, [r6, #32]
   21f98:	ldr	r0, [r0, #16]
   21f9c:	mul	r2, r0, r5
   21fa0:	mov	r0, r6
   21fa4:	mov	r1, r4
   21fa8:	pop	{r4, r5, r6, sl, fp, lr}
   21fac:	b	21f18 <flatcc_builder_vector_push@@Base+0x80>
   21fb0:	movw	r0, #18601	; 0x48a9
   21fb4:	movt	r0, #3
   21fb8:	movw	r1, #17798	; 0x4586
   21fbc:	movt	r1, #3
   21fc0:	movw	r3, #18773	; 0x4955
   21fc4:	movt	r3, #3
   21fc8:	movw	r2, #915	; 0x393
   21fcc:	bl	14f44 <__assert_fail@plt>

00021fd0 <flatcc_builder_extend_offset_vector@@Base>:
   21fd0:	push	{r4, r5, fp, lr}
   21fd4:	add	fp, sp, #8
   21fd8:	mov	r5, r1
   21fdc:	mov	r4, r0
   21fe0:	mvn	r2, #-1073741824	; 0xc0000000
   21fe4:	bl	21e50 <flatcc_builder_extend_vector@@Base+0x44>
   21fe8:	mov	r1, r0
   21fec:	mov	r0, #0
   21ff0:	cmp	r1, #0
   21ff4:	popne	{r4, r5, fp, pc}
   21ff8:	lsl	r1, r5, #2
   21ffc:	mov	r0, r4
   22000:	bl	21d4c <flatcc_builder_start_struct@@Base+0x84>
   22004:	pop	{r4, r5, fp, pc}

00022008 <flatcc_builder_offset_vector_push@@Base>:
   22008:	push	{r4, r5, fp, lr}
   2200c:	add	fp, sp, #8
   22010:	mov	r4, r1
   22014:	ldr	r1, [r0, #32]
   22018:	ldrh	r2, [r1, #14]
   2201c:	cmp	r2, #5
   22020:	bne	22058 <flatcc_builder_offset_vector_push@@Base+0x50>
   22024:	ldr	r2, [r1, #20]
   22028:	mov	r5, #0
   2202c:	cmn	r2, #-1073741823	; 0xc0000001
   22030:	beq	22050 <flatcc_builder_offset_vector_push@@Base+0x48>
   22034:	add	r2, r2, #1
   22038:	str	r2, [r1, #20]
   2203c:	mov	r1, #4
   22040:	bl	21d4c <flatcc_builder_start_struct@@Base+0x84>
   22044:	cmp	r0, #0
   22048:	strne	r4, [r0]
   2204c:	movne	r5, r0
   22050:	mov	r0, r5
   22054:	pop	{r4, r5, fp, pc}
   22058:	movw	r0, #18850	; 0x49a2
   2205c:	movt	r0, #3
   22060:	movw	r1, #17798	; 0x4586
   22064:	movt	r1, #3
   22068:	movw	r3, #18901	; 0x49d5
   2206c:	movt	r3, #3
   22070:	movw	r2, #934	; 0x3a6
   22074:	bl	14f44 <__assert_fail@plt>

00022078 <flatcc_builder_append_offset_vector@@Base>:
   22078:	push	{r4, r5, r6, sl, fp, lr}
   2207c:	add	fp, sp, #16
   22080:	mov	r6, r0
   22084:	ldr	r0, [r0, #32]
   22088:	ldrh	r0, [r0, #14]
   2208c:	cmp	r0, #5
   22090:	bne	220d0 <flatcc_builder_append_offset_vector@@Base+0x58>
   22094:	mov	r5, r2
   22098:	mov	r4, r1
   2209c:	mov	r0, r6
   220a0:	mov	r1, r2
   220a4:	mvn	r2, #-1073741824	; 0xc0000000
   220a8:	bl	21e50 <flatcc_builder_extend_vector@@Base+0x44>
   220ac:	mov	r1, r0
   220b0:	mov	r0, #0
   220b4:	cmp	r1, #0
   220b8:	popne	{r4, r5, r6, sl, fp, pc}
   220bc:	lsl	r2, r5, #2
   220c0:	mov	r0, r6
   220c4:	mov	r1, r4
   220c8:	bl	21f18 <flatcc_builder_vector_push@@Base+0x80>
   220cc:	pop	{r4, r5, r6, sl, fp, pc}
   220d0:	movw	r0, #18850	; 0x49a2
   220d4:	movt	r0, #3
   220d8:	movw	r1, #17798	; 0x4586
   220dc:	movt	r1, #3
   220e0:	movw	r3, #18999	; 0x4a37
   220e4:	movt	r3, #3
   220e8:	mov	r2, #948	; 0x3b4
   220ec:	bl	14f44 <__assert_fail@plt>

000220f0 <flatcc_builder_extend_string@@Base>:
   220f0:	push	{r4, r5, fp, lr}
   220f4:	add	fp, sp, #8
   220f8:	mov	r5, r0
   220fc:	ldr	r0, [r0, #32]
   22100:	ldrh	r0, [r0, #14]
   22104:	cmp	r0, #6
   22108:	bne	22138 <flatcc_builder_extend_string@@Base+0x48>
   2210c:	mov	r4, r1
   22110:	mov	r0, r5
   22114:	mvn	r2, #0
   22118:	bl	21e50 <flatcc_builder_extend_vector@@Base+0x44>
   2211c:	cmp	r0, #0
   22120:	movne	r0, #0
   22124:	popne	{r4, r5, fp, pc}
   22128:	mov	r0, r5
   2212c:	mov	r1, r4
   22130:	pop	{r4, r5, fp, lr}
   22134:	b	21d4c <flatcc_builder_start_struct@@Base+0x84>
   22138:	movw	r0, #19115	; 0x4aab
   2213c:	movt	r0, #3
   22140:	movw	r1, #17798	; 0x4586
   22144:	movt	r1, #3
   22148:	movw	r3, #19159	; 0x4ad7
   2214c:	movt	r3, #3
   22150:	movw	r2, #957	; 0x3bd
   22154:	bl	14f44 <__assert_fail@plt>

00022158 <flatcc_builder_append_string@@Base>:
   22158:	push	{r4, r5, r6, sl, fp, lr}
   2215c:	add	fp, sp, #16
   22160:	mov	r6, r0
   22164:	ldr	r0, [r0, #32]
   22168:	ldrh	r0, [r0, #14]
   2216c:	cmp	r0, #6
   22170:	bne	221ac <flatcc_builder_append_string@@Base+0x54>
   22174:	mov	r4, r2
   22178:	mov	r5, r1
   2217c:	mov	r0, r6
   22180:	mov	r1, r2
   22184:	mvn	r2, #0
   22188:	bl	21e50 <flatcc_builder_extend_vector@@Base+0x44>
   2218c:	cmp	r0, #0
   22190:	movne	r0, #0
   22194:	popne	{r4, r5, r6, sl, fp, pc}
   22198:	mov	r0, r6
   2219c:	mov	r1, r5
   221a0:	mov	r2, r4
   221a4:	pop	{r4, r5, r6, sl, fp, lr}
   221a8:	b	21f18 <flatcc_builder_vector_push@@Base+0x80>
   221ac:	movw	r0, #19115	; 0x4aab
   221b0:	movt	r0, #3
   221b4:	movw	r1, #17798	; 0x4586
   221b8:	movt	r1, #3
   221bc:	movw	r3, #19222	; 0x4b16
   221c0:	movt	r3, #3
   221c4:	movw	r2, #966	; 0x3c6
   221c8:	bl	14f44 <__assert_fail@plt>

000221cc <flatcc_builder_append_string_str@@Base>:
   221cc:	push	{r4, r5, fp, lr}
   221d0:	add	fp, sp, #8
   221d4:	mov	r4, r1
   221d8:	mov	r5, r0
   221dc:	mov	r0, r1
   221e0:	bl	14ecc <strlen@plt>
   221e4:	mov	r2, r0
   221e8:	mov	r0, r5
   221ec:	mov	r1, r4
   221f0:	pop	{r4, r5, fp, lr}
   221f4:	b	22158 <flatcc_builder_append_string@@Base>

000221f8 <flatcc_builder_append_string_strn@@Base>:
   221f8:	push	{r4, r5, fp, lr}
   221fc:	add	fp, sp, #8
   22200:	mov	r4, r1
   22204:	mov	r5, r0
   22208:	mov	r0, r1
   2220c:	mov	r1, r2
   22210:	bl	22228 <flatcc_builder_append_string_strn@@Base+0x30>
   22214:	mov	r2, r0
   22218:	mov	r0, r5
   2221c:	mov	r1, r4
   22220:	pop	{r4, r5, fp, lr}
   22224:	b	22158 <flatcc_builder_append_string@@Base>
   22228:	push	{r4, r5, fp, lr}
   2222c:	add	fp, sp, #8
   22230:	mov	r4, r1
   22234:	mov	r5, r0
   22238:	mov	r1, #0
   2223c:	mov	r2, r4
   22240:	bl	14f14 <memchr@plt>
   22244:	cmp	r0, #0
   22248:	subne	r4, r0, r5
   2224c:	mov	r0, r4
   22250:	pop	{r4, r5, fp, pc}

00022254 <flatcc_builder_truncate_vector@@Base>:
   22254:	push	{fp, lr}
   22258:	mov	fp, sp
   2225c:	ldr	r2, [r0, #32]
   22260:	ldrh	r3, [r2, #14]
   22264:	cmp	r3, #4
   22268:	bne	22298 <flatcc_builder_truncate_vector@@Base+0x44>
   2226c:	ldr	r3, [r2, #20]
   22270:	cmp	r3, r1
   22274:	bcc	222b8 <flatcc_builder_truncate_vector@@Base+0x64>
   22278:	sub	r3, r3, r1
   2227c:	str	r3, [r2, #20]
   22280:	ldr	r2, [r0, #32]
   22284:	ldr	r2, [r2, #16]
   22288:	mul	r1, r2, r1
   2228c:	bl	222d8 <flatcc_builder_truncate_vector@@Base+0x84>
   22290:	mov	r0, #0
   22294:	pop	{fp, pc}
   22298:	movw	r0, #18601	; 0x48a9
   2229c:	movt	r0, #3
   222a0:	movw	r1, #17798	; 0x4586
   222a4:	movt	r1, #3
   222a8:	movw	r3, #19299	; 0x4b63
   222ac:	movt	r3, #3
   222b0:	movw	r2, #985	; 0x3d9
   222b4:	bl	14f44 <__assert_fail@plt>
   222b8:	movw	r0, #19362	; 0x4ba2
   222bc:	movt	r0, #3
   222c0:	movw	r1, #17798	; 0x4586
   222c4:	movt	r1, #3
   222c8:	movw	r3, #19299	; 0x4b63
   222cc:	movt	r3, #3
   222d0:	movw	r2, #986	; 0x3da
   222d4:	bl	14f44 <__assert_fail@plt>
   222d8:	mov	r2, r1
   222dc:	ldr	r1, [r0, #16]
   222e0:	ldr	r3, [r0, #20]
   222e4:	sub	r3, r3, r2
   222e8:	str	r3, [r0, #20]
   222ec:	add	r0, r1, r3
   222f0:	mov	r1, #0
   222f4:	b	14ef0 <memset@plt>

000222f8 <flatcc_builder_truncate_offset_vector@@Base>:
   222f8:	push	{fp, lr}
   222fc:	mov	fp, sp
   22300:	ldr	r2, [r0, #32]
   22304:	ldrh	r3, [r2, #14]
   22308:	cmp	r3, #5
   2230c:	bne	2233c <flatcc_builder_truncate_offset_vector@@Base+0x44>
   22310:	ldr	r3, [r2, #20]
   22314:	cmp	r3, r1
   22318:	bcc	2235c <flatcc_builder_truncate_offset_vector@@Base+0x64>
   2231c:	sub	r3, r3, r1
   22320:	str	r3, [r2, #20]
   22324:	ldr	r2, [r0, #32]
   22328:	ldr	r2, [r2, #16]
   2232c:	mul	r1, r2, r1
   22330:	bl	222d8 <flatcc_builder_truncate_vector@@Base+0x84>
   22334:	mov	r0, #0
   22338:	pop	{fp, pc}
   2233c:	movw	r0, #18850	; 0x49a2
   22340:	movt	r0, #3
   22344:	movw	r1, #17798	; 0x4586
   22348:	movt	r1, #3
   2234c:	movw	r3, #19398	; 0x4bc6
   22350:	movt	r3, #3
   22354:	movw	r2, #994	; 0x3e2
   22358:	bl	14f44 <__assert_fail@plt>
   2235c:	movw	r0, #19468	; 0x4c0c
   22360:	movt	r0, #3
   22364:	movw	r1, #17798	; 0x4586
   22368:	movt	r1, #3
   2236c:	movw	r3, #19398	; 0x4bc6
   22370:	movt	r3, #3
   22374:	movw	r2, #995	; 0x3e3
   22378:	bl	14f44 <__assert_fail@plt>

0002237c <flatcc_builder_truncate_string@@Base>:
   2237c:	push	{fp, lr}
   22380:	mov	fp, sp
   22384:	ldr	r2, [r0, #32]
   22388:	ldrh	r3, [r2, #14]
   2238c:	cmp	r3, #6
   22390:	bne	223b4 <flatcc_builder_truncate_string@@Base+0x38>
   22394:	ldr	r3, [r2, #20]
   22398:	cmp	r3, r1
   2239c:	bcc	223d4 <flatcc_builder_truncate_string@@Base+0x58>
   223a0:	sub	r3, r3, r1
   223a4:	str	r3, [r2, #20]
   223a8:	bl	222d8 <flatcc_builder_truncate_vector@@Base+0x84>
   223ac:	mov	r0, #0
   223b0:	pop	{fp, pc}
   223b4:	movw	r0, #19115	; 0x4aab
   223b8:	movt	r0, #3
   223bc:	movw	r1, #17798	; 0x4586
   223c0:	movt	r1, #3
   223c4:	movw	r3, #19527	; 0x4c47
   223c8:	movt	r3, #3
   223cc:	movw	r2, #1003	; 0x3eb
   223d0:	bl	14f44 <__assert_fail@plt>
   223d4:	movw	r0, #19590	; 0x4c86
   223d8:	movt	r0, #3
   223dc:	movw	r1, #17798	; 0x4586
   223e0:	movt	r1, #3
   223e4:	movw	r3, #19527	; 0x4c47
   223e8:	movt	r3, #3
   223ec:	mov	r2, #1004	; 0x3ec
   223f0:	bl	14f44 <__assert_fail@plt>

000223f4 <flatcc_builder_start_vector@@Base>:
   223f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   223f8:	add	fp, sp, #24
   223fc:	sub	sp, sp, #8
   22400:	mov	r5, r3
   22404:	mov	r6, r1
   22408:	mov	r4, r0
   2240c:	strh	r2, [sp, #6]
   22410:	add	r0, sp, #6
   22414:	mov	r8, #4
   22418:	mov	r1, #4
   2241c:	bl	22474 <flatcc_builder_start_vector@@Base+0x80>
   22420:	ldrh	r1, [sp, #6]
   22424:	mov	r0, r4
   22428:	bl	21a9c <flatcc_builder_start_buffer@@Base+0xbc>
   2242c:	mvn	r7, #0
   22430:	cmp	r0, #0
   22434:	bne	22468 <flatcc_builder_start_vector@@Base+0x74>
   22438:	ldr	r0, [r4, #32]
   2243c:	str	r6, [r0, #16]
   22440:	ldr	r0, [r4, #32]
   22444:	mov	r7, #0
   22448:	str	r7, [r0, #20]
   2244c:	ldr	r0, [r4, #32]
   22450:	str	r5, [r0, #24]
   22454:	ldr	r0, [r4, #32]
   22458:	strh	r8, [r0, #14]
   2245c:	mov	r0, r4
   22460:	mvn	r1, #3
   22464:	bl	21d14 <flatcc_builder_start_struct@@Base+0x4c>
   22468:	mov	r0, r7
   2246c:	sub	sp, fp, #24
   22470:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22474:	ldrh	r2, [r0]
   22478:	cmp	r2, r1
   2247c:	strhcc	r1, [r0]
   22480:	bx	lr

00022484 <flatcc_builder_start_offset_vector@@Base>:
   22484:	push	{r4, r5, r6, sl, fp, lr}
   22488:	add	fp, sp, #16
   2248c:	mov	r4, r0
   22490:	mov	r6, #4
   22494:	mov	r1, #4
   22498:	bl	21a9c <flatcc_builder_start_buffer@@Base+0xbc>
   2249c:	mvn	r5, #0
   224a0:	cmp	r0, #0
   224a4:	beq	224b0 <flatcc_builder_start_offset_vector@@Base+0x2c>
   224a8:	mov	r0, r5
   224ac:	pop	{r4, r5, r6, sl, fp, pc}
   224b0:	ldr	r0, [r4, #32]
   224b4:	str	r6, [r0, #16]
   224b8:	ldr	r0, [r4, #32]
   224bc:	mov	r5, #0
   224c0:	str	r5, [r0, #20]
   224c4:	ldr	r0, [r4, #32]
   224c8:	mov	r1, #5
   224cc:	strh	r1, [r0, #14]
   224d0:	mov	r0, r4
   224d4:	mvn	r1, #3
   224d8:	bl	21d14 <flatcc_builder_start_struct@@Base+0x4c>
   224dc:	mov	r0, r5
   224e0:	pop	{r4, r5, r6, sl, fp, pc}

000224e4 <flatcc_builder_create_offset_vector@@Base>:
   224e4:	push	{r4, r5, r6, sl, fp, lr}
   224e8:	add	fp, sp, #16
   224ec:	mov	r6, r2
   224f0:	mov	r5, r1
   224f4:	mov	r4, r0
   224f8:	bl	22484 <flatcc_builder_start_offset_vector@@Base>
   224fc:	cmp	r0, #0
   22500:	beq	2250c <flatcc_builder_create_offset_vector@@Base+0x28>
   22504:	mov	r0, #0
   22508:	pop	{r4, r5, r6, sl, fp, pc}
   2250c:	mov	r0, r4
   22510:	mov	r1, r6
   22514:	bl	21fd0 <flatcc_builder_extend_offset_vector@@Base>
   22518:	cmp	r0, #0
   2251c:	beq	22504 <flatcc_builder_create_offset_vector@@Base+0x20>
   22520:	lsl	r2, r6, #2
   22524:	mov	r1, r5
   22528:	bl	14e60 <memcpy@plt>
   2252c:	mov	r0, r4
   22530:	pop	{r4, r5, r6, sl, fp, lr}
   22534:	b	22538 <flatcc_builder_end_offset_vector@@Base>

00022538 <flatcc_builder_end_offset_vector@@Base>:
   22538:	push	{r4, r5, fp, lr}
   2253c:	add	fp, sp, #8
   22540:	mov	r4, r0
   22544:	ldr	r0, [r0, #32]
   22548:	ldrh	r1, [r0, #14]
   2254c:	cmp	r1, #5
   22550:	bne	2257c <flatcc_builder_end_offset_vector@@Base+0x44>
   22554:	ldr	r2, [r0, #20]
   22558:	ldr	r1, [r4, #16]
   2255c:	mov	r0, r4
   22560:	bl	230d8 <flatcc_builder_create_offset_vector_direct@@Base>
   22564:	mov	r5, r0
   22568:	cmp	r0, #0
   2256c:	movne	r0, r4
   22570:	blne	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   22574:	mov	r0, r5
   22578:	pop	{r4, r5, fp, pc}
   2257c:	movw	r0, #18850	; 0x49a2
   22580:	movt	r0, #3
   22584:	movw	r1, #17798	; 0x4586
   22588:	movt	r1, #3
   2258c:	movw	r3, #20433	; 0x4fd1
   22590:	movt	r3, #3
   22594:	movw	r2, #1480	; 0x5c8
   22598:	bl	14f44 <__assert_fail@plt>

0002259c <flatcc_builder_start_string@@Base>:
   2259c:	push	{r4, r5, r6, sl, fp, lr}
   225a0:	add	fp, sp, #16
   225a4:	mov	r4, r0
   225a8:	mov	r6, #1
   225ac:	mov	r1, #1
   225b0:	bl	21a9c <flatcc_builder_start_buffer@@Base+0xbc>
   225b4:	mvn	r5, #0
   225b8:	cmp	r0, #0
   225bc:	beq	225c8 <flatcc_builder_start_string@@Base+0x2c>
   225c0:	mov	r0, r5
   225c4:	pop	{r4, r5, r6, sl, fp, pc}
   225c8:	ldr	r0, [r4, #32]
   225cc:	str	r6, [r0, #16]
   225d0:	ldr	r0, [r4, #32]
   225d4:	mov	r5, #0
   225d8:	str	r5, [r0, #20]
   225dc:	ldr	r0, [r4, #32]
   225e0:	mov	r1, #6
   225e4:	strh	r1, [r0, #14]
   225e8:	mov	r0, r4
   225ec:	mvn	r1, #3
   225f0:	bl	21d14 <flatcc_builder_start_struct@@Base+0x4c>
   225f4:	mov	r0, r5
   225f8:	pop	{r4, r5, r6, sl, fp, pc}

000225fc <flatcc_builder_reserve_table@@Base>:
   225fc:	cmn	r1, #1
   22600:	ble	22608 <flatcc_builder_reserve_table@@Base+0xc>
   22604:	b	22630 <flatcc_builder_reserve_table@@Base+0x34>
   22608:	push	{fp, lr}
   2260c:	mov	fp, sp
   22610:	movw	r0, #19689	; 0x4ce9
   22614:	movt	r0, #3
   22618:	movw	r1, #17798	; 0x4586
   2261c:	movt	r1, #3
   22620:	movw	r3, #19624	; 0x4ca8
   22624:	movt	r3, #3
   22628:	movw	r2, #1065	; 0x429
   2262c:	bl	14f44 <__assert_fail@plt>
   22630:	push	{r4, r5, r6, sl, fp, lr}
   22634:	add	fp, sp, #16
   22638:	sub	sp, sp, #8
   2263c:	mov	r6, r1
   22640:	mov	r4, r0
   22644:	ldr	r0, [r0, #32]
   22648:	ldrh	r1, [r0, #28]
   2264c:	ldr	r0, [r0, #16]
   22650:	mov	r2, #1
   22654:	str	r2, [sp]
   22658:	mov	r2, #4
   2265c:	add	r3, r2, r6, lsl #1
   22660:	add	r2, r0, r1, lsl #1
   22664:	mov	r5, #0
   22668:	mov	r0, r4
   2266c:	mov	r1, #0
   22670:	bl	21330 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   22674:	str	r0, [r4, #4]
   22678:	cmp	r0, #0
   2267c:	beq	226b8 <flatcc_builder_reserve_table@@Base+0xbc>
   22680:	lsl	r1, r6, #1
   22684:	add	r0, r0, #4
   22688:	str	r0, [r4, #4]
   2268c:	ldr	r0, [r4, #32]
   22690:	ldr	r2, [r0, #20]
   22694:	str	r5, [sp]
   22698:	orr	r3, r1, #1
   2269c:	mov	r0, r4
   226a0:	mov	r1, #3
   226a4:	bl	21330 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   226a8:	str	r0, [r4]
   226ac:	cmp	r0, #0
   226b0:	mvneq	r5, #0
   226b4:	b	226bc <flatcc_builder_reserve_table@@Base+0xc0>
   226b8:	mvn	r5, #0
   226bc:	mov	r0, r5
   226c0:	sub	sp, fp, #16
   226c4:	pop	{r4, r5, r6, sl, fp, pc}

000226c8 <flatcc_builder_start_table@@Base>:
   226c8:	push	{r4, r5, r6, sl, fp, lr}
   226cc:	add	fp, sp, #16
   226d0:	mov	r6, r1
   226d4:	mov	r4, r0
   226d8:	mov	r1, #4
   226dc:	bl	21a9c <flatcc_builder_start_buffer@@Base+0xbc>
   226e0:	mvn	r5, #0
   226e4:	cmp	r0, #0
   226e8:	bne	22760 <flatcc_builder_start_table@@Base+0x98>
   226ec:	ldr	r0, [r4, #4]
   226f0:	ldr	r1, [r4, #32]
   226f4:	ldr	r2, [r4, #52]	; 0x34
   226f8:	sub	r0, r0, r2
   226fc:	str	r0, [r1, #16]
   22700:	ldr	r0, [r4]
   22704:	ldr	r1, [r4, #32]
   22708:	ldr	r2, [r4, #76]	; 0x4c
   2270c:	sub	r0, r0, r2
   22710:	str	r0, [r1, #20]
   22714:	ldr	r0, [r4, #12]
   22718:	ldr	r1, [r4, #32]
   2271c:	str	r0, [r1, #24]
   22720:	ldr	r0, [r4, #32]
   22724:	ldrh	r1, [r4, #8]
   22728:	strh	r1, [r0, #28]
   2272c:	mov	r0, #0
   22730:	strh	r0, [r4, #8]
   22734:	movw	r0, #15186	; 0x3b52
   22738:	movt	r0, #12137	; 0x2f69
   2273c:	str	r0, [r4, #12]
   22740:	ldr	r0, [r4, #32]
   22744:	mov	r1, #3
   22748:	strh	r1, [r0, #14]
   2274c:	mov	r0, r4
   22750:	mov	r1, r6
   22754:	bl	22630 <flatcc_builder_reserve_table@@Base+0x34>
   22758:	cmp	r0, #0
   2275c:	beq	22768 <flatcc_builder_start_table@@Base+0xa0>
   22760:	mov	r0, r5
   22764:	pop	{r4, r5, r6, sl, fp, pc}
   22768:	mov	r0, r4
   2276c:	movw	r1, #65532	; 0xfffc
   22770:	bl	21d14 <flatcc_builder_start_struct@@Base+0x4c>
   22774:	mov	r5, #0
   22778:	mov	r0, r5
   2277c:	pop	{r4, r5, r6, sl, fp, pc}

00022780 <flatcc_builder_create_vtable@@Base>:
   22780:	push	{fp, lr}
   22784:	mov	fp, sp
   22788:	sub	sp, sp, #72	; 0x48
   2278c:	mov	r3, #0
   22790:	str	r3, [sp, #4]
   22794:	str	r3, [sp]
   22798:	cmp	r2, #0
   2279c:	strne	r1, [sp, #8]
   227a0:	strne	r2, [sp]
   227a4:	strne	r2, [sp, #12]
   227a8:	movne	r1, #1
   227ac:	strne	r1, [sp, #4]
   227b0:	ldr	r1, [r0, #152]	; 0x98
   227b4:	cmp	r1, #0
   227b8:	bne	227c8 <flatcc_builder_create_vtable@@Base+0x48>
   227bc:	ldr	r1, [r0, #180]	; 0xb4
   227c0:	cmp	r1, #0
   227c4:	beq	227e4 <flatcc_builder_create_vtable@@Base+0x64>
   227c8:	mov	r1, sp
   227cc:	bl	216a0 <flatcc_builder_embed_buffer@@Base+0x1e0>
   227d0:	cmp	r0, #0
   227d4:	beq	227f4 <flatcc_builder_create_vtable@@Base+0x74>
   227d8:	add	r0, r0, #1
   227dc:	mov	sp, fp
   227e0:	pop	{fp, pc}
   227e4:	mov	r1, sp
   227e8:	bl	22800 <flatcc_builder_create_vtable@@Base+0x80>
   227ec:	cmp	r0, #0
   227f0:	bne	227dc <flatcc_builder_create_vtable@@Base+0x5c>
   227f4:	mov	r0, #0
   227f8:	mov	sp, fp
   227fc:	pop	{fp, pc}
   22800:	push	{r4, sl, fp, lr}
   22804:	add	fp, sp, #8
   22808:	sub	sp, sp, #8
   2280c:	ldr	r4, [r0, #140]	; 0x8c
   22810:	ldr	r3, [r1]
   22814:	add	r2, r3, r4
   22818:	str	r2, [r0, #140]	; 0x8c
   2281c:	cmn	r3, #1
   22820:	ble	22874 <flatcc_builder_create_vtable@@Base+0xf4>
   22824:	ldr	r2, [r1, #4]
   22828:	ldr	ip, [r0, #36]	; 0x24
   2282c:	ldr	lr, [r0, #44]	; 0x2c
   22830:	str	r3, [sp]
   22834:	add	r1, r1, #8
   22838:	mov	r0, ip
   2283c:	mov	r3, r4
   22840:	blx	lr
   22844:	cmp	r0, #0
   22848:	addeq	r0, r4, #1
   2284c:	subeq	sp, fp, #8
   22850:	popeq	{r4, sl, fp, pc}
   22854:	movw	r0, #22316	; 0x572c
   22858:	movt	r0, #3
   2285c:	movw	r1, #17798	; 0x4586
   22860:	movt	r1, #3
   22864:	movw	r3, #22183	; 0x56a7
   22868:	movt	r3, #3
   2286c:	movw	r2, #677	; 0x2a5
   22870:	bl	14f44 <__assert_fail@plt>
   22874:	movw	r0, #22316	; 0x572c
   22878:	movt	r0, #3
   2287c:	movw	r1, #17798	; 0x4586
   22880:	movt	r1, #3
   22884:	movw	r3, #22183	; 0x56a7
   22888:	movt	r3, #3
   2288c:	movw	r2, #673	; 0x2a1
   22890:	bl	14f44 <__assert_fail@plt>

00022894 <flatcc_builder_create_cached_vtable@@Base>:
   22894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22898:	add	fp, sp, #28
   2289c:	sub	sp, sp, #20
   228a0:	mov	r4, r2
   228a4:	mov	r9, r1
   228a8:	mov	sl, r0
   228ac:	mov	r1, r3
   228b0:	bl	22a88 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   228b4:	cmp	r0, #0
   228b8:	beq	229dc <flatcc_builder_create_cached_vtable@@Base+0x148>
   228bc:	mov	r7, r0
   228c0:	ldr	r6, [r0]
   228c4:	mov	r5, #0
   228c8:	cmp	r6, #0
   228cc:	mov	r8, #0
   228d0:	beq	22968 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   228d4:	ldr	r5, [sl, #68]	; 0x44
   228d8:	str	sl, [sp, #16]
   228dc:	ldr	sl, [sl, #100]	; 0x64
   228e0:	mov	r0, #0
   228e4:	str	r7, [sp, #8]
   228e8:	str	r0, [sp, #12]
   228ec:	add	r8, sl, r6
   228f0:	ldr	r0, [r8, #8]
   228f4:	mov	r1, r5
   228f8:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   228fc:	cmp	r0, r4
   22900:	bne	22918 <flatcc_builder_create_cached_vtable@@Base+0x84>
   22904:	mov	r0, r9
   22908:	mov	r2, r4
   2290c:	bl	14e6c <memcmp@plt>
   22910:	cmp	r0, #0
   22914:	beq	2292c <flatcc_builder_create_cached_vtable@@Base+0x98>
   22918:	ldr	r6, [r8, #12]!
   2291c:	cmp	r6, #0
   22920:	mov	r7, r8
   22924:	bne	228ec <flatcc_builder_create_cached_vtable@@Base+0x58>
   22928:	b	22958 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   2292c:	ldr	r0, [sp, #16]
   22930:	ldr	r0, [r0, #152]	; 0x98
   22934:	ldr	r1, [r8, #4]
   22938:	cmp	r1, r0
   2293c:	beq	22a64 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   22940:	mov	r7, r8
   22944:	ldr	r6, [r7, #12]!
   22948:	cmp	r6, #0
   2294c:	mov	r0, r8
   22950:	bne	228e8 <flatcc_builder_create_cached_vtable@@Base+0x54>
   22954:	b	2295c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   22958:	ldr	r8, [sp, #12]
   2295c:	ldr	sl, [sp, #16]
   22960:	mov	r5, #0
   22964:	ldr	r7, [sp, #8]
   22968:	ldr	r2, [sl, #124]	; 0x7c
   2296c:	str	r5, [sp]
   22970:	mov	r0, sl
   22974:	mov	r1, #6
   22978:	mov	r3, #16
   2297c:	bl	21330 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   22980:	cmp	r0, #0
   22984:	beq	22a50 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   22988:	mov	r6, r0
   2298c:	ldr	r0, [sl, #124]	; 0x7c
   22990:	ldr	r1, [sl, #152]	; 0x98
   22994:	add	r2, r0, #16
   22998:	str	r2, [sl, #124]	; 0x7c
   2299c:	str	r1, [r6, #4]
   229a0:	ldr	r1, [r7]
   229a4:	str	r1, [r6, #12]
   229a8:	str	r0, [r7]
   229ac:	mov	r0, sl
   229b0:	mov	r1, r9
   229b4:	mov	r2, r4
   229b8:	bl	22780 <flatcc_builder_create_vtable@@Base>
   229bc:	str	r0, [r6]
   229c0:	cmp	r0, #0
   229c4:	beq	22a50 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   229c8:	cmp	r8, #0
   229cc:	beq	229e4 <flatcc_builder_create_cached_vtable@@Base+0x150>
   229d0:	ldr	r0, [r8, #8]
   229d4:	str	r0, [r6, #8]
   229d8:	b	22a4c <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   229dc:	mov	r5, #0
   229e0:	b	22a50 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   229e4:	ldr	r0, [sl, #172]	; 0xac
   229e8:	cmp	r0, #0
   229ec:	beq	22a0c <flatcc_builder_create_cached_vtable@@Base+0x178>
   229f0:	ldr	r1, [sl, #120]	; 0x78
   229f4:	add	r1, r1, r4
   229f8:	cmp	r0, r1
   229fc:	bcs	22a0c <flatcc_builder_create_cached_vtable@@Base+0x178>
   22a00:	mov	r0, sl
   22a04:	bl	21028 <flatcc_builder_flush_vtable_cache@@Base>
   22a08:	b	22a4c <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   22a0c:	ldr	r2, [sl, #120]	; 0x78
   22a10:	mov	r0, #0
   22a14:	str	r0, [sp]
   22a18:	mov	r0, sl
   22a1c:	mov	r1, #2
   22a20:	mov	r3, r4
   22a24:	bl	21330 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   22a28:	cmp	r0, #0
   22a2c:	beq	22a5c <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   22a30:	ldr	r1, [sl, #120]	; 0x78
   22a34:	str	r1, [r6, #8]
   22a38:	add	r1, r1, r4
   22a3c:	str	r1, [sl, #120]	; 0x78
   22a40:	mov	r1, r9
   22a44:	mov	r2, r4
   22a48:	bl	14e60 <memcpy@plt>
   22a4c:	ldr	r5, [r6]
   22a50:	mov	r0, r5
   22a54:	sub	sp, fp, #28
   22a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a5c:	mvn	r5, #0
   22a60:	b	22a50 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   22a64:	ldr	r1, [sp, #8]
   22a68:	cmp	r7, r1
   22a6c:	ldrne	r0, [r8, #12]
   22a70:	strne	r0, [r7]
   22a74:	ldrne	r0, [r1]
   22a78:	strne	r0, [r8, #12]
   22a7c:	strne	r6, [r1]
   22a80:	ldr	r5, [r8]
   22a84:	b	22a50 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   22a88:	push	{r4, r5, fp, lr}
   22a8c:	add	fp, sp, #8
   22a90:	mov	r4, r1
   22a94:	mov	r5, r0
   22a98:	ldr	r0, [r0, #116]	; 0x74
   22a9c:	cmp	r0, #0
   22aa0:	bne	22abc <flatcc_builder_create_cached_vtable@@Base+0x228>
   22aa4:	mov	r0, r5
   22aa8:	bl	241e8 <flatcc_builder_get_emit_context@@Base+0x80>
   22aac:	mov	r1, r0
   22ab0:	mov	r0, #0
   22ab4:	cmp	r1, #0
   22ab8:	popne	{r4, r5, fp, pc}
   22abc:	ldr	r0, [r5, #92]	; 0x5c
   22ac0:	ldr	r1, [r5, #116]	; 0x74
   22ac4:	rsb	r1, r1, #32
   22ac8:	lsr	r1, r4, r1
   22acc:	add	r0, r0, r1, lsl #2
   22ad0:	pop	{r4, r5, fp, pc}

00022ad4 <flatcc_builder_create_table@@Base>:
   22ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ad8:	add	fp, sp, #28
   22adc:	sub	sp, sp, #84	; 0x54
   22ae0:	strh	r3, [fp, #-30]	; 0xffffffe2
   22ae4:	ldr	r4, [fp, #12]
   22ae8:	cmn	r4, #1
   22aec:	ble	22c1c <flatcc_builder_create_table@@Base+0x148>
   22af0:	ldr	r8, [fp, #16]
   22af4:	tst	r8, #1
   22af8:	beq	22c3c <flatcc_builder_create_table@@Base+0x168>
   22afc:	mov	sl, r2
   22b00:	mov	r6, r1
   22b04:	mov	r5, r0
   22b08:	sub	r0, fp, #30
   22b0c:	mov	r1, #4
   22b10:	bl	22474 <flatcc_builder_start_vector@@Base+0x80>
   22b14:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   22b18:	mov	r0, r5
   22b1c:	mov	r1, r7
   22b20:	bl	21904 <flatcc_builder_create_buffer@@Base+0x1d0>
   22b24:	mov	r0, r5
   22b28:	mov	r1, sl
   22b2c:	mov	r2, r7
   22b30:	bl	21688 <flatcc_builder_embed_buffer@@Base+0x1c8>
   22b34:	mov	r9, r0
   22b38:	mvn	r0, #3
   22b3c:	sub	r0, r0, sl
   22b40:	sub	r0, r0, r9
   22b44:	str	r5, [sp]
   22b48:	ldr	r1, [r5, #136]	; 0x88
   22b4c:	add	r5, r0, r1
   22b50:	rsb	r0, r8, #1
   22b54:	add	r0, r0, r5
   22b58:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   22b5c:	str	r0, [fp, #-36]	; 0xffffffdc
   22b60:	cmp	r4, #1
   22b64:	blt	22b94 <flatcc_builder_create_table@@Base+0xc0>
   22b68:	mvn	r0, #3
   22b6c:	ldr	r7, [fp, #8]
   22b70:	sub	r5, r0, r5
   22b74:	ldrh	r8, [r7], #2
   22b78:	ldr	r0, [r8, r6]
   22b7c:	add	r0, r5, r0
   22b80:	sub	r0, r0, r8
   22b84:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   22b88:	str	r0, [r8, r6]
   22b8c:	subs	r4, r4, #1
   22b90:	bne	22b74 <flatcc_builder_create_table@@Base+0xa0>
   22b94:	sub	r0, fp, #36	; 0x24
   22b98:	str	r0, [sp, #12]
   22b9c:	mov	r0, #4
   22ba0:	str	r0, [sp, #4]
   22ba4:	str	r0, [sp, #16]
   22ba8:	mov	r0, #1
   22bac:	str	r0, [sp, #8]
   22bb0:	cmp	sl, #0
   22bb4:	beq	22bd0 <flatcc_builder_create_table@@Base+0xfc>
   22bb8:	str	r6, [sp, #20]
   22bbc:	str	sl, [sp, #24]
   22bc0:	mov	r0, #2
   22bc4:	str	r0, [sp, #8]
   22bc8:	add	r0, sl, #4
   22bcc:	str	r0, [sp, #4]
   22bd0:	cmp	r9, #0
   22bd4:	ldr	r0, [sp]
   22bd8:	beq	22c0c <flatcc_builder_create_table@@Base+0x138>
   22bdc:	ldr	r2, [sp, #4]
   22be0:	ldr	r1, [sp, #8]
   22be4:	add	r2, r2, r9
   22be8:	str	r2, [sp, #4]
   22bec:	add	r2, sp, #4
   22bf0:	add	r3, r2, r1, lsl #3
   22bf4:	movw	r2, #17268	; 0x4374
   22bf8:	movt	r2, #3
   22bfc:	str	r2, [r3, #8]
   22c00:	str	r9, [r3, #12]
   22c04:	add	r1, r1, #1
   22c08:	str	r1, [sp, #8]
   22c0c:	add	r1, sp, #4
   22c10:	bl	216a0 <flatcc_builder_embed_buffer@@Base+0x1e0>
   22c14:	sub	sp, fp, #28
   22c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c1c:	movw	r0, #19682	; 0x4ce2
   22c20:	movt	r0, #3
   22c24:	movw	r1, #17798	; 0x4586
   22c28:	movt	r1, #3
   22c2c:	movw	r3, #19700	; 0x4cf4
   22c30:	movt	r3, #3
   22c34:	movw	r2, #1237	; 0x4d5
   22c38:	bl	14f44 <__assert_fail@plt>
   22c3c:	movw	r0, #19856	; 0x4d90
   22c40:	movt	r0, #3
   22c44:	movw	r1, #17798	; 0x4586
   22c48:	movt	r1, #3
   22c4c:	movw	r3, #19700	; 0x4cf4
   22c50:	movt	r3, #3
   22c54:	movw	r2, #1243	; 0x4db
   22c58:	bl	14f44 <__assert_fail@plt>

00022c5c <flatcc_builder_check_required_field@@Base>:
   22c5c:	ldr	r2, [r0, #32]
   22c60:	ldrh	r2, [r2, #14]
   22c64:	cmp	r2, #3
   22c68:	bne	22c98 <flatcc_builder_check_required_field@@Base+0x3c>
   22c6c:	ldrh	r3, [r0, #8]
   22c70:	mov	r2, #0
   22c74:	cmp	r3, r1
   22c78:	bls	22c90 <flatcc_builder_check_required_field@@Base+0x34>
   22c7c:	ldr	r0, [r0, #4]
   22c80:	add	r0, r0, r1, lsl #1
   22c84:	ldrh	r2, [r0]
   22c88:	cmp	r2, #0
   22c8c:	movwne	r2, #1
   22c90:	mov	r0, r2
   22c94:	bx	lr
   22c98:	push	{fp, lr}
   22c9c:	mov	fp, sp
   22ca0:	movw	r0, #19867	; 0x4d9b
   22ca4:	movt	r0, #3
   22ca8:	movw	r1, #17798	; 0x4586
   22cac:	movt	r1, #3
   22cb0:	movw	r3, #19910	; 0x4dc6
   22cb4:	movt	r3, #3
   22cb8:	movw	r2, #1272	; 0x4f8
   22cbc:	bl	14f44 <__assert_fail@plt>

00022cc0 <flatcc_builder_check_union_field@@Base>:
   22cc0:	mov	r2, r0
   22cc4:	ldr	r0, [r0, #32]
   22cc8:	ldrh	r0, [r0, #14]
   22ccc:	cmp	r0, #3
   22cd0:	bne	22d30 <flatcc_builder_check_union_field@@Base+0x70>
   22cd4:	mov	r0, #0
   22cd8:	cmp	r1, #0
   22cdc:	ldrhne	r3, [r2, #8]
   22ce0:	cmpne	r3, r1
   22ce4:	bhi	22cec <flatcc_builder_check_union_field@@Base+0x2c>
   22ce8:	bx	lr
   22cec:	ldr	r0, [r2, #4]
   22cf0:	add	r0, r0, r1, lsl #1
   22cf4:	ldrh	r1, [r0, #-2]
   22cf8:	cmp	r1, #0
   22cfc:	beq	22d20 <flatcc_builder_check_union_field@@Base+0x60>
   22d00:	ldr	r2, [r2, #16]
   22d04:	ldrb	r1, [r2, r1]
   22d08:	ldrh	r0, [r0]
   22d0c:	cmp	r1, #0
   22d10:	beq	22d24 <flatcc_builder_check_union_field@@Base+0x64>
   22d14:	cmp	r0, #0
   22d18:	movwne	r0, #1
   22d1c:	bx	lr
   22d20:	ldrh	r0, [r0]
   22d24:	clz	r0, r0
   22d28:	lsr	r0, r0, #5
   22d2c:	bx	lr
   22d30:	push	{fp, lr}
   22d34:	mov	fp, sp
   22d38:	movw	r0, #19867	; 0x4d9b
   22d3c:	movt	r0, #3
   22d40:	movw	r1, #17798	; 0x4586
   22d44:	movt	r1, #3
   22d48:	movw	r3, #19993	; 0x4e19
   22d4c:	movt	r3, #3
   22d50:	movw	r2, #1279	; 0x4ff
   22d54:	bl	14f44 <__assert_fail@plt>

00022d58 <flatcc_builder_check_required@@Base>:
   22d58:	push	{fp, lr}
   22d5c:	mov	fp, sp
   22d60:	mov	r3, r0
   22d64:	ldr	r0, [r0, #32]
   22d68:	ldrh	r0, [r0, #14]
   22d6c:	cmp	r0, #3
   22d70:	bne	22dc8 <flatcc_builder_check_required@@Base+0x70>
   22d74:	ldrh	ip, [r3, #8]
   22d78:	mov	r0, #0
   22d7c:	cmp	ip, r2
   22d80:	movge	r0, #1
   22d84:	cmpge	r2, #1
   22d88:	bge	22d90 <flatcc_builder_check_required@@Base+0x38>
   22d8c:	pop	{fp, pc}
   22d90:	ldr	ip, [r3, #4]
   22d94:	mov	lr, #0
   22d98:	b	22dac <flatcc_builder_check_required@@Base+0x54>
   22d9c:	add	lr, lr, #1
   22da0:	add	r1, r1, #2
   22da4:	cmp	lr, r2
   22da8:	popge	{fp, pc}
   22dac:	ldrh	r3, [r1]
   22db0:	add	r3, ip, r3, lsl #1
   22db4:	ldrh	r3, [r3]
   22db8:	cmp	r3, #0
   22dbc:	bne	22d9c <flatcc_builder_check_required@@Base+0x44>
   22dc0:	mov	r0, #0
   22dc4:	pop	{fp, pc}
   22dc8:	movw	r0, #19867	; 0x4d9b
   22dcc:	movt	r0, #3
   22dd0:	movw	r1, #17798	; 0x4586
   22dd4:	movt	r1, #3
   22dd8:	movw	r3, #20073	; 0x4e69
   22ddc:	movt	r3, #3
   22de0:	movw	r2, #1297	; 0x511
   22de4:	bl	14f44 <__assert_fail@plt>

00022de8 <flatcc_builder_end_table@@Base>:
   22de8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22dec:	add	fp, sp, #24
   22df0:	sub	sp, sp, #16
   22df4:	mov	r4, r0
   22df8:	ldr	r0, [r0, #32]
   22dfc:	ldrh	r0, [r0, #14]
   22e00:	cmp	r0, #3
   22e04:	bne	22f14 <flatcc_builder_end_table@@Base+0x12c>
   22e08:	ldrh	r0, [r4, #8]
   22e0c:	mov	r1, #4
   22e10:	add	r0, r1, r0, lsl #1
   22e14:	ldr	r6, [r4, #4]
   22e18:	strh	r0, [r6, #-4]!
   22e1c:	ldrh	r1, [r4, #20]
   22e20:	add	r1, r1, #4
   22e24:	strh	r1, [r6, #2]
   22e28:	uxth	r5, r0
   22e2c:	ldr	r0, [r4, #12]
   22e30:	eor	r0, r0, r5
   22e34:	movw	r2, #31153	; 0x79b1
   22e38:	movt	r2, #40503	; 0x9e37
   22e3c:	mul	r0, r0, r2
   22e40:	uxth	r1, r1
   22e44:	eor	r0, r0, r1
   22e48:	mul	r3, r0, r2
   22e4c:	str	r3, [r4, #12]
   22e50:	mov	r0, r4
   22e54:	mov	r1, r6
   22e58:	mov	r2, r5
   22e5c:	bl	22894 <flatcc_builder_create_cached_vtable@@Base>
   22e60:	cmp	r0, #0
   22e64:	beq	22f04 <flatcc_builder_end_table@@Base+0x11c>
   22e68:	mov	r7, r0
   22e6c:	mov	r8, #0
   22e70:	mov	r0, r6
   22e74:	mov	r1, #0
   22e78:	mov	r2, r5
   22e7c:	bl	14ef0 <memset@plt>
   22e80:	ldrh	r3, [r4, #130]	; 0x82
   22e84:	ldr	r0, [r4, #76]	; 0x4c
   22e88:	ldr	r6, [r4]
   22e8c:	ldr	r1, [r4, #16]
   22e90:	ldr	r2, [r4, #20]
   22e94:	ldr	r5, [r4, #32]
   22e98:	ldr	r5, [r5, #20]
   22e9c:	add	r0, r0, r5
   22ea0:	sub	r6, r6, r0
   22ea4:	asr	r6, r6, #1
   22ea8:	stm	sp, {r0, r6, r7}
   22eac:	mov	r0, r4
   22eb0:	bl	22ad4 <flatcc_builder_create_table@@Base>
   22eb4:	cmp	r0, #0
   22eb8:	beq	22f08 <flatcc_builder_end_table@@Base+0x120>
   22ebc:	mov	r5, r0
   22ec0:	ldr	r0, [r4, #32]
   22ec4:	ldr	r1, [r4, #52]	; 0x34
   22ec8:	ldr	r2, [r4, #76]	; 0x4c
   22ecc:	ldr	r3, [r0, #24]
   22ed0:	str	r3, [r4, #12]
   22ed4:	ldrh	r3, [r0, #28]
   22ed8:	strh	r3, [r4, #8]
   22edc:	ldr	r3, [r0, #16]
   22ee0:	add	r1, r1, r3
   22ee4:	str	r1, [r4, #4]
   22ee8:	ldr	r0, [r0, #20]
   22eec:	add	r0, r2, r0
   22ef0:	str	r0, [r4]
   22ef4:	mov	r0, r4
   22ef8:	bl	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   22efc:	mov	r8, r5
   22f00:	b	22f08 <flatcc_builder_end_table@@Base+0x120>
   22f04:	mov	r8, #0
   22f08:	mov	r0, r8
   22f0c:	sub	sp, fp, #24
   22f10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f14:	movw	r0, #19867	; 0x4d9b
   22f18:	movt	r0, #3
   22f1c:	movw	r1, #17798	; 0x4586
   22f20:	movt	r1, #3
   22f24:	movw	r3, #20163	; 0x4ec3
   22f28:	movt	r3, #3
   22f2c:	movw	r2, #1317	; 0x525
   22f30:	bl	14f44 <__assert_fail@plt>

00022f34 <flatcc_builder_create_vector@@Base>:
   22f34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22f38:	add	fp, sp, #24
   22f3c:	sub	sp, sp, #80	; 0x50
   22f40:	mov	r4, r0
   22f44:	ldr	r0, [fp, #8]
   22f48:	strh	r0, [fp, #-26]	; 0xffffffe6
   22f4c:	ldr	r0, [fp, #12]
   22f50:	cmp	r2, r0
   22f54:	bhi	23024 <flatcc_builder_create_vector@@Base+0xf0>
   22f58:	mov	r6, r3
   22f5c:	mov	r7, r2
   22f60:	mov	r8, r1
   22f64:	sub	r0, fp, #26
   22f68:	mov	r9, #4
   22f6c:	mov	r1, #4
   22f70:	bl	22474 <flatcc_builder_start_vector@@Base+0x80>
   22f74:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   22f78:	mov	r0, r4
   22f7c:	mov	r1, r5
   22f80:	bl	21904 <flatcc_builder_create_buffer@@Base+0x1d0>
   22f84:	mov	r0, r7
   22f88:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   22f8c:	str	r7, [fp, #-32]	; 0xffffffe0
   22f90:	mul	r6, r6, r7
   22f94:	mov	r0, r4
   22f98:	mov	r1, r6
   22f9c:	mov	r2, r5
   22fa0:	bl	21688 <flatcc_builder_embed_buffer@@Base+0x1c8>
   22fa4:	str	r9, [sp]
   22fa8:	sub	r1, fp, #32
   22fac:	str	r1, [sp, #8]
   22fb0:	str	r9, [sp, #12]
   22fb4:	mov	r1, #1
   22fb8:	str	r1, [sp, #4]
   22fbc:	cmp	r6, #0
   22fc0:	beq	22fdc <flatcc_builder_create_vector@@Base+0xa8>
   22fc4:	str	r8, [sp, #16]
   22fc8:	str	r6, [sp, #20]
   22fcc:	mov	r1, #2
   22fd0:	str	r1, [sp, #4]
   22fd4:	add	r1, r6, #4
   22fd8:	str	r1, [sp]
   22fdc:	cmp	r0, #0
   22fe0:	beq	23010 <flatcc_builder_create_vector@@Base+0xdc>
   22fe4:	ldm	sp, {r1, r2}
   22fe8:	add	r1, r1, r0
   22fec:	str	r1, [sp]
   22ff0:	mov	r1, sp
   22ff4:	add	r1, r1, r2, lsl #3
   22ff8:	movw	r3, #17268	; 0x4374
   22ffc:	movt	r3, #3
   23000:	str	r3, [r1, #8]
   23004:	str	r0, [r1, #12]
   23008:	add	r0, r2, #1
   2300c:	str	r0, [sp, #4]
   23010:	mov	r1, sp
   23014:	mov	r0, r4
   23018:	bl	216a0 <flatcc_builder_embed_buffer@@Base+0x1e0>
   2301c:	sub	sp, fp, #24
   23020:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23024:	movw	r0, #20229	; 0x4f05
   23028:	movt	r0, #3
   2302c:	movw	r1, #17798	; 0x4586
   23030:	movt	r1, #3
   23034:	movw	r3, #20248	; 0x4f18
   23038:	movt	r3, #3
   2303c:	movw	r2, #1365	; 0x555
   23040:	bl	14f44 <__assert_fail@plt>

00023044 <flatcc_builder_end_vector@@Base>:
   23044:	push	{r4, r5, fp, lr}
   23048:	add	fp, sp, #8
   2304c:	sub	sp, sp, #8
   23050:	mov	r4, r0
   23054:	ldr	r0, [r0, #32]
   23058:	ldrh	r1, [r0, #14]
   2305c:	cmp	r1, #4
   23060:	bne	230a4 <flatcc_builder_end_vector@@Base+0x60>
   23064:	ldr	r1, [r4, #16]
   23068:	ldrh	r5, [r4, #130]	; 0x82
   2306c:	ldr	r3, [r0, #16]
   23070:	ldr	r2, [r0, #20]
   23074:	ldr	r0, [r0, #24]
   23078:	str	r5, [sp]
   2307c:	str	r0, [sp, #4]
   23080:	mov	r0, r4
   23084:	bl	22f34 <flatcc_builder_create_vector@@Base>
   23088:	mov	r5, r0
   2308c:	cmp	r0, #0
   23090:	movne	r0, r4
   23094:	blne	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   23098:	mov	r0, r5
   2309c:	sub	sp, fp, #8
   230a0:	pop	{r4, r5, fp, pc}
   230a4:	movw	r0, #18601	; 0x48a9
   230a8:	movt	r0, #3
   230ac:	movw	r1, #17798	; 0x4586
   230b0:	movt	r1, #3
   230b4:	movw	r3, #20366	; 0x4f8e
   230b8:	movt	r3, #3
   230bc:	movw	r2, #1400	; 0x578
   230c0:	bl	14f44 <__assert_fail@plt>

000230c4 <flatcc_builder_vector_count@@Base>:
   230c4:	ldr	r0, [r0, #32]
   230c8:	ldr	r0, [r0, #20]
   230cc:	bx	lr

000230d0 <flatcc_builder_vector_edit@@Base>:
   230d0:	ldr	r0, [r0, #16]
   230d4:	bx	lr

000230d8 <flatcc_builder_create_offset_vector_direct@@Base>:
   230d8:	mov	r3, #0
   230dc:	b	230e0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   230e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   230e4:	add	fp, sp, #24
   230e8:	sub	sp, sp, #80	; 0x50
   230ec:	mov	r8, r0
   230f0:	mov	r0, #0
   230f4:	cmn	r2, #-1073741823	; 0xc0000001
   230f8:	bhi	23228 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   230fc:	mov	r5, r3
   23100:	mov	r9, r2
   23104:	mov	r7, r1
   23108:	mov	r6, #4
   2310c:	mov	r0, r8
   23110:	mov	r1, #4
   23114:	bl	21904 <flatcc_builder_create_buffer@@Base+0x1d0>
   23118:	mov	r0, r9
   2311c:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   23120:	str	r9, [fp, #-28]	; 0xffffffe4
   23124:	lsl	r4, r9, #2
   23128:	mov	r0, r8
   2312c:	mov	r1, r4
   23130:	mov	r2, #4
   23134:	bl	21688 <flatcc_builder_embed_buffer@@Base+0x1c8>
   23138:	str	r6, [sp, #4]
   2313c:	sub	r1, fp, #28
   23140:	str	r1, [sp, #12]
   23144:	str	r6, [sp, #16]
   23148:	mov	r1, #1
   2314c:	str	r1, [sp, #8]
   23150:	mov	r1, #0
   23154:	cmp	r1, r9, lsl #2
   23158:	beq	23174 <flatcc_builder_create_offset_vector_direct@@Base+0x9c>
   2315c:	str	r7, [sp, #20]
   23160:	str	r4, [sp, #24]
   23164:	mov	r1, #2
   23168:	str	r1, [sp, #8]
   2316c:	add	r1, r4, #4
   23170:	str	r1, [sp, #4]
   23174:	cmp	r0, #0
   23178:	beq	231a8 <flatcc_builder_create_offset_vector_direct@@Base+0xd0>
   2317c:	ldmib	sp, {r1, r2}
   23180:	add	r1, r1, r0
   23184:	str	r1, [sp, #4]
   23188:	add	r1, sp, #4
   2318c:	add	r1, r1, r2, lsl #3
   23190:	movw	r3, #17268	; 0x4374
   23194:	movt	r3, #3
   23198:	str	r3, [r1, #8]
   2319c:	str	r0, [r1, #12]
   231a0:	add	r0, r2, #1
   231a4:	str	r0, [sp, #8]
   231a8:	cmp	r9, #0
   231ac:	beq	2321c <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   231b0:	ldr	r0, [r8, #136]	; 0x88
   231b4:	mvn	r1, #3
   231b8:	sub	r0, r1, r0
   231bc:	ldr	r1, [sp, #4]
   231c0:	add	r4, r0, r1
   231c4:	mov	r6, #0
   231c8:	ldr	r0, [r7, r6, lsl #2]
   231cc:	cmp	r0, #0
   231d0:	beq	231f8 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   231d4:	add	r0, r4, r0
   231d8:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   231dc:	str	r0, [r7, r6, lsl #2]
   231e0:	cmp	r5, #0
   231e4:	beq	2320c <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   231e8:	ldrb	r0, [r5, r6]
   231ec:	cmp	r0, #0
   231f0:	bne	2320c <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   231f4:	b	23230 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   231f8:	cmp	r5, #0
   231fc:	beq	23250 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   23200:	ldrb	r0, [r5, r6]
   23204:	cmp	r0, #0
   23208:	bne	23270 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   2320c:	sub	r4, r4, #4
   23210:	add	r6, r6, #1
   23214:	cmp	r6, r9
   23218:	bcc	231c8 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   2321c:	add	r1, sp, #4
   23220:	mov	r0, r8
   23224:	bl	216a0 <flatcc_builder_embed_buffer@@Base+0x1e0>
   23228:	sub	sp, fp, #24
   2322c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23230:	movw	r0, #22304	; 0x5720
   23234:	movt	r0, #3
   23238:	movw	r1, #17798	; 0x4586
   2323c:	movt	r1, #3
   23240:	movw	r3, #22318	; 0x572e
   23244:	movt	r3, #3
   23248:	movw	r2, #1457	; 0x5b1
   2324c:	bl	14f44 <__assert_fail@plt>
   23250:	movw	r0, #22316	; 0x572c
   23254:	movt	r0, #3
   23258:	movw	r1, #17798	; 0x4586
   2325c:	movt	r1, #3
   23260:	movw	r3, #22318	; 0x572e
   23264:	movt	r3, #3
   23268:	movw	r2, #1463	; 0x5b7
   2326c:	bl	14f44 <__assert_fail@plt>
   23270:	movw	r0, #22449	; 0x57b1
   23274:	movt	r0, #3
   23278:	movw	r1, #17798	; 0x4586
   2327c:	movt	r1, #3
   23280:	movw	r3, #22318	; 0x572e
   23284:	movt	r3, #3
   23288:	movw	r2, #1461	; 0x5b5
   2328c:	bl	14f44 <__assert_fail@plt>

00023290 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   23290:	push	{r4, r5, fp, lr}
   23294:	add	fp, sp, #8
   23298:	mov	r3, r1
   2329c:	mov	r4, r0
   232a0:	ldr	r0, [r0, #32]
   232a4:	ldrh	r1, [r0, #14]
   232a8:	cmp	r1, #5
   232ac:	bne	232d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   232b0:	ldr	r2, [r0, #20]
   232b4:	ldr	r1, [r4, #16]
   232b8:	mov	r0, r4
   232bc:	bl	230e0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   232c0:	mov	r5, r0
   232c4:	cmp	r0, #0
   232c8:	movne	r0, r4
   232cc:	blne	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   232d0:	mov	r0, r5
   232d4:	pop	{r4, r5, fp, pc}
   232d8:	movw	r0, #18850	; 0x49a2
   232dc:	movt	r0, #3
   232e0:	movw	r1, #17798	; 0x4586
   232e4:	movt	r1, #3
   232e8:	movw	r3, #20507	; 0x501b
   232ec:	movt	r3, #3
   232f0:	movw	r2, #1493	; 0x5d5
   232f4:	bl	14f44 <__assert_fail@plt>

000232f8 <flatcc_builder_offset_vector_edit@@Base>:
   232f8:	ldr	r0, [r0, #16]
   232fc:	bx	lr

00023300 <flatcc_builder_offset_vector_count@@Base>:
   23300:	ldr	r0, [r0, #32]
   23304:	ldr	r0, [r0, #20]
   23308:	bx	lr

0002330c <flatcc_builder_table_add_union@@Base>:
   2330c:	push	{r4, r5, r6, r7, fp, lr}
   23310:	add	fp, sp, #16
   23314:	mov	r5, r0
   23318:	ldr	r0, [r0, #32]
   2331c:	ldrh	r0, [r0, #14]
   23320:	cmp	r0, #3
   23324:	bne	23398 <flatcc_builder_table_add_union@@Base+0x8c>
   23328:	mov	r7, r3
   2332c:	mov	r6, r1
   23330:	uxtb	r4, r2
   23334:	cmp	r3, #0
   23338:	beq	23344 <flatcc_builder_table_add_union@@Base+0x38>
   2333c:	cmp	r4, #0
   23340:	beq	233b8 <flatcc_builder_table_add_union@@Base+0xac>
   23344:	cmp	r7, #0
   23348:	beq	23364 <flatcc_builder_table_add_union@@Base+0x58>
   2334c:	mov	r0, r5
   23350:	mov	r1, r6
   23354:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   23358:	cmp	r0, #0
   2335c:	beq	233f8 <flatcc_builder_table_add_union@@Base+0xec>
   23360:	str	r7, [r0]
   23364:	sub	r1, r6, #1
   23368:	mov	r0, r5
   2336c:	mov	r2, #1
   23370:	mov	r3, #1
   23374:	bl	234dc <flatcc_builder_table_add@@Base>
   23378:	cmp	r0, #0
   2337c:	beq	233d8 <flatcc_builder_table_add_union@@Base+0xcc>
   23380:	mov	r5, r0
   23384:	mov	r0, r4
   23388:	bl	235bc <flatcc_builder_table_add@@Base+0xe0>
   2338c:	strb	r4, [r5]
   23390:	mov	r0, #0
   23394:	pop	{r4, r5, r6, r7, fp, pc}
   23398:	movw	r0, #19867	; 0x4d9b
   2339c:	movt	r0, #3
   233a0:	movw	r1, #17798	; 0x4586
   233a4:	movt	r1, #3
   233a8:	movw	r3, #20621	; 0x508d
   233ac:	movt	r3, #3
   233b0:	movw	r2, #1518	; 0x5ee
   233b4:	bl	14f44 <__assert_fail@plt>
   233b8:	movw	r0, #20709	; 0x50e5
   233bc:	movt	r0, #3
   233c0:	movw	r1, #17798	; 0x4586
   233c4:	movt	r1, #3
   233c8:	movw	r3, #20621	; 0x508d
   233cc:	movt	r3, #3
   233d0:	movw	r2, #1519	; 0x5ef
   233d4:	bl	14f44 <__assert_fail@plt>
   233d8:	movw	r0, #20753	; 0x5111
   233dc:	movt	r0, #3
   233e0:	movw	r1, #17798	; 0x4586
   233e4:	movt	r1, #3
   233e8:	movw	r3, #20621	; 0x508d
   233ec:	movt	r3, #3
   233f0:	movw	r2, #1526	; 0x5f6
   233f4:	bl	14f44 <__assert_fail@plt>
   233f8:	movw	r0, #20743	; 0x5107
   233fc:	movt	r0, #3
   23400:	movw	r1, #17798	; 0x4586
   23404:	movt	r1, #3
   23408:	movw	r3, #20621	; 0x508d
   2340c:	movt	r3, #3
   23410:	movw	r2, #1522	; 0x5f2
   23414:	bl	14f44 <__assert_fail@plt>

00023418 <flatcc_builder_table_add_offset@@Base>:
   23418:	push	{fp, lr}
   2341c:	mov	fp, sp
   23420:	ldr	r2, [r0, #32]
   23424:	ldrh	r2, [r2, #14]
   23428:	cmp	r2, #3
   2342c:	bne	2347c <flatcc_builder_table_add_offset@@Base+0x64>
   23430:	movw	r2, #32765	; 0x7ffd
   23434:	cmp	r1, r2
   23438:	bcs	2349c <flatcc_builder_table_add_offset@@Base+0x84>
   2343c:	ldr	r2, [r0, #4]
   23440:	add	r2, r2, r1, lsl #1
   23444:	ldrh	r2, [r2]
   23448:	cmp	r2, #0
   2344c:	bne	234bc <flatcc_builder_table_add_offset@@Base+0xa4>
   23450:	ldr	r2, [r0, #12]
   23454:	eor	r2, r2, r1
   23458:	movw	r3, #31153	; 0x79b1
   2345c:	movt	r3, #40503	; 0x9e37
   23460:	mul	r2, r2, r3
   23464:	eor	r2, r2, #4
   23468:	mul	r2, r2, r3
   2346c:	str	r2, [r0, #12]
   23470:	uxth	r1, r1
   23474:	pop	{fp, lr}
   23478:	b	23de8 <flatcc_builder_table_add_copy@@Base+0x40>
   2347c:	movw	r0, #19867	; 0x4d9b
   23480:	movt	r0, #3
   23484:	movw	r1, #17798	; 0x4586
   23488:	movt	r1, #3
   2348c:	movw	r3, #21647	; 0x548f
   23490:	movt	r3, #3
   23494:	movw	r2, #1811	; 0x713
   23498:	bl	14f44 <__assert_fail@plt>
   2349c:	movw	r0, #21519	; 0x540f
   234a0:	movt	r0, #3
   234a4:	movw	r1, #17798	; 0x4586
   234a8:	movt	r1, #3
   234ac:	movw	r3, #21647	; 0x548f
   234b0:	movt	r3, #3
   234b4:	movw	r2, #1812	; 0x714
   234b8:	bl	14f44 <__assert_fail@plt>
   234bc:	movw	r0, #22316	; 0x572c
   234c0:	movt	r0, #3
   234c4:	movw	r1, #17798	; 0x4586
   234c8:	movt	r1, #3
   234cc:	movw	r3, #21647	; 0x548f
   234d0:	movt	r3, #3
   234d4:	movw	r2, #1819	; 0x71b
   234d8:	bl	14f44 <__assert_fail@plt>

000234dc <flatcc_builder_table_add@@Base>:
   234dc:	push	{fp, lr}
   234e0:	mov	fp, sp
   234e4:	mov	ip, r3
   234e8:	ldr	r3, [r0, #32]
   234ec:	ldrh	r3, [r3, #14]
   234f0:	cmp	r3, #3
   234f4:	bne	2355c <flatcc_builder_table_add@@Base+0x80>
   234f8:	movw	r3, #32765	; 0x7ffd
   234fc:	cmp	r1, r3
   23500:	bcs	2357c <flatcc_builder_table_add@@Base+0xa0>
   23504:	mov	lr, r2
   23508:	ldrh	r3, [r0, #130]	; 0x82
   2350c:	cmp	r3, ip
   23510:	strhcc	ip, [r0, #130]	; 0x82
   23514:	ldr	r3, [r0, #4]
   23518:	add	r3, r3, r1, lsl #1
   2351c:	ldrh	r3, [r3]
   23520:	cmp	r3, #0
   23524:	bne	2359c <flatcc_builder_table_add@@Base+0xc0>
   23528:	ldr	r3, [r0, #12]
   2352c:	eor	r3, r3, r1
   23530:	movw	r2, #31153	; 0x79b1
   23534:	movt	r2, #40503	; 0x9e37
   23538:	mul	r3, r3, r2
   2353c:	eor	r3, r3, lr
   23540:	mul	r2, r3, r2
   23544:	str	r2, [r0, #12]
   23548:	uxth	r3, r1
   2354c:	mov	r1, lr
   23550:	mov	r2, ip
   23554:	pop	{fp, lr}
   23558:	b	23cdc <flatcc_builder_string_len@@Base+0xc>
   2355c:	movw	r0, #19867	; 0x4d9b
   23560:	movt	r0, #3
   23564:	movw	r1, #17798	; 0x4586
   23568:	movt	r1, #3
   2356c:	movw	r3, #21445	; 0x53c5
   23570:	movt	r3, #3
   23574:	movw	r2, #1773	; 0x6ed
   23578:	bl	14f44 <__assert_fail@plt>
   2357c:	movw	r0, #21519	; 0x540f
   23580:	movt	r0, #3
   23584:	movw	r1, #17798	; 0x4586
   23588:	movt	r1, #3
   2358c:	movw	r3, #21445	; 0x53c5
   23590:	movt	r3, #3
   23594:	movw	r2, #1774	; 0x6ee
   23598:	bl	14f44 <__assert_fail@plt>
   2359c:	movw	r0, #22316	; 0x572c
   235a0:	movt	r0, #3
   235a4:	movw	r1, #17798	; 0x4586
   235a8:	movt	r1, #3
   235ac:	movw	r3, #21445	; 0x53c5
   235b0:	movt	r3, #3
   235b4:	movw	r2, #1784	; 0x6f8
   235b8:	bl	14f44 <__assert_fail@plt>
   235bc:	bx	lr

000235c0 <flatcc_builder_table_add_union_vector@@Base>:
   235c0:	push	{r4, r5, r6, r7, fp, lr}
   235c4:	add	fp, sp, #16
   235c8:	mov	r6, r0
   235cc:	ldr	r0, [r0, #32]
   235d0:	ldrh	r0, [r0, #14]
   235d4:	cmp	r0, #3
   235d8:	bne	23640 <flatcc_builder_table_add_union_vector@@Base+0x80>
   235dc:	mov	r4, r3
   235e0:	mov	r7, r2
   235e4:	mov	r5, r1
   235e8:	clz	r0, r3
   235ec:	lsr	r0, r0, #5
   235f0:	clz	r1, r2
   235f4:	lsr	r1, r1, #5
   235f8:	cmp	r1, r0
   235fc:	bne	23660 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   23600:	cmp	r7, #0
   23604:	beq	23638 <flatcc_builder_table_add_union_vector@@Base+0x78>
   23608:	sub	r1, r5, #1
   2360c:	mov	r0, r6
   23610:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   23614:	cmp	r0, #0
   23618:	beq	23680 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   2361c:	str	r7, [r0]
   23620:	mov	r0, r6
   23624:	mov	r1, r5
   23628:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   2362c:	cmp	r0, #0
   23630:	beq	236a0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   23634:	str	r4, [r0]
   23638:	mov	r0, #0
   2363c:	pop	{r4, r5, r6, r7, fp, pc}
   23640:	movw	r0, #19867	; 0x4d9b
   23644:	movt	r0, #3
   23648:	movw	r1, #17798	; 0x4586
   2364c:	movt	r1, #3
   23650:	movw	r3, #20765	; 0x511d
   23654:	movt	r3, #3
   23658:	mov	r2, #1536	; 0x600
   2365c:	bl	14f44 <__assert_fail@plt>
   23660:	movw	r0, #20864	; 0x5180
   23664:	movt	r0, #3
   23668:	movw	r1, #17798	; 0x4586
   2366c:	movt	r1, #3
   23670:	movw	r3, #20765	; 0x511d
   23674:	movt	r3, #3
   23678:	movw	r2, #1537	; 0x601
   2367c:	bl	14f44 <__assert_fail@plt>
   23680:	movw	r0, #20743	; 0x5107
   23684:	movt	r0, #3
   23688:	movw	r1, #17798	; 0x4586
   2368c:	movt	r1, #3
   23690:	movw	r3, #20765	; 0x511d
   23694:	movt	r3, #3
   23698:	movw	r2, #1540	; 0x604
   2369c:	bl	14f44 <__assert_fail@plt>
   236a0:	movw	r0, #20743	; 0x5107
   236a4:	movt	r0, #3
   236a8:	movw	r1, #17798	; 0x4586
   236ac:	movt	r1, #3
   236b0:	movw	r3, #20765	; 0x511d
   236b4:	movt	r3, #3
   236b8:	movw	r2, #1544	; 0x608
   236bc:	bl	14f44 <__assert_fail@plt>

000236c0 <flatcc_builder_create_union_vector@@Base>:
   236c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   236c4:	add	fp, sp, #24
   236c8:	sub	sp, sp, #16
   236cc:	mov	r6, r3
   236d0:	mov	r7, r2
   236d4:	mov	r4, r1
   236d8:	mov	r5, r0
   236dc:	mov	r0, #0
   236e0:	str	r0, [r5]
   236e4:	str	r0, [r5, #4]
   236e8:	mov	r0, r1
   236ec:	bl	22484 <flatcc_builder_start_offset_vector@@Base>
   236f0:	cmp	r0, #0
   236f4:	beq	23700 <flatcc_builder_create_union_vector@@Base+0x40>
   236f8:	sub	sp, fp, #24
   236fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23700:	mov	r0, r4
   23704:	mov	r1, r6
   23708:	bl	21fd0 <flatcc_builder_extend_offset_vector@@Base>
   2370c:	cmp	r0, #0
   23710:	beq	236f8 <flatcc_builder_create_union_vector@@Base+0x38>
   23714:	mov	r0, r4
   23718:	mov	r1, r6
   2371c:	bl	21d4c <flatcc_builder_start_struct@@Base+0x84>
   23720:	cmp	r0, #0
   23724:	beq	236f8 <flatcc_builder_create_union_vector@@Base+0x38>
   23728:	mov	r8, r0
   2372c:	mov	r0, r4
   23730:	bl	232f8 <flatcc_builder_offset_vector_edit@@Base>
   23734:	mov	ip, r0
   23738:	cmp	r6, #0
   2373c:	beq	2376c <flatcc_builder_create_union_vector@@Base+0xac>
   23740:	add	r0, r7, #4
   23744:	mov	r1, r6
   23748:	mov	r2, ip
   2374c:	mov	r7, r8
   23750:	ldrb	r3, [r0, #-4]
   23754:	strb	r3, [r7], #1
   23758:	ldr	r3, [r0]
   2375c:	str	r3, [r2], #4
   23760:	add	r0, r0, #8
   23764:	subs	r1, r1, #1
   23768:	bne	23750 <flatcc_builder_create_union_vector@@Base+0x90>
   2376c:	str	r6, [sp]
   23770:	add	r0, sp, #8
   23774:	mov	r1, r4
   23778:	mov	r2, r8
   2377c:	mov	r3, ip
   23780:	bl	237a0 <flatcc_builder_create_union_vector_direct@@Base>
   23784:	ldr	r0, [sp, #8]
   23788:	ldr	r1, [sp, #12]
   2378c:	stm	r5, {r0, r1}
   23790:	mov	r0, r4
   23794:	bl	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   23798:	sub	sp, fp, #24
   2379c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000237a0 <flatcc_builder_create_union_vector_direct@@Base>:
   237a0:	push	{r4, r5, r6, r7, fp, lr}
   237a4:	add	fp, sp, #16
   237a8:	sub	sp, sp, #8
   237ac:	mov	r5, r2
   237b0:	mov	r6, r1
   237b4:	mov	r4, r0
   237b8:	mov	r0, #0
   237bc:	str	r0, [r4]
   237c0:	str	r0, [r4, #4]
   237c4:	ldr	r7, [fp, #8]
   237c8:	mov	r0, r1
   237cc:	mov	r1, r3
   237d0:	mov	r2, r7
   237d4:	mov	r3, r5
   237d8:	bl	230e0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   237dc:	str	r0, [r4, #4]
   237e0:	cmp	r0, #0
   237e4:	beq	23810 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   237e8:	mvn	r0, #0
   237ec:	mov	r1, #1
   237f0:	str	r1, [sp]
   237f4:	str	r0, [sp, #4]
   237f8:	mov	r0, r6
   237fc:	mov	r1, r5
   23800:	mov	r2, r7
   23804:	mov	r3, #1
   23808:	bl	22f34 <flatcc_builder_create_vector@@Base>
   2380c:	str	r0, [r4]
   23810:	sub	sp, fp, #16
   23814:	pop	{r4, r5, r6, r7, fp, pc}

00023818 <flatcc_builder_start_union_vector@@Base>:
   23818:	push	{r4, r5, fp, lr}
   2381c:	add	fp, sp, #8
   23820:	mov	r4, r0
   23824:	mov	r1, #4
   23828:	bl	21a9c <flatcc_builder_start_buffer@@Base+0xbc>
   2382c:	mvn	r5, #0
   23830:	cmp	r0, #0
   23834:	beq	23840 <flatcc_builder_start_union_vector@@Base+0x28>
   23838:	mov	r0, r5
   2383c:	pop	{r4, r5, fp, pc}
   23840:	ldr	r0, [r4, #32]
   23844:	mov	r1, #8
   23848:	str	r1, [r0, #16]
   2384c:	ldr	r0, [r4, #32]
   23850:	mov	r5, #0
   23854:	str	r5, [r0, #20]
   23858:	ldr	r0, [r4, #32]
   2385c:	mov	r1, #7
   23860:	strh	r1, [r0, #14]
   23864:	mov	r0, r4
   23868:	mvn	r1, #3
   2386c:	bl	21d14 <flatcc_builder_start_struct@@Base+0x4c>
   23870:	mov	r0, r5
   23874:	pop	{r4, r5, fp, pc}

00023878 <flatcc_builder_end_union_vector@@Base>:
   23878:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2387c:	add	fp, sp, #24
   23880:	sub	sp, sp, #16
   23884:	mov	r9, r0
   23888:	mov	r0, #0
   2388c:	str	r0, [r9]
   23890:	str	r0, [r9, #4]
   23894:	ldr	r0, [r1, #32]
   23898:	ldrh	r0, [r0, #14]
   2389c:	cmp	r0, #7
   238a0:	bne	23940 <flatcc_builder_end_union_vector@@Base+0xc8>
   238a4:	mov	r4, r1
   238a8:	mov	r0, r1
   238ac:	bl	23960 <flatcc_builder_union_vector_count@@Base>
   238b0:	mov	r6, r0
   238b4:	add	r1, r0, r0, lsl #2
   238b8:	mov	r0, r4
   238bc:	bl	21d4c <flatcc_builder_start_struct@@Base+0x84>
   238c0:	cmp	r0, #0
   238c4:	beq	23938 <flatcc_builder_end_union_vector@@Base+0xc0>
   238c8:	mov	r7, r0
   238cc:	add	r8, r0, r6, lsl #2
   238d0:	mov	r0, r4
   238d4:	bl	2396c <flatcc_builder_union_vector_edit@@Base>
   238d8:	cmp	r6, #0
   238dc:	beq	2390c <flatcc_builder_end_union_vector@@Base+0x94>
   238e0:	add	r0, r0, #4
   238e4:	mov	r1, r6
   238e8:	mov	r2, r7
   238ec:	mov	r3, r8
   238f0:	ldrb	r5, [r0, #-4]
   238f4:	strb	r5, [r3], #1
   238f8:	ldr	r5, [r0]
   238fc:	str	r5, [r2], #4
   23900:	add	r0, r0, #8
   23904:	subs	r1, r1, #1
   23908:	bne	238f0 <flatcc_builder_end_union_vector@@Base+0x78>
   2390c:	str	r6, [sp]
   23910:	add	r0, sp, #8
   23914:	mov	r1, r4
   23918:	mov	r2, r8
   2391c:	mov	r3, r7
   23920:	bl	237a0 <flatcc_builder_create_union_vector_direct@@Base>
   23924:	ldr	r0, [sp, #8]
   23928:	ldr	r1, [sp, #12]
   2392c:	stm	r9, {r0, r1}
   23930:	mov	r0, r4
   23934:	bl	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   23938:	sub	sp, fp, #24
   2393c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23940:	movw	r0, #20904	; 0x51a8
   23944:	movt	r0, #3
   23948:	movw	r1, #17798	; 0x4586
   2394c:	movt	r1, #3
   23950:	movw	r3, #20954	; 0x51da
   23954:	movt	r3, #3
   23958:	movw	r2, #1617	; 0x651
   2395c:	bl	14f44 <__assert_fail@plt>

00023960 <flatcc_builder_union_vector_count@@Base>:
   23960:	ldr	r0, [r0, #32]
   23964:	ldr	r0, [r0, #20]
   23968:	bx	lr

0002396c <flatcc_builder_union_vector_edit@@Base>:
   2396c:	ldr	r0, [r0, #16]
   23970:	bx	lr

00023974 <flatcc_builder_extend_union_vector@@Base>:
   23974:	push	{r4, r5, fp, lr}
   23978:	add	fp, sp, #8
   2397c:	mov	r5, r1
   23980:	mov	r4, r0
   23984:	mvn	r2, #-536870912	; 0xe0000000
   23988:	bl	21e50 <flatcc_builder_extend_vector@@Base+0x44>
   2398c:	mov	r1, r0
   23990:	mov	r0, #0
   23994:	cmp	r1, #0
   23998:	popne	{r4, r5, fp, pc}
   2399c:	lsl	r1, r5, #3
   239a0:	mov	r0, r4
   239a4:	bl	21d4c <flatcc_builder_start_struct@@Base+0x84>
   239a8:	pop	{r4, r5, fp, pc}

000239ac <flatcc_builder_truncate_union_vector@@Base>:
   239ac:	push	{fp, lr}
   239b0:	mov	fp, sp
   239b4:	ldr	r2, [r0, #32]
   239b8:	ldrh	r3, [r2, #14]
   239bc:	cmp	r3, #7
   239c0:	bne	239f0 <flatcc_builder_truncate_union_vector@@Base+0x44>
   239c4:	ldr	r3, [r2, #20]
   239c8:	cmp	r3, r1
   239cc:	bcc	23a10 <flatcc_builder_truncate_union_vector@@Base+0x64>
   239d0:	sub	r3, r3, r1
   239d4:	str	r3, [r2, #20]
   239d8:	ldr	r2, [r0, #32]
   239dc:	ldr	r2, [r2, #16]
   239e0:	mul	r1, r2, r1
   239e4:	bl	222d8 <flatcc_builder_truncate_vector@@Base+0x84>
   239e8:	mov	r0, #0
   239ec:	pop	{fp, pc}
   239f0:	movw	r0, #20904	; 0x51a8
   239f4:	movt	r0, #3
   239f8:	movw	r1, #17798	; 0x4586
   239fc:	movt	r1, #3
   23a00:	movw	r3, #21037	; 0x522d
   23a04:	movt	r3, #3
   23a08:	movw	r2, #1665	; 0x681
   23a0c:	bl	14f44 <__assert_fail@plt>
   23a10:	movw	r0, #19468	; 0x4c0c
   23a14:	movt	r0, #3
   23a18:	movw	r1, #17798	; 0x4586
   23a1c:	movt	r1, #3
   23a20:	movw	r3, #21037	; 0x522d
   23a24:	movt	r3, #3
   23a28:	movw	r2, #1666	; 0x682
   23a2c:	bl	14f44 <__assert_fail@plt>

00023a30 <flatcc_builder_union_vector_push@@Base>:
   23a30:	push	{r4, r5, r6, sl, fp, lr}
   23a34:	add	fp, sp, #16
   23a38:	mov	r4, r2
   23a3c:	mov	r5, r1
   23a40:	ldr	r1, [r0, #32]
   23a44:	ldrh	r2, [r1, #14]
   23a48:	cmp	r2, #7
   23a4c:	bne	23a88 <flatcc_builder_union_vector_push@@Base+0x58>
   23a50:	ldr	r2, [r1, #20]
   23a54:	mov	r6, #0
   23a58:	cmn	r2, #-536870911	; 0xe0000001
   23a5c:	beq	23a80 <flatcc_builder_union_vector_push@@Base+0x50>
   23a60:	add	r2, r2, #1
   23a64:	str	r2, [r1, #20]
   23a68:	mov	r1, #8
   23a6c:	bl	21d4c <flatcc_builder_start_struct@@Base+0x84>
   23a70:	cmp	r0, #0
   23a74:	strne	r5, [r0]
   23a78:	strne	r4, [r0, #4]
   23a7c:	movne	r6, r0
   23a80:	mov	r0, r6
   23a84:	pop	{r4, r5, r6, sl, fp, pc}
   23a88:	movw	r0, #20904	; 0x51a8
   23a8c:	movt	r0, #3
   23a90:	movw	r1, #17798	; 0x4586
   23a94:	movt	r1, #3
   23a98:	movw	r3, #21106	; 0x5272
   23a9c:	movt	r3, #3
   23aa0:	movw	r2, #1677	; 0x68d
   23aa4:	bl	14f44 <__assert_fail@plt>

00023aa8 <flatcc_builder_append_union_vector@@Base>:
   23aa8:	push	{r4, r5, r6, sl, fp, lr}
   23aac:	add	fp, sp, #16
   23ab0:	mov	r6, r0
   23ab4:	ldr	r0, [r0, #32]
   23ab8:	ldrh	r0, [r0, #14]
   23abc:	cmp	r0, #7
   23ac0:	bne	23b00 <flatcc_builder_append_union_vector@@Base+0x58>
   23ac4:	mov	r5, r2
   23ac8:	mov	r4, r1
   23acc:	mov	r0, r6
   23ad0:	mov	r1, r2
   23ad4:	mvn	r2, #-536870912	; 0xe0000000
   23ad8:	bl	21e50 <flatcc_builder_extend_vector@@Base+0x44>
   23adc:	mov	r1, r0
   23ae0:	mov	r0, #0
   23ae4:	cmp	r1, #0
   23ae8:	popne	{r4, r5, r6, sl, fp, pc}
   23aec:	lsl	r2, r5, #3
   23af0:	mov	r0, r6
   23af4:	mov	r1, r4
   23af8:	bl	21f18 <flatcc_builder_vector_push@@Base+0x80>
   23afc:	pop	{r4, r5, r6, sl, fp, pc}
   23b00:	movw	r0, #20904	; 0x51a8
   23b04:	movt	r0, #3
   23b08:	movw	r1, #17798	; 0x4586
   23b0c:	movt	r1, #3
   23b10:	movw	r3, #21215	; 0x52df
   23b14:	movt	r3, #3
   23b18:	movw	r2, #1692	; 0x69c
   23b1c:	bl	14f44 <__assert_fail@plt>

00023b20 <flatcc_builder_create_string@@Base>:
   23b20:	push	{r4, r5, r6, r7, fp, lr}
   23b24:	add	fp, sp, #16
   23b28:	sub	sp, sp, #80	; 0x50
   23b2c:	mov	r5, r2
   23b30:	mov	r6, r1
   23b34:	mov	r4, r0
   23b38:	mov	r0, r2
   23b3c:	bl	2169c <flatcc_builder_embed_buffer@@Base+0x1dc>
   23b40:	str	r5, [fp, #-20]	; 0xffffffec
   23b44:	add	r1, r5, #1
   23b48:	mov	r7, #4
   23b4c:	mov	r0, r4
   23b50:	mov	r2, #4
   23b54:	bl	21688 <flatcc_builder_embed_buffer@@Base+0x1c8>
   23b58:	str	r7, [sp, #4]
   23b5c:	sub	r1, fp, #20
   23b60:	str	r1, [sp, #12]
   23b64:	str	r7, [sp, #16]
   23b68:	mov	r1, #1
   23b6c:	str	r1, [sp, #8]
   23b70:	add	r0, r0, #1
   23b74:	cmp	r5, #0
   23b78:	beq	23b94 <flatcc_builder_create_string@@Base+0x74>
   23b7c:	str	r6, [sp, #20]
   23b80:	str	r5, [sp, #24]
   23b84:	mov	r1, #2
   23b88:	str	r1, [sp, #8]
   23b8c:	add	r1, r5, #4
   23b90:	str	r1, [sp, #4]
   23b94:	cmp	r0, #0
   23b98:	beq	23bc8 <flatcc_builder_create_string@@Base+0xa8>
   23b9c:	ldmib	sp, {r1, r2}
   23ba0:	add	r1, r1, r0
   23ba4:	str	r1, [sp, #4]
   23ba8:	add	r1, sp, #4
   23bac:	add	r1, r1, r2, lsl #3
   23bb0:	movw	r3, #17268	; 0x4374
   23bb4:	movt	r3, #3
   23bb8:	str	r3, [r1, #8]
   23bbc:	str	r0, [r1, #12]
   23bc0:	add	r0, r2, #1
   23bc4:	str	r0, [sp, #8]
   23bc8:	add	r1, sp, #4
   23bcc:	mov	r0, r4
   23bd0:	bl	216a0 <flatcc_builder_embed_buffer@@Base+0x1e0>
   23bd4:	sub	sp, fp, #16
   23bd8:	pop	{r4, r5, r6, r7, fp, pc}

00023bdc <flatcc_builder_create_string_str@@Base>:
   23bdc:	push	{r4, r5, fp, lr}
   23be0:	add	fp, sp, #8
   23be4:	mov	r4, r1
   23be8:	mov	r5, r0
   23bec:	mov	r0, r1
   23bf0:	bl	14ecc <strlen@plt>
   23bf4:	mov	r2, r0
   23bf8:	mov	r0, r5
   23bfc:	mov	r1, r4
   23c00:	pop	{r4, r5, fp, lr}
   23c04:	b	23b20 <flatcc_builder_create_string@@Base>

00023c08 <flatcc_builder_create_string_strn@@Base>:
   23c08:	push	{r4, r5, fp, lr}
   23c0c:	add	fp, sp, #8
   23c10:	mov	r4, r1
   23c14:	mov	r5, r0
   23c18:	mov	r0, r1
   23c1c:	mov	r1, r2
   23c20:	bl	22228 <flatcc_builder_append_string_strn@@Base+0x30>
   23c24:	mov	r2, r0
   23c28:	mov	r0, r5
   23c2c:	mov	r1, r4
   23c30:	pop	{r4, r5, fp, lr}
   23c34:	b	23b20 <flatcc_builder_create_string@@Base>

00023c38 <flatcc_builder_end_string@@Base>:
   23c38:	push	{r4, r5, fp, lr}
   23c3c:	add	fp, sp, #8
   23c40:	mov	r4, r0
   23c44:	ldr	r0, [r0, #32]
   23c48:	ldrh	r1, [r0, #14]
   23c4c:	cmp	r1, #6
   23c50:	bne	23c88 <flatcc_builder_end_string@@Base+0x50>
   23c54:	ldr	r2, [r4, #20]
   23c58:	ldr	r0, [r0, #20]
   23c5c:	cmp	r0, r2
   23c60:	bne	23ca8 <flatcc_builder_end_string@@Base+0x70>
   23c64:	ldr	r1, [r4, #16]
   23c68:	mov	r0, r4
   23c6c:	bl	23b20 <flatcc_builder_create_string@@Base>
   23c70:	mov	r5, r0
   23c74:	cmp	r0, #0
   23c78:	movne	r0, r4
   23c7c:	blne	21c5c <flatcc_builder_end_buffer@@Base+0xc8>
   23c80:	mov	r0, r5
   23c84:	pop	{r4, r5, fp, pc}
   23c88:	movw	r0, #19115	; 0x4aab
   23c8c:	movt	r0, #3
   23c90:	movw	r1, #17798	; 0x4586
   23c94:	movt	r1, #3
   23c98:	movw	r3, #21342	; 0x535e
   23c9c:	movt	r3, #3
   23ca0:	movw	r2, #1732	; 0x6c4
   23ca4:	bl	14f44 <__assert_fail@plt>
   23ca8:	movw	r0, #21409	; 0x53a1
   23cac:	movt	r0, #3
   23cb0:	movw	r1, #17798	; 0x4586
   23cb4:	movt	r1, #3
   23cb8:	movw	r3, #21342	; 0x535e
   23cbc:	movt	r3, #3
   23cc0:	movw	r2, #1733	; 0x6c5
   23cc4:	bl	14f44 <__assert_fail@plt>

00023cc8 <flatcc_builder_string_edit@@Base>:
   23cc8:	ldr	r0, [r0, #16]
   23ccc:	bx	lr

00023cd0 <flatcc_builder_string_len@@Base>:
   23cd0:	ldr	r0, [r0, #32]
   23cd4:	ldr	r0, [r0, #20]
   23cd8:	bx	lr
   23cdc:	push	{r4, r5, r6, sl, fp, lr}
   23ce0:	add	fp, sp, #16
   23ce4:	mov	r5, r3
   23ce8:	mov	r4, r0
   23cec:	ldr	r0, [r0, #20]
   23cf0:	ldr	r3, [r4, #24]
   23cf4:	add	r0, r2, r0
   23cf8:	sub	r0, r0, #1
   23cfc:	rsb	r2, r2, #0
   23d00:	and	r6, r0, r2
   23d04:	add	r0, r6, r1
   23d08:	str	r0, [r4, #20]
   23d0c:	cmp	r0, r3
   23d10:	bcc	23d34 <flatcc_builder_string_len@@Base+0x64>
   23d14:	add	r1, r0, #1
   23d18:	mov	r0, r4
   23d1c:	movw	r2, #65532	; 0xfffc
   23d20:	bl	24180 <flatcc_builder_get_emit_context@@Base+0x18>
   23d24:	mov	r1, r0
   23d28:	mov	r0, #0
   23d2c:	cmp	r1, #0
   23d30:	popne	{r4, r5, r6, sl, fp, pc}
   23d34:	ldr	r0, [r4, #4]
   23d38:	add	r0, r0, r5, lsl #1
   23d3c:	add	r1, r6, #4
   23d40:	strh	r1, [r0]
   23d44:	ldrh	r0, [r4, #8]
   23d48:	cmp	r0, r5
   23d4c:	addls	r0, r5, #1
   23d50:	strhls	r0, [r4, #8]
   23d54:	ldr	r0, [r4, #16]
   23d58:	add	r0, r0, r6
   23d5c:	pop	{r4, r5, r6, sl, fp, pc}

00023d60 <flatcc_builder_table_edit@@Base>:
   23d60:	ldr	r2, [r0, #32]
   23d64:	ldrh	r2, [r2, #14]
   23d68:	cmp	r2, #3
   23d6c:	ldreq	r2, [r0, #16]
   23d70:	ldreq	r0, [r0, #20]
   23d74:	addeq	r0, r2, r0
   23d78:	subeq	r0, r0, r1
   23d7c:	bxeq	lr
   23d80:	push	{fp, lr}
   23d84:	mov	fp, sp
   23d88:	movw	r0, #19867	; 0x4d9b
   23d8c:	movt	r0, #3
   23d90:	movw	r1, #17798	; 0x4586
   23d94:	movt	r1, #3
   23d98:	movw	r3, #21587	; 0x5453
   23d9c:	movt	r3, #3
   23da0:	movw	r2, #1794	; 0x702
   23da4:	bl	14f44 <__assert_fail@plt>

00023da8 <flatcc_builder_table_add_copy@@Base>:
   23da8:	push	{r4, r5, r6, sl, fp, lr}
   23dac:	add	fp, sp, #16
   23db0:	mov	r4, r3
   23db4:	mov	r5, r2
   23db8:	ldr	r3, [fp, #8]
   23dbc:	mov	r2, r4
   23dc0:	bl	234dc <flatcc_builder_table_add@@Base>
   23dc4:	mov	r6, r0
   23dc8:	cmp	r0, #0
   23dcc:	beq	23de0 <flatcc_builder_table_add_copy@@Base+0x38>
   23dd0:	mov	r0, r6
   23dd4:	mov	r1, r5
   23dd8:	mov	r2, r4
   23ddc:	bl	14e60 <memcpy@plt>
   23de0:	mov	r0, r6
   23de4:	pop	{r4, r5, r6, sl, fp, pc}
   23de8:	push	{r4, r5, r6, r7, fp, lr}
   23dec:	add	fp, sp, #16
   23df0:	mov	r5, r1
   23df4:	mov	r4, r0
   23df8:	ldr	r0, [r0, #20]
   23dfc:	ldr	r1, [r4, #24]
   23e00:	add	r0, r0, #3
   23e04:	bic	r7, r0, #3
   23e08:	add	r6, r7, #4
   23e0c:	str	r6, [r4, #20]
   23e10:	cmp	r6, r1
   23e14:	bls	23e38 <flatcc_builder_table_add_copy@@Base+0x90>
   23e18:	mov	r0, r4
   23e1c:	mov	r1, r6
   23e20:	movw	r2, #65532	; 0xfffc
   23e24:	bl	24180 <flatcc_builder_get_emit_context@@Base+0x18>
   23e28:	mov	r1, r0
   23e2c:	mov	r0, #0
   23e30:	cmp	r1, #0
   23e34:	popne	{r4, r5, r6, r7, fp, pc}
   23e38:	ldr	r0, [r4, #4]
   23e3c:	add	r0, r0, r5, lsl #1
   23e40:	strh	r6, [r0]
   23e44:	ldrh	r0, [r4, #8]
   23e48:	cmp	r0, r5
   23e4c:	addls	r0, r5, #1
   23e50:	strhls	r0, [r4, #8]
   23e54:	ldr	r0, [r4]
   23e58:	add	r1, r0, #2
   23e5c:	str	r1, [r4]
   23e60:	strh	r7, [r0]
   23e64:	ldr	r0, [r4, #16]
   23e68:	add	r0, r0, r7
   23e6c:	pop	{r4, r5, r6, r7, fp, pc}

00023e70 <flatcc_builder_push_buffer_alignment@@Base>:
   23e70:	ldrh	r1, [r0, #128]	; 0x80
   23e74:	mov	r2, #4
   23e78:	strh	r2, [r0, #128]	; 0x80
   23e7c:	mov	r0, r1
   23e80:	bx	lr

00023e84 <flatcc_builder_pop_buffer_alignment@@Base>:
   23e84:	b	21904 <flatcc_builder_create_buffer@@Base+0x1d0>

00023e88 <flatcc_builder_get_buffer_alignment@@Base>:
   23e88:	ldrh	r0, [r0, #128]	; 0x80
   23e8c:	bx	lr

00023e90 <flatcc_builder_set_vtable_clustering@@Base>:
   23e90:	clz	r1, r1
   23e94:	lsr	r1, r1, #5
   23e98:	str	r1, [r0, #180]	; 0xb4
   23e9c:	bx	lr

00023ea0 <flatcc_builder_set_block_align@@Base>:
   23ea0:	strh	r1, [r0, #132]	; 0x84
   23ea4:	bx	lr

00023ea8 <flatcc_builder_get_level@@Base>:
   23ea8:	ldr	r0, [r0, #156]	; 0x9c
   23eac:	bx	lr

00023eb0 <flatcc_builder_set_max_level@@Base>:
   23eb0:	str	r1, [r0, #176]	; 0xb0
   23eb4:	ldr	r2, [r0, #160]	; 0xa0
   23eb8:	cmp	r2, r1
   23ebc:	strlt	r1, [r0, #160]	; 0xa0
   23ec0:	bx	lr

00023ec4 <flatcc_builder_get_buffer_size@@Base>:
   23ec4:	ldr	r1, [r0, #136]	; 0x88
   23ec8:	ldr	r0, [r0, #140]	; 0x8c
   23ecc:	sub	r0, r0, r1
   23ed0:	bx	lr

00023ed4 <flatcc_builder_get_buffer_start@@Base>:
   23ed4:	ldr	r0, [r0, #136]	; 0x88
   23ed8:	bx	lr

00023edc <flatcc_builder_get_buffer_end@@Base>:
   23edc:	ldr	r0, [r0, #140]	; 0x8c
   23ee0:	bx	lr

00023ee4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   23ee4:	str	r1, [r0, #172]	; 0xac
   23ee8:	bx	lr

00023eec <flatcc_builder_set_identifier@@Base>:
   23eec:	movw	r2, #17268	; 0x4374
   23ef0:	movt	r2, #3
   23ef4:	cmp	r1, #0
   23ef8:	movne	r2, r1
   23efc:	ldr	r1, [r2]
   23f00:	str	r1, [r0, #168]	; 0xa8
   23f04:	bx	lr

00023f08 <flatcc_builder_get_type@@Base>:
   23f08:	ldr	r0, [r0, #32]
   23f0c:	cmp	r0, #0
   23f10:	ldrhne	r0, [r0, #14]
   23f14:	moveq	r0, #0
   23f18:	bx	lr

00023f1c <flatcc_builder_get_type_at@@Base>:
   23f1c:	mov	r2, r0
   23f20:	mov	r0, #0
   23f24:	cmp	r1, #1
   23f28:	ldrge	r3, [r2, #156]	; 0x9c
   23f2c:	cmpge	r3, r1
   23f30:	bge	23f38 <flatcc_builder_get_type_at@@Base+0x1c>
   23f34:	bx	lr
   23f38:	sub	r0, r1, r3
   23f3c:	add	r0, r0, r0, lsl #3
   23f40:	ldr	r1, [r2, #32]
   23f44:	add	r0, r1, r0, lsl #2
   23f48:	ldrh	r0, [r0, #14]
   23f4c:	bx	lr

00023f50 <flatcc_builder_get_direct_buffer@@Base>:
   23f50:	ldr	r2, [r0, #184]	; 0xb8
   23f54:	cmp	r2, #0
   23f58:	beq	23f64 <flatcc_builder_get_direct_buffer@@Base+0x14>
   23f5c:	add	r0, r0, #188	; 0xbc
   23f60:	b	23f78 <flatcc_builder_get_direct_buffer@@Base+0x28>
   23f64:	cmp	r1, #0
   23f68:	movne	r0, #0
   23f6c:	strne	r0, [r1]
   23f70:	mov	r0, #0
   23f74:	bx	lr
   23f78:	ldm	r0, {r2, r3}
   23f7c:	cmp	r2, r3
   23f80:	beq	23f94 <flatcc_builder_get_direct_buffer@@Base+0x44>
   23f84:	mov	r0, #0
   23f88:	cmp	r1, #0
   23f8c:	strne	r0, [r1]
   23f90:	bx	lr
   23f94:	cmp	r1, #0
   23f98:	ldrne	r2, [r0, #24]
   23f9c:	strne	r2, [r1]
   23fa0:	ldr	r0, [r0, #8]
   23fa4:	bx	lr

00023fa8 <flatcc_builder_copy_buffer@@Base>:
   23fa8:	push	{fp, lr}
   23fac:	mov	fp, sp
   23fb0:	ldr	r3, [r0, #184]	; 0xb8
   23fb4:	cmp	r3, #0
   23fb8:	beq	23fec <flatcc_builder_copy_buffer@@Base+0x44>
   23fbc:	add	r0, r0, #188	; 0xbc
   23fc0:	bl	246c4 <flatcc_emitter_copy_buffer@@Base>
   23fc4:	cmp	r0, #0
   23fc8:	popne	{fp, pc}
   23fcc:	movw	r0, #5447	; 0x1547
   23fd0:	movt	r0, #3
   23fd4:	movw	r1, #17798	; 0x4586
   23fd8:	movt	r1, #3
   23fdc:	movw	r3, #21726	; 0x54de
   23fe0:	movt	r3, #3
   23fe4:	movw	r2, #1926	; 0x786
   23fe8:	bl	14f44 <__assert_fail@plt>
   23fec:	mov	r0, #0
   23ff0:	pop	{fp, pc}

00023ff4 <flatcc_builder_finalize_buffer@@Base>:
   23ff4:	push	{r4, r5, r6, sl, fp, lr}
   23ff8:	add	fp, sp, #16
   23ffc:	mov	r6, r1
   24000:	mov	r4, r0
   24004:	bl	23ec4 <flatcc_builder_get_buffer_size@@Base>
   24008:	mov	r5, r0
   2400c:	cmp	r6, #0
   24010:	strne	r5, [r6]
   24014:	mov	r0, r5
   24018:	bl	14ea8 <malloc@plt>
   2401c:	cmp	r0, #0
   24020:	beq	24064 <flatcc_builder_finalize_buffer@@Base+0x70>
   24024:	mov	r6, r0
   24028:	mov	r0, r4
   2402c:	mov	r1, r6
   24030:	mov	r2, r5
   24034:	bl	23fa8 <flatcc_builder_copy_buffer@@Base>
   24038:	cmp	r0, #0
   2403c:	movne	r0, r6
   24040:	popne	{r4, r5, r6, sl, fp, pc}
   24044:	movw	r0, #22316	; 0x572c
   24048:	movt	r0, #3
   2404c:	movw	r1, #17798	; 0x4586
   24050:	movt	r1, #3
   24054:	movw	r3, #21795	; 0x5523
   24058:	movt	r3, #3
   2405c:	movw	r2, #1948	; 0x79c
   24060:	bl	14f44 <__assert_fail@plt>
   24064:	movw	r0, #22316	; 0x572c
   24068:	movt	r0, #3
   2406c:	movw	r1, #17798	; 0x4586
   24070:	movt	r1, #3
   24074:	movw	r3, #21795	; 0x5523
   24078:	movt	r3, #3
   2407c:	movw	r2, #1944	; 0x798
   24080:	bl	14f44 <__assert_fail@plt>

00024084 <flatcc_builder_finalize_aligned_buffer@@Base>:
   24084:	push	{r4, r5, r6, r7, fp, lr}
   24088:	add	fp, sp, #16
   2408c:	mov	r4, r1
   24090:	mov	r5, r0
   24094:	bl	23ec4 <flatcc_builder_get_buffer_size@@Base>
   24098:	mov	r6, r0
   2409c:	cmp	r4, #0
   240a0:	strne	r6, [r4]
   240a4:	mov	r0, r5
   240a8:	bl	23e88 <flatcc_builder_get_buffer_alignment@@Base>
   240ac:	add	r1, r6, r0
   240b0:	sub	r1, r1, #1
   240b4:	rsb	r2, r0, #0
   240b8:	and	r7, r1, r2
   240bc:	mov	r1, r7
   240c0:	bl	2410c <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   240c4:	cmp	r0, #0
   240c8:	beq	240f8 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   240cc:	mov	r6, r0
   240d0:	mov	r0, r5
   240d4:	mov	r1, r6
   240d8:	mov	r2, r7
   240dc:	bl	23fa8 <flatcc_builder_copy_buffer@@Base>
   240e0:	cmp	r0, #0
   240e4:	beq	240f0 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   240e8:	mov	r0, r6
   240ec:	pop	{r4, r5, r6, r7, fp, pc}
   240f0:	mov	r0, r6
   240f4:	bl	14e54 <free@plt>
   240f8:	mov	r6, #0
   240fc:	cmp	r4, #0
   24100:	strne	r6, [r4]
   24104:	mov	r0, r6
   24108:	pop	{r4, r5, r6, r7, fp, pc}
   2410c:	push	{fp, lr}
   24110:	mov	fp, sp
   24114:	sub	sp, sp, #8
   24118:	mov	r2, r1
   2411c:	mov	r1, r0
   24120:	mov	r0, #0
   24124:	str	r0, [sp, #4]
   24128:	cmp	r1, #4
   2412c:	movls	r1, #4
   24130:	add	r0, sp, #4
   24134:	bl	14ee4 <posix_memalign@plt>
   24138:	cmp	r0, #0
   2413c:	ldrne	r0, [sp, #4]
   24140:	cmpne	r0, #0
   24144:	beq	24154 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   24148:	bl	14e54 <free@plt>
   2414c:	mov	r0, #0
   24150:	str	r0, [sp, #4]
   24154:	ldr	r0, [sp, #4]
   24158:	mov	sp, fp
   2415c:	pop	{fp, pc}

00024160 <flatcc_builder_aligned_alloc@@Base>:
   24160:	b	2410c <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00024164 <flatcc_builder_aligned_free@@Base>:
   24164:	b	14e54 <free@plt>

00024168 <flatcc_builder_get_emit_context@@Base>:
   24168:	ldr	r0, [r0, #36]	; 0x24
   2416c:	bx	lr
   24170:	ldr	r0, [r0, #140]	; 0x8c
   24174:	sub	r1, r1, #1
   24178:	and	r0, r0, r1
   2417c:	bx	lr
   24180:	push	{r4, r5, r6, sl, fp, lr}
   24184:	add	fp, sp, #16
   24188:	sub	sp, sp, #8
   2418c:	mov	r6, r2
   24190:	mov	r5, r0
   24194:	ldr	r2, [r0, #28]
   24198:	ldr	r0, [r0, #40]	; 0x28
   2419c:	ldr	r4, [r5, #48]	; 0x30
   241a0:	mov	r3, #1
   241a4:	str	r3, [sp]
   241a8:	add	r2, r2, r1
   241ac:	add	r1, r5, #60	; 0x3c
   241b0:	mov	r3, #1
   241b4:	blx	r4
   241b8:	mov	r1, r0
   241bc:	mvn	r0, #0
   241c0:	cmp	r1, #0
   241c4:	beq	241d0 <flatcc_builder_get_emit_context@@Base+0x68>
   241c8:	sub	sp, fp, #16
   241cc:	pop	{r4, r5, r6, sl, fp, pc}
   241d0:	mov	r0, r5
   241d4:	mov	r1, r6
   241d8:	bl	21d14 <flatcc_builder_start_struct@@Base+0x4c>
   241dc:	mov	r0, #0
   241e0:	sub	sp, fp, #16
   241e4:	pop	{r4, r5, r6, sl, fp, pc}
   241e8:	push	{r4, r5, r6, sl, fp, lr}
   241ec:	add	fp, sp, #16
   241f0:	sub	sp, sp, #8
   241f4:	ldr	r2, [r0, #124]	; 0x7c
   241f8:	cmp	r2, #0
   241fc:	bne	2429c <flatcc_builder_get_emit_context@@Base+0x134>
   24200:	mov	r4, r0
   24204:	mov	r0, #0
   24208:	str	r0, [sp]
   2420c:	mov	r6, #16
   24210:	mov	r0, r4
   24214:	mov	r1, #6
   24218:	mov	r3, #16
   2421c:	bl	21330 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   24220:	mvn	r5, #0
   24224:	cmp	r0, #0
   24228:	beq	24290 <flatcc_builder_get_emit_context@@Base+0x128>
   2422c:	add	r1, r4, #92	; 0x5c
   24230:	str	r6, [r4, #124]	; 0x7c
   24234:	ldr	r0, [r4, #40]	; 0x28
   24238:	ldr	ip, [r4, #48]	; 0x30
   2423c:	mov	r2, #5
   24240:	str	r2, [sp]
   24244:	mov	r6, #256	; 0x100
   24248:	mov	r2, #256	; 0x100
   2424c:	mov	r3, #1
   24250:	blx	ip
   24254:	cmp	r0, #0
   24258:	bne	24290 <flatcc_builder_get_emit_context@@Base+0x128>
   2425c:	ldr	r0, [r4, #96]	; 0x60
   24260:	mov	r1, r6
   24264:	lsl	r6, r6, #1
   24268:	cmp	r0, r1, lsl #1
   2426c:	bcs	24260 <flatcc_builder_get_emit_context@@Base+0xf8>
   24270:	lsr	r1, r1, #2
   24274:	mvn	r0, #0
   24278:	mov	r2, #1
   2427c:	add	r0, r0, #1
   24280:	cmp	r1, r2, lsl r0
   24284:	bhi	2427c <flatcc_builder_get_emit_context@@Base+0x114>
   24288:	str	r0, [r4, #116]	; 0x74
   2428c:	mov	r5, #0
   24290:	mov	r0, r5
   24294:	sub	sp, fp, #16
   24298:	pop	{r4, r5, r6, sl, fp, pc}
   2429c:	movw	r0, #22256	; 0x56f0
   242a0:	movt	r0, #3
   242a4:	movw	r1, #17798	; 0x4586
   242a8:	movt	r1, #3
   242ac:	movw	r3, #22271	; 0x56ff
   242b0:	movt	r3, #3
   242b4:	movw	r2, #342	; 0x156
   242b8:	bl	14f44 <__assert_fail@plt>

000242bc <flatcc_emitter_recycle_page@@Base>:
   242bc:	ldr	ip, [r0]
   242c0:	mvn	r2, #0
   242c4:	cmp	ip, r1
   242c8:	ldrne	r3, [r0, #4]
   242cc:	cmpne	r3, r1
   242d0:	bne	242dc <flatcc_emitter_recycle_page@@Base+0x20>
   242d4:	mov	r0, r2
   242d8:	bx	lr
   242dc:	ldr	r2, [r1, #2944]	; 0xb80
   242e0:	ldr	r3, [r1, #2948]	; 0xb84
   242e4:	str	r3, [r2, #2948]	; 0xb84
   242e8:	ldr	r2, [r1, #2944]	; 0xb80
   242ec:	ldr	r3, [r1, #2948]	; 0xb84
   242f0:	str	r2, [r3, #2944]	; 0xb80
   242f4:	ldr	r2, [ip, #2948]	; 0xb84
   242f8:	str	r2, [r1, #2948]	; 0xb84
   242fc:	ldr	r0, [r0]
   24300:	str	r0, [r1, #2944]	; 0xb80
   24304:	str	r1, [r2, #2944]	; 0xb80
   24308:	ldr	r0, [r1, #2944]	; 0xb80
   2430c:	str	r1, [r0, #2948]	; 0xb84
   24310:	mov	r2, #0
   24314:	mov	r0, r2
   24318:	bx	lr

0002431c <flatcc_emitter_reset@@Base>:
   2431c:	push	{r4, sl, fp, lr}
   24320:	add	fp, sp, #8
   24324:	mov	r4, r0
   24328:	ldr	r0, [r0]
   2432c:	cmp	r0, #0
   24330:	beq	243d4 <flatcc_emitter_reset@@Base+0xb8>
   24334:	mov	r1, #1472	; 0x5c0
   24338:	add	r2, r0, #1472	; 0x5c0
   2433c:	stmib	r4, {r0, r2}
   24340:	str	r1, [r4, #12]
   24344:	str	r2, [r4, #16]
   24348:	str	r1, [r4, #20]
   2434c:	movw	r1, #64064	; 0xfa40
   24350:	movt	r1, #65535	; 0xffff
   24354:	str	r1, [r0, #2952]	; 0xb88
   24358:	ldr	r0, [r4, #32]
   2435c:	cmp	r0, #0
   24360:	ldreq	r0, [r4, #24]
   24364:	streq	r0, [r4, #32]
   24368:	add	r2, r4, #24
   2436c:	ldm	r2, {r0, r1, r2}
   24370:	mov	r3, #0
   24374:	str	r3, [r4, #24]
   24378:	add	r2, r2, r2, lsl #1
   2437c:	lsr	r2, r2, #2
   24380:	add	r0, r2, r0, lsr #2
   24384:	str	r0, [r4, #32]
   24388:	cmp	r1, r0, lsl #1
   2438c:	bls	243d4 <flatcc_emitter_reset@@Base+0xb8>
   24390:	ldr	r2, [r4]
   24394:	ldr	r1, [r4, #4]
   24398:	ldr	r0, [r1, #2944]	; 0xb80
   2439c:	cmp	r0, r2
   243a0:	popeq	{r4, sl, fp, pc}
   243a4:	ldr	r2, [r0, #2944]	; 0xb80
   243a8:	str	r2, [r1, #2944]	; 0xb80
   243ac:	ldr	r1, [r0, #2944]	; 0xb80
   243b0:	ldr	r2, [r4, #4]
   243b4:	str	r2, [r1, #2948]	; 0xb84
   243b8:	bl	14e54 <free@plt>
   243bc:	ldr	r0, [r4, #28]
   243c0:	ldr	r1, [r4, #32]
   243c4:	sub	r0, r0, #2944	; 0xb80
   243c8:	str	r0, [r4, #28]
   243cc:	cmp	r0, r1, lsl #1
   243d0:	bhi	24390 <flatcc_emitter_reset@@Base+0x74>
   243d4:	pop	{r4, sl, fp, pc}

000243d8 <flatcc_emitter_clear@@Base>:
   243d8:	push	{r4, r5, r6, sl, fp, lr}
   243dc:	add	fp, sp, #16
   243e0:	ldr	r5, [r0]
   243e4:	cmp	r5, #0
   243e8:	popeq	{r4, r5, r6, sl, fp, pc}
   243ec:	mov	r4, r0
   243f0:	ldr	r0, [r5, #2948]	; 0xb84
   243f4:	mov	r6, #0
   243f8:	str	r6, [r0, #2944]	; 0xb80
   243fc:	b	2440c <flatcc_emitter_clear@@Base+0x34>
   24400:	mov	r5, r0
   24404:	ldr	r0, [r0, #2948]	; 0xb84
   24408:	bl	14e54 <free@plt>
   2440c:	ldr	r0, [r5, #2944]	; 0xb80
   24410:	cmp	r0, #0
   24414:	bne	24400 <flatcc_emitter_clear@@Base+0x28>
   24418:	mov	r0, r5
   2441c:	bl	14e54 <free@plt>
   24420:	vmov.i32	q8, #0	; 0x00000000
   24424:	add	r0, r4, #16
   24428:	vst1.32	{d16-d17}, [r0]
   2442c:	mov	r0, #32
   24430:	vst1.32	{d16-d17}, [r4], r0
   24434:	str	r6, [r4]
   24438:	pop	{r4, r5, r6, sl, fp, pc}

0002443c <flatcc_emitter@@Base>:
   2443c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24440:	add	fp, sp, #24
   24444:	mov	r4, r2
   24448:	mov	r5, r1
   2444c:	mov	r6, r0
   24450:	ldr	r1, [r0, #24]
   24454:	ldr	r0, [fp, #8]
   24458:	add	r1, r1, r0
   2445c:	str	r1, [r6, #24]
   24460:	mov	r1, r6
   24464:	cmn	r3, #1
   24468:	ble	244a8 <flatcc_emitter@@Base+0x6c>
   2446c:	ldr	r2, [r1, #20]!
   24470:	cmp	r2, r0
   24474:	bcs	244f0 <flatcc_emitter@@Base+0xb4>
   24478:	mov	r8, #0
   2447c:	cmp	r4, #0
   24480:	beq	24540 <flatcc_emitter@@Base+0x104>
   24484:	ldm	r5, {r1, r2}
   24488:	mov	r0, r6
   2448c:	bl	2460c <flatcc_emitter@@Base+0x1d0>
   24490:	cmp	r0, #0
   24494:	bne	244e4 <flatcc_emitter@@Base+0xa8>
   24498:	subs	r4, r4, #1
   2449c:	add	r5, r5, #8
   244a0:	bne	24484 <flatcc_emitter@@Base+0x48>
   244a4:	b	24540 <flatcc_emitter@@Base+0x104>
   244a8:	ldr	r2, [r1, #12]!
   244ac:	cmp	r2, r0
   244b0:	bcs	24500 <flatcc_emitter@@Base+0xc4>
   244b4:	add	r0, r5, r4, lsl #3
   244b8:	sub	r5, r0, #4
   244bc:	rsb	r4, r4, #1
   244c0:	cmp	r4, #1
   244c4:	beq	24548 <flatcc_emitter@@Base+0x10c>
   244c8:	ldmda	r5, {r1, r2}
   244cc:	mov	r0, r6
   244d0:	bl	24554 <flatcc_emitter@@Base+0x118>
   244d4:	sub	r5, r5, #8
   244d8:	add	r4, r4, #1
   244dc:	cmp	r0, #0
   244e0:	beq	244c0 <flatcc_emitter@@Base+0x84>
   244e4:	mvn	r8, #0
   244e8:	mov	r0, r8
   244ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   244f0:	ldr	r7, [r6, #16]
   244f4:	add	r3, r7, r0
   244f8:	str	r3, [r6, #16]
   244fc:	b	2450c <flatcc_emitter@@Base+0xd0>
   24500:	ldr	r3, [r6, #8]
   24504:	sub	r7, r3, r0
   24508:	str	r7, [r6, #8]
   2450c:	sub	r0, r2, r0
   24510:	str	r0, [r1]
   24514:	mov	r8, #0
   24518:	cmp	r4, #0
   2451c:	beq	24540 <flatcc_emitter@@Base+0x104>
   24520:	ldm	r5, {r1, r2}
   24524:	mov	r0, r7
   24528:	bl	14e60 <memcpy@plt>
   2452c:	ldr	r0, [r5, #4]
   24530:	add	r7, r7, r0
   24534:	add	r5, r5, #8
   24538:	subs	r4, r4, #1
   2453c:	bne	24520 <flatcc_emitter@@Base+0xe4>
   24540:	mov	r0, r8
   24544:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24548:	mov	r8, #0
   2454c:	mov	r0, r8
   24550:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24554:	push	{r4, r5, r6, r7, fp, lr}
   24558:	add	fp, sp, #16
   2455c:	cmp	r2, #0
   24560:	moveq	r0, #0
   24564:	popeq	{r4, r5, r6, r7, fp, pc}
   24568:	mov	r4, r2
   2456c:	mov	r5, r0
   24570:	clz	r0, r2
   24574:	lsr	r7, r0, #5
   24578:	add	r6, r1, r2
   2457c:	b	245b8 <flatcc_emitter@@Base+0x17c>
   24580:	sub	r0, r0, r7
   24584:	str	r0, [r5, #12]
   24588:	ldr	r0, [r5, #8]
   2458c:	sub	r0, r0, r7
   24590:	str	r0, [r5, #8]
   24594:	sub	r6, r6, r7
   24598:	mov	r1, r6
   2459c:	mov	r2, r7
   245a0:	bl	14e60 <memcpy@plt>
   245a4:	subs	r4, r4, r7
   245a8:	clz	r0, r4
   245ac:	lsr	r7, r0, #5
   245b0:	moveq	r0, #0
   245b4:	popeq	{r4, r5, r6, r7, fp, pc}
   245b8:	ldr	r0, [r5, #12]
   245bc:	cmp	r4, r0
   245c0:	bls	245f0 <flatcc_emitter@@Base+0x1b4>
   245c4:	cmp	r0, #0
   245c8:	bne	245f8 <flatcc_emitter@@Base+0x1bc>
   245cc:	mov	r0, r5
   245d0:	bl	24780 <flatcc_emitter_copy_buffer@@Base+0xbc>
   245d4:	cmp	r0, #0
   245d8:	mov	r1, r0
   245dc:	movwne	r1, #1
   245e0:	orr	r1, r1, r7
   245e4:	tst	r1, #1
   245e8:	beq	245b8 <flatcc_emitter@@Base+0x17c>
   245ec:	b	24600 <flatcc_emitter@@Base+0x1c4>
   245f0:	mov	r7, r4
   245f4:	b	24580 <flatcc_emitter@@Base+0x144>
   245f8:	mov	r7, r0
   245fc:	b	24580 <flatcc_emitter@@Base+0x144>
   24600:	cmp	r0, #0
   24604:	mvnne	r0, #0
   24608:	pop	{r4, r5, r6, r7, fp, pc}
   2460c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24610:	add	fp, sp, #24
   24614:	cmp	r2, #0
   24618:	moveq	r0, #0
   2461c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   24620:	mov	r4, r2
   24624:	mov	r8, r1
   24628:	mov	r6, r0
   2462c:	clz	r0, r2
   24630:	lsr	r5, r0, #5
   24634:	b	24678 <flatcc_emitter@@Base+0x23c>
   24638:	ldr	r0, [r6, #16]
   2463c:	mov	r1, r8
   24640:	mov	r2, r7
   24644:	bl	14e60 <memcpy@plt>
   24648:	ldr	r0, [r6, #16]
   2464c:	ldr	r1, [r6, #20]
   24650:	add	r0, r0, r7
   24654:	sub	r1, r1, r7
   24658:	str	r0, [r6, #16]
   2465c:	str	r1, [r6, #20]
   24660:	add	r8, r8, r7
   24664:	subs	r4, r4, r7
   24668:	clz	r0, r4
   2466c:	lsr	r5, r0, #5
   24670:	moveq	r0, #0
   24674:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   24678:	ldr	r7, [r6, #20]
   2467c:	cmp	r4, r7
   24680:	bls	246b0 <flatcc_emitter@@Base+0x274>
   24684:	cmp	r7, #0
   24688:	bne	24638 <flatcc_emitter@@Base+0x1fc>
   2468c:	mov	r0, r6
   24690:	bl	2486c <flatcc_emitter_copy_buffer@@Base+0x1a8>
   24694:	cmp	r0, #0
   24698:	mov	r1, r0
   2469c:	movwne	r1, #1
   246a0:	orr	r1, r1, r5
   246a4:	tst	r1, #1
   246a8:	beq	24678 <flatcc_emitter@@Base+0x23c>
   246ac:	b	246b8 <flatcc_emitter@@Base+0x27c>
   246b0:	mov	r7, r4
   246b4:	b	24638 <flatcc_emitter@@Base+0x1fc>
   246b8:	cmp	r0, #0
   246bc:	mvnne	r0, #0
   246c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000246c4 <flatcc_emitter_copy_buffer@@Base>:
   246c4:	push	{r4, r5, r6, sl, fp, lr}
   246c8:	add	fp, sp, #16
   246cc:	mov	r3, r2
   246d0:	ldr	r2, [r0, #24]
   246d4:	mov	r5, #0
   246d8:	cmp	r2, r3
   246dc:	bhi	24764 <flatcc_emitter_copy_buffer@@Base+0xa0>
   246e0:	mov	r4, r0
   246e4:	ldr	r0, [r0]
   246e8:	cmp	r0, #0
   246ec:	beq	24764 <flatcc_emitter_copy_buffer@@Base+0xa0>
   246f0:	mov	r6, r1
   246f4:	ldr	r1, [r4, #4]
   246f8:	cmp	r0, r1
   246fc:	beq	2476c <flatcc_emitter_copy_buffer@@Base+0xa8>
   24700:	ldr	r1, [r4, #8]
   24704:	ldr	r0, [r4, #12]
   24708:	rsb	r5, r0, #2944	; 0xb80
   2470c:	mov	r0, r6
   24710:	mov	r2, r5
   24714:	bl	14e60 <memcpy@plt>
   24718:	add	r5, r6, r5
   2471c:	ldm	r4, {r0, r1}
   24720:	ldr	r6, [r0, #2944]	; 0xb80
   24724:	cmp	r6, r1
   24728:	beq	24750 <flatcc_emitter_copy_buffer@@Base+0x8c>
   2472c:	mov	r0, r5
   24730:	mov	r1, r6
   24734:	mov	r2, #2944	; 0xb80
   24738:	bl	14e60 <memcpy@plt>
   2473c:	add	r5, r5, #2944	; 0xb80
   24740:	ldr	r6, [r6, #2944]	; 0xb80
   24744:	ldr	r0, [r4, #4]
   24748:	cmp	r6, r0
   2474c:	bne	2472c <flatcc_emitter_copy_buffer@@Base+0x68>
   24750:	ldr	r0, [r4, #20]
   24754:	rsb	r2, r0, #2944	; 0xb80
   24758:	mov	r0, r5
   2475c:	mov	r1, r6
   24760:	bl	14e60 <memcpy@plt>
   24764:	mov	r0, r5
   24768:	pop	{r4, r5, r6, sl, fp, pc}
   2476c:	ldr	r1, [r4, #8]
   24770:	mov	r0, r6
   24774:	bl	14e60 <memcpy@plt>
   24778:	mov	r0, r6
   2477c:	pop	{r4, r5, r6, sl, fp, pc}
   24780:	push	{r4, r5, fp, lr}
   24784:	add	fp, sp, #8
   24788:	mov	r4, r0
   2478c:	ldr	r5, [r0]
   24790:	cmp	r5, #0
   24794:	beq	247bc <flatcc_emitter_copy_buffer@@Base+0xf8>
   24798:	ldr	r0, [r5, #2948]	; 0xb84
   2479c:	ldr	r1, [r4, #4]
   247a0:	cmp	r0, r1
   247a4:	beq	247bc <flatcc_emitter_copy_buffer@@Base+0xf8>
   247a8:	ldr	r1, [r5, #2952]	; 0xb88
   247ac:	sub	r1, r1, #2944	; 0xb80
   247b0:	str	r1, [r0, #2952]	; 0xb88
   247b4:	ldr	r0, [r5, #2948]	; 0xb84
   247b8:	b	247fc <flatcc_emitter_copy_buffer@@Base+0x138>
   247bc:	movw	r0, #2956	; 0xb8c
   247c0:	bl	14ea8 <malloc@plt>
   247c4:	cmp	r0, #0
   247c8:	mvneq	r0, #0
   247cc:	popeq	{r4, r5, fp, pc}
   247d0:	ldr	r1, [r4, #28]
   247d4:	add	r1, r1, #2944	; 0xb80
   247d8:	str	r1, [r4, #28]
   247dc:	cmp	r5, #0
   247e0:	beq	2482c <flatcc_emitter_copy_buffer@@Base+0x168>
   247e4:	ldm	r4, {r1, r2}
   247e8:	str	r1, [r0, #2944]	; 0xb80
   247ec:	str	r2, [r0, #2948]	; 0xb84
   247f0:	str	r0, [r1, #2948]	; 0xb84
   247f4:	ldr	r1, [r4, #4]
   247f8:	str	r0, [r1, #2944]	; 0xb80
   247fc:	str	r0, [r4]
   24800:	mov	r0, #2944	; 0xb80
   24804:	ldr	r1, [r4]
   24808:	add	r2, r1, #2944	; 0xb80
   2480c:	str	r2, [r4, #8]
   24810:	str	r0, [r4, #12]
   24814:	ldr	r0, [r1, #2944]	; 0xb80
   24818:	ldr	r0, [r0, #2952]	; 0xb88
   2481c:	sub	r0, r0, #2944	; 0xb80
   24820:	str	r0, [r1, #2952]	; 0xb88
   24824:	mov	r0, #0
   24828:	pop	{r4, r5, fp, pc}
   2482c:	str	r0, [r4, #4]
   24830:	str	r0, [r4]
   24834:	mov	r1, #1472	; 0x5c0
   24838:	str	r1, [r4, #12]
   2483c:	str	r1, [r4, #20]
   24840:	ldr	r1, [r4]
   24844:	add	r1, r1, #1472	; 0x5c0
   24848:	str	r1, [r4, #8]
   2484c:	str	r1, [r4, #16]
   24850:	movw	r1, #64064	; 0xfa40
   24854:	movt	r1, #65535	; 0xffff
   24858:	str	r0, [r0, #2944]	; 0xb80
   2485c:	str	r0, [r0, #2948]	; 0xb84
   24860:	str	r1, [r0, #2952]	; 0xb88
   24864:	mov	r0, #0
   24868:	pop	{r4, r5, fp, pc}
   2486c:	push	{r4, r5, fp, lr}
   24870:	add	fp, sp, #8
   24874:	mov	r4, r0
   24878:	ldr	r5, [r0, #4]
   2487c:	cmp	r5, #0
   24880:	beq	24894 <flatcc_emitter_copy_buffer@@Base+0x1d0>
   24884:	ldr	r0, [r5, #2944]	; 0xb80
   24888:	ldr	r1, [r4]
   2488c:	cmp	r0, r1
   24890:	bne	248d0 <flatcc_emitter_copy_buffer@@Base+0x20c>
   24894:	movw	r0, #2956	; 0xb8c
   24898:	bl	14ea8 <malloc@plt>
   2489c:	cmp	r0, #0
   248a0:	mvneq	r0, #0
   248a4:	popeq	{r4, r5, fp, pc}
   248a8:	ldr	r1, [r4, #28]
   248ac:	add	r1, r1, #2944	; 0xb80
   248b0:	str	r1, [r4, #28]
   248b4:	cmp	r5, #0
   248b8:	beq	248fc <flatcc_emitter_copy_buffer@@Base+0x238>
   248bc:	ldr	r1, [r4]
   248c0:	str	r1, [r0, #2944]	; 0xb80
   248c4:	str	r5, [r0, #2948]	; 0xb84
   248c8:	str	r0, [r1, #2948]	; 0xb84
   248cc:	str	r0, [r5, #2944]	; 0xb80
   248d0:	str	r0, [r4, #4]
   248d4:	mov	r0, #2944	; 0xb80
   248d8:	ldr	r1, [r4, #4]
   248dc:	str	r1, [r4, #16]
   248e0:	str	r0, [r4, #20]
   248e4:	ldr	r0, [r1, #2948]	; 0xb84
   248e8:	ldr	r0, [r0, #2952]	; 0xb88
   248ec:	add	r0, r0, #2944	; 0xb80
   248f0:	str	r0, [r1, #2952]	; 0xb88
   248f4:	mov	r0, #0
   248f8:	pop	{r4, r5, fp, pc}
   248fc:	str	r0, [r4, #4]
   24900:	str	r0, [r4]
   24904:	mov	r1, #1472	; 0x5c0
   24908:	str	r1, [r4, #12]
   2490c:	str	r1, [r4, #20]
   24910:	ldr	r1, [r4]
   24914:	add	r1, r1, #1472	; 0x5c0
   24918:	str	r1, [r4, #8]
   2491c:	str	r1, [r4, #16]
   24920:	movw	r1, #64064	; 0xfa40
   24924:	movt	r1, #65535	; 0xffff
   24928:	str	r0, [r0, #2944]	; 0xb80
   2492c:	str	r0, [r0, #2948]	; 0xb84
   24930:	str	r1, [r0, #2952]	; 0xb88
   24934:	mov	r0, #0
   24938:	pop	{r4, r5, fp, pc}

0002493c <flatcc_verify_error_string@@Base>:
   2493c:	cmp	r0, #36	; 0x24
   24940:	movwhi	r0, #23530	; 0x5bea
   24944:	movthi	r0, #3
   24948:	bxhi	lr
   2494c:	movw	r1, #23552	; 0x5c00
   24950:	movt	r1, #3
   24954:	ldr	r0, [r1, r0, lsl #2]
   24958:	bx	lr

0002495c <flatcc_verify_field@@Base>:
   2495c:	b	24960 <flatcc_verify_field@@Base+0x4>
   24960:	push	{r4, r5, r6, r7, fp, lr}
   24964:	add	fp, sp, #16
   24968:	mov	r4, r3
   2496c:	mov	r6, r2
   24970:	mov	r5, r0
   24974:	ldr	r7, [r0]
   24978:	bl	25678 <flatcc_verify_union_field@@Base+0x130>
   2497c:	movw	r1, #65535	; 0xffff
   24980:	tst	r0, r1
   24984:	beq	249bc <flatcc_verify_field@@Base+0x60>
   24988:	uxtah	r2, r6, r0
   2498c:	ldrh	r3, [r5, #20]
   24990:	mov	r1, #13
   24994:	cmp	r2, r3
   24998:	bhi	249c0 <flatcc_verify_field@@Base+0x64>
   2499c:	uxth	r0, r0
   249a0:	add	r0, r0, r7
   249a4:	ldr	r1, [r5, #16]
   249a8:	add	r0, r0, r1
   249ac:	sub	r1, r4, #1
   249b0:	ands	r0, r0, r1
   249b4:	movwne	r0, #12
   249b8:	pop	{r4, r5, r6, r7, fp, pc}
   249bc:	mov	r1, #0
   249c0:	mov	r0, r1
   249c4:	pop	{r4, r5, r6, r7, fp, pc}

000249c8 <flatcc_verify_string_field@@Base>:
   249c8:	push	{r4, r5, r6, sl, fp, lr}
   249cc:	add	fp, sp, #16
   249d0:	sub	sp, sp, #8
   249d4:	mov	r4, r0
   249d8:	add	r3, sp, #4
   249dc:	bl	24a24 <flatcc_verify_string_field@@Base+0x5c>
   249e0:	cmp	r0, #0
   249e4:	bne	24a1c <flatcc_verify_string_field@@Base+0x54>
   249e8:	ldr	r5, [sp, #4]
   249ec:	cmp	r5, #0
   249f0:	beq	24a1c <flatcc_verify_string_field@@Base+0x54>
   249f4:	ldr	r6, [r4]
   249f8:	ldr	r4, [r4, #4]
   249fc:	mov	r0, r6
   24a00:	mov	r1, r5
   24a04:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24a08:	mov	r3, r0
   24a0c:	mov	r0, r6
   24a10:	mov	r1, r4
   24a14:	mov	r2, r5
   24a18:	bl	24a9c <flatcc_verify_string_field@@Base+0xd4>
   24a1c:	sub	sp, fp, #16
   24a20:	pop	{r4, r5, r6, sl, fp, pc}
   24a24:	push	{r4, r5, r6, sl, fp, lr}
   24a28:	add	fp, sp, #16
   24a2c:	mov	r4, r3
   24a30:	mov	r5, r2
   24a34:	mov	r6, r0
   24a38:	bl	25678 <flatcc_verify_union_field@@Base+0x130>
   24a3c:	movw	r1, #65535	; 0xffff
   24a40:	tst	r0, r1
   24a44:	beq	24a84 <flatcc_verify_string_field@@Base+0xbc>
   24a48:	mov	r1, #4
   24a4c:	uxtah	r1, r1, r0
   24a50:	ldrh	r2, [r6, #20]
   24a54:	mov	r5, #13
   24a58:	cmp	r1, r2
   24a5c:	bhi	24a7c <flatcc_verify_string_field@@Base+0xb4>
   24a60:	uxth	r0, r0
   24a64:	ldr	r1, [r6, #16]
   24a68:	add	r0, r1, r0
   24a6c:	mov	r5, #12
   24a70:	tst	r0, #3
   24a74:	streq	r0, [r4]
   24a78:	moveq	r5, #0
   24a7c:	mov	r0, r5
   24a80:	pop	{r4, r5, r6, sl, fp, pc}
   24a84:	mov	r0, #0
   24a88:	str	r0, [r4]
   24a8c:	cmp	r5, #0
   24a90:	movwne	r5, #4
   24a94:	mov	r0, r5
   24a98:	pop	{r4, r5, r6, sl, fp, pc}
   24a9c:	push	{r4, r5, r6, r7, fp, lr}
   24aa0:	add	fp, sp, #16
   24aa4:	mov	r6, r3
   24aa8:	mov	r7, r2
   24aac:	mov	r5, r1
   24ab0:	mov	r4, r0
   24ab4:	mov	r0, r1
   24ab8:	mov	r1, r2
   24abc:	mov	r2, r3
   24ac0:	bl	25944 <flatcc_verify_union_vector_field@@Base+0x290>
   24ac4:	cmp	r0, #0
   24ac8:	beq	24b08 <flatcc_verify_string_field@@Base+0x140>
   24acc:	add	r6, r6, r7
   24ad0:	mov	r0, r4
   24ad4:	mov	r1, r6
   24ad8:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24adc:	add	r2, r6, #4
   24ae0:	sub	r3, r5, r2
   24ae4:	add	r7, r0, #1
   24ae8:	mov	r1, #8
   24aec:	cmp	r3, r7
   24af0:	bcc	24b0c <flatcc_verify_string_field@@Base+0x144>
   24af4:	add	r1, r4, r2
   24af8:	ldrb	r0, [r1, r0]
   24afc:	cmp	r0, #0
   24b00:	movwne	r0, #7
   24b04:	pop	{r4, r5, r6, r7, fp, pc}
   24b08:	mov	r1, #17
   24b0c:	mov	r0, r1
   24b10:	pop	{r4, r5, r6, r7, fp, pc}
   24b14:	add	r0, r0, r1
   24b18:	b	2597c <flatcc_verify_union_vector_field@@Base+0x2c8>

00024b1c <flatcc_verify_vector_field@@Base>:
   24b1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24b20:	add	fp, sp, #24
   24b24:	sub	sp, sp, #16
   24b28:	mov	r4, r3
   24b2c:	mov	r6, r0
   24b30:	add	r3, sp, #12
   24b34:	bl	24a24 <flatcc_verify_string_field@@Base+0x5c>
   24b38:	cmp	r0, #0
   24b3c:	bne	24b84 <flatcc_verify_vector_field@@Base+0x68>
   24b40:	ldr	r5, [sp, #12]
   24b44:	cmp	r5, #0
   24b48:	beq	24b84 <flatcc_verify_vector_field@@Base+0x68>
   24b4c:	ldr	r8, [fp, #12]
   24b50:	ldr	r9, [fp, #8]
   24b54:	ldr	r7, [r6]
   24b58:	ldr	r6, [r6, #4]
   24b5c:	mov	r0, r7
   24b60:	mov	r1, r5
   24b64:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24b68:	mov	r3, r0
   24b6c:	stm	sp, {r4, r9}
   24b70:	str	r8, [sp, #8]
   24b74:	mov	r0, r7
   24b78:	mov	r1, r6
   24b7c:	mov	r2, r5
   24b80:	bl	24b8c <flatcc_verify_vector_field@@Base+0x70>
   24b84:	sub	sp, fp, #24
   24b88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24b8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24b90:	add	fp, sp, #24
   24b94:	mov	r5, r3
   24b98:	mov	r7, r2
   24b9c:	mov	r4, r1
   24ba0:	mov	r6, r0
   24ba4:	ldr	r3, [fp, #12]
   24ba8:	mov	r0, r1
   24bac:	mov	r1, r2
   24bb0:	mov	r2, r5
   24bb4:	bl	25988 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24bb8:	cmp	r0, #0
   24bbc:	moveq	r0, #16
   24bc0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   24bc4:	ldr	r8, [fp, #16]
   24bc8:	add	r5, r5, r7
   24bcc:	mov	r0, r6
   24bd0:	mov	r1, r5
   24bd4:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24bd8:	mov	r1, r0
   24bdc:	mov	r0, #25
   24be0:	cmp	r1, r8
   24be4:	pophi	{r4, r5, r6, r7, r8, sl, fp, pc}
   24be8:	ldr	r0, [fp, #8]
   24bec:	mul	r1, r1, r0
   24bf0:	sub	r0, r4, #4
   24bf4:	sub	r2, r0, r5
   24bf8:	mov	r0, #0
   24bfc:	cmp	r2, r1
   24c00:	movwcc	r0, #26
   24c04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00024c08 <flatcc_verify_string_vector_field@@Base>:
   24c08:	push	{r4, r5, r6, sl, fp, lr}
   24c0c:	add	fp, sp, #16
   24c10:	sub	sp, sp, #8
   24c14:	mov	r4, r0
   24c18:	add	r3, sp, #4
   24c1c:	bl	24a24 <flatcc_verify_string_field@@Base+0x5c>
   24c20:	cmp	r0, #0
   24c24:	bne	24c5c <flatcc_verify_string_vector_field@@Base+0x54>
   24c28:	ldr	r5, [sp, #4]
   24c2c:	cmp	r5, #0
   24c30:	beq	24c5c <flatcc_verify_string_vector_field@@Base+0x54>
   24c34:	ldr	r6, [r4]
   24c38:	ldr	r4, [r4, #4]
   24c3c:	mov	r0, r6
   24c40:	mov	r1, r5
   24c44:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24c48:	mov	r3, r0
   24c4c:	mov	r0, r6
   24c50:	mov	r1, r4
   24c54:	mov	r2, r5
   24c58:	bl	24c64 <flatcc_verify_string_vector_field@@Base+0x5c>
   24c5c:	sub	sp, fp, #16
   24c60:	pop	{r4, r5, r6, sl, fp, pc}
   24c64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24c68:	add	fp, sp, #24
   24c6c:	sub	sp, sp, #16
   24c70:	mov	r6, r3
   24c74:	mov	r7, r2
   24c78:	mov	r8, r1
   24c7c:	mov	r5, r0
   24c80:	mvn	r0, #-1073741824	; 0xc0000000
   24c84:	mov	r1, #4
   24c88:	str	r1, [sp]
   24c8c:	str	r1, [sp, #4]
   24c90:	str	r0, [sp, #8]
   24c94:	mov	r0, r5
   24c98:	mov	r1, r8
   24c9c:	bl	24b8c <flatcc_verify_vector_field@@Base+0x70>
   24ca0:	cmp	r0, #0
   24ca4:	beq	24cb0 <flatcc_verify_string_vector_field@@Base+0xa8>
   24ca8:	sub	sp, fp, #24
   24cac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24cb0:	add	r7, r6, r7
   24cb4:	mov	r0, r5
   24cb8:	mov	r1, r7
   24cbc:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24cc0:	cmp	r0, #0
   24cc4:	beq	24d0c <flatcc_verify_string_vector_field@@Base+0x104>
   24cc8:	mov	r6, r0
   24ccc:	add	r7, r7, #4
   24cd0:	mov	r4, #0
   24cd4:	mov	r0, r5
   24cd8:	mov	r1, r7
   24cdc:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24ce0:	mov	r3, r0
   24ce4:	mov	r0, r5
   24ce8:	mov	r1, r8
   24cec:	mov	r2, r7
   24cf0:	bl	24a9c <flatcc_verify_string_field@@Base+0xd4>
   24cf4:	cmp	r0, #0
   24cf8:	bne	24ca8 <flatcc_verify_string_vector_field@@Base+0xa0>
   24cfc:	add	r4, r4, #1
   24d00:	add	r7, r7, #4
   24d04:	cmp	r4, r6
   24d08:	bcc	24cd4 <flatcc_verify_string_vector_field@@Base+0xcc>
   24d0c:	mov	r0, #0
   24d10:	sub	sp, fp, #24
   24d14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00024d18 <flatcc_verify_table_field@@Base>:
   24d18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24d1c:	add	fp, sp, #24
   24d20:	sub	sp, sp, #16
   24d24:	mov	r8, r3
   24d28:	mov	r5, r0
   24d2c:	add	r3, sp, #12
   24d30:	bl	24a24 <flatcc_verify_string_field@@Base+0x5c>
   24d34:	cmp	r0, #0
   24d38:	bne	24d78 <flatcc_verify_table_field@@Base+0x60>
   24d3c:	ldr	r6, [sp, #12]
   24d40:	cmp	r6, #0
   24d44:	beq	24d78 <flatcc_verify_table_field@@Base+0x60>
   24d48:	ldr	r7, [r5]
   24d4c:	ldr	r4, [r5, #4]
   24d50:	mov	r0, r7
   24d54:	mov	r1, r6
   24d58:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24d5c:	mov	r3, r0
   24d60:	ldr	r0, [r5, #8]
   24d64:	stm	sp, {r0, r8}
   24d68:	mov	r0, r7
   24d6c:	mov	r1, r4
   24d70:	mov	r2, r6
   24d74:	bl	24d80 <flatcc_verify_table_field@@Base+0x68>
   24d78:	sub	sp, fp, #24
   24d7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24d80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24d84:	add	fp, sp, #24
   24d88:	sub	sp, sp, #24
   24d8c:	mov	r4, r0
   24d90:	ldr	r0, [fp, #8]
   24d94:	subs	r0, r0, #1
   24d98:	str	r0, [sp, #8]
   24d9c:	moveq	r0, #3
   24da0:	subeq	sp, fp, #24
   24da4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   24da8:	mov	r6, r3
   24dac:	mov	r7, r2
   24db0:	mov	r5, r1
   24db4:	mov	r0, r1
   24db8:	mov	r1, r2
   24dbc:	mov	r2, r3
   24dc0:	bl	25944 <flatcc_verify_union_vector_field@@Base+0x290>
   24dc4:	cmp	r0, #0
   24dc8:	moveq	r0, #15
   24dcc:	subeq	sp, fp, #24
   24dd0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   24dd4:	add	r7, r6, r7
   24dd8:	str	r7, [sp, #16]
   24ddc:	mov	r0, r4
   24de0:	mov	r1, r7
   24de4:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24de8:	sub	r6, r7, r0
   24dec:	mov	r0, #29
   24df0:	tst	r6, #-2147483647	; 0x80000001
   24df4:	bne	24e7c <flatcc_verify_table_field@@Base+0x164>
   24df8:	add	r8, r6, #2
   24dfc:	mov	r0, #27
   24e00:	cmp	r8, r5
   24e04:	bhi	24e7c <flatcc_verify_table_field@@Base+0x164>
   24e08:	mov	r0, r4
   24e0c:	mov	r1, r6
   24e10:	bl	259c8 <flatcc_verify_union_vector_field@@Base+0x314>
   24e14:	mov	r1, r0
   24e18:	strh	r0, [sp, #22]
   24e1c:	mov	r0, #30
   24e20:	tst	r1, #1
   24e24:	bne	24e7c <flatcc_verify_table_field@@Base+0x164>
   24e28:	add	r2, r6, r1
   24e2c:	cmp	r2, r5
   24e30:	bhi	24e7c <flatcc_verify_table_field@@Base+0x164>
   24e34:	mov	r0, #28
   24e38:	cmp	r1, #4
   24e3c:	bcc	24e7c <flatcc_verify_table_field@@Base+0x164>
   24e40:	mov	r0, r4
   24e44:	mov	r1, r8
   24e48:	bl	259c8 <flatcc_verify_union_vector_field@@Base+0x314>
   24e4c:	mov	r1, r0
   24e50:	strh	r0, [sp, #20]
   24e54:	sub	r2, r5, r7
   24e58:	mov	r0, #20
   24e5c:	cmp	r2, r1
   24e60:	bcc	24e7c <flatcc_verify_table_field@@Base+0x164>
   24e64:	ldr	r1, [fp, #12]
   24e68:	stm	sp, {r4, r5}
   24e6c:	add	r0, r4, r6
   24e70:	str	r0, [sp, #12]
   24e74:	mov	r0, sp
   24e78:	blx	r1
   24e7c:	sub	sp, fp, #24
   24e80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00024e84 <flatcc_verify_table_vector_field@@Base>:
   24e84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24e88:	add	fp, sp, #24
   24e8c:	sub	sp, sp, #16
   24e90:	mov	r8, r3
   24e94:	mov	r5, r0
   24e98:	add	r3, sp, #12
   24e9c:	bl	24a24 <flatcc_verify_string_field@@Base+0x5c>
   24ea0:	cmp	r0, #0
   24ea4:	bne	24ee4 <flatcc_verify_table_vector_field@@Base+0x60>
   24ea8:	ldr	r6, [sp, #12]
   24eac:	cmp	r6, #0
   24eb0:	beq	24ee4 <flatcc_verify_table_vector_field@@Base+0x60>
   24eb4:	ldr	r7, [r5]
   24eb8:	ldr	r4, [r5, #4]
   24ebc:	mov	r0, r7
   24ec0:	mov	r1, r6
   24ec4:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24ec8:	mov	r3, r0
   24ecc:	ldr	r0, [r5, #8]
   24ed0:	stm	sp, {r0, r8}
   24ed4:	mov	r0, r7
   24ed8:	mov	r1, r4
   24edc:	mov	r2, r6
   24ee0:	bl	24eec <flatcc_verify_table_vector_field@@Base+0x68>
   24ee4:	sub	sp, fp, #24
   24ee8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ef0:	add	fp, sp, #28
   24ef4:	sub	sp, sp, #12
   24ef8:	ldr	r8, [fp, #8]
   24efc:	cmp	r8, #1
   24f00:	movlt	r0, #3
   24f04:	sublt	sp, fp, #28
   24f08:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f0c:	mov	r6, r3
   24f10:	mov	r7, r2
   24f14:	mov	sl, r1
   24f18:	mov	r5, r0
   24f1c:	mvn	r0, #-1073741824	; 0xc0000000
   24f20:	mov	r1, #4
   24f24:	str	r1, [sp]
   24f28:	str	r1, [sp, #4]
   24f2c:	str	r0, [sp, #8]
   24f30:	mov	r0, r5
   24f34:	mov	r1, sl
   24f38:	bl	24b8c <flatcc_verify_vector_field@@Base+0x70>
   24f3c:	cmp	r0, #0
   24f40:	beq	24f4c <flatcc_verify_table_vector_field@@Base+0xc8>
   24f44:	sub	sp, fp, #28
   24f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f4c:	add	r6, r6, r7
   24f50:	mov	r0, r5
   24f54:	mov	r1, r6
   24f58:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24f5c:	cmp	r0, #0
   24f60:	beq	24fb4 <flatcc_verify_table_vector_field@@Base+0x130>
   24f64:	mov	r7, r0
   24f68:	sub	r8, r8, #1
   24f6c:	ldr	r9, [fp, #12]
   24f70:	add	r6, r6, #4
   24f74:	mov	r4, #0
   24f78:	mov	r0, r5
   24f7c:	mov	r1, r6
   24f80:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24f84:	mov	r3, r0
   24f88:	stm	sp, {r8, r9}
   24f8c:	mov	r0, r5
   24f90:	mov	r1, sl
   24f94:	mov	r2, r6
   24f98:	bl	24d80 <flatcc_verify_table_field@@Base+0x68>
   24f9c:	cmp	r0, #0
   24fa0:	bne	24fc0 <flatcc_verify_table_vector_field@@Base+0x13c>
   24fa4:	add	r4, r4, #1
   24fa8:	add	r6, r6, #4
   24fac:	cmp	r4, r7
   24fb0:	bcc	24f78 <flatcc_verify_table_vector_field@@Base+0xf4>
   24fb4:	mov	r0, #0
   24fb8:	sub	sp, fp, #28
   24fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fc0:	mov	r0, r5
   24fc4:	mov	r1, r6
   24fc8:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   24fcc:	mov	r3, r0
   24fd0:	stm	sp, {r8, r9}
   24fd4:	mov	r0, r5
   24fd8:	mov	r1, sl
   24fdc:	mov	r2, r6
   24fe0:	bl	24d80 <flatcc_verify_table_field@@Base+0x68>
   24fe4:	sub	sp, fp, #28
   24fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024fec <flatcc_verify_union_table@@Base>:
   24fec:	push	{fp, lr}
   24ff0:	mov	fp, sp
   24ff4:	sub	sp, sp, #8
   24ff8:	ldr	r2, [r0, #16]
   24ffc:	ldr	r3, [r0, #20]
   25000:	ldm	r0, {ip, lr}
   25004:	ldr	r0, [r0, #8]
   25008:	stm	sp, {r0, r1}
   2500c:	mov	r0, ip
   25010:	mov	r1, lr
   25014:	bl	24d80 <flatcc_verify_table_field@@Base+0x68>
   25018:	mov	sp, fp
   2501c:	pop	{fp, pc}

00025020 <flatcc_verify_union_struct@@Base>:
   25020:	push	{fp, lr}
   25024:	mov	fp, sp
   25028:	sub	sp, sp, #8
   2502c:	mov	ip, r1
   25030:	ldr	r3, [r0, #4]
   25034:	ldr	r1, [r0, #16]
   25038:	ldr	lr, [r0, #20]
   2503c:	str	r2, [sp]
   25040:	mov	r0, r3
   25044:	mov	r2, lr
   25048:	mov	r3, ip
   2504c:	bl	25058 <flatcc_verify_union_struct@@Base+0x38>
   25050:	mov	sp, fp
   25054:	pop	{fp, pc}
   25058:	mov	ip, r0
   2505c:	mov	r0, #18
   25060:	cmp	r2, #0
   25064:	beq	2509c <flatcc_verify_union_struct@@Base+0x7c>
   25068:	add	r1, r2, r1
   2506c:	cmp	r1, ip
   25070:	bhi	2509c <flatcc_verify_union_struct@@Base+0x7c>
   25074:	adds	r2, r1, r3
   25078:	mov	r0, #10
   2507c:	bcs	2509c <flatcc_verify_union_struct@@Base+0x7c>
   25080:	mov	r0, #9
   25084:	cmp	r2, ip
   25088:	bxhi	lr
   2508c:	ldr	r0, [sp]
   25090:	sub	r0, r0, #1
   25094:	ands	r0, r0, r1
   25098:	movwne	r0, #11
   2509c:	bx	lr

000250a0 <flatcc_verify_union_string@@Base>:
   250a0:	ldr	ip, [r0]
   250a4:	ldr	r1, [r0, #4]
   250a8:	ldr	r2, [r0, #16]
   250ac:	ldr	r3, [r0, #20]
   250b0:	mov	r0, ip
   250b4:	b	24a9c <flatcc_verify_string_field@@Base+0xd4>

000250b8 <flatcc_verify_buffer_header@@Base>:
   250b8:	push	{r4, r5, fp, lr}
   250bc:	add	fp, sp, #8
   250c0:	mov	r4, r0
   250c4:	mov	r0, #5
   250c8:	tst	r4, #3
   250cc:	bne	25118 <flatcc_verify_buffer_header@@Base+0x60>
   250d0:	mov	r0, #6
   250d4:	cmn	r1, #9
   250d8:	bhi	25118 <flatcc_verify_buffer_header@@Base+0x60>
   250dc:	mov	r0, #1
   250e0:	cmp	r1, #8
   250e4:	popcc	{r4, r5, fp, pc}
   250e8:	cmp	r2, #0
   250ec:	beq	2511c <flatcc_verify_buffer_header@@Base+0x64>
   250f0:	mov	r0, r2
   250f4:	bl	25124 <flatcc_verify_buffer_header@@Base+0x6c>
   250f8:	mov	r5, r0
   250fc:	mov	r0, r4
   25100:	bl	25158 <flatcc_verify_buffer_header@@Base+0xa0>
   25104:	cmp	r5, #0
   25108:	movne	r1, r0
   2510c:	movne	r0, #2
   25110:	cmpne	r1, r5
   25114:	moveq	r0, #0
   25118:	pop	{r4, r5, fp, pc}
   2511c:	mov	r0, #0
   25120:	pop	{r4, r5, fp, pc}
   25124:	push	{fp, lr}
   25128:	mov	fp, sp
   2512c:	sub	sp, sp, #8
   25130:	mov	r1, r0
   25134:	mov	r0, #0
   25138:	str	r0, [sp, #4]
   2513c:	add	r0, sp, #4
   25140:	mov	r2, #4
   25144:	bl	14efc <strncpy@plt>
   25148:	ldr	r0, [sp, #4]
   2514c:	bl	259dc <flatcc_verify_union_vector_field@@Base+0x328>
   25150:	mov	sp, fp
   25154:	pop	{fp, pc}
   25158:	add	r0, r0, #4
   2515c:	b	259e0 <flatcc_verify_union_vector_field@@Base+0x32c>

00025160 <flatcc_verify_typed_buffer_header@@Base>:
   25160:	push	{r4, sl, fp, lr}
   25164:	add	fp, sp, #8
   25168:	mov	r4, r2
   2516c:	mov	r2, #5
   25170:	tst	r0, #3
   25174:	bne	251a8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25178:	mov	r2, #6
   2517c:	cmn	r1, #9
   25180:	bhi	251a8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25184:	mov	r2, #1
   25188:	cmp	r1, #8
   2518c:	bcc	251a8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25190:	cmp	r4, #0
   25194:	beq	251b0 <flatcc_verify_typed_buffer_header@@Base+0x50>
   25198:	bl	25158 <flatcc_verify_buffer_header@@Base+0xa0>
   2519c:	mov	r2, #2
   251a0:	cmp	r0, r4
   251a4:	moveq	r2, #0
   251a8:	mov	r0, r2
   251ac:	pop	{r4, sl, fp, pc}
   251b0:	mov	r2, #0
   251b4:	mov	r0, r2
   251b8:	pop	{r4, sl, fp, pc}

000251bc <flatcc_verify_struct_as_root@@Base>:
   251bc:	push	{r4, r5, r6, r7, fp, lr}
   251c0:	add	fp, sp, #16
   251c4:	sub	sp, sp, #8
   251c8:	mov	r4, r3
   251cc:	mov	r7, r2
   251d0:	mov	r5, r1
   251d4:	mov	r6, r0
   251d8:	bl	250b8 <flatcc_verify_buffer_header@@Base>
   251dc:	cmp	r0, #0
   251e0:	beq	251fc <flatcc_verify_struct_as_root@@Base+0x40>
   251e4:	mov	r0, r6
   251e8:	mov	r1, r5
   251ec:	mov	r2, r7
   251f0:	sub	sp, fp, #16
   251f4:	pop	{r4, r5, r6, r7, fp, lr}
   251f8:	b	250b8 <flatcc_verify_buffer_header@@Base>
   251fc:	ldr	r7, [fp, #8]
   25200:	mov	r0, r6
   25204:	mov	r1, #0
   25208:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   2520c:	mov	r2, r0
   25210:	str	r7, [sp]
   25214:	mov	r0, r5
   25218:	mov	r1, #0
   2521c:	mov	r3, r4
   25220:	bl	25058 <flatcc_verify_union_struct@@Base+0x38>
   25224:	sub	sp, fp, #16
   25228:	pop	{r4, r5, r6, r7, fp, pc}

0002522c <flatcc_verify_struct_as_typed_root@@Base>:
   2522c:	push	{r4, r5, r6, r7, fp, lr}
   25230:	add	fp, sp, #16
   25234:	sub	sp, sp, #8
   25238:	mov	r4, r3
   2523c:	mov	r5, r1
   25240:	mov	r6, r0
   25244:	bl	25160 <flatcc_verify_typed_buffer_header@@Base>
   25248:	cmp	r0, #0
   2524c:	beq	25258 <flatcc_verify_struct_as_typed_root@@Base+0x2c>
   25250:	sub	sp, fp, #16
   25254:	pop	{r4, r5, r6, r7, fp, pc}
   25258:	ldr	r7, [fp, #8]
   2525c:	mov	r0, r6
   25260:	mov	r1, #0
   25264:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   25268:	mov	r2, r0
   2526c:	str	r7, [sp]
   25270:	mov	r0, r5
   25274:	mov	r1, #0
   25278:	mov	r3, r4
   2527c:	bl	25058 <flatcc_verify_union_struct@@Base+0x38>
   25280:	sub	sp, fp, #16
   25284:	pop	{r4, r5, r6, r7, fp, pc}

00025288 <flatcc_verify_table_as_root@@Base>:
   25288:	push	{r4, r5, r6, r7, fp, lr}
   2528c:	add	fp, sp, #16
   25290:	sub	sp, sp, #8
   25294:	mov	r5, r3
   25298:	mov	r7, r2
   2529c:	mov	r4, r1
   252a0:	mov	r6, r0
   252a4:	bl	250b8 <flatcc_verify_buffer_header@@Base>
   252a8:	cmp	r0, #0
   252ac:	beq	252c8 <flatcc_verify_table_as_root@@Base+0x40>
   252b0:	mov	r0, r6
   252b4:	mov	r1, r4
   252b8:	mov	r2, r7
   252bc:	sub	sp, fp, #16
   252c0:	pop	{r4, r5, r6, r7, fp, lr}
   252c4:	b	250b8 <flatcc_verify_buffer_header@@Base>
   252c8:	mov	r0, r6
   252cc:	mov	r1, #0
   252d0:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   252d4:	mov	r3, r0
   252d8:	mov	r0, #100	; 0x64
   252dc:	stm	sp, {r0, r5}
   252e0:	mov	r0, r6
   252e4:	mov	r1, r4
   252e8:	mov	r2, #0
   252ec:	bl	24d80 <flatcc_verify_table_field@@Base+0x68>
   252f0:	sub	sp, fp, #16
   252f4:	pop	{r4, r5, r6, r7, fp, pc}

000252f8 <flatcc_verify_table_as_typed_root@@Base>:
   252f8:	push	{r4, r5, r6, sl, fp, lr}
   252fc:	add	fp, sp, #16
   25300:	sub	sp, sp, #8
   25304:	mov	r5, r3
   25308:	mov	r4, r1
   2530c:	mov	r6, r0
   25310:	bl	25160 <flatcc_verify_typed_buffer_header@@Base>
   25314:	cmp	r0, #0
   25318:	beq	25324 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   2531c:	sub	sp, fp, #16
   25320:	pop	{r4, r5, r6, sl, fp, pc}
   25324:	mov	r0, r6
   25328:	mov	r1, #0
   2532c:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   25330:	mov	r3, r0
   25334:	mov	r0, #100	; 0x64
   25338:	stm	sp, {r0, r5}
   2533c:	mov	r0, r6
   25340:	mov	r1, r4
   25344:	mov	r2, #0
   25348:	bl	24d80 <flatcc_verify_table_field@@Base+0x68>
   2534c:	sub	sp, fp, #16
   25350:	pop	{r4, r5, r6, sl, fp, pc}

00025354 <flatcc_verify_struct_as_nested_root@@Base>:
   25354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25358:	add	fp, sp, #28
   2535c:	sub	sp, sp, #12
   25360:	mov	r8, r3
   25364:	mov	r7, r2
   25368:	mov	r6, r1
   2536c:	mov	r4, r0
   25370:	mvn	sl, #0
   25374:	mov	r5, #1
   25378:	stm	sp, {r5, sl}
   2537c:	ldr	r9, [fp, #12]
   25380:	mov	r3, r9
   25384:	bl	24b1c <flatcc_verify_vector_field@@Base>
   25388:	cmp	r0, #0
   2538c:	beq	253b0 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   25390:	stm	sp, {r5, sl}
   25394:	mov	r0, r4
   25398:	mov	r1, r6
   2539c:	mov	r2, r7
   253a0:	mov	r3, r9
   253a4:	bl	24b1c <flatcc_verify_vector_field@@Base>
   253a8:	sub	sp, fp, #28
   253ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253b0:	mov	r0, r4
   253b4:	mov	r1, r6
   253b8:	bl	2540c <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   253bc:	cmp	r0, #0
   253c0:	moveq	r0, #0
   253c4:	subeq	sp, fp, #28
   253c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253cc:	mov	r4, r0
   253d0:	ldr	r6, [fp, #8]
   253d4:	mov	r1, #0
   253d8:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   253dc:	add	r4, r0, r4
   253e0:	mov	r0, r4
   253e4:	mov	r1, #0
   253e8:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   253ec:	mov	r1, r0
   253f0:	str	r9, [sp]
   253f4:	add	r0, r4, #4
   253f8:	mov	r2, r8
   253fc:	mov	r3, r6
   25400:	bl	251bc <flatcc_verify_struct_as_root@@Base>
   25404:	sub	sp, fp, #28
   25408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2540c:	push	{r4, sl, fp, lr}
   25410:	add	fp, sp, #8
   25414:	mov	r4, r0
   25418:	bl	25678 <flatcc_verify_union_field@@Base+0x130>
   2541c:	uxth	r0, r0
   25420:	cmp	r0, #0
   25424:	ldrne	r1, [r4]
   25428:	ldrne	r2, [r4, #16]
   2542c:	addne	r1, r1, r2
   25430:	addne	r0, r1, r0
   25434:	popne	{r4, sl, fp, pc}
   25438:	mov	r0, #0
   2543c:	pop	{r4, sl, fp, pc}

00025440 <flatcc_verify_table_as_nested_root@@Base>:
   25440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25444:	add	fp, sp, #28
   25448:	sub	sp, sp, #12
   2544c:	mov	r8, r3
   25450:	mov	r7, r2
   25454:	mov	r6, r1
   25458:	mov	r4, r0
   2545c:	mvn	r9, #0
   25460:	mov	sl, #1
   25464:	str	sl, [sp]
   25468:	str	r9, [sp, #4]
   2546c:	ldr	r5, [fp, #8]
   25470:	mov	r3, r5
   25474:	bl	24b1c <flatcc_verify_vector_field@@Base>
   25478:	cmp	r0, #0
   2547c:	beq	254a4 <flatcc_verify_table_as_nested_root@@Base+0x64>
   25480:	str	sl, [sp]
   25484:	str	r9, [sp, #4]
   25488:	mov	r0, r4
   2548c:	mov	r1, r6
   25490:	mov	r2, r7
   25494:	mov	r3, r5
   25498:	bl	24b1c <flatcc_verify_vector_field@@Base>
   2549c:	sub	sp, fp, #28
   254a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   254a4:	ldr	r9, [fp, #12]
   254a8:	mov	r0, r4
   254ac:	mov	r1, r6
   254b0:	bl	2540c <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   254b4:	cmp	r0, #0
   254b8:	moveq	r0, #0
   254bc:	subeq	sp, fp, #28
   254c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   254c4:	mov	r5, r0
   254c8:	mov	r1, #0
   254cc:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   254d0:	add	r5, r0, r5
   254d4:	mov	r0, r5
   254d8:	mov	r1, #0
   254dc:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   254e0:	mov	r6, r0
   254e4:	add	r7, r5, #4
   254e8:	mov	r0, r7
   254ec:	mov	r1, r6
   254f0:	mov	r2, r8
   254f4:	bl	250b8 <flatcc_verify_buffer_header@@Base>
   254f8:	cmp	r0, #0
   254fc:	beq	25518 <flatcc_verify_table_as_nested_root@@Base+0xd8>
   25500:	mov	r0, r7
   25504:	mov	r1, r6
   25508:	mov	r2, r8
   2550c:	sub	sp, fp, #28
   25510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25514:	b	250b8 <flatcc_verify_buffer_header@@Base>
   25518:	mov	r0, r7
   2551c:	mov	r1, #0
   25520:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   25524:	mov	r3, r0
   25528:	ldr	r0, [r4, #8]
   2552c:	stm	sp, {r0, r9}
   25530:	mov	r0, r7
   25534:	mov	r1, r6
   25538:	mov	r2, #0
   2553c:	bl	24d80 <flatcc_verify_table_field@@Base+0x68>
   25540:	sub	sp, fp, #28
   25544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025548 <flatcc_verify_union_field@@Base>:
   25548:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2554c:	add	fp, sp, #24
   25550:	sub	sp, sp, #32
   25554:	mov	r8, r3
   25558:	mov	r9, r2
   2555c:	mov	r7, r1
   25560:	mov	r5, r0
   25564:	sub	r0, r1, #1
   25568:	uxth	r4, r0
   2556c:	mov	r0, r5
   25570:	mov	r1, r4
   25574:	bl	25678 <flatcc_verify_union_field@@Base+0x130>
   25578:	uxth	r6, r0
   2557c:	cmp	r6, #0
   25580:	beq	2563c <flatcc_verify_union_field@@Base+0xf4>
   25584:	mov	r0, r5
   25588:	mov	r1, r4
   2558c:	mov	r2, #1
   25590:	mov	r3, #1
   25594:	bl	24960 <flatcc_verify_field@@Base+0x4>
   25598:	cmp	r0, #0
   2559c:	bne	2565c <flatcc_verify_union_field@@Base+0x114>
   255a0:	mov	r0, r5
   255a4:	mov	r1, r7
   255a8:	bl	25678 <flatcc_verify_union_field@@Base+0x130>
   255ac:	ldr	r1, [r5]
   255b0:	ldr	r2, [r5, #16]
   255b4:	add	r4, r1, r2
   255b8:	ldrb	r1, [r4, r6]
   255bc:	movw	r2, #65535	; 0xffff
   255c0:	tst	r0, r2
   255c4:	beq	255d4 <flatcc_verify_union_field@@Base+0x8c>
   255c8:	mov	r0, #24
   255cc:	cmp	r1, #0
   255d0:	beq	2565c <flatcc_verify_union_field@@Base+0x114>
   255d4:	cmp	r1, #0
   255d8:	moveq	r0, #0
   255dc:	subeq	sp, fp, #24
   255e0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   255e4:	add	r3, sp, #28
   255e8:	mov	r0, r5
   255ec:	mov	r1, r7
   255f0:	mov	r2, r9
   255f4:	bl	24a24 <flatcc_verify_string_field@@Base+0x5c>
   255f8:	cmp	r0, #0
   255fc:	bne	2565c <flatcc_verify_union_field@@Base+0x114>
   25600:	ldr	r1, [sp, #28]
   25604:	cmp	r1, #0
   25608:	beq	2565c <flatcc_verify_union_field@@Base+0x114>
   2560c:	ldm	r5, {r0, r2, r3}
   25610:	str	r1, [sp, #20]
   25614:	stmib	sp, {r0, r2, r3}
   25618:	ldr	r0, [r5]
   2561c:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   25620:	str	r0, [sp, #24]
   25624:	ldrb	r0, [r4, r6]
   25628:	strb	r0, [sp, #16]
   2562c:	add	r0, sp, #4
   25630:	blx	r8
   25634:	sub	sp, fp, #24
   25638:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2563c:	mov	r0, r5
   25640:	mov	r1, r7
   25644:	bl	25678 <flatcc_verify_union_field@@Base+0x130>
   25648:	mov	r1, r0
   2564c:	mov	r0, #23
   25650:	movw	r2, #65535	; 0xffff
   25654:	tst	r1, r2
   25658:	beq	25664 <flatcc_verify_union_field@@Base+0x11c>
   2565c:	sub	sp, fp, #24
   25660:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25664:	cmp	r9, #0
   25668:	movwne	r9, #21
   2566c:	mov	r0, r9
   25670:	sub	sp, fp, #24
   25674:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25678:	mov	r2, #4
   2567c:	add	r1, r2, r1, lsl #1
   25680:	uxth	r1, r1
   25684:	ldrh	r3, [r0, #22]
   25688:	mov	r2, #0
   2568c:	cmp	r1, r3
   25690:	bcs	256ac <flatcc_verify_union_field@@Base+0x164>
   25694:	push	{fp, lr}
   25698:	mov	fp, sp
   2569c:	ldr	r0, [r0, #12]
   256a0:	bl	259c8 <flatcc_verify_union_vector_field@@Base+0x314>
   256a4:	mov	r2, r0
   256a8:	pop	{fp, lr}
   256ac:	mov	r0, r2
   256b0:	bx	lr

000256b4 <flatcc_verify_union_vector_field@@Base>:
   256b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   256b8:	add	fp, sp, #28
   256bc:	sub	sp, sp, #20
   256c0:	mov	r8, r3
   256c4:	mov	r6, r2
   256c8:	mov	sl, r1
   256cc:	mov	r5, r0
   256d0:	sub	r0, r1, #1
   256d4:	uxth	r4, r0
   256d8:	mov	r0, r5
   256dc:	mov	r1, r4
   256e0:	bl	25678 <flatcc_verify_union_field@@Base+0x130>
   256e4:	movw	r1, #65535	; 0xffff
   256e8:	tst	r0, r1
   256ec:	beq	25738 <flatcc_verify_union_vector_field@@Base+0x84>
   256f0:	mvn	r9, #0
   256f4:	mov	r7, #1
   256f8:	stm	sp, {r7, r9}
   256fc:	mov	r0, r5
   25700:	mov	r1, r4
   25704:	mov	r2, r6
   25708:	mov	r3, #1
   2570c:	bl	24b1c <flatcc_verify_vector_field@@Base>
   25710:	cmp	r0, #0
   25714:	beq	25760 <flatcc_verify_union_vector_field@@Base+0xac>
   25718:	stm	sp, {r7, r9}
   2571c:	mov	r0, r5
   25720:	mov	r1, r4
   25724:	mov	r2, r6
   25728:	mov	r3, #1
   2572c:	bl	24b1c <flatcc_verify_vector_field@@Base>
   25730:	sub	sp, fp, #28
   25734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25738:	mov	r0, r5
   2573c:	mov	r1, sl
   25740:	bl	25678 <flatcc_verify_union_field@@Base+0x130>
   25744:	cmp	r6, #0
   25748:	beq	256f0 <flatcc_verify_union_vector_field@@Base+0x3c>
   2574c:	uxth	r1, r0
   25750:	mov	r0, #22
   25754:	cmp	r1, #0
   25758:	beq	25800 <flatcc_verify_union_vector_field@@Base+0x14c>
   2575c:	b	256f0 <flatcc_verify_union_vector_field@@Base+0x3c>
   25760:	mov	r0, r5
   25764:	mov	r1, r4
   25768:	bl	2540c <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   2576c:	cmp	r0, #0
   25770:	moveq	r0, #0
   25774:	subeq	sp, fp, #28
   25778:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2577c:	mov	r4, r0
   25780:	mov	r1, #0
   25784:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   25788:	add	r4, r0, r4
   2578c:	mov	r0, r4
   25790:	mov	r1, #0
   25794:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   25798:	mov	r9, r0
   2579c:	add	r3, sp, #16
   257a0:	mov	r0, r5
   257a4:	mov	r1, sl
   257a8:	mov	r2, r6
   257ac:	bl	24a24 <flatcc_verify_string_field@@Base+0x5c>
   257b0:	cmp	r0, #0
   257b4:	bne	25800 <flatcc_verify_union_vector_field@@Base+0x14c>
   257b8:	ldr	r6, [sp, #16]
   257bc:	cmp	r6, #0
   257c0:	beq	25800 <flatcc_verify_union_vector_field@@Base+0x14c>
   257c4:	ldm	r5, {r7, sl}
   257c8:	mov	r0, r7
   257cc:	mov	r1, r6
   257d0:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   257d4:	mov	r3, r0
   257d8:	ldr	r0, [r5, #8]
   257dc:	add	r1, r4, #4
   257e0:	str	r9, [sp]
   257e4:	str	r1, [sp, #4]
   257e8:	str	r0, [sp, #8]
   257ec:	str	r8, [sp, #12]
   257f0:	mov	r0, r7
   257f4:	mov	r1, sl
   257f8:	mov	r2, r6
   257fc:	bl	25808 <flatcc_verify_union_vector_field@@Base+0x154>
   25800:	sub	sp, fp, #28
   25804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2580c:	add	fp, sp, #28
   25810:	sub	sp, sp, #36	; 0x24
   25814:	ldr	r8, [fp, #16]
   25818:	cmp	r8, #1
   2581c:	movlt	r0, #3
   25820:	sublt	sp, fp, #28
   25824:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25828:	mov	r5, r3
   2582c:	mov	r7, r2
   25830:	mov	r6, r1
   25834:	mov	r4, r0
   25838:	mvn	r0, #-1073741824	; 0xc0000000
   2583c:	mov	r1, #4
   25840:	str	r1, [sp]
   25844:	str	r1, [sp, #4]
   25848:	str	r0, [sp, #8]
   2584c:	mov	r0, r4
   25850:	mov	r1, r6
   25854:	bl	24b8c <flatcc_verify_vector_field@@Base+0x70>
   25858:	cmp	r0, #0
   2585c:	bne	25914 <flatcc_verify_union_vector_field@@Base+0x260>
   25860:	ldr	r9, [fp, #8]
   25864:	add	r7, r5, r7
   25868:	mov	r0, r4
   2586c:	mov	r1, r7
   25870:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   25874:	mov	r5, r0
   25878:	mov	r0, #34	; 0x22
   2587c:	cmp	r5, r9
   25880:	bne	25914 <flatcc_verify_union_vector_field@@Base+0x260>
   25884:	sub	r0, r8, #1
   25888:	str	r6, [sp, #16]
   2588c:	str	r4, [sp, #12]
   25890:	str	r0, [sp, #20]
   25894:	cmp	r5, #0
   25898:	moveq	r0, #0
   2589c:	subeq	sp, fp, #28
   258a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258a4:	ldr	r8, [fp, #20]
   258a8:	ldr	r9, [fp, #12]
   258ac:	add	r6, r7, #4
   258b0:	mov	r7, #0
   258b4:	add	sl, sp, #12
   258b8:	mov	r0, r4
   258bc:	mov	r1, r6
   258c0:	bl	24b14 <flatcc_verify_string_field@@Base+0x14c>
   258c4:	ldrb	r1, [r9, r7]
   258c8:	cmp	r0, #0
   258cc:	beq	258f8 <flatcc_verify_union_vector_field@@Base+0x244>
   258d0:	cmp	r1, #0
   258d4:	beq	2591c <flatcc_verify_union_vector_field@@Base+0x268>
   258d8:	str	r6, [sp, #28]
   258dc:	strb	r1, [sp, #24]
   258e0:	str	r0, [sp, #32]
   258e4:	mov	r0, sl
   258e8:	blx	r8
   258ec:	cmp	r0, #0
   258f0:	beq	25900 <flatcc_verify_union_vector_field@@Base+0x24c>
   258f4:	b	25928 <flatcc_verify_union_vector_field@@Base+0x274>
   258f8:	cmp	r1, #0
   258fc:	bne	25938 <flatcc_verify_union_vector_field@@Base+0x284>
   25900:	add	r6, r6, #4
   25904:	add	r7, r7, #1
   25908:	mov	r0, #0
   2590c:	cmp	r7, r5
   25910:	bcc	258b8 <flatcc_verify_union_vector_field@@Base+0x204>
   25914:	sub	sp, fp, #28
   25918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2591c:	mov	r0, #33	; 0x21
   25920:	sub	sp, fp, #28
   25924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25928:	add	r0, sp, #12
   2592c:	blx	r8
   25930:	sub	sp, fp, #28
   25934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25938:	mov	r0, #32
   2593c:	sub	sp, fp, #28
   25940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25944:	add	ip, r2, r1
   25948:	mov	r3, #0
   2594c:	cmp	ip, r1
   25950:	mov	r1, #0
   25954:	movwhi	r1, #1
   25958:	add	r2, ip, #4
   2595c:	cmp	r2, r0
   25960:	movwls	r3, #1
   25964:	and	r0, r1, r3
   25968:	and	r1, ip, #3
   2596c:	clz	r1, r1
   25970:	lsr	r1, r1, #5
   25974:	and	r0, r1, r0
   25978:	bx	lr
   2597c:	ldr	r0, [r0]
   25980:	b	25984 <flatcc_verify_union_vector_field@@Base+0x2d0>
   25984:	bx	lr
   25988:	mov	ip, r0
   2598c:	cmp	r3, #4
   25990:	movls	r3, #4
   25994:	add	r2, r2, r1
   25998:	mov	r0, #0
   2599c:	cmp	r2, r1
   259a0:	bls	259c4 <flatcc_verify_union_vector_field@@Base+0x310>
   259a4:	add	r1, r2, #4
   259a8:	cmp	r1, ip
   259ac:	bxhi	lr
   259b0:	sub	r0, r3, #1
   259b4:	orr	r0, r0, #3
   259b8:	and	r0, r0, r1
   259bc:	clz	r0, r0
   259c0:	lsr	r0, r0, #5
   259c4:	bx	lr
   259c8:	add	r0, r0, r1
   259cc:	b	259d0 <flatcc_verify_union_vector_field@@Base+0x31c>
   259d0:	ldrh	r0, [r0]
   259d4:	b	259d8 <flatcc_verify_union_vector_field@@Base+0x324>
   259d8:	bx	lr
   259dc:	bx	lr
   259e0:	ldr	r0, [r0]
   259e4:	b	259e8 <flatcc_verify_union_vector_field@@Base+0x334>
   259e8:	bx	lr
   259ec:	andeq	r0, r0, r0

000259f0 <grisu3_diy_fp_encode_double@@Base>:
   259f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259f4:	add	fp, sp, #28
   259f8:	sub	sp, sp, #68	; 0x44
   259fc:	mov	r9, r3
   25a00:	mov	r7, r2
   25a04:	mov	r2, r0
   25a08:	mov	r6, #0
   25a0c:	str	r6, [sp]
   25a10:	str	r6, [sp, #4]
   25a14:	add	r0, sp, #48	; 0x30
   25a18:	mov	r3, r1
   25a1c:	bl	25c6c <grisu3_diy_fp_encode_double@@Base+0x27c>
   25a20:	ldr	r0, [fp, #8]
   25a24:	cmp	r0, #0
   25a28:	movwne	r0, #4
   25a2c:	ldr	r1, [sp, #48]	; 0x30
   25a30:	str	r1, [sp, #28]
   25a34:	ldr	sl, [sp, #52]	; 0x34
   25a38:	ldr	r5, [sp, #56]	; 0x38
   25a3c:	ldr	r8, [sp, #60]	; 0x3c
   25a40:	rsb	r1, r5, #0
   25a44:	lsl	r4, r0, r1
   25a48:	str	r9, [sp, #24]
   25a4c:	sub	r7, r7, r9
   25a50:	add	r1, sp, #48	; 0x30
   25a54:	mov	r0, r7
   25a58:	bl	25d10 <grisu3_diy_fp_encode_double@@Base+0x320>
   25a5c:	cmp	r7, r0
   25a60:	bne	25a6c <grisu3_diy_fp_encode_double@@Base+0x7c>
   25a64:	ldr	r2, [sp, #28]
   25a68:	b	25ad8 <grisu3_diy_fp_encode_double@@Base+0xe8>
   25a6c:	mvn	r0, r0
   25a70:	add	r7, r7, r0
   25a74:	cmp	r7, #7
   25a78:	bcs	25c4c <grisu3_diy_fp_encode_double@@Base+0x25c>
   25a7c:	stm	sp, {r5, r8}
   25a80:	movw	r0, #23712	; 0x5ca0
   25a84:	movt	r0, #3
   25a88:	ldr	r1, [r0, r7, lsl #4]!
   25a8c:	str	r1, [sp, #8]
   25a90:	ldmib	r0, {r1, r2}
   25a94:	ldr	r0, [r0, #12]
   25a98:	str	r0, [sp, #20]
   25a9c:	str	r2, [sp, #16]
   25aa0:	str	r1, [sp, #12]
   25aa4:	add	r0, sp, #32
   25aa8:	ldr	r2, [sp, #28]
   25aac:	mov	r3, sl
   25ab0:	bl	25df8 <grisu3_diy_fp_encode_double@@Base+0x408>
   25ab4:	ldr	r0, [sp, #24]
   25ab8:	add	r0, r0, r7
   25abc:	add	r0, r0, #1
   25ac0:	cmp	r0, #19
   25ac4:	addgt	r4, r4, #4
   25ac8:	ldr	r2, [sp, #32]
   25acc:	ldr	sl, [sp, #36]	; 0x24
   25ad0:	ldr	r5, [sp, #40]	; 0x28
   25ad4:	ldr	r8, [sp, #44]	; 0x2c
   25ad8:	add	r7, sp, #48	; 0x30
   25adc:	ldm	r7, {r0, r1, r7}
   25ae0:	ldr	r3, [sp, #60]	; 0x3c
   25ae4:	stm	sp, {r5, r8}
   25ae8:	add	ip, sp, #8
   25aec:	stm	ip, {r0, r1, r7}
   25af0:	str	r3, [sp, #20]
   25af4:	add	r0, sp, #32
   25af8:	mov	r3, sl
   25afc:	bl	25df8 <grisu3_diy_fp_encode_double@@Base+0x408>
   25b00:	add	r5, sp, #32
   25b04:	ldm	r5, {r2, r3, r5}
   25b08:	ldr	r0, [sp, #44]	; 0x2c
   25b0c:	str	r5, [sp]
   25b10:	str	r0, [sp, #4]
   25b14:	add	r0, sp, #32
   25b18:	bl	25c6c <grisu3_diy_fp_encode_double@@Base+0x27c>
   25b1c:	mov	r0, #9
   25b20:	cmp	r4, #0
   25b24:	movweq	r0, #8
   25b28:	add	r0, r0, r4
   25b2c:	ldr	r3, [sp, #32]
   25b30:	ldr	r1, [sp, #36]	; 0x24
   25b34:	ldr	r2, [sp, #40]	; 0x28
   25b38:	sub	r7, r5, r2
   25b3c:	lsl	r9, r0, r7
   25b40:	movw	r0, #64461	; 0xfbcd
   25b44:	movt	r0, #65535	; 0xffff
   25b48:	cmp	r2, r0
   25b4c:	bgt	25ba4 <grisu3_diy_fp_encode_double@@Base+0x1b4>
   25b50:	mov	r6, #64	; 0x40
   25b54:	mvn	r7, #1136	; 0x470
   25b58:	cmp	r2, r7
   25b5c:	blt	25b70 <grisu3_diy_fp_encode_double@@Base+0x180>
   25b60:	add	r0, r0, #1
   25b64:	sub	r6, r0, r2
   25b68:	cmp	r6, #61	; 0x3d
   25b6c:	blt	25ba4 <grisu3_diy_fp_encode_double@@Base+0x1b4>
   25b70:	sub	r0, r6, #62	; 0x3e
   25b74:	mov	r7, #9
   25b78:	add	r9, r7, r9, asr r0
   25b7c:	lsr	r3, r3, r0
   25b80:	rsb	r7, r6, #94	; 0x5e
   25b84:	orr	r3, r3, r1, lsl r7
   25b88:	sub	r7, r6, #94	; 0x5e
   25b8c:	cmp	r7, #0
   25b90:	lsrge	r3, r1, r7
   25b94:	add	r2, r0, r2
   25b98:	lsr	r1, r1, r0
   25b9c:	movwge	r1, #0
   25ba0:	mov	r6, #62	; 0x3e
   25ba4:	ldr	r8, [fp, #12]
   25ba8:	lsr	r0, r3, r6
   25bac:	rsb	r7, r6, #32
   25bb0:	orr	r0, r0, r1, lsl r7
   25bb4:	sub	r7, r6, #32
   25bb8:	cmp	r7, #0
   25bbc:	lsrge	r0, r1, r7
   25bc0:	add	r2, r2, r6
   25bc4:	lsr	r1, r1, r6
   25bc8:	movwge	r1, #0
   25bcc:	sub	r7, r6, #1
   25bd0:	mov	r5, #1
   25bd4:	lsl	r5, r5, r7
   25bd8:	sub	r7, r6, #33	; 0x21
   25bdc:	cmp	r7, #0
   25be0:	movwge	r5, #0
   25be4:	add	r7, r9, r5, lsl #3
   25be8:	lsl	sl, r5, #3
   25bec:	and	r3, r5, r3
   25bf0:	lsl	r5, r3, #3
   25bf4:	mov	r4, #0
   25bf8:	cmp	r6, r7
   25bfc:	blt	25c1c <grisu3_diy_fp_encode_double@@Base+0x22c>
   25c00:	adds	r0, r0, #1
   25c04:	adc	r1, r1, #0
   25c08:	tst	r1, #2097152	; 0x200000
   25c0c:	beq	25c1c <grisu3_diy_fp_encode_double@@Base+0x22c>
   25c10:	lsrs	r1, r1, #1
   25c14:	rrx	r0, r0
   25c18:	add	r2, r2, #1
   25c1c:	mov	r3, r4
   25c20:	bl	25e5c <grisu3_diy_fp_encode_double@@Base+0x46c>
   25c24:	vstr	d0, [r8]
   25c28:	cmp	r5, r7
   25c2c:	mov	r0, #0
   25c30:	movwge	r0, #1
   25c34:	sub	r1, sl, r9
   25c38:	cmp	r1, r5
   25c3c:	movwge	r4, #1
   25c40:	orr	r0, r0, r4
   25c44:	sub	sp, fp, #28
   25c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c4c:	movw	r0, #26380	; 0x670c
   25c50:	movt	r0, #3
   25c54:	movw	r1, #26408	; 0x6728
   25c58:	movt	r1, #3
   25c5c:	movw	r3, #26495	; 0x677f
   25c60:	movt	r3, #3
   25c64:	mov	r2, #185	; 0xb9
   25c68:	bl	14f44 <__assert_fail@plt>
   25c6c:	push	{r4, sl, fp, lr}
   25c70:	add	fp, sp, #8
   25c74:	orrs	r1, r2, r3
   25c78:	beq	25cf0 <grisu3_diy_fp_encode_double@@Base+0x300>
   25c7c:	ldr	ip, [fp, #12]
   25c80:	ldr	r1, [fp, #8]
   25c84:	mov	r4, #0
   25c88:	cmp	r4, r3, lsr #22
   25c8c:	bne	25ca8 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   25c90:	lsl	r3, r3, #10
   25c94:	orr	r3, r3, r2, lsr #22
   25c98:	sub	r1, r1, #10
   25c9c:	lsl	r2, r2, #10
   25ca0:	cmp	r3, #4194304	; 0x400000
   25ca4:	bcc	25c90 <grisu3_diy_fp_encode_double@@Base+0x2a0>
   25ca8:	cmp	r3, #0
   25cac:	blt	25cd8 <grisu3_diy_fp_encode_double@@Base+0x2e8>
   25cb0:	mvn	lr, #0
   25cb4:	lsl	r3, r3, #1
   25cb8:	orr	r3, r3, r2, lsr #31
   25cbc:	sub	r1, r1, #1
   25cc0:	lsl	r4, r2, #1
   25cc4:	subs	r2, lr, r2, lsl #1
   25cc8:	sbcs	r2, lr, r3
   25ccc:	mov	r2, r4
   25cd0:	blt	25cb4 <grisu3_diy_fp_encode_double@@Base+0x2c4>
   25cd4:	b	25cdc <grisu3_diy_fp_encode_double@@Base+0x2ec>
   25cd8:	mov	r4, r2
   25cdc:	str	r4, [r0]
   25ce0:	str	r3, [r0, #4]
   25ce4:	str	r1, [r0, #8]
   25ce8:	str	ip, [r0, #12]
   25cec:	pop	{r4, sl, fp, pc}
   25cf0:	movw	r0, #27698	; 0x6c32
   25cf4:	movt	r0, #3
   25cf8:	movw	r1, #27707	; 0x6c3b
   25cfc:	movt	r1, #3
   25d00:	movw	r3, #27793	; 0x6c91
   25d04:	movt	r3, #3
   25d08:	mov	r2, #260	; 0x104
   25d0c:	bl	14f44 <__assert_fail@plt>
   25d10:	push	{fp, lr}
   25d14:	mov	fp, sp
   25d18:	cmn	r0, #348	; 0x15c
   25d1c:	blt	25d98 <grisu3_diy_fp_encode_double@@Base+0x3a8>
   25d20:	cmp	r0, #348	; 0x15c
   25d24:	bge	25db8 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   25d28:	add	r2, r0, #348	; 0x15c
   25d2c:	asr	r3, r2, #31
   25d30:	add	r2, r2, r3, lsr #29
   25d34:	mvn	r3, #15
   25d38:	and	r2, r3, r2, lsl #1
   25d3c:	movw	r3, #23824	; 0x5d10
   25d40:	movt	r3, #3
   25d44:	ldr	r2, [r3, r2]!
   25d48:	str	r2, [r1]
   25d4c:	ldr	r2, [r3, #4]
   25d50:	str	r2, [r1, #4]
   25d54:	ldrsh	r2, [r3, #8]
   25d58:	str	r2, [r1, #8]
   25d5c:	ldrsh	r1, [r3, #10]
   25d60:	cmp	r1, r0
   25d64:	bgt	25dd8 <grisu3_diy_fp_encode_double@@Base+0x3e8>
   25d68:	add	r2, r1, #8
   25d6c:	cmp	r2, r0
   25d70:	movgt	r0, r1
   25d74:	popgt	{fp, pc}
   25d78:	movw	r0, #27996	; 0x6d5c
   25d7c:	movt	r0, #3
   25d80:	movw	r1, #26408	; 0x6728
   25d84:	movt	r1, #3
   25d88:	movw	r3, #27881	; 0x6ce9
   25d8c:	movt	r3, #3
   25d90:	mov	r2, #89	; 0x59
   25d94:	bl	14f44 <__assert_fail@plt>
   25d98:	movw	r0, #27850	; 0x6cca
   25d9c:	movt	r0, #3
   25da0:	movw	r1, #26408	; 0x6728
   25da4:	movt	r1, #3
   25da8:	movw	r3, #27881	; 0x6ce9
   25dac:	movt	r3, #3
   25db0:	mov	r2, #80	; 0x50
   25db4:	bl	14f44 <__assert_fail@plt>
   25db8:	movw	r0, #27938	; 0x6d22
   25dbc:	movt	r0, #3
   25dc0:	movw	r1, #26408	; 0x6728
   25dc4:	movt	r1, #3
   25dc8:	movw	r3, #27881	; 0x6ce9
   25dcc:	movt	r3, #3
   25dd0:	mov	r2, #81	; 0x51
   25dd4:	bl	14f44 <__assert_fail@plt>
   25dd8:	movw	r0, #27981	; 0x6d4d
   25ddc:	movt	r0, #3
   25de0:	movw	r1, #26408	; 0x6728
   25de4:	movt	r1, #3
   25de8:	movw	r3, #27881	; 0x6ce9
   25dec:	movt	r3, #3
   25df0:	mov	r2, #88	; 0x58
   25df4:	bl	14f44 <__assert_fail@plt>
   25df8:	push	{r4, r5, fp, lr}
   25dfc:	add	fp, sp, #8
   25e00:	ldr	ip, [fp, #24]
   25e04:	ldr	r1, [fp, #8]
   25e08:	add	r1, r1, ip
   25e0c:	add	r1, r1, #64	; 0x40
   25e10:	str	r1, [r0, #8]
   25e14:	ldr	ip, [fp, #16]
   25e18:	umull	r1, lr, ip, r2
   25e1c:	umull	ip, r1, ip, r3
   25e20:	mov	r5, #0
   25e24:	adds	lr, ip, lr
   25e28:	adc	r5, r5, #0
   25e2c:	ldr	ip, [fp, #20]
   25e30:	umull	r2, r4, ip, r2
   25e34:	adds	r2, lr, r2
   25e38:	adc	r5, r5, #0
   25e3c:	adds	r2, r2, #-2147483648	; 0x80000000
   25e40:	adc	r2, r5, #0
   25e44:	umaal	r1, r4, ip, r3
   25e48:	adds	r1, r1, r2
   25e4c:	str	r1, [r0]
   25e50:	adc	r1, r4, #0
   25e54:	str	r1, [r0, #4]
   25e58:	pop	{r4, r5, fp, pc}
   25e5c:	push	{r4, r5, fp, lr}
   25e60:	add	fp, sp, #8
   25e64:	cmp	r1, #2097152	; 0x200000
   25e68:	bcc	25e8c <grisu3_diy_fp_encode_double@@Base+0x49c>
   25e6c:	mov	r5, #0
   25e70:	lsrs	r3, r1, #1
   25e74:	rrx	r0, r0
   25e78:	add	r2, r2, #1
   25e7c:	cmp	r5, r1, lsr #22
   25e80:	mov	r1, r3
   25e84:	bne	25e70 <grisu3_diy_fp_encode_double@@Base+0x480>
   25e88:	b	25e90 <grisu3_diy_fp_encode_double@@Base+0x4a0>
   25e8c:	mov	r3, r1
   25e90:	movw	ip, #64462	; 0xfbce
   25e94:	movt	ip, #65535	; 0xffff
   25e98:	cmp	r2, ip
   25e9c:	bge	25ea8 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   25ea0:	vmov.i32	d0, #0	; 0x00000000
   25ea4:	pop	{r4, r5, fp, pc}
   25ea8:	and	r1, r3, #1048576	; 0x100000
   25eac:	mov	r5, #1
   25eb0:	eor	lr, r5, r1, lsr #20
   25eb4:	cmp	r2, ip
   25eb8:	beq	25efc <grisu3_diy_fp_encode_double@@Base+0x50c>
   25ebc:	cmp	r1, #0
   25ec0:	bne	25efc <grisu3_diy_fp_encode_double@@Base+0x50c>
   25ec4:	mov	r5, #1
   25ec8:	lsl	r1, r3, #1
   25ecc:	orr	r1, r1, r0, lsr #31
   25ed0:	and	r3, r3, #524288	; 0x80000
   25ed4:	eor	lr, r5, r3, lsr #19
   25ed8:	lsl	r0, r0, #1
   25edc:	sub	r4, r2, #1
   25ee0:	cmn	r2, #1072	; 0x430
   25ee4:	blt	25f04 <grisu3_diy_fp_encode_double@@Base+0x514>
   25ee8:	cmp	r3, #0
   25eec:	mov	r3, r1
   25ef0:	mov	r2, r4
   25ef4:	beq	25ec8 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   25ef8:	b	25f04 <grisu3_diy_fp_encode_double@@Base+0x514>
   25efc:	mov	r4, r2
   25f00:	mov	r1, r3
   25f04:	cmp	r4, ip
   25f08:	bne	25f1c <grisu3_diy_fp_encode_double@@Base+0x52c>
   25f0c:	mov	r2, #0
   25f10:	cmp	lr, #0
   25f14:	mov	r3, #0
   25f18:	bne	25f2c <grisu3_diy_fp_encode_double@@Base+0x53c>
   25f1c:	movw	r2, #0
   25f20:	movt	r2, #17200	; 0x4330
   25f24:	add	r3, r2, r4, lsl #20
   25f28:	mov	r2, #0
   25f2c:	orr	r0, r2, r0
   25f30:	bfc	r1, #20, #12
   25f34:	orr	r1, r3, r1
   25f38:	pop	{r4, r5, fp, lr}
   25f3c:	b	285b8 <flatcc_json_parser_struct_as_root@@Base+0xb4>

00025f40 <flatcc_json_parser_error_string@@Base>:
   25f40:	cmp	r0, #34	; 0x22
   25f44:	movwhi	r0, #23530	; 0x5bea
   25f48:	movthi	r0, #3
   25f4c:	bxhi	lr
   25f50:	movw	r1, #26240	; 0x6680
   25f54:	movt	r1, #3
   25f58:	ldr	r0, [r1, r0, lsl #2]
   25f5c:	bx	lr

00025f60 <flatcc_json_parser_set_error@@Base>:
   25f60:	mov	ip, r2
   25f64:	ldr	r2, [r0, #20]
   25f68:	cmp	r2, #0
   25f6c:	beq	25f78 <flatcc_json_parser_set_error@@Base+0x18>
   25f70:	mov	r0, ip
   25f74:	bx	lr
   25f78:	str	r1, [r0, #32]
   25f7c:	ldr	r2, [r0, #4]
   25f80:	add	r1, r1, #1
   25f84:	sub	r1, r1, r2
   25f88:	str	r1, [r0, #16]
   25f8c:	str	r3, [r0, #20]
   25f90:	mov	r0, ip
   25f94:	bx	lr

00025f98 <flatcc_json_parser_string_part@@Base>:
   25f98:	cmp	r1, r2
   25f9c:	beq	25fc4 <flatcc_json_parser_string_part@@Base+0x2c>
   25fa0:	ldrb	r3, [r1]
   25fa4:	cmp	r3, #32
   25fa8:	bcc	25fd4 <flatcc_json_parser_string_part@@Base+0x3c>
   25fac:	cmp	r3, #34	; 0x22
   25fb0:	cmpne	r3, #92	; 0x5c
   25fb4:	beq	25fcc <flatcc_json_parser_string_part@@Base+0x34>
   25fb8:	add	r1, r1, #1
   25fbc:	cmp	r2, r1
   25fc0:	bne	25fa0 <flatcc_json_parser_string_part@@Base+0x8>
   25fc4:	mov	r3, #20
   25fc8:	b	25f60 <flatcc_json_parser_set_error@@Base>
   25fcc:	mov	r0, r1
   25fd0:	bx	lr
   25fd4:	mov	r3, #17
   25fd8:	b	25f60 <flatcc_json_parser_set_error@@Base>

00025fdc <flatcc_json_parser_space_ext@@Base>:
   25fdc:	cmp	r1, r2
   25fe0:	beq	26014 <flatcc_json_parser_space_ext@@Base+0x38>
   25fe4:	ldrb	r3, [r1]
   25fe8:	cmp	r3, #32
   25fec:	bne	26014 <flatcc_json_parser_space_ext@@Base+0x38>
   25ff0:	add	r1, r1, #1
   25ff4:	cmp	r2, r1
   25ff8:	bne	25fe4 <flatcc_json_parser_space_ext@@Base+0x8>
   25ffc:	b	26014 <flatcc_json_parser_space_ext@@Base+0x38>
   26000:	add	r1, r1, #1
   26004:	str	r1, [r0, #4]
   26008:	ldr	r3, [r0, #12]
   2600c:	add	r3, r3, #1
   26010:	str	r3, [r0, #12]
   26014:	cmp	r1, r2
   26018:	beq	260d0 <flatcc_json_parser_space_ext@@Base+0xf4>
   2601c:	ldrb	r3, [r1]
   26020:	cmp	r3, #32
   26024:	bhi	260d0 <flatcc_json_parser_space_ext@@Base+0xf4>
   26028:	sub	ip, r3, #9
   2602c:	cmp	ip, #23
   26030:	bhi	260d8 <flatcc_json_parser_space_ext@@Base+0xfc>
   26034:	add	r3, pc, #0
   26038:	ldr	pc, [r3, ip, lsl #2]
   2603c:	muleq	r2, ip, r0
   26040:	andeq	r6, r2, r0
   26044:	ldrdeq	r6, [r2], -r8
   26048:	ldrdeq	r6, [r2], -r8
   2604c:	andeq	r6, r2, ip, lsr #1
   26050:	ldrdeq	r6, [r2], -r8
   26054:	ldrdeq	r6, [r2], -r8
   26058:	ldrdeq	r6, [r2], -r8
   2605c:	ldrdeq	r6, [r2], -r8
   26060:	ldrdeq	r6, [r2], -r8
   26064:	ldrdeq	r6, [r2], -r8
   26068:	ldrdeq	r6, [r2], -r8
   2606c:	ldrdeq	r6, [r2], -r8
   26070:	ldrdeq	r6, [r2], -r8
   26074:	ldrdeq	r6, [r2], -r8
   26078:	ldrdeq	r6, [r2], -r8
   2607c:	ldrdeq	r6, [r2], -r8
   26080:	ldrdeq	r6, [r2], -r8
   26084:	ldrdeq	r6, [r2], -r8
   26088:	ldrdeq	r6, [r2], -r8
   2608c:	ldrdeq	r6, [r2], -r8
   26090:	ldrdeq	r6, [r2], -r8
   26094:	ldrdeq	r6, [r2], -r8
   26098:	ldrdeq	r5, [r2], -ip
   2609c:	add	r1, r1, #1
   260a0:	cmp	r1, r2
   260a4:	bne	2601c <flatcc_json_parser_space_ext@@Base+0x40>
   260a8:	b	260d0 <flatcc_json_parser_space_ext@@Base+0xf4>
   260ac:	sub	r3, r2, r1
   260b0:	mov	ip, #0
   260b4:	cmp	r3, #2
   260b8:	ldrbge	r3, [r1, #1]
   260bc:	subge	r3, r3, #10
   260c0:	clzge	r3, r3
   260c4:	lsrge	ip, r3, #5
   260c8:	add	r1, r1, ip
   260cc:	b	26000 <flatcc_json_parser_space_ext@@Base+0x24>
   260d0:	mov	r0, r1
   260d4:	bx	lr
   260d8:	mov	r3, #5
   260dc:	b	25f60 <flatcc_json_parser_set_error@@Base>

000260e0 <flatcc_json_parser_string_escape@@Base>:
   260e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   260e4:	add	fp, sp, #24
   260e8:	sub	r7, r2, r1
   260ec:	cmp	r7, #2
   260f0:	blt	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   260f4:	ldrb	r6, [r1]
   260f8:	cmp	r6, #92	; 0x5c
   260fc:	bne	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   26100:	ldrb	r6, [r1, #1]
   26104:	sub	r6, r6, #34	; 0x22
   26108:	cmp	r6, #86	; 0x56
   2610c:	bhi	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   26110:	add	r5, pc, #0
   26114:	ldr	pc, [r5, r6, lsl #2]
   26118:	andeq	r6, r2, r4, ror r2
   2611c:	strdeq	r6, [r2], -r0
   26120:	strdeq	r6, [r2], -r0
   26124:	strdeq	r6, [r2], -r0
   26128:	strdeq	r6, [r2], -r0
   2612c:	strdeq	r6, [r2], -r0
   26130:	strdeq	r6, [r2], -r0
   26134:	strdeq	r6, [r2], -r0
   26138:	strdeq	r6, [r2], -r0
   2613c:	strdeq	r6, [r2], -r0
   26140:	strdeq	r6, [r2], -r0
   26144:	strdeq	r6, [r2], -r0
   26148:	strdeq	r6, [r2], -r0
   2614c:	andeq	r6, r2, ip, ror r2
   26150:	strdeq	r6, [r2], -r0
   26154:	strdeq	r6, [r2], -r0
   26158:	strdeq	r6, [r2], -r0
   2615c:	strdeq	r6, [r2], -r0
   26160:	strdeq	r6, [r2], -r0
   26164:	strdeq	r6, [r2], -r0
   26168:	strdeq	r6, [r2], -r0
   2616c:	strdeq	r6, [r2], -r0
   26170:	strdeq	r6, [r2], -r0
   26174:	strdeq	r6, [r2], -r0
   26178:	strdeq	r6, [r2], -r0
   2617c:	strdeq	r6, [r2], -r0
   26180:	strdeq	r6, [r2], -r0
   26184:	strdeq	r6, [r2], -r0
   26188:	strdeq	r6, [r2], -r0
   2618c:	strdeq	r6, [r2], -r0
   26190:	strdeq	r6, [r2], -r0
   26194:	strdeq	r6, [r2], -r0
   26198:	strdeq	r6, [r2], -r0
   2619c:	strdeq	r6, [r2], -r0
   261a0:	strdeq	r6, [r2], -r0
   261a4:	strdeq	r6, [r2], -r0
   261a8:	strdeq	r6, [r2], -r0
   261ac:	strdeq	r6, [r2], -r0
   261b0:	strdeq	r6, [r2], -r0
   261b4:	strdeq	r6, [r2], -r0
   261b8:	strdeq	r6, [r2], -r0
   261bc:	strdeq	r6, [r2], -r0
   261c0:	strdeq	r6, [r2], -r0
   261c4:	strdeq	r6, [r2], -r0
   261c8:	strdeq	r6, [r2], -r0
   261cc:	strdeq	r6, [r2], -r0
   261d0:	strdeq	r6, [r2], -r0
   261d4:	strdeq	r6, [r2], -r0
   261d8:	strdeq	r6, [r2], -r0
   261dc:	strdeq	r6, [r2], -r0
   261e0:	strdeq	r6, [r2], -r0
   261e4:	strdeq	r6, [r2], -r0
   261e8:	strdeq	r6, [r2], -r0
   261ec:	strdeq	r6, [r2], -r0
   261f0:	strdeq	r6, [r2], -r0
   261f4:	strdeq	r6, [r2], -r0
   261f8:	strdeq	r6, [r2], -r0
   261fc:	strdeq	r6, [r2], -r0
   26200:	andeq	r6, r2, r4, lsl #5
   26204:	strdeq	r6, [r2], -r0
   26208:	strdeq	r6, [r2], -r0
   2620c:	strdeq	r6, [r2], -r0
   26210:	strdeq	r6, [r2], -r0
   26214:	strdeq	r6, [r2], -r0
   26218:	andeq	r6, r2, ip, lsl #5
   2621c:	strdeq	r6, [r2], -r0
   26220:	strdeq	r6, [r2], -r0
   26224:	strdeq	r6, [r2], -r0
   26228:	muleq	r2, r4, r2
   2622c:	strdeq	r6, [r2], -r0
   26230:	strdeq	r6, [r2], -r0
   26234:	strdeq	r6, [r2], -r0
   26238:	strdeq	r6, [r2], -r0
   2623c:	strdeq	r6, [r2], -r0
   26240:	strdeq	r6, [r2], -r0
   26244:	strdeq	r6, [r2], -r0
   26248:	muleq	r2, ip, r2
   2624c:	strdeq	r6, [r2], -r0
   26250:	strdeq	r6, [r2], -r0
   26254:	strdeq	r6, [r2], -r0
   26258:	andeq	r6, r2, r4, lsr #5
   2625c:	strdeq	r6, [r2], -r0
   26260:	andeq	r6, r2, ip, lsr #5
   26264:			; <UNDEFINED> instruction: 0x000262bc
   26268:	strdeq	r6, [r2], -r0
   2626c:	strdeq	r6, [r2], -r0
   26270:	andeq	r6, r2, r0, ror #5
   26274:	movw	r0, #8705	; 0x2201
   26278:	b	262b0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   2627c:	movw	r0, #12033	; 0x2f01
   26280:	b	262b0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26284:	movw	r0, #23553	; 0x5c01
   26288:	b	262b0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   2628c:	movw	r0, #2049	; 0x801
   26290:	b	262b0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   26294:	movw	r0, #3073	; 0xc01
   26298:	b	262b0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   2629c:	movw	r0, #2561	; 0xa01
   262a0:	b	262b0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   262a4:	movw	r0, #3329	; 0xd01
   262a8:	b	262b0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   262ac:	movw	r0, #2305	; 0x901
   262b0:	strh	r0, [r3]
   262b4:	add	r0, r1, #2
   262b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   262bc:	cmp	r7, #5
   262c0:	ble	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   262c4:	ldrb	r7, [r1, #2]
   262c8:	sub	r6, r7, #48	; 0x30
   262cc:	uxtb	r6, r6
   262d0:	cmp	r6, #9
   262d4:	bhi	26320 <flatcc_json_parser_string_escape@@Base+0x240>
   262d8:	lsl	ip, r7, #12
   262dc:	b	26340 <flatcc_json_parser_string_escape@@Base+0x260>
   262e0:	mov	r6, #1
   262e4:	strb	r6, [r3]
   262e8:	cmp	r7, #3
   262ec:	bgt	26304 <flatcc_json_parser_string_escape@@Base+0x224>
   262f0:	mov	r7, #0
   262f4:	strb	r7, [r3]
   262f8:	mov	r3, #18
   262fc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   26300:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26304:	ldrb	r7, [r1, #2]
   26308:	sub	r6, r7, #48	; 0x30
   2630c:	uxtb	r6, r6
   26310:	cmp	r6, #9
   26314:	bhi	2635c <flatcc_json_parser_string_escape@@Base+0x27c>
   26318:	lsl	r6, r7, #4
   2631c:	b	26378 <flatcc_json_parser_string_escape@@Base+0x298>
   26320:	orr	r6, r7, #32
   26324:	sub	r6, r6, #97	; 0x61
   26328:	uxtb	r6, r6
   2632c:	cmp	r6, #5
   26330:	bhi	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   26334:	movw	r6, #36864	; 0x9000
   26338:	movt	r6, #65535	; 0xffff
   2633c:	add	ip, r6, r7, lsl #12
   26340:	ldrb	lr, [r1, #3]
   26344:	sub	r4, lr, #48	; 0x30
   26348:	uxtb	r4, r4
   2634c:	cmp	r4, #10
   26350:	bcs	263b4 <flatcc_json_parser_string_escape@@Base+0x2d4>
   26354:	mov	r8, #53248	; 0xd000
   26358:	b	263cc <flatcc_json_parser_string_escape@@Base+0x2ec>
   2635c:	orr	r6, r7, #32
   26360:	sub	r6, r6, #97	; 0x61
   26364:	uxtb	r6, r6
   26368:	cmp	r6, #5
   2636c:	bhi	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   26370:	mvn	r6, #111	; 0x6f
   26374:	add	r6, r6, r7, lsl #4
   26378:	ldrb	r5, [r1, #3]
   2637c:	sub	r7, r5, #48	; 0x30
   26380:	uxtb	r4, r7
   26384:	cmp	r4, #9
   26388:	bls	263a4 <flatcc_json_parser_string_escape@@Base+0x2c4>
   2638c:	orr	r7, r5, #32
   26390:	sub	r5, r7, #97	; 0x61
   26394:	uxtb	r5, r5
   26398:	cmp	r5, #5
   2639c:	bhi	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   263a0:	sub	r7, r7, #87	; 0x57
   263a4:	orr	r0, r7, r6
   263a8:	strb	r0, [r3, #1]
   263ac:	add	r0, r1, #4
   263b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   263b4:	orr	lr, lr, #32
   263b8:	sub	r4, lr, #97	; 0x61
   263bc:	uxtb	r4, r4
   263c0:	mov	r8, #43264	; 0xa900
   263c4:	cmp	r4, #6
   263c8:	bcs	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   263cc:	ldrb	r5, [r1, #4]
   263d0:	sub	r4, r5, #48	; 0x30
   263d4:	uxtb	r4, r4
   263d8:	cmp	r4, #10
   263dc:	bcs	263e8 <flatcc_json_parser_string_escape@@Base+0x308>
   263e0:	mov	r9, #64768	; 0xfd00
   263e4:	b	26400 <flatcc_json_parser_string_escape@@Base+0x320>
   263e8:	orr	r5, r5, #32
   263ec:	sub	r4, r5, #97	; 0x61
   263f0:	uxtb	r4, r4
   263f4:	movw	r9, #64144	; 0xfa90
   263f8:	cmp	r4, #6
   263fc:	bcs	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   26400:	ldrb	r7, [r1, #5]
   26404:	sub	r4, r7, #48	; 0x30
   26408:	uxtb	r4, r4
   2640c:	cmp	r4, #10
   26410:	bcs	26420 <flatcc_json_parser_string_escape@@Base+0x340>
   26414:	mvn	r0, #86	; 0x56
   26418:	add	r4, r0, #39	; 0x27
   2641c:	b	26438 <flatcc_json_parser_string_escape@@Base+0x358>
   26420:	movw	r4, #65449	; 0xffa9
   26424:	orr	r7, r7, #32
   26428:	sub	r6, r7, #97	; 0x61
   2642c:	uxtb	r6, r6
   26430:	cmp	r6, #6
   26434:	bcs	262f0 <flatcc_json_parser_string_escape@@Base+0x210>
   26438:	add	r0, r8, lr, lsl #8
   2643c:	orr	r0, r0, ip
   26440:	add	r2, r9, r5, lsl #4
   26444:	orr	r0, r0, r2
   26448:	add	r2, r4, r7
   2644c:	orr	r0, r0, r2
   26450:	uxth	r7, r0
   26454:	cmp	r7, #127	; 0x7f
   26458:	bhi	26468 <flatcc_json_parser_string_escape@@Base+0x388>
   2645c:	mov	r2, #1
   26460:	strb	r2, [r3]
   26464:	b	264bc <flatcc_json_parser_string_escape@@Base+0x3dc>
   26468:	and	r2, r0, #63488	; 0xf800
   2646c:	mov	r6, #0
   26470:	cmp	r6, r2, lsr #11
   26474:	bne	26490 <flatcc_json_parser_string_escape@@Base+0x3b0>
   26478:	mov	r2, #2
   2647c:	strb	r2, [r3]
   26480:	mov	r7, #192	; 0xc0
   26484:	orr	r7, r7, r0, lsr #6
   26488:	strb	r7, [r3, #1]
   2648c:	b	264b4 <flatcc_json_parser_string_escape@@Base+0x3d4>
   26490:	mov	r2, #3
   26494:	strb	r2, [r3]
   26498:	mov	r6, #224	; 0xe0
   2649c:	orr	r6, r6, r7, lsr #12
   264a0:	strb	r6, [r3, #1]
   264a4:	lsr	r7, r7, #6
   264a8:	mov	r6, #2
   264ac:	bfi	r7, r6, #6, #26
   264b0:	strb	r7, [r3, #2]
   264b4:	mvn	r7, #-67108863	; 0xfc000001
   264b8:	bfi	r0, r7, #6, #26
   264bc:	strb	r0, [r3, r2]
   264c0:	add	r0, r1, #6
   264c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000264c8 <flatcc_json_parser_skip_constant@@Base>:
   264c8:	push	{r4, r5, r6, sl, fp, lr}
   264cc:	add	fp, sp, #16
   264d0:	mov	r4, r1
   264d4:	cmp	r1, r2
   264d8:	beq	2654c <flatcc_json_parser_skip_constant@@Base+0x84>
   264dc:	mov	r5, r2
   264e0:	mov	r6, r0
   264e4:	ldrsb	r0, [r4]
   264e8:	cmp	r0, #0
   264ec:	blt	264fc <flatcc_json_parser_skip_constant@@Base+0x34>
   264f0:	cmp	r0, #95	; 0x5f
   264f4:	cmpne	r0, #46	; 0x2e
   264f8:	bne	2650c <flatcc_json_parser_skip_constant@@Base+0x44>
   264fc:	add	r4, r4, #1
   26500:	cmp	r4, r5
   26504:	bne	264e4 <flatcc_json_parser_skip_constant@@Base+0x1c>
   26508:	b	2654c <flatcc_json_parser_skip_constant@@Base+0x84>
   2650c:	sub	r1, r0, #48	; 0x30
   26510:	uxtb	r1, r1
   26514:	cmp	r1, #9
   26518:	bls	264fc <flatcc_json_parser_skip_constant@@Base+0x34>
   2651c:	orr	r0, r0, #32
   26520:	sub	r0, r0, #97	; 0x61
   26524:	uxtb	r0, r0
   26528:	cmp	r0, #25
   2652c:	bls	264fc <flatcc_json_parser_skip_constant@@Base+0x34>
   26530:	mov	r0, r6
   26534:	mov	r1, r4
   26538:	mov	r2, r5
   2653c:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26540:	cmp	r0, r4
   26544:	mov	r4, r0
   26548:	bne	26500 <flatcc_json_parser_skip_constant@@Base+0x38>
   2654c:	mov	r0, r4
   26550:	pop	{r4, r5, r6, sl, fp, pc}
   26554:	sub	r3, r2, r1
   26558:	cmp	r3, #2
   2655c:	blt	26588 <flatcc_json_parser_skip_constant@@Base+0xc0>
   26560:	ldrb	r3, [r1]
   26564:	cmp	r3, #32
   26568:	movhi	r0, r1
   2656c:	bxhi	lr
   26570:	bne	26588 <flatcc_json_parser_skip_constant@@Base+0xc0>
   26574:	mov	ip, r1
   26578:	ldrb	r3, [ip, #1]!
   2657c:	cmp	r3, #32
   26580:	movhi	r0, ip
   26584:	bxhi	lr
   26588:	b	25fdc <flatcc_json_parser_space_ext@@Base>

0002658c <flatcc_json_parser_match_constant@@Base>:
   2658c:	push	{r4, r5, fp, lr}
   26590:	add	fp, sp, #8
   26594:	sub	r4, r2, r1
   26598:	ldr	r5, [fp, #8]
   2659c:	cmp	r4, r3
   265a0:	ble	2660c <flatcc_json_parser_match_constant@@Base+0x80>
   265a4:	add	ip, r1, r3
   265a8:	ldrb	r4, [ip]
   265ac:	cmp	r4, #92	; 0x5c
   265b0:	beq	2661c <flatcc_json_parser_match_constant@@Base+0x90>
   265b4:	cmp	r4, #34	; 0x22
   265b8:	beq	265f4 <flatcc_json_parser_match_constant@@Base+0x68>
   265bc:	cmp	r4, #32
   265c0:	bne	2660c <flatcc_json_parser_match_constant@@Base+0x80>
   265c4:	add	r1, r1, r3
   265c8:	add	ip, r1, #1
   265cc:	mov	r1, ip
   265d0:	cmp	r2, ip
   265d4:	beq	2660c <flatcc_json_parser_match_constant@@Base+0x80>
   265d8:	mov	ip, r1
   265dc:	ldrb	r3, [ip], #1
   265e0:	cmp	r3, #32
   265e4:	beq	265cc <flatcc_json_parser_match_constant@@Base+0x40>
   265e8:	ldrb	r2, [ip, #-1]!
   265ec:	cmp	r2, #34	; 0x22
   265f0:	bne	26634 <flatcc_json_parser_match_constant@@Base+0xa8>
   265f4:	add	r1, ip, #1
   265f8:	mov	r4, #0
   265fc:	mov	r2, #0
   26600:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26604:	str	r4, [r5]
   26608:	pop	{r4, r5, fp, pc}
   2660c:	mov	r0, #0
   26610:	str	r0, [r5]
   26614:	mov	r0, r1
   26618:	pop	{r4, r5, fp, pc}
   2661c:	mov	r1, #0
   26620:	str	r1, [r5]
   26624:	mov	r1, ip
   26628:	mov	r3, #18
   2662c:	pop	{r4, r5, fp, lr}
   26630:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26634:	mov	r0, #1
   26638:	b	26610 <flatcc_json_parser_match_constant@@Base+0x84>

0002663c <flatcc_json_parser_unmatched_symbol@@Base>:
   2663c:	push	{r4, r5, fp, lr}
   26640:	add	fp, sp, #8
   26644:	mov	r4, r2
   26648:	mov	r5, r0
   2664c:	ldrb	r0, [r0, #8]
   26650:	tst	r0, #1
   26654:	bne	2666c <flatcc_json_parser_unmatched_symbol@@Base+0x30>
   26658:	mov	r0, r5
   2665c:	mov	r2, r4
   26660:	mov	r3, #13
   26664:	pop	{r4, r5, fp, lr}
   26668:	b	25f60 <flatcc_json_parser_set_error@@Base>
   2666c:	mov	r0, r5
   26670:	mov	r2, r4
   26674:	bl	266d8 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   26678:	mov	r1, r0
   2667c:	mov	r0, r5
   26680:	mov	r2, r4
   26684:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26688:	mov	r1, r0
   2668c:	cmp	r0, r4
   26690:	beq	266c4 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   26694:	ldrb	r0, [r1]
   26698:	cmp	r0, #58	; 0x3a
   2669c:	bne	266c4 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   266a0:	add	r1, r1, #1
   266a4:	mov	r0, r5
   266a8:	mov	r2, r4
   266ac:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   266b0:	mov	r1, r0
   266b4:	mov	r0, r5
   266b8:	mov	r2, r4
   266bc:	pop	{r4, r5, fp, lr}
   266c0:	b	26738 <flatcc_json_parser_generic_json@@Base>
   266c4:	mov	r0, r5
   266c8:	mov	r2, r4
   266cc:	mov	r3, #4
   266d0:	pop	{r4, r5, fp, lr}
   266d4:	b	25f60 <flatcc_json_parser_set_error@@Base>
   266d8:	cmp	r1, r2
   266dc:	bne	266f0 <flatcc_json_parser_unmatched_symbol@@Base+0xb4>
   266e0:	b	26730 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   266e4:	add	r1, r1, #1
   266e8:	cmp	r1, r2
   266ec:	beq	26730 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   266f0:	ldrb	r3, [r1]
   266f4:	cmp	r3, #92	; 0x5c
   266f8:	beq	26708 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   266fc:	cmp	r3, #34	; 0x22
   26700:	bne	266e4 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   26704:	b	26728 <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   26708:	sub	r3, r2, r1
   2670c:	cmp	r3, #2
   26710:	blt	2671c <flatcc_json_parser_unmatched_symbol@@Base+0xe0>
   26714:	add	r1, r1, #1
   26718:	b	266e4 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   2671c:	ldrb	r3, [r1]
   26720:	cmp	r3, #34	; 0x22
   26724:	bne	26730 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   26728:	add	r0, r1, #1
   2672c:	bx	lr
   26730:	mov	r3, #20
   26734:	b	25f60 <flatcc_json_parser_set_error@@Base>

00026738 <flatcc_json_parser_generic_json@@Base>:
   26738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2673c:	add	fp, sp, #28
   26740:	sub	sp, sp, #532	; 0x214
   26744:	mov	r7, #0
   26748:	str	r7, [sp, #8]
   2674c:	cmp	r1, r2
   26750:	beq	26b34 <flatcc_json_parser_generic_json@@Base+0x3fc>
   26754:	mov	r4, r2
   26758:	mov	r5, r0
   2675c:	add	r8, sp, #16
   26760:	sub	r9, r8, #1
   26764:	add	sl, sp, #8
   26768:	mov	r0, r8
   2676c:	cmp	r7, #0
   26770:	beq	267dc <flatcc_json_parser_generic_json@@Base+0xa4>
   26774:	ldrb	r0, [r0, #-1]
   26778:	cmp	r0, #125	; 0x7d
   2677c:	bne	267dc <flatcc_json_parser_generic_json@@Base+0xa4>
   26780:	mov	r0, r5
   26784:	mov	r2, r4
   26788:	bl	26da8 <flatcc_json_parser_float@@Base+0x140>
   2678c:	mov	r1, r0
   26790:	mov	r0, r5
   26794:	mov	r2, r4
   26798:	bl	266d8 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   2679c:	mov	r1, r0
   267a0:	mov	r0, r5
   267a4:	mov	r2, r4
   267a8:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   267ac:	mov	r1, r0
   267b0:	cmp	r0, r4
   267b4:	beq	26b54 <flatcc_json_parser_generic_json@@Base+0x41c>
   267b8:	ldrb	r0, [r1]
   267bc:	cmp	r0, #58	; 0x3a
   267c0:	bne	26b64 <flatcc_json_parser_generic_json@@Base+0x42c>
   267c4:	add	r1, r1, #1
   267c8:	mov	r0, r5
   267cc:	mov	r2, r4
   267d0:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   267d4:	mov	r6, r0
   267d8:	b	267e0 <flatcc_json_parser_generic_json@@Base+0xa8>
   267dc:	mov	r6, r1
   267e0:	ldrb	r0, [r6]
   267e4:	sub	r0, r0, #34	; 0x22
   267e8:	cmp	r0, #89	; 0x59
   267ec:	bhi	26b40 <flatcc_json_parser_generic_json@@Base+0x408>
   267f0:	add	r1, pc, #0
   267f4:	ldr	pc, [r1, r0, lsl #2]
   267f8:	muleq	r2, r0, r9
   267fc:	andeq	r6, r2, r0, asr #22
   26800:	andeq	r6, r2, r0, asr #22
   26804:	andeq	r6, r2, r0, asr #22
   26808:	andeq	r6, r2, r0, asr #22
   2680c:	andeq	r6, r2, r0, asr #22
   26810:	andeq	r6, r2, r0, asr #22
   26814:	andeq	r6, r2, r0, asr #22
   26818:	andeq	r6, r2, r0, asr #22
   2681c:	andeq	r6, r2, r0, asr #22
   26820:	andeq	r6, r2, r0, asr #22
   26824:	andeq	r6, r2, r0, ror #18
   26828:	andeq	r6, r2, r0, asr #22
   2682c:	andeq	r6, r2, r0, asr #22
   26830:	andeq	r6, r2, r0, ror #18
   26834:	andeq	r6, r2, r0, ror #18
   26838:	andeq	r6, r2, r0, ror #18
   2683c:	andeq	r6, r2, r0, ror #18
   26840:	andeq	r6, r2, r0, ror #18
   26844:	andeq	r6, r2, r0, ror #18
   26848:	andeq	r6, r2, r0, ror #18
   2684c:	andeq	r6, r2, r0, ror #18
   26850:	andeq	r6, r2, r0, ror #18
   26854:	andeq	r6, r2, r0, ror #18
   26858:	andeq	r6, r2, r0, asr #22
   2685c:	andeq	r6, r2, r0, asr #22
   26860:	andeq	r6, r2, r0, asr #22
   26864:	andeq	r6, r2, r0, asr #22
   26868:	andeq	r6, r2, r0, asr #22
   2686c:	andeq	r6, r2, r0, asr #22
   26870:	andeq	r6, r2, r0, asr #22
   26874:	andeq	r6, r2, r0, asr #22
   26878:	andeq	r6, r2, r0, asr #22
   2687c:	andeq	r6, r2, r0, asr #22
   26880:	andeq	r6, r2, r0, asr #22
   26884:	andeq	r6, r2, r0, asr #22
   26888:	andeq	r6, r2, r0, asr #22
   2688c:	andeq	r6, r2, r0, asr #22
   26890:	andeq	r6, r2, r0, asr #22
   26894:	andeq	r6, r2, r0, asr #22
   26898:	andeq	r6, r2, r0, asr #22
   2689c:	andeq	r6, r2, r0, asr #22
   268a0:	andeq	r6, r2, r0, asr #22
   268a4:	andeq	r6, r2, r0, asr #22
   268a8:	andeq	r6, r2, r0, asr #22
   268ac:	andeq	r6, r2, r0, asr #22
   268b0:	andeq	r6, r2, r0, asr #22
   268b4:	andeq	r6, r2, r0, asr #22
   268b8:	andeq	r6, r2, r0, asr #22
   268bc:	andeq	r6, r2, r0, asr #22
   268c0:	andeq	r6, r2, r0, asr #22
   268c4:	andeq	r6, r2, r0, asr #22
   268c8:	andeq	r6, r2, r0, asr #22
   268cc:	andeq	r6, r2, r0, asr #22
   268d0:	andeq	r6, r2, r0, asr #22
   268d4:	andeq	r6, r2, r0, asr #22
   268d8:	andeq	r6, r2, r0, asr #22
   268dc:	andeq	r6, r2, r4, lsr #19
   268e0:	andeq	r6, r2, r0, asr #22
   268e4:	andeq	r6, r2, r0, asr #22
   268e8:	andeq	r6, r2, r0, asr #22
   268ec:	andeq	r6, r2, r0, asr #22
   268f0:	andeq	r6, r2, r0, asr #22
   268f4:	andeq	r6, r2, r0, asr #22
   268f8:	andeq	r6, r2, r0, asr #22
   268fc:	andeq	r6, r2, r0, asr #22
   26900:	andeq	r6, r2, r0, asr #22
   26904:	andeq	r6, r2, r0, asr #22
   26908:	andeq	r6, r2, r8, ror r9
   2690c:	andeq	r6, r2, r0, asr #22
   26910:	andeq	r6, r2, r0, asr #22
   26914:	andeq	r6, r2, r0, asr #22
   26918:	andeq	r6, r2, r0, asr #22
   2691c:	andeq	r6, r2, r0, asr #22
   26920:	andeq	r6, r2, r0, asr #22
   26924:	andeq	r6, r2, r0, asr #22
   26928:	andeq	r6, r2, r4, ror #19
   2692c:	andeq	r6, r2, r0, asr #22
   26930:	andeq	r6, r2, r0, asr #22
   26934:	andeq	r6, r2, r0, asr #22
   26938:	andeq	r6, r2, r0, asr #22
   2693c:	andeq	r6, r2, r0, asr #22
   26940:	andeq	r6, r2, r8, ror r9
   26944:	andeq	r6, r2, r0, asr #22
   26948:	andeq	r6, r2, r0, asr #22
   2694c:	andeq	r6, r2, r0, asr #22
   26950:	andeq	r6, r2, r0, asr #22
   26954:	andeq	r6, r2, r0, asr #22
   26958:	andeq	r6, r2, r0, asr #22
   2695c:	andeq	r6, r2, r0, lsl #20
   26960:	mov	r0, r5
   26964:	mov	r1, r6
   26968:	mov	r2, r4
   2696c:	bl	26e10 <flatcc_json_parser_float@@Base+0x1a8>
   26970:	mov	r1, r0
   26974:	b	26a98 <flatcc_json_parser_generic_json@@Base+0x360>
   26978:	mov	r0, r5
   2697c:	mov	r1, r6
   26980:	mov	r2, r4
   26984:	add	r3, sp, #7
   26988:	bl	27074 <flatcc_json_parser_float@@Base+0x40c>
   2698c:	b	269f0 <flatcc_json_parser_generic_json@@Base+0x2b8>
   26990:	mov	r0, r5
   26994:	mov	r1, r6
   26998:	mov	r2, r4
   2699c:	bl	26dd0 <flatcc_json_parser_float@@Base+0x168>
   269a0:	b	26a50 <flatcc_json_parser_generic_json@@Base+0x318>
   269a4:	cmp	r7, #512	; 0x200
   269a8:	beq	26b7c <flatcc_json_parser_generic_json@@Base+0x444>
   269ac:	mov	r0, #93	; 0x5d
   269b0:	strb	r0, [r8, r7]
   269b4:	add	r1, r6, #1
   269b8:	mov	r0, r5
   269bc:	mov	r2, r4
   269c0:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   269c4:	mov	r1, r0
   269c8:	add	r7, r7, #1
   269cc:	cmp	r0, r4
   269d0:	beq	26aec <flatcc_json_parser_generic_json@@Base+0x3b4>
   269d4:	ldrb	r0, [r1]
   269d8:	cmp	r0, #93	; 0x5d
   269dc:	beq	26a98 <flatcc_json_parser_generic_json@@Base+0x360>
   269e0:	b	26aec <flatcc_json_parser_generic_json@@Base+0x3b4>
   269e4:	mov	r0, r6
   269e8:	mov	r1, r4
   269ec:	bl	27128 <flatcc_json_parser_float@@Base+0x4c0>
   269f0:	mov	r1, r0
   269f4:	cmp	r6, r0
   269f8:	bne	26a98 <flatcc_json_parser_generic_json@@Base+0x360>
   269fc:	b	26b74 <flatcc_json_parser_generic_json@@Base+0x43c>
   26a00:	cmp	r7, #512	; 0x200
   26a04:	beq	26b7c <flatcc_json_parser_generic_json@@Base+0x444>
   26a08:	mov	r0, #125	; 0x7d
   26a0c:	strb	r0, [r8, r7]
   26a10:	add	r1, r6, #1
   26a14:	mov	r0, r5
   26a18:	mov	r2, r4
   26a1c:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   26a20:	mov	r1, r0
   26a24:	add	r7, r7, #1
   26a28:	cmp	r0, r4
   26a2c:	beq	26aec <flatcc_json_parser_generic_json@@Base+0x3b4>
   26a30:	ldrb	r0, [r1]
   26a34:	cmp	r0, #125	; 0x7d
   26a38:	beq	26a98 <flatcc_json_parser_generic_json@@Base+0x360>
   26a3c:	b	26aec <flatcc_json_parser_generic_json@@Base+0x3b4>
   26a40:	mov	r0, r5
   26a44:	mov	r2, r4
   26a48:	add	r3, sp, #12
   26a4c:	bl	260e0 <flatcc_json_parser_string_escape@@Base>
   26a50:	mov	r1, r0
   26a54:	cmp	r0, r4
   26a58:	ldrbne	r0, [r1]
   26a5c:	cmpne	r0, #34	; 0x22
   26a60:	beq	26a88 <flatcc_json_parser_generic_json@@Base+0x350>
   26a64:	mov	r0, r5
   26a68:	mov	r2, r4
   26a6c:	bl	25f98 <flatcc_json_parser_string_part@@Base>
   26a70:	mov	r1, r0
   26a74:	cmp	r0, r4
   26a78:	beq	26a40 <flatcc_json_parser_generic_json@@Base+0x308>
   26a7c:	ldrb	r0, [r1]
   26a80:	cmp	r0, #34	; 0x22
   26a84:	bne	26a40 <flatcc_json_parser_generic_json@@Base+0x308>
   26a88:	mov	r0, r5
   26a8c:	mov	r2, r4
   26a90:	bl	26df0 <flatcc_json_parser_float@@Base+0x188>
   26a94:	mov	r1, r0
   26a98:	cmp	r1, r4
   26a9c:	cmpne	r7, #0
   26aa0:	beq	26afc <flatcc_json_parser_generic_json@@Base+0x3c4>
   26aa4:	ldrb	r0, [r9, r7]
   26aa8:	cmp	r0, #93	; 0x5d
   26aac:	bne	26ac4 <flatcc_json_parser_generic_json@@Base+0x38c>
   26ab0:	mov	r0, r5
   26ab4:	mov	r2, r4
   26ab8:	mov	r3, sl
   26abc:	bl	27154 <flatcc_json_parser_float@@Base+0x4ec>
   26ac0:	b	26ad4 <flatcc_json_parser_generic_json@@Base+0x39c>
   26ac4:	mov	r0, r5
   26ac8:	mov	r2, r4
   26acc:	mov	r3, sl
   26ad0:	bl	27214 <flatcc_json_parser_float@@Base+0x5ac>
   26ad4:	mov	r1, r0
   26ad8:	sub	r7, r7, #1
   26adc:	ldr	r0, [sp, #8]
   26ae0:	cmp	r0, #0
   26ae4:	beq	26a98 <flatcc_json_parser_generic_json@@Base+0x360>
   26ae8:	add	r7, r7, #1
   26aec:	add	r0, r8, r7
   26af0:	cmp	r1, r4
   26af4:	bne	2676c <flatcc_json_parser_generic_json@@Base+0x34>
   26af8:	b	26b34 <flatcc_json_parser_generic_json@@Base+0x3fc>
   26afc:	cmp	r1, r4
   26b00:	bne	26b34 <flatcc_json_parser_generic_json@@Base+0x3fc>
   26b04:	cmp	r7, #0
   26b08:	beq	26b34 <flatcc_json_parser_generic_json@@Base+0x3fc>
   26b0c:	add	r0, sp, #16
   26b10:	add	r0, r0, r7
   26b14:	ldrb	r0, [r0, #-1]
   26b18:	mov	r3, #10
   26b1c:	cmp	r0, #93	; 0x5d
   26b20:	movweq	r3, #9
   26b24:	mov	r0, r5
   26b28:	mov	r2, r4
   26b2c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   26b30:	mov	r1, r0
   26b34:	mov	r0, r1
   26b38:	sub	sp, fp, #28
   26b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b40:	mov	r0, r5
   26b44:	mov	r1, r6
   26b48:	mov	r2, r4
   26b4c:	mov	r3, #5
   26b50:	b	26b2c <flatcc_json_parser_generic_json@@Base+0x3f4>
   26b54:	mov	r0, r5
   26b58:	mov	r2, r4
   26b5c:	mov	r3, #10
   26b60:	b	26b2c <flatcc_json_parser_generic_json@@Base+0x3f4>
   26b64:	mov	r0, r5
   26b68:	mov	r2, r4
   26b6c:	mov	r3, #4
   26b70:	b	26b2c <flatcc_json_parser_generic_json@@Base+0x3f4>
   26b74:	mov	r0, r5
   26b78:	b	26b48 <flatcc_json_parser_generic_json@@Base+0x410>
   26b7c:	mov	r0, r5
   26b80:	mov	r1, r6
   26b84:	mov	r2, r4
   26b88:	mov	r3, #2
   26b8c:	b	26b2c <flatcc_json_parser_generic_json@@Base+0x3f4>

00026b90 <flatcc_json_parser_double@@Base>:
   26b90:	push	{r4, r5, r6, r7, fp, lr}
   26b94:	add	fp, sp, #16
   26b98:	mov	r5, r1
   26b9c:	mov	r6, r0
   26ba0:	mov	r0, #0
   26ba4:	str	r0, [r3]
   26ba8:	str	r0, [r3, #4]
   26bac:	cmp	r1, r2
   26bb0:	beq	26c44 <flatcc_json_parser_double@@Base+0xb4>
   26bb4:	mov	r7, r3
   26bb8:	mov	r4, r2
   26bbc:	mov	r0, r5
   26bc0:	ldrb	r1, [r0], #1
   26bc4:	cmp	r1, #45	; 0x2d
   26bc8:	movne	r0, r5
   26bcc:	sub	r2, r2, r0
   26bd0:	cmp	r2, #2
   26bd4:	blt	26c00 <flatcc_json_parser_double@@Base+0x70>
   26bd8:	sub	r1, r1, #45	; 0x2d
   26bdc:	clz	r1, r1
   26be0:	lsr	r1, r1, #5
   26be4:	ldrb	r1, [r5, r1]
   26be8:	cmp	r1, #46	; 0x2e
   26bec:	beq	26c4c <flatcc_json_parser_double@@Base+0xbc>
   26bf0:	cmp	r1, #48	; 0x30
   26bf4:	ldrbeq	r0, [r0, #1]
   26bf8:	cmpeq	r0, #48	; 0x30
   26bfc:	beq	26c4c <flatcc_json_parser_double@@Base+0xbc>
   26c00:	sub	r1, r4, r5
   26c04:	mov	r0, r5
   26c08:	mov	r2, r7
   26c0c:	bl	26c64 <flatcc_json_parser_double@@Base+0xd4>
   26c10:	cmp	r0, #0
   26c14:	cmpne	r0, r5
   26c18:	popne	{r4, r5, r6, r7, fp, pc}
   26c1c:	vldr	d0, [r7]
   26c20:	bl	14e84 <__isinf@plt>
   26c24:	cmp	r0, #0
   26c28:	beq	26c4c <flatcc_json_parser_double@@Base+0xbc>
   26c2c:	mov	r0, r6
   26c30:	mov	r1, r5
   26c34:	mov	r2, r4
   26c38:	mov	r3, #7
   26c3c:	pop	{r4, r5, r6, r7, fp, lr}
   26c40:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26c44:	mov	r0, r5
   26c48:	pop	{r4, r5, r6, r7, fp, pc}
   26c4c:	mov	r0, r6
   26c50:	mov	r1, r5
   26c54:	mov	r2, r4
   26c58:	mov	r3, #6
   26c5c:	pop	{r4, r5, r6, r7, fp, lr}
   26c60:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26c64:	b	285c0 <flatcc_json_parser_struct_as_root@@Base+0xbc>

00026c68 <flatcc_json_parser_float@@Base>:
   26c68:	push	{r4, r5, r6, r7, fp, lr}
   26c6c:	add	fp, sp, #16
   26c70:	mov	r5, r1
   26c74:	mov	r6, r0
   26c78:	mov	r0, #0
   26c7c:	str	r0, [r3]
   26c80:	cmp	r1, r2
   26c84:	beq	26d18 <flatcc_json_parser_float@@Base+0xb0>
   26c88:	mov	r7, r3
   26c8c:	mov	r4, r2
   26c90:	mov	r0, r5
   26c94:	ldrb	r1, [r0], #1
   26c98:	cmp	r1, #45	; 0x2d
   26c9c:	movne	r0, r5
   26ca0:	sub	r2, r2, r0
   26ca4:	cmp	r2, #2
   26ca8:	blt	26cd4 <flatcc_json_parser_float@@Base+0x6c>
   26cac:	sub	r1, r1, #45	; 0x2d
   26cb0:	clz	r1, r1
   26cb4:	lsr	r1, r1, #5
   26cb8:	ldrb	r1, [r5, r1]
   26cbc:	cmp	r1, #46	; 0x2e
   26cc0:	beq	26d20 <flatcc_json_parser_float@@Base+0xb8>
   26cc4:	cmp	r1, #48	; 0x30
   26cc8:	ldrbeq	r0, [r0, #1]
   26ccc:	cmpeq	r0, #48	; 0x30
   26cd0:	beq	26d20 <flatcc_json_parser_float@@Base+0xb8>
   26cd4:	sub	r1, r4, r5
   26cd8:	mov	r0, r5
   26cdc:	mov	r2, r7
   26ce0:	bl	26d38 <flatcc_json_parser_float@@Base+0xd0>
   26ce4:	cmp	r0, #0
   26ce8:	cmpne	r0, r5
   26cec:	popne	{r4, r5, r6, r7, fp, pc}
   26cf0:	vldr	s0, [r7]
   26cf4:	bl	14e78 <__isinff@plt>
   26cf8:	cmp	r0, #0
   26cfc:	beq	26d20 <flatcc_json_parser_float@@Base+0xb8>
   26d00:	mov	r0, r6
   26d04:	mov	r1, r5
   26d08:	mov	r2, r4
   26d0c:	mov	r3, #7
   26d10:	pop	{r4, r5, r6, r7, fp, lr}
   26d14:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26d18:	mov	r0, r5
   26d1c:	pop	{r4, r5, r6, r7, fp, pc}
   26d20:	mov	r0, r6
   26d24:	mov	r1, r5
   26d28:	mov	r2, r4
   26d2c:	mov	r3, #6
   26d30:	pop	{r4, r5, r6, r7, fp, lr}
   26d34:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26d38:	push	{r4, r5, r6, sl, fp, lr}
   26d3c:	add	fp, sp, #16
   26d40:	vpush	{d8-d9}
   26d44:	sub	sp, sp, #8
   26d48:	mov	r4, r2
   26d4c:	mov	r5, r0
   26d50:	mov	r2, sp
   26d54:	bl	26c64 <flatcc_json_parser_double@@Base+0xd4>
   26d58:	mov	r6, r0
   26d5c:	vldr	d16, [sp]
   26d60:	add	r0, pc, #56	; 0x38
   26d64:	vcmpe.f64	d16, #0.0
   26d68:	vmrs	APSR_nzcv, fpscr
   26d6c:	addmi	r0, r0, #4
   26d70:	vcvt.f32.f64	s16, d16
   26d74:	vldr	s18, [r0]
   26d78:	vmov.f32	s0, s16
   26d7c:	bl	14e78 <__isinff@plt>
   26d80:	cmp	r0, #0
   26d84:	vseleq.f32	s0, s16, s18
   26d88:	vstr	s0, [r4]
   26d8c:	movne	r6, r5
   26d90:	mov	r0, r6
   26d94:	sub	sp, fp, #32
   26d98:	vpop	{d8-d9}
   26d9c:	pop	{r4, r5, r6, sl, fp, pc}
   26da0:	svcvc	0x00800000
   26da4:			; <UNDEFINED> instruction: 0xff800000
   26da8:	cmp	r1, r2
   26dac:	beq	26dc0 <flatcc_json_parser_float@@Base+0x158>
   26db0:	ldrb	r3, [r1]
   26db4:	cmp	r3, #34	; 0x22
   26db8:	bne	26dc8 <flatcc_json_parser_float@@Base+0x160>
   26dbc:	add	r1, r1, #1
   26dc0:	mov	r0, r1
   26dc4:	bx	lr
   26dc8:	mov	r3, #5
   26dcc:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26dd0:	cmp	r1, r2
   26dd4:	beq	26de8 <flatcc_json_parser_float@@Base+0x180>
   26dd8:	ldrb	r3, [r1]
   26ddc:	cmp	r3, #34	; 0x22
   26de0:	addeq	r0, r1, #1
   26de4:	bxeq	lr
   26de8:	mov	r3, #16
   26dec:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26df0:	cmp	r1, r2
   26df4:	beq	26e08 <flatcc_json_parser_float@@Base+0x1a0>
   26df8:	ldrb	r3, [r1]
   26dfc:	cmp	r3, #34	; 0x22
   26e00:	addeq	r0, r1, #1
   26e04:	bxeq	lr
   26e08:	mov	r3, #20
   26e0c:	b	25f60 <flatcc_json_parser_set_error@@Base>
   26e10:	push	{fp, lr}
   26e14:	mov	fp, sp
   26e18:	cmp	r1, r2
   26e1c:	beq	27054 <flatcc_json_parser_float@@Base+0x3ec>
   26e20:	ldrb	r3, [r1]
   26e24:	cmp	r3, #45	; 0x2d
   26e28:	bne	26e3c <flatcc_json_parser_float@@Base+0x1d4>
   26e2c:	add	r1, r1, #1
   26e30:	cmp	r1, r2
   26e34:	beq	27068 <flatcc_json_parser_float@@Base+0x400>
   26e38:	ldrb	r3, [r1]
   26e3c:	cmp	r3, #48	; 0x30
   26e40:	bne	26e54 <flatcc_json_parser_float@@Base+0x1ec>
   26e44:	add	r1, r1, #1
   26e48:	cmp	r1, r2
   26e4c:	bne	26e94 <flatcc_json_parser_float@@Base+0x22c>
   26e50:	b	26eec <flatcc_json_parser_float@@Base+0x284>
   26e54:	sub	r3, r3, #49	; 0x31
   26e58:	uxtb	r3, r3
   26e5c:	cmp	r3, #8
   26e60:	bhi	27068 <flatcc_json_parser_float@@Base+0x400>
   26e64:	add	ip, r1, #1
   26e68:	mov	r1, ip
   26e6c:	cmp	r2, ip
   26e70:	beq	26e8c <flatcc_json_parser_float@@Base+0x224>
   26e74:	mov	ip, r1
   26e78:	ldrb	r3, [ip], #1
   26e7c:	sub	r3, r3, #48	; 0x30
   26e80:	uxtb	r3, r3
   26e84:	cmp	r3, #10
   26e88:	bcc	26e68 <flatcc_json_parser_float@@Base+0x200>
   26e8c:	cmp	r1, r2
   26e90:	beq	26eec <flatcc_json_parser_float@@Base+0x284>
   26e94:	ldrb	r3, [r1]
   26e98:	cmp	r3, #46	; 0x2e
   26e9c:	bne	26eec <flatcc_json_parser_float@@Base+0x284>
   26ea0:	mov	ip, r1
   26ea4:	ldrb	r3, [ip, #1]!
   26ea8:	sub	r3, r3, #48	; 0x30
   26eac:	uxtb	r3, r3
   26eb0:	cmp	r3, #10
   26eb4:	bcc	26ec0 <flatcc_json_parser_float@@Base+0x258>
   26eb8:	mov	r1, ip
   26ebc:	b	27068 <flatcc_json_parser_float@@Base+0x400>
   26ec0:	add	r1, r1, #2
   26ec4:	cmp	r1, r2
   26ec8:	beq	26eec <flatcc_json_parser_float@@Base+0x284>
   26ecc:	ldrb	r3, [r1]
   26ed0:	sub	r3, r3, #48	; 0x30
   26ed4:	uxtb	r3, r3
   26ed8:	cmp	r3, #9
   26edc:	bhi	26eec <flatcc_json_parser_float@@Base+0x284>
   26ee0:	add	r1, r1, #1
   26ee4:	cmp	r2, r1
   26ee8:	bne	26ecc <flatcc_json_parser_float@@Base+0x264>
   26eec:	cmp	r1, r2
   26ef0:	beq	26f6c <flatcc_json_parser_float@@Base+0x304>
   26ef4:	ldrb	r3, [r1]
   26ef8:	orr	r3, r3, #32
   26efc:	cmp	r3, #101	; 0x65
   26f00:	bne	26f6c <flatcc_json_parser_float@@Base+0x304>
   26f04:	add	r3, r1, #1
   26f08:	cmp	r3, r2
   26f0c:	beq	26f3c <flatcc_json_parser_float@@Base+0x2d4>
   26f10:	ldrb	ip, [r3]
   26f14:	cmp	ip, #45	; 0x2d
   26f18:	cmpne	ip, #43	; 0x2b
   26f1c:	addeq	r3, r1, #2
   26f20:	cmp	r3, r2
   26f24:	beq	26f3c <flatcc_json_parser_float@@Base+0x2d4>
   26f28:	ldrb	r1, [r3]
   26f2c:	sub	r1, r1, #48	; 0x30
   26f30:	uxtb	r1, r1
   26f34:	cmp	r1, #9
   26f38:	bls	26f44 <flatcc_json_parser_float@@Base+0x2dc>
   26f3c:	mov	r1, r3
   26f40:	b	27068 <flatcc_json_parser_float@@Base+0x400>
   26f44:	add	ip, r3, #1
   26f48:	mov	r1, ip
   26f4c:	cmp	r2, ip
   26f50:	beq	26f6c <flatcc_json_parser_float@@Base+0x304>
   26f54:	mov	ip, r1
   26f58:	ldrb	r3, [ip], #1
   26f5c:	sub	r3, r3, #48	; 0x30
   26f60:	uxtb	r3, r3
   26f64:	cmp	r3, #10
   26f68:	bcc	26f48 <flatcc_json_parser_float@@Base+0x2e0>
   26f6c:	cmp	r1, r2
   26f70:	beq	27068 <flatcc_json_parser_float@@Base+0x400>
   26f74:	ldrb	ip, [r1]
   26f78:	sub	lr, ip, #9
   26f7c:	cmp	lr, #49	; 0x31
   26f80:	bhi	2705c <flatcc_json_parser_float@@Base+0x3f4>
   26f84:	add	r3, pc, #0
   26f88:	ldr	pc, [r3, lr, lsl #2]
   26f8c:	andeq	r7, r2, r4, asr r0
   26f90:	andeq	r7, r2, r4, asr r0
   26f94:	andeq	r7, r2, r4, asr r0
   26f98:	andeq	r7, r2, r8, rrx
   26f9c:	andeq	r7, r2, r4, asr r0
   26fa0:	andeq	r7, r2, r8, rrx
   26fa4:	andeq	r7, r2, r8, rrx
   26fa8:	andeq	r7, r2, r8, rrx
   26fac:	andeq	r7, r2, r8, rrx
   26fb0:	andeq	r7, r2, r8, rrx
   26fb4:	andeq	r7, r2, r8, rrx
   26fb8:	andeq	r7, r2, r8, rrx
   26fbc:	andeq	r7, r2, r8, rrx
   26fc0:	andeq	r7, r2, r8, rrx
   26fc4:	andeq	r7, r2, r8, rrx
   26fc8:	andeq	r7, r2, r8, rrx
   26fcc:	andeq	r7, r2, r8, rrx
   26fd0:	andeq	r7, r2, r8, rrx
   26fd4:	andeq	r7, r2, r8, rrx
   26fd8:	andeq	r7, r2, r8, rrx
   26fdc:	andeq	r7, r2, r8, rrx
   26fe0:	andeq	r7, r2, r8, rrx
   26fe4:	andeq	r7, r2, r8, rrx
   26fe8:	andeq	r7, r2, r4, asr r0
   26fec:	andeq	r7, r2, r8, rrx
   26ff0:	andeq	r7, r2, r8, rrx
   26ff4:	andeq	r7, r2, r8, rrx
   26ff8:	andeq	r7, r2, r8, rrx
   26ffc:	andeq	r7, r2, r8, rrx
   27000:	andeq	r7, r2, r8, rrx
   27004:	andeq	r7, r2, r8, rrx
   27008:	andeq	r7, r2, r8, rrx
   2700c:	andeq	r7, r2, r8, rrx
   27010:	andeq	r7, r2, r8, rrx
   27014:	andeq	r7, r2, r8, rrx
   27018:	andeq	r7, r2, r4, asr r0
   2701c:	andeq	r7, r2, r8, rrx
   27020:	andeq	r7, r2, r8, rrx
   27024:	andeq	r7, r2, r8, rrx
   27028:	andeq	r7, r2, r8, rrx
   2702c:	andeq	r7, r2, r8, rrx
   27030:	andeq	r7, r2, r8, rrx
   27034:	andeq	r7, r2, r8, rrx
   27038:	andeq	r7, r2, r8, rrx
   2703c:	andeq	r7, r2, r8, rrx
   27040:	andeq	r7, r2, r8, rrx
   27044:	andeq	r7, r2, r8, rrx
   27048:	andeq	r7, r2, r8, rrx
   2704c:	andeq	r7, r2, r8, rrx
   27050:	andeq	r7, r2, r4, asr r0
   27054:	mov	r0, r1
   27058:	pop	{fp, pc}
   2705c:	cmp	ip, #93	; 0x5d
   27060:	cmpne	ip, #125	; 0x7d
   27064:	beq	27054 <flatcc_json_parser_float@@Base+0x3ec>
   27068:	mov	r3, #6
   2706c:	pop	{fp, lr}
   27070:	b	25f60 <flatcc_json_parser_set_error@@Base>
   27074:	push	{r4, r5, r6, r7, fp, lr}
   27078:	add	fp, sp, #16
   2707c:	sub	sp, sp, #8
   27080:	mov	r4, r3
   27084:	mov	r6, r2
   27088:	mov	r5, r1
   2708c:	mov	r7, r0
   27090:	sub	r0, r2, r1
   27094:	cmp	r0, #4
   27098:	blt	270d4 <flatcc_json_parser_float@@Base+0x46c>
   2709c:	ldr	r1, [r5]
   270a0:	movw	r2, #29300	; 0x7274
   270a4:	movt	r2, #25973	; 0x6575
   270a8:	cmp	r1, r2
   270ac:	beq	27100 <flatcc_json_parser_float@@Base+0x498>
   270b0:	cmp	r0, #5
   270b4:	blt	270d4 <flatcc_json_parser_float@@Base+0x46c>
   270b8:	movw	r1, #16233	; 0x3f69
   270bc:	movt	r1, #3
   270c0:	mov	r0, r5
   270c4:	mov	r2, #5
   270c8:	bl	14e6c <memcmp@plt>
   270cc:	cmp	r0, #0
   270d0:	beq	27114 <flatcc_json_parser_float@@Base+0x4ac>
   270d4:	add	r3, sp, #7
   270d8:	mov	r0, r7
   270dc:	mov	r1, r5
   270e0:	mov	r2, r6
   270e4:	bl	27c94 <flatcc_json_parser_union_type@@Base+0x1a8>
   270e8:	ldrb	r1, [sp, #7]
   270ec:	cmp	r1, #0
   270f0:	movwne	r1, #1
   270f4:	strb	r1, [r4]
   270f8:	sub	sp, fp, #16
   270fc:	pop	{r4, r5, r6, r7, fp, pc}
   27100:	mov	r0, #1
   27104:	strb	r0, [r4]
   27108:	add	r0, r5, #4
   2710c:	sub	sp, fp, #16
   27110:	pop	{r4, r5, r6, r7, fp, pc}
   27114:	mov	r0, #0
   27118:	strb	r0, [r4]
   2711c:	add	r0, r5, #5
   27120:	sub	sp, fp, #16
   27124:	pop	{r4, r5, r6, r7, fp, pc}
   27128:	sub	r1, r1, r0
   2712c:	cmp	r1, #4
   27130:	bxlt	lr
   27134:	mov	r1, r0
   27138:	ldr	r2, [r1], #4
   2713c:	movw	r3, #30062	; 0x756e
   27140:	movt	r3, #27756	; 0x6c6c
   27144:	cmp	r2, r3
   27148:	movne	r1, r0
   2714c:	mov	r0, r1
   27150:	bx	lr
   27154:	push	{r4, r5, r6, sl, fp, lr}
   27158:	add	fp, sp, #16
   2715c:	mov	r6, r3
   27160:	mov	r4, r2
   27164:	mov	r5, r0
   27168:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   2716c:	mov	r1, r0
   27170:	cmp	r0, r4
   27174:	beq	271b8 <flatcc_json_parser_float@@Base+0x550>
   27178:	ldrb	r0, [r1]
   2717c:	cmp	r0, #44	; 0x2c
   27180:	bne	271c0 <flatcc_json_parser_float@@Base+0x558>
   27184:	add	r1, r1, #1
   27188:	mov	r0, r5
   2718c:	mov	r2, r4
   27190:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   27194:	mov	r1, r0
   27198:	cmp	r0, r4
   2719c:	beq	271e8 <flatcc_json_parser_float@@Base+0x580>
   271a0:	ldrb	r0, [r1]
   271a4:	cmp	r0, #93	; 0x5d
   271a8:	bne	27204 <flatcc_json_parser_float@@Base+0x59c>
   271ac:	mov	r0, #0
   271b0:	str	r0, [r6]
   271b4:	b	271d4 <flatcc_json_parser_float@@Base+0x56c>
   271b8:	mov	r0, #0
   271bc:	b	27208 <flatcc_json_parser_float@@Base+0x5a0>
   271c0:	mov	r0, #0
   271c4:	str	r0, [r6]
   271c8:	ldrb	r0, [r1]
   271cc:	cmp	r0, #93	; 0x5d
   271d0:	bne	271f0 <flatcc_json_parser_float@@Base+0x588>
   271d4:	add	r1, r1, #1
   271d8:	mov	r0, r5
   271dc:	mov	r2, r4
   271e0:	pop	{r4, r5, r6, sl, fp, lr}
   271e4:	b	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   271e8:	mov	r0, #0
   271ec:	str	r0, [r6]
   271f0:	mov	r0, r5
   271f4:	mov	r2, r4
   271f8:	mov	r3, #9
   271fc:	pop	{r4, r5, r6, sl, fp, lr}
   27200:	b	25f60 <flatcc_json_parser_set_error@@Base>
   27204:	mov	r0, #1
   27208:	str	r0, [r6]
   2720c:	mov	r0, r1
   27210:	pop	{r4, r5, r6, sl, fp, pc}
   27214:	push	{r4, r5, r6, sl, fp, lr}
   27218:	add	fp, sp, #16
   2721c:	mov	r6, r3
   27220:	mov	r4, r2
   27224:	mov	r5, r0
   27228:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   2722c:	mov	r1, r0
   27230:	cmp	r0, r4
   27234:	beq	27278 <flatcc_json_parser_float@@Base+0x610>
   27238:	ldrb	r0, [r1]
   2723c:	cmp	r0, #44	; 0x2c
   27240:	bne	27280 <flatcc_json_parser_float@@Base+0x618>
   27244:	add	r1, r1, #1
   27248:	mov	r0, r5
   2724c:	mov	r2, r4
   27250:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   27254:	mov	r1, r0
   27258:	cmp	r0, r4
   2725c:	beq	272a8 <flatcc_json_parser_float@@Base+0x640>
   27260:	ldrb	r0, [r1]
   27264:	cmp	r0, #125	; 0x7d
   27268:	bne	272c4 <flatcc_json_parser_float@@Base+0x65c>
   2726c:	mov	r0, #0
   27270:	str	r0, [r6]
   27274:	b	27294 <flatcc_json_parser_float@@Base+0x62c>
   27278:	mov	r0, #0
   2727c:	b	272c8 <flatcc_json_parser_float@@Base+0x660>
   27280:	mov	r0, #0
   27284:	str	r0, [r6]
   27288:	ldrb	r0, [r1]
   2728c:	cmp	r0, #125	; 0x7d
   27290:	bne	272b0 <flatcc_json_parser_float@@Base+0x648>
   27294:	add	r1, r1, #1
   27298:	mov	r0, r5
   2729c:	mov	r2, r4
   272a0:	pop	{r4, r5, r6, sl, fp, lr}
   272a4:	b	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   272a8:	mov	r0, #0
   272ac:	str	r0, [r6]
   272b0:	mov	r0, r5
   272b4:	mov	r2, r4
   272b8:	mov	r3, #10
   272bc:	pop	{r4, r5, r6, sl, fp, lr}
   272c0:	b	25f60 <flatcc_json_parser_set_error@@Base>
   272c4:	mov	r0, #1
   272c8:	str	r0, [r6]
   272cc:	mov	r0, r1
   272d0:	pop	{r4, r5, r6, sl, fp, pc}

000272d4 <flatcc_json_parser_integer@@Base>:
   272d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   272d8:	add	fp, sp, #24
   272dc:	cmp	r1, r2
   272e0:	moveq	r0, r1
   272e4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   272e8:	ldr	lr, [fp, #8]
   272ec:	ldrb	r7, [r1]
   272f0:	sub	r7, r7, #45	; 0x2d
   272f4:	clz	r7, r7
   272f8:	lsr	r7, r7, #5
   272fc:	str	r7, [r3]
   27300:	add	ip, r1, r7
   27304:	mov	r4, #0
   27308:	cmp	ip, r2
   2730c:	beq	273a4 <flatcc_json_parser_integer@@Base+0xd0>
   27310:	mov	r8, #10
   27314:	mov	r9, #0
   27318:	ldrb	r5, [ip]
   2731c:	sub	r7, r5, #48	; 0x30
   27320:	uxtb	r7, r7
   27324:	cmp	r7, #9
   27328:	bhi	273c8 <flatcc_json_parser_integer@@Base+0xf4>
   2732c:	add	r7, r9, r9, lsl #2
   27330:	lsl	r6, r7, #1
   27334:	umlal	r5, r6, r4, r8
   27338:	subs	r7, r5, #48	; 0x30
   2733c:	sbc	r5, r6, #0
   27340:	subs	r4, r7, r4
   27344:	sbcs	r4, r5, r9
   27348:	bcc	273d8 <flatcc_json_parser_integer@@Base+0x104>
   2734c:	add	ip, ip, #1
   27350:	cmp	r2, ip
   27354:	mov	r4, r7
   27358:	mov	r9, r5
   2735c:	bne	27318 <flatcc_json_parser_integer@@Base+0x44>
   27360:	mov	r3, #0
   27364:	mov	r4, r7
   27368:	mov	r9, r5
   2736c:	cmp	ip, r1
   27370:	beq	273b4 <flatcc_json_parser_integer@@Base+0xe0>
   27374:	cmp	r3, #0
   27378:	beq	273bc <flatcc_json_parser_integer@@Base+0xe8>
   2737c:	ldrb	r1, [ip]
   27380:	cmp	r1, #46	; 0x2e
   27384:	beq	27394 <flatcc_json_parser_integer@@Base+0xc0>
   27388:	cmp	r1, #101	; 0x65
   2738c:	cmpne	r1, #69	; 0x45
   27390:	bne	273bc <flatcc_json_parser_integer@@Base+0xe8>
   27394:	mov	r1, ip
   27398:	mov	r3, #12
   2739c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   273a0:	b	25f60 <flatcc_json_parser_set_error@@Base>
   273a4:	mov	r9, #0
   273a8:	mov	r3, #0
   273ac:	cmp	ip, r1
   273b0:	bne	27374 <flatcc_json_parser_integer@@Base+0xa0>
   273b4:	mov	r0, ip
   273b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   273bc:	stm	lr, {r4, r9}
   273c0:	mov	r0, ip
   273c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   273c8:	mov	r3, #1
   273cc:	cmp	ip, r1
   273d0:	bne	27374 <flatcc_json_parser_integer@@Base+0xa0>
   273d4:	b	273b4 <flatcc_json_parser_integer@@Base+0xe0>
   273d8:	mov	lr, #8
   273dc:	cmp	r3, #0
   273e0:	movweq	lr, #7
   273e4:	mov	r1, ip
   273e8:	mov	r3, lr
   273ec:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   273f0:	b	25f60 <flatcc_json_parser_set_error@@Base>

000273f4 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   273f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273f8:	add	fp, sp, #28
   273fc:	sub	sp, sp, #20
   27400:	mov	r8, r3
   27404:	mov	r4, r2
   27408:	mov	r5, r0
   2740c:	bl	26dd0 <flatcc_json_parser_float@@Base+0x168>
   27410:	mov	r6, r0
   27414:	mov	r0, r5
   27418:	mov	r1, r6
   2741c:	mov	r2, r4
   27420:	bl	25f98 <flatcc_json_parser_string_part@@Base>
   27424:	mov	r7, r0
   27428:	ldr	sl, [fp, #8]
   2742c:	cmp	sl, #0
   27430:	mov	r9, sl
   27434:	movwne	r9, #1
   27438:	cmp	r0, r4
   2743c:	beq	27534 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   27440:	ldrb	r0, [r7]
   27444:	cmp	r0, #34	; 0x22
   27448:	bne	27534 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   2744c:	sub	r0, r7, r6
   27450:	str	r0, [sp, #4]
   27454:	bl	27560 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   27458:	str	r0, [sp, #8]
   2745c:	ldr	r0, [r5]
   27460:	mov	r1, #1
   27464:	mov	r2, #1
   27468:	mvn	r3, #0
   2746c:	bl	223f4 <flatcc_builder_start_vector@@Base>
   27470:	cmp	r0, #0
   27474:	beq	27494 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   27478:	mov	r0, #0
   2747c:	str	r0, [r8]
   27480:	mov	r0, r5
   27484:	mov	r1, r7
   27488:	mov	r2, r4
   2748c:	mov	r3, #33	; 0x21
   27490:	b	27554 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   27494:	ldr	r0, [r5]
   27498:	ldr	r1, [sp, #8]
   2749c:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   274a0:	cmp	r0, #0
   274a4:	beq	27478 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   274a8:	ldr	r1, [sp, #8]
   274ac:	str	r1, [sp, #16]
   274b0:	ldr	r1, [sp, #4]
   274b4:	str	r1, [sp, #12]
   274b8:	str	r9, [sp]
   274bc:	add	r2, sp, #16
   274c0:	add	r3, sp, #12
   274c4:	mov	r1, r6
   274c8:	bl	2758c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   274cc:	ldr	r1, [sp, #12]
   274d0:	cmp	r0, #0
   274d4:	bne	27530 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   274d8:	ldmib	sp, {r0, r2}
   274dc:	cmp	r1, r0
   274e0:	bne	27530 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   274e4:	ldr	r0, [sp, #16]
   274e8:	cmp	r2, r0
   274ec:	bls	27504 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x110>
   274f0:	sub	r1, r2, r0
   274f4:	ldr	r0, [r5]
   274f8:	bl	22254 <flatcc_builder_truncate_vector@@Base>
   274fc:	cmp	r0, #0
   27500:	bne	27478 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27504:	ldr	r0, [r5]
   27508:	bl	23044 <flatcc_builder_end_vector@@Base>
   2750c:	str	r0, [r8]
   27510:	cmp	r0, #0
   27514:	beq	27478 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27518:	mov	r0, r5
   2751c:	mov	r1, r7
   27520:	mov	r2, r4
   27524:	bl	26df0 <flatcc_json_parser_float@@Base+0x188>
   27528:	sub	sp, fp, #28
   2752c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27530:	add	r7, r6, r1
   27534:	mov	r0, #0
   27538:	str	r0, [r8]
   2753c:	mov	r3, #31
   27540:	cmp	sl, #0
   27544:	movwne	r3, #32
   27548:	mov	r0, r5
   2754c:	mov	r1, r7
   27550:	mov	r2, r4
   27554:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   27558:	sub	sp, fp, #28
   2755c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27560:	and	r1, r0, #3
   27564:	lsr	r0, r0, #2
   27568:	add	r0, r0, r0, lsl #1
   2756c:	cmp	r1, #2
   27570:	beq	27584 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   27574:	cmp	r1, #3
   27578:	addeq	r0, r0, #2
   2757c:	bxeq	lr
   27580:	bx	lr
   27584:	add	r0, r0, #1
   27588:	bx	lr
   2758c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27590:	add	fp, sp, #28
   27594:	sub	sp, sp, #4
   27598:	ldr	r7, [fp, #8]
   2759c:	cmp	r3, #0
   275a0:	ldrne	lr, [r3]
   275a4:	mvneq	lr, #0
   275a8:	and	r5, r7, #32
   275ac:	bic	r4, r7, #224	; 0xe0
   275b0:	cmp	r4, #1
   275b4:	beq	275d8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   275b8:	mov	ip, #3
   275bc:	cmp	r4, #0
   275c0:	bne	27608 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   275c4:	movw	r4, #25216	; 0x6280
   275c8:	movt	r4, #3
   275cc:	movw	ip, #25728	; 0x6480
   275d0:	movt	ip, #3
   275d4:	b	275e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   275d8:	movw	r4, #25472	; 0x6380
   275dc:	movt	r4, #3
   275e0:	movw	ip, #25984	; 0x6580
   275e4:	movt	ip, #3
   275e8:	cmp	r5, #0
   275ec:	moveq	ip, r4
   275f0:	cmp	r2, #0
   275f4:	beq	27610 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   275f8:	ldr	r9, [r2]
   275fc:	cmp	r9, #0
   27600:	mvneq	r9, #0
   27604:	b	27614 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x220>
   27608:	mov	r8, r0
   2760c:	b	27784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   27610:	mvn	r9, #0
   27614:	mov	r6, sp
   27618:	mov	r8, r0
   2761c:	mov	r7, #0
   27620:	mov	r5, lr
   27624:	cmp	r5, r7
   27628:	beq	276b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   2762c:	ldrb	r4, [r1, r7]
   27630:	ldrb	r4, [ip, r4]
   27634:	strb	r4, [r6, r7]
   27638:	cmp	r4, #64	; 0x40
   2763c:	bcc	27654 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   27640:	cmp	r4, #65	; 0x41
   27644:	bne	276fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x308>
   27648:	sub	r7, r7, #1
   2764c:	sub	r5, r5, #1
   27650:	add	r1, r1, #1
   27654:	add	r7, r7, #1
   27658:	cmp	r7, #4
   2765c:	bcc	27624 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   27660:	cmp	r9, #3
   27664:	bcc	277ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   27668:	ldrb	lr, [sp]
   2766c:	ldrb	r4, [sp, #1]
   27670:	lsr	r7, r4, #4
   27674:	orr	r7, r7, lr, lsl #2
   27678:	strb	r7, [r8]
   2767c:	ldrb	r7, [sp, #2]
   27680:	lsr	r7, r7, #2
   27684:	orr	r7, r7, r4, lsl #4
   27688:	strb	r7, [r8, #1]
   2768c:	ldrb	r7, [sp, #2]
   27690:	ldrb	r4, [sp, #3]
   27694:	orr	r7, r4, r7, lsl #6
   27698:	strb	r7, [r8, #2]
   2769c:	sub	lr, r5, #4
   276a0:	subs	r9, r9, #3
   276a4:	add	r1, r1, #4
   276a8:	add	r8, r8, #3
   276ac:	bne	2761c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   276b0:	b	27780 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   276b4:	mov	r4, r7
   276b8:	cmp	r7, #0
   276bc:	beq	2777c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x388>
   276c0:	cmp	r7, #3
   276c4:	beq	2773c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   276c8:	mov	ip, #4
   276cc:	cmp	r7, #2
   276d0:	bne	27784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   276d4:	ldrb	r1, [sp, #1]
   276d8:	ands	r7, r1, #15
   276dc:	mov	ip, #1
   276e0:	movwne	ip, #5
   276e4:	bne	27784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   276e8:	ldrb	r7, [sp]
   276ec:	lsl	r7, r7, #2
   276f0:	orr	r1, r7, r1, lsr #4
   276f4:	strb	r1, [r8], #1
   276f8:	b	2777c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x388>
   276fc:	cmp	r4, #66	; 0x42
   27700:	mov	r4, r7
   27704:	bne	276b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   27708:	add	r6, r7, #1
   2770c:	mov	r4, r6
   27710:	cmp	r6, r5
   27714:	bcs	276b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   27718:	cmp	r4, #7
   2771c:	ldrbls	r6, [r1, r4]
   27720:	ldrbls	r6, [ip, r6]
   27724:	subls	r6, r6, #65	; 0x41
   27728:	uxtbls	sl, r6
   2772c:	addls	r6, r4, #1
   27730:	cmpls	sl, #2
   27734:	bcc	2770c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x318>
   27738:	b	276b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   2773c:	mov	ip, #5
   27740:	ldrb	r1, [sp, #2]
   27744:	tst	r1, #3
   27748:	bne	27784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   2774c:	mov	ip, #1
   27750:	cmp	r9, #2
   27754:	bcc	27784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   27758:	ldrb	ip, [sp]
   2775c:	ldrb	r6, [sp, #1]
   27760:	lsl	r7, r6, #4
   27764:	orr	r1, r7, r1, lsr #2
   27768:	strb	r1, [r8, #1]
   2776c:	lsr	r1, r6, #4
   27770:	orr	r1, r1, ip, lsl #2
   27774:	strb	r1, [r8]
   27778:	add	r8, r8, #2
   2777c:	sub	lr, r5, r4
   27780:	mov	ip, #0
   27784:	cmp	r2, #0
   27788:	subne	r0, r8, r0
   2778c:	strne	r0, [r2]
   27790:	cmp	r3, #0
   27794:	ldrne	r0, [r3]
   27798:	subne	r0, r0, lr
   2779c:	strne	r0, [r3]
   277a0:	mov	r0, ip
   277a4:	sub	sp, fp, #28
   277a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   277ac:	mov	ip, #1
   277b0:	b	27784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>

000277b4 <flatcc_json_parser_build_string@@Base>:
   277b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277b8:	add	fp, sp, #28
   277bc:	sub	sp, sp, #4
   277c0:	mov	r9, r3
   277c4:	mov	sl, r2
   277c8:	mov	r6, r0
   277cc:	bl	26dd0 <flatcc_json_parser_float@@Base+0x168>
   277d0:	mov	r4, r0
   277d4:	mov	r0, r6
   277d8:	mov	r1, r4
   277dc:	mov	r2, sl
   277e0:	bl	25f98 <flatcc_json_parser_string_part@@Base>
   277e4:	mov	r5, r0
   277e8:	cmp	r0, sl
   277ec:	beq	27810 <flatcc_json_parser_build_string@@Base+0x5c>
   277f0:	ldrb	r0, [r5]
   277f4:	cmp	r0, #34	; 0x22
   277f8:	bne	27810 <flatcc_json_parser_build_string@@Base+0x5c>
   277fc:	sub	r2, r5, r4
   27800:	ldr	r0, [r6]
   27804:	mov	r1, r4
   27808:	bl	23b20 <flatcc_builder_create_string@@Base>
   2780c:	b	278d4 <flatcc_json_parser_build_string@@Base+0x120>
   27810:	ldr	r0, [r6]
   27814:	bl	2259c <flatcc_builder_start_string@@Base>
   27818:	cmp	r0, #0
   2781c:	beq	2782c <flatcc_json_parser_build_string@@Base+0x78>
   27820:	mov	r0, #0
   27824:	str	r0, [r9]
   27828:	b	278ec <flatcc_json_parser_build_string@@Base+0x138>
   2782c:	sub	r2, r5, r4
   27830:	ldr	r0, [r6]
   27834:	mov	r1, r4
   27838:	bl	22158 <flatcc_builder_append_string@@Base>
   2783c:	cmp	r0, #0
   27840:	beq	27820 <flatcc_json_parser_build_string@@Base+0x6c>
   27844:	cmp	r5, sl
   27848:	beq	278cc <flatcc_json_parser_build_string@@Base+0x118>
   2784c:	mov	r8, sp
   27850:	add	r4, r8, #1
   27854:	ldrb	r0, [r5]
   27858:	cmp	r0, #34	; 0x22
   2785c:	beq	278cc <flatcc_json_parser_build_string@@Base+0x118>
   27860:	mov	r0, r6
   27864:	mov	r1, r5
   27868:	mov	r2, sl
   2786c:	mov	r3, r8
   27870:	bl	260e0 <flatcc_json_parser_string_escape@@Base>
   27874:	mov	r7, r0
   27878:	ldr	r0, [r6]
   2787c:	ldrb	r2, [sp]
   27880:	mov	r1, r4
   27884:	bl	22158 <flatcc_builder_append_string@@Base>
   27888:	cmp	r0, #0
   2788c:	beq	278f8 <flatcc_json_parser_build_string@@Base+0x144>
   27890:	mov	r0, r6
   27894:	mov	r1, r7
   27898:	mov	r2, sl
   2789c:	bl	25f98 <flatcc_json_parser_string_part@@Base>
   278a0:	mov	r5, r0
   278a4:	cmp	r0, sl
   278a8:	beq	278c4 <flatcc_json_parser_build_string@@Base+0x110>
   278ac:	sub	r2, r5, r7
   278b0:	ldr	r0, [r6]
   278b4:	mov	r1, r7
   278b8:	bl	22158 <flatcc_builder_append_string@@Base>
   278bc:	cmp	r0, #0
   278c0:	beq	27820 <flatcc_json_parser_build_string@@Base+0x6c>
   278c4:	cmp	r5, sl
   278c8:	bne	27854 <flatcc_json_parser_build_string@@Base+0xa0>
   278cc:	ldr	r0, [r6]
   278d0:	bl	23c38 <flatcc_builder_end_string@@Base>
   278d4:	str	r0, [r9]
   278d8:	mov	r0, r6
   278dc:	mov	r1, r5
   278e0:	mov	r2, sl
   278e4:	bl	26df0 <flatcc_json_parser_float@@Base+0x188>
   278e8:	mov	r5, r0
   278ec:	mov	r0, r5
   278f0:	sub	sp, fp, #28
   278f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   278f8:	mov	r5, r7
   278fc:	b	27820 <flatcc_json_parser_build_string@@Base+0x6c>

00027900 <flatcc_json_parser_prepare_unions@@Base>:
   27900:	push	{r4, r5, r6, r7, fp, lr}
   27904:	add	fp, sp, #16
   27908:	mov	r5, r3
   2790c:	mov	r6, r2
   27910:	mov	r4, r1
   27914:	mov	r7, r0
   27918:	add	r0, r3, r3, lsl #1
   2791c:	mov	r1, #8
   27920:	add	r1, r1, r0, lsl #3
   27924:	ldr	r0, [r7]
   27928:	bl	213ac <flatcc_builder_enter_user_frame@@Base>
   2792c:	mov	r1, r0
   27930:	ldr	r0, [fp, #8]
   27934:	str	r1, [r0]
   27938:	cmp	r1, #0
   2793c:	beq	27954 <flatcc_json_parser_prepare_unions@@Base+0x54>
   27940:	ldr	r0, [r7]
   27944:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   27948:	str	r5, [r0]
   2794c:	mov	r0, r4
   27950:	pop	{r4, r5, r6, r7, fp, pc}
   27954:	mov	r0, r7
   27958:	mov	r1, r4
   2795c:	mov	r2, r6
   27960:	mov	r3, #33	; 0x21
   27964:	pop	{r4, r5, r6, r7, fp, lr}
   27968:	b	25f60 <flatcc_json_parser_set_error@@Base>

0002796c <flatcc_json_parser_finalize_unions@@Base>:
   2796c:	push	{r4, r5, r6, r7, fp, lr}
   27970:	add	fp, sp, #16
   27974:	mov	r4, r3
   27978:	mov	r7, r2
   2797c:	mov	r5, r1
   27980:	mov	r6, r0
   27984:	ldr	r0, [r0]
   27988:	mov	r1, r3
   2798c:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   27990:	ldr	r0, [r0, #4]
   27994:	cmp	r0, #0
   27998:	beq	279b4 <flatcc_json_parser_finalize_unions@@Base+0x48>
   2799c:	mov	r0, r6
   279a0:	mov	r1, r5
   279a4:	mov	r2, r7
   279a8:	mov	r3, #27
   279ac:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   279b0:	mov	r5, r0
   279b4:	ldr	r0, [r6]
   279b8:	mov	r1, r4
   279bc:	bl	21470 <flatcc_builder_exit_user_frame_at@@Base>
   279c0:	mov	r0, r5
   279c4:	pop	{r4, r5, r6, r7, fp, pc}

000279c8 <flatcc_json_parser_union@@Base>:
   279c8:	push	{r4, r5, r6, r7, fp, lr}
   279cc:	add	fp, sp, #16
   279d0:	sub	sp, sp, #16
   279d4:	mov	r7, r3
   279d8:	mov	r4, r2
   279dc:	mov	r6, r1
   279e0:	mov	r5, r0
   279e4:	ldr	r0, [r0]
   279e8:	ldr	r1, [fp, #12]
   279ec:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   279f0:	add	r2, r0, #8
   279f4:	add	r3, r7, r7, lsl #1
   279f8:	mov	r1, r2
   279fc:	ldr	r7, [r1, r3, lsl #3]!
   27a00:	cmp	r7, #0
   27a04:	beq	27a2c <flatcc_json_parser_union@@Base+0x64>
   27a08:	mov	r0, r5
   27a0c:	mov	r1, r6
   27a10:	mov	r2, r4
   27a14:	mov	r3, #28
   27a18:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   27a1c:	mov	r6, r0
   27a20:	mov	r0, r6
   27a24:	sub	sp, fp, #16
   27a28:	pop	{r4, r5, r6, r7, fp, pc}
   27a2c:	add	r2, r2, r3, lsl #3
   27a30:	ldrb	r3, [r2, #12]
   27a34:	cmp	r3, #0
   27a38:	beq	27aa4 <flatcc_json_parser_union@@Base+0xdc>
   27a3c:	ldrb	r3, [r2, #13]
   27a40:	strb	r3, [sp, #8]
   27a44:	cmp	r3, #0
   27a48:	beq	27ad8 <flatcc_json_parser_union@@Base+0x110>
   27a4c:	ldr	r7, [fp, #16]
   27a50:	ldr	r1, [r0, #4]
   27a54:	sub	r1, r1, #1
   27a58:	str	r1, [r0, #4]
   27a5c:	add	r0, sp, #8
   27a60:	add	r0, r0, #4
   27a64:	str	r0, [sp]
   27a68:	mov	r0, r5
   27a6c:	mov	r1, r6
   27a70:	mov	r2, r4
   27a74:	blx	r7
   27a78:	mov	r6, r0
   27a7c:	cmp	r0, r4
   27a80:	beq	27a20 <flatcc_json_parser_union@@Base+0x58>
   27a84:	ldr	r1, [fp, #8]
   27a88:	ldr	r0, [r5]
   27a8c:	ldr	r2, [sp, #8]
   27a90:	ldr	r3, [sp, #12]
   27a94:	bl	2330c <flatcc_builder_table_add_union@@Base>
   27a98:	cmp	r0, #0
   27a9c:	bne	27a08 <flatcc_json_parser_union@@Base+0x40>
   27aa0:	b	27a20 <flatcc_json_parser_union@@Base+0x58>
   27aa4:	ldr	r3, [r0, #4]
   27aa8:	add	r3, r3, #1
   27aac:	str	r3, [r0, #4]
   27ab0:	ldr	r0, [r5, #12]
   27ab4:	str	r0, [r2, #8]
   27ab8:	ldr	r0, [r5, #4]
   27abc:	str	r0, [r2, #4]
   27ac0:	str	r6, [r1]
   27ac4:	mov	r0, r5
   27ac8:	mov	r1, r6
   27acc:	mov	r2, r4
   27ad0:	bl	26738 <flatcc_json_parser_generic_json@@Base>
   27ad4:	b	27a1c <flatcc_json_parser_union@@Base+0x54>
   27ad8:	mov	r0, r5
   27adc:	mov	r1, r6
   27ae0:	mov	r2, r4
   27ae4:	mov	r3, #25
   27ae8:	b	27a18 <flatcc_json_parser_union@@Base+0x50>

00027aec <flatcc_json_parser_union_type@@Base>:
   27aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27af0:	add	fp, sp, #28
   27af4:	sub	sp, sp, #20
   27af8:	mov	r6, r3
   27afc:	mov	r7, r2
   27b00:	mov	r4, r1
   27b04:	mov	r5, r0
   27b08:	ldr	r0, [r0]
   27b0c:	ldr	r1, [fp, #12]
   27b10:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   27b14:	mov	sl, r0
   27b18:	add	r8, r0, #8
   27b1c:	add	r9, r6, r6, lsl #1
   27b20:	add	r6, r8, r9, lsl #3
   27b24:	mov	r0, r6
   27b28:	ldrb	r1, [r0, #12]!
   27b2c:	cmp	r1, #0
   27b30:	beq	27b58 <flatcc_json_parser_union_type@@Base+0x6c>
   27b34:	mov	r0, r5
   27b38:	mov	r1, r4
   27b3c:	mov	r2, r7
   27b40:	mov	r3, #28
   27b44:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   27b48:	mov	r7, r0
   27b4c:	mov	r0, r7
   27b50:	sub	sp, fp, #28
   27b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b58:	mov	r1, #1
   27b5c:	strb	r1, [r0]
   27b60:	add	r3, r6, #13
   27b64:	mov	r0, r5
   27b68:	mov	r1, r4
   27b6c:	mov	r2, r7
   27b70:	str	r3, [sp, #8]
   27b74:	bl	27c94 <flatcc_json_parser_union_type@@Base+0x1a8>
   27b78:	mov	r2, r7
   27b7c:	mov	r7, r0
   27b80:	cmp	r0, r4
   27b84:	str	r2, [sp, #4]
   27b88:	beq	27b94 <flatcc_json_parser_union_type@@Base+0xa8>
   27b8c:	ldr	r4, [sp, #8]
   27b90:	b	27bb4 <flatcc_json_parser_union_type@@Base+0xc8>
   27b94:	ldr	r3, [fp, #16]
   27b98:	ldr	r0, [sp, #8]
   27b9c:	mov	r4, r0
   27ba0:	str	r0, [sp]
   27ba4:	mov	r0, r5
   27ba8:	mov	r1, r7
   27bac:	bl	27d24 <flatcc_json_parser_union_type@@Base+0x238>
   27bb0:	mov	r7, r0
   27bb4:	ldr	r1, [r8, r9, lsl #3]
   27bb8:	cmp	r1, #0
   27bbc:	beq	27c48 <flatcc_json_parser_union_type@@Base+0x15c>
   27bc0:	ldr	r0, [sl, #4]
   27bc4:	cmp	r0, #0
   27bc8:	beq	27c74 <flatcc_json_parser_union_type@@Base+0x188>
   27bcc:	ldr	ip, [fp, #20]
   27bd0:	sub	r0, r0, #1
   27bd4:	str	r0, [sl, #4]
   27bd8:	ldr	r0, [r6, #8]
   27bdc:	ldr	r9, [r5, #4]
   27be0:	ldr	r8, [r5, #12]
   27be4:	str	r0, [r5, #12]
   27be8:	ldr	r0, [r6, #4]
   27bec:	str	r0, [r5, #4]
   27bf0:	ldrb	r3, [r4]
   27bf4:	strb	r3, [sp, #12]
   27bf8:	add	r0, sp, #12
   27bfc:	add	r0, r0, #4
   27c00:	str	r0, [sp]
   27c04:	mov	r0, r5
   27c08:	ldr	r6, [sp, #4]
   27c0c:	mov	r2, r6
   27c10:	blx	ip
   27c14:	cmp	r0, r6
   27c18:	beq	27c60 <flatcc_json_parser_union_type@@Base+0x174>
   27c1c:	ldr	r1, [fp, #8]
   27c20:	ldr	r0, [r5]
   27c24:	ldr	r2, [sp, #12]
   27c28:	ldr	r3, [sp, #16]
   27c2c:	bl	2330c <flatcc_builder_table_add_union@@Base>
   27c30:	cmp	r0, #0
   27c34:	beq	27c68 <flatcc_json_parser_union_type@@Base+0x17c>
   27c38:	mov	r0, r5
   27c3c:	mov	r1, r7
   27c40:	ldr	r2, [sp, #4]
   27c44:	b	27b40 <flatcc_json_parser_union_type@@Base+0x54>
   27c48:	ldrb	r0, [r4]
   27c4c:	ldr	r1, [sl, #4]
   27c50:	cmp	r0, #0
   27c54:	addne	r1, r1, #1
   27c58:	str	r1, [sl, #4]
   27c5c:	b	27b4c <flatcc_json_parser_union_type@@Base+0x60>
   27c60:	mov	r7, r6
   27c64:	b	27b4c <flatcc_json_parser_union_type@@Base+0x60>
   27c68:	str	r9, [r5, #4]
   27c6c:	str	r8, [r5, #12]
   27c70:	b	27b4c <flatcc_json_parser_union_type@@Base+0x60>
   27c74:	movw	r0, #27156	; 0x6a14
   27c78:	movt	r0, #3
   27c7c:	movw	r1, #27171	; 0x6a23
   27c80:	movt	r1, #3
   27c84:	movw	r3, #27245	; 0x6a6d
   27c88:	movt	r3, #3
   27c8c:	movw	r2, #965	; 0x3c5
   27c90:	bl	14f44 <__assert_fail@plt>
   27c94:	push	{r4, r5, r6, r7, fp, lr}
   27c98:	add	fp, sp, #16
   27c9c:	sub	sp, sp, #24
   27ca0:	mov	r7, r1
   27ca4:	mov	r6, r0
   27ca8:	mov	r0, #0
   27cac:	str	r0, [sp, #20]
   27cb0:	str	r0, [sp, #16]
   27cb4:	str	r0, [sp, #12]
   27cb8:	strb	r0, [r3]
   27cbc:	cmp	r1, r2
   27cc0:	beq	27d18 <flatcc_json_parser_union_type@@Base+0x22c>
   27cc4:	mov	r5, r3
   27cc8:	mov	r4, r2
   27ccc:	add	r0, sp, #16
   27cd0:	str	r0, [sp]
   27cd4:	add	r3, sp, #12
   27cd8:	mov	r0, r6
   27cdc:	mov	r1, r7
   27ce0:	bl	272d4 <flatcc_json_parser_integer@@Base>
   27ce4:	mov	r1, r0
   27ce8:	cmp	r0, r7
   27cec:	beq	27d14 <flatcc_json_parser_union_type@@Base+0x228>
   27cf0:	ldr	r3, [sp, #12]
   27cf4:	ldr	r0, [sp, #16]
   27cf8:	ldr	r2, [sp, #20]
   27cfc:	stm	sp, {r0, r2, r5}
   27d00:	mov	r0, r6
   27d04:	mov	r2, r4
   27d08:	bl	28ed8 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   27d0c:	mov	r7, r0
   27d10:	b	27d18 <flatcc_json_parser_union_type@@Base+0x22c>
   27d14:	mov	r7, r1
   27d18:	mov	r0, r7
   27d1c:	sub	sp, fp, #16
   27d20:	pop	{r4, r5, r6, r7, fp, pc}
   27d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d28:	add	fp, sp, #28
   27d2c:	sub	sp, sp, #36	; 0x24
   27d30:	mov	r8, r3
   27d34:	mov	r6, r2
   27d38:	mov	r5, r0
   27d3c:	mov	r0, #0
   27d40:	strb	r0, [fp, #-29]	; 0xffffffe3
   27d44:	ldr	sl, [fp, #8]
   27d48:	strb	r0, [sl]
   27d4c:	mov	r0, r5
   27d50:	bl	28f20 <flatcc_json_parser_struct_as_root@@Base+0xa1c>
   27d54:	mov	r4, r0
   27d58:	cmp	r0, r6
   27d5c:	beq	27e24 <flatcc_json_parser_union_type@@Base+0x338>
   27d60:	mov	r9, r8
   27d64:	ldr	r7, [r9]
   27d68:	add	r0, sp, #24
   27d6c:	str	r0, [sp]
   27d70:	add	r0, sp, #16
   27d74:	str	r0, [sp, #4]
   27d78:	mov	r0, r5
   27d7c:	mov	r1, r4
   27d80:	mov	r2, r6
   27d84:	add	r3, sp, #20
   27d88:	blx	r7
   27d8c:	mov	r7, r0
   27d90:	cmp	r0, r6
   27d94:	beq	27e30 <flatcc_json_parser_union_type@@Base+0x344>
   27d98:	cmp	r7, r4
   27d9c:	beq	27df8 <flatcc_json_parser_union_type@@Base+0x30c>
   27da0:	ldr	r3, [sp, #20]
   27da4:	ldr	r0, [sp, #24]
   27da8:	ldr	r1, [sp, #28]
   27dac:	stm	sp, {r0, r1}
   27db0:	sub	r0, fp, #29
   27db4:	str	r0, [sp, #8]
   27db8:	mov	r0, r5
   27dbc:	mov	r1, r7
   27dc0:	mov	r2, r6
   27dc4:	bl	28ed8 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   27dc8:	cmp	r0, r6
   27dcc:	beq	27e2c <flatcc_json_parser_union_type@@Base+0x340>
   27dd0:	ldrb	r0, [sl]
   27dd4:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   27dd8:	add	r0, r0, r1
   27ddc:	strb	r0, [sl]
   27de0:	ldr	r0, [sp, #16]
   27de4:	cmp	r0, #0
   27de8:	mov	r4, r7
   27dec:	mov	r9, r8
   27df0:	bne	27d64 <flatcc_json_parser_union_type@@Base+0x278>
   27df4:	b	27e30 <flatcc_json_parser_union_type@@Base+0x344>
   27df8:	ldr	r0, [r9, #4]!
   27dfc:	cmp	r0, #0
   27e00:	mov	r4, r7
   27e04:	bne	27d64 <flatcc_json_parser_union_type@@Base+0x278>
   27e08:	mov	r0, r5
   27e0c:	mov	r1, r7
   27e10:	mov	r2, r6
   27e14:	mov	r3, #23
   27e18:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   27e1c:	mov	r7, r0
   27e20:	b	27e30 <flatcc_json_parser_union_type@@Base+0x344>
   27e24:	mov	r7, r4
   27e28:	b	27e30 <flatcc_json_parser_union_type@@Base+0x344>
   27e2c:	mov	r7, r6
   27e30:	mov	r0, r7
   27e34:	sub	sp, fp, #28
   27e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027e3c <flatcc_json_parser_union_vector@@Base>:
   27e3c:	push	{r4, r5, r6, r7, fp, lr}
   27e40:	add	fp, sp, #16
   27e44:	sub	sp, sp, #16
   27e48:	mov	r7, r3
   27e4c:	mov	r4, r2
   27e50:	mov	r5, r1
   27e54:	mov	r6, r0
   27e58:	ldr	r0, [r0]
   27e5c:	ldr	r1, [fp, #12]
   27e60:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   27e64:	add	r2, r0, #8
   27e68:	add	r3, r7, r7, lsl #1
   27e6c:	mov	r1, r2
   27e70:	ldr	r7, [r1, r3, lsl #3]!
   27e74:	cmp	r7, #0
   27e78:	beq	27e98 <flatcc_json_parser_union_vector@@Base+0x5c>
   27e7c:	mov	r0, r6
   27e80:	mov	r1, r5
   27e84:	mov	r2, r4
   27e88:	mov	r3, #28
   27e8c:	sub	sp, fp, #16
   27e90:	pop	{r4, r5, r6, r7, fp, lr}
   27e94:	b	25f60 <flatcc_json_parser_set_error@@Base>
   27e98:	add	r2, r2, r3, lsl #3
   27e9c:	ldrb	r7, [r2, #12]
   27ea0:	ldr	r3, [r0, #4]
   27ea4:	cmp	r7, #0
   27ea8:	beq	27ee4 <flatcc_json_parser_union_vector@@Base+0xa8>
   27eac:	ldr	r1, [fp, #16]
   27eb0:	ldr	r7, [fp, #8]
   27eb4:	sub	r3, r3, #1
   27eb8:	str	r3, [r0, #4]
   27ebc:	ldr	r0, [r2, #16]
   27ec0:	ldr	r3, [r2, #20]
   27ec4:	stm	sp, {r0, r7}
   27ec8:	str	r1, [sp, #8]
   27ecc:	mov	r0, r6
   27ed0:	mov	r1, r5
   27ed4:	mov	r2, r4
   27ed8:	bl	27f18 <flatcc_json_parser_union_vector@@Base+0xdc>
   27edc:	sub	sp, fp, #16
   27ee0:	pop	{r4, r5, r6, r7, fp, pc}
   27ee4:	add	r3, r3, #1
   27ee8:	str	r3, [r0, #4]
   27eec:	ldr	r0, [r6, #12]
   27ef0:	str	r0, [r2, #8]
   27ef4:	ldr	r0, [r6, #4]
   27ef8:	str	r0, [r2, #4]
   27efc:	str	r5, [r1]
   27f00:	mov	r0, r6
   27f04:	mov	r1, r5
   27f08:	mov	r2, r4
   27f0c:	sub	sp, fp, #16
   27f10:	pop	{r4, r5, r6, r7, fp, lr}
   27f14:	b	26738 <flatcc_json_parser_generic_json@@Base>
   27f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f1c:	add	fp, sp, #28
   27f20:	sub	sp, sp, #12
   27f24:	mov	r7, r3
   27f28:	mov	r5, r2
   27f2c:	mov	r4, r1
   27f30:	mov	r6, r0
   27f34:	mov	r0, #0
   27f38:	str	r0, [sp, #8]
   27f3c:	ldr	r0, [r6]
   27f40:	bl	22484 <flatcc_builder_start_offset_vector@@Base>
   27f44:	cmp	r0, #0
   27f48:	beq	27f70 <flatcc_json_parser_union_vector@@Base+0x134>
   27f4c:	mov	r0, r6
   27f50:	mov	r1, r4
   27f54:	mov	r2, r5
   27f58:	mov	r3, #33	; 0x21
   27f5c:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   27f60:	mov	r4, r0
   27f64:	mov	r0, r4
   27f68:	sub	sp, fp, #28
   27f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f70:	ldr	r8, [fp, #8]
   27f74:	add	r3, sp, #4
   27f78:	mov	r0, r6
   27f7c:	mov	r1, r4
   27f80:	mov	r2, r5
   27f84:	bl	28368 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   27f88:	mov	r4, r0
   27f8c:	clz	r0, r8
   27f90:	lsr	r0, r0, #5
   27f94:	ldr	r1, [sp, #4]
   27f98:	cmp	r1, #0
   27f9c:	beq	28038 <flatcc_json_parser_union_vector@@Base+0x1fc>
   27fa0:	sub	sl, r8, #1
   27fa4:	mov	r9, #0
   27fa8:	add	r8, sp, #8
   27fac:	tst	r0, #1
   27fb0:	bne	28084 <flatcc_json_parser_union_vector@@Base+0x248>
   27fb4:	ldr	r0, [r6]
   27fb8:	mov	r1, r7
   27fbc:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   27fc0:	ldrb	r3, [r0, r9]
   27fc4:	str	r8, [sp]
   27fc8:	mov	r0, r6
   27fcc:	mov	r1, r4
   27fd0:	mov	r2, r5
   27fd4:	ldr	r4, [fp, #16]
   27fd8:	blx	r4
   27fdc:	mov	r4, r0
   27fe0:	cmp	r0, r5
   27fe4:	beq	27f64 <flatcc_json_parser_union_vector@@Base+0x128>
   27fe8:	ldr	r0, [r6]
   27fec:	mov	r1, #1
   27ff0:	bl	21fd0 <flatcc_builder_extend_offset_vector@@Base>
   27ff4:	cmp	r0, #0
   27ff8:	beq	27f4c <flatcc_json_parser_union_vector@@Base+0x110>
   27ffc:	ldr	r1, [sp, #8]
   28000:	str	r1, [r0]
   28004:	mov	r0, r6
   28008:	mov	r1, r4
   2800c:	mov	r2, r5
   28010:	add	r3, sp, #4
   28014:	bl	27154 <flatcc_json_parser_float@@Base+0x4ec>
   28018:	mov	r4, r0
   2801c:	sub	r0, sl, r9
   28020:	clz	r0, r0
   28024:	lsr	r0, r0, #5
   28028:	add	r9, r9, #1
   2802c:	ldr	r1, [sp, #4]
   28030:	cmp	r1, #0
   28034:	bne	27fac <flatcc_json_parser_union_vector@@Base+0x170>
   28038:	cmp	r0, #0
   2803c:	beq	28084 <flatcc_json_parser_union_vector@@Base+0x248>
   28040:	ldr	r0, [r6]
   28044:	mov	r1, r7
   28048:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2804c:	mov	r1, r0
   28050:	ldr	r0, [r6]
   28054:	bl	23290 <flatcc_builder_end_offset_vector_for_unions@@Base>
   28058:	str	r0, [sp, #8]
   2805c:	cmp	r0, #0
   28060:	beq	27f4c <flatcc_json_parser_union_vector@@Base+0x110>
   28064:	ldr	r1, [fp, #12]
   28068:	ldr	r0, [r6]
   2806c:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   28070:	cmp	r0, #0
   28074:	beq	27f4c <flatcc_json_parser_union_vector@@Base+0x110>
   28078:	ldr	r1, [sp, #8]
   2807c:	str	r1, [r0]
   28080:	b	27f64 <flatcc_json_parser_union_vector@@Base+0x128>
   28084:	mov	r0, r6
   28088:	mov	r1, r4
   2808c:	mov	r2, r5
   28090:	mov	r3, #30
   28094:	b	27f5c <flatcc_json_parser_union_vector@@Base+0x120>

00028098 <flatcc_json_parser_union_type_vector@@Base>:
   28098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2809c:	add	fp, sp, #28
   280a0:	sub	sp, sp, #28
   280a4:	mov	r6, r3
   280a8:	mov	r9, r2
   280ac:	mov	r4, r1
   280b0:	mov	r5, r0
   280b4:	ldr	r0, [r0]
   280b8:	ldr	r1, [fp, #12]
   280bc:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   280c0:	add	r0, r0, #8
   280c4:	add	sl, r6, r6, lsl #1
   280c8:	add	r7, r0, sl, lsl #3
   280cc:	mov	r0, r7
   280d0:	ldrb	r1, [r0, #12]!
   280d4:	cmp	r1, #0
   280d8:	beq	280f0 <flatcc_json_parser_union_type_vector@@Base+0x58>
   280dc:	mov	r0, r5
   280e0:	mov	r1, r4
   280e4:	mov	r2, r9
   280e8:	mov	r3, #28
   280ec:	b	28310 <flatcc_json_parser_union_type_vector@@Base+0x278>
   280f0:	mov	r1, #1
   280f4:	strb	r1, [r0]
   280f8:	ldr	r0, [r5]
   280fc:	mov	r1, #1
   28100:	mov	r2, #1
   28104:	mvn	r3, #0
   28108:	bl	223f4 <flatcc_builder_start_vector@@Base>
   2810c:	cmp	r0, #0
   28110:	bne	28300 <flatcc_json_parser_union_type_vector@@Base+0x268>
   28114:	add	r3, sp, #24
   28118:	mov	r0, r5
   2811c:	mov	r1, r4
   28120:	mov	r2, r9
   28124:	bl	28368 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   28128:	mov	r4, r0
   2812c:	ldr	r0, [r5]
   28130:	ldr	r1, [sp, #24]
   28134:	cmp	r1, #0
   28138:	beq	28208 <flatcc_json_parser_union_type_vector@@Base+0x170>
   2813c:	add	r6, sp, #23
   28140:	mov	r1, #1
   28144:	bl	21e0c <flatcc_builder_extend_vector@@Base>
   28148:	cmp	r0, #0
   2814c:	beq	28300 <flatcc_json_parser_union_type_vector@@Base+0x268>
   28150:	mov	r8, r0
   28154:	mov	r0, r5
   28158:	mov	r1, r4
   2815c:	mov	r2, r9
   28160:	mov	r3, r6
   28164:	bl	27c94 <flatcc_json_parser_union_type@@Base+0x1a8>
   28168:	mov	r1, r6
   2816c:	mov	r6, r0
   28170:	cmp	r4, r0
   28174:	beq	28180 <flatcc_json_parser_union_type_vector@@Base+0xe8>
   28178:	mov	r4, r6
   2817c:	b	281a8 <flatcc_json_parser_union_type_vector@@Base+0x110>
   28180:	str	r1, [sp]
   28184:	mov	r0, r5
   28188:	mov	r1, r6
   2818c:	mov	r2, r9
   28190:	ldr	r3, [fp, #16]
   28194:	bl	27d24 <flatcc_json_parser_union_type@@Base+0x238>
   28198:	mov	r4, r0
   2819c:	cmp	r0, r6
   281a0:	cmpne	r4, r9
   281a4:	beq	28300 <flatcc_json_parser_union_type_vector@@Base+0x268>
   281a8:	ldrb	r0, [sp, #23]
   281ac:	ldr	r1, [fp, #24]
   281b0:	blx	r1
   281b4:	cmp	r0, #0
   281b8:	add	r6, sp, #23
   281bc:	bne	281d4 <flatcc_json_parser_union_type_vector@@Base+0x13c>
   281c0:	ldrb	r0, [r5, #8]
   281c4:	tst	r0, #1
   281c8:	beq	28334 <flatcc_json_parser_union_type_vector@@Base+0x29c>
   281cc:	mov	r0, #0
   281d0:	strb	r0, [sp, #23]
   281d4:	ldrb	r1, [sp, #23]
   281d8:	mov	r0, r8
   281dc:	bl	283f8 <flatcc_json_parser_union_type_vector@@Base+0x360>
   281e0:	mov	r0, r5
   281e4:	mov	r1, r4
   281e8:	mov	r2, r9
   281ec:	add	r3, sp, #24
   281f0:	bl	27154 <flatcc_json_parser_float@@Base+0x4ec>
   281f4:	mov	r4, r0
   281f8:	ldr	r0, [r5]
   281fc:	ldr	r1, [sp, #24]
   28200:	cmp	r1, #0
   28204:	bne	28140 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   28208:	bl	230c4 <flatcc_builder_vector_count@@Base>
   2820c:	mov	r8, r0
   28210:	str	r0, [r7, #16]
   28214:	ldr	r0, [r5]
   28218:	mov	r1, r8
   2821c:	bl	213ac <flatcc_builder_enter_user_frame@@Base>
   28220:	mov	r1, r0
   28224:	ldr	r0, [r5]
   28228:	str	r1, [sp, #16]
   2822c:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   28230:	mov	r6, r0
   28234:	ldr	r0, [r5]
   28238:	bl	230d0 <flatcc_builder_vector_edit@@Base>
   2823c:	mov	r1, r0
   28240:	mov	r0, r6
   28244:	mov	r2, r8
   28248:	bl	14e60 <memcpy@plt>
   2824c:	ldr	r0, [r5]
   28250:	bl	23044 <flatcc_builder_end_vector@@Base>
   28254:	cmp	r0, #0
   28258:	beq	28300 <flatcc_json_parser_union_type_vector@@Base+0x268>
   2825c:	mov	r7, r0
   28260:	ldr	r6, [fp, #8]
   28264:	ldr	r0, [r5]
   28268:	sub	r1, r6, #1
   2826c:	bl	23418 <flatcc_builder_table_add_offset@@Base>
   28270:	cmp	r0, #0
   28274:	beq	28300 <flatcc_json_parser_union_type_vector@@Base+0x268>
   28278:	str	r7, [r0]
   2827c:	ldr	r0, [r5]
   28280:	ldr	r1, [fp, #12]
   28284:	bl	214b4 <flatcc_builder_get_user_frame_ptr@@Base>
   28288:	add	r7, r0, #8
   2828c:	mov	r2, r7
   28290:	ldr	r1, [r2, sl, lsl #3]!
   28294:	ldr	r3, [sp, #16]
   28298:	str	r3, [r2, #20]
   2829c:	ldr	r2, [r0, #4]
   282a0:	cmp	r1, #0
   282a4:	beq	28324 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   282a8:	cmp	r2, #0
   282ac:	beq	28348 <flatcc_json_parser_union_type_vector@@Base+0x2b0>
   282b0:	ldr	ip, [fp, #20]
   282b4:	sub	r2, r2, #1
   282b8:	str	r2, [r0, #4]
   282bc:	add	r0, r7, sl, lsl #3
   282c0:	ldr	r2, [r0, #8]
   282c4:	ldr	sl, [r5, #4]
   282c8:	ldr	r7, [r5, #12]
   282cc:	str	r2, [r5, #12]
   282d0:	ldr	r0, [r0, #4]
   282d4:	str	r0, [r5, #4]
   282d8:	str	r8, [sp]
   282dc:	stmib	sp, {r6, ip}
   282e0:	mov	r0, r5
   282e4:	mov	r2, r9
   282e8:	bl	27f18 <flatcc_json_parser_union_vector@@Base+0xdc>
   282ec:	cmp	r0, r9
   282f0:	strne	sl, [r5, #4]
   282f4:	strne	r7, [r5, #12]
   282f8:	movne	r9, r4
   282fc:	b	28318 <flatcc_json_parser_union_type_vector@@Base+0x280>
   28300:	mov	r0, r5
   28304:	mov	r1, r4
   28308:	mov	r2, r9
   2830c:	mov	r3, #33	; 0x21
   28310:	bl	25f60 <flatcc_json_parser_set_error@@Base>
   28314:	mov	r9, r0
   28318:	mov	r0, r9
   2831c:	sub	sp, fp, #28
   28320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28324:	add	r1, r2, #1
   28328:	str	r1, [r0, #4]
   2832c:	mov	r9, r4
   28330:	b	28318 <flatcc_json_parser_union_type_vector@@Base+0x280>
   28334:	mov	r0, r5
   28338:	mov	r1, r4
   2833c:	mov	r2, r9
   28340:	mov	r3, #15
   28344:	b	28310 <flatcc_json_parser_union_type_vector@@Base+0x278>
   28348:	movw	r0, #27156	; 0x6a14
   2834c:	movt	r0, #3
   28350:	movw	r1, #27171	; 0x6a23
   28354:	movt	r1, #3
   28358:	movw	r3, #27449	; 0x6b39
   2835c:	movt	r3, #3
   28360:	movw	r2, #1122	; 0x462
   28364:	bl	14f44 <__assert_fail@plt>
   28368:	push	{r4, r5, r6, sl, fp, lr}
   2836c:	add	fp, sp, #16
   28370:	mov	r5, r3
   28374:	mov	r4, r2
   28378:	mov	r6, r0
   2837c:	cmp	r1, r2
   28380:	beq	283d0 <flatcc_json_parser_union_type_vector@@Base+0x338>
   28384:	ldrb	r0, [r1]
   28388:	cmp	r0, #91	; 0x5b
   2838c:	bne	283d0 <flatcc_json_parser_union_type_vector@@Base+0x338>
   28390:	add	r1, r1, #1
   28394:	mov	r0, r6
   28398:	mov	r2, r4
   2839c:	bl	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   283a0:	cmp	r0, r4
   283a4:	beq	283ec <flatcc_json_parser_union_type_vector@@Base+0x354>
   283a8:	ldrb	r1, [r0]
   283ac:	cmp	r1, #93	; 0x5d
   283b0:	bne	283ec <flatcc_json_parser_union_type_vector@@Base+0x354>
   283b4:	mov	r1, #0
   283b8:	str	r1, [r5]
   283bc:	add	r1, r0, #1
   283c0:	mov	r0, r6
   283c4:	mov	r2, r4
   283c8:	pop	{r4, r5, r6, sl, fp, lr}
   283cc:	b	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   283d0:	mov	r0, #0
   283d4:	str	r0, [r5]
   283d8:	mov	r0, r6
   283dc:	mov	r2, r4
   283e0:	mov	r3, #22
   283e4:	pop	{r4, r5, r6, sl, fp, lr}
   283e8:	b	25f60 <flatcc_json_parser_set_error@@Base>
   283ec:	mov	r1, #1
   283f0:	str	r1, [r5]
   283f4:	pop	{r4, r5, r6, sl, fp, pc}
   283f8:	push	{r4, r5, fp, lr}
   283fc:	add	fp, sp, #8
   28400:	mov	r4, r1
   28404:	mov	r5, r0
   28408:	mov	r0, r1
   2840c:	bl	28f48 <flatcc_json_parser_struct_as_root@@Base+0xa44>
   28410:	strb	r4, [r5]
   28414:	pop	{r4, r5, fp, pc}

00028418 <flatcc_json_parser_table_as_root@@Base>:
   28418:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2841c:	add	fp, sp, #24
   28420:	sub	sp, sp, #48	; 0x30
   28424:	mov	r4, r2
   28428:	mov	r6, r0
   2842c:	ldr	r8, [fp, #8]
   28430:	str	r8, [sp]
   28434:	add	r5, sp, #8
   28438:	cmp	r1, #0
   2843c:	movne	r5, r1
   28440:	add	r7, r2, r3
   28444:	mov	r0, r5
   28448:	mov	r1, r6
   2844c:	mov	r3, r7
   28450:	bl	284cc <flatcc_json_parser_table_as_root@@Base+0xb4>
   28454:	mov	r0, #2
   28458:	and	r3, r0, r8, lsr #1
   2845c:	ldr	r1, [fp, #12]
   28460:	mov	r0, r6
   28464:	mov	r2, #0
   28468:	bl	219e0 <flatcc_builder_start_buffer@@Base>
   2846c:	mov	r1, r0
   28470:	mvn	r0, #0
   28474:	cmp	r1, #0
   28478:	bne	284a0 <flatcc_json_parser_table_as_root@@Base+0x88>
   2847c:	ldr	ip, [fp, #16]
   28480:	add	r3, sp, #4
   28484:	mov	r0, r5
   28488:	mov	r1, r4
   2848c:	mov	r2, r7
   28490:	blx	ip
   28494:	ldr	r0, [r5, #20]
   28498:	cmp	r0, #0
   2849c:	beq	284a8 <flatcc_json_parser_table_as_root@@Base+0x90>
   284a0:	sub	sp, fp, #24
   284a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   284a8:	ldr	r1, [sp, #4]
   284ac:	mov	r0, r6
   284b0:	bl	21b94 <flatcc_builder_end_buffer@@Base>
   284b4:	cmp	r0, #0
   284b8:	mvn	r0, #0
   284bc:	strne	r4, [r5, #36]	; 0x24
   284c0:	movne	r0, #0
   284c4:	sub	sp, fp, #24
   284c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   284cc:	vmov.i32	q8, #0	; 0x00000000
   284d0:	add	ip, r0, #16
   284d4:	vst1.32	{d16-d17}, [ip]
   284d8:	mov	ip, #0
   284dc:	str	ip, [r0, #36]	; 0x24
   284e0:	str	r2, [r0, #32]
   284e4:	stm	r0, {r1, r2}
   284e8:	mov	r1, #1
   284ec:	str	r1, [r0, #12]
   284f0:	ldr	r1, [sp]
   284f4:	str	r1, [r0, #8]
   284f8:	str	r2, [r0, #24]
   284fc:	str	r3, [r0, #28]
   28500:	bx	lr

00028504 <flatcc_json_parser_struct_as_root@@Base>:
   28504:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28508:	add	fp, sp, #24
   2850c:	sub	sp, sp, #48	; 0x30
   28510:	mov	r4, r2
   28514:	mov	r6, r0
   28518:	ldr	r8, [fp, #8]
   2851c:	str	r8, [sp]
   28520:	add	r5, sp, #8
   28524:	cmp	r1, #0
   28528:	movne	r5, r1
   2852c:	add	r7, r2, r3
   28530:	mov	r0, r5
   28534:	mov	r1, r6
   28538:	mov	r3, r7
   2853c:	bl	284cc <flatcc_json_parser_table_as_root@@Base+0xb4>
   28540:	mov	r0, #2
   28544:	and	r3, r0, r8, lsr #1
   28548:	ldr	r1, [fp, #12]
   2854c:	mov	r0, r6
   28550:	mov	r2, #0
   28554:	bl	219e0 <flatcc_builder_start_buffer@@Base>
   28558:	mov	r1, r0
   2855c:	mvn	r0, #0
   28560:	cmp	r1, #0
   28564:	bne	2858c <flatcc_json_parser_struct_as_root@@Base+0x88>
   28568:	ldr	ip, [fp, #16]
   2856c:	add	r3, sp, #4
   28570:	mov	r0, r5
   28574:	mov	r1, r4
   28578:	mov	r2, r7
   2857c:	blx	ip
   28580:	ldr	r0, [r5, #20]
   28584:	cmp	r0, #0
   28588:	beq	28594 <flatcc_json_parser_struct_as_root@@Base+0x90>
   2858c:	sub	sp, fp, #24
   28590:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28594:	ldr	r1, [sp, #4]
   28598:	mov	r0, r6
   2859c:	bl	21b94 <flatcc_builder_end_buffer@@Base>
   285a0:	cmp	r0, #0
   285a4:	mvn	r0, #0
   285a8:	strne	r4, [r5, #36]	; 0x24
   285ac:	movne	r0, #0
   285b0:	sub	sp, fp, #24
   285b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   285b8:	vmov	d0, r0, r1
   285bc:	bx	lr
   285c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   285c4:	add	fp, sp, #28
   285c8:	sub	sp, sp, #44	; 0x2c
   285cc:	mov	lr, r2
   285d0:	mov	r9, r0
   285d4:	mov	r2, #0
   285d8:	str	r2, [lr]
   285dc:	str	r2, [lr, #4]
   285e0:	cmp	r1, #1000	; 0x3e8
   285e4:	mov	r0, r1
   285e8:	movge	r0, #1000	; 0x3e8
   285ec:	add	r3, r9, r0
   285f0:	add	ip, r3, #1
   285f4:	cmp	ip, r9
   285f8:	beq	28670 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   285fc:	str	r3, [fp, #-32]	; 0xffffffe0
   28600:	ldrb	r3, [r9]
   28604:	cmp	r3, #45	; 0x2d
   28608:	mov	r4, r9
   2860c:	bne	28624 <flatcc_json_parser_struct_as_root@@Base+0x120>
   28610:	cmp	r0, #0
   28614:	beq	28a94 <flatcc_json_parser_struct_as_root@@Base+0x590>
   28618:	add	r4, r9, #1
   2861c:	ldrb	r3, [r4]
   28620:	mov	r2, #1
   28624:	cmp	r3, #48	; 0x30
   28628:	bne	28658 <flatcc_json_parser_struct_as_root@@Base+0x154>
   2862c:	add	r0, r4, #1
   28630:	ldr	r3, [fp, #-32]	; 0xffffffe0
   28634:	cmp	r4, r3
   28638:	beq	2867c <flatcc_json_parser_struct_as_root@@Base+0x178>
   2863c:	ldrb	r3, [r0]
   28640:	orr	r3, r3, #32
   28644:	cmp	r3, #120	; 0x78
   28648:	bne	2867c <flatcc_json_parser_struct_as_root@@Base+0x178>
   2864c:	mov	r1, lr
   28650:	bl	28ac0 <flatcc_json_parser_struct_as_root@@Base+0x5bc>
   28654:	b	28670 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   28658:	sub	r0, r3, #49	; 0x31
   2865c:	uxtb	r0, r0
   28660:	cmp	r0, #9
   28664:	bcc	286b0 <flatcc_json_parser_struct_as_root@@Base+0x1ac>
   28668:	cmp	r2, #0
   2866c:	movne	r9, #0
   28670:	mov	r0, r9
   28674:	sub	sp, fp, #28
   28678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2867c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   28680:	cmp	r4, r3
   28684:	str	r2, [sp, #32]
   28688:	beq	286a4 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   2868c:	ldrb	r3, [r0]
   28690:	cmp	r3, #48	; 0x30
   28694:	bne	286a4 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   28698:	add	r0, r0, #1
   2869c:	cmp	ip, r0
   286a0:	bne	2868c <flatcc_json_parser_struct_as_root@@Base+0x188>
   286a4:	mov	r6, #0
   286a8:	mov	r4, #0
   286ac:	b	286c0 <flatcc_json_parser_struct_as_root@@Base+0x1bc>
   286b0:	str	r2, [sp, #32]
   286b4:	add	r0, r4, #1
   286b8:	sub	r6, r3, #48	; 0x30
   286bc:	asr	r4, r6, #31
   286c0:	mov	r5, #0
   286c4:	cmp	r0, ip
   286c8:	beq	2873c <flatcc_json_parser_struct_as_root@@Base+0x238>
   286cc:	str	lr, [sp, #24]
   286d0:	str	r9, [sp, #28]
   286d4:	movw	r8, #39321	; 0x9999
   286d8:	movt	r8, #6553	; 0x1999
   286dc:	movw	r3, #39320	; 0x9998
   286e0:	movt	r3, #39321	; 0x9999
   286e4:	mov	sl, #10
   286e8:	mov	r7, r0
   286ec:	ldrb	r9, [r7]
   286f0:	sub	lr, r9, #48	; 0x30
   286f4:	uxtb	r2, lr
   286f8:	cmp	r2, #9
   286fc:	bhi	2872c <flatcc_json_parser_struct_as_root@@Base+0x228>
   28700:	subs	r2, r3, r6
   28704:	sbcs	r2, r8, r4
   28708:	bcc	28754 <flatcc_json_parser_struct_as_root@@Base+0x250>
   2870c:	add	r2, r4, r4, lsl #2
   28710:	lsl	r2, r2, #1
   28714:	umlal	r9, r2, r6, sl
   28718:	subs	r6, r9, #48	; 0x30
   2871c:	sbc	r4, r2, #0
   28720:	add	r7, r7, #1
   28724:	cmp	ip, r7
   28728:	bne	286ec <flatcc_json_parser_struct_as_root@@Base+0x1e8>
   2872c:	mov	r8, r6
   28730:	mov	sl, r4
   28734:	mov	r2, #0
   28738:	b	2876c <flatcc_json_parser_struct_as_root@@Base+0x268>
   2873c:	mov	r7, r0
   28740:	mov	r8, r6
   28744:	mov	sl, r4
   28748:	mov	r2, #0
   2874c:	str	r2, [sp, #36]	; 0x24
   28750:	b	28778 <flatcc_json_parser_struct_as_root@@Base+0x274>
   28754:	adds	r8, r6, #1
   28758:	adc	sl, r4, #0
   2875c:	cmp	r9, #52	; 0x34
   28760:	movls	r8, r6
   28764:	movls	sl, r4
   28768:	mov	r2, #1
   2876c:	str	r2, [sp, #36]	; 0x24
   28770:	ldr	r9, [sp, #28]
   28774:	ldr	lr, [sp, #24]
   28778:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2877c:	cmp	r7, ip
   28780:	beq	287d0 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   28784:	mvn	r1, r1
   28788:	cmn	r1, #1000	; 0x3e8
   2878c:	mvnlt	r1, #1000	; 0x3e8
   28790:	mvn	r1, r1
   28794:	sub	r1, r1, r7
   28798:	add	r6, r9, r1
   2879c:	mov	r5, #0
   287a0:	mov	r1, r7
   287a4:	ldrb	r3, [r1]
   287a8:	cmp	r3, #48	; 0x30
   287ac:	bne	287d8 <flatcc_json_parser_struct_as_root@@Base+0x2d4>
   287b0:	sub	r6, r6, #1
   287b4:	add	r3, r1, #1
   287b8:	add	r5, r5, #1
   287bc:	cmp	r1, r2
   287c0:	mov	r1, r3
   287c4:	bne	287a4 <flatcc_json_parser_struct_as_root@@Base+0x2a0>
   287c8:	mov	r1, r3
   287cc:	b	28824 <flatcc_json_parser_struct_as_root@@Base+0x320>
   287d0:	mov	r1, r7
   287d4:	b	28824 <flatcc_json_parser_struct_as_root@@Base+0x320>
   287d8:	sub	r2, r3, #49	; 0x31
   287dc:	uxtb	r2, r2
   287e0:	cmp	r2, #8
   287e4:	bhi	28824 <flatcc_json_parser_struct_as_root@@Base+0x320>
   287e8:	mvn	r4, #0
   287ec:	mov	r3, r4
   287f0:	cmp	r6, #0
   287f4:	beq	28814 <flatcc_json_parser_struct_as_root@@Base+0x310>
   287f8:	ldrb	r2, [r1, -r3]
   287fc:	sub	r2, r2, #48	; 0x30
   28800:	uxtb	r2, r2
   28804:	sub	r4, r3, #1
   28808:	sub	r6, r6, #1
   2880c:	cmp	r2, #10
   28810:	bcc	287ec <flatcc_json_parser_struct_as_root@@Base+0x2e8>
   28814:	sub	r5, r5, r3
   28818:	sub	r1, r1, r3
   2881c:	mov	r2, #1
   28820:	str	r2, [sp, #36]	; 0x24
   28824:	sub	r3, r7, r0
   28828:	cmp	r1, ip
   2882c:	beq	2897c <flatcc_json_parser_struct_as_root@@Base+0x478>
   28830:	ldrb	r0, [r1]
   28834:	cmp	r0, #46	; 0x2e
   28838:	bne	2897c <flatcc_json_parser_struct_as_root@@Base+0x478>
   2883c:	mov	r7, r1
   28840:	ldrb	r0, [r7, #1]!
   28844:	sub	r0, r0, #48	; 0x30
   28848:	uxtb	r2, r0
   2884c:	mov	r0, #0
   28850:	cmp	r2, #9
   28854:	bhi	28a98 <flatcc_json_parser_struct_as_root@@Base+0x594>
   28858:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2885c:	cmp	r1, r0
   28860:	beq	288c8 <flatcc_json_parser_struct_as_root@@Base+0x3c4>
   28864:	str	r3, [sp, #28]
   28868:	movw	r0, #39321	; 0x9999
   2886c:	movt	r0, #6553	; 0x1999
   28870:	movw	r4, #39320	; 0x9998
   28874:	movt	r4, #39321	; 0x9999
   28878:	mov	r6, #10
   2887c:	mov	r1, r7
   28880:	ldrb	r3, [r1]
   28884:	sub	r2, r3, #48	; 0x30
   28888:	uxtb	r2, r2
   2888c:	cmp	r2, #9
   28890:	bhi	288e4 <flatcc_json_parser_struct_as_root@@Base+0x3e0>
   28894:	subs	r2, r4, r8
   28898:	sbcs	r2, r0, sl
   2889c:	bcc	288d8 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   288a0:	add	r2, sl, sl, lsl #2
   288a4:	lsl	r2, r2, #1
   288a8:	umlal	r3, r2, r8, r6
   288ac:	subs	r8, r3, #48	; 0x30
   288b0:	sbc	sl, r2, #0
   288b4:	sub	r5, r5, #1
   288b8:	add	r1, r1, #1
   288bc:	cmp	ip, r1
   288c0:	bne	28880 <flatcc_json_parser_struct_as_root@@Base+0x37c>
   288c4:	b	288e4 <flatcc_json_parser_struct_as_root@@Base+0x3e0>
   288c8:	mov	r1, r7
   288cc:	mov	r0, r8
   288d0:	mov	r6, sl
   288d4:	b	288f0 <flatcc_json_parser_struct_as_root@@Base+0x3ec>
   288d8:	ldr	r0, [sp, #36]	; 0x24
   288dc:	cmp	r0, #0
   288e0:	beq	28aa0 <flatcc_json_parser_struct_as_root@@Base+0x59c>
   288e4:	mov	r0, r8
   288e8:	mov	r6, sl
   288ec:	ldr	r3, [sp, #28]
   288f0:	sub	r2, r1, r7
   288f4:	add	r3, r2, r3
   288f8:	cmp	r1, ip
   288fc:	beq	28924 <flatcc_json_parser_struct_as_root@@Base+0x420>
   28900:	mov	r4, r3
   28904:	ldrb	r3, [r1]
   28908:	cmp	r3, #48	; 0x30
   2890c:	bne	28930 <flatcc_json_parser_struct_as_root@@Base+0x42c>
   28910:	add	r1, r1, #1
   28914:	add	r5, r5, #1
   28918:	cmp	ip, r1
   2891c:	bne	28904 <flatcc_json_parser_struct_as_root@@Base+0x400>
   28920:	b	28970 <flatcc_json_parser_struct_as_root@@Base+0x46c>
   28924:	mov	r8, r0
   28928:	mov	sl, r6
   2892c:	b	2897c <flatcc_json_parser_struct_as_root@@Base+0x478>
   28930:	sub	r2, r3, #49	; 0x31
   28934:	uxtb	r2, r2
   28938:	cmp	r2, #8
   2893c:	bhi	28970 <flatcc_json_parser_struct_as_root@@Base+0x46c>
   28940:	add	r3, r1, #1
   28944:	mov	r1, r3
   28948:	cmp	ip, r3
   2894c:	beq	28968 <flatcc_json_parser_struct_as_root@@Base+0x464>
   28950:	mov	r3, r1
   28954:	ldrb	r2, [r3], #1
   28958:	sub	r2, r2, #48	; 0x30
   2895c:	uxtb	r2, r2
   28960:	cmp	r2, #10
   28964:	bcc	28944 <flatcc_json_parser_struct_as_root@@Base+0x440>
   28968:	mov	r2, #1
   2896c:	str	r2, [sp, #36]	; 0x24
   28970:	mov	r8, r0
   28974:	mov	sl, r6
   28978:	mov	r3, r4
   2897c:	mov	r7, #0
   28980:	cmp	r1, ip
   28984:	beq	289dc <flatcc_json_parser_struct_as_root@@Base+0x4d8>
   28988:	ldrb	r0, [r1]
   2898c:	orr	r0, r0, #32
   28990:	cmp	r0, #101	; 0x65
   28994:	bne	289dc <flatcc_json_parser_struct_as_root@@Base+0x4d8>
   28998:	sub	r2, ip, r1
   2899c:	mov	r0, #0
   289a0:	cmp	r2, #2
   289a4:	blt	28a98 <flatcc_json_parser_struct_as_root@@Base+0x594>
   289a8:	mov	r4, r1
   289ac:	ldrb	r0, [r4, #1]!
   289b0:	cmp	r0, #45	; 0x2d
   289b4:	beq	28a28 <flatcc_json_parser_struct_as_root@@Base+0x524>
   289b8:	mov	r7, #0
   289bc:	cmp	r0, #43	; 0x2b
   289c0:	bne	28a38 <flatcc_json_parser_struct_as_root@@Base+0x534>
   289c4:	add	r4, r1, #2
   289c8:	mov	r0, #0
   289cc:	cmp	r4, ip
   289d0:	beq	28a98 <flatcc_json_parser_struct_as_root@@Base+0x594>
   289d4:	mov	r7, #0
   289d8:	b	28a38 <flatcc_json_parser_struct_as_root@@Base+0x534>
   289dc:	mov	r6, #0
   289e0:	cmp	r1, ip
   289e4:	mov	r0, #0
   289e8:	beq	28a98 <flatcc_json_parser_struct_as_root@@Base+0x594>
   289ec:	add	r0, r3, r5
   289f0:	cmp	r7, #0
   289f4:	rsbne	r6, r6, #0
   289f8:	add	r0, r0, r6
   289fc:	stm	sp, {r8, sl}
   28a00:	str	r0, [sp, #8]
   28a04:	str	r3, [sp, #12]
   28a08:	ldr	r0, [sp, #36]	; 0x24
   28a0c:	str	r0, [sp, #16]
   28a10:	str	lr, [sp, #20]
   28a14:	mov	r0, r9
   28a18:	ldr	r2, [sp, #32]
   28a1c:	bl	28ad0 <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   28a20:	sub	sp, fp, #28
   28a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a28:	add	r4, r1, #2
   28a2c:	mov	r7, #1
   28a30:	cmp	r4, ip
   28a34:	beq	28a94 <flatcc_json_parser_struct_as_root@@Base+0x590>
   28a38:	ldrb	r0, [r4]
   28a3c:	sub	r6, r0, #48	; 0x30
   28a40:	uxtb	r1, r6
   28a44:	mov	r0, #0
   28a48:	cmp	r1, #9
   28a4c:	bhi	28a98 <flatcc_json_parser_struct_as_root@@Base+0x594>
   28a50:	add	r1, r4, #1
   28a54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28a58:	cmp	r4, r0
   28a5c:	beq	289e0 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   28a60:	ldrb	r0, [r1]
   28a64:	sub	r2, r0, #48	; 0x30
   28a68:	uxtb	r2, r2
   28a6c:	cmp	r2, #9
   28a70:	bhi	289e0 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   28a74:	cmp	r6, #32768	; 0x8000
   28a78:	addlt	r2, r6, r6, lsl #2
   28a7c:	addlt	r0, r0, r2, lsl #1
   28a80:	sublt	r6, r0, #48	; 0x30
   28a84:	add	r1, r1, #1
   28a88:	cmp	ip, r1
   28a8c:	bne	28a60 <flatcc_json_parser_struct_as_root@@Base+0x55c>
   28a90:	b	289e0 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   28a94:	mov	r0, #0
   28a98:	sub	sp, fp, #28
   28a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28aa0:	adds	r0, r8, #1
   28aa4:	adc	r6, sl, #0
   28aa8:	cmp	r3, #52	; 0x34
   28aac:	movls	r0, r8
   28ab0:	movls	r6, sl
   28ab4:	mov	r2, #1
   28ab8:	str	r2, [sp, #36]	; 0x24
   28abc:	b	288ec <flatcc_json_parser_struct_as_root@@Base+0x3e8>
   28ac0:	mov	r2, #0
   28ac4:	str	r2, [r1]
   28ac8:	str	r2, [r1, #4]
   28acc:	bx	lr
   28ad0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28ad4:	add	fp, sp, #24
   28ad8:	sub	sp, sp, #16
   28adc:	mov	r5, r2
   28ae0:	mov	r4, r1
   28ae4:	mov	r6, r0
   28ae8:	ldr	r1, [fp, #12]
   28aec:	ldr	r0, [fp, #8]
   28af0:	vmov.i32	d0, #0	; 0x00000000
   28af4:	orrs	r2, r0, r1
   28af8:	ldr	r9, [fp, #28]
   28afc:	beq	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28b00:	ldr	r7, [fp, #16]
   28b04:	cmn	r7, #324	; 0x144
   28b08:	blt	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28b0c:	movw	r2, #311	; 0x137
   28b10:	cmp	r7, r2
   28b14:	blt	28b48 <flatcc_json_parser_struct_as_root@@Base+0x644>
   28b18:	movw	r1, #0
   28b1c:	movt	r1, #32752	; 0x7ff0
   28b20:	mov	r0, #0
   28b24:	bl	285b8 <flatcc_json_parser_struct_as_root@@Base+0xb4>
   28b28:	vstr	d0, [r9]
   28b2c:	cmp	r5, #0
   28b30:	vldrne	d16, [r9]
   28b34:	vnegne.f64	d16, d16
   28b38:	vstrne	d16, [r9]
   28b3c:	mov	r0, r4
   28b40:	sub	sp, fp, #24
   28b44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28b48:	ldr	r8, [fp, #20]
   28b4c:	mov	r2, #0
   28b50:	cmp	r2, r1, lsr #21
   28b54:	bne	28c3c <flatcc_json_parser_struct_as_root@@Base+0x738>
   28b58:	cmp	r7, #22
   28b5c:	bhi	28c3c <flatcc_json_parser_struct_as_root@@Base+0x738>
   28b60:	bl	30f54 <flatcc_json_printer_clear@@Base+0x1238>
   28b64:	sub	r2, r7, r8
   28b68:	vmov	d0, r0, r1
   28b6c:	add	r0, r2, #22
   28b70:	cmp	r0, #44	; 0x2c
   28b74:	bhi	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28b78:	add	r1, pc, #0
   28b7c:	ldr	pc, [r1, r0, lsl #2]
   28b80:	andeq	r8, r2, r4, lsr ip
   28b84:	andeq	r8, r2, r8, ror ip
   28b88:	andeq	r8, r2, r0, lsl #25
   28b8c:	andeq	r8, r2, r8, lsl #25
   28b90:	muleq	r2, r0, ip
   28b94:	muleq	r2, r8, ip
   28b98:	andeq	r8, r2, r0, lsr #25
   28b9c:	andeq	r8, r2, r8, lsr #25
   28ba0:			; <UNDEFINED> instruction: 0x00028cb0
   28ba4:			; <UNDEFINED> instruction: 0x00028cb8
   28ba8:	andeq	r8, r2, r0, asr #25
   28bac:	andeq	r8, r2, r8, asr #25
   28bb0:	ldrdeq	r8, [r2], -r0
   28bb4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28bb8:	andeq	r8, r2, r0, ror #25
   28bbc:	andeq	r8, r2, r8, ror #25
   28bc0:	strdeq	r8, [r2], -r0
   28bc4:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28bc8:	andeq	r8, r2, r0, lsl #26
   28bcc:	andeq	r8, r2, r8, lsl #26
   28bd0:	andeq	r8, r2, r0, lsl sp
   28bd4:	andeq	r8, r2, r8, lsl sp
   28bd8:	andeq	r8, r2, r8, lsr #22
   28bdc:	andeq	r8, r2, r4, lsr #26
   28be0:	andeq	r8, r2, r0, lsr sp
   28be4:	andeq	r8, r2, ip, lsr sp
   28be8:	andeq	r8, r2, r8, asr #26
   28bec:	andeq	r8, r2, r4, asr sp
   28bf0:	andeq	r8, r2, r0, ror #26
   28bf4:	andeq	r8, r2, ip, ror #26
   28bf8:	andeq	r8, r2, r8, ror sp
   28bfc:	andeq	r8, r2, r4, lsl #27
   28c00:	muleq	r2, r0, sp
   28c04:	muleq	r2, ip, sp
   28c08:	andeq	r8, r2, r8, lsr #27
   28c0c:			; <UNDEFINED> instruction: 0x00028db4
   28c10:	andeq	r8, r2, r0, asr #27
   28c14:	andeq	r8, r2, ip, asr #27
   28c18:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28c1c:	andeq	r8, r2, r4, ror #27
   28c20:	strdeq	r8, [r2], -r0
   28c24:	strdeq	r8, [r2], -ip
   28c28:	andeq	r8, r2, r8, lsl #28
   28c2c:	andeq	r8, r2, r4, lsl lr
   28c30:	andeq	r8, r2, r0, lsr #28
   28c34:	vldr	d16, [pc, #660]	; 28ed0 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   28c38:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28c3c:	ldr	r2, [fp, #24]
   28c40:	stm	sp, {r2, r9}
   28c44:	mov	r2, r7
   28c48:	mov	r3, r8
   28c4c:	bl	259f0 <grisu3_diy_fp_encode_double@@Base>
   28c50:	cmp	r0, #0
   28c54:	bne	28b2c <flatcc_json_parser_struct_as_root@@Base+0x628>
   28c58:	add	r1, sp, #12
   28c5c:	mov	r0, r6
   28c60:	bl	14f08 <strtod@plt>
   28c64:	vstr	d0, [r9]
   28c68:	ldr	r0, [sp, #12]
   28c6c:	cmp	r0, r4
   28c70:	movcc	r4, r0
   28c74:	b	28b3c <flatcc_json_parser_struct_as_root@@Base+0x638>
   28c78:	vldr	d16, [pc, #432]	; 28e30 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   28c7c:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28c80:	vldr	d16, [pc, #432]	; 28e38 <flatcc_json_parser_struct_as_root@@Base+0x934>
   28c84:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28c88:	vldr	d16, [pc, #432]	; 28e40 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   28c8c:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28c90:	vldr	d16, [pc, #432]	; 28e48 <flatcc_json_parser_struct_as_root@@Base+0x944>
   28c94:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28c98:	vldr	d16, [pc, #432]	; 28e50 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   28c9c:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28ca0:	vldr	d16, [pc, #432]	; 28e58 <flatcc_json_parser_struct_as_root@@Base+0x954>
   28ca4:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28ca8:	vldr	d16, [pc, #432]	; 28e60 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   28cac:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28cb0:	vldr	d16, [pc, #432]	; 28e68 <flatcc_json_parser_struct_as_root@@Base+0x964>
   28cb4:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28cb8:	vldr	d16, [pc, #432]	; 28e70 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   28cbc:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28cc0:	vldr	d16, [pc, #432]	; 28e78 <flatcc_json_parser_struct_as_root@@Base+0x974>
   28cc4:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28cc8:	vldr	d16, [pc, #432]	; 28e80 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   28ccc:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28cd0:	vldr	d16, [pc, #432]	; 28e88 <flatcc_json_parser_struct_as_root@@Base+0x984>
   28cd4:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28cd8:	vldr	d16, [pc, #432]	; 28e90 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   28cdc:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28ce0:	vldr	d16, [pc, #432]	; 28e98 <flatcc_json_parser_struct_as_root@@Base+0x994>
   28ce4:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28ce8:	vldr	d16, [pc, #432]	; 28ea0 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   28cec:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28cf0:	vldr	d16, [pc, #432]	; 28ea8 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   28cf4:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28cf8:	vldr	d16, [pc, #432]	; 28eb0 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   28cfc:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d00:	vldr	d16, [pc, #432]	; 28eb8 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   28d04:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d08:	vldr	d16, [pc, #432]	; 28ec0 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   28d0c:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d10:	vldr	d16, [pc, #432]	; 28ec8 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   28d14:	b	28d1c <flatcc_json_parser_struct_as_root@@Base+0x818>
   28d18:	vmov.f64	d16, #36	; 0x41200000  10.0
   28d1c:	vdiv.f64	d0, d0, d16
   28d20:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d24:	vmov.f64	d16, #36	; 0x41200000  10.0
   28d28:	vmul.f64	d0, d0, d16
   28d2c:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d30:	vldr	d16, [pc, #400]	; 28ec8 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   28d34:	vmul.f64	d0, d0, d16
   28d38:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d3c:	vldr	d16, [pc, #380]	; 28ec0 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   28d40:	vmul.f64	d0, d0, d16
   28d44:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d48:	vldr	d16, [pc, #360]	; 28eb8 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   28d4c:	vmul.f64	d0, d0, d16
   28d50:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d54:	vldr	d16, [pc, #340]	; 28eb0 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   28d58:	vmul.f64	d0, d0, d16
   28d5c:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d60:	vldr	d16, [pc, #320]	; 28ea8 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   28d64:	vmul.f64	d0, d0, d16
   28d68:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d6c:	vldr	d16, [pc, #300]	; 28ea0 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   28d70:	vmul.f64	d0, d0, d16
   28d74:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d78:	vldr	d16, [pc, #280]	; 28e98 <flatcc_json_parser_struct_as_root@@Base+0x994>
   28d7c:	vmul.f64	d0, d0, d16
   28d80:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d84:	vldr	d16, [pc, #260]	; 28e90 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   28d88:	vmul.f64	d0, d0, d16
   28d8c:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d90:	vldr	d16, [pc, #240]	; 28e88 <flatcc_json_parser_struct_as_root@@Base+0x984>
   28d94:	vmul.f64	d0, d0, d16
   28d98:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28d9c:	vldr	d16, [pc, #220]	; 28e80 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   28da0:	vmul.f64	d0, d0, d16
   28da4:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28da8:	vldr	d16, [pc, #200]	; 28e78 <flatcc_json_parser_struct_as_root@@Base+0x974>
   28dac:	vmul.f64	d0, d0, d16
   28db0:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28db4:	vldr	d16, [pc, #180]	; 28e70 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   28db8:	vmul.f64	d0, d0, d16
   28dbc:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28dc0:	vldr	d16, [pc, #160]	; 28e68 <flatcc_json_parser_struct_as_root@@Base+0x964>
   28dc4:	vmul.f64	d0, d0, d16
   28dc8:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28dcc:	vldr	d16, [pc, #140]	; 28e60 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   28dd0:	vmul.f64	d0, d0, d16
   28dd4:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28dd8:	vldr	d16, [pc, #120]	; 28e58 <flatcc_json_parser_struct_as_root@@Base+0x954>
   28ddc:	vmul.f64	d0, d0, d16
   28de0:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28de4:	vldr	d16, [pc, #100]	; 28e50 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   28de8:	vmul.f64	d0, d0, d16
   28dec:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28df0:	vldr	d16, [pc, #80]	; 28e48 <flatcc_json_parser_struct_as_root@@Base+0x944>
   28df4:	vmul.f64	d0, d0, d16
   28df8:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28dfc:	vldr	d16, [pc, #60]	; 28e40 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   28e00:	vmul.f64	d0, d0, d16
   28e04:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28e08:	vldr	d16, [pc, #40]	; 28e38 <flatcc_json_parser_struct_as_root@@Base+0x934>
   28e0c:	vmul.f64	d0, d0, d16
   28e10:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28e14:	vldr	d16, [pc, #20]	; 28e30 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   28e18:	vmul.f64	d0, d0, d16
   28e1c:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28e20:	vldr	d16, [pc, #168]	; 28ed0 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   28e24:	vmul.f64	d0, d0, d16
   28e28:	b	28b28 <flatcc_json_parser_struct_as_root@@Base+0x624>
   28e2c:	nop	{0}
   28e30:	usatle	lr, #2, r0, asr #30
   28e34:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   28e38:	ldmvc	r5!, {r6, sl, fp, pc}
   28e3c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   28e40:	addsvs	r3, r1, r0, lsl #26
   28e44:	mvnmi	r5, #228, 16	; 0xe40000
   28e48:	strbvs	ip, [lr, -r0, lsl #16]
   28e4c:			; <UNDEFINED> instruction: 0x43abc16d
   28e50:	ldrbhi	sl, [r8]
   28e54:	cmnmi	r6, #1459617792	; 0x57000000
   28e58:	strbcc	r8, [r0, r0]!
   28e5c:	movtmi	ip, #4985	; 0x1379
   28e60:	ldrtcs	r0, [r4], -r0
   28e64:	movwmi	r6, #52213	; 0xcbf5
   28e68:	cdpne	0, 9, cr0, cr0, cr0, {0}
   28e6c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   28e70:	strb	r0, [r0, #-0]
   28e74:	adcmi	r3, r2, #156	; 0x9c
   28e78:	andge	r0, r0, #0
   28e7c:	rsbmi	r1, sp, #148, 20	; 0x94000
   28e80:	stmda	r0, {}	; <UNPREDICTABLE>
   28e84:	eorsmi	r4, r7, #7733248	; 0x760000
   28e88:	andcs	r0, r0, r0
   28e8c:	andmi	sl, r2, #95	; 0x5f
   28e90:	andeq	r0, r0, r0
   28e94:	bicmi	ip, sp, r5, ror #26
   28e98:	andeq	r0, r0, r0
   28e9c:	orrsmi	sp, r7, r4, lsl #15
   28ea0:	andeq	r0, r0, r0
   28ea4:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   28ea8:	andeq	r0, r0, r0
   28eac:	smlawbmi	lr, r0, r4, r8
   28eb0:	andeq	r0, r0, r0
   28eb4:	rscsmi	r6, r8, r0, lsl #20
   28eb8:	andeq	r0, r0, r0
   28ebc:	sbcmi	r8, r3, r0, lsl #16
   28ec0:	andeq	r0, r0, r0
   28ec4:	addmi	r4, pc, r0
   28ec8:	andeq	r0, r0, r0
   28ecc:	subsmi	r0, r9, r0
   28ed0:			; <UNDEFINED> instruction: 0x064dd592
   28ed4:	strmi	pc, [r0], #207	; 0xcf
   28ed8:	push	{fp, lr}
   28edc:	mov	fp, sp
   28ee0:	cmp	r3, #0
   28ee4:	beq	28ef4 <flatcc_json_parser_struct_as_root@@Base+0x9f0>
   28ee8:	mov	r3, #8
   28eec:	pop	{fp, lr}
   28ef0:	b	25f60 <flatcc_json_parser_set_error@@Base>
   28ef4:	ldr	ip, [fp, #12]
   28ef8:	ldr	lr, [fp, #8]
   28efc:	subs	r3, lr, #256	; 0x100
   28f00:	sbcs	r3, ip, #0
   28f04:	ldrcc	r0, [fp, #16]
   28f08:	strbcc	lr, [r0]
   28f0c:	movcc	r0, r1
   28f10:	popcc	{fp, pc}
   28f14:	mov	r3, #7
   28f18:	pop	{fp, lr}
   28f1c:	b	25f60 <flatcc_json_parser_set_error@@Base>
   28f20:	push	{r4, r5, fp, lr}
   28f24:	add	fp, sp, #8
   28f28:	mov	r4, r2
   28f2c:	mov	r5, r0
   28f30:	bl	26da8 <flatcc_json_parser_float@@Base+0x140>
   28f34:	mov	r1, r0
   28f38:	mov	r0, r5
   28f3c:	mov	r2, r4
   28f40:	pop	{r4, r5, fp, lr}
   28f44:	b	26554 <flatcc_json_parser_skip_constant@@Base+0x8c>
   28f48:	bx	lr
   28f4c:	andeq	r0, r0, r0

00028f50 <flatcc_json_printer_error_string@@Base>:
   28f50:	cmp	r0, #3
   28f54:	movwhi	r0, #23530	; 0x5bea
   28f58:	movthi	r0, #3
   28f5c:	bxhi	lr
   28f60:	movw	r1, #30812	; 0x785c
   28f64:	movt	r1, #3
   28f68:	ldr	r0, [r1, r0, lsl #2]
   28f6c:	bx	lr

00028f70 <flatcc_json_printer_fmt_float@@Base>:
   28f70:	vcvt.f64.f32	d0, s0
   28f74:	b	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   28f78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28f7c:	add	fp, sp, #24
   28f80:	vpush	{d8}
   28f84:	sub	sp, sp, #8
   28f88:	mov	r4, r0
   28f8c:	vmov.f64	d8, d0
   28f90:	bl	2fd5c <flatcc_json_printer_clear@@Base+0x40>
   28f94:	cmp	r4, #0
   28f98:	beq	29218 <flatcc_json_printer_fmt_float@@Base+0x2a8>
   28f9c:	mov	r3, r0
   28fa0:	mov	r2, r1
   28fa4:	mov	r0, #-2147483648	; 0x80000000
   28fa8:	add	r1, r0, #266338304	; 0xfe00000
   28fac:	add	r1, r1, #1879048192	; 0x70000000
   28fb0:	lsl	r7, r2, #1
   28fb4:	orr	r7, r7, r3, lsr #31
   28fb8:	mov	r6, #0
   28fbc:	subs	r6, r6, r3, lsl #1
   28fc0:	sbcs	r1, r1, r7
   28fc4:	bcs	28fdc <flatcc_json_printer_fmt_float@@Base+0x6c>
   28fc8:	movw	r1, #28607	; 0x6fbf
   28fcc:	movt	r1, #3
   28fd0:	mov	r0, r4
   28fd4:	bl	14f2c <sprintf@plt>
   28fd8:	b	2920c <flatcc_json_printer_fmt_float@@Base+0x29c>
   28fdc:	cmn	r2, #1
   28fe0:	ble	28fec <flatcc_json_printer_fmt_float@@Base+0x7c>
   28fe4:	mov	r5, r4
   28fe8:	b	29000 <flatcc_json_printer_fmt_float@@Base+0x90>
   28fec:	mov	r1, #45	; 0x2d
   28ff0:	vneg.f64	d8, d8
   28ff4:	mov	r5, r4
   28ff8:	strb	r1, [r5], #1
   28ffc:	eor	r2, r2, r0
   29000:	eor	r0, r2, #267386880	; 0xff00000
   29004:	eor	r0, r0, #1879048192	; 0x70000000
   29008:	orrs	r0, r3, r0
   2900c:	beq	29024 <flatcc_json_printer_fmt_float@@Base+0xb4>
   29010:	orrs	r0, r3, r2
   29014:	bne	29034 <flatcc_json_printer_fmt_float@@Base+0xc4>
   29018:	mov	r0, #48	; 0x30
   2901c:	strh	r0, [r5], #1
   29020:	b	29208 <flatcc_json_printer_fmt_float@@Base+0x298>
   29024:	movw	r0, #28265	; 0x6e69
   29028:	movt	r0, #102	; 0x66
   2902c:	str	r0, [r5], #3
   29030:	b	29208 <flatcc_json_printer_fmt_float@@Base+0x298>
   29034:	mov	r1, sp
   29038:	add	r2, sp, #4
   2903c:	vmov.f64	d0, d8
   29040:	mov	r0, r5
   29044:	bl	2fd68 <flatcc_json_printer_clear@@Base+0x4c>
   29048:	cmp	r0, #0
   2904c:	beq	290a4 <flatcc_json_printer_fmt_float@@Base+0x134>
   29050:	ldr	r8, [sp]
   29054:	sub	r0, r8, #1
   29058:	cmp	r8, #3
   2905c:	movwlt	r0, #1
   29060:	ldr	r7, [sp, #4]
   29064:	rsb	r6, r7, #0
   29068:	cmp	r0, r6
   2906c:	movge	r0, r6
   29070:	cmn	r7, #1
   29074:	ble	290c4 <flatcc_json_printer_fmt_float@@Base+0x154>
   29078:	cmp	r7, #3
   2907c:	bcc	29130 <flatcc_json_printer_fmt_float@@Base+0x1c0>
   29080:	mov	r0, #101	; 0x65
   29084:	strb	r0, [r5, r8]
   29088:	add	r6, r8, #1
   2908c:	add	r1, r5, r6
   29090:	mov	r0, r7
   29094:	bl	2ffd8 <flatcc_json_printer_clear@@Base+0x2bc>
   29098:	add	r0, r0, r6
   2909c:	str	r0, [sp]
   290a0:	b	291fc <flatcc_json_printer_fmt_float@@Base+0x28c>
   290a4:	vmov	r2, r3, d8
   290a8:	movw	r1, #28621	; 0x6fcd
   290ac:	movt	r1, #3
   290b0:	mov	r0, r5
   290b4:	bl	14f2c <sprintf@plt>
   290b8:	sub	r1, r5, r4
   290bc:	add	r0, r1, r0
   290c0:	b	2920c <flatcc_json_printer_fmt_float@@Base+0x29c>
   290c4:	cmp	r8, r6
   290c8:	bgt	2918c <flatcc_json_printer_fmt_float@@Base+0x21c>
   290cc:	add	r1, r8, r7
   290d0:	cmn	r1, #2
   290d4:	blt	2918c <flatcc_json_printer_fmt_float@@Base+0x21c>
   290d8:	rsb	r0, r8, #0
   290dc:	add	r1, r5, r6
   290e0:	add	r0, r1, r0
   290e4:	add	r0, r0, #2
   290e8:	mov	r1, r5
   290ec:	mov	r2, r8
   290f0:	bl	14e48 <memmove@plt>
   290f4:	movw	r0, #11824	; 0x2e30
   290f8:	strh	r0, [r5]
   290fc:	rsb	r0, r7, #2
   29100:	sub	r7, r0, r8
   29104:	mov	r0, #2
   29108:	cmp	r7, #3
   2910c:	blt	29124 <flatcc_json_printer_fmt_float@@Base+0x1b4>
   29110:	sub	r2, r6, r8
   29114:	add	r0, r5, #2
   29118:	mov	r1, #48	; 0x30
   2911c:	bl	14ef0 <memset@plt>
   29120:	mov	r0, r7
   29124:	add	r0, r0, r8
   29128:	str	r0, [sp]
   2912c:	b	291fc <flatcc_json_printer_fmt_float@@Base+0x28c>
   29130:	cmp	r7, #0
   29134:	beq	291fc <flatcc_json_printer_fmt_float@@Base+0x28c>
   29138:	ldr	r0, [sp, #4]
   2913c:	subs	r0, r0, #1
   29140:	str	r0, [sp, #4]
   29144:	blt	291fc <flatcc_json_printer_fmt_float@@Base+0x28c>
   29148:	ldr	r6, [sp]
   2914c:	add	r0, r5, r6
   29150:	ldr	r7, [sp, #4]
   29154:	mvn	r1, r7
   29158:	orr	r1, r1, r1, asr #31
   2915c:	add	r1, r7, r1
   29160:	add	r2, r1, #2
   29164:	mov	r1, #48	; 0x30
   29168:	bl	14ef0 <memset@plt>
   2916c:	sub	r0, r7, #1
   29170:	add	r6, r6, #1
   29174:	cmp	r7, #0
   29178:	mov	r7, r0
   2917c:	bgt	2916c <flatcc_json_printer_fmt_float@@Base+0x1fc>
   29180:	str	r0, [sp, #4]
   29184:	str	r6, [sp]
   29188:	b	291fc <flatcc_json_printer_fmt_float@@Base+0x28c>
   2918c:	cmn	r7, #1
   29190:	bgt	29080 <flatcc_json_printer_fmt_float@@Base+0x110>
   29194:	cmp	r8, #2
   29198:	blt	29080 <flatcc_json_printer_fmt_float@@Base+0x110>
   2919c:	cmp	r0, #1
   291a0:	blt	291c8 <flatcc_json_printer_fmt_float@@Base+0x258>
   291a4:	add	r2, r5, r8
   291a8:	mov	r1, #0
   291ac:	mov	r3, r2
   291b0:	ldrb	r6, [r3, #-1]!
   291b4:	strb	r6, [r2]
   291b8:	add	r1, r1, #1
   291bc:	cmp	r1, r0
   291c0:	mov	r2, r3
   291c4:	blt	291b0 <flatcc_json_printer_fmt_float@@Base+0x240>
   291c8:	add	r1, r8, #1
   291cc:	str	r1, [sp]
   291d0:	sub	r2, r8, r0
   291d4:	mov	r3, #46	; 0x2e
   291d8:	strb	r3, [r5, r2]
   291dc:	adds	r0, r0, r7
   291e0:	str	r0, [sp, #4]
   291e4:	beq	291fc <flatcc_json_printer_fmt_float@@Base+0x28c>
   291e8:	mov	r2, #101	; 0x65
   291ec:	strb	r2, [r5, r1]
   291f0:	add	r6, r8, #2
   291f4:	add	r1, r5, r6
   291f8:	b	29094 <flatcc_json_printer_fmt_float@@Base+0x124>
   291fc:	ldr	r0, [sp]
   29200:	mov	r1, #0
   29204:	strb	r1, [r5, r0]!
   29208:	sub	r0, r5, r4
   2920c:	sub	sp, fp, #32
   29210:	vpop	{d8}
   29214:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29218:	movw	r0, #28476	; 0x6f3c
   2921c:	movt	r0, #3
   29220:	movw	r1, #28480	; 0x6f40
   29224:	movt	r1, #3
   29228:	movw	r3, #28567	; 0x6f97
   2922c:	movt	r3, #3
   29230:	mov	r2, #189	; 0xbd
   29234:	bl	14f44 <__assert_fail@plt>

00029238 <flatcc_json_printer_fmt_double@@Base>:
   29238:	b	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>

0002923c <flatcc_json_printer_fmt_bool@@Base>:
   2923c:	cmp	r1, #0
   29240:	movwne	r1, #29300	; 0x7274
   29244:	movtne	r1, #25973	; 0x6575
   29248:	strne	r1, [r0]
   2924c:	movne	r0, #4
   29250:	bxne	lr
   29254:	mov	r1, #101	; 0x65
   29258:	strb	r1, [r0, #4]
   2925c:	movw	r1, #24934	; 0x6166
   29260:	movt	r1, #29548	; 0x736c
   29264:	str	r1, [r0]
   29268:	mov	r0, #5
   2926c:	bx	lr

00029270 <flatcc_json_printer_string@@Base>:
   29270:	b	29274 <flatcc_json_printer_string@@Base+0x4>
   29274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29278:	add	fp, sp, #28
   2927c:	sub	sp, sp, #4
   29280:	mov	r5, r2
   29284:	mov	r4, r0
   29288:	mov	r7, r0
   2928c:	ldr	r0, [r7, #20]!
   29290:	add	r2, r0, #1
   29294:	str	r2, [r7]
   29298:	mov	r2, #34	; 0x22
   2929c:	strb	r2, [r0]
   292a0:	mov	r9, #92	; 0x5c
   292a4:	b	292b0 <flatcc_json_printer_string@@Base+0x40>
   292a8:	sub	r5, r0, #1
   292ac:	add	r1, r8, #1
   292b0:	ldrb	sl, [r1]
   292b4:	mov	r8, r1
   292b8:	cmp	sl, #32
   292bc:	bcc	292dc <flatcc_json_printer_string@@Base+0x6c>
   292c0:	uxtb	r0, sl
   292c4:	cmp	r0, #34	; 0x22
   292c8:	cmpne	r0, #92	; 0x5c
   292cc:	beq	292dc <flatcc_json_printer_string@@Base+0x6c>
   292d0:	ldrb	sl, [r8, #1]!
   292d4:	cmp	sl, #31
   292d8:	bhi	292c0 <flatcc_json_printer_string@@Base+0x50>
   292dc:	sub	r6, r8, r1
   292e0:	mov	r0, r4
   292e4:	mov	r2, r6
   292e8:	bl	294ac <flatcc_json_printer_write@@Base+0x4>
   292ec:	ldr	r1, [r4, #20]
   292f0:	add	r0, r1, #1
   292f4:	str	r0, [r4, #20]
   292f8:	subs	r0, r5, r6
   292fc:	beq	29498 <flatcc_json_printer_string@@Base+0x228>
   29300:	strb	r9, [r1]
   29304:	mvn	r1, #7
   29308:	uxtab	r1, r1, sl
   2930c:	cmp	r1, #26
   29310:	bhi	2939c <flatcc_json_printer_string@@Base+0x12c>
   29314:	add	r2, pc, #0
   29318:	ldr	pc, [r2, r1, lsl #2]
   2931c:	andeq	r9, r2, r8, lsl #7
   29320:	andeq	r9, r2, r0, lsr r4
   29324:	andeq	r9, r2, r4, asr #8
   29328:			; <UNDEFINED> instruction: 0x000293bc
   2932c:	andeq	r9, r2, r8, asr r4
   29330:	andeq	r9, r2, ip, ror #8
   29334:			; <UNDEFINED> instruction: 0x000293bc
   29338:			; <UNDEFINED> instruction: 0x000293bc
   2933c:			; <UNDEFINED> instruction: 0x000293bc
   29340:			; <UNDEFINED> instruction: 0x000293bc
   29344:			; <UNDEFINED> instruction: 0x000293bc
   29348:			; <UNDEFINED> instruction: 0x000293bc
   2934c:			; <UNDEFINED> instruction: 0x000293bc
   29350:			; <UNDEFINED> instruction: 0x000293bc
   29354:			; <UNDEFINED> instruction: 0x000293bc
   29358:			; <UNDEFINED> instruction: 0x000293bc
   2935c:			; <UNDEFINED> instruction: 0x000293bc
   29360:			; <UNDEFINED> instruction: 0x000293bc
   29364:			; <UNDEFINED> instruction: 0x000293bc
   29368:			; <UNDEFINED> instruction: 0x000293bc
   2936c:			; <UNDEFINED> instruction: 0x000293bc
   29370:			; <UNDEFINED> instruction: 0x000293bc
   29374:			; <UNDEFINED> instruction: 0x000293bc
   29378:			; <UNDEFINED> instruction: 0x000293bc
   2937c:			; <UNDEFINED> instruction: 0x000293bc
   29380:			; <UNDEFINED> instruction: 0x000293bc
   29384:	andeq	r9, r2, r0, lsl #9
   29388:	ldr	r1, [r7]
   2938c:	add	r2, r1, #1
   29390:	str	r2, [r7]
   29394:	mov	r2, #98	; 0x62
   29398:	b	29490 <flatcc_json_printer_string@@Base+0x220>
   2939c:	uxtb	r1, sl
   293a0:	cmp	r1, #92	; 0x5c
   293a4:	bne	293bc <flatcc_json_printer_string@@Base+0x14c>
   293a8:	ldr	r1, [r7]
   293ac:	add	r2, r1, #1
   293b0:	str	r2, [r7]
   293b4:	strb	r9, [r1]
   293b8:	b	292a8 <flatcc_json_printer_string@@Base+0x38>
   293bc:	ldr	r1, [r7]
   293c0:	add	r2, r1, #1
   293c4:	str	r2, [r7]
   293c8:	mov	r2, #117	; 0x75
   293cc:	strb	r2, [r1]
   293d0:	ldr	r1, [r7]
   293d4:	add	r2, r1, #1
   293d8:	str	r2, [r7]
   293dc:	mov	r3, #48	; 0x30
   293e0:	strb	r3, [r1]
   293e4:	ldr	r1, [r7]
   293e8:	add	r2, r1, #1
   293ec:	str	r2, [r7]
   293f0:	strb	r3, [r1]
   293f4:	ldr	r1, [r7]
   293f8:	add	r2, r1, #1
   293fc:	str	r2, [r7]
   29400:	and	r2, sl, #240	; 0xf0
   29404:	orr	r2, r3, r2, lsr #4
   29408:	strb	r2, [r1]
   2940c:	ldr	r1, [r7]
   29410:	add	r2, r1, #1
   29414:	str	r2, [r7]
   29418:	and	r2, sl, #15
   2941c:	cmp	r2, #10
   29420:	mov	r3, #87	; 0x57
   29424:	movwcc	r3, #48	; 0x30
   29428:	add	r2, r3, r2
   2942c:	b	29490 <flatcc_json_printer_string@@Base+0x220>
   29430:	ldr	r1, [r7]
   29434:	add	r2, r1, #1
   29438:	str	r2, [r7]
   2943c:	mov	r2, #116	; 0x74
   29440:	b	29490 <flatcc_json_printer_string@@Base+0x220>
   29444:	ldr	r1, [r7]
   29448:	add	r2, r1, #1
   2944c:	str	r2, [r7]
   29450:	mov	r2, #110	; 0x6e
   29454:	b	29490 <flatcc_json_printer_string@@Base+0x220>
   29458:	ldr	r1, [r7]
   2945c:	add	r2, r1, #1
   29460:	str	r2, [r7]
   29464:	mov	r2, #102	; 0x66
   29468:	b	29490 <flatcc_json_printer_string@@Base+0x220>
   2946c:	ldr	r1, [r7]
   29470:	add	r2, r1, #1
   29474:	str	r2, [r7]
   29478:	mov	r2, #114	; 0x72
   2947c:	b	29490 <flatcc_json_printer_string@@Base+0x220>
   29480:	ldr	r1, [r7]
   29484:	add	r2, r1, #1
   29488:	str	r2, [r7]
   2948c:	mov	r2, #34	; 0x22
   29490:	strb	r2, [r1]
   29494:	b	292a8 <flatcc_json_printer_string@@Base+0x38>
   29498:	mov	r0, #34	; 0x22
   2949c:	strb	r0, [r1]
   294a0:	sub	sp, fp, #28
   294a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000294a8 <flatcc_json_printer_write@@Base>:
   294a8:	b	294ac <flatcc_json_printer_write@@Base+0x4>
   294ac:	push	{r4, r5, fp, lr}
   294b0:	add	fp, sp, #8
   294b4:	mov	r4, r2
   294b8:	mov	r5, r0
   294bc:	ldr	r2, [r0, #16]
   294c0:	ldr	r0, [r0, #20]
   294c4:	add	r3, r0, r4
   294c8:	cmp	r3, r2
   294cc:	bcs	294e8 <flatcc_json_printer_write@@Base+0x40>
   294d0:	mov	r2, r4
   294d4:	bl	14e60 <memcpy@plt>
   294d8:	ldr	r0, [r5, #20]
   294dc:	add	r0, r0, r4
   294e0:	str	r0, [r5, #20]
   294e4:	pop	{r4, r5, fp, pc}
   294e8:	mov	r0, r5
   294ec:	mov	r2, r4
   294f0:	pop	{r4, r5, fp, lr}
   294f4:	b	308b8 <flatcc_json_printer_clear@@Base+0xb9c>

000294f8 <flatcc_json_printer_nl@@Base>:
   294f8:	ldr	r1, [r0, #20]
   294fc:	add	r2, r1, #1
   29500:	str	r2, [r0, #20]
   29504:	mov	r2, #10
   29508:	strb	r2, [r1]
   2950c:	b	29510 <flatcc_json_printer_nl@@Base+0x18>
   29510:	ldr	r1, [r0, #16]
   29514:	ldr	r2, [r0, #20]
   29518:	cmp	r2, r1
   2951c:	bxcc	lr
   29520:	ldr	r2, [r0, #44]	; 0x2c
   29524:	mov	r1, #0
   29528:	bx	r2

0002952c <flatcc_json_printer_char@@Base>:
   2952c:	ldr	r2, [r0, #20]
   29530:	add	r3, r2, #1
   29534:	str	r3, [r0, #20]
   29538:	strb	r1, [r2]
   2953c:	bx	lr

00029540 <flatcc_json_printer_indent@@Base>:
   29540:	b	29544 <flatcc_json_printer_indent@@Base+0x4>
   29544:	push	{r4, r5, r6, sl, fp, lr}
   29548:	add	fp, sp, #16
   2954c:	mov	r4, r0
   29550:	ldr	r1, [r0, #16]
   29554:	ldr	r0, [r0, #20]
   29558:	ldrb	r2, [r4, #25]
   2955c:	ldr	r3, [r4, #32]
   29560:	mla	r5, r3, r2, r0
   29564:	mul	r6, r3, r2
   29568:	cmp	r5, r1
   2956c:	bls	29580 <flatcc_json_printer_indent@@Base+0x40>
   29570:	mov	r0, r4
   29574:	mov	r1, r6
   29578:	pop	{r4, r5, r6, sl, fp, lr}
   2957c:	b	30960 <flatcc_json_printer_clear@@Base+0xc44>
   29580:	mov	r1, #32
   29584:	mov	r2, r6
   29588:	bl	14ef0 <memset@plt>
   2958c:	ldr	r0, [r4, #20]
   29590:	add	r0, r0, r6
   29594:	str	r0, [r4, #20]
   29598:	pop	{r4, r5, r6, sl, fp, pc}

0002959c <flatcc_json_printer_add_level@@Base>:
   2959c:	ldr	r2, [r0, #32]
   295a0:	add	r1, r2, r1
   295a4:	str	r1, [r0, #32]
   295a8:	bx	lr

000295ac <flatcc_json_printer_get_level@@Base>:
   295ac:	ldr	r0, [r0, #32]
   295b0:	bx	lr

000295b4 <flatcc_json_printer_uint8@@Base>:
   295b4:	push	{r4, sl, fp, lr}
   295b8:	add	fp, sp, #8
   295bc:	mov	r2, r1
   295c0:	mov	r4, r0
   295c4:	ldr	r1, [r0, #20]
   295c8:	mov	r0, r2
   295cc:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   295d0:	ldr	r1, [r4, #20]
   295d4:	add	r0, r1, r0
   295d8:	str	r0, [r4, #20]
   295dc:	pop	{r4, sl, fp, pc}
   295e0:	mov	r2, #0
   295e4:	cmp	r0, #100	; 0x64
   295e8:	bcc	29630 <flatcc_json_printer_uint8@@Base+0x7c>
   295ec:	strb	r2, [r1, #3]
   295f0:	movw	r2, #34079	; 0x851f
   295f4:	movt	r2, #20971	; 0x51eb
   295f8:	umull	r2, r3, r0, r2
   295fc:	mov	r2, #48	; 0x30
   29600:	orr	r2, r2, r3, lsr #5
   29604:	strb	r2, [r1]
   29608:	lsr	r2, r3, #5
   2960c:	mov	r3, #100	; 0x64
   29610:	mls	r0, r2, r3, r0
   29614:	movw	r2, #28800	; 0x7080
   29618:	movt	r2, #3
   2961c:	add	r0, r2, r0, lsl #1
   29620:	ldrh	r0, [r0]
   29624:	strh	r0, [r1, #1]
   29628:	mov	r0, #3
   2962c:	bx	lr
   29630:	cmp	r0, #10
   29634:	bcc	29670 <flatcc_json_printer_uint8@@Base+0xbc>
   29638:	strb	r2, [r1, #2]
   2963c:	movw	r2, #34079	; 0x851f
   29640:	movt	r2, #20971	; 0x51eb
   29644:	umull	r2, r3, r0, r2
   29648:	lsr	r2, r3, #5
   2964c:	mov	r3, #100	; 0x64
   29650:	mls	r0, r2, r3, r0
   29654:	movw	r2, #28800	; 0x7080
   29658:	movt	r2, #3
   2965c:	add	r0, r2, r0, lsl #1
   29660:	ldrh	r0, [r0]
   29664:	strh	r0, [r1]
   29668:	mov	r0, #2
   2966c:	bx	lr
   29670:	strb	r2, [r1, #1]
   29674:	add	r0, r0, #48	; 0x30
   29678:	strb	r0, [r1]
   2967c:	mov	r0, #1
   29680:	bx	lr

00029684 <flatcc_json_printer_uint16@@Base>:
   29684:	push	{r4, sl, fp, lr}
   29688:	add	fp, sp, #8
   2968c:	mov	r2, r1
   29690:	mov	r4, r0
   29694:	ldr	r1, [r0, #20]
   29698:	mov	r0, r2
   2969c:	bl	296b0 <flatcc_json_printer_uint16@@Base+0x2c>
   296a0:	ldr	r1, [r4, #20]
   296a4:	add	r0, r1, r0
   296a8:	str	r0, [r4, #20]
   296ac:	pop	{r4, sl, fp, pc}
   296b0:	mov	ip, r0
   296b4:	cmp	r0, #1000	; 0x3e8
   296b8:	bcc	296d0 <flatcc_json_printer_uint16@@Base+0x4c>
   296bc:	movw	r3, #9999	; 0x270f
   296c0:	mov	r0, #4
   296c4:	cmp	ip, r3
   296c8:	movwhi	r0, #5
   296cc:	b	296f4 <flatcc_json_printer_uint16@@Base+0x70>
   296d0:	cmp	ip, #100	; 0x64
   296d4:	bcc	296e8 <flatcc_json_printer_uint16@@Base+0x64>
   296d8:	mov	r0, #0
   296dc:	strb	r0, [r1, #3]!
   296e0:	mov	r0, #3
   296e4:	b	29790 <flatcc_json_printer_uint16@@Base+0x10c>
   296e8:	mov	r0, #1
   296ec:	cmp	ip, #9
   296f0:	movwhi	r0, #2
   296f4:	mov	r3, #0
   296f8:	strb	r3, [r1, r0]!
   296fc:	tst	r0, #1
   29700:	bne	29748 <flatcc_json_printer_uint16@@Base+0xc4>
   29704:	cmp	r0, #2
   29708:	beq	297d0 <flatcc_json_printer_uint16@@Base+0x14c>
   2970c:	cmp	r0, #4
   29710:	bxne	lr
   29714:	movw	r2, #34079	; 0x851f
   29718:	movt	r2, #20971	; 0x51eb
   2971c:	umull	r2, r3, ip, r2
   29720:	lsr	r3, r3, #5
   29724:	mov	r2, #100	; 0x64
   29728:	mls	r2, r3, r2, ip
   2972c:	uxth	ip, r2
   29730:	movw	r2, #28800	; 0x7080
   29734:	movt	r2, #3
   29738:	add	r2, r2, ip, lsl #1
   2973c:	ldrh	r2, [r2]
   29740:	strh	r2, [r1, #-2]!
   29744:	b	297d4 <flatcc_json_printer_uint16@@Base+0x150>
   29748:	cmp	r0, #1
   2974c:	beq	29808 <flatcc_json_printer_uint16@@Base+0x184>
   29750:	cmp	r0, #3
   29754:	beq	29790 <flatcc_json_printer_uint16@@Base+0x10c>
   29758:	cmp	r0, #5
   2975c:	bne	29804 <flatcc_json_printer_uint16@@Base+0x180>
   29760:	movw	r3, #34079	; 0x851f
   29764:	movt	r3, #20971	; 0x51eb
   29768:	umull	r3, r2, ip, r3
   2976c:	lsr	r2, r2, #5
   29770:	mov	r3, #100	; 0x64
   29774:	mls	ip, r2, r3, ip
   29778:	movw	r3, #28800	; 0x7080
   2977c:	movt	r3, #3
   29780:	add	r3, r3, ip, lsl #1
   29784:	ldrh	r3, [r3]
   29788:	strh	r3, [r1, #-2]!
   2978c:	mov	ip, r2
   29790:	uxth	r2, ip
   29794:	movw	r3, #34079	; 0x851f
   29798:	movt	r3, #20971	; 0x51eb
   2979c:	umull	r2, r3, r2, r3
   297a0:	lsr	r3, r3, #5
   297a4:	mov	r2, #100	; 0x64
   297a8:	mls	r2, r3, r2, ip
   297ac:	uxth	ip, r2
   297b0:	movw	r2, #28800	; 0x7080
   297b4:	movt	r2, #3
   297b8:	add	r2, r2, ip, lsl #1
   297bc:	ldrh	r2, [r2]
   297c0:	strh	r2, [r1, #-2]!
   297c4:	add	r2, r3, #48	; 0x30
   297c8:	strb	r2, [r1, #-1]
   297cc:	bx	lr
   297d0:	mov	r3, ip
   297d4:	uxth	ip, r3
   297d8:	movw	r3, #34079	; 0x851f
   297dc:	movt	r3, #20971	; 0x51eb
   297e0:	umull	r3, r2, ip, r3
   297e4:	lsr	r2, r2, #5
   297e8:	mov	r3, #100	; 0x64
   297ec:	mls	r2, r2, r3, ip
   297f0:	movw	r3, #28800	; 0x7080
   297f4:	movt	r3, #3
   297f8:	add	r2, r3, r2, lsl #1
   297fc:	ldrh	r2, [r2]
   29800:	strh	r2, [r1, #-2]
   29804:	bx	lr
   29808:	mov	r3, ip
   2980c:	b	297c4 <flatcc_json_printer_uint16@@Base+0x140>

00029810 <flatcc_json_printer_uint32@@Base>:
   29810:	push	{r4, sl, fp, lr}
   29814:	add	fp, sp, #8
   29818:	mov	r2, r1
   2981c:	mov	r4, r0
   29820:	ldr	r1, [r0, #20]
   29824:	mov	r0, r2
   29828:	bl	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   2982c:	ldr	r1, [r4, #20]
   29830:	add	r0, r1, r0
   29834:	str	r0, [r4, #20]
   29838:	pop	{r4, sl, fp, pc}
   2983c:	mov	ip, r0
   29840:	movw	r0, #10000	; 0x2710
   29844:	cmp	ip, r0
   29848:	bcc	2987c <flatcc_json_printer_uint32@@Base+0x6c>
   2984c:	movw	r0, #38528	; 0x9680
   29850:	movt	r0, #152	; 0x98
   29854:	cmp	ip, r0
   29858:	bcc	29898 <flatcc_json_printer_uint32@@Base+0x88>
   2985c:	movw	r0, #51712	; 0xca00
   29860:	movt	r0, #15258	; 0x3b9a
   29864:	cmp	ip, r0
   29868:	bcc	298c8 <flatcc_json_printer_uint32@@Base+0xb8>
   2986c:	mov	r0, #0
   29870:	strb	r0, [r1, #10]!
   29874:	mov	r0, #10
   29878:	b	29904 <flatcc_json_printer_uint32@@Base+0xf4>
   2987c:	cmp	ip, #100	; 0x64
   29880:	bcc	298b8 <flatcc_json_printer_uint32@@Base+0xa8>
   29884:	lsr	r3, ip, #3
   29888:	mov	r0, #3
   2988c:	cmp	r3, #124	; 0x7c
   29890:	movwhi	r0, #4
   29894:	b	298f4 <flatcc_json_printer_uint32@@Base+0xe4>
   29898:	movw	r0, #16960	; 0x4240
   2989c:	movt	r0, #15
   298a0:	cmp	ip, r0
   298a4:	bcc	298e0 <flatcc_json_printer_uint32@@Base+0xd0>
   298a8:	mov	r0, #0
   298ac:	strb	r0, [r1, #7]!
   298b0:	mov	r0, #7
   298b4:	b	29a38 <flatcc_json_printer_uint32@@Base+0x228>
   298b8:	mov	r0, #1
   298bc:	cmp	ip, #9
   298c0:	movwhi	r0, #2
   298c4:	b	298f4 <flatcc_json_printer_uint32@@Base+0xe4>
   298c8:	movw	r3, #57599	; 0xe0ff
   298cc:	movt	r3, #1525	; 0x5f5
   298d0:	mov	r0, #8
   298d4:	cmp	ip, r3
   298d8:	movwhi	r0, #9
   298dc:	b	298f4 <flatcc_json_printer_uint32@@Base+0xe4>
   298e0:	movw	r3, #34463	; 0x869f
   298e4:	movt	r3, #1
   298e8:	mov	r0, #5
   298ec:	cmp	ip, r3
   298f0:	movwhi	r0, #6
   298f4:	mov	r3, #0
   298f8:	strb	r3, [r1, r0]!
   298fc:	tst	r0, #1
   29900:	bne	29a38 <flatcc_json_printer_uint32@@Base+0x228>
   29904:	lsr	r2, r0, #1
   29908:	orr	r2, r2, r0, lsl #3
   2990c:	eor	r3, r2, #4
   29910:	sbfx	r2, r3, #0, #4
   29914:	cmp	r2, #0
   29918:	blt	29a34 <flatcc_json_printer_uint32@@Base+0x224>
   2991c:	and	r2, r3, #15
   29920:	add	r3, pc, #0
   29924:	ldr	pc, [r3, r2, lsl #2]
   29928:	andeq	r9, r2, r8, ror r9
   2992c:	andeq	r9, r2, r8, asr #18
   29930:	andeq	r9, r2, r4, lsr sl
   29934:	andeq	r9, r2, r4, lsr sl
   29938:	andeq	r9, r2, r4, lsr sl
   2993c:	andeq	r9, r2, r8, lsl #20
   29940:	ldrdeq	r9, [r2], -r8
   29944:	andeq	r9, r2, r8, lsr #19
   29948:	movw	r2, #34079	; 0x851f
   2994c:	movt	r2, #20971	; 0x51eb
   29950:	umull	r2, r3, ip, r2
   29954:	lsr	r2, r3, #5
   29958:	mov	r3, #100	; 0x64
   2995c:	mls	ip, r2, r3, ip
   29960:	movw	r3, #28800	; 0x7080
   29964:	movt	r3, #3
   29968:	add	r3, r3, ip, lsl #1
   2996c:	ldrh	r3, [r3]
   29970:	strh	r3, [r1, #-2]!
   29974:	mov	ip, r2
   29978:	movw	r2, #34079	; 0x851f
   2997c:	movt	r2, #20971	; 0x51eb
   29980:	umull	r2, r3, ip, r2
   29984:	lsr	r2, r3, #5
   29988:	mov	r3, #100	; 0x64
   2998c:	mls	ip, r2, r3, ip
   29990:	movw	r3, #28800	; 0x7080
   29994:	movt	r3, #3
   29998:	add	r3, r3, ip, lsl #1
   2999c:	ldrh	r3, [r3]
   299a0:	strh	r3, [r1, #-2]!
   299a4:	mov	ip, r2
   299a8:	movw	r2, #34079	; 0x851f
   299ac:	movt	r2, #20971	; 0x51eb
   299b0:	umull	r2, r3, ip, r2
   299b4:	lsr	r2, r3, #5
   299b8:	mov	r3, #100	; 0x64
   299bc:	mls	ip, r2, r3, ip
   299c0:	movw	r3, #28800	; 0x7080
   299c4:	movt	r3, #3
   299c8:	add	r3, r3, ip, lsl #1
   299cc:	ldrh	r3, [r3]
   299d0:	strh	r3, [r1, #-2]!
   299d4:	mov	ip, r2
   299d8:	movw	r2, #34079	; 0x851f
   299dc:	movt	r2, #20971	; 0x51eb
   299e0:	umull	r2, r3, ip, r2
   299e4:	lsr	r2, r3, #5
   299e8:	mov	r3, #100	; 0x64
   299ec:	mls	ip, r2, r3, ip
   299f0:	movw	r3, #28800	; 0x7080
   299f4:	movt	r3, #3
   299f8:	add	r3, r3, ip, lsl #1
   299fc:	ldrh	r3, [r3]
   29a00:	strh	r3, [r1, #-2]!
   29a04:	mov	ip, r2
   29a08:	movw	r2, #34079	; 0x851f
   29a0c:	movt	r2, #20971	; 0x51eb
   29a10:	umull	r2, r3, ip, r2
   29a14:	lsr	r2, r3, #5
   29a18:	mov	r3, #100	; 0x64
   29a1c:	mls	r2, r2, r3, ip
   29a20:	movw	r3, #28800	; 0x7080
   29a24:	movt	r3, #3
   29a28:	add	r2, r3, r2, lsl #1
   29a2c:	ldrh	r2, [r2]
   29a30:	strh	r2, [r1, #-2]
   29a34:	bx	lr
   29a38:	add	r3, r0, #7
   29a3c:	ubfx	r2, r3, #1, #3
   29a40:	orr	r3, r2, r3, lsl #3
   29a44:	sbfx	r2, r3, #0, #4
   29a48:	cmp	r2, #0
   29a4c:	bxlt	lr
   29a50:	and	r2, r3, #15
   29a54:	add	r3, pc, #0
   29a58:	ldr	pc, [r3, r2, lsl #2]
   29a5c:	andeq	r9, r2, ip, ror sl
   29a60:	andeq	r9, r2, r4, lsr sl
   29a64:	andeq	r9, r2, r4, lsr sl
   29a68:	andeq	r9, r2, r4, lsr sl
   29a6c:	andeq	r9, r2, ip, lsr fp
   29a70:	andeq	r9, r2, ip, lsl #22
   29a74:	ldrdeq	r9, [r2], -ip
   29a78:	andeq	r9, r2, ip, lsr #21
   29a7c:	movw	r2, #34079	; 0x851f
   29a80:	movt	r2, #20971	; 0x51eb
   29a84:	umull	r2, r3, ip, r2
   29a88:	lsr	r2, r3, #5
   29a8c:	mov	r3, #100	; 0x64
   29a90:	mls	ip, r2, r3, ip
   29a94:	movw	r3, #28800	; 0x7080
   29a98:	movt	r3, #3
   29a9c:	add	r3, r3, ip, lsl #1
   29aa0:	ldrh	r3, [r3]
   29aa4:	strh	r3, [r1, #-2]!
   29aa8:	mov	ip, r2
   29aac:	movw	r2, #34079	; 0x851f
   29ab0:	movt	r2, #20971	; 0x51eb
   29ab4:	umull	r2, r3, ip, r2
   29ab8:	lsr	r2, r3, #5
   29abc:	mov	r3, #100	; 0x64
   29ac0:	mls	ip, r2, r3, ip
   29ac4:	movw	r3, #28800	; 0x7080
   29ac8:	movt	r3, #3
   29acc:	add	r3, r3, ip, lsl #1
   29ad0:	ldrh	r3, [r3]
   29ad4:	strh	r3, [r1, #-2]!
   29ad8:	mov	ip, r2
   29adc:	movw	r2, #34079	; 0x851f
   29ae0:	movt	r2, #20971	; 0x51eb
   29ae4:	umull	r2, r3, ip, r2
   29ae8:	lsr	r2, r3, #5
   29aec:	mov	r3, #100	; 0x64
   29af0:	mls	ip, r2, r3, ip
   29af4:	movw	r3, #28800	; 0x7080
   29af8:	movt	r3, #3
   29afc:	add	r3, r3, ip, lsl #1
   29b00:	ldrh	r3, [r3]
   29b04:	strh	r3, [r1, #-2]!
   29b08:	mov	ip, r2
   29b0c:	movw	r2, #34079	; 0x851f
   29b10:	movt	r2, #20971	; 0x51eb
   29b14:	umull	r2, r3, ip, r2
   29b18:	lsr	r2, r3, #5
   29b1c:	mov	r3, #100	; 0x64
   29b20:	mls	ip, r2, r3, ip
   29b24:	movw	r3, #28800	; 0x7080
   29b28:	movt	r3, #3
   29b2c:	add	r3, r3, ip, lsl #1
   29b30:	ldrh	r3, [r3]
   29b34:	strh	r3, [r1, #-2]!
   29b38:	mov	ip, r2
   29b3c:	add	r2, ip, #48	; 0x30
   29b40:	strb	r2, [r1, #-1]
   29b44:	bx	lr

00029b48 <flatcc_json_printer_uint64@@Base>:
   29b48:	push	{r4, sl, fp, lr}
   29b4c:	add	fp, sp, #8
   29b50:	mov	r1, r3
   29b54:	mov	r3, r2
   29b58:	mov	r4, r0
   29b5c:	ldr	r2, [r0, #20]
   29b60:	mov	r0, r3
   29b64:	bl	29b78 <flatcc_json_printer_uint64@@Base+0x30>
   29b68:	ldr	r1, [r4, #20]
   29b6c:	add	r0, r1, r0
   29b70:	str	r0, [r4, #20]
   29b74:	pop	{r4, sl, fp, pc}
   29b78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29b7c:	add	fp, sp, #24
   29b80:	mov	r4, r2
   29b84:	mov	r7, r0
   29b88:	movw	r0, #51711	; 0xc9ff
   29b8c:	movt	r0, #15258	; 0x3b9a
   29b90:	subs	r0, r0, r7
   29b94:	rscs	r0, r1, #0
   29b98:	bcc	29bac <flatcc_json_printer_uint64@@Base+0x64>
   29b9c:	mov	r0, r7
   29ba0:	mov	r1, r4
   29ba4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   29ba8:	b	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   29bac:	mov	r6, r1
   29bb0:	movw	r0, #2328	; 0x918
   29bb4:	movw	r1, #40960	; 0xa000
   29bb8:	movt	r1, #20082	; 0x4e72
   29bbc:	subs	r1, r7, r1
   29bc0:	sbcs	r0, r6, r0
   29bc4:	bcc	29c24 <flatcc_json_printer_uint64@@Base+0xdc>
   29bc8:	movw	r0, #34546	; 0x86f2
   29bcc:	movt	r0, #35	; 0x23
   29bd0:	movw	r1, #0
   29bd4:	movt	r1, #28609	; 0x6fc1
   29bd8:	subs	r1, r7, r1
   29bdc:	sbcs	r0, r6, r0
   29be0:	bcc	29c54 <flatcc_json_printer_uint64@@Base+0x10c>
   29be4:	movw	r0, #46771	; 0xb6b3
   29be8:	movt	r0, #3552	; 0xde0
   29bec:	movw	r1, #0
   29bf0:	movt	r1, #42852	; 0xa764
   29bf4:	subs	r1, r7, r1
   29bf8:	sbcs	r0, r6, r0
   29bfc:	bcc	29c9c <flatcc_json_printer_uint64@@Base+0x154>
   29c00:	mov	r8, #19
   29c04:	movw	r0, #8964	; 0x2304
   29c08:	movt	r0, #35527	; 0x8ac7
   29c0c:	movw	r1, #65535	; 0xffff
   29c10:	movt	r1, #35303	; 0x89e7
   29c14:	subs	r1, r1, r7
   29c18:	sbcs	r0, r0, r6
   29c1c:	movwcc	r8, #20
   29c20:	b	29cdc <flatcc_json_printer_uint64@@Base+0x194>
   29c24:	movw	r0, #59392	; 0xe800
   29c28:	movt	r0, #18550	; 0x4876
   29c2c:	subs	r0, r7, r0
   29c30:	sbcs	r0, r6, #23
   29c34:	bcc	29c80 <flatcc_json_printer_uint64@@Base+0x138>
   29c38:	mov	r8, #12
   29c3c:	movw	r0, #4095	; 0xfff
   29c40:	movt	r0, #54437	; 0xd4a5
   29c44:	subs	r0, r0, r7
   29c48:	rscs	r0, r6, #232	; 0xe8
   29c4c:	movwcc	r8, #13
   29c50:	b	29cdc <flatcc_json_printer_uint64@@Base+0x194>
   29c54:	movw	r0, #36222	; 0x8d7e
   29c58:	movt	r0, #3
   29c5c:	movw	r1, #32768	; 0x8000
   29c60:	movt	r1, #42182	; 0xa4c6
   29c64:	subs	r1, r7, r1
   29c68:	sbcs	r0, r6, r0
   29c6c:	bcc	29cc0 <flatcc_json_printer_uint64@@Base+0x178>
   29c70:	mov	r0, #0
   29c74:	strb	r0, [r4, #16]!
   29c78:	mov	r8, #16
   29c7c:	b	29d9c <flatcc_json_printer_uint64@@Base+0x254>
   29c80:	mov	r8, #10
   29c84:	movw	r0, #58367	; 0xe3ff
   29c88:	movt	r0, #21515	; 0x540b
   29c8c:	subs	r0, r0, r7
   29c90:	rscs	r0, r6, #2
   29c94:	movwcc	r8, #11
   29c98:	b	29cdc <flatcc_json_printer_uint64@@Base+0x194>
   29c9c:	mov	r8, #17
   29ca0:	movw	r0, #17784	; 0x4578
   29ca4:	movt	r0, #355	; 0x163
   29ca8:	movw	r1, #65535	; 0xffff
   29cac:	movt	r1, #23945	; 0x5d89
   29cb0:	subs	r1, r1, r7
   29cb4:	sbcs	r0, r0, r6
   29cb8:	movwcc	r8, #18
   29cbc:	b	29cdc <flatcc_json_printer_uint64@@Base+0x194>
   29cc0:	mov	r8, #14
   29cc4:	movw	r0, #23283	; 0x5af3
   29cc8:	movw	r1, #16383	; 0x3fff
   29ccc:	movt	r1, #4218	; 0x107a
   29cd0:	subs	r1, r1, r7
   29cd4:	sbcs	r0, r0, r6
   29cd8:	movwcc	r8, #15
   29cdc:	mov	r0, #0
   29ce0:	strb	r0, [r4, r8]!
   29ce4:	tst	r8, #1
   29ce8:	bne	29e80 <flatcc_json_printer_uint64@@Base+0x338>
   29cec:	sub	r0, r8, #10
   29cf0:	cmp	r0, #10
   29cf4:	bhi	29ff4 <flatcc_json_printer_uint64@@Base+0x4ac>
   29cf8:	add	r1, pc, #0
   29cfc:	ldr	pc, [r1, r0, lsl #2]
   29d00:	andeq	r9, r2, r4, asr #28
   29d04:	strdeq	r9, [r2], -r4
   29d08:	andeq	r9, r2, ip, lsl #28
   29d0c:	strdeq	r9, [r2], -r4
   29d10:	ldrdeq	r9, [r2], -r4
   29d14:	strdeq	r9, [r2], -r4
   29d18:	muleq	r2, ip, sp
   29d1c:	strdeq	r9, [r2], -r4
   29d20:	andeq	r9, r2, r4, ror #26
   29d24:	strdeq	r9, [r2], -r4
   29d28:	andeq	r9, r2, ip, lsr #26
   29d2c:	mov	r5, #100	; 0x64
   29d30:	mov	r0, r7
   29d34:	mov	r1, r6
   29d38:	mov	r2, #100	; 0x64
   29d3c:	mov	r3, #0
   29d40:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29d44:	mov	r6, r1
   29d48:	mls	r1, r0, r5, r7
   29d4c:	movw	r2, #28800	; 0x7080
   29d50:	movt	r2, #3
   29d54:	add	r1, r2, r1, lsl #1
   29d58:	ldrh	r1, [r1]
   29d5c:	strh	r1, [r4, #-2]!
   29d60:	mov	r7, r0
   29d64:	mov	r5, #100	; 0x64
   29d68:	mov	r0, r7
   29d6c:	mov	r1, r6
   29d70:	mov	r2, #100	; 0x64
   29d74:	mov	r3, #0
   29d78:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29d7c:	mov	r6, r1
   29d80:	mls	r1, r0, r5, r7
   29d84:	movw	r2, #28800	; 0x7080
   29d88:	movt	r2, #3
   29d8c:	add	r1, r2, r1, lsl #1
   29d90:	ldrh	r1, [r1]
   29d94:	strh	r1, [r4, #-2]!
   29d98:	mov	r7, r0
   29d9c:	mov	r5, #100	; 0x64
   29da0:	mov	r0, r7
   29da4:	mov	r1, r6
   29da8:	mov	r2, #100	; 0x64
   29dac:	mov	r3, #0
   29db0:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29db4:	mov	r6, r1
   29db8:	mls	r1, r0, r5, r7
   29dbc:	movw	r2, #28800	; 0x7080
   29dc0:	movt	r2, #3
   29dc4:	add	r1, r2, r1, lsl #1
   29dc8:	ldrh	r1, [r1]
   29dcc:	strh	r1, [r4, #-2]!
   29dd0:	mov	r7, r0
   29dd4:	mov	r5, #100	; 0x64
   29dd8:	mov	r0, r7
   29ddc:	mov	r1, r6
   29de0:	mov	r2, #100	; 0x64
   29de4:	mov	r3, #0
   29de8:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29dec:	mov	r6, r1
   29df0:	mls	r1, r0, r5, r7
   29df4:	movw	r2, #28800	; 0x7080
   29df8:	movt	r2, #3
   29dfc:	add	r1, r2, r1, lsl #1
   29e00:	ldrh	r1, [r1]
   29e04:	strh	r1, [r4, #-2]!
   29e08:	mov	r7, r0
   29e0c:	mov	r5, #100	; 0x64
   29e10:	mov	r0, r7
   29e14:	mov	r1, r6
   29e18:	mov	r2, #100	; 0x64
   29e1c:	mov	r3, #0
   29e20:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29e24:	mov	r6, r1
   29e28:	mls	r1, r0, r5, r7
   29e2c:	movw	r2, #28800	; 0x7080
   29e30:	movt	r2, #3
   29e34:	add	r1, r2, r1, lsl #1
   29e38:	ldrh	r1, [r1]
   29e3c:	strh	r1, [r4, #-2]!
   29e40:	mov	r7, r0
   29e44:	mov	r5, #100	; 0x64
   29e48:	mov	r0, r7
   29e4c:	mov	r1, r6
   29e50:	mov	r2, #100	; 0x64
   29e54:	mov	r3, #0
   29e58:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29e5c:	mov	r6, r1
   29e60:	mls	r1, r0, r5, r7
   29e64:	movw	r2, #28800	; 0x7080
   29e68:	movt	r2, #3
   29e6c:	add	r1, r2, r1, lsl #1
   29e70:	ldrh	r1, [r1]
   29e74:	strh	r1, [r4, #-2]!
   29e78:	mov	r7, r0
   29e7c:	b	29ff4 <flatcc_json_printer_uint64@@Base+0x4ac>
   29e80:	sub	r0, r8, #11
   29e84:	cmp	r0, #8
   29e88:	bhi	29ff4 <flatcc_json_printer_uint64@@Base+0x4ac>
   29e8c:	add	r1, pc, #0
   29e90:	ldr	pc, [r1, r0, lsl #2]
   29e94:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   29e98:	strdeq	r9, [r2], -r4
   29e9c:	andeq	r9, r2, r8, asr pc
   29ea0:	strdeq	r9, [r2], -r4
   29ea4:	andeq	r9, r2, r0, lsr #30
   29ea8:	strdeq	r9, [r2], -r4
   29eac:	andeq	r9, r2, r8, ror #29
   29eb0:	strdeq	r9, [r2], -r4
   29eb4:			; <UNDEFINED> instruction: 0x00029eb8
   29eb8:	mov	r0, r7
   29ebc:	mov	r1, r6
   29ec0:	mov	r2, #100	; 0x64
   29ec4:	mov	r3, #0
   29ec8:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29ecc:	mov	r7, r0
   29ed0:	mov	r6, r1
   29ed4:	movw	r0, #28800	; 0x7080
   29ed8:	movt	r0, #3
   29edc:	add	r0, r0, r2, lsl #1
   29ee0:	ldrh	r0, [r0]
   29ee4:	strh	r0, [r4, #-2]!
   29ee8:	mov	r5, #100	; 0x64
   29eec:	mov	r0, r7
   29ef0:	mov	r1, r6
   29ef4:	mov	r2, #100	; 0x64
   29ef8:	mov	r3, #0
   29efc:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29f00:	mov	r6, r1
   29f04:	mls	r1, r0, r5, r7
   29f08:	movw	r2, #28800	; 0x7080
   29f0c:	movt	r2, #3
   29f10:	add	r1, r2, r1, lsl #1
   29f14:	ldrh	r1, [r1]
   29f18:	strh	r1, [r4, #-2]!
   29f1c:	mov	r7, r0
   29f20:	mov	r5, #100	; 0x64
   29f24:	mov	r0, r7
   29f28:	mov	r1, r6
   29f2c:	mov	r2, #100	; 0x64
   29f30:	mov	r3, #0
   29f34:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29f38:	mov	r6, r1
   29f3c:	mls	r1, r0, r5, r7
   29f40:	movw	r2, #28800	; 0x7080
   29f44:	movt	r2, #3
   29f48:	add	r1, r2, r1, lsl #1
   29f4c:	ldrh	r1, [r1]
   29f50:	strh	r1, [r4, #-2]!
   29f54:	mov	r7, r0
   29f58:	mov	r5, #100	; 0x64
   29f5c:	mov	r0, r7
   29f60:	mov	r1, r6
   29f64:	mov	r2, #100	; 0x64
   29f68:	mov	r3, #0
   29f6c:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29f70:	mov	r6, r1
   29f74:	mls	r1, r0, r5, r7
   29f78:	movw	r2, #28800	; 0x7080
   29f7c:	movt	r2, #3
   29f80:	add	r1, r2, r1, lsl #1
   29f84:	ldrh	r1, [r1]
   29f88:	strh	r1, [r4, #-2]!
   29f8c:	mov	r7, r0
   29f90:	mov	r9, #100	; 0x64
   29f94:	mov	r0, r7
   29f98:	mov	r1, r6
   29f9c:	mov	r2, #100	; 0x64
   29fa0:	mov	r3, #0
   29fa4:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29fa8:	mov	r5, r0
   29fac:	mov	r2, #10
   29fb0:	mov	r3, #0
   29fb4:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29fb8:	orr	r0, r2, #48	; 0x30
   29fbc:	strb	r0, [r4, #-3]!
   29fc0:	mls	r0, r5, r9, r7
   29fc4:	movw	r1, #28800	; 0x7080
   29fc8:	movt	r1, #3
   29fcc:	add	r0, r1, r0, lsl #1
   29fd0:	ldrh	r0, [r0]
   29fd4:	strh	r0, [r4, #1]
   29fd8:	mov	r0, r7
   29fdc:	mov	r1, r6
   29fe0:	mov	r2, #1000	; 0x3e8
   29fe4:	mov	r3, #0
   29fe8:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   29fec:	mov	r7, r0
   29ff0:	mov	r6, r1
   29ff4:	mov	r5, #100	; 0x64
   29ff8:	mov	r0, r7
   29ffc:	mov	r1, r6
   2a000:	mov	r2, #100	; 0x64
   2a004:	mov	r3, #0
   2a008:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   2a00c:	mls	r2, r0, r5, r7
   2a010:	movw	r5, #28800	; 0x7080
   2a014:	movt	r5, #3
   2a018:	add	r2, r5, r2, lsl #1
   2a01c:	ldrh	r2, [r2]
   2a020:	strh	r2, [r4, #-2]
   2a024:	mov	r2, #100	; 0x64
   2a028:	mov	r3, #0
   2a02c:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   2a030:	add	r0, r5, r2, lsl #1
   2a034:	ldrh	r0, [r0]
   2a038:	strh	r0, [r4, #-4]
   2a03c:	mov	r0, r7
   2a040:	mov	r1, r6
   2a044:	movw	r2, #10000	; 0x2710
   2a048:	mov	r3, #0
   2a04c:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   2a050:	mov	r2, #100	; 0x64
   2a054:	mov	r3, #0
   2a058:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   2a05c:	add	r0, r5, r2, lsl #1
   2a060:	ldrh	r0, [r0]
   2a064:	strh	r0, [r4, #-6]
   2a068:	movw	r2, #16960	; 0x4240
   2a06c:	movt	r2, #15
   2a070:	mov	r0, r7
   2a074:	mov	r1, r6
   2a078:	mov	r3, #0
   2a07c:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   2a080:	mov	r2, #100	; 0x64
   2a084:	mov	r3, #0
   2a088:	bl	31218 <flatcc_json_printer_clear@@Base+0x14fc>
   2a08c:	add	r0, r5, r2, lsl #1
   2a090:	ldrh	r0, [r0]
   2a094:	strh	r0, [r4, #-8]
   2a098:	mov	r0, r8
   2a09c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002a0a0 <flatcc_json_printer_int8@@Base>:
   2a0a0:	push	{r4, sl, fp, lr}
   2a0a4:	add	fp, sp, #8
   2a0a8:	mov	r2, r1
   2a0ac:	mov	r4, r0
   2a0b0:	ldr	r1, [r0, #20]
   2a0b4:	mov	r0, r2
   2a0b8:	bl	2a0cc <flatcc_json_printer_int8@@Base+0x2c>
   2a0bc:	ldr	r1, [r4, #20]
   2a0c0:	add	r0, r1, r0
   2a0c4:	str	r0, [r4, #20]
   2a0c8:	pop	{r4, sl, fp, pc}
   2a0cc:	push	{r4, sl, fp, lr}
   2a0d0:	add	fp, sp, #8
   2a0d4:	ubfx	r4, r0, #7, #1
   2a0d8:	cmn	r0, #1
   2a0dc:	movle	r2, #45	; 0x2d
   2a0e0:	strble	r2, [r1], #1
   2a0e4:	rsble	r0, r0, #0
   2a0e8:	uxtb	r0, r0
   2a0ec:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2a0f0:	add	r0, r0, r4
   2a0f4:	pop	{r4, sl, fp, pc}

0002a0f8 <flatcc_json_printer_int16@@Base>:
   2a0f8:	push	{r4, sl, fp, lr}
   2a0fc:	add	fp, sp, #8
   2a100:	mov	r2, r1
   2a104:	mov	r4, r0
   2a108:	ldr	r1, [r0, #20]
   2a10c:	mov	r0, r2
   2a110:	bl	2a124 <flatcc_json_printer_int16@@Base+0x2c>
   2a114:	ldr	r1, [r4, #20]
   2a118:	add	r0, r1, r0
   2a11c:	str	r0, [r4, #20]
   2a120:	pop	{r4, sl, fp, pc}
   2a124:	push	{r4, sl, fp, lr}
   2a128:	add	fp, sp, #8
   2a12c:	ubfx	r4, r0, #15, #1
   2a130:	cmn	r0, #1
   2a134:	movle	r2, #45	; 0x2d
   2a138:	strble	r2, [r1], #1
   2a13c:	rsble	r0, r0, #0
   2a140:	uxth	r0, r0
   2a144:	bl	296b0 <flatcc_json_printer_uint16@@Base+0x2c>
   2a148:	add	r0, r0, r4
   2a14c:	pop	{r4, sl, fp, pc}

0002a150 <flatcc_json_printer_int32@@Base>:
   2a150:	push	{r4, sl, fp, lr}
   2a154:	add	fp, sp, #8
   2a158:	mov	r2, r1
   2a15c:	mov	r4, r0
   2a160:	ldr	r1, [r0, #20]
   2a164:	mov	r0, r2
   2a168:	bl	2a17c <flatcc_json_printer_int32@@Base+0x2c>
   2a16c:	ldr	r1, [r4, #20]
   2a170:	add	r0, r1, r0
   2a174:	str	r0, [r4, #20]
   2a178:	pop	{r4, sl, fp, pc}
   2a17c:	push	{r4, sl, fp, lr}
   2a180:	add	fp, sp, #8
   2a184:	lsr	r4, r0, #31
   2a188:	cmn	r0, #1
   2a18c:	movle	r2, #45	; 0x2d
   2a190:	strble	r2, [r1], #1
   2a194:	rsble	r0, r0, #0
   2a198:	bl	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   2a19c:	add	r0, r0, r4
   2a1a0:	pop	{r4, sl, fp, pc}

0002a1a4 <flatcc_json_printer_int64@@Base>:
   2a1a4:	push	{r4, sl, fp, lr}
   2a1a8:	add	fp, sp, #8
   2a1ac:	mov	r1, r3
   2a1b0:	mov	r3, r2
   2a1b4:	mov	r4, r0
   2a1b8:	ldr	r2, [r0, #20]
   2a1bc:	mov	r0, r3
   2a1c0:	bl	2a1d4 <flatcc_json_printer_int64@@Base+0x30>
   2a1c4:	ldr	r1, [r4, #20]
   2a1c8:	add	r0, r1, r0
   2a1cc:	str	r0, [r4, #20]
   2a1d0:	pop	{r4, sl, fp, pc}
   2a1d4:	push	{r4, sl, fp, lr}
   2a1d8:	add	fp, sp, #8
   2a1dc:	lsr	r4, r1, #31
   2a1e0:	cmn	r1, #1
   2a1e4:	bgt	2a1f8 <flatcc_json_printer_int64@@Base+0x54>
   2a1e8:	mov	r3, #45	; 0x2d
   2a1ec:	strb	r3, [r2], #1
   2a1f0:	rsbs	r0, r0, #0
   2a1f4:	rsc	r1, r1, #0
   2a1f8:	bl	29b78 <flatcc_json_printer_uint64@@Base+0x30>
   2a1fc:	add	r0, r0, r4
   2a200:	pop	{r4, sl, fp, pc}

0002a204 <flatcc_json_printer_float@@Base>:
   2a204:	push	{r4, sl, fp, lr}
   2a208:	add	fp, sp, #8
   2a20c:	mov	r4, r0
   2a210:	ldr	r0, [r0, #20]
   2a214:	vcvt.f64.f32	d0, s0
   2a218:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2a21c:	ldr	r1, [r4, #20]
   2a220:	add	r0, r1, r0
   2a224:	str	r0, [r4, #20]
   2a228:	pop	{r4, sl, fp, pc}

0002a22c <flatcc_json_printer_double@@Base>:
   2a22c:	push	{r4, sl, fp, lr}
   2a230:	add	fp, sp, #8
   2a234:	mov	r4, r0
   2a238:	ldr	r0, [r0, #20]
   2a23c:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2a240:	ldr	r1, [r4, #20]
   2a244:	add	r0, r1, r0
   2a248:	str	r0, [r4, #20]
   2a24c:	pop	{r4, sl, fp, pc}

0002a250 <flatcc_json_printer_enum@@Base>:
   2a250:	b	2a254 <flatcc_json_printer_enum@@Base+0x4>
   2a254:	push	{r4, r5, fp, lr}
   2a258:	add	fp, sp, #8
   2a25c:	mov	r5, r2
   2a260:	mov	r4, r0
   2a264:	ldr	r0, [r0, #20]
   2a268:	mov	r2, #34	; 0x22
   2a26c:	strb	r2, [r0]
   2a270:	ldrb	r2, [r4, #26]
   2a274:	ldr	r3, [r4, #16]
   2a278:	ldr	r0, [r4, #20]
   2a27c:	cmp	r2, #0
   2a280:	addeq	r0, r0, #1
   2a284:	str	r0, [r4, #20]
   2a288:	add	r2, r0, r5
   2a28c:	cmp	r2, r3
   2a290:	bcs	2a2ac <flatcc_json_printer_enum@@Base+0x5c>
   2a294:	mov	r2, r5
   2a298:	bl	14e60 <memcpy@plt>
   2a29c:	ldr	r0, [r4, #20]
   2a2a0:	add	r0, r0, r5
   2a2a4:	str	r0, [r4, #20]
   2a2a8:	b	2a2b8 <flatcc_json_printer_enum@@Base+0x68>
   2a2ac:	mov	r0, r4
   2a2b0:	mov	r2, r5
   2a2b4:	bl	294ac <flatcc_json_printer_write@@Base+0x4>
   2a2b8:	ldr	r0, [r4, #20]
   2a2bc:	mov	r1, #34	; 0x22
   2a2c0:	strb	r1, [r0]
   2a2c4:	ldrb	r0, [r4, #26]
   2a2c8:	ldr	r1, [r4, #20]
   2a2cc:	cmp	r0, #0
   2a2d0:	addeq	r1, r1, #1
   2a2d4:	str	r1, [r4, #20]
   2a2d8:	pop	{r4, r5, fp, pc}

0002a2dc <flatcc_json_printer_delimit_enum_flags@@Base>:
   2a2dc:	ldrb	ip, [r0, #26]
   2a2e0:	ldr	r3, [r0, #20]
   2a2e4:	mov	r2, #34	; 0x22
   2a2e8:	strb	r2, [r3]
   2a2ec:	cmp	r1, #0
   2a2f0:	movwne	r1, #1
   2a2f4:	clz	r2, ip
   2a2f8:	lsr	r2, r2, #5
   2a2fc:	orr	r1, r1, r2
   2a300:	ldr	r2, [r0, #20]
   2a304:	add	r1, r2, r1
   2a308:	str	r1, [r0, #20]
   2a30c:	bx	lr

0002a310 <flatcc_json_printer_enum_flag@@Base>:
   2a310:	push	{fp, lr}
   2a314:	mov	fp, sp
   2a318:	mov	ip, r3
   2a31c:	mov	lr, r2
   2a320:	ldr	r3, [r0, #20]
   2a324:	mov	r2, #32
   2a328:	strb	r2, [r3]
   2a32c:	ldr	r2, [r0, #20]
   2a330:	cmp	r1, #0
   2a334:	addgt	r2, r2, #1
   2a338:	str	r2, [r0, #20]
   2a33c:	mov	r1, lr
   2a340:	mov	r2, ip
   2a344:	pop	{fp, lr}
   2a348:	b	294ac <flatcc_json_printer_write@@Base+0x4>

0002a34c <flatcc_json_printer_string_field@@Base>:
   2a34c:	push	{r4, r5, r6, r7, fp, lr}
   2a350:	add	fp, sp, #16
   2a354:	mov	r5, r3
   2a358:	mov	r7, r1
   2a35c:	mov	r4, r0
   2a360:	mov	r0, r1
   2a364:	mov	r1, r2
   2a368:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2a36c:	cmp	r0, #0
   2a370:	popeq	{r4, r5, r6, r7, fp, pc}
   2a374:	mov	r6, r0
   2a378:	ldr	r2, [fp, #8]
   2a37c:	ldr	r0, [r7, #16]
   2a380:	add	r1, r0, #1
   2a384:	str	r1, [r7, #16]
   2a388:	cmp	r0, #0
   2a38c:	ldrne	r0, [r4, #20]
   2a390:	addne	r1, r0, #1
   2a394:	strne	r1, [r4, #20]
   2a398:	movne	r1, #44	; 0x2c
   2a39c:	strbne	r1, [r0]
   2a3a0:	mov	r0, r4
   2a3a4:	mov	r1, r5
   2a3a8:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2a3ac:	mov	r0, r6
   2a3b0:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2a3b4:	mov	r1, r0
   2a3b8:	mov	r0, r4
   2a3bc:	pop	{r4, r5, r6, r7, fp, lr}
   2a3c0:	b	2a494 <flatcc_json_printer_string_field@@Base+0x148>
   2a3c4:	push	{r4, r5, fp, lr}
   2a3c8:	add	fp, sp, #8
   2a3cc:	mov	r5, r0
   2a3d0:	mov	r0, #4
   2a3d4:	add	r1, r0, r1, lsl #1
   2a3d8:	ldr	r0, [r5, #8]
   2a3dc:	mov	r4, #0
   2a3e0:	cmp	r1, r0
   2a3e4:	bge	2a3fc <flatcc_json_printer_string_field@@Base+0xb0>
   2a3e8:	ldr	r0, [r5, #4]
   2a3ec:	bl	30a00 <flatcc_json_printer_clear@@Base+0xce4>
   2a3f0:	cmp	r0, #0
   2a3f4:	ldrne	r1, [r5]
   2a3f8:	addne	r4, r1, r0
   2a3fc:	mov	r0, r4
   2a400:	pop	{r4, r5, fp, pc}
   2a404:	push	{r4, r5, r6, sl, fp, lr}
   2a408:	add	fp, sp, #16
   2a40c:	mov	r5, r2
   2a410:	mov	r6, r1
   2a414:	mov	r4, r0
   2a418:	ldrb	r0, [r0, #25]
   2a41c:	cmp	r0, #0
   2a420:	beq	2a444 <flatcc_json_printer_string_field@@Base+0xf8>
   2a424:	ldr	r0, [r4, #20]
   2a428:	add	r1, r0, #1
   2a42c:	str	r1, [r4, #20]
   2a430:	mov	r1, #10
   2a434:	strb	r1, [r0]
   2a438:	mov	r0, r4
   2a43c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2a440:	b	2a44c <flatcc_json_printer_string_field@@Base+0x100>
   2a444:	mov	r0, r4
   2a448:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2a44c:	mov	r0, r4
   2a450:	mov	r1, r6
   2a454:	mov	r2, r5
   2a458:	bl	2a254 <flatcc_json_printer_enum@@Base+0x4>
   2a45c:	ldr	r0, [r4, #20]
   2a460:	add	r1, r0, #1
   2a464:	str	r1, [r4, #20]
   2a468:	mov	r1, #58	; 0x3a
   2a46c:	strb	r1, [r0]
   2a470:	ldr	r0, [r4, #20]
   2a474:	mov	r1, #32
   2a478:	strb	r1, [r0]
   2a47c:	ldrb	r0, [r4, #25]
   2a480:	ldr	r1, [r4, #20]
   2a484:	cmp	r0, #0
   2a488:	addne	r1, r1, #1
   2a48c:	str	r1, [r4, #20]
   2a490:	pop	{r4, r5, r6, sl, fp, pc}
   2a494:	push	{r4, r5, fp, lr}
   2a498:	add	fp, sp, #8
   2a49c:	mov	r4, r1
   2a4a0:	mov	r5, r0
   2a4a4:	mov	r0, r1
   2a4a8:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2a4ac:	mov	r2, r0
   2a4b0:	add	r1, r4, #4
   2a4b4:	mov	r0, r5
   2a4b8:	pop	{r4, r5, fp, lr}
   2a4bc:	b	29274 <flatcc_json_printer_string@@Base+0x4>
   2a4c0:	push	{r4, sl, fp, lr}
   2a4c4:	add	fp, sp, #8
   2a4c8:	mov	r4, r0
   2a4cc:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2a4d0:	add	r0, r4, r0
   2a4d4:	pop	{r4, sl, fp, pc}

0002a4d8 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   2a4d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a4dc:	add	fp, sp, #24
   2a4e0:	mov	r8, r3
   2a4e4:	mov	r6, r1
   2a4e8:	mov	r4, r0
   2a4ec:	mov	r0, r1
   2a4f0:	mov	r1, r2
   2a4f4:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2a4f8:	mov	r7, r0
   2a4fc:	ldr	r0, [fp, #12]
   2a500:	mov	r5, #128	; 0x80
   2a504:	cmp	r0, #0
   2a508:	movwne	r5, #129	; 0x81
   2a50c:	cmp	r7, #0
   2a510:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a514:	ldr	r2, [fp, #8]
   2a518:	ldr	r0, [r6, #16]
   2a51c:	add	r1, r0, #1
   2a520:	str	r1, [r6, #16]
   2a524:	cmp	r0, #0
   2a528:	ldrne	r0, [r4, #20]
   2a52c:	addne	r1, r0, #1
   2a530:	strne	r1, [r4, #20]
   2a534:	movne	r1, #44	; 0x2c
   2a538:	strbne	r1, [r0]
   2a53c:	mov	r0, r4
   2a540:	mov	r1, r8
   2a544:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2a548:	mov	r0, r7
   2a54c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2a550:	mov	r1, r0
   2a554:	mov	r0, r4
   2a558:	mov	r2, r5
   2a55c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a560:	b	2a564 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x8c>
   2a564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a568:	add	fp, sp, #28
   2a56c:	sub	sp, sp, #12
   2a570:	mov	r8, r2
   2a574:	mov	r5, r1
   2a578:	mov	r4, r0
   2a57c:	mov	r0, r1
   2a580:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2a584:	str	r0, [sp, #8]
   2a588:	ldr	r0, [r4, #20]
   2a58c:	add	r1, r0, #1
   2a590:	str	r1, [r4, #20]
   2a594:	mov	r1, #34	; 0x22
   2a598:	strb	r1, [r0]
   2a59c:	ldr	r0, [sp, #8]
   2a5a0:	mov	r1, r8
   2a5a4:	bl	30a14 <flatcc_json_printer_clear@@Base+0xcf8>
   2a5a8:	mov	r7, r0
   2a5ac:	ldr	r0, [r4, #16]
   2a5b0:	ldr	r1, [r4, #20]
   2a5b4:	add	r1, r1, r7
   2a5b8:	cmp	r1, r0
   2a5bc:	bcc	2a5d0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xf8>
   2a5c0:	ldr	r2, [r4, #44]	; 0x2c
   2a5c4:	mov	r0, r4
   2a5c8:	mov	r1, #0
   2a5cc:	blx	r2
   2a5d0:	add	r6, r5, #4
   2a5d4:	ldr	r1, [r4, #16]
   2a5d8:	ldr	r0, [r4, #20]
   2a5dc:	add	r2, r0, r7
   2a5e0:	cmp	r2, r1
   2a5e4:	bls	2a66c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x194>
   2a5e8:	bic	sl, r8, #128	; 0x80
   2a5ec:	add	r9, sp, #4
   2a5f0:	sub	r1, r1, r0
   2a5f4:	bic	r7, r1, #3
   2a5f8:	add	r1, r7, r7, lsl #1
   2a5fc:	cmp	r1, #0
   2a600:	beq	2a69c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1c4>
   2a604:	lsr	r5, r1, #2
   2a608:	str	r5, [sp, #4]
   2a60c:	mov	r1, r6
   2a610:	mov	r2, r9
   2a614:	mov	r3, sl
   2a618:	bl	30a70 <flatcc_json_printer_clear@@Base+0xd54>
   2a61c:	ldr	r0, [r4, #20]
   2a620:	add	r0, r0, r7
   2a624:	str	r0, [r4, #20]
   2a628:	ldr	r0, [sp, #8]
   2a62c:	sub	r0, r0, r5
   2a630:	str	r0, [sp, #8]
   2a634:	ldr	r2, [r4, #44]	; 0x2c
   2a638:	mov	r0, r4
   2a63c:	mov	r1, #0
   2a640:	blx	r2
   2a644:	add	r6, r6, r5
   2a648:	ldr	r0, [sp, #8]
   2a64c:	mov	r1, r8
   2a650:	bl	30a14 <flatcc_json_printer_clear@@Base+0xcf8>
   2a654:	mov	r7, r0
   2a658:	ldr	r1, [r4, #16]
   2a65c:	ldr	r0, [r4, #20]
   2a660:	add	r2, r0, r7
   2a664:	cmp	r2, r1
   2a668:	bhi	2a5f0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x118>
   2a66c:	add	r2, sp, #8
   2a670:	mov	r1, r6
   2a674:	mov	r3, r8
   2a678:	bl	30a70 <flatcc_json_printer_clear@@Base+0xd54>
   2a67c:	ldr	r0, [r4, #20]
   2a680:	add	r1, r0, r7
   2a684:	add	r1, r1, #1
   2a688:	str	r1, [r4, #20]
   2a68c:	mov	r1, #34	; 0x22
   2a690:	strb	r1, [r0, r7]
   2a694:	sub	sp, fp, #28
   2a698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a69c:	movw	r0, #29001	; 0x7149
   2a6a0:	movt	r0, #3
   2a6a4:	movw	r1, #28075	; 0x6dab
   2a6a8:	movt	r1, #3
   2a6ac:	movw	r3, #29007	; 0x714f
   2a6b0:	movt	r3, #3
   2a6b4:	movw	r2, #277	; 0x115
   2a6b8:	bl	14f44 <__assert_fail@plt>

0002a6bc <flatcc_json_printer_uint8_field@@Base>:
   2a6bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a6c0:	add	fp, sp, #24
   2a6c4:	mov	r8, r3
   2a6c8:	mov	r6, r1
   2a6cc:	mov	r4, r0
   2a6d0:	mov	r0, r1
   2a6d4:	mov	r1, r2
   2a6d8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2a6dc:	ldr	r5, [fp, #12]
   2a6e0:	cmp	r0, #0
   2a6e4:	beq	2a708 <flatcc_json_printer_uint8_field@@Base+0x4c>
   2a6e8:	bl	2a768 <flatcc_json_printer_uint8_field@@Base+0xac>
   2a6ec:	mov	r7, r0
   2a6f0:	cmp	r0, r5
   2a6f4:	bne	2a718 <flatcc_json_printer_uint8_field@@Base+0x5c>
   2a6f8:	ldrb	r0, [r4, #28]
   2a6fc:	cmp	r0, #0
   2a700:	beq	2a718 <flatcc_json_printer_uint8_field@@Base+0x5c>
   2a704:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a708:	ldrb	r0, [r4, #29]
   2a70c:	cmp	r0, #0
   2a710:	mov	r7, r5
   2a714:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a718:	ldr	r2, [fp, #8]
   2a71c:	ldr	r0, [r6, #16]
   2a720:	add	r1, r0, #1
   2a724:	str	r1, [r6, #16]
   2a728:	cmp	r0, #0
   2a72c:	ldrne	r0, [r4, #20]
   2a730:	addne	r1, r0, #1
   2a734:	strne	r1, [r4, #20]
   2a738:	movne	r1, #44	; 0x2c
   2a73c:	strbne	r1, [r0]
   2a740:	mov	r0, r4
   2a744:	mov	r1, r8
   2a748:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2a74c:	ldr	r1, [r4, #20]
   2a750:	mov	r0, r7
   2a754:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2a758:	ldr	r1, [r4, #20]
   2a75c:	add	r0, r1, r0
   2a760:	str	r0, [r4, #20]
   2a764:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a768:	ldrb	r0, [r0]
   2a76c:	b	30bb8 <flatcc_json_printer_clear@@Base+0xe9c>

0002a770 <flatcc_json_printer_uint16_field@@Base>:
   2a770:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a774:	add	fp, sp, #24
   2a778:	mov	r8, r3
   2a77c:	mov	r6, r1
   2a780:	mov	r4, r0
   2a784:	mov	r0, r1
   2a788:	mov	r1, r2
   2a78c:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2a790:	ldr	r5, [fp, #12]
   2a794:	cmp	r0, #0
   2a798:	beq	2a7bc <flatcc_json_printer_uint16_field@@Base+0x4c>
   2a79c:	bl	2a81c <flatcc_json_printer_uint16_field@@Base+0xac>
   2a7a0:	mov	r7, r0
   2a7a4:	cmp	r0, r5
   2a7a8:	bne	2a7cc <flatcc_json_printer_uint16_field@@Base+0x5c>
   2a7ac:	ldrb	r0, [r4, #28]
   2a7b0:	cmp	r0, #0
   2a7b4:	beq	2a7cc <flatcc_json_printer_uint16_field@@Base+0x5c>
   2a7b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a7bc:	ldrb	r0, [r4, #29]
   2a7c0:	cmp	r0, #0
   2a7c4:	mov	r7, r5
   2a7c8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a7cc:	ldr	r2, [fp, #8]
   2a7d0:	ldr	r0, [r6, #16]
   2a7d4:	add	r1, r0, #1
   2a7d8:	str	r1, [r6, #16]
   2a7dc:	cmp	r0, #0
   2a7e0:	ldrne	r0, [r4, #20]
   2a7e4:	addne	r1, r0, #1
   2a7e8:	strne	r1, [r4, #20]
   2a7ec:	movne	r1, #44	; 0x2c
   2a7f0:	strbne	r1, [r0]
   2a7f4:	mov	r0, r4
   2a7f8:	mov	r1, r8
   2a7fc:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2a800:	ldr	r1, [r4, #20]
   2a804:	mov	r0, r7
   2a808:	bl	296b0 <flatcc_json_printer_uint16@@Base+0x2c>
   2a80c:	ldr	r1, [r4, #20]
   2a810:	add	r0, r1, r0
   2a814:	str	r0, [r4, #20]
   2a818:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a81c:	ldrh	r0, [r0]
   2a820:	b	30bbc <flatcc_json_printer_clear@@Base+0xea0>

0002a824 <flatcc_json_printer_uint32_field@@Base>:
   2a824:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a828:	add	fp, sp, #24
   2a82c:	mov	r8, r3
   2a830:	mov	r6, r1
   2a834:	mov	r4, r0
   2a838:	mov	r0, r1
   2a83c:	mov	r1, r2
   2a840:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2a844:	ldr	r5, [fp, #12]
   2a848:	cmp	r0, #0
   2a84c:	beq	2a870 <flatcc_json_printer_uint32_field@@Base+0x4c>
   2a850:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base+0xac>
   2a854:	mov	r7, r0
   2a858:	cmp	r0, r5
   2a85c:	bne	2a880 <flatcc_json_printer_uint32_field@@Base+0x5c>
   2a860:	ldrb	r0, [r4, #28]
   2a864:	cmp	r0, #0
   2a868:	beq	2a880 <flatcc_json_printer_uint32_field@@Base+0x5c>
   2a86c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a870:	ldrb	r0, [r4, #29]
   2a874:	cmp	r0, #0
   2a878:	mov	r7, r5
   2a87c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a880:	ldr	r2, [fp, #8]
   2a884:	ldr	r0, [r6, #16]
   2a888:	add	r1, r0, #1
   2a88c:	str	r1, [r6, #16]
   2a890:	cmp	r0, #0
   2a894:	ldrne	r0, [r4, #20]
   2a898:	addne	r1, r0, #1
   2a89c:	strne	r1, [r4, #20]
   2a8a0:	movne	r1, #44	; 0x2c
   2a8a4:	strbne	r1, [r0]
   2a8a8:	mov	r0, r4
   2a8ac:	mov	r1, r8
   2a8b0:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2a8b4:	ldr	r1, [r4, #20]
   2a8b8:	mov	r0, r7
   2a8bc:	bl	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   2a8c0:	ldr	r1, [r4, #20]
   2a8c4:	add	r0, r1, r0
   2a8c8:	str	r0, [r4, #20]
   2a8cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a8d0:	ldr	r0, [r0]
   2a8d4:	b	30bc0 <flatcc_json_printer_clear@@Base+0xea4>

0002a8d8 <flatcc_json_printer_uint64_field@@Base>:
   2a8d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a8dc:	add	fp, sp, #28
   2a8e0:	sub	sp, sp, #4
   2a8e4:	mov	r8, r3
   2a8e8:	mov	r6, r1
   2a8ec:	mov	r4, r0
   2a8f0:	mov	r0, r1
   2a8f4:	mov	r1, r2
   2a8f8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2a8fc:	ldr	r9, [fp, #20]
   2a900:	ldr	sl, [fp, #16]
   2a904:	cmp	r0, #0
   2a908:	beq	2a938 <flatcc_json_printer_uint64_field@@Base+0x60>
   2a90c:	bl	2a9a4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2a910:	mov	r7, r0
   2a914:	mov	r5, r1
   2a918:	eor	r0, r1, r9
   2a91c:	eor	r1, r7, sl
   2a920:	orrs	r0, r1, r0
   2a924:	bne	2a94c <flatcc_json_printer_uint64_field@@Base+0x74>
   2a928:	ldrb	r0, [r4, #28]
   2a92c:	cmp	r0, #0
   2a930:	bne	2a99c <flatcc_json_printer_uint64_field@@Base+0xc4>
   2a934:	b	2a94c <flatcc_json_printer_uint64_field@@Base+0x74>
   2a938:	ldrb	r0, [r4, #29]
   2a93c:	cmp	r0, #0
   2a940:	mov	r7, sl
   2a944:	mov	r5, r9
   2a948:	beq	2a99c <flatcc_json_printer_uint64_field@@Base+0xc4>
   2a94c:	ldr	r2, [fp, #8]
   2a950:	ldr	r0, [r6, #16]
   2a954:	add	r1, r0, #1
   2a958:	str	r1, [r6, #16]
   2a95c:	cmp	r0, #0
   2a960:	ldrne	r0, [r4, #20]
   2a964:	addne	r1, r0, #1
   2a968:	strne	r1, [r4, #20]
   2a96c:	movne	r1, #44	; 0x2c
   2a970:	strbne	r1, [r0]
   2a974:	mov	r0, r4
   2a978:	mov	r1, r8
   2a97c:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2a980:	ldr	r2, [r4, #20]
   2a984:	mov	r0, r7
   2a988:	mov	r1, r5
   2a98c:	bl	29b78 <flatcc_json_printer_uint64@@Base+0x30>
   2a990:	ldr	r1, [r4, #20]
   2a994:	add	r0, r1, r0
   2a998:	str	r0, [r4, #20]
   2a99c:	sub	sp, fp, #28
   2a9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a9a4:	ldrd	r0, [r0]
   2a9a8:	b	30bc4 <flatcc_json_printer_clear@@Base+0xea8>

0002a9ac <flatcc_json_printer_int8_field@@Base>:
   2a9ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a9b0:	add	fp, sp, #24
   2a9b4:	mov	r8, r3
   2a9b8:	mov	r6, r1
   2a9bc:	mov	r4, r0
   2a9c0:	mov	r0, r1
   2a9c4:	mov	r1, r2
   2a9c8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2a9cc:	ldr	r5, [fp, #12]
   2a9d0:	cmp	r0, #0
   2a9d4:	beq	2a9f8 <flatcc_json_printer_int8_field@@Base+0x4c>
   2a9d8:	bl	2aa58 <flatcc_json_printer_int8_field@@Base+0xac>
   2a9dc:	mov	r7, r0
   2a9e0:	cmp	r0, r5
   2a9e4:	bne	2aa08 <flatcc_json_printer_int8_field@@Base+0x5c>
   2a9e8:	ldrb	r0, [r4, #28]
   2a9ec:	cmp	r0, #0
   2a9f0:	beq	2aa08 <flatcc_json_printer_int8_field@@Base+0x5c>
   2a9f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a9f8:	ldrb	r0, [r4, #29]
   2a9fc:	cmp	r0, #0
   2aa00:	mov	r7, r5
   2aa04:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2aa08:	ldr	r2, [fp, #8]
   2aa0c:	ldr	r0, [r6, #16]
   2aa10:	add	r1, r0, #1
   2aa14:	str	r1, [r6, #16]
   2aa18:	cmp	r0, #0
   2aa1c:	ldrne	r0, [r4, #20]
   2aa20:	addne	r1, r0, #1
   2aa24:	strne	r1, [r4, #20]
   2aa28:	movne	r1, #44	; 0x2c
   2aa2c:	strbne	r1, [r0]
   2aa30:	mov	r0, r4
   2aa34:	mov	r1, r8
   2aa38:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2aa3c:	ldr	r1, [r4, #20]
   2aa40:	mov	r0, r7
   2aa44:	bl	2a0cc <flatcc_json_printer_int8@@Base+0x2c>
   2aa48:	ldr	r1, [r4, #20]
   2aa4c:	add	r0, r1, r0
   2aa50:	str	r0, [r4, #20]
   2aa54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2aa58:	ldrsb	r0, [r0]
   2aa5c:	b	30bc8 <flatcc_json_printer_clear@@Base+0xeac>

0002aa60 <flatcc_json_printer_int16_field@@Base>:
   2aa60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2aa64:	add	fp, sp, #24
   2aa68:	mov	r8, r3
   2aa6c:	mov	r6, r1
   2aa70:	mov	r4, r0
   2aa74:	mov	r0, r1
   2aa78:	mov	r1, r2
   2aa7c:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2aa80:	ldr	r5, [fp, #12]
   2aa84:	cmp	r0, #0
   2aa88:	beq	2aaac <flatcc_json_printer_int16_field@@Base+0x4c>
   2aa8c:	bl	2ab0c <flatcc_json_printer_int16_field@@Base+0xac>
   2aa90:	mov	r7, r0
   2aa94:	cmp	r0, r5
   2aa98:	bne	2aabc <flatcc_json_printer_int16_field@@Base+0x5c>
   2aa9c:	ldrb	r0, [r4, #28]
   2aaa0:	cmp	r0, #0
   2aaa4:	beq	2aabc <flatcc_json_printer_int16_field@@Base+0x5c>
   2aaa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2aaac:	ldrb	r0, [r4, #29]
   2aab0:	cmp	r0, #0
   2aab4:	mov	r7, r5
   2aab8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2aabc:	ldr	r2, [fp, #8]
   2aac0:	ldr	r0, [r6, #16]
   2aac4:	add	r1, r0, #1
   2aac8:	str	r1, [r6, #16]
   2aacc:	cmp	r0, #0
   2aad0:	ldrne	r0, [r4, #20]
   2aad4:	addne	r1, r0, #1
   2aad8:	strne	r1, [r4, #20]
   2aadc:	movne	r1, #44	; 0x2c
   2aae0:	strbne	r1, [r0]
   2aae4:	mov	r0, r4
   2aae8:	mov	r1, r8
   2aaec:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2aaf0:	ldr	r1, [r4, #20]
   2aaf4:	mov	r0, r7
   2aaf8:	bl	2a124 <flatcc_json_printer_int16@@Base+0x2c>
   2aafc:	ldr	r1, [r4, #20]
   2ab00:	add	r0, r1, r0
   2ab04:	str	r0, [r4, #20]
   2ab08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ab0c:	ldrsh	r0, [r0]
   2ab10:	b	30bcc <flatcc_json_printer_clear@@Base+0xeb0>

0002ab14 <flatcc_json_printer_int32_field@@Base>:
   2ab14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ab18:	add	fp, sp, #24
   2ab1c:	mov	r8, r3
   2ab20:	mov	r6, r1
   2ab24:	mov	r4, r0
   2ab28:	mov	r0, r1
   2ab2c:	mov	r1, r2
   2ab30:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2ab34:	ldr	r5, [fp, #12]
   2ab38:	cmp	r0, #0
   2ab3c:	beq	2ab60 <flatcc_json_printer_int32_field@@Base+0x4c>
   2ab40:	bl	2abc0 <flatcc_json_printer_int32_field@@Base+0xac>
   2ab44:	mov	r7, r0
   2ab48:	cmp	r0, r5
   2ab4c:	bne	2ab70 <flatcc_json_printer_int32_field@@Base+0x5c>
   2ab50:	ldrb	r0, [r4, #28]
   2ab54:	cmp	r0, #0
   2ab58:	beq	2ab70 <flatcc_json_printer_int32_field@@Base+0x5c>
   2ab5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ab60:	ldrb	r0, [r4, #29]
   2ab64:	cmp	r0, #0
   2ab68:	mov	r7, r5
   2ab6c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ab70:	ldr	r2, [fp, #8]
   2ab74:	ldr	r0, [r6, #16]
   2ab78:	add	r1, r0, #1
   2ab7c:	str	r1, [r6, #16]
   2ab80:	cmp	r0, #0
   2ab84:	ldrne	r0, [r4, #20]
   2ab88:	addne	r1, r0, #1
   2ab8c:	strne	r1, [r4, #20]
   2ab90:	movne	r1, #44	; 0x2c
   2ab94:	strbne	r1, [r0]
   2ab98:	mov	r0, r4
   2ab9c:	mov	r1, r8
   2aba0:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2aba4:	ldr	r1, [r4, #20]
   2aba8:	mov	r0, r7
   2abac:	bl	2a17c <flatcc_json_printer_int32@@Base+0x2c>
   2abb0:	ldr	r1, [r4, #20]
   2abb4:	add	r0, r1, r0
   2abb8:	str	r0, [r4, #20]
   2abbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2abc0:	ldr	r0, [r0]
   2abc4:	b	30bd0 <flatcc_json_printer_clear@@Base+0xeb4>

0002abc8 <flatcc_json_printer_int64_field@@Base>:
   2abc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abcc:	add	fp, sp, #28
   2abd0:	sub	sp, sp, #4
   2abd4:	mov	r8, r3
   2abd8:	mov	r6, r1
   2abdc:	mov	r4, r0
   2abe0:	mov	r0, r1
   2abe4:	mov	r1, r2
   2abe8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2abec:	ldr	r9, [fp, #20]
   2abf0:	ldr	sl, [fp, #16]
   2abf4:	cmp	r0, #0
   2abf8:	beq	2ac28 <flatcc_json_printer_int64_field@@Base+0x60>
   2abfc:	bl	2ac94 <flatcc_json_printer_int64_field@@Base+0xcc>
   2ac00:	mov	r7, r0
   2ac04:	mov	r5, r1
   2ac08:	eor	r0, r1, r9
   2ac0c:	eor	r1, r7, sl
   2ac10:	orrs	r0, r1, r0
   2ac14:	bne	2ac3c <flatcc_json_printer_int64_field@@Base+0x74>
   2ac18:	ldrb	r0, [r4, #28]
   2ac1c:	cmp	r0, #0
   2ac20:	bne	2ac8c <flatcc_json_printer_int64_field@@Base+0xc4>
   2ac24:	b	2ac3c <flatcc_json_printer_int64_field@@Base+0x74>
   2ac28:	ldrb	r0, [r4, #29]
   2ac2c:	cmp	r0, #0
   2ac30:	mov	r7, sl
   2ac34:	mov	r5, r9
   2ac38:	beq	2ac8c <flatcc_json_printer_int64_field@@Base+0xc4>
   2ac3c:	ldr	r2, [fp, #8]
   2ac40:	ldr	r0, [r6, #16]
   2ac44:	add	r1, r0, #1
   2ac48:	str	r1, [r6, #16]
   2ac4c:	cmp	r0, #0
   2ac50:	ldrne	r0, [r4, #20]
   2ac54:	addne	r1, r0, #1
   2ac58:	strne	r1, [r4, #20]
   2ac5c:	movne	r1, #44	; 0x2c
   2ac60:	strbne	r1, [r0]
   2ac64:	mov	r0, r4
   2ac68:	mov	r1, r8
   2ac6c:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2ac70:	ldr	r2, [r4, #20]
   2ac74:	mov	r0, r7
   2ac78:	mov	r1, r5
   2ac7c:	bl	2a1d4 <flatcc_json_printer_int64@@Base+0x30>
   2ac80:	ldr	r1, [r4, #20]
   2ac84:	add	r0, r1, r0
   2ac88:	str	r0, [r4, #20]
   2ac8c:	sub	sp, fp, #28
   2ac90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac94:	ldrd	r0, [r0]
   2ac98:	b	30bd4 <flatcc_json_printer_clear@@Base+0xeb8>

0002ac9c <flatcc_json_printer_bool_field@@Base>:
   2ac9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2aca0:	add	fp, sp, #24
   2aca4:	mov	r8, r3
   2aca8:	mov	r6, r1
   2acac:	mov	r4, r0
   2acb0:	mov	r0, r1
   2acb4:	mov	r1, r2
   2acb8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2acbc:	ldr	r5, [fp, #12]
   2acc0:	cmp	r0, #0
   2acc4:	beq	2ace8 <flatcc_json_printer_bool_field@@Base+0x4c>
   2acc8:	bl	2ad48 <flatcc_json_printer_bool_field@@Base+0xac>
   2accc:	mov	r7, r0
   2acd0:	cmp	r0, r5
   2acd4:	bne	2acf8 <flatcc_json_printer_bool_field@@Base+0x5c>
   2acd8:	ldrb	r0, [r4, #28]
   2acdc:	cmp	r0, #0
   2ace0:	beq	2acf8 <flatcc_json_printer_bool_field@@Base+0x5c>
   2ace4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ace8:	ldrb	r0, [r4, #29]
   2acec:	cmp	r0, #0
   2acf0:	mov	r7, r5
   2acf4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2acf8:	ldr	r2, [fp, #8]
   2acfc:	ldr	r0, [r6, #16]
   2ad00:	add	r1, r0, #1
   2ad04:	str	r1, [r6, #16]
   2ad08:	cmp	r0, #0
   2ad0c:	ldrne	r0, [r4, #20]
   2ad10:	addne	r1, r0, #1
   2ad14:	strne	r1, [r4, #20]
   2ad18:	movne	r1, #44	; 0x2c
   2ad1c:	strbne	r1, [r0]
   2ad20:	mov	r0, r4
   2ad24:	mov	r1, r8
   2ad28:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2ad2c:	ldr	r1, [r4, #20]
   2ad30:	mov	r0, r7
   2ad34:	bl	2ad50 <flatcc_json_printer_bool_field@@Base+0xb4>
   2ad38:	ldr	r1, [r4, #20]
   2ad3c:	add	r0, r1, r0
   2ad40:	str	r0, [r4, #20]
   2ad44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ad48:	ldrb	r0, [r0]
   2ad4c:	b	30bd8 <flatcc_json_printer_clear@@Base+0xebc>
   2ad50:	cmp	r0, #0
   2ad54:	beq	2ad74 <flatcc_json_printer_bool_field@@Base+0xd8>
   2ad58:	mov	r0, #0
   2ad5c:	strb	r0, [r1, #4]
   2ad60:	movw	r0, #29300	; 0x7274
   2ad64:	movt	r0, #25973	; 0x6575
   2ad68:	str	r0, [r1]
   2ad6c:	mov	r0, #4
   2ad70:	bx	lr
   2ad74:	mov	r0, #101	; 0x65
   2ad78:	strh	r0, [r1, #4]
   2ad7c:	movw	r0, #24934	; 0x6166
   2ad80:	movt	r0, #29548	; 0x736c
   2ad84:	str	r0, [r1]
   2ad88:	mov	r0, #5
   2ad8c:	bx	lr

0002ad90 <flatcc_json_printer_float_field@@Base>:
   2ad90:	push	{r4, r5, r6, sl, fp, lr}
   2ad94:	add	fp, sp, #16
   2ad98:	vpush	{d8-d9}
   2ad9c:	vmov.f32	s18, s0
   2ada0:	mov	r5, r3
   2ada4:	mov	r6, r1
   2ada8:	mov	r4, r0
   2adac:	mov	r0, r1
   2adb0:	mov	r1, r2
   2adb4:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2adb8:	cmp	r0, #0
   2adbc:	beq	2ade4 <flatcc_json_printer_float_field@@Base+0x54>
   2adc0:	bl	2ae48 <flatcc_json_printer_float_field@@Base+0xb8>
   2adc4:	vmov.f32	s16, s0
   2adc8:	vcmp.f32	s0, s18
   2adcc:	vmrs	APSR_nzcv, fpscr
   2add0:	bne	2adf4 <flatcc_json_printer_float_field@@Base+0x64>
   2add4:	ldrb	r0, [r4, #28]
   2add8:	cmp	r0, #0
   2addc:	bne	2ae40 <flatcc_json_printer_float_field@@Base+0xb0>
   2ade0:	b	2adf4 <flatcc_json_printer_float_field@@Base+0x64>
   2ade4:	ldrb	r0, [r4, #29]
   2ade8:	cmp	r0, #0
   2adec:	vmov.f32	s16, s18
   2adf0:	beq	2ae40 <flatcc_json_printer_float_field@@Base+0xb0>
   2adf4:	ldr	r2, [fp, #8]
   2adf8:	ldr	r0, [r6, #16]
   2adfc:	add	r1, r0, #1
   2ae00:	str	r1, [r6, #16]
   2ae04:	cmp	r0, #0
   2ae08:	ldrne	r0, [r4, #20]
   2ae0c:	addne	r1, r0, #1
   2ae10:	strne	r1, [r4, #20]
   2ae14:	movne	r1, #44	; 0x2c
   2ae18:	strbne	r1, [r0]
   2ae1c:	mov	r0, r4
   2ae20:	mov	r1, r5
   2ae24:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2ae28:	ldr	r0, [r4, #20]
   2ae2c:	vcvt.f64.f32	d0, s16
   2ae30:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2ae34:	ldr	r1, [r4, #20]
   2ae38:	add	r0, r1, r0
   2ae3c:	str	r0, [r4, #20]
   2ae40:	vpop	{d8-d9}
   2ae44:	pop	{r4, r5, r6, sl, fp, pc}
   2ae48:	vldr	s0, [r0]
   2ae4c:	b	30bdc <flatcc_json_printer_clear@@Base+0xec0>

0002ae50 <flatcc_json_printer_double_field@@Base>:
   2ae50:	push	{r4, r5, r6, sl, fp, lr}
   2ae54:	add	fp, sp, #16
   2ae58:	vpush	{d8-d9}
   2ae5c:	vmov.f64	d9, d0
   2ae60:	mov	r5, r3
   2ae64:	mov	r6, r1
   2ae68:	mov	r4, r0
   2ae6c:	mov	r0, r1
   2ae70:	mov	r1, r2
   2ae74:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2ae78:	cmp	r0, #0
   2ae7c:	beq	2aea4 <flatcc_json_printer_double_field@@Base+0x54>
   2ae80:	bl	2af08 <flatcc_json_printer_double_field@@Base+0xb8>
   2ae84:	vmov.f64	d8, d0
   2ae88:	vcmp.f64	d0, d9
   2ae8c:	vmrs	APSR_nzcv, fpscr
   2ae90:	bne	2aeb4 <flatcc_json_printer_double_field@@Base+0x64>
   2ae94:	ldrb	r0, [r4, #28]
   2ae98:	cmp	r0, #0
   2ae9c:	bne	2af00 <flatcc_json_printer_double_field@@Base+0xb0>
   2aea0:	b	2aeb4 <flatcc_json_printer_double_field@@Base+0x64>
   2aea4:	ldrb	r0, [r4, #29]
   2aea8:	cmp	r0, #0
   2aeac:	vmov.f64	d8, d9
   2aeb0:	beq	2af00 <flatcc_json_printer_double_field@@Base+0xb0>
   2aeb4:	ldr	r2, [fp, #8]
   2aeb8:	ldr	r0, [r6, #16]
   2aebc:	add	r1, r0, #1
   2aec0:	str	r1, [r6, #16]
   2aec4:	cmp	r0, #0
   2aec8:	ldrne	r0, [r4, #20]
   2aecc:	addne	r1, r0, #1
   2aed0:	strne	r1, [r4, #20]
   2aed4:	movne	r1, #44	; 0x2c
   2aed8:	strbne	r1, [r0]
   2aedc:	mov	r0, r4
   2aee0:	mov	r1, r5
   2aee4:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2aee8:	ldr	r0, [r4, #20]
   2aeec:	vmov.f64	d0, d8
   2aef0:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2aef4:	ldr	r1, [r4, #20]
   2aef8:	add	r0, r1, r0
   2aefc:	str	r0, [r4, #20]
   2af00:	vpop	{d8-d9}
   2af04:	pop	{r4, r5, r6, sl, fp, pc}
   2af08:	vldr	d0, [r0]
   2af0c:	b	30be0 <flatcc_json_printer_clear@@Base+0xec4>

0002af10 <flatcc_json_printer_uint8_enum_field@@Base>:
   2af10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af14:	add	fp, sp, #28
   2af18:	sub	sp, sp, #4
   2af1c:	mov	r8, r3
   2af20:	mov	r5, r1
   2af24:	mov	r4, r0
   2af28:	mov	r0, r1
   2af2c:	mov	r1, r2
   2af30:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2af34:	ldr	sl, [fp, #16]
   2af38:	ldr	r7, [fp, #12]
   2af3c:	ldr	r9, [fp, #8]
   2af40:	cmp	r0, #0
   2af44:	beq	2af6c <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   2af48:	bl	2a768 <flatcc_json_printer_uint8_field@@Base+0xac>
   2af4c:	mov	r6, r0
   2af50:	cmp	r0, r7
   2af54:	bne	2af7c <flatcc_json_printer_uint8_enum_field@@Base+0x6c>
   2af58:	ldrb	r0, [r4, #28]
   2af5c:	cmp	r0, #0
   2af60:	beq	2af7c <flatcc_json_printer_uint8_enum_field@@Base+0x6c>
   2af64:	sub	sp, fp, #28
   2af68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af6c:	ldrb	r0, [r4, #29]
   2af70:	cmp	r0, #0
   2af74:	mov	r6, r7
   2af78:	beq	2af64 <flatcc_json_printer_uint8_enum_field@@Base+0x54>
   2af7c:	ldr	r0, [r5, #16]
   2af80:	add	r1, r0, #1
   2af84:	str	r1, [r5, #16]
   2af88:	cmp	r0, #0
   2af8c:	ldrne	r0, [r4, #20]
   2af90:	addne	r1, r0, #1
   2af94:	strne	r1, [r4, #20]
   2af98:	movne	r1, #44	; 0x2c
   2af9c:	strbne	r1, [r0]
   2afa0:	mov	r0, r4
   2afa4:	mov	r1, r8
   2afa8:	mov	r2, r9
   2afac:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2afb0:	ldrb	r0, [r4, #27]
   2afb4:	cmp	r0, #0
   2afb8:	beq	2afdc <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   2afbc:	ldr	r1, [r4, #20]
   2afc0:	mov	r0, r6
   2afc4:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2afc8:	ldr	r1, [r4, #20]
   2afcc:	add	r0, r1, r0
   2afd0:	str	r0, [r4, #20]
   2afd4:	sub	sp, fp, #28
   2afd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afdc:	mov	r0, r4
   2afe0:	mov	r1, r6
   2afe4:	mov	r2, sl
   2afe8:	sub	sp, fp, #28
   2afec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aff0:	bx	r2

0002aff4 <flatcc_json_printer_uint16_enum_field@@Base>:
   2aff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aff8:	add	fp, sp, #28
   2affc:	sub	sp, sp, #4
   2b000:	mov	r8, r3
   2b004:	mov	r5, r1
   2b008:	mov	r4, r0
   2b00c:	mov	r0, r1
   2b010:	mov	r1, r2
   2b014:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2b018:	ldr	sl, [fp, #16]
   2b01c:	ldr	r7, [fp, #12]
   2b020:	ldr	r9, [fp, #8]
   2b024:	cmp	r0, #0
   2b028:	beq	2b050 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   2b02c:	bl	2a81c <flatcc_json_printer_uint16_field@@Base+0xac>
   2b030:	mov	r6, r0
   2b034:	cmp	r0, r7
   2b038:	bne	2b060 <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
   2b03c:	ldrb	r0, [r4, #28]
   2b040:	cmp	r0, #0
   2b044:	beq	2b060 <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
   2b048:	sub	sp, fp, #28
   2b04c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b050:	ldrb	r0, [r4, #29]
   2b054:	cmp	r0, #0
   2b058:	mov	r6, r7
   2b05c:	beq	2b048 <flatcc_json_printer_uint16_enum_field@@Base+0x54>
   2b060:	ldr	r0, [r5, #16]
   2b064:	add	r1, r0, #1
   2b068:	str	r1, [r5, #16]
   2b06c:	cmp	r0, #0
   2b070:	ldrne	r0, [r4, #20]
   2b074:	addne	r1, r0, #1
   2b078:	strne	r1, [r4, #20]
   2b07c:	movne	r1, #44	; 0x2c
   2b080:	strbne	r1, [r0]
   2b084:	mov	r0, r4
   2b088:	mov	r1, r8
   2b08c:	mov	r2, r9
   2b090:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b094:	ldrb	r0, [r4, #27]
   2b098:	cmp	r0, #0
   2b09c:	beq	2b0c0 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   2b0a0:	ldr	r1, [r4, #20]
   2b0a4:	mov	r0, r6
   2b0a8:	bl	296b0 <flatcc_json_printer_uint16@@Base+0x2c>
   2b0ac:	ldr	r1, [r4, #20]
   2b0b0:	add	r0, r1, r0
   2b0b4:	str	r0, [r4, #20]
   2b0b8:	sub	sp, fp, #28
   2b0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0c0:	mov	r0, r4
   2b0c4:	mov	r1, r6
   2b0c8:	mov	r2, sl
   2b0cc:	sub	sp, fp, #28
   2b0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0d4:	bx	r2

0002b0d8 <flatcc_json_printer_uint32_enum_field@@Base>:
   2b0d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0dc:	add	fp, sp, #28
   2b0e0:	sub	sp, sp, #4
   2b0e4:	mov	r8, r3
   2b0e8:	mov	r5, r1
   2b0ec:	mov	r4, r0
   2b0f0:	mov	r0, r1
   2b0f4:	mov	r1, r2
   2b0f8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2b0fc:	ldr	sl, [fp, #16]
   2b100:	ldr	r7, [fp, #12]
   2b104:	ldr	r9, [fp, #8]
   2b108:	cmp	r0, #0
   2b10c:	beq	2b134 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   2b110:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base+0xac>
   2b114:	mov	r6, r0
   2b118:	cmp	r0, r7
   2b11c:	bne	2b144 <flatcc_json_printer_uint32_enum_field@@Base+0x6c>
   2b120:	ldrb	r0, [r4, #28]
   2b124:	cmp	r0, #0
   2b128:	beq	2b144 <flatcc_json_printer_uint32_enum_field@@Base+0x6c>
   2b12c:	sub	sp, fp, #28
   2b130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b134:	ldrb	r0, [r4, #29]
   2b138:	cmp	r0, #0
   2b13c:	mov	r6, r7
   2b140:	beq	2b12c <flatcc_json_printer_uint32_enum_field@@Base+0x54>
   2b144:	ldr	r0, [r5, #16]
   2b148:	add	r1, r0, #1
   2b14c:	str	r1, [r5, #16]
   2b150:	cmp	r0, #0
   2b154:	ldrne	r0, [r4, #20]
   2b158:	addne	r1, r0, #1
   2b15c:	strne	r1, [r4, #20]
   2b160:	movne	r1, #44	; 0x2c
   2b164:	strbne	r1, [r0]
   2b168:	mov	r0, r4
   2b16c:	mov	r1, r8
   2b170:	mov	r2, r9
   2b174:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b178:	ldrb	r0, [r4, #27]
   2b17c:	cmp	r0, #0
   2b180:	beq	2b1a4 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   2b184:	ldr	r1, [r4, #20]
   2b188:	mov	r0, r6
   2b18c:	bl	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   2b190:	ldr	r1, [r4, #20]
   2b194:	add	r0, r1, r0
   2b198:	str	r0, [r4, #20]
   2b19c:	sub	sp, fp, #28
   2b1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1a4:	mov	r0, r4
   2b1a8:	mov	r1, r6
   2b1ac:	mov	r2, sl
   2b1b0:	sub	sp, fp, #28
   2b1b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1b8:	bx	r2

0002b1bc <flatcc_json_printer_uint64_enum_field@@Base>:
   2b1bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1c0:	add	fp, sp, #28
   2b1c4:	sub	sp, sp, #12
   2b1c8:	str	r3, [sp, #8]
   2b1cc:	mov	r6, r1
   2b1d0:	mov	r4, r0
   2b1d4:	mov	r0, r1
   2b1d8:	mov	r1, r2
   2b1dc:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2b1e0:	ldr	r5, [fp, #20]
   2b1e4:	ldr	r7, [fp, #16]
   2b1e8:	ldr	r1, [fp, #24]
   2b1ec:	str	r1, [sp, #4]
   2b1f0:	ldr	r9, [fp, #8]
   2b1f4:	cmp	r0, #0
   2b1f8:	beq	2b22c <flatcc_json_printer_uint64_enum_field@@Base+0x70>
   2b1fc:	bl	2a9a4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2b200:	mov	r8, r0
   2b204:	mov	sl, r1
   2b208:	eor	r0, r1, r5
   2b20c:	eor	r1, r8, r7
   2b210:	orrs	r0, r1, r0
   2b214:	bne	2b240 <flatcc_json_printer_uint64_enum_field@@Base+0x84>
   2b218:	ldrb	r0, [r4, #28]
   2b21c:	cmp	r0, #0
   2b220:	beq	2b240 <flatcc_json_printer_uint64_enum_field@@Base+0x84>
   2b224:	sub	sp, fp, #28
   2b228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b22c:	ldrb	r0, [r4, #29]
   2b230:	cmp	r0, #0
   2b234:	mov	r8, r7
   2b238:	mov	sl, r5
   2b23c:	beq	2b224 <flatcc_json_printer_uint64_enum_field@@Base+0x68>
   2b240:	ldr	r0, [r6, #16]
   2b244:	add	r1, r0, #1
   2b248:	str	r1, [r6, #16]
   2b24c:	cmp	r0, #0
   2b250:	ldrne	r0, [r4, #20]
   2b254:	addne	r1, r0, #1
   2b258:	strne	r1, [r4, #20]
   2b25c:	movne	r1, #44	; 0x2c
   2b260:	strbne	r1, [r0]
   2b264:	mov	r0, r4
   2b268:	ldr	r1, [sp, #8]
   2b26c:	mov	r2, r9
   2b270:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b274:	ldrb	r0, [r4, #27]
   2b278:	cmp	r0, #0
   2b27c:	beq	2b2a4 <flatcc_json_printer_uint64_enum_field@@Base+0xe8>
   2b280:	ldr	r2, [r4, #20]
   2b284:	mov	r0, r8
   2b288:	mov	r1, sl
   2b28c:	bl	29b78 <flatcc_json_printer_uint64@@Base+0x30>
   2b290:	ldr	r1, [r4, #20]
   2b294:	add	r0, r1, r0
   2b298:	str	r0, [r4, #20]
   2b29c:	sub	sp, fp, #28
   2b2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2a4:	mov	r0, r4
   2b2a8:	mov	r2, r8
   2b2ac:	mov	r3, sl
   2b2b0:	ldr	r1, [sp, #4]
   2b2b4:	sub	sp, fp, #28
   2b2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2bc:	bx	r1

0002b2c0 <flatcc_json_printer_int8_enum_field@@Base>:
   2b2c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2c4:	add	fp, sp, #28
   2b2c8:	sub	sp, sp, #4
   2b2cc:	mov	r8, r3
   2b2d0:	mov	r5, r1
   2b2d4:	mov	r4, r0
   2b2d8:	mov	r0, r1
   2b2dc:	mov	r1, r2
   2b2e0:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2b2e4:	ldr	sl, [fp, #16]
   2b2e8:	ldr	r7, [fp, #12]
   2b2ec:	ldr	r9, [fp, #8]
   2b2f0:	cmp	r0, #0
   2b2f4:	beq	2b31c <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   2b2f8:	bl	2aa58 <flatcc_json_printer_int8_field@@Base+0xac>
   2b2fc:	mov	r6, r0
   2b300:	cmp	r0, r7
   2b304:	bne	2b32c <flatcc_json_printer_int8_enum_field@@Base+0x6c>
   2b308:	ldrb	r0, [r4, #28]
   2b30c:	cmp	r0, #0
   2b310:	beq	2b32c <flatcc_json_printer_int8_enum_field@@Base+0x6c>
   2b314:	sub	sp, fp, #28
   2b318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b31c:	ldrb	r0, [r4, #29]
   2b320:	cmp	r0, #0
   2b324:	mov	r6, r7
   2b328:	beq	2b314 <flatcc_json_printer_int8_enum_field@@Base+0x54>
   2b32c:	ldr	r0, [r5, #16]
   2b330:	add	r1, r0, #1
   2b334:	str	r1, [r5, #16]
   2b338:	cmp	r0, #0
   2b33c:	ldrne	r0, [r4, #20]
   2b340:	addne	r1, r0, #1
   2b344:	strne	r1, [r4, #20]
   2b348:	movne	r1, #44	; 0x2c
   2b34c:	strbne	r1, [r0]
   2b350:	mov	r0, r4
   2b354:	mov	r1, r8
   2b358:	mov	r2, r9
   2b35c:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b360:	ldrb	r0, [r4, #27]
   2b364:	cmp	r0, #0
   2b368:	beq	2b38c <flatcc_json_printer_int8_enum_field@@Base+0xcc>
   2b36c:	ldr	r1, [r4, #20]
   2b370:	mov	r0, r6
   2b374:	bl	2a0cc <flatcc_json_printer_int8@@Base+0x2c>
   2b378:	ldr	r1, [r4, #20]
   2b37c:	add	r0, r1, r0
   2b380:	str	r0, [r4, #20]
   2b384:	sub	sp, fp, #28
   2b388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b38c:	mov	r0, r4
   2b390:	mov	r1, r6
   2b394:	mov	r2, sl
   2b398:	sub	sp, fp, #28
   2b39c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3a0:	bx	r2

0002b3a4 <flatcc_json_printer_int16_enum_field@@Base>:
   2b3a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3a8:	add	fp, sp, #28
   2b3ac:	sub	sp, sp, #4
   2b3b0:	mov	r8, r3
   2b3b4:	mov	r5, r1
   2b3b8:	mov	r4, r0
   2b3bc:	mov	r0, r1
   2b3c0:	mov	r1, r2
   2b3c4:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2b3c8:	ldr	sl, [fp, #16]
   2b3cc:	ldr	r7, [fp, #12]
   2b3d0:	ldr	r9, [fp, #8]
   2b3d4:	cmp	r0, #0
   2b3d8:	beq	2b400 <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   2b3dc:	bl	2ab0c <flatcc_json_printer_int16_field@@Base+0xac>
   2b3e0:	mov	r6, r0
   2b3e4:	cmp	r0, r7
   2b3e8:	bne	2b410 <flatcc_json_printer_int16_enum_field@@Base+0x6c>
   2b3ec:	ldrb	r0, [r4, #28]
   2b3f0:	cmp	r0, #0
   2b3f4:	beq	2b410 <flatcc_json_printer_int16_enum_field@@Base+0x6c>
   2b3f8:	sub	sp, fp, #28
   2b3fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b400:	ldrb	r0, [r4, #29]
   2b404:	cmp	r0, #0
   2b408:	mov	r6, r7
   2b40c:	beq	2b3f8 <flatcc_json_printer_int16_enum_field@@Base+0x54>
   2b410:	ldr	r0, [r5, #16]
   2b414:	add	r1, r0, #1
   2b418:	str	r1, [r5, #16]
   2b41c:	cmp	r0, #0
   2b420:	ldrne	r0, [r4, #20]
   2b424:	addne	r1, r0, #1
   2b428:	strne	r1, [r4, #20]
   2b42c:	movne	r1, #44	; 0x2c
   2b430:	strbne	r1, [r0]
   2b434:	mov	r0, r4
   2b438:	mov	r1, r8
   2b43c:	mov	r2, r9
   2b440:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b444:	ldrb	r0, [r4, #27]
   2b448:	cmp	r0, #0
   2b44c:	beq	2b470 <flatcc_json_printer_int16_enum_field@@Base+0xcc>
   2b450:	ldr	r1, [r4, #20]
   2b454:	mov	r0, r6
   2b458:	bl	2a124 <flatcc_json_printer_int16@@Base+0x2c>
   2b45c:	ldr	r1, [r4, #20]
   2b460:	add	r0, r1, r0
   2b464:	str	r0, [r4, #20]
   2b468:	sub	sp, fp, #28
   2b46c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b470:	mov	r0, r4
   2b474:	mov	r1, r6
   2b478:	mov	r2, sl
   2b47c:	sub	sp, fp, #28
   2b480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b484:	bx	r2

0002b488 <flatcc_json_printer_int32_enum_field@@Base>:
   2b488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b48c:	add	fp, sp, #28
   2b490:	sub	sp, sp, #4
   2b494:	mov	r8, r3
   2b498:	mov	r5, r1
   2b49c:	mov	r4, r0
   2b4a0:	mov	r0, r1
   2b4a4:	mov	r1, r2
   2b4a8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2b4ac:	ldr	sl, [fp, #16]
   2b4b0:	ldr	r7, [fp, #12]
   2b4b4:	ldr	r9, [fp, #8]
   2b4b8:	cmp	r0, #0
   2b4bc:	beq	2b4e4 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   2b4c0:	bl	2abc0 <flatcc_json_printer_int32_field@@Base+0xac>
   2b4c4:	mov	r6, r0
   2b4c8:	cmp	r0, r7
   2b4cc:	bne	2b4f4 <flatcc_json_printer_int32_enum_field@@Base+0x6c>
   2b4d0:	ldrb	r0, [r4, #28]
   2b4d4:	cmp	r0, #0
   2b4d8:	beq	2b4f4 <flatcc_json_printer_int32_enum_field@@Base+0x6c>
   2b4dc:	sub	sp, fp, #28
   2b4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b4e4:	ldrb	r0, [r4, #29]
   2b4e8:	cmp	r0, #0
   2b4ec:	mov	r6, r7
   2b4f0:	beq	2b4dc <flatcc_json_printer_int32_enum_field@@Base+0x54>
   2b4f4:	ldr	r0, [r5, #16]
   2b4f8:	add	r1, r0, #1
   2b4fc:	str	r1, [r5, #16]
   2b500:	cmp	r0, #0
   2b504:	ldrne	r0, [r4, #20]
   2b508:	addne	r1, r0, #1
   2b50c:	strne	r1, [r4, #20]
   2b510:	movne	r1, #44	; 0x2c
   2b514:	strbne	r1, [r0]
   2b518:	mov	r0, r4
   2b51c:	mov	r1, r8
   2b520:	mov	r2, r9
   2b524:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b528:	ldrb	r0, [r4, #27]
   2b52c:	cmp	r0, #0
   2b530:	beq	2b554 <flatcc_json_printer_int32_enum_field@@Base+0xcc>
   2b534:	ldr	r1, [r4, #20]
   2b538:	mov	r0, r6
   2b53c:	bl	2a17c <flatcc_json_printer_int32@@Base+0x2c>
   2b540:	ldr	r1, [r4, #20]
   2b544:	add	r0, r1, r0
   2b548:	str	r0, [r4, #20]
   2b54c:	sub	sp, fp, #28
   2b550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b554:	mov	r0, r4
   2b558:	mov	r1, r6
   2b55c:	mov	r2, sl
   2b560:	sub	sp, fp, #28
   2b564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b568:	bx	r2

0002b56c <flatcc_json_printer_int64_enum_field@@Base>:
   2b56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b570:	add	fp, sp, #28
   2b574:	sub	sp, sp, #12
   2b578:	str	r3, [sp, #8]
   2b57c:	mov	r6, r1
   2b580:	mov	r4, r0
   2b584:	mov	r0, r1
   2b588:	mov	r1, r2
   2b58c:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2b590:	ldr	r5, [fp, #20]
   2b594:	ldr	r7, [fp, #16]
   2b598:	ldr	r1, [fp, #24]
   2b59c:	str	r1, [sp, #4]
   2b5a0:	ldr	r9, [fp, #8]
   2b5a4:	cmp	r0, #0
   2b5a8:	beq	2b5dc <flatcc_json_printer_int64_enum_field@@Base+0x70>
   2b5ac:	bl	2ac94 <flatcc_json_printer_int64_field@@Base+0xcc>
   2b5b0:	mov	r8, r0
   2b5b4:	mov	sl, r1
   2b5b8:	eor	r0, r1, r5
   2b5bc:	eor	r1, r8, r7
   2b5c0:	orrs	r0, r1, r0
   2b5c4:	bne	2b5f0 <flatcc_json_printer_int64_enum_field@@Base+0x84>
   2b5c8:	ldrb	r0, [r4, #28]
   2b5cc:	cmp	r0, #0
   2b5d0:	beq	2b5f0 <flatcc_json_printer_int64_enum_field@@Base+0x84>
   2b5d4:	sub	sp, fp, #28
   2b5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5dc:	ldrb	r0, [r4, #29]
   2b5e0:	cmp	r0, #0
   2b5e4:	mov	r8, r7
   2b5e8:	mov	sl, r5
   2b5ec:	beq	2b5d4 <flatcc_json_printer_int64_enum_field@@Base+0x68>
   2b5f0:	ldr	r0, [r6, #16]
   2b5f4:	add	r1, r0, #1
   2b5f8:	str	r1, [r6, #16]
   2b5fc:	cmp	r0, #0
   2b600:	ldrne	r0, [r4, #20]
   2b604:	addne	r1, r0, #1
   2b608:	strne	r1, [r4, #20]
   2b60c:	movne	r1, #44	; 0x2c
   2b610:	strbne	r1, [r0]
   2b614:	mov	r0, r4
   2b618:	ldr	r1, [sp, #8]
   2b61c:	mov	r2, r9
   2b620:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b624:	ldrb	r0, [r4, #27]
   2b628:	cmp	r0, #0
   2b62c:	beq	2b654 <flatcc_json_printer_int64_enum_field@@Base+0xe8>
   2b630:	ldr	r2, [r4, #20]
   2b634:	mov	r0, r8
   2b638:	mov	r1, sl
   2b63c:	bl	2a1d4 <flatcc_json_printer_int64@@Base+0x30>
   2b640:	ldr	r1, [r4, #20]
   2b644:	add	r0, r1, r0
   2b648:	str	r0, [r4, #20]
   2b64c:	sub	sp, fp, #28
   2b650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b654:	mov	r0, r4
   2b658:	mov	r2, r8
   2b65c:	mov	r3, sl
   2b660:	ldr	r1, [sp, #4]
   2b664:	sub	sp, fp, #28
   2b668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b66c:	bx	r1

0002b670 <flatcc_json_printer_bool_enum_field@@Base>:
   2b670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b674:	add	fp, sp, #28
   2b678:	sub	sp, sp, #4
   2b67c:	mov	r8, r3
   2b680:	mov	r5, r1
   2b684:	mov	r4, r0
   2b688:	mov	r0, r1
   2b68c:	mov	r1, r2
   2b690:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2b694:	ldr	sl, [fp, #16]
   2b698:	ldr	r7, [fp, #12]
   2b69c:	ldr	r9, [fp, #8]
   2b6a0:	cmp	r0, #0
   2b6a4:	beq	2b6cc <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   2b6a8:	bl	2ad48 <flatcc_json_printer_bool_field@@Base+0xac>
   2b6ac:	mov	r6, r0
   2b6b0:	cmp	r0, r7
   2b6b4:	bne	2b6dc <flatcc_json_printer_bool_enum_field@@Base+0x6c>
   2b6b8:	ldrb	r0, [r4, #28]
   2b6bc:	cmp	r0, #0
   2b6c0:	beq	2b6dc <flatcc_json_printer_bool_enum_field@@Base+0x6c>
   2b6c4:	sub	sp, fp, #28
   2b6c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6cc:	ldrb	r0, [r4, #29]
   2b6d0:	cmp	r0, #0
   2b6d4:	mov	r6, r7
   2b6d8:	beq	2b6c4 <flatcc_json_printer_bool_enum_field@@Base+0x54>
   2b6dc:	ldr	r0, [r5, #16]
   2b6e0:	add	r1, r0, #1
   2b6e4:	str	r1, [r5, #16]
   2b6e8:	cmp	r0, #0
   2b6ec:	ldrne	r0, [r4, #20]
   2b6f0:	addne	r1, r0, #1
   2b6f4:	strne	r1, [r4, #20]
   2b6f8:	movne	r1, #44	; 0x2c
   2b6fc:	strbne	r1, [r0]
   2b700:	mov	r0, r4
   2b704:	mov	r1, r8
   2b708:	mov	r2, r9
   2b70c:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b710:	ldrb	r0, [r4, #27]
   2b714:	cmp	r0, #0
   2b718:	beq	2b73c <flatcc_json_printer_bool_enum_field@@Base+0xcc>
   2b71c:	ldr	r1, [r4, #20]
   2b720:	mov	r0, r6
   2b724:	bl	2ad50 <flatcc_json_printer_bool_field@@Base+0xb4>
   2b728:	ldr	r1, [r4, #20]
   2b72c:	add	r0, r1, r0
   2b730:	str	r0, [r4, #20]
   2b734:	sub	sp, fp, #28
   2b738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b73c:	mov	r0, r4
   2b740:	mov	r1, r6
   2b744:	mov	r2, sl
   2b748:	sub	sp, fp, #28
   2b74c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b750:	bx	r2

0002b754 <flatcc_json_printer_uint8_struct_field@@Base>:
   2b754:	push	{r4, r5, r6, sl, fp, lr}
   2b758:	add	fp, sp, #16
   2b75c:	mov	r6, r1
   2b760:	mov	r4, r0
   2b764:	add	r0, r2, r3
   2b768:	bl	2a768 <flatcc_json_printer_uint8_field@@Base+0xac>
   2b76c:	mov	r5, r0
   2b770:	ldr	r2, [fp, #12]
   2b774:	ldr	r1, [fp, #8]
   2b778:	cmp	r6, #0
   2b77c:	ldrne	r0, [r4, #20]
   2b780:	addne	r3, r0, #1
   2b784:	strne	r3, [r4, #20]
   2b788:	movne	r3, #44	; 0x2c
   2b78c:	strbne	r3, [r0]
   2b790:	mov	r0, r4
   2b794:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b798:	ldr	r1, [r4, #20]
   2b79c:	mov	r0, r5
   2b7a0:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2b7a4:	ldr	r1, [r4, #20]
   2b7a8:	add	r0, r1, r0
   2b7ac:	str	r0, [r4, #20]
   2b7b0:	pop	{r4, r5, r6, sl, fp, pc}

0002b7b4 <flatcc_json_printer_uint16_struct_field@@Base>:
   2b7b4:	push	{r4, r5, r6, sl, fp, lr}
   2b7b8:	add	fp, sp, #16
   2b7bc:	mov	r6, r1
   2b7c0:	mov	r4, r0
   2b7c4:	add	r0, r2, r3
   2b7c8:	bl	2a81c <flatcc_json_printer_uint16_field@@Base+0xac>
   2b7cc:	mov	r5, r0
   2b7d0:	ldr	r2, [fp, #12]
   2b7d4:	ldr	r1, [fp, #8]
   2b7d8:	cmp	r6, #0
   2b7dc:	ldrne	r0, [r4, #20]
   2b7e0:	addne	r3, r0, #1
   2b7e4:	strne	r3, [r4, #20]
   2b7e8:	movne	r3, #44	; 0x2c
   2b7ec:	strbne	r3, [r0]
   2b7f0:	mov	r0, r4
   2b7f4:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b7f8:	ldr	r1, [r4, #20]
   2b7fc:	mov	r0, r5
   2b800:	bl	296b0 <flatcc_json_printer_uint16@@Base+0x2c>
   2b804:	ldr	r1, [r4, #20]
   2b808:	add	r0, r1, r0
   2b80c:	str	r0, [r4, #20]
   2b810:	pop	{r4, r5, r6, sl, fp, pc}

0002b814 <flatcc_json_printer_uint32_struct_field@@Base>:
   2b814:	push	{r4, r5, r6, sl, fp, lr}
   2b818:	add	fp, sp, #16
   2b81c:	mov	r6, r1
   2b820:	mov	r4, r0
   2b824:	add	r0, r2, r3
   2b828:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base+0xac>
   2b82c:	mov	r5, r0
   2b830:	ldr	r2, [fp, #12]
   2b834:	ldr	r1, [fp, #8]
   2b838:	cmp	r6, #0
   2b83c:	ldrne	r0, [r4, #20]
   2b840:	addne	r3, r0, #1
   2b844:	strne	r3, [r4, #20]
   2b848:	movne	r3, #44	; 0x2c
   2b84c:	strbne	r3, [r0]
   2b850:	mov	r0, r4
   2b854:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b858:	ldr	r1, [r4, #20]
   2b85c:	mov	r0, r5
   2b860:	bl	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   2b864:	ldr	r1, [r4, #20]
   2b868:	add	r0, r1, r0
   2b86c:	str	r0, [r4, #20]
   2b870:	pop	{r4, r5, r6, sl, fp, pc}

0002b874 <flatcc_json_printer_uint64_struct_field@@Base>:
   2b874:	push	{r4, r5, r6, r7, fp, lr}
   2b878:	add	fp, sp, #16
   2b87c:	mov	r7, r1
   2b880:	mov	r4, r0
   2b884:	add	r0, r2, r3
   2b888:	bl	2a9a4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2b88c:	mov	r5, r0
   2b890:	mov	r6, r1
   2b894:	ldr	r2, [fp, #12]
   2b898:	ldr	r1, [fp, #8]
   2b89c:	cmp	r7, #0
   2b8a0:	ldrne	r0, [r4, #20]
   2b8a4:	addne	r3, r0, #1
   2b8a8:	strne	r3, [r4, #20]
   2b8ac:	movne	r3, #44	; 0x2c
   2b8b0:	strbne	r3, [r0]
   2b8b4:	mov	r0, r4
   2b8b8:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b8bc:	ldr	r2, [r4, #20]
   2b8c0:	mov	r0, r5
   2b8c4:	mov	r1, r6
   2b8c8:	bl	29b78 <flatcc_json_printer_uint64@@Base+0x30>
   2b8cc:	ldr	r1, [r4, #20]
   2b8d0:	add	r0, r1, r0
   2b8d4:	str	r0, [r4, #20]
   2b8d8:	pop	{r4, r5, r6, r7, fp, pc}

0002b8dc <flatcc_json_printer_int8_struct_field@@Base>:
   2b8dc:	push	{r4, r5, r6, sl, fp, lr}
   2b8e0:	add	fp, sp, #16
   2b8e4:	mov	r6, r1
   2b8e8:	mov	r4, r0
   2b8ec:	add	r0, r2, r3
   2b8f0:	bl	2aa58 <flatcc_json_printer_int8_field@@Base+0xac>
   2b8f4:	mov	r5, r0
   2b8f8:	ldr	r2, [fp, #12]
   2b8fc:	ldr	r1, [fp, #8]
   2b900:	cmp	r6, #0
   2b904:	ldrne	r0, [r4, #20]
   2b908:	addne	r3, r0, #1
   2b90c:	strne	r3, [r4, #20]
   2b910:	movne	r3, #44	; 0x2c
   2b914:	strbne	r3, [r0]
   2b918:	mov	r0, r4
   2b91c:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b920:	ldr	r1, [r4, #20]
   2b924:	mov	r0, r5
   2b928:	bl	2a0cc <flatcc_json_printer_int8@@Base+0x2c>
   2b92c:	ldr	r1, [r4, #20]
   2b930:	add	r0, r1, r0
   2b934:	str	r0, [r4, #20]
   2b938:	pop	{r4, r5, r6, sl, fp, pc}

0002b93c <flatcc_json_printer_int16_struct_field@@Base>:
   2b93c:	push	{r4, r5, r6, sl, fp, lr}
   2b940:	add	fp, sp, #16
   2b944:	mov	r6, r1
   2b948:	mov	r4, r0
   2b94c:	add	r0, r2, r3
   2b950:	bl	2ab0c <flatcc_json_printer_int16_field@@Base+0xac>
   2b954:	mov	r5, r0
   2b958:	ldr	r2, [fp, #12]
   2b95c:	ldr	r1, [fp, #8]
   2b960:	cmp	r6, #0
   2b964:	ldrne	r0, [r4, #20]
   2b968:	addne	r3, r0, #1
   2b96c:	strne	r3, [r4, #20]
   2b970:	movne	r3, #44	; 0x2c
   2b974:	strbne	r3, [r0]
   2b978:	mov	r0, r4
   2b97c:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b980:	ldr	r1, [r4, #20]
   2b984:	mov	r0, r5
   2b988:	bl	2a124 <flatcc_json_printer_int16@@Base+0x2c>
   2b98c:	ldr	r1, [r4, #20]
   2b990:	add	r0, r1, r0
   2b994:	str	r0, [r4, #20]
   2b998:	pop	{r4, r5, r6, sl, fp, pc}

0002b99c <flatcc_json_printer_int32_struct_field@@Base>:
   2b99c:	push	{r4, r5, r6, sl, fp, lr}
   2b9a0:	add	fp, sp, #16
   2b9a4:	mov	r6, r1
   2b9a8:	mov	r4, r0
   2b9ac:	add	r0, r2, r3
   2b9b0:	bl	2abc0 <flatcc_json_printer_int32_field@@Base+0xac>
   2b9b4:	mov	r5, r0
   2b9b8:	ldr	r2, [fp, #12]
   2b9bc:	ldr	r1, [fp, #8]
   2b9c0:	cmp	r6, #0
   2b9c4:	ldrne	r0, [r4, #20]
   2b9c8:	addne	r3, r0, #1
   2b9cc:	strne	r3, [r4, #20]
   2b9d0:	movne	r3, #44	; 0x2c
   2b9d4:	strbne	r3, [r0]
   2b9d8:	mov	r0, r4
   2b9dc:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2b9e0:	ldr	r1, [r4, #20]
   2b9e4:	mov	r0, r5
   2b9e8:	bl	2a17c <flatcc_json_printer_int32@@Base+0x2c>
   2b9ec:	ldr	r1, [r4, #20]
   2b9f0:	add	r0, r1, r0
   2b9f4:	str	r0, [r4, #20]
   2b9f8:	pop	{r4, r5, r6, sl, fp, pc}

0002b9fc <flatcc_json_printer_int64_struct_field@@Base>:
   2b9fc:	push	{r4, r5, r6, r7, fp, lr}
   2ba00:	add	fp, sp, #16
   2ba04:	mov	r7, r1
   2ba08:	mov	r4, r0
   2ba0c:	add	r0, r2, r3
   2ba10:	bl	2ac94 <flatcc_json_printer_int64_field@@Base+0xcc>
   2ba14:	mov	r5, r0
   2ba18:	mov	r6, r1
   2ba1c:	ldr	r2, [fp, #12]
   2ba20:	ldr	r1, [fp, #8]
   2ba24:	cmp	r7, #0
   2ba28:	ldrne	r0, [r4, #20]
   2ba2c:	addne	r3, r0, #1
   2ba30:	strne	r3, [r4, #20]
   2ba34:	movne	r3, #44	; 0x2c
   2ba38:	strbne	r3, [r0]
   2ba3c:	mov	r0, r4
   2ba40:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2ba44:	ldr	r2, [r4, #20]
   2ba48:	mov	r0, r5
   2ba4c:	mov	r1, r6
   2ba50:	bl	2a1d4 <flatcc_json_printer_int64@@Base+0x30>
   2ba54:	ldr	r1, [r4, #20]
   2ba58:	add	r0, r1, r0
   2ba5c:	str	r0, [r4, #20]
   2ba60:	pop	{r4, r5, r6, r7, fp, pc}

0002ba64 <flatcc_json_printer_bool_struct_field@@Base>:
   2ba64:	push	{r4, r5, r6, sl, fp, lr}
   2ba68:	add	fp, sp, #16
   2ba6c:	mov	r6, r1
   2ba70:	mov	r4, r0
   2ba74:	add	r0, r2, r3
   2ba78:	bl	2ad48 <flatcc_json_printer_bool_field@@Base+0xac>
   2ba7c:	mov	r5, r0
   2ba80:	ldr	r2, [fp, #12]
   2ba84:	ldr	r1, [fp, #8]
   2ba88:	cmp	r6, #0
   2ba8c:	ldrne	r0, [r4, #20]
   2ba90:	addne	r3, r0, #1
   2ba94:	strne	r3, [r4, #20]
   2ba98:	movne	r3, #44	; 0x2c
   2ba9c:	strbne	r3, [r0]
   2baa0:	mov	r0, r4
   2baa4:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2baa8:	ldr	r1, [r4, #20]
   2baac:	mov	r0, r5
   2bab0:	bl	2ad50 <flatcc_json_printer_bool_field@@Base+0xb4>
   2bab4:	ldr	r1, [r4, #20]
   2bab8:	add	r0, r1, r0
   2babc:	str	r0, [r4, #20]
   2bac0:	pop	{r4, r5, r6, sl, fp, pc}

0002bac4 <flatcc_json_printer_float_struct_field@@Base>:
   2bac4:	push	{r4, r5, fp, lr}
   2bac8:	add	fp, sp, #8
   2bacc:	vpush	{d8}
   2bad0:	mov	r5, r1
   2bad4:	mov	r4, r0
   2bad8:	add	r0, r2, r3
   2badc:	bl	2ae48 <flatcc_json_printer_float_field@@Base+0xb8>
   2bae0:	vmov.f32	s16, s0
   2bae4:	ldr	r2, [fp, #12]
   2bae8:	ldr	r1, [fp, #8]
   2baec:	cmp	r5, #0
   2baf0:	ldrne	r0, [r4, #20]
   2baf4:	addne	r3, r0, #1
   2baf8:	strne	r3, [r4, #20]
   2bafc:	movne	r3, #44	; 0x2c
   2bb00:	strbne	r3, [r0]
   2bb04:	mov	r0, r4
   2bb08:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bb0c:	ldr	r0, [r4, #20]
   2bb10:	vcvt.f64.f32	d0, s16
   2bb14:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2bb18:	ldr	r1, [r4, #20]
   2bb1c:	add	r0, r1, r0
   2bb20:	str	r0, [r4, #20]
   2bb24:	vpop	{d8}
   2bb28:	pop	{r4, r5, fp, pc}

0002bb2c <flatcc_json_printer_double_struct_field@@Base>:
   2bb2c:	push	{r4, r5, fp, lr}
   2bb30:	add	fp, sp, #8
   2bb34:	vpush	{d8}
   2bb38:	mov	r5, r1
   2bb3c:	mov	r4, r0
   2bb40:	add	r0, r2, r3
   2bb44:	bl	2af08 <flatcc_json_printer_double_field@@Base+0xb8>
   2bb48:	vmov.f64	d8, d0
   2bb4c:	ldr	r2, [fp, #12]
   2bb50:	ldr	r1, [fp, #8]
   2bb54:	cmp	r5, #0
   2bb58:	ldrne	r0, [r4, #20]
   2bb5c:	addne	r3, r0, #1
   2bb60:	strne	r3, [r4, #20]
   2bb64:	movne	r3, #44	; 0x2c
   2bb68:	strbne	r3, [r0]
   2bb6c:	mov	r0, r4
   2bb70:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bb74:	ldr	r0, [r4, #20]
   2bb78:	vmov.f64	d0, d8
   2bb7c:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2bb80:	ldr	r1, [r4, #20]
   2bb84:	add	r0, r1, r0
   2bb88:	str	r0, [r4, #20]
   2bb8c:	vpop	{d8}
   2bb90:	pop	{r4, r5, fp, pc}

0002bb94 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   2bb94:	push	{r4, r5, r6, r7, fp, lr}
   2bb98:	add	fp, sp, #16
   2bb9c:	mov	r6, r1
   2bba0:	mov	r4, r0
   2bba4:	add	r0, r2, r3
   2bba8:	bl	2a768 <flatcc_json_printer_uint8_field@@Base+0xac>
   2bbac:	mov	r5, r0
   2bbb0:	add	r7, fp, #8
   2bbb4:	ldm	r7, {r1, r2, r7}
   2bbb8:	cmp	r6, #0
   2bbbc:	ldrne	r0, [r4, #20]
   2bbc0:	addne	r3, r0, #1
   2bbc4:	strne	r3, [r4, #20]
   2bbc8:	movne	r3, #44	; 0x2c
   2bbcc:	strbne	r3, [r0]
   2bbd0:	mov	r0, r4
   2bbd4:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bbd8:	ldrb	r0, [r4, #27]
   2bbdc:	cmp	r0, #0
   2bbe0:	beq	2bc00 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x6c>
   2bbe4:	ldr	r1, [r4, #20]
   2bbe8:	mov	r0, r5
   2bbec:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2bbf0:	ldr	r1, [r4, #20]
   2bbf4:	add	r0, r1, r0
   2bbf8:	str	r0, [r4, #20]
   2bbfc:	pop	{r4, r5, r6, r7, fp, pc}
   2bc00:	mov	r0, r4
   2bc04:	mov	r1, r5
   2bc08:	mov	r2, r7
   2bc0c:	pop	{r4, r5, r6, r7, fp, lr}
   2bc10:	bx	r2

0002bc14 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   2bc14:	push	{r4, r5, r6, r7, fp, lr}
   2bc18:	add	fp, sp, #16
   2bc1c:	mov	r6, r1
   2bc20:	mov	r4, r0
   2bc24:	add	r0, r2, r3
   2bc28:	bl	2a81c <flatcc_json_printer_uint16_field@@Base+0xac>
   2bc2c:	mov	r5, r0
   2bc30:	add	r7, fp, #8
   2bc34:	ldm	r7, {r1, r2, r7}
   2bc38:	cmp	r6, #0
   2bc3c:	ldrne	r0, [r4, #20]
   2bc40:	addne	r3, r0, #1
   2bc44:	strne	r3, [r4, #20]
   2bc48:	movne	r3, #44	; 0x2c
   2bc4c:	strbne	r3, [r0]
   2bc50:	mov	r0, r4
   2bc54:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bc58:	ldrb	r0, [r4, #27]
   2bc5c:	cmp	r0, #0
   2bc60:	beq	2bc80 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x6c>
   2bc64:	ldr	r1, [r4, #20]
   2bc68:	mov	r0, r5
   2bc6c:	bl	296b0 <flatcc_json_printer_uint16@@Base+0x2c>
   2bc70:	ldr	r1, [r4, #20]
   2bc74:	add	r0, r1, r0
   2bc78:	str	r0, [r4, #20]
   2bc7c:	pop	{r4, r5, r6, r7, fp, pc}
   2bc80:	mov	r0, r4
   2bc84:	mov	r1, r5
   2bc88:	mov	r2, r7
   2bc8c:	pop	{r4, r5, r6, r7, fp, lr}
   2bc90:	bx	r2

0002bc94 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   2bc94:	push	{r4, r5, r6, r7, fp, lr}
   2bc98:	add	fp, sp, #16
   2bc9c:	mov	r6, r1
   2bca0:	mov	r4, r0
   2bca4:	add	r0, r2, r3
   2bca8:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base+0xac>
   2bcac:	mov	r5, r0
   2bcb0:	add	r7, fp, #8
   2bcb4:	ldm	r7, {r1, r2, r7}
   2bcb8:	cmp	r6, #0
   2bcbc:	ldrne	r0, [r4, #20]
   2bcc0:	addne	r3, r0, #1
   2bcc4:	strne	r3, [r4, #20]
   2bcc8:	movne	r3, #44	; 0x2c
   2bccc:	strbne	r3, [r0]
   2bcd0:	mov	r0, r4
   2bcd4:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bcd8:	ldrb	r0, [r4, #27]
   2bcdc:	cmp	r0, #0
   2bce0:	beq	2bd00 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x6c>
   2bce4:	ldr	r1, [r4, #20]
   2bce8:	mov	r0, r5
   2bcec:	bl	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   2bcf0:	ldr	r1, [r4, #20]
   2bcf4:	add	r0, r1, r0
   2bcf8:	str	r0, [r4, #20]
   2bcfc:	pop	{r4, r5, r6, r7, fp, pc}
   2bd00:	mov	r0, r4
   2bd04:	mov	r1, r5
   2bd08:	mov	r2, r7
   2bd0c:	pop	{r4, r5, r6, r7, fp, lr}
   2bd10:	bx	r2

0002bd14 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   2bd14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2bd18:	add	fp, sp, #24
   2bd1c:	mov	r7, r1
   2bd20:	mov	r4, r0
   2bd24:	add	r0, r2, r3
   2bd28:	bl	2a9a4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2bd2c:	mov	r6, r0
   2bd30:	mov	r5, r1
   2bd34:	add	r8, fp, #8
   2bd38:	ldm	r8, {r1, r2, r8}
   2bd3c:	cmp	r7, #0
   2bd40:	ldrne	r0, [r4, #20]
   2bd44:	addne	r3, r0, #1
   2bd48:	strne	r3, [r4, #20]
   2bd4c:	movne	r3, #44	; 0x2c
   2bd50:	strbne	r3, [r0]
   2bd54:	mov	r0, r4
   2bd58:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bd5c:	ldrb	r0, [r4, #27]
   2bd60:	cmp	r0, #0
   2bd64:	beq	2bd88 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x74>
   2bd68:	ldr	r2, [r4, #20]
   2bd6c:	mov	r0, r6
   2bd70:	mov	r1, r5
   2bd74:	bl	29b78 <flatcc_json_printer_uint64@@Base+0x30>
   2bd78:	ldr	r1, [r4, #20]
   2bd7c:	add	r0, r1, r0
   2bd80:	str	r0, [r4, #20]
   2bd84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2bd88:	mov	r0, r4
   2bd8c:	mov	r2, r6
   2bd90:	mov	r3, r5
   2bd94:	mov	r1, r8
   2bd98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2bd9c:	bx	r1

0002bda0 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   2bda0:	push	{r4, r5, r6, r7, fp, lr}
   2bda4:	add	fp, sp, #16
   2bda8:	mov	r6, r1
   2bdac:	mov	r4, r0
   2bdb0:	add	r0, r2, r3
   2bdb4:	bl	2aa58 <flatcc_json_printer_int8_field@@Base+0xac>
   2bdb8:	mov	r5, r0
   2bdbc:	add	r7, fp, #8
   2bdc0:	ldm	r7, {r1, r2, r7}
   2bdc4:	cmp	r6, #0
   2bdc8:	ldrne	r0, [r4, #20]
   2bdcc:	addne	r3, r0, #1
   2bdd0:	strne	r3, [r4, #20]
   2bdd4:	movne	r3, #44	; 0x2c
   2bdd8:	strbne	r3, [r0]
   2bddc:	mov	r0, r4
   2bde0:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bde4:	ldrb	r0, [r4, #27]
   2bde8:	cmp	r0, #0
   2bdec:	beq	2be0c <flatcc_json_printer_int8_enum_struct_field@@Base+0x6c>
   2bdf0:	ldr	r1, [r4, #20]
   2bdf4:	mov	r0, r5
   2bdf8:	bl	2a0cc <flatcc_json_printer_int8@@Base+0x2c>
   2bdfc:	ldr	r1, [r4, #20]
   2be00:	add	r0, r1, r0
   2be04:	str	r0, [r4, #20]
   2be08:	pop	{r4, r5, r6, r7, fp, pc}
   2be0c:	mov	r0, r4
   2be10:	mov	r1, r5
   2be14:	mov	r2, r7
   2be18:	pop	{r4, r5, r6, r7, fp, lr}
   2be1c:	bx	r2

0002be20 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   2be20:	push	{r4, r5, r6, r7, fp, lr}
   2be24:	add	fp, sp, #16
   2be28:	mov	r6, r1
   2be2c:	mov	r4, r0
   2be30:	add	r0, r2, r3
   2be34:	bl	2ab0c <flatcc_json_printer_int16_field@@Base+0xac>
   2be38:	mov	r5, r0
   2be3c:	add	r7, fp, #8
   2be40:	ldm	r7, {r1, r2, r7}
   2be44:	cmp	r6, #0
   2be48:	ldrne	r0, [r4, #20]
   2be4c:	addne	r3, r0, #1
   2be50:	strne	r3, [r4, #20]
   2be54:	movne	r3, #44	; 0x2c
   2be58:	strbne	r3, [r0]
   2be5c:	mov	r0, r4
   2be60:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2be64:	ldrb	r0, [r4, #27]
   2be68:	cmp	r0, #0
   2be6c:	beq	2be8c <flatcc_json_printer_int16_enum_struct_field@@Base+0x6c>
   2be70:	ldr	r1, [r4, #20]
   2be74:	mov	r0, r5
   2be78:	bl	2a124 <flatcc_json_printer_int16@@Base+0x2c>
   2be7c:	ldr	r1, [r4, #20]
   2be80:	add	r0, r1, r0
   2be84:	str	r0, [r4, #20]
   2be88:	pop	{r4, r5, r6, r7, fp, pc}
   2be8c:	mov	r0, r4
   2be90:	mov	r1, r5
   2be94:	mov	r2, r7
   2be98:	pop	{r4, r5, r6, r7, fp, lr}
   2be9c:	bx	r2

0002bea0 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   2bea0:	push	{r4, r5, r6, r7, fp, lr}
   2bea4:	add	fp, sp, #16
   2bea8:	mov	r6, r1
   2beac:	mov	r4, r0
   2beb0:	add	r0, r2, r3
   2beb4:	bl	2abc0 <flatcc_json_printer_int32_field@@Base+0xac>
   2beb8:	mov	r5, r0
   2bebc:	add	r7, fp, #8
   2bec0:	ldm	r7, {r1, r2, r7}
   2bec4:	cmp	r6, #0
   2bec8:	ldrne	r0, [r4, #20]
   2becc:	addne	r3, r0, #1
   2bed0:	strne	r3, [r4, #20]
   2bed4:	movne	r3, #44	; 0x2c
   2bed8:	strbne	r3, [r0]
   2bedc:	mov	r0, r4
   2bee0:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bee4:	ldrb	r0, [r4, #27]
   2bee8:	cmp	r0, #0
   2beec:	beq	2bf0c <flatcc_json_printer_int32_enum_struct_field@@Base+0x6c>
   2bef0:	ldr	r1, [r4, #20]
   2bef4:	mov	r0, r5
   2bef8:	bl	2a17c <flatcc_json_printer_int32@@Base+0x2c>
   2befc:	ldr	r1, [r4, #20]
   2bf00:	add	r0, r1, r0
   2bf04:	str	r0, [r4, #20]
   2bf08:	pop	{r4, r5, r6, r7, fp, pc}
   2bf0c:	mov	r0, r4
   2bf10:	mov	r1, r5
   2bf14:	mov	r2, r7
   2bf18:	pop	{r4, r5, r6, r7, fp, lr}
   2bf1c:	bx	r2

0002bf20 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   2bf20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2bf24:	add	fp, sp, #24
   2bf28:	mov	r7, r1
   2bf2c:	mov	r4, r0
   2bf30:	add	r0, r2, r3
   2bf34:	bl	2ac94 <flatcc_json_printer_int64_field@@Base+0xcc>
   2bf38:	mov	r6, r0
   2bf3c:	mov	r5, r1
   2bf40:	add	r8, fp, #8
   2bf44:	ldm	r8, {r1, r2, r8}
   2bf48:	cmp	r7, #0
   2bf4c:	ldrne	r0, [r4, #20]
   2bf50:	addne	r3, r0, #1
   2bf54:	strne	r3, [r4, #20]
   2bf58:	movne	r3, #44	; 0x2c
   2bf5c:	strbne	r3, [r0]
   2bf60:	mov	r0, r4
   2bf64:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bf68:	ldrb	r0, [r4, #27]
   2bf6c:	cmp	r0, #0
   2bf70:	beq	2bf94 <flatcc_json_printer_int64_enum_struct_field@@Base+0x74>
   2bf74:	ldr	r2, [r4, #20]
   2bf78:	mov	r0, r6
   2bf7c:	mov	r1, r5
   2bf80:	bl	2a1d4 <flatcc_json_printer_int64@@Base+0x30>
   2bf84:	ldr	r1, [r4, #20]
   2bf88:	add	r0, r1, r0
   2bf8c:	str	r0, [r4, #20]
   2bf90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2bf94:	mov	r0, r4
   2bf98:	mov	r2, r6
   2bf9c:	mov	r3, r5
   2bfa0:	mov	r1, r8
   2bfa4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2bfa8:	bx	r1

0002bfac <flatcc_json_printer_bool_enum_struct_field@@Base>:
   2bfac:	push	{r4, r5, r6, r7, fp, lr}
   2bfb0:	add	fp, sp, #16
   2bfb4:	mov	r6, r1
   2bfb8:	mov	r4, r0
   2bfbc:	add	r0, r2, r3
   2bfc0:	bl	2ad48 <flatcc_json_printer_bool_field@@Base+0xac>
   2bfc4:	mov	r5, r0
   2bfc8:	add	r7, fp, #8
   2bfcc:	ldm	r7, {r1, r2, r7}
   2bfd0:	cmp	r6, #0
   2bfd4:	ldrne	r0, [r4, #20]
   2bfd8:	addne	r3, r0, #1
   2bfdc:	strne	r3, [r4, #20]
   2bfe0:	movne	r3, #44	; 0x2c
   2bfe4:	strbne	r3, [r0]
   2bfe8:	mov	r0, r4
   2bfec:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2bff0:	ldrb	r0, [r4, #27]
   2bff4:	cmp	r0, #0
   2bff8:	beq	2c018 <flatcc_json_printer_bool_enum_struct_field@@Base+0x6c>
   2bffc:	ldr	r1, [r4, #20]
   2c000:	mov	r0, r5
   2c004:	bl	2ad50 <flatcc_json_printer_bool_field@@Base+0xb4>
   2c008:	ldr	r1, [r4, #20]
   2c00c:	add	r0, r1, r0
   2c010:	str	r0, [r4, #20]
   2c014:	pop	{r4, r5, r6, r7, fp, pc}
   2c018:	mov	r0, r4
   2c01c:	mov	r1, r5
   2c020:	mov	r2, r7
   2c024:	pop	{r4, r5, r6, r7, fp, lr}
   2c028:	bx	r2

0002c02c <flatcc_json_printer_utype_vector_field@@Base>:
   2c02c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c030:	add	fp, sp, #24
   2c034:	mov	r7, r3
   2c038:	mov	r5, r1
   2c03c:	mov	r4, r0
   2c040:	mov	r0, r1
   2c044:	mov	r1, r2
   2c048:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2c04c:	cmp	r0, #0
   2c050:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c054:	ldr	r8, [fp, #8]
   2c058:	ldr	r1, [r5, #16]
   2c05c:	add	r2, r1, #1
   2c060:	str	r2, [r5, #16]
   2c064:	cmp	r1, #0
   2c068:	ldrne	r1, [r4, #20]
   2c06c:	addne	r2, r1, #1
   2c070:	strne	r2, [r4, #20]
   2c074:	movne	r2, #44	; 0x2c
   2c078:	strbne	r2, [r1]
   2c07c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2c080:	mov	r5, r0
   2c084:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2c088:	mov	r6, r0
   2c08c:	mov	r0, r4
   2c090:	mov	r1, r7
   2c094:	mov	r2, r8
   2c098:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2c09c:	ldr	r0, [r4, #20]
   2c0a0:	ldr	r1, [r4, #32]
   2c0a4:	add	r1, r1, #1
   2c0a8:	str	r1, [r4, #32]
   2c0ac:	add	r1, r0, #1
   2c0b0:	str	r1, [r4, #20]
   2c0b4:	mov	r1, #91	; 0x5b
   2c0b8:	strb	r1, [r0]
   2c0bc:	cmp	r6, #0
   2c0c0:	beq	2c198 <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   2c0c4:	add	r7, r5, #4
   2c0c8:	ldrb	r0, [r4, #25]
   2c0cc:	cmp	r0, #0
   2c0d0:	beq	2c0f4 <flatcc_json_printer_utype_vector_field@@Base+0xc8>
   2c0d4:	ldr	r0, [r4, #20]
   2c0d8:	add	r1, r0, #1
   2c0dc:	str	r1, [r4, #20]
   2c0e0:	mov	r1, #10
   2c0e4:	strb	r1, [r0]
   2c0e8:	mov	r0, r4
   2c0ec:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c0f0:	b	2c0fc <flatcc_json_printer_utype_vector_field@@Base+0xd0>
   2c0f4:	mov	r0, r4
   2c0f8:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c0fc:	mov	r0, r7
   2c100:	bl	2c1ec <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2c104:	ldr	r1, [r4, #20]
   2c108:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2c10c:	ldr	r1, [r4, #20]
   2c110:	add	r0, r1, r0
   2c114:	str	r0, [r4, #20]
   2c118:	cmp	r6, #1
   2c11c:	beq	2c198 <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   2c120:	rsb	r6, r6, #1
   2c124:	add	r5, r5, #5
   2c128:	mov	r7, #44	; 0x2c
   2c12c:	mov	r8, #10
   2c130:	ldr	r0, [r4, #20]
   2c134:	add	r1, r0, #1
   2c138:	str	r1, [r4, #20]
   2c13c:	strb	r7, [r0]
   2c140:	ldrb	r0, [r4, #25]
   2c144:	cmp	r0, #0
   2c148:	beq	2c168 <flatcc_json_printer_utype_vector_field@@Base+0x13c>
   2c14c:	ldr	r0, [r4, #20]
   2c150:	add	r1, r0, #1
   2c154:	str	r1, [r4, #20]
   2c158:	strb	r8, [r0]
   2c15c:	mov	r0, r4
   2c160:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c164:	b	2c170 <flatcc_json_printer_utype_vector_field@@Base+0x144>
   2c168:	mov	r0, r4
   2c16c:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c170:	mov	r0, r5
   2c174:	bl	2c1ec <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2c178:	ldr	r1, [r4, #20]
   2c17c:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2c180:	ldr	r1, [r4, #20]
   2c184:	add	r0, r1, r0
   2c188:	str	r0, [r4, #20]
   2c18c:	adds	r6, r6, #1
   2c190:	add	r5, r5, #1
   2c194:	bne	2c130 <flatcc_json_printer_utype_vector_field@@Base+0x104>
   2c198:	ldrb	r0, [r4, #25]
   2c19c:	cmp	r0, #0
   2c1a0:	beq	2c1cc <flatcc_json_printer_utype_vector_field@@Base+0x1a0>
   2c1a4:	ldr	r0, [r4, #20]
   2c1a8:	add	r1, r0, #1
   2c1ac:	str	r1, [r4, #20]
   2c1b0:	mov	r1, #10
   2c1b4:	strb	r1, [r0]
   2c1b8:	ldr	r0, [r4, #32]
   2c1bc:	sub	r0, r0, #1
   2c1c0:	str	r0, [r4, #32]
   2c1c4:	mov	r0, r4
   2c1c8:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c1cc:	ldr	r0, [r4, #20]
   2c1d0:	add	r1, r0, #1
   2c1d4:	str	r1, [r4, #20]
   2c1d8:	mov	r1, #93	; 0x5d
   2c1dc:	strb	r1, [r0]
   2c1e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c1e4:	ldr	r0, [r0]
   2c1e8:	b	30be4 <flatcc_json_printer_clear@@Base+0xec8>
   2c1ec:	ldrb	r0, [r0]
   2c1f0:	b	30be8 <flatcc_json_printer_clear@@Base+0xecc>

0002c1f4 <flatcc_json_printer_uint8_vector_field@@Base>:
   2c1f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c1f8:	add	fp, sp, #24
   2c1fc:	mov	r7, r3
   2c200:	mov	r5, r1
   2c204:	mov	r4, r0
   2c208:	mov	r0, r1
   2c20c:	mov	r1, r2
   2c210:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2c214:	cmp	r0, #0
   2c218:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c21c:	ldr	r8, [fp, #8]
   2c220:	ldr	r1, [r5, #16]
   2c224:	add	r2, r1, #1
   2c228:	str	r2, [r5, #16]
   2c22c:	cmp	r1, #0
   2c230:	ldrne	r1, [r4, #20]
   2c234:	addne	r2, r1, #1
   2c238:	strne	r2, [r4, #20]
   2c23c:	movne	r2, #44	; 0x2c
   2c240:	strbne	r2, [r1]
   2c244:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2c248:	mov	r5, r0
   2c24c:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2c250:	mov	r6, r0
   2c254:	mov	r0, r4
   2c258:	mov	r1, r7
   2c25c:	mov	r2, r8
   2c260:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2c264:	ldr	r0, [r4, #20]
   2c268:	ldr	r1, [r4, #32]
   2c26c:	add	r1, r1, #1
   2c270:	str	r1, [r4, #32]
   2c274:	add	r1, r0, #1
   2c278:	str	r1, [r4, #20]
   2c27c:	mov	r1, #91	; 0x5b
   2c280:	strb	r1, [r0]
   2c284:	cmp	r6, #0
   2c288:	beq	2c360 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   2c28c:	add	r7, r5, #4
   2c290:	ldrb	r0, [r4, #25]
   2c294:	cmp	r0, #0
   2c298:	beq	2c2bc <flatcc_json_printer_uint8_vector_field@@Base+0xc8>
   2c29c:	ldr	r0, [r4, #20]
   2c2a0:	add	r1, r0, #1
   2c2a4:	str	r1, [r4, #20]
   2c2a8:	mov	r1, #10
   2c2ac:	strb	r1, [r0]
   2c2b0:	mov	r0, r4
   2c2b4:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c2b8:	b	2c2c4 <flatcc_json_printer_uint8_vector_field@@Base+0xd0>
   2c2bc:	mov	r0, r4
   2c2c0:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c2c4:	mov	r0, r7
   2c2c8:	bl	2a768 <flatcc_json_printer_uint8_field@@Base+0xac>
   2c2cc:	ldr	r1, [r4, #20]
   2c2d0:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2c2d4:	ldr	r1, [r4, #20]
   2c2d8:	add	r0, r1, r0
   2c2dc:	str	r0, [r4, #20]
   2c2e0:	cmp	r6, #1
   2c2e4:	beq	2c360 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   2c2e8:	rsb	r6, r6, #1
   2c2ec:	add	r5, r5, #5
   2c2f0:	mov	r7, #44	; 0x2c
   2c2f4:	mov	r8, #10
   2c2f8:	ldr	r0, [r4, #20]
   2c2fc:	add	r1, r0, #1
   2c300:	str	r1, [r4, #20]
   2c304:	strb	r7, [r0]
   2c308:	ldrb	r0, [r4, #25]
   2c30c:	cmp	r0, #0
   2c310:	beq	2c330 <flatcc_json_printer_uint8_vector_field@@Base+0x13c>
   2c314:	ldr	r0, [r4, #20]
   2c318:	add	r1, r0, #1
   2c31c:	str	r1, [r4, #20]
   2c320:	strb	r8, [r0]
   2c324:	mov	r0, r4
   2c328:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c32c:	b	2c338 <flatcc_json_printer_uint8_vector_field@@Base+0x144>
   2c330:	mov	r0, r4
   2c334:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c338:	mov	r0, r5
   2c33c:	bl	2a768 <flatcc_json_printer_uint8_field@@Base+0xac>
   2c340:	ldr	r1, [r4, #20]
   2c344:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2c348:	ldr	r1, [r4, #20]
   2c34c:	add	r0, r1, r0
   2c350:	str	r0, [r4, #20]
   2c354:	adds	r6, r6, #1
   2c358:	add	r5, r5, #1
   2c35c:	bne	2c2f8 <flatcc_json_printer_uint8_vector_field@@Base+0x104>
   2c360:	ldrb	r0, [r4, #25]
   2c364:	cmp	r0, #0
   2c368:	beq	2c394 <flatcc_json_printer_uint8_vector_field@@Base+0x1a0>
   2c36c:	ldr	r0, [r4, #20]
   2c370:	add	r1, r0, #1
   2c374:	str	r1, [r4, #20]
   2c378:	mov	r1, #10
   2c37c:	strb	r1, [r0]
   2c380:	ldr	r0, [r4, #32]
   2c384:	sub	r0, r0, #1
   2c388:	str	r0, [r4, #32]
   2c38c:	mov	r0, r4
   2c390:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c394:	ldr	r0, [r4, #20]
   2c398:	add	r1, r0, #1
   2c39c:	str	r1, [r4, #20]
   2c3a0:	mov	r1, #93	; 0x5d
   2c3a4:	strb	r1, [r0]
   2c3a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002c3ac <flatcc_json_printer_uint16_vector_field@@Base>:
   2c3ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c3b0:	add	fp, sp, #24
   2c3b4:	mov	r7, r3
   2c3b8:	mov	r5, r1
   2c3bc:	mov	r4, r0
   2c3c0:	mov	r0, r1
   2c3c4:	mov	r1, r2
   2c3c8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2c3cc:	cmp	r0, #0
   2c3d0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c3d4:	ldr	r8, [fp, #8]
   2c3d8:	ldr	r1, [r5, #16]
   2c3dc:	add	r2, r1, #1
   2c3e0:	str	r2, [r5, #16]
   2c3e4:	cmp	r1, #0
   2c3e8:	ldrne	r1, [r4, #20]
   2c3ec:	addne	r2, r1, #1
   2c3f0:	strne	r2, [r4, #20]
   2c3f4:	movne	r2, #44	; 0x2c
   2c3f8:	strbne	r2, [r1]
   2c3fc:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2c400:	mov	r5, r0
   2c404:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2c408:	mov	r6, r0
   2c40c:	mov	r0, r4
   2c410:	mov	r1, r7
   2c414:	mov	r2, r8
   2c418:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2c41c:	ldr	r0, [r4, #20]
   2c420:	ldr	r1, [r4, #32]
   2c424:	add	r1, r1, #1
   2c428:	str	r1, [r4, #32]
   2c42c:	add	r1, r0, #1
   2c430:	str	r1, [r4, #20]
   2c434:	mov	r1, #91	; 0x5b
   2c438:	strb	r1, [r0]
   2c43c:	cmp	r6, #0
   2c440:	beq	2c518 <flatcc_json_printer_uint16_vector_field@@Base+0x16c>
   2c444:	add	r7, r5, #4
   2c448:	ldrb	r0, [r4, #25]
   2c44c:	cmp	r0, #0
   2c450:	beq	2c474 <flatcc_json_printer_uint16_vector_field@@Base+0xc8>
   2c454:	ldr	r0, [r4, #20]
   2c458:	add	r1, r0, #1
   2c45c:	str	r1, [r4, #20]
   2c460:	mov	r1, #10
   2c464:	strb	r1, [r0]
   2c468:	mov	r0, r4
   2c46c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c470:	b	2c47c <flatcc_json_printer_uint16_vector_field@@Base+0xd0>
   2c474:	mov	r0, r4
   2c478:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c47c:	mov	r0, r7
   2c480:	bl	2a81c <flatcc_json_printer_uint16_field@@Base+0xac>
   2c484:	ldr	r1, [r4, #20]
   2c488:	bl	296b0 <flatcc_json_printer_uint16@@Base+0x2c>
   2c48c:	ldr	r1, [r4, #20]
   2c490:	add	r0, r1, r0
   2c494:	str	r0, [r4, #20]
   2c498:	cmp	r6, #1
   2c49c:	beq	2c518 <flatcc_json_printer_uint16_vector_field@@Base+0x16c>
   2c4a0:	rsb	r6, r6, #1
   2c4a4:	add	r5, r5, #6
   2c4a8:	mov	r7, #44	; 0x2c
   2c4ac:	mov	r8, #10
   2c4b0:	ldr	r0, [r4, #20]
   2c4b4:	add	r1, r0, #1
   2c4b8:	str	r1, [r4, #20]
   2c4bc:	strb	r7, [r0]
   2c4c0:	ldrb	r0, [r4, #25]
   2c4c4:	cmp	r0, #0
   2c4c8:	beq	2c4e8 <flatcc_json_printer_uint16_vector_field@@Base+0x13c>
   2c4cc:	ldr	r0, [r4, #20]
   2c4d0:	add	r1, r0, #1
   2c4d4:	str	r1, [r4, #20]
   2c4d8:	strb	r8, [r0]
   2c4dc:	mov	r0, r4
   2c4e0:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c4e4:	b	2c4f0 <flatcc_json_printer_uint16_vector_field@@Base+0x144>
   2c4e8:	mov	r0, r4
   2c4ec:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c4f0:	mov	r0, r5
   2c4f4:	bl	2a81c <flatcc_json_printer_uint16_field@@Base+0xac>
   2c4f8:	ldr	r1, [r4, #20]
   2c4fc:	bl	296b0 <flatcc_json_printer_uint16@@Base+0x2c>
   2c500:	ldr	r1, [r4, #20]
   2c504:	add	r0, r1, r0
   2c508:	str	r0, [r4, #20]
   2c50c:	adds	r6, r6, #1
   2c510:	add	r5, r5, #2
   2c514:	bne	2c4b0 <flatcc_json_printer_uint16_vector_field@@Base+0x104>
   2c518:	ldrb	r0, [r4, #25]
   2c51c:	cmp	r0, #0
   2c520:	beq	2c54c <flatcc_json_printer_uint16_vector_field@@Base+0x1a0>
   2c524:	ldr	r0, [r4, #20]
   2c528:	add	r1, r0, #1
   2c52c:	str	r1, [r4, #20]
   2c530:	mov	r1, #10
   2c534:	strb	r1, [r0]
   2c538:	ldr	r0, [r4, #32]
   2c53c:	sub	r0, r0, #1
   2c540:	str	r0, [r4, #32]
   2c544:	mov	r0, r4
   2c548:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c54c:	ldr	r0, [r4, #20]
   2c550:	add	r1, r0, #1
   2c554:	str	r1, [r4, #20]
   2c558:	mov	r1, #93	; 0x5d
   2c55c:	strb	r1, [r0]
   2c560:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002c564 <flatcc_json_printer_uint32_vector_field@@Base>:
   2c564:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c568:	add	fp, sp, #24
   2c56c:	mov	r7, r3
   2c570:	mov	r5, r1
   2c574:	mov	r4, r0
   2c578:	mov	r0, r1
   2c57c:	mov	r1, r2
   2c580:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2c584:	cmp	r0, #0
   2c588:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c58c:	ldr	r8, [fp, #8]
   2c590:	ldr	r1, [r5, #16]
   2c594:	add	r2, r1, #1
   2c598:	str	r2, [r5, #16]
   2c59c:	cmp	r1, #0
   2c5a0:	ldrne	r1, [r4, #20]
   2c5a4:	addne	r2, r1, #1
   2c5a8:	strne	r2, [r4, #20]
   2c5ac:	movne	r2, #44	; 0x2c
   2c5b0:	strbne	r2, [r1]
   2c5b4:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2c5b8:	mov	r5, r0
   2c5bc:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2c5c0:	mov	r6, r0
   2c5c4:	mov	r0, r4
   2c5c8:	mov	r1, r7
   2c5cc:	mov	r2, r8
   2c5d0:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2c5d4:	ldr	r0, [r4, #20]
   2c5d8:	ldr	r1, [r4, #32]
   2c5dc:	add	r1, r1, #1
   2c5e0:	str	r1, [r4, #32]
   2c5e4:	add	r1, r0, #1
   2c5e8:	str	r1, [r4, #20]
   2c5ec:	mov	r1, #91	; 0x5b
   2c5f0:	strb	r1, [r0]
   2c5f4:	cmp	r6, #0
   2c5f8:	beq	2c6d0 <flatcc_json_printer_uint32_vector_field@@Base+0x16c>
   2c5fc:	add	r7, r5, #4
   2c600:	ldrb	r0, [r4, #25]
   2c604:	cmp	r0, #0
   2c608:	beq	2c62c <flatcc_json_printer_uint32_vector_field@@Base+0xc8>
   2c60c:	ldr	r0, [r4, #20]
   2c610:	add	r1, r0, #1
   2c614:	str	r1, [r4, #20]
   2c618:	mov	r1, #10
   2c61c:	strb	r1, [r0]
   2c620:	mov	r0, r4
   2c624:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c628:	b	2c634 <flatcc_json_printer_uint32_vector_field@@Base+0xd0>
   2c62c:	mov	r0, r4
   2c630:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c634:	mov	r0, r7
   2c638:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base+0xac>
   2c63c:	ldr	r1, [r4, #20]
   2c640:	bl	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   2c644:	ldr	r1, [r4, #20]
   2c648:	add	r0, r1, r0
   2c64c:	str	r0, [r4, #20]
   2c650:	cmp	r6, #1
   2c654:	beq	2c6d0 <flatcc_json_printer_uint32_vector_field@@Base+0x16c>
   2c658:	rsb	r6, r6, #1
   2c65c:	add	r5, r5, #8
   2c660:	mov	r7, #44	; 0x2c
   2c664:	mov	r8, #10
   2c668:	ldr	r0, [r4, #20]
   2c66c:	add	r1, r0, #1
   2c670:	str	r1, [r4, #20]
   2c674:	strb	r7, [r0]
   2c678:	ldrb	r0, [r4, #25]
   2c67c:	cmp	r0, #0
   2c680:	beq	2c6a0 <flatcc_json_printer_uint32_vector_field@@Base+0x13c>
   2c684:	ldr	r0, [r4, #20]
   2c688:	add	r1, r0, #1
   2c68c:	str	r1, [r4, #20]
   2c690:	strb	r8, [r0]
   2c694:	mov	r0, r4
   2c698:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c69c:	b	2c6a8 <flatcc_json_printer_uint32_vector_field@@Base+0x144>
   2c6a0:	mov	r0, r4
   2c6a4:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c6a8:	mov	r0, r5
   2c6ac:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base+0xac>
   2c6b0:	ldr	r1, [r4, #20]
   2c6b4:	bl	2983c <flatcc_json_printer_uint32@@Base+0x2c>
   2c6b8:	ldr	r1, [r4, #20]
   2c6bc:	add	r0, r1, r0
   2c6c0:	str	r0, [r4, #20]
   2c6c4:	adds	r6, r6, #1
   2c6c8:	add	r5, r5, #4
   2c6cc:	bne	2c668 <flatcc_json_printer_uint32_vector_field@@Base+0x104>
   2c6d0:	ldrb	r0, [r4, #25]
   2c6d4:	cmp	r0, #0
   2c6d8:	beq	2c704 <flatcc_json_printer_uint32_vector_field@@Base+0x1a0>
   2c6dc:	ldr	r0, [r4, #20]
   2c6e0:	add	r1, r0, #1
   2c6e4:	str	r1, [r4, #20]
   2c6e8:	mov	r1, #10
   2c6ec:	strb	r1, [r0]
   2c6f0:	ldr	r0, [r4, #32]
   2c6f4:	sub	r0, r0, #1
   2c6f8:	str	r0, [r4, #32]
   2c6fc:	mov	r0, r4
   2c700:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c704:	ldr	r0, [r4, #20]
   2c708:	add	r1, r0, #1
   2c70c:	str	r1, [r4, #20]
   2c710:	mov	r1, #93	; 0x5d
   2c714:	strb	r1, [r0]
   2c718:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002c71c <flatcc_json_printer_uint64_vector_field@@Base>:
   2c71c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c720:	add	fp, sp, #24
   2c724:	mov	r7, r3
   2c728:	mov	r5, r1
   2c72c:	mov	r4, r0
   2c730:	mov	r0, r1
   2c734:	mov	r1, r2
   2c738:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2c73c:	cmp	r0, #0
   2c740:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c744:	ldr	r8, [fp, #8]
   2c748:	ldr	r1, [r5, #16]
   2c74c:	add	r2, r1, #1
   2c750:	str	r2, [r5, #16]
   2c754:	cmp	r1, #0
   2c758:	ldrne	r1, [r4, #20]
   2c75c:	addne	r2, r1, #1
   2c760:	strne	r2, [r4, #20]
   2c764:	movne	r2, #44	; 0x2c
   2c768:	strbne	r2, [r1]
   2c76c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2c770:	mov	r5, r0
   2c774:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2c778:	mov	r6, r0
   2c77c:	mov	r0, r4
   2c780:	mov	r1, r7
   2c784:	mov	r2, r8
   2c788:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2c78c:	ldr	r0, [r4, #20]
   2c790:	ldr	r1, [r4, #32]
   2c794:	add	r1, r1, #1
   2c798:	str	r1, [r4, #32]
   2c79c:	add	r1, r0, #1
   2c7a0:	str	r1, [r4, #20]
   2c7a4:	mov	r1, #91	; 0x5b
   2c7a8:	strb	r1, [r0]
   2c7ac:	cmp	r6, #0
   2c7b0:	beq	2c888 <flatcc_json_printer_uint64_vector_field@@Base+0x16c>
   2c7b4:	add	r7, r5, #4
   2c7b8:	ldrb	r0, [r4, #25]
   2c7bc:	cmp	r0, #0
   2c7c0:	beq	2c7e4 <flatcc_json_printer_uint64_vector_field@@Base+0xc8>
   2c7c4:	ldr	r0, [r4, #20]
   2c7c8:	add	r1, r0, #1
   2c7cc:	str	r1, [r4, #20]
   2c7d0:	mov	r1, #10
   2c7d4:	strb	r1, [r0]
   2c7d8:	mov	r0, r4
   2c7dc:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c7e0:	b	2c7ec <flatcc_json_printer_uint64_vector_field@@Base+0xd0>
   2c7e4:	mov	r0, r4
   2c7e8:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c7ec:	mov	r0, r7
   2c7f0:	bl	2a9a4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2c7f4:	ldr	r2, [r4, #20]
   2c7f8:	bl	29b78 <flatcc_json_printer_uint64@@Base+0x30>
   2c7fc:	ldr	r1, [r4, #20]
   2c800:	add	r0, r1, r0
   2c804:	str	r0, [r4, #20]
   2c808:	cmp	r6, #1
   2c80c:	beq	2c888 <flatcc_json_printer_uint64_vector_field@@Base+0x16c>
   2c810:	rsb	r6, r6, #1
   2c814:	add	r5, r5, #12
   2c818:	mov	r7, #44	; 0x2c
   2c81c:	mov	r8, #10
   2c820:	ldr	r0, [r4, #20]
   2c824:	add	r1, r0, #1
   2c828:	str	r1, [r4, #20]
   2c82c:	strb	r7, [r0]
   2c830:	ldrb	r0, [r4, #25]
   2c834:	cmp	r0, #0
   2c838:	beq	2c858 <flatcc_json_printer_uint64_vector_field@@Base+0x13c>
   2c83c:	ldr	r0, [r4, #20]
   2c840:	add	r1, r0, #1
   2c844:	str	r1, [r4, #20]
   2c848:	strb	r8, [r0]
   2c84c:	mov	r0, r4
   2c850:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c854:	b	2c860 <flatcc_json_printer_uint64_vector_field@@Base+0x144>
   2c858:	mov	r0, r4
   2c85c:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c860:	mov	r0, r5
   2c864:	bl	2a9a4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2c868:	ldr	r2, [r4, #20]
   2c86c:	bl	29b78 <flatcc_json_printer_uint64@@Base+0x30>
   2c870:	ldr	r1, [r4, #20]
   2c874:	add	r0, r1, r0
   2c878:	str	r0, [r4, #20]
   2c87c:	adds	r6, r6, #1
   2c880:	add	r5, r5, #8
   2c884:	bne	2c820 <flatcc_json_printer_uint64_vector_field@@Base+0x104>
   2c888:	ldrb	r0, [r4, #25]
   2c88c:	cmp	r0, #0
   2c890:	beq	2c8bc <flatcc_json_printer_uint64_vector_field@@Base+0x1a0>
   2c894:	ldr	r0, [r4, #20]
   2c898:	add	r1, r0, #1
   2c89c:	str	r1, [r4, #20]
   2c8a0:	mov	r1, #10
   2c8a4:	strb	r1, [r0]
   2c8a8:	ldr	r0, [r4, #32]
   2c8ac:	sub	r0, r0, #1
   2c8b0:	str	r0, [r4, #32]
   2c8b4:	mov	r0, r4
   2c8b8:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c8bc:	ldr	r0, [r4, #20]
   2c8c0:	add	r1, r0, #1
   2c8c4:	str	r1, [r4, #20]
   2c8c8:	mov	r1, #93	; 0x5d
   2c8cc:	strb	r1, [r0]
   2c8d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002c8d4 <flatcc_json_printer_int8_vector_field@@Base>:
   2c8d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c8d8:	add	fp, sp, #24
   2c8dc:	mov	r7, r3
   2c8e0:	mov	r5, r1
   2c8e4:	mov	r4, r0
   2c8e8:	mov	r0, r1
   2c8ec:	mov	r1, r2
   2c8f0:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2c8f4:	cmp	r0, #0
   2c8f8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c8fc:	ldr	r8, [fp, #8]
   2c900:	ldr	r1, [r5, #16]
   2c904:	add	r2, r1, #1
   2c908:	str	r2, [r5, #16]
   2c90c:	cmp	r1, #0
   2c910:	ldrne	r1, [r4, #20]
   2c914:	addne	r2, r1, #1
   2c918:	strne	r2, [r4, #20]
   2c91c:	movne	r2, #44	; 0x2c
   2c920:	strbne	r2, [r1]
   2c924:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2c928:	mov	r5, r0
   2c92c:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2c930:	mov	r6, r0
   2c934:	mov	r0, r4
   2c938:	mov	r1, r7
   2c93c:	mov	r2, r8
   2c940:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2c944:	ldr	r0, [r4, #20]
   2c948:	ldr	r1, [r4, #32]
   2c94c:	add	r1, r1, #1
   2c950:	str	r1, [r4, #32]
   2c954:	add	r1, r0, #1
   2c958:	str	r1, [r4, #20]
   2c95c:	mov	r1, #91	; 0x5b
   2c960:	strb	r1, [r0]
   2c964:	cmp	r6, #0
   2c968:	beq	2ca40 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   2c96c:	add	r7, r5, #4
   2c970:	ldrb	r0, [r4, #25]
   2c974:	cmp	r0, #0
   2c978:	beq	2c99c <flatcc_json_printer_int8_vector_field@@Base+0xc8>
   2c97c:	ldr	r0, [r4, #20]
   2c980:	add	r1, r0, #1
   2c984:	str	r1, [r4, #20]
   2c988:	mov	r1, #10
   2c98c:	strb	r1, [r0]
   2c990:	mov	r0, r4
   2c994:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2c998:	b	2c9a4 <flatcc_json_printer_int8_vector_field@@Base+0xd0>
   2c99c:	mov	r0, r4
   2c9a0:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2c9a4:	mov	r0, r7
   2c9a8:	bl	2aa58 <flatcc_json_printer_int8_field@@Base+0xac>
   2c9ac:	ldr	r1, [r4, #20]
   2c9b0:	bl	2a0cc <flatcc_json_printer_int8@@Base+0x2c>
   2c9b4:	ldr	r1, [r4, #20]
   2c9b8:	add	r0, r1, r0
   2c9bc:	str	r0, [r4, #20]
   2c9c0:	cmp	r6, #1
   2c9c4:	beq	2ca40 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   2c9c8:	rsb	r6, r6, #1
   2c9cc:	add	r5, r5, #5
   2c9d0:	mov	r7, #44	; 0x2c
   2c9d4:	mov	r8, #10
   2c9d8:	ldr	r0, [r4, #20]
   2c9dc:	add	r1, r0, #1
   2c9e0:	str	r1, [r4, #20]
   2c9e4:	strb	r7, [r0]
   2c9e8:	ldrb	r0, [r4, #25]
   2c9ec:	cmp	r0, #0
   2c9f0:	beq	2ca10 <flatcc_json_printer_int8_vector_field@@Base+0x13c>
   2c9f4:	ldr	r0, [r4, #20]
   2c9f8:	add	r1, r0, #1
   2c9fc:	str	r1, [r4, #20]
   2ca00:	strb	r8, [r0]
   2ca04:	mov	r0, r4
   2ca08:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2ca0c:	b	2ca18 <flatcc_json_printer_int8_vector_field@@Base+0x144>
   2ca10:	mov	r0, r4
   2ca14:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2ca18:	mov	r0, r5
   2ca1c:	bl	2aa58 <flatcc_json_printer_int8_field@@Base+0xac>
   2ca20:	ldr	r1, [r4, #20]
   2ca24:	bl	2a0cc <flatcc_json_printer_int8@@Base+0x2c>
   2ca28:	ldr	r1, [r4, #20]
   2ca2c:	add	r0, r1, r0
   2ca30:	str	r0, [r4, #20]
   2ca34:	adds	r6, r6, #1
   2ca38:	add	r5, r5, #1
   2ca3c:	bne	2c9d8 <flatcc_json_printer_int8_vector_field@@Base+0x104>
   2ca40:	ldrb	r0, [r4, #25]
   2ca44:	cmp	r0, #0
   2ca48:	beq	2ca74 <flatcc_json_printer_int8_vector_field@@Base+0x1a0>
   2ca4c:	ldr	r0, [r4, #20]
   2ca50:	add	r1, r0, #1
   2ca54:	str	r1, [r4, #20]
   2ca58:	mov	r1, #10
   2ca5c:	strb	r1, [r0]
   2ca60:	ldr	r0, [r4, #32]
   2ca64:	sub	r0, r0, #1
   2ca68:	str	r0, [r4, #32]
   2ca6c:	mov	r0, r4
   2ca70:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2ca74:	ldr	r0, [r4, #20]
   2ca78:	add	r1, r0, #1
   2ca7c:	str	r1, [r4, #20]
   2ca80:	mov	r1, #93	; 0x5d
   2ca84:	strb	r1, [r0]
   2ca88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002ca8c <flatcc_json_printer_int16_vector_field@@Base>:
   2ca8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ca90:	add	fp, sp, #24
   2ca94:	mov	r7, r3
   2ca98:	mov	r5, r1
   2ca9c:	mov	r4, r0
   2caa0:	mov	r0, r1
   2caa4:	mov	r1, r2
   2caa8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2caac:	cmp	r0, #0
   2cab0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cab4:	ldr	r8, [fp, #8]
   2cab8:	ldr	r1, [r5, #16]
   2cabc:	add	r2, r1, #1
   2cac0:	str	r2, [r5, #16]
   2cac4:	cmp	r1, #0
   2cac8:	ldrne	r1, [r4, #20]
   2cacc:	addne	r2, r1, #1
   2cad0:	strne	r2, [r4, #20]
   2cad4:	movne	r2, #44	; 0x2c
   2cad8:	strbne	r2, [r1]
   2cadc:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2cae0:	mov	r5, r0
   2cae4:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2cae8:	mov	r6, r0
   2caec:	mov	r0, r4
   2caf0:	mov	r1, r7
   2caf4:	mov	r2, r8
   2caf8:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2cafc:	ldr	r0, [r4, #20]
   2cb00:	ldr	r1, [r4, #32]
   2cb04:	add	r1, r1, #1
   2cb08:	str	r1, [r4, #32]
   2cb0c:	add	r1, r0, #1
   2cb10:	str	r1, [r4, #20]
   2cb14:	mov	r1, #91	; 0x5b
   2cb18:	strb	r1, [r0]
   2cb1c:	cmp	r6, #0
   2cb20:	beq	2cbf8 <flatcc_json_printer_int16_vector_field@@Base+0x16c>
   2cb24:	add	r7, r5, #4
   2cb28:	ldrb	r0, [r4, #25]
   2cb2c:	cmp	r0, #0
   2cb30:	beq	2cb54 <flatcc_json_printer_int16_vector_field@@Base+0xc8>
   2cb34:	ldr	r0, [r4, #20]
   2cb38:	add	r1, r0, #1
   2cb3c:	str	r1, [r4, #20]
   2cb40:	mov	r1, #10
   2cb44:	strb	r1, [r0]
   2cb48:	mov	r0, r4
   2cb4c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cb50:	b	2cb5c <flatcc_json_printer_int16_vector_field@@Base+0xd0>
   2cb54:	mov	r0, r4
   2cb58:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2cb5c:	mov	r0, r7
   2cb60:	bl	2ab0c <flatcc_json_printer_int16_field@@Base+0xac>
   2cb64:	ldr	r1, [r4, #20]
   2cb68:	bl	2a124 <flatcc_json_printer_int16@@Base+0x2c>
   2cb6c:	ldr	r1, [r4, #20]
   2cb70:	add	r0, r1, r0
   2cb74:	str	r0, [r4, #20]
   2cb78:	cmp	r6, #1
   2cb7c:	beq	2cbf8 <flatcc_json_printer_int16_vector_field@@Base+0x16c>
   2cb80:	rsb	r6, r6, #1
   2cb84:	add	r5, r5, #6
   2cb88:	mov	r7, #44	; 0x2c
   2cb8c:	mov	r8, #10
   2cb90:	ldr	r0, [r4, #20]
   2cb94:	add	r1, r0, #1
   2cb98:	str	r1, [r4, #20]
   2cb9c:	strb	r7, [r0]
   2cba0:	ldrb	r0, [r4, #25]
   2cba4:	cmp	r0, #0
   2cba8:	beq	2cbc8 <flatcc_json_printer_int16_vector_field@@Base+0x13c>
   2cbac:	ldr	r0, [r4, #20]
   2cbb0:	add	r1, r0, #1
   2cbb4:	str	r1, [r4, #20]
   2cbb8:	strb	r8, [r0]
   2cbbc:	mov	r0, r4
   2cbc0:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cbc4:	b	2cbd0 <flatcc_json_printer_int16_vector_field@@Base+0x144>
   2cbc8:	mov	r0, r4
   2cbcc:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2cbd0:	mov	r0, r5
   2cbd4:	bl	2ab0c <flatcc_json_printer_int16_field@@Base+0xac>
   2cbd8:	ldr	r1, [r4, #20]
   2cbdc:	bl	2a124 <flatcc_json_printer_int16@@Base+0x2c>
   2cbe0:	ldr	r1, [r4, #20]
   2cbe4:	add	r0, r1, r0
   2cbe8:	str	r0, [r4, #20]
   2cbec:	adds	r6, r6, #1
   2cbf0:	add	r5, r5, #2
   2cbf4:	bne	2cb90 <flatcc_json_printer_int16_vector_field@@Base+0x104>
   2cbf8:	ldrb	r0, [r4, #25]
   2cbfc:	cmp	r0, #0
   2cc00:	beq	2cc2c <flatcc_json_printer_int16_vector_field@@Base+0x1a0>
   2cc04:	ldr	r0, [r4, #20]
   2cc08:	add	r1, r0, #1
   2cc0c:	str	r1, [r4, #20]
   2cc10:	mov	r1, #10
   2cc14:	strb	r1, [r0]
   2cc18:	ldr	r0, [r4, #32]
   2cc1c:	sub	r0, r0, #1
   2cc20:	str	r0, [r4, #32]
   2cc24:	mov	r0, r4
   2cc28:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cc2c:	ldr	r0, [r4, #20]
   2cc30:	add	r1, r0, #1
   2cc34:	str	r1, [r4, #20]
   2cc38:	mov	r1, #93	; 0x5d
   2cc3c:	strb	r1, [r0]
   2cc40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002cc44 <flatcc_json_printer_int32_vector_field@@Base>:
   2cc44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cc48:	add	fp, sp, #24
   2cc4c:	mov	r7, r3
   2cc50:	mov	r5, r1
   2cc54:	mov	r4, r0
   2cc58:	mov	r0, r1
   2cc5c:	mov	r1, r2
   2cc60:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2cc64:	cmp	r0, #0
   2cc68:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cc6c:	ldr	r8, [fp, #8]
   2cc70:	ldr	r1, [r5, #16]
   2cc74:	add	r2, r1, #1
   2cc78:	str	r2, [r5, #16]
   2cc7c:	cmp	r1, #0
   2cc80:	ldrne	r1, [r4, #20]
   2cc84:	addne	r2, r1, #1
   2cc88:	strne	r2, [r4, #20]
   2cc8c:	movne	r2, #44	; 0x2c
   2cc90:	strbne	r2, [r1]
   2cc94:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2cc98:	mov	r5, r0
   2cc9c:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2cca0:	mov	r6, r0
   2cca4:	mov	r0, r4
   2cca8:	mov	r1, r7
   2ccac:	mov	r2, r8
   2ccb0:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2ccb4:	ldr	r0, [r4, #20]
   2ccb8:	ldr	r1, [r4, #32]
   2ccbc:	add	r1, r1, #1
   2ccc0:	str	r1, [r4, #32]
   2ccc4:	add	r1, r0, #1
   2ccc8:	str	r1, [r4, #20]
   2cccc:	mov	r1, #91	; 0x5b
   2ccd0:	strb	r1, [r0]
   2ccd4:	cmp	r6, #0
   2ccd8:	beq	2cdb0 <flatcc_json_printer_int32_vector_field@@Base+0x16c>
   2ccdc:	add	r7, r5, #4
   2cce0:	ldrb	r0, [r4, #25]
   2cce4:	cmp	r0, #0
   2cce8:	beq	2cd0c <flatcc_json_printer_int32_vector_field@@Base+0xc8>
   2ccec:	ldr	r0, [r4, #20]
   2ccf0:	add	r1, r0, #1
   2ccf4:	str	r1, [r4, #20]
   2ccf8:	mov	r1, #10
   2ccfc:	strb	r1, [r0]
   2cd00:	mov	r0, r4
   2cd04:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cd08:	b	2cd14 <flatcc_json_printer_int32_vector_field@@Base+0xd0>
   2cd0c:	mov	r0, r4
   2cd10:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2cd14:	mov	r0, r7
   2cd18:	bl	2abc0 <flatcc_json_printer_int32_field@@Base+0xac>
   2cd1c:	ldr	r1, [r4, #20]
   2cd20:	bl	2a17c <flatcc_json_printer_int32@@Base+0x2c>
   2cd24:	ldr	r1, [r4, #20]
   2cd28:	add	r0, r1, r0
   2cd2c:	str	r0, [r4, #20]
   2cd30:	cmp	r6, #1
   2cd34:	beq	2cdb0 <flatcc_json_printer_int32_vector_field@@Base+0x16c>
   2cd38:	rsb	r6, r6, #1
   2cd3c:	add	r5, r5, #8
   2cd40:	mov	r7, #44	; 0x2c
   2cd44:	mov	r8, #10
   2cd48:	ldr	r0, [r4, #20]
   2cd4c:	add	r1, r0, #1
   2cd50:	str	r1, [r4, #20]
   2cd54:	strb	r7, [r0]
   2cd58:	ldrb	r0, [r4, #25]
   2cd5c:	cmp	r0, #0
   2cd60:	beq	2cd80 <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   2cd64:	ldr	r0, [r4, #20]
   2cd68:	add	r1, r0, #1
   2cd6c:	str	r1, [r4, #20]
   2cd70:	strb	r8, [r0]
   2cd74:	mov	r0, r4
   2cd78:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cd7c:	b	2cd88 <flatcc_json_printer_int32_vector_field@@Base+0x144>
   2cd80:	mov	r0, r4
   2cd84:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2cd88:	mov	r0, r5
   2cd8c:	bl	2abc0 <flatcc_json_printer_int32_field@@Base+0xac>
   2cd90:	ldr	r1, [r4, #20]
   2cd94:	bl	2a17c <flatcc_json_printer_int32@@Base+0x2c>
   2cd98:	ldr	r1, [r4, #20]
   2cd9c:	add	r0, r1, r0
   2cda0:	str	r0, [r4, #20]
   2cda4:	adds	r6, r6, #1
   2cda8:	add	r5, r5, #4
   2cdac:	bne	2cd48 <flatcc_json_printer_int32_vector_field@@Base+0x104>
   2cdb0:	ldrb	r0, [r4, #25]
   2cdb4:	cmp	r0, #0
   2cdb8:	beq	2cde4 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
   2cdbc:	ldr	r0, [r4, #20]
   2cdc0:	add	r1, r0, #1
   2cdc4:	str	r1, [r4, #20]
   2cdc8:	mov	r1, #10
   2cdcc:	strb	r1, [r0]
   2cdd0:	ldr	r0, [r4, #32]
   2cdd4:	sub	r0, r0, #1
   2cdd8:	str	r0, [r4, #32]
   2cddc:	mov	r0, r4
   2cde0:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cde4:	ldr	r0, [r4, #20]
   2cde8:	add	r1, r0, #1
   2cdec:	str	r1, [r4, #20]
   2cdf0:	mov	r1, #93	; 0x5d
   2cdf4:	strb	r1, [r0]
   2cdf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002cdfc <flatcc_json_printer_int64_vector_field@@Base>:
   2cdfc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ce00:	add	fp, sp, #24
   2ce04:	mov	r7, r3
   2ce08:	mov	r5, r1
   2ce0c:	mov	r4, r0
   2ce10:	mov	r0, r1
   2ce14:	mov	r1, r2
   2ce18:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2ce1c:	cmp	r0, #0
   2ce20:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ce24:	ldr	r8, [fp, #8]
   2ce28:	ldr	r1, [r5, #16]
   2ce2c:	add	r2, r1, #1
   2ce30:	str	r2, [r5, #16]
   2ce34:	cmp	r1, #0
   2ce38:	ldrne	r1, [r4, #20]
   2ce3c:	addne	r2, r1, #1
   2ce40:	strne	r2, [r4, #20]
   2ce44:	movne	r2, #44	; 0x2c
   2ce48:	strbne	r2, [r1]
   2ce4c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2ce50:	mov	r5, r0
   2ce54:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2ce58:	mov	r6, r0
   2ce5c:	mov	r0, r4
   2ce60:	mov	r1, r7
   2ce64:	mov	r2, r8
   2ce68:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2ce6c:	ldr	r0, [r4, #20]
   2ce70:	ldr	r1, [r4, #32]
   2ce74:	add	r1, r1, #1
   2ce78:	str	r1, [r4, #32]
   2ce7c:	add	r1, r0, #1
   2ce80:	str	r1, [r4, #20]
   2ce84:	mov	r1, #91	; 0x5b
   2ce88:	strb	r1, [r0]
   2ce8c:	cmp	r6, #0
   2ce90:	beq	2cf68 <flatcc_json_printer_int64_vector_field@@Base+0x16c>
   2ce94:	add	r7, r5, #4
   2ce98:	ldrb	r0, [r4, #25]
   2ce9c:	cmp	r0, #0
   2cea0:	beq	2cec4 <flatcc_json_printer_int64_vector_field@@Base+0xc8>
   2cea4:	ldr	r0, [r4, #20]
   2cea8:	add	r1, r0, #1
   2ceac:	str	r1, [r4, #20]
   2ceb0:	mov	r1, #10
   2ceb4:	strb	r1, [r0]
   2ceb8:	mov	r0, r4
   2cebc:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cec0:	b	2cecc <flatcc_json_printer_int64_vector_field@@Base+0xd0>
   2cec4:	mov	r0, r4
   2cec8:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2cecc:	mov	r0, r7
   2ced0:	bl	2ac94 <flatcc_json_printer_int64_field@@Base+0xcc>
   2ced4:	ldr	r2, [r4, #20]
   2ced8:	bl	2a1d4 <flatcc_json_printer_int64@@Base+0x30>
   2cedc:	ldr	r1, [r4, #20]
   2cee0:	add	r0, r1, r0
   2cee4:	str	r0, [r4, #20]
   2cee8:	cmp	r6, #1
   2ceec:	beq	2cf68 <flatcc_json_printer_int64_vector_field@@Base+0x16c>
   2cef0:	rsb	r6, r6, #1
   2cef4:	add	r5, r5, #12
   2cef8:	mov	r7, #44	; 0x2c
   2cefc:	mov	r8, #10
   2cf00:	ldr	r0, [r4, #20]
   2cf04:	add	r1, r0, #1
   2cf08:	str	r1, [r4, #20]
   2cf0c:	strb	r7, [r0]
   2cf10:	ldrb	r0, [r4, #25]
   2cf14:	cmp	r0, #0
   2cf18:	beq	2cf38 <flatcc_json_printer_int64_vector_field@@Base+0x13c>
   2cf1c:	ldr	r0, [r4, #20]
   2cf20:	add	r1, r0, #1
   2cf24:	str	r1, [r4, #20]
   2cf28:	strb	r8, [r0]
   2cf2c:	mov	r0, r4
   2cf30:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cf34:	b	2cf40 <flatcc_json_printer_int64_vector_field@@Base+0x144>
   2cf38:	mov	r0, r4
   2cf3c:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2cf40:	mov	r0, r5
   2cf44:	bl	2ac94 <flatcc_json_printer_int64_field@@Base+0xcc>
   2cf48:	ldr	r2, [r4, #20]
   2cf4c:	bl	2a1d4 <flatcc_json_printer_int64@@Base+0x30>
   2cf50:	ldr	r1, [r4, #20]
   2cf54:	add	r0, r1, r0
   2cf58:	str	r0, [r4, #20]
   2cf5c:	adds	r6, r6, #1
   2cf60:	add	r5, r5, #8
   2cf64:	bne	2cf00 <flatcc_json_printer_int64_vector_field@@Base+0x104>
   2cf68:	ldrb	r0, [r4, #25]
   2cf6c:	cmp	r0, #0
   2cf70:	beq	2cf9c <flatcc_json_printer_int64_vector_field@@Base+0x1a0>
   2cf74:	ldr	r0, [r4, #20]
   2cf78:	add	r1, r0, #1
   2cf7c:	str	r1, [r4, #20]
   2cf80:	mov	r1, #10
   2cf84:	strb	r1, [r0]
   2cf88:	ldr	r0, [r4, #32]
   2cf8c:	sub	r0, r0, #1
   2cf90:	str	r0, [r4, #32]
   2cf94:	mov	r0, r4
   2cf98:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2cf9c:	ldr	r0, [r4, #20]
   2cfa0:	add	r1, r0, #1
   2cfa4:	str	r1, [r4, #20]
   2cfa8:	mov	r1, #93	; 0x5d
   2cfac:	strb	r1, [r0]
   2cfb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002cfb4 <flatcc_json_printer_bool_vector_field@@Base>:
   2cfb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cfb8:	add	fp, sp, #24
   2cfbc:	mov	r7, r3
   2cfc0:	mov	r5, r1
   2cfc4:	mov	r4, r0
   2cfc8:	mov	r0, r1
   2cfcc:	mov	r1, r2
   2cfd0:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2cfd4:	cmp	r0, #0
   2cfd8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cfdc:	ldr	r8, [fp, #8]
   2cfe0:	ldr	r1, [r5, #16]
   2cfe4:	add	r2, r1, #1
   2cfe8:	str	r2, [r5, #16]
   2cfec:	cmp	r1, #0
   2cff0:	ldrne	r1, [r4, #20]
   2cff4:	addne	r2, r1, #1
   2cff8:	strne	r2, [r4, #20]
   2cffc:	movne	r2, #44	; 0x2c
   2d000:	strbne	r2, [r1]
   2d004:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2d008:	mov	r5, r0
   2d00c:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d010:	mov	r6, r0
   2d014:	mov	r0, r4
   2d018:	mov	r1, r7
   2d01c:	mov	r2, r8
   2d020:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2d024:	ldr	r0, [r4, #20]
   2d028:	ldr	r1, [r4, #32]
   2d02c:	add	r1, r1, #1
   2d030:	str	r1, [r4, #32]
   2d034:	add	r1, r0, #1
   2d038:	str	r1, [r4, #20]
   2d03c:	mov	r1, #91	; 0x5b
   2d040:	strb	r1, [r0]
   2d044:	cmp	r6, #0
   2d048:	beq	2d120 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   2d04c:	add	r7, r5, #4
   2d050:	ldrb	r0, [r4, #25]
   2d054:	cmp	r0, #0
   2d058:	beq	2d07c <flatcc_json_printer_bool_vector_field@@Base+0xc8>
   2d05c:	ldr	r0, [r4, #20]
   2d060:	add	r1, r0, #1
   2d064:	str	r1, [r4, #20]
   2d068:	mov	r1, #10
   2d06c:	strb	r1, [r0]
   2d070:	mov	r0, r4
   2d074:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d078:	b	2d084 <flatcc_json_printer_bool_vector_field@@Base+0xd0>
   2d07c:	mov	r0, r4
   2d080:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d084:	mov	r0, r7
   2d088:	bl	2ad48 <flatcc_json_printer_bool_field@@Base+0xac>
   2d08c:	ldr	r1, [r4, #20]
   2d090:	bl	2ad50 <flatcc_json_printer_bool_field@@Base+0xb4>
   2d094:	ldr	r1, [r4, #20]
   2d098:	add	r0, r1, r0
   2d09c:	str	r0, [r4, #20]
   2d0a0:	cmp	r6, #1
   2d0a4:	beq	2d120 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   2d0a8:	rsb	r6, r6, #1
   2d0ac:	add	r5, r5, #5
   2d0b0:	mov	r7, #44	; 0x2c
   2d0b4:	mov	r8, #10
   2d0b8:	ldr	r0, [r4, #20]
   2d0bc:	add	r1, r0, #1
   2d0c0:	str	r1, [r4, #20]
   2d0c4:	strb	r7, [r0]
   2d0c8:	ldrb	r0, [r4, #25]
   2d0cc:	cmp	r0, #0
   2d0d0:	beq	2d0f0 <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   2d0d4:	ldr	r0, [r4, #20]
   2d0d8:	add	r1, r0, #1
   2d0dc:	str	r1, [r4, #20]
   2d0e0:	strb	r8, [r0]
   2d0e4:	mov	r0, r4
   2d0e8:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d0ec:	b	2d0f8 <flatcc_json_printer_bool_vector_field@@Base+0x144>
   2d0f0:	mov	r0, r4
   2d0f4:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d0f8:	mov	r0, r5
   2d0fc:	bl	2ad48 <flatcc_json_printer_bool_field@@Base+0xac>
   2d100:	ldr	r1, [r4, #20]
   2d104:	bl	2ad50 <flatcc_json_printer_bool_field@@Base+0xb4>
   2d108:	ldr	r1, [r4, #20]
   2d10c:	add	r0, r1, r0
   2d110:	str	r0, [r4, #20]
   2d114:	adds	r6, r6, #1
   2d118:	add	r5, r5, #1
   2d11c:	bne	2d0b8 <flatcc_json_printer_bool_vector_field@@Base+0x104>
   2d120:	ldrb	r0, [r4, #25]
   2d124:	cmp	r0, #0
   2d128:	beq	2d154 <flatcc_json_printer_bool_vector_field@@Base+0x1a0>
   2d12c:	ldr	r0, [r4, #20]
   2d130:	add	r1, r0, #1
   2d134:	str	r1, [r4, #20]
   2d138:	mov	r1, #10
   2d13c:	strb	r1, [r0]
   2d140:	ldr	r0, [r4, #32]
   2d144:	sub	r0, r0, #1
   2d148:	str	r0, [r4, #32]
   2d14c:	mov	r0, r4
   2d150:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d154:	ldr	r0, [r4, #20]
   2d158:	add	r1, r0, #1
   2d15c:	str	r1, [r4, #20]
   2d160:	mov	r1, #93	; 0x5d
   2d164:	strb	r1, [r0]
   2d168:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d16c <flatcc_json_printer_float_vector_field@@Base>:
   2d16c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d170:	add	fp, sp, #24
   2d174:	mov	r7, r3
   2d178:	mov	r5, r1
   2d17c:	mov	r4, r0
   2d180:	mov	r0, r1
   2d184:	mov	r1, r2
   2d188:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2d18c:	cmp	r0, #0
   2d190:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d194:	ldr	r8, [fp, #8]
   2d198:	ldr	r1, [r5, #16]
   2d19c:	add	r2, r1, #1
   2d1a0:	str	r2, [r5, #16]
   2d1a4:	cmp	r1, #0
   2d1a8:	ldrne	r1, [r4, #20]
   2d1ac:	addne	r2, r1, #1
   2d1b0:	strne	r2, [r4, #20]
   2d1b4:	movne	r2, #44	; 0x2c
   2d1b8:	strbne	r2, [r1]
   2d1bc:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2d1c0:	mov	r5, r0
   2d1c4:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d1c8:	mov	r6, r0
   2d1cc:	mov	r0, r4
   2d1d0:	mov	r1, r7
   2d1d4:	mov	r2, r8
   2d1d8:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2d1dc:	ldr	r0, [r4, #20]
   2d1e0:	ldr	r1, [r4, #32]
   2d1e4:	add	r1, r1, #1
   2d1e8:	str	r1, [r4, #32]
   2d1ec:	add	r1, r0, #1
   2d1f0:	str	r1, [r4, #20]
   2d1f4:	mov	r1, #91	; 0x5b
   2d1f8:	strb	r1, [r0]
   2d1fc:	cmp	r6, #0
   2d200:	beq	2d2e0 <flatcc_json_printer_float_vector_field@@Base+0x174>
   2d204:	add	r7, r5, #4
   2d208:	ldrb	r0, [r4, #25]
   2d20c:	cmp	r0, #0
   2d210:	beq	2d234 <flatcc_json_printer_float_vector_field@@Base+0xc8>
   2d214:	ldr	r0, [r4, #20]
   2d218:	add	r1, r0, #1
   2d21c:	str	r1, [r4, #20]
   2d220:	mov	r1, #10
   2d224:	strb	r1, [r0]
   2d228:	mov	r0, r4
   2d22c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d230:	b	2d23c <flatcc_json_printer_float_vector_field@@Base+0xd0>
   2d234:	mov	r0, r4
   2d238:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d23c:	mov	r0, r7
   2d240:	bl	2ae48 <flatcc_json_printer_float_field@@Base+0xb8>
   2d244:	ldr	r0, [r4, #20]
   2d248:	vcvt.f64.f32	d0, s0
   2d24c:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2d250:	ldr	r1, [r4, #20]
   2d254:	add	r0, r1, r0
   2d258:	str	r0, [r4, #20]
   2d25c:	cmp	r6, #1
   2d260:	beq	2d2e0 <flatcc_json_printer_float_vector_field@@Base+0x174>
   2d264:	rsb	r6, r6, #1
   2d268:	add	r5, r5, #8
   2d26c:	mov	r7, #44	; 0x2c
   2d270:	mov	r8, #10
   2d274:	ldr	r0, [r4, #20]
   2d278:	add	r1, r0, #1
   2d27c:	str	r1, [r4, #20]
   2d280:	strb	r7, [r0]
   2d284:	ldrb	r0, [r4, #25]
   2d288:	cmp	r0, #0
   2d28c:	beq	2d2ac <flatcc_json_printer_float_vector_field@@Base+0x140>
   2d290:	ldr	r0, [r4, #20]
   2d294:	add	r1, r0, #1
   2d298:	str	r1, [r4, #20]
   2d29c:	strb	r8, [r0]
   2d2a0:	mov	r0, r4
   2d2a4:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d2a8:	b	2d2b4 <flatcc_json_printer_float_vector_field@@Base+0x148>
   2d2ac:	mov	r0, r4
   2d2b0:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d2b4:	mov	r0, r5
   2d2b8:	bl	2ae48 <flatcc_json_printer_float_field@@Base+0xb8>
   2d2bc:	ldr	r0, [r4, #20]
   2d2c0:	vcvt.f64.f32	d0, s0
   2d2c4:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2d2c8:	ldr	r1, [r4, #20]
   2d2cc:	add	r0, r1, r0
   2d2d0:	str	r0, [r4, #20]
   2d2d4:	adds	r6, r6, #1
   2d2d8:	add	r5, r5, #4
   2d2dc:	bne	2d274 <flatcc_json_printer_float_vector_field@@Base+0x108>
   2d2e0:	ldrb	r0, [r4, #25]
   2d2e4:	cmp	r0, #0
   2d2e8:	beq	2d314 <flatcc_json_printer_float_vector_field@@Base+0x1a8>
   2d2ec:	ldr	r0, [r4, #20]
   2d2f0:	add	r1, r0, #1
   2d2f4:	str	r1, [r4, #20]
   2d2f8:	mov	r1, #10
   2d2fc:	strb	r1, [r0]
   2d300:	ldr	r0, [r4, #32]
   2d304:	sub	r0, r0, #1
   2d308:	str	r0, [r4, #32]
   2d30c:	mov	r0, r4
   2d310:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d314:	ldr	r0, [r4, #20]
   2d318:	add	r1, r0, #1
   2d31c:	str	r1, [r4, #20]
   2d320:	mov	r1, #93	; 0x5d
   2d324:	strb	r1, [r0]
   2d328:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d32c <flatcc_json_printer_double_vector_field@@Base>:
   2d32c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d330:	add	fp, sp, #24
   2d334:	mov	r7, r3
   2d338:	mov	r5, r1
   2d33c:	mov	r4, r0
   2d340:	mov	r0, r1
   2d344:	mov	r1, r2
   2d348:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2d34c:	cmp	r0, #0
   2d350:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d354:	ldr	r8, [fp, #8]
   2d358:	ldr	r1, [r5, #16]
   2d35c:	add	r2, r1, #1
   2d360:	str	r2, [r5, #16]
   2d364:	cmp	r1, #0
   2d368:	ldrne	r1, [r4, #20]
   2d36c:	addne	r2, r1, #1
   2d370:	strne	r2, [r4, #20]
   2d374:	movne	r2, #44	; 0x2c
   2d378:	strbne	r2, [r1]
   2d37c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2d380:	mov	r5, r0
   2d384:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d388:	mov	r6, r0
   2d38c:	mov	r0, r4
   2d390:	mov	r1, r7
   2d394:	mov	r2, r8
   2d398:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2d39c:	ldr	r0, [r4, #20]
   2d3a0:	ldr	r1, [r4, #32]
   2d3a4:	add	r1, r1, #1
   2d3a8:	str	r1, [r4, #32]
   2d3ac:	add	r1, r0, #1
   2d3b0:	str	r1, [r4, #20]
   2d3b4:	mov	r1, #91	; 0x5b
   2d3b8:	strb	r1, [r0]
   2d3bc:	cmp	r6, #0
   2d3c0:	beq	2d498 <flatcc_json_printer_double_vector_field@@Base+0x16c>
   2d3c4:	add	r7, r5, #4
   2d3c8:	ldrb	r0, [r4, #25]
   2d3cc:	cmp	r0, #0
   2d3d0:	beq	2d3f4 <flatcc_json_printer_double_vector_field@@Base+0xc8>
   2d3d4:	ldr	r0, [r4, #20]
   2d3d8:	add	r1, r0, #1
   2d3dc:	str	r1, [r4, #20]
   2d3e0:	mov	r1, #10
   2d3e4:	strb	r1, [r0]
   2d3e8:	mov	r0, r4
   2d3ec:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d3f0:	b	2d3fc <flatcc_json_printer_double_vector_field@@Base+0xd0>
   2d3f4:	mov	r0, r4
   2d3f8:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d3fc:	mov	r0, r7
   2d400:	bl	2af08 <flatcc_json_printer_double_field@@Base+0xb8>
   2d404:	ldr	r0, [r4, #20]
   2d408:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2d40c:	ldr	r1, [r4, #20]
   2d410:	add	r0, r1, r0
   2d414:	str	r0, [r4, #20]
   2d418:	cmp	r6, #1
   2d41c:	beq	2d498 <flatcc_json_printer_double_vector_field@@Base+0x16c>
   2d420:	rsb	r6, r6, #1
   2d424:	add	r5, r5, #12
   2d428:	mov	r7, #44	; 0x2c
   2d42c:	mov	r8, #10
   2d430:	ldr	r0, [r4, #20]
   2d434:	add	r1, r0, #1
   2d438:	str	r1, [r4, #20]
   2d43c:	strb	r7, [r0]
   2d440:	ldrb	r0, [r4, #25]
   2d444:	cmp	r0, #0
   2d448:	beq	2d468 <flatcc_json_printer_double_vector_field@@Base+0x13c>
   2d44c:	ldr	r0, [r4, #20]
   2d450:	add	r1, r0, #1
   2d454:	str	r1, [r4, #20]
   2d458:	strb	r8, [r0]
   2d45c:	mov	r0, r4
   2d460:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d464:	b	2d470 <flatcc_json_printer_double_vector_field@@Base+0x144>
   2d468:	mov	r0, r4
   2d46c:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d470:	mov	r0, r5
   2d474:	bl	2af08 <flatcc_json_printer_double_field@@Base+0xb8>
   2d478:	ldr	r0, [r4, #20]
   2d47c:	bl	28f78 <flatcc_json_printer_fmt_float@@Base+0x8>
   2d480:	ldr	r1, [r4, #20]
   2d484:	add	r0, r1, r0
   2d488:	str	r0, [r4, #20]
   2d48c:	adds	r6, r6, #1
   2d490:	add	r5, r5, #8
   2d494:	bne	2d430 <flatcc_json_printer_double_vector_field@@Base+0x104>
   2d498:	ldrb	r0, [r4, #25]
   2d49c:	cmp	r0, #0
   2d4a0:	beq	2d4cc <flatcc_json_printer_double_vector_field@@Base+0x1a0>
   2d4a4:	ldr	r0, [r4, #20]
   2d4a8:	add	r1, r0, #1
   2d4ac:	str	r1, [r4, #20]
   2d4b0:	mov	r1, #10
   2d4b4:	strb	r1, [r0]
   2d4b8:	ldr	r0, [r4, #32]
   2d4bc:	sub	r0, r0, #1
   2d4c0:	str	r0, [r4, #32]
   2d4c4:	mov	r0, r4
   2d4c8:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d4cc:	ldr	r0, [r4, #20]
   2d4d0:	add	r1, r0, #1
   2d4d4:	str	r1, [r4, #20]
   2d4d8:	mov	r1, #93	; 0x5d
   2d4dc:	strb	r1, [r0]
   2d4e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d4e4 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   2d4e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d4e8:	add	fp, sp, #24
   2d4ec:	mov	r7, r3
   2d4f0:	mov	r6, r1
   2d4f4:	mov	r4, r0
   2d4f8:	ldrb	r0, [r0, #27]
   2d4fc:	cmp	r0, #0
   2d500:	beq	2d518 <flatcc_json_printer_utype_enum_vector_field@@Base+0x34>
   2d504:	mov	r0, r4
   2d508:	mov	r1, r6
   2d50c:	mov	r3, r7
   2d510:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d514:	b	2c02c <flatcc_json_printer_utype_vector_field@@Base>
   2d518:	ldr	r9, [fp, #12]
   2d51c:	ldr	r5, [fp, #8]
   2d520:	mov	r0, r6
   2d524:	mov	r1, r2
   2d528:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2d52c:	cmp	r0, #0
   2d530:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d534:	ldr	r1, [r6, #16]
   2d538:	add	r2, r1, #1
   2d53c:	str	r2, [r6, #16]
   2d540:	cmp	r1, #0
   2d544:	ldrne	r1, [r4, #20]
   2d548:	addne	r2, r1, #1
   2d54c:	strne	r2, [r4, #20]
   2d550:	movne	r2, #44	; 0x2c
   2d554:	strbne	r2, [r1]
   2d558:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2d55c:	mov	r8, r0
   2d560:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d564:	mov	r6, r0
   2d568:	mov	r0, r4
   2d56c:	mov	r1, r7
   2d570:	mov	r2, r5
   2d574:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2d578:	ldr	r0, [r4, #20]
   2d57c:	ldr	r1, [r4, #32]
   2d580:	add	r1, r1, #1
   2d584:	str	r1, [r4, #32]
   2d588:	add	r1, r0, #1
   2d58c:	str	r1, [r4, #20]
   2d590:	mov	r1, #91	; 0x5b
   2d594:	strb	r1, [r0]
   2d598:	cmp	r6, #0
   2d59c:	beq	2d664 <flatcc_json_printer_utype_enum_vector_field@@Base+0x180>
   2d5a0:	add	r5, r8, #4
   2d5a4:	ldrb	r0, [r4, #25]
   2d5a8:	cmp	r0, #0
   2d5ac:	beq	2d5d0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xec>
   2d5b0:	ldr	r0, [r4, #20]
   2d5b4:	add	r1, r0, #1
   2d5b8:	str	r1, [r4, #20]
   2d5bc:	mov	r1, #10
   2d5c0:	strb	r1, [r0]
   2d5c4:	mov	r0, r4
   2d5c8:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d5cc:	b	2d5d8 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf4>
   2d5d0:	mov	r0, r4
   2d5d4:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d5d8:	mov	r0, r5
   2d5dc:	bl	2c1ec <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d5e0:	mov	r1, r0
   2d5e4:	mov	r0, r4
   2d5e8:	blx	r9
   2d5ec:	cmp	r6, #1
   2d5f0:	beq	2d664 <flatcc_json_printer_utype_enum_vector_field@@Base+0x180>
   2d5f4:	rsb	r6, r6, #1
   2d5f8:	add	r5, r8, #5
   2d5fc:	mov	r7, #44	; 0x2c
   2d600:	mov	r8, #10
   2d604:	ldr	r0, [r4, #20]
   2d608:	add	r1, r0, #1
   2d60c:	str	r1, [r4, #20]
   2d610:	strb	r7, [r0]
   2d614:	ldrb	r0, [r4, #25]
   2d618:	cmp	r0, #0
   2d61c:	beq	2d63c <flatcc_json_printer_utype_enum_vector_field@@Base+0x158>
   2d620:	ldr	r0, [r4, #20]
   2d624:	add	r1, r0, #1
   2d628:	str	r1, [r4, #20]
   2d62c:	strb	r8, [r0]
   2d630:	mov	r0, r4
   2d634:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d638:	b	2d644 <flatcc_json_printer_utype_enum_vector_field@@Base+0x160>
   2d63c:	mov	r0, r4
   2d640:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d644:	mov	r0, r5
   2d648:	bl	2c1ec <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d64c:	mov	r1, r0
   2d650:	mov	r0, r4
   2d654:	blx	r9
   2d658:	adds	r6, r6, #1
   2d65c:	add	r5, r5, #1
   2d660:	bne	2d604 <flatcc_json_printer_utype_enum_vector_field@@Base+0x120>
   2d664:	ldrb	r0, [r4, #25]
   2d668:	cmp	r0, #0
   2d66c:	beq	2d698 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1b4>
   2d670:	ldr	r0, [r4, #20]
   2d674:	add	r1, r0, #1
   2d678:	str	r1, [r4, #20]
   2d67c:	mov	r1, #10
   2d680:	strb	r1, [r0]
   2d684:	ldr	r0, [r4, #32]
   2d688:	sub	r0, r0, #1
   2d68c:	str	r0, [r4, #32]
   2d690:	mov	r0, r4
   2d694:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d698:	ldr	r0, [r4, #20]
   2d69c:	add	r1, r0, #1
   2d6a0:	str	r1, [r4, #20]
   2d6a4:	mov	r1, #93	; 0x5d
   2d6a8:	strb	r1, [r0]
   2d6ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002d6b0 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   2d6b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d6b4:	add	fp, sp, #24
   2d6b8:	mov	r7, r3
   2d6bc:	mov	r6, r1
   2d6c0:	mov	r4, r0
   2d6c4:	ldrb	r0, [r0, #27]
   2d6c8:	cmp	r0, #0
   2d6cc:	beq	2d6e4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x34>
   2d6d0:	mov	r0, r4
   2d6d4:	mov	r1, r6
   2d6d8:	mov	r3, r7
   2d6dc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d6e0:	b	2c1f4 <flatcc_json_printer_uint8_vector_field@@Base>
   2d6e4:	ldr	r9, [fp, #12]
   2d6e8:	ldr	r5, [fp, #8]
   2d6ec:	mov	r0, r6
   2d6f0:	mov	r1, r2
   2d6f4:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2d6f8:	cmp	r0, #0
   2d6fc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d700:	ldr	r1, [r6, #16]
   2d704:	add	r2, r1, #1
   2d708:	str	r2, [r6, #16]
   2d70c:	cmp	r1, #0
   2d710:	ldrne	r1, [r4, #20]
   2d714:	addne	r2, r1, #1
   2d718:	strne	r2, [r4, #20]
   2d71c:	movne	r2, #44	; 0x2c
   2d720:	strbne	r2, [r1]
   2d724:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2d728:	mov	r8, r0
   2d72c:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d730:	mov	r6, r0
   2d734:	mov	r0, r4
   2d738:	mov	r1, r7
   2d73c:	mov	r2, r5
   2d740:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2d744:	ldr	r0, [r4, #20]
   2d748:	ldr	r1, [r4, #32]
   2d74c:	add	r1, r1, #1
   2d750:	str	r1, [r4, #32]
   2d754:	add	r1, r0, #1
   2d758:	str	r1, [r4, #20]
   2d75c:	mov	r1, #91	; 0x5b
   2d760:	strb	r1, [r0]
   2d764:	cmp	r6, #0
   2d768:	beq	2d830 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x180>
   2d76c:	add	r5, r8, #4
   2d770:	ldrb	r0, [r4, #25]
   2d774:	cmp	r0, #0
   2d778:	beq	2d79c <flatcc_json_printer_uint8_enum_vector_field@@Base+0xec>
   2d77c:	ldr	r0, [r4, #20]
   2d780:	add	r1, r0, #1
   2d784:	str	r1, [r4, #20]
   2d788:	mov	r1, #10
   2d78c:	strb	r1, [r0]
   2d790:	mov	r0, r4
   2d794:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d798:	b	2d7a4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
   2d79c:	mov	r0, r4
   2d7a0:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d7a4:	mov	r0, r5
   2d7a8:	bl	2a768 <flatcc_json_printer_uint8_field@@Base+0xac>
   2d7ac:	mov	r1, r0
   2d7b0:	mov	r0, r4
   2d7b4:	blx	r9
   2d7b8:	cmp	r6, #1
   2d7bc:	beq	2d830 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x180>
   2d7c0:	rsb	r6, r6, #1
   2d7c4:	add	r5, r8, #5
   2d7c8:	mov	r7, #44	; 0x2c
   2d7cc:	mov	r8, #10
   2d7d0:	ldr	r0, [r4, #20]
   2d7d4:	add	r1, r0, #1
   2d7d8:	str	r1, [r4, #20]
   2d7dc:	strb	r7, [r0]
   2d7e0:	ldrb	r0, [r4, #25]
   2d7e4:	cmp	r0, #0
   2d7e8:	beq	2d808 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x158>
   2d7ec:	ldr	r0, [r4, #20]
   2d7f0:	add	r1, r0, #1
   2d7f4:	str	r1, [r4, #20]
   2d7f8:	strb	r8, [r0]
   2d7fc:	mov	r0, r4
   2d800:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d804:	b	2d810 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x160>
   2d808:	mov	r0, r4
   2d80c:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d810:	mov	r0, r5
   2d814:	bl	2a768 <flatcc_json_printer_uint8_field@@Base+0xac>
   2d818:	mov	r1, r0
   2d81c:	mov	r0, r4
   2d820:	blx	r9
   2d824:	adds	r6, r6, #1
   2d828:	add	r5, r5, #1
   2d82c:	bne	2d7d0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x120>
   2d830:	ldrb	r0, [r4, #25]
   2d834:	cmp	r0, #0
   2d838:	beq	2d864 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b4>
   2d83c:	ldr	r0, [r4, #20]
   2d840:	add	r1, r0, #1
   2d844:	str	r1, [r4, #20]
   2d848:	mov	r1, #10
   2d84c:	strb	r1, [r0]
   2d850:	ldr	r0, [r4, #32]
   2d854:	sub	r0, r0, #1
   2d858:	str	r0, [r4, #32]
   2d85c:	mov	r0, r4
   2d860:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d864:	ldr	r0, [r4, #20]
   2d868:	add	r1, r0, #1
   2d86c:	str	r1, [r4, #20]
   2d870:	mov	r1, #93	; 0x5d
   2d874:	strb	r1, [r0]
   2d878:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002d87c <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   2d87c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d880:	add	fp, sp, #24
   2d884:	mov	r7, r3
   2d888:	mov	r6, r1
   2d88c:	mov	r4, r0
   2d890:	ldrb	r0, [r0, #27]
   2d894:	cmp	r0, #0
   2d898:	beq	2d8b0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x34>
   2d89c:	mov	r0, r4
   2d8a0:	mov	r1, r6
   2d8a4:	mov	r3, r7
   2d8a8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2d8ac:	b	2c3ac <flatcc_json_printer_uint16_vector_field@@Base>
   2d8b0:	ldr	r9, [fp, #12]
   2d8b4:	ldr	r5, [fp, #8]
   2d8b8:	mov	r0, r6
   2d8bc:	mov	r1, r2
   2d8c0:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2d8c4:	cmp	r0, #0
   2d8c8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d8cc:	ldr	r1, [r6, #16]
   2d8d0:	add	r2, r1, #1
   2d8d4:	str	r2, [r6, #16]
   2d8d8:	cmp	r1, #0
   2d8dc:	ldrne	r1, [r4, #20]
   2d8e0:	addne	r2, r1, #1
   2d8e4:	strne	r2, [r4, #20]
   2d8e8:	movne	r2, #44	; 0x2c
   2d8ec:	strbne	r2, [r1]
   2d8f0:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2d8f4:	mov	r8, r0
   2d8f8:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2d8fc:	mov	r6, r0
   2d900:	mov	r0, r4
   2d904:	mov	r1, r7
   2d908:	mov	r2, r5
   2d90c:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2d910:	ldr	r0, [r4, #20]
   2d914:	ldr	r1, [r4, #32]
   2d918:	add	r1, r1, #1
   2d91c:	str	r1, [r4, #32]
   2d920:	add	r1, r0, #1
   2d924:	str	r1, [r4, #20]
   2d928:	mov	r1, #91	; 0x5b
   2d92c:	strb	r1, [r0]
   2d930:	cmp	r6, #0
   2d934:	beq	2d9fc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x180>
   2d938:	add	r5, r8, #4
   2d93c:	ldrb	r0, [r4, #25]
   2d940:	cmp	r0, #0
   2d944:	beq	2d968 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xec>
   2d948:	ldr	r0, [r4, #20]
   2d94c:	add	r1, r0, #1
   2d950:	str	r1, [r4, #20]
   2d954:	mov	r1, #10
   2d958:	strb	r1, [r0]
   2d95c:	mov	r0, r4
   2d960:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d964:	b	2d970 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   2d968:	mov	r0, r4
   2d96c:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d970:	mov	r0, r5
   2d974:	bl	2a81c <flatcc_json_printer_uint16_field@@Base+0xac>
   2d978:	mov	r1, r0
   2d97c:	mov	r0, r4
   2d980:	blx	r9
   2d984:	cmp	r6, #1
   2d988:	beq	2d9fc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x180>
   2d98c:	rsb	r6, r6, #1
   2d990:	add	r5, r8, #6
   2d994:	mov	r7, #44	; 0x2c
   2d998:	mov	r8, #10
   2d99c:	ldr	r0, [r4, #20]
   2d9a0:	add	r1, r0, #1
   2d9a4:	str	r1, [r4, #20]
   2d9a8:	strb	r7, [r0]
   2d9ac:	ldrb	r0, [r4, #25]
   2d9b0:	cmp	r0, #0
   2d9b4:	beq	2d9d4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x158>
   2d9b8:	ldr	r0, [r4, #20]
   2d9bc:	add	r1, r0, #1
   2d9c0:	str	r1, [r4, #20]
   2d9c4:	strb	r8, [r0]
   2d9c8:	mov	r0, r4
   2d9cc:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2d9d0:	b	2d9dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x160>
   2d9d4:	mov	r0, r4
   2d9d8:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2d9dc:	mov	r0, r5
   2d9e0:	bl	2a81c <flatcc_json_printer_uint16_field@@Base+0xac>
   2d9e4:	mov	r1, r0
   2d9e8:	mov	r0, r4
   2d9ec:	blx	r9
   2d9f0:	adds	r6, r6, #1
   2d9f4:	add	r5, r5, #2
   2d9f8:	bne	2d99c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   2d9fc:	ldrb	r0, [r4, #25]
   2da00:	cmp	r0, #0
   2da04:	beq	2da30 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b4>
   2da08:	ldr	r0, [r4, #20]
   2da0c:	add	r1, r0, #1
   2da10:	str	r1, [r4, #20]
   2da14:	mov	r1, #10
   2da18:	strb	r1, [r0]
   2da1c:	ldr	r0, [r4, #32]
   2da20:	sub	r0, r0, #1
   2da24:	str	r0, [r4, #32]
   2da28:	mov	r0, r4
   2da2c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2da30:	ldr	r0, [r4, #20]
   2da34:	add	r1, r0, #1
   2da38:	str	r1, [r4, #20]
   2da3c:	mov	r1, #93	; 0x5d
   2da40:	strb	r1, [r0]
   2da44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002da48 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   2da48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2da4c:	add	fp, sp, #24
   2da50:	mov	r7, r3
   2da54:	mov	r6, r1
   2da58:	mov	r4, r0
   2da5c:	ldrb	r0, [r0, #27]
   2da60:	cmp	r0, #0
   2da64:	beq	2da7c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x34>
   2da68:	mov	r0, r4
   2da6c:	mov	r1, r6
   2da70:	mov	r3, r7
   2da74:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2da78:	b	2c564 <flatcc_json_printer_uint32_vector_field@@Base>
   2da7c:	ldr	r9, [fp, #12]
   2da80:	ldr	r5, [fp, #8]
   2da84:	mov	r0, r6
   2da88:	mov	r1, r2
   2da8c:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2da90:	cmp	r0, #0
   2da94:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2da98:	ldr	r1, [r6, #16]
   2da9c:	add	r2, r1, #1
   2daa0:	str	r2, [r6, #16]
   2daa4:	cmp	r1, #0
   2daa8:	ldrne	r1, [r4, #20]
   2daac:	addne	r2, r1, #1
   2dab0:	strne	r2, [r4, #20]
   2dab4:	movne	r2, #44	; 0x2c
   2dab8:	strbne	r2, [r1]
   2dabc:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2dac0:	mov	r8, r0
   2dac4:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2dac8:	mov	r6, r0
   2dacc:	mov	r0, r4
   2dad0:	mov	r1, r7
   2dad4:	mov	r2, r5
   2dad8:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2dadc:	ldr	r0, [r4, #20]
   2dae0:	ldr	r1, [r4, #32]
   2dae4:	add	r1, r1, #1
   2dae8:	str	r1, [r4, #32]
   2daec:	add	r1, r0, #1
   2daf0:	str	r1, [r4, #20]
   2daf4:	mov	r1, #91	; 0x5b
   2daf8:	strb	r1, [r0]
   2dafc:	cmp	r6, #0
   2db00:	beq	2dbc8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x180>
   2db04:	add	r5, r8, #4
   2db08:	ldrb	r0, [r4, #25]
   2db0c:	cmp	r0, #0
   2db10:	beq	2db34 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xec>
   2db14:	ldr	r0, [r4, #20]
   2db18:	add	r1, r0, #1
   2db1c:	str	r1, [r4, #20]
   2db20:	mov	r1, #10
   2db24:	strb	r1, [r0]
   2db28:	mov	r0, r4
   2db2c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2db30:	b	2db3c <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   2db34:	mov	r0, r4
   2db38:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2db3c:	mov	r0, r5
   2db40:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base+0xac>
   2db44:	mov	r1, r0
   2db48:	mov	r0, r4
   2db4c:	blx	r9
   2db50:	cmp	r6, #1
   2db54:	beq	2dbc8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x180>
   2db58:	rsb	r6, r6, #1
   2db5c:	add	r5, r8, #8
   2db60:	mov	r7, #44	; 0x2c
   2db64:	mov	r8, #10
   2db68:	ldr	r0, [r4, #20]
   2db6c:	add	r1, r0, #1
   2db70:	str	r1, [r4, #20]
   2db74:	strb	r7, [r0]
   2db78:	ldrb	r0, [r4, #25]
   2db7c:	cmp	r0, #0
   2db80:	beq	2dba0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x158>
   2db84:	ldr	r0, [r4, #20]
   2db88:	add	r1, r0, #1
   2db8c:	str	r1, [r4, #20]
   2db90:	strb	r8, [r0]
   2db94:	mov	r0, r4
   2db98:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2db9c:	b	2dba8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x160>
   2dba0:	mov	r0, r4
   2dba4:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2dba8:	mov	r0, r5
   2dbac:	bl	2a8d0 <flatcc_json_printer_uint32_field@@Base+0xac>
   2dbb0:	mov	r1, r0
   2dbb4:	mov	r0, r4
   2dbb8:	blx	r9
   2dbbc:	adds	r6, r6, #1
   2dbc0:	add	r5, r5, #4
   2dbc4:	bne	2db68 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   2dbc8:	ldrb	r0, [r4, #25]
   2dbcc:	cmp	r0, #0
   2dbd0:	beq	2dbfc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b4>
   2dbd4:	ldr	r0, [r4, #20]
   2dbd8:	add	r1, r0, #1
   2dbdc:	str	r1, [r4, #20]
   2dbe0:	mov	r1, #10
   2dbe4:	strb	r1, [r0]
   2dbe8:	ldr	r0, [r4, #32]
   2dbec:	sub	r0, r0, #1
   2dbf0:	str	r0, [r4, #32]
   2dbf4:	mov	r0, r4
   2dbf8:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2dbfc:	ldr	r0, [r4, #20]
   2dc00:	add	r1, r0, #1
   2dc04:	str	r1, [r4, #20]
   2dc08:	mov	r1, #93	; 0x5d
   2dc0c:	strb	r1, [r0]
   2dc10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002dc14 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   2dc14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dc18:	add	fp, sp, #24
   2dc1c:	mov	r7, r3
   2dc20:	mov	r6, r1
   2dc24:	mov	r4, r0
   2dc28:	ldrb	r0, [r0, #27]
   2dc2c:	cmp	r0, #0
   2dc30:	beq	2dc48 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x34>
   2dc34:	mov	r0, r4
   2dc38:	mov	r1, r6
   2dc3c:	mov	r3, r7
   2dc40:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dc44:	b	2c71c <flatcc_json_printer_uint64_vector_field@@Base>
   2dc48:	ldr	r9, [fp, #12]
   2dc4c:	ldr	r5, [fp, #8]
   2dc50:	mov	r0, r6
   2dc54:	mov	r1, r2
   2dc58:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2dc5c:	cmp	r0, #0
   2dc60:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2dc64:	ldr	r1, [r6, #16]
   2dc68:	add	r2, r1, #1
   2dc6c:	str	r2, [r6, #16]
   2dc70:	cmp	r1, #0
   2dc74:	ldrne	r1, [r4, #20]
   2dc78:	addne	r2, r1, #1
   2dc7c:	strne	r2, [r4, #20]
   2dc80:	movne	r2, #44	; 0x2c
   2dc84:	strbne	r2, [r1]
   2dc88:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2dc8c:	mov	r8, r0
   2dc90:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2dc94:	mov	r6, r0
   2dc98:	mov	r0, r4
   2dc9c:	mov	r1, r7
   2dca0:	mov	r2, r5
   2dca4:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2dca8:	ldr	r0, [r4, #20]
   2dcac:	ldr	r1, [r4, #32]
   2dcb0:	add	r1, r1, #1
   2dcb4:	str	r1, [r4, #32]
   2dcb8:	add	r1, r0, #1
   2dcbc:	str	r1, [r4, #20]
   2dcc0:	mov	r1, #91	; 0x5b
   2dcc4:	strb	r1, [r0]
   2dcc8:	cmp	r6, #0
   2dccc:	beq	2dd9c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x188>
   2dcd0:	add	r5, r8, #4
   2dcd4:	ldrb	r0, [r4, #25]
   2dcd8:	cmp	r0, #0
   2dcdc:	beq	2dd00 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xec>
   2dce0:	ldr	r0, [r4, #20]
   2dce4:	add	r1, r0, #1
   2dce8:	str	r1, [r4, #20]
   2dcec:	mov	r1, #10
   2dcf0:	strb	r1, [r0]
   2dcf4:	mov	r0, r4
   2dcf8:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2dcfc:	b	2dd08 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   2dd00:	mov	r0, r4
   2dd04:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2dd08:	mov	r0, r5
   2dd0c:	bl	2a9a4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2dd10:	mov	r2, r0
   2dd14:	mov	r0, r4
   2dd18:	mov	r3, r1
   2dd1c:	blx	r9
   2dd20:	cmp	r6, #1
   2dd24:	beq	2dd9c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x188>
   2dd28:	rsb	r6, r6, #1
   2dd2c:	add	r5, r8, #12
   2dd30:	mov	r7, #44	; 0x2c
   2dd34:	mov	r8, #10
   2dd38:	ldr	r0, [r4, #20]
   2dd3c:	add	r1, r0, #1
   2dd40:	str	r1, [r4, #20]
   2dd44:	strb	r7, [r0]
   2dd48:	ldrb	r0, [r4, #25]
   2dd4c:	cmp	r0, #0
   2dd50:	beq	2dd70 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x15c>
   2dd54:	ldr	r0, [r4, #20]
   2dd58:	add	r1, r0, #1
   2dd5c:	str	r1, [r4, #20]
   2dd60:	strb	r8, [r0]
   2dd64:	mov	r0, r4
   2dd68:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2dd6c:	b	2dd78 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x164>
   2dd70:	mov	r0, r4
   2dd74:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2dd78:	mov	r0, r5
   2dd7c:	bl	2a9a4 <flatcc_json_printer_uint64_field@@Base+0xcc>
   2dd80:	mov	r2, r0
   2dd84:	mov	r0, r4
   2dd88:	mov	r3, r1
   2dd8c:	blx	r9
   2dd90:	adds	r6, r6, #1
   2dd94:	add	r5, r5, #8
   2dd98:	bne	2dd38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x124>
   2dd9c:	ldrb	r0, [r4, #25]
   2dda0:	cmp	r0, #0
   2dda4:	beq	2ddd0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1bc>
   2dda8:	ldr	r0, [r4, #20]
   2ddac:	add	r1, r0, #1
   2ddb0:	str	r1, [r4, #20]
   2ddb4:	mov	r1, #10
   2ddb8:	strb	r1, [r0]
   2ddbc:	ldr	r0, [r4, #32]
   2ddc0:	sub	r0, r0, #1
   2ddc4:	str	r0, [r4, #32]
   2ddc8:	mov	r0, r4
   2ddcc:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2ddd0:	ldr	r0, [r4, #20]
   2ddd4:	add	r1, r0, #1
   2ddd8:	str	r1, [r4, #20]
   2dddc:	mov	r1, #93	; 0x5d
   2dde0:	strb	r1, [r0]
   2dde4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002dde8 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   2dde8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ddec:	add	fp, sp, #24
   2ddf0:	mov	r7, r3
   2ddf4:	mov	r6, r1
   2ddf8:	mov	r4, r0
   2ddfc:	ldrb	r0, [r0, #27]
   2de00:	cmp	r0, #0
   2de04:	beq	2de1c <flatcc_json_printer_int8_enum_vector_field@@Base+0x34>
   2de08:	mov	r0, r4
   2de0c:	mov	r1, r6
   2de10:	mov	r3, r7
   2de14:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2de18:	b	2c8d4 <flatcc_json_printer_int8_vector_field@@Base>
   2de1c:	ldr	r9, [fp, #12]
   2de20:	ldr	r5, [fp, #8]
   2de24:	mov	r0, r6
   2de28:	mov	r1, r2
   2de2c:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2de30:	cmp	r0, #0
   2de34:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2de38:	ldr	r1, [r6, #16]
   2de3c:	add	r2, r1, #1
   2de40:	str	r2, [r6, #16]
   2de44:	cmp	r1, #0
   2de48:	ldrne	r1, [r4, #20]
   2de4c:	addne	r2, r1, #1
   2de50:	strne	r2, [r4, #20]
   2de54:	movne	r2, #44	; 0x2c
   2de58:	strbne	r2, [r1]
   2de5c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2de60:	mov	r8, r0
   2de64:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2de68:	mov	r6, r0
   2de6c:	mov	r0, r4
   2de70:	mov	r1, r7
   2de74:	mov	r2, r5
   2de78:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2de7c:	ldr	r0, [r4, #20]
   2de80:	ldr	r1, [r4, #32]
   2de84:	add	r1, r1, #1
   2de88:	str	r1, [r4, #32]
   2de8c:	add	r1, r0, #1
   2de90:	str	r1, [r4, #20]
   2de94:	mov	r1, #91	; 0x5b
   2de98:	strb	r1, [r0]
   2de9c:	cmp	r6, #0
   2dea0:	beq	2df68 <flatcc_json_printer_int8_enum_vector_field@@Base+0x180>
   2dea4:	add	r5, r8, #4
   2dea8:	ldrb	r0, [r4, #25]
   2deac:	cmp	r0, #0
   2deb0:	beq	2ded4 <flatcc_json_printer_int8_enum_vector_field@@Base+0xec>
   2deb4:	ldr	r0, [r4, #20]
   2deb8:	add	r1, r0, #1
   2debc:	str	r1, [r4, #20]
   2dec0:	mov	r1, #10
   2dec4:	strb	r1, [r0]
   2dec8:	mov	r0, r4
   2decc:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2ded0:	b	2dedc <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
   2ded4:	mov	r0, r4
   2ded8:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2dedc:	mov	r0, r5
   2dee0:	bl	2aa58 <flatcc_json_printer_int8_field@@Base+0xac>
   2dee4:	mov	r1, r0
   2dee8:	mov	r0, r4
   2deec:	blx	r9
   2def0:	cmp	r6, #1
   2def4:	beq	2df68 <flatcc_json_printer_int8_enum_vector_field@@Base+0x180>
   2def8:	rsb	r6, r6, #1
   2defc:	add	r5, r8, #5
   2df00:	mov	r7, #44	; 0x2c
   2df04:	mov	r8, #10
   2df08:	ldr	r0, [r4, #20]
   2df0c:	add	r1, r0, #1
   2df10:	str	r1, [r4, #20]
   2df14:	strb	r7, [r0]
   2df18:	ldrb	r0, [r4, #25]
   2df1c:	cmp	r0, #0
   2df20:	beq	2df40 <flatcc_json_printer_int8_enum_vector_field@@Base+0x158>
   2df24:	ldr	r0, [r4, #20]
   2df28:	add	r1, r0, #1
   2df2c:	str	r1, [r4, #20]
   2df30:	strb	r8, [r0]
   2df34:	mov	r0, r4
   2df38:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2df3c:	b	2df48 <flatcc_json_printer_int8_enum_vector_field@@Base+0x160>
   2df40:	mov	r0, r4
   2df44:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2df48:	mov	r0, r5
   2df4c:	bl	2aa58 <flatcc_json_printer_int8_field@@Base+0xac>
   2df50:	mov	r1, r0
   2df54:	mov	r0, r4
   2df58:	blx	r9
   2df5c:	adds	r6, r6, #1
   2df60:	add	r5, r5, #1
   2df64:	bne	2df08 <flatcc_json_printer_int8_enum_vector_field@@Base+0x120>
   2df68:	ldrb	r0, [r4, #25]
   2df6c:	cmp	r0, #0
   2df70:	beq	2df9c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b4>
   2df74:	ldr	r0, [r4, #20]
   2df78:	add	r1, r0, #1
   2df7c:	str	r1, [r4, #20]
   2df80:	mov	r1, #10
   2df84:	strb	r1, [r0]
   2df88:	ldr	r0, [r4, #32]
   2df8c:	sub	r0, r0, #1
   2df90:	str	r0, [r4, #32]
   2df94:	mov	r0, r4
   2df98:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2df9c:	ldr	r0, [r4, #20]
   2dfa0:	add	r1, r0, #1
   2dfa4:	str	r1, [r4, #20]
   2dfa8:	mov	r1, #93	; 0x5d
   2dfac:	strb	r1, [r0]
   2dfb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002dfb4 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   2dfb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dfb8:	add	fp, sp, #24
   2dfbc:	mov	r7, r3
   2dfc0:	mov	r6, r1
   2dfc4:	mov	r4, r0
   2dfc8:	ldrb	r0, [r0, #27]
   2dfcc:	cmp	r0, #0
   2dfd0:	beq	2dfe8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x34>
   2dfd4:	mov	r0, r4
   2dfd8:	mov	r1, r6
   2dfdc:	mov	r3, r7
   2dfe0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dfe4:	b	2ca8c <flatcc_json_printer_int16_vector_field@@Base>
   2dfe8:	ldr	r9, [fp, #12]
   2dfec:	ldr	r5, [fp, #8]
   2dff0:	mov	r0, r6
   2dff4:	mov	r1, r2
   2dff8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2dffc:	cmp	r0, #0
   2e000:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e004:	ldr	r1, [r6, #16]
   2e008:	add	r2, r1, #1
   2e00c:	str	r2, [r6, #16]
   2e010:	cmp	r1, #0
   2e014:	ldrne	r1, [r4, #20]
   2e018:	addne	r2, r1, #1
   2e01c:	strne	r2, [r4, #20]
   2e020:	movne	r2, #44	; 0x2c
   2e024:	strbne	r2, [r1]
   2e028:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2e02c:	mov	r8, r0
   2e030:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e034:	mov	r6, r0
   2e038:	mov	r0, r4
   2e03c:	mov	r1, r7
   2e040:	mov	r2, r5
   2e044:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2e048:	ldr	r0, [r4, #20]
   2e04c:	ldr	r1, [r4, #32]
   2e050:	add	r1, r1, #1
   2e054:	str	r1, [r4, #32]
   2e058:	add	r1, r0, #1
   2e05c:	str	r1, [r4, #20]
   2e060:	mov	r1, #91	; 0x5b
   2e064:	strb	r1, [r0]
   2e068:	cmp	r6, #0
   2e06c:	beq	2e134 <flatcc_json_printer_int16_enum_vector_field@@Base+0x180>
   2e070:	add	r5, r8, #4
   2e074:	ldrb	r0, [r4, #25]
   2e078:	cmp	r0, #0
   2e07c:	beq	2e0a0 <flatcc_json_printer_int16_enum_vector_field@@Base+0xec>
   2e080:	ldr	r0, [r4, #20]
   2e084:	add	r1, r0, #1
   2e088:	str	r1, [r4, #20]
   2e08c:	mov	r1, #10
   2e090:	strb	r1, [r0]
   2e094:	mov	r0, r4
   2e098:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e09c:	b	2e0a8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   2e0a0:	mov	r0, r4
   2e0a4:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e0a8:	mov	r0, r5
   2e0ac:	bl	2ab0c <flatcc_json_printer_int16_field@@Base+0xac>
   2e0b0:	mov	r1, r0
   2e0b4:	mov	r0, r4
   2e0b8:	blx	r9
   2e0bc:	cmp	r6, #1
   2e0c0:	beq	2e134 <flatcc_json_printer_int16_enum_vector_field@@Base+0x180>
   2e0c4:	rsb	r6, r6, #1
   2e0c8:	add	r5, r8, #6
   2e0cc:	mov	r7, #44	; 0x2c
   2e0d0:	mov	r8, #10
   2e0d4:	ldr	r0, [r4, #20]
   2e0d8:	add	r1, r0, #1
   2e0dc:	str	r1, [r4, #20]
   2e0e0:	strb	r7, [r0]
   2e0e4:	ldrb	r0, [r4, #25]
   2e0e8:	cmp	r0, #0
   2e0ec:	beq	2e10c <flatcc_json_printer_int16_enum_vector_field@@Base+0x158>
   2e0f0:	ldr	r0, [r4, #20]
   2e0f4:	add	r1, r0, #1
   2e0f8:	str	r1, [r4, #20]
   2e0fc:	strb	r8, [r0]
   2e100:	mov	r0, r4
   2e104:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e108:	b	2e114 <flatcc_json_printer_int16_enum_vector_field@@Base+0x160>
   2e10c:	mov	r0, r4
   2e110:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e114:	mov	r0, r5
   2e118:	bl	2ab0c <flatcc_json_printer_int16_field@@Base+0xac>
   2e11c:	mov	r1, r0
   2e120:	mov	r0, r4
   2e124:	blx	r9
   2e128:	adds	r6, r6, #1
   2e12c:	add	r5, r5, #2
   2e130:	bne	2e0d4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   2e134:	ldrb	r0, [r4, #25]
   2e138:	cmp	r0, #0
   2e13c:	beq	2e168 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b4>
   2e140:	ldr	r0, [r4, #20]
   2e144:	add	r1, r0, #1
   2e148:	str	r1, [r4, #20]
   2e14c:	mov	r1, #10
   2e150:	strb	r1, [r0]
   2e154:	ldr	r0, [r4, #32]
   2e158:	sub	r0, r0, #1
   2e15c:	str	r0, [r4, #32]
   2e160:	mov	r0, r4
   2e164:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e168:	ldr	r0, [r4, #20]
   2e16c:	add	r1, r0, #1
   2e170:	str	r1, [r4, #20]
   2e174:	mov	r1, #93	; 0x5d
   2e178:	strb	r1, [r0]
   2e17c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e180 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   2e180:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e184:	add	fp, sp, #24
   2e188:	mov	r7, r3
   2e18c:	mov	r6, r1
   2e190:	mov	r4, r0
   2e194:	ldrb	r0, [r0, #27]
   2e198:	cmp	r0, #0
   2e19c:	beq	2e1b4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x34>
   2e1a0:	mov	r0, r4
   2e1a4:	mov	r1, r6
   2e1a8:	mov	r3, r7
   2e1ac:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e1b0:	b	2cc44 <flatcc_json_printer_int32_vector_field@@Base>
   2e1b4:	ldr	r9, [fp, #12]
   2e1b8:	ldr	r5, [fp, #8]
   2e1bc:	mov	r0, r6
   2e1c0:	mov	r1, r2
   2e1c4:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2e1c8:	cmp	r0, #0
   2e1cc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e1d0:	ldr	r1, [r6, #16]
   2e1d4:	add	r2, r1, #1
   2e1d8:	str	r2, [r6, #16]
   2e1dc:	cmp	r1, #0
   2e1e0:	ldrne	r1, [r4, #20]
   2e1e4:	addne	r2, r1, #1
   2e1e8:	strne	r2, [r4, #20]
   2e1ec:	movne	r2, #44	; 0x2c
   2e1f0:	strbne	r2, [r1]
   2e1f4:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2e1f8:	mov	r8, r0
   2e1fc:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e200:	mov	r6, r0
   2e204:	mov	r0, r4
   2e208:	mov	r1, r7
   2e20c:	mov	r2, r5
   2e210:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2e214:	ldr	r0, [r4, #20]
   2e218:	ldr	r1, [r4, #32]
   2e21c:	add	r1, r1, #1
   2e220:	str	r1, [r4, #32]
   2e224:	add	r1, r0, #1
   2e228:	str	r1, [r4, #20]
   2e22c:	mov	r1, #91	; 0x5b
   2e230:	strb	r1, [r0]
   2e234:	cmp	r6, #0
   2e238:	beq	2e300 <flatcc_json_printer_int32_enum_vector_field@@Base+0x180>
   2e23c:	add	r5, r8, #4
   2e240:	ldrb	r0, [r4, #25]
   2e244:	cmp	r0, #0
   2e248:	beq	2e26c <flatcc_json_printer_int32_enum_vector_field@@Base+0xec>
   2e24c:	ldr	r0, [r4, #20]
   2e250:	add	r1, r0, #1
   2e254:	str	r1, [r4, #20]
   2e258:	mov	r1, #10
   2e25c:	strb	r1, [r0]
   2e260:	mov	r0, r4
   2e264:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e268:	b	2e274 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   2e26c:	mov	r0, r4
   2e270:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e274:	mov	r0, r5
   2e278:	bl	2abc0 <flatcc_json_printer_int32_field@@Base+0xac>
   2e27c:	mov	r1, r0
   2e280:	mov	r0, r4
   2e284:	blx	r9
   2e288:	cmp	r6, #1
   2e28c:	beq	2e300 <flatcc_json_printer_int32_enum_vector_field@@Base+0x180>
   2e290:	rsb	r6, r6, #1
   2e294:	add	r5, r8, #8
   2e298:	mov	r7, #44	; 0x2c
   2e29c:	mov	r8, #10
   2e2a0:	ldr	r0, [r4, #20]
   2e2a4:	add	r1, r0, #1
   2e2a8:	str	r1, [r4, #20]
   2e2ac:	strb	r7, [r0]
   2e2b0:	ldrb	r0, [r4, #25]
   2e2b4:	cmp	r0, #0
   2e2b8:	beq	2e2d8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x158>
   2e2bc:	ldr	r0, [r4, #20]
   2e2c0:	add	r1, r0, #1
   2e2c4:	str	r1, [r4, #20]
   2e2c8:	strb	r8, [r0]
   2e2cc:	mov	r0, r4
   2e2d0:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e2d4:	b	2e2e0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x160>
   2e2d8:	mov	r0, r4
   2e2dc:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e2e0:	mov	r0, r5
   2e2e4:	bl	2abc0 <flatcc_json_printer_int32_field@@Base+0xac>
   2e2e8:	mov	r1, r0
   2e2ec:	mov	r0, r4
   2e2f0:	blx	r9
   2e2f4:	adds	r6, r6, #1
   2e2f8:	add	r5, r5, #4
   2e2fc:	bne	2e2a0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   2e300:	ldrb	r0, [r4, #25]
   2e304:	cmp	r0, #0
   2e308:	beq	2e334 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b4>
   2e30c:	ldr	r0, [r4, #20]
   2e310:	add	r1, r0, #1
   2e314:	str	r1, [r4, #20]
   2e318:	mov	r1, #10
   2e31c:	strb	r1, [r0]
   2e320:	ldr	r0, [r4, #32]
   2e324:	sub	r0, r0, #1
   2e328:	str	r0, [r4, #32]
   2e32c:	mov	r0, r4
   2e330:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e334:	ldr	r0, [r4, #20]
   2e338:	add	r1, r0, #1
   2e33c:	str	r1, [r4, #20]
   2e340:	mov	r1, #93	; 0x5d
   2e344:	strb	r1, [r0]
   2e348:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e34c <flatcc_json_printer_int64_enum_vector_field@@Base>:
   2e34c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e350:	add	fp, sp, #24
   2e354:	mov	r7, r3
   2e358:	mov	r6, r1
   2e35c:	mov	r4, r0
   2e360:	ldrb	r0, [r0, #27]
   2e364:	cmp	r0, #0
   2e368:	beq	2e380 <flatcc_json_printer_int64_enum_vector_field@@Base+0x34>
   2e36c:	mov	r0, r4
   2e370:	mov	r1, r6
   2e374:	mov	r3, r7
   2e378:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e37c:	b	2cdfc <flatcc_json_printer_int64_vector_field@@Base>
   2e380:	ldr	r9, [fp, #12]
   2e384:	ldr	r5, [fp, #8]
   2e388:	mov	r0, r6
   2e38c:	mov	r1, r2
   2e390:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2e394:	cmp	r0, #0
   2e398:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e39c:	ldr	r1, [r6, #16]
   2e3a0:	add	r2, r1, #1
   2e3a4:	str	r2, [r6, #16]
   2e3a8:	cmp	r1, #0
   2e3ac:	ldrne	r1, [r4, #20]
   2e3b0:	addne	r2, r1, #1
   2e3b4:	strne	r2, [r4, #20]
   2e3b8:	movne	r2, #44	; 0x2c
   2e3bc:	strbne	r2, [r1]
   2e3c0:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2e3c4:	mov	r8, r0
   2e3c8:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e3cc:	mov	r6, r0
   2e3d0:	mov	r0, r4
   2e3d4:	mov	r1, r7
   2e3d8:	mov	r2, r5
   2e3dc:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2e3e0:	ldr	r0, [r4, #20]
   2e3e4:	ldr	r1, [r4, #32]
   2e3e8:	add	r1, r1, #1
   2e3ec:	str	r1, [r4, #32]
   2e3f0:	add	r1, r0, #1
   2e3f4:	str	r1, [r4, #20]
   2e3f8:	mov	r1, #91	; 0x5b
   2e3fc:	strb	r1, [r0]
   2e400:	cmp	r6, #0
   2e404:	beq	2e4d4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x188>
   2e408:	add	r5, r8, #4
   2e40c:	ldrb	r0, [r4, #25]
   2e410:	cmp	r0, #0
   2e414:	beq	2e438 <flatcc_json_printer_int64_enum_vector_field@@Base+0xec>
   2e418:	ldr	r0, [r4, #20]
   2e41c:	add	r1, r0, #1
   2e420:	str	r1, [r4, #20]
   2e424:	mov	r1, #10
   2e428:	strb	r1, [r0]
   2e42c:	mov	r0, r4
   2e430:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e434:	b	2e440 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   2e438:	mov	r0, r4
   2e43c:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e440:	mov	r0, r5
   2e444:	bl	2ac94 <flatcc_json_printer_int64_field@@Base+0xcc>
   2e448:	mov	r2, r0
   2e44c:	mov	r0, r4
   2e450:	mov	r3, r1
   2e454:	blx	r9
   2e458:	cmp	r6, #1
   2e45c:	beq	2e4d4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x188>
   2e460:	rsb	r6, r6, #1
   2e464:	add	r5, r8, #12
   2e468:	mov	r7, #44	; 0x2c
   2e46c:	mov	r8, #10
   2e470:	ldr	r0, [r4, #20]
   2e474:	add	r1, r0, #1
   2e478:	str	r1, [r4, #20]
   2e47c:	strb	r7, [r0]
   2e480:	ldrb	r0, [r4, #25]
   2e484:	cmp	r0, #0
   2e488:	beq	2e4a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x15c>
   2e48c:	ldr	r0, [r4, #20]
   2e490:	add	r1, r0, #1
   2e494:	str	r1, [r4, #20]
   2e498:	strb	r8, [r0]
   2e49c:	mov	r0, r4
   2e4a0:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e4a4:	b	2e4b0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x164>
   2e4a8:	mov	r0, r4
   2e4ac:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e4b0:	mov	r0, r5
   2e4b4:	bl	2ac94 <flatcc_json_printer_int64_field@@Base+0xcc>
   2e4b8:	mov	r2, r0
   2e4bc:	mov	r0, r4
   2e4c0:	mov	r3, r1
   2e4c4:	blx	r9
   2e4c8:	adds	r6, r6, #1
   2e4cc:	add	r5, r5, #8
   2e4d0:	bne	2e470 <flatcc_json_printer_int64_enum_vector_field@@Base+0x124>
   2e4d4:	ldrb	r0, [r4, #25]
   2e4d8:	cmp	r0, #0
   2e4dc:	beq	2e508 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1bc>
   2e4e0:	ldr	r0, [r4, #20]
   2e4e4:	add	r1, r0, #1
   2e4e8:	str	r1, [r4, #20]
   2e4ec:	mov	r1, #10
   2e4f0:	strb	r1, [r0]
   2e4f4:	ldr	r0, [r4, #32]
   2e4f8:	sub	r0, r0, #1
   2e4fc:	str	r0, [r4, #32]
   2e500:	mov	r0, r4
   2e504:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e508:	ldr	r0, [r4, #20]
   2e50c:	add	r1, r0, #1
   2e510:	str	r1, [r4, #20]
   2e514:	mov	r1, #93	; 0x5d
   2e518:	strb	r1, [r0]
   2e51c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e520 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   2e520:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e524:	add	fp, sp, #24
   2e528:	mov	r7, r3
   2e52c:	mov	r6, r1
   2e530:	mov	r4, r0
   2e534:	ldrb	r0, [r0, #27]
   2e538:	cmp	r0, #0
   2e53c:	beq	2e554 <flatcc_json_printer_bool_enum_vector_field@@Base+0x34>
   2e540:	mov	r0, r4
   2e544:	mov	r1, r6
   2e548:	mov	r3, r7
   2e54c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e550:	b	2cfb4 <flatcc_json_printer_bool_vector_field@@Base>
   2e554:	ldr	r9, [fp, #12]
   2e558:	ldr	r5, [fp, #8]
   2e55c:	mov	r0, r6
   2e560:	mov	r1, r2
   2e564:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2e568:	cmp	r0, #0
   2e56c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e570:	ldr	r1, [r6, #16]
   2e574:	add	r2, r1, #1
   2e578:	str	r2, [r6, #16]
   2e57c:	cmp	r1, #0
   2e580:	ldrne	r1, [r4, #20]
   2e584:	addne	r2, r1, #1
   2e588:	strne	r2, [r4, #20]
   2e58c:	movne	r2, #44	; 0x2c
   2e590:	strbne	r2, [r1]
   2e594:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2e598:	mov	r8, r0
   2e59c:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e5a0:	mov	r6, r0
   2e5a4:	mov	r0, r4
   2e5a8:	mov	r1, r7
   2e5ac:	mov	r2, r5
   2e5b0:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2e5b4:	ldr	r0, [r4, #20]
   2e5b8:	ldr	r1, [r4, #32]
   2e5bc:	add	r1, r1, #1
   2e5c0:	str	r1, [r4, #32]
   2e5c4:	add	r1, r0, #1
   2e5c8:	str	r1, [r4, #20]
   2e5cc:	mov	r1, #91	; 0x5b
   2e5d0:	strb	r1, [r0]
   2e5d4:	cmp	r6, #0
   2e5d8:	beq	2e6a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x180>
   2e5dc:	add	r5, r8, #4
   2e5e0:	ldrb	r0, [r4, #25]
   2e5e4:	cmp	r0, #0
   2e5e8:	beq	2e60c <flatcc_json_printer_bool_enum_vector_field@@Base+0xec>
   2e5ec:	ldr	r0, [r4, #20]
   2e5f0:	add	r1, r0, #1
   2e5f4:	str	r1, [r4, #20]
   2e5f8:	mov	r1, #10
   2e5fc:	strb	r1, [r0]
   2e600:	mov	r0, r4
   2e604:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e608:	b	2e614 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
   2e60c:	mov	r0, r4
   2e610:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e614:	mov	r0, r5
   2e618:	bl	2ad48 <flatcc_json_printer_bool_field@@Base+0xac>
   2e61c:	mov	r1, r0
   2e620:	mov	r0, r4
   2e624:	blx	r9
   2e628:	cmp	r6, #1
   2e62c:	beq	2e6a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x180>
   2e630:	rsb	r6, r6, #1
   2e634:	add	r5, r8, #5
   2e638:	mov	r7, #44	; 0x2c
   2e63c:	mov	r8, #10
   2e640:	ldr	r0, [r4, #20]
   2e644:	add	r1, r0, #1
   2e648:	str	r1, [r4, #20]
   2e64c:	strb	r7, [r0]
   2e650:	ldrb	r0, [r4, #25]
   2e654:	cmp	r0, #0
   2e658:	beq	2e678 <flatcc_json_printer_bool_enum_vector_field@@Base+0x158>
   2e65c:	ldr	r0, [r4, #20]
   2e660:	add	r1, r0, #1
   2e664:	str	r1, [r4, #20]
   2e668:	strb	r8, [r0]
   2e66c:	mov	r0, r4
   2e670:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e674:	b	2e680 <flatcc_json_printer_bool_enum_vector_field@@Base+0x160>
   2e678:	mov	r0, r4
   2e67c:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e680:	mov	r0, r5
   2e684:	bl	2ad48 <flatcc_json_printer_bool_field@@Base+0xac>
   2e688:	mov	r1, r0
   2e68c:	mov	r0, r4
   2e690:	blx	r9
   2e694:	adds	r6, r6, #1
   2e698:	add	r5, r5, #1
   2e69c:	bne	2e640 <flatcc_json_printer_bool_enum_vector_field@@Base+0x120>
   2e6a0:	ldrb	r0, [r4, #25]
   2e6a4:	cmp	r0, #0
   2e6a8:	beq	2e6d4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b4>
   2e6ac:	ldr	r0, [r4, #20]
   2e6b0:	add	r1, r0, #1
   2e6b4:	str	r1, [r4, #20]
   2e6b8:	mov	r1, #10
   2e6bc:	strb	r1, [r0]
   2e6c0:	ldr	r0, [r4, #32]
   2e6c4:	sub	r0, r0, #1
   2e6c8:	str	r0, [r4, #32]
   2e6cc:	mov	r0, r4
   2e6d0:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e6d4:	ldr	r0, [r4, #20]
   2e6d8:	add	r1, r0, #1
   2e6dc:	str	r1, [r4, #20]
   2e6e0:	mov	r1, #93	; 0x5d
   2e6e4:	strb	r1, [r0]
   2e6e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e6ec <flatcc_json_printer_struct_vector_field@@Base>:
   2e6ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6f0:	add	fp, sp, #28
   2e6f4:	sub	sp, sp, #4
   2e6f8:	mov	r7, r3
   2e6fc:	mov	r5, r1
   2e700:	mov	r4, r0
   2e704:	mov	r0, r1
   2e708:	mov	r1, r2
   2e70c:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2e710:	cmp	r0, #0
   2e714:	beq	2e960 <flatcc_json_printer_struct_vector_field@@Base+0x274>
   2e718:	ldr	r8, [fp, #8]
   2e71c:	ldr	r1, [r5, #16]
   2e720:	add	r2, r1, #1
   2e724:	str	r2, [r5, #16]
   2e728:	cmp	r1, #0
   2e72c:	ldrne	r1, [r4, #20]
   2e730:	addne	r2, r1, #1
   2e734:	strne	r2, [r4, #20]
   2e738:	movne	r2, #44	; 0x2c
   2e73c:	strbne	r2, [r1]
   2e740:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2e744:	mov	r5, r0
   2e748:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e74c:	mov	r6, r0
   2e750:	mov	r0, r4
   2e754:	mov	r1, r7
   2e758:	mov	r2, r8
   2e75c:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2e760:	ldr	r0, [r4, #20]
   2e764:	ldr	r1, [r4, #32]
   2e768:	add	r1, r1, #1
   2e76c:	str	r1, [r4, #32]
   2e770:	add	r1, r0, #1
   2e774:	str	r1, [r4, #20]
   2e778:	mov	r1, #91	; 0x5b
   2e77c:	strb	r1, [r0]
   2e780:	cmp	r6, #0
   2e784:	beq	2e918 <flatcc_json_printer_struct_vector_field@@Base+0x22c>
   2e788:	add	r8, r5, #4
   2e78c:	ldrb	r0, [r4, #25]
   2e790:	cmp	r0, #0
   2e794:	beq	2e7b8 <flatcc_json_printer_struct_vector_field@@Base+0xcc>
   2e798:	ldr	r0, [r4, #20]
   2e79c:	add	r1, r0, #1
   2e7a0:	str	r1, [r4, #20]
   2e7a4:	mov	r1, #10
   2e7a8:	strb	r1, [r0]
   2e7ac:	mov	r0, r4
   2e7b0:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e7b4:	b	2e7c0 <flatcc_json_printer_struct_vector_field@@Base+0xd4>
   2e7b8:	mov	r0, r4
   2e7bc:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e7c0:	ldr	r0, [r4, #20]
   2e7c4:	ldr	r1, [r4, #32]
   2e7c8:	add	r1, r1, #1
   2e7cc:	str	r1, [r4, #32]
   2e7d0:	add	r1, r0, #1
   2e7d4:	str	r1, [r4, #20]
   2e7d8:	mov	r1, #123	; 0x7b
   2e7dc:	strb	r1, [r0]
   2e7e0:	mov	r0, r4
   2e7e4:	mov	r1, r8
   2e7e8:	ldr	r2, [fp, #16]
   2e7ec:	blx	r2
   2e7f0:	ldrb	r0, [r4, #25]
   2e7f4:	cmp	r0, #0
   2e7f8:	beq	2e824 <flatcc_json_printer_struct_vector_field@@Base+0x138>
   2e7fc:	ldr	r0, [r4, #20]
   2e800:	add	r1, r0, #1
   2e804:	str	r1, [r4, #20]
   2e808:	mov	r1, #10
   2e80c:	strb	r1, [r0]
   2e810:	ldr	r0, [r4, #32]
   2e814:	sub	r0, r0, #1
   2e818:	str	r0, [r4, #32]
   2e81c:	mov	r0, r4
   2e820:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e824:	ldr	r0, [r4, #20]
   2e828:	add	r1, r0, #1
   2e82c:	str	r1, [r4, #20]
   2e830:	mov	r1, #125	; 0x7d
   2e834:	strb	r1, [r0]
   2e838:	cmp	r6, #1
   2e83c:	beq	2e918 <flatcc_json_printer_struct_vector_field@@Base+0x22c>
   2e840:	ldr	r9, [fp, #12]
   2e844:	add	r0, r5, r9
   2e848:	add	r5, r0, #4
   2e84c:	rsb	r6, r6, #1
   2e850:	mov	r7, #44	; 0x2c
   2e854:	mov	sl, #123	; 0x7b
   2e858:	mov	r8, #10
   2e85c:	ldr	r0, [r4, #20]
   2e860:	add	r1, r0, #1
   2e864:	str	r1, [r4, #20]
   2e868:	strb	r7, [r0]
   2e86c:	ldrb	r0, [r4, #25]
   2e870:	cmp	r0, #0
   2e874:	beq	2e894 <flatcc_json_printer_struct_vector_field@@Base+0x1a8>
   2e878:	ldr	r0, [r4, #20]
   2e87c:	add	r1, r0, #1
   2e880:	str	r1, [r4, #20]
   2e884:	strb	r8, [r0]
   2e888:	mov	r0, r4
   2e88c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e890:	b	2e89c <flatcc_json_printer_struct_vector_field@@Base+0x1b0>
   2e894:	mov	r0, r4
   2e898:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2e89c:	ldr	r0, [r4, #20]
   2e8a0:	ldr	r1, [r4, #32]
   2e8a4:	add	r1, r1, #1
   2e8a8:	str	r1, [r4, #32]
   2e8ac:	add	r1, r0, #1
   2e8b0:	str	r1, [r4, #20]
   2e8b4:	strb	sl, [r0]
   2e8b8:	mov	r0, r4
   2e8bc:	mov	r1, r5
   2e8c0:	ldr	r2, [fp, #16]
   2e8c4:	blx	r2
   2e8c8:	ldrb	r0, [r4, #25]
   2e8cc:	cmp	r0, #0
   2e8d0:	beq	2e8f8 <flatcc_json_printer_struct_vector_field@@Base+0x20c>
   2e8d4:	ldr	r0, [r4, #20]
   2e8d8:	add	r1, r0, #1
   2e8dc:	str	r1, [r4, #20]
   2e8e0:	strb	r8, [r0]
   2e8e4:	ldr	r0, [r4, #32]
   2e8e8:	sub	r0, r0, #1
   2e8ec:	str	r0, [r4, #32]
   2e8f0:	mov	r0, r4
   2e8f4:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e8f8:	ldr	r0, [r4, #20]
   2e8fc:	add	r1, r0, #1
   2e900:	str	r1, [r4, #20]
   2e904:	mov	r1, #125	; 0x7d
   2e908:	strb	r1, [r0]
   2e90c:	add	r5, r5, r9
   2e910:	adds	r6, r6, #1
   2e914:	bne	2e85c <flatcc_json_printer_struct_vector_field@@Base+0x170>
   2e918:	ldrb	r0, [r4, #25]
   2e91c:	cmp	r0, #0
   2e920:	beq	2e94c <flatcc_json_printer_struct_vector_field@@Base+0x260>
   2e924:	ldr	r0, [r4, #20]
   2e928:	add	r1, r0, #1
   2e92c:	str	r1, [r4, #20]
   2e930:	mov	r1, #10
   2e934:	strb	r1, [r0]
   2e938:	ldr	r0, [r4, #32]
   2e93c:	sub	r0, r0, #1
   2e940:	str	r0, [r4, #32]
   2e944:	mov	r0, r4
   2e948:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2e94c:	ldr	r0, [r4, #20]
   2e950:	add	r1, r0, #1
   2e954:	str	r1, [r4, #20]
   2e958:	mov	r1, #93	; 0x5d
   2e95c:	strb	r1, [r0]
   2e960:	sub	sp, fp, #28
   2e964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e968 <flatcc_json_printer_string_vector_field@@Base>:
   2e968:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2e96c:	add	fp, sp, #24
   2e970:	mov	r7, r3
   2e974:	mov	r5, r1
   2e978:	mov	r4, r0
   2e97c:	mov	r0, r1
   2e980:	mov	r1, r2
   2e984:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2e988:	cmp	r0, #0
   2e98c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2e990:	ldr	r8, [fp, #8]
   2e994:	ldr	r1, [r5, #16]
   2e998:	add	r2, r1, #1
   2e99c:	str	r2, [r5, #16]
   2e9a0:	cmp	r1, #0
   2e9a4:	ldrne	r1, [r4, #20]
   2e9a8:	addne	r2, r1, #1
   2e9ac:	strne	r2, [r4, #20]
   2e9b0:	movne	r2, #44	; 0x2c
   2e9b4:	strbne	r2, [r1]
   2e9b8:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2e9bc:	mov	r5, r0
   2e9c0:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2e9c4:	mov	r6, r0
   2e9c8:	mov	r0, r4
   2e9cc:	mov	r1, r7
   2e9d0:	mov	r2, r8
   2e9d4:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2e9d8:	ldr	r0, [r4, #20]
   2e9dc:	ldr	r1, [r4, #32]
   2e9e0:	add	r1, r1, #1
   2e9e4:	str	r1, [r4, #32]
   2e9e8:	add	r1, r0, #1
   2e9ec:	str	r1, [r4, #20]
   2e9f0:	mov	r1, #91	; 0x5b
   2e9f4:	strb	r1, [r0]
   2e9f8:	cmp	r6, #0
   2e9fc:	beq	2eac4 <flatcc_json_printer_string_vector_field@@Base+0x15c>
   2ea00:	add	r7, r5, #4
   2ea04:	ldrb	r0, [r4, #25]
   2ea08:	cmp	r0, #0
   2ea0c:	beq	2ea30 <flatcc_json_printer_string_vector_field@@Base+0xc8>
   2ea10:	ldr	r0, [r4, #20]
   2ea14:	add	r1, r0, #1
   2ea18:	str	r1, [r4, #20]
   2ea1c:	mov	r1, #10
   2ea20:	strb	r1, [r0]
   2ea24:	mov	r0, r4
   2ea28:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2ea2c:	b	2ea38 <flatcc_json_printer_string_vector_field@@Base+0xd0>
   2ea30:	mov	r0, r4
   2ea34:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2ea38:	mov	r0, r7
   2ea3c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2ea40:	mov	r1, r0
   2ea44:	mov	r0, r4
   2ea48:	bl	2a494 <flatcc_json_printer_string_field@@Base+0x148>
   2ea4c:	cmp	r6, #1
   2ea50:	beq	2eac4 <flatcc_json_printer_string_vector_field@@Base+0x15c>
   2ea54:	add	r5, r5, #8
   2ea58:	rsb	r6, r6, #1
   2ea5c:	mov	r7, #44	; 0x2c
   2ea60:	mov	r8, #10
   2ea64:	ldr	r0, [r4, #20]
   2ea68:	add	r1, r0, #1
   2ea6c:	str	r1, [r4, #20]
   2ea70:	strb	r7, [r0]
   2ea74:	ldrb	r0, [r4, #25]
   2ea78:	cmp	r0, #0
   2ea7c:	beq	2ea9c <flatcc_json_printer_string_vector_field@@Base+0x134>
   2ea80:	ldr	r0, [r4, #20]
   2ea84:	add	r1, r0, #1
   2ea88:	str	r1, [r4, #20]
   2ea8c:	strb	r8, [r0]
   2ea90:	mov	r0, r4
   2ea94:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2ea98:	b	2eaa4 <flatcc_json_printer_string_vector_field@@Base+0x13c>
   2ea9c:	mov	r0, r4
   2eaa0:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2eaa4:	mov	r0, r5
   2eaa8:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2eaac:	mov	r1, r0
   2eab0:	mov	r0, r4
   2eab4:	bl	2a494 <flatcc_json_printer_string_field@@Base+0x148>
   2eab8:	add	r5, r5, #4
   2eabc:	adds	r6, r6, #1
   2eac0:	bne	2ea64 <flatcc_json_printer_string_vector_field@@Base+0xfc>
   2eac4:	ldrb	r0, [r4, #25]
   2eac8:	cmp	r0, #0
   2eacc:	beq	2eaf8 <flatcc_json_printer_string_vector_field@@Base+0x190>
   2ead0:	ldr	r0, [r4, #20]
   2ead4:	add	r1, r0, #1
   2ead8:	str	r1, [r4, #20]
   2eadc:	mov	r1, #10
   2eae0:	strb	r1, [r0]
   2eae4:	ldr	r0, [r4, #32]
   2eae8:	sub	r0, r0, #1
   2eaec:	str	r0, [r4, #32]
   2eaf0:	mov	r0, r4
   2eaf4:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2eaf8:	ldr	r0, [r4, #20]
   2eafc:	add	r1, r0, #1
   2eb00:	str	r1, [r4, #20]
   2eb04:	mov	r1, #93	; 0x5d
   2eb08:	strb	r1, [r0]
   2eb0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002eb10 <flatcc_json_printer_table_vector_field@@Base>:
   2eb10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eb14:	add	fp, sp, #28
   2eb18:	sub	sp, sp, #4
   2eb1c:	mov	r6, r3
   2eb20:	mov	r5, r1
   2eb24:	mov	r4, r0
   2eb28:	mov	r0, r1
   2eb2c:	mov	r1, r2
   2eb30:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2eb34:	cmp	r0, #0
   2eb38:	beq	2ec60 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2eb3c:	ldr	r7, [fp, #8]
   2eb40:	ldr	r1, [r5, #16]
   2eb44:	add	r2, r1, #1
   2eb48:	str	r2, [r5, #16]
   2eb4c:	cmp	r1, #0
   2eb50:	ldrne	r1, [r4, #20]
   2eb54:	addne	r2, r1, #1
   2eb58:	strne	r2, [r4, #20]
   2eb5c:	movne	r2, #44	; 0x2c
   2eb60:	strbne	r2, [r1]
   2eb64:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2eb68:	mov	r8, r0
   2eb6c:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2eb70:	mov	r9, r0
   2eb74:	mov	r0, r4
   2eb78:	mov	r1, r6
   2eb7c:	mov	r2, r7
   2eb80:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2eb84:	ldr	r0, [r4, #20]
   2eb88:	ldr	r1, [r4, #32]
   2eb8c:	add	r1, r1, #1
   2eb90:	str	r1, [r4, #32]
   2eb94:	add	r1, r0, #1
   2eb98:	str	r1, [r4, #20]
   2eb9c:	mov	r1, #91	; 0x5b
   2eba0:	strb	r1, [r0]
   2eba4:	cmp	r9, #0
   2eba8:	beq	2ec18 <flatcc_json_printer_table_vector_field@@Base+0x108>
   2ebac:	ldr	sl, [fp, #12]
   2ebb0:	add	r0, r8, #4
   2ebb4:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2ebb8:	mov	r1, r0
   2ebbc:	ldr	r2, [r5, #12]
   2ebc0:	mov	r0, r4
   2ebc4:	mov	r3, sl
   2ebc8:	bl	2ec68 <flatcc_json_printer_table_vector_field@@Base+0x158>
   2ebcc:	cmp	r9, #1
   2ebd0:	beq	2ec18 <flatcc_json_printer_table_vector_field@@Base+0x108>
   2ebd4:	add	r7, r8, #8
   2ebd8:	rsb	r6, r9, #1
   2ebdc:	mov	r8, #44	; 0x2c
   2ebe0:	ldr	r0, [r4, #20]
   2ebe4:	add	r1, r0, #1
   2ebe8:	str	r1, [r4, #20]
   2ebec:	strb	r8, [r0]
   2ebf0:	mov	r0, r7
   2ebf4:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2ebf8:	mov	r1, r0
   2ebfc:	ldr	r2, [r5, #12]
   2ec00:	mov	r0, r4
   2ec04:	mov	r3, sl
   2ec08:	bl	2ec68 <flatcc_json_printer_table_vector_field@@Base+0x158>
   2ec0c:	add	r7, r7, #4
   2ec10:	adds	r6, r6, #1
   2ec14:	bne	2ebe0 <flatcc_json_printer_table_vector_field@@Base+0xd0>
   2ec18:	ldrb	r0, [r4, #25]
   2ec1c:	cmp	r0, #0
   2ec20:	beq	2ec4c <flatcc_json_printer_table_vector_field@@Base+0x13c>
   2ec24:	ldr	r0, [r4, #20]
   2ec28:	add	r1, r0, #1
   2ec2c:	str	r1, [r4, #20]
   2ec30:	mov	r1, #10
   2ec34:	strb	r1, [r0]
   2ec38:	ldr	r0, [r4, #32]
   2ec3c:	sub	r0, r0, #1
   2ec40:	str	r0, [r4, #32]
   2ec44:	mov	r0, r4
   2ec48:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2ec4c:	ldr	r0, [r4, #20]
   2ec50:	add	r1, r0, #1
   2ec54:	str	r1, [r4, #20]
   2ec58:	mov	r1, #93	; 0x5d
   2ec5c:	strb	r1, [r0]
   2ec60:	sub	sp, fp, #28
   2ec64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec68:	push	{r4, r5, r6, sl, fp, lr}
   2ec6c:	add	fp, sp, #16
   2ec70:	sub	sp, sp, #24
   2ec74:	mov	r4, r0
   2ec78:	subs	r0, r2, #1
   2ec7c:	beq	2ed2c <flatcc_json_printer_table_vector_field@@Base+0x21c>
   2ec80:	mov	r5, r3
   2ec84:	mov	r6, r1
   2ec88:	ldr	r1, [r4, #20]
   2ec8c:	ldr	r2, [r4, #32]
   2ec90:	add	r2, r2, #1
   2ec94:	str	r2, [r4, #32]
   2ec98:	add	r2, r1, #1
   2ec9c:	str	r2, [r4, #20]
   2eca0:	mov	r2, #123	; 0x7b
   2eca4:	strb	r2, [r1]
   2eca8:	str	r0, [sp, #16]
   2ecac:	mov	r0, #0
   2ecb0:	str	r0, [sp, #20]
   2ecb4:	str	r6, [sp, #4]
   2ecb8:	mov	r0, r6
   2ecbc:	bl	30bec <flatcc_json_printer_clear@@Base+0xed0>
   2ecc0:	sub	r0, r6, r0
   2ecc4:	str	r0, [sp, #8]
   2ecc8:	bl	30a08 <flatcc_json_printer_clear@@Base+0xcec>
   2eccc:	str	r0, [sp, #12]
   2ecd0:	add	r1, sp, #4
   2ecd4:	mov	r0, r4
   2ecd8:	blx	r5
   2ecdc:	ldrb	r0, [r4, #25]
   2ece0:	cmp	r0, #0
   2ece4:	beq	2ed10 <flatcc_json_printer_table_vector_field@@Base+0x200>
   2ece8:	ldr	r0, [r4, #20]
   2ecec:	add	r1, r0, #1
   2ecf0:	str	r1, [r4, #20]
   2ecf4:	mov	r1, #10
   2ecf8:	strb	r1, [r0]
   2ecfc:	ldr	r0, [r4, #32]
   2ed00:	sub	r0, r0, #1
   2ed04:	str	r0, [r4, #32]
   2ed08:	mov	r0, r4
   2ed0c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2ed10:	ldr	r0, [r4, #20]
   2ed14:	add	r1, r0, #1
   2ed18:	str	r1, [r4, #20]
   2ed1c:	mov	r1, #125	; 0x7d
   2ed20:	strb	r1, [r0]
   2ed24:	sub	sp, fp, #16
   2ed28:	pop	{r4, r5, r6, sl, fp, pc}
   2ed2c:	mov	r0, r4
   2ed30:	mov	r1, #2
   2ed34:	bl	2f03c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2ed38:	sub	sp, fp, #16
   2ed3c:	pop	{r4, r5, r6, sl, fp, pc}

0002ed40 <flatcc_json_printer_union_vector_field@@Base>:
   2ed40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed44:	add	fp, sp, #28
   2ed48:	sub	sp, sp, #132	; 0x84
   2ed4c:	mov	r9, r3
   2ed50:	mov	r7, r2
   2ed54:	mov	r5, r1
   2ed58:	mov	r8, r0
   2ed5c:	sub	r6, r2, #1
   2ed60:	mov	r0, r1
   2ed64:	mov	r1, r6
   2ed68:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2ed6c:	mov	r4, r0
   2ed70:	mov	r0, r5
   2ed74:	mov	r1, r7
   2ed78:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2ed7c:	mov	r7, r0
   2ed80:	ldr	r0, [r5, #12]
   2ed84:	str	r0, [sp, #16]
   2ed88:	ldr	r0, [fp, #8]
   2ed8c:	cmp	r0, #101	; 0x65
   2ed90:	bge	2f010 <flatcc_json_printer_union_vector_field@@Base+0x2d0>
   2ed94:	add	sl, sp, #24
   2ed98:	mov	r0, sl
   2ed9c:	str	r9, [sp, #8]
   2eda0:	mov	r1, r9
   2eda4:	ldr	r2, [fp, #8]
   2eda8:	bl	14e60 <memcpy@plt>
   2edac:	ldr	r2, [fp, #8]
   2edb0:	movw	r0, #29791	; 0x745f
   2edb4:	movt	r0, #28793	; 0x7079
   2edb8:	str	r0, [sl, r2]
   2edbc:	add	r0, sl, r2
   2edc0:	mov	r1, #101	; 0x65
   2edc4:	strb	r1, [r0, #4]
   2edc8:	cmp	r4, #0
   2edcc:	cmpne	r7, #0
   2edd0:	bne	2eddc <flatcc_json_printer_union_vector_field@@Base+0x9c>
   2edd4:	sub	sp, fp, #28
   2edd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eddc:	mov	r9, r4
   2ede0:	ldr	r0, [fp, #12]
   2ede4:	add	r1, r2, #5
   2ede8:	str	r1, [sp]
   2edec:	str	r0, [sp, #4]
   2edf0:	add	r3, sp, #24
   2edf4:	mov	r0, r8
   2edf8:	mov	r1, r5
   2edfc:	mov	r2, r6
   2ee00:	bl	2d4e4 <flatcc_json_printer_utype_enum_vector_field@@Base>
   2ee04:	ldr	r0, [r5, #16]
   2ee08:	add	r1, r0, #1
   2ee0c:	str	r1, [r5, #16]
   2ee10:	cmp	r0, #0
   2ee14:	ldrne	r0, [r8, #20]
   2ee18:	addne	r1, r0, #1
   2ee1c:	strne	r1, [r8, #20]
   2ee20:	movne	r1, #44	; 0x2c
   2ee24:	strbne	r1, [r0]
   2ee28:	mov	r0, r7
   2ee2c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2ee30:	mov	r6, r0
   2ee34:	mov	r0, r9
   2ee38:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2ee3c:	mov	r5, r0
   2ee40:	mov	r0, r6
   2ee44:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2ee48:	mov	r4, r0
   2ee4c:	mov	r0, r8
   2ee50:	ldr	r1, [sp, #8]
   2ee54:	ldr	r2, [fp, #8]
   2ee58:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2ee5c:	mov	r7, r8
   2ee60:	ldr	r0, [r7, #20]!
   2ee64:	add	r1, r0, #1
   2ee68:	str	r1, [r7]
   2ee6c:	ldr	r1, [r7, #12]
   2ee70:	add	r1, r1, #1
   2ee74:	str	r1, [r7, #12]
   2ee78:	mov	r1, #91	; 0x5b
   2ee7c:	strb	r1, [r0]
   2ee80:	cmp	r4, #0
   2ee84:	beq	2efc0 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2ee88:	ldr	sl, [fp, #16]
   2ee8c:	add	r0, r5, #4
   2ee90:	bl	2c1ec <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2ee94:	cmp	r0, #0
   2ee98:	beq	2eec4 <flatcc_json_printer_union_vector_field@@Base+0x184>
   2ee9c:	add	r1, r6, #4
   2eea0:	str	r1, [sp, #12]
   2eea4:	strb	r0, [sp, #20]
   2eea8:	add	r1, sp, #12
   2eeac:	mov	r0, r8
   2eeb0:	mov	r9, sl
   2eeb4:	blx	sl
   2eeb8:	cmp	r4, #1
   2eebc:	bne	2ef1c <flatcc_json_printer_union_vector_field@@Base+0x1dc>
   2eec0:	b	2efc0 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2eec4:	mov	r9, sl
   2eec8:	ldr	r0, [r7]
   2eecc:	add	r1, r0, #1
   2eed0:	str	r1, [r7]
   2eed4:	mov	r1, #110	; 0x6e
   2eed8:	strb	r1, [r0]
   2eedc:	ldr	r0, [r7]
   2eee0:	add	r1, r0, #1
   2eee4:	str	r1, [r7]
   2eee8:	mov	r1, #117	; 0x75
   2eeec:	strb	r1, [r0]
   2eef0:	ldr	r0, [r7]
   2eef4:	add	r1, r0, #1
   2eef8:	str	r1, [r7]
   2eefc:	mov	r1, #108	; 0x6c
   2ef00:	strb	r1, [r0]
   2ef04:	ldr	r0, [r7]
   2ef08:	add	r2, r0, #1
   2ef0c:	str	r2, [r7]
   2ef10:	strb	r1, [r0]
   2ef14:	cmp	r4, #1
   2ef18:	beq	2efc0 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2ef1c:	add	r6, r6, #8
   2ef20:	add	r5, r5, #5
   2ef24:	rsb	r4, r4, #1
   2ef28:	mov	sl, #44	; 0x2c
   2ef2c:	mov	r0, r5
   2ef30:	bl	2c1ec <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2ef34:	ldr	r1, [r7]
   2ef38:	add	r2, r1, #1
   2ef3c:	str	r2, [r7]
   2ef40:	strb	sl, [r1]
   2ef44:	cmp	r0, #0
   2ef48:	beq	2ef64 <flatcc_json_printer_union_vector_field@@Base+0x224>
   2ef4c:	str	r6, [sp, #12]
   2ef50:	strb	r0, [sp, #20]
   2ef54:	mov	r0, r8
   2ef58:	add	r1, sp, #12
   2ef5c:	blx	r9
   2ef60:	b	2efb0 <flatcc_json_printer_union_vector_field@@Base+0x270>
   2ef64:	ldr	r0, [r7]
   2ef68:	add	r1, r0, #1
   2ef6c:	str	r1, [r7]
   2ef70:	mov	r1, #110	; 0x6e
   2ef74:	strb	r1, [r0]
   2ef78:	ldr	r0, [r7]
   2ef7c:	add	r1, r0, #1
   2ef80:	str	r1, [r7]
   2ef84:	mov	r1, #117	; 0x75
   2ef88:	strb	r1, [r0]
   2ef8c:	ldr	r0, [r7]
   2ef90:	add	r1, r0, #1
   2ef94:	str	r1, [r7]
   2ef98:	mov	r2, #108	; 0x6c
   2ef9c:	strb	r2, [r0]
   2efa0:	ldr	r0, [r7]
   2efa4:	add	r1, r0, #1
   2efa8:	str	r1, [r7]
   2efac:	strb	r2, [r0]
   2efb0:	add	r6, r6, #4
   2efb4:	add	r5, r5, #1
   2efb8:	adds	r4, r4, #1
   2efbc:	bne	2ef2c <flatcc_json_printer_union_vector_field@@Base+0x1ec>
   2efc0:	ldrb	r0, [r8, #25]
   2efc4:	cmp	r0, #0
   2efc8:	beq	2eff4 <flatcc_json_printer_union_vector_field@@Base+0x2b4>
   2efcc:	ldr	r0, [r8, #20]
   2efd0:	add	r1, r0, #1
   2efd4:	str	r1, [r8, #20]
   2efd8:	mov	r1, #10
   2efdc:	strb	r1, [r0]
   2efe0:	ldr	r0, [r8, #32]
   2efe4:	sub	r0, r0, #1
   2efe8:	str	r0, [r8, #32]
   2efec:	mov	r0, r8
   2eff0:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2eff4:	ldr	r0, [r7]
   2eff8:	add	r1, r0, #1
   2effc:	str	r1, [r7]
   2f000:	mov	r1, #93	; 0x5d
   2f004:	strb	r1, [r0]
   2f008:	sub	sp, fp, #28
   2f00c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f010:	mov	r0, r8
   2f014:	mov	r1, #1
   2f018:	bl	2f03c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f01c:	movw	r0, #28048	; 0x6d90
   2f020:	movt	r0, #3
   2f024:	movw	r1, #28075	; 0x6dab
   2f028:	movt	r1, #3
   2f02c:	movw	r3, #28150	; 0x6df6
   2f030:	movt	r3, #3
   2f034:	movw	r2, #843	; 0x34b
   2f038:	bl	14f44 <__assert_fail@plt>
   2f03c:	ldr	r2, [r0, #36]	; 0x24
   2f040:	cmp	r2, #0
   2f044:	streq	r1, [r0, #36]	; 0x24
   2f048:	bx	lr

0002f04c <flatcc_json_printer_table_field@@Base>:
   2f04c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f050:	add	fp, sp, #24
   2f054:	mov	r6, r3
   2f058:	mov	r5, r1
   2f05c:	mov	r4, r0
   2f060:	mov	r0, r1
   2f064:	mov	r1, r2
   2f068:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2f06c:	cmp	r0, #0
   2f070:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2f074:	mov	r7, r0
   2f078:	ldr	r8, [fp, #12]
   2f07c:	ldr	r2, [fp, #8]
   2f080:	ldr	r0, [r5, #16]
   2f084:	add	r1, r0, #1
   2f088:	str	r1, [r5, #16]
   2f08c:	cmp	r0, #0
   2f090:	ldrne	r0, [r4, #20]
   2f094:	addne	r1, r0, #1
   2f098:	strne	r1, [r4, #20]
   2f09c:	movne	r1, #44	; 0x2c
   2f0a0:	strbne	r1, [r0]
   2f0a4:	mov	r0, r4
   2f0a8:	mov	r1, r6
   2f0ac:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2f0b0:	mov	r0, r7
   2f0b4:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2f0b8:	mov	r1, r0
   2f0bc:	ldr	r2, [r5, #12]
   2f0c0:	mov	r0, r4
   2f0c4:	mov	r3, r8
   2f0c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f0cc:	b	2ec68 <flatcc_json_printer_table_vector_field@@Base+0x158>

0002f0d0 <flatcc_json_printer_union_field@@Base>:
   2f0d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f0d4:	add	fp, sp, #28
   2f0d8:	sub	sp, sp, #12
   2f0dc:	mov	r8, r3
   2f0e0:	mov	r7, r2
   2f0e4:	mov	r5, r1
   2f0e8:	mov	r4, r0
   2f0ec:	sub	r1, r2, #1
   2f0f0:	mov	r0, r5
   2f0f4:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2f0f8:	mov	r6, r0
   2f0fc:	mov	r0, r5
   2f100:	mov	r1, r7
   2f104:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2f108:	cmp	r6, #0
   2f10c:	movne	r7, r0
   2f110:	cmpne	r0, #0
   2f114:	bne	2f120 <flatcc_json_printer_union_field@@Base+0x50>
   2f118:	sub	sp, fp, #28
   2f11c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f120:	mov	r0, r6
   2f124:	bl	2c1ec <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f128:	mov	r6, r0
   2f12c:	ldr	r0, [r5, #16]
   2f130:	add	r1, r0, #1
   2f134:	str	r1, [r5, #16]
   2f138:	cmp	r0, #0
   2f13c:	ldrne	r0, [r4, #20]
   2f140:	addne	r1, r0, #1
   2f144:	strne	r1, [r4, #20]
   2f148:	movne	r1, #44	; 0x2c
   2f14c:	strbne	r1, [r0]
   2f150:	ldr	r9, [fp, #8]
   2f154:	ldrb	r0, [r4, #25]
   2f158:	cmp	r0, #0
   2f15c:	beq	2f180 <flatcc_json_printer_union_field@@Base+0xb0>
   2f160:	ldr	r0, [r4, #20]
   2f164:	add	r1, r0, #1
   2f168:	str	r1, [r4, #20]
   2f16c:	mov	r1, #10
   2f170:	strb	r1, [r0]
   2f174:	mov	r0, r4
   2f178:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2f17c:	b	2f188 <flatcc_json_printer_union_field@@Base+0xb8>
   2f180:	mov	r0, r4
   2f184:	bl	29510 <flatcc_json_printer_nl@@Base+0x18>
   2f188:	ldr	r0, [r4, #20]
   2f18c:	mov	r1, #34	; 0x22
   2f190:	strb	r1, [r0]
   2f194:	ldrb	r1, [r4, #26]
   2f198:	ldr	r2, [r4, #16]
   2f19c:	ldr	r0, [r4, #20]
   2f1a0:	cmp	r1, #0
   2f1a4:	addeq	r0, r0, #1
   2f1a8:	str	r0, [r4, #20]
   2f1ac:	add	r1, r0, r9
   2f1b0:	cmp	r1, r2
   2f1b4:	bcs	2f1d4 <flatcc_json_printer_union_field@@Base+0x104>
   2f1b8:	mov	r1, r8
   2f1bc:	mov	r2, r9
   2f1c0:	bl	14e60 <memcpy@plt>
   2f1c4:	ldr	r0, [r4, #20]
   2f1c8:	add	r0, r0, r9
   2f1cc:	str	r0, [r4, #20]
   2f1d0:	b	2f1e4 <flatcc_json_printer_union_field@@Base+0x114>
   2f1d4:	mov	r0, r4
   2f1d8:	mov	r1, r8
   2f1dc:	mov	r2, r9
   2f1e0:	bl	294ac <flatcc_json_printer_write@@Base+0x4>
   2f1e4:	movw	r1, #28352	; 0x6ec0
   2f1e8:	movt	r1, #3
   2f1ec:	mov	r0, r4
   2f1f0:	mov	r2, #5
   2f1f4:	bl	294ac <flatcc_json_printer_write@@Base+0x4>
   2f1f8:	ldr	r0, [r4, #20]
   2f1fc:	mov	r1, #34	; 0x22
   2f200:	strb	r1, [r0]
   2f204:	ldrb	r0, [r4, #26]
   2f208:	ldr	r1, [r4, #20]
   2f20c:	cmp	r0, #0
   2f210:	addeq	r1, r1, #1
   2f214:	add	r0, r1, #1
   2f218:	str	r0, [r4, #20]
   2f21c:	mov	r0, #58	; 0x3a
   2f220:	strb	r0, [r1]
   2f224:	ldr	r0, [r4, #20]
   2f228:	mov	r1, #32
   2f22c:	strb	r1, [r0]
   2f230:	ldrb	r0, [r4, #25]
   2f234:	ldr	r1, [r4, #20]
   2f238:	cmp	r0, #0
   2f23c:	addne	r1, r1, #1
   2f240:	str	r1, [r4, #20]
   2f244:	ldrb	r0, [r4, #27]
   2f248:	cmp	r0, #0
   2f24c:	beq	2f270 <flatcc_json_printer_union_field@@Base+0x1a0>
   2f250:	mov	r0, r6
   2f254:	bl	295e0 <flatcc_json_printer_uint8@@Base+0x2c>
   2f258:	ldr	r1, [r4, #20]
   2f25c:	add	r0, r1, r0
   2f260:	str	r0, [r4, #20]
   2f264:	cmp	r6, #0
   2f268:	bne	2f288 <flatcc_json_printer_union_field@@Base+0x1b8>
   2f26c:	b	2f118 <flatcc_json_printer_union_field@@Base+0x48>
   2f270:	ldr	r2, [fp, #12]
   2f274:	mov	r0, r4
   2f278:	mov	r1, r6
   2f27c:	blx	r2
   2f280:	cmp	r6, #0
   2f284:	beq	2f118 <flatcc_json_printer_union_field@@Base+0x48>
   2f288:	ldr	sl, [fp, #16]
   2f28c:	ldr	r0, [r4, #20]
   2f290:	add	r1, r0, #1
   2f294:	str	r1, [r4, #20]
   2f298:	mov	r1, #44	; 0x2c
   2f29c:	strb	r1, [r0]
   2f2a0:	mov	r0, r4
   2f2a4:	mov	r1, r8
   2f2a8:	mov	r2, r9
   2f2ac:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2f2b0:	ldr	r0, [r5, #12]
   2f2b4:	strb	r6, [sp, #8]
   2f2b8:	str	r7, [sp]
   2f2bc:	str	r0, [sp, #4]
   2f2c0:	mov	r1, sp
   2f2c4:	mov	r0, r4
   2f2c8:	blx	sl
   2f2cc:	sub	sp, fp, #28
   2f2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f2d4 <flatcc_json_printer_union_table@@Base>:
   2f2d4:	push	{r4, r5, r6, sl, fp, lr}
   2f2d8:	add	fp, sp, #16
   2f2dc:	mov	r4, r2
   2f2e0:	mov	r5, r1
   2f2e4:	mov	r6, r0
   2f2e8:	ldr	r0, [r1]
   2f2ec:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2f2f0:	mov	r1, r0
   2f2f4:	ldr	r2, [r5, #4]
   2f2f8:	mov	r0, r6
   2f2fc:	mov	r3, r4
   2f300:	pop	{r4, r5, r6, sl, fp, lr}
   2f304:	b	2ec68 <flatcc_json_printer_table_vector_field@@Base+0x158>

0002f308 <flatcc_json_printer_union_struct@@Base>:
   2f308:	push	{r4, r5, fp, lr}
   2f30c:	add	fp, sp, #8
   2f310:	mov	r5, r2
   2f314:	mov	r4, r0
   2f318:	ldr	r0, [r0, #20]
   2f31c:	ldr	r2, [r4, #32]
   2f320:	add	r2, r2, #1
   2f324:	str	r2, [r4, #32]
   2f328:	add	r2, r0, #1
   2f32c:	str	r2, [r4, #20]
   2f330:	mov	r2, #123	; 0x7b
   2f334:	strb	r2, [r0]
   2f338:	ldr	r0, [r1]
   2f33c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2f340:	mov	r1, r0
   2f344:	mov	r0, r4
   2f348:	blx	r5
   2f34c:	ldrb	r0, [r4, #25]
   2f350:	cmp	r0, #0
   2f354:	beq	2f380 <flatcc_json_printer_union_struct@@Base+0x78>
   2f358:	ldr	r0, [r4, #20]
   2f35c:	add	r1, r0, #1
   2f360:	str	r1, [r4, #20]
   2f364:	mov	r1, #10
   2f368:	strb	r1, [r0]
   2f36c:	ldr	r0, [r4, #32]
   2f370:	sub	r0, r0, #1
   2f374:	str	r0, [r4, #32]
   2f378:	mov	r0, r4
   2f37c:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2f380:	ldr	r0, [r4, #20]
   2f384:	add	r1, r0, #1
   2f388:	str	r1, [r4, #20]
   2f38c:	mov	r1, #125	; 0x7d
   2f390:	strb	r1, [r0]
   2f394:	pop	{r4, r5, fp, pc}

0002f398 <flatcc_json_printer_union_string@@Base>:
   2f398:	push	{r4, sl, fp, lr}
   2f39c:	add	fp, sp, #8
   2f3a0:	mov	r4, r0
   2f3a4:	ldr	r0, [r1]
   2f3a8:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2f3ac:	mov	r1, r0
   2f3b0:	mov	r0, r4
   2f3b4:	pop	{r4, sl, fp, lr}
   2f3b8:	b	2a494 <flatcc_json_printer_string_field@@Base+0x148>

0002f3bc <flatcc_json_printer_embedded_struct_field@@Base>:
   2f3bc:	push	{r4, r5, r6, r7, fp, lr}
   2f3c0:	add	fp, sp, #16
   2f3c4:	mov	r5, r3
   2f3c8:	mov	r6, r2
   2f3cc:	mov	r3, r1
   2f3d0:	mov	r4, r0
   2f3d4:	add	r7, fp, #8
   2f3d8:	ldm	r7, {r1, r2, r7}
   2f3dc:	cmp	r3, #0
   2f3e0:	ldrne	r0, [r4, #20]
   2f3e4:	addne	r3, r0, #1
   2f3e8:	strne	r3, [r4, #20]
   2f3ec:	movne	r3, #44	; 0x2c
   2f3f0:	strbne	r3, [r0]
   2f3f4:	mov	r0, r4
   2f3f8:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2f3fc:	ldr	r0, [r4, #20]
   2f400:	ldr	r1, [r4, #32]
   2f404:	add	r1, r1, #1
   2f408:	str	r1, [r4, #32]
   2f40c:	add	r1, r0, #1
   2f410:	str	r1, [r4, #20]
   2f414:	mov	r1, #123	; 0x7b
   2f418:	strb	r1, [r0]
   2f41c:	add	r1, r6, r5
   2f420:	mov	r0, r4
   2f424:	blx	r7
   2f428:	ldrb	r0, [r4, #25]
   2f42c:	cmp	r0, #0
   2f430:	beq	2f45c <flatcc_json_printer_embedded_struct_field@@Base+0xa0>
   2f434:	ldr	r0, [r4, #20]
   2f438:	add	r1, r0, #1
   2f43c:	str	r1, [r4, #20]
   2f440:	mov	r1, #10
   2f444:	strb	r1, [r0]
   2f448:	ldr	r0, [r4, #32]
   2f44c:	sub	r0, r0, #1
   2f450:	str	r0, [r4, #32]
   2f454:	mov	r0, r4
   2f458:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2f45c:	ldr	r0, [r4, #20]
   2f460:	add	r1, r0, #1
   2f464:	str	r1, [r4, #20]
   2f468:	mov	r1, #125	; 0x7d
   2f46c:	strb	r1, [r0]
   2f470:	pop	{r4, r5, r6, r7, fp, pc}

0002f474 <flatcc_json_printer_struct_field@@Base>:
   2f474:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f478:	add	fp, sp, #24
   2f47c:	mov	r6, r3
   2f480:	mov	r7, r1
   2f484:	mov	r4, r0
   2f488:	mov	r0, r1
   2f48c:	mov	r1, r2
   2f490:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2f494:	cmp	r0, #0
   2f498:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   2f49c:	mov	r5, r0
   2f4a0:	ldr	r8, [fp, #12]
   2f4a4:	ldr	r2, [fp, #8]
   2f4a8:	ldr	r0, [r7, #16]
   2f4ac:	add	r1, r0, #1
   2f4b0:	str	r1, [r7, #16]
   2f4b4:	cmp	r0, #0
   2f4b8:	ldrne	r0, [r4, #20]
   2f4bc:	addne	r1, r0, #1
   2f4c0:	strne	r1, [r4, #20]
   2f4c4:	movne	r1, #44	; 0x2c
   2f4c8:	strbne	r1, [r0]
   2f4cc:	mov	r0, r4
   2f4d0:	mov	r1, r6
   2f4d4:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2f4d8:	ldr	r0, [r4, #20]
   2f4dc:	ldr	r1, [r4, #32]
   2f4e0:	add	r1, r1, #1
   2f4e4:	str	r1, [r4, #32]
   2f4e8:	add	r1, r0, #1
   2f4ec:	str	r1, [r4, #20]
   2f4f0:	mov	r1, #123	; 0x7b
   2f4f4:	strb	r1, [r0]
   2f4f8:	mov	r0, r4
   2f4fc:	mov	r1, r5
   2f500:	blx	r8
   2f504:	ldrb	r0, [r4, #25]
   2f508:	cmp	r0, #0
   2f50c:	beq	2f538 <flatcc_json_printer_struct_field@@Base+0xc4>
   2f510:	ldr	r0, [r4, #20]
   2f514:	add	r1, r0, #1
   2f518:	str	r1, [r4, #20]
   2f51c:	mov	r1, #10
   2f520:	strb	r1, [r0]
   2f524:	ldr	r0, [r4, #32]
   2f528:	sub	r0, r0, #1
   2f52c:	str	r0, [r4, #32]
   2f530:	mov	r0, r4
   2f534:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2f538:	ldr	r0, [r4, #20]
   2f53c:	add	r1, r0, #1
   2f540:	str	r1, [r4, #20]
   2f544:	mov	r1, #125	; 0x7d
   2f548:	strb	r1, [r0]
   2f54c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002f550 <flatcc_json_printer_struct_as_root@@Base>:
   2f550:	push	{r4, r5, fp, lr}
   2f554:	add	fp, sp, #8
   2f558:	mov	r5, r1
   2f55c:	mov	r4, r0
   2f560:	bl	2f650 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2f564:	ldr	r0, [r4, #20]
   2f568:	ldr	r1, [r4, #32]
   2f56c:	add	r1, r1, #1
   2f570:	str	r1, [r4, #32]
   2f574:	add	r1, r0, #1
   2f578:	str	r1, [r4, #20]
   2f57c:	mov	r1, #123	; 0x7b
   2f580:	strb	r1, [r0]
   2f584:	mov	r0, r5
   2f588:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2f58c:	mov	r1, r0
   2f590:	ldr	r2, [fp, #8]
   2f594:	mov	r0, r4
   2f598:	blx	r2
   2f59c:	ldrb	r0, [r4, #25]
   2f5a0:	cmp	r0, #0
   2f5a4:	beq	2f5d0 <flatcc_json_printer_struct_as_root@@Base+0x80>
   2f5a8:	ldr	r0, [r4, #20]
   2f5ac:	add	r1, r0, #1
   2f5b0:	str	r1, [r4, #20]
   2f5b4:	mov	r1, #10
   2f5b8:	strb	r1, [r0]
   2f5bc:	ldr	r0, [r4, #32]
   2f5c0:	sub	r0, r0, #1
   2f5c4:	str	r0, [r4, #32]
   2f5c8:	mov	r0, r4
   2f5cc:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2f5d0:	ldr	r0, [r4, #20]
   2f5d4:	add	r1, r0, #1
   2f5d8:	str	r1, [r4, #20]
   2f5dc:	mov	r1, #125	; 0x7d
   2f5e0:	strb	r1, [r0]
   2f5e4:	ldrb	r0, [r4, #25]
   2f5e8:	cmp	r0, #0
   2f5ec:	beq	2f610 <flatcc_json_printer_struct_as_root@@Base+0xc0>
   2f5f0:	ldr	r0, [r4, #32]
   2f5f4:	cmp	r0, #0
   2f5f8:	bne	2f610 <flatcc_json_printer_struct_as_root@@Base+0xc0>
   2f5fc:	ldr	r0, [r4, #20]
   2f600:	add	r1, r0, #1
   2f604:	str	r1, [r4, #20]
   2f608:	mov	r1, #10
   2f60c:	strb	r1, [r0]
   2f610:	ldr	r2, [r4, #44]	; 0x2c
   2f614:	mov	r0, r4
   2f618:	mov	r1, #1
   2f61c:	blx	r2
   2f620:	mov	r0, r4
   2f624:	bl	2f714 <flatcc_json_printer_struct_as_root@@Base+0x1c4>
   2f628:	mov	r1, r0
   2f62c:	mvn	r0, #0
   2f630:	cmp	r1, #0
   2f634:	popne	{r4, r5, fp, pc}
   2f638:	ldr	r0, [r4]
   2f63c:	ldr	r1, [r4, #12]
   2f640:	ldr	r2, [r4, #20]
   2f644:	add	r1, r2, r1
   2f648:	sub	r0, r1, r0
   2f64c:	pop	{r4, r5, fp, pc}
   2f650:	push	{r4, r5, r6, sl, fp, lr}
   2f654:	add	fp, sp, #16
   2f658:	sub	sp, sp, #8
   2f65c:	mov	r4, r0
   2f660:	mov	r0, #0
   2f664:	str	r0, [sp, #4]
   2f668:	cmp	r1, #0
   2f66c:	cmpne	r2, #7
   2f670:	bhi	2f6a0 <flatcc_json_printer_struct_as_root@@Base+0x150>
   2f674:	mov	r0, r4
   2f678:	mov	r1, #1
   2f67c:	bl	2f03c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f680:	movw	r0, #29219	; 0x7223
   2f684:	movt	r0, #3
   2f688:	movw	r1, #28075	; 0x6dab
   2f68c:	movt	r1, #3
   2f690:	movw	r3, #29250	; 0x7242
   2f694:	movt	r3, #3
   2f698:	movw	r2, #1019	; 0x3fb
   2f69c:	bl	14f44 <__assert_fail@plt>
   2f6a0:	cmp	r3, #0
   2f6a4:	beq	2f6e0 <flatcc_json_printer_struct_as_root@@Base+0x190>
   2f6a8:	mov	r5, r1
   2f6ac:	add	r0, sp, #4
   2f6b0:	mov	r1, r3
   2f6b4:	mov	r2, #4
   2f6b8:	bl	14efc <strncpy@plt>
   2f6bc:	ldr	r6, [sp, #4]
   2f6c0:	mov	r0, r6
   2f6c4:	bl	30bf8 <flatcc_json_printer_clear@@Base+0xedc>
   2f6c8:	str	r6, [sp, #4]
   2f6cc:	add	r0, r5, #4
   2f6d0:	bl	30bfc <flatcc_json_printer_clear@@Base+0xee0>
   2f6d4:	cmp	r6, #0
   2f6d8:	cmpne	r0, r6
   2f6dc:	bne	2f6e8 <flatcc_json_printer_struct_as_root@@Base+0x198>
   2f6e0:	sub	sp, fp, #16
   2f6e4:	pop	{r4, r5, r6, sl, fp, pc}
   2f6e8:	mov	r0, r4
   2f6ec:	mov	r1, #1
   2f6f0:	bl	2f03c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f6f4:	movw	r0, #29329	; 0x7291
   2f6f8:	movt	r0, #3
   2f6fc:	movw	r1, #28075	; 0x6dab
   2f700:	movt	r1, #3
   2f704:	movw	r3, #29250	; 0x7242
   2f708:	movt	r3, #3
   2f70c:	movw	r2, #1028	; 0x404
   2f710:	bl	14f44 <__assert_fail@plt>
   2f714:	ldr	r0, [r0, #36]	; 0x24
   2f718:	bx	lr

0002f71c <flatcc_json_printer_table_as_root@@Base>:
   2f71c:	push	{r4, r5, fp, lr}
   2f720:	add	fp, sp, #8
   2f724:	mov	r5, r1
   2f728:	mov	r4, r0
   2f72c:	bl	2f650 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2f730:	mov	r0, r5
   2f734:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2f738:	mov	r1, r0
   2f73c:	ldr	r3, [fp, #8]
   2f740:	mov	r0, r4
   2f744:	mov	r2, #100	; 0x64
   2f748:	bl	2ec68 <flatcc_json_printer_table_vector_field@@Base+0x158>
   2f74c:	ldrb	r0, [r4, #25]
   2f750:	cmp	r0, #0
   2f754:	beq	2f778 <flatcc_json_printer_table_as_root@@Base+0x5c>
   2f758:	ldr	r0, [r4, #32]
   2f75c:	cmp	r0, #0
   2f760:	bne	2f778 <flatcc_json_printer_table_as_root@@Base+0x5c>
   2f764:	ldr	r0, [r4, #20]
   2f768:	add	r1, r0, #1
   2f76c:	str	r1, [r4, #20]
   2f770:	mov	r1, #10
   2f774:	strb	r1, [r0]
   2f778:	ldr	r2, [r4, #44]	; 0x2c
   2f77c:	mov	r0, r4
   2f780:	mov	r1, #1
   2f784:	blx	r2
   2f788:	mov	r0, r4
   2f78c:	bl	2f714 <flatcc_json_printer_struct_as_root@@Base+0x1c4>
   2f790:	mov	r1, r0
   2f794:	mvn	r0, #0
   2f798:	cmp	r1, #0
   2f79c:	popne	{r4, r5, fp, pc}
   2f7a0:	ldr	r0, [r4]
   2f7a4:	ldr	r1, [r4, #12]
   2f7a8:	ldr	r2, [r4, #20]
   2f7ac:	add	r1, r2, r1
   2f7b0:	sub	r0, r1, r0
   2f7b4:	pop	{r4, r5, fp, pc}

0002f7b8 <flatcc_json_printer_struct_as_nested_root@@Base>:
   2f7b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f7bc:	add	fp, sp, #28
   2f7c0:	sub	sp, sp, #4
   2f7c4:	mov	r5, r3
   2f7c8:	mov	r7, r1
   2f7cc:	mov	r4, r0
   2f7d0:	mov	r0, r1
   2f7d4:	mov	r1, r2
   2f7d8:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2f7dc:	cmp	r0, #0
   2f7e0:	beq	2f8c4 <flatcc_json_printer_struct_as_nested_root@@Base+0x10c>
   2f7e4:	mov	r6, r0
   2f7e8:	add	sl, fp, #8
   2f7ec:	ldm	sl, {r8, r9, sl}
   2f7f0:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2f7f4:	add	r6, r0, r6
   2f7f8:	mov	r0, r6
   2f7fc:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2f800:	mov	r2, r0
   2f804:	mov	r0, r4
   2f808:	mov	r1, r6
   2f80c:	mov	r3, r9
   2f810:	bl	2f650 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2f814:	ldr	r0, [r7, #16]
   2f818:	add	r1, r0, #1
   2f81c:	str	r1, [r7, #16]
   2f820:	cmp	r0, #0
   2f824:	ldrne	r0, [r4, #20]
   2f828:	addne	r1, r0, #1
   2f82c:	strne	r1, [r4, #20]
   2f830:	movne	r1, #44	; 0x2c
   2f834:	strbne	r1, [r0]
   2f838:	mov	r0, r4
   2f83c:	mov	r1, r5
   2f840:	mov	r2, r8
   2f844:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2f848:	ldr	r0, [r4, #20]
   2f84c:	ldr	r1, [r4, #32]
   2f850:	add	r1, r1, #1
   2f854:	str	r1, [r4, #32]
   2f858:	add	r1, r0, #1
   2f85c:	str	r1, [r4, #20]
   2f860:	mov	r1, #123	; 0x7b
   2f864:	strb	r1, [r0]
   2f868:	mov	r0, r6
   2f86c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2f870:	mov	r1, r0
   2f874:	mov	r0, r4
   2f878:	blx	sl
   2f87c:	ldrb	r0, [r4, #25]
   2f880:	cmp	r0, #0
   2f884:	beq	2f8b0 <flatcc_json_printer_struct_as_nested_root@@Base+0xf8>
   2f888:	ldr	r0, [r4, #20]
   2f88c:	add	r1, r0, #1
   2f890:	str	r1, [r4, #20]
   2f894:	mov	r1, #10
   2f898:	strb	r1, [r0]
   2f89c:	ldr	r0, [r4, #32]
   2f8a0:	sub	r0, r0, #1
   2f8a4:	str	r0, [r4, #32]
   2f8a8:	mov	r0, r4
   2f8ac:	bl	29544 <flatcc_json_printer_indent@@Base+0x4>
   2f8b0:	ldr	r0, [r4, #20]
   2f8b4:	add	r1, r0, #1
   2f8b8:	str	r1, [r4, #20]
   2f8bc:	mov	r1, #125	; 0x7d
   2f8c0:	strb	r1, [r0]
   2f8c4:	sub	sp, fp, #28
   2f8c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f8cc <flatcc_json_printer_table_as_nested_root@@Base>:
   2f8cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f8d0:	add	fp, sp, #28
   2f8d4:	sub	sp, sp, #4
   2f8d8:	mov	sl, r3
   2f8dc:	mov	r5, r1
   2f8e0:	mov	r4, r0
   2f8e4:	mov	r0, r1
   2f8e8:	mov	r1, r2
   2f8ec:	bl	2a3c4 <flatcc_json_printer_string_field@@Base+0x78>
   2f8f0:	cmp	r0, #0
   2f8f4:	subeq	sp, fp, #28
   2f8f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f8fc:	mov	r7, r0
   2f900:	ldr	r8, [fp, #16]
   2f904:	ldr	r6, [fp, #12]
   2f908:	ldr	r9, [fp, #8]
   2f90c:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2f910:	add	r7, r0, r7
   2f914:	mov	r0, r7
   2f918:	bl	2c1e4 <flatcc_json_printer_utype_vector_field@@Base+0x1b8>
   2f91c:	mov	r2, r0
   2f920:	add	r7, r7, #4
   2f924:	mov	r0, r4
   2f928:	mov	r1, r7
   2f92c:	mov	r3, r6
   2f930:	bl	2f650 <flatcc_json_printer_struct_as_root@@Base+0x100>
   2f934:	ldr	r0, [r5, #16]
   2f938:	add	r1, r0, #1
   2f93c:	str	r1, [r5, #16]
   2f940:	cmp	r0, #0
   2f944:	ldrne	r0, [r4, #20]
   2f948:	addne	r1, r0, #1
   2f94c:	strne	r1, [r4, #20]
   2f950:	movne	r1, #44	; 0x2c
   2f954:	strbne	r1, [r0]
   2f958:	mov	r0, r4
   2f95c:	mov	r1, sl
   2f960:	mov	r2, r9
   2f964:	bl	2a404 <flatcc_json_printer_string_field@@Base+0xb8>
   2f968:	mov	r0, r7
   2f96c:	bl	2a4c0 <flatcc_json_printer_string_field@@Base+0x174>
   2f970:	mov	r1, r0
   2f974:	ldr	r2, [r5, #12]
   2f978:	mov	r0, r4
   2f97c:	mov	r3, r8
   2f980:	sub	sp, fp, #28
   2f984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f988:	b	2ec68 <flatcc_json_printer_table_vector_field@@Base+0x158>

0002f98c <flatcc_json_printer_init@@Base>:
   2f98c:	push	{r4, r5, r6, sl, fp, lr}
   2f990:	add	fp, sp, #16
   2f994:	mov	r5, r0
   2f998:	mov	r4, #0
   2f99c:	vmov.i32	q8, #0	; 0x00000000
   2f9a0:	str	r4, [r0, #32]
   2f9a4:	mov	r0, #36	; 0x24
   2f9a8:	mov	r2, r5
   2f9ac:	vst1.32	{d16-d17}, [r2], r0
   2f9b0:	str	r4, [r2]
   2f9b4:	add	r0, r5, #16
   2f9b8:	vst1.32	{d16-d17}, [r0]
   2f9bc:	movw	r0, #33612	; 0x834c
   2f9c0:	movt	r0, #4
   2f9c4:	ldr	r0, [r0]
   2f9c8:	movw	r2, #64044	; 0xfa2c
   2f9cc:	movt	r2, #2
   2f9d0:	cmp	r1, #0
   2f9d4:	movne	r0, r1
   2f9d8:	str	r0, [r5, #40]	; 0x28
   2f9dc:	str	r2, [r5, #44]	; 0x2c
   2f9e0:	movw	r6, #16448	; 0x4040
   2f9e4:	movw	r0, #16448	; 0x4040
   2f9e8:	bl	14ea8 <malloc@plt>
   2f9ec:	str	r0, [r5]
   2f9f0:	cmp	r0, #0
   2f9f4:	mvneq	r4, #0
   2f9f8:	moveq	r0, r4
   2f9fc:	popeq	{r4, r5, r6, sl, fp, pc}
   2fa00:	mov	r0, #1
   2fa04:	strb	r0, [r5, #24]
   2fa08:	mov	r0, #16384	; 0x4000
   2fa0c:	str	r6, [r5, #4]
   2fa10:	str	r0, [r5, #8]
   2fa14:	ldr	r0, [r5]
   2fa18:	add	r1, r0, #16384	; 0x4000
   2fa1c:	str	r1, [r5, #16]
   2fa20:	str	r0, [r5, #20]
   2fa24:	mov	r0, r4
   2fa28:	pop	{r4, r5, r6, sl, fp, pc}
   2fa2c:	push	{r4, r5, r6, sl, fp, lr}
   2fa30:	add	fp, sp, #16
   2fa34:	mov	r4, r0
   2fa38:	cmp	r1, #0
   2fa3c:	bne	2fa50 <flatcc_json_printer_init@@Base+0xc4>
   2fa40:	ldr	r5, [r4, #16]
   2fa44:	ldr	r6, [r4, #20]
   2fa48:	cmp	r6, r5
   2fa4c:	bcs	2fa74 <flatcc_json_printer_init@@Base+0xe8>
   2fa50:	ldr	r0, [r4]
   2fa54:	ldr	r1, [r4, #20]
   2fa58:	ldr	r3, [r4, #40]	; 0x28
   2fa5c:	sub	r5, r1, r0
   2fa60:	mov	r1, r5
   2fa64:	mov	r2, #1
   2fa68:	bl	14e9c <fwrite@plt>
   2fa6c:	ldr	r0, [r4]
   2fa70:	b	2faac <flatcc_json_printer_init@@Base+0x120>
   2fa74:	ldr	r0, [r4]
   2fa78:	ldr	r1, [r4, #8]
   2fa7c:	ldr	r3, [r4, #40]	; 0x28
   2fa80:	mov	r2, #1
   2fa84:	bl	14e9c <fwrite@plt>
   2fa88:	sub	r6, r6, r5
   2fa8c:	ldr	r0, [r4]
   2fa90:	ldr	r1, [r4, #8]
   2fa94:	add	r1, r0, r1
   2fa98:	mov	r2, r6
   2fa9c:	bl	14e60 <memcpy@plt>
   2faa0:	ldr	r0, [r4]
   2faa4:	ldr	r5, [r4, #8]
   2faa8:	add	r0, r0, r6
   2faac:	str	r0, [r4, #20]
   2fab0:	ldr	r0, [r4, #12]
   2fab4:	ldr	r1, [r4, #20]
   2fab8:	add	r0, r0, r5
   2fabc:	str	r0, [r4, #12]
   2fac0:	mov	r0, #0
   2fac4:	strb	r0, [r1]
   2fac8:	pop	{r4, r5, r6, sl, fp, pc}

0002facc <flatcc_json_printer_init_buffer@@Base>:
   2facc:	cmp	r2, #63	; 0x3f
   2fad0:	bls	2fb10 <flatcc_json_printer_init_buffer@@Base+0x44>
   2fad4:	vmov.i32	q8, #0	; 0x00000000
   2fad8:	add	r3, r0, #12
   2fadc:	vst1.32	{d16-d17}, [r3]
   2fae0:	movw	r3, #64312	; 0xfb38
   2fae4:	movt	r3, #2
   2fae8:	str	r3, [r0, #44]	; 0x2c
   2faec:	add	r3, r0, #28
   2faf0:	vst1.32	{d16-d17}, [r3]
   2faf4:	sub	r3, r2, #64	; 0x40
   2faf8:	stm	r0, {r1, r2, r3}
   2fafc:	add	r2, r1, r3
   2fb00:	str	r2, [r0, #16]
   2fb04:	str	r1, [r0, #20]
   2fb08:	mov	r0, #0
   2fb0c:	bx	lr
   2fb10:	push	{fp, lr}
   2fb14:	mov	fp, sp
   2fb18:	movw	r0, #28358	; 0x6ec6
   2fb1c:	movt	r0, #3
   2fb20:	movw	r1, #28075	; 0x6dab
   2fb24:	movt	r1, #3
   2fb28:	movw	r3, #28399	; 0x6eef
   2fb2c:	movt	r3, #3
   2fb30:	movw	r2, #1165	; 0x48d
   2fb34:	bl	14f44 <__assert_fail@plt>
   2fb38:	push	{r4, sl, fp, lr}
   2fb3c:	add	fp, sp, #8
   2fb40:	mov	r4, r0
   2fb44:	ldr	r0, [r0, #16]
   2fb48:	ldr	r1, [r4, #20]
   2fb4c:	cmp	r1, r0
   2fb50:	bcc	2fb7c <flatcc_json_printer_init_buffer@@Base+0xb0>
   2fb54:	mov	r0, r4
   2fb58:	mov	r1, #3
   2fb5c:	bl	2f03c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2fb60:	ldr	r0, [r4]
   2fb64:	ldr	r1, [r4, #12]
   2fb68:	ldr	r2, [r4, #20]
   2fb6c:	str	r0, [r4, #20]
   2fb70:	sub	r0, r2, r0
   2fb74:	add	r0, r0, r1
   2fb78:	str	r0, [r4, #12]
   2fb7c:	ldr	r0, [r4, #20]
   2fb80:	mov	r1, #0
   2fb84:	strb	r1, [r0]
   2fb88:	pop	{r4, sl, fp, pc}

0002fb8c <flatcc_json_printer_init_dynamic_buffer@@Base>:
   2fb8c:	push	{r4, r5, fp, lr}
   2fb90:	add	fp, sp, #8
   2fb94:	mov	r5, r1
   2fb98:	mov	r4, r0
   2fb9c:	vmov.i32	q8, #0	; 0x00000000
   2fba0:	add	r0, r0, #28
   2fba4:	vst1.32	{d16-d17}, [r0]
   2fba8:	add	r0, r4, #12
   2fbac:	vst1.32	{d16-d17}, [r0]
   2fbb0:	cmp	r1, #0
   2fbb4:	movweq	r5, #4096	; 0x1000
   2fbb8:	cmp	r5, #64	; 0x40
   2fbbc:	movls	r5, #64	; 0x40
   2fbc0:	mov	r0, r5
   2fbc4:	bl	14ea8 <malloc@plt>
   2fbc8:	mov	r1, r0
   2fbcc:	mov	r0, #1
   2fbd0:	strb	r0, [r4, #24]
   2fbd4:	sub	r0, r5, #64	; 0x40
   2fbd8:	stm	r4, {r1, r5}
   2fbdc:	str	r0, [r4, #8]
   2fbe0:	movw	r2, #64536	; 0xfc18
   2fbe4:	movt	r2, #2
   2fbe8:	str	r2, [r4, #44]	; 0x2c
   2fbec:	add	r0, r1, r0
   2fbf0:	str	r0, [r4, #16]
   2fbf4:	str	r1, [r4, #20]
   2fbf8:	mov	r0, #0
   2fbfc:	cmp	r1, #0
   2fc00:	popne	{r4, r5, fp, pc}
   2fc04:	mov	r0, r4
   2fc08:	mov	r1, #3
   2fc0c:	bl	2f03c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2fc10:	mvn	r0, #0
   2fc14:	pop	{r4, r5, fp, pc}
   2fc18:	push	{r4, r5, fp, lr}
   2fc1c:	add	fp, sp, #8
   2fc20:	mov	r4, r0
   2fc24:	ldr	r0, [r0]
   2fc28:	ldr	r5, [r4, #20]
   2fc2c:	mov	r1, #0
   2fc30:	strb	r1, [r5], -r0
   2fc34:	ldr	r0, [r4, #16]
   2fc38:	ldr	r1, [r4, #20]
   2fc3c:	cmp	r1, r0
   2fc40:	popcc	{r4, r5, fp, pc}
   2fc44:	ldm	r4, {r0, r1}
   2fc48:	lsl	r1, r1, #1
   2fc4c:	bl	14e90 <realloc@plt>
   2fc50:	cmp	r0, #0
   2fc54:	beq	2fc88 <flatcc_json_printer_init_dynamic_buffer@@Base+0xfc>
   2fc58:	str	r0, [r4]
   2fc5c:	add	r1, r0, r5
   2fc60:	ldr	r2, [r4, #4]
   2fc64:	mvn	r3, #63	; 0x3f
   2fc68:	add	r3, r3, r2, lsl #1
   2fc6c:	str	r3, [r4, #8]
   2fc70:	lsl	r2, r2, #1
   2fc74:	str	r2, [r4, #4]
   2fc78:	add	r0, r0, r3
   2fc7c:	str	r0, [r4, #16]
   2fc80:	str	r1, [r4, #20]
   2fc84:	b	2fca8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x11c>
   2fc88:	mov	r0, r4
   2fc8c:	mov	r1, #3
   2fc90:	bl	2f03c <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2fc94:	ldr	r0, [r4]
   2fc98:	ldr	r1, [r4, #12]
   2fc9c:	str	r0, [r4, #20]
   2fca0:	add	r0, r1, r5
   2fca4:	str	r0, [r4, #12]
   2fca8:	ldr	r0, [r4, #20]
   2fcac:	mov	r1, #0
   2fcb0:	strb	r1, [r0]
   2fcb4:	pop	{r4, r5, fp, pc}

0002fcb8 <flatcc_json_printer_get_buffer@@Base>:
   2fcb8:	push	{r4, r5, fp, lr}
   2fcbc:	add	fp, sp, #8
   2fcc0:	mov	r5, r1
   2fcc4:	mov	r4, r0
   2fcc8:	ldr	r2, [r0, #44]	; 0x2c
   2fccc:	mov	r1, #0
   2fcd0:	blx	r2
   2fcd4:	cmp	r5, #0
   2fcd8:	ldrne	r0, [r4]
   2fcdc:	ldrne	r1, [r4, #20]
   2fce0:	subne	r0, r1, r0
   2fce4:	strne	r0, [r5]
   2fce8:	ldr	r0, [r4]
   2fcec:	pop	{r4, r5, fp, pc}

0002fcf0 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   2fcf0:	push	{r4, sl, fp, lr}
   2fcf4:	add	fp, sp, #8
   2fcf8:	mov	r4, r0
   2fcfc:	bl	2fcb8 <flatcc_json_printer_get_buffer@@Base>
   2fd00:	vmov.i32	q8, #0	; 0x00000000
   2fd04:	add	r1, r4, #16
   2fd08:	vst1.32	{d16-d17}, [r1]
   2fd0c:	mov	r1, #32
   2fd10:	vst1.32	{d16-d17}, [r4], r1
   2fd14:	vst1.32	{d16-d17}, [r4]
   2fd18:	pop	{r4, sl, fp, pc}

0002fd1c <flatcc_json_printer_clear@@Base>:
   2fd1c:	push	{r4, sl, fp, lr}
   2fd20:	add	fp, sp, #8
   2fd24:	mov	r4, r0
   2fd28:	ldrb	r0, [r0, #24]
   2fd2c:	cmp	r0, #0
   2fd30:	ldrne	r0, [r4]
   2fd34:	cmpne	r0, #0
   2fd38:	beq	2fd40 <flatcc_json_printer_clear@@Base+0x24>
   2fd3c:	bl	14e54 <free@plt>
   2fd40:	vmov.i32	q8, #0	; 0x00000000
   2fd44:	mov	r0, #32
   2fd48:	add	r1, r4, #16
   2fd4c:	vst1.32	{d16-d17}, [r4], r0
   2fd50:	vst1.32	{d16-d17}, [r4]
   2fd54:	vst1.32	{d16-d17}, [r1]
   2fd58:	pop	{r4, sl, fp, pc}
   2fd5c:	vmov	r0, r1, d0
   2fd60:	bx	lr
   2fd64:	nop	{0}
   2fd68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd6c:	add	fp, sp, #28
   2fd70:	sub	sp, sp, #4
   2fd74:	vpush	{d8}
   2fd78:	sub	sp, sp, #160	; 0xa0
   2fd7c:	add	r3, sp, #68	; 0x44
   2fd80:	stm	r3, {r0, r1, r2}
   2fd84:	vmov.f64	d8, d0
   2fd88:	sub	r0, fp, #56	; 0x38
   2fd8c:	bl	30078 <flatcc_json_printer_clear@@Base+0x35c>
   2fd90:	ldr	sl, [fp, #-56]	; 0xffffffc8
   2fd94:	ldr	r5, [fp, #-52]	; 0xffffffcc
   2fd98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2fd9c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2fda0:	stm	sp, {r0, r1}
   2fda4:	sub	r0, fp, #72	; 0x48
   2fda8:	mov	r2, sl
   2fdac:	mov	r3, r5
   2fdb0:	bl	300cc <flatcc_json_printer_clear@@Base+0x3b0>
   2fdb4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2fdb8:	mov	r0, #0
   2fdbc:	str	r1, [sp, #56]	; 0x38
   2fdc0:	sub	r1, r1, #1
   2fdc4:	str	r1, [sp, #52]	; 0x34
   2fdc8:	str	r1, [sp]
   2fdcc:	str	r0, [sp, #4]
   2fdd0:	mov	r0, #1
   2fdd4:	orr	r2, r0, sl, lsl #1
   2fdd8:	str	r5, [sp, #60]	; 0x3c
   2fddc:	lsl	r0, r5, #1
   2fde0:	orr	r8, r0, sl, lsr #31
   2fde4:	sub	r0, fp, #88	; 0x58
   2fde8:	mov	r3, r8
   2fdec:	bl	300cc <flatcc_json_printer_clear@@Base+0x3b0>
   2fdf0:	vmov.f64	d0, d8
   2fdf4:	bl	2fd5c <flatcc_json_printer_clear@@Base+0x40>
   2fdf8:	str	r0, [sp, #48]	; 0x30
   2fdfc:	vcmpe.f64	d8, #0.0
   2fe00:	vmrs	APSR_nzcv, fpscr
   2fe04:	ble	2ffac <flatcc_json_printer_clear@@Base+0x290>
   2fe08:	vldr	d16, [pc, #448]	; 2ffd0 <flatcc_json_printer_clear@@Base+0x2b4>
   2fe0c:	vcmpe.f64	d8, d16
   2fe10:	vmrs	APSR_nzcv, fpscr
   2fe14:	bhi	2ffac <flatcc_json_printer_clear@@Base+0x290>
   2fe18:	mov	r9, r1
   2fe1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2fe20:	mvn	r1, #123	; 0x7b
   2fe24:	sub	r0, r1, r0
   2fe28:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2fe2c:	str	r1, [sp, #44]	; 0x2c
   2fe30:	add	r1, sp, #96	; 0x60
   2fe34:	bl	30170 <flatcc_json_printer_clear@@Base+0x454>
   2fe38:	str	r0, [sp, #64]	; 0x40
   2fe3c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2fe40:	ldr	r3, [fp, #-68]	; 0xffffffbc
   2fe44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2fe48:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2fe4c:	add	r7, sp, #96	; 0x60
   2fe50:	ldm	r7, {r4, r6, r7}
   2fe54:	ldr	r5, [sp, #108]	; 0x6c
   2fe58:	stm	sp, {r0, r1, r4, r6, r7}
   2fe5c:	str	r5, [sp, #20]
   2fe60:	sub	r0, fp, #72	; 0x48
   2fe64:	bl	301d8 <flatcc_json_printer_clear@@Base+0x4bc>
   2fe68:	mov	r0, #0
   2fe6c:	ldr	ip, [sp, #44]	; 0x2c
   2fe70:	str	ip, [sp]
   2fe74:	stmib	sp, {r0, r4, r6, r7}
   2fe78:	str	r5, [sp, #20]
   2fe7c:	movw	r0, #0
   2fe80:	movt	r0, #32752	; 0x7ff0
   2fe84:	and	r0, r9, r0
   2fe88:	clz	r0, r0
   2fe8c:	lsr	r0, r0, #5
   2fe90:	bfc	r9, #20, #12
   2fe94:	ldr	r1, [sp, #48]	; 0x30
   2fe98:	orrs	r1, r1, r9
   2fe9c:	movwne	r1, #1
   2fea0:	orrs	r0, r1, r0
   2fea4:	ldr	r1, [sp, #60]	; 0x3c
   2fea8:	lsl	r1, r1, #2
   2feac:	orreq	r8, r1, sl, lsr #30
   2feb0:	lsl	r1, sl, #2
   2feb4:	lslne	r1, sl, #1
   2feb8:	subs	r1, r1, #1
   2febc:	sbc	r2, r8, #0
   2fec0:	cmp	r0, #0
   2fec4:	ldr	r0, [sp, #56]	; 0x38
   2fec8:	ldr	r3, [sp, #52]	; 0x34
   2fecc:	subeq	r3, r0, #2
   2fed0:	sub	r0, r3, ip
   2fed4:	rsb	r3, r0, #32
   2fed8:	lsr	r3, r1, r3
   2fedc:	orr	r3, r3, r2, lsl r0
   2fee0:	sub	r2, r0, #32
   2fee4:	cmp	r2, #0
   2fee8:	lslge	r3, r1, r2
   2feec:	lsl	r2, r1, r0
   2fef0:	movwge	r2, #0
   2fef4:	add	r0, sp, #80	; 0x50
   2fef8:	bl	301d8 <flatcc_json_printer_clear@@Base+0x4bc>
   2fefc:	ldr	r8, [sp, #80]	; 0x50
   2ff00:	ldr	r9, [sp, #84]	; 0x54
   2ff04:	ldr	r0, [sp, #88]	; 0x58
   2ff08:	str	r0, [sp, #60]	; 0x3c
   2ff0c:	ldr	sl, [sp, #92]	; 0x5c
   2ff10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   2ff14:	ldr	r3, [fp, #-84]	; 0xffffffac
   2ff18:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ff1c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   2ff20:	stm	sp, {r0, r1, r4, r6, r7}
   2ff24:	str	r5, [sp, #20]
   2ff28:	sub	r0, fp, #88	; 0x58
   2ff2c:	bl	301d8 <flatcc_json_printer_clear@@Base+0x4bc>
   2ff30:	sub	r3, fp, #68	; 0x44
   2ff34:	ldm	r3, {r1, r2, r3}
   2ff38:	ldr	r7, [fp, #-88]	; 0xffffffa8
   2ff3c:	ldr	r5, [fp, #-84]	; 0xffffffac
   2ff40:	sub	ip, fp, #80	; 0x50
   2ff44:	ldm	ip, {r4, r6, ip}
   2ff48:	ldr	r0, [sp, #68]	; 0x44
   2ff4c:	str	r0, [sp, #32]
   2ff50:	ldr	r0, [sp, #72]	; 0x48
   2ff54:	str	r0, [sp, #36]	; 0x24
   2ff58:	add	r0, sp, #80	; 0x50
   2ff5c:	str	r0, [sp, #40]	; 0x28
   2ff60:	str	ip, [sp]
   2ff64:	stmib	sp, {r1, r2, r3, r7}
   2ff68:	str	r5, [sp, #20]
   2ff6c:	str	r4, [sp, #24]
   2ff70:	str	r6, [sp, #28]
   2ff74:	mov	r0, r8
   2ff78:	mov	r1, r9
   2ff7c:	ldr	r2, [sp, #60]	; 0x3c
   2ff80:	mov	r3, sl
   2ff84:	bl	3023c <flatcc_json_printer_clear@@Base+0x520>
   2ff88:	ldr	r1, [sp, #80]	; 0x50
   2ff8c:	ldr	r2, [sp, #64]	; 0x40
   2ff90:	sub	r1, r1, r2
   2ff94:	ldr	r2, [sp, #76]	; 0x4c
   2ff98:	str	r1, [r2]
   2ff9c:	sub	sp, fp, #40	; 0x28
   2ffa0:	vpop	{d8}
   2ffa4:	add	sp, sp, #4
   2ffa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ffac:	movw	r0, #28627	; 0x6fd3
   2ffb0:	movt	r0, #3
   2ffb4:	movw	r1, #28480	; 0x6f40
   2ffb8:	movt	r1, #3
   2ffbc:	movw	r3, #28664	; 0x6ff8
   2ffc0:	movt	r3, #3
   2ffc4:	mov	r2, #138	; 0x8a
   2ffc8:	bl	14f44 <__assert_fail@plt>
   2ffcc:	nop	{0}
   2ffd0:			; <UNDEFINED> instruction: 0xffffffff
   2ffd4:	svcvc	0x00efffff
   2ffd8:	push	{r4, sl, fp, lr}
   2ffdc:	add	fp, sp, #8
   2ffe0:	cmn	r0, #1
   2ffe4:	ble	2fff0 <flatcc_json_printer_clear@@Base+0x2d4>
   2ffe8:	mov	lr, r1
   2ffec:	b	30000 <flatcc_json_printer_clear@@Base+0x2e4>
   2fff0:	mov	r2, #45	; 0x2d
   2fff4:	mov	lr, r1
   2fff8:	strb	r2, [lr], #1
   2fffc:	rsb	r0, r0, #0
   30000:	movw	ip, #26215	; 0x6667
   30004:	movt	ip, #26214	; 0x6666
   30008:	mov	r3, lr
   3000c:	smmul	r2, r0, ip
   30010:	asr	r4, r2, #2
   30014:	add	r2, r4, r2, lsr #31
   30018:	add	r4, r2, r2, lsl #2
   3001c:	sub	r4, r0, r4, lsl #1
   30020:	add	r4, r4, #48	; 0x30
   30024:	strb	r4, [r3], #1
   30028:	add	r0, r0, #9
   3002c:	cmp	r0, #18
   30030:	mov	r0, r2
   30034:	bhi	3000c <flatcc_json_printer_clear@@Base+0x2f0>
   30038:	mov	r2, #0
   3003c:	mov	r0, r3
   30040:	strb	r2, [r0], -lr
   30044:	cmp	r0, #2
   30048:	blt	30070 <flatcc_json_printer_clear@@Base+0x354>
   3004c:	add	r0, r0, r0, lsr #31
   30050:	asr	r0, r0, #1
   30054:	sub	r2, r3, #1
   30058:	ldrb	ip, [lr]
   3005c:	ldrb	r4, [r2]
   30060:	strb	r4, [lr], #1
   30064:	strb	ip, [r2], #-1
   30068:	subs	r0, r0, #1
   3006c:	bne	30058 <flatcc_json_printer_clear@@Base+0x33c>
   30070:	sub	r0, r3, r1
   30074:	pop	{r4, sl, fp, pc}
   30078:	push	{r4, sl, fp, lr}
   3007c:	add	fp, sp, #8
   30080:	mov	r4, r0
   30084:	bl	2fd5c <flatcc_json_printer_clear@@Base+0x40>
   30088:	movw	r2, #0
   3008c:	movt	r2, #32752	; 0x7ff0
   30090:	ands	r2, r1, r2
   30094:	bfc	r1, #20, #12
   30098:	beq	300b8 <flatcc_json_printer_clear@@Base+0x39c>
   3009c:	orr	r1, r1, #1048576	; 0x100000
   300a0:	strd	r0, [r4]
   300a4:	movw	r0, #64461	; 0xfbcd
   300a8:	movt	r0, #65535	; 0xffff
   300ac:	add	r0, r0, r2, lsr #20
   300b0:	str	r0, [r4, #8]
   300b4:	pop	{r4, sl, fp, pc}
   300b8:	strd	r0, [r4]
   300bc:	movw	r0, #64462	; 0xfbce
   300c0:	movt	r0, #65535	; 0xffff
   300c4:	str	r0, [r4, #8]
   300c8:	pop	{r4, sl, fp, pc}
   300cc:	push	{r4, sl, fp, lr}
   300d0:	add	fp, sp, #8
   300d4:	orrs	r1, r2, r3
   300d8:	beq	30150 <flatcc_json_printer_clear@@Base+0x434>
   300dc:	ldr	ip, [fp, #12]
   300e0:	ldr	r1, [fp, #8]
   300e4:	mov	r4, #0
   300e8:	cmp	r4, r3, lsr #22
   300ec:	bne	30108 <flatcc_json_printer_clear@@Base+0x3ec>
   300f0:	lsl	r3, r3, #10
   300f4:	orr	r3, r3, r2, lsr #22
   300f8:	sub	r1, r1, #10
   300fc:	lsl	r2, r2, #10
   30100:	cmp	r3, #4194304	; 0x400000
   30104:	bcc	300f0 <flatcc_json_printer_clear@@Base+0x3d4>
   30108:	cmp	r3, #0
   3010c:	blt	30138 <flatcc_json_printer_clear@@Base+0x41c>
   30110:	mvn	lr, #0
   30114:	lsl	r3, r3, #1
   30118:	orr	r3, r3, r2, lsr #31
   3011c:	sub	r1, r1, #1
   30120:	lsl	r4, r2, #1
   30124:	subs	r2, lr, r2, lsl #1
   30128:	sbcs	r2, lr, r3
   3012c:	mov	r2, r4
   30130:	blt	30114 <flatcc_json_printer_clear@@Base+0x3f8>
   30134:	b	3013c <flatcc_json_printer_clear@@Base+0x420>
   30138:	mov	r4, r2
   3013c:	str	r4, [r0]
   30140:	str	r3, [r0, #4]
   30144:	str	r1, [r0, #8]
   30148:	str	ip, [r0, #12]
   3014c:	pop	{r4, sl, fp, pc}
   30150:	movw	r0, #27698	; 0x6c32
   30154:	movt	r0, #3
   30158:	movw	r1, #27707	; 0x6c3b
   3015c:	movt	r1, #3
   30160:	movw	r3, #27793	; 0x6c91
   30164:	movt	r3, #3
   30168:	mov	r2, #260	; 0x104
   3016c:	bl	14f44 <__assert_fail@plt>
   30170:	push	{r4, sl, fp, lr}
   30174:	add	fp, sp, #8
   30178:	mov	r4, r1
   3017c:	add	r0, r0, #63	; 0x3f
   30180:	vldr	d16, [pc, #72]	; 301d0 <flatcc_json_printer_clear@@Base+0x4b4>
   30184:	vmov	s0, r0
   30188:	vcvt.f64.s32	d17, s0
   3018c:	vmul.f64	d0, d17, d16
   30190:	bl	305e0 <flatcc_json_printer_clear@@Base+0x8c4>
   30194:	movw	r1, #347	; 0x15b
   30198:	add	r0, r0, r1
   3019c:	asr	r1, r0, #31
   301a0:	add	r0, r0, r1, lsr #29
   301a4:	mvn	r1, #15
   301a8:	and	r0, r1, r0, lsl #1
   301ac:	movw	r1, #29360	; 0x72b0
   301b0:	movt	r1, #3
   301b4:	add	r0, r1, r0
   301b8:	ldrd	r2, [r0, #16]
   301bc:	stm	r4, {r2, r3}
   301c0:	ldrsh	r1, [r0, #24]
   301c4:	str	r1, [r4, #8]
   301c8:	ldrsh	r0, [r0, #26]
   301cc:	pop	{r4, sl, fp, pc}
   301d0:			; <UNDEFINED> instruction: 0x509f79fe
   301d4:	svccc	0x00d34413
   301d8:	push	{r4, r5, fp, lr}
   301dc:	add	fp, sp, #8
   301e0:	ldr	ip, [fp, #24]
   301e4:	ldr	r1, [fp, #8]
   301e8:	add	r1, r1, ip
   301ec:	add	r1, r1, #64	; 0x40
   301f0:	str	r1, [r0, #8]
   301f4:	ldr	ip, [fp, #16]
   301f8:	umull	r1, lr, ip, r2
   301fc:	umull	ip, r1, ip, r3
   30200:	mov	r5, #0
   30204:	adds	lr, ip, lr
   30208:	adc	r5, r5, #0
   3020c:	ldr	ip, [fp, #20]
   30210:	umull	r2, r4, ip, r2
   30214:	adds	r2, lr, r2
   30218:	adc	r5, r5, #0
   3021c:	adds	r2, r2, #-2147483648	; 0x80000000
   30220:	adc	r2, r5, #0
   30224:	umaal	r1, r4, ip, r3
   30228:	adds	r1, r1, r2
   3022c:	str	r1, [r0]
   30230:	adc	r1, r4, #0
   30234:	str	r1, [r0, #4]
   30238:	pop	{r4, r5, fp, pc}
   3023c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30240:	add	fp, sp, #28
   30244:	sub	sp, sp, #124	; 0x7c
   30248:	mov	r3, #0
   3024c:	str	r3, [sp, #20]
   30250:	str	r2, [sp, #16]
   30254:	subs	r0, r0, #1
   30258:	sbc	r1, r1, #0
   3025c:	str	r1, [sp, #12]
   30260:	str	r0, [sp, #8]
   30264:	str	r3, [sp, #4]
   30268:	ldr	r0, [fp, #32]
   3026c:	str	r0, [sp]
   30270:	ldr	r0, [fp, #28]
   30274:	ldr	r1, [fp, #24]
   30278:	adds	r9, r1, #1
   3027c:	adc	r6, r0, #0
   30280:	sub	r0, fp, #48	; 0x30
   30284:	mov	r2, r9
   30288:	mov	r3, r6
   3028c:	bl	3060c <flatcc_json_printer_clear@@Base+0x8f0>
   30290:	ldr	r1, [fp, #16]
   30294:	rsb	r4, r1, #0
   30298:	lsr	r0, r9, r4
   3029c:	add	r8, r1, #32
   302a0:	orr	r7, r0, r6, lsl r8
   302a4:	mvn	r0, #31
   302a8:	sub	r5, r0, r1
   302ac:	cmp	r5, #0
   302b0:	lsrge	r7, r6, r5
   302b4:	add	r1, r1, #64	; 0x40
   302b8:	sub	r2, fp, #52	; 0x34
   302bc:	mov	r0, r7
   302c0:	bl	30664 <flatcc_json_printer_clear@@Base+0x948>
   302c4:	mov	lr, r4
   302c8:	mov	r2, #0
   302cc:	ldr	r4, [fp, #48]	; 0x30
   302d0:	str	r0, [r4]
   302d4:	mov	r0, #1
   302d8:	lsr	r1, r0, r8
   302dc:	cmp	r5, #0
   302e0:	lslge	r1, r0, r5
   302e4:	lsl	r0, r0, lr
   302e8:	movwge	r0, #0
   302ec:	ldr	r3, [fp, #44]	; 0x2c
   302f0:	str	r2, [r3]
   302f4:	ldr	r2, [r4]
   302f8:	subs	r3, r0, #1
   302fc:	str	r9, [sp, #40]	; 0x28
   30300:	and	r9, r3, r9
   30304:	sbc	r5, r1, #0
   30308:	str	r5, [sp, #60]	; 0x3c
   3030c:	and	r5, r5, r6
   30310:	cmp	r2, #1
   30314:	str	r6, [sp, #44]	; 0x2c
   30318:	str	r1, [sp, #36]	; 0x24
   3031c:	str	r0, [sp, #32]
   30320:	blt	303dc <flatcc_json_printer_clear@@Base+0x6c0>
   30324:	str	r3, [sp, #48]	; 0x30
   30328:	mov	sl, r5
   3032c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   30330:	str	r2, [sp, #56]	; 0x38
   30334:	ldr	r2, [fp, #-44]	; 0xffffffd4
   30338:	str	r2, [sp, #52]	; 0x34
   3033c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   30340:	movw	ip, #52429	; 0xcccd
   30344:	movt	ip, #52428	; 0xcccc
   30348:	udiv	r2, r7, r0
   3034c:	add	r6, r2, #48	; 0x30
   30350:	ldr	r3, [fp, #44]	; 0x2c
   30354:	mov	r1, r3
   30358:	ldr	r5, [r3]
   3035c:	ldr	r3, [fp, #40]	; 0x28
   30360:	strb	r6, [r3, r5]
   30364:	ldr	r6, [r1]
   30368:	add	r6, r6, #1
   3036c:	str	r6, [r1]
   30370:	ldr	r6, [r4]
   30374:	sub	r6, r6, #1
   30378:	str	r6, [r4]
   3037c:	mov	r3, r0
   30380:	mls	r7, r2, r0, r7
   30384:	rsb	r0, lr, #32
   30388:	lsr	r2, r7, r0
   3038c:	sub	r8, lr, #32
   30390:	cmp	r8, #0
   30394:	lslge	r2, r7, r8
   30398:	lsl	r6, r7, lr
   3039c:	movwge	r6, #0
   303a0:	adds	r5, r6, r9
   303a4:	adc	r6, r2, sl
   303a8:	ldr	r2, [sp, #56]	; 0x38
   303ac:	subs	r2, r5, r2
   303b0:	ldr	r2, [sp, #52]	; 0x34
   303b4:	sbcs	r2, r6, r2
   303b8:	bcc	3052c <flatcc_json_printer_clear@@Base+0x810>
   303bc:	umull	r2, r6, r3, ip
   303c0:	lsr	r0, r6, #3
   303c4:	ldr	r2, [r4]
   303c8:	cmp	r2, #0
   303cc:	bgt	30348 <flatcc_json_printer_clear@@Base+0x62c>
   303d0:	str	r0, [fp, #-52]	; 0xffffffcc
   303d4:	mov	r5, sl
   303d8:	ldr	r3, [sp, #48]	; 0x30
   303dc:	ldr	r7, [fp, #-48]	; 0xffffffd0
   303e0:	ldr	r6, [fp, #-44]	; 0xffffffd4
   303e4:	mov	r8, #1
   303e8:	rsb	r0, lr, #32
   303ec:	str	r0, [sp, #52]	; 0x34
   303f0:	str	lr, [sp, #56]	; 0x38
   303f4:	sub	r0, lr, #32
   303f8:	str	r0, [sp, #48]	; 0x30
   303fc:	mov	sl, #0
   30400:	mov	ip, r4
   30404:	mov	lr, #10
   30408:	mov	r2, r5
   3040c:	umull	r4, r5, r9, lr
   30410:	mov	r9, r3
   30414:	ldr	r1, [sp, #56]	; 0x38
   30418:	lsr	r3, r4, r1
   3041c:	add	r2, r2, r2, lsl #2
   30420:	add	r2, r5, r2, lsl #1
   30424:	ldr	r1, [sp, #52]	; 0x34
   30428:	orr	r3, r3, r2, lsl r1
   3042c:	ldr	r1, [sp, #48]	; 0x30
   30430:	cmp	r1, #0
   30434:	lsrge	r3, r2, r1
   30438:	add	r3, r3, #48	; 0x30
   3043c:	ldr	r1, [fp, #44]	; 0x2c
   30440:	mov	r0, r1
   30444:	ldr	r5, [r1]
   30448:	ldr	r1, [fp, #40]	; 0x28
   3044c:	strb	r3, [r1, r5]
   30450:	ldr	r3, [r0]
   30454:	add	r3, r3, #1
   30458:	str	r3, [r0]
   3045c:	ldr	r3, [ip]
   30460:	sub	r3, r3, #1
   30464:	str	r3, [ip]
   30468:	umull	r8, r3, r8, lr
   3046c:	add	r5, sl, sl, lsl #2
   30470:	add	sl, r3, r5, lsl #1
   30474:	umull	r7, r3, r7, lr
   30478:	add	r5, r6, r6, lsl #2
   3047c:	add	r6, r3, r5, lsl #1
   30480:	mov	r3, r9
   30484:	ldr	r0, [sp, #60]	; 0x3c
   30488:	and	r5, r2, r0
   3048c:	and	r9, r4, r9
   30490:	subs	r2, r9, r7
   30494:	sbcs	r2, r5, r6
   30498:	bcs	30408 <flatcc_json_printer_clear@@Base+0x6ec>
   3049c:	str	r7, [fp, #-48]	; 0xffffffd0
   304a0:	str	r6, [fp, #-44]	; 0xffffffd4
   304a4:	ldr	r0, [fp, #44]	; 0x2c
   304a8:	ldr	r4, [r0]
   304ac:	mov	r0, #0
   304b0:	ldr	r1, [fp, #32]
   304b4:	str	r1, [sp]
   304b8:	str	r0, [sp, #4]
   304bc:	ldr	r0, [fp, #8]
   304c0:	str	r0, [sp, #8]
   304c4:	ldr	r0, [fp, #12]
   304c8:	str	r0, [sp, #12]
   304cc:	ldr	r0, [fp, #16]
   304d0:	str	r0, [sp, #16]
   304d4:	ldr	r0, [fp, #20]
   304d8:	str	r0, [sp, #20]
   304dc:	add	r0, sp, #64	; 0x40
   304e0:	ldr	r2, [sp, #40]	; 0x28
   304e4:	ldr	r3, [sp, #44]	; 0x2c
   304e8:	bl	3060c <flatcc_json_printer_clear@@Base+0x8f0>
   304ec:	ldr	r0, [sp, #64]	; 0x40
   304f0:	ldr	r1, [sp, #68]	; 0x44
   304f4:	str	r7, [sp]
   304f8:	stmib	sp, {r6, r9}
   304fc:	str	r5, [sp, #12]
   30500:	ldr	r2, [sp, #32]
   30504:	str	r2, [sp, #16]
   30508:	ldr	r2, [sp, #36]	; 0x24
   3050c:	add	r3, sp, #20
   30510:	stm	r3, {r2, r8, sl}
   30514:	umull	r2, r3, r0, r8
   30518:	mla	r0, r0, sl, r3
   3051c:	mla	r3, r1, r8, r0
   30520:	ldr	r0, [fp, #40]	; 0x28
   30524:	mov	r1, r4
   30528:	b	305d4 <flatcc_json_printer_clear@@Base+0x8b8>
   3052c:	mov	r4, r3
   30530:	str	r3, [fp, #-52]	; 0xffffffcc
   30534:	mov	sl, r0
   30538:	ldr	r0, [fp, #44]	; 0x2c
   3053c:	ldr	r9, [r0]
   30540:	mov	r1, #0
   30544:	ldr	r0, [fp, #32]
   30548:	stm	sp, {r0, r1}
   3054c:	ldr	r0, [fp, #8]
   30550:	str	r0, [sp, #8]
   30554:	ldr	r0, [fp, #12]
   30558:	str	r0, [sp, #12]
   3055c:	ldr	r0, [fp, #16]
   30560:	str	r0, [sp, #16]
   30564:	ldr	r0, [fp, #20]
   30568:	str	r0, [sp, #20]
   3056c:	sub	r0, fp, #72	; 0x48
   30570:	ldr	r2, [sp, #40]	; 0x28
   30574:	ldr	r3, [sp, #44]	; 0x2c
   30578:	mov	r7, lr
   3057c:	bl	3060c <flatcc_json_printer_clear@@Base+0x8f0>
   30580:	ldr	r2, [fp, #-72]	; 0xffffffb8
   30584:	ldr	r3, [fp, #-68]	; 0xffffffbc
   30588:	mov	r0, #1
   3058c:	lsr	r1, r4, sl
   30590:	cmp	r8, #0
   30594:	lslge	r1, r4, r8
   30598:	lsl	r4, r4, r7
   3059c:	movwge	r4, #0
   305a0:	ldr	r7, [sp, #56]	; 0x38
   305a4:	str	r7, [sp]
   305a8:	ldr	r7, [sp, #52]	; 0x34
   305ac:	str	r7, [sp, #4]
   305b0:	str	r5, [sp, #8]
   305b4:	str	r6, [sp, #12]
   305b8:	str	r4, [sp, #16]
   305bc:	str	r1, [sp, #20]
   305c0:	str	r0, [sp, #24]
   305c4:	mov	r0, #0
   305c8:	str	r0, [sp, #28]
   305cc:	ldr	r0, [fp, #40]	; 0x28
   305d0:	mov	r1, r9
   305d4:	bl	306a0 <flatcc_json_printer_clear@@Base+0x984>
   305d8:	sub	sp, fp, #28
   305dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   305e0:	vcvt.s32.f64	s2, d0
   305e4:	vmov	r0, s2
   305e8:	vcmpe.f64	d0, #0.0
   305ec:	vmrs	APSR_nzcv, fpscr
   305f0:	bxmi	lr
   305f4:	vcvt.f64.s32	d16, s2
   305f8:	vsub.f64	d16, d0, d16
   305fc:	vcmp.f64	d16, #0.0
   30600:	vmrs	APSR_nzcv, fpscr
   30604:	addne	r0, r0, #1
   30608:	bx	lr
   3060c:	push	{fp, lr}
   30610:	mov	fp, sp
   30614:	ldr	ip, [fp, #8]
   30618:	str	ip, [r0, #8]
   3061c:	ldr	r1, [fp, #16]
   30620:	subs	r1, r2, r1
   30624:	str	r1, [r0]
   30628:	ldr	r1, [fp, #20]
   3062c:	sbcs	r1, r3, r1
   30630:	str	r1, [r0, #4]
   30634:	bcc	30644 <flatcc_json_printer_clear@@Base+0x928>
   30638:	ldr	r0, [fp, #24]
   3063c:	cmp	ip, r0
   30640:	popeq	{fp, pc}
   30644:	movw	r0, #28705	; 0x7021
   30648:	movt	r0, #3
   3064c:	movw	r1, #27707	; 0x6c3b
   30650:	movt	r1, #3
   30654:	movw	r3, #28730	; 0x703a
   30658:	movt	r3, #3
   3065c:	mov	r2, #239	; 0xef
   30660:	bl	14f44 <__assert_fail@plt>
   30664:	push	{fp, lr}
   30668:	mov	fp, sp
   3066c:	movw	r3, #1233	; 0x4d1
   30670:	mla	lr, r1, r3, r3
   30674:	mov	r1, #1
   30678:	add	r1, r1, lr, asr #12
   3067c:	movw	ip, #30752	; 0x7820
   30680:	movt	ip, #3
   30684:	ldr	r3, [ip, r1, lsl #2]
   30688:	cmp	r3, r0
   3068c:	asrhi	r1, lr, #12
   30690:	ldr	r0, [ip, r1, lsl #2]
   30694:	str	r0, [r2]
   30698:	mov	r0, r1
   3069c:	pop	{fp, pc}
   306a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   306a4:	add	fp, sp, #28
   306a8:	sub	sp, sp, #20
   306ac:	str	r1, [sp, #12]
   306b0:	str	r0, [sp, #16]
   306b4:	ldr	r5, [fp, #20]
   306b8:	ldr	ip, [fp, #12]
   306bc:	ldr	r1, [fp, #16]
   306c0:	ldr	lr, [fp, #8]
   306c4:	subs	r8, lr, r1
   306c8:	sbc	r7, ip, r5
   306cc:	mov	r9, #0
   306d0:	ldr	r0, [fp, #28]
   306d4:	ldr	r4, [fp, #24]
   306d8:	subs	r4, r8, r4
   306dc:	sbcs	r4, r7, r0
   306e0:	movwcc	r9, #1
   306e4:	ldr	r4, [fp, #36]	; 0x24
   306e8:	ldr	r0, [fp, #32]
   306ec:	adds	r6, r0, r2
   306f0:	str	r6, [sp, #8]
   306f4:	adc	r6, r4, r3
   306f8:	subs	r0, r2, r0
   306fc:	sbc	sl, r3, r4
   30700:	subs	r4, r1, r0
   30704:	sbcs	r4, r5, sl
   30708:	str	r6, [sp, #4]
   3070c:	bcs	307d0 <flatcc_json_printer_clear@@Base+0xab4>
   30710:	ldr	r3, [fp, #24]
   30714:	subs	r4, r8, r3
   30718:	ldr	r2, [fp, #28]
   3071c:	sbcs	r4, r7, r2
   30720:	bcc	307d8 <flatcc_json_printer_clear@@Base+0xabc>
   30724:	ldr	r1, [sp, #12]
   30728:	sub	r1, r1, #1
   3072c:	str	r1, [sp, #12]
   30730:	ldr	r5, [fp, #20]
   30734:	ldr	r8, [fp, #16]
   30738:	adds	r7, r8, r3
   3073c:	adc	r6, r5, r2
   30740:	subs	r4, r7, r0
   30744:	sbcs	r4, r6, sl
   30748:	bcc	30780 <flatcc_json_printer_clear@@Base+0xa64>
   3074c:	subs	r4, r7, r0
   30750:	sbc	lr, r6, sl
   30754:	mov	r1, ip
   30758:	subs	ip, r0, r8
   3075c:	mov	r2, r8
   30760:	sbc	r8, sl, r5
   30764:	subs	r4, ip, r4
   30768:	mov	ip, r1
   3076c:	sbcs	r4, r8, lr
   30770:	mov	r8, r2
   30774:	ldr	r2, [fp, #28]
   30778:	ldr	lr, [fp, #8]
   3077c:	bcc	307ec <flatcc_json_printer_clear@@Base+0xad0>
   30780:	ldr	r1, [sp, #16]
   30784:	ldr	r4, [sp, #12]
   30788:	ldrb	r5, [r1, r4]
   3078c:	sub	r5, r5, #1
   30790:	strb	r5, [r1, r4]
   30794:	subs	r5, lr, r7
   30798:	sbc	r4, ip, r6
   3079c:	subs	r1, r5, r3
   307a0:	sbcs	r1, r4, r2
   307a4:	mov	r9, #0
   307a8:	movwcc	r9, #1
   307ac:	subs	r1, r7, r0
   307b0:	sbcs	r1, r6, sl
   307b4:	bcs	307e4 <flatcc_json_printer_clear@@Base+0xac8>
   307b8:	subs	r1, r5, r3
   307bc:	sbcs	r1, r4, r2
   307c0:	mov	r8, r7
   307c4:	mov	r5, r6
   307c8:	bcs	30738 <flatcc_json_printer_clear@@Base+0xa1c>
   307cc:	b	307ec <flatcc_json_printer_clear@@Base+0xad0>
   307d0:	ldr	r2, [fp, #28]
   307d4:	ldr	r3, [fp, #24]
   307d8:	ldr	r5, [fp, #20]
   307dc:	ldr	r8, [fp, #16]
   307e0:	b	307ec <flatcc_json_printer_clear@@Base+0xad0>
   307e4:	mov	r8, r7
   307e8:	mov	r5, r6
   307ec:	ldr	r4, [sp, #8]
   307f0:	subs	r0, r8, r4
   307f4:	ldr	r6, [sp, #4]
   307f8:	sbcs	r0, r5, r6
   307fc:	bcs	30870 <flatcc_json_printer_clear@@Base+0xb54>
   30800:	tst	r9, #1
   30804:	bne	30870 <flatcc_json_printer_clear@@Base+0xb54>
   30808:	adds	r1, r8, r3
   3080c:	adc	r2, r5, r2
   30810:	mov	r0, #0
   30814:	subs	r3, r1, r4
   30818:	sbcs	r3, r2, r6
   3081c:	bcc	308b0 <flatcc_json_printer_clear@@Base+0xb94>
   30820:	subs	r1, r1, r4
   30824:	str	r1, [sp, #16]
   30828:	sbc	r9, r2, r6
   3082c:	subs	r1, r4, r8
   30830:	sbc	sl, r6, r5
   30834:	ldr	r7, [fp, #36]	; 0x24
   30838:	lsl	r6, r7, #1
   3083c:	ldr	r3, [fp, #32]
   30840:	orr	r6, r6, r3, lsr #31
   30844:	subs	r4, r8, r3, lsl #1
   30848:	sbcs	r6, r5, r6
   3084c:	bcc	308b0 <flatcc_json_printer_clear@@Base+0xb94>
   30850:	mov	r2, r8
   30854:	mov	r4, r5
   30858:	ldr	r5, [sp, #16]
   3085c:	subs	r1, r5, r1
   30860:	sbcs	r1, r9, sl
   30864:	mov	r5, r4
   30868:	bcs	30890 <flatcc_json_printer_clear@@Base+0xb74>
   3086c:	b	308b0 <flatcc_json_printer_clear@@Base+0xb94>
   30870:	ldr	r7, [fp, #36]	; 0x24
   30874:	lsl	r0, r7, #1
   30878:	ldr	r3, [fp, #32]
   3087c:	orr	r1, r0, r3, lsr #31
   30880:	mov	r0, #0
   30884:	subs	r2, r8, r3, lsl #1
   30888:	sbcs	r1, r5, r1
   3088c:	bcc	308b0 <flatcc_json_printer_clear@@Base+0xb94>
   30890:	lsl	r0, r7, #2
   30894:	orr	r0, r0, r3, lsr #30
   30898:	subs	r1, lr, r3, lsl #2
   3089c:	sbc	r2, ip, r0
   308a0:	mov	r0, #0
   308a4:	subs	r1, r1, r8
   308a8:	sbcs	r1, r2, r5
   308ac:	movwcs	r0, #1
   308b0:	sub	sp, fp, #28
   308b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   308b8:	push	{r4, r5, r6, r7, fp, lr}
   308bc:	add	fp, sp, #16
   308c0:	mov	r4, r2
   308c4:	mov	r6, r1
   308c8:	mov	r5, r0
   308cc:	ldr	r0, [r0, #16]
   308d0:	ldr	r1, [r5, #20]
   308d4:	cmp	r1, r0
   308d8:	bcc	308ec <flatcc_json_printer_clear@@Base+0xbd0>
   308dc:	ldr	r2, [r5, #44]	; 0x2c
   308e0:	mov	r0, r5
   308e4:	mov	r1, #0
   308e8:	blx	r2
   308ec:	ldr	r1, [r5, #16]
   308f0:	ldr	r0, [r5, #20]
   308f4:	sub	r7, r1, r0
   308f8:	cmp	r7, r4
   308fc:	bcs	30944 <flatcc_json_printer_clear@@Base+0xc28>
   30900:	mov	r1, r6
   30904:	mov	r2, r7
   30908:	bl	14e60 <memcpy@plt>
   3090c:	ldr	r0, [r5, #20]
   30910:	ldr	r2, [r5, #44]	; 0x2c
   30914:	add	r0, r0, r7
   30918:	str	r0, [r5, #20]
   3091c:	mov	r0, r5
   30920:	mov	r1, #0
   30924:	blx	r2
   30928:	sub	r4, r4, r7
   3092c:	add	r6, r6, r7
   30930:	ldr	r1, [r5, #16]
   30934:	ldr	r0, [r5, #20]
   30938:	sub	r7, r1, r0
   3093c:	cmp	r4, r7
   30940:	bhi	30900 <flatcc_json_printer_clear@@Base+0xbe4>
   30944:	mov	r1, r6
   30948:	mov	r2, r4
   3094c:	bl	14e60 <memcpy@plt>
   30950:	ldr	r0, [r5, #20]
   30954:	add	r0, r0, r4
   30958:	str	r0, [r5, #20]
   3095c:	pop	{r4, r5, r6, r7, fp, pc}
   30960:	push	{r4, r5, r6, sl, fp, lr}
   30964:	add	fp, sp, #16
   30968:	mov	r5, r1
   3096c:	mov	r4, r0
   30970:	ldr	r0, [r0, #16]
   30974:	ldr	r1, [r4, #20]
   30978:	cmp	r1, r0
   3097c:	bcc	30990 <flatcc_json_printer_clear@@Base+0xc74>
   30980:	ldr	r2, [r4, #44]	; 0x2c
   30984:	mov	r0, r4
   30988:	mov	r1, #0
   3098c:	blx	r2
   30990:	ldr	r1, [r4, #16]
   30994:	ldr	r0, [r4, #20]
   30998:	sub	r6, r1, r0
   3099c:	cmp	r6, r5
   309a0:	bcs	309e4 <flatcc_json_printer_clear@@Base+0xcc8>
   309a4:	mov	r1, #32
   309a8:	mov	r2, r6
   309ac:	bl	14ef0 <memset@plt>
   309b0:	ldr	r0, [r4, #20]
   309b4:	ldr	r2, [r4, #44]	; 0x2c
   309b8:	add	r0, r0, r6
   309bc:	str	r0, [r4, #20]
   309c0:	mov	r0, r4
   309c4:	mov	r1, #0
   309c8:	blx	r2
   309cc:	sub	r5, r5, r6
   309d0:	ldr	r1, [r4, #16]
   309d4:	ldr	r0, [r4, #20]
   309d8:	sub	r6, r1, r0
   309dc:	cmp	r5, r6
   309e0:	bhi	309a4 <flatcc_json_printer_clear@@Base+0xc88>
   309e4:	mov	r1, #32
   309e8:	mov	r2, r5
   309ec:	bl	14ef0 <memset@plt>
   309f0:	ldr	r0, [r4, #20]
   309f4:	add	r0, r0, r5
   309f8:	str	r0, [r4, #20]
   309fc:	pop	{r4, r5, r6, sl, fp, pc}
   30a00:	add	r0, r0, r1
   30a04:	b	30a08 <flatcc_json_printer_clear@@Base+0xcec>
   30a08:	ldrh	r0, [r0]
   30a0c:	b	30a10 <flatcc_json_printer_clear@@Base+0xcf4>
   30a10:	bx	lr
   30a14:	mov	r2, r0
   30a18:	lsl	r0, r0, #2
   30a1c:	movw	ip, #43691	; 0xaaab
   30a20:	movt	ip, #43690	; 0xaaaa
   30a24:	umull	r0, r3, r0, ip
   30a28:	mov	r0, #3
   30a2c:	add	r0, r0, r3, lsr #1
   30a30:	bic	r0, r0, #3
   30a34:	tst	r1, #128	; 0x80
   30a38:	bxne	lr
   30a3c:	umull	r1, r3, r2, ip
   30a40:	lsr	r1, r3, #1
   30a44:	add	r1, r1, r1, lsl #1
   30a48:	sub	r1, r2, r1
   30a4c:	and	r2, r1, #3
   30a50:	cmp	r2, #1
   30a54:	beq	30a68 <flatcc_json_printer_clear@@Base+0xd4c>
   30a58:	cmp	r1, #2
   30a5c:	subeq	r0, r0, #1
   30a60:	bxeq	lr
   30a64:	bx	lr
   30a68:	sub	r0, r0, #2
   30a6c:	bx	lr
   30a70:	push	{r4, r5, fp, lr}
   30a74:	add	fp, sp, #8
   30a78:	cmp	r2, #0
   30a7c:	beq	30bb4 <flatcc_json_printer_clear@@Base+0xe98>
   30a80:	bic	ip, r3, #224	; 0xe0
   30a84:	ldr	lr, [r2]
   30a88:	cmp	ip, #0
   30a8c:	beq	30aac <flatcc_json_printer_clear@@Base+0xd90>
   30a90:	cmp	ip, #1
   30a94:	bne	30ba8 <flatcc_json_printer_clear@@Base+0xe8c>
   30a98:	movw	ip, #29154	; 0x71e2
   30a9c:	movt	ip, #3
   30aa0:	cmp	lr, #3
   30aa4:	bcs	30abc <flatcc_json_printer_clear@@Base+0xda0>
   30aa8:	b	30b1c <flatcc_json_printer_clear@@Base+0xe00>
   30aac:	movw	ip, #29089	; 0x71a1
   30ab0:	movt	ip, #3
   30ab4:	cmp	lr, #3
   30ab8:	bcc	30b1c <flatcc_json_printer_clear@@Base+0xe00>
   30abc:	ldrb	r4, [r1]
   30ac0:	ldrb	r4, [ip, r4, lsr #2]
   30ac4:	strb	r4, [r0]
   30ac8:	ldrb	r4, [r1]
   30acc:	ldrb	r5, [r1, #1]
   30ad0:	lsr	r5, r5, #4
   30ad4:	bfi	r5, r4, #4, #2
   30ad8:	ldrb	r4, [ip, r5]
   30adc:	strb	r4, [r0, #1]
   30ae0:	ldrb	r4, [r1, #1]
   30ae4:	ldrb	r5, [r1, #2]
   30ae8:	lsr	r5, r5, #6
   30aec:	bfi	r5, r4, #2, #4
   30af0:	ldrb	r4, [ip, r5]
   30af4:	strb	r4, [r0, #2]
   30af8:	ldrb	r4, [r1, #2]
   30afc:	and	r4, r4, #63	; 0x3f
   30b00:	ldrb	r4, [ip, r4]
   30b04:	strb	r4, [r0, #3]
   30b08:	add	r0, r0, #4
   30b0c:	add	r1, r1, #3
   30b10:	sub	lr, lr, #3
   30b14:	cmp	lr, #2
   30b18:	bhi	30abc <flatcc_json_printer_clear@@Base+0xda0>
   30b1c:	and	r3, r3, #128	; 0x80
   30b20:	cmp	lr, #1
   30b24:	beq	30b74 <flatcc_json_printer_clear@@Base+0xe58>
   30b28:	cmp	lr, #2
   30b2c:	bne	30b9c <flatcc_json_printer_clear@@Base+0xe80>
   30b30:	ldrb	r5, [r1]
   30b34:	ldrb	r5, [ip, r5, lsr #2]
   30b38:	strb	r5, [r0]
   30b3c:	ldrb	r5, [r1]
   30b40:	ldrb	r4, [r1, #1]
   30b44:	lsr	r4, r4, #4
   30b48:	bfi	r4, r5, #4, #2
   30b4c:	ldrb	r5, [ip, r4]
   30b50:	strb	r5, [r0, #1]
   30b54:	ldrb	r1, [r1, #1]
   30b58:	and	r1, r1, #15
   30b5c:	ldrb	r1, [ip, r1, lsl #2]
   30b60:	strb	r1, [r0, #2]
   30b64:	cmp	r3, #0
   30b68:	movne	r1, #61	; 0x3d
   30b6c:	strbne	r1, [r0, #3]
   30b70:	b	30b9c <flatcc_json_printer_clear@@Base+0xe80>
   30b74:	ldrb	r5, [r1]
   30b78:	ldrb	r5, [ip, r5, lsr #2]
   30b7c:	strb	r5, [r0]
   30b80:	ldrb	r1, [r1]
   30b84:	and	r1, r1, #3
   30b88:	ldrb	r1, [ip, r1, lsl #4]
   30b8c:	strb	r1, [r0, #1]
   30b90:	cmp	r3, #0
   30b94:	movwne	r1, #15677	; 0x3d3d
   30b98:	strhne	r1, [r0, #2]
   30b9c:	mov	lr, #0
   30ba0:	cmp	r2, #0
   30ba4:	popeq	{r4, r5, fp, pc}
   30ba8:	ldr	r0, [r2]
   30bac:	sub	r0, r0, lr
   30bb0:	str	r0, [r2]
   30bb4:	pop	{r4, r5, fp, pc}
   30bb8:	bx	lr
   30bbc:	bx	lr
   30bc0:	bx	lr
   30bc4:	bx	lr
   30bc8:	bx	lr
   30bcc:	bx	lr
   30bd0:	bx	lr
   30bd4:	bx	lr
   30bd8:	bx	lr
   30bdc:	bx	lr
   30be0:	bx	lr
   30be4:	bx	lr
   30be8:	bx	lr
   30bec:	ldr	r0, [r0]
   30bf0:	b	30bf4 <flatcc_json_printer_clear@@Base+0xed8>
   30bf4:	bx	lr
   30bf8:	bx	lr
   30bfc:	ldr	r0, [r0]
   30c00:	b	30c04 <flatcc_json_printer_clear@@Base+0xee8>
   30c04:	bx	lr
   30c08:	eor	r1, r1, #-2147483648	; 0x80000000
   30c0c:	b	30c14 <flatcc_json_printer_clear@@Base+0xef8>
   30c10:	eor	r3, r3, #-2147483648	; 0x80000000
   30c14:	push	{r4, r5, lr}
   30c18:	lsl	r4, r1, #1
   30c1c:	lsl	r5, r3, #1
   30c20:	teq	r4, r5
   30c24:	teqeq	r0, r2
   30c28:	orrsne	ip, r4, r0
   30c2c:	orrsne	ip, r5, r2
   30c30:	mvnsne	ip, r4, asr #21
   30c34:	mvnsne	ip, r5, asr #21
   30c38:	beq	30e24 <flatcc_json_printer_clear@@Base+0x1108>
   30c3c:	lsr	r4, r4, #21
   30c40:	rsbs	r5, r4, r5, lsr #21
   30c44:	rsblt	r5, r5, #0
   30c48:	ble	30c68 <flatcc_json_printer_clear@@Base+0xf4c>
   30c4c:	add	r4, r4, r5
   30c50:	eor	r2, r0, r2
   30c54:	eor	r3, r1, r3
   30c58:	eor	r0, r2, r0
   30c5c:	eor	r1, r3, r1
   30c60:	eor	r2, r0, r2
   30c64:	eor	r3, r1, r3
   30c68:	cmp	r5, #54	; 0x36
   30c6c:	pophi	{r4, r5, pc}
   30c70:	tst	r1, #-2147483648	; 0x80000000
   30c74:	lsl	r1, r1, #12
   30c78:	mov	ip, #1048576	; 0x100000
   30c7c:	orr	r1, ip, r1, lsr #12
   30c80:	beq	30c8c <flatcc_json_printer_clear@@Base+0xf70>
   30c84:	rsbs	r0, r0, #0
   30c88:	rsc	r1, r1, #0
   30c8c:	tst	r3, #-2147483648	; 0x80000000
   30c90:	lsl	r3, r3, #12
   30c94:	orr	r3, ip, r3, lsr #12
   30c98:	beq	30ca4 <flatcc_json_printer_clear@@Base+0xf88>
   30c9c:	rsbs	r2, r2, #0
   30ca0:	rsc	r3, r3, #0
   30ca4:	teq	r4, r5
   30ca8:	beq	30e0c <flatcc_json_printer_clear@@Base+0x10f0>
   30cac:	sub	r4, r4, #1
   30cb0:	rsbs	lr, r5, #32
   30cb4:	blt	30cd0 <flatcc_json_printer_clear@@Base+0xfb4>
   30cb8:	lsl	ip, r2, lr
   30cbc:	adds	r0, r0, r2, lsr r5
   30cc0:	adc	r1, r1, #0
   30cc4:	adds	r0, r0, r3, lsl lr
   30cc8:	adcs	r1, r1, r3, asr r5
   30ccc:	b	30cec <flatcc_json_printer_clear@@Base+0xfd0>
   30cd0:	sub	r5, r5, #32
   30cd4:	add	lr, lr, #32
   30cd8:	cmp	r2, #1
   30cdc:	lsl	ip, r3, lr
   30ce0:	orrcs	ip, ip, #2
   30ce4:	adds	r0, r0, r3, asr r5
   30ce8:	adcs	r1, r1, r3, asr #31
   30cec:	and	r5, r1, #-2147483648	; 0x80000000
   30cf0:	bpl	30d00 <flatcc_json_printer_clear@@Base+0xfe4>
   30cf4:	rsbs	ip, ip, #0
   30cf8:	rscs	r0, r0, #0
   30cfc:	rsc	r1, r1, #0
   30d00:	cmp	r1, #1048576	; 0x100000
   30d04:	bcc	30d44 <flatcc_json_printer_clear@@Base+0x1028>
   30d08:	cmp	r1, #2097152	; 0x200000
   30d0c:	bcc	30d2c <flatcc_json_printer_clear@@Base+0x1010>
   30d10:	lsrs	r1, r1, #1
   30d14:	rrxs	r0, r0
   30d18:	rrx	ip, ip
   30d1c:	add	r4, r4, #1
   30d20:	lsl	r2, r4, #21
   30d24:	cmn	r2, #4194304	; 0x400000
   30d28:	bcs	30e84 <flatcc_json_printer_clear@@Base+0x1168>
   30d2c:	cmp	ip, #-2147483648	; 0x80000000
   30d30:	lsrseq	ip, r0, #1
   30d34:	adcs	r0, r0, #0
   30d38:	adc	r1, r1, r4, lsl #20
   30d3c:	orr	r1, r1, r5
   30d40:	pop	{r4, r5, pc}
   30d44:	lsls	ip, ip, #1
   30d48:	adcs	r0, r0, r0
   30d4c:	adc	r1, r1, r1
   30d50:	tst	r1, #1048576	; 0x100000
   30d54:	sub	r4, r4, #1
   30d58:	bne	30d2c <flatcc_json_printer_clear@@Base+0x1010>
   30d5c:	teq	r1, #0
   30d60:	moveq	r1, r0
   30d64:	moveq	r0, #0
   30d68:	clz	r3, r1
   30d6c:	addeq	r3, r3, #32
   30d70:	sub	r3, r3, #11
   30d74:	subs	r2, r3, #32
   30d78:	bge	30d9c <flatcc_json_printer_clear@@Base+0x1080>
   30d7c:	adds	r2, r2, #12
   30d80:	ble	30d98 <flatcc_json_printer_clear@@Base+0x107c>
   30d84:	add	ip, r2, #20
   30d88:	rsb	r2, r2, #12
   30d8c:	lsl	r0, r1, ip
   30d90:	lsr	r1, r1, r2
   30d94:	b	30dac <flatcc_json_printer_clear@@Base+0x1090>
   30d98:	add	r2, r2, #20
   30d9c:	rsble	ip, r2, #32
   30da0:	lsl	r1, r1, r2
   30da4:	orrle	r1, r1, r0, lsr ip
   30da8:	lslle	r0, r0, r2
   30dac:	subs	r4, r4, r3
   30db0:	addge	r1, r1, r4, lsl #20
   30db4:	orrge	r1, r1, r5
   30db8:	popge	{r4, r5, pc}
   30dbc:	mvn	r4, r4
   30dc0:	subs	r4, r4, #31
   30dc4:	bge	30e00 <flatcc_json_printer_clear@@Base+0x10e4>
   30dc8:	adds	r4, r4, #12
   30dcc:	bgt	30de8 <flatcc_json_printer_clear@@Base+0x10cc>
   30dd0:	add	r4, r4, #20
   30dd4:	rsb	r2, r4, #32
   30dd8:	lsr	r0, r0, r4
   30ddc:	orr	r0, r0, r1, lsl r2
   30de0:	orr	r1, r5, r1, lsr r4
   30de4:	pop	{r4, r5, pc}
   30de8:	rsb	r4, r4, #12
   30dec:	rsb	r2, r4, #32
   30df0:	lsr	r0, r0, r2
   30df4:	orr	r0, r0, r1, lsl r4
   30df8:	mov	r1, r5
   30dfc:	pop	{r4, r5, pc}
   30e00:	lsr	r0, r1, r4
   30e04:	mov	r1, r5
   30e08:	pop	{r4, r5, pc}
   30e0c:	teq	r4, #0
   30e10:	eor	r3, r3, #1048576	; 0x100000
   30e14:	eoreq	r1, r1, #1048576	; 0x100000
   30e18:	addeq	r4, r4, #1
   30e1c:	subne	r5, r5, #1
   30e20:	b	30cac <flatcc_json_printer_clear@@Base+0xf90>
   30e24:	mvns	ip, r4, asr #21
   30e28:	mvnsne	ip, r5, asr #21
   30e2c:	beq	30e94 <flatcc_json_printer_clear@@Base+0x1178>
   30e30:	teq	r4, r5
   30e34:	teqeq	r0, r2
   30e38:	beq	30e4c <flatcc_json_printer_clear@@Base+0x1130>
   30e3c:	orrs	ip, r4, r0
   30e40:	moveq	r1, r3
   30e44:	moveq	r0, r2
   30e48:	pop	{r4, r5, pc}
   30e4c:	teq	r1, r3
   30e50:	movne	r1, #0
   30e54:	movne	r0, #0
   30e58:	popne	{r4, r5, pc}
   30e5c:	lsrs	ip, r4, #21
   30e60:	bne	30e74 <flatcc_json_printer_clear@@Base+0x1158>
   30e64:	lsls	r0, r0, #1
   30e68:	adcs	r1, r1, r1
   30e6c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   30e70:	pop	{r4, r5, pc}
   30e74:	adds	r4, r4, #4194304	; 0x400000
   30e78:	addcc	r1, r1, #1048576	; 0x100000
   30e7c:	popcc	{r4, r5, pc}
   30e80:	and	r5, r1, #-2147483648	; 0x80000000
   30e84:	orr	r1, r5, #2130706432	; 0x7f000000
   30e88:	orr	r1, r1, #15728640	; 0xf00000
   30e8c:	mov	r0, #0
   30e90:	pop	{r4, r5, pc}
   30e94:	mvns	ip, r4, asr #21
   30e98:	movne	r1, r3
   30e9c:	movne	r0, r2
   30ea0:	mvnseq	ip, r5, asr #21
   30ea4:	movne	r3, r1
   30ea8:	movne	r2, r0
   30eac:	orrs	r4, r0, r1, lsl #12
   30eb0:	orrseq	r5, r2, r3, lsl #12
   30eb4:	teqeq	r1, r3
   30eb8:	orrne	r1, r1, #524288	; 0x80000
   30ebc:	pop	{r4, r5, pc}
   30ec0:	teq	r0, #0
   30ec4:	moveq	r1, #0
   30ec8:	bxeq	lr
   30ecc:	push	{r4, r5, lr}
   30ed0:	mov	r4, #1024	; 0x400
   30ed4:	add	r4, r4, #50	; 0x32
   30ed8:	mov	r5, #0
   30edc:	mov	r1, #0
   30ee0:	b	30d5c <flatcc_json_printer_clear@@Base+0x1040>
   30ee4:	teq	r0, #0
   30ee8:	moveq	r1, #0
   30eec:	bxeq	lr
   30ef0:	push	{r4, r5, lr}
   30ef4:	mov	r4, #1024	; 0x400
   30ef8:	add	r4, r4, #50	; 0x32
   30efc:	ands	r5, r0, #-2147483648	; 0x80000000
   30f00:	rsbmi	r0, r0, #0
   30f04:	mov	r1, #0
   30f08:	b	30d5c <flatcc_json_printer_clear@@Base+0x1040>
   30f0c:	lsls	r2, r0, #1
   30f10:	asr	r1, r2, #3
   30f14:	rrx	r1, r1
   30f18:	lsl	r0, r2, #28
   30f1c:	andsne	r3, r2, #-16777216	; 0xff000000
   30f20:	teqne	r3, #-16777216	; 0xff000000
   30f24:	eorne	r1, r1, #939524096	; 0x38000000
   30f28:	bxne	lr
   30f2c:	bics	r2, r2, #-16777216	; 0xff000000
   30f30:	bxeq	lr
   30f34:	teq	r3, #-16777216	; 0xff000000
   30f38:	orreq	r1, r1, #524288	; 0x80000
   30f3c:	bxeq	lr
   30f40:	push	{r4, r5, lr}
   30f44:	mov	r4, #896	; 0x380
   30f48:	and	r5, r1, #-2147483648	; 0x80000000
   30f4c:	bic	r1, r1, #-2147483648	; 0x80000000
   30f50:	b	30d5c <flatcc_json_printer_clear@@Base+0x1040>
   30f54:	orrs	r2, r0, r1
   30f58:	bxeq	lr
   30f5c:	push	{r4, r5, lr}
   30f60:	mov	r5, #0
   30f64:	b	30f84 <flatcc_json_printer_clear@@Base+0x1268>
   30f68:	orrs	r2, r0, r1
   30f6c:	bxeq	lr
   30f70:	push	{r4, r5, lr}
   30f74:	ands	r5, r1, #-2147483648	; 0x80000000
   30f78:	bpl	30f84 <flatcc_json_printer_clear@@Base+0x1268>
   30f7c:	rsbs	r0, r0, #0
   30f80:	rsc	r1, r1, #0
   30f84:	mov	r4, #1024	; 0x400
   30f88:	add	r4, r4, #50	; 0x32
   30f8c:	lsrs	ip, r1, #22
   30f90:	beq	30d00 <flatcc_json_printer_clear@@Base+0xfe4>
   30f94:	mov	r2, #3
   30f98:	lsrs	ip, ip, #3
   30f9c:	addne	r2, r2, #3
   30fa0:	lsrs	ip, ip, #3
   30fa4:	addne	r2, r2, #3
   30fa8:	add	r2, r2, ip, lsr #3
   30fac:	rsb	r3, r2, #32
   30fb0:	lsl	ip, r0, r3
   30fb4:	lsr	r0, r0, r2
   30fb8:	orr	r0, r0, r1, lsl r3
   30fbc:	lsr	r1, r1, r2
   30fc0:	add	r4, r4, r2
   30fc4:	b	30d00 <flatcc_json_printer_clear@@Base+0xfe4>
   30fc8:	eor	r0, r0, #-2147483648	; 0x80000000
   30fcc:	b	30fd4 <flatcc_json_printer_clear@@Base+0x12b8>
   30fd0:	eor	r1, r1, #-2147483648	; 0x80000000
   30fd4:	lsls	r2, r0, #1
   30fd8:	lslsne	r3, r1, #1
   30fdc:	teqne	r2, r3
   30fe0:	mvnsne	ip, r2, asr #24
   30fe4:	mvnsne	ip, r3, asr #24
   30fe8:	beq	310e0 <flatcc_json_printer_clear@@Base+0x13c4>
   30fec:	lsr	r2, r2, #24
   30ff0:	rsbs	r3, r2, r3, lsr #24
   30ff4:	addgt	r2, r2, r3
   30ff8:	eorgt	r1, r0, r1
   30ffc:	eorgt	r0, r1, r0
   31000:	eorgt	r1, r0, r1
   31004:	rsblt	r3, r3, #0
   31008:	cmp	r3, #25
   3100c:	bxhi	lr
   31010:	tst	r0, #-2147483648	; 0x80000000
   31014:	orr	r0, r0, #8388608	; 0x800000
   31018:	bic	r0, r0, #-16777216	; 0xff000000
   3101c:	rsbne	r0, r0, #0
   31020:	tst	r1, #-2147483648	; 0x80000000
   31024:	orr	r1, r1, #8388608	; 0x800000
   31028:	bic	r1, r1, #-16777216	; 0xff000000
   3102c:	rsbne	r1, r1, #0
   31030:	teq	r2, r3
   31034:	beq	310c8 <flatcc_json_printer_clear@@Base+0x13ac>
   31038:	sub	r2, r2, #1
   3103c:	adds	r0, r0, r1, asr r3
   31040:	rsb	r3, r3, #32
   31044:	lsl	r1, r1, r3
   31048:	and	r3, r0, #-2147483648	; 0x80000000
   3104c:	bpl	31058 <flatcc_json_printer_clear@@Base+0x133c>
   31050:	rsbs	r1, r1, #0
   31054:	rsc	r0, r0, #0
   31058:	cmp	r0, #8388608	; 0x800000
   3105c:	bcc	31090 <flatcc_json_printer_clear@@Base+0x1374>
   31060:	cmp	r0, #16777216	; 0x1000000
   31064:	bcc	3107c <flatcc_json_printer_clear@@Base+0x1360>
   31068:	lsrs	r0, r0, #1
   3106c:	rrx	r1, r1
   31070:	add	r2, r2, #1
   31074:	cmp	r2, #254	; 0xfe
   31078:	bcs	31134 <flatcc_json_printer_clear@@Base+0x1418>
   3107c:	cmp	r1, #-2147483648	; 0x80000000
   31080:	adc	r0, r0, r2, lsl #23
   31084:	biceq	r0, r0, #1
   31088:	orr	r0, r0, r3
   3108c:	bx	lr
   31090:	lsls	r1, r1, #1
   31094:	adc	r0, r0, r0
   31098:	tst	r0, #8388608	; 0x800000
   3109c:	sub	r2, r2, #1
   310a0:	bne	3107c <flatcc_json_printer_clear@@Base+0x1360>
   310a4:	clz	ip, r0
   310a8:	sub	ip, ip, #8
   310ac:	subs	r2, r2, ip
   310b0:	lsl	r0, r0, ip
   310b4:	addge	r0, r0, r2, lsl #23
   310b8:	rsblt	r2, r2, #0
   310bc:	orrge	r0, r0, r3
   310c0:	orrlt	r0, r3, r0, lsr r2
   310c4:	bx	lr
   310c8:	teq	r2, #0
   310cc:	eor	r1, r1, #8388608	; 0x800000
   310d0:	eoreq	r0, r0, #8388608	; 0x800000
   310d4:	addeq	r2, r2, #1
   310d8:	subne	r3, r3, #1
   310dc:	b	31038 <flatcc_json_printer_clear@@Base+0x131c>
   310e0:	lsl	r3, r1, #1
   310e4:	mvns	ip, r2, asr #24
   310e8:	mvnsne	ip, r3, asr #24
   310ec:	beq	31140 <flatcc_json_printer_clear@@Base+0x1424>
   310f0:	teq	r2, r3
   310f4:	beq	31104 <flatcc_json_printer_clear@@Base+0x13e8>
   310f8:	teq	r2, #0
   310fc:	moveq	r0, r1
   31100:	bx	lr
   31104:	teq	r0, r1
   31108:	movne	r0, #0
   3110c:	bxne	lr
   31110:	tst	r2, #-16777216	; 0xff000000
   31114:	bne	31124 <flatcc_json_printer_clear@@Base+0x1408>
   31118:	lsls	r0, r0, #1
   3111c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   31120:	bx	lr
   31124:	adds	r2, r2, #33554432	; 0x2000000
   31128:	addcc	r0, r0, #8388608	; 0x800000
   3112c:	bxcc	lr
   31130:	and	r3, r0, #-2147483648	; 0x80000000
   31134:	orr	r0, r3, #2130706432	; 0x7f000000
   31138:	orr	r0, r0, #8388608	; 0x800000
   3113c:	bx	lr
   31140:	mvns	r2, r2, asr #24
   31144:	movne	r0, r1
   31148:	mvnseq	r3, r3, asr #24
   3114c:	movne	r1, r0
   31150:	lsls	r2, r0, #9
   31154:	lslseq	r3, r1, #9
   31158:	teqeq	r0, r1
   3115c:	orrne	r0, r0, #4194304	; 0x400000
   31160:	bx	lr
   31164:	mov	r3, #0
   31168:	b	31174 <flatcc_json_printer_clear@@Base+0x1458>
   3116c:	ands	r3, r0, #-2147483648	; 0x80000000
   31170:	rsbmi	r0, r0, #0
   31174:	movs	ip, r0
   31178:	bxeq	lr
   3117c:	orr	r3, r3, #1258291200	; 0x4b000000
   31180:	mov	r1, r0
   31184:	mov	r0, #0
   31188:	b	311cc <flatcc_json_printer_clear@@Base+0x14b0>
   3118c:	orrs	r2, r0, r1
   31190:	bxeq	lr
   31194:	mov	r3, #0
   31198:	b	311b4 <flatcc_json_printer_clear@@Base+0x1498>
   3119c:	orrs	r2, r0, r1
   311a0:	bxeq	lr
   311a4:	ands	r3, r1, #-2147483648	; 0x80000000
   311a8:	bpl	311b4 <flatcc_json_printer_clear@@Base+0x1498>
   311ac:	rsbs	r0, r0, #0
   311b0:	rsc	r1, r1, #0
   311b4:	movs	ip, r1
   311b8:	moveq	ip, r0
   311bc:	moveq	r1, r0
   311c0:	moveq	r0, #0
   311c4:	orr	r3, r3, #1526726656	; 0x5b000000
   311c8:	subeq	r3, r3, #268435456	; 0x10000000
   311cc:	sub	r3, r3, #8388608	; 0x800000
   311d0:	clz	r2, ip
   311d4:	subs	r2, r2, #8
   311d8:	sub	r3, r3, r2, lsl #23
   311dc:	blt	311fc <flatcc_json_printer_clear@@Base+0x14e0>
   311e0:	add	r3, r3, r1, lsl r2
   311e4:	lsl	ip, r0, r2
   311e8:	rsb	r2, r2, #32
   311ec:	cmp	ip, #-2147483648	; 0x80000000
   311f0:	adc	r0, r3, r0, lsr r2
   311f4:	biceq	r0, r0, #1
   311f8:	bx	lr
   311fc:	add	r2, r2, #32
   31200:	lsl	ip, r1, r2
   31204:	rsb	r2, r2, #32
   31208:	orrs	r0, r0, ip, lsl #1
   3120c:	adc	r0, r3, r1, lsr r2
   31210:	biceq	r0, r0, ip, lsr #31
   31214:	bx	lr
   31218:	cmp	r3, #0
   3121c:	cmpeq	r2, #0
   31220:	bne	31238 <flatcc_json_printer_clear@@Base+0x151c>
   31224:	cmp	r1, #0
   31228:	cmpeq	r0, #0
   3122c:	mvnne	r1, #0
   31230:	mvnne	r0, #0
   31234:	b	31254 <flatcc_json_printer_clear@@Base+0x1538>
   31238:	sub	sp, sp, #8
   3123c:	push	{sp, lr}
   31240:	bl	31264 <flatcc_json_printer_clear@@Base+0x1548>
   31244:	ldr	lr, [sp, #4]
   31248:	add	sp, sp, #8
   3124c:	pop	{r2, r3}
   31250:	bx	lr
   31254:	push	{r1, lr}
   31258:	mov	r0, #8
   3125c:	bl	14e30 <raise@plt>
   31260:	pop	{r1, pc}
   31264:	cmp	r1, r3
   31268:	cmpeq	r0, r2
   3126c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31270:	mov	r4, r0
   31274:	movcc	r0, #0
   31278:	mov	r5, r1
   3127c:	ldr	lr, [sp, #36]	; 0x24
   31280:	movcc	r1, r0
   31284:	bcc	31380 <flatcc_json_printer_clear@@Base+0x1664>
   31288:	cmp	r3, #0
   3128c:	clzeq	ip, r2
   31290:	clzne	ip, r3
   31294:	addeq	ip, ip, #32
   31298:	cmp	r5, #0
   3129c:	clzeq	r1, r4
   312a0:	addeq	r1, r1, #32
   312a4:	clzne	r1, r5
   312a8:	sub	ip, ip, r1
   312ac:	sub	sl, ip, #32
   312b0:	lsl	r9, r3, ip
   312b4:	rsb	fp, ip, #32
   312b8:	orr	r9, r9, r2, lsl sl
   312bc:	orr	r9, r9, r2, lsr fp
   312c0:	lsl	r8, r2, ip
   312c4:	cmp	r5, r9
   312c8:	cmpeq	r4, r8
   312cc:	movcc	r0, #0
   312d0:	movcc	r1, r0
   312d4:	bcc	312f0 <flatcc_json_printer_clear@@Base+0x15d4>
   312d8:	mov	r0, #1
   312dc:	subs	r4, r4, r8
   312e0:	lsl	r1, r0, sl
   312e4:	orr	r1, r1, r0, lsr fp
   312e8:	lsl	r0, r0, ip
   312ec:	sbc	r5, r5, r9
   312f0:	cmp	ip, #0
   312f4:	beq	31380 <flatcc_json_printer_clear@@Base+0x1664>
   312f8:	lsr	r6, r8, #1
   312fc:	orr	r6, r6, r9, lsl #31
   31300:	lsr	r7, r9, #1
   31304:	mov	r2, ip
   31308:	b	3132c <flatcc_json_printer_clear@@Base+0x1610>
   3130c:	subs	r3, r4, r6
   31310:	sbc	r8, r5, r7
   31314:	adds	r3, r3, r3
   31318:	adc	r8, r8, r8
   3131c:	adds	r4, r3, #1
   31320:	adc	r5, r8, #0
   31324:	subs	r2, r2, #1
   31328:	beq	31348 <flatcc_json_printer_clear@@Base+0x162c>
   3132c:	cmp	r5, r7
   31330:	cmpeq	r4, r6
   31334:	bcs	3130c <flatcc_json_printer_clear@@Base+0x15f0>
   31338:	adds	r4, r4, r4
   3133c:	adc	r5, r5, r5
   31340:	subs	r2, r2, #1
   31344:	bne	3132c <flatcc_json_printer_clear@@Base+0x1610>
   31348:	lsr	r3, r4, ip
   3134c:	orr	r3, r3, r5, lsl fp
   31350:	lsr	r2, r5, ip
   31354:	orr	r3, r3, r5, lsr sl
   31358:	adds	r0, r0, r4
   3135c:	mov	r4, r3
   31360:	lsl	r3, r2, ip
   31364:	orr	r3, r3, r4, lsl sl
   31368:	lsl	ip, r4, ip
   3136c:	orr	r3, r3, r4, lsr fp
   31370:	adc	r1, r1, r5
   31374:	subs	r0, r0, ip
   31378:	mov	r5, r2
   3137c:	sbc	r1, r1, r3
   31380:	cmp	lr, #0
   31384:	strdne	r4, [lr]
   31388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003138c <__libc_csu_init@@Base>:
   3138c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31390:	mov	r7, r0
   31394:	ldr	r6, [pc, #72]	; 313e4 <__libc_csu_init@@Base+0x58>
   31398:	ldr	r5, [pc, #72]	; 313e8 <__libc_csu_init@@Base+0x5c>
   3139c:	add	r6, pc, r6
   313a0:	add	r5, pc, r5
   313a4:	sub	r6, r6, r5
   313a8:	mov	r8, r1
   313ac:	mov	r9, r2
   313b0:	bl	14e10 <raise@plt-0x20>
   313b4:	asrs	r6, r6, #2
   313b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   313bc:	mov	r4, #0
   313c0:	add	r4, r4, #1
   313c4:	ldr	r3, [r5], #4
   313c8:	mov	r2, r9
   313cc:	mov	r1, r8
   313d0:	mov	r0, r7
   313d4:	blx	r3
   313d8:	cmp	r6, r4
   313dc:	bne	313c0 <__libc_csu_init@@Base+0x34>
   313e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   313e4:	andeq	r6, r1, r8, ror #22
   313e8:	andeq	r6, r1, r0, ror #22

000313ec <__libc_csu_fini@@Base>:
   313ec:	bx	lr

Disassembly of section .fini:

000313f0 <.fini>:
   313f0:	push	{r3, lr}
   313f4:	pop	{r3, pc}
