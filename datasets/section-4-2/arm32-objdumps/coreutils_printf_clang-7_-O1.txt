
../repos/coreutils/src/printf:     file format elf32-littlearm


Disassembly of section .init:

00010dd4 <.init>:
   10dd4:	push	{r3, lr}
   10dd8:	bl	110b8 <__mempcpy_chk@plt+0x48>
   10ddc:	pop	{r3, pc}

Disassembly of section .plt:

00010de0 <calloc@plt-0x14>:
   10de0:	push	{lr}		; (str lr, [sp, #-4]!)
   10de4:	ldr	lr, [pc, #4]	; 10df0 <calloc@plt-0x4>
   10de8:	add	lr, pc, lr
   10dec:	ldr	pc, [lr, #8]!
   10df0:	andeq	r6, r1, r0, lsl r2

00010df4 <calloc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #528]!	; 0x210

00010e00 <fputs_unlocked@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #520]!	; 0x208

00010e0c <uselocale@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #512]!	; 0x200

00010e18 <iconv@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #504]!	; 0x1f8

00010e24 <strcmp@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e30 <fflush@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #488]!	; 0x1e8

00010e3c <free@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #480]!	; 0x1e0

00010e48 <ferror@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #472]!	; 0x1d8

00010e54 <_exit@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e60 <memcpy@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #456]!	; 0x1c8

00010e6c <mbsinit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #448]!	; 0x1c0

00010e78 <strtold@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #440]!	; 0x1b8

00010e84 <memcmp@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e90 <dcgettext@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #424]!	; 0x1a8

00010e9c <realloc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #416]!	; 0x1a0

00010ea8 <textdomain@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #408]!	; 0x198

00010eb4 <iswprint@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #400]!	; 0x190

00010ec0 <fwrite@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #392]!	; 0x188

00010ecc <lseek64@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #384]!	; 0x180

00010ed8 <__ctype_get_mb_cur_max@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #376]!	; 0x178

00010ee4 <__fpending@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #368]!	; 0x170

00010ef0 <ferror_unlocked@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #360]!	; 0x168

00010efc <mbrtowc@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #352]!	; 0x160

00010f08 <error@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #344]!	; 0x158

00010f14 <getenv@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #336]!	; 0x150

00010f20 <malloc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #328]!	; 0x148

00010f2c <iconv_open@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #320]!	; 0x140

00010f38 <__libc_start_main@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #312]!	; 0x138

00010f44 <__vfprintf_chk@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #304]!	; 0x130

00010f50 <__freading@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #296]!	; 0x128

00010f5c <__gmon_start__@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #288]!	; 0x120

00010f68 <__ctype_b_loc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #280]!	; 0x118

00010f74 <exit@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #272]!	; 0x110

00010f80 <strlen@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #264]!	; 0x108

00010f8c <__errno_location@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #256]!	; 0x100

00010f98 <__cxa_atexit@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #248]!	; 0xf8

00010fa4 <memset@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #240]!	; 0xf0

00010fb0 <__printf_chk@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #232]!	; 0xe8

00010fbc <fileno@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #224]!	; 0xe0

00010fc8 <strtoumax@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #216]!	; 0xd8

00010fd4 <__fprintf_chk@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #208]!	; 0xd0

00010fe0 <memchr@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #200]!	; 0xc8

00010fec <strtoimax@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #192]!	; 0xc0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #184]!	; 0xb8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #176]!	; 0xb0

00011010 <setlocale@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #168]!	; 0xa8

0001101c <strrchr@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #160]!	; 0xa0

00011028 <nl_langinfo@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #152]!	; 0x98

00011034 <newlocale@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #144]!	; 0x90

00011040 <bindtextdomain@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #136]!	; 0x88

0001104c <strncmp@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #128]!	; 0x80

00011058 <abort@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #120]!	; 0x78

00011064 <putchar_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #112]!	; 0x70

00011070 <__mempcpy_chk@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #104]!	; 0x68

Disassembly of section .text:

0001107c <.text>:
   1107c:	mov	fp, #0
   11080:	mov	lr, #0
   11084:	pop	{r1}		; (ldr r1, [sp], #4)
   11088:	mov	r2, sp
   1108c:	push	{r2}		; (str r2, [sp, #-4]!)
   11090:	push	{r0}		; (str r0, [sp, #-4]!)
   11094:	ldr	ip, [pc, #16]	; 110ac <__mempcpy_chk@plt+0x3c>
   11098:	push	{ip}		; (str ip, [sp, #-4]!)
   1109c:	ldr	r0, [pc, #12]	; 110b0 <__mempcpy_chk@plt+0x40>
   110a0:	ldr	r3, [pc, #12]	; 110b4 <__mempcpy_chk@plt+0x44>
   110a4:	bl	10f38 <__libc_start_main@plt>
   110a8:	bl	11058 <abort@plt>
   110ac:	andeq	r5, r1, r8, ror fp
   110b0:	andeq	r1, r1, r8, ror r4
   110b4:	andeq	r5, r1, r8, lsl fp
   110b8:	ldr	r3, [pc, #20]	; 110d4 <__mempcpy_chk@plt+0x64>
   110bc:	ldr	r2, [pc, #20]	; 110d8 <__mempcpy_chk@plt+0x68>
   110c0:	add	r3, pc, r3
   110c4:	ldr	r2, [r3, r2]
   110c8:	cmp	r2, #0
   110cc:	bxeq	lr
   110d0:	b	10f5c <__gmon_start__@plt>
   110d4:	andeq	r5, r1, r8, lsr pc
   110d8:	andeq	r0, r0, r4, ror #1
   110dc:	ldr	r0, [pc, #24]	; 110fc <__mempcpy_chk@plt+0x8c>
   110e0:	ldr	r3, [pc, #24]	; 11100 <__mempcpy_chk@plt+0x90>
   110e4:	cmp	r3, r0
   110e8:	bxeq	lr
   110ec:	ldr	r3, [pc, #16]	; 11104 <__mempcpy_chk@plt+0x94>
   110f0:	cmp	r3, #0
   110f4:	bxeq	lr
   110f8:	bx	r3
   110fc:	andeq	r7, r2, r8, lsr r1
   11100:	andeq	r7, r2, r8, lsr r1
   11104:	andeq	r0, r0, r0
   11108:	ldr	r0, [pc, #36]	; 11134 <__mempcpy_chk@plt+0xc4>
   1110c:	ldr	r1, [pc, #36]	; 11138 <__mempcpy_chk@plt+0xc8>
   11110:	sub	r1, r1, r0
   11114:	asr	r1, r1, #2
   11118:	add	r1, r1, r1, lsr #31
   1111c:	asrs	r1, r1, #1
   11120:	bxeq	lr
   11124:	ldr	r3, [pc, #16]	; 1113c <__mempcpy_chk@plt+0xcc>
   11128:	cmp	r3, #0
   1112c:	bxeq	lr
   11130:	bx	r3
   11134:	andeq	r7, r2, r8, lsr r1
   11138:	andeq	r7, r2, r8, lsr r1
   1113c:	andeq	r0, r0, r0
   11140:	push	{r4, lr}
   11144:	ldr	r4, [pc, #24]	; 11164 <__mempcpy_chk@plt+0xf4>
   11148:	ldrb	r3, [r4]
   1114c:	cmp	r3, #0
   11150:	popne	{r4, pc}
   11154:	bl	110dc <__mempcpy_chk@plt+0x6c>
   11158:	mov	r3, #1
   1115c:	strb	r3, [r4]
   11160:	pop	{r4, pc}
   11164:	andeq	r7, r2, r8, asr #2
   11168:	b	11108 <__mempcpy_chk@plt+0x98>
   1116c:	push	{fp, lr}
   11170:	mov	fp, sp
   11174:	mov	r4, r0
   11178:	cmp	r0, #0
   1117c:	bne	112b0 <__mempcpy_chk@plt+0x240>
   11180:	movw	r1, #23499	; 0x5bcb
   11184:	movt	r1, #1
   11188:	mov	r0, #0
   1118c:	mov	r2, #5
   11190:	bl	10e90 <dcgettext@plt>
   11194:	mov	r1, r0
   11198:	movw	r0, #29016	; 0x7158
   1119c:	movt	r0, #2
   111a0:	ldr	r2, [r0]
   111a4:	mov	r0, #1
   111a8:	mov	r3, r2
   111ac:	bl	10fb0 <__printf_chk@plt>
   111b0:	movw	r1, #23548	; 0x5bfc
   111b4:	movt	r1, #1
   111b8:	mov	r0, #0
   111bc:	mov	r2, #5
   111c0:	bl	10e90 <dcgettext@plt>
   111c4:	movw	r5, #28996	; 0x7144
   111c8:	movt	r5, #2
   111cc:	ldr	r1, [r5]
   111d0:	bl	10e00 <fputs_unlocked@plt>
   111d4:	movw	r1, #23621	; 0x5c45
   111d8:	movt	r1, #1
   111dc:	mov	r0, #0
   111e0:	mov	r2, #5
   111e4:	bl	10e90 <dcgettext@plt>
   111e8:	ldr	r1, [r5]
   111ec:	bl	10e00 <fputs_unlocked@plt>
   111f0:	movw	r1, #23666	; 0x5c72
   111f4:	movt	r1, #1
   111f8:	mov	r0, #0
   111fc:	mov	r2, #5
   11200:	bl	10e90 <dcgettext@plt>
   11204:	ldr	r1, [r5]
   11208:	bl	10e00 <fputs_unlocked@plt>
   1120c:	movw	r1, #23720	; 0x5ca8
   11210:	movt	r1, #1
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	bl	10e90 <dcgettext@plt>
   11220:	ldr	r1, [r5]
   11224:	bl	10e00 <fputs_unlocked@plt>
   11228:	movw	r1, #23817	; 0x5d09
   1122c:	movt	r1, #1
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	bl	10e90 <dcgettext@plt>
   1123c:	ldr	r1, [r5]
   11240:	bl	10e00 <fputs_unlocked@plt>
   11244:	movw	r1, #24046	; 0x5dee
   11248:	movt	r1, #1
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	bl	10e90 <dcgettext@plt>
   11258:	ldr	r1, [r5]
   1125c:	bl	10e00 <fputs_unlocked@plt>
   11260:	movw	r1, #24298	; 0x5eea
   11264:	movt	r1, #1
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	bl	10e90 <dcgettext@plt>
   11274:	ldr	r1, [r5]
   11278:	bl	10e00 <fputs_unlocked@plt>
   1127c:	movw	r1, #24746	; 0x60aa
   11280:	movt	r1, #1
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	bl	10e90 <dcgettext@plt>
   11290:	mov	r1, r0
   11294:	movw	r2, #24937	; 0x6169
   11298:	movt	r2, #1
   1129c:	mov	r0, #1
   112a0:	bl	10fb0 <__printf_chk@plt>
   112a4:	bl	112f4 <__mempcpy_chk@plt+0x284>
   112a8:	mov	r0, r4
   112ac:	bl	10f74 <exit@plt>
   112b0:	movw	r0, #28992	; 0x7140
   112b4:	movt	r0, #2
   112b8:	ldr	r5, [r0]
   112bc:	movw	r1, #23460	; 0x5ba4
   112c0:	movt	r1, #1
   112c4:	mov	r0, #0
   112c8:	mov	r2, #5
   112cc:	bl	10e90 <dcgettext@plt>
   112d0:	mov	r2, r0
   112d4:	movw	r0, #29016	; 0x7158
   112d8:	movt	r0, #2
   112dc:	ldr	r3, [r0]
   112e0:	mov	r0, r5
   112e4:	mov	r1, #1
   112e8:	bl	10fd4 <__fprintf_chk@plt>
   112ec:	mov	r0, r4
   112f0:	bl	10f74 <exit@plt>
   112f4:	push	{r4, r5, fp, lr}
   112f8:	add	fp, sp, #8
   112fc:	sub	sp, sp, #56	; 0x38
   11300:	movw	r0, #25736	; 0x6488
   11304:	movt	r0, #1
   11308:	add	r1, r0, #32
   1130c:	mov	r5, sp
   11310:	mov	r2, #48	; 0x30
   11314:	vld1.64	{d16-d17}, [r1]
   11318:	add	r1, r5, #32
   1131c:	add	r3, r0, #16
   11320:	vld1.64	{d18-d19}, [r0], r2
   11324:	vld1.64	{d20-d21}, [r3]
   11328:	vldr	d22, [r0]
   1132c:	vst1.64	{d16-d17}, [r1]
   11330:	add	r0, r5, #16
   11334:	vst1.64	{d20-d21}, [r0]
   11338:	mov	r0, r5
   1133c:	vst1.64	{d18-d19}, [r0], r2
   11340:	vstr	d22, [r0]
   11344:	ldr	r1, [sp]
   11348:	cmp	r1, #0
   1134c:	beq	11374 <__mempcpy_chk@plt+0x304>
   11350:	mov	r5, sp
   11354:	movw	r4, #24937	; 0x6169
   11358:	movt	r4, #1
   1135c:	mov	r0, r4
   11360:	bl	10e24 <strcmp@plt>
   11364:	cmp	r0, #0
   11368:	ldrne	r1, [r5, #8]!
   1136c:	cmpne	r1, #0
   11370:	bne	1135c <__mempcpy_chk@plt+0x2ec>
   11374:	ldr	r4, [r5, #4]
   11378:	movw	r1, #25198	; 0x626e
   1137c:	movt	r1, #1
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	bl	10e90 <dcgettext@plt>
   1138c:	mov	r1, r0
   11390:	movw	r2, #25001	; 0x61a9
   11394:	movt	r2, #1
   11398:	movw	r3, #25221	; 0x6285
   1139c:	movt	r3, #1
   113a0:	mov	r0, #1
   113a4:	bl	10fb0 <__printf_chk@plt>
   113a8:	movw	r5, #24937	; 0x6169
   113ac:	movt	r5, #1
   113b0:	cmp	r4, #0
   113b4:	moveq	r4, r5
   113b8:	mov	r0, #5
   113bc:	mov	r1, #0
   113c0:	bl	11010 <setlocale@plt>
   113c4:	cmp	r0, #0
   113c8:	beq	11408 <__mempcpy_chk@plt+0x398>
   113cc:	movw	r1, #25261	; 0x62ad
   113d0:	movt	r1, #1
   113d4:	mov	r2, #3
   113d8:	bl	1104c <strncmp@plt>
   113dc:	cmp	r0, #0
   113e0:	beq	11408 <__mempcpy_chk@plt+0x398>
   113e4:	movw	r1, #25265	; 0x62b1
   113e8:	movt	r1, #1
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	bl	10e90 <dcgettext@plt>
   113f8:	movw	r1, #28996	; 0x7144
   113fc:	movt	r1, #2
   11400:	ldr	r1, [r1]
   11404:	bl	10e00 <fputs_unlocked@plt>
   11408:	movw	r1, #25336	; 0x62f8
   1140c:	movt	r1, #1
   11410:	mov	r0, #0
   11414:	mov	r2, #5
   11418:	bl	10e90 <dcgettext@plt>
   1141c:	mov	r1, r0
   11420:	movw	r2, #25221	; 0x6285
   11424:	movt	r2, #1
   11428:	mov	r0, #1
   1142c:	mov	r3, r5
   11430:	bl	10fb0 <__printf_chk@plt>
   11434:	movw	r1, #25363	; 0x6313
   11438:	movt	r1, #1
   1143c:	mov	r0, #0
   11440:	mov	r2, #5
   11444:	bl	10e90 <dcgettext@plt>
   11448:	mov	r1, r0
   1144c:	movw	r0, #25131	; 0x622b
   11450:	movt	r0, #1
   11454:	movw	r3, #23620	; 0x5c44
   11458:	movt	r3, #1
   1145c:	cmp	r4, r5
   11460:	moveq	r3, r0
   11464:	mov	r0, #1
   11468:	mov	r2, r4
   1146c:	bl	10fb0 <__printf_chk@plt>
   11470:	sub	sp, fp, #8
   11474:	pop	{r4, r5, fp, pc}
   11478:	push	{r4, r5, r6, r7, fp, lr}
   1147c:	add	fp, sp, #16
   11480:	sub	sp, sp, #8
   11484:	mov	r5, r1
   11488:	mov	r4, r0
   1148c:	ldr	r0, [r1]
   11490:	bl	12788 <__mempcpy_chk@plt+0x1718>
   11494:	movw	r1, #23620	; 0x5c44
   11498:	movt	r1, #1
   1149c:	mov	r0, #6
   114a0:	bl	11010 <setlocale@plt>
   114a4:	movw	r6, #25005	; 0x61ad
   114a8:	movt	r6, #1
   114ac:	movw	r1, #24944	; 0x6170
   114b0:	movt	r1, #1
   114b4:	mov	r0, r6
   114b8:	bl	11040 <bindtextdomain@plt>
   114bc:	mov	r0, r6
   114c0:	bl	10ea8 <textdomain@plt>
   114c4:	movw	r0, #9848	; 0x2678
   114c8:	movt	r0, #1
   114cc:	bl	15b7c <__mempcpy_chk@plt+0x4b0c>
   114d0:	movw	r7, #29004	; 0x714c
   114d4:	movt	r7, #2
   114d8:	mov	r0, #0
   114dc:	strb	r0, [r7]
   114e0:	movw	r0, #24968	; 0x6188
   114e4:	movt	r0, #1
   114e8:	bl	10f14 <getenv@plt>
   114ec:	cmp	r0, #0
   114f0:	movwne	r0, #1
   114f4:	movw	r1, #29005	; 0x714d
   114f8:	movt	r1, #2
   114fc:	strb	r0, [r1]
   11500:	cmp	r4, #2
   11504:	bne	1157c <__mempcpy_chk@plt+0x50c>
   11508:	ldr	r6, [r5, #4]
   1150c:	movw	r1, #24984	; 0x6198
   11510:	movt	r1, #1
   11514:	mov	r0, r6
   11518:	bl	10e24 <strcmp@plt>
   1151c:	cmp	r0, #0
   11520:	beq	11658 <__mempcpy_chk@plt+0x5e8>
   11524:	movw	r1, #24991	; 0x619f
   11528:	movt	r1, #1
   1152c:	mov	r0, r6
   11530:	bl	10e24 <strcmp@plt>
   11534:	cmp	r0, #0
   11538:	bne	11580 <__mempcpy_chk@plt+0x510>
   1153c:	movw	r0, #28912	; 0x70f0
   11540:	movt	r0, #2
   11544:	ldr	r3, [r0]
   11548:	movw	r0, #28996	; 0x7144
   1154c:	movt	r0, #2
   11550:	ldr	r0, [r0]
   11554:	mov	r4, #0
   11558:	movw	r1, #25015	; 0x61b7
   1155c:	movt	r1, #1
   11560:	stm	sp, {r1, r4}
   11564:	movw	r1, #24937	; 0x6169
   11568:	movt	r1, #1
   1156c:	movw	r2, #25001	; 0x61a9
   11570:	movt	r2, #1
   11574:	bl	14b88 <__mempcpy_chk@plt+0x3b18>
   11578:	b	11620 <__mempcpy_chk@plt+0x5b0>
   1157c:	blt	1162c <__mempcpy_chk@plt+0x5bc>
   11580:	mov	r6, r5
   11584:	ldr	r0, [r6, #4]!
   11588:	movw	r1, #25031	; 0x61c7
   1158c:	movt	r1, #1
   11590:	bl	10e24 <strcmp@plt>
   11594:	cmp	r0, #0
   11598:	beq	115a4 <__mempcpy_chk@plt+0x534>
   1159c:	mov	r6, r5
   115a0:	b	115b0 <__mempcpy_chk@plt+0x540>
   115a4:	cmp	r4, #2
   115a8:	ble	1162c <__mempcpy_chk@plt+0x5bc>
   115ac:	sub	r4, r4, #1
   115b0:	add	r5, r6, #8
   115b4:	sub	r4, r4, #2
   115b8:	ldr	r6, [r6, #4]
   115bc:	mov	r0, r6
   115c0:	mov	r1, r4
   115c4:	mov	r2, r5
   115c8:	bl	11660 <__mempcpy_chk@plt+0x5f0>
   115cc:	add	r5, r5, r0, lsl #2
   115d0:	sub	r4, r4, r0
   115d4:	cmp	r0, #1
   115d8:	cmpge	r4, #0
   115dc:	bgt	115bc <__mempcpy_chk@plt+0x54c>
   115e0:	cmp	r4, #1
   115e4:	blt	1161c <__mempcpy_chk@plt+0x5ac>
   115e8:	movw	r1, #25050	; 0x61da
   115ec:	movt	r1, #1
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	bl	10e90 <dcgettext@plt>
   115fc:	mov	r4, r0
   11600:	ldr	r0, [r5]
   11604:	bl	13fc0 <__mempcpy_chk@plt+0x2f50>
   11608:	mov	r3, r0
   1160c:	mov	r0, #0
   11610:	mov	r1, #0
   11614:	mov	r2, r4
   11618:	bl	10f08 <error@plt>
   1161c:	ldrb	r4, [r7]
   11620:	mov	r0, r4
   11624:	sub	sp, fp, #16
   11628:	pop	{r4, r5, r6, r7, fp, pc}
   1162c:	movw	r1, #25034	; 0x61ca
   11630:	movt	r1, #1
   11634:	mov	r0, #0
   11638:	mov	r2, #5
   1163c:	bl	10e90 <dcgettext@plt>
   11640:	mov	r2, r0
   11644:	mov	r0, #0
   11648:	mov	r1, #0
   1164c:	bl	10f08 <error@plt>
   11650:	mov	r0, #1
   11654:	bl	1116c <__mempcpy_chk@plt+0xfc>
   11658:	mov	r0, #0
   1165c:	bl	1116c <__mempcpy_chk@plt+0xfc>
   11660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11664:	add	fp, sp, #28
   11668:	sub	sp, sp, #300	; 0x12c
   1166c:	mov	r4, r2
   11670:	mov	r9, r1
   11674:	mov	r7, r0
   11678:	add	r0, sp, #40	; 0x28
   1167c:	add	r0, r0, #99	; 0x63
   11680:	str	r0, [sp, #28]
   11684:	mov	sl, #0
   11688:	mov	r0, #0
   1168c:	str	r0, [sp, #32]
   11690:	mov	r8, #0
   11694:	str	r1, [sp, #24]
   11698:	b	116a0 <__mempcpy_chk@plt+0x630>
   1169c:	add	r7, r6, #1
   116a0:	ldrb	r0, [r7]
   116a4:	cmp	r0, #37	; 0x25
   116a8:	beq	116e0 <__mempcpy_chk@plt+0x670>
   116ac:	cmp	r0, #92	; 0x5c
   116b0:	beq	116cc <__mempcpy_chk@plt+0x65c>
   116b4:	cmp	r0, #0
   116b8:	beq	11b1c <__mempcpy_chk@plt+0xaac>
   116bc:	bl	11064 <putchar_unlocked@plt>
   116c0:	mov	r6, r7
   116c4:	add	r7, r7, #1
   116c8:	b	116a0 <__mempcpy_chk@plt+0x630>
   116cc:	mov	r0, r7
   116d0:	mov	r1, #0
   116d4:	bl	12070 <__mempcpy_chk@plt+0x1000>
   116d8:	add	r6, r7, r0
   116dc:	b	1169c <__mempcpy_chk@plt+0x62c>
   116e0:	mov	r6, r7
   116e4:	ldrb	r0, [r6, #1]!
   116e8:	cmp	r0, #113	; 0x71
   116ec:	beq	11724 <__mempcpy_chk@plt+0x6b4>
   116f0:	cmp	r0, #98	; 0x62
   116f4:	beq	11710 <__mempcpy_chk@plt+0x6a0>
   116f8:	cmp	r0, #37	; 0x25
   116fc:	bne	11754 <__mempcpy_chk@plt+0x6e4>
   11700:	mov	r0, #37	; 0x25
   11704:	bl	11064 <putchar_unlocked@plt>
   11708:	add	r7, r6, #1
   1170c:	b	116a0 <__mempcpy_chk@plt+0x630>
   11710:	cmp	r9, #1
   11714:	blt	1169c <__mempcpy_chk@plt+0x62c>
   11718:	ldr	r0, [r4], #4
   1171c:	bl	11b9c <__mempcpy_chk@plt+0xb2c>
   11720:	b	11748 <__mempcpy_chk@plt+0x6d8>
   11724:	cmp	r9, #1
   11728:	blt	1169c <__mempcpy_chk@plt+0x62c>
   1172c:	ldr	r1, [r4], #4
   11730:	mov	r0, #3
   11734:	bl	13dcc <__mempcpy_chk@plt+0x2d5c>
   11738:	movw	r1, #28996	; 0x7144
   1173c:	movt	r1, #2
   11740:	ldr	r1, [r1]
   11744:	bl	10e00 <fputs_unlocked@plt>
   11748:	sub	r9, r9, #1
   1174c:	add	r7, r6, #1
   11750:	b	116a0 <__mempcpy_chk@plt+0x630>
   11754:	str	r8, [sp, #36]	; 0x24
   11758:	mov	r8, r4
   1175c:	mov	r4, #0
   11760:	add	r0, sp, #40	; 0x28
   11764:	mov	r1, #0
   11768:	mov	r2, #256	; 0x100
   1176c:	bl	10fa4 <memset@plt>
   11770:	mov	r5, #1
   11774:	strb	r5, [sp, #128]	; 0x80
   11778:	strb	r5, [sp, #160]	; 0xa0
   1177c:	strb	r5, [sp, #157]	; 0x9d
   11780:	strb	r5, [sp, #155]	; 0x9b
   11784:	strb	r5, [sp, #151]	; 0x97
   11788:	strb	r5, [sp, #145]	; 0x91
   1178c:	strb	r5, [sp, #111]	; 0x6f
   11790:	movw	r0, #257	; 0x101
   11794:	strh	r0, [sp, #109]	; 0x6d
   11798:	strb	r5, [sp, #105]	; 0x69
   1179c:	strb	r5, [sp, #137]	; 0x89
   117a0:	ldr	r0, [sp, #28]
   117a4:	strb	r5, [r0, #4]
   117a8:	movw	r1, #257	; 0x101
   117ac:	movt	r1, #257	; 0x101
   117b0:	str	r1, [r0]
   117b4:	b	117c0 <__mempcpy_chk@plt+0x750>
   117b8:	add	r4, r4, #1
   117bc:	add	r5, r5, #1
   117c0:	ldrb	r0, [r7, r5]
   117c4:	sub	r0, r0, #32
   117c8:	cmp	r0, #41	; 0x29
   117cc:	bhi	118c8 <__mempcpy_chk@plt+0x858>
   117d0:	add	r1, pc, #0
   117d4:	ldr	pc, [r1, r0, lsl #2]
   117d8:			; <UNDEFINED> instruction: 0x000117b8
   117dc:	andeq	r1, r1, r8, asr #17
   117e0:	andeq	r1, r1, r8, asr #17
   117e4:	andeq	r1, r1, r8, lsr #17
   117e8:	andeq	r1, r1, r8, asr #17
   117ec:	andeq	r1, r1, r8, asr #17
   117f0:	andeq	r1, r1, r8, asr #17
   117f4:	andeq	r1, r1, r0, lsl #17
   117f8:	andeq	r1, r1, r8, asr #17
   117fc:	andeq	r1, r1, r8, asr #17
   11800:	andeq	r1, r1, ip, lsl #18
   11804:			; <UNDEFINED> instruction: 0x000117b8
   11808:	andeq	r1, r1, r8, asr #17
   1180c:			; <UNDEFINED> instruction: 0x000117b8
   11810:	andeq	r1, r1, r8, asr #17
   11814:	andeq	r1, r1, r8, asr #17
   11818:			; <UNDEFINED> instruction: 0x000118bc
   1181c:	andeq	r1, r1, r8, asr #17
   11820:	andeq	r1, r1, r8, asr #17
   11824:	andeq	r1, r1, r8, asr #17
   11828:	andeq	r1, r1, r8, asr #17
   1182c:	andeq	r1, r1, r8, asr #17
   11830:	andeq	r1, r1, r8, asr #17
   11834:	andeq	r1, r1, r8, asr #17
   11838:	andeq	r1, r1, r8, asr #17
   1183c:	andeq	r1, r1, r8, asr #17
   11840:	andeq	r1, r1, r8, asr #17
   11844:	andeq	r1, r1, r8, asr #17
   11848:	andeq	r1, r1, r8, asr #17
   1184c:	andeq	r1, r1, r8, asr #17
   11850:	andeq	r1, r1, r8, asr #17
   11854:	andeq	r1, r1, r8, asr #17
   11858:	andeq	r1, r1, r8, asr #17
   1185c:	andeq	r1, r1, r8, asr #17
   11860:	andeq	r1, r1, r8, asr #17
   11864:	andeq	r1, r1, r8, asr #17
   11868:	andeq	r1, r1, r8, asr #17
   1186c:	andeq	r1, r1, r8, asr #17
   11870:	andeq	r1, r1, r8, asr #17
   11874:	andeq	r1, r1, r8, asr #17
   11878:	andeq	r1, r1, r8, asr #17
   1187c:	andeq	r1, r1, r0, lsl #17
   11880:	strb	sl, [sp, #160]	; 0xa0
   11884:	strb	sl, [sp, #128]	; 0x80
   11888:	strb	sl, [sp, #155]	; 0x9b
   1188c:	strb	sl, [sp, #151]	; 0x97
   11890:	strb	sl, [sp, #109]	; 0x6d
   11894:	strb	sl, [sp, #141]	; 0x8d
   11898:	strb	sl, [sp, #139]	; 0x8b
   1189c:	strb	sl, [sp, #105]	; 0x69
   118a0:	strb	sl, [sp, #137]	; 0x89
   118a4:	b	117b8 <__mempcpy_chk@plt+0x748>
   118a8:	strb	sl, [sp, #155]	; 0x9b
   118ac:	strb	sl, [sp, #157]	; 0x9d
   118b0:	strb	sl, [sp, #145]	; 0x91
   118b4:	strh	sl, [sp, #139]	; 0x8b
   118b8:	b	117b8 <__mempcpy_chk@plt+0x748>
   118bc:	strb	sl, [sp, #139]	; 0x8b
   118c0:	strb	sl, [sp, #155]	; 0x9b
   118c4:	b	117b8 <__mempcpy_chk@plt+0x748>
   118c8:	mov	r6, r7
   118cc:	ldrb	r0, [r6, r5]!
   118d0:	sub	r1, r0, #48	; 0x30
   118d4:	mov	r3, #0
   118d8:	cmp	r1, #9
   118dc:	bhi	11904 <__mempcpy_chk@plt+0x894>
   118e0:	add	r0, r7, r4
   118e4:	ldrb	r0, [r0, #2]
   118e8:	sub	r1, r0, #48	; 0x30
   118ec:	add	r4, r4, #1
   118f0:	cmp	r1, #10
   118f4:	bcc	118e0 <__mempcpy_chk@plt+0x870>
   118f8:	add	r1, r7, r4
   118fc:	add	r6, r1, #1
   11900:	add	r5, r4, #1
   11904:	mov	r4, r8
   11908:	b	1195c <__mempcpy_chk@plt+0x8ec>
   1190c:	cmp	r9, #1
   11910:	blt	1193c <__mempcpy_chk@plt+0x8cc>
   11914:	mov	r4, r8
   11918:	ldr	r0, [r8]
   1191c:	bl	11be0 <__mempcpy_chk@plt+0xb70>
   11920:	str	r0, [sp, #32]
   11924:	adds	r0, r0, #-2147483648	; 0x80000000
   11928:	adcs	r0, r1, #0
   1192c:	bne	11b2c <__mempcpy_chk@plt+0xabc>
   11930:	sub	r9, r9, #1
   11934:	add	r4, r4, #4
   11938:	b	11948 <__mempcpy_chk@plt+0x8d8>
   1193c:	mov	r0, #0
   11940:	str	r0, [sp, #32]
   11944:	mov	r4, r8
   11948:	add	r0, r7, r5
   1194c:	add	r6, r0, #1
   11950:	add	r5, r5, #1
   11954:	ldrb	r0, [r0, #1]
   11958:	mov	r3, #1
   1195c:	mov	r8, #0
   11960:	cmp	r0, #46	; 0x2e
   11964:	bne	119f4 <__mempcpy_chk@plt+0x984>
   11968:	strb	sl, [sp, #139]	; 0x8b
   1196c:	ldrb	r0, [r6, #1]
   11970:	cmp	r0, #42	; 0x2a
   11974:	bne	119b4 <__mempcpy_chk@plt+0x944>
   11978:	add	r5, r5, #2
   1197c:	add	r6, r6, #2
   11980:	mov	r8, #1
   11984:	cmp	r9, #1
   11988:	blt	119cc <__mempcpy_chk@plt+0x95c>
   1198c:	str	r3, [sp, #20]
   11990:	ldr	r0, [r4]
   11994:	bl	11be0 <__mempcpy_chk@plt+0xb70>
   11998:	cmp	r1, #0
   1199c:	blt	119d8 <__mempcpy_chk@plt+0x968>
   119a0:	str	r0, [sp, #36]	; 0x24
   119a4:	subs	r0, r0, #-2147483648	; 0x80000000
   119a8:	sbcs	r0, r1, #0
   119ac:	blt	119e0 <__mempcpy_chk@plt+0x970>
   119b0:	b	11b38 <__mempcpy_chk@plt+0xac8>
   119b4:	add	r5, r5, #1
   119b8:	ldrb	r0, [r6, #1]!
   119bc:	sub	r0, r0, #48	; 0x30
   119c0:	cmp	r0, #10
   119c4:	bcc	119b4 <__mempcpy_chk@plt+0x944>
   119c8:	b	119f4 <__mempcpy_chk@plt+0x984>
   119cc:	mov	r0, #0
   119d0:	str	r0, [sp, #36]	; 0x24
   119d4:	b	119f4 <__mempcpy_chk@plt+0x984>
   119d8:	mvn	r0, #0
   119dc:	str	r0, [sp, #36]	; 0x24
   119e0:	ldr	r3, [sp, #20]
   119e4:	sub	r9, r9, #1
   119e8:	add	r4, r4, #4
   119ec:	b	119f4 <__mempcpy_chk@plt+0x984>
   119f0:	add	r6, r6, #1
   119f4:	ldrb	r2, [r6]
   119f8:	sub	r0, r2, #76	; 0x4c
   119fc:	cmp	r0, #46	; 0x2e
   11a00:	bhi	11ac8 <__mempcpy_chk@plt+0xa58>
   11a04:	add	r1, pc, #0
   11a08:	ldr	pc, [r1, r0, lsl #2]
   11a0c:	strdeq	r1, [r1], -r0
   11a10:	andeq	r1, r1, r8, asr #21
   11a14:	andeq	r1, r1, r8, asr #21
   11a18:	andeq	r1, r1, r8, asr #21
   11a1c:	andeq	r1, r1, r8, asr #21
   11a20:	andeq	r1, r1, r8, asr #21
   11a24:	andeq	r1, r1, r8, asr #21
   11a28:	andeq	r1, r1, r8, asr #21
   11a2c:	andeq	r1, r1, r8, asr #21
   11a30:	andeq	r1, r1, r8, asr #21
   11a34:	andeq	r1, r1, r8, asr #21
   11a38:	andeq	r1, r1, r8, asr #21
   11a3c:	andeq	r1, r1, r8, asr #21
   11a40:	andeq	r1, r1, r8, asr #21
   11a44:	andeq	r1, r1, r8, asr #21
   11a48:	andeq	r1, r1, r8, asr #21
   11a4c:	andeq	r1, r1, r8, asr #21
   11a50:	andeq	r1, r1, r8, asr #21
   11a54:	andeq	r1, r1, r8, asr #21
   11a58:	andeq	r1, r1, r8, asr #21
   11a5c:	andeq	r1, r1, r8, asr #21
   11a60:	andeq	r1, r1, r8, asr #21
   11a64:	andeq	r1, r1, r8, asr #21
   11a68:	andeq	r1, r1, r8, asr #21
   11a6c:	andeq	r1, r1, r8, asr #21
   11a70:	andeq	r1, r1, r8, asr #21
   11a74:	andeq	r1, r1, r8, asr #21
   11a78:	andeq	r1, r1, r8, asr #21
   11a7c:	strdeq	r1, [r1], -r0
   11a80:	andeq	r1, r1, r8, asr #21
   11a84:	strdeq	r1, [r1], -r0
   11a88:	andeq	r1, r1, r8, asr #21
   11a8c:	strdeq	r1, [r1], -r0
   11a90:	andeq	r1, r1, r8, asr #21
   11a94:	andeq	r1, r1, r8, asr #21
   11a98:	andeq	r1, r1, r8, asr #21
   11a9c:	andeq	r1, r1, r8, asr #21
   11aa0:	andeq	r1, r1, r8, asr #21
   11aa4:	andeq	r1, r1, r8, asr #21
   11aa8:	andeq	r1, r1, r8, asr #21
   11aac:	strdeq	r1, [r1], -r0
   11ab0:	andeq	r1, r1, r8, asr #21
   11ab4:	andeq	r1, r1, r8, asr #21
   11ab8:	andeq	r1, r1, r8, asr #21
   11abc:	andeq	r1, r1, r8, asr #21
   11ac0:	andeq	r1, r1, r8, asr #21
   11ac4:	strdeq	r1, [r1], -r0
   11ac8:	add	r0, sp, #40	; 0x28
   11acc:	ldrb	r0, [r0, r2]
   11ad0:	cmp	r0, #0
   11ad4:	beq	11b6c <__mempcpy_chk@plt+0xafc>
   11ad8:	cmp	r9, #1
   11adc:	blt	11aec <__mempcpy_chk@plt+0xa7c>
   11ae0:	sub	r9, r9, #1
   11ae4:	ldr	r0, [r4], #4
   11ae8:	b	11af4 <__mempcpy_chk@plt+0xa84>
   11aec:	movw	r0, #23620	; 0x5c44
   11af0:	movt	r0, #1
   11af4:	ldr	r1, [sp, #32]
   11af8:	stm	sp, {r1, r8}
   11afc:	ldr	r8, [sp, #36]	; 0x24
   11b00:	str	r8, [sp, #8]
   11b04:	str	r0, [sp, #12]
   11b08:	mov	r0, r7
   11b0c:	mov	r1, r5
   11b10:	bl	11ca0 <__mempcpy_chk@plt+0xc30>
   11b14:	add	r7, r6, #1
   11b18:	b	116a0 <__mempcpy_chk@plt+0x630>
   11b1c:	ldr	r0, [sp, #24]
   11b20:	sub	r0, r0, r9
   11b24:	sub	sp, fp, #28
   11b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b2c:	movw	r1, #25414	; 0x6346
   11b30:	movt	r1, #1
   11b34:	b	11b40 <__mempcpy_chk@plt+0xad0>
   11b38:	movw	r1, #25438	; 0x635e
   11b3c:	movt	r1, #1
   11b40:	mov	r0, #0
   11b44:	mov	r2, #5
   11b48:	bl	10e90 <dcgettext@plt>
   11b4c:	mov	r5, r0
   11b50:	ldr	r0, [r4]
   11b54:	bl	13fc0 <__mempcpy_chk@plt+0x2f50>
   11b58:	mov	r3, r0
   11b5c:	mov	r0, #1
   11b60:	mov	r1, #0
   11b64:	mov	r2, r5
   11b68:	bl	10f08 <error@plt>
   11b6c:	movw	r1, #25460	; 0x6374
   11b70:	movt	r1, #1
   11b74:	mov	r0, #0
   11b78:	mov	r2, #5
   11b7c:	bl	10e90 <dcgettext@plt>
   11b80:	mov	r2, r0
   11b84:	str	r7, [sp]
   11b88:	add	r0, r6, #1
   11b8c:	sub	r3, r0, r7
   11b90:	mov	r0, #1
   11b94:	mov	r1, #0
   11b98:	bl	10f08 <error@plt>
   11b9c:	push	{r4, sl, fp, lr}
   11ba0:	add	fp, sp, #8
   11ba4:	mov	r4, r0
   11ba8:	b	11bbc <__mempcpy_chk@plt+0xb4c>
   11bac:	cmp	r0, #0
   11bb0:	popeq	{r4, sl, fp, pc}
   11bb4:	bl	11064 <putchar_unlocked@plt>
   11bb8:	add	r4, r4, #1
   11bbc:	ldrb	r0, [r4]
   11bc0:	cmp	r0, #92	; 0x5c
   11bc4:	bne	11bac <__mempcpy_chk@plt+0xb3c>
   11bc8:	mov	r0, r4
   11bcc:	mov	r1, #1
   11bd0:	bl	12070 <__mempcpy_chk@plt+0x1000>
   11bd4:	add	r0, r4, r0
   11bd8:	add	r4, r0, #1
   11bdc:	b	11bbc <__mempcpy_chk@plt+0xb4c>
   11be0:	push	{r4, r5, r6, sl, fp, lr}
   11be4:	add	fp, sp, #16
   11be8:	sub	sp, sp, #8
   11bec:	mov	r4, r0
   11bf0:	ldrb	r0, [r0]
   11bf4:	cmp	r0, #39	; 0x27
   11bf8:	cmpne	r0, #34	; 0x22
   11bfc:	bne	11c60 <__mempcpy_chk@plt+0xbf0>
   11c00:	ldrb	r5, [r4, #1]
   11c04:	cmp	r5, #0
   11c08:	beq	11c60 <__mempcpy_chk@plt+0xbf0>
   11c0c:	ldrb	r0, [r4, #2]!
   11c10:	mov	r6, #0
   11c14:	cmp	r0, #0
   11c18:	beq	11c90 <__mempcpy_chk@plt+0xc20>
   11c1c:	movw	r0, #29005	; 0x714d
   11c20:	movt	r0, #2
   11c24:	ldrb	r0, [r0]
   11c28:	cmp	r0, #0
   11c2c:	bne	11c90 <__mempcpy_chk@plt+0xc20>
   11c30:	mov	r6, #0
   11c34:	movw	r1, #25499	; 0x639b
   11c38:	movt	r1, #1
   11c3c:	mov	r0, #0
   11c40:	mov	r2, #5
   11c44:	bl	10e90 <dcgettext@plt>
   11c48:	mov	r2, r0
   11c4c:	mov	r0, #0
   11c50:	mov	r1, #0
   11c54:	mov	r3, r4
   11c58:	bl	10f08 <error@plt>
   11c5c:	b	11c90 <__mempcpy_chk@plt+0xc20>
   11c60:	bl	10f8c <__errno_location@plt>
   11c64:	mov	r1, #0
   11c68:	str	r1, [r0]
   11c6c:	add	r1, sp, #4
   11c70:	mov	r0, r4
   11c74:	mov	r2, #0
   11c78:	bl	10fec <strtoimax@plt>
   11c7c:	mov	r5, r0
   11c80:	mov	r6, r1
   11c84:	ldr	r1, [sp, #4]
   11c88:	mov	r0, r4
   11c8c:	bl	122f4 <__mempcpy_chk@plt+0x1284>
   11c90:	mov	r0, r5
   11c94:	mov	r1, r6
   11c98:	sub	sp, fp, #16
   11c9c:	pop	{r4, r5, r6, sl, fp, pc}
   11ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ca4:	add	fp, sp, #28
   11ca8:	sub	sp, sp, #28
   11cac:	mov	r5, r3
   11cb0:	mov	r6, r2
   11cb4:	mov	r4, r1
   11cb8:	mov	sl, r0
   11cbc:	sub	r7, r2, #65	; 0x41
   11cc0:	ldr	r0, [fp, #20]
   11cc4:	str	r0, [sp, #24]
   11cc8:	ldr	r0, [fp, #16]
   11ccc:	str	r0, [sp, #12]
   11cd0:	ldr	r0, [fp, #12]
   11cd4:	str	r0, [sp, #20]
   11cd8:	ldr	r0, [fp, #8]
   11cdc:	str	r0, [sp, #16]
   11ce0:	cmp	r7, #55	; 0x37
   11ce4:	bhi	11fd4 <__mempcpy_chk@plt+0xf64>
   11ce8:	movw	r8, #25636	; 0x6424
   11cec:	movt	r8, #1
   11cf0:	mov	r9, #2
   11cf4:	add	r0, pc, #0
   11cf8:	ldr	pc, [r0, r7, lsl #2]
   11cfc:	ldrdeq	r1, [r1], -ip
   11d00:	ldrdeq	r1, [r1], -r4
   11d04:	ldrdeq	r1, [r1], -r4
   11d08:	ldrdeq	r1, [r1], -r4
   11d0c:	ldrdeq	r1, [r1], -ip
   11d10:	ldrdeq	r1, [r1], -ip
   11d14:	ldrdeq	r1, [r1], -ip
   11d18:	ldrdeq	r1, [r1], -r4
   11d1c:	ldrdeq	r1, [r1], -r4
   11d20:	ldrdeq	r1, [r1], -r4
   11d24:	ldrdeq	r1, [r1], -r4
   11d28:	ldrdeq	r1, [r1], -r4
   11d2c:	ldrdeq	r1, [r1], -r4
   11d30:	ldrdeq	r1, [r1], -r4
   11d34:	ldrdeq	r1, [r1], -r4
   11d38:	ldrdeq	r1, [r1], -r4
   11d3c:	ldrdeq	r1, [r1], -r4
   11d40:	ldrdeq	r1, [r1], -r4
   11d44:	ldrdeq	r1, [r1], -r4
   11d48:	ldrdeq	r1, [r1], -r4
   11d4c:	ldrdeq	r1, [r1], -r4
   11d50:	ldrdeq	r1, [r1], -r4
   11d54:	ldrdeq	r1, [r1], -r4
   11d58:	andeq	r1, r1, r8, ror #27
   11d5c:	ldrdeq	r1, [r1], -r4
   11d60:	ldrdeq	r1, [r1], -r4
   11d64:	ldrdeq	r1, [r1], -r4
   11d68:	ldrdeq	r1, [r1], -r4
   11d6c:	ldrdeq	r1, [r1], -r4
   11d70:	ldrdeq	r1, [r1], -r4
   11d74:	ldrdeq	r1, [r1], -r4
   11d78:	ldrdeq	r1, [r1], -r4
   11d7c:	ldrdeq	r1, [r1], -ip
   11d80:	ldrdeq	r1, [r1], -r4
   11d84:	ldrdeq	r1, [r1], -r4
   11d88:	andeq	r1, r1, r8, ror #27
   11d8c:	ldrdeq	r1, [r1], -ip
   11d90:	ldrdeq	r1, [r1], -ip
   11d94:	ldrdeq	r1, [r1], -ip
   11d98:	ldrdeq	r1, [r1], -r4
   11d9c:	andeq	r1, r1, r8, ror #27
   11da0:	ldrdeq	r1, [r1], -r4
   11da4:	ldrdeq	r1, [r1], -r4
   11da8:	ldrdeq	r1, [r1], -r4
   11dac:	ldrdeq	r1, [r1], -r4
   11db0:	ldrdeq	r1, [r1], -r4
   11db4:	andeq	r1, r1, r8, ror #27
   11db8:	ldrdeq	r1, [r1], -r4
   11dbc:	ldrdeq	r1, [r1], -r4
   11dc0:	ldrdeq	r1, [r1], -r4
   11dc4:	ldrdeq	r1, [r1], -r4
   11dc8:	ldrdeq	r1, [r1], -r4
   11dcc:	andeq	r1, r1, r8, ror #27
   11dd0:	ldrdeq	r1, [r1], -r4
   11dd4:	ldrdeq	r1, [r1], -r4
   11dd8:	andeq	r1, r1, r8, ror #27
   11ddc:	movw	r8, #25640	; 0x6428
   11de0:	movt	r8, #1
   11de4:	mov	r9, #1
   11de8:	add	r0, r4, r9
   11dec:	add	r0, r0, #2
   11df0:	bl	14c90 <__mempcpy_chk@plt+0x3c20>
   11df4:	mov	r1, sl
   11df8:	mov	r2, r4
   11dfc:	mov	r4, r0
   11e00:	mvn	r3, #0
   11e04:	bl	11070 <__mempcpy_chk@plt>
   11e08:	mov	r1, r8
   11e0c:	mov	r2, r9
   11e10:	mvn	r3, #0
   11e14:	bl	11070 <__mempcpy_chk@plt>
   11e18:	strb	r6, [r0]
   11e1c:	mov	r1, #0
   11e20:	strb	r1, [r0, #1]
   11e24:	cmp	r7, #55	; 0x37
   11e28:	bhi	11fc4 <__mempcpy_chk@plt+0xf54>
   11e2c:	add	r0, pc, #0
   11e30:	ldr	pc, [r0, r7, lsl #2]
   11e34:	andeq	r1, r1, r4, lsl pc
   11e38:	andeq	r1, r1, r4, asr #31
   11e3c:	andeq	r1, r1, r4, asr #31
   11e40:	andeq	r1, r1, r4, asr #31
   11e44:	andeq	r1, r1, r4, lsl pc
   11e48:	andeq	r1, r1, r4, lsl pc
   11e4c:	andeq	r1, r1, r4, lsl pc
   11e50:	andeq	r1, r1, r4, asr #31
   11e54:	andeq	r1, r1, r4, asr #31
   11e58:	andeq	r1, r1, r4, asr #31
   11e5c:	andeq	r1, r1, r4, asr #31
   11e60:	andeq	r1, r1, r4, asr #31
   11e64:	andeq	r1, r1, r4, asr #31
   11e68:	andeq	r1, r1, r4, asr #31
   11e6c:	andeq	r1, r1, r4, asr #31
   11e70:	andeq	r1, r1, r4, asr #31
   11e74:	andeq	r1, r1, r4, asr #31
   11e78:	andeq	r1, r1, r4, asr #31
   11e7c:	andeq	r1, r1, r4, asr #31
   11e80:	andeq	r1, r1, r4, asr #31
   11e84:	andeq	r1, r1, r4, asr #31
   11e88:	andeq	r1, r1, r4, asr #31
   11e8c:	andeq	r1, r1, r4, asr #31
   11e90:	andeq	r1, r1, r8, lsr pc
   11e94:	andeq	r1, r1, r4, asr #31
   11e98:	andeq	r1, r1, r4, asr #31
   11e9c:	andeq	r1, r1, r4, asr #31
   11ea0:	andeq	r1, r1, r4, asr #31
   11ea4:	andeq	r1, r1, r4, asr #31
   11ea8:	andeq	r1, r1, r4, asr #31
   11eac:	andeq	r1, r1, r4, asr #31
   11eb0:	andeq	r1, r1, r4, asr #31
   11eb4:	andeq	r1, r1, r4, lsl pc
   11eb8:	andeq	r1, r1, r4, asr #31
   11ebc:	andeq	r1, r1, r0, ror #31
   11ec0:	andeq	r1, r1, r0, ror #30
   11ec4:	andeq	r1, r1, r4, lsl pc
   11ec8:	andeq	r1, r1, r4, lsl pc
   11ecc:	andeq	r1, r1, r4, lsl pc
   11ed0:	andeq	r1, r1, r4, asr #31
   11ed4:	andeq	r1, r1, r0, ror #30
   11ed8:	andeq	r1, r1, r4, asr #31
   11edc:	andeq	r1, r1, r4, asr #31
   11ee0:	andeq	r1, r1, r4, asr #31
   11ee4:	andeq	r1, r1, r4, asr #31
   11ee8:	andeq	r1, r1, r4, asr #31
   11eec:	andeq	r1, r1, r8, lsr pc
   11ef0:	andeq	r1, r1, r4, asr #31
   11ef4:	andeq	r1, r1, r4, asr #31
   11ef8:	andeq	r1, r1, r4, asr #31
   11efc:	andeq	r2, r1, r0
   11f00:	andeq	r1, r1, r4, asr #31
   11f04:	andeq	r1, r1, r8, lsr pc
   11f08:	andeq	r1, r1, r4, asr #31
   11f0c:	andeq	r1, r1, r4, asr #31
   11f10:	andeq	r1, r1, r8, lsr pc
   11f14:	ldr	r0, [sp, #24]
   11f18:	bl	1245c <__mempcpy_chk@plt+0x13ec>
   11f1c:	cmp	r5, #0
   11f20:	beq	11f44 <__mempcpy_chk@plt+0xed4>
   11f24:	ldr	r0, [sp, #20]
   11f28:	cmp	r0, #0
   11f2c:	beq	11fb4 <__mempcpy_chk@plt+0xf44>
   11f30:	vstr	d0, [sp]
   11f34:	b	11f88 <__mempcpy_chk@plt+0xf18>
   11f38:	ldr	r0, [sp, #24]
   11f3c:	bl	1239c <__mempcpy_chk@plt+0x132c>
   11f40:	b	11f68 <__mempcpy_chk@plt+0xef8>
   11f44:	ldr	r0, [sp, #20]
   11f48:	vmov	r2, r3, d0
   11f4c:	cmp	r0, #0
   11f50:	beq	11fa8 <__mempcpy_chk@plt+0xf38>
   11f54:	mov	r0, r4
   11f58:	ldr	r1, [sp, #12]
   11f5c:	b	11fc0 <__mempcpy_chk@plt+0xf50>
   11f60:	ldr	r0, [sp, #24]
   11f64:	bl	11be0 <__mempcpy_chk@plt+0xb70>
   11f68:	mov	r2, r0
   11f6c:	mov	r3, r1
   11f70:	cmp	r5, #0
   11f74:	beq	11f9c <__mempcpy_chk@plt+0xf2c>
   11f78:	ldr	r0, [sp, #20]
   11f7c:	cmp	r0, #0
   11f80:	beq	11fb8 <__mempcpy_chk@plt+0xf48>
   11f84:	stm	sp, {r2, r3}
   11f88:	mov	r0, r4
   11f8c:	ldr	r1, [sp, #16]
   11f90:	ldr	r2, [sp, #12]
   11f94:	bl	15084 <__mempcpy_chk@plt+0x4014>
   11f98:	b	11fc4 <__mempcpy_chk@plt+0xf54>
   11f9c:	ldr	r0, [sp, #20]
   11fa0:	cmp	r0, #0
   11fa4:	bne	11f54 <__mempcpy_chk@plt+0xee4>
   11fa8:	mov	r0, r4
   11fac:	bl	15084 <__mempcpy_chk@plt+0x4014>
   11fb0:	b	11fc4 <__mempcpy_chk@plt+0xf54>
   11fb4:	vmov	r2, r3, d0
   11fb8:	mov	r0, r4
   11fbc:	ldr	r1, [sp, #16]
   11fc0:	bl	15084 <__mempcpy_chk@plt+0x4014>
   11fc4:	mov	r0, r4
   11fc8:	sub	sp, fp, #28
   11fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fd0:	b	12760 <__mempcpy_chk@plt+0x16f0>
   11fd4:	mov	r9, #0
   11fd8:	mov	r8, sl
   11fdc:	b	11de8 <__mempcpy_chk@plt+0xd78>
   11fe0:	ldr	r0, [sp, #24]
   11fe4:	ldrb	r2, [r0]
   11fe8:	mov	r0, r4
   11fec:	cmp	r5, #0
   11ff0:	beq	12028 <__mempcpy_chk@plt+0xfb8>
   11ff4:	ldr	r1, [sp, #16]
   11ff8:	bl	15084 <__mempcpy_chk@plt+0x4014>
   11ffc:	b	11fc4 <__mempcpy_chk@plt+0xf54>
   12000:	cmp	r5, #0
   12004:	beq	12034 <__mempcpy_chk@plt+0xfc4>
   12008:	ldr	r0, [sp, #20]
   1200c:	cmp	r0, #0
   12010:	beq	1204c <__mempcpy_chk@plt+0xfdc>
   12014:	mov	r0, r4
   12018:	ldr	r1, [sp, #16]
   1201c:	ldr	r2, [sp, #12]
   12020:	ldr	r3, [sp, #24]
   12024:	b	11fc0 <__mempcpy_chk@plt+0xf50>
   12028:	mov	r1, r2
   1202c:	bl	15084 <__mempcpy_chk@plt+0x4014>
   12030:	b	11fc4 <__mempcpy_chk@plt+0xf54>
   12034:	ldr	r0, [sp, #20]
   12038:	cmp	r0, #0
   1203c:	beq	12060 <__mempcpy_chk@plt+0xff0>
   12040:	mov	r0, r4
   12044:	ldr	r1, [sp, #12]
   12048:	b	12054 <__mempcpy_chk@plt+0xfe4>
   1204c:	mov	r0, r4
   12050:	ldr	r1, [sp, #16]
   12054:	ldr	r2, [sp, #24]
   12058:	bl	15084 <__mempcpy_chk@plt+0x4014>
   1205c:	b	11fc4 <__mempcpy_chk@plt+0xf54>
   12060:	mov	r0, r4
   12064:	ldr	r1, [sp, #24]
   12068:	bl	15084 <__mempcpy_chk@plt+0x4014>
   1206c:	b	11fc4 <__mempcpy_chk@plt+0xf54>
   12070:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12074:	add	fp, sp, #24
   12078:	sub	sp, sp, #8
   1207c:	mov	r9, r0
   12080:	mov	r7, r0
   12084:	ldrb	r5, [r7, #1]!
   12088:	cmp	r5, #120	; 0x78
   1208c:	bne	12100 <__mempcpy_chk@plt+0x1090>
   12090:	add	r6, r9, #2
   12094:	bl	10f68 <__ctype_b_loc@plt>
   12098:	ldr	r4, [r0]
   1209c:	mov	r7, #0
   120a0:	mov	r5, #0
   120a4:	ldrb	r0, [r6, r7]
   120a8:	bl	12518 <__mempcpy_chk@plt+0x14a8>
   120ac:	add	r1, r4, r0, lsl #1
   120b0:	ldrb	r1, [r1, #1]
   120b4:	tst	r1, #16
   120b8:	beq	12158 <__mempcpy_chk@plt+0x10e8>
   120bc:	lsl	r1, r5, #4
   120c0:	sub	r2, r0, #97	; 0x61
   120c4:	uxtb	r3, r2
   120c8:	mvn	r2, #86	; 0x56
   120cc:	cmp	r3, #6
   120d0:	bcc	120e8 <__mempcpy_chk@plt+0x1078>
   120d4:	sub	r2, r0, #65	; 0x41
   120d8:	uxtb	r2, r2
   120dc:	cmp	r2, #6
   120e0:	mvn	r2, #47	; 0x2f
   120e4:	mvncc	r2, #54	; 0x36
   120e8:	add	r0, r2, r0
   120ec:	add	r5, r0, r1
   120f0:	add	r7, r7, #1
   120f4:	cmp	r7, #2
   120f8:	bcc	120a4 <__mempcpy_chk@plt+0x1034>
   120fc:	b	12160 <__mempcpy_chk@plt+0x10f0>
   12100:	and	r0, r5, #248	; 0xf8
   12104:	cmp	r0, #48	; 0x30
   12108:	bne	12170 <__mempcpy_chk@plt+0x1100>
   1210c:	sub	r0, r5, #48	; 0x30
   12110:	clz	r0, r0
   12114:	lsr	r0, r0, #5
   12118:	and	r0, r0, r1
   1211c:	add	r1, r7, r0
   12120:	mov	r2, #0
   12124:	mov	r0, #0
   12128:	ldrb	r3, [r1, r2]
   1212c:	and	r7, r3, #248	; 0xf8
   12130:	cmp	r7, #48	; 0x30
   12134:	bne	1214c <__mempcpy_chk@plt+0x10dc>
   12138:	add	r0, r3, r0, lsl #3
   1213c:	sub	r0, r0, #48	; 0x30
   12140:	add	r2, r2, #1
   12144:	cmp	r2, #3
   12148:	bcc	12128 <__mempcpy_chk@plt+0x10b8>
   1214c:	add	r7, r1, r2
   12150:	bl	11064 <putchar_unlocked@plt>
   12154:	b	12288 <__mempcpy_chk@plt+0x1218>
   12158:	cmp	r7, #0
   1215c:	beq	122d0 <__mempcpy_chk@plt+0x1260>
   12160:	add	r7, r6, r7
   12164:	mov	r0, r5
   12168:	bl	11064 <putchar_unlocked@plt>
   1216c:	b	12288 <__mempcpy_chk@plt+0x1218>
   12170:	cmp	r5, #0
   12174:	beq	1226c <__mempcpy_chk@plt+0x11fc>
   12178:	movw	r0, #25679	; 0x644f
   1217c:	movt	r0, #1
   12180:	mov	r1, r5
   12184:	mov	r2, #12
   12188:	bl	10fe0 <memchr@plt>
   1218c:	cmp	r0, #0
   12190:	beq	121a0 <__mempcpy_chk@plt+0x1130>
   12194:	mov	r0, r5
   12198:	bl	1251c <__mempcpy_chk@plt+0x14ac>
   1219c:	b	12284 <__mempcpy_chk@plt+0x1214>
   121a0:	orr	r0, r5, #32
   121a4:	cmp	r0, #117	; 0x75
   121a8:	bne	1226c <__mempcpy_chk@plt+0x11fc>
   121ac:	mov	r8, #8
   121b0:	cmp	r5, #117	; 0x75
   121b4:	movweq	r8, #4
   121b8:	bl	10f68 <__ctype_b_loc@plt>
   121bc:	ldr	r4, [r0]
   121c0:	mov	r6, #0
   121c4:	mvn	r7, #1
   121c8:	ldrb	r0, [r9, -r7]
   121cc:	bl	12518 <__mempcpy_chk@plt+0x14a8>
   121d0:	add	r1, r4, r0, lsl #1
   121d4:	ldrb	r1, [r1, #1]
   121d8:	tst	r1, #16
   121dc:	beq	122d0 <__mempcpy_chk@plt+0x1260>
   121e0:	lsl	r1, r6, #4
   121e4:	sub	r2, r0, #97	; 0x61
   121e8:	uxtb	r3, r2
   121ec:	mvn	r2, #86	; 0x56
   121f0:	cmp	r3, #6
   121f4:	bcc	1220c <__mempcpy_chk@plt+0x119c>
   121f8:	sub	r2, r0, #65	; 0x41
   121fc:	uxtb	r2, r2
   12200:	cmp	r2, #6
   12204:	mvn	r2, #47	; 0x2f
   12208:	mvncc	r2, #54	; 0x36
   1220c:	add	r0, r2, r0
   12210:	add	r6, r0, r1
   12214:	sub	r7, r7, #1
   12218:	add	r0, r8, r7
   1221c:	add	r0, r0, #3
   12220:	cmp	r0, #1
   12224:	bgt	121c8 <__mempcpy_chk@plt+0x1158>
   12228:	cmp	r6, #159	; 0x9f
   1222c:	bhi	1223c <__mempcpy_chk@plt+0x11cc>
   12230:	cmp	r6, #36	; 0x24
   12234:	cmpne	r6, #96	; 0x60
   12238:	bne	12298 <__mempcpy_chk@plt+0x1228>
   1223c:	mov	r0, r6
   12240:	bfc	r0, #0, #11
   12244:	cmp	r0, #55296	; 0xd800
   12248:	beq	122a0 <__mempcpy_chk@plt+0x1230>
   1224c:	sub	r7, r9, r7
   12250:	movw	r0, #28996	; 0x7144
   12254:	movt	r0, #2
   12258:	ldr	r0, [r0]
   1225c:	mov	r1, r6
   12260:	mov	r2, #0
   12264:	bl	145dc <__mempcpy_chk@plt+0x356c>
   12268:	b	12288 <__mempcpy_chk@plt+0x1218>
   1226c:	mov	r0, #92	; 0x5c
   12270:	bl	11064 <putchar_unlocked@plt>
   12274:	ldrb	r0, [r7]
   12278:	cmp	r0, #0
   1227c:	beq	12288 <__mempcpy_chk@plt+0x1218>
   12280:	bl	11064 <putchar_unlocked@plt>
   12284:	add	r7, r9, #2
   12288:	mvn	r0, r9
   1228c:	add	r0, r7, r0
   12290:	sub	sp, fp, #24
   12294:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12298:	cmp	r6, #64	; 0x40
   1229c:	beq	1223c <__mempcpy_chk@plt+0x11cc>
   122a0:	movw	r1, #25691	; 0x645b
   122a4:	movt	r1, #1
   122a8:	mov	r0, #0
   122ac:	mov	r2, #5
   122b0:	bl	10e90 <dcgettext@plt>
   122b4:	mov	r2, r0
   122b8:	str	r8, [sp]
   122bc:	str	r6, [sp, #4]
   122c0:	mov	r0, #1
   122c4:	mov	r1, #0
   122c8:	mov	r3, r5
   122cc:	bl	10f08 <error@plt>
   122d0:	movw	r1, #25642	; 0x642a
   122d4:	movt	r1, #1
   122d8:	mov	r0, #0
   122dc:	mov	r2, #5
   122e0:	bl	10e90 <dcgettext@plt>
   122e4:	mov	r2, r0
   122e8:	mov	r0, #1
   122ec:	mov	r1, #0
   122f0:	bl	10f08 <error@plt>
   122f4:	push	{r4, r5, r6, sl, fp, lr}
   122f8:	add	fp, sp, #16
   122fc:	mov	r5, r1
   12300:	mov	r4, r0
   12304:	bl	10f8c <__errno_location@plt>
   12308:	ldr	r6, [r0]
   1230c:	cmp	r6, #0
   12310:	beq	12334 <__mempcpy_chk@plt+0x12c4>
   12314:	mov	r0, r4
   12318:	bl	13fc0 <__mempcpy_chk@plt+0x2f50>
   1231c:	mov	r3, r0
   12320:	movw	r2, #25435	; 0x635b
   12324:	movt	r2, #1
   12328:	mov	r0, #0
   1232c:	mov	r1, r6
   12330:	b	12384 <__mempcpy_chk@plt+0x1314>
   12334:	ldrb	r0, [r5]
   12338:	cmp	r0, #0
   1233c:	popeq	{r4, r5, r6, sl, fp, pc}
   12340:	cmp	r4, r5
   12344:	beq	12354 <__mempcpy_chk@plt+0x12e4>
   12348:	movw	r1, #25601	; 0x6401
   1234c:	movt	r1, #1
   12350:	b	1235c <__mempcpy_chk@plt+0x12ec>
   12354:	movw	r1, #25572	; 0x63e4
   12358:	movt	r1, #1
   1235c:	mov	r0, #0
   12360:	mov	r2, #5
   12364:	bl	10e90 <dcgettext@plt>
   12368:	mov	r5, r0
   1236c:	mov	r0, r4
   12370:	bl	13fc0 <__mempcpy_chk@plt+0x2f50>
   12374:	mov	r3, r0
   12378:	mov	r0, #0
   1237c:	mov	r1, #0
   12380:	mov	r2, r5
   12384:	bl	10f08 <error@plt>
   12388:	movw	r0, #29004	; 0x714c
   1238c:	movt	r0, #2
   12390:	mov	r1, #1
   12394:	strb	r1, [r0]
   12398:	pop	{r4, r5, r6, sl, fp, pc}
   1239c:	push	{r4, r5, r6, sl, fp, lr}
   123a0:	add	fp, sp, #16
   123a4:	sub	sp, sp, #8
   123a8:	mov	r4, r0
   123ac:	ldrb	r0, [r0]
   123b0:	cmp	r0, #39	; 0x27
   123b4:	cmpne	r0, #34	; 0x22
   123b8:	bne	1241c <__mempcpy_chk@plt+0x13ac>
   123bc:	ldrb	r5, [r4, #1]
   123c0:	cmp	r5, #0
   123c4:	beq	1241c <__mempcpy_chk@plt+0x13ac>
   123c8:	ldrb	r0, [r4, #2]!
   123cc:	mov	r6, #0
   123d0:	cmp	r0, #0
   123d4:	beq	1244c <__mempcpy_chk@plt+0x13dc>
   123d8:	movw	r0, #29005	; 0x714d
   123dc:	movt	r0, #2
   123e0:	ldrb	r0, [r0]
   123e4:	cmp	r0, #0
   123e8:	bne	1244c <__mempcpy_chk@plt+0x13dc>
   123ec:	mov	r6, #0
   123f0:	movw	r1, #25499	; 0x639b
   123f4:	movt	r1, #1
   123f8:	mov	r0, #0
   123fc:	mov	r2, #5
   12400:	bl	10e90 <dcgettext@plt>
   12404:	mov	r2, r0
   12408:	mov	r0, #0
   1240c:	mov	r1, #0
   12410:	mov	r3, r4
   12414:	bl	10f08 <error@plt>
   12418:	b	1244c <__mempcpy_chk@plt+0x13dc>
   1241c:	bl	10f8c <__errno_location@plt>
   12420:	mov	r1, #0
   12424:	str	r1, [r0]
   12428:	add	r1, sp, #4
   1242c:	mov	r0, r4
   12430:	mov	r2, #0
   12434:	bl	10fc8 <strtoumax@plt>
   12438:	mov	r5, r0
   1243c:	mov	r6, r1
   12440:	ldr	r1, [sp, #4]
   12444:	mov	r0, r4
   12448:	bl	122f4 <__mempcpy_chk@plt+0x1284>
   1244c:	mov	r0, r5
   12450:	mov	r1, r6
   12454:	sub	sp, fp, #16
   12458:	pop	{r4, r5, r6, sl, fp, pc}
   1245c:	push	{r4, sl, fp, lr}
   12460:	add	fp, sp, #8
   12464:	vpush	{d8}
   12468:	sub	sp, sp, #8
   1246c:	mov	r4, r0
   12470:	ldrb	r0, [r0]
   12474:	cmp	r0, #39	; 0x27
   12478:	cmpne	r0, #34	; 0x22
   1247c:	bne	124e0 <__mempcpy_chk@plt+0x1470>
   12480:	ldrb	r0, [r4, #1]
   12484:	cmp	r0, #0
   12488:	beq	124e0 <__mempcpy_chk@plt+0x1470>
   1248c:	vmov	s0, r0
   12490:	vcvt.f64.u32	d8, s0
   12494:	ldrb	r0, [r4, #2]!
   12498:	cmp	r0, #0
   1249c:	beq	12508 <__mempcpy_chk@plt+0x1498>
   124a0:	movw	r0, #29005	; 0x714d
   124a4:	movt	r0, #2
   124a8:	ldrb	r0, [r0]
   124ac:	cmp	r0, #0
   124b0:	bne	12508 <__mempcpy_chk@plt+0x1498>
   124b4:	movw	r1, #25499	; 0x639b
   124b8:	movt	r1, #1
   124bc:	mov	r0, #0
   124c0:	mov	r2, #5
   124c4:	bl	10e90 <dcgettext@plt>
   124c8:	mov	r2, r0
   124cc:	mov	r0, #0
   124d0:	mov	r1, #0
   124d4:	mov	r3, r4
   124d8:	bl	10f08 <error@plt>
   124dc:	b	12508 <__mempcpy_chk@plt+0x1498>
   124e0:	bl	10f8c <__errno_location@plt>
   124e4:	mov	r1, #0
   124e8:	str	r1, [r0]
   124ec:	add	r1, sp, #4
   124f0:	mov	r0, r4
   124f4:	bl	125d8 <__mempcpy_chk@plt+0x1568>
   124f8:	vmov.f64	d8, d0
   124fc:	ldr	r1, [sp, #4]
   12500:	mov	r0, r4
   12504:	bl	122f4 <__mempcpy_chk@plt+0x1284>
   12508:	vmov.f64	d0, d8
   1250c:	sub	sp, fp, #16
   12510:	vpop	{d8}
   12514:	pop	{r4, sl, fp, pc}
   12518:	bx	lr
   1251c:	sub	r1, r0, #97	; 0x61
   12520:	cmp	r1, #21
   12524:	bhi	125ac <__mempcpy_chk@plt+0x153c>
   12528:	add	r2, pc, #0
   1252c:	ldr	pc, [r2, r1, lsl #2]
   12530:	andeq	r2, r1, r8, lsl #11
   12534:	muleq	r1, r8, r5
   12538:	andeq	r2, r1, r8, asr #11
   1253c:	andeq	r2, r1, ip, lsr #11
   12540:			; <UNDEFINED> instruction: 0x000125b0
   12544:			; <UNDEFINED> instruction: 0x000125b8
   12548:	andeq	r2, r1, ip, lsr #11
   1254c:	andeq	r2, r1, ip, lsr #11
   12550:	andeq	r2, r1, ip, lsr #11
   12554:	andeq	r2, r1, ip, lsr #11
   12558:	andeq	r2, r1, ip, lsr #11
   1255c:	andeq	r2, r1, ip, lsr #11
   12560:	andeq	r2, r1, ip, lsr #11
   12564:	andeq	r2, r1, r0, asr #11
   12568:	andeq	r2, r1, ip, lsr #11
   1256c:	andeq	r2, r1, ip, lsr #11
   12570:	andeq	r2, r1, ip, lsr #11
   12574:	muleq	r1, r0, r5
   12578:	andeq	r2, r1, ip, lsr #11
   1257c:	andeq	r2, r1, r0, lsr #11
   12580:	andeq	r2, r1, ip, lsr #11
   12584:	andeq	r2, r1, r8, lsr #11
   12588:	mov	r0, #7
   1258c:	b	11064 <putchar_unlocked@plt>
   12590:	mov	r0, #13
   12594:	b	11064 <putchar_unlocked@plt>
   12598:	mov	r0, #8
   1259c:	b	11064 <putchar_unlocked@plt>
   125a0:	mov	r0, #9
   125a4:	b	11064 <putchar_unlocked@plt>
   125a8:	mov	r0, #11
   125ac:	b	11064 <putchar_unlocked@plt>
   125b0:	mov	r0, #27
   125b4:	b	11064 <putchar_unlocked@plt>
   125b8:	mov	r0, #12
   125bc:	b	11064 <putchar_unlocked@plt>
   125c0:	mov	r0, #10
   125c4:	b	11064 <putchar_unlocked@plt>
   125c8:	push	{fp, lr}
   125cc:	mov	fp, sp
   125d0:	mov	r0, #0
   125d4:	bl	10f74 <exit@plt>
   125d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   125dc:	add	fp, sp, #24
   125e0:	vpush	{d8}
   125e4:	sub	sp, sp, #8
   125e8:	mov	r4, r1
   125ec:	mov	r5, r0
   125f0:	add	r1, sp, #4
   125f4:	bl	10e78 <strtold@plt>
   125f8:	vmov.f64	d8, d0
   125fc:	ldr	r7, [sp, #4]
   12600:	ldrb	r0, [r7]
   12604:	cmp	r0, #0
   12608:	beq	1263c <__mempcpy_chk@plt+0x15cc>
   1260c:	bl	10f8c <__errno_location@plt>
   12610:	mov	r6, r0
   12614:	ldr	r8, [r0]
   12618:	mov	r1, sp
   1261c:	mov	r0, r5
   12620:	bl	155f0 <__mempcpy_chk@plt+0x4580>
   12624:	ldr	r0, [sp]
   12628:	cmp	r7, r0
   1262c:	bcs	12638 <__mempcpy_chk@plt+0x15c8>
   12630:	str	r0, [sp, #4]
   12634:	b	12640 <__mempcpy_chk@plt+0x15d0>
   12638:	str	r8, [r6]
   1263c:	vmov.f64	d0, d8
   12640:	cmp	r4, #0
   12644:	ldrne	r0, [sp, #4]
   12648:	strne	r0, [r4]
   1264c:	sub	sp, fp, #32
   12650:	vpop	{d8}
   12654:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12658:	movw	r1, #29008	; 0x7150
   1265c:	movt	r1, #2
   12660:	str	r0, [r1]
   12664:	bx	lr
   12668:	movw	r1, #29012	; 0x7154
   1266c:	movt	r1, #2
   12670:	strb	r0, [r1]
   12674:	bx	lr
   12678:	push	{r4, r5, r6, sl, fp, lr}
   1267c:	add	fp, sp, #16
   12680:	sub	sp, sp, #8
   12684:	movw	r0, #28996	; 0x7144
   12688:	movt	r0, #2
   1268c:	ldr	r0, [r0]
   12690:	bl	156b4 <__mempcpy_chk@plt+0x4644>
   12694:	cmp	r0, #0
   12698:	beq	126c0 <__mempcpy_chk@plt+0x1650>
   1269c:	movw	r0, #29012	; 0x7154
   126a0:	movt	r0, #2
   126a4:	ldrb	r0, [r0]
   126a8:	cmp	r0, #0
   126ac:	beq	126e0 <__mempcpy_chk@plt+0x1670>
   126b0:	bl	10f8c <__errno_location@plt>
   126b4:	ldr	r0, [r0]
   126b8:	cmp	r0, #32
   126bc:	bne	126e0 <__mempcpy_chk@plt+0x1670>
   126c0:	movw	r0, #28992	; 0x7140
   126c4:	movt	r0, #2
   126c8:	ldr	r0, [r0]
   126cc:	bl	156b4 <__mempcpy_chk@plt+0x4644>
   126d0:	cmp	r0, #0
   126d4:	subeq	sp, fp, #16
   126d8:	popeq	{r4, r5, r6, sl, fp, pc}
   126dc:	b	12750 <__mempcpy_chk@plt+0x16e0>
   126e0:	movw	r1, #25807	; 0x64cf
   126e4:	movt	r1, #1
   126e8:	mov	r0, #0
   126ec:	mov	r2, #5
   126f0:	bl	10e90 <dcgettext@plt>
   126f4:	mov	r4, r0
   126f8:	movw	r0, #29008	; 0x7150
   126fc:	movt	r0, #2
   12700:	ldr	r6, [r0]
   12704:	bl	10f8c <__errno_location@plt>
   12708:	ldr	r5, [r0]
   1270c:	cmp	r6, #0
   12710:	bne	1272c <__mempcpy_chk@plt+0x16bc>
   12714:	movw	r2, #25435	; 0x635b
   12718:	movt	r2, #1
   1271c:	mov	r0, #0
   12720:	mov	r1, r5
   12724:	mov	r3, r4
   12728:	b	1274c <__mempcpy_chk@plt+0x16dc>
   1272c:	mov	r0, r6
   12730:	bl	13e70 <__mempcpy_chk@plt+0x2e00>
   12734:	mov	r3, r0
   12738:	str	r4, [sp]
   1273c:	movw	r2, #25819	; 0x64db
   12740:	movt	r2, #1
   12744:	mov	r0, #0
   12748:	mov	r1, r5
   1274c:	bl	10f08 <error@plt>
   12750:	movw	r0, #28916	; 0x70f4
   12754:	movt	r0, #2
   12758:	ldr	r0, [r0]
   1275c:	bl	10e54 <_exit@plt>
   12760:	push	{r4, r5, r6, sl, fp, lr}
   12764:	add	fp, sp, #16
   12768:	mov	r4, r0
   1276c:	bl	10f8c <__errno_location@plt>
   12770:	mov	r5, r0
   12774:	ldr	r6, [r0]
   12778:	mov	r0, r4
   1277c:	bl	10e3c <free@plt>
   12780:	str	r6, [r5]
   12784:	pop	{r4, r5, r6, sl, fp, pc}
   12788:	push	{r4, r5, fp, lr}
   1278c:	add	fp, sp, #8
   12790:	cmp	r0, #0
   12794:	beq	12828 <__mempcpy_chk@plt+0x17b8>
   12798:	mov	r4, r0
   1279c:	mov	r1, #47	; 0x2f
   127a0:	bl	1101c <strrchr@plt>
   127a4:	cmp	r0, #0
   127a8:	mov	r5, r4
   127ac:	addne	r5, r0, #1
   127b0:	sub	r0, r5, r4
   127b4:	cmp	r0, #7
   127b8:	blt	1280c <__mempcpy_chk@plt+0x179c>
   127bc:	sub	r0, r5, #7
   127c0:	movw	r1, #25882	; 0x651a
   127c4:	movt	r1, #1
   127c8:	mov	r2, #7
   127cc:	bl	1104c <strncmp@plt>
   127d0:	cmp	r0, #0
   127d4:	bne	1280c <__mempcpy_chk@plt+0x179c>
   127d8:	movw	r1, #25890	; 0x6522
   127dc:	movt	r1, #1
   127e0:	mov	r0, r5
   127e4:	mov	r2, #3
   127e8:	bl	1104c <strncmp@plt>
   127ec:	cmp	r0, #0
   127f0:	beq	127fc <__mempcpy_chk@plt+0x178c>
   127f4:	mov	r4, r5
   127f8:	b	1280c <__mempcpy_chk@plt+0x179c>
   127fc:	add	r4, r5, #3
   12800:	movw	r0, #28984	; 0x7138
   12804:	movt	r0, #2
   12808:	str	r4, [r0]
   1280c:	movw	r0, #28988	; 0x713c
   12810:	movt	r0, #2
   12814:	str	r4, [r0]
   12818:	movw	r0, #29016	; 0x7158
   1281c:	movt	r0, #2
   12820:	str	r4, [r0]
   12824:	pop	{r4, r5, fp, pc}
   12828:	movw	r0, #28992	; 0x7140
   1282c:	movt	r0, #2
   12830:	ldr	r3, [r0]
   12834:	movw	r0, #25826	; 0x64e2
   12838:	movt	r0, #1
   1283c:	mov	r1, #55	; 0x37
   12840:	mov	r2, #1
   12844:	bl	10ec0 <fwrite@plt>
   12848:	bl	11058 <abort@plt>
   1284c:	push	{r4, r5, r6, sl, fp, lr}
   12850:	add	fp, sp, #16
   12854:	mov	r4, r0
   12858:	movw	r0, #29024	; 0x7160
   1285c:	movt	r0, #2
   12860:	cmp	r4, #0
   12864:	moveq	r4, r0
   12868:	bl	10f8c <__errno_location@plt>
   1286c:	mov	r5, r0
   12870:	ldr	r6, [r0]
   12874:	mov	r0, r4
   12878:	mov	r1, #48	; 0x30
   1287c:	bl	14f84 <__mempcpy_chk@plt+0x3f14>
   12880:	str	r6, [r5]
   12884:	pop	{r4, r5, r6, sl, fp, pc}
   12888:	movw	r1, #29024	; 0x7160
   1288c:	movt	r1, #2
   12890:	cmp	r0, #0
   12894:	movne	r1, r0
   12898:	ldr	r0, [r1]
   1289c:	bx	lr
   128a0:	movw	r2, #29024	; 0x7160
   128a4:	movt	r2, #2
   128a8:	cmp	r0, #0
   128ac:	movne	r2, r0
   128b0:	str	r1, [r2]
   128b4:	bx	lr
   128b8:	movw	r3, #29024	; 0x7160
   128bc:	movt	r3, #2
   128c0:	cmp	r0, #0
   128c4:	movne	r3, r0
   128c8:	ubfx	r0, r1, #5, #3
   128cc:	add	r0, r3, r0, lsl #2
   128d0:	ldr	r3, [r0, #8]
   128d4:	and	r1, r1, #31
   128d8:	eor	r2, r2, r3, lsr r1
   128dc:	and	r2, r2, #1
   128e0:	eor	r2, r3, r2, lsl r1
   128e4:	str	r2, [r0, #8]
   128e8:	mov	r0, #1
   128ec:	and	r0, r0, r3, lsr r1
   128f0:	bx	lr
   128f4:	movw	r2, #29024	; 0x7160
   128f8:	movt	r2, #2
   128fc:	cmp	r0, #0
   12900:	movne	r2, r0
   12904:	ldr	r0, [r2, #4]
   12908:	str	r1, [r2, #4]
   1290c:	bx	lr
   12910:	movw	r3, #29024	; 0x7160
   12914:	movt	r3, #2
   12918:	cmp	r0, #0
   1291c:	movne	r3, r0
   12920:	mov	r0, #10
   12924:	str	r0, [r3]
   12928:	cmp	r1, #0
   1292c:	cmpne	r2, #0
   12930:	bne	12940 <__mempcpy_chk@plt+0x18d0>
   12934:	push	{fp, lr}
   12938:	mov	fp, sp
   1293c:	bl	11058 <abort@plt>
   12940:	str	r1, [r3, #40]	; 0x28
   12944:	str	r2, [r3, #44]	; 0x2c
   12948:	bx	lr
   1294c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12950:	add	fp, sp, #28
   12954:	sub	sp, sp, #20
   12958:	mov	r8, r3
   1295c:	mov	r9, r2
   12960:	mov	sl, r1
   12964:	mov	r7, r0
   12968:	ldr	r0, [fp, #8]
   1296c:	movw	r5, #29024	; 0x7160
   12970:	movt	r5, #2
   12974:	cmp	r0, #0
   12978:	movne	r5, r0
   1297c:	bl	10f8c <__errno_location@plt>
   12980:	mov	r4, r0
   12984:	ldm	r5, {r0, r1}
   12988:	ldr	r2, [r5, #40]	; 0x28
   1298c:	ldr	r3, [r5, #44]	; 0x2c
   12990:	ldr	r6, [r4]
   12994:	add	r5, r5, #8
   12998:	stm	sp, {r0, r1, r5}
   1299c:	str	r2, [sp, #12]
   129a0:	str	r3, [sp, #16]
   129a4:	mov	r0, r7
   129a8:	mov	r1, sl
   129ac:	mov	r2, r9
   129b0:	mov	r3, r8
   129b4:	bl	129c4 <__mempcpy_chk@plt+0x1954>
   129b8:	str	r6, [r4]
   129bc:	sub	sp, fp, #28
   129c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c8:	add	fp, sp, #28
   129cc:	sub	sp, sp, #156	; 0x9c
   129d0:	mov	r9, r3
   129d4:	str	r2, [fp, #-84]	; 0xffffffac
   129d8:	mov	r6, r1
   129dc:	mov	r7, r0
   129e0:	ldr	r0, [fp, #12]
   129e4:	and	r1, r0, #4
   129e8:	str	r1, [sp, #32]
   129ec:	and	r1, r0, #1
   129f0:	str	r1, [sp, #36]	; 0x24
   129f4:	ubfx	sl, r0, #1, #1
   129f8:	bl	10ed8 <__ctype_get_mb_cur_max@plt>
   129fc:	str	r0, [sp, #40]	; 0x28
   12a00:	ldr	r0, [fp, #24]
   12a04:	str	r0, [sp, #76]	; 0x4c
   12a08:	ldr	r0, [fp, #20]
   12a0c:	str	r0, [sp, #68]	; 0x44
   12a10:	ldr	r0, [fp, #8]
   12a14:	str	r0, [fp, #-60]	; 0xffffffc4
   12a18:	mov	r0, #0
   12a1c:	str	r0, [sp, #72]	; 0x48
   12a20:	mov	r0, #0
   12a24:	str	r0, [sp, #92]	; 0x5c
   12a28:	mov	r0, #0
   12a2c:	str	r0, [fp, #-72]	; 0xffffffb8
   12a30:	mov	r0, #0
   12a34:	mov	r1, #0
   12a38:	str	r1, [fp, #-56]	; 0xffffffc8
   12a3c:	mov	r1, #0
   12a40:	str	r1, [sp, #56]	; 0x38
   12a44:	mov	r5, #1
   12a48:	str	r7, [sp, #80]	; 0x50
   12a4c:	mov	r4, r6
   12a50:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12a54:	cmp	r6, #10
   12a58:	bhi	139c0 <__mempcpy_chk@plt+0x2950>
   12a5c:	add	r1, pc, #20
   12a60:	mov	r8, #0
   12a64:	mov	r2, #1
   12a68:	mov	r3, #0
   12a6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a70:	mov	lr, r9
   12a74:	ldr	pc, [r1, r6, lsl #2]
   12a78:	andeq	r2, r1, r0, asr fp
   12a7c:	andeq	r2, r1, r0, lsl #23
   12a80:	andeq	r2, r1, r0, asr #22
   12a84:	andeq	r2, r1, r8, lsr fp
   12a88:	andeq	r2, r1, r4, ror fp
   12a8c:	ldrdeq	r2, [r1], -r4
   12a90:	andeq	r2, r1, r0, ror #22
   12a94:	andeq	r2, r1, r0, lsr ip
   12a98:	andeq	r2, r1, r4, lsr #21
   12a9c:	andeq	r2, r1, r4, lsr #21
   12aa0:	andeq	r2, r1, ip, asr #21
   12aa4:	movw	r0, #25974	; 0x6576
   12aa8:	movt	r0, #1
   12aac:	mov	r1, r6
   12ab0:	bl	13fcc <__mempcpy_chk@plt+0x2f5c>
   12ab4:	str	r0, [sp, #68]	; 0x44
   12ab8:	movw	r0, #25976	; 0x6578
   12abc:	movt	r0, #1
   12ac0:	mov	r1, r6
   12ac4:	bl	13fcc <__mempcpy_chk@plt+0x2f5c>
   12ac8:	str	r0, [sp, #76]	; 0x4c
   12acc:	mov	r8, #0
   12ad0:	tst	sl, #1
   12ad4:	bne	12b0c <__mempcpy_chk@plt+0x1a9c>
   12ad8:	ldr	r0, [sp, #68]	; 0x44
   12adc:	ldrb	r0, [r0]
   12ae0:	cmp	r0, #0
   12ae4:	beq	12b0c <__mempcpy_chk@plt+0x1a9c>
   12ae8:	ldr	r1, [sp, #68]	; 0x44
   12aec:	add	r1, r1, #1
   12af0:	mov	r8, #0
   12af4:	cmp	r8, r4
   12af8:	strbcc	r0, [r7, r8]
   12afc:	ldrb	r0, [r1, r8]
   12b00:	add	r8, r8, #1
   12b04:	cmp	r0, #0
   12b08:	bne	12af4 <__mempcpy_chk@plt+0x1a84>
   12b0c:	ldr	r6, [sp, #76]	; 0x4c
   12b10:	mov	r0, r6
   12b14:	bl	10f80 <strlen@plt>
   12b18:	str	r0, [fp, #-72]	; 0xffffffb8
   12b1c:	str	r6, [sp, #92]	; 0x5c
   12b20:	mov	r2, #1
   12b24:	mov	r3, sl
   12b28:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b2c:	mov	lr, r9
   12b30:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12b34:	b	12c30 <__mempcpy_chk@plt+0x1bc0>
   12b38:	mov	r0, #1
   12b3c:	b	12b80 <__mempcpy_chk@plt+0x1b10>
   12b40:	tst	sl, #1
   12b44:	bne	12b80 <__mempcpy_chk@plt+0x1b10>
   12b48:	mov	r2, r0
   12b4c:	b	12ba8 <__mempcpy_chk@plt+0x1b38>
   12b50:	mov	r6, #0
   12b54:	mov	r8, #0
   12b58:	mov	r2, r0
   12b5c:	b	12c2c <__mempcpy_chk@plt+0x1bbc>
   12b60:	mov	r0, #1
   12b64:	str	r0, [fp, #-72]	; 0xffffffb8
   12b68:	mov	r8, #0
   12b6c:	mov	r6, #5
   12b70:	b	12bec <__mempcpy_chk@plt+0x1b7c>
   12b74:	mov	r2, #1
   12b78:	tst	sl, #1
   12b7c:	beq	12ba8 <__mempcpy_chk@plt+0x1b38>
   12b80:	mov	r1, #1
   12b84:	str	r1, [fp, #-72]	; 0xffffffb8
   12b88:	mov	r8, #0
   12b8c:	mov	r6, #2
   12b90:	movw	r1, #25976	; 0x6578
   12b94:	movt	r1, #1
   12b98:	str	r1, [sp, #92]	; 0x5c
   12b9c:	mov	r2, r0
   12ba0:	mov	r3, #1
   12ba4:	b	12c30 <__mempcpy_chk@plt+0x1bc0>
   12ba8:	mov	r8, #1
   12bac:	mov	r6, #2
   12bb0:	cmp	r4, #0
   12bb4:	movne	r0, #39	; 0x27
   12bb8:	strbne	r0, [r7]
   12bbc:	movw	r0, #25976	; 0x6578
   12bc0:	movt	r0, #1
   12bc4:	str	r0, [sp, #92]	; 0x5c
   12bc8:	mov	r0, #1
   12bcc:	str	r0, [fp, #-72]	; 0xffffffb8
   12bd0:	b	12c2c <__mempcpy_chk@plt+0x1bbc>
   12bd4:	mov	r6, #5
   12bd8:	tst	sl, #1
   12bdc:	beq	12c04 <__mempcpy_chk@plt+0x1b94>
   12be0:	mov	r0, #1
   12be4:	str	r0, [fp, #-72]	; 0xffffffb8
   12be8:	mov	r8, #0
   12bec:	movw	r0, #25972	; 0x6574
   12bf0:	movt	r0, #1
   12bf4:	str	r0, [sp, #92]	; 0x5c
   12bf8:	mov	r2, #1
   12bfc:	mov	r3, #1
   12c00:	b	12c30 <__mempcpy_chk@plt+0x1bc0>
   12c04:	cmp	r4, #0
   12c08:	movne	r0, #34	; 0x22
   12c0c:	strbne	r0, [r7]
   12c10:	mov	r8, #1
   12c14:	movw	r0, #25972	; 0x6574
   12c18:	movt	r0, #1
   12c1c:	str	r0, [sp, #92]	; 0x5c
   12c20:	mov	r0, #1
   12c24:	str	r0, [fp, #-72]	; 0xffffffb8
   12c28:	mov	r2, #1
   12c2c:	mov	r3, #0
   12c30:	ldr	r0, [fp, #16]
   12c34:	cmp	r0, #0
   12c38:	movwne	r0, #1
   12c3c:	and	r0, r0, r3
   12c40:	str	r0, [fp, #-88]	; 0xffffffa8
   12c44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c48:	cmp	r0, #0
   12c4c:	movwne	r0, #1
   12c50:	and	r1, r0, r3
   12c54:	and	r1, r2, r1
   12c58:	str	r1, [sp, #48]	; 0x30
   12c5c:	str	r6, [fp, #-60]	; 0xffffffc4
   12c60:	subs	r6, r6, #2
   12c64:	clz	r1, r6
   12c68:	lsr	r1, r1, #5
   12c6c:	and	r1, r1, r3
   12c70:	str	r1, [sp, #60]	; 0x3c
   12c74:	str	r6, [fp, #-80]	; 0xffffffb0
   12c78:	mov	r1, r6
   12c7c:	movwne	r1, #1
   12c80:	str	r3, [fp, #-76]	; 0xffffffb4
   12c84:	eor	r3, r3, #1
   12c88:	str	r3, [sp, #88]	; 0x58
   12c8c:	orr	r3, r1, r3
   12c90:	str	r3, [sp, #64]	; 0x40
   12c94:	and	r1, r1, r2
   12c98:	str	r1, [fp, #-68]	; 0xffffffbc
   12c9c:	and	r0, r0, r1
   12ca0:	str	r0, [fp, #-64]	; 0xffffffc0
   12ca4:	str	r2, [sp, #84]	; 0x54
   12ca8:	eor	r0, r2, #1
   12cac:	str	r0, [sp, #52]	; 0x34
   12cb0:	mov	r6, #0
   12cb4:	cmn	lr, #1
   12cb8:	beq	12cc8 <__mempcpy_chk@plt+0x1c58>
   12cbc:	cmp	r6, lr
   12cc0:	bne	12cd4 <__mempcpy_chk@plt+0x1c64>
   12cc4:	b	13840 <__mempcpy_chk@plt+0x27d0>
   12cc8:	ldrb	r0, [ip, r6]
   12ccc:	cmp	r0, #0
   12cd0:	beq	13840 <__mempcpy_chk@plt+0x27d0>
   12cd4:	str	r5, [fp, #-48]	; 0xffffffd0
   12cd8:	mov	sl, #0
   12cdc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d18 <__mempcpy_chk@plt+0x1ca8>
   12ce8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12cec:	add	r5, r6, r0
   12cf0:	cmp	r0, #2
   12cf4:	bcc	12d10 <__mempcpy_chk@plt+0x1ca0>
   12cf8:	cmn	lr, #1
   12cfc:	bne	12d10 <__mempcpy_chk@plt+0x1ca0>
   12d00:	mov	r0, ip
   12d04:	bl	10f80 <strlen@plt>
   12d08:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d0c:	mov	lr, r0
   12d10:	cmp	r5, lr
   12d14:	bls	12d24 <__mempcpy_chk@plt+0x1cb4>
   12d18:	mov	r0, #0
   12d1c:	str	r0, [fp, #-52]	; 0xffffffcc
   12d20:	b	12d70 <__mempcpy_chk@plt+0x1d00>
   12d24:	mov	r5, r4
   12d28:	mov	r4, lr
   12d2c:	add	r0, ip, r6
   12d30:	ldr	r1, [sp, #92]	; 0x5c
   12d34:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d38:	bl	10e84 <memcmp@plt>
   12d3c:	cmp	r0, #0
   12d40:	mov	r1, r0
   12d44:	movwne	r1, #1
   12d48:	ldr	r2, [sp, #88]	; 0x58
   12d4c:	orr	r1, r1, r2
   12d50:	tst	r1, #1
   12d54:	beq	13904 <__mempcpy_chk@plt+0x2894>
   12d58:	clz	r0, r0
   12d5c:	lsr	r0, r0, #5
   12d60:	str	r0, [fp, #-52]	; 0xffffffcc
   12d64:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d68:	mov	lr, r4
   12d6c:	mov	r4, r5
   12d70:	ldrb	r5, [ip, r6]
   12d74:	cmp	r5, #126	; 0x7e
   12d78:	bhi	13134 <__mempcpy_chk@plt+0x20c4>
   12d7c:	mov	r9, #1
   12d80:	mov	r2, #110	; 0x6e
   12d84:	mov	r0, #97	; 0x61
   12d88:	add	r3, pc, #4
   12d8c:	mov	r1, #0
   12d90:	ldr	pc, [r3, r5, lsl #2]
   12d94:	andeq	r3, r1, ip, lsr #32
   12d98:	andeq	r3, r1, r4, lsr r1
   12d9c:	andeq	r3, r1, r4, lsr r1
   12da0:	andeq	r3, r1, r4, lsr r1
   12da4:	andeq	r3, r1, r4, lsr r1
   12da8:	andeq	r3, r1, r4, lsr r1
   12dac:	andeq	r3, r1, r4, lsr r1
   12db0:	strdeq	r3, [r1], -r8
   12db4:	andeq	r3, r1, ip
   12db8:	andeq	r3, r1, r4
   12dbc:	andeq	r3, r1, r8, lsl r0
   12dc0:	muleq	r1, ip, r0
   12dc4:	strdeq	r2, [r1], -ip
   12dc8:	andeq	r3, r1, r4, lsl r0
   12dcc:	andeq	r3, r1, r4, lsr r1
   12dd0:	andeq	r3, r1, r4, lsr r1
   12dd4:	andeq	r3, r1, r4, lsr r1
   12dd8:	andeq	r3, r1, r4, lsr r1
   12ddc:	andeq	r3, r1, r4, lsr r1
   12de0:	andeq	r3, r1, r4, lsr r1
   12de4:	andeq	r3, r1, r4, lsr r1
   12de8:	andeq	r3, r1, r4, lsr r1
   12dec:	andeq	r3, r1, r4, lsr r1
   12df0:	andeq	r3, r1, r4, lsr r1
   12df4:	andeq	r3, r1, r4, lsr r1
   12df8:	andeq	r3, r1, r4, lsr r1
   12dfc:	andeq	r3, r1, r4, lsr r1
   12e00:	andeq	r3, r1, r4, lsr r1
   12e04:	andeq	r3, r1, r4, lsr r1
   12e08:	andeq	r3, r1, r4, lsr r1
   12e0c:	andeq	r3, r1, r4, lsr r1
   12e10:	andeq	r3, r1, r4, lsr r1
   12e14:	andeq	r3, r1, r8, lsr #3
   12e18:	andeq	r3, r1, ip, lsr #3
   12e1c:	andeq	r3, r1, ip, lsr #3
   12e20:	andeq	r2, r1, r4, lsr #31
   12e24:	andeq	r3, r1, ip, lsr #3
   12e28:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e2c:	andeq	r3, r1, ip, lsr #3
   12e30:	andeq	r3, r1, r4, lsr #1
   12e34:	andeq	r3, r1, ip, lsr #3
   12e38:	andeq	r3, r1, ip, lsr #3
   12e3c:	andeq	r3, r1, ip, lsr #3
   12e40:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e44:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e48:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e4c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e50:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e54:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e58:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e5c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e60:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e64:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e68:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e6c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e70:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e74:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e78:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e7c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e80:	andeq	r3, r1, ip, lsr #3
   12e84:	andeq	r3, r1, ip, lsr #3
   12e88:	andeq	r3, r1, ip, lsr #3
   12e8c:	andeq	r3, r1, ip, lsr #3
   12e90:	andeq	r3, r1, ip, rrx
   12e94:	andeq	r3, r1, r4, lsr r1
   12e98:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12e9c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ea0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ea4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ea8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12eac:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12eb0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12eb4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12eb8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ebc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ec0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ec4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ec8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ecc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ed0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ed4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ed8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12edc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ee0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ee4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ee8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12eec:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ef0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ef4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ef8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12efc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f00:	andeq	r3, r1, ip, lsr #3
   12f04:	ldrdeq	r2, [r1], -r8
   12f08:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f0c:	andeq	r3, r1, ip, lsr #3
   12f10:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f14:	andeq	r3, r1, ip, lsr #3
   12f18:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f1c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f20:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f24:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f28:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f2c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f30:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f34:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f38:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f3c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f40:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f44:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f48:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f4c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f50:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f54:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f58:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f5c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f60:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f64:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f68:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f6c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f70:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f74:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f78:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f7c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f80:			; <UNDEFINED> instruction: 0x00012fb8
   12f84:	andeq	r3, r1, ip, lsr #3
   12f88:			; <UNDEFINED> instruction: 0x00012fb8
   12f8c:	andeq	r2, r1, r4, lsr #31
   12f90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f94:	cmp	r0, #0
   12f98:	beq	1320c <__mempcpy_chk@plt+0x219c>
   12f9c:	ldr	r0, [fp, #16]
   12fa0:	b	13210 <__mempcpy_chk@plt+0x21a0>
   12fa4:	mov	r9, #0
   12fa8:	cmp	r6, #0
   12fac:	beq	131a8 <__mempcpy_chk@plt+0x2138>
   12fb0:	mov	sl, #0
   12fb4:	b	12f90 <__mempcpy_chk@plt+0x1f20>
   12fb8:	mov	r9, #0
   12fbc:	cmn	lr, #1
   12fc0:	beq	1318c <__mempcpy_chk@plt+0x211c>
   12fc4:	cmp	r6, #0
   12fc8:	bne	12fb0 <__mempcpy_chk@plt+0x1f40>
   12fcc:	cmp	lr, #1
   12fd0:	beq	131a8 <__mempcpy_chk@plt+0x2138>
   12fd4:	b	12fb0 <__mempcpy_chk@plt+0x1f40>
   12fd8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12fdc:	cmp	r0, #2
   12fe0:	bne	131d4 <__mempcpy_chk@plt+0x2164>
   12fe4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fe8:	tst	r0, #1
   12fec:	bne	1391c <__mempcpy_chk@plt+0x28ac>
   12ff0:	mov	sl, #0
   12ff4:	mov	r0, #92	; 0x5c
   12ff8:	b	131e8 <__mempcpy_chk@plt+0x2178>
   12ffc:	mov	r0, #102	; 0x66
   13000:	b	131f8 <__mempcpy_chk@plt+0x2188>
   13004:	mov	r2, #116	; 0x74
   13008:	b	13018 <__mempcpy_chk@plt+0x1fa8>
   1300c:	mov	r0, #98	; 0x62
   13010:	b	131f8 <__mempcpy_chk@plt+0x2188>
   13014:	mov	r2, #114	; 0x72
   13018:	ldr	r0, [sp, #64]	; 0x40
   1301c:	tst	r0, #1
   13020:	mov	r0, r2
   13024:	bne	131f8 <__mempcpy_chk@plt+0x2188>
   13028:	b	1391c <__mempcpy_chk@plt+0x28ac>
   1302c:	ldr	r0, [sp, #84]	; 0x54
   13030:	tst	r0, #1
   13034:	beq	132e8 <__mempcpy_chk@plt+0x2278>
   13038:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1303c:	tst	r0, #1
   13040:	bne	1391c <__mempcpy_chk@plt+0x28ac>
   13044:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13048:	cmp	r0, #2
   1304c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13050:	movwne	r0, #1
   13054:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13058:	orr	r0, r0, r2
   1305c:	tst	r0, #1
   13060:	beq	136dc <__mempcpy_chk@plt+0x266c>
   13064:	mov	r0, r8
   13068:	b	13710 <__mempcpy_chk@plt+0x26a0>
   1306c:	mov	sl, #0
   13070:	mov	r5, #63	; 0x3f
   13074:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13078:	cmp	r0, #5
   1307c:	beq	1349c <__mempcpy_chk@plt+0x242c>
   13080:	cmp	r0, #2
   13084:	bne	1353c <__mempcpy_chk@plt+0x24cc>
   13088:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1308c:	tst	r0, #1
   13090:	mov	r9, #0
   13094:	beq	12f90 <__mempcpy_chk@plt+0x1f20>
   13098:	b	1391c <__mempcpy_chk@plt+0x28ac>
   1309c:	mov	r0, #118	; 0x76
   130a0:	b	131f8 <__mempcpy_chk@plt+0x2188>
   130a4:	mov	r5, #39	; 0x27
   130a8:	mov	r0, #1
   130ac:	str	r0, [sp, #56]	; 0x38
   130b0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   130b4:	cmp	r0, #2
   130b8:	bne	13308 <__mempcpy_chk@plt+0x2298>
   130bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130c0:	tst	r0, #1
   130c4:	bne	1391c <__mempcpy_chk@plt+0x28ac>
   130c8:	ldr	r2, [sp, #72]	; 0x48
   130cc:	cmp	r2, #0
   130d0:	mov	r0, r2
   130d4:	movwne	r0, #1
   130d8:	clz	r1, r4
   130dc:	lsr	r1, r1, #5
   130e0:	orrs	r0, r0, r1
   130e4:	moveq	r2, r4
   130e8:	str	r2, [sp, #72]	; 0x48
   130ec:	moveq	r4, r0
   130f0:	cmp	r8, r4
   130f4:	movcc	r0, #39	; 0x27
   130f8:	strbcc	r0, [r7, r8]
   130fc:	add	r0, r8, #1
   13100:	cmp	r0, r4
   13104:	movcc	r1, #92	; 0x5c
   13108:	strbcc	r1, [r7, r0]
   1310c:	add	r0, r8, #2
   13110:	cmp	r0, r4
   13114:	movcc	r1, #39	; 0x27
   13118:	strbcc	r1, [r7, r0]
   1311c:	add	r8, r8, #3
   13120:	mov	r0, #0
   13124:	str	r0, [fp, #-56]	; 0xffffffc8
   13128:	mov	sl, #0
   1312c:	mov	r9, #1
   13130:	b	12f90 <__mempcpy_chk@plt+0x1f20>
   13134:	str	r4, [sp, #24]
   13138:	ldr	r0, [sp, #40]	; 0x28
   1313c:	cmp	r0, #1
   13140:	bne	13310 <__mempcpy_chk@plt+0x22a0>
   13144:	str	lr, [sp, #28]
   13148:	bl	10f68 <__ctype_b_loc@plt>
   1314c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13150:	ldr	r0, [r0]
   13154:	add	r0, r0, r5, lsl #1
   13158:	ldrb	r0, [r0, #1]
   1315c:	ubfx	r9, r0, #6, #1
   13160:	mov	r1, #1
   13164:	ldr	r4, [sp, #24]
   13168:	ldr	r0, [sp, #52]	; 0x34
   1316c:	orr	r0, r9, r0
   13170:	mov	r2, r1
   13174:	cmp	r1, #1
   13178:	bhi	13544 <__mempcpy_chk@plt+0x24d4>
   1317c:	tst	r0, #1
   13180:	beq	13544 <__mempcpy_chk@plt+0x24d4>
   13184:	ldr	lr, [sp, #28]
   13188:	b	12f90 <__mempcpy_chk@plt+0x1f20>
   1318c:	cmp	r6, #0
   13190:	ldrbeq	r0, [ip, #1]
   13194:	cmpeq	r0, #0
   13198:	beq	131a8 <__mempcpy_chk@plt+0x2138>
   1319c:	mvn	lr, #0
   131a0:	mov	sl, #0
   131a4:	b	12f90 <__mempcpy_chk@plt+0x1f20>
   131a8:	mov	r1, #1
   131ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   131b0:	cmp	r0, #2
   131b4:	bne	131cc <__mempcpy_chk@plt+0x215c>
   131b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131bc:	tst	r0, #1
   131c0:	mov	r9, r1
   131c4:	beq	12f90 <__mempcpy_chk@plt+0x1f20>
   131c8:	b	1391c <__mempcpy_chk@plt+0x28ac>
   131cc:	mov	r9, r1
   131d0:	b	12f90 <__mempcpy_chk@plt+0x1f20>
   131d4:	mov	sl, #0
   131d8:	mov	r0, #92	; 0x5c
   131dc:	ldr	r1, [sp, #48]	; 0x30
   131e0:	cmp	r1, #0
   131e4:	beq	131f8 <__mempcpy_chk@plt+0x2188>
   131e8:	mov	r9, #0
   131ec:	cmp	sl, #0
   131f0:	beq	137a8 <__mempcpy_chk@plt+0x2738>
   131f4:	b	137e4 <__mempcpy_chk@plt+0x2774>
   131f8:	mov	r9, #0
   131fc:	ldr	r1, [sp, #84]	; 0x54
   13200:	tst	r1, #1
   13204:	mov	sl, #0
   13208:	bne	13248 <__mempcpy_chk@plt+0x21d8>
   1320c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13210:	cmp	r0, #0
   13214:	mov	r0, r5
   13218:	beq	1323c <__mempcpy_chk@plt+0x21cc>
   1321c:	ubfx	r0, r5, #5, #3
   13220:	ldr	r1, [fp, #16]
   13224:	ldr	r0, [r1, r0, lsl #2]
   13228:	and	r1, r5, #31
   1322c:	mov	r2, #1
   13230:	tst	r0, r2, lsl r1
   13234:	mov	r0, r5
   13238:	bne	13248 <__mempcpy_chk@plt+0x21d8>
   1323c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13240:	cmp	r1, #0
   13244:	beq	137a0 <__mempcpy_chk@plt+0x2730>
   13248:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1324c:	tst	r1, #1
   13250:	bne	1391c <__mempcpy_chk@plt+0x28ac>
   13254:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13258:	cmp	r1, #2
   1325c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13260:	movwne	r1, #1
   13264:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13268:	orr	r1, r1, r2
   1326c:	tst	r1, #1
   13270:	beq	1327c <__mempcpy_chk@plt+0x220c>
   13274:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13278:	b	132b8 <__mempcpy_chk@plt+0x2248>
   1327c:	cmp	r8, r4
   13280:	movcc	r1, #39	; 0x27
   13284:	strbcc	r1, [r7, r8]
   13288:	add	r1, r8, #1
   1328c:	cmp	r1, r4
   13290:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13294:	movcc	r2, #36	; 0x24
   13298:	strbcc	r2, [r7, r1]
   1329c:	add	r1, r8, #2
   132a0:	cmp	r1, r4
   132a4:	movcc	r2, #39	; 0x27
   132a8:	strbcc	r2, [r7, r1]
   132ac:	add	r8, r8, #3
   132b0:	mov	r1, #1
   132b4:	str	r1, [fp, #-56]	; 0xffffffc8
   132b8:	cmp	r8, r4
   132bc:	movcc	r1, #92	; 0x5c
   132c0:	strbcc	r1, [r7, r8]
   132c4:	add	r8, r8, #1
   132c8:	cmp	r8, r4
   132cc:	strbcc	r0, [r7, r8]
   132d0:	and	r5, r5, r9
   132d4:	add	r8, r8, #1
   132d8:	add	r6, r6, #1
   132dc:	cmn	lr, #1
   132e0:	bne	12cbc <__mempcpy_chk@plt+0x1c4c>
   132e4:	b	12cc8 <__mempcpy_chk@plt+0x1c58>
   132e8:	mov	r9, #0
   132ec:	ldr	r0, [sp, #36]	; 0x24
   132f0:	cmp	r0, #0
   132f4:	mov	sl, #0
   132f8:	mov	r5, #0
   132fc:	beq	1320c <__mempcpy_chk@plt+0x219c>
   13300:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13304:	b	132d8 <__mempcpy_chk@plt+0x2268>
   13308:	mov	r9, #1
   1330c:	b	12f90 <__mempcpy_chk@plt+0x1f20>
   13310:	mov	r0, #0
   13314:	str	r0, [fp, #-36]	; 0xffffffdc
   13318:	str	r0, [fp, #-40]	; 0xffffffd8
   1331c:	cmn	lr, #1
   13320:	bne	13334 <__mempcpy_chk@plt+0x22c4>
   13324:	mov	r0, ip
   13328:	bl	10f80 <strlen@plt>
   1332c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13330:	mov	lr, r0
   13334:	add	r0, ip, r6
   13338:	str	r0, [sp, #20]
   1333c:	mov	r9, #1
   13340:	mov	r7, #0
   13344:	sub	r4, fp, #40	; 0x28
   13348:	str	lr, [sp, #28]
   1334c:	str	r7, [sp, #44]	; 0x2c
   13350:	add	r7, r7, r6
   13354:	add	r1, ip, r7
   13358:	sub	r2, lr, r7
   1335c:	sub	r0, fp, #44	; 0x2c
   13360:	mov	r3, r4
   13364:	bl	15970 <__mempcpy_chk@plt+0x4900>
   13368:	cmp	r0, #0
   1336c:	beq	1382c <__mempcpy_chk@plt+0x27bc>
   13370:	cmn	r0, #1
   13374:	beq	137ec <__mempcpy_chk@plt+0x277c>
   13378:	cmn	r0, #2
   1337c:	ldr	lr, [sp, #28]
   13380:	beq	137f4 <__mempcpy_chk@plt+0x2784>
   13384:	cmp	r0, #2
   13388:	mov	r1, #0
   1338c:	movwcc	r1, #1
   13390:	ldr	r2, [sp, #60]	; 0x3c
   13394:	eor	r2, r2, #1
   13398:	orrs	r1, r2, r1
   1339c:	ldr	r4, [sp, #24]
   133a0:	bne	13460 <__mempcpy_chk@plt+0x23f0>
   133a4:	ldr	r1, [sp, #44]	; 0x2c
   133a8:	ldr	r2, [sp, #20]
   133ac:	add	r1, r2, r1
   133b0:	mov	r2, #1
   133b4:	ldrb	r3, [r1, r2]
   133b8:	sub	r3, r3, #91	; 0x5b
   133bc:	cmp	r3, #33	; 0x21
   133c0:	bhi	13454 <__mempcpy_chk@plt+0x23e4>
   133c4:	add	r7, pc, #0
   133c8:	ldr	pc, [r7, r3, lsl #2]
   133cc:	andeq	r3, r1, r4, lsl r9
   133d0:	andeq	r3, r1, r4, lsl r9
   133d4:	andeq	r3, r1, r4, asr r4
   133d8:	andeq	r3, r1, r4, lsl r9
   133dc:	andeq	r3, r1, r4, asr r4
   133e0:	andeq	r3, r1, r4, lsl r9
   133e4:	andeq	r3, r1, r4, asr r4
   133e8:	andeq	r3, r1, r4, asr r4
   133ec:	andeq	r3, r1, r4, asr r4
   133f0:	andeq	r3, r1, r4, asr r4
   133f4:	andeq	r3, r1, r4, asr r4
   133f8:	andeq	r3, r1, r4, asr r4
   133fc:	andeq	r3, r1, r4, asr r4
   13400:	andeq	r3, r1, r4, asr r4
   13404:	andeq	r3, r1, r4, asr r4
   13408:	andeq	r3, r1, r4, asr r4
   1340c:	andeq	r3, r1, r4, asr r4
   13410:	andeq	r3, r1, r4, asr r4
   13414:	andeq	r3, r1, r4, asr r4
   13418:	andeq	r3, r1, r4, asr r4
   1341c:	andeq	r3, r1, r4, asr r4
   13420:	andeq	r3, r1, r4, asr r4
   13424:	andeq	r3, r1, r4, asr r4
   13428:	andeq	r3, r1, r4, asr r4
   1342c:	andeq	r3, r1, r4, asr r4
   13430:	andeq	r3, r1, r4, asr r4
   13434:	andeq	r3, r1, r4, asr r4
   13438:	andeq	r3, r1, r4, asr r4
   1343c:	andeq	r3, r1, r4, asr r4
   13440:	andeq	r3, r1, r4, asr r4
   13444:	andeq	r3, r1, r4, asr r4
   13448:	andeq	r3, r1, r4, asr r4
   1344c:	andeq	r3, r1, r4, asr r4
   13450:	andeq	r3, r1, r4, lsl r9
   13454:	add	r2, r2, #1
   13458:	cmp	r2, r0
   1345c:	bcc	133b4 <__mempcpy_chk@plt+0x2344>
   13460:	ldr	r7, [sp, #44]	; 0x2c
   13464:	add	r7, r0, r7
   13468:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1346c:	bl	10eb4 <iswprint@plt>
   13470:	cmp	r0, #0
   13474:	movwne	r0, #1
   13478:	and	r9, r9, r0
   1347c:	sub	r4, fp, #40	; 0x28
   13480:	mov	r0, r4
   13484:	bl	10e6c <mbsinit@plt>
   13488:	ldr	lr, [sp, #28]
   1348c:	cmp	r0, #0
   13490:	ldr	ip, [fp, #-84]	; 0xffffffac
   13494:	beq	1334c <__mempcpy_chk@plt+0x22dc>
   13498:	b	13834 <__mempcpy_chk@plt+0x27c4>
   1349c:	ldr	r0, [sp, #32]
   134a0:	cmp	r0, #0
   134a4:	beq	1353c <__mempcpy_chk@plt+0x24cc>
   134a8:	add	r0, r6, #2
   134ac:	cmp	r0, lr
   134b0:	bcs	1353c <__mempcpy_chk@plt+0x24cc>
   134b4:	add	r1, ip, r6
   134b8:	ldrb	r1, [r1, #1]
   134bc:	cmp	r1, #63	; 0x3f
   134c0:	bne	1353c <__mempcpy_chk@plt+0x24cc>
   134c4:	ldrb	r9, [ip, r0]
   134c8:	sub	r2, r9, #33	; 0x21
   134cc:	cmp	r2, #29
   134d0:	bhi	1353c <__mempcpy_chk@plt+0x24cc>
   134d4:	mov	r3, #1
   134d8:	movw	r1, #20929	; 0x51c1
   134dc:	movt	r1, #14336	; 0x3800
   134e0:	tst	r1, r3, lsl r2
   134e4:	beq	1353c <__mempcpy_chk@plt+0x24cc>
   134e8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   134ec:	tst	r1, #1
   134f0:	bne	1391c <__mempcpy_chk@plt+0x28ac>
   134f4:	cmp	r8, r4
   134f8:	movcc	r1, #63	; 0x3f
   134fc:	strbcc	r1, [r7, r8]
   13500:	add	r2, r8, #1
   13504:	cmp	r2, r4
   13508:	movcc	r1, #34	; 0x22
   1350c:	strbcc	r1, [r7, r2]
   13510:	add	r2, r8, #2
   13514:	cmp	r2, r4
   13518:	movcc	r1, #34	; 0x22
   1351c:	strbcc	r1, [r7, r2]
   13520:	add	r2, r8, #3
   13524:	cmp	r2, r4
   13528:	movcc	r1, #63	; 0x3f
   1352c:	strbcc	r1, [r7, r2]
   13530:	add	r8, r8, #4
   13534:	mov	r6, r0
   13538:	mov	r5, r9
   1353c:	mov	r9, #0
   13540:	b	12f90 <__mempcpy_chk@plt+0x1f20>
   13544:	add	r1, r2, r6
   13548:	str	r1, [sp, #44]	; 0x2c
   1354c:	add	r1, r6, #1
   13550:	mov	r3, #0
   13554:	ldr	lr, [sp, #28]
   13558:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1355c:	tst	r0, #1
   13560:	bne	13654 <__mempcpy_chk@plt+0x25e4>
   13564:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13568:	tst	r2, #1
   1356c:	bne	1391c <__mempcpy_chk@plt+0x28ac>
   13570:	cmp	r6, #2
   13574:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13578:	movwne	r3, #1
   1357c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13580:	orr	r3, r3, r2
   13584:	tst	r3, #1
   13588:	bne	135c4 <__mempcpy_chk@plt+0x2554>
   1358c:	cmp	r8, r4
   13590:	movcc	r2, #39	; 0x27
   13594:	strbcc	r2, [r7, r8]
   13598:	add	r3, r8, #1
   1359c:	cmp	r3, r4
   135a0:	movcc	r2, #36	; 0x24
   135a4:	strbcc	r2, [r7, r3]
   135a8:	add	r3, r8, #2
   135ac:	cmp	r3, r4
   135b0:	movcc	r2, #39	; 0x27
   135b4:	strbcc	r2, [r7, r3]
   135b8:	add	r8, r8, #3
   135bc:	mov	r2, #1
   135c0:	str	r2, [fp, #-56]	; 0xffffffc8
   135c4:	cmp	r8, r4
   135c8:	movcc	r2, #92	; 0x5c
   135cc:	strbcc	r2, [r7, r8]
   135d0:	add	r3, r8, #1
   135d4:	cmp	r3, r4
   135d8:	bcs	135f8 <__mempcpy_chk@plt+0x2588>
   135dc:	and	r7, r5, #192	; 0xc0
   135e0:	mov	r2, #48	; 0x30
   135e4:	orr	r7, r2, r7, lsr #6
   135e8:	ldr	r6, [sp, #80]	; 0x50
   135ec:	strb	r7, [r6, r3]
   135f0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   135f4:	ldr	r7, [sp, #80]	; 0x50
   135f8:	add	r3, r8, #2
   135fc:	cmp	r3, r4
   13600:	bcs	13620 <__mempcpy_chk@plt+0x25b0>
   13604:	lsr	r7, r5, #3
   13608:	mov	r2, #6
   1360c:	bfi	r7, r2, #3, #29
   13610:	ldr	r6, [sp, #80]	; 0x50
   13614:	strb	r7, [r6, r3]
   13618:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1361c:	ldr	r7, [sp, #80]	; 0x50
   13620:	mov	r2, #6
   13624:	bfi	r5, r2, #3, #29
   13628:	add	r8, r8, #3
   1362c:	mov	r3, #1
   13630:	b	13678 <__mempcpy_chk@plt+0x2608>
   13634:	ldr	r7, [sp, #80]	; 0x50
   13638:	cmp	r8, r4
   1363c:	strbcc	r5, [r7, r8]
   13640:	ldrb	r5, [ip, r1]
   13644:	add	r1, r1, #1
   13648:	add	r8, r8, #1
   1364c:	tst	r0, #1
   13650:	beq	13564 <__mempcpy_chk@plt+0x24f4>
   13654:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13658:	tst	r2, #1
   1365c:	beq	13670 <__mempcpy_chk@plt+0x2600>
   13660:	cmp	r8, r4
   13664:	movcc	r2, #92	; 0x5c
   13668:	strbcc	r2, [r7, r8]
   1366c:	add	r8, r8, #1
   13670:	mov	r2, #0
   13674:	str	r2, [fp, #-52]	; 0xffffffcc
   13678:	and	sl, r3, #1
   1367c:	ldr	r2, [sp, #44]	; 0x2c
   13680:	cmp	r2, r1
   13684:	bls	13790 <__mempcpy_chk@plt+0x2720>
   13688:	cmp	sl, #0
   1368c:	movwne	sl, #1
   13690:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13694:	mvn	r7, r2
   13698:	orr	r7, r7, sl
   1369c:	tst	r7, #1
   136a0:	bne	13634 <__mempcpy_chk@plt+0x25c4>
   136a4:	cmp	r8, r4
   136a8:	ldrcc	r7, [sp, #80]	; 0x50
   136ac:	movcc	r2, #39	; 0x27
   136b0:	strbcc	r2, [r7, r8]
   136b4:	add	r7, r8, #1
   136b8:	cmp	r7, r4
   136bc:	ldrcc	r6, [sp, #80]	; 0x50
   136c0:	movcc	r2, #39	; 0x27
   136c4:	strbcc	r2, [r6, r7]
   136c8:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   136cc:	add	r8, r8, #2
   136d0:	mov	r2, #0
   136d4:	str	r2, [fp, #-56]	; 0xffffffc8
   136d8:	b	13634 <__mempcpy_chk@plt+0x25c4>
   136dc:	cmp	r8, r4
   136e0:	movcc	r0, #39	; 0x27
   136e4:	strbcc	r0, [r7, r8]
   136e8:	add	r0, r8, #1
   136ec:	cmp	r0, r4
   136f0:	movcc	r1, #36	; 0x24
   136f4:	strbcc	r1, [r7, r0]
   136f8:	add	r0, r8, #2
   136fc:	cmp	r0, r4
   13700:	movcc	r1, #39	; 0x27
   13704:	strbcc	r1, [r7, r0]
   13708:	add	r0, r8, #3
   1370c:	mov	r2, #1
   13710:	cmp	r0, r4
   13714:	movcc	r1, #92	; 0x5c
   13718:	strbcc	r1, [r7, r0]
   1371c:	str	r2, [fp, #-56]	; 0xffffffc8
   13720:	add	r8, r0, #1
   13724:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13728:	cmp	r1, #2
   1372c:	beq	13780 <__mempcpy_chk@plt+0x2710>
   13730:	add	r1, r6, #1
   13734:	mov	r9, #0
   13738:	mov	sl, #1
   1373c:	mov	r5, #48	; 0x30
   13740:	cmp	r1, lr
   13744:	bcs	12f90 <__mempcpy_chk@plt+0x1f20>
   13748:	ldrb	r1, [ip, r1]
   1374c:	sub	r1, r1, #48	; 0x30
   13750:	uxtb	r1, r1
   13754:	cmp	r1, #9
   13758:	bhi	12f90 <__mempcpy_chk@plt+0x1f20>
   1375c:	cmp	r8, r4
   13760:	movcc	r1, #48	; 0x30
   13764:	strbcc	r1, [r7, r8]
   13768:	add	r1, r0, #2
   1376c:	cmp	r1, r4
   13770:	movcc	r2, #48	; 0x30
   13774:	strbcc	r2, [r7, r1]
   13778:	add	r8, r0, #3
   1377c:	b	12f90 <__mempcpy_chk@plt+0x1f20>
   13780:	mov	r0, #48	; 0x30
   13784:	mov	sl, #1
   13788:	mov	r9, #0
   1378c:	b	1323c <__mempcpy_chk@plt+0x21cc>
   13790:	sub	r6, r1, #1
   13794:	cmp	sl, #0
   13798:	movwne	sl, #1
   1379c:	mov	r0, r5
   137a0:	cmp	sl, #0
   137a4:	bne	137e4 <__mempcpy_chk@plt+0x2774>
   137a8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   137ac:	tst	r1, #1
   137b0:	beq	137e4 <__mempcpy_chk@plt+0x2774>
   137b4:	cmp	r8, r4
   137b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   137bc:	movcc	r1, #39	; 0x27
   137c0:	strbcc	r1, [r7, r8]
   137c4:	add	r1, r8, #1
   137c8:	cmp	r1, r4
   137cc:	movcc	r2, #39	; 0x27
   137d0:	strbcc	r2, [r7, r1]
   137d4:	add	r8, r8, #2
   137d8:	mov	r1, #0
   137dc:	str	r1, [fp, #-56]	; 0xffffffc8
   137e0:	b	132c8 <__mempcpy_chk@plt+0x2258>
   137e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   137e8:	b	132c8 <__mempcpy_chk@plt+0x2258>
   137ec:	mov	r9, #0
   137f0:	b	1382c <__mempcpy_chk@plt+0x27bc>
   137f4:	mov	r9, #0
   137f8:	cmp	r7, lr
   137fc:	bcs	1382c <__mempcpy_chk@plt+0x27bc>
   13800:	ldr	ip, [fp, #-84]	; 0xffffffac
   13804:	ldr	r7, [sp, #44]	; 0x2c
   13808:	ldr	r0, [sp, #20]
   1380c:	ldrb	r0, [r0, r7]
   13810:	cmp	r0, #0
   13814:	beq	13834 <__mempcpy_chk@plt+0x27c4>
   13818:	add	r7, r7, #1
   1381c:	add	r0, r6, r7
   13820:	cmp	r0, lr
   13824:	bcc	13808 <__mempcpy_chk@plt+0x2798>
   13828:	b	13834 <__mempcpy_chk@plt+0x27c4>
   1382c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13830:	ldr	r7, [sp, #44]	; 0x2c
   13834:	mov	r1, r7
   13838:	ldr	r7, [sp, #80]	; 0x50
   1383c:	b	13164 <__mempcpy_chk@plt+0x20f4>
   13840:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13844:	eor	r0, r1, #2
   13848:	orr	r0, r0, r8
   1384c:	clz	r0, r0
   13850:	lsr	r0, r0, #5
   13854:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13858:	tst	r2, r0
   1385c:	bne	1391c <__mempcpy_chk@plt+0x28ac>
   13860:	cmp	r1, #2
   13864:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13868:	movwne	r0, #1
   1386c:	orr	r0, r2, r0
   13870:	tst	r0, #1
   13874:	ldreq	r0, [sp, #56]	; 0x38
   13878:	eoreq	r0, r0, #1
   1387c:	tsteq	r0, #1
   13880:	bne	138b4 <__mempcpy_chk@plt+0x2844>
   13884:	mov	r9, lr
   13888:	tst	r5, #1
   1388c:	bne	13984 <__mempcpy_chk@plt+0x2914>
   13890:	ldr	r0, [sp, #72]	; 0x48
   13894:	cmp	r0, #0
   13898:	beq	138b4 <__mempcpy_chk@plt+0x2844>
   1389c:	mov	r5, #0
   138a0:	cmp	r4, #0
   138a4:	ldr	r0, [sp, #84]	; 0x54
   138a8:	mov	sl, r2
   138ac:	ldr	r6, [sp, #72]	; 0x48
   138b0:	beq	12a4c <__mempcpy_chk@plt+0x19dc>
   138b4:	ldr	r1, [sp, #92]	; 0x5c
   138b8:	clz	r0, r1
   138bc:	lsr	r0, r0, #5
   138c0:	orr	r0, r0, r2
   138c4:	tst	r0, #1
   138c8:	bne	138f4 <__mempcpy_chk@plt+0x2884>
   138cc:	ldrb	r0, [r1]
   138d0:	cmp	r0, #0
   138d4:	beq	138f4 <__mempcpy_chk@plt+0x2884>
   138d8:	add	r1, r1, #1
   138dc:	cmp	r8, r4
   138e0:	strbcc	r0, [r7, r8]
   138e4:	add	r8, r8, #1
   138e8:	ldrb	r0, [r1], #1
   138ec:	cmp	r0, #0
   138f0:	bne	138dc <__mempcpy_chk@plt+0x286c>
   138f4:	cmp	r8, r4
   138f8:	movcc	r0, #0
   138fc:	strbcc	r0, [r7, r8]
   13900:	b	13978 <__mempcpy_chk@plt+0x2908>
   13904:	ldr	ip, [fp, #-84]	; 0xffffffac
   13908:	mov	lr, r4
   1390c:	mov	r4, r5
   13910:	b	1391c <__mempcpy_chk@plt+0x28ac>
   13914:	ldr	r7, [sp, #80]	; 0x50
   13918:	ldr	ip, [fp, #-84]	; 0xffffffac
   1391c:	mov	r0, #0
   13920:	ldr	r1, [fp, #12]
   13924:	bic	r1, r1, #2
   13928:	ldr	r2, [sp, #84]	; 0x54
   1392c:	tst	r2, #1
   13930:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13934:	mov	r2, r3
   13938:	movwne	r2, #4
   1393c:	cmp	r3, #2
   13940:	movne	r2, r3
   13944:	str	r2, [sp]
   13948:	str	r1, [sp, #4]
   1394c:	str	r0, [sp, #8]
   13950:	ldr	r0, [sp, #68]	; 0x44
   13954:	str	r0, [sp, #12]
   13958:	ldr	r0, [sp, #76]	; 0x4c
   1395c:	str	r0, [sp, #16]
   13960:	mov	r0, r7
   13964:	mov	r1, r4
   13968:	mov	r2, ip
   1396c:	mov	r3, lr
   13970:	bl	129c4 <__mempcpy_chk@plt+0x1954>
   13974:	mov	r8, r0
   13978:	mov	r0, r8
   1397c:	sub	sp, fp, #28
   13980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13984:	mov	r0, #5
   13988:	str	r0, [sp]
   1398c:	ldr	r0, [fp, #12]
   13990:	str	r0, [sp, #4]
   13994:	ldr	r0, [fp, #16]
   13998:	str	r0, [sp, #8]
   1399c:	ldr	r0, [sp, #68]	; 0x44
   139a0:	str	r0, [sp, #12]
   139a4:	ldr	r0, [sp, #76]	; 0x4c
   139a8:	str	r0, [sp, #16]
   139ac:	mov	r0, r7
   139b0:	ldr	r1, [sp, #72]	; 0x48
   139b4:	ldr	r2, [fp, #-84]	; 0xffffffac
   139b8:	mov	r3, r9
   139bc:	b	13970 <__mempcpy_chk@plt+0x2900>
   139c0:	bl	11058 <abort@plt>
   139c4:	mov	r3, r2
   139c8:	mov	r2, #0
   139cc:	b	139d0 <__mempcpy_chk@plt+0x2960>
   139d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139d4:	add	fp, sp, #28
   139d8:	sub	sp, sp, #36	; 0x24
   139dc:	mov	r4, r2
   139e0:	str	r2, [sp, #24]
   139e4:	mov	r5, r1
   139e8:	mov	r6, r0
   139ec:	str	r0, [sp, #20]
   139f0:	movw	r8, #29024	; 0x7160
   139f4:	movt	r8, #2
   139f8:	cmp	r3, #0
   139fc:	movne	r8, r3
   13a00:	bl	10f8c <__errno_location@plt>
   13a04:	str	r0, [sp, #28]
   13a08:	ldm	r8, {r3, r9}
   13a0c:	ldr	r1, [r8, #40]	; 0x28
   13a10:	ldr	r2, [r8, #44]	; 0x2c
   13a14:	ldr	r7, [r0]
   13a18:	str	r7, [sp, #32]
   13a1c:	add	sl, r8, #8
   13a20:	cmp	r4, #0
   13a24:	orreq	r9, r9, #1
   13a28:	stm	sp, {r3, r9, sl}
   13a2c:	str	r1, [sp, #12]
   13a30:	str	r2, [sp, #16]
   13a34:	mov	r0, #0
   13a38:	mov	r1, #0
   13a3c:	mov	r2, r6
   13a40:	mov	r3, r5
   13a44:	mov	r7, r5
   13a48:	bl	129c4 <__mempcpy_chk@plt+0x1954>
   13a4c:	mov	r5, r0
   13a50:	add	r4, r0, #1
   13a54:	mov	r0, r4
   13a58:	bl	14ccc <__mempcpy_chk@plt+0x3c5c>
   13a5c:	mov	r6, r0
   13a60:	ldr	r0, [r8]
   13a64:	ldr	r1, [r8, #40]	; 0x28
   13a68:	ldr	r2, [r8, #44]	; 0x2c
   13a6c:	stm	sp, {r0, r9, sl}
   13a70:	str	r1, [sp, #12]
   13a74:	str	r2, [sp, #16]
   13a78:	mov	r0, r6
   13a7c:	mov	r1, r4
   13a80:	ldr	r2, [sp, #20]
   13a84:	mov	r3, r7
   13a88:	bl	129c4 <__mempcpy_chk@plt+0x1954>
   13a8c:	ldr	r0, [sp, #24]
   13a90:	ldr	r1, [sp, #32]
   13a94:	ldr	r2, [sp, #28]
   13a98:	str	r1, [r2]
   13a9c:	cmp	r0, #0
   13aa0:	strne	r5, [r0]
   13aa4:	mov	r0, r6
   13aa8:	sub	sp, fp, #28
   13aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ab0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ab4:	add	fp, sp, #24
   13ab8:	movw	r8, #28920	; 0x70f8
   13abc:	movt	r8, #2
   13ac0:	ldr	r4, [r8]
   13ac4:	movw	r5, #28924	; 0x70fc
   13ac8:	movt	r5, #2
   13acc:	ldr	r0, [r5]
   13ad0:	cmp	r0, #2
   13ad4:	blt	13b00 <__mempcpy_chk@plt+0x2a90>
   13ad8:	add	r7, r4, #12
   13adc:	mov	r6, #0
   13ae0:	ldr	r0, [r7, r6, lsl #3]
   13ae4:	bl	12760 <__mempcpy_chk@plt+0x16f0>
   13ae8:	add	r0, r6, #1
   13aec:	ldr	r1, [r5]
   13af0:	add	r2, r6, #2
   13af4:	cmp	r2, r1
   13af8:	mov	r6, r0
   13afc:	blt	13ae0 <__mempcpy_chk@plt+0x2a70>
   13b00:	ldr	r0, [r4, #4]
   13b04:	movw	r7, #29072	; 0x7190
   13b08:	movt	r7, #2
   13b0c:	cmp	r0, r7
   13b10:	beq	13b28 <__mempcpy_chk@plt+0x2ab8>
   13b14:	bl	12760 <__mempcpy_chk@plt+0x16f0>
   13b18:	movw	r0, #28928	; 0x7100
   13b1c:	movt	r0, #2
   13b20:	mov	r6, #256	; 0x100
   13b24:	strd	r6, [r0]
   13b28:	movw	r6, #28928	; 0x7100
   13b2c:	movt	r6, #2
   13b30:	cmp	r4, r6
   13b34:	beq	13b44 <__mempcpy_chk@plt+0x2ad4>
   13b38:	mov	r0, r4
   13b3c:	bl	12760 <__mempcpy_chk@plt+0x16f0>
   13b40:	str	r6, [r8]
   13b44:	mov	r0, #1
   13b48:	str	r0, [r5]
   13b4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b50:	movw	r3, #29024	; 0x7160
   13b54:	movt	r3, #2
   13b58:	mvn	r2, #0
   13b5c:	b	13b60 <__mempcpy_chk@plt+0x2af0>
   13b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b64:	add	fp, sp, #28
   13b68:	sub	sp, sp, #44	; 0x2c
   13b6c:	mov	r7, r3
   13b70:	str	r2, [sp, #36]	; 0x24
   13b74:	str	r1, [sp, #32]
   13b78:	mov	r5, r0
   13b7c:	bl	10f8c <__errno_location@plt>
   13b80:	cmp	r5, #0
   13b84:	blt	13cf0 <__mempcpy_chk@plt+0x2c80>
   13b88:	cmn	r5, #-2147483647	; 0x80000001
   13b8c:	beq	13cf0 <__mempcpy_chk@plt+0x2c80>
   13b90:	movw	r4, #28920	; 0x70f8
   13b94:	movt	r4, #2
   13b98:	ldr	r6, [r4]
   13b9c:	str	r0, [sp, #28]
   13ba0:	ldr	r0, [r0]
   13ba4:	str	r0, [sp, #24]
   13ba8:	movw	r8, #28924	; 0x70fc
   13bac:	movt	r8, #2
   13bb0:	ldr	r1, [r8]
   13bb4:	cmp	r1, r5
   13bb8:	ble	13bc4 <__mempcpy_chk@plt+0x2b54>
   13bbc:	mov	sl, r6
   13bc0:	b	13c2c <__mempcpy_chk@plt+0x2bbc>
   13bc4:	str	r1, [fp, #-32]	; 0xffffffe0
   13bc8:	mov	r0, #8
   13bcc:	str	r0, [sp]
   13bd0:	movw	r9, #28928	; 0x7100
   13bd4:	movt	r9, #2
   13bd8:	subs	r0, r6, r9
   13bdc:	movne	r0, r6
   13be0:	add	r2, r5, #1
   13be4:	sub	r2, r2, r1
   13be8:	sub	r1, fp, #32
   13bec:	mvn	r3, #-2147483648	; 0x80000000
   13bf0:	bl	14db4 <__mempcpy_chk@plt+0x3d44>
   13bf4:	mov	sl, r0
   13bf8:	str	r0, [r4]
   13bfc:	cmp	r6, r9
   13c00:	ldrdeq	r0, [r9]
   13c04:	stmeq	sl, {r0, r1}
   13c08:	ldr	r1, [r8]
   13c0c:	add	r0, sl, r1, lsl #3
   13c10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c14:	sub	r1, r2, r1
   13c18:	lsl	r2, r1, #3
   13c1c:	mov	r1, #0
   13c20:	bl	10fa4 <memset@plt>
   13c24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c28:	str	r0, [r8]
   13c2c:	mov	r9, sl
   13c30:	ldr	r6, [r9, r5, lsl #3]!
   13c34:	ldr	r4, [r9, #4]!
   13c38:	ldm	r7, {r0, r1}
   13c3c:	ldr	r2, [r7, #40]	; 0x28
   13c40:	ldr	r3, [r7, #44]	; 0x2c
   13c44:	orr	r8, r1, #1
   13c48:	add	r1, r7, #8
   13c4c:	stm	sp, {r0, r8}
   13c50:	str	r1, [sp, #20]
   13c54:	add	r0, sp, #8
   13c58:	stm	r0, {r1, r2, r3}
   13c5c:	mov	r0, r4
   13c60:	mov	r1, r6
   13c64:	ldr	r2, [sp, #32]
   13c68:	ldr	r3, [sp, #36]	; 0x24
   13c6c:	bl	129c4 <__mempcpy_chk@plt+0x1954>
   13c70:	cmp	r6, r0
   13c74:	bhi	13cd8 <__mempcpy_chk@plt+0x2c68>
   13c78:	add	r6, r0, #1
   13c7c:	str	r6, [sl, r5, lsl #3]
   13c80:	movw	r0, #29072	; 0x7190
   13c84:	movt	r0, #2
   13c88:	cmp	r4, r0
   13c8c:	beq	13c98 <__mempcpy_chk@plt+0x2c28>
   13c90:	mov	r0, r4
   13c94:	bl	12760 <__mempcpy_chk@plt+0x16f0>
   13c98:	mov	r0, r6
   13c9c:	bl	14ccc <__mempcpy_chk@plt+0x3c5c>
   13ca0:	mov	r4, r0
   13ca4:	str	r0, [r9]
   13ca8:	ldr	r0, [r7]
   13cac:	ldr	r1, [r7, #40]	; 0x28
   13cb0:	ldr	r2, [r7, #44]	; 0x2c
   13cb4:	stm	sp, {r0, r8}
   13cb8:	ldr	r0, [sp, #20]
   13cbc:	add	r3, sp, #8
   13cc0:	stm	r3, {r0, r1, r2}
   13cc4:	mov	r0, r4
   13cc8:	mov	r1, r6
   13ccc:	ldr	r2, [sp, #32]
   13cd0:	ldr	r3, [sp, #36]	; 0x24
   13cd4:	bl	129c4 <__mempcpy_chk@plt+0x1954>
   13cd8:	ldr	r0, [sp, #28]
   13cdc:	ldr	r1, [sp, #24]
   13ce0:	str	r1, [r0]
   13ce4:	mov	r0, r4
   13ce8:	sub	sp, fp, #28
   13cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf0:	bl	11058 <abort@plt>
   13cf4:	movw	r3, #29024	; 0x7160
   13cf8:	movt	r3, #2
   13cfc:	b	13b60 <__mempcpy_chk@plt+0x2af0>
   13d00:	mov	r1, r0
   13d04:	mov	r0, #0
   13d08:	b	13b50 <__mempcpy_chk@plt+0x2ae0>
   13d0c:	mov	r2, r1
   13d10:	mov	r1, r0
   13d14:	mov	r0, #0
   13d18:	b	13cf4 <__mempcpy_chk@plt+0x2c84>
   13d1c:	push	{r4, r5, r6, sl, fp, lr}
   13d20:	add	fp, sp, #16
   13d24:	sub	sp, sp, #48	; 0x30
   13d28:	mov	r4, r2
   13d2c:	mov	r5, r0
   13d30:	mov	r6, sp
   13d34:	mov	r0, r6
   13d38:	bl	13d58 <__mempcpy_chk@plt+0x2ce8>
   13d3c:	mov	r0, r5
   13d40:	mov	r1, r4
   13d44:	mvn	r2, #0
   13d48:	mov	r3, r6
   13d4c:	bl	13b60 <__mempcpy_chk@plt+0x2af0>
   13d50:	sub	sp, fp, #16
   13d54:	pop	{r4, r5, r6, sl, fp, pc}
   13d58:	vmov.i32	q8, #0	; 0x00000000
   13d5c:	mov	r2, #32
   13d60:	mov	r3, r0
   13d64:	vst1.32	{d16-d17}, [r3], r2
   13d68:	vst1.32	{d16-d17}, [r3]
   13d6c:	add	r2, r0, #16
   13d70:	vst1.32	{d16-d17}, [r2]
   13d74:	cmp	r1, #10
   13d78:	strne	r1, [r0]
   13d7c:	bxne	lr
   13d80:	push	{fp, lr}
   13d84:	mov	fp, sp
   13d88:	bl	11058 <abort@plt>
   13d8c:	push	{r4, r5, r6, r7, fp, lr}
   13d90:	add	fp, sp, #16
   13d94:	sub	sp, sp, #48	; 0x30
   13d98:	mov	r4, r3
   13d9c:	mov	r5, r2
   13da0:	mov	r6, r0
   13da4:	mov	r7, sp
   13da8:	mov	r0, r7
   13dac:	bl	13d58 <__mempcpy_chk@plt+0x2ce8>
   13db0:	mov	r0, r6
   13db4:	mov	r1, r5
   13db8:	mov	r2, r4
   13dbc:	mov	r3, r7
   13dc0:	bl	13b60 <__mempcpy_chk@plt+0x2af0>
   13dc4:	sub	sp, fp, #16
   13dc8:	pop	{r4, r5, r6, r7, fp, pc}
   13dcc:	mov	r2, r1
   13dd0:	mov	r1, r0
   13dd4:	mov	r0, #0
   13dd8:	b	13d1c <__mempcpy_chk@plt+0x2cac>
   13ddc:	mov	r3, r2
   13de0:	mov	r2, r1
   13de4:	mov	r1, r0
   13de8:	mov	r0, #0
   13dec:	b	13d8c <__mempcpy_chk@plt+0x2d1c>
   13df0:	push	{r4, r5, r6, sl, fp, lr}
   13df4:	add	fp, sp, #16
   13df8:	sub	sp, sp, #48	; 0x30
   13dfc:	mov	r4, r1
   13e00:	mov	r5, r0
   13e04:	mov	r0, #32
   13e08:	movw	r1, #29024	; 0x7160
   13e0c:	movt	r1, #2
   13e10:	add	r3, r1, #16
   13e14:	vld1.64	{d16-d17}, [r1], r0
   13e18:	mov	r6, sp
   13e1c:	vld1.64	{d18-d19}, [r3]
   13e20:	add	r3, r6, #16
   13e24:	vld1.64	{d20-d21}, [r1]
   13e28:	vst1.64	{d18-d19}, [r3]
   13e2c:	mov	r1, r6
   13e30:	vst1.64	{d16-d17}, [r1], r0
   13e34:	vst1.64	{d20-d21}, [r1]
   13e38:	mov	r0, r6
   13e3c:	mov	r1, r2
   13e40:	mov	r2, #1
   13e44:	bl	128b8 <__mempcpy_chk@plt+0x1848>
   13e48:	mov	r0, #0
   13e4c:	mov	r1, r5
   13e50:	mov	r2, r4
   13e54:	mov	r3, r6
   13e58:	bl	13b60 <__mempcpy_chk@plt+0x2af0>
   13e5c:	sub	sp, fp, #16
   13e60:	pop	{r4, r5, r6, sl, fp, pc}
   13e64:	mov	r2, r1
   13e68:	mvn	r1, #0
   13e6c:	b	13df0 <__mempcpy_chk@plt+0x2d80>
   13e70:	mov	r1, #58	; 0x3a
   13e74:	b	13e64 <__mempcpy_chk@plt+0x2df4>
   13e78:	mov	r2, #58	; 0x3a
   13e7c:	b	13df0 <__mempcpy_chk@plt+0x2d80>
   13e80:	push	{r4, r5, r6, sl, fp, lr}
   13e84:	add	fp, sp, #16
   13e88:	sub	sp, sp, #48	; 0x30
   13e8c:	mov	r4, r2
   13e90:	mov	r5, r0
   13e94:	mov	r6, sp
   13e98:	mov	r0, r6
   13e9c:	bl	13d58 <__mempcpy_chk@plt+0x2ce8>
   13ea0:	mov	r0, r6
   13ea4:	mov	r1, #58	; 0x3a
   13ea8:	mov	r2, #1
   13eac:	bl	128b8 <__mempcpy_chk@plt+0x1848>
   13eb0:	mov	r0, r5
   13eb4:	mov	r1, r4
   13eb8:	mvn	r2, #0
   13ebc:	mov	r3, r6
   13ec0:	bl	13b60 <__mempcpy_chk@plt+0x2af0>
   13ec4:	sub	sp, fp, #16
   13ec8:	pop	{r4, r5, r6, sl, fp, pc}
   13ecc:	push	{fp, lr}
   13ed0:	mov	fp, sp
   13ed4:	sub	sp, sp, #8
   13ed8:	mvn	ip, #0
   13edc:	str	ip, [sp]
   13ee0:	bl	13eec <__mempcpy_chk@plt+0x2e7c>
   13ee4:	mov	sp, fp
   13ee8:	pop	{fp, pc}
   13eec:	push	{r4, r5, r6, r7, fp, lr}
   13ef0:	add	fp, sp, #16
   13ef4:	sub	sp, sp, #48	; 0x30
   13ef8:	mov	r7, r3
   13efc:	mov	r5, r0
   13f00:	mov	r0, #32
   13f04:	movw	r3, #29024	; 0x7160
   13f08:	movt	r3, #2
   13f0c:	add	r4, r3, #16
   13f10:	vld1.64	{d16-d17}, [r3], r0
   13f14:	mov	r6, sp
   13f18:	vld1.64	{d18-d19}, [r4]
   13f1c:	add	r4, r6, #16
   13f20:	vld1.64	{d20-d21}, [r3]
   13f24:	vst1.64	{d18-d19}, [r4]
   13f28:	mov	r3, r6
   13f2c:	vst1.64	{d16-d17}, [r3], r0
   13f30:	vst1.64	{d20-d21}, [r3]
   13f34:	mov	r0, r6
   13f38:	bl	12910 <__mempcpy_chk@plt+0x18a0>
   13f3c:	ldr	r2, [fp, #8]
   13f40:	mov	r0, r5
   13f44:	mov	r1, r7
   13f48:	mov	r3, r6
   13f4c:	bl	13b60 <__mempcpy_chk@plt+0x2af0>
   13f50:	sub	sp, fp, #16
   13f54:	pop	{r4, r5, r6, r7, fp, pc}
   13f58:	mov	r3, r2
   13f5c:	mov	r2, r1
   13f60:	mov	r1, r0
   13f64:	mov	r0, #0
   13f68:	b	13ecc <__mempcpy_chk@plt+0x2e5c>
   13f6c:	push	{fp, lr}
   13f70:	mov	fp, sp
   13f74:	sub	sp, sp, #8
   13f78:	mov	ip, r2
   13f7c:	mov	r2, r1
   13f80:	mov	r1, r0
   13f84:	str	r3, [sp]
   13f88:	mov	r0, #0
   13f8c:	mov	r3, ip
   13f90:	bl	13eec <__mempcpy_chk@plt+0x2e7c>
   13f94:	mov	sp, fp
   13f98:	pop	{fp, pc}
   13f9c:	movw	r3, #28936	; 0x7108
   13fa0:	movt	r3, #2
   13fa4:	b	13b60 <__mempcpy_chk@plt+0x2af0>
   13fa8:	mov	r2, r1
   13fac:	mov	r1, r0
   13fb0:	mov	r0, #0
   13fb4:	b	13f9c <__mempcpy_chk@plt+0x2f2c>
   13fb8:	mvn	r2, #0
   13fbc:	b	13f9c <__mempcpy_chk@plt+0x2f2c>
   13fc0:	mov	r1, r0
   13fc4:	mov	r0, #0
   13fc8:	b	13fb8 <__mempcpy_chk@plt+0x2f48>
   13fcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fd0:	add	fp, sp, #24
   13fd4:	sub	sp, sp, #16
   13fd8:	mov	r4, r1
   13fdc:	mov	r5, r0
   13fe0:	mov	r7, #0
   13fe4:	mov	r0, #0
   13fe8:	mov	r1, r5
   13fec:	mov	r2, #5
   13ff0:	bl	10e90 <dcgettext@plt>
   13ff4:	cmp	r0, r5
   13ff8:	beq	14004 <__mempcpy_chk@plt+0x2f94>
   13ffc:	sub	sp, fp, #24
   14000:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14004:	bl	15938 <__mempcpy_chk@plt+0x48c8>
   14008:	mov	r6, r0
   1400c:	mov	r8, #56	; 0x38
   14010:	mov	r0, #45	; 0x2d
   14014:	stm	sp, {r0, r8}
   14018:	str	r7, [sp, #8]
   1401c:	str	r7, [sp, #12]
   14020:	mov	r0, r6
   14024:	mov	r1, #85	; 0x55
   14028:	mov	r2, #84	; 0x54
   1402c:	mov	r3, #70	; 0x46
   14030:	bl	140c8 <__mempcpy_chk@plt+0x3058>
   14034:	cmp	r0, #0
   14038:	beq	14054 <__mempcpy_chk@plt+0x2fe4>
   1403c:	ldrb	r1, [r5]
   14040:	movw	r2, #25978	; 0x657a
   14044:	movt	r2, #1
   14048:	movw	r0, #25982	; 0x657e
   1404c:	movt	r0, #1
   14050:	b	14098 <__mempcpy_chk@plt+0x3028>
   14054:	mov	r0, #48	; 0x30
   14058:	mov	r1, #51	; 0x33
   1405c:	str	r8, [sp]
   14060:	stmib	sp, {r0, r1}
   14064:	str	r0, [sp, #12]
   14068:	mov	r0, r6
   1406c:	mov	r1, #71	; 0x47
   14070:	mov	r2, #66	; 0x42
   14074:	mov	r3, #49	; 0x31
   14078:	bl	140c8 <__mempcpy_chk@plt+0x3058>
   1407c:	cmp	r0, #0
   14080:	beq	140a8 <__mempcpy_chk@plt+0x3038>
   14084:	ldrb	r1, [r5]
   14088:	movw	r2, #25986	; 0x6582
   1408c:	movt	r2, #1
   14090:	movw	r0, #25990	; 0x6586
   14094:	movt	r0, #1
   14098:	cmp	r1, #96	; 0x60
   1409c:	moveq	r0, r2
   140a0:	sub	sp, fp, #24
   140a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140a8:	movw	r1, #25972	; 0x6574
   140ac:	movt	r1, #1
   140b0:	movw	r0, #25976	; 0x6578
   140b4:	movt	r0, #1
   140b8:	cmp	r4, #9
   140bc:	moveq	r0, r1
   140c0:	sub	sp, fp, #24
   140c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140c8:	push	{r4, r5, r6, r7, fp, lr}
   140cc:	add	fp, sp, #16
   140d0:	sub	sp, sp, #16
   140d4:	mov	r4, r3
   140d8:	mov	r5, r2
   140dc:	mov	r7, r1
   140e0:	mov	r6, r0
   140e4:	mov	r0, r1
   140e8:	bl	15580 <__mempcpy_chk@plt+0x4510>
   140ec:	ldrb	r1, [r6]
   140f0:	cmp	r0, #0
   140f4:	andne	r1, r1, #223	; 0xdf
   140f8:	mov	r0, #0
   140fc:	cmp	r1, r7
   14100:	bne	14140 <__mempcpy_chk@plt+0x30d0>
   14104:	cmp	r7, #0
   14108:	moveq	r0, #1
   1410c:	subeq	sp, fp, #16
   14110:	popeq	{r4, r5, r6, r7, fp, pc}
   14114:	ldr	r0, [fp, #20]
   14118:	ldr	r1, [fp, #16]
   1411c:	ldr	r2, [fp, #12]
   14120:	ldr	r3, [fp, #8]
   14124:	str	r2, [sp]
   14128:	str	r1, [sp, #4]
   1412c:	str	r0, [sp, #8]
   14130:	mov	r0, r6
   14134:	mov	r1, r5
   14138:	mov	r2, r4
   1413c:	bl	14148 <__mempcpy_chk@plt+0x30d8>
   14140:	sub	sp, fp, #16
   14144:	pop	{r4, r5, r6, r7, fp, pc}
   14148:	push	{r4, r5, r6, r7, fp, lr}
   1414c:	add	fp, sp, #16
   14150:	sub	sp, sp, #8
   14154:	mov	r4, r3
   14158:	mov	r5, r2
   1415c:	mov	r7, r1
   14160:	mov	r6, r0
   14164:	mov	r0, r1
   14168:	bl	15580 <__mempcpy_chk@plt+0x4510>
   1416c:	ldrb	r1, [r6, #1]
   14170:	cmp	r0, #0
   14174:	andne	r1, r1, #223	; 0xdf
   14178:	mov	r0, #0
   1417c:	cmp	r1, r7
   14180:	bne	141b8 <__mempcpy_chk@plt+0x3148>
   14184:	cmp	r7, #0
   14188:	moveq	r0, #1
   1418c:	subeq	sp, fp, #16
   14190:	popeq	{r4, r5, r6, r7, fp, pc}
   14194:	ldr	r0, [fp, #16]
   14198:	ldr	r1, [fp, #12]
   1419c:	ldr	r3, [fp, #8]
   141a0:	str	r1, [sp]
   141a4:	str	r0, [sp, #4]
   141a8:	mov	r0, r6
   141ac:	mov	r1, r5
   141b0:	mov	r2, r4
   141b4:	bl	141c0 <__mempcpy_chk@plt+0x3150>
   141b8:	sub	sp, fp, #16
   141bc:	pop	{r4, r5, r6, r7, fp, pc}
   141c0:	push	{r4, r5, r6, r7, fp, lr}
   141c4:	add	fp, sp, #16
   141c8:	sub	sp, sp, #8
   141cc:	mov	r4, r3
   141d0:	mov	r5, r2
   141d4:	mov	r7, r1
   141d8:	mov	r6, r0
   141dc:	mov	r0, r1
   141e0:	bl	15580 <__mempcpy_chk@plt+0x4510>
   141e4:	ldrb	r1, [r6, #2]
   141e8:	cmp	r0, #0
   141ec:	andne	r1, r1, #223	; 0xdf
   141f0:	mov	r0, #0
   141f4:	cmp	r1, r7
   141f8:	bne	14228 <__mempcpy_chk@plt+0x31b8>
   141fc:	cmp	r7, #0
   14200:	moveq	r0, #1
   14204:	subeq	sp, fp, #16
   14208:	popeq	{r4, r5, r6, r7, fp, pc}
   1420c:	ldr	r0, [fp, #12]
   14210:	ldr	r3, [fp, #8]
   14214:	str	r0, [sp]
   14218:	mov	r0, r6
   1421c:	mov	r1, r5
   14220:	mov	r2, r4
   14224:	bl	14230 <__mempcpy_chk@plt+0x31c0>
   14228:	sub	sp, fp, #16
   1422c:	pop	{r4, r5, r6, r7, fp, pc}
   14230:	push	{r4, r5, r6, r7, fp, lr}
   14234:	add	fp, sp, #16
   14238:	mov	r4, r3
   1423c:	mov	r5, r2
   14240:	mov	r7, r1
   14244:	mov	r6, r0
   14248:	mov	r0, r1
   1424c:	bl	15580 <__mempcpy_chk@plt+0x4510>
   14250:	ldrb	r1, [r6, #3]
   14254:	ldr	r3, [fp, #8]
   14258:	cmp	r0, #0
   1425c:	andne	r1, r1, #223	; 0xdf
   14260:	mov	r0, #0
   14264:	cmp	r1, r7
   14268:	popne	{r4, r5, r6, r7, fp, pc}
   1426c:	cmp	r7, #0
   14270:	beq	14288 <__mempcpy_chk@plt+0x3218>
   14274:	mov	r0, r6
   14278:	mov	r1, r5
   1427c:	mov	r2, r4
   14280:	pop	{r4, r5, r6, r7, fp, lr}
   14284:	b	14290 <__mempcpy_chk@plt+0x3220>
   14288:	mov	r0, #1
   1428c:	pop	{r4, r5, r6, r7, fp, pc}
   14290:	push	{r4, r5, r6, r7, fp, lr}
   14294:	add	fp, sp, #16
   14298:	mov	r4, r3
   1429c:	mov	r5, r2
   142a0:	mov	r7, r1
   142a4:	mov	r6, r0
   142a8:	mov	r0, r1
   142ac:	bl	15580 <__mempcpy_chk@plt+0x4510>
   142b0:	ldrb	r1, [r6, #4]
   142b4:	cmp	r0, #0
   142b8:	andne	r1, r1, #223	; 0xdf
   142bc:	mov	r0, #0
   142c0:	cmp	r1, r7
   142c4:	popne	{r4, r5, r6, r7, fp, pc}
   142c8:	cmp	r7, #0
   142cc:	beq	142e4 <__mempcpy_chk@plt+0x3274>
   142d0:	mov	r0, r6
   142d4:	mov	r1, r5
   142d8:	mov	r2, r4
   142dc:	pop	{r4, r5, r6, r7, fp, lr}
   142e0:	b	142ec <__mempcpy_chk@plt+0x327c>
   142e4:	mov	r0, #1
   142e8:	pop	{r4, r5, r6, r7, fp, pc}
   142ec:	push	{r4, r5, r6, sl, fp, lr}
   142f0:	add	fp, sp, #16
   142f4:	mov	r4, r2
   142f8:	mov	r6, r1
   142fc:	mov	r5, r0
   14300:	mov	r0, r1
   14304:	bl	15580 <__mempcpy_chk@plt+0x4510>
   14308:	ldrb	r1, [r5, #5]
   1430c:	cmp	r0, #0
   14310:	andne	r1, r1, #223	; 0xdf
   14314:	mov	r0, #0
   14318:	cmp	r1, r6
   1431c:	popne	{r4, r5, r6, sl, fp, pc}
   14320:	cmp	r6, #0
   14324:	beq	14338 <__mempcpy_chk@plt+0x32c8>
   14328:	mov	r0, r5
   1432c:	mov	r1, r4
   14330:	pop	{r4, r5, r6, sl, fp, lr}
   14334:	b	14340 <__mempcpy_chk@plt+0x32d0>
   14338:	mov	r0, #1
   1433c:	pop	{r4, r5, r6, sl, fp, pc}
   14340:	push	{r4, r5, fp, lr}
   14344:	add	fp, sp, #8
   14348:	mov	r5, r1
   1434c:	mov	r4, r0
   14350:	mov	r0, r1
   14354:	bl	15580 <__mempcpy_chk@plt+0x4510>
   14358:	ldrb	r1, [r4, #6]
   1435c:	cmp	r0, #0
   14360:	andne	r1, r1, #223	; 0xdf
   14364:	mov	r0, #0
   14368:	cmp	r1, r5
   1436c:	popne	{r4, r5, fp, pc}
   14370:	cmp	r5, #0
   14374:	beq	14384 <__mempcpy_chk@plt+0x3314>
   14378:	mov	r0, r4
   1437c:	pop	{r4, r5, fp, lr}
   14380:	b	1438c <__mempcpy_chk@plt+0x331c>
   14384:	mov	r0, #1
   14388:	pop	{r4, r5, fp, pc}
   1438c:	push	{r4, sl, fp, lr}
   14390:	add	fp, sp, #8
   14394:	mov	r4, r0
   14398:	mov	r0, #0
   1439c:	bl	15580 <__mempcpy_chk@plt+0x4510>
   143a0:	ldrb	r1, [r4, #7]
   143a4:	cmp	r0, #0
   143a8:	beq	143c0 <__mempcpy_chk@plt+0x3350>
   143ac:	tst	r1, #223	; 0xdf
   143b0:	moveq	r0, #1
   143b4:	popeq	{r4, sl, fp, pc}
   143b8:	mov	r0, #0
   143bc:	pop	{r4, sl, fp, pc}
   143c0:	cmp	r1, #0
   143c4:	moveq	r0, #1
   143c8:	popeq	{r4, sl, fp, pc}
   143cc:	mov	r0, #0
   143d0:	pop	{r4, sl, fp, pc}
   143d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d8:	add	fp, sp, #28
   143dc:	sub	sp, sp, #52	; 0x34
   143e0:	mov	r4, r3
   143e4:	mov	sl, r2
   143e8:	mov	r9, r1
   143ec:	mov	r7, r0
   143f0:	movw	r5, #29328	; 0x7290
   143f4:	movt	r5, #2
   143f8:	ldrb	r0, [r5]
   143fc:	cmp	r0, #0
   14400:	bne	14478 <__mempcpy_chk@plt+0x3408>
   14404:	bl	15938 <__mempcpy_chk@plt+0x48c8>
   14408:	mov	r6, r0
   1440c:	movw	r1, #26080	; 0x65e0
   14410:	movt	r1, #1
   14414:	bl	10e24 <strcmp@plt>
   14418:	clz	r1, r0
   1441c:	lsr	r1, r1, #5
   14420:	movw	r2, #29332	; 0x7294
   14424:	movt	r2, #2
   14428:	str	r1, [r2]
   1442c:	cmp	r0, #0
   14430:	beq	14470 <__mempcpy_chk@plt+0x3400>
   14434:	movw	r1, #26080	; 0x65e0
   14438:	movt	r1, #1
   1443c:	mov	r0, r6
   14440:	bl	10f2c <iconv_open@plt>
   14444:	movw	r6, #29336	; 0x7298
   14448:	movt	r6, #2
   1444c:	str	r0, [r6]
   14450:	cmn	r0, #1
   14454:	bne	14470 <__mempcpy_chk@plt+0x3400>
   14458:	movw	r0, #26086	; 0x65e6
   1445c:	movt	r0, #1
   14460:	movw	r1, #26080	; 0x65e0
   14464:	movt	r1, #1
   14468:	bl	10f2c <iconv_open@plt>
   1446c:	str	r0, [r6]
   14470:	mov	r0, #1
   14474:	strb	r0, [r5]
   14478:	movw	r8, #29336	; 0x7298
   1447c:	movt	r8, #2
   14480:	movw	r5, #29332	; 0x7294
   14484:	movt	r5, #2
   14488:	ldr	r0, [r5]
   1448c:	cmp	r0, #0
   14490:	ldreq	r0, [r8]
   14494:	cmneq	r0, #1
   14498:	beq	144d8 <__mempcpy_chk@plt+0x3468>
   1449c:	sub	r6, fp, #34	; 0x22
   144a0:	mov	r0, r6
   144a4:	mov	r1, r7
   144a8:	bl	145a4 <__mempcpy_chk@plt+0x3534>
   144ac:	cmn	r0, #1
   144b0:	ble	144e4 <__mempcpy_chk@plt+0x3474>
   144b4:	mov	r1, r0
   144b8:	ldr	r0, [r5]
   144bc:	cmp	r0, #0
   144c0:	beq	14500 <__mempcpy_chk@plt+0x3490>
   144c4:	sub	r0, fp, #34	; 0x22
   144c8:	mov	r2, r4
   144cc:	blx	r9
   144d0:	sub	sp, fp, #28
   144d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144d8:	movw	r1, #26092	; 0x65ec
   144dc:	movt	r1, #1
   144e0:	b	144ec <__mempcpy_chk@plt+0x347c>
   144e4:	movw	r1, #26118	; 0x6606
   144e8:	movt	r1, #1
   144ec:	mov	r0, r7
   144f0:	mov	r2, r4
   144f4:	blx	sl
   144f8:	sub	sp, fp, #28
   144fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14500:	str	r1, [sp, #12]
   14504:	str	r6, [sp, #16]
   14508:	add	r5, sp, #21
   1450c:	str	r5, [sp, #8]
   14510:	mov	r0, #25
   14514:	str	r0, [sp, #4]
   14518:	ldr	r0, [r8]
   1451c:	add	r6, sp, #4
   14520:	str	r6, [sp]
   14524:	add	r1, sp, #16
   14528:	add	r2, sp, #12
   1452c:	add	r3, sp, #8
   14530:	bl	10e18 <iconv@plt>
   14534:	cmn	r0, #1
   14538:	beq	14598 <__mempcpy_chk@plt+0x3528>
   1453c:	ldr	r1, [sp, #12]
   14540:	cmp	r1, #0
   14544:	bne	14598 <__mempcpy_chk@plt+0x3528>
   14548:	cmp	r0, #0
   1454c:	beq	14568 <__mempcpy_chk@plt+0x34f8>
   14550:	ldr	r0, [sp, #8]
   14554:	sub	r0, r0, r5
   14558:	cmp	r0, #1
   1455c:	ldrbeq	r0, [sp, #21]
   14560:	cmpeq	r0, #63	; 0x3f
   14564:	beq	14598 <__mempcpy_chk@plt+0x3528>
   14568:	ldr	r0, [r8]
   1456c:	str	r6, [sp]
   14570:	add	r3, sp, #8
   14574:	mov	r1, #0
   14578:	mov	r2, #0
   1457c:	bl	10e18 <iconv@plt>
   14580:	cmn	r0, #1
   14584:	beq	14598 <__mempcpy_chk@plt+0x3528>
   14588:	ldr	r0, [sp, #8]
   1458c:	sub	r1, r0, r5
   14590:	mov	r0, r5
   14594:	b	144c8 <__mempcpy_chk@plt+0x3458>
   14598:	mov	r0, r7
   1459c:	mov	r1, #0
   145a0:	b	144f0 <__mempcpy_chk@plt+0x3480>
   145a4:	cmp	r1, #127	; 0x7f
   145a8:	strbls	r1, [r0]
   145ac:	movls	r0, #1
   145b0:	bxls	lr
   145b4:	mov	r2, #6
   145b8:	b	146f0 <__mempcpy_chk@plt+0x3680>
   145bc:	push	{fp, lr}
   145c0:	mov	fp, sp
   145c4:	mov	r3, r2
   145c8:	mov	r2, r1
   145cc:	mov	r1, #1
   145d0:	bl	10ec0 <fwrite@plt>
   145d4:	mov	r0, #0
   145d8:	pop	{fp, pc}
   145dc:	push	{fp, lr}
   145e0:	mov	fp, sp
   145e4:	mov	lr, r1
   145e8:	mov	ip, r0
   145ec:	movw	r0, #18092	; 0x46ac
   145f0:	movt	r0, #1
   145f4:	movw	r3, #17952	; 0x4620
   145f8:	movt	r3, #1
   145fc:	cmp	r2, #0
   14600:	moveq	r3, r0
   14604:	movw	r1, #17852	; 0x45bc
   14608:	movt	r1, #1
   1460c:	mov	r0, lr
   14610:	mov	r2, r3
   14614:	mov	r3, ip
   14618:	pop	{fp, lr}
   1461c:	b	143d4 <__mempcpy_chk@plt+0x3364>
   14620:	push	{r4, r5, r6, sl, fp, lr}
   14624:	add	fp, sp, #16
   14628:	sub	sp, sp, #8
   1462c:	mov	r4, r0
   14630:	cmp	r1, #0
   14634:	beq	14678 <__mempcpy_chk@plt+0x3608>
   14638:	mov	r5, r1
   1463c:	movw	r1, #26186	; 0x664a
   14640:	movt	r1, #1
   14644:	mov	r0, #0
   14648:	mov	r2, #5
   1464c:	bl	10e90 <dcgettext@plt>
   14650:	mov	r6, r0
   14654:	mov	r0, #0
   14658:	mov	r1, r5
   1465c:	mov	r2, #5
   14660:	bl	10e90 <dcgettext@plt>
   14664:	str	r0, [sp]
   14668:	mov	r0, #1
   1466c:	mov	r1, #0
   14670:	mov	r2, r6
   14674:	b	14698 <__mempcpy_chk@plt+0x3628>
   14678:	movw	r1, #26141	; 0x661d
   1467c:	movt	r1, #1
   14680:	mov	r0, #0
   14684:	mov	r2, #5
   14688:	bl	10e90 <dcgettext@plt>
   1468c:	mov	r2, r0
   14690:	mov	r0, #1
   14694:	mov	r1, #0
   14698:	mov	r3, r4
   1469c:	bl	10f08 <error@plt>
   146a0:	mvn	r0, #0
   146a4:	sub	sp, fp, #16
   146a8:	pop	{r4, r5, r6, sl, fp, pc}
   146ac:	push	{fp, lr}
   146b0:	mov	fp, sp
   146b4:	mov	r1, r2
   146b8:	mov	r3, r0
   146bc:	mov	r0, #0
   146c0:	cmp	r0, r3, lsr #16
   146c4:	bne	146d4 <__mempcpy_chk@plt+0x3664>
   146c8:	movw	r2, #26235	; 0x667b
   146cc:	movt	r2, #1
   146d0:	b	146dc <__mempcpy_chk@plt+0x366c>
   146d4:	movw	r2, #26242	; 0x6682
   146d8:	movt	r2, #1
   146dc:	mov	r0, r1
   146e0:	mov	r1, #1
   146e4:	bl	10fd4 <__fprintf_chk@plt>
   146e8:	mvn	r0, #0
   146ec:	pop	{fp, pc}
   146f0:	push	{fp, lr}
   146f4:	mov	fp, sp
   146f8:	mvn	r3, #1
   146fc:	cmp	r1, #128	; 0x80
   14700:	bcc	147ac <__mempcpy_chk@plt+0x373c>
   14704:	mov	ip, #2
   14708:	cmp	r1, #2048	; 0x800
   1470c:	bcs	14788 <__mempcpy_chk@plt+0x3718>
   14710:	cmp	ip, r2
   14714:	mvn	r3, #1
   14718:	bgt	147ac <__mempcpy_chk@plt+0x373c>
   1471c:	cmp	ip, #2
   14720:	beq	14764 <__mempcpy_chk@plt+0x36f4>
   14724:	cmp	ip, #3
   14728:	beq	1474c <__mempcpy_chk@plt+0x36dc>
   1472c:	cmp	ip, #4
   14730:	bne	1477c <__mempcpy_chk@plt+0x370c>
   14734:	mov	r2, #2
   14738:	mov	r3, r1
   1473c:	bfi	r3, r2, #6, #26
   14740:	strb	r3, [r0, #3]
   14744:	mov	r2, #65536	; 0x10000
   14748:	orr	r1, r2, r1, lsr #6
   1474c:	mov	r2, #2
   14750:	mov	r3, r1
   14754:	bfi	r3, r2, #6, #26
   14758:	strb	r3, [r0, #2]
   1475c:	mov	r2, #2048	; 0x800
   14760:	orr	r1, r2, r1, lsr #6
   14764:	mov	r2, #192	; 0xc0
   14768:	orr	r2, r2, r1, lsr #6
   1476c:	strb	r2, [r0]
   14770:	mov	r2, #2
   14774:	bfi	r1, r2, #6, #26
   14778:	strb	r1, [r0, #1]
   1477c:	mov	r3, ip
   14780:	mov	r0, r3
   14784:	pop	{fp, pc}
   14788:	mov	r3, #0
   1478c:	cmp	r3, r1, lsr #16
   14790:	bne	147b4 <__mempcpy_chk@plt+0x3744>
   14794:	mov	lr, r1
   14798:	bfc	lr, #0, #11
   1479c:	mov	ip, #3
   147a0:	mvn	r3, #0
   147a4:	cmp	lr, #55296	; 0xd800
   147a8:	bne	14710 <__mempcpy_chk@plt+0x36a0>
   147ac:	mov	r0, r3
   147b0:	pop	{fp, pc}
   147b4:	lsr	lr, r1, #16
   147b8:	mvn	r3, #0
   147bc:	mov	ip, #4
   147c0:	cmp	lr, #16
   147c4:	bls	14710 <__mempcpy_chk@plt+0x36a0>
   147c8:	b	147ac <__mempcpy_chk@plt+0x373c>
   147cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147d0:	add	fp, sp, #24
   147d4:	sub	sp, sp, #32
   147d8:	mov	r4, r2
   147dc:	mov	r8, r0
   147e0:	ldr	r6, [fp, #12]
   147e4:	ldr	r7, [fp, #8]
   147e8:	cmp	r1, #0
   147ec:	beq	14814 <__mempcpy_chk@plt+0x37a4>
   147f0:	mov	r5, r1
   147f4:	str	r4, [sp]
   147f8:	str	r3, [sp, #4]
   147fc:	movw	r2, #26249	; 0x6689
   14800:	movt	r2, #1
   14804:	mov	r0, r8
   14808:	mov	r1, #1
   1480c:	mov	r3, r5
   14810:	b	1482c <__mempcpy_chk@plt+0x37bc>
   14814:	str	r3, [sp]
   14818:	movw	r2, #26261	; 0x6695
   1481c:	movt	r2, #1
   14820:	mov	r0, r8
   14824:	mov	r1, #1
   14828:	mov	r3, r4
   1482c:	bl	10fd4 <__fprintf_chk@plt>
   14830:	movw	r1, #26268	; 0x669c
   14834:	movt	r1, #1
   14838:	mov	r0, #0
   1483c:	mov	r2, #5
   14840:	bl	10e90 <dcgettext@plt>
   14844:	mov	r3, r0
   14848:	movw	r0, #2022	; 0x7e6
   1484c:	str	r0, [sp]
   14850:	movw	r2, #26986	; 0x696a
   14854:	movt	r2, #1
   14858:	mov	r0, r8
   1485c:	mov	r1, #1
   14860:	bl	10fd4 <__fprintf_chk@plt>
   14864:	movw	r4, #23619	; 0x5c43
   14868:	movt	r4, #1
   1486c:	mov	r0, r4
   14870:	mov	r1, r8
   14874:	bl	10e00 <fputs_unlocked@plt>
   14878:	movw	r1, #26272	; 0x66a0
   1487c:	movt	r1, #1
   14880:	mov	r0, #0
   14884:	mov	r2, #5
   14888:	bl	10e90 <dcgettext@plt>
   1488c:	mov	r2, r0
   14890:	movw	r3, #26443	; 0x674b
   14894:	movt	r3, #1
   14898:	mov	r0, r8
   1489c:	mov	r1, #1
   148a0:	bl	10fd4 <__fprintf_chk@plt>
   148a4:	mov	r0, r4
   148a8:	mov	r1, r8
   148ac:	bl	10e00 <fputs_unlocked@plt>
   148b0:	cmp	r6, #9
   148b4:	bhi	148f0 <__mempcpy_chk@plt+0x3880>
   148b8:	add	r0, pc, #0
   148bc:	ldr	pc, [r0, r6, lsl #2]
   148c0:	andeq	r4, r1, r8, ror #17
   148c4:	strdeq	r4, [r1], -ip
   148c8:	andeq	r4, r1, ip, lsr #18
   148cc:	andeq	r4, r1, r4, asr r9
   148d0:	andeq	r4, r1, ip, ror r9
   148d4:	andeq	r4, r1, r4, lsr #19
   148d8:	andeq	r4, r1, ip, asr #19
   148dc:	andeq	r4, r1, r4, lsl #20
   148e0:	andeq	r4, r1, r4, lsr #21
   148e4:	andeq	r4, r1, ip, asr #20
   148e8:	sub	sp, fp, #24
   148ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148f0:	movw	r1, #26796	; 0x68ac
   148f4:	movt	r1, #1
   148f8:	b	14a54 <__mempcpy_chk@plt+0x39e4>
   148fc:	movw	r1, #26477	; 0x676d
   14900:	movt	r1, #1
   14904:	mov	r0, #0
   14908:	mov	r2, #5
   1490c:	bl	10e90 <dcgettext@plt>
   14910:	mov	r2, r0
   14914:	ldr	r3, [r7]
   14918:	mov	r0, r8
   1491c:	mov	r1, #1
   14920:	sub	sp, fp, #24
   14924:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14928:	b	10fd4 <__fprintf_chk@plt>
   1492c:	movw	r1, #26493	; 0x677d
   14930:	movt	r1, #1
   14934:	mov	r0, #0
   14938:	mov	r2, #5
   1493c:	bl	10e90 <dcgettext@plt>
   14940:	mov	r2, r0
   14944:	ldr	r3, [r7]
   14948:	ldr	r0, [r7, #4]
   1494c:	str	r0, [sp]
   14950:	b	14a40 <__mempcpy_chk@plt+0x39d0>
   14954:	movw	r1, #26516	; 0x6794
   14958:	movt	r1, #1
   1495c:	mov	r0, #0
   14960:	mov	r2, #5
   14964:	bl	10e90 <dcgettext@plt>
   14968:	mov	r2, r0
   1496c:	ldr	r3, [r7]
   14970:	ldmib	r7, {r0, r1}
   14974:	stm	sp, {r0, r1}
   14978:	b	14a40 <__mempcpy_chk@plt+0x39d0>
   1497c:	movw	r1, #26544	; 0x67b0
   14980:	movt	r1, #1
   14984:	mov	r0, #0
   14988:	mov	r2, #5
   1498c:	bl	10e90 <dcgettext@plt>
   14990:	mov	r2, r0
   14994:	ldr	r3, [r7]
   14998:	ldmib	r7, {r0, r1, r7}
   1499c:	stm	sp, {r0, r1, r7}
   149a0:	b	14a40 <__mempcpy_chk@plt+0x39d0>
   149a4:	movw	r1, #26576	; 0x67d0
   149a8:	movt	r1, #1
   149ac:	mov	r0, #0
   149b0:	mov	r2, #5
   149b4:	bl	10e90 <dcgettext@plt>
   149b8:	mov	r2, r0
   149bc:	ldr	r3, [r7]
   149c0:	ldmib	r7, {r0, r1, r6, r7}
   149c4:	stm	sp, {r0, r1, r6, r7}
   149c8:	b	14a40 <__mempcpy_chk@plt+0x39d0>
   149cc:	movw	r1, #26612	; 0x67f4
   149d0:	movt	r1, #1
   149d4:	mov	r0, #0
   149d8:	mov	r2, #5
   149dc:	bl	10e90 <dcgettext@plt>
   149e0:	mov	r2, r0
   149e4:	ldr	r3, [r7]
   149e8:	ldmib	r7, {r0, r1, r6}
   149ec:	ldr	r5, [r7, #16]
   149f0:	ldr	r7, [r7, #20]
   149f4:	stm	sp, {r0, r1, r6}
   149f8:	str	r5, [sp, #12]
   149fc:	str	r7, [sp, #16]
   14a00:	b	14a40 <__mempcpy_chk@plt+0x39d0>
   14a04:	movw	r1, #26652	; 0x681c
   14a08:	movt	r1, #1
   14a0c:	mov	r0, #0
   14a10:	mov	r2, #5
   14a14:	bl	10e90 <dcgettext@plt>
   14a18:	mov	r2, r0
   14a1c:	ldr	r3, [r7]
   14a20:	ldmib	r7, {r0, r1, r6}
   14a24:	ldr	r5, [r7, #16]
   14a28:	ldr	r4, [r7, #20]
   14a2c:	ldr	r7, [r7, #24]
   14a30:	stm	sp, {r0, r1, r6}
   14a34:	str	r5, [sp, #12]
   14a38:	str	r4, [sp, #16]
   14a3c:	str	r7, [sp, #20]
   14a40:	mov	r0, r8
   14a44:	mov	r1, #1
   14a48:	b	14af4 <__mempcpy_chk@plt+0x3a84>
   14a4c:	movw	r1, #26744	; 0x6878
   14a50:	movt	r1, #1
   14a54:	mov	r0, #0
   14a58:	mov	r2, #5
   14a5c:	bl	10e90 <dcgettext@plt>
   14a60:	mov	ip, r0
   14a64:	ldr	r3, [r7]
   14a68:	ldr	r0, [r7, #4]
   14a6c:	ldr	r1, [r7, #8]
   14a70:	ldr	r6, [r7, #12]
   14a74:	ldr	r5, [r7, #16]
   14a78:	ldr	r4, [r7, #20]
   14a7c:	ldr	r2, [r7, #24]
   14a80:	ldr	lr, [r7, #28]
   14a84:	ldr	r7, [r7, #32]
   14a88:	stm	sp, {r0, r1, r6}
   14a8c:	str	r5, [sp, #12]
   14a90:	str	r4, [sp, #16]
   14a94:	str	r2, [sp, #20]
   14a98:	str	lr, [sp, #24]
   14a9c:	str	r7, [sp, #28]
   14aa0:	b	14ae8 <__mempcpy_chk@plt+0x3a78>
   14aa4:	movw	r1, #26696	; 0x6848
   14aa8:	movt	r1, #1
   14aac:	mov	r0, #0
   14ab0:	mov	r2, #5
   14ab4:	bl	10e90 <dcgettext@plt>
   14ab8:	mov	ip, r0
   14abc:	ldr	r3, [r7]
   14ac0:	ldmib	r7, {r0, r1, r6}
   14ac4:	ldr	r5, [r7, #16]
   14ac8:	ldr	r4, [r7, #20]
   14acc:	ldr	r2, [r7, #24]
   14ad0:	ldr	r7, [r7, #28]
   14ad4:	stm	sp, {r0, r1, r6}
   14ad8:	str	r5, [sp, #12]
   14adc:	str	r4, [sp, #16]
   14ae0:	str	r2, [sp, #20]
   14ae4:	str	r7, [sp, #24]
   14ae8:	mov	r0, r8
   14aec:	mov	r1, #1
   14af0:	mov	r2, ip
   14af4:	bl	10fd4 <__fprintf_chk@plt>
   14af8:	sub	sp, fp, #24
   14afc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b00:	push	{r4, sl, fp, lr}
   14b04:	add	fp, sp, #8
   14b08:	sub	sp, sp, #8
   14b0c:	mov	lr, #0
   14b10:	ldr	ip, [fp, #8]
   14b14:	ldr	r4, [ip, lr, lsl #2]
   14b18:	add	lr, lr, #1
   14b1c:	cmp	r4, #0
   14b20:	bne	14b14 <__mempcpy_chk@plt+0x3aa4>
   14b24:	sub	r4, lr, #1
   14b28:	str	ip, [sp]
   14b2c:	str	r4, [sp, #4]
   14b30:	bl	147cc <__mempcpy_chk@plt+0x375c>
   14b34:	sub	sp, fp, #8
   14b38:	pop	{r4, sl, fp, pc}
   14b3c:	push	{r4, r5, fp, lr}
   14b40:	add	fp, sp, #8
   14b44:	sub	sp, sp, #48	; 0x30
   14b48:	mov	ip, #0
   14b4c:	ldr	r4, [fp, #8]
   14b50:	add	lr, sp, #8
   14b54:	ldr	r5, [r4]
   14b58:	str	r5, [lr, ip, lsl #2]
   14b5c:	cmp	r5, #0
   14b60:	beq	14b74 <__mempcpy_chk@plt+0x3b04>
   14b64:	add	ip, ip, #1
   14b68:	add	r4, r4, #4
   14b6c:	cmp	ip, #10
   14b70:	bcc	14b54 <__mempcpy_chk@plt+0x3ae4>
   14b74:	str	lr, [sp]
   14b78:	str	ip, [sp, #4]
   14b7c:	bl	147cc <__mempcpy_chk@plt+0x375c>
   14b80:	sub	sp, fp, #8
   14b84:	pop	{r4, r5, fp, pc}
   14b88:	push	{fp, lr}
   14b8c:	mov	fp, sp
   14b90:	sub	sp, sp, #8
   14b94:	add	ip, fp, #8
   14b98:	str	ip, [sp, #4]
   14b9c:	str	ip, [sp]
   14ba0:	bl	14b3c <__mempcpy_chk@plt+0x3acc>
   14ba4:	mov	sp, fp
   14ba8:	pop	{fp, pc}
   14bac:	push	{fp, lr}
   14bb0:	mov	fp, sp
   14bb4:	movw	r0, #28996	; 0x7144
   14bb8:	movt	r0, #2
   14bbc:	ldr	r1, [r0]
   14bc0:	movw	r0, #23619	; 0x5c43
   14bc4:	movt	r0, #1
   14bc8:	bl	10e00 <fputs_unlocked@plt>
   14bcc:	movw	r1, #26856	; 0x68e8
   14bd0:	movt	r1, #1
   14bd4:	mov	r0, #0
   14bd8:	mov	r2, #5
   14bdc:	bl	10e90 <dcgettext@plt>
   14be0:	mov	r1, r0
   14be4:	movw	r2, #26876	; 0x68fc
   14be8:	movt	r2, #1
   14bec:	mov	r0, #1
   14bf0:	bl	10fb0 <__printf_chk@plt>
   14bf4:	movw	r1, #26898	; 0x6912
   14bf8:	movt	r1, #1
   14bfc:	mov	r0, #0
   14c00:	mov	r2, #5
   14c04:	bl	10e90 <dcgettext@plt>
   14c08:	mov	r1, r0
   14c0c:	movw	r2, #25001	; 0x61a9
   14c10:	movt	r2, #1
   14c14:	movw	r3, #25221	; 0x6285
   14c18:	movt	r3, #1
   14c1c:	mov	r0, #1
   14c20:	bl	10fb0 <__printf_chk@plt>
   14c24:	movw	r1, #26918	; 0x6926
   14c28:	movt	r1, #1
   14c2c:	mov	r0, #0
   14c30:	mov	r2, #5
   14c34:	bl	10e90 <dcgettext@plt>
   14c38:	mov	r1, r0
   14c3c:	movw	r2, #26957	; 0x694d
   14c40:	movt	r2, #1
   14c44:	mov	r0, #1
   14c48:	pop	{fp, lr}
   14c4c:	b	10fb0 <__printf_chk@plt>
   14c50:	b	14c54 <__mempcpy_chk@plt+0x3be4>
   14c54:	push	{r4, r5, r6, sl, fp, lr}
   14c58:	add	fp, sp, #16
   14c5c:	mov	r4, r2
   14c60:	mov	r5, r1
   14c64:	mov	r6, r0
   14c68:	bl	159d0 <__mempcpy_chk@plt+0x4960>
   14c6c:	cmp	r0, #0
   14c70:	popne	{r4, r5, r6, sl, fp, pc}
   14c74:	cmp	r6, #0
   14c78:	beq	14c8c <__mempcpy_chk@plt+0x3c1c>
   14c7c:	cmp	r5, #0
   14c80:	cmpne	r4, #0
   14c84:	bne	14c8c <__mempcpy_chk@plt+0x3c1c>
   14c88:	pop	{r4, r5, r6, sl, fp, pc}
   14c8c:	bl	15040 <__mempcpy_chk@plt+0x3fd0>
   14c90:	push	{fp, lr}
   14c94:	mov	fp, sp
   14c98:	bl	15248 <__mempcpy_chk@plt+0x41d8>
   14c9c:	bl	14ca4 <__mempcpy_chk@plt+0x3c34>
   14ca0:	pop	{fp, pc}
   14ca4:	cmp	r0, #0
   14ca8:	bxne	lr
   14cac:	push	{fp, lr}
   14cb0:	mov	fp, sp
   14cb4:	bl	15040 <__mempcpy_chk@plt+0x3fd0>
   14cb8:	push	{fp, lr}
   14cbc:	mov	fp, sp
   14cc0:	bl	15904 <__mempcpy_chk@plt+0x4894>
   14cc4:	bl	14ca4 <__mempcpy_chk@plt+0x3c34>
   14cc8:	pop	{fp, pc}
   14ccc:	b	14c90 <__mempcpy_chk@plt+0x3c20>
   14cd0:	push	{r4, r5, fp, lr}
   14cd4:	add	fp, sp, #8
   14cd8:	mov	r4, r1
   14cdc:	mov	r5, r0
   14ce0:	bl	15278 <__mempcpy_chk@plt+0x4208>
   14ce4:	cmp	r0, #0
   14ce8:	popne	{r4, r5, fp, pc}
   14cec:	cmp	r5, #0
   14cf0:	beq	14d00 <__mempcpy_chk@plt+0x3c90>
   14cf4:	cmp	r4, #0
   14cf8:	bne	14d00 <__mempcpy_chk@plt+0x3c90>
   14cfc:	pop	{r4, r5, fp, pc}
   14d00:	bl	15040 <__mempcpy_chk@plt+0x3fd0>
   14d04:	push	{fp, lr}
   14d08:	mov	fp, sp
   14d0c:	bl	15908 <__mempcpy_chk@plt+0x4898>
   14d10:	bl	14ca4 <__mempcpy_chk@plt+0x3c34>
   14d14:	pop	{fp, pc}
   14d18:	push	{fp, lr}
   14d1c:	mov	fp, sp
   14d20:	bl	15918 <__mempcpy_chk@plt+0x48a8>
   14d24:	bl	14ca4 <__mempcpy_chk@plt+0x3c34>
   14d28:	pop	{fp, pc}
   14d2c:	push	{fp, lr}
   14d30:	mov	fp, sp
   14d34:	mov	r2, r1
   14d38:	mov	r1, r0
   14d3c:	mov	r0, #0
   14d40:	bl	14c54 <__mempcpy_chk@plt+0x3be4>
   14d44:	pop	{fp, pc}
   14d48:	mov	r2, r1
   14d4c:	mov	r1, r0
   14d50:	mov	r0, #0
   14d54:	b	14d18 <__mempcpy_chk@plt+0x3ca8>
   14d58:	mov	r2, #1
   14d5c:	b	14d60 <__mempcpy_chk@plt+0x3cf0>
   14d60:	push	{r4, r5, fp, lr}
   14d64:	add	fp, sp, #8
   14d68:	mov	r4, r1
   14d6c:	ldr	r5, [r1]
   14d70:	cmp	r0, #0
   14d74:	beq	14d8c <__mempcpy_chk@plt+0x3d1c>
   14d78:	mov	r1, #1
   14d7c:	add	r1, r1, r5, lsr #1
   14d80:	adds	r5, r5, r1
   14d84:	bcc	14da4 <__mempcpy_chk@plt+0x3d34>
   14d88:	bl	15040 <__mempcpy_chk@plt+0x3fd0>
   14d8c:	cmp	r5, #0
   14d90:	bne	14da4 <__mempcpy_chk@plt+0x3d34>
   14d94:	mov	r1, #64	; 0x40
   14d98:	udiv	r5, r1, r2
   14d9c:	cmp	r2, #64	; 0x40
   14da0:	addhi	r5, r5, #1
   14da4:	mov	r1, r5
   14da8:	bl	14c54 <__mempcpy_chk@plt+0x3be4>
   14dac:	str	r5, [r4]
   14db0:	pop	{r4, r5, fp, pc}
   14db4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14db8:	add	fp, sp, #24
   14dbc:	mov	r8, r1
   14dc0:	ldr	r6, [r1]
   14dc4:	add	r1, r6, r6, asr #1
   14dc8:	cmp	r1, r6
   14dcc:	mvnvs	r1, #-2147483648	; 0x80000000
   14dd0:	cmp	r1, r3
   14dd4:	mov	r5, r1
   14dd8:	movgt	r5, r3
   14ddc:	cmn	r3, #1
   14de0:	movle	r5, r1
   14de4:	ldr	r4, [fp, #8]
   14de8:	cmn	r4, #1
   14dec:	ble	14e14 <__mempcpy_chk@plt+0x3da4>
   14df0:	cmp	r4, #0
   14df4:	beq	14e68 <__mempcpy_chk@plt+0x3df8>
   14df8:	cmn	r5, #1
   14dfc:	ble	14e3c <__mempcpy_chk@plt+0x3dcc>
   14e00:	mvn	r7, #-2147483648	; 0x80000000
   14e04:	udiv	r1, r7, r4
   14e08:	cmp	r1, r5
   14e0c:	bge	14e68 <__mempcpy_chk@plt+0x3df8>
   14e10:	b	14e78 <__mempcpy_chk@plt+0x3e08>
   14e14:	cmn	r5, #1
   14e18:	ble	14e58 <__mempcpy_chk@plt+0x3de8>
   14e1c:	cmn	r4, #1
   14e20:	beq	14e68 <__mempcpy_chk@plt+0x3df8>
   14e24:	mov	r1, #-2147483648	; 0x80000000
   14e28:	sdiv	r1, r1, r4
   14e2c:	mvn	r7, #-2147483648	; 0x80000000
   14e30:	cmp	r1, r5
   14e34:	bge	14e68 <__mempcpy_chk@plt+0x3df8>
   14e38:	b	14e78 <__mempcpy_chk@plt+0x3e08>
   14e3c:	beq	14e68 <__mempcpy_chk@plt+0x3df8>
   14e40:	mov	r1, #-2147483648	; 0x80000000
   14e44:	sdiv	r1, r1, r5
   14e48:	mvn	r7, #-2147483648	; 0x80000000
   14e4c:	cmp	r1, r4
   14e50:	bge	14e68 <__mempcpy_chk@plt+0x3df8>
   14e54:	b	14e78 <__mempcpy_chk@plt+0x3e08>
   14e58:	mvn	r7, #-2147483648	; 0x80000000
   14e5c:	sdiv	r1, r7, r4
   14e60:	cmp	r5, r1
   14e64:	blt	14e78 <__mempcpy_chk@plt+0x3e08>
   14e68:	mul	r1, r5, r4
   14e6c:	mov	r7, #64	; 0x40
   14e70:	cmp	r1, #63	; 0x3f
   14e74:	bgt	14e80 <__mempcpy_chk@plt+0x3e10>
   14e78:	sdiv	r5, r7, r4
   14e7c:	mul	r1, r5, r4
   14e80:	cmp	r0, #0
   14e84:	moveq	r7, #0
   14e88:	streq	r7, [r8]
   14e8c:	sub	r7, r5, r6
   14e90:	cmp	r7, r2
   14e94:	bge	14f40 <__mempcpy_chk@plt+0x3ed0>
   14e98:	add	r5, r6, r2
   14e9c:	mov	r1, #0
   14ea0:	cmp	r5, r3
   14ea4:	mov	r2, #0
   14ea8:	movwgt	r2, #1
   14eac:	cmn	r3, #1
   14eb0:	movwgt	r1, #1
   14eb4:	cmp	r5, r6
   14eb8:	bvs	14f28 <__mempcpy_chk@plt+0x3eb8>
   14ebc:	ands	r1, r1, r2
   14ec0:	bne	14f28 <__mempcpy_chk@plt+0x3eb8>
   14ec4:	cmn	r4, #1
   14ec8:	ble	14ef0 <__mempcpy_chk@plt+0x3e80>
   14ecc:	cmp	r4, #0
   14ed0:	beq	14f3c <__mempcpy_chk@plt+0x3ecc>
   14ed4:	cmn	r5, #1
   14ed8:	ble	14f14 <__mempcpy_chk@plt+0x3ea4>
   14edc:	mvn	r1, #-2147483648	; 0x80000000
   14ee0:	udiv	r1, r1, r4
   14ee4:	cmp	r1, r5
   14ee8:	bge	14f3c <__mempcpy_chk@plt+0x3ecc>
   14eec:	b	14f28 <__mempcpy_chk@plt+0x3eb8>
   14ef0:	cmn	r5, #1
   14ef4:	ble	14f2c <__mempcpy_chk@plt+0x3ebc>
   14ef8:	cmn	r4, #1
   14efc:	beq	14f3c <__mempcpy_chk@plt+0x3ecc>
   14f00:	mov	r1, #-2147483648	; 0x80000000
   14f04:	sdiv	r1, r1, r4
   14f08:	cmp	r1, r5
   14f0c:	bge	14f3c <__mempcpy_chk@plt+0x3ecc>
   14f10:	b	14f28 <__mempcpy_chk@plt+0x3eb8>
   14f14:	beq	14f3c <__mempcpy_chk@plt+0x3ecc>
   14f18:	mov	r1, #-2147483648	; 0x80000000
   14f1c:	sdiv	r1, r1, r5
   14f20:	cmp	r1, r4
   14f24:	bge	14f3c <__mempcpy_chk@plt+0x3ecc>
   14f28:	bl	15040 <__mempcpy_chk@plt+0x3fd0>
   14f2c:	mvn	r1, #-2147483648	; 0x80000000
   14f30:	sdiv	r1, r1, r4
   14f34:	cmp	r5, r1
   14f38:	blt	14f28 <__mempcpy_chk@plt+0x3eb8>
   14f3c:	mul	r1, r5, r4
   14f40:	bl	14cd0 <__mempcpy_chk@plt+0x3c60>
   14f44:	str	r5, [r8]
   14f48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f4c:	mov	r1, #1
   14f50:	b	14f54 <__mempcpy_chk@plt+0x3ee4>
   14f54:	push	{fp, lr}
   14f58:	mov	fp, sp
   14f5c:	bl	151f4 <__mempcpy_chk@plt+0x4184>
   14f60:	bl	14ca4 <__mempcpy_chk@plt+0x3c34>
   14f64:	pop	{fp, pc}
   14f68:	mov	r1, #1
   14f6c:	b	14f70 <__mempcpy_chk@plt+0x3f00>
   14f70:	push	{fp, lr}
   14f74:	mov	fp, sp
   14f78:	bl	15914 <__mempcpy_chk@plt+0x48a4>
   14f7c:	bl	14ca4 <__mempcpy_chk@plt+0x3c34>
   14f80:	pop	{fp, pc}
   14f84:	push	{r4, r5, r6, sl, fp, lr}
   14f88:	add	fp, sp, #16
   14f8c:	mov	r4, r1
   14f90:	mov	r5, r0
   14f94:	mov	r0, r1
   14f98:	bl	14c90 <__mempcpy_chk@plt+0x3c20>
   14f9c:	mov	r6, r0
   14fa0:	mov	r1, r5
   14fa4:	mov	r2, r4
   14fa8:	bl	10e60 <memcpy@plt>
   14fac:	mov	r0, r6
   14fb0:	pop	{r4, r5, r6, sl, fp, pc}
   14fb4:	push	{r4, r5, r6, sl, fp, lr}
   14fb8:	add	fp, sp, #16
   14fbc:	mov	r4, r1
   14fc0:	mov	r5, r0
   14fc4:	mov	r0, r1
   14fc8:	bl	14cb8 <__mempcpy_chk@plt+0x3c48>
   14fcc:	mov	r6, r0
   14fd0:	mov	r1, r5
   14fd4:	mov	r2, r4
   14fd8:	bl	10e60 <memcpy@plt>
   14fdc:	mov	r0, r6
   14fe0:	pop	{r4, r5, r6, sl, fp, pc}
   14fe4:	push	{r4, r5, r6, sl, fp, lr}
   14fe8:	add	fp, sp, #16
   14fec:	mov	r4, r1
   14ff0:	mov	r5, r0
   14ff4:	add	r0, r1, #1
   14ff8:	bl	14cb8 <__mempcpy_chk@plt+0x3c48>
   14ffc:	mov	r6, r0
   15000:	mov	r0, #0
   15004:	strb	r0, [r6, r4]
   15008:	mov	r0, r6
   1500c:	mov	r1, r5
   15010:	mov	r2, r4
   15014:	bl	10e60 <memcpy@plt>
   15018:	mov	r0, r6
   1501c:	pop	{r4, r5, r6, sl, fp, pc}
   15020:	push	{r4, sl, fp, lr}
   15024:	add	fp, sp, #8
   15028:	mov	r4, r0
   1502c:	bl	10f80 <strlen@plt>
   15030:	add	r1, r0, #1
   15034:	mov	r0, r4
   15038:	pop	{r4, sl, fp, lr}
   1503c:	b	14f84 <__mempcpy_chk@plt+0x3f14>
   15040:	push	{fp, lr}
   15044:	mov	fp, sp
   15048:	movw	r0, #28916	; 0x70f4
   1504c:	movt	r0, #2
   15050:	ldr	r4, [r0]
   15054:	movw	r1, #27033	; 0x6999
   15058:	movt	r1, #1
   1505c:	mov	r0, #0
   15060:	mov	r2, #5
   15064:	bl	10e90 <dcgettext@plt>
   15068:	mov	r3, r0
   1506c:	movw	r2, #25435	; 0x635b
   15070:	movt	r2, #1
   15074:	mov	r0, r4
   15078:	mov	r1, #0
   1507c:	bl	10f08 <error@plt>
   15080:	bl	11058 <abort@plt>
   15084:	sub	sp, sp, #12
   15088:	push	{fp, lr}
   1508c:	mov	fp, sp
   15090:	sub	sp, sp, #4
   15094:	add	ip, fp, #8
   15098:	stm	ip, {r1, r2, r3}
   1509c:	add	r1, fp, #8
   150a0:	str	r1, [sp]
   150a4:	bl	150b8 <__mempcpy_chk@plt+0x4048>
   150a8:	mov	sp, fp
   150ac:	pop	{fp, lr}
   150b0:	add	sp, sp, #12
   150b4:	bx	lr
   150b8:	push	{r4, r5, r6, sl, fp, lr}
   150bc:	add	fp, sp, #16
   150c0:	mov	r3, r1
   150c4:	mov	r2, r0
   150c8:	movw	r5, #28996	; 0x7144
   150cc:	movt	r5, #2
   150d0:	ldr	r0, [r5]
   150d4:	mov	r1, #1
   150d8:	bl	10f44 <__vfprintf_chk@plt>
   150dc:	mov	r4, r0
   150e0:	cmn	r0, #1
   150e4:	bgt	150f8 <__mempcpy_chk@plt+0x4088>
   150e8:	ldr	r0, [r5]
   150ec:	bl	10e48 <ferror@plt>
   150f0:	cmp	r0, #0
   150f4:	beq	15100 <__mempcpy_chk@plt+0x4090>
   150f8:	mov	r0, r4
   150fc:	pop	{r4, r5, r6, sl, fp, pc}
   15100:	movw	r0, #28916	; 0x70f4
   15104:	movt	r0, #2
   15108:	ldr	r5, [r0]
   1510c:	bl	10f8c <__errno_location@plt>
   15110:	ldr	r6, [r0]
   15114:	movw	r1, #27050	; 0x69aa
   15118:	movt	r1, #1
   1511c:	mov	r0, #0
   15120:	mov	r2, #5
   15124:	bl	10e90 <dcgettext@plt>
   15128:	mov	r2, r0
   1512c:	mov	r0, r5
   15130:	mov	r1, r6
   15134:	bl	10f08 <error@plt>
   15138:	mov	r0, r4
   1513c:	pop	{r4, r5, r6, sl, fp, pc}
   15140:	sub	sp, sp, #8
   15144:	push	{fp, lr}
   15148:	mov	fp, sp
   1514c:	sub	sp, sp, #8
   15150:	str	r3, [fp, #12]
   15154:	str	r2, [fp, #8]
   15158:	add	r2, fp, #8
   1515c:	str	r2, [sp, #4]
   15160:	bl	15174 <__mempcpy_chk@plt+0x4104>
   15164:	mov	sp, fp
   15168:	pop	{fp, lr}
   1516c:	add	sp, sp, #8
   15170:	bx	lr
   15174:	push	{r4, r5, r6, sl, fp, lr}
   15178:	add	fp, sp, #16
   1517c:	mov	r3, r2
   15180:	mov	r2, r1
   15184:	mov	r5, r0
   15188:	mov	r1, #1
   1518c:	bl	10f44 <__vfprintf_chk@plt>
   15190:	mov	r4, r0
   15194:	cmn	r0, #1
   15198:	bgt	151ac <__mempcpy_chk@plt+0x413c>
   1519c:	mov	r0, r5
   151a0:	bl	10e48 <ferror@plt>
   151a4:	cmp	r0, #0
   151a8:	beq	151b4 <__mempcpy_chk@plt+0x4144>
   151ac:	mov	r0, r4
   151b0:	pop	{r4, r5, r6, sl, fp, pc}
   151b4:	movw	r0, #28916	; 0x70f4
   151b8:	movt	r0, #2
   151bc:	ldr	r5, [r0]
   151c0:	bl	10f8c <__errno_location@plt>
   151c4:	ldr	r6, [r0]
   151c8:	movw	r1, #27050	; 0x69aa
   151cc:	movt	r1, #1
   151d0:	mov	r0, #0
   151d4:	mov	r2, #5
   151d8:	bl	10e90 <dcgettext@plt>
   151dc:	mov	r2, r0
   151e0:	mov	r0, r5
   151e4:	mov	r1, r6
   151e8:	bl	10f08 <error@plt>
   151ec:	mov	r0, r4
   151f0:	pop	{r4, r5, r6, sl, fp, pc}
   151f4:	clz	r2, r1
   151f8:	lsr	r2, r2, #5
   151fc:	clz	r3, r0
   15200:	lsr	r3, r3, #5
   15204:	orrs	r2, r3, r2
   15208:	movwne	r1, #1
   1520c:	movwne	r0, #1
   15210:	cmp	r1, #0
   15214:	beq	15244 <__mempcpy_chk@plt+0x41d4>
   15218:	mvn	r2, #-2147483648	; 0x80000000
   1521c:	udiv	r2, r2, r1
   15220:	cmp	r2, r0
   15224:	bcs	15244 <__mempcpy_chk@plt+0x41d4>
   15228:	push	{fp, lr}
   1522c:	mov	fp, sp
   15230:	bl	10f8c <__errno_location@plt>
   15234:	mov	r1, #12
   15238:	str	r1, [r0]
   1523c:	mov	r0, #0
   15240:	pop	{fp, pc}
   15244:	b	10df4 <calloc@plt>
   15248:	cmp	r0, #0
   1524c:	movweq	r0, #1
   15250:	cmn	r0, #1
   15254:	ble	1525c <__mempcpy_chk@plt+0x41ec>
   15258:	b	10f20 <malloc@plt>
   1525c:	push	{fp, lr}
   15260:	mov	fp, sp
   15264:	bl	10f8c <__errno_location@plt>
   15268:	mov	r1, #12
   1526c:	str	r1, [r0]
   15270:	mov	r0, #0
   15274:	pop	{fp, pc}
   15278:	push	{fp, lr}
   1527c:	mov	fp, sp
   15280:	cmp	r0, #0
   15284:	beq	152a0 <__mempcpy_chk@plt+0x4230>
   15288:	cmp	r1, #0
   1528c:	beq	152ac <__mempcpy_chk@plt+0x423c>
   15290:	cmn	r1, #1
   15294:	ble	152b8 <__mempcpy_chk@plt+0x4248>
   15298:	pop	{fp, lr}
   1529c:	b	10e9c <realloc@plt>
   152a0:	mov	r0, r1
   152a4:	pop	{fp, lr}
   152a8:	b	15248 <__mempcpy_chk@plt+0x41d8>
   152ac:	bl	12760 <__mempcpy_chk@plt+0x16f0>
   152b0:	mov	r0, #0
   152b4:	pop	{fp, pc}
   152b8:	bl	10f8c <__errno_location@plt>
   152bc:	mov	r1, #12
   152c0:	str	r1, [r0]
   152c4:	mov	r0, #0
   152c8:	pop	{fp, pc}
   152cc:	mov	r1, r0
   152d0:	sub	r2, r0, #65	; 0x41
   152d4:	mov	r0, #1
   152d8:	cmp	r2, #26
   152dc:	subcs	r2, r1, #97	; 0x61
   152e0:	cmpcs	r2, #26
   152e4:	bcs	152ec <__mempcpy_chk@plt+0x427c>
   152e8:	bx	lr
   152ec:	sub	r1, r1, #48	; 0x30
   152f0:	cmp	r1, #10
   152f4:	movcs	r0, #0
   152f8:	bx	lr
   152fc:	mov	r1, r0
   15300:	sub	r2, r0, #65	; 0x41
   15304:	mov	r0, #1
   15308:	cmp	r2, #26
   1530c:	subcs	r1, r1, #97	; 0x61
   15310:	cmpcs	r1, #26
   15314:	movcs	r0, #0
   15318:	bx	lr
   1531c:	mov	r1, #0
   15320:	cmp	r0, #128	; 0x80
   15324:	movwcc	r1, #1
   15328:	mov	r0, r1
   1532c:	bx	lr
   15330:	sub	r1, r0, #9
   15334:	clz	r1, r1
   15338:	lsr	r1, r1, #5
   1533c:	sub	r0, r0, #32
   15340:	clz	r0, r0
   15344:	lsr	r0, r0, #5
   15348:	orr	r0, r0, r1
   1534c:	bx	lr
   15350:	mov	r1, r0
   15354:	mov	r0, #1
   15358:	cmp	r1, #32
   1535c:	bxcc	lr
   15360:	cmp	r1, #127	; 0x7f
   15364:	movne	r0, #0
   15368:	bx	lr
   1536c:	sub	r1, r0, #48	; 0x30
   15370:	mov	r0, #0
   15374:	cmp	r1, #10
   15378:	movwcc	r0, #1
   1537c:	bx	lr
   15380:	sub	r1, r0, #33	; 0x21
   15384:	mov	r0, #0
   15388:	cmp	r1, #94	; 0x5e
   1538c:	movwcc	r0, #1
   15390:	bx	lr
   15394:	sub	r1, r0, #97	; 0x61
   15398:	mov	r0, #0
   1539c:	cmp	r1, #26
   153a0:	movwcc	r0, #1
   153a4:	bx	lr
   153a8:	sub	r1, r0, #32
   153ac:	mov	r0, #0
   153b0:	cmp	r1, #95	; 0x5f
   153b4:	movwcc	r0, #1
   153b8:	bx	lr
   153bc:	sub	r1, r0, #33	; 0x21
   153c0:	cmp	r1, #93	; 0x5d
   153c4:	bhi	15550 <__mempcpy_chk@plt+0x44e0>
   153c8:	mov	r0, #1
   153cc:	add	r2, pc, #0
   153d0:	ldr	pc, [r2, r1, lsl #2]
   153d4:	andeq	r5, r1, ip, asr #10
   153d8:	andeq	r5, r1, ip, asr #10
   153dc:	andeq	r5, r1, ip, asr #10
   153e0:	andeq	r5, r1, ip, asr #10
   153e4:	andeq	r5, r1, ip, asr #10
   153e8:	andeq	r5, r1, ip, asr #10
   153ec:	andeq	r5, r1, ip, asr #10
   153f0:	andeq	r5, r1, ip, asr #10
   153f4:	andeq	r5, r1, ip, asr #10
   153f8:	andeq	r5, r1, ip, asr #10
   153fc:	andeq	r5, r1, ip, asr #10
   15400:	andeq	r5, r1, ip, asr #10
   15404:	andeq	r5, r1, ip, asr #10
   15408:	andeq	r5, r1, ip, asr #10
   1540c:	andeq	r5, r1, ip, asr #10
   15410:	andeq	r5, r1, r0, asr r5
   15414:	andeq	r5, r1, r0, asr r5
   15418:	andeq	r5, r1, r0, asr r5
   1541c:	andeq	r5, r1, r0, asr r5
   15420:	andeq	r5, r1, r0, asr r5
   15424:	andeq	r5, r1, r0, asr r5
   15428:	andeq	r5, r1, r0, asr r5
   1542c:	andeq	r5, r1, r0, asr r5
   15430:	andeq	r5, r1, r0, asr r5
   15434:	andeq	r5, r1, r0, asr r5
   15438:	andeq	r5, r1, ip, asr #10
   1543c:	andeq	r5, r1, ip, asr #10
   15440:	andeq	r5, r1, ip, asr #10
   15444:	andeq	r5, r1, ip, asr #10
   15448:	andeq	r5, r1, ip, asr #10
   1544c:	andeq	r5, r1, ip, asr #10
   15450:	andeq	r5, r1, ip, asr #10
   15454:	andeq	r5, r1, r0, asr r5
   15458:	andeq	r5, r1, r0, asr r5
   1545c:	andeq	r5, r1, r0, asr r5
   15460:	andeq	r5, r1, r0, asr r5
   15464:	andeq	r5, r1, r0, asr r5
   15468:	andeq	r5, r1, r0, asr r5
   1546c:	andeq	r5, r1, r0, asr r5
   15470:	andeq	r5, r1, r0, asr r5
   15474:	andeq	r5, r1, r0, asr r5
   15478:	andeq	r5, r1, r0, asr r5
   1547c:	andeq	r5, r1, r0, asr r5
   15480:	andeq	r5, r1, r0, asr r5
   15484:	andeq	r5, r1, r0, asr r5
   15488:	andeq	r5, r1, r0, asr r5
   1548c:	andeq	r5, r1, r0, asr r5
   15490:	andeq	r5, r1, r0, asr r5
   15494:	andeq	r5, r1, r0, asr r5
   15498:	andeq	r5, r1, r0, asr r5
   1549c:	andeq	r5, r1, r0, asr r5
   154a0:	andeq	r5, r1, r0, asr r5
   154a4:	andeq	r5, r1, r0, asr r5
   154a8:	andeq	r5, r1, r0, asr r5
   154ac:	andeq	r5, r1, r0, asr r5
   154b0:	andeq	r5, r1, r0, asr r5
   154b4:	andeq	r5, r1, r0, asr r5
   154b8:	andeq	r5, r1, r0, asr r5
   154bc:	andeq	r5, r1, ip, asr #10
   154c0:	andeq	r5, r1, ip, asr #10
   154c4:	andeq	r5, r1, ip, asr #10
   154c8:	andeq	r5, r1, ip, asr #10
   154cc:	andeq	r5, r1, ip, asr #10
   154d0:	andeq	r5, r1, ip, asr #10
   154d4:	andeq	r5, r1, r0, asr r5
   154d8:	andeq	r5, r1, r0, asr r5
   154dc:	andeq	r5, r1, r0, asr r5
   154e0:	andeq	r5, r1, r0, asr r5
   154e4:	andeq	r5, r1, r0, asr r5
   154e8:	andeq	r5, r1, r0, asr r5
   154ec:	andeq	r5, r1, r0, asr r5
   154f0:	andeq	r5, r1, r0, asr r5
   154f4:	andeq	r5, r1, r0, asr r5
   154f8:	andeq	r5, r1, r0, asr r5
   154fc:	andeq	r5, r1, r0, asr r5
   15500:	andeq	r5, r1, r0, asr r5
   15504:	andeq	r5, r1, r0, asr r5
   15508:	andeq	r5, r1, r0, asr r5
   1550c:	andeq	r5, r1, r0, asr r5
   15510:	andeq	r5, r1, r0, asr r5
   15514:	andeq	r5, r1, r0, asr r5
   15518:	andeq	r5, r1, r0, asr r5
   1551c:	andeq	r5, r1, r0, asr r5
   15520:	andeq	r5, r1, r0, asr r5
   15524:	andeq	r5, r1, r0, asr r5
   15528:	andeq	r5, r1, r0, asr r5
   1552c:	andeq	r5, r1, r0, asr r5
   15530:	andeq	r5, r1, r0, asr r5
   15534:	andeq	r5, r1, r0, asr r5
   15538:	andeq	r5, r1, r0, asr r5
   1553c:	andeq	r5, r1, ip, asr #10
   15540:	andeq	r5, r1, ip, asr #10
   15544:	andeq	r5, r1, ip, asr #10
   15548:	andeq	r5, r1, ip, asr #10
   1554c:	bx	lr
   15550:	mov	r0, #0
   15554:	bx	lr
   15558:	sub	r0, r0, #9
   1555c:	cmp	r0, #23
   15560:	movhi	r0, #0
   15564:	bxhi	lr
   15568:	bic	r0, r0, #-16777216	; 0xff000000
   1556c:	movw	r1, #31
   15570:	movt	r1, #128	; 0x80
   15574:	mov	r2, #1
   15578:	and	r0, r2, r1, lsr r0
   1557c:	bx	lr
   15580:	sub	r1, r0, #65	; 0x41
   15584:	mov	r0, #0
   15588:	cmp	r1, #26
   1558c:	movwcc	r0, #1
   15590:	bx	lr
   15594:	mov	r1, r0
   15598:	sub	r2, r0, #48	; 0x30
   1559c:	mov	r0, #1
   155a0:	cmp	r2, #22
   155a4:	bhi	155bc <__mempcpy_chk@plt+0x454c>
   155a8:	mov	ip, #1
   155ac:	movw	r3, #1023	; 0x3ff
   155b0:	movt	r3, #126	; 0x7e
   155b4:	tst	r3, ip, lsl r2
   155b8:	bxne	lr
   155bc:	sub	r1, r1, #97	; 0x61
   155c0:	cmp	r1, #6
   155c4:	movcs	r0, #0
   155c8:	bxcs	lr
   155cc:	bx	lr
   155d0:	sub	r1, r0, #65	; 0x41
   155d4:	cmp	r1, #26
   155d8:	addcc	r0, r0, #32
   155dc:	bx	lr
   155e0:	sub	r1, r0, #97	; 0x61
   155e4:	cmp	r1, #26
   155e8:	subcc	r0, r0, #32
   155ec:	bx	lr
   155f0:	push	{r4, r5, r6, sl, fp, lr}
   155f4:	add	fp, sp, #16
   155f8:	vpush	{d8}
   155fc:	mov	r4, r1
   15600:	mov	r5, r0
   15604:	bl	15670 <__mempcpy_chk@plt+0x4600>
   15608:	cmp	r0, #0
   1560c:	beq	15654 <__mempcpy_chk@plt+0x45e4>
   15610:	bl	10e0c <uselocale@plt>
   15614:	cmp	r0, #0
   15618:	beq	15654 <__mempcpy_chk@plt+0x45e4>
   1561c:	mov	r6, r0
   15620:	mov	r0, r5
   15624:	mov	r1, r4
   15628:	bl	10e78 <strtold@plt>
   1562c:	vorr	d8, d0, d0
   15630:	bl	10f8c <__errno_location@plt>
   15634:	mov	r4, r0
   15638:	ldr	r5, [r0]
   1563c:	mov	r0, r6
   15640:	bl	10e0c <uselocale@plt>
   15644:	cmp	r0, #0
   15648:	beq	1566c <__mempcpy_chk@plt+0x45fc>
   1564c:	str	r5, [r4]
   15650:	b	15660 <__mempcpy_chk@plt+0x45f0>
   15654:	vmov.i32	d8, #0	; 0x00000000
   15658:	cmp	r4, #0
   1565c:	strne	r5, [r4]
   15660:	vorr	d0, d8, d8
   15664:	vpop	{d8}
   15668:	pop	{r4, r5, r6, sl, fp, pc}
   1566c:	bl	11058 <abort@plt>
   15670:	push	{r4, sl, fp, lr}
   15674:	add	fp, sp, #8
   15678:	movw	r4, #29340	; 0x729c
   1567c:	movt	r4, #2
   15680:	ldr	r0, [r4]
   15684:	cmp	r0, #0
   15688:	beq	15694 <__mempcpy_chk@plt+0x4624>
   1568c:	ldr	r0, [r4]
   15690:	pop	{r4, sl, fp, pc}
   15694:	movw	r1, #27082	; 0x69ca
   15698:	movt	r1, #1
   1569c:	movw	r0, #8127	; 0x1fbf
   156a0:	mov	r2, #0
   156a4:	bl	11034 <newlocale@plt>
   156a8:	str	r0, [r4]
   156ac:	ldr	r0, [r4]
   156b0:	pop	{r4, sl, fp, pc}
   156b4:	push	{r4, r5, r6, sl, fp, lr}
   156b8:	add	fp, sp, #16
   156bc:	mov	r4, r0
   156c0:	bl	10ee4 <__fpending@plt>
   156c4:	mov	r5, r0
   156c8:	mov	r0, r4
   156cc:	bl	10ef0 <ferror_unlocked@plt>
   156d0:	mov	r6, r0
   156d4:	mov	r0, r4
   156d8:	bl	1573c <__mempcpy_chk@plt+0x46cc>
   156dc:	cmp	r6, #0
   156e0:	beq	15700 <__mempcpy_chk@plt+0x4690>
   156e4:	mvn	r4, #0
   156e8:	cmp	r0, #0
   156ec:	bne	15734 <__mempcpy_chk@plt+0x46c4>
   156f0:	bl	10f8c <__errno_location@plt>
   156f4:	mov	r1, #0
   156f8:	str	r1, [r0]
   156fc:	b	15734 <__mempcpy_chk@plt+0x46c4>
   15700:	cmp	r0, #0
   15704:	mov	r4, r0
   15708:	mvnne	r4, #0
   1570c:	cmp	r5, #0
   15710:	bne	15734 <__mempcpy_chk@plt+0x46c4>
   15714:	cmp	r0, #0
   15718:	beq	15734 <__mempcpy_chk@plt+0x46c4>
   1571c:	bl	10f8c <__errno_location@plt>
   15720:	ldr	r0, [r0]
   15724:	subs	r4, r0, #9
   15728:	mvnne	r4, #0
   1572c:	mov	r0, r4
   15730:	pop	{r4, r5, r6, sl, fp, pc}
   15734:	mov	r0, r4
   15738:	pop	{r4, r5, r6, sl, fp, pc}
   1573c:	push	{r4, r5, fp, lr}
   15740:	add	fp, sp, #8
   15744:	sub	sp, sp, #8
   15748:	mov	r4, r0
   1574c:	bl	10fbc <fileno@plt>
   15750:	cmn	r0, #1
   15754:	ble	157cc <__mempcpy_chk@plt+0x475c>
   15758:	mov	r0, r4
   1575c:	bl	10f50 <__freading@plt>
   15760:	cmp	r0, #0
   15764:	beq	15790 <__mempcpy_chk@plt+0x4720>
   15768:	mov	r0, r4
   1576c:	bl	10fbc <fileno@plt>
   15770:	mov	r1, #1
   15774:	str	r1, [sp]
   15778:	mov	r2, #0
   1577c:	mov	r3, #0
   15780:	bl	10ecc <lseek64@plt>
   15784:	and	r0, r0, r1
   15788:	cmn	r0, #1
   1578c:	beq	157cc <__mempcpy_chk@plt+0x475c>
   15790:	mov	r0, r4
   15794:	bl	157dc <__mempcpy_chk@plt+0x476c>
   15798:	cmp	r0, #0
   1579c:	beq	157cc <__mempcpy_chk@plt+0x475c>
   157a0:	bl	10f8c <__errno_location@plt>
   157a4:	ldr	r5, [r0]
   157a8:	mov	r0, r4
   157ac:	bl	10ff8 <fclose@plt>
   157b0:	cmp	r5, #0
   157b4:	beq	157c4 <__mempcpy_chk@plt+0x4754>
   157b8:	bl	10f8c <__errno_location@plt>
   157bc:	str	r5, [r0]
   157c0:	mvn	r0, #0
   157c4:	sub	sp, fp, #8
   157c8:	pop	{r4, r5, fp, pc}
   157cc:	mov	r0, r4
   157d0:	sub	sp, fp, #8
   157d4:	pop	{r4, r5, fp, lr}
   157d8:	b	10ff8 <fclose@plt>
   157dc:	push	{r4, sl, fp, lr}
   157e0:	add	fp, sp, #8
   157e4:	mov	r4, r0
   157e8:	cmp	r0, #0
   157ec:	beq	15804 <__mempcpy_chk@plt+0x4794>
   157f0:	mov	r0, r4
   157f4:	bl	10f50 <__freading@plt>
   157f8:	cmp	r0, #0
   157fc:	movne	r0, r4
   15800:	blne	15810 <__mempcpy_chk@plt+0x47a0>
   15804:	mov	r0, r4
   15808:	pop	{r4, sl, fp, lr}
   1580c:	b	10e30 <fflush@plt>
   15810:	ldrb	r1, [r0, #1]
   15814:	tst	r1, #1
   15818:	bxeq	lr
   1581c:	push	{fp, lr}
   15820:	mov	fp, sp
   15824:	sub	sp, sp, #8
   15828:	mov	r1, #1
   1582c:	str	r1, [sp]
   15830:	mov	r2, #0
   15834:	mov	r3, #0
   15838:	bl	15844 <__mempcpy_chk@plt+0x47d4>
   1583c:	mov	sp, fp
   15840:	pop	{fp, pc}
   15844:	push	{r4, r5, r6, r7, fp, lr}
   15848:	add	fp, sp, #16
   1584c:	sub	sp, sp, #8
   15850:	mov	r5, r3
   15854:	mov	r6, r2
   15858:	mov	r4, r0
   1585c:	ldr	r0, [r0, #4]
   15860:	ldr	r1, [r4, #8]
   15864:	cmp	r1, r0
   15868:	bne	15884 <__mempcpy_chk@plt+0x4814>
   1586c:	ldrd	r0, [r4, #16]
   15870:	cmp	r1, r0
   15874:	bne	15884 <__mempcpy_chk@plt+0x4814>
   15878:	ldr	r0, [r4, #36]	; 0x24
   1587c:	cmp	r0, #0
   15880:	beq	1589c <__mempcpy_chk@plt+0x482c>
   15884:	mov	r0, r4
   15888:	mov	r2, r6
   1588c:	mov	r3, r5
   15890:	sub	sp, fp, #16
   15894:	pop	{r4, r5, r6, r7, fp, lr}
   15898:	b	11004 <fseeko64@plt>
   1589c:	ldr	r7, [fp, #8]
   158a0:	mov	r0, r4
   158a4:	bl	10fbc <fileno@plt>
   158a8:	str	r7, [sp]
   158ac:	mov	r2, r6
   158b0:	mov	r3, r5
   158b4:	bl	10ecc <lseek64@plt>
   158b8:	and	r2, r0, r1
   158bc:	cmn	r2, #1
   158c0:	mvneq	r0, #0
   158c4:	subeq	sp, fp, #16
   158c8:	popeq	{r4, r5, r6, r7, fp, pc}
   158cc:	strd	r0, [r4, #80]	; 0x50
   158d0:	ldr	r0, [r4]
   158d4:	bic	r0, r0, #16
   158d8:	str	r0, [r4]
   158dc:	mov	r0, #0
   158e0:	sub	sp, fp, #16
   158e4:	pop	{r4, r5, r6, r7, fp, pc}
   158e8:	push	{fp, lr}
   158ec:	mov	fp, sp
   158f0:	bl	10f8c <__errno_location@plt>
   158f4:	mov	r1, #12
   158f8:	str	r1, [r0]
   158fc:	mov	r0, #0
   15900:	pop	{fp, pc}
   15904:	b	15248 <__mempcpy_chk@plt+0x41d8>
   15908:	cmp	r1, #0
   1590c:	orreq	r1, r1, #1
   15910:	b	15278 <__mempcpy_chk@plt+0x4208>
   15914:	b	151f4 <__mempcpy_chk@plt+0x4184>
   15918:	clz	r3, r2
   1591c:	lsr	ip, r3, #5
   15920:	clz	r3, r1
   15924:	lsr	r3, r3, #5
   15928:	orrs	r3, r3, ip
   1592c:	movwne	r1, #1
   15930:	movwne	r2, #1
   15934:	b	159d0 <__mempcpy_chk@plt+0x4960>
   15938:	push	{fp, lr}
   1593c:	mov	fp, sp
   15940:	mov	r0, #14
   15944:	bl	11028 <nl_langinfo@plt>
   15948:	movw	r1, #23620	; 0x5c44
   1594c:	movt	r1, #1
   15950:	cmp	r0, #0
   15954:	movne	r1, r0
   15958:	ldrb	r2, [r1]
   1595c:	movw	r0, #26086	; 0x65e6
   15960:	movt	r0, #1
   15964:	cmp	r2, #0
   15968:	movne	r0, r1
   1596c:	pop	{fp, pc}
   15970:	push	{r4, r5, r6, r7, fp, lr}
   15974:	add	fp, sp, #16
   15978:	sub	sp, sp, #8
   1597c:	mov	r7, r2
   15980:	mov	r4, r1
   15984:	add	r5, sp, #4
   15988:	cmp	r0, #0
   1598c:	movne	r5, r0
   15990:	mov	r0, r5
   15994:	bl	10efc <mbrtowc@plt>
   15998:	mov	r6, r0
   1599c:	cmp	r7, #0
   159a0:	beq	159c4 <__mempcpy_chk@plt+0x4954>
   159a4:	cmn	r6, #2
   159a8:	bcc	159c4 <__mempcpy_chk@plt+0x4954>
   159ac:	mov	r0, #0
   159b0:	bl	15a0c <__mempcpy_chk@plt+0x499c>
   159b4:	cmp	r0, #0
   159b8:	ldrbeq	r0, [r4]
   159bc:	streq	r0, [r5]
   159c0:	moveq	r6, #1
   159c4:	mov	r0, r6
   159c8:	sub	sp, fp, #16
   159cc:	pop	{r4, r5, r6, r7, fp, pc}
   159d0:	cmp	r2, #0
   159d4:	beq	15a04 <__mempcpy_chk@plt+0x4994>
   159d8:	mvn	r3, #0
   159dc:	udiv	r3, r3, r2
   159e0:	cmp	r3, r1
   159e4:	bcs	15a04 <__mempcpy_chk@plt+0x4994>
   159e8:	push	{fp, lr}
   159ec:	mov	fp, sp
   159f0:	bl	10f8c <__errno_location@plt>
   159f4:	mov	r1, #12
   159f8:	str	r1, [r0]
   159fc:	mov	r0, #0
   15a00:	pop	{fp, pc}
   15a04:	mul	r1, r2, r1
   15a08:	b	15278 <__mempcpy_chk@plt+0x4208>
   15a0c:	push	{r4, sl, fp, lr}
   15a10:	add	fp, sp, #8
   15a14:	sub	sp, sp, #264	; 0x108
   15a18:	add	r1, sp, #7
   15a1c:	movw	r2, #257	; 0x101
   15a20:	bl	15a70 <__mempcpy_chk@plt+0x4a00>
   15a24:	mov	r4, #0
   15a28:	cmp	r0, #0
   15a2c:	bne	15a64 <__mempcpy_chk@plt+0x49f4>
   15a30:	add	r0, sp, #7
   15a34:	movw	r1, #27082	; 0x69ca
   15a38:	movt	r1, #1
   15a3c:	bl	10e24 <strcmp@plt>
   15a40:	cmp	r0, #0
   15a44:	beq	15a64 <__mempcpy_chk@plt+0x49f4>
   15a48:	add	r0, sp, #7
   15a4c:	movw	r1, #27084	; 0x69cc
   15a50:	movt	r1, #1
   15a54:	bl	10e24 <strcmp@plt>
   15a58:	mov	r4, r0
   15a5c:	cmp	r0, #0
   15a60:	movwne	r4, #1
   15a64:	mov	r0, r4
   15a68:	sub	sp, fp, #8
   15a6c:	pop	{r4, sl, fp, pc}
   15a70:	b	15a74 <__mempcpy_chk@plt+0x4a04>
   15a74:	push	{r4, r5, r6, r7, fp, lr}
   15a78:	add	fp, sp, #16
   15a7c:	mov	r6, r2
   15a80:	mov	r4, r1
   15a84:	bl	15b10 <__mempcpy_chk@plt+0x4aa0>
   15a88:	cmp	r0, #0
   15a8c:	beq	15abc <__mempcpy_chk@plt+0x4a4c>
   15a90:	mov	r7, r0
   15a94:	bl	10f80 <strlen@plt>
   15a98:	cmp	r0, r6
   15a9c:	bcs	15adc <__mempcpy_chk@plt+0x4a6c>
   15aa0:	add	r2, r0, #1
   15aa4:	mov	r0, r4
   15aa8:	mov	r1, r7
   15aac:	bl	10e60 <memcpy@plt>
   15ab0:	mov	r5, #0
   15ab4:	mov	r0, r5
   15ab8:	pop	{r4, r5, r6, r7, fp, pc}
   15abc:	mov	r5, #22
   15ac0:	cmp	r6, #0
   15ac4:	movne	r0, #0
   15ac8:	strbne	r0, [r4]
   15acc:	movne	r0, r5
   15ad0:	popne	{r4, r5, r6, r7, fp, pc}
   15ad4:	mov	r0, r5
   15ad8:	pop	{r4, r5, r6, r7, fp, pc}
   15adc:	mov	r5, #34	; 0x22
   15ae0:	cmp	r6, #0
   15ae4:	beq	15b04 <__mempcpy_chk@plt+0x4a94>
   15ae8:	sub	r6, r6, #1
   15aec:	mov	r0, r4
   15af0:	mov	r1, r7
   15af4:	mov	r2, r6
   15af8:	bl	10e60 <memcpy@plt>
   15afc:	mov	r0, #0
   15b00:	strb	r0, [r4, r6]
   15b04:	mov	r0, r5
   15b08:	pop	{r4, r5, r6, r7, fp, pc}
   15b0c:	b	15b10 <__mempcpy_chk@plt+0x4aa0>
   15b10:	mov	r1, #0
   15b14:	b	11010 <setlocale@plt>
   15b18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b1c:	mov	r7, r0
   15b20:	ldr	r6, [pc, #72]	; 15b70 <__mempcpy_chk@plt+0x4b00>
   15b24:	ldr	r5, [pc, #72]	; 15b74 <__mempcpy_chk@plt+0x4b04>
   15b28:	add	r6, pc, r6
   15b2c:	add	r5, pc, r5
   15b30:	sub	r6, r6, r5
   15b34:	mov	r8, r1
   15b38:	mov	r9, r2
   15b3c:	bl	10dd4 <calloc@plt-0x20>
   15b40:	asrs	r6, r6, #2
   15b44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b48:	mov	r4, #0
   15b4c:	add	r4, r4, #1
   15b50:	ldr	r3, [r5], #4
   15b54:	mov	r2, r9
   15b58:	mov	r1, r8
   15b5c:	mov	r0, r7
   15b60:	blx	r3
   15b64:	cmp	r6, r4
   15b68:	bne	15b4c <__mempcpy_chk@plt+0x4adc>
   15b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b70:	ldrdeq	r1, [r1], -ip
   15b74:	ldrdeq	r1, [r1], -r4
   15b78:	bx	lr
   15b7c:	ldr	r3, [pc, #12]	; 15b90 <__mempcpy_chk@plt+0x4b20>
   15b80:	mov	r1, #0
   15b84:	add	r3, pc, r3
   15b88:	ldr	r2, [r3]
   15b8c:	b	10f98 <__cxa_atexit@plt>
   15b90:	andeq	r1, r1, r0, ror #10

Disassembly of section .fini:

00015b94 <.fini>:
   15b94:	push	{r3, lr}
   15b98:	pop	{r3, pc}
