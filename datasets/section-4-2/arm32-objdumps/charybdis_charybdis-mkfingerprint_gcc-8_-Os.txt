
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

00010480 <.init>:
   10480:	push	{r3, lr}
   10484:	bl	10700 <fputs@plt+0x1e8>
   10488:	pop	{r3, pc}

Disassembly of section .plt:

0001048c <abort@plt-0x14>:
   1048c:	push	{lr}		; (str lr, [sp, #-4]!)
   10490:	ldr	lr, [pc, #4]	; 1049c <abort@plt-0x4>
   10494:	add	lr, pc, lr
   10498:	ldr	pc, [lr, #8]!
   1049c:	andeq	r0, r1, r4, ror #22

000104a0 <abort@plt>:
   104a0:	add	ip, pc, #0, 12
   104a4:	add	ip, ip, #16, 20	; 0x10000
   104a8:	ldr	pc, [ip, #2916]!	; 0xb64

000104ac <__libc_start_main@plt>:
   104ac:	add	ip, pc, #0, 12
   104b0:	add	ip, ip, #16, 20	; 0x10000
   104b4:	ldr	pc, [ip, #2908]!	; 0xb5c

000104b8 <__gmon_start__@plt>:
   104b8:	add	ip, pc, #0, 12
   104bc:	add	ip, ip, #16, 20	; 0x10000
   104c0:	ldr	pc, [ip, #2900]!	; 0xb54

000104c4 <putchar@plt>:
   104c4:	add	ip, pc, #0, 12
   104c8:	add	ip, ip, #16, 20	; 0x10000
   104cc:	ldr	pc, [ip, #2892]!	; 0xb4c

000104d0 <memset@plt>:
   104d0:	add	ip, pc, #0, 12
   104d4:	add	ip, ip, #16, 20	; 0x10000
   104d8:	ldr	pc, [ip, #2884]!	; 0xb44

000104dc <perror@plt>:
   104dc:	add	ip, pc, #0, 12
   104e0:	add	ip, ip, #16, 20	; 0x10000
   104e4:	ldr	pc, [ip, #2876]!	; 0xb3c

000104e8 <printf@plt>:
   104e8:	add	ip, pc, #0, 12
   104ec:	add	ip, ip, #16, 20	; 0x10000
   104f0:	ldr	pc, [ip, #2868]!	; 0xb34

000104f4 <puts@plt>:
   104f4:	add	ip, pc, #0, 12
   104f8:	add	ip, ip, #16, 20	; 0x10000
   104fc:	ldr	pc, [ip, #2860]!	; 0xb2c

00010500 <rb_get_ssl_certfp_file@plt>:
   10500:	add	ip, pc, #0, 12
   10504:	add	ip, ip, #16, 20	; 0x10000
   10508:	ldr	pc, [ip, #2852]!	; 0xb24

0001050c <strcmp@plt>:
   1050c:	add	ip, pc, #0, 12
   10510:	add	ip, ip, #16, 20	; 0x10000
   10514:	ldr	pc, [ip, #2844]!	; 0xb1c

00010518 <fputs@plt>:
   10518:	add	ip, pc, #0, 12
   1051c:	add	ip, ip, #16, 20	; 0x10000
   10520:	ldr	pc, [ip, #2836]!	; 0xb14

Disassembly of section .text:

00010524 <.text>:
   10524:	push	{r4, r5, r6, r7, lr}
   10528:	sub	sp, sp, #76	; 0x4c
   1052c:	mov	r4, r0
   10530:	mov	r5, r1
   10534:	mov	r2, #65	; 0x41
   10538:	mov	r1, #0
   1053c:	add	r0, sp, #4
   10540:	bl	104d0 <memset@plt>
   10544:	cmp	r4, #3
   10548:	beq	10568 <fputs@plt+0x50>
   1054c:	ldr	r0, [pc, #308]	; 10688 <fputs@plt+0x170>
   10550:	bl	104f4 <puts@plt>
   10554:	ldr	r0, [pc, #304]	; 1068c <fputs@plt+0x174>
   10558:	bl	104f4 <puts@plt>
   1055c:	mov	r0, #1
   10560:	add	sp, sp, #76	; 0x4c
   10564:	pop	{r4, r5, r6, r7, pc}
   10568:	ldrd	r4, [r5, #4]
   1056c:	ldr	r1, [pc, #284]	; 10690 <fputs@plt+0x178>
   10570:	mov	r0, r4
   10574:	bl	1050c <strcmp@plt>
   10578:	subs	r2, r0, #0
   1057c:	beq	105e8 <fputs@plt+0xd0>
   10580:	ldr	r1, [pc, #268]	; 10694 <fputs@plt+0x17c>
   10584:	mov	r0, r4
   10588:	bl	1050c <strcmp@plt>
   1058c:	cmp	r0, #0
   10590:	beq	1060c <fputs@plt+0xf4>
   10594:	ldr	r1, [pc, #252]	; 10698 <fputs@plt+0x180>
   10598:	mov	r0, r4
   1059c:	bl	1050c <strcmp@plt>
   105a0:	cmp	r0, #0
   105a4:	beq	10618 <fputs@plt+0x100>
   105a8:	ldr	r1, [pc, #236]	; 1069c <fputs@plt+0x184>
   105ac:	mov	r0, r4
   105b0:	bl	1050c <strcmp@plt>
   105b4:	cmp	r0, #0
   105b8:	beq	10624 <fputs@plt+0x10c>
   105bc:	mov	r0, r4
   105c0:	ldr	r1, [pc, #216]	; 106a0 <fputs@plt+0x188>
   105c4:	bl	1050c <strcmp@plt>
   105c8:	cmp	r0, #0
   105cc:	ldreq	r4, [pc, #208]	; 106a4 <fputs@plt+0x18c>
   105d0:	movweq	r2, #4098	; 0x1002
   105d4:	beq	105ec <fputs@plt+0xd4>
   105d8:	mov	r1, r4
   105dc:	ldr	r0, [pc, #196]	; 106a8 <fputs@plt+0x190>
   105e0:	bl	104e8 <printf@plt>
   105e4:	b	1055c <fputs@plt+0x44>
   105e8:	ldr	r4, [pc, #188]	; 106ac <fputs@plt+0x194>
   105ec:	add	r1, sp, #4
   105f0:	mov	r0, r5
   105f4:	bl	10500 <rb_get_ssl_certfp_file@plt>
   105f8:	subs	r6, r0, #0
   105fc:	bge	10630 <fputs@plt+0x118>
   10600:	mov	r0, r5
   10604:	bl	104dc <perror@plt>
   10608:	b	1055c <fputs@plt+0x44>
   1060c:	ldr	r4, [pc, #152]	; 106ac <fputs@plt+0x194>
   10610:	mov	r2, #1
   10614:	b	105ec <fputs@plt+0xd4>
   10618:	ldr	r4, [pc, #140]	; 106ac <fputs@plt+0x194>
   1061c:	mov	r2, #2
   10620:	b	105ec <fputs@plt+0xd4>
   10624:	ldr	r4, [pc, #132]	; 106b0 <fputs@plt+0x198>
   10628:	movw	r2, #4097	; 0x1001
   1062c:	b	105ec <fputs@plt+0xd4>
   10630:	bne	10648 <fputs@plt+0x130>
   10634:	ldr	r3, [pc, #120]	; 106b4 <fputs@plt+0x19c>
   10638:	ldr	r0, [pc, #120]	; 106b8 <fputs@plt+0x1a0>
   1063c:	ldr	r1, [r3]
   10640:	bl	10518 <fputs@plt>
   10644:	b	1055c <fputs@plt+0x44>
   10648:	ldr	r7, [pc, #108]	; 106bc <fputs@plt+0x1a4>
   1064c:	mov	r1, r4
   10650:	mov	r5, #0
   10654:	add	r4, sp, #4
   10658:	ldr	r0, [pc, #96]	; 106c0 <fputs@plt+0x1a8>
   1065c:	bl	104e8 <printf@plt>
   10660:	ldrb	r1, [r4], #1
   10664:	mov	r0, r7
   10668:	add	r5, r5, #1
   1066c:	bl	104e8 <printf@plt>
   10670:	cmp	r6, r5
   10674:	bgt	10660 <fputs@plt+0x148>
   10678:	mov	r0, #10
   1067c:	bl	104c4 <putchar@plt>
   10680:	mov	r0, #0
   10684:	b	10560 <fputs@plt+0x48>
   10688:	andeq	r0, r1, r2, asr #16
   1068c:	andeq	r0, r1, r4, ror #16
   10690:	andeq	r0, r1, r4, lsr #17
   10694:	andeq	r0, r1, lr, lsr #17
   10698:	muleq	r1, sp, r8
   1069c:	andeq	r0, r1, r9, lsr #17
   106a0:	muleq	r1, r8, r8
   106a4:	andeq	r0, r1, r3, lsr r8
   106a8:			; <UNDEFINED> instruction: 0x000108b5
   106ac:	ldrdeq	r0, [r1], -r7
   106b0:	andeq	r0, r1, r4, lsr #16
   106b4:	andeq	r1, r2, r8, asr #32
   106b8:	andeq	r0, r1, r9, asr #17
   106bc:	ldrdeq	r0, [r1], -fp
   106c0:	ldrdeq	r0, [r1], -r8
   106c4:	mov	fp, #0
   106c8:	mov	lr, #0
   106cc:	pop	{r1}		; (ldr r1, [sp], #4)
   106d0:	mov	r2, sp
   106d4:	push	{r2}		; (str r2, [sp, #-4]!)
   106d8:	push	{r0}		; (str r0, [sp, #-4]!)
   106dc:	ldr	ip, [pc, #16]	; 106f4 <fputs@plt+0x1dc>
   106e0:	push	{ip}		; (str ip, [sp, #-4]!)
   106e4:	ldr	r0, [pc, #12]	; 106f8 <fputs@plt+0x1e0>
   106e8:	ldr	r3, [pc, #12]	; 106fc <fputs@plt+0x1e4>
   106ec:	bl	104ac <__libc_start_main@plt>
   106f0:	bl	104a0 <abort@plt>
   106f4:	andeq	r0, r1, r4, lsl r8
   106f8:	andeq	r0, r1, r4, lsr #10
   106fc:			; <UNDEFINED> instruction: 0x000107b4
   10700:	ldr	r3, [pc, #20]	; 1071c <fputs@plt+0x204>
   10704:	ldr	r2, [pc, #20]	; 10720 <fputs@plt+0x208>
   10708:	add	r3, pc, r3
   1070c:	ldr	r2, [r3, r2]
   10710:	cmp	r2, #0
   10714:	bxeq	lr
   10718:	b	104b8 <__gmon_start__@plt>
   1071c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10720:	andeq	r0, r0, r8, lsr r0
   10724:	ldr	r0, [pc, #24]	; 10744 <fputs@plt+0x22c>
   10728:	ldr	r3, [pc, #24]	; 10748 <fputs@plt+0x230>
   1072c:	cmp	r3, r0
   10730:	bxeq	lr
   10734:	ldr	r3, [pc, #16]	; 1074c <fputs@plt+0x234>
   10738:	cmp	r3, #0
   1073c:	bxeq	lr
   10740:	bx	r3
   10744:	andeq	r1, r2, r4, asr #32
   10748:	andeq	r1, r2, r4, asr #32
   1074c:	andeq	r0, r0, r0
   10750:	ldr	r0, [pc, #36]	; 1077c <fputs@plt+0x264>
   10754:	ldr	r1, [pc, #36]	; 10780 <fputs@plt+0x268>
   10758:	sub	r1, r1, r0
   1075c:	asr	r1, r1, #2
   10760:	add	r1, r1, r1, lsr #31
   10764:	asrs	r1, r1, #1
   10768:	bxeq	lr
   1076c:	ldr	r3, [pc, #16]	; 10784 <fputs@plt+0x26c>
   10770:	cmp	r3, #0
   10774:	bxeq	lr
   10778:	bx	r3
   1077c:	andeq	r1, r2, r4, asr #32
   10780:	andeq	r1, r2, r4, asr #32
   10784:	andeq	r0, r0, r0
   10788:	push	{r4, lr}
   1078c:	ldr	r4, [pc, #24]	; 107ac <fputs@plt+0x294>
   10790:	ldrb	r3, [r4]
   10794:	cmp	r3, #0
   10798:	popne	{r4, pc}
   1079c:	bl	10724 <fputs@plt+0x20c>
   107a0:	mov	r3, #1
   107a4:	strb	r3, [r4]
   107a8:	pop	{r4, pc}
   107ac:	andeq	r1, r2, ip, asr #32
   107b0:	b	10750 <fputs@plt+0x238>
   107b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107b8:	mov	r7, r0
   107bc:	ldr	r6, [pc, #72]	; 1080c <fputs@plt+0x2f4>
   107c0:	ldr	r5, [pc, #72]	; 10810 <fputs@plt+0x2f8>
   107c4:	add	r6, pc, r6
   107c8:	add	r5, pc, r5
   107cc:	sub	r6, r6, r5
   107d0:	mov	r8, r1
   107d4:	mov	r9, r2
   107d8:	bl	10480 <abort@plt-0x20>
   107dc:	asrs	r6, r6, #2
   107e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   107e4:	mov	r4, #0
   107e8:	add	r4, r4, #1
   107ec:	ldr	r3, [r5], #4
   107f0:	mov	r2, r9
   107f4:	mov	r1, r8
   107f8:	mov	r0, r7
   107fc:	blx	r3
   10800:	cmp	r6, r4
   10804:	bne	107e8 <fputs@plt+0x2d0>
   10808:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1080c:	andeq	r0, r1, r0, lsr r7
   10810:	andeq	r0, r1, r8, lsr #14
   10814:	bx	lr

Disassembly of section .fini:

00010818 <.fini>:
   10818:	push	{r3, lr}
   1081c:	pop	{r3, pc}
