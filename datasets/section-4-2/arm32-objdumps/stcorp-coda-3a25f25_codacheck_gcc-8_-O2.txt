
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010ba4 <.init>:
   10ba4:	push	{r3, lr}
   10ba8:	bl	112cc <_start@@Base+0x3c>
   10bac:	pop	{r3, pc}

Disassembly of section .plt:

00010bb0 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10bb0:	push	{lr}		; (str lr, [sp, #-4]!)
   10bb4:	ldr	lr, [pc, #4]	; 10bc0 <coda_set_option_perform_boundary_checks@plt-0x4>
   10bb8:	add	lr, pc, lr
   10bbc:	ldr	pc, [lr, #8]!
   10bc0:	andeq	r2, r1, r0, asr #8

00010bc4 <coda_set_option_perform_boundary_checks@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #73728	; 0x12000
   10bcc:	ldr	pc, [ip, #1088]!	; 0x440

00010bd0 <strcmp@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #73728	; 0x12000
   10bd8:	ldr	pc, [ip, #1080]!	; 0x438

00010bdc <printf@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #73728	; 0x12000
   10be4:	ldr	pc, [ip, #1072]!	; 0x430

00010be8 <coda_set_error@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #73728	; 0x12000
   10bf0:	ldr	pc, [ip, #1064]!	; 0x428

00010bf4 <coda_open@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #73728	; 0x12000
   10bfc:	ldr	pc, [ip, #1056]!	; 0x420

00010c00 <fflush@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #73728	; 0x12000
   10c08:	ldr	pc, [ip, #1048]!	; 0x418

00010c0c <coda_set_option_use_mmap@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #73728	; 0x12000
   10c14:	ldr	pc, [ip, #1040]!	; 0x410

00010c18 <coda_cursor_print_path@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #73728	; 0x12000
   10c20:	ldr	pc, [ip, #1032]!	; 0x408

00010c24 <coda_set_definition_path_conditional@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #73728	; 0x12000
   10c2c:	ldr	pc, [ip, #1024]!	; 0x400

00010c30 <coda_set_definition_path@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #73728	; 0x12000
   10c38:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c3c <coda_recognize_file@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #73728	; 0x12000
   10c44:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c48 <fwrite@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #73728	; 0x12000
   10c50:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c54 <coda_type_get_format_name@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #73728	; 0x12000
   10c5c:	ldr	pc, [ip, #992]!	; 0x3e0

00010c60 <coda_done@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #73728	; 0x12000
   10c68:	ldr	pc, [ip, #984]!	; 0x3d8

00010c6c <puts@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #73728	; 0x12000
   10c74:	ldr	pc, [ip, #976]!	; 0x3d0

00010c78 <coda_product_check@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #73728	; 0x12000
   10c80:	ldr	pc, [ip, #968]!	; 0x3c8

00010c84 <__libc_start_main@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #73728	; 0x12000
   10c8c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c90 <__gmon_start__@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #73728	; 0x12000
   10c98:	ldr	pc, [ip, #952]!	; 0x3b8

00010c9c <exit@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #73728	; 0x12000
   10ca4:	ldr	pc, [ip, #944]!	; 0x3b0

00010ca8 <fprintf@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #73728	; 0x12000
   10cb0:	ldr	pc, [ip, #936]!	; 0x3a8

00010cb4 <coda_init@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #73728	; 0x12000
   10cbc:	ldr	pc, [ip, #928]!	; 0x3a0

00010cc0 <ungetc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #73728	; 0x12000
   10cc8:	ldr	pc, [ip, #920]!	; 0x398

00010ccc <coda_set_option_perform_conversions@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #73728	; 0x12000
   10cd4:	ldr	pc, [ip, #912]!	; 0x390

00010cd8 <putchar@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #73728	; 0x12000
   10ce0:	ldr	pc, [ip, #904]!	; 0x388

00010ce4 <coda_close@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #73728	; 0x12000
   10cec:	ldr	pc, [ip, #896]!	; 0x380

00010cf0 <coda_errno_to_string@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #73728	; 0x12000
   10cf8:	ldr	pc, [ip, #888]!	; 0x378

00010cfc <coda_get_libcoda_version@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #73728	; 0x12000
   10d04:	ldr	pc, [ip, #880]!	; 0x370

00010d08 <coda_get_errno@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #73728	; 0x12000
   10d10:	ldr	pc, [ip, #872]!	; 0x368

00010d14 <abort@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #73728	; 0x12000
   10d1c:	ldr	pc, [ip, #864]!	; 0x360

00010d20 <getc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #73728	; 0x12000
   10d28:	ldr	pc, [ip, #856]!	; 0x358

00010d2c <__assert_fail@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #73728	; 0x12000
   10d34:	ldr	pc, [ip, #848]!	; 0x350

Disassembly of section .text:

00010d38 <main@@Base>:
   10d38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d3c:	mov	r4, #0
   10d40:	cmp	r0, #1
   10d44:	ldr	r5, [pc, #1228]	; 11218 <main@@Base+0x4e0>
   10d48:	strd	r6, [sp, #8]
   10d4c:	strd	r8, [sp, #16]
   10d50:	mov	r8, r1
   10d54:	ldr	r1, [pc, #1216]	; 1121c <main@@Base+0x4e4>
   10d58:	strd	sl, [sp, #24]
   10d5c:	add	r5, pc, r5
   10d60:	ldr	r2, [pc, #1208]	; 11220 <main@@Base+0x4e8>
   10d64:	str	lr, [sp, #32]
   10d68:	sub	sp, sp, #1040	; 0x410
   10d6c:	sub	sp, sp, #12
   10d70:	ldr	r3, [pc, #1196]	; 11224 <main@@Base+0x4ec>
   10d74:	ldr	r1, [r5, r1]
   10d78:	str	r4, [r1]
   10d7c:	str	r1, [sp, #8]
   10d80:	ldr	r2, [r5, r2]
   10d84:	str	r4, [r2]
   10d88:	str	r2, [sp, #4]
   10d8c:	ldr	r3, [r5, r3]
   10d90:	str	r4, [r3]
   10d94:	str	r3, [sp, #12]
   10d98:	beq	10dbc <main@@Base+0x84>
   10d9c:	ldr	r1, [pc, #1156]	; 11228 <main@@Base+0x4f0>
   10da0:	mov	r6, r0
   10da4:	ldr	r7, [r8, #4]
   10da8:	add	r1, pc, r1
   10dac:	mov	r0, r7
   10db0:	bl	10bd0 <strcmp@plt>
   10db4:	cmp	r0, r4
   10db8:	bne	10dc8 <main@@Base+0x90>
   10dbc:	bl	11380 <_start@@Base+0xf0>
   10dc0:	mov	r0, #0
   10dc4:	bl	10c9c <exit@plt>
   10dc8:	ldr	r1, [pc, #1116]	; 1122c <main@@Base+0x4f4>
   10dcc:	mov	r0, r7
   10dd0:	add	r1, pc, r1
   10dd4:	bl	10bd0 <strcmp@plt>
   10dd8:	cmp	r0, r4
   10ddc:	beq	10dbc <main@@Base+0x84>
   10de0:	ldr	r1, [pc, #1096]	; 11230 <main@@Base+0x4f8>
   10de4:	mov	r0, r7
   10de8:	add	r1, pc, r1
   10dec:	bl	10bd0 <strcmp@plt>
   10df0:	cmp	r0, #0
   10df4:	beq	10f68 <main@@Base+0x230>
   10df8:	ldr	r1, [pc, #1076]	; 11234 <main@@Base+0x4fc>
   10dfc:	mov	r0, r7
   10e00:	add	r1, pc, r1
   10e04:	bl	10bd0 <strcmp@plt>
   10e08:	cmp	r0, #0
   10e0c:	beq	10f68 <main@@Base+0x230>
   10e10:	cmp	r6, #2
   10e14:	ble	10f98 <main@@Base+0x260>
   10e18:	ldr	r1, [pc, #1048]	; 11238 <main@@Base+0x500>
   10e1c:	mov	r0, r7
   10e20:	add	r1, pc, r1
   10e24:	bl	10bd0 <strcmp@plt>
   10e28:	cmp	r0, #0
   10e2c:	beq	11064 <main@@Base+0x32c>
   10e30:	ldr	r2, [pc, #1028]	; 1123c <main@@Base+0x504>
   10e34:	mov	r1, r4
   10e38:	ldr	r0, [r8]
   10e3c:	add	r2, pc, r2
   10e40:	bl	10c24 <coda_set_definition_path_conditional@plt>
   10e44:	cmp	r0, #0
   10e48:	bne	111e4 <main@@Base+0x4ac>
   10e4c:	mov	r4, #1
   10e50:	ldr	r2, [pc, #1000]	; 11240 <main@@Base+0x508>
   10e54:	mov	r3, #1
   10e58:	add	r9, r8, r4, lsl #2
   10e5c:	mov	fp, r3
   10e60:	str	r3, [sp, #24]
   10e64:	ldr	r3, [pc, #984]	; 11244 <main@@Base+0x50c>
   10e68:	str	r8, [sp, #32]
   10e6c:	add	r2, pc, r2
   10e70:	ldr	sl, [pc, #976]	; 11248 <main@@Base+0x510>
   10e74:	str	r2, [sp, #16]
   10e78:	ldr	r2, [pc, #972]	; 1124c <main@@Base+0x514>
   10e7c:	add	r3, pc, r3
   10e80:	mov	r8, r3
   10e84:	str	r5, [sp, #36]	; 0x24
   10e88:	add	sl, pc, sl
   10e8c:	ldr	r5, [sp, #8]
   10e90:	add	r2, pc, r2
   10e94:	str	r2, [sp, #20]
   10e98:	ldr	r2, [pc, #944]	; 11250 <main@@Base+0x518>
   10e9c:	add	r2, pc, r2
   10ea0:	str	r2, [sp, #28]
   10ea4:	ldr	r2, [pc, #936]	; 11254 <main@@Base+0x51c>
   10ea8:	add	r2, pc, r2
   10eac:	str	r2, [sp, #40]	; 0x28
   10eb0:	ldr	r2, [pc, #928]	; 11258 <main@@Base+0x520>
   10eb4:	add	r2, pc, r2
   10eb8:	str	r2, [sp, #44]	; 0x2c
   10ebc:	b	10f48 <main@@Base+0x210>
   10ec0:	mov	r1, r8
   10ec4:	mov	r0, r7
   10ec8:	bl	10bd0 <strcmp@plt>
   10ecc:	cmp	r0, #0
   10ed0:	beq	10f60 <main@@Base+0x228>
   10ed4:	mov	r0, r7
   10ed8:	ldr	r1, [sp, #16]
   10edc:	bl	10bd0 <strcmp@plt>
   10ee0:	cmp	r0, #0
   10ee4:	beq	11040 <main@@Base+0x308>
   10ee8:	mov	r0, r7
   10eec:	ldr	r1, [sp, #20]
   10ef0:	bl	10bd0 <strcmp@plt>
   10ef4:	cmp	r0, #0
   10ef8:	beq	11040 <main@@Base+0x308>
   10efc:	mov	r0, r7
   10f00:	ldr	r1, [sp, #28]
   10f04:	bl	10bd0 <strcmp@plt>
   10f08:	cmp	r0, #0
   10f0c:	beq	11058 <main@@Base+0x320>
   10f10:	mov	r0, r7
   10f14:	ldr	r1, [sp, #40]	; 0x28
   10f18:	bl	10bd0 <strcmp@plt>
   10f1c:	cmp	r0, #0
   10f20:	beq	11058 <main@@Base+0x320>
   10f24:	mov	r0, r7
   10f28:	ldr	r1, [sp, #44]	; 0x2c
   10f2c:	bl	10bd0 <strcmp@plt>
   10f30:	cmp	r0, #0
   10f34:	bne	11074 <main@@Base+0x33c>
   10f38:	str	r0, [sp, #24]
   10f3c:	add	r4, r4, #1
   10f40:	cmp	r6, r4
   10f44:	ble	1104c <main@@Base+0x314>
   10f48:	ldr	r7, [r9], #4
   10f4c:	mov	r1, sl
   10f50:	mov	r0, r7
   10f54:	bl	10bd0 <strcmp@plt>
   10f58:	cmp	r0, #0
   10f5c:	bne	10ec0 <main@@Base+0x188>
   10f60:	str	fp, [r5]
   10f64:	b	10f3c <main@@Base+0x204>
   10f68:	bl	10cfc <coda_get_libcoda_version@plt>
   10f6c:	mov	r1, r0
   10f70:	ldr	r0, [pc, #740]	; 1125c <main@@Base+0x524>
   10f74:	add	r0, pc, r0
   10f78:	bl	10bdc <printf@plt>
   10f7c:	ldr	r0, [pc, #732]	; 11260 <main@@Base+0x528>
   10f80:	add	r0, pc, r0
   10f84:	bl	10c6c <puts@plt>
   10f88:	mov	r0, #10
   10f8c:	bl	10cd8 <putchar@plt>
   10f90:	mov	r0, #0
   10f94:	bl	10c9c <exit@plt>
   10f98:	ldr	r2, [pc, #708]	; 11264 <main@@Base+0x52c>
   10f9c:	mov	r1, r4
   10fa0:	ldr	r0, [r8]
   10fa4:	add	r2, pc, r2
   10fa8:	bl	10c24 <coda_set_definition_path_conditional@plt>
   10fac:	cmp	r0, #0
   10fb0:	moveq	r4, #1
   10fb4:	bne	111e4 <main@@Base+0x4ac>
   10fb8:	cmp	r6, r4
   10fbc:	movle	r3, #1
   10fc0:	strle	r3, [sp, #24]
   10fc4:	bgt	10e50 <main@@Base+0x118>
   10fc8:	bl	10cb4 <coda_init@plt>
   10fcc:	subs	r7, r0, #0
   10fd0:	bne	110d8 <main@@Base+0x3a0>
   10fd4:	bl	10bc4 <coda_set_option_perform_boundary_checks@plt>
   10fd8:	mov	r0, r7
   10fdc:	bl	10ccc <coda_set_option_perform_conversions@plt>
   10fe0:	ldr	r0, [sp, #24]
   10fe4:	bl	10c0c <coda_set_option_use_mmap@plt>
   10fe8:	b	11000 <main@@Base+0x2c8>
   10fec:	ldr	r0, [r8, r4, lsl #2]
   10ff0:	add	r4, r4, #1
   10ff4:	bl	1157c <_start@@Base+0x2ec>
   10ff8:	mov	r0, #0
   10ffc:	bl	10c00 <fflush@plt>
   11000:	cmp	r4, r6
   11004:	blt	10fec <main@@Base+0x2b4>
   11008:	bl	10c60 <coda_done@plt>
   1100c:	ldr	r3, [pc, #596]	; 11268 <main@@Base+0x530>
   11010:	ldr	r3, [r5, r3]
   11014:	ldr	r0, [r3]
   11018:	cmp	r0, #0
   1101c:	bne	111dc <main@@Base+0x4a4>
   11020:	add	sp, sp, #1040	; 0x410
   11024:	add	sp, sp, #12
   11028:	ldrd	r4, [sp]
   1102c:	ldrd	r6, [sp, #8]
   11030:	ldrd	r8, [sp, #16]
   11034:	ldrd	sl, [sp, #24]
   11038:	add	sp, sp, #32
   1103c:	pop	{pc}		; (ldr pc, [sp], #4)
   11040:	ldr	r3, [sp, #4]
   11044:	str	fp, [r3]
   11048:	b	10f3c <main@@Base+0x204>
   1104c:	ldr	r8, [sp, #32]
   11050:	ldr	r5, [sp, #36]	; 0x24
   11054:	b	10fc8 <main@@Base+0x290>
   11058:	ldr	r3, [sp, #12]
   1105c:	str	fp, [r3]
   11060:	b	10f3c <main@@Base+0x204>
   11064:	ldr	r0, [r8, #8]
   11068:	mov	r4, #3
   1106c:	bl	10c30 <coda_set_definition_path@plt>
   11070:	b	10fb8 <main@@Base+0x280>
   11074:	ldr	r1, [pc, #496]	; 1126c <main@@Base+0x534>
   11078:	mov	r0, r7
   1107c:	add	r1, pc, r1
   11080:	bl	10bd0 <strcmp@plt>
   11084:	cmp	r0, #0
   11088:	ldr	r8, [sp, #32]
   1108c:	ldr	r5, [sp, #36]	; 0x24
   11090:	bne	110a0 <main@@Base+0x368>
   11094:	sub	r3, r6, #1
   11098:	cmp	r3, r4
   1109c:	beq	1110c <main@@Base+0x3d4>
   110a0:	ldrb	r3, [r7]
   110a4:	cmp	r3, #45	; 0x2d
   110a8:	bne	10fc8 <main@@Base+0x290>
   110ac:	ldr	r3, [pc, #444]	; 11270 <main@@Base+0x538>
   110b0:	mov	r2, #25
   110b4:	mov	r1, #1
   110b8:	ldr	r0, [pc, #436]	; 11274 <main@@Base+0x53c>
   110bc:	ldr	r3, [r5, r3]
   110c0:	add	r0, pc, r0
   110c4:	ldr	r3, [r3]
   110c8:	bl	10c48 <fwrite@plt>
   110cc:	bl	11380 <_start@@Base+0xf0>
   110d0:	mov	r0, #1
   110d4:	bl	10c9c <exit@plt>
   110d8:	ldr	r3, [pc, #400]	; 11270 <main@@Base+0x538>
   110dc:	ldr	r3, [r5, r3]
   110e0:	ldr	r4, [r3]
   110e4:	bl	10d08 <coda_get_errno@plt>
   110e8:	ldr	r0, [r0]
   110ec:	bl	10cf0 <coda_errno_to_string@plt>
   110f0:	ldr	r1, [pc, #384]	; 11278 <main@@Base+0x540>
   110f4:	mov	r2, r0
   110f8:	mov	r0, r4
   110fc:	add	r1, pc, r1
   11100:	bl	10ca8 <fprintf@plt>
   11104:	mov	r0, #1
   11108:	bl	10c9c <exit@plt>
   1110c:	bl	10cb4 <coda_init@plt>
   11110:	cmp	r0, #0
   11114:	bne	110d8 <main@@Base+0x3a0>
   11118:	mov	r0, #0
   1111c:	add	r6, sp, #48	; 0x30
   11120:	bl	10bc4 <coda_set_option_perform_boundary_checks@plt>
   11124:	mov	r0, #0
   11128:	mov	r7, r0
   1112c:	bl	10ccc <coda_set_option_perform_conversions@plt>
   11130:	ldr	r0, [sp, #24]
   11134:	bl	10c0c <coda_set_option_use_mmap@plt>
   11138:	ldr	r3, [pc, #316]	; 1127c <main@@Base+0x544>
   1113c:	ldr	r5, [r5, r3]
   11140:	mov	r4, #0
   11144:	b	11160 <main@@Base+0x428>
   11148:	cmp	r0, #10
   1114c:	beq	11190 <main@@Base+0x458>
   11150:	strb	r0, [r6, r4]
   11154:	add	r4, r4, #1
   11158:	cmp	r4, #1000	; 0x3e8
   1115c:	beq	111bc <main@@Base+0x484>
   11160:	ldr	r0, [r5]
   11164:	bl	10d20 <getc@plt>
   11168:	uxtb	r0, r0
   1116c:	cmp	r0, #13
   11170:	bne	11148 <main@@Base+0x410>
   11174:	ldr	r0, [r5]
   11178:	bl	10d20 <getc@plt>
   1117c:	uxtb	r0, r0
   11180:	cmp	r0, #10
   11184:	beq	11190 <main@@Base+0x458>
   11188:	ldr	r1, [r5]
   1118c:	bl	10cc0 <ungetc@plt>
   11190:	add	r3, sp, #1040	; 0x410
   11194:	cmp	r4, #0
   11198:	add	r3, r3, #8
   1119c:	add	r3, r3, r4
   111a0:	strb	r7, [r3, #-1000]	; 0xfffffc18
   111a4:	beq	11140 <main@@Base+0x408>
   111a8:	mov	r0, r6
   111ac:	bl	1157c <_start@@Base+0x2ec>
   111b0:	mov	r0, #0
   111b4:	bl	10c00 <fflush@plt>
   111b8:	b	11140 <main@@Base+0x408>
   111bc:	ldr	r3, [pc, #188]	; 11280 <main@@Base+0x548>
   111c0:	mov	r2, #316	; 0x13c
   111c4:	ldr	r1, [pc, #184]	; 11284 <main@@Base+0x54c>
   111c8:	ldr	r0, [pc, #184]	; 11288 <main@@Base+0x550>
   111cc:	add	r3, pc, r3
   111d0:	add	r1, pc, r1
   111d4:	add	r0, pc, r0
   111d8:	bl	10d2c <__assert_fail@plt>
   111dc:	mov	r0, #1
   111e0:	bl	10c9c <exit@plt>
   111e4:	ldr	r3, [pc, #132]	; 11270 <main@@Base+0x538>
   111e8:	ldr	r3, [r5, r3]
   111ec:	ldr	r4, [r3]
   111f0:	bl	10d08 <coda_get_errno@plt>
   111f4:	ldr	r0, [r0]
   111f8:	bl	10cf0 <coda_errno_to_string@plt>
   111fc:	ldr	r1, [pc, #136]	; 1128c <main@@Base+0x554>
   11200:	mov	r2, r0
   11204:	mov	r0, r4
   11208:	add	r1, pc, r1
   1120c:	bl	10ca8 <fprintf@plt>
   11210:	mov	r0, #1
   11214:	bl	10c9c <exit@plt>
   11218:	muleq	r1, ip, r2
   1121c:	muleq	r0, r4, r0
   11220:	andeq	r0, r0, r4, lsr #1
   11224:	andeq	r0, r0, ip, lsl #1
   11228:	andeq	r1, r0, r8, lsr #3
   1122c:	andeq	r1, r0, r4, lsl #3
   11230:	andeq	r1, r0, r4, ror r1
   11234:	andeq	r1, r0, r0, ror #2
   11238:	muleq	r0, r4, r1
   1123c:	andeq	r1, r0, ip, ror r1
   11240:	andeq	r1, r0, r8, ror r1
   11244:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11248:	andeq	r1, r0, r8, asr r1
   1124c:	andeq	r0, r0, ip, lsr #24
   11250:	andeq	r1, r0, ip, asr #2
   11254:	andeq	r0, r0, r0, lsl fp
   11258:	strdeq	r0, [r0], -r8
   1125c:	strdeq	r0, [r0], -r8
   11260:	andeq	r1, r0, r4
   11264:	andeq	r1, r0, r4, lsl r0
   11268:	muleq	r0, r0, r0
   1126c:	andeq	r0, r0, r0, ror pc
   11270:	muleq	r0, r8, r0
   11274:	andeq	r0, r0, r0, lsr pc
   11278:	ldrdeq	r0, [r0], -r8
   1127c:	andeq	r0, r0, r0, lsr #1
   11280:	andeq	r0, r0, r8, lsr r7
   11284:	andeq	r0, r0, ip, lsr lr
   11288:	muleq	r0, r8, lr
   1128c:	andeq	r0, r0, ip, asr #27

00011290 <_start@@Base>:
   11290:	mov	fp, #0
   11294:	mov	lr, #0
   11298:	pop	{r1}		; (ldr r1, [sp], #4)
   1129c:	mov	r2, sp
   112a0:	push	{r2}		; (str r2, [sp, #-4]!)
   112a4:	push	{r0}		; (str r0, [sp, #-4]!)
   112a8:	ldr	ip, [pc, #16]	; 112c0 <_start@@Base+0x30>
   112ac:	push	{ip}		; (str ip, [sp, #-4]!)
   112b0:	ldr	r0, [pc, #12]	; 112c4 <_start@@Base+0x34>
   112b4:	ldr	r3, [pc, #12]	; 112c8 <_start@@Base+0x38>
   112b8:	bl	10c84 <__libc_start_main@plt>
   112bc:	bl	10d14 <abort@plt>
   112c0:	strdeq	r1, [r1], -ip
   112c4:	andeq	r0, r1, r8, lsr sp
   112c8:	muleq	r1, ip, r8
   112cc:	ldr	r3, [pc, #20]	; 112e8 <_start@@Base+0x58>
   112d0:	ldr	r2, [pc, #20]	; 112ec <_start@@Base+0x5c>
   112d4:	add	r3, pc, r3
   112d8:	ldr	r2, [r3, r2]
   112dc:	cmp	r2, #0
   112e0:	bxeq	lr
   112e4:	b	10c90 <__gmon_start__@plt>
   112e8:	andeq	r1, r1, r4, lsr #26
   112ec:	muleq	r0, ip, r0
   112f0:	ldr	r0, [pc, #24]	; 11310 <_start@@Base+0x80>
   112f4:	ldr	r3, [pc, #24]	; 11314 <_start@@Base+0x84>
   112f8:	cmp	r3, r0
   112fc:	bxeq	lr
   11300:	ldr	r3, [pc, #16]	; 11318 <_start@@Base+0x88>
   11304:	cmp	r3, #0
   11308:	bxeq	lr
   1130c:	bx	r3
   11310:	strheq	r3, [r2], -r0
   11314:	strheq	r3, [r2], -r0
   11318:	andeq	r0, r0, r0
   1131c:	ldr	r0, [pc, #36]	; 11348 <_start@@Base+0xb8>
   11320:	ldr	r1, [pc, #36]	; 1134c <_start@@Base+0xbc>
   11324:	sub	r1, r1, r0
   11328:	asr	r1, r1, #2
   1132c:	add	r1, r1, r1, lsr #31
   11330:	asrs	r1, r1, #1
   11334:	bxeq	lr
   11338:	ldr	r3, [pc, #16]	; 11350 <_start@@Base+0xc0>
   1133c:	cmp	r3, #0
   11340:	bxeq	lr
   11344:	bx	r3
   11348:	strheq	r3, [r2], -r0
   1134c:	strheq	r3, [r2], -r0
   11350:	andeq	r0, r0, r0
   11354:	push	{r4, lr}
   11358:	ldr	r4, [pc, #24]	; 11378 <_start@@Base+0xe8>
   1135c:	ldrb	r3, [r4]
   11360:	cmp	r3, #0
   11364:	popne	{r4, pc}
   11368:	bl	112f0 <_start@@Base+0x60>
   1136c:	mov	r3, #1
   11370:	strb	r3, [r4]
   11374:	pop	{r4, pc}
   11378:	strheq	r3, [r2], -r0
   1137c:	b	1131c <_start@@Base+0x8c>
   11380:	ldr	r0, [pc, #388]	; 1150c <_start@@Base+0x27c>
   11384:	str	r4, [sp, #-8]!
   11388:	str	lr, [sp, #4]
   1138c:	add	r0, pc, r0
   11390:	bl	10c6c <puts@plt>
   11394:	ldr	r0, [pc, #372]	; 11510 <_start@@Base+0x280>
   11398:	add	r0, pc, r0
   1139c:	bl	10c6c <puts@plt>
   113a0:	ldr	r0, [pc, #364]	; 11514 <_start@@Base+0x284>
   113a4:	add	r0, pc, r0
   113a8:	bl	10c6c <puts@plt>
   113ac:	ldr	r0, [pc, #356]	; 11518 <_start@@Base+0x288>
   113b0:	add	r0, pc, r0
   113b4:	bl	10c6c <puts@plt>
   113b8:	ldr	r0, [pc, #348]	; 1151c <_start@@Base+0x28c>
   113bc:	add	r0, pc, r0
   113c0:	bl	10c6c <puts@plt>
   113c4:	ldr	r0, [pc, #340]	; 11520 <_start@@Base+0x290>
   113c8:	add	r0, pc, r0
   113cc:	bl	10c6c <puts@plt>
   113d0:	ldr	r0, [pc, #332]	; 11524 <_start@@Base+0x294>
   113d4:	add	r0, pc, r0
   113d8:	bl	10c6c <puts@plt>
   113dc:	ldr	r0, [pc, #324]	; 11528 <_start@@Base+0x298>
   113e0:	add	r0, pc, r0
   113e4:	bl	10c6c <puts@plt>
   113e8:	ldr	r0, [pc, #316]	; 1152c <_start@@Base+0x29c>
   113ec:	add	r0, pc, r0
   113f0:	bl	10c6c <puts@plt>
   113f4:	ldr	r0, [pc, #308]	; 11530 <_start@@Base+0x2a0>
   113f8:	add	r0, pc, r0
   113fc:	bl	10c6c <puts@plt>
   11400:	ldr	r0, [pc, #300]	; 11534 <_start@@Base+0x2a4>
   11404:	add	r0, pc, r0
   11408:	bl	10c6c <puts@plt>
   1140c:	ldr	r0, [pc, #292]	; 11538 <_start@@Base+0x2a8>
   11410:	add	r0, pc, r0
   11414:	bl	10c6c <puts@plt>
   11418:	ldr	r0, [pc, #284]	; 1153c <_start@@Base+0x2ac>
   1141c:	add	r0, pc, r0
   11420:	bl	10c6c <puts@plt>
   11424:	ldr	r0, [pc, #276]	; 11540 <_start@@Base+0x2b0>
   11428:	add	r0, pc, r0
   1142c:	bl	10c6c <puts@plt>
   11430:	ldr	r0, [pc, #268]	; 11544 <_start@@Base+0x2b4>
   11434:	add	r0, pc, r0
   11438:	bl	10c6c <puts@plt>
   1143c:	mov	r0, #10
   11440:	bl	10cd8 <putchar@plt>
   11444:	ldr	r0, [pc, #252]	; 11548 <_start@@Base+0x2b8>
   11448:	add	r0, pc, r0
   1144c:	bl	10c6c <puts@plt>
   11450:	ldr	r0, [pc, #244]	; 1154c <_start@@Base+0x2bc>
   11454:	add	r0, pc, r0
   11458:	bl	10c6c <puts@plt>
   1145c:	mov	r0, #10
   11460:	bl	10cd8 <putchar@plt>
   11464:	ldr	r0, [pc, #228]	; 11550 <_start@@Base+0x2c0>
   11468:	add	r0, pc, r0
   1146c:	bl	10c6c <puts@plt>
   11470:	ldr	r0, [pc, #220]	; 11554 <_start@@Base+0x2c4>
   11474:	add	r0, pc, r0
   11478:	bl	10c6c <puts@plt>
   1147c:	mov	r0, #10
   11480:	bl	10cd8 <putchar@plt>
   11484:	ldr	r0, [pc, #204]	; 11558 <_start@@Base+0x2c8>
   11488:	add	r0, pc, r0
   1148c:	bl	10c6c <puts@plt>
   11490:	ldr	r0, [pc, #196]	; 1155c <_start@@Base+0x2cc>
   11494:	add	r0, pc, r0
   11498:	bl	10c6c <puts@plt>
   1149c:	mov	r0, #10
   114a0:	bl	10cd8 <putchar@plt>
   114a4:	ldr	r0, [pc, #180]	; 11560 <_start@@Base+0x2d0>
   114a8:	add	r0, pc, r0
   114ac:	bl	10c6c <puts@plt>
   114b0:	ldr	r0, [pc, #172]	; 11564 <_start@@Base+0x2d4>
   114b4:	add	r0, pc, r0
   114b8:	bl	10c6c <puts@plt>
   114bc:	ldr	r0, [pc, #164]	; 11568 <_start@@Base+0x2d8>
   114c0:	add	r0, pc, r0
   114c4:	bl	10c6c <puts@plt>
   114c8:	ldr	r0, [pc, #156]	; 1156c <_start@@Base+0x2dc>
   114cc:	add	r0, pc, r0
   114d0:	bl	10c6c <puts@plt>
   114d4:	ldr	r0, [pc, #148]	; 11570 <_start@@Base+0x2e0>
   114d8:	add	r0, pc, r0
   114dc:	bl	10c6c <puts@plt>
   114e0:	ldr	r0, [pc, #140]	; 11574 <_start@@Base+0x2e4>
   114e4:	add	r0, pc, r0
   114e8:	bl	10c6c <puts@plt>
   114ec:	ldr	r0, [pc, #132]	; 11578 <_start@@Base+0x2e8>
   114f0:	add	r0, pc, r0
   114f4:	bl	10c6c <puts@plt>
   114f8:	mov	r0, #10
   114fc:	ldr	r4, [sp]
   11500:	ldr	lr, [sp, #4]
   11504:	add	sp, sp, #8
   11508:	b	10cd8 <putchar@plt>
   1150c:	andeq	r0, r0, r0, lsl #11
   11510:	andeq	r0, r0, ip, ror r5
   11514:	andeq	r0, r0, r8, lsr #11
   11518:	andeq	r0, r0, r4, ror #11
   1151c:	andeq	r0, r0, ip, ror #11
   11520:	andeq	r0, r0, r0, lsl #12
   11524:	andeq	r0, r0, r4, asr #12
   11528:	andeq	r0, r0, r0, lsl #13
   1152c:	andeq	r0, r0, r0, asr #13
   11530:	andeq	r0, r0, ip, asr #13
   11534:	andeq	r0, r0, r0, lsl #14
   11538:	andeq	r0, r0, ip, lsr #14
   1153c:	andeq	r0, r0, ip, lsr r7
   11540:	andeq	r0, r0, r8, ror r7
   11544:	andeq	r0, r0, r4, lsl #15
   11548:			; <UNDEFINED> instruction: 0x000007b0
   1154c:	strdeq	r0, [r0], -r4
   11550:	strdeq	r0, [r0], -ip
   11554:	andeq	r0, r0, ip, lsl #16
   11558:	andeq	r0, r0, r8, lsl r8
   1155c:	andeq	r0, r0, r8, lsr #16
   11560:	andeq	r0, r0, r8, asr #16
   11564:	andeq	r0, r0, ip, lsl #17
   11568:	andeq	r0, r0, ip, asr #17
   1156c:	andeq	r0, r0, ip, ror #17
   11570:	andeq	r0, r0, ip, lsr #18
   11574:	andeq	r0, r0, r8, ror #18
   11578:	muleq	r0, ip, r9
   1157c:	strd	r4, [sp, #-16]!
   11580:	mov	r5, r0
   11584:	str	r6, [sp, #8]
   11588:	str	lr, [sp, #12]
   1158c:	sub	sp, sp, #40	; 0x28
   11590:	bl	10c6c <puts@plt>
   11594:	ldr	r4, [pc, #584]	; 117e4 <_start@@Base+0x554>
   11598:	add	r2, sp, #24
   1159c:	add	r1, sp, #28
   115a0:	mov	r0, r5
   115a4:	add	r3, sp, #20
   115a8:	str	r2, [sp]
   115ac:	add	r2, sp, #16
   115b0:	str	r1, [sp, #4]
   115b4:	add	r1, sp, #32
   115b8:	bl	10c3c <coda_recognize_file@plt>
   115bc:	cmp	r0, #0
   115c0:	add	r4, pc, r4
   115c4:	bne	11708 <_start@@Base+0x478>
   115c8:	ldr	r3, [pc, #536]	; 117e8 <_start@@Base+0x558>
   115cc:	ldr	r3, [r4, r3]
   115d0:	ldr	r3, [r3]
   115d4:	cmp	r3, #0
   115d8:	beq	115f4 <_start@@Base+0x364>
   115dc:	ldr	r3, [sp, #20]
   115e0:	cmp	r3, #0
   115e4:	beq	11760 <_start@@Base+0x4d0>
   115e8:	ldr	r3, [sp, #24]
   115ec:	cmp	r3, #0
   115f0:	beq	11760 <_start@@Base+0x4d0>
   115f4:	ldr	r3, [pc, #496]	; 117ec <_start@@Base+0x55c>
   115f8:	ldr	r3, [r4, r3]
   115fc:	ldr	r3, [r3]
   11600:	cmp	r3, #0
   11604:	bne	116bc <_start@@Base+0x42c>
   11608:	add	r6, sp, #12
   1160c:	mov	r0, r5
   11610:	mov	r1, r6
   11614:	bl	10bf4 <coda_open@plt>
   11618:	cmp	r0, #0
   1161c:	bne	1166c <_start@@Base+0x3dc>
   11620:	ldr	r1, [pc, #456]	; 117f0 <_start@@Base+0x560>
   11624:	mov	r3, #0
   11628:	ldr	r2, [pc, #452]	; 117f4 <_start@@Base+0x564>
   1162c:	ldr	r0, [sp, #12]
   11630:	ldr	r1, [r4, r1]
   11634:	add	r2, pc, r2
   11638:	ldr	r1, [r1]
   1163c:	clz	r1, r1
   11640:	lsr	r1, r1, #5
   11644:	bl	10c78 <coda_product_check@plt>
   11648:	cmp	r0, #0
   1164c:	bne	117ac <_start@@Base+0x51c>
   11650:	ldr	r0, [sp, #12]
   11654:	bl	10ce4 <coda_close@plt>
   11658:	cmp	r0, #0
   1165c:	bne	11744 <_start@@Base+0x4b4>
   11660:	mov	r0, #10
   11664:	bl	10cd8 <putchar@plt>
   11668:	b	116a8 <_start@@Base+0x418>
   1166c:	bl	10d08 <coda_get_errno@plt>
   11670:	ldr	r3, [r0]
   11674:	cmn	r3, #21
   11678:	beq	11780 <_start@@Base+0x4f0>
   1167c:	bl	10d08 <coda_get_errno@plt>
   11680:	ldr	r0, [r0]
   11684:	bl	10cf0 <coda_errno_to_string@plt>
   11688:	mov	r1, r0
   1168c:	ldr	r0, [pc, #356]	; 117f8 <_start@@Base+0x568>
   11690:	add	r0, pc, r0
   11694:	bl	10bdc <printf@plt>
   11698:	ldr	r3, [pc, #348]	; 117fc <_start@@Base+0x56c>
   1169c:	mov	r2, #1
   116a0:	ldr	r3, [r4, r3]
   116a4:	str	r2, [r3]
   116a8:	add	sp, sp, #40	; 0x28
   116ac:	ldrd	r4, [sp]
   116b0:	ldr	r6, [sp, #8]
   116b4:	add	sp, sp, #12
   116b8:	pop	{pc}		; (ldr pc, [sp], #4)
   116bc:	ldr	r0, [sp, #16]
   116c0:	bl	10c54 <coda_type_get_format_name@plt>
   116c4:	mov	r1, r0
   116c8:	ldr	r0, [pc, #304]	; 11800 <_start@@Base+0x570>
   116cc:	add	r0, pc, r0
   116d0:	bl	10bdc <printf@plt>
   116d4:	ldr	r1, [sp, #20]
   116d8:	cmp	r1, #0
   116dc:	beq	116fc <_start@@Base+0x46c>
   116e0:	ldr	r2, [sp, #24]
   116e4:	cmp	r2, #0
   116e8:	beq	116fc <_start@@Base+0x46c>
   116ec:	ldr	r0, [pc, #272]	; 11804 <_start@@Base+0x574>
   116f0:	ldr	r3, [sp, #28]
   116f4:	add	r0, pc, r0
   116f8:	bl	10bdc <printf@plt>
   116fc:	mov	r0, #10
   11700:	bl	10cd8 <putchar@plt>
   11704:	b	11608 <_start@@Base+0x378>
   11708:	bl	10d08 <coda_get_errno@plt>
   1170c:	ldr	r0, [r0]
   11710:	bl	10cf0 <coda_errno_to_string@plt>
   11714:	mov	r1, r0
   11718:	ldr	r0, [pc, #232]	; 11808 <_start@@Base+0x578>
   1171c:	add	r0, pc, r0
   11720:	bl	10bdc <printf@plt>
   11724:	mov	r1, #0
   11728:	mov	r0, r1
   1172c:	bl	10be8 <coda_set_error@plt>
   11730:	ldr	r3, [pc, #196]	; 117fc <_start@@Base+0x56c>
   11734:	mov	r2, #1
   11738:	ldr	r3, [r4, r3]
   1173c:	str	r2, [r3]
   11740:	b	116a8 <_start@@Base+0x418>
   11744:	bl	10d08 <coda_get_errno@plt>
   11748:	ldr	r0, [r0]
   1174c:	bl	10cf0 <coda_errno_to_string@plt>
   11750:	mov	r1, r0
   11754:	ldr	r0, [pc, #176]	; 1180c <_start@@Base+0x57c>
   11758:	add	r0, pc, r0
   1175c:	b	11694 <_start@@Base+0x404>
   11760:	ldr	r0, [pc, #168]	; 11810 <_start@@Base+0x580>
   11764:	add	r0, pc, r0
   11768:	bl	10c6c <puts@plt>
   1176c:	ldr	r3, [pc, #136]	; 117fc <_start@@Base+0x56c>
   11770:	mov	r2, #1
   11774:	ldr	r3, [r4, r3]
   11778:	str	r2, [r3]
   1177c:	b	116a8 <_start@@Base+0x418>
   11780:	mov	r0, #0
   11784:	bl	10c0c <coda_set_option_use_mmap@plt>
   11788:	mov	r1, r6
   1178c:	mov	r0, r5
   11790:	bl	10bf4 <coda_open@plt>
   11794:	mov	r5, r0
   11798:	mov	r0, #1
   1179c:	bl	10c0c <coda_set_option_use_mmap@plt>
   117a0:	cmp	r5, #0
   117a4:	bne	1167c <_start@@Base+0x3ec>
   117a8:	b	11620 <_start@@Base+0x390>
   117ac:	bl	10d08 <coda_get_errno@plt>
   117b0:	ldr	r0, [r0]
   117b4:	bl	10cf0 <coda_errno_to_string@plt>
   117b8:	mov	r1, r0
   117bc:	ldr	r0, [pc, #80]	; 11814 <_start@@Base+0x584>
   117c0:	add	r0, pc, r0
   117c4:	bl	10bdc <printf@plt>
   117c8:	ldr	r3, [pc, #44]	; 117fc <_start@@Base+0x56c>
   117cc:	mov	r2, #1
   117d0:	ldr	r0, [sp, #12]
   117d4:	ldr	r3, [r4, r3]
   117d8:	str	r2, [r3]
   117dc:	bl	10ce4 <coda_close@plt>
   117e0:	b	116a8 <_start@@Base+0x418>
   117e4:	andeq	r1, r1, r8, lsr sl
   117e8:	andeq	r0, r0, ip, lsl #1
   117ec:	muleq	r0, r4, r0
   117f0:	andeq	r0, r0, r4, lsr #1
   117f4:	ldrdeq	r0, [r0], -ip
   117f8:	andeq	r0, r0, ip, lsr r8
   117fc:	muleq	r0, r0, r0
   11800:	andeq	r0, r0, ip, lsr r8
   11804:	andeq	r0, r0, ip, lsr #16
   11808:			; <UNDEFINED> instruction: 0x000007b0
   1180c:	ldrdeq	r0, [r0], -r4
   11810:	andeq	r0, r0, r8, ror r7
   11814:	andeq	r0, r0, ip, lsl #14
   11818:	strd	r4, [sp, #-16]!
   1181c:	mov	r5, r0
   11820:	ldr	r0, [pc, #96]	; 11888 <_start@@Base+0x5f8>
   11824:	str	r6, [sp, #8]
   11828:	ldr	r4, [pc, #92]	; 1188c <_start@@Base+0x5fc>
   1182c:	str	lr, [sp, #12]
   11830:	add	r0, pc, r0
   11834:	bl	10bdc <printf@plt>
   11838:	cmp	r5, #0
   1183c:	add	r4, pc, r4
   11840:	beq	11860 <_start@@Base+0x5d0>
   11844:	ldr	r0, [pc, #68]	; 11890 <_start@@Base+0x600>
   11848:	add	r0, pc, r0
   1184c:	bl	10bdc <printf@plt>
   11850:	ldr	r3, [pc, #60]	; 11894 <_start@@Base+0x604>
   11854:	mov	r0, r5
   11858:	ldr	r1, [r4, r3]
   1185c:	bl	10c18 <coda_cursor_print_path@plt>
   11860:	mov	r0, #10
   11864:	bl	10cd8 <putchar@plt>
   11868:	ldr	r3, [pc, #40]	; 11898 <_start@@Base+0x608>
   1186c:	mov	r2, #1
   11870:	ldr	r6, [sp, #8]
   11874:	ldr	r3, [r4, r3]
   11878:	ldrd	r4, [sp]
   1187c:	add	sp, sp, #12
   11880:	str	r2, [r3]
   11884:	pop	{pc}		; (ldr pc, [sp], #4)
   11888:	andeq	r0, r0, ip, lsl #14
   1188c:			; <UNDEFINED> instruction: 0x000117bc
   11890:	andeq	r0, r0, r0, lsl #14
   11894:	andeq	r0, r0, r8, lsl #1
   11898:	muleq	r0, r0, r0

0001189c <__libc_csu_init@@Base>:
   1189c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   118a0:	mov	r7, r0
   118a4:	ldr	r6, [pc, #72]	; 118f4 <__libc_csu_init@@Base+0x58>
   118a8:	ldr	r5, [pc, #72]	; 118f8 <__libc_csu_init@@Base+0x5c>
   118ac:	add	r6, pc, r6
   118b0:	add	r5, pc, r5
   118b4:	sub	r6, r6, r5
   118b8:	mov	r8, r1
   118bc:	mov	r9, r2
   118c0:	bl	10ba4 <coda_set_option_perform_boundary_checks@plt-0x20>
   118c4:	asrs	r6, r6, #2
   118c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   118cc:	mov	r4, #0
   118d0:	add	r4, r4, #1
   118d4:	ldr	r3, [r5], #4
   118d8:	mov	r2, r9
   118dc:	mov	r1, r8
   118e0:	mov	r0, r7
   118e4:	blx	r3
   118e8:	cmp	r6, r4
   118ec:	bne	118d0 <__libc_csu_init@@Base+0x34>
   118f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118f4:	andeq	r1, r1, r8, asr #12
   118f8:	andeq	r1, r1, r0, asr #12

000118fc <__libc_csu_fini@@Base>:
   118fc:	bx	lr

Disassembly of section .fini:

00011900 <.fini>:
   11900:	push	{r3, lr}
   11904:	pop	{r3, pc}
