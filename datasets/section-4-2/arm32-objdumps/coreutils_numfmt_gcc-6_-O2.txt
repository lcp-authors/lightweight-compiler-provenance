
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00010e18 <.init>:
   10e18:	push	{r3, lr}
   10e1c:	bl	11dfc <__assert_fail@plt+0xd00>
   10e20:	pop	{r3, pc}

Disassembly of section .plt:

00010e24 <calloc@plt-0x14>:
   10e24:	push	{lr}		; (str lr, [sp, #-4]!)
   10e28:	ldr	lr, [pc, #4]	; 10e34 <calloc@plt-0x4>
   10e2c:	add	lr, pc, lr
   10e30:	ldr	pc, [lr, #8]!
   10e34:	andeq	fp, r1, ip, asr #3

00010e38 <calloc@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #110592	; 0x1b000
   10e40:	ldr	pc, [ip, #460]!	; 0x1cc

00010e44 <fputs_unlocked@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #110592	; 0x1b000
   10e4c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e50 <raise@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #110592	; 0x1b000
   10e58:	ldr	pc, [ip, #444]!	; 0x1bc

00010e5c <__strncat_chk@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #110592	; 0x1b000
   10e64:	ldr	pc, [ip, #436]!	; 0x1b4

00010e68 <strcmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #110592	; 0x1b000
   10e70:	ldr	pc, [ip, #428]!	; 0x1ac

00010e74 <strtol@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #110592	; 0x1b000
   10e7c:	ldr	pc, [ip, #420]!	; 0x1a4

00010e80 <fflush@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #110592	; 0x1b000
   10e88:	ldr	pc, [ip, #412]!	; 0x19c

00010e8c <wcwidth@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #110592	; 0x1b000
   10e94:	ldr	pc, [ip, #404]!	; 0x194

00010e98 <memmove@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #110592	; 0x1b000
   10ea0:	ldr	pc, [ip, #396]!	; 0x18c

00010ea4 <free@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #110592	; 0x1b000
   10eac:	ldr	pc, [ip, #388]!	; 0x184

00010eb0 <_exit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #110592	; 0x1b000
   10eb8:	ldr	pc, [ip, #380]!	; 0x17c

00010ebc <memcpy@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #110592	; 0x1b000
   10ec4:	ldr	pc, [ip, #372]!	; 0x174

00010ec8 <__strtoull_internal@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #110592	; 0x1b000
   10ed0:	ldr	pc, [ip, #364]!	; 0x16c

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #110592	; 0x1b000
   10edc:	ldr	pc, [ip, #356]!	; 0x164

00010ee0 <memcmp@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #110592	; 0x1b000
   10ee8:	ldr	pc, [ip, #348]!	; 0x15c

00010eec <fputc_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #110592	; 0x1b000
   10ef4:	ldr	pc, [ip, #340]!	; 0x154

00010ef8 <dcgettext@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #110592	; 0x1b000
   10f00:	ldr	pc, [ip, #332]!	; 0x14c

00010f04 <realloc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #110592	; 0x1b000
   10f0c:	ldr	pc, [ip, #324]!	; 0x144

00010f10 <textdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #110592	; 0x1b000
   10f18:	ldr	pc, [ip, #316]!	; 0x13c

00010f1c <iswprint@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #110592	; 0x1b000
   10f24:	ldr	pc, [ip, #308]!	; 0x134

00010f28 <fwrite@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #110592	; 0x1b000
   10f30:	ldr	pc, [ip, #300]!	; 0x12c

00010f34 <lseek64@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #110592	; 0x1b000
   10f3c:	ldr	pc, [ip, #292]!	; 0x124

00010f40 <__ctype_get_mb_cur_max@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #110592	; 0x1b000
   10f48:	ldr	pc, [ip, #284]!	; 0x11c

00010f4c <strcpy@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #110592	; 0x1b000
   10f54:	ldr	pc, [ip, #276]!	; 0x114

00010f58 <__fpending@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #110592	; 0x1b000
   10f60:	ldr	pc, [ip, #268]!	; 0x10c

00010f64 <mbrtowc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #110592	; 0x1b000
   10f6c:	ldr	pc, [ip, #260]!	; 0x104

00010f70 <wcstombs@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #110592	; 0x1b000
   10f78:	ldr	pc, [ip, #252]!	; 0xfc

00010f7c <error@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #110592	; 0x1b000
   10f84:	ldr	pc, [ip, #244]!	; 0xf4

00010f88 <malloc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #110592	; 0x1b000
   10f90:	ldr	pc, [ip, #236]!	; 0xec

00010f94 <__libc_start_main@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #110592	; 0x1b000
   10f9c:	ldr	pc, [ip, #228]!	; 0xe4

00010fa0 <__freading@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #220]!	; 0xdc

00010fac <__gmon_start__@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #212]!	; 0xd4

00010fb8 <mempcpy@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #204]!	; 0xcc

00010fc4 <getopt_long@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #196]!	; 0xc4

00010fd0 <__ctype_b_loc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #188]!	; 0xbc

00010fdc <exit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #180]!	; 0xb4

00010fe8 <strlen@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #172]!	; 0xac

00010ff4 <strchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #164]!	; 0xa4

00011000 <__errno_location@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #156]!	; 0x9c

0001100c <__cxa_atexit@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #148]!	; 0x94

00011018 <memset@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #140]!	; 0x8c

00011024 <__printf_chk@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #132]!	; 0x84

00011030 <fileno@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #124]!	; 0x7c

0001103c <__fprintf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #116]!	; 0x74

00011048 <fclose@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #108]!	; 0x6c

00011054 <fseeko64@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #100]!	; 0x64

00011060 <__overflow@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #92]!	; 0x5c

0001106c <setlocale@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #84]!	; 0x54

00011078 <wcswidth@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #76]!	; 0x4c

00011084 <strrchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #68]!	; 0x44

00011090 <nl_langinfo@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #60]!	; 0x3c

0001109c <mbstowcs@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #52]!	; 0x34

000110a8 <qsort@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #44]!	; 0x2c

000110b4 <bindtextdomain@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #36]!	; 0x24

000110c0 <getdelim@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #28]!

000110cc <strncmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #20]!

000110d8 <abort@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #12]!

000110e4 <__snprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #4]!

000110f0 <strspn@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #4092]!	; 0xffc

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

00011108 <.text>:
   11108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1110c:	mov	fp, r0
   11110:	sub	sp, sp, #52	; 0x34
   11114:	ldr	r0, [r1]
   11118:	mov	r6, r1
   1111c:	bl	14d14 <__assert_fail@plt+0x3c18>
   11120:	ldr	r1, [pc, #2984]	; 11cd0 <__assert_fail@plt+0xbd4>
   11124:	mov	r0, #6
   11128:	bl	1106c <setlocale@plt>
   1112c:	ldr	r1, [pc, #2976]	; 11cd4 <__assert_fail@plt+0xbd8>
   11130:	ldr	r5, [pc, #2976]	; 11cd8 <__assert_fail@plt+0xbdc>
   11134:	str	r0, [sp, #28]
   11138:	ldr	r0, [pc, #2972]	; 11cdc <__assert_fail@plt+0xbe0>
   1113c:	bl	110b4 <bindtextdomain@plt>
   11140:	ldr	r0, [pc, #2964]	; 11cdc <__assert_fail@plt+0xbe0>
   11144:	bl	10f10 <textdomain@plt>
   11148:	mov	r0, #65536	; 0x10000
   1114c:	bl	11090 <nl_langinfo@plt>
   11150:	cmp	r0, #0
   11154:	str	r0, [r5, #4]
   11158:	beq	11214 <__assert_fail@plt+0x118>
   1115c:	ldrb	r3, [r0]
   11160:	cmp	r3, #0
   11164:	beq	11214 <__assert_fail@plt+0x118>
   11168:	ldr	r0, [r5, #4]
   1116c:	bl	10fe8 <strlen@plt>
   11170:	ldr	r3, [pc, #2920]	; 11ce0 <__assert_fail@plt+0xbe4>
   11174:	ldr	r8, [pc, #2920]	; 11ce4 <__assert_fail@plt+0xbe8>
   11178:	ldr	r9, [pc, #2920]	; 11ce8 <__assert_fail@plt+0xbec>
   1117c:	ldr	sl, [pc, #2920]	; 11cec <__assert_fail@plt+0xbf0>
   11180:	add	r7, r3, #180	; 0xb4
   11184:	str	r0, [r5]
   11188:	ldr	r0, [pc, #2912]	; 11cf0 <__assert_fail@plt+0xbf4>
   1118c:	bl	1916c <__assert_fail@plt+0x8070>
   11190:	mov	r4, #0
   11194:	str	r4, [sp]
   11198:	mov	r3, r7
   1119c:	mov	r2, r8
   111a0:	mov	r1, r6
   111a4:	mov	r0, fp
   111a8:	bl	10fc4 <getopt_long@plt>
   111ac:	cmn	r0, #1
   111b0:	beq	11540 <__assert_fail@plt+0x444>
   111b4:	cmp	r0, #260	; 0x104
   111b8:	beq	114ec <__assert_fail@plt+0x3f0>
   111bc:	ble	11220 <__assert_fail@plt+0x124>
   111c0:	ldr	r3, [pc, #2860]	; 11cf4 <__assert_fail@plt+0xbf8>
   111c4:	cmp	r0, r3
   111c8:	beq	114e0 <__assert_fail@plt+0x3e4>
   111cc:	bgt	11268 <__assert_fail@plt+0x16c>
   111d0:	sub	r3, r3, #3
   111d4:	cmp	r0, r3
   111d8:	beq	114d4 <__assert_fail@plt+0x3d8>
   111dc:	blt	114c8 <__assert_fail@plt+0x3cc>
   111e0:	add	r3, r3, #1
   111e4:	cmp	r0, r3
   111e8:	beq	11360 <__assert_fail@plt+0x264>
   111ec:	cmp	r0, #264	; 0x108
   111f0:	bne	112e4 <__assert_fail@plt+0x1e8>
   111f4:	ldr	r3, [pc, #2812]	; 11cf8 <__assert_fail@plt+0xbfc>
   111f8:	ldr	r3, [r3]
   111fc:	cmp	r3, #0
   11200:	bne	11c3c <__assert_fail@plt+0xb40>
   11204:	mov	r1, #1
   11208:	ldr	r0, [r9]
   1120c:	bl	13dc0 <__assert_fail@plt+0x2cc4>
   11210:	b	11190 <__assert_fail@plt+0x94>
   11214:	ldr	r3, [pc, #2784]	; 11cfc <__assert_fail@plt+0xc00>
   11218:	str	r3, [r5, #4]
   1121c:	b	11168 <__assert_fail@plt+0x6c>
   11220:	cmp	r0, #122	; 0x7a
   11224:	beq	114a0 <__assert_fail@plt+0x3a4>
   11228:	ble	112cc <__assert_fail@plt+0x1d0>
   1122c:	ldr	r3, [pc, #2764]	; 11d00 <__assert_fail@plt+0xc04>
   11230:	cmp	r0, r3
   11234:	beq	114ac <__assert_fail@plt+0x3b0>
   11238:	ble	113e0 <__assert_fail@plt+0x2e4>
   1123c:	ldr	r3, [pc, #2752]	; 11d04 <__assert_fail@plt+0xc08>
   11240:	cmp	r0, r3
   11244:	beq	112ec <__assert_fail@plt+0x1f0>
   11248:	add	r3, r3, #1
   1124c:	cmp	r0, r3
   11250:	bne	112e4 <__assert_fail@plt+0x1e8>
   11254:	ldr	r0, [r9]
   11258:	bl	12004 <__assert_fail@plt+0xf08>
   1125c:	ldr	r3, [pc, #2724]	; 11d08 <__assert_fail@plt+0xc0c>
   11260:	strd	r0, [r3, #16]
   11264:	b	11190 <__assert_fail@plt+0x94>
   11268:	ldr	r3, [pc, #2716]	; 11d0c <__assert_fail@plt+0xc10>
   1126c:	cmp	r0, r3
   11270:	beq	11438 <__assert_fail@plt+0x33c>
   11274:	blt	11428 <__assert_fail@plt+0x32c>
   11278:	cmp	r0, #268	; 0x10c
   1127c:	beq	11354 <__assert_fail@plt+0x258>
   11280:	add	r3, r3, #2
   11284:	cmp	r0, r3
   11288:	bne	112e4 <__assert_fail@plt+0x1e8>
   1128c:	ldr	r2, [sl]
   11290:	ldr	r3, [pc, #2680]	; 11d10 <__assert_fail@plt+0xc14>
   11294:	mov	r0, #1
   11298:	mov	r1, #4
   1129c:	str	r2, [sp, #4]
   112a0:	str	r0, [sp, #8]
   112a4:	add	r2, r3, #16
   112a8:	str	r1, [sp]
   112ac:	ldr	r0, [pc, #2656]	; 11d14 <__assert_fail@plt+0xc18>
   112b0:	ldr	r1, [r9]
   112b4:	bl	146d4 <__assert_fail@plt+0x35d8>
   112b8:	ldr	r3, [pc, #2592]	; 11ce0 <__assert_fail@plt+0xbe4>
   112bc:	add	r0, r3, r0, lsl #2
   112c0:	ldr	r3, [r0, #608]	; 0x260
   112c4:	str	r3, [r5, #36]	; 0x24
   112c8:	b	11190 <__assert_fail@plt+0x94>
   112cc:	cmn	r0, #2
   112d0:	beq	114c0 <__assert_fail@plt+0x3c4>
   112d4:	cmp	r0, #100	; 0x64
   112d8:	beq	1132c <__assert_fail@plt+0x230>
   112dc:	cmn	r0, #3
   112e0:	beq	113b0 <__assert_fail@plt+0x2b4>
   112e4:	mov	r0, #1
   112e8:	bl	1375c <__assert_fail@plt+0x2660>
   112ec:	ldr	r2, [sl]
   112f0:	ldr	r3, [pc, #2592]	; 11d18 <__assert_fail@plt+0xc1c>
   112f4:	mov	r0, #1
   112f8:	mov	r1, #4
   112fc:	str	r2, [sp, #4]
   11300:	str	r0, [sp, #8]
   11304:	add	r2, r3, #16
   11308:	str	r1, [sp]
   1130c:	ldr	r0, [pc, #2568]	; 11d1c <__assert_fail@plt+0xc20>
   11310:	ldr	r1, [r9]
   11314:	bl	146d4 <__assert_fail@plt+0x35d8>
   11318:	ldr	r3, [pc, #2496]	; 11ce0 <__assert_fail@plt+0xbe4>
   1131c:	add	r0, r3, r0, lsl #2
   11320:	ldr	r3, [r0, #528]	; 0x210
   11324:	str	r3, [r5, #44]	; 0x2c
   11328:	b	11190 <__assert_fail@plt+0x94>
   1132c:	ldr	r2, [r9]
   11330:	ldrb	r3, [r2]
   11334:	cmp	r3, #0
   11338:	beq	11348 <__assert_fail@plt+0x24c>
   1133c:	ldrb	r2, [r2, #1]
   11340:	cmp	r2, #0
   11344:	bne	11b80 <__assert_fail@plt+0xa84>
   11348:	ldr	r2, [pc, #2488]	; 11d08 <__assert_fail@plt+0xc0c>
   1134c:	str	r3, [r2, #36]	; 0x24
   11350:	b	11190 <__assert_fail@plt+0x94>
   11354:	ldr	r3, [r9]
   11358:	str	r3, [r5, #72]	; 0x48
   1135c:	b	11190 <__assert_fail@plt+0x94>
   11360:	ldr	r3, [pc, #2408]	; 11cd0 <__assert_fail@plt+0xbd4>
   11364:	mov	r1, r4
   11368:	str	r3, [sp]
   1136c:	mov	r2, #10
   11370:	ldr	r3, [pc, #2472]	; 11d20 <__assert_fail@plt+0xc24>
   11374:	ldr	r0, [r9]
   11378:	bl	1774c <__assert_fail@plt+0x6650>
   1137c:	cmp	r0, #0
   11380:	bne	11c18 <__assert_fail@plt+0xb1c>
   11384:	ldr	r3, [r5, #28]
   11388:	bics	r2, r3, #-2147483648	; 0x80000000
   1138c:	beq	11c18 <__assert_fail@plt+0xb1c>
   11390:	cmp	r3, #0
   11394:	bge	11190 <__assert_fail@plt+0x94>
   11398:	rsb	r3, r3, #0
   1139c:	str	r3, [r5, #28]
   113a0:	ldr	r3, [pc, #2400]	; 11d08 <__assert_fail@plt+0xc0c>
   113a4:	mov	r2, #0
   113a8:	str	r2, [r3, #32]
   113ac:	b	11190 <__assert_fail@plt+0x94>
   113b0:	ldr	r1, [pc, #2412]	; 11d24 <__assert_fail@plt+0xc28>
   113b4:	ldr	r3, [pc, #2412]	; 11d28 <__assert_fail@plt+0xc2c>
   113b8:	ldr	r2, [pc, #2412]	; 11d2c <__assert_fail@plt+0xc30>
   113bc:	str	r4, [sp, #4]
   113c0:	ldr	r0, [r1]
   113c4:	ldr	r3, [r3]
   113c8:	ldr	r1, [pc, #2400]	; 11d30 <__assert_fail@plt+0xc34>
   113cc:	str	r2, [sp]
   113d0:	ldr	r2, [pc, #2396]	; 11d34 <__assert_fail@plt+0xc38>
   113d4:	bl	17010 <__assert_fail@plt+0x5f14>
   113d8:	mov	r0, r4
   113dc:	bl	10fdc <exit@plt>
   113e0:	cmp	r0, #256	; 0x100
   113e4:	bne	112e4 <__assert_fail@plt+0x1e8>
   113e8:	ldr	r2, [sl]
   113ec:	ldr	r3, [pc, #2372]	; 11d38 <__assert_fail@plt+0xc3c>
   113f0:	mov	r0, #1
   113f4:	mov	r1, #4
   113f8:	str	r2, [sp, #4]
   113fc:	str	r0, [sp, #8]
   11400:	add	r2, r3, #20
   11404:	str	r1, [sp]
   11408:	ldr	r0, [pc, #2348]	; 11d3c <__assert_fail@plt+0xc40>
   1140c:	ldr	r1, [r9]
   11410:	bl	146d4 <__assert_fail@plt+0x35d8>
   11414:	ldr	r3, [pc, #2244]	; 11ce0 <__assert_fail@plt+0xbe4>
   11418:	add	r0, r3, r0, lsl #2
   1141c:	ldr	r3, [r0, #484]	; 0x1e4
   11420:	str	r3, [r5, #32]
   11424:	b	11190 <__assert_fail@plt+0x94>
   11428:	mov	r3, #1
   1142c:	strb	r3, [r5, #20]
   11430:	strb	r3, [r5, #40]	; 0x28
   11434:	b	11190 <__assert_fail@plt+0x94>
   11438:	ldr	r0, [r9]
   1143c:	cmp	r0, #0
   11440:	beq	11530 <__assert_fail@plt+0x434>
   11444:	ldr	r3, [pc, #2180]	; 11cd0 <__assert_fail@plt+0xbd4>
   11448:	mov	r1, r4
   1144c:	str	r3, [sp]
   11450:	mov	r2, #10
   11454:	ldr	r3, [pc, #2276]	; 11d40 <__assert_fail@plt+0xc44>
   11458:	bl	17cbc <__assert_fail@plt+0x6bc0>
   1145c:	cmp	r0, #0
   11460:	bne	11470 <__assert_fail@plt+0x374>
   11464:	ldrd	r2, [r5, #64]	; 0x40
   11468:	orrs	r3, r2, r3
   1146c:	bne	11190 <__assert_fail@plt+0x94>
   11470:	ldr	r1, [pc, #2252]	; 11d44 <__assert_fail@plt+0xc48>
   11474:	mov	r2, #5
   11478:	mov	r0, #0
   1147c:	bl	10ef8 <dcgettext@plt>
   11480:	mov	r4, r0
   11484:	ldr	r0, [r9]
   11488:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   1148c:	mov	r2, r4
   11490:	mov	r1, #0
   11494:	mov	r3, r0
   11498:	mov	r0, #1
   1149c:	bl	10f7c <error@plt>
   114a0:	ldr	r3, [pc, #2144]	; 11d08 <__assert_fail@plt+0xc0c>
   114a4:	strb	r4, [r3, #40]	; 0x28
   114a8:	b	11190 <__assert_fail@plt+0x94>
   114ac:	ldr	r0, [r9]
   114b0:	bl	12004 <__assert_fail@plt+0xf08>
   114b4:	ldr	r3, [pc, #2124]	; 11d08 <__assert_fail@plt+0xc0c>
   114b8:	strd	r0, [r3, #8]
   114bc:	b	11190 <__assert_fail@plt+0x94>
   114c0:	mov	r0, r4
   114c4:	bl	1375c <__assert_fail@plt+0x2660>
   114c8:	ldr	r3, [r9]
   114cc:	str	r3, [r5, #16]
   114d0:	b	11190 <__assert_fail@plt+0x94>
   114d4:	mov	r3, #1
   114d8:	str	r3, [r5, #48]	; 0x30
   114dc:	b	11190 <__assert_fail@plt+0x94>
   114e0:	mov	r3, #1
   114e4:	strb	r3, [r5, #40]	; 0x28
   114e8:	b	11190 <__assert_fail@plt+0x94>
   114ec:	ldr	r2, [sl]
   114f0:	ldr	r3, [pc, #2128]	; 11d48 <__assert_fail@plt+0xc4c>
   114f4:	mov	r0, #1
   114f8:	mov	r1, #4
   114fc:	str	r2, [sp, #4]
   11500:	str	r0, [sp, #8]
   11504:	add	r2, r3, #20
   11508:	str	r1, [sp]
   1150c:	ldr	r0, [pc, #2104]	; 11d4c <__assert_fail@plt+0xc50>
   11510:	ldr	r1, [r9]
   11514:	bl	146d4 <__assert_fail@plt+0x35d8>
   11518:	ldr	r3, [pc, #1984]	; 11ce0 <__assert_fail@plt+0xbe4>
   1151c:	ldr	r2, [pc, #2020]	; 11d08 <__assert_fail@plt+0xc0c>
   11520:	add	r0, r3, r0, lsl #2
   11524:	ldr	r3, [r0, #564]	; 0x234
   11528:	str	r3, [r2, #28]
   1152c:	b	11190 <__assert_fail@plt+0x94>
   11530:	mov	r2, #1
   11534:	mov	r3, #0
   11538:	strd	r2, [r5, #64]	; 0x40
   1153c:	b	11190 <__assert_fail@plt+0x94>
   11540:	ldr	r3, [r5, #72]	; 0x48
   11544:	cmp	r3, #0
   11548:	beq	11560 <__assert_fail@plt+0x464>
   1154c:	ldr	r3, [r5, #48]	; 0x30
   11550:	cmp	r3, #0
   11554:	movne	r2, #5
   11558:	ldrne	r1, [pc, #2032]	; 11d50 <__assert_fail@plt+0xc54>
   1155c:	bne	11b88 <__assert_fail@plt+0xa8c>
   11560:	ldrb	r3, [r5, #40]	; 0x28
   11564:	ldr	r2, [sp, #28]
   11568:	cmp	r2, #0
   1156c:	movne	r3, #0
   11570:	andeq	r3, r3, #1
   11574:	cmp	r3, #0
   11578:	bne	11c94 <__assert_fail@plt+0xb98>
   1157c:	ldrb	r3, [r5, #40]	; 0x28
   11580:	cmp	r3, #0
   11584:	beq	115e4 <__assert_fail@plt+0x4e8>
   11588:	ldr	r3, [r5, #32]
   1158c:	cmp	r3, #0
   11590:	bne	115e4 <__assert_fail@plt+0x4e8>
   11594:	ldr	r3, [r5, #44]	; 0x2c
   11598:	cmp	r3, #0
   1159c:	bne	115e4 <__assert_fail@plt+0x4e8>
   115a0:	ldr	r3, [r5, #48]	; 0x30
   115a4:	cmp	r3, #0
   115a8:	bne	11c48 <__assert_fail@plt+0xb4c>
   115ac:	ldr	r3, [r5, #28]
   115b0:	ldr	r4, [r5, #72]	; 0x48
   115b4:	cmp	r3, #0
   115b8:	bne	11c88 <__assert_fail@plt+0xb8c>
   115bc:	cmp	r4, #0
   115c0:	bne	115f0 <__assert_fail@plt+0x4f4>
   115c4:	mov	r2, #5
   115c8:	ldr	r1, [pc, #1924]	; 11d54 <__assert_fail@plt+0xc58>
   115cc:	mov	r0, r4
   115d0:	bl	10ef8 <dcgettext@plt>
   115d4:	mov	r1, r4
   115d8:	mov	r2, r0
   115dc:	mov	r0, r4
   115e0:	bl	10f7c <error@plt>
   115e4:	ldr	r4, [r5, #72]	; 0x48
   115e8:	cmp	r4, #0
   115ec:	beq	11718 <__assert_fail@plt+0x61c>
   115f0:	mov	r3, #0
   115f4:	mov	r2, #1
   115f8:	str	r3, [sp, #44]	; 0x2c
   115fc:	mov	r0, r2
   11600:	mov	lr, #2
   11604:	b	1161c <__assert_fail@plt+0x520>
   11608:	cmp	r8, #0
   1160c:	beq	11cb8 <__assert_fail@plt+0xbbc>
   11610:	mov	r1, r0
   11614:	add	r3, r3, r1
   11618:	add	r2, r2, #1
   1161c:	ldrb	r8, [r4, r3]
   11620:	sub	r7, r2, #1
   11624:	cmp	r8, #37	; 0x25
   11628:	bne	11608 <__assert_fail@plt+0x50c>
   1162c:	add	r1, r3, #1
   11630:	ldrb	ip, [r4, r1]
   11634:	cmp	ip, #37	; 0x25
   11638:	bne	117f0 <__assert_fail@plt+0x6f4>
   1163c:	mov	r1, lr
   11640:	b	11614 <__assert_fail@plt+0x518>
   11644:	cmp	r7, #0
   11648:	beq	11ad4 <__assert_fail@plt+0x9d8>
   1164c:	mov	r1, r7
   11650:	mov	r0, r4
   11654:	bl	175fc <__assert_fail@plt+0x6500>
   11658:	ldrb	r3, [r8]
   1165c:	cmp	r3, #0
   11660:	str	r0, [r5, #60]	; 0x3c
   11664:	bne	11ad4 <__assert_fail@plt+0x9d8>
   11668:	ldrb	r3, [r5, #20]
   1166c:	cmp	r3, #0
   11670:	beq	11718 <__assert_fail@plt+0x61c>
   11674:	ldr	r3, [pc, #1756]	; 11d58 <__assert_fail@plt+0xc5c>
   11678:	mov	r1, r4
   1167c:	mov	r0, #0
   11680:	ldr	sl, [r3]
   11684:	bl	16bc4 <__assert_fail@plt+0x5ac8>
   11688:	ldr	r8, [pc, #1656]	; 11d08 <__assert_fail@plt+0xc0c>
   1168c:	ldr	r1, [r5, #60]	; 0x3c
   11690:	ldr	r9, [pc, #1592]	; 11cd0 <__assert_fail@plt+0xbd4>
   11694:	cmp	r1, #0
   11698:	ldr	r3, [pc, #1724]	; 11d5c <__assert_fail@plt+0xc60>
   1169c:	ldr	r2, [r5, #48]	; 0x30
   116a0:	moveq	r1, r9
   116a4:	ldr	r7, [pc, #1716]	; 11d60 <__assert_fail@plt+0xc64>
   116a8:	ldr	r4, [pc, #1716]	; 11d64 <__assert_fail@plt+0xc68>
   116ac:	str	r0, [sp, #28]
   116b0:	ldr	r0, [r8, #32]
   116b4:	ldr	r8, [r5, #28]
   116b8:	cmp	r0, #0
   116bc:	moveq	r7, r3
   116c0:	ldr	r3, [pc, #1696]	; 11d68 <__assert_fail@plt+0xc6c>
   116c4:	cmp	r2, #0
   116c8:	mov	r0, #1
   116cc:	movne	r4, r3
   116d0:	bl	16bc4 <__assert_fail@plt+0x5ac8>
   116d4:	ldr	r1, [r5, #56]	; 0x38
   116d8:	cmp	r1, #0
   116dc:	moveq	r1, r9
   116e0:	str	r0, [sp, #32]
   116e4:	mov	r0, #2
   116e8:	bl	16bc4 <__assert_fail@plt+0x5ac8>
   116ec:	ldr	r3, [sp, #32]
   116f0:	str	r7, [sp, #8]
   116f4:	str	r3, [sp, #12]
   116f8:	str	r4, [sp]
   116fc:	str	r8, [sp, #4]
   11700:	ldr	r3, [sp, #28]
   11704:	ldr	r2, [pc, #1632]	; 11d6c <__assert_fail@plt+0xc70>
   11708:	mov	r1, #1
   1170c:	str	r0, [sp, #16]
   11710:	mov	r0, sl
   11714:	bl	1103c <__fprintf_chk@plt>
   11718:	ldr	r3, [r5, #48]	; 0x30
   1171c:	cmp	r3, #0
   11720:	bne	11984 <__assert_fail@plt+0x888>
   11724:	ldr	r0, [r5, #28]
   11728:	ldr	r3, [r5, #8]
   1172c:	cmp	r0, r3
   11730:	bcs	11acc <__assert_fail@plt+0x9d0>
   11734:	ldr	r3, [r5, #28]
   11738:	ldr	r2, [r5, #36]	; 0x24
   1173c:	cmp	r3, #0
   11740:	movne	r3, #0
   11744:	ldreq	r8, [pc, #1468]	; 11d08 <__assert_fail@plt+0xc0c>
   11748:	ldr	r7, [pc, #1568]	; 11d70 <__assert_fail@plt+0xc74>
   1174c:	ldreq	r3, [r8, #36]	; 0x24
   11750:	subeq	r3, r3, #256	; 0x100
   11754:	clzeq	r3, r3
   11758:	lsreq	r3, r3, #5
   1175c:	cmp	r2, #0
   11760:	str	r3, [r5, #24]
   11764:	ldrne	r8, [pc, #1436]	; 11d08 <__assert_fail@plt+0xc0c>
   11768:	movne	r3, #0
   1176c:	strne	r3, [r8]
   11770:	ldr	r3, [r7]
   11774:	cmp	fp, r3
   11778:	ble	119dc <__assert_fail@plt+0x8e0>
   1177c:	ldrb	r3, [r5, #40]	; 0x28
   11780:	cmp	r3, #0
   11784:	beq	11794 <__assert_fail@plt+0x698>
   11788:	ldrd	r2, [r5, #64]	; 0x40
   1178c:	orrs	r3, r2, r3
   11790:	bne	11c58 <__assert_fail@plt+0xb5c>
   11794:	mov	r4, #1
   11798:	mov	r8, r4
   1179c:	b	117bc <__assert_fail@plt+0x6c0>
   117a0:	ldr	r0, [r6, r3, lsl #2]
   117a4:	mov	r1, r8
   117a8:	bl	1358c <__assert_fail@plt+0x2490>
   117ac:	ldr	r3, [r7]
   117b0:	add	r3, r3, #1
   117b4:	str	r3, [r7]
   117b8:	and	r4, r4, r0
   117bc:	ldr	r3, [r7]
   117c0:	cmp	fp, r3
   117c4:	bgt	117a0 <__assert_fail@plt+0x6a4>
   117c8:	ldrb	r3, [r5, #40]	; 0x28
   117cc:	cmp	r4, #0
   117d0:	movne	r3, #0
   117d4:	andeq	r3, r3, #1
   117d8:	cmp	r3, #0
   117dc:	bne	11ba0 <__assert_fail@plt+0xaa4>
   117e0:	cmp	r4, #0
   117e4:	beq	11bc0 <__assert_fail@plt+0xac4>
   117e8:	mov	r0, #0
   117ec:	bl	10fdc <exit@plt>
   117f0:	add	r3, r4, r1
   117f4:	ldr	r9, [pc, #1400]	; 11d74 <__assert_fail@plt+0xc78>
   117f8:	mov	sl, r1
   117fc:	mov	r0, r3
   11800:	mov	r2, #0
   11804:	str	r2, [sp, #28]
   11808:	mov	r1, r9
   1180c:	bl	110f0 <strspn@plt>
   11810:	add	sl, sl, r0
   11814:	mov	r8, r0
   11818:	ldrb	r2, [r4, sl]
   1181c:	add	r0, r4, sl
   11820:	cmp	r2, #39	; 0x27
   11824:	beq	1195c <__assert_fail@plt+0x860>
   11828:	cmp	r2, #48	; 0x30
   1182c:	beq	11970 <__assert_fail@plt+0x874>
   11830:	cmp	r8, #0
   11834:	bne	11808 <__assert_fail@plt+0x70c>
   11838:	str	r0, [sp, #36]	; 0x24
   1183c:	bl	11000 <__errno_location@plt>
   11840:	ldr	r3, [sp, #36]	; 0x24
   11844:	add	r9, sp, #44	; 0x2c
   11848:	mov	r1, r9
   1184c:	mov	r2, #10
   11850:	str	r0, [sp, #32]
   11854:	str	r8, [r0]
   11858:	mov	r0, r3
   1185c:	bl	10e74 <strtol@plt>
   11860:	ldr	r3, [sp, #32]
   11864:	ldr	r2, [r3]
   11868:	cmp	r0, #-2147483648	; 0x80000000
   1186c:	cmpne	r2, #34	; 0x22
   11870:	moveq	r3, #1
   11874:	movne	r3, #0
   11878:	mov	sl, r0
   1187c:	moveq	r2, #5
   11880:	mov	r0, r3
   11884:	ldreq	r1, [pc, #1260]	; 11d78 <__assert_fail@plt+0xc7c>
   11888:	ldr	r3, [sp, #36]	; 0x24
   1188c:	beq	11b58 <__assert_fail@plt+0xa5c>
   11890:	ldr	r2, [sp, #44]	; 0x2c
   11894:	cmp	r2, r3
   11898:	cmpne	sl, #0
   1189c:	beq	118d4 <__assert_fail@plt+0x7d8>
   118a0:	ldrb	r3, [r5, #40]	; 0x28
   118a4:	cmp	r3, #0
   118a8:	beq	11bfc <__assert_fail@plt+0xb00>
   118ac:	ldr	r3, [r5, #28]
   118b0:	cmp	r3, #0
   118b4:	beq	11bfc <__assert_fail@plt+0xb00>
   118b8:	ldr	r3, [sp, #28]
   118bc:	eor	r3, r3, #1
   118c0:	cmp	sl, #0
   118c4:	orrle	r3, r3, #1
   118c8:	cmp	r3, #0
   118cc:	bne	11bd8 <__assert_fail@plt+0xadc>
   118d0:	str	sl, [r5, #52]	; 0x34
   118d4:	ldrb	r8, [r2]
   118d8:	sub	r3, r2, r4
   118dc:	cmp	r8, #0
   118e0:	moveq	r2, #5
   118e4:	ldreq	r1, [pc, #1168]	; 11d7c <__assert_fail@plt+0xc80>
   118e8:	beq	11b58 <__assert_fail@plt+0xa5c>
   118ec:	cmp	r8, #46	; 0x2e
   118f0:	beq	11ae4 <__assert_fail@plt+0x9e8>
   118f4:	ldrb	r2, [r4, r3]
   118f8:	cmp	r2, #102	; 0x66
   118fc:	movne	r2, #5
   11900:	ldrne	r1, [pc, #1144]	; 11d80 <__assert_fail@plt+0xc84>
   11904:	bne	11b58 <__assert_fail@plt+0xa5c>
   11908:	add	r3, r3, #1
   1190c:	add	r8, r4, r3
   11910:	ldrb	r2, [r4, r3]
   11914:	cmp	r2, #0
   11918:	beq	11c7c <__assert_fail@plt+0xb80>
   1191c:	mov	r1, #1
   11920:	mov	r0, #2
   11924:	b	11938 <__assert_fail@plt+0x83c>
   11928:	add	r3, r3, r2
   1192c:	ldrb	r2, [r4, r3]
   11930:	cmp	r2, #0
   11934:	beq	11644 <__assert_fail@plt+0x548>
   11938:	cmp	r2, #37	; 0x25
   1193c:	movne	r2, r1
   11940:	bne	11928 <__assert_fail@plt+0x82c>
   11944:	add	r2, r4, r3
   11948:	ldrb	r2, [r2, #1]
   1194c:	cmp	r2, #37	; 0x25
   11950:	bne	11cc4 <__assert_fail@plt+0xbc8>
   11954:	mov	r2, r0
   11958:	b	11928 <__assert_fail@plt+0x82c>
   1195c:	add	sl, sl, #1
   11960:	mov	r3, #1
   11964:	str	r3, [r5, #48]	; 0x30
   11968:	add	r0, r4, sl
   1196c:	b	11808 <__assert_fail@plt+0x70c>
   11970:	add	sl, sl, #1
   11974:	mov	r3, #1
   11978:	add	r0, r4, sl
   1197c:	str	r3, [sp, #28]
   11980:	b	11808 <__assert_fail@plt+0x70c>
   11984:	ldr	r3, [r5, #44]	; 0x2c
   11988:	cmp	r3, #0
   1198c:	movne	r2, #5
   11990:	ldrne	r1, [pc, #1004]	; 11d84 <__assert_fail@plt+0xc88>
   11994:	bne	11b88 <__assert_fail@plt+0xa8c>
   11998:	ldrb	r3, [r5, #40]	; 0x28
   1199c:	cmp	r3, #0
   119a0:	beq	11724 <__assert_fail@plt+0x628>
   119a4:	ldr	r0, [pc, #988]	; 11d88 <__assert_fail@plt+0xc8c>
   119a8:	bl	11090 <nl_langinfo@plt>
   119ac:	ldrb	r4, [r0]
   119b0:	cmp	r4, #0
   119b4:	bne	11724 <__assert_fail@plt+0x628>
   119b8:	mov	r2, #5
   119bc:	ldr	r1, [pc, #968]	; 11d8c <__assert_fail@plt+0xc90>
   119c0:	mov	r0, r4
   119c4:	bl	10ef8 <dcgettext@plt>
   119c8:	mov	r1, r4
   119cc:	mov	r2, r0
   119d0:	mov	r0, r4
   119d4:	bl	10f7c <error@plt>
   119d8:	b	11724 <__assert_fail@plt+0x628>
   119dc:	add	r9, sp, #48	; 0x30
   119e0:	mov	r3, #0
   119e4:	str	r3, [r9, #-4]!
   119e8:	str	r3, [sp, #40]	; 0x28
   119ec:	ldr	r8, [pc, #788]	; 11d08 <__assert_fail@plt+0xc0c>
   119f0:	ldr	r6, [pc, #920]	; 11d90 <__assert_fail@plt+0xc94>
   119f4:	ldr	r4, [pc, #808]	; 11d24 <__assert_fail@plt+0xc28>
   119f8:	b	11a24 <__assert_fail@plt+0x928>
   119fc:	ldr	r3, [r6]
   11a00:	ldrb	r2, [r8, #40]	; 0x28
   11a04:	mov	r1, r9
   11a08:	add	r0, sp, #40	; 0x28
   11a0c:	bl	110c0 <getdelim@plt>
   11a10:	cmp	r0, #0
   11a14:	ble	11a3c <__assert_fail@plt+0x940>
   11a18:	ldr	r1, [r4]
   11a1c:	ldr	r0, [sp, #40]	; 0x28
   11a20:	bl	10e44 <fputs_unlocked@plt>
   11a24:	ldrd	r2, [r5, #64]	; 0x40
   11a28:	subs	r0, r2, #1
   11a2c:	sbc	r1, r3, #0
   11a30:	orrs	r3, r2, r3
   11a34:	strd	r0, [r5, #64]	; 0x40
   11a38:	bne	119fc <__assert_fail@plt+0x900>
   11a3c:	mov	r4, #1
   11a40:	mov	r7, #0
   11a44:	b	11a74 <__assert_fail@plt+0x978>
   11a48:	ldr	r3, [sp, #40]	; 0x28
   11a4c:	sub	r0, r0, #1
   11a50:	ldrb	r2, [r8, #40]	; 0x28
   11a54:	ldrb	r1, [r3, r0]
   11a58:	cmp	r1, r2
   11a5c:	strbeq	r7, [r3, r0]
   11a60:	moveq	r1, #1
   11a64:	movne	r1, #0
   11a68:	ldr	r0, [sp, #40]	; 0x28
   11a6c:	bl	1358c <__assert_fail@plt+0x2490>
   11a70:	and	r4, r4, r0
   11a74:	ldr	r3, [r6]
   11a78:	ldrb	r2, [r8, #40]	; 0x28
   11a7c:	mov	r1, r9
   11a80:	add	r0, sp, #40	; 0x28
   11a84:	bl	110c0 <getdelim@plt>
   11a88:	cmp	r0, #0
   11a8c:	bgt	11a48 <__assert_fail@plt+0x94c>
   11a90:	ldr	r3, [r6]
   11a94:	ldr	r3, [r3]
   11a98:	tst	r3, #32
   11a9c:	beq	117c8 <__assert_fail@plt+0x6cc>
   11aa0:	bl	11000 <__errno_location@plt>
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #740]	; 11d94 <__assert_fail@plt+0xc98>
   11aac:	ldr	r6, [r0]
   11ab0:	mov	r0, #0
   11ab4:	bl	10ef8 <dcgettext@plt>
   11ab8:	mov	r1, r6
   11abc:	mov	r2, r0
   11ac0:	mov	r0, #0
   11ac4:	bl	10f7c <error@plt>
   11ac8:	b	117c8 <__assert_fail@plt+0x6cc>
   11acc:	bl	12168 <__assert_fail@plt+0x106c>
   11ad0:	b	11734 <__assert_fail@plt+0x638>
   11ad4:	mov	r0, r8
   11ad8:	bl	17638 <__assert_fail@plt+0x653c>
   11adc:	str	r0, [r5, #56]	; 0x38
   11ae0:	b	11668 <__assert_fail@plt+0x56c>
   11ae4:	ldr	r8, [sp, #32]
   11ae8:	add	sl, r3, #1
   11aec:	mov	r3, #0
   11af0:	str	r3, [r8]
   11af4:	mov	r1, r9
   11af8:	add	r0, r4, sl
   11afc:	mov	r2, #10
   11b00:	bl	10e74 <strtol@plt>
   11b04:	ldr	r3, [r8]
   11b08:	ldr	r8, [pc, #504]	; 11d08 <__assert_fail@plt+0xc0c>
   11b0c:	sub	r3, r3, #34	; 0x22
   11b10:	clz	r3, r3
   11b14:	lsr	r3, r3, #5
   11b18:	orrs	r3, r3, r0, lsr #31
   11b1c:	str	r0, [r8, #24]
   11b20:	bne	11b50 <__assert_fail@plt+0xa54>
   11b24:	bl	10fd0 <__ctype_b_loc@plt>
   11b28:	ldrb	r2, [r4, sl]
   11b2c:	lsl	r3, r2, #1
   11b30:	ldr	r1, [r0]
   11b34:	ldrh	r3, [r1, r3]
   11b38:	cmp	r2, #43	; 0x2b
   11b3c:	orreq	r3, r3, #1
   11b40:	tst	r3, #1
   11b44:	ldreq	r3, [sp, #44]	; 0x2c
   11b48:	subeq	r3, r3, r4
   11b4c:	beq	118f4 <__assert_fail@plt+0x7f8>
   11b50:	ldr	r1, [pc, #576]	; 11d98 <__assert_fail@plt+0xc9c>
   11b54:	mov	r2, #5
   11b58:	mov	r0, #0
   11b5c:	bl	10ef8 <dcgettext@plt>
   11b60:	mov	r5, r0
   11b64:	mov	r0, r4
   11b68:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   11b6c:	mov	r2, r5
   11b70:	mov	r1, #0
   11b74:	mov	r3, r0
   11b78:	mov	r0, #1
   11b7c:	bl	10f7c <error@plt>
   11b80:	ldr	r1, [pc, #532]	; 11d9c <__assert_fail@plt+0xca0>
   11b84:	mov	r2, #5
   11b88:	mov	r0, #0
   11b8c:	bl	10ef8 <dcgettext@plt>
   11b90:	mov	r1, #0
   11b94:	mov	r2, r0
   11b98:	mov	r0, #1
   11b9c:	bl	10f7c <error@plt>
   11ba0:	mov	r2, #5
   11ba4:	ldr	r1, [pc, #500]	; 11da0 <__assert_fail@plt+0xca4>
   11ba8:	mov	r0, #0
   11bac:	bl	10ef8 <dcgettext@plt>
   11bb0:	mov	r1, #0
   11bb4:	mov	r2, r0
   11bb8:	mov	r0, r1
   11bbc:	bl	10f7c <error@plt>
   11bc0:	ldr	r3, [r5, #36]	; 0x24
   11bc4:	sub	r3, r3, #2
   11bc8:	cmp	r3, #1
   11bcc:	bls	117e8 <__assert_fail@plt+0x6ec>
   11bd0:	mov	r0, #2
   11bd4:	b	117ec <__assert_fail@plt+0x6f0>
   11bd8:	mov	r2, #5
   11bdc:	ldr	r1, [pc, #448]	; 11da4 <__assert_fail@plt+0xca8>
   11be0:	mov	r8, r0
   11be4:	bl	10ef8 <dcgettext@plt>
   11be8:	mov	r1, r8
   11bec:	mov	r2, r0
   11bf0:	mov	r0, r8
   11bf4:	bl	10f7c <error@plt>
   11bf8:	ldr	r2, [sp, #44]	; 0x2c
   11bfc:	cmp	sl, #0
   11c00:	blt	11c24 <__assert_fail@plt+0xb28>
   11c04:	ldr	r3, [sp, #28]
   11c08:	cmp	r3, #0
   11c0c:	streq	sl, [r5, #28]
   11c10:	beq	118d4 <__assert_fail@plt+0x7d8>
   11c14:	b	118d0 <__assert_fail@plt+0x7d4>
   11c18:	mov	r2, #5
   11c1c:	ldr	r1, [pc, #388]	; 11da8 <__assert_fail@plt+0xcac>
   11c20:	b	11478 <__assert_fail@plt+0x37c>
   11c24:	ldr	r8, [pc, #220]	; 11d08 <__assert_fail@plt+0xc0c>
   11c28:	rsb	sl, sl, #0
   11c2c:	mov	r3, #0
   11c30:	str	sl, [r5, #28]
   11c34:	str	r3, [r8, #32]
   11c38:	b	118d4 <__assert_fail@plt+0x7d8>
   11c3c:	mov	r2, #5
   11c40:	ldr	r1, [pc, #356]	; 11dac <__assert_fail@plt+0xcb0>
   11c44:	b	11b88 <__assert_fail@plt+0xa8c>
   11c48:	ldr	r4, [r5, #72]	; 0x48
   11c4c:	cmp	r4, #0
   11c50:	bne	115f0 <__assert_fail@plt+0x4f4>
   11c54:	b	11998 <__assert_fail@plt+0x89c>
   11c58:	mov	r2, #5
   11c5c:	ldr	r1, [pc, #332]	; 11db0 <__assert_fail@plt+0xcb4>
   11c60:	mov	r0, #0
   11c64:	bl	10ef8 <dcgettext@plt>
   11c68:	mov	r1, #0
   11c6c:	mov	r2, r0
   11c70:	mov	r0, r1
   11c74:	bl	10f7c <error@plt>
   11c78:	b	11794 <__assert_fail@plt+0x698>
   11c7c:	cmp	r7, #0
   11c80:	beq	11668 <__assert_fail@plt+0x56c>
   11c84:	b	1164c <__assert_fail@plt+0x550>
   11c88:	cmp	r4, #0
   11c8c:	bne	115f0 <__assert_fail@plt+0x4f4>
   11c90:	b	11724 <__assert_fail@plt+0x628>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #276]	; 11db4 <__assert_fail@plt+0xcb8>
   11c9c:	mov	r0, #0
   11ca0:	bl	10ef8 <dcgettext@plt>
   11ca4:	mov	r1, #0
   11ca8:	mov	r2, r0
   11cac:	mov	r0, r1
   11cb0:	bl	10f7c <error@plt>
   11cb4:	b	1157c <__assert_fail@plt+0x480>
   11cb8:	mov	r2, #5
   11cbc:	ldr	r1, [pc, #244]	; 11db8 <__assert_fail@plt+0xcbc>
   11cc0:	b	11b58 <__assert_fail@plt+0xa5c>
   11cc4:	mov	r2, #5
   11cc8:	ldr	r1, [pc, #236]	; 11dbc <__assert_fail@plt+0xcc0>
   11ccc:	b	11b58 <__assert_fail@plt+0xa5c>
   11cd0:	ldrdeq	sl, [r1], -r0
   11cd4:			; <UNDEFINED> instruction: 0x0001aabc
   11cd8:	andeq	ip, r2, r8, lsr #3
   11cdc:	strdeq	sl, [r1], -ip
   11ce0:	muleq	r1, r0, r1
   11ce4:	ldrdeq	sl, [r1], -r8
   11ce8:	andeq	ip, r2, r0, lsr #3
   11cec:	andeq	ip, r2, r8, lsr r1
   11cf0:	andeq	r4, r1, ip, asr #15
   11cf4:	andeq	r0, r0, r9, lsl #2
   11cf8:	strdeq	ip, [r2], -r4
   11cfc:	ldrdeq	sl, [r1], -r4
   11d00:	andeq	r0, r0, r1, lsl #2
   11d04:	andeq	r0, r0, r2, lsl #2
   11d08:	andeq	ip, r2, r8, lsl #2
   11d0c:	andeq	r0, r0, fp, lsl #2
   11d10:	strdeq	r9, [r1], -r0
   11d14:	andeq	sl, r1, r4, ror fp
   11d18:	andeq	r9, r1, r0, lsr #7
   11d1c:	andeq	sl, r1, r4, ror #21
   11d20:	andeq	ip, r2, r4, asr #3
   11d24:	muleq	r2, ip, r1
   11d28:	andeq	ip, r2, r4, lsr r1
   11d2c:	andeq	sl, r1, r0, lsl #23
   11d30:	andeq	r9, r1, r4, ror #17
   11d34:	strdeq	sl, [r1], -r8
   11d38:	andeq	r9, r1, r4, ror r3
   11d3c:	ldrdeq	sl, [r1], -ip
   11d40:	andeq	ip, r2, r8, ror #3
   11d44:	andeq	sl, r1, ip, asr fp
   11d48:	andeq	r9, r1, r4, asr #7
   11d4c:	andeq	sl, r1, ip, ror #21
   11d50:	muleq	r1, r0, fp
   11d54:	ldrdeq	sl, [r1], -r4
   11d58:	muleq	r2, r0, r1
   11d5c:	andeq	sl, r1, ip, lsr #21
   11d60:			; <UNDEFINED> instruction: 0x0001aab4
   11d64:	andeq	sl, r1, r8, lsr #21
   11d68:	andeq	sl, r1, r4, lsr #21
   11d6c:	andeq	sl, r1, r0, lsl #26
   11d70:	andeq	ip, r2, r8, lsl #3
   11d74:	andeq	sl, r1, r4, lsl ip
   11d78:	andeq	sl, r1, r8, lsl ip
   11d7c:	andeq	sl, r1, r4, ror #24
   11d80:	muleq	r1, ip, ip
   11d84:	andeq	sl, r1, ip, ror #26
   11d88:	andeq	r0, r1, r1
   11d8c:	muleq	r1, r4, sp
   11d90:	muleq	r2, r8, r1
   11d94:	andeq	sl, r1, r8, ror #27
   11d98:	andeq	sl, r1, ip, ror ip
   11d9c:	andeq	sl, r1, r0, lsr fp
   11da0:	strdeq	sl, [r1], -ip
   11da4:	andeq	sl, r1, ip, lsr ip
   11da8:	strdeq	sl, [r1], -r4
   11dac:	andeq	sl, r1, r0, lsl fp
   11db0:			; <UNDEFINED> instruction: 0x0001adbc
   11db4:			; <UNDEFINED> instruction: 0x0001abbc
   11db8:	strdeq	sl, [r1], -r4
   11dbc:	ldrdeq	sl, [r1], -r8
   11dc0:	mov	fp, #0
   11dc4:	mov	lr, #0
   11dc8:	pop	{r1}		; (ldr r1, [sp], #4)
   11dcc:	mov	r2, sp
   11dd0:	push	{r2}		; (str r2, [sp, #-4]!)
   11dd4:	push	{r0}		; (str r0, [sp, #-4]!)
   11dd8:	ldr	ip, [pc, #16]	; 11df0 <__assert_fail@plt+0xcf4>
   11ddc:	push	{ip}		; (str ip, [sp, #-4]!)
   11de0:	ldr	r0, [pc, #12]	; 11df4 <__assert_fail@plt+0xcf8>
   11de4:	ldr	r3, [pc, #12]	; 11df8 <__assert_fail@plt+0xcfc>
   11de8:	bl	10f94 <__libc_start_main@plt>
   11dec:	bl	110d8 <abort@plt>
   11df0:	andeq	r9, r1, r8, ror #2
   11df4:	andeq	r1, r1, r8, lsl #2
   11df8:	andeq	r9, r1, r8, lsl #2
   11dfc:	ldr	r3, [pc, #20]	; 11e18 <__assert_fail@plt+0xd1c>
   11e00:	ldr	r2, [pc, #20]	; 11e1c <__assert_fail@plt+0xd20>
   11e04:	add	r3, pc, r3
   11e08:	ldr	r2, [r3, r2]
   11e0c:	cmp	r2, #0
   11e10:	bxeq	lr
   11e14:	b	10fac <__gmon_start__@plt>
   11e18:	strdeq	sl, [r1], -r4
   11e1c:	strdeq	r0, [r0], -ip
   11e20:	ldr	r3, [pc, #28]	; 11e44 <__assert_fail@plt+0xd48>
   11e24:	ldr	r0, [pc, #28]	; 11e48 <__assert_fail@plt+0xd4c>
   11e28:	sub	r3, r3, r0
   11e2c:	cmp	r3, #6
   11e30:	bxls	lr
   11e34:	ldr	r3, [pc, #16]	; 11e4c <__assert_fail@plt+0xd50>
   11e38:	cmp	r3, #0
   11e3c:	bxeq	lr
   11e40:	bx	r3
   11e44:	andeq	ip, r2, r3, lsl #3
   11e48:	andeq	ip, r2, r0, lsl #3
   11e4c:	andeq	r0, r0, r0
   11e50:	ldr	r1, [pc, #36]	; 11e7c <__assert_fail@plt+0xd80>
   11e54:	ldr	r0, [pc, #36]	; 11e80 <__assert_fail@plt+0xd84>
   11e58:	sub	r1, r1, r0
   11e5c:	asr	r1, r1, #2
   11e60:	add	r1, r1, r1, lsr #31
   11e64:	asrs	r1, r1, #1
   11e68:	bxeq	lr
   11e6c:	ldr	r3, [pc, #16]	; 11e84 <__assert_fail@plt+0xd88>
   11e70:	cmp	r3, #0
   11e74:	bxeq	lr
   11e78:	bx	r3
   11e7c:	andeq	ip, r2, r0, lsl #3
   11e80:	andeq	ip, r2, r0, lsl #3
   11e84:	andeq	r0, r0, r0
   11e88:	push	{r4, lr}
   11e8c:	ldr	r4, [pc, #24]	; 11eac <__assert_fail@plt+0xdb0>
   11e90:	ldrb	r3, [r4]
   11e94:	cmp	r3, #0
   11e98:	popne	{r4, pc}
   11e9c:	bl	11e20 <__assert_fail@plt+0xd24>
   11ea0:	mov	r3, #1
   11ea4:	strb	r3, [r4]
   11ea8:	pop	{r4, pc}
   11eac:	andeq	ip, r2, r4, lsr #3
   11eb0:	ldr	r0, [pc, #40]	; 11ee0 <__assert_fail@plt+0xde4>
   11eb4:	ldr	r3, [r0]
   11eb8:	cmp	r3, #0
   11ebc:	bne	11ec4 <__assert_fail@plt+0xdc8>
   11ec0:	b	11e50 <__assert_fail@plt+0xd54>
   11ec4:	ldr	r3, [pc, #24]	; 11ee4 <__assert_fail@plt+0xde8>
   11ec8:	cmp	r3, #0
   11ecc:	beq	11ec0 <__assert_fail@plt+0xdc4>
   11ed0:	push	{r4, lr}
   11ed4:	blx	r3
   11ed8:	pop	{r4, lr}
   11edc:	b	11e50 <__assert_fail@plt+0xd54>
   11ee0:	andeq	fp, r2, r4, lsl pc
   11ee4:	andeq	r0, r0, r0
   11ee8:	push	{r4, r5, r6, r7, lr}
   11eec:	vpush	{d8}
   11ef0:	vldr	d6, [pc, #248]	; 11ff0 <__assert_fail@plt+0xef4>
   11ef4:	vldr	d8, [pc, #252]	; 11ff8 <__assert_fail@plt+0xefc>
   11ef8:	mov	r4, r2
   11efc:	ldrb	ip, [r0]
   11f00:	sub	sp, sp, #12
   11f04:	mov	r6, #1
   11f08:	cmp	ip, #45	; 0x2d
   11f0c:	mov	ip, #0
   11f10:	moveq	r2, #1
   11f14:	mov	lr, ip
   11f18:	mov	r5, ip
   11f1c:	addeq	r0, r0, r2
   11f20:	movne	r2, #0
   11f24:	strb	r2, [r3]
   11f28:	str	r0, [r1]
   11f2c:	mov	r7, r0
   11f30:	ldrb	r2, [r0], #1
   11f34:	sub	r2, r2, #48	; 0x30
   11f38:	cmp	r2, #9
   11f3c:	bhi	11fa4 <__assert_fail@plt+0xea8>
   11f40:	vcmp.f64	d8, #0.0
   11f44:	vmrs	APSR_nzcv, fpscr
   11f48:	movne	ip, #1
   11f4c:	moveq	ip, #0
   11f50:	cmp	r2, #0
   11f54:	orrne	ip, ip, #1
   11f58:	cmp	ip, #0
   11f5c:	addne	lr, lr, #1
   11f60:	cmp	lr, #15
   11f64:	mov	ip, r6
   11f68:	bls	11f8c <__assert_fail@plt+0xe90>
   11f6c:	cmp	lr, #27
   11f70:	bls	11f88 <__assert_fail@plt+0xe8c>
   11f74:	mov	r5, #2
   11f78:	mov	r0, r5
   11f7c:	add	sp, sp, #12
   11f80:	vpop	{d8}
   11f84:	pop	{r4, r5, r6, r7, pc}
   11f88:	mov	r5, r6
   11f8c:	vmov	s15, r2
   11f90:	str	r0, [r1]
   11f94:	vcvt.f64.s32	d7, s15
   11f98:	vmla.f64	d7, d8, d6
   11f9c:	vmov.f64	d8, d7
   11fa0:	b	11f2c <__assert_fail@plt+0xe30>
   11fa4:	cmp	ip, #0
   11fa8:	beq	11fc4 <__assert_fail@plt+0xec8>
   11fac:	ldrb	r3, [r3]
   11fb0:	cmp	r3, #0
   11fb4:	vnegne.f64	d8, d8
   11fb8:	cmp	r4, #0
   11fbc:	vstrne	d8, [r4]
   11fc0:	b	11f78 <__assert_fail@plt+0xe7c>
   11fc4:	ldr	r1, [pc, #52]	; 12000 <__assert_fail@plt+0xf04>
   11fc8:	mov	r0, r7
   11fcc:	str	r3, [sp, #4]
   11fd0:	ldr	r2, [r1]
   11fd4:	ldr	r1, [r1, #4]
   11fd8:	bl	110cc <strncmp@plt>
   11fdc:	ldr	r3, [sp, #4]
   11fe0:	cmp	r0, #0
   11fe4:	movne	r5, #3
   11fe8:	bne	11f78 <__assert_fail@plt+0xe7c>
   11fec:	b	11fac <__assert_fail@plt+0xeb0>
   11ff0:	andeq	r0, r0, r0
   11ff4:	eormi	r0, r4, r0
	...
   12000:	andeq	ip, r2, r8, lsr #3
   12004:	push	{r4, r5, r6, r7, r8, r9, lr}
   12008:	sub	sp, sp, #28
   1200c:	mov	r6, r0
   12010:	bl	10fe8 <strlen@plt>
   12014:	mov	r7, #0
   12018:	str	r7, [sp, #12]
   1201c:	subs	r4, r0, #0
   12020:	beq	12098 <__assert_fail@plt+0xf9c>
   12024:	sub	r8, r4, #1
   12028:	ldrb	r3, [r6, r8]
   1202c:	sub	r3, r3, #48	; 0x30
   12030:	cmp	r3, #9
   12034:	bls	120f0 <__assert_fail@plt+0xff4>
   12038:	add	r0, r4, #2
   1203c:	bl	1710c <__assert_fail@plt+0x6010>
   12040:	mov	r2, r4
   12044:	mov	r1, r6
   12048:	mov	r5, r0
   1204c:	add	r9, r0, r8
   12050:	str	r9, [sp, #12]
   12054:	bl	10ebc <memcpy@plt>
   12058:	ldrb	r3, [r5, r8]
   1205c:	cmp	r4, #1
   12060:	sub	r3, r3, #105	; 0x69
   12064:	clz	r3, r3
   12068:	lsr	r3, r3, #5
   1206c:	movls	r3, #0
   12070:	cmp	r3, #0
   12074:	beq	12100 <__assert_fail@plt+0x1004>
   12078:	ldrb	r3, [r9, #-1]
   1207c:	sub	r3, r3, #48	; 0x30
   12080:	cmp	r3, #9
   12084:	bls	12100 <__assert_fail@plt+0x1004>
   12088:	strb	r7, [r9]
   1208c:	mov	r0, r5
   12090:	ldr	r3, [pc, #196]	; 1215c <__assert_fail@plt+0x1060>
   12094:	b	120a4 <__assert_fail@plt+0xfa8>
   12098:	ldr	r3, [pc, #188]	; 1215c <__assert_fail@plt+0x1060>
   1209c:	mov	r5, r4
   120a0:	mov	r0, r6
   120a4:	str	r3, [sp]
   120a8:	mov	r2, #10
   120ac:	add	r3, sp, #16
   120b0:	add	r1, sp, #12
   120b4:	bl	17cbc <__assert_fail@plt+0x6bc0>
   120b8:	cmp	r0, #0
   120bc:	bne	12124 <__assert_fail@plt+0x1028>
   120c0:	ldr	r3, [sp, #12]
   120c4:	ldrb	r3, [r3]
   120c8:	cmp	r3, #0
   120cc:	bne	12124 <__assert_fail@plt+0x1028>
   120d0:	ldrd	r2, [sp, #16]
   120d4:	orrs	r3, r2, r3
   120d8:	beq	12124 <__assert_fail@plt+0x1028>
   120dc:	mov	r0, r5
   120e0:	bl	148b0 <__assert_fail@plt+0x37b4>
   120e4:	ldrd	r0, [sp, #16]
   120e8:	add	sp, sp, #28
   120ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   120f0:	ldr	r3, [pc, #100]	; 1215c <__assert_fail@plt+0x1060>
   120f4:	mov	r5, r7
   120f8:	mov	r0, r6
   120fc:	b	120a4 <__assert_fail@plt+0xfa8>
   12100:	mov	r3, #0
   12104:	mov	r1, #66	; 0x42
   12108:	add	r2, r9, #2
   1210c:	strb	r3, [r9, #2]
   12110:	strb	r1, [r9, #1]
   12114:	str	r2, [sp, #12]
   12118:	mov	r0, r5
   1211c:	ldr	r3, [pc, #60]	; 12160 <__assert_fail@plt+0x1064>
   12120:	b	120a4 <__assert_fail@plt+0xfa8>
   12124:	mov	r0, r5
   12128:	bl	148b0 <__assert_fail@plt+0x37b4>
   1212c:	mov	r2, #5
   12130:	ldr	r1, [pc, #44]	; 12164 <__assert_fail@plt+0x1068>
   12134:	mov	r0, #0
   12138:	bl	10ef8 <dcgettext@plt>
   1213c:	mov	r4, r0
   12140:	mov	r0, r6
   12144:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   12148:	mov	r2, r4
   1214c:	mov	r1, #0
   12150:	mov	r3, r0
   12154:	mov	r0, #1
   12158:	bl	10f7c <error@plt>
   1215c:	andeq	r9, r1, r4, lsl r4
   12160:	andeq	r9, r1, r0, lsr #8
   12164:	andeq	r9, r1, ip, lsr #8
   12168:	push	{r4, lr}
   1216c:	add	r3, r0, #1
   12170:	ldr	r4, [pc, #20]	; 1218c <__assert_fail@plt+0x1090>
   12174:	mov	r1, r3
   12178:	ldr	r0, [r4, #12]
   1217c:	str	r3, [r4, #8]
   12180:	bl	17148 <__assert_fail@plt+0x604c>
   12184:	str	r0, [r4, #12]
   12188:	pop	{r4, pc}
   1218c:	andeq	ip, r2, r8, lsr #3
   12190:	ldr	r1, [pc, #2072]	; 129b0 <__assert_fail@plt+0x18b4>
   12194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12198:	vpush	{d8-d11}
   1219c:	ldr	ip, [r1]
   121a0:	mov	r8, r0
   121a4:	cmp	ip, #0
   121a8:	sub	sp, sp, #244	; 0xf4
   121ac:	mov	r6, r2
   121b0:	mov	r7, r3
   121b4:	beq	1221c <__assert_fail@plt+0x1120>
   121b8:	ldrd	r2, [ip]
   121bc:	mvn	r1, #0
   121c0:	mvn	r0, #0
   121c4:	cmp	r3, r1
   121c8:	cmpeq	r2, r0
   121cc:	beq	121fc <__assert_fail@plt+0x1100>
   121d0:	cmp	r7, r3
   121d4:	cmpeq	r6, r2
   121d8:	bcc	121ec <__assert_fail@plt+0x10f0>
   121dc:	ldrd	r2, [ip, #8]
   121e0:	cmp	r7, r3
   121e4:	cmpeq	r6, r2
   121e8:	bls	12228 <__assert_fail@plt+0x112c>
   121ec:	ldrd	r2, [ip, #16]!
   121f0:	cmp	r3, r1
   121f4:	cmpeq	r2, r0
   121f8:	bne	121d0 <__assert_fail@plt+0x10d4>
   121fc:	ldr	r3, [pc, #1968]	; 129b4 <__assert_fail@plt+0x18b8>
   12200:	mov	r0, r8
   12204:	ldr	r1, [r3]
   12208:	bl	10e44 <fputs_unlocked@plt>
   1220c:	mov	r0, #1
   12210:	add	sp, sp, #244	; 0xf4
   12214:	vpop	{d8-d11}
   12218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1221c:	cmp	r3, #0
   12220:	cmpeq	r2, #1
   12224:	bne	121fc <__assert_fail@plt+0x1100>
   12228:	ldr	r4, [pc, #1928]	; 129b8 <__assert_fail@plt+0x18bc>
   1222c:	ldr	r5, [r4, #16]
   12230:	cmp	r5, #0
   12234:	beq	1227c <__assert_fail@plt+0x1180>
   12238:	mov	r0, r8
   1223c:	bl	10fe8 <strlen@plt>
   12240:	mov	r9, r0
   12244:	mov	r0, r5
   12248:	bl	10fe8 <strlen@plt>
   1224c:	cmp	r9, r0
   12250:	bls	1227c <__assert_fail@plt+0x1180>
   12254:	sub	r9, r9, r0
   12258:	add	r1, r8, r9
   1225c:	mov	r0, r5
   12260:	bl	10e68 <strcmp@plt>
   12264:	ldrb	r3, [r4, #20]
   12268:	cmp	r0, #0
   1226c:	bne	124b0 <__assert_fail@plt+0x13b4>
   12270:	cmp	r3, #0
   12274:	strb	r0, [r8, r9]
   12278:	bne	127c4 <__assert_fail@plt+0x16c8>
   1227c:	ldrb	r5, [r8]
   12280:	cmp	r5, #0
   12284:	beq	127fc <__assert_fail@plt+0x1700>
   12288:	bl	10fd0 <__ctype_b_loc@plt>
   1228c:	mov	r9, r8
   12290:	ldr	r2, [r0]
   12294:	b	122a4 <__assert_fail@plt+0x11a8>
   12298:	ldrb	r5, [r9, #1]!
   1229c:	cmp	r5, #0
   122a0:	beq	122b4 <__assert_fail@plt+0x11b8>
   122a4:	lsl	r5, r5, #1
   122a8:	ldrh	r3, [r2, r5]
   122ac:	tst	r3, #1
   122b0:	bne	12298 <__assert_fail@plt+0x119c>
   122b4:	ldr	r3, [r4, #24]
   122b8:	cmp	r3, #0
   122bc:	beq	123cc <__assert_fail@plt+0x12d0>
   122c0:	cmp	r6, #1
   122c4:	cmple	r8, r9
   122c8:	moveq	r6, #0
   122cc:	movne	r6, #1
   122d0:	streq	r6, [r4, #28]
   122d4:	beq	122f0 <__assert_fail@plt+0x11f4>
   122d8:	mov	r0, r8
   122dc:	bl	10fe8 <strlen@plt>
   122e0:	ldr	r2, [r4, #8]
   122e4:	cmp	r0, r2
   122e8:	str	r0, [r4, #28]
   122ec:	bcs	127bc <__assert_fail@plt+0x16c0>
   122f0:	ldrb	r3, [r4, #20]
   122f4:	cmp	r3, #0
   122f8:	bne	123b4 <__assert_fail@plt+0x12b8>
   122fc:	ldr	sl, [r4, #32]
   12300:	mov	r0, #0
   12304:	mov	r1, #0
   12308:	sub	r2, sl, #3
   1230c:	cmp	r2, #1
   12310:	str	r3, [sp, #40]	; 0x28
   12314:	strd	r0, [sp, #48]	; 0x30
   12318:	movhi	fp, #1000	; 0x3e8
   1231c:	bhi	12370 <__assert_fail@plt+0x1274>
   12320:	mov	fp, #1024	; 0x400
   12324:	cmp	r3, #0
   12328:	beq	12370 <__assert_fail@plt+0x1274>
   1232c:	ldr	r3, [pc, #1672]	; 129bc <__assert_fail@plt+0x18c0>
   12330:	mov	r1, r9
   12334:	mov	r0, #0
   12338:	ldr	r5, [r3]
   1233c:	bl	16bc4 <__assert_fail@plt+0x5ac8>
   12340:	ldr	r1, [r4, #4]
   12344:	mov	r6, r0
   12348:	mov	r0, #1
   1234c:	bl	16bc4 <__assert_fail@plt+0x5ac8>
   12350:	mov	r2, #15
   12354:	str	r2, [sp, #4]
   12358:	mov	r3, r6
   1235c:	ldr	r2, [pc, #1628]	; 129c0 <__assert_fail@plt+0x18c4>
   12360:	mov	r1, #1
   12364:	str	r0, [sp]
   12368:	mov	r0, r5
   1236c:	bl	1103c <__fprintf_chk@plt>
   12370:	add	r2, sp, #48	; 0x30
   12374:	add	r3, sp, #38	; 0x26
   12378:	add	r1, sp, #40	; 0x28
   1237c:	mov	r0, r9
   12380:	bl	11ee8 <__assert_fail@plt+0xdec>
   12384:	cmp	r0, #1
   12388:	mov	r6, r0
   1238c:	bls	124e4 <__assert_fail@plt+0x13e8>
   12390:	sub	r3, r6, #2
   12394:	cmp	r3, #4
   12398:	ldrls	pc, [pc, r3, lsl #2]
   1239c:	b	126f4 <__assert_fail@plt+0x15f8>
   123a0:	andeq	r2, r1, r4, lsr #9
   123a4:	strdeq	r2, [r1], -ip
   123a8:	andeq	r2, r1, ip, ror #15
   123ac:	ldrdeq	r2, [r1], -r4
   123b0:	strdeq	r2, [r1], -r4
   123b4:	ldr	r1, [pc, #1536]	; 129bc <__assert_fail@plt+0x18c0>
   123b8:	ldr	r3, [r4, #28]
   123bc:	ldr	r2, [pc, #1536]	; 129c4 <__assert_fail@plt+0x18c8>
   123c0:	ldr	r0, [r1]
   123c4:	mov	r1, #1
   123c8:	bl	1103c <__fprintf_chk@plt>
   123cc:	ldr	sl, [r4, #32]
   123d0:	mov	r0, #0
   123d4:	sub	r2, sl, #3
   123d8:	mov	r1, #0
   123dc:	cmp	r2, #1
   123e0:	mov	r2, #0
   123e4:	ldrb	r3, [r4, #20]
   123e8:	strd	r0, [sp, #48]	; 0x30
   123ec:	str	r2, [sp, #40]	; 0x28
   123f0:	movhi	fp, #1000	; 0x3e8
   123f4:	movls	fp, #1024	; 0x400
   123f8:	b	12324 <__assert_fail@plt+0x1228>
   123fc:	ldr	r1, [pc, #1476]	; 129c8 <__assert_fail@plt+0x18cc>
   12400:	mov	r7, #0
   12404:	ldr	r3, [r4, #36]	; 0x24
   12408:	ldr	r5, [pc, #1468]	; 129cc <__assert_fail@plt+0x18d0>
   1240c:	cmp	r3, #3
   12410:	beq	12444 <__assert_fail@plt+0x1348>
   12414:	mov	r2, #5
   12418:	mov	r0, #0
   1241c:	ldr	sl, [r5]
   12420:	bl	10ef8 <dcgettext@plt>
   12424:	mov	fp, r0
   12428:	mov	r0, r9
   1242c:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   12430:	mov	r2, fp
   12434:	mov	r1, #0
   12438:	mov	r3, r0
   1243c:	mov	r0, sl
   12440:	bl	10f7c <error@plt>
   12444:	ldrd	r0, [r5, #8]
   12448:	ldrd	sl, [r5, #16]
   1244c:	cmp	r1, #0
   12450:	cmpeq	r0, #1
   12454:	beq	12698 <__assert_fail@plt+0x159c>
   12458:	bl	18ea8 <__assert_fail@plt+0x7dac>
   1245c:	vldr	d8, [sp, #48]	; 0x30
   12460:	vmov	d7, r0, r1
   12464:	mov	r0, sl
   12468:	mov	r1, fp
   1246c:	vmul.f64	d8, d7, d8
   12470:	bl	18ea8 <__assert_fail@plt+0x7dac>
   12474:	vmov	d7, r0, r1
   12478:	vdiv.f64	d9, d8, d7
   1247c:	cmp	r6, #1
   12480:	bls	1258c <__assert_fail@plt+0x1490>
   12484:	ldr	r3, [pc, #1320]	; 129b4 <__assert_fail@plt+0x18b8>
   12488:	mov	r0, r8
   1248c:	ldr	r1, [r3]
   12490:	bl	10e44 <fputs_unlocked@plt>
   12494:	mov	r0, #0
   12498:	add	sp, sp, #244	; 0xf4
   1249c:	vpop	{d8-d11}
   124a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a4:	mov	r7, #0
   124a8:	ldr	r1, [pc, #1312]	; 129d0 <__assert_fail@plt+0x18d4>
   124ac:	b	12404 <__assert_fail@plt+0x1308>
   124b0:	cmp	r3, #0
   124b4:	beq	1227c <__assert_fail@plt+0x1180>
   124b8:	ldr	r3, [pc, #1276]	; 129bc <__assert_fail@plt+0x18c0>
   124bc:	mov	r2, #22
   124c0:	mov	r1, #1
   124c4:	ldr	r3, [r3]
   124c8:	ldr	r0, [pc, #1284]	; 129d4 <__assert_fail@plt+0x18d8>
   124cc:	bl	10f28 <fwrite@plt>
   124d0:	b	1227c <__assert_fail@plt+0x1180>
   124d4:	mov	r7, #0
   124d8:	mov	r6, #5
   124dc:	ldr	r1, [pc, #1268]	; 129d8 <__assert_fail@plt+0x18dc>
   124e0:	b	12404 <__assert_fail@plt+0x1308>
   124e4:	ldr	r7, [r4]
   124e8:	ldr	r5, [sp, #40]	; 0x28
   124ec:	mov	r2, r7
   124f0:	mov	r0, r5
   124f4:	ldr	r1, [r4, #4]
   124f8:	bl	110cc <strncmp@plt>
   124fc:	cmp	r0, #0
   12500:	movne	r7, #0
   12504:	beq	126c0 <__assert_fail@plt+0x15c4>
   12508:	ldrb	r3, [r4, #20]
   1250c:	cmp	r3, #0
   12510:	bne	12700 <__assert_fail@plt+0x1604>
   12514:	ldr	r3, [sp, #40]	; 0x28
   12518:	str	r3, [sp, #24]
   1251c:	ldrb	r5, [r3]
   12520:	cmp	r5, #0
   12524:	beq	126ac <__assert_fail@plt+0x15b0>
   12528:	bl	10fd0 <__ctype_b_loc@plt>
   1252c:	ldr	r3, [sp, #24]
   12530:	ldr	r1, [r0]
   12534:	b	12544 <__assert_fail@plt+0x1448>
   12538:	add	r3, r3, #1
   1253c:	str	r3, [sp, #40]	; 0x28
   12540:	ldrb	r5, [r3]
   12544:	lsl	r2, r5, #1
   12548:	ldrh	r2, [r1, r2]
   1254c:	ands	r2, r2, #1
   12550:	bne	12538 <__assert_fail@plt+0x143c>
   12554:	mov	r1, r5
   12558:	ldr	r0, [pc, #1148]	; 129dc <__assert_fail@plt+0x18e0>
   1255c:	str	r2, [sp, #28]
   12560:	str	r3, [sp, #24]
   12564:	bl	10ff4 <strchr@plt>
   12568:	cmp	r0, #0
   1256c:	beq	124d8 <__assert_fail@plt+0x13dc>
   12570:	cmp	sl, #0
   12574:	ldr	r3, [sp, #24]
   12578:	ldr	r2, [sp, #28]
   1257c:	bne	12804 <__assert_fail@plt+0x1708>
   12580:	mov	r6, #4
   12584:	ldr	r1, [pc, #1108]	; 129e0 <__assert_fail@plt+0x18e4>
   12588:	b	12404 <__assert_fail@plt+0x1308>
   1258c:	vldr	d7, [pc, #996]	; 12978 <__assert_fail@plt+0x187c>
   12590:	ldr	r3, [r5, #24]
   12594:	cmn	r3, #1
   12598:	vcmpe.f64	d9, d7
   1259c:	movne	r7, r3
   125a0:	vmrs	APSR_nzcv, fpscr
   125a4:	blt	1263c <__assert_fail@plt+0x1540>
   125a8:	vldr	d7, [pc, #976]	; 12980 <__assert_fail@plt+0x1884>
   125ac:	vcmpe.f64	d9, d7
   125b0:	vmrs	APSR_nzcv, fpscr
   125b4:	bhi	1263c <__assert_fail@plt+0x1540>
   125b8:	vmov.f64	d7, d9
   125bc:	mov	r3, #0
   125c0:	vldr	d4, [pc, #960]	; 12988 <__assert_fail@plt+0x188c>
   125c4:	vldr	d6, [pc, #964]	; 12990 <__assert_fail@plt+0x1894>
   125c8:	b	125d4 <__assert_fail@plt+0x14d8>
   125cc:	vdiv.f64	d7, d7, d6
   125d0:	add	r3, r3, #1
   125d4:	vcmpe.f64	d7, d4
   125d8:	vmrs	APSR_nzcv, fpscr
   125dc:	vnegmi.f64	d5, d7
   125e0:	vmovpl.f64	d5, d7
   125e4:	vcmpe.f64	d5, d6
   125e8:	vmrs	APSR_nzcv, fpscr
   125ec:	bge	125cc <__assert_fail@plt+0x14d0>
   125f0:	ldr	r6, [r4, #44]	; 0x2c
   125f4:	cmp	r6, #0
   125f8:	beq	134a0 <__assert_fail@plt+0x23a4>
   125fc:	cmp	r3, #26
   12600:	bls	128c0 <__assert_fail@plt+0x17c4>
   12604:	ldr	r3, [r4, #36]	; 0x24
   12608:	cmp	r3, #3
   1260c:	beq	12484 <__assert_fail@plt+0x1388>
   12610:	ldr	r1, [pc, #972]	; 129e4 <__assert_fail@plt+0x18e8>
   12614:	mov	r2, #5
   12618:	mov	r0, #0
   1261c:	ldr	r4, [r5]
   12620:	bl	10ef8 <dcgettext@plt>
   12624:	vstr	d9, [sp]
   12628:	mov	r1, #0
   1262c:	mov	r2, r0
   12630:	mov	r0, r4
   12634:	bl	10f7c <error@plt>
   12638:	b	12484 <__assert_fail@plt+0x1388>
   1263c:	ldr	r6, [r4, #44]	; 0x2c
   12640:	cmp	r6, #0
   12644:	bne	128c0 <__assert_fail@plt+0x17c4>
   12648:	cmp	r7, #15
   1264c:	bls	128c0 <__assert_fail@plt+0x17c4>
   12650:	ldr	r3, [r4, #36]	; 0x24
   12654:	cmp	r3, #3
   12658:	beq	12484 <__assert_fail@plt+0x1388>
   1265c:	cmp	r7, #0
   12660:	mov	r2, #5
   12664:	beq	1307c <__assert_fail@plt+0x1f80>
   12668:	ldr	r1, [pc, #888]	; 129e8 <__assert_fail@plt+0x18ec>
   1266c:	mov	r0, #0
   12670:	ldr	r4, [r5]
   12674:	bl	10ef8 <dcgettext@plt>
   12678:	mov	r1, #0
   1267c:	str	r7, [sp, #8]
   12680:	vstr	d9, [sp]
   12684:	str	r1, [sp, #12]
   12688:	mov	r2, r0
   1268c:	mov	r0, r4
   12690:	bl	10f7c <error@plt>
   12694:	b	12484 <__assert_fail@plt+0x1388>
   12698:	cmp	fp, #0
   1269c:	cmpeq	sl, #1
   126a0:	bne	12458 <__assert_fail@plt+0x135c>
   126a4:	vldr	d9, [sp, #48]	; 0x30
   126a8:	b	1247c <__assert_fail@plt+0x1380>
   126ac:	cmp	sl, #4
   126b0:	bne	12724 <__assert_fail@plt+0x1628>
   126b4:	mov	r6, #6
   126b8:	ldr	r1, [pc, #812]	; 129ec <__assert_fail@plt+0x18f0>
   126bc:	b	12404 <__assert_fail@plt+0x1308>
   126c0:	vldr	d7, [pc, #704]	; 12988 <__assert_fail@plt+0x188c>
   126c4:	add	r5, r5, r7
   126c8:	mov	r0, r5
   126cc:	add	r3, sp, #39	; 0x27
   126d0:	add	r2, sp, #112	; 0x70
   126d4:	add	r1, sp, #44	; 0x2c
   126d8:	str	r5, [sp, #40]	; 0x28
   126dc:	vstr	d7, [sp, #112]	; 0x70
   126e0:	bl	11ee8 <__assert_fail@plt+0xdec>
   126e4:	cmp	r0, #1
   126e8:	bls	12c9c <__assert_fail@plt+0x1ba0>
   126ec:	mov	r6, r0
   126f0:	b	12390 <__assert_fail@plt+0x1294>
   126f4:	mov	r7, #0
   126f8:	mov	r1, r7
   126fc:	b	12404 <__assert_fail@plt+0x1308>
   12700:	ldrd	r2, [sp, #48]	; 0x30
   12704:	ldr	r1, [pc, #688]	; 129bc <__assert_fail@plt+0x18c0>
   12708:	str	r7, [sp, #8]
   1270c:	ldr	r0, [r1]
   12710:	strd	r2, [sp]
   12714:	mov	r1, #1
   12718:	ldr	r2, [pc, #720]	; 129f0 <__assert_fail@plt+0x18f4>
   1271c:	bl	1103c <__fprintf_chk@plt>
   12720:	b	12514 <__assert_fail@plt+0x1418>
   12724:	ldrb	r2, [r4, #20]
   12728:	vldr	d8, [pc, #616]	; 12998 <__assert_fail@plt+0x189c>
   1272c:	cmp	r2, #0
   12730:	bne	12c48 <__assert_fail@plt+0x1b4c>
   12734:	vldr	d7, [sp, #48]	; 0x30
   12738:	vmul.f64	d7, d7, d8
   1273c:	vstr	d7, [sp, #48]	; 0x30
   12740:	ldr	r3, [sp, #40]	; 0x28
   12744:	cmp	r3, #0
   12748:	beq	12864 <__assert_fail@plt+0x1768>
   1274c:	ldrb	r3, [r3]
   12750:	cmp	r3, #0
   12754:	beq	12864 <__assert_fail@plt+0x1768>
   12758:	ldr	r3, [r4, #36]	; 0x24
   1275c:	cmp	r3, #3
   12760:	beq	12880 <__assert_fail@plt+0x1784>
   12764:	ldr	r5, [pc, #608]	; 129cc <__assert_fail@plt+0x18d0>
   12768:	mov	r2, #5
   1276c:	ldr	r1, [pc, #640]	; 129f4 <__assert_fail@plt+0x18f8>
   12770:	mov	r0, #0
   12774:	ldr	sl, [r5]
   12778:	bl	10ef8 <dcgettext@plt>
   1277c:	mov	r1, r9
   12780:	mov	r6, r0
   12784:	mov	r0, #0
   12788:	bl	16bc4 <__assert_fail@plt+0x5ac8>
   1278c:	ldr	r1, [sp, #40]	; 0x28
   12790:	mov	r9, r0
   12794:	mov	r0, #1
   12798:	bl	16bc4 <__assert_fail@plt+0x5ac8>
   1279c:	mov	r2, r6
   127a0:	mov	r3, r9
   127a4:	mov	r1, #0
   127a8:	mov	r6, #5
   127ac:	str	r0, [sp]
   127b0:	mov	r0, sl
   127b4:	bl	10f7c <error@plt>
   127b8:	b	12444 <__assert_fail@plt+0x1348>
   127bc:	bl	12168 <__assert_fail@plt+0x106c>
   127c0:	b	122f0 <__assert_fail@plt+0x11f4>
   127c4:	ldr	r3, [pc, #496]	; 129bc <__assert_fail@plt+0x18c0>
   127c8:	mov	r0, r5
   127cc:	ldr	r5, [r3]
   127d0:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   127d4:	ldr	r2, [pc, #540]	; 129f8 <__assert_fail@plt+0x18fc>
   127d8:	mov	r1, #1
   127dc:	mov	r3, r0
   127e0:	mov	r0, r5
   127e4:	bl	1103c <__fprintf_chk@plt>
   127e8:	b	1227c <__assert_fail@plt+0x1180>
   127ec:	mov	r7, #0
   127f0:	b	12580 <__assert_fail@plt+0x1484>
   127f4:	mov	r7, #0
   127f8:	b	126b4 <__assert_fail@plt+0x15b8>
   127fc:	mov	r9, r8
   12800:	b	122b4 <__assert_fail@plt+0x11b8>
   12804:	sub	r5, r5, #69	; 0x45
   12808:	uxtb	r1, r5
   1280c:	cmp	r1, #21
   12810:	movhi	r5, r2
   12814:	ldrls	r2, [pc, #480]	; 129fc <__assert_fail@plt+0x1900>
   12818:	ldrls	r5, [r2, r1, lsl #2]
   1281c:	add	r2, r3, #1
   12820:	cmp	sl, #1
   12824:	str	r2, [sp, #40]	; 0x28
   12828:	beq	13150 <__assert_fail@plt+0x2054>
   1282c:	cmp	sl, #4
   12830:	beq	13454 <__assert_fail@plt+0x2358>
   12834:	vmov	s15, fp
   12838:	ldrb	r2, [r4, #20]
   1283c:	vcvt.f64.s32	d7, s15
   12840:	cmp	r5, #0
   12844:	beq	13448 <__assert_fail@plt+0x234c>
   12848:	subs	r7, r5, #1
   1284c:	vmov.f64	d8, d7
   12850:	beq	1272c <__assert_fail@plt+0x1630>
   12854:	subs	r7, r7, #1
   12858:	vmul.f64	d8, d8, d7
   1285c:	bne	12854 <__assert_fail@plt+0x1758>
   12860:	b	1272c <__assert_fail@plt+0x1630>
   12864:	cmp	r6, #1
   12868:	bne	133e4 <__assert_fail@plt+0x22e8>
   1286c:	ldrb	r3, [r4, #40]	; 0x28
   12870:	cmp	r3, #0
   12874:	bne	1288c <__assert_fail@plt+0x1790>
   12878:	ldr	r5, [pc, #332]	; 129cc <__assert_fail@plt+0x18d0>
   1287c:	b	12444 <__assert_fail@plt+0x1348>
   12880:	mov	r6, #5
   12884:	ldr	r5, [pc, #320]	; 129cc <__assert_fail@plt+0x18d0>
   12888:	b	12444 <__assert_fail@plt+0x1348>
   1288c:	mov	r2, #5
   12890:	ldr	r1, [pc, #360]	; 12a00 <__assert_fail@plt+0x1904>
   12894:	mov	r0, #0
   12898:	bl	10ef8 <dcgettext@plt>
   1289c:	mov	r5, r0
   128a0:	mov	r0, r9
   128a4:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   128a8:	mov	r1, #0
   128ac:	mov	r2, r5
   128b0:	mov	r3, r0
   128b4:	mov	r0, r1
   128b8:	bl	10f7c <error@plt>
   128bc:	b	12878 <__assert_fail@plt+0x177c>
   128c0:	ldr	sl, [r4, #48]	; 0x30
   128c4:	mov	r3, #37	; 0x25
   128c8:	cmp	sl, #0
   128cc:	strb	r3, [sp, #48]	; 0x30
   128d0:	movne	r3, #39	; 0x27
   128d4:	strbne	r3, [sp, #49]	; 0x31
   128d8:	ldr	r3, [r4, #52]	; 0x34
   128dc:	addne	fp, sp, #50	; 0x32
   128e0:	addeq	fp, sp, #49	; 0x31
   128e4:	cmp	r3, #0
   128e8:	ldr	r8, [r5, #28]
   128ec:	bne	130b0 <__assert_fail@plt+0x1fb4>
   128f0:	ldrb	r3, [r4, #20]
   128f4:	cmp	r3, #0
   128f8:	str	r3, [sp, #24]
   128fc:	bne	1308c <__assert_fail@plt+0x1f90>
   12900:	cmp	r6, #0
   12904:	bne	12d0c <__assert_fail@plt+0x1c10>
   12908:	cmp	r7, #0
   1290c:	beq	130d4 <__assert_fail@plt+0x1fd8>
   12910:	subs	r6, r7, #1
   12914:	vldr	d8, [pc, #116]	; 12990 <__assert_fail@plt+0x1894>
   12918:	beq	13400 <__assert_fail@plt+0x2304>
   1291c:	vmov.f64	d6, d8
   12920:	mov	r3, r6
   12924:	subs	r3, r3, #1
   12928:	vmul.f64	d8, d8, d6
   1292c:	bne	12924 <__assert_fail@plt+0x1828>
   12930:	vmul.f64	d8, d8, d9
   12934:	vldr	d7, [pc, #100]	; 129a0 <__assert_fail@plt+0x18a4>
   12938:	vldr	d10, [pc, #104]	; 129a8 <__assert_fail@plt+0x18ac>
   1293c:	vmul.f64	d7, d8, d7
   12940:	vmov	r0, r1, d7
   12944:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12948:	bl	18ebc <__assert_fail@plt+0x7dc0>
   1294c:	vmov	d7, r0, r1
   12950:	vmul.f64	d10, d7, d10
   12954:	vsub.f64	d8, d8, d10
   12958:	cmp	r8, #4
   1295c:	ldrls	pc, [pc, r8, lsl #2]
   12960:	b	134d4 <__assert_fail@plt+0x23d8>
   12964:	ldrdeq	r2, [r1], -r4
   12968:	andeq	r2, r1, r0, lsl sl
   1296c:	andeq	r2, r1, r4, lsl #20
   12970:	andeq	r2, r1, r4, lsr ip
   12974:	andeq	r2, r1, ip, lsl #24
   12978:			; <UNDEFINED> instruction: 0xffffffff
   1297c:			; <UNDEFINED> instruction: 0xffefffff
   12980:			; <UNDEFINED> instruction: 0xffffffff
   12984:	svcvc	0x00efffff
	...
   12994:	eormi	r0, r4, r0
   12998:	andeq	r0, r0, r0
   1299c:	svccc	0x00f00000	; IMB
   129a0:	andeq	r0, r0, r0
   129a4:	stccc	0, cr0, [r0], {-0}
   129a8:	andeq	r0, r0, r0
   129ac:	mvnmi	r0, #0
   129b0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   129b4:	muleq	r2, ip, r1
   129b8:	andeq	ip, r2, r8, lsr #3
   129bc:	muleq	r2, r0, r1
   129c0:			; <UNDEFINED> instruction: 0x000195b8
   129c4:	muleq	r1, r0, r5
   129c8:	andeq	r9, r1, r8, ror #8
   129cc:	andeq	ip, r2, r8, lsl #2
   129d0:	andeq	r9, r1, r4, asr #8
   129d4:	andeq	r9, r1, r8, ror r5
   129d8:			; <UNDEFINED> instruction: 0x000194b4
   129dc:	andeq	r9, r1, r4, lsl r4
   129e0:	andeq	r9, r1, ip, ror r4
   129e4:	muleq	r1, r4, r7
   129e8:	andeq	r9, r1, ip, lsl #14
   129ec:	ldrdeq	r9, [r1], -r0
   129f0:	andeq	r9, r1, r8, lsl r6
   129f4:			; <UNDEFINED> instruction: 0x000196bc
   129f8:	andeq	r9, r1, r4, ror #10
   129fc:	muleq	r1, r0, r1
   12a00:	ldrdeq	r9, [r1], -ip
   12a04:	vcmpe.f64	d8, #0.0
   12a08:	vmrs	APSR_nzcv, fpscr
   12a0c:	bpl	12bd4 <__assert_fail@plt+0x1ad8>
   12a10:	vneg.f64	d8, d8
   12a14:	vmov	r0, r1, d8
   12a18:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12a1c:	mov	r8, r0
   12a20:	mov	r9, r1
   12a24:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12a28:	vmov	d7, r0, r1
   12a2c:	vcmpe.f64	d8, d7
   12a30:	vmrs	APSR_nzcv, fpscr
   12a34:	ble	12a40 <__assert_fail@plt+0x1944>
   12a38:	adds	r8, r8, #1
   12a3c:	adc	r9, r9, #0
   12a40:	rsbs	r0, r8, #0
   12a44:	rsc	r1, r9, #0
   12a48:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12a4c:	vmov	d7, r0, r1
   12a50:	cmp	r7, #0
   12a54:	vadd.f64	d10, d10, d7
   12a58:	beq	12a7c <__assert_fail@plt+0x1980>
   12a5c:	subs	r6, r7, #1
   12a60:	beq	133f4 <__assert_fail@plt+0x22f8>
   12a64:	vldr	d7, [pc, #900]	; 12df0 <__assert_fail@plt+0x1cf4>
   12a68:	vmov.f64	d6, d7
   12a6c:	subs	r6, r6, #1
   12a70:	vmul.f64	d7, d7, d6
   12a74:	bne	12a6c <__assert_fail@plt+0x1970>
   12a78:	vdiv.f64	d10, d10, d7
   12a7c:	ldr	r3, [sp, #24]
   12a80:	cmp	r3, #0
   12a84:	beq	12ab0 <__assert_fail@plt+0x19b4>
   12a88:	ldr	r1, [pc, #936]	; 12e38 <__assert_fail@plt+0x1d3c>
   12a8c:	ldr	r3, [pc, #936]	; 12e3c <__assert_fail@plt+0x1d40>
   12a90:	cmp	sl, #0
   12a94:	ldr	r0, [r1]
   12a98:	ldr	r2, [pc, #928]	; 12e40 <__assert_fail@plt+0x1d44>
   12a9c:	vstr	d10, [sp]
   12aa0:	movne	r2, r3
   12aa4:	mov	r1, #1
   12aa8:	mov	r3, r7
   12aac:	bl	1103c <__fprintf_chk@plt>
   12ab0:	ldr	r2, [pc, #908]	; 12e44 <__assert_fail@plt+0x1d48>
   12ab4:	mov	r3, #128	; 0x80
   12ab8:	add	r1, sp, #48	; 0x30
   12abc:	ldr	r0, [r2]
   12ac0:	ldrb	r2, [r2, #4]
   12ac4:	add	r8, sp, #112	; 0x70
   12ac8:	str	r1, [sp]
   12acc:	vstr	d10, [sp, #8]
   12ad0:	str	r7, [sp, #4]
   12ad4:	mov	r1, r3
   12ad8:	str	r0, [fp]
   12adc:	strb	r2, [fp, #4]
   12ae0:	mov	r0, r8
   12ae4:	mov	r2, #1
   12ae8:	bl	110e4 <__snprintf_chk@plt>
   12aec:	cmp	r0, #127	; 0x7f
   12af0:	bhi	134b0 <__assert_fail@plt+0x23b4>
   12af4:	ldr	r7, [r4, #16]
   12af8:	ldrb	r6, [r4, #20]
   12afc:	cmp	r7, #0
   12b00:	beq	12b20 <__assert_fail@plt+0x1a24>
   12b04:	mov	r0, r8
   12b08:	bl	10fe8 <strlen@plt>
   12b0c:	mov	r1, r7
   12b10:	mov	r3, #128	; 0x80
   12b14:	rsb	r2, r0, #127	; 0x7f
   12b18:	mov	r0, r8
   12b1c:	bl	10e5c <__strncat_chk@plt>
   12b20:	cmp	r6, #0
   12b24:	beq	12b50 <__assert_fail@plt+0x1a54>
   12b28:	ldr	r3, [pc, #776]	; 12e38 <__assert_fail@plt+0x1d3c>
   12b2c:	mov	r0, r8
   12b30:	ldr	r6, [r3]
   12b34:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   12b38:	vstr	d9, [sp]
   12b3c:	ldr	r2, [pc, #772]	; 12e48 <__assert_fail@plt+0x1d4c>
   12b40:	mov	r1, #1
   12b44:	str	r0, [sp, #8]
   12b48:	mov	r0, r6
   12b4c:	bl	1103c <__fprintf_chk@plt>
   12b50:	ldr	r6, [r4, #28]
   12b54:	mov	r0, r8
   12b58:	cmp	r6, #0
   12b5c:	beq	12d04 <__assert_fail@plt+0x1c08>
   12b60:	bl	10fe8 <strlen@plt>
   12b64:	cmp	r0, r6
   12b68:	bcc	13368 <__assert_fail@plt+0x226c>
   12b6c:	ldr	r3, [r4, #8]
   12b70:	add	r0, r0, #1
   12b74:	cmp	r0, r3
   12b78:	bcs	13118 <__assert_fail@plt+0x201c>
   12b7c:	mov	r1, r8
   12b80:	ldr	r0, [r4, #12]
   12b84:	bl	10f4c <strcpy@plt>
   12b88:	ldr	r0, [r4, #60]	; 0x3c
   12b8c:	ldr	r5, [pc, #696]	; 12e4c <__assert_fail@plt+0x1d50>
   12b90:	cmp	r0, #0
   12b94:	beq	12ba0 <__assert_fail@plt+0x1aa4>
   12b98:	ldr	r1, [r5]
   12b9c:	bl	10e44 <fputs_unlocked@plt>
   12ba0:	ldr	r1, [r5]
   12ba4:	ldr	r0, [r4, #12]
   12ba8:	bl	10e44 <fputs_unlocked@plt>
   12bac:	ldr	r0, [r4, #56]	; 0x38
   12bb0:	cmp	r0, #0
   12bb4:	moveq	r0, #1
   12bb8:	beq	12210 <__assert_fail@plt+0x1114>
   12bbc:	ldr	r1, [r5]
   12bc0:	bl	10e44 <fputs_unlocked@plt>
   12bc4:	mov	r0, #1
   12bc8:	add	sp, sp, #244	; 0xf4
   12bcc:	vpop	{d8-d11}
   12bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd4:	vmov	r0, r1, d8
   12bd8:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12bdc:	mov	r8, r0
   12be0:	mov	r9, r1
   12be4:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12be8:	vmov	d7, r0, r1
   12bec:	vcmpe.f64	d8, d7
   12bf0:	vmrs	APSR_nzcv, fpscr
   12bf4:	ble	12a50 <__assert_fail@plt+0x1954>
   12bf8:	adds	r0, r8, #1
   12bfc:	adc	r1, r9, #0
   12c00:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12c04:	vmov	d7, r0, r1
   12c08:	b	12a50 <__assert_fail@plt+0x1954>
   12c0c:	vcmpe.f64	d8, #0.0
   12c10:	vldr	d7, [pc, #480]	; 12df8 <__assert_fail@plt+0x1cfc>
   12c14:	vmrs	APSR_nzcv, fpscr
   12c18:	vsubmi.f64	d7, d8, d7
   12c1c:	vaddpl.f64	d7, d8, d7
   12c20:	vmov	r0, r1, d7
   12c24:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12c28:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12c2c:	vmov	d7, r0, r1
   12c30:	b	12a50 <__assert_fail@plt+0x1954>
   12c34:	vmov	r0, r1, d8
   12c38:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12c3c:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12c40:	vmov	d7, r0, r1
   12c44:	b	12a50 <__assert_fail@plt+0x1954>
   12c48:	vstr	d8, [sp, #8]
   12c4c:	ldr	sl, [pc, #484]	; 12e38 <__assert_fail@plt+0x1d3c>
   12c50:	str	r5, [sp]
   12c54:	mov	r3, fp
   12c58:	ldr	r0, [sl]
   12c5c:	ldr	r2, [pc, #492]	; 12e50 <__assert_fail@plt+0x1d54>
   12c60:	mov	r1, #1
   12c64:	bl	1103c <__fprintf_chk@plt>
   12c68:	vldr	d7, [sp, #48]	; 0x30
   12c6c:	ldrb	r3, [r4, #20]
   12c70:	vmul.f64	d8, d8, d7
   12c74:	cmp	r3, #0
   12c78:	vstr	d8, [sp, #48]	; 0x30
   12c7c:	beq	12740 <__assert_fail@plt+0x1644>
   12c80:	ldr	r0, [sl]
   12c84:	ldr	r2, [pc, #456]	; 12e54 <__assert_fail@plt+0x1d58>
   12c88:	vstr	d8, [sp, #8]
   12c8c:	vstr	d8, [sp]
   12c90:	mov	r1, #1
   12c94:	bl	1103c <__fprintf_chk@plt>
   12c98:	b	12740 <__assert_fail@plt+0x1644>
   12c9c:	ldrb	r3, [sp, #39]	; 0x27
   12ca0:	moveq	r6, r0
   12ca4:	cmp	r3, #0
   12ca8:	bne	13084 <__assert_fail@plt+0x1f88>
   12cac:	ldr	r2, [sp, #44]	; 0x2c
   12cb0:	ldr	r7, [sp, #40]	; 0x28
   12cb4:	vldr	d5, [sp, #112]	; 0x70
   12cb8:	subs	r7, r2, r7
   12cbc:	beq	13220 <__assert_fail@plt+0x2124>
   12cc0:	subs	r3, r7, #1
   12cc4:	vldr	d7, [pc, #292]	; 12df0 <__assert_fail@plt+0x1cf4>
   12cc8:	beq	12cdc <__assert_fail@plt+0x1be0>
   12ccc:	vmov.f64	d6, d7
   12cd0:	subs	r3, r3, #1
   12cd4:	vmul.f64	d7, d7, d6
   12cd8:	bne	12cd0 <__assert_fail@plt+0x1bd4>
   12cdc:	vdiv.f64	d6, d5, d7
   12ce0:	ldrb	r3, [sp, #38]	; 0x26
   12ce4:	vldr	d7, [sp, #48]	; 0x30
   12ce8:	str	r2, [sp, #40]	; 0x28
   12cec:	cmp	r3, #0
   12cf0:	vsubne.f64	d7, d7, d6
   12cf4:	vaddeq.f64	d7, d7, d6
   12cf8:	vstr	d6, [sp, #112]	; 0x70
   12cfc:	vstr	d7, [sp, #48]	; 0x30
   12d00:	b	12508 <__assert_fail@plt+0x140c>
   12d04:	bl	10fe8 <strlen@plt>
   12d08:	b	12b6c <__assert_fail@plt+0x1a70>
   12d0c:	vldr	d6, [pc, #236]	; 12e00 <__assert_fail@plt+0x1d04>
   12d10:	vldr	d10, [pc, #240]	; 12e08 <__assert_fail@plt+0x1d0c>
   12d14:	vldr	d7, [pc, #244]	; 12e10 <__assert_fail@plt+0x1d14>
   12d18:	sub	r3, r6, #3
   12d1c:	vcmpe.f64	d9, d6
   12d20:	cmp	r3, #1
   12d24:	vmovls.f64	d10, d7
   12d28:	vmrs	APSR_nzcv, fpscr
   12d2c:	vmovlt.f64	d8, d9
   12d30:	movlt	r7, #0
   12d34:	blt	12d7c <__assert_fail@plt+0x1c80>
   12d38:	vldr	d7, [pc, #216]	; 12e18 <__assert_fail@plt+0x1d1c>
   12d3c:	vmov.f64	d8, d9
   12d40:	mov	r7, #0
   12d44:	vcmpe.f64	d9, d7
   12d48:	vmrs	APSR_nzcv, fpscr
   12d4c:	bhi	12d7c <__assert_fail@plt+0x1c80>
   12d50:	vldr	d6, [pc, #200]	; 12e20 <__assert_fail@plt+0x1d24>
   12d54:	b	12d60 <__assert_fail@plt+0x1c64>
   12d58:	vdiv.f64	d8, d8, d10
   12d5c:	add	r7, r7, #1
   12d60:	vcmpe.f64	d8, d6
   12d64:	vmrs	APSR_nzcv, fpscr
   12d68:	vnegmi.f64	d7, d8
   12d6c:	vmovpl.f64	d7, d8
   12d70:	vcmpe.f64	d7, d10
   12d74:	vmrs	APSR_nzcv, fpscr
   12d78:	bge	12d58 <__assert_fail@plt+0x1c5c>
   12d7c:	ldr	r3, [sp, #24]
   12d80:	cmp	r3, #0
   12d84:	bne	13310 <__assert_fail@plt+0x2214>
   12d88:	ldr	r3, [r5, #24]
   12d8c:	cmn	r3, #1
   12d90:	str	r3, [sp, #28]
   12d94:	beq	132a4 <__assert_fail@plt+0x21a8>
   12d98:	add	sl, r7, r7, lsl #1
   12d9c:	cmp	sl, r3
   12da0:	movcs	sl, r3
   12da4:	cmp	sl, #0
   12da8:	bne	1317c <__assert_fail@plt+0x2080>
   12dac:	vldr	d7, [pc, #116]	; 12e28 <__assert_fail@plt+0x1d2c>
   12db0:	vldr	d11, [pc, #120]	; 12e30 <__assert_fail@plt+0x1d34>
   12db4:	vmul.f64	d7, d8, d7
   12db8:	vmov	r0, r1, d7
   12dbc:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12dc0:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12dc4:	vmov	d7, r0, r1
   12dc8:	vmul.f64	d11, d7, d11
   12dcc:	vsub.f64	d8, d8, d11
   12dd0:	cmp	r8, #4
   12dd4:	ldrls	pc, [pc, r8, lsl #2]
   12dd8:	b	133d0 <__assert_fail@plt+0x22d4>
   12ddc:	andeq	r3, r1, r0, asr r0
   12de0:	andeq	r3, r1, r8
   12de4:	andeq	r2, r1, r0, asr #31
   12de8:	andeq	r2, r1, r8, lsr #31
   12dec:	andeq	r2, r1, r8, asr lr
   12df0:	andeq	r0, r0, r0
   12df4:	eormi	r0, r4, r0
   12df8:	andeq	r0, r0, r0
   12dfc:	svccc	0x00e00000
   12e00:			; <UNDEFINED> instruction: 0xffffffff
   12e04:			; <UNDEFINED> instruction: 0xffefffff
   12e08:	andeq	r0, r0, r0
   12e0c:	addmi	r4, pc, r0
   12e10:	andeq	r0, r0, r0
   12e14:	addsmi	r0, r0, r0
   12e18:			; <UNDEFINED> instruction: 0xffffffff
   12e1c:	svcvc	0x00efffff
	...
   12e2c:	stccc	0, cr0, [r0], {-0}
   12e30:	andeq	r0, r0, r0
   12e34:	mvnmi	r0, #0
   12e38:	muleq	r2, r0, r1
   12e3c:	andeq	r9, r1, r0, lsl #10
   12e40:	andeq	r9, r1, r4, lsr r5
   12e44:	strdeq	r9, [r1], -r4
   12e48:	muleq	r1, r8, r8
   12e4c:	muleq	r2, ip, r1
   12e50:	andeq	r9, r1, r0, lsl #13
   12e54:	muleq	r1, ip, r6
   12e58:	mov	sl, #0
   12e5c:	vcmpe.f64	d8, #0.0
   12e60:	vldr	d7, [pc, #992]	; 13248 <__assert_fail@plt+0x214c>
   12e64:	vmrs	APSR_nzcv, fpscr
   12e68:	vsubmi.f64	d7, d8, d7
   12e6c:	vaddpl.f64	d7, d8, d7
   12e70:	vmov	r0, r1, d7
   12e74:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12e78:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12e7c:	vmov	d7, r0, r1
   12e80:	cmp	sl, #0
   12e84:	vadd.f64	d11, d11, d7
   12e88:	beq	13120 <__assert_fail@plt+0x2024>
   12e8c:	subs	sl, sl, #1
   12e90:	beq	1350c <__assert_fail@plt+0x2410>
   12e94:	vldr	d7, [pc, #948]	; 13250 <__assert_fail@plt+0x2154>
   12e98:	vmov.f64	d6, d7
   12e9c:	subs	sl, sl, #1
   12ea0:	vmul.f64	d7, d7, d6
   12ea4:	bne	12e9c <__assert_fail@plt+0x1da0>
   12ea8:	vdiv.f64	d8, d11, d7
   12eac:	vcmpe.f64	d8, #0.0
   12eb0:	vmrs	APSR_nzcv, fpscr
   12eb4:	bmi	13228 <__assert_fail@plt+0x212c>
   12eb8:	vcmpe.f64	d8, d10
   12ebc:	vmrs	APSR_nzcv, fpscr
   12ec0:	blt	12ecc <__assert_fail@plt+0x1dd0>
   12ec4:	vdiv.f64	d8, d8, d10
   12ec8:	add	r7, r7, #1
   12ecc:	vldr	d7, [pc, #900]	; 13258 <__assert_fail@plt+0x215c>
   12ed0:	vcmp.f64	d8, d7
   12ed4:	vmrs	APSR_nzcv, fpscr
   12ed8:	bne	131e8 <__assert_fail@plt+0x20ec>
   12edc:	mov	r9, #0
   12ee0:	ldr	r3, [sp, #24]
   12ee4:	cmp	r3, #0
   12ee8:	bne	1333c <__assert_fail@plt+0x2240>
   12eec:	ldr	r2, [sp, #28]
   12ef0:	ldr	r3, [pc, #904]	; 13280 <__assert_fail@plt+0x2184>
   12ef4:	cmn	r2, #1
   12ef8:	moveq	r2, r9
   12efc:	cmp	r7, #8
   12f00:	ldrh	r1, [r3, #4]
   12f04:	ldr	r0, [r3]
   12f08:	mov	r9, r2
   12f0c:	ldrb	r2, [r3, #6]
   12f10:	ldrls	r3, [pc, #876]	; 13284 <__assert_fail@plt+0x2188>
   12f14:	ldrhi	r3, [pc, #876]	; 13288 <__assert_fail@plt+0x218c>
   12f18:	addls	r3, r3, r7, lsl #2
   12f1c:	strh	r1, [fp, #4]
   12f20:	ldrls	r3, [r3, #88]	; 0x58
   12f24:	strb	r2, [fp, #6]
   12f28:	str	r0, [fp]
   12f2c:	add	r8, sp, #112	; 0x70
   12f30:	str	r3, [sp, #16]
   12f34:	add	r3, sp, #48	; 0x30
   12f38:	str	r3, [sp]
   12f3c:	vstr	d8, [sp, #8]
   12f40:	str	r9, [sp, #4]
   12f44:	mov	r0, r8
   12f48:	mov	r3, #128	; 0x80
   12f4c:	mov	r2, #1
   12f50:	mov	r1, #127	; 0x7f
   12f54:	bl	110e4 <__snprintf_chk@plt>
   12f58:	cmp	r0, #126	; 0x7e
   12f5c:	bhi	13514 <__assert_fail@plt+0x2418>
   12f60:	adds	r7, r7, #0
   12f64:	movne	r7, #1
   12f68:	cmp	r6, #4
   12f6c:	movne	r7, #0
   12f70:	cmp	r7, #0
   12f74:	beq	12f8c <__assert_fail@plt+0x1e90>
   12f78:	rsb	r2, r0, #127	; 0x7f
   12f7c:	mov	r3, #128	; 0x80
   12f80:	ldr	r1, [pc, #772]	; 1328c <__assert_fail@plt+0x2190>
   12f84:	mov	r0, r8
   12f88:	bl	10e5c <__strncat_chk@plt>
   12f8c:	ldrb	r6, [r4, #20]
   12f90:	cmp	r6, #0
   12f94:	bne	13128 <__assert_fail@plt+0x202c>
   12f98:	ldr	r7, [r4, #16]
   12f9c:	cmp	r7, #0
   12fa0:	bne	12b04 <__assert_fail@plt+0x1a08>
   12fa4:	b	12b50 <__assert_fail@plt+0x1a54>
   12fa8:	mov	sl, #0
   12fac:	vmov	r0, r1, d8
   12fb0:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12fb4:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12fb8:	vmov	d7, r0, r1
   12fbc:	b	12e80 <__assert_fail@plt+0x1d84>
   12fc0:	mov	sl, #0
   12fc4:	vcmpe.f64	d8, #0.0
   12fc8:	vmrs	APSR_nzcv, fpscr
   12fcc:	bmi	1300c <__assert_fail@plt+0x1f10>
   12fd0:	vmov	r0, r1, d8
   12fd4:	bl	18f68 <__assert_fail@plt+0x7e6c>
   12fd8:	mov	r8, r0
   12fdc:	mov	r9, r1
   12fe0:	bl	18ebc <__assert_fail@plt+0x7dc0>
   12fe4:	vmov	d7, r0, r1
   12fe8:	vcmpe.f64	d7, d8
   12fec:	vmrs	APSR_nzcv, fpscr
   12ff0:	bpl	12e80 <__assert_fail@plt+0x1d84>
   12ff4:	adds	r0, r8, #1
   12ff8:	adc	r1, r9, #0
   12ffc:	bl	18ebc <__assert_fail@plt+0x7dc0>
   13000:	vmov	d7, r0, r1
   13004:	b	12e80 <__assert_fail@plt+0x1d84>
   13008:	mov	sl, #0
   1300c:	vneg.f64	d8, d8
   13010:	vmov	r0, r1, d8
   13014:	bl	18f68 <__assert_fail@plt+0x7e6c>
   13018:	mov	r8, r0
   1301c:	mov	r9, r1
   13020:	bl	18ebc <__assert_fail@plt+0x7dc0>
   13024:	vmov	d7, r0, r1
   13028:	vcmpe.f64	d8, d7
   1302c:	vmrs	APSR_nzcv, fpscr
   13030:	ble	1303c <__assert_fail@plt+0x1f40>
   13034:	adds	r8, r8, #1
   13038:	adc	r9, r9, #0
   1303c:	rsbs	r0, r8, #0
   13040:	rsc	r1, r9, #0
   13044:	bl	18ebc <__assert_fail@plt+0x7dc0>
   13048:	vmov	d7, r0, r1
   1304c:	b	12e80 <__assert_fail@plt+0x1d84>
   13050:	mov	sl, #0
   13054:	vmov	r0, r1, d8
   13058:	bl	18f68 <__assert_fail@plt+0x7e6c>
   1305c:	mov	r8, r0
   13060:	mov	r9, r1
   13064:	bl	18ebc <__assert_fail@plt+0x7dc0>
   13068:	vmov	d7, r0, r1
   1306c:	vcmpe.f64	d8, d7
   13070:	vmrs	APSR_nzcv, fpscr
   13074:	ble	12e80 <__assert_fail@plt+0x1d84>
   13078:	b	12ff4 <__assert_fail@plt+0x1ef8>
   1307c:	ldr	r1, [pc, #524]	; 13290 <__assert_fail@plt+0x2194>
   13080:	b	12618 <__assert_fail@plt+0x151c>
   13084:	mov	r0, #3
   13088:	b	126ec <__assert_fail@plt+0x15f0>
   1308c:	ldr	r3, [pc, #512]	; 13294 <__assert_fail@plt+0x2198>
   13090:	mov	r2, #17
   13094:	mov	r1, #1
   13098:	ldr	r3, [r3]
   1309c:	ldr	r0, [pc, #500]	; 13298 <__assert_fail@plt+0x219c>
   130a0:	bl	10f28 <fwrite@plt>
   130a4:	ldrb	r3, [r4, #20]
   130a8:	str	r3, [sp, #24]
   130ac:	b	12900 <__assert_fail@plt+0x1804>
   130b0:	ldr	r2, [pc, #484]	; 1329c <__assert_fail@plt+0x21a0>
   130b4:	mov	r0, fp
   130b8:	mov	r1, #62	; 0x3e
   130bc:	stm	sp, {r2, r3}
   130c0:	mov	r3, #63	; 0x3f
   130c4:	mov	r2, #1
   130c8:	bl	110e4 <__snprintf_chk@plt>
   130cc:	add	fp, fp, r0
   130d0:	b	128f0 <__assert_fail@plt+0x17f4>
   130d4:	vldr	d7, [pc, #388]	; 13260 <__assert_fail@plt+0x2164>
   130d8:	vldr	d10, [pc, #392]	; 13268 <__assert_fail@plt+0x216c>
   130dc:	vmul.f64	d7, d9, d7
   130e0:	vmov	r0, r1, d7
   130e4:	bl	18f68 <__assert_fail@plt+0x7e6c>
   130e8:	bl	18ebc <__assert_fail@plt+0x7dc0>
   130ec:	vmov	d7, r0, r1
   130f0:	vmul.f64	d10, d7, d10
   130f4:	vsub.f64	d8, d9, d10
   130f8:	cmp	r8, #4
   130fc:	ldrls	pc, [pc, r8, lsl #2]
   13100:	b	134dc <__assert_fail@plt+0x23e0>
   13104:	ldrdeq	r2, [r1], -r4
   13108:	andeq	r2, r1, r0, lsl sl
   1310c:	andeq	r2, r1, r4, lsl #20
   13110:	andeq	r2, r1, r4, lsr ip
   13114:	andeq	r2, r1, ip, lsl #24
   13118:	bl	12168 <__assert_fail@plt+0x106c>
   1311c:	b	12b7c <__assert_fail@plt+0x1a80>
   13120:	vldr	d7, [pc, #328]	; 13270 <__assert_fail@plt+0x2174>
   13124:	b	12ea8 <__assert_fail@plt+0x1dac>
   13128:	ldr	r3, [pc, #356]	; 13294 <__assert_fail@plt+0x2198>
   1312c:	mov	r0, r8
   13130:	ldr	r6, [r3]
   13134:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   13138:	ldr	r2, [pc, #352]	; 132a0 <__assert_fail@plt+0x21a4>
   1313c:	mov	r1, #1
   13140:	mov	r3, r0
   13144:	mov	r0, r6
   13148:	bl	1103c <__fprintf_chk@plt>
   1314c:	b	12af4 <__assert_fail@plt+0x19f8>
   13150:	ldrb	r2, [r3, #1]
   13154:	cmp	r2, #105	; 0x69
   13158:	bne	12834 <__assert_fail@plt+0x1738>
   1315c:	ldrb	r2, [r4, #20]
   13160:	add	r3, r3, #2
   13164:	str	r3, [sp, #40]	; 0x28
   13168:	cmp	r2, #0
   1316c:	bne	134e4 <__assert_fail@plt+0x23e8>
   13170:	vldr	d7, [pc, #256]	; 13278 <__assert_fail@plt+0x217c>
   13174:	mov	fp, #1024	; 0x400
   13178:	b	12840 <__assert_fail@plt+0x1744>
   1317c:	sub	r9, sl, #1
   13180:	cmp	r9, #0
   13184:	mov	r3, r9
   13188:	beq	132c4 <__assert_fail@plt+0x21c8>
   1318c:	vldr	d7, [pc, #188]	; 13250 <__assert_fail@plt+0x2154>
   13190:	vmov.f64	d6, d7
   13194:	subs	r3, r3, #1
   13198:	vmul.f64	d7, d7, d6
   1319c:	bne	13194 <__assert_fail@plt+0x2098>
   131a0:	vmul.f64	d8, d8, d7
   131a4:	vldr	d7, [pc, #180]	; 13260 <__assert_fail@plt+0x2164>
   131a8:	vldr	d11, [pc, #184]	; 13268 <__assert_fail@plt+0x216c>
   131ac:	vmul.f64	d7, d8, d7
   131b0:	vmov	r0, r1, d7
   131b4:	bl	18f68 <__assert_fail@plt+0x7e6c>
   131b8:	bl	18ebc <__assert_fail@plt+0x7dc0>
   131bc:	vmov	d7, r0, r1
   131c0:	vmul.f64	d11, d7, d11
   131c4:	vsub.f64	d8, d8, d11
   131c8:	cmp	r8, #4
   131cc:	ldrls	pc, [pc, r8, lsl #2]
   131d0:	b	133c4 <__assert_fail@plt+0x22c8>
   131d4:	andeq	r3, r1, r4, asr r0
   131d8:	andeq	r3, r1, ip
   131dc:	andeq	r2, r1, r4, asr #31
   131e0:	andeq	r2, r1, ip, lsr #31
   131e4:	andeq	r2, r1, ip, asr lr
   131e8:	vcmpe.f64	d8, d7
   131ec:	vmrs	APSR_nzcv, fpscr
   131f0:	vmovpl.f64	d6, d8
   131f4:	bmi	13538 <__assert_fail@plt+0x243c>
   131f8:	vldr	d7, [pc, #80]	; 13250 <__assert_fail@plt+0x2154>
   131fc:	vcmpe.f64	d8, d7
   13200:	vmov.f64	d8, d6
   13204:	vmrs	APSR_nzcv, fpscr
   13208:	movmi	r9, #1
   1320c:	movpl	r9, #0
   13210:	cmp	r7, #0
   13214:	moveq	r9, #0
   13218:	andne	r9, r9, #1
   1321c:	b	12ee0 <__assert_fail@plt+0x1de4>
   13220:	vldr	d7, [pc, #72]	; 13270 <__assert_fail@plt+0x2174>
   13224:	b	12cdc <__assert_fail@plt+0x1be0>
   13228:	vneg.f64	d7, d8
   1322c:	vcmpe.f64	d7, d10
   13230:	vmrs	APSR_nzcv, fpscr
   13234:	bge	12ec4 <__assert_fail@plt+0x1dc8>
   13238:	vmov.f64	d6, d8
   1323c:	vmov.f64	d8, d7
   13240:	b	131f8 <__assert_fail@plt+0x20fc>
   13244:	nop			; (mov r0, r0)
   13248:	andeq	r0, r0, r0
   1324c:	svccc	0x00e00000
   13250:	andeq	r0, r0, r0
   13254:	eormi	r0, r4, r0
	...
   13264:	stccc	0, cr0, [r0], {-0}
   13268:	andeq	r0, r0, r0
   1326c:	mvnmi	r0, #0
   13270:	andeq	r0, r0, r0
   13274:	svccc	0x00f00000	; IMB
   13278:	andeq	r0, r0, r0
   1327c:	addsmi	r0, r0, r0
   13280:	andeq	r9, r1, r8, ror r8
   13284:	muleq	r1, r0, r1
   13288:	andeq	r9, r1, ip, asr r5
   1328c:			; <UNDEFINED> instruction: 0x0001afb8
   13290:	andeq	r9, r1, r8, asr r7
   13294:	muleq	r2, r0, r1
   13298:	andeq	r9, r1, r0, ror #15
   1329c:	ldrdeq	r9, [r1], -r8
   132a0:	andeq	r9, r1, r0, lsl #17
   132a4:	vcmpe.f64	d8, #0.0
   132a8:	vldr	d6, [pc, #656]	; 13540 <__assert_fail@plt+0x2444>
   132ac:	vmrs	APSR_nzcv, fpscr
   132b0:	vnegmi.f64	d7, d8
   132b4:	vmovpl.f64	d7, d8
   132b8:	vcmpe.f64	d7, d6
   132bc:	vmrs	APSR_nzcv, fpscr
   132c0:	bpl	12dac <__assert_fail@plt+0x1cb0>
   132c4:	vldr	d6, [pc, #628]	; 13540 <__assert_fail@plt+0x2444>
   132c8:	vldr	d7, [pc, #632]	; 13548 <__assert_fail@plt+0x244c>
   132cc:	vldr	d11, [pc, #636]	; 13550 <__assert_fail@plt+0x2454>
   132d0:	vmul.f64	d8, d8, d6
   132d4:	vmul.f64	d7, d8, d7
   132d8:	vmov	r0, r1, d7
   132dc:	bl	18f68 <__assert_fail@plt+0x7e6c>
   132e0:	bl	18ebc <__assert_fail@plt+0x7dc0>
   132e4:	vmov	d7, r0, r1
   132e8:	vmul.f64	d11, d7, d11
   132ec:	vsub.f64	d8, d8, d11
   132f0:	cmp	r8, #4
   132f4:	ldrls	pc, [pc, r8, lsl #2]
   132f8:	b	133d0 <__assert_fail@plt+0x22d4>
   132fc:	muleq	r1, r8, r4
   13300:	muleq	r1, r0, r4
   13304:	andeq	r3, r1, r8, lsl #9
   13308:	andeq	r3, r1, r0, lsl #9
   1330c:	andeq	r3, r1, r8, ror r4
   13310:	vstr	d10, [sp, #8]
   13314:	ldr	r3, [pc, #596]	; 13570 <__assert_fail@plt+0x2474>
   13318:	str	r7, [sp, #16]
   1331c:	ldr	r2, [pc, #592]	; 13574 <__assert_fail@plt+0x2478>
   13320:	ldr	r0, [r3]
   13324:	mov	r1, #1
   13328:	vstr	d8, [sp]
   1332c:	bl	1103c <__fprintf_chk@plt>
   13330:	ldrb	r3, [r4, #20]
   13334:	str	r3, [sp, #24]
   13338:	b	12d88 <__assert_fail@plt+0x1c8c>
   1333c:	vstr	d10, [sp, #8]
   13340:	ldr	r3, [pc, #552]	; 13570 <__assert_fail@plt+0x2474>
   13344:	str	r7, [sp, #16]
   13348:	ldr	r2, [pc, #552]	; 13578 <__assert_fail@plt+0x247c>
   1334c:	ldr	r0, [r3]
   13350:	mov	r1, #1
   13354:	vstr	d8, [sp]
   13358:	bl	1103c <__fprintf_chk@plt>
   1335c:	ldr	r3, [r5, #24]
   13360:	str	r3, [sp, #28]
   13364:	b	12eec <__assert_fail@plt+0x1df0>
   13368:	ldr	r3, [r5, #32]
   1336c:	mov	ip, #2
   13370:	ldr	r2, [r4, #8]
   13374:	ldr	r1, [r4, #12]
   13378:	mov	r0, r8
   1337c:	str	r3, [sp]
   13380:	str	ip, [sp, #4]
   13384:	add	r3, sp, #48	; 0x30
   13388:	str	r6, [sp, #48]	; 0x30
   1338c:	bl	14908 <__assert_fail@plt+0x380c>
   13390:	ldrb	r3, [r4, #20]
   13394:	cmp	r3, #0
   13398:	beq	12b88 <__assert_fail@plt+0x1a8c>
   1339c:	ldr	r3, [pc, #460]	; 13570 <__assert_fail@plt+0x2474>
   133a0:	ldr	r0, [r4, #12]
   133a4:	ldr	r5, [r3]
   133a8:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   133ac:	ldr	r2, [pc, #456]	; 1357c <__assert_fail@plt+0x2480>
   133b0:	mov	r1, #1
   133b4:	mov	r3, r0
   133b8:	mov	r0, r5
   133bc:	bl	1103c <__fprintf_chk@plt>
   133c0:	b	12b88 <__assert_fail@plt+0x1a8c>
   133c4:	subs	sl, r9, #0
   133c8:	vldrne	d11, [pc, #392]	; 13558 <__assert_fail@plt+0x245c>
   133cc:	bne	12e94 <__assert_fail@plt+0x1d98>
   133d0:	vldr	d8, [pc, #384]	; 13558 <__assert_fail@plt+0x245c>
   133d4:	vcmpe.f64	d10, d8
   133d8:	vmrs	APSR_nzcv, fpscr
   133dc:	bls	12ec4 <__assert_fail@plt+0x1dc8>
   133e0:	b	12edc <__assert_fail@plt+0x1de0>
   133e4:	ldr	r5, [pc, #404]	; 13580 <__assert_fail@plt+0x2484>
   133e8:	mov	r6, #0
   133ec:	b	12444 <__assert_fail@plt+0x1348>
   133f0:	vldr	d10, [pc, #352]	; 13558 <__assert_fail@plt+0x245c>
   133f4:	vldr	d7, [pc, #324]	; 13540 <__assert_fail@plt+0x2444>
   133f8:	vdiv.f64	d10, d10, d7
   133fc:	b	12a7c <__assert_fail@plt+0x1980>
   13400:	vmul.f64	d8, d9, d8
   13404:	vldr	d7, [pc, #316]	; 13548 <__assert_fail@plt+0x244c>
   13408:	vldr	d10, [pc, #320]	; 13550 <__assert_fail@plt+0x2454>
   1340c:	vmul.f64	d7, d8, d7
   13410:	vmov	r0, r1, d7
   13414:	bl	18f68 <__assert_fail@plt+0x7e6c>
   13418:	bl	18ebc <__assert_fail@plt+0x7dc0>
   1341c:	vmov	d7, r0, r1
   13420:	vmul.f64	d10, d7, d10
   13424:	vsub.f64	d8, d8, d10
   13428:	cmp	r8, #4
   1342c:	ldrls	pc, [pc, r8, lsl #2]
   13430:	b	133f0 <__assert_fail@plt+0x22f4>
   13434:	ldrdeq	r2, [r1], -r4
   13438:	andeq	r2, r1, r0, lsl sl
   1343c:	andeq	r2, r1, r4, lsl #20
   13440:	andeq	r2, r1, r4, lsr ip
   13444:	andeq	r2, r1, ip, lsl #24
   13448:	mov	r7, r5
   1344c:	vldr	d8, [pc, #268]	; 13560 <__assert_fail@plt+0x2464>
   13450:	b	1272c <__assert_fail@plt+0x1630>
   13454:	ldrb	r2, [r3, #1]
   13458:	cmp	r2, #105	; 0x69
   1345c:	bne	127f4 <__assert_fail@plt+0x16f8>
   13460:	vmov	s15, fp
   13464:	add	r3, r3, #2
   13468:	ldrb	r2, [r4, #20]
   1346c:	str	r3, [sp, #40]	; 0x28
   13470:	vcvt.f64.s32	d7, s15
   13474:	b	12840 <__assert_fail@plt+0x1744>
   13478:	mov	sl, #1
   1347c:	b	12e5c <__assert_fail@plt+0x1d60>
   13480:	mov	sl, #1
   13484:	b	12fac <__assert_fail@plt+0x1eb0>
   13488:	mov	sl, #1
   1348c:	b	12fc4 <__assert_fail@plt+0x1ec8>
   13490:	mov	sl, #1
   13494:	b	1300c <__assert_fail@plt+0x1f10>
   13498:	mov	sl, #1
   1349c:	b	13054 <__assert_fail@plt+0x1f58>
   134a0:	add	r2, r3, r7
   134a4:	cmp	r2, #15
   134a8:	bls	125fc <__assert_fail@plt+0x1500>
   134ac:	b	12650 <__assert_fail@plt+0x1554>
   134b0:	mov	r2, #5
   134b4:	ldr	r1, [pc, #200]	; 13584 <__assert_fail@plt+0x2488>
   134b8:	mov	r0, #0
   134bc:	bl	10ef8 <dcgettext@plt>
   134c0:	vstr	d10, [sp]
   134c4:	mov	r1, #0
   134c8:	mov	r2, r0
   134cc:	mov	r0, #1
   134d0:	bl	10f7c <error@plt>
   134d4:	vldr	d10, [pc, #124]	; 13558 <__assert_fail@plt+0x245c>
   134d8:	b	12a64 <__assert_fail@plt+0x1968>
   134dc:	vldr	d10, [pc, #116]	; 13558 <__assert_fail@plt+0x245c>
   134e0:	b	12a7c <__assert_fail@plt+0x1980>
   134e4:	ldr	r2, [pc, #132]	; 13570 <__assert_fail@plt+0x2474>
   134e8:	mov	r1, sl
   134ec:	mov	r3, #1024	; 0x400
   134f0:	ldr	r0, [r2]
   134f4:	ldr	r2, [pc, #140]	; 13588 <__assert_fail@plt+0x248c>
   134f8:	bl	1103c <__fprintf_chk@plt>
   134fc:	mov	fp, #1024	; 0x400
   13500:	ldrb	r2, [r4, #20]
   13504:	vldr	d7, [pc, #92]	; 13568 <__assert_fail@plt+0x246c>
   13508:	b	12840 <__assert_fail@plt+0x1744>
   1350c:	vldr	d7, [pc, #44]	; 13540 <__assert_fail@plt+0x2444>
   13510:	b	12ea8 <__assert_fail@plt+0x1dac>
   13514:	mov	r2, #5
   13518:	ldr	r1, [pc, #100]	; 13584 <__assert_fail@plt+0x2488>
   1351c:	mov	r0, #0
   13520:	bl	10ef8 <dcgettext@plt>
   13524:	vstr	d8, [sp]
   13528:	mov	r1, #0
   1352c:	mov	r2, r0
   13530:	mov	r0, #1
   13534:	bl	10f7c <error@plt>
   13538:	vneg.f64	d7, d8
   1353c:	b	13238 <__assert_fail@plt+0x213c>
   13540:	andeq	r0, r0, r0
   13544:	eormi	r0, r4, r0
   13548:	andeq	r0, r0, r0
   1354c:	stccc	0, cr0, [r0], {-0}
   13550:	andeq	r0, r0, r0
   13554:	mvnmi	r0, #0
	...
   13564:	svccc	0x00f00000	; IMB
   13568:	andeq	r0, r0, r0
   1356c:	addsmi	r0, r0, r0
   13570:	muleq	r2, r0, r1
   13574:	andeq	r9, r1, r8, lsr #16
   13578:	andeq	r9, r1, ip, asr #16
   1357c:	andeq	r9, r1, ip, asr #17
   13580:	andeq	ip, r2, r8, lsl #2
   13584:	strdeq	r9, [r1], -ip
   13588:	andeq	r9, r1, ip, asr #12
   1358c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13590:	mov	r5, r0
   13594:	ldr	r9, [pc, #440]	; 13754 <__assert_fail@plt+0x2658>
   13598:	ldr	fp, [pc, #440]	; 13758 <__assert_fail@plt+0x265c>
   1359c:	sub	sp, sp, #12
   135a0:	ldr	r2, [r9, #36]	; 0x24
   135a4:	mov	r8, #1
   135a8:	mov	r6, #0
   135ac:	mov	r7, #0
   135b0:	mov	sl, #0
   135b4:	str	r1, [sp, #4]
   135b8:	adds	r6, r6, #1
   135bc:	adc	r7, r7, #0
   135c0:	cmp	r2, #256	; 0x100
   135c4:	ldrb	r3, [r5]
   135c8:	beq	13650 <__assert_fail@plt+0x2554>
   135cc:	cmp	r3, r2
   135d0:	beq	13730 <__assert_fail@plt+0x2634>
   135d4:	cmp	r3, #0
   135d8:	beq	135f8 <__assert_fail@plt+0x24fc>
   135dc:	mov	r4, r5
   135e0:	b	135ec <__assert_fail@plt+0x24f0>
   135e4:	cmp	r3, r2
   135e8:	beq	136cc <__assert_fail@plt+0x25d0>
   135ec:	ldrb	r3, [r4, #1]!
   135f0:	cmp	r3, #0
   135f4:	bne	135e4 <__assert_fail@plt+0x24e8>
   135f8:	mov	r3, r7
   135fc:	mov	r2, r6
   13600:	mov	r0, r5
   13604:	bl	12190 <__assert_fail@plt+0x1094>
   13608:	ldr	r3, [sp, #4]
   1360c:	cmp	r0, #0
   13610:	moveq	r8, #0
   13614:	cmp	r3, #0
   13618:	beq	13644 <__assert_fail@plt+0x2548>
   1361c:	ldr	r3, [pc, #308]	; 13758 <__assert_fail@plt+0x265c>
   13620:	ldrb	r1, [r9, #40]	; 0x28
   13624:	ldr	r0, [r3]
   13628:	ldr	r3, [r0, #20]
   1362c:	ldr	r2, [r0, #24]
   13630:	cmp	r3, r2
   13634:	addcc	r2, r3, #1
   13638:	strcc	r2, [r0, #20]
   1363c:	strbcc	r1, [r3]
   13640:	bcs	1374c <__assert_fail@plt+0x2650>
   13644:	mov	r0, r8
   13648:	add	sp, sp, #12
   1364c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13650:	cmp	r3, #0
   13654:	beq	135f8 <__assert_fail@plt+0x24fc>
   13658:	str	r3, [sp]
   1365c:	bl	10fd0 <__ctype_b_loc@plt>
   13660:	ldr	r3, [sp]
   13664:	mov	r4, r5
   13668:	ldr	r1, [r0]
   1366c:	lsl	r2, r3, #1
   13670:	ldrh	r2, [r1, r2]
   13674:	cmp	r3, #10
   13678:	movne	r3, r2
   1367c:	orreq	r3, r2, #1
   13680:	tst	r3, #1
   13684:	bne	13720 <__assert_fail@plt+0x2624>
   13688:	ldrb	r3, [r4]
   1368c:	cmp	r3, #0
   13690:	bne	136a4 <__assert_fail@plt+0x25a8>
   13694:	b	135f8 <__assert_fail@plt+0x24fc>
   13698:	ldrb	r3, [r4, #1]!
   1369c:	cmp	r3, #0
   136a0:	beq	135f8 <__assert_fail@plt+0x24fc>
   136a4:	lsl	r2, r3, #1
   136a8:	ldrh	r2, [r1, r2]
   136ac:	cmp	r3, #10
   136b0:	movne	r3, r2
   136b4:	orreq	r3, r2, #1
   136b8:	tst	r3, #1
   136bc:	beq	13698 <__assert_fail@plt+0x259c>
   136c0:	ldrb	r3, [r4]
   136c4:	cmp	r3, #0
   136c8:	beq	135f8 <__assert_fail@plt+0x24fc>
   136cc:	mov	r2, r6
   136d0:	mov	r3, r7
   136d4:	strb	sl, [r4]
   136d8:	mov	r0, r5
   136dc:	bl	12190 <__assert_fail@plt+0x1094>
   136e0:	ldr	r3, [fp]
   136e4:	ldr	r2, [r9, #36]	; 0x24
   136e8:	ldr	ip, [r3, #20]
   136ec:	cmp	r2, #256	; 0x100
   136f0:	ldr	lr, [r3, #24]
   136f4:	movne	r1, r2
   136f8:	moveq	r1, #32
   136fc:	cmp	r0, #0
   13700:	moveq	r8, #0
   13704:	cmp	ip, lr
   13708:	addcc	r0, ip, #1
   1370c:	strcc	r0, [r3, #20]
   13710:	strbcc	r1, [ip]
   13714:	bcs	13738 <__assert_fail@plt+0x263c>
   13718:	add	r5, r4, #1
   1371c:	b	135b8 <__assert_fail@plt+0x24bc>
   13720:	ldrb	r3, [r4, #1]!
   13724:	cmp	r3, #0
   13728:	bne	1366c <__assert_fail@plt+0x2570>
   1372c:	b	135f8 <__assert_fail@plt+0x24fc>
   13730:	mov	r4, r5
   13734:	b	136c4 <__assert_fail@plt+0x25c8>
   13738:	uxtb	r1, r1
   1373c:	mov	r0, r3
   13740:	bl	11060 <__overflow@plt>
   13744:	ldr	r2, [r9, #36]	; 0x24
   13748:	b	13718 <__assert_fail@plt+0x261c>
   1374c:	bl	11060 <__overflow@plt>
   13750:	b	13644 <__assert_fail@plt+0x2548>
   13754:	andeq	ip, r2, r8, lsl #2
   13758:	muleq	r2, ip, r1
   1375c:	subs	r4, r0, #0
   13760:	push	{r7, lr}
   13764:	sub	sp, sp, #88	; 0x58
   13768:	beq	137a4 <__assert_fail@plt+0x26a8>
   1376c:	ldr	r3, [pc, #1284]	; 13c78 <__assert_fail@plt+0x2b7c>
   13770:	mov	r2, #5
   13774:	ldr	r1, [pc, #1280]	; 13c7c <__assert_fail@plt+0x2b80>
   13778:	mov	r0, #0
   1377c:	ldr	r5, [r3]
   13780:	bl	10ef8 <dcgettext@plt>
   13784:	ldr	r3, [pc, #1268]	; 13c80 <__assert_fail@plt+0x2b84>
   13788:	mov	r1, #1
   1378c:	ldr	r3, [r3]
   13790:	mov	r2, r0
   13794:	mov	r0, r5
   13798:	bl	1103c <__fprintf_chk@plt>
   1379c:	mov	r0, r4
   137a0:	bl	10fdc <exit@plt>
   137a4:	mov	r2, #5
   137a8:	ldr	r1, [pc, #1236]	; 13c84 <__assert_fail@plt+0x2b88>
   137ac:	bl	10ef8 <dcgettext@plt>
   137b0:	ldr	r6, [pc, #1224]	; 13c80 <__assert_fail@plt+0x2b84>
   137b4:	ldr	r5, [pc, #1228]	; 13c88 <__assert_fail@plt+0x2b8c>
   137b8:	ldr	r2, [r6]
   137bc:	mov	r1, r0
   137c0:	mov	r0, #1
   137c4:	bl	11024 <__printf_chk@plt>
   137c8:	mov	r2, #5
   137cc:	ldr	r1, [pc, #1208]	; 13c8c <__assert_fail@plt+0x2b90>
   137d0:	mov	r0, r4
   137d4:	bl	10ef8 <dcgettext@plt>
   137d8:	ldr	r1, [r5]
   137dc:	bl	10e44 <fputs_unlocked@plt>
   137e0:	mov	r2, #5
   137e4:	ldr	r1, [pc, #1188]	; 13c90 <__assert_fail@plt+0x2b94>
   137e8:	mov	r0, r4
   137ec:	bl	10ef8 <dcgettext@plt>
   137f0:	ldr	r1, [r5]
   137f4:	bl	10e44 <fputs_unlocked@plt>
   137f8:	mov	r2, #5
   137fc:	ldr	r1, [pc, #1168]	; 13c94 <__assert_fail@plt+0x2b98>
   13800:	mov	r0, r4
   13804:	bl	10ef8 <dcgettext@plt>
   13808:	ldr	r1, [r5]
   1380c:	bl	10e44 <fputs_unlocked@plt>
   13810:	mov	r2, #5
   13814:	ldr	r1, [pc, #1148]	; 13c98 <__assert_fail@plt+0x2b9c>
   13818:	mov	r0, r4
   1381c:	bl	10ef8 <dcgettext@plt>
   13820:	ldr	r1, [r5]
   13824:	bl	10e44 <fputs_unlocked@plt>
   13828:	mov	r2, #5
   1382c:	ldr	r1, [pc, #1128]	; 13c9c <__assert_fail@plt+0x2ba0>
   13830:	mov	r0, r4
   13834:	bl	10ef8 <dcgettext@plt>
   13838:	ldr	r1, [r5]
   1383c:	bl	10e44 <fputs_unlocked@plt>
   13840:	mov	r2, #5
   13844:	ldr	r1, [pc, #1108]	; 13ca0 <__assert_fail@plt+0x2ba4>
   13848:	mov	r0, r4
   1384c:	bl	10ef8 <dcgettext@plt>
   13850:	ldr	r1, [r5]
   13854:	bl	10e44 <fputs_unlocked@plt>
   13858:	mov	r2, #5
   1385c:	ldr	r1, [pc, #1088]	; 13ca4 <__assert_fail@plt+0x2ba8>
   13860:	mov	r0, r4
   13864:	bl	10ef8 <dcgettext@plt>
   13868:	ldr	r1, [r5]
   1386c:	bl	10e44 <fputs_unlocked@plt>
   13870:	mov	r2, #5
   13874:	ldr	r1, [pc, #1068]	; 13ca8 <__assert_fail@plt+0x2bac>
   13878:	mov	r0, r4
   1387c:	bl	10ef8 <dcgettext@plt>
   13880:	ldr	r1, [r5]
   13884:	bl	10e44 <fputs_unlocked@plt>
   13888:	mov	r2, #5
   1388c:	ldr	r1, [pc, #1048]	; 13cac <__assert_fail@plt+0x2bb0>
   13890:	mov	r0, r4
   13894:	bl	10ef8 <dcgettext@plt>
   13898:	ldr	r1, [r5]
   1389c:	bl	10e44 <fputs_unlocked@plt>
   138a0:	mov	r2, #5
   138a4:	ldr	r1, [pc, #1028]	; 13cb0 <__assert_fail@plt+0x2bb4>
   138a8:	mov	r0, r4
   138ac:	bl	10ef8 <dcgettext@plt>
   138b0:	ldr	r1, [r5]
   138b4:	bl	10e44 <fputs_unlocked@plt>
   138b8:	mov	r2, #5
   138bc:	ldr	r1, [pc, #1008]	; 13cb4 <__assert_fail@plt+0x2bb8>
   138c0:	mov	r0, r4
   138c4:	bl	10ef8 <dcgettext@plt>
   138c8:	ldr	r1, [r5]
   138cc:	bl	10e44 <fputs_unlocked@plt>
   138d0:	mov	r2, #5
   138d4:	ldr	r1, [pc, #988]	; 13cb8 <__assert_fail@plt+0x2bbc>
   138d8:	mov	r0, r4
   138dc:	bl	10ef8 <dcgettext@plt>
   138e0:	ldr	r1, [r5]
   138e4:	bl	10e44 <fputs_unlocked@plt>
   138e8:	mov	r2, #5
   138ec:	ldr	r1, [pc, #968]	; 13cbc <__assert_fail@plt+0x2bc0>
   138f0:	mov	r0, r4
   138f4:	bl	10ef8 <dcgettext@plt>
   138f8:	ldr	r1, [r5]
   138fc:	bl	10e44 <fputs_unlocked@plt>
   13900:	mov	r2, #5
   13904:	ldr	r1, [pc, #948]	; 13cc0 <__assert_fail@plt+0x2bc4>
   13908:	mov	r0, r4
   1390c:	bl	10ef8 <dcgettext@plt>
   13910:	ldr	r1, [r5]
   13914:	bl	10e44 <fputs_unlocked@plt>
   13918:	mov	r2, #5
   1391c:	ldr	r1, [pc, #928]	; 13cc4 <__assert_fail@plt+0x2bc8>
   13920:	mov	r0, r4
   13924:	bl	10ef8 <dcgettext@plt>
   13928:	ldr	r1, [r5]
   1392c:	bl	10e44 <fputs_unlocked@plt>
   13930:	mov	r2, #5
   13934:	ldr	r1, [pc, #908]	; 13cc8 <__assert_fail@plt+0x2bcc>
   13938:	mov	r0, r4
   1393c:	bl	10ef8 <dcgettext@plt>
   13940:	ldr	r1, [r5]
   13944:	bl	10e44 <fputs_unlocked@plt>
   13948:	mov	r2, #5
   1394c:	ldr	r1, [pc, #888]	; 13ccc <__assert_fail@plt+0x2bd0>
   13950:	mov	r0, r4
   13954:	bl	10ef8 <dcgettext@plt>
   13958:	ldr	r1, [r5]
   1395c:	bl	10e44 <fputs_unlocked@plt>
   13960:	mov	r2, #5
   13964:	ldr	r1, [pc, #868]	; 13cd0 <__assert_fail@plt+0x2bd4>
   13968:	mov	r0, r4
   1396c:	bl	10ef8 <dcgettext@plt>
   13970:	ldr	r1, [r5]
   13974:	bl	10e44 <fputs_unlocked@plt>
   13978:	mov	r2, #5
   1397c:	ldr	r1, [pc, #848]	; 13cd4 <__assert_fail@plt+0x2bd8>
   13980:	mov	r0, r4
   13984:	bl	10ef8 <dcgettext@plt>
   13988:	ldr	r1, [r5]
   1398c:	bl	10e44 <fputs_unlocked@plt>
   13990:	mov	r2, #5
   13994:	ldr	r1, [pc, #828]	; 13cd8 <__assert_fail@plt+0x2bdc>
   13998:	mov	r0, r4
   1399c:	bl	10ef8 <dcgettext@plt>
   139a0:	ldr	r1, [r5]
   139a4:	bl	10e44 <fputs_unlocked@plt>
   139a8:	mov	r2, #5
   139ac:	ldr	r1, [pc, #808]	; 13cdc <__assert_fail@plt+0x2be0>
   139b0:	mov	r0, r4
   139b4:	bl	10ef8 <dcgettext@plt>
   139b8:	ldr	r1, [r5]
   139bc:	bl	10e44 <fputs_unlocked@plt>
   139c0:	mov	r2, #5
   139c4:	ldr	r1, [pc, #788]	; 13ce0 <__assert_fail@plt+0x2be4>
   139c8:	mov	r0, r4
   139cc:	bl	10ef8 <dcgettext@plt>
   139d0:	ldr	r1, [r5]
   139d4:	bl	10e44 <fputs_unlocked@plt>
   139d8:	mov	r2, #5
   139dc:	ldr	r1, [pc, #768]	; 13ce4 <__assert_fail@plt+0x2be8>
   139e0:	mov	r0, r4
   139e4:	bl	10ef8 <dcgettext@plt>
   139e8:	ldr	r1, [r5]
   139ec:	bl	10e44 <fputs_unlocked@plt>
   139f0:	mov	r2, #5
   139f4:	ldr	r1, [pc, #748]	; 13ce8 <__assert_fail@plt+0x2bec>
   139f8:	mov	r0, r4
   139fc:	bl	10ef8 <dcgettext@plt>
   13a00:	ldr	r1, [r5]
   13a04:	bl	10e44 <fputs_unlocked@plt>
   13a08:	mov	r2, #5
   13a0c:	ldr	r1, [pc, #728]	; 13cec <__assert_fail@plt+0x2bf0>
   13a10:	mov	r0, r4
   13a14:	bl	10ef8 <dcgettext@plt>
   13a18:	ldr	r1, [r5]
   13a1c:	bl	10e44 <fputs_unlocked@plt>
   13a20:	mov	r2, #5
   13a24:	ldr	r1, [pc, #708]	; 13cf0 <__assert_fail@plt+0x2bf4>
   13a28:	mov	r0, r4
   13a2c:	bl	10ef8 <dcgettext@plt>
   13a30:	ldr	r1, [r5]
   13a34:	bl	10e44 <fputs_unlocked@plt>
   13a38:	mov	r2, #5
   13a3c:	ldr	r1, [pc, #688]	; 13cf4 <__assert_fail@plt+0x2bf8>
   13a40:	mov	r0, r4
   13a44:	bl	10ef8 <dcgettext@plt>
   13a48:	ldr	r1, [r5]
   13a4c:	bl	10e44 <fputs_unlocked@plt>
   13a50:	mov	r2, #5
   13a54:	ldr	r1, [pc, #668]	; 13cf8 <__assert_fail@plt+0x2bfc>
   13a58:	mov	r0, r4
   13a5c:	bl	10ef8 <dcgettext@plt>
   13a60:	ldr	r2, [r6]
   13a64:	mov	r1, r0
   13a68:	mov	r0, #1
   13a6c:	bl	11024 <__printf_chk@plt>
   13a70:	mov	r2, #5
   13a74:	ldr	r1, [pc, #640]	; 13cfc <__assert_fail@plt+0x2c00>
   13a78:	mov	r0, r4
   13a7c:	bl	10ef8 <dcgettext@plt>
   13a80:	ldr	r3, [r6]
   13a84:	ldr	r6, [pc, #628]	; 13d00 <__assert_fail@plt+0x2c04>
   13a88:	str	r3, [sp, #24]
   13a8c:	str	r3, [sp, #20]
   13a90:	str	r3, [sp, #16]
   13a94:	str	r3, [sp, #12]
   13a98:	str	r3, [sp, #8]
   13a9c:	str	r3, [sp, #4]
   13aa0:	str	r3, [sp]
   13aa4:	mov	r2, r3
   13aa8:	mov	r1, r0
   13aac:	mov	r0, #1
   13ab0:	bl	11024 <__printf_chk@plt>
   13ab4:	ldm	r6!, {r0, r1, r2, r3}
   13ab8:	add	lr, sp, #32
   13abc:	stmia	lr!, {r0, r1, r2, r3}
   13ac0:	ldm	r6!, {r0, r1, r2, r3}
   13ac4:	ldr	ip, [sp, #32]
   13ac8:	stmia	lr!, {r0, r1, r2, r3}
   13acc:	cmp	ip, #0
   13ad0:	ldm	r6!, {r0, r1, r2, r3}
   13ad4:	stmia	lr!, {r0, r1, r2, r3}
   13ad8:	ldm	r6, {r0, r1}
   13adc:	addeq	r6, sp, #32
   13ae0:	stm	lr, {r0, r1}
   13ae4:	beq	13b14 <__assert_fail@plt+0x2a18>
   13ae8:	ldr	r7, [pc, #532]	; 13d04 <__assert_fail@plt+0x2c08>
   13aec:	add	r6, sp, #32
   13af0:	b	13b00 <__assert_fail@plt+0x2a04>
   13af4:	ldr	ip, [r6, #8]!
   13af8:	cmp	ip, #0
   13afc:	beq	13b14 <__assert_fail@plt+0x2a18>
   13b00:	mov	r1, ip
   13b04:	mov	r0, r7
   13b08:	bl	10e68 <strcmp@plt>
   13b0c:	cmp	r0, #0
   13b10:	bne	13af4 <__assert_fail@plt+0x29f8>
   13b14:	ldr	r6, [r6, #4]
   13b18:	mov	r2, #5
   13b1c:	cmp	r6, #0
   13b20:	ldr	r1, [pc, #480]	; 13d08 <__assert_fail@plt+0x2c0c>
   13b24:	beq	13bcc <__assert_fail@plt+0x2ad0>
   13b28:	mov	r0, #0
   13b2c:	bl	10ef8 <dcgettext@plt>
   13b30:	ldr	r3, [pc, #468]	; 13d0c <__assert_fail@plt+0x2c10>
   13b34:	ldr	r2, [pc, #468]	; 13d10 <__assert_fail@plt+0x2c14>
   13b38:	mov	r1, r0
   13b3c:	mov	r0, #1
   13b40:	bl	11024 <__printf_chk@plt>
   13b44:	mov	r1, #0
   13b48:	mov	r0, #5
   13b4c:	bl	1106c <setlocale@plt>
   13b50:	cmp	r0, #0
   13b54:	ldreq	r7, [pc, #424]	; 13d04 <__assert_fail@plt+0x2c08>
   13b58:	beq	13b74 <__assert_fail@plt+0x2a78>
   13b5c:	mov	r2, #3
   13b60:	ldr	r1, [pc, #428]	; 13d14 <__assert_fail@plt+0x2c18>
   13b64:	bl	110cc <strncmp@plt>
   13b68:	ldr	r7, [pc, #404]	; 13d04 <__assert_fail@plt+0x2c08>
   13b6c:	cmp	r0, #0
   13b70:	bne	13c5c <__assert_fail@plt+0x2b60>
   13b74:	mov	r2, #5
   13b78:	ldr	r1, [pc, #408]	; 13d18 <__assert_fail@plt+0x2c1c>
   13b7c:	mov	r0, #0
   13b80:	bl	10ef8 <dcgettext@plt>
   13b84:	ldr	r3, [pc, #376]	; 13d04 <__assert_fail@plt+0x2c08>
   13b88:	ldr	r2, [pc, #380]	; 13d0c <__assert_fail@plt+0x2c10>
   13b8c:	mov	r1, r0
   13b90:	mov	r0, #1
   13b94:	bl	11024 <__printf_chk@plt>
   13b98:	mov	r2, #5
   13b9c:	ldr	r1, [pc, #376]	; 13d1c <__assert_fail@plt+0x2c20>
   13ba0:	mov	r0, #0
   13ba4:	bl	10ef8 <dcgettext@plt>
   13ba8:	ldr	r2, [pc, #368]	; 13d20 <__assert_fail@plt+0x2c24>
   13bac:	cmp	r6, r7
   13bb0:	ldr	r3, [pc, #364]	; 13d24 <__assert_fail@plt+0x2c28>
   13bb4:	movne	r3, r2
   13bb8:	mov	r1, r0
   13bbc:	mov	r2, r6
   13bc0:	mov	r0, #1
   13bc4:	bl	11024 <__printf_chk@plt>
   13bc8:	b	1379c <__assert_fail@plt+0x26a0>
   13bcc:	mov	r0, r6
   13bd0:	bl	10ef8 <dcgettext@plt>
   13bd4:	ldr	r3, [pc, #304]	; 13d0c <__assert_fail@plt+0x2c10>
   13bd8:	ldr	r2, [pc, #304]	; 13d10 <__assert_fail@plt+0x2c14>
   13bdc:	mov	r1, r0
   13be0:	mov	r0, #1
   13be4:	bl	11024 <__printf_chk@plt>
   13be8:	mov	r1, r6
   13bec:	mov	r0, #5
   13bf0:	bl	1106c <setlocale@plt>
   13bf4:	cmp	r0, #0
   13bf8:	beq	13c10 <__assert_fail@plt+0x2b14>
   13bfc:	mov	r2, #3
   13c00:	ldr	r1, [pc, #268]	; 13d14 <__assert_fail@plt+0x2c18>
   13c04:	bl	110cc <strncmp@plt>
   13c08:	cmp	r0, #0
   13c0c:	bne	13c54 <__assert_fail@plt+0x2b58>
   13c10:	mov	r2, #5
   13c14:	ldr	r1, [pc, #252]	; 13d18 <__assert_fail@plt+0x2c1c>
   13c18:	mov	r0, #0
   13c1c:	bl	10ef8 <dcgettext@plt>
   13c20:	ldr	r3, [pc, #220]	; 13d04 <__assert_fail@plt+0x2c08>
   13c24:	ldr	r2, [pc, #224]	; 13d0c <__assert_fail@plt+0x2c10>
   13c28:	mov	r6, r3
   13c2c:	mov	r1, r0
   13c30:	mov	r0, #1
   13c34:	bl	11024 <__printf_chk@plt>
   13c38:	ldr	r1, [pc, #220]	; 13d1c <__assert_fail@plt+0x2c20>
   13c3c:	mov	r2, #5
   13c40:	mov	r0, #0
   13c44:	bl	10ef8 <dcgettext@plt>
   13c48:	ldr	r3, [pc, #212]	; 13d24 <__assert_fail@plt+0x2c28>
   13c4c:	mov	r1, r0
   13c50:	b	13bbc <__assert_fail@plt+0x2ac0>
   13c54:	ldr	r7, [pc, #168]	; 13d04 <__assert_fail@plt+0x2c08>
   13c58:	mov	r6, r7
   13c5c:	mov	r2, #5
   13c60:	ldr	r1, [pc, #192]	; 13d28 <__assert_fail@plt+0x2c2c>
   13c64:	mov	r0, #0
   13c68:	bl	10ef8 <dcgettext@plt>
   13c6c:	ldr	r1, [r5]
   13c70:	bl	10e44 <fputs_unlocked@plt>
   13c74:	b	13b74 <__assert_fail@plt+0x2a78>
   13c78:	muleq	r2, r0, r1
   13c7c:	andeq	r9, r1, ip, ror #17
   13c80:	andeq	ip, r2, ip, lsl #4
   13c84:	andeq	r9, r1, r4, lsl r9
   13c88:	muleq	r2, ip, r1
   13c8c:	andeq	r9, r1, r8, lsr r9
   13c90:	andeq	r9, r1, r8, lsl #19
   13c94:	ldrdeq	r9, [r1], -r4
   13c98:	andeq	r9, r1, r0, lsl sl
   13c9c:	andeq	r9, r1, r8, asr sl
   13ca0:	ldrdeq	r9, [r1], -r4
   13ca4:	andeq	r9, r1, ip, asr #22
   13ca8:	andeq	r9, r1, r4, asr #23
   13cac:	andeq	r9, r1, r4, lsl ip
   13cb0:			; <UNDEFINED> instruction: 0x00019cb0
   13cb4:	andeq	r9, r1, r8, lsr sp
   13cb8:			; <UNDEFINED> instruction: 0x00019dbc
   13cbc:	andeq	r9, r1, r0, lsl #30
   13cc0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13cc4:	andeq	sl, r1, r8, lsl r0
   13cc8:	andeq	sl, r1, r4, rrx
   13ccc:	andeq	sl, r1, ip, lsr #1
   13cd0:	andeq	sl, r1, ip, ror #1
   13cd4:	andeq	sl, r1, ip, lsl r1
   13cd8:	andeq	sl, r1, r4, asr r1
   13cdc:	andeq	sl, r1, r4, ror #2
   13ce0:	andeq	sl, r1, ip, lsr #3
   13ce4:	andeq	sl, r1, r4, asr r2
   13ce8:	ldrdeq	sl, [r1], -r4
   13cec:	andeq	sl, r1, r4, asr r3
   13cf0:	ldrdeq	sl, [r1], -r4
   13cf4:	andeq	sl, r1, r8, ror #9
   13cf8:	andeq	sl, r1, ip, asr r6
   13cfc:	strdeq	sl, [r1], -r8
   13d00:	andeq	r9, r1, ip, lsl #4
   13d04:	andeq	r9, r1, r4, ror #17
   13d08:			; <UNDEFINED> instruction: 0x0001a9b8
   13d0c:	ldrdeq	sl, [r1], -r0
   13d10:	strdeq	sl, [r1], -r8
   13d14:	andeq	sl, r1, r8, lsl #20
   13d18:	andeq	sl, r1, r4, asr sl
   13d1c:	andeq	sl, r1, r0, ror sl
   13d20:	ldrdeq	sl, [r1], -r0
   13d24:	andeq	sl, r1, r0, asr lr
   13d28:	andeq	sl, r1, ip, lsl #20
   13d2c:	andeq	r0, r0, r0
   13d30:	ldr	r2, [r0]
   13d34:	ldr	r3, [r1]
   13d38:	cmp	r2, r3
   13d3c:	blt	13d4c <__assert_fail@plt+0x2c50>
   13d40:	movgt	r0, #1
   13d44:	movle	r0, #0
   13d48:	bx	lr
   13d4c:	mvn	r0, #0
   13d50:	bx	lr
   13d54:	push	{r4, r5, r6, r7, r8, lr}
   13d58:	mov	r6, r2
   13d5c:	ldr	r8, [pc, #88]	; 13dbc <__assert_fail@plt+0x2cc0>
   13d60:	mov	r7, r3
   13d64:	mov	r4, r0
   13d68:	ldr	r3, [r8]
   13d6c:	ldr	r2, [r8, #4]
   13d70:	mov	r5, r1
   13d74:	cmp	r3, r2
   13d78:	beq	13d9c <__assert_fail@plt+0x2ca0>
   13d7c:	ldr	r1, [r8, #8]
   13d80:	lsl	r2, r3, #4
   13d84:	add	r0, r1, r2
   13d88:	add	r3, r3, #1
   13d8c:	strd	r4, [r1, r2]
   13d90:	strd	r6, [r0, #8]
   13d94:	str	r3, [r8]
   13d98:	pop	{r4, r5, r6, r7, r8, pc}
   13d9c:	add	r1, r8, #4
   13da0:	mov	r2, #16
   13da4:	ldr	r0, [r8, #8]
   13da8:	bl	17214 <__assert_fail@plt+0x6118>
   13dac:	ldr	r3, [r8]
   13db0:	mov	r1, r0
   13db4:	str	r0, [r8, #8]
   13db8:	b	13d80 <__assert_fail@plt+0x2c84>
   13dbc:	strdeq	ip, [r2], -r4
   13dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dc4:	sub	sp, sp, #36	; 0x24
   13dc8:	ands	r3, r1, #1
   13dcc:	str	r1, [sp, #28]
   13dd0:	str	r3, [sp, #24]
   13dd4:	mov	r6, r0
   13dd8:	beq	13dec <__assert_fail@plt+0x2cf0>
   13ddc:	ldr	r1, [pc, #1148]	; 14260 <__assert_fail@plt+0x3164>
   13de0:	bl	10e68 <strcmp@plt>
   13de4:	cmp	r0, #0
   13de8:	beq	1418c <__assert_fail@plt+0x3090>
   13dec:	mov	r4, #0
   13df0:	mov	r5, #0
   13df4:	mov	r9, #0
   13df8:	mov	r3, #0
   13dfc:	mov	r2, #1
   13e00:	mov	fp, #0
   13e04:	strd	r2, [sp]
   13e08:	str	r3, [sp, #20]
   13e0c:	mov	r7, fp
   13e10:	mov	r3, fp
   13e14:	add	r6, r6, #1
   13e18:	str	r2, [sp, #16]
   13e1c:	mov	r8, r9
   13e20:	mov	sl, #1
   13e24:	mov	fp, #0
   13e28:	b	13efc <__assert_fail@plt+0x2e00>
   13e2c:	cmp	r1, #44	; 0x2c
   13e30:	str	r2, [sp, #12]
   13e34:	str	r3, [sp, #8]
   13e38:	str	r1, [sp]
   13e3c:	beq	13f4c <__assert_fail@plt+0x2e50>
   13e40:	bl	10fd0 <__ctype_b_loc@plt>
   13e44:	ldr	r1, [sp]
   13e48:	ldr	r3, [sp, #8]
   13e4c:	ldr	r2, [sp, #12]
   13e50:	lsl	ip, r1, #1
   13e54:	ldr	r0, [r0]
   13e58:	ldrh	r0, [r0, ip]
   13e5c:	and	r0, r0, #1
   13e60:	cmp	r1, #0
   13e64:	orreq	r0, r0, #1
   13e68:	cmp	r0, #0
   13e6c:	bne	13f4c <__assert_fail@plt+0x2e50>
   13e70:	sub	r1, r1, #48	; 0x30
   13e74:	cmp	r1, #9
   13e78:	bhi	1438c <__assert_fail@plt+0x3290>
   13e7c:	cmp	r3, #0
   13e80:	beq	14180 <__assert_fail@plt+0x3084>
   13e84:	ldr	r3, [pc, #1008]	; 1427c <__assert_fail@plt+0x3180>
   13e88:	ldr	r3, [r3, #12]
   13e8c:	cmp	r3, #0
   13e90:	beq	14180 <__assert_fail@plt+0x3084>
   13e94:	add	r3, pc, #956	; 0x3bc
   13e98:	ldrd	r2, [r3]
   13e9c:	cmp	r8, #0
   13ea0:	movne	r7, r8
   13ea4:	moveq	r9, #1
   13ea8:	cmp	r5, r3
   13eac:	cmpeq	r4, r2
   13eb0:	bhi	1431c <__assert_fail@plt+0x3220>
   13eb4:	mov	r0, #10
   13eb8:	umull	r2, r3, r4, r0
   13ebc:	mla	r3, r0, r5, r3
   13ec0:	adds	r2, r2, r1
   13ec4:	adc	r3, r3, r1, asr #31
   13ec8:	and	r1, r2, r3
   13ecc:	cmn	r1, #1
   13ed0:	movne	r1, #0
   13ed4:	moveq	r1, #1
   13ed8:	cmp	r3, r5
   13edc:	cmpeq	r2, r4
   13ee0:	orrcc	r1, r1, #1
   13ee4:	cmp	r1, #0
   13ee8:	bne	1431c <__assert_fail@plt+0x3220>
   13eec:	mov	r5, r3
   13ef0:	mov	r4, r2
   13ef4:	mov	r3, #1
   13ef8:	add	r6, r6, #1
   13efc:	ldrb	r1, [r6, #-1]
   13f00:	sub	r2, r6, #1
   13f04:	cmp	r1, #45	; 0x2d
   13f08:	bne	13e2c <__assert_fail@plt+0x2d30>
   13f0c:	cmp	r8, #0
   13f10:	bne	142fc <__assert_fail@plt+0x3200>
   13f14:	orrs	r3, r4, r5
   13f18:	movne	r3, #0
   13f1c:	andeq	r3, r9, #1
   13f20:	cmp	r3, #0
   13f24:	bne	142a0 <__assert_fail@plt+0x31a4>
   13f28:	cmp	r9, #0
   13f2c:	bne	14168 <__assert_fail@plt+0x306c>
   13f30:	mov	r4, #0
   13f34:	ldr	sl, [sp, #16]
   13f38:	mov	r5, r4
   13f3c:	ldr	fp, [sp, #20]
   13f40:	mov	r3, r4
   13f44:	mov	r8, #1
   13f48:	b	13ef8 <__assert_fail@plt+0x2dfc>
   13f4c:	cmp	r8, #0
   13f50:	beq	13fb0 <__assert_fail@plt+0x2eb4>
   13f54:	orr	r9, r9, r7
   13f58:	tst	r9, #255	; 0xff
   13f5c:	bne	1413c <__assert_fail@plt+0x3040>
   13f60:	ldr	r3, [sp, #24]
   13f64:	cmp	r3, #0
   13f68:	beq	143d8 <__assert_fail@plt+0x32dc>
   13f6c:	ldr	sl, [sp, #16]
   13f70:	ldr	fp, [sp, #20]
   13f74:	mvn	r2, #0
   13f78:	mvn	r3, #0
   13f7c:	mov	r0, sl
   13f80:	mov	r1, fp
   13f84:	bl	13d54 <__assert_fail@plt+0x2c58>
   13f88:	ldrb	r3, [r6, #-1]
   13f8c:	cmp	r3, #0
   13f90:	beq	13fd8 <__assert_fail@plt+0x2edc>
   13f94:	mov	r8, #0
   13f98:	mov	r4, r8
   13f9c:	mov	r5, r8
   13fa0:	mov	r7, r8
   13fa4:	mov	r9, r8
   13fa8:	mov	r3, r8
   13fac:	b	13ef8 <__assert_fail@plt+0x2dfc>
   13fb0:	orrs	r3, r4, r5
   13fb4:	beq	142a0 <__assert_fail@plt+0x31a4>
   13fb8:	mov	r3, r5
   13fbc:	mov	r2, r4
   13fc0:	mov	r0, r4
   13fc4:	mov	r1, r5
   13fc8:	bl	13d54 <__assert_fail@plt+0x2c58>
   13fcc:	ldrb	r3, [r6, #-1]
   13fd0:	cmp	r3, #0
   13fd4:	bne	13f94 <__assert_fail@plt+0x2e98>
   13fd8:	ldr	fp, [pc, #668]	; 1427c <__assert_fail@plt+0x3180>
   13fdc:	ldr	r1, [fp]
   13fe0:	cmp	r1, #0
   13fe4:	beq	143e4 <__assert_fail@plt+0x32e8>
   13fe8:	mov	r9, r3
   13fec:	mov	r2, #16
   13ff0:	ldr	r3, [pc, #620]	; 14264 <__assert_fail@plt+0x3168>
   13ff4:	ldr	r0, [fp, #8]
   13ff8:	bl	110a8 <qsort@plt>
   13ffc:	ldr	sl, [fp]
   14000:	str	r9, [sp]
   14004:	ldr	r3, [sp]
   14008:	ldr	r4, [fp, #8]
   1400c:	mov	r2, sl
   14010:	cmp	r3, r2
   14014:	str	r9, [sp, #8]
   14018:	mov	r1, r4
   1401c:	bcs	140e8 <__assert_fail@plt+0x2fec>
   14020:	ldr	r3, [sp]
   14024:	add	r3, r3, #1
   14028:	cmp	r3, r2
   1402c:	str	r3, [sp]
   14030:	mov	ip, r3
   14034:	bcs	140d0 <__assert_fail@plt+0x2fd4>
   14038:	ldr	lr, [sp, #8]
   1403c:	lsl	r5, r3, #4
   14040:	add	r3, r1, lr
   14044:	ldrd	r6, [r1, r5]
   14048:	ldrd	r8, [r3, #8]
   1404c:	add	r0, r1, r5
   14050:	cmp	r9, r7
   14054:	cmpeq	r8, r6
   14058:	bcc	140d0 <__assert_fail@plt+0x2fd4>
   1405c:	mvn	sl, #-268435456	; 0xf0000000
   14060:	add	r4, lr, #32
   14064:	sub	sl, sl, ip
   14068:	b	1408c <__assert_fail@plt+0x2f90>
   1406c:	ldr	r3, [sp, #8]
   14070:	ldrd	r6, [r1, r5]
   14074:	add	r3, r1, r3
   14078:	add	r0, r1, r5
   1407c:	ldrd	r8, [r3, #8]
   14080:	cmp	r7, r9
   14084:	cmpeq	r6, r8
   14088:	bhi	140d0 <__assert_fail@plt+0x2fd4>
   1408c:	ldrd	r6, [r0, #8]
   14090:	add	r2, sl, r2
   14094:	add	r1, r1, r4
   14098:	cmp	r7, r9
   1409c:	cmpeq	r6, r8
   140a0:	movcc	r6, r8
   140a4:	movcc	r7, r9
   140a8:	lsl	r2, r2, #4
   140ac:	strd	r6, [r3, #8]
   140b0:	bl	10e98 <memmove@plt>
   140b4:	ldr	r2, [fp]
   140b8:	ldr	r3, [sp]
   140bc:	sub	r2, r2, #1
   140c0:	cmp	r3, r2
   140c4:	str	r2, [fp]
   140c8:	ldr	r1, [fp, #8]
   140cc:	bcc	1406c <__assert_fail@plt+0x2f70>
   140d0:	ldr	r3, [sp, #8]
   140d4:	add	r3, r3, #16
   140d8:	str	r3, [sp, #8]
   140dc:	ldr	r3, [sp]
   140e0:	cmp	r3, r2
   140e4:	bcc	14020 <__assert_fail@plt+0x2f24>
   140e8:	ldr	r3, [sp, #28]
   140ec:	mov	sl, r2
   140f0:	tst	r3, #2
   140f4:	mov	r4, r1
   140f8:	bne	141a0 <__assert_fail@plt+0x30a4>
   140fc:	add	sl, sl, #1
   14100:	mov	r0, r4
   14104:	lsl	r1, sl, #4
   14108:	str	sl, [fp]
   1410c:	bl	17148 <__assert_fail@plt+0x604c>
   14110:	ldr	r3, [fp]
   14114:	mvn	r4, #0
   14118:	sub	r3, r3, #-268435455	; 0xf0000001
   1411c:	mvn	r5, #0
   14120:	lsl	r3, r3, #4
   14124:	add	r2, r0, r3
   14128:	str	r0, [fp, #8]
   1412c:	strd	r4, [r2, #8]
   14130:	strd	r4, [r0, r3]
   14134:	add	sp, sp, #36	; 0x24
   14138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1413c:	cmp	r7, #0
   14140:	beq	13f74 <__assert_fail@plt+0x2e78>
   14144:	cmp	fp, r5
   14148:	cmpeq	sl, r4
   1414c:	bhi	142d4 <__assert_fail@plt+0x31d8>
   14150:	mov	r2, r4
   14154:	mov	r3, r5
   14158:	mov	r0, sl
   1415c:	mov	r1, fp
   14160:	bl	13d54 <__assert_fail@plt+0x2c58>
   14164:	b	13f88 <__assert_fail@plt+0x2e8c>
   14168:	mov	sl, r4
   1416c:	mov	r4, #0
   14170:	mov	fp, r5
   14174:	mov	r8, r9
   14178:	mov	r5, r4
   1417c:	b	13ef8 <__assert_fail@plt+0x2dfc>
   14180:	ldr	r3, [pc, #244]	; 1427c <__assert_fail@plt+0x3180>
   14184:	str	r2, [r3, #12]
   14188:	b	13e94 <__assert_fail@plt+0x2d98>
   1418c:	add	r6, r6, #1
   14190:	mov	r4, #1
   14194:	mov	r5, #0
   14198:	mov	r9, #1
   1419c:	b	13df8 <__assert_fail@plt+0x2cfc>
   141a0:	ldrd	r0, [r1]
   141a4:	mov	r3, #0
   141a8:	str	r3, [fp, #8]
   141ac:	cmp	r1, #0
   141b0:	cmpeq	r0, #1
   141b4:	str	r3, [fp]
   141b8:	str	r3, [fp, #4]
   141bc:	bls	141d4 <__assert_fail@plt+0x30d8>
   141c0:	subs	r2, r0, #1
   141c4:	sbc	r3, r1, #0
   141c8:	mov	r0, #1
   141cc:	mov	r1, #0
   141d0:	bl	13d54 <__assert_fail@plt+0x2c58>
   141d4:	cmp	sl, #1
   141d8:	movhi	r5, r4
   141dc:	movhi	r6, #1
   141e0:	bls	1421c <__assert_fail@plt+0x3120>
   141e4:	ldrd	r0, [r5, #8]
   141e8:	ldrd	r2, [r5, #16]
   141ec:	adds	r0, r0, #1
   141f0:	adc	r1, r1, #0
   141f4:	cmp	r1, r3
   141f8:	cmpeq	r0, r2
   141fc:	beq	1420c <__assert_fail@plt+0x3110>
   14200:	subs	r2, r2, #1
   14204:	sbc	r3, r3, #0
   14208:	bl	13d54 <__assert_fail@plt+0x2c58>
   1420c:	add	r6, r6, #1
   14210:	cmp	r6, sl
   14214:	add	r5, r5, #16
   14218:	bne	141e4 <__assert_fail@plt+0x30e8>
   1421c:	add	sl, r4, sl, lsl #4
   14220:	mvn	r3, #0
   14224:	ldrd	r0, [sl, #-8]
   14228:	mvn	r2, #0
   1422c:	cmp	r1, r3
   14230:	cmpeq	r0, r2
   14234:	beq	14244 <__assert_fail@plt+0x3148>
   14238:	adds	r0, r0, #1
   1423c:	adc	r1, r1, #0
   14240:	bl	13d54 <__assert_fail@plt+0x2c58>
   14244:	mov	r0, r4
   14248:	bl	148b0 <__assert_fail@plt+0x37b4>
   1424c:	ldr	sl, [fp]
   14250:	ldr	r4, [fp, #8]
   14254:	b	140fc <__assert_fail@plt+0x3000>
   14258:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1425c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   14260:	andeq	fp, r1, r4, rrx
   14264:	andeq	r3, r1, r0, lsr sp
   14268:	strdeq	sl, [r1], -r8
   1426c:	andeq	fp, r1, r8, lsr #32
   14270:	andeq	fp, r1, r8, rrx
   14274:	andeq	sl, r1, r4, asr #31
   14278:	andeq	sl, r1, r4, ror #31
   1427c:	strdeq	ip, [r2], -r4
   14280:	andeq	fp, r1, r4, lsl #1
   14284:	muleq	r1, r0, r0
   14288:	strheq	fp, [r1], -r8
   1428c:	ldrdeq	fp, [r1], -r8
   14290:	strdeq	fp, [r1], -ip
   14294:	andeq	fp, r1, r4, asr #32
   14298:	andeq	fp, r1, r4, lsl r1
   1429c:	andeq	fp, r1, r0, asr #2
   142a0:	ldr	r3, [sp, #28]
   142a4:	mov	r0, r8
   142a8:	tst	r3, #4
   142ac:	mov	r2, #5
   142b0:	ldrne	r1, [pc, #-80]	; 14268 <__assert_fail@plt+0x316c>
   142b4:	ldreq	r1, [pc, #-80]	; 1426c <__assert_fail@plt+0x3170>
   142b8:	bl	10ef8 <dcgettext@plt>
   142bc:	mov	r1, #0
   142c0:	mov	r2, r0
   142c4:	mov	r0, r1
   142c8:	bl	10f7c <error@plt>
   142cc:	mov	r0, #1
   142d0:	bl	1375c <__assert_fail@plt+0x2660>
   142d4:	ldr	r1, [pc, #-108]	; 14270 <__assert_fail@plt+0x3174>
   142d8:	mov	r2, #5
   142dc:	mov	r0, #0
   142e0:	bl	10ef8 <dcgettext@plt>
   142e4:	mov	r1, #0
   142e8:	mov	r2, r0
   142ec:	mov	r0, r1
   142f0:	bl	10f7c <error@plt>
   142f4:	mov	r0, #1
   142f8:	bl	1375c <__assert_fail@plt+0x2660>
   142fc:	ldr	r3, [sp, #28]
   14300:	mov	r2, #5
   14304:	ands	r0, r3, #4
   14308:	movne	r0, #0
   1430c:	ldrne	r1, [pc, #-160]	; 14274 <__assert_fail@plt+0x3178>
   14310:	ldreq	r1, [pc, #-160]	; 14278 <__assert_fail@plt+0x317c>
   14314:	bl	10ef8 <dcgettext@plt>
   14318:	b	142bc <__assert_fail@plt+0x31c0>
   1431c:	ldr	r3, [pc, #-168]	; 1427c <__assert_fail@plt+0x3180>
   14320:	ldr	r1, [pc, #-168]	; 14280 <__assert_fail@plt+0x3184>
   14324:	ldr	r4, [r3, #12]
   14328:	mov	r0, r4
   1432c:	bl	110f0 <strspn@plt>
   14330:	mov	r1, r0
   14334:	mov	r0, r4
   14338:	bl	175fc <__assert_fail@plt+0x6500>
   1433c:	ldr	r3, [sp, #28]
   14340:	mov	r2, #5
   14344:	mov	r4, r0
   14348:	ands	r0, r3, #4
   1434c:	movne	r0, #0
   14350:	ldrne	r1, [pc, #-212]	; 14284 <__assert_fail@plt+0x3188>
   14354:	ldreq	r1, [pc, #-212]	; 14288 <__assert_fail@plt+0x318c>
   14358:	bl	10ef8 <dcgettext@plt>
   1435c:	mov	r5, r0
   14360:	mov	r0, r4
   14364:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   14368:	mov	r1, #0
   1436c:	mov	r2, r5
   14370:	mov	r3, r0
   14374:	mov	r0, r1
   14378:	bl	10f7c <error@plt>
   1437c:	mov	r0, r4
   14380:	bl	148b0 <__assert_fail@plt+0x37b4>
   14384:	mov	r0, #1
   14388:	bl	1375c <__assert_fail@plt+0x2660>
   1438c:	ldr	r3, [sp, #28]
   14390:	mov	sl, r2
   14394:	ands	r2, r3, #4
   14398:	moveq	r0, r2
   1439c:	movne	r2, #5
   143a0:	ldrne	r1, [pc, #-284]	; 1428c <__assert_fail@plt+0x3190>
   143a4:	moveq	r2, #5
   143a8:	ldreq	r1, [pc, #-288]	; 14290 <__assert_fail@plt+0x3194>
   143ac:	bl	10ef8 <dcgettext@plt>
   143b0:	mov	r4, r0
   143b4:	mov	r0, sl
   143b8:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   143bc:	mov	r1, #0
   143c0:	mov	r2, r4
   143c4:	mov	r3, r0
   143c8:	mov	r0, r1
   143cc:	bl	10f7c <error@plt>
   143d0:	mov	r0, #1
   143d4:	bl	1375c <__assert_fail@plt+0x2660>
   143d8:	mov	r2, #5
   143dc:	ldr	r1, [pc, #-336]	; 14294 <__assert_fail@plt+0x3198>
   143e0:	b	142dc <__assert_fail@plt+0x31e0>
   143e4:	ldr	r3, [sp, #28]
   143e8:	ands	r0, r3, #4
   143ec:	movne	r0, r1
   143f0:	movne	r2, #5
   143f4:	ldrne	r1, [pc, #-356]	; 14298 <__assert_fail@plt+0x319c>
   143f8:	moveq	r2, #5
   143fc:	ldreq	r1, [pc, #-360]	; 1429c <__assert_fail@plt+0x31a0>
   14400:	bl	10ef8 <dcgettext@plt>
   14404:	b	142bc <__assert_fail@plt+0x31c0>
   14408:	mov	r0, #1
   1440c:	b	1375c <__assert_fail@plt+0x2660>
   14410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14414:	mov	r5, r1
   14418:	sub	sp, sp, #12
   1441c:	mov	r4, r2
   14420:	str	r2, [sp]
   14424:	mov	r7, r3
   14428:	mov	sl, r0
   1442c:	bl	10fe8 <strlen@plt>
   14430:	ldr	fp, [r5]
   14434:	cmp	fp, #0
   14438:	beq	14500 <__assert_fail@plt+0x3404>
   1443c:	mov	r3, #0
   14440:	mov	r8, r0
   14444:	str	r3, [sp, #4]
   14448:	mov	r6, r3
   1444c:	mvn	r9, #0
   14450:	b	1447c <__assert_fail@plt+0x3380>
   14454:	bl	10ee0 <memcmp@plt>
   14458:	ldr	r3, [sp, #4]
   1445c:	cmp	r0, #0
   14460:	movne	r3, #1
   14464:	str	r3, [sp, #4]
   14468:	ldr	fp, [r5, #4]!
   1446c:	add	r6, r6, #1
   14470:	cmp	fp, #0
   14474:	add	r4, r4, r7
   14478:	beq	144d8 <__assert_fail@plt+0x33dc>
   1447c:	mov	r2, r8
   14480:	mov	r1, sl
   14484:	mov	r0, fp
   14488:	bl	110cc <strncmp@plt>
   1448c:	cmp	r0, #0
   14490:	mov	r0, fp
   14494:	bne	14468 <__assert_fail@plt+0x336c>
   14498:	bl	10fe8 <strlen@plt>
   1449c:	ldr	r3, [sp]
   144a0:	mov	r2, r7
   144a4:	mov	r1, r4
   144a8:	cmp	r8, r0
   144ac:	mla	r0, r7, r9, r3
   144b0:	beq	144f0 <__assert_fail@plt+0x33f4>
   144b4:	cmn	r9, #1
   144b8:	moveq	r9, r6
   144bc:	beq	14468 <__assert_fail@plt+0x336c>
   144c0:	ldr	r3, [sp]
   144c4:	cmp	r3, #0
   144c8:	bne	14454 <__assert_fail@plt+0x3358>
   144cc:	mov	r3, #1
   144d0:	str	r3, [sp, #4]
   144d4:	b	14468 <__assert_fail@plt+0x336c>
   144d8:	ldr	r3, [sp, #4]
   144dc:	cmp	r3, #0
   144e0:	mvnne	r9, #1
   144e4:	mov	r0, r9
   144e8:	add	sp, sp, #12
   144ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144f0:	mov	r9, r6
   144f4:	mov	r0, r9
   144f8:	add	sp, sp, #12
   144fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14500:	mvn	r9, #0
   14504:	b	144e4 <__assert_fail@plt+0x33e8>
   14508:	push	{r4, r5, r6, lr}
   1450c:	mov	r6, r0
   14510:	ldr	r0, [r1]
   14514:	cmp	r0, #0
   14518:	beq	14550 <__assert_fail@plt+0x3454>
   1451c:	mov	r4, r1
   14520:	mov	r5, #0
   14524:	b	14538 <__assert_fail@plt+0x343c>
   14528:	ldr	r0, [r4, #4]!
   1452c:	add	r5, r5, #1
   14530:	cmp	r0, #0
   14534:	beq	14550 <__assert_fail@plt+0x3454>
   14538:	mov	r1, r6
   1453c:	bl	10e68 <strcmp@plt>
   14540:	cmp	r0, #0
   14544:	bne	14528 <__assert_fail@plt+0x342c>
   14548:	mov	r0, r5
   1454c:	pop	{r4, r5, r6, pc}
   14550:	mvn	r0, #0
   14554:	pop	{r4, r5, r6, pc}
   14558:	cmn	r2, #1
   1455c:	push	{r4, r5, r6, lr}
   14560:	mov	r2, #5
   14564:	sub	sp, sp, #8
   14568:	mov	r4, r1
   1456c:	mov	r5, r0
   14570:	ldreq	r1, [pc, #76]	; 145c4 <__assert_fail@plt+0x34c8>
   14574:	ldrne	r1, [pc, #76]	; 145c8 <__assert_fail@plt+0x34cc>
   14578:	mov	r0, #0
   1457c:	bl	10ef8 <dcgettext@plt>
   14580:	mov	r2, r4
   14584:	mov	r1, #8
   14588:	mov	r6, r0
   1458c:	mov	r0, #0
   14590:	bl	16928 <__assert_fail@plt+0x582c>
   14594:	mov	r1, r5
   14598:	mov	r4, r0
   1459c:	mov	r0, #1
   145a0:	bl	16bc4 <__assert_fail@plt+0x5ac8>
   145a4:	mov	r1, #0
   145a8:	mov	r3, r4
   145ac:	mov	r2, r6
   145b0:	str	r0, [sp]
   145b4:	mov	r0, r1
   145b8:	bl	10f7c <error@plt>
   145bc:	add	sp, sp, #8
   145c0:	pop	{r4, r5, r6, pc}
   145c4:	andeq	fp, r1, r8, ror #2
   145c8:	andeq	fp, r1, r4, lsl #3
   145cc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145d0:	mov	r6, r0
   145d4:	ldr	r9, [pc, #232]	; 146c4 <__assert_fail@plt+0x35c8>
   145d8:	mov	r4, r1
   145dc:	mov	r7, r2
   145e0:	ldr	r1, [pc, #224]	; 146c8 <__assert_fail@plt+0x35cc>
   145e4:	mov	r2, #5
   145e8:	mov	r0, #0
   145ec:	bl	10ef8 <dcgettext@plt>
   145f0:	ldr	r1, [r9]
   145f4:	bl	10e44 <fputs_unlocked@plt>
   145f8:	ldr	fp, [r6]
   145fc:	cmp	fp, #0
   14600:	movne	r8, #0
   14604:	movne	r5, r8
   14608:	movne	sl, #1
   1460c:	bne	1464c <__assert_fail@plt+0x3550>
   14610:	b	14690 <__assert_fail@plt+0x3594>
   14614:	mov	r0, fp
   14618:	ldr	r8, [r9]
   1461c:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   14620:	ldr	r2, [pc, #164]	; 146cc <__assert_fail@plt+0x35d0>
   14624:	mov	r1, sl
   14628:	mov	r3, r0
   1462c:	mov	r0, r8
   14630:	bl	1103c <__fprintf_chk@plt>
   14634:	mov	r8, r4
   14638:	ldr	fp, [r6, #4]!
   1463c:	add	r5, r5, #1
   14640:	cmp	fp, #0
   14644:	add	r4, r4, r7
   14648:	beq	14690 <__assert_fail@plt+0x3594>
   1464c:	cmp	r5, #0
   14650:	mov	r1, r4
   14654:	mov	r2, r7
   14658:	mov	r0, r8
   1465c:	beq	14614 <__assert_fail@plt+0x3518>
   14660:	bl	10ee0 <memcmp@plt>
   14664:	cmp	r0, #0
   14668:	bne	14614 <__assert_fail@plt+0x3518>
   1466c:	mov	r0, fp
   14670:	ldr	fp, [r9]
   14674:	bl	16bd4 <__assert_fail@plt+0x5ad8>
   14678:	ldr	r2, [pc, #80]	; 146d0 <__assert_fail@plt+0x35d4>
   1467c:	mov	r1, sl
   14680:	mov	r3, r0
   14684:	mov	r0, fp
   14688:	bl	1103c <__fprintf_chk@plt>
   1468c:	b	14638 <__assert_fail@plt+0x353c>
   14690:	ldr	r0, [r9]
   14694:	ldr	r3, [r0, #20]
   14698:	ldr	r2, [r0, #24]
   1469c:	cmp	r3, r2
   146a0:	bcs	146b8 <__assert_fail@plt+0x35bc>
   146a4:	add	r1, r3, #1
   146a8:	mov	r2, #10
   146ac:	str	r1, [r0, #20]
   146b0:	strb	r2, [r3]
   146b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146b8:	mov	r1, #10
   146bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c0:	b	11060 <__overflow@plt>
   146c4:	muleq	r2, r0, r1
   146c8:	andeq	fp, r1, r4, lsr #3
   146cc:			; <UNDEFINED> instruction: 0x0001b1bc
   146d0:	andeq	fp, r1, r4, asr #3
   146d4:	push	{r4, r5, r6, r7, r8, lr}
   146d8:	mov	r7, r0
   146dc:	ldrb	ip, [sp, #32]
   146e0:	mov	r5, r1
   146e4:	mov	r4, r2
   146e8:	cmp	ip, #0
   146ec:	mov	r6, r3
   146f0:	beq	14740 <__assert_fail@plt+0x3644>
   146f4:	ldr	r3, [sp, #24]
   146f8:	mov	r2, r6
   146fc:	mov	r1, r4
   14700:	mov	r0, r5
   14704:	bl	14410 <__assert_fail@plt+0x3314>
   14708:	cmp	r0, #0
   1470c:	popge	{r4, r5, r6, r7, r8, pc}
   14710:	mov	r2, r0
   14714:	mov	r1, r5
   14718:	mov	r0, r7
   1471c:	bl	14558 <__assert_fail@plt+0x345c>
   14720:	mov	r0, r4
   14724:	ldr	r2, [sp, #24]
   14728:	mov	r1, r6
   1472c:	bl	145cc <__assert_fail@plt+0x34d0>
   14730:	ldr	r3, [sp, #28]
   14734:	blx	r3
   14738:	mvn	r0, #0
   1473c:	pop	{r4, r5, r6, r7, r8, pc}
   14740:	mov	r1, r2
   14744:	mov	r0, r5
   14748:	bl	14508 <__assert_fail@plt+0x340c>
   1474c:	cmp	r0, #0
   14750:	popge	{r4, r5, r6, r7, r8, pc}
   14754:	b	14710 <__assert_fail@plt+0x3614>
   14758:	push	{r4, r5, r6, r7, r8, lr}
   1475c:	ldr	r7, [r1]
   14760:	cmp	r7, #0
   14764:	beq	147a4 <__assert_fail@plt+0x36a8>
   14768:	mov	r6, r3
   1476c:	mov	r8, r0
   14770:	mov	r4, r2
   14774:	mov	r5, r1
   14778:	b	14788 <__assert_fail@plt+0x368c>
   1477c:	ldr	r7, [r5, #4]!
   14780:	cmp	r7, #0
   14784:	beq	147a4 <__assert_fail@plt+0x36a8>
   14788:	mov	r1, r4
   1478c:	mov	r2, r6
   14790:	mov	r0, r8
   14794:	bl	10ee0 <memcmp@plt>
   14798:	add	r4, r4, r6
   1479c:	cmp	r0, #0
   147a0:	bne	1477c <__assert_fail@plt+0x3680>
   147a4:	mov	r0, r7
   147a8:	pop	{r4, r5, r6, r7, r8, pc}
   147ac:	ldr	r3, [pc, #4]	; 147b8 <__assert_fail@plt+0x36bc>
   147b0:	str	r0, [r3]
   147b4:	bx	lr
   147b8:	andeq	ip, r2, r4, lsl #4
   147bc:	ldr	r3, [pc, #4]	; 147c8 <__assert_fail@plt+0x36cc>
   147c0:	strb	r0, [r3, #4]
   147c4:	bx	lr
   147c8:	andeq	ip, r2, r4, lsl #4
   147cc:	ldr	r3, [pc, #192]	; 14894 <__assert_fail@plt+0x3798>
   147d0:	push	{r4, r5, r6, lr}
   147d4:	sub	sp, sp, #8
   147d8:	ldr	r0, [r3]
   147dc:	bl	18334 <__assert_fail@plt+0x7238>
   147e0:	cmp	r0, #0
   147e4:	beq	14808 <__assert_fail@plt+0x370c>
   147e8:	ldr	r4, [pc, #168]	; 14898 <__assert_fail@plt+0x379c>
   147ec:	ldrb	r3, [r4, #4]
   147f0:	cmp	r3, #0
   147f4:	beq	14824 <__assert_fail@plt+0x3728>
   147f8:	bl	11000 <__errno_location@plt>
   147fc:	ldr	r3, [r0]
   14800:	cmp	r3, #32
   14804:	bne	14824 <__assert_fail@plt+0x3728>
   14808:	ldr	r3, [pc, #140]	; 1489c <__assert_fail@plt+0x37a0>
   1480c:	ldr	r0, [r3]
   14810:	bl	18334 <__assert_fail@plt+0x7238>
   14814:	cmp	r0, #0
   14818:	bne	1486c <__assert_fail@plt+0x3770>
   1481c:	add	sp, sp, #8
   14820:	pop	{r4, r5, r6, pc}
   14824:	mov	r2, #5
   14828:	ldr	r1, [pc, #112]	; 148a0 <__assert_fail@plt+0x37a4>
   1482c:	mov	r0, #0
   14830:	bl	10ef8 <dcgettext@plt>
   14834:	ldr	r4, [r4]
   14838:	cmp	r4, #0
   1483c:	mov	r5, r0
   14840:	beq	14878 <__assert_fail@plt+0x377c>
   14844:	bl	11000 <__errno_location@plt>
   14848:	ldr	r6, [r0]
   1484c:	mov	r0, r4
   14850:	bl	16a3c <__assert_fail@plt+0x5940>
   14854:	mov	r1, r6
   14858:	str	r5, [sp]
   1485c:	ldr	r2, [pc, #64]	; 148a4 <__assert_fail@plt+0x37a8>
   14860:	mov	r3, r0
   14864:	mov	r0, #0
   14868:	bl	10f7c <error@plt>
   1486c:	ldr	r3, [pc, #52]	; 148a8 <__assert_fail@plt+0x37ac>
   14870:	ldr	r0, [r3]
   14874:	bl	10eb0 <_exit@plt>
   14878:	bl	11000 <__errno_location@plt>
   1487c:	mov	r3, r5
   14880:	ldr	r2, [pc, #36]	; 148ac <__assert_fail@plt+0x37b0>
   14884:	ldr	r1, [r0]
   14888:	mov	r0, r4
   1488c:	bl	10f7c <error@plt>
   14890:	b	1486c <__assert_fail@plt+0x3770>
   14894:	muleq	r2, ip, r1
   14898:	andeq	ip, r2, r4, lsl #4
   1489c:	muleq	r2, r0, r1
   148a0:	andeq	fp, r1, ip, asr #3
   148a4:	ldrdeq	r9, [r1], -r4
   148a8:	andeq	ip, r2, ip, lsr r1
   148ac:	andeq	r9, r1, r8, ror r4
   148b0:	push	{r4, r5, lr}
   148b4:	sub	sp, sp, #12
   148b8:	mov	r5, r0
   148bc:	bl	11000 <__errno_location@plt>
   148c0:	mov	r2, #0
   148c4:	mov	r4, r0
   148c8:	ldr	r3, [r0]
   148cc:	str	r2, [r4]
   148d0:	mov	r0, r5
   148d4:	str	r3, [sp]
   148d8:	str	r3, [sp, #4]
   148dc:	bl	10ea4 <free@plt>
   148e0:	ldr	r3, [r4]
   148e4:	add	r2, sp, #8
   148e8:	cmp	r3, #0
   148ec:	moveq	r3, #4
   148f0:	movne	r3, #0
   148f4:	add	r3, r2, r3
   148f8:	ldr	r3, [r3, #-8]
   148fc:	str	r3, [r4]
   14900:	add	sp, sp, #12
   14904:	pop	{r4, r5, pc}
   14908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1490c:	sub	sp, sp, #12
   14910:	mov	r9, r3
   14914:	mov	r4, r1
   14918:	str	r2, [sp]
   1491c:	mov	fp, r0
   14920:	bl	10fe8 <strlen@plt>
   14924:	ldr	r3, [sp, #52]	; 0x34
   14928:	ands	r5, r3, #2
   1492c:	mov	r7, r0
   14930:	beq	14ab4 <__assert_fail@plt+0x39b8>
   14934:	mov	r8, #0
   14938:	mov	sl, r8
   1493c:	mov	r5, r7
   14940:	ldr	r2, [r9]
   14944:	cmp	r5, r2
   14948:	movhi	r7, r2
   1494c:	movhi	r6, #0
   14950:	bls	14a74 <__assert_fail@plt+0x3978>
   14954:	ldr	r3, [sp, #48]	; 0x30
   14958:	str	r2, [r9]
   1495c:	cmp	r3, #0
   14960:	beq	14a98 <__assert_fail@plt+0x399c>
   14964:	cmp	r3, #1
   14968:	moveq	r9, #0
   1496c:	bne	14aa4 <__assert_fail@plt+0x39a8>
   14970:	ldr	r3, [sp, #52]	; 0x34
   14974:	tst	r3, #4
   14978:	movne	r6, #0
   1497c:	tst	r3, #8
   14980:	ldr	r3, [sp]
   14984:	movne	r9, #0
   14988:	cmp	r3, #0
   1498c:	beq	14a28 <__assert_fail@plt+0x392c>
   14990:	sub	r5, r3, #1
   14994:	add	r5, r4, r5
   14998:	cmp	r6, #0
   1499c:	cmpne	r4, r5
   149a0:	sub	r3, r6, #1
   149a4:	bcs	149cc <__assert_fail@plt+0x38d0>
   149a8:	mov	r1, #32
   149ac:	strb	r1, [r4], #1
   149b0:	cmp	r3, #0
   149b4:	cmpne	r5, r4
   149b8:	movhi	r2, #1
   149bc:	movls	r2, #0
   149c0:	cmp	r2, #0
   149c4:	sub	r3, r3, #1
   149c8:	bne	149ac <__assert_fail@plt+0x38b0>
   149cc:	sub	r2, r5, r4
   149d0:	cmp	r2, r7
   149d4:	mov	r3, #0
   149d8:	movcs	r2, r7
   149dc:	strb	r3, [r4]
   149e0:	mov	r1, fp
   149e4:	mov	r0, r4
   149e8:	bl	10fb8 <mempcpy@plt>
   149ec:	sub	r3, r9, #1
   149f0:	cmp	r9, #0
   149f4:	cmpne	r5, r0
   149f8:	bls	14a20 <__assert_fail@plt+0x3924>
   149fc:	mov	r1, #32
   14a00:	strb	r1, [r0], #1
   14a04:	cmp	r3, #0
   14a08:	cmpne	r5, r0
   14a0c:	movhi	r2, #1
   14a10:	movls	r2, #0
   14a14:	cmp	r2, #0
   14a18:	sub	r3, r3, #1
   14a1c:	bne	14a00 <__assert_fail@plt+0x3904>
   14a20:	mov	r3, #0
   14a24:	strb	r3, [r0]
   14a28:	add	r6, r6, r7
   14a2c:	add	r9, r6, r9
   14a30:	mov	r0, r8
   14a34:	bl	148b0 <__assert_fail@plt+0x37b4>
   14a38:	mov	r0, sl
   14a3c:	bl	148b0 <__assert_fail@plt+0x37b4>
   14a40:	mov	r0, r9
   14a44:	add	sp, sp, #12
   14a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a4c:	mov	r1, sl
   14a50:	mov	r0, r8
   14a54:	bl	11078 <wcswidth@plt>
   14a58:	mov	r5, r0
   14a5c:	ldr	r2, [r9]
   14a60:	cmp	r2, r5
   14a64:	addcc	r3, r7, #1
   14a68:	strcc	r3, [sp, #4]
   14a6c:	bcc	14ba0 <__assert_fail@plt+0x3aa4>
   14a70:	mov	sl, #0
   14a74:	ldr	r3, [sp, #48]	; 0x30
   14a78:	cmp	r5, r2
   14a7c:	movcs	r2, r5
   14a80:	subcc	r6, r2, r5
   14a84:	movcs	r6, #0
   14a88:	movcc	r2, r5
   14a8c:	cmp	r3, #0
   14a90:	str	r2, [r9]
   14a94:	bne	14964 <__assert_fail@plt+0x3868>
   14a98:	mov	r9, r6
   14a9c:	ldr	r6, [sp, #48]	; 0x30
   14aa0:	b	14970 <__assert_fail@plt+0x3874>
   14aa4:	lsr	r9, r6, #1
   14aa8:	and	r6, r6, #1
   14aac:	add	r6, r6, r9
   14ab0:	b	14970 <__assert_fail@plt+0x3874>
   14ab4:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   14ab8:	cmp	r0, #1
   14abc:	bls	14934 <__assert_fail@plt+0x3838>
   14ac0:	mov	r2, r5
   14ac4:	mov	r1, fp
   14ac8:	mov	r0, r5
   14acc:	bl	1109c <mbstowcs@plt>
   14ad0:	cmn	r0, #1
   14ad4:	bne	14af4 <__assert_fail@plt+0x39f8>
   14ad8:	ldr	r3, [sp, #52]	; 0x34
   14adc:	tst	r3, #1
   14ae0:	bne	14934 <__assert_fail@plt+0x3838>
   14ae4:	mov	r8, #0
   14ae8:	mov	sl, r8
   14aec:	mvn	r9, #0
   14af0:	b	14a30 <__assert_fail@plt+0x3934>
   14af4:	add	sl, r0, #1
   14af8:	lsl	r6, sl, #2
   14afc:	mov	r0, r6
   14b00:	bl	182ac <__assert_fail@plt+0x71b0>
   14b04:	subs	r8, r0, #0
   14b08:	beq	14c44 <__assert_fail@plt+0x3b48>
   14b0c:	mov	r2, sl
   14b10:	mov	r1, fp
   14b14:	bl	1109c <mbstowcs@plt>
   14b18:	cmp	r0, #0
   14b1c:	beq	14c24 <__assert_fail@plt+0x3b28>
   14b20:	add	r6, r8, r6
   14b24:	str	r5, [r6, #-4]
   14b28:	ldr	r6, [r8]
   14b2c:	cmp	r6, #0
   14b30:	beq	14a4c <__assert_fail@plt+0x3950>
   14b34:	mov	r3, r5
   14b38:	mov	r0, r6
   14b3c:	mov	r5, r8
   14b40:	mov	r6, r3
   14b44:	bl	10f1c <iswprint@plt>
   14b48:	cmp	r0, #0
   14b4c:	moveq	r6, #1
   14b50:	ldreq	r3, [pc, #272]	; 14c68 <__assert_fail@plt+0x3b6c>
   14b54:	streq	r3, [r5]
   14b58:	ldr	r0, [r5, #4]!
   14b5c:	cmp	r0, #0
   14b60:	bne	14b44 <__assert_fail@plt+0x3a48>
   14b64:	str	r6, [sp, #4]
   14b68:	mov	r1, sl
   14b6c:	mov	r6, r0
   14b70:	mov	r0, r8
   14b74:	bl	11078 <wcswidth@plt>
   14b78:	ldr	r3, [sp, #4]
   14b7c:	cmp	r3, #0
   14b80:	mov	r5, r0
   14b84:	beq	14a5c <__assert_fail@plt+0x3960>
   14b88:	mov	r2, r6
   14b8c:	mov	r0, r6
   14b90:	mov	r1, r8
   14b94:	bl	10f70 <wcstombs@plt>
   14b98:	add	r3, r0, #1
   14b9c:	str	r3, [sp, #4]
   14ba0:	ldr	r0, [sp, #4]
   14ba4:	bl	182ac <__assert_fail@plt+0x71b0>
   14ba8:	subs	sl, r0, #0
   14bac:	beq	14c30 <__assert_fail@plt+0x3b34>
   14bb0:	ldr	r0, [r8]
   14bb4:	ldr	r6, [r9]
   14bb8:	cmp	r0, #0
   14bbc:	beq	14c5c <__assert_fail@plt+0x3b60>
   14bc0:	mov	r7, r8
   14bc4:	mov	r5, #0
   14bc8:	mov	fp, #1
   14bcc:	b	14be0 <__assert_fail@plt+0x3ae4>
   14bd0:	ldr	r0, [r7, #4]!
   14bd4:	mov	r5, r3
   14bd8:	cmp	r0, #0
   14bdc:	beq	14c00 <__assert_fail@plt+0x3b04>
   14be0:	bl	10e8c <wcwidth@plt>
   14be4:	cmn	r0, #1
   14be8:	moveq	r0, fp
   14bec:	ldreq	r3, [pc, #116]	; 14c68 <__assert_fail@plt+0x3b6c>
   14bf0:	streq	r3, [r7]
   14bf4:	add	r3, r0, r5
   14bf8:	cmp	r6, r3
   14bfc:	bcs	14bd0 <__assert_fail@plt+0x3ad4>
   14c00:	mov	r0, #0
   14c04:	str	r0, [r7]
   14c08:	ldr	r2, [sp, #4]
   14c0c:	mov	r1, r8
   14c10:	mov	r0, sl
   14c14:	bl	10f70 <wcstombs@plt>
   14c18:	mov	fp, sl
   14c1c:	mov	r7, r0
   14c20:	b	14940 <__assert_fail@plt+0x3844>
   14c24:	mov	sl, r0
   14c28:	mov	r5, r7
   14c2c:	b	14940 <__assert_fail@plt+0x3844>
   14c30:	ldr	r3, [sp, #52]	; 0x34
   14c34:	tst	r3, #1
   14c38:	mvneq	r9, #0
   14c3c:	beq	14a30 <__assert_fail@plt+0x3934>
   14c40:	b	14940 <__assert_fail@plt+0x3844>
   14c44:	ldr	r3, [sp, #52]	; 0x34
   14c48:	tst	r3, #1
   14c4c:	beq	14ae4 <__assert_fail@plt+0x39e8>
   14c50:	mov	r5, r7
   14c54:	mov	sl, r8
   14c58:	b	14940 <__assert_fail@plt+0x3844>
   14c5c:	mov	r5, r0
   14c60:	mov	r7, r8
   14c64:	b	14c00 <__assert_fail@plt+0x3b04>
   14c68:	strdeq	pc, [r0], -sp
   14c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c70:	mov	r9, r0
   14c74:	ldr	r8, [r1]
   14c78:	sub	sp, sp, #12
   14c7c:	mov	r6, r1
   14c80:	mov	fp, r2
   14c84:	mov	sl, r3
   14c88:	mov	r0, r8
   14c8c:	mov	r7, #0
   14c90:	add	r4, r0, #1
   14c94:	mov	r1, r4
   14c98:	mov	r0, r7
   14c9c:	bl	182d8 <__assert_fail@plt+0x71dc>
   14ca0:	mov	r3, r6
   14ca4:	mov	r2, r4
   14ca8:	subs	r5, r0, #0
   14cac:	mov	r1, r5
   14cb0:	mov	r0, r9
   14cb4:	beq	14ce8 <__assert_fail@plt+0x3bec>
   14cb8:	str	r8, [r6]
   14cbc:	str	sl, [sp, #4]
   14cc0:	str	fp, [sp]
   14cc4:	bl	14908 <__assert_fail@plt+0x380c>
   14cc8:	cmn	r0, #1
   14ccc:	beq	14cfc <__assert_fail@plt+0x3c00>
   14cd0:	cmp	r4, r0
   14cd4:	mov	r7, r5
   14cd8:	bls	14c90 <__assert_fail@plt+0x3b94>
   14cdc:	mov	r0, r5
   14ce0:	add	sp, sp, #12
   14ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ce8:	mov	r0, r7
   14cec:	bl	148b0 <__assert_fail@plt+0x37b4>
   14cf0:	mov	r0, r5
   14cf4:	add	sp, sp, #12
   14cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cfc:	mov	r0, r5
   14d00:	bl	148b0 <__assert_fail@plt+0x37b4>
   14d04:	mov	r5, #0
   14d08:	mov	r0, r5
   14d0c:	add	sp, sp, #12
   14d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d14:	push	{r4, r5, r6, lr}
   14d18:	subs	r4, r0, #0
   14d1c:	beq	14d90 <__assert_fail@plt+0x3c94>
   14d20:	mov	r1, #47	; 0x2f
   14d24:	bl	11084 <strrchr@plt>
   14d28:	subs	r5, r0, #0
   14d2c:	beq	14d7c <__assert_fail@plt+0x3c80>
   14d30:	add	r6, r5, #1
   14d34:	sub	r3, r6, r4
   14d38:	cmp	r3, #6
   14d3c:	ble	14d7c <__assert_fail@plt+0x3c80>
   14d40:	mov	r2, #7
   14d44:	ldr	r1, [pc, #96]	; 14dac <__assert_fail@plt+0x3cb0>
   14d48:	sub	r0, r5, #6
   14d4c:	bl	110cc <strncmp@plt>
   14d50:	cmp	r0, #0
   14d54:	bne	14d7c <__assert_fail@plt+0x3c80>
   14d58:	mov	r2, #3
   14d5c:	ldr	r1, [pc, #76]	; 14db0 <__assert_fail@plt+0x3cb4>
   14d60:	mov	r0, r6
   14d64:	bl	110cc <strncmp@plt>
   14d68:	cmp	r0, #0
   14d6c:	movne	r4, r6
   14d70:	ldreq	r3, [pc, #60]	; 14db4 <__assert_fail@plt+0x3cb8>
   14d74:	addeq	r4, r5, #4
   14d78:	streq	r4, [r3]
   14d7c:	ldr	r2, [pc, #52]	; 14db8 <__assert_fail@plt+0x3cbc>
   14d80:	ldr	r3, [pc, #52]	; 14dbc <__assert_fail@plt+0x3cc0>
   14d84:	str	r4, [r2]
   14d88:	str	r4, [r3]
   14d8c:	pop	{r4, r5, r6, pc}
   14d90:	ldr	r3, [pc, #40]	; 14dc0 <__assert_fail@plt+0x3cc4>
   14d94:	mov	r2, #55	; 0x37
   14d98:	mov	r1, #1
   14d9c:	ldr	r3, [r3]
   14da0:	ldr	r0, [pc, #28]	; 14dc4 <__assert_fail@plt+0x3cc8>
   14da4:	bl	10f28 <fwrite@plt>
   14da8:	bl	110d8 <abort@plt>
   14dac:	andeq	fp, r1, r0, lsl r2
   14db0:	andeq	fp, r1, r8, lsl r2
   14db4:	andeq	ip, r2, r0, lsl #3
   14db8:	andeq	ip, r2, ip, lsl #4
   14dbc:	andeq	ip, r2, r4, lsl #3
   14dc0:	muleq	r2, r0, r1
   14dc4:	ldrdeq	fp, [r1], -r8
   14dc8:	push	{r4, r5, r6, lr}
   14dcc:	mov	r2, #48	; 0x30
   14dd0:	mov	r4, r1
   14dd4:	mov	r1, #0
   14dd8:	mov	r5, r0
   14ddc:	bl	11018 <memset@plt>
   14de0:	cmp	r4, #10
   14de4:	beq	14df4 <__assert_fail@plt+0x3cf8>
   14de8:	str	r4, [r5]
   14dec:	mov	r0, r5
   14df0:	pop	{r4, r5, r6, pc}
   14df4:	bl	110d8 <abort@plt>
   14df8:	push	{r4, r5, r6, lr}
   14dfc:	mov	r4, r0
   14e00:	mov	r5, r1
   14e04:	bl	18550 <__assert_fail@plt+0x7454>
   14e08:	ldrb	r3, [r0]
   14e0c:	bic	r3, r3, #32
   14e10:	cmp	r3, #85	; 0x55
   14e14:	bne	14e74 <__assert_fail@plt+0x3d78>
   14e18:	ldrb	r3, [r0, #1]
   14e1c:	bic	r3, r3, #32
   14e20:	cmp	r3, #84	; 0x54
   14e24:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14e28:	ldrb	r3, [r0, #2]
   14e2c:	bic	r3, r3, #32
   14e30:	cmp	r3, #70	; 0x46
   14e34:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14e38:	ldrb	r3, [r0, #3]
   14e3c:	cmp	r3, #45	; 0x2d
   14e40:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14e44:	ldrb	r3, [r0, #4]
   14e48:	cmp	r3, #56	; 0x38
   14e4c:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14e50:	ldrb	r3, [r0, #5]
   14e54:	cmp	r3, #0
   14e58:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14e5c:	ldrb	r2, [r4]
   14e60:	ldr	r3, [pc, #152]	; 14f00 <__assert_fail@plt+0x3e04>
   14e64:	ldr	r0, [pc, #152]	; 14f04 <__assert_fail@plt+0x3e08>
   14e68:	cmp	r2, #96	; 0x60
   14e6c:	movne	r0, r3
   14e70:	pop	{r4, r5, r6, pc}
   14e74:	cmp	r3, #71	; 0x47
   14e78:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14e7c:	ldrb	r3, [r0, #1]
   14e80:	bic	r3, r3, #32
   14e84:	cmp	r3, #66	; 0x42
   14e88:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14e8c:	ldrb	r3, [r0, #2]
   14e90:	cmp	r3, #49	; 0x31
   14e94:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14e98:	ldrb	r3, [r0, #3]
   14e9c:	cmp	r3, #56	; 0x38
   14ea0:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14ea4:	ldrb	r3, [r0, #4]
   14ea8:	cmp	r3, #48	; 0x30
   14eac:	beq	14ec4 <__assert_fail@plt+0x3dc8>
   14eb0:	ldr	r3, [pc, #80]	; 14f08 <__assert_fail@plt+0x3e0c>
   14eb4:	cmp	r5, #9
   14eb8:	ldr	r0, [pc, #76]	; 14f0c <__assert_fail@plt+0x3e10>
   14ebc:	movne	r0, r3
   14ec0:	pop	{r4, r5, r6, pc}
   14ec4:	ldrb	r3, [r0, #5]
   14ec8:	cmp	r3, #51	; 0x33
   14ecc:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14ed0:	ldrb	r3, [r0, #6]
   14ed4:	cmp	r3, #48	; 0x30
   14ed8:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14edc:	ldrb	r3, [r0, #7]
   14ee0:	cmp	r3, #0
   14ee4:	bne	14eb0 <__assert_fail@plt+0x3db4>
   14ee8:	ldrb	r2, [r4]
   14eec:	ldr	r3, [pc, #28]	; 14f10 <__assert_fail@plt+0x3e14>
   14ef0:	ldr	r0, [pc, #28]	; 14f14 <__assert_fail@plt+0x3e18>
   14ef4:	cmp	r2, #96	; 0x60
   14ef8:	movne	r0, r3
   14efc:	pop	{r4, r5, r6, pc}
   14f00:	andeq	fp, r1, r4, ror r2
   14f04:	andeq	fp, r1, r0, ror r2
   14f08:	andeq	fp, r1, r4, lsl #5
   14f0c:	andeq	fp, r1, r0, lsl #5
   14f10:	andeq	fp, r1, ip, ror r2
   14f14:	andeq	fp, r1, r8, ror r2
   14f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f1c:	sub	sp, sp, #116	; 0x74
   14f20:	mov	sl, r0
   14f24:	str	r3, [sp, #24]
   14f28:	mov	r3, #1
   14f2c:	mov	r8, r1
   14f30:	str	r2, [sp, #56]	; 0x38
   14f34:	str	r3, [sp, #36]	; 0x24
   14f38:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   14f3c:	ldr	r3, [sp, #156]	; 0x9c
   14f40:	mov	fp, r8
   14f44:	mov	r2, #0
   14f48:	lsr	r3, r3, #1
   14f4c:	and	r3, r3, #1
   14f50:	str	r2, [sp, #68]	; 0x44
   14f54:	str	r3, [sp, #28]
   14f58:	str	r2, [sp, #40]	; 0x28
   14f5c:	str	r2, [sp, #44]	; 0x2c
   14f60:	str	r2, [sp, #52]	; 0x34
   14f64:	str	r2, [sp, #64]	; 0x40
   14f68:	str	r2, [sp, #72]	; 0x48
   14f6c:	str	sl, [sp, #32]
   14f70:	str	r0, [sp, #76]	; 0x4c
   14f74:	ldr	r3, [sp, #152]	; 0x98
   14f78:	cmp	r3, #10
   14f7c:	ldrls	pc, [pc, r3, lsl #2]
   14f80:	b	16140 <__assert_fail@plt+0x5044>
   14f84:			; <UNDEFINED> instruction: 0x00014fb0
   14f88:	muleq	r1, r8, r2
   14f8c:			; <UNDEFINED> instruction: 0x000152bc
   14f90:	andeq	r5, r1, r0, ror #5
   14f94:	andeq	r5, r1, ip, lsl #8
   14f98:	andeq	r5, r1, r0, ror #7
   14f9c:			; <UNDEFINED> instruction: 0x000153b8
   14fa0:	strdeq	r5, [r1], -r4
   14fa4:	andeq	r5, r1, ip, lsl #6
   14fa8:	andeq	r5, r1, ip, lsl #6
   14fac:	andeq	r5, r1, ip, lsl #6
   14fb0:	mov	r3, #0
   14fb4:	mov	r7, r3
   14fb8:	str	r3, [sp, #28]
   14fbc:	ldr	r3, [sp, #44]	; 0x2c
   14fc0:	mov	sl, #0
   14fc4:	eor	r3, r3, #1
   14fc8:	str	r3, [sp, #60]	; 0x3c
   14fcc:	ldr	r3, [sp, #24]
   14fd0:	cmn	r3, #1
   14fd4:	beq	15538 <__assert_fail@plt+0x443c>
   14fd8:	ldr	r3, [sp, #24]
   14fdc:	subs	r5, r3, sl
   14fe0:	movne	r5, #1
   14fe4:	cmp	r5, #0
   14fe8:	beq	15550 <__assert_fail@plt+0x4454>
   14fec:	ldr	r3, [sp, #152]	; 0x98
   14ff0:	ldr	r8, [sp, #44]	; 0x2c
   14ff4:	cmp	r3, #2
   14ff8:	moveq	r8, #0
   14ffc:	andne	r8, r8, #1
   15000:	ldr	r3, [sp, #52]	; 0x34
   15004:	adds	r9, r3, #0
   15008:	movne	r9, #1
   1500c:	ands	r6, r9, r8
   15010:	beq	159b8 <__assert_fail@plt+0x48bc>
   15014:	ldr	r2, [sp, #52]	; 0x34
   15018:	ldr	r1, [sp, #24]
   1501c:	cmp	r2, #1
   15020:	mov	r3, r2
   15024:	movls	r3, #0
   15028:	movhi	r3, #1
   1502c:	cmn	r1, #1
   15030:	movne	r3, #0
   15034:	cmp	r3, #0
   15038:	add	r4, sl, r2
   1503c:	beq	1504c <__assert_fail@plt+0x3f50>
   15040:	ldr	r0, [sp, #56]	; 0x38
   15044:	bl	10fe8 <strlen@plt>
   15048:	str	r0, [sp, #24]
   1504c:	ldr	r3, [sp, #24]
   15050:	cmp	r3, r4
   15054:	ldr	r3, [sp, #56]	; 0x38
   15058:	add	r3, r3, sl
   1505c:	str	r3, [sp, #48]	; 0x30
   15060:	bcc	159c4 <__assert_fail@plt+0x48c8>
   15064:	mov	r0, r3
   15068:	ldr	r2, [sp, #52]	; 0x34
   1506c:	ldr	r1, [sp, #64]	; 0x40
   15070:	bl	10ee0 <memcmp@plt>
   15074:	cmp	r0, #0
   15078:	bne	159c4 <__assert_fail@plt+0x48c8>
   1507c:	ldr	r3, [sp, #28]
   15080:	cmp	r3, #0
   15084:	bne	16240 <__assert_fail@plt+0x5144>
   15088:	ldr	r3, [sp, #48]	; 0x30
   1508c:	ldrb	r4, [r3]
   15090:	cmp	r4, #126	; 0x7e
   15094:	ldrls	pc, [pc, r4, lsl #2]
   15098:	b	15958 <__assert_fail@plt+0x485c>
   1509c:	andeq	r5, r1, ip, ror r7
   150a0:	andeq	r5, r1, r8, asr r9
   150a4:	andeq	r5, r1, r8, asr r9
   150a8:	andeq	r5, r1, r8, asr r9
   150ac:	andeq	r5, r1, r8, asr r9
   150b0:	andeq	r5, r1, r8, asr r9
   150b4:	andeq	r5, r1, r8, asr r9
   150b8:	andeq	r5, r1, r0, ror #14
   150bc:	andeq	r5, r1, r4, asr #14
   150c0:	andeq	r5, r1, r0, asr #18
   150c4:	andeq	r5, r1, r4, lsr #13
   150c8:	andeq	r5, r1, r8, lsl #13
   150cc:	andeq	r5, r1, ip, lsl r9
   150d0:	strdeq	r5, [r1], -r8
   150d4:	andeq	r5, r1, r8, asr r9
   150d8:	andeq	r5, r1, r8, asr r9
   150dc:	andeq	r5, r1, r8, asr r9
   150e0:	andeq	r5, r1, r8, asr r9
   150e4:	andeq	r5, r1, r8, asr r9
   150e8:	andeq	r5, r1, r8, asr r9
   150ec:	andeq	r5, r1, r8, asr r9
   150f0:	andeq	r5, r1, r8, asr r9
   150f4:	andeq	r5, r1, r8, asr r9
   150f8:	andeq	r5, r1, r8, asr r9
   150fc:	andeq	r5, r1, r8, asr r9
   15100:	andeq	r5, r1, r8, asr r9
   15104:	andeq	r5, r1, r8, asr r9
   15108:	andeq	r5, r1, r8, asr r9
   1510c:	andeq	r5, r1, r8, asr r9
   15110:	andeq	r5, r1, r8, asr r9
   15114:	andeq	r5, r1, r8, asr r9
   15118:	andeq	r5, r1, r8, asr r9
   1511c:	andeq	r5, r1, r8, lsr r9
   15120:	andeq	r5, r1, ip, ror #16
   15124:	andeq	r5, r1, ip, ror #16
   15128:	andeq	r5, r1, ip, ror r4
   1512c:	andeq	r5, r1, ip, ror #16
   15130:	andeq	r5, r1, r4, lsl #18
   15134:	andeq	r5, r1, ip, ror #16
   15138:	ldrdeq	r5, [r1], -r8
   1513c:	andeq	r5, r1, ip, ror #16
   15140:	andeq	r5, r1, ip, ror #16
   15144:	andeq	r5, r1, ip, ror #16
   15148:	andeq	r5, r1, r4, lsl #18
   1514c:	andeq	r5, r1, r4, lsl #18
   15150:	andeq	r5, r1, r4, lsl #18
   15154:	andeq	r5, r1, r4, lsl #18
   15158:	andeq	r5, r1, r4, lsl #18
   1515c:	andeq	r5, r1, r4, lsl #18
   15160:	andeq	r5, r1, r4, lsl #18
   15164:	andeq	r5, r1, r4, lsl #18
   15168:	andeq	r5, r1, r4, lsl #18
   1516c:	andeq	r5, r1, r4, lsl #18
   15170:	andeq	r5, r1, r4, lsl #18
   15174:	andeq	r5, r1, r4, lsl #18
   15178:	andeq	r5, r1, r4, lsl #18
   1517c:	andeq	r5, r1, r4, lsl #18
   15180:	andeq	r5, r1, r4, lsl #18
   15184:	andeq	r5, r1, r4, lsl #18
   15188:	andeq	r5, r1, ip, ror #16
   1518c:	andeq	r5, r1, ip, ror #16
   15190:	andeq	r5, r1, ip, ror #16
   15194:	andeq	r5, r1, ip, ror #16
   15198:	andeq	r5, r1, r8, lsr #17
   1519c:	andeq	r5, r1, r8, asr r9
   151a0:	andeq	r5, r1, r4, lsl #18
   151a4:	andeq	r5, r1, r4, lsl #18
   151a8:	andeq	r5, r1, r4, lsl #18
   151ac:	andeq	r5, r1, r4, lsl #18
   151b0:	andeq	r5, r1, r4, lsl #18
   151b4:	andeq	r5, r1, r4, lsl #18
   151b8:	andeq	r5, r1, r4, lsl #18
   151bc:	andeq	r5, r1, r4, lsl #18
   151c0:	andeq	r5, r1, r4, lsl #18
   151c4:	andeq	r5, r1, r4, lsl #18
   151c8:	andeq	r5, r1, r4, lsl #18
   151cc:	andeq	r5, r1, r4, lsl #18
   151d0:	andeq	r5, r1, r4, lsl #18
   151d4:	andeq	r5, r1, r4, lsl #18
   151d8:	andeq	r5, r1, r4, lsl #18
   151dc:	andeq	r5, r1, r4, lsl #18
   151e0:	andeq	r5, r1, r4, lsl #18
   151e4:	andeq	r5, r1, r4, lsl #18
   151e8:	andeq	r5, r1, r4, lsl #18
   151ec:	andeq	r5, r1, r4, lsl #18
   151f0:	andeq	r5, r1, r4, lsl #18
   151f4:	andeq	r5, r1, r4, lsl #18
   151f8:	andeq	r5, r1, r4, lsl #18
   151fc:	andeq	r5, r1, r4, lsl #18
   15200:	andeq	r5, r1, r4, lsl #18
   15204:	andeq	r5, r1, r4, lsl #18
   15208:	andeq	r5, r1, ip, ror #16
   1520c:	andeq	r5, r1, r8, asr #11
   15210:	andeq	r5, r1, r4, lsl #18
   15214:	andeq	r5, r1, ip, ror #16
   15218:	andeq	r5, r1, r4, lsl #18
   1521c:	andeq	r5, r1, ip, ror #16
   15220:	andeq	r5, r1, r4, lsl #18
   15224:	andeq	r5, r1, r4, lsl #18
   15228:	andeq	r5, r1, r4, lsl #18
   1522c:	andeq	r5, r1, r4, lsl #18
   15230:	andeq	r5, r1, r4, lsl #18
   15234:	andeq	r5, r1, r4, lsl #18
   15238:	andeq	r5, r1, r4, lsl #18
   1523c:	andeq	r5, r1, r4, lsl #18
   15240:	andeq	r5, r1, r4, lsl #18
   15244:	andeq	r5, r1, r4, lsl #18
   15248:	andeq	r5, r1, r4, lsl #18
   1524c:	andeq	r5, r1, r4, lsl #18
   15250:	andeq	r5, r1, r4, lsl #18
   15254:	andeq	r5, r1, r4, lsl #18
   15258:	andeq	r5, r1, r4, lsl #18
   1525c:	andeq	r5, r1, r4, lsl #18
   15260:	andeq	r5, r1, r4, lsl #18
   15264:	andeq	r5, r1, r4, lsl #18
   15268:	andeq	r5, r1, r4, lsl #18
   1526c:	andeq	r5, r1, r4, lsl #18
   15270:	andeq	r5, r1, r4, lsl #18
   15274:	andeq	r5, r1, r4, lsl #18
   15278:	andeq	r5, r1, r4, lsl #18
   1527c:	andeq	r5, r1, r4, lsl #18
   15280:	andeq	r5, r1, r4, lsl #18
   15284:	andeq	r5, r1, r4, lsl #18
   15288:	andeq	r5, r1, ip, asr r4
   1528c:	andeq	r5, r1, ip, ror #16
   15290:	andeq	r5, r1, ip, asr r4
   15294:	andeq	r5, r1, ip, ror r4
   15298:	mov	r3, #1
   1529c:	str	r3, [sp, #28]
   152a0:	str	r3, [sp, #52]	; 0x34
   152a4:	ldr	r3, [pc, #4000]	; 1624c <__assert_fail@plt+0x5150>
   152a8:	mov	r7, #0
   152ac:	str	r3, [sp, #64]	; 0x40
   152b0:	mov	r3, #2
   152b4:	str	r3, [sp, #152]	; 0x98
   152b8:	b	14fbc <__assert_fail@plt+0x3ec0>
   152bc:	ldr	r3, [sp, #28]
   152c0:	cmp	r3, #0
   152c4:	beq	15420 <__assert_fail@plt+0x4324>
   152c8:	mov	r3, #1
   152cc:	str	r3, [sp, #52]	; 0x34
   152d0:	ldr	r3, [pc, #3956]	; 1624c <__assert_fail@plt+0x5150>
   152d4:	mov	r7, #0
   152d8:	str	r3, [sp, #64]	; 0x40
   152dc:	b	14fbc <__assert_fail@plt+0x3ec0>
   152e0:	mov	r3, #1
   152e4:	str	r3, [sp, #44]	; 0x2c
   152e8:	str	r3, [sp, #52]	; 0x34
   152ec:	str	r3, [sp, #28]
   152f0:	b	152a4 <__assert_fail@plt+0x41a8>
   152f4:	mov	r3, #0
   152f8:	str	r3, [sp, #28]
   152fc:	mov	r3, #1
   15300:	str	r3, [sp, #44]	; 0x2c
   15304:	mov	r7, #0
   15308:	b	14fbc <__assert_fail@plt+0x3ec0>
   1530c:	ldr	r3, [sp, #152]	; 0x98
   15310:	cmp	r3, #10
   15314:	beq	15358 <__assert_fail@plt+0x425c>
   15318:	mov	r2, #5
   1531c:	ldr	r1, [pc, #3884]	; 16250 <__assert_fail@plt+0x5154>
   15320:	mov	r0, #0
   15324:	bl	10ef8 <dcgettext@plt>
   15328:	ldr	r2, [pc, #3872]	; 16250 <__assert_fail@plt+0x5154>
   1532c:	cmp	r0, r2
   15330:	str	r0, [sp, #164]	; 0xa4
   15334:	beq	1633c <__assert_fail@plt+0x5240>
   15338:	mov	r2, #5
   1533c:	ldr	r1, [pc, #3848]	; 1624c <__assert_fail@plt+0x5150>
   15340:	mov	r0, #0
   15344:	bl	10ef8 <dcgettext@plt>
   15348:	ldr	r2, [pc, #3836]	; 1624c <__assert_fail@plt+0x5150>
   1534c:	cmp	r0, r2
   15350:	str	r0, [sp, #168]	; 0xa8
   15354:	beq	1632c <__assert_fail@plt+0x5230>
   15358:	ldr	r7, [sp, #28]
   1535c:	cmp	r7, #0
   15360:	movne	r7, #0
   15364:	bne	15398 <__assert_fail@plt+0x429c>
   15368:	ldr	r3, [sp, #164]	; 0xa4
   1536c:	ldrb	r3, [r3]
   15370:	cmp	r3, #0
   15374:	beq	1634c <__assert_fail@plt+0x5250>
   15378:	ldr	r2, [sp, #164]	; 0xa4
   1537c:	ldr	r1, [sp, #32]
   15380:	cmp	fp, r7
   15384:	strbhi	r3, [r1, r7]
   15388:	ldrb	r3, [r2, #1]!
   1538c:	add	r7, r7, #1
   15390:	cmp	r3, #0
   15394:	bne	15380 <__assert_fail@plt+0x4284>
   15398:	ldr	r0, [sp, #168]	; 0xa8
   1539c:	bl	10fe8 <strlen@plt>
   153a0:	ldr	r3, [sp, #168]	; 0xa8
   153a4:	str	r3, [sp, #64]	; 0x40
   153a8:	mov	r3, #1
   153ac:	str	r3, [sp, #44]	; 0x2c
   153b0:	str	r0, [sp, #52]	; 0x34
   153b4:	b	14fbc <__assert_fail@plt+0x3ec0>
   153b8:	mov	r3, #1
   153bc:	str	r3, [sp, #44]	; 0x2c
   153c0:	str	r3, [sp, #52]	; 0x34
   153c4:	str	r3, [sp, #28]
   153c8:	ldr	r3, [pc, #3716]	; 16254 <__assert_fail@plt+0x5158>
   153cc:	mov	r7, #0
   153d0:	str	r3, [sp, #64]	; 0x40
   153d4:	mov	r3, #5
   153d8:	str	r3, [sp, #152]	; 0x98
   153dc:	b	14fbc <__assert_fail@plt+0x3ec0>
   153e0:	ldr	r3, [sp, #28]
   153e4:	cmp	r3, #0
   153e8:	beq	160e8 <__assert_fail@plt+0x4fec>
   153ec:	ldr	r3, [sp, #28]
   153f0:	mov	r7, #0
   153f4:	str	r3, [sp, #44]	; 0x2c
   153f8:	mov	r3, #1
   153fc:	str	r3, [sp, #52]	; 0x34
   15400:	ldr	r3, [pc, #3660]	; 16254 <__assert_fail@plt+0x5158>
   15404:	str	r3, [sp, #64]	; 0x40
   15408:	b	14fbc <__assert_fail@plt+0x3ec0>
   1540c:	ldr	r3, [sp, #28]
   15410:	cmp	r3, #0
   15414:	mov	r3, #1
   15418:	streq	r3, [sp, #44]	; 0x2c
   1541c:	bne	152a0 <__assert_fail@plt+0x41a4>
   15420:	cmp	fp, #0
   15424:	beq	16118 <__assert_fail@plt+0x501c>
   15428:	ldr	r3, [sp, #32]
   1542c:	mov	r2, #39	; 0x27
   15430:	mov	r7, #1
   15434:	strb	r2, [r3]
   15438:	mov	r3, #0
   1543c:	str	r3, [sp, #28]
   15440:	mov	r3, #1
   15444:	str	r3, [sp, #52]	; 0x34
   15448:	ldr	r3, [pc, #3580]	; 1624c <__assert_fail@plt+0x5150>
   1544c:	str	r3, [sp, #64]	; 0x40
   15450:	mov	r3, #2
   15454:	str	r3, [sp, #152]	; 0x98
   15458:	b	14fbc <__assert_fail@plt+0x3ec0>
   1545c:	ldr	r3, [sp, #24]
   15460:	cmn	r3, #1
   15464:	beq	1607c <__assert_fail@plt+0x4f80>
   15468:	ldr	r3, [sp, #24]
   1546c:	subs	r3, r3, #1
   15470:	movne	r3, #1
   15474:	cmp	r3, #0
   15478:	bne	15484 <__assert_fail@plt+0x4388>
   1547c:	cmp	sl, #0
   15480:	beq	15870 <__assert_fail@plt+0x4774>
   15484:	ldr	r3, [sp, #152]	; 0x98
   15488:	mov	r5, #0
   1548c:	sub	r2, r3, #2
   15490:	mov	r8, r5
   15494:	clz	r2, r2
   15498:	lsr	r2, r2, #5
   1549c:	ldr	r3, [sp, #60]	; 0x3c
   154a0:	ldr	r1, [sp, #28]
   154a4:	orr	r3, r2, r3
   154a8:	eor	r3, r3, #1
   154ac:	orr	r3, r1, r3
   154b0:	tst	r3, #255	; 0xff
   154b4:	bne	15be0 <__assert_fail@plt+0x4ae4>
   154b8:	cmp	r6, #0
   154bc:	bne	1560c <__assert_fail@plt+0x4510>
   154c0:	ldr	r3, [sp, #40]	; 0x28
   154c4:	eor	r8, r8, #1
   154c8:	and	r8, r8, r3
   154cc:	add	sl, sl, #1
   154d0:	uxtb	r6, r8
   154d4:	cmp	r6, #0
   154d8:	beq	1550c <__assert_fail@plt+0x4410>
   154dc:	cmp	fp, r7
   154e0:	movhi	r2, #39	; 0x27
   154e4:	ldrhi	r3, [sp, #32]
   154e8:	strbhi	r2, [r3, r7]
   154ec:	add	r3, r7, #1
   154f0:	cmp	fp, r3
   154f4:	movhi	r1, #39	; 0x27
   154f8:	ldrhi	r2, [sp, #32]
   154fc:	add	r7, r7, #2
   15500:	strbhi	r1, [r2, r3]
   15504:	mov	r3, #0
   15508:	str	r3, [sp, #40]	; 0x28
   1550c:	cmp	r7, fp
   15510:	ldrcc	r3, [sp, #32]
   15514:	strbcc	r4, [r3, r7]
   15518:	ldr	r3, [sp, #36]	; 0x24
   1551c:	cmp	r5, #0
   15520:	moveq	r3, #0
   15524:	str	r3, [sp, #36]	; 0x24
   15528:	ldr	r3, [sp, #24]
   1552c:	add	r7, r7, #1
   15530:	cmn	r3, #1
   15534:	bne	14fd8 <__assert_fail@plt+0x3edc>
   15538:	ldr	r3, [sp, #56]	; 0x38
   1553c:	ldrb	r5, [r3, sl]
   15540:	adds	r5, r5, #0
   15544:	movne	r5, #1
   15548:	cmp	r5, #0
   1554c:	bne	14fec <__assert_fail@plt+0x3ef0>
   15550:	ldr	r3, [sp, #152]	; 0x98
   15554:	ldr	r1, [sp, #28]
   15558:	sub	r3, r3, #2
   1555c:	clz	r3, r3
   15560:	lsr	r3, r3, #5
   15564:	and	r9, r1, r3
   15568:	cmp	r7, #0
   1556c:	movne	r2, #0
   15570:	andeq	r2, r9, #1
   15574:	cmp	r2, #0
   15578:	bne	15f54 <__assert_fail@plt+0x4e58>
   1557c:	eor	r2, r1, #1
   15580:	ands	r3, r3, r2
   15584:	beq	16410 <__assert_fail@plt+0x5314>
   15588:	ldr	r2, [sp, #68]	; 0x44
   1558c:	cmp	r2, #0
   15590:	beq	163fc <__assert_fail@plt+0x5300>
   15594:	ldr	r3, [sp, #36]	; 0x24
   15598:	cmp	r3, #0
   1559c:	bne	163b4 <__assert_fail@plt+0x52b8>
   155a0:	ldr	r2, [sp, #72]	; 0x48
   155a4:	clz	r3, fp
   155a8:	cmp	r2, #0
   155ac:	lsr	r3, r3, #5
   155b0:	moveq	r3, #0
   155b4:	cmp	r3, #0
   155b8:	beq	16354 <__assert_fail@plt+0x5258>
   155bc:	str	r3, [sp, #68]	; 0x44
   155c0:	ldr	fp, [sp, #72]	; 0x48
   155c4:	b	14f74 <__assert_fail@plt+0x3e78>
   155c8:	ldr	r3, [sp, #152]	; 0x98
   155cc:	cmp	r3, #2
   155d0:	beq	15c24 <__assert_fail@plt+0x4b28>
   155d4:	ldr	r3, [sp, #44]	; 0x2c
   155d8:	ldr	r2, [sp, #28]
   155dc:	and	r2, r3, r2
   155e0:	ands	r2, r9, r2
   155e4:	bne	15c30 <__assert_fail@plt+0x4b34>
   155e8:	mov	r4, #92	; 0x5c
   155ec:	mov	r3, r4
   155f0:	ldr	r1, [sp, #44]	; 0x2c
   155f4:	cmp	r1, #0
   155f8:	moveq	r5, #0
   155fc:	moveq	r8, r1
   15600:	beq	1549c <__assert_fail@plt+0x43a0>
   15604:	mov	r4, r3
   15608:	mov	r5, #0
   1560c:	ldr	r3, [sp, #28]
   15610:	cmp	r3, #0
   15614:	bne	15c18 <__assert_fail@plt+0x4b1c>
   15618:	ldr	r3, [sp, #40]	; 0x28
   1561c:	eor	r9, r3, #1
   15620:	and	r9, r9, r2
   15624:	ands	r9, r9, #255	; 0xff
   15628:	beq	1566c <__assert_fail@plt+0x4570>
   1562c:	cmp	fp, r7
   15630:	movhi	r2, #39	; 0x27
   15634:	ldrhi	r3, [sp, #32]
   15638:	str	r9, [sp, #40]	; 0x28
   1563c:	strbhi	r2, [r3, r7]
   15640:	add	r3, r7, #1
   15644:	cmp	fp, r3
   15648:	movhi	r1, #36	; 0x24
   1564c:	ldrhi	r2, [sp, #32]
   15650:	strbhi	r1, [r2, r3]
   15654:	add	r3, r7, #2
   15658:	cmp	fp, r3
   1565c:	add	r7, r7, #3
   15660:	ldrhi	r2, [sp, #32]
   15664:	movhi	r1, #39	; 0x27
   15668:	strbhi	r1, [r2, r3]
   1566c:	cmp	fp, r7
   15670:	movhi	r2, #92	; 0x5c
   15674:	ldrhi	r3, [sp, #32]
   15678:	add	sl, sl, #1
   1567c:	strbhi	r2, [r3, r7]
   15680:	add	r7, r7, #1
   15684:	b	1550c <__assert_fail@plt+0x4410>
   15688:	ldr	r3, [sp, #152]	; 0x98
   1568c:	mov	r4, #11
   15690:	sub	r2, r3, #2
   15694:	mov	r3, #118	; 0x76
   15698:	clz	r2, r2
   1569c:	lsr	r2, r2, #5
   156a0:	b	155f0 <__assert_fail@plt+0x44f4>
   156a4:	mov	r4, #10
   156a8:	mov	r3, #110	; 0x6e
   156ac:	ldr	r2, [sp, #152]	; 0x98
   156b0:	ldr	r1, [sp, #28]
   156b4:	sub	r2, r2, #2
   156b8:	clz	r2, r2
   156bc:	lsr	r2, r2, #5
   156c0:	ands	r1, r1, r2
   156c4:	beq	155f0 <__assert_fail@plt+0x44f4>
   156c8:	ldr	sl, [sp, #32]
   156cc:	mov	r8, fp
   156d0:	mov	r2, r1
   156d4:	mov	r3, #2
   156d8:	str	r3, [sp, #152]	; 0x98
   156dc:	ldr	r9, [sp, #44]	; 0x2c
   156e0:	ldr	r3, [sp, #152]	; 0x98
   156e4:	and	r9, r9, r2
   156e8:	tst	r9, #255	; 0xff
   156ec:	movne	r3, #4
   156f0:	str	r3, [sp, #152]	; 0x98
   156f4:	ldr	r3, [sp, #156]	; 0x9c
   156f8:	mov	ip, #0
   156fc:	bic	r3, r3, #2
   15700:	str	r3, [sp, #4]
   15704:	ldr	r3, [sp, #168]	; 0xa8
   15708:	ldr	r2, [sp, #56]	; 0x38
   1570c:	str	r3, [sp, #16]
   15710:	ldr	r3, [sp, #164]	; 0xa4
   15714:	mov	r1, r8
   15718:	str	r3, [sp, #12]
   1571c:	ldr	r3, [sp, #152]	; 0x98
   15720:	mov	r0, sl
   15724:	str	r3, [sp]
   15728:	str	ip, [sp, #8]
   1572c:	ldr	r3, [sp, #24]
   15730:	bl	14f18 <__assert_fail@plt+0x3e1c>
   15734:	mov	fp, r0
   15738:	mov	r0, fp
   1573c:	add	sp, sp, #116	; 0x74
   15740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15744:	ldr	r3, [sp, #152]	; 0x98
   15748:	mov	r4, #8
   1574c:	sub	r2, r3, #2
   15750:	mov	r3, #98	; 0x62
   15754:	clz	r2, r2
   15758:	lsr	r2, r2, #5
   1575c:	b	155f0 <__assert_fail@plt+0x44f4>
   15760:	ldr	r3, [sp, #152]	; 0x98
   15764:	mov	r4, #7
   15768:	sub	r2, r3, #2
   1576c:	mov	r3, #97	; 0x61
   15770:	clz	r2, r2
   15774:	lsr	r2, r2, #5
   15778:	b	155f0 <__assert_fail@plt+0x44f4>
   1577c:	ldr	r3, [sp, #44]	; 0x2c
   15780:	cmp	r3, #0
   15784:	beq	15f68 <__assert_fail@plt+0x4e6c>
   15788:	ldr	r3, [sp, #28]
   1578c:	cmp	r3, #0
   15790:	bne	16240 <__assert_fail@plt+0x5144>
   15794:	ldr	r3, [sp, #152]	; 0x98
   15798:	sub	r2, r3, #2
   1579c:	ldr	r3, [sp, #40]	; 0x28
   157a0:	clz	r2, r2
   157a4:	eor	r3, r3, #1
   157a8:	lsr	r2, r2, #5
   157ac:	ands	r3, r2, r3
   157b0:	moveq	r1, r7
   157b4:	beq	157f8 <__assert_fail@plt+0x46fc>
   157b8:	cmp	fp, r7
   157bc:	movhi	r0, #39	; 0x27
   157c0:	ldrhi	r1, [sp, #32]
   157c4:	str	r3, [sp, #40]	; 0x28
   157c8:	strbhi	r0, [r1, r7]
   157cc:	add	r1, r7, #1
   157d0:	cmp	fp, r1
   157d4:	movhi	ip, #36	; 0x24
   157d8:	ldrhi	r0, [sp, #32]
   157dc:	strbhi	ip, [r0, r1]
   157e0:	add	r1, r7, #2
   157e4:	cmp	fp, r1
   157e8:	movhi	ip, #39	; 0x27
   157ec:	ldrhi	r0, [sp, #32]
   157f0:	strbhi	ip, [r0, r1]
   157f4:	add	r1, r7, #3
   157f8:	cmp	fp, r1
   157fc:	movhi	r0, #92	; 0x5c
   15800:	ldrhi	r3, [sp, #32]
   15804:	add	r7, r1, #1
   15808:	strbhi	r0, [r3, r1]
   1580c:	cmp	r8, #0
   15810:	beq	16154 <__assert_fail@plt+0x5058>
   15814:	ldr	r0, [sp, #24]
   15818:	add	r3, sl, #1
   1581c:	cmp	r3, r0
   15820:	bcs	16090 <__assert_fail@plt+0x4f94>
   15824:	ldr	r0, [sp, #56]	; 0x38
   15828:	ldrb	r3, [r0, r3]
   1582c:	sub	r3, r3, #48	; 0x30
   15830:	cmp	r3, #9
   15834:	bhi	16090 <__assert_fail@plt+0x4f94>
   15838:	cmp	fp, r7
   1583c:	movhi	r3, #48	; 0x30
   15840:	ldrhi	r0, [sp, #32]
   15844:	ldr	r5, [sp, #28]
   15848:	mov	r4, #48	; 0x30
   1584c:	strbhi	r3, [r0, r7]
   15850:	add	r3, r1, #2
   15854:	cmp	fp, r3
   15858:	movhi	r0, #48	; 0x30
   1585c:	ldrhi	ip, [sp, #32]
   15860:	add	r7, r1, #3
   15864:	strbhi	r0, [ip, r3]
   15868:	b	1549c <__assert_fail@plt+0x43a0>
   1586c:	mov	r5, #0
   15870:	ldr	r3, [sp, #152]	; 0x98
   15874:	sub	r2, r3, #2
   15878:	ldr	r3, [sp, #28]
   1587c:	clz	r2, r2
   15880:	lsr	r2, r2, #5
   15884:	ands	r8, r3, r2
   15888:	beq	1549c <__assert_fail@plt+0x43a0>
   1588c:	mov	r3, r8
   15890:	mov	r2, r3
   15894:	mov	r3, #2
   15898:	ldr	sl, [sp, #32]
   1589c:	mov	r8, fp
   158a0:	str	r3, [sp, #152]	; 0x98
   158a4:	b	156dc <__assert_fail@plt+0x45e0>
   158a8:	ldr	r3, [sp, #152]	; 0x98
   158ac:	cmp	r3, #2
   158b0:	beq	15fd4 <__assert_fail@plt+0x4ed8>
   158b4:	cmp	r3, #5
   158b8:	beq	15f94 <__assert_fail@plt+0x4e98>
   158bc:	mov	r5, #0
   158c0:	sub	r2, r3, #2
   158c4:	mov	r8, r5
   158c8:	clz	r2, r2
   158cc:	mov	r4, #63	; 0x3f
   158d0:	lsr	r2, r2, #5
   158d4:	b	1549c <__assert_fail@plt+0x43a0>
   158d8:	ldr	r3, [sp, #152]	; 0x98
   158dc:	cmp	r3, #2
   158e0:	beq	15ff4 <__assert_fail@plt+0x4ef8>
   158e4:	mov	r2, #0
   158e8:	str	r5, [sp, #68]	; 0x44
   158ec:	mov	r8, r2
   158f0:	mov	r4, #39	; 0x27
   158f4:	b	1549c <__assert_fail@plt+0x43a0>
   158f8:	mov	r4, #13
   158fc:	mov	r3, #114	; 0x72
   15900:	b	156ac <__assert_fail@plt+0x45b0>
   15904:	ldr	r3, [sp, #152]	; 0x98
   15908:	mov	r8, #0
   1590c:	sub	r2, r3, #2
   15910:	clz	r2, r2
   15914:	lsr	r2, r2, #5
   15918:	b	1549c <__assert_fail@plt+0x43a0>
   1591c:	ldr	r3, [sp, #152]	; 0x98
   15920:	mov	r4, #12
   15924:	sub	r2, r3, #2
   15928:	mov	r3, #102	; 0x66
   1592c:	clz	r2, r2
   15930:	lsr	r2, r2, #5
   15934:	b	155f0 <__assert_fail@plt+0x44f4>
   15938:	mov	r5, r6
   1593c:	b	15870 <__assert_fail@plt+0x4774>
   15940:	ldr	r3, [sp, #152]	; 0x98
   15944:	sub	r2, r3, #2
   15948:	mov	r3, #116	; 0x74
   1594c:	clz	r2, r2
   15950:	lsr	r2, r2, #5
   15954:	b	155f0 <__assert_fail@plt+0x44f4>
   15958:	ldr	r8, [sp, #76]	; 0x4c
   1595c:	cmp	r8, #1
   15960:	bne	15e10 <__assert_fail@plt+0x4d14>
   15964:	bl	10fd0 <__ctype_b_loc@plt>
   15968:	sxth	r3, r4
   1596c:	mov	ip, r8
   15970:	lsl	r3, r3, #1
   15974:	ldr	r2, [r0]
   15978:	ldrh	r3, [r2, r3]
   1597c:	and	r3, r3, #16384	; 0x4000
   15980:	cmp	r3, #0
   15984:	movne	r5, #1
   15988:	moveq	r5, #0
   1598c:	moveq	r3, #1
   15990:	movne	r3, #0
   15994:	ldr	r2, [sp, #44]	; 0x2c
   15998:	and	r3, r3, r2
   1599c:	ands	r8, r3, #255	; 0xff
   159a0:	bne	15ca4 <__assert_fail@plt+0x4ba8>
   159a4:	ldr	r3, [sp, #152]	; 0x98
   159a8:	sub	r2, r3, #2
   159ac:	clz	r2, r2
   159b0:	lsr	r2, r2, #5
   159b4:	b	1549c <__assert_fail@plt+0x43a0>
   159b8:	ldr	r3, [sp, #56]	; 0x38
   159bc:	add	r3, r3, sl
   159c0:	str	r3, [sp, #48]	; 0x30
   159c4:	ldr	r3, [sp, #48]	; 0x30
   159c8:	mov	r6, #0
   159cc:	ldrb	r4, [r3]
   159d0:	cmp	r4, #126	; 0x7e
   159d4:	ldrls	pc, [pc, r4, lsl #2]
   159d8:	b	15958 <__assert_fail@plt+0x485c>
   159dc:	andeq	r5, r1, ip, ror r7
   159e0:	andeq	r5, r1, r8, asr r9
   159e4:	andeq	r5, r1, r8, asr r9
   159e8:	andeq	r5, r1, r8, asr r9
   159ec:	andeq	r5, r1, r8, asr r9
   159f0:	andeq	r5, r1, r8, asr r9
   159f4:	andeq	r5, r1, r8, asr r9
   159f8:	andeq	r5, r1, r0, ror #14
   159fc:	andeq	r5, r1, r4, asr #14
   15a00:	ldrdeq	r5, [r1], -r8
   15a04:	andeq	r5, r1, r4, lsr #13
   15a08:	andeq	r5, r1, r8, lsl #13
   15a0c:	andeq	r5, r1, ip, lsl r9
   15a10:	strdeq	r5, [r1], -r8
   15a14:	andeq	r5, r1, r8, asr r9
   15a18:	andeq	r5, r1, r8, asr r9
   15a1c:	andeq	r5, r1, r8, asr r9
   15a20:	andeq	r5, r1, r8, asr r9
   15a24:	andeq	r5, r1, r8, asr r9
   15a28:	andeq	r5, r1, r8, asr r9
   15a2c:	andeq	r5, r1, r8, asr r9
   15a30:	andeq	r5, r1, r8, asr r9
   15a34:	andeq	r5, r1, r8, asr r9
   15a38:	andeq	r5, r1, r8, asr r9
   15a3c:	andeq	r5, r1, r8, asr r9
   15a40:	andeq	r5, r1, r8, asr r9
   15a44:	andeq	r5, r1, r8, asr r9
   15a48:	andeq	r5, r1, r8, asr r9
   15a4c:	andeq	r5, r1, r8, asr r9
   15a50:	andeq	r5, r1, r8, asr r9
   15a54:	andeq	r5, r1, r8, asr r9
   15a58:	andeq	r5, r1, r8, asr r9
   15a5c:	andeq	r5, r1, r0, ror r8
   15a60:	andeq	r5, r1, ip, ror #16
   15a64:	andeq	r5, r1, ip, ror #16
   15a68:	andeq	r5, r1, ip, ror r4
   15a6c:	andeq	r5, r1, ip, ror #16
   15a70:	andeq	r5, r1, r4, lsl #18
   15a74:	andeq	r5, r1, ip, ror #16
   15a78:	ldrdeq	r5, [r1], -r8
   15a7c:	andeq	r5, r1, ip, ror #16
   15a80:	andeq	r5, r1, ip, ror #16
   15a84:	andeq	r5, r1, ip, ror #16
   15a88:	andeq	r5, r1, r4, lsl #18
   15a8c:	andeq	r5, r1, r4, lsl #18
   15a90:	andeq	r5, r1, r4, lsl #18
   15a94:	andeq	r5, r1, r4, lsl #18
   15a98:	andeq	r5, r1, r4, lsl #18
   15a9c:	andeq	r5, r1, r4, lsl #18
   15aa0:	andeq	r5, r1, r4, lsl #18
   15aa4:	andeq	r5, r1, r4, lsl #18
   15aa8:	andeq	r5, r1, r4, lsl #18
   15aac:	andeq	r5, r1, r4, lsl #18
   15ab0:	andeq	r5, r1, r4, lsl #18
   15ab4:	andeq	r5, r1, r4, lsl #18
   15ab8:	andeq	r5, r1, r4, lsl #18
   15abc:	andeq	r5, r1, r4, lsl #18
   15ac0:	andeq	r5, r1, r4, lsl #18
   15ac4:	andeq	r5, r1, r4, lsl #18
   15ac8:	andeq	r5, r1, ip, ror #16
   15acc:	andeq	r5, r1, ip, ror #16
   15ad0:	andeq	r5, r1, ip, ror #16
   15ad4:	andeq	r5, r1, ip, ror #16
   15ad8:	andeq	r5, r1, r8, lsr #17
   15adc:	andeq	r5, r1, r8, asr r9
   15ae0:	andeq	r5, r1, r4, lsl #18
   15ae4:	andeq	r5, r1, r4, lsl #18
   15ae8:	andeq	r5, r1, r4, lsl #18
   15aec:	andeq	r5, r1, r4, lsl #18
   15af0:	andeq	r5, r1, r4, lsl #18
   15af4:	andeq	r5, r1, r4, lsl #18
   15af8:	andeq	r5, r1, r4, lsl #18
   15afc:	andeq	r5, r1, r4, lsl #18
   15b00:	andeq	r5, r1, r4, lsl #18
   15b04:	andeq	r5, r1, r4, lsl #18
   15b08:	andeq	r5, r1, r4, lsl #18
   15b0c:	andeq	r5, r1, r4, lsl #18
   15b10:	andeq	r5, r1, r4, lsl #18
   15b14:	andeq	r5, r1, r4, lsl #18
   15b18:	andeq	r5, r1, r4, lsl #18
   15b1c:	andeq	r5, r1, r4, lsl #18
   15b20:	andeq	r5, r1, r4, lsl #18
   15b24:	andeq	r5, r1, r4, lsl #18
   15b28:	andeq	r5, r1, r4, lsl #18
   15b2c:	andeq	r5, r1, r4, lsl #18
   15b30:	andeq	r5, r1, r4, lsl #18
   15b34:	andeq	r5, r1, r4, lsl #18
   15b38:	andeq	r5, r1, r4, lsl #18
   15b3c:	andeq	r5, r1, r4, lsl #18
   15b40:	andeq	r5, r1, r4, lsl #18
   15b44:	andeq	r5, r1, r4, lsl #18
   15b48:	andeq	r5, r1, ip, ror #16
   15b4c:	andeq	r5, r1, r8, asr #11
   15b50:	andeq	r5, r1, r4, lsl #18
   15b54:	andeq	r5, r1, ip, ror #16
   15b58:	andeq	r5, r1, r4, lsl #18
   15b5c:	andeq	r5, r1, ip, ror #16
   15b60:	andeq	r5, r1, r4, lsl #18
   15b64:	andeq	r5, r1, r4, lsl #18
   15b68:	andeq	r5, r1, r4, lsl #18
   15b6c:	andeq	r5, r1, r4, lsl #18
   15b70:	andeq	r5, r1, r4, lsl #18
   15b74:	andeq	r5, r1, r4, lsl #18
   15b78:	andeq	r5, r1, r4, lsl #18
   15b7c:	andeq	r5, r1, r4, lsl #18
   15b80:	andeq	r5, r1, r4, lsl #18
   15b84:	andeq	r5, r1, r4, lsl #18
   15b88:	andeq	r5, r1, r4, lsl #18
   15b8c:	andeq	r5, r1, r4, lsl #18
   15b90:	andeq	r5, r1, r4, lsl #18
   15b94:	andeq	r5, r1, r4, lsl #18
   15b98:	andeq	r5, r1, r4, lsl #18
   15b9c:	andeq	r5, r1, r4, lsl #18
   15ba0:	andeq	r5, r1, r4, lsl #18
   15ba4:	andeq	r5, r1, r4, lsl #18
   15ba8:	andeq	r5, r1, r4, lsl #18
   15bac:	andeq	r5, r1, r4, lsl #18
   15bb0:	andeq	r5, r1, r4, lsl #18
   15bb4:	andeq	r5, r1, r4, lsl #18
   15bb8:	andeq	r5, r1, r4, lsl #18
   15bbc:	andeq	r5, r1, r4, lsl #18
   15bc0:	andeq	r5, r1, r4, lsl #18
   15bc4:	andeq	r5, r1, r4, lsl #18
   15bc8:	andeq	r5, r1, ip, asr r4
   15bcc:	andeq	r5, r1, ip, ror #16
   15bd0:	andeq	r5, r1, ip, asr r4
   15bd4:	andeq	r5, r1, ip, ror r4
   15bd8:	mov	r3, #116	; 0x74
   15bdc:	b	156ac <__assert_fail@plt+0x45b0>
   15be0:	ldr	r3, [sp, #160]	; 0xa0
   15be4:	cmp	r3, #0
   15be8:	beq	154b8 <__assert_fail@plt+0x43bc>
   15bec:	lsr	r3, r4, #5
   15bf0:	ldr	r0, [sp, #160]	; 0xa0
   15bf4:	uxtb	r3, r3
   15bf8:	and	r1, r4, #31
   15bfc:	ldr	r0, [r0, r3, lsl #2]
   15c00:	lsr	r3, r0, r1
   15c04:	tst	r3, #1
   15c08:	beq	154b8 <__assert_fail@plt+0x43bc>
   15c0c:	ldr	r3, [sp, #28]
   15c10:	cmp	r3, #0
   15c14:	beq	15618 <__assert_fail@plt+0x451c>
   15c18:	ldr	sl, [sp, #32]
   15c1c:	mov	r8, fp
   15c20:	b	156dc <__assert_fail@plt+0x45e0>
   15c24:	ldr	r3, [sp, #28]
   15c28:	cmp	r3, #0
   15c2c:	bne	16180 <__assert_fail@plt+0x5084>
   15c30:	add	sl, sl, #1
   15c34:	ldr	r6, [sp, #40]	; 0x28
   15c38:	mov	r5, #0
   15c3c:	mov	r4, #92	; 0x5c
   15c40:	b	154d4 <__assert_fail@plt+0x43d8>
   15c44:	cmp	r9, r8
   15c48:	bne	15eb8 <__assert_fail@plt+0x4dbc>
   15c4c:	ldr	r0, [sp, #100]	; 0x64
   15c50:	bl	10f1c <iswprint@plt>
   15c54:	add	r5, r5, r4
   15c58:	cmp	r0, #0
   15c5c:	add	r0, sp, #104	; 0x68
   15c60:	moveq	r6, #0
   15c64:	bl	10ed4 <mbsinit@plt>
   15c68:	cmp	r0, #0
   15c6c:	beq	15e4c <__assert_fail@plt+0x4d50>
   15c70:	mov	r2, r6
   15c74:	mov	ip, r5
   15c78:	eor	r5, r2, #1
   15c7c:	ldr	r4, [sp, #80]	; 0x50
   15c80:	ldr	r6, [sp, #84]	; 0x54
   15c84:	ldr	r7, [sp, #88]	; 0x58
   15c88:	uxtb	r5, r5
   15c8c:	cmp	ip, #1
   15c90:	bls	16190 <__assert_fail@plt+0x5094>
   15c94:	ldr	r3, [sp, #44]	; 0x2c
   15c98:	and	r8, r3, r5
   15c9c:	mov	r5, r2
   15ca0:	uxtb	r8, r8
   15ca4:	add	r2, sl, ip
   15ca8:	ldr	r0, [sp, #48]	; 0x30
   15cac:	mov	r1, #0
   15cb0:	str	r5, [sp, #48]	; 0x30
   15cb4:	ldr	r9, [sp, #28]
   15cb8:	ldr	ip, [sp, #40]	; 0x28
   15cbc:	ldr	r3, [sp, #32]
   15cc0:	ldr	r5, [sp, #152]	; 0x98
   15cc4:	b	15d80 <__assert_fail@plt+0x4c84>
   15cc8:	cmp	r9, #0
   15ccc:	bne	160a4 <__assert_fail@plt+0x4fa8>
   15cd0:	eor	r1, ip, #1
   15cd4:	cmp	r5, #2
   15cd8:	movne	r1, #0
   15cdc:	andeq	r1, r1, #1
   15ce0:	cmp	r1, #0
   15ce4:	beq	15d1c <__assert_fail@plt+0x4c20>
   15ce8:	cmp	fp, r7
   15cec:	movhi	ip, #39	; 0x27
   15cf0:	strbhi	ip, [r3, r7]
   15cf4:	add	ip, r7, #1
   15cf8:	cmp	fp, ip
   15cfc:	movhi	lr, #36	; 0x24
   15d00:	strbhi	lr, [r3, ip]
   15d04:	add	ip, r7, #2
   15d08:	cmp	fp, ip
   15d0c:	movhi	lr, #39	; 0x27
   15d10:	strbhi	lr, [r3, ip]
   15d14:	add	r7, r7, #3
   15d18:	mov	ip, r1
   15d1c:	cmp	fp, r7
   15d20:	movhi	r1, #92	; 0x5c
   15d24:	strbhi	r1, [r3, r7]
   15d28:	add	r1, r7, #1
   15d2c:	cmp	fp, r1
   15d30:	lsrhi	lr, r4, #6
   15d34:	addhi	lr, lr, #48	; 0x30
   15d38:	strbhi	lr, [r3, r1]
   15d3c:	add	lr, r7, #2
   15d40:	cmp	fp, lr
   15d44:	lsrhi	r1, r4, #3
   15d48:	andhi	r1, r1, #7
   15d4c:	addhi	r1, r1, #48	; 0x30
   15d50:	add	sl, sl, #1
   15d54:	strbhi	r1, [r3, lr]
   15d58:	and	r4, r4, #7
   15d5c:	cmp	r2, sl
   15d60:	add	r4, r4, #48	; 0x30
   15d64:	add	r7, r7, #3
   15d68:	bls	160c8 <__assert_fail@plt+0x4fcc>
   15d6c:	mov	r1, r8
   15d70:	cmp	fp, r7
   15d74:	strbhi	r4, [r3, r7]
   15d78:	ldrb	r4, [r0, #1]!
   15d7c:	add	r7, r7, #1
   15d80:	cmp	r8, #0
   15d84:	bne	15cc8 <__assert_fail@plt+0x4bcc>
   15d88:	cmp	r6, #0
   15d8c:	bne	15ddc <__assert_fail@plt+0x4ce0>
   15d90:	eor	r6, r1, #1
   15d94:	and	r6, r6, ip
   15d98:	add	sl, sl, #1
   15d9c:	cmp	r2, sl
   15da0:	uxtb	r6, r6
   15da4:	bls	15e04 <__assert_fail@plt+0x4d08>
   15da8:	cmp	r6, #0
   15dac:	beq	15d70 <__assert_fail@plt+0x4c74>
   15db0:	cmp	fp, r7
   15db4:	movhi	ip, #39	; 0x27
   15db8:	strbhi	ip, [r3, r7]
   15dbc:	add	ip, r7, #1
   15dc0:	cmp	fp, ip
   15dc4:	movhi	lr, #39	; 0x27
   15dc8:	strbhi	lr, [r3, ip]
   15dcc:	add	r7, r7, #2
   15dd0:	mov	r6, r8
   15dd4:	mov	ip, r8
   15dd8:	b	15d70 <__assert_fail@plt+0x4c74>
   15ddc:	cmp	fp, r7
   15de0:	eor	r6, r1, #1
   15de4:	movhi	lr, #92	; 0x5c
   15de8:	and	r6, r6, ip
   15dec:	add	sl, sl, #1
   15df0:	strbhi	lr, [r3, r7]
   15df4:	cmp	r2, sl
   15df8:	add	r7, r7, #1
   15dfc:	uxtb	r6, r6
   15e00:	bhi	15da8 <__assert_fail@plt+0x4cac>
   15e04:	str	ip, [sp, #40]	; 0x28
   15e08:	ldr	r5, [sp, #48]	; 0x30
   15e0c:	b	154d4 <__assert_fail@plt+0x43d8>
   15e10:	ldr	r3, [sp, #24]
   15e14:	cmn	r3, #1
   15e18:	mov	r3, #0
   15e1c:	str	r3, [sp, #104]	; 0x68
   15e20:	str	r3, [sp, #108]	; 0x6c
   15e24:	beq	16144 <__assert_fail@plt+0x5048>
   15e28:	mov	r2, r5
   15e2c:	mov	r3, #0
   15e30:	str	r7, [sp, #88]	; 0x58
   15e34:	ldr	r7, [sp, #152]	; 0x98
   15e38:	str	r5, [sp, #92]	; 0x5c
   15e3c:	str	r6, [sp, #84]	; 0x54
   15e40:	mov	r5, r3
   15e44:	mov	r6, r2
   15e48:	str	r4, [sp, #80]	; 0x50
   15e4c:	ldr	r3, [sp, #56]	; 0x38
   15e50:	add	r9, sl, r5
   15e54:	add	r8, r3, r9
   15e58:	ldr	r3, [sp, #24]
   15e5c:	mov	r1, r8
   15e60:	sub	r2, r3, r9
   15e64:	add	r0, sp, #100	; 0x64
   15e68:	add	r3, sp, #104	; 0x68
   15e6c:	bl	18584 <__assert_fail@plt+0x7488>
   15e70:	subs	r4, r0, #0
   15e74:	beq	1621c <__assert_fail@plt+0x5120>
   15e78:	cmn	r4, #1
   15e7c:	beq	161fc <__assert_fail@plt+0x5100>
   15e80:	cmn	r4, #2
   15e84:	beq	1619c <__assert_fail@plt+0x50a0>
   15e88:	ldr	r2, [sp, #28]
   15e8c:	cmp	r7, #2
   15e90:	movne	r2, #0
   15e94:	andeq	r2, r2, #1
   15e98:	cmp	r2, #0
   15e9c:	beq	15c4c <__assert_fail@plt+0x4b50>
   15ea0:	cmp	r4, #1
   15ea4:	beq	15c4c <__assert_fail@plt+0x4b50>
   15ea8:	sub	r3, r4, #1
   15eac:	add	r9, r3, r9
   15eb0:	ldr	r3, [sp, #56]	; 0x38
   15eb4:	add	r9, r3, r9
   15eb8:	ldrb	r3, [r8, #1]!
   15ebc:	sub	r3, r3, #91	; 0x5b
   15ec0:	cmp	r3, #33	; 0x21
   15ec4:	ldrls	pc, [pc, r3, lsl #2]
   15ec8:	b	15c44 <__assert_fail@plt+0x4b48>
   15ecc:	andeq	r5, r1, r4, asr pc
   15ed0:	andeq	r5, r1, r4, asr pc
   15ed4:	andeq	r5, r1, r4, asr #24
   15ed8:	andeq	r5, r1, r4, asr pc
   15edc:	andeq	r5, r1, r4, asr #24
   15ee0:	andeq	r5, r1, r4, asr pc
   15ee4:	andeq	r5, r1, r4, asr #24
   15ee8:	andeq	r5, r1, r4, asr #24
   15eec:	andeq	r5, r1, r4, asr #24
   15ef0:	andeq	r5, r1, r4, asr #24
   15ef4:	andeq	r5, r1, r4, asr #24
   15ef8:	andeq	r5, r1, r4, asr #24
   15efc:	andeq	r5, r1, r4, asr #24
   15f00:	andeq	r5, r1, r4, asr #24
   15f04:	andeq	r5, r1, r4, asr #24
   15f08:	andeq	r5, r1, r4, asr #24
   15f0c:	andeq	r5, r1, r4, asr #24
   15f10:	andeq	r5, r1, r4, asr #24
   15f14:	andeq	r5, r1, r4, asr #24
   15f18:	andeq	r5, r1, r4, asr #24
   15f1c:	andeq	r5, r1, r4, asr #24
   15f20:	andeq	r5, r1, r4, asr #24
   15f24:	andeq	r5, r1, r4, asr #24
   15f28:	andeq	r5, r1, r4, asr #24
   15f2c:	andeq	r5, r1, r4, asr #24
   15f30:	andeq	r5, r1, r4, asr #24
   15f34:	andeq	r5, r1, r4, asr #24
   15f38:	andeq	r5, r1, r4, asr #24
   15f3c:	andeq	r5, r1, r4, asr #24
   15f40:	andeq	r5, r1, r4, asr #24
   15f44:	andeq	r5, r1, r4, asr #24
   15f48:	andeq	r5, r1, r4, asr #24
   15f4c:	andeq	r5, r1, r4, asr #24
   15f50:	andeq	r5, r1, r4, asr pc
   15f54:	mov	r3, #2
   15f58:	ldr	sl, [sp, #32]
   15f5c:	mov	r8, fp
   15f60:	str	r3, [sp, #152]	; 0x98
   15f64:	b	156dc <__assert_fail@plt+0x45e0>
   15f68:	ldr	r3, [sp, #156]	; 0x9c
   15f6c:	tst	r3, #1
   15f70:	bne	1609c <__assert_fail@plt+0x4fa0>
   15f74:	ldr	r3, [sp, #152]	; 0x98
   15f78:	ldr	r4, [sp, #44]	; 0x2c
   15f7c:	sub	r2, r3, #2
   15f80:	mov	r5, #0
   15f84:	clz	r2, r2
   15f88:	mov	r8, r4
   15f8c:	lsr	r2, r2, #5
   15f90:	b	1549c <__assert_fail@plt+0x43a0>
   15f94:	ldr	r3, [sp, #156]	; 0x9c
   15f98:	ands	r9, r3, #4
   15f9c:	beq	160d4 <__assert_fail@plt+0x4fd8>
   15fa0:	ldr	r2, [sp, #24]
   15fa4:	add	r3, sl, #2
   15fa8:	cmp	r3, r2
   15fac:	bcs	15fc0 <__assert_fail@plt+0x4ec4>
   15fb0:	ldr	r2, [sp, #48]	; 0x30
   15fb4:	ldrb	r4, [r2, #1]
   15fb8:	cmp	r4, #63	; 0x3f
   15fbc:	beq	1625c <__assert_fail@plt+0x5160>
   15fc0:	mov	r2, #0
   15fc4:	mov	r8, r2
   15fc8:	mov	r5, r2
   15fcc:	mov	r4, #63	; 0x3f
   15fd0:	b	1549c <__assert_fail@plt+0x43a0>
   15fd4:	ldr	r3, [sp, #28]
   15fd8:	cmp	r3, #0
   15fdc:	bne	16300 <__assert_fail@plt+0x5204>
   15fe0:	mov	r2, r5
   15fe4:	mov	r8, r3
   15fe8:	mov	r5, #0
   15fec:	mov	r4, #63	; 0x3f
   15ff0:	b	1549c <__assert_fail@plt+0x43a0>
   15ff4:	ldr	r3, [sp, #28]
   15ff8:	cmp	r3, #0
   15ffc:	bne	16300 <__assert_fail@plt+0x5204>
   16000:	ldr	r2, [sp, #72]	; 0x48
   16004:	adds	r3, fp, #0
   16008:	movne	r3, #1
   1600c:	cmp	r2, #0
   16010:	movne	r3, #0
   16014:	cmp	r3, #0
   16018:	strne	fp, [sp, #72]	; 0x48
   1601c:	movne	fp, #0
   16020:	bne	1605c <__assert_fail@plt+0x4f60>
   16024:	cmp	fp, r7
   16028:	movhi	r2, #39	; 0x27
   1602c:	ldrhi	r3, [sp, #32]
   16030:	strbhi	r2, [r3, r7]
   16034:	add	r3, r7, #1
   16038:	cmp	fp, r3
   1603c:	movhi	r1, #92	; 0x5c
   16040:	ldrhi	r2, [sp, #32]
   16044:	strbhi	r1, [r2, r3]
   16048:	add	r3, r7, #2
   1604c:	cmp	fp, r3
   16050:	movhi	r1, #39	; 0x27
   16054:	ldrhi	r2, [sp, #32]
   16058:	strbhi	r1, [r2, r3]
   1605c:	ldr	r3, [sp, #28]
   16060:	add	r7, r7, #3
   16064:	mov	r2, r5
   16068:	mov	r8, r3
   1606c:	str	r5, [sp, #68]	; 0x44
   16070:	str	r3, [sp, #40]	; 0x28
   16074:	mov	r4, #39	; 0x27
   16078:	b	1549c <__assert_fail@plt+0x43a0>
   1607c:	ldr	r3, [sp, #56]	; 0x38
   16080:	ldrb	r3, [r3, #1]
   16084:	adds	r3, r3, #0
   16088:	movne	r3, #1
   1608c:	b	15474 <__assert_fail@plt+0x4378>
   16090:	ldr	r5, [sp, #28]
   16094:	mov	r4, #48	; 0x30
   16098:	b	1549c <__assert_fail@plt+0x43a0>
   1609c:	add	sl, sl, #1
   160a0:	b	14fcc <__assert_fail@plt+0x3ed0>
   160a4:	mov	sl, r3
   160a8:	ldr	r3, [sp, #28]
   160ac:	mov	r8, fp
   160b0:	str	r3, [sp, #44]	; 0x2c
   160b4:	ldr	r3, [sp, #152]	; 0x98
   160b8:	sub	r2, r3, #2
   160bc:	clz	r2, r2
   160c0:	lsr	r2, r2, #5
   160c4:	b	156dc <__assert_fail@plt+0x45e0>
   160c8:	str	ip, [sp, #40]	; 0x28
   160cc:	ldr	r5, [sp, #48]	; 0x30
   160d0:	b	1550c <__assert_fail@plt+0x4410>
   160d4:	mov	r2, r9
   160d8:	mov	r8, r9
   160dc:	mov	r5, #0
   160e0:	mov	r4, #63	; 0x3f
   160e4:	b	1549c <__assert_fail@plt+0x43a0>
   160e8:	cmp	fp, #0
   160ec:	beq	16164 <__assert_fail@plt+0x5068>
   160f0:	ldr	r1, [sp, #32]
   160f4:	mov	r3, #34	; 0x22
   160f8:	mov	r2, #1
   160fc:	strb	r3, [r1]
   16100:	ldr	r3, [pc, #332]	; 16254 <__assert_fail@plt+0x5158>
   16104:	str	r2, [sp, #52]	; 0x34
   16108:	mov	r7, r2
   1610c:	str	r2, [sp, #44]	; 0x2c
   16110:	str	r3, [sp, #64]	; 0x40
   16114:	b	14fbc <__assert_fail@plt+0x3ec0>
   16118:	ldr	r3, [pc, #300]	; 1624c <__assert_fail@plt+0x5150>
   1611c:	str	r3, [sp, #64]	; 0x40
   16120:	mov	r3, #0
   16124:	str	r3, [sp, #28]
   16128:	mov	r3, #1
   1612c:	str	r3, [sp, #52]	; 0x34
   16130:	mov	r7, r3
   16134:	mov	r3, #2
   16138:	str	r3, [sp, #152]	; 0x98
   1613c:	b	14fbc <__assert_fail@plt+0x3ec0>
   16140:	bl	110d8 <abort@plt>
   16144:	ldr	r0, [sp, #56]	; 0x38
   16148:	bl	10fe8 <strlen@plt>
   1614c:	str	r0, [sp, #24]
   16150:	b	15e28 <__assert_fail@plt+0x4d2c>
   16154:	mov	r5, r8
   16158:	mov	r4, #48	; 0x30
   1615c:	ldr	r8, [sp, #44]	; 0x2c
   16160:	b	1549c <__assert_fail@plt+0x43a0>
   16164:	mov	r3, #1
   16168:	str	r3, [sp, #52]	; 0x34
   1616c:	mov	r7, r3
   16170:	str	r3, [sp, #44]	; 0x2c
   16174:	ldr	r3, [pc, #216]	; 16254 <__assert_fail@plt+0x5158>
   16178:	str	r3, [sp, #64]	; 0x40
   1617c:	b	14fbc <__assert_fail@plt+0x3ec0>
   16180:	ldr	sl, [sp, #32]
   16184:	mov	r8, fp
   16188:	mov	r2, r3
   1618c:	b	156dc <__assert_fail@plt+0x45e0>
   16190:	mov	r3, r5
   16194:	mov	r5, r2
   16198:	b	15994 <__assert_fail@plt+0x4898>
   1619c:	ldr	r1, [sp, #24]
   161a0:	mov	r2, r5
   161a4:	cmp	r1, r9
   161a8:	mov	ip, r5
   161ac:	ldr	r4, [sp, #80]	; 0x50
   161b0:	ldr	r5, [sp, #92]	; 0x5c
   161b4:	ldr	r6, [sp, #84]	; 0x54
   161b8:	ldr	r7, [sp, #88]	; 0x58
   161bc:	bls	161f0 <__assert_fail@plt+0x50f4>
   161c0:	ldrb	r3, [r8]
   161c4:	cmp	r3, #0
   161c8:	bne	161dc <__assert_fail@plt+0x50e0>
   161cc:	b	161f4 <__assert_fail@plt+0x50f8>
   161d0:	ldrb	r3, [r8, #1]!
   161d4:	cmp	r3, #0
   161d8:	beq	162f4 <__assert_fail@plt+0x51f8>
   161dc:	add	r2, r2, #1
   161e0:	add	r3, sl, r2
   161e4:	cmp	r1, r3
   161e8:	bhi	161d0 <__assert_fail@plt+0x50d4>
   161ec:	mov	ip, r2
   161f0:	mov	r3, #0
   161f4:	mov	r2, r3
   161f8:	b	15c8c <__assert_fail@plt+0x4b90>
   161fc:	mov	r3, #0
   16200:	mov	ip, r5
   16204:	ldr	r4, [sp, #80]	; 0x50
   16208:	ldr	r5, [sp, #92]	; 0x5c
   1620c:	ldr	r6, [sp, #84]	; 0x54
   16210:	ldr	r7, [sp, #88]	; 0x58
   16214:	mov	r2, r3
   16218:	b	15c8c <__assert_fail@plt+0x4b90>
   1621c:	mov	r3, r6
   16220:	mov	ip, r5
   16224:	eor	r5, r3, #1
   16228:	mov	r2, r6
   1622c:	ldr	r4, [sp, #80]	; 0x50
   16230:	ldr	r6, [sp, #84]	; 0x54
   16234:	ldr	r7, [sp, #88]	; 0x58
   16238:	uxtb	r5, r5
   1623c:	b	15c8c <__assert_fail@plt+0x4b90>
   16240:	ldr	sl, [sp, #32]
   16244:	mov	r8, fp
   16248:	b	160b0 <__assert_fail@plt+0x4fb4>
   1624c:	andeq	fp, r1, r4, lsl #5
   16250:	andeq	fp, r1, r8, lsl #5
   16254:	andeq	fp, r1, r0, lsl #5
   16258:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1625c:	ldr	r2, [sp, #56]	; 0x38
   16260:	ldrb	r1, [r2, r3]
   16264:	sub	r2, r1, #33	; 0x21
   16268:	uxtb	r2, r2
   1626c:	cmp	r2, #29
   16270:	bhi	16310 <__assert_fail@plt+0x5214>
   16274:	ldr	r0, [pc, #-36]	; 16258 <__assert_fail@plt+0x515c>
   16278:	mov	ip, #1
   1627c:	ands	r2, r0, ip, lsl r2
   16280:	beq	16320 <__assert_fail@plt+0x5224>
   16284:	ldr	r2, [sp, #28]
   16288:	cmp	r2, #0
   1628c:	bne	16420 <__assert_fail@plt+0x5324>
   16290:	cmp	fp, r7
   16294:	ldr	r8, [sp, #28]
   16298:	ldrhi	r2, [sp, #32]
   1629c:	mov	sl, r3
   162a0:	mov	r5, r8
   162a4:	strbhi	r4, [r2, r7]
   162a8:	add	r2, r7, #1
   162ac:	cmp	fp, r2
   162b0:	movhi	r0, #34	; 0x22
   162b4:	ldrhi	ip, [sp, #32]
   162b8:	mov	r4, r1
   162bc:	strbhi	r0, [ip, r2]
   162c0:	add	r2, r7, #2
   162c4:	cmp	fp, r2
   162c8:	movhi	r0, #34	; 0x22
   162cc:	ldrhi	ip, [sp, #32]
   162d0:	strbhi	r0, [ip, r2]
   162d4:	add	r2, r7, #3
   162d8:	cmp	fp, r2
   162dc:	movhi	r0, #63	; 0x3f
   162e0:	ldrhi	ip, [sp, #32]
   162e4:	add	r7, r7, #4
   162e8:	strbhi	r0, [ip, r2]
   162ec:	mov	r2, r8
   162f0:	b	1549c <__assert_fail@plt+0x43a0>
   162f4:	mov	ip, r2
   162f8:	mov	r2, r3
   162fc:	b	15c8c <__assert_fail@plt+0x4b90>
   16300:	ldr	sl, [sp, #32]
   16304:	mov	r8, fp
   16308:	ldr	r2, [sp, #28]
   1630c:	b	156dc <__assert_fail@plt+0x45e0>
   16310:	mov	r2, #0
   16314:	mov	r8, r2
   16318:	mov	r5, r2
   1631c:	b	1549c <__assert_fail@plt+0x43a0>
   16320:	mov	r8, r2
   16324:	mov	r5, #0
   16328:	b	1549c <__assert_fail@plt+0x43a0>
   1632c:	ldr	r1, [sp, #152]	; 0x98
   16330:	bl	14df8 <__assert_fail@plt+0x3cfc>
   16334:	str	r0, [sp, #168]	; 0xa8
   16338:	b	15358 <__assert_fail@plt+0x425c>
   1633c:	ldr	r1, [sp, #152]	; 0x98
   16340:	bl	14df8 <__assert_fail@plt+0x3cfc>
   16344:	str	r0, [sp, #164]	; 0xa4
   16348:	b	15338 <__assert_fail@plt+0x423c>
   1634c:	ldr	r7, [sp, #28]
   16350:	b	15398 <__assert_fail@plt+0x429c>
   16354:	ldr	sl, [sp, #32]
   16358:	ldr	r2, [sp, #68]	; 0x44
   1635c:	mov	r8, fp
   16360:	mov	fp, r7
   16364:	ldr	r3, [sp, #64]	; 0x40
   16368:	cmp	r3, #0
   1636c:	moveq	r2, #0
   16370:	andne	r2, r2, #1
   16374:	cmp	r2, #0
   16378:	beq	163a4 <__assert_fail@plt+0x52a8>
   1637c:	mov	r2, r3
   16380:	ldrb	r3, [r3]
   16384:	cmp	r3, #0
   16388:	beq	163a4 <__assert_fail@plt+0x52a8>
   1638c:	cmp	r8, fp
   16390:	strbhi	r3, [sl, fp]
   16394:	ldrb	r3, [r2, #1]!
   16398:	add	fp, fp, #1
   1639c:	cmp	r3, #0
   163a0:	bne	1638c <__assert_fail@plt+0x5290>
   163a4:	cmp	r8, fp
   163a8:	movhi	r3, #0
   163ac:	strbhi	r3, [sl, fp]
   163b0:	b	15738 <__assert_fail@plt+0x463c>
   163b4:	ldr	r3, [sp, #168]	; 0xa8
   163b8:	ldr	sl, [sp, #32]
   163bc:	str	r3, [sp, #16]
   163c0:	ldr	r3, [sp, #164]	; 0xa4
   163c4:	mov	ip, #5
   163c8:	str	r3, [sp, #12]
   163cc:	ldr	r3, [sp, #160]	; 0xa0
   163d0:	ldr	r2, [sp, #56]	; 0x38
   163d4:	str	r3, [sp, #8]
   163d8:	ldr	r3, [sp, #156]	; 0x9c
   163dc:	ldr	r1, [sp, #72]	; 0x48
   163e0:	str	r3, [sp, #4]
   163e4:	mov	r0, sl
   163e8:	ldr	r3, [sp, #24]
   163ec:	str	ip, [sp]
   163f0:	bl	14f18 <__assert_fail@plt+0x3e1c>
   163f4:	mov	fp, r0
   163f8:	b	15738 <__assert_fail@plt+0x463c>
   163fc:	mov	r8, fp
   16400:	ldr	sl, [sp, #32]
   16404:	mov	fp, r7
   16408:	mov	r2, r3
   1640c:	b	16364 <__assert_fail@plt+0x5268>
   16410:	mov	r8, fp
   16414:	ldr	sl, [sp, #32]
   16418:	mov	fp, r7
   1641c:	b	16364 <__assert_fail@plt+0x5268>
   16420:	ldr	sl, [sp, #32]
   16424:	mov	r8, fp
   16428:	b	156f4 <__assert_fail@plt+0x45f8>
   1642c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16430:	sub	sp, sp, #52	; 0x34
   16434:	mov	r4, r0
   16438:	mov	r5, r3
   1643c:	mov	sl, r1
   16440:	mov	fp, r2
   16444:	bl	11000 <__errno_location@plt>
   16448:	ldr	r7, [pc, #412]	; 165ec <__assert_fail@plt+0x54f0>
   1644c:	cmn	r4, #-2147483647	; 0x80000001
   16450:	ldr	r6, [r7]
   16454:	mov	r8, r0
   16458:	movne	r0, #0
   1645c:	moveq	r0, #1
   16460:	ldr	r3, [r8]
   16464:	orrs	r0, r0, r4, lsr #31
   16468:	str	r3, [sp, #24]
   1646c:	bne	165e8 <__assert_fail@plt+0x54ec>
   16470:	ldr	r2, [r7, #4]
   16474:	cmp	r4, r2
   16478:	blt	164d8 <__assert_fail@plt+0x53dc>
   1647c:	add	r9, r7, #8
   16480:	cmp	r6, r9
   16484:	str	r2, [sp, #44]	; 0x2c
   16488:	beq	165b8 <__assert_fail@plt+0x54bc>
   1648c:	mov	r3, #8
   16490:	sub	r2, r4, r2
   16494:	mov	r0, r6
   16498:	str	r3, [sp]
   1649c:	add	r2, r2, #1
   164a0:	mvn	r3, #-2147483648	; 0x80000000
   164a4:	add	r1, sp, #44	; 0x2c
   164a8:	bl	17298 <__assert_fail@plt+0x619c>
   164ac:	mov	r6, r0
   164b0:	str	r0, [r7]
   164b4:	ldr	r0, [r7, #4]
   164b8:	ldr	r2, [sp, #44]	; 0x2c
   164bc:	mov	r1, #0
   164c0:	sub	r2, r2, r0
   164c4:	add	r0, r6, r0, lsl #3
   164c8:	lsl	r2, r2, #3
   164cc:	bl	11018 <memset@plt>
   164d0:	ldr	r3, [sp, #44]	; 0x2c
   164d4:	str	r3, [r7, #4]
   164d8:	add	r3, r6, r4, lsl #3
   164dc:	ldr	r1, [r5, #4]
   164e0:	ldr	r7, [r3, #4]
   164e4:	ldr	r9, [r6, r4, lsl #3]
   164e8:	ldr	r2, [r5, #40]	; 0x28
   164ec:	ldr	ip, [r5, #44]	; 0x2c
   164f0:	add	r0, r5, #8
   164f4:	str	r3, [sp, #28]
   164f8:	ldr	r3, [r5]
   164fc:	orr	r1, r1, #1
   16500:	mov	lr, r0
   16504:	str	r1, [sp, #32]
   16508:	str	r0, [sp, #36]	; 0x24
   1650c:	str	r1, [sp, #4]
   16510:	str	r2, [sp, #12]
   16514:	str	r3, [sp]
   16518:	mov	r0, r7
   1651c:	mov	r1, r9
   16520:	str	ip, [sp, #16]
   16524:	str	lr, [sp, #8]
   16528:	mov	r3, fp
   1652c:	mov	r2, sl
   16530:	bl	14f18 <__assert_fail@plt+0x3e1c>
   16534:	cmp	r9, r0
   16538:	bhi	165a4 <__assert_fail@plt+0x54a8>
   1653c:	ldr	r3, [pc, #172]	; 165f0 <__assert_fail@plt+0x54f4>
   16540:	add	r9, r0, #1
   16544:	cmp	r7, r3
   16548:	str	r9, [r6, r4, lsl #3]
   1654c:	beq	16558 <__assert_fail@plt+0x545c>
   16550:	mov	r0, r7
   16554:	bl	148b0 <__assert_fail@plt+0x37b4>
   16558:	mov	r0, r9
   1655c:	bl	17134 <__assert_fail@plt+0x6038>
   16560:	ldr	lr, [sp, #28]
   16564:	ldr	ip, [r5, #44]	; 0x2c
   16568:	ldr	r4, [r5, #40]	; 0x28
   1656c:	mov	r3, fp
   16570:	mov	r2, sl
   16574:	mov	r1, r9
   16578:	str	r0, [lr, #4]
   1657c:	ldr	lr, [r5]
   16580:	ldr	r5, [sp, #36]	; 0x24
   16584:	str	ip, [sp, #16]
   16588:	str	r5, [sp, #8]
   1658c:	ldr	r5, [sp, #32]
   16590:	str	r4, [sp, #12]
   16594:	str	r5, [sp, #4]
   16598:	str	lr, [sp]
   1659c:	mov	r7, r0
   165a0:	bl	14f18 <__assert_fail@plt+0x3e1c>
   165a4:	ldr	r3, [sp, #24]
   165a8:	mov	r0, r7
   165ac:	str	r3, [r8]
   165b0:	add	sp, sp, #52	; 0x34
   165b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165b8:	mov	r3, #8
   165bc:	sub	r2, r4, r2
   165c0:	str	r3, [sp]
   165c4:	add	r1, sp, #44	; 0x2c
   165c8:	add	r2, r2, #1
   165cc:	mvn	r3, #-2147483648	; 0x80000000
   165d0:	bl	17298 <__assert_fail@plt+0x619c>
   165d4:	mov	r6, r0
   165d8:	ldm	r9, {r0, r1}
   165dc:	str	r6, [r7]
   165e0:	stm	r6, {r0, r1}
   165e4:	b	164b4 <__assert_fail@plt+0x53b8>
   165e8:	bl	110d8 <abort@plt>
   165ec:	andeq	ip, r2, r0, asr #2
   165f0:	andeq	ip, r2, r0, lsl r2
   165f4:	push	{r4, r5, r6, lr}
   165f8:	mov	r5, r0
   165fc:	bl	11000 <__errno_location@plt>
   16600:	cmp	r5, #0
   16604:	mov	r1, #48	; 0x30
   16608:	mov	r4, r0
   1660c:	ldr	r0, [pc, #16]	; 16624 <__assert_fail@plt+0x5528>
   16610:	ldr	r6, [r4]
   16614:	movne	r0, r5
   16618:	bl	17594 <__assert_fail@plt+0x6498>
   1661c:	str	r6, [r4]
   16620:	pop	{r4, r5, r6, pc}
   16624:	andeq	ip, r2, r0, lsl r3
   16628:	ldr	r3, [pc, #12]	; 1663c <__assert_fail@plt+0x5540>
   1662c:	cmp	r0, #0
   16630:	moveq	r0, r3
   16634:	ldr	r0, [r0]
   16638:	bx	lr
   1663c:	andeq	ip, r2, r0, lsl r3
   16640:	ldr	r3, [pc, #12]	; 16654 <__assert_fail@plt+0x5558>
   16644:	cmp	r0, #0
   16648:	moveq	r0, r3
   1664c:	str	r1, [r0]
   16650:	bx	lr
   16654:	andeq	ip, r2, r0, lsl r3
   16658:	ldr	r3, [pc, #52]	; 16694 <__assert_fail@plt+0x5598>
   1665c:	cmp	r0, #0
   16660:	moveq	r0, r3
   16664:	add	r3, r0, #8
   16668:	push	{lr}		; (str lr, [sp, #-4]!)
   1666c:	lsr	lr, r1, #5
   16670:	and	r1, r1, #31
   16674:	ldr	ip, [r3, lr, lsl #2]
   16678:	lsr	r0, ip, r1
   1667c:	eor	r2, r2, r0
   16680:	and	r2, r2, #1
   16684:	and	r0, r0, #1
   16688:	eor	r1, ip, r2, lsl r1
   1668c:	str	r1, [r3, lr, lsl #2]
   16690:	pop	{pc}		; (ldr pc, [sp], #4)
   16694:	andeq	ip, r2, r0, lsl r3
   16698:	ldr	r3, [pc, #16]	; 166b0 <__assert_fail@plt+0x55b4>
   1669c:	cmp	r0, #0
   166a0:	movne	r3, r0
   166a4:	ldr	r0, [r3, #4]
   166a8:	str	r1, [r3, #4]
   166ac:	bx	lr
   166b0:	andeq	ip, r2, r0, lsl r3
   166b4:	ldr	r3, [pc, #44]	; 166e8 <__assert_fail@plt+0x55ec>
   166b8:	cmp	r0, #0
   166bc:	moveq	r0, r3
   166c0:	mov	ip, #10
   166c4:	cmp	r2, #0
   166c8:	cmpne	r1, #0
   166cc:	str	ip, [r0]
   166d0:	beq	166e0 <__assert_fail@plt+0x55e4>
   166d4:	str	r1, [r0, #40]	; 0x28
   166d8:	str	r2, [r0, #44]	; 0x2c
   166dc:	bx	lr
   166e0:	push	{r4, lr}
   166e4:	bl	110d8 <abort@plt>
   166e8:	andeq	ip, r2, r0, lsl r3
   166ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166f0:	sub	sp, sp, #24
   166f4:	ldr	ip, [pc, #108]	; 16768 <__assert_fail@plt+0x566c>
   166f8:	ldr	r4, [sp, #56]	; 0x38
   166fc:	mov	r9, r2
   16700:	cmp	r4, #0
   16704:	moveq	r4, ip
   16708:	mov	sl, r3
   1670c:	mov	r7, r0
   16710:	mov	r8, r1
   16714:	bl	11000 <__errno_location@plt>
   16718:	ldr	r3, [r4, #44]	; 0x2c
   1671c:	mov	r1, r8
   16720:	ldr	r6, [r0]
   16724:	str	r3, [sp, #16]
   16728:	ldr	r2, [r4, #40]	; 0x28
   1672c:	add	r3, r4, #8
   16730:	str	r3, [sp, #8]
   16734:	str	r2, [sp, #12]
   16738:	ldr	r2, [r4, #4]
   1673c:	mov	r5, r0
   16740:	str	r2, [sp, #4]
   16744:	ldr	ip, [r4]
   16748:	mov	r3, sl
   1674c:	mov	r2, r9
   16750:	mov	r0, r7
   16754:	str	ip, [sp]
   16758:	bl	14f18 <__assert_fail@plt+0x3e1c>
   1675c:	str	r6, [r5]
   16760:	add	sp, sp, #24
   16764:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16768:	andeq	ip, r2, r0, lsl r3
   1676c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16770:	cmp	r3, #0
   16774:	sub	sp, sp, #44	; 0x2c
   16778:	ldr	r4, [pc, #192]	; 16840 <__assert_fail@plt+0x5744>
   1677c:	mov	r6, r2
   16780:	movne	r4, r3
   16784:	mov	r9, r1
   16788:	mov	r8, r0
   1678c:	bl	11000 <__errno_location@plt>
   16790:	ldr	r3, [r4, #44]	; 0x2c
   16794:	ldr	r5, [r4, #4]
   16798:	add	sl, r4, #8
   1679c:	cmp	r6, #0
   167a0:	orreq	r5, r5, #1
   167a4:	mov	r1, #0
   167a8:	ldr	r2, [r0]
   167ac:	str	r3, [sp, #16]
   167b0:	ldr	r3, [r4, #40]	; 0x28
   167b4:	stmib	sp, {r5, sl}
   167b8:	str	r3, [sp, #12]
   167bc:	ldr	r3, [r4]
   167c0:	mov	r7, r0
   167c4:	str	r2, [sp, #28]
   167c8:	str	r3, [sp]
   167cc:	mov	r2, r8
   167d0:	mov	r3, r9
   167d4:	mov	r0, r1
   167d8:	bl	14f18 <__assert_fail@plt+0x3e1c>
   167dc:	add	r1, r0, #1
   167e0:	mov	fp, r0
   167e4:	mov	r0, r1
   167e8:	str	r1, [sp, #36]	; 0x24
   167ec:	bl	17134 <__assert_fail@plt+0x6038>
   167f0:	ldr	r3, [r4, #44]	; 0x2c
   167f4:	mov	r2, r8
   167f8:	str	r3, [sp, #16]
   167fc:	ldr	r3, [r4, #40]	; 0x28
   16800:	str	r5, [sp, #4]
   16804:	str	r3, [sp, #12]
   16808:	str	sl, [sp, #8]
   1680c:	ldr	ip, [r4]
   16810:	ldr	r1, [sp, #36]	; 0x24
   16814:	mov	r3, r9
   16818:	str	ip, [sp]
   1681c:	str	r0, [sp, #32]
   16820:	bl	14f18 <__assert_fail@plt+0x3e1c>
   16824:	ldr	r2, [sp, #28]
   16828:	cmp	r6, #0
   1682c:	str	r2, [r7]
   16830:	ldr	r0, [sp, #32]
   16834:	strne	fp, [r6]
   16838:	add	sp, sp, #44	; 0x2c
   1683c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16840:	andeq	ip, r2, r0, lsl r3
   16844:	mov	r3, r2
   16848:	mov	r2, #0
   1684c:	b	1676c <__assert_fail@plt+0x5670>
   16850:	push	{r4, r5, r6, r7, r8, lr}
   16854:	ldr	r6, [pc, #116]	; 168d0 <__assert_fail@plt+0x57d4>
   16858:	ldr	r3, [r6, #4]
   1685c:	ldr	r7, [r6]
   16860:	cmp	r3, #1
   16864:	movgt	r5, r7
   16868:	movgt	r4, #1
   1686c:	ble	1688c <__assert_fail@plt+0x5790>
   16870:	ldr	r0, [r5, #12]
   16874:	bl	148b0 <__assert_fail@plt+0x37b4>
   16878:	ldr	r3, [r6, #4]
   1687c:	add	r4, r4, #1
   16880:	cmp	r3, r4
   16884:	add	r5, r5, #8
   16888:	bgt	16870 <__assert_fail@plt+0x5774>
   1688c:	ldr	r0, [r7, #4]
   16890:	ldr	r4, [pc, #60]	; 168d4 <__assert_fail@plt+0x57d8>
   16894:	cmp	r0, r4
   16898:	beq	168ac <__assert_fail@plt+0x57b0>
   1689c:	bl	148b0 <__assert_fail@plt+0x37b4>
   168a0:	mov	r3, #256	; 0x100
   168a4:	str	r4, [r6, #12]
   168a8:	str	r3, [r6, #8]
   168ac:	ldr	r4, [pc, #36]	; 168d8 <__assert_fail@plt+0x57dc>
   168b0:	cmp	r7, r4
   168b4:	beq	168c4 <__assert_fail@plt+0x57c8>
   168b8:	mov	r0, r7
   168bc:	bl	148b0 <__assert_fail@plt+0x37b4>
   168c0:	str	r4, [r6]
   168c4:	mov	r3, #1
   168c8:	str	r3, [r6, #4]
   168cc:	pop	{r4, r5, r6, r7, r8, pc}
   168d0:	andeq	ip, r2, r0, asr #2
   168d4:	andeq	ip, r2, r0, lsl r2
   168d8:	andeq	ip, r2, r8, asr #2
   168dc:	ldr	r3, [pc, #4]	; 168e8 <__assert_fail@plt+0x57ec>
   168e0:	mvn	r2, #0
   168e4:	b	1642c <__assert_fail@plt+0x5330>
   168e8:	andeq	ip, r2, r0, lsl r3
   168ec:	ldr	r3, [pc]	; 168f4 <__assert_fail@plt+0x57f8>
   168f0:	b	1642c <__assert_fail@plt+0x5330>
   168f4:	andeq	ip, r2, r0, lsl r3
   168f8:	mov	r1, r0
   168fc:	ldr	r3, [pc, #8]	; 1690c <__assert_fail@plt+0x5810>
   16900:	mvn	r2, #0
   16904:	mov	r0, #0
   16908:	b	1642c <__assert_fail@plt+0x5330>
   1690c:	andeq	ip, r2, r0, lsl r3
   16910:	mov	r2, r1
   16914:	ldr	r3, [pc, #8]	; 16924 <__assert_fail@plt+0x5828>
   16918:	mov	r1, r0
   1691c:	mov	r0, #0
   16920:	b	1642c <__assert_fail@plt+0x5330>
   16924:	andeq	ip, r2, r0, lsl r3
   16928:	push	{r4, r5, lr}
   1692c:	sub	sp, sp, #52	; 0x34
   16930:	mov	r5, r2
   16934:	mov	r4, r0
   16938:	mov	r0, sp
   1693c:	bl	14dc8 <__assert_fail@plt+0x3ccc>
   16940:	mov	r3, sp
   16944:	mov	r1, r5
   16948:	mov	r0, r4
   1694c:	mvn	r2, #0
   16950:	bl	1642c <__assert_fail@plt+0x5330>
   16954:	add	sp, sp, #52	; 0x34
   16958:	pop	{r4, r5, pc}
   1695c:	push	{r4, r5, r6, lr}
   16960:	sub	sp, sp, #48	; 0x30
   16964:	mov	r5, r2
   16968:	mov	r6, r3
   1696c:	mov	r4, r0
   16970:	mov	r0, sp
   16974:	bl	14dc8 <__assert_fail@plt+0x3ccc>
   16978:	mov	r3, sp
   1697c:	mov	r2, r6
   16980:	mov	r1, r5
   16984:	mov	r0, r4
   16988:	bl	1642c <__assert_fail@plt+0x5330>
   1698c:	add	sp, sp, #48	; 0x30
   16990:	pop	{r4, r5, r6, pc}
   16994:	mov	r2, r1
   16998:	mov	r1, r0
   1699c:	mov	r0, #0
   169a0:	b	16928 <__assert_fail@plt+0x582c>
   169a4:	mov	r3, r2
   169a8:	mov	r2, r1
   169ac:	mov	r1, r0
   169b0:	mov	r0, #0
   169b4:	b	1695c <__assert_fail@plt+0x5860>
   169b8:	push	{r4, r5, r6, r7, r8, lr}
   169bc:	mov	r7, r0
   169c0:	ldr	lr, [pc, #100]	; 16a2c <__assert_fail@plt+0x5930>
   169c4:	mov	r8, r1
   169c8:	mov	r4, r2
   169cc:	ldm	lr!, {r0, r1, r2, r3}
   169d0:	sub	sp, sp, #48	; 0x30
   169d4:	mov	ip, sp
   169d8:	lsr	r5, r4, #5
   169dc:	stmia	ip!, {r0, r1, r2, r3}
   169e0:	add	r6, sp, #8
   169e4:	ldm	lr!, {r0, r1, r2, r3}
   169e8:	and	r4, r4, #31
   169ec:	stmia	ip!, {r0, r1, r2, r3}
   169f0:	ldm	lr, {r0, r1, r2, r3}
   169f4:	stm	ip, {r0, r1, r2, r3}
   169f8:	mov	r2, r8
   169fc:	ldr	lr, [r6, r5, lsl #2]
   16a00:	mov	r1, r7
   16a04:	mov	r3, sp
   16a08:	lsr	ip, lr, r4
   16a0c:	eor	ip, ip, #1
   16a10:	and	ip, ip, #1
   16a14:	mov	r0, #0
   16a18:	eor	r4, lr, ip, lsl r4
   16a1c:	str	r4, [r6, r5, lsl #2]
   16a20:	bl	1642c <__assert_fail@plt+0x5330>
   16a24:	add	sp, sp, #48	; 0x30
   16a28:	pop	{r4, r5, r6, r7, r8, pc}
   16a2c:	andeq	ip, r2, r0, lsl r3
   16a30:	mov	r2, r1
   16a34:	mvn	r1, #0
   16a38:	b	169b8 <__assert_fail@plt+0x58bc>
   16a3c:	mov	r2, #58	; 0x3a
   16a40:	mvn	r1, #0
   16a44:	b	169b8 <__assert_fail@plt+0x58bc>
   16a48:	mov	r2, #58	; 0x3a
   16a4c:	b	169b8 <__assert_fail@plt+0x58bc>
   16a50:	push	{r4, r5, r6, r7, lr}
   16a54:	sub	sp, sp, #100	; 0x64
   16a58:	mov	r6, r0
   16a5c:	mov	r0, sp
   16a60:	mov	r7, r2
   16a64:	bl	14dc8 <__assert_fail@plt+0x3ccc>
   16a68:	mov	ip, sp
   16a6c:	add	lr, sp, #48	; 0x30
   16a70:	ldm	ip!, {r0, r1, r2, r3}
   16a74:	stmia	lr!, {r0, r1, r2, r3}
   16a78:	ldm	ip!, {r0, r1, r2, r3}
   16a7c:	ldr	r5, [sp, #60]	; 0x3c
   16a80:	stmia	lr!, {r0, r1, r2, r3}
   16a84:	mvn	r4, r5
   16a88:	ldm	ip, {r0, r1, r2, r3}
   16a8c:	and	ip, r4, #67108864	; 0x4000000
   16a90:	eor	ip, ip, r5
   16a94:	str	ip, [sp, #60]	; 0x3c
   16a98:	stm	lr, {r0, r1, r2, r3}
   16a9c:	mov	r1, r7
   16aa0:	mov	r0, r6
   16aa4:	add	r3, sp, #48	; 0x30
   16aa8:	mvn	r2, #0
   16aac:	bl	1642c <__assert_fail@plt+0x5330>
   16ab0:	add	sp, sp, #100	; 0x64
   16ab4:	pop	{r4, r5, r6, r7, pc}
   16ab8:	push	{r4, r5, r6, r7, r8, lr}
   16abc:	mov	r5, r1
   16ac0:	ldr	lr, [pc, #100]	; 16b2c <__assert_fail@plt+0x5a30>
   16ac4:	mov	r4, r2
   16ac8:	mov	r7, r0
   16acc:	mov	r8, r3
   16ad0:	ldm	lr!, {r0, r1, r2, r3}
   16ad4:	sub	sp, sp, #48	; 0x30
   16ad8:	mov	ip, sp
   16adc:	mov	r6, #10
   16ae0:	stmia	ip!, {r0, r1, r2, r3}
   16ae4:	cmp	r4, #0
   16ae8:	cmpne	r5, #0
   16aec:	ldm	lr!, {r0, r1, r2, r3}
   16af0:	str	r6, [sp]
   16af4:	stmia	ip!, {r0, r1, r2, r3}
   16af8:	ldm	lr, {r0, r1, r2, r3}
   16afc:	stm	ip, {r0, r1, r2, r3}
   16b00:	beq	16b28 <__assert_fail@plt+0x5a2c>
   16b04:	mov	r3, sp
   16b08:	mov	r1, r8
   16b0c:	mov	r0, r7
   16b10:	ldr	r2, [sp, #72]	; 0x48
   16b14:	str	r5, [sp, #40]	; 0x28
   16b18:	str	r4, [sp, #44]	; 0x2c
   16b1c:	bl	1642c <__assert_fail@plt+0x5330>
   16b20:	add	sp, sp, #48	; 0x30
   16b24:	pop	{r4, r5, r6, r7, r8, pc}
   16b28:	bl	110d8 <abort@plt>
   16b2c:	andeq	ip, r2, r0, lsl r3
   16b30:	push	{lr}		; (str lr, [sp, #-4]!)
   16b34:	sub	sp, sp, #12
   16b38:	mvn	ip, #0
   16b3c:	str	ip, [sp]
   16b40:	bl	16ab8 <__assert_fail@plt+0x59bc>
   16b44:	add	sp, sp, #12
   16b48:	pop	{pc}		; (ldr pc, [sp], #4)
   16b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   16b50:	sub	sp, sp, #12
   16b54:	mvn	ip, #0
   16b58:	mov	r3, r2
   16b5c:	str	ip, [sp]
   16b60:	mov	r2, r1
   16b64:	mov	r1, r0
   16b68:	mov	r0, #0
   16b6c:	bl	16ab8 <__assert_fail@plt+0x59bc>
   16b70:	add	sp, sp, #12
   16b74:	pop	{pc}		; (ldr pc, [sp], #4)
   16b78:	push	{lr}		; (str lr, [sp, #-4]!)
   16b7c:	sub	sp, sp, #12
   16b80:	str	r3, [sp]
   16b84:	mov	r3, r2
   16b88:	mov	r2, r1
   16b8c:	mov	r1, r0
   16b90:	mov	r0, #0
   16b94:	bl	16ab8 <__assert_fail@plt+0x59bc>
   16b98:	add	sp, sp, #12
   16b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   16ba0:	ldr	r3, [pc]	; 16ba8 <__assert_fail@plt+0x5aac>
   16ba4:	b	1642c <__assert_fail@plt+0x5330>
   16ba8:	andeq	ip, r2, r0, asr r1
   16bac:	mov	r2, r1
   16bb0:	ldr	r3, [pc, #8]	; 16bc0 <__assert_fail@plt+0x5ac4>
   16bb4:	mov	r1, r0
   16bb8:	mov	r0, #0
   16bbc:	b	1642c <__assert_fail@plt+0x5330>
   16bc0:	andeq	ip, r2, r0, asr r1
   16bc4:	ldr	r3, [pc, #4]	; 16bd0 <__assert_fail@plt+0x5ad4>
   16bc8:	mvn	r2, #0
   16bcc:	b	1642c <__assert_fail@plt+0x5330>
   16bd0:	andeq	ip, r2, r0, asr r1
   16bd4:	mov	r1, r0
   16bd8:	ldr	r3, [pc, #8]	; 16be8 <__assert_fail@plt+0x5aec>
   16bdc:	mvn	r2, #0
   16be0:	mov	r0, #0
   16be4:	b	1642c <__assert_fail@plt+0x5330>
   16be8:	andeq	ip, r2, r0, asr r1
   16bec:	push	{r4, r5, r6, lr}
   16bf0:	sub	sp, sp, #32
   16bf4:	cmp	r1, #0
   16bf8:	mov	r4, r0
   16bfc:	ldr	r5, [sp, #48]	; 0x30
   16c00:	ldr	r6, [sp, #52]	; 0x34
   16c04:	beq	16f1c <__assert_fail@plt+0x5e20>
   16c08:	stm	sp, {r2, r3}
   16c0c:	mov	r3, r1
   16c10:	ldr	r2, [pc, #808]	; 16f40 <__assert_fail@plt+0x5e44>
   16c14:	mov	r1, #1
   16c18:	bl	1103c <__fprintf_chk@plt>
   16c1c:	mov	r2, #5
   16c20:	ldr	r1, [pc, #796]	; 16f44 <__assert_fail@plt+0x5e48>
   16c24:	mov	r0, #0
   16c28:	bl	10ef8 <dcgettext@plt>
   16c2c:	ldr	r3, [pc, #788]	; 16f48 <__assert_fail@plt+0x5e4c>
   16c30:	ldr	r2, [pc, #788]	; 16f4c <__assert_fail@plt+0x5e50>
   16c34:	str	r3, [sp]
   16c38:	mov	r1, #1
   16c3c:	mov	r3, r0
   16c40:	mov	r0, r4
   16c44:	bl	1103c <__fprintf_chk@plt>
   16c48:	mov	r1, r4
   16c4c:	mov	r0, #10
   16c50:	bl	10eec <fputc_unlocked@plt>
   16c54:	mov	r2, #5
   16c58:	ldr	r1, [pc, #752]	; 16f50 <__assert_fail@plt+0x5e54>
   16c5c:	mov	r0, #0
   16c60:	bl	10ef8 <dcgettext@plt>
   16c64:	mov	r1, #1
   16c68:	ldr	r3, [pc, #740]	; 16f54 <__assert_fail@plt+0x5e58>
   16c6c:	mov	r2, r0
   16c70:	mov	r0, r4
   16c74:	bl	1103c <__fprintf_chk@plt>
   16c78:	mov	r1, r4
   16c7c:	mov	r0, #10
   16c80:	bl	10eec <fputc_unlocked@plt>
   16c84:	cmp	r6, #9
   16c88:	ldrls	pc, [pc, r6, lsl #2]
   16c8c:	b	16f34 <__assert_fail@plt+0x5e38>
   16c90:	andeq	r6, r1, r4, lsl sp
   16c94:	andeq	r6, r1, ip, lsl sp
   16c98:	andeq	r6, r1, r8, asr #26
   16c9c:	andeq	r6, r1, ip, ror sp
   16ca0:			; <UNDEFINED> instruction: 0x00016db8
   16ca4:	strdeq	r6, [r1], -r4
   16ca8:	andeq	r6, r1, r0, lsr lr
   16cac:	andeq	r6, r1, r4, ror lr
   16cb0:	andeq	r6, r1, r4, asr #29
   16cb4:			; <UNDEFINED> instruction: 0x00016cb8
   16cb8:	ldr	r1, [pc, #664]	; 16f58 <__assert_fail@plt+0x5e5c>
   16cbc:	mov	r2, #5
   16cc0:	mov	r0, #0
   16cc4:	bl	10ef8 <dcgettext@plt>
   16cc8:	ldr	ip, [r5, #32]
   16ccc:	ldr	r1, [r5, #28]
   16cd0:	ldr	r2, [r5, #24]
   16cd4:	ldr	r3, [r5]
   16cd8:	ldr	r6, [r5, #20]
   16cdc:	str	ip, [sp, #28]
   16ce0:	ldr	lr, [r5, #16]
   16ce4:	str	r1, [sp, #24]
   16ce8:	ldr	ip, [r5, #12]
   16cec:	str	r2, [sp, #20]
   16cf0:	ldr	r1, [r5, #8]
   16cf4:	ldr	r2, [r5, #4]
   16cf8:	str	r6, [sp, #16]
   16cfc:	stmib	sp, {r1, ip, lr}
   16d00:	mov	r1, #1
   16d04:	str	r2, [sp]
   16d08:	mov	r2, r0
   16d0c:	mov	r0, r4
   16d10:	bl	1103c <__fprintf_chk@plt>
   16d14:	add	sp, sp, #32
   16d18:	pop	{r4, r5, r6, pc}
   16d1c:	mov	r2, #5
   16d20:	ldr	r1, [pc, #564]	; 16f5c <__assert_fail@plt+0x5e60>
   16d24:	mov	r0, #0
   16d28:	bl	10ef8 <dcgettext@plt>
   16d2c:	ldr	r3, [r5]
   16d30:	mov	r1, #1
   16d34:	mov	r2, r0
   16d38:	mov	r0, r4
   16d3c:	add	sp, sp, #32
   16d40:	pop	{r4, r5, r6, lr}
   16d44:	b	1103c <__fprintf_chk@plt>
   16d48:	mov	r2, #5
   16d4c:	ldr	r1, [pc, #524]	; 16f60 <__assert_fail@plt+0x5e64>
   16d50:	mov	r0, #0
   16d54:	bl	10ef8 <dcgettext@plt>
   16d58:	ldr	r2, [r5, #4]
   16d5c:	ldr	r3, [r5]
   16d60:	mov	r1, #1
   16d64:	str	r2, [sp, #48]	; 0x30
   16d68:	mov	r2, r0
   16d6c:	mov	r0, r4
   16d70:	add	sp, sp, #32
   16d74:	pop	{r4, r5, r6, lr}
   16d78:	b	1103c <__fprintf_chk@plt>
   16d7c:	mov	r2, #5
   16d80:	ldr	r1, [pc, #476]	; 16f64 <__assert_fail@plt+0x5e68>
   16d84:	mov	r0, #0
   16d88:	bl	10ef8 <dcgettext@plt>
   16d8c:	ldr	r1, [r5, #8]
   16d90:	ldr	r2, [r5, #4]
   16d94:	ldr	r3, [r5]
   16d98:	str	r1, [sp, #52]	; 0x34
   16d9c:	str	r2, [sp, #48]	; 0x30
   16da0:	mov	r1, #1
   16da4:	mov	r2, r0
   16da8:	mov	r0, r4
   16dac:	add	sp, sp, #32
   16db0:	pop	{r4, r5, r6, lr}
   16db4:	b	1103c <__fprintf_chk@plt>
   16db8:	mov	r2, #5
   16dbc:	ldr	r1, [pc, #420]	; 16f68 <__assert_fail@plt+0x5e6c>
   16dc0:	mov	r0, #0
   16dc4:	bl	10ef8 <dcgettext@plt>
   16dc8:	ldr	r1, [r5, #8]
   16dcc:	ldr	ip, [r5, #12]
   16dd0:	ldr	r2, [r5, #4]
   16dd4:	ldr	r3, [r5]
   16dd8:	stmib	sp, {r1, ip}
   16ddc:	str	r2, [sp]
   16de0:	mov	r1, #1
   16de4:	mov	r2, r0
   16de8:	mov	r0, r4
   16dec:	bl	1103c <__fprintf_chk@plt>
   16df0:	b	16d14 <__assert_fail@plt+0x5c18>
   16df4:	mov	r2, #5
   16df8:	ldr	r1, [pc, #364]	; 16f6c <__assert_fail@plt+0x5e70>
   16dfc:	mov	r0, #0
   16e00:	bl	10ef8 <dcgettext@plt>
   16e04:	add	r1, r5, #8
   16e08:	ldr	r2, [r5, #4]
   16e0c:	ldm	r1, {r1, ip, lr}
   16e10:	ldr	r3, [r5]
   16e14:	str	r2, [sp]
   16e18:	stmib	sp, {r1, ip, lr}
   16e1c:	mov	r1, #1
   16e20:	mov	r2, r0
   16e24:	mov	r0, r4
   16e28:	bl	1103c <__fprintf_chk@plt>
   16e2c:	b	16d14 <__assert_fail@plt+0x5c18>
   16e30:	mov	r2, #5
   16e34:	ldr	r1, [pc, #308]	; 16f70 <__assert_fail@plt+0x5e74>
   16e38:	mov	r0, #0
   16e3c:	bl	10ef8 <dcgettext@plt>
   16e40:	add	r1, r5, #8
   16e44:	ldr	r2, [r5, #4]
   16e48:	ldm	r1, {r1, ip, lr}
   16e4c:	ldr	r6, [r5, #20]
   16e50:	ldr	r3, [r5]
   16e54:	stmib	sp, {r1, ip, lr}
   16e58:	mov	r1, #1
   16e5c:	str	r2, [sp]
   16e60:	str	r6, [sp, #16]
   16e64:	mov	r2, r0
   16e68:	mov	r0, r4
   16e6c:	bl	1103c <__fprintf_chk@plt>
   16e70:	b	16d14 <__assert_fail@plt+0x5c18>
   16e74:	mov	r2, #5
   16e78:	ldr	r1, [pc, #244]	; 16f74 <__assert_fail@plt+0x5e78>
   16e7c:	mov	r0, #0
   16e80:	bl	10ef8 <dcgettext@plt>
   16e84:	ldr	r2, [r5, #24]
   16e88:	ldr	r3, [r5]
   16e8c:	ldr	r6, [r5, #20]
   16e90:	ldr	lr, [r5, #16]
   16e94:	ldr	ip, [r5, #12]
   16e98:	str	r2, [sp, #20]
   16e9c:	ldr	r1, [r5, #8]
   16ea0:	ldr	r2, [r5, #4]
   16ea4:	str	r6, [sp, #16]
   16ea8:	stmib	sp, {r1, ip, lr}
   16eac:	mov	r1, #1
   16eb0:	str	r2, [sp]
   16eb4:	mov	r2, r0
   16eb8:	mov	r0, r4
   16ebc:	bl	1103c <__fprintf_chk@plt>
   16ec0:	b	16d14 <__assert_fail@plt+0x5c18>
   16ec4:	mov	r2, #5
   16ec8:	ldr	r1, [pc, #168]	; 16f78 <__assert_fail@plt+0x5e7c>
   16ecc:	mov	r0, #0
   16ed0:	bl	10ef8 <dcgettext@plt>
   16ed4:	ldr	r1, [r5, #28]
   16ed8:	ldr	r2, [r5, #24]
   16edc:	ldr	r3, [r5]
   16ee0:	ldr	r6, [r5, #20]
   16ee4:	ldr	lr, [r5, #16]
   16ee8:	str	r1, [sp, #24]
   16eec:	ldr	ip, [r5, #12]
   16ef0:	str	r2, [sp, #20]
   16ef4:	ldr	r1, [r5, #8]
   16ef8:	ldr	r2, [r5, #4]
   16efc:	str	r6, [sp, #16]
   16f00:	stmib	sp, {r1, ip, lr}
   16f04:	mov	r1, #1
   16f08:	str	r2, [sp]
   16f0c:	mov	r2, r0
   16f10:	mov	r0, r4
   16f14:	bl	1103c <__fprintf_chk@plt>
   16f18:	b	16d14 <__assert_fail@plt+0x5c18>
   16f1c:	str	r3, [sp]
   16f20:	mov	r1, #1
   16f24:	mov	r3, r2
   16f28:	ldr	r2, [pc, #76]	; 16f7c <__assert_fail@plt+0x5e80>
   16f2c:	bl	1103c <__fprintf_chk@plt>
   16f30:	b	16c1c <__assert_fail@plt+0x5b20>
   16f34:	mov	r2, #5
   16f38:	ldr	r1, [pc, #64]	; 16f80 <__assert_fail@plt+0x5e84>
   16f3c:	b	16cc0 <__assert_fail@plt+0x5bc4>
   16f40:	strdeq	fp, [r1], -r0
   16f44:	andeq	fp, r1, r4, lsl #6
   16f48:	andeq	r0, r0, r6, ror #15
   16f4c:	ldrdeq	fp, [r1], -ip
   16f50:	andeq	fp, r1, r8, lsl #6
   16f54:			; <UNDEFINED> instruction: 0x0001b3b4
   16f58:	andeq	fp, r1, r4, ror #9
   16f5c:	ldrdeq	fp, [r1], -r8
   16f60:	andeq	fp, r1, r8, ror #7
   16f64:	andeq	fp, r1, r0, lsl #8
   16f68:	andeq	fp, r1, ip, lsl r4
   16f6c:	andeq	fp, r1, ip, lsr r4
   16f70:	andeq	fp, r1, r0, ror #8
   16f74:	andeq	fp, r1, r8, lsl #9
   16f78:			; <UNDEFINED> instruction: 0x0001b4b4
   16f7c:	strdeq	fp, [r1], -ip
   16f80:	andeq	fp, r1, r8, lsl r5
   16f84:	push	{r4, r5, lr}
   16f88:	sub	sp, sp, #12
   16f8c:	ldr	r5, [sp, #24]
   16f90:	ldr	ip, [r5]
   16f94:	cmp	ip, #0
   16f98:	beq	16fb4 <__assert_fail@plt+0x5eb8>
   16f9c:	mov	lr, r5
   16fa0:	mov	ip, #0
   16fa4:	ldr	r4, [lr, #4]!
   16fa8:	add	ip, ip, #1
   16fac:	cmp	r4, #0
   16fb0:	bne	16fa4 <__assert_fail@plt+0x5ea8>
   16fb4:	stm	sp, {r5, ip}
   16fb8:	bl	16bec <__assert_fail@plt+0x5af0>
   16fbc:	add	sp, sp, #12
   16fc0:	pop	{r4, r5, pc}
   16fc4:	push	{r4, r5, lr}
   16fc8:	sub	sp, sp, #52	; 0x34
   16fcc:	add	r5, sp, #4
   16fd0:	ldr	r4, [sp, #64]	; 0x40
   16fd4:	mov	ip, #0
   16fd8:	sub	r4, r4, #4
   16fdc:	ldr	lr, [r4, #4]!
   16fe0:	cmp	lr, #0
   16fe4:	str	lr, [r5, #4]!
   16fe8:	beq	16ff8 <__assert_fail@plt+0x5efc>
   16fec:	add	ip, ip, #1
   16ff0:	cmp	ip, #10
   16ff4:	bne	16fdc <__assert_fail@plt+0x5ee0>
   16ff8:	add	lr, sp, #8
   16ffc:	str	ip, [sp, #4]
   17000:	str	lr, [sp]
   17004:	bl	16bec <__assert_fail@plt+0x5af0>
   17008:	add	sp, sp, #52	; 0x34
   1700c:	pop	{r4, r5, pc}
   17010:	push	{r3}		; (str r3, [sp, #-4]!)
   17014:	push	{r4, lr}
   17018:	sub	sp, sp, #60	; 0x3c
   1701c:	add	lr, sp, #56	; 0x38
   17020:	add	r3, sp, #72	; 0x48
   17024:	str	r3, [lr, #-44]!	; 0xffffffd4
   17028:	add	r4, sp, #68	; 0x44
   1702c:	mov	r3, #0
   17030:	ldr	ip, [r4, #4]!
   17034:	cmp	ip, #0
   17038:	str	ip, [lr, #4]!
   1703c:	beq	1704c <__assert_fail@plt+0x5f50>
   17040:	add	r3, r3, #1
   17044:	cmp	r3, #10
   17048:	bne	17030 <__assert_fail@plt+0x5f34>
   1704c:	add	ip, sp, #16
   17050:	str	r3, [sp, #4]
   17054:	str	ip, [sp]
   17058:	ldr	r3, [sp, #68]	; 0x44
   1705c:	bl	16bec <__assert_fail@plt+0x5af0>
   17060:	add	sp, sp, #60	; 0x3c
   17064:	pop	{r4, lr}
   17068:	add	sp, sp, #4
   1706c:	bx	lr
   17070:	ldr	r3, [pc, #116]	; 170ec <__assert_fail@plt+0x5ff0>
   17074:	push	{r4, lr}
   17078:	mov	r0, #10
   1707c:	ldr	r1, [r3]
   17080:	bl	10eec <fputc_unlocked@plt>
   17084:	mov	r2, #5
   17088:	ldr	r1, [pc, #96]	; 170f0 <__assert_fail@plt+0x5ff4>
   1708c:	mov	r0, #0
   17090:	bl	10ef8 <dcgettext@plt>
   17094:	ldr	r2, [pc, #88]	; 170f4 <__assert_fail@plt+0x5ff8>
   17098:	mov	r1, r0
   1709c:	mov	r0, #1
   170a0:	bl	11024 <__printf_chk@plt>
   170a4:	mov	r2, #5
   170a8:	ldr	r1, [pc, #72]	; 170f8 <__assert_fail@plt+0x5ffc>
   170ac:	mov	r0, #0
   170b0:	bl	10ef8 <dcgettext@plt>
   170b4:	ldr	r3, [pc, #64]	; 170fc <__assert_fail@plt+0x6000>
   170b8:	ldr	r2, [pc, #64]	; 17100 <__assert_fail@plt+0x6004>
   170bc:	mov	r1, r0
   170c0:	mov	r0, #1
   170c4:	bl	11024 <__printf_chk@plt>
   170c8:	mov	r2, #5
   170cc:	ldr	r1, [pc, #48]	; 17104 <__assert_fail@plt+0x6008>
   170d0:	mov	r0, #0
   170d4:	bl	10ef8 <dcgettext@plt>
   170d8:	ldr	r2, [pc, #40]	; 17108 <__assert_fail@plt+0x600c>
   170dc:	pop	{r4, lr}
   170e0:	mov	r1, r0
   170e4:	mov	r0, #1
   170e8:	b	11024 <__printf_chk@plt>
   170ec:	muleq	r2, ip, r1
   170f0:	andeq	fp, r1, r4, asr r5
   170f4:	andeq	fp, r1, r8, ror #10
   170f8:	andeq	fp, r1, r0, lsl #11
   170fc:	ldrdeq	sl, [r1], -r0
   17100:	strdeq	sl, [r1], -r8
   17104:	muleq	r1, r4, r5
   17108:			; <UNDEFINED> instruction: 0x0001b5bc
   1710c:	push	{r4, lr}
   17110:	bl	182ac <__assert_fail@plt+0x71b0>
   17114:	cmp	r0, #0
   17118:	popne	{r4, pc}
   1711c:	bl	17654 <__assert_fail@plt+0x6558>
   17120:	push	{r4, lr}
   17124:	bl	182ac <__assert_fail@plt+0x71b0>
   17128:	cmp	r0, #0
   1712c:	popne	{r4, pc}
   17130:	bl	17654 <__assert_fail@plt+0x6558>
   17134:	push	{r4, lr}
   17138:	bl	182ac <__assert_fail@plt+0x71b0>
   1713c:	cmp	r0, #0
   17140:	popne	{r4, pc}
   17144:	bl	17654 <__assert_fail@plt+0x6558>
   17148:	push	{r4, r5, r6, lr}
   1714c:	mov	r5, r0
   17150:	mov	r4, r1
   17154:	bl	182d8 <__assert_fail@plt+0x71dc>
   17158:	cmp	r0, #0
   1715c:	popne	{r4, r5, r6, pc}
   17160:	adds	r4, r4, #0
   17164:	movne	r4, #1
   17168:	cmp	r5, #0
   1716c:	orreq	r4, r4, #1
   17170:	cmp	r4, #0
   17174:	popeq	{r4, r5, r6, pc}
   17178:	bl	17654 <__assert_fail@plt+0x6558>
   1717c:	push	{r4, lr}
   17180:	cmp	r1, #0
   17184:	orreq	r1, r1, #1
   17188:	bl	182d8 <__assert_fail@plt+0x71dc>
   1718c:	cmp	r0, #0
   17190:	popne	{r4, pc}
   17194:	bl	17654 <__assert_fail@plt+0x6558>
   17198:	push	{r4, r5, r6, lr}
   1719c:	mov	r6, r0
   171a0:	mov	r5, r1
   171a4:	mov	r4, r2
   171a8:	bl	185d8 <__assert_fail@plt+0x74dc>
   171ac:	cmp	r0, #0
   171b0:	popne	{r4, r5, r6, pc}
   171b4:	cmp	r6, #0
   171b8:	beq	171c8 <__assert_fail@plt+0x60cc>
   171bc:	cmp	r5, #0
   171c0:	cmpne	r4, #0
   171c4:	popeq	{r4, r5, r6, pc}
   171c8:	bl	17654 <__assert_fail@plt+0x6558>
   171cc:	b	17198 <__assert_fail@plt+0x609c>
   171d0:	cmp	r2, #0
   171d4:	cmpne	r1, #0
   171d8:	moveq	r2, #1
   171dc:	moveq	r1, r2
   171e0:	push	{r4, lr}
   171e4:	bl	185d8 <__assert_fail@plt+0x74dc>
   171e8:	cmp	r0, #0
   171ec:	popne	{r4, pc}
   171f0:	bl	17654 <__assert_fail@plt+0x6558>
   171f4:	mov	r2, r1
   171f8:	mov	r1, r0
   171fc:	mov	r0, #0
   17200:	b	17198 <__assert_fail@plt+0x609c>
   17204:	mov	r2, r1
   17208:	mov	r1, r0
   1720c:	mov	r0, #0
   17210:	b	171d0 <__assert_fail@plt+0x60d4>
   17214:	push	{r4, r5, r6, lr}
   17218:	subs	r6, r0, #0
   1721c:	sub	sp, sp, #8
   17220:	mov	r5, r1
   17224:	ldr	r4, [r1]
   17228:	beq	17264 <__assert_fail@plt+0x6168>
   1722c:	lsr	r1, r4, #1
   17230:	add	r3, r1, #1
   17234:	mvn	r3, r3
   17238:	cmp	r4, r3
   1723c:	bhi	17260 <__assert_fail@plt+0x6164>
   17240:	add	r4, r4, #1
   17244:	add	r4, r4, r1
   17248:	mov	r0, r6
   1724c:	mov	r1, r4
   17250:	bl	17198 <__assert_fail@plt+0x609c>
   17254:	str	r4, [r5]
   17258:	add	sp, sp, #8
   1725c:	pop	{r4, r5, r6, pc}
   17260:	bl	17654 <__assert_fail@plt+0x6558>
   17264:	cmp	r4, #0
   17268:	bne	17248 <__assert_fail@plt+0x614c>
   1726c:	mov	r1, r2
   17270:	mov	r0, #64	; 0x40
   17274:	str	r2, [sp, #4]
   17278:	bl	18718 <__assert_fail@plt+0x761c>
   1727c:	ldr	r2, [sp, #4]
   17280:	cmp	r0, #0
   17284:	movne	r4, r0
   17288:	addeq	r4, r0, #1
   1728c:	b	17248 <__assert_fail@plt+0x614c>
   17290:	mov	r2, #1
   17294:	b	17214 <__assert_fail@plt+0x6118>
   17298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1729c:	sub	sp, sp, #12
   172a0:	ldr	r6, [r1]
   172a4:	mov	sl, r1
   172a8:	mov	r9, r0
   172ac:	asrs	r4, r6, #1
   172b0:	mov	r5, r2
   172b4:	mov	fp, r3
   172b8:	ldr	r7, [sp, #48]	; 0x30
   172bc:	bmi	17428 <__assert_fail@plt+0x632c>
   172c0:	mvn	r3, #-2147483648	; 0x80000000
   172c4:	sub	r3, r3, r4
   172c8:	cmp	r6, r3
   172cc:	movle	r3, #0
   172d0:	movgt	r3, #1
   172d4:	mvn	r8, fp
   172d8:	cmp	r3, #0
   172dc:	addeq	r4, r4, r6
   172e0:	mvnne	r4, #-2147483648	; 0x80000000
   172e4:	lsr	r8, r8, #31
   172e8:	cmp	fp, r4
   172ec:	movge	r3, #0
   172f0:	andlt	r3, r8, #1
   172f4:	cmp	r3, #0
   172f8:	beq	173e0 <__assert_fail@plt+0x62e4>
   172fc:	cmp	r7, #0
   17300:	blt	174b0 <__assert_fail@plt+0x63b4>
   17304:	bne	174a8 <__assert_fail@plt+0x63ac>
   17308:	mov	r2, #64	; 0x40
   1730c:	mov	r1, r7
   17310:	mov	r0, r2
   17314:	str	r2, [sp, #4]
   17318:	bl	18924 <__assert_fail@plt+0x7828>
   1731c:	ldr	r2, [sp, #4]
   17320:	mov	r1, r7
   17324:	mov	r4, r0
   17328:	mov	r0, r2
   1732c:	bl	18b44 <__assert_fail@plt+0x7a48>
   17330:	ldr	r2, [sp, #4]
   17334:	sub	r1, r2, r1
   17338:	cmp	r9, #0
   1733c:	sub	r3, r4, r6
   17340:	streq	r9, [sl]
   17344:	cmp	r3, r5
   17348:	bge	173cc <__assert_fail@plt+0x62d0>
   1734c:	cmp	r5, #0
   17350:	blt	1743c <__assert_fail@plt+0x6340>
   17354:	cmp	r6, #0
   17358:	blt	17378 <__assert_fail@plt+0x627c>
   1735c:	mvn	r3, #-2147483648	; 0x80000000
   17360:	sub	r3, r3, r5
   17364:	cmp	r6, r3
   17368:	movle	r3, #0
   1736c:	movgt	r3, #1
   17370:	cmp	r3, #0
   17374:	bne	17538 <__assert_fail@plt+0x643c>
   17378:	add	r5, r6, r5
   1737c:	cmp	fp, r5
   17380:	movge	r8, #0
   17384:	andlt	r8, r8, #1
   17388:	cmp	r8, #0
   1738c:	mov	r4, r5
   17390:	bne	17538 <__assert_fail@plt+0x643c>
   17394:	cmp	r7, #0
   17398:	blt	17450 <__assert_fail@plt+0x6354>
   1739c:	beq	173c8 <__assert_fail@plt+0x62cc>
   173a0:	cmp	r5, #0
   173a4:	blt	174f8 <__assert_fail@plt+0x63fc>
   173a8:	mov	r1, r7
   173ac:	mvn	r0, #-2147483648	; 0x80000000
   173b0:	bl	18924 <__assert_fail@plt+0x7828>
   173b4:	cmp	r5, r0
   173b8:	movle	r0, #0
   173bc:	movgt	r0, #1
   173c0:	cmp	r0, #0
   173c4:	bne	17538 <__assert_fail@plt+0x643c>
   173c8:	mul	r1, r5, r7
   173cc:	mov	r0, r9
   173d0:	bl	17148 <__assert_fail@plt+0x604c>
   173d4:	str	r4, [sl]
   173d8:	add	sp, sp, #12
   173dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173e0:	cmp	r7, #0
   173e4:	blt	1747c <__assert_fail@plt+0x6380>
   173e8:	beq	17308 <__assert_fail@plt+0x620c>
   173ec:	cmp	r4, #0
   173f0:	blt	174b8 <__assert_fail@plt+0x63bc>
   173f4:	mov	r1, r7
   173f8:	mvn	r0, #-2147483648	; 0x80000000
   173fc:	bl	18924 <__assert_fail@plt+0x7828>
   17400:	cmp	r0, r4
   17404:	movge	r0, #0
   17408:	movlt	r0, #1
   1740c:	cmp	r0, #0
   17410:	mvnne	r2, #-2147483648	; 0x80000000
   17414:	bne	1730c <__assert_fail@plt+0x6210>
   17418:	mul	r1, r7, r4
   1741c:	cmp	r1, #63	; 0x3f
   17420:	bgt	17338 <__assert_fail@plt+0x623c>
   17424:	b	17308 <__assert_fail@plt+0x620c>
   17428:	rsb	r3, r4, #-2147483648	; 0x80000000
   1742c:	cmp	r6, r3
   17430:	movge	r3, #0
   17434:	movlt	r3, #1
   17438:	b	172d4 <__assert_fail@plt+0x61d8>
   1743c:	rsb	r3, r5, #-2147483648	; 0x80000000
   17440:	cmp	r6, r3
   17444:	movge	r3, #0
   17448:	movlt	r3, #1
   1744c:	b	17370 <__assert_fail@plt+0x6274>
   17450:	cmp	r5, #0
   17454:	blt	174dc <__assert_fail@plt+0x63e0>
   17458:	cmn	r7, #1
   1745c:	beq	173c8 <__assert_fail@plt+0x62cc>
   17460:	mov	r1, r7
   17464:	mov	r0, #-2147483648	; 0x80000000
   17468:	bl	18924 <__assert_fail@plt+0x7828>
   1746c:	cmp	r5, r0
   17470:	movle	r0, #0
   17474:	movgt	r0, #1
   17478:	b	173c0 <__assert_fail@plt+0x62c4>
   1747c:	cmp	r4, #0
   17480:	blt	1751c <__assert_fail@plt+0x6420>
   17484:	cmn	r7, #1
   17488:	beq	17418 <__assert_fail@plt+0x631c>
   1748c:	mov	r1, r7
   17490:	mov	r0, #-2147483648	; 0x80000000
   17494:	bl	18924 <__assert_fail@plt+0x7828>
   17498:	cmp	r0, r4
   1749c:	movge	r0, #0
   174a0:	movlt	r0, #1
   174a4:	b	1740c <__assert_fail@plt+0x6310>
   174a8:	mov	r4, fp
   174ac:	b	173f4 <__assert_fail@plt+0x62f8>
   174b0:	mov	r4, fp
   174b4:	b	17484 <__assert_fail@plt+0x6388>
   174b8:	cmn	r4, #1
   174bc:	beq	17418 <__assert_fail@plt+0x631c>
   174c0:	mov	r1, r4
   174c4:	mov	r0, #-2147483648	; 0x80000000
   174c8:	bl	18924 <__assert_fail@plt+0x7828>
   174cc:	cmp	r7, r0
   174d0:	movle	r0, #0
   174d4:	movgt	r0, #1
   174d8:	b	1740c <__assert_fail@plt+0x6310>
   174dc:	mov	r1, r7
   174e0:	mvn	r0, #-2147483648	; 0x80000000
   174e4:	bl	18924 <__assert_fail@plt+0x7828>
   174e8:	cmp	r5, r0
   174ec:	movge	r0, #0
   174f0:	movlt	r0, #1
   174f4:	b	173c0 <__assert_fail@plt+0x62c4>
   174f8:	cmn	r5, #1
   174fc:	beq	173c8 <__assert_fail@plt+0x62cc>
   17500:	mov	r1, r5
   17504:	mov	r0, #-2147483648	; 0x80000000
   17508:	bl	18924 <__assert_fail@plt+0x7828>
   1750c:	cmp	r7, r0
   17510:	movle	r0, #0
   17514:	movgt	r0, #1
   17518:	b	173c0 <__assert_fail@plt+0x62c4>
   1751c:	mov	r1, r7
   17520:	mvn	r0, #-2147483648	; 0x80000000
   17524:	bl	18924 <__assert_fail@plt+0x7828>
   17528:	cmp	r0, r4
   1752c:	movle	r0, #0
   17530:	movgt	r0, #1
   17534:	b	1740c <__assert_fail@plt+0x6310>
   17538:	bl	17654 <__assert_fail@plt+0x6558>
   1753c:	push	{r4, lr}
   17540:	mov	r1, #1
   17544:	bl	18264 <__assert_fail@plt+0x7168>
   17548:	cmp	r0, #0
   1754c:	popne	{r4, pc}
   17550:	bl	17654 <__assert_fail@plt+0x6558>
   17554:	push	{r4, lr}
   17558:	mov	r1, #1
   1755c:	bl	18264 <__assert_fail@plt+0x7168>
   17560:	cmp	r0, #0
   17564:	popne	{r4, pc}
   17568:	bl	17654 <__assert_fail@plt+0x6558>
   1756c:	push	{r4, lr}
   17570:	bl	18264 <__assert_fail@plt+0x7168>
   17574:	cmp	r0, #0
   17578:	popne	{r4, pc}
   1757c:	bl	17654 <__assert_fail@plt+0x6558>
   17580:	push	{r4, lr}
   17584:	bl	18264 <__assert_fail@plt+0x7168>
   17588:	cmp	r0, #0
   1758c:	popne	{r4, pc}
   17590:	bl	17654 <__assert_fail@plt+0x6558>
   17594:	push	{r4, r5, r6, lr}
   17598:	mov	r6, r0
   1759c:	mov	r0, r1
   175a0:	mov	r4, r1
   175a4:	bl	182ac <__assert_fail@plt+0x71b0>
   175a8:	subs	r5, r0, #0
   175ac:	beq	175c4 <__assert_fail@plt+0x64c8>
   175b0:	mov	r2, r4
   175b4:	mov	r1, r6
   175b8:	bl	10ebc <memcpy@plt>
   175bc:	mov	r0, r5
   175c0:	pop	{r4, r5, r6, pc}
   175c4:	bl	17654 <__assert_fail@plt+0x6558>
   175c8:	push	{r4, r5, r6, lr}
   175cc:	mov	r6, r0
   175d0:	mov	r0, r1
   175d4:	mov	r4, r1
   175d8:	bl	182ac <__assert_fail@plt+0x71b0>
   175dc:	subs	r5, r0, #0
   175e0:	beq	175f8 <__assert_fail@plt+0x64fc>
   175e4:	mov	r2, r4
   175e8:	mov	r1, r6
   175ec:	bl	10ebc <memcpy@plt>
   175f0:	mov	r0, r5
   175f4:	pop	{r4, r5, r6, pc}
   175f8:	bl	17654 <__assert_fail@plt+0x6558>
   175fc:	push	{r4, r5, r6, lr}
   17600:	mov	r6, r0
   17604:	add	r0, r1, #1
   17608:	mov	r4, r1
   1760c:	bl	182ac <__assert_fail@plt+0x71b0>
   17610:	subs	r5, r0, #0
   17614:	beq	17634 <__assert_fail@plt+0x6538>
   17618:	mov	r3, #0
   1761c:	mov	r1, r6
   17620:	strb	r3, [r5, r4]
   17624:	mov	r2, r4
   17628:	bl	10ebc <memcpy@plt>
   1762c:	mov	r0, r5
   17630:	pop	{r4, r5, r6, pc}
   17634:	bl	17654 <__assert_fail@plt+0x6558>
   17638:	push	{r4, lr}
   1763c:	mov	r4, r0
   17640:	bl	10fe8 <strlen@plt>
   17644:	add	r1, r0, #1
   17648:	mov	r0, r4
   1764c:	pop	{r4, lr}
   17650:	b	17594 <__assert_fail@plt+0x6498>
   17654:	ldr	r3, [pc, #44]	; 17688 <__assert_fail@plt+0x658c>
   17658:	push	{r4, lr}
   1765c:	mov	r2, #5
   17660:	ldr	r1, [pc, #36]	; 1768c <__assert_fail@plt+0x6590>
   17664:	mov	r0, #0
   17668:	ldr	r4, [r3]
   1766c:	bl	10ef8 <dcgettext@plt>
   17670:	ldr	r2, [pc, #24]	; 17690 <__assert_fail@plt+0x6594>
   17674:	mov	r1, #0
   17678:	mov	r3, r0
   1767c:	mov	r0, r4
   17680:	bl	10f7c <error@plt>
   17684:	bl	110d8 <abort@plt>
   17688:	andeq	ip, r2, ip, lsr r1
   1768c:	andeq	fp, r1, ip, lsl #12
   17690:	andeq	r9, r1, r8, ror r4
   17694:	push	{r4, r5, r6, lr}
   17698:	subs	r6, r1, #0
   1769c:	mov	r4, r0
   176a0:	ldr	r5, [r0]
   176a4:	blt	176d4 <__assert_fail@plt+0x65d8>
   176a8:	beq	176f4 <__assert_fail@plt+0x65f8>
   176ac:	cmp	r5, #0
   176b0:	blt	17728 <__assert_fail@plt+0x662c>
   176b4:	mvn	r0, #-2147483648	; 0x80000000
   176b8:	bl	18924 <__assert_fail@plt+0x7828>
   176bc:	cmp	r5, r0
   176c0:	ble	176f4 <__assert_fail@plt+0x65f8>
   176c4:	mvn	r3, #-2147483648	; 0x80000000
   176c8:	str	r3, [r4]
   176cc:	mov	r0, #1
   176d0:	pop	{r4, r5, r6, pc}
   176d4:	cmp	r5, #0
   176d8:	blt	17704 <__assert_fail@plt+0x6608>
   176dc:	cmn	r6, #1
   176e0:	beq	176f4 <__assert_fail@plt+0x65f8>
   176e4:	mov	r0, #-2147483648	; 0x80000000
   176e8:	bl	18924 <__assert_fail@plt+0x7828>
   176ec:	cmp	r5, r0
   176f0:	bgt	176c4 <__assert_fail@plt+0x65c8>
   176f4:	mul	r5, r6, r5
   176f8:	mov	r0, #0
   176fc:	str	r5, [r4]
   17700:	pop	{r4, r5, r6, pc}
   17704:	mvn	r0, #-2147483648	; 0x80000000
   17708:	bl	18924 <__assert_fail@plt+0x7828>
   1770c:	cmp	r5, r0
   17710:	movge	r0, #0
   17714:	movlt	r0, #1
   17718:	cmp	r0, #0
   1771c:	movne	r3, #-2147483648	; 0x80000000
   17720:	bne	176c8 <__assert_fail@plt+0x65cc>
   17724:	b	176f4 <__assert_fail@plt+0x65f8>
   17728:	cmn	r5, #1
   1772c:	beq	176f4 <__assert_fail@plt+0x65f8>
   17730:	mov	r1, r5
   17734:	mov	r0, #-2147483648	; 0x80000000
   17738:	bl	18924 <__assert_fail@plt+0x7828>
   1773c:	cmp	r6, r0
   17740:	movle	r0, #0
   17744:	movgt	r0, #1
   17748:	b	17718 <__assert_fail@plt+0x661c>
   1774c:	cmp	r2, #36	; 0x24
   17750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17754:	sub	sp, sp, #12
   17758:	bhi	17c04 <__assert_fail@plt+0x6b08>
   1775c:	cmp	r1, #0
   17760:	mov	r8, r1
   17764:	mov	r5, r2
   17768:	moveq	r8, sp
   1776c:	mov	r6, r0
   17770:	mov	r9, r3
   17774:	bl	11000 <__errno_location@plt>
   17778:	mov	r4, #0
   1777c:	mov	r2, r5
   17780:	mov	r1, r8
   17784:	str	r4, [r0]
   17788:	mov	r7, r0
   1778c:	mov	r0, r6
   17790:	bl	10e74 <strtol@plt>
   17794:	ldr	r5, [r8]
   17798:	cmp	r6, r5
   1779c:	str	r0, [sp, #4]
   177a0:	beq	177f0 <__assert_fail@plt+0x66f4>
   177a4:	ldr	r4, [r7]
   177a8:	cmp	r4, #0
   177ac:	bne	177d8 <__assert_fail@plt+0x66dc>
   177b0:	ldr	r3, [sp, #48]	; 0x30
   177b4:	cmp	r3, #0
   177b8:	beq	177c8 <__assert_fail@plt+0x66cc>
   177bc:	ldrb	r6, [r5]
   177c0:	cmp	r6, #0
   177c4:	bne	17824 <__assert_fail@plt+0x6728>
   177c8:	str	r0, [r9]
   177cc:	mov	r0, r4
   177d0:	add	sp, sp, #12
   177d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177d8:	cmp	r4, #34	; 0x22
   177dc:	beq	17a34 <__assert_fail@plt+0x6938>
   177e0:	mov	r4, #4
   177e4:	mov	r0, r4
   177e8:	add	sp, sp, #12
   177ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177f0:	ldr	r3, [sp, #48]	; 0x30
   177f4:	cmp	r3, r4
   177f8:	beq	177e0 <__assert_fail@plt+0x66e4>
   177fc:	ldrb	r1, [r5]
   17800:	cmp	r1, r4
   17804:	beq	177e0 <__assert_fail@plt+0x66e4>
   17808:	mov	r0, r3
   1780c:	bl	10ff4 <strchr@plt>
   17810:	cmp	r0, r4
   17814:	beq	177e0 <__assert_fail@plt+0x66e4>
   17818:	ldrb	r6, [r5]
   1781c:	mov	r3, #1
   17820:	str	r3, [sp, #4]
   17824:	mov	r1, r6
   17828:	ldr	r0, [sp, #48]	; 0x30
   1782c:	bl	10ff4 <strchr@plt>
   17830:	cmp	r0, #0
   17834:	beq	17bf4 <__assert_fail@plt+0x6af8>
   17838:	sub	r3, r6, #69	; 0x45
   1783c:	cmp	r3, #47	; 0x2f
   17840:	ldrls	pc, [pc, r3, lsl #2]
   17844:	b	17908 <__assert_fail@plt+0x680c>
   17848:	strdeq	r7, [r1], -r8
   1784c:	andeq	r7, r1, r8, lsl #18
   17850:	strdeq	r7, [r1], -r8
   17854:	andeq	r7, r1, r8, lsl #18
   17858:	andeq	r7, r1, r8, lsl #18
   1785c:	andeq	r7, r1, r8, lsl #18
   17860:	strdeq	r7, [r1], -r8
   17864:	andeq	r7, r1, r8, lsl #18
   17868:	strdeq	r7, [r1], -r8
   1786c:	andeq	r7, r1, r8, lsl #18
   17870:	andeq	r7, r1, r8, lsl #18
   17874:	strdeq	r7, [r1], -r8
   17878:	andeq	r7, r1, r8, lsl #18
   1787c:	andeq	r7, r1, r8, lsl #18
   17880:	andeq	r7, r1, r8, lsl #18
   17884:	strdeq	r7, [r1], -r8
   17888:	andeq	r7, r1, r8, lsl #18
   1788c:	andeq	r7, r1, r8, lsl #18
   17890:	andeq	r7, r1, r8, lsl #18
   17894:	andeq	r7, r1, r8, lsl #18
   17898:	strdeq	r7, [r1], -r8
   1789c:	strdeq	r7, [r1], -r8
   178a0:	andeq	r7, r1, r8, lsl #18
   178a4:	andeq	r7, r1, r8, lsl #18
   178a8:	andeq	r7, r1, r8, lsl #18
   178ac:	andeq	r7, r1, r8, lsl #18
   178b0:	andeq	r7, r1, r8, lsl #18
   178b4:	andeq	r7, r1, r8, lsl #18
   178b8:	andeq	r7, r1, r8, lsl #18
   178bc:	andeq	r7, r1, r8, lsl #18
   178c0:	andeq	r7, r1, r8, lsl #18
   178c4:	andeq	r7, r1, r8, lsl #18
   178c8:	andeq	r7, r1, r8, lsl #18
   178cc:	andeq	r7, r1, r8, lsl #18
   178d0:	strdeq	r7, [r1], -r8
   178d4:	andeq	r7, r1, r8, lsl #18
   178d8:	andeq	r7, r1, r8, lsl #18
   178dc:	andeq	r7, r1, r8, lsl #18
   178e0:	strdeq	r7, [r1], -r8
   178e4:	andeq	r7, r1, r8, lsl #18
   178e8:	strdeq	r7, [r1], -r8
   178ec:	andeq	r7, r1, r8, lsl #18
   178f0:	andeq	r7, r1, r8, lsl #18
   178f4:	andeq	r7, r1, r8, lsl #18
   178f8:	andeq	r7, r1, r8, lsl #18
   178fc:	andeq	r7, r1, r8, lsl #18
   17900:	andeq	r7, r1, r8, lsl #18
   17904:	strdeq	r7, [r1], -r8
   17908:	mov	sl, #1
   1790c:	mov	r7, #1024	; 0x400
   17910:	sub	r6, r6, #66	; 0x42
   17914:	cmp	r6, #53	; 0x35
   17918:	ldrls	pc, [pc, r6, lsl #2]
   1791c:	b	17bf4 <__assert_fail@plt+0x6af8>
   17920:	andeq	r7, r1, ip, lsl #22
   17924:	strdeq	r7, [r1], -r4
   17928:	strdeq	r7, [r1], -r4
   1792c:	andeq	r7, r1, r4, ror #21
   17930:	strdeq	r7, [r1], -r4
   17934:			; <UNDEFINED> instruction: 0x00017ab8
   17938:	strdeq	r7, [r1], -r4
   1793c:	strdeq	r7, [r1], -r4
   17940:	strdeq	r7, [r1], -r4
   17944:	andeq	r7, r1, r0, lsr #21
   17948:	strdeq	r7, [r1], -r4
   1794c:	andeq	r7, r1, r8, ror sl
   17950:	strdeq	r7, [r1], -r4
   17954:	strdeq	r7, [r1], -r4
   17958:	andeq	r7, r1, ip, asr #23
   1795c:	strdeq	r7, [r1], -r4
   17960:	strdeq	r7, [r1], -r4
   17964:	strdeq	r7, [r1], -r4
   17968:	andeq	r7, r1, r4, lsr #23
   1796c:	strdeq	r7, [r1], -r4
   17970:	strdeq	r7, [r1], -r4
   17974:	strdeq	r7, [r1], -r4
   17978:	strdeq	r7, [r1], -r4
   1797c:	andeq	r7, r1, ip, ror fp
   17980:	andeq	r7, r1, r4, asr fp
   17984:	strdeq	r7, [r1], -r4
   17988:	strdeq	r7, [r1], -r4
   1798c:	strdeq	r7, [r1], -r4
   17990:	strdeq	r7, [r1], -r4
   17994:	strdeq	r7, [r1], -r4
   17998:	strdeq	r7, [r1], -r4
   1799c:	strdeq	r7, [r1], -r4
   179a0:	andeq	r7, r1, ip, lsr fp
   179a4:	andeq	r7, r1, r4, asr sl
   179a8:	strdeq	r7, [r1], -r4
   179ac:	strdeq	r7, [r1], -r4
   179b0:	strdeq	r7, [r1], -r4
   179b4:			; <UNDEFINED> instruction: 0x00017ab8
   179b8:	strdeq	r7, [r1], -r4
   179bc:	strdeq	r7, [r1], -r4
   179c0:	strdeq	r7, [r1], -r4
   179c4:	andeq	r7, r1, r0, lsr #21
   179c8:	strdeq	r7, [r1], -r4
   179cc:	andeq	r7, r1, r8, ror sl
   179d0:	strdeq	r7, [r1], -r4
   179d4:	strdeq	r7, [r1], -r4
   179d8:	strdeq	r7, [r1], -r4
   179dc:	strdeq	r7, [r1], -r4
   179e0:	strdeq	r7, [r1], -r4
   179e4:	strdeq	r7, [r1], -r4
   179e8:	andeq	r7, r1, r4, lsr #23
   179ec:	strdeq	r7, [r1], -r4
   179f0:	strdeq	r7, [r1], -r4
   179f4:	andeq	r7, r1, r4, lsr #22
   179f8:	mov	r1, #48	; 0x30
   179fc:	ldr	r0, [sp, #48]	; 0x30
   17a00:	bl	10ff4 <strchr@plt>
   17a04:	cmp	r0, #0
   17a08:	beq	17908 <__assert_fail@plt+0x680c>
   17a0c:	ldrb	r3, [r5, #1]
   17a10:	cmp	r3, #68	; 0x44
   17a14:	beq	17a28 <__assert_fail@plt+0x692c>
   17a18:	cmp	r3, #105	; 0x69
   17a1c:	beq	17a3c <__assert_fail@plt+0x6940>
   17a20:	cmp	r3, #66	; 0x42
   17a24:	bne	17908 <__assert_fail@plt+0x680c>
   17a28:	mov	sl, #2
   17a2c:	mov	r7, #1000	; 0x3e8
   17a30:	b	17910 <__assert_fail@plt+0x6814>
   17a34:	mov	r4, #1
   17a38:	b	177b0 <__assert_fail@plt+0x66b4>
   17a3c:	ldrb	sl, [r5, #2]
   17a40:	mov	r7, #1024	; 0x400
   17a44:	cmp	sl, #66	; 0x42
   17a48:	movne	sl, #1
   17a4c:	moveq	sl, #3
   17a50:	b	17910 <__assert_fail@plt+0x6814>
   17a54:	mov	r6, #0
   17a58:	add	r3, r5, sl
   17a5c:	str	r3, [r8]
   17a60:	ldrb	r3, [r5, sl]
   17a64:	orr	r4, r4, r6
   17a68:	ldr	r0, [sp, #4]
   17a6c:	cmp	r3, #0
   17a70:	orrne	r4, r4, #2
   17a74:	b	177c8 <__assert_fail@plt+0x66cc>
   17a78:	mov	r1, r7
   17a7c:	add	r0, sp, #4
   17a80:	bl	17694 <__assert_fail@plt+0x6598>
   17a84:	mov	r1, r7
   17a88:	mov	r6, r0
   17a8c:	add	r0, sp, #4
   17a90:	bl	17694 <__assert_fail@plt+0x6598>
   17a94:	ldr	r5, [r8]
   17a98:	orr	r6, r6, r0
   17a9c:	b	17a58 <__assert_fail@plt+0x695c>
   17aa0:	mov	r1, r7
   17aa4:	add	r0, sp, #4
   17aa8:	bl	17694 <__assert_fail@plt+0x6598>
   17aac:	ldr	r5, [r8]
   17ab0:	mov	r6, r0
   17ab4:	b	17a58 <__assert_fail@plt+0x695c>
   17ab8:	mov	fp, #3
   17abc:	mov	r6, #0
   17ac0:	add	r5, sp, #4
   17ac4:	mov	r1, r7
   17ac8:	mov	r0, r5
   17acc:	bl	17694 <__assert_fail@plt+0x6598>
   17ad0:	subs	fp, fp, #1
   17ad4:	orr	r6, r6, r0
   17ad8:	bne	17ac4 <__assert_fail@plt+0x69c8>
   17adc:	ldr	r5, [r8]
   17ae0:	b	17a58 <__assert_fail@plt+0x695c>
   17ae4:	mov	fp, #6
   17ae8:	mov	r6, #0
   17aec:	add	r5, sp, #4
   17af0:	mov	r1, r7
   17af4:	mov	r0, r5
   17af8:	bl	17694 <__assert_fail@plt+0x6598>
   17afc:	subs	fp, fp, #1
   17b00:	orr	r6, r6, r0
   17b04:	bne	17af0 <__assert_fail@plt+0x69f4>
   17b08:	b	17adc <__assert_fail@plt+0x69e0>
   17b0c:	mov	r1, #1024	; 0x400
   17b10:	add	r0, sp, #4
   17b14:	bl	17694 <__assert_fail@plt+0x6598>
   17b18:	ldr	r5, [r8]
   17b1c:	mov	r6, r0
   17b20:	b	17a58 <__assert_fail@plt+0x695c>
   17b24:	mov	r1, #2
   17b28:	add	r0, sp, #4
   17b2c:	bl	17694 <__assert_fail@plt+0x6598>
   17b30:	ldr	r5, [r8]
   17b34:	mov	r6, r0
   17b38:	b	17a58 <__assert_fail@plt+0x695c>
   17b3c:	mov	r1, #512	; 0x200
   17b40:	add	r0, sp, #4
   17b44:	bl	17694 <__assert_fail@plt+0x6598>
   17b48:	ldr	r5, [r8]
   17b4c:	mov	r6, r0
   17b50:	b	17a58 <__assert_fail@plt+0x695c>
   17b54:	mov	fp, #7
   17b58:	mov	r6, #0
   17b5c:	add	r5, sp, #4
   17b60:	mov	r1, r7
   17b64:	mov	r0, r5
   17b68:	bl	17694 <__assert_fail@plt+0x6598>
   17b6c:	subs	fp, fp, #1
   17b70:	orr	r6, r6, r0
   17b74:	bne	17b60 <__assert_fail@plt+0x6a64>
   17b78:	b	17adc <__assert_fail@plt+0x69e0>
   17b7c:	mov	fp, #8
   17b80:	mov	r6, #0
   17b84:	add	r5, sp, #4
   17b88:	mov	r1, r7
   17b8c:	mov	r0, r5
   17b90:	bl	17694 <__assert_fail@plt+0x6598>
   17b94:	subs	fp, fp, #1
   17b98:	orr	r6, r6, r0
   17b9c:	bne	17b88 <__assert_fail@plt+0x6a8c>
   17ba0:	b	17adc <__assert_fail@plt+0x69e0>
   17ba4:	mov	fp, #4
   17ba8:	mov	r6, #0
   17bac:	add	r5, sp, fp
   17bb0:	mov	r1, r7
   17bb4:	mov	r0, r5
   17bb8:	bl	17694 <__assert_fail@plt+0x6598>
   17bbc:	subs	fp, fp, #1
   17bc0:	orr	r6, r6, r0
   17bc4:	bne	17bb0 <__assert_fail@plt+0x6ab4>
   17bc8:	b	17adc <__assert_fail@plt+0x69e0>
   17bcc:	mov	fp, #5
   17bd0:	mov	r6, #0
   17bd4:	add	r5, sp, #4
   17bd8:	mov	r1, r7
   17bdc:	mov	r0, r5
   17be0:	bl	17694 <__assert_fail@plt+0x6598>
   17be4:	subs	fp, fp, #1
   17be8:	orr	r6, r6, r0
   17bec:	bne	17bd8 <__assert_fail@plt+0x6adc>
   17bf0:	b	17adc <__assert_fail@plt+0x69e0>
   17bf4:	ldr	r3, [sp, #4]
   17bf8:	orr	r4, r4, #2
   17bfc:	str	r3, [r9]
   17c00:	b	177cc <__assert_fail@plt+0x66d0>
   17c04:	ldr	r3, [pc, #12]	; 17c18 <__assert_fail@plt+0x6b1c>
   17c08:	mov	r2, #85	; 0x55
   17c0c:	ldr	r1, [pc, #8]	; 17c1c <__assert_fail@plt+0x6b20>
   17c10:	ldr	r0, [pc, #8]	; 17c20 <__assert_fail@plt+0x6b24>
   17c14:	bl	110fc <__assert_fail@plt>
   17c18:	andeq	fp, r1, r0, lsr #12
   17c1c:	andeq	fp, r1, r8, lsr #12
   17c20:	andeq	fp, r1, r8, lsr r6
   17c24:	push	{r4, r5, r6, r7, r8, lr}
   17c28:	subs	r5, r1, #0
   17c2c:	mov	r4, r0
   17c30:	blt	17ca4 <__assert_fail@plt+0x6ba8>
   17c34:	moveq	r6, #0
   17c38:	moveq	r7, #0
   17c3c:	bne	17c64 <__assert_fail@plt+0x6b68>
   17c40:	ldr	r2, [r4]
   17c44:	ldr	r1, [r4, #4]
   17c48:	mov	r0, #0
   17c4c:	mul	ip, r2, r7
   17c50:	umull	r2, r3, r2, r5
   17c54:	mla	r5, r5, r1, ip
   17c58:	add	r3, r5, r3
   17c5c:	strd	r2, [r4]
   17c60:	pop	{r4, r5, r6, r7, r8, pc}
   17c64:	asr	r7, r5, #31
   17c68:	mov	r2, r5
   17c6c:	mov	r3, r7
   17c70:	mvn	r0, #0
   17c74:	mvn	r1, #0
   17c78:	bl	18f1c <__assert_fail@plt+0x7e20>
   17c7c:	ldrd	r2, [r4]
   17c80:	mov	r6, r5
   17c84:	cmp	r1, r3
   17c88:	cmpeq	r0, r2
   17c8c:	bcs	17c40 <__assert_fail@plt+0x6b44>
   17c90:	mvn	r2, #0
   17c94:	mvn	r3, #0
   17c98:	mov	r0, #1
   17c9c:	strd	r2, [r4]
   17ca0:	pop	{r4, r5, r6, r7, r8, pc}
   17ca4:	ldrd	r2, [r0]
   17ca8:	orrs	r3, r2, r3
   17cac:	moveq	r6, r5
   17cb0:	asreq	r7, r6, #31
   17cb4:	bne	17c90 <__assert_fail@plt+0x6b94>
   17cb8:	b	17c40 <__assert_fail@plt+0x6b44>
   17cbc:	cmp	r2, #36	; 0x24
   17cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cc4:	sub	sp, sp, #20
   17cc8:	bhi	1823c <__assert_fail@plt+0x7140>
   17ccc:	cmp	r1, #0
   17cd0:	mov	r8, r2
   17cd4:	mov	r7, r0
   17cd8:	mov	r5, r1
   17cdc:	mov	r6, r3
   17ce0:	addeq	r5, sp, #4
   17ce4:	bl	11000 <__errno_location@plt>
   17ce8:	mov	r3, #0
   17cec:	str	r3, [r0]
   17cf0:	mov	r9, r0
   17cf4:	bl	10fd0 <__ctype_b_loc@plt>
   17cf8:	ldrb	r3, [r7]
   17cfc:	mov	r2, r7
   17d00:	ldr	r0, [r0]
   17d04:	b	17d0c <__assert_fail@plt+0x6c10>
   17d08:	ldrb	r3, [r2, #1]!
   17d0c:	lsl	r1, r3, #1
   17d10:	ldrh	r4, [r0, r1]
   17d14:	ands	r4, r4, #8192	; 0x2000
   17d18:	bne	17d08 <__assert_fail@plt+0x6c0c>
   17d1c:	cmp	r3, #45	; 0x2d
   17d20:	bne	17d34 <__assert_fail@plt+0x6c38>
   17d24:	mov	r4, #4
   17d28:	mov	r0, r4
   17d2c:	add	sp, sp, #20
   17d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d34:	mov	r2, r8
   17d38:	mov	r3, r4
   17d3c:	mov	r1, r5
   17d40:	mov	r0, r7
   17d44:	bl	10ec8 <__strtoull_internal@plt>
   17d48:	ldr	r8, [r5]
   17d4c:	cmp	r7, r8
   17d50:	mov	r2, r0
   17d54:	str	r0, [sp, #8]
   17d58:	str	r1, [sp, #12]
   17d5c:	beq	17da8 <__assert_fail@plt+0x6cac>
   17d60:	ldr	r4, [r9]
   17d64:	cmp	r4, #0
   17d68:	bne	17d98 <__assert_fail@plt+0x6c9c>
   17d6c:	ldr	r3, [sp, #56]	; 0x38
   17d70:	cmp	r3, #0
   17d74:	beq	17d84 <__assert_fail@plt+0x6c88>
   17d78:	ldrb	r9, [r8]
   17d7c:	cmp	r9, #0
   17d80:	bne	17de0 <__assert_fail@plt+0x6ce4>
   17d84:	mov	r0, r4
   17d88:	str	r2, [r6]
   17d8c:	str	r1, [r6, #4]
   17d90:	add	sp, sp, #20
   17d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d98:	cmp	r4, #34	; 0x22
   17d9c:	bne	17d24 <__assert_fail@plt+0x6c28>
   17da0:	mov	r4, #1
   17da4:	b	17d6c <__assert_fail@plt+0x6c70>
   17da8:	ldr	r3, [sp, #56]	; 0x38
   17dac:	cmp	r3, #0
   17db0:	beq	17d24 <__assert_fail@plt+0x6c28>
   17db4:	ldrb	r1, [r8]
   17db8:	cmp	r1, #0
   17dbc:	beq	17d24 <__assert_fail@plt+0x6c28>
   17dc0:	mov	r0, r3
   17dc4:	bl	10ff4 <strchr@plt>
   17dc8:	cmp	r0, #0
   17dcc:	beq	17d24 <__assert_fail@plt+0x6c28>
   17dd0:	ldrb	r9, [r8]
   17dd4:	mov	r2, #1
   17dd8:	mov	r3, #0
   17ddc:	strd	r2, [sp, #8]
   17de0:	mov	r1, r9
   17de4:	ldr	r0, [sp, #56]	; 0x38
   17de8:	bl	10ff4 <strchr@plt>
   17dec:	cmp	r0, #0
   17df0:	beq	181f8 <__assert_fail@plt+0x70fc>
   17df4:	sub	r3, r9, #69	; 0x45
   17df8:	cmp	r3, #47	; 0x2f
   17dfc:	ldrls	pc, [pc, r3, lsl #2]
   17e00:	b	17ec4 <__assert_fail@plt+0x6dc8>
   17e04:			; <UNDEFINED> instruction: 0x00017fb4
   17e08:	andeq	r7, r1, r4, asr #29
   17e0c:			; <UNDEFINED> instruction: 0x00017fb4
   17e10:	andeq	r7, r1, r4, asr #29
   17e14:	andeq	r7, r1, r4, asr #29
   17e18:	andeq	r7, r1, r4, asr #29
   17e1c:			; <UNDEFINED> instruction: 0x00017fb4
   17e20:	andeq	r7, r1, r4, asr #29
   17e24:			; <UNDEFINED> instruction: 0x00017fb4
   17e28:	andeq	r7, r1, r4, asr #29
   17e2c:	andeq	r7, r1, r4, asr #29
   17e30:			; <UNDEFINED> instruction: 0x00017fb4
   17e34:	andeq	r7, r1, r4, asr #29
   17e38:	andeq	r7, r1, r4, asr #29
   17e3c:	andeq	r7, r1, r4, asr #29
   17e40:			; <UNDEFINED> instruction: 0x00017fb4
   17e44:	andeq	r7, r1, r4, asr #29
   17e48:	andeq	r7, r1, r4, asr #29
   17e4c:	andeq	r7, r1, r4, asr #29
   17e50:	andeq	r7, r1, r4, asr #29
   17e54:			; <UNDEFINED> instruction: 0x00017fb4
   17e58:			; <UNDEFINED> instruction: 0x00017fb4
   17e5c:	andeq	r7, r1, r4, asr #29
   17e60:	andeq	r7, r1, r4, asr #29
   17e64:	andeq	r7, r1, r4, asr #29
   17e68:	andeq	r7, r1, r4, asr #29
   17e6c:	andeq	r7, r1, r4, asr #29
   17e70:	andeq	r7, r1, r4, asr #29
   17e74:	andeq	r7, r1, r4, asr #29
   17e78:	andeq	r7, r1, r4, asr #29
   17e7c:	andeq	r7, r1, r4, asr #29
   17e80:	andeq	r7, r1, r4, asr #29
   17e84:	andeq	r7, r1, r4, asr #29
   17e88:	andeq	r7, r1, r4, asr #29
   17e8c:			; <UNDEFINED> instruction: 0x00017fb4
   17e90:	andeq	r7, r1, r4, asr #29
   17e94:	andeq	r7, r1, r4, asr #29
   17e98:	andeq	r7, r1, r4, asr #29
   17e9c:			; <UNDEFINED> instruction: 0x00017fb4
   17ea0:	andeq	r7, r1, r4, asr #29
   17ea4:			; <UNDEFINED> instruction: 0x00017fb4
   17ea8:	andeq	r7, r1, r4, asr #29
   17eac:	andeq	r7, r1, r4, asr #29
   17eb0:	andeq	r7, r1, r4, asr #29
   17eb4:	andeq	r7, r1, r4, asr #29
   17eb8:	andeq	r7, r1, r4, asr #29
   17ebc:	andeq	r7, r1, r4, asr #29
   17ec0:			; <UNDEFINED> instruction: 0x00017fb4
   17ec4:	mov	r7, #1
   17ec8:	mov	sl, #1024	; 0x400
   17ecc:	sub	r9, r9, #66	; 0x42
   17ed0:	cmp	r9, #53	; 0x35
   17ed4:	ldrls	pc, [pc, r9, lsl #2]
   17ed8:	b	181f8 <__assert_fail@plt+0x70fc>
   17edc:	andeq	r8, r1, r4, asr #2
   17ee0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ee4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ee8:	andeq	r8, r1, ip, lsl r1
   17eec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ef0:	strdeq	r8, [r1], -r4
   17ef4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ef8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17efc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f00:	ldrdeq	r8, [r1], -r4
   17f04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f08:	andeq	r8, r1, r0, lsr #3
   17f0c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f10:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f14:	andeq	r8, r1, r8, ror r1
   17f18:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f1c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f20:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f24:	ldrdeq	r8, [r1], -r0
   17f28:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f2c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f30:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f34:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f38:	andeq	r8, r1, ip, lsr #1
   17f3c:	andeq	r8, r1, r8, ror r0
   17f40:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f44:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f48:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f4c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f50:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f54:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f58:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f5c:	andeq	r8, r1, r4, asr #32
   17f60:	andeq	r8, r1, r4, lsr r0
   17f64:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f68:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f6c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f70:	strdeq	r8, [r1], -r4
   17f74:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f78:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f7c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f80:	ldrdeq	r8, [r1], -r4
   17f84:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f88:	andeq	r8, r1, r0, lsr #3
   17f8c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f90:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f94:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f98:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f9c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fa0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fa4:	ldrdeq	r8, [r1], -r0
   17fa8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fb0:	strdeq	r7, [r1], -r0
   17fb4:	mov	r1, #48	; 0x30
   17fb8:	ldr	r0, [sp, #56]	; 0x38
   17fbc:	bl	10ff4 <strchr@plt>
   17fc0:	cmp	r0, #0
   17fc4:	beq	17ec4 <__assert_fail@plt+0x6dc8>
   17fc8:	ldrb	r3, [r8, #1]
   17fcc:	cmp	r3, #68	; 0x44
   17fd0:	beq	17fe4 <__assert_fail@plt+0x6ee8>
   17fd4:	cmp	r3, #105	; 0x69
   17fd8:	beq	18208 <__assert_fail@plt+0x710c>
   17fdc:	cmp	r3, #66	; 0x42
   17fe0:	bne	17ec4 <__assert_fail@plt+0x6dc8>
   17fe4:	mov	r7, #2
   17fe8:	mov	sl, #1000	; 0x3e8
   17fec:	b	17ecc <__assert_fail@plt+0x6dd0>
   17ff0:	ldrd	r2, [sp, #8]
   17ff4:	cmp	r2, #0
   17ff8:	sbcs	r1, r3, #0
   17ffc:	blt	18220 <__assert_fail@plt+0x7124>
   18000:	adds	r2, r2, r2
   18004:	adc	r3, r3, r3
   18008:	mov	r1, r3
   1800c:	mov	r9, #0
   18010:	str	r2, [sp, #8]
   18014:	str	r3, [sp, #12]
   18018:	add	r3, r8, r7
   1801c:	str	r3, [r5]
   18020:	ldrb	r3, [r8, r7]
   18024:	orr	r4, r4, r9
   18028:	cmp	r3, #0
   1802c:	orrne	r4, r4, #2
   18030:	b	17d84 <__assert_fail@plt+0x6c88>
   18034:	ldr	r2, [sp, #8]
   18038:	ldr	r1, [sp, #12]
   1803c:	mov	r9, #0
   18040:	b	18018 <__assert_fail@plt+0x6f1c>
   18044:	ldrd	r2, [sp, #8]
   18048:	ldr	r1, [pc, #512]	; 18250 <__assert_fail@plt+0x7154>
   1804c:	mvn	r0, #0
   18050:	cmp	r3, r1
   18054:	cmpeq	r2, r0
   18058:	bhi	18220 <__assert_fail@plt+0x7124>
   1805c:	lsl	r1, r3, #9
   18060:	orr	r1, r1, r2, lsr #23
   18064:	lsl	r2, r2, #9
   18068:	str	r1, [sp, #12]
   1806c:	str	r2, [sp, #8]
   18070:	mov	r9, #0
   18074:	b	18018 <__assert_fail@plt+0x6f1c>
   18078:	mov	fp, #7
   1807c:	mov	r9, #0
   18080:	add	r8, sp, #8
   18084:	mov	r1, sl
   18088:	mov	r0, r8
   1808c:	bl	17c24 <__assert_fail@plt+0x6b28>
   18090:	subs	fp, fp, #1
   18094:	orr	r9, r9, r0
   18098:	bne	18084 <__assert_fail@plt+0x6f88>
   1809c:	ldr	r8, [r5]
   180a0:	ldr	r2, [sp, #8]
   180a4:	ldr	r1, [sp, #12]
   180a8:	b	18018 <__assert_fail@plt+0x6f1c>
   180ac:	mov	fp, #8
   180b0:	mov	r9, #0
   180b4:	add	r8, sp, fp
   180b8:	mov	r1, sl
   180bc:	mov	r0, r8
   180c0:	bl	17c24 <__assert_fail@plt+0x6b28>
   180c4:	subs	fp, fp, #1
   180c8:	orr	r9, r9, r0
   180cc:	bne	180b8 <__assert_fail@plt+0x6fbc>
   180d0:	b	1809c <__assert_fail@plt+0x6fa0>
   180d4:	mov	r1, sl
   180d8:	add	r0, sp, #8
   180dc:	bl	17c24 <__assert_fail@plt+0x6b28>
   180e0:	ldr	r8, [r5]
   180e4:	ldr	r2, [sp, #8]
   180e8:	ldr	r1, [sp, #12]
   180ec:	mov	r9, r0
   180f0:	b	18018 <__assert_fail@plt+0x6f1c>
   180f4:	mov	fp, #3
   180f8:	mov	r9, #0
   180fc:	add	r8, sp, #8
   18100:	mov	r1, sl
   18104:	mov	r0, r8
   18108:	bl	17c24 <__assert_fail@plt+0x6b28>
   1810c:	subs	fp, fp, #1
   18110:	orr	r9, r9, r0
   18114:	bne	18100 <__assert_fail@plt+0x7004>
   18118:	b	1809c <__assert_fail@plt+0x6fa0>
   1811c:	mov	fp, #6
   18120:	mov	r9, #0
   18124:	add	r8, sp, #8
   18128:	mov	r1, sl
   1812c:	mov	r0, r8
   18130:	bl	17c24 <__assert_fail@plt+0x6b28>
   18134:	subs	fp, fp, #1
   18138:	orr	r9, r9, r0
   1813c:	bne	18128 <__assert_fail@plt+0x702c>
   18140:	b	1809c <__assert_fail@plt+0x6fa0>
   18144:	ldrd	r0, [sp, #8]
   18148:	ldr	r3, [pc, #260]	; 18254 <__assert_fail@plt+0x7158>
   1814c:	mvn	r2, #0
   18150:	cmp	r1, r3
   18154:	cmpeq	r0, r2
   18158:	bhi	18220 <__assert_fail@plt+0x7124>
   1815c:	lsl	r1, r1, #10
   18160:	orr	r1, r1, r0, lsr #22
   18164:	lsl	r2, r0, #10
   18168:	str	r1, [sp, #12]
   1816c:	str	r2, [sp, #8]
   18170:	mov	r9, #0
   18174:	b	18018 <__assert_fail@plt+0x6f1c>
   18178:	mov	fp, #5
   1817c:	mov	r9, #0
   18180:	add	r8, sp, #8
   18184:	mov	r1, sl
   18188:	mov	r0, r8
   1818c:	bl	17c24 <__assert_fail@plt+0x6b28>
   18190:	subs	fp, fp, #1
   18194:	orr	r9, r9, r0
   18198:	bne	18184 <__assert_fail@plt+0x7088>
   1819c:	b	1809c <__assert_fail@plt+0x6fa0>
   181a0:	mov	r1, sl
   181a4:	add	r0, sp, #8
   181a8:	bl	17c24 <__assert_fail@plt+0x6b28>
   181ac:	mov	r1, sl
   181b0:	mov	r9, r0
   181b4:	add	r0, sp, #8
   181b8:	bl	17c24 <__assert_fail@plt+0x6b28>
   181bc:	ldr	r8, [r5]
   181c0:	ldr	r2, [sp, #8]
   181c4:	ldr	r1, [sp, #12]
   181c8:	orr	r9, r9, r0
   181cc:	b	18018 <__assert_fail@plt+0x6f1c>
   181d0:	mov	fp, #4
   181d4:	mov	r9, #0
   181d8:	add	r8, sp, #8
   181dc:	mov	r1, sl
   181e0:	mov	r0, r8
   181e4:	bl	17c24 <__assert_fail@plt+0x6b28>
   181e8:	subs	fp, fp, #1
   181ec:	orr	r9, r9, r0
   181f0:	bne	181dc <__assert_fail@plt+0x70e0>
   181f4:	b	1809c <__assert_fail@plt+0x6fa0>
   181f8:	ldrd	r2, [sp, #8]
   181fc:	orr	r4, r4, #2
   18200:	strd	r2, [r6]
   18204:	b	17d28 <__assert_fail@plt+0x6c2c>
   18208:	ldrb	r7, [r8, #2]
   1820c:	mov	sl, #1024	; 0x400
   18210:	cmp	r7, #66	; 0x42
   18214:	movne	r7, #1
   18218:	moveq	r7, #3
   1821c:	b	17ecc <__assert_fail@plt+0x6dd0>
   18220:	mvn	r1, #0
   18224:	mvn	r0, #0
   18228:	mvn	r2, #0
   1822c:	strd	r0, [sp, #8]
   18230:	mov	r9, #1
   18234:	mov	r1, r2
   18238:	b	18018 <__assert_fail@plt+0x6f1c>
   1823c:	ldr	r3, [pc, #20]	; 18258 <__assert_fail@plt+0x715c>
   18240:	mov	r2, #85	; 0x55
   18244:	ldr	r1, [pc, #16]	; 1825c <__assert_fail@plt+0x7160>
   18248:	ldr	r0, [pc, #16]	; 18260 <__assert_fail@plt+0x7164>
   1824c:	bl	110fc <__assert_fail@plt>
   18250:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   18254:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   18258:	andeq	fp, r1, r0, ror #12
   1825c:	andeq	fp, r1, r8, lsr #12
   18260:	andeq	fp, r1, r8, lsr r6
   18264:	cmp	r1, #0
   18268:	cmpne	r0, #0
   1826c:	moveq	r1, #1
   18270:	moveq	r0, r1
   18274:	umull	r2, r3, r0, r1
   18278:	adds	r3, r3, #0
   1827c:	movne	r3, #1
   18280:	cmp	r2, #0
   18284:	blt	18294 <__assert_fail@plt+0x7198>
   18288:	cmp	r3, #0
   1828c:	bne	18294 <__assert_fail@plt+0x7198>
   18290:	b	10e38 <calloc@plt>
   18294:	push	{r4, lr}
   18298:	bl	11000 <__errno_location@plt>
   1829c:	mov	r3, #12
   182a0:	str	r3, [r0]
   182a4:	mov	r0, #0
   182a8:	pop	{r4, pc}
   182ac:	cmp	r0, #0
   182b0:	moveq	r0, #1
   182b4:	cmp	r0, #0
   182b8:	blt	182c0 <__assert_fail@plt+0x71c4>
   182bc:	b	10f88 <malloc@plt>
   182c0:	push	{r4, lr}
   182c4:	bl	11000 <__errno_location@plt>
   182c8:	mov	r3, #12
   182cc:	str	r3, [r0]
   182d0:	mov	r0, #0
   182d4:	pop	{r4, pc}
   182d8:	cmp	r0, #0
   182dc:	beq	18300 <__assert_fail@plt+0x7204>
   182e0:	cmp	r1, #0
   182e4:	push	{lr}		; (str lr, [sp, #-4]!)
   182e8:	sub	sp, sp, #12
   182ec:	beq	18308 <__assert_fail@plt+0x720c>
   182f0:	blt	18320 <__assert_fail@plt+0x7224>
   182f4:	add	sp, sp, #12
   182f8:	pop	{lr}		; (ldr lr, [sp], #4)
   182fc:	b	10f04 <realloc@plt>
   18300:	mov	r0, r1
   18304:	b	182ac <__assert_fail@plt+0x71b0>
   18308:	str	r1, [sp, #4]
   1830c:	bl	148b0 <__assert_fail@plt+0x37b4>
   18310:	ldr	r3, [sp, #4]
   18314:	mov	r0, r3
   18318:	add	sp, sp, #12
   1831c:	pop	{pc}		; (ldr pc, [sp], #4)
   18320:	bl	11000 <__errno_location@plt>
   18324:	mov	r2, #12
   18328:	mov	r3, #0
   1832c:	str	r2, [r0]
   18330:	b	18314 <__assert_fail@plt+0x7218>
   18334:	push	{r4, r5, r6, lr}
   18338:	mov	r4, r0
   1833c:	bl	10f58 <__fpending@plt>
   18340:	ldr	r5, [r4]
   18344:	and	r5, r5, #32
   18348:	mov	r6, r0
   1834c:	mov	r0, r4
   18350:	bl	183b0 <__assert_fail@plt+0x72b4>
   18354:	cmp	r5, #0
   18358:	mov	r4, r0
   1835c:	bne	1837c <__assert_fail@plt+0x7280>
   18360:	cmp	r0, #0
   18364:	beq	18374 <__assert_fail@plt+0x7278>
   18368:	cmp	r6, #0
   1836c:	beq	18398 <__assert_fail@plt+0x729c>
   18370:	mvn	r4, #0
   18374:	mov	r0, r4
   18378:	pop	{r4, r5, r6, pc}
   1837c:	cmp	r0, #0
   18380:	bne	18370 <__assert_fail@plt+0x7274>
   18384:	bl	11000 <__errno_location@plt>
   18388:	str	r4, [r0]
   1838c:	mvn	r4, #0
   18390:	mov	r0, r4
   18394:	pop	{r4, r5, r6, pc}
   18398:	bl	11000 <__errno_location@plt>
   1839c:	ldr	r4, [r0]
   183a0:	subs	r4, r4, #9
   183a4:	mvnne	r4, #0
   183a8:	mov	r0, r4
   183ac:	pop	{r4, r5, r6, pc}
   183b0:	push	{r4, r5, lr}
   183b4:	sub	sp, sp, #12
   183b8:	mov	r4, r0
   183bc:	bl	11030 <fileno@plt>
   183c0:	cmp	r0, #0
   183c4:	mov	r0, r4
   183c8:	blt	18444 <__assert_fail@plt+0x7348>
   183cc:	bl	10fa0 <__freading@plt>
   183d0:	cmp	r0, #0
   183d4:	bne	18410 <__assert_fail@plt+0x7314>
   183d8:	mov	r0, r4
   183dc:	bl	18450 <__assert_fail@plt+0x7354>
   183e0:	cmp	r0, #0
   183e4:	beq	18440 <__assert_fail@plt+0x7344>
   183e8:	bl	11000 <__errno_location@plt>
   183ec:	mov	r5, r0
   183f0:	mov	r0, r4
   183f4:	ldr	r4, [r5]
   183f8:	bl	11048 <fclose@plt>
   183fc:	cmp	r4, #0
   18400:	mvnne	r0, #0
   18404:	strne	r4, [r5]
   18408:	add	sp, sp, #12
   1840c:	pop	{r4, r5, pc}
   18410:	mov	r0, r4
   18414:	bl	11030 <fileno@plt>
   18418:	mov	r3, #1
   1841c:	str	r3, [sp]
   18420:	mov	r2, #0
   18424:	mov	r3, #0
   18428:	bl	10f34 <lseek64@plt>
   1842c:	mvn	r3, #0
   18430:	mvn	r2, #0
   18434:	cmp	r1, r3
   18438:	cmpeq	r0, r2
   1843c:	bne	183d8 <__assert_fail@plt+0x72dc>
   18440:	mov	r0, r4
   18444:	add	sp, sp, #12
   18448:	pop	{r4, r5, lr}
   1844c:	b	11048 <fclose@plt>
   18450:	push	{r4, lr}
   18454:	subs	r4, r0, #0
   18458:	sub	sp, sp, #8
   1845c:	beq	18478 <__assert_fail@plt+0x737c>
   18460:	bl	10fa0 <__freading@plt>
   18464:	cmp	r0, #0
   18468:	beq	18478 <__assert_fail@plt+0x737c>
   1846c:	ldr	r3, [r4]
   18470:	tst	r3, #256	; 0x100
   18474:	bne	18488 <__assert_fail@plt+0x738c>
   18478:	mov	r0, r4
   1847c:	add	sp, sp, #8
   18480:	pop	{r4, lr}
   18484:	b	10e80 <fflush@plt>
   18488:	mov	r3, #1
   1848c:	str	r3, [sp]
   18490:	mov	r2, #0
   18494:	mov	r3, #0
   18498:	mov	r0, r4
   1849c:	bl	184b0 <__assert_fail@plt+0x73b4>
   184a0:	mov	r0, r4
   184a4:	add	sp, sp, #8
   184a8:	pop	{r4, lr}
   184ac:	b	10e80 <fflush@plt>
   184b0:	push	{r4, r5, r6, r7, r8, lr}
   184b4:	sub	sp, sp, #8
   184b8:	ldmib	r0, {ip, lr}
   184bc:	mov	r4, r0
   184c0:	ldr	r5, [sp, #32]
   184c4:	cmp	lr, ip
   184c8:	beq	184e0 <__assert_fail@plt+0x73e4>
   184cc:	str	r5, [sp, #32]
   184d0:	mov	r0, r4
   184d4:	add	sp, sp, #8
   184d8:	pop	{r4, r5, r6, r7, r8, lr}
   184dc:	b	11054 <fseeko64@plt>
   184e0:	ldr	lr, [r0, #20]
   184e4:	ldr	ip, [r0, #16]
   184e8:	cmp	lr, ip
   184ec:	bne	184cc <__assert_fail@plt+0x73d0>
   184f0:	ldr	r8, [r0, #36]	; 0x24
   184f4:	cmp	r8, #0
   184f8:	bne	184cc <__assert_fail@plt+0x73d0>
   184fc:	mov	r6, r2
   18500:	mov	r7, r3
   18504:	bl	11030 <fileno@plt>
   18508:	mov	r2, r6
   1850c:	mov	r3, r7
   18510:	str	r5, [sp]
   18514:	bl	10f34 <lseek64@plt>
   18518:	mvn	r3, #0
   1851c:	mvn	r2, #0
   18520:	cmp	r1, r3
   18524:	cmpeq	r0, r2
   18528:	beq	18548 <__assert_fail@plt+0x744c>
   1852c:	ldr	r3, [r4]
   18530:	strd	r0, [r4, #80]	; 0x50
   18534:	mov	r0, r8
   18538:	bic	r3, r3, #16
   1853c:	str	r3, [r4]
   18540:	add	sp, sp, #8
   18544:	pop	{r4, r5, r6, r7, r8, pc}
   18548:	mvn	r0, #0
   1854c:	b	18540 <__assert_fail@plt+0x7444>
   18550:	push	{r4, lr}
   18554:	mov	r0, #14
   18558:	bl	11090 <nl_langinfo@plt>
   1855c:	cmp	r0, #0
   18560:	beq	18578 <__assert_fail@plt+0x747c>
   18564:	ldrb	r2, [r0]
   18568:	ldr	r3, [pc, #16]	; 18580 <__assert_fail@plt+0x7484>
   1856c:	cmp	r2, #0
   18570:	moveq	r0, r3
   18574:	pop	{r4, pc}
   18578:	ldr	r0, [pc]	; 18580 <__assert_fail@plt+0x7484>
   1857c:	pop	{r4, pc}
   18580:	andeq	fp, r1, ip, ror #12
   18584:	push	{r4, r5, r6, r7, lr}
   18588:	subs	r6, r0, #0
   1858c:	sub	sp, sp, #12
   18590:	addeq	r6, sp, #4
   18594:	mov	r0, r6
   18598:	mov	r5, r2
   1859c:	mov	r7, r1
   185a0:	bl	10f64 <mbrtowc@plt>
   185a4:	cmp	r5, #0
   185a8:	cmnne	r0, #3
   185ac:	mov	r4, r0
   185b0:	bls	185cc <__assert_fail@plt+0x74d0>
   185b4:	mov	r0, #0
   185b8:	bl	18624 <__assert_fail@plt+0x7528>
   185bc:	cmp	r0, #0
   185c0:	moveq	r4, #1
   185c4:	ldrbeq	r3, [r7]
   185c8:	streq	r3, [r6]
   185cc:	mov	r0, r4
   185d0:	add	sp, sp, #12
   185d4:	pop	{r4, r5, r6, r7, pc}
   185d8:	push	{r4, r5, r6, lr}
   185dc:	subs	r4, r2, #0
   185e0:	mov	r6, r0
   185e4:	mov	r5, r1
   185e8:	beq	18614 <__assert_fail@plt+0x7518>
   185ec:	mov	r1, r4
   185f0:	mvn	r0, #0
   185f4:	bl	18718 <__assert_fail@plt+0x761c>
   185f8:	cmp	r0, r5
   185fc:	bcs	18614 <__assert_fail@plt+0x7518>
   18600:	bl	11000 <__errno_location@plt>
   18604:	mov	r3, #12
   18608:	str	r3, [r0]
   1860c:	mov	r0, #0
   18610:	pop	{r4, r5, r6, pc}
   18614:	mul	r1, r5, r4
   18618:	mov	r0, r6
   1861c:	pop	{r4, r5, r6, lr}
   18620:	b	182d8 <__assert_fail@plt+0x71dc>
   18624:	push	{lr}		; (str lr, [sp, #-4]!)
   18628:	sub	sp, sp, #268	; 0x10c
   1862c:	add	r1, sp, #4
   18630:	ldr	r2, [pc, #60]	; 18674 <__assert_fail@plt+0x7578>
   18634:	bl	18680 <__assert_fail@plt+0x7584>
   18638:	cmp	r0, #0
   1863c:	movne	r0, #0
   18640:	bne	1866c <__assert_fail@plt+0x7570>
   18644:	ldr	r1, [pc, #44]	; 18678 <__assert_fail@plt+0x757c>
   18648:	add	r0, sp, #4
   1864c:	bl	10e68 <strcmp@plt>
   18650:	cmp	r0, #0
   18654:	beq	1866c <__assert_fail@plt+0x7570>
   18658:	add	r0, sp, #4
   1865c:	ldr	r1, [pc, #24]	; 1867c <__assert_fail@plt+0x7580>
   18660:	bl	10e68 <strcmp@plt>
   18664:	adds	r0, r0, #0
   18668:	movne	r0, #1
   1866c:	add	sp, sp, #268	; 0x10c
   18670:	pop	{pc}		; (ldr pc, [sp], #4)
   18674:	andeq	r0, r0, r1, lsl #2
   18678:	andeq	fp, r1, r4, ror r6
   1867c:	andeq	fp, r1, r8, ror r6
   18680:	push	{r4, r5, r6, lr}
   18684:	mov	r5, r1
   18688:	mov	r1, #0
   1868c:	mov	r4, r2
   18690:	bl	1106c <setlocale@plt>
   18694:	subs	r6, r0, #0
   18698:	beq	186f4 <__assert_fail@plt+0x75f8>
   1869c:	bl	10fe8 <strlen@plt>
   186a0:	cmp	r4, r0
   186a4:	bhi	186dc <__assert_fail@plt+0x75e0>
   186a8:	cmp	r4, #0
   186ac:	bne	186b8 <__assert_fail@plt+0x75bc>
   186b0:	mov	r0, #34	; 0x22
   186b4:	pop	{r4, r5, r6, pc}
   186b8:	sub	r4, r4, #1
   186bc:	mov	r1, r6
   186c0:	mov	r2, r4
   186c4:	mov	r0, r5
   186c8:	bl	10ebc <memcpy@plt>
   186cc:	mov	r3, #0
   186d0:	strb	r3, [r5, r4]
   186d4:	mov	r0, #34	; 0x22
   186d8:	pop	{r4, r5, r6, pc}
   186dc:	add	r2, r0, #1
   186e0:	mov	r1, r6
   186e4:	mov	r0, r5
   186e8:	bl	10ebc <memcpy@plt>
   186ec:	mov	r0, #0
   186f0:	pop	{r4, r5, r6, pc}
   186f4:	cmp	r4, #0
   186f8:	beq	18708 <__assert_fail@plt+0x760c>
   186fc:	strb	r6, [r5]
   18700:	mov	r0, #22
   18704:	pop	{r4, r5, r6, pc}
   18708:	mov	r0, #22
   1870c:	pop	{r4, r5, r6, pc}
   18710:	mov	r1, #0
   18714:	b	1106c <setlocale@plt>
   18718:	subs	r2, r1, #1
   1871c:	bxeq	lr
   18720:	bcc	188f8 <__assert_fail@plt+0x77fc>
   18724:	cmp	r0, r1
   18728:	bls	188dc <__assert_fail@plt+0x77e0>
   1872c:	tst	r1, r2
   18730:	beq	188e8 <__assert_fail@plt+0x77ec>
   18734:	clz	r3, r0
   18738:	clz	r2, r1
   1873c:	sub	r3, r2, r3
   18740:	rsbs	r3, r3, #31
   18744:	addne	r3, r3, r3, lsl #1
   18748:	mov	r2, #0
   1874c:	addne	pc, pc, r3, lsl #2
   18750:	nop			; (mov r0, r0)
   18754:	cmp	r0, r1, lsl #31
   18758:	adc	r2, r2, r2
   1875c:	subcs	r0, r0, r1, lsl #31
   18760:	cmp	r0, r1, lsl #30
   18764:	adc	r2, r2, r2
   18768:	subcs	r0, r0, r1, lsl #30
   1876c:	cmp	r0, r1, lsl #29
   18770:	adc	r2, r2, r2
   18774:	subcs	r0, r0, r1, lsl #29
   18778:	cmp	r0, r1, lsl #28
   1877c:	adc	r2, r2, r2
   18780:	subcs	r0, r0, r1, lsl #28
   18784:	cmp	r0, r1, lsl #27
   18788:	adc	r2, r2, r2
   1878c:	subcs	r0, r0, r1, lsl #27
   18790:	cmp	r0, r1, lsl #26
   18794:	adc	r2, r2, r2
   18798:	subcs	r0, r0, r1, lsl #26
   1879c:	cmp	r0, r1, lsl #25
   187a0:	adc	r2, r2, r2
   187a4:	subcs	r0, r0, r1, lsl #25
   187a8:	cmp	r0, r1, lsl #24
   187ac:	adc	r2, r2, r2
   187b0:	subcs	r0, r0, r1, lsl #24
   187b4:	cmp	r0, r1, lsl #23
   187b8:	adc	r2, r2, r2
   187bc:	subcs	r0, r0, r1, lsl #23
   187c0:	cmp	r0, r1, lsl #22
   187c4:	adc	r2, r2, r2
   187c8:	subcs	r0, r0, r1, lsl #22
   187cc:	cmp	r0, r1, lsl #21
   187d0:	adc	r2, r2, r2
   187d4:	subcs	r0, r0, r1, lsl #21
   187d8:	cmp	r0, r1, lsl #20
   187dc:	adc	r2, r2, r2
   187e0:	subcs	r0, r0, r1, lsl #20
   187e4:	cmp	r0, r1, lsl #19
   187e8:	adc	r2, r2, r2
   187ec:	subcs	r0, r0, r1, lsl #19
   187f0:	cmp	r0, r1, lsl #18
   187f4:	adc	r2, r2, r2
   187f8:	subcs	r0, r0, r1, lsl #18
   187fc:	cmp	r0, r1, lsl #17
   18800:	adc	r2, r2, r2
   18804:	subcs	r0, r0, r1, lsl #17
   18808:	cmp	r0, r1, lsl #16
   1880c:	adc	r2, r2, r2
   18810:	subcs	r0, r0, r1, lsl #16
   18814:	cmp	r0, r1, lsl #15
   18818:	adc	r2, r2, r2
   1881c:	subcs	r0, r0, r1, lsl #15
   18820:	cmp	r0, r1, lsl #14
   18824:	adc	r2, r2, r2
   18828:	subcs	r0, r0, r1, lsl #14
   1882c:	cmp	r0, r1, lsl #13
   18830:	adc	r2, r2, r2
   18834:	subcs	r0, r0, r1, lsl #13
   18838:	cmp	r0, r1, lsl #12
   1883c:	adc	r2, r2, r2
   18840:	subcs	r0, r0, r1, lsl #12
   18844:	cmp	r0, r1, lsl #11
   18848:	adc	r2, r2, r2
   1884c:	subcs	r0, r0, r1, lsl #11
   18850:	cmp	r0, r1, lsl #10
   18854:	adc	r2, r2, r2
   18858:	subcs	r0, r0, r1, lsl #10
   1885c:	cmp	r0, r1, lsl #9
   18860:	adc	r2, r2, r2
   18864:	subcs	r0, r0, r1, lsl #9
   18868:	cmp	r0, r1, lsl #8
   1886c:	adc	r2, r2, r2
   18870:	subcs	r0, r0, r1, lsl #8
   18874:	cmp	r0, r1, lsl #7
   18878:	adc	r2, r2, r2
   1887c:	subcs	r0, r0, r1, lsl #7
   18880:	cmp	r0, r1, lsl #6
   18884:	adc	r2, r2, r2
   18888:	subcs	r0, r0, r1, lsl #6
   1888c:	cmp	r0, r1, lsl #5
   18890:	adc	r2, r2, r2
   18894:	subcs	r0, r0, r1, lsl #5
   18898:	cmp	r0, r1, lsl #4
   1889c:	adc	r2, r2, r2
   188a0:	subcs	r0, r0, r1, lsl #4
   188a4:	cmp	r0, r1, lsl #3
   188a8:	adc	r2, r2, r2
   188ac:	subcs	r0, r0, r1, lsl #3
   188b0:	cmp	r0, r1, lsl #2
   188b4:	adc	r2, r2, r2
   188b8:	subcs	r0, r0, r1, lsl #2
   188bc:	cmp	r0, r1, lsl #1
   188c0:	adc	r2, r2, r2
   188c4:	subcs	r0, r0, r1, lsl #1
   188c8:	cmp	r0, r1
   188cc:	adc	r2, r2, r2
   188d0:	subcs	r0, r0, r1
   188d4:	mov	r0, r2
   188d8:	bx	lr
   188dc:	moveq	r0, #1
   188e0:	movne	r0, #0
   188e4:	bx	lr
   188e8:	clz	r2, r1
   188ec:	rsb	r2, r2, #31
   188f0:	lsr	r0, r0, r2
   188f4:	bx	lr
   188f8:	cmp	r0, #0
   188fc:	mvnne	r0, #0
   18900:	b	18f58 <__assert_fail@plt+0x7e5c>
   18904:	cmp	r1, #0
   18908:	beq	188f8 <__assert_fail@plt+0x77fc>
   1890c:	push	{r0, r1, lr}
   18910:	bl	18718 <__assert_fail@plt+0x761c>
   18914:	pop	{r1, r2, lr}
   18918:	mul	r3, r2, r0
   1891c:	sub	r1, r1, r3
   18920:	bx	lr
   18924:	cmp	r1, #0
   18928:	beq	18b34 <__assert_fail@plt+0x7a38>
   1892c:	eor	ip, r0, r1
   18930:	rsbmi	r1, r1, #0
   18934:	subs	r2, r1, #1
   18938:	beq	18b00 <__assert_fail@plt+0x7a04>
   1893c:	movs	r3, r0
   18940:	rsbmi	r3, r0, #0
   18944:	cmp	r3, r1
   18948:	bls	18b0c <__assert_fail@plt+0x7a10>
   1894c:	tst	r1, r2
   18950:	beq	18b1c <__assert_fail@plt+0x7a20>
   18954:	clz	r2, r3
   18958:	clz	r0, r1
   1895c:	sub	r2, r0, r2
   18960:	rsbs	r2, r2, #31
   18964:	addne	r2, r2, r2, lsl #1
   18968:	mov	r0, #0
   1896c:	addne	pc, pc, r2, lsl #2
   18970:	nop			; (mov r0, r0)
   18974:	cmp	r3, r1, lsl #31
   18978:	adc	r0, r0, r0
   1897c:	subcs	r3, r3, r1, lsl #31
   18980:	cmp	r3, r1, lsl #30
   18984:	adc	r0, r0, r0
   18988:	subcs	r3, r3, r1, lsl #30
   1898c:	cmp	r3, r1, lsl #29
   18990:	adc	r0, r0, r0
   18994:	subcs	r3, r3, r1, lsl #29
   18998:	cmp	r3, r1, lsl #28
   1899c:	adc	r0, r0, r0
   189a0:	subcs	r3, r3, r1, lsl #28
   189a4:	cmp	r3, r1, lsl #27
   189a8:	adc	r0, r0, r0
   189ac:	subcs	r3, r3, r1, lsl #27
   189b0:	cmp	r3, r1, lsl #26
   189b4:	adc	r0, r0, r0
   189b8:	subcs	r3, r3, r1, lsl #26
   189bc:	cmp	r3, r1, lsl #25
   189c0:	adc	r0, r0, r0
   189c4:	subcs	r3, r3, r1, lsl #25
   189c8:	cmp	r3, r1, lsl #24
   189cc:	adc	r0, r0, r0
   189d0:	subcs	r3, r3, r1, lsl #24
   189d4:	cmp	r3, r1, lsl #23
   189d8:	adc	r0, r0, r0
   189dc:	subcs	r3, r3, r1, lsl #23
   189e0:	cmp	r3, r1, lsl #22
   189e4:	adc	r0, r0, r0
   189e8:	subcs	r3, r3, r1, lsl #22
   189ec:	cmp	r3, r1, lsl #21
   189f0:	adc	r0, r0, r0
   189f4:	subcs	r3, r3, r1, lsl #21
   189f8:	cmp	r3, r1, lsl #20
   189fc:	adc	r0, r0, r0
   18a00:	subcs	r3, r3, r1, lsl #20
   18a04:	cmp	r3, r1, lsl #19
   18a08:	adc	r0, r0, r0
   18a0c:	subcs	r3, r3, r1, lsl #19
   18a10:	cmp	r3, r1, lsl #18
   18a14:	adc	r0, r0, r0
   18a18:	subcs	r3, r3, r1, lsl #18
   18a1c:	cmp	r3, r1, lsl #17
   18a20:	adc	r0, r0, r0
   18a24:	subcs	r3, r3, r1, lsl #17
   18a28:	cmp	r3, r1, lsl #16
   18a2c:	adc	r0, r0, r0
   18a30:	subcs	r3, r3, r1, lsl #16
   18a34:	cmp	r3, r1, lsl #15
   18a38:	adc	r0, r0, r0
   18a3c:	subcs	r3, r3, r1, lsl #15
   18a40:	cmp	r3, r1, lsl #14
   18a44:	adc	r0, r0, r0
   18a48:	subcs	r3, r3, r1, lsl #14
   18a4c:	cmp	r3, r1, lsl #13
   18a50:	adc	r0, r0, r0
   18a54:	subcs	r3, r3, r1, lsl #13
   18a58:	cmp	r3, r1, lsl #12
   18a5c:	adc	r0, r0, r0
   18a60:	subcs	r3, r3, r1, lsl #12
   18a64:	cmp	r3, r1, lsl #11
   18a68:	adc	r0, r0, r0
   18a6c:	subcs	r3, r3, r1, lsl #11
   18a70:	cmp	r3, r1, lsl #10
   18a74:	adc	r0, r0, r0
   18a78:	subcs	r3, r3, r1, lsl #10
   18a7c:	cmp	r3, r1, lsl #9
   18a80:	adc	r0, r0, r0
   18a84:	subcs	r3, r3, r1, lsl #9
   18a88:	cmp	r3, r1, lsl #8
   18a8c:	adc	r0, r0, r0
   18a90:	subcs	r3, r3, r1, lsl #8
   18a94:	cmp	r3, r1, lsl #7
   18a98:	adc	r0, r0, r0
   18a9c:	subcs	r3, r3, r1, lsl #7
   18aa0:	cmp	r3, r1, lsl #6
   18aa4:	adc	r0, r0, r0
   18aa8:	subcs	r3, r3, r1, lsl #6
   18aac:	cmp	r3, r1, lsl #5
   18ab0:	adc	r0, r0, r0
   18ab4:	subcs	r3, r3, r1, lsl #5
   18ab8:	cmp	r3, r1, lsl #4
   18abc:	adc	r0, r0, r0
   18ac0:	subcs	r3, r3, r1, lsl #4
   18ac4:	cmp	r3, r1, lsl #3
   18ac8:	adc	r0, r0, r0
   18acc:	subcs	r3, r3, r1, lsl #3
   18ad0:	cmp	r3, r1, lsl #2
   18ad4:	adc	r0, r0, r0
   18ad8:	subcs	r3, r3, r1, lsl #2
   18adc:	cmp	r3, r1, lsl #1
   18ae0:	adc	r0, r0, r0
   18ae4:	subcs	r3, r3, r1, lsl #1
   18ae8:	cmp	r3, r1
   18aec:	adc	r0, r0, r0
   18af0:	subcs	r3, r3, r1
   18af4:	cmp	ip, #0
   18af8:	rsbmi	r0, r0, #0
   18afc:	bx	lr
   18b00:	teq	ip, r0
   18b04:	rsbmi	r0, r0, #0
   18b08:	bx	lr
   18b0c:	movcc	r0, #0
   18b10:	asreq	r0, ip, #31
   18b14:	orreq	r0, r0, #1
   18b18:	bx	lr
   18b1c:	clz	r2, r1
   18b20:	rsb	r2, r2, #31
   18b24:	cmp	ip, #0
   18b28:	lsr	r0, r3, r2
   18b2c:	rsbmi	r0, r0, #0
   18b30:	bx	lr
   18b34:	cmp	r0, #0
   18b38:	mvngt	r0, #-2147483648	; 0x80000000
   18b3c:	movlt	r0, #-2147483648	; 0x80000000
   18b40:	b	18f58 <__assert_fail@plt+0x7e5c>
   18b44:	cmp	r1, #0
   18b48:	beq	18b34 <__assert_fail@plt+0x7a38>
   18b4c:	push	{r0, r1, lr}
   18b50:	bl	1892c <__assert_fail@plt+0x7830>
   18b54:	pop	{r1, r2, lr}
   18b58:	mul	r3, r2, r0
   18b5c:	sub	r1, r1, r3
   18b60:	bx	lr
   18b64:	eor	r1, r1, #-2147483648	; 0x80000000
   18b68:	b	18b70 <__assert_fail@plt+0x7a74>
   18b6c:	eor	r3, r3, #-2147483648	; 0x80000000
   18b70:	push	{r4, r5, lr}
   18b74:	lsl	r4, r1, #1
   18b78:	lsl	r5, r3, #1
   18b7c:	teq	r4, r5
   18b80:	teqeq	r0, r2
   18b84:	orrsne	ip, r4, r0
   18b88:	orrsne	ip, r5, r2
   18b8c:	mvnsne	ip, r4, asr #21
   18b90:	mvnsne	ip, r5, asr #21
   18b94:	beq	18d80 <__assert_fail@plt+0x7c84>
   18b98:	lsr	r4, r4, #21
   18b9c:	rsbs	r5, r4, r5, lsr #21
   18ba0:	rsblt	r5, r5, #0
   18ba4:	ble	18bc4 <__assert_fail@plt+0x7ac8>
   18ba8:	add	r4, r4, r5
   18bac:	eor	r2, r0, r2
   18bb0:	eor	r3, r1, r3
   18bb4:	eor	r0, r2, r0
   18bb8:	eor	r1, r3, r1
   18bbc:	eor	r2, r0, r2
   18bc0:	eor	r3, r1, r3
   18bc4:	cmp	r5, #54	; 0x36
   18bc8:	pophi	{r4, r5, pc}
   18bcc:	tst	r1, #-2147483648	; 0x80000000
   18bd0:	lsl	r1, r1, #12
   18bd4:	mov	ip, #1048576	; 0x100000
   18bd8:	orr	r1, ip, r1, lsr #12
   18bdc:	beq	18be8 <__assert_fail@plt+0x7aec>
   18be0:	rsbs	r0, r0, #0
   18be4:	rsc	r1, r1, #0
   18be8:	tst	r3, #-2147483648	; 0x80000000
   18bec:	lsl	r3, r3, #12
   18bf0:	orr	r3, ip, r3, lsr #12
   18bf4:	beq	18c00 <__assert_fail@plt+0x7b04>
   18bf8:	rsbs	r2, r2, #0
   18bfc:	rsc	r3, r3, #0
   18c00:	teq	r4, r5
   18c04:	beq	18d68 <__assert_fail@plt+0x7c6c>
   18c08:	sub	r4, r4, #1
   18c0c:	rsbs	lr, r5, #32
   18c10:	blt	18c2c <__assert_fail@plt+0x7b30>
   18c14:	lsl	ip, r2, lr
   18c18:	adds	r0, r0, r2, lsr r5
   18c1c:	adc	r1, r1, #0
   18c20:	adds	r0, r0, r3, lsl lr
   18c24:	adcs	r1, r1, r3, asr r5
   18c28:	b	18c48 <__assert_fail@plt+0x7b4c>
   18c2c:	sub	r5, r5, #32
   18c30:	add	lr, lr, #32
   18c34:	cmp	r2, #1
   18c38:	lsl	ip, r3, lr
   18c3c:	orrcs	ip, ip, #2
   18c40:	adds	r0, r0, r3, asr r5
   18c44:	adcs	r1, r1, r3, asr #31
   18c48:	and	r5, r1, #-2147483648	; 0x80000000
   18c4c:	bpl	18c5c <__assert_fail@plt+0x7b60>
   18c50:	rsbs	ip, ip, #0
   18c54:	rscs	r0, r0, #0
   18c58:	rsc	r1, r1, #0
   18c5c:	cmp	r1, #1048576	; 0x100000
   18c60:	bcc	18ca0 <__assert_fail@plt+0x7ba4>
   18c64:	cmp	r1, #2097152	; 0x200000
   18c68:	bcc	18c88 <__assert_fail@plt+0x7b8c>
   18c6c:	lsrs	r1, r1, #1
   18c70:	rrxs	r0, r0
   18c74:	rrx	ip, ip
   18c78:	add	r4, r4, #1
   18c7c:	lsl	r2, r4, #21
   18c80:	cmn	r2, #4194304	; 0x400000
   18c84:	bcs	18de0 <__assert_fail@plt+0x7ce4>
   18c88:	cmp	ip, #-2147483648	; 0x80000000
   18c8c:	lsrseq	ip, r0, #1
   18c90:	adcs	r0, r0, #0
   18c94:	adc	r1, r1, r4, lsl #20
   18c98:	orr	r1, r1, r5
   18c9c:	pop	{r4, r5, pc}
   18ca0:	lsls	ip, ip, #1
   18ca4:	adcs	r0, r0, r0
   18ca8:	adc	r1, r1, r1
   18cac:	tst	r1, #1048576	; 0x100000
   18cb0:	sub	r4, r4, #1
   18cb4:	bne	18c88 <__assert_fail@plt+0x7b8c>
   18cb8:	teq	r1, #0
   18cbc:	moveq	r1, r0
   18cc0:	moveq	r0, #0
   18cc4:	clz	r3, r1
   18cc8:	addeq	r3, r3, #32
   18ccc:	sub	r3, r3, #11
   18cd0:	subs	r2, r3, #32
   18cd4:	bge	18cf8 <__assert_fail@plt+0x7bfc>
   18cd8:	adds	r2, r2, #12
   18cdc:	ble	18cf4 <__assert_fail@plt+0x7bf8>
   18ce0:	add	ip, r2, #20
   18ce4:	rsb	r2, r2, #12
   18ce8:	lsl	r0, r1, ip
   18cec:	lsr	r1, r1, r2
   18cf0:	b	18d08 <__assert_fail@plt+0x7c0c>
   18cf4:	add	r2, r2, #20
   18cf8:	rsble	ip, r2, #32
   18cfc:	lsl	r1, r1, r2
   18d00:	orrle	r1, r1, r0, lsr ip
   18d04:	lslle	r0, r0, r2
   18d08:	subs	r4, r4, r3
   18d0c:	addge	r1, r1, r4, lsl #20
   18d10:	orrge	r1, r1, r5
   18d14:	popge	{r4, r5, pc}
   18d18:	mvn	r4, r4
   18d1c:	subs	r4, r4, #31
   18d20:	bge	18d5c <__assert_fail@plt+0x7c60>
   18d24:	adds	r4, r4, #12
   18d28:	bgt	18d44 <__assert_fail@plt+0x7c48>
   18d2c:	add	r4, r4, #20
   18d30:	rsb	r2, r4, #32
   18d34:	lsr	r0, r0, r4
   18d38:	orr	r0, r0, r1, lsl r2
   18d3c:	orr	r1, r5, r1, lsr r4
   18d40:	pop	{r4, r5, pc}
   18d44:	rsb	r4, r4, #12
   18d48:	rsb	r2, r4, #32
   18d4c:	lsr	r0, r0, r2
   18d50:	orr	r0, r0, r1, lsl r4
   18d54:	mov	r1, r5
   18d58:	pop	{r4, r5, pc}
   18d5c:	lsr	r0, r1, r4
   18d60:	mov	r1, r5
   18d64:	pop	{r4, r5, pc}
   18d68:	teq	r4, #0
   18d6c:	eor	r3, r3, #1048576	; 0x100000
   18d70:	eoreq	r1, r1, #1048576	; 0x100000
   18d74:	addeq	r4, r4, #1
   18d78:	subne	r5, r5, #1
   18d7c:	b	18c08 <__assert_fail@plt+0x7b0c>
   18d80:	mvns	ip, r4, asr #21
   18d84:	mvnsne	ip, r5, asr #21
   18d88:	beq	18df0 <__assert_fail@plt+0x7cf4>
   18d8c:	teq	r4, r5
   18d90:	teqeq	r0, r2
   18d94:	beq	18da8 <__assert_fail@plt+0x7cac>
   18d98:	orrs	ip, r4, r0
   18d9c:	moveq	r1, r3
   18da0:	moveq	r0, r2
   18da4:	pop	{r4, r5, pc}
   18da8:	teq	r1, r3
   18dac:	movne	r1, #0
   18db0:	movne	r0, #0
   18db4:	popne	{r4, r5, pc}
   18db8:	lsrs	ip, r4, #21
   18dbc:	bne	18dd0 <__assert_fail@plt+0x7cd4>
   18dc0:	lsls	r0, r0, #1
   18dc4:	adcs	r1, r1, r1
   18dc8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   18dcc:	pop	{r4, r5, pc}
   18dd0:	adds	r4, r4, #4194304	; 0x400000
   18dd4:	addcc	r1, r1, #1048576	; 0x100000
   18dd8:	popcc	{r4, r5, pc}
   18ddc:	and	r5, r1, #-2147483648	; 0x80000000
   18de0:	orr	r1, r5, #2130706432	; 0x7f000000
   18de4:	orr	r1, r1, #15728640	; 0xf00000
   18de8:	mov	r0, #0
   18dec:	pop	{r4, r5, pc}
   18df0:	mvns	ip, r4, asr #21
   18df4:	movne	r1, r3
   18df8:	movne	r0, r2
   18dfc:	mvnseq	ip, r5, asr #21
   18e00:	movne	r3, r1
   18e04:	movne	r2, r0
   18e08:	orrs	r4, r0, r1, lsl #12
   18e0c:	orrseq	r5, r2, r3, lsl #12
   18e10:	teqeq	r1, r3
   18e14:	orrne	r1, r1, #524288	; 0x80000
   18e18:	pop	{r4, r5, pc}
   18e1c:	teq	r0, #0
   18e20:	moveq	r1, #0
   18e24:	bxeq	lr
   18e28:	push	{r4, r5, lr}
   18e2c:	mov	r4, #1024	; 0x400
   18e30:	add	r4, r4, #50	; 0x32
   18e34:	mov	r5, #0
   18e38:	mov	r1, #0
   18e3c:	b	18cb8 <__assert_fail@plt+0x7bbc>
   18e40:	teq	r0, #0
   18e44:	moveq	r1, #0
   18e48:	bxeq	lr
   18e4c:	push	{r4, r5, lr}
   18e50:	mov	r4, #1024	; 0x400
   18e54:	add	r4, r4, #50	; 0x32
   18e58:	ands	r5, r0, #-2147483648	; 0x80000000
   18e5c:	rsbmi	r0, r0, #0
   18e60:	mov	r1, #0
   18e64:	b	18cb8 <__assert_fail@plt+0x7bbc>
   18e68:	lsls	r2, r0, #1
   18e6c:	asr	r1, r2, #3
   18e70:	rrx	r1, r1
   18e74:	lsl	r0, r2, #28
   18e78:	andsne	r3, r2, #-16777216	; 0xff000000
   18e7c:	teqne	r3, #-16777216	; 0xff000000
   18e80:	eorne	r1, r1, #939524096	; 0x38000000
   18e84:	bxne	lr
   18e88:	teq	r2, #0
   18e8c:	teqne	r3, #-16777216	; 0xff000000
   18e90:	bxeq	lr
   18e94:	push	{r4, r5, lr}
   18e98:	mov	r4, #896	; 0x380
   18e9c:	and	r5, r1, #-2147483648	; 0x80000000
   18ea0:	bic	r1, r1, #-2147483648	; 0x80000000
   18ea4:	b	18cb8 <__assert_fail@plt+0x7bbc>
   18ea8:	orrs	r2, r0, r1
   18eac:	bxeq	lr
   18eb0:	push	{r4, r5, lr}
   18eb4:	mov	r5, #0
   18eb8:	b	18ed8 <__assert_fail@plt+0x7ddc>
   18ebc:	orrs	r2, r0, r1
   18ec0:	bxeq	lr
   18ec4:	push	{r4, r5, lr}
   18ec8:	ands	r5, r1, #-2147483648	; 0x80000000
   18ecc:	bpl	18ed8 <__assert_fail@plt+0x7ddc>
   18ed0:	rsbs	r0, r0, #0
   18ed4:	rsc	r1, r1, #0
   18ed8:	mov	r4, #1024	; 0x400
   18edc:	add	r4, r4, #50	; 0x32
   18ee0:	lsrs	ip, r1, #22
   18ee4:	beq	18c5c <__assert_fail@plt+0x7b60>
   18ee8:	mov	r2, #3
   18eec:	lsrs	ip, ip, #3
   18ef0:	addne	r2, r2, #3
   18ef4:	lsrs	ip, ip, #3
   18ef8:	addne	r2, r2, #3
   18efc:	add	r2, r2, ip, lsr #3
   18f00:	rsb	r3, r2, #32
   18f04:	lsl	ip, r0, r3
   18f08:	lsr	r0, r0, r2
   18f0c:	orr	r0, r0, r1, lsl r3
   18f10:	lsr	r1, r1, r2
   18f14:	add	r4, r4, r2
   18f18:	b	18c5c <__assert_fail@plt+0x7b60>
   18f1c:	cmp	r3, #0
   18f20:	cmpeq	r2, #0
   18f24:	bne	18f3c <__assert_fail@plt+0x7e40>
   18f28:	cmp	r1, #0
   18f2c:	cmpeq	r0, #0
   18f30:	mvnne	r1, #0
   18f34:	mvnne	r0, #0
   18f38:	b	18f58 <__assert_fail@plt+0x7e5c>
   18f3c:	sub	sp, sp, #8
   18f40:	push	{sp, lr}
   18f44:	bl	18fe0 <__assert_fail@plt+0x7ee4>
   18f48:	ldr	lr, [sp, #4]
   18f4c:	add	sp, sp, #8
   18f50:	pop	{r2, r3}
   18f54:	bx	lr
   18f58:	push	{r1, lr}
   18f5c:	mov	r0, #8
   18f60:	bl	10e50 <raise@plt>
   18f64:	pop	{r1, pc}
   18f68:	vmov	d7, r0, r1
   18f6c:	vcmpe.f64	d7, #0.0
   18f70:	vmrs	APSR_nzcv, fpscr
   18f74:	bmi	18f7c <__assert_fail@plt+0x7e80>
   18f78:	b	18f98 <__assert_fail@plt+0x7e9c>
   18f7c:	push	{r4, lr}
   18f80:	eor	r1, r1, #-2147483648	; 0x80000000
   18f84:	bl	18f98 <__assert_fail@plt+0x7e9c>
   18f88:	rsbs	r0, r0, #0
   18f8c:	rsc	r1, r1, #0
   18f90:	pop	{r4, pc}
   18f94:	andeq	r0, r0, r0
   18f98:	vmov	d7, r0, r1
   18f9c:	vldr	d6, [pc, #44]	; 18fd0 <__assert_fail@plt+0x7ed4>
   18fa0:	vldr	d5, [pc, #48]	; 18fd8 <__assert_fail@plt+0x7edc>
   18fa4:	mov	r0, #0
   18fa8:	vmul.f64	d6, d7, d6
   18fac:	vcvt.u32.f64	s12, d6
   18fb0:	vcvt.f64.u32	d4, s12
   18fb4:	vmov	r1, s12
   18fb8:	vmls.f64	d7, d4, d5
   18fbc:	vcvt.u32.f64	s14, d7
   18fc0:	vmov	r3, s14
   18fc4:	orr	r0, r0, r3
   18fc8:	bx	lr
   18fcc:	nop			; (mov r0, r0)
   18fd0:	andeq	r0, r0, r0
   18fd4:	ldclcc	0, cr0, [r0]
   18fd8:	andeq	r0, r0, r0
   18fdc:	mvnsmi	r0, r0
   18fe0:	cmp	r1, r3
   18fe4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18fe8:	cmpeq	r0, r2
   18fec:	mov	r4, r0
   18ff0:	mov	r5, r1
   18ff4:	ldr	r9, [sp, #28]
   18ff8:	movcc	r0, #0
   18ffc:	movcc	r1, #0
   19000:	bcc	190f8 <__assert_fail@plt+0x7ffc>
   19004:	cmp	r3, #0
   19008:	clzeq	ip, r2
   1900c:	clzne	ip, r3
   19010:	addeq	ip, ip, #32
   19014:	cmp	r5, #0
   19018:	clzeq	r1, r4
   1901c:	addeq	r1, r1, #32
   19020:	clzne	r1, r5
   19024:	sub	ip, ip, r1
   19028:	sub	lr, ip, #32
   1902c:	lsl	r7, r3, ip
   19030:	rsb	r8, ip, #32
   19034:	orr	r7, r7, r2, lsl lr
   19038:	orr	r7, r7, r2, lsr r8
   1903c:	lsl	r6, r2, ip
   19040:	cmp	r5, r7
   19044:	cmpeq	r4, r6
   19048:	movcc	r0, #0
   1904c:	movcc	r1, #0
   19050:	bcc	1906c <__assert_fail@plt+0x7f70>
   19054:	mov	r3, #1
   19058:	subs	r4, r4, r6
   1905c:	lsl	r1, r3, lr
   19060:	lsl	r0, r3, ip
   19064:	orr	r1, r1, r3, lsr r8
   19068:	sbc	r5, r5, r7
   1906c:	cmp	ip, #0
   19070:	beq	190f8 <__assert_fail@plt+0x7ffc>
   19074:	lsrs	r3, r7, #1
   19078:	rrx	r2, r6
   1907c:	mov	r6, ip
   19080:	b	190a4 <__assert_fail@plt+0x7fa8>
   19084:	subs	r4, r4, r2
   19088:	sbc	r5, r5, r3
   1908c:	adds	r4, r4, r4
   19090:	adc	r5, r5, r5
   19094:	adds	r4, r4, #1
   19098:	adc	r5, r5, #0
   1909c:	subs	r6, r6, #1
   190a0:	beq	190c0 <__assert_fail@plt+0x7fc4>
   190a4:	cmp	r5, r3
   190a8:	cmpeq	r4, r2
   190ac:	bcs	19084 <__assert_fail@plt+0x7f88>
   190b0:	adds	r4, r4, r4
   190b4:	adc	r5, r5, r5
   190b8:	subs	r6, r6, #1
   190bc:	bne	190a4 <__assert_fail@plt+0x7fa8>
   190c0:	lsr	r6, r4, ip
   190c4:	lsr	r7, r5, ip
   190c8:	orr	r6, r6, r5, lsl r8
   190cc:	adds	r2, r0, r4
   190d0:	orr	r6, r6, r5, lsr lr
   190d4:	adc	r3, r1, r5
   190d8:	lsl	r1, r7, ip
   190dc:	orr	r1, r1, r6, lsl lr
   190e0:	lsl	r0, r6, ip
   190e4:	orr	r1, r1, r6, lsr r8
   190e8:	subs	r0, r2, r0
   190ec:	mov	r4, r6
   190f0:	mov	r5, r7
   190f4:	sbc	r1, r3, r1
   190f8:	cmp	r9, #0
   190fc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19100:	strd	r4, [r9]
   19104:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19108:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1910c:	mov	r7, r0
   19110:	ldr	r6, [pc, #72]	; 19160 <__assert_fail@plt+0x8064>
   19114:	ldr	r5, [pc, #72]	; 19164 <__assert_fail@plt+0x8068>
   19118:	add	r6, pc, r6
   1911c:	add	r5, pc, r5
   19120:	sub	r6, r6, r5
   19124:	mov	r8, r1
   19128:	mov	r9, r2
   1912c:	bl	10e18 <calloc@plt-0x20>
   19130:	asrs	r6, r6, #2
   19134:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19138:	mov	r4, #0
   1913c:	add	r4, r4, #1
   19140:	ldr	r3, [r5], #4
   19144:	mov	r2, r9
   19148:	mov	r1, r8
   1914c:	mov	r0, r7
   19150:	blx	r3
   19154:	cmp	r6, r4
   19158:	bne	1913c <__assert_fail@plt+0x8040>
   1915c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19160:	strdeq	r2, [r1], -r0
   19164:	andeq	r2, r1, r8, ror #27
   19168:	bx	lr
   1916c:	ldr	r3, [pc, #12]	; 19180 <__assert_fail@plt+0x8084>
   19170:	mov	r1, #0
   19174:	add	r3, pc, r3
   19178:	ldr	r2, [r3]
   1917c:	b	1100c <__cxa_atexit@plt>
   19180:	andeq	r2, r1, r8, lsl #31

Disassembly of section .fini:

00019184 <.fini>:
   19184:	push	{r3, lr}
   19188:	pop	{r3, pc}
