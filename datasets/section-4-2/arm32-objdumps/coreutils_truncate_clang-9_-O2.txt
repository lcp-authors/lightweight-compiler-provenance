
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010d70 <.init>:
   10d70:	push	{r3, lr}
   10d74:	bl	11024 <__assert_fail@plt+0x48>
   10d78:	pop	{r3, pc}

Disassembly of section .plt:

00010d7c <calloc@plt-0x14>:
   10d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d80:	ldr	lr, [pc, #4]	; 10d8c <calloc@plt-0x4>
   10d84:	add	lr, pc, lr
   10d88:	ldr	pc, [lr, #8]!
   10d8c:	andeq	r7, r1, r4, ror r2

00010d90 <calloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #628]!	; 0x274

00010d9c <fputs_unlocked@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #620]!	; 0x26c

00010da8 <raise@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #612]!	; 0x264

00010db4 <strcmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #604]!	; 0x25c

00010dc0 <fflush@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #596]!	; 0x254

00010dcc <free@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #588]!	; 0x24c

00010dd8 <_exit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #580]!	; 0x244

00010de4 <memcpy@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #572]!	; 0x23c

00010df0 <mbsinit@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #564]!	; 0x234

00010dfc <ftruncate64@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #556]!	; 0x22c

00010e08 <dcgettext@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #548]!	; 0x224

00010e14 <realloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #540]!	; 0x21c

00010e20 <textdomain@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #532]!	; 0x214

00010e2c <iswprint@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #524]!	; 0x20c

00010e38 <__fxstat64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #516]!	; 0x204

00010e44 <fwrite@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e50 <lseek64@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #500]!	; 0x1f4

00010e5c <__ctype_get_mb_cur_max@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #492]!	; 0x1ec

00010e68 <__fpending@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #484]!	; 0x1e4

00010e74 <mbrtowc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #476]!	; 0x1dc

00010e80 <error@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #468]!	; 0x1d4

00010e8c <open64@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #460]!	; 0x1cc

00010e98 <malloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea4 <__libc_start_main@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #444]!	; 0x1bc

00010eb0 <__freading@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #436]!	; 0x1b4

00010ebc <__gmon_start__@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec8 <getopt_long@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed4 <__ctype_b_loc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #412]!	; 0x19c

00010ee0 <exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #404]!	; 0x194

00010eec <bcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #396]!	; 0x18c

00010ef8 <strlen@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #388]!	; 0x184

00010f04 <strchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #380]!	; 0x17c

00010f10 <__errno_location@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #372]!	; 0x174

00010f1c <__cxa_atexit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #364]!	; 0x16c

00010f28 <memset@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #356]!	; 0x164

00010f34 <__printf_chk@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #348]!	; 0x15c

00010f40 <fileno@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #340]!	; 0x154

00010f4c <__fprintf_chk@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #332]!	; 0x14c

00010f58 <fclose@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #324]!	; 0x144

00010f64 <fseeko64@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #316]!	; 0x13c

00010f70 <setlocale@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #308]!	; 0x134

00010f7c <strrchr@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #300]!	; 0x12c

00010f88 <nl_langinfo@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #292]!	; 0x124

00010f94 <__strtoll_internal@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #284]!	; 0x11c

00010fa0 <bindtextdomain@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #276]!	; 0x114

00010fac <__xstat64@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #268]!	; 0x10c

00010fb8 <strncmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #260]!	; 0x104

00010fc4 <abort@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #252]!	; 0xfc

00010fd0 <close@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #244]!	; 0xf4

00010fdc <__assert_fail@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #236]!	; 0xec

Disassembly of section .text:

00010fe8 <.text>:
   10fe8:	mov	fp, #0
   10fec:	mov	lr, #0
   10ff0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff4:	mov	r2, sp
   10ff8:	push	{r2}		; (str r2, [sp, #-4]!)
   10ffc:	push	{r0}		; (str r0, [sp, #-4]!)
   11000:	ldr	ip, [pc, #16]	; 11018 <__assert_fail@plt+0x3c>
   11004:	push	{ip}		; (str ip, [sp, #-4]!)
   11008:	ldr	r0, [pc, #12]	; 1101c <__assert_fail@plt+0x40>
   1100c:	ldr	r3, [pc, #12]	; 11020 <__assert_fail@plt+0x44>
   11010:	bl	10ea4 <__libc_start_main@plt>
   11014:	bl	10fc4 <abort@plt>
   11018:			; <UNDEFINED> instruction: 0x00016cbc
   1101c:	andeq	r1, r1, r4, asr #7
   11020:	andeq	r6, r1, ip, asr ip
   11024:	ldr	r3, [pc, #20]	; 11040 <__assert_fail@plt+0x64>
   11028:	ldr	r2, [pc, #20]	; 11044 <__assert_fail@plt+0x68>
   1102c:	add	r3, pc, r3
   11030:	ldr	r2, [r3, r2]
   11034:	cmp	r2, #0
   11038:	bxeq	lr
   1103c:	b	10ebc <__gmon_start__@plt>
   11040:	andeq	r6, r1, ip, asr #31
   11044:	ldrdeq	r0, [r0], -r4
   11048:	ldr	r0, [pc, #24]	; 11068 <__assert_fail@plt+0x8c>
   1104c:	ldr	r3, [pc, #24]	; 1106c <__assert_fail@plt+0x90>
   11050:	cmp	r3, r0
   11054:	bxeq	lr
   11058:	ldr	r3, [pc, #16]	; 11070 <__assert_fail@plt+0x94>
   1105c:	cmp	r3, #0
   11060:	bxeq	lr
   11064:	bx	r3
   11068:	andeq	r8, r2, r8, lsr #2
   1106c:	andeq	r8, r2, r8, lsr #2
   11070:	andeq	r0, r0, r0
   11074:	ldr	r0, [pc, #36]	; 110a0 <__assert_fail@plt+0xc4>
   11078:	ldr	r1, [pc, #36]	; 110a4 <__assert_fail@plt+0xc8>
   1107c:	sub	r1, r1, r0
   11080:	asr	r1, r1, #2
   11084:	add	r1, r1, r1, lsr #31
   11088:	asrs	r1, r1, #1
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <__assert_fail@plt+0xcc>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r8, r2, r8, lsr #2
   110a4:	andeq	r8, r2, r8, lsr #2
   110a8:	andeq	r0, r0, r0
   110ac:	push	{r4, lr}
   110b0:	ldr	r4, [pc, #24]	; 110d0 <__assert_fail@plt+0xf4>
   110b4:	ldrb	r3, [r4]
   110b8:	cmp	r3, #0
   110bc:	popne	{r4, pc}
   110c0:	bl	11048 <__assert_fail@plt+0x6c>
   110c4:	mov	r3, #1
   110c8:	strb	r3, [r4]
   110cc:	pop	{r4, pc}
   110d0:	andeq	r8, r2, r4, asr #2
   110d4:	b	11074 <__assert_fail@plt+0x98>
   110d8:	push	{fp, lr}
   110dc:	mov	fp, sp
   110e0:	sub	sp, sp, #56	; 0x38
   110e4:	mov	r4, r0
   110e8:	cmp	r0, #0
   110ec:	bne	11380 <__assert_fail@plt+0x3a4>
   110f0:	movw	r1, #27915	; 0x6d0b
   110f4:	mov	r0, #0
   110f8:	mov	r2, #5
   110fc:	movt	r1, #1
   11100:	bl	10e08 <dcgettext@plt>
   11104:	mov	r1, r0
   11108:	movw	r0, #33112	; 0x8158
   1110c:	movt	r0, #2
   11110:	ldr	r2, [r0]
   11114:	mov	r0, #1
   11118:	bl	10f34 <__printf_chk@plt>
   1111c:	movw	r1, #27944	; 0x6d28
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10e08 <dcgettext@plt>
   11130:	movw	r7, #33084	; 0x813c
   11134:	movt	r7, #2
   11138:	ldr	r1, [r7]
   1113c:	bl	10d9c <fputs_unlocked@plt>
   11140:	movw	r1, #29143	; 0x71d7
   11144:	mov	r0, #0
   11148:	mov	r2, #5
   1114c:	movt	r1, #1
   11150:	bl	10e08 <dcgettext@plt>
   11154:	ldr	r1, [r7]
   11158:	bl	10d9c <fputs_unlocked@plt>
   1115c:	movw	r1, #28219	; 0x6e3b
   11160:	mov	r0, #0
   11164:	mov	r2, #5
   11168:	movt	r1, #1
   1116c:	bl	10e08 <dcgettext@plt>
   11170:	ldr	r1, [r7]
   11174:	bl	10d9c <fputs_unlocked@plt>
   11178:	movw	r1, #28269	; 0x6e6d
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e08 <dcgettext@plt>
   1118c:	ldr	r1, [r7]
   11190:	bl	10d9c <fputs_unlocked@plt>
   11194:	movw	r1, #28346	; 0x6eba
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e08 <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10d9c <fputs_unlocked@plt>
   111b0:	movw	r1, #28458	; 0x6f2a
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e08 <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10d9c <fputs_unlocked@plt>
   111cc:	movw	r1, #28503	; 0x6f57
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10e08 <dcgettext@plt>
   111e0:	ldr	r1, [r7]
   111e4:	bl	10d9c <fputs_unlocked@plt>
   111e8:	movw	r1, #29218	; 0x7222
   111ec:	mov	r0, #0
   111f0:	mov	r2, #5
   111f4:	movt	r1, #1
   111f8:	bl	10e08 <dcgettext@plt>
   111fc:	ldr	r1, [r7]
   11200:	bl	10d9c <fputs_unlocked@plt>
   11204:	movw	r1, #28557	; 0x6f8d
   11208:	mov	r0, #0
   1120c:	mov	r2, #5
   11210:	movt	r1, #1
   11214:	bl	10e08 <dcgettext@plt>
   11218:	ldr	r1, [r7]
   1121c:	bl	10d9c <fputs_unlocked@plt>
   11220:	movw	r0, #30056	; 0x7568
   11224:	mov	r2, #48	; 0x30
   11228:	mov	r6, sp
   1122c:	movw	r5, #28748	; 0x704c
   11230:	movt	r0, #1
   11234:	movt	r5, #1
   11238:	add	r1, r0, #32
   1123c:	add	r3, r0, #16
   11240:	vld1.64	{d18-d19}, [r0], r2
   11244:	vld1.64	{d16-d17}, [r1]
   11248:	vld1.64	{d20-d21}, [r3]
   1124c:	vldr	d22, [r0]
   11250:	add	r1, r6, #32
   11254:	add	r0, r6, #16
   11258:	vst1.64	{d16-d17}, [r1]
   1125c:	movw	r1, #29430	; 0x72f6
   11260:	vst1.64	{d20-d21}, [r0]
   11264:	mov	r0, r6
   11268:	movt	r1, #1
   1126c:	vst1.64	{d18-d19}, [r0], r2
   11270:	vstr	d22, [r0]
   11274:	mov	r0, r5
   11278:	bl	10db4 <strcmp@plt>
   1127c:	cmp	r0, #0
   11280:	ldrne	r1, [r6, #8]!
   11284:	cmpne	r1, #0
   11288:	bne	11274 <__assert_fail@plt+0x298>
   1128c:	movw	r1, #29525	; 0x7355
   11290:	ldr	r6, [r6, #4]
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10e08 <dcgettext@plt>
   112a4:	movw	r2, #28872	; 0x70c8
   112a8:	movw	r3, #29548	; 0x736c
   112ac:	mov	r1, r0
   112b0:	mov	r0, #1
   112b4:	movt	r2, #1
   112b8:	movt	r3, #1
   112bc:	bl	10f34 <__printf_chk@plt>
   112c0:	cmp	r6, #0
   112c4:	mov	r0, #5
   112c8:	mov	r1, #0
   112cc:	moveq	r6, r5
   112d0:	bl	10f70 <setlocale@plt>
   112d4:	cmp	r0, #0
   112d8:	beq	11310 <__assert_fail@plt+0x334>
   112dc:	movw	r1, #29588	; 0x7394
   112e0:	mov	r2, #3
   112e4:	movt	r1, #1
   112e8:	bl	10fb8 <strncmp@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	11310 <__assert_fail@plt+0x334>
   112f4:	movw	r1, #29592	; 0x7398
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10e08 <dcgettext@plt>
   11308:	ldr	r1, [r7]
   1130c:	bl	10d9c <fputs_unlocked@plt>
   11310:	movw	r1, #29663	; 0x73df
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	movt	r1, #1
   11320:	bl	10e08 <dcgettext@plt>
   11324:	movw	r2, #29548	; 0x736c
   11328:	mov	r1, r0
   1132c:	mov	r0, #1
   11330:	mov	r3, r5
   11334:	movt	r2, #1
   11338:	bl	10f34 <__printf_chk@plt>
   1133c:	movw	r1, #29690	; 0x73fa
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10e08 <dcgettext@plt>
   11350:	mov	r1, r0
   11354:	movw	r0, #29458	; 0x7312
   11358:	movw	r3, #29740	; 0x742c
   1135c:	cmp	r6, r5
   11360:	mov	r2, r6
   11364:	movt	r0, #1
   11368:	movt	r3, #1
   1136c:	moveq	r3, r0
   11370:	mov	r0, #1
   11374:	bl	10f34 <__printf_chk@plt>
   11378:	mov	r0, r4
   1137c:	bl	10ee0 <exit@plt>
   11380:	movw	r0, #33080	; 0x8138
   11384:	movw	r1, #27876	; 0x6ce4
   11388:	mov	r2, #5
   1138c:	movt	r0, #2
   11390:	movt	r1, #1
   11394:	ldr	r5, [r0]
   11398:	mov	r0, #0
   1139c:	bl	10e08 <dcgettext@plt>
   113a0:	mov	r2, r0
   113a4:	movw	r0, #33112	; 0x8158
   113a8:	mov	r1, #1
   113ac:	movt	r0, #2
   113b0:	ldr	r3, [r0]
   113b4:	mov	r0, r5
   113b8:	bl	10f4c <__fprintf_chk@plt>
   113bc:	mov	r0, r4
   113c0:	bl	10ee0 <exit@plt>
   113c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c8:	add	fp, sp, #28
   113cc:	sub	sp, sp, #172	; 0xac
   113d0:	mov	r5, r0
   113d4:	ldr	r0, [r1]
   113d8:	mov	sl, r1
   113dc:	bl	1210c <__assert_fail@plt+0x1130>
   113e0:	movw	r1, #29740	; 0x742c
   113e4:	mov	r0, #6
   113e8:	movt	r1, #1
   113ec:	bl	10f70 <setlocale@plt>
   113f0:	movw	r4, #28876	; 0x70cc
   113f4:	movw	r1, #28757	; 0x7055
   113f8:	movt	r4, #1
   113fc:	movt	r1, #1
   11400:	mov	r0, r4
   11404:	bl	10fa0 <bindtextdomain@plt>
   11408:	mov	r0, r4
   1140c:	bl	10e20 <textdomain@plt>
   11410:	movw	r0, #8228	; 0x2024
   11414:	movt	r0, #1
   11418:	bl	16cc0 <__assert_fail@plt+0x5ce4>
   1141c:	movw	r7, #29944	; 0x74f8
   11420:	movw	r9, #33088	; 0x8140
   11424:	mov	r0, #0
   11428:	mov	r8, #0
   1142c:	mov	r6, #0
   11430:	movt	r7, #1
   11434:	movt	r9, #2
   11438:	str	r0, [sp, #48]	; 0x30
   1143c:	movw	r4, #28781	; 0x706d
   11440:	movt	r4, #1
   11444:	mov	r0, r5
   11448:	mov	r1, sl
   1144c:	mov	r2, r4
   11450:	mov	r3, r7
   11454:	str	r8, [sp]
   11458:	bl	10ec8 <getopt_long@plt>
   1145c:	cmp	r0, #98	; 0x62
   11460:	ble	116d0 <__assert_fail@plt+0x6f4>
   11464:	sub	r0, r0, #99	; 0x63
   11468:	cmp	r0, #16
   1146c:	bhi	11ec0 <__assert_fail@plt+0xee4>
   11470:	add	r1, pc, #0
   11474:	ldr	pc, [r1, r0, lsl #2]
   11478:			; <UNDEFINED> instruction: 0x000114bc
   1147c:	andeq	r1, r1, r0, asr #29
   11480:	andeq	r1, r1, r0, asr #29
   11484:	andeq	r1, r1, r0, asr #29
   11488:	andeq	r1, r1, r0, asr #29
   1148c:	andeq	r1, r1, r0, asr #29
   11490:	andeq	r1, r1, r0, asr #29
   11494:	andeq	r1, r1, r0, asr #29
   11498:	andeq	r1, r1, r0, asr #29
   1149c:	andeq	r1, r1, r0, asr #29
   114a0:	andeq	r1, r1, r0, asr #29
   114a4:	andeq	r1, r1, r0, asr #29
   114a8:	andeq	r1, r1, r8, asr #9
   114ac:	andeq	r1, r1, r0, asr #29
   114b0:	andeq	r1, r1, r0, asr #29
   114b4:	ldrdeq	r1, [r1], -ip
   114b8:	strdeq	r1, [r1], -r0
   114bc:	movw	r0, #33096	; 0x8148
   114c0:	movt	r0, #2
   114c4:	b	114d0 <__assert_fail@plt+0x4f4>
   114c8:	movw	r0, #33097	; 0x8149
   114cc:	movt	r0, #2
   114d0:	mov	r1, #1
   114d4:	strb	r1, [r0]
   114d8:	b	11444 <__assert_fail@plt+0x468>
   114dc:	ldr	r0, [r9]
   114e0:	movw	r1, #33100	; 0x814c
   114e4:	movt	r1, #2
   114e8:	str	r0, [r1]
   114ec:	b	11444 <__assert_fail@plt+0x468>
   114f0:	bl	10ed4 <__ctype_b_loc@plt>
   114f4:	ldr	r6, [r9]
   114f8:	ldr	r2, [r0]
   114fc:	ldrb	r1, [r6]
   11500:	add	r2, r2, r1, lsl #1
   11504:	ldrb	r2, [r2, #1]
   11508:	tst	r2, #32
   1150c:	beq	11534 <__assert_fail@plt+0x558>
   11510:	add	r2, r6, #1
   11514:	str	r2, [r9]
   11518:	ldrb	r1, [r2], #1
   1151c:	ldr	r3, [r0]
   11520:	add	r3, r3, r1, lsl #1
   11524:	ldrb	r3, [r3, #1]
   11528:	tst	r3, #32
   1152c:	bne	11514 <__assert_fail@plt+0x538>
   11530:	sub	r6, r2, #1
   11534:	sub	r2, r1, #37	; 0x25
   11538:	cmp	r2, #25
   1153c:	bhi	115d4 <__assert_fail@plt+0x5f8>
   11540:	add	r3, pc, #4
   11544:	mov	r1, #3
   11548:	ldr	pc, [r3, r2, lsl #2]
   1154c:			; <UNDEFINED> instruction: 0x000115b4
   11550:	ldrdeq	r1, [r1], -r4
   11554:	ldrdeq	r1, [r1], -r4
   11558:	ldrdeq	r1, [r1], -r4
   1155c:	ldrdeq	r1, [r1], -r4
   11560:	ldrdeq	r1, [r1], -r4
   11564:	ldrdeq	r1, [r1], -r4
   11568:	ldrdeq	r1, [r1], -r4
   1156c:	ldrdeq	r1, [r1], -r4
   11570:	ldrdeq	r1, [r1], -r4
   11574:			; <UNDEFINED> instruction: 0x000115bc
   11578:	ldrdeq	r1, [r1], -r4
   1157c:	ldrdeq	r1, [r1], -r4
   11580:	ldrdeq	r1, [r1], -r4
   11584:	ldrdeq	r1, [r1], -r4
   11588:	ldrdeq	r1, [r1], -r4
   1158c:	ldrdeq	r1, [r1], -r4
   11590:	ldrdeq	r1, [r1], -r4
   11594:	ldrdeq	r1, [r1], -r4
   11598:	ldrdeq	r1, [r1], -r4
   1159c:	ldrdeq	r1, [r1], -r4
   115a0:	ldrdeq	r1, [r1], -r4
   115a4:	ldrdeq	r1, [r1], -r4
   115a8:	andeq	r1, r1, r8, asr #11
   115ac:	ldrdeq	r1, [r1], -r4
   115b0:	andeq	r1, r1, r4, asr #11
   115b4:	mov	r1, #5
   115b8:	b	115c8 <__assert_fail@plt+0x5ec>
   115bc:	mov	r1, #4
   115c0:	b	115c8 <__assert_fail@plt+0x5ec>
   115c4:	mov	r1, #2
   115c8:	add	r6, r6, #1
   115cc:	str	r1, [sp, #48]	; 0x30
   115d0:	str	r6, [r9]
   115d4:	ldrb	r1, [r6]
   115d8:	ldr	r2, [r0]
   115dc:	add	r2, r2, r1, lsl #1
   115e0:	ldrb	r2, [r2, #1]
   115e4:	tst	r2, #32
   115e8:	beq	11610 <__assert_fail@plt+0x634>
   115ec:	add	r2, r6, #1
   115f0:	str	r2, [r9]
   115f4:	ldrb	r1, [r2], #1
   115f8:	ldr	r3, [r0]
   115fc:	add	r3, r3, r1, lsl #1
   11600:	ldrb	r3, [r3, #1]
   11604:	tst	r3, #32
   11608:	bne	115f0 <__assert_fail@plt+0x614>
   1160c:	sub	r6, r2, #1
   11610:	cmp	r1, #45	; 0x2d
   11614:	cmpne	r1, #43	; 0x2b
   11618:	bne	11630 <__assert_fail@plt+0x654>
   1161c:	ldr	r0, [sp, #48]	; 0x30
   11620:	mov	r4, #1
   11624:	cmp	r0, #0
   11628:	beq	11634 <__assert_fail@plt+0x658>
   1162c:	b	11ec8 <__assert_fail@plt+0xeec>
   11630:	ldr	r4, [sp, #48]	; 0x30
   11634:	movw	r1, #28840	; 0x70a8
   11638:	mov	r0, #0
   1163c:	mov	r2, #5
   11640:	movt	r1, #1
   11644:	bl	10e08 <dcgettext@plt>
   11648:	mvn	r1, #0
   1164c:	str	r0, [sp, #12]
   11650:	mov	r0, r6
   11654:	mov	r2, #0
   11658:	mov	r3, #-2147483648	; 0x80000000
   1165c:	str	r8, [sp, #16]
   11660:	str	r1, [sp]
   11664:	mvn	r1, #-2147483648	; 0x80000000
   11668:	str	r1, [sp, #4]
   1166c:	movw	r1, #28826	; 0x709a
   11670:	movt	r1, #1
   11674:	str	r1, [sp, #8]
   11678:	bl	14bec <__assert_fail@plt+0x3c10>
   1167c:	str	r0, [sp, #52]	; 0x34
   11680:	orr	r0, r4, #1
   11684:	mov	r6, #1
   11688:	str	r1, [sp, #40]	; 0x28
   1168c:	str	r4, [sp, #48]	; 0x30
   11690:	cmp	r0, #5
   11694:	bne	1143c <__assert_fail@plt+0x460>
   11698:	ldr	r0, [sp, #52]	; 0x34
   1169c:	ldr	r1, [sp, #40]	; 0x28
   116a0:	str	r4, [sp, #48]	; 0x30
   116a4:	orrs	r0, r0, r1
   116a8:	bne	1143c <__assert_fail@plt+0x460>
   116ac:	movw	r1, #28855	; 0x70b7
   116b0:	mov	r0, #0
   116b4:	mov	r2, #5
   116b8:	movt	r1, #1
   116bc:	bl	10e08 <dcgettext@plt>
   116c0:	mov	r2, r0
   116c4:	mov	r0, #1
   116c8:	mov	r1, #0
   116cc:	bl	10e80 <error@plt>
   116d0:	cmn	r0, #1
   116d4:	bne	11e60 <__assert_fail@plt+0xe84>
   116d8:	movw	r0, #33100	; 0x814c
   116dc:	movw	r8, #33097	; 0x8149
   116e0:	movt	r0, #2
   116e4:	movt	r8, #2
   116e8:	ldr	r1, [r0]
   116ec:	cmp	r1, #0
   116f0:	mov	r0, r1
   116f4:	movwne	r0, #1
   116f8:	orr	r0, r6, r0
   116fc:	tst	r0, #1
   11700:	beq	11ed4 <__assert_fail@plt+0xef8>
   11704:	movw	r0, #33072	; 0x8130
   11708:	cmp	r1, #0
   1170c:	movt	r0, #2
   11710:	ldr	r7, [r0]
   11714:	beq	1172c <__assert_fail@plt+0x750>
   11718:	ldr	r0, [sp, #48]	; 0x30
   1171c:	cmp	r0, #0
   11720:	eoreq	r0, r6, #1
   11724:	tsteq	r0, #1
   11728:	beq	11f44 <__assert_fail@plt+0xf68>
   1172c:	ldrb	r0, [r8]
   11730:	mvn	r0, r0
   11734:	orr	r0, r6, r0
   11738:	tst	r0, #1
   1173c:	beq	11ee0 <__assert_fail@plt+0xf04>
   11740:	cmp	r7, r5
   11744:	bge	11f18 <__assert_fail@plt+0xf3c>
   11748:	cmp	r1, #0
   1174c:	beq	11790 <__assert_fail@plt+0x7b4>
   11750:	add	r2, sp, #64	; 0x40
   11754:	mov	r0, #3
   11758:	bl	10fac <__xstat64@plt>
   1175c:	cmp	r0, #0
   11760:	bne	11fa0 <__assert_fail@plt+0xfc4>
   11764:	ldr	r0, [sp, #80]	; 0x50
   11768:	and	r0, r0, #53248	; 0xd000
   1176c:	orr	r0, r0, #8192	; 0x2000
   11770:	cmp	r0, #40960	; 0xa000
   11774:	bne	117a4 <__assert_fail@plt+0x7c8>
   11778:	ldr	r0, [sp, #116]	; 0x74
   1177c:	cmn	r0, #1
   11780:	ble	11fbc <__assert_fail@plt+0xfe0>
   11784:	ldr	r4, [sp, #112]	; 0x70
   11788:	mov	r2, r0
   1178c:	b	1181c <__assert_fail@plt+0x840>
   11790:	ldr	r6, [sp, #40]	; 0x28
   11794:	mvn	r0, #0
   11798:	mvn	r4, #0
   1179c:	str	r0, [sp, #32]
   117a0:	b	11844 <__assert_fail@plt+0x868>
   117a4:	movw	r0, #33100	; 0x814c
   117a8:	mov	r1, #0
   117ac:	movt	r0, #2
   117b0:	ldr	r0, [r0]
   117b4:	bl	10e8c <open64@plt>
   117b8:	cmp	r0, #0
   117bc:	bmi	11fbc <__assert_fail@plt+0xfe0>
   117c0:	mov	r4, r0
   117c4:	mov	r0, #2
   117c8:	mov	r2, #0
   117cc:	mov	r3, #0
   117d0:	str	r0, [sp]
   117d4:	mov	r0, r4
   117d8:	bl	10e50 <lseek64@plt>
   117dc:	mov	r8, r0
   117e0:	mov	r5, r1
   117e4:	bl	10f10 <__errno_location@plt>
   117e8:	mov	r9, r0
   117ec:	ldr	r0, [r0]
   117f0:	str	r0, [sp, #60]	; 0x3c
   117f4:	mov	r0, r4
   117f8:	mov	r4, r8
   117fc:	bl	10fd0 <close@plt>
   11800:	mvn	r1, #0
   11804:	subs	r0, r1, r8
   11808:	sbcs	r0, r1, r5
   1180c:	bge	11fb4 <__assert_fail@plt+0xfd8>
   11810:	movw	r8, #33097	; 0x8149
   11814:	mov	r2, r5
   11818:	movt	r8, #2
   1181c:	ands	r0, r6, #1
   11820:	ldr	r0, [sp, #52]	; 0x34
   11824:	ldr	r6, [sp, #40]	; 0x28
   11828:	moveq	r0, r4
   1182c:	moveq	r6, r2
   11830:	str	r0, [sp, #52]	; 0x34
   11834:	mvn	r0, #0
   11838:	moveq	r2, r0
   1183c:	moveq	r4, r0
   11840:	str	r2, [sp, #32]
   11844:	movw	r0, #33096	; 0x8148
   11848:	ldr	r9, [sl, r7, lsl #2]
   1184c:	movw	r1, #2113	; 0x841
   11850:	movt	r0, #2
   11854:	ldrb	r0, [r0]
   11858:	cmp	r0, #0
   1185c:	movwne	r1, #2049	; 0x801
   11860:	cmp	r9, #0
   11864:	str	r1, [sp, #56]	; 0x38
   11868:	beq	11e50 <__assert_fail@plt+0xe74>
   1186c:	ldr	r0, [sp, #32]
   11870:	ldr	r1, [sp, #48]	; 0x30
   11874:	mov	r5, #0
   11878:	str	r4, [sp, #28]
   1187c:	str	r6, [sp, #40]	; 0x28
   11880:	cmp	r0, #0
   11884:	mov	r0, #0
   11888:	movwmi	r0, #1
   1188c:	cmp	r1, #0
   11890:	movwne	r1, #1
   11894:	and	r0, r1, r0
   11898:	str	r0, [sp, #36]	; 0x24
   1189c:	add	r0, sl, r7, lsl #2
   118a0:	add	sl, r0, #4
   118a4:	add	r0, sp, #64	; 0x40
   118a8:	add	r0, r0, #48	; 0x30
   118ac:	str	r0, [sp, #24]
   118b0:	b	11900 <__assert_fail@plt+0x924>
   118b4:	movw	r1, #29097	; 0x71a9
   118b8:	ldr	r4, [r0]
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	10e08 <dcgettext@plt>
   118cc:	mov	r5, r0
   118d0:	mov	r0, #4
   118d4:	mov	r1, r9
   118d8:	bl	13838 <__assert_fail@plt+0x285c>
   118dc:	mov	r3, r0
   118e0:	mov	r0, #0
   118e4:	mov	r1, r4
   118e8:	mov	r2, r5
   118ec:	bl	10e80 <error@plt>
   118f0:	mov	r5, #1
   118f4:	ldr	r9, [sl], #4
   118f8:	cmp	r9, #0
   118fc:	beq	11e54 <__assert_fail@plt+0xe78>
   11900:	ldr	r1, [sp, #56]	; 0x38
   11904:	mov	r0, r9
   11908:	movw	r2, #438	; 0x1b6
   1190c:	bl	10e8c <open64@plt>
   11910:	cmn	r0, #1
   11914:	ble	11998 <__assert_fail@plt+0x9bc>
   11918:	mov	r3, r0
   1191c:	ldrb	r0, [r8]
   11920:	ldr	r1, [sp, #36]	; 0x24
   11924:	ldr	r4, [sp, #52]	; 0x34
   11928:	str	r5, [sp, #44]	; 0x2c
   1192c:	mov	r5, r6
   11930:	str	r3, [sp, #60]	; 0x3c
   11934:	orr	r0, r0, r1
   11938:	tst	r0, #1
   1193c:	beq	11aa8 <__assert_fail@plt+0xacc>
   11940:	mov	r0, #3
   11944:	mov	r1, r3
   11948:	add	r2, sp, #64	; 0x40
   1194c:	bl	10e38 <__fxstat64@plt>
   11950:	cmp	r0, #0
   11954:	beq	119c0 <__assert_fail@plt+0x9e4>
   11958:	bl	10f10 <__errno_location@plt>
   1195c:	movw	r1, #29764	; 0x7444
   11960:	ldr	r4, [r0]
   11964:	mov	r0, #0
   11968:	mov	r2, #5
   1196c:	movt	r1, #1
   11970:	bl	10e08 <dcgettext@plt>
   11974:	mov	r5, r0
   11978:	mov	r0, #4
   1197c:	mov	r1, r9
   11980:	bl	13838 <__assert_fail@plt+0x285c>
   11984:	mov	r3, r0
   11988:	mov	r0, #0
   1198c:	mov	r1, r4
   11990:	mov	r2, r5
   11994:	b	11cb8 <__assert_fail@plt+0xcdc>
   11998:	movw	r0, #33096	; 0x8148
   1199c:	movt	r0, #2
   119a0:	ldrb	r4, [r0]
   119a4:	bl	10f10 <__errno_location@plt>
   119a8:	cmp	r4, #1
   119ac:	bne	118b4 <__assert_fail@plt+0x8d8>
   119b0:	ldr	r1, [r0]
   119b4:	cmp	r1, #2
   119b8:	bne	118b4 <__assert_fail@plt+0x8d8>
   119bc:	b	118f4 <__assert_fail@plt+0x918>
   119c0:	ldrb	r0, [r8]
   119c4:	ldr	r4, [sp, #52]	; 0x34
   119c8:	ldr	r3, [sp, #60]	; 0x3c
   119cc:	mov	r5, r6
   119d0:	cmp	r0, #1
   119d4:	bne	11aa8 <__assert_fail@plt+0xacc>
   119d8:	ldr	r0, [sp, #120]	; 0x78
   119dc:	mov	r5, #512	; 0x200
   119e0:	cmp	r0, #536870913	; 0x20000001
   119e4:	movcc	r5, r0
   119e8:	cmp	r0, #0
   119ec:	mov	r0, #512	; 0x200
   119f0:	movle	r5, r0
   119f4:	cmn	r5, #1
   119f8:	ble	11a1c <__assert_fail@plt+0xa40>
   119fc:	cmp	r5, #0
   11a00:	beq	11a94 <__assert_fail@plt+0xab8>
   11a04:	cmn	r6, #1
   11a08:	ble	11a58 <__assert_fail@plt+0xa7c>
   11a0c:	asr	r3, r5, #31
   11a10:	mvn	r0, #0
   11a14:	mvn	r1, #-2147483648	; 0x80000000
   11a18:	b	11a38 <__assert_fail@plt+0xa5c>
   11a1c:	cmn	r6, #1
   11a20:	ble	11de0 <__assert_fail@plt+0xe04>
   11a24:	cmn	r5, #1
   11a28:	beq	11a94 <__assert_fail@plt+0xab8>
   11a2c:	asr	r3, r5, #31
   11a30:	mov	r0, #0
   11a34:	mov	r1, #-2147483648	; 0x80000000
   11a38:	mov	r2, r5
   11a3c:	bl	16a14 <__assert_fail@plt+0x5a38>
   11a40:	ldr	r2, [sp, #52]	; 0x34
   11a44:	ldr	r3, [sp, #60]	; 0x3c
   11a48:	subs	r0, r0, r2
   11a4c:	sbcs	r0, r1, r6
   11a50:	bge	11a94 <__assert_fail@plt+0xab8>
   11a54:	b	11e08 <__assert_fail@plt+0xe2c>
   11a58:	ldr	r0, [sp, #52]	; 0x34
   11a5c:	mvn	r1, #0
   11a60:	eor	r0, r0, r1
   11a64:	eor	r1, r6, r1
   11a68:	orrs	r0, r0, r1
   11a6c:	beq	11a94 <__assert_fail@plt+0xab8>
   11a70:	ldr	r2, [sp, #52]	; 0x34
   11a74:	mov	r0, #0
   11a78:	mov	r1, #-2147483648	; 0x80000000
   11a7c:	mov	r3, r6
   11a80:	bl	16a14 <__assert_fail@plt+0x5a38>
   11a84:	ldr	r3, [sp, #60]	; 0x3c
   11a88:	subs	r0, r0, r5
   11a8c:	sbcs	r0, r1, r5, asr #31
   11a90:	blt	11e08 <__assert_fail@plt+0xe2c>
   11a94:	ldr	r2, [sp, #52]	; 0x34
   11a98:	asr	r1, r5, #31
   11a9c:	umull	r4, r0, r2, r5
   11aa0:	mla	r0, r2, r1, r0
   11aa4:	mla	r5, r6, r5, r0
   11aa8:	ldr	r0, [sp, #48]	; 0x30
   11aac:	cmp	r0, #0
   11ab0:	beq	11c40 <__assert_fail@plt+0xc64>
   11ab4:	ldr	r8, [sp, #28]
   11ab8:	ldr	r6, [sp, #32]
   11abc:	mvn	r1, #0
   11ac0:	subs	r0, r1, r8
   11ac4:	sbcs	r0, r1, r6
   11ac8:	bge	11b00 <__assert_fail@plt+0xb24>
   11acc:	ldr	r0, [sp, #48]	; 0x30
   11ad0:	sub	r0, r0, #2
   11ad4:	cmp	r0, #3
   11ad8:	bhi	11bb0 <__assert_fail@plt+0xbd4>
   11adc:	add	r1, pc, #0
   11ae0:	ldr	pc, [r1, r0, lsl #2]
   11ae4:	strdeq	r1, [r1], -r4
   11ae8:	andeq	r1, r1, r8, lsl #23
   11aec:	andeq	r1, r1, ip, lsr #22
   11af0:	andeq	r1, r1, r4, asr fp
   11af4:	subs	r0, r4, r8
   11af8:	sbcs	r0, r5, r6
   11afc:	b	11b90 <__assert_fail@plt+0xbb4>
   11b00:	ldr	r0, [sp, #80]	; 0x50
   11b04:	and	r0, r0, #53248	; 0xd000
   11b08:	orr	r0, r0, #8192	; 0x2000
   11b0c:	cmp	r0, #40960	; 0xa000
   11b10:	bne	11d28 <__assert_fail@plt+0xd4c>
   11b14:	ldr	r0, [sp, #24]
   11b18:	ldr	r6, [r0, #4]
   11b1c:	cmn	r6, #1
   11b20:	ble	11d58 <__assert_fail@plt+0xd7c>
   11b24:	ldr	r8, [r0]
   11b28:	b	11acc <__assert_fail@plt+0xaf0>
   11b2c:	mov	r7, r3
   11b30:	mov	r0, r8
   11b34:	mov	r1, r6
   11b38:	mov	r2, r4
   11b3c:	mov	r3, r5
   11b40:	bl	16a14 <__assert_fail@plt+0x5a38>
   11b44:	subs	r4, r8, r2
   11b48:	sbc	r5, r6, r3
   11b4c:	mov	r3, r7
   11b50:	b	11ba4 <__assert_fail@plt+0xbc8>
   11b54:	mov	r7, r3
   11b58:	mov	r0, r8
   11b5c:	mov	r1, r6
   11b60:	mov	r2, r4
   11b64:	mov	r3, r5
   11b68:	bl	16a14 <__assert_fail@plt+0x5a38>
   11b6c:	subs	r4, r4, r2
   11b70:	sbc	r0, r5, r3
   11b74:	orrs	r1, r2, r3
   11b78:	mov	r3, r7
   11b7c:	moveq	r4, r1
   11b80:	moveq	r0, r1
   11b84:	b	11bb4 <__assert_fail@plt+0xbd8>
   11b88:	subs	r0, r8, r4
   11b8c:	sbcs	r0, r6, r5
   11b90:	mov	r0, #0
   11b94:	movwlt	r0, #1
   11b98:	cmp	r0, #0
   11b9c:	movne	r5, r6
   11ba0:	movne	r4, r8
   11ba4:	movw	r8, #33097	; 0x8149
   11ba8:	movt	r8, #2
   11bac:	b	11c40 <__assert_fail@plt+0xc64>
   11bb0:	mov	r0, r5
   11bb4:	cmn	r6, #1
   11bb8:	mov	r1, #0
   11bbc:	mov	r2, #0
   11bc0:	movwgt	r1, #1
   11bc4:	adds	r4, r8, r4
   11bc8:	movw	r8, #33097	; 0x8149
   11bcc:	adc	r5, r6, r0
   11bd0:	movt	r8, #2
   11bd4:	cmn	r5, #1
   11bd8:	movwgt	r2, #1
   11bdc:	subs	r2, r1, r2
   11be0:	movwne	r2, #1
   11be4:	cmn	r0, #1
   11be8:	mov	r0, #0
   11bec:	movwgt	r0, #1
   11bf0:	sub	r0, r1, r0
   11bf4:	clz	r0, r0
   11bf8:	lsr	r0, r0, #5
   11bfc:	and	r0, r0, r2
   11c00:	cmp	r0, #1
   11c04:	bne	11c40 <__assert_fail@plt+0xc64>
   11c08:	movw	r1, #29868	; 0x74ac
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #1
   11c18:	bl	10e08 <dcgettext@plt>
   11c1c:	mov	r4, r0
   11c20:	mov	r0, #4
   11c24:	mov	r1, r9
   11c28:	bl	13838 <__assert_fail@plt+0x285c>
   11c2c:	mov	r3, r0
   11c30:	mov	r0, #0
   11c34:	mov	r1, #0
   11c38:	mov	r2, r4
   11c3c:	b	11cb8 <__assert_fail@plt+0xcdc>
   11c40:	rsbs	r0, r4, #0
   11c44:	mov	r6, #0
   11c48:	mov	r7, #0
   11c4c:	rscs	r0, r5, #0
   11c50:	mov	r0, r3
   11c54:	movwlt	r6, #1
   11c58:	cmp	r6, #0
   11c5c:	moveq	r4, r6
   11c60:	movne	r6, r5
   11c64:	mov	r2, r4
   11c68:	mov	r3, r6
   11c6c:	bl	10dfc <ftruncate64@plt>
   11c70:	cmp	r0, #0
   11c74:	beq	11cc0 <__assert_fail@plt+0xce4>
   11c78:	bl	10f10 <__errno_location@plt>
   11c7c:	movw	r1, #29903	; 0x74cf
   11c80:	ldr	r5, [r0]
   11c84:	mov	r0, #0
   11c88:	mov	r2, #5
   11c8c:	movt	r1, #1
   11c90:	bl	10e08 <dcgettext@plt>
   11c94:	mov	r7, r0
   11c98:	mov	r0, #4
   11c9c:	mov	r1, r9
   11ca0:	bl	13838 <__assert_fail@plt+0x285c>
   11ca4:	mov	r3, r0
   11ca8:	mov	r0, #0
   11cac:	mov	r1, r5
   11cb0:	mov	r2, r7
   11cb4:	stm	sp, {r4, r6}
   11cb8:	bl	10e80 <error@plt>
   11cbc:	mov	r7, #1
   11cc0:	ldr	r0, [sp, #60]	; 0x3c
   11cc4:	bl	10fd0 <close@plt>
   11cc8:	cmp	r0, #0
   11ccc:	beq	11d18 <__assert_fail@plt+0xd3c>
   11cd0:	bl	10f10 <__errno_location@plt>
   11cd4:	movw	r1, #29124	; 0x71c4
   11cd8:	ldr	r4, [r0]
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	movt	r1, #1
   11ce8:	bl	10e08 <dcgettext@plt>
   11cec:	mov	r5, r0
   11cf0:	mov	r0, #4
   11cf4:	mov	r1, r9
   11cf8:	bl	13838 <__assert_fail@plt+0x285c>
   11cfc:	mov	r3, r0
   11d00:	mov	r0, #0
   11d04:	mov	r1, r4
   11d08:	mov	r2, r5
   11d0c:	bl	10e80 <error@plt>
   11d10:	mov	r5, #1
   11d14:	b	11d20 <__assert_fail@plt+0xd44>
   11d18:	ldr	r5, [sp, #44]	; 0x2c
   11d1c:	orr	r5, r5, r7
   11d20:	ldr	r6, [sp, #40]	; 0x28
   11d24:	b	118f4 <__assert_fail@plt+0x918>
   11d28:	mov	r0, #2
   11d2c:	mov	r2, #0
   11d30:	str	r0, [sp]
   11d34:	mov	r0, r3
   11d38:	mov	r3, #0
   11d3c:	bl	10e50 <lseek64@plt>
   11d40:	cmn	r1, #1
   11d44:	ble	11d90 <__assert_fail@plt+0xdb4>
   11d48:	ldr	r3, [sp, #60]	; 0x3c
   11d4c:	mov	r8, r0
   11d50:	mov	r6, r1
   11d54:	b	11acc <__assert_fail@plt+0xaf0>
   11d58:	movw	r1, #29826	; 0x7482
   11d5c:	mov	r0, #0
   11d60:	mov	r2, #5
   11d64:	movt	r1, #1
   11d68:	bl	10e08 <dcgettext@plt>
   11d6c:	mov	r4, r0
   11d70:	mov	r0, #4
   11d74:	mov	r1, r9
   11d78:	bl	13838 <__assert_fail@plt+0x285c>
   11d7c:	mov	r3, r0
   11d80:	mov	r0, #0
   11d84:	mov	r1, #0
   11d88:	mov	r2, r4
   11d8c:	b	11dcc <__assert_fail@plt+0xdf0>
   11d90:	bl	10f10 <__errno_location@plt>
   11d94:	movw	r1, #29071	; 0x718f
   11d98:	ldr	r4, [r0]
   11d9c:	mov	r0, #0
   11da0:	mov	r2, #5
   11da4:	movt	r1, #1
   11da8:	bl	10e08 <dcgettext@plt>
   11dac:	mov	r5, r0
   11db0:	mov	r0, #4
   11db4:	mov	r1, r9
   11db8:	bl	13838 <__assert_fail@plt+0x285c>
   11dbc:	mov	r3, r0
   11dc0:	mov	r0, #0
   11dc4:	mov	r1, r4
   11dc8:	mov	r2, r5
   11dcc:	bl	10e80 <error@plt>
   11dd0:	movw	r8, #33097	; 0x8149
   11dd4:	mov	r7, #1
   11dd8:	movt	r8, #2
   11ddc:	b	11cc0 <__assert_fail@plt+0xce4>
   11de0:	asr	r3, r5, #31
   11de4:	mvn	r0, #0
   11de8:	mvn	r1, #-2147483648	; 0x80000000
   11dec:	mov	r2, r5
   11df0:	bl	16a14 <__assert_fail@plt+0x5a38>
   11df4:	ldr	r2, [sp, #52]	; 0x34
   11df8:	ldr	r3, [sp, #60]	; 0x3c
   11dfc:	subs	r0, r2, r0
   11e00:	sbcs	r0, r6, r1
   11e04:	bge	11a94 <__assert_fail@plt+0xab8>
   11e08:	movw	r1, #29780	; 0x7454
   11e0c:	mov	r0, #0
   11e10:	mov	r2, #5
   11e14:	movt	r1, #1
   11e18:	bl	10e08 <dcgettext@plt>
   11e1c:	mov	r4, r0
   11e20:	mov	r0, #4
   11e24:	mov	r1, r9
   11e28:	bl	13838 <__assert_fail@plt+0x285c>
   11e2c:	ldr	r1, [sp, #52]	; 0x34
   11e30:	mov	r2, r4
   11e34:	stm	sp, {r1, r6}
   11e38:	str	r0, [sp, #12]
   11e3c:	mov	r0, #0
   11e40:	mov	r1, #0
   11e44:	str	r5, [sp, #8]
   11e48:	bl	10e80 <error@plt>
   11e4c:	b	11cbc <__assert_fail@plt+0xce0>
   11e50:	mov	r5, #0
   11e54:	and	r0, r5, #1
   11e58:	sub	sp, fp, #28
   11e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e60:	cmn	r0, #3
   11e64:	bne	11eb0 <__assert_fail@plt+0xed4>
   11e68:	movw	r0, #32992	; 0x80e0
   11e6c:	movw	r2, #28886	; 0x70d6
   11e70:	mov	r1, #0
   11e74:	movt	r0, #2
   11e78:	movt	r2, #1
   11e7c:	str	r1, [sp, #4]
   11e80:	movw	r1, #28748	; 0x704c
   11e84:	movt	r1, #1
   11e88:	ldr	r3, [r0]
   11e8c:	movw	r0, #33084	; 0x813c
   11e90:	str	r2, [sp]
   11e94:	movw	r2, #28872	; 0x70c8
   11e98:	movt	r0, #2
   11e9c:	movt	r2, #1
   11ea0:	ldr	r0, [r0]
   11ea4:	bl	14330 <__assert_fail@plt+0x3354>
   11ea8:	mov	r0, #0
   11eac:	bl	10ee0 <exit@plt>
   11eb0:	cmn	r0, #2
   11eb4:	bne	11ec0 <__assert_fail@plt+0xee4>
   11eb8:	mov	r0, #0
   11ebc:	bl	110d8 <__assert_fail@plt+0xfc>
   11ec0:	mov	r0, #1
   11ec4:	bl	110d8 <__assert_fail@plt+0xfc>
   11ec8:	movw	r1, #28788	; 0x7074
   11ecc:	movt	r1, #1
   11ed0:	b	11f20 <__assert_fail@plt+0xf44>
   11ed4:	movw	r1, #28900	; 0x70e4
   11ed8:	movt	r1, #1
   11edc:	b	11f4c <__assert_fail@plt+0xf70>
   11ee0:	movw	r1, #28991	; 0x713f
   11ee4:	mov	r0, #0
   11ee8:	mov	r2, #5
   11eec:	movt	r1, #1
   11ef0:	bl	10e08 <dcgettext@plt>
   11ef4:	movw	r1, #29023	; 0x715f
   11ef8:	mov	r4, r0
   11efc:	mov	r0, #0
   11f00:	movt	r1, #1
   11f04:	bl	13d50 <__assert_fail@plt+0x2d74>
   11f08:	movw	r1, #28933	; 0x7105
   11f0c:	mov	r5, r0
   11f10:	movt	r1, #1
   11f14:	b	11f78 <__assert_fail@plt+0xf9c>
   11f18:	movw	r1, #29035	; 0x716b
   11f1c:	movt	r1, #1
   11f20:	mov	r0, #0
   11f24:	mov	r2, #5
   11f28:	bl	10e08 <dcgettext@plt>
   11f2c:	mov	r2, r0
   11f30:	mov	r0, #0
   11f34:	mov	r1, #0
   11f38:	bl	10e80 <error@plt>
   11f3c:	mov	r0, #1
   11f40:	bl	110d8 <__assert_fail@plt+0xfc>
   11f44:	movw	r1, #28952	; 0x7118
   11f48:	movt	r1, #1
   11f4c:	mov	r0, #0
   11f50:	mov	r2, #5
   11f54:	bl	10e08 <dcgettext@plt>
   11f58:	movw	r1, #28933	; 0x7105
   11f5c:	mov	r4, r0
   11f60:	mov	r0, #0
   11f64:	movt	r1, #1
   11f68:	bl	13d50 <__assert_fail@plt+0x2d74>
   11f6c:	movw	r1, #28940	; 0x710c
   11f70:	mov	r5, r0
   11f74:	movt	r1, #1
   11f78:	mov	r0, #1
   11f7c:	bl	13d50 <__assert_fail@plt+0x2d74>
   11f80:	str	r0, [sp]
   11f84:	mov	r0, #0
   11f88:	mov	r1, #0
   11f8c:	mov	r2, r4
   11f90:	mov	r3, r5
   11f94:	bl	10e80 <error@plt>
   11f98:	mov	r0, #1
   11f9c:	bl	110d8 <__assert_fail@plt+0xfc>
   11fa0:	bl	10f10 <__errno_location@plt>
   11fa4:	ldr	r4, [r0]
   11fa8:	movw	r1, #29056	; 0x7180
   11fac:	movt	r1, #1
   11fb0:	b	11fcc <__assert_fail@plt+0xff0>
   11fb4:	ldr	r0, [sp, #60]	; 0x3c
   11fb8:	str	r0, [r9]
   11fbc:	bl	10f10 <__errno_location@plt>
   11fc0:	ldr	r4, [r0]
   11fc4:	movw	r1, #29071	; 0x718f
   11fc8:	movt	r1, #1
   11fcc:	mov	r0, #0
   11fd0:	mov	r2, #5
   11fd4:	bl	10e08 <dcgettext@plt>
   11fd8:	mov	r5, r0
   11fdc:	movw	r0, #33100	; 0x814c
   11fe0:	movt	r0, #2
   11fe4:	ldr	r1, [r0]
   11fe8:	mov	r0, #4
   11fec:	bl	13838 <__assert_fail@plt+0x285c>
   11ff0:	mov	r3, r0
   11ff4:	mov	r0, #1
   11ff8:	mov	r1, r4
   11ffc:	mov	r2, r5
   12000:	bl	10e80 <error@plt>
   12004:	movw	r1, #33104	; 0x8150
   12008:	movt	r1, #2
   1200c:	str	r0, [r1]
   12010:	bx	lr
   12014:	movw	r1, #33108	; 0x8154
   12018:	movt	r1, #2
   1201c:	strb	r0, [r1]
   12020:	bx	lr
   12024:	push	{r4, r5, r6, sl, fp, lr}
   12028:	add	fp, sp, #16
   1202c:	sub	sp, sp, #8
   12030:	movw	r0, #33084	; 0x813c
   12034:	movt	r0, #2
   12038:	ldr	r0, [r0]
   1203c:	bl	165e4 <__assert_fail@plt+0x5608>
   12040:	cmp	r0, #0
   12044:	beq	1206c <__assert_fail@plt+0x1090>
   12048:	movw	r0, #33108	; 0x8154
   1204c:	movt	r0, #2
   12050:	ldrb	r0, [r0]
   12054:	cmp	r0, #0
   12058:	beq	1208c <__assert_fail@plt+0x10b0>
   1205c:	bl	10f10 <__errno_location@plt>
   12060:	ldr	r0, [r0]
   12064:	cmp	r0, #32
   12068:	bne	1208c <__assert_fail@plt+0x10b0>
   1206c:	movw	r0, #33080	; 0x8138
   12070:	movt	r0, #2
   12074:	ldr	r0, [r0]
   12078:	bl	165e4 <__assert_fail@plt+0x5608>
   1207c:	cmp	r0, #0
   12080:	subeq	sp, fp, #16
   12084:	popeq	{r4, r5, r6, sl, fp, pc}
   12088:	b	120fc <__assert_fail@plt+0x1120>
   1208c:	movw	r1, #30127	; 0x75af
   12090:	mov	r0, #0
   12094:	mov	r2, #5
   12098:	movt	r1, #1
   1209c:	bl	10e08 <dcgettext@plt>
   120a0:	mov	r4, r0
   120a4:	movw	r0, #33104	; 0x8150
   120a8:	movt	r0, #2
   120ac:	ldr	r6, [r0]
   120b0:	bl	10f10 <__errno_location@plt>
   120b4:	ldr	r5, [r0]
   120b8:	cmp	r6, #0
   120bc:	bne	120d8 <__assert_fail@plt+0x10fc>
   120c0:	movw	r2, #30143	; 0x75bf
   120c4:	mov	r0, #0
   120c8:	mov	r1, r5
   120cc:	mov	r3, r4
   120d0:	movt	r2, #1
   120d4:	b	120f8 <__assert_fail@plt+0x111c>
   120d8:	mov	r0, r6
   120dc:	bl	139d8 <__assert_fail@plt+0x29fc>
   120e0:	movw	r2, #30139	; 0x75bb
   120e4:	mov	r3, r0
   120e8:	str	r4, [sp]
   120ec:	mov	r0, #0
   120f0:	mov	r1, r5
   120f4:	movt	r2, #1
   120f8:	bl	10e80 <error@plt>
   120fc:	movw	r0, #32996	; 0x80e4
   12100:	movt	r0, #2
   12104:	ldr	r0, [r0]
   12108:	bl	10dd8 <_exit@plt>
   1210c:	push	{r4, r5, fp, lr}
   12110:	add	fp, sp, #8
   12114:	cmp	r0, #0
   12118:	beq	121ac <__assert_fail@plt+0x11d0>
   1211c:	mov	r1, #47	; 0x2f
   12120:	mov	r4, r0
   12124:	bl	10f7c <strrchr@plt>
   12128:	cmp	r0, #0
   1212c:	mov	r5, r4
   12130:	addne	r5, r0, #1
   12134:	sub	r0, r5, r4
   12138:	cmp	r0, #7
   1213c:	blt	12190 <__assert_fail@plt+0x11b4>
   12140:	movw	r1, #30202	; 0x75fa
   12144:	sub	r0, r5, #7
   12148:	mov	r2, #7
   1214c:	movt	r1, #1
   12150:	bl	10fb8 <strncmp@plt>
   12154:	cmp	r0, #0
   12158:	bne	12190 <__assert_fail@plt+0x11b4>
   1215c:	movw	r1, #30210	; 0x7602
   12160:	mov	r0, r5
   12164:	mov	r2, #3
   12168:	movt	r1, #1
   1216c:	bl	10fb8 <strncmp@plt>
   12170:	cmp	r0, #0
   12174:	beq	12180 <__assert_fail@plt+0x11a4>
   12178:	mov	r4, r5
   1217c:	b	12190 <__assert_fail@plt+0x11b4>
   12180:	movw	r0, #33064	; 0x8128
   12184:	add	r4, r5, #3
   12188:	movt	r0, #2
   1218c:	str	r4, [r0]
   12190:	movw	r0, #33068	; 0x812c
   12194:	movt	r0, #2
   12198:	str	r4, [r0]
   1219c:	movw	r0, #33112	; 0x8158
   121a0:	movt	r0, #2
   121a4:	str	r4, [r0]
   121a8:	pop	{r4, r5, fp, pc}
   121ac:	movw	r0, #33080	; 0x8138
   121b0:	mov	r1, #55	; 0x37
   121b4:	mov	r2, #1
   121b8:	movt	r0, #2
   121bc:	ldr	r3, [r0]
   121c0:	movw	r0, #30146	; 0x75c2
   121c4:	movt	r0, #1
   121c8:	bl	10e44 <fwrite@plt>
   121cc:	bl	10fc4 <abort@plt>
   121d0:	push	{r4, r5, r6, sl, fp, lr}
   121d4:	add	fp, sp, #16
   121d8:	mov	r4, r0
   121dc:	movw	r0, #33120	; 0x8160
   121e0:	movt	r0, #2
   121e4:	cmp	r4, #0
   121e8:	moveq	r4, r0
   121ec:	bl	10f10 <__errno_location@plt>
   121f0:	ldr	r6, [r0]
   121f4:	mov	r5, r0
   121f8:	mov	r0, r4
   121fc:	mov	r1, #48	; 0x30
   12200:	bl	149c4 <__assert_fail@plt+0x39e8>
   12204:	str	r6, [r5]
   12208:	pop	{r4, r5, r6, sl, fp, pc}
   1220c:	movw	r1, #33120	; 0x8160
   12210:	cmp	r0, #0
   12214:	movt	r1, #2
   12218:	movne	r1, r0
   1221c:	ldr	r0, [r1]
   12220:	bx	lr
   12224:	movw	r2, #33120	; 0x8160
   12228:	cmp	r0, #0
   1222c:	movt	r2, #2
   12230:	movne	r2, r0
   12234:	str	r1, [r2]
   12238:	bx	lr
   1223c:	movw	r3, #33120	; 0x8160
   12240:	cmp	r0, #0
   12244:	and	r2, r2, #1
   12248:	movt	r3, #2
   1224c:	movne	r3, r0
   12250:	ubfx	r0, r1, #5, #3
   12254:	and	r1, r1, #31
   12258:	add	ip, r3, r0, lsl #2
   1225c:	mov	r0, #1
   12260:	ldr	r3, [ip, #8]
   12264:	and	r0, r0, r3, lsr r1
   12268:	eor	r2, r0, r2
   1226c:	eor	r1, r3, r2, lsl r1
   12270:	str	r1, [ip, #8]
   12274:	bx	lr
   12278:	movw	r2, #33120	; 0x8160
   1227c:	cmp	r0, #0
   12280:	movt	r2, #2
   12284:	movne	r2, r0
   12288:	ldr	r0, [r2, #4]
   1228c:	str	r1, [r2, #4]
   12290:	bx	lr
   12294:	push	{fp, lr}
   12298:	mov	fp, sp
   1229c:	movw	r3, #33120	; 0x8160
   122a0:	cmp	r0, #0
   122a4:	movt	r3, #2
   122a8:	movne	r3, r0
   122ac:	cmp	r1, #0
   122b0:	mov	r0, #10
   122b4:	cmpne	r2, #0
   122b8:	str	r0, [r3]
   122bc:	bne	122c4 <__assert_fail@plt+0x12e8>
   122c0:	bl	10fc4 <abort@plt>
   122c4:	str	r1, [r3, #40]	; 0x28
   122c8:	str	r2, [r3, #44]	; 0x2c
   122cc:	pop	{fp, pc}
   122d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122d4:	add	fp, sp, #28
   122d8:	sub	sp, sp, #20
   122dc:	mov	r7, r0
   122e0:	ldr	r0, [fp, #8]
   122e4:	movw	r5, #33120	; 0x8160
   122e8:	mov	r8, r3
   122ec:	mov	r9, r2
   122f0:	mov	sl, r1
   122f4:	movt	r5, #2
   122f8:	cmp	r0, #0
   122fc:	movne	r5, r0
   12300:	bl	10f10 <__errno_location@plt>
   12304:	ldr	r2, [r5, #40]	; 0x28
   12308:	ldr	r3, [r5, #44]	; 0x2c
   1230c:	mov	r4, r0
   12310:	ldm	r5, {r0, r1}
   12314:	add	r5, r5, #8
   12318:	ldr	r6, [r4]
   1231c:	stm	sp, {r0, r1, r5}
   12320:	mov	r0, r7
   12324:	mov	r1, sl
   12328:	str	r2, [sp, #12]
   1232c:	str	r3, [sp, #16]
   12330:	mov	r2, r9
   12334:	mov	r3, r8
   12338:	bl	12348 <__assert_fail@plt+0x136c>
   1233c:	str	r6, [r4]
   12340:	sub	sp, fp, #28
   12344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1234c:	add	fp, sp, #28
   12350:	sub	sp, sp, #156	; 0x9c
   12354:	mov	r5, r0
   12358:	add	r0, r2, #1
   1235c:	mov	r6, r1
   12360:	mov	sl, r3
   12364:	str	r2, [fp, #-80]	; 0xffffffb0
   12368:	str	r0, [sp, #72]	; 0x48
   1236c:	ldr	r0, [fp, #12]
   12370:	and	r1, r0, #1
   12374:	str	r1, [sp, #36]	; 0x24
   12378:	and	r1, r0, #4
   1237c:	str	r1, [sp, #32]
   12380:	ubfx	r9, r0, #1, #1
   12384:	bl	10e5c <__ctype_get_mb_cur_max@plt>
   12388:	str	r0, [sp, #40]	; 0x28
   1238c:	ldr	r0, [fp, #24]
   12390:	ldr	r7, [fp, #8]
   12394:	mov	r1, #0
   12398:	str	r5, [fp, #-84]	; 0xffffffac
   1239c:	str	r1, [fp, #-56]	; 0xffffffc8
   123a0:	mov	r1, #0
   123a4:	str	r1, [sp, #60]	; 0x3c
   123a8:	mov	r1, #1
   123ac:	str	r1, [fp, #-48]	; 0xffffffd0
   123b0:	str	r0, [sp, #80]	; 0x50
   123b4:	ldr	r0, [fp, #20]
   123b8:	str	r0, [sp, #76]	; 0x4c
   123bc:	mov	r0, #0
   123c0:	str	r0, [sp, #56]	; 0x38
   123c4:	mov	r0, #0
   123c8:	str	r0, [fp, #-88]	; 0xffffffa8
   123cc:	mov	r0, #0
   123d0:	str	r0, [fp, #-72]	; 0xffffffb8
   123d4:	mov	r0, #0
   123d8:	cmp	r7, #10
   123dc:	bhi	13370 <__assert_fail@plt+0x2394>
   123e0:	add	r1, pc, #24
   123e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   123e8:	mov	r4, r6
   123ec:	mov	r8, #0
   123f0:	mov	r2, #1
   123f4:	mov	r3, #0
   123f8:	mov	lr, sl
   123fc:	ldr	pc, [r1, r7, lsl #2]
   12400:	andeq	r2, r1, r4, asr #9
   12404:	andeq	r2, r1, r8, lsl r5
   12408:	ldrdeq	r2, [r1], -r8
   1240c:			; <UNDEFINED> instruction: 0x000124bc
   12410:	andeq	r2, r1, ip, lsl #10
   12414:	andeq	r2, r1, r0, asr #10
   12418:	andeq	r2, r1, r8, ror #9
   1241c:	andeq	r2, r1, r4, asr #11
   12420:	andeq	r2, r1, ip, lsr #8
   12424:	andeq	r2, r1, ip, lsr #8
   12428:	andeq	r2, r1, r4, asr r4
   1242c:	movw	r0, #30292	; 0x7654
   12430:	mov	r1, r7
   12434:	movt	r0, #1
   12438:	bl	13d78 <__assert_fail@plt+0x2d9c>
   1243c:	str	r0, [sp, #76]	; 0x4c
   12440:	movw	r0, #30294	; 0x7656
   12444:	mov	r1, r7
   12448:	movt	r0, #1
   1244c:	bl	13d78 <__assert_fail@plt+0x2d9c>
   12450:	str	r0, [sp, #80]	; 0x50
   12454:	mov	r8, #0
   12458:	tst	r9, #1
   1245c:	bne	12494 <__assert_fail@plt+0x14b8>
   12460:	ldr	r0, [sp, #76]	; 0x4c
   12464:	ldrb	r0, [r0]
   12468:	cmp	r0, #0
   1246c:	beq	12494 <__assert_fail@plt+0x14b8>
   12470:	ldr	r1, [sp, #76]	; 0x4c
   12474:	mov	r8, #0
   12478:	add	r1, r1, #1
   1247c:	cmp	r8, r4
   12480:	strbcc	r0, [r5, r8]
   12484:	ldrb	r0, [r1, r8]
   12488:	add	r8, r8, #1
   1248c:	cmp	r0, #0
   12490:	bne	1247c <__assert_fail@plt+0x14a0>
   12494:	ldr	r6, [sp, #80]	; 0x50
   12498:	mov	r0, r6
   1249c:	bl	10ef8 <strlen@plt>
   124a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124a4:	str	r0, [fp, #-72]	; 0xffffffb8
   124a8:	str	r6, [fp, #-88]	; 0xffffffa8
   124ac:	mov	r2, #1
   124b0:	mov	r3, r9
   124b4:	mov	lr, sl
   124b8:	b	125c4 <__assert_fail@plt+0x15e8>
   124bc:	mov	r0, #1
   124c0:	b	12518 <__assert_fail@plt+0x153c>
   124c4:	mov	r7, #0
   124c8:	mov	r8, #0
   124cc:	mov	r2, r0
   124d0:	mov	r3, #0
   124d4:	b	125c4 <__assert_fail@plt+0x15e8>
   124d8:	tst	r9, #1
   124dc:	bne	12518 <__assert_fail@plt+0x153c>
   124e0:	mov	r2, r0
   124e4:	b	12570 <__assert_fail@plt+0x1594>
   124e8:	mov	r0, #1
   124ec:	mov	r8, #0
   124f0:	mov	r7, #5
   124f4:	mov	r2, #1
   124f8:	str	r0, [fp, #-72]	; 0xffffffb8
   124fc:	movw	r0, #30290	; 0x7652
   12500:	movt	r0, #1
   12504:	str	r0, [fp, #-88]	; 0xffffffa8
   12508:	b	12538 <__assert_fail@plt+0x155c>
   1250c:	mov	r2, #1
   12510:	tst	r9, #1
   12514:	beq	12570 <__assert_fail@plt+0x1594>
   12518:	mov	r1, #1
   1251c:	mov	r8, #0
   12520:	mov	r7, #2
   12524:	mov	r2, r0
   12528:	str	r1, [fp, #-72]	; 0xffffffb8
   1252c:	movw	r1, #30294	; 0x7656
   12530:	movt	r1, #1
   12534:	str	r1, [fp, #-88]	; 0xffffffa8
   12538:	mov	r3, #1
   1253c:	b	125c4 <__assert_fail@plt+0x15e8>
   12540:	tst	r9, #1
   12544:	beq	12594 <__assert_fail@plt+0x15b8>
   12548:	mov	r0, #1
   1254c:	mov	r8, #0
   12550:	mov	r2, #1
   12554:	mov	r3, #1
   12558:	mov	r7, #5
   1255c:	str	r0, [fp, #-72]	; 0xffffffb8
   12560:	movw	r0, #30290	; 0x7652
   12564:	movt	r0, #1
   12568:	str	r0, [fp, #-88]	; 0xffffffa8
   1256c:	b	125c4 <__assert_fail@plt+0x15e8>
   12570:	cmp	r4, #0
   12574:	mov	r8, #1
   12578:	mov	r3, #0
   1257c:	mov	r7, #2
   12580:	movne	r0, #39	; 0x27
   12584:	strbne	r0, [r5]
   12588:	movw	r0, #30294	; 0x7656
   1258c:	movt	r0, #1
   12590:	b	125b8 <__assert_fail@plt+0x15dc>
   12594:	cmp	r4, #0
   12598:	mov	r8, #1
   1259c:	mov	r2, #1
   125a0:	mov	r7, #5
   125a4:	mov	r3, #0
   125a8:	movne	r0, #34	; 0x22
   125ac:	strbne	r0, [r5]
   125b0:	movw	r0, #30290	; 0x7652
   125b4:	movt	r0, #1
   125b8:	str	r0, [fp, #-88]	; 0xffffffa8
   125bc:	mov	r0, #1
   125c0:	str	r0, [fp, #-72]	; 0xffffffb8
   125c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   125c8:	eor	r6, r3, #1
   125cc:	str	r7, [fp, #-68]	; 0xffffffbc
   125d0:	str	r3, [fp, #-76]	; 0xffffffb4
   125d4:	str	r2, [sp, #84]	; 0x54
   125d8:	str	r6, [sp, #92]	; 0x5c
   125dc:	cmp	r0, #0
   125e0:	movwne	r0, #1
   125e4:	and	r1, r0, r3
   125e8:	and	r1, r2, r1
   125ec:	str	r1, [sp, #48]	; 0x30
   125f0:	sub	r1, r7, #2
   125f4:	clz	r1, r1
   125f8:	lsr	r1, r1, #5
   125fc:	and	r1, r1, r3
   12600:	str	r1, [sp, #64]	; 0x40
   12604:	subs	r1, r7, #2
   12608:	mov	r7, #0
   1260c:	movwne	r1, #1
   12610:	orr	r6, r1, r6
   12614:	and	r1, r1, r2
   12618:	and	r0, r0, r1
   1261c:	str	r6, [sp, #68]	; 0x44
   12620:	str	r0, [fp, #-60]	; 0xffffffc4
   12624:	orr	r0, r1, r3
   12628:	ldr	r1, [fp, #16]
   1262c:	eor	r0, r0, #1
   12630:	clz	r1, r1
   12634:	lsr	r1, r1, #5
   12638:	orr	r0, r1, r0
   1263c:	str	r0, [fp, #-64]	; 0xffffffc0
   12640:	eor	r0, r2, #1
   12644:	str	r0, [sp, #52]	; 0x34
   12648:	cmn	lr, #1
   1264c:	beq	1265c <__assert_fail@plt+0x1680>
   12650:	cmp	r7, lr
   12654:	bne	12668 <__assert_fail@plt+0x168c>
   12658:	b	131b0 <__assert_fail@plt+0x21d4>
   1265c:	ldrb	r0, [ip, r7]
   12660:	cmp	r0, #0
   12664:	beq	131b8 <__assert_fail@plt+0x21dc>
   12668:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1266c:	mov	sl, #0
   12670:	cmp	r0, #0
   12674:	beq	126ac <__assert_fail@plt+0x16d0>
   12678:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1267c:	add	r5, r7, r0
   12680:	cmp	r0, #2
   12684:	bcc	126a0 <__assert_fail@plt+0x16c4>
   12688:	cmn	lr, #1
   1268c:	bne	126a0 <__assert_fail@plt+0x16c4>
   12690:	mov	r0, ip
   12694:	bl	10ef8 <strlen@plt>
   12698:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1269c:	mov	lr, r0
   126a0:	cmp	r5, lr
   126a4:	bls	126b4 <__assert_fail@plt+0x16d8>
   126a8:	ldr	r5, [fp, #-84]	; 0xffffffac
   126ac:	mov	r0, #0
   126b0:	b	12700 <__assert_fail@plt+0x1724>
   126b4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   126b8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   126bc:	add	r0, ip, r7
   126c0:	mov	r6, r4
   126c4:	mov	r4, lr
   126c8:	bl	10eec <bcmp@plt>
   126cc:	ldr	r2, [sp, #92]	; 0x5c
   126d0:	cmp	r0, #0
   126d4:	ldr	r5, [fp, #-84]	; 0xffffffac
   126d8:	mov	r1, r0
   126dc:	movwne	r1, #1
   126e0:	orr	r1, r1, r2
   126e4:	tst	r1, #1
   126e8:	beq	13240 <__assert_fail@plt+0x2264>
   126ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   126f0:	clz	r0, r0
   126f4:	mov	lr, r4
   126f8:	mov	r4, r6
   126fc:	lsr	r0, r0, #5
   12700:	str	r0, [fp, #-52]	; 0xffffffcc
   12704:	ldrb	r6, [ip, r7]
   12708:	cmp	r6, #126	; 0x7e
   1270c:	bhi	12c3c <__assert_fail@plt+0x1c60>
   12710:	add	r3, pc, #16
   12714:	mov	r9, #1
   12718:	mov	r2, #110	; 0x6e
   1271c:	mov	r0, #97	; 0x61
   12720:	mov	r1, #0
   12724:	ldr	pc, [r3, r6, lsl #2]
   12728:	muleq	r1, ip, sl
   1272c:	andeq	r2, r1, ip, lsr ip
   12730:	andeq	r2, r1, ip, lsr ip
   12734:	andeq	r2, r1, ip, lsr ip
   12738:	andeq	r2, r1, ip, lsr ip
   1273c:	andeq	r2, r1, ip, lsr ip
   12740:	andeq	r2, r1, ip, lsr ip
   12744:	andeq	r2, r1, r8, lsl sp
   12748:	andeq	r2, r1, ip, ror sl
   1274c:	andeq	r2, r1, r4, ror sl
   12750:	andeq	r2, r1, r8, lsl #21
   12754:	andeq	r2, r1, r4, lsr #23
   12758:	andeq	r2, r1, ip, ror #20
   1275c:	andeq	r2, r1, r4, lsl #21
   12760:	andeq	r2, r1, ip, lsr ip
   12764:	andeq	r2, r1, ip, lsr ip
   12768:	andeq	r2, r1, ip, lsr ip
   1276c:	andeq	r2, r1, ip, lsr ip
   12770:	andeq	r2, r1, ip, lsr ip
   12774:	andeq	r2, r1, ip, lsr ip
   12778:	andeq	r2, r1, ip, lsr ip
   1277c:	andeq	r2, r1, ip, lsr ip
   12780:	andeq	r2, r1, ip, lsr ip
   12784:	andeq	r2, r1, ip, lsr ip
   12788:	andeq	r2, r1, ip, lsr ip
   1278c:	andeq	r2, r1, ip, lsr ip
   12790:	andeq	r2, r1, ip, lsr ip
   12794:	andeq	r2, r1, ip, lsr ip
   12798:	andeq	r2, r1, ip, lsr ip
   1279c:	andeq	r2, r1, ip, lsr ip
   127a0:	andeq	r2, r1, ip, lsr ip
   127a4:	andeq	r2, r1, ip, lsr ip
   127a8:	andeq	r2, r1, r0, lsr #20
   127ac:	andeq	r2, r1, r4, lsr #20
   127b0:	andeq	r2, r1, r4, lsr #20
   127b4:	andeq	r2, r1, ip, lsl #20
   127b8:	andeq	r2, r1, r4, lsr #20
   127bc:	andeq	r2, r1, r4, lsr #18
   127c0:	andeq	r2, r1, r4, lsr #20
   127c4:	andeq	r2, r1, ip, lsr #23
   127c8:	andeq	r2, r1, r4, lsr #20
   127cc:	andeq	r2, r1, r4, lsr #20
   127d0:	andeq	r2, r1, r4, lsr #20
   127d4:	andeq	r2, r1, r4, lsr #18
   127d8:	andeq	r2, r1, r4, lsr #18
   127dc:	andeq	r2, r1, r4, lsr #18
   127e0:	andeq	r2, r1, r4, lsr #18
   127e4:	andeq	r2, r1, r4, lsr #18
   127e8:	andeq	r2, r1, r4, lsr #18
   127ec:	andeq	r2, r1, r4, lsr #18
   127f0:	andeq	r2, r1, r4, lsr #18
   127f4:	andeq	r2, r1, r4, lsr #18
   127f8:	andeq	r2, r1, r4, lsr #18
   127fc:	andeq	r2, r1, r4, lsr #18
   12800:	andeq	r2, r1, r4, lsr #18
   12804:	andeq	r2, r1, r4, lsr #18
   12808:	andeq	r2, r1, r4, lsr #18
   1280c:	andeq	r2, r1, r4, lsr #18
   12810:	andeq	r2, r1, r4, lsr #18
   12814:	andeq	r2, r1, r4, lsr #20
   12818:	andeq	r2, r1, r4, lsr #20
   1281c:	andeq	r2, r1, r4, lsr #20
   12820:	andeq	r2, r1, r4, lsr #20
   12824:	andeq	r2, r1, r4, ror fp
   12828:	andeq	r2, r1, ip, lsr ip
   1282c:	andeq	r2, r1, r4, lsr #18
   12830:	andeq	r2, r1, r4, lsr #18
   12834:	andeq	r2, r1, r4, lsr #18
   12838:	andeq	r2, r1, r4, lsr #18
   1283c:	andeq	r2, r1, r4, lsr #18
   12840:	andeq	r2, r1, r4, lsr #18
   12844:	andeq	r2, r1, r4, lsr #18
   12848:	andeq	r2, r1, r4, lsr #18
   1284c:	andeq	r2, r1, r4, lsr #18
   12850:	andeq	r2, r1, r4, lsr #18
   12854:	andeq	r2, r1, r4, lsr #18
   12858:	andeq	r2, r1, r4, lsr #18
   1285c:	andeq	r2, r1, r4, lsr #18
   12860:	andeq	r2, r1, r4, lsr #18
   12864:	andeq	r2, r1, r4, lsr #18
   12868:	andeq	r2, r1, r4, lsr #18
   1286c:	andeq	r2, r1, r4, lsr #18
   12870:	andeq	r2, r1, r4, lsr #18
   12874:	andeq	r2, r1, r4, lsr #18
   12878:	andeq	r2, r1, r4, lsr #18
   1287c:	andeq	r2, r1, r4, lsr #18
   12880:	andeq	r2, r1, r4, lsr #18
   12884:	andeq	r2, r1, r4, lsr #18
   12888:	andeq	r2, r1, r4, lsr #18
   1288c:	andeq	r2, r1, r4, lsr #18
   12890:	andeq	r2, r1, r4, lsr #18
   12894:	andeq	r2, r1, r4, lsr #20
   12898:	andeq	r2, r1, ip, asr #20
   1289c:	andeq	r2, r1, r4, lsr #18
   128a0:	andeq	r2, r1, r4, lsr #20
   128a4:	andeq	r2, r1, r4, lsr #18
   128a8:	andeq	r2, r1, r4, lsr #20
   128ac:	andeq	r2, r1, r4, lsr #18
   128b0:	andeq	r2, r1, r4, lsr #18
   128b4:	andeq	r2, r1, r4, lsr #18
   128b8:	andeq	r2, r1, r4, lsr #18
   128bc:	andeq	r2, r1, r4, lsr #18
   128c0:	andeq	r2, r1, r4, lsr #18
   128c4:	andeq	r2, r1, r4, lsr #18
   128c8:	andeq	r2, r1, r4, lsr #18
   128cc:	andeq	r2, r1, r4, lsr #18
   128d0:	andeq	r2, r1, r4, lsr #18
   128d4:	andeq	r2, r1, r4, lsr #18
   128d8:	andeq	r2, r1, r4, lsr #18
   128dc:	andeq	r2, r1, r4, lsr #18
   128e0:	andeq	r2, r1, r4, lsr #18
   128e4:	andeq	r2, r1, r4, lsr #18
   128e8:	andeq	r2, r1, r4, lsr #18
   128ec:	andeq	r2, r1, r4, lsr #18
   128f0:	andeq	r2, r1, r4, lsr #18
   128f4:	andeq	r2, r1, r4, lsr #18
   128f8:	andeq	r2, r1, r4, lsr #18
   128fc:	andeq	r2, r1, r4, lsr #18
   12900:	andeq	r2, r1, r4, lsr #18
   12904:	andeq	r2, r1, r4, lsr #18
   12908:	andeq	r2, r1, r4, lsr #18
   1290c:	andeq	r2, r1, r4, lsr #18
   12910:	andeq	r2, r1, r4, lsr #18
   12914:	andeq	r2, r1, r0, ror #19
   12918:	andeq	r2, r1, r4, lsr #20
   1291c:	andeq	r2, r1, r0, ror #19
   12920:	andeq	r2, r1, ip, lsl #20
   12924:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12928:	tst	r0, #1
   1292c:	bne	12958 <__assert_fail@plt+0x197c>
   12930:	ldr	r1, [fp, #16]
   12934:	ubfx	r0, r6, #5, #3
   12938:	mov	r2, #1
   1293c:	ldr	r0, [r1, r0, lsl #2]
   12940:	and	r1, r6, #31
   12944:	tst	r0, r2, lsl r1
   12948:	beq	12958 <__assert_fail@plt+0x197c>
   1294c:	mov	r0, r6
   12950:	mov	r1, r9
   12954:	b	1296c <__assert_fail@plt+0x1990>
   12958:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1295c:	mov	r1, r9
   12960:	cmp	r0, #0
   12964:	mov	r0, r6
   12968:	beq	12cac <__assert_fail@plt+0x1cd0>
   1296c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12970:	tst	r2, #1
   12974:	bne	1327c <__assert_fail@plt+0x22a0>
   12978:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1297c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12980:	subs	r2, r2, #2
   12984:	movwne	r2, #1
   12988:	orr	r2, r2, r3
   1298c:	tst	r2, #1
   12990:	bne	129cc <__assert_fail@plt+0x19f0>
   12994:	cmp	r8, r4
   12998:	movcc	r2, #39	; 0x27
   1299c:	strbcc	r2, [r5, r8]
   129a0:	add	r2, r8, #1
   129a4:	cmp	r2, r4
   129a8:	movcc	r3, #36	; 0x24
   129ac:	strbcc	r3, [r5, r2]
   129b0:	add	r2, r8, #2
   129b4:	add	r8, r8, #3
   129b8:	cmp	r2, r4
   129bc:	movcc	r3, #39	; 0x27
   129c0:	strbcc	r3, [r5, r2]
   129c4:	mov	r2, #1
   129c8:	str	r2, [fp, #-56]	; 0xffffffc8
   129cc:	cmp	r8, r4
   129d0:	movcc	r2, #92	; 0x5c
   129d4:	strbcc	r2, [r5, r8]
   129d8:	add	r8, r8, #1
   129dc:	b	12cf0 <__assert_fail@plt+0x1d14>
   129e0:	cmp	lr, #1
   129e4:	beq	12a0c <__assert_fail@plt+0x1a30>
   129e8:	mov	r9, #0
   129ec:	cmn	lr, #1
   129f0:	bne	12a18 <__assert_fail@plt+0x1a3c>
   129f4:	ldrb	r0, [ip, #1]
   129f8:	cmp	r0, #0
   129fc:	beq	12a0c <__assert_fail@plt+0x1a30>
   12a00:	mvn	lr, #0
   12a04:	mov	sl, #0
   12a08:	b	12924 <__assert_fail@plt+0x1948>
   12a0c:	mov	r9, #0
   12a10:	cmp	r7, #0
   12a14:	beq	12a20 <__assert_fail@plt+0x1a44>
   12a18:	mov	sl, #0
   12a1c:	b	12924 <__assert_fail@plt+0x1948>
   12a20:	mov	r1, #1
   12a24:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12a28:	cmp	r0, #2
   12a2c:	bne	12a44 <__assert_fail@plt+0x1a68>
   12a30:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a34:	mov	r9, r1
   12a38:	tst	r0, #1
   12a3c:	beq	12924 <__assert_fail@plt+0x1948>
   12a40:	b	1327c <__assert_fail@plt+0x22a0>
   12a44:	mov	r9, r1
   12a48:	b	12924 <__assert_fail@plt+0x1948>
   12a4c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12a50:	cmp	r0, #2
   12a54:	bne	12c90 <__assert_fail@plt+0x1cb4>
   12a58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a5c:	tst	r0, #1
   12a60:	bne	1327c <__assert_fail@plt+0x22a0>
   12a64:	mov	sl, #0
   12a68:	b	12ca4 <__assert_fail@plt+0x1cc8>
   12a6c:	mov	r0, #102	; 0x66
   12a70:	b	12d18 <__assert_fail@plt+0x1d3c>
   12a74:	mov	r2, #116	; 0x74
   12a78:	b	12a88 <__assert_fail@plt+0x1aac>
   12a7c:	mov	r0, #98	; 0x62
   12a80:	b	12d18 <__assert_fail@plt+0x1d3c>
   12a84:	mov	r2, #114	; 0x72
   12a88:	ldr	r0, [sp, #68]	; 0x44
   12a8c:	tst	r0, #1
   12a90:	mov	r0, r2
   12a94:	bne	12d18 <__assert_fail@plt+0x1d3c>
   12a98:	b	1327c <__assert_fail@plt+0x22a0>
   12a9c:	ldr	r0, [sp, #84]	; 0x54
   12aa0:	tst	r0, #1
   12aa4:	beq	12d34 <__assert_fail@plt+0x1d58>
   12aa8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12aac:	tst	r0, #1
   12ab0:	bne	13368 <__assert_fail@plt+0x238c>
   12ab4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ab8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12abc:	subs	r0, r0, #2
   12ac0:	movwne	r0, #1
   12ac4:	orr	r0, r0, r1
   12ac8:	tst	r0, #1
   12acc:	bne	12b08 <__assert_fail@plt+0x1b2c>
   12ad0:	cmp	r8, r4
   12ad4:	movcc	r0, #39	; 0x27
   12ad8:	strbcc	r0, [r5, r8]
   12adc:	add	r0, r8, #1
   12ae0:	cmp	r0, r4
   12ae4:	movcc	r1, #36	; 0x24
   12ae8:	strbcc	r1, [r5, r0]
   12aec:	add	r0, r8, #2
   12af0:	add	r8, r8, #3
   12af4:	cmp	r0, r4
   12af8:	movcc	r1, #39	; 0x27
   12afc:	strbcc	r1, [r5, r0]
   12b00:	mov	r0, #1
   12b04:	str	r0, [fp, #-56]	; 0xffffffc8
   12b08:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12b0c:	cmp	r8, r4
   12b10:	mov	r9, #0
   12b14:	mov	sl, #1
   12b18:	mov	r6, #48	; 0x30
   12b1c:	movcc	r0, #92	; 0x5c
   12b20:	strbcc	r0, [r5, r8]
   12b24:	add	r0, r8, #1
   12b28:	cmp	r1, #2
   12b2c:	beq	12efc <__assert_fail@plt+0x1f20>
   12b30:	add	r1, r7, #1
   12b34:	cmp	r1, lr
   12b38:	bcs	12efc <__assert_fail@plt+0x1f20>
   12b3c:	ldrb	r1, [ip, r1]
   12b40:	sub	r1, r1, #48	; 0x30
   12b44:	uxtb	r1, r1
   12b48:	cmp	r1, #9
   12b4c:	bhi	12efc <__assert_fail@plt+0x1f20>
   12b50:	cmp	r0, r4
   12b54:	movcc	r1, #48	; 0x30
   12b58:	strbcc	r1, [r5, r0]
   12b5c:	add	r0, r8, #2
   12b60:	add	r8, r8, #3
   12b64:	cmp	r0, r4
   12b68:	movcc	r1, #48	; 0x30
   12b6c:	strbcc	r1, [r5, r0]
   12b70:	b	12924 <__assert_fail@plt+0x1948>
   12b74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b78:	mov	sl, #0
   12b7c:	mov	r6, #63	; 0x3f
   12b80:	cmp	r0, #5
   12b84:	beq	12f04 <__assert_fail@plt+0x1f28>
   12b88:	cmp	r0, #2
   12b8c:	bne	12fac <__assert_fail@plt+0x1fd0>
   12b90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b94:	mov	r9, #0
   12b98:	tst	r0, #1
   12b9c:	beq	12924 <__assert_fail@plt+0x1948>
   12ba0:	b	1327c <__assert_fail@plt+0x22a0>
   12ba4:	mov	r0, #118	; 0x76
   12ba8:	b	12d18 <__assert_fail@plt+0x1d3c>
   12bac:	mov	r0, #1
   12bb0:	mov	r6, #39	; 0x27
   12bb4:	str	r0, [sp, #60]	; 0x3c
   12bb8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bbc:	cmp	r0, #2
   12bc0:	bne	12d50 <__assert_fail@plt+0x1d74>
   12bc4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bc8:	tst	r0, #1
   12bcc:	bne	1327c <__assert_fail@plt+0x22a0>
   12bd0:	ldr	r2, [sp, #56]	; 0x38
   12bd4:	clz	r1, r4
   12bd8:	mov	sl, #0
   12bdc:	mov	r9, #1
   12be0:	lsr	r1, r1, #5
   12be4:	cmp	r2, #0
   12be8:	mov	r0, r2
   12bec:	movwne	r0, #1
   12bf0:	orrs	r0, r0, r1
   12bf4:	moveq	r2, r4
   12bf8:	moveq	r4, r0
   12bfc:	cmp	r8, r4
   12c00:	str	r2, [sp, #56]	; 0x38
   12c04:	movcc	r0, #39	; 0x27
   12c08:	strbcc	r0, [r5, r8]
   12c0c:	add	r0, r8, #1
   12c10:	cmp	r0, r4
   12c14:	movcc	r1, #92	; 0x5c
   12c18:	strbcc	r1, [r5, r0]
   12c1c:	add	r0, r8, #2
   12c20:	add	r8, r8, #3
   12c24:	cmp	r0, r4
   12c28:	movcc	r1, #39	; 0x27
   12c2c:	strbcc	r1, [r5, r0]
   12c30:	mov	r0, #0
   12c34:	str	r0, [fp, #-56]	; 0xffffffc8
   12c38:	b	12924 <__assert_fail@plt+0x1948>
   12c3c:	ldr	r0, [sp, #40]	; 0x28
   12c40:	str	r4, [sp, #88]	; 0x58
   12c44:	cmp	r0, #1
   12c48:	bne	12d58 <__assert_fail@plt+0x1d7c>
   12c4c:	str	lr, [sp, #28]
   12c50:	bl	10ed4 <__ctype_b_loc@plt>
   12c54:	ldr	r0, [r0]
   12c58:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12c5c:	mov	r2, #1
   12c60:	add	r0, r0, r6, lsl #1
   12c64:	ldrb	r0, [r0, #1]
   12c68:	ubfx	r9, r0, #6, #1
   12c6c:	ldr	r0, [sp, #52]	; 0x34
   12c70:	cmp	r2, #1
   12c74:	orr	r0, r9, r0
   12c78:	bhi	12fb4 <__assert_fail@plt+0x1fd8>
   12c7c:	tst	r0, #1
   12c80:	beq	12fb4 <__assert_fail@plt+0x1fd8>
   12c84:	ldr	lr, [sp, #28]
   12c88:	ldr	r4, [sp, #88]	; 0x58
   12c8c:	b	12924 <__assert_fail@plt+0x1948>
   12c90:	ldr	r1, [sp, #48]	; 0x30
   12c94:	mov	sl, #0
   12c98:	mov	r0, #92	; 0x5c
   12c9c:	cmp	r1, #0
   12ca0:	beq	12d18 <__assert_fail@plt+0x1d3c>
   12ca4:	mov	r6, #92	; 0x5c
   12ca8:	mov	r9, #0
   12cac:	cmp	sl, #0
   12cb0:	bne	12ce8 <__assert_fail@plt+0x1d0c>
   12cb4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cb8:	tst	r0, #1
   12cbc:	beq	12ce8 <__assert_fail@plt+0x1d0c>
   12cc0:	cmp	r8, r4
   12cc4:	movcc	r0, #39	; 0x27
   12cc8:	strbcc	r0, [r5, r8]
   12ccc:	add	r0, r8, #1
   12cd0:	add	r8, r8, #2
   12cd4:	cmp	r0, r4
   12cd8:	movcc	r1, #39	; 0x27
   12cdc:	strbcc	r1, [r5, r0]
   12ce0:	mov	r0, #0
   12ce4:	str	r0, [fp, #-56]	; 0xffffffc8
   12ce8:	mov	r1, r9
   12cec:	mov	r0, r6
   12cf0:	cmp	r8, r4
   12cf4:	strbcc	r0, [r5, r8]
   12cf8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12cfc:	add	r8, r8, #1
   12d00:	and	r0, r0, r1
   12d04:	str	r0, [fp, #-48]	; 0xffffffd0
   12d08:	add	r7, r7, #1
   12d0c:	cmn	lr, #1
   12d10:	bne	12650 <__assert_fail@plt+0x1674>
   12d14:	b	1265c <__assert_fail@plt+0x1680>
   12d18:	ldr	r1, [sp, #84]	; 0x54
   12d1c:	mov	sl, #0
   12d20:	mov	r9, #0
   12d24:	tst	r1, #1
   12d28:	mov	r1, #0
   12d2c:	beq	12924 <__assert_fail@plt+0x1948>
   12d30:	b	1296c <__assert_fail@plt+0x1990>
   12d34:	ldr	r0, [sp, #36]	; 0x24
   12d38:	mov	r6, #0
   12d3c:	mov	sl, #0
   12d40:	mov	r9, #0
   12d44:	cmp	r0, #0
   12d48:	beq	12924 <__assert_fail@plt+0x1948>
   12d4c:	b	12d08 <__assert_fail@plt+0x1d2c>
   12d50:	mov	r9, #1
   12d54:	b	12924 <__assert_fail@plt+0x1948>
   12d58:	mov	r0, #0
   12d5c:	cmn	lr, #1
   12d60:	sub	r4, fp, #40	; 0x28
   12d64:	str	r0, [fp, #-36]	; 0xffffffdc
   12d68:	str	r0, [fp, #-40]	; 0xffffffd8
   12d6c:	bne	12d80 <__assert_fail@plt+0x1da4>
   12d70:	mov	r0, ip
   12d74:	bl	10ef8 <strlen@plt>
   12d78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d7c:	mov	lr, r0
   12d80:	ldr	r0, [sp, #72]	; 0x48
   12d84:	mov	r9, #1
   12d88:	mov	r2, #0
   12d8c:	str	lr, [sp, #28]
   12d90:	add	r0, r0, r7
   12d94:	str	r0, [sp, #20]
   12d98:	b	12ddc <__assert_fail@plt+0x1e00>
   12d9c:	ldr	r5, [sp, #44]	; 0x2c
   12da0:	add	r5, r0, r5
   12da4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12da8:	bl	10e2c <iswprint@plt>
   12dac:	cmp	r0, #0
   12db0:	sub	r4, fp, #40	; 0x28
   12db4:	movwne	r0, #1
   12db8:	and	r9, r9, r0
   12dbc:	mov	r0, r4
   12dc0:	bl	10df0 <mbsinit@plt>
   12dc4:	mov	r2, r5
   12dc8:	ldr	lr, [sp, #28]
   12dcc:	ldr	r5, [fp, #-84]	; 0xffffffac
   12dd0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12dd4:	cmp	r0, #0
   12dd8:	bne	12c6c <__assert_fail@plt+0x1c90>
   12ddc:	add	r0, r2, r7
   12de0:	str	r2, [sp, #44]	; 0x2c
   12de4:	mov	r3, r4
   12de8:	add	r1, ip, r0
   12dec:	str	r0, [sp, #24]
   12df0:	sub	r2, lr, r0
   12df4:	sub	r0, fp, #44	; 0x2c
   12df8:	bl	16868 <__assert_fail@plt+0x588c>
   12dfc:	cmp	r0, #0
   12e00:	beq	131a4 <__assert_fail@plt+0x21c8>
   12e04:	cmn	r0, #1
   12e08:	beq	13160 <__assert_fail@plt+0x2184>
   12e0c:	ldr	lr, [sp, #28]
   12e10:	cmn	r0, #2
   12e14:	beq	13168 <__assert_fail@plt+0x218c>
   12e18:	ldr	r2, [sp, #64]	; 0x40
   12e1c:	ldr	r4, [sp, #88]	; 0x58
   12e20:	ldr	ip, [sp, #84]	; 0x54
   12e24:	cmp	r0, #2
   12e28:	mov	r1, #0
   12e2c:	movwcc	r1, #1
   12e30:	eor	r2, r2, #1
   12e34:	orrs	r1, r2, r1
   12e38:	bne	12d9c <__assert_fail@plt+0x1dc0>
   12e3c:	ldr	r1, [sp, #44]	; 0x2c
   12e40:	ldr	r2, [sp, #20]
   12e44:	add	r1, r2, r1
   12e48:	sub	r2, r0, #1
   12e4c:	b	12e5c <__assert_fail@plt+0x1e80>
   12e50:	add	r1, r1, #1
   12e54:	subs	r2, r2, #1
   12e58:	beq	12d9c <__assert_fail@plt+0x1dc0>
   12e5c:	ldrb	r3, [r1]
   12e60:	sub	r3, r3, #91	; 0x5b
   12e64:	cmp	r3, #33	; 0x21
   12e68:	bhi	12e50 <__assert_fail@plt+0x1e74>
   12e6c:	add	r5, pc, #0
   12e70:	ldr	pc, [r5, r3, lsl #2]
   12e74:	andeq	r3, r1, r8, asr r2
   12e78:	andeq	r3, r1, r8, asr r2
   12e7c:	andeq	r2, r1, r0, asr lr
   12e80:	andeq	r3, r1, r8, asr r2
   12e84:	andeq	r2, r1, r0, asr lr
   12e88:	andeq	r3, r1, r8, asr r2
   12e8c:	andeq	r2, r1, r0, asr lr
   12e90:	andeq	r2, r1, r0, asr lr
   12e94:	andeq	r2, r1, r0, asr lr
   12e98:	andeq	r2, r1, r0, asr lr
   12e9c:	andeq	r2, r1, r0, asr lr
   12ea0:	andeq	r2, r1, r0, asr lr
   12ea4:	andeq	r2, r1, r0, asr lr
   12ea8:	andeq	r2, r1, r0, asr lr
   12eac:	andeq	r2, r1, r0, asr lr
   12eb0:	andeq	r2, r1, r0, asr lr
   12eb4:	andeq	r2, r1, r0, asr lr
   12eb8:	andeq	r2, r1, r0, asr lr
   12ebc:	andeq	r2, r1, r0, asr lr
   12ec0:	andeq	r2, r1, r0, asr lr
   12ec4:	andeq	r2, r1, r0, asr lr
   12ec8:	andeq	r2, r1, r0, asr lr
   12ecc:	andeq	r2, r1, r0, asr lr
   12ed0:	andeq	r2, r1, r0, asr lr
   12ed4:	andeq	r2, r1, r0, asr lr
   12ed8:	andeq	r2, r1, r0, asr lr
   12edc:	andeq	r2, r1, r0, asr lr
   12ee0:	andeq	r2, r1, r0, asr lr
   12ee4:	andeq	r2, r1, r0, asr lr
   12ee8:	andeq	r2, r1, r0, asr lr
   12eec:	andeq	r2, r1, r0, asr lr
   12ef0:	andeq	r2, r1, r0, asr lr
   12ef4:	andeq	r2, r1, r0, asr lr
   12ef8:	andeq	r3, r1, r8, asr r2
   12efc:	mov	r8, r0
   12f00:	b	12924 <__assert_fail@plt+0x1948>
   12f04:	ldr	r0, [sp, #32]
   12f08:	cmp	r0, #0
   12f0c:	beq	12fac <__assert_fail@plt+0x1fd0>
   12f10:	add	r0, r7, #2
   12f14:	cmp	r0, lr
   12f18:	bcs	12fac <__assert_fail@plt+0x1fd0>
   12f1c:	add	r1, r7, ip
   12f20:	ldrb	r1, [r1, #1]
   12f24:	cmp	r1, #63	; 0x3f
   12f28:	bne	12fac <__assert_fail@plt+0x1fd0>
   12f2c:	ldrb	r9, [ip, r0]
   12f30:	sub	r2, r9, #33	; 0x21
   12f34:	cmp	r2, #29
   12f38:	bhi	12fac <__assert_fail@plt+0x1fd0>
   12f3c:	movw	r1, #20929	; 0x51c1
   12f40:	mov	r3, #1
   12f44:	movt	r1, #14336	; 0x3800
   12f48:	tst	r1, r3, lsl r2
   12f4c:	beq	12fac <__assert_fail@plt+0x1fd0>
   12f50:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12f54:	tst	r1, #1
   12f58:	bne	1327c <__assert_fail@plt+0x22a0>
   12f5c:	cmp	r8, r4
   12f60:	add	r2, r8, #1
   12f64:	mov	r6, r9
   12f68:	mov	r7, r0
   12f6c:	mov	r9, #0
   12f70:	movcc	r1, #63	; 0x3f
   12f74:	strbcc	r1, [r5, r8]
   12f78:	cmp	r2, r4
   12f7c:	movcc	r1, #34	; 0x22
   12f80:	strbcc	r1, [r5, r2]
   12f84:	add	r2, r8, #2
   12f88:	cmp	r2, r4
   12f8c:	movcc	r1, #34	; 0x22
   12f90:	strbcc	r1, [r5, r2]
   12f94:	add	r2, r8, #3
   12f98:	add	r8, r8, #4
   12f9c:	cmp	r2, r4
   12fa0:	movcc	r1, #63	; 0x3f
   12fa4:	strbcc	r1, [r5, r2]
   12fa8:	b	12924 <__assert_fail@plt+0x1948>
   12fac:	mov	r9, #0
   12fb0:	b	12924 <__assert_fail@plt+0x1948>
   12fb4:	ldr	lr, [sp, #28]
   12fb8:	ldr	r4, [fp, #-56]	; 0xffffffc8
   12fbc:	add	r1, r2, r7
   12fc0:	mov	r2, #0
   12fc4:	str	r1, [sp, #44]	; 0x2c
   12fc8:	tst	r0, #1
   12fcc:	bne	130e8 <__assert_fail@plt+0x210c>
   12fd0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12fd4:	tst	r1, #1
   12fd8:	bne	13278 <__assert_fail@plt+0x229c>
   12fdc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12fe0:	subs	r2, r1, #2
   12fe4:	movwne	r2, #1
   12fe8:	orr	r2, r2, r4
   12fec:	tst	r2, #1
   12ff0:	bne	13034 <__assert_fail@plt+0x2058>
   12ff4:	ldr	r1, [sp, #88]	; 0x58
   12ff8:	add	r2, r8, #1
   12ffc:	mov	r4, #1
   13000:	cmp	r8, r1
   13004:	movcc	r1, #39	; 0x27
   13008:	strbcc	r1, [r5, r8]
   1300c:	ldr	r1, [sp, #88]	; 0x58
   13010:	cmp	r2, r1
   13014:	movcc	r1, #36	; 0x24
   13018:	strbcc	r1, [r5, r2]
   1301c:	ldr	r1, [sp, #88]	; 0x58
   13020:	add	r2, r8, #2
   13024:	add	r8, r8, #3
   13028:	cmp	r2, r1
   1302c:	movcc	r1, #39	; 0x27
   13030:	strbcc	r1, [r5, r2]
   13034:	ldr	r1, [sp, #88]	; 0x58
   13038:	add	r2, r8, #1
   1303c:	cmp	r8, r1
   13040:	movcc	r1, #92	; 0x5c
   13044:	strbcc	r1, [r5, r8]
   13048:	ldr	r1, [sp, #88]	; 0x58
   1304c:	cmp	r2, r1
   13050:	bcs	13064 <__assert_fail@plt+0x2088>
   13054:	uxtb	r3, r6
   13058:	mov	r1, #48	; 0x30
   1305c:	orr	r3, r1, r3, lsr #6
   13060:	strb	r3, [r5, r2]
   13064:	ldr	r1, [sp, #88]	; 0x58
   13068:	add	r2, r8, #2
   1306c:	add	r8, r8, #3
   13070:	cmp	r2, r1
   13074:	lsrcc	r3, r6, #3
   13078:	movcc	r1, #6
   1307c:	bficc	r3, r1, #3, #29
   13080:	mov	r1, #6
   13084:	bfi	r6, r1, #3, #29
   13088:	strbcc	r3, [r5, r2]
   1308c:	mov	r2, #1
   13090:	b	13110 <__assert_fail@plt+0x2134>
   13094:	ldr	r1, [sp, #88]	; 0x58
   13098:	ldr	r5, [fp, #-84]	; 0xffffffac
   1309c:	ldr	r4, [sp, #88]	; 0x58
   130a0:	cmp	r8, r1
   130a4:	movcc	r1, #39	; 0x27
   130a8:	strbcc	r1, [r5, r8]
   130ac:	add	r1, r8, #1
   130b0:	add	r8, r8, #2
   130b4:	cmp	r1, r4
   130b8:	movcc	r4, #39	; 0x27
   130bc:	strbcc	r4, [r5, r1]
   130c0:	mov	r4, #0
   130c4:	ldr	r1, [sp, #88]	; 0x58
   130c8:	cmp	r8, r1
   130cc:	ldr	r1, [sp, #72]	; 0x48
   130d0:	strbcc	r6, [r5, r8]
   130d4:	add	r8, r8, #1
   130d8:	ldrb	r6, [r1, r7]
   130dc:	mov	r7, r3
   130e0:	tst	r0, #1
   130e4:	beq	12fd0 <__assert_fail@plt+0x1ff4>
   130e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   130ec:	tst	r1, #1
   130f0:	beq	13108 <__assert_fail@plt+0x212c>
   130f4:	ldr	r1, [sp, #88]	; 0x58
   130f8:	cmp	r8, r1
   130fc:	movcc	r1, #92	; 0x5c
   13100:	strbcc	r1, [r5, r8]
   13104:	add	r8, r8, #1
   13108:	mov	r1, #0
   1310c:	str	r1, [fp, #-52]	; 0xffffffcc
   13110:	ldr	r1, [sp, #44]	; 0x2c
   13114:	add	r3, r7, #1
   13118:	and	sl, r2, #1
   1311c:	cmp	r1, r3
   13120:	bls	13144 <__assert_fail@plt+0x2168>
   13124:	cmp	sl, #0
   13128:	mvn	r5, r4
   1312c:	movwne	sl, #1
   13130:	orr	r5, r5, sl
   13134:	tst	r5, #1
   13138:	beq	13094 <__assert_fail@plt+0x20b8>
   1313c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13140:	b	130c4 <__assert_fail@plt+0x20e8>
   13144:	str	r4, [fp, #-56]	; 0xffffffc8
   13148:	ldr	r4, [sp, #88]	; 0x58
   1314c:	cmp	sl, #0
   13150:	movwne	sl, #1
   13154:	cmp	sl, #0
   13158:	beq	12cb4 <__assert_fail@plt+0x1cd8>
   1315c:	b	12ce8 <__assert_fail@plt+0x1d0c>
   13160:	mov	r9, #0
   13164:	b	131a4 <__assert_fail@plt+0x21c8>
   13168:	ldr	r0, [sp, #24]
   1316c:	mov	r9, #0
   13170:	cmp	lr, r0
   13174:	bls	131a4 <__assert_fail@plt+0x21c8>
   13178:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1317c:	ldr	r2, [sp, #44]	; 0x2c
   13180:	add	r0, ip, r7
   13184:	ldrb	r1, [r0, r2]
   13188:	cmp	r1, #0
   1318c:	beq	12c6c <__assert_fail@plt+0x1c90>
   13190:	add	r2, r2, #1
   13194:	add	r1, r7, r2
   13198:	cmp	r1, lr
   1319c:	bcc	13184 <__assert_fail@plt+0x21a8>
   131a0:	b	12c6c <__assert_fail@plt+0x1c90>
   131a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   131a8:	ldr	r2, [sp, #44]	; 0x2c
   131ac:	b	12c6c <__assert_fail@plt+0x1c90>
   131b0:	mov	lr, r7
   131b4:	b	131bc <__assert_fail@plt+0x21e0>
   131b8:	mvn	lr, #0
   131bc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   131c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   131c4:	eor	r0, r1, #2
   131c8:	orr	r0, r0, r8
   131cc:	clz	r0, r0
   131d0:	lsr	r0, r0, #5
   131d4:	tst	r2, r0
   131d8:	bne	1327c <__assert_fail@plt+0x22a0>
   131dc:	subs	r0, r1, #2
   131e0:	movwne	r0, #1
   131e4:	orr	r0, r2, r0
   131e8:	tst	r0, #1
   131ec:	ldreq	r0, [sp, #60]	; 0x3c
   131f0:	eoreq	r0, r0, #1
   131f4:	tsteq	r0, #1
   131f8:	bne	13310 <__assert_fail@plt+0x2334>
   131fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13200:	mov	sl, lr
   13204:	tst	r0, #1
   13208:	bne	132dc <__assert_fail@plt+0x2300>
   1320c:	ldr	r6, [sp, #56]	; 0x38
   13210:	mov	r9, #0
   13214:	cmp	r6, #0
   13218:	beq	13308 <__assert_fail@plt+0x232c>
   1321c:	ldr	r0, [sp, #84]	; 0x54
   13220:	mov	r1, #0
   13224:	mov	r7, #2
   13228:	cmp	r4, #0
   1322c:	str	r1, [fp, #-48]	; 0xffffffd0
   13230:	mov	r1, #0
   13234:	str	r1, [fp, #-76]	; 0xffffffb4
   13238:	beq	123d8 <__assert_fail@plt+0x13fc>
   1323c:	b	13310 <__assert_fail@plt+0x2334>
   13240:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13244:	ldr	r1, [fp, #12]
   13248:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1324c:	mov	lr, r4
   13250:	mov	r4, r6
   13254:	b	1329c <__assert_fail@plt+0x22c0>
   13258:	tst	ip, #1
   1325c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13260:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13264:	ldr	r1, [fp, #12]
   13268:	mov	r0, #2
   1326c:	movwne	r0, #4
   13270:	mov	r2, r0
   13274:	b	1329c <__assert_fail@plt+0x22c0>
   13278:	ldr	r4, [sp, #88]	; 0x58
   1327c:	ldr	r1, [sp, #84]	; 0x54
   13280:	mov	r0, #2
   13284:	tst	r1, #1
   13288:	movwne	r0, #4
   1328c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13290:	ldr	r1, [fp, #12]
   13294:	cmp	r2, #2
   13298:	moveq	r2, r0
   1329c:	mov	r0, #0
   132a0:	bic	r1, r1, #2
   132a4:	str	r2, [sp]
   132a8:	mov	r2, ip
   132ac:	mov	r3, lr
   132b0:	str	r0, [sp, #8]
   132b4:	ldr	r0, [sp, #76]	; 0x4c
   132b8:	str	r1, [sp, #4]
   132bc:	mov	r1, r4
   132c0:	str	r0, [sp, #12]
   132c4:	ldr	r0, [sp, #80]	; 0x50
   132c8:	str	r0, [sp, #16]
   132cc:	mov	r0, r5
   132d0:	bl	12348 <__assert_fail@plt+0x136c>
   132d4:	mov	r8, r0
   132d8:	b	1335c <__assert_fail@plt+0x2380>
   132dc:	mov	r0, #5
   132e0:	ldr	r1, [sp, #56]	; 0x38
   132e4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   132e8:	mov	r3, sl
   132ec:	str	r0, [sp]
   132f0:	ldr	r0, [fp, #12]
   132f4:	str	r0, [sp, #4]
   132f8:	ldr	r0, [fp, #16]
   132fc:	str	r0, [sp, #8]
   13300:	ldr	r0, [sp, #76]	; 0x4c
   13304:	b	132c0 <__assert_fail@plt+0x22e4>
   13308:	mov	r0, #0
   1330c:	str	r0, [fp, #-76]	; 0xffffffb4
   13310:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13314:	cmp	r1, #0
   13318:	beq	13350 <__assert_fail@plt+0x2374>
   1331c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13320:	tst	r0, #1
   13324:	bne	13350 <__assert_fail@plt+0x2374>
   13328:	ldrb	r0, [r1]
   1332c:	cmp	r0, #0
   13330:	beq	13350 <__assert_fail@plt+0x2374>
   13334:	add	r1, r1, #1
   13338:	cmp	r8, r4
   1333c:	strbcc	r0, [r5, r8]
   13340:	add	r8, r8, #1
   13344:	ldrb	r0, [r1], #1
   13348:	cmp	r0, #0
   1334c:	bne	13338 <__assert_fail@plt+0x235c>
   13350:	cmp	r8, r4
   13354:	movcc	r0, #0
   13358:	strbcc	r0, [r5, r8]
   1335c:	mov	r0, r8
   13360:	sub	sp, fp, #28
   13364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13368:	mov	r0, #4
   1336c:	b	1328c <__assert_fail@plt+0x22b0>
   13370:	bl	10fc4 <abort@plt>
   13374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13378:	add	fp, sp, #28
   1337c:	sub	sp, sp, #28
   13380:	movw	r5, #33120	; 0x8160
   13384:	cmp	r2, #0
   13388:	mov	r4, r1
   1338c:	mov	r7, r0
   13390:	str	r0, [sp, #20]
   13394:	movt	r5, #2
   13398:	movne	r5, r2
   1339c:	bl	10f10 <__errno_location@plt>
   133a0:	mov	sl, r0
   133a4:	ldr	r2, [r5, #40]	; 0x28
   133a8:	ldr	r3, [r5, #44]	; 0x2c
   133ac:	ldm	r5, {r0, r1}
   133b0:	orr	r8, r1, #1
   133b4:	add	r9, r5, #8
   133b8:	mov	r1, #0
   133bc:	ldr	r6, [sl]
   133c0:	stm	sp, {r0, r8, r9}
   133c4:	mov	r0, #0
   133c8:	str	r2, [sp, #12]
   133cc:	str	r3, [sp, #16]
   133d0:	mov	r2, r7
   133d4:	mov	r3, r4
   133d8:	str	r6, [sp, #24]
   133dc:	mov	r6, r4
   133e0:	bl	12348 <__assert_fail@plt+0x136c>
   133e4:	add	r7, r0, #1
   133e8:	mov	r0, r7
   133ec:	bl	14594 <__assert_fail@plt+0x35b8>
   133f0:	mov	r4, r0
   133f4:	ldr	r0, [r5]
   133f8:	ldr	r2, [r5, #44]	; 0x2c
   133fc:	ldr	r1, [r5, #40]	; 0x28
   13400:	mov	r3, r6
   13404:	stm	sp, {r0, r8, r9}
   13408:	str	r2, [sp, #16]
   1340c:	ldr	r2, [sp, #20]
   13410:	str	r1, [sp, #12]
   13414:	mov	r0, r4
   13418:	mov	r1, r7
   1341c:	bl	12348 <__assert_fail@plt+0x136c>
   13420:	ldr	r0, [sp, #24]
   13424:	str	r0, [sl]
   13428:	mov	r0, r4
   1342c:	sub	sp, fp, #28
   13430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13438:	add	fp, sp, #28
   1343c:	sub	sp, sp, #36	; 0x24
   13440:	movw	r8, #33120	; 0x8160
   13444:	cmp	r3, #0
   13448:	mov	r4, r2
   1344c:	str	r2, [sp, #24]
   13450:	mov	r5, r1
   13454:	mov	r6, r0
   13458:	str	r0, [sp, #20]
   1345c:	movt	r8, #2
   13460:	movne	r8, r3
   13464:	bl	10f10 <__errno_location@plt>
   13468:	str	r0, [sp, #28]
   1346c:	ldr	r1, [r8, #40]	; 0x28
   13470:	ldr	r2, [r8, #44]	; 0x2c
   13474:	ldr	r7, [r0]
   13478:	cmp	r4, #0
   1347c:	add	sl, r8, #8
   13480:	mov	r0, #0
   13484:	ldm	r8, {r3, r9}
   13488:	orreq	r9, r9, #1
   1348c:	stm	sp, {r3, r9, sl}
   13490:	str	r1, [sp, #12]
   13494:	str	r2, [sp, #16]
   13498:	mov	r1, #0
   1349c:	mov	r2, r6
   134a0:	mov	r3, r5
   134a4:	str	r7, [sp, #32]
   134a8:	mov	r7, r5
   134ac:	bl	12348 <__assert_fail@plt+0x136c>
   134b0:	add	r4, r0, #1
   134b4:	mov	r5, r0
   134b8:	mov	r0, r4
   134bc:	bl	14594 <__assert_fail@plt+0x35b8>
   134c0:	mov	r6, r0
   134c4:	ldr	r0, [r8]
   134c8:	ldr	r2, [r8, #44]	; 0x2c
   134cc:	ldr	r1, [r8, #40]	; 0x28
   134d0:	mov	r3, r7
   134d4:	stm	sp, {r0, r9, sl}
   134d8:	str	r2, [sp, #16]
   134dc:	ldr	r2, [sp, #20]
   134e0:	str	r1, [sp, #12]
   134e4:	mov	r0, r6
   134e8:	mov	r1, r4
   134ec:	bl	12348 <__assert_fail@plt+0x136c>
   134f0:	ldr	r0, [sp, #24]
   134f4:	ldr	r1, [sp, #32]
   134f8:	ldr	r2, [sp, #28]
   134fc:	cmp	r0, #0
   13500:	str	r1, [r2]
   13504:	strne	r5, [r0]
   13508:	mov	r0, r6
   1350c:	sub	sp, fp, #28
   13510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13514:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13518:	add	fp, sp, #24
   1351c:	movw	r5, #33004	; 0x80ec
   13520:	movw	r8, #33000	; 0x80e8
   13524:	movt	r5, #2
   13528:	movt	r8, #2
   1352c:	ldr	r0, [r5]
   13530:	ldr	r4, [r8]
   13534:	cmp	r0, #2
   13538:	blt	13564 <__assert_fail@plt+0x2588>
   1353c:	add	r7, r4, #12
   13540:	mov	r6, #0
   13544:	ldr	r0, [r7, r6, lsl #3]
   13548:	bl	16760 <__assert_fail@plt+0x5784>
   1354c:	ldr	r1, [r5]
   13550:	add	r2, r6, #2
   13554:	add	r0, r6, #1
   13558:	mov	r6, r0
   1355c:	cmp	r2, r1
   13560:	blt	13544 <__assert_fail@plt+0x2568>
   13564:	ldr	r0, [r4, #4]
   13568:	movw	r9, #33168	; 0x8190
   1356c:	movw	r7, #33008	; 0x80f0
   13570:	movt	r9, #2
   13574:	movt	r7, #2
   13578:	cmp	r0, r9
   1357c:	beq	1358c <__assert_fail@plt+0x25b0>
   13580:	bl	16760 <__assert_fail@plt+0x5784>
   13584:	mov	r0, #256	; 0x100
   13588:	stm	r7, {r0, r9}
   1358c:	cmp	r4, r7
   13590:	beq	135a0 <__assert_fail@plt+0x25c4>
   13594:	mov	r0, r4
   13598:	bl	16760 <__assert_fail@plt+0x5784>
   1359c:	str	r7, [r8]
   135a0:	mov	r0, #1
   135a4:	str	r0, [r5]
   135a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135ac:	movw	r3, #33120	; 0x8160
   135b0:	mvn	r2, #0
   135b4:	movt	r3, #2
   135b8:	b	135bc <__assert_fail@plt+0x25e0>
   135bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c0:	add	fp, sp, #28
   135c4:	sub	sp, sp, #44	; 0x2c
   135c8:	mov	r7, r3
   135cc:	str	r2, [sp, #36]	; 0x24
   135d0:	str	r1, [sp, #32]
   135d4:	mov	r5, r0
   135d8:	bl	10f10 <__errno_location@plt>
   135dc:	cmp	r5, #0
   135e0:	bmi	13750 <__assert_fail@plt+0x2774>
   135e4:	cmn	r5, #-2147483647	; 0x80000001
   135e8:	beq	13750 <__assert_fail@plt+0x2774>
   135ec:	movw	r8, #33004	; 0x80ec
   135f0:	movw	r4, #33000	; 0x80e8
   135f4:	str	r0, [sp, #28]
   135f8:	ldr	r0, [r0]
   135fc:	movt	r8, #2
   13600:	movt	r4, #2
   13604:	ldr	r1, [r8]
   13608:	ldr	r6, [r4]
   1360c:	str	r0, [sp, #24]
   13610:	cmp	r1, r5
   13614:	ble	13620 <__assert_fail@plt+0x2644>
   13618:	mov	sl, r6
   1361c:	b	1368c <__assert_fail@plt+0x26b0>
   13620:	movw	r9, #33008	; 0x80f0
   13624:	mov	r0, #8
   13628:	str	r1, [fp, #-32]	; 0xffffffe0
   1362c:	sub	r1, r5, r1
   13630:	mvn	r3, #-2147483648	; 0x80000000
   13634:	movt	r9, #2
   13638:	str	r0, [sp]
   1363c:	add	r2, r1, #1
   13640:	sub	r1, fp, #32
   13644:	subs	r0, r6, r9
   13648:	movne	r0, r6
   1364c:	bl	14794 <__assert_fail@plt+0x37b8>
   13650:	mov	sl, r0
   13654:	cmp	r6, r9
   13658:	str	r0, [r4]
   1365c:	bne	13668 <__assert_fail@plt+0x268c>
   13660:	ldrd	r0, [r9]
   13664:	stm	sl, {r0, r1}
   13668:	ldr	r1, [r8]
   1366c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13670:	add	r0, sl, r1, lsl #3
   13674:	sub	r1, r2, r1
   13678:	lsl	r2, r1, #3
   1367c:	mov	r1, #0
   13680:	bl	10f28 <memset@plt>
   13684:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13688:	str	r0, [r8]
   1368c:	mov	r9, sl
   13690:	ldm	r7, {r0, r1}
   13694:	orr	r8, r1, #1
   13698:	add	r1, r7, #8
   1369c:	ldr	r2, [r7, #40]	; 0x28
   136a0:	ldr	r3, [r7, #44]	; 0x2c
   136a4:	ldr	r6, [r9, r5, lsl #3]!
   136a8:	str	r1, [sp, #20]
   136ac:	ldr	r4, [r9, #4]!
   136b0:	stm	sp, {r0, r8}
   136b4:	add	r0, sp, #8
   136b8:	stm	r0, {r1, r2, r3}
   136bc:	ldr	r2, [sp, #32]
   136c0:	ldr	r3, [sp, #36]	; 0x24
   136c4:	mov	r1, r6
   136c8:	mov	r0, r4
   136cc:	bl	12348 <__assert_fail@plt+0x136c>
   136d0:	cmp	r6, r0
   136d4:	bhi	13738 <__assert_fail@plt+0x275c>
   136d8:	add	r6, r0, #1
   136dc:	movw	r0, #33168	; 0x8190
   136e0:	movt	r0, #2
   136e4:	str	r6, [sl, r5, lsl #3]
   136e8:	cmp	r4, r0
   136ec:	beq	136f8 <__assert_fail@plt+0x271c>
   136f0:	mov	r0, r4
   136f4:	bl	16760 <__assert_fail@plt+0x5784>
   136f8:	mov	r0, r6
   136fc:	bl	14594 <__assert_fail@plt+0x35b8>
   13700:	str	r0, [r9]
   13704:	mov	r4, r0
   13708:	add	r3, sp, #8
   1370c:	ldr	r0, [r7]
   13710:	ldr	r1, [r7, #40]	; 0x28
   13714:	ldr	r2, [r7, #44]	; 0x2c
   13718:	stm	sp, {r0, r8}
   1371c:	ldr	r0, [sp, #20]
   13720:	stm	r3, {r0, r1, r2}
   13724:	ldr	r2, [sp, #32]
   13728:	ldr	r3, [sp, #36]	; 0x24
   1372c:	mov	r0, r4
   13730:	mov	r1, r6
   13734:	bl	12348 <__assert_fail@plt+0x136c>
   13738:	ldr	r0, [sp, #28]
   1373c:	ldr	r1, [sp, #24]
   13740:	str	r1, [r0]
   13744:	mov	r0, r4
   13748:	sub	sp, fp, #28
   1374c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13750:	bl	10fc4 <abort@plt>
   13754:	movw	r3, #33120	; 0x8160
   13758:	movt	r3, #2
   1375c:	b	135bc <__assert_fail@plt+0x25e0>
   13760:	movw	r3, #33120	; 0x8160
   13764:	mov	r1, r0
   13768:	mov	r0, #0
   1376c:	mvn	r2, #0
   13770:	movt	r3, #2
   13774:	b	135bc <__assert_fail@plt+0x25e0>
   13778:	movw	r3, #33120	; 0x8160
   1377c:	mov	r2, r1
   13780:	mov	r1, r0
   13784:	mov	r0, #0
   13788:	movt	r3, #2
   1378c:	b	135bc <__assert_fail@plt+0x25e0>
   13790:	push	{fp, lr}
   13794:	mov	fp, sp
   13798:	sub	sp, sp, #48	; 0x30
   1379c:	vmov.i32	q8, #0	; 0x00000000
   137a0:	mov	ip, #32
   137a4:	mov	r3, sp
   137a8:	mov	lr, r2
   137ac:	cmp	r1, #10
   137b0:	add	r2, r3, #16
   137b4:	vst1.64	{d16-d17}, [r3], ip
   137b8:	vst1.64	{d16-d17}, [r2]
   137bc:	vst1.64	{d16-d17}, [r3]
   137c0:	beq	137e0 <__assert_fail@plt+0x2804>
   137c4:	str	r1, [sp]
   137c8:	mov	r3, sp
   137cc:	mov	r1, lr
   137d0:	mvn	r2, #0
   137d4:	bl	135bc <__assert_fail@plt+0x25e0>
   137d8:	mov	sp, fp
   137dc:	pop	{fp, pc}
   137e0:	bl	10fc4 <abort@plt>
   137e4:	push	{r4, sl, fp, lr}
   137e8:	add	fp, sp, #8
   137ec:	sub	sp, sp, #48	; 0x30
   137f0:	vmov.i32	q8, #0	; 0x00000000
   137f4:	mov	ip, r3
   137f8:	mov	r3, sp
   137fc:	mov	lr, #32
   13800:	cmp	r1, #10
   13804:	add	r4, r3, #16
   13808:	vst1.64	{d16-d17}, [r3], lr
   1380c:	vst1.64	{d16-d17}, [r4]
   13810:	vst1.64	{d16-d17}, [r3]
   13814:	beq	13834 <__assert_fail@plt+0x2858>
   13818:	str	r1, [sp]
   1381c:	mov	r1, r2
   13820:	mov	r3, sp
   13824:	mov	r2, ip
   13828:	bl	135bc <__assert_fail@plt+0x25e0>
   1382c:	sub	sp, fp, #8
   13830:	pop	{r4, sl, fp, pc}
   13834:	bl	10fc4 <abort@plt>
   13838:	push	{fp, lr}
   1383c:	mov	fp, sp
   13840:	sub	sp, sp, #48	; 0x30
   13844:	vmov.i32	q8, #0	; 0x00000000
   13848:	mov	r3, sp
   1384c:	mov	ip, #32
   13850:	cmp	r0, #10
   13854:	add	r2, r3, #16
   13858:	vst1.64	{d16-d17}, [r3], ip
   1385c:	vst1.64	{d16-d17}, [r2]
   13860:	vst1.64	{d16-d17}, [r3]
   13864:	beq	13884 <__assert_fail@plt+0x28a8>
   13868:	str	r0, [sp]
   1386c:	mov	r3, sp
   13870:	mov	r0, #0
   13874:	mvn	r2, #0
   13878:	bl	135bc <__assert_fail@plt+0x25e0>
   1387c:	mov	sp, fp
   13880:	pop	{fp, pc}
   13884:	bl	10fc4 <abort@plt>
   13888:	push	{fp, lr}
   1388c:	mov	fp, sp
   13890:	sub	sp, sp, #48	; 0x30
   13894:	vmov.i32	q8, #0	; 0x00000000
   13898:	mov	r3, sp
   1389c:	mov	ip, #32
   138a0:	cmp	r0, #10
   138a4:	add	lr, r3, #16
   138a8:	vst1.64	{d16-d17}, [r3], ip
   138ac:	vst1.64	{d16-d17}, [lr]
   138b0:	vst1.64	{d16-d17}, [r3]
   138b4:	beq	138d0 <__assert_fail@plt+0x28f4>
   138b8:	str	r0, [sp]
   138bc:	mov	r3, sp
   138c0:	mov	r0, #0
   138c4:	bl	135bc <__assert_fail@plt+0x25e0>
   138c8:	mov	sp, fp
   138cc:	pop	{fp, pc}
   138d0:	bl	10fc4 <abort@plt>
   138d4:	push	{r4, sl, fp, lr}
   138d8:	add	fp, sp, #8
   138dc:	sub	sp, sp, #48	; 0x30
   138e0:	mov	lr, r0
   138e4:	movw	r0, #33120	; 0x8160
   138e8:	mov	ip, r1
   138ec:	mov	r1, #32
   138f0:	mov	r4, #1
   138f4:	movt	r0, #2
   138f8:	add	r3, r0, #16
   138fc:	vld1.64	{d16-d17}, [r0], r1
   13900:	vld1.64	{d20-d21}, [r0]
   13904:	vld1.64	{d18-d19}, [r3]
   13908:	mov	r3, sp
   1390c:	add	r0, r3, #32
   13910:	add	r1, r3, #16
   13914:	vst1.64	{d20-d21}, [r0]
   13918:	mov	r0, #28
   1391c:	vst1.64	{d18-d19}, [r1]
   13920:	mov	r1, r3
   13924:	and	r0, r0, r2, lsr #3
   13928:	and	r2, r2, #31
   1392c:	vst1.64	{d16-d17}, [r1], r0
   13930:	ldr	r0, [r1, #8]
   13934:	bic	r4, r4, r0, lsr r2
   13938:	eor	r0, r0, r4, lsl r2
   1393c:	mov	r2, ip
   13940:	str	r0, [r1, #8]
   13944:	mov	r0, #0
   13948:	mov	r1, lr
   1394c:	bl	135bc <__assert_fail@plt+0x25e0>
   13950:	sub	sp, fp, #8
   13954:	pop	{r4, sl, fp, pc}
   13958:	push	{fp, lr}
   1395c:	mov	fp, sp
   13960:	sub	sp, sp, #48	; 0x30
   13964:	mov	ip, r0
   13968:	movw	r0, #33120	; 0x8160
   1396c:	mov	r2, #32
   13970:	movt	r0, #2
   13974:	add	r3, r0, #16
   13978:	vld1.64	{d16-d17}, [r0], r2
   1397c:	vld1.64	{d20-d21}, [r0]
   13980:	vld1.64	{d18-d19}, [r3]
   13984:	mov	r3, sp
   13988:	add	r0, r3, #32
   1398c:	add	r2, r3, #16
   13990:	vst1.64	{d20-d21}, [r0]
   13994:	mov	r0, #28
   13998:	vst1.64	{d18-d19}, [r2]
   1399c:	mov	r2, r3
   139a0:	and	r0, r0, r1, lsr #3
   139a4:	and	r1, r1, #31
   139a8:	vst1.64	{d16-d17}, [r2], r0
   139ac:	mov	r0, #1
   139b0:	ldr	lr, [r2, #8]
   139b4:	bic	r0, r0, lr, lsr r1
   139b8:	eor	r0, lr, r0, lsl r1
   139bc:	mov	r1, ip
   139c0:	str	r0, [r2, #8]
   139c4:	mov	r0, #0
   139c8:	mvn	r2, #0
   139cc:	bl	135bc <__assert_fail@plt+0x25e0>
   139d0:	mov	sp, fp
   139d4:	pop	{fp, pc}
   139d8:	push	{fp, lr}
   139dc:	mov	fp, sp
   139e0:	sub	sp, sp, #48	; 0x30
   139e4:	mov	r1, r0
   139e8:	movw	r0, #33120	; 0x8160
   139ec:	mov	r3, #32
   139f0:	movt	r0, #2
   139f4:	add	r2, r0, #16
   139f8:	vld1.64	{d16-d17}, [r0], r3
   139fc:	mov	r3, sp
   13a00:	vld1.64	{d18-d19}, [r2]
   13a04:	vld1.64	{d20-d21}, [r0]
   13a08:	add	r2, r3, #16
   13a0c:	add	r0, r3, #32
   13a10:	vst1.64	{d18-d19}, [r2]
   13a14:	vst1.64	{d20-d21}, [r0]
   13a18:	mov	r0, #12
   13a1c:	mov	r2, r3
   13a20:	vst1.64	{d16-d17}, [r2], r0
   13a24:	ldr	r0, [r2]
   13a28:	orr	r0, r0, #67108864	; 0x4000000
   13a2c:	str	r0, [r2]
   13a30:	mov	r0, #0
   13a34:	mvn	r2, #0
   13a38:	bl	135bc <__assert_fail@plt+0x25e0>
   13a3c:	mov	sp, fp
   13a40:	pop	{fp, pc}
   13a44:	push	{fp, lr}
   13a48:	mov	fp, sp
   13a4c:	sub	sp, sp, #48	; 0x30
   13a50:	mov	ip, r1
   13a54:	mov	r1, r0
   13a58:	movw	r0, #33120	; 0x8160
   13a5c:	mov	r2, #32
   13a60:	movt	r0, #2
   13a64:	add	r3, r0, #16
   13a68:	vld1.64	{d16-d17}, [r0], r2
   13a6c:	vld1.64	{d18-d19}, [r3]
   13a70:	vld1.64	{d20-d21}, [r0]
   13a74:	mov	r3, sp
   13a78:	add	r2, r3, #16
   13a7c:	add	r0, r3, #32
   13a80:	vst1.64	{d18-d19}, [r2]
   13a84:	vst1.64	{d20-d21}, [r0]
   13a88:	mov	r0, #12
   13a8c:	mov	r2, r3
   13a90:	vst1.64	{d16-d17}, [r2], r0
   13a94:	ldr	r0, [r2]
   13a98:	orr	r0, r0, #67108864	; 0x4000000
   13a9c:	str	r0, [r2]
   13aa0:	mov	r0, #0
   13aa4:	mov	r2, ip
   13aa8:	bl	135bc <__assert_fail@plt+0x25e0>
   13aac:	mov	sp, fp
   13ab0:	pop	{fp, pc}
   13ab4:	push	{r4, sl, fp, lr}
   13ab8:	add	fp, sp, #8
   13abc:	sub	sp, sp, #96	; 0x60
   13ac0:	vmov.i32	q8, #0	; 0x00000000
   13ac4:	mov	ip, r2
   13ac8:	mov	r2, sp
   13acc:	mov	r4, #28
   13ad0:	cmp	r1, #10
   13ad4:	mov	r3, r2
   13ad8:	add	lr, r2, #16
   13adc:	vst1.64	{d16-d17}, [r3], r4
   13ae0:	vst1.64	{d16-d17}, [lr]
   13ae4:	vst1.32	{d16-d17}, [r3]
   13ae8:	beq	13b38 <__assert_fail@plt+0x2b5c>
   13aec:	vld1.64	{d16-d17}, [r2], r4
   13af0:	vld1.64	{d18-d19}, [lr]
   13af4:	add	r3, sp, #48	; 0x30
   13af8:	vld1.32	{d20-d21}, [r2]
   13afc:	add	r2, r3, #20
   13b00:	add	r4, r3, #4
   13b04:	vst1.32	{d18-d19}, [r2]
   13b08:	add	r2, r3, #32
   13b0c:	vst1.32	{d16-d17}, [r4]
   13b10:	vst1.32	{d20-d21}, [r2]
   13b14:	str	r1, [sp, #48]	; 0x30
   13b18:	mvn	r2, #0
   13b1c:	ldr	r1, [sp, #60]	; 0x3c
   13b20:	orr	r1, r1, #67108864	; 0x4000000
   13b24:	str	r1, [sp, #60]	; 0x3c
   13b28:	mov	r1, ip
   13b2c:	bl	135bc <__assert_fail@plt+0x25e0>
   13b30:	sub	sp, fp, #8
   13b34:	pop	{r4, sl, fp, pc}
   13b38:	bl	10fc4 <abort@plt>
   13b3c:	push	{r4, r5, r6, sl, fp, lr}
   13b40:	add	fp, sp, #16
   13b44:	sub	sp, sp, #48	; 0x30
   13b48:	mov	ip, r3
   13b4c:	movw	r3, #33120	; 0x8160
   13b50:	mov	r6, #32
   13b54:	cmp	r1, #0
   13b58:	mov	r4, sp
   13b5c:	movt	r3, #2
   13b60:	cmpne	r2, #0
   13b64:	add	r5, r4, #16
   13b68:	add	lr, r3, #16
   13b6c:	vld1.64	{d16-d17}, [r3], r6
   13b70:	vld1.64	{d18-d19}, [lr]
   13b74:	vld1.64	{d20-d21}, [r3]
   13b78:	mov	r3, #10
   13b7c:	vst1.64	{d16-d17}, [r4], r6
   13b80:	vst1.64	{d18-d19}, [r5]
   13b84:	vst1.64	{d20-d21}, [r4]
   13b88:	str	r3, [sp]
   13b8c:	bne	13b94 <__assert_fail@plt+0x2bb8>
   13b90:	bl	10fc4 <abort@plt>
   13b94:	str	r2, [sp, #44]	; 0x2c
   13b98:	str	r1, [sp, #40]	; 0x28
   13b9c:	mov	r3, sp
   13ba0:	mov	r1, ip
   13ba4:	mvn	r2, #0
   13ba8:	bl	135bc <__assert_fail@plt+0x25e0>
   13bac:	sub	sp, fp, #16
   13bb0:	pop	{r4, r5, r6, sl, fp, pc}
   13bb4:	push	{r4, r5, r6, sl, fp, lr}
   13bb8:	add	fp, sp, #16
   13bbc:	sub	sp, sp, #48	; 0x30
   13bc0:	mov	lr, r3
   13bc4:	movw	r3, #33120	; 0x8160
   13bc8:	mov	r6, #32
   13bcc:	cmp	r1, #0
   13bd0:	mov	r4, sp
   13bd4:	movt	r3, #2
   13bd8:	cmpne	r2, #0
   13bdc:	add	r5, r4, #16
   13be0:	add	ip, r3, #16
   13be4:	vld1.64	{d16-d17}, [r3], r6
   13be8:	vld1.64	{d18-d19}, [ip]
   13bec:	vld1.64	{d20-d21}, [r3]
   13bf0:	mov	r3, #10
   13bf4:	vst1.64	{d16-d17}, [r4], r6
   13bf8:	vst1.64	{d18-d19}, [r5]
   13bfc:	vst1.64	{d20-d21}, [r4]
   13c00:	str	r3, [sp]
   13c04:	bne	13c0c <__assert_fail@plt+0x2c30>
   13c08:	bl	10fc4 <abort@plt>
   13c0c:	ldr	ip, [fp, #8]
   13c10:	str	r2, [sp, #44]	; 0x2c
   13c14:	str	r1, [sp, #40]	; 0x28
   13c18:	mov	r3, sp
   13c1c:	mov	r1, lr
   13c20:	mov	r2, ip
   13c24:	bl	135bc <__assert_fail@plt+0x25e0>
   13c28:	sub	sp, fp, #16
   13c2c:	pop	{r4, r5, r6, sl, fp, pc}
   13c30:	push	{r4, sl, fp, lr}
   13c34:	add	fp, sp, #8
   13c38:	sub	sp, sp, #48	; 0x30
   13c3c:	movw	r3, #33120	; 0x8160
   13c40:	mov	lr, #32
   13c44:	mov	ip, r2
   13c48:	cmp	r0, #0
   13c4c:	movt	r3, #2
   13c50:	cmpne	r1, #0
   13c54:	add	r2, r3, #16
   13c58:	vld1.64	{d16-d17}, [r3], lr
   13c5c:	vld1.64	{d20-d21}, [r3]
   13c60:	vld1.64	{d18-d19}, [r2]
   13c64:	mov	r2, sp
   13c68:	add	r4, r2, #16
   13c6c:	vst1.64	{d16-d17}, [r2], lr
   13c70:	vst1.64	{d20-d21}, [r2]
   13c74:	mov	r2, #10
   13c78:	vst1.64	{d18-d19}, [r4]
   13c7c:	str	r2, [sp]
   13c80:	bne	13c88 <__assert_fail@plt+0x2cac>
   13c84:	bl	10fc4 <abort@plt>
   13c88:	str	r1, [sp, #44]	; 0x2c
   13c8c:	str	r0, [sp, #40]	; 0x28
   13c90:	mov	r3, sp
   13c94:	mov	r0, #0
   13c98:	mov	r1, ip
   13c9c:	mvn	r2, #0
   13ca0:	bl	135bc <__assert_fail@plt+0x25e0>
   13ca4:	sub	sp, fp, #8
   13ca8:	pop	{r4, sl, fp, pc}
   13cac:	push	{r4, r5, fp, lr}
   13cb0:	add	fp, sp, #8
   13cb4:	sub	sp, sp, #48	; 0x30
   13cb8:	mov	ip, r3
   13cbc:	movw	r3, #33120	; 0x8160
   13cc0:	mov	r4, #32
   13cc4:	mov	lr, r2
   13cc8:	cmp	r0, #0
   13ccc:	movt	r3, #2
   13cd0:	cmpne	r1, #0
   13cd4:	add	r2, r3, #16
   13cd8:	vld1.64	{d16-d17}, [r3], r4
   13cdc:	vld1.64	{d20-d21}, [r3]
   13ce0:	vld1.64	{d18-d19}, [r2]
   13ce4:	mov	r2, sp
   13ce8:	add	r5, r2, #16
   13cec:	vst1.64	{d16-d17}, [r2], r4
   13cf0:	vst1.64	{d20-d21}, [r2]
   13cf4:	mov	r2, #10
   13cf8:	vst1.64	{d18-d19}, [r5]
   13cfc:	str	r2, [sp]
   13d00:	bne	13d08 <__assert_fail@plt+0x2d2c>
   13d04:	bl	10fc4 <abort@plt>
   13d08:	str	r1, [sp, #44]	; 0x2c
   13d0c:	str	r0, [sp, #40]	; 0x28
   13d10:	mov	r3, sp
   13d14:	mov	r0, #0
   13d18:	mov	r1, lr
   13d1c:	mov	r2, ip
   13d20:	bl	135bc <__assert_fail@plt+0x25e0>
   13d24:	sub	sp, fp, #8
   13d28:	pop	{r4, r5, fp, pc}
   13d2c:	movw	r3, #33016	; 0x80f8
   13d30:	movt	r3, #2
   13d34:	b	135bc <__assert_fail@plt+0x25e0>
   13d38:	movw	r3, #33016	; 0x80f8
   13d3c:	mov	r2, r1
   13d40:	mov	r1, r0
   13d44:	mov	r0, #0
   13d48:	movt	r3, #2
   13d4c:	b	135bc <__assert_fail@plt+0x25e0>
   13d50:	movw	r3, #33016	; 0x80f8
   13d54:	mvn	r2, #0
   13d58:	movt	r3, #2
   13d5c:	b	135bc <__assert_fail@plt+0x25e0>
   13d60:	movw	r3, #33016	; 0x80f8
   13d64:	mov	r1, r0
   13d68:	mov	r0, #0
   13d6c:	mvn	r2, #0
   13d70:	movt	r3, #2
   13d74:	b	135bc <__assert_fail@plt+0x25e0>
   13d78:	push	{r4, r5, fp, lr}
   13d7c:	add	fp, sp, #8
   13d80:	mov	r5, r0
   13d84:	mov	r4, r1
   13d88:	mov	r0, #0
   13d8c:	mov	r2, #5
   13d90:	mov	r1, r5
   13d94:	bl	10e08 <dcgettext@plt>
   13d98:	cmp	r0, r5
   13d9c:	popne	{r4, r5, fp, pc}
   13da0:	bl	16830 <__assert_fail@plt+0x5854>
   13da4:	ldrb	r1, [r0]
   13da8:	and	r1, r1, #223	; 0xdf
   13dac:	cmp	r1, #71	; 0x47
   13db0:	beq	13e18 <__assert_fail@plt+0x2e3c>
   13db4:	cmp	r1, #85	; 0x55
   13db8:	bne	13e70 <__assert_fail@plt+0x2e94>
   13dbc:	ldrb	r1, [r0, #1]
   13dc0:	and	r1, r1, #223	; 0xdf
   13dc4:	cmp	r1, #84	; 0x54
   13dc8:	bne	13e70 <__assert_fail@plt+0x2e94>
   13dcc:	ldrb	r1, [r0, #2]
   13dd0:	and	r1, r1, #223	; 0xdf
   13dd4:	cmp	r1, #70	; 0x46
   13dd8:	bne	13e70 <__assert_fail@plt+0x2e94>
   13ddc:	ldrb	r1, [r0, #3]
   13de0:	cmp	r1, #45	; 0x2d
   13de4:	bne	13e70 <__assert_fail@plt+0x2e94>
   13de8:	ldrb	r1, [r0, #4]
   13dec:	cmp	r1, #56	; 0x38
   13df0:	bne	13e70 <__assert_fail@plt+0x2e94>
   13df4:	ldrb	r0, [r0, #5]
   13df8:	cmp	r0, #0
   13dfc:	bne	13e70 <__assert_fail@plt+0x2e94>
   13e00:	ldrb	r1, [r5]
   13e04:	movw	r2, #30296	; 0x7658
   13e08:	movw	r0, #30300	; 0x765c
   13e0c:	movt	r2, #1
   13e10:	movt	r0, #1
   13e14:	b	13ea0 <__assert_fail@plt+0x2ec4>
   13e18:	ldrb	r1, [r0, #1]
   13e1c:	and	r1, r1, #223	; 0xdf
   13e20:	cmp	r1, #66	; 0x42
   13e24:	bne	13e70 <__assert_fail@plt+0x2e94>
   13e28:	ldrb	r1, [r0, #2]
   13e2c:	cmp	r1, #49	; 0x31
   13e30:	bne	13e70 <__assert_fail@plt+0x2e94>
   13e34:	ldrb	r1, [r0, #3]
   13e38:	cmp	r1, #56	; 0x38
   13e3c:	bne	13e70 <__assert_fail@plt+0x2e94>
   13e40:	ldrb	r1, [r0, #4]
   13e44:	cmp	r1, #48	; 0x30
   13e48:	bne	13e70 <__assert_fail@plt+0x2e94>
   13e4c:	ldrb	r1, [r0, #5]
   13e50:	cmp	r1, #51	; 0x33
   13e54:	bne	13e70 <__assert_fail@plt+0x2e94>
   13e58:	ldrb	r1, [r0, #6]
   13e5c:	cmp	r1, #48	; 0x30
   13e60:	bne	13e70 <__assert_fail@plt+0x2e94>
   13e64:	ldrb	r0, [r0, #7]
   13e68:	cmp	r0, #0
   13e6c:	beq	13e8c <__assert_fail@plt+0x2eb0>
   13e70:	movw	r1, #30290	; 0x7652
   13e74:	movw	r0, #30294	; 0x7656
   13e78:	cmp	r4, #9
   13e7c:	movt	r1, #1
   13e80:	movt	r0, #1
   13e84:	moveq	r0, r1
   13e88:	pop	{r4, r5, fp, pc}
   13e8c:	ldrb	r1, [r5]
   13e90:	movw	r2, #30304	; 0x7660
   13e94:	movw	r0, #30308	; 0x7664
   13e98:	movt	r2, #1
   13e9c:	movt	r0, #1
   13ea0:	cmp	r1, #96	; 0x60
   13ea4:	moveq	r0, r2
   13ea8:	pop	{r4, r5, fp, pc}
   13eac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13eb0:	add	fp, sp, #24
   13eb4:	sub	sp, sp, #32
   13eb8:	ldr	r6, [fp, #12]
   13ebc:	ldr	r7, [fp, #8]
   13ec0:	mov	r4, r2
   13ec4:	mov	r8, r0
   13ec8:	cmp	r1, #0
   13ecc:	beq	13ef4 <__assert_fail@plt+0x2f18>
   13ed0:	movw	r2, #30396	; 0x76bc
   13ed4:	mov	r5, r1
   13ed8:	str	r3, [sp, #4]
   13edc:	str	r4, [sp]
   13ee0:	mov	r0, r8
   13ee4:	mov	r1, #1
   13ee8:	movt	r2, #1
   13eec:	mov	r3, r5
   13ef0:	b	13f0c <__assert_fail@plt+0x2f30>
   13ef4:	movw	r2, #30408	; 0x76c8
   13ef8:	str	r3, [sp]
   13efc:	mov	r0, r8
   13f00:	mov	r1, #1
   13f04:	mov	r3, r4
   13f08:	movt	r2, #1
   13f0c:	bl	10f4c <__fprintf_chk@plt>
   13f10:	movw	r1, #30415	; 0x76cf
   13f14:	mov	r0, #0
   13f18:	mov	r2, #5
   13f1c:	movt	r1, #1
   13f20:	bl	10e08 <dcgettext@plt>
   13f24:	movw	r2, #31133	; 0x799d
   13f28:	mov	r3, r0
   13f2c:	movw	r0, #2022	; 0x7e6
   13f30:	mov	r1, #1
   13f34:	movt	r2, #1
   13f38:	str	r0, [sp]
   13f3c:	mov	r0, r8
   13f40:	bl	10f4c <__fprintf_chk@plt>
   13f44:	movw	r4, #29739	; 0x742b
   13f48:	mov	r1, r8
   13f4c:	movt	r4, #1
   13f50:	mov	r0, r4
   13f54:	bl	10d9c <fputs_unlocked@plt>
   13f58:	movw	r1, #30419	; 0x76d3
   13f5c:	mov	r0, #0
   13f60:	mov	r2, #5
   13f64:	movt	r1, #1
   13f68:	bl	10e08 <dcgettext@plt>
   13f6c:	movw	r3, #30590	; 0x777e
   13f70:	mov	r2, r0
   13f74:	mov	r0, r8
   13f78:	mov	r1, #1
   13f7c:	movt	r3, #1
   13f80:	bl	10f4c <__fprintf_chk@plt>
   13f84:	mov	r0, r4
   13f88:	mov	r1, r8
   13f8c:	bl	10d9c <fputs_unlocked@plt>
   13f90:	cmp	r6, #9
   13f94:	bhi	13fd0 <__assert_fail@plt+0x2ff4>
   13f98:	add	r0, pc, #0
   13f9c:	ldr	pc, [r0, r6, lsl #2]
   13fa0:	andeq	r3, r1, r8, asr #31
   13fa4:	ldrdeq	r3, [r1], -ip
   13fa8:	andeq	r4, r1, ip
   13fac:	andeq	r4, r1, r4, lsr r0
   13fb0:	andeq	r4, r1, ip, asr r0
   13fb4:	andeq	r4, r1, r4, lsl #1
   13fb8:	andeq	r4, r1, ip, lsr #1
   13fbc:	andeq	r4, r1, r4, ror #1
   13fc0:	andeq	r4, r1, r4, lsl #3
   13fc4:	andeq	r4, r1, ip, lsr #2
   13fc8:	sub	sp, fp, #24
   13fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fd0:	movw	r1, #30943	; 0x78df
   13fd4:	movt	r1, #1
   13fd8:	b	14134 <__assert_fail@plt+0x3158>
   13fdc:	movw	r1, #30624	; 0x77a0
   13fe0:	mov	r0, #0
   13fe4:	mov	r2, #5
   13fe8:	movt	r1, #1
   13fec:	bl	10e08 <dcgettext@plt>
   13ff0:	ldr	r3, [r7]
   13ff4:	mov	r2, r0
   13ff8:	mov	r0, r8
   13ffc:	mov	r1, #1
   14000:	sub	sp, fp, #24
   14004:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14008:	b	10f4c <__fprintf_chk@plt>
   1400c:	movw	r1, #30640	; 0x77b0
   14010:	mov	r0, #0
   14014:	mov	r2, #5
   14018:	movt	r1, #1
   1401c:	bl	10e08 <dcgettext@plt>
   14020:	mov	r2, r0
   14024:	ldr	r3, [r7]
   14028:	ldr	r0, [r7, #4]
   1402c:	str	r0, [sp]
   14030:	b	14120 <__assert_fail@plt+0x3144>
   14034:	movw	r1, #30663	; 0x77c7
   14038:	mov	r0, #0
   1403c:	mov	r2, #5
   14040:	movt	r1, #1
   14044:	bl	10e08 <dcgettext@plt>
   14048:	mov	r2, r0
   1404c:	ldr	r3, [r7]
   14050:	ldmib	r7, {r0, r1}
   14054:	stm	sp, {r0, r1}
   14058:	b	14120 <__assert_fail@plt+0x3144>
   1405c:	movw	r1, #30691	; 0x77e3
   14060:	mov	r0, #0
   14064:	mov	r2, #5
   14068:	movt	r1, #1
   1406c:	bl	10e08 <dcgettext@plt>
   14070:	ldr	r3, [r7]
   14074:	mov	r2, r0
   14078:	ldmib	r7, {r0, r1, r7}
   1407c:	stm	sp, {r0, r1, r7}
   14080:	b	14120 <__assert_fail@plt+0x3144>
   14084:	movw	r1, #30723	; 0x7803
   14088:	mov	r0, #0
   1408c:	mov	r2, #5
   14090:	movt	r1, #1
   14094:	bl	10e08 <dcgettext@plt>
   14098:	ldr	r3, [r7]
   1409c:	mov	r2, r0
   140a0:	ldmib	r7, {r0, r1, r6, r7}
   140a4:	stm	sp, {r0, r1, r6, r7}
   140a8:	b	14120 <__assert_fail@plt+0x3144>
   140ac:	movw	r1, #30759	; 0x7827
   140b0:	mov	r0, #0
   140b4:	mov	r2, #5
   140b8:	movt	r1, #1
   140bc:	bl	10e08 <dcgettext@plt>
   140c0:	mov	r2, r0
   140c4:	ldr	r3, [r7]
   140c8:	ldmib	r7, {r0, r1, r6}
   140cc:	ldr	r5, [r7, #16]
   140d0:	ldr	r7, [r7, #20]
   140d4:	stm	sp, {r0, r1, r6}
   140d8:	str	r5, [sp, #12]
   140dc:	str	r7, [sp, #16]
   140e0:	b	14120 <__assert_fail@plt+0x3144>
   140e4:	movw	r1, #30799	; 0x784f
   140e8:	mov	r0, #0
   140ec:	mov	r2, #5
   140f0:	movt	r1, #1
   140f4:	bl	10e08 <dcgettext@plt>
   140f8:	mov	r2, r0
   140fc:	ldr	r3, [r7]
   14100:	ldmib	r7, {r0, r1, r6}
   14104:	ldr	r5, [r7, #16]
   14108:	ldr	r4, [r7, #20]
   1410c:	ldr	r7, [r7, #24]
   14110:	stm	sp, {r0, r1, r6}
   14114:	str	r5, [sp, #12]
   14118:	str	r4, [sp, #16]
   1411c:	str	r7, [sp, #20]
   14120:	mov	r0, r8
   14124:	mov	r1, #1
   14128:	b	141d4 <__assert_fail@plt+0x31f8>
   1412c:	movw	r1, #30891	; 0x78ab
   14130:	movt	r1, #1
   14134:	mov	r0, #0
   14138:	mov	r2, #5
   1413c:	bl	10e08 <dcgettext@plt>
   14140:	mov	ip, r0
   14144:	ldr	r3, [r7]
   14148:	ldr	r0, [r7, #4]
   1414c:	ldr	r1, [r7, #8]
   14150:	ldr	r6, [r7, #12]
   14154:	ldr	r5, [r7, #16]
   14158:	ldr	r4, [r7, #20]
   1415c:	ldr	r2, [r7, #24]
   14160:	ldr	lr, [r7, #28]
   14164:	ldr	r7, [r7, #32]
   14168:	stm	sp, {r0, r1, r6}
   1416c:	str	r5, [sp, #12]
   14170:	str	r4, [sp, #16]
   14174:	str	r2, [sp, #20]
   14178:	str	lr, [sp, #24]
   1417c:	str	r7, [sp, #28]
   14180:	b	141c8 <__assert_fail@plt+0x31ec>
   14184:	movw	r1, #30843	; 0x787b
   14188:	mov	r0, #0
   1418c:	mov	r2, #5
   14190:	movt	r1, #1
   14194:	bl	10e08 <dcgettext@plt>
   14198:	mov	ip, r0
   1419c:	ldr	r3, [r7]
   141a0:	ldmib	r7, {r0, r1, r6}
   141a4:	ldr	r5, [r7, #16]
   141a8:	ldr	r4, [r7, #20]
   141ac:	ldr	r2, [r7, #24]
   141b0:	ldr	r7, [r7, #28]
   141b4:	stm	sp, {r0, r1, r6}
   141b8:	str	r5, [sp, #12]
   141bc:	str	r4, [sp, #16]
   141c0:	str	r2, [sp, #20]
   141c4:	str	r7, [sp, #24]
   141c8:	mov	r0, r8
   141cc:	mov	r1, #1
   141d0:	mov	r2, ip
   141d4:	bl	10f4c <__fprintf_chk@plt>
   141d8:	sub	sp, fp, #24
   141dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141e0:	push	{r4, sl, fp, lr}
   141e4:	add	fp, sp, #8
   141e8:	sub	sp, sp, #8
   141ec:	ldr	ip, [fp, #8]
   141f0:	mov	lr, #0
   141f4:	ldr	r4, [ip, lr, lsl #2]
   141f8:	add	lr, lr, #1
   141fc:	cmp	r4, #0
   14200:	bne	141f4 <__assert_fail@plt+0x3218>
   14204:	sub	r4, lr, #1
   14208:	str	ip, [sp]
   1420c:	str	r4, [sp, #4]
   14210:	bl	13eac <__assert_fail@plt+0x2ed0>
   14214:	sub	sp, fp, #8
   14218:	pop	{r4, sl, fp, pc}
   1421c:	push	{fp, lr}
   14220:	mov	fp, sp
   14224:	sub	sp, sp, #48	; 0x30
   14228:	ldr	ip, [fp, #8]
   1422c:	ldr	lr, [ip]
   14230:	cmp	lr, #0
   14234:	str	lr, [sp, #8]
   14238:	beq	142d4 <__assert_fail@plt+0x32f8>
   1423c:	ldr	lr, [ip, #4]
   14240:	cmp	lr, #0
   14244:	str	lr, [sp, #12]
   14248:	beq	142dc <__assert_fail@plt+0x3300>
   1424c:	ldr	lr, [ip, #8]
   14250:	cmp	lr, #0
   14254:	str	lr, [sp, #16]
   14258:	beq	142e4 <__assert_fail@plt+0x3308>
   1425c:	ldr	lr, [ip, #12]
   14260:	cmp	lr, #0
   14264:	str	lr, [sp, #20]
   14268:	beq	142ec <__assert_fail@plt+0x3310>
   1426c:	ldr	lr, [ip, #16]
   14270:	cmp	lr, #0
   14274:	str	lr, [sp, #24]
   14278:	beq	142f4 <__assert_fail@plt+0x3318>
   1427c:	ldr	lr, [ip, #20]
   14280:	cmp	lr, #0
   14284:	str	lr, [sp, #28]
   14288:	beq	142fc <__assert_fail@plt+0x3320>
   1428c:	ldr	lr, [ip, #24]
   14290:	cmp	lr, #0
   14294:	str	lr, [sp, #32]
   14298:	beq	14304 <__assert_fail@plt+0x3328>
   1429c:	ldr	lr, [ip, #28]
   142a0:	cmp	lr, #0
   142a4:	str	lr, [sp, #36]	; 0x24
   142a8:	beq	1430c <__assert_fail@plt+0x3330>
   142ac:	ldr	lr, [ip, #32]
   142b0:	cmp	lr, #0
   142b4:	str	lr, [sp, #40]	; 0x28
   142b8:	beq	14314 <__assert_fail@plt+0x3338>
   142bc:	ldr	lr, [ip, #36]	; 0x24
   142c0:	mov	ip, #10
   142c4:	cmp	lr, #0
   142c8:	str	lr, [sp, #44]	; 0x2c
   142cc:	movweq	ip, #9
   142d0:	b	14318 <__assert_fail@plt+0x333c>
   142d4:	mov	ip, #0
   142d8:	b	14318 <__assert_fail@plt+0x333c>
   142dc:	mov	ip, #1
   142e0:	b	14318 <__assert_fail@plt+0x333c>
   142e4:	mov	ip, #2
   142e8:	b	14318 <__assert_fail@plt+0x333c>
   142ec:	mov	ip, #3
   142f0:	b	14318 <__assert_fail@plt+0x333c>
   142f4:	mov	ip, #4
   142f8:	b	14318 <__assert_fail@plt+0x333c>
   142fc:	mov	ip, #5
   14300:	b	14318 <__assert_fail@plt+0x333c>
   14304:	mov	ip, #6
   14308:	b	14318 <__assert_fail@plt+0x333c>
   1430c:	mov	ip, #7
   14310:	b	14318 <__assert_fail@plt+0x333c>
   14314:	mov	ip, #8
   14318:	add	lr, sp, #8
   1431c:	str	ip, [sp, #4]
   14320:	str	lr, [sp]
   14324:	bl	13eac <__assert_fail@plt+0x2ed0>
   14328:	mov	sp, fp
   1432c:	pop	{fp, pc}
   14330:	push	{fp, lr}
   14334:	mov	fp, sp
   14338:	sub	sp, sp, #56	; 0x38
   1433c:	add	ip, fp, #8
   14340:	str	ip, [sp, #12]
   14344:	ldr	lr, [fp, #8]
   14348:	cmp	lr, #0
   1434c:	str	lr, [sp, #16]
   14350:	beq	143ec <__assert_fail@plt+0x3410>
   14354:	ldr	lr, [ip, #4]
   14358:	cmp	lr, #0
   1435c:	str	lr, [sp, #20]
   14360:	beq	143f4 <__assert_fail@plt+0x3418>
   14364:	ldr	lr, [ip, #8]
   14368:	cmp	lr, #0
   1436c:	str	lr, [sp, #24]
   14370:	beq	143fc <__assert_fail@plt+0x3420>
   14374:	ldr	lr, [ip, #12]
   14378:	cmp	lr, #0
   1437c:	str	lr, [sp, #28]
   14380:	beq	14404 <__assert_fail@plt+0x3428>
   14384:	ldr	lr, [ip, #16]
   14388:	cmp	lr, #0
   1438c:	str	lr, [sp, #32]
   14390:	beq	1440c <__assert_fail@plt+0x3430>
   14394:	ldr	lr, [ip, #20]
   14398:	cmp	lr, #0
   1439c:	str	lr, [sp, #36]	; 0x24
   143a0:	beq	14414 <__assert_fail@plt+0x3438>
   143a4:	ldr	lr, [ip, #24]
   143a8:	cmp	lr, #0
   143ac:	str	lr, [sp, #40]	; 0x28
   143b0:	beq	1441c <__assert_fail@plt+0x3440>
   143b4:	ldr	lr, [ip, #28]
   143b8:	cmp	lr, #0
   143bc:	str	lr, [sp, #44]	; 0x2c
   143c0:	beq	14424 <__assert_fail@plt+0x3448>
   143c4:	ldr	lr, [ip, #32]
   143c8:	cmp	lr, #0
   143cc:	str	lr, [sp, #48]	; 0x30
   143d0:	beq	1442c <__assert_fail@plt+0x3450>
   143d4:	ldr	lr, [ip, #36]	; 0x24
   143d8:	mov	ip, #10
   143dc:	cmp	lr, #0
   143e0:	str	lr, [sp, #52]	; 0x34
   143e4:	movweq	ip, #9
   143e8:	b	14430 <__assert_fail@plt+0x3454>
   143ec:	mov	ip, #0
   143f0:	b	14430 <__assert_fail@plt+0x3454>
   143f4:	mov	ip, #1
   143f8:	b	14430 <__assert_fail@plt+0x3454>
   143fc:	mov	ip, #2
   14400:	b	14430 <__assert_fail@plt+0x3454>
   14404:	mov	ip, #3
   14408:	b	14430 <__assert_fail@plt+0x3454>
   1440c:	mov	ip, #4
   14410:	b	14430 <__assert_fail@plt+0x3454>
   14414:	mov	ip, #5
   14418:	b	14430 <__assert_fail@plt+0x3454>
   1441c:	mov	ip, #6
   14420:	b	14430 <__assert_fail@plt+0x3454>
   14424:	mov	ip, #7
   14428:	b	14430 <__assert_fail@plt+0x3454>
   1442c:	mov	ip, #8
   14430:	add	lr, sp, #16
   14434:	str	ip, [sp, #4]
   14438:	str	lr, [sp]
   1443c:	bl	13eac <__assert_fail@plt+0x2ed0>
   14440:	mov	sp, fp
   14444:	pop	{fp, pc}
   14448:	push	{fp, lr}
   1444c:	mov	fp, sp
   14450:	movw	r0, #33084	; 0x813c
   14454:	movt	r0, #2
   14458:	ldr	r1, [r0]
   1445c:	movw	r0, #29739	; 0x742b
   14460:	movt	r0, #1
   14464:	bl	10d9c <fputs_unlocked@plt>
   14468:	movw	r1, #31003	; 0x791b
   1446c:	mov	r0, #0
   14470:	mov	r2, #5
   14474:	movt	r1, #1
   14478:	bl	10e08 <dcgettext@plt>
   1447c:	movw	r2, #31023	; 0x792f
   14480:	mov	r1, r0
   14484:	mov	r0, #1
   14488:	movt	r2, #1
   1448c:	bl	10f34 <__printf_chk@plt>
   14490:	movw	r1, #31045	; 0x7945
   14494:	mov	r0, #0
   14498:	mov	r2, #5
   1449c:	movt	r1, #1
   144a0:	bl	10e08 <dcgettext@plt>
   144a4:	movw	r2, #28872	; 0x70c8
   144a8:	movw	r3, #29548	; 0x736c
   144ac:	mov	r1, r0
   144b0:	mov	r0, #1
   144b4:	movt	r2, #1
   144b8:	movt	r3, #1
   144bc:	bl	10f34 <__printf_chk@plt>
   144c0:	movw	r1, #31065	; 0x7959
   144c4:	mov	r0, #0
   144c8:	mov	r2, #5
   144cc:	movt	r1, #1
   144d0:	bl	10e08 <dcgettext@plt>
   144d4:	movw	r2, #31104	; 0x7980
   144d8:	mov	r1, r0
   144dc:	mov	r0, #1
   144e0:	movt	r2, #1
   144e4:	pop	{fp, lr}
   144e8:	b	10f34 <__printf_chk@plt>
   144ec:	push	{r4, r5, r6, sl, fp, lr}
   144f0:	add	fp, sp, #16
   144f4:	mov	r4, r2
   144f8:	mov	r5, r1
   144fc:	mov	r6, r0
   14500:	bl	168cc <__assert_fail@plt+0x58f0>
   14504:	cmp	r0, #0
   14508:	popne	{r4, r5, r6, sl, fp, pc}
   1450c:	cmp	r6, #0
   14510:	beq	14524 <__assert_fail@plt+0x3548>
   14514:	cmp	r5, #0
   14518:	cmpne	r4, #0
   1451c:	bne	14524 <__assert_fail@plt+0x3548>
   14520:	pop	{r4, r5, r6, sl, fp, pc}
   14524:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14528:	push	{r4, r5, r6, sl, fp, lr}
   1452c:	add	fp, sp, #16
   14530:	mov	r4, r2
   14534:	mov	r5, r1
   14538:	mov	r6, r0
   1453c:	bl	168cc <__assert_fail@plt+0x58f0>
   14540:	cmp	r0, #0
   14544:	popne	{r4, r5, r6, sl, fp, pc}
   14548:	cmp	r6, #0
   1454c:	beq	14560 <__assert_fail@plt+0x3584>
   14550:	cmp	r5, #0
   14554:	cmpne	r4, #0
   14558:	bne	14560 <__assert_fail@plt+0x3584>
   1455c:	pop	{r4, r5, r6, sl, fp, pc}
   14560:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14564:	push	{fp, lr}
   14568:	mov	fp, sp
   1456c:	bl	16560 <__assert_fail@plt+0x5584>
   14570:	cmp	r0, #0
   14574:	popne	{fp, pc}
   14578:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   1457c:	push	{fp, lr}
   14580:	mov	fp, sp
   14584:	bl	16560 <__assert_fail@plt+0x5584>
   14588:	cmp	r0, #0
   1458c:	popne	{fp, pc}
   14590:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14594:	push	{fp, lr}
   14598:	mov	fp, sp
   1459c:	bl	16560 <__assert_fail@plt+0x5584>
   145a0:	cmp	r0, #0
   145a4:	popne	{fp, pc}
   145a8:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   145ac:	push	{r4, r5, fp, lr}
   145b0:	add	fp, sp, #8
   145b4:	mov	r4, r1
   145b8:	mov	r5, r0
   145bc:	bl	16590 <__assert_fail@plt+0x55b4>
   145c0:	cmp	r0, #0
   145c4:	popne	{r4, r5, fp, pc}
   145c8:	cmp	r5, #0
   145cc:	beq	145dc <__assert_fail@plt+0x3600>
   145d0:	cmp	r4, #0
   145d4:	bne	145dc <__assert_fail@plt+0x3600>
   145d8:	pop	{r4, r5, fp, pc}
   145dc:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   145e0:	push	{fp, lr}
   145e4:	mov	fp, sp
   145e8:	cmp	r1, #0
   145ec:	orreq	r1, r1, #1
   145f0:	bl	16590 <__assert_fail@plt+0x55b4>
   145f4:	cmp	r0, #0
   145f8:	popne	{fp, pc}
   145fc:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14600:	push	{fp, lr}
   14604:	mov	fp, sp
   14608:	clz	r3, r2
   1460c:	lsr	ip, r3, #5
   14610:	clz	r3, r1
   14614:	lsr	r3, r3, #5
   14618:	orrs	r3, r3, ip
   1461c:	movwne	r1, #1
   14620:	movwne	r2, #1
   14624:	bl	168cc <__assert_fail@plt+0x58f0>
   14628:	cmp	r0, #0
   1462c:	popne	{fp, pc}
   14630:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14634:	push	{fp, lr}
   14638:	mov	fp, sp
   1463c:	mov	r2, r1
   14640:	mov	r1, r0
   14644:	mov	r0, #0
   14648:	bl	168cc <__assert_fail@plt+0x58f0>
   1464c:	cmp	r0, #0
   14650:	popne	{fp, pc}
   14654:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14658:	push	{fp, lr}
   1465c:	mov	fp, sp
   14660:	mov	r2, r1
   14664:	mov	r1, r0
   14668:	clz	r0, r2
   1466c:	clz	r3, r1
   14670:	lsr	r0, r0, #5
   14674:	lsr	r3, r3, #5
   14678:	orrs	r0, r3, r0
   1467c:	mov	r0, #0
   14680:	movwne	r1, #1
   14684:	movwne	r2, #1
   14688:	bl	168cc <__assert_fail@plt+0x58f0>
   1468c:	cmp	r0, #0
   14690:	popne	{fp, pc}
   14694:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14698:	push	{r4, r5, r6, sl, fp, lr}
   1469c:	add	fp, sp, #16
   146a0:	ldr	r5, [r1]
   146a4:	mov	r4, r1
   146a8:	mov	r6, r0
   146ac:	cmp	r0, #0
   146b0:	beq	146c8 <__assert_fail@plt+0x36ec>
   146b4:	mov	r0, #1
   146b8:	add	r0, r0, r5, lsr #1
   146bc:	adds	r5, r5, r0
   146c0:	bcc	146d0 <__assert_fail@plt+0x36f4>
   146c4:	b	1470c <__assert_fail@plt+0x3730>
   146c8:	cmp	r5, #0
   146cc:	movweq	r5, #64	; 0x40
   146d0:	mov	r0, r6
   146d4:	mov	r1, r5
   146d8:	mov	r2, #1
   146dc:	bl	168cc <__assert_fail@plt+0x58f0>
   146e0:	cmp	r5, #0
   146e4:	mov	r1, r5
   146e8:	movwne	r1, #1
   146ec:	cmp	r0, #0
   146f0:	bne	14704 <__assert_fail@plt+0x3728>
   146f4:	clz	r2, r6
   146f8:	lsr	r2, r2, #5
   146fc:	orrs	r1, r2, r1
   14700:	bne	1470c <__assert_fail@plt+0x3730>
   14704:	str	r5, [r4]
   14708:	pop	{r4, r5, r6, sl, fp, pc}
   1470c:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14710:	push	{r4, r5, r6, r7, fp, lr}
   14714:	add	fp, sp, #16
   14718:	ldr	r5, [r1]
   1471c:	mov	r6, r2
   14720:	mov	r4, r1
   14724:	mov	r7, r0
   14728:	cmp	r0, #0
   1472c:	beq	14744 <__assert_fail@plt+0x3768>
   14730:	mov	r0, #1
   14734:	add	r0, r0, r5, lsr #1
   14738:	adds	r5, r5, r0
   1473c:	bcc	1475c <__assert_fail@plt+0x3780>
   14740:	b	14790 <__assert_fail@plt+0x37b4>
   14744:	cmp	r5, #0
   14748:	bne	1475c <__assert_fail@plt+0x3780>
   1474c:	mov	r0, #64	; 0x40
   14750:	cmp	r6, #64	; 0x40
   14754:	udiv	r5, r0, r6
   14758:	addhi	r5, r5, #1
   1475c:	mov	r0, r7
   14760:	mov	r1, r5
   14764:	mov	r2, r6
   14768:	bl	168cc <__assert_fail@plt+0x58f0>
   1476c:	cmp	r0, #0
   14770:	bne	14788 <__assert_fail@plt+0x37ac>
   14774:	cmp	r7, #0
   14778:	beq	14790 <__assert_fail@plt+0x37b4>
   1477c:	cmp	r6, #0
   14780:	cmpne	r5, #0
   14784:	bne	14790 <__assert_fail@plt+0x37b4>
   14788:	str	r5, [r4]
   1478c:	pop	{r4, r5, r6, r7, fp, pc}
   14790:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14794:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14798:	add	fp, sp, #24
   1479c:	mov	r8, r1
   147a0:	ldr	r1, [r1]
   147a4:	mov	r5, r0
   147a8:	add	r0, r1, r1, asr #1
   147ac:	cmp	r0, r1
   147b0:	mvnvs	r0, #-2147483648	; 0x80000000
   147b4:	cmp	r0, r3
   147b8:	mov	r7, r0
   147bc:	movgt	r7, r3
   147c0:	cmn	r3, #1
   147c4:	movle	r7, r0
   147c8:	ldr	r0, [fp, #8]
   147cc:	cmn	r0, #1
   147d0:	ble	147f8 <__assert_fail@plt+0x381c>
   147d4:	cmp	r0, #0
   147d8:	beq	1484c <__assert_fail@plt+0x3870>
   147dc:	cmn	r7, #1
   147e0:	ble	14820 <__assert_fail@plt+0x3844>
   147e4:	mvn	r4, #-2147483648	; 0x80000000
   147e8:	udiv	r6, r4, r0
   147ec:	cmp	r6, r7
   147f0:	bge	1484c <__assert_fail@plt+0x3870>
   147f4:	b	1485c <__assert_fail@plt+0x3880>
   147f8:	cmn	r7, #1
   147fc:	ble	1483c <__assert_fail@plt+0x3860>
   14800:	cmn	r0, #1
   14804:	beq	1484c <__assert_fail@plt+0x3870>
   14808:	mov	r6, #-2147483648	; 0x80000000
   1480c:	mvn	r4, #-2147483648	; 0x80000000
   14810:	sdiv	r6, r6, r0
   14814:	cmp	r6, r7
   14818:	bge	1484c <__assert_fail@plt+0x3870>
   1481c:	b	1485c <__assert_fail@plt+0x3880>
   14820:	beq	1484c <__assert_fail@plt+0x3870>
   14824:	mov	r6, #-2147483648	; 0x80000000
   14828:	mvn	r4, #-2147483648	; 0x80000000
   1482c:	sdiv	r6, r6, r7
   14830:	cmp	r6, r0
   14834:	bge	1484c <__assert_fail@plt+0x3870>
   14838:	b	1485c <__assert_fail@plt+0x3880>
   1483c:	mvn	r4, #-2147483648	; 0x80000000
   14840:	sdiv	r6, r4, r0
   14844:	cmp	r7, r6
   14848:	blt	1485c <__assert_fail@plt+0x3880>
   1484c:	mul	r6, r7, r0
   14850:	mov	r4, #64	; 0x40
   14854:	cmp	r6, #63	; 0x3f
   14858:	bgt	14864 <__assert_fail@plt+0x3888>
   1485c:	sdiv	r7, r4, r0
   14860:	mul	r6, r7, r0
   14864:	cmp	r5, #0
   14868:	moveq	r4, #0
   1486c:	streq	r4, [r8]
   14870:	sub	r4, r7, r1
   14874:	cmp	r4, r2
   14878:	bge	14924 <__assert_fail@plt+0x3948>
   1487c:	add	r7, r1, r2
   14880:	mov	r6, #0
   14884:	mov	r2, #0
   14888:	cmp	r7, r3
   1488c:	movwgt	r6, #1
   14890:	cmn	r3, #1
   14894:	movwgt	r2, #1
   14898:	cmp	r7, r1
   1489c:	bvs	14958 <__assert_fail@plt+0x397c>
   148a0:	ands	r1, r2, r6
   148a4:	bne	14958 <__assert_fail@plt+0x397c>
   148a8:	cmn	r0, #1
   148ac:	ble	148d4 <__assert_fail@plt+0x38f8>
   148b0:	cmp	r0, #0
   148b4:	beq	14920 <__assert_fail@plt+0x3944>
   148b8:	cmn	r7, #1
   148bc:	ble	148f8 <__assert_fail@plt+0x391c>
   148c0:	mvn	r1, #-2147483648	; 0x80000000
   148c4:	udiv	r1, r1, r0
   148c8:	cmp	r1, r7
   148cc:	bge	14920 <__assert_fail@plt+0x3944>
   148d0:	b	14958 <__assert_fail@plt+0x397c>
   148d4:	cmn	r7, #1
   148d8:	ble	14910 <__assert_fail@plt+0x3934>
   148dc:	cmn	r0, #1
   148e0:	beq	14920 <__assert_fail@plt+0x3944>
   148e4:	mov	r1, #-2147483648	; 0x80000000
   148e8:	sdiv	r1, r1, r0
   148ec:	cmp	r1, r7
   148f0:	bge	14920 <__assert_fail@plt+0x3944>
   148f4:	b	14958 <__assert_fail@plt+0x397c>
   148f8:	beq	14920 <__assert_fail@plt+0x3944>
   148fc:	mov	r1, #-2147483648	; 0x80000000
   14900:	sdiv	r1, r1, r7
   14904:	cmp	r1, r0
   14908:	bge	14920 <__assert_fail@plt+0x3944>
   1490c:	b	14958 <__assert_fail@plt+0x397c>
   14910:	mvn	r1, #-2147483648	; 0x80000000
   14914:	sdiv	r1, r1, r0
   14918:	cmp	r7, r1
   1491c:	blt	14958 <__assert_fail@plt+0x397c>
   14920:	mul	r6, r7, r0
   14924:	mov	r0, r5
   14928:	mov	r1, r6
   1492c:	bl	16590 <__assert_fail@plt+0x55b4>
   14930:	cmp	r6, #0
   14934:	movwne	r6, #1
   14938:	cmp	r0, #0
   1493c:	bne	14950 <__assert_fail@plt+0x3974>
   14940:	clz	r1, r5
   14944:	lsr	r1, r1, #5
   14948:	orrs	r1, r1, r6
   1494c:	bne	14958 <__assert_fail@plt+0x397c>
   14950:	str	r7, [r8]
   14954:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14958:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   1495c:	push	{fp, lr}
   14960:	mov	fp, sp
   14964:	mov	r1, #1
   14968:	bl	1650c <__assert_fail@plt+0x5530>
   1496c:	cmp	r0, #0
   14970:	popne	{fp, pc}
   14974:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14978:	push	{fp, lr}
   1497c:	mov	fp, sp
   14980:	bl	1650c <__assert_fail@plt+0x5530>
   14984:	cmp	r0, #0
   14988:	popne	{fp, pc}
   1498c:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14990:	push	{fp, lr}
   14994:	mov	fp, sp
   14998:	mov	r1, #1
   1499c:	bl	1650c <__assert_fail@plt+0x5530>
   149a0:	cmp	r0, #0
   149a4:	popne	{fp, pc}
   149a8:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   149ac:	push	{fp, lr}
   149b0:	mov	fp, sp
   149b4:	bl	1650c <__assert_fail@plt+0x5530>
   149b8:	cmp	r0, #0
   149bc:	popne	{fp, pc}
   149c0:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   149c4:	push	{r4, r5, fp, lr}
   149c8:	add	fp, sp, #8
   149cc:	mov	r5, r0
   149d0:	mov	r0, r1
   149d4:	mov	r4, r1
   149d8:	bl	16560 <__assert_fail@plt+0x5584>
   149dc:	cmp	r0, #0
   149e0:	beq	149f4 <__assert_fail@plt+0x3a18>
   149e4:	mov	r1, r5
   149e8:	mov	r2, r4
   149ec:	pop	{r4, r5, fp, lr}
   149f0:	b	10de4 <memcpy@plt>
   149f4:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   149f8:	push	{r4, r5, fp, lr}
   149fc:	add	fp, sp, #8
   14a00:	mov	r5, r0
   14a04:	mov	r0, r1
   14a08:	mov	r4, r1
   14a0c:	bl	16560 <__assert_fail@plt+0x5584>
   14a10:	cmp	r0, #0
   14a14:	beq	14a28 <__assert_fail@plt+0x3a4c>
   14a18:	mov	r1, r5
   14a1c:	mov	r2, r4
   14a20:	pop	{r4, r5, fp, lr}
   14a24:	b	10de4 <memcpy@plt>
   14a28:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14a2c:	push	{r4, r5, fp, lr}
   14a30:	add	fp, sp, #8
   14a34:	mov	r5, r0
   14a38:	add	r0, r1, #1
   14a3c:	mov	r4, r1
   14a40:	bl	16560 <__assert_fail@plt+0x5584>
   14a44:	cmp	r0, #0
   14a48:	beq	14a64 <__assert_fail@plt+0x3a88>
   14a4c:	mov	r1, #0
   14a50:	mov	r2, r4
   14a54:	strb	r1, [r0, r4]
   14a58:	mov	r1, r5
   14a5c:	pop	{r4, r5, fp, lr}
   14a60:	b	10de4 <memcpy@plt>
   14a64:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14a68:	push	{r4, r5, fp, lr}
   14a6c:	add	fp, sp, #8
   14a70:	mov	r4, r0
   14a74:	bl	10ef8 <strlen@plt>
   14a78:	add	r5, r0, #1
   14a7c:	mov	r0, r5
   14a80:	bl	16560 <__assert_fail@plt+0x5584>
   14a84:	cmp	r0, #0
   14a88:	beq	14a9c <__assert_fail@plt+0x3ac0>
   14a8c:	mov	r1, r4
   14a90:	mov	r2, r5
   14a94:	pop	{r4, r5, fp, lr}
   14a98:	b	10de4 <memcpy@plt>
   14a9c:	bl	14aa0 <__assert_fail@plt+0x3ac4>
   14aa0:	push	{fp, lr}
   14aa4:	mov	fp, sp
   14aa8:	movw	r0, #32996	; 0x80e4
   14aac:	movw	r1, #31180	; 0x79cc
   14ab0:	mov	r2, #5
   14ab4:	movt	r0, #2
   14ab8:	movt	r1, #1
   14abc:	ldr	r4, [r0]
   14ac0:	mov	r0, #0
   14ac4:	bl	10e08 <dcgettext@plt>
   14ac8:	movw	r2, #30143	; 0x75bf
   14acc:	mov	r3, r0
   14ad0:	mov	r0, r4
   14ad4:	mov	r1, #0
   14ad8:	movt	r2, #1
   14adc:	bl	10e80 <error@plt>
   14ae0:	bl	10fc4 <abort@plt>
   14ae4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ae8:	add	fp, sp, #24
   14aec:	sub	sp, sp, #16
   14af0:	mov	r8, r0
   14af4:	ldr	r0, [fp, #16]
   14af8:	mov	r7, r3
   14afc:	mov	r4, r2
   14b00:	mov	r2, r1
   14b04:	add	r3, sp, #8
   14b08:	mov	r1, #0
   14b0c:	str	r0, [sp]
   14b10:	mov	r0, r8
   14b14:	bl	14bf4 <__assert_fail@plt+0x3c18>
   14b18:	cmp	r0, #0
   14b1c:	bne	14bc8 <__assert_fail@plt+0x3bec>
   14b20:	ldr	r6, [sp, #8]
   14b24:	ldr	r5, [sp, #12]
   14b28:	subs	r0, r6, r4
   14b2c:	sbcs	r0, r5, r7
   14b30:	blt	14b54 <__assert_fail@plt+0x3b78>
   14b34:	ldr	r1, [fp, #8]
   14b38:	ldr	r0, [fp, #12]
   14b3c:	subs	r1, r1, r6
   14b40:	sbcs	r0, r0, r5
   14b44:	movge	r0, r6
   14b48:	movge	r1, r5
   14b4c:	subge	sp, fp, #24
   14b50:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b54:	subs	r0, r6, #1073741824	; 0x40000000
   14b58:	sbcs	r0, r5, #0
   14b5c:	blt	14b6c <__assert_fail@plt+0x3b90>
   14b60:	bl	10f10 <__errno_location@plt>
   14b64:	mov	r1, #75	; 0x4b
   14b68:	b	14b88 <__assert_fail@plt+0x3bac>
   14b6c:	bl	10f10 <__errno_location@plt>
   14b70:	mvn	r2, #1073741824	; 0x40000000
   14b74:	mvn	r1, #0
   14b78:	subs	r2, r2, r6
   14b7c:	sbcs	r1, r1, r5
   14b80:	movlt	r1, #34	; 0x22
   14b84:	movge	r1, #75	; 0x4b
   14b88:	str	r1, [r0]
   14b8c:	ldr	r6, [r0]
   14b90:	ldr	r4, [fp, #24]
   14b94:	ldr	r5, [fp, #20]
   14b98:	mov	r0, r8
   14b9c:	bl	13d60 <__assert_fail@plt+0x2d84>
   14ba0:	subs	r1, r6, #22
   14ba4:	movw	r2, #30139	; 0x75bb
   14ba8:	str	r0, [sp]
   14bac:	mov	r3, r5
   14bb0:	movne	r1, r6
   14bb4:	cmp	r4, #0
   14bb8:	movt	r2, #1
   14bbc:	movweq	r4, #1
   14bc0:	mov	r0, r4
   14bc4:	bl	10e80 <error@plt>
   14bc8:	cmp	r0, #1
   14bcc:	beq	14b60 <__assert_fail@plt+0x3b84>
   14bd0:	cmp	r0, #3
   14bd4:	bne	14be4 <__assert_fail@plt+0x3c08>
   14bd8:	bl	10f10 <__errno_location@plt>
   14bdc:	mov	r1, #0
   14be0:	b	14b88 <__assert_fail@plt+0x3bac>
   14be4:	bl	10f10 <__errno_location@plt>
   14be8:	b	14b8c <__assert_fail@plt+0x3bb0>
   14bec:	mov	r1, #10
   14bf0:	b	14ae4 <__assert_fail@plt+0x3b08>
   14bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bf8:	add	fp, sp, #28
   14bfc:	sub	sp, sp, #36	; 0x24
   14c00:	cmp	r2, #37	; 0x25
   14c04:	bcs	164ec <__assert_fail@plt+0x5510>
   14c08:	ldr	r8, [fp, #8]
   14c0c:	mov	r9, r3
   14c10:	mov	r6, r2
   14c14:	mov	r7, r1
   14c18:	mov	r4, r0
   14c1c:	bl	10f10 <__errno_location@plt>
   14c20:	cmp	r7, #0
   14c24:	add	sl, sp, #32
   14c28:	mov	r5, r0
   14c2c:	mov	r0, #0
   14c30:	mov	r2, r6
   14c34:	mov	r3, #0
   14c38:	movne	sl, r7
   14c3c:	str	r0, [r5]
   14c40:	mov	r0, r4
   14c44:	mov	r1, sl
   14c48:	bl	10f94 <__strtoll_internal@plt>
   14c4c:	mov	r7, r1
   14c50:	ldr	r1, [sl]
   14c54:	cmp	r1, r4
   14c58:	beq	14c88 <__assert_fail@plt+0x3cac>
   14c5c:	mov	r6, r0
   14c60:	ldr	r0, [r5]
   14c64:	cmp	r0, #0
   14c68:	beq	14cc8 <__assert_fail@plt+0x3cec>
   14c6c:	mov	r5, #4
   14c70:	cmp	r0, #34	; 0x22
   14c74:	bne	160fc <__assert_fail@plt+0x5120>
   14c78:	mov	r5, #1
   14c7c:	cmp	r8, #0
   14c80:	bne	14cd4 <__assert_fail@plt+0x3cf8>
   14c84:	b	160f8 <__assert_fail@plt+0x511c>
   14c88:	mov	r5, #4
   14c8c:	cmp	r8, #0
   14c90:	beq	160fc <__assert_fail@plt+0x5120>
   14c94:	mov	r6, r1
   14c98:	ldrb	r1, [r4]
   14c9c:	cmp	r1, #0
   14ca0:	beq	160fc <__assert_fail@plt+0x5120>
   14ca4:	mov	r0, r8
   14ca8:	bl	10f04 <strchr@plt>
   14cac:	cmp	r0, #0
   14cb0:	beq	160fc <__assert_fail@plt+0x5120>
   14cb4:	mov	r1, r6
   14cb8:	mov	r5, #0
   14cbc:	mov	r6, #1
   14cc0:	mov	r7, #0
   14cc4:	b	14cd4 <__assert_fail@plt+0x3cf8>
   14cc8:	mov	r5, r0
   14ccc:	cmp	r8, #0
   14cd0:	beq	160f8 <__assert_fail@plt+0x511c>
   14cd4:	ldrb	r4, [r1]
   14cd8:	cmp	r4, #0
   14cdc:	beq	160f8 <__assert_fail@plt+0x511c>
   14ce0:	str	r1, [sp, #20]
   14ce4:	mov	r0, r8
   14ce8:	mov	r1, r4
   14cec:	bl	10f04 <strchr@plt>
   14cf0:	cmp	r0, #0
   14cf4:	beq	14f80 <__assert_fail@plt+0x3fa4>
   14cf8:	sub	r0, r4, #69	; 0x45
   14cfc:	mov	r1, #1
   14d00:	mov	r3, #0
   14d04:	mov	r2, #1024	; 0x400
   14d08:	cmp	r0, #47	; 0x2f
   14d0c:	str	r1, [sp, #16]
   14d10:	bhi	14e4c <__assert_fail@plt+0x3e70>
   14d14:	add	r1, pc, #0
   14d18:	ldr	pc, [r1, r0, lsl #2]
   14d1c:	ldrdeq	r4, [r1], -ip
   14d20:	andeq	r4, r1, ip, asr #28
   14d24:	ldrdeq	r4, [r1], -ip
   14d28:	andeq	r4, r1, ip, asr #28
   14d2c:	andeq	r4, r1, ip, asr #28
   14d30:	andeq	r4, r1, ip, asr #28
   14d34:	ldrdeq	r4, [r1], -ip
   14d38:	andeq	r4, r1, ip, asr #28
   14d3c:	ldrdeq	r4, [r1], -ip
   14d40:	andeq	r4, r1, ip, asr #28
   14d44:	andeq	r4, r1, ip, asr #28
   14d48:	ldrdeq	r4, [r1], -ip
   14d4c:	andeq	r4, r1, ip, asr #28
   14d50:	andeq	r4, r1, ip, asr #28
   14d54:	andeq	r4, r1, ip, asr #28
   14d58:	ldrdeq	r4, [r1], -ip
   14d5c:	andeq	r4, r1, ip, asr #28
   14d60:	andeq	r4, r1, ip, asr #28
   14d64:	andeq	r4, r1, ip, asr #28
   14d68:	andeq	r4, r1, ip, asr #28
   14d6c:	ldrdeq	r4, [r1], -ip
   14d70:	ldrdeq	r4, [r1], -ip
   14d74:	andeq	r4, r1, ip, asr #28
   14d78:	andeq	r4, r1, ip, asr #28
   14d7c:	andeq	r4, r1, ip, asr #28
   14d80:	andeq	r4, r1, ip, asr #28
   14d84:	andeq	r4, r1, ip, asr #28
   14d88:	andeq	r4, r1, ip, asr #28
   14d8c:	andeq	r4, r1, ip, asr #28
   14d90:	andeq	r4, r1, ip, asr #28
   14d94:	andeq	r4, r1, ip, asr #28
   14d98:	andeq	r4, r1, ip, asr #28
   14d9c:	andeq	r4, r1, ip, asr #28
   14da0:	andeq	r4, r1, ip, asr #28
   14da4:	ldrdeq	r4, [r1], -ip
   14da8:	andeq	r4, r1, ip, asr #28
   14dac:	andeq	r4, r1, ip, asr #28
   14db0:	andeq	r4, r1, ip, asr #28
   14db4:	ldrdeq	r4, [r1], -ip
   14db8:	andeq	r4, r1, ip, asr #28
   14dbc:	ldrdeq	r4, [r1], -ip
   14dc0:	andeq	r4, r1, ip, asr #28
   14dc4:	andeq	r4, r1, ip, asr #28
   14dc8:	andeq	r4, r1, ip, asr #28
   14dcc:	andeq	r4, r1, ip, asr #28
   14dd0:	andeq	r4, r1, ip, asr #28
   14dd4:	andeq	r4, r1, ip, asr #28
   14dd8:	ldrdeq	r4, [r1], -ip
   14ddc:	mov	r0, r8
   14de0:	mov	r1, #48	; 0x30
   14de4:	bl	10f04 <strchr@plt>
   14de8:	cmp	r0, #0
   14dec:	beq	14e18 <__assert_fail@plt+0x3e3c>
   14df0:	ldr	r1, [sp, #20]
   14df4:	ldrb	r0, [r1, #1]
   14df8:	cmp	r0, #66	; 0x42
   14dfc:	cmpne	r0, #68	; 0x44
   14e00:	bne	14e20 <__assert_fail@plt+0x3e44>
   14e04:	mov	r0, #2
   14e08:	mov	r2, #1000	; 0x3e8
   14e0c:	mov	r3, #0
   14e10:	str	r0, [sp, #16]
   14e14:	b	14e4c <__assert_fail@plt+0x3e70>
   14e18:	mov	r3, #0
   14e1c:	b	14e48 <__assert_fail@plt+0x3e6c>
   14e20:	cmp	r0, #105	; 0x69
   14e24:	mov	r3, #0
   14e28:	bne	14e48 <__assert_fail@plt+0x3e6c>
   14e2c:	ldrb	r0, [r1, #2]
   14e30:	mov	r1, #1
   14e34:	mov	r2, #1024	; 0x400
   14e38:	cmp	r0, #66	; 0x42
   14e3c:	movweq	r1, #3
   14e40:	str	r1, [sp, #16]
   14e44:	b	14e4c <__assert_fail@plt+0x3e70>
   14e48:	mov	r2, #1024	; 0x400
   14e4c:	sub	r0, r4, #66	; 0x42
   14e50:	cmp	r0, #53	; 0x35
   14e54:	bhi	14f80 <__assert_fail@plt+0x3fa4>
   14e58:	add	r1, pc, #8
   14e5c:	str	r3, [sp, #28]
   14e60:	str	r2, [sp, #24]
   14e64:	ldr	pc, [r1, r0, lsl #2]
   14e68:	andeq	r5, r1, r0, lsl #1
   14e6c:	andeq	r4, r1, r0, lsl #31
   14e70:	andeq	r4, r1, r0, lsl #31
   14e74:	muleq	r1, r4, r0
   14e78:	andeq	r4, r1, r0, lsl #31
   14e7c:	andeq	r4, r1, r0, asr #30
   14e80:	andeq	r4, r1, r0, lsl #31
   14e84:	andeq	r4, r1, r0, lsl #31
   14e88:	andeq	r4, r1, r0, lsl #31
   14e8c:	andeq	r4, r1, r8, lsl #31
   14e90:	andeq	r4, r1, r0, lsl #31
   14e94:			; <UNDEFINED> instruction: 0x00014fb8
   14e98:	andeq	r4, r1, r0, lsl #31
   14e9c:	andeq	r4, r1, r0, lsl #31
   14ea0:	ldrdeq	r5, [r1], -r8
   14ea4:	andeq	r4, r1, r0, lsl #31
   14ea8:	andeq	r4, r1, r0, lsl #31
   14eac:	andeq	r4, r1, r0, lsl #31
   14eb0:	strdeq	r4, [r1], -r8
   14eb4:	andeq	r4, r1, r0, lsl #31
   14eb8:	andeq	r4, r1, r0, lsl #31
   14ebc:	andeq	r4, r1, r0, lsl #31
   14ec0:	andeq	r4, r1, r0, lsl #31
   14ec4:	andeq	r5, r1, ip, lsl r1
   14ec8:	andeq	r5, r1, ip, lsr r0
   14ecc:	andeq	r4, r1, r0, lsl #31
   14ed0:	andeq	r4, r1, r0, lsl #31
   14ed4:	andeq	r4, r1, r0, lsl #31
   14ed8:	andeq	r4, r1, r0, lsl #31
   14edc:	andeq	r4, r1, r0, lsl #31
   14ee0:	andeq	r4, r1, r0, lsl #31
   14ee4:	andeq	r4, r1, r0, lsl #31
   14ee8:	andeq	r5, r1, r0, ror #2
   14eec:	ldrdeq	r6, [r1], -r8
   14ef0:	andeq	r4, r1, r0, lsl #31
   14ef4:	andeq	r4, r1, r0, lsl #31
   14ef8:	andeq	r4, r1, r0, lsl #31
   14efc:	andeq	r4, r1, r0, asr #30
   14f00:	andeq	r4, r1, r0, lsl #31
   14f04:	andeq	r4, r1, r0, lsl #31
   14f08:	andeq	r4, r1, r0, lsl #31
   14f0c:	andeq	r4, r1, r8, lsl #31
   14f10:	andeq	r4, r1, r0, lsl #31
   14f14:			; <UNDEFINED> instruction: 0x00014fb8
   14f18:	andeq	r4, r1, r0, lsl #31
   14f1c:	andeq	r4, r1, r0, lsl #31
   14f20:	andeq	r4, r1, r0, lsl #31
   14f24:	andeq	r4, r1, r0, lsl #31
   14f28:	andeq	r4, r1, r0, lsl #31
   14f2c:	andeq	r4, r1, r0, lsl #31
   14f30:	strdeq	r4, [r1], -r8
   14f34:	andeq	r4, r1, r0, lsl #31
   14f38:	andeq	r4, r1, r0, lsl #31
   14f3c:	andeq	r5, r1, r4, ror r1
   14f40:	cmn	r7, #1
   14f44:	str	r9, [sp, #12]
   14f48:	ble	15188 <__assert_fail@plt+0x41ac>
   14f4c:	ldr	r3, [sp, #28]
   14f50:	mvn	r0, #0
   14f54:	mvn	r1, #-2147483648	; 0x80000000
   14f58:	mvn	r8, #0
   14f5c:	mvn	r9, #-2147483648	; 0x80000000
   14f60:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   14f64:	ldr	r2, [sp, #24]
   14f68:	ldr	r3, [sp, #28]
   14f6c:	subs	r0, r0, r6
   14f70:	mov	r4, #1
   14f74:	sbcs	r0, r1, r7
   14f78:	bge	151c8 <__assert_fail@plt+0x41ec>
   14f7c:	b	151e0 <__assert_fail@plt+0x4204>
   14f80:	orr	r5, r5, #2
   14f84:	b	160f8 <__assert_fail@plt+0x511c>
   14f88:	cmn	r7, #1
   14f8c:	ble	1521c <__assert_fail@plt+0x4240>
   14f90:	ldr	r3, [sp, #28]
   14f94:	mvn	r0, #0
   14f98:	mvn	r1, #-2147483648	; 0x80000000
   14f9c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   14fa0:	ldr	r2, [sp, #24]
   14fa4:	ldr	r3, [sp, #28]
   14fa8:	subs	r0, r0, r6
   14fac:	sbcs	r0, r1, r7
   14fb0:	bge	15250 <__assert_fail@plt+0x4274>
   14fb4:	b	15960 <__assert_fail@plt+0x4984>
   14fb8:	cmn	r7, #1
   14fbc:	str	r9, [sp, #12]
   14fc0:	ble	15264 <__assert_fail@plt+0x4288>
   14fc4:	ldr	r3, [sp, #28]
   14fc8:	mvn	r0, #0
   14fcc:	mvn	r1, #-2147483648	; 0x80000000
   14fd0:	mvn	r8, #0
   14fd4:	mvn	r9, #-2147483648	; 0x80000000
   14fd8:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   14fdc:	ldr	r2, [sp, #24]
   14fe0:	ldr	r3, [sp, #28]
   14fe4:	subs	r0, r0, r6
   14fe8:	mov	r4, #1
   14fec:	sbcs	r0, r1, r7
   14ff0:	bge	152a4 <__assert_fail@plt+0x42c8>
   14ff4:	b	152bc <__assert_fail@plt+0x42e0>
   14ff8:	cmn	r7, #1
   14ffc:	str	r9, [sp, #12]
   15000:	ble	152f4 <__assert_fail@plt+0x4318>
   15004:	ldr	r3, [sp, #28]
   15008:	mvn	r0, #0
   1500c:	mvn	r1, #-2147483648	; 0x80000000
   15010:	mvn	r9, #-2147483648	; 0x80000000
   15014:	str	r0, [sp, #8]
   15018:	mvn	r0, #0
   1501c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15020:	ldr	r2, [sp, #24]
   15024:	ldr	r3, [sp, #28]
   15028:	subs	r0, r0, r6
   1502c:	mov	r4, #1
   15030:	sbcs	r0, r1, r7
   15034:	bge	15338 <__assert_fail@plt+0x435c>
   15038:	b	15354 <__assert_fail@plt+0x4378>
   1503c:	cmp	r7, #0
   15040:	str	r9, [sp, #12]
   15044:	bmi	1563c <__assert_fail@plt+0x4660>
   15048:	ldr	r3, [sp, #28]
   1504c:	mvn	r0, #0
   15050:	mvn	r1, #-2147483648	; 0x80000000
   15054:	mvn	r9, #-2147483648	; 0x80000000
   15058:	str	r0, [sp, #8]
   1505c:	mvn	r0, #0
   15060:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15064:	ldr	r2, [sp, #24]
   15068:	ldr	r3, [sp, #28]
   1506c:	subs	r0, r0, r6
   15070:	mov	r4, #1
   15074:	sbcs	r0, r1, r7
   15078:	bge	15680 <__assert_fail@plt+0x46a4>
   1507c:	b	1569c <__assert_fail@plt+0x46c0>
   15080:	cmn	r7, #1
   15084:	ble	156d8 <__assert_fail@plt+0x46fc>
   15088:	cmp	r7, #2097152	; 0x200000
   1508c:	blt	15708 <__assert_fail@plt+0x472c>
   15090:	b	15960 <__assert_fail@plt+0x4984>
   15094:	cmp	r7, #0
   15098:	str	r9, [sp, #12]
   1509c:	bmi	15718 <__assert_fail@plt+0x473c>
   150a0:	ldr	r3, [sp, #28]
   150a4:	mvn	r0, #0
   150a8:	mvn	r1, #-2147483648	; 0x80000000
   150ac:	mvn	r9, #-2147483648	; 0x80000000
   150b0:	str	r0, [sp, #8]
   150b4:	mvn	r0, #0
   150b8:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   150bc:	ldr	r2, [sp, #24]
   150c0:	ldr	r3, [sp, #28]
   150c4:	subs	r0, r0, r6
   150c8:	mov	r4, #1
   150cc:	sbcs	r0, r1, r7
   150d0:	bge	1575c <__assert_fail@plt+0x4780>
   150d4:	b	15778 <__assert_fail@plt+0x479c>
   150d8:	cmp	r7, #0
   150dc:	str	r9, [sp, #12]
   150e0:	bmi	157b4 <__assert_fail@plt+0x47d8>
   150e4:	ldr	r3, [sp, #28]
   150e8:	mvn	r0, #0
   150ec:	mvn	r1, #-2147483648	; 0x80000000
   150f0:	mvn	r8, #-2147483648	; 0x80000000
   150f4:	str	r0, [sp, #8]
   150f8:	mvn	r0, #0
   150fc:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15100:	ldr	r2, [sp, #24]
   15104:	ldr	r3, [sp, #28]
   15108:	subs	r0, r0, r6
   1510c:	mov	r4, #1
   15110:	sbcs	r0, r1, r7
   15114:	bge	157f8 <__assert_fail@plt+0x481c>
   15118:	b	15814 <__assert_fail@plt+0x4838>
   1511c:	cmp	r7, #0
   15120:	str	r9, [sp, #12]
   15124:	bmi	15850 <__assert_fail@plt+0x4874>
   15128:	ldr	r3, [sp, #28]
   1512c:	mvn	r0, #0
   15130:	mvn	r1, #-2147483648	; 0x80000000
   15134:	mvn	r9, #-2147483648	; 0x80000000
   15138:	str	r0, [sp, #8]
   1513c:	mvn	r0, #0
   15140:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15144:	ldr	r2, [sp, #24]
   15148:	ldr	r3, [sp, #28]
   1514c:	subs	r0, r0, r6
   15150:	mov	r4, #1
   15154:	sbcs	r0, r1, r7
   15158:	bge	15894 <__assert_fail@plt+0x48b8>
   1515c:	b	158b0 <__assert_fail@plt+0x48d4>
   15160:	cmn	r7, #1
   15164:	ble	158f0 <__assert_fail@plt+0x4914>
   15168:	cmp	r7, #4194304	; 0x400000
   1516c:	blt	15920 <__assert_fail@plt+0x4944>
   15170:	b	15960 <__assert_fail@plt+0x4984>
   15174:	cmn	r7, #1
   15178:	ble	15930 <__assert_fail@plt+0x4954>
   1517c:	cmp	r7, #1073741824	; 0x40000000
   15180:	bge	15960 <__assert_fail@plt+0x4984>
   15184:	b	15980 <__assert_fail@plt+0x49a4>
   15188:	and	r0, r6, r7
   1518c:	cmn	r0, #1
   15190:	beq	151c8 <__assert_fail@plt+0x41ec>
   15194:	mov	r0, #0
   15198:	mov	r1, #-2147483648	; 0x80000000
   1519c:	mov	r2, r6
   151a0:	mov	r3, r7
   151a4:	mov	r8, #0
   151a8:	mov	r9, #-2147483648	; 0x80000000
   151ac:	bl	16a14 <__assert_fail@plt+0x5a38>
   151b0:	ldr	r2, [sp, #24]
   151b4:	ldr	r3, [sp, #28]
   151b8:	mov	r4, #1
   151bc:	subs	r0, r0, r2
   151c0:	sbcs	r0, r1, r3
   151c4:	blt	15390 <__assert_fail@plt+0x43b4>
   151c8:	umull	r8, r0, r6, r2
   151cc:	mov	r4, #0
   151d0:	mla	r0, r6, r3, r0
   151d4:	mla	r9, r7, r2, r0
   151d8:	cmp	r9, #0
   151dc:	bmi	15390 <__assert_fail@plt+0x43b4>
   151e0:	ldr	r3, [sp, #28]
   151e4:	mvn	r0, #-2147483648	; 0x80000000
   151e8:	mvn	r1, #-2147483648	; 0x80000000
   151ec:	mov	r6, r4
   151f0:	mvn	r4, #0
   151f4:	str	r0, [sp, #8]
   151f8:	mvn	r0, #0
   151fc:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15200:	ldr	r2, [sp, #24]
   15204:	ldr	r3, [sp, #28]
   15208:	subs	r0, r0, r8
   1520c:	mov	r7, #1
   15210:	sbcs	r0, r1, r9
   15214:	bge	153cc <__assert_fail@plt+0x43f0>
   15218:	b	153e8 <__assert_fail@plt+0x440c>
   1521c:	and	r0, r6, r7
   15220:	cmn	r0, #1
   15224:	beq	15250 <__assert_fail@plt+0x4274>
   15228:	mov	r0, #0
   1522c:	mov	r1, #-2147483648	; 0x80000000
   15230:	mov	r2, r6
   15234:	mov	r3, r7
   15238:	bl	16a14 <__assert_fail@plt+0x5a38>
   1523c:	ldr	r2, [sp, #24]
   15240:	ldr	r3, [sp, #28]
   15244:	subs	r0, r0, r2
   15248:	sbcs	r0, r1, r3
   1524c:	blt	15960 <__assert_fail@plt+0x4984>
   15250:	umull	r0, r1, r6, r2
   15254:	mla	r1, r6, r3, r1
   15258:	mla	r7, r7, r2, r1
   1525c:	mov	r6, r0
   15260:	b	160d8 <__assert_fail@plt+0x50fc>
   15264:	and	r0, r6, r7
   15268:	cmn	r0, #1
   1526c:	beq	152a4 <__assert_fail@plt+0x42c8>
   15270:	mov	r0, #0
   15274:	mov	r1, #-2147483648	; 0x80000000
   15278:	mov	r2, r6
   1527c:	mov	r3, r7
   15280:	mov	r8, #0
   15284:	mov	r9, #-2147483648	; 0x80000000
   15288:	bl	16a14 <__assert_fail@plt+0x5a38>
   1528c:	ldr	r2, [sp, #24]
   15290:	ldr	r3, [sp, #28]
   15294:	mov	r4, #1
   15298:	subs	r0, r0, r2
   1529c:	sbcs	r0, r1, r3
   152a0:	blt	1547c <__assert_fail@plt+0x44a0>
   152a4:	umull	r8, r0, r6, r2
   152a8:	mov	r4, #0
   152ac:	mla	r0, r6, r3, r0
   152b0:	mla	r9, r7, r2, r0
   152b4:	cmp	r9, #0
   152b8:	bmi	1547c <__assert_fail@plt+0x44a0>
   152bc:	ldr	r3, [sp, #28]
   152c0:	mvn	r0, #0
   152c4:	mvn	r1, #-2147483648	; 0x80000000
   152c8:	str	r4, [sp, #8]
   152cc:	mvn	r6, #0
   152d0:	mvn	r7, #-2147483648	; 0x80000000
   152d4:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   152d8:	ldr	r4, [sp, #24]
   152dc:	ldr	r3, [sp, #28]
   152e0:	subs	r0, r0, r8
   152e4:	mov	r2, #1
   152e8:	sbcs	r0, r1, r9
   152ec:	bge	154b4 <__assert_fail@plt+0x44d8>
   152f0:	b	155ec <__assert_fail@plt+0x4610>
   152f4:	and	r0, r6, r7
   152f8:	cmn	r0, #1
   152fc:	beq	15338 <__assert_fail@plt+0x435c>
   15300:	mov	r0, #0
   15304:	mov	r1, #-2147483648	; 0x80000000
   15308:	mov	r2, r6
   1530c:	mov	r3, r7
   15310:	bl	16a14 <__assert_fail@plt+0x5a38>
   15314:	ldr	r2, [sp, #24]
   15318:	ldr	r3, [sp, #28]
   1531c:	mov	r4, #1
   15320:	mov	r9, #-2147483648	; 0x80000000
   15324:	subs	r0, r0, r2
   15328:	sbcs	r0, r1, r3
   1532c:	mov	r0, #0
   15330:	str	r0, [sp, #8]
   15334:	blt	154c8 <__assert_fail@plt+0x44ec>
   15338:	umull	r1, r0, r6, r2
   1533c:	mov	r4, #0
   15340:	mla	r0, r6, r3, r0
   15344:	mla	r9, r7, r2, r0
   15348:	str	r1, [sp, #8]
   1534c:	cmp	r9, #0
   15350:	bmi	154c8 <__assert_fail@plt+0x44ec>
   15354:	ldr	r3, [sp, #28]
   15358:	mvn	r0, #0
   1535c:	mvn	r1, #-2147483648	; 0x80000000
   15360:	str	r4, [sp, #4]
   15364:	mvn	r6, #0
   15368:	mvn	r8, #-2147483648	; 0x80000000
   1536c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15370:	ldr	r4, [sp, #8]
   15374:	ldr	r2, [sp, #24]
   15378:	ldr	r3, [sp, #28]
   1537c:	mov	r7, #1
   15380:	subs	r0, r0, r4
   15384:	sbcs	r0, r1, r9
   15388:	bge	15504 <__assert_fail@plt+0x4528>
   1538c:	b	1551c <__assert_fail@plt+0x4540>
   15390:	mov	r0, #-2147483648	; 0x80000000
   15394:	mov	r1, #-2147483648	; 0x80000000
   15398:	mov	r2, r8
   1539c:	mov	r3, r9
   153a0:	mov	r6, r4
   153a4:	mov	r4, #0
   153a8:	str	r0, [sp, #8]
   153ac:	mov	r0, #0
   153b0:	bl	16a14 <__assert_fail@plt+0x5a38>
   153b4:	ldr	r2, [sp, #24]
   153b8:	ldr	r3, [sp, #28]
   153bc:	mov	r7, #1
   153c0:	subs	r0, r0, r2
   153c4:	sbcs	r0, r1, r3
   153c8:	blt	1543c <__assert_fail@plt+0x4460>
   153cc:	umull	r4, r0, r8, r2
   153d0:	mov	r7, r6
   153d4:	mla	r0, r8, r3, r0
   153d8:	mla	r0, r9, r2, r0
   153dc:	cmp	r0, #0
   153e0:	str	r0, [sp, #8]
   153e4:	bmi	1543c <__assert_fail@plt+0x4460>
   153e8:	ldr	r3, [sp, #28]
   153ec:	mvn	r0, #0
   153f0:	mvn	r1, #-2147483648	; 0x80000000
   153f4:	mov	r9, r7
   153f8:	mvn	r6, #0
   153fc:	mvn	r7, #-2147483648	; 0x80000000
   15400:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15404:	ldr	r8, [sp, #8]
   15408:	ldr	r3, [sp, #24]
   1540c:	ldr	ip, [sp, #28]
   15410:	subs	r0, r0, r4
   15414:	mov	r2, #1
   15418:	sbcs	r0, r1, r8
   1541c:	blt	15430 <__assert_fail@plt+0x4454>
   15420:	umull	r6, r0, r4, r3
   15424:	mov	r2, #0
   15428:	mla	r0, r4, ip, r0
   1542c:	mla	r7, r8, r3, r0
   15430:	orr	r3, r2, r9
   15434:	ldr	r9, [sp, #12]
   15438:	b	160d8 <__assert_fail@plt+0x50fc>
   1543c:	ldr	r8, [sp, #8]
   15440:	mov	r0, #0
   15444:	mov	r1, #-2147483648	; 0x80000000
   15448:	mov	r2, r4
   1544c:	mov	r9, r7
   15450:	mov	r6, #0
   15454:	mov	r7, #-2147483648	; 0x80000000
   15458:	mov	r3, r8
   1545c:	bl	16a14 <__assert_fail@plt+0x5a38>
   15460:	ldr	r3, [sp, #24]
   15464:	ldr	ip, [sp, #28]
   15468:	mov	r2, #1
   1546c:	subs	r0, r0, r3
   15470:	sbcs	r0, r1, ip
   15474:	bge	15420 <__assert_fail@plt+0x4444>
   15478:	b	15430 <__assert_fail@plt+0x4454>
   1547c:	mov	r0, #0
   15480:	mov	r1, #-2147483648	; 0x80000000
   15484:	mov	r2, r8
   15488:	mov	r3, r9
   1548c:	str	r4, [sp, #8]
   15490:	mov	r6, #0
   15494:	mov	r7, #-2147483648	; 0x80000000
   15498:	bl	16a14 <__assert_fail@plt+0x5a38>
   1549c:	ldr	r4, [sp, #24]
   154a0:	ldr	r3, [sp, #28]
   154a4:	mov	r2, #1
   154a8:	subs	r0, r0, r4
   154ac:	sbcs	r0, r1, r3
   154b0:	blt	155ec <__assert_fail@plt+0x4610>
   154b4:	umull	r6, r0, r8, r4
   154b8:	mov	r2, #0
   154bc:	mla	r0, r8, r3, r0
   154c0:	mla	r7, r9, r4, r0
   154c4:	b	155ec <__assert_fail@plt+0x4610>
   154c8:	str	r4, [sp, #4]
   154cc:	ldr	r4, [sp, #8]
   154d0:	mov	r0, #0
   154d4:	mov	r1, #-2147483648	; 0x80000000
   154d8:	mov	r3, r9
   154dc:	mov	r2, r4
   154e0:	bl	16a14 <__assert_fail@plt+0x5a38>
   154e4:	ldr	r2, [sp, #24]
   154e8:	ldr	r3, [sp, #28]
   154ec:	mov	r7, #1
   154f0:	mov	r6, #0
   154f4:	mov	r8, #-2147483648	; 0x80000000
   154f8:	subs	r0, r0, r2
   154fc:	sbcs	r0, r1, r3
   15500:	blt	15554 <__assert_fail@plt+0x4578>
   15504:	umull	r6, r0, r4, r2
   15508:	ldr	r7, [sp, #4]
   1550c:	mla	r0, r4, r3, r0
   15510:	mla	r8, r9, r2, r0
   15514:	cmp	r8, #0
   15518:	bmi	15554 <__assert_fail@plt+0x4578>
   1551c:	ldr	r3, [sp, #28]
   15520:	mvn	r0, #0
   15524:	mvn	r1, #-2147483648	; 0x80000000
   15528:	str	r7, [sp, #8]
   1552c:	mvn	r4, #0
   15530:	mvn	r9, #-2147483648	; 0x80000000
   15534:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15538:	ldr	r2, [sp, #24]
   1553c:	ldr	r3, [sp, #28]
   15540:	subs	r0, r0, r6
   15544:	mov	r7, #1
   15548:	sbcs	r0, r1, r8
   1554c:	bge	1558c <__assert_fail@plt+0x45b0>
   15550:	b	155a4 <__assert_fail@plt+0x45c8>
   15554:	mov	r0, #0
   15558:	mov	r1, #-2147483648	; 0x80000000
   1555c:	mov	r2, r6
   15560:	mov	r3, r8
   15564:	str	r7, [sp, #8]
   15568:	bl	16a14 <__assert_fail@plt+0x5a38>
   1556c:	ldr	r2, [sp, #24]
   15570:	ldr	r3, [sp, #28]
   15574:	mov	r7, #1
   15578:	mov	r4, #0
   1557c:	mov	r9, #-2147483648	; 0x80000000
   15580:	subs	r0, r0, r2
   15584:	sbcs	r0, r1, r3
   15588:	blt	155fc <__assert_fail@plt+0x4620>
   1558c:	umull	r4, r0, r6, r2
   15590:	ldr	r7, [sp, #8]
   15594:	mla	r0, r6, r3, r0
   15598:	mla	r9, r8, r2, r0
   1559c:	cmp	r9, #0
   155a0:	bmi	155fc <__assert_fail@plt+0x4620>
   155a4:	ldr	r3, [sp, #28]
   155a8:	mvn	r0, #0
   155ac:	mvn	r1, #-2147483648	; 0x80000000
   155b0:	str	r7, [sp, #8]
   155b4:	mvn	r6, #0
   155b8:	mvn	r7, #-2147483648	; 0x80000000
   155bc:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   155c0:	ldr	r3, [sp, #24]
   155c4:	ldr	ip, [sp, #28]
   155c8:	subs	r0, r0, r4
   155cc:	mov	r2, #1
   155d0:	mov	r8, r4
   155d4:	sbcs	r0, r1, r9
   155d8:	blt	155ec <__assert_fail@plt+0x4610>
   155dc:	umull	r6, r0, r8, r3
   155e0:	mov	r2, #0
   155e4:	mla	r0, r8, ip, r0
   155e8:	mla	r7, r9, r3, r0
   155ec:	ldr	r0, [sp, #8]
   155f0:	ldr	r9, [sp, #12]
   155f4:	orr	r3, r2, r0
   155f8:	b	160d8 <__assert_fail@plt+0x50fc>
   155fc:	mov	r0, #0
   15600:	mov	r1, #-2147483648	; 0x80000000
   15604:	mov	r2, r4
   15608:	mov	r3, r9
   1560c:	str	r7, [sp, #8]
   15610:	mov	r8, r4
   15614:	bl	16a14 <__assert_fail@plt+0x5a38>
   15618:	ldr	r3, [sp, #24]
   1561c:	ldr	ip, [sp, #28]
   15620:	mov	r2, #1
   15624:	mov	r6, #0
   15628:	mov	r7, #-2147483648	; 0x80000000
   1562c:	subs	r0, r0, r3
   15630:	sbcs	r0, r1, ip
   15634:	bge	155dc <__assert_fail@plt+0x4600>
   15638:	b	155ec <__assert_fail@plt+0x4610>
   1563c:	and	r0, r6, r7
   15640:	cmn	r0, #1
   15644:	beq	15680 <__assert_fail@plt+0x46a4>
   15648:	mov	r0, #0
   1564c:	mov	r1, #-2147483648	; 0x80000000
   15650:	mov	r2, r6
   15654:	mov	r3, r7
   15658:	bl	16a14 <__assert_fail@plt+0x5a38>
   1565c:	ldr	r2, [sp, #24]
   15660:	ldr	r3, [sp, #28]
   15664:	mov	r4, #1
   15668:	mov	r9, #-2147483648	; 0x80000000
   1566c:	subs	r0, r0, r2
   15670:	sbcs	r0, r1, r3
   15674:	mov	r0, #0
   15678:	str	r0, [sp, #8]
   1567c:	blt	15990 <__assert_fail@plt+0x49b4>
   15680:	umull	r1, r0, r6, r2
   15684:	mov	r4, #0
   15688:	mla	r0, r6, r3, r0
   1568c:	mla	r9, r7, r2, r0
   15690:	str	r1, [sp, #8]
   15694:	cmp	r9, #0
   15698:	bmi	15990 <__assert_fail@plt+0x49b4>
   1569c:	ldr	r3, [sp, #28]
   156a0:	mvn	r0, #0
   156a4:	mvn	r1, #-2147483648	; 0x80000000
   156a8:	str	r4, [sp, #4]
   156ac:	mvn	r8, #0
   156b0:	mvn	r4, #-2147483648	; 0x80000000
   156b4:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   156b8:	ldr	r6, [sp, #8]
   156bc:	ldr	r2, [sp, #24]
   156c0:	ldr	r3, [sp, #28]
   156c4:	mov	r7, #1
   156c8:	subs	r0, r0, r6
   156cc:	sbcs	r0, r1, r9
   156d0:	bge	159cc <__assert_fail@plt+0x49f0>
   156d4:	b	159e4 <__assert_fail@plt+0x4a08>
   156d8:	and	r0, r6, r7
   156dc:	cmn	r0, #1
   156e0:	beq	15708 <__assert_fail@plt+0x472c>
   156e4:	mov	r0, #0
   156e8:	mov	r1, #-2147483648	; 0x80000000
   156ec:	mov	r2, r6
   156f0:	mov	r3, r7
   156f4:	bl	16a14 <__assert_fail@plt+0x5a38>
   156f8:	ldr	r3, [sp, #28]
   156fc:	subs	r0, r0, #1024	; 0x400
   15700:	sbcs	r0, r1, #0
   15704:	blt	15960 <__assert_fail@plt+0x4984>
   15708:	lsl	r0, r7, #10
   1570c:	orr	r7, r0, r6, lsr #22
   15710:	lsl	r6, r6, #10
   15714:	b	160d8 <__assert_fail@plt+0x50fc>
   15718:	and	r0, r6, r7
   1571c:	cmn	r0, #1
   15720:	beq	1575c <__assert_fail@plt+0x4780>
   15724:	mov	r0, #0
   15728:	mov	r1, #-2147483648	; 0x80000000
   1572c:	mov	r2, r6
   15730:	mov	r3, r7
   15734:	bl	16a14 <__assert_fail@plt+0x5a38>
   15738:	ldr	r2, [sp, #24]
   1573c:	ldr	r3, [sp, #28]
   15740:	mov	r4, #1
   15744:	mov	r9, #-2147483648	; 0x80000000
   15748:	subs	r0, r0, r2
   1574c:	sbcs	r0, r1, r3
   15750:	mov	r0, #0
   15754:	str	r0, [sp, #8]
   15758:	blt	15ca8 <__assert_fail@plt+0x4ccc>
   1575c:	umull	r1, r0, r6, r2
   15760:	mov	r4, #0
   15764:	mla	r0, r6, r3, r0
   15768:	mla	r9, r7, r2, r0
   1576c:	str	r1, [sp, #8]
   15770:	cmp	r9, #0
   15774:	bmi	15ca8 <__assert_fail@plt+0x4ccc>
   15778:	ldr	r3, [sp, #28]
   1577c:	mvn	r0, #0
   15780:	mvn	r1, #-2147483648	; 0x80000000
   15784:	str	r4, [sp, #4]
   15788:	mvn	r8, #0
   1578c:	mvn	r4, #-2147483648	; 0x80000000
   15790:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15794:	ldr	r6, [sp, #8]
   15798:	ldr	r2, [sp, #24]
   1579c:	ldr	r3, [sp, #28]
   157a0:	mov	r7, #1
   157a4:	subs	r0, r0, r6
   157a8:	sbcs	r0, r1, r9
   157ac:	bge	15ce4 <__assert_fail@plt+0x4d08>
   157b0:	b	15cfc <__assert_fail@plt+0x4d20>
   157b4:	and	r0, r6, r7
   157b8:	cmn	r0, #1
   157bc:	beq	157f8 <__assert_fail@plt+0x481c>
   157c0:	mov	r0, #0
   157c4:	mov	r1, #-2147483648	; 0x80000000
   157c8:	mov	r2, r6
   157cc:	mov	r3, r7
   157d0:	bl	16a14 <__assert_fail@plt+0x5a38>
   157d4:	ldr	r2, [sp, #24]
   157d8:	ldr	r3, [sp, #28]
   157dc:	mov	r4, #1
   157e0:	mov	r8, #-2147483648	; 0x80000000
   157e4:	subs	r0, r0, r2
   157e8:	sbcs	r0, r1, r3
   157ec:	mov	r0, #0
   157f0:	str	r0, [sp, #8]
   157f4:	blt	15f24 <__assert_fail@plt+0x4f48>
   157f8:	umull	r1, r0, r6, r2
   157fc:	mov	r4, #0
   15800:	mla	r0, r6, r3, r0
   15804:	mla	r8, r7, r2, r0
   15808:	str	r1, [sp, #8]
   1580c:	cmp	r8, #0
   15810:	bmi	15f24 <__assert_fail@plt+0x4f48>
   15814:	ldr	r3, [sp, #28]
   15818:	mvn	r0, #0
   1581c:	mvn	r1, #-2147483648	; 0x80000000
   15820:	str	r4, [sp, #4]
   15824:	mvn	r9, #0
   15828:	mvn	r4, #-2147483648	; 0x80000000
   1582c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15830:	ldr	r6, [sp, #8]
   15834:	ldr	r2, [sp, #24]
   15838:	ldr	r3, [sp, #28]
   1583c:	mov	r7, #1
   15840:	subs	r0, r0, r6
   15844:	sbcs	r0, r1, r8
   15848:	bge	15f60 <__assert_fail@plt+0x4f84>
   1584c:	b	15f78 <__assert_fail@plt+0x4f9c>
   15850:	and	r0, r6, r7
   15854:	cmn	r0, #1
   15858:	beq	15894 <__assert_fail@plt+0x48b8>
   1585c:	mov	r0, #0
   15860:	mov	r1, #-2147483648	; 0x80000000
   15864:	mov	r2, r6
   15868:	mov	r3, r7
   1586c:	bl	16a14 <__assert_fail@plt+0x5a38>
   15870:	ldr	r2, [sp, #24]
   15874:	ldr	r3, [sp, #28]
   15878:	mov	r4, #1
   1587c:	mov	r9, #-2147483648	; 0x80000000
   15880:	subs	r0, r0, r2
   15884:	sbcs	r0, r1, r3
   15888:	mov	r0, #0
   1588c:	str	r0, [sp, #8]
   15890:	blt	16140 <__assert_fail@plt+0x5164>
   15894:	umull	r1, r0, r6, r2
   15898:	mov	r4, #0
   1589c:	mla	r0, r6, r3, r0
   158a0:	mla	r9, r7, r2, r0
   158a4:	str	r1, [sp, #8]
   158a8:	cmp	r9, #0
   158ac:	bmi	16140 <__assert_fail@plt+0x5164>
   158b0:	ldr	r3, [sp, #28]
   158b4:	mvn	r0, #0
   158b8:	mvn	r1, #-2147483648	; 0x80000000
   158bc:	str	r4, [sp]
   158c0:	mvn	r8, #-2147483648	; 0x80000000
   158c4:	str	r0, [sp, #4]
   158c8:	mvn	r0, #0
   158cc:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   158d0:	ldr	r6, [sp, #8]
   158d4:	ldr	r2, [sp, #24]
   158d8:	ldr	r3, [sp, #28]
   158dc:	mov	r7, #1
   158e0:	subs	r0, r0, r6
   158e4:	sbcs	r0, r1, r9
   158e8:	bge	16180 <__assert_fail@plt+0x51a4>
   158ec:	b	1619c <__assert_fail@plt+0x51c0>
   158f0:	and	r0, r6, r7
   158f4:	cmn	r0, #1
   158f8:	beq	15920 <__assert_fail@plt+0x4944>
   158fc:	mov	r0, #0
   15900:	mov	r1, #-2147483648	; 0x80000000
   15904:	mov	r2, r6
   15908:	mov	r3, r7
   1590c:	bl	16a14 <__assert_fail@plt+0x5a38>
   15910:	ldr	r3, [sp, #28]
   15914:	subs	r0, r0, #512	; 0x200
   15918:	sbcs	r0, r1, #0
   1591c:	blt	15960 <__assert_fail@plt+0x4984>
   15920:	lsl	r0, r7, #9
   15924:	orr	r7, r0, r6, lsr #23
   15928:	lsl	r6, r6, #9
   1592c:	b	160d8 <__assert_fail@plt+0x50fc>
   15930:	and	r0, r6, r7
   15934:	cmn	r0, #1
   15938:	beq	15980 <__assert_fail@plt+0x49a4>
   1593c:	mov	r0, #0
   15940:	mov	r1, #-2147483648	; 0x80000000
   15944:	mov	r2, r6
   15948:	mov	r3, r7
   1594c:	bl	16a14 <__assert_fail@plt+0x5a38>
   15950:	ldr	r3, [sp, #28]
   15954:	subs	r0, r0, #2
   15958:	sbcs	r0, r1, #0
   1595c:	bge	15980 <__assert_fail@plt+0x49a4>
   15960:	cmp	r7, #0
   15964:	mvn	r0, #-2147483648	; 0x80000000
   15968:	mvn	r6, #0
   1596c:	mov	r3, #1
   15970:	movmi	r0, #-2147483648	; 0x80000000
   15974:	movwmi	r6, #0
   15978:	mov	r7, r0
   1597c:	b	160d8 <__assert_fail@plt+0x50fc>
   15980:	lsl	r0, r7, #1
   15984:	orr	r7, r0, r6, lsr #31
   15988:	lsl	r6, r6, #1
   1598c:	b	160d8 <__assert_fail@plt+0x50fc>
   15990:	ldr	r6, [sp, #8]
   15994:	mov	r0, #0
   15998:	mov	r1, #-2147483648	; 0x80000000
   1599c:	mov	r3, r9
   159a0:	str	r4, [sp, #4]
   159a4:	mov	r2, r6
   159a8:	bl	16a14 <__assert_fail@plt+0x5a38>
   159ac:	ldr	r2, [sp, #24]
   159b0:	ldr	r3, [sp, #28]
   159b4:	mov	r7, #1
   159b8:	mov	r8, #0
   159bc:	mov	r4, #-2147483648	; 0x80000000
   159c0:	subs	r0, r0, r2
   159c4:	sbcs	r0, r1, r3
   159c8:	blt	15a1c <__assert_fail@plt+0x4a40>
   159cc:	umull	r8, r0, r6, r2
   159d0:	ldr	r7, [sp, #4]
   159d4:	mla	r0, r6, r3, r0
   159d8:	mla	r4, r9, r2, r0
   159dc:	cmp	r4, #0
   159e0:	bmi	15a1c <__assert_fail@plt+0x4a40>
   159e4:	ldr	r3, [sp, #28]
   159e8:	mvn	r0, #0
   159ec:	mvn	r1, #-2147483648	; 0x80000000
   159f0:	str	r7, [sp, #8]
   159f4:	mvn	r7, #0
   159f8:	mvn	r9, #-2147483648	; 0x80000000
   159fc:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15a00:	ldr	r2, [sp, #24]
   15a04:	ldr	r3, [sp, #28]
   15a08:	subs	r0, r0, r8
   15a0c:	mov	r6, #1
   15a10:	sbcs	r0, r1, r4
   15a14:	bge	15a54 <__assert_fail@plt+0x4a78>
   15a18:	b	15a6c <__assert_fail@plt+0x4a90>
   15a1c:	mov	r0, #0
   15a20:	mov	r1, #-2147483648	; 0x80000000
   15a24:	mov	r2, r8
   15a28:	mov	r3, r4
   15a2c:	str	r7, [sp, #8]
   15a30:	bl	16a14 <__assert_fail@plt+0x5a38>
   15a34:	ldr	r2, [sp, #24]
   15a38:	ldr	r3, [sp, #28]
   15a3c:	mov	r6, #1
   15a40:	mov	r7, #0
   15a44:	mov	r9, #-2147483648	; 0x80000000
   15a48:	subs	r0, r0, r2
   15a4c:	sbcs	r0, r1, r3
   15a50:	blt	15aac <__assert_fail@plt+0x4ad0>
   15a54:	umull	r7, r0, r8, r2
   15a58:	ldr	r6, [sp, #8]
   15a5c:	mla	r0, r8, r3, r0
   15a60:	mla	r9, r4, r2, r0
   15a64:	cmp	r9, #0
   15a68:	bmi	15aac <__assert_fail@plt+0x4ad0>
   15a6c:	ldr	r3, [sp, #28]
   15a70:	mvn	r0, #0
   15a74:	mvn	r1, #-2147483648	; 0x80000000
   15a78:	str	r6, [sp, #8]
   15a7c:	mvn	r8, #0
   15a80:	mvn	r4, #-2147483648	; 0x80000000
   15a84:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15a88:	ldr	r2, [sp, #24]
   15a8c:	ldr	r3, [sp, #28]
   15a90:	subs	r0, r0, r7
   15a94:	sbcs	r0, r1, r9
   15a98:	bge	15af0 <__assert_fail@plt+0x4b14>
   15a9c:	mov	r0, #1
   15aa0:	mov	r6, #0
   15aa4:	str	r0, [sp, #8]
   15aa8:	b	15b08 <__assert_fail@plt+0x4b2c>
   15aac:	mov	r0, #0
   15ab0:	mov	r1, #-2147483648	; 0x80000000
   15ab4:	mov	r2, r7
   15ab8:	mov	r3, r9
   15abc:	str	r6, [sp, #8]
   15ac0:	bl	16a14 <__assert_fail@plt+0x5a38>
   15ac4:	ldr	r2, [sp, #24]
   15ac8:	ldr	r3, [sp, #28]
   15acc:	subs	r0, r0, r2
   15ad0:	sbcs	r0, r1, r3
   15ad4:	bge	15af0 <__assert_fail@plt+0x4b14>
   15ad8:	mov	r0, #1
   15adc:	mov	r8, #0
   15ae0:	mov	r4, #-2147483648	; 0x80000000
   15ae4:	mov	r6, #0
   15ae8:	str	r0, [sp, #8]
   15aec:	b	15b40 <__assert_fail@plt+0x4b64>
   15af0:	umull	r8, r0, r7, r2
   15af4:	mov	r6, #0
   15af8:	mla	r0, r7, r3, r0
   15afc:	mla	r4, r9, r2, r0
   15b00:	cmp	r4, #0
   15b04:	bmi	15b40 <__assert_fail@plt+0x4b64>
   15b08:	ldr	r3, [sp, #28]
   15b0c:	mvn	r0, #0
   15b10:	mvn	r1, #-2147483648	; 0x80000000
   15b14:	mvn	r9, #0
   15b18:	mvn	r7, #-2147483648	; 0x80000000
   15b1c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15b20:	ldr	r2, [sp, #24]
   15b24:	ldr	r3, [sp, #28]
   15b28:	subs	r0, r0, r8
   15b2c:	sbcs	r0, r1, r4
   15b30:	bge	15b7c <__assert_fail@plt+0x4ba0>
   15b34:	mov	r0, #1
   15b38:	str	r0, [sp, #8]
   15b3c:	b	15b90 <__assert_fail@plt+0x4bb4>
   15b40:	mov	r0, #0
   15b44:	mov	r1, #-2147483648	; 0x80000000
   15b48:	mov	r2, r8
   15b4c:	mov	r3, r4
   15b50:	bl	16a14 <__assert_fail@plt+0x5a38>
   15b54:	ldr	r2, [sp, #24]
   15b58:	ldr	r3, [sp, #28]
   15b5c:	subs	r0, r0, r2
   15b60:	sbcs	r0, r1, r3
   15b64:	bge	15b7c <__assert_fail@plt+0x4ba0>
   15b68:	mov	r0, #1
   15b6c:	mov	r9, #0
   15b70:	mov	r7, #-2147483648	; 0x80000000
   15b74:	str	r0, [sp, #8]
   15b78:	b	15bcc <__assert_fail@plt+0x4bf0>
   15b7c:	umull	r9, r0, r8, r2
   15b80:	mla	r0, r8, r3, r0
   15b84:	mla	r7, r4, r2, r0
   15b88:	cmp	r7, #0
   15b8c:	bmi	15bcc <__assert_fail@plt+0x4bf0>
   15b90:	ldr	r3, [sp, #28]
   15b94:	mvn	r0, #0
   15b98:	mvn	r1, #-2147483648	; 0x80000000
   15b9c:	mvn	r8, #0
   15ba0:	mvn	r4, #-2147483648	; 0x80000000
   15ba4:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15ba8:	ldr	r2, [sp, #24]
   15bac:	ldr	r3, [sp, #28]
   15bb0:	subs	r0, r0, r9
   15bb4:	sbcs	r0, r1, r7
   15bb8:	bge	15c0c <__assert_fail@plt+0x4c30>
   15bbc:	ldr	r9, [sp, #12]
   15bc0:	mov	r0, #1
   15bc4:	str	r0, [sp, #8]
   15bc8:	b	15c24 <__assert_fail@plt+0x4c48>
   15bcc:	mov	r0, #0
   15bd0:	mov	r1, #-2147483648	; 0x80000000
   15bd4:	mov	r2, r9
   15bd8:	mov	r3, r7
   15bdc:	bl	16a14 <__assert_fail@plt+0x5a38>
   15be0:	ldr	r2, [sp, #24]
   15be4:	ldr	r3, [sp, #28]
   15be8:	subs	r0, r0, r2
   15bec:	sbcs	r0, r1, r3
   15bf0:	bge	15c0c <__assert_fail@plt+0x4c30>
   15bf4:	ldr	r9, [sp, #12]
   15bf8:	mov	r0, #1
   15bfc:	mov	r8, #0
   15c00:	mov	r4, #-2147483648	; 0x80000000
   15c04:	str	r0, [sp, #8]
   15c08:	b	15c74 <__assert_fail@plt+0x4c98>
   15c0c:	umull	r8, r0, r9, r2
   15c10:	mla	r0, r9, r3, r0
   15c14:	ldr	r9, [sp, #12]
   15c18:	mla	r4, r7, r2, r0
   15c1c:	cmp	r4, #0
   15c20:	bmi	15c74 <__assert_fail@plt+0x4c98>
   15c24:	ldr	r3, [sp, #28]
   15c28:	mvn	r0, #0
   15c2c:	mvn	r1, #-2147483648	; 0x80000000
   15c30:	mvn	r6, #0
   15c34:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15c38:	ldr	r7, [sp, #24]
   15c3c:	ldr	r3, [sp, #28]
   15c40:	subs	r0, r0, r8
   15c44:	mov	r2, #1
   15c48:	sbcs	r0, r1, r4
   15c4c:	mvn	r0, #-2147483648	; 0x80000000
   15c50:	blt	15c64 <__assert_fail@plt+0x4c88>
   15c54:	umull	r6, r0, r8, r7
   15c58:	mov	r2, #0
   15c5c:	mla	r0, r8, r3, r0
   15c60:	mla	r0, r4, r7, r0
   15c64:	ldr	r1, [sp, #8]
   15c68:	mov	r7, r0
   15c6c:	orr	r3, r2, r1
   15c70:	b	160d8 <__assert_fail@plt+0x50fc>
   15c74:	mov	r0, #0
   15c78:	mov	r1, #-2147483648	; 0x80000000
   15c7c:	mov	r2, r8
   15c80:	mov	r3, r4
   15c84:	bl	16a14 <__assert_fail@plt+0x5a38>
   15c88:	ldr	r7, [sp, #24]
   15c8c:	ldr	r3, [sp, #28]
   15c90:	mov	r2, #1
   15c94:	subs	r0, r0, r7
   15c98:	sbcs	r0, r1, r3
   15c9c:	mov	r0, #-2147483648	; 0x80000000
   15ca0:	bge	15c54 <__assert_fail@plt+0x4c78>
   15ca4:	b	15c64 <__assert_fail@plt+0x4c88>
   15ca8:	ldr	r6, [sp, #8]
   15cac:	mov	r0, #0
   15cb0:	mov	r1, #-2147483648	; 0x80000000
   15cb4:	mov	r3, r9
   15cb8:	str	r4, [sp, #4]
   15cbc:	mov	r2, r6
   15cc0:	bl	16a14 <__assert_fail@plt+0x5a38>
   15cc4:	ldr	r2, [sp, #24]
   15cc8:	ldr	r3, [sp, #28]
   15ccc:	mov	r7, #1
   15cd0:	mov	r8, #0
   15cd4:	mov	r4, #-2147483648	; 0x80000000
   15cd8:	subs	r0, r0, r2
   15cdc:	sbcs	r0, r1, r3
   15ce0:	blt	15d38 <__assert_fail@plt+0x4d5c>
   15ce4:	umull	r8, r0, r6, r2
   15ce8:	ldr	r7, [sp, #4]
   15cec:	mla	r0, r6, r3, r0
   15cf0:	mla	r4, r9, r2, r0
   15cf4:	cmp	r4, #0
   15cf8:	bmi	15d38 <__assert_fail@plt+0x4d5c>
   15cfc:	ldr	r3, [sp, #28]
   15d00:	mvn	r0, #0
   15d04:	mvn	r1, #-2147483648	; 0x80000000
   15d08:	str	r7, [sp, #4]
   15d0c:	mvn	r7, #0
   15d10:	mvn	r9, #-2147483648	; 0x80000000
   15d14:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15d18:	ldr	r2, [sp, #24]
   15d1c:	ldr	r3, [sp, #28]
   15d20:	subs	r0, r0, r8
   15d24:	mov	r6, #1
   15d28:	sbcs	r0, r1, r4
   15d2c:	str	r6, [sp, #8]
   15d30:	bge	15d74 <__assert_fail@plt+0x4d98>
   15d34:	b	15d90 <__assert_fail@plt+0x4db4>
   15d38:	mov	r0, #0
   15d3c:	mov	r1, #-2147483648	; 0x80000000
   15d40:	mov	r2, r8
   15d44:	mov	r3, r4
   15d48:	str	r7, [sp, #4]
   15d4c:	bl	16a14 <__assert_fail@plt+0x5a38>
   15d50:	ldr	r2, [sp, #24]
   15d54:	ldr	r3, [sp, #28]
   15d58:	mov	r7, #1
   15d5c:	mov	r9, #-2147483648	; 0x80000000
   15d60:	str	r7, [sp, #8]
   15d64:	mov	r7, #0
   15d68:	subs	r0, r0, r2
   15d6c:	sbcs	r0, r1, r3
   15d70:	blt	15dc8 <__assert_fail@plt+0x4dec>
   15d74:	umull	r7, r0, r8, r2
   15d78:	mla	r0, r8, r3, r0
   15d7c:	mla	r9, r4, r2, r0
   15d80:	ldr	r0, [sp, #4]
   15d84:	cmp	r9, #0
   15d88:	str	r0, [sp, #8]
   15d8c:	bmi	15dc8 <__assert_fail@plt+0x4dec>
   15d90:	ldr	r3, [sp, #28]
   15d94:	mvn	r0, #0
   15d98:	mvn	r1, #-2147483648	; 0x80000000
   15d9c:	mvn	r4, #0
   15da0:	mvn	r8, #-2147483648	; 0x80000000
   15da4:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15da8:	ldr	r2, [sp, #24]
   15dac:	ldr	r3, [sp, #28]
   15db0:	subs	r0, r0, r7
   15db4:	sbcs	r0, r1, r9
   15db8:	bge	15e04 <__assert_fail@plt+0x4e28>
   15dbc:	mov	r0, #1
   15dc0:	str	r0, [sp, #8]
   15dc4:	b	15e18 <__assert_fail@plt+0x4e3c>
   15dc8:	mov	r0, #0
   15dcc:	mov	r1, #-2147483648	; 0x80000000
   15dd0:	mov	r2, r7
   15dd4:	mov	r3, r9
   15dd8:	bl	16a14 <__assert_fail@plt+0x5a38>
   15ddc:	ldr	r2, [sp, #24]
   15de0:	ldr	r3, [sp, #28]
   15de4:	subs	r0, r0, r2
   15de8:	sbcs	r0, r1, r3
   15dec:	bge	15e04 <__assert_fail@plt+0x4e28>
   15df0:	mov	r0, #1
   15df4:	mov	r4, #0
   15df8:	mov	r8, #-2147483648	; 0x80000000
   15dfc:	str	r0, [sp, #8]
   15e00:	b	15e4c <__assert_fail@plt+0x4e70>
   15e04:	umull	r4, r0, r7, r2
   15e08:	mla	r0, r7, r3, r0
   15e0c:	mla	r8, r9, r2, r0
   15e10:	cmp	r8, #0
   15e14:	bmi	15e4c <__assert_fail@plt+0x4e70>
   15e18:	ldr	r3, [sp, #28]
   15e1c:	mvn	r0, #0
   15e20:	mvn	r1, #-2147483648	; 0x80000000
   15e24:	mvn	r6, #0
   15e28:	mvn	r9, #-2147483648	; 0x80000000
   15e2c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15e30:	ldr	r2, [sp, #24]
   15e34:	ldr	r3, [sp, #28]
   15e38:	subs	r0, r0, r4
   15e3c:	sbcs	r0, r1, r8
   15e40:	bge	15e84 <__assert_fail@plt+0x4ea8>
   15e44:	mov	r8, #1
   15e48:	b	15e9c <__assert_fail@plt+0x4ec0>
   15e4c:	mov	r0, #0
   15e50:	mov	r1, #-2147483648	; 0x80000000
   15e54:	mov	r2, r4
   15e58:	mov	r3, r8
   15e5c:	bl	16a14 <__assert_fail@plt+0x5a38>
   15e60:	ldr	r2, [sp, #24]
   15e64:	ldr	r3, [sp, #28]
   15e68:	subs	r0, r0, r2
   15e6c:	sbcs	r0, r1, r3
   15e70:	bge	15e84 <__assert_fail@plt+0x4ea8>
   15e74:	mov	r8, #1
   15e78:	mov	r6, #0
   15e7c:	mov	r9, #-2147483648	; 0x80000000
   15e80:	b	15eec <__assert_fail@plt+0x4f10>
   15e84:	umull	r6, r0, r4, r2
   15e88:	mla	r0, r4, r3, r0
   15e8c:	mla	r9, r8, r2, r0
   15e90:	ldr	r8, [sp, #8]
   15e94:	cmp	r9, #0
   15e98:	bmi	15eec <__assert_fail@plt+0x4f10>
   15e9c:	ldr	r3, [sp, #28]
   15ea0:	mvn	r0, #0
   15ea4:	mvn	r1, #-2147483648	; 0x80000000
   15ea8:	mvn	r4, #0
   15eac:	mvn	r7, #-2147483648	; 0x80000000
   15eb0:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15eb4:	ldr	r3, [sp, #24]
   15eb8:	ldr	ip, [sp, #28]
   15ebc:	subs	r0, r0, r6
   15ec0:	mov	r2, #1
   15ec4:	sbcs	r0, r1, r9
   15ec8:	blt	15edc <__assert_fail@plt+0x4f00>
   15ecc:	umull	r4, r0, r6, r3
   15ed0:	mov	r2, #0
   15ed4:	mla	r0, r6, ip, r0
   15ed8:	mla	r7, r9, r3, r0
   15edc:	ldr	r9, [sp, #12]
   15ee0:	orr	r3, r2, r8
   15ee4:	mov	r6, r4
   15ee8:	b	160d8 <__assert_fail@plt+0x50fc>
   15eec:	mov	r0, #0
   15ef0:	mov	r1, #-2147483648	; 0x80000000
   15ef4:	mov	r2, r6
   15ef8:	mov	r3, r9
   15efc:	bl	16a14 <__assert_fail@plt+0x5a38>
   15f00:	ldr	r3, [sp, #24]
   15f04:	ldr	ip, [sp, #28]
   15f08:	mov	r2, #1
   15f0c:	mov	r4, #0
   15f10:	mov	r7, #-2147483648	; 0x80000000
   15f14:	subs	r0, r0, r3
   15f18:	sbcs	r0, r1, ip
   15f1c:	bge	15ecc <__assert_fail@plt+0x4ef0>
   15f20:	b	15edc <__assert_fail@plt+0x4f00>
   15f24:	ldr	r6, [sp, #8]
   15f28:	mov	r0, #0
   15f2c:	mov	r1, #-2147483648	; 0x80000000
   15f30:	mov	r3, r8
   15f34:	str	r4, [sp, #4]
   15f38:	mov	r2, r6
   15f3c:	bl	16a14 <__assert_fail@plt+0x5a38>
   15f40:	ldr	r2, [sp, #24]
   15f44:	ldr	r3, [sp, #28]
   15f48:	mov	r7, #1
   15f4c:	mov	r9, #0
   15f50:	mov	r4, #-2147483648	; 0x80000000
   15f54:	subs	r0, r0, r2
   15f58:	sbcs	r0, r1, r3
   15f5c:	blt	15fb4 <__assert_fail@plt+0x4fd8>
   15f60:	umull	r9, r0, r6, r2
   15f64:	ldr	r7, [sp, #4]
   15f68:	mla	r0, r6, r3, r0
   15f6c:	mla	r4, r8, r2, r0
   15f70:	cmp	r4, #0
   15f74:	bmi	15fb4 <__assert_fail@plt+0x4fd8>
   15f78:	ldr	r3, [sp, #28]
   15f7c:	mvn	r0, #0
   15f80:	mvn	r1, #-2147483648	; 0x80000000
   15f84:	str	r7, [sp, #4]
   15f88:	mvn	r8, #0
   15f8c:	mvn	r7, #-2147483648	; 0x80000000
   15f90:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   15f94:	ldr	r2, [sp, #24]
   15f98:	ldr	r3, [sp, #28]
   15f9c:	subs	r0, r0, r9
   15fa0:	mov	r6, #1
   15fa4:	sbcs	r0, r1, r4
   15fa8:	str	r6, [sp, #8]
   15fac:	bge	15ff0 <__assert_fail@plt+0x5014>
   15fb0:	b	1600c <__assert_fail@plt+0x5030>
   15fb4:	mov	r0, #0
   15fb8:	mov	r1, #-2147483648	; 0x80000000
   15fbc:	mov	r2, r9
   15fc0:	mov	r3, r4
   15fc4:	str	r7, [sp, #4]
   15fc8:	bl	16a14 <__assert_fail@plt+0x5a38>
   15fcc:	ldr	r2, [sp, #24]
   15fd0:	ldr	r3, [sp, #28]
   15fd4:	mov	r7, #1
   15fd8:	mov	r8, #0
   15fdc:	str	r7, [sp, #8]
   15fe0:	mov	r7, #-2147483648	; 0x80000000
   15fe4:	subs	r0, r0, r2
   15fe8:	sbcs	r0, r1, r3
   15fec:	blt	16040 <__assert_fail@plt+0x5064>
   15ff0:	umull	r8, r0, r9, r2
   15ff4:	mla	r0, r9, r3, r0
   15ff8:	mla	r7, r4, r2, r0
   15ffc:	ldr	r0, [sp, #4]
   16000:	cmp	r7, #0
   16004:	str	r0, [sp, #8]
   16008:	bmi	16040 <__assert_fail@plt+0x5064>
   1600c:	ldr	r3, [sp, #28]
   16010:	mvn	r0, #0
   16014:	mvn	r1, #-2147483648	; 0x80000000
   16018:	mvn	r4, #0
   1601c:	mvn	r9, #-2147483648	; 0x80000000
   16020:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   16024:	ldr	r2, [sp, #24]
   16028:	ldr	r3, [sp, #28]
   1602c:	subs	r0, r0, r8
   16030:	sbcs	r0, r1, r7
   16034:	bge	16078 <__assert_fail@plt+0x509c>
   16038:	mov	r8, #1
   1603c:	b	16090 <__assert_fail@plt+0x50b4>
   16040:	mov	r0, #0
   16044:	mov	r1, #-2147483648	; 0x80000000
   16048:	mov	r2, r8
   1604c:	mov	r3, r7
   16050:	bl	16a14 <__assert_fail@plt+0x5a38>
   16054:	ldr	r2, [sp, #24]
   16058:	ldr	r3, [sp, #28]
   1605c:	subs	r0, r0, r2
   16060:	sbcs	r0, r1, r3
   16064:	bge	16078 <__assert_fail@plt+0x509c>
   16068:	mov	r8, #1
   1606c:	mov	r4, #0
   16070:	mov	r9, #-2147483648	; 0x80000000
   16074:	b	16108 <__assert_fail@plt+0x512c>
   16078:	umull	r4, r0, r8, r2
   1607c:	mla	r0, r8, r3, r0
   16080:	ldr	r8, [sp, #8]
   16084:	mla	r9, r7, r2, r0
   16088:	cmp	r9, #0
   1608c:	bmi	16108 <__assert_fail@plt+0x512c>
   16090:	ldr	r3, [sp, #28]
   16094:	mvn	r0, #0
   16098:	mvn	r1, #-2147483648	; 0x80000000
   1609c:	mvn	r6, #0
   160a0:	mvn	r7, #-2147483648	; 0x80000000
   160a4:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   160a8:	ldr	r3, [sp, #24]
   160ac:	ldr	ip, [sp, #28]
   160b0:	subs	r0, r0, r4
   160b4:	mov	r2, #1
   160b8:	sbcs	r0, r1, r9
   160bc:	blt	160d0 <__assert_fail@plt+0x50f4>
   160c0:	umull	r6, r0, r4, r3
   160c4:	mov	r2, #0
   160c8:	mla	r0, r4, ip, r0
   160cc:	mla	r7, r9, r3, r0
   160d0:	ldr	r9, [sp, #12]
   160d4:	orr	r3, r2, r8
   160d8:	ldr	r1, [sp, #20]
   160dc:	ldr	r2, [sp, #16]
   160e0:	orr	r5, r3, r5
   160e4:	add	r0, r1, r2
   160e8:	str	r0, [sl]
   160ec:	ldrb	r0, [r1, r2]
   160f0:	cmp	r0, #0
   160f4:	orrne	r5, r5, #2
   160f8:	strd	r6, [r9]
   160fc:	mov	r0, r5
   16100:	sub	sp, fp, #28
   16104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16108:	mov	r0, #0
   1610c:	mov	r1, #-2147483648	; 0x80000000
   16110:	mov	r2, r4
   16114:	mov	r3, r9
   16118:	bl	16a14 <__assert_fail@plt+0x5a38>
   1611c:	ldr	r3, [sp, #24]
   16120:	ldr	ip, [sp, #28]
   16124:	mov	r2, #1
   16128:	mov	r6, #0
   1612c:	mov	r7, #-2147483648	; 0x80000000
   16130:	subs	r0, r0, r3
   16134:	sbcs	r0, r1, ip
   16138:	bge	160c0 <__assert_fail@plt+0x50e4>
   1613c:	b	160d0 <__assert_fail@plt+0x50f4>
   16140:	ldr	r6, [sp, #8]
   16144:	mov	r0, #0
   16148:	mov	r1, #-2147483648	; 0x80000000
   1614c:	mov	r3, r9
   16150:	str	r4, [sp]
   16154:	mov	r2, r6
   16158:	bl	16a14 <__assert_fail@plt+0x5a38>
   1615c:	ldr	r2, [sp, #24]
   16160:	ldr	r3, [sp, #28]
   16164:	mov	r7, #1
   16168:	mov	r8, #-2147483648	; 0x80000000
   1616c:	subs	r0, r0, r2
   16170:	sbcs	r0, r1, r3
   16174:	mov	r0, #0
   16178:	str	r0, [sp, #4]
   1617c:	blt	161dc <__assert_fail@plt+0x5200>
   16180:	umull	r1, r0, r6, r2
   16184:	ldr	r7, [sp]
   16188:	mla	r0, r6, r3, r0
   1618c:	mla	r8, r9, r2, r0
   16190:	str	r1, [sp, #4]
   16194:	cmp	r8, #0
   16198:	bmi	161dc <__assert_fail@plt+0x5200>
   1619c:	ldr	r3, [sp, #28]
   161a0:	mvn	r0, #0
   161a4:	mvn	r1, #-2147483648	; 0x80000000
   161a8:	str	r7, [sp]
   161ac:	mvn	r7, #0
   161b0:	mvn	r4, #-2147483648	; 0x80000000
   161b4:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   161b8:	mov	r6, #1
   161bc:	ldr	r2, [sp, #24]
   161c0:	ldr	r3, [sp, #28]
   161c4:	str	r6, [sp, #8]
   161c8:	ldr	r6, [sp, #4]
   161cc:	subs	r0, r0, r6
   161d0:	sbcs	r0, r1, r8
   161d4:	bge	1621c <__assert_fail@plt+0x5240>
   161d8:	b	16238 <__assert_fail@plt+0x525c>
   161dc:	ldr	r6, [sp, #4]
   161e0:	mov	r0, #0
   161e4:	mov	r1, #-2147483648	; 0x80000000
   161e8:	mov	r3, r8
   161ec:	str	r7, [sp]
   161f0:	mov	r2, r6
   161f4:	bl	16a14 <__assert_fail@plt+0x5a38>
   161f8:	ldr	r2, [sp, #24]
   161fc:	ldr	r3, [sp, #28]
   16200:	mov	r7, #1
   16204:	mov	r4, #-2147483648	; 0x80000000
   16208:	str	r7, [sp, #8]
   1620c:	mov	r7, #0
   16210:	subs	r0, r0, r2
   16214:	sbcs	r0, r1, r3
   16218:	blt	16270 <__assert_fail@plt+0x5294>
   1621c:	umull	r7, r0, r6, r2
   16220:	mla	r0, r6, r3, r0
   16224:	mla	r4, r8, r2, r0
   16228:	ldr	r0, [sp]
   1622c:	cmp	r4, #0
   16230:	str	r0, [sp, #8]
   16234:	bmi	16270 <__assert_fail@plt+0x5294>
   16238:	ldr	r3, [sp, #28]
   1623c:	mvn	r0, #0
   16240:	mvn	r1, #-2147483648	; 0x80000000
   16244:	mvn	r9, #0
   16248:	mvn	r8, #-2147483648	; 0x80000000
   1624c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   16250:	ldr	r2, [sp, #24]
   16254:	ldr	r3, [sp, #28]
   16258:	subs	r0, r0, r7
   1625c:	sbcs	r0, r1, r4
   16260:	bge	162ac <__assert_fail@plt+0x52d0>
   16264:	mov	r0, #1
   16268:	str	r0, [sp, #8]
   1626c:	b	162c0 <__assert_fail@plt+0x52e4>
   16270:	mov	r0, #0
   16274:	mov	r1, #-2147483648	; 0x80000000
   16278:	mov	r2, r7
   1627c:	mov	r3, r4
   16280:	bl	16a14 <__assert_fail@plt+0x5a38>
   16284:	ldr	r2, [sp, #24]
   16288:	ldr	r3, [sp, #28]
   1628c:	subs	r0, r0, r2
   16290:	sbcs	r0, r1, r3
   16294:	bge	162ac <__assert_fail@plt+0x52d0>
   16298:	mov	r0, #1
   1629c:	mov	r9, #0
   162a0:	mov	r8, #-2147483648	; 0x80000000
   162a4:	str	r0, [sp, #8]
   162a8:	b	162f8 <__assert_fail@plt+0x531c>
   162ac:	umull	r9, r0, r7, r2
   162b0:	mla	r0, r7, r3, r0
   162b4:	mla	r8, r4, r2, r0
   162b8:	cmp	r8, #0
   162bc:	bmi	162f8 <__assert_fail@plt+0x531c>
   162c0:	ldr	r3, [sp, #28]
   162c4:	mvn	r0, #0
   162c8:	mvn	r1, #-2147483648	; 0x80000000
   162cc:	mvn	r4, #0
   162d0:	mvn	r7, #-2147483648	; 0x80000000
   162d4:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   162d8:	ldr	r2, [sp, #24]
   162dc:	ldr	r3, [sp, #28]
   162e0:	subs	r0, r0, r9
   162e4:	sbcs	r0, r1, r8
   162e8:	bge	16334 <__assert_fail@plt+0x5358>
   162ec:	mov	r0, #1
   162f0:	str	r0, [sp, #8]
   162f4:	b	16348 <__assert_fail@plt+0x536c>
   162f8:	mov	r0, #0
   162fc:	mov	r1, #-2147483648	; 0x80000000
   16300:	mov	r2, r9
   16304:	mov	r3, r8
   16308:	bl	16a14 <__assert_fail@plt+0x5a38>
   1630c:	ldr	r2, [sp, #24]
   16310:	ldr	r3, [sp, #28]
   16314:	subs	r0, r0, r2
   16318:	sbcs	r0, r1, r3
   1631c:	bge	16334 <__assert_fail@plt+0x5358>
   16320:	mov	r0, #1
   16324:	mov	r4, #0
   16328:	mov	r7, #-2147483648	; 0x80000000
   1632c:	str	r0, [sp, #8]
   16330:	b	16380 <__assert_fail@plt+0x53a4>
   16334:	umull	r4, r0, r9, r2
   16338:	mla	r0, r9, r3, r0
   1633c:	mla	r7, r8, r2, r0
   16340:	cmp	r7, #0
   16344:	bmi	16380 <__assert_fail@plt+0x53a4>
   16348:	ldr	r3, [sp, #28]
   1634c:	mvn	r0, #0
   16350:	mvn	r1, #-2147483648	; 0x80000000
   16354:	mvn	r8, #0
   16358:	mvn	r9, #-2147483648	; 0x80000000
   1635c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   16360:	ldr	r2, [sp, #24]
   16364:	ldr	r3, [sp, #28]
   16368:	subs	r0, r0, r4
   1636c:	sbcs	r0, r1, r7
   16370:	bge	163bc <__assert_fail@plt+0x53e0>
   16374:	mov	r0, #1
   16378:	str	r0, [sp, #8]
   1637c:	b	163d0 <__assert_fail@plt+0x53f4>
   16380:	mov	r0, #0
   16384:	mov	r1, #-2147483648	; 0x80000000
   16388:	mov	r2, r4
   1638c:	mov	r3, r7
   16390:	bl	16a14 <__assert_fail@plt+0x5a38>
   16394:	ldr	r2, [sp, #24]
   16398:	ldr	r3, [sp, #28]
   1639c:	subs	r0, r0, r2
   163a0:	sbcs	r0, r1, r3
   163a4:	bge	163bc <__assert_fail@plt+0x53e0>
   163a8:	mov	r0, #1
   163ac:	mov	r8, #0
   163b0:	mov	r9, #-2147483648	; 0x80000000
   163b4:	str	r0, [sp, #8]
   163b8:	b	1640c <__assert_fail@plt+0x5430>
   163bc:	umull	r8, r0, r4, r2
   163c0:	mla	r0, r4, r3, r0
   163c4:	mla	r9, r7, r2, r0
   163c8:	cmp	r9, #0
   163cc:	bmi	1640c <__assert_fail@plt+0x5430>
   163d0:	ldr	r3, [sp, #28]
   163d4:	mvn	r0, #0
   163d8:	mvn	r1, #-2147483648	; 0x80000000
   163dc:	mvn	r4, #0
   163e0:	mvn	r6, #-2147483648	; 0x80000000
   163e4:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   163e8:	ldr	r2, [sp, #24]
   163ec:	ldr	r3, [sp, #28]
   163f0:	subs	r0, r0, r8
   163f4:	sbcs	r0, r1, r9
   163f8:	bge	1644c <__assert_fail@plt+0x5470>
   163fc:	ldr	r9, [sp, #12]
   16400:	mov	r0, #1
   16404:	str	r0, [sp, #8]
   16408:	b	16464 <__assert_fail@plt+0x5488>
   1640c:	mov	r0, #0
   16410:	mov	r1, #-2147483648	; 0x80000000
   16414:	mov	r2, r8
   16418:	mov	r3, r9
   1641c:	bl	16a14 <__assert_fail@plt+0x5a38>
   16420:	ldr	r2, [sp, #24]
   16424:	ldr	r3, [sp, #28]
   16428:	subs	r0, r0, r2
   1642c:	sbcs	r0, r1, r3
   16430:	bge	1644c <__assert_fail@plt+0x5470>
   16434:	ldr	r9, [sp, #12]
   16438:	mov	r0, #1
   1643c:	mov	r4, #0
   16440:	mov	r6, #-2147483648	; 0x80000000
   16444:	str	r0, [sp, #8]
   16448:	b	164b0 <__assert_fail@plt+0x54d4>
   1644c:	umull	r4, r0, r8, r2
   16450:	mla	r0, r8, r3, r0
   16454:	mla	r6, r9, r2, r0
   16458:	ldr	r9, [sp, #12]
   1645c:	cmp	r6, #0
   16460:	bmi	164b0 <__assert_fail@plt+0x54d4>
   16464:	ldr	r3, [sp, #28]
   16468:	mvn	r0, #0
   1646c:	mvn	r1, #-2147483648	; 0x80000000
   16470:	mov	r8, r6
   16474:	mvn	r6, #0
   16478:	mvn	r7, #-2147483648	; 0x80000000
   1647c:	bl	16ae8 <__assert_fail@plt+0x5b0c>
   16480:	ldr	r3, [sp, #24]
   16484:	ldr	ip, [sp, #28]
   16488:	subs	r0, r0, r4
   1648c:	mov	r2, #1
   16490:	sbcs	r0, r1, r8
   16494:	blt	164a8 <__assert_fail@plt+0x54cc>
   16498:	umull	r6, r0, r4, r3
   1649c:	mov	r2, #0
   164a0:	mla	r0, r4, ip, r0
   164a4:	mla	r7, r8, r3, r0
   164a8:	ldr	r0, [sp, #8]
   164ac:	b	155f4 <__assert_fail@plt+0x4618>
   164b0:	mov	r0, #0
   164b4:	mov	r1, #-2147483648	; 0x80000000
   164b8:	mov	r2, r4
   164bc:	mov	r3, r6
   164c0:	bl	16a14 <__assert_fail@plt+0x5a38>
   164c4:	ldr	r3, [sp, #24]
   164c8:	ldr	ip, [sp, #28]
   164cc:	mov	r8, r6
   164d0:	mov	r2, #1
   164d4:	mov	r6, #0
   164d8:	mov	r7, #-2147483648	; 0x80000000
   164dc:	subs	r0, r0, r3
   164e0:	sbcs	r0, r1, ip
   164e4:	bge	16498 <__assert_fail@plt+0x54bc>
   164e8:	b	164a8 <__assert_fail@plt+0x54cc>
   164ec:	movw	r0, #31197	; 0x79dd
   164f0:	movw	r1, #31235	; 0x7a03
   164f4:	movw	r3, #31251	; 0x7a13
   164f8:	mov	r2, #85	; 0x55
   164fc:	movt	r0, #1
   16500:	movt	r1, #1
   16504:	movt	r3, #1
   16508:	bl	10fdc <__assert_fail@plt>
   1650c:	clz	r2, r1
   16510:	clz	r3, r0
   16514:	lsr	r2, r2, #5
   16518:	lsr	r3, r3, #5
   1651c:	orrs	r2, r3, r2
   16520:	movwne	r1, #1
   16524:	movwne	r0, #1
   16528:	cmp	r1, #0
   1652c:	beq	1655c <__assert_fail@plt+0x5580>
   16530:	mvn	r2, #-2147483648	; 0x80000000
   16534:	udiv	r2, r2, r1
   16538:	cmp	r2, r0
   1653c:	bcs	1655c <__assert_fail@plt+0x5580>
   16540:	push	{fp, lr}
   16544:	mov	fp, sp
   16548:	bl	10f10 <__errno_location@plt>
   1654c:	mov	r1, #12
   16550:	str	r1, [r0]
   16554:	mov	r0, #0
   16558:	pop	{fp, pc}
   1655c:	b	10d90 <calloc@plt>
   16560:	cmp	r0, #0
   16564:	movweq	r0, #1
   16568:	cmn	r0, #1
   1656c:	ble	16574 <__assert_fail@plt+0x5598>
   16570:	b	10e98 <malloc@plt>
   16574:	push	{fp, lr}
   16578:	mov	fp, sp
   1657c:	bl	10f10 <__errno_location@plt>
   16580:	mov	r1, #12
   16584:	str	r1, [r0]
   16588:	mov	r0, #0
   1658c:	pop	{fp, pc}
   16590:	push	{fp, lr}
   16594:	mov	fp, sp
   16598:	cmp	r0, #0
   1659c:	beq	165b8 <__assert_fail@plt+0x55dc>
   165a0:	cmp	r1, #0
   165a4:	beq	165c4 <__assert_fail@plt+0x55e8>
   165a8:	cmn	r1, #1
   165ac:	ble	165d0 <__assert_fail@plt+0x55f4>
   165b0:	pop	{fp, lr}
   165b4:	b	10e14 <realloc@plt>
   165b8:	mov	r0, r1
   165bc:	pop	{fp, lr}
   165c0:	b	16560 <__assert_fail@plt+0x5584>
   165c4:	bl	16760 <__assert_fail@plt+0x5784>
   165c8:	mov	r0, #0
   165cc:	pop	{fp, pc}
   165d0:	bl	10f10 <__errno_location@plt>
   165d4:	mov	r1, #12
   165d8:	str	r1, [r0]
   165dc:	mov	r0, #0
   165e0:	pop	{fp, pc}
   165e4:	push	{r4, r5, r6, sl, fp, lr}
   165e8:	add	fp, sp, #16
   165ec:	mov	r4, r0
   165f0:	bl	10e68 <__fpending@plt>
   165f4:	ldr	r6, [r4]
   165f8:	mov	r5, r0
   165fc:	mov	r0, r4
   16600:	bl	16668 <__assert_fail@plt+0x568c>
   16604:	tst	r6, #32
   16608:	bne	16640 <__assert_fail@plt+0x5664>
   1660c:	cmp	r0, #0
   16610:	mov	r4, r0
   16614:	mvnne	r4, #0
   16618:	cmp	r5, #0
   1661c:	bne	1664c <__assert_fail@plt+0x5670>
   16620:	cmp	r0, #0
   16624:	beq	1664c <__assert_fail@plt+0x5670>
   16628:	bl	10f10 <__errno_location@plt>
   1662c:	ldr	r0, [r0]
   16630:	subs	r4, r0, #9
   16634:	mvnne	r4, #0
   16638:	mov	r0, r4
   1663c:	pop	{r4, r5, r6, sl, fp, pc}
   16640:	mvn	r4, #0
   16644:	cmp	r0, #0
   16648:	beq	16654 <__assert_fail@plt+0x5678>
   1664c:	mov	r0, r4
   16650:	pop	{r4, r5, r6, sl, fp, pc}
   16654:	bl	10f10 <__errno_location@plt>
   16658:	mov	r1, #0
   1665c:	str	r1, [r0]
   16660:	mov	r0, r4
   16664:	pop	{r4, r5, r6, sl, fp, pc}
   16668:	push	{r4, r5, r6, sl, fp, lr}
   1666c:	add	fp, sp, #16
   16670:	sub	sp, sp, #8
   16674:	mov	r4, r0
   16678:	bl	10f40 <fileno@plt>
   1667c:	cmn	r0, #1
   16680:	ble	166f4 <__assert_fail@plt+0x5718>
   16684:	mov	r0, r4
   16688:	bl	10eb0 <__freading@plt>
   1668c:	cmp	r0, #0
   16690:	beq	166bc <__assert_fail@plt+0x56e0>
   16694:	mov	r0, r4
   16698:	bl	10f40 <fileno@plt>
   1669c:	mov	r1, #1
   166a0:	mov	r2, #0
   166a4:	mov	r3, #0
   166a8:	str	r1, [sp]
   166ac:	bl	10e50 <lseek64@plt>
   166b0:	and	r0, r0, r1
   166b4:	cmn	r0, #1
   166b8:	beq	166f4 <__assert_fail@plt+0x5718>
   166bc:	mov	r0, r4
   166c0:	bl	16704 <__assert_fail@plt+0x5728>
   166c4:	cmp	r0, #0
   166c8:	beq	166f4 <__assert_fail@plt+0x5718>
   166cc:	bl	10f10 <__errno_location@plt>
   166d0:	ldr	r6, [r0]
   166d4:	mov	r5, r0
   166d8:	mov	r0, r4
   166dc:	bl	10f58 <fclose@plt>
   166e0:	cmp	r6, #0
   166e4:	strne	r6, [r5]
   166e8:	mvnne	r0, #0
   166ec:	sub	sp, fp, #16
   166f0:	pop	{r4, r5, r6, sl, fp, pc}
   166f4:	mov	r0, r4
   166f8:	sub	sp, fp, #16
   166fc:	pop	{r4, r5, r6, sl, fp, lr}
   16700:	b	10f58 <fclose@plt>
   16704:	push	{r4, sl, fp, lr}
   16708:	add	fp, sp, #8
   1670c:	sub	sp, sp, #8
   16710:	mov	r4, r0
   16714:	cmp	r0, #0
   16718:	beq	16750 <__assert_fail@plt+0x5774>
   1671c:	mov	r0, r4
   16720:	bl	10eb0 <__freading@plt>
   16724:	cmp	r0, #0
   16728:	beq	16750 <__assert_fail@plt+0x5774>
   1672c:	ldrb	r0, [r4, #1]
   16730:	tst	r0, #1
   16734:	beq	16750 <__assert_fail@plt+0x5774>
   16738:	mov	r0, #1
   1673c:	mov	r2, #0
   16740:	mov	r3, #0
   16744:	str	r0, [sp]
   16748:	mov	r0, r4
   1674c:	bl	16788 <__assert_fail@plt+0x57ac>
   16750:	mov	r0, r4
   16754:	sub	sp, fp, #8
   16758:	pop	{r4, sl, fp, lr}
   1675c:	b	10dc0 <fflush@plt>
   16760:	push	{r4, r5, r6, sl, fp, lr}
   16764:	add	fp, sp, #16
   16768:	mov	r4, r0
   1676c:	bl	10f10 <__errno_location@plt>
   16770:	ldr	r6, [r0]
   16774:	mov	r5, r0
   16778:	mov	r0, r4
   1677c:	bl	10dcc <free@plt>
   16780:	str	r6, [r5]
   16784:	pop	{r4, r5, r6, sl, fp, pc}
   16788:	push	{r4, r5, r6, r7, fp, lr}
   1678c:	add	fp, sp, #16
   16790:	sub	sp, sp, #8
   16794:	mov	r4, r0
   16798:	ldr	r0, [r0, #4]
   1679c:	mov	r5, r3
   167a0:	mov	r6, r2
   167a4:	ldr	r1, [r4, #8]
   167a8:	cmp	r1, r0
   167ac:	bne	167c8 <__assert_fail@plt+0x57ec>
   167b0:	ldrd	r0, [r4, #16]
   167b4:	cmp	r1, r0
   167b8:	bne	167c8 <__assert_fail@plt+0x57ec>
   167bc:	ldr	r0, [r4, #36]	; 0x24
   167c0:	cmp	r0, #0
   167c4:	beq	167e0 <__assert_fail@plt+0x5804>
   167c8:	mov	r0, r4
   167cc:	mov	r2, r6
   167d0:	mov	r3, r5
   167d4:	sub	sp, fp, #16
   167d8:	pop	{r4, r5, r6, r7, fp, lr}
   167dc:	b	10f64 <fseeko64@plt>
   167e0:	ldr	r7, [fp, #8]
   167e4:	mov	r0, r4
   167e8:	bl	10f40 <fileno@plt>
   167ec:	mov	r2, r6
   167f0:	mov	r3, r5
   167f4:	str	r7, [sp]
   167f8:	bl	10e50 <lseek64@plt>
   167fc:	and	r2, r0, r1
   16800:	cmn	r2, #1
   16804:	beq	16824 <__assert_fail@plt+0x5848>
   16808:	strd	r0, [r4, #80]	; 0x50
   1680c:	ldr	r0, [r4]
   16810:	bic	r0, r0, #16
   16814:	str	r0, [r4]
   16818:	mov	r0, #0
   1681c:	sub	sp, fp, #16
   16820:	pop	{r4, r5, r6, r7, fp, pc}
   16824:	mvn	r0, #0
   16828:	sub	sp, fp, #16
   1682c:	pop	{r4, r5, r6, r7, fp, pc}
   16830:	push	{fp, lr}
   16834:	mov	fp, sp
   16838:	mov	r0, #14
   1683c:	bl	10f88 <nl_langinfo@plt>
   16840:	movw	r1, #29740	; 0x742c
   16844:	cmp	r0, #0
   16848:	movt	r1, #1
   1684c:	movne	r1, r0
   16850:	movw	r0, #31329	; 0x7a61
   16854:	ldrb	r2, [r1]
   16858:	movt	r0, #1
   1685c:	cmp	r2, #0
   16860:	movne	r0, r1
   16864:	pop	{fp, pc}
   16868:	push	{r4, r5, r6, r7, fp, lr}
   1686c:	add	fp, sp, #16
   16870:	sub	sp, sp, #8
   16874:	cmp	r0, #0
   16878:	add	r5, sp, #4
   1687c:	mov	r7, r2
   16880:	mov	r4, r1
   16884:	movne	r5, r0
   16888:	mov	r0, r5
   1688c:	bl	10e74 <mbrtowc@plt>
   16890:	mov	r6, r0
   16894:	cmp	r7, #0
   16898:	beq	168c0 <__assert_fail@plt+0x58e4>
   1689c:	cmn	r6, #2
   168a0:	bcc	168c0 <__assert_fail@plt+0x58e4>
   168a4:	mov	r0, #0
   168a8:	bl	16908 <__assert_fail@plt+0x592c>
   168ac:	cmp	r0, #0
   168b0:	bne	168c0 <__assert_fail@plt+0x58e4>
   168b4:	ldrb	r0, [r4]
   168b8:	mov	r6, #1
   168bc:	str	r0, [r5]
   168c0:	mov	r0, r6
   168c4:	sub	sp, fp, #16
   168c8:	pop	{r4, r5, r6, r7, fp, pc}
   168cc:	cmp	r2, #0
   168d0:	beq	16900 <__assert_fail@plt+0x5924>
   168d4:	mvn	r3, #0
   168d8:	udiv	r3, r3, r2
   168dc:	cmp	r3, r1
   168e0:	bcs	16900 <__assert_fail@plt+0x5924>
   168e4:	push	{fp, lr}
   168e8:	mov	fp, sp
   168ec:	bl	10f10 <__errno_location@plt>
   168f0:	mov	r1, #12
   168f4:	str	r1, [r0]
   168f8:	mov	r0, #0
   168fc:	pop	{fp, pc}
   16900:	mul	r1, r2, r1
   16904:	b	16590 <__assert_fail@plt+0x55b4>
   16908:	push	{r4, sl, fp, lr}
   1690c:	add	fp, sp, #8
   16910:	sub	sp, sp, #264	; 0x108
   16914:	add	r1, sp, #7
   16918:	movw	r2, #257	; 0x101
   1691c:	bl	16974 <__assert_fail@plt+0x5998>
   16920:	mov	r4, #0
   16924:	cmp	r0, #0
   16928:	bne	16968 <__assert_fail@plt+0x598c>
   1692c:	movw	r1, #31335	; 0x7a67
   16930:	add	r0, sp, #7
   16934:	mov	r2, #2
   16938:	movt	r1, #1
   1693c:	bl	10eec <bcmp@plt>
   16940:	cmp	r0, #0
   16944:	beq	16968 <__assert_fail@plt+0x598c>
   16948:	movw	r1, #31337	; 0x7a69
   1694c:	add	r0, sp, #7
   16950:	mov	r2, #6
   16954:	movt	r1, #1
   16958:	bl	10eec <bcmp@plt>
   1695c:	cmp	r0, #0
   16960:	mov	r4, r0
   16964:	movwne	r4, #1
   16968:	mov	r0, r4
   1696c:	sub	sp, fp, #8
   16970:	pop	{r4, sl, fp, pc}
   16974:	push	{r4, r5, r6, r7, fp, lr}
   16978:	add	fp, sp, #16
   1697c:	mov	r4, r1
   16980:	mov	r1, #0
   16984:	mov	r6, r2
   16988:	bl	10f70 <setlocale@plt>
   1698c:	cmp	r0, #0
   16990:	beq	169c0 <__assert_fail@plt+0x59e4>
   16994:	mov	r7, r0
   16998:	bl	10ef8 <strlen@plt>
   1699c:	cmp	r0, r6
   169a0:	bcs	169dc <__assert_fail@plt+0x5a00>
   169a4:	add	r2, r0, #1
   169a8:	mov	r0, r4
   169ac:	mov	r1, r7
   169b0:	bl	10de4 <memcpy@plt>
   169b4:	mov	r5, #0
   169b8:	mov	r0, r5
   169bc:	pop	{r4, r5, r6, r7, fp, pc}
   169c0:	mov	r5, #22
   169c4:	cmp	r6, #0
   169c8:	beq	16a04 <__assert_fail@plt+0x5a28>
   169cc:	mov	r0, #0
   169d0:	strb	r0, [r4]
   169d4:	mov	r0, r5
   169d8:	pop	{r4, r5, r6, r7, fp, pc}
   169dc:	mov	r5, #34	; 0x22
   169e0:	cmp	r6, #0
   169e4:	beq	16a04 <__assert_fail@plt+0x5a28>
   169e8:	sub	r6, r6, #1
   169ec:	mov	r0, r4
   169f0:	mov	r1, r7
   169f4:	mov	r2, r6
   169f8:	bl	10de4 <memcpy@plt>
   169fc:	mov	r0, #0
   16a00:	strb	r0, [r4, r6]
   16a04:	mov	r0, r5
   16a08:	pop	{r4, r5, r6, r7, fp, pc}
   16a0c:	mov	r1, #0
   16a10:	b	10f70 <setlocale@plt>
   16a14:	cmp	r3, #0
   16a18:	cmpeq	r2, #0
   16a1c:	bne	16a40 <__assert_fail@plt+0x5a64>
   16a20:	cmp	r1, #0
   16a24:	movlt	r1, #-2147483648	; 0x80000000
   16a28:	movlt	r0, #0
   16a2c:	blt	16a3c <__assert_fail@plt+0x5a60>
   16a30:	cmpeq	r0, #0
   16a34:	mvnne	r1, #-2147483648	; 0x80000000
   16a38:	mvnne	r0, #0
   16a3c:	b	16b24 <__assert_fail@plt+0x5b48>
   16a40:	sub	sp, sp, #8
   16a44:	push	{sp, lr}
   16a48:	cmp	r1, #0
   16a4c:	blt	16a6c <__assert_fail@plt+0x5a90>
   16a50:	cmp	r3, #0
   16a54:	blt	16aa0 <__assert_fail@plt+0x5ac4>
   16a58:	bl	16b34 <__assert_fail@plt+0x5b58>
   16a5c:	ldr	lr, [sp, #4]
   16a60:	add	sp, sp, #8
   16a64:	pop	{r2, r3}
   16a68:	bx	lr
   16a6c:	rsbs	r0, r0, #0
   16a70:	sbc	r1, r1, r1, lsl #1
   16a74:	cmp	r3, #0
   16a78:	blt	16ac4 <__assert_fail@plt+0x5ae8>
   16a7c:	bl	16b34 <__assert_fail@plt+0x5b58>
   16a80:	ldr	lr, [sp, #4]
   16a84:	add	sp, sp, #8
   16a88:	pop	{r2, r3}
   16a8c:	rsbs	r0, r0, #0
   16a90:	sbc	r1, r1, r1, lsl #1
   16a94:	rsbs	r2, r2, #0
   16a98:	sbc	r3, r3, r3, lsl #1
   16a9c:	bx	lr
   16aa0:	rsbs	r2, r2, #0
   16aa4:	sbc	r3, r3, r3, lsl #1
   16aa8:	bl	16b34 <__assert_fail@plt+0x5b58>
   16aac:	ldr	lr, [sp, #4]
   16ab0:	add	sp, sp, #8
   16ab4:	pop	{r2, r3}
   16ab8:	rsbs	r0, r0, #0
   16abc:	sbc	r1, r1, r1, lsl #1
   16ac0:	bx	lr
   16ac4:	rsbs	r2, r2, #0
   16ac8:	sbc	r3, r3, r3, lsl #1
   16acc:	bl	16b34 <__assert_fail@plt+0x5b58>
   16ad0:	ldr	lr, [sp, #4]
   16ad4:	add	sp, sp, #8
   16ad8:	pop	{r2, r3}
   16adc:	rsbs	r2, r2, #0
   16ae0:	sbc	r3, r3, r3, lsl #1
   16ae4:	bx	lr
   16ae8:	cmp	r3, #0
   16aec:	cmpeq	r2, #0
   16af0:	bne	16b08 <__assert_fail@plt+0x5b2c>
   16af4:	cmp	r1, #0
   16af8:	cmpeq	r0, #0
   16afc:	mvnne	r1, #0
   16b00:	mvnne	r0, #0
   16b04:	b	16b24 <__assert_fail@plt+0x5b48>
   16b08:	sub	sp, sp, #8
   16b0c:	push	{sp, lr}
   16b10:	bl	16b34 <__assert_fail@plt+0x5b58>
   16b14:	ldr	lr, [sp, #4]
   16b18:	add	sp, sp, #8
   16b1c:	pop	{r2, r3}
   16b20:	bx	lr
   16b24:	push	{r1, lr}
   16b28:	mov	r0, #8
   16b2c:	bl	10da8 <raise@plt>
   16b30:	pop	{r1, pc}
   16b34:	cmp	r1, r3
   16b38:	cmpeq	r0, r2
   16b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b40:	mov	r4, r0
   16b44:	movcc	r0, #0
   16b48:	mov	r5, r1
   16b4c:	ldr	lr, [sp, #36]	; 0x24
   16b50:	movcc	r1, r0
   16b54:	bcc	16c50 <__assert_fail@plt+0x5c74>
   16b58:	cmp	r3, #0
   16b5c:	clzeq	ip, r2
   16b60:	clzne	ip, r3
   16b64:	addeq	ip, ip, #32
   16b68:	cmp	r5, #0
   16b6c:	clzeq	r1, r4
   16b70:	addeq	r1, r1, #32
   16b74:	clzne	r1, r5
   16b78:	sub	ip, ip, r1
   16b7c:	sub	sl, ip, #32
   16b80:	lsl	r9, r3, ip
   16b84:	rsb	fp, ip, #32
   16b88:	orr	r9, r9, r2, lsl sl
   16b8c:	orr	r9, r9, r2, lsr fp
   16b90:	lsl	r8, r2, ip
   16b94:	cmp	r5, r9
   16b98:	cmpeq	r4, r8
   16b9c:	movcc	r0, #0
   16ba0:	movcc	r1, r0
   16ba4:	bcc	16bc0 <__assert_fail@plt+0x5be4>
   16ba8:	mov	r0, #1
   16bac:	subs	r4, r4, r8
   16bb0:	lsl	r1, r0, sl
   16bb4:	orr	r1, r1, r0, lsr fp
   16bb8:	lsl	r0, r0, ip
   16bbc:	sbc	r5, r5, r9
   16bc0:	cmp	ip, #0
   16bc4:	beq	16c50 <__assert_fail@plt+0x5c74>
   16bc8:	lsr	r6, r8, #1
   16bcc:	orr	r6, r6, r9, lsl #31
   16bd0:	lsr	r7, r9, #1
   16bd4:	mov	r2, ip
   16bd8:	b	16bfc <__assert_fail@plt+0x5c20>
   16bdc:	subs	r3, r4, r6
   16be0:	sbc	r8, r5, r7
   16be4:	adds	r3, r3, r3
   16be8:	adc	r8, r8, r8
   16bec:	adds	r4, r3, #1
   16bf0:	adc	r5, r8, #0
   16bf4:	subs	r2, r2, #1
   16bf8:	beq	16c18 <__assert_fail@plt+0x5c3c>
   16bfc:	cmp	r5, r7
   16c00:	cmpeq	r4, r6
   16c04:	bcs	16bdc <__assert_fail@plt+0x5c00>
   16c08:	adds	r4, r4, r4
   16c0c:	adc	r5, r5, r5
   16c10:	subs	r2, r2, #1
   16c14:	bne	16bfc <__assert_fail@plt+0x5c20>
   16c18:	lsr	r3, r4, ip
   16c1c:	orr	r3, r3, r5, lsl fp
   16c20:	lsr	r2, r5, ip
   16c24:	orr	r3, r3, r5, lsr sl
   16c28:	adds	r0, r0, r4
   16c2c:	mov	r4, r3
   16c30:	lsl	r3, r2, ip
   16c34:	orr	r3, r3, r4, lsl sl
   16c38:	lsl	ip, r4, ip
   16c3c:	orr	r3, r3, r4, lsr fp
   16c40:	adc	r1, r1, r5
   16c44:	subs	r0, r0, ip
   16c48:	mov	r5, r2
   16c4c:	sbc	r1, r1, r3
   16c50:	cmp	lr, #0
   16c54:	strdne	r4, [lr]
   16c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c60:	mov	r7, r0
   16c64:	ldr	r6, [pc, #72]	; 16cb4 <__assert_fail@plt+0x5cd8>
   16c68:	ldr	r5, [pc, #72]	; 16cb8 <__assert_fail@plt+0x5cdc>
   16c6c:	add	r6, pc, r6
   16c70:	add	r5, pc, r5
   16c74:	sub	r6, r6, r5
   16c78:	mov	r8, r1
   16c7c:	mov	r9, r2
   16c80:	bl	10d70 <calloc@plt-0x20>
   16c84:	asrs	r6, r6, #2
   16c88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c8c:	mov	r4, #0
   16c90:	add	r4, r4, #1
   16c94:	ldr	r3, [r5], #4
   16c98:	mov	r2, r9
   16c9c:	mov	r1, r8
   16ca0:	mov	r0, r7
   16ca4:	blx	r3
   16ca8:	cmp	r6, r4
   16cac:	bne	16c90 <__assert_fail@plt+0x5cb4>
   16cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cb4:	muleq	r1, r8, r2
   16cb8:	muleq	r1, r0, r2
   16cbc:	bx	lr
   16cc0:	ldr	r3, [pc, #12]	; 16cd4 <__assert_fail@plt+0x5cf8>
   16cc4:	mov	r1, #0
   16cc8:	add	r3, pc, r3
   16ccc:	ldr	r2, [r3]
   16cd0:	b	10f1c <__cxa_atexit@plt>
   16cd4:	andeq	r1, r1, ip, lsl #8

Disassembly of section .fini:

00016cd8 <.fini>:
   16cd8:	push	{r3, lr}
   16cdc:	pop	{r3, pc}
