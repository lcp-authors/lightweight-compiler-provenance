
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010adc <.init>:
   10adc:	push	{r3, lr}
   10ae0:	bl	113cc <__assert_fail@plt+0x6c0>
   10ae4:	pop	{r3, pc}

Disassembly of section .plt:

00010ae8 <calloc@plt-0x14>:
   10ae8:	push	{lr}		; (str lr, [sp, #-4]!)
   10aec:	ldr	lr, [pc, #4]	; 10af8 <calloc@plt-0x4>
   10af0:	add	lr, pc, lr
   10af4:	ldr	pc, [lr, #8]!
   10af8:	andeq	r8, r1, r8, lsl #10

00010afc <calloc@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #24, 20	; 0x18000
   10b04:	ldr	pc, [ip, #1288]!	; 0x508

00010b08 <fputs_unlocked@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #24, 20	; 0x18000
   10b10:	ldr	pc, [ip, #1280]!	; 0x500

00010b14 <raise@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #24, 20	; 0x18000
   10b1c:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b20 <strcmp@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #24, 20	; 0x18000
   10b28:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b2c <fflush@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #24, 20	; 0x18000
   10b34:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b38 <free@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #24, 20	; 0x18000
   10b40:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b44 <_exit@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #24, 20	; 0x18000
   10b4c:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b50 <memcpy@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #24, 20	; 0x18000
   10b58:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b5c <mbsinit@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #24, 20	; 0x18000
   10b64:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b68 <memcmp@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #24, 20	; 0x18000
   10b70:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b74 <fputc_unlocked@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #24, 20	; 0x18000
   10b7c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b80 <dcgettext@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #24, 20	; 0x18000
   10b88:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b8c <realloc@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #24, 20	; 0x18000
   10b94:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b98 <textdomain@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #24, 20	; 0x18000
   10ba0:	ldr	pc, [ip, #1184]!	; 0x4a0

00010ba4 <iswprint@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #24, 20	; 0x18000
   10bac:	ldr	pc, [ip, #1176]!	; 0x498

00010bb0 <fwrite@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #24, 20	; 0x18000
   10bb8:	ldr	pc, [ip, #1168]!	; 0x490

00010bbc <lseek64@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #24, 20	; 0x18000
   10bc4:	ldr	pc, [ip, #1160]!	; 0x488

00010bc8 <__ctype_get_mb_cur_max@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #24, 20	; 0x18000
   10bd0:	ldr	pc, [ip, #1152]!	; 0x480

00010bd4 <__fpending@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #24, 20	; 0x18000
   10bdc:	ldr	pc, [ip, #1144]!	; 0x478

00010be0 <mbrtowc@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #24, 20	; 0x18000
   10be8:	ldr	pc, [ip, #1136]!	; 0x470

00010bec <error@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #24, 20	; 0x18000
   10bf4:	ldr	pc, [ip, #1128]!	; 0x468

00010bf8 <getenv@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #24, 20	; 0x18000
   10c00:	ldr	pc, [ip, #1120]!	; 0x460

00010c04 <malloc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #24, 20	; 0x18000
   10c0c:	ldr	pc, [ip, #1112]!	; 0x458

00010c10 <__libc_start_main@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #24, 20	; 0x18000
   10c18:	ldr	pc, [ip, #1104]!	; 0x450

00010c1c <__freading@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #24, 20	; 0x18000
   10c24:	ldr	pc, [ip, #1096]!	; 0x448

00010c28 <__gmon_start__@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #24, 20	; 0x18000
   10c30:	ldr	pc, [ip, #1088]!	; 0x440

00010c34 <__ctype_b_loc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #24, 20	; 0x18000
   10c3c:	ldr	pc, [ip, #1080]!	; 0x438

00010c40 <exit@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #24, 20	; 0x18000
   10c48:	ldr	pc, [ip, #1072]!	; 0x430

00010c4c <strlen@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #24, 20	; 0x18000
   10c54:	ldr	pc, [ip, #1064]!	; 0x428

00010c58 <__errno_location@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #24, 20	; 0x18000
   10c60:	ldr	pc, [ip, #1056]!	; 0x420

00010c64 <__cxa_atexit@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #24, 20	; 0x18000
   10c6c:	ldr	pc, [ip, #1048]!	; 0x418

00010c70 <memset@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #24, 20	; 0x18000
   10c78:	ldr	pc, [ip, #1040]!	; 0x410

00010c7c <__printf_chk@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #24, 20	; 0x18000
   10c84:	ldr	pc, [ip, #1032]!	; 0x408

00010c88 <fileno@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #24, 20	; 0x18000
   10c90:	ldr	pc, [ip, #1024]!	; 0x400

00010c94 <__fprintf_chk@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #24, 20	; 0x18000
   10c9c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010ca0 <fclose@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #1008]!	; 0x3f0

00010cac <fseeko64@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #1000]!	; 0x3e8

00010cb8 <__overflow@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #992]!	; 0x3e0

00010cc4 <setlocale@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #984]!	; 0x3d8

00010cd0 <strrchr@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cdc <nl_langinfo@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #968]!	; 0x3c8

00010ce8 <bindtextdomain@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cf4 <strncmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #952]!	; 0x3b8

00010d00 <abort@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #944]!	; 0x3b0

00010d0c <__assert_fail@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #936]!	; 0x3a8

Disassembly of section .text:

00010d18 <.text>:
   10d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d1c:	mov	r6, r0
   10d20:	sub	sp, sp, #28
   10d24:	ldr	r0, [pc, #1580]	; 11358 <__assert_fail@plt+0x64c>
   10d28:	mov	r8, r1
   10d2c:	bl	10bf8 <getenv@plt>
   10d30:	subs	r9, r0, #0
   10d34:	movne	r4, #1
   10d38:	moveq	r4, #0
   10d3c:	beq	10d5c <__assert_fail@plt+0x50>
   10d40:	cmp	r6, #1
   10d44:	ble	10fc0 <__assert_fail@plt+0x2b4>
   10d48:	ldr	r1, [pc, #1548]	; 1135c <__assert_fail@plt+0x650>
   10d4c:	ldr	r0, [r8, #4]
   10d50:	bl	10b20 <strcmp@plt>
   10d54:	cmp	r0, #0
   10d58:	bne	10fc0 <__assert_fail@plt+0x2b4>
   10d5c:	ldr	r0, [r8]
   10d60:	bl	119fc <__assert_fail@plt+0xcf0>
   10d64:	ldr	r1, [pc, #1524]	; 11360 <__assert_fail@plt+0x654>
   10d68:	mov	r0, #6
   10d6c:	bl	10cc4 <setlocale@plt>
   10d70:	ldr	r1, [pc, #1516]	; 11364 <__assert_fail@plt+0x658>
   10d74:	ldr	r0, [pc, #1516]	; 11368 <__assert_fail@plt+0x65c>
   10d78:	bl	10ce8 <bindtextdomain@plt>
   10d7c:	ldr	r0, [pc, #1508]	; 11368 <__assert_fail@plt+0x65c>
   10d80:	bl	10b98 <textdomain@plt>
   10d84:	ldr	r0, [pc, #1504]	; 1136c <__assert_fail@plt+0x660>
   10d88:	bl	174d8 <__assert_fail@plt+0x67cc>
   10d8c:	cmp	r6, #2
   10d90:	bne	11310 <__assert_fail@plt+0x604>
   10d94:	ldr	r5, [r8, #4]
   10d98:	ldr	r1, [pc, #1488]	; 11370 <__assert_fail@plt+0x664>
   10d9c:	mov	r0, r5
   10da0:	bl	10b20 <strcmp@plt>
   10da4:	cmp	r0, #0
   10da8:	beq	11354 <__assert_fail@plt+0x648>
   10dac:	ldr	r1, [pc, #1472]	; 11374 <__assert_fail@plt+0x668>
   10db0:	mov	r0, r5
   10db4:	bl	10b20 <strcmp@plt>
   10db8:	cmp	r0, #0
   10dbc:	addne	r7, r8, #4
   10dc0:	movne	r6, #1
   10dc4:	beq	11014 <__assert_fail@plt+0x308>
   10dc8:	ldrb	r3, [r5]
   10dcc:	mov	r0, r5
   10dd0:	cmp	r3, #45	; 0x2d
   10dd4:	bne	11344 <__assert_fail@plt+0x638>
   10dd8:	mov	r1, #0
   10ddc:	mov	ip, r1
   10de0:	mov	r9, #1
   10de4:	ldrb	r3, [r0, #1]
   10de8:	add	r2, r0, #1
   10dec:	cmp	r3, #0
   10df0:	beq	10e0c <__assert_fail@plt+0x100>
   10df4:	cmp	r3, #101	; 0x65
   10df8:	beq	111d0 <__assert_fail@plt+0x4c4>
   10dfc:	cmp	r3, #110	; 0x6e
   10e00:	beq	111d0 <__assert_fail@plt+0x4c4>
   10e04:	cmp	r3, #69	; 0x45
   10e08:	beq	111d0 <__assert_fail@plt+0x4c4>
   10e0c:	orr	r1, r4, r1
   10e10:	tst	r1, #255	; 0xff
   10e14:	beq	11180 <__assert_fail@plt+0x474>
   10e18:	ldr	fp, [pc, #1368]	; 11378 <__assert_fail@plt+0x66c>
   10e1c:	sub	r7, r7, #4
   10e20:	str	r9, [sp, #20]
   10e24:	ldr	r1, [r7, #4]!
   10e28:	mov	r4, #7
   10e2c:	mov	r8, #0
   10e30:	mov	r5, #11
   10e34:	mov	sl, r1
   10e38:	b	10e64 <__assert_fail@plt+0x158>
   10e3c:	mov	r1, r3
   10e40:	ldr	r0, [fp]
   10e44:	ldr	r2, [r0, #20]
   10e48:	ldr	ip, [r0, #24]
   10e4c:	cmp	r2, ip
   10e50:	addcc	r1, r2, #1
   10e54:	strcc	r1, [r0, #20]
   10e58:	strbcc	r3, [r2]
   10e5c:	bcs	11244 <__assert_fail@plt+0x538>
   10e60:	mov	sl, r9
   10e64:	ldrb	r3, [sl]
   10e68:	add	r9, sl, #1
   10e6c:	cmp	r3, #0
   10e70:	beq	1124c <__assert_fail@plt+0x540>
   10e74:	cmp	r3, #92	; 0x5c
   10e78:	bne	10e3c <__assert_fail@plt+0x130>
   10e7c:	ldrb	r2, [sl, #1]
   10e80:	cmp	r2, #0
   10e84:	beq	10e3c <__assert_fail@plt+0x130>
   10e88:	sub	r3, r2, #48	; 0x30
   10e8c:	add	r9, sl, #2
   10e90:	cmp	r3, #72	; 0x48
   10e94:	ldrls	pc, [pc, r3, lsl #2]
   10e98:	b	11108 <__assert_fail@plt+0x3fc>
   10e9c:	andeq	r1, r1, r4, asr #1
   10ea0:	andeq	r1, r1, ip, asr r0
   10ea4:	andeq	r1, r1, ip, asr r0
   10ea8:	andeq	r1, r1, ip, asr r0
   10eac:	andeq	r1, r1, ip, asr r0
   10eb0:	andeq	r1, r1, ip, asr r0
   10eb4:	andeq	r1, r1, ip, asr r0
   10eb8:	andeq	r1, r1, ip, asr r0
   10ebc:	andeq	r1, r1, r8, lsl #2
   10ec0:	andeq	r1, r1, r8, lsl #2
   10ec4:	andeq	r1, r1, r8, lsl #2
   10ec8:	andeq	r1, r1, r8, lsl #2
   10ecc:	andeq	r1, r1, r8, lsl #2
   10ed0:	andeq	r1, r1, r8, lsl #2
   10ed4:	andeq	r1, r1, r8, lsl #2
   10ed8:	andeq	r1, r1, r8, lsl #2
   10edc:	andeq	r1, r1, r8, lsl #2
   10ee0:	andeq	r1, r1, r8, lsl #2
   10ee4:	andeq	r1, r1, r8, lsl #2
   10ee8:	andeq	r1, r1, r8, lsl #2
   10eec:	andeq	r1, r1, r8, lsl #2
   10ef0:	andeq	r1, r1, r8, lsl #2
   10ef4:	andeq	r1, r1, r8, lsl #2
   10ef8:	andeq	r1, r1, r8, lsl #2
   10efc:	andeq	r1, r1, r8, lsl #2
   10f00:	andeq	r1, r1, r8, lsl #2
   10f04:	andeq	r1, r1, r8, lsl #2
   10f08:	andeq	r1, r1, r8, lsl #2
   10f0c:	andeq	r1, r1, r8, lsl #2
   10f10:	andeq	r1, r1, r8, lsl #2
   10f14:	andeq	r1, r1, r8, lsl #2
   10f18:	andeq	r1, r1, r8, lsl #2
   10f1c:	andeq	r1, r1, r8, lsl #2
   10f20:	andeq	r1, r1, r8, lsl #2
   10f24:	andeq	r1, r1, r8, lsl #2
   10f28:	andeq	r1, r1, r8, lsl #2
   10f2c:	andeq	r1, r1, r8, lsl #2
   10f30:	andeq	r1, r1, r8, lsl #2
   10f34:	andeq	r1, r1, r8, lsl #2
   10f38:	andeq	r1, r1, r8, lsl #2
   10f3c:	andeq	r1, r1, r8, lsl #2
   10f40:	andeq	r1, r1, r8, lsl #2
   10f44:	andeq	r1, r1, r8, lsl #2
   10f48:	andeq	r1, r1, r8, lsl #2
   10f4c:	strheq	r1, [r1], -r8
   10f50:	andeq	r1, r1, r8, lsl #2
   10f54:	andeq	r1, r1, r8, lsl #2
   10f58:	andeq	r1, r1, r8, lsl #2
   10f5c:	andeq	r1, r1, r8, lsl #2
   10f60:	andeq	r1, r1, r0, asr r0
   10f64:	andeq	r1, r1, ip, lsr #1
   10f68:	andeq	r1, r1, r4, asr #32
   10f6c:	andeq	r1, r1, r8, lsl #2
   10f70:	andeq	r1, r1, r4, ror r1
   10f74:	andeq	r1, r1, r8, ror #2
   10f78:	andeq	r1, r1, r8, lsl #2
   10f7c:	andeq	r1, r1, r8, lsl #2
   10f80:	andeq	r1, r1, r8, lsl #2
   10f84:	andeq	r1, r1, r8, lsl #2
   10f88:	andeq	r1, r1, r8, lsl #2
   10f8c:	andeq	r1, r1, r8, lsl #2
   10f90:	andeq	r1, r1, r8, lsl #2
   10f94:	andeq	r1, r1, ip, asr r1
   10f98:	andeq	r1, r1, r8, lsl #2
   10f9c:	andeq	r1, r1, r8, lsl #2
   10fa0:	andeq	r1, r1, r8, lsl #2
   10fa4:	andeq	r1, r1, r0, asr r1
   10fa8:	andeq	r1, r1, r8, lsl #2
   10fac:	andeq	r1, r1, r4, asr #2
   10fb0:	andeq	r1, r1, r8, lsl #2
   10fb4:	andeq	r1, r1, r8, lsr r1
   10fb8:	andeq	r1, r1, r8, lsl #2
   10fbc:	andeq	r1, r1, r4, ror #1
   10fc0:	mov	r7, r8
   10fc4:	sub	r6, r6, #1
   10fc8:	ldr	r0, [r7], #4
   10fcc:	bl	119fc <__assert_fail@plt+0xcf0>
   10fd0:	ldr	r1, [pc, #904]	; 11360 <__assert_fail@plt+0x654>
   10fd4:	mov	r0, #6
   10fd8:	bl	10cc4 <setlocale@plt>
   10fdc:	ldr	r1, [pc, #896]	; 11364 <__assert_fail@plt+0x658>
   10fe0:	ldr	r0, [pc, #896]	; 11368 <__assert_fail@plt+0x65c>
   10fe4:	bl	10ce8 <bindtextdomain@plt>
   10fe8:	ldr	r0, [pc, #888]	; 11368 <__assert_fail@plt+0x65c>
   10fec:	bl	10b98 <textdomain@plt>
   10ff0:	ldr	r0, [pc, #884]	; 1136c <__assert_fail@plt+0x660>
   10ff4:	bl	174d8 <__assert_fail@plt+0x67cc>
   10ff8:	cmp	r9, #0
   10ffc:	moveq	r9, #1
   11000:	beq	11180 <__assert_fail@plt+0x474>
   11004:	cmp	r6, #0
   11008:	ble	11290 <__assert_fail@plt+0x584>
   1100c:	mov	r9, #1
   11010:	b	10e18 <__assert_fail@plt+0x10c>
   11014:	ldr	r3, [pc, #864]	; 1137c <__assert_fail@plt+0x670>
   11018:	ldr	ip, [pc, #856]	; 11378 <__assert_fail@plt+0x66c>
   1101c:	ldr	r1, [pc, #860]	; 11380 <__assert_fail@plt+0x674>
   11020:	ldr	r2, [pc, #860]	; 11384 <__assert_fail@plt+0x678>
   11024:	str	r0, [sp, #8]
   11028:	ldr	r3, [r3]
   1102c:	ldr	r0, [ip]
   11030:	str	r1, [sp, #4]
   11034:	str	r2, [sp]
   11038:	ldr	r1, [pc, #840]	; 11388 <__assert_fail@plt+0x67c>
   1103c:	ldr	r2, [pc, #840]	; 1138c <__assert_fail@plt+0x680>
   11040:	bl	1629c <__assert_fail@plt+0x5590>
   11044:	mov	r0, #0
   11048:	add	sp, sp, #28
   1104c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11050:	mov	r1, r4
   11054:	mov	r3, r4
   11058:	b	10e40 <__assert_fail@plt+0x134>
   1105c:	mov	r1, r2
   11060:	ldrb	r3, [r9]
   11064:	sub	r1, r1, #48	; 0x30
   11068:	sub	r2, r3, #48	; 0x30
   1106c:	uxtb	r3, r1
   11070:	uxtb	r2, r2
   11074:	cmp	r2, #7
   11078:	bhi	10e3c <__assert_fail@plt+0x130>
   1107c:	ldrb	r1, [r9, #1]
   11080:	add	r3, r2, r3, lsl #3
   11084:	and	r3, r3, #255	; 0xff
   11088:	sub	r2, r1, #48	; 0x30
   1108c:	uxtb	r2, r2
   11090:	cmp	r2, #7
   11094:	addls	r3, r2, r3, lsl #3
   11098:	andls	r3, r3, #255	; 0xff
   1109c:	addhi	r9, r9, #1
   110a0:	addls	r9, r9, #2
   110a4:	mov	r1, r3
   110a8:	b	10e40 <__assert_fail@plt+0x134>
   110ac:	mov	r1, #8
   110b0:	mov	r3, r1
   110b4:	b	10e40 <__assert_fail@plt+0x134>
   110b8:	mov	r1, #92	; 0x5c
   110bc:	mov	r3, r1
   110c0:	b	10e40 <__assert_fail@plt+0x134>
   110c4:	ldrb	r1, [sl, #2]
   110c8:	sub	r3, r1, #48	; 0x30
   110cc:	cmp	r3, #7
   110d0:	addls	r9, sl, #3
   110d4:	bls	11060 <__assert_fail@plt+0x354>
   110d8:	mov	r1, r8
   110dc:	mov	r3, r8
   110e0:	b	10e40 <__assert_fail@plt+0x134>
   110e4:	str	r2, [sp, #16]
   110e8:	bl	10c34 <__ctype_b_loc@plt>
   110ec:	ldrb	r3, [sl, #2]
   110f0:	ldr	r2, [sp, #16]
   110f4:	lsl	ip, r3, #1
   110f8:	ldr	r1, [r0]
   110fc:	ldrh	r0, [r1, ip]
   11100:	tst	r0, #4096	; 0x1000
   11104:	bne	112c4 <__assert_fail@plt+0x5b8>
   11108:	ldr	r0, [fp]
   1110c:	ldr	ip, [r0, #20]
   11110:	ldr	r3, [r0, #24]
   11114:	cmp	r3, ip
   11118:	bls	11328 <__assert_fail@plt+0x61c>
   1111c:	mov	r1, r2
   11120:	add	r3, ip, #1
   11124:	mov	r2, #92	; 0x5c
   11128:	str	r3, [r0, #20]
   1112c:	mov	r3, r1
   11130:	strb	r2, [ip]
   11134:	b	10e40 <__assert_fail@plt+0x134>
   11138:	mov	r1, r5
   1113c:	mov	r3, #11
   11140:	b	10e40 <__assert_fail@plt+0x134>
   11144:	mov	r1, #9
   11148:	mov	r3, r1
   1114c:	b	10e40 <__assert_fail@plt+0x134>
   11150:	mov	r1, #13
   11154:	mov	r3, r1
   11158:	b	10e40 <__assert_fail@plt+0x134>
   1115c:	mov	r1, #10
   11160:	mov	r3, r1
   11164:	b	10e40 <__assert_fail@plt+0x134>
   11168:	mov	r1, #12
   1116c:	mov	r3, r1
   11170:	b	10e40 <__assert_fail@plt+0x134>
   11174:	mov	r1, #27
   11178:	mov	r3, r1
   1117c:	b	10e40 <__assert_fail@plt+0x134>
   11180:	cmp	r6, #0
   11184:	ble	11288 <__assert_fail@plt+0x57c>
   11188:	ldr	r4, [pc, #488]	; 11378 <__assert_fail@plt+0x66c>
   1118c:	mov	r5, #32
   11190:	ldr	r1, [r4]
   11194:	ldr	r0, [r7], #4
   11198:	bl	10b08 <fputs_unlocked@plt>
   1119c:	subs	r6, r6, #1
   111a0:	beq	11288 <__assert_fail@plt+0x57c>
   111a4:	ldr	r0, [r4]
   111a8:	ldr	r3, [r0, #20]
   111ac:	ldr	r2, [r0, #24]
   111b0:	cmp	r3, r2
   111b4:	addcc	r2, r3, #1
   111b8:	strcc	r2, [r0, #20]
   111bc:	strbcc	r5, [r3]
   111c0:	bcc	11190 <__assert_fail@plt+0x484>
   111c4:	mov	r1, r5
   111c8:	bl	10cb8 <__overflow@plt>
   111cc:	b	11190 <__assert_fail@plt+0x484>
   111d0:	ldrb	r3, [r2, #1]!
   111d4:	cmp	r3, #0
   111d8:	bne	10df4 <__assert_fail@plt+0xe8>
   111dc:	mov	r2, r0
   111e0:	ldrb	r3, [r2, #1]!
   111e4:	cmp	r3, #0
   111e8:	beq	11218 <__assert_fail@plt+0x50c>
   111ec:	cmp	r3, #101	; 0x65
   111f0:	moveq	r1, #1
   111f4:	beq	111e0 <__assert_fail@plt+0x4d4>
   111f8:	cmp	r3, #110	; 0x6e
   111fc:	moveq	r9, ip
   11200:	beq	111e0 <__assert_fail@plt+0x4d4>
   11204:	cmp	r3, #69	; 0x45
   11208:	ldrb	r3, [r2, #1]!
   1120c:	moveq	r1, #0
   11210:	cmp	r3, #0
   11214:	bne	111ec <__assert_fail@plt+0x4e0>
   11218:	subs	r6, r6, #1
   1121c:	add	r7, r7, #4
   11220:	beq	11288 <__assert_fail@plt+0x57c>
   11224:	ldr	r0, [r7]
   11228:	ldrb	r3, [r0]
   1122c:	cmp	r3, #45	; 0x2d
   11230:	beq	10de4 <__assert_fail@plt+0xd8>
   11234:	orr	r1, r1, r4
   11238:	tst	r1, #255	; 0xff
   1123c:	beq	11188 <__assert_fail@plt+0x47c>
   11240:	b	10e18 <__assert_fail@plt+0x10c>
   11244:	bl	10cb8 <__overflow@plt>
   11248:	b	10e60 <__assert_fail@plt+0x154>
   1124c:	subs	r6, r6, #1
   11250:	beq	11284 <__assert_fail@plt+0x578>
   11254:	ldr	r0, [fp]
   11258:	ldr	r3, [r0, #20]
   1125c:	ldr	r2, [r0, #24]
   11260:	cmp	r3, r2
   11264:	addcc	r1, r3, #1
   11268:	movcc	r2, #32
   1126c:	strcc	r1, [r0, #20]
   11270:	strbcc	r2, [r3]
   11274:	bcc	10e24 <__assert_fail@plt+0x118>
   11278:	mov	r1, #32
   1127c:	bl	10cb8 <__overflow@plt>
   11280:	b	10e24 <__assert_fail@plt+0x118>
   11284:	ldr	r9, [sp, #20]
   11288:	cmp	r9, #0
   1128c:	beq	11044 <__assert_fail@plt+0x338>
   11290:	ldr	r3, [pc, #224]	; 11378 <__assert_fail@plt+0x66c>
   11294:	ldr	r0, [r3]
   11298:	ldr	r3, [r0, #20]
   1129c:	ldr	r2, [r0, #24]
   112a0:	cmp	r3, r2
   112a4:	addcc	r1, r3, #1
   112a8:	movcc	r2, #10
   112ac:	strcc	r1, [r0, #20]
   112b0:	strbcc	r2, [r3]
   112b4:	bcc	11044 <__assert_fail@plt+0x338>
   112b8:	mov	r1, #10
   112bc:	bl	10cb8 <__overflow@plt>
   112c0:	b	11044 <__assert_fail@plt+0x338>
   112c4:	mov	r0, r3
   112c8:	bl	114b8 <__assert_fail@plt+0x7ac>
   112cc:	ldrb	r2, [sl, #3]
   112d0:	lsl	r3, r2, #1
   112d4:	ldrh	r3, [r1, r3]
   112d8:	tst	r3, #4096	; 0x1000
   112dc:	uxtb	r3, r0
   112e0:	addeq	r9, sl, #3
   112e4:	moveq	r1, r3
   112e8:	beq	10e40 <__assert_fail@plt+0x134>
   112ec:	lsl	r3, r3, #4
   112f0:	mov	r0, r2
   112f4:	uxtb	r2, r3
   112f8:	bl	114b8 <__assert_fail@plt+0x7ac>
   112fc:	add	r9, sl, #4
   11300:	add	r3, r2, r0
   11304:	uxtb	r3, r3
   11308:	mov	r1, r3
   1130c:	b	10e40 <__assert_fail@plt+0x134>
   11310:	sub	r6, r6, #1
   11314:	cmp	r6, #0
   11318:	add	r7, r8, #4
   1131c:	ldrgt	r5, [r8, #4]
   11320:	ble	11290 <__assert_fail@plt+0x584>
   11324:	b	10dc8 <__assert_fail@plt+0xbc>
   11328:	mov	r1, #92	; 0x5c
   1132c:	str	r2, [sp, #16]
   11330:	bl	10cb8 <__overflow@plt>
   11334:	ldr	r2, [sp, #16]
   11338:	mov	r1, r2
   1133c:	mov	r3, r2
   11340:	b	10e40 <__assert_fail@plt+0x134>
   11344:	cmp	r9, #0
   11348:	moveq	r9, #1
   1134c:	bne	1100c <__assert_fail@plt+0x300>
   11350:	b	11188 <__assert_fail@plt+0x47c>
   11354:	bl	11598 <__assert_fail@plt+0x88c>
   11358:	andeq	r7, r1, r4, lsr #21
   1135c:			; <UNDEFINED> instruction: 0x00017ab4
   11360:			; <UNDEFINED> instruction: 0x000179b4
   11364:			; <UNDEFINED> instruction: 0x00017ab8
   11368:	strdeq	r7, [r1], -ip
   1136c:	andeq	r1, r1, r8, lsl r9
   11370:	ldrdeq	r7, [r1], -r0
   11374:	ldrdeq	r7, [r1], -r8
   11378:	andeq	r9, r2, r4, lsr #2
   1137c:	andeq	r9, r2, ip, asr #1
   11380:	andeq	r7, r1, r4, ror #21
   11384:	strdeq	r7, [r1], -r0
   11388:	andeq	r7, r1, ip, lsr r5
   1138c:	strdeq	r7, [r1], -r8
   11390:	mov	fp, #0
   11394:	mov	lr, #0
   11398:	pop	{r1}		; (ldr r1, [sp], #4)
   1139c:	mov	r2, sp
   113a0:	push	{r2}		; (str r2, [sp, #-4]!)
   113a4:	push	{r0}		; (str r0, [sp, #-4]!)
   113a8:	ldr	ip, [pc, #16]	; 113c0 <__assert_fail@plt+0x6b4>
   113ac:	push	{ip}		; (str ip, [sp, #-4]!)
   113b0:	ldr	r0, [pc, #12]	; 113c4 <__assert_fail@plt+0x6b8>
   113b4:	ldr	r3, [pc, #12]	; 113c8 <__assert_fail@plt+0x6bc>
   113b8:	bl	10c10 <__libc_start_main@plt>
   113bc:	bl	10d00 <abort@plt>
   113c0:	ldrdeq	r7, [r1], -r4
   113c4:	andeq	r0, r1, r8, lsl sp
   113c8:	andeq	r7, r1, r4, ror r4
   113cc:	ldr	r3, [pc, #20]	; 113e8 <__assert_fail@plt+0x6dc>
   113d0:	ldr	r2, [pc, #20]	; 113ec <__assert_fail@plt+0x6e0>
   113d4:	add	r3, pc, r3
   113d8:	ldr	r2, [r3, r2]
   113dc:	cmp	r2, #0
   113e0:	bxeq	lr
   113e4:	b	10c28 <__gmon_start__@plt>
   113e8:	andeq	r7, r1, r4, lsr #24
   113ec:	andeq	r0, r0, r0, asr #1
   113f0:	ldr	r3, [pc, #28]	; 11414 <__assert_fail@plt+0x708>
   113f4:	ldr	r0, [pc, #28]	; 11418 <__assert_fail@plt+0x70c>
   113f8:	sub	r3, r3, r0
   113fc:	cmp	r3, #6
   11400:	bxls	lr
   11404:	ldr	r3, [pc, #16]	; 1141c <__assert_fail@plt+0x710>
   11408:	cmp	r3, #0
   1140c:	bxeq	lr
   11410:	bx	r3
   11414:	andeq	r9, r2, r7, lsl r1
   11418:	andeq	r9, r2, r4, lsl r1
   1141c:	andeq	r0, r0, r0
   11420:	ldr	r1, [pc, #36]	; 1144c <__assert_fail@plt+0x740>
   11424:	ldr	r0, [pc, #36]	; 11450 <__assert_fail@plt+0x744>
   11428:	sub	r1, r1, r0
   1142c:	asr	r1, r1, #2
   11430:	add	r1, r1, r1, lsr #31
   11434:	asrs	r1, r1, #1
   11438:	bxeq	lr
   1143c:	ldr	r3, [pc, #16]	; 11454 <__assert_fail@plt+0x748>
   11440:	cmp	r3, #0
   11444:	bxeq	lr
   11448:	bx	r3
   1144c:	andeq	r9, r2, r4, lsl r1
   11450:	andeq	r9, r2, r4, lsl r1
   11454:	andeq	r0, r0, r0
   11458:	push	{r4, lr}
   1145c:	ldr	r4, [pc, #24]	; 1147c <__assert_fail@plt+0x770>
   11460:	ldrb	r3, [r4]
   11464:	cmp	r3, #0
   11468:	popne	{r4, pc}
   1146c:	bl	113f0 <__assert_fail@plt+0x6e4>
   11470:	mov	r3, #1
   11474:	strb	r3, [r4]
   11478:	pop	{r4, pc}
   1147c:	andeq	r9, r2, r8, lsr #2
   11480:	ldr	r0, [pc, #40]	; 114b0 <__assert_fail@plt+0x7a4>
   11484:	ldr	r3, [r0]
   11488:	cmp	r3, #0
   1148c:	bne	11494 <__assert_fail@plt+0x788>
   11490:	b	11420 <__assert_fail@plt+0x714>
   11494:	ldr	r3, [pc, #24]	; 114b4 <__assert_fail@plt+0x7a8>
   11498:	cmp	r3, #0
   1149c:	beq	11490 <__assert_fail@plt+0x784>
   114a0:	push	{r4, lr}
   114a4:	blx	r3
   114a8:	pop	{r4, lr}
   114ac:	b	11420 <__assert_fail@plt+0x714>
   114b0:	andeq	r8, r2, r4, lsl pc
   114b4:	andeq	r0, r0, r0
   114b8:	sub	r3, r0, #65	; 0x41
   114bc:	cmp	r3, #37	; 0x25
   114c0:	ldrls	pc, [pc, r3, lsl #2]
   114c4:	b	11590 <__assert_fail@plt+0x884>
   114c8:	andeq	r1, r1, r0, ror #10
   114cc:	andeq	r1, r1, r8, ror #10
   114d0:	andeq	r1, r1, r0, ror r5
   114d4:	andeq	r1, r1, r8, ror r5
   114d8:	andeq	r1, r1, r0, lsl #11
   114dc:	andeq	r1, r1, r8, lsl #11
   114e0:	muleq	r1, r0, r5
   114e4:	muleq	r1, r0, r5
   114e8:	muleq	r1, r0, r5
   114ec:	muleq	r1, r0, r5
   114f0:	muleq	r1, r0, r5
   114f4:	muleq	r1, r0, r5
   114f8:	muleq	r1, r0, r5
   114fc:	muleq	r1, r0, r5
   11500:	muleq	r1, r0, r5
   11504:	muleq	r1, r0, r5
   11508:	muleq	r1, r0, r5
   1150c:	muleq	r1, r0, r5
   11510:	muleq	r1, r0, r5
   11514:	muleq	r1, r0, r5
   11518:	muleq	r1, r0, r5
   1151c:	muleq	r1, r0, r5
   11520:	muleq	r1, r0, r5
   11524:	muleq	r1, r0, r5
   11528:	muleq	r1, r0, r5
   1152c:	muleq	r1, r0, r5
   11530:	muleq	r1, r0, r5
   11534:	muleq	r1, r0, r5
   11538:	muleq	r1, r0, r5
   1153c:	muleq	r1, r0, r5
   11540:	muleq	r1, r0, r5
   11544:	muleq	r1, r0, r5
   11548:	andeq	r1, r1, r0, ror #10
   1154c:	andeq	r1, r1, r8, ror #10
   11550:	andeq	r1, r1, r0, ror r5
   11554:	andeq	r1, r1, r8, ror r5
   11558:	andeq	r1, r1, r0, lsl #11
   1155c:	andeq	r1, r1, r8, lsl #11
   11560:	mov	r0, #10
   11564:	bx	lr
   11568:	mov	r0, #11
   1156c:	bx	lr
   11570:	mov	r0, #12
   11574:	bx	lr
   11578:	mov	r0, #13
   1157c:	bx	lr
   11580:	mov	r0, #14
   11584:	bx	lr
   11588:	mov	r0, #15
   1158c:	bx	lr
   11590:	sub	r0, r0, #48	; 0x30
   11594:	bx	lr
   11598:	subs	r4, r0, #0
   1159c:	push	{lr}		; (str lr, [sp, #-4]!)
   115a0:	sub	sp, sp, #60	; 0x3c
   115a4:	beq	115bc <__assert_fail@plt+0x8b0>
   115a8:	ldr	r3, [pc, #736]	; 11890 <__assert_fail@plt+0xb84>
   115ac:	mov	r2, #40	; 0x28
   115b0:	ldr	r1, [pc, #732]	; 11894 <__assert_fail@plt+0xb88>
   115b4:	ldr	r0, [pc, #732]	; 11898 <__assert_fail@plt+0xb8c>
   115b8:	bl	10d0c <__assert_fail@plt>
   115bc:	mov	r2, #5
   115c0:	ldr	r1, [pc, #724]	; 1189c <__assert_fail@plt+0xb90>
   115c4:	bl	10b80 <dcgettext@plt>
   115c8:	ldr	r3, [pc, #720]	; 118a0 <__assert_fail@plt+0xb94>
   115cc:	ldr	r6, [pc, #720]	; 118a4 <__assert_fail@plt+0xb98>
   115d0:	ldr	r3, [r3]
   115d4:	mov	r2, r3
   115d8:	mov	r1, r0
   115dc:	mov	r0, #1
   115e0:	bl	10c7c <__printf_chk@plt>
   115e4:	mov	r2, #5
   115e8:	ldr	r1, [pc, #696]	; 118a8 <__assert_fail@plt+0xb9c>
   115ec:	mov	r0, r4
   115f0:	bl	10b80 <dcgettext@plt>
   115f4:	ldr	r1, [r6]
   115f8:	bl	10b08 <fputs_unlocked@plt>
   115fc:	mov	r2, #5
   11600:	ldr	r1, [pc, #676]	; 118ac <__assert_fail@plt+0xba0>
   11604:	mov	r0, r4
   11608:	bl	10b80 <dcgettext@plt>
   1160c:	ldr	r1, [r6]
   11610:	bl	10b08 <fputs_unlocked@plt>
   11614:	mov	r2, #5
   11618:	ldr	r1, [pc, #656]	; 118b0 <__assert_fail@plt+0xba4>
   1161c:	mov	r0, r4
   11620:	bl	10b80 <dcgettext@plt>
   11624:	ldr	r1, [r6]
   11628:	bl	10b08 <fputs_unlocked@plt>
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #636]	; 118b4 <__assert_fail@plt+0xba8>
   11634:	mov	r0, r4
   11638:	bl	10b80 <dcgettext@plt>
   1163c:	ldr	r1, [r6]
   11640:	bl	10b08 <fputs_unlocked@plt>
   11644:	mov	r2, #5
   11648:	ldr	r1, [pc, #616]	; 118b8 <__assert_fail@plt+0xbac>
   1164c:	mov	r0, r4
   11650:	bl	10b80 <dcgettext@plt>
   11654:	ldr	r1, [r6]
   11658:	bl	10b08 <fputs_unlocked@plt>
   1165c:	mov	r2, #5
   11660:	ldr	r1, [pc, #596]	; 118bc <__assert_fail@plt+0xbb0>
   11664:	mov	r0, r4
   11668:	bl	10b80 <dcgettext@plt>
   1166c:	ldr	r1, [r6]
   11670:	bl	10b08 <fputs_unlocked@plt>
   11674:	mov	r2, #5
   11678:	ldr	r1, [pc, #576]	; 118c0 <__assert_fail@plt+0xbb4>
   1167c:	mov	r0, r4
   11680:	bl	10b80 <dcgettext@plt>
   11684:	ldr	r1, [r6]
   11688:	bl	10b08 <fputs_unlocked@plt>
   1168c:	mov	r2, #5
   11690:	ldr	r1, [pc, #556]	; 118c4 <__assert_fail@plt+0xbb8>
   11694:	mov	r0, r4
   11698:	bl	10b80 <dcgettext@plt>
   1169c:	ldr	r2, [pc, #548]	; 118c8 <__assert_fail@plt+0xbbc>
   116a0:	mov	r1, r0
   116a4:	mov	r0, #1
   116a8:	bl	10c7c <__printf_chk@plt>
   116ac:	mov	r0, r4
   116b0:	ldr	r4, [pc, #532]	; 118cc <__assert_fail@plt+0xbc0>
   116b4:	mov	r2, #5
   116b8:	ldr	r1, [pc, #528]	; 118d0 <__assert_fail@plt+0xbc4>
   116bc:	bl	10b80 <dcgettext@plt>
   116c0:	ldr	r1, [r6]
   116c4:	bl	10b08 <fputs_unlocked@plt>
   116c8:	ldm	r4!, {r0, r1, r2, r3}
   116cc:	mov	lr, sp
   116d0:	stmia	lr!, {r0, r1, r2, r3}
   116d4:	ldm	r4!, {r0, r1, r2, r3}
   116d8:	ldr	ip, [sp]
   116dc:	stmia	lr!, {r0, r1, r2, r3}
   116e0:	cmp	ip, #0
   116e4:	ldm	r4!, {r0, r1, r2, r3}
   116e8:	stmia	lr!, {r0, r1, r2, r3}
   116ec:	ldm	r4, {r0, r1}
   116f0:	moveq	r4, sp
   116f4:	stm	lr, {r0, r1}
   116f8:	beq	11728 <__assert_fail@plt+0xa1c>
   116fc:	ldr	r5, [pc, #452]	; 118c8 <__assert_fail@plt+0xbbc>
   11700:	mov	r4, sp
   11704:	b	11714 <__assert_fail@plt+0xa08>
   11708:	ldr	ip, [r4, #8]!
   1170c:	cmp	ip, #0
   11710:	beq	11728 <__assert_fail@plt+0xa1c>
   11714:	mov	r1, ip
   11718:	mov	r0, r5
   1171c:	bl	10b20 <strcmp@plt>
   11720:	cmp	r0, #0
   11724:	bne	11708 <__assert_fail@plt+0x9fc>
   11728:	ldr	r4, [r4, #4]
   1172c:	mov	r2, #5
   11730:	cmp	r4, #0
   11734:	ldr	r1, [pc, #408]	; 118d4 <__assert_fail@plt+0xbc8>
   11738:	beq	117e4 <__assert_fail@plt+0xad8>
   1173c:	mov	r0, #0
   11740:	bl	10b80 <dcgettext@plt>
   11744:	ldr	r3, [pc, #396]	; 118d8 <__assert_fail@plt+0xbcc>
   11748:	ldr	r2, [pc, #396]	; 118dc <__assert_fail@plt+0xbd0>
   1174c:	mov	r1, r0
   11750:	mov	r0, #1
   11754:	bl	10c7c <__printf_chk@plt>
   11758:	mov	r1, #0
   1175c:	mov	r0, #5
   11760:	bl	10cc4 <setlocale@plt>
   11764:	cmp	r0, #0
   11768:	ldreq	r5, [pc, #344]	; 118c8 <__assert_fail@plt+0xbbc>
   1176c:	beq	11788 <__assert_fail@plt+0xa7c>
   11770:	mov	r2, #3
   11774:	ldr	r1, [pc, #356]	; 118e0 <__assert_fail@plt+0xbd4>
   11778:	bl	10cf4 <strncmp@plt>
   1177c:	ldr	r5, [pc, #324]	; 118c8 <__assert_fail@plt+0xbbc>
   11780:	cmp	r0, #0
   11784:	bne	11874 <__assert_fail@plt+0xb68>
   11788:	mov	r2, #5
   1178c:	ldr	r1, [pc, #336]	; 118e4 <__assert_fail@plt+0xbd8>
   11790:	mov	r0, #0
   11794:	bl	10b80 <dcgettext@plt>
   11798:	ldr	r3, [pc, #296]	; 118c8 <__assert_fail@plt+0xbbc>
   1179c:	ldr	r2, [pc, #308]	; 118d8 <__assert_fail@plt+0xbcc>
   117a0:	mov	r1, r0
   117a4:	mov	r0, #1
   117a8:	bl	10c7c <__printf_chk@plt>
   117ac:	mov	r2, #5
   117b0:	ldr	r1, [pc, #304]	; 118e8 <__assert_fail@plt+0xbdc>
   117b4:	mov	r0, #0
   117b8:	bl	10b80 <dcgettext@plt>
   117bc:	ldr	r2, [pc, #296]	; 118ec <__assert_fail@plt+0xbe0>
   117c0:	cmp	r4, r5
   117c4:	ldr	r3, [pc, #292]	; 118f0 <__assert_fail@plt+0xbe4>
   117c8:	movne	r3, r2
   117cc:	mov	r1, r0
   117d0:	mov	r2, r4
   117d4:	mov	r0, #1
   117d8:	bl	10c7c <__printf_chk@plt>
   117dc:	mov	r0, #0
   117e0:	bl	10c40 <exit@plt>
   117e4:	mov	r0, r4
   117e8:	bl	10b80 <dcgettext@plt>
   117ec:	ldr	r3, [pc, #228]	; 118d8 <__assert_fail@plt+0xbcc>
   117f0:	ldr	r2, [pc, #228]	; 118dc <__assert_fail@plt+0xbd0>
   117f4:	mov	r1, r0
   117f8:	mov	r0, #1
   117fc:	bl	10c7c <__printf_chk@plt>
   11800:	mov	r1, r4
   11804:	mov	r0, #5
   11808:	bl	10cc4 <setlocale@plt>
   1180c:	cmp	r0, #0
   11810:	beq	11828 <__assert_fail@plt+0xb1c>
   11814:	mov	r2, #3
   11818:	ldr	r1, [pc, #192]	; 118e0 <__assert_fail@plt+0xbd4>
   1181c:	bl	10cf4 <strncmp@plt>
   11820:	cmp	r0, #0
   11824:	bne	1186c <__assert_fail@plt+0xb60>
   11828:	mov	r2, #5
   1182c:	ldr	r1, [pc, #176]	; 118e4 <__assert_fail@plt+0xbd8>
   11830:	mov	r0, #0
   11834:	bl	10b80 <dcgettext@plt>
   11838:	ldr	r3, [pc, #136]	; 118c8 <__assert_fail@plt+0xbbc>
   1183c:	ldr	r2, [pc, #148]	; 118d8 <__assert_fail@plt+0xbcc>
   11840:	mov	r4, r3
   11844:	mov	r1, r0
   11848:	mov	r0, #1
   1184c:	bl	10c7c <__printf_chk@plt>
   11850:	ldr	r1, [pc, #144]	; 118e8 <__assert_fail@plt+0xbdc>
   11854:	mov	r2, #5
   11858:	mov	r0, #0
   1185c:	bl	10b80 <dcgettext@plt>
   11860:	ldr	r3, [pc, #136]	; 118f0 <__assert_fail@plt+0xbe4>
   11864:	mov	r1, r0
   11868:	b	117d0 <__assert_fail@plt+0xac4>
   1186c:	ldr	r5, [pc, #84]	; 118c8 <__assert_fail@plt+0xbbc>
   11870:	mov	r4, r5
   11874:	mov	r2, #5
   11878:	ldr	r1, [pc, #116]	; 118f4 <__assert_fail@plt+0xbe8>
   1187c:	mov	r0, #0
   11880:	bl	10b80 <dcgettext@plt>
   11884:	ldr	r1, [r6]
   11888:	bl	10b08 <fputs_unlocked@plt>
   1188c:	b	11788 <__assert_fail@plt+0xa7c>
   11890:	strdeq	r7, [r1], -ip
   11894:	andeq	r7, r1, r4, asr #10
   11898:	andeq	r7, r1, r0, asr r5
   1189c:	andeq	r7, r1, r8, ror #10
   118a0:	andeq	r9, r2, r4, lsr r1
   118a4:	andeq	r9, r2, r4, lsr #2
   118a8:	andeq	r7, r1, r8, lsr #11
   118ac:	andeq	r7, r1, r8, lsl #12
   118b0:	andeq	r7, r1, ip, lsl #13
   118b4:			; <UNDEFINED> instruction: 0x000176bc
   118b8:	strdeq	r7, [r1], -r4
   118bc:	andeq	r7, r1, r4, lsr r7
   118c0:	andeq	r7, r1, ip, lsl r8
   118c4:	andeq	r7, r1, ip, lsl #17
   118c8:	andeq	r7, r1, ip, lsr r5
   118cc:	andeq	r7, r1, r4, lsl #10
   118d0:	andeq	r7, r1, ip, asr #18
   118d4:			; <UNDEFINED> instruction: 0x000179b8
   118d8:	ldrdeq	r7, [r1], -r0
   118dc:	strdeq	r7, [r1], -r8
   118e0:	andeq	r7, r1, r8, lsl #20
   118e4:	andeq	r7, r1, r4, asr sl
   118e8:	andeq	r7, r1, r0, ror sl
   118ec:			; <UNDEFINED> instruction: 0x000179b4
   118f0:	andeq	r7, r1, r4, lsl #22
   118f4:	andeq	r7, r1, ip, lsl #20
   118f8:	ldr	r3, [pc, #4]	; 11904 <__assert_fail@plt+0xbf8>
   118fc:	str	r0, [r3]
   11900:	bx	lr
   11904:	andeq	r9, r2, ip, lsr #2
   11908:	ldr	r3, [pc, #4]	; 11914 <__assert_fail@plt+0xc08>
   1190c:	strb	r0, [r3, #4]
   11910:	bx	lr
   11914:	andeq	r9, r2, ip, lsr #2
   11918:	ldr	r3, [pc, #192]	; 119e0 <__assert_fail@plt+0xcd4>
   1191c:	push	{r4, r5, r6, lr}
   11920:	sub	sp, sp, #8
   11924:	ldr	r0, [r3]
   11928:	bl	16bdc <__assert_fail@plt+0x5ed0>
   1192c:	cmp	r0, #0
   11930:	beq	11954 <__assert_fail@plt+0xc48>
   11934:	ldr	r4, [pc, #168]	; 119e4 <__assert_fail@plt+0xcd8>
   11938:	ldrb	r3, [r4, #4]
   1193c:	cmp	r3, #0
   11940:	beq	11970 <__assert_fail@plt+0xc64>
   11944:	bl	10c58 <__errno_location@plt>
   11948:	ldr	r3, [r0]
   1194c:	cmp	r3, #32
   11950:	bne	11970 <__assert_fail@plt+0xc64>
   11954:	ldr	r3, [pc, #140]	; 119e8 <__assert_fail@plt+0xcdc>
   11958:	ldr	r0, [r3]
   1195c:	bl	16bdc <__assert_fail@plt+0x5ed0>
   11960:	cmp	r0, #0
   11964:	bne	119b8 <__assert_fail@plt+0xcac>
   11968:	add	sp, sp, #8
   1196c:	pop	{r4, r5, r6, pc}
   11970:	mov	r2, #5
   11974:	ldr	r1, [pc, #112]	; 119ec <__assert_fail@plt+0xce0>
   11978:	mov	r0, #0
   1197c:	bl	10b80 <dcgettext@plt>
   11980:	ldr	r4, [r4]
   11984:	cmp	r4, #0
   11988:	mov	r5, r0
   1198c:	beq	119c4 <__assert_fail@plt+0xcb8>
   11990:	bl	10c58 <__errno_location@plt>
   11994:	ldr	r6, [r0]
   11998:	mov	r0, r4
   1199c:	bl	14668 <__assert_fail@plt+0x395c>
   119a0:	mov	r1, r6
   119a4:	str	r5, [sp]
   119a8:	ldr	r2, [pc, #64]	; 119f0 <__assert_fail@plt+0xce4>
   119ac:	mov	r3, r0
   119b0:	mov	r0, #0
   119b4:	bl	10bec <error@plt>
   119b8:	ldr	r3, [pc, #52]	; 119f4 <__assert_fail@plt+0xce8>
   119bc:	ldr	r0, [r3]
   119c0:	bl	10b44 <_exit@plt>
   119c4:	bl	10c58 <__errno_location@plt>
   119c8:	mov	r3, r5
   119cc:	ldr	r2, [pc, #36]	; 119f8 <__assert_fail@plt+0xcec>
   119d0:	ldr	r1, [r0]
   119d4:	mov	r0, r4
   119d8:	bl	10bec <error@plt>
   119dc:	b	119b8 <__assert_fail@plt+0xcac>
   119e0:	andeq	r9, r2, r4, lsr #2
   119e4:	andeq	r9, r2, ip, lsr #2
   119e8:	andeq	r9, r2, r0, lsr #2
   119ec:	andeq	r7, r1, r8, ror fp
   119f0:	andeq	r7, r1, r4, lsl #23
   119f4:	ldrdeq	r9, [r2], -r0
   119f8:	andeq	r7, r1, r8, lsl #23
   119fc:	push	{r4, r5, r6, lr}
   11a00:	subs	r4, r0, #0
   11a04:	beq	11a78 <__assert_fail@plt+0xd6c>
   11a08:	mov	r1, #47	; 0x2f
   11a0c:	bl	10cd0 <strrchr@plt>
   11a10:	subs	r5, r0, #0
   11a14:	beq	11a64 <__assert_fail@plt+0xd58>
   11a18:	add	r6, r5, #1
   11a1c:	sub	r3, r6, r4
   11a20:	cmp	r3, #6
   11a24:	ble	11a64 <__assert_fail@plt+0xd58>
   11a28:	mov	r2, #7
   11a2c:	ldr	r1, [pc, #96]	; 11a94 <__assert_fail@plt+0xd88>
   11a30:	sub	r0, r5, #6
   11a34:	bl	10cf4 <strncmp@plt>
   11a38:	cmp	r0, #0
   11a3c:	bne	11a64 <__assert_fail@plt+0xd58>
   11a40:	mov	r2, #3
   11a44:	ldr	r1, [pc, #76]	; 11a98 <__assert_fail@plt+0xd8c>
   11a48:	mov	r0, r6
   11a4c:	bl	10cf4 <strncmp@plt>
   11a50:	cmp	r0, #0
   11a54:	movne	r4, r6
   11a58:	ldreq	r3, [pc, #60]	; 11a9c <__assert_fail@plt+0xd90>
   11a5c:	addeq	r4, r5, #4
   11a60:	streq	r4, [r3]
   11a64:	ldr	r2, [pc, #52]	; 11aa0 <__assert_fail@plt+0xd94>
   11a68:	ldr	r3, [pc, #52]	; 11aa4 <__assert_fail@plt+0xd98>
   11a6c:	str	r4, [r2]
   11a70:	str	r4, [r3]
   11a74:	pop	{r4, r5, r6, pc}
   11a78:	ldr	r3, [pc, #40]	; 11aa8 <__assert_fail@plt+0xd9c>
   11a7c:	mov	r2, #55	; 0x37
   11a80:	mov	r1, #1
   11a84:	ldr	r3, [r3]
   11a88:	ldr	r0, [pc, #28]	; 11aac <__assert_fail@plt+0xda0>
   11a8c:	bl	10bb0 <fwrite@plt>
   11a90:	bl	10d00 <abort@plt>
   11a94:	andeq	r7, r1, r4, asr #23
   11a98:	andeq	r7, r1, ip, asr #23
   11a9c:	andeq	r9, r2, r8, lsl r1
   11aa0:	andeq	r9, r2, r4, lsr r1
   11aa4:	andeq	r9, r2, ip, lsl r1
   11aa8:	andeq	r9, r2, r0, lsr #2
   11aac:	andeq	r7, r1, ip, lsl #23
   11ab0:	push	{r4, r5, r6, lr}
   11ab4:	mov	r4, r0
   11ab8:	mov	r5, r1
   11abc:	bl	16e50 <__assert_fail@plt+0x6144>
   11ac0:	ldrb	r3, [r0]
   11ac4:	bic	r3, r3, #32
   11ac8:	cmp	r3, #85	; 0x55
   11acc:	bne	11b2c <__assert_fail@plt+0xe20>
   11ad0:	ldrb	r3, [r0, #1]
   11ad4:	bic	r3, r3, #32
   11ad8:	cmp	r3, #84	; 0x54
   11adc:	bne	11b68 <__assert_fail@plt+0xe5c>
   11ae0:	ldrb	r3, [r0, #2]
   11ae4:	bic	r3, r3, #32
   11ae8:	cmp	r3, #70	; 0x46
   11aec:	bne	11b68 <__assert_fail@plt+0xe5c>
   11af0:	ldrb	r3, [r0, #3]
   11af4:	cmp	r3, #45	; 0x2d
   11af8:	bne	11b68 <__assert_fail@plt+0xe5c>
   11afc:	ldrb	r3, [r0, #4]
   11b00:	cmp	r3, #56	; 0x38
   11b04:	bne	11b68 <__assert_fail@plt+0xe5c>
   11b08:	ldrb	r3, [r0, #5]
   11b0c:	cmp	r3, #0
   11b10:	bne	11b68 <__assert_fail@plt+0xe5c>
   11b14:	ldrb	r2, [r4]
   11b18:	ldr	r3, [pc, #152]	; 11bb8 <__assert_fail@plt+0xeac>
   11b1c:	ldr	r0, [pc, #152]	; 11bbc <__assert_fail@plt+0xeb0>
   11b20:	cmp	r2, #96	; 0x60
   11b24:	movne	r0, r3
   11b28:	pop	{r4, r5, r6, pc}
   11b2c:	cmp	r3, #71	; 0x47
   11b30:	bne	11b68 <__assert_fail@plt+0xe5c>
   11b34:	ldrb	r3, [r0, #1]
   11b38:	bic	r3, r3, #32
   11b3c:	cmp	r3, #66	; 0x42
   11b40:	bne	11b68 <__assert_fail@plt+0xe5c>
   11b44:	ldrb	r3, [r0, #2]
   11b48:	cmp	r3, #49	; 0x31
   11b4c:	bne	11b68 <__assert_fail@plt+0xe5c>
   11b50:	ldrb	r3, [r0, #3]
   11b54:	cmp	r3, #56	; 0x38
   11b58:	bne	11b68 <__assert_fail@plt+0xe5c>
   11b5c:	ldrb	r3, [r0, #4]
   11b60:	cmp	r3, #48	; 0x30
   11b64:	beq	11b7c <__assert_fail@plt+0xe70>
   11b68:	ldr	r3, [pc, #80]	; 11bc0 <__assert_fail@plt+0xeb4>
   11b6c:	cmp	r5, #9
   11b70:	ldr	r0, [pc, #76]	; 11bc4 <__assert_fail@plt+0xeb8>
   11b74:	movne	r0, r3
   11b78:	pop	{r4, r5, r6, pc}
   11b7c:	ldrb	r3, [r0, #5]
   11b80:	cmp	r3, #51	; 0x33
   11b84:	bne	11b68 <__assert_fail@plt+0xe5c>
   11b88:	ldrb	r3, [r0, #6]
   11b8c:	cmp	r3, #48	; 0x30
   11b90:	bne	11b68 <__assert_fail@plt+0xe5c>
   11b94:	ldrb	r3, [r0, #7]
   11b98:	cmp	r3, #0
   11b9c:	bne	11b68 <__assert_fail@plt+0xe5c>
   11ba0:	ldrb	r2, [r4]
   11ba4:	ldr	r3, [pc, #28]	; 11bc8 <__assert_fail@plt+0xebc>
   11ba8:	ldr	r0, [pc, #28]	; 11bcc <__assert_fail@plt+0xec0>
   11bac:	cmp	r2, #96	; 0x60
   11bb0:	movne	r0, r3
   11bb4:	pop	{r4, r5, r6, pc}
   11bb8:	andeq	r7, r1, r8, lsr #24
   11bbc:	andeq	r7, r1, r4, lsr #24
   11bc0:	andeq	r7, r1, r8, lsr ip
   11bc4:	andeq	r7, r1, r4, lsr ip
   11bc8:	andeq	r7, r1, r0, lsr ip
   11bcc:	andeq	r7, r1, ip, lsr #24
   11bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bd4:	sub	sp, sp, #140	; 0x8c
   11bd8:	mov	r9, r1
   11bdc:	str	r3, [sp, #24]
   11be0:	mov	r3, #1
   11be4:	mov	sl, r0
   11be8:	str	r2, [sp, #44]	; 0x2c
   11bec:	str	r3, [sp, #28]
   11bf0:	bl	10bc8 <__ctype_get_mb_cur_max@plt>
   11bf4:	ldr	r3, [sp, #180]	; 0xb4
   11bf8:	mov	fp, r9
   11bfc:	mov	r9, sl
   11c00:	lsr	r3, r3, #1
   11c04:	and	r3, r3, #1
   11c08:	str	r3, [sp, #40]	; 0x28
   11c0c:	ldr	r3, [sp, #180]	; 0xb4
   11c10:	mov	r2, #0
   11c14:	and	r3, r3, #4
   11c18:	str	r3, [sp, #100]	; 0x64
   11c1c:	ldr	r3, [sp, #180]	; 0xb4
   11c20:	str	r2, [sp, #76]	; 0x4c
   11c24:	and	r3, r3, #1
   11c28:	str	r3, [sp, #96]	; 0x60
   11c2c:	str	r2, [sp, #36]	; 0x24
   11c30:	str	r2, [sp, #56]	; 0x38
   11c34:	str	r2, [sp, #68]	; 0x44
   11c38:	str	r2, [sp, #72]	; 0x48
   11c3c:	str	r2, [sp, #84]	; 0x54
   11c40:	str	r0, [sp, #80]	; 0x50
   11c44:	ldr	r3, [sp, #176]	; 0xb0
   11c48:	cmp	r3, #10
   11c4c:	ldrls	pc, [pc, r3, lsl #2]
   11c50:	b	12e28 <__assert_fail@plt+0x211c>
   11c54:	andeq	r1, r1, r0, lsl #25
   11c58:	andeq	r1, r1, r0, lsr #31
   11c5c:	strdeq	r2, [r1], -r8
   11c60:	ldrdeq	r1, [r1], -r4
   11c64:	andeq	r2, r1, ip, asr #2
   11c68:	andeq	r2, r1, ip, lsr #2
   11c6c:	strdeq	r1, [r1], -r4
   11c70:	andeq	r2, r1, r8, lsl r0
   11c74:	andeq	r2, r1, r0, asr #32
   11c78:	andeq	r2, r1, r0, asr #32
   11c7c:	andeq	r2, r1, r0, asr #32
   11c80:	mov	r3, #0
   11c84:	ldr	r1, [sp, #56]	; 0x38
   11c88:	ldr	r2, [sp, #176]	; 0xb0
   11c8c:	ldr	lr, [sp, #176]	; 0xb0
   11c90:	mov	r8, r3
   11c94:	mov	ip, r3
   11c98:	str	r3, [sp, #40]	; 0x28
   11c9c:	mov	r3, r1
   11ca0:	cmp	r2, #2
   11ca4:	moveq	r3, #0
   11ca8:	andne	r3, r3, #1
   11cac:	mov	r0, r3
   11cb0:	str	r3, [sp, #92]	; 0x5c
   11cb4:	ldr	r3, [sp, #68]	; 0x44
   11cb8:	sub	lr, lr, #2
   11cbc:	adds	r2, r3, #0
   11cc0:	movne	r2, #1
   11cc4:	and	r3, r1, ip
   11cc8:	and	r3, r2, r3
   11ccc:	clz	lr, lr
   11cd0:	str	r3, [sp, #88]	; 0x58
   11cd4:	lsr	lr, lr, #5
   11cd8:	mov	r3, ip
   11cdc:	and	r3, r3, lr
   11ce0:	mov	sl, #0
   11ce4:	and	r0, r2, r0
   11ce8:	str	r3, [sp, #64]	; 0x40
   11cec:	eor	r3, r1, #1
   11cf0:	str	lr, [sp, #52]	; 0x34
   11cf4:	str	r0, [sp, #48]	; 0x30
   11cf8:	str	r3, [sp, #60]	; 0x3c
   11cfc:	ldr	r3, [sp, #24]
   11d00:	cmn	r3, #1
   11d04:	beq	12234 <__assert_fail@plt+0x1528>
   11d08:	subs	r7, r3, sl
   11d0c:	movne	r7, #1
   11d10:	cmp	r7, #0
   11d14:	beq	1224c <__assert_fail@plt+0x1540>
   11d18:	ldr	r3, [sp, #48]	; 0x30
   11d1c:	cmp	r3, #0
   11d20:	beq	125b8 <__assert_fail@plt+0x18ac>
   11d24:	ldr	r2, [sp, #68]	; 0x44
   11d28:	ldr	r1, [sp, #24]
   11d2c:	cmp	r2, #1
   11d30:	mov	r3, r2
   11d34:	movls	r3, #0
   11d38:	movhi	r3, #1
   11d3c:	cmn	r1, #1
   11d40:	movne	r3, #0
   11d44:	cmp	r3, #0
   11d48:	add	r4, sl, r2
   11d4c:	beq	11d5c <__assert_fail@plt+0x1050>
   11d50:	ldr	r0, [sp, #44]	; 0x2c
   11d54:	bl	10c4c <strlen@plt>
   11d58:	str	r0, [sp, #24]
   11d5c:	ldr	r3, [sp, #24]
   11d60:	cmp	r3, r4
   11d64:	ldr	r3, [sp, #44]	; 0x2c
   11d68:	add	r5, r3, sl
   11d6c:	bcc	125c0 <__assert_fail@plt+0x18b4>
   11d70:	mov	r0, r5
   11d74:	ldr	r2, [sp, #68]	; 0x44
   11d78:	ldr	r1, [sp, #72]	; 0x48
   11d7c:	bl	10b68 <memcmp@plt>
   11d80:	cmp	r0, #0
   11d84:	bne	125c0 <__assert_fail@plt+0x18b4>
   11d88:	ldr	r3, [sp, #40]	; 0x28
   11d8c:	cmp	r3, #0
   11d90:	bne	12f7c <__assert_fail@plt+0x2270>
   11d94:	ldrb	r4, [r5]
   11d98:	cmp	r4, #126	; 0x7e
   11d9c:	ldrls	pc, [pc, r4, lsl #2]
   11da0:	b	12eb8 <__assert_fail@plt+0x21ac>
   11da4:	andeq	r2, r1, r8, ror r4
   11da8:			; <UNDEFINED> instruction: 0x00012eb8
   11dac:			; <UNDEFINED> instruction: 0x00012eb8
   11db0:			; <UNDEFINED> instruction: 0x00012eb8
   11db4:			; <UNDEFINED> instruction: 0x00012eb8
   11db8:			; <UNDEFINED> instruction: 0x00012eb8
   11dbc:			; <UNDEFINED> instruction: 0x00012eb8
   11dc0:	andeq	r2, r1, r4, ror #8
   11dc4:	andeq	r2, r1, r0, asr r4
   11dc8:	andeq	r2, r1, ip, lsr #8
   11dcc:	andeq	r2, r1, ip, lsl #8
   11dd0:	andeq	r2, r1, ip, lsr r4
   11dd4:	andeq	r2, r1, r4, ror r3
   11dd8:	andeq	r2, r1, r8, lsr #11
   11ddc:			; <UNDEFINED> instruction: 0x00012eb8
   11de0:			; <UNDEFINED> instruction: 0x00012eb8
   11de4:			; <UNDEFINED> instruction: 0x00012eb8
   11de8:			; <UNDEFINED> instruction: 0x00012eb8
   11dec:			; <UNDEFINED> instruction: 0x00012eb8
   11df0:			; <UNDEFINED> instruction: 0x00012eb8
   11df4:			; <UNDEFINED> instruction: 0x00012eb8
   11df8:			; <UNDEFINED> instruction: 0x00012eb8
   11dfc:			; <UNDEFINED> instruction: 0x00012eb8
   11e00:			; <UNDEFINED> instruction: 0x00012eb8
   11e04:			; <UNDEFINED> instruction: 0x00012eb8
   11e08:			; <UNDEFINED> instruction: 0x00012eb8
   11e0c:			; <UNDEFINED> instruction: 0x00012eb8
   11e10:			; <UNDEFINED> instruction: 0x00012eb8
   11e14:			; <UNDEFINED> instruction: 0x00012eb8
   11e18:			; <UNDEFINED> instruction: 0x00012eb8
   11e1c:			; <UNDEFINED> instruction: 0x00012eb8
   11e20:			; <UNDEFINED> instruction: 0x00012eb8
   11e24:	muleq	r1, r8, r5
   11e28:	andeq	r2, r1, r8, ror r5
   11e2c:	andeq	r2, r1, r8, ror r5
   11e30:	andeq	r2, r1, r8, asr r5
   11e34:	andeq	r2, r1, r8, ror r5
   11e38:	andeq	r2, r1, r4, ror #6
   11e3c:	andeq	r2, r1, r8, ror r5
   11e40:	andeq	r2, r1, r0, asr #6
   11e44:	andeq	r2, r1, r8, ror r5
   11e48:	andeq	r2, r1, r8, ror r5
   11e4c:	andeq	r2, r1, r8, ror r5
   11e50:	andeq	r2, r1, r4, ror #6
   11e54:	andeq	r2, r1, r4, ror #6
   11e58:	andeq	r2, r1, r4, ror #6
   11e5c:	andeq	r2, r1, r4, ror #6
   11e60:	andeq	r2, r1, r4, ror #6
   11e64:	andeq	r2, r1, r4, ror #6
   11e68:	andeq	r2, r1, r4, ror #6
   11e6c:	andeq	r2, r1, r4, ror #6
   11e70:	andeq	r2, r1, r4, ror #6
   11e74:	andeq	r2, r1, r4, ror #6
   11e78:	andeq	r2, r1, r4, ror #6
   11e7c:	andeq	r2, r1, r4, ror #6
   11e80:	andeq	r2, r1, r4, ror #6
   11e84:	andeq	r2, r1, r4, ror #6
   11e88:	andeq	r2, r1, r4, ror #6
   11e8c:	andeq	r2, r1, r4, ror #6
   11e90:	andeq	r2, r1, r8, ror r5
   11e94:	andeq	r2, r1, r8, ror r5
   11e98:	andeq	r2, r1, r8, ror r5
   11e9c:	andeq	r2, r1, r8, ror r5
   11ea0:	strdeq	r2, [r1], -r0
   11ea4:			; <UNDEFINED> instruction: 0x00012eb8
   11ea8:	andeq	r2, r1, r4, ror #6
   11eac:	andeq	r2, r1, r4, ror #6
   11eb0:	andeq	r2, r1, r4, ror #6
   11eb4:	andeq	r2, r1, r4, ror #6
   11eb8:	andeq	r2, r1, r4, ror #6
   11ebc:	andeq	r2, r1, r4, ror #6
   11ec0:	andeq	r2, r1, r4, ror #6
   11ec4:	andeq	r2, r1, r4, ror #6
   11ec8:	andeq	r2, r1, r4, ror #6
   11ecc:	andeq	r2, r1, r4, ror #6
   11ed0:	andeq	r2, r1, r4, ror #6
   11ed4:	andeq	r2, r1, r4, ror #6
   11ed8:	andeq	r2, r1, r4, ror #6
   11edc:	andeq	r2, r1, r4, ror #6
   11ee0:	andeq	r2, r1, r4, ror #6
   11ee4:	andeq	r2, r1, r4, ror #6
   11ee8:	andeq	r2, r1, r4, ror #6
   11eec:	andeq	r2, r1, r4, ror #6
   11ef0:	andeq	r2, r1, r4, ror #6
   11ef4:	andeq	r2, r1, r4, ror #6
   11ef8:	andeq	r2, r1, r4, ror #6
   11efc:	andeq	r2, r1, r4, ror #6
   11f00:	andeq	r2, r1, r4, ror #6
   11f04:	andeq	r2, r1, r4, ror #6
   11f08:	andeq	r2, r1, r4, ror #6
   11f0c:	andeq	r2, r1, r4, ror #6
   11f10:	andeq	r2, r1, r8, ror r5
   11f14:			; <UNDEFINED> instruction: 0x000122bc
   11f18:	andeq	r2, r1, r4, ror #6
   11f1c:	andeq	r2, r1, r8, ror r5
   11f20:	andeq	r2, r1, r4, ror #6
   11f24:	andeq	r2, r1, r8, ror r5
   11f28:	andeq	r2, r1, r4, ror #6
   11f2c:	andeq	r2, r1, r4, ror #6
   11f30:	andeq	r2, r1, r4, ror #6
   11f34:	andeq	r2, r1, r4, ror #6
   11f38:	andeq	r2, r1, r4, ror #6
   11f3c:	andeq	r2, r1, r4, ror #6
   11f40:	andeq	r2, r1, r4, ror #6
   11f44:	andeq	r2, r1, r4, ror #6
   11f48:	andeq	r2, r1, r4, ror #6
   11f4c:	andeq	r2, r1, r4, ror #6
   11f50:	andeq	r2, r1, r4, ror #6
   11f54:	andeq	r2, r1, r4, ror #6
   11f58:	andeq	r2, r1, r4, ror #6
   11f5c:	andeq	r2, r1, r4, ror #6
   11f60:	andeq	r2, r1, r4, ror #6
   11f64:	andeq	r2, r1, r4, ror #6
   11f68:	andeq	r2, r1, r4, ror #6
   11f6c:	andeq	r2, r1, r4, ror #6
   11f70:	andeq	r2, r1, r4, ror #6
   11f74:	andeq	r2, r1, r4, ror #6
   11f78:	andeq	r2, r1, r4, ror #6
   11f7c:	andeq	r2, r1, r4, ror #6
   11f80:	andeq	r2, r1, r4, ror #6
   11f84:	andeq	r2, r1, r4, ror #6
   11f88:	andeq	r2, r1, r4, ror #6
   11f8c:	andeq	r2, r1, r4, ror #6
   11f90:	andeq	r2, r1, r4, ror r1
   11f94:	andeq	r2, r1, r8, ror r5
   11f98:	andeq	r2, r1, r4, ror r1
   11f9c:	andeq	r2, r1, r8, asr r5
   11fa0:	mov	r3, #1
   11fa4:	str	r3, [sp, #40]	; 0x28
   11fa8:	str	r3, [sp, #68]	; 0x44
   11fac:	mov	r8, #0
   11fb0:	ldr	r3, [pc, #4056]	; 12f90 <__assert_fail@plt+0x2284>
   11fb4:	str	r3, [sp, #72]	; 0x48
   11fb8:	mov	r3, #2
   11fbc:	str	r3, [sp, #176]	; 0xb0
   11fc0:	ldr	r1, [sp, #56]	; 0x38
   11fc4:	mov	r2, r3
   11fc8:	ldr	ip, [sp, #40]	; 0x28
   11fcc:	mov	lr, r3
   11fd0:	b	11c9c <__assert_fail@plt+0xf90>
   11fd4:	mov	r3, #1
   11fd8:	str	r3, [sp, #56]	; 0x38
   11fdc:	str	r3, [sp, #68]	; 0x44
   11fe0:	str	r3, [sp, #40]	; 0x28
   11fe4:	ldr	r3, [pc, #4004]	; 12f90 <__assert_fail@plt+0x2284>
   11fe8:	mov	r8, #0
   11fec:	str	r3, [sp, #72]	; 0x48
   11ff0:	b	11fb8 <__assert_fail@plt+0x12ac>
   11ff4:	mov	r3, #1
   11ff8:	str	r3, [sp, #56]	; 0x38
   11ffc:	str	r3, [sp, #68]	; 0x44
   12000:	str	r3, [sp, #40]	; 0x28
   12004:	ldr	r3, [pc, #3976]	; 12f94 <__assert_fail@plt+0x2288>
   12008:	mov	r8, #0
   1200c:	str	r3, [sp, #72]	; 0x48
   12010:	mov	r3, #5
   12014:	b	11fbc <__assert_fail@plt+0x12b0>
   12018:	mov	r3, #0
   1201c:	str	r3, [sp, #40]	; 0x28
   12020:	mov	r3, #1
   12024:	str	r3, [sp, #56]	; 0x38
   12028:	mov	r8, #0
   1202c:	mov	r1, r3
   12030:	ldr	r2, [sp, #176]	; 0xb0
   12034:	ldr	ip, [sp, #40]	; 0x28
   12038:	ldr	lr, [sp, #176]	; 0xb0
   1203c:	b	11c9c <__assert_fail@plt+0xf90>
   12040:	ldr	r3, [sp, #176]	; 0xb0
   12044:	cmp	r3, #10
   12048:	beq	1208c <__assert_fail@plt+0x1380>
   1204c:	mov	r2, #5
   12050:	ldr	r1, [pc, #3904]	; 12f98 <__assert_fail@plt+0x228c>
   12054:	mov	r0, #0
   12058:	bl	10b80 <dcgettext@plt>
   1205c:	ldr	r2, [pc, #3892]	; 12f98 <__assert_fail@plt+0x228c>
   12060:	cmp	r0, r2
   12064:	str	r0, [sp, #188]	; 0xbc
   12068:	beq	13124 <__assert_fail@plt+0x2418>
   1206c:	mov	r2, #5
   12070:	ldr	r1, [pc, #3864]	; 12f90 <__assert_fail@plt+0x2284>
   12074:	mov	r0, #0
   12078:	bl	10b80 <dcgettext@plt>
   1207c:	ldr	r2, [pc, #3852]	; 12f90 <__assert_fail@plt+0x2284>
   12080:	cmp	r0, r2
   12084:	str	r0, [sp, #192]	; 0xc0
   12088:	beq	13114 <__assert_fail@plt+0x2408>
   1208c:	ldr	r8, [sp, #40]	; 0x28
   12090:	cmp	r8, #0
   12094:	movne	r8, #0
   12098:	bne	120c8 <__assert_fail@plt+0x13bc>
   1209c:	ldr	r3, [sp, #188]	; 0xbc
   120a0:	ldrb	r3, [r3]
   120a4:	cmp	r3, #0
   120a8:	beq	120c8 <__assert_fail@plt+0x13bc>
   120ac:	ldr	r2, [sp, #188]	; 0xbc
   120b0:	cmp	fp, r8
   120b4:	strbhi	r3, [r9, r8]
   120b8:	ldrb	r3, [r2, #1]!
   120bc:	add	r8, r8, #1
   120c0:	cmp	r3, #0
   120c4:	bne	120b0 <__assert_fail@plt+0x13a4>
   120c8:	ldr	r0, [sp, #192]	; 0xc0
   120cc:	bl	10c4c <strlen@plt>
   120d0:	ldr	r3, [sp, #192]	; 0xc0
   120d4:	ldr	r2, [sp, #176]	; 0xb0
   120d8:	str	r3, [sp, #72]	; 0x48
   120dc:	mov	r3, #1
   120e0:	str	r3, [sp, #56]	; 0x38
   120e4:	mov	r1, r3
   120e8:	ldr	ip, [sp, #40]	; 0x28
   120ec:	ldr	lr, [sp, #176]	; 0xb0
   120f0:	str	r0, [sp, #68]	; 0x44
   120f4:	b	11c9c <__assert_fail@plt+0xf90>
   120f8:	ldr	r3, [sp, #40]	; 0x28
   120fc:	cmp	r3, #0
   12100:	beq	12da8 <__assert_fail@plt+0x209c>
   12104:	mov	r3, #1
   12108:	str	r3, [sp, #68]	; 0x44
   1210c:	ldr	r3, [pc, #3708]	; 12f90 <__assert_fail@plt+0x2284>
   12110:	str	r3, [sp, #72]	; 0x48
   12114:	mov	r8, #0
   12118:	ldr	r1, [sp, #56]	; 0x38
   1211c:	ldr	r2, [sp, #176]	; 0xb0
   12120:	ldr	ip, [sp, #40]	; 0x28
   12124:	ldr	lr, [sp, #176]	; 0xb0
   12128:	b	11c9c <__assert_fail@plt+0xf90>
   1212c:	ldr	r3, [sp, #40]	; 0x28
   12130:	cmp	r3, #0
   12134:	beq	12e2c <__assert_fail@plt+0x2120>
   12138:	str	r3, [sp, #56]	; 0x38
   1213c:	mov	r3, #1
   12140:	str	r3, [sp, #68]	; 0x44
   12144:	ldr	r3, [pc, #3656]	; 12f94 <__assert_fail@plt+0x2288>
   12148:	b	12110 <__assert_fail@plt+0x1404>
   1214c:	ldr	r3, [sp, #40]	; 0x28
   12150:	cmp	r3, #0
   12154:	mov	r3, #1
   12158:	streq	r3, [sp, #56]	; 0x38
   1215c:	beq	12da8 <__assert_fail@plt+0x209c>
   12160:	str	r3, [sp, #68]	; 0x44
   12164:	ldr	r3, [pc, #3620]	; 12f90 <__assert_fail@plt+0x2284>
   12168:	mov	r8, #0
   1216c:	str	r3, [sp, #72]	; 0x48
   12170:	b	11fb8 <__assert_fail@plt+0x12ac>
   12174:	ldr	r3, [sp, #24]
   12178:	ldr	r6, [sp, #48]	; 0x30
   1217c:	cmn	r3, #1
   12180:	beq	127dc <__assert_fail@plt+0x1ad0>
   12184:	subs	r3, r3, #1
   12188:	movne	r3, #1
   1218c:	cmp	r3, #0
   12190:	beq	1255c <__assert_fail@plt+0x1850>
   12194:	ldr	r1, [sp, #52]	; 0x34
   12198:	mov	r7, r3
   1219c:	mov	r3, #0
   121a0:	str	r3, [sp, #32]
   121a4:	ldr	r3, [sp, #60]	; 0x3c
   121a8:	orr	r2, r1, r3
   121ac:	ldr	r3, [sp, #40]	; 0x28
   121b0:	eor	r2, r2, #1
   121b4:	orr	r2, r3, r2
   121b8:	tst	r2, #255	; 0xff
   121bc:	bne	12ae0 <__assert_fail@plt+0x1dd4>
   121c0:	cmp	r6, #0
   121c4:	bne	123a0 <__assert_fail@plt+0x1694>
   121c8:	ldr	r3, [sp, #36]	; 0x24
   121cc:	add	sl, sl, #1
   121d0:	and	r3, r3, r7
   121d4:	uxtb	r6, r3
   121d8:	cmp	r6, #0
   121dc:	beq	12208 <__assert_fail@plt+0x14fc>
   121e0:	cmp	fp, r8
   121e4:	movhi	r3, #39	; 0x27
   121e8:	strbhi	r3, [r9, r8]
   121ec:	add	r3, r8, #1
   121f0:	cmp	fp, r3
   121f4:	movhi	r2, #39	; 0x27
   121f8:	add	r8, r8, #2
   121fc:	strbhi	r2, [r9, r3]
   12200:	mov	r3, #0
   12204:	str	r3, [sp, #36]	; 0x24
   12208:	ldr	r2, [sp, #32]
   1220c:	cmp	r8, fp
   12210:	ldr	r3, [sp, #28]
   12214:	strbcc	r4, [r9, r8]
   12218:	cmp	r2, #0
   1221c:	moveq	r3, #0
   12220:	str	r3, [sp, #28]
   12224:	ldr	r3, [sp, #24]
   12228:	add	r8, r8, #1
   1222c:	cmn	r3, #1
   12230:	bne	11d08 <__assert_fail@plt+0xffc>
   12234:	ldr	r3, [sp, #44]	; 0x2c
   12238:	ldrb	r3, [r3, sl]
   1223c:	adds	r7, r3, #0
   12240:	movne	r7, #1
   12244:	cmp	r7, #0
   12248:	bne	11d18 <__assert_fail@plt+0x100c>
   1224c:	ldr	r3, [sp, #64]	; 0x40
   12250:	cmp	r8, #0
   12254:	movne	r3, #0
   12258:	andeq	r3, r3, #1
   1225c:	cmp	r3, #0
   12260:	str	r3, [sp, #64]	; 0x40
   12264:	bne	12d08 <__assert_fail@plt+0x1ffc>
   12268:	ldr	r3, [sp, #40]	; 0x28
   1226c:	ldr	r2, [sp, #52]	; 0x34
   12270:	eor	r3, r3, #1
   12274:	ands	r2, r2, r3
   12278:	beq	13134 <__assert_fail@plt+0x2428>
   1227c:	ldr	r3, [sp, #76]	; 0x4c
   12280:	cmp	r3, #0
   12284:	beq	13104 <__assert_fail@plt+0x23f8>
   12288:	ldr	r3, [sp, #28]
   1228c:	cmp	r3, #0
   12290:	bne	130c0 <__assert_fail@plt+0x23b4>
   12294:	ldr	r2, [sp, #84]	; 0x54
   12298:	clz	r3, fp
   1229c:	cmp	r2, #0
   122a0:	lsr	r3, r3, #5
   122a4:	moveq	r3, #0
   122a8:	cmp	r3, #0
   122ac:	beq	13060 <__assert_fail@plt+0x2354>
   122b0:	mov	fp, r2
   122b4:	str	r3, [sp, #76]	; 0x4c
   122b8:	b	11c44 <__assert_fail@plt+0xf38>
   122bc:	ldr	r3, [sp, #176]	; 0xb0
   122c0:	ldr	r6, [sp, #48]	; 0x30
   122c4:	cmp	r3, #2
   122c8:	beq	12800 <__assert_fail@plt+0x1af4>
   122cc:	ldr	r3, [sp, #88]	; 0x58
   122d0:	cmp	r3, #0
   122d4:	beq	12d84 <__assert_fail@plt+0x2078>
   122d8:	mov	r3, #0
   122dc:	add	sl, sl, #1
   122e0:	ldr	r6, [sp, #36]	; 0x24
   122e4:	str	r3, [sp, #32]
   122e8:	mov	r4, #92	; 0x5c
   122ec:	b	121d8 <__assert_fail@plt+0x14cc>
   122f0:	ldr	r3, [sp, #176]	; 0xb0
   122f4:	ldr	r6, [sp, #48]	; 0x30
   122f8:	cmp	r3, #2
   122fc:	beq	12830 <__assert_fail@plt+0x1b24>
   12300:	cmp	r3, #5
   12304:	bne	12d94 <__assert_fail@plt+0x2088>
   12308:	ldr	r3, [sp, #100]	; 0x64
   1230c:	cmp	r3, #0
   12310:	beq	12df8 <__assert_fail@plt+0x20ec>
   12314:	ldr	r2, [sp, #24]
   12318:	add	r3, sl, #2
   1231c:	cmp	r2, r3
   12320:	bls	12330 <__assert_fail@plt+0x1624>
   12324:	ldrb	r4, [r5, #1]
   12328:	cmp	r4, #63	; 0x3f
   1232c:	beq	12fa0 <__assert_fail@plt+0x2294>
   12330:	mov	r1, #0
   12334:	str	r1, [sp, #32]
   12338:	mov	r4, #63	; 0x3f
   1233c:	b	121a4 <__assert_fail@plt+0x1498>
   12340:	ldr	r3, [sp, #176]	; 0xb0
   12344:	ldr	r6, [sp, #48]	; 0x30
   12348:	cmp	r3, #2
   1234c:	beq	1285c <__assert_fail@plt+0x1b50>
   12350:	str	r7, [sp, #32]
   12354:	str	r7, [sp, #76]	; 0x4c
   12358:	mov	r1, #0
   1235c:	mov	r4, #39	; 0x27
   12360:	b	121a4 <__assert_fail@plt+0x1498>
   12364:	ldr	r6, [sp, #48]	; 0x30
   12368:	ldr	r1, [sp, #52]	; 0x34
   1236c:	str	r7, [sp, #32]
   12370:	b	121a4 <__assert_fail@plt+0x1498>
   12374:	ldr	r6, [sp, #48]	; 0x30
   12378:	ldr	r1, [sp, #52]	; 0x34
   1237c:	mov	r4, #12
   12380:	mov	r3, #102	; 0x66
   12384:	ldr	r2, [sp, #56]	; 0x38
   12388:	cmp	r2, #0
   1238c:	streq	r2, [sp, #32]
   12390:	beq	121a4 <__assert_fail@plt+0x1498>
   12394:	mov	r4, r3
   12398:	mov	r3, #0
   1239c:	str	r3, [sp, #32]
   123a0:	ldr	r3, [sp, #40]	; 0x28
   123a4:	cmp	r3, #0
   123a8:	bne	12b18 <__assert_fail@plt+0x1e0c>
   123ac:	ldr	r3, [sp, #36]	; 0x24
   123b0:	eor	r3, r3, #1
   123b4:	and	r3, r3, r1
   123b8:	ands	r3, r3, #255	; 0xff
   123bc:	beq	123f4 <__assert_fail@plt+0x16e8>
   123c0:	cmp	fp, r8
   123c4:	movhi	r2, #39	; 0x27
   123c8:	strbhi	r2, [r9, r8]
   123cc:	add	r2, r8, #1
   123d0:	cmp	fp, r2
   123d4:	movhi	r1, #36	; 0x24
   123d8:	strbhi	r1, [r9, r2]
   123dc:	add	r2, r8, #2
   123e0:	cmp	fp, r2
   123e4:	add	r8, r8, #3
   123e8:	movhi	r1, #39	; 0x27
   123ec:	strbhi	r1, [r9, r2]
   123f0:	str	r3, [sp, #36]	; 0x24
   123f4:	cmp	fp, r8
   123f8:	movhi	r3, #92	; 0x5c
   123fc:	strbhi	r3, [r9, r8]
   12400:	add	sl, sl, #1
   12404:	add	r8, r8, #1
   12408:	b	12208 <__assert_fail@plt+0x14fc>
   1240c:	ldr	r6, [sp, #48]	; 0x30
   12410:	mov	r4, #10
   12414:	mov	r3, #110	; 0x6e
   12418:	ldr	r2, [sp, #64]	; 0x40
   1241c:	cmp	r2, #0
   12420:	bne	12ea0 <__assert_fail@plt+0x2194>
   12424:	ldr	r1, [sp, #52]	; 0x34
   12428:	b	12384 <__assert_fail@plt+0x1678>
   1242c:	ldr	r6, [sp, #48]	; 0x30
   12430:	ldr	r1, [sp, #52]	; 0x34
   12434:	mov	r3, #116	; 0x74
   12438:	b	12384 <__assert_fail@plt+0x1678>
   1243c:	ldr	r6, [sp, #48]	; 0x30
   12440:	ldr	r1, [sp, #52]	; 0x34
   12444:	mov	r4, #11
   12448:	mov	r3, #118	; 0x76
   1244c:	b	12384 <__assert_fail@plt+0x1678>
   12450:	ldr	r6, [sp, #48]	; 0x30
   12454:	ldr	r1, [sp, #52]	; 0x34
   12458:	mov	r4, #8
   1245c:	mov	r3, #98	; 0x62
   12460:	b	12384 <__assert_fail@plt+0x1678>
   12464:	ldr	r6, [sp, #48]	; 0x30
   12468:	ldr	r1, [sp, #52]	; 0x34
   1246c:	mov	r4, #7
   12470:	mov	r3, #97	; 0x61
   12474:	b	12384 <__assert_fail@plt+0x1678>
   12478:	ldr	r3, [sp, #56]	; 0x38
   1247c:	ldr	r6, [sp, #48]	; 0x30
   12480:	cmp	r3, #0
   12484:	beq	12948 <__assert_fail@plt+0x1c3c>
   12488:	ldr	r3, [sp, #40]	; 0x28
   1248c:	cmp	r3, #0
   12490:	bne	12f7c <__assert_fail@plt+0x2270>
   12494:	ldr	r3, [sp, #36]	; 0x24
   12498:	ldr	r2, [sp, #52]	; 0x34
   1249c:	eor	r3, r3, #1
   124a0:	ands	r3, r2, r3
   124a4:	moveq	r2, r8
   124a8:	beq	124e0 <__assert_fail@plt+0x17d4>
   124ac:	cmp	fp, r8
   124b0:	movhi	r2, #39	; 0x27
   124b4:	strbhi	r2, [r9, r8]
   124b8:	add	r2, r8, #1
   124bc:	cmp	fp, r2
   124c0:	movhi	r1, #36	; 0x24
   124c4:	strbhi	r1, [r9, r2]
   124c8:	add	r2, r8, #2
   124cc:	cmp	fp, r2
   124d0:	movhi	r1, #39	; 0x27
   124d4:	strbhi	r1, [r9, r2]
   124d8:	add	r2, r8, #3
   124dc:	str	r3, [sp, #36]	; 0x24
   124e0:	cmp	fp, r2
   124e4:	movhi	r3, #92	; 0x5c
   124e8:	strbhi	r3, [r9, r2]
   124ec:	ldr	r3, [sp, #92]	; 0x5c
   124f0:	add	r8, r2, #1
   124f4:	cmp	r3, #0
   124f8:	beq	12e7c <__assert_fail@plt+0x2170>
   124fc:	ldr	r1, [sp, #24]
   12500:	add	r3, sl, #1
   12504:	cmp	r1, r3
   12508:	bls	12540 <__assert_fail@plt+0x1834>
   1250c:	ldr	r1, [sp, #44]	; 0x2c
   12510:	ldrb	r3, [r1, r3]
   12514:	sub	r3, r3, #48	; 0x30
   12518:	cmp	r3, #9
   1251c:	bhi	12540 <__assert_fail@plt+0x1834>
   12520:	cmp	fp, r8
   12524:	movhi	r3, #48	; 0x30
   12528:	strbhi	r3, [r9, r8]
   1252c:	add	r3, r2, #2
   12530:	cmp	fp, r3
   12534:	add	r8, r2, #3
   12538:	movhi	r1, #48	; 0x30
   1253c:	strbhi	r1, [r9, r3]
   12540:	ldr	r3, [sp, #40]	; 0x28
   12544:	ldr	r1, [sp, #52]	; 0x34
   12548:	mov	r7, r3
   1254c:	str	r3, [sp, #32]
   12550:	mov	r4, #48	; 0x30
   12554:	b	121a4 <__assert_fail@plt+0x1498>
   12558:	ldr	r6, [sp, #48]	; 0x30
   1255c:	cmp	sl, #0
   12560:	streq	r7, [sp, #32]
   12564:	beq	12584 <__assert_fail@plt+0x1878>
   12568:	mov	r3, #0
   1256c:	ldr	r1, [sp, #52]	; 0x34
   12570:	str	r3, [sp, #32]
   12574:	b	121a4 <__assert_fail@plt+0x1498>
   12578:	ldr	r6, [sp, #48]	; 0x30
   1257c:	mov	r3, #0
   12580:	str	r3, [sp, #32]
   12584:	ldr	r3, [sp, #64]	; 0x40
   12588:	cmp	r3, #0
   1258c:	bne	12d08 <__assert_fail@plt+0x1ffc>
   12590:	ldr	r1, [sp, #52]	; 0x34
   12594:	b	121a4 <__assert_fail@plt+0x1498>
   12598:	ldr	r3, [sp, #48]	; 0x30
   1259c:	mov	r6, r3
   125a0:	str	r3, [sp, #32]
   125a4:	b	12584 <__assert_fail@plt+0x1878>
   125a8:	ldr	r6, [sp, #48]	; 0x30
   125ac:	mov	r4, #13
   125b0:	mov	r3, #114	; 0x72
   125b4:	b	12418 <__assert_fail@plt+0x170c>
   125b8:	ldr	r3, [sp, #44]	; 0x2c
   125bc:	add	r5, r3, sl
   125c0:	ldrb	r4, [r5]
   125c4:	cmp	r4, #126	; 0x7e
   125c8:	ldrls	pc, [pc, r4, lsl #2]
   125cc:	b	12968 <__assert_fail@plt+0x1c5c>
   125d0:	andeq	r2, r1, r8, lsr r9
   125d4:	andeq	r2, r1, r8, ror #18
   125d8:	andeq	r2, r1, r8, ror #18
   125dc:	andeq	r2, r1, r8, ror #18
   125e0:	andeq	r2, r1, r8, ror #18
   125e4:	andeq	r2, r1, r8, ror #18
   125e8:	andeq	r2, r1, r8, ror #18
   125ec:	andeq	r2, r1, r0, lsr r9
   125f0:	andeq	r2, r1, r8, lsr #18
   125f4:	andeq	r2, r1, ip, lsl r9
   125f8:	andeq	r2, r1, r4, lsl r9
   125fc:	andeq	r2, r1, ip, lsl #18
   12600:	andeq	r2, r1, r4, lsl #18
   12604:	strdeq	r2, [r1], -ip
   12608:	andeq	r2, r1, r8, ror #18
   1260c:	andeq	r2, r1, r8, ror #18
   12610:	andeq	r2, r1, r8, ror #18
   12614:	andeq	r2, r1, r8, ror #18
   12618:	andeq	r2, r1, r8, ror #18
   1261c:	andeq	r2, r1, r8, ror #18
   12620:	andeq	r2, r1, r8, ror #18
   12624:	andeq	r2, r1, r8, ror #18
   12628:	andeq	r2, r1, r8, ror #18
   1262c:	andeq	r2, r1, r8, ror #18
   12630:	andeq	r2, r1, r8, ror #18
   12634:	andeq	r2, r1, r8, ror #18
   12638:	andeq	r2, r1, r8, ror #18
   1263c:	andeq	r2, r1, r8, ror #18
   12640:	andeq	r2, r1, r8, ror #18
   12644:	andeq	r2, r1, r8, ror #18
   12648:	andeq	r2, r1, r8, ror #18
   1264c:	andeq	r2, r1, r8, ror #18
   12650:	strdeq	r2, [r1], -r0
   12654:	andeq	r2, r1, r8, ror #17
   12658:	andeq	r2, r1, r8, ror #17
   1265c:	andeq	r2, r1, r0, ror #17
   12660:	andeq	r2, r1, r8, ror #17
   12664:	ldrdeq	r2, [r1], -r8
   12668:	andeq	r2, r1, r8, ror #17
   1266c:	andeq	r2, r1, ip, asr #16
   12670:	andeq	r2, r1, r8, ror #17
   12674:	andeq	r2, r1, r8, ror #17
   12678:	andeq	r2, r1, r8, ror #17
   1267c:	ldrdeq	r2, [r1], -r8
   12680:	ldrdeq	r2, [r1], -r8
   12684:	ldrdeq	r2, [r1], -r8
   12688:	ldrdeq	r2, [r1], -r8
   1268c:	ldrdeq	r2, [r1], -r8
   12690:	ldrdeq	r2, [r1], -r8
   12694:	ldrdeq	r2, [r1], -r8
   12698:	ldrdeq	r2, [r1], -r8
   1269c:	ldrdeq	r2, [r1], -r8
   126a0:	ldrdeq	r2, [r1], -r8
   126a4:	ldrdeq	r2, [r1], -r8
   126a8:	ldrdeq	r2, [r1], -r8
   126ac:	ldrdeq	r2, [r1], -r8
   126b0:	ldrdeq	r2, [r1], -r8
   126b4:	ldrdeq	r2, [r1], -r8
   126b8:	ldrdeq	r2, [r1], -r8
   126bc:	andeq	r2, r1, r8, ror #17
   126c0:	andeq	r2, r1, r8, ror #17
   126c4:	andeq	r2, r1, r8, ror #17
   126c8:	andeq	r2, r1, r8, ror #17
   126cc:	andeq	r2, r1, r0, lsr #16
   126d0:	andeq	r2, r1, r8, ror #18
   126d4:	ldrdeq	r2, [r1], -r8
   126d8:	ldrdeq	r2, [r1], -r8
   126dc:	ldrdeq	r2, [r1], -r8
   126e0:	ldrdeq	r2, [r1], -r8
   126e4:	ldrdeq	r2, [r1], -r8
   126e8:	ldrdeq	r2, [r1], -r8
   126ec:	ldrdeq	r2, [r1], -r8
   126f0:	ldrdeq	r2, [r1], -r8
   126f4:	ldrdeq	r2, [r1], -r8
   126f8:	ldrdeq	r2, [r1], -r8
   126fc:	ldrdeq	r2, [r1], -r8
   12700:	ldrdeq	r2, [r1], -r8
   12704:	ldrdeq	r2, [r1], -r8
   12708:	ldrdeq	r2, [r1], -r8
   1270c:	ldrdeq	r2, [r1], -r8
   12710:	ldrdeq	r2, [r1], -r8
   12714:	ldrdeq	r2, [r1], -r8
   12718:	ldrdeq	r2, [r1], -r8
   1271c:	ldrdeq	r2, [r1], -r8
   12720:	ldrdeq	r2, [r1], -r8
   12724:	ldrdeq	r2, [r1], -r8
   12728:	ldrdeq	r2, [r1], -r8
   1272c:	ldrdeq	r2, [r1], -r8
   12730:	ldrdeq	r2, [r1], -r8
   12734:	ldrdeq	r2, [r1], -r8
   12738:	ldrdeq	r2, [r1], -r8
   1273c:	andeq	r2, r1, r8, ror #17
   12740:	strdeq	r2, [r1], -r0
   12744:	ldrdeq	r2, [r1], -r8
   12748:	andeq	r2, r1, r8, ror #17
   1274c:	ldrdeq	r2, [r1], -r8
   12750:	andeq	r2, r1, r8, ror #17
   12754:	ldrdeq	r2, [r1], -r8
   12758:	ldrdeq	r2, [r1], -r8
   1275c:	ldrdeq	r2, [r1], -r8
   12760:	ldrdeq	r2, [r1], -r8
   12764:	ldrdeq	r2, [r1], -r8
   12768:	ldrdeq	r2, [r1], -r8
   1276c:	ldrdeq	r2, [r1], -r8
   12770:	ldrdeq	r2, [r1], -r8
   12774:	ldrdeq	r2, [r1], -r8
   12778:	ldrdeq	r2, [r1], -r8
   1277c:	ldrdeq	r2, [r1], -r8
   12780:	ldrdeq	r2, [r1], -r8
   12784:	ldrdeq	r2, [r1], -r8
   12788:	ldrdeq	r2, [r1], -r8
   1278c:	ldrdeq	r2, [r1], -r8
   12790:	ldrdeq	r2, [r1], -r8
   12794:	ldrdeq	r2, [r1], -r8
   12798:	ldrdeq	r2, [r1], -r8
   1279c:	ldrdeq	r2, [r1], -r8
   127a0:	ldrdeq	r2, [r1], -r8
   127a4:	ldrdeq	r2, [r1], -r8
   127a8:	ldrdeq	r2, [r1], -r8
   127ac:	ldrdeq	r2, [r1], -r8
   127b0:	ldrdeq	r2, [r1], -r8
   127b4:	ldrdeq	r2, [r1], -r8
   127b8:	ldrdeq	r2, [r1], -r8
   127bc:	andeq	r2, r1, ip, asr #15
   127c0:	andeq	r2, r1, r8, ror #17
   127c4:	andeq	r2, r1, ip, asr #15
   127c8:	andeq	r2, r1, r0, ror #17
   127cc:	ldr	r3, [sp, #24]
   127d0:	mov	r6, #0
   127d4:	cmn	r3, #1
   127d8:	bne	12184 <__assert_fail@plt+0x1478>
   127dc:	ldr	r3, [sp, #44]	; 0x2c
   127e0:	ldrb	r3, [r3, #1]
   127e4:	adds	r3, r3, #0
   127e8:	movne	r3, #1
   127ec:	b	1218c <__assert_fail@plt+0x1480>
   127f0:	ldr	r3, [sp, #176]	; 0xb0
   127f4:	mov	r6, #0
   127f8:	cmp	r3, #2
   127fc:	bne	122cc <__assert_fail@plt+0x15c0>
   12800:	ldr	r3, [sp, #64]	; 0x40
   12804:	cmp	r3, #0
   12808:	bne	13040 <__assert_fail@plt+0x2334>
   1280c:	add	sl, sl, #1
   12810:	ldr	r6, [sp, #36]	; 0x24
   12814:	str	r3, [sp, #32]
   12818:	mov	r4, #92	; 0x5c
   1281c:	b	121d8 <__assert_fail@plt+0x14cc>
   12820:	ldr	r3, [sp, #176]	; 0xb0
   12824:	mov	r6, #0
   12828:	cmp	r3, #2
   1282c:	bne	12300 <__assert_fail@plt+0x15f4>
   12830:	ldr	r3, [sp, #40]	; 0x28
   12834:	cmp	r3, #0
   12838:	bne	12b1c <__assert_fail@plt+0x1e10>
   1283c:	mov	r1, r7
   12840:	str	r3, [sp, #32]
   12844:	mov	r4, #63	; 0x3f
   12848:	b	121a4 <__assert_fail@plt+0x1498>
   1284c:	ldr	r3, [sp, #176]	; 0xb0
   12850:	mov	r6, #0
   12854:	cmp	r3, #2
   12858:	bne	12350 <__assert_fail@plt+0x1644>
   1285c:	ldr	r3, [sp, #64]	; 0x40
   12860:	cmp	r3, #0
   12864:	bne	13040 <__assert_fail@plt+0x2334>
   12868:	ldr	r2, [sp, #84]	; 0x54
   1286c:	adds	r3, fp, #0
   12870:	movne	r3, #1
   12874:	cmp	r2, #0
   12878:	movne	r3, #0
   1287c:	cmp	r3, #0
   12880:	strne	fp, [sp, #84]	; 0x54
   12884:	movne	fp, #0
   12888:	bne	128b8 <__assert_fail@plt+0x1bac>
   1288c:	cmp	fp, r8
   12890:	movhi	r3, #39	; 0x27
   12894:	strbhi	r3, [r9, r8]
   12898:	add	r3, r8, #1
   1289c:	cmp	fp, r3
   128a0:	movhi	r2, #92	; 0x5c
   128a4:	strbhi	r2, [r9, r3]
   128a8:	add	r3, r8, #2
   128ac:	cmp	fp, r3
   128b0:	movhi	r2, #39	; 0x27
   128b4:	strbhi	r2, [r9, r3]
   128b8:	ldr	r3, [sp, #64]	; 0x40
   128bc:	add	r8, r8, #3
   128c0:	mov	r1, r7
   128c4:	str	r7, [sp, #32]
   128c8:	str	r7, [sp, #76]	; 0x4c
   128cc:	str	r3, [sp, #36]	; 0x24
   128d0:	mov	r4, #39	; 0x27
   128d4:	b	121a4 <__assert_fail@plt+0x1498>
   128d8:	mov	r6, #0
   128dc:	b	12368 <__assert_fail@plt+0x165c>
   128e0:	mov	r6, #0
   128e4:	b	1255c <__assert_fail@plt+0x1850>
   128e8:	mov	r6, #0
   128ec:	b	1257c <__assert_fail@plt+0x1870>
   128f0:	str	r7, [sp, #32]
   128f4:	mov	r6, #0
   128f8:	b	12584 <__assert_fail@plt+0x1878>
   128fc:	mov	r6, #0
   12900:	b	125ac <__assert_fail@plt+0x18a0>
   12904:	mov	r6, #0
   12908:	b	12378 <__assert_fail@plt+0x166c>
   1290c:	mov	r6, #0
   12910:	b	12440 <__assert_fail@plt+0x1734>
   12914:	mov	r6, #0
   12918:	b	12410 <__assert_fail@plt+0x1704>
   1291c:	mov	r6, #0
   12920:	mov	r3, #116	; 0x74
   12924:	b	12418 <__assert_fail@plt+0x170c>
   12928:	mov	r6, #0
   1292c:	b	12454 <__assert_fail@plt+0x1748>
   12930:	mov	r6, #0
   12934:	b	12468 <__assert_fail@plt+0x175c>
   12938:	ldr	r3, [sp, #56]	; 0x38
   1293c:	mov	r6, #0
   12940:	cmp	r3, #0
   12944:	bne	12488 <__assert_fail@plt+0x177c>
   12948:	ldr	r3, [sp, #96]	; 0x60
   1294c:	cmp	r3, #0
   12950:	addne	sl, sl, #1
   12954:	bne	11cfc <__assert_fail@plt+0xff0>
   12958:	ldr	r1, [sp, #52]	; 0x34
   1295c:	str	r3, [sp, #32]
   12960:	mov	r4, r3
   12964:	b	121a4 <__assert_fail@plt+0x1498>
   12968:	mov	r6, #0
   1296c:	ldr	r3, [sp, #80]	; 0x50
   12970:	cmp	r3, #1
   12974:	bne	12b64 <__assert_fail@plt+0x1e58>
   12978:	bl	10c34 <__ctype_b_loc@plt>
   1297c:	ldr	r2, [sp, #80]	; 0x50
   12980:	sxth	r3, r4
   12984:	mov	r1, r2
   12988:	lsl	r3, r3, #1
   1298c:	ldr	r2, [r0]
   12990:	ldrh	r3, [r2, r3]
   12994:	and	r3, r3, #16384	; 0x4000
   12998:	cmp	r3, #0
   1299c:	movne	r3, #1
   129a0:	moveq	r3, #0
   129a4:	str	r3, [sp, #32]
   129a8:	moveq	r3, #1
   129ac:	movne	r3, #0
   129b0:	ldr	r2, [sp, #56]	; 0x38
   129b4:	and	r3, r3, r2
   129b8:	ands	r3, r3, #255	; 0xff
   129bc:	beq	12590 <__assert_fail@plt+0x1884>
   129c0:	add	r1, sl, r1
   129c4:	mov	r0, #0
   129c8:	ldr	r7, [sp, #40]	; 0x28
   129cc:	ldr	r2, [sp, #36]	; 0x24
   129d0:	ldr	lr, [sp, #52]	; 0x34
   129d4:	b	12a84 <__assert_fail@plt+0x1d78>
   129d8:	cmp	r7, #0
   129dc:	bne	12dd8 <__assert_fail@plt+0x20cc>
   129e0:	eor	r0, r2, #1
   129e4:	ands	r0, lr, r0
   129e8:	beq	12a20 <__assert_fail@plt+0x1d14>
   129ec:	cmp	fp, r8
   129f0:	movhi	r2, #39	; 0x27
   129f4:	strbhi	r2, [r9, r8]
   129f8:	add	r2, r8, #1
   129fc:	cmp	fp, r2
   12a00:	movhi	ip, #36	; 0x24
   12a04:	strbhi	ip, [r9, r2]
   12a08:	add	r2, r8, #2
   12a0c:	cmp	fp, r2
   12a10:	movhi	ip, #39	; 0x27
   12a14:	strbhi	ip, [r9, r2]
   12a18:	add	r8, r8, #3
   12a1c:	mov	r2, r0
   12a20:	cmp	fp, r8
   12a24:	movhi	r0, #92	; 0x5c
   12a28:	strbhi	r0, [r9, r8]
   12a2c:	add	r0, r8, #1
   12a30:	cmp	fp, r0
   12a34:	lsrhi	ip, r4, #6
   12a38:	addhi	ip, ip, #48	; 0x30
   12a3c:	strbhi	ip, [r9, r0]
   12a40:	add	ip, r8, #2
   12a44:	cmp	fp, ip
   12a48:	lsrhi	r0, r4, #3
   12a4c:	andhi	r0, r0, #7
   12a50:	addhi	r0, r0, #48	; 0x30
   12a54:	add	sl, sl, #1
   12a58:	strbhi	r0, [r9, ip]
   12a5c:	and	r4, r4, #7
   12a60:	cmp	sl, r1
   12a64:	add	r4, r4, #48	; 0x30
   12a68:	add	r8, r8, #3
   12a6c:	bcs	12df0 <__assert_fail@plt+0x20e4>
   12a70:	mov	r0, r3
   12a74:	cmp	fp, r8
   12a78:	strbhi	r4, [r9, r8]
   12a7c:	ldrb	r4, [r5, #1]!
   12a80:	add	r8, r8, #1
   12a84:	cmp	r3, #0
   12a88:	bne	129d8 <__assert_fail@plt+0x1ccc>
   12a8c:	cmp	r6, #0
   12a90:	bne	12b34 <__assert_fail@plt+0x1e28>
   12a94:	eor	r6, r0, #1
   12a98:	and	r6, r6, r2
   12a9c:	add	sl, sl, #1
   12aa0:	cmp	r1, sl
   12aa4:	uxtb	r6, r6
   12aa8:	bls	12b5c <__assert_fail@plt+0x1e50>
   12aac:	cmp	r6, #0
   12ab0:	beq	12a74 <__assert_fail@plt+0x1d68>
   12ab4:	cmp	fp, r8
   12ab8:	movhi	r2, #39	; 0x27
   12abc:	strbhi	r2, [r9, r8]
   12ac0:	add	r2, r8, #1
   12ac4:	cmp	fp, r2
   12ac8:	movhi	ip, #39	; 0x27
   12acc:	strbhi	ip, [r9, r2]
   12ad0:	add	r8, r8, #2
   12ad4:	mov	r6, r3
   12ad8:	mov	r2, r3
   12adc:	b	12a74 <__assert_fail@plt+0x1d68>
   12ae0:	ldr	r3, [sp, #184]	; 0xb8
   12ae4:	cmp	r3, #0
   12ae8:	beq	121c0 <__assert_fail@plt+0x14b4>
   12aec:	lsr	r2, r4, #5
   12af0:	mov	r0, r3
   12af4:	uxtb	r2, r2
   12af8:	and	r3, r4, #31
   12afc:	ldr	r2, [r0, r2, lsl #2]
   12b00:	lsr	r3, r2, r3
   12b04:	tst	r3, #1
   12b08:	beq	121c0 <__assert_fail@plt+0x14b4>
   12b0c:	ldr	r3, [sp, #40]	; 0x28
   12b10:	cmp	r3, #0
   12b14:	beq	123ac <__assert_fail@plt+0x16a0>
   12b18:	mov	r3, r1
   12b1c:	str	r3, [sp, #64]	; 0x40
   12b20:	mov	sl, r9
   12b24:	ldr	r3, [sp, #56]	; 0x38
   12b28:	mov	r9, fp
   12b2c:	ldr	r2, [sp, #64]	; 0x40
   12b30:	b	12d20 <__assert_fail@plt+0x2014>
   12b34:	cmp	fp, r8
   12b38:	eor	r6, r0, #1
   12b3c:	movhi	ip, #92	; 0x5c
   12b40:	and	r6, r6, r2
   12b44:	add	sl, sl, #1
   12b48:	strbhi	ip, [r9, r8]
   12b4c:	cmp	r1, sl
   12b50:	add	r8, r8, #1
   12b54:	uxtb	r6, r6
   12b58:	bhi	12aac <__assert_fail@plt+0x1da0>
   12b5c:	str	r2, [sp, #36]	; 0x24
   12b60:	b	121d8 <__assert_fail@plt+0x14cc>
   12b64:	ldr	r3, [sp, #24]
   12b68:	cmn	r3, #1
   12b6c:	mov	r3, #0
   12b70:	str	r3, [sp, #128]	; 0x80
   12b74:	str	r3, [sp, #132]	; 0x84
   12b78:	beq	12e6c <__assert_fail@plt+0x2160>
   12b7c:	mov	r2, r7
   12b80:	mov	r3, #0
   12b84:	str	r7, [sp, #104]	; 0x68
   12b88:	str	r5, [sp, #116]	; 0x74
   12b8c:	mov	r7, r3
   12b90:	mov	r5, r2
   12b94:	str	r4, [sp, #32]
   12b98:	str	r6, [sp, #108]	; 0x6c
   12b9c:	str	r8, [sp, #112]	; 0x70
   12ba0:	ldr	r3, [sp, #44]	; 0x2c
   12ba4:	add	r6, sl, r7
   12ba8:	add	r4, r3, r6
   12bac:	ldr	r3, [sp, #24]
   12bb0:	mov	r1, r4
   12bb4:	sub	r2, r3, r6
   12bb8:	add	r0, sp, #124	; 0x7c
   12bbc:	add	r3, sp, #128	; 0x80
   12bc0:	bl	16e84 <__assert_fail@plt+0x6178>
   12bc4:	subs	r8, r0, #0
   12bc8:	beq	12f50 <__assert_fail@plt+0x2244>
   12bcc:	cmn	r8, #1
   12bd0:	beq	12f28 <__assert_fail@plt+0x221c>
   12bd4:	cmn	r8, #2
   12bd8:	beq	12ec0 <__assert_fail@plt+0x21b4>
   12bdc:	ldr	r3, [sp, #64]	; 0x40
   12be0:	cmp	r3, #0
   12be4:	beq	12ca4 <__assert_fail@plt+0x1f98>
   12be8:	cmp	r8, #1
   12bec:	beq	12ca4 <__assert_fail@plt+0x1f98>
   12bf0:	sub	r3, r8, #1
   12bf4:	add	r6, r3, r6
   12bf8:	ldr	r3, [sp, #44]	; 0x2c
   12bfc:	add	r6, r3, r6
   12c00:	ldrb	r3, [r4, #1]!
   12c04:	sub	r3, r3, #91	; 0x5b
   12c08:	cmp	r3, #33	; 0x21
   12c0c:	ldrls	pc, [pc, r3, lsl #2]
   12c10:	b	12c9c <__assert_fail@plt+0x1f90>
   12c14:	andeq	r2, r1, r8, lsl #26
   12c18:	andeq	r2, r1, r8, lsl #26
   12c1c:	muleq	r1, ip, ip
   12c20:	andeq	r2, r1, r8, lsl #26
   12c24:	muleq	r1, ip, ip
   12c28:	andeq	r2, r1, r8, lsl #26
   12c2c:	muleq	r1, ip, ip
   12c30:	muleq	r1, ip, ip
   12c34:	muleq	r1, ip, ip
   12c38:	muleq	r1, ip, ip
   12c3c:	muleq	r1, ip, ip
   12c40:	muleq	r1, ip, ip
   12c44:	muleq	r1, ip, ip
   12c48:	muleq	r1, ip, ip
   12c4c:	muleq	r1, ip, ip
   12c50:	muleq	r1, ip, ip
   12c54:	muleq	r1, ip, ip
   12c58:	muleq	r1, ip, ip
   12c5c:	muleq	r1, ip, ip
   12c60:	muleq	r1, ip, ip
   12c64:	muleq	r1, ip, ip
   12c68:	muleq	r1, ip, ip
   12c6c:	muleq	r1, ip, ip
   12c70:	muleq	r1, ip, ip
   12c74:	muleq	r1, ip, ip
   12c78:	muleq	r1, ip, ip
   12c7c:	muleq	r1, ip, ip
   12c80:	muleq	r1, ip, ip
   12c84:	muleq	r1, ip, ip
   12c88:	muleq	r1, ip, ip
   12c8c:	muleq	r1, ip, ip
   12c90:	muleq	r1, ip, ip
   12c94:	muleq	r1, ip, ip
   12c98:	andeq	r2, r1, r8, lsl #26
   12c9c:	cmp	r6, r4
   12ca0:	bne	12c00 <__assert_fail@plt+0x1ef4>
   12ca4:	ldr	r0, [sp, #124]	; 0x7c
   12ca8:	bl	10ba4 <iswprint@plt>
   12cac:	add	r7, r7, r8
   12cb0:	cmp	r0, #0
   12cb4:	add	r0, sp, #128	; 0x80
   12cb8:	moveq	r5, #0
   12cbc:	bl	10b5c <mbsinit@plt>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12ba0 <__assert_fail@plt+0x1e94>
   12cc8:	ldr	r4, [sp, #32]
   12ccc:	str	r5, [sp, #32]
   12cd0:	ldr	r3, [sp, #32]
   12cd4:	mov	r1, r7
   12cd8:	eor	r3, r3, #1
   12cdc:	ldr	r7, [sp, #104]	; 0x68
   12ce0:	ldr	r6, [sp, #108]	; 0x6c
   12ce4:	ldr	r8, [sp, #112]	; 0x70
   12ce8:	ldr	r5, [sp, #116]	; 0x74
   12cec:	uxtb	r3, r3
   12cf0:	cmp	r1, #1
   12cf4:	bls	129b0 <__assert_fail@plt+0x1ca4>
   12cf8:	ldr	r2, [sp, #56]	; 0x38
   12cfc:	and	r3, r3, r2
   12d00:	uxtb	r3, r3
   12d04:	b	129c0 <__assert_fail@plt+0x1cb4>
   12d08:	mov	r3, #2
   12d0c:	str	r3, [sp, #176]	; 0xb0
   12d10:	ldr	r2, [sp, #64]	; 0x40
   12d14:	ldr	r3, [sp, #56]	; 0x38
   12d18:	mov	sl, r9
   12d1c:	mov	r9, fp
   12d20:	and	r3, r3, r2
   12d24:	tst	r3, #255	; 0xff
   12d28:	ldr	r3, [sp, #176]	; 0xb0
   12d2c:	movne	r3, #4
   12d30:	str	r3, [sp, #176]	; 0xb0
   12d34:	ldr	r3, [sp, #180]	; 0xb4
   12d38:	mov	ip, #0
   12d3c:	bic	r3, r3, #2
   12d40:	str	r3, [sp, #4]
   12d44:	ldr	r3, [sp, #192]	; 0xc0
   12d48:	ldr	r2, [sp, #44]	; 0x2c
   12d4c:	str	r3, [sp, #16]
   12d50:	ldr	r3, [sp, #188]	; 0xbc
   12d54:	mov	r1, r9
   12d58:	str	r3, [sp, #12]
   12d5c:	ldr	r3, [sp, #176]	; 0xb0
   12d60:	mov	r0, sl
   12d64:	str	r3, [sp]
   12d68:	str	ip, [sp, #8]
   12d6c:	ldr	r3, [sp, #24]
   12d70:	bl	11bd0 <__assert_fail@plt+0xec4>
   12d74:	mov	fp, r0
   12d78:	mov	r0, fp
   12d7c:	add	sp, sp, #140	; 0x8c
   12d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d84:	mov	r4, #92	; 0x5c
   12d88:	mov	r1, #0
   12d8c:	mov	r3, r4
   12d90:	b	12384 <__assert_fail@plt+0x1678>
   12d94:	mov	r3, #0
   12d98:	ldr	r1, [sp, #52]	; 0x34
   12d9c:	str	r3, [sp, #32]
   12da0:	mov	r4, #63	; 0x3f
   12da4:	b	121a4 <__assert_fail@plt+0x1498>
   12da8:	cmp	fp, #0
   12dac:	beq	12e08 <__assert_fail@plt+0x20fc>
   12db0:	mov	r3, #39	; 0x27
   12db4:	strb	r3, [r9]
   12db8:	mov	r3, #0
   12dbc:	str	r3, [sp, #40]	; 0x28
   12dc0:	mov	r3, #1
   12dc4:	str	r3, [sp, #68]	; 0x44
   12dc8:	ldr	r3, [pc, #448]	; 12f90 <__assert_fail@plt+0x2284>
   12dcc:	mov	r8, #1
   12dd0:	str	r3, [sp, #72]	; 0x48
   12dd4:	b	11fb8 <__assert_fail@plt+0x12ac>
   12dd8:	ldr	r3, [sp, #40]	; 0x28
   12ddc:	mov	sl, r9
   12de0:	str	r3, [sp, #56]	; 0x38
   12de4:	mov	r9, fp
   12de8:	ldr	r2, [sp, #64]	; 0x40
   12dec:	b	12d20 <__assert_fail@plt+0x2014>
   12df0:	str	r2, [sp, #36]	; 0x24
   12df4:	b	12208 <__assert_fail@plt+0x14fc>
   12df8:	mov	r1, #0
   12dfc:	str	r3, [sp, #32]
   12e00:	mov	r4, #63	; 0x3f
   12e04:	b	121a4 <__assert_fail@plt+0x1498>
   12e08:	ldr	r3, [pc, #384]	; 12f90 <__assert_fail@plt+0x2284>
   12e0c:	str	r3, [sp, #72]	; 0x48
   12e10:	mov	r3, #0
   12e14:	str	r3, [sp, #40]	; 0x28
   12e18:	mov	r3, #1
   12e1c:	str	r3, [sp, #68]	; 0x44
   12e20:	mov	r8, r3
   12e24:	b	11fb8 <__assert_fail@plt+0x12ac>
   12e28:	bl	10d00 <abort@plt>
   12e2c:	cmp	fp, #0
   12e30:	beq	12e90 <__assert_fail@plt+0x2184>
   12e34:	mov	r2, #1
   12e38:	mov	r3, #34	; 0x22
   12e3c:	strb	r3, [r9]
   12e40:	mov	r8, r2
   12e44:	mov	r3, r2
   12e48:	str	r2, [sp, #68]	; 0x44
   12e4c:	str	r3, [sp, #56]	; 0x38
   12e50:	ldr	r3, [pc, #316]	; 12f94 <__assert_fail@plt+0x2288>
   12e54:	ldr	r1, [sp, #56]	; 0x38
   12e58:	str	r3, [sp, #72]	; 0x48
   12e5c:	ldr	r2, [sp, #176]	; 0xb0
   12e60:	ldr	ip, [sp, #40]	; 0x28
   12e64:	ldr	lr, [sp, #176]	; 0xb0
   12e68:	b	11c9c <__assert_fail@plt+0xf90>
   12e6c:	ldr	r0, [sp, #44]	; 0x2c
   12e70:	bl	10c4c <strlen@plt>
   12e74:	str	r0, [sp, #24]
   12e78:	b	12b7c <__assert_fail@plt+0x1e70>
   12e7c:	mov	r7, #0
   12e80:	ldr	r1, [sp, #52]	; 0x34
   12e84:	str	r3, [sp, #32]
   12e88:	mov	r4, #48	; 0x30
   12e8c:	b	121a4 <__assert_fail@plt+0x1498>
   12e90:	mov	r3, #1
   12e94:	str	r3, [sp, #68]	; 0x44
   12e98:	mov	r8, r3
   12e9c:	b	12e4c <__assert_fail@plt+0x2140>
   12ea0:	mov	r3, #2
   12ea4:	mov	sl, r9
   12ea8:	str	r3, [sp, #176]	; 0xb0
   12eac:	mov	r9, fp
   12eb0:	ldr	r3, [sp, #56]	; 0x38
   12eb4:	b	12d20 <__assert_fail@plt+0x2014>
   12eb8:	ldr	r6, [sp, #48]	; 0x30
   12ebc:	b	1296c <__assert_fail@plt+0x1c60>
   12ec0:	ldr	r0, [sp, #24]
   12ec4:	mov	ip, r6
   12ec8:	cmp	r0, ip
   12ecc:	mov	r1, r7
   12ed0:	mov	r2, r4
   12ed4:	ldr	r7, [sp, #104]	; 0x68
   12ed8:	ldr	r4, [sp, #32]
   12edc:	ldr	r6, [sp, #108]	; 0x6c
   12ee0:	ldr	r8, [sp, #112]	; 0x70
   12ee4:	ldr	r5, [sp, #116]	; 0x74
   12ee8:	bls	12f18 <__assert_fail@plt+0x220c>
   12eec:	ldrb	r3, [r2]
   12ef0:	cmp	r3, #0
   12ef4:	bne	12f08 <__assert_fail@plt+0x21fc>
   12ef8:	b	13028 <__assert_fail@plt+0x231c>
   12efc:	ldrb	r3, [r2, #1]!
   12f00:	cmp	r3, #0
   12f04:	beq	13028 <__assert_fail@plt+0x231c>
   12f08:	add	r1, r1, #1
   12f0c:	add	r3, sl, r1
   12f10:	cmp	r0, r3
   12f14:	bhi	12efc <__assert_fail@plt+0x21f0>
   12f18:	mov	r2, #0
   12f1c:	mov	r3, r7
   12f20:	str	r2, [sp, #32]
   12f24:	b	12cf0 <__assert_fail@plt+0x1fe4>
   12f28:	mov	r1, r7
   12f2c:	ldr	r7, [sp, #104]	; 0x68
   12f30:	mov	r2, #0
   12f34:	ldr	r4, [sp, #32]
   12f38:	ldr	r6, [sp, #108]	; 0x6c
   12f3c:	ldr	r8, [sp, #112]	; 0x70
   12f40:	ldr	r5, [sp, #116]	; 0x74
   12f44:	mov	r3, r7
   12f48:	str	r2, [sp, #32]
   12f4c:	b	12cf0 <__assert_fail@plt+0x1fe4>
   12f50:	mov	r3, r5
   12f54:	eor	r3, r3, #1
   12f58:	ldr	r4, [sp, #32]
   12f5c:	mov	r1, r7
   12f60:	str	r5, [sp, #32]
   12f64:	ldr	r7, [sp, #104]	; 0x68
   12f68:	ldr	r6, [sp, #108]	; 0x6c
   12f6c:	ldr	r8, [sp, #112]	; 0x70
   12f70:	ldr	r5, [sp, #116]	; 0x74
   12f74:	uxtb	r3, r3
   12f78:	b	12cf0 <__assert_fail@plt+0x1fe4>
   12f7c:	mov	sl, r9
   12f80:	str	r3, [sp, #56]	; 0x38
   12f84:	mov	r9, fp
   12f88:	ldr	r2, [sp, #64]	; 0x40
   12f8c:	b	12d20 <__assert_fail@plt+0x2014>
   12f90:	andeq	r7, r1, r8, lsr ip
   12f94:	andeq	r7, r1, r4, lsr ip
   12f98:	andeq	r7, r1, ip, lsr ip
   12f9c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12fa0:	ldr	r2, [sp, #44]	; 0x2c
   12fa4:	ldrb	r1, [r2, r3]
   12fa8:	sub	r2, r1, #33	; 0x21
   12fac:	uxtb	r2, r2
   12fb0:	cmp	r2, #29
   12fb4:	bhi	13034 <__assert_fail@plt+0x2328>
   12fb8:	ldr	r0, [pc, #-36]	; 12f9c <__assert_fail@plt+0x2290>
   12fbc:	mov	ip, #1
   12fc0:	ands	r2, r0, ip, lsl r2
   12fc4:	beq	13054 <__assert_fail@plt+0x2348>
   12fc8:	ldr	r2, [sp, #40]	; 0x28
   12fcc:	cmp	r2, #0
   12fd0:	bne	13148 <__assert_fail@plt+0x243c>
   12fd4:	add	r2, r8, #1
   12fd8:	cmp	fp, r8
   12fdc:	strbhi	r4, [r9, r8]
   12fe0:	cmp	fp, r2
   12fe4:	movhi	r0, #34	; 0x22
   12fe8:	strbhi	r0, [r9, r2]
   12fec:	add	r2, r8, #2
   12ff0:	cmp	fp, r2
   12ff4:	movhi	r0, #34	; 0x22
   12ff8:	strbhi	r0, [r9, r2]
   12ffc:	add	r2, r8, #3
   13000:	cmp	fp, r2
   13004:	mov	sl, r3
   13008:	ldr	r3, [sp, #40]	; 0x28
   1300c:	movhi	r0, #63	; 0x3f
   13010:	mov	r4, r1
   13014:	strbhi	r0, [r9, r2]
   13018:	add	r8, r8, #4
   1301c:	mov	r1, r3
   13020:	str	r3, [sp, #32]
   13024:	b	121a4 <__assert_fail@plt+0x1498>
   13028:	str	r3, [sp, #32]
   1302c:	mov	r3, r7
   13030:	b	12cf0 <__assert_fail@plt+0x1fe4>
   13034:	mov	r1, #0
   13038:	str	r1, [sp, #32]
   1303c:	b	121a4 <__assert_fail@plt+0x1498>
   13040:	mov	sl, r9
   13044:	ldr	r3, [sp, #56]	; 0x38
   13048:	mov	r9, fp
   1304c:	ldr	r2, [sp, #64]	; 0x40
   13050:	b	12d20 <__assert_fail@plt+0x2014>
   13054:	str	r2, [sp, #32]
   13058:	mov	r1, #0
   1305c:	b	121a4 <__assert_fail@plt+0x1498>
   13060:	ldr	r2, [sp, #76]	; 0x4c
   13064:	mov	sl, r9
   13068:	mov	r9, fp
   1306c:	mov	fp, r8
   13070:	ldr	r1, [sp, #72]	; 0x48
   13074:	cmp	r1, #0
   13078:	moveq	r3, #0
   1307c:	andne	r3, r2, #1
   13080:	cmp	r3, #0
   13084:	beq	130b0 <__assert_fail@plt+0x23a4>
   13088:	ldrb	r3, [r1]
   1308c:	cmp	r3, #0
   13090:	beq	130b0 <__assert_fail@plt+0x23a4>
   13094:	mov	r2, r1
   13098:	cmp	r9, fp
   1309c:	strbhi	r3, [sl, fp]
   130a0:	ldrb	r3, [r2, #1]!
   130a4:	add	fp, fp, #1
   130a8:	cmp	r3, #0
   130ac:	bne	13098 <__assert_fail@plt+0x238c>
   130b0:	cmp	r9, fp
   130b4:	movhi	r3, #0
   130b8:	strbhi	r3, [sl, fp]
   130bc:	b	12d78 <__assert_fail@plt+0x206c>
   130c0:	ldr	r3, [sp, #192]	; 0xc0
   130c4:	mov	ip, #5
   130c8:	str	r3, [sp, #16]
   130cc:	ldr	r3, [sp, #188]	; 0xbc
   130d0:	ldr	r2, [sp, #44]	; 0x2c
   130d4:	str	r3, [sp, #12]
   130d8:	ldr	r3, [sp, #184]	; 0xb8
   130dc:	ldr	r1, [sp, #84]	; 0x54
   130e0:	str	r3, [sp, #8]
   130e4:	ldr	r3, [sp, #180]	; 0xb4
   130e8:	mov	r0, r9
   130ec:	str	r3, [sp, #4]
   130f0:	str	ip, [sp]
   130f4:	ldr	r3, [sp, #24]
   130f8:	bl	11bd0 <__assert_fail@plt+0xec4>
   130fc:	mov	fp, r0
   13100:	b	12d78 <__assert_fail@plt+0x206c>
   13104:	mov	sl, r9
   13108:	mov	r9, fp
   1310c:	mov	fp, r8
   13110:	b	13070 <__assert_fail@plt+0x2364>
   13114:	ldr	r1, [sp, #176]	; 0xb0
   13118:	bl	11ab0 <__assert_fail@plt+0xda4>
   1311c:	str	r0, [sp, #192]	; 0xc0
   13120:	b	1208c <__assert_fail@plt+0x1380>
   13124:	ldr	r1, [sp, #176]	; 0xb0
   13128:	bl	11ab0 <__assert_fail@plt+0xda4>
   1312c:	str	r0, [sp, #188]	; 0xbc
   13130:	b	1206c <__assert_fail@plt+0x1360>
   13134:	mov	sl, r9
   13138:	mov	r2, r3
   1313c:	mov	r9, fp
   13140:	mov	fp, r8
   13144:	b	13070 <__assert_fail@plt+0x2364>
   13148:	mov	sl, r9
   1314c:	mov	r9, fp
   13150:	b	12d34 <__assert_fail@plt+0x2028>
   13154:	push	{r4, r5, r6, lr}
   13158:	mov	r5, r0
   1315c:	bl	10c58 <__errno_location@plt>
   13160:	cmp	r5, #0
   13164:	mov	r1, #48	; 0x30
   13168:	mov	r4, r0
   1316c:	ldr	r0, [pc, #16]	; 13184 <__assert_fail@plt+0x2478>
   13170:	ldr	r6, [r4]
   13174:	movne	r0, r5
   13178:	bl	169f0 <__assert_fail@plt+0x5ce4>
   1317c:	str	r6, [r4]
   13180:	pop	{r4, r5, r6, pc}
   13184:	andeq	r9, r2, r8, lsr r1
   13188:	ldr	r3, [pc, #12]	; 1319c <__assert_fail@plt+0x2490>
   1318c:	cmp	r0, #0
   13190:	moveq	r0, r3
   13194:	ldr	r0, [r0]
   13198:	bx	lr
   1319c:	andeq	r9, r2, r8, lsr r1
   131a0:	ldr	r3, [pc, #12]	; 131b4 <__assert_fail@plt+0x24a8>
   131a4:	cmp	r0, #0
   131a8:	moveq	r0, r3
   131ac:	str	r1, [r0]
   131b0:	bx	lr
   131b4:	andeq	r9, r2, r8, lsr r1
   131b8:	ldr	r3, [pc, #52]	; 131f4 <__assert_fail@plt+0x24e8>
   131bc:	cmp	r0, #0
   131c0:	moveq	r0, r3
   131c4:	add	r3, r0, #8
   131c8:	push	{lr}		; (str lr, [sp, #-4]!)
   131cc:	lsr	lr, r1, #5
   131d0:	and	r1, r1, #31
   131d4:	ldr	ip, [r3, lr, lsl #2]
   131d8:	lsr	r0, ip, r1
   131dc:	eor	r2, r2, r0
   131e0:	and	r2, r2, #1
   131e4:	and	r0, r0, #1
   131e8:	eor	r1, ip, r2, lsl r1
   131ec:	str	r1, [r3, lr, lsl #2]
   131f0:	pop	{pc}		; (ldr pc, [sp], #4)
   131f4:	andeq	r9, r2, r8, lsr r1
   131f8:	ldr	r3, [pc, #16]	; 13210 <__assert_fail@plt+0x2504>
   131fc:	cmp	r0, #0
   13200:	movne	r3, r0
   13204:	ldr	r0, [r3, #4]
   13208:	str	r1, [r3, #4]
   1320c:	bx	lr
   13210:	andeq	r9, r2, r8, lsr r1
   13214:	ldr	r3, [pc, #44]	; 13248 <__assert_fail@plt+0x253c>
   13218:	cmp	r0, #0
   1321c:	moveq	r0, r3
   13220:	mov	ip, #10
   13224:	cmp	r2, #0
   13228:	cmpne	r1, #0
   1322c:	str	ip, [r0]
   13230:	beq	13240 <__assert_fail@plt+0x2534>
   13234:	str	r1, [r0, #40]	; 0x28
   13238:	str	r2, [r0, #44]	; 0x2c
   1323c:	bx	lr
   13240:	push	{r4, lr}
   13244:	bl	10d00 <abort@plt>
   13248:	andeq	r9, r2, r8, lsr r1
   1324c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13250:	sub	sp, sp, #24
   13254:	ldr	ip, [pc, #108]	; 132c8 <__assert_fail@plt+0x25bc>
   13258:	ldr	r4, [sp, #56]	; 0x38
   1325c:	mov	r9, r2
   13260:	cmp	r4, #0
   13264:	moveq	r4, ip
   13268:	mov	sl, r3
   1326c:	mov	r7, r0
   13270:	mov	r8, r1
   13274:	bl	10c58 <__errno_location@plt>
   13278:	ldr	r3, [r4, #44]	; 0x2c
   1327c:	mov	r1, r8
   13280:	ldr	r6, [r0]
   13284:	str	r3, [sp, #16]
   13288:	ldr	r2, [r4, #40]	; 0x28
   1328c:	add	r3, r4, #8
   13290:	str	r3, [sp, #8]
   13294:	str	r2, [sp, #12]
   13298:	ldr	r2, [r4, #4]
   1329c:	mov	r5, r0
   132a0:	str	r2, [sp, #4]
   132a4:	ldr	ip, [r4]
   132a8:	mov	r3, sl
   132ac:	mov	r2, r9
   132b0:	mov	r0, r7
   132b4:	str	ip, [sp]
   132b8:	bl	11bd0 <__assert_fail@plt+0xec4>
   132bc:	str	r6, [r5]
   132c0:	add	sp, sp, #24
   132c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132c8:	andeq	r9, r2, r8, lsr r1
   132cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132d0:	cmp	r2, #0
   132d4:	sub	sp, sp, #36	; 0x24
   132d8:	ldr	r4, [pc, #164]	; 13384 <__assert_fail@plt+0x2678>
   132dc:	mov	r8, r1
   132e0:	movne	r4, r2
   132e4:	mov	r7, r0
   132e8:	bl	10c58 <__errno_location@plt>
   132ec:	ldr	r3, [r4, #44]	; 0x2c
   132f0:	ldr	r5, [r4, #4]
   132f4:	add	r9, r4, #8
   132f8:	orr	r5, r5, #1
   132fc:	mov	r1, #0
   13300:	mov	r2, r7
   13304:	ldr	fp, [r0]
   13308:	str	r3, [sp, #16]
   1330c:	ldr	r3, [r4, #40]	; 0x28
   13310:	stmib	sp, {r5, r9}
   13314:	str	r3, [sp, #12]
   13318:	ldr	r3, [r4]
   1331c:	mov	r6, r0
   13320:	str	r3, [sp]
   13324:	mov	r0, r1
   13328:	mov	r3, r8
   1332c:	bl	11bd0 <__assert_fail@plt+0xec4>
   13330:	add	r1, r0, #1
   13334:	mov	r0, r1
   13338:	str	r1, [sp, #28]
   1333c:	bl	164ac <__assert_fail@plt+0x57a0>
   13340:	ldr	r3, [r4, #44]	; 0x2c
   13344:	ldr	r1, [sp, #28]
   13348:	str	r3, [sp, #16]
   1334c:	ldr	r3, [r4, #40]	; 0x28
   13350:	str	r5, [sp, #4]
   13354:	str	r3, [sp, #12]
   13358:	str	r9, [sp, #8]
   1335c:	ldr	ip, [r4]
   13360:	mov	r3, r8
   13364:	mov	r2, r7
   13368:	str	ip, [sp]
   1336c:	mov	sl, r0
   13370:	bl	11bd0 <__assert_fail@plt+0xec4>
   13374:	mov	r0, sl
   13378:	str	fp, [r6]
   1337c:	add	sp, sp, #36	; 0x24
   13380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13384:	andeq	r9, r2, r8, lsr r1
   13388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1338c:	cmp	r3, #0
   13390:	sub	sp, sp, #44	; 0x2c
   13394:	ldr	r4, [pc, #192]	; 1345c <__assert_fail@plt+0x2750>
   13398:	mov	r6, r2
   1339c:	movne	r4, r3
   133a0:	mov	r9, r1
   133a4:	mov	r8, r0
   133a8:	bl	10c58 <__errno_location@plt>
   133ac:	ldr	r3, [r4, #44]	; 0x2c
   133b0:	ldr	r5, [r4, #4]
   133b4:	add	sl, r4, #8
   133b8:	cmp	r6, #0
   133bc:	orreq	r5, r5, #1
   133c0:	mov	r1, #0
   133c4:	ldr	r2, [r0]
   133c8:	str	r3, [sp, #16]
   133cc:	ldr	r3, [r4, #40]	; 0x28
   133d0:	stmib	sp, {r5, sl}
   133d4:	str	r3, [sp, #12]
   133d8:	ldr	r3, [r4]
   133dc:	mov	r7, r0
   133e0:	str	r2, [sp, #28]
   133e4:	str	r3, [sp]
   133e8:	mov	r2, r8
   133ec:	mov	r3, r9
   133f0:	mov	r0, r1
   133f4:	bl	11bd0 <__assert_fail@plt+0xec4>
   133f8:	add	r1, r0, #1
   133fc:	mov	fp, r0
   13400:	mov	r0, r1
   13404:	str	r1, [sp, #36]	; 0x24
   13408:	bl	164ac <__assert_fail@plt+0x57a0>
   1340c:	ldr	r3, [r4, #44]	; 0x2c
   13410:	mov	r2, r8
   13414:	str	r3, [sp, #16]
   13418:	ldr	r3, [r4, #40]	; 0x28
   1341c:	str	r5, [sp, #4]
   13420:	str	r3, [sp, #12]
   13424:	str	sl, [sp, #8]
   13428:	ldr	ip, [r4]
   1342c:	ldr	r1, [sp, #36]	; 0x24
   13430:	mov	r3, r9
   13434:	str	ip, [sp]
   13438:	str	r0, [sp, #32]
   1343c:	bl	11bd0 <__assert_fail@plt+0xec4>
   13440:	ldr	r2, [sp, #28]
   13444:	cmp	r6, #0
   13448:	str	r2, [r7]
   1344c:	ldr	r0, [sp, #32]
   13450:	strne	fp, [r6]
   13454:	add	sp, sp, #44	; 0x2c
   13458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1345c:	andeq	r9, r2, r8, lsr r1
   13460:	push	{r4, r5, r6, r7, r8, lr}
   13464:	ldr	r6, [pc, #116]	; 134e0 <__assert_fail@plt+0x27d4>
   13468:	ldr	r3, [r6, #4]
   1346c:	ldr	r7, [r6]
   13470:	cmp	r3, #1
   13474:	movgt	r5, r7
   13478:	movgt	r4, #1
   1347c:	ble	1349c <__assert_fail@plt+0x2790>
   13480:	ldr	r0, [r5, #12]
   13484:	bl	16d58 <__assert_fail@plt+0x604c>
   13488:	ldr	r3, [r6, #4]
   1348c:	add	r4, r4, #1
   13490:	cmp	r3, r4
   13494:	add	r5, r5, #8
   13498:	bgt	13480 <__assert_fail@plt+0x2774>
   1349c:	ldr	r0, [r7, #4]
   134a0:	ldr	r4, [pc, #60]	; 134e4 <__assert_fail@plt+0x27d8>
   134a4:	cmp	r0, r4
   134a8:	beq	134bc <__assert_fail@plt+0x27b0>
   134ac:	bl	16d58 <__assert_fail@plt+0x604c>
   134b0:	mov	r3, #256	; 0x100
   134b4:	str	r4, [r6, #12]
   134b8:	str	r3, [r6, #8]
   134bc:	ldr	r4, [pc, #36]	; 134e8 <__assert_fail@plt+0x27dc>
   134c0:	cmp	r7, r4
   134c4:	beq	134d4 <__assert_fail@plt+0x27c8>
   134c8:	mov	r0, r7
   134cc:	bl	16d58 <__assert_fail@plt+0x604c>
   134d0:	str	r4, [r6]
   134d4:	mov	r3, #1
   134d8:	str	r3, [r6, #4]
   134dc:	pop	{r4, r5, r6, r7, r8, pc}
   134e0:	ldrdeq	r9, [r2], -r4
   134e4:	andeq	r9, r2, r8, ror #2
   134e8:	ldrdeq	r9, [r2], -ip
   134ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134f0:	sub	sp, sp, #44	; 0x2c
   134f4:	mov	r5, r0
   134f8:	mov	sl, r1
   134fc:	bl	10c58 <__errno_location@plt>
   13500:	ldr	r4, [pc, #400]	; 13698 <__assert_fail@plt+0x298c>
   13504:	cmn	r5, #-2147483647	; 0x80000001
   13508:	ldr	r6, [r4]
   1350c:	mov	r8, r0
   13510:	movne	r0, #0
   13514:	moveq	r0, #1
   13518:	ldr	r3, [r8]
   1351c:	orrs	r0, r0, r5, lsr #31
   13520:	str	r3, [sp, #24]
   13524:	bne	13694 <__assert_fail@plt+0x2988>
   13528:	ldr	r2, [r4, #4]
   1352c:	cmp	r5, r2
   13530:	blt	13590 <__assert_fail@plt+0x2884>
   13534:	add	r7, r4, #8
   13538:	cmp	r6, r7
   1353c:	str	r2, [sp, #36]	; 0x24
   13540:	beq	13664 <__assert_fail@plt+0x2958>
   13544:	mov	r3, #8
   13548:	sub	r2, r5, r2
   1354c:	mov	r0, r6
   13550:	str	r3, [sp]
   13554:	add	r2, r2, #1
   13558:	mvn	r3, #-2147483648	; 0x80000000
   1355c:	add	r1, sp, #36	; 0x24
   13560:	bl	166c8 <__assert_fail@plt+0x59bc>
   13564:	mov	r6, r0
   13568:	str	r0, [r4]
   1356c:	ldr	r0, [r4, #4]
   13570:	ldr	r2, [sp, #36]	; 0x24
   13574:	mov	r1, #0
   13578:	sub	r2, r2, r0
   1357c:	add	r0, r6, r0, lsl #3
   13580:	lsl	r2, r2, #3
   13584:	bl	10c70 <memset@plt>
   13588:	ldr	r3, [sp, #36]	; 0x24
   1358c:	str	r3, [r4, #4]
   13590:	ldr	r4, [pc, #260]	; 1369c <__assert_fail@plt+0x2990>
   13594:	add	fp, r6, r5, lsl #3
   13598:	ldr	r9, [r6, r5, lsl #3]
   1359c:	ldr	r0, [r4, #4]
   135a0:	ldr	r3, [r4]
   135a4:	ldr	r7, [fp, #4]
   135a8:	ldr	r1, [r4, #44]	; 0x2c
   135ac:	ldr	r2, [r4, #40]	; 0x28
   135b0:	orr	r0, r0, #1
   135b4:	str	r3, [sp]
   135b8:	add	r3, r4, #8
   135bc:	str	r0, [sp, #28]
   135c0:	str	r0, [sp, #4]
   135c4:	str	r1, [sp, #16]
   135c8:	str	r2, [sp, #12]
   135cc:	str	r3, [sp, #8]
   135d0:	mov	r0, r7
   135d4:	mov	r1, r9
   135d8:	mvn	r3, #0
   135dc:	mov	r2, sl
   135e0:	bl	11bd0 <__assert_fail@plt+0xec4>
   135e4:	cmp	r9, r0
   135e8:	bhi	13650 <__assert_fail@plt+0x2944>
   135ec:	add	r3, r4, #48	; 0x30
   135f0:	add	r9, r0, #1
   135f4:	cmp	r7, r3
   135f8:	str	r9, [r6, r5, lsl #3]
   135fc:	beq	13608 <__assert_fail@plt+0x28fc>
   13600:	mov	r0, r7
   13604:	bl	16d58 <__assert_fail@plt+0x604c>
   13608:	mov	r0, r9
   1360c:	bl	164ac <__assert_fail@plt+0x57a0>
   13610:	ldr	ip, [r4, #44]	; 0x2c
   13614:	ldr	r3, [r4]
   13618:	ldr	lr, [r4, #40]	; 0x28
   1361c:	ldr	r4, [pc, #124]	; 136a0 <__assert_fail@plt+0x2994>
   13620:	mov	r2, sl
   13624:	mov	r1, r9
   13628:	str	r0, [fp, #4]
   1362c:	str	r4, [sp, #8]
   13630:	ldr	r4, [sp, #28]
   13634:	str	r3, [sp]
   13638:	str	r4, [sp, #4]
   1363c:	str	ip, [sp, #16]
   13640:	str	lr, [sp, #12]
   13644:	mvn	r3, #0
   13648:	mov	r7, r0
   1364c:	bl	11bd0 <__assert_fail@plt+0xec4>
   13650:	ldr	r3, [sp, #24]
   13654:	mov	r0, r7
   13658:	str	r3, [r8]
   1365c:	add	sp, sp, #44	; 0x2c
   13660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13664:	mov	r3, #8
   13668:	sub	r2, r5, r2
   1366c:	str	r3, [sp]
   13670:	add	r1, sp, #36	; 0x24
   13674:	add	r2, r2, #1
   13678:	mvn	r3, #-2147483648	; 0x80000000
   1367c:	bl	166c8 <__assert_fail@plt+0x59bc>
   13680:	mov	r6, r0
   13684:	ldm	r7, {r0, r1}
   13688:	str	r6, [r4]
   1368c:	stm	r6, {r0, r1}
   13690:	b	1356c <__assert_fail@plt+0x2860>
   13694:	bl	10d00 <abort@plt>
   13698:	ldrdeq	r9, [r2], -r4
   1369c:	andeq	r9, r2, r8, lsr r1
   136a0:	andeq	r9, r2, r0, asr #2
   136a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a8:	sub	sp, sp, #52	; 0x34
   136ac:	mov	r5, r0
   136b0:	mov	sl, r1
   136b4:	mov	fp, r2
   136b8:	bl	10c58 <__errno_location@plt>
   136bc:	ldr	r4, [pc, #408]	; 1385c <__assert_fail@plt+0x2b50>
   136c0:	cmn	r5, #-2147483647	; 0x80000001
   136c4:	ldr	r6, [r4]
   136c8:	mov	r8, r0
   136cc:	movne	r0, #0
   136d0:	moveq	r0, #1
   136d4:	ldr	r3, [r8]
   136d8:	orrs	r0, r0, r5, lsr #31
   136dc:	str	r3, [sp, #28]
   136e0:	bne	13858 <__assert_fail@plt+0x2b4c>
   136e4:	ldr	r2, [r4, #4]
   136e8:	cmp	r5, r2
   136ec:	blt	1374c <__assert_fail@plt+0x2a40>
   136f0:	add	r7, r4, #8
   136f4:	cmp	r6, r7
   136f8:	str	r2, [sp, #44]	; 0x2c
   136fc:	beq	13828 <__assert_fail@plt+0x2b1c>
   13700:	mov	r3, #8
   13704:	sub	r2, r5, r2
   13708:	mov	r0, r6
   1370c:	str	r3, [sp]
   13710:	add	r2, r2, #1
   13714:	mvn	r3, #-2147483648	; 0x80000000
   13718:	add	r1, sp, #44	; 0x2c
   1371c:	bl	166c8 <__assert_fail@plt+0x59bc>
   13720:	mov	r6, r0
   13724:	str	r0, [r4]
   13728:	ldr	r0, [r4, #4]
   1372c:	ldr	r2, [sp, #44]	; 0x2c
   13730:	mov	r1, #0
   13734:	sub	r2, r2, r0
   13738:	add	r0, r6, r0, lsl #3
   1373c:	lsl	r2, r2, #3
   13740:	bl	10c70 <memset@plt>
   13744:	ldr	r3, [sp, #44]	; 0x2c
   13748:	str	r3, [r4, #4]
   1374c:	ldr	r4, [pc, #268]	; 13860 <__assert_fail@plt+0x2b54>
   13750:	add	r3, r6, r5, lsl #3
   13754:	str	r3, [sp, #32]
   13758:	ldr	r7, [r3, #4]
   1375c:	ldr	r0, [r4, #4]
   13760:	ldr	r3, [r4]
   13764:	ldr	r9, [r6, r5, lsl #3]
   13768:	ldr	r1, [r4, #44]	; 0x2c
   1376c:	ldr	r2, [r4, #40]	; 0x28
   13770:	orr	r0, r0, #1
   13774:	str	r3, [sp]
   13778:	add	r3, r4, #8
   1377c:	str	r0, [sp, #36]	; 0x24
   13780:	str	r0, [sp, #4]
   13784:	str	r1, [sp, #16]
   13788:	str	r2, [sp, #12]
   1378c:	str	r3, [sp, #8]
   13790:	mov	r0, r7
   13794:	mov	r1, r9
   13798:	mov	r3, fp
   1379c:	mov	r2, sl
   137a0:	bl	11bd0 <__assert_fail@plt+0xec4>
   137a4:	cmp	r9, r0
   137a8:	bhi	13814 <__assert_fail@plt+0x2b08>
   137ac:	add	r3, r4, #48	; 0x30
   137b0:	add	r9, r0, #1
   137b4:	cmp	r7, r3
   137b8:	str	r9, [r6, r5, lsl #3]
   137bc:	beq	137c8 <__assert_fail@plt+0x2abc>
   137c0:	mov	r0, r7
   137c4:	bl	16d58 <__assert_fail@plt+0x604c>
   137c8:	mov	r0, r9
   137cc:	bl	164ac <__assert_fail@plt+0x57a0>
   137d0:	ldr	ip, [sp, #32]
   137d4:	ldr	lr, [r4, #44]	; 0x2c
   137d8:	ldr	r5, [r4, #40]	; 0x28
   137dc:	mov	r3, fp
   137e0:	mov	r2, sl
   137e4:	mov	r1, r9
   137e8:	str	r0, [ip, #4]
   137ec:	ldr	ip, [r4]
   137f0:	ldr	r4, [pc, #108]	; 13864 <__assert_fail@plt+0x2b58>
   137f4:	str	lr, [sp, #16]
   137f8:	str	r4, [sp, #8]
   137fc:	ldr	r4, [sp, #36]	; 0x24
   13800:	str	r5, [sp, #12]
   13804:	str	r4, [sp, #4]
   13808:	str	ip, [sp]
   1380c:	mov	r7, r0
   13810:	bl	11bd0 <__assert_fail@plt+0xec4>
   13814:	ldr	r3, [sp, #28]
   13818:	mov	r0, r7
   1381c:	str	r3, [r8]
   13820:	add	sp, sp, #52	; 0x34
   13824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13828:	mov	r3, #8
   1382c:	sub	r2, r5, r2
   13830:	str	r3, [sp]
   13834:	add	r1, sp, #44	; 0x2c
   13838:	add	r2, r2, #1
   1383c:	mvn	r3, #-2147483648	; 0x80000000
   13840:	bl	166c8 <__assert_fail@plt+0x59bc>
   13844:	mov	r6, r0
   13848:	ldm	r7, {r0, r1}
   1384c:	str	r6, [r4]
   13850:	stm	r6, {r0, r1}
   13854:	b	13728 <__assert_fail@plt+0x2a1c>
   13858:	bl	10d00 <abort@plt>
   1385c:	ldrdeq	r9, [r2], -r4
   13860:	andeq	r9, r2, r8, lsr r1
   13864:	andeq	r9, r2, r0, asr #2
   13868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1386c:	sub	sp, sp, #44	; 0x2c
   13870:	mov	sl, r0
   13874:	bl	10c58 <__errno_location@plt>
   13878:	ldr	r4, [pc, #352]	; 139e0 <__assert_fail@plt+0x2cd4>
   1387c:	ldr	r2, [r4, #4]
   13880:	ldr	r5, [r4]
   13884:	cmp	r2, #0
   13888:	ldr	r3, [r0]
   1388c:	mov	r8, r0
   13890:	str	r3, [sp, #28]
   13894:	bgt	138f0 <__assert_fail@plt+0x2be4>
   13898:	add	r6, r4, #8
   1389c:	cmp	r5, r6
   138a0:	str	r2, [sp, #36]	; 0x24
   138a4:	beq	139b0 <__assert_fail@plt+0x2ca4>
   138a8:	mov	r3, #8
   138ac:	mov	r0, r5
   138b0:	str	r3, [sp]
   138b4:	rsb	r2, r2, #1
   138b8:	mvn	r3, #-2147483648	; 0x80000000
   138bc:	add	r1, sp, #36	; 0x24
   138c0:	bl	166c8 <__assert_fail@plt+0x59bc>
   138c4:	mov	r5, r0
   138c8:	str	r0, [r4]
   138cc:	ldr	r0, [r4, #4]
   138d0:	ldr	r2, [sp, #36]	; 0x24
   138d4:	mov	r1, #0
   138d8:	sub	r2, r2, r0
   138dc:	add	r0, r5, r0, lsl #3
   138e0:	lsl	r2, r2, #3
   138e4:	bl	10c70 <memset@plt>
   138e8:	ldr	r3, [sp, #36]	; 0x24
   138ec:	str	r3, [r4, #4]
   138f0:	ldr	r4, [pc, #236]	; 139e4 <__assert_fail@plt+0x2cd8>
   138f4:	ldr	r9, [r5]
   138f8:	ldr	r6, [r5, #4]
   138fc:	ldr	r7, [r4, #4]
   13900:	ldr	r1, [r4, #44]	; 0x2c
   13904:	ldr	r2, [r4, #40]	; 0x28
   13908:	ldr	r3, [r4]
   1390c:	orr	r7, r7, #1
   13910:	add	fp, r4, #8
   13914:	str	r1, [sp, #16]
   13918:	str	r2, [sp, #12]
   1391c:	str	r3, [sp]
   13920:	str	r7, [sp, #4]
   13924:	str	fp, [sp, #8]
   13928:	mov	r1, r9
   1392c:	mov	r0, r6
   13930:	mvn	r3, #0
   13934:	mov	r2, sl
   13938:	bl	11bd0 <__assert_fail@plt+0xec4>
   1393c:	cmp	r9, r0
   13940:	bhi	1399c <__assert_fail@plt+0x2c90>
   13944:	add	r3, r4, #48	; 0x30
   13948:	add	r9, r0, #1
   1394c:	cmp	r6, r3
   13950:	str	r9, [r5]
   13954:	beq	13960 <__assert_fail@plt+0x2c54>
   13958:	mov	r0, r6
   1395c:	bl	16d58 <__assert_fail@plt+0x604c>
   13960:	mov	r0, r9
   13964:	bl	164ac <__assert_fail@plt+0x57a0>
   13968:	ldr	ip, [r4, #44]	; 0x2c
   1396c:	ldr	r3, [r4]
   13970:	ldr	lr, [r4, #40]	; 0x28
   13974:	mov	r2, sl
   13978:	mov	r1, r9
   1397c:	str	r0, [r5, #4]
   13980:	str	r3, [sp]
   13984:	stmib	sp, {r7, fp}
   13988:	str	ip, [sp, #16]
   1398c:	str	lr, [sp, #12]
   13990:	mvn	r3, #0
   13994:	mov	r6, r0
   13998:	bl	11bd0 <__assert_fail@plt+0xec4>
   1399c:	ldr	r3, [sp, #28]
   139a0:	mov	r0, r6
   139a4:	str	r3, [r8]
   139a8:	add	sp, sp, #44	; 0x2c
   139ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b0:	mov	r3, #8
   139b4:	str	r3, [sp]
   139b8:	add	r1, sp, #36	; 0x24
   139bc:	rsb	r2, r2, #1
   139c0:	mvn	r3, #-2147483648	; 0x80000000
   139c4:	mov	r0, #0
   139c8:	bl	166c8 <__assert_fail@plt+0x59bc>
   139cc:	mov	r5, r0
   139d0:	ldm	r6, {r0, r1}
   139d4:	str	r5, [r4]
   139d8:	stm	r5, {r0, r1}
   139dc:	b	138cc <__assert_fail@plt+0x2bc0>
   139e0:	ldrdeq	r9, [r2], -r4
   139e4:	andeq	r9, r2, r8, lsr r1
   139e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139ec:	sub	sp, sp, #44	; 0x2c
   139f0:	mov	r9, r0
   139f4:	mov	sl, r1
   139f8:	bl	10c58 <__errno_location@plt>
   139fc:	ldr	r4, [pc, #364]	; 13b70 <__assert_fail@plt+0x2e64>
   13a00:	ldr	r2, [r4, #4]
   13a04:	ldr	r5, [r4]
   13a08:	cmp	r2, #0
   13a0c:	ldr	r3, [r0]
   13a10:	mov	r7, r0
   13a14:	str	r3, [sp, #24]
   13a18:	bgt	13a74 <__assert_fail@plt+0x2d68>
   13a1c:	add	r6, r4, #8
   13a20:	cmp	r5, r6
   13a24:	str	r2, [sp, #36]	; 0x24
   13a28:	beq	13b40 <__assert_fail@plt+0x2e34>
   13a2c:	mov	r3, #8
   13a30:	mov	r0, r5
   13a34:	str	r3, [sp]
   13a38:	rsb	r2, r2, #1
   13a3c:	mvn	r3, #-2147483648	; 0x80000000
   13a40:	add	r1, sp, #36	; 0x24
   13a44:	bl	166c8 <__assert_fail@plt+0x59bc>
   13a48:	mov	r5, r0
   13a4c:	str	r0, [r4]
   13a50:	ldr	r0, [r4, #4]
   13a54:	ldr	r2, [sp, #36]	; 0x24
   13a58:	mov	r1, #0
   13a5c:	sub	r2, r2, r0
   13a60:	add	r0, r5, r0, lsl #3
   13a64:	lsl	r2, r2, #3
   13a68:	bl	10c70 <memset@plt>
   13a6c:	ldr	r3, [sp, #36]	; 0x24
   13a70:	str	r3, [r4, #4]
   13a74:	ldr	r4, [pc, #248]	; 13b74 <__assert_fail@plt+0x2e68>
   13a78:	ldr	r8, [r5]
   13a7c:	ldr	r6, [r5, #4]
   13a80:	ldr	r0, [r4, #4]
   13a84:	ldr	r1, [r4, #44]	; 0x2c
   13a88:	ldr	r2, [r4, #40]	; 0x28
   13a8c:	ldr	r3, [r4]
   13a90:	orr	r0, r0, #1
   13a94:	add	fp, r4, #8
   13a98:	str	r0, [sp, #28]
   13a9c:	str	r0, [sp, #4]
   13aa0:	str	r1, [sp, #16]
   13aa4:	str	r2, [sp, #12]
   13aa8:	str	r3, [sp]
   13aac:	str	fp, [sp, #8]
   13ab0:	mov	r1, r8
   13ab4:	mov	r0, r6
   13ab8:	mov	r3, sl
   13abc:	mov	r2, r9
   13ac0:	bl	11bd0 <__assert_fail@plt+0xec4>
   13ac4:	cmp	r8, r0
   13ac8:	bhi	13b2c <__assert_fail@plt+0x2e20>
   13acc:	add	r3, r4, #48	; 0x30
   13ad0:	add	r8, r0, #1
   13ad4:	cmp	r6, r3
   13ad8:	str	r8, [r5]
   13adc:	beq	13ae8 <__assert_fail@plt+0x2ddc>
   13ae0:	mov	r0, r6
   13ae4:	bl	16d58 <__assert_fail@plt+0x604c>
   13ae8:	mov	r0, r8
   13aec:	bl	164ac <__assert_fail@plt+0x57a0>
   13af0:	ldr	lr, [r4, #44]	; 0x2c
   13af4:	ldr	ip, [r4]
   13af8:	mov	r3, sl
   13afc:	mov	r2, r9
   13b00:	mov	r1, r8
   13b04:	str	r0, [r5, #4]
   13b08:	ldr	r5, [r4, #40]	; 0x28
   13b0c:	ldr	r4, [sp, #28]
   13b10:	str	fp, [sp, #8]
   13b14:	str	r4, [sp, #4]
   13b18:	str	lr, [sp, #16]
   13b1c:	str	r5, [sp, #12]
   13b20:	str	ip, [sp]
   13b24:	mov	r6, r0
   13b28:	bl	11bd0 <__assert_fail@plt+0xec4>
   13b2c:	ldr	r3, [sp, #24]
   13b30:	mov	r0, r6
   13b34:	str	r3, [r7]
   13b38:	add	sp, sp, #44	; 0x2c
   13b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b40:	mov	r3, #8
   13b44:	str	r3, [sp]
   13b48:	add	r1, sp, #36	; 0x24
   13b4c:	rsb	r2, r2, #1
   13b50:	mvn	r3, #-2147483648	; 0x80000000
   13b54:	mov	r0, #0
   13b58:	bl	166c8 <__assert_fail@plt+0x59bc>
   13b5c:	mov	r5, r0
   13b60:	ldm	r6, {r0, r1}
   13b64:	str	r5, [r4]
   13b68:	stm	r5, {r0, r1}
   13b6c:	b	13a50 <__assert_fail@plt+0x2d44>
   13b70:	ldrdeq	r9, [r2], -r4
   13b74:	andeq	r9, r2, r8, lsr r1
   13b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b7c:	sub	sp, sp, #132	; 0x84
   13b80:	mov	r5, r1
   13b84:	mov	r4, r0
   13b88:	mov	r9, r2
   13b8c:	add	r0, sp, #80	; 0x50
   13b90:	mov	r2, #48	; 0x30
   13b94:	mov	r1, #0
   13b98:	bl	10c70 <memset@plt>
   13b9c:	cmp	r5, #10
   13ba0:	beq	13d58 <__assert_fail@plt+0x304c>
   13ba4:	add	lr, sp, #80	; 0x50
   13ba8:	str	r5, [sp, #80]	; 0x50
   13bac:	ldm	lr!, {r0, r1, r2, r3}
   13bb0:	add	ip, sp, #32
   13bb4:	ldr	r6, [pc, #416]	; 13d5c <__assert_fail@plt+0x3050>
   13bb8:	stmia	ip!, {r0, r1, r2, r3}
   13bbc:	ldm	lr!, {r0, r1, r2, r3}
   13bc0:	stmia	ip!, {r0, r1, r2, r3}
   13bc4:	ldm	lr, {r0, r1, r2, r3}
   13bc8:	stm	ip, {r0, r1, r2, r3}
   13bcc:	bl	10c58 <__errno_location@plt>
   13bd0:	cmn	r4, #-2147483647	; 0x80000001
   13bd4:	ldr	r5, [r6]
   13bd8:	mov	r7, r0
   13bdc:	movne	r0, #0
   13be0:	moveq	r0, #1
   13be4:	ldr	r3, [r7]
   13be8:	orrs	r0, r0, r4, lsr #31
   13bec:	str	r3, [sp, #24]
   13bf0:	bne	13d58 <__assert_fail@plt+0x304c>
   13bf4:	ldr	r2, [r6, #4]
   13bf8:	cmp	r4, r2
   13bfc:	blt	13c5c <__assert_fail@plt+0x2f50>
   13c00:	add	r8, r6, #8
   13c04:	cmp	r5, r8
   13c08:	str	r2, [sp, #80]	; 0x50
   13c0c:	beq	13d28 <__assert_fail@plt+0x301c>
   13c10:	mov	r3, #8
   13c14:	sub	r2, r4, r2
   13c18:	mov	r0, r5
   13c1c:	str	r3, [sp]
   13c20:	add	r2, r2, #1
   13c24:	add	r1, sp, #80	; 0x50
   13c28:	mvn	r3, #-2147483648	; 0x80000000
   13c2c:	bl	166c8 <__assert_fail@plt+0x59bc>
   13c30:	mov	r5, r0
   13c34:	str	r0, [r6]
   13c38:	ldr	r0, [r6, #4]
   13c3c:	ldr	r2, [sp, #80]	; 0x50
   13c40:	mov	r1, #0
   13c44:	sub	r2, r2, r0
   13c48:	add	r0, r5, r0, lsl #3
   13c4c:	lsl	r2, r2, #3
   13c50:	bl	10c70 <memset@plt>
   13c54:	ldr	r3, [sp, #80]	; 0x50
   13c58:	str	r3, [r6, #4]
   13c5c:	add	fp, r5, r4, lsl #3
   13c60:	ldr	r1, [sp, #36]	; 0x24
   13c64:	ldr	r8, [r5, r4, lsl #3]
   13c68:	ldr	r6, [fp, #4]
   13c6c:	ldr	r2, [sp, #72]	; 0x48
   13c70:	ldr	r3, [sp, #32]
   13c74:	ldr	ip, [sp, #76]	; 0x4c
   13c78:	orr	r1, r1, #1
   13c7c:	add	sl, sp, #40	; 0x28
   13c80:	str	r1, [sp, #28]
   13c84:	str	r1, [sp, #4]
   13c88:	str	r2, [sp, #12]
   13c8c:	str	r3, [sp]
   13c90:	mov	r0, r6
   13c94:	mov	r1, r8
   13c98:	str	ip, [sp, #16]
   13c9c:	str	sl, [sp, #8]
   13ca0:	mvn	r3, #0
   13ca4:	mov	r2, r9
   13ca8:	bl	11bd0 <__assert_fail@plt+0xec4>
   13cac:	cmp	r8, r0
   13cb0:	bhi	13d14 <__assert_fail@plt+0x3008>
   13cb4:	ldr	r3, [pc, #164]	; 13d60 <__assert_fail@plt+0x3054>
   13cb8:	add	r8, r0, #1
   13cbc:	cmp	r6, r3
   13cc0:	str	r8, [r5, r4, lsl #3]
   13cc4:	beq	13cd0 <__assert_fail@plt+0x2fc4>
   13cc8:	mov	r0, r6
   13ccc:	bl	16d58 <__assert_fail@plt+0x604c>
   13cd0:	mov	r0, r8
   13cd4:	bl	164ac <__assert_fail@plt+0x57a0>
   13cd8:	ldr	lr, [sp, #76]	; 0x4c
   13cdc:	ldr	r3, [sp, #32]
   13ce0:	ldr	ip, [sp, #72]	; 0x48
   13ce4:	ldr	r4, [sp, #28]
   13ce8:	mov	r2, r9
   13cec:	mov	r1, r8
   13cf0:	str	r0, [fp, #4]
   13cf4:	str	r3, [sp]
   13cf8:	str	sl, [sp, #8]
   13cfc:	str	r4, [sp, #4]
   13d00:	str	lr, [sp, #16]
   13d04:	str	ip, [sp, #12]
   13d08:	mvn	r3, #0
   13d0c:	mov	r6, r0
   13d10:	bl	11bd0 <__assert_fail@plt+0xec4>
   13d14:	ldr	r3, [sp, #24]
   13d18:	mov	r0, r6
   13d1c:	str	r3, [r7]
   13d20:	add	sp, sp, #132	; 0x84
   13d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d28:	mov	r3, #8
   13d2c:	sub	r2, r4, r2
   13d30:	add	r1, sp, #80	; 0x50
   13d34:	str	r3, [sp]
   13d38:	add	r2, r2, #1
   13d3c:	mvn	r3, #-2147483648	; 0x80000000
   13d40:	bl	166c8 <__assert_fail@plt+0x59bc>
   13d44:	mov	r5, r0
   13d48:	ldm	r8, {r0, r1}
   13d4c:	str	r5, [r6]
   13d50:	stm	r5, {r0, r1}
   13d54:	b	13c38 <__assert_fail@plt+0x2f2c>
   13d58:	bl	10d00 <abort@plt>
   13d5c:	ldrdeq	r9, [r2], -r4
   13d60:	andeq	r9, r2, r8, ror #2
   13d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d68:	sub	sp, sp, #132	; 0x84
   13d6c:	mov	r5, r1
   13d70:	mov	r4, r0
   13d74:	mov	r9, r2
   13d78:	add	r0, sp, #80	; 0x50
   13d7c:	mov	r2, #48	; 0x30
   13d80:	mov	r1, #0
   13d84:	mov	sl, r3
   13d88:	bl	10c70 <memset@plt>
   13d8c:	cmp	r5, #10
   13d90:	beq	13f4c <__assert_fail@plt+0x3240>
   13d94:	add	lr, sp, #80	; 0x50
   13d98:	str	r5, [sp, #80]	; 0x50
   13d9c:	ldm	lr!, {r0, r1, r2, r3}
   13da0:	add	ip, sp, #32
   13da4:	ldr	r6, [pc, #420]	; 13f50 <__assert_fail@plt+0x3244>
   13da8:	stmia	ip!, {r0, r1, r2, r3}
   13dac:	ldm	lr!, {r0, r1, r2, r3}
   13db0:	stmia	ip!, {r0, r1, r2, r3}
   13db4:	ldm	lr, {r0, r1, r2, r3}
   13db8:	stm	ip, {r0, r1, r2, r3}
   13dbc:	bl	10c58 <__errno_location@plt>
   13dc0:	cmn	r4, #-2147483647	; 0x80000001
   13dc4:	ldr	r5, [r6]
   13dc8:	mov	r7, r0
   13dcc:	movne	r0, #0
   13dd0:	moveq	r0, #1
   13dd4:	ldr	r3, [r7]
   13dd8:	orrs	r0, r0, r4, lsr #31
   13ddc:	str	r3, [sp, #24]
   13de0:	bne	13f4c <__assert_fail@plt+0x3240>
   13de4:	ldr	r2, [r6, #4]
   13de8:	cmp	r4, r2
   13dec:	blt	13e4c <__assert_fail@plt+0x3140>
   13df0:	add	r8, r6, #8
   13df4:	cmp	r5, r8
   13df8:	str	r2, [sp, #80]	; 0x50
   13dfc:	beq	13f1c <__assert_fail@plt+0x3210>
   13e00:	mov	r3, #8
   13e04:	sub	r2, r4, r2
   13e08:	mov	r0, r5
   13e0c:	str	r3, [sp]
   13e10:	add	r2, r2, #1
   13e14:	add	r1, sp, #80	; 0x50
   13e18:	mvn	r3, #-2147483648	; 0x80000000
   13e1c:	bl	166c8 <__assert_fail@plt+0x59bc>
   13e20:	mov	r5, r0
   13e24:	str	r0, [r6]
   13e28:	ldr	r0, [r6, #4]
   13e2c:	ldr	r2, [sp, #80]	; 0x50
   13e30:	mov	r1, #0
   13e34:	sub	r2, r2, r0
   13e38:	add	r0, r5, r0, lsl #3
   13e3c:	lsl	r2, r2, #3
   13e40:	bl	10c70 <memset@plt>
   13e44:	ldr	r3, [sp, #80]	; 0x50
   13e48:	str	r3, [r6, #4]
   13e4c:	add	fp, r5, r4, lsl #3
   13e50:	ldr	r3, [sp, #32]
   13e54:	ldr	r1, [sp, #36]	; 0x24
   13e58:	ldr	r8, [r5, r4, lsl #3]
   13e5c:	ldr	r6, [fp, #4]
   13e60:	ldr	r2, [sp, #72]	; 0x48
   13e64:	ldr	ip, [sp, #76]	; 0x4c
   13e68:	orr	r1, r1, #1
   13e6c:	str	r3, [sp]
   13e70:	add	r3, sp, #40	; 0x28
   13e74:	str	r1, [sp, #28]
   13e78:	str	r1, [sp, #4]
   13e7c:	str	r2, [sp, #12]
   13e80:	str	r3, [sp, #8]
   13e84:	mov	r0, r6
   13e88:	mov	r1, r8
   13e8c:	str	ip, [sp, #16]
   13e90:	mov	r3, sl
   13e94:	mov	r2, r9
   13e98:	bl	11bd0 <__assert_fail@plt+0xec4>
   13e9c:	cmp	r8, r0
   13ea0:	bhi	13f08 <__assert_fail@plt+0x31fc>
   13ea4:	ldr	r3, [pc, #168]	; 13f54 <__assert_fail@plt+0x3248>
   13ea8:	add	r8, r0, #1
   13eac:	cmp	r6, r3
   13eb0:	str	r8, [r5, r4, lsl #3]
   13eb4:	beq	13ec0 <__assert_fail@plt+0x31b4>
   13eb8:	mov	r0, r6
   13ebc:	bl	16d58 <__assert_fail@plt+0x604c>
   13ec0:	mov	r0, r8
   13ec4:	bl	164ac <__assert_fail@plt+0x57a0>
   13ec8:	add	lr, sp, #40	; 0x28
   13ecc:	ldr	ip, [sp, #76]	; 0x4c
   13ed0:	ldr	r4, [sp, #72]	; 0x48
   13ed4:	ldr	r5, [sp, #28]
   13ed8:	mov	r3, sl
   13edc:	mov	r2, r9
   13ee0:	mov	r1, r8
   13ee4:	str	r0, [fp, #4]
   13ee8:	str	lr, [sp, #8]
   13eec:	ldr	lr, [sp, #32]
   13ef0:	str	r5, [sp, #4]
   13ef4:	str	ip, [sp, #16]
   13ef8:	str	r4, [sp, #12]
   13efc:	str	lr, [sp]
   13f00:	mov	r6, r0
   13f04:	bl	11bd0 <__assert_fail@plt+0xec4>
   13f08:	ldr	r3, [sp, #24]
   13f0c:	mov	r0, r6
   13f10:	str	r3, [r7]
   13f14:	add	sp, sp, #132	; 0x84
   13f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f1c:	mov	r3, #8
   13f20:	sub	r2, r4, r2
   13f24:	add	r1, sp, #80	; 0x50
   13f28:	str	r3, [sp]
   13f2c:	add	r2, r2, #1
   13f30:	mvn	r3, #-2147483648	; 0x80000000
   13f34:	bl	166c8 <__assert_fail@plt+0x59bc>
   13f38:	mov	r5, r0
   13f3c:	ldm	r8, {r0, r1}
   13f40:	str	r5, [r6]
   13f44:	stm	r5, {r0, r1}
   13f48:	b	13e28 <__assert_fail@plt+0x311c>
   13f4c:	bl	10d00 <abort@plt>
   13f50:	ldrdeq	r9, [r2], -r4
   13f54:	andeq	r9, r2, r8, ror #2
   13f58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f5c:	sub	sp, sp, #124	; 0x7c
   13f60:	mov	r4, r0
   13f64:	mov	r9, r1
   13f68:	add	r0, sp, #72	; 0x48
   13f6c:	mov	r2, #48	; 0x30
   13f70:	mov	r1, #0
   13f74:	bl	10c70 <memset@plt>
   13f78:	cmp	r4, #10
   13f7c:	beq	14108 <__assert_fail@plt+0x33fc>
   13f80:	add	lr, sp, #72	; 0x48
   13f84:	str	r4, [sp, #72]	; 0x48
   13f88:	ldm	lr!, {r0, r1, r2, r3}
   13f8c:	add	ip, sp, #24
   13f90:	ldr	r5, [pc, #372]	; 1410c <__assert_fail@plt+0x3400>
   13f94:	stmia	ip!, {r0, r1, r2, r3}
   13f98:	ldm	lr!, {r0, r1, r2, r3}
   13f9c:	stmia	ip!, {r0, r1, r2, r3}
   13fa0:	ldm	lr, {r0, r1, r2, r3}
   13fa4:	stm	ip, {r0, r1, r2, r3}
   13fa8:	bl	10c58 <__errno_location@plt>
   13fac:	ldr	r2, [r5, #4]
   13fb0:	ldr	r4, [r5]
   13fb4:	cmp	r2, #0
   13fb8:	mov	r7, r0
   13fbc:	ldr	fp, [r0]
   13fc0:	bgt	1401c <__assert_fail@plt+0x3310>
   13fc4:	add	r6, r5, #8
   13fc8:	cmp	r4, r6
   13fcc:	str	r2, [sp, #72]	; 0x48
   13fd0:	beq	140d8 <__assert_fail@plt+0x33cc>
   13fd4:	mov	r3, #8
   13fd8:	mov	r0, r4
   13fdc:	str	r3, [sp]
   13fe0:	rsb	r2, r2, #1
   13fe4:	add	r1, sp, #72	; 0x48
   13fe8:	mvn	r3, #-2147483648	; 0x80000000
   13fec:	bl	166c8 <__assert_fail@plt+0x59bc>
   13ff0:	mov	r4, r0
   13ff4:	str	r0, [r5]
   13ff8:	ldr	r0, [r5, #4]
   13ffc:	ldr	r2, [sp, #72]	; 0x48
   14000:	mov	r1, #0
   14004:	sub	r2, r2, r0
   14008:	add	r0, r4, r0, lsl #3
   1400c:	lsl	r2, r2, #3
   14010:	bl	10c70 <memset@plt>
   14014:	ldr	r3, [sp, #72]	; 0x48
   14018:	str	r3, [r5, #4]
   1401c:	ldr	r6, [sp, #28]
   14020:	ldr	r8, [r4]
   14024:	ldr	r5, [r4, #4]
   14028:	ldr	r2, [sp, #64]	; 0x40
   1402c:	ldr	r3, [sp, #24]
   14030:	ldr	ip, [sp, #68]	; 0x44
   14034:	orr	r6, r6, #1
   14038:	add	sl, sp, #32
   1403c:	str	r2, [sp, #12]
   14040:	str	r3, [sp]
   14044:	str	r6, [sp, #4]
   14048:	mov	r1, r8
   1404c:	mov	r0, r5
   14050:	str	ip, [sp, #16]
   14054:	str	sl, [sp, #8]
   14058:	mvn	r3, #0
   1405c:	mov	r2, r9
   14060:	bl	11bd0 <__assert_fail@plt+0xec4>
   14064:	cmp	r8, r0
   14068:	bhi	140c8 <__assert_fail@plt+0x33bc>
   1406c:	ldr	r3, [pc, #156]	; 14110 <__assert_fail@plt+0x3404>
   14070:	add	r8, r0, #1
   14074:	cmp	r5, r3
   14078:	str	r8, [r4]
   1407c:	beq	14088 <__assert_fail@plt+0x337c>
   14080:	mov	r0, r5
   14084:	bl	16d58 <__assert_fail@plt+0x604c>
   14088:	mov	r0, r8
   1408c:	bl	164ac <__assert_fail@plt+0x57a0>
   14090:	ldr	lr, [sp, #68]	; 0x44
   14094:	ldr	r3, [sp, #24]
   14098:	ldr	ip, [sp, #64]	; 0x40
   1409c:	mov	r2, r9
   140a0:	mov	r1, r8
   140a4:	str	r0, [r4, #4]
   140a8:	str	r3, [sp]
   140ac:	str	sl, [sp, #8]
   140b0:	str	r6, [sp, #4]
   140b4:	str	lr, [sp, #16]
   140b8:	str	ip, [sp, #12]
   140bc:	mvn	r3, #0
   140c0:	mov	r5, r0
   140c4:	bl	11bd0 <__assert_fail@plt+0xec4>
   140c8:	mov	r0, r5
   140cc:	str	fp, [r7]
   140d0:	add	sp, sp, #124	; 0x7c
   140d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d8:	mov	r3, #8
   140dc:	add	r1, sp, #72	; 0x48
   140e0:	str	r3, [sp]
   140e4:	rsb	r2, r2, #1
   140e8:	mvn	r3, #-2147483648	; 0x80000000
   140ec:	mov	r0, #0
   140f0:	bl	166c8 <__assert_fail@plt+0x59bc>
   140f4:	mov	r4, r0
   140f8:	ldm	r6, {r0, r1}
   140fc:	str	r4, [r5]
   14100:	stm	r4, {r0, r1}
   14104:	b	13ff8 <__assert_fail@plt+0x32ec>
   14108:	bl	10d00 <abort@plt>
   1410c:	ldrdeq	r9, [r2], -r4
   14110:	andeq	r9, r2, r8, ror #2
   14114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14118:	sub	sp, sp, #132	; 0x84
   1411c:	mov	r4, r0
   14120:	mov	r9, r1
   14124:	mov	sl, r2
   14128:	add	r0, sp, #80	; 0x50
   1412c:	mov	r2, #48	; 0x30
   14130:	mov	r1, #0
   14134:	bl	10c70 <memset@plt>
   14138:	cmp	r4, #10
   1413c:	beq	142d0 <__assert_fail@plt+0x35c4>
   14140:	add	lr, sp, #80	; 0x50
   14144:	str	r4, [sp, #80]	; 0x50
   14148:	ldm	lr!, {r0, r1, r2, r3}
   1414c:	add	ip, sp, #32
   14150:	ldr	r5, [pc, #380]	; 142d4 <__assert_fail@plt+0x35c8>
   14154:	stmia	ip!, {r0, r1, r2, r3}
   14158:	ldm	lr!, {r0, r1, r2, r3}
   1415c:	stmia	ip!, {r0, r1, r2, r3}
   14160:	ldm	lr, {r0, r1, r2, r3}
   14164:	stm	ip, {r0, r1, r2, r3}
   14168:	bl	10c58 <__errno_location@plt>
   1416c:	ldr	r2, [r5, #4]
   14170:	ldr	r4, [r5]
   14174:	cmp	r2, #0
   14178:	ldr	r3, [r0]
   1417c:	mov	r7, r0
   14180:	str	r3, [sp, #28]
   14184:	bgt	141e0 <__assert_fail@plt+0x34d4>
   14188:	add	r6, r5, #8
   1418c:	cmp	r4, r6
   14190:	str	r2, [sp, #80]	; 0x50
   14194:	beq	142a0 <__assert_fail@plt+0x3594>
   14198:	mov	r3, #8
   1419c:	mov	r0, r4
   141a0:	str	r3, [sp]
   141a4:	rsb	r2, r2, #1
   141a8:	add	r1, sp, #80	; 0x50
   141ac:	mvn	r3, #-2147483648	; 0x80000000
   141b0:	bl	166c8 <__assert_fail@plt+0x59bc>
   141b4:	mov	r4, r0
   141b8:	str	r0, [r5]
   141bc:	ldr	r0, [r5, #4]
   141c0:	ldr	r2, [sp, #80]	; 0x50
   141c4:	mov	r1, #0
   141c8:	sub	r2, r2, r0
   141cc:	add	r0, r4, r0, lsl #3
   141d0:	lsl	r2, r2, #3
   141d4:	bl	10c70 <memset@plt>
   141d8:	ldr	r3, [sp, #80]	; 0x50
   141dc:	str	r3, [r5, #4]
   141e0:	ldr	r6, [sp, #36]	; 0x24
   141e4:	ldr	r8, [r4]
   141e8:	ldr	r5, [r4, #4]
   141ec:	ldr	r2, [sp, #72]	; 0x48
   141f0:	ldr	r3, [sp, #32]
   141f4:	ldr	ip, [sp, #76]	; 0x4c
   141f8:	orr	r6, r6, #1
   141fc:	add	fp, sp, #40	; 0x28
   14200:	str	r2, [sp, #12]
   14204:	str	r3, [sp]
   14208:	str	r6, [sp, #4]
   1420c:	mov	r1, r8
   14210:	mov	r0, r5
   14214:	str	ip, [sp, #16]
   14218:	str	fp, [sp, #8]
   1421c:	mov	r3, sl
   14220:	mov	r2, r9
   14224:	bl	11bd0 <__assert_fail@plt+0xec4>
   14228:	cmp	r8, r0
   1422c:	bhi	1428c <__assert_fail@plt+0x3580>
   14230:	ldr	r3, [pc, #160]	; 142d8 <__assert_fail@plt+0x35cc>
   14234:	add	r8, r0, #1
   14238:	cmp	r5, r3
   1423c:	str	r8, [r4]
   14240:	beq	1424c <__assert_fail@plt+0x3540>
   14244:	mov	r0, r5
   14248:	bl	16d58 <__assert_fail@plt+0x604c>
   1424c:	mov	r0, r8
   14250:	bl	164ac <__assert_fail@plt+0x57a0>
   14254:	ldr	ip, [sp, #76]	; 0x4c
   14258:	ldr	lr, [sp, #32]
   1425c:	mov	r3, sl
   14260:	mov	r2, r9
   14264:	mov	r1, r8
   14268:	str	r0, [r4, #4]
   1426c:	ldr	r4, [sp, #72]	; 0x48
   14270:	str	fp, [sp, #8]
   14274:	str	r6, [sp, #4]
   14278:	str	ip, [sp, #16]
   1427c:	str	r4, [sp, #12]
   14280:	str	lr, [sp]
   14284:	mov	r5, r0
   14288:	bl	11bd0 <__assert_fail@plt+0xec4>
   1428c:	ldr	r3, [sp, #28]
   14290:	mov	r0, r5
   14294:	str	r3, [r7]
   14298:	add	sp, sp, #132	; 0x84
   1429c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a0:	mov	r3, #8
   142a4:	add	r1, sp, #80	; 0x50
   142a8:	str	r3, [sp]
   142ac:	rsb	r2, r2, #1
   142b0:	mvn	r3, #-2147483648	; 0x80000000
   142b4:	mov	r0, #0
   142b8:	bl	166c8 <__assert_fail@plt+0x59bc>
   142bc:	mov	r4, r0
   142c0:	ldm	r6, {r0, r1}
   142c4:	str	r4, [r5]
   142c8:	stm	r4, {r0, r1}
   142cc:	b	141bc <__assert_fail@plt+0x34b0>
   142d0:	bl	10d00 <abort@plt>
   142d4:	ldrdeq	r9, [r2], -r4
   142d8:	andeq	r9, r2, r8, ror #2
   142dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142e0:	mov	r4, r2
   142e4:	ldr	lr, [pc, #432]	; 1449c <__assert_fail@plt+0x3790>
   142e8:	mov	sl, r0
   142ec:	mov	fp, r1
   142f0:	ldm	lr!, {r0, r1, r2, r3}
   142f4:	sub	sp, sp, #92	; 0x5c
   142f8:	add	ip, sp, #40	; 0x28
   142fc:	lsr	r7, r4, #5
   14300:	stmia	ip!, {r0, r1, r2, r3}
   14304:	add	r6, sp, #48	; 0x30
   14308:	ldm	lr!, {r0, r1, r2, r3}
   1430c:	and	r4, r4, #31
   14310:	ldr	r5, [pc, #392]	; 144a0 <__assert_fail@plt+0x3794>
   14314:	stmia	ip!, {r0, r1, r2, r3}
   14318:	ldm	lr, {r0, r1, r2, r3}
   1431c:	stm	ip, {r0, r1, r2, r3}
   14320:	ldr	r2, [r6, r7, lsl #2]
   14324:	lsr	r3, r2, r4
   14328:	eor	r3, r3, #1
   1432c:	and	r3, r3, #1
   14330:	eor	r4, r2, r3, lsl r4
   14334:	str	r4, [r6, r7, lsl #2]
   14338:	bl	10c58 <__errno_location@plt>
   1433c:	ldr	r2, [r5, #4]
   14340:	ldr	r4, [r5]
   14344:	cmp	r2, #0
   14348:	ldr	r3, [r0]
   1434c:	mov	r8, r0
   14350:	str	r3, [sp, #28]
   14354:	bgt	143b0 <__assert_fail@plt+0x36a4>
   14358:	add	r7, r5, #8
   1435c:	cmp	r4, r7
   14360:	str	r2, [sp, #36]	; 0x24
   14364:	beq	1446c <__assert_fail@plt+0x3760>
   14368:	mov	r3, #8
   1436c:	mov	r0, r4
   14370:	str	r3, [sp]
   14374:	rsb	r2, r2, #1
   14378:	mvn	r3, #-2147483648	; 0x80000000
   1437c:	add	r1, sp, #36	; 0x24
   14380:	bl	166c8 <__assert_fail@plt+0x59bc>
   14384:	mov	r4, r0
   14388:	str	r0, [r5]
   1438c:	ldr	r0, [r5, #4]
   14390:	ldr	r2, [sp, #36]	; 0x24
   14394:	mov	r1, #0
   14398:	sub	r2, r2, r0
   1439c:	add	r0, r4, r0, lsl #3
   143a0:	lsl	r2, r2, #3
   143a4:	bl	10c70 <memset@plt>
   143a8:	ldr	r3, [sp, #36]	; 0x24
   143ac:	str	r3, [r5, #4]
   143b0:	ldr	r7, [sp, #44]	; 0x2c
   143b4:	ldr	r9, [r4]
   143b8:	ldr	r5, [r4, #4]
   143bc:	ldr	r2, [sp, #80]	; 0x50
   143c0:	ldr	r3, [sp, #40]	; 0x28
   143c4:	ldr	ip, [sp, #84]	; 0x54
   143c8:	orr	r7, r7, #1
   143cc:	str	r2, [sp, #12]
   143d0:	str	r3, [sp]
   143d4:	str	r7, [sp, #4]
   143d8:	str	r6, [sp, #8]
   143dc:	mov	r1, r9
   143e0:	mov	r0, r5
   143e4:	str	ip, [sp, #16]
   143e8:	mov	r3, fp
   143ec:	mov	r2, sl
   143f0:	bl	11bd0 <__assert_fail@plt+0xec4>
   143f4:	cmp	r9, r0
   143f8:	bhi	14458 <__assert_fail@plt+0x374c>
   143fc:	ldr	r3, [pc, #160]	; 144a4 <__assert_fail@plt+0x3798>
   14400:	add	r9, r0, #1
   14404:	cmp	r5, r3
   14408:	str	r9, [r4]
   1440c:	beq	14418 <__assert_fail@plt+0x370c>
   14410:	mov	r0, r5
   14414:	bl	16d58 <__assert_fail@plt+0x604c>
   14418:	mov	r0, r9
   1441c:	bl	164ac <__assert_fail@plt+0x57a0>
   14420:	ldr	ip, [sp, #84]	; 0x54
   14424:	ldr	lr, [sp, #40]	; 0x28
   14428:	mov	r3, fp
   1442c:	mov	r2, sl
   14430:	mov	r1, r9
   14434:	str	r0, [r4, #4]
   14438:	ldr	r4, [sp, #80]	; 0x50
   1443c:	str	r6, [sp, #8]
   14440:	str	r7, [sp, #4]
   14444:	str	ip, [sp, #16]
   14448:	str	r4, [sp, #12]
   1444c:	str	lr, [sp]
   14450:	mov	r5, r0
   14454:	bl	11bd0 <__assert_fail@plt+0xec4>
   14458:	ldr	r3, [sp, #28]
   1445c:	mov	r0, r5
   14460:	str	r3, [r8]
   14464:	add	sp, sp, #92	; 0x5c
   14468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1446c:	mov	r3, #8
   14470:	str	r3, [sp]
   14474:	add	r1, sp, #36	; 0x24
   14478:	rsb	r2, r2, #1
   1447c:	mvn	r3, #-2147483648	; 0x80000000
   14480:	mov	r0, #0
   14484:	bl	166c8 <__assert_fail@plt+0x59bc>
   14488:	mov	r4, r0
   1448c:	ldm	r7, {r0, r1}
   14490:	str	r4, [r5]
   14494:	stm	r4, {r0, r1}
   14498:	b	1438c <__assert_fail@plt+0x3680>
   1449c:	andeq	r9, r2, r8, lsr r1
   144a0:	ldrdeq	r9, [r2], -r4
   144a4:	andeq	r9, r2, r8, ror #2
   144a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ac:	mov	r4, r1
   144b0:	ldr	lr, [pc, #420]	; 1465c <__assert_fail@plt+0x3950>
   144b4:	mov	r6, r0
   144b8:	sub	sp, sp, #84	; 0x54
   144bc:	ldm	lr!, {r0, r1, r2, r3}
   144c0:	add	ip, sp, #32
   144c4:	lsr	r8, r4, #5
   144c8:	add	r5, sp, #40	; 0x28
   144cc:	stmia	ip!, {r0, r1, r2, r3}
   144d0:	and	r4, r4, #31
   144d4:	ldm	lr!, {r0, r1, r2, r3}
   144d8:	ldr	r7, [pc, #384]	; 14660 <__assert_fail@plt+0x3954>
   144dc:	stmia	ip!, {r0, r1, r2, r3}
   144e0:	ldm	lr, {r0, r1, r2, r3}
   144e4:	stm	ip, {r0, r1, r2, r3}
   144e8:	ldr	r2, [r5, r8, lsl #2]
   144ec:	lsr	r3, r2, r4
   144f0:	eor	r3, r3, #1
   144f4:	and	r3, r3, #1
   144f8:	eor	r4, r2, r3, lsl r4
   144fc:	str	r4, [r5, r8, lsl #2]
   14500:	bl	10c58 <__errno_location@plt>
   14504:	ldr	r2, [r7, #4]
   14508:	ldr	r4, [r7]
   1450c:	cmp	r2, #0
   14510:	mov	r9, r0
   14514:	ldr	sl, [r0]
   14518:	bgt	14574 <__assert_fail@plt+0x3868>
   1451c:	add	r8, r7, #8
   14520:	cmp	r4, r8
   14524:	str	r2, [sp, #28]
   14528:	beq	1462c <__assert_fail@plt+0x3920>
   1452c:	mov	r3, #8
   14530:	mov	r0, r4
   14534:	str	r3, [sp]
   14538:	rsb	r2, r2, #1
   1453c:	mvn	r3, #-2147483648	; 0x80000000
   14540:	add	r1, sp, #28
   14544:	bl	166c8 <__assert_fail@plt+0x59bc>
   14548:	mov	r4, r0
   1454c:	str	r0, [r7]
   14550:	ldr	r0, [r7, #4]
   14554:	ldr	r2, [sp, #28]
   14558:	mov	r1, #0
   1455c:	sub	r2, r2, r0
   14560:	add	r0, r4, r0, lsl #3
   14564:	lsl	r2, r2, #3
   14568:	bl	10c70 <memset@plt>
   1456c:	ldr	r3, [sp, #28]
   14570:	str	r3, [r7, #4]
   14574:	ldr	r8, [sp, #36]	; 0x24
   14578:	ldr	fp, [r4]
   1457c:	ldr	r7, [r4, #4]
   14580:	ldr	r2, [sp, #72]	; 0x48
   14584:	ldr	r3, [sp, #32]
   14588:	ldr	ip, [sp, #76]	; 0x4c
   1458c:	orr	r8, r8, #1
   14590:	str	r2, [sp, #12]
   14594:	str	r3, [sp]
   14598:	str	r8, [sp, #4]
   1459c:	str	r5, [sp, #8]
   145a0:	mov	r1, fp
   145a4:	mov	r0, r7
   145a8:	str	ip, [sp, #16]
   145ac:	mvn	r3, #0
   145b0:	mov	r2, r6
   145b4:	bl	11bd0 <__assert_fail@plt+0xec4>
   145b8:	cmp	fp, r0
   145bc:	bhi	1461c <__assert_fail@plt+0x3910>
   145c0:	ldr	r3, [pc, #156]	; 14664 <__assert_fail@plt+0x3958>
   145c4:	add	fp, r0, #1
   145c8:	cmp	r7, r3
   145cc:	str	fp, [r4]
   145d0:	beq	145dc <__assert_fail@plt+0x38d0>
   145d4:	mov	r0, r7
   145d8:	bl	16d58 <__assert_fail@plt+0x604c>
   145dc:	mov	r0, fp
   145e0:	bl	164ac <__assert_fail@plt+0x57a0>
   145e4:	ldr	lr, [sp, #76]	; 0x4c
   145e8:	ldr	r3, [sp, #32]
   145ec:	ldr	ip, [sp, #72]	; 0x48
   145f0:	mov	r2, r6
   145f4:	mov	r1, fp
   145f8:	str	r0, [r4, #4]
   145fc:	str	r3, [sp]
   14600:	str	r5, [sp, #8]
   14604:	str	r8, [sp, #4]
   14608:	str	lr, [sp, #16]
   1460c:	str	ip, [sp, #12]
   14610:	mvn	r3, #0
   14614:	mov	r7, r0
   14618:	bl	11bd0 <__assert_fail@plt+0xec4>
   1461c:	mov	r0, r7
   14620:	str	sl, [r9]
   14624:	add	sp, sp, #84	; 0x54
   14628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1462c:	mov	r3, #8
   14630:	str	r3, [sp]
   14634:	add	r1, sp, #28
   14638:	rsb	r2, r2, #1
   1463c:	mvn	r3, #-2147483648	; 0x80000000
   14640:	mov	r0, #0
   14644:	bl	166c8 <__assert_fail@plt+0x59bc>
   14648:	mov	r4, r0
   1464c:	ldm	r8, {r0, r1}
   14650:	str	r4, [r7]
   14654:	stm	r4, {r0, r1}
   14658:	b	14550 <__assert_fail@plt+0x3844>
   1465c:	andeq	r9, r2, r8, lsr r1
   14660:	ldrdeq	r9, [r2], -r4
   14664:	andeq	r9, r2, r8, ror #2
   14668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1466c:	mov	r6, r0
   14670:	ldr	lr, [pc, #404]	; 1480c <__assert_fail@plt+0x3b00>
   14674:	sub	sp, sp, #84	; 0x54
   14678:	add	ip, sp, #32
   1467c:	ldm	lr!, {r0, r1, r2, r3}
   14680:	ldr	r5, [pc, #392]	; 14810 <__assert_fail@plt+0x3b04>
   14684:	stmia	ip!, {r0, r1, r2, r3}
   14688:	ldm	lr!, {r0, r1, r2, r3}
   1468c:	ldr	r4, [sp, #44]	; 0x2c
   14690:	stmia	ip!, {r0, r1, r2, r3}
   14694:	ldm	lr, {r0, r1, r2, r3}
   14698:	mvn	lr, r4
   1469c:	and	lr, lr, #67108864	; 0x4000000
   146a0:	eor	lr, lr, r4
   146a4:	stm	ip, {r0, r1, r2, r3}
   146a8:	str	lr, [sp, #44]	; 0x2c
   146ac:	bl	10c58 <__errno_location@plt>
   146b0:	ldr	r2, [r5, #4]
   146b4:	ldr	r4, [r5]
   146b8:	cmp	r2, #0
   146bc:	mov	r8, r0
   146c0:	ldr	sl, [r0]
   146c4:	bgt	14720 <__assert_fail@plt+0x3a14>
   146c8:	add	r7, r5, #8
   146cc:	cmp	r4, r7
   146d0:	str	r2, [sp, #28]
   146d4:	beq	147dc <__assert_fail@plt+0x3ad0>
   146d8:	mov	r3, #8
   146dc:	mov	r0, r4
   146e0:	str	r3, [sp]
   146e4:	rsb	r2, r2, #1
   146e8:	mvn	r3, #-2147483648	; 0x80000000
   146ec:	add	r1, sp, #28
   146f0:	bl	166c8 <__assert_fail@plt+0x59bc>
   146f4:	mov	r4, r0
   146f8:	str	r0, [r5]
   146fc:	ldr	r0, [r5, #4]
   14700:	ldr	r2, [sp, #28]
   14704:	mov	r1, #0
   14708:	sub	r2, r2, r0
   1470c:	add	r0, r4, r0, lsl #3
   14710:	lsl	r2, r2, #3
   14714:	bl	10c70 <memset@plt>
   14718:	ldr	r3, [sp, #28]
   1471c:	str	r3, [r5, #4]
   14720:	ldr	r7, [sp, #36]	; 0x24
   14724:	ldr	r9, [r4]
   14728:	ldr	r5, [r4, #4]
   1472c:	ldr	r2, [sp, #72]	; 0x48
   14730:	ldr	r3, [sp, #32]
   14734:	ldr	ip, [sp, #76]	; 0x4c
   14738:	orr	r7, r7, #1
   1473c:	add	fp, sp, #40	; 0x28
   14740:	str	r2, [sp, #12]
   14744:	str	r3, [sp]
   14748:	str	r7, [sp, #4]
   1474c:	mov	r1, r9
   14750:	mov	r0, r5
   14754:	str	ip, [sp, #16]
   14758:	str	fp, [sp, #8]
   1475c:	mvn	r3, #0
   14760:	mov	r2, r6
   14764:	bl	11bd0 <__assert_fail@plt+0xec4>
   14768:	cmp	r9, r0
   1476c:	bhi	147cc <__assert_fail@plt+0x3ac0>
   14770:	ldr	r3, [pc, #156]	; 14814 <__assert_fail@plt+0x3b08>
   14774:	add	r9, r0, #1
   14778:	cmp	r5, r3
   1477c:	str	r9, [r4]
   14780:	beq	1478c <__assert_fail@plt+0x3a80>
   14784:	mov	r0, r5
   14788:	bl	16d58 <__assert_fail@plt+0x604c>
   1478c:	mov	r0, r9
   14790:	bl	164ac <__assert_fail@plt+0x57a0>
   14794:	ldr	lr, [sp, #76]	; 0x4c
   14798:	ldr	r3, [sp, #32]
   1479c:	ldr	ip, [sp, #72]	; 0x48
   147a0:	mov	r2, r6
   147a4:	mov	r1, r9
   147a8:	str	r0, [r4, #4]
   147ac:	str	r3, [sp]
   147b0:	str	fp, [sp, #8]
   147b4:	str	r7, [sp, #4]
   147b8:	str	lr, [sp, #16]
   147bc:	str	ip, [sp, #12]
   147c0:	mvn	r3, #0
   147c4:	mov	r5, r0
   147c8:	bl	11bd0 <__assert_fail@plt+0xec4>
   147cc:	mov	r0, r5
   147d0:	str	sl, [r8]
   147d4:	add	sp, sp, #84	; 0x54
   147d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147dc:	mov	r3, #8
   147e0:	str	r3, [sp]
   147e4:	add	r1, sp, #28
   147e8:	rsb	r2, r2, #1
   147ec:	mvn	r3, #-2147483648	; 0x80000000
   147f0:	mov	r0, #0
   147f4:	bl	166c8 <__assert_fail@plt+0x59bc>
   147f8:	mov	r4, r0
   147fc:	ldm	r7, {r0, r1}
   14800:	str	r4, [r5]
   14804:	stm	r4, {r0, r1}
   14808:	b	146fc <__assert_fail@plt+0x39f0>
   1480c:	andeq	r9, r2, r8, lsr r1
   14810:	ldrdeq	r9, [r2], -r4
   14814:	andeq	r9, r2, r8, ror #2
   14818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1481c:	mov	r9, r0
   14820:	ldr	lr, [pc, #416]	; 149c8 <__assert_fail@plt+0x3cbc>
   14824:	mov	sl, r1
   14828:	sub	sp, sp, #92	; 0x5c
   1482c:	ldm	lr!, {r0, r1, r2, r3}
   14830:	add	ip, sp, #40	; 0x28
   14834:	ldr	r5, [pc, #400]	; 149cc <__assert_fail@plt+0x3cc0>
   14838:	stmia	ip!, {r0, r1, r2, r3}
   1483c:	ldm	lr!, {r0, r1, r2, r3}
   14840:	ldr	r4, [sp, #52]	; 0x34
   14844:	stmia	ip!, {r0, r1, r2, r3}
   14848:	ldm	lr, {r0, r1, r2, r3}
   1484c:	mvn	lr, r4
   14850:	and	lr, lr, #67108864	; 0x4000000
   14854:	eor	lr, lr, r4
   14858:	stm	ip, {r0, r1, r2, r3}
   1485c:	str	lr, [sp, #52]	; 0x34
   14860:	bl	10c58 <__errno_location@plt>
   14864:	ldr	r2, [r5, #4]
   14868:	ldr	r4, [r5]
   1486c:	cmp	r2, #0
   14870:	ldr	r3, [r0]
   14874:	mov	r7, r0
   14878:	str	r3, [sp, #28]
   1487c:	bgt	148d8 <__assert_fail@plt+0x3bcc>
   14880:	add	r6, r5, #8
   14884:	cmp	r4, r6
   14888:	str	r2, [sp, #36]	; 0x24
   1488c:	beq	14998 <__assert_fail@plt+0x3c8c>
   14890:	mov	r3, #8
   14894:	mov	r0, r4
   14898:	str	r3, [sp]
   1489c:	rsb	r2, r2, #1
   148a0:	mvn	r3, #-2147483648	; 0x80000000
   148a4:	add	r1, sp, #36	; 0x24
   148a8:	bl	166c8 <__assert_fail@plt+0x59bc>
   148ac:	mov	r4, r0
   148b0:	str	r0, [r5]
   148b4:	ldr	r0, [r5, #4]
   148b8:	ldr	r2, [sp, #36]	; 0x24
   148bc:	mov	r1, #0
   148c0:	sub	r2, r2, r0
   148c4:	add	r0, r4, r0, lsl #3
   148c8:	lsl	r2, r2, #3
   148cc:	bl	10c70 <memset@plt>
   148d0:	ldr	r3, [sp, #36]	; 0x24
   148d4:	str	r3, [r5, #4]
   148d8:	ldr	r6, [sp, #44]	; 0x2c
   148dc:	ldr	r8, [r4]
   148e0:	ldr	r5, [r4, #4]
   148e4:	ldr	r2, [sp, #80]	; 0x50
   148e8:	ldr	r3, [sp, #40]	; 0x28
   148ec:	ldr	ip, [sp, #84]	; 0x54
   148f0:	orr	r6, r6, #1
   148f4:	add	fp, sp, #48	; 0x30
   148f8:	str	r2, [sp, #12]
   148fc:	str	r3, [sp]
   14900:	str	r6, [sp, #4]
   14904:	mov	r1, r8
   14908:	mov	r0, r5
   1490c:	str	ip, [sp, #16]
   14910:	str	fp, [sp, #8]
   14914:	mov	r3, sl
   14918:	mov	r2, r9
   1491c:	bl	11bd0 <__assert_fail@plt+0xec4>
   14920:	cmp	r8, r0
   14924:	bhi	14984 <__assert_fail@plt+0x3c78>
   14928:	ldr	r3, [pc, #160]	; 149d0 <__assert_fail@plt+0x3cc4>
   1492c:	add	r8, r0, #1
   14930:	cmp	r5, r3
   14934:	str	r8, [r4]
   14938:	beq	14944 <__assert_fail@plt+0x3c38>
   1493c:	mov	r0, r5
   14940:	bl	16d58 <__assert_fail@plt+0x604c>
   14944:	mov	r0, r8
   14948:	bl	164ac <__assert_fail@plt+0x57a0>
   1494c:	ldr	ip, [sp, #84]	; 0x54
   14950:	ldr	lr, [sp, #40]	; 0x28
   14954:	mov	r3, sl
   14958:	mov	r2, r9
   1495c:	mov	r1, r8
   14960:	str	r0, [r4, #4]
   14964:	ldr	r4, [sp, #80]	; 0x50
   14968:	str	fp, [sp, #8]
   1496c:	str	r6, [sp, #4]
   14970:	str	ip, [sp, #16]
   14974:	str	r4, [sp, #12]
   14978:	str	lr, [sp]
   1497c:	mov	r5, r0
   14980:	bl	11bd0 <__assert_fail@plt+0xec4>
   14984:	ldr	r3, [sp, #28]
   14988:	mov	r0, r5
   1498c:	str	r3, [r7]
   14990:	add	sp, sp, #92	; 0x5c
   14994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14998:	mov	r3, #8
   1499c:	str	r3, [sp]
   149a0:	add	r1, sp, #36	; 0x24
   149a4:	rsb	r2, r2, #1
   149a8:	mvn	r3, #-2147483648	; 0x80000000
   149ac:	mov	r0, #0
   149b0:	bl	166c8 <__assert_fail@plt+0x59bc>
   149b4:	mov	r4, r0
   149b8:	ldm	r6, {r0, r1}
   149bc:	str	r4, [r5]
   149c0:	stm	r4, {r0, r1}
   149c4:	b	148b4 <__assert_fail@plt+0x3ba8>
   149c8:	andeq	r9, r2, r8, lsr r1
   149cc:	ldrdeq	r9, [r2], -r4
   149d0:	andeq	r9, r2, r8, ror #2
   149d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d8:	sub	sp, sp, #180	; 0xb4
   149dc:	mov	r6, r1
   149e0:	mov	r4, r0
   149e4:	mov	r9, r2
   149e8:	add	r0, sp, #80	; 0x50
   149ec:	mov	r2, #48	; 0x30
   149f0:	mov	r1, #0
   149f4:	bl	10c70 <memset@plt>
   149f8:	cmp	r6, #10
   149fc:	beq	14bdc <__assert_fail@plt+0x3ed0>
   14a00:	add	r5, sp, #80	; 0x50
   14a04:	str	r6, [sp, #80]	; 0x50
   14a08:	ldm	r5!, {r0, r1, r2, r3}
   14a0c:	add	ip, sp, #128	; 0x80
   14a10:	mov	r7, ip
   14a14:	add	lr, sp, #32
   14a18:	stmia	ip!, {r0, r1, r2, r3}
   14a1c:	mov	r8, #67108864	; 0x4000000
   14a20:	ldm	r5!, {r0, r1, r2, r3}
   14a24:	ldr	r6, [pc, #436]	; 14be0 <__assert_fail@plt+0x3ed4>
   14a28:	stmia	ip!, {r0, r1, r2, r3}
   14a2c:	ldm	r5, {r0, r1, r2, r3}
   14a30:	stm	ip, {r0, r1, r2, r3}
   14a34:	ldm	r7!, {r0, r1, r2, r3}
   14a38:	stmia	lr!, {r0, r1, r2, r3}
   14a3c:	ldm	r7!, {r0, r1, r2, r3}
   14a40:	str	r8, [sp, #44]	; 0x2c
   14a44:	stmia	lr!, {r0, r1, r2, r3}
   14a48:	ldm	ip, {r0, r1, r2, r3}
   14a4c:	stm	lr, {r0, r1, r2, r3}
   14a50:	bl	10c58 <__errno_location@plt>
   14a54:	cmn	r4, #-2147483647	; 0x80000001
   14a58:	ldr	r5, [r6]
   14a5c:	mov	r7, r0
   14a60:	movne	r0, #0
   14a64:	moveq	r0, #1
   14a68:	ldr	r3, [r7]
   14a6c:	orrs	r0, r0, r4, lsr #31
   14a70:	str	r3, [sp, #24]
   14a74:	bne	14bdc <__assert_fail@plt+0x3ed0>
   14a78:	ldr	r2, [r6, #4]
   14a7c:	cmp	r4, r2
   14a80:	blt	14ae0 <__assert_fail@plt+0x3dd4>
   14a84:	add	r8, r6, #8
   14a88:	cmp	r5, r8
   14a8c:	str	r2, [sp, #80]	; 0x50
   14a90:	beq	14bac <__assert_fail@plt+0x3ea0>
   14a94:	mov	r3, #8
   14a98:	sub	r2, r4, r2
   14a9c:	mov	r0, r5
   14aa0:	str	r3, [sp]
   14aa4:	add	r2, r2, #1
   14aa8:	add	r1, sp, #80	; 0x50
   14aac:	mvn	r3, #-2147483648	; 0x80000000
   14ab0:	bl	166c8 <__assert_fail@plt+0x59bc>
   14ab4:	mov	r5, r0
   14ab8:	str	r0, [r6]
   14abc:	ldr	r0, [r6, #4]
   14ac0:	ldr	r2, [sp, #80]	; 0x50
   14ac4:	mov	r1, #0
   14ac8:	sub	r2, r2, r0
   14acc:	add	r0, r5, r0, lsl #3
   14ad0:	lsl	r2, r2, #3
   14ad4:	bl	10c70 <memset@plt>
   14ad8:	ldr	r3, [sp, #80]	; 0x50
   14adc:	str	r3, [r6, #4]
   14ae0:	add	fp, r5, r4, lsl #3
   14ae4:	ldr	r1, [sp, #36]	; 0x24
   14ae8:	ldr	r8, [r5, r4, lsl #3]
   14aec:	ldr	r6, [fp, #4]
   14af0:	ldr	r2, [sp, #72]	; 0x48
   14af4:	ldr	r3, [sp, #32]
   14af8:	ldr	ip, [sp, #76]	; 0x4c
   14afc:	orr	r1, r1, #1
   14b00:	add	sl, sp, #40	; 0x28
   14b04:	str	r1, [sp, #28]
   14b08:	str	r1, [sp, #4]
   14b0c:	str	r2, [sp, #12]
   14b10:	str	r3, [sp]
   14b14:	mov	r0, r6
   14b18:	mov	r1, r8
   14b1c:	str	ip, [sp, #16]
   14b20:	str	sl, [sp, #8]
   14b24:	mvn	r3, #0
   14b28:	mov	r2, r9
   14b2c:	bl	11bd0 <__assert_fail@plt+0xec4>
   14b30:	cmp	r8, r0
   14b34:	bhi	14b98 <__assert_fail@plt+0x3e8c>
   14b38:	ldr	r3, [pc, #164]	; 14be4 <__assert_fail@plt+0x3ed8>
   14b3c:	add	r8, r0, #1
   14b40:	cmp	r6, r3
   14b44:	str	r8, [r5, r4, lsl #3]
   14b48:	beq	14b54 <__assert_fail@plt+0x3e48>
   14b4c:	mov	r0, r6
   14b50:	bl	16d58 <__assert_fail@plt+0x604c>
   14b54:	mov	r0, r8
   14b58:	bl	164ac <__assert_fail@plt+0x57a0>
   14b5c:	ldr	lr, [sp, #76]	; 0x4c
   14b60:	ldr	r3, [sp, #32]
   14b64:	ldr	ip, [sp, #72]	; 0x48
   14b68:	ldr	r4, [sp, #28]
   14b6c:	mov	r2, r9
   14b70:	mov	r1, r8
   14b74:	str	r0, [fp, #4]
   14b78:	str	r3, [sp]
   14b7c:	str	sl, [sp, #8]
   14b80:	str	r4, [sp, #4]
   14b84:	str	lr, [sp, #16]
   14b88:	str	ip, [sp, #12]
   14b8c:	mvn	r3, #0
   14b90:	mov	r6, r0
   14b94:	bl	11bd0 <__assert_fail@plt+0xec4>
   14b98:	ldr	r3, [sp, #24]
   14b9c:	mov	r0, r6
   14ba0:	str	r3, [r7]
   14ba4:	add	sp, sp, #180	; 0xb4
   14ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bac:	mov	r3, #8
   14bb0:	sub	r2, r4, r2
   14bb4:	add	r1, sp, #80	; 0x50
   14bb8:	str	r3, [sp]
   14bbc:	add	r2, r2, #1
   14bc0:	mvn	r3, #-2147483648	; 0x80000000
   14bc4:	bl	166c8 <__assert_fail@plt+0x59bc>
   14bc8:	mov	r5, r0
   14bcc:	ldm	r8, {r0, r1}
   14bd0:	str	r5, [r6]
   14bd4:	stm	r5, {r0, r1}
   14bd8:	b	14abc <__assert_fail@plt+0x3db0>
   14bdc:	bl	10d00 <abort@plt>
   14be0:	ldrdeq	r9, [r2], -r4
   14be4:	andeq	r9, r2, r8, ror #2
   14be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bec:	mov	r7, r1
   14bf0:	ldr	lr, [pc, #492]	; 14de4 <__assert_fail@plt+0x40d8>
   14bf4:	mov	r8, r2
   14bf8:	mov	r4, r0
   14bfc:	mov	fp, r3
   14c00:	ldm	lr!, {r0, r1, r2, r3}
   14c04:	sub	sp, sp, #100	; 0x64
   14c08:	add	ip, sp, #48	; 0x30
   14c0c:	mov	sl, #10
   14c10:	stmia	ip!, {r0, r1, r2, r3}
   14c14:	cmp	r8, #0
   14c18:	cmpne	r7, #0
   14c1c:	ldm	lr!, {r0, r1, r2, r3}
   14c20:	str	sl, [sp, #48]	; 0x30
   14c24:	stmia	ip!, {r0, r1, r2, r3}
   14c28:	ldm	lr, {r0, r1, r2, r3}
   14c2c:	stm	ip, {r0, r1, r2, r3}
   14c30:	beq	14de0 <__assert_fail@plt+0x40d4>
   14c34:	str	r7, [sp, #88]	; 0x58
   14c38:	str	r8, [sp, #92]	; 0x5c
   14c3c:	bl	10c58 <__errno_location@plt>
   14c40:	ldr	r6, [pc, #416]	; 14de8 <__assert_fail@plt+0x40dc>
   14c44:	cmn	r4, #-2147483647	; 0x80000001
   14c48:	ldr	r5, [r6]
   14c4c:	mov	r9, r0
   14c50:	movne	r0, #0
   14c54:	moveq	r0, #1
   14c58:	ldr	r3, [r9]
   14c5c:	orrs	r0, r0, r4, lsr #31
   14c60:	str	r3, [sp, #28]
   14c64:	bne	14de0 <__assert_fail@plt+0x40d4>
   14c68:	ldr	r2, [r6, #4]
   14c6c:	cmp	r4, r2
   14c70:	movlt	r3, sl
   14c74:	blt	14ce0 <__assert_fail@plt+0x3fd4>
   14c78:	add	r7, r6, #8
   14c7c:	cmp	r5, r7
   14c80:	str	r2, [sp, #44]	; 0x2c
   14c84:	beq	14db0 <__assert_fail@plt+0x40a4>
   14c88:	mov	r3, #8
   14c8c:	sub	r2, r4, r2
   14c90:	mov	r0, r5
   14c94:	str	r3, [sp]
   14c98:	add	r2, r2, #1
   14c9c:	mvn	r3, #-2147483648	; 0x80000000
   14ca0:	add	r1, sp, #44	; 0x2c
   14ca4:	bl	166c8 <__assert_fail@plt+0x59bc>
   14ca8:	mov	r5, r0
   14cac:	str	r0, [r6]
   14cb0:	ldr	r0, [r6, #4]
   14cb4:	ldr	r2, [sp, #44]	; 0x2c
   14cb8:	mov	r1, #0
   14cbc:	sub	r2, r2, r0
   14cc0:	add	r0, r5, r0, lsl #3
   14cc4:	lsl	r2, r2, #3
   14cc8:	bl	10c70 <memset@plt>
   14ccc:	ldr	r3, [sp, #48]	; 0x30
   14cd0:	ldr	r7, [sp, #88]	; 0x58
   14cd4:	ldr	r8, [sp, #92]	; 0x5c
   14cd8:	ldr	r2, [sp, #44]	; 0x2c
   14cdc:	str	r2, [r6, #4]
   14ce0:	add	r2, r5, r4, lsl #3
   14ce4:	mov	r1, r2
   14ce8:	str	r2, [sp, #32]
   14cec:	ldr	r2, [sp, #52]	; 0x34
   14cf0:	ldr	r6, [r1, #4]
   14cf4:	ldr	sl, [r5, r4, lsl #3]
   14cf8:	orr	r2, r2, #1
   14cfc:	str	r3, [sp]
   14d00:	add	r3, sp, #56	; 0x38
   14d04:	str	r2, [sp, #36]	; 0x24
   14d08:	str	r2, [sp, #4]
   14d0c:	str	r3, [sp, #8]
   14d10:	mov	r0, r6
   14d14:	str	r8, [sp, #16]
   14d18:	str	r7, [sp, #12]
   14d1c:	mov	r1, sl
   14d20:	mvn	r3, #0
   14d24:	mov	r2, fp
   14d28:	bl	11bd0 <__assert_fail@plt+0xec4>
   14d2c:	cmp	sl, r0
   14d30:	bhi	14d9c <__assert_fail@plt+0x4090>
   14d34:	ldr	r3, [pc, #176]	; 14dec <__assert_fail@plt+0x40e0>
   14d38:	add	r7, r0, #1
   14d3c:	cmp	r6, r3
   14d40:	str	r7, [r5, r4, lsl #3]
   14d44:	beq	14d50 <__assert_fail@plt+0x4044>
   14d48:	mov	r0, r6
   14d4c:	bl	16d58 <__assert_fail@plt+0x604c>
   14d50:	mov	r0, r7
   14d54:	bl	164ac <__assert_fail@plt+0x57a0>
   14d58:	ldr	r3, [sp, #32]
   14d5c:	ldr	lr, [sp, #92]	; 0x5c
   14d60:	ldr	ip, [sp, #88]	; 0x58
   14d64:	ldr	r4, [sp, #36]	; 0x24
   14d68:	mov	r2, fp
   14d6c:	mov	r1, r7
   14d70:	str	r0, [r3, #4]
   14d74:	add	r3, sp, #56	; 0x38
   14d78:	str	r3, [sp, #8]
   14d7c:	ldr	r3, [sp, #48]	; 0x30
   14d80:	str	r4, [sp, #4]
   14d84:	str	r3, [sp]
   14d88:	str	lr, [sp, #16]
   14d8c:	str	ip, [sp, #12]
   14d90:	mvn	r3, #0
   14d94:	mov	r6, r0
   14d98:	bl	11bd0 <__assert_fail@plt+0xec4>
   14d9c:	ldr	r3, [sp, #28]
   14da0:	mov	r0, r6
   14da4:	str	r3, [r9]
   14da8:	add	sp, sp, #100	; 0x64
   14dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db0:	mov	r3, #8
   14db4:	sub	r2, r4, r2
   14db8:	str	r3, [sp]
   14dbc:	add	r1, sp, #44	; 0x2c
   14dc0:	add	r2, r2, #1
   14dc4:	mvn	r3, #-2147483648	; 0x80000000
   14dc8:	bl	166c8 <__assert_fail@plt+0x59bc>
   14dcc:	mov	r5, r0
   14dd0:	ldm	r7, {r0, r1}
   14dd4:	str	r5, [r6]
   14dd8:	stm	r5, {r0, r1}
   14ddc:	b	14cb0 <__assert_fail@plt+0x3fa4>
   14de0:	bl	10d00 <abort@plt>
   14de4:	andeq	r9, r2, r8, lsr r1
   14de8:	ldrdeq	r9, [r2], -r4
   14dec:	andeq	r9, r2, r8, ror #2
   14df0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14df4:	mov	r7, r1
   14df8:	ldr	lr, [pc, #492]	; 14fec <__assert_fail@plt+0x42e0>
   14dfc:	mov	r8, r2
   14e00:	mov	r4, r0
   14e04:	mov	fp, r3
   14e08:	ldm	lr!, {r0, r1, r2, r3}
   14e0c:	sub	sp, sp, #100	; 0x64
   14e10:	add	ip, sp, #48	; 0x30
   14e14:	mov	sl, #10
   14e18:	stmia	ip!, {r0, r1, r2, r3}
   14e1c:	cmp	r8, #0
   14e20:	cmpne	r7, #0
   14e24:	ldm	lr!, {r0, r1, r2, r3}
   14e28:	str	sl, [sp, #48]	; 0x30
   14e2c:	stmia	ip!, {r0, r1, r2, r3}
   14e30:	ldm	lr, {r0, r1, r2, r3}
   14e34:	stm	ip, {r0, r1, r2, r3}
   14e38:	beq	14fe8 <__assert_fail@plt+0x42dc>
   14e3c:	str	r7, [sp, #88]	; 0x58
   14e40:	str	r8, [sp, #92]	; 0x5c
   14e44:	bl	10c58 <__errno_location@plt>
   14e48:	ldr	r6, [pc, #416]	; 14ff0 <__assert_fail@plt+0x42e4>
   14e4c:	cmn	r4, #-2147483647	; 0x80000001
   14e50:	ldr	r5, [r6]
   14e54:	mov	r9, r0
   14e58:	movne	r0, #0
   14e5c:	moveq	r0, #1
   14e60:	ldr	r3, [r9]
   14e64:	orrs	r0, r0, r4, lsr #31
   14e68:	str	r3, [sp, #28]
   14e6c:	bne	14fe8 <__assert_fail@plt+0x42dc>
   14e70:	ldr	r2, [r6, #4]
   14e74:	cmp	r4, r2
   14e78:	movlt	r3, sl
   14e7c:	blt	14ee8 <__assert_fail@plt+0x41dc>
   14e80:	add	r7, r6, #8
   14e84:	cmp	r5, r7
   14e88:	str	r2, [sp, #44]	; 0x2c
   14e8c:	beq	14fb8 <__assert_fail@plt+0x42ac>
   14e90:	mov	r3, #8
   14e94:	sub	r2, r4, r2
   14e98:	mov	r0, r5
   14e9c:	str	r3, [sp]
   14ea0:	add	r2, r2, #1
   14ea4:	mvn	r3, #-2147483648	; 0x80000000
   14ea8:	add	r1, sp, #44	; 0x2c
   14eac:	bl	166c8 <__assert_fail@plt+0x59bc>
   14eb0:	mov	r5, r0
   14eb4:	str	r0, [r6]
   14eb8:	ldr	r0, [r6, #4]
   14ebc:	ldr	r2, [sp, #44]	; 0x2c
   14ec0:	mov	r1, #0
   14ec4:	sub	r2, r2, r0
   14ec8:	add	r0, r5, r0, lsl #3
   14ecc:	lsl	r2, r2, #3
   14ed0:	bl	10c70 <memset@plt>
   14ed4:	ldr	r3, [sp, #48]	; 0x30
   14ed8:	ldr	r7, [sp, #88]	; 0x58
   14edc:	ldr	r8, [sp, #92]	; 0x5c
   14ee0:	ldr	r2, [sp, #44]	; 0x2c
   14ee4:	str	r2, [r6, #4]
   14ee8:	add	r2, r5, r4, lsl #3
   14eec:	mov	r1, r2
   14ef0:	str	r2, [sp, #32]
   14ef4:	ldr	r2, [sp, #52]	; 0x34
   14ef8:	ldr	r6, [r1, #4]
   14efc:	ldr	sl, [r5, r4, lsl #3]
   14f00:	orr	r2, r2, #1
   14f04:	str	r3, [sp]
   14f08:	add	r3, sp, #56	; 0x38
   14f0c:	str	r2, [sp, #36]	; 0x24
   14f10:	str	r2, [sp, #4]
   14f14:	str	r3, [sp, #8]
   14f18:	mov	r0, r6
   14f1c:	str	r8, [sp, #16]
   14f20:	str	r7, [sp, #12]
   14f24:	mov	r1, sl
   14f28:	ldr	r3, [sp, #136]	; 0x88
   14f2c:	mov	r2, fp
   14f30:	bl	11bd0 <__assert_fail@plt+0xec4>
   14f34:	cmp	sl, r0
   14f38:	bhi	14fa4 <__assert_fail@plt+0x4298>
   14f3c:	ldr	r3, [pc, #176]	; 14ff4 <__assert_fail@plt+0x42e8>
   14f40:	add	r7, r0, #1
   14f44:	cmp	r6, r3
   14f48:	str	r7, [r5, r4, lsl #3]
   14f4c:	beq	14f58 <__assert_fail@plt+0x424c>
   14f50:	mov	r0, r6
   14f54:	bl	16d58 <__assert_fail@plt+0x604c>
   14f58:	mov	r0, r7
   14f5c:	bl	164ac <__assert_fail@plt+0x57a0>
   14f60:	ldr	r3, [sp, #32]
   14f64:	ldr	lr, [sp, #92]	; 0x5c
   14f68:	ldr	ip, [sp, #88]	; 0x58
   14f6c:	ldr	r4, [sp, #36]	; 0x24
   14f70:	mov	r2, fp
   14f74:	mov	r1, r7
   14f78:	str	r0, [r3, #4]
   14f7c:	add	r3, sp, #56	; 0x38
   14f80:	str	r3, [sp, #8]
   14f84:	ldr	r3, [sp, #48]	; 0x30
   14f88:	str	r4, [sp, #4]
   14f8c:	str	r3, [sp]
   14f90:	str	lr, [sp, #16]
   14f94:	str	ip, [sp, #12]
   14f98:	ldr	r3, [sp, #136]	; 0x88
   14f9c:	mov	r6, r0
   14fa0:	bl	11bd0 <__assert_fail@plt+0xec4>
   14fa4:	ldr	r3, [sp, #28]
   14fa8:	mov	r0, r6
   14fac:	str	r3, [r9]
   14fb0:	add	sp, sp, #100	; 0x64
   14fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fb8:	mov	r3, #8
   14fbc:	sub	r2, r4, r2
   14fc0:	str	r3, [sp]
   14fc4:	add	r1, sp, #44	; 0x2c
   14fc8:	add	r2, r2, #1
   14fcc:	mvn	r3, #-2147483648	; 0x80000000
   14fd0:	bl	166c8 <__assert_fail@plt+0x59bc>
   14fd4:	mov	r5, r0
   14fd8:	ldm	r7, {r0, r1}
   14fdc:	str	r5, [r6]
   14fe0:	stm	r5, {r0, r1}
   14fe4:	b	14eb8 <__assert_fail@plt+0x41ac>
   14fe8:	bl	10d00 <abort@plt>
   14fec:	andeq	r9, r2, r8, lsr r1
   14ff0:	ldrdeq	r9, [r2], -r4
   14ff4:	andeq	r9, r2, r8, ror #2
   14ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ffc:	mov	r5, r0
   15000:	ldr	lr, [pc, #452]	; 151cc <__assert_fail@plt+0x44c0>
   15004:	mov	r6, r1
   15008:	mov	sl, r2
   1500c:	ldm	lr!, {r0, r1, r2, r3}
   15010:	sub	sp, sp, #92	; 0x5c
   15014:	add	ip, sp, #40	; 0x28
   15018:	cmp	r6, #0
   1501c:	cmpne	r5, #0
   15020:	stmia	ip!, {r0, r1, r2, r3}
   15024:	mov	r9, #10
   15028:	ldm	lr!, {r0, r1, r2, r3}
   1502c:	moveq	fp, #1
   15030:	movne	fp, #0
   15034:	str	r9, [sp, #40]	; 0x28
   15038:	stmia	ip!, {r0, r1, r2, r3}
   1503c:	ldm	lr, {r0, r1, r2, r3}
   15040:	stm	ip, {r0, r1, r2, r3}
   15044:	beq	151c8 <__assert_fail@plt+0x44bc>
   15048:	str	r5, [sp, #80]	; 0x50
   1504c:	str	r6, [sp, #84]	; 0x54
   15050:	bl	10c58 <__errno_location@plt>
   15054:	ldr	r7, [pc, #372]	; 151d0 <__assert_fail@plt+0x44c4>
   15058:	ldr	r2, [r7, #4]
   1505c:	ldr	r4, [r7]
   15060:	cmp	r2, #0
   15064:	ldr	r3, [r0]
   15068:	mov	r8, r0
   1506c:	str	r3, [sp, #24]
   15070:	movgt	r3, r9
   15074:	bgt	150dc <__assert_fail@plt+0x43d0>
   15078:	add	r5, r7, #8
   1507c:	cmp	r4, r5
   15080:	str	r2, [sp, #36]	; 0x24
   15084:	beq	15198 <__assert_fail@plt+0x448c>
   15088:	mov	r3, #8
   1508c:	mov	r0, r4
   15090:	str	r3, [sp]
   15094:	rsb	r2, r2, #1
   15098:	mvn	r3, #-2147483648	; 0x80000000
   1509c:	add	r1, sp, #36	; 0x24
   150a0:	bl	166c8 <__assert_fail@plt+0x59bc>
   150a4:	mov	r4, r0
   150a8:	str	r0, [r7]
   150ac:	ldr	r0, [r7, #4]
   150b0:	ldr	r2, [sp, #36]	; 0x24
   150b4:	mov	r1, #0
   150b8:	sub	r2, r2, r0
   150bc:	add	r0, r4, r0, lsl #3
   150c0:	lsl	r2, r2, #3
   150c4:	bl	10c70 <memset@plt>
   150c8:	ldr	r3, [sp, #40]	; 0x28
   150cc:	ldr	r5, [sp, #80]	; 0x50
   150d0:	ldr	r6, [sp, #84]	; 0x54
   150d4:	ldr	r2, [sp, #36]	; 0x24
   150d8:	str	r2, [r7, #4]
   150dc:	ldr	r2, [sp, #44]	; 0x2c
   150e0:	ldr	r9, [r4]
   150e4:	ldr	r7, [r4, #4]
   150e8:	orr	r2, r2, #1
   150ec:	add	fp, sp, #48	; 0x30
   150f0:	str	r2, [sp, #28]
   150f4:	str	r2, [sp, #4]
   150f8:	str	r3, [sp]
   150fc:	str	r6, [sp, #16]
   15100:	str	r5, [sp, #12]
   15104:	mov	r1, r9
   15108:	mov	r0, r7
   1510c:	str	fp, [sp, #8]
   15110:	mvn	r3, #0
   15114:	mov	r2, sl
   15118:	bl	11bd0 <__assert_fail@plt+0xec4>
   1511c:	cmp	r9, r0
   15120:	bhi	15184 <__assert_fail@plt+0x4478>
   15124:	ldr	r3, [pc, #168]	; 151d4 <__assert_fail@plt+0x44c8>
   15128:	add	r5, r0, #1
   1512c:	cmp	r7, r3
   15130:	str	r5, [r4]
   15134:	beq	15140 <__assert_fail@plt+0x4434>
   15138:	mov	r0, r7
   1513c:	bl	16d58 <__assert_fail@plt+0x604c>
   15140:	mov	r0, r5
   15144:	bl	164ac <__assert_fail@plt+0x57a0>
   15148:	ldr	lr, [sp, #84]	; 0x54
   1514c:	ldr	r3, [sp, #40]	; 0x28
   15150:	ldr	ip, [sp, #80]	; 0x50
   15154:	mov	r2, sl
   15158:	mov	r1, r5
   1515c:	str	r0, [r4, #4]
   15160:	ldr	r4, [sp, #28]
   15164:	str	r3, [sp]
   15168:	str	fp, [sp, #8]
   1516c:	str	r4, [sp, #4]
   15170:	str	lr, [sp, #16]
   15174:	str	ip, [sp, #12]
   15178:	mvn	r3, #0
   1517c:	mov	r7, r0
   15180:	bl	11bd0 <__assert_fail@plt+0xec4>
   15184:	ldr	r3, [sp, #24]
   15188:	mov	r0, r7
   1518c:	str	r3, [r8]
   15190:	add	sp, sp, #92	; 0x5c
   15194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15198:	mov	r3, #8
   1519c:	str	r3, [sp]
   151a0:	add	r1, sp, #36	; 0x24
   151a4:	rsb	r2, r2, #1
   151a8:	mov	r0, fp
   151ac:	mvn	r3, #-2147483648	; 0x80000000
   151b0:	bl	166c8 <__assert_fail@plt+0x59bc>
   151b4:	mov	r4, r0
   151b8:	ldm	r5, {r0, r1}
   151bc:	str	r4, [r7]
   151c0:	stm	r4, {r0, r1}
   151c4:	b	150ac <__assert_fail@plt+0x43a0>
   151c8:	bl	10d00 <abort@plt>
   151cc:	andeq	r9, r2, r8, lsr r1
   151d0:	ldrdeq	r9, [r2], -r4
   151d4:	andeq	r9, r2, r8, ror #2
   151d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151dc:	mov	r5, r0
   151e0:	ldr	lr, [pc, #464]	; 153b8 <__assert_fail@plt+0x46ac>
   151e4:	mov	r6, r1
   151e8:	mov	sl, r2
   151ec:	mov	fp, r3
   151f0:	ldm	lr!, {r0, r1, r2, r3}
   151f4:	sub	sp, sp, #92	; 0x5c
   151f8:	add	ip, sp, #40	; 0x28
   151fc:	cmp	r6, #0
   15200:	cmpne	r5, #0
   15204:	stmia	ip!, {r0, r1, r2, r3}
   15208:	moveq	r4, #1
   1520c:	ldm	lr!, {r0, r1, r2, r3}
   15210:	movne	r4, #0
   15214:	mov	r9, #10
   15218:	str	r4, [sp, #28]
   1521c:	stmia	ip!, {r0, r1, r2, r3}
   15220:	ldm	lr, {r0, r1, r2, r3}
   15224:	str	r9, [sp, #40]	; 0x28
   15228:	stm	ip, {r0, r1, r2, r3}
   1522c:	beq	153b4 <__assert_fail@plt+0x46a8>
   15230:	str	r5, [sp, #80]	; 0x50
   15234:	str	r6, [sp, #84]	; 0x54
   15238:	bl	10c58 <__errno_location@plt>
   1523c:	ldr	r7, [pc, #376]	; 153bc <__assert_fail@plt+0x46b0>
   15240:	ldr	r2, [r7, #4]
   15244:	ldr	r4, [r7]
   15248:	cmp	r2, #0
   1524c:	ldr	r3, [r0]
   15250:	mov	r8, r0
   15254:	str	r3, [sp, #24]
   15258:	movgt	r3, r9
   1525c:	bgt	152c4 <__assert_fail@plt+0x45b8>
   15260:	add	r5, r7, #8
   15264:	cmp	r4, r5
   15268:	str	r2, [sp, #36]	; 0x24
   1526c:	beq	15384 <__assert_fail@plt+0x4678>
   15270:	mov	r3, #8
   15274:	mov	r0, r4
   15278:	str	r3, [sp]
   1527c:	rsb	r2, r2, #1
   15280:	mvn	r3, #-2147483648	; 0x80000000
   15284:	add	r1, sp, #36	; 0x24
   15288:	bl	166c8 <__assert_fail@plt+0x59bc>
   1528c:	mov	r4, r0
   15290:	str	r0, [r7]
   15294:	ldr	r0, [r7, #4]
   15298:	ldr	r2, [sp, #36]	; 0x24
   1529c:	mov	r1, #0
   152a0:	sub	r2, r2, r0
   152a4:	add	r0, r4, r0, lsl #3
   152a8:	lsl	r2, r2, #3
   152ac:	bl	10c70 <memset@plt>
   152b0:	ldr	r3, [sp, #40]	; 0x28
   152b4:	ldr	r5, [sp, #80]	; 0x50
   152b8:	ldr	r6, [sp, #84]	; 0x54
   152bc:	ldr	r2, [sp, #36]	; 0x24
   152c0:	str	r2, [r7, #4]
   152c4:	ldr	r2, [sp, #44]	; 0x2c
   152c8:	ldr	r9, [r4]
   152cc:	ldr	r7, [r4, #4]
   152d0:	orr	r2, r2, #1
   152d4:	str	r3, [sp]
   152d8:	add	r3, sp, #48	; 0x30
   152dc:	str	r2, [sp, #28]
   152e0:	str	r2, [sp, #4]
   152e4:	str	r3, [sp, #8]
   152e8:	str	r6, [sp, #16]
   152ec:	str	r5, [sp, #12]
   152f0:	mov	r1, r9
   152f4:	mov	r0, r7
   152f8:	mov	r3, fp
   152fc:	mov	r2, sl
   15300:	bl	11bd0 <__assert_fail@plt+0xec4>
   15304:	cmp	r9, r0
   15308:	bhi	15370 <__assert_fail@plt+0x4664>
   1530c:	ldr	r3, [pc, #172]	; 153c0 <__assert_fail@plt+0x46b4>
   15310:	add	r5, r0, #1
   15314:	cmp	r7, r3
   15318:	str	r5, [r4]
   1531c:	beq	15328 <__assert_fail@plt+0x461c>
   15320:	mov	r0, r7
   15324:	bl	16d58 <__assert_fail@plt+0x604c>
   15328:	mov	r0, r5
   1532c:	bl	164ac <__assert_fail@plt+0x57a0>
   15330:	add	lr, sp, #48	; 0x30
   15334:	ldr	ip, [sp, #84]	; 0x54
   15338:	mov	r1, r5
   1533c:	ldr	r5, [sp, #28]
   15340:	mov	r3, fp
   15344:	mov	r2, sl
   15348:	str	r0, [r4, #4]
   1534c:	ldr	r4, [sp, #80]	; 0x50
   15350:	str	lr, [sp, #8]
   15354:	ldr	lr, [sp, #40]	; 0x28
   15358:	str	r5, [sp, #4]
   1535c:	str	ip, [sp, #16]
   15360:	str	r4, [sp, #12]
   15364:	str	lr, [sp]
   15368:	mov	r7, r0
   1536c:	bl	11bd0 <__assert_fail@plt+0xec4>
   15370:	ldr	r3, [sp, #24]
   15374:	mov	r0, r7
   15378:	str	r3, [r8]
   1537c:	add	sp, sp, #92	; 0x5c
   15380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15384:	mov	r3, #8
   15388:	str	r3, [sp]
   1538c:	add	r1, sp, #36	; 0x24
   15390:	rsb	r2, r2, #1
   15394:	ldr	r0, [sp, #28]
   15398:	mvn	r3, #-2147483648	; 0x80000000
   1539c:	bl	166c8 <__assert_fail@plt+0x59bc>
   153a0:	mov	r4, r0
   153a4:	ldm	r5, {r0, r1}
   153a8:	str	r4, [r7]
   153ac:	stm	r4, {r0, r1}
   153b0:	b	15294 <__assert_fail@plt+0x4588>
   153b4:	bl	10d00 <abort@plt>
   153b8:	andeq	r9, r2, r8, lsr r1
   153bc:	ldrdeq	r9, [r2], -r4
   153c0:	andeq	r9, r2, r8, ror #2
   153c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c8:	sub	sp, sp, #52	; 0x34
   153cc:	mov	r5, r0
   153d0:	mov	sl, r1
   153d4:	mov	fp, r2
   153d8:	bl	10c58 <__errno_location@plt>
   153dc:	ldr	r4, [pc, #404]	; 15578 <__assert_fail@plt+0x486c>
   153e0:	cmn	r5, #-2147483647	; 0x80000001
   153e4:	ldr	r6, [r4]
   153e8:	mov	r8, r0
   153ec:	movne	r0, #0
   153f0:	moveq	r0, #1
   153f4:	ldr	r3, [r8]
   153f8:	orrs	r0, r0, r5, lsr #31
   153fc:	str	r3, [sp, #28]
   15400:	bne	15574 <__assert_fail@plt+0x4868>
   15404:	ldr	r2, [r4, #4]
   15408:	cmp	r5, r2
   1540c:	blt	1546c <__assert_fail@plt+0x4760>
   15410:	add	r7, r4, #8
   15414:	cmp	r6, r7
   15418:	str	r2, [sp, #44]	; 0x2c
   1541c:	beq	15544 <__assert_fail@plt+0x4838>
   15420:	mov	r3, #8
   15424:	sub	r2, r5, r2
   15428:	mov	r0, r6
   1542c:	str	r3, [sp]
   15430:	add	r2, r2, #1
   15434:	mvn	r3, #-2147483648	; 0x80000000
   15438:	add	r1, sp, #44	; 0x2c
   1543c:	bl	166c8 <__assert_fail@plt+0x59bc>
   15440:	mov	r6, r0
   15444:	str	r0, [r4]
   15448:	ldr	r0, [r4, #4]
   1544c:	ldr	r2, [sp, #44]	; 0x2c
   15450:	mov	r1, #0
   15454:	sub	r2, r2, r0
   15458:	add	r0, r6, r0, lsl #3
   1545c:	lsl	r2, r2, #3
   15460:	bl	10c70 <memset@plt>
   15464:	ldr	r3, [sp, #44]	; 0x2c
   15468:	str	r3, [r4, #4]
   1546c:	ldr	r2, [r4, #56]	; 0x38
   15470:	add	r3, r6, r5, lsl #3
   15474:	ldr	r1, [r4, #20]
   15478:	ldr	r7, [r3, #4]
   1547c:	ldr	r9, [r6, r5, lsl #3]
   15480:	ldr	ip, [r4, #60]	; 0x3c
   15484:	str	r3, [sp, #32]
   15488:	ldr	r3, [r4, #16]
   1548c:	str	r2, [sp, #12]
   15490:	ldr	r2, [pc, #228]	; 1557c <__assert_fail@plt+0x4870>
   15494:	orr	r1, r1, #1
   15498:	str	r1, [sp, #36]	; 0x24
   1549c:	str	r1, [sp, #4]
   154a0:	str	r2, [sp, #8]
   154a4:	str	r3, [sp]
   154a8:	mov	r0, r7
   154ac:	mov	r1, r9
   154b0:	str	ip, [sp, #16]
   154b4:	mov	r3, fp
   154b8:	mov	r2, sl
   154bc:	bl	11bd0 <__assert_fail@plt+0xec4>
   154c0:	cmp	r9, r0
   154c4:	bhi	15530 <__assert_fail@plt+0x4824>
   154c8:	ldr	r3, [pc, #176]	; 15580 <__assert_fail@plt+0x4874>
   154cc:	add	r9, r0, #1
   154d0:	cmp	r7, r3
   154d4:	str	r9, [r6, r5, lsl #3]
   154d8:	beq	154e4 <__assert_fail@plt+0x47d8>
   154dc:	mov	r0, r7
   154e0:	bl	16d58 <__assert_fail@plt+0x604c>
   154e4:	mov	r0, r9
   154e8:	bl	164ac <__assert_fail@plt+0x57a0>
   154ec:	ldr	ip, [sp, #32]
   154f0:	ldr	lr, [r4, #60]	; 0x3c
   154f4:	ldr	r5, [r4, #56]	; 0x38
   154f8:	mov	r3, fp
   154fc:	mov	r2, sl
   15500:	mov	r1, r9
   15504:	str	r0, [ip, #4]
   15508:	ldr	ip, [r4, #16]
   1550c:	ldr	r4, [pc, #104]	; 1557c <__assert_fail@plt+0x4870>
   15510:	str	lr, [sp, #16]
   15514:	str	r4, [sp, #8]
   15518:	ldr	r4, [sp, #36]	; 0x24
   1551c:	str	r5, [sp, #12]
   15520:	str	r4, [sp, #4]
   15524:	str	ip, [sp]
   15528:	mov	r7, r0
   1552c:	bl	11bd0 <__assert_fail@plt+0xec4>
   15530:	ldr	r3, [sp, #28]
   15534:	mov	r0, r7
   15538:	str	r3, [r8]
   1553c:	add	sp, sp, #52	; 0x34
   15540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15544:	mov	r3, #8
   15548:	sub	r2, r5, r2
   1554c:	str	r3, [sp]
   15550:	add	r1, sp, #44	; 0x2c
   15554:	add	r2, r2, #1
   15558:	mvn	r3, #-2147483648	; 0x80000000
   1555c:	bl	166c8 <__assert_fail@plt+0x59bc>
   15560:	mov	r6, r0
   15564:	ldm	r7, {r0, r1}
   15568:	str	r6, [r4]
   1556c:	stm	r6, {r0, r1}
   15570:	b	15448 <__assert_fail@plt+0x473c>
   15574:	bl	10d00 <abort@plt>
   15578:	ldrdeq	r9, [r2], -r4
   1557c:	andeq	r9, r2, ip, ror #1
   15580:	andeq	r9, r2, r8, ror #2
   15584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15588:	sub	sp, sp, #44	; 0x2c
   1558c:	mov	r9, r0
   15590:	mov	sl, r1
   15594:	bl	10c58 <__errno_location@plt>
   15598:	ldr	r4, [pc, #360]	; 15708 <__assert_fail@plt+0x49fc>
   1559c:	ldr	r2, [r4, #4]
   155a0:	ldr	r5, [r4]
   155a4:	cmp	r2, #0
   155a8:	ldr	r3, [r0]
   155ac:	mov	r7, r0
   155b0:	str	r3, [sp, #24]
   155b4:	bgt	15610 <__assert_fail@plt+0x4904>
   155b8:	add	r6, r4, #8
   155bc:	cmp	r5, r6
   155c0:	str	r2, [sp, #36]	; 0x24
   155c4:	beq	156d8 <__assert_fail@plt+0x49cc>
   155c8:	mov	r3, #8
   155cc:	mov	r0, r5
   155d0:	str	r3, [sp]
   155d4:	rsb	r2, r2, #1
   155d8:	mvn	r3, #-2147483648	; 0x80000000
   155dc:	add	r1, sp, #36	; 0x24
   155e0:	bl	166c8 <__assert_fail@plt+0x59bc>
   155e4:	mov	r5, r0
   155e8:	str	r0, [r4]
   155ec:	ldr	r0, [r4, #4]
   155f0:	ldr	r2, [sp, #36]	; 0x24
   155f4:	mov	r1, #0
   155f8:	sub	r2, r2, r0
   155fc:	add	r0, r5, r0, lsl #3
   15600:	lsl	r2, r2, #3
   15604:	bl	10c70 <memset@plt>
   15608:	ldr	r3, [sp, #36]	; 0x24
   1560c:	str	r3, [r4, #4]
   15610:	ldr	r1, [r4, #20]
   15614:	ldr	r8, [r5]
   15618:	ldr	r6, [r5, #4]
   1561c:	ldr	r2, [r4, #56]	; 0x38
   15620:	ldr	r3, [r4, #16]
   15624:	ldr	ip, [r4, #60]	; 0x3c
   15628:	ldr	fp, [pc, #220]	; 1570c <__assert_fail@plt+0x4a00>
   1562c:	orr	r1, r1, #1
   15630:	str	r1, [sp, #28]
   15634:	str	r1, [sp, #4]
   15638:	str	r2, [sp, #12]
   1563c:	str	r3, [sp]
   15640:	mov	r1, r8
   15644:	mov	r0, r6
   15648:	str	ip, [sp, #16]
   1564c:	str	fp, [sp, #8]
   15650:	mov	r3, sl
   15654:	mov	r2, r9
   15658:	bl	11bd0 <__assert_fail@plt+0xec4>
   1565c:	cmp	r8, r0
   15660:	bhi	156c4 <__assert_fail@plt+0x49b8>
   15664:	ldr	r3, [pc, #164]	; 15710 <__assert_fail@plt+0x4a04>
   15668:	add	r8, r0, #1
   1566c:	cmp	r6, r3
   15670:	str	r8, [r5]
   15674:	beq	15680 <__assert_fail@plt+0x4974>
   15678:	mov	r0, r6
   1567c:	bl	16d58 <__assert_fail@plt+0x604c>
   15680:	mov	r0, r8
   15684:	bl	164ac <__assert_fail@plt+0x57a0>
   15688:	ldr	lr, [r4, #60]	; 0x3c
   1568c:	ldr	ip, [r4, #16]
   15690:	mov	r3, sl
   15694:	mov	r2, r9
   15698:	mov	r1, r8
   1569c:	str	r0, [r5, #4]
   156a0:	ldr	r5, [r4, #56]	; 0x38
   156a4:	ldr	r4, [sp, #28]
   156a8:	str	fp, [sp, #8]
   156ac:	str	r4, [sp, #4]
   156b0:	str	lr, [sp, #16]
   156b4:	str	r5, [sp, #12]
   156b8:	str	ip, [sp]
   156bc:	mov	r6, r0
   156c0:	bl	11bd0 <__assert_fail@plt+0xec4>
   156c4:	ldr	r3, [sp, #24]
   156c8:	mov	r0, r6
   156cc:	str	r3, [r7]
   156d0:	add	sp, sp, #44	; 0x2c
   156d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156d8:	mov	r3, #8
   156dc:	str	r3, [sp]
   156e0:	add	r1, sp, #36	; 0x24
   156e4:	rsb	r2, r2, #1
   156e8:	mvn	r3, #-2147483648	; 0x80000000
   156ec:	mov	r0, #0
   156f0:	bl	166c8 <__assert_fail@plt+0x59bc>
   156f4:	mov	r5, r0
   156f8:	ldm	r6, {r0, r1}
   156fc:	str	r5, [r4]
   15700:	stm	r5, {r0, r1}
   15704:	b	155ec <__assert_fail@plt+0x48e0>
   15708:	ldrdeq	r9, [r2], -r4
   1570c:	andeq	r9, r2, ip, ror #1
   15710:	andeq	r9, r2, r8, ror #2
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15718:	sub	sp, sp, #44	; 0x2c
   1571c:	mov	r5, r0
   15720:	mov	sl, r1
   15724:	bl	10c58 <__errno_location@plt>
   15728:	ldr	r4, [pc, #396]	; 158bc <__assert_fail@plt+0x4bb0>
   1572c:	cmn	r5, #-2147483647	; 0x80000001
   15730:	ldr	r6, [r4]
   15734:	mov	r8, r0
   15738:	movne	r0, #0
   1573c:	moveq	r0, #1
   15740:	ldr	r3, [r8]
   15744:	orrs	r0, r0, r5, lsr #31
   15748:	str	r3, [sp, #24]
   1574c:	bne	158b8 <__assert_fail@plt+0x4bac>
   15750:	ldr	r2, [r4, #4]
   15754:	cmp	r5, r2
   15758:	blt	157b8 <__assert_fail@plt+0x4aac>
   1575c:	add	r7, r4, #8
   15760:	cmp	r6, r7
   15764:	str	r2, [sp, #36]	; 0x24
   15768:	beq	15888 <__assert_fail@plt+0x4b7c>
   1576c:	mov	r3, #8
   15770:	sub	r2, r5, r2
   15774:	mov	r0, r6
   15778:	str	r3, [sp]
   1577c:	add	r2, r2, #1
   15780:	mvn	r3, #-2147483648	; 0x80000000
   15784:	add	r1, sp, #36	; 0x24
   15788:	bl	166c8 <__assert_fail@plt+0x59bc>
   1578c:	mov	r6, r0
   15790:	str	r0, [r4]
   15794:	ldr	r0, [r4, #4]
   15798:	ldr	r2, [sp, #36]	; 0x24
   1579c:	mov	r1, #0
   157a0:	sub	r2, r2, r0
   157a4:	add	r0, r6, r0, lsl #3
   157a8:	lsl	r2, r2, #3
   157ac:	bl	10c70 <memset@plt>
   157b0:	ldr	r3, [sp, #36]	; 0x24
   157b4:	str	r3, [r4, #4]
   157b8:	ldr	r2, [r4, #56]	; 0x38
   157bc:	add	fp, r6, r5, lsl #3
   157c0:	ldr	r1, [r4, #20]
   157c4:	ldr	r9, [r6, r5, lsl #3]
   157c8:	ldr	r7, [fp, #4]
   157cc:	ldr	r3, [r4, #16]
   157d0:	ldr	ip, [r4, #60]	; 0x3c
   157d4:	str	r2, [sp, #12]
   157d8:	ldr	r2, [pc, #224]	; 158c0 <__assert_fail@plt+0x4bb4>
   157dc:	orr	r1, r1, #1
   157e0:	str	r1, [sp, #28]
   157e4:	str	r1, [sp, #4]
   157e8:	str	r2, [sp, #8]
   157ec:	str	r3, [sp]
   157f0:	mov	r0, r7
   157f4:	mov	r1, r9
   157f8:	str	ip, [sp, #16]
   157fc:	mvn	r3, #0
   15800:	mov	r2, sl
   15804:	bl	11bd0 <__assert_fail@plt+0xec4>
   15808:	cmp	r9, r0
   1580c:	bhi	15874 <__assert_fail@plt+0x4b68>
   15810:	ldr	r3, [pc, #172]	; 158c4 <__assert_fail@plt+0x4bb8>
   15814:	add	r9, r0, #1
   15818:	cmp	r7, r3
   1581c:	str	r9, [r6, r5, lsl #3]
   15820:	beq	1582c <__assert_fail@plt+0x4b20>
   15824:	mov	r0, r7
   15828:	bl	16d58 <__assert_fail@plt+0x604c>
   1582c:	mov	r0, r9
   15830:	bl	164ac <__assert_fail@plt+0x57a0>
   15834:	ldr	ip, [r4, #60]	; 0x3c
   15838:	ldr	r3, [r4, #16]
   1583c:	ldr	lr, [r4, #56]	; 0x38
   15840:	ldr	r4, [pc, #120]	; 158c0 <__assert_fail@plt+0x4bb4>
   15844:	mov	r2, sl
   15848:	mov	r1, r9
   1584c:	str	r0, [fp, #4]
   15850:	str	r4, [sp, #8]
   15854:	ldr	r4, [sp, #28]
   15858:	str	r3, [sp]
   1585c:	str	r4, [sp, #4]
   15860:	str	ip, [sp, #16]
   15864:	str	lr, [sp, #12]
   15868:	mvn	r3, #0
   1586c:	mov	r7, r0
   15870:	bl	11bd0 <__assert_fail@plt+0xec4>
   15874:	ldr	r3, [sp, #24]
   15878:	mov	r0, r7
   1587c:	str	r3, [r8]
   15880:	add	sp, sp, #44	; 0x2c
   15884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15888:	mov	r3, #8
   1588c:	sub	r2, r5, r2
   15890:	str	r3, [sp]
   15894:	add	r1, sp, #36	; 0x24
   15898:	add	r2, r2, #1
   1589c:	mvn	r3, #-2147483648	; 0x80000000
   158a0:	bl	166c8 <__assert_fail@plt+0x59bc>
   158a4:	mov	r6, r0
   158a8:	ldm	r7, {r0, r1}
   158ac:	str	r6, [r4]
   158b0:	stm	r6, {r0, r1}
   158b4:	b	15794 <__assert_fail@plt+0x4a88>
   158b8:	bl	10d00 <abort@plt>
   158bc:	ldrdeq	r9, [r2], -r4
   158c0:	andeq	r9, r2, ip, ror #1
   158c4:	andeq	r9, r2, r8, ror #2
   158c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158cc:	sub	sp, sp, #44	; 0x2c
   158d0:	mov	sl, r0
   158d4:	bl	10c58 <__errno_location@plt>
   158d8:	ldr	r4, [pc, #348]	; 15a3c <__assert_fail@plt+0x4d30>
   158dc:	ldr	r2, [r4, #4]
   158e0:	ldr	r5, [r4]
   158e4:	cmp	r2, #0
   158e8:	ldr	r3, [r0]
   158ec:	mov	r8, r0
   158f0:	str	r3, [sp, #28]
   158f4:	bgt	15950 <__assert_fail@plt+0x4c44>
   158f8:	add	r6, r4, #8
   158fc:	cmp	r5, r6
   15900:	str	r2, [sp, #36]	; 0x24
   15904:	beq	15a0c <__assert_fail@plt+0x4d00>
   15908:	mov	r3, #8
   1590c:	mov	r0, r5
   15910:	str	r3, [sp]
   15914:	rsb	r2, r2, #1
   15918:	mvn	r3, #-2147483648	; 0x80000000
   1591c:	add	r1, sp, #36	; 0x24
   15920:	bl	166c8 <__assert_fail@plt+0x59bc>
   15924:	mov	r5, r0
   15928:	str	r0, [r4]
   1592c:	ldr	r0, [r4, #4]
   15930:	ldr	r2, [sp, #36]	; 0x24
   15934:	mov	r1, #0
   15938:	sub	r2, r2, r0
   1593c:	add	r0, r5, r0, lsl #3
   15940:	lsl	r2, r2, #3
   15944:	bl	10c70 <memset@plt>
   15948:	ldr	r3, [sp, #36]	; 0x24
   1594c:	str	r3, [r4, #4]
   15950:	ldr	r7, [r4, #20]
   15954:	ldr	r9, [r5]
   15958:	ldr	r6, [r5, #4]
   1595c:	ldr	r2, [r4, #56]	; 0x38
   15960:	ldr	r3, [r4, #16]
   15964:	ldr	ip, [r4, #60]	; 0x3c
   15968:	ldr	fp, [pc, #208]	; 15a40 <__assert_fail@plt+0x4d34>
   1596c:	orr	r7, r7, #1
   15970:	str	r2, [sp, #12]
   15974:	str	r3, [sp]
   15978:	str	r7, [sp, #4]
   1597c:	mov	r1, r9
   15980:	mov	r0, r6
   15984:	str	ip, [sp, #16]
   15988:	str	fp, [sp, #8]
   1598c:	mvn	r3, #0
   15990:	mov	r2, sl
   15994:	bl	11bd0 <__assert_fail@plt+0xec4>
   15998:	cmp	r9, r0
   1599c:	bhi	159f8 <__assert_fail@plt+0x4cec>
   159a0:	ldr	r3, [pc, #156]	; 15a44 <__assert_fail@plt+0x4d38>
   159a4:	add	r9, r0, #1
   159a8:	cmp	r6, r3
   159ac:	str	r9, [r5]
   159b0:	beq	159bc <__assert_fail@plt+0x4cb0>
   159b4:	mov	r0, r6
   159b8:	bl	16d58 <__assert_fail@plt+0x604c>
   159bc:	mov	r0, r9
   159c0:	bl	164ac <__assert_fail@plt+0x57a0>
   159c4:	ldr	ip, [r4, #60]	; 0x3c
   159c8:	ldr	r3, [r4, #16]
   159cc:	ldr	lr, [r4, #56]	; 0x38
   159d0:	mov	r2, sl
   159d4:	mov	r1, r9
   159d8:	str	r0, [r5, #4]
   159dc:	str	r3, [sp]
   159e0:	stmib	sp, {r7, fp}
   159e4:	str	ip, [sp, #16]
   159e8:	str	lr, [sp, #12]
   159ec:	mvn	r3, #0
   159f0:	mov	r6, r0
   159f4:	bl	11bd0 <__assert_fail@plt+0xec4>
   159f8:	ldr	r3, [sp, #28]
   159fc:	mov	r0, r6
   15a00:	str	r3, [r8]
   15a04:	add	sp, sp, #44	; 0x2c
   15a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a0c:	mov	r3, #8
   15a10:	str	r3, [sp]
   15a14:	add	r1, sp, #36	; 0x24
   15a18:	rsb	r2, r2, #1
   15a1c:	mvn	r3, #-2147483648	; 0x80000000
   15a20:	mov	r0, #0
   15a24:	bl	166c8 <__assert_fail@plt+0x59bc>
   15a28:	mov	r5, r0
   15a2c:	ldm	r6, {r0, r1}
   15a30:	str	r5, [r4]
   15a34:	stm	r5, {r0, r1}
   15a38:	b	1592c <__assert_fail@plt+0x4c20>
   15a3c:	ldrdeq	r9, [r2], -r4
   15a40:	andeq	r9, r2, ip, ror #1
   15a44:	andeq	r9, r2, r8, ror #2
   15a48:	push	{r4, r5, r6, lr}
   15a4c:	sub	sp, sp, #32
   15a50:	cmp	r1, #0
   15a54:	mov	r4, r0
   15a58:	ldr	r5, [sp, #48]	; 0x30
   15a5c:	ldr	r6, [sp, #52]	; 0x34
   15a60:	beq	15d78 <__assert_fail@plt+0x506c>
   15a64:	stm	sp, {r2, r3}
   15a68:	mov	r3, r1
   15a6c:	ldr	r2, [pc, #808]	; 15d9c <__assert_fail@plt+0x5090>
   15a70:	mov	r1, #1
   15a74:	bl	10c94 <__fprintf_chk@plt>
   15a78:	mov	r2, #5
   15a7c:	ldr	r1, [pc, #796]	; 15da0 <__assert_fail@plt+0x5094>
   15a80:	mov	r0, #0
   15a84:	bl	10b80 <dcgettext@plt>
   15a88:	ldr	r3, [pc, #788]	; 15da4 <__assert_fail@plt+0x5098>
   15a8c:	ldr	r2, [pc, #788]	; 15da8 <__assert_fail@plt+0x509c>
   15a90:	str	r3, [sp]
   15a94:	mov	r1, #1
   15a98:	mov	r3, r0
   15a9c:	mov	r0, r4
   15aa0:	bl	10c94 <__fprintf_chk@plt>
   15aa4:	mov	r1, r4
   15aa8:	mov	r0, #10
   15aac:	bl	10b74 <fputc_unlocked@plt>
   15ab0:	mov	r2, #5
   15ab4:	ldr	r1, [pc, #752]	; 15dac <__assert_fail@plt+0x50a0>
   15ab8:	mov	r0, #0
   15abc:	bl	10b80 <dcgettext@plt>
   15ac0:	mov	r1, #1
   15ac4:	ldr	r3, [pc, #740]	; 15db0 <__assert_fail@plt+0x50a4>
   15ac8:	mov	r2, r0
   15acc:	mov	r0, r4
   15ad0:	bl	10c94 <__fprintf_chk@plt>
   15ad4:	mov	r1, r4
   15ad8:	mov	r0, #10
   15adc:	bl	10b74 <fputc_unlocked@plt>
   15ae0:	cmp	r6, #9
   15ae4:	ldrls	pc, [pc, r6, lsl #2]
   15ae8:	b	15d90 <__assert_fail@plt+0x5084>
   15aec:	andeq	r5, r1, r0, ror fp
   15af0:	andeq	r5, r1, r8, ror fp
   15af4:	andeq	r5, r1, r4, lsr #23
   15af8:	ldrdeq	r5, [r1], -r8
   15afc:	andeq	r5, r1, r4, lsl ip
   15b00:	andeq	r5, r1, r0, asr ip
   15b04:	andeq	r5, r1, ip, lsl #25
   15b08:	ldrdeq	r5, [r1], -r0
   15b0c:	andeq	r5, r1, r0, lsr #26
   15b10:	andeq	r5, r1, r4, lsl fp
   15b14:	ldr	r1, [pc, #664]	; 15db4 <__assert_fail@plt+0x50a8>
   15b18:	mov	r2, #5
   15b1c:	mov	r0, #0
   15b20:	bl	10b80 <dcgettext@plt>
   15b24:	ldr	ip, [r5, #32]
   15b28:	ldr	r1, [r5, #28]
   15b2c:	ldr	r2, [r5, #24]
   15b30:	ldr	r3, [r5]
   15b34:	ldr	r6, [r5, #20]
   15b38:	str	ip, [sp, #28]
   15b3c:	ldr	lr, [r5, #16]
   15b40:	str	r1, [sp, #24]
   15b44:	ldr	ip, [r5, #12]
   15b48:	str	r2, [sp, #20]
   15b4c:	ldr	r1, [r5, #8]
   15b50:	ldr	r2, [r5, #4]
   15b54:	str	r6, [sp, #16]
   15b58:	stmib	sp, {r1, ip, lr}
   15b5c:	mov	r1, #1
   15b60:	str	r2, [sp]
   15b64:	mov	r2, r0
   15b68:	mov	r0, r4
   15b6c:	bl	10c94 <__fprintf_chk@plt>
   15b70:	add	sp, sp, #32
   15b74:	pop	{r4, r5, r6, pc}
   15b78:	mov	r2, #5
   15b7c:	ldr	r1, [pc, #564]	; 15db8 <__assert_fail@plt+0x50ac>
   15b80:	mov	r0, #0
   15b84:	bl	10b80 <dcgettext@plt>
   15b88:	ldr	r3, [r5]
   15b8c:	mov	r1, #1
   15b90:	mov	r2, r0
   15b94:	mov	r0, r4
   15b98:	add	sp, sp, #32
   15b9c:	pop	{r4, r5, r6, lr}
   15ba0:	b	10c94 <__fprintf_chk@plt>
   15ba4:	mov	r2, #5
   15ba8:	ldr	r1, [pc, #524]	; 15dbc <__assert_fail@plt+0x50b0>
   15bac:	mov	r0, #0
   15bb0:	bl	10b80 <dcgettext@plt>
   15bb4:	ldr	r2, [r5, #4]
   15bb8:	ldr	r3, [r5]
   15bbc:	mov	r1, #1
   15bc0:	str	r2, [sp, #48]	; 0x30
   15bc4:	mov	r2, r0
   15bc8:	mov	r0, r4
   15bcc:	add	sp, sp, #32
   15bd0:	pop	{r4, r5, r6, lr}
   15bd4:	b	10c94 <__fprintf_chk@plt>
   15bd8:	mov	r2, #5
   15bdc:	ldr	r1, [pc, #476]	; 15dc0 <__assert_fail@plt+0x50b4>
   15be0:	mov	r0, #0
   15be4:	bl	10b80 <dcgettext@plt>
   15be8:	ldr	r1, [r5, #8]
   15bec:	ldr	r2, [r5, #4]
   15bf0:	ldr	r3, [r5]
   15bf4:	str	r1, [sp, #52]	; 0x34
   15bf8:	str	r2, [sp, #48]	; 0x30
   15bfc:	mov	r1, #1
   15c00:	mov	r2, r0
   15c04:	mov	r0, r4
   15c08:	add	sp, sp, #32
   15c0c:	pop	{r4, r5, r6, lr}
   15c10:	b	10c94 <__fprintf_chk@plt>
   15c14:	mov	r2, #5
   15c18:	ldr	r1, [pc, #420]	; 15dc4 <__assert_fail@plt+0x50b8>
   15c1c:	mov	r0, #0
   15c20:	bl	10b80 <dcgettext@plt>
   15c24:	ldr	r1, [r5, #8]
   15c28:	ldr	ip, [r5, #12]
   15c2c:	ldr	r2, [r5, #4]
   15c30:	ldr	r3, [r5]
   15c34:	stmib	sp, {r1, ip}
   15c38:	str	r2, [sp]
   15c3c:	mov	r1, #1
   15c40:	mov	r2, r0
   15c44:	mov	r0, r4
   15c48:	bl	10c94 <__fprintf_chk@plt>
   15c4c:	b	15b70 <__assert_fail@plt+0x4e64>
   15c50:	mov	r2, #5
   15c54:	ldr	r1, [pc, #364]	; 15dc8 <__assert_fail@plt+0x50bc>
   15c58:	mov	r0, #0
   15c5c:	bl	10b80 <dcgettext@plt>
   15c60:	add	r1, r5, #8
   15c64:	ldr	r2, [r5, #4]
   15c68:	ldm	r1, {r1, ip, lr}
   15c6c:	ldr	r3, [r5]
   15c70:	str	r2, [sp]
   15c74:	stmib	sp, {r1, ip, lr}
   15c78:	mov	r1, #1
   15c7c:	mov	r2, r0
   15c80:	mov	r0, r4
   15c84:	bl	10c94 <__fprintf_chk@plt>
   15c88:	b	15b70 <__assert_fail@plt+0x4e64>
   15c8c:	mov	r2, #5
   15c90:	ldr	r1, [pc, #308]	; 15dcc <__assert_fail@plt+0x50c0>
   15c94:	mov	r0, #0
   15c98:	bl	10b80 <dcgettext@plt>
   15c9c:	add	r1, r5, #8
   15ca0:	ldr	r2, [r5, #4]
   15ca4:	ldm	r1, {r1, ip, lr}
   15ca8:	ldr	r6, [r5, #20]
   15cac:	ldr	r3, [r5]
   15cb0:	stmib	sp, {r1, ip, lr}
   15cb4:	mov	r1, #1
   15cb8:	str	r2, [sp]
   15cbc:	str	r6, [sp, #16]
   15cc0:	mov	r2, r0
   15cc4:	mov	r0, r4
   15cc8:	bl	10c94 <__fprintf_chk@plt>
   15ccc:	b	15b70 <__assert_fail@plt+0x4e64>
   15cd0:	mov	r2, #5
   15cd4:	ldr	r1, [pc, #244]	; 15dd0 <__assert_fail@plt+0x50c4>
   15cd8:	mov	r0, #0
   15cdc:	bl	10b80 <dcgettext@plt>
   15ce0:	ldr	r2, [r5, #24]
   15ce4:	ldr	r3, [r5]
   15ce8:	ldr	r6, [r5, #20]
   15cec:	ldr	lr, [r5, #16]
   15cf0:	ldr	ip, [r5, #12]
   15cf4:	str	r2, [sp, #20]
   15cf8:	ldr	r1, [r5, #8]
   15cfc:	ldr	r2, [r5, #4]
   15d00:	str	r6, [sp, #16]
   15d04:	stmib	sp, {r1, ip, lr}
   15d08:	mov	r1, #1
   15d0c:	str	r2, [sp]
   15d10:	mov	r2, r0
   15d14:	mov	r0, r4
   15d18:	bl	10c94 <__fprintf_chk@plt>
   15d1c:	b	15b70 <__assert_fail@plt+0x4e64>
   15d20:	mov	r2, #5
   15d24:	ldr	r1, [pc, #168]	; 15dd4 <__assert_fail@plt+0x50c8>
   15d28:	mov	r0, #0
   15d2c:	bl	10b80 <dcgettext@plt>
   15d30:	ldr	r1, [r5, #28]
   15d34:	ldr	r2, [r5, #24]
   15d38:	ldr	r3, [r5]
   15d3c:	ldr	r6, [r5, #20]
   15d40:	ldr	lr, [r5, #16]
   15d44:	str	r1, [sp, #24]
   15d48:	ldr	ip, [r5, #12]
   15d4c:	str	r2, [sp, #20]
   15d50:	ldr	r1, [r5, #8]
   15d54:	ldr	r2, [r5, #4]
   15d58:	str	r6, [sp, #16]
   15d5c:	stmib	sp, {r1, ip, lr}
   15d60:	mov	r1, #1
   15d64:	str	r2, [sp]
   15d68:	mov	r2, r0
   15d6c:	mov	r0, r4
   15d70:	bl	10c94 <__fprintf_chk@plt>
   15d74:	b	15b70 <__assert_fail@plt+0x4e64>
   15d78:	str	r3, [sp]
   15d7c:	mov	r1, #1
   15d80:	mov	r3, r2
   15d84:	ldr	r2, [pc, #76]	; 15dd8 <__assert_fail@plt+0x50cc>
   15d88:	bl	10c94 <__fprintf_chk@plt>
   15d8c:	b	15a78 <__assert_fail@plt+0x4d6c>
   15d90:	mov	r2, #5
   15d94:	ldr	r1, [pc, #64]	; 15ddc <__assert_fail@plt+0x50d0>
   15d98:	b	15b1c <__assert_fail@plt+0x4e10>
   15d9c:	andeq	r7, r1, r8, lsr #25
   15da0:			; <UNDEFINED> instruction: 0x00017cbc
   15da4:	andeq	r0, r0, r6, ror #15
   15da8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15dac:	andeq	r7, r1, r0, asr #25
   15db0:	andeq	r7, r1, ip, ror #26
   15db4:	muleq	r1, ip, lr
   15db8:	muleq	r1, r0, sp
   15dbc:	andeq	r7, r1, r0, lsr #27
   15dc0:			; <UNDEFINED> instruction: 0x00017db8
   15dc4:	ldrdeq	r7, [r1], -r4
   15dc8:	strdeq	r7, [r1], -r4
   15dcc:	andeq	r7, r1, r8, lsl lr
   15dd0:	andeq	r7, r1, r0, asr #28
   15dd4:	andeq	r7, r1, ip, ror #28
   15dd8:			; <UNDEFINED> instruction: 0x00017cb4
   15ddc:	ldrdeq	r7, [r1], -r0
   15de0:	push	{r4, r5, lr}
   15de4:	sub	sp, sp, #12
   15de8:	ldr	r5, [sp, #24]
   15dec:	ldr	ip, [r5]
   15df0:	cmp	ip, #0
   15df4:	beq	15e10 <__assert_fail@plt+0x5104>
   15df8:	mov	lr, r5
   15dfc:	mov	ip, #0
   15e00:	ldr	r4, [lr, #4]!
   15e04:	add	ip, ip, #1
   15e08:	cmp	r4, #0
   15e0c:	bne	15e00 <__assert_fail@plt+0x50f4>
   15e10:	stm	sp, {r5, ip}
   15e14:	bl	15a48 <__assert_fail@plt+0x4d3c>
   15e18:	add	sp, sp, #12
   15e1c:	pop	{r4, r5, pc}
   15e20:	push	{r4, r5, lr}
   15e24:	sub	sp, sp, #76	; 0x4c
   15e28:	mov	r5, r0
   15e2c:	ldr	ip, [sp, #88]	; 0x58
   15e30:	ldr	r0, [ip]
   15e34:	cmp	r0, #0
   15e38:	str	r0, [sp, #32]
   15e3c:	beq	16210 <__assert_fail@plt+0x5504>
   15e40:	ldr	r0, [ip, #4]
   15e44:	cmp	r0, #0
   15e48:	str	r0, [sp, #36]	; 0x24
   15e4c:	beq	16218 <__assert_fail@plt+0x550c>
   15e50:	ldr	r0, [ip, #8]
   15e54:	cmp	r0, #0
   15e58:	str	r0, [sp, #40]	; 0x28
   15e5c:	beq	16220 <__assert_fail@plt+0x5514>
   15e60:	ldr	r0, [ip, #12]
   15e64:	cmp	r0, #0
   15e68:	str	r0, [sp, #44]	; 0x2c
   15e6c:	beq	16228 <__assert_fail@plt+0x551c>
   15e70:	ldr	r0, [ip, #16]
   15e74:	cmp	r0, #0
   15e78:	str	r0, [sp, #48]	; 0x30
   15e7c:	beq	16230 <__assert_fail@plt+0x5524>
   15e80:	ldr	r0, [ip, #20]
   15e84:	cmp	r0, #0
   15e88:	str	r0, [sp, #52]	; 0x34
   15e8c:	beq	16238 <__assert_fail@plt+0x552c>
   15e90:	ldr	r0, [ip, #24]
   15e94:	cmp	r0, #0
   15e98:	str	r0, [sp, #56]	; 0x38
   15e9c:	beq	16240 <__assert_fail@plt+0x5534>
   15ea0:	ldr	r0, [ip, #28]
   15ea4:	cmp	r0, #0
   15ea8:	str	r0, [sp, #60]	; 0x3c
   15eac:	beq	16248 <__assert_fail@plt+0x553c>
   15eb0:	ldr	r0, [ip, #32]
   15eb4:	cmp	r0, #0
   15eb8:	str	r0, [sp, #64]	; 0x40
   15ebc:	beq	16250 <__assert_fail@plt+0x5544>
   15ec0:	ldr	r0, [ip, #36]	; 0x24
   15ec4:	cmp	r0, #0
   15ec8:	movne	r4, #10
   15ecc:	moveq	r4, #9
   15ed0:	cmp	r1, #0
   15ed4:	beq	161e8 <__assert_fail@plt+0x54dc>
   15ed8:	stm	sp, {r2, r3}
   15edc:	mov	r0, r5
   15ee0:	mov	r3, r1
   15ee4:	ldr	r2, [pc, #876]	; 16258 <__assert_fail@plt+0x554c>
   15ee8:	mov	r1, #1
   15eec:	bl	10c94 <__fprintf_chk@plt>
   15ef0:	mov	r2, #5
   15ef4:	ldr	r1, [pc, #864]	; 1625c <__assert_fail@plt+0x5550>
   15ef8:	mov	r0, #0
   15efc:	bl	10b80 <dcgettext@plt>
   15f00:	ldr	r3, [pc, #856]	; 16260 <__assert_fail@plt+0x5554>
   15f04:	ldr	r2, [pc, #856]	; 16264 <__assert_fail@plt+0x5558>
   15f08:	str	r3, [sp]
   15f0c:	mov	r1, #1
   15f10:	mov	r3, r0
   15f14:	mov	r0, r5
   15f18:	bl	10c94 <__fprintf_chk@plt>
   15f1c:	mov	r1, r5
   15f20:	mov	r0, #10
   15f24:	bl	10b74 <fputc_unlocked@plt>
   15f28:	mov	r2, #5
   15f2c:	ldr	r1, [pc, #820]	; 16268 <__assert_fail@plt+0x555c>
   15f30:	mov	r0, #0
   15f34:	bl	10b80 <dcgettext@plt>
   15f38:	mov	r1, #1
   15f3c:	ldr	r3, [pc, #808]	; 1626c <__assert_fail@plt+0x5560>
   15f40:	mov	r2, r0
   15f44:	mov	r0, r5
   15f48:	bl	10c94 <__fprintf_chk@plt>
   15f4c:	mov	r1, r5
   15f50:	mov	r0, #10
   15f54:	bl	10b74 <fputc_unlocked@plt>
   15f58:	cmp	r4, #9
   15f5c:	ldrls	pc, [pc, r4, lsl #2]
   15f60:	b	16204 <__assert_fail@plt+0x54f8>
   15f64:	andeq	r5, r1, r8, ror #31
   15f68:	strdeq	r5, [r1], -r0
   15f6c:	andeq	r6, r1, ip, lsl r0
   15f70:	andeq	r6, r1, r0, asr r0
   15f74:	andeq	r6, r1, r8, lsl #1
   15f78:	andeq	r6, r1, r4, asr #1
   15f7c:	andeq	r6, r1, r0, lsl #2
   15f80:	andeq	r6, r1, r4, asr #2
   15f84:	muleq	r1, r0, r1
   15f88:	andeq	r5, r1, ip, lsl #31
   15f8c:	ldr	r1, [pc, #732]	; 16270 <__assert_fail@plt+0x5564>
   15f90:	mov	r2, #5
   15f94:	mov	r0, #0
   15f98:	bl	10b80 <dcgettext@plt>
   15f9c:	ldr	ip, [sp, #64]	; 0x40
   15fa0:	ldr	r1, [sp, #60]	; 0x3c
   15fa4:	ldr	r2, [sp, #56]	; 0x38
   15fa8:	ldr	lr, [sp, #48]	; 0x30
   15fac:	str	ip, [sp, #28]
   15fb0:	str	r1, [sp, #24]
   15fb4:	ldr	ip, [sp, #44]	; 0x2c
   15fb8:	ldr	r1, [sp, #40]	; 0x28
   15fbc:	ldr	r4, [sp, #52]	; 0x34
   15fc0:	str	r2, [sp, #20]
   15fc4:	ldr	r2, [sp, #36]	; 0x24
   15fc8:	stmib	sp, {r1, ip, lr}
   15fcc:	mov	r1, #1
   15fd0:	str	r2, [sp]
   15fd4:	ldr	r3, [sp, #32]
   15fd8:	str	r4, [sp, #16]
   15fdc:	mov	r2, r0
   15fe0:	mov	r0, r5
   15fe4:	bl	10c94 <__fprintf_chk@plt>
   15fe8:	add	sp, sp, #76	; 0x4c
   15fec:	pop	{r4, r5, pc}
   15ff0:	mov	r2, #5
   15ff4:	ldr	r1, [pc, #632]	; 16274 <__assert_fail@plt+0x5568>
   15ff8:	mov	r0, #0
   15ffc:	bl	10b80 <dcgettext@plt>
   16000:	ldr	r3, [sp, #32]
   16004:	mov	r1, #1
   16008:	mov	r2, r0
   1600c:	mov	r0, r5
   16010:	add	sp, sp, #76	; 0x4c
   16014:	pop	{r4, r5, lr}
   16018:	b	10c94 <__fprintf_chk@plt>
   1601c:	mov	r2, #5
   16020:	ldr	r1, [pc, #592]	; 16278 <__assert_fail@plt+0x556c>
   16024:	mov	r0, #0
   16028:	bl	10b80 <dcgettext@plt>
   1602c:	ldr	r2, [sp, #36]	; 0x24
   16030:	ldr	r3, [sp, #32]
   16034:	str	r2, [sp, #88]	; 0x58
   16038:	mov	r1, #1
   1603c:	mov	r2, r0
   16040:	mov	r0, r5
   16044:	add	sp, sp, #76	; 0x4c
   16048:	pop	{r4, r5, lr}
   1604c:	b	10c94 <__fprintf_chk@plt>
   16050:	mov	r2, #5
   16054:	ldr	r1, [pc, #544]	; 1627c <__assert_fail@plt+0x5570>
   16058:	mov	r0, #0
   1605c:	bl	10b80 <dcgettext@plt>
   16060:	ldr	r1, [sp, #40]	; 0x28
   16064:	ldr	r2, [sp, #36]	; 0x24
   16068:	str	r1, [sp, #4]
   1606c:	str	r2, [sp]
   16070:	ldr	r3, [sp, #32]
   16074:	mov	r1, #1
   16078:	mov	r2, r0
   1607c:	mov	r0, r5
   16080:	bl	10c94 <__fprintf_chk@plt>
   16084:	b	15fe8 <__assert_fail@plt+0x52dc>
   16088:	mov	r2, #5
   1608c:	ldr	r1, [pc, #492]	; 16280 <__assert_fail@plt+0x5574>
   16090:	mov	r0, #0
   16094:	bl	10b80 <dcgettext@plt>
   16098:	ldr	r1, [sp, #40]	; 0x28
   1609c:	ldr	ip, [sp, #44]	; 0x2c
   160a0:	ldr	r2, [sp, #36]	; 0x24
   160a4:	ldr	r3, [sp, #32]
   160a8:	stmib	sp, {r1, ip}
   160ac:	str	r2, [sp]
   160b0:	mov	r1, #1
   160b4:	mov	r2, r0
   160b8:	mov	r0, r5
   160bc:	bl	10c94 <__fprintf_chk@plt>
   160c0:	b	15fe8 <__assert_fail@plt+0x52dc>
   160c4:	mov	r2, #5
   160c8:	ldr	r1, [pc, #436]	; 16284 <__assert_fail@plt+0x5578>
   160cc:	mov	r0, #0
   160d0:	bl	10b80 <dcgettext@plt>
   160d4:	add	r1, sp, #40	; 0x28
   160d8:	ldr	r2, [sp, #36]	; 0x24
   160dc:	ldm	r1, {r1, ip, lr}
   160e0:	ldr	r3, [sp, #32]
   160e4:	str	r2, [sp]
   160e8:	stmib	sp, {r1, ip, lr}
   160ec:	mov	r1, #1
   160f0:	mov	r2, r0
   160f4:	mov	r0, r5
   160f8:	bl	10c94 <__fprintf_chk@plt>
   160fc:	b	15fe8 <__assert_fail@plt+0x52dc>
   16100:	mov	r2, #5
   16104:	ldr	r1, [pc, #380]	; 16288 <__assert_fail@plt+0x557c>
   16108:	mov	r0, #0
   1610c:	bl	10b80 <dcgettext@plt>
   16110:	add	r1, sp, #40	; 0x28
   16114:	ldr	r2, [sp, #36]	; 0x24
   16118:	ldm	r1, {r1, ip, lr}
   1611c:	ldr	r4, [sp, #52]	; 0x34
   16120:	str	r2, [sp]
   16124:	stmib	sp, {r1, ip, lr}
   16128:	mov	r1, #1
   1612c:	ldr	r3, [sp, #32]
   16130:	str	r4, [sp, #16]
   16134:	mov	r2, r0
   16138:	mov	r0, r5
   1613c:	bl	10c94 <__fprintf_chk@plt>
   16140:	b	15fe8 <__assert_fail@plt+0x52dc>
   16144:	mov	r2, #5
   16148:	ldr	r1, [pc, #316]	; 1628c <__assert_fail@plt+0x5580>
   1614c:	mov	r0, #0
   16150:	bl	10b80 <dcgettext@plt>
   16154:	add	r1, sp, #40	; 0x28
   16158:	ldr	r2, [sp, #56]	; 0x38
   1615c:	ldm	r1, {r1, ip, lr}
   16160:	ldr	r4, [sp, #52]	; 0x34
   16164:	str	r2, [sp, #20]
   16168:	ldr	r2, [sp, #36]	; 0x24
   1616c:	stmib	sp, {r1, ip, lr}
   16170:	mov	r1, #1
   16174:	str	r2, [sp]
   16178:	ldr	r3, [sp, #32]
   1617c:	str	r4, [sp, #16]
   16180:	mov	r2, r0
   16184:	mov	r0, r5
   16188:	bl	10c94 <__fprintf_chk@plt>
   1618c:	b	15fe8 <__assert_fail@plt+0x52dc>
   16190:	mov	r2, #5
   16194:	ldr	r1, [pc, #244]	; 16290 <__assert_fail@plt+0x5584>
   16198:	mov	r0, #0
   1619c:	bl	10b80 <dcgettext@plt>
   161a0:	ldr	r1, [sp, #60]	; 0x3c
   161a4:	ldr	r2, [sp, #56]	; 0x38
   161a8:	ldr	lr, [sp, #48]	; 0x30
   161ac:	ldr	ip, [sp, #44]	; 0x2c
   161b0:	str	r1, [sp, #24]
   161b4:	ldr	r1, [sp, #40]	; 0x28
   161b8:	ldr	r4, [sp, #52]	; 0x34
   161bc:	str	r2, [sp, #20]
   161c0:	ldr	r2, [sp, #36]	; 0x24
   161c4:	stmib	sp, {r1, ip, lr}
   161c8:	mov	r1, #1
   161cc:	str	r2, [sp]
   161d0:	ldr	r3, [sp, #32]
   161d4:	str	r4, [sp, #16]
   161d8:	mov	r2, r0
   161dc:	mov	r0, r5
   161e0:	bl	10c94 <__fprintf_chk@plt>
   161e4:	b	15fe8 <__assert_fail@plt+0x52dc>
   161e8:	str	r3, [sp]
   161ec:	mov	r1, #1
   161f0:	mov	r3, r2
   161f4:	mov	r0, r5
   161f8:	ldr	r2, [pc, #148]	; 16294 <__assert_fail@plt+0x5588>
   161fc:	bl	10c94 <__fprintf_chk@plt>
   16200:	b	15ef0 <__assert_fail@plt+0x51e4>
   16204:	mov	r2, #5
   16208:	ldr	r1, [pc, #136]	; 16298 <__assert_fail@plt+0x558c>
   1620c:	b	15f94 <__assert_fail@plt+0x5288>
   16210:	mov	r4, r0
   16214:	b	15ed0 <__assert_fail@plt+0x51c4>
   16218:	mov	r4, #1
   1621c:	b	15ed0 <__assert_fail@plt+0x51c4>
   16220:	mov	r4, #2
   16224:	b	15ed0 <__assert_fail@plt+0x51c4>
   16228:	mov	r4, #3
   1622c:	b	15ed0 <__assert_fail@plt+0x51c4>
   16230:	mov	r4, #4
   16234:	b	15ed0 <__assert_fail@plt+0x51c4>
   16238:	mov	r4, #5
   1623c:	b	15ed0 <__assert_fail@plt+0x51c4>
   16240:	mov	r4, #6
   16244:	b	15ed0 <__assert_fail@plt+0x51c4>
   16248:	mov	r4, #7
   1624c:	b	15ed0 <__assert_fail@plt+0x51c4>
   16250:	mov	r4, #8
   16254:	b	15ed0 <__assert_fail@plt+0x51c4>
   16258:	andeq	r7, r1, r8, lsr #25
   1625c:			; <UNDEFINED> instruction: 0x00017cbc
   16260:	andeq	r0, r0, r6, ror #15
   16264:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   16268:	andeq	r7, r1, r0, asr #25
   1626c:	andeq	r7, r1, ip, ror #26
   16270:	muleq	r1, ip, lr
   16274:	muleq	r1, r0, sp
   16278:	andeq	r7, r1, r0, lsr #27
   1627c:			; <UNDEFINED> instruction: 0x00017db8
   16280:	ldrdeq	r7, [r1], -r4
   16284:	strdeq	r7, [r1], -r4
   16288:	andeq	r7, r1, r8, lsl lr
   1628c:	andeq	r7, r1, r0, asr #28
   16290:	andeq	r7, r1, ip, ror #28
   16294:			; <UNDEFINED> instruction: 0x00017cb4
   16298:	ldrdeq	r7, [r1], -r0
   1629c:	push	{r3}		; (str r3, [sp, #-4]!)
   162a0:	push	{lr}		; (str lr, [sp, #-4]!)
   162a4:	sub	sp, sp, #56	; 0x38
   162a8:	add	r3, sp, #64	; 0x40
   162ac:	ldr	ip, [sp, #64]	; 0x40
   162b0:	str	r3, [sp, #12]
   162b4:	cmp	ip, #0
   162b8:	str	ip, [sp, #16]
   162bc:	beq	16354 <__assert_fail@plt+0x5648>
   162c0:	ldr	ip, [sp, #68]	; 0x44
   162c4:	cmp	ip, #0
   162c8:	str	ip, [sp, #20]
   162cc:	beq	16374 <__assert_fail@plt+0x5668>
   162d0:	ldr	ip, [sp, #72]	; 0x48
   162d4:	cmp	ip, #0
   162d8:	str	ip, [sp, #24]
   162dc:	beq	1637c <__assert_fail@plt+0x5670>
   162e0:	ldr	ip, [sp, #76]	; 0x4c
   162e4:	cmp	ip, #0
   162e8:	str	ip, [sp, #28]
   162ec:	beq	16384 <__assert_fail@plt+0x5678>
   162f0:	ldr	ip, [sp, #80]	; 0x50
   162f4:	cmp	ip, #0
   162f8:	str	ip, [sp, #32]
   162fc:	beq	1638c <__assert_fail@plt+0x5680>
   16300:	ldr	ip, [sp, #84]	; 0x54
   16304:	cmp	ip, #0
   16308:	str	ip, [sp, #36]	; 0x24
   1630c:	beq	16394 <__assert_fail@plt+0x5688>
   16310:	ldr	ip, [sp, #88]	; 0x58
   16314:	cmp	ip, #0
   16318:	str	ip, [sp, #40]	; 0x28
   1631c:	beq	1639c <__assert_fail@plt+0x5690>
   16320:	ldr	ip, [sp, #92]	; 0x5c
   16324:	cmp	ip, #0
   16328:	str	ip, [sp, #44]	; 0x2c
   1632c:	beq	163a4 <__assert_fail@plt+0x5698>
   16330:	ldr	ip, [sp, #96]	; 0x60
   16334:	cmp	ip, #0
   16338:	str	ip, [sp, #48]	; 0x30
   1633c:	beq	163ac <__assert_fail@plt+0x56a0>
   16340:	ldr	ip, [sp, #100]	; 0x64
   16344:	cmp	ip, #0
   16348:	str	ip, [sp, #52]	; 0x34
   1634c:	movne	ip, #10
   16350:	moveq	ip, #9
   16354:	add	r3, sp, #16
   16358:	stm	sp, {r3, ip}
   1635c:	ldr	r3, [sp, #60]	; 0x3c
   16360:	bl	15a48 <__assert_fail@plt+0x4d3c>
   16364:	add	sp, sp, #56	; 0x38
   16368:	pop	{lr}		; (ldr lr, [sp], #4)
   1636c:	add	sp, sp, #4
   16370:	bx	lr
   16374:	mov	ip, #1
   16378:	b	16354 <__assert_fail@plt+0x5648>
   1637c:	mov	ip, #2
   16380:	b	16354 <__assert_fail@plt+0x5648>
   16384:	mov	ip, #3
   16388:	b	16354 <__assert_fail@plt+0x5648>
   1638c:	mov	ip, #4
   16390:	b	16354 <__assert_fail@plt+0x5648>
   16394:	mov	ip, #5
   16398:	b	16354 <__assert_fail@plt+0x5648>
   1639c:	mov	ip, #6
   163a0:	b	16354 <__assert_fail@plt+0x5648>
   163a4:	mov	ip, #7
   163a8:	b	16354 <__assert_fail@plt+0x5648>
   163ac:	mov	ip, #8
   163b0:	b	16354 <__assert_fail@plt+0x5648>
   163b4:	ldr	r3, [pc, #116]	; 16430 <__assert_fail@plt+0x5724>
   163b8:	push	{r4, lr}
   163bc:	mov	r0, #10
   163c0:	ldr	r1, [r3]
   163c4:	bl	10b74 <fputc_unlocked@plt>
   163c8:	mov	r2, #5
   163cc:	ldr	r1, [pc, #96]	; 16434 <__assert_fail@plt+0x5728>
   163d0:	mov	r0, #0
   163d4:	bl	10b80 <dcgettext@plt>
   163d8:	ldr	r2, [pc, #88]	; 16438 <__assert_fail@plt+0x572c>
   163dc:	mov	r1, r0
   163e0:	mov	r0, #1
   163e4:	bl	10c7c <__printf_chk@plt>
   163e8:	mov	r2, #5
   163ec:	ldr	r1, [pc, #72]	; 1643c <__assert_fail@plt+0x5730>
   163f0:	mov	r0, #0
   163f4:	bl	10b80 <dcgettext@plt>
   163f8:	ldr	r3, [pc, #64]	; 16440 <__assert_fail@plt+0x5734>
   163fc:	ldr	r2, [pc, #64]	; 16444 <__assert_fail@plt+0x5738>
   16400:	mov	r1, r0
   16404:	mov	r0, #1
   16408:	bl	10c7c <__printf_chk@plt>
   1640c:	mov	r2, #5
   16410:	ldr	r1, [pc, #48]	; 16448 <__assert_fail@plt+0x573c>
   16414:	mov	r0, #0
   16418:	bl	10b80 <dcgettext@plt>
   1641c:	ldr	r2, [pc, #40]	; 1644c <__assert_fail@plt+0x5740>
   16420:	pop	{r4, lr}
   16424:	mov	r1, r0
   16428:	mov	r0, #1
   1642c:	b	10c7c <__printf_chk@plt>
   16430:	andeq	r9, r2, r4, lsr #2
   16434:	andeq	r7, r1, ip, lsl #30
   16438:	andeq	r7, r1, r0, lsr #30
   1643c:	andeq	r7, r1, r8, lsr pc
   16440:	ldrdeq	r7, [r1], -r0
   16444:	strdeq	r7, [r1], -r8
   16448:	andeq	r7, r1, ip, asr #30
   1644c:	andeq	r7, r1, r4, ror pc
   16450:	push	{r4, r5, r6, lr}
   16454:	mov	r6, r0
   16458:	mov	r5, r1
   1645c:	mov	r4, r2
   16460:	bl	16ed8 <__assert_fail@plt+0x61cc>
   16464:	cmp	r0, #0
   16468:	popne	{r4, r5, r6, pc}
   1646c:	cmp	r6, #0
   16470:	beq	16480 <__assert_fail@plt+0x5774>
   16474:	cmp	r5, #0
   16478:	cmpne	r4, #0
   1647c:	popeq	{r4, r5, r6, pc}
   16480:	bl	16acc <__assert_fail@plt+0x5dc0>
   16484:	push	{r4, lr}
   16488:	bl	16b54 <__assert_fail@plt+0x5e48>
   1648c:	cmp	r0, #0
   16490:	popne	{r4, pc}
   16494:	bl	16acc <__assert_fail@plt+0x5dc0>
   16498:	push	{r4, lr}
   1649c:	bl	16b54 <__assert_fail@plt+0x5e48>
   164a0:	cmp	r0, #0
   164a4:	popne	{r4, pc}
   164a8:	bl	16acc <__assert_fail@plt+0x5dc0>
   164ac:	push	{r4, lr}
   164b0:	bl	16b54 <__assert_fail@plt+0x5e48>
   164b4:	cmp	r0, #0
   164b8:	popne	{r4, pc}
   164bc:	bl	16acc <__assert_fail@plt+0x5dc0>
   164c0:	push	{r4, r5, r6, lr}
   164c4:	mov	r5, r0
   164c8:	mov	r4, r1
   164cc:	bl	16b80 <__assert_fail@plt+0x5e74>
   164d0:	cmp	r0, #0
   164d4:	popne	{r4, r5, r6, pc}
   164d8:	adds	r4, r4, #0
   164dc:	movne	r4, #1
   164e0:	cmp	r5, #0
   164e4:	orreq	r4, r4, #1
   164e8:	cmp	r4, #0
   164ec:	popeq	{r4, r5, r6, pc}
   164f0:	bl	16acc <__assert_fail@plt+0x5dc0>
   164f4:	push	{r4, lr}
   164f8:	cmp	r1, #0
   164fc:	orreq	r1, r1, #1
   16500:	bl	16b80 <__assert_fail@plt+0x5e74>
   16504:	cmp	r0, #0
   16508:	popne	{r4, pc}
   1650c:	bl	16acc <__assert_fail@plt+0x5dc0>
   16510:	push	{r4, r5, r6, lr}
   16514:	mov	r6, r0
   16518:	mov	r5, r1
   1651c:	mov	r4, r2
   16520:	bl	16ed8 <__assert_fail@plt+0x61cc>
   16524:	cmp	r0, #0
   16528:	popne	{r4, r5, r6, pc}
   1652c:	cmp	r6, #0
   16530:	beq	16540 <__assert_fail@plt+0x5834>
   16534:	cmp	r5, #0
   16538:	cmpne	r4, #0
   1653c:	popeq	{r4, r5, r6, pc}
   16540:	bl	16acc <__assert_fail@plt+0x5dc0>
   16544:	cmp	r2, #0
   16548:	cmpne	r1, #0
   1654c:	moveq	r2, #1
   16550:	moveq	r1, r2
   16554:	push	{r4, lr}
   16558:	bl	16ed8 <__assert_fail@plt+0x61cc>
   1655c:	cmp	r0, #0
   16560:	popne	{r4, pc}
   16564:	bl	16acc <__assert_fail@plt+0x5dc0>
   16568:	push	{r4, lr}
   1656c:	mov	r2, r1
   16570:	mov	r1, r0
   16574:	mov	r0, #0
   16578:	bl	16ed8 <__assert_fail@plt+0x61cc>
   1657c:	cmp	r0, #0
   16580:	popne	{r4, pc}
   16584:	bl	16acc <__assert_fail@plt+0x5dc0>
   16588:	cmp	r1, #0
   1658c:	cmpne	r0, #0
   16590:	moveq	r2, #1
   16594:	movne	r2, r1
   16598:	moveq	r1, r2
   1659c:	movne	r1, r0
   165a0:	push	{r4, lr}
   165a4:	mov	r0, #0
   165a8:	bl	16ed8 <__assert_fail@plt+0x61cc>
   165ac:	cmp	r0, #0
   165b0:	popne	{r4, pc}
   165b4:	bl	16acc <__assert_fail@plt+0x5dc0>
   165b8:	cmp	r0, #0
   165bc:	push	{r4, r5, r6, lr}
   165c0:	mov	r5, r1
   165c4:	ldr	r4, [r1]
   165c8:	beq	16604 <__assert_fail@plt+0x58f8>
   165cc:	lsr	r2, r4, #1
   165d0:	add	r3, r2, #1
   165d4:	mvn	r3, r3
   165d8:	cmp	r4, r3
   165dc:	bhi	16620 <__assert_fail@plt+0x5914>
   165e0:	add	r4, r4, #1
   165e4:	add	r4, r4, r2
   165e8:	mov	r1, r4
   165ec:	mov	r2, #1
   165f0:	bl	16ed8 <__assert_fail@plt+0x61cc>
   165f4:	cmp	r0, #0
   165f8:	beq	16624 <__assert_fail@plt+0x5918>
   165fc:	str	r4, [r5]
   16600:	pop	{r4, r5, r6, pc}
   16604:	cmp	r4, #0
   16608:	moveq	r4, #64	; 0x40
   1660c:	mov	r1, r4
   16610:	mov	r2, #1
   16614:	bl	16ed8 <__assert_fail@plt+0x61cc>
   16618:	cmp	r0, #0
   1661c:	bne	165fc <__assert_fail@plt+0x58f0>
   16620:	bl	16acc <__assert_fail@plt+0x5dc0>
   16624:	cmp	r4, #0
   16628:	bne	16620 <__assert_fail@plt+0x5914>
   1662c:	str	r4, [r5]
   16630:	pop	{r4, r5, r6, pc}
   16634:	cmp	r0, #0
   16638:	push	{r4, r5, r6, lr}
   1663c:	mov	r5, r1
   16640:	ldr	r4, [r1]
   16644:	mov	r6, r2
   16648:	beq	1668c <__assert_fail@plt+0x5980>
   1664c:	lsr	r1, r4, #1
   16650:	add	r3, r1, #1
   16654:	mvn	r3, r3
   16658:	cmp	r4, r3
   1665c:	bhi	166c4 <__assert_fail@plt+0x59b8>
   16660:	add	r4, r4, #1
   16664:	add	r4, r4, r1
   16668:	mov	r1, r4
   1666c:	bl	16ed8 <__assert_fail@plt+0x61cc>
   16670:	cmp	r0, #0
   16674:	bne	16684 <__assert_fail@plt+0x5978>
   16678:	cmp	r4, #0
   1667c:	cmpne	r6, #0
   16680:	bne	166c4 <__assert_fail@plt+0x59b8>
   16684:	str	r4, [r5]
   16688:	pop	{r4, r5, r6, pc}
   1668c:	cmp	r4, #0
   16690:	bne	166ac <__assert_fail@plt+0x59a0>
   16694:	mov	r1, r2
   16698:	mov	r0, #64	; 0x40
   1669c:	bl	17018 <__assert_fail@plt+0x630c>
   166a0:	cmp	r0, #0
   166a4:	movne	r4, r0
   166a8:	addeq	r4, r0, #1
   166ac:	mov	r2, r6
   166b0:	mov	r1, r4
   166b4:	mov	r0, #0
   166b8:	bl	16ed8 <__assert_fail@plt+0x61cc>
   166bc:	cmp	r0, #0
   166c0:	bne	16684 <__assert_fail@plt+0x5978>
   166c4:	bl	16acc <__assert_fail@plt+0x5dc0>
   166c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166cc:	sub	sp, sp, #12
   166d0:	ldr	r6, [r1]
   166d4:	mov	r8, r1
   166d8:	mov	r9, r0
   166dc:	asrs	r4, r6, #1
   166e0:	mov	sl, r2
   166e4:	mov	fp, r3
   166e8:	ldr	r7, [sp, #48]	; 0x30
   166ec:	bmi	16868 <__assert_fail@plt+0x5b5c>
   166f0:	mvn	r1, #-2147483648	; 0x80000000
   166f4:	sub	r1, r1, r4
   166f8:	cmp	r6, r1
   166fc:	movle	r1, #0
   16700:	movgt	r1, #1
   16704:	mvn	r3, fp
   16708:	cmp	r1, #0
   1670c:	addeq	r4, r4, r6
   16710:	mvnne	r4, #-2147483648	; 0x80000000
   16714:	lsr	r3, r3, #31
   16718:	cmp	fp, r4
   1671c:	movge	r2, #0
   16720:	andlt	r2, r3, #1
   16724:	cmp	r2, #0
   16728:	beq	16818 <__assert_fail@plt+0x5b0c>
   1672c:	cmp	r7, #0
   16730:	blt	16900 <__assert_fail@plt+0x5bf4>
   16734:	bne	168f8 <__assert_fail@plt+0x5bec>
   16738:	mov	r5, #64	; 0x40
   1673c:	mov	r1, r7
   16740:	mov	r0, r5
   16744:	str	r3, [sp, #4]
   16748:	bl	17224 <__assert_fail@plt+0x6518>
   1674c:	mov	r1, r7
   16750:	mov	r4, r0
   16754:	mov	r0, r5
   16758:	bl	17444 <__assert_fail@plt+0x6738>
   1675c:	ldr	r3, [sp, #4]
   16760:	sub	r5, r5, r1
   16764:	cmp	r9, #0
   16768:	sub	r2, r4, r6
   1676c:	streq	r9, [r8]
   16770:	cmp	r2, sl
   16774:	bge	167f8 <__assert_fail@plt+0x5aec>
   16778:	cmp	sl, #0
   1677c:	blt	16898 <__assert_fail@plt+0x5b8c>
   16780:	cmp	r6, #0
   16784:	blt	167a4 <__assert_fail@plt+0x5a98>
   16788:	mvn	r2, #-2147483648	; 0x80000000
   1678c:	sub	r2, r2, sl
   16790:	cmp	r6, r2
   16794:	movle	r2, #0
   16798:	movgt	r2, #1
   1679c:	cmp	r2, #0
   167a0:	bne	16894 <__assert_fail@plt+0x5b88>
   167a4:	add	r6, r6, sl
   167a8:	cmp	fp, r6
   167ac:	movge	r3, #0
   167b0:	andlt	r3, r3, #1
   167b4:	cmp	r3, #0
   167b8:	mov	r4, r6
   167bc:	bne	16894 <__assert_fail@plt+0x5b88>
   167c0:	cmp	r7, #0
   167c4:	blt	168ac <__assert_fail@plt+0x5ba0>
   167c8:	beq	167f4 <__assert_fail@plt+0x5ae8>
   167cc:	cmp	r6, #0
   167d0:	blt	16950 <__assert_fail@plt+0x5c44>
   167d4:	mov	r1, r7
   167d8:	mvn	r0, #-2147483648	; 0x80000000
   167dc:	bl	17224 <__assert_fail@plt+0x6518>
   167e0:	cmp	r6, r0
   167e4:	movle	r0, #0
   167e8:	movgt	r0, #1
   167ec:	cmp	r0, #0
   167f0:	bne	16894 <__assert_fail@plt+0x5b88>
   167f4:	mul	r5, r6, r7
   167f8:	mov	r1, r5
   167fc:	mov	r0, r9
   16800:	bl	16b80 <__assert_fail@plt+0x5e74>
   16804:	cmp	r0, #0
   16808:	beq	1687c <__assert_fail@plt+0x5b70>
   1680c:	str	r4, [r8]
   16810:	add	sp, sp, #12
   16814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16818:	cmp	r7, #0
   1681c:	blt	168d8 <__assert_fail@plt+0x5bcc>
   16820:	beq	16738 <__assert_fail@plt+0x5a2c>
   16824:	cmp	r4, #0
   16828:	blt	16908 <__assert_fail@plt+0x5bfc>
   1682c:	mov	r1, r7
   16830:	mvn	r0, #-2147483648	; 0x80000000
   16834:	str	r3, [sp, #4]
   16838:	bl	17224 <__assert_fail@plt+0x6518>
   1683c:	ldr	r3, [sp, #4]
   16840:	cmp	r0, r4
   16844:	movge	r0, #0
   16848:	movlt	r0, #1
   1684c:	cmp	r0, #0
   16850:	mvnne	r5, #-2147483648	; 0x80000000
   16854:	bne	1673c <__assert_fail@plt+0x5a30>
   16858:	mul	r5, r7, r4
   1685c:	cmp	r5, #63	; 0x3f
   16860:	bgt	16764 <__assert_fail@plt+0x5a58>
   16864:	b	16738 <__assert_fail@plt+0x5a2c>
   16868:	rsb	r1, r4, #-2147483648	; 0x80000000
   1686c:	cmp	r6, r1
   16870:	movge	r1, #0
   16874:	movlt	r1, #1
   16878:	b	16704 <__assert_fail@plt+0x59f8>
   1687c:	adds	r5, r5, #0
   16880:	movne	r5, #1
   16884:	cmp	r9, #0
   16888:	orreq	r5, r5, #1
   1688c:	cmp	r5, #0
   16890:	beq	1680c <__assert_fail@plt+0x5b00>
   16894:	bl	16acc <__assert_fail@plt+0x5dc0>
   16898:	rsb	r2, sl, #-2147483648	; 0x80000000
   1689c:	cmp	r6, r2
   168a0:	movge	r2, #0
   168a4:	movlt	r2, #1
   168a8:	b	1679c <__assert_fail@plt+0x5a90>
   168ac:	cmp	r6, #0
   168b0:	blt	16934 <__assert_fail@plt+0x5c28>
   168b4:	cmn	r7, #1
   168b8:	beq	167f4 <__assert_fail@plt+0x5ae8>
   168bc:	mov	r1, r7
   168c0:	mov	r0, #-2147483648	; 0x80000000
   168c4:	bl	17224 <__assert_fail@plt+0x6518>
   168c8:	cmp	r6, r0
   168cc:	movle	r0, #0
   168d0:	movgt	r0, #1
   168d4:	b	167ec <__assert_fail@plt+0x5ae0>
   168d8:	cmp	r4, #0
   168dc:	blt	16974 <__assert_fail@plt+0x5c68>
   168e0:	cmn	r7, #1
   168e4:	beq	16858 <__assert_fail@plt+0x5b4c>
   168e8:	str	r3, [sp, #4]
   168ec:	mov	r1, r7
   168f0:	mov	r0, #-2147483648	; 0x80000000
   168f4:	b	16838 <__assert_fail@plt+0x5b2c>
   168f8:	mov	r4, fp
   168fc:	b	1682c <__assert_fail@plt+0x5b20>
   16900:	mov	r4, fp
   16904:	b	168e0 <__assert_fail@plt+0x5bd4>
   16908:	cmn	r4, #1
   1690c:	beq	16858 <__assert_fail@plt+0x5b4c>
   16910:	mov	r1, r4
   16914:	mov	r0, #-2147483648	; 0x80000000
   16918:	str	r3, [sp, #4]
   1691c:	bl	17224 <__assert_fail@plt+0x6518>
   16920:	ldr	r3, [sp, #4]
   16924:	cmp	r7, r0
   16928:	movle	r0, #0
   1692c:	movgt	r0, #1
   16930:	b	1684c <__assert_fail@plt+0x5b40>
   16934:	mov	r1, r7
   16938:	mvn	r0, #-2147483648	; 0x80000000
   1693c:	bl	17224 <__assert_fail@plt+0x6518>
   16940:	cmp	r6, r0
   16944:	movge	r0, #0
   16948:	movlt	r0, #1
   1694c:	b	167ec <__assert_fail@plt+0x5ae0>
   16950:	cmn	r6, #1
   16954:	beq	167f4 <__assert_fail@plt+0x5ae8>
   16958:	mov	r1, r6
   1695c:	mov	r0, #-2147483648	; 0x80000000
   16960:	bl	17224 <__assert_fail@plt+0x6518>
   16964:	cmp	r7, r0
   16968:	movle	r0, #0
   1696c:	movgt	r0, #1
   16970:	b	167ec <__assert_fail@plt+0x5ae0>
   16974:	mov	r1, r7
   16978:	mvn	r0, #-2147483648	; 0x80000000
   1697c:	str	r3, [sp, #4]
   16980:	bl	17224 <__assert_fail@plt+0x6518>
   16984:	ldr	r3, [sp, #4]
   16988:	cmp	r0, r4
   1698c:	movle	r0, #0
   16990:	movgt	r0, #1
   16994:	b	1684c <__assert_fail@plt+0x5b40>
   16998:	push	{r4, lr}
   1699c:	mov	r1, #1
   169a0:	bl	16b0c <__assert_fail@plt+0x5e00>
   169a4:	cmp	r0, #0
   169a8:	popne	{r4, pc}
   169ac:	bl	16acc <__assert_fail@plt+0x5dc0>
   169b0:	push	{r4, lr}
   169b4:	mov	r1, #1
   169b8:	bl	16b0c <__assert_fail@plt+0x5e00>
   169bc:	cmp	r0, #0
   169c0:	popne	{r4, pc}
   169c4:	bl	16acc <__assert_fail@plt+0x5dc0>
   169c8:	push	{r4, lr}
   169cc:	bl	16b0c <__assert_fail@plt+0x5e00>
   169d0:	cmp	r0, #0
   169d4:	popne	{r4, pc}
   169d8:	bl	16acc <__assert_fail@plt+0x5dc0>
   169dc:	push	{r4, lr}
   169e0:	bl	16b0c <__assert_fail@plt+0x5e00>
   169e4:	cmp	r0, #0
   169e8:	popne	{r4, pc}
   169ec:	bl	16acc <__assert_fail@plt+0x5dc0>
   169f0:	push	{r4, r5, r6, lr}
   169f4:	mov	r6, r0
   169f8:	mov	r0, r1
   169fc:	mov	r4, r1
   16a00:	bl	16b54 <__assert_fail@plt+0x5e48>
   16a04:	subs	r5, r0, #0
   16a08:	beq	16a20 <__assert_fail@plt+0x5d14>
   16a0c:	mov	r2, r4
   16a10:	mov	r1, r6
   16a14:	bl	10b50 <memcpy@plt>
   16a18:	mov	r0, r5
   16a1c:	pop	{r4, r5, r6, pc}
   16a20:	bl	16acc <__assert_fail@plt+0x5dc0>
   16a24:	push	{r4, r5, r6, lr}
   16a28:	mov	r6, r0
   16a2c:	mov	r0, r1
   16a30:	mov	r4, r1
   16a34:	bl	16b54 <__assert_fail@plt+0x5e48>
   16a38:	subs	r5, r0, #0
   16a3c:	beq	16a54 <__assert_fail@plt+0x5d48>
   16a40:	mov	r2, r4
   16a44:	mov	r1, r6
   16a48:	bl	10b50 <memcpy@plt>
   16a4c:	mov	r0, r5
   16a50:	pop	{r4, r5, r6, pc}
   16a54:	bl	16acc <__assert_fail@plt+0x5dc0>
   16a58:	push	{r4, r5, r6, lr}
   16a5c:	mov	r6, r0
   16a60:	add	r0, r1, #1
   16a64:	mov	r4, r1
   16a68:	bl	16b54 <__assert_fail@plt+0x5e48>
   16a6c:	subs	r5, r0, #0
   16a70:	beq	16a90 <__assert_fail@plt+0x5d84>
   16a74:	mov	r3, #0
   16a78:	mov	r1, r6
   16a7c:	strb	r3, [r5, r4]
   16a80:	mov	r2, r4
   16a84:	bl	10b50 <memcpy@plt>
   16a88:	mov	r0, r5
   16a8c:	pop	{r4, r5, r6, pc}
   16a90:	bl	16acc <__assert_fail@plt+0x5dc0>
   16a94:	push	{r4, r5, r6, lr}
   16a98:	mov	r6, r0
   16a9c:	bl	10c4c <strlen@plt>
   16aa0:	add	r4, r0, #1
   16aa4:	mov	r0, r4
   16aa8:	bl	16b54 <__assert_fail@plt+0x5e48>
   16aac:	subs	r5, r0, #0
   16ab0:	beq	16ac8 <__assert_fail@plt+0x5dbc>
   16ab4:	mov	r2, r4
   16ab8:	mov	r1, r6
   16abc:	bl	10b50 <memcpy@plt>
   16ac0:	mov	r0, r5
   16ac4:	pop	{r4, r5, r6, pc}
   16ac8:	bl	16acc <__assert_fail@plt+0x5dc0>
   16acc:	ldr	r3, [pc, #44]	; 16b00 <__assert_fail@plt+0x5df4>
   16ad0:	push	{r4, lr}
   16ad4:	mov	r2, #5
   16ad8:	ldr	r1, [pc, #36]	; 16b04 <__assert_fail@plt+0x5df8>
   16adc:	mov	r0, #0
   16ae0:	ldr	r4, [r3]
   16ae4:	bl	10b80 <dcgettext@plt>
   16ae8:	ldr	r2, [pc, #24]	; 16b08 <__assert_fail@plt+0x5dfc>
   16aec:	mov	r1, #0
   16af0:	mov	r3, r0
   16af4:	mov	r0, r4
   16af8:	bl	10bec <error@plt>
   16afc:	bl	10d00 <abort@plt>
   16b00:	ldrdeq	r9, [r2], -r0
   16b04:	andeq	r7, r1, r4, asr #31
   16b08:	andeq	r7, r1, r8, lsl #23
   16b0c:	cmp	r1, #0
   16b10:	cmpne	r0, #0
   16b14:	moveq	r1, #1
   16b18:	moveq	r0, r1
   16b1c:	umull	r2, r3, r0, r1
   16b20:	adds	r3, r3, #0
   16b24:	movne	r3, #1
   16b28:	cmp	r2, #0
   16b2c:	blt	16b3c <__assert_fail@plt+0x5e30>
   16b30:	cmp	r3, #0
   16b34:	bne	16b3c <__assert_fail@plt+0x5e30>
   16b38:	b	10afc <calloc@plt>
   16b3c:	push	{r4, lr}
   16b40:	bl	10c58 <__errno_location@plt>
   16b44:	mov	r3, #12
   16b48:	str	r3, [r0]
   16b4c:	mov	r0, #0
   16b50:	pop	{r4, pc}
   16b54:	cmp	r0, #0
   16b58:	moveq	r0, #1
   16b5c:	cmp	r0, #0
   16b60:	blt	16b68 <__assert_fail@plt+0x5e5c>
   16b64:	b	10c04 <malloc@plt>
   16b68:	push	{r4, lr}
   16b6c:	bl	10c58 <__errno_location@plt>
   16b70:	mov	r3, #12
   16b74:	str	r3, [r0]
   16b78:	mov	r0, #0
   16b7c:	pop	{r4, pc}
   16b80:	cmp	r0, #0
   16b84:	beq	16ba8 <__assert_fail@plt+0x5e9c>
   16b88:	cmp	r1, #0
   16b8c:	push	{lr}		; (str lr, [sp, #-4]!)
   16b90:	sub	sp, sp, #12
   16b94:	beq	16bb0 <__assert_fail@plt+0x5ea4>
   16b98:	blt	16bc8 <__assert_fail@plt+0x5ebc>
   16b9c:	add	sp, sp, #12
   16ba0:	pop	{lr}		; (ldr lr, [sp], #4)
   16ba4:	b	10b8c <realloc@plt>
   16ba8:	mov	r0, r1
   16bac:	b	16b54 <__assert_fail@plt+0x5e48>
   16bb0:	str	r1, [sp, #4]
   16bb4:	bl	16d58 <__assert_fail@plt+0x604c>
   16bb8:	ldr	r3, [sp, #4]
   16bbc:	mov	r0, r3
   16bc0:	add	sp, sp, #12
   16bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc8:	bl	10c58 <__errno_location@plt>
   16bcc:	mov	r2, #12
   16bd0:	mov	r3, #0
   16bd4:	str	r2, [r0]
   16bd8:	b	16bbc <__assert_fail@plt+0x5eb0>
   16bdc:	push	{r4, r5, r6, lr}
   16be0:	mov	r4, r0
   16be4:	bl	10bd4 <__fpending@plt>
   16be8:	ldr	r5, [r4]
   16bec:	and	r5, r5, #32
   16bf0:	mov	r6, r0
   16bf4:	mov	r0, r4
   16bf8:	bl	16c58 <__assert_fail@plt+0x5f4c>
   16bfc:	cmp	r5, #0
   16c00:	mov	r4, r0
   16c04:	bne	16c24 <__assert_fail@plt+0x5f18>
   16c08:	cmp	r0, #0
   16c0c:	beq	16c1c <__assert_fail@plt+0x5f10>
   16c10:	cmp	r6, #0
   16c14:	beq	16c40 <__assert_fail@plt+0x5f34>
   16c18:	mvn	r4, #0
   16c1c:	mov	r0, r4
   16c20:	pop	{r4, r5, r6, pc}
   16c24:	cmp	r0, #0
   16c28:	bne	16c18 <__assert_fail@plt+0x5f0c>
   16c2c:	bl	10c58 <__errno_location@plt>
   16c30:	str	r4, [r0]
   16c34:	mvn	r4, #0
   16c38:	mov	r0, r4
   16c3c:	pop	{r4, r5, r6, pc}
   16c40:	bl	10c58 <__errno_location@plt>
   16c44:	ldr	r4, [r0]
   16c48:	subs	r4, r4, #9
   16c4c:	mvnne	r4, #0
   16c50:	mov	r0, r4
   16c54:	pop	{r4, r5, r6, pc}
   16c58:	push	{r4, r5, lr}
   16c5c:	sub	sp, sp, #12
   16c60:	mov	r4, r0
   16c64:	bl	10c88 <fileno@plt>
   16c68:	cmp	r0, #0
   16c6c:	mov	r0, r4
   16c70:	blt	16cec <__assert_fail@plt+0x5fe0>
   16c74:	bl	10c1c <__freading@plt>
   16c78:	cmp	r0, #0
   16c7c:	bne	16cb8 <__assert_fail@plt+0x5fac>
   16c80:	mov	r0, r4
   16c84:	bl	16cf8 <__assert_fail@plt+0x5fec>
   16c88:	cmp	r0, #0
   16c8c:	beq	16ce8 <__assert_fail@plt+0x5fdc>
   16c90:	bl	10c58 <__errno_location@plt>
   16c94:	mov	r5, r0
   16c98:	mov	r0, r4
   16c9c:	ldr	r4, [r5]
   16ca0:	bl	10ca0 <fclose@plt>
   16ca4:	cmp	r4, #0
   16ca8:	mvnne	r0, #0
   16cac:	strne	r4, [r5]
   16cb0:	add	sp, sp, #12
   16cb4:	pop	{r4, r5, pc}
   16cb8:	mov	r0, r4
   16cbc:	bl	10c88 <fileno@plt>
   16cc0:	mov	r3, #1
   16cc4:	str	r3, [sp]
   16cc8:	mov	r2, #0
   16ccc:	mov	r3, #0
   16cd0:	bl	10bbc <lseek64@plt>
   16cd4:	mvn	r3, #0
   16cd8:	mvn	r2, #0
   16cdc:	cmp	r1, r3
   16ce0:	cmpeq	r0, r2
   16ce4:	bne	16c80 <__assert_fail@plt+0x5f74>
   16ce8:	mov	r0, r4
   16cec:	add	sp, sp, #12
   16cf0:	pop	{r4, r5, lr}
   16cf4:	b	10ca0 <fclose@plt>
   16cf8:	push	{r4, lr}
   16cfc:	subs	r4, r0, #0
   16d00:	sub	sp, sp, #8
   16d04:	beq	16d20 <__assert_fail@plt+0x6014>
   16d08:	bl	10c1c <__freading@plt>
   16d0c:	cmp	r0, #0
   16d10:	beq	16d20 <__assert_fail@plt+0x6014>
   16d14:	ldr	r3, [r4]
   16d18:	tst	r3, #256	; 0x100
   16d1c:	bne	16d30 <__assert_fail@plt+0x6024>
   16d20:	mov	r0, r4
   16d24:	add	sp, sp, #8
   16d28:	pop	{r4, lr}
   16d2c:	b	10b2c <fflush@plt>
   16d30:	mov	r3, #1
   16d34:	str	r3, [sp]
   16d38:	mov	r2, #0
   16d3c:	mov	r3, #0
   16d40:	mov	r0, r4
   16d44:	bl	16db0 <__assert_fail@plt+0x60a4>
   16d48:	mov	r0, r4
   16d4c:	add	sp, sp, #8
   16d50:	pop	{r4, lr}
   16d54:	b	10b2c <fflush@plt>
   16d58:	push	{r4, r5, lr}
   16d5c:	sub	sp, sp, #12
   16d60:	mov	r5, r0
   16d64:	bl	10c58 <__errno_location@plt>
   16d68:	mov	r2, #0
   16d6c:	mov	r4, r0
   16d70:	ldr	r3, [r0]
   16d74:	str	r2, [r4]
   16d78:	mov	r0, r5
   16d7c:	str	r3, [sp]
   16d80:	str	r3, [sp, #4]
   16d84:	bl	10b38 <free@plt>
   16d88:	ldr	r3, [r4]
   16d8c:	add	r2, sp, #8
   16d90:	cmp	r3, #0
   16d94:	moveq	r3, #4
   16d98:	movne	r3, #0
   16d9c:	add	r3, r2, r3
   16da0:	ldr	r3, [r3, #-8]
   16da4:	str	r3, [r4]
   16da8:	add	sp, sp, #12
   16dac:	pop	{r4, r5, pc}
   16db0:	push	{r4, r5, r6, r7, r8, lr}
   16db4:	sub	sp, sp, #8
   16db8:	ldmib	r0, {ip, lr}
   16dbc:	mov	r4, r0
   16dc0:	ldr	r5, [sp, #32]
   16dc4:	cmp	lr, ip
   16dc8:	beq	16de0 <__assert_fail@plt+0x60d4>
   16dcc:	str	r5, [sp, #32]
   16dd0:	mov	r0, r4
   16dd4:	add	sp, sp, #8
   16dd8:	pop	{r4, r5, r6, r7, r8, lr}
   16ddc:	b	10cac <fseeko64@plt>
   16de0:	ldr	lr, [r0, #20]
   16de4:	ldr	ip, [r0, #16]
   16de8:	cmp	lr, ip
   16dec:	bne	16dcc <__assert_fail@plt+0x60c0>
   16df0:	ldr	r8, [r0, #36]	; 0x24
   16df4:	cmp	r8, #0
   16df8:	bne	16dcc <__assert_fail@plt+0x60c0>
   16dfc:	mov	r6, r2
   16e00:	mov	r7, r3
   16e04:	bl	10c88 <fileno@plt>
   16e08:	mov	r2, r6
   16e0c:	mov	r3, r7
   16e10:	str	r5, [sp]
   16e14:	bl	10bbc <lseek64@plt>
   16e18:	mvn	r3, #0
   16e1c:	mvn	r2, #0
   16e20:	cmp	r1, r3
   16e24:	cmpeq	r0, r2
   16e28:	beq	16e48 <__assert_fail@plt+0x613c>
   16e2c:	ldr	r3, [r4]
   16e30:	strd	r0, [r4, #80]	; 0x50
   16e34:	mov	r0, r8
   16e38:	bic	r3, r3, #16
   16e3c:	str	r3, [r4]
   16e40:	add	sp, sp, #8
   16e44:	pop	{r4, r5, r6, r7, r8, pc}
   16e48:	mvn	r0, #0
   16e4c:	b	16e40 <__assert_fail@plt+0x6134>
   16e50:	push	{r4, lr}
   16e54:	mov	r0, #14
   16e58:	bl	10cdc <nl_langinfo@plt>
   16e5c:	cmp	r0, #0
   16e60:	beq	16e78 <__assert_fail@plt+0x616c>
   16e64:	ldrb	r2, [r0]
   16e68:	ldr	r3, [pc, #16]	; 16e80 <__assert_fail@plt+0x6174>
   16e6c:	cmp	r2, #0
   16e70:	moveq	r0, r3
   16e74:	pop	{r4, pc}
   16e78:	ldr	r0, [pc]	; 16e80 <__assert_fail@plt+0x6174>
   16e7c:	pop	{r4, pc}
   16e80:	ldrdeq	r7, [r1], -r8
   16e84:	push	{r4, r5, r6, r7, lr}
   16e88:	subs	r6, r0, #0
   16e8c:	sub	sp, sp, #12
   16e90:	addeq	r6, sp, #4
   16e94:	mov	r0, r6
   16e98:	mov	r5, r2
   16e9c:	mov	r7, r1
   16ea0:	bl	10be0 <mbrtowc@plt>
   16ea4:	cmp	r5, #0
   16ea8:	cmnne	r0, #3
   16eac:	mov	r4, r0
   16eb0:	bls	16ecc <__assert_fail@plt+0x61c0>
   16eb4:	mov	r0, #0
   16eb8:	bl	16f24 <__assert_fail@plt+0x6218>
   16ebc:	cmp	r0, #0
   16ec0:	moveq	r4, #1
   16ec4:	ldrbeq	r3, [r7]
   16ec8:	streq	r3, [r6]
   16ecc:	mov	r0, r4
   16ed0:	add	sp, sp, #12
   16ed4:	pop	{r4, r5, r6, r7, pc}
   16ed8:	push	{r4, r5, r6, lr}
   16edc:	subs	r4, r2, #0
   16ee0:	mov	r6, r0
   16ee4:	mov	r5, r1
   16ee8:	beq	16f14 <__assert_fail@plt+0x6208>
   16eec:	mov	r1, r4
   16ef0:	mvn	r0, #0
   16ef4:	bl	17018 <__assert_fail@plt+0x630c>
   16ef8:	cmp	r0, r5
   16efc:	bcs	16f14 <__assert_fail@plt+0x6208>
   16f00:	bl	10c58 <__errno_location@plt>
   16f04:	mov	r3, #12
   16f08:	str	r3, [r0]
   16f0c:	mov	r0, #0
   16f10:	pop	{r4, r5, r6, pc}
   16f14:	mul	r1, r5, r4
   16f18:	mov	r0, r6
   16f1c:	pop	{r4, r5, r6, lr}
   16f20:	b	16b80 <__assert_fail@plt+0x5e74>
   16f24:	push	{lr}		; (str lr, [sp, #-4]!)
   16f28:	sub	sp, sp, #268	; 0x10c
   16f2c:	add	r1, sp, #4
   16f30:	ldr	r2, [pc, #60]	; 16f74 <__assert_fail@plt+0x6268>
   16f34:	bl	16f80 <__assert_fail@plt+0x6274>
   16f38:	cmp	r0, #0
   16f3c:	movne	r0, #0
   16f40:	bne	16f6c <__assert_fail@plt+0x6260>
   16f44:	ldr	r1, [pc, #44]	; 16f78 <__assert_fail@plt+0x626c>
   16f48:	add	r0, sp, #4
   16f4c:	bl	10b20 <strcmp@plt>
   16f50:	cmp	r0, #0
   16f54:	beq	16f6c <__assert_fail@plt+0x6260>
   16f58:	add	r0, sp, #4
   16f5c:	ldr	r1, [pc, #24]	; 16f7c <__assert_fail@plt+0x6270>
   16f60:	bl	10b20 <strcmp@plt>
   16f64:	adds	r0, r0, #0
   16f68:	movne	r0, #1
   16f6c:	add	sp, sp, #268	; 0x10c
   16f70:	pop	{pc}		; (ldr pc, [sp], #4)
   16f74:	andeq	r0, r0, r1, lsl #2
   16f78:	andeq	r7, r1, r0, ror #31
   16f7c:	andeq	r7, r1, r4, ror #31
   16f80:	push	{r4, r5, r6, lr}
   16f84:	mov	r5, r1
   16f88:	mov	r1, #0
   16f8c:	mov	r4, r2
   16f90:	bl	10cc4 <setlocale@plt>
   16f94:	subs	r6, r0, #0
   16f98:	beq	16ff4 <__assert_fail@plt+0x62e8>
   16f9c:	bl	10c4c <strlen@plt>
   16fa0:	cmp	r4, r0
   16fa4:	bhi	16fdc <__assert_fail@plt+0x62d0>
   16fa8:	cmp	r4, #0
   16fac:	bne	16fb8 <__assert_fail@plt+0x62ac>
   16fb0:	mov	r0, #34	; 0x22
   16fb4:	pop	{r4, r5, r6, pc}
   16fb8:	sub	r4, r4, #1
   16fbc:	mov	r1, r6
   16fc0:	mov	r2, r4
   16fc4:	mov	r0, r5
   16fc8:	bl	10b50 <memcpy@plt>
   16fcc:	mov	r3, #0
   16fd0:	strb	r3, [r5, r4]
   16fd4:	mov	r0, #34	; 0x22
   16fd8:	pop	{r4, r5, r6, pc}
   16fdc:	add	r2, r0, #1
   16fe0:	mov	r1, r6
   16fe4:	mov	r0, r5
   16fe8:	bl	10b50 <memcpy@plt>
   16fec:	mov	r0, #0
   16ff0:	pop	{r4, r5, r6, pc}
   16ff4:	cmp	r4, #0
   16ff8:	beq	17008 <__assert_fail@plt+0x62fc>
   16ffc:	strb	r6, [r5]
   17000:	mov	r0, #22
   17004:	pop	{r4, r5, r6, pc}
   17008:	mov	r0, #22
   1700c:	pop	{r4, r5, r6, pc}
   17010:	mov	r1, #0
   17014:	b	10cc4 <setlocale@plt>
   17018:	subs	r2, r1, #1
   1701c:	bxeq	lr
   17020:	bcc	171f8 <__assert_fail@plt+0x64ec>
   17024:	cmp	r0, r1
   17028:	bls	171dc <__assert_fail@plt+0x64d0>
   1702c:	tst	r1, r2
   17030:	beq	171e8 <__assert_fail@plt+0x64dc>
   17034:	clz	r3, r0
   17038:	clz	r2, r1
   1703c:	sub	r3, r2, r3
   17040:	rsbs	r3, r3, #31
   17044:	addne	r3, r3, r3, lsl #1
   17048:	mov	r2, #0
   1704c:	addne	pc, pc, r3, lsl #2
   17050:	nop			; (mov r0, r0)
   17054:	cmp	r0, r1, lsl #31
   17058:	adc	r2, r2, r2
   1705c:	subcs	r0, r0, r1, lsl #31
   17060:	cmp	r0, r1, lsl #30
   17064:	adc	r2, r2, r2
   17068:	subcs	r0, r0, r1, lsl #30
   1706c:	cmp	r0, r1, lsl #29
   17070:	adc	r2, r2, r2
   17074:	subcs	r0, r0, r1, lsl #29
   17078:	cmp	r0, r1, lsl #28
   1707c:	adc	r2, r2, r2
   17080:	subcs	r0, r0, r1, lsl #28
   17084:	cmp	r0, r1, lsl #27
   17088:	adc	r2, r2, r2
   1708c:	subcs	r0, r0, r1, lsl #27
   17090:	cmp	r0, r1, lsl #26
   17094:	adc	r2, r2, r2
   17098:	subcs	r0, r0, r1, lsl #26
   1709c:	cmp	r0, r1, lsl #25
   170a0:	adc	r2, r2, r2
   170a4:	subcs	r0, r0, r1, lsl #25
   170a8:	cmp	r0, r1, lsl #24
   170ac:	adc	r2, r2, r2
   170b0:	subcs	r0, r0, r1, lsl #24
   170b4:	cmp	r0, r1, lsl #23
   170b8:	adc	r2, r2, r2
   170bc:	subcs	r0, r0, r1, lsl #23
   170c0:	cmp	r0, r1, lsl #22
   170c4:	adc	r2, r2, r2
   170c8:	subcs	r0, r0, r1, lsl #22
   170cc:	cmp	r0, r1, lsl #21
   170d0:	adc	r2, r2, r2
   170d4:	subcs	r0, r0, r1, lsl #21
   170d8:	cmp	r0, r1, lsl #20
   170dc:	adc	r2, r2, r2
   170e0:	subcs	r0, r0, r1, lsl #20
   170e4:	cmp	r0, r1, lsl #19
   170e8:	adc	r2, r2, r2
   170ec:	subcs	r0, r0, r1, lsl #19
   170f0:	cmp	r0, r1, lsl #18
   170f4:	adc	r2, r2, r2
   170f8:	subcs	r0, r0, r1, lsl #18
   170fc:	cmp	r0, r1, lsl #17
   17100:	adc	r2, r2, r2
   17104:	subcs	r0, r0, r1, lsl #17
   17108:	cmp	r0, r1, lsl #16
   1710c:	adc	r2, r2, r2
   17110:	subcs	r0, r0, r1, lsl #16
   17114:	cmp	r0, r1, lsl #15
   17118:	adc	r2, r2, r2
   1711c:	subcs	r0, r0, r1, lsl #15
   17120:	cmp	r0, r1, lsl #14
   17124:	adc	r2, r2, r2
   17128:	subcs	r0, r0, r1, lsl #14
   1712c:	cmp	r0, r1, lsl #13
   17130:	adc	r2, r2, r2
   17134:	subcs	r0, r0, r1, lsl #13
   17138:	cmp	r0, r1, lsl #12
   1713c:	adc	r2, r2, r2
   17140:	subcs	r0, r0, r1, lsl #12
   17144:	cmp	r0, r1, lsl #11
   17148:	adc	r2, r2, r2
   1714c:	subcs	r0, r0, r1, lsl #11
   17150:	cmp	r0, r1, lsl #10
   17154:	adc	r2, r2, r2
   17158:	subcs	r0, r0, r1, lsl #10
   1715c:	cmp	r0, r1, lsl #9
   17160:	adc	r2, r2, r2
   17164:	subcs	r0, r0, r1, lsl #9
   17168:	cmp	r0, r1, lsl #8
   1716c:	adc	r2, r2, r2
   17170:	subcs	r0, r0, r1, lsl #8
   17174:	cmp	r0, r1, lsl #7
   17178:	adc	r2, r2, r2
   1717c:	subcs	r0, r0, r1, lsl #7
   17180:	cmp	r0, r1, lsl #6
   17184:	adc	r2, r2, r2
   17188:	subcs	r0, r0, r1, lsl #6
   1718c:	cmp	r0, r1, lsl #5
   17190:	adc	r2, r2, r2
   17194:	subcs	r0, r0, r1, lsl #5
   17198:	cmp	r0, r1, lsl #4
   1719c:	adc	r2, r2, r2
   171a0:	subcs	r0, r0, r1, lsl #4
   171a4:	cmp	r0, r1, lsl #3
   171a8:	adc	r2, r2, r2
   171ac:	subcs	r0, r0, r1, lsl #3
   171b0:	cmp	r0, r1, lsl #2
   171b4:	adc	r2, r2, r2
   171b8:	subcs	r0, r0, r1, lsl #2
   171bc:	cmp	r0, r1, lsl #1
   171c0:	adc	r2, r2, r2
   171c4:	subcs	r0, r0, r1, lsl #1
   171c8:	cmp	r0, r1
   171cc:	adc	r2, r2, r2
   171d0:	subcs	r0, r0, r1
   171d4:	mov	r0, r2
   171d8:	bx	lr
   171dc:	moveq	r0, #1
   171e0:	movne	r0, #0
   171e4:	bx	lr
   171e8:	clz	r2, r1
   171ec:	rsb	r2, r2, #31
   171f0:	lsr	r0, r0, r2
   171f4:	bx	lr
   171f8:	cmp	r0, #0
   171fc:	mvnne	r0, #0
   17200:	b	17464 <__assert_fail@plt+0x6758>
   17204:	cmp	r1, #0
   17208:	beq	171f8 <__assert_fail@plt+0x64ec>
   1720c:	push	{r0, r1, lr}
   17210:	bl	17018 <__assert_fail@plt+0x630c>
   17214:	pop	{r1, r2, lr}
   17218:	mul	r3, r2, r0
   1721c:	sub	r1, r1, r3
   17220:	bx	lr
   17224:	cmp	r1, #0
   17228:	beq	17434 <__assert_fail@plt+0x6728>
   1722c:	eor	ip, r0, r1
   17230:	rsbmi	r1, r1, #0
   17234:	subs	r2, r1, #1
   17238:	beq	17400 <__assert_fail@plt+0x66f4>
   1723c:	movs	r3, r0
   17240:	rsbmi	r3, r0, #0
   17244:	cmp	r3, r1
   17248:	bls	1740c <__assert_fail@plt+0x6700>
   1724c:	tst	r1, r2
   17250:	beq	1741c <__assert_fail@plt+0x6710>
   17254:	clz	r2, r3
   17258:	clz	r0, r1
   1725c:	sub	r2, r0, r2
   17260:	rsbs	r2, r2, #31
   17264:	addne	r2, r2, r2, lsl #1
   17268:	mov	r0, #0
   1726c:	addne	pc, pc, r2, lsl #2
   17270:	nop			; (mov r0, r0)
   17274:	cmp	r3, r1, lsl #31
   17278:	adc	r0, r0, r0
   1727c:	subcs	r3, r3, r1, lsl #31
   17280:	cmp	r3, r1, lsl #30
   17284:	adc	r0, r0, r0
   17288:	subcs	r3, r3, r1, lsl #30
   1728c:	cmp	r3, r1, lsl #29
   17290:	adc	r0, r0, r0
   17294:	subcs	r3, r3, r1, lsl #29
   17298:	cmp	r3, r1, lsl #28
   1729c:	adc	r0, r0, r0
   172a0:	subcs	r3, r3, r1, lsl #28
   172a4:	cmp	r3, r1, lsl #27
   172a8:	adc	r0, r0, r0
   172ac:	subcs	r3, r3, r1, lsl #27
   172b0:	cmp	r3, r1, lsl #26
   172b4:	adc	r0, r0, r0
   172b8:	subcs	r3, r3, r1, lsl #26
   172bc:	cmp	r3, r1, lsl #25
   172c0:	adc	r0, r0, r0
   172c4:	subcs	r3, r3, r1, lsl #25
   172c8:	cmp	r3, r1, lsl #24
   172cc:	adc	r0, r0, r0
   172d0:	subcs	r3, r3, r1, lsl #24
   172d4:	cmp	r3, r1, lsl #23
   172d8:	adc	r0, r0, r0
   172dc:	subcs	r3, r3, r1, lsl #23
   172e0:	cmp	r3, r1, lsl #22
   172e4:	adc	r0, r0, r0
   172e8:	subcs	r3, r3, r1, lsl #22
   172ec:	cmp	r3, r1, lsl #21
   172f0:	adc	r0, r0, r0
   172f4:	subcs	r3, r3, r1, lsl #21
   172f8:	cmp	r3, r1, lsl #20
   172fc:	adc	r0, r0, r0
   17300:	subcs	r3, r3, r1, lsl #20
   17304:	cmp	r3, r1, lsl #19
   17308:	adc	r0, r0, r0
   1730c:	subcs	r3, r3, r1, lsl #19
   17310:	cmp	r3, r1, lsl #18
   17314:	adc	r0, r0, r0
   17318:	subcs	r3, r3, r1, lsl #18
   1731c:	cmp	r3, r1, lsl #17
   17320:	adc	r0, r0, r0
   17324:	subcs	r3, r3, r1, lsl #17
   17328:	cmp	r3, r1, lsl #16
   1732c:	adc	r0, r0, r0
   17330:	subcs	r3, r3, r1, lsl #16
   17334:	cmp	r3, r1, lsl #15
   17338:	adc	r0, r0, r0
   1733c:	subcs	r3, r3, r1, lsl #15
   17340:	cmp	r3, r1, lsl #14
   17344:	adc	r0, r0, r0
   17348:	subcs	r3, r3, r1, lsl #14
   1734c:	cmp	r3, r1, lsl #13
   17350:	adc	r0, r0, r0
   17354:	subcs	r3, r3, r1, lsl #13
   17358:	cmp	r3, r1, lsl #12
   1735c:	adc	r0, r0, r0
   17360:	subcs	r3, r3, r1, lsl #12
   17364:	cmp	r3, r1, lsl #11
   17368:	adc	r0, r0, r0
   1736c:	subcs	r3, r3, r1, lsl #11
   17370:	cmp	r3, r1, lsl #10
   17374:	adc	r0, r0, r0
   17378:	subcs	r3, r3, r1, lsl #10
   1737c:	cmp	r3, r1, lsl #9
   17380:	adc	r0, r0, r0
   17384:	subcs	r3, r3, r1, lsl #9
   17388:	cmp	r3, r1, lsl #8
   1738c:	adc	r0, r0, r0
   17390:	subcs	r3, r3, r1, lsl #8
   17394:	cmp	r3, r1, lsl #7
   17398:	adc	r0, r0, r0
   1739c:	subcs	r3, r3, r1, lsl #7
   173a0:	cmp	r3, r1, lsl #6
   173a4:	adc	r0, r0, r0
   173a8:	subcs	r3, r3, r1, lsl #6
   173ac:	cmp	r3, r1, lsl #5
   173b0:	adc	r0, r0, r0
   173b4:	subcs	r3, r3, r1, lsl #5
   173b8:	cmp	r3, r1, lsl #4
   173bc:	adc	r0, r0, r0
   173c0:	subcs	r3, r3, r1, lsl #4
   173c4:	cmp	r3, r1, lsl #3
   173c8:	adc	r0, r0, r0
   173cc:	subcs	r3, r3, r1, lsl #3
   173d0:	cmp	r3, r1, lsl #2
   173d4:	adc	r0, r0, r0
   173d8:	subcs	r3, r3, r1, lsl #2
   173dc:	cmp	r3, r1, lsl #1
   173e0:	adc	r0, r0, r0
   173e4:	subcs	r3, r3, r1, lsl #1
   173e8:	cmp	r3, r1
   173ec:	adc	r0, r0, r0
   173f0:	subcs	r3, r3, r1
   173f4:	cmp	ip, #0
   173f8:	rsbmi	r0, r0, #0
   173fc:	bx	lr
   17400:	teq	ip, r0
   17404:	rsbmi	r0, r0, #0
   17408:	bx	lr
   1740c:	movcc	r0, #0
   17410:	asreq	r0, ip, #31
   17414:	orreq	r0, r0, #1
   17418:	bx	lr
   1741c:	clz	r2, r1
   17420:	rsb	r2, r2, #31
   17424:	cmp	ip, #0
   17428:	lsr	r0, r3, r2
   1742c:	rsbmi	r0, r0, #0
   17430:	bx	lr
   17434:	cmp	r0, #0
   17438:	mvngt	r0, #-2147483648	; 0x80000000
   1743c:	movlt	r0, #-2147483648	; 0x80000000
   17440:	b	17464 <__assert_fail@plt+0x6758>
   17444:	cmp	r1, #0
   17448:	beq	17434 <__assert_fail@plt+0x6728>
   1744c:	push	{r0, r1, lr}
   17450:	bl	1722c <__assert_fail@plt+0x6520>
   17454:	pop	{r1, r2, lr}
   17458:	mul	r3, r2, r0
   1745c:	sub	r1, r1, r3
   17460:	bx	lr
   17464:	push	{r1, lr}
   17468:	mov	r0, #8
   1746c:	bl	10b14 <raise@plt>
   17470:	pop	{r1, pc}
   17474:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17478:	mov	r7, r0
   1747c:	ldr	r6, [pc, #72]	; 174cc <__assert_fail@plt+0x67c0>
   17480:	ldr	r5, [pc, #72]	; 174d0 <__assert_fail@plt+0x67c4>
   17484:	add	r6, pc, r6
   17488:	add	r5, pc, r5
   1748c:	sub	r6, r6, r5
   17490:	mov	r8, r1
   17494:	mov	r9, r2
   17498:	bl	10adc <calloc@plt-0x20>
   1749c:	asrs	r6, r6, #2
   174a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   174a4:	mov	r4, #0
   174a8:	add	r4, r4, #1
   174ac:	ldr	r3, [r5], #4
   174b0:	mov	r2, r9
   174b4:	mov	r1, r8
   174b8:	mov	r0, r7
   174bc:	blx	r3
   174c0:	cmp	r6, r4
   174c4:	bne	174a8 <__assert_fail@plt+0x679c>
   174c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174cc:	andeq	r1, r1, r4, lsl #21
   174d0:	andeq	r1, r1, ip, ror sl
   174d4:	bx	lr
   174d8:	ldr	r3, [pc, #12]	; 174ec <__assert_fail@plt+0x67e0>
   174dc:	mov	r1, #0
   174e0:	add	r3, pc, r3
   174e4:	ldr	r2, [r3]
   174e8:	b	10c64 <__cxa_atexit@plt>
   174ec:	andeq	r1, r1, r0, ror #23

Disassembly of section .fini:

000174f0 <.fini>:
   174f0:	push	{r3, lr}
   174f4:	pop	{r3, pc}
