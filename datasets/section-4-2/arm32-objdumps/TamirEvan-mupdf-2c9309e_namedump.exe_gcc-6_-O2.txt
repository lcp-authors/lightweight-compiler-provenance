
../repos/TamirEvan-mupdf-2c9309e/build/release/scripts/namedump.exe:     file format elf32-littlearm


Disassembly of section .init:

0001049c <.init>:
   1049c:	push	{r3, lr}
   104a0:	bl	10840 <__gmon_start__@plt+0x318>
   104a4:	pop	{r3, pc}

Disassembly of section .plt:

000104a8 <feof@plt-0x14>:
   104a8:	push	{lr}		; (str lr, [sp, #-4]!)
   104ac:	ldr	lr, [pc, #4]	; 104b8 <feof@plt-0x4>
   104b0:	add	lr, pc, lr
   104b4:	ldr	pc, [lr, #8]!
   104b8:	andeq	r0, r1, r8, asr #22

000104bc <feof@plt>:
   104bc:	add	ip, pc, #0, 12
   104c0:	add	ip, ip, #16, 20	; 0x10000
   104c4:	ldr	pc, [ip, #2888]!	; 0xb48

000104c8 <fopen@plt>:
   104c8:	add	ip, pc, #0, 12
   104cc:	add	ip, ip, #16, 20	; 0x10000
   104d0:	ldr	pc, [ip, #2880]!	; 0xb40

000104d4 <abort@plt>:
   104d4:	add	ip, pc, #0, 12
   104d8:	add	ip, ip, #16, 20	; 0x10000
   104dc:	ldr	pc, [ip, #2872]!	; 0xb38

000104e0 <fgets@plt>:
   104e0:	add	ip, pc, #0, 12
   104e4:	add	ip, ip, #16, 20	; 0x10000
   104e8:	ldr	pc, [ip, #2864]!	; 0xb30

000104ec <fwrite@plt>:
   104ec:	add	ip, pc, #0, 12
   104f0:	add	ip, ip, #16, 20	; 0x10000
   104f4:	ldr	pc, [ip, #2856]!	; 0xb28

000104f8 <strlen@plt>:
   104f8:	add	ip, pc, #0, 12
   104fc:	add	ip, ip, #16, 20	; 0x10000
   10500:	ldr	pc, [ip, #2848]!	; 0xb20

00010504 <fprintf@plt>:
   10504:	add	ip, pc, #0, 12
   10508:	add	ip, ip, #16, 20	; 0x10000
   1050c:	ldr	pc, [ip, #2840]!	; 0xb18

00010510 <fclose@plt>:
   10510:	add	ip, pc, #0, 12
   10514:	add	ip, ip, #16, 20	; 0x10000
   10518:	ldr	pc, [ip, #2832]!	; 0xb10

0001051c <__libc_start_main@plt>:
   1051c:	add	ip, pc, #0, 12
   10520:	add	ip, ip, #16, 20	; 0x10000
   10524:	ldr	pc, [ip, #2824]!	; 0xb08

00010528 <__gmon_start__@plt>:
   10528:	add	ip, pc, #0, 12
   1052c:	add	ip, ip, #16, 20	; 0x10000
   10530:	ldr	pc, [ip, #2816]!	; 0xb00

Disassembly of section .text:

00010534 <.text>:
   10534:	cmp	r0, #4
   10538:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1053c:	beq	10560 <__gmon_start__@plt+0x38>
   10540:	ldr	r3, [pc, #628]	; 107bc <__gmon_start__@plt+0x294>
   10544:	mov	r2, #60	; 0x3c
   10548:	mov	r1, #1
   1054c:	ldr	r3, [r3]
   10550:	ldr	r0, [pc, #616]	; 107c0 <__gmon_start__@plt+0x298>
   10554:	bl	104ec <fwrite@plt>
   10558:	mov	r0, #1
   1055c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10560:	mov	r4, r1
   10564:	ldr	r1, [pc, #600]	; 107c4 <__gmon_start__@plt+0x29c>
   10568:	ldr	r0, [r4, #4]
   1056c:	bl	104c8 <fopen@plt>
   10570:	subs	r5, r0, #0
   10574:	beq	10768 <__gmon_start__@plt+0x240>
   10578:	ldr	r1, [pc, #584]	; 107c8 <__gmon_start__@plt+0x2a0>
   1057c:	ldr	r0, [r4, #8]
   10580:	bl	104c8 <fopen@plt>
   10584:	subs	r7, r0, #0
   10588:	beq	10784 <__gmon_start__@plt+0x25c>
   1058c:	ldr	r1, [pc, #564]	; 107c8 <__gmon_start__@plt+0x2a0>
   10590:	ldr	r0, [r4, #12]
   10594:	bl	104c8 <fopen@plt>
   10598:	subs	r9, r0, #0
   1059c:	beq	107a0 <__gmon_start__@plt+0x278>
   105a0:	mov	r3, r9
   105a4:	mov	r2, #40	; 0x28
   105a8:	mov	r1, #1
   105ac:	ldr	r0, [pc, #536]	; 107cc <__gmon_start__@plt+0x2a4>
   105b0:	bl	104ec <fwrite@plt>
   105b4:	mov	r3, r7
   105b8:	mov	r2, #29
   105bc:	mov	r1, #1
   105c0:	ldr	r0, [pc, #520]	; 107d0 <__gmon_start__@plt+0x2a8>
   105c4:	bl	104ec <fwrite@plt>
   105c8:	ldr	r4, [pc, #516]	; 107d4 <__gmon_start__@plt+0x2ac>
   105cc:	ldr	fp, [pc, #516]	; 107d8 <__gmon_start__@plt+0x2b0>
   105d0:	ldr	sl, [pc, #516]	; 107dc <__gmon_start__@plt+0x2b4>
   105d4:	mov	r8, #0
   105d8:	mov	r6, #256	; 0x100
   105dc:	mov	r0, r5
   105e0:	bl	104bc <feof@plt>
   105e4:	cmp	r0, #0
   105e8:	bne	106c0 <__gmon_start__@plt+0x198>
   105ec:	mov	r2, r5
   105f0:	mov	r1, r6
   105f4:	ldr	r0, [pc, #472]	; 107d4 <__gmon_start__@plt+0x2ac>
   105f8:	bl	104e0 <fgets@plt>
   105fc:	cmp	r0, #0
   10600:	strbeq	r0, [r4]
   10604:	beq	105dc <__gmon_start__@plt+0xb4>
   10608:	mov	r0, r4
   1060c:	bl	104f8 <strlen@plt>
   10610:	cmp	r0, #0
   10614:	beq	10758 <__gmon_start__@plt+0x230>
   10618:	sub	r3, r0, #1
   1061c:	ldrb	r2, [r4, r3]
   10620:	cmp	r2, #32
   10624:	bhi	10760 <__gmon_start__@plt+0x238>
   10628:	add	r2, r4, r3
   1062c:	b	10644 <__gmon_start__@plt+0x11c>
   10630:	ldrb	r1, [r2, #-1]!
   10634:	sub	r0, r3, #1
   10638:	cmp	r1, #32
   1063c:	bhi	1064c <__gmon_start__@plt+0x124>
   10640:	mov	r3, r0
   10644:	cmp	r3, #0
   10648:	bne	10630 <__gmon_start__@plt+0x108>
   1064c:	strb	r8, [r4, r3]
   10650:	ldrb	r3, [r4]
   10654:	cmp	r3, #0
   10658:	beq	105dc <__gmon_start__@plt+0xb4>
   1065c:	mov	r2, r4
   10660:	mov	r1, fp
   10664:	mov	r0, r9
   10668:	bl	10504 <fprintf@plt>
   1066c:	ldrb	r3, [r4]
   10670:	cmp	r3, #0
   10674:	movne	r1, #95	; 0x5f
   10678:	ldrne	r2, [pc, #340]	; 107d4 <__gmon_start__@plt+0x2ac>
   1067c:	beq	10698 <__gmon_start__@plt+0x170>
   10680:	sub	r3, r3, #45	; 0x2d
   10684:	cmp	r3, #1
   10688:	strbls	r1, [r2]
   1068c:	ldrb	r3, [r2, #1]!
   10690:	cmp	r3, #0
   10694:	bne	10680 <__gmon_start__@plt+0x158>
   10698:	mov	r1, sl
   1069c:	mov	r3, r4
   106a0:	ldr	r2, [pc, #300]	; 107d4 <__gmon_start__@plt+0x2ac>
   106a4:	mov	r0, r7
   106a8:	bl	10504 <fprintf@plt>
   106ac:	mov	r2, r4
   106b0:	ldr	r1, [pc, #296]	; 107e0 <__gmon_start__@plt+0x2b8>
   106b4:	mov	r0, r7
   106b8:	bl	10504 <fprintf@plt>
   106bc:	b	105d8 <__gmon_start__@plt+0xb0>
   106c0:	mov	r3, r7
   106c4:	mov	r2, #103	; 0x67
   106c8:	mov	r1, #1
   106cc:	ldr	r0, [pc, #272]	; 107e4 <__gmon_start__@plt+0x2bc>
   106d0:	bl	104ec <fwrite@plt>
   106d4:	mov	r3, r7
   106d8:	mov	r2, #122	; 0x7a
   106dc:	mov	r1, #1
   106e0:	ldr	r0, [pc, #256]	; 107e8 <__gmon_start__@plt+0x2c0>
   106e4:	bl	104ec <fwrite@plt>
   106e8:	mov	r3, r7
   106ec:	mov	r2, #92	; 0x5c
   106f0:	mov	r1, #1
   106f4:	ldr	r0, [pc, #240]	; 107ec <__gmon_start__@plt+0x2c4>
   106f8:	bl	104ec <fwrite@plt>
   106fc:	mov	r3, r7
   10700:	mov	r2, #82	; 0x52
   10704:	mov	r1, #1
   10708:	ldr	r0, [pc, #224]	; 107f0 <__gmon_start__@plt+0x2c8>
   1070c:	bl	104ec <fwrite@plt>
   10710:	mov	r3, r7
   10714:	mov	r2, #90	; 0x5a
   10718:	mov	r1, #1
   1071c:	ldr	r0, [pc, #208]	; 107f4 <__gmon_start__@plt+0x2cc>
   10720:	bl	104ec <fwrite@plt>
   10724:	mov	r3, r9
   10728:	mov	r2, #3
   1072c:	mov	r1, #1
   10730:	ldr	r0, [pc, #192]	; 107f8 <__gmon_start__@plt+0x2d0>
   10734:	bl	104ec <fwrite@plt>
   10738:	mov	r0, r9
   1073c:	bl	10510 <fclose@plt>
   10740:	mov	r0, r7
   10744:	bl	10510 <fclose@plt>
   10748:	mov	r0, r5
   1074c:	bl	10510 <fclose@plt>
   10750:	mov	r0, #0
   10754:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10758:	mov	r3, r8
   1075c:	b	1064c <__gmon_start__@plt+0x124>
   10760:	mov	r3, r0
   10764:	b	1064c <__gmon_start__@plt+0x124>
   10768:	ldr	r3, [pc, #76]	; 107bc <__gmon_start__@plt+0x294>
   1076c:	ldr	r2, [r4, #4]
   10770:	ldr	r1, [pc, #132]	; 107fc <__gmon_start__@plt+0x2d4>
   10774:	ldr	r0, [r3]
   10778:	bl	10504 <fprintf@plt>
   1077c:	mov	r0, #1
   10780:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10784:	ldr	r3, [pc, #48]	; 107bc <__gmon_start__@plt+0x294>
   10788:	ldr	r2, [r4, #8]
   1078c:	ldr	r1, [pc, #108]	; 10800 <__gmon_start__@plt+0x2d8>
   10790:	ldr	r0, [r3]
   10794:	bl	10504 <fprintf@plt>
   10798:	mov	r0, #1
   1079c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107a0:	ldr	r3, [pc, #20]	; 107bc <__gmon_start__@plt+0x294>
   107a4:	ldr	r2, [r4, #12]
   107a8:	ldr	r1, [pc, #80]	; 10800 <__gmon_start__@plt+0x2d8>
   107ac:	ldr	r0, [r3]
   107b0:	bl	10504 <fprintf@plt>
   107b4:	mov	r0, #1
   107b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107bc:	andeq	r1, r2, r8, lsr r0
   107c0:	muleq	r1, r8, r9
   107c4:	ldrdeq	r0, [r1], -r8
   107c8:	andeq	r0, r1, r0, lsl #20
   107cc:	andeq	r0, r1, r8, lsr #20
   107d0:	andeq	r0, r1, r4, asr sl
   107d4:	andeq	r1, r2, r0, asr #32
   107d8:	andeq	r0, r1, r4, ror sl
   107dc:	andeq	r0, r1, ip, ror sl
   107e0:	andeq	r0, r1, r0, asr #21
   107e4:	ldrdeq	r0, [r1], -r8
   107e8:	andeq	r0, r1, r0, asr #22
   107ec:			; <UNDEFINED> instruction: 0x00010bbc
   107f0:	andeq	r0, r1, ip, lsl ip
   107f4:	andeq	r0, r1, r0, ror ip
   107f8:	andeq	r0, r1, ip, asr #25
   107fc:	ldrdeq	r0, [r1], -ip
   10800:	andeq	r0, r1, r4, lsl #20
   10804:	mov	fp, #0
   10808:	mov	lr, #0
   1080c:	pop	{r1}		; (ldr r1, [sp], #4)
   10810:	mov	r2, sp
   10814:	push	{r2}		; (str r2, [sp, #-4]!)
   10818:	push	{r0}		; (str r0, [sp, #-4]!)
   1081c:	ldr	ip, [pc, #16]	; 10834 <__gmon_start__@plt+0x30c>
   10820:	push	{ip}		; (str ip, [sp, #-4]!)
   10824:	ldr	r0, [pc, #12]	; 10838 <__gmon_start__@plt+0x310>
   10828:	ldr	r3, [pc, #12]	; 1083c <__gmon_start__@plt+0x314>
   1082c:	bl	1051c <__libc_start_main@plt>
   10830:	bl	104d4 <abort@plt>
   10834:	andeq	r0, r1, ip, lsl #19
   10838:	andeq	r0, r1, r4, lsr r5
   1083c:	andeq	r0, r1, ip, lsr #18
   10840:	ldr	r3, [pc, #20]	; 1085c <__gmon_start__@plt+0x334>
   10844:	ldr	r2, [pc, #20]	; 10860 <__gmon_start__@plt+0x338>
   10848:	add	r3, pc, r3
   1084c:	ldr	r2, [r3, r2]
   10850:	cmp	r2, #0
   10854:	bxeq	lr
   10858:	b	10528 <__gmon_start__@plt>
   1085c:			; <UNDEFINED> instruction: 0x000107b0
   10860:	andeq	r0, r0, r4, lsr r0
   10864:	ldr	r3, [pc, #28]	; 10888 <__gmon_start__@plt+0x360>
   10868:	ldr	r0, [pc, #28]	; 1088c <__gmon_start__@plt+0x364>
   1086c:	sub	r3, r3, r0
   10870:	cmp	r3, #6
   10874:	bxls	lr
   10878:	ldr	r3, [pc, #16]	; 10890 <__gmon_start__@plt+0x368>
   1087c:	cmp	r3, #0
   10880:	bxeq	lr
   10884:	bx	r3
   10888:	andeq	r1, r2, fp, lsr r0
   1088c:	andeq	r1, r2, r8, lsr r0
   10890:	andeq	r0, r0, r0
   10894:	ldr	r1, [pc, #36]	; 108c0 <__gmon_start__@plt+0x398>
   10898:	ldr	r0, [pc, #36]	; 108c4 <__gmon_start__@plt+0x39c>
   1089c:	sub	r1, r1, r0
   108a0:	asr	r1, r1, #2
   108a4:	add	r1, r1, r1, lsr #31
   108a8:	asrs	r1, r1, #1
   108ac:	bxeq	lr
   108b0:	ldr	r3, [pc, #16]	; 108c8 <__gmon_start__@plt+0x3a0>
   108b4:	cmp	r3, #0
   108b8:	bxeq	lr
   108bc:	bx	r3
   108c0:	andeq	r1, r2, r8, lsr r0
   108c4:	andeq	r1, r2, r8, lsr r0
   108c8:	andeq	r0, r0, r0
   108cc:	push	{r4, lr}
   108d0:	ldr	r4, [pc, #24]	; 108f0 <__gmon_start__@plt+0x3c8>
   108d4:	ldrb	r3, [r4]
   108d8:	cmp	r3, #0
   108dc:	popne	{r4, pc}
   108e0:	bl	10864 <__gmon_start__@plt+0x33c>
   108e4:	mov	r3, #1
   108e8:	strb	r3, [r4]
   108ec:	pop	{r4, pc}
   108f0:	andeq	r1, r2, ip, lsr r0
   108f4:	ldr	r0, [pc, #40]	; 10924 <__gmon_start__@plt+0x3fc>
   108f8:	ldr	r3, [r0]
   108fc:	cmp	r3, #0
   10900:	bne	10908 <__gmon_start__@plt+0x3e0>
   10904:	b	10894 <__gmon_start__@plt+0x36c>
   10908:	ldr	r3, [pc, #24]	; 10928 <__gmon_start__@plt+0x400>
   1090c:	cmp	r3, #0
   10910:	beq	10904 <__gmon_start__@plt+0x3dc>
   10914:	push	{r4, lr}
   10918:	blx	r3
   1091c:	pop	{r4, lr}
   10920:	b	10894 <__gmon_start__@plt+0x36c>
   10924:	ldrdeq	r0, [r2], -r4
   10928:	andeq	r0, r0, r0
   1092c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10930:	mov	r7, r0
   10934:	ldr	r6, [pc, #72]	; 10984 <__gmon_start__@plt+0x45c>
   10938:	ldr	r5, [pc, #72]	; 10988 <__gmon_start__@plt+0x460>
   1093c:	add	r6, pc, r6
   10940:	add	r5, pc, r5
   10944:	sub	r6, r6, r5
   10948:	mov	r8, r1
   1094c:	mov	r9, r2
   10950:	bl	1049c <feof@plt-0x20>
   10954:	asrs	r6, r6, #2
   10958:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1095c:	mov	r4, #0
   10960:	add	r4, r4, #1
   10964:	ldr	r3, [r5], #4
   10968:	mov	r2, r9
   1096c:	mov	r1, r8
   10970:	mov	r0, r7
   10974:	blx	r3
   10978:	cmp	r6, r4
   1097c:	bne	10960 <__gmon_start__@plt+0x438>
   10980:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10984:	andeq	r0, r1, ip, lsl #11
   10988:	andeq	r0, r1, r4, lsl #11
   1098c:	bx	lr

Disassembly of section .fini:

00010990 <.fini>:
   10990:	push	{r3, lr}
   10994:	pop	{r3, pc}
