
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	11c54 <__assert_fail@plt+0xd10>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	r8, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <fputs_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <raise@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <posix_fadvise64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <read@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <fflush@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <__strtoull_internal@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <mbsinit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <fwrite_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <memcmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <stpcpy@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <fputc_unlocked@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <dcgettext@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <realloc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <textdomain@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <iswprint@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <fwrite@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <lseek64@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <__ctype_get_mb_cur_max@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <__fpending@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <mbrtowc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <error@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <malloc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <__libc_start_main@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <__freading@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <__ctype_tolower_loc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <__ctype_toupper_loc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <__gmon_start__@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <getopt_long@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <__ctype_b_loc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <exit@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <strlen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <strchr@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <__errno_location@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <__sprintf_chk@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <__cxa_atexit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <memset@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <__printf_chk@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <__fprintf_chk@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #460]!	; 0x1cc

00010efc <strrchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #452]!	; 0x1c4

00010f08 <nl_langinfo@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #444]!	; 0x1bc

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #436]!	; 0x1b4

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #428]!	; 0x1ac

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #420]!	; 0x1a4

00010f38 <close@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #412]!	; 0x19c

00010f44 <__assert_fail@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #404]!	; 0x194

Disassembly of section .text:

00010f50 <.text>:
   10f50:	push	{r4, lr}
   10f54:	bl	10e84 <__errno_location@plt>
   10f58:	mov	r2, #5
   10f5c:	ldr	r1, [pc, #24]	; 10f7c <__assert_fail@plt+0x38>
   10f60:	ldr	r4, [r0]
   10f64:	mov	r0, #0
   10f68:	bl	10d88 <dcgettext@plt>
   10f6c:	mov	r1, r4
   10f70:	mov	r2, r0
   10f74:	mov	r0, #1
   10f78:	bl	10df4 <error@plt>
   10f7c:	andeq	r7, r1, ip, lsl #8
   10f80:	push	{r4, lr}
   10f84:	ldr	r3, [pc, #12]	; 10f98 <__assert_fail@plt+0x54>
   10f88:	ldr	r2, [pc, #12]	; 10f9c <__assert_fail@plt+0x58>
   10f8c:	ldr	r1, [pc, #12]	; 10fa0 <__assert_fail@plt+0x5c>
   10f90:	ldr	r0, [pc, #12]	; 10fa4 <__assert_fail@plt+0x60>
   10f94:	bl	10f44 <__assert_fail@plt>
   10f98:	strdeq	r7, [r1], -r0
   10f9c:	ldrdeq	r0, [r0], -r1
   10fa0:	andeq	r7, r1, r4, ror r3
   10fa4:	andeq	r7, r1, r8, lsl r4
   10fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fac:	mov	r5, r0
   10fb0:	sub	sp, sp, #404	; 0x194
   10fb4:	ldr	r0, [r1]
   10fb8:	mov	r6, r1
   10fbc:	bl	136b0 <__assert_fail@plt+0x276c>
   10fc0:	ldr	r1, [pc, #2952]	; 11b50 <__assert_fail@plt+0xc0c>
   10fc4:	mov	r0, #6
   10fc8:	bl	10ef0 <setlocale@plt>
   10fcc:	ldr	r1, [pc, #2944]	; 11b54 <__assert_fail@plt+0xc10>
   10fd0:	ldr	r0, [pc, #2944]	; 11b58 <__assert_fail@plt+0xc14>
   10fd4:	bl	10f14 <bindtextdomain@plt>
   10fd8:	ldr	r0, [pc, #2936]	; 11b58 <__assert_fail@plt+0xc14>
   10fdc:	bl	10da0 <textdomain@plt>
   10fe0:	ldr	r0, [pc, #2932]	; 11b5c <__assert_fail@plt+0xc18>
   10fe4:	bl	171b0 <__assert_fail@plt+0x626c>
   10fe8:	ldr	r8, [pc, #2928]	; 11b60 <__assert_fail@plt+0xc1c>
   10fec:	ldr	r7, [pc, #2928]	; 11b64 <__assert_fail@plt+0xc20>
   10ff0:	ldr	sl, [pc, #2928]	; 11b68 <__assert_fail@plt+0xc24>
   10ff4:	ldr	fp, [pc, #2928]	; 11b6c <__assert_fail@plt+0xc28>
   10ff8:	mov	r4, #0
   10ffc:	mov	r9, #1
   11000:	str	r4, [sp]
   11004:	mov	r3, r8
   11008:	mov	r2, r7
   1100c:	mov	r1, r6
   11010:	mov	r0, r5
   11014:	bl	10e48 <getopt_long@plt>
   11018:	cmn	r0, #1
   1101c:	beq	110e4 <__assert_fail@plt+0x1a0>
   11020:	cmp	r0, #67	; 0x43
   11024:	beq	110dc <__assert_fail@plt+0x198>
   11028:	ble	11050 <__assert_fail@plt+0x10c>
   1102c:	cmp	r0, #100	; 0x64
   11030:	beq	110cc <__assert_fail@plt+0x188>
   11034:	ble	110d4 <__assert_fail@plt+0x190>
   11038:	cmp	r0, #115	; 0x73
   1103c:	beq	1108c <__assert_fail@plt+0x148>
   11040:	cmp	r0, #116	; 0x74
   11044:	bne	11068 <__assert_fail@plt+0x124>
   11048:	strb	r9, [sl, #779]	; 0x30b
   1104c:	b	11000 <__assert_fail@plt+0xbc>
   11050:	cmn	r0, #2
   11054:	beq	11094 <__assert_fail@plt+0x150>
   11058:	cmp	r0, #65	; 0x41
   1105c:	beq	11070 <__assert_fail@plt+0x12c>
   11060:	cmn	r0, #3
   11064:	beq	1109c <__assert_fail@plt+0x158>
   11068:	mov	r0, #1
   1106c:	bl	131dc <__assert_fail@plt+0x2298>
   11070:	mov	r1, fp
   11074:	mov	r0, #3
   11078:	bl	10ef0 <setlocale@plt>
   1107c:	mov	r1, fp
   11080:	mov	r0, r4
   11084:	bl	10ef0 <setlocale@plt>
   11088:	b	11000 <__assert_fail@plt+0xbc>
   1108c:	strb	r9, [sl, #778]	; 0x30a
   11090:	b	11000 <__assert_fail@plt+0xbc>
   11094:	mov	r0, #0
   11098:	bl	131dc <__assert_fail@plt+0x2298>
   1109c:	ldr	r1, [pc, #2764]	; 11b70 <__assert_fail@plt+0xc2c>
   110a0:	ldr	r3, [pc, #2764]	; 11b74 <__assert_fail@plt+0xc30>
   110a4:	ldr	r2, [pc, #2764]	; 11b78 <__assert_fail@plt+0xc34>
   110a8:	str	r4, [sp, #4]
   110ac:	ldr	r0, [r1]
   110b0:	ldr	r3, [r3]
   110b4:	ldr	r1, [pc, #2752]	; 11b7c <__assert_fail@plt+0xc38>
   110b8:	str	r2, [sp]
   110bc:	ldr	r2, [pc, #2748]	; 11b80 <__assert_fail@plt+0xc3c>
   110c0:	bl	15a14 <__assert_fail@plt+0x4ad0>
   110c4:	mov	r0, #0
   110c8:	bl	10e60 <exit@plt>
   110cc:	strb	r9, [sl, #777]	; 0x309
   110d0:	b	11000 <__assert_fail@plt+0xbc>
   110d4:	cmp	r0, #99	; 0x63
   110d8:	bne	11068 <__assert_fail@plt+0x124>
   110dc:	strb	r9, [sl, #776]	; 0x308
   110e0:	b	11000 <__assert_fail@plt+0xbc>
   110e4:	ldr	r7, [pc, #2712]	; 11b84 <__assert_fail@plt+0xc40>
   110e8:	ldr	r8, [pc, #2680]	; 11b68 <__assert_fail@plt+0xc24>
   110ec:	ldr	r3, [r7]
   110f0:	sub	fp, r5, r3
   110f4:	cmp	fp, #2
   110f8:	beq	112f8 <__assert_fail@plt+0x3b4>
   110fc:	ldrb	r3, [r8, #778]	; 0x30a
   11100:	ldrb	r2, [r8, #777]	; 0x309
   11104:	mov	r9, #0
   11108:	strb	r9, [r8, #780]	; 0x30c
   1110c:	cmp	r2, r3
   11110:	movne	r3, #1
   11114:	moveq	r3, #2
   11118:	movgt	r4, #1
   1111c:	movle	r4, #2
   11120:	cmp	r3, fp
   11124:	bgt	11ac8 <__assert_fail@plt+0xb84>
   11128:	cmp	fp, r4
   1112c:	bgt	11a58 <__assert_fail@plt+0xb14>
   11130:	mov	r0, #24
   11134:	bl	15b10 <__assert_fail@plt+0x4bcc>
   11138:	ldr	r2, [r7]
   1113c:	add	r5, sp, #400	; 0x190
   11140:	mov	r4, #0
   11144:	mov	r3, r0
   11148:	str	r0, [r5, #-336]!	; 0xfffffeb0
   1114c:	str	r4, [r3, #4]
   11150:	ldr	r0, [r6, r2, lsl #2]
   11154:	mov	r1, r5
   11158:	str	r3, [sp, #68]	; 0x44
   1115c:	bl	129ac <__assert_fail@plt+0x1a68>
   11160:	cmp	r0, r4
   11164:	beq	11320 <__assert_fail@plt+0x3dc>
   11168:	cmp	fp, #2
   1116c:	beq	11668 <__assert_fail@plt+0x724>
   11170:	mov	r0, r5
   11174:	bl	12114 <__assert_fail@plt+0x11d0>
   11178:	ldrb	r3, [r8, #776]	; 0x308
   1117c:	cmp	r3, #0
   11180:	bne	11600 <__assert_fail@plt+0x6bc>
   11184:	ldr	r9, [sp, #88]	; 0x58
   11188:	cmp	r9, #0
   1118c:	movne	r2, #5
   11190:	ldrne	r1, [pc, #2544]	; 11b88 <__assert_fail@plt+0xc44>
   11194:	bne	11828 <__assert_fail@plt+0x8e4>
   11198:	cmp	r4, #0
   1119c:	beq	111e4 <__assert_fail@plt+0x2a0>
   111a0:	mov	r0, r4
   111a4:	ldrd	r6, [r5, #16]
   111a8:	bl	12114 <__assert_fail@plt+0x11d0>
   111ac:	ldrd	r2, [r4, #16]
   111b0:	ldr	r1, [r4, #24]
   111b4:	cmp	r7, r3
   111b8:	cmpeq	r6, r2
   111bc:	bcc	111c8 <__assert_fail@plt+0x284>
   111c0:	cmp	r1, #1
   111c4:	beq	11858 <__assert_fail@plt+0x914>
   111c8:	cmp	r1, #1
   111cc:	bhi	11a38 <__assert_fail@plt+0xaf4>
   111d0:	ldrb	r3, [r8, #780]	; 0x30c
   111d4:	cmp	r3, #0
   111d8:	bne	11424 <__assert_fail@plt+0x4e0>
   111dc:	cmp	r1, #0
   111e0:	bne	11878 <__assert_fail@plt+0x934>
   111e4:	ldr	r3, [pc, #2464]	; 11b8c <__assert_fail@plt+0xc48>
   111e8:	mov	r1, #2
   111ec:	ldr	r0, [r3]
   111f0:	bl	13624 <__assert_fail@plt+0x26e0>
   111f4:	ldrb	r3, [r8, #778]	; 0x30a
   111f8:	sub	r2, fp, #1
   111fc:	clz	r2, r2
   11200:	lsr	r2, r2, #5
   11204:	tst	r3, r2
   11208:	bne	119fc <__assert_fail@plt+0xab8>
   1120c:	ldrb	r6, [r8, #777]	; 0x309
   11210:	ands	r7, r6, r2
   11214:	bne	119a8 <__assert_fail@plt+0xa64>
   11218:	and	r3, r3, r6
   1121c:	cmp	fp, #2
   11220:	movne	fp, #0
   11224:	andeq	fp, r3, #1
   11228:	cmp	fp, #0
   1122c:	bne	113c0 <__assert_fail@plt+0x47c>
   11230:	ldrb	r3, [r8, #780]	; 0x30c
   11234:	cmp	r3, #0
   11238:	beq	113e8 <__assert_fail@plt+0x4a4>
   1123c:	ldrb	r3, [r8, #776]	; 0x308
   11240:	cmp	r3, #0
   11244:	ldreq	r2, [pc, #2372]	; 11b90 <__assert_fail@plt+0xc4c>
   11248:	bne	11914 <__assert_fail@plt+0x9d0>
   1124c:	strb	r3, [r2, #1]!
   11250:	add	r3, r3, #1
   11254:	cmp	r3, #256	; 0x100
   11258:	bne	1124c <__assert_fail@plt+0x308>
   1125c:	mvn	r2, #1
   11260:	mvn	r3, #0
   11264:	add	sl, sp, #144	; 0x90
   11268:	add	r9, sp, #60	; 0x3c
   1126c:	strd	r2, [r5, #8]
   11270:	strd	r2, [r4, #8]
   11274:	mov	r1, r9
   11278:	mov	r0, r5
   1127c:	bl	12304 <__assert_fail@plt+0x13c0>
   11280:	mov	r1, sl
   11284:	mov	r7, r0
   11288:	mov	r0, r4
   1128c:	bl	12304 <__assert_fail@plt+0x13c0>
   11290:	ldr	r6, [sp, #60]	; 0x3c
   11294:	cmp	r6, #0
   11298:	bne	1132c <__assert_fail@plt+0x3e8>
   1129c:	ldr	r3, [sp, #144]	; 0x90
   112a0:	cmp	r3, #1
   112a4:	beq	11380 <__assert_fail@plt+0x43c>
   112a8:	cmn	r7, #1
   112ac:	cmnne	r0, #1
   112b0:	beq	116a8 <__assert_fail@plt+0x764>
   112b4:	ldr	r2, [pc, #2264]	; 11b94 <__assert_fail@plt+0xc50>
   112b8:	ldr	r3, [sp, #144]	; 0x90
   112bc:	add	r7, r2, r7
   112c0:	cmp	r3, #2
   112c4:	strb	r0, [r7, #256]	; 0x100
   112c8:	beq	11274 <__assert_fail@plt+0x330>
   112cc:	ldr	r2, [sp, #68]	; 0x44
   112d0:	ldr	r3, [r4, #4]
   112d4:	mvn	r0, #0
   112d8:	ldr	r2, [r2, #4]
   112dc:	mvn	r1, #0
   112e0:	str	r2, [sp, #68]	; 0x44
   112e4:	ldr	r3, [r3, #4]
   112e8:	strd	r0, [r5, #8]
   112ec:	strd	r0, [r4, #8]
   112f0:	str	r3, [r4, #4]
   112f4:	b	11274 <__assert_fail@plt+0x330>
   112f8:	ldrb	r3, [r8, #777]	; 0x309
   112fc:	cmp	r3, #0
   11300:	bne	110fc <__assert_fail@plt+0x1b8>
   11304:	ldrb	r3, [r8, #778]	; 0x30a
   11308:	mov	r2, #1
   1130c:	strb	r2, [r8, #780]	; 0x30c
   11310:	cmp	r3, #0
   11314:	movne	r4, fp
   11318:	bne	11128 <__assert_fail@plt+0x1e4>
   1131c:	b	11130 <__assert_fail@plt+0x1ec>
   11320:	mov	r0, #1
   11324:	add	sp, sp, #404	; 0x194
   11328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1132c:	cmp	r6, #1
   11330:	bne	112a8 <__assert_fail@plt+0x364>
   11334:	ldr	r6, [sp, #144]	; 0x90
   11338:	cmp	r6, #0
   1133c:	bne	112a8 <__assert_fail@plt+0x364>
   11340:	bl	10e54 <__ctype_b_loc@plt>
   11344:	ldr	r7, [pc, #2124]	; 11b98 <__assert_fail@plt+0xc54>
   11348:	ldr	fp, [r0]
   1134c:	sub	fp, fp, #2
   11350:	ldrh	r3, [fp, #2]!
   11354:	tst	r3, #256	; 0x100
   11358:	beq	1136c <__assert_fail@plt+0x428>
   1135c:	bl	10e24 <__ctype_tolower_loc@plt>
   11360:	ldr	r3, [r0]
   11364:	ldr	r3, [r3, r6]
   11368:	strb	r3, [r7]
   1136c:	add	r6, r6, #4
   11370:	cmp	r6, #1024	; 0x400
   11374:	add	r7, r7, #1
   11378:	bne	11350 <__assert_fail@plt+0x40c>
   1137c:	b	112cc <__assert_fail@plt+0x388>
   11380:	bl	10e54 <__ctype_b_loc@plt>
   11384:	ldr	r7, [pc, #2060]	; 11b98 <__assert_fail@plt+0xc54>
   11388:	ldr	fp, [r0]
   1138c:	sub	fp, fp, #2
   11390:	ldrh	r3, [fp, #2]!
   11394:	tst	r3, #512	; 0x200
   11398:	beq	113ac <__assert_fail@plt+0x468>
   1139c:	bl	10e30 <__ctype_toupper_loc@plt>
   113a0:	ldr	r3, [r0]
   113a4:	ldr	r3, [r3, r6]
   113a8:	strb	r3, [r7]
   113ac:	add	r6, r6, #4
   113b0:	cmp	r6, #1024	; 0x400
   113b4:	add	r7, r7, #1
   113b8:	bne	11390 <__assert_fail@plt+0x44c>
   113bc:	b	112cc <__assert_fail@plt+0x388>
   113c0:	ldrb	r1, [r8, #776]	; 0x308
   113c4:	mov	r0, r5
   113c8:	ldr	r2, [pc, #1988]	; 11b94 <__assert_fail@plt+0xc50>
   113cc:	bl	12720 <__assert_fail@plt+0x17dc>
   113d0:	mov	r0, r4
   113d4:	mov	r1, r7
   113d8:	ldr	r2, [pc, #1980]	; 11b9c <__assert_fail@plt+0xc58>
   113dc:	bl	12720 <__assert_fail@plt+0x17dc>
   113e0:	ldr	r0, [pc, #1976]	; 11ba0 <__assert_fail@plt+0xc5c>
   113e4:	bl	12788 <__assert_fail@plt+0x1844>
   113e8:	mov	r0, #0
   113ec:	bl	10f38 <close@plt>
   113f0:	cmp	r0, #0
   113f4:	beq	11420 <__assert_fail@plt+0x4dc>
   113f8:	bl	10e84 <__errno_location@plt>
   113fc:	ldr	r1, [pc, #1952]	; 11ba4 <__assert_fail@plt+0xc60>
   11400:	mov	r2, #5
   11404:	ldr	r4, [r0]
   11408:	mov	r0, #0
   1140c:	bl	10d88 <dcgettext@plt>
   11410:	mov	r1, r4
   11414:	mov	r2, r0
   11418:	mov	r0, #1
   1141c:	bl	10df4 <error@plt>
   11420:	bl	10e60 <exit@plt>
   11424:	ldrb	r6, [r4, #32]
   11428:	cmp	r6, #0
   1142c:	movne	r2, #5
   11430:	ldrne	r1, [pc, #1904]	; 11ba8 <__assert_fail@plt+0xc64>
   11434:	bne	11828 <__assert_fail@plt+0x8e4>
   11438:	ldrb	r3, [r4, #34]	; 0x22
   1143c:	cmp	r3, #0
   11440:	movne	r2, #5
   11444:	ldrne	r1, [pc, #1888]	; 11bac <__assert_fail@plt+0xc68>
   11448:	bne	11828 <__assert_fail@plt+0x8e4>
   1144c:	ldrb	r3, [r8, #776]	; 0x308
   11450:	ldrd	r0, [r4, #16]
   11454:	ldrd	r6, [r5, #16]
   11458:	cmp	r3, #0
   1145c:	strd	r0, [sp, #32]
   11460:	strd	r6, [sp, #24]
   11464:	mov	r2, r0
   11468:	mov	r3, r1
   1146c:	bne	11884 <__assert_fail@plt+0x940>
   11470:	ldrb	r7, [r4, #33]	; 0x21
   11474:	cmp	r7, #0
   11478:	beq	1170c <__assert_fail@plt+0x7c8>
   1147c:	bl	10e54 <__ctype_b_loc@plt>
   11480:	mov	r2, r9
   11484:	ldr	r3, [r0]
   11488:	add	r1, r3, #508	; 0x1fc
   1148c:	add	r1, r1, #2
   11490:	sub	r3, r3, #2
   11494:	ldrh	r0, [r3, #2]!
   11498:	tst	r0, #256	; 0x100
   1149c:	addne	r9, r9, #1
   114a0:	tst	r0, #512	; 0x200
   114a4:	addne	r2, r2, #1
   114a8:	cmp	r1, r3
   114ac:	bne	11494 <__assert_fail@plt+0x550>
   114b0:	ldr	r3, [sp, #68]	; 0x44
   114b4:	str	fp, [sp, #48]	; 0x30
   114b8:	str	r3, [sp, #40]	; 0x28
   114bc:	ldr	r3, [r4, #4]
   114c0:	str	r8, [sp, #52]	; 0x34
   114c4:	str	r3, [sp, #44]	; 0x2c
   114c8:	sub	r3, r2, #1
   114cc:	mov	r1, r3
   114d0:	sub	r3, r9, #1
   114d4:	mov	r0, r3
   114d8:	mvn	r2, #1
   114dc:	mvn	r3, #0
   114e0:	add	r9, sp, #60	; 0x3c
   114e4:	str	r9, [sp, #20]
   114e8:	add	sl, sp, #144	; 0x90
   114ec:	strd	r2, [r5, #8]
   114f0:	strd	r2, [r4, #8]
   114f4:	mov	r9, r7
   114f8:	mov	r8, r1
   114fc:	mov	fp, r0
   11500:	b	115c4 <__assert_fail@plt+0x680>
   11504:	cmp	r3, #2
   11508:	beq	11588 <__assert_fail@plt+0x644>
   1150c:	cmp	r7, #0
   11510:	beq	11a2c <__assert_fail@plt+0xae8>
   11514:	ldr	r2, [sp, #60]	; 0x3c
   11518:	cmp	r2, #2
   1151c:	beq	11a2c <__assert_fail@plt+0xae8>
   11520:	ldrd	r0, [r5, #16]
   11524:	cmp	r2, #1
   11528:	ldr	lr, [sp, #68]	; 0x44
   1152c:	movne	r2, r8
   11530:	moveq	r2, fp
   11534:	subs	r0, r0, r2
   11538:	ldr	r2, [r4, #4]
   1153c:	ldr	lr, [lr, #4]
   11540:	sbc	r1, r1, #0
   11544:	str	lr, [sp, #68]	; 0x44
   11548:	cmp	r3, #1
   1154c:	ldr	r7, [r2, #4]
   11550:	ldrd	r2, [r4, #16]
   11554:	movne	lr, r8
   11558:	moveq	lr, fp
   1155c:	subs	r2, r2, lr
   11560:	sbc	r3, r3, #0
   11564:	strd	r0, [r5, #16]
   11568:	strd	r2, [sp, #8]
   1156c:	mvn	r2, #0
   11570:	mvn	r3, #0
   11574:	str	r7, [r4, #4]
   11578:	strd	r2, [r5, #8]
   1157c:	strd	r2, [r4, #8]
   11580:	ldrd	r2, [sp, #8]
   11584:	strd	r2, [r4, #16]
   11588:	ldr	r7, [r5, #8]
   1158c:	ldr	r1, [r5, #12]
   11590:	ldr	r3, [r4, #8]
   11594:	ldr	r2, [r4, #12]
   11598:	and	r7, r7, r1
   1159c:	cmn	r7, #1
   115a0:	and	r3, r3, r2
   115a4:	movne	r7, #0
   115a8:	moveq	r7, #1
   115ac:	cmn	r3, #1
   115b0:	movne	r9, #0
   115b4:	moveq	r9, #1
   115b8:	cmn	ip, #1
   115bc:	cmnne	r6, #1
   115c0:	beq	118a4 <__assert_fail@plt+0x960>
   115c4:	ldr	r1, [sp, #20]
   115c8:	mov	r0, r5
   115cc:	bl	12304 <__assert_fail@plt+0x13c0>
   115d0:	mov	r1, sl
   115d4:	mov	r6, r0
   115d8:	mov	r0, r4
   115dc:	bl	12304 <__assert_fail@plt+0x13c0>
   115e0:	cmp	r9, #0
   115e4:	ldr	r3, [sp, #144]	; 0x90
   115e8:	mov	ip, r0
   115ec:	bne	11504 <__assert_fail@plt+0x5c0>
   115f0:	cmp	r3, #2
   115f4:	beq	11588 <__assert_fail@plt+0x644>
   115f8:	ldr	r2, [sp, #60]	; 0x3c
   115fc:	b	11520 <__assert_fail@plt+0x5dc>
   11600:	mov	r2, #256	; 0x100
   11604:	mov	r1, #0
   11608:	add	r0, sp, #144	; 0x90
   1160c:	bl	10ea8 <memset@plt>
   11610:	mvn	r2, #1
   11614:	mvn	r3, #0
   11618:	mov	r9, #256	; 0x100
   1161c:	strd	r2, [r5, #8]
   11620:	mov	r6, #0
   11624:	mov	r7, #1
   11628:	b	11644 <__assert_fail@plt+0x700>
   1162c:	add	r3, sp, #400	; 0x190
   11630:	add	r0, r3, r0
   11634:	ldrb	r3, [r0, #-256]	; 0xffffff00
   11638:	strb	r7, [r0, #-256]	; 0xffffff00
   1163c:	eor	r3, r3, #1
   11640:	sub	r9, r9, r3
   11644:	mov	r1, r6
   11648:	mov	r0, r5
   1164c:	bl	12304 <__assert_fail@plt+0x13c0>
   11650:	cmn	r0, #1
   11654:	bne	1162c <__assert_fail@plt+0x6e8>
   11658:	mov	r2, r9
   1165c:	asr	r3, r9, #31
   11660:	strd	r2, [r5, #16]
   11664:	b	11184 <__assert_fail@plt+0x240>
   11668:	mov	r0, #24
   1166c:	bl	15b10 <__assert_fail@plt+0x4bcc>
   11670:	ldr	r2, [r7]
   11674:	add	r7, sp, #400	; 0x190
   11678:	add	r2, r2, #1
   1167c:	mov	r3, r0
   11680:	str	r0, [r7, #-296]!	; 0xfffffed8
   11684:	str	r4, [r3, #4]
   11688:	ldr	r0, [r6, r2, lsl #2]
   1168c:	mov	r1, r7
   11690:	str	r3, [sp, #108]	; 0x6c
   11694:	bl	129ac <__assert_fail@plt+0x1a68>
   11698:	cmp	r0, r4
   1169c:	beq	11320 <__assert_fail@plt+0x3dc>
   116a0:	mov	r4, r7
   116a4:	b	11170 <__assert_fail@plt+0x22c>
   116a8:	cmn	r7, #1
   116ac:	beq	116bc <__assert_fail@plt+0x778>
   116b0:	ldrb	r3, [r8, #779]	; 0x30b
   116b4:	cmp	r3, #0
   116b8:	beq	11a18 <__assert_fail@plt+0xad4>
   116bc:	ldrb	r3, [r8, #778]	; 0x30a
   116c0:	cmp	r3, #0
   116c4:	bne	118f8 <__assert_fail@plt+0x9b4>
   116c8:	mov	r6, #8192	; 0x2000
   116cc:	ldr	r5, [pc, #1244]	; 11bb0 <__assert_fail@plt+0xc6c>
   116d0:	ldr	r7, [pc, #1176]	; 11b70 <__assert_fail@plt+0xc2c>
   116d4:	b	116f4 <__assert_fail@plt+0x7b0>
   116d8:	ldr	r3, [r7]
   116dc:	mov	r2, r4
   116e0:	mov	r1, #1
   116e4:	mov	r0, r5
   116e8:	bl	10d58 <fwrite_unlocked@plt>
   116ec:	cmp	r4, r0
   116f0:	bne	11a44 <__assert_fail@plt+0xb00>
   116f4:	mov	r1, r6
   116f8:	mov	r0, r5
   116fc:	bl	12664 <__assert_fail@plt+0x1720>
   11700:	subs	r4, r0, #0
   11704:	bne	116d8 <__assert_fail@plt+0x794>
   11708:	b	113e8 <__assert_fail@plt+0x4a4>
   1170c:	ldrd	r0, [r5, #16]
   11710:	cmp	r3, r1
   11714:	cmpeq	r2, r0
   11718:	strd	r0, [sp, #24]
   1171c:	bcs	111e4 <__assert_fail@plt+0x2a0>
   11720:	ldrb	r1, [r8, #779]	; 0x30b
   11724:	cmp	r1, #0
   11728:	bne	111e4 <__assert_fail@plt+0x2a0>
   1172c:	orrs	r1, r2, r3
   11730:	moveq	r2, #5
   11734:	ldreq	r1, [pc, #1144]	; 11bb4 <__assert_fail@plt+0xc70>
   11738:	beq	11828 <__assert_fail@plt+0x8e4>
   1173c:	ldr	r1, [r4, #4]
   11740:	ldr	r0, [r1]
   11744:	cmp	r0, #4
   11748:	ldrls	pc, [pc, r0, lsl #2]
   1174c:	b	11840 <__assert_fail@plt+0x8fc>
   11750:	andeq	r1, r1, r4, ror #14
   11754:	andeq	r1, r1, r0, asr r8
   11758:	andeq	r1, r1, r4, asr #16
   1175c:	andeq	r1, r1, r0, asr #16
   11760:	andeq	r1, r1, r4, ror #14
   11764:	ldrb	r9, [r1, #8]
   11768:	ldrd	r6, [sp, #24]
   1176c:	mov	r0, #24
   11770:	subs	r6, r6, r2
   11774:	sbc	r7, r7, r3
   11778:	bl	15b10 <__assert_fail@plt+0x4bcc>
   1177c:	ldr	r1, [r4, #4]
   11780:	mov	r2, #0
   11784:	mov	r3, #4
   11788:	cmp	r1, r2
   1178c:	strd	r6, [r0, #16]
   11790:	strb	r9, [r0, #8]
   11794:	str	r2, [r0, #4]
   11798:	str	r3, [r0]
   1179c:	beq	11a54 <__assert_fail@plt+0xb10>
   117a0:	ldrb	ip, [r8, #776]	; 0x308
   117a4:	ldrd	r2, [r5, #16]
   117a8:	str	r0, [r1, #4]
   117ac:	cmp	ip, #0
   117b0:	str	r0, [r4, #4]
   117b4:	strd	r2, [r4, #16]
   117b8:	beq	111e4 <__assert_fail@plt+0x2a0>
   117bc:	ldrb	r3, [sp, #97]	; 0x61
   117c0:	cmp	r3, #0
   117c4:	beq	111e4 <__assert_fail@plt+0x2a0>
   117c8:	ldrd	r0, [r4, #16]
   117cc:	ldrd	r2, [r5, #16]
   117d0:	cmp	r1, r3
   117d4:	cmpeq	r0, r2
   117d8:	bne	11820 <__assert_fail@plt+0x8dc>
   117dc:	mvn	r2, #1
   117e0:	mvn	r3, #0
   117e4:	mov	r1, #0
   117e8:	strd	r2, [r4, #8]
   117ec:	mov	r0, r4
   117f0:	bl	12304 <__assert_fail@plt+0x13c0>
   117f4:	cmn	r0, #1
   117f8:	mov	r6, r0
   117fc:	movne	r7, #0
   11800:	beq	11820 <__assert_fail@plt+0x8dc>
   11804:	mov	r1, r7
   11808:	mov	r0, r4
   1180c:	bl	12304 <__assert_fail@plt+0x13c0>
   11810:	cmn	r0, #1
   11814:	beq	111e4 <__assert_fail@plt+0x2a0>
   11818:	cmp	r6, r0
   1181c:	beq	11804 <__assert_fail@plt+0x8c0>
   11820:	ldr	r1, [pc, #912]	; 11bb8 <__assert_fail@plt+0xc74>
   11824:	mov	r2, #5
   11828:	mov	r0, #0
   1182c:	bl	10d88 <dcgettext@plt>
   11830:	mov	r1, #0
   11834:	mov	r2, r0
   11838:	mov	r0, #1
   1183c:	bl	10df4 <error@plt>
   11840:	bl	10f2c <abort@plt>
   11844:	mov	r2, #5
   11848:	ldr	r1, [pc, #876]	; 11bbc <__assert_fail@plt+0xc78>
   1184c:	b	11828 <__assert_fail@plt+0x8e4>
   11850:	ldrb	r9, [r1, #9]
   11854:	b	11768 <__assert_fail@plt+0x824>
   11858:	ldrb	r0, [r8, #780]	; 0x30c
   1185c:	subs	r2, r6, r2
   11860:	ldr	r1, [r4, #28]
   11864:	sbc	r3, r7, r3
   11868:	cmp	r0, #0
   1186c:	strd	r2, [r1, #16]
   11870:	strd	r6, [r4, #16]
   11874:	bne	11424 <__assert_fail@plt+0x4e0>
   11878:	mov	r2, #5
   1187c:	ldr	r1, [pc, #828]	; 11bc0 <__assert_fail@plt+0xc7c>
   11880:	b	11828 <__assert_fail@plt+0x8e4>
   11884:	ldrd	r0, [sp, #24]
   11888:	cmp	r1, r3
   1188c:	cmpeq	r0, r2
   11890:	bls	117bc <__assert_fail@plt+0x878>
   11894:	ldrb	r1, [r8, #779]	; 0x30b
   11898:	cmp	r1, #0
   1189c:	bne	117bc <__assert_fail@plt+0x878>
   118a0:	b	1172c <__assert_fail@plt+0x7e8>
   118a4:	ldrd	r2, [r5, #16]
   118a8:	ldrd	r0, [sp, #24]
   118ac:	ldr	fp, [sp, #48]	; 0x30
   118b0:	ldr	r8, [sp, #52]	; 0x34
   118b4:	cmp	r1, r3
   118b8:	cmpeq	r0, r2
   118bc:	bcc	118e4 <__assert_fail@plt+0x9a0>
   118c0:	ldrd	r0, [sp, #32]
   118c4:	ldrd	r2, [r4, #16]
   118c8:	cmp	r1, r3
   118cc:	cmpeq	r0, r2
   118d0:	ldrcs	r1, [sp, #40]	; 0x28
   118d4:	strcs	r1, [sp, #68]	; 0x44
   118d8:	ldrcs	r1, [sp, #44]	; 0x2c
   118dc:	strcs	r1, [r4, #4]
   118e0:	bcs	1170c <__assert_fail@plt+0x7c8>
   118e4:	ldr	r3, [pc, #728]	; 11bc4 <__assert_fail@plt+0xc80>
   118e8:	ldr	r2, [pc, #728]	; 11bc8 <__assert_fail@plt+0xc84>
   118ec:	ldr	r1, [pc, #728]	; 11bcc <__assert_fail@plt+0xc88>
   118f0:	ldr	r0, [pc, #728]	; 11bd0 <__assert_fail@plt+0xc8c>
   118f4:	bl	10f44 <__assert_fail@plt>
   118f8:	mov	r0, r4
   118fc:	ldr	r2, [pc, #664]	; 11b9c <__assert_fail@plt+0xc58>
   11900:	mov	r1, #0
   11904:	bl	12720 <__assert_fail@plt+0x17dc>
   11908:	ldr	r0, [pc, #708]	; 11bd4 <__assert_fail@plt+0xc90>
   1190c:	bl	12788 <__assert_fail@plt+0x1844>
   11910:	b	113e8 <__assert_fail@plt+0x4a4>
   11914:	ldr	r2, [pc, #632]	; 11b94 <__assert_fail@plt+0xc50>
   11918:	mov	r0, r5
   1191c:	mov	r1, fp
   11920:	add	r7, r2, #256	; 0x100
   11924:	bl	12720 <__assert_fail@plt+0x17dc>
   11928:	mvn	r0, #1
   1192c:	mvn	r1, #0
   11930:	mov	r3, fp
   11934:	strd	r0, [r4, #8]
   11938:	strb	r3, [r7, r3]
   1193c:	add	r3, r3, #1
   11940:	cmp	r3, #256	; 0x100
   11944:	bne	11938 <__assert_fail@plt+0x9f4>
   11948:	mov	r5, #0
   1194c:	ldr	r6, [pc, #576]	; 11b94 <__assert_fail@plt+0xc50>
   11950:	mov	r9, r5
   11954:	b	11964 <__assert_fail@plt+0xa20>
   11958:	add	r5, r5, #1
   1195c:	cmp	r5, #256	; 0x100
   11960:	beq	116bc <__assert_fail@plt+0x778>
   11964:	ldrb	r3, [r6, r5]
   11968:	cmp	r3, #0
   1196c:	bne	11958 <__assert_fail@plt+0xa14>
   11970:	mov	r1, r9
   11974:	mov	r0, r4
   11978:	bl	12304 <__assert_fail@plt+0x13c0>
   1197c:	cmn	r0, #1
   11980:	strbne	r0, [r7, r5]
   11984:	bne	11958 <__assert_fail@plt+0xa14>
   11988:	ldrb	r3, [r8, #779]	; 0x30b
   1198c:	cmp	r3, #0
   11990:	bne	116bc <__assert_fail@plt+0x778>
   11994:	ldr	r3, [pc, #572]	; 11bd8 <__assert_fail@plt+0xc94>
   11998:	mov	r2, #1840	; 0x730
   1199c:	ldr	r1, [pc, #552]	; 11bcc <__assert_fail@plt+0xc88>
   119a0:	ldr	r0, [pc, #564]	; 11bdc <__assert_fail@plt+0xc98>
   119a4:	bl	10f44 <__assert_fail@plt>
   119a8:	mov	r0, r5
   119ac:	ldrb	r1, [r8, #776]	; 0x308
   119b0:	ldr	r2, [pc, #476]	; 11b94 <__assert_fail@plt+0xc50>
   119b4:	bl	12720 <__assert_fail@plt+0x17dc>
   119b8:	ldr	r5, [pc, #496]	; 11bb0 <__assert_fail@plt+0xc6c>
   119bc:	ldr	r7, [pc, #428]	; 11b70 <__assert_fail@plt+0xc2c>
   119c0:	mov	r6, #8192	; 0x2000
   119c4:	b	119e4 <__assert_fail@plt+0xaa0>
   119c8:	ldr	r3, [r7]
   119cc:	mov	r2, r4
   119d0:	mov	r1, #1
   119d4:	mov	r0, r5
   119d8:	bl	10d58 <fwrite_unlocked@plt>
   119dc:	cmp	r4, r0
   119e0:	bne	11a44 <__assert_fail@plt+0xb00>
   119e4:	mov	r1, r6
   119e8:	mov	r0, r5
   119ec:	bl	125a4 <__assert_fail@plt+0x1660>
   119f0:	subs	r4, r0, #0
   119f4:	bne	119c8 <__assert_fail@plt+0xa84>
   119f8:	b	113e8 <__assert_fail@plt+0x4a4>
   119fc:	mov	r0, r5
   11a00:	ldrb	r1, [r8, #776]	; 0x308
   11a04:	ldr	r2, [pc, #400]	; 11b9c <__assert_fail@plt+0xc58>
   11a08:	bl	12720 <__assert_fail@plt+0x17dc>
   11a0c:	ldr	r0, [pc, #460]	; 11be0 <__assert_fail@plt+0xc9c>
   11a10:	bl	12788 <__assert_fail@plt+0x1844>
   11a14:	b	113e8 <__assert_fail@plt+0x4a4>
   11a18:	ldr	r3, [pc, #440]	; 11bd8 <__assert_fail@plt+0xc94>
   11a1c:	ldr	r2, [pc, #448]	; 11be4 <__assert_fail@plt+0xca0>
   11a20:	ldr	r1, [pc, #420]	; 11bcc <__assert_fail@plt+0xc88>
   11a24:	ldr	r0, [pc, #444]	; 11be8 <__assert_fail@plt+0xca4>
   11a28:	bl	10f44 <__assert_fail@plt>
   11a2c:	mov	r2, #5
   11a30:	ldr	r1, [pc, #436]	; 11bec <__assert_fail@plt+0xca8>
   11a34:	b	11828 <__assert_fail@plt+0x8e4>
   11a38:	mov	r2, #5
   11a3c:	ldr	r1, [pc, #428]	; 11bf0 <__assert_fail@plt+0xcac>
   11a40:	b	11828 <__assert_fail@plt+0x8e4>
   11a44:	bl	10e84 <__errno_location@plt>
   11a48:	mov	r2, #5
   11a4c:	ldr	r1, [pc, #416]	; 11bf4 <__assert_fail@plt+0xcb0>
   11a50:	b	11404 <__assert_fail@plt+0x4c0>
   11a54:	bl	10f80 <__assert_fail@plt+0x3c>
   11a58:	mov	r2, #5
   11a5c:	ldr	r1, [pc, #404]	; 11bf8 <__assert_fail@plt+0xcb4>
   11a60:	mov	r0, #0
   11a64:	bl	10d88 <dcgettext@plt>
   11a68:	ldr	r3, [r7]
   11a6c:	add	r4, r4, r3
   11a70:	mov	r5, r0
   11a74:	ldr	r0, [r6, r4, lsl #2]
   11a78:	bl	15570 <__assert_fail@plt+0x462c>
   11a7c:	mov	r1, #0
   11a80:	mov	r2, r5
   11a84:	mov	r3, r0
   11a88:	mov	r0, r1
   11a8c:	bl	10df4 <error@plt>
   11a90:	cmp	fp, #2
   11a94:	bne	11068 <__assert_fail@plt+0x124>
   11a98:	ldr	r3, [pc, #348]	; 11bfc <__assert_fail@plt+0xcb8>
   11a9c:	ldr	r1, [pc, #348]	; 11c00 <__assert_fail@plt+0xcbc>
   11aa0:	mov	r2, #5
   11aa4:	ldr	r4, [r3]
   11aa8:	mov	r0, #0
   11aac:	bl	10d88 <dcgettext@plt>
   11ab0:	ldr	r2, [pc, #332]	; 11c04 <__assert_fail@plt+0xcc0>
   11ab4:	mov	r1, #1
   11ab8:	mov	r3, r0
   11abc:	mov	r0, r4
   11ac0:	bl	10ecc <__fprintf_chk@plt>
   11ac4:	b	11068 <__assert_fail@plt+0x124>
   11ac8:	cmp	fp, r9
   11acc:	mov	r2, #5
   11ad0:	bne	11af4 <__assert_fail@plt+0xbb0>
   11ad4:	ldr	r1, [pc, #300]	; 11c08 <__assert_fail@plt+0xcc4>
   11ad8:	mov	r0, fp
   11adc:	bl	10d88 <dcgettext@plt>
   11ae0:	mov	r1, fp
   11ae4:	mov	r2, r0
   11ae8:	mov	r0, fp
   11aec:	bl	10df4 <error@plt>
   11af0:	b	11068 <__assert_fail@plt+0x124>
   11af4:	ldr	r1, [pc, #272]	; 11c0c <__assert_fail@plt+0xcc8>
   11af8:	mov	r0, r9
   11afc:	bl	10d88 <dcgettext@plt>
   11b00:	sub	r5, r5, #-1073741823	; 0xc0000001
   11b04:	mov	r4, r0
   11b08:	ldr	r0, [r6, r5, lsl #2]
   11b0c:	bl	15570 <__assert_fail@plt+0x462c>
   11b10:	mov	r2, r4
   11b14:	mov	r1, r9
   11b18:	mov	r3, r0
   11b1c:	mov	r0, r9
   11b20:	bl	10df4 <error@plt>
   11b24:	ldrb	r1, [r8, #778]	; 0x30a
   11b28:	ldr	r0, [pc, #204]	; 11bfc <__assert_fail@plt+0xcb8>
   11b2c:	ldr	r2, [pc, #220]	; 11c10 <__assert_fail@plt+0xccc>
   11b30:	ldr	r3, [pc, #220]	; 11c14 <__assert_fail@plt+0xcd0>
   11b34:	cmp	r1, #0
   11b38:	ldr	r4, [r0]
   11b3c:	moveq	r1, r2
   11b40:	mov	r0, r9
   11b44:	movne	r1, r3
   11b48:	mov	r2, #5
   11b4c:	b	11aac <__assert_fail@plt+0xb68>
   11b50:	andeq	r7, r1, ip, lsl #20
   11b54:	andeq	r8, r1, ip, lsl #1
   11b58:	andeq	r7, r1, r4, ror pc
   11b5c:	andeq	r3, r1, r4, lsr r5
   11b60:			; <UNDEFINED> instruction: 0x000172bc
   11b64:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   11b68:	andeq	fp, r2, r4, asr r1
   11b6c:	andeq	r8, r1, r4, lsr #1
   11b70:	andeq	r9, r2, r4, asr r1
   11b74:	strdeq	r9, [r2], -r0
   11b78:	andeq	r8, r1, r8, lsr #1
   11b7c:	strdeq	r7, [r1], -r0
   11b80:	andeq	r7, r1, r0, ror pc
   11b84:	andeq	r9, r2, r0, asr #2
   11b88:	andeq	r8, r1, r8, asr #2
   11b8c:	andeq	r9, r2, r0, asr r1
   11b90:	andeq	r9, r2, fp, asr r2
   11b94:	andeq	r9, r2, ip, asr r1
   11b98:	andeq	r9, r2, ip, asr r2
   11b9c:	andeq	fp, r2, ip, asr r3
   11ba0:	andeq	r2, r1, r4, lsr #11
   11ba4:	andeq	r8, r1, r0, asr #8
   11ba8:			; <UNDEFINED> instruction: 0x000181b4
   11bac:	strdeq	r8, [r1], -r4
   11bb0:	andeq	r9, r2, ip, asr r3
   11bb4:			; <UNDEFINED> instruction: 0x000182bc
   11bb8:	andeq	r8, r1, ip, asr r3
   11bbc:	strdeq	r8, [r1], -r0
   11bc0:	andeq	r8, r1, r8, asr #7
   11bc4:	andeq	r7, r1, ip, lsr #6
   11bc8:	andeq	r0, r0, r8, asr #9
   11bcc:	andeq	r7, r1, r4, ror r3
   11bd0:	andeq	r8, r1, r4, lsl #5
   11bd4:	andeq	r2, r1, r4, ror #12
   11bd8:	andeq	r7, r1, r4, asr #6
   11bdc:	andeq	r8, r1, r8, lsl #8
   11be0:	andeq	r2, r1, r4, lsl #11
   11be4:	andeq	r0, r0, r5, ror #14
   11be8:	andeq	r8, r1, r4, lsr #8
   11bec:	andeq	r8, r1, r4, asr r2
   11bf0:	andeq	r8, r1, ip, ror r1
   11bf4:	andeq	r7, r1, r4, lsr #8
   11bf8:	andeq	r8, r1, ip, ror #1
   11bfc:	andeq	r9, r2, r8, asr #2
   11c00:	andeq	r8, r1, r0, lsl #2
   11c04:	muleq	r1, r8, r6
   11c08:	andeq	r8, r1, r0, asr #1
   11c0c:	ldrdeq	r8, [r1], -r0
   11c10:	andeq	r8, r1, r0, rrx
   11c14:	andeq	r8, r1, ip, lsl r0
   11c18:	mov	fp, #0
   11c1c:	mov	lr, #0
   11c20:	pop	{r1}		; (ldr r1, [sp], #4)
   11c24:	mov	r2, sp
   11c28:	push	{r2}		; (str r2, [sp, #-4]!)
   11c2c:	push	{r0}		; (str r0, [sp, #-4]!)
   11c30:	ldr	ip, [pc, #16]	; 11c48 <__assert_fail@plt+0xd04>
   11c34:	push	{ip}		; (str ip, [sp, #-4]!)
   11c38:	ldr	r0, [pc, #12]	; 11c4c <__assert_fail@plt+0xd08>
   11c3c:	ldr	r3, [pc, #12]	; 11c50 <__assert_fail@plt+0xd0c>
   11c40:	bl	10e0c <__libc_start_main@plt>
   11c44:	bl	10f2c <abort@plt>
   11c48:	andeq	r7, r1, ip, lsr #3
   11c4c:	andeq	r0, r1, r8, lsr #31
   11c50:	andeq	r7, r1, ip, asr #2
   11c54:	ldr	r3, [pc, #20]	; 11c70 <__assert_fail@plt+0xd2c>
   11c58:	ldr	r2, [pc, #20]	; 11c74 <__assert_fail@plt+0xd30>
   11c5c:	add	r3, pc, r3
   11c60:	ldr	r2, [r3, r2]
   11c64:	cmp	r2, #0
   11c68:	bxeq	lr
   11c6c:	b	10e3c <__gmon_start__@plt>
   11c70:	muleq	r1, ip, r3
   11c74:	andeq	r0, r0, r4, ror #1
   11c78:	ldr	r3, [pc, #28]	; 11c9c <__assert_fail@plt+0xd58>
   11c7c:	ldr	r0, [pc, #28]	; 11ca0 <__assert_fail@plt+0xd5c>
   11c80:	sub	r3, r3, r0
   11c84:	cmp	r3, #6
   11c88:	bxls	lr
   11c8c:	ldr	r3, [pc, #16]	; 11ca4 <__assert_fail@plt+0xd60>
   11c90:	cmp	r3, #0
   11c94:	bxeq	lr
   11c98:	bx	r3
   11c9c:	andeq	r9, r2, fp, lsr r1
   11ca0:	andeq	r9, r2, r8, lsr r1
   11ca4:	andeq	r0, r0, r0
   11ca8:	ldr	r1, [pc, #36]	; 11cd4 <__assert_fail@plt+0xd90>
   11cac:	ldr	r0, [pc, #36]	; 11cd8 <__assert_fail@plt+0xd94>
   11cb0:	sub	r1, r1, r0
   11cb4:	asr	r1, r1, #2
   11cb8:	add	r1, r1, r1, lsr #31
   11cbc:	asrs	r1, r1, #1
   11cc0:	bxeq	lr
   11cc4:	ldr	r3, [pc, #16]	; 11cdc <__assert_fail@plt+0xd98>
   11cc8:	cmp	r3, #0
   11ccc:	bxeq	lr
   11cd0:	bx	r3
   11cd4:	andeq	r9, r2, r8, lsr r1
   11cd8:	andeq	r9, r2, r8, lsr r1
   11cdc:	andeq	r0, r0, r0
   11ce0:	push	{r4, lr}
   11ce4:	ldr	r4, [pc, #24]	; 11d04 <__assert_fail@plt+0xdc0>
   11ce8:	ldrb	r3, [r4]
   11cec:	cmp	r3, #0
   11cf0:	popne	{r4, pc}
   11cf4:	bl	11c78 <__assert_fail@plt+0xd34>
   11cf8:	mov	r3, #1
   11cfc:	strb	r3, [r4]
   11d00:	pop	{r4, pc}
   11d04:	andeq	r9, r2, r8, asr r1
   11d08:	ldr	r0, [pc, #40]	; 11d38 <__assert_fail@plt+0xdf4>
   11d0c:	ldr	r3, [r0]
   11d10:	cmp	r3, #0
   11d14:	bne	11d1c <__assert_fail@plt+0xdd8>
   11d18:	b	11ca8 <__assert_fail@plt+0xd64>
   11d1c:	ldr	r3, [pc, #24]	; 11d3c <__assert_fail@plt+0xdf8>
   11d20:	cmp	r3, #0
   11d24:	beq	11d18 <__assert_fail@plt+0xdd4>
   11d28:	push	{r4, lr}
   11d2c:	blx	r3
   11d30:	pop	{r4, lr}
   11d34:	b	11ca8 <__assert_fail@plt+0xd64>
   11d38:	andeq	r8, r2, r4, lsl pc
   11d3c:	andeq	r0, r0, r0
   11d40:	ldr	r3, [r0]
   11d44:	mov	r2, r0
   11d48:	ldrb	r0, [r3, r1]
   11d4c:	cmp	r0, #42	; 0x2a
   11d50:	beq	11d5c <__assert_fail@plt+0xe18>
   11d54:	mov	r0, #0
   11d58:	bx	lr
   11d5c:	push	{r4, r5, r6, lr}
   11d60:	ldr	r5, [r2, #4]
   11d64:	ldrb	r0, [r5, r1]
   11d68:	cmp	r0, #0
   11d6c:	bne	11dec <__assert_fail@plt+0xea8>
   11d70:	ldr	r4, [r2, #8]
   11d74:	add	r1, r1, #1
   11d78:	cmp	r1, r4
   11d7c:	popcs	{r4, r5, r6, pc}
   11d80:	ldrb	r2, [r3, r1]
   11d84:	add	r3, r3, r1
   11d88:	sub	ip, r2, #48	; 0x30
   11d8c:	cmp	ip, #9
   11d90:	bhi	11dd8 <__assert_fail@plt+0xe94>
   11d94:	ldrb	r6, [r5, r1]
   11d98:	add	ip, r5, r1
   11d9c:	cmp	r6, #0
   11da0:	beq	11dc4 <__assert_fail@plt+0xe80>
   11da4:	b	11de8 <__assert_fail@plt+0xea4>
   11da8:	ldrb	r2, [r3, #1]!
   11dac:	sub	lr, r2, #48	; 0x30
   11db0:	cmp	lr, #9
   11db4:	bhi	11dd8 <__assert_fail@plt+0xe94>
   11db8:	ldrb	lr, [ip, #1]!
   11dbc:	cmp	lr, #0
   11dc0:	bne	11dd8 <__assert_fail@plt+0xe94>
   11dc4:	add	r1, r1, #1
   11dc8:	cmp	r1, r4
   11dcc:	bcc	11da8 <__assert_fail@plt+0xe64>
   11dd0:	mov	r0, r6
   11dd4:	pop	{r4, r5, r6, pc}
   11dd8:	cmp	r2, #93	; 0x5d
   11ddc:	ldrbeq	r0, [r5, r1]
   11de0:	eoreq	r0, r0, #1
   11de4:	pop	{r4, r5, r6, pc}
   11de8:	pop	{r4, r5, r6, pc}
   11dec:	mov	r0, #0
   11df0:	pop	{r4, r5, r6, pc}
   11df4:	push	{r4, r5, lr}
   11df8:	mov	r5, r0
   11dfc:	sub	sp, sp, #12
   11e00:	mov	r0, #5
   11e04:	bl	15b10 <__assert_fail@plt+0x4bcc>
   11e08:	mov	r4, r0
   11e0c:	bl	10e54 <__ctype_b_loc@plt>
   11e10:	lsl	r3, r5, #1
   11e14:	ldr	r2, [r0]
   11e18:	ldrh	r3, [r2, r3]
   11e1c:	tst	r3, #16384	; 0x4000
   11e20:	beq	11e3c <__assert_fail@plt+0xef8>
   11e24:	mov	r3, #0
   11e28:	mov	r0, r4
   11e2c:	strb	r5, [r4]
   11e30:	strb	r3, [r4, #1]
   11e34:	add	sp, sp, #12
   11e38:	pop	{r4, r5, pc}
   11e3c:	str	r5, [sp]
   11e40:	ldr	r3, [pc, #24]	; 11e60 <__assert_fail@plt+0xf1c>
   11e44:	mov	r2, #5
   11e48:	mov	r1, #1
   11e4c:	mov	r0, r4
   11e50:	bl	10e90 <__sprintf_chk@plt>
   11e54:	mov	r0, r4
   11e58:	add	sp, sp, #12
   11e5c:	pop	{r4, r5, pc}
   11e60:	andeq	r7, r1, ip, asr #6
   11e64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e68:	mov	r6, r1
   11e6c:	sub	sp, sp, #20
   11e70:	mov	r4, r0
   11e74:	mov	r1, #4
   11e78:	add	r0, r6, #1
   11e7c:	bl	15bf8 <__assert_fail@plt+0x4cb4>
   11e80:	cmp	r6, #0
   11e84:	mov	r7, r0
   11e88:	beq	11f54 <__assert_fail@plt+0x1010>
   11e8c:	ldr	fp, [pc, #236]	; 11f80 <__assert_fail@plt+0x103c>
   11e90:	ldr	sl, [pc, #236]	; 11f84 <__assert_fail@plt+0x1040>
   11e94:	ldr	r9, [pc, #236]	; 11f88 <__assert_fail@plt+0x1044>
   11e98:	add	r6, r4, r6
   11e9c:	mov	r5, r0
   11ea0:	b	11ee0 <__assert_fail@plt+0xf9c>
   11ea4:	cmp	r8, #12
   11ea8:	moveq	r1, sl
   11eac:	beq	11ecc <__assert_fail@plt+0xf88>
   11eb0:	movcc	r1, r9
   11eb4:	bcc	11ecc <__assert_fail@plt+0xf88>
   11eb8:	cmp	r8, #13
   11ebc:	beq	11f44 <__assert_fail@plt+0x1000>
   11ec0:	cmp	r8, #92	; 0x5c
   11ec4:	ldreq	r1, [pc, #192]	; 11f8c <__assert_fail@plt+0x1048>
   11ec8:	bne	11f08 <__assert_fail@plt+0xfc4>
   11ecc:	mov	r0, r5
   11ed0:	bl	10d70 <stpcpy@plt>
   11ed4:	cmp	r4, r6
   11ed8:	mov	r5, r0
   11edc:	beq	11f54 <__assert_fail@plt+0x1010>
   11ee0:	ldrb	r8, [r4], #1
   11ee4:	cmp	r8, #10
   11ee8:	beq	11f4c <__assert_fail@plt+0x1008>
   11eec:	bhi	11ea4 <__assert_fail@plt+0xf60>
   11ef0:	cmp	r8, #8
   11ef4:	beq	11f3c <__assert_fail@plt+0xff8>
   11ef8:	bhi	11f34 <__assert_fail@plt+0xff0>
   11efc:	cmp	r8, #7
   11f00:	ldreq	r1, [pc, #136]	; 11f90 <__assert_fail@plt+0x104c>
   11f04:	beq	11ecc <__assert_fail@plt+0xf88>
   11f08:	bl	10e54 <__ctype_b_loc@plt>
   11f0c:	lsl	r3, r8, #1
   11f10:	ldr	r2, [r0]
   11f14:	ldrh	r3, [r2, r3]
   11f18:	tst	r3, #16384	; 0x4000
   11f1c:	beq	11f60 <__assert_fail@plt+0x101c>
   11f20:	mov	r3, #0
   11f24:	strb	r8, [sp, #8]
   11f28:	strb	r3, [sp, #9]
   11f2c:	add	r1, sp, #8
   11f30:	b	11ecc <__assert_fail@plt+0xf88>
   11f34:	ldr	r1, [pc, #88]	; 11f94 <__assert_fail@plt+0x1050>
   11f38:	b	11ecc <__assert_fail@plt+0xf88>
   11f3c:	ldr	r1, [pc, #84]	; 11f98 <__assert_fail@plt+0x1054>
   11f40:	b	11ecc <__assert_fail@plt+0xf88>
   11f44:	ldr	r1, [pc, #80]	; 11f9c <__assert_fail@plt+0x1058>
   11f48:	b	11ecc <__assert_fail@plt+0xf88>
   11f4c:	mov	r1, fp
   11f50:	b	11ecc <__assert_fail@plt+0xf88>
   11f54:	mov	r0, r7
   11f58:	add	sp, sp, #20
   11f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f60:	mov	r1, #1
   11f64:	str	r8, [sp]
   11f68:	add	r0, sp, #8
   11f6c:	ldr	r3, [pc, #44]	; 11fa0 <__assert_fail@plt+0x105c>
   11f70:	mov	r2, #5
   11f74:	bl	10e90 <__sprintf_chk@plt>
   11f78:	add	r1, sp, #8
   11f7c:	b	11ecc <__assert_fail@plt+0xf88>
   11f80:	andeq	r7, r1, r4, ror #6
   11f84:	andeq	r7, r1, r0, ror #6
   11f88:	andeq	r7, r1, r0, ror r3
   11f8c:	andeq	r7, r1, r4, asr r3
   11f90:	andeq	r7, r1, r8, asr r3
   11f94:	andeq	r7, r1, ip, ror #6
   11f98:	andeq	r7, r1, ip, asr r3
   11f9c:	andeq	r7, r1, r8, ror #6
   11fa0:	andeq	r7, r1, ip, asr #6
   11fa4:	push	{r4, lr}
   11fa8:	mov	r4, r1
   11fac:	cmp	r0, #11
   11fb0:	ldrls	pc, [pc, r0, lsl #2]
   11fb4:	b	12110 <__assert_fail@plt+0x11cc>
   11fb8:	andeq	r2, r1, r8
   11fbc:	andeq	r2, r1, r0, lsr #32
   11fc0:	andeq	r2, r1, r8, lsr r0
   11fc4:	andeq	r2, r1, r0, asr r0
   11fc8:	andeq	r2, r1, r8, rrx
   11fcc:	andeq	r2, r1, r0, lsl #1
   11fd0:	muleq	r1, r8, r0
   11fd4:	strheq	r2, [r1], -r0
   11fd8:	andeq	r2, r1, r8, asr #1
   11fdc:	andeq	r2, r1, r0, ror #1
   11fe0:	strdeq	r2, [r1], -r8
   11fe4:	andeq	r1, r1, r8, ror #31
   11fe8:	bl	10e54 <__ctype_b_loc@plt>
   11fec:	lsl	r4, r4, #1
   11ff0:	ldr	r3, [r0]
   11ff4:	ldrh	r0, [r3, r4]
   11ff8:	and	r0, r0, #4096	; 0x1000
   11ffc:	adds	r0, r0, #0
   12000:	movne	r0, #1
   12004:	pop	{r4, pc}
   12008:	bl	10e54 <__ctype_b_loc@plt>
   1200c:	lsl	r4, r4, #1
   12010:	ldr	r3, [r0]
   12014:	ldrh	r0, [r3, r4]
   12018:	and	r0, r0, #8
   1201c:	b	11ffc <__assert_fail@plt+0x10b8>
   12020:	bl	10e54 <__ctype_b_loc@plt>
   12024:	lsl	r4, r4, #1
   12028:	ldr	r3, [r0]
   1202c:	ldrh	r0, [r3, r4]
   12030:	and	r0, r0, #1024	; 0x400
   12034:	b	11ffc <__assert_fail@plt+0x10b8>
   12038:	bl	10e54 <__ctype_b_loc@plt>
   1203c:	lsl	r4, r4, #1
   12040:	ldr	r3, [r0]
   12044:	ldrh	r0, [r3, r4]
   12048:	and	r0, r0, #1
   1204c:	b	11ffc <__assert_fail@plt+0x10b8>
   12050:	bl	10e54 <__ctype_b_loc@plt>
   12054:	lsl	r4, r4, #1
   12058:	ldr	r3, [r0]
   1205c:	ldrh	r0, [r3, r4]
   12060:	and	r0, r0, #2
   12064:	b	11ffc <__assert_fail@plt+0x10b8>
   12068:	bl	10e54 <__ctype_b_loc@plt>
   1206c:	lsl	r4, r4, #1
   12070:	ldr	r3, [r0]
   12074:	ldrh	r0, [r3, r4]
   12078:	and	r0, r0, #2048	; 0x800
   1207c:	b	11ffc <__assert_fail@plt+0x10b8>
   12080:	bl	10e54 <__ctype_b_loc@plt>
   12084:	lsl	r4, r4, #1
   12088:	ldr	r3, [r0]
   1208c:	ldrh	r0, [r3, r4]
   12090:	and	r0, r0, #32768	; 0x8000
   12094:	b	11ffc <__assert_fail@plt+0x10b8>
   12098:	bl	10e54 <__ctype_b_loc@plt>
   1209c:	lsl	r4, r4, #1
   120a0:	ldr	r3, [r0]
   120a4:	ldrh	r0, [r3, r4]
   120a8:	and	r0, r0, #512	; 0x200
   120ac:	b	11ffc <__assert_fail@plt+0x10b8>
   120b0:	bl	10e54 <__ctype_b_loc@plt>
   120b4:	lsl	r4, r4, #1
   120b8:	ldr	r3, [r0]
   120bc:	ldrh	r0, [r3, r4]
   120c0:	and	r0, r0, #16384	; 0x4000
   120c4:	b	11ffc <__assert_fail@plt+0x10b8>
   120c8:	bl	10e54 <__ctype_b_loc@plt>
   120cc:	lsl	r4, r4, #1
   120d0:	ldr	r3, [r0]
   120d4:	ldrh	r0, [r3, r4]
   120d8:	and	r0, r0, #4
   120dc:	b	11ffc <__assert_fail@plt+0x10b8>
   120e0:	bl	10e54 <__ctype_b_loc@plt>
   120e4:	lsl	r4, r4, #1
   120e8:	ldr	r3, [r0]
   120ec:	ldrh	r0, [r3, r4]
   120f0:	and	r0, r0, #8192	; 0x2000
   120f4:	b	11ffc <__assert_fail@plt+0x10b8>
   120f8:	bl	10e54 <__ctype_b_loc@plt>
   120fc:	lsl	r4, r4, #1
   12100:	ldr	r3, [r0]
   12104:	ldrh	r0, [r3, r4]
   12108:	and	r0, r0, #256	; 0x100
   1210c:	b	11ffc <__assert_fail@plt+0x10b8>
   12110:	bl	10f2c <abort@plt>
   12114:	ldr	r2, [r0]
   12118:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1211c:	mov	r3, #0
   12120:	ldr	r8, [r2, #4]
   12124:	mov	r9, r0
   12128:	cmp	r8, r3
   1212c:	str	r3, [r0, #24]
   12130:	strb	r3, [r0, #32]
   12134:	strb	r3, [r0, #34]	; 0x22
   12138:	strb	r3, [r0, #33]	; 0x21
   1213c:	beq	122b0 <__assert_fail@plt+0x136c>
   12140:	mov	r6, #0
   12144:	mov	r7, #0
   12148:	ldr	r3, [r8]
   1214c:	cmp	r3, #4
   12150:	ldrls	pc, [pc, r3, lsl #2]
   12154:	b	122ac <__assert_fail@plt+0x1368>
   12158:	andeq	r2, r1, ip, ror #2
   1215c:	andeq	r2, r1, ip, lsl #5
   12160:	andeq	r2, r1, r4, lsr r2
   12164:	andeq	r2, r1, r8, ror #3
   12168:	andeq	r2, r1, r0, asr #3
   1216c:	mov	r4, #1
   12170:	mov	r5, #0
   12174:	adds	r4, r4, r6
   12178:	adc	r5, r5, r7
   1217c:	cmp	r7, r5
   12180:	and	r3, r4, r5
   12184:	cmpeq	r6, r4
   12188:	movhi	r2, #1
   1218c:	movls	r2, #0
   12190:	cmn	r3, #1
   12194:	movne	r3, #0
   12198:	moveq	r3, #1
   1219c:	orrs	r3, r2, r3
   121a0:	bne	122d0 <__assert_fail@plt+0x138c>
   121a4:	ldr	r8, [r8, #4]
   121a8:	mov	r6, r4
   121ac:	cmp	r8, #0
   121b0:	mov	r7, r5
   121b4:	bne	12148 <__assert_fail@plt+0x1204>
   121b8:	strd	r4, [r9, #16]
   121bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121c0:	ldrd	r4, [r8, #16]
   121c4:	orrs	r3, r4, r5
   121c8:	bne	12174 <__assert_fail@plt+0x1230>
   121cc:	ldr	r3, [r9, #24]
   121d0:	str	r8, [r9, #28]
   121d4:	add	r3, r3, #1
   121d8:	mov	r4, r6
   121dc:	mov	r5, r7
   121e0:	str	r3, [r9, #24]
   121e4:	b	121a4 <__assert_fail@plt+0x1260>
   121e8:	ldrb	r1, [r8, #8]
   121ec:	mov	r3, #0
   121f0:	mov	r4, #0
   121f4:	mov	r5, #0
   121f8:	b	12208 <__assert_fail@plt+0x12c4>
   121fc:	add	r3, r3, #1
   12200:	cmp	r3, #256	; 0x100
   12204:	beq	12228 <__assert_fail@plt+0x12e4>
   12208:	uxtb	r2, r3
   1220c:	cmp	r1, r2
   12210:	bne	121fc <__assert_fail@plt+0x12b8>
   12214:	adds	r4, r4, #1
   12218:	add	r3, r3, #1
   1221c:	adc	r5, r5, #0
   12220:	cmp	r3, #256	; 0x100
   12224:	bne	12208 <__assert_fail@plt+0x12c4>
   12228:	mov	r3, #1
   1222c:	strb	r3, [r9, #32]
   12230:	b	12174 <__assert_fail@plt+0x1230>
   12234:	mov	r3, #1
   12238:	strb	r3, [r9, #33]	; 0x21
   1223c:	ldr	fp, [r8, #8]
   12240:	mov	sl, #0
   12244:	mov	r4, #0
   12248:	mov	r5, #0
   1224c:	uxtb	r1, sl
   12250:	mov	r0, fp
   12254:	bl	11fa4 <__assert_fail@plt+0x1060>
   12258:	cmp	r0, #0
   1225c:	beq	12268 <__assert_fail@plt+0x1324>
   12260:	adds	r4, r4, #1
   12264:	adc	r5, r5, #0
   12268:	add	sl, sl, #1
   1226c:	cmp	sl, #256	; 0x100
   12270:	bne	1224c <__assert_fail@plt+0x1308>
   12274:	cmp	fp, #6
   12278:	beq	12174 <__assert_fail@plt+0x1230>
   1227c:	cmp	fp, #10
   12280:	movne	r3, #1
   12284:	strbne	r3, [r9, #34]	; 0x22
   12288:	b	12174 <__assert_fail@plt+0x1230>
   1228c:	ldrb	r3, [r8, #9]
   12290:	ldrb	r4, [r8, #8]
   12294:	cmp	r3, r4
   12298:	bcc	122bc <__assert_fail@plt+0x1378>
   1229c:	sub	r4, r3, r4
   122a0:	add	r4, r4, #1
   122a4:	asr	r5, r4, #31
   122a8:	b	12174 <__assert_fail@plt+0x1230>
   122ac:	bl	10f2c <abort@plt>
   122b0:	mov	r4, #0
   122b4:	mov	r5, #0
   122b8:	b	121b8 <__assert_fail@plt+0x1274>
   122bc:	ldr	r3, [pc, #44]	; 122f0 <__assert_fail@plt+0x13ac>
   122c0:	ldr	r2, [pc, #44]	; 122f4 <__assert_fail@plt+0x13b0>
   122c4:	ldr	r1, [pc, #44]	; 122f8 <__assert_fail@plt+0x13b4>
   122c8:	ldr	r0, [pc, #44]	; 122fc <__assert_fail@plt+0x13b8>
   122cc:	bl	10f44 <__assert_fail@plt>
   122d0:	mov	r2, #5
   122d4:	ldr	r1, [pc, #36]	; 12300 <__assert_fail@plt+0x13bc>
   122d8:	mov	r0, #0
   122dc:	bl	10d88 <dcgettext@plt>
   122e0:	mov	r1, #0
   122e4:	mov	r2, r0
   122e8:	mov	r0, #1
   122ec:	bl	10df4 <error@plt>
   122f0:	ldrdeq	r7, [r1], -r4
   122f4:	strdeq	r0, [r0], -r1
   122f8:	andeq	r7, r1, r4, ror r3
   122fc:	andeq	r7, r1, r0, lsl #7
   12300:			; <UNDEFINED> instruction: 0x000173b0
   12304:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12308:	mov	ip, #2
   1230c:	mov	r5, r0
   12310:	mov	lr, r1
   12314:	ldrd	r2, [r0, #8]
   12318:	mvn	r1, #0
   1231c:	mvn	r0, #1
   12320:	mvn	r6, #0
   12324:	mvn	r7, #0
   12328:	cmp	lr, #0
   1232c:	strne	ip, [lr]
   12330:	cmp	r3, r1
   12334:	cmpeq	r2, r0
   12338:	beq	1238c <__assert_fail@plt+0x1448>
   1233c:	ldr	r8, [r5, #4]
   12340:	cmp	r8, #0
   12344:	beq	124f8 <__assert_fail@plt+0x15b4>
   12348:	ldr	r3, [r8]
   1234c:	cmp	r3, #4
   12350:	ldrls	pc, [pc, r3, lsl #2]
   12354:	b	124a4 <__assert_fail@plt+0x1560>
   12358:	andeq	r2, r1, ip, ror #6
   1235c:	andeq	r2, r1, r0, asr r4
   12360:	andeq	r2, r1, r0, lsr #7
   12364:	andeq	r2, r1, ip, ror #6
   12368:	andeq	r2, r1, ip, lsr #8
   1236c:	ldr	r3, [r8, #4]
   12370:	mvn	r0, #0
   12374:	mvn	r1, #0
   12378:	ldrb	r6, [r8, #8]
   1237c:	strd	r0, [r5, #8]
   12380:	str	r3, [r5, #4]
   12384:	mov	r0, r6
   12388:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1238c:	ldr	r3, [r5]
   12390:	ldr	r8, [r3, #4]
   12394:	strd	r6, [r5, #8]
   12398:	str	r8, [r5, #4]
   1239c:	b	12340 <__assert_fail@plt+0x13fc>
   123a0:	cmp	lr, #0
   123a4:	ldr	r9, [r8, #8]
   123a8:	beq	123c0 <__assert_fail@plt+0x147c>
   123ac:	cmp	r9, #6
   123b0:	beq	124a8 <__assert_fail@plt+0x1564>
   123b4:	cmp	r9, #10
   123b8:	moveq	r3, #1
   123bc:	streq	r3, [lr]
   123c0:	ldrd	r6, [r5, #8]
   123c4:	mvn	r3, #0
   123c8:	mvn	r2, #0
   123cc:	cmp	r7, r3
   123d0:	cmpeq	r6, r2
   123d4:	beq	124c4 <__assert_fail@plt+0x1580>
   123d8:	uxtb	r1, r6
   123dc:	mov	r0, r9
   123e0:	bl	11fa4 <__assert_fail@plt+0x1060>
   123e4:	cmp	r0, #0
   123e8:	beq	12558 <__assert_fail@plt+0x1614>
   123ec:	add	r4, r6, #1
   123f0:	cmp	r4, #255	; 0xff
   123f4:	ble	12408 <__assert_fail@plt+0x14c4>
   123f8:	b	12488 <__assert_fail@plt+0x1544>
   123fc:	add	r4, r4, #1
   12400:	cmp	r4, #256	; 0x100
   12404:	beq	12488 <__assert_fail@plt+0x1544>
   12408:	uxtb	r1, r4
   1240c:	mov	r0, r9
   12410:	bl	11fa4 <__assert_fail@plt+0x1060>
   12414:	cmp	r0, #0
   12418:	beq	123fc <__assert_fail@plt+0x14b8>
   1241c:	mov	r2, r4
   12420:	asr	r3, r4, #31
   12424:	strd	r2, [r5, #8]
   12428:	b	12384 <__assert_fail@plt+0x1440>
   1242c:	ldrd	r2, [r8, #16]
   12430:	orrs	r4, r2, r3
   12434:	bne	12514 <__assert_fail@plt+0x15d0>
   12438:	ldr	r3, [r8, #4]
   1243c:	mvn	r2, #0
   12440:	str	r3, [r5, #4]
   12444:	strd	r6, [r5, #8]
   12448:	mvn	r3, #0
   1244c:	b	12328 <__assert_fail@plt+0x13e4>
   12450:	ldrd	r6, [r5, #8]
   12454:	mvn	r3, #0
   12458:	mvn	r2, #0
   1245c:	cmp	r7, r3
   12460:	cmpeq	r6, r2
   12464:	beq	124b4 <__assert_fail@plt+0x1570>
   12468:	adds	r6, r6, #1
   1246c:	adc	r7, r7, #0
   12470:	strd	r6, [r5, #8]
   12474:	ldrb	r2, [r8, #9]
   12478:	mov	r3, #0
   1247c:	cmp	r3, r7
   12480:	cmpeq	r2, r6
   12484:	bne	12384 <__assert_fail@plt+0x1440>
   12488:	ldr	r1, [r8, #4]
   1248c:	mvn	r2, #0
   12490:	mvn	r3, #0
   12494:	str	r1, [r5, #4]
   12498:	strd	r2, [r5, #8]
   1249c:	mov	r0, r6
   124a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124a4:	bl	10f2c <abort@plt>
   124a8:	mov	r3, #0
   124ac:	str	r3, [lr]
   124b0:	b	123c0 <__assert_fail@plt+0x147c>
   124b4:	ldrb	r6, [r8, #8]
   124b8:	mov	r7, #0
   124bc:	strd	r6, [r5, #8]
   124c0:	b	12474 <__assert_fail@plt+0x1530>
   124c4:	mov	r6, #0
   124c8:	b	124d8 <__assert_fail@plt+0x1594>
   124cc:	add	r6, r6, #1
   124d0:	cmp	r6, #256	; 0x100
   124d4:	beq	12500 <__assert_fail@plt+0x15bc>
   124d8:	uxtb	r1, r6
   124dc:	mov	r0, r9
   124e0:	bl	11fa4 <__assert_fail@plt+0x1060>
   124e4:	cmp	r0, #0
   124e8:	beq	124cc <__assert_fail@plt+0x1588>
   124ec:	asr	r7, r6, #31
   124f0:	strd	r6, [r5, #8]
   124f4:	b	123d8 <__assert_fail@plt+0x1494>
   124f8:	mvn	r6, #0
   124fc:	b	12384 <__assert_fail@plt+0x1440>
   12500:	ldr	r3, [pc, #100]	; 1256c <__assert_fail@plt+0x1628>
   12504:	ldr	r2, [pc, #100]	; 12570 <__assert_fail@plt+0x162c>
   12508:	ldr	r1, [pc, #100]	; 12574 <__assert_fail@plt+0x1630>
   1250c:	ldr	r0, [pc, #100]	; 12578 <__assert_fail@plt+0x1634>
   12510:	bl	10f44 <__assert_fail@plt>
   12514:	ldrd	r0, [r5, #8]
   12518:	mvn	r7, #0
   1251c:	mvn	r6, #0
   12520:	cmp	r1, r7
   12524:	cmpeq	r0, r6
   12528:	beq	1254c <__assert_fail@plt+0x1608>
   1252c:	adds	r0, r0, #1
   12530:	adc	r1, r1, #0
   12534:	cmp	r3, r1
   12538:	cmpeq	r2, r0
   1253c:	strd	r0, [r5, #8]
   12540:	ldrb	r6, [r8, #8]
   12544:	bne	12384 <__assert_fail@plt+0x1440>
   12548:	b	12488 <__assert_fail@plt+0x1544>
   1254c:	mov	r0, #1
   12550:	mov	r1, #0
   12554:	b	12534 <__assert_fail@plt+0x15f0>
   12558:	ldr	r3, [pc, #12]	; 1256c <__assert_fail@plt+0x1628>
   1255c:	ldr	r2, [pc, #24]	; 1257c <__assert_fail@plt+0x1638>
   12560:	ldr	r1, [pc, #12]	; 12574 <__assert_fail@plt+0x1630>
   12564:	ldr	r0, [pc, #20]	; 12580 <__assert_fail@plt+0x163c>
   12568:	bl	10f44 <__assert_fail@plt>
   1256c:	andeq	r7, r1, r4, ror #3
   12570:	andeq	r0, r0, r7, lsr r4
   12574:	andeq	r7, r1, r4, ror r3
   12578:	andeq	r7, r1, r0, lsl #8
   1257c:	andeq	r0, r0, sl, lsr r4
   12580:	andeq	r7, r1, ip, asr #7
   12584:	push	{r4, lr}
   12588:	mov	r2, r1
   1258c:	mov	r1, r0
   12590:	mov	r0, #0
   12594:	bl	15588 <__assert_fail@plt+0x4644>
   12598:	cmn	r0, #1
   1259c:	popne	{r4, pc}
   125a0:	bl	10f50 <__assert_fail@plt+0xc>
   125a4:	push	{r4, r5, r6, r7, r8, lr}
   125a8:	mov	r5, r0
   125ac:	ldr	r4, [pc, #172]	; 12660 <__assert_fail@plt+0x171c>
   125b0:	mov	r6, r1
   125b4:	mov	r7, #0
   125b8:	mov	r2, r6
   125bc:	mov	r1, r5
   125c0:	mov	r0, r7
   125c4:	bl	15588 <__assert_fail@plt+0x4644>
   125c8:	cmn	r0, #1
   125cc:	beq	1265c <__assert_fail@plt+0x1718>
   125d0:	cmp	r0, #0
   125d4:	popeq	{r4, r5, r6, r7, r8, pc}
   125d8:	sub	r3, r5, #1
   125dc:	mov	r1, r7
   125e0:	ldrb	r2, [r3, #1]!
   125e4:	ldrb	r2, [r4, r2]
   125e8:	cmp	r2, #0
   125ec:	beq	12634 <__assert_fail@plt+0x16f0>
   125f0:	add	r3, r1, #1
   125f4:	cmp	r3, r0
   125f8:	bcs	12624 <__assert_fail@plt+0x16e0>
   125fc:	sub	r0, r0, #1
   12600:	add	ip, r5, r0
   12604:	add	r3, r5, r1
   12608:	ldrb	r2, [r3, #1]!
   1260c:	ldrb	r0, [r4, r2]
   12610:	cmp	r0, #0
   12614:	strbeq	r2, [r5, r1]
   12618:	addeq	r1, r1, #1
   1261c:	cmp	ip, r3
   12620:	bne	12608 <__assert_fail@plt+0x16c4>
   12624:	cmp	r1, #0
   12628:	beq	125b8 <__assert_fail@plt+0x1674>
   1262c:	mov	r0, r1
   12630:	pop	{r4, r5, r6, r7, r8, pc}
   12634:	add	r2, r1, #1
   12638:	cmp	r2, r0
   1263c:	movne	r1, r2
   12640:	bne	125e0 <__assert_fail@plt+0x169c>
   12644:	add	r1, r1, #2
   12648:	cmp	r0, r1
   1264c:	mov	r1, r0
   12650:	bhi	125fc <__assert_fail@plt+0x16b8>
   12654:	mov	r0, r1
   12658:	pop	{r4, r5, r6, r7, r8, pc}
   1265c:	bl	10f50 <__assert_fail@plt+0xc>
   12660:	andeq	r9, r2, ip, asr r1
   12664:	push	{r4, lr}
   12668:	mov	r4, r0
   1266c:	mov	r2, r1
   12670:	mov	r0, #0
   12674:	mov	r1, r4
   12678:	bl	15588 <__assert_fail@plt+0x4644>
   1267c:	cmn	r0, #1
   12680:	beq	126b8 <__assert_fail@plt+0x1774>
   12684:	cmp	r0, #0
   12688:	beq	126b4 <__assert_fail@plt+0x1770>
   1268c:	ldr	ip, [pc, #40]	; 126bc <__assert_fail@plt+0x1778>
   12690:	mov	r1, r4
   12694:	add	r2, r4, r0
   12698:	ldrb	r3, [r1]
   1269c:	add	r3, ip, r3
   126a0:	ldrb	r3, [r3, #256]	; 0x100
   126a4:	strb	r3, [r1], #1
   126a8:	cmp	r1, r2
   126ac:	bne	12698 <__assert_fail@plt+0x1754>
   126b0:	pop	{r4, pc}
   126b4:	pop	{r4, pc}
   126b8:	bl	10f50 <__assert_fail@plt+0xc>
   126bc:	andeq	r9, r2, ip, asr r1
   126c0:	push	{r4, r5, r6, lr}
   126c4:	mov	r4, r0
   126c8:	mov	r0, #24
   126cc:	mov	r5, r1
   126d0:	bl	15b10 <__assert_fail@plt+0x4bcc>
   126d4:	ldr	r2, [r4]
   126d8:	mov	r3, #0
   126dc:	cmp	r2, r3
   126e0:	strb	r5, [r0, #8]
   126e4:	str	r3, [r0, #4]
   126e8:	str	r3, [r0]
   126ec:	beq	126fc <__assert_fail@plt+0x17b8>
   126f0:	str	r0, [r2, #4]
   126f4:	str	r0, [r4]
   126f8:	pop	{r4, r5, r6, pc}
   126fc:	ldr	r3, [pc, #12]	; 12710 <__assert_fail@plt+0x17cc>
   12700:	ldr	r2, [pc, #12]	; 12714 <__assert_fail@plt+0x17d0>
   12704:	ldr	r1, [pc, #12]	; 12718 <__assert_fail@plt+0x17d4>
   12708:	ldr	r0, [pc, #12]	; 1271c <__assert_fail@plt+0x17d8>
   1270c:	bl	10f44 <__assert_fail@plt>
   12710:	andeq	r7, r1, r8, lsl #4
   12714:	andeq	r0, r0, r9, lsl #5
   12718:	andeq	r7, r1, r4, ror r3
   1271c:	andeq	r7, r1, r8, lsl r4
   12720:	push	{r4, r5, r6, r7, r8, lr}
   12724:	mvn	r6, #1
   12728:	mvn	r7, #0
   1272c:	mov	r5, r0
   12730:	strd	r6, [r0, #8]
   12734:	mov	r8, r1
   12738:	mov	r4, r2
   1273c:	mov	r6, #0
   12740:	mov	r7, #1
   12744:	b	1274c <__assert_fail@plt+0x1808>
   12748:	strb	r7, [r4, r0]
   1274c:	mov	r1, r6
   12750:	mov	r0, r5
   12754:	bl	12304 <__assert_fail@plt+0x13c0>
   12758:	cmn	r0, #1
   1275c:	bne	12748 <__assert_fail@plt+0x1804>
   12760:	cmp	r8, #0
   12764:	popeq	{r4, r5, r6, r7, r8, pc}
   12768:	sub	r3, r4, #1
   1276c:	add	r1, r4, #255	; 0xff
   12770:	ldrb	r2, [r3, #1]
   12774:	eor	r2, r2, #1
   12778:	strb	r2, [r3, #1]!
   1277c:	cmp	r3, r1
   12780:	bne	12770 <__assert_fail@plt+0x182c>
   12784:	pop	{r4, r5, r6, r7, r8, pc}
   12788:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1278c:	mov	r5, #0
   12790:	ldr	r6, [pc, #512]	; 12998 <__assert_fail@plt+0x1a54>
   12794:	ldr	r9, [pc, #512]	; 1299c <__assert_fail@plt+0x1a58>
   12798:	mov	fp, r0
   1279c:	mov	r8, r6
   127a0:	mov	r4, r5
   127a4:	mvn	r7, #-2147483648	; 0x80000000
   127a8:	cmp	r4, r5
   127ac:	bcs	12918 <__assert_fail@plt+0x19d4>
   127b0:	cmn	r7, #-2147483647	; 0x80000001
   127b4:	bne	1285c <__assert_fail@plt+0x1918>
   127b8:	add	r2, r6, r4
   127bc:	mov	r3, r4
   127c0:	mov	r7, #1
   127c4:	ldrb	r2, [r2]
   127c8:	add	r2, r9, r2
   127cc:	ldrb	r2, [r2, #520]	; 0x208
   127d0:	cmp	r2, #0
   127d4:	bne	128b0 <__assert_fail@plt+0x196c>
   127d8:	mov	r1, r3
   127dc:	add	r4, r1, #2
   127e0:	cmp	r4, r5
   127e4:	bcs	12944 <__assert_fail@plt+0x1a00>
   127e8:	ldrb	r2, [r6, r4]
   127ec:	mov	r1, r4
   127f0:	add	r2, r9, r2
   127f4:	ldrb	r2, [r2, #520]	; 0x208
   127f8:	cmp	r2, #0
   127fc:	beq	127dc <__assert_fail@plt+0x1898>
   12800:	ldr	r2, [pc, #408]	; 129a0 <__assert_fail@plt+0x1a5c>
   12804:	cmp	r4, #0
   12808:	add	r1, r2, r4
   1280c:	sub	r2, r4, r3
   12810:	ldrb	r7, [r1, #512]	; 0x200
   12814:	add	sl, r2, #1
   12818:	beq	12828 <__assert_fail@plt+0x18e4>
   1281c:	ldrb	r1, [r1, #511]	; 0x1ff
   12820:	cmp	r7, r1
   12824:	moveq	sl, r2
   12828:	cmp	sl, #0
   1282c:	add	r4, r4, #1
   12830:	beq	12854 <__assert_fail@plt+0x1910>
   12834:	add	r0, r6, r3
   12838:	ldr	r3, [pc, #356]	; 129a4 <__assert_fail@plt+0x1a60>
   1283c:	mov	r2, sl
   12840:	mov	r1, #1
   12844:	ldr	r3, [r3]
   12848:	bl	10d58 <fwrite_unlocked@plt>
   1284c:	cmp	r0, sl
   12850:	bne	12970 <__assert_fail@plt+0x1a2c>
   12854:	cmp	r4, r5
   12858:	bcs	127a8 <__assert_fail@plt+0x1864>
   1285c:	ldrb	r3, [r6, r4]
   12860:	add	r2, r6, r4
   12864:	cmp	r7, r3
   12868:	beq	12894 <__assert_fail@plt+0x1950>
   1286c:	cmp	r5, r4
   12870:	bhi	127b8 <__assert_fail@plt+0x1874>
   12874:	mov	r1, #8192	; 0x2000
   12878:	mov	r0, r8
   1287c:	blx	fp
   12880:	mov	r3, #0
   12884:	mov	r2, r8
   12888:	subs	r5, r0, #0
   1288c:	bne	127c0 <__assert_fail@plt+0x187c>
   12890:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12894:	add	r4, r4, #1
   12898:	cmp	r5, r4
   1289c:	beq	127a8 <__assert_fail@plt+0x1864>
   128a0:	ldrb	r1, [r2, #1]!
   128a4:	cmp	r1, r3
   128a8:	bne	1286c <__assert_fail@plt+0x1928>
   128ac:	b	12894 <__assert_fail@plt+0x1950>
   128b0:	mov	r4, r3
   128b4:	cmp	r4, r5
   128b8:	bcc	12800 <__assert_fail@plt+0x18bc>
   128bc:	subs	sl, r5, r3
   128c0:	beq	1290c <__assert_fail@plt+0x19c8>
   128c4:	add	r0, r6, r3
   128c8:	ldr	r3, [pc, #212]	; 129a4 <__assert_fail@plt+0x1a60>
   128cc:	mov	r2, sl
   128d0:	mov	r1, r7
   128d4:	ldr	r3, [r3]
   128d8:	bl	10d58 <fwrite_unlocked@plt>
   128dc:	cmp	sl, r0
   128e0:	bne	12970 <__assert_fail@plt+0x1a2c>
   128e4:	cmp	r5, r4
   128e8:	bhi	127b8 <__assert_fail@plt+0x1874>
   128ec:	mov	r1, #8192	; 0x2000
   128f0:	mov	r0, r8
   128f4:	blx	fp
   128f8:	mov	r3, #0
   128fc:	mov	r2, r8
   12900:	subs	r5, r0, #0
   12904:	bne	127c4 <__assert_fail@plt+0x1880>
   12908:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1290c:	cmp	r5, r4
   12910:	mvn	r7, #-2147483648	; 0x80000000
   12914:	bhi	127b8 <__assert_fail@plt+0x1874>
   12918:	mov	r1, #8192	; 0x2000
   1291c:	mov	r0, r8
   12920:	blx	fp
   12924:	subs	r5, r0, #0
   12928:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1292c:	cmn	r7, #-2147483647	; 0x80000001
   12930:	movne	r4, #0
   12934:	bne	12854 <__assert_fail@plt+0x1910>
   12938:	mov	r2, r8
   1293c:	mov	r3, #0
   12940:	b	127c0 <__assert_fail@plt+0x187c>
   12944:	bne	128bc <__assert_fail@plt+0x1978>
   12948:	ldr	r2, [pc, #80]	; 129a0 <__assert_fail@plt+0x1a5c>
   1294c:	add	r1, r1, #1
   12950:	add	r2, r2, r1
   12954:	ldrb	r2, [r2, #512]	; 0x200
   12958:	add	r2, r9, r2
   1295c:	ldrb	r2, [r2, #520]	; 0x208
   12960:	cmp	r2, #0
   12964:	movne	r4, r1
   12968:	bne	128b4 <__assert_fail@plt+0x1970>
   1296c:	b	128bc <__assert_fail@plt+0x1978>
   12970:	bl	10e84 <__errno_location@plt>
   12974:	mov	r2, #5
   12978:	ldr	r1, [pc, #40]	; 129a8 <__assert_fail@plt+0x1a64>
   1297c:	ldr	r4, [r0]
   12980:	mov	r0, #0
   12984:	bl	10d88 <dcgettext@plt>
   12988:	mov	r1, r4
   1298c:	mov	r2, r0
   12990:	mov	r0, #1
   12994:	bl	10df4 <error@plt>
   12998:	andeq	r9, r2, ip, asr r3
   1299c:	andeq	fp, r2, r4, asr r1
   129a0:	andeq	r9, r2, ip, asr r1
   129a4:	andeq	r9, r2, r4, asr r1
   129a8:	andeq	r7, r1, r4, lsr #8
   129ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129b0:	sub	sp, sp, #108	; 0x6c
   129b4:	mov	r8, r0
   129b8:	str	r1, [sp, #36]	; 0x24
   129bc:	bl	10e6c <strlen@plt>
   129c0:	mov	r4, r0
   129c4:	bl	15b10 <__assert_fail@plt+0x4bcc>
   129c8:	mov	r1, #1
   129cc:	mov	r5, r0
   129d0:	str	r0, [sp, #32]
   129d4:	mov	r0, r4
   129d8:	str	r5, [sp, #92]	; 0x5c
   129dc:	bl	15f70 <__assert_fail@plt+0x502c>
   129e0:	ldrb	r7, [r8]
   129e4:	cmp	r7, #0
   129e8:	str	r0, [sp, #28]
   129ec:	str	r0, [sp, #96]	; 0x60
   129f0:	beq	12b00 <__assert_fail@plt+0x1bbc>
   129f4:	mov	fp, #1
   129f8:	mov	r4, #0
   129fc:	mov	r6, r7
   12a00:	cmp	r6, #92	; 0x5c
   12a04:	strbne	r6, [r5]
   12a08:	bne	12a64 <__assert_fail@plt+0x1b20>
   12a0c:	add	sl, r4, #1
   12a10:	ldr	r3, [sp, #28]
   12a14:	ldrb	r9, [r8, sl]
   12a18:	add	r7, r3, fp
   12a1c:	mov	r2, #1
   12a20:	cmp	r9, #98	; 0x62
   12a24:	add	r3, r8, sl
   12a28:	strb	r2, [r7, #-1]
   12a2c:	beq	12fa4 <__assert_fail@plt+0x2060>
   12a30:	bls	12a84 <__assert_fail@plt+0x1b40>
   12a34:	cmp	r9, #114	; 0x72
   12a38:	moveq	r6, #13
   12a3c:	beq	12a5c <__assert_fail@plt+0x1b18>
   12a40:	bhi	12ac8 <__assert_fail@plt+0x1b84>
   12a44:	cmp	r9, #102	; 0x66
   12a48:	moveq	r6, #12
   12a4c:	beq	12a5c <__assert_fail@plt+0x1b18>
   12a50:	cmp	r9, #110	; 0x6e
   12a54:	moveq	r6, #10
   12a58:	bne	12ae0 <__assert_fail@plt+0x1b9c>
   12a5c:	mov	r4, sl
   12a60:	strb	r6, [r5]
   12a64:	add	r4, r4, #1
   12a68:	add	r5, r5, #1
   12a6c:	ldrb	r6, [r8, r4]
   12a70:	add	r3, fp, #1
   12a74:	cmp	r6, #0
   12a78:	beq	12b04 <__assert_fail@plt+0x1bc0>
   12a7c:	mov	fp, r3
   12a80:	b	12a00 <__assert_fail@plt+0x1abc>
   12a84:	cmp	r9, #55	; 0x37
   12a88:	bhi	12ae8 <__assert_fail@plt+0x1ba4>
   12a8c:	cmp	r9, #48	; 0x30
   12a90:	bcs	12f48 <__assert_fail@plt+0x2004>
   12a94:	cmp	r9, #0
   12a98:	bne	12ae0 <__assert_fail@plt+0x1b9c>
   12a9c:	mov	r2, #5
   12aa0:	ldr	r1, [pc, #1776]	; 13198 <__assert_fail@plt+0x2254>
   12aa4:	mov	r0, r9
   12aa8:	bl	10d88 <dcgettext@plt>
   12aac:	mov	r1, r9
   12ab0:	mov	sl, r4
   12ab4:	mov	r2, r0
   12ab8:	mov	r0, r9
   12abc:	bl	10df4 <error@plt>
   12ac0:	strb	r9, [r7, #-1]
   12ac4:	b	12a5c <__assert_fail@plt+0x1b18>
   12ac8:	cmp	r9, #116	; 0x74
   12acc:	moveq	r6, #9
   12ad0:	beq	12a5c <__assert_fail@plt+0x1b18>
   12ad4:	cmp	r9, #118	; 0x76
   12ad8:	moveq	r6, #11
   12adc:	beq	12a5c <__assert_fail@plt+0x1b18>
   12ae0:	mov	r6, r9
   12ae4:	b	12a5c <__assert_fail@plt+0x1b18>
   12ae8:	cmp	r9, #92	; 0x5c
   12aec:	beq	12a5c <__assert_fail@plt+0x1b18>
   12af0:	cmp	r9, #97	; 0x61
   12af4:	moveq	r6, #7
   12af8:	beq	12a5c <__assert_fail@plt+0x1b18>
   12afc:	b	12ae0 <__assert_fail@plt+0x1b9c>
   12b00:	mov	fp, r7
   12b04:	ldr	sl, [sp, #32]
   12b08:	mov	r5, #0
   12b0c:	str	fp, [sp, #100]	; 0x64
   12b10:	add	r8, r5, #2
   12b14:	cmp	r8, fp
   12b18:	bcs	12b5c <__assert_fail@plt+0x1c18>
   12b1c:	ldrb	r3, [sl, r5]
   12b20:	cmp	r3, #91	; 0x5b
   12b24:	beq	12b98 <__assert_fail@plt+0x1c54>
   12b28:	add	r6, r5, #1
   12b2c:	ldrb	r9, [sl, r6]
   12b30:	cmp	r9, #45	; 0x2d
   12b34:	beq	12dc8 <__assert_fail@plt+0x1e84>
   12b38:	ldr	r3, [sp, #32]
   12b3c:	ldrb	r1, [r3, r5]
   12b40:	ldr	r3, [sp, #36]	; 0x24
   12b44:	mov	r5, r6
   12b48:	add	r0, r3, #4
   12b4c:	add	r8, r5, #2
   12b50:	bl	126c0 <__assert_fail@plt+0x177c>
   12b54:	cmp	r8, fp
   12b58:	bcc	12b1c <__assert_fail@plt+0x1bd8>
   12b5c:	cmp	r5, fp
   12b60:	bcs	12b8c <__assert_fail@plt+0x1c48>
   12b64:	ldr	r3, [sp, #36]	; 0x24
   12b68:	add	r6, r3, #4
   12b6c:	ldr	r3, [sp, #32]
   12b70:	add	r5, r3, r5
   12b74:	add	r4, r3, fp
   12b78:	ldrb	r1, [r5], #1
   12b7c:	mov	r0, r6
   12b80:	bl	126c0 <__assert_fail@plt+0x177c>
   12b84:	cmp	r5, r4
   12b88:	bne	12b78 <__assert_fail@plt+0x1c34>
   12b8c:	mov	r3, #1
   12b90:	str	r3, [sp, #40]	; 0x28
   12b94:	b	12e88 <__assert_fail@plt+0x1f44>
   12b98:	ldr	r3, [sp, #28]
   12b9c:	add	r6, r5, #1
   12ba0:	ldrb	r3, [r3, r5]
   12ba4:	cmp	r3, #0
   12ba8:	str	r3, [sp, #40]	; 0x28
   12bac:	ldrb	r9, [sl, r6]
   12bb0:	bne	12b30 <__assert_fail@plt+0x1bec>
   12bb4:	cmp	r9, #58	; 0x3a
   12bb8:	beq	12cc0 <__assert_fail@plt+0x1d7c>
   12bbc:	cmp	r9, #61	; 0x3d
   12bc0:	beq	12cc0 <__assert_fail@plt+0x1d7c>
   12bc4:	ldrb	r3, [sl, r8]
   12bc8:	cmp	r3, #42	; 0x2a
   12bcc:	bne	12b30 <__assert_fail@plt+0x1bec>
   12bd0:	ldr	r3, [sp, #28]
   12bd4:	ldrb	r3, [r3, r8]
   12bd8:	cmp	r3, #0
   12bdc:	bne	12b30 <__assert_fail@plt+0x1bec>
   12be0:	add	r3, r5, #3
   12be4:	cmp	r3, fp
   12be8:	bcs	12b30 <__assert_fail@plt+0x1bec>
   12bec:	ldr	r1, [sp, #28]
   12bf0:	ldrb	r2, [r1, r3]
   12bf4:	add	r1, r1, r3
   12bf8:	cmp	r2, #0
   12bfc:	bne	12b30 <__assert_fail@plt+0x1bec>
   12c00:	ldrb	r2, [sl, r3]
   12c04:	add	r0, sl, r3
   12c08:	str	r0, [sp, #44]	; 0x2c
   12c0c:	cmp	r2, #93	; 0x5d
   12c10:	addne	r0, sl, r3
   12c14:	bne	12c20 <__assert_fail@plt+0x1cdc>
   12c18:	b	12c54 <__assert_fail@plt+0x1d10>
   12c1c:	mov	r3, r4
   12c20:	add	r4, r3, #1
   12c24:	cmp	r4, fp
   12c28:	bcs	12b30 <__assert_fail@plt+0x1bec>
   12c2c:	ldrb	ip, [r1, #1]!
   12c30:	cmp	ip, #0
   12c34:	bne	12b30 <__assert_fail@plt+0x1bec>
   12c38:	ldrb	lr, [r0, #1]!
   12c3c:	cmp	lr, #93	; 0x5d
   12c40:	bne	12c1c <__assert_fail@plt+0x1cd8>
   12c44:	mvn	r6, r6
   12c48:	adds	r5, r6, r3
   12c4c:	bne	12ea4 <__assert_fail@plt+0x1f60>
   12c50:	mov	r3, r4
   12c54:	mov	r0, #0
   12c58:	mov	r1, #0
   12c5c:	mov	r4, r3
   12c60:	mov	r6, r0
   12c64:	mov	r7, r1
   12c68:	strd	r0, [sp, #80]	; 0x50
   12c6c:	mov	r0, #24
   12c70:	bl	15b10 <__assert_fail@plt+0x4bcc>
   12c74:	ldr	r3, [sp, #36]	; 0x24
   12c78:	mov	r1, #0
   12c7c:	mov	r2, #4
   12c80:	ldr	r3, [r3, #4]
   12c84:	cmp	r3, #0
   12c88:	strb	r9, [r0, #8]
   12c8c:	strd	r6, [r0, #16]
   12c90:	str	r1, [r0, #4]
   12c94:	str	r2, [r0]
   12c98:	beq	13194 <__assert_fail@plt+0x2250>
   12c9c:	str	r0, [r3, #4]
   12ca0:	ldr	r3, [sp, #36]	; 0x24
   12ca4:	add	r5, r4, #1
   12ca8:	str	r0, [r3, #4]
   12cac:	ldr	r3, [sp, #96]	; 0x60
   12cb0:	ldr	sl, [sp, #92]	; 0x5c
   12cb4:	str	r3, [sp, #28]
   12cb8:	ldr	fp, [sp, #100]	; 0x64
   12cbc:	b	12b10 <__assert_fail@plt+0x1bcc>
   12cc0:	ldr	r3, [sp, #28]
   12cc4:	ldrb	r3, [r3, r6]
   12cc8:	cmp	r3, #0
   12ccc:	bne	12bc4 <__assert_fail@plt+0x1c80>
   12cd0:	ldr	r3, [sp, #32]
   12cd4:	sub	r1, fp, #1
   12cd8:	cmp	r8, r1
   12cdc:	ldrb	r0, [r3, r6]
   12ce0:	bcs	12bc4 <__assert_fail@plt+0x1c80>
   12ce4:	ldr	r2, [sp, #28]
   12ce8:	add	r3, sl, r8
   12cec:	add	r4, r5, #3
   12cf0:	add	r2, r2, r8
   12cf4:	b	12d08 <__assert_fail@plt+0x1dc4>
   12cf8:	cmp	r4, r1
   12cfc:	add	r2, r2, #1
   12d00:	add	r4, r4, #1
   12d04:	bcs	12bc4 <__assert_fail@plt+0x1c80>
   12d08:	ldrb	lr, [r3], #1
   12d0c:	sub	ip, r4, #1
   12d10:	cmp	r0, lr
   12d14:	bne	12cf8 <__assert_fail@plt+0x1db4>
   12d18:	ldrb	lr, [r3]
   12d1c:	cmp	lr, #93	; 0x5d
   12d20:	bne	12cf8 <__assert_fail@plt+0x1db4>
   12d24:	ldrb	lr, [r2]
   12d28:	cmp	lr, #0
   12d2c:	bne	12cf8 <__assert_fail@plt+0x1db4>
   12d30:	ldrb	r7, [r2, #1]
   12d34:	cmp	r7, #0
   12d38:	bne	12cf8 <__assert_fail@plt+0x1db4>
   12d3c:	mvn	r3, #1
   12d40:	sub	r3, r3, r5
   12d44:	adds	r3, r3, ip
   12d48:	str	r3, [sp, #44]	; 0x2c
   12d4c:	ldr	r3, [sp, #32]
   12d50:	add	r3, r3, r8
   12d54:	str	r3, [sp, #48]	; 0x30
   12d58:	beq	1313c <__assert_fail@plt+0x21f8>
   12d5c:	cmp	r0, #58	; 0x3a
   12d60:	beq	12fac <__assert_fail@plt+0x2068>
   12d64:	ldr	r3, [sp, #44]	; 0x2c
   12d68:	cmp	r3, #1
   12d6c:	beq	130a8 <__assert_fail@plt+0x2164>
   12d70:	mov	r1, r8
   12d74:	add	r0, sp, #92	; 0x5c
   12d78:	bl	11d40 <__assert_fail@plt+0xdfc>
   12d7c:	cmp	r0, #0
   12d80:	bne	12bc4 <__assert_fail@plt+0x1c80>
   12d84:	mov	r4, r0
   12d88:	ldr	r1, [sp, #44]	; 0x2c
   12d8c:	ldr	r0, [sp, #48]	; 0x30
   12d90:	bl	11e64 <__assert_fail@plt+0xf20>
   12d94:	mov	r2, #5
   12d98:	ldr	r1, [pc, #1020]	; 1319c <__assert_fail@plt+0x2258>
   12d9c:	mov	r5, r0
   12da0:	mov	r0, r4
   12da4:	bl	10d88 <dcgettext@plt>
   12da8:	mov	r3, r5
   12dac:	mov	r2, r0
   12db0:	mov	r0, r4
   12db4:	mov	r1, r4
   12db8:	bl	10df4 <error@plt>
   12dbc:	mov	r0, r5
   12dc0:	bl	13658 <__assert_fail@plt+0x2714>
   12dc4:	b	12e88 <__assert_fail@plt+0x1f44>
   12dc8:	ldr	r3, [sp, #28]
   12dcc:	ldrb	r3, [r3, r6]
   12dd0:	cmp	r3, #0
   12dd4:	str	r3, [sp, #40]	; 0x28
   12dd8:	bne	12b38 <__assert_fail@plt+0x1bf4>
   12ddc:	ldr	r3, [sp, #32]
   12de0:	ldrb	r6, [r3, r8]
   12de4:	ldrb	r4, [r3, r5]
   12de8:	cmp	r4, r6
   12dec:	bhi	12e34 <__assert_fail@plt+0x1ef0>
   12df0:	mov	r0, #24
   12df4:	bl	15b10 <__assert_fail@plt+0x4bcc>
   12df8:	ldr	r3, [sp, #36]	; 0x24
   12dfc:	ldr	r2, [sp, #40]	; 0x28
   12e00:	ldr	r3, [r3, #4]
   12e04:	cmp	r3, #0
   12e08:	str	r2, [r0, #4]
   12e0c:	mov	r2, #1
   12e10:	strb	r4, [r0, #8]
   12e14:	strb	r6, [r0, #9]
   12e18:	str	r2, [r0]
   12e1c:	beq	13180 <__assert_fail@plt+0x223c>
   12e20:	str	r0, [r3, #4]
   12e24:	ldr	r3, [sp, #36]	; 0x24
   12e28:	add	r5, r5, #3
   12e2c:	str	r0, [r3, #4]
   12e30:	b	12b10 <__assert_fail@plt+0x1bcc>
   12e34:	mov	r0, r4
   12e38:	bl	11df4 <__assert_fail@plt+0xeb0>
   12e3c:	mov	r5, r0
   12e40:	mov	r0, r6
   12e44:	bl	11df4 <__assert_fail@plt+0xeb0>
   12e48:	ldr	r6, [sp, #40]	; 0x28
   12e4c:	mov	r2, #5
   12e50:	ldr	r1, [pc, #840]	; 131a0 <__assert_fail@plt+0x225c>
   12e54:	mov	r4, r0
   12e58:	mov	r0, r6
   12e5c:	bl	10d88 <dcgettext@plt>
   12e60:	mov	r3, r5
   12e64:	mov	r1, r6
   12e68:	str	r4, [sp]
   12e6c:	mov	r2, r0
   12e70:	mov	r0, r6
   12e74:	bl	10df4 <error@plt>
   12e78:	mov	r0, r5
   12e7c:	bl	13658 <__assert_fail@plt+0x2714>
   12e80:	mov	r0, r4
   12e84:	bl	13658 <__assert_fail@plt+0x2714>
   12e88:	mov	r0, sl
   12e8c:	bl	13658 <__assert_fail@plt+0x2714>
   12e90:	ldr	r0, [sp, #28]
   12e94:	bl	13658 <__assert_fail@plt+0x2714>
   12e98:	ldr	r0, [sp, #40]	; 0x28
   12e9c:	add	sp, sp, #108	; 0x6c
   12ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea4:	ldr	r8, [sp, #44]	; 0x2c
   12ea8:	cmp	r2, #48	; 0x30
   12eac:	movne	r2, #10
   12eb0:	moveq	r2, #8
   12eb4:	str	ip, [sp]
   12eb8:	add	r3, sp, #80	; 0x50
   12ebc:	add	r1, sp, #76	; 0x4c
   12ec0:	mov	r0, r8
   12ec4:	bl	16130 <__assert_fail@plt+0x51ec>
   12ec8:	cmp	r0, #0
   12ecc:	bne	12ef8 <__assert_fail@plt+0x1fb4>
   12ed0:	ldrd	r6, [sp, #80]	; 0x50
   12ed4:	mvn	r3, #0
   12ed8:	mvn	r2, #0
   12edc:	cmp	r7, r3
   12ee0:	cmpeq	r6, r2
   12ee4:	beq	12ef8 <__assert_fail@plt+0x1fb4>
   12ee8:	ldr	r2, [sp, #76]	; 0x4c
   12eec:	add	r3, r8, r5
   12ef0:	cmp	r2, r3
   12ef4:	beq	12c6c <__assert_fail@plt+0x1d28>
   12ef8:	ldr	r9, [sp, #44]	; 0x2c
   12efc:	mov	r1, r5
   12f00:	mov	r0, r9
   12f04:	bl	11e64 <__assert_fail@plt+0xf20>
   12f08:	mov	r2, #5
   12f0c:	ldr	r1, [pc, #656]	; 131a4 <__assert_fail@plt+0x2260>
   12f10:	mov	r4, r0
   12f14:	mov	r0, #0
   12f18:	bl	10d88 <dcgettext@plt>
   12f1c:	mov	r5, r0
   12f20:	mov	r0, r4
   12f24:	bl	15570 <__assert_fail@plt+0x462c>
   12f28:	mov	r1, #0
   12f2c:	mov	r2, r5
   12f30:	mov	r3, r0
   12f34:	mov	r0, r1
   12f38:	bl	10df4 <error@plt>
   12f3c:	mov	r0, r4
   12f40:	bl	13658 <__assert_fail@plt+0x2714>
   12f44:	b	12e88 <__assert_fail@plt+0x1f44>
   12f48:	add	r7, r4, #2
   12f4c:	sub	r6, r9, #48	; 0x30
   12f50:	ldrb	r2, [r8, r7]
   12f54:	uxtb	r6, r6
   12f58:	sub	r2, r2, #48	; 0x30
   12f5c:	cmp	r2, #7
   12f60:	bhi	12a5c <__assert_fail@plt+0x1b18>
   12f64:	add	r9, r4, #3
   12f68:	add	r6, r2, r6, lsl #3
   12f6c:	ldrb	r2, [r8, r9]
   12f70:	and	r6, r6, #255	; 0xff
   12f74:	sub	r2, r2, #48	; 0x30
   12f78:	cmp	r2, #7
   12f7c:	addhi	sl, sl, #1
   12f80:	bhi	12a5c <__assert_fail@plt+0x1b18>
   12f84:	mov	r1, #8
   12f88:	smlabb	r1, r1, r6, r2
   12f8c:	cmp	r1, #255	; 0xff
   12f90:	bgt	130ec <__assert_fail@plt+0x21a8>
   12f94:	add	r6, r2, r6, lsl #3
   12f98:	and	r6, r6, #255	; 0xff
   12f9c:	mov	sl, r9
   12fa0:	b	12a5c <__assert_fail@plt+0x1b18>
   12fa4:	mov	r6, #8
   12fa8:	b	12a5c <__assert_fail@plt+0x1b18>
   12fac:	ldr	r3, [pc, #500]	; 131a8 <__assert_fail@plt+0x2264>
   12fb0:	str	r5, [sp, #56]	; 0x38
   12fb4:	str	r8, [sp, #60]	; 0x3c
   12fb8:	ldr	r5, [sp, #44]	; 0x2c
   12fbc:	ldr	r8, [sp, #48]	; 0x30
   12fc0:	str	r4, [sp, #68]	; 0x44
   12fc4:	mov	r4, r3
   12fc8:	str	sl, [sp, #52]	; 0x34
   12fcc:	str	r6, [sp, #64]	; 0x40
   12fd0:	ldr	r6, [r4, #4]!
   12fd4:	mov	r2, r5
   12fd8:	mov	r1, r6
   12fdc:	mov	r0, r8
   12fe0:	bl	10f20 <strncmp@plt>
   12fe4:	subs	sl, r0, #0
   12fe8:	bne	12ffc <__assert_fail@plt+0x20b8>
   12fec:	mov	r0, r6
   12ff0:	bl	10e6c <strlen@plt>
   12ff4:	cmp	r5, r0
   12ff8:	beq	13068 <__assert_fail@plt+0x2124>
   12ffc:	add	r7, r7, #1
   13000:	cmp	r7, #12
   13004:	bne	12fd0 <__assert_fail@plt+0x208c>
   13008:	ldr	r8, [sp, #60]	; 0x3c
   1300c:	add	r0, sp, #92	; 0x5c
   13010:	mov	r1, r8
   13014:	bl	11d40 <__assert_fail@plt+0xdfc>
   13018:	ldr	sl, [sp, #52]	; 0x34
   1301c:	ldr	r5, [sp, #56]	; 0x38
   13020:	ldr	r6, [sp, #64]	; 0x40
   13024:	cmp	r0, #0
   13028:	bne	12bc4 <__assert_fail@plt+0x1c80>
   1302c:	mov	r4, r0
   13030:	ldr	r1, [sp, #44]	; 0x2c
   13034:	ldr	r0, [sp, #48]	; 0x30
   13038:	bl	11e64 <__assert_fail@plt+0xf20>
   1303c:	mov	r2, #5
   13040:	ldr	r1, [pc, #356]	; 131ac <__assert_fail@plt+0x2268>
   13044:	mov	r5, r0
   13048:	mov	r0, r4
   1304c:	bl	10d88 <dcgettext@plt>
   13050:	mov	r6, r0
   13054:	mov	r0, r5
   13058:	bl	15570 <__assert_fail@plt+0x462c>
   1305c:	mov	r2, r6
   13060:	mov	r3, r0
   13064:	b	12db0 <__assert_fail@plt+0x1e6c>
   13068:	mov	r0, #24
   1306c:	ldr	r4, [sp, #68]	; 0x44
   13070:	bl	15b10 <__assert_fail@plt+0x4bcc>
   13074:	ldr	r3, [sp, #36]	; 0x24
   13078:	mov	r2, #2
   1307c:	ldr	r3, [r3, #4]
   13080:	cmp	r3, #0
   13084:	str	sl, [r0, #4]
   13088:	str	r2, [r0]
   1308c:	str	r7, [r0, #8]
   13090:	beq	1316c <__assert_fail@plt+0x2228>
   13094:	str	r0, [r3, #4]
   13098:	ldr	r3, [sp, #36]	; 0x24
   1309c:	add	r5, r4, #1
   130a0:	str	r0, [r3, #4]
   130a4:	b	12cac <__assert_fail@plt+0x1d68>
   130a8:	mov	r0, #24
   130ac:	bl	15b10 <__assert_fail@plt+0x4bcc>
   130b0:	ldr	r3, [sp, #32]
   130b4:	mov	r1, #3
   130b8:	ldrb	r2, [r3, r8]
   130bc:	ldr	r3, [sp, #36]	; 0x24
   130c0:	ldr	r3, [r3, #4]
   130c4:	cmp	r3, #0
   130c8:	str	r7, [r0, #4]
   130cc:	str	r1, [r0]
   130d0:	strb	r2, [r0, #8]
   130d4:	bne	13094 <__assert_fail@plt+0x2150>
   130d8:	ldr	r3, [pc, #208]	; 131b0 <__assert_fail@plt+0x226c>
   130dc:	ldr	r2, [pc, #208]	; 131b4 <__assert_fail@plt+0x2270>
   130e0:	ldr	r1, [pc, #208]	; 131b8 <__assert_fail@plt+0x2274>
   130e4:	ldr	r0, [pc, #208]	; 131bc <__assert_fail@plt+0x2278>
   130e8:	bl	10f44 <__assert_fail@plt>
   130ec:	mov	r2, #5
   130f0:	ldr	r1, [pc, #200]	; 131c0 <__assert_fail@plt+0x227c>
   130f4:	mov	r0, #0
   130f8:	str	r3, [sp, #40]	; 0x28
   130fc:	bl	10d88 <dcgettext@plt>
   13100:	ldr	r3, [sp, #40]	; 0x28
   13104:	ldrb	r2, [r8, r9]
   13108:	ldrb	ip, [r8, r7]
   1310c:	ldrb	r3, [r3]
   13110:	mov	r1, #0
   13114:	str	r2, [sp, #16]
   13118:	str	r2, [sp, #4]
   1311c:	str	r3, [sp, #8]
   13120:	str	ip, [sp, #12]
   13124:	str	ip, [sp]
   13128:	add	sl, sl, #1
   1312c:	mov	r2, r0
   13130:	mov	r0, r1
   13134:	bl	10df4 <error@plt>
   13138:	b	12a5c <__assert_fail@plt+0x1b18>
   1313c:	cmp	r0, #58	; 0x3a
   13140:	ldr	r4, [sp, #44]	; 0x2c
   13144:	ldreq	r1, [pc, #120]	; 131c4 <__assert_fail@plt+0x2280>
   13148:	ldrne	r1, [pc, #120]	; 131c8 <__assert_fail@plt+0x2284>
   1314c:	mov	r2, #5
   13150:	mov	r0, r4
   13154:	bl	10d88 <dcgettext@plt>
   13158:	mov	r1, r4
   1315c:	mov	r2, r0
   13160:	mov	r0, r4
   13164:	bl	10df4 <error@plt>
   13168:	b	12e88 <__assert_fail@plt+0x1f44>
   1316c:	ldr	r3, [pc, #88]	; 131cc <__assert_fail@plt+0x2288>
   13170:	ldr	r2, [pc, #88]	; 131d0 <__assert_fail@plt+0x228c>
   13174:	ldr	r1, [pc, #60]	; 131b8 <__assert_fail@plt+0x2274>
   13178:	ldr	r0, [pc, #60]	; 131bc <__assert_fail@plt+0x2278>
   1317c:	bl	10f44 <__assert_fail@plt>
   13180:	ldr	r3, [pc, #76]	; 131d4 <__assert_fail@plt+0x2290>
   13184:	ldr	r2, [pc, #76]	; 131d8 <__assert_fail@plt+0x2294>
   13188:	ldr	r1, [pc, #40]	; 131b8 <__assert_fail@plt+0x2274>
   1318c:	ldr	r0, [pc, #40]	; 131bc <__assert_fail@plt+0x2278>
   13190:	bl	10f44 <__assert_fail@plt>
   13194:	bl	10f80 <__assert_fail@plt+0x3c>
   13198:	muleq	r1, r4, r4
   1319c:	andeq	r7, r1, r4, asr #10
   131a0:	andeq	r7, r1, ip, lsr #11
   131a4:	andeq	r7, r1, r0, lsl #11
   131a8:	andeq	r7, r1, r8, lsl r2
   131ac:	andeq	r7, r1, r8, lsr #10
   131b0:	andeq	r7, r1, r0, ror #4
   131b4:	andeq	r0, r0, r7, ror #5
   131b8:	andeq	r7, r1, r4, ror r3
   131bc:	andeq	r7, r1, r8, lsl r4
   131c0:	andeq	r7, r1, r0, lsr r4
   131c4:	ldrdeq	r7, [r1], -r8
   131c8:	strdeq	r7, [r1], -ip
   131cc:	andeq	r7, r1, ip, asr #4
   131d0:			; <UNDEFINED> instruction: 0x000002bd
   131d4:	andeq	r7, r1, r4, ror r2
   131d8:	andeq	r0, r0, r7, lsr #5
   131dc:	subs	r6, r0, #0
   131e0:	push	{r7, lr}
   131e4:	sub	sp, sp, #56	; 0x38
   131e8:	beq	13224 <__assert_fail@plt+0x22e0>
   131ec:	ldr	r3, [pc, #708]	; 134b8 <__assert_fail@plt+0x2574>
   131f0:	mov	r2, #5
   131f4:	ldr	r1, [pc, #704]	; 134bc <__assert_fail@plt+0x2578>
   131f8:	mov	r0, #0
   131fc:	ldr	r4, [r3]
   13200:	bl	10d88 <dcgettext@plt>
   13204:	ldr	r3, [pc, #692]	; 134c0 <__assert_fail@plt+0x257c>
   13208:	mov	r1, #1
   1320c:	ldr	r3, [r3]
   13210:	mov	r2, r0
   13214:	mov	r0, r4
   13218:	bl	10ecc <__fprintf_chk@plt>
   1321c:	mov	r0, r6
   13220:	bl	10e60 <exit@plt>
   13224:	mov	r2, #5
   13228:	ldr	r1, [pc, #660]	; 134c4 <__assert_fail@plt+0x2580>
   1322c:	bl	10d88 <dcgettext@plt>
   13230:	ldr	r3, [pc, #648]	; 134c0 <__assert_fail@plt+0x257c>
   13234:	ldr	r7, [pc, #652]	; 134c8 <__assert_fail@plt+0x2584>
   13238:	ldr	r4, [pc, #652]	; 134cc <__assert_fail@plt+0x2588>
   1323c:	ldr	r2, [r3]
   13240:	mov	r1, r0
   13244:	mov	r0, #1
   13248:	bl	10eb4 <__printf_chk@plt>
   1324c:	mov	r2, #5
   13250:	ldr	r1, [pc, #632]	; 134d0 <__assert_fail@plt+0x258c>
   13254:	mov	r0, r6
   13258:	bl	10d88 <dcgettext@plt>
   1325c:	ldr	r1, [r7]
   13260:	bl	10cd4 <fputs_unlocked@plt>
   13264:	mov	r2, #5
   13268:	ldr	r1, [pc, #612]	; 134d4 <__assert_fail@plt+0x2590>
   1326c:	mov	r0, r6
   13270:	bl	10d88 <dcgettext@plt>
   13274:	ldr	r1, [r7]
   13278:	bl	10cd4 <fputs_unlocked@plt>
   1327c:	mov	r2, #5
   13280:	ldr	r1, [pc, #592]	; 134d8 <__assert_fail@plt+0x2594>
   13284:	mov	r0, r6
   13288:	bl	10d88 <dcgettext@plt>
   1328c:	ldr	r1, [r7]
   13290:	bl	10cd4 <fputs_unlocked@plt>
   13294:	mov	r2, #5
   13298:	ldr	r1, [pc, #572]	; 134dc <__assert_fail@plt+0x2598>
   1329c:	mov	r0, r6
   132a0:	bl	10d88 <dcgettext@plt>
   132a4:	ldr	r1, [r7]
   132a8:	bl	10cd4 <fputs_unlocked@plt>
   132ac:	mov	r2, #5
   132b0:	ldr	r1, [pc, #552]	; 134e0 <__assert_fail@plt+0x259c>
   132b4:	mov	r0, r6
   132b8:	bl	10d88 <dcgettext@plt>
   132bc:	ldr	r1, [r7]
   132c0:	bl	10cd4 <fputs_unlocked@plt>
   132c4:	mov	r2, #5
   132c8:	ldr	r1, [pc, #532]	; 134e4 <__assert_fail@plt+0x25a0>
   132cc:	mov	r0, r6
   132d0:	bl	10d88 <dcgettext@plt>
   132d4:	ldr	r1, [r7]
   132d8:	bl	10cd4 <fputs_unlocked@plt>
   132dc:	mov	r2, #5
   132e0:	ldr	r1, [pc, #512]	; 134e8 <__assert_fail@plt+0x25a4>
   132e4:	mov	r0, r6
   132e8:	bl	10d88 <dcgettext@plt>
   132ec:	ldr	r1, [r7]
   132f0:	bl	10cd4 <fputs_unlocked@plt>
   132f4:	ldm	r4!, {r0, r1, r2, r3}
   132f8:	mov	lr, sp
   132fc:	stmia	lr!, {r0, r1, r2, r3}
   13300:	ldm	r4!, {r0, r1, r2, r3}
   13304:	ldr	ip, [sp]
   13308:	stmia	lr!, {r0, r1, r2, r3}
   1330c:	cmp	ip, #0
   13310:	ldm	r4!, {r0, r1, r2, r3}
   13314:	stmia	lr!, {r0, r1, r2, r3}
   13318:	ldm	r4, {r0, r1}
   1331c:	moveq	r4, sp
   13320:	stm	lr, {r0, r1}
   13324:	beq	13354 <__assert_fail@plt+0x2410>
   13328:	ldr	r5, [pc, #444]	; 134ec <__assert_fail@plt+0x25a8>
   1332c:	mov	r4, sp
   13330:	b	13340 <__assert_fail@plt+0x23fc>
   13334:	ldr	ip, [r4, #8]!
   13338:	cmp	ip, #0
   1333c:	beq	13354 <__assert_fail@plt+0x2410>
   13340:	mov	r1, ip
   13344:	mov	r0, r5
   13348:	bl	10cec <strcmp@plt>
   1334c:	cmp	r0, #0
   13350:	bne	13334 <__assert_fail@plt+0x23f0>
   13354:	ldr	r4, [r4, #4]
   13358:	mov	r2, #5
   1335c:	cmp	r4, #0
   13360:	ldr	r1, [pc, #392]	; 134f0 <__assert_fail@plt+0x25ac>
   13364:	beq	1340c <__assert_fail@plt+0x24c8>
   13368:	mov	r0, #0
   1336c:	bl	10d88 <dcgettext@plt>
   13370:	ldr	r3, [pc, #380]	; 134f4 <__assert_fail@plt+0x25b0>
   13374:	ldr	r2, [pc, #380]	; 134f8 <__assert_fail@plt+0x25b4>
   13378:	mov	r1, r0
   1337c:	mov	r0, #1
   13380:	bl	10eb4 <__printf_chk@plt>
   13384:	mov	r1, #0
   13388:	mov	r0, #5
   1338c:	bl	10ef0 <setlocale@plt>
   13390:	cmp	r0, #0
   13394:	ldreq	r5, [pc, #336]	; 134ec <__assert_fail@plt+0x25a8>
   13398:	beq	133b4 <__assert_fail@plt+0x2470>
   1339c:	mov	r2, #3
   133a0:	ldr	r1, [pc, #340]	; 134fc <__assert_fail@plt+0x25b8>
   133a4:	bl	10f20 <strncmp@plt>
   133a8:	ldr	r5, [pc, #316]	; 134ec <__assert_fail@plt+0x25a8>
   133ac:	cmp	r0, #0
   133b0:	bne	1349c <__assert_fail@plt+0x2558>
   133b4:	mov	r2, #5
   133b8:	ldr	r1, [pc, #320]	; 13500 <__assert_fail@plt+0x25bc>
   133bc:	mov	r0, #0
   133c0:	bl	10d88 <dcgettext@plt>
   133c4:	ldr	r3, [pc, #288]	; 134ec <__assert_fail@plt+0x25a8>
   133c8:	ldr	r2, [pc, #292]	; 134f4 <__assert_fail@plt+0x25b0>
   133cc:	mov	r1, r0
   133d0:	mov	r0, #1
   133d4:	bl	10eb4 <__printf_chk@plt>
   133d8:	mov	r2, #5
   133dc:	ldr	r1, [pc, #288]	; 13504 <__assert_fail@plt+0x25c0>
   133e0:	mov	r0, #0
   133e4:	bl	10d88 <dcgettext@plt>
   133e8:	ldr	r2, [pc, #280]	; 13508 <__assert_fail@plt+0x25c4>
   133ec:	cmp	r4, r5
   133f0:	ldr	r3, [pc, #276]	; 1350c <__assert_fail@plt+0x25c8>
   133f4:	movne	r3, r2
   133f8:	mov	r1, r0
   133fc:	mov	r2, r4
   13400:	mov	r0, #1
   13404:	bl	10eb4 <__printf_chk@plt>
   13408:	b	1321c <__assert_fail@plt+0x22d8>
   1340c:	mov	r0, r4
   13410:	bl	10d88 <dcgettext@plt>
   13414:	ldr	r3, [pc, #216]	; 134f4 <__assert_fail@plt+0x25b0>
   13418:	ldr	r2, [pc, #216]	; 134f8 <__assert_fail@plt+0x25b4>
   1341c:	mov	r1, r0
   13420:	mov	r0, #1
   13424:	bl	10eb4 <__printf_chk@plt>
   13428:	mov	r1, r4
   1342c:	mov	r0, #5
   13430:	bl	10ef0 <setlocale@plt>
   13434:	cmp	r0, #0
   13438:	beq	13450 <__assert_fail@plt+0x250c>
   1343c:	mov	r2, #3
   13440:	ldr	r1, [pc, #180]	; 134fc <__assert_fail@plt+0x25b8>
   13444:	bl	10f20 <strncmp@plt>
   13448:	cmp	r0, #0
   1344c:	bne	13494 <__assert_fail@plt+0x2550>
   13450:	mov	r2, #5
   13454:	ldr	r1, [pc, #164]	; 13500 <__assert_fail@plt+0x25bc>
   13458:	mov	r0, #0
   1345c:	bl	10d88 <dcgettext@plt>
   13460:	ldr	r3, [pc, #132]	; 134ec <__assert_fail@plt+0x25a8>
   13464:	ldr	r2, [pc, #136]	; 134f4 <__assert_fail@plt+0x25b0>
   13468:	mov	r4, r3
   1346c:	mov	r1, r0
   13470:	mov	r0, #1
   13474:	bl	10eb4 <__printf_chk@plt>
   13478:	ldr	r1, [pc, #132]	; 13504 <__assert_fail@plt+0x25c0>
   1347c:	mov	r2, #5
   13480:	mov	r0, #0
   13484:	bl	10d88 <dcgettext@plt>
   13488:	ldr	r3, [pc, #124]	; 1350c <__assert_fail@plt+0x25c8>
   1348c:	mov	r1, r0
   13490:	b	133fc <__assert_fail@plt+0x24b8>
   13494:	ldr	r5, [pc, #80]	; 134ec <__assert_fail@plt+0x25a8>
   13498:	mov	r4, r5
   1349c:	mov	r2, #5
   134a0:	ldr	r1, [pc, #104]	; 13510 <__assert_fail@plt+0x25cc>
   134a4:	mov	r0, #0
   134a8:	bl	10d88 <dcgettext@plt>
   134ac:	ldr	r1, [r7]
   134b0:	bl	10cd4 <fputs_unlocked@plt>
   134b4:	b	133b4 <__assert_fail@plt+0x2470>
   134b8:	andeq	r9, r2, r8, asr #2
   134bc:	strdeq	r7, [r1], -r4
   134c0:	andeq	fp, r2, ip, ror #8
   134c4:	andeq	r7, r1, ip, lsl r6
   134c8:	andeq	r9, r2, r4, asr r1
   134cc:	andeq	r7, r1, r4, lsl #5
   134d0:	andeq	r7, r1, r0, asr #12
   134d4:	andeq	r7, r1, r0, lsr r8
   134d8:	andeq	r7, r1, r0, ror #16
   134dc:	muleq	r1, r8, r8
   134e0:	andeq	r7, r1, r0, lsl sl
   134e4:			; <UNDEFINED> instruction: 0x00017bbc
   134e8:	andeq	r7, r1, r8, asr sp
   134ec:	strdeq	r7, [r1], -r0
   134f0:	andeq	r7, r1, r0, lsr pc
   134f4:	andeq	r7, r1, r8, asr #30
   134f8:	andeq	r7, r1, r0, ror pc
   134fc:	andeq	r7, r1, r0, lsl #31
   13500:	andeq	r7, r1, ip, asr #31
   13504:	andeq	r7, r1, r8, ror #31
   13508:	andeq	r7, r1, ip, lsl #20
   1350c:	andeq	r8, r1, r8, asr r4
   13510:	andeq	r7, r1, r4, lsl #31
   13514:	ldr	r3, [pc, #4]	; 13520 <__assert_fail@plt+0x25dc>
   13518:	str	r0, [r3]
   1351c:	bx	lr
   13520:	andeq	fp, r2, r4, ror #8
   13524:	ldr	r3, [pc, #4]	; 13530 <__assert_fail@plt+0x25ec>
   13528:	strb	r0, [r3, #4]
   1352c:	bx	lr
   13530:	andeq	fp, r2, r4, ror #8
   13534:	ldr	r3, [pc, #192]	; 135fc <__assert_fail@plt+0x26b8>
   13538:	push	{r4, r5, r6, lr}
   1353c:	sub	sp, sp, #8
   13540:	ldr	r0, [r3]
   13544:	bl	167a8 <__assert_fail@plt+0x5864>
   13548:	cmp	r0, #0
   1354c:	beq	13570 <__assert_fail@plt+0x262c>
   13550:	ldr	r4, [pc, #168]	; 13600 <__assert_fail@plt+0x26bc>
   13554:	ldrb	r3, [r4, #4]
   13558:	cmp	r3, #0
   1355c:	beq	1358c <__assert_fail@plt+0x2648>
   13560:	bl	10e84 <__errno_location@plt>
   13564:	ldr	r3, [r0]
   13568:	cmp	r3, #32
   1356c:	bne	1358c <__assert_fail@plt+0x2648>
   13570:	ldr	r3, [pc, #140]	; 13604 <__assert_fail@plt+0x26c0>
   13574:	ldr	r0, [r3]
   13578:	bl	167a8 <__assert_fail@plt+0x5864>
   1357c:	cmp	r0, #0
   13580:	bne	135d4 <__assert_fail@plt+0x2690>
   13584:	add	sp, sp, #8
   13588:	pop	{r4, r5, r6, pc}
   1358c:	mov	r2, #5
   13590:	ldr	r1, [pc, #112]	; 13608 <__assert_fail@plt+0x26c4>
   13594:	mov	r0, #0
   13598:	bl	10d88 <dcgettext@plt>
   1359c:	ldr	r4, [r4]
   135a0:	cmp	r4, #0
   135a4:	mov	r5, r0
   135a8:	beq	135e0 <__assert_fail@plt+0x269c>
   135ac:	bl	10e84 <__errno_location@plt>
   135b0:	ldr	r6, [r0]
   135b4:	mov	r0, r4
   135b8:	bl	153d8 <__assert_fail@plt+0x4494>
   135bc:	mov	r1, r6
   135c0:	str	r5, [sp]
   135c4:	ldr	r2, [pc, #64]	; 1360c <__assert_fail@plt+0x26c8>
   135c8:	mov	r3, r0
   135cc:	mov	r0, #0
   135d0:	bl	10df4 <error@plt>
   135d4:	ldr	r3, [pc, #52]	; 13610 <__assert_fail@plt+0x26cc>
   135d8:	ldr	r0, [r3]
   135dc:	bl	10d28 <_exit@plt>
   135e0:	bl	10e84 <__errno_location@plt>
   135e4:	mov	r3, r5
   135e8:	ldr	r2, [pc, #36]	; 13614 <__assert_fail@plt+0x26d0>
   135ec:	ldr	r1, [r0]
   135f0:	mov	r0, r4
   135f4:	bl	10df4 <error@plt>
   135f8:	b	135d4 <__assert_fail@plt+0x2690>
   135fc:	andeq	r9, r2, r4, asr r1
   13600:	andeq	fp, r2, r4, ror #8
   13604:	andeq	r9, r2, r8, asr #2
   13608:	andeq	r7, r1, r4, lsr #8
   1360c:	andeq	r8, r1, r0, ror r5
   13610:	strdeq	r9, [r2], -r4
   13614:	andeq	r8, r1, r4, ror r5
   13618:	push	{r4, r5}
   1361c:	pop	{r4, r5}
   13620:	b	10cf8 <posix_fadvise64@plt>
   13624:	cmp	r0, #0
   13628:	bxeq	lr
   1362c:	push	{r4, lr}
   13630:	sub	sp, sp, #16
   13634:	mov	r4, r1
   13638:	bl	10ec0 <fileno@plt>
   1363c:	mov	r2, #0
   13640:	mov	r3, #0
   13644:	str	r4, [sp, #8]
   13648:	strd	r2, [sp]
   1364c:	bl	10cf8 <posix_fadvise64@plt>
   13650:	add	sp, sp, #16
   13654:	pop	{r4, pc}
   13658:	push	{r4, r5, lr}
   1365c:	sub	sp, sp, #12
   13660:	mov	r5, r0
   13664:	bl	10e84 <__errno_location@plt>
   13668:	mov	r2, #0
   1366c:	mov	r4, r0
   13670:	ldr	r3, [r0]
   13674:	str	r2, [r4]
   13678:	mov	r0, r5
   1367c:	str	r3, [sp]
   13680:	str	r3, [sp, #4]
   13684:	bl	10d1c <free@plt>
   13688:	ldr	r3, [r4]
   1368c:	add	r2, sp, #8
   13690:	cmp	r3, #0
   13694:	moveq	r3, #4
   13698:	movne	r3, #0
   1369c:	add	r3, r2, r3
   136a0:	ldr	r3, [r3, #-8]
   136a4:	str	r3, [r4]
   136a8:	add	sp, sp, #12
   136ac:	pop	{r4, r5, pc}
   136b0:	push	{r4, r5, r6, lr}
   136b4:	subs	r4, r0, #0
   136b8:	beq	1372c <__assert_fail@plt+0x27e8>
   136bc:	mov	r1, #47	; 0x2f
   136c0:	bl	10efc <strrchr@plt>
   136c4:	subs	r5, r0, #0
   136c8:	beq	13718 <__assert_fail@plt+0x27d4>
   136cc:	add	r6, r5, #1
   136d0:	sub	r3, r6, r4
   136d4:	cmp	r3, #6
   136d8:	ble	13718 <__assert_fail@plt+0x27d4>
   136dc:	mov	r2, #7
   136e0:	ldr	r1, [pc, #96]	; 13748 <__assert_fail@plt+0x2804>
   136e4:	sub	r0, r5, #6
   136e8:	bl	10f20 <strncmp@plt>
   136ec:	cmp	r0, #0
   136f0:	bne	13718 <__assert_fail@plt+0x27d4>
   136f4:	mov	r2, #3
   136f8:	ldr	r1, [pc, #76]	; 1374c <__assert_fail@plt+0x2808>
   136fc:	mov	r0, r6
   13700:	bl	10f20 <strncmp@plt>
   13704:	cmp	r0, #0
   13708:	movne	r4, r6
   1370c:	ldreq	r3, [pc, #60]	; 13750 <__assert_fail@plt+0x280c>
   13710:	addeq	r4, r5, #4
   13714:	streq	r4, [r3]
   13718:	ldr	r2, [pc, #52]	; 13754 <__assert_fail@plt+0x2810>
   1371c:	ldr	r3, [pc, #52]	; 13758 <__assert_fail@plt+0x2814>
   13720:	str	r4, [r2]
   13724:	str	r4, [r3]
   13728:	pop	{r4, r5, r6, pc}
   1372c:	ldr	r3, [pc, #40]	; 1375c <__assert_fail@plt+0x2818>
   13730:	mov	r2, #55	; 0x37
   13734:	mov	r1, #1
   13738:	ldr	r3, [r3]
   1373c:	ldr	r0, [pc, #28]	; 13760 <__assert_fail@plt+0x281c>
   13740:	bl	10db8 <fwrite@plt>
   13744:	bl	10f2c <abort@plt>
   13748:			; <UNDEFINED> instruction: 0x000185b0
   1374c:			; <UNDEFINED> instruction: 0x000185b8
   13750:	andeq	r9, r2, r8, lsr r1
   13754:	andeq	fp, r2, ip, ror #8
   13758:	andeq	r9, r2, ip, lsr r1
   1375c:	andeq	r9, r2, r8, asr #2
   13760:	andeq	r8, r1, r8, ror r5
   13764:	push	{r4, r5, r6, lr}
   13768:	mov	r2, #48	; 0x30
   1376c:	mov	r4, r1
   13770:	mov	r1, #0
   13774:	mov	r5, r0
   13778:	bl	10ea8 <memset@plt>
   1377c:	cmp	r4, #10
   13780:	beq	13790 <__assert_fail@plt+0x284c>
   13784:	str	r4, [r5]
   13788:	mov	r0, r5
   1378c:	pop	{r4, r5, r6, pc}
   13790:	bl	10f2c <abort@plt>
   13794:	push	{r4, r5, r6, lr}
   13798:	mov	r4, r0
   1379c:	mov	r5, r1
   137a0:	bl	169c4 <__assert_fail@plt+0x5a80>
   137a4:	ldrb	r3, [r0]
   137a8:	bic	r3, r3, #32
   137ac:	cmp	r3, #85	; 0x55
   137b0:	bne	13810 <__assert_fail@plt+0x28cc>
   137b4:	ldrb	r3, [r0, #1]
   137b8:	bic	r3, r3, #32
   137bc:	cmp	r3, #84	; 0x54
   137c0:	bne	1384c <__assert_fail@plt+0x2908>
   137c4:	ldrb	r3, [r0, #2]
   137c8:	bic	r3, r3, #32
   137cc:	cmp	r3, #70	; 0x46
   137d0:	bne	1384c <__assert_fail@plt+0x2908>
   137d4:	ldrb	r3, [r0, #3]
   137d8:	cmp	r3, #45	; 0x2d
   137dc:	bne	1384c <__assert_fail@plt+0x2908>
   137e0:	ldrb	r3, [r0, #4]
   137e4:	cmp	r3, #56	; 0x38
   137e8:	bne	1384c <__assert_fail@plt+0x2908>
   137ec:	ldrb	r3, [r0, #5]
   137f0:	cmp	r3, #0
   137f4:	bne	1384c <__assert_fail@plt+0x2908>
   137f8:	ldrb	r2, [r4]
   137fc:	ldr	r3, [pc, #152]	; 1389c <__assert_fail@plt+0x2958>
   13800:	ldr	r0, [pc, #152]	; 138a0 <__assert_fail@plt+0x295c>
   13804:	cmp	r2, #96	; 0x60
   13808:	movne	r0, r3
   1380c:	pop	{r4, r5, r6, pc}
   13810:	cmp	r3, #71	; 0x47
   13814:	bne	1384c <__assert_fail@plt+0x2908>
   13818:	ldrb	r3, [r0, #1]
   1381c:	bic	r3, r3, #32
   13820:	cmp	r3, #66	; 0x42
   13824:	bne	1384c <__assert_fail@plt+0x2908>
   13828:	ldrb	r3, [r0, #2]
   1382c:	cmp	r3, #49	; 0x31
   13830:	bne	1384c <__assert_fail@plt+0x2908>
   13834:	ldrb	r3, [r0, #3]
   13838:	cmp	r3, #56	; 0x38
   1383c:	bne	1384c <__assert_fail@plt+0x2908>
   13840:	ldrb	r3, [r0, #4]
   13844:	cmp	r3, #48	; 0x30
   13848:	beq	13860 <__assert_fail@plt+0x291c>
   1384c:	ldr	r3, [pc, #80]	; 138a4 <__assert_fail@plt+0x2960>
   13850:	cmp	r5, #9
   13854:	ldr	r0, [pc, #76]	; 138a8 <__assert_fail@plt+0x2964>
   13858:	movne	r0, r3
   1385c:	pop	{r4, r5, r6, pc}
   13860:	ldrb	r3, [r0, #5]
   13864:	cmp	r3, #51	; 0x33
   13868:	bne	1384c <__assert_fail@plt+0x2908>
   1386c:	ldrb	r3, [r0, #6]
   13870:	cmp	r3, #48	; 0x30
   13874:	bne	1384c <__assert_fail@plt+0x2908>
   13878:	ldrb	r3, [r0, #7]
   1387c:	cmp	r3, #0
   13880:	bne	1384c <__assert_fail@plt+0x2908>
   13884:	ldrb	r2, [r4]
   13888:	ldr	r3, [pc, #28]	; 138ac <__assert_fail@plt+0x2968>
   1388c:	ldr	r0, [pc, #28]	; 138b0 <__assert_fail@plt+0x296c>
   13890:	cmp	r2, #96	; 0x60
   13894:	movne	r0, r3
   13898:	pop	{r4, r5, r6, pc}
   1389c:	andeq	r8, r1, r4, lsl r6
   138a0:	andeq	r8, r1, r0, lsl r6
   138a4:	andeq	r8, r1, r4, lsr #12
   138a8:	andeq	r8, r1, r0, lsr #12
   138ac:	andeq	r8, r1, ip, lsl r6
   138b0:	andeq	r8, r1, r8, lsl r6
   138b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b8:	sub	sp, sp, #116	; 0x74
   138bc:	mov	sl, r0
   138c0:	str	r3, [sp, #24]
   138c4:	mov	r3, #1
   138c8:	mov	r8, r1
   138cc:	str	r2, [sp, #56]	; 0x38
   138d0:	str	r3, [sp, #36]	; 0x24
   138d4:	bl	10dd0 <__ctype_get_mb_cur_max@plt>
   138d8:	ldr	r3, [sp, #156]	; 0x9c
   138dc:	mov	fp, r8
   138e0:	mov	r2, #0
   138e4:	lsr	r3, r3, #1
   138e8:	and	r3, r3, #1
   138ec:	str	r2, [sp, #68]	; 0x44
   138f0:	str	r3, [sp, #28]
   138f4:	str	r2, [sp, #40]	; 0x28
   138f8:	str	r2, [sp, #44]	; 0x2c
   138fc:	str	r2, [sp, #52]	; 0x34
   13900:	str	r2, [sp, #64]	; 0x40
   13904:	str	r2, [sp, #72]	; 0x48
   13908:	str	sl, [sp, #32]
   1390c:	str	r0, [sp, #76]	; 0x4c
   13910:	ldr	r3, [sp, #152]	; 0x98
   13914:	cmp	r3, #10
   13918:	ldrls	pc, [pc, r3, lsl #2]
   1391c:	b	14adc <__assert_fail@plt+0x3b98>
   13920:	andeq	r3, r1, ip, asr #18
   13924:	andeq	r3, r1, r4, lsr ip
   13928:	andeq	r3, r1, r8, asr ip
   1392c:	andeq	r3, r1, ip, ror ip
   13930:	andeq	r3, r1, r8, lsr #27
   13934:	andeq	r3, r1, ip, ror sp
   13938:	andeq	r3, r1, r4, asr sp
   1393c:	muleq	r1, r0, ip
   13940:	andeq	r3, r1, r8, lsr #25
   13944:	andeq	r3, r1, r8, lsr #25
   13948:	andeq	r3, r1, r8, lsr #25
   1394c:	mov	r3, #0
   13950:	mov	r7, r3
   13954:	str	r3, [sp, #28]
   13958:	ldr	r3, [sp, #44]	; 0x2c
   1395c:	mov	sl, #0
   13960:	eor	r3, r3, #1
   13964:	str	r3, [sp, #60]	; 0x3c
   13968:	ldr	r3, [sp, #24]
   1396c:	cmn	r3, #1
   13970:	beq	13ed4 <__assert_fail@plt+0x2f90>
   13974:	ldr	r3, [sp, #24]
   13978:	subs	r5, r3, sl
   1397c:	movne	r5, #1
   13980:	cmp	r5, #0
   13984:	beq	13eec <__assert_fail@plt+0x2fa8>
   13988:	ldr	r3, [sp, #152]	; 0x98
   1398c:	ldr	r8, [sp, #44]	; 0x2c
   13990:	cmp	r3, #2
   13994:	moveq	r8, #0
   13998:	andne	r8, r8, #1
   1399c:	ldr	r3, [sp, #52]	; 0x34
   139a0:	adds	r9, r3, #0
   139a4:	movne	r9, #1
   139a8:	ands	r6, r9, r8
   139ac:	beq	14354 <__assert_fail@plt+0x3410>
   139b0:	ldr	r2, [sp, #52]	; 0x34
   139b4:	ldr	r1, [sp, #24]
   139b8:	cmp	r2, #1
   139bc:	mov	r3, r2
   139c0:	movls	r3, #0
   139c4:	movhi	r3, #1
   139c8:	cmn	r1, #1
   139cc:	movne	r3, #0
   139d0:	cmp	r3, #0
   139d4:	add	r4, sl, r2
   139d8:	beq	139e8 <__assert_fail@plt+0x2aa4>
   139dc:	ldr	r0, [sp, #56]	; 0x38
   139e0:	bl	10e6c <strlen@plt>
   139e4:	str	r0, [sp, #24]
   139e8:	ldr	r3, [sp, #24]
   139ec:	cmp	r3, r4
   139f0:	ldr	r3, [sp, #56]	; 0x38
   139f4:	add	r3, r3, sl
   139f8:	str	r3, [sp, #48]	; 0x30
   139fc:	bcc	14360 <__assert_fail@plt+0x341c>
   13a00:	mov	r0, r3
   13a04:	ldr	r2, [sp, #52]	; 0x34
   13a08:	ldr	r1, [sp, #64]	; 0x40
   13a0c:	bl	10d64 <memcmp@plt>
   13a10:	cmp	r0, #0
   13a14:	bne	14360 <__assert_fail@plt+0x341c>
   13a18:	ldr	r3, [sp, #28]
   13a1c:	cmp	r3, #0
   13a20:	bne	14bdc <__assert_fail@plt+0x3c98>
   13a24:	ldr	r3, [sp, #48]	; 0x30
   13a28:	ldrb	r4, [r3]
   13a2c:	cmp	r4, #126	; 0x7e
   13a30:	ldrls	pc, [pc, r4, lsl #2]
   13a34:	b	142f4 <__assert_fail@plt+0x33b0>
   13a38:	andeq	r4, r1, r8, lsl r1
   13a3c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a40:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a44:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a48:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a4c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a50:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a54:	strdeq	r4, [r1], -ip
   13a58:	andeq	r4, r1, r0, ror #1
   13a5c:	ldrdeq	r4, [r1], -ip
   13a60:	andeq	r4, r1, r0, asr #32
   13a64:	andeq	r4, r1, r4, lsr #32
   13a68:			; <UNDEFINED> instruction: 0x000142b8
   13a6c:	muleq	r1, r4, r2
   13a70:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a78:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a7c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a84:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a94:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13aa0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13aa4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13aa8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13aac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ab0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ab4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ab8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13abc:	andeq	r4, r1, r8, lsl #4
   13ac0:	andeq	r4, r1, r8, lsl #4
   13ac4:	andeq	r3, r1, r8, lsl lr
   13ac8:	andeq	r4, r1, r8, lsl #4
   13acc:	andeq	r4, r1, r0, lsr #5
   13ad0:	andeq	r4, r1, r8, lsl #4
   13ad4:	andeq	r4, r1, r4, ror r2
   13ad8:	andeq	r4, r1, r8, lsl #4
   13adc:	andeq	r4, r1, r8, lsl #4
   13ae0:	andeq	r4, r1, r8, lsl #4
   13ae4:	andeq	r4, r1, r0, lsr #5
   13ae8:	andeq	r4, r1, r0, lsr #5
   13aec:	andeq	r4, r1, r0, lsr #5
   13af0:	andeq	r4, r1, r0, lsr #5
   13af4:	andeq	r4, r1, r0, lsr #5
   13af8:	andeq	r4, r1, r0, lsr #5
   13afc:	andeq	r4, r1, r0, lsr #5
   13b00:	andeq	r4, r1, r0, lsr #5
   13b04:	andeq	r4, r1, r0, lsr #5
   13b08:	andeq	r4, r1, r0, lsr #5
   13b0c:	andeq	r4, r1, r0, lsr #5
   13b10:	andeq	r4, r1, r0, lsr #5
   13b14:	andeq	r4, r1, r0, lsr #5
   13b18:	andeq	r4, r1, r0, lsr #5
   13b1c:	andeq	r4, r1, r0, lsr #5
   13b20:	andeq	r4, r1, r0, lsr #5
   13b24:	andeq	r4, r1, r8, lsl #4
   13b28:	andeq	r4, r1, r8, lsl #4
   13b2c:	andeq	r4, r1, r8, lsl #4
   13b30:	andeq	r4, r1, r8, lsl #4
   13b34:	andeq	r4, r1, r4, asr #4
   13b38:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b3c:	andeq	r4, r1, r0, lsr #5
   13b40:	andeq	r4, r1, r0, lsr #5
   13b44:	andeq	r4, r1, r0, lsr #5
   13b48:	andeq	r4, r1, r0, lsr #5
   13b4c:	andeq	r4, r1, r0, lsr #5
   13b50:	andeq	r4, r1, r0, lsr #5
   13b54:	andeq	r4, r1, r0, lsr #5
   13b58:	andeq	r4, r1, r0, lsr #5
   13b5c:	andeq	r4, r1, r0, lsr #5
   13b60:	andeq	r4, r1, r0, lsr #5
   13b64:	andeq	r4, r1, r0, lsr #5
   13b68:	andeq	r4, r1, r0, lsr #5
   13b6c:	andeq	r4, r1, r0, lsr #5
   13b70:	andeq	r4, r1, r0, lsr #5
   13b74:	andeq	r4, r1, r0, lsr #5
   13b78:	andeq	r4, r1, r0, lsr #5
   13b7c:	andeq	r4, r1, r0, lsr #5
   13b80:	andeq	r4, r1, r0, lsr #5
   13b84:	andeq	r4, r1, r0, lsr #5
   13b88:	andeq	r4, r1, r0, lsr #5
   13b8c:	andeq	r4, r1, r0, lsr #5
   13b90:	andeq	r4, r1, r0, lsr #5
   13b94:	andeq	r4, r1, r0, lsr #5
   13b98:	andeq	r4, r1, r0, lsr #5
   13b9c:	andeq	r4, r1, r0, lsr #5
   13ba0:	andeq	r4, r1, r0, lsr #5
   13ba4:	andeq	r4, r1, r8, lsl #4
   13ba8:	andeq	r3, r1, r4, ror #30
   13bac:	andeq	r4, r1, r0, lsr #5
   13bb0:	andeq	r4, r1, r8, lsl #4
   13bb4:	andeq	r4, r1, r0, lsr #5
   13bb8:	andeq	r4, r1, r8, lsl #4
   13bbc:	andeq	r4, r1, r0, lsr #5
   13bc0:	andeq	r4, r1, r0, lsr #5
   13bc4:	andeq	r4, r1, r0, lsr #5
   13bc8:	andeq	r4, r1, r0, lsr #5
   13bcc:	andeq	r4, r1, r0, lsr #5
   13bd0:	andeq	r4, r1, r0, lsr #5
   13bd4:	andeq	r4, r1, r0, lsr #5
   13bd8:	andeq	r4, r1, r0, lsr #5
   13bdc:	andeq	r4, r1, r0, lsr #5
   13be0:	andeq	r4, r1, r0, lsr #5
   13be4:	andeq	r4, r1, r0, lsr #5
   13be8:	andeq	r4, r1, r0, lsr #5
   13bec:	andeq	r4, r1, r0, lsr #5
   13bf0:	andeq	r4, r1, r0, lsr #5
   13bf4:	andeq	r4, r1, r0, lsr #5
   13bf8:	andeq	r4, r1, r0, lsr #5
   13bfc:	andeq	r4, r1, r0, lsr #5
   13c00:	andeq	r4, r1, r0, lsr #5
   13c04:	andeq	r4, r1, r0, lsr #5
   13c08:	andeq	r4, r1, r0, lsr #5
   13c0c:	andeq	r4, r1, r0, lsr #5
   13c10:	andeq	r4, r1, r0, lsr #5
   13c14:	andeq	r4, r1, r0, lsr #5
   13c18:	andeq	r4, r1, r0, lsr #5
   13c1c:	andeq	r4, r1, r0, lsr #5
   13c20:	andeq	r4, r1, r0, lsr #5
   13c24:	strdeq	r3, [r1], -r8
   13c28:	andeq	r4, r1, r8, lsl #4
   13c2c:	strdeq	r3, [r1], -r8
   13c30:	andeq	r3, r1, r8, lsl lr
   13c34:	mov	r3, #1
   13c38:	str	r3, [sp, #28]
   13c3c:	str	r3, [sp, #52]	; 0x34
   13c40:	ldr	r3, [pc, #4000]	; 14be8 <__assert_fail@plt+0x3ca4>
   13c44:	mov	r7, #0
   13c48:	str	r3, [sp, #64]	; 0x40
   13c4c:	mov	r3, #2
   13c50:	str	r3, [sp, #152]	; 0x98
   13c54:	b	13958 <__assert_fail@plt+0x2a14>
   13c58:	ldr	r3, [sp, #28]
   13c5c:	cmp	r3, #0
   13c60:	beq	13dbc <__assert_fail@plt+0x2e78>
   13c64:	mov	r3, #1
   13c68:	str	r3, [sp, #52]	; 0x34
   13c6c:	ldr	r3, [pc, #3956]	; 14be8 <__assert_fail@plt+0x3ca4>
   13c70:	mov	r7, #0
   13c74:	str	r3, [sp, #64]	; 0x40
   13c78:	b	13958 <__assert_fail@plt+0x2a14>
   13c7c:	mov	r3, #1
   13c80:	str	r3, [sp, #44]	; 0x2c
   13c84:	str	r3, [sp, #52]	; 0x34
   13c88:	str	r3, [sp, #28]
   13c8c:	b	13c40 <__assert_fail@plt+0x2cfc>
   13c90:	mov	r3, #0
   13c94:	str	r3, [sp, #28]
   13c98:	mov	r3, #1
   13c9c:	str	r3, [sp, #44]	; 0x2c
   13ca0:	mov	r7, #0
   13ca4:	b	13958 <__assert_fail@plt+0x2a14>
   13ca8:	ldr	r3, [sp, #152]	; 0x98
   13cac:	cmp	r3, #10
   13cb0:	beq	13cf4 <__assert_fail@plt+0x2db0>
   13cb4:	mov	r2, #5
   13cb8:	ldr	r1, [pc, #3884]	; 14bec <__assert_fail@plt+0x3ca8>
   13cbc:	mov	r0, #0
   13cc0:	bl	10d88 <dcgettext@plt>
   13cc4:	ldr	r2, [pc, #3872]	; 14bec <__assert_fail@plt+0x3ca8>
   13cc8:	cmp	r0, r2
   13ccc:	str	r0, [sp, #164]	; 0xa4
   13cd0:	beq	14cd8 <__assert_fail@plt+0x3d94>
   13cd4:	mov	r2, #5
   13cd8:	ldr	r1, [pc, #3848]	; 14be8 <__assert_fail@plt+0x3ca4>
   13cdc:	mov	r0, #0
   13ce0:	bl	10d88 <dcgettext@plt>
   13ce4:	ldr	r2, [pc, #3836]	; 14be8 <__assert_fail@plt+0x3ca4>
   13ce8:	cmp	r0, r2
   13cec:	str	r0, [sp, #168]	; 0xa8
   13cf0:	beq	14cc8 <__assert_fail@plt+0x3d84>
   13cf4:	ldr	r7, [sp, #28]
   13cf8:	cmp	r7, #0
   13cfc:	movne	r7, #0
   13d00:	bne	13d34 <__assert_fail@plt+0x2df0>
   13d04:	ldr	r3, [sp, #164]	; 0xa4
   13d08:	ldrb	r3, [r3]
   13d0c:	cmp	r3, #0
   13d10:	beq	14ce8 <__assert_fail@plt+0x3da4>
   13d14:	ldr	r2, [sp, #164]	; 0xa4
   13d18:	ldr	r1, [sp, #32]
   13d1c:	cmp	fp, r7
   13d20:	strbhi	r3, [r1, r7]
   13d24:	ldrb	r3, [r2, #1]!
   13d28:	add	r7, r7, #1
   13d2c:	cmp	r3, #0
   13d30:	bne	13d1c <__assert_fail@plt+0x2dd8>
   13d34:	ldr	r0, [sp, #168]	; 0xa8
   13d38:	bl	10e6c <strlen@plt>
   13d3c:	ldr	r3, [sp, #168]	; 0xa8
   13d40:	str	r3, [sp, #64]	; 0x40
   13d44:	mov	r3, #1
   13d48:	str	r3, [sp, #44]	; 0x2c
   13d4c:	str	r0, [sp, #52]	; 0x34
   13d50:	b	13958 <__assert_fail@plt+0x2a14>
   13d54:	mov	r3, #1
   13d58:	str	r3, [sp, #44]	; 0x2c
   13d5c:	str	r3, [sp, #52]	; 0x34
   13d60:	str	r3, [sp, #28]
   13d64:	ldr	r3, [pc, #3716]	; 14bf0 <__assert_fail@plt+0x3cac>
   13d68:	mov	r7, #0
   13d6c:	str	r3, [sp, #64]	; 0x40
   13d70:	mov	r3, #5
   13d74:	str	r3, [sp, #152]	; 0x98
   13d78:	b	13958 <__assert_fail@plt+0x2a14>
   13d7c:	ldr	r3, [sp, #28]
   13d80:	cmp	r3, #0
   13d84:	beq	14a84 <__assert_fail@plt+0x3b40>
   13d88:	ldr	r3, [sp, #28]
   13d8c:	mov	r7, #0
   13d90:	str	r3, [sp, #44]	; 0x2c
   13d94:	mov	r3, #1
   13d98:	str	r3, [sp, #52]	; 0x34
   13d9c:	ldr	r3, [pc, #3660]	; 14bf0 <__assert_fail@plt+0x3cac>
   13da0:	str	r3, [sp, #64]	; 0x40
   13da4:	b	13958 <__assert_fail@plt+0x2a14>
   13da8:	ldr	r3, [sp, #28]
   13dac:	cmp	r3, #0
   13db0:	mov	r3, #1
   13db4:	streq	r3, [sp, #44]	; 0x2c
   13db8:	bne	13c3c <__assert_fail@plt+0x2cf8>
   13dbc:	cmp	fp, #0
   13dc0:	beq	14ab4 <__assert_fail@plt+0x3b70>
   13dc4:	ldr	r3, [sp, #32]
   13dc8:	mov	r2, #39	; 0x27
   13dcc:	mov	r7, #1
   13dd0:	strb	r2, [r3]
   13dd4:	mov	r3, #0
   13dd8:	str	r3, [sp, #28]
   13ddc:	mov	r3, #1
   13de0:	str	r3, [sp, #52]	; 0x34
   13de4:	ldr	r3, [pc, #3580]	; 14be8 <__assert_fail@plt+0x3ca4>
   13de8:	str	r3, [sp, #64]	; 0x40
   13dec:	mov	r3, #2
   13df0:	str	r3, [sp, #152]	; 0x98
   13df4:	b	13958 <__assert_fail@plt+0x2a14>
   13df8:	ldr	r3, [sp, #24]
   13dfc:	cmn	r3, #1
   13e00:	beq	14a18 <__assert_fail@plt+0x3ad4>
   13e04:	ldr	r3, [sp, #24]
   13e08:	subs	r3, r3, #1
   13e0c:	movne	r3, #1
   13e10:	cmp	r3, #0
   13e14:	bne	13e20 <__assert_fail@plt+0x2edc>
   13e18:	cmp	sl, #0
   13e1c:	beq	1420c <__assert_fail@plt+0x32c8>
   13e20:	ldr	r3, [sp, #152]	; 0x98
   13e24:	mov	r5, #0
   13e28:	sub	r2, r3, #2
   13e2c:	mov	r8, r5
   13e30:	clz	r2, r2
   13e34:	lsr	r2, r2, #5
   13e38:	ldr	r3, [sp, #60]	; 0x3c
   13e3c:	ldr	r1, [sp, #28]
   13e40:	orr	r3, r2, r3
   13e44:	eor	r3, r3, #1
   13e48:	orr	r3, r1, r3
   13e4c:	tst	r3, #255	; 0xff
   13e50:	bne	1457c <__assert_fail@plt+0x3638>
   13e54:	cmp	r6, #0
   13e58:	bne	13fa8 <__assert_fail@plt+0x3064>
   13e5c:	ldr	r3, [sp, #40]	; 0x28
   13e60:	eor	r8, r8, #1
   13e64:	and	r8, r8, r3
   13e68:	add	sl, sl, #1
   13e6c:	uxtb	r6, r8
   13e70:	cmp	r6, #0
   13e74:	beq	13ea8 <__assert_fail@plt+0x2f64>
   13e78:	cmp	fp, r7
   13e7c:	movhi	r2, #39	; 0x27
   13e80:	ldrhi	r3, [sp, #32]
   13e84:	strbhi	r2, [r3, r7]
   13e88:	add	r3, r7, #1
   13e8c:	cmp	fp, r3
   13e90:	movhi	r1, #39	; 0x27
   13e94:	ldrhi	r2, [sp, #32]
   13e98:	add	r7, r7, #2
   13e9c:	strbhi	r1, [r2, r3]
   13ea0:	mov	r3, #0
   13ea4:	str	r3, [sp, #40]	; 0x28
   13ea8:	cmp	r7, fp
   13eac:	ldrcc	r3, [sp, #32]
   13eb0:	strbcc	r4, [r3, r7]
   13eb4:	ldr	r3, [sp, #36]	; 0x24
   13eb8:	cmp	r5, #0
   13ebc:	moveq	r3, #0
   13ec0:	str	r3, [sp, #36]	; 0x24
   13ec4:	ldr	r3, [sp, #24]
   13ec8:	add	r7, r7, #1
   13ecc:	cmn	r3, #1
   13ed0:	bne	13974 <__assert_fail@plt+0x2a30>
   13ed4:	ldr	r3, [sp, #56]	; 0x38
   13ed8:	ldrb	r5, [r3, sl]
   13edc:	adds	r5, r5, #0
   13ee0:	movne	r5, #1
   13ee4:	cmp	r5, #0
   13ee8:	bne	13988 <__assert_fail@plt+0x2a44>
   13eec:	ldr	r3, [sp, #152]	; 0x98
   13ef0:	ldr	r1, [sp, #28]
   13ef4:	sub	r3, r3, #2
   13ef8:	clz	r3, r3
   13efc:	lsr	r3, r3, #5
   13f00:	and	r9, r1, r3
   13f04:	cmp	r7, #0
   13f08:	movne	r2, #0
   13f0c:	andeq	r2, r9, #1
   13f10:	cmp	r2, #0
   13f14:	bne	148f0 <__assert_fail@plt+0x39ac>
   13f18:	eor	r2, r1, #1
   13f1c:	ands	r3, r3, r2
   13f20:	beq	14dac <__assert_fail@plt+0x3e68>
   13f24:	ldr	r2, [sp, #68]	; 0x44
   13f28:	cmp	r2, #0
   13f2c:	beq	14d98 <__assert_fail@plt+0x3e54>
   13f30:	ldr	r3, [sp, #36]	; 0x24
   13f34:	cmp	r3, #0
   13f38:	bne	14d50 <__assert_fail@plt+0x3e0c>
   13f3c:	ldr	r2, [sp, #72]	; 0x48
   13f40:	clz	r3, fp
   13f44:	cmp	r2, #0
   13f48:	lsr	r3, r3, #5
   13f4c:	moveq	r3, #0
   13f50:	cmp	r3, #0
   13f54:	beq	14cf0 <__assert_fail@plt+0x3dac>
   13f58:	str	r3, [sp, #68]	; 0x44
   13f5c:	ldr	fp, [sp, #72]	; 0x48
   13f60:	b	13910 <__assert_fail@plt+0x29cc>
   13f64:	ldr	r3, [sp, #152]	; 0x98
   13f68:	cmp	r3, #2
   13f6c:	beq	145c0 <__assert_fail@plt+0x367c>
   13f70:	ldr	r3, [sp, #44]	; 0x2c
   13f74:	ldr	r2, [sp, #28]
   13f78:	and	r2, r3, r2
   13f7c:	ands	r2, r9, r2
   13f80:	bne	145cc <__assert_fail@plt+0x3688>
   13f84:	mov	r4, #92	; 0x5c
   13f88:	mov	r3, r4
   13f8c:	ldr	r1, [sp, #44]	; 0x2c
   13f90:	cmp	r1, #0
   13f94:	moveq	r5, #0
   13f98:	moveq	r8, r1
   13f9c:	beq	13e38 <__assert_fail@plt+0x2ef4>
   13fa0:	mov	r4, r3
   13fa4:	mov	r5, #0
   13fa8:	ldr	r3, [sp, #28]
   13fac:	cmp	r3, #0
   13fb0:	bne	145b4 <__assert_fail@plt+0x3670>
   13fb4:	ldr	r3, [sp, #40]	; 0x28
   13fb8:	eor	r9, r3, #1
   13fbc:	and	r9, r9, r2
   13fc0:	ands	r9, r9, #255	; 0xff
   13fc4:	beq	14008 <__assert_fail@plt+0x30c4>
   13fc8:	cmp	fp, r7
   13fcc:	movhi	r2, #39	; 0x27
   13fd0:	ldrhi	r3, [sp, #32]
   13fd4:	str	r9, [sp, #40]	; 0x28
   13fd8:	strbhi	r2, [r3, r7]
   13fdc:	add	r3, r7, #1
   13fe0:	cmp	fp, r3
   13fe4:	movhi	r1, #36	; 0x24
   13fe8:	ldrhi	r2, [sp, #32]
   13fec:	strbhi	r1, [r2, r3]
   13ff0:	add	r3, r7, #2
   13ff4:	cmp	fp, r3
   13ff8:	add	r7, r7, #3
   13ffc:	ldrhi	r2, [sp, #32]
   14000:	movhi	r1, #39	; 0x27
   14004:	strbhi	r1, [r2, r3]
   14008:	cmp	fp, r7
   1400c:	movhi	r2, #92	; 0x5c
   14010:	ldrhi	r3, [sp, #32]
   14014:	add	sl, sl, #1
   14018:	strbhi	r2, [r3, r7]
   1401c:	add	r7, r7, #1
   14020:	b	13ea8 <__assert_fail@plt+0x2f64>
   14024:	ldr	r3, [sp, #152]	; 0x98
   14028:	mov	r4, #11
   1402c:	sub	r2, r3, #2
   14030:	mov	r3, #118	; 0x76
   14034:	clz	r2, r2
   14038:	lsr	r2, r2, #5
   1403c:	b	13f8c <__assert_fail@plt+0x3048>
   14040:	mov	r4, #10
   14044:	mov	r3, #110	; 0x6e
   14048:	ldr	r2, [sp, #152]	; 0x98
   1404c:	ldr	r1, [sp, #28]
   14050:	sub	r2, r2, #2
   14054:	clz	r2, r2
   14058:	lsr	r2, r2, #5
   1405c:	ands	r1, r1, r2
   14060:	beq	13f8c <__assert_fail@plt+0x3048>
   14064:	ldr	sl, [sp, #32]
   14068:	mov	r8, fp
   1406c:	mov	r2, r1
   14070:	mov	r3, #2
   14074:	str	r3, [sp, #152]	; 0x98
   14078:	ldr	r9, [sp, #44]	; 0x2c
   1407c:	ldr	r3, [sp, #152]	; 0x98
   14080:	and	r9, r9, r2
   14084:	tst	r9, #255	; 0xff
   14088:	movne	r3, #4
   1408c:	str	r3, [sp, #152]	; 0x98
   14090:	ldr	r3, [sp, #156]	; 0x9c
   14094:	mov	ip, #0
   14098:	bic	r3, r3, #2
   1409c:	str	r3, [sp, #4]
   140a0:	ldr	r3, [sp, #168]	; 0xa8
   140a4:	ldr	r2, [sp, #56]	; 0x38
   140a8:	str	r3, [sp, #16]
   140ac:	ldr	r3, [sp, #164]	; 0xa4
   140b0:	mov	r1, r8
   140b4:	str	r3, [sp, #12]
   140b8:	ldr	r3, [sp, #152]	; 0x98
   140bc:	mov	r0, sl
   140c0:	str	r3, [sp]
   140c4:	str	ip, [sp, #8]
   140c8:	ldr	r3, [sp, #24]
   140cc:	bl	138b4 <__assert_fail@plt+0x2970>
   140d0:	mov	fp, r0
   140d4:	mov	r0, fp
   140d8:	add	sp, sp, #116	; 0x74
   140dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140e0:	ldr	r3, [sp, #152]	; 0x98
   140e4:	mov	r4, #8
   140e8:	sub	r2, r3, #2
   140ec:	mov	r3, #98	; 0x62
   140f0:	clz	r2, r2
   140f4:	lsr	r2, r2, #5
   140f8:	b	13f8c <__assert_fail@plt+0x3048>
   140fc:	ldr	r3, [sp, #152]	; 0x98
   14100:	mov	r4, #7
   14104:	sub	r2, r3, #2
   14108:	mov	r3, #97	; 0x61
   1410c:	clz	r2, r2
   14110:	lsr	r2, r2, #5
   14114:	b	13f8c <__assert_fail@plt+0x3048>
   14118:	ldr	r3, [sp, #44]	; 0x2c
   1411c:	cmp	r3, #0
   14120:	beq	14904 <__assert_fail@plt+0x39c0>
   14124:	ldr	r3, [sp, #28]
   14128:	cmp	r3, #0
   1412c:	bne	14bdc <__assert_fail@plt+0x3c98>
   14130:	ldr	r3, [sp, #152]	; 0x98
   14134:	sub	r2, r3, #2
   14138:	ldr	r3, [sp, #40]	; 0x28
   1413c:	clz	r2, r2
   14140:	eor	r3, r3, #1
   14144:	lsr	r2, r2, #5
   14148:	ands	r3, r2, r3
   1414c:	moveq	r1, r7
   14150:	beq	14194 <__assert_fail@plt+0x3250>
   14154:	cmp	fp, r7
   14158:	movhi	r0, #39	; 0x27
   1415c:	ldrhi	r1, [sp, #32]
   14160:	str	r3, [sp, #40]	; 0x28
   14164:	strbhi	r0, [r1, r7]
   14168:	add	r1, r7, #1
   1416c:	cmp	fp, r1
   14170:	movhi	ip, #36	; 0x24
   14174:	ldrhi	r0, [sp, #32]
   14178:	strbhi	ip, [r0, r1]
   1417c:	add	r1, r7, #2
   14180:	cmp	fp, r1
   14184:	movhi	ip, #39	; 0x27
   14188:	ldrhi	r0, [sp, #32]
   1418c:	strbhi	ip, [r0, r1]
   14190:	add	r1, r7, #3
   14194:	cmp	fp, r1
   14198:	movhi	r0, #92	; 0x5c
   1419c:	ldrhi	r3, [sp, #32]
   141a0:	add	r7, r1, #1
   141a4:	strbhi	r0, [r3, r1]
   141a8:	cmp	r8, #0
   141ac:	beq	14af0 <__assert_fail@plt+0x3bac>
   141b0:	ldr	r0, [sp, #24]
   141b4:	add	r3, sl, #1
   141b8:	cmp	r3, r0
   141bc:	bcs	14a2c <__assert_fail@plt+0x3ae8>
   141c0:	ldr	r0, [sp, #56]	; 0x38
   141c4:	ldrb	r3, [r0, r3]
   141c8:	sub	r3, r3, #48	; 0x30
   141cc:	cmp	r3, #9
   141d0:	bhi	14a2c <__assert_fail@plt+0x3ae8>
   141d4:	cmp	fp, r7
   141d8:	movhi	r3, #48	; 0x30
   141dc:	ldrhi	r0, [sp, #32]
   141e0:	ldr	r5, [sp, #28]
   141e4:	mov	r4, #48	; 0x30
   141e8:	strbhi	r3, [r0, r7]
   141ec:	add	r3, r1, #2
   141f0:	cmp	fp, r3
   141f4:	movhi	r0, #48	; 0x30
   141f8:	ldrhi	ip, [sp, #32]
   141fc:	add	r7, r1, #3
   14200:	strbhi	r0, [ip, r3]
   14204:	b	13e38 <__assert_fail@plt+0x2ef4>
   14208:	mov	r5, #0
   1420c:	ldr	r3, [sp, #152]	; 0x98
   14210:	sub	r2, r3, #2
   14214:	ldr	r3, [sp, #28]
   14218:	clz	r2, r2
   1421c:	lsr	r2, r2, #5
   14220:	ands	r8, r3, r2
   14224:	beq	13e38 <__assert_fail@plt+0x2ef4>
   14228:	mov	r3, r8
   1422c:	mov	r2, r3
   14230:	mov	r3, #2
   14234:	ldr	sl, [sp, #32]
   14238:	mov	r8, fp
   1423c:	str	r3, [sp, #152]	; 0x98
   14240:	b	14078 <__assert_fail@plt+0x3134>
   14244:	ldr	r3, [sp, #152]	; 0x98
   14248:	cmp	r3, #2
   1424c:	beq	14970 <__assert_fail@plt+0x3a2c>
   14250:	cmp	r3, #5
   14254:	beq	14930 <__assert_fail@plt+0x39ec>
   14258:	mov	r5, #0
   1425c:	sub	r2, r3, #2
   14260:	mov	r8, r5
   14264:	clz	r2, r2
   14268:	mov	r4, #63	; 0x3f
   1426c:	lsr	r2, r2, #5
   14270:	b	13e38 <__assert_fail@plt+0x2ef4>
   14274:	ldr	r3, [sp, #152]	; 0x98
   14278:	cmp	r3, #2
   1427c:	beq	14990 <__assert_fail@plt+0x3a4c>
   14280:	mov	r2, #0
   14284:	str	r5, [sp, #68]	; 0x44
   14288:	mov	r8, r2
   1428c:	mov	r4, #39	; 0x27
   14290:	b	13e38 <__assert_fail@plt+0x2ef4>
   14294:	mov	r4, #13
   14298:	mov	r3, #114	; 0x72
   1429c:	b	14048 <__assert_fail@plt+0x3104>
   142a0:	ldr	r3, [sp, #152]	; 0x98
   142a4:	mov	r8, #0
   142a8:	sub	r2, r3, #2
   142ac:	clz	r2, r2
   142b0:	lsr	r2, r2, #5
   142b4:	b	13e38 <__assert_fail@plt+0x2ef4>
   142b8:	ldr	r3, [sp, #152]	; 0x98
   142bc:	mov	r4, #12
   142c0:	sub	r2, r3, #2
   142c4:	mov	r3, #102	; 0x66
   142c8:	clz	r2, r2
   142cc:	lsr	r2, r2, #5
   142d0:	b	13f8c <__assert_fail@plt+0x3048>
   142d4:	mov	r5, r6
   142d8:	b	1420c <__assert_fail@plt+0x32c8>
   142dc:	ldr	r3, [sp, #152]	; 0x98
   142e0:	sub	r2, r3, #2
   142e4:	mov	r3, #116	; 0x74
   142e8:	clz	r2, r2
   142ec:	lsr	r2, r2, #5
   142f0:	b	13f8c <__assert_fail@plt+0x3048>
   142f4:	ldr	r8, [sp, #76]	; 0x4c
   142f8:	cmp	r8, #1
   142fc:	bne	147ac <__assert_fail@plt+0x3868>
   14300:	bl	10e54 <__ctype_b_loc@plt>
   14304:	sxth	r3, r4
   14308:	mov	ip, r8
   1430c:	lsl	r3, r3, #1
   14310:	ldr	r2, [r0]
   14314:	ldrh	r3, [r2, r3]
   14318:	and	r3, r3, #16384	; 0x4000
   1431c:	cmp	r3, #0
   14320:	movne	r5, #1
   14324:	moveq	r5, #0
   14328:	moveq	r3, #1
   1432c:	movne	r3, #0
   14330:	ldr	r2, [sp, #44]	; 0x2c
   14334:	and	r3, r3, r2
   14338:	ands	r8, r3, #255	; 0xff
   1433c:	bne	14640 <__assert_fail@plt+0x36fc>
   14340:	ldr	r3, [sp, #152]	; 0x98
   14344:	sub	r2, r3, #2
   14348:	clz	r2, r2
   1434c:	lsr	r2, r2, #5
   14350:	b	13e38 <__assert_fail@plt+0x2ef4>
   14354:	ldr	r3, [sp, #56]	; 0x38
   14358:	add	r3, r3, sl
   1435c:	str	r3, [sp, #48]	; 0x30
   14360:	ldr	r3, [sp, #48]	; 0x30
   14364:	mov	r6, #0
   14368:	ldrb	r4, [r3]
   1436c:	cmp	r4, #126	; 0x7e
   14370:	ldrls	pc, [pc, r4, lsl #2]
   14374:	b	142f4 <__assert_fail@plt+0x33b0>
   14378:	andeq	r4, r1, r8, lsl r1
   1437c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14380:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14384:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14388:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1438c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14390:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14394:	strdeq	r4, [r1], -ip
   14398:	andeq	r4, r1, r0, ror #1
   1439c:	andeq	r4, r1, r4, ror r5
   143a0:	andeq	r4, r1, r0, asr #32
   143a4:	andeq	r4, r1, r4, lsr #32
   143a8:			; <UNDEFINED> instruction: 0x000142b8
   143ac:	muleq	r1, r4, r2
   143b0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143b4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143b8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143c0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143c4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143c8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143cc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143d0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143d4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143d8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143dc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143e0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143e4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143e8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143ec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143f0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143f4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143f8:	andeq	r4, r1, ip, lsl #4
   143fc:	andeq	r4, r1, r8, lsl #4
   14400:	andeq	r4, r1, r8, lsl #4
   14404:	andeq	r3, r1, r8, lsl lr
   14408:	andeq	r4, r1, r8, lsl #4
   1440c:	andeq	r4, r1, r0, lsr #5
   14410:	andeq	r4, r1, r8, lsl #4
   14414:	andeq	r4, r1, r4, ror r2
   14418:	andeq	r4, r1, r8, lsl #4
   1441c:	andeq	r4, r1, r8, lsl #4
   14420:	andeq	r4, r1, r8, lsl #4
   14424:	andeq	r4, r1, r0, lsr #5
   14428:	andeq	r4, r1, r0, lsr #5
   1442c:	andeq	r4, r1, r0, lsr #5
   14430:	andeq	r4, r1, r0, lsr #5
   14434:	andeq	r4, r1, r0, lsr #5
   14438:	andeq	r4, r1, r0, lsr #5
   1443c:	andeq	r4, r1, r0, lsr #5
   14440:	andeq	r4, r1, r0, lsr #5
   14444:	andeq	r4, r1, r0, lsr #5
   14448:	andeq	r4, r1, r0, lsr #5
   1444c:	andeq	r4, r1, r0, lsr #5
   14450:	andeq	r4, r1, r0, lsr #5
   14454:	andeq	r4, r1, r0, lsr #5
   14458:	andeq	r4, r1, r0, lsr #5
   1445c:	andeq	r4, r1, r0, lsr #5
   14460:	andeq	r4, r1, r0, lsr #5
   14464:	andeq	r4, r1, r8, lsl #4
   14468:	andeq	r4, r1, r8, lsl #4
   1446c:	andeq	r4, r1, r8, lsl #4
   14470:	andeq	r4, r1, r8, lsl #4
   14474:	andeq	r4, r1, r4, asr #4
   14478:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1447c:	andeq	r4, r1, r0, lsr #5
   14480:	andeq	r4, r1, r0, lsr #5
   14484:	andeq	r4, r1, r0, lsr #5
   14488:	andeq	r4, r1, r0, lsr #5
   1448c:	andeq	r4, r1, r0, lsr #5
   14490:	andeq	r4, r1, r0, lsr #5
   14494:	andeq	r4, r1, r0, lsr #5
   14498:	andeq	r4, r1, r0, lsr #5
   1449c:	andeq	r4, r1, r0, lsr #5
   144a0:	andeq	r4, r1, r0, lsr #5
   144a4:	andeq	r4, r1, r0, lsr #5
   144a8:	andeq	r4, r1, r0, lsr #5
   144ac:	andeq	r4, r1, r0, lsr #5
   144b0:	andeq	r4, r1, r0, lsr #5
   144b4:	andeq	r4, r1, r0, lsr #5
   144b8:	andeq	r4, r1, r0, lsr #5
   144bc:	andeq	r4, r1, r0, lsr #5
   144c0:	andeq	r4, r1, r0, lsr #5
   144c4:	andeq	r4, r1, r0, lsr #5
   144c8:	andeq	r4, r1, r0, lsr #5
   144cc:	andeq	r4, r1, r0, lsr #5
   144d0:	andeq	r4, r1, r0, lsr #5
   144d4:	andeq	r4, r1, r0, lsr #5
   144d8:	andeq	r4, r1, r0, lsr #5
   144dc:	andeq	r4, r1, r0, lsr #5
   144e0:	andeq	r4, r1, r0, lsr #5
   144e4:	andeq	r4, r1, r8, lsl #4
   144e8:	andeq	r3, r1, r4, ror #30
   144ec:	andeq	r4, r1, r0, lsr #5
   144f0:	andeq	r4, r1, r8, lsl #4
   144f4:	andeq	r4, r1, r0, lsr #5
   144f8:	andeq	r4, r1, r8, lsl #4
   144fc:	andeq	r4, r1, r0, lsr #5
   14500:	andeq	r4, r1, r0, lsr #5
   14504:	andeq	r4, r1, r0, lsr #5
   14508:	andeq	r4, r1, r0, lsr #5
   1450c:	andeq	r4, r1, r0, lsr #5
   14510:	andeq	r4, r1, r0, lsr #5
   14514:	andeq	r4, r1, r0, lsr #5
   14518:	andeq	r4, r1, r0, lsr #5
   1451c:	andeq	r4, r1, r0, lsr #5
   14520:	andeq	r4, r1, r0, lsr #5
   14524:	andeq	r4, r1, r0, lsr #5
   14528:	andeq	r4, r1, r0, lsr #5
   1452c:	andeq	r4, r1, r0, lsr #5
   14530:	andeq	r4, r1, r0, lsr #5
   14534:	andeq	r4, r1, r0, lsr #5
   14538:	andeq	r4, r1, r0, lsr #5
   1453c:	andeq	r4, r1, r0, lsr #5
   14540:	andeq	r4, r1, r0, lsr #5
   14544:	andeq	r4, r1, r0, lsr #5
   14548:	andeq	r4, r1, r0, lsr #5
   1454c:	andeq	r4, r1, r0, lsr #5
   14550:	andeq	r4, r1, r0, lsr #5
   14554:	andeq	r4, r1, r0, lsr #5
   14558:	andeq	r4, r1, r0, lsr #5
   1455c:	andeq	r4, r1, r0, lsr #5
   14560:	andeq	r4, r1, r0, lsr #5
   14564:	strdeq	r3, [r1], -r8
   14568:	andeq	r4, r1, r8, lsl #4
   1456c:	strdeq	r3, [r1], -r8
   14570:	andeq	r3, r1, r8, lsl lr
   14574:	mov	r3, #116	; 0x74
   14578:	b	14048 <__assert_fail@plt+0x3104>
   1457c:	ldr	r3, [sp, #160]	; 0xa0
   14580:	cmp	r3, #0
   14584:	beq	13e54 <__assert_fail@plt+0x2f10>
   14588:	lsr	r3, r4, #5
   1458c:	ldr	r0, [sp, #160]	; 0xa0
   14590:	uxtb	r3, r3
   14594:	and	r1, r4, #31
   14598:	ldr	r0, [r0, r3, lsl #2]
   1459c:	lsr	r3, r0, r1
   145a0:	tst	r3, #1
   145a4:	beq	13e54 <__assert_fail@plt+0x2f10>
   145a8:	ldr	r3, [sp, #28]
   145ac:	cmp	r3, #0
   145b0:	beq	13fb4 <__assert_fail@plt+0x3070>
   145b4:	ldr	sl, [sp, #32]
   145b8:	mov	r8, fp
   145bc:	b	14078 <__assert_fail@plt+0x3134>
   145c0:	ldr	r3, [sp, #28]
   145c4:	cmp	r3, #0
   145c8:	bne	14b1c <__assert_fail@plt+0x3bd8>
   145cc:	add	sl, sl, #1
   145d0:	ldr	r6, [sp, #40]	; 0x28
   145d4:	mov	r5, #0
   145d8:	mov	r4, #92	; 0x5c
   145dc:	b	13e70 <__assert_fail@plt+0x2f2c>
   145e0:	cmp	r9, r8
   145e4:	bne	14854 <__assert_fail@plt+0x3910>
   145e8:	ldr	r0, [sp, #100]	; 0x64
   145ec:	bl	10dac <iswprint@plt>
   145f0:	add	r5, r5, r4
   145f4:	cmp	r0, #0
   145f8:	add	r0, sp, #104	; 0x68
   145fc:	moveq	r6, #0
   14600:	bl	10d4c <mbsinit@plt>
   14604:	cmp	r0, #0
   14608:	beq	147e8 <__assert_fail@plt+0x38a4>
   1460c:	mov	r2, r6
   14610:	mov	ip, r5
   14614:	eor	r5, r2, #1
   14618:	ldr	r4, [sp, #80]	; 0x50
   1461c:	ldr	r6, [sp, #84]	; 0x54
   14620:	ldr	r7, [sp, #88]	; 0x58
   14624:	uxtb	r5, r5
   14628:	cmp	ip, #1
   1462c:	bls	14b2c <__assert_fail@plt+0x3be8>
   14630:	ldr	r3, [sp, #44]	; 0x2c
   14634:	and	r8, r3, r5
   14638:	mov	r5, r2
   1463c:	uxtb	r8, r8
   14640:	add	r2, sl, ip
   14644:	ldr	r0, [sp, #48]	; 0x30
   14648:	mov	r1, #0
   1464c:	str	r5, [sp, #48]	; 0x30
   14650:	ldr	r9, [sp, #28]
   14654:	ldr	ip, [sp, #40]	; 0x28
   14658:	ldr	r3, [sp, #32]
   1465c:	ldr	r5, [sp, #152]	; 0x98
   14660:	b	1471c <__assert_fail@plt+0x37d8>
   14664:	cmp	r9, #0
   14668:	bne	14a40 <__assert_fail@plt+0x3afc>
   1466c:	eor	r1, ip, #1
   14670:	cmp	r5, #2
   14674:	movne	r1, #0
   14678:	andeq	r1, r1, #1
   1467c:	cmp	r1, #0
   14680:	beq	146b8 <__assert_fail@plt+0x3774>
   14684:	cmp	fp, r7
   14688:	movhi	ip, #39	; 0x27
   1468c:	strbhi	ip, [r3, r7]
   14690:	add	ip, r7, #1
   14694:	cmp	fp, ip
   14698:	movhi	lr, #36	; 0x24
   1469c:	strbhi	lr, [r3, ip]
   146a0:	add	ip, r7, #2
   146a4:	cmp	fp, ip
   146a8:	movhi	lr, #39	; 0x27
   146ac:	strbhi	lr, [r3, ip]
   146b0:	add	r7, r7, #3
   146b4:	mov	ip, r1
   146b8:	cmp	fp, r7
   146bc:	movhi	r1, #92	; 0x5c
   146c0:	strbhi	r1, [r3, r7]
   146c4:	add	r1, r7, #1
   146c8:	cmp	fp, r1
   146cc:	lsrhi	lr, r4, #6
   146d0:	addhi	lr, lr, #48	; 0x30
   146d4:	strbhi	lr, [r3, r1]
   146d8:	add	lr, r7, #2
   146dc:	cmp	fp, lr
   146e0:	lsrhi	r1, r4, #3
   146e4:	andhi	r1, r1, #7
   146e8:	addhi	r1, r1, #48	; 0x30
   146ec:	add	sl, sl, #1
   146f0:	strbhi	r1, [r3, lr]
   146f4:	and	r4, r4, #7
   146f8:	cmp	r2, sl
   146fc:	add	r4, r4, #48	; 0x30
   14700:	add	r7, r7, #3
   14704:	bls	14a64 <__assert_fail@plt+0x3b20>
   14708:	mov	r1, r8
   1470c:	cmp	fp, r7
   14710:	strbhi	r4, [r3, r7]
   14714:	ldrb	r4, [r0, #1]!
   14718:	add	r7, r7, #1
   1471c:	cmp	r8, #0
   14720:	bne	14664 <__assert_fail@plt+0x3720>
   14724:	cmp	r6, #0
   14728:	bne	14778 <__assert_fail@plt+0x3834>
   1472c:	eor	r6, r1, #1
   14730:	and	r6, r6, ip
   14734:	add	sl, sl, #1
   14738:	cmp	r2, sl
   1473c:	uxtb	r6, r6
   14740:	bls	147a0 <__assert_fail@plt+0x385c>
   14744:	cmp	r6, #0
   14748:	beq	1470c <__assert_fail@plt+0x37c8>
   1474c:	cmp	fp, r7
   14750:	movhi	ip, #39	; 0x27
   14754:	strbhi	ip, [r3, r7]
   14758:	add	ip, r7, #1
   1475c:	cmp	fp, ip
   14760:	movhi	lr, #39	; 0x27
   14764:	strbhi	lr, [r3, ip]
   14768:	add	r7, r7, #2
   1476c:	mov	r6, r8
   14770:	mov	ip, r8
   14774:	b	1470c <__assert_fail@plt+0x37c8>
   14778:	cmp	fp, r7
   1477c:	eor	r6, r1, #1
   14780:	movhi	lr, #92	; 0x5c
   14784:	and	r6, r6, ip
   14788:	add	sl, sl, #1
   1478c:	strbhi	lr, [r3, r7]
   14790:	cmp	r2, sl
   14794:	add	r7, r7, #1
   14798:	uxtb	r6, r6
   1479c:	bhi	14744 <__assert_fail@plt+0x3800>
   147a0:	str	ip, [sp, #40]	; 0x28
   147a4:	ldr	r5, [sp, #48]	; 0x30
   147a8:	b	13e70 <__assert_fail@plt+0x2f2c>
   147ac:	ldr	r3, [sp, #24]
   147b0:	cmn	r3, #1
   147b4:	mov	r3, #0
   147b8:	str	r3, [sp, #104]	; 0x68
   147bc:	str	r3, [sp, #108]	; 0x6c
   147c0:	beq	14ae0 <__assert_fail@plt+0x3b9c>
   147c4:	mov	r2, r5
   147c8:	mov	r3, #0
   147cc:	str	r7, [sp, #88]	; 0x58
   147d0:	ldr	r7, [sp, #152]	; 0x98
   147d4:	str	r5, [sp, #92]	; 0x5c
   147d8:	str	r6, [sp, #84]	; 0x54
   147dc:	mov	r5, r3
   147e0:	mov	r6, r2
   147e4:	str	r4, [sp, #80]	; 0x50
   147e8:	ldr	r3, [sp, #56]	; 0x38
   147ec:	add	r9, sl, r5
   147f0:	add	r8, r3, r9
   147f4:	ldr	r3, [sp, #24]
   147f8:	mov	r1, r8
   147fc:	sub	r2, r3, r9
   14800:	add	r0, sp, #100	; 0x64
   14804:	add	r3, sp, #104	; 0x68
   14808:	bl	169f8 <__assert_fail@plt+0x5ab4>
   1480c:	subs	r4, r0, #0
   14810:	beq	14bb8 <__assert_fail@plt+0x3c74>
   14814:	cmn	r4, #1
   14818:	beq	14b98 <__assert_fail@plt+0x3c54>
   1481c:	cmn	r4, #2
   14820:	beq	14b38 <__assert_fail@plt+0x3bf4>
   14824:	ldr	r2, [sp, #28]
   14828:	cmp	r7, #2
   1482c:	movne	r2, #0
   14830:	andeq	r2, r2, #1
   14834:	cmp	r2, #0
   14838:	beq	145e8 <__assert_fail@plt+0x36a4>
   1483c:	cmp	r4, #1
   14840:	beq	145e8 <__assert_fail@plt+0x36a4>
   14844:	sub	r3, r4, #1
   14848:	add	r9, r3, r9
   1484c:	ldr	r3, [sp, #56]	; 0x38
   14850:	add	r9, r3, r9
   14854:	ldrb	r3, [r8, #1]!
   14858:	sub	r3, r3, #91	; 0x5b
   1485c:	cmp	r3, #33	; 0x21
   14860:	ldrls	pc, [pc, r3, lsl #2]
   14864:	b	145e0 <__assert_fail@plt+0x369c>
   14868:	strdeq	r4, [r1], -r0
   1486c:	strdeq	r4, [r1], -r0
   14870:	andeq	r4, r1, r0, ror #11
   14874:	strdeq	r4, [r1], -r0
   14878:	andeq	r4, r1, r0, ror #11
   1487c:	strdeq	r4, [r1], -r0
   14880:	andeq	r4, r1, r0, ror #11
   14884:	andeq	r4, r1, r0, ror #11
   14888:	andeq	r4, r1, r0, ror #11
   1488c:	andeq	r4, r1, r0, ror #11
   14890:	andeq	r4, r1, r0, ror #11
   14894:	andeq	r4, r1, r0, ror #11
   14898:	andeq	r4, r1, r0, ror #11
   1489c:	andeq	r4, r1, r0, ror #11
   148a0:	andeq	r4, r1, r0, ror #11
   148a4:	andeq	r4, r1, r0, ror #11
   148a8:	andeq	r4, r1, r0, ror #11
   148ac:	andeq	r4, r1, r0, ror #11
   148b0:	andeq	r4, r1, r0, ror #11
   148b4:	andeq	r4, r1, r0, ror #11
   148b8:	andeq	r4, r1, r0, ror #11
   148bc:	andeq	r4, r1, r0, ror #11
   148c0:	andeq	r4, r1, r0, ror #11
   148c4:	andeq	r4, r1, r0, ror #11
   148c8:	andeq	r4, r1, r0, ror #11
   148cc:	andeq	r4, r1, r0, ror #11
   148d0:	andeq	r4, r1, r0, ror #11
   148d4:	andeq	r4, r1, r0, ror #11
   148d8:	andeq	r4, r1, r0, ror #11
   148dc:	andeq	r4, r1, r0, ror #11
   148e0:	andeq	r4, r1, r0, ror #11
   148e4:	andeq	r4, r1, r0, ror #11
   148e8:	andeq	r4, r1, r0, ror #11
   148ec:	strdeq	r4, [r1], -r0
   148f0:	mov	r3, #2
   148f4:	ldr	sl, [sp, #32]
   148f8:	mov	r8, fp
   148fc:	str	r3, [sp, #152]	; 0x98
   14900:	b	14078 <__assert_fail@plt+0x3134>
   14904:	ldr	r3, [sp, #156]	; 0x9c
   14908:	tst	r3, #1
   1490c:	bne	14a38 <__assert_fail@plt+0x3af4>
   14910:	ldr	r3, [sp, #152]	; 0x98
   14914:	ldr	r4, [sp, #44]	; 0x2c
   14918:	sub	r2, r3, #2
   1491c:	mov	r5, #0
   14920:	clz	r2, r2
   14924:	mov	r8, r4
   14928:	lsr	r2, r2, #5
   1492c:	b	13e38 <__assert_fail@plt+0x2ef4>
   14930:	ldr	r3, [sp, #156]	; 0x9c
   14934:	ands	r9, r3, #4
   14938:	beq	14a70 <__assert_fail@plt+0x3b2c>
   1493c:	ldr	r2, [sp, #24]
   14940:	add	r3, sl, #2
   14944:	cmp	r3, r2
   14948:	bcs	1495c <__assert_fail@plt+0x3a18>
   1494c:	ldr	r2, [sp, #48]	; 0x30
   14950:	ldrb	r4, [r2, #1]
   14954:	cmp	r4, #63	; 0x3f
   14958:	beq	14bf8 <__assert_fail@plt+0x3cb4>
   1495c:	mov	r2, #0
   14960:	mov	r8, r2
   14964:	mov	r5, r2
   14968:	mov	r4, #63	; 0x3f
   1496c:	b	13e38 <__assert_fail@plt+0x2ef4>
   14970:	ldr	r3, [sp, #28]
   14974:	cmp	r3, #0
   14978:	bne	14c9c <__assert_fail@plt+0x3d58>
   1497c:	mov	r2, r5
   14980:	mov	r8, r3
   14984:	mov	r5, #0
   14988:	mov	r4, #63	; 0x3f
   1498c:	b	13e38 <__assert_fail@plt+0x2ef4>
   14990:	ldr	r3, [sp, #28]
   14994:	cmp	r3, #0
   14998:	bne	14c9c <__assert_fail@plt+0x3d58>
   1499c:	ldr	r2, [sp, #72]	; 0x48
   149a0:	adds	r3, fp, #0
   149a4:	movne	r3, #1
   149a8:	cmp	r2, #0
   149ac:	movne	r3, #0
   149b0:	cmp	r3, #0
   149b4:	strne	fp, [sp, #72]	; 0x48
   149b8:	movne	fp, #0
   149bc:	bne	149f8 <__assert_fail@plt+0x3ab4>
   149c0:	cmp	fp, r7
   149c4:	movhi	r2, #39	; 0x27
   149c8:	ldrhi	r3, [sp, #32]
   149cc:	strbhi	r2, [r3, r7]
   149d0:	add	r3, r7, #1
   149d4:	cmp	fp, r3
   149d8:	movhi	r1, #92	; 0x5c
   149dc:	ldrhi	r2, [sp, #32]
   149e0:	strbhi	r1, [r2, r3]
   149e4:	add	r3, r7, #2
   149e8:	cmp	fp, r3
   149ec:	movhi	r1, #39	; 0x27
   149f0:	ldrhi	r2, [sp, #32]
   149f4:	strbhi	r1, [r2, r3]
   149f8:	ldr	r3, [sp, #28]
   149fc:	add	r7, r7, #3
   14a00:	mov	r2, r5
   14a04:	mov	r8, r3
   14a08:	str	r5, [sp, #68]	; 0x44
   14a0c:	str	r3, [sp, #40]	; 0x28
   14a10:	mov	r4, #39	; 0x27
   14a14:	b	13e38 <__assert_fail@plt+0x2ef4>
   14a18:	ldr	r3, [sp, #56]	; 0x38
   14a1c:	ldrb	r3, [r3, #1]
   14a20:	adds	r3, r3, #0
   14a24:	movne	r3, #1
   14a28:	b	13e10 <__assert_fail@plt+0x2ecc>
   14a2c:	ldr	r5, [sp, #28]
   14a30:	mov	r4, #48	; 0x30
   14a34:	b	13e38 <__assert_fail@plt+0x2ef4>
   14a38:	add	sl, sl, #1
   14a3c:	b	13968 <__assert_fail@plt+0x2a24>
   14a40:	mov	sl, r3
   14a44:	ldr	r3, [sp, #28]
   14a48:	mov	r8, fp
   14a4c:	str	r3, [sp, #44]	; 0x2c
   14a50:	ldr	r3, [sp, #152]	; 0x98
   14a54:	sub	r2, r3, #2
   14a58:	clz	r2, r2
   14a5c:	lsr	r2, r2, #5
   14a60:	b	14078 <__assert_fail@plt+0x3134>
   14a64:	str	ip, [sp, #40]	; 0x28
   14a68:	ldr	r5, [sp, #48]	; 0x30
   14a6c:	b	13ea8 <__assert_fail@plt+0x2f64>
   14a70:	mov	r2, r9
   14a74:	mov	r8, r9
   14a78:	mov	r5, #0
   14a7c:	mov	r4, #63	; 0x3f
   14a80:	b	13e38 <__assert_fail@plt+0x2ef4>
   14a84:	cmp	fp, #0
   14a88:	beq	14b00 <__assert_fail@plt+0x3bbc>
   14a8c:	ldr	r1, [sp, #32]
   14a90:	mov	r3, #34	; 0x22
   14a94:	mov	r2, #1
   14a98:	strb	r3, [r1]
   14a9c:	ldr	r3, [pc, #332]	; 14bf0 <__assert_fail@plt+0x3cac>
   14aa0:	str	r2, [sp, #52]	; 0x34
   14aa4:	mov	r7, r2
   14aa8:	str	r2, [sp, #44]	; 0x2c
   14aac:	str	r3, [sp, #64]	; 0x40
   14ab0:	b	13958 <__assert_fail@plt+0x2a14>
   14ab4:	ldr	r3, [pc, #300]	; 14be8 <__assert_fail@plt+0x3ca4>
   14ab8:	str	r3, [sp, #64]	; 0x40
   14abc:	mov	r3, #0
   14ac0:	str	r3, [sp, #28]
   14ac4:	mov	r3, #1
   14ac8:	str	r3, [sp, #52]	; 0x34
   14acc:	mov	r7, r3
   14ad0:	mov	r3, #2
   14ad4:	str	r3, [sp, #152]	; 0x98
   14ad8:	b	13958 <__assert_fail@plt+0x2a14>
   14adc:	bl	10f2c <abort@plt>
   14ae0:	ldr	r0, [sp, #56]	; 0x38
   14ae4:	bl	10e6c <strlen@plt>
   14ae8:	str	r0, [sp, #24]
   14aec:	b	147c4 <__assert_fail@plt+0x3880>
   14af0:	mov	r5, r8
   14af4:	mov	r4, #48	; 0x30
   14af8:	ldr	r8, [sp, #44]	; 0x2c
   14afc:	b	13e38 <__assert_fail@plt+0x2ef4>
   14b00:	mov	r3, #1
   14b04:	str	r3, [sp, #52]	; 0x34
   14b08:	mov	r7, r3
   14b0c:	str	r3, [sp, #44]	; 0x2c
   14b10:	ldr	r3, [pc, #216]	; 14bf0 <__assert_fail@plt+0x3cac>
   14b14:	str	r3, [sp, #64]	; 0x40
   14b18:	b	13958 <__assert_fail@plt+0x2a14>
   14b1c:	ldr	sl, [sp, #32]
   14b20:	mov	r8, fp
   14b24:	mov	r2, r3
   14b28:	b	14078 <__assert_fail@plt+0x3134>
   14b2c:	mov	r3, r5
   14b30:	mov	r5, r2
   14b34:	b	14330 <__assert_fail@plt+0x33ec>
   14b38:	ldr	r1, [sp, #24]
   14b3c:	mov	r2, r5
   14b40:	cmp	r1, r9
   14b44:	mov	ip, r5
   14b48:	ldr	r4, [sp, #80]	; 0x50
   14b4c:	ldr	r5, [sp, #92]	; 0x5c
   14b50:	ldr	r6, [sp, #84]	; 0x54
   14b54:	ldr	r7, [sp, #88]	; 0x58
   14b58:	bls	14b8c <__assert_fail@plt+0x3c48>
   14b5c:	ldrb	r3, [r8]
   14b60:	cmp	r3, #0
   14b64:	bne	14b78 <__assert_fail@plt+0x3c34>
   14b68:	b	14b90 <__assert_fail@plt+0x3c4c>
   14b6c:	ldrb	r3, [r8, #1]!
   14b70:	cmp	r3, #0
   14b74:	beq	14c90 <__assert_fail@plt+0x3d4c>
   14b78:	add	r2, r2, #1
   14b7c:	add	r3, sl, r2
   14b80:	cmp	r1, r3
   14b84:	bhi	14b6c <__assert_fail@plt+0x3c28>
   14b88:	mov	ip, r2
   14b8c:	mov	r3, #0
   14b90:	mov	r2, r3
   14b94:	b	14628 <__assert_fail@plt+0x36e4>
   14b98:	mov	r3, #0
   14b9c:	mov	ip, r5
   14ba0:	ldr	r4, [sp, #80]	; 0x50
   14ba4:	ldr	r5, [sp, #92]	; 0x5c
   14ba8:	ldr	r6, [sp, #84]	; 0x54
   14bac:	ldr	r7, [sp, #88]	; 0x58
   14bb0:	mov	r2, r3
   14bb4:	b	14628 <__assert_fail@plt+0x36e4>
   14bb8:	mov	r3, r6
   14bbc:	mov	ip, r5
   14bc0:	eor	r5, r3, #1
   14bc4:	mov	r2, r6
   14bc8:	ldr	r4, [sp, #80]	; 0x50
   14bcc:	ldr	r6, [sp, #84]	; 0x54
   14bd0:	ldr	r7, [sp, #88]	; 0x58
   14bd4:	uxtb	r5, r5
   14bd8:	b	14628 <__assert_fail@plt+0x36e4>
   14bdc:	ldr	sl, [sp, #32]
   14be0:	mov	r8, fp
   14be4:	b	14a4c <__assert_fail@plt+0x3b08>
   14be8:	andeq	r8, r1, r4, lsr #12
   14bec:	andeq	r8, r1, r8, lsr #12
   14bf0:	andeq	r8, r1, r0, lsr #12
   14bf4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14bf8:	ldr	r2, [sp, #56]	; 0x38
   14bfc:	ldrb	r1, [r2, r3]
   14c00:	sub	r2, r1, #33	; 0x21
   14c04:	uxtb	r2, r2
   14c08:	cmp	r2, #29
   14c0c:	bhi	14cac <__assert_fail@plt+0x3d68>
   14c10:	ldr	r0, [pc, #-36]	; 14bf4 <__assert_fail@plt+0x3cb0>
   14c14:	mov	ip, #1
   14c18:	ands	r2, r0, ip, lsl r2
   14c1c:	beq	14cbc <__assert_fail@plt+0x3d78>
   14c20:	ldr	r2, [sp, #28]
   14c24:	cmp	r2, #0
   14c28:	bne	14dbc <__assert_fail@plt+0x3e78>
   14c2c:	cmp	fp, r7
   14c30:	ldr	r8, [sp, #28]
   14c34:	ldrhi	r2, [sp, #32]
   14c38:	mov	sl, r3
   14c3c:	mov	r5, r8
   14c40:	strbhi	r4, [r2, r7]
   14c44:	add	r2, r7, #1
   14c48:	cmp	fp, r2
   14c4c:	movhi	r0, #34	; 0x22
   14c50:	ldrhi	ip, [sp, #32]
   14c54:	mov	r4, r1
   14c58:	strbhi	r0, [ip, r2]
   14c5c:	add	r2, r7, #2
   14c60:	cmp	fp, r2
   14c64:	movhi	r0, #34	; 0x22
   14c68:	ldrhi	ip, [sp, #32]
   14c6c:	strbhi	r0, [ip, r2]
   14c70:	add	r2, r7, #3
   14c74:	cmp	fp, r2
   14c78:	movhi	r0, #63	; 0x3f
   14c7c:	ldrhi	ip, [sp, #32]
   14c80:	add	r7, r7, #4
   14c84:	strbhi	r0, [ip, r2]
   14c88:	mov	r2, r8
   14c8c:	b	13e38 <__assert_fail@plt+0x2ef4>
   14c90:	mov	ip, r2
   14c94:	mov	r2, r3
   14c98:	b	14628 <__assert_fail@plt+0x36e4>
   14c9c:	ldr	sl, [sp, #32]
   14ca0:	mov	r8, fp
   14ca4:	ldr	r2, [sp, #28]
   14ca8:	b	14078 <__assert_fail@plt+0x3134>
   14cac:	mov	r2, #0
   14cb0:	mov	r8, r2
   14cb4:	mov	r5, r2
   14cb8:	b	13e38 <__assert_fail@plt+0x2ef4>
   14cbc:	mov	r8, r2
   14cc0:	mov	r5, #0
   14cc4:	b	13e38 <__assert_fail@plt+0x2ef4>
   14cc8:	ldr	r1, [sp, #152]	; 0x98
   14ccc:	bl	13794 <__assert_fail@plt+0x2850>
   14cd0:	str	r0, [sp, #168]	; 0xa8
   14cd4:	b	13cf4 <__assert_fail@plt+0x2db0>
   14cd8:	ldr	r1, [sp, #152]	; 0x98
   14cdc:	bl	13794 <__assert_fail@plt+0x2850>
   14ce0:	str	r0, [sp, #164]	; 0xa4
   14ce4:	b	13cd4 <__assert_fail@plt+0x2d90>
   14ce8:	ldr	r7, [sp, #28]
   14cec:	b	13d34 <__assert_fail@plt+0x2df0>
   14cf0:	ldr	sl, [sp, #32]
   14cf4:	ldr	r2, [sp, #68]	; 0x44
   14cf8:	mov	r8, fp
   14cfc:	mov	fp, r7
   14d00:	ldr	r3, [sp, #64]	; 0x40
   14d04:	cmp	r3, #0
   14d08:	moveq	r2, #0
   14d0c:	andne	r2, r2, #1
   14d10:	cmp	r2, #0
   14d14:	beq	14d40 <__assert_fail@plt+0x3dfc>
   14d18:	mov	r2, r3
   14d1c:	ldrb	r3, [r3]
   14d20:	cmp	r3, #0
   14d24:	beq	14d40 <__assert_fail@plt+0x3dfc>
   14d28:	cmp	r8, fp
   14d2c:	strbhi	r3, [sl, fp]
   14d30:	ldrb	r3, [r2, #1]!
   14d34:	add	fp, fp, #1
   14d38:	cmp	r3, #0
   14d3c:	bne	14d28 <__assert_fail@plt+0x3de4>
   14d40:	cmp	r8, fp
   14d44:	movhi	r3, #0
   14d48:	strbhi	r3, [sl, fp]
   14d4c:	b	140d4 <__assert_fail@plt+0x3190>
   14d50:	ldr	r3, [sp, #168]	; 0xa8
   14d54:	ldr	sl, [sp, #32]
   14d58:	str	r3, [sp, #16]
   14d5c:	ldr	r3, [sp, #164]	; 0xa4
   14d60:	mov	ip, #5
   14d64:	str	r3, [sp, #12]
   14d68:	ldr	r3, [sp, #160]	; 0xa0
   14d6c:	ldr	r2, [sp, #56]	; 0x38
   14d70:	str	r3, [sp, #8]
   14d74:	ldr	r3, [sp, #156]	; 0x9c
   14d78:	ldr	r1, [sp, #72]	; 0x48
   14d7c:	str	r3, [sp, #4]
   14d80:	mov	r0, sl
   14d84:	ldr	r3, [sp, #24]
   14d88:	str	ip, [sp]
   14d8c:	bl	138b4 <__assert_fail@plt+0x2970>
   14d90:	mov	fp, r0
   14d94:	b	140d4 <__assert_fail@plt+0x3190>
   14d98:	mov	r8, fp
   14d9c:	ldr	sl, [sp, #32]
   14da0:	mov	fp, r7
   14da4:	mov	r2, r3
   14da8:	b	14d00 <__assert_fail@plt+0x3dbc>
   14dac:	mov	r8, fp
   14db0:	ldr	sl, [sp, #32]
   14db4:	mov	fp, r7
   14db8:	b	14d00 <__assert_fail@plt+0x3dbc>
   14dbc:	ldr	sl, [sp, #32]
   14dc0:	mov	r8, fp
   14dc4:	b	14090 <__assert_fail@plt+0x314c>
   14dc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dcc:	sub	sp, sp, #52	; 0x34
   14dd0:	mov	r4, r0
   14dd4:	mov	r5, r3
   14dd8:	mov	sl, r1
   14ddc:	mov	fp, r2
   14de0:	bl	10e84 <__errno_location@plt>
   14de4:	ldr	r7, [pc, #412]	; 14f88 <__assert_fail@plt+0x4044>
   14de8:	cmn	r4, #-2147483647	; 0x80000001
   14dec:	ldr	r6, [r7]
   14df0:	mov	r8, r0
   14df4:	movne	r0, #0
   14df8:	moveq	r0, #1
   14dfc:	ldr	r3, [r8]
   14e00:	orrs	r0, r0, r4, lsr #31
   14e04:	str	r3, [sp, #24]
   14e08:	bne	14f84 <__assert_fail@plt+0x4040>
   14e0c:	ldr	r2, [r7, #4]
   14e10:	cmp	r4, r2
   14e14:	blt	14e74 <__assert_fail@plt+0x3f30>
   14e18:	add	r9, r7, #8
   14e1c:	cmp	r6, r9
   14e20:	str	r2, [sp, #44]	; 0x2c
   14e24:	beq	14f54 <__assert_fail@plt+0x4010>
   14e28:	mov	r3, #8
   14e2c:	sub	r2, r4, r2
   14e30:	mov	r0, r6
   14e34:	str	r3, [sp]
   14e38:	add	r2, r2, #1
   14e3c:	mvn	r3, #-2147483648	; 0x80000000
   14e40:	add	r1, sp, #44	; 0x2c
   14e44:	bl	15c9c <__assert_fail@plt+0x4d58>
   14e48:	mov	r6, r0
   14e4c:	str	r0, [r7]
   14e50:	ldr	r0, [r7, #4]
   14e54:	ldr	r2, [sp, #44]	; 0x2c
   14e58:	mov	r1, #0
   14e5c:	sub	r2, r2, r0
   14e60:	add	r0, r6, r0, lsl #3
   14e64:	lsl	r2, r2, #3
   14e68:	bl	10ea8 <memset@plt>
   14e6c:	ldr	r3, [sp, #44]	; 0x2c
   14e70:	str	r3, [r7, #4]
   14e74:	add	r3, r6, r4, lsl #3
   14e78:	ldr	r1, [r5, #4]
   14e7c:	ldr	r7, [r3, #4]
   14e80:	ldr	r9, [r6, r4, lsl #3]
   14e84:	ldr	r2, [r5, #40]	; 0x28
   14e88:	ldr	ip, [r5, #44]	; 0x2c
   14e8c:	add	r0, r5, #8
   14e90:	str	r3, [sp, #28]
   14e94:	ldr	r3, [r5]
   14e98:	orr	r1, r1, #1
   14e9c:	mov	lr, r0
   14ea0:	str	r1, [sp, #32]
   14ea4:	str	r0, [sp, #36]	; 0x24
   14ea8:	str	r1, [sp, #4]
   14eac:	str	r2, [sp, #12]
   14eb0:	str	r3, [sp]
   14eb4:	mov	r0, r7
   14eb8:	mov	r1, r9
   14ebc:	str	ip, [sp, #16]
   14ec0:	str	lr, [sp, #8]
   14ec4:	mov	r3, fp
   14ec8:	mov	r2, sl
   14ecc:	bl	138b4 <__assert_fail@plt+0x2970>
   14ed0:	cmp	r9, r0
   14ed4:	bhi	14f40 <__assert_fail@plt+0x3ffc>
   14ed8:	ldr	r3, [pc, #172]	; 14f8c <__assert_fail@plt+0x4048>
   14edc:	add	r9, r0, #1
   14ee0:	cmp	r7, r3
   14ee4:	str	r9, [r6, r4, lsl #3]
   14ee8:	beq	14ef4 <__assert_fail@plt+0x3fb0>
   14eec:	mov	r0, r7
   14ef0:	bl	13658 <__assert_fail@plt+0x2714>
   14ef4:	mov	r0, r9
   14ef8:	bl	15b38 <__assert_fail@plt+0x4bf4>
   14efc:	ldr	lr, [sp, #28]
   14f00:	ldr	ip, [r5, #44]	; 0x2c
   14f04:	ldr	r4, [r5, #40]	; 0x28
   14f08:	mov	r3, fp
   14f0c:	mov	r2, sl
   14f10:	mov	r1, r9
   14f14:	str	r0, [lr, #4]
   14f18:	ldr	lr, [r5]
   14f1c:	ldr	r5, [sp, #36]	; 0x24
   14f20:	str	ip, [sp, #16]
   14f24:	str	r5, [sp, #8]
   14f28:	ldr	r5, [sp, #32]
   14f2c:	str	r4, [sp, #12]
   14f30:	str	r5, [sp, #4]
   14f34:	str	lr, [sp]
   14f38:	mov	r7, r0
   14f3c:	bl	138b4 <__assert_fail@plt+0x2970>
   14f40:	ldr	r3, [sp, #24]
   14f44:	mov	r0, r7
   14f48:	str	r3, [r8]
   14f4c:	add	sp, sp, #52	; 0x34
   14f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f54:	mov	r3, #8
   14f58:	sub	r2, r4, r2
   14f5c:	str	r3, [sp]
   14f60:	add	r1, sp, #44	; 0x2c
   14f64:	add	r2, r2, #1
   14f68:	mvn	r3, #-2147483648	; 0x80000000
   14f6c:	bl	15c9c <__assert_fail@plt+0x4d58>
   14f70:	mov	r6, r0
   14f74:	ldm	r9, {r0, r1}
   14f78:	str	r6, [r7]
   14f7c:	stm	r6, {r0, r1}
   14f80:	b	14e50 <__assert_fail@plt+0x3f0c>
   14f84:	bl	10f2c <abort@plt>
   14f88:	strdeq	r9, [r2], -r8
   14f8c:	andeq	fp, r2, r0, ror r4
   14f90:	push	{r4, r5, r6, lr}
   14f94:	mov	r5, r0
   14f98:	bl	10e84 <__errno_location@plt>
   14f9c:	cmp	r5, #0
   14fa0:	mov	r1, #48	; 0x30
   14fa4:	mov	r4, r0
   14fa8:	ldr	r0, [pc, #16]	; 14fc0 <__assert_fail@plt+0x407c>
   14fac:	ldr	r6, [r4]
   14fb0:	movne	r0, r5
   14fb4:	bl	15f98 <__assert_fail@plt+0x5054>
   14fb8:	str	r6, [r4]
   14fbc:	pop	{r4, r5, r6, pc}
   14fc0:	andeq	fp, r2, r0, ror r5
   14fc4:	ldr	r3, [pc, #12]	; 14fd8 <__assert_fail@plt+0x4094>
   14fc8:	cmp	r0, #0
   14fcc:	moveq	r0, r3
   14fd0:	ldr	r0, [r0]
   14fd4:	bx	lr
   14fd8:	andeq	fp, r2, r0, ror r5
   14fdc:	ldr	r3, [pc, #12]	; 14ff0 <__assert_fail@plt+0x40ac>
   14fe0:	cmp	r0, #0
   14fe4:	moveq	r0, r3
   14fe8:	str	r1, [r0]
   14fec:	bx	lr
   14ff0:	andeq	fp, r2, r0, ror r5
   14ff4:	ldr	r3, [pc, #52]	; 15030 <__assert_fail@plt+0x40ec>
   14ff8:	cmp	r0, #0
   14ffc:	moveq	r0, r3
   15000:	add	r3, r0, #8
   15004:	push	{lr}		; (str lr, [sp, #-4]!)
   15008:	lsr	lr, r1, #5
   1500c:	and	r1, r1, #31
   15010:	ldr	ip, [r3, lr, lsl #2]
   15014:	lsr	r0, ip, r1
   15018:	eor	r2, r2, r0
   1501c:	and	r2, r2, #1
   15020:	and	r0, r0, #1
   15024:	eor	r1, ip, r2, lsl r1
   15028:	str	r1, [r3, lr, lsl #2]
   1502c:	pop	{pc}		; (ldr pc, [sp], #4)
   15030:	andeq	fp, r2, r0, ror r5
   15034:	ldr	r3, [pc, #16]	; 1504c <__assert_fail@plt+0x4108>
   15038:	cmp	r0, #0
   1503c:	movne	r3, r0
   15040:	ldr	r0, [r3, #4]
   15044:	str	r1, [r3, #4]
   15048:	bx	lr
   1504c:	andeq	fp, r2, r0, ror r5
   15050:	ldr	r3, [pc, #44]	; 15084 <__assert_fail@plt+0x4140>
   15054:	cmp	r0, #0
   15058:	moveq	r0, r3
   1505c:	mov	ip, #10
   15060:	cmp	r2, #0
   15064:	cmpne	r1, #0
   15068:	str	ip, [r0]
   1506c:	beq	1507c <__assert_fail@plt+0x4138>
   15070:	str	r1, [r0, #40]	; 0x28
   15074:	str	r2, [r0, #44]	; 0x2c
   15078:	bx	lr
   1507c:	push	{r4, lr}
   15080:	bl	10f2c <abort@plt>
   15084:	andeq	fp, r2, r0, ror r5
   15088:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1508c:	sub	sp, sp, #24
   15090:	ldr	ip, [pc, #108]	; 15104 <__assert_fail@plt+0x41c0>
   15094:	ldr	r4, [sp, #56]	; 0x38
   15098:	mov	r9, r2
   1509c:	cmp	r4, #0
   150a0:	moveq	r4, ip
   150a4:	mov	sl, r3
   150a8:	mov	r7, r0
   150ac:	mov	r8, r1
   150b0:	bl	10e84 <__errno_location@plt>
   150b4:	ldr	r3, [r4, #44]	; 0x2c
   150b8:	mov	r1, r8
   150bc:	ldr	r6, [r0]
   150c0:	str	r3, [sp, #16]
   150c4:	ldr	r2, [r4, #40]	; 0x28
   150c8:	add	r3, r4, #8
   150cc:	str	r3, [sp, #8]
   150d0:	str	r2, [sp, #12]
   150d4:	ldr	r2, [r4, #4]
   150d8:	mov	r5, r0
   150dc:	str	r2, [sp, #4]
   150e0:	ldr	ip, [r4]
   150e4:	mov	r3, sl
   150e8:	mov	r2, r9
   150ec:	mov	r0, r7
   150f0:	str	ip, [sp]
   150f4:	bl	138b4 <__assert_fail@plt+0x2970>
   150f8:	str	r6, [r5]
   150fc:	add	sp, sp, #24
   15100:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15104:	andeq	fp, r2, r0, ror r5
   15108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1510c:	cmp	r3, #0
   15110:	sub	sp, sp, #44	; 0x2c
   15114:	ldr	r4, [pc, #192]	; 151dc <__assert_fail@plt+0x4298>
   15118:	mov	r6, r2
   1511c:	movne	r4, r3
   15120:	mov	r9, r1
   15124:	mov	r8, r0
   15128:	bl	10e84 <__errno_location@plt>
   1512c:	ldr	r3, [r4, #44]	; 0x2c
   15130:	ldr	r5, [r4, #4]
   15134:	add	sl, r4, #8
   15138:	cmp	r6, #0
   1513c:	orreq	r5, r5, #1
   15140:	mov	r1, #0
   15144:	ldr	r2, [r0]
   15148:	str	r3, [sp, #16]
   1514c:	ldr	r3, [r4, #40]	; 0x28
   15150:	stmib	sp, {r5, sl}
   15154:	str	r3, [sp, #12]
   15158:	ldr	r3, [r4]
   1515c:	mov	r7, r0
   15160:	str	r2, [sp, #28]
   15164:	str	r3, [sp]
   15168:	mov	r2, r8
   1516c:	mov	r3, r9
   15170:	mov	r0, r1
   15174:	bl	138b4 <__assert_fail@plt+0x2970>
   15178:	add	r1, r0, #1
   1517c:	mov	fp, r0
   15180:	mov	r0, r1
   15184:	str	r1, [sp, #36]	; 0x24
   15188:	bl	15b38 <__assert_fail@plt+0x4bf4>
   1518c:	ldr	r3, [r4, #44]	; 0x2c
   15190:	mov	r2, r8
   15194:	str	r3, [sp, #16]
   15198:	ldr	r3, [r4, #40]	; 0x28
   1519c:	str	r5, [sp, #4]
   151a0:	str	r3, [sp, #12]
   151a4:	str	sl, [sp, #8]
   151a8:	ldr	ip, [r4]
   151ac:	ldr	r1, [sp, #36]	; 0x24
   151b0:	mov	r3, r9
   151b4:	str	ip, [sp]
   151b8:	str	r0, [sp, #32]
   151bc:	bl	138b4 <__assert_fail@plt+0x2970>
   151c0:	ldr	r2, [sp, #28]
   151c4:	cmp	r6, #0
   151c8:	str	r2, [r7]
   151cc:	ldr	r0, [sp, #32]
   151d0:	strne	fp, [r6]
   151d4:	add	sp, sp, #44	; 0x2c
   151d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151dc:	andeq	fp, r2, r0, ror r5
   151e0:	mov	r3, r2
   151e4:	mov	r2, #0
   151e8:	b	15108 <__assert_fail@plt+0x41c4>
   151ec:	push	{r4, r5, r6, r7, r8, lr}
   151f0:	ldr	r6, [pc, #116]	; 1526c <__assert_fail@plt+0x4328>
   151f4:	ldr	r3, [r6, #4]
   151f8:	ldr	r7, [r6]
   151fc:	cmp	r3, #1
   15200:	movgt	r5, r7
   15204:	movgt	r4, #1
   15208:	ble	15228 <__assert_fail@plt+0x42e4>
   1520c:	ldr	r0, [r5, #12]
   15210:	bl	13658 <__assert_fail@plt+0x2714>
   15214:	ldr	r3, [r6, #4]
   15218:	add	r4, r4, #1
   1521c:	cmp	r3, r4
   15220:	add	r5, r5, #8
   15224:	bgt	1520c <__assert_fail@plt+0x42c8>
   15228:	ldr	r0, [r7, #4]
   1522c:	ldr	r4, [pc, #60]	; 15270 <__assert_fail@plt+0x432c>
   15230:	cmp	r0, r4
   15234:	beq	15248 <__assert_fail@plt+0x4304>
   15238:	bl	13658 <__assert_fail@plt+0x2714>
   1523c:	mov	r3, #256	; 0x100
   15240:	str	r4, [r6, #12]
   15244:	str	r3, [r6, #8]
   15248:	ldr	r4, [pc, #36]	; 15274 <__assert_fail@plt+0x4330>
   1524c:	cmp	r7, r4
   15250:	beq	15260 <__assert_fail@plt+0x431c>
   15254:	mov	r0, r7
   15258:	bl	13658 <__assert_fail@plt+0x2714>
   1525c:	str	r4, [r6]
   15260:	mov	r3, #1
   15264:	str	r3, [r6, #4]
   15268:	pop	{r4, r5, r6, r7, r8, pc}
   1526c:	strdeq	r9, [r2], -r8
   15270:	andeq	fp, r2, r0, ror r4
   15274:	andeq	r9, r2, r0, lsl #2
   15278:	ldr	r3, [pc, #4]	; 15284 <__assert_fail@plt+0x4340>
   1527c:	mvn	r2, #0
   15280:	b	14dc8 <__assert_fail@plt+0x3e84>
   15284:	andeq	fp, r2, r0, ror r5
   15288:	ldr	r3, [pc]	; 15290 <__assert_fail@plt+0x434c>
   1528c:	b	14dc8 <__assert_fail@plt+0x3e84>
   15290:	andeq	fp, r2, r0, ror r5
   15294:	mov	r1, r0
   15298:	ldr	r3, [pc, #8]	; 152a8 <__assert_fail@plt+0x4364>
   1529c:	mvn	r2, #0
   152a0:	mov	r0, #0
   152a4:	b	14dc8 <__assert_fail@plt+0x3e84>
   152a8:	andeq	fp, r2, r0, ror r5
   152ac:	mov	r2, r1
   152b0:	ldr	r3, [pc, #8]	; 152c0 <__assert_fail@plt+0x437c>
   152b4:	mov	r1, r0
   152b8:	mov	r0, #0
   152bc:	b	14dc8 <__assert_fail@plt+0x3e84>
   152c0:	andeq	fp, r2, r0, ror r5
   152c4:	push	{r4, r5, lr}
   152c8:	sub	sp, sp, #52	; 0x34
   152cc:	mov	r5, r2
   152d0:	mov	r4, r0
   152d4:	mov	r0, sp
   152d8:	bl	13764 <__assert_fail@plt+0x2820>
   152dc:	mov	r3, sp
   152e0:	mov	r1, r5
   152e4:	mov	r0, r4
   152e8:	mvn	r2, #0
   152ec:	bl	14dc8 <__assert_fail@plt+0x3e84>
   152f0:	add	sp, sp, #52	; 0x34
   152f4:	pop	{r4, r5, pc}
   152f8:	push	{r4, r5, r6, lr}
   152fc:	sub	sp, sp, #48	; 0x30
   15300:	mov	r5, r2
   15304:	mov	r6, r3
   15308:	mov	r4, r0
   1530c:	mov	r0, sp
   15310:	bl	13764 <__assert_fail@plt+0x2820>
   15314:	mov	r3, sp
   15318:	mov	r2, r6
   1531c:	mov	r1, r5
   15320:	mov	r0, r4
   15324:	bl	14dc8 <__assert_fail@plt+0x3e84>
   15328:	add	sp, sp, #48	; 0x30
   1532c:	pop	{r4, r5, r6, pc}
   15330:	mov	r2, r1
   15334:	mov	r1, r0
   15338:	mov	r0, #0
   1533c:	b	152c4 <__assert_fail@plt+0x4380>
   15340:	mov	r3, r2
   15344:	mov	r2, r1
   15348:	mov	r1, r0
   1534c:	mov	r0, #0
   15350:	b	152f8 <__assert_fail@plt+0x43b4>
   15354:	push	{r4, r5, r6, r7, r8, lr}
   15358:	mov	r7, r0
   1535c:	ldr	lr, [pc, #100]	; 153c8 <__assert_fail@plt+0x4484>
   15360:	mov	r8, r1
   15364:	mov	r4, r2
   15368:	ldm	lr!, {r0, r1, r2, r3}
   1536c:	sub	sp, sp, #48	; 0x30
   15370:	mov	ip, sp
   15374:	lsr	r5, r4, #5
   15378:	stmia	ip!, {r0, r1, r2, r3}
   1537c:	add	r6, sp, #8
   15380:	ldm	lr!, {r0, r1, r2, r3}
   15384:	and	r4, r4, #31
   15388:	stmia	ip!, {r0, r1, r2, r3}
   1538c:	ldm	lr, {r0, r1, r2, r3}
   15390:	stm	ip, {r0, r1, r2, r3}
   15394:	mov	r2, r8
   15398:	ldr	lr, [r6, r5, lsl #2]
   1539c:	mov	r1, r7
   153a0:	mov	r3, sp
   153a4:	lsr	ip, lr, r4
   153a8:	eor	ip, ip, #1
   153ac:	and	ip, ip, #1
   153b0:	mov	r0, #0
   153b4:	eor	r4, lr, ip, lsl r4
   153b8:	str	r4, [r6, r5, lsl #2]
   153bc:	bl	14dc8 <__assert_fail@plt+0x3e84>
   153c0:	add	sp, sp, #48	; 0x30
   153c4:	pop	{r4, r5, r6, r7, r8, pc}
   153c8:	andeq	fp, r2, r0, ror r5
   153cc:	mov	r2, r1
   153d0:	mvn	r1, #0
   153d4:	b	15354 <__assert_fail@plt+0x4410>
   153d8:	mov	r2, #58	; 0x3a
   153dc:	mvn	r1, #0
   153e0:	b	15354 <__assert_fail@plt+0x4410>
   153e4:	mov	r2, #58	; 0x3a
   153e8:	b	15354 <__assert_fail@plt+0x4410>
   153ec:	push	{r4, r5, r6, r7, lr}
   153f0:	sub	sp, sp, #100	; 0x64
   153f4:	mov	r6, r0
   153f8:	mov	r0, sp
   153fc:	mov	r7, r2
   15400:	bl	13764 <__assert_fail@plt+0x2820>
   15404:	mov	ip, sp
   15408:	add	lr, sp, #48	; 0x30
   1540c:	ldm	ip!, {r0, r1, r2, r3}
   15410:	stmia	lr!, {r0, r1, r2, r3}
   15414:	ldm	ip!, {r0, r1, r2, r3}
   15418:	ldr	r5, [sp, #60]	; 0x3c
   1541c:	stmia	lr!, {r0, r1, r2, r3}
   15420:	mvn	r4, r5
   15424:	ldm	ip, {r0, r1, r2, r3}
   15428:	and	ip, r4, #67108864	; 0x4000000
   1542c:	eor	ip, ip, r5
   15430:	str	ip, [sp, #60]	; 0x3c
   15434:	stm	lr, {r0, r1, r2, r3}
   15438:	mov	r1, r7
   1543c:	mov	r0, r6
   15440:	add	r3, sp, #48	; 0x30
   15444:	mvn	r2, #0
   15448:	bl	14dc8 <__assert_fail@plt+0x3e84>
   1544c:	add	sp, sp, #100	; 0x64
   15450:	pop	{r4, r5, r6, r7, pc}
   15454:	push	{r4, r5, r6, r7, r8, lr}
   15458:	mov	r5, r1
   1545c:	ldr	lr, [pc, #100]	; 154c8 <__assert_fail@plt+0x4584>
   15460:	mov	r4, r2
   15464:	mov	r7, r0
   15468:	mov	r8, r3
   1546c:	ldm	lr!, {r0, r1, r2, r3}
   15470:	sub	sp, sp, #48	; 0x30
   15474:	mov	ip, sp
   15478:	mov	r6, #10
   1547c:	stmia	ip!, {r0, r1, r2, r3}
   15480:	cmp	r4, #0
   15484:	cmpne	r5, #0
   15488:	ldm	lr!, {r0, r1, r2, r3}
   1548c:	str	r6, [sp]
   15490:	stmia	ip!, {r0, r1, r2, r3}
   15494:	ldm	lr, {r0, r1, r2, r3}
   15498:	stm	ip, {r0, r1, r2, r3}
   1549c:	beq	154c4 <__assert_fail@plt+0x4580>
   154a0:	mov	r3, sp
   154a4:	mov	r1, r8
   154a8:	mov	r0, r7
   154ac:	ldr	r2, [sp, #72]	; 0x48
   154b0:	str	r5, [sp, #40]	; 0x28
   154b4:	str	r4, [sp, #44]	; 0x2c
   154b8:	bl	14dc8 <__assert_fail@plt+0x3e84>
   154bc:	add	sp, sp, #48	; 0x30
   154c0:	pop	{r4, r5, r6, r7, r8, pc}
   154c4:	bl	10f2c <abort@plt>
   154c8:	andeq	fp, r2, r0, ror r5
   154cc:	push	{lr}		; (str lr, [sp, #-4]!)
   154d0:	sub	sp, sp, #12
   154d4:	mvn	ip, #0
   154d8:	str	ip, [sp]
   154dc:	bl	15454 <__assert_fail@plt+0x4510>
   154e0:	add	sp, sp, #12
   154e4:	pop	{pc}		; (ldr pc, [sp], #4)
   154e8:	push	{lr}		; (str lr, [sp, #-4]!)
   154ec:	sub	sp, sp, #12
   154f0:	mvn	ip, #0
   154f4:	mov	r3, r2
   154f8:	str	ip, [sp]
   154fc:	mov	r2, r1
   15500:	mov	r1, r0
   15504:	mov	r0, #0
   15508:	bl	15454 <__assert_fail@plt+0x4510>
   1550c:	add	sp, sp, #12
   15510:	pop	{pc}		; (ldr pc, [sp], #4)
   15514:	push	{lr}		; (str lr, [sp, #-4]!)
   15518:	sub	sp, sp, #12
   1551c:	str	r3, [sp]
   15520:	mov	r3, r2
   15524:	mov	r2, r1
   15528:	mov	r1, r0
   1552c:	mov	r0, #0
   15530:	bl	15454 <__assert_fail@plt+0x4510>
   15534:	add	sp, sp, #12
   15538:	pop	{pc}		; (ldr pc, [sp], #4)
   1553c:	ldr	r3, [pc]	; 15544 <__assert_fail@plt+0x4600>
   15540:	b	14dc8 <__assert_fail@plt+0x3e84>
   15544:	andeq	r9, r2, r8, lsl #2
   15548:	mov	r2, r1
   1554c:	ldr	r3, [pc, #8]	; 1555c <__assert_fail@plt+0x4618>
   15550:	mov	r1, r0
   15554:	mov	r0, #0
   15558:	b	14dc8 <__assert_fail@plt+0x3e84>
   1555c:	andeq	r9, r2, r8, lsl #2
   15560:	ldr	r3, [pc, #4]	; 1556c <__assert_fail@plt+0x4628>
   15564:	mvn	r2, #0
   15568:	b	14dc8 <__assert_fail@plt+0x3e84>
   1556c:	andeq	r9, r2, r8, lsl #2
   15570:	mov	r1, r0
   15574:	ldr	r3, [pc, #8]	; 15584 <__assert_fail@plt+0x4640>
   15578:	mvn	r2, #0
   1557c:	mov	r0, #0
   15580:	b	14dc8 <__assert_fail@plt+0x3e84>
   15584:	andeq	r9, r2, r8, lsl #2
   15588:	push	{r4, r5, r6, r7, r8, lr}
   1558c:	mov	r8, r0
   15590:	ldr	r5, [pc, #84]	; 155ec <__assert_fail@plt+0x46a8>
   15594:	mov	r7, r1
   15598:	mov	r4, r2
   1559c:	mov	r2, r4
   155a0:	mov	r1, r7
   155a4:	mov	r0, r8
   155a8:	bl	10d04 <read@plt>
   155ac:	subs	r6, r0, #0
   155b0:	bge	155e4 <__assert_fail@plt+0x46a0>
   155b4:	bl	10e84 <__errno_location@plt>
   155b8:	ldr	r3, [r0]
   155bc:	cmp	r3, #4
   155c0:	beq	1559c <__assert_fail@plt+0x4658>
   155c4:	cmp	r4, r5
   155c8:	movls	r2, #0
   155cc:	movhi	r2, #1
   155d0:	cmp	r3, #22
   155d4:	movne	r2, #0
   155d8:	cmp	r2, #0
   155dc:	mov	r4, r5
   155e0:	bne	1559c <__assert_fail@plt+0x4658>
   155e4:	mov	r0, r6
   155e8:	pop	{r4, r5, r6, r7, r8, pc}
   155ec:	svcvc	0x00f00000	; IMB
   155f0:	push	{r4, r5, r6, lr}
   155f4:	sub	sp, sp, #32
   155f8:	cmp	r1, #0
   155fc:	mov	r4, r0
   15600:	ldr	r5, [sp, #48]	; 0x30
   15604:	ldr	r6, [sp, #52]	; 0x34
   15608:	beq	15920 <__assert_fail@plt+0x49dc>
   1560c:	stm	sp, {r2, r3}
   15610:	mov	r3, r1
   15614:	ldr	r2, [pc, #808]	; 15944 <__assert_fail@plt+0x4a00>
   15618:	mov	r1, #1
   1561c:	bl	10ecc <__fprintf_chk@plt>
   15620:	mov	r2, #5
   15624:	ldr	r1, [pc, #796]	; 15948 <__assert_fail@plt+0x4a04>
   15628:	mov	r0, #0
   1562c:	bl	10d88 <dcgettext@plt>
   15630:	ldr	r3, [pc, #788]	; 1594c <__assert_fail@plt+0x4a08>
   15634:	ldr	r2, [pc, #788]	; 15950 <__assert_fail@plt+0x4a0c>
   15638:	str	r3, [sp]
   1563c:	mov	r1, #1
   15640:	mov	r3, r0
   15644:	mov	r0, r4
   15648:	bl	10ecc <__fprintf_chk@plt>
   1564c:	mov	r1, r4
   15650:	mov	r0, #10
   15654:	bl	10d7c <fputc_unlocked@plt>
   15658:	mov	r2, #5
   1565c:	ldr	r1, [pc, #752]	; 15954 <__assert_fail@plt+0x4a10>
   15660:	mov	r0, #0
   15664:	bl	10d88 <dcgettext@plt>
   15668:	mov	r1, #1
   1566c:	ldr	r3, [pc, #740]	; 15958 <__assert_fail@plt+0x4a14>
   15670:	mov	r2, r0
   15674:	mov	r0, r4
   15678:	bl	10ecc <__fprintf_chk@plt>
   1567c:	mov	r1, r4
   15680:	mov	r0, #10
   15684:	bl	10d7c <fputc_unlocked@plt>
   15688:	cmp	r6, #9
   1568c:	ldrls	pc, [pc, r6, lsl #2]
   15690:	b	15938 <__assert_fail@plt+0x49f4>
   15694:	andeq	r5, r1, r8, lsl r7
   15698:	andeq	r5, r1, r0, lsr #14
   1569c:	andeq	r5, r1, ip, asr #14
   156a0:	andeq	r5, r1, r0, lsl #15
   156a4:			; <UNDEFINED> instruction: 0x000157bc
   156a8:	strdeq	r5, [r1], -r8
   156ac:	andeq	r5, r1, r4, lsr r8
   156b0:	andeq	r5, r1, r8, ror r8
   156b4:	andeq	r5, r1, r8, asr #17
   156b8:			; <UNDEFINED> instruction: 0x000156bc
   156bc:	ldr	r1, [pc, #664]	; 1595c <__assert_fail@plt+0x4a18>
   156c0:	mov	r2, #5
   156c4:	mov	r0, #0
   156c8:	bl	10d88 <dcgettext@plt>
   156cc:	ldr	ip, [r5, #32]
   156d0:	ldr	r1, [r5, #28]
   156d4:	ldr	r2, [r5, #24]
   156d8:	ldr	r3, [r5]
   156dc:	ldr	r6, [r5, #20]
   156e0:	str	ip, [sp, #28]
   156e4:	ldr	lr, [r5, #16]
   156e8:	str	r1, [sp, #24]
   156ec:	ldr	ip, [r5, #12]
   156f0:	str	r2, [sp, #20]
   156f4:	ldr	r1, [r5, #8]
   156f8:	ldr	r2, [r5, #4]
   156fc:	str	r6, [sp, #16]
   15700:	stmib	sp, {r1, ip, lr}
   15704:	mov	r1, #1
   15708:	str	r2, [sp]
   1570c:	mov	r2, r0
   15710:	mov	r0, r4
   15714:	bl	10ecc <__fprintf_chk@plt>
   15718:	add	sp, sp, #32
   1571c:	pop	{r4, r5, r6, pc}
   15720:	mov	r2, #5
   15724:	ldr	r1, [pc, #564]	; 15960 <__assert_fail@plt+0x4a1c>
   15728:	mov	r0, #0
   1572c:	bl	10d88 <dcgettext@plt>
   15730:	ldr	r3, [r5]
   15734:	mov	r1, #1
   15738:	mov	r2, r0
   1573c:	mov	r0, r4
   15740:	add	sp, sp, #32
   15744:	pop	{r4, r5, r6, lr}
   15748:	b	10ecc <__fprintf_chk@plt>
   1574c:	mov	r2, #5
   15750:	ldr	r1, [pc, #524]	; 15964 <__assert_fail@plt+0x4a20>
   15754:	mov	r0, #0
   15758:	bl	10d88 <dcgettext@plt>
   1575c:	ldr	r2, [r5, #4]
   15760:	ldr	r3, [r5]
   15764:	mov	r1, #1
   15768:	str	r2, [sp, #48]	; 0x30
   1576c:	mov	r2, r0
   15770:	mov	r0, r4
   15774:	add	sp, sp, #32
   15778:	pop	{r4, r5, r6, lr}
   1577c:	b	10ecc <__fprintf_chk@plt>
   15780:	mov	r2, #5
   15784:	ldr	r1, [pc, #476]	; 15968 <__assert_fail@plt+0x4a24>
   15788:	mov	r0, #0
   1578c:	bl	10d88 <dcgettext@plt>
   15790:	ldr	r1, [r5, #8]
   15794:	ldr	r2, [r5, #4]
   15798:	ldr	r3, [r5]
   1579c:	str	r1, [sp, #52]	; 0x34
   157a0:	str	r2, [sp, #48]	; 0x30
   157a4:	mov	r1, #1
   157a8:	mov	r2, r0
   157ac:	mov	r0, r4
   157b0:	add	sp, sp, #32
   157b4:	pop	{r4, r5, r6, lr}
   157b8:	b	10ecc <__fprintf_chk@plt>
   157bc:	mov	r2, #5
   157c0:	ldr	r1, [pc, #420]	; 1596c <__assert_fail@plt+0x4a28>
   157c4:	mov	r0, #0
   157c8:	bl	10d88 <dcgettext@plt>
   157cc:	ldr	r1, [r5, #8]
   157d0:	ldr	ip, [r5, #12]
   157d4:	ldr	r2, [r5, #4]
   157d8:	ldr	r3, [r5]
   157dc:	stmib	sp, {r1, ip}
   157e0:	str	r2, [sp]
   157e4:	mov	r1, #1
   157e8:	mov	r2, r0
   157ec:	mov	r0, r4
   157f0:	bl	10ecc <__fprintf_chk@plt>
   157f4:	b	15718 <__assert_fail@plt+0x47d4>
   157f8:	mov	r2, #5
   157fc:	ldr	r1, [pc, #364]	; 15970 <__assert_fail@plt+0x4a2c>
   15800:	mov	r0, #0
   15804:	bl	10d88 <dcgettext@plt>
   15808:	add	r1, r5, #8
   1580c:	ldr	r2, [r5, #4]
   15810:	ldm	r1, {r1, ip, lr}
   15814:	ldr	r3, [r5]
   15818:	str	r2, [sp]
   1581c:	stmib	sp, {r1, ip, lr}
   15820:	mov	r1, #1
   15824:	mov	r2, r0
   15828:	mov	r0, r4
   1582c:	bl	10ecc <__fprintf_chk@plt>
   15830:	b	15718 <__assert_fail@plt+0x47d4>
   15834:	mov	r2, #5
   15838:	ldr	r1, [pc, #308]	; 15974 <__assert_fail@plt+0x4a30>
   1583c:	mov	r0, #0
   15840:	bl	10d88 <dcgettext@plt>
   15844:	add	r1, r5, #8
   15848:	ldr	r2, [r5, #4]
   1584c:	ldm	r1, {r1, ip, lr}
   15850:	ldr	r6, [r5, #20]
   15854:	ldr	r3, [r5]
   15858:	stmib	sp, {r1, ip, lr}
   1585c:	mov	r1, #1
   15860:	str	r2, [sp]
   15864:	str	r6, [sp, #16]
   15868:	mov	r2, r0
   1586c:	mov	r0, r4
   15870:	bl	10ecc <__fprintf_chk@plt>
   15874:	b	15718 <__assert_fail@plt+0x47d4>
   15878:	mov	r2, #5
   1587c:	ldr	r1, [pc, #244]	; 15978 <__assert_fail@plt+0x4a34>
   15880:	mov	r0, #0
   15884:	bl	10d88 <dcgettext@plt>
   15888:	ldr	r2, [r5, #24]
   1588c:	ldr	r3, [r5]
   15890:	ldr	r6, [r5, #20]
   15894:	ldr	lr, [r5, #16]
   15898:	ldr	ip, [r5, #12]
   1589c:	str	r2, [sp, #20]
   158a0:	ldr	r1, [r5, #8]
   158a4:	ldr	r2, [r5, #4]
   158a8:	str	r6, [sp, #16]
   158ac:	stmib	sp, {r1, ip, lr}
   158b0:	mov	r1, #1
   158b4:	str	r2, [sp]
   158b8:	mov	r2, r0
   158bc:	mov	r0, r4
   158c0:	bl	10ecc <__fprintf_chk@plt>
   158c4:	b	15718 <__assert_fail@plt+0x47d4>
   158c8:	mov	r2, #5
   158cc:	ldr	r1, [pc, #168]	; 1597c <__assert_fail@plt+0x4a38>
   158d0:	mov	r0, #0
   158d4:	bl	10d88 <dcgettext@plt>
   158d8:	ldr	r1, [r5, #28]
   158dc:	ldr	r2, [r5, #24]
   158e0:	ldr	r3, [r5]
   158e4:	ldr	r6, [r5, #20]
   158e8:	ldr	lr, [r5, #16]
   158ec:	str	r1, [sp, #24]
   158f0:	ldr	ip, [r5, #12]
   158f4:	str	r2, [sp, #20]
   158f8:	ldr	r1, [r5, #8]
   158fc:	ldr	r2, [r5, #4]
   15900:	str	r6, [sp, #16]
   15904:	stmib	sp, {r1, ip, lr}
   15908:	mov	r1, #1
   1590c:	str	r2, [sp]
   15910:	mov	r2, r0
   15914:	mov	r0, r4
   15918:	bl	10ecc <__fprintf_chk@plt>
   1591c:	b	15718 <__assert_fail@plt+0x47d4>
   15920:	str	r3, [sp]
   15924:	mov	r1, #1
   15928:	mov	r3, r2
   1592c:	ldr	r2, [pc, #76]	; 15980 <__assert_fail@plt+0x4a3c>
   15930:	bl	10ecc <__fprintf_chk@plt>
   15934:	b	15620 <__assert_fail@plt+0x46dc>
   15938:	mov	r2, #5
   1593c:	ldr	r1, [pc, #64]	; 15984 <__assert_fail@plt+0x4a40>
   15940:	b	156c4 <__assert_fail@plt+0x4780>
   15944:	muleq	r1, r0, r6
   15948:	andeq	r8, r1, r4, lsr #13
   1594c:	andeq	r0, r0, r6, ror #15
   15950:	andeq	r8, r1, ip, ror r9
   15954:	andeq	r8, r1, r8, lsr #13
   15958:	andeq	r8, r1, r4, asr r7
   1595c:	andeq	r8, r1, r4, lsl #17
   15960:	andeq	r8, r1, r8, ror r7
   15964:	andeq	r8, r1, r8, lsl #15
   15968:	andeq	r8, r1, r0, lsr #15
   1596c:			; <UNDEFINED> instruction: 0x000187bc
   15970:	ldrdeq	r8, [r1], -ip
   15974:	andeq	r8, r1, r0, lsl #16
   15978:	andeq	r8, r1, r8, lsr #16
   1597c:	andeq	r8, r1, r4, asr r8
   15980:	muleq	r1, ip, r6
   15984:			; <UNDEFINED> instruction: 0x000188b8
   15988:	push	{r4, r5, lr}
   1598c:	sub	sp, sp, #12
   15990:	ldr	r5, [sp, #24]
   15994:	ldr	ip, [r5]
   15998:	cmp	ip, #0
   1599c:	beq	159b8 <__assert_fail@plt+0x4a74>
   159a0:	mov	lr, r5
   159a4:	mov	ip, #0
   159a8:	ldr	r4, [lr, #4]!
   159ac:	add	ip, ip, #1
   159b0:	cmp	r4, #0
   159b4:	bne	159a8 <__assert_fail@plt+0x4a64>
   159b8:	stm	sp, {r5, ip}
   159bc:	bl	155f0 <__assert_fail@plt+0x46ac>
   159c0:	add	sp, sp, #12
   159c4:	pop	{r4, r5, pc}
   159c8:	push	{r4, r5, lr}
   159cc:	sub	sp, sp, #52	; 0x34
   159d0:	add	r5, sp, #4
   159d4:	ldr	r4, [sp, #64]	; 0x40
   159d8:	mov	ip, #0
   159dc:	sub	r4, r4, #4
   159e0:	ldr	lr, [r4, #4]!
   159e4:	cmp	lr, #0
   159e8:	str	lr, [r5, #4]!
   159ec:	beq	159fc <__assert_fail@plt+0x4ab8>
   159f0:	add	ip, ip, #1
   159f4:	cmp	ip, #10
   159f8:	bne	159e0 <__assert_fail@plt+0x4a9c>
   159fc:	add	lr, sp, #8
   15a00:	str	ip, [sp, #4]
   15a04:	str	lr, [sp]
   15a08:	bl	155f0 <__assert_fail@plt+0x46ac>
   15a0c:	add	sp, sp, #52	; 0x34
   15a10:	pop	{r4, r5, pc}
   15a14:	push	{r3}		; (str r3, [sp, #-4]!)
   15a18:	push	{r4, lr}
   15a1c:	sub	sp, sp, #60	; 0x3c
   15a20:	add	lr, sp, #56	; 0x38
   15a24:	add	r3, sp, #72	; 0x48
   15a28:	str	r3, [lr, #-44]!	; 0xffffffd4
   15a2c:	add	r4, sp, #68	; 0x44
   15a30:	mov	r3, #0
   15a34:	ldr	ip, [r4, #4]!
   15a38:	cmp	ip, #0
   15a3c:	str	ip, [lr, #4]!
   15a40:	beq	15a50 <__assert_fail@plt+0x4b0c>
   15a44:	add	r3, r3, #1
   15a48:	cmp	r3, #10
   15a4c:	bne	15a34 <__assert_fail@plt+0x4af0>
   15a50:	add	ip, sp, #16
   15a54:	str	r3, [sp, #4]
   15a58:	str	ip, [sp]
   15a5c:	ldr	r3, [sp, #68]	; 0x44
   15a60:	bl	155f0 <__assert_fail@plt+0x46ac>
   15a64:	add	sp, sp, #60	; 0x3c
   15a68:	pop	{r4, lr}
   15a6c:	add	sp, sp, #4
   15a70:	bx	lr
   15a74:	ldr	r3, [pc, #116]	; 15af0 <__assert_fail@plt+0x4bac>
   15a78:	push	{r4, lr}
   15a7c:	mov	r0, #10
   15a80:	ldr	r1, [r3]
   15a84:	bl	10d7c <fputc_unlocked@plt>
   15a88:	mov	r2, #5
   15a8c:	ldr	r1, [pc, #96]	; 15af4 <__assert_fail@plt+0x4bb0>
   15a90:	mov	r0, #0
   15a94:	bl	10d88 <dcgettext@plt>
   15a98:	ldr	r2, [pc, #88]	; 15af8 <__assert_fail@plt+0x4bb4>
   15a9c:	mov	r1, r0
   15aa0:	mov	r0, #1
   15aa4:	bl	10eb4 <__printf_chk@plt>
   15aa8:	mov	r2, #5
   15aac:	ldr	r1, [pc, #72]	; 15afc <__assert_fail@plt+0x4bb8>
   15ab0:	mov	r0, #0
   15ab4:	bl	10d88 <dcgettext@plt>
   15ab8:	ldr	r3, [pc, #64]	; 15b00 <__assert_fail@plt+0x4bbc>
   15abc:	ldr	r2, [pc, #64]	; 15b04 <__assert_fail@plt+0x4bc0>
   15ac0:	mov	r1, r0
   15ac4:	mov	r0, #1
   15ac8:	bl	10eb4 <__printf_chk@plt>
   15acc:	mov	r2, #5
   15ad0:	ldr	r1, [pc, #48]	; 15b08 <__assert_fail@plt+0x4bc4>
   15ad4:	mov	r0, #0
   15ad8:	bl	10d88 <dcgettext@plt>
   15adc:	ldr	r2, [pc, #40]	; 15b0c <__assert_fail@plt+0x4bc8>
   15ae0:	pop	{r4, lr}
   15ae4:	mov	r1, r0
   15ae8:	mov	r0, #1
   15aec:	b	10eb4 <__printf_chk@plt>
   15af0:	andeq	r9, r2, r4, asr r1
   15af4:	strdeq	r8, [r1], -r4
   15af8:	andeq	r8, r1, r8, lsl #18
   15afc:	andeq	r8, r1, r0, lsr #18
   15b00:	andeq	r7, r1, r8, asr #30
   15b04:	andeq	r7, r1, r0, ror pc
   15b08:	andeq	r8, r1, r4, lsr r9
   15b0c:	andeq	r8, r1, ip, asr r9
   15b10:	push	{r4, lr}
   15b14:	bl	16720 <__assert_fail@plt+0x57dc>
   15b18:	cmp	r0, #0
   15b1c:	popne	{r4, pc}
   15b20:	bl	16058 <__assert_fail@plt+0x5114>
   15b24:	push	{r4, lr}
   15b28:	bl	16720 <__assert_fail@plt+0x57dc>
   15b2c:	cmp	r0, #0
   15b30:	popne	{r4, pc}
   15b34:	bl	16058 <__assert_fail@plt+0x5114>
   15b38:	push	{r4, lr}
   15b3c:	bl	16720 <__assert_fail@plt+0x57dc>
   15b40:	cmp	r0, #0
   15b44:	popne	{r4, pc}
   15b48:	bl	16058 <__assert_fail@plt+0x5114>
   15b4c:	push	{r4, r5, r6, lr}
   15b50:	mov	r5, r0
   15b54:	mov	r4, r1
   15b58:	bl	1674c <__assert_fail@plt+0x5808>
   15b5c:	cmp	r0, #0
   15b60:	popne	{r4, r5, r6, pc}
   15b64:	adds	r4, r4, #0
   15b68:	movne	r4, #1
   15b6c:	cmp	r5, #0
   15b70:	orreq	r4, r4, #1
   15b74:	cmp	r4, #0
   15b78:	popeq	{r4, r5, r6, pc}
   15b7c:	bl	16058 <__assert_fail@plt+0x5114>
   15b80:	push	{r4, lr}
   15b84:	cmp	r1, #0
   15b88:	orreq	r1, r1, #1
   15b8c:	bl	1674c <__assert_fail@plt+0x5808>
   15b90:	cmp	r0, #0
   15b94:	popne	{r4, pc}
   15b98:	bl	16058 <__assert_fail@plt+0x5114>
   15b9c:	push	{r4, r5, r6, lr}
   15ba0:	mov	r6, r0
   15ba4:	mov	r5, r1
   15ba8:	mov	r4, r2
   15bac:	bl	16a4c <__assert_fail@plt+0x5b08>
   15bb0:	cmp	r0, #0
   15bb4:	popne	{r4, r5, r6, pc}
   15bb8:	cmp	r6, #0
   15bbc:	beq	15bcc <__assert_fail@plt+0x4c88>
   15bc0:	cmp	r5, #0
   15bc4:	cmpne	r4, #0
   15bc8:	popeq	{r4, r5, r6, pc}
   15bcc:	bl	16058 <__assert_fail@plt+0x5114>
   15bd0:	b	15b9c <__assert_fail@plt+0x4c58>
   15bd4:	cmp	r2, #0
   15bd8:	cmpne	r1, #0
   15bdc:	moveq	r2, #1
   15be0:	moveq	r1, r2
   15be4:	push	{r4, lr}
   15be8:	bl	16a4c <__assert_fail@plt+0x5b08>
   15bec:	cmp	r0, #0
   15bf0:	popne	{r4, pc}
   15bf4:	bl	16058 <__assert_fail@plt+0x5114>
   15bf8:	mov	r2, r1
   15bfc:	mov	r1, r0
   15c00:	mov	r0, #0
   15c04:	b	15b9c <__assert_fail@plt+0x4c58>
   15c08:	mov	r2, r1
   15c0c:	mov	r1, r0
   15c10:	mov	r0, #0
   15c14:	b	15bd4 <__assert_fail@plt+0x4c90>
   15c18:	push	{r4, r5, r6, lr}
   15c1c:	subs	r6, r0, #0
   15c20:	sub	sp, sp, #8
   15c24:	mov	r5, r1
   15c28:	ldr	r4, [r1]
   15c2c:	beq	15c68 <__assert_fail@plt+0x4d24>
   15c30:	lsr	r1, r4, #1
   15c34:	add	r3, r1, #1
   15c38:	mvn	r3, r3
   15c3c:	cmp	r4, r3
   15c40:	bhi	15c64 <__assert_fail@plt+0x4d20>
   15c44:	add	r4, r4, #1
   15c48:	add	r4, r4, r1
   15c4c:	mov	r0, r6
   15c50:	mov	r1, r4
   15c54:	bl	15b9c <__assert_fail@plt+0x4c58>
   15c58:	str	r4, [r5]
   15c5c:	add	sp, sp, #8
   15c60:	pop	{r4, r5, r6, pc}
   15c64:	bl	16058 <__assert_fail@plt+0x5114>
   15c68:	cmp	r4, #0
   15c6c:	bne	15c4c <__assert_fail@plt+0x4d08>
   15c70:	mov	r1, r2
   15c74:	mov	r0, #64	; 0x40
   15c78:	str	r2, [sp, #4]
   15c7c:	bl	16b8c <__assert_fail@plt+0x5c48>
   15c80:	ldr	r2, [sp, #4]
   15c84:	cmp	r0, #0
   15c88:	movne	r4, r0
   15c8c:	addeq	r4, r0, #1
   15c90:	b	15c4c <__assert_fail@plt+0x4d08>
   15c94:	mov	r2, #1
   15c98:	b	15c18 <__assert_fail@plt+0x4cd4>
   15c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ca0:	sub	sp, sp, #12
   15ca4:	ldr	r6, [r1]
   15ca8:	mov	sl, r1
   15cac:	mov	r9, r0
   15cb0:	asrs	r4, r6, #1
   15cb4:	mov	r5, r2
   15cb8:	mov	fp, r3
   15cbc:	ldr	r7, [sp, #48]	; 0x30
   15cc0:	bmi	15e2c <__assert_fail@plt+0x4ee8>
   15cc4:	mvn	r3, #-2147483648	; 0x80000000
   15cc8:	sub	r3, r3, r4
   15ccc:	cmp	r6, r3
   15cd0:	movle	r3, #0
   15cd4:	movgt	r3, #1
   15cd8:	mvn	r8, fp
   15cdc:	cmp	r3, #0
   15ce0:	addeq	r4, r4, r6
   15ce4:	mvnne	r4, #-2147483648	; 0x80000000
   15ce8:	lsr	r8, r8, #31
   15cec:	cmp	fp, r4
   15cf0:	movge	r3, #0
   15cf4:	andlt	r3, r8, #1
   15cf8:	cmp	r3, #0
   15cfc:	beq	15de4 <__assert_fail@plt+0x4ea0>
   15d00:	cmp	r7, #0
   15d04:	blt	15eb4 <__assert_fail@plt+0x4f70>
   15d08:	bne	15eac <__assert_fail@plt+0x4f68>
   15d0c:	mov	r2, #64	; 0x40
   15d10:	mov	r1, r7
   15d14:	mov	r0, r2
   15d18:	str	r2, [sp, #4]
   15d1c:	bl	16d98 <__assert_fail@plt+0x5e54>
   15d20:	ldr	r2, [sp, #4]
   15d24:	mov	r1, r7
   15d28:	mov	r4, r0
   15d2c:	mov	r0, r2
   15d30:	bl	16fb8 <__assert_fail@plt+0x6074>
   15d34:	ldr	r2, [sp, #4]
   15d38:	sub	r1, r2, r1
   15d3c:	cmp	r9, #0
   15d40:	sub	r3, r4, r6
   15d44:	streq	r9, [sl]
   15d48:	cmp	r3, r5
   15d4c:	bge	15dd0 <__assert_fail@plt+0x4e8c>
   15d50:	cmp	r5, #0
   15d54:	blt	15e40 <__assert_fail@plt+0x4efc>
   15d58:	cmp	r6, #0
   15d5c:	blt	15d7c <__assert_fail@plt+0x4e38>
   15d60:	mvn	r3, #-2147483648	; 0x80000000
   15d64:	sub	r3, r3, r5
   15d68:	cmp	r6, r3
   15d6c:	movle	r3, #0
   15d70:	movgt	r3, #1
   15d74:	cmp	r3, #0
   15d78:	bne	15f3c <__assert_fail@plt+0x4ff8>
   15d7c:	add	r5, r6, r5
   15d80:	cmp	fp, r5
   15d84:	movge	r8, #0
   15d88:	andlt	r8, r8, #1
   15d8c:	cmp	r8, #0
   15d90:	mov	r4, r5
   15d94:	bne	15f3c <__assert_fail@plt+0x4ff8>
   15d98:	cmp	r7, #0
   15d9c:	blt	15e54 <__assert_fail@plt+0x4f10>
   15da0:	beq	15dcc <__assert_fail@plt+0x4e88>
   15da4:	cmp	r5, #0
   15da8:	blt	15efc <__assert_fail@plt+0x4fb8>
   15dac:	mov	r1, r7
   15db0:	mvn	r0, #-2147483648	; 0x80000000
   15db4:	bl	16d98 <__assert_fail@plt+0x5e54>
   15db8:	cmp	r5, r0
   15dbc:	movle	r0, #0
   15dc0:	movgt	r0, #1
   15dc4:	cmp	r0, #0
   15dc8:	bne	15f3c <__assert_fail@plt+0x4ff8>
   15dcc:	mul	r1, r5, r7
   15dd0:	mov	r0, r9
   15dd4:	bl	15b4c <__assert_fail@plt+0x4c08>
   15dd8:	str	r4, [sl]
   15ddc:	add	sp, sp, #12
   15de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15de4:	cmp	r7, #0
   15de8:	blt	15e80 <__assert_fail@plt+0x4f3c>
   15dec:	beq	15d0c <__assert_fail@plt+0x4dc8>
   15df0:	cmp	r4, #0
   15df4:	blt	15ebc <__assert_fail@plt+0x4f78>
   15df8:	mov	r1, r7
   15dfc:	mvn	r0, #-2147483648	; 0x80000000
   15e00:	bl	16d98 <__assert_fail@plt+0x5e54>
   15e04:	cmp	r0, r4
   15e08:	movge	r0, #0
   15e0c:	movlt	r0, #1
   15e10:	cmp	r0, #0
   15e14:	mvnne	r2, #-2147483648	; 0x80000000
   15e18:	bne	15d10 <__assert_fail@plt+0x4dcc>
   15e1c:	mul	r1, r7, r4
   15e20:	cmp	r1, #63	; 0x3f
   15e24:	bgt	15d3c <__assert_fail@plt+0x4df8>
   15e28:	b	15d0c <__assert_fail@plt+0x4dc8>
   15e2c:	rsb	r3, r4, #-2147483648	; 0x80000000
   15e30:	cmp	r6, r3
   15e34:	movge	r3, #0
   15e38:	movlt	r3, #1
   15e3c:	b	15cd8 <__assert_fail@plt+0x4d94>
   15e40:	rsb	r3, r5, #-2147483648	; 0x80000000
   15e44:	cmp	r6, r3
   15e48:	movge	r3, #0
   15e4c:	movlt	r3, #1
   15e50:	b	15d74 <__assert_fail@plt+0x4e30>
   15e54:	cmp	r5, #0
   15e58:	blt	15ee0 <__assert_fail@plt+0x4f9c>
   15e5c:	cmn	r7, #1
   15e60:	beq	15dcc <__assert_fail@plt+0x4e88>
   15e64:	mov	r1, r7
   15e68:	mov	r0, #-2147483648	; 0x80000000
   15e6c:	bl	16d98 <__assert_fail@plt+0x5e54>
   15e70:	cmp	r5, r0
   15e74:	movle	r0, #0
   15e78:	movgt	r0, #1
   15e7c:	b	15dc4 <__assert_fail@plt+0x4e80>
   15e80:	cmp	r4, #0
   15e84:	blt	15f20 <__assert_fail@plt+0x4fdc>
   15e88:	cmn	r7, #1
   15e8c:	beq	15e1c <__assert_fail@plt+0x4ed8>
   15e90:	mov	r1, r7
   15e94:	mov	r0, #-2147483648	; 0x80000000
   15e98:	bl	16d98 <__assert_fail@plt+0x5e54>
   15e9c:	cmp	r0, r4
   15ea0:	movge	r0, #0
   15ea4:	movlt	r0, #1
   15ea8:	b	15e10 <__assert_fail@plt+0x4ecc>
   15eac:	mov	r4, fp
   15eb0:	b	15df8 <__assert_fail@plt+0x4eb4>
   15eb4:	mov	r4, fp
   15eb8:	b	15e88 <__assert_fail@plt+0x4f44>
   15ebc:	cmn	r4, #1
   15ec0:	beq	15e1c <__assert_fail@plt+0x4ed8>
   15ec4:	mov	r1, r4
   15ec8:	mov	r0, #-2147483648	; 0x80000000
   15ecc:	bl	16d98 <__assert_fail@plt+0x5e54>
   15ed0:	cmp	r7, r0
   15ed4:	movle	r0, #0
   15ed8:	movgt	r0, #1
   15edc:	b	15e10 <__assert_fail@plt+0x4ecc>
   15ee0:	mov	r1, r7
   15ee4:	mvn	r0, #-2147483648	; 0x80000000
   15ee8:	bl	16d98 <__assert_fail@plt+0x5e54>
   15eec:	cmp	r5, r0
   15ef0:	movge	r0, #0
   15ef4:	movlt	r0, #1
   15ef8:	b	15dc4 <__assert_fail@plt+0x4e80>
   15efc:	cmn	r5, #1
   15f00:	beq	15dcc <__assert_fail@plt+0x4e88>
   15f04:	mov	r1, r5
   15f08:	mov	r0, #-2147483648	; 0x80000000
   15f0c:	bl	16d98 <__assert_fail@plt+0x5e54>
   15f10:	cmp	r7, r0
   15f14:	movle	r0, #0
   15f18:	movgt	r0, #1
   15f1c:	b	15dc4 <__assert_fail@plt+0x4e80>
   15f20:	mov	r1, r7
   15f24:	mvn	r0, #-2147483648	; 0x80000000
   15f28:	bl	16d98 <__assert_fail@plt+0x5e54>
   15f2c:	cmp	r0, r4
   15f30:	movle	r0, #0
   15f34:	movgt	r0, #1
   15f38:	b	15e10 <__assert_fail@plt+0x4ecc>
   15f3c:	bl	16058 <__assert_fail@plt+0x5114>
   15f40:	push	{r4, lr}
   15f44:	mov	r1, #1
   15f48:	bl	166d8 <__assert_fail@plt+0x5794>
   15f4c:	cmp	r0, #0
   15f50:	popne	{r4, pc}
   15f54:	bl	16058 <__assert_fail@plt+0x5114>
   15f58:	push	{r4, lr}
   15f5c:	mov	r1, #1
   15f60:	bl	166d8 <__assert_fail@plt+0x5794>
   15f64:	cmp	r0, #0
   15f68:	popne	{r4, pc}
   15f6c:	bl	16058 <__assert_fail@plt+0x5114>
   15f70:	push	{r4, lr}
   15f74:	bl	166d8 <__assert_fail@plt+0x5794>
   15f78:	cmp	r0, #0
   15f7c:	popne	{r4, pc}
   15f80:	bl	16058 <__assert_fail@plt+0x5114>
   15f84:	push	{r4, lr}
   15f88:	bl	166d8 <__assert_fail@plt+0x5794>
   15f8c:	cmp	r0, #0
   15f90:	popne	{r4, pc}
   15f94:	bl	16058 <__assert_fail@plt+0x5114>
   15f98:	push	{r4, r5, r6, lr}
   15f9c:	mov	r6, r0
   15fa0:	mov	r0, r1
   15fa4:	mov	r4, r1
   15fa8:	bl	16720 <__assert_fail@plt+0x57dc>
   15fac:	subs	r5, r0, #0
   15fb0:	beq	15fc8 <__assert_fail@plt+0x5084>
   15fb4:	mov	r2, r4
   15fb8:	mov	r1, r6
   15fbc:	bl	10d34 <memcpy@plt>
   15fc0:	mov	r0, r5
   15fc4:	pop	{r4, r5, r6, pc}
   15fc8:	bl	16058 <__assert_fail@plt+0x5114>
   15fcc:	push	{r4, r5, r6, lr}
   15fd0:	mov	r6, r0
   15fd4:	mov	r0, r1
   15fd8:	mov	r4, r1
   15fdc:	bl	16720 <__assert_fail@plt+0x57dc>
   15fe0:	subs	r5, r0, #0
   15fe4:	beq	15ffc <__assert_fail@plt+0x50b8>
   15fe8:	mov	r2, r4
   15fec:	mov	r1, r6
   15ff0:	bl	10d34 <memcpy@plt>
   15ff4:	mov	r0, r5
   15ff8:	pop	{r4, r5, r6, pc}
   15ffc:	bl	16058 <__assert_fail@plt+0x5114>
   16000:	push	{r4, r5, r6, lr}
   16004:	mov	r6, r0
   16008:	add	r0, r1, #1
   1600c:	mov	r4, r1
   16010:	bl	16720 <__assert_fail@plt+0x57dc>
   16014:	subs	r5, r0, #0
   16018:	beq	16038 <__assert_fail@plt+0x50f4>
   1601c:	mov	r3, #0
   16020:	mov	r1, r6
   16024:	strb	r3, [r5, r4]
   16028:	mov	r2, r4
   1602c:	bl	10d34 <memcpy@plt>
   16030:	mov	r0, r5
   16034:	pop	{r4, r5, r6, pc}
   16038:	bl	16058 <__assert_fail@plt+0x5114>
   1603c:	push	{r4, lr}
   16040:	mov	r4, r0
   16044:	bl	10e6c <strlen@plt>
   16048:	add	r1, r0, #1
   1604c:	mov	r0, r4
   16050:	pop	{r4, lr}
   16054:	b	15f98 <__assert_fail@plt+0x5054>
   16058:	ldr	r3, [pc, #44]	; 1608c <__assert_fail@plt+0x5148>
   1605c:	push	{r4, lr}
   16060:	mov	r2, #5
   16064:	ldr	r1, [pc, #36]	; 16090 <__assert_fail@plt+0x514c>
   16068:	mov	r0, #0
   1606c:	ldr	r4, [r3]
   16070:	bl	10d88 <dcgettext@plt>
   16074:	ldr	r2, [pc, #24]	; 16094 <__assert_fail@plt+0x5150>
   16078:	mov	r1, #0
   1607c:	mov	r3, r0
   16080:	mov	r0, r4
   16084:	bl	10df4 <error@plt>
   16088:	bl	10f2c <abort@plt>
   1608c:	strdeq	r9, [r2], -r4
   16090:	andeq	r8, r1, ip, lsr #19
   16094:	andeq	r8, r1, r4, ror r5
   16098:	push	{r4, r5, r6, r7, r8, lr}
   1609c:	subs	r5, r1, #0
   160a0:	mov	r4, r0
   160a4:	blt	16118 <__assert_fail@plt+0x51d4>
   160a8:	moveq	r6, #0
   160ac:	moveq	r7, #0
   160b0:	bne	160d8 <__assert_fail@plt+0x5194>
   160b4:	ldr	r2, [r4]
   160b8:	ldr	r1, [r4, #4]
   160bc:	mov	r0, #0
   160c0:	mul	ip, r2, r7
   160c4:	umull	r2, r3, r2, r5
   160c8:	mla	r5, r5, r1, ip
   160cc:	add	r3, r5, r3
   160d0:	strd	r2, [r4]
   160d4:	pop	{r4, r5, r6, r7, r8, pc}
   160d8:	asr	r7, r5, #31
   160dc:	mov	r2, r5
   160e0:	mov	r3, r7
   160e4:	mvn	r0, #0
   160e8:	mvn	r1, #0
   160ec:	bl	16fd8 <__assert_fail@plt+0x6094>
   160f0:	ldrd	r2, [r4]
   160f4:	mov	r6, r5
   160f8:	cmp	r1, r3
   160fc:	cmpeq	r0, r2
   16100:	bcs	160b4 <__assert_fail@plt+0x5170>
   16104:	mvn	r2, #0
   16108:	mvn	r3, #0
   1610c:	mov	r0, #1
   16110:	strd	r2, [r4]
   16114:	pop	{r4, r5, r6, r7, r8, pc}
   16118:	ldrd	r2, [r0]
   1611c:	orrs	r3, r2, r3
   16120:	moveq	r6, r5
   16124:	asreq	r7, r6, #31
   16128:	bne	16104 <__assert_fail@plt+0x51c0>
   1612c:	b	160b4 <__assert_fail@plt+0x5170>
   16130:	cmp	r2, #36	; 0x24
   16134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16138:	sub	sp, sp, #20
   1613c:	bhi	166b0 <__assert_fail@plt+0x576c>
   16140:	cmp	r1, #0
   16144:	mov	r8, r2
   16148:	mov	r7, r0
   1614c:	mov	r5, r1
   16150:	mov	r6, r3
   16154:	addeq	r5, sp, #4
   16158:	bl	10e84 <__errno_location@plt>
   1615c:	mov	r3, #0
   16160:	str	r3, [r0]
   16164:	mov	r9, r0
   16168:	bl	10e54 <__ctype_b_loc@plt>
   1616c:	ldrb	r3, [r7]
   16170:	mov	r2, r7
   16174:	ldr	r0, [r0]
   16178:	b	16180 <__assert_fail@plt+0x523c>
   1617c:	ldrb	r3, [r2, #1]!
   16180:	lsl	r1, r3, #1
   16184:	ldrh	r4, [r0, r1]
   16188:	ands	r4, r4, #8192	; 0x2000
   1618c:	bne	1617c <__assert_fail@plt+0x5238>
   16190:	cmp	r3, #45	; 0x2d
   16194:	bne	161a8 <__assert_fail@plt+0x5264>
   16198:	mov	r4, #4
   1619c:	mov	r0, r4
   161a0:	add	sp, sp, #20
   161a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161a8:	mov	r2, r8
   161ac:	mov	r3, r4
   161b0:	mov	r1, r5
   161b4:	mov	r0, r7
   161b8:	bl	10d40 <__strtoull_internal@plt>
   161bc:	ldr	r8, [r5]
   161c0:	cmp	r7, r8
   161c4:	mov	r2, r0
   161c8:	str	r0, [sp, #8]
   161cc:	str	r1, [sp, #12]
   161d0:	beq	1621c <__assert_fail@plt+0x52d8>
   161d4:	ldr	r4, [r9]
   161d8:	cmp	r4, #0
   161dc:	bne	1620c <__assert_fail@plt+0x52c8>
   161e0:	ldr	r3, [sp, #56]	; 0x38
   161e4:	cmp	r3, #0
   161e8:	beq	161f8 <__assert_fail@plt+0x52b4>
   161ec:	ldrb	r9, [r8]
   161f0:	cmp	r9, #0
   161f4:	bne	16254 <__assert_fail@plt+0x5310>
   161f8:	mov	r0, r4
   161fc:	str	r2, [r6]
   16200:	str	r1, [r6, #4]
   16204:	add	sp, sp, #20
   16208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1620c:	cmp	r4, #34	; 0x22
   16210:	bne	16198 <__assert_fail@plt+0x5254>
   16214:	mov	r4, #1
   16218:	b	161e0 <__assert_fail@plt+0x529c>
   1621c:	ldr	r3, [sp, #56]	; 0x38
   16220:	cmp	r3, #0
   16224:	beq	16198 <__assert_fail@plt+0x5254>
   16228:	ldrb	r1, [r8]
   1622c:	cmp	r1, #0
   16230:	beq	16198 <__assert_fail@plt+0x5254>
   16234:	mov	r0, r3
   16238:	bl	10e78 <strchr@plt>
   1623c:	cmp	r0, #0
   16240:	beq	16198 <__assert_fail@plt+0x5254>
   16244:	ldrb	r9, [r8]
   16248:	mov	r2, #1
   1624c:	mov	r3, #0
   16250:	strd	r2, [sp, #8]
   16254:	mov	r1, r9
   16258:	ldr	r0, [sp, #56]	; 0x38
   1625c:	bl	10e78 <strchr@plt>
   16260:	cmp	r0, #0
   16264:	beq	1666c <__assert_fail@plt+0x5728>
   16268:	sub	r3, r9, #69	; 0x45
   1626c:	cmp	r3, #47	; 0x2f
   16270:	ldrls	pc, [pc, r3, lsl #2]
   16274:	b	16338 <__assert_fail@plt+0x53f4>
   16278:	andeq	r6, r1, r8, lsr #8
   1627c:	andeq	r6, r1, r8, lsr r3
   16280:	andeq	r6, r1, r8, lsr #8
   16284:	andeq	r6, r1, r8, lsr r3
   16288:	andeq	r6, r1, r8, lsr r3
   1628c:	andeq	r6, r1, r8, lsr r3
   16290:	andeq	r6, r1, r8, lsr #8
   16294:	andeq	r6, r1, r8, lsr r3
   16298:	andeq	r6, r1, r8, lsr #8
   1629c:	andeq	r6, r1, r8, lsr r3
   162a0:	andeq	r6, r1, r8, lsr r3
   162a4:	andeq	r6, r1, r8, lsr #8
   162a8:	andeq	r6, r1, r8, lsr r3
   162ac:	andeq	r6, r1, r8, lsr r3
   162b0:	andeq	r6, r1, r8, lsr r3
   162b4:	andeq	r6, r1, r8, lsr #8
   162b8:	andeq	r6, r1, r8, lsr r3
   162bc:	andeq	r6, r1, r8, lsr r3
   162c0:	andeq	r6, r1, r8, lsr r3
   162c4:	andeq	r6, r1, r8, lsr r3
   162c8:	andeq	r6, r1, r8, lsr #8
   162cc:	andeq	r6, r1, r8, lsr #8
   162d0:	andeq	r6, r1, r8, lsr r3
   162d4:	andeq	r6, r1, r8, lsr r3
   162d8:	andeq	r6, r1, r8, lsr r3
   162dc:	andeq	r6, r1, r8, lsr r3
   162e0:	andeq	r6, r1, r8, lsr r3
   162e4:	andeq	r6, r1, r8, lsr r3
   162e8:	andeq	r6, r1, r8, lsr r3
   162ec:	andeq	r6, r1, r8, lsr r3
   162f0:	andeq	r6, r1, r8, lsr r3
   162f4:	andeq	r6, r1, r8, lsr r3
   162f8:	andeq	r6, r1, r8, lsr r3
   162fc:	andeq	r6, r1, r8, lsr r3
   16300:	andeq	r6, r1, r8, lsr #8
   16304:	andeq	r6, r1, r8, lsr r3
   16308:	andeq	r6, r1, r8, lsr r3
   1630c:	andeq	r6, r1, r8, lsr r3
   16310:	andeq	r6, r1, r8, lsr #8
   16314:	andeq	r6, r1, r8, lsr r3
   16318:	andeq	r6, r1, r8, lsr #8
   1631c:	andeq	r6, r1, r8, lsr r3
   16320:	andeq	r6, r1, r8, lsr r3
   16324:	andeq	r6, r1, r8, lsr r3
   16328:	andeq	r6, r1, r8, lsr r3
   1632c:	andeq	r6, r1, r8, lsr r3
   16330:	andeq	r6, r1, r8, lsr r3
   16334:	andeq	r6, r1, r8, lsr #8
   16338:	mov	r7, #1
   1633c:	mov	sl, #1024	; 0x400
   16340:	sub	r9, r9, #66	; 0x42
   16344:	cmp	r9, #53	; 0x35
   16348:	ldrls	pc, [pc, r9, lsl #2]
   1634c:	b	1666c <__assert_fail@plt+0x5728>
   16350:			; <UNDEFINED> instruction: 0x000165b8
   16354:	andeq	r6, r1, ip, ror #12
   16358:	andeq	r6, r1, ip, ror #12
   1635c:	muleq	r1, r0, r5
   16360:	andeq	r6, r1, ip, ror #12
   16364:	andeq	r6, r1, r8, ror #10
   16368:	andeq	r6, r1, ip, ror #12
   1636c:	andeq	r6, r1, ip, ror #12
   16370:	andeq	r6, r1, ip, ror #12
   16374:	andeq	r6, r1, r8, asr #10
   16378:	andeq	r6, r1, ip, ror #12
   1637c:	andeq	r6, r1, r4, lsl r6
   16380:	andeq	r6, r1, ip, ror #12
   16384:	andeq	r6, r1, ip, ror #12
   16388:	andeq	r6, r1, ip, ror #11
   1638c:	andeq	r6, r1, ip, ror #12
   16390:	andeq	r6, r1, ip, ror #12
   16394:	andeq	r6, r1, ip, ror #12
   16398:	andeq	r6, r1, r4, asr #12
   1639c:	andeq	r6, r1, ip, ror #12
   163a0:	andeq	r6, r1, ip, ror #12
   163a4:	andeq	r6, r1, ip, ror #12
   163a8:	andeq	r6, r1, ip, ror #12
   163ac:	andeq	r6, r1, r0, lsr #10
   163b0:	andeq	r6, r1, ip, ror #9
   163b4:	andeq	r6, r1, ip, ror #12
   163b8:	andeq	r6, r1, ip, ror #12
   163bc:	andeq	r6, r1, ip, ror #12
   163c0:	andeq	r6, r1, ip, ror #12
   163c4:	andeq	r6, r1, ip, ror #12
   163c8:	andeq	r6, r1, ip, ror #12
   163cc:	andeq	r6, r1, ip, ror #12
   163d0:			; <UNDEFINED> instruction: 0x000164b8
   163d4:	andeq	r6, r1, r8, lsr #9
   163d8:	andeq	r6, r1, ip, ror #12
   163dc:	andeq	r6, r1, ip, ror #12
   163e0:	andeq	r6, r1, ip, ror #12
   163e4:	andeq	r6, r1, r8, ror #10
   163e8:	andeq	r6, r1, ip, ror #12
   163ec:	andeq	r6, r1, ip, ror #12
   163f0:	andeq	r6, r1, ip, ror #12
   163f4:	andeq	r6, r1, r8, asr #10
   163f8:	andeq	r6, r1, ip, ror #12
   163fc:	andeq	r6, r1, r4, lsl r6
   16400:	andeq	r6, r1, ip, ror #12
   16404:	andeq	r6, r1, ip, ror #12
   16408:	andeq	r6, r1, ip, ror #12
   1640c:	andeq	r6, r1, ip, ror #12
   16410:	andeq	r6, r1, ip, ror #12
   16414:	andeq	r6, r1, ip, ror #12
   16418:	andeq	r6, r1, r4, asr #12
   1641c:	andeq	r6, r1, ip, ror #12
   16420:	andeq	r6, r1, ip, ror #12
   16424:	andeq	r6, r1, r4, ror #8
   16428:	mov	r1, #48	; 0x30
   1642c:	ldr	r0, [sp, #56]	; 0x38
   16430:	bl	10e78 <strchr@plt>
   16434:	cmp	r0, #0
   16438:	beq	16338 <__assert_fail@plt+0x53f4>
   1643c:	ldrb	r3, [r8, #1]
   16440:	cmp	r3, #68	; 0x44
   16444:	beq	16458 <__assert_fail@plt+0x5514>
   16448:	cmp	r3, #105	; 0x69
   1644c:	beq	1667c <__assert_fail@plt+0x5738>
   16450:	cmp	r3, #66	; 0x42
   16454:	bne	16338 <__assert_fail@plt+0x53f4>
   16458:	mov	r7, #2
   1645c:	mov	sl, #1000	; 0x3e8
   16460:	b	16340 <__assert_fail@plt+0x53fc>
   16464:	ldrd	r2, [sp, #8]
   16468:	cmp	r2, #0
   1646c:	sbcs	r1, r3, #0
   16470:	blt	16694 <__assert_fail@plt+0x5750>
   16474:	adds	r2, r2, r2
   16478:	adc	r3, r3, r3
   1647c:	mov	r1, r3
   16480:	mov	r9, #0
   16484:	str	r2, [sp, #8]
   16488:	str	r3, [sp, #12]
   1648c:	add	r3, r8, r7
   16490:	str	r3, [r5]
   16494:	ldrb	r3, [r8, r7]
   16498:	orr	r4, r4, r9
   1649c:	cmp	r3, #0
   164a0:	orrne	r4, r4, #2
   164a4:	b	161f8 <__assert_fail@plt+0x52b4>
   164a8:	ldr	r2, [sp, #8]
   164ac:	ldr	r1, [sp, #12]
   164b0:	mov	r9, #0
   164b4:	b	1648c <__assert_fail@plt+0x5548>
   164b8:	ldrd	r2, [sp, #8]
   164bc:	ldr	r1, [pc, #512]	; 166c4 <__assert_fail@plt+0x5780>
   164c0:	mvn	r0, #0
   164c4:	cmp	r3, r1
   164c8:	cmpeq	r2, r0
   164cc:	bhi	16694 <__assert_fail@plt+0x5750>
   164d0:	lsl	r1, r3, #9
   164d4:	orr	r1, r1, r2, lsr #23
   164d8:	lsl	r2, r2, #9
   164dc:	str	r1, [sp, #12]
   164e0:	str	r2, [sp, #8]
   164e4:	mov	r9, #0
   164e8:	b	1648c <__assert_fail@plt+0x5548>
   164ec:	mov	fp, #7
   164f0:	mov	r9, #0
   164f4:	add	r8, sp, #8
   164f8:	mov	r1, sl
   164fc:	mov	r0, r8
   16500:	bl	16098 <__assert_fail@plt+0x5154>
   16504:	subs	fp, fp, #1
   16508:	orr	r9, r9, r0
   1650c:	bne	164f8 <__assert_fail@plt+0x55b4>
   16510:	ldr	r8, [r5]
   16514:	ldr	r2, [sp, #8]
   16518:	ldr	r1, [sp, #12]
   1651c:	b	1648c <__assert_fail@plt+0x5548>
   16520:	mov	fp, #8
   16524:	mov	r9, #0
   16528:	add	r8, sp, fp
   1652c:	mov	r1, sl
   16530:	mov	r0, r8
   16534:	bl	16098 <__assert_fail@plt+0x5154>
   16538:	subs	fp, fp, #1
   1653c:	orr	r9, r9, r0
   16540:	bne	1652c <__assert_fail@plt+0x55e8>
   16544:	b	16510 <__assert_fail@plt+0x55cc>
   16548:	mov	r1, sl
   1654c:	add	r0, sp, #8
   16550:	bl	16098 <__assert_fail@plt+0x5154>
   16554:	ldr	r8, [r5]
   16558:	ldr	r2, [sp, #8]
   1655c:	ldr	r1, [sp, #12]
   16560:	mov	r9, r0
   16564:	b	1648c <__assert_fail@plt+0x5548>
   16568:	mov	fp, #3
   1656c:	mov	r9, #0
   16570:	add	r8, sp, #8
   16574:	mov	r1, sl
   16578:	mov	r0, r8
   1657c:	bl	16098 <__assert_fail@plt+0x5154>
   16580:	subs	fp, fp, #1
   16584:	orr	r9, r9, r0
   16588:	bne	16574 <__assert_fail@plt+0x5630>
   1658c:	b	16510 <__assert_fail@plt+0x55cc>
   16590:	mov	fp, #6
   16594:	mov	r9, #0
   16598:	add	r8, sp, #8
   1659c:	mov	r1, sl
   165a0:	mov	r0, r8
   165a4:	bl	16098 <__assert_fail@plt+0x5154>
   165a8:	subs	fp, fp, #1
   165ac:	orr	r9, r9, r0
   165b0:	bne	1659c <__assert_fail@plt+0x5658>
   165b4:	b	16510 <__assert_fail@plt+0x55cc>
   165b8:	ldrd	r0, [sp, #8]
   165bc:	ldr	r3, [pc, #260]	; 166c8 <__assert_fail@plt+0x5784>
   165c0:	mvn	r2, #0
   165c4:	cmp	r1, r3
   165c8:	cmpeq	r0, r2
   165cc:	bhi	16694 <__assert_fail@plt+0x5750>
   165d0:	lsl	r1, r1, #10
   165d4:	orr	r1, r1, r0, lsr #22
   165d8:	lsl	r2, r0, #10
   165dc:	str	r1, [sp, #12]
   165e0:	str	r2, [sp, #8]
   165e4:	mov	r9, #0
   165e8:	b	1648c <__assert_fail@plt+0x5548>
   165ec:	mov	fp, #5
   165f0:	mov	r9, #0
   165f4:	add	r8, sp, #8
   165f8:	mov	r1, sl
   165fc:	mov	r0, r8
   16600:	bl	16098 <__assert_fail@plt+0x5154>
   16604:	subs	fp, fp, #1
   16608:	orr	r9, r9, r0
   1660c:	bne	165f8 <__assert_fail@plt+0x56b4>
   16610:	b	16510 <__assert_fail@plt+0x55cc>
   16614:	mov	r1, sl
   16618:	add	r0, sp, #8
   1661c:	bl	16098 <__assert_fail@plt+0x5154>
   16620:	mov	r1, sl
   16624:	mov	r9, r0
   16628:	add	r0, sp, #8
   1662c:	bl	16098 <__assert_fail@plt+0x5154>
   16630:	ldr	r8, [r5]
   16634:	ldr	r2, [sp, #8]
   16638:	ldr	r1, [sp, #12]
   1663c:	orr	r9, r9, r0
   16640:	b	1648c <__assert_fail@plt+0x5548>
   16644:	mov	fp, #4
   16648:	mov	r9, #0
   1664c:	add	r8, sp, #8
   16650:	mov	r1, sl
   16654:	mov	r0, r8
   16658:	bl	16098 <__assert_fail@plt+0x5154>
   1665c:	subs	fp, fp, #1
   16660:	orr	r9, r9, r0
   16664:	bne	16650 <__assert_fail@plt+0x570c>
   16668:	b	16510 <__assert_fail@plt+0x55cc>
   1666c:	ldrd	r2, [sp, #8]
   16670:	orr	r4, r4, #2
   16674:	strd	r2, [r6]
   16678:	b	1619c <__assert_fail@plt+0x5258>
   1667c:	ldrb	r7, [r8, #2]
   16680:	mov	sl, #1024	; 0x400
   16684:	cmp	r7, #66	; 0x42
   16688:	movne	r7, #1
   1668c:	moveq	r7, #3
   16690:	b	16340 <__assert_fail@plt+0x53fc>
   16694:	mvn	r1, #0
   16698:	mvn	r0, #0
   1669c:	mvn	r2, #0
   166a0:	strd	r0, [sp, #8]
   166a4:	mov	r9, #1
   166a8:	mov	r1, r2
   166ac:	b	1648c <__assert_fail@plt+0x5548>
   166b0:	ldr	r3, [pc, #20]	; 166cc <__assert_fail@plt+0x5788>
   166b4:	mov	r2, #85	; 0x55
   166b8:	ldr	r1, [pc, #16]	; 166d0 <__assert_fail@plt+0x578c>
   166bc:	ldr	r0, [pc, #16]	; 166d4 <__assert_fail@plt+0x5790>
   166c0:	bl	10f44 <__assert_fail@plt>
   166c4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   166c8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   166cc:	andeq	r8, r1, r0, asr #19
   166d0:	andeq	r8, r1, ip, asr #19
   166d4:	ldrdeq	r8, [r1], -ip
   166d8:	cmp	r1, #0
   166dc:	cmpne	r0, #0
   166e0:	moveq	r1, #1
   166e4:	moveq	r0, r1
   166e8:	umull	r2, r3, r0, r1
   166ec:	adds	r3, r3, #0
   166f0:	movne	r3, #1
   166f4:	cmp	r2, #0
   166f8:	blt	16708 <__assert_fail@plt+0x57c4>
   166fc:	cmp	r3, #0
   16700:	bne	16708 <__assert_fail@plt+0x57c4>
   16704:	b	10cc8 <calloc@plt>
   16708:	push	{r4, lr}
   1670c:	bl	10e84 <__errno_location@plt>
   16710:	mov	r3, #12
   16714:	str	r3, [r0]
   16718:	mov	r0, #0
   1671c:	pop	{r4, pc}
   16720:	cmp	r0, #0
   16724:	moveq	r0, #1
   16728:	cmp	r0, #0
   1672c:	blt	16734 <__assert_fail@plt+0x57f0>
   16730:	b	10e00 <malloc@plt>
   16734:	push	{r4, lr}
   16738:	bl	10e84 <__errno_location@plt>
   1673c:	mov	r3, #12
   16740:	str	r3, [r0]
   16744:	mov	r0, #0
   16748:	pop	{r4, pc}
   1674c:	cmp	r0, #0
   16750:	beq	16774 <__assert_fail@plt+0x5830>
   16754:	cmp	r1, #0
   16758:	push	{lr}		; (str lr, [sp, #-4]!)
   1675c:	sub	sp, sp, #12
   16760:	beq	1677c <__assert_fail@plt+0x5838>
   16764:	blt	16794 <__assert_fail@plt+0x5850>
   16768:	add	sp, sp, #12
   1676c:	pop	{lr}		; (ldr lr, [sp], #4)
   16770:	b	10d94 <realloc@plt>
   16774:	mov	r0, r1
   16778:	b	16720 <__assert_fail@plt+0x57dc>
   1677c:	str	r1, [sp, #4]
   16780:	bl	13658 <__assert_fail@plt+0x2714>
   16784:	ldr	r3, [sp, #4]
   16788:	mov	r0, r3
   1678c:	add	sp, sp, #12
   16790:	pop	{pc}		; (ldr pc, [sp], #4)
   16794:	bl	10e84 <__errno_location@plt>
   16798:	mov	r2, #12
   1679c:	mov	r3, #0
   167a0:	str	r2, [r0]
   167a4:	b	16788 <__assert_fail@plt+0x5844>
   167a8:	push	{r4, r5, r6, lr}
   167ac:	mov	r4, r0
   167b0:	bl	10ddc <__fpending@plt>
   167b4:	ldr	r5, [r4]
   167b8:	and	r5, r5, #32
   167bc:	mov	r6, r0
   167c0:	mov	r0, r4
   167c4:	bl	16824 <__assert_fail@plt+0x58e0>
   167c8:	cmp	r5, #0
   167cc:	mov	r4, r0
   167d0:	bne	167f0 <__assert_fail@plt+0x58ac>
   167d4:	cmp	r0, #0
   167d8:	beq	167e8 <__assert_fail@plt+0x58a4>
   167dc:	cmp	r6, #0
   167e0:	beq	1680c <__assert_fail@plt+0x58c8>
   167e4:	mvn	r4, #0
   167e8:	mov	r0, r4
   167ec:	pop	{r4, r5, r6, pc}
   167f0:	cmp	r0, #0
   167f4:	bne	167e4 <__assert_fail@plt+0x58a0>
   167f8:	bl	10e84 <__errno_location@plt>
   167fc:	str	r4, [r0]
   16800:	mvn	r4, #0
   16804:	mov	r0, r4
   16808:	pop	{r4, r5, r6, pc}
   1680c:	bl	10e84 <__errno_location@plt>
   16810:	ldr	r4, [r0]
   16814:	subs	r4, r4, #9
   16818:	mvnne	r4, #0
   1681c:	mov	r0, r4
   16820:	pop	{r4, r5, r6, pc}
   16824:	push	{r4, r5, lr}
   16828:	sub	sp, sp, #12
   1682c:	mov	r4, r0
   16830:	bl	10ec0 <fileno@plt>
   16834:	cmp	r0, #0
   16838:	mov	r0, r4
   1683c:	blt	168b8 <__assert_fail@plt+0x5974>
   16840:	bl	10e18 <__freading@plt>
   16844:	cmp	r0, #0
   16848:	bne	16884 <__assert_fail@plt+0x5940>
   1684c:	mov	r0, r4
   16850:	bl	168c4 <__assert_fail@plt+0x5980>
   16854:	cmp	r0, #0
   16858:	beq	168b4 <__assert_fail@plt+0x5970>
   1685c:	bl	10e84 <__errno_location@plt>
   16860:	mov	r5, r0
   16864:	mov	r0, r4
   16868:	ldr	r4, [r5]
   1686c:	bl	10ed8 <fclose@plt>
   16870:	cmp	r4, #0
   16874:	mvnne	r0, #0
   16878:	strne	r4, [r5]
   1687c:	add	sp, sp, #12
   16880:	pop	{r4, r5, pc}
   16884:	mov	r0, r4
   16888:	bl	10ec0 <fileno@plt>
   1688c:	mov	r3, #1
   16890:	str	r3, [sp]
   16894:	mov	r2, #0
   16898:	mov	r3, #0
   1689c:	bl	10dc4 <lseek64@plt>
   168a0:	mvn	r3, #0
   168a4:	mvn	r2, #0
   168a8:	cmp	r1, r3
   168ac:	cmpeq	r0, r2
   168b0:	bne	1684c <__assert_fail@plt+0x5908>
   168b4:	mov	r0, r4
   168b8:	add	sp, sp, #12
   168bc:	pop	{r4, r5, lr}
   168c0:	b	10ed8 <fclose@plt>
   168c4:	push	{r4, lr}
   168c8:	subs	r4, r0, #0
   168cc:	sub	sp, sp, #8
   168d0:	beq	168ec <__assert_fail@plt+0x59a8>
   168d4:	bl	10e18 <__freading@plt>
   168d8:	cmp	r0, #0
   168dc:	beq	168ec <__assert_fail@plt+0x59a8>
   168e0:	ldr	r3, [r4]
   168e4:	tst	r3, #256	; 0x100
   168e8:	bne	168fc <__assert_fail@plt+0x59b8>
   168ec:	mov	r0, r4
   168f0:	add	sp, sp, #8
   168f4:	pop	{r4, lr}
   168f8:	b	10d10 <fflush@plt>
   168fc:	mov	r3, #1
   16900:	str	r3, [sp]
   16904:	mov	r2, #0
   16908:	mov	r3, #0
   1690c:	mov	r0, r4
   16910:	bl	16924 <__assert_fail@plt+0x59e0>
   16914:	mov	r0, r4
   16918:	add	sp, sp, #8
   1691c:	pop	{r4, lr}
   16920:	b	10d10 <fflush@plt>
   16924:	push	{r4, r5, r6, r7, r8, lr}
   16928:	sub	sp, sp, #8
   1692c:	ldmib	r0, {ip, lr}
   16930:	mov	r4, r0
   16934:	ldr	r5, [sp, #32]
   16938:	cmp	lr, ip
   1693c:	beq	16954 <__assert_fail@plt+0x5a10>
   16940:	str	r5, [sp, #32]
   16944:	mov	r0, r4
   16948:	add	sp, sp, #8
   1694c:	pop	{r4, r5, r6, r7, r8, lr}
   16950:	b	10ee4 <fseeko64@plt>
   16954:	ldr	lr, [r0, #20]
   16958:	ldr	ip, [r0, #16]
   1695c:	cmp	lr, ip
   16960:	bne	16940 <__assert_fail@plt+0x59fc>
   16964:	ldr	r8, [r0, #36]	; 0x24
   16968:	cmp	r8, #0
   1696c:	bne	16940 <__assert_fail@plt+0x59fc>
   16970:	mov	r6, r2
   16974:	mov	r7, r3
   16978:	bl	10ec0 <fileno@plt>
   1697c:	mov	r2, r6
   16980:	mov	r3, r7
   16984:	str	r5, [sp]
   16988:	bl	10dc4 <lseek64@plt>
   1698c:	mvn	r3, #0
   16990:	mvn	r2, #0
   16994:	cmp	r1, r3
   16998:	cmpeq	r0, r2
   1699c:	beq	169bc <__assert_fail@plt+0x5a78>
   169a0:	ldr	r3, [r4]
   169a4:	strd	r0, [r4, #80]	; 0x50
   169a8:	mov	r0, r8
   169ac:	bic	r3, r3, #16
   169b0:	str	r3, [r4]
   169b4:	add	sp, sp, #8
   169b8:	pop	{r4, r5, r6, r7, r8, pc}
   169bc:	mvn	r0, #0
   169c0:	b	169b4 <__assert_fail@plt+0x5a70>
   169c4:	push	{r4, lr}
   169c8:	mov	r0, #14
   169cc:	bl	10f08 <nl_langinfo@plt>
   169d0:	cmp	r0, #0
   169d4:	beq	169ec <__assert_fail@plt+0x5aa8>
   169d8:	ldrb	r2, [r0]
   169dc:	ldr	r3, [pc, #16]	; 169f4 <__assert_fail@plt+0x5ab0>
   169e0:	cmp	r2, #0
   169e4:	moveq	r0, r3
   169e8:	pop	{r4, pc}
   169ec:	ldr	r0, [pc]	; 169f4 <__assert_fail@plt+0x5ab0>
   169f0:	pop	{r4, pc}
   169f4:	andeq	r8, r1, r4, lsl #20
   169f8:	push	{r4, r5, r6, r7, lr}
   169fc:	subs	r6, r0, #0
   16a00:	sub	sp, sp, #12
   16a04:	addeq	r6, sp, #4
   16a08:	mov	r0, r6
   16a0c:	mov	r5, r2
   16a10:	mov	r7, r1
   16a14:	bl	10de8 <mbrtowc@plt>
   16a18:	cmp	r5, #0
   16a1c:	cmnne	r0, #3
   16a20:	mov	r4, r0
   16a24:	bls	16a40 <__assert_fail@plt+0x5afc>
   16a28:	mov	r0, #0
   16a2c:	bl	16a98 <__assert_fail@plt+0x5b54>
   16a30:	cmp	r0, #0
   16a34:	moveq	r4, #1
   16a38:	ldrbeq	r3, [r7]
   16a3c:	streq	r3, [r6]
   16a40:	mov	r0, r4
   16a44:	add	sp, sp, #12
   16a48:	pop	{r4, r5, r6, r7, pc}
   16a4c:	push	{r4, r5, r6, lr}
   16a50:	subs	r4, r2, #0
   16a54:	mov	r6, r0
   16a58:	mov	r5, r1
   16a5c:	beq	16a88 <__assert_fail@plt+0x5b44>
   16a60:	mov	r1, r4
   16a64:	mvn	r0, #0
   16a68:	bl	16b8c <__assert_fail@plt+0x5c48>
   16a6c:	cmp	r0, r5
   16a70:	bcs	16a88 <__assert_fail@plt+0x5b44>
   16a74:	bl	10e84 <__errno_location@plt>
   16a78:	mov	r3, #12
   16a7c:	str	r3, [r0]
   16a80:	mov	r0, #0
   16a84:	pop	{r4, r5, r6, pc}
   16a88:	mul	r1, r5, r4
   16a8c:	mov	r0, r6
   16a90:	pop	{r4, r5, r6, lr}
   16a94:	b	1674c <__assert_fail@plt+0x5808>
   16a98:	push	{lr}		; (str lr, [sp, #-4]!)
   16a9c:	sub	sp, sp, #268	; 0x10c
   16aa0:	add	r1, sp, #4
   16aa4:	ldr	r2, [pc, #60]	; 16ae8 <__assert_fail@plt+0x5ba4>
   16aa8:	bl	16af4 <__assert_fail@plt+0x5bb0>
   16aac:	cmp	r0, #0
   16ab0:	movne	r0, #0
   16ab4:	bne	16ae0 <__assert_fail@plt+0x5b9c>
   16ab8:	ldr	r1, [pc, #44]	; 16aec <__assert_fail@plt+0x5ba8>
   16abc:	add	r0, sp, #4
   16ac0:	bl	10cec <strcmp@plt>
   16ac4:	cmp	r0, #0
   16ac8:	beq	16ae0 <__assert_fail@plt+0x5b9c>
   16acc:	add	r0, sp, #4
   16ad0:	ldr	r1, [pc, #24]	; 16af0 <__assert_fail@plt+0x5bac>
   16ad4:	bl	10cec <strcmp@plt>
   16ad8:	adds	r0, r0, #0
   16adc:	movne	r0, #1
   16ae0:	add	sp, sp, #268	; 0x10c
   16ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ae8:	andeq	r0, r0, r1, lsl #2
   16aec:	andeq	r8, r1, r4, lsr #1
   16af0:	andeq	r8, r1, ip, lsl #20
   16af4:	push	{r4, r5, r6, lr}
   16af8:	mov	r5, r1
   16afc:	mov	r1, #0
   16b00:	mov	r4, r2
   16b04:	bl	10ef0 <setlocale@plt>
   16b08:	subs	r6, r0, #0
   16b0c:	beq	16b68 <__assert_fail@plt+0x5c24>
   16b10:	bl	10e6c <strlen@plt>
   16b14:	cmp	r4, r0
   16b18:	bhi	16b50 <__assert_fail@plt+0x5c0c>
   16b1c:	cmp	r4, #0
   16b20:	bne	16b2c <__assert_fail@plt+0x5be8>
   16b24:	mov	r0, #34	; 0x22
   16b28:	pop	{r4, r5, r6, pc}
   16b2c:	sub	r4, r4, #1
   16b30:	mov	r1, r6
   16b34:	mov	r2, r4
   16b38:	mov	r0, r5
   16b3c:	bl	10d34 <memcpy@plt>
   16b40:	mov	r3, #0
   16b44:	strb	r3, [r5, r4]
   16b48:	mov	r0, #34	; 0x22
   16b4c:	pop	{r4, r5, r6, pc}
   16b50:	add	r2, r0, #1
   16b54:	mov	r1, r6
   16b58:	mov	r0, r5
   16b5c:	bl	10d34 <memcpy@plt>
   16b60:	mov	r0, #0
   16b64:	pop	{r4, r5, r6, pc}
   16b68:	cmp	r4, #0
   16b6c:	beq	16b7c <__assert_fail@plt+0x5c38>
   16b70:	strb	r6, [r5]
   16b74:	mov	r0, #22
   16b78:	pop	{r4, r5, r6, pc}
   16b7c:	mov	r0, #22
   16b80:	pop	{r4, r5, r6, pc}
   16b84:	mov	r1, #0
   16b88:	b	10ef0 <setlocale@plt>
   16b8c:	subs	r2, r1, #1
   16b90:	bxeq	lr
   16b94:	bcc	16d6c <__assert_fail@plt+0x5e28>
   16b98:	cmp	r0, r1
   16b9c:	bls	16d50 <__assert_fail@plt+0x5e0c>
   16ba0:	tst	r1, r2
   16ba4:	beq	16d5c <__assert_fail@plt+0x5e18>
   16ba8:	clz	r3, r0
   16bac:	clz	r2, r1
   16bb0:	sub	r3, r2, r3
   16bb4:	rsbs	r3, r3, #31
   16bb8:	addne	r3, r3, r3, lsl #1
   16bbc:	mov	r2, #0
   16bc0:	addne	pc, pc, r3, lsl #2
   16bc4:	nop			; (mov r0, r0)
   16bc8:	cmp	r0, r1, lsl #31
   16bcc:	adc	r2, r2, r2
   16bd0:	subcs	r0, r0, r1, lsl #31
   16bd4:	cmp	r0, r1, lsl #30
   16bd8:	adc	r2, r2, r2
   16bdc:	subcs	r0, r0, r1, lsl #30
   16be0:	cmp	r0, r1, lsl #29
   16be4:	adc	r2, r2, r2
   16be8:	subcs	r0, r0, r1, lsl #29
   16bec:	cmp	r0, r1, lsl #28
   16bf0:	adc	r2, r2, r2
   16bf4:	subcs	r0, r0, r1, lsl #28
   16bf8:	cmp	r0, r1, lsl #27
   16bfc:	adc	r2, r2, r2
   16c00:	subcs	r0, r0, r1, lsl #27
   16c04:	cmp	r0, r1, lsl #26
   16c08:	adc	r2, r2, r2
   16c0c:	subcs	r0, r0, r1, lsl #26
   16c10:	cmp	r0, r1, lsl #25
   16c14:	adc	r2, r2, r2
   16c18:	subcs	r0, r0, r1, lsl #25
   16c1c:	cmp	r0, r1, lsl #24
   16c20:	adc	r2, r2, r2
   16c24:	subcs	r0, r0, r1, lsl #24
   16c28:	cmp	r0, r1, lsl #23
   16c2c:	adc	r2, r2, r2
   16c30:	subcs	r0, r0, r1, lsl #23
   16c34:	cmp	r0, r1, lsl #22
   16c38:	adc	r2, r2, r2
   16c3c:	subcs	r0, r0, r1, lsl #22
   16c40:	cmp	r0, r1, lsl #21
   16c44:	adc	r2, r2, r2
   16c48:	subcs	r0, r0, r1, lsl #21
   16c4c:	cmp	r0, r1, lsl #20
   16c50:	adc	r2, r2, r2
   16c54:	subcs	r0, r0, r1, lsl #20
   16c58:	cmp	r0, r1, lsl #19
   16c5c:	adc	r2, r2, r2
   16c60:	subcs	r0, r0, r1, lsl #19
   16c64:	cmp	r0, r1, lsl #18
   16c68:	adc	r2, r2, r2
   16c6c:	subcs	r0, r0, r1, lsl #18
   16c70:	cmp	r0, r1, lsl #17
   16c74:	adc	r2, r2, r2
   16c78:	subcs	r0, r0, r1, lsl #17
   16c7c:	cmp	r0, r1, lsl #16
   16c80:	adc	r2, r2, r2
   16c84:	subcs	r0, r0, r1, lsl #16
   16c88:	cmp	r0, r1, lsl #15
   16c8c:	adc	r2, r2, r2
   16c90:	subcs	r0, r0, r1, lsl #15
   16c94:	cmp	r0, r1, lsl #14
   16c98:	adc	r2, r2, r2
   16c9c:	subcs	r0, r0, r1, lsl #14
   16ca0:	cmp	r0, r1, lsl #13
   16ca4:	adc	r2, r2, r2
   16ca8:	subcs	r0, r0, r1, lsl #13
   16cac:	cmp	r0, r1, lsl #12
   16cb0:	adc	r2, r2, r2
   16cb4:	subcs	r0, r0, r1, lsl #12
   16cb8:	cmp	r0, r1, lsl #11
   16cbc:	adc	r2, r2, r2
   16cc0:	subcs	r0, r0, r1, lsl #11
   16cc4:	cmp	r0, r1, lsl #10
   16cc8:	adc	r2, r2, r2
   16ccc:	subcs	r0, r0, r1, lsl #10
   16cd0:	cmp	r0, r1, lsl #9
   16cd4:	adc	r2, r2, r2
   16cd8:	subcs	r0, r0, r1, lsl #9
   16cdc:	cmp	r0, r1, lsl #8
   16ce0:	adc	r2, r2, r2
   16ce4:	subcs	r0, r0, r1, lsl #8
   16ce8:	cmp	r0, r1, lsl #7
   16cec:	adc	r2, r2, r2
   16cf0:	subcs	r0, r0, r1, lsl #7
   16cf4:	cmp	r0, r1, lsl #6
   16cf8:	adc	r2, r2, r2
   16cfc:	subcs	r0, r0, r1, lsl #6
   16d00:	cmp	r0, r1, lsl #5
   16d04:	adc	r2, r2, r2
   16d08:	subcs	r0, r0, r1, lsl #5
   16d0c:	cmp	r0, r1, lsl #4
   16d10:	adc	r2, r2, r2
   16d14:	subcs	r0, r0, r1, lsl #4
   16d18:	cmp	r0, r1, lsl #3
   16d1c:	adc	r2, r2, r2
   16d20:	subcs	r0, r0, r1, lsl #3
   16d24:	cmp	r0, r1, lsl #2
   16d28:	adc	r2, r2, r2
   16d2c:	subcs	r0, r0, r1, lsl #2
   16d30:	cmp	r0, r1, lsl #1
   16d34:	adc	r2, r2, r2
   16d38:	subcs	r0, r0, r1, lsl #1
   16d3c:	cmp	r0, r1
   16d40:	adc	r2, r2, r2
   16d44:	subcs	r0, r0, r1
   16d48:	mov	r0, r2
   16d4c:	bx	lr
   16d50:	moveq	r0, #1
   16d54:	movne	r0, #0
   16d58:	bx	lr
   16d5c:	clz	r2, r1
   16d60:	rsb	r2, r2, #31
   16d64:	lsr	r0, r0, r2
   16d68:	bx	lr
   16d6c:	cmp	r0, #0
   16d70:	mvnne	r0, #0
   16d74:	b	17014 <__assert_fail@plt+0x60d0>
   16d78:	cmp	r1, #0
   16d7c:	beq	16d6c <__assert_fail@plt+0x5e28>
   16d80:	push	{r0, r1, lr}
   16d84:	bl	16b8c <__assert_fail@plt+0x5c48>
   16d88:	pop	{r1, r2, lr}
   16d8c:	mul	r3, r2, r0
   16d90:	sub	r1, r1, r3
   16d94:	bx	lr
   16d98:	cmp	r1, #0
   16d9c:	beq	16fa8 <__assert_fail@plt+0x6064>
   16da0:	eor	ip, r0, r1
   16da4:	rsbmi	r1, r1, #0
   16da8:	subs	r2, r1, #1
   16dac:	beq	16f74 <__assert_fail@plt+0x6030>
   16db0:	movs	r3, r0
   16db4:	rsbmi	r3, r0, #0
   16db8:	cmp	r3, r1
   16dbc:	bls	16f80 <__assert_fail@plt+0x603c>
   16dc0:	tst	r1, r2
   16dc4:	beq	16f90 <__assert_fail@plt+0x604c>
   16dc8:	clz	r2, r3
   16dcc:	clz	r0, r1
   16dd0:	sub	r2, r0, r2
   16dd4:	rsbs	r2, r2, #31
   16dd8:	addne	r2, r2, r2, lsl #1
   16ddc:	mov	r0, #0
   16de0:	addne	pc, pc, r2, lsl #2
   16de4:	nop			; (mov r0, r0)
   16de8:	cmp	r3, r1, lsl #31
   16dec:	adc	r0, r0, r0
   16df0:	subcs	r3, r3, r1, lsl #31
   16df4:	cmp	r3, r1, lsl #30
   16df8:	adc	r0, r0, r0
   16dfc:	subcs	r3, r3, r1, lsl #30
   16e00:	cmp	r3, r1, lsl #29
   16e04:	adc	r0, r0, r0
   16e08:	subcs	r3, r3, r1, lsl #29
   16e0c:	cmp	r3, r1, lsl #28
   16e10:	adc	r0, r0, r0
   16e14:	subcs	r3, r3, r1, lsl #28
   16e18:	cmp	r3, r1, lsl #27
   16e1c:	adc	r0, r0, r0
   16e20:	subcs	r3, r3, r1, lsl #27
   16e24:	cmp	r3, r1, lsl #26
   16e28:	adc	r0, r0, r0
   16e2c:	subcs	r3, r3, r1, lsl #26
   16e30:	cmp	r3, r1, lsl #25
   16e34:	adc	r0, r0, r0
   16e38:	subcs	r3, r3, r1, lsl #25
   16e3c:	cmp	r3, r1, lsl #24
   16e40:	adc	r0, r0, r0
   16e44:	subcs	r3, r3, r1, lsl #24
   16e48:	cmp	r3, r1, lsl #23
   16e4c:	adc	r0, r0, r0
   16e50:	subcs	r3, r3, r1, lsl #23
   16e54:	cmp	r3, r1, lsl #22
   16e58:	adc	r0, r0, r0
   16e5c:	subcs	r3, r3, r1, lsl #22
   16e60:	cmp	r3, r1, lsl #21
   16e64:	adc	r0, r0, r0
   16e68:	subcs	r3, r3, r1, lsl #21
   16e6c:	cmp	r3, r1, lsl #20
   16e70:	adc	r0, r0, r0
   16e74:	subcs	r3, r3, r1, lsl #20
   16e78:	cmp	r3, r1, lsl #19
   16e7c:	adc	r0, r0, r0
   16e80:	subcs	r3, r3, r1, lsl #19
   16e84:	cmp	r3, r1, lsl #18
   16e88:	adc	r0, r0, r0
   16e8c:	subcs	r3, r3, r1, lsl #18
   16e90:	cmp	r3, r1, lsl #17
   16e94:	adc	r0, r0, r0
   16e98:	subcs	r3, r3, r1, lsl #17
   16e9c:	cmp	r3, r1, lsl #16
   16ea0:	adc	r0, r0, r0
   16ea4:	subcs	r3, r3, r1, lsl #16
   16ea8:	cmp	r3, r1, lsl #15
   16eac:	adc	r0, r0, r0
   16eb0:	subcs	r3, r3, r1, lsl #15
   16eb4:	cmp	r3, r1, lsl #14
   16eb8:	adc	r0, r0, r0
   16ebc:	subcs	r3, r3, r1, lsl #14
   16ec0:	cmp	r3, r1, lsl #13
   16ec4:	adc	r0, r0, r0
   16ec8:	subcs	r3, r3, r1, lsl #13
   16ecc:	cmp	r3, r1, lsl #12
   16ed0:	adc	r0, r0, r0
   16ed4:	subcs	r3, r3, r1, lsl #12
   16ed8:	cmp	r3, r1, lsl #11
   16edc:	adc	r0, r0, r0
   16ee0:	subcs	r3, r3, r1, lsl #11
   16ee4:	cmp	r3, r1, lsl #10
   16ee8:	adc	r0, r0, r0
   16eec:	subcs	r3, r3, r1, lsl #10
   16ef0:	cmp	r3, r1, lsl #9
   16ef4:	adc	r0, r0, r0
   16ef8:	subcs	r3, r3, r1, lsl #9
   16efc:	cmp	r3, r1, lsl #8
   16f00:	adc	r0, r0, r0
   16f04:	subcs	r3, r3, r1, lsl #8
   16f08:	cmp	r3, r1, lsl #7
   16f0c:	adc	r0, r0, r0
   16f10:	subcs	r3, r3, r1, lsl #7
   16f14:	cmp	r3, r1, lsl #6
   16f18:	adc	r0, r0, r0
   16f1c:	subcs	r3, r3, r1, lsl #6
   16f20:	cmp	r3, r1, lsl #5
   16f24:	adc	r0, r0, r0
   16f28:	subcs	r3, r3, r1, lsl #5
   16f2c:	cmp	r3, r1, lsl #4
   16f30:	adc	r0, r0, r0
   16f34:	subcs	r3, r3, r1, lsl #4
   16f38:	cmp	r3, r1, lsl #3
   16f3c:	adc	r0, r0, r0
   16f40:	subcs	r3, r3, r1, lsl #3
   16f44:	cmp	r3, r1, lsl #2
   16f48:	adc	r0, r0, r0
   16f4c:	subcs	r3, r3, r1, lsl #2
   16f50:	cmp	r3, r1, lsl #1
   16f54:	adc	r0, r0, r0
   16f58:	subcs	r3, r3, r1, lsl #1
   16f5c:	cmp	r3, r1
   16f60:	adc	r0, r0, r0
   16f64:	subcs	r3, r3, r1
   16f68:	cmp	ip, #0
   16f6c:	rsbmi	r0, r0, #0
   16f70:	bx	lr
   16f74:	teq	ip, r0
   16f78:	rsbmi	r0, r0, #0
   16f7c:	bx	lr
   16f80:	movcc	r0, #0
   16f84:	asreq	r0, ip, #31
   16f88:	orreq	r0, r0, #1
   16f8c:	bx	lr
   16f90:	clz	r2, r1
   16f94:	rsb	r2, r2, #31
   16f98:	cmp	ip, #0
   16f9c:	lsr	r0, r3, r2
   16fa0:	rsbmi	r0, r0, #0
   16fa4:	bx	lr
   16fa8:	cmp	r0, #0
   16fac:	mvngt	r0, #-2147483648	; 0x80000000
   16fb0:	movlt	r0, #-2147483648	; 0x80000000
   16fb4:	b	17014 <__assert_fail@plt+0x60d0>
   16fb8:	cmp	r1, #0
   16fbc:	beq	16fa8 <__assert_fail@plt+0x6064>
   16fc0:	push	{r0, r1, lr}
   16fc4:	bl	16da0 <__assert_fail@plt+0x5e5c>
   16fc8:	pop	{r1, r2, lr}
   16fcc:	mul	r3, r2, r0
   16fd0:	sub	r1, r1, r3
   16fd4:	bx	lr
   16fd8:	cmp	r3, #0
   16fdc:	cmpeq	r2, #0
   16fe0:	bne	16ff8 <__assert_fail@plt+0x60b4>
   16fe4:	cmp	r1, #0
   16fe8:	cmpeq	r0, #0
   16fec:	mvnne	r1, #0
   16ff0:	mvnne	r0, #0
   16ff4:	b	17014 <__assert_fail@plt+0x60d0>
   16ff8:	sub	sp, sp, #8
   16ffc:	push	{sp, lr}
   17000:	bl	17024 <__assert_fail@plt+0x60e0>
   17004:	ldr	lr, [sp, #4]
   17008:	add	sp, sp, #8
   1700c:	pop	{r2, r3}
   17010:	bx	lr
   17014:	push	{r1, lr}
   17018:	mov	r0, #8
   1701c:	bl	10ce0 <raise@plt>
   17020:	pop	{r1, pc}
   17024:	cmp	r1, r3
   17028:	push	{r4, r5, r6, r7, r8, r9, lr}
   1702c:	cmpeq	r0, r2
   17030:	mov	r4, r0
   17034:	mov	r5, r1
   17038:	ldr	r9, [sp, #28]
   1703c:	movcc	r0, #0
   17040:	movcc	r1, #0
   17044:	bcc	1713c <__assert_fail@plt+0x61f8>
   17048:	cmp	r3, #0
   1704c:	clzeq	ip, r2
   17050:	clzne	ip, r3
   17054:	addeq	ip, ip, #32
   17058:	cmp	r5, #0
   1705c:	clzeq	r1, r4
   17060:	addeq	r1, r1, #32
   17064:	clzne	r1, r5
   17068:	sub	ip, ip, r1
   1706c:	sub	lr, ip, #32
   17070:	lsl	r7, r3, ip
   17074:	rsb	r8, ip, #32
   17078:	orr	r7, r7, r2, lsl lr
   1707c:	orr	r7, r7, r2, lsr r8
   17080:	lsl	r6, r2, ip
   17084:	cmp	r5, r7
   17088:	cmpeq	r4, r6
   1708c:	movcc	r0, #0
   17090:	movcc	r1, #0
   17094:	bcc	170b0 <__assert_fail@plt+0x616c>
   17098:	mov	r3, #1
   1709c:	subs	r4, r4, r6
   170a0:	lsl	r1, r3, lr
   170a4:	lsl	r0, r3, ip
   170a8:	orr	r1, r1, r3, lsr r8
   170ac:	sbc	r5, r5, r7
   170b0:	cmp	ip, #0
   170b4:	beq	1713c <__assert_fail@plt+0x61f8>
   170b8:	lsrs	r3, r7, #1
   170bc:	rrx	r2, r6
   170c0:	mov	r6, ip
   170c4:	b	170e8 <__assert_fail@plt+0x61a4>
   170c8:	subs	r4, r4, r2
   170cc:	sbc	r5, r5, r3
   170d0:	adds	r4, r4, r4
   170d4:	adc	r5, r5, r5
   170d8:	adds	r4, r4, #1
   170dc:	adc	r5, r5, #0
   170e0:	subs	r6, r6, #1
   170e4:	beq	17104 <__assert_fail@plt+0x61c0>
   170e8:	cmp	r5, r3
   170ec:	cmpeq	r4, r2
   170f0:	bcs	170c8 <__assert_fail@plt+0x6184>
   170f4:	adds	r4, r4, r4
   170f8:	adc	r5, r5, r5
   170fc:	subs	r6, r6, #1
   17100:	bne	170e8 <__assert_fail@plt+0x61a4>
   17104:	lsr	r6, r4, ip
   17108:	lsr	r7, r5, ip
   1710c:	orr	r6, r6, r5, lsl r8
   17110:	adds	r2, r0, r4
   17114:	orr	r6, r6, r5, lsr lr
   17118:	adc	r3, r1, r5
   1711c:	lsl	r1, r7, ip
   17120:	orr	r1, r1, r6, lsl lr
   17124:	lsl	r0, r6, ip
   17128:	orr	r1, r1, r6, lsr r8
   1712c:	subs	r0, r2, r0
   17130:	mov	r4, r6
   17134:	mov	r5, r7
   17138:	sbc	r1, r3, r1
   1713c:	cmp	r9, #0
   17140:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17144:	strd	r4, [r9]
   17148:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1714c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17150:	mov	r7, r0
   17154:	ldr	r6, [pc, #72]	; 171a4 <__assert_fail@plt+0x6260>
   17158:	ldr	r5, [pc, #72]	; 171a8 <__assert_fail@plt+0x6264>
   1715c:	add	r6, pc, r6
   17160:	add	r5, pc, r5
   17164:	sub	r6, r6, r5
   17168:	mov	r8, r1
   1716c:	mov	r9, r2
   17170:	bl	10ca8 <calloc@plt-0x20>
   17174:	asrs	r6, r6, #2
   17178:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1717c:	mov	r4, #0
   17180:	add	r4, r4, #1
   17184:	ldr	r3, [r5], #4
   17188:	mov	r2, r9
   1718c:	mov	r1, r8
   17190:	mov	r0, r7
   17194:	blx	r3
   17198:	cmp	r6, r4
   1719c:	bne	17180 <__assert_fail@plt+0x623c>
   171a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171a4:	andeq	r1, r1, ip, lsr #27
   171a8:	andeq	r1, r1, r4, lsr #27
   171ac:	bx	lr
   171b0:	ldr	r3, [pc, #12]	; 171c4 <__assert_fail@plt+0x6280>
   171b4:	mov	r1, #0
   171b8:	add	r3, pc, r3
   171bc:	ldr	r2, [r3]
   171c0:	b	10e9c <__cxa_atexit@plt>
   171c4:	andeq	r1, r1, ip, lsr #30

Disassembly of section .fini:

000171c8 <.fini>:
   171c8:	push	{r3, lr}
   171cc:	pop	{r3, pc}
