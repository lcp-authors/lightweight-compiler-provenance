
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	113d4 <__assert_fail@plt+0x4c>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	r7, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <strcmp@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <posix_fadvise64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <read@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <fflush@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <wcwidth@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <__memmove_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <ferror@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <memcmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <fputc_unlocked@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <dcgettext@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <sysconf@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <realloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <textdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <iswcntrl@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <rawmemchr@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <__fxstat64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #94208	; 0x17000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #94208	; 0x17000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <sysinfo@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #94208	; 0x17000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <malloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #94208	; 0x17000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <__libc_start_main@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #94208	; 0x17000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__freading@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #94208	; 0x17000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #94208	; 0x17000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <getopt_long@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #94208	; 0x17000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_b_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #94208	; 0x17000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #94208	; 0x17000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <feof@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #94208	; 0x17000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <iswspace@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #94208	; 0x17000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <strlen@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #94208	; 0x17000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <strchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #94208	; 0x17000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <getpagesize@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #94208	; 0x17000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <__errno_location@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #94208	; 0x17000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <__cxa_atexit@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #94208	; 0x17000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <setvbuf@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #94208	; 0x17000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <memset@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #94208	; 0x17000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <btowc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #94208	; 0x17000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <fgetc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #94208	; 0x17000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #94208	; 0x17000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #94208	; 0x17000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #94208	; 0x17000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #94208	; 0x17000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #94208	; 0x17000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <__overflow@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #94208	; 0x17000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #94208	; 0x17000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <strrchr@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #94208	; 0x17000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <nl_langinfo@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #94208	; 0x17000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <fopen64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #94208	; 0x17000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <bindtextdomain@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #94208	; 0x17000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <getdelim@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #94208	; 0x17000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <__xstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #94208	; 0x17000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <strncmp@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #94208	; 0x17000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <abort@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #94208	; 0x17000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <close@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #94208	; 0x17000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <__assert_fail@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #94208	; 0x17000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

Disassembly of section .text:

00011398 <_obstack_begin@@Base-0x5d68>:
   11398:	mov	fp, #0
   1139c:	mov	lr, #0
   113a0:	pop	{r1}		; (ldr r1, [sp], #4)
   113a4:	mov	r2, sp
   113a8:	push	{r2}		; (str r2, [sp, #-4]!)
   113ac:	push	{r0}		; (str r0, [sp, #-4]!)
   113b0:	ldr	ip, [pc, #16]	; 113c8 <__assert_fail@plt+0x40>
   113b4:	push	{ip}		; (str ip, [sp, #-4]!)
   113b8:	ldr	r0, [pc, #12]	; 113cc <__assert_fail@plt+0x44>
   113bc:	ldr	r3, [pc, #12]	; 113d0 <__assert_fail@plt+0x48>
   113c0:	bl	111fc <__libc_start_main@plt>
   113c4:	bl	11370 <abort@plt>
   113c8:	andeq	r7, r1, r8, lsl #20
   113cc:	andeq	r2, r1, r0, lsr #16
   113d0:	andeq	r7, r1, r8, lsr #19
   113d4:	ldr	r3, [pc, #20]	; 113f0 <__assert_fail@plt+0x68>
   113d8:	ldr	r2, [pc, #20]	; 113f4 <__assert_fail@plt+0x6c>
   113dc:	add	r3, pc, r3
   113e0:	ldr	r2, [r3, r2]
   113e4:	cmp	r2, #0
   113e8:	bxeq	lr
   113ec:	b	11214 <__gmon_start__@plt>
   113f0:	andeq	r7, r1, ip, lsl ip
   113f4:	andeq	r0, r0, ip, lsl r1
   113f8:	ldr	r0, [pc, #24]	; 11418 <__assert_fail@plt+0x90>
   113fc:	ldr	r3, [pc, #24]	; 1141c <__assert_fail@plt+0x94>
   11400:	cmp	r3, r0
   11404:	bxeq	lr
   11408:	ldr	r3, [pc, #16]	; 11420 <__assert_fail@plt+0x98>
   1140c:	cmp	r3, #0
   11410:	bxeq	lr
   11414:	bx	r3
   11418:	andeq	r9, r2, r4, ror r1
   1141c:	andeq	r9, r2, r4, ror r1
   11420:	andeq	r0, r0, r0
   11424:	ldr	r0, [pc, #36]	; 11450 <__assert_fail@plt+0xc8>
   11428:	ldr	r1, [pc, #36]	; 11454 <__assert_fail@plt+0xcc>
   1142c:	sub	r1, r1, r0
   11430:	asr	r1, r1, #2
   11434:	add	r1, r1, r1, lsr #31
   11438:	asrs	r1, r1, #1
   1143c:	bxeq	lr
   11440:	ldr	r3, [pc, #16]	; 11458 <__assert_fail@plt+0xd0>
   11444:	cmp	r3, #0
   11448:	bxeq	lr
   1144c:	bx	r3
   11450:	andeq	r9, r2, r4, ror r1
   11454:	andeq	r9, r2, r4, ror r1
   11458:	andeq	r0, r0, r0
   1145c:	push	{r4, lr}
   11460:	ldr	r4, [pc, #24]	; 11480 <__assert_fail@plt+0xf8>
   11464:	ldrb	r3, [r4]
   11468:	cmp	r3, #0
   1146c:	popne	{r4, pc}
   11470:	bl	113f8 <__assert_fail@plt+0x70>
   11474:	mov	r3, #1
   11478:	strb	r3, [r4]
   1147c:	pop	{r4, pc}
   11480:	muleq	r2, ip, r1
   11484:	b	11424 <__assert_fail@plt+0x9c>
   11488:	movw	r3, #37280	; 0x91a0
   1148c:	movt	r3, #2
   11490:	ldrb	r3, [r3]
   11494:	cmp	r3, #0
   11498:	bne	114c8 <__assert_fail@plt+0x140>
   1149c:	movw	r3, #8199	; 0x2007
   114a0:	cmp	r0, r3
   114a4:	cmpne	r0, #160	; 0xa0
   114a8:	beq	114d0 <__assert_fail@plt+0x148>
   114ac:	movw	r2, #8239	; 0x202f
   114b0:	movw	r3, #8288	; 0x2060
   114b4:	cmp	r0, r3
   114b8:	cmpne	r0, r2
   114bc:	moveq	r0, #1
   114c0:	movne	r0, #0
   114c4:	bx	lr
   114c8:	mov	r0, #0
   114cc:	bx	lr
   114d0:	mov	r0, #1
   114d4:	bx	lr
   114d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114dc:	strd	r6, [sp, #8]
   114e0:	strd	r8, [sp, #16]
   114e4:	strd	sl, [sp, #24]
   114e8:	str	lr, [sp, #32]
   114ec:	sub	sp, sp, #16384	; 0x4000
   114f0:	sub	sp, sp, #52	; 0x34
   114f4:	mov	lr, r3
   114f8:	clz	r3, r3
   114fc:	lsr	r3, r3, #5
   11500:	cmp	r2, #0
   11504:	moveq	r3, #1
   11508:	str	r3, [sp, #24]
   1150c:	cmp	r3, #0
   11510:	bne	11698 <__assert_fail@plt+0x310>
   11514:	mov	r8, r3
   11518:	str	lr, [sp, #32]
   1151c:	str	r2, [sp, #28]
   11520:	str	r1, [sp, #20]
   11524:	str	r0, [sp, #36]	; 0x24
   11528:	mov	r2, #0
   1152c:	mov	r3, #0
   11530:	strd	r2, [sp, #8]
   11534:	mov	r9, r2
   11538:	str	r3, [sp, #16]
   1153c:	add	sl, sp, #44	; 0x2c
   11540:	movw	fp, #34953	; 0x8889
   11544:	movt	fp, #34952	; 0x8888
   11548:	b	115fc <__assert_fail@plt+0x274>
   1154c:	bl	11280 <__errno_location@plt>
   11550:	ldr	r4, [r0]
   11554:	ldr	r2, [sp, #36]	; 0x24
   11558:	mov	r1, #3
   1155c:	mov	r0, #0
   11560:	bl	15cd0 <__assert_fail@plt+0x4948>
   11564:	mov	r3, r0
   11568:	movw	r2, #33460	; 0x82b4
   1156c:	movt	r2, #1
   11570:	mov	r1, r4
   11574:	mov	r0, #0
   11578:	bl	111c0 <error@plt>
   1157c:	b	116a0 <__assert_fail@plt+0x318>
   11580:	mov	r3, #10
   11584:	strb	r3, [sl, r6]
   11588:	mov	r4, r9
   1158c:	ldr	r5, [sp, #16]
   11590:	mov	r0, sl
   11594:	mov	r8, r3
   11598:	mov	r1, r8
   1159c:	bl	11160 <rawmemchr@plt>
   115a0:	cmp	r7, r0
   115a4:	bls	115c0 <__assert_fail@plt+0x238>
   115a8:	add	r0, r0, #1
   115ac:	adds	r4, r4, #1
   115b0:	adc	r5, r5, #0
   115b4:	b	11598 <__assert_fail@plt+0x210>
   115b8:	mov	r4, r9
   115bc:	ldr	r5, [sp, #16]
   115c0:	subs	r3, r4, r9
   115c4:	str	r3, [sp]
   115c8:	ldr	r3, [sp, #16]
   115cc:	sbc	r3, r5, r3
   115d0:	str	r3, [sp, #4]
   115d4:	umull	r3, r6, fp, r6
   115d8:	lsr	r6, r6, #3
   115dc:	mov	r7, #0
   115e0:	ldrd	r2, [sp]
   115e4:	cmp	r3, r7
   115e8:	cmpeq	r2, r6
   115ec:	movls	r8, #1
   115f0:	movhi	r8, #0
   115f4:	mov	r9, r4
   115f8:	str	r5, [sp, #16]
   115fc:	mov	r2, #16384	; 0x4000
   11600:	mov	r1, sl
   11604:	ldr	r0, [sp, #20]
   11608:	bl	16238 <__assert_fail@plt+0x4eb0>
   1160c:	subs	r6, r0, #0
   11610:	beq	11670 <__assert_fail@plt+0x2e8>
   11614:	cmn	r6, #1
   11618:	beq	1154c <__assert_fail@plt+0x1c4>
   1161c:	ldrd	r2, [sp, #8]
   11620:	adds	r2, r2, r6
   11624:	adc	r3, r3, #0
   11628:	strd	r2, [sp, #8]
   1162c:	add	r7, sl, r6
   11630:	cmp	r8, #0
   11634:	bne	11580 <__assert_fail@plt+0x1f8>
   11638:	cmp	r7, sl
   1163c:	beq	115b8 <__assert_fail@plt+0x230>
   11640:	mov	r4, r9
   11644:	ldr	r5, [sp, #16]
   11648:	add	r2, sp, #44	; 0x2c
   1164c:	ldrb	r3, [r2], #1
   11650:	cmp	r3, #10
   11654:	movne	r3, #0
   11658:	moveq	r3, #1
   1165c:	adds	r4, r4, r3
   11660:	adc	r5, r5, #0
   11664:	cmp	r7, r2
   11668:	bne	1164c <__assert_fail@plt+0x2c4>
   1166c:	b	115c0 <__assert_fail@plt+0x238>
   11670:	ldr	r1, [sp, #32]
   11674:	ldrd	r2, [sp, #8]
   11678:	strd	r2, [r1]
   1167c:	ldr	r3, [sp, #28]
   11680:	str	r9, [r3]
   11684:	ldr	r2, [sp, #16]
   11688:	str	r2, [r3, #4]
   1168c:	mov	r3, #1
   11690:	str	r3, [sp, #24]
   11694:	b	116a0 <__assert_fail@plt+0x318>
   11698:	mov	r3, #0
   1169c:	str	r3, [sp, #24]
   116a0:	ldr	r0, [sp, #24]
   116a4:	add	sp, sp, #16384	; 0x4000
   116a8:	add	sp, sp, #52	; 0x34
   116ac:	ldrd	r4, [sp]
   116b0:	ldrd	r6, [sp, #8]
   116b4:	ldrd	r8, [sp, #16]
   116b8:	ldrd	sl, [sp, #24]
   116bc:	add	sp, sp, #32
   116c0:	pop	{pc}		; (ldr pc, [sp], #4)
   116c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   116c8:	strd	r6, [sp, #8]
   116cc:	str	r8, [sp, #16]
   116d0:	str	lr, [sp, #20]
   116d4:	sub	sp, sp, #24
   116d8:	mov	r6, r2
   116dc:	mov	r7, r3
   116e0:	ldr	r5, [sp, #72]	; 0x48
   116e4:	movw	r3, #37280	; 0x91a0
   116e8:	movt	r3, #2
   116ec:	ldrb	r3, [r3, #1]
   116f0:	cmp	r3, #0
   116f4:	ldreq	r4, [pc, #500]	; 118f0 <__assert_fail@plt+0x568>
   116f8:	bne	117d4 <__assert_fail@plt+0x44c>
   116fc:	movw	r3, #37280	; 0x91a0
   11700:	movt	r3, #2
   11704:	ldrb	r3, [r3, #8]
   11708:	cmp	r3, #0
   1170c:	bne	11808 <__assert_fail@plt+0x480>
   11710:	movw	r3, #37280	; 0x91a0
   11714:	movt	r3, #2
   11718:	ldrb	r3, [r3, #9]
   1171c:	cmp	r3, #0
   11720:	bne	11844 <__assert_fail@plt+0x4bc>
   11724:	movw	r3, #37280	; 0x91a0
   11728:	movt	r3, #2
   1172c:	ldrb	r3, [r3, #10]
   11730:	cmp	r3, #0
   11734:	bne	1187c <__assert_fail@plt+0x4f4>
   11738:	movw	r3, #37280	; 0x91a0
   1173c:	movt	r3, #2
   11740:	ldrb	r3, [r3, #11]
   11744:	cmp	r3, #0
   11748:	bne	118b4 <__assert_fail@plt+0x52c>
   1174c:	cmp	r5, #0
   11750:	beq	11790 <__assert_fail@plt+0x408>
   11754:	mov	r1, #10
   11758:	mov	r0, r5
   1175c:	bl	11268 <strchr@plt>
   11760:	cmp	r0, #0
   11764:	beq	1177c <__assert_fail@plt+0x3f4>
   11768:	mov	r2, r5
   1176c:	mov	r1, #3
   11770:	mov	r0, #0
   11774:	bl	15cd0 <__assert_fail@plt+0x4948>
   11778:	mov	r5, r0
   1177c:	mov	r2, r5
   11780:	movw	r1, #31512	; 0x7b18
   11784:	movt	r1, #1
   11788:	mov	r0, #1
   1178c:	bl	112c8 <__printf_chk@plt>
   11790:	movw	r3, #37268	; 0x9194
   11794:	movt	r3, #2
   11798:	ldr	r0, [r3]
   1179c:	ldr	r3, [r0, #20]
   117a0:	ldr	r2, [r0, #24]
   117a4:	cmp	r3, r2
   117a8:	addcc	r2, r3, #1
   117ac:	strcc	r2, [r0, #20]
   117b0:	movcc	r2, #10
   117b4:	strbcc	r2, [r3]
   117b8:	bcs	118e4 <__assert_fail@plt+0x55c>
   117bc:	add	sp, sp, #24
   117c0:	ldrd	r4, [sp]
   117c4:	ldrd	r6, [sp, #8]
   117c8:	ldr	r8, [sp, #16]
   117cc:	add	sp, sp, #20
   117d0:	pop	{pc}		; (ldr pc, [sp], #4)
   117d4:	movw	r3, #37280	; 0x91a0
   117d8:	movt	r3, #2
   117dc:	ldr	r8, [r3, #4]
   117e0:	mov	r2, sp
   117e4:	bl	138bc <__assert_fail@plt+0x2534>
   117e8:	movw	r4, #31280	; 0x7a30
   117ec:	movt	r4, #1
   117f0:	mov	r3, r0
   117f4:	mov	r2, r8
   117f8:	add	r1, r4, #1
   117fc:	mov	r0, #1
   11800:	bl	112c8 <__printf_chk@plt>
   11804:	b	116fc <__assert_fail@plt+0x374>
   11808:	movw	r3, #37280	; 0x91a0
   1180c:	movt	r3, #2
   11810:	ldr	r8, [r3, #4]
   11814:	mov	r2, sp
   11818:	mov	r0, r6
   1181c:	mov	r1, r7
   11820:	bl	138bc <__assert_fail@plt+0x2534>
   11824:	mov	r3, r0
   11828:	mov	r2, r8
   1182c:	mov	r1, r4
   11830:	mov	r0, #1
   11834:	bl	112c8 <__printf_chk@plt>
   11838:	movw	r4, #31280	; 0x7a30
   1183c:	movt	r4, #1
   11840:	b	11710 <__assert_fail@plt+0x388>
   11844:	movw	r3, #37280	; 0x91a0
   11848:	movt	r3, #2
   1184c:	ldr	r6, [r3, #4]
   11850:	mov	r2, sp
   11854:	ldrd	r0, [sp, #48]	; 0x30
   11858:	bl	138bc <__assert_fail@plt+0x2534>
   1185c:	mov	r3, r0
   11860:	mov	r2, r6
   11864:	mov	r1, r4
   11868:	mov	r0, #1
   1186c:	bl	112c8 <__printf_chk@plt>
   11870:	movw	r4, #31280	; 0x7a30
   11874:	movt	r4, #1
   11878:	b	11724 <__assert_fail@plt+0x39c>
   1187c:	movw	r3, #37280	; 0x91a0
   11880:	movt	r3, #2
   11884:	ldr	r6, [r3, #4]
   11888:	mov	r2, sp
   1188c:	ldrd	r0, [sp, #56]	; 0x38
   11890:	bl	138bc <__assert_fail@plt+0x2534>
   11894:	mov	r3, r0
   11898:	mov	r2, r6
   1189c:	mov	r1, r4
   118a0:	mov	r0, #1
   118a4:	bl	112c8 <__printf_chk@plt>
   118a8:	movw	r4, #31280	; 0x7a30
   118ac:	movt	r4, #1
   118b0:	b	11738 <__assert_fail@plt+0x3b0>
   118b4:	movw	r3, #37280	; 0x91a0
   118b8:	movt	r3, #2
   118bc:	ldr	r6, [r3, #4]
   118c0:	mov	r2, sp
   118c4:	ldrd	r0, [sp, #64]	; 0x40
   118c8:	bl	138bc <__assert_fail@plt+0x2534>
   118cc:	mov	r3, r0
   118d0:	mov	r2, r6
   118d4:	mov	r1, r4
   118d8:	mov	r0, #1
   118dc:	bl	112c8 <__printf_chk@plt>
   118e0:	b	1174c <__assert_fail@plt+0x3c4>
   118e4:	mov	r1, #10
   118e8:	bl	11304 <__overflow@plt>
   118ec:	b	117bc <__assert_fail@plt+0x434>
   118f0:	andeq	r7, r1, r1, lsr sl
   118f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   118f8:	strd	r6, [sp, #8]
   118fc:	strd	r8, [sp, #16]
   11900:	strd	sl, [sp, #24]
   11904:	str	lr, [sp, #32]
   11908:	sub	sp, sp, #16384	; 0x4000
   1190c:	sub	sp, sp, #148	; 0x94
   11910:	str	r0, [sp, #68]	; 0x44
   11914:	mov	r6, r2
   11918:	subs	r3, r1, #0
   1191c:	str	r3, [sp, #84]	; 0x54
   11920:	beq	11a7c <__assert_fail@plt+0x6f4>
   11924:	ldr	r3, [sp, #84]	; 0x54
   11928:	str	r3, [sp, #88]	; 0x58
   1192c:	mov	r2, #0
   11930:	mov	r3, #0
   11934:	strd	r2, [sp, #120]	; 0x78
   11938:	strd	r2, [sp, #128]	; 0x80
   1193c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   11940:	cmp	r0, #1
   11944:	bls	11a98 <__assert_fail@plt+0x710>
   11948:	movw	r3, #37280	; 0x91a0
   1194c:	movt	r3, #2
   11950:	ldrb	r5, [r3, #10]
   11954:	ldrb	r3, [r3, #9]
   11958:	str	r3, [sp, #80]	; 0x50
   1195c:	movw	r3, #37280	; 0x91a0
   11960:	movt	r3, #2
   11964:	ldrb	r4, [r3, #8]
   11968:	cmp	r4, #0
   1196c:	bne	11ac8 <__assert_fail@plt+0x740>
   11970:	movw	r3, #37280	; 0x91a0
   11974:	movt	r3, #2
   11978:	ldrb	r4, [r3, #11]
   1197c:	eor	r3, r5, #1
   11980:	ldr	r2, [sp, #80]	; 0x50
   11984:	orrs	r3, r2, r3
   11988:	bne	11ac8 <__assert_fail@plt+0x740>
   1198c:	movw	r3, #37280	; 0x91a0
   11990:	movt	r3, #2
   11994:	ldrb	r3, [r3, #1]
   11998:	orrs	r3, r4, r3
   1199c:	bne	12420 <__assert_fail@plt+0x1098>
   119a0:	ldr	r3, [r6]
   119a4:	cmp	r3, #0
   119a8:	bgt	11c34 <__assert_fail@plt+0x8ac>
   119ac:	ldr	r3, [r6]
   119b0:	cmp	r3, #0
   119b4:	bne	11cb4 <__assert_fail@plt+0x92c>
   119b8:	ldr	r3, [r6, #24]
   119bc:	and	r3, r3, #53248	; 0xd000
   119c0:	cmp	r3, #32768	; 0x8000
   119c4:	bne	11cb4 <__assert_fail@plt+0x92c>
   119c8:	ldrd	r4, [r6, #56]	; 0x38
   119cc:	cmp	r4, #0
   119d0:	sbcs	r3, r5, #0
   119d4:	blt	11cb4 <__assert_fail@plt+0x92c>
   119d8:	add	r3, sp, #16384	; 0x4000
   119dc:	add	r3, r3, #184	; 0xb8
   119e0:	ldrd	r2, [r3]
   119e4:	cmp	r2, #0
   119e8:	sbcs	r3, r3, #0
   119ec:	blt	11c4c <__assert_fail@plt+0x8c4>
   119f0:	movw	r3, #37280	; 0x91a0
   119f4:	movt	r3, #2
   119f8:	ldr	r2, [r3, #12]
   119fc:	udiv	r3, r4, r2
   11a00:	mls	r3, r2, r3, r4
   11a04:	cmp	r3, #0
   11a08:	beq	11c74 <__assert_fail@plt+0x8ec>
   11a0c:	mov	r1, #0
   11a10:	add	r3, sp, #16384	; 0x4000
   11a14:	add	r3, r3, #184	; 0xb8
   11a18:	ldrd	r2, [r3]
   11a1c:	cmp	r4, r2
   11a20:	sbcs	r3, r1, r3
   11a24:	movlt	r2, #0
   11a28:	movlt	r3, r2
   11a2c:	blt	11a50 <__assert_fail@plt+0x6c8>
   11a30:	add	r3, sp, #16384	; 0x4000
   11a34:	add	r3, r3, #184	; 0xb8
   11a38:	ldr	r3, [r3]
   11a3c:	subs	r2, r4, r3
   11a40:	add	r3, sp, #16384	; 0x4000
   11a44:	add	r3, r3, #188	; 0xbc
   11a48:	ldr	r3, [r3]
   11a4c:	sbc	r3, r1, r3
   11a50:	str	r2, [sp, #120]	; 0x78
   11a54:	str	r3, [sp, #124]	; 0x7c
   11a58:	mov	r8, #0
   11a5c:	mov	r9, #0
   11a60:	mov	r7, r8
   11a64:	mov	sl, r9
   11a68:	mov	r4, r8
   11a6c:	mov	r6, r9
   11a70:	mov	r3, #1
   11a74:	str	r3, [sp, #72]	; 0x48
   11a78:	b	11b34 <__assert_fail@plt+0x7ac>
   11a7c:	mov	r2, #5
   11a80:	movw	r1, #31516	; 0x7b1c
   11a84:	movt	r1, #1
   11a88:	mov	r0, #0
   11a8c:	bl	11124 <dcgettext@plt>
   11a90:	str	r0, [sp, #88]	; 0x58
   11a94:	b	1192c <__assert_fail@plt+0x5a4>
   11a98:	movw	r3, #37280	; 0x91a0
   11a9c:	movt	r3, #2
   11aa0:	ldrb	r3, [r3, #10]
   11aa4:	cmp	r3, #0
   11aa8:	movweq	r3, #37280	; 0x91a0
   11aac:	movteq	r3, #2
   11ab0:	ldrbeq	r5, [r3, #9]
   11ab4:	movne	r5, #1
   11ab8:	and	r5, r5, #1
   11abc:	mov	r3, #0
   11ac0:	str	r3, [sp, #80]	; 0x50
   11ac4:	b	1195c <__assert_fail@plt+0x5d4>
   11ac8:	mov	r3, #2
   11acc:	str	r3, [sp, #8]
   11ad0:	mov	r2, #0
   11ad4:	mov	r3, #0
   11ad8:	strd	r2, [sp]
   11adc:	ldr	r0, [sp, #68]	; 0x44
   11ae0:	bl	13600 <__assert_fail@plt+0x2278>
   11ae4:	ldr	r3, [sp, #80]	; 0x50
   11ae8:	eor	r3, r3, #1
   11aec:	tst	r5, r3
   11af0:	bne	1243c <__assert_fail@plt+0x10b4>
   11af4:	ldr	r3, [sp, #80]	; 0x50
   11af8:	orrs	r3, r3, r4
   11afc:	str	r3, [sp, #72]	; 0x48
   11b00:	bne	11dd0 <__assert_fail@plt+0xa48>
   11b04:	add	r3, sp, #120	; 0x78
   11b08:	add	r2, sp, #128	; 0x80
   11b0c:	ldr	r1, [sp, #68]	; 0x44
   11b10:	ldr	r0, [sp, #88]	; 0x58
   11b14:	bl	114d8 <__assert_fail@plt+0x150>
   11b18:	str	r0, [sp, #72]	; 0x48
   11b1c:	mov	r8, #0
   11b20:	mov	r9, #0
   11b24:	mov	r7, r8
   11b28:	mov	sl, r9
   11b2c:	mov	r4, r8
   11b30:	mov	r6, r9
   11b34:	movw	r3, #37280	; 0x91a0
   11b38:	movt	r3, #2
   11b3c:	ldrb	r3, [r3, #9]
   11b40:	ldr	r2, [sp, #80]	; 0x50
   11b44:	cmp	r3, r2
   11b48:	ldrhi	r7, [sp, #120]	; 0x78
   11b4c:	ldrhi	sl, [sp, #124]	; 0x7c
   11b50:	ldr	r3, [sp, #84]	; 0x54
   11b54:	str	r3, [sp, #24]
   11b58:	strd	r8, [sp, #16]
   11b5c:	ldrd	r2, [sp, #120]	; 0x78
   11b60:	strd	r2, [sp, #8]
   11b64:	str	r7, [sp]
   11b68:	str	sl, [sp, #4]
   11b6c:	mov	r2, r4
   11b70:	mov	r3, r6
   11b74:	ldrd	r0, [sp, #128]	; 0x80
   11b78:	bl	116c4 <__assert_fail@plt+0x33c>
   11b7c:	movw	r3, #37280	; 0x91a0
   11b80:	movt	r3, #2
   11b84:	ldr	r2, [r3, #16]
   11b88:	ldr	r1, [r3, #20]
   11b8c:	ldr	r0, [sp, #128]	; 0x80
   11b90:	ldr	ip, [sp, #132]	; 0x84
   11b94:	adds	r2, r2, r0
   11b98:	adc	r1, r1, ip
   11b9c:	str	r2, [r3, #16]
   11ba0:	str	r1, [r3, #20]
   11ba4:	ldr	r2, [r3, #24]
   11ba8:	ldr	r1, [r3, #28]
   11bac:	adds	r4, r2, r4
   11bb0:	adc	r6, r1, r6
   11bb4:	str	r4, [r3, #24]
   11bb8:	str	r6, [r3, #28]
   11bbc:	ldr	r2, [r3, #32]
   11bc0:	ldr	r1, [r3, #36]	; 0x24
   11bc4:	adds	r7, r2, r7
   11bc8:	adc	sl, r1, sl
   11bcc:	str	r7, [r3, #32]
   11bd0:	str	sl, [r3, #36]	; 0x24
   11bd4:	ldr	r2, [r3, #40]	; 0x28
   11bd8:	ldr	r1, [r3, #44]	; 0x2c
   11bdc:	ldr	r0, [sp, #120]	; 0x78
   11be0:	ldr	ip, [sp, #124]	; 0x7c
   11be4:	adds	r2, r2, r0
   11be8:	adc	r1, r1, ip
   11bec:	str	r2, [r3, #40]	; 0x28
   11bf0:	str	r1, [r3, #44]	; 0x2c
   11bf4:	ldrd	r2, [r3, #48]	; 0x30
   11bf8:	cmp	r3, r9
   11bfc:	cmpeq	r2, r8
   11c00:	bcs	11c10 <__assert_fail@plt+0x888>
   11c04:	movw	r3, #37280	; 0x91a0
   11c08:	movt	r3, #2
   11c0c:	strd	r8, [r3, #48]	; 0x30
   11c10:	ldr	r0, [sp, #72]	; 0x48
   11c14:	add	sp, sp, #16384	; 0x4000
   11c18:	add	sp, sp, #148	; 0x94
   11c1c:	ldrd	r4, [sp]
   11c20:	ldrd	r6, [sp, #8]
   11c24:	ldrd	r8, [sp, #16]
   11c28:	ldrd	sl, [sp, #24]
   11c2c:	add	sp, sp, #32
   11c30:	pop	{pc}		; (ldr pc, [sp], #4)
   11c34:	add	r2, r6, #8
   11c38:	ldr	r1, [sp, #68]	; 0x44
   11c3c:	mov	r0, #3
   11c40:	bl	11178 <__fxstat64@plt>
   11c44:	str	r0, [r6]
   11c48:	b	119ac <__assert_fail@plt+0x624>
   11c4c:	mov	r3, #1
   11c50:	str	r3, [sp]
   11c54:	mov	r2, #0
   11c58:	mov	r3, #0
   11c5c:	ldr	r0, [sp, #68]	; 0x44
   11c60:	bl	11190 <lseek64@plt>
   11c64:	add	r3, sp, #16384	; 0x4000
   11c68:	add	r3, r3, #184	; 0xb8
   11c6c:	strd	r0, [r3]
   11c70:	b	119f0 <__assert_fail@plt+0x668>
   11c74:	ldr	r3, [r6, #64]	; 0x40
   11c78:	sub	r2, r3, #1
   11c7c:	cmn	r2, #-536870911	; 0xe0000001
   11c80:	addls	r3, r3, #1
   11c84:	movwhi	r3, #513	; 0x201
   11c88:	udiv	r2, r4, r3
   11c8c:	mls	r3, r3, r2, r4
   11c90:	sub	r4, r4, r3
   11c94:	mov	r2, r4
   11c98:	mov	r3, #0
   11c9c:	add	r1, sp, #16384	; 0x4000
   11ca0:	add	r1, r1, #184	; 0xb8
   11ca4:	ldrd	r0, [r1]
   11ca8:	cmp	r1, r3
   11cac:	cmpeq	r0, r4
   11cb0:	bcc	11d08 <__assert_fail@plt+0x980>
   11cb4:	mov	r3, #2
   11cb8:	str	r3, [sp, #8]
   11cbc:	mov	r2, #0
   11cc0:	mov	r3, #0
   11cc4:	strd	r2, [sp]
   11cc8:	ldr	r0, [sp, #68]	; 0x44
   11ccc:	bl	13600 <__assert_fail@plt+0x2278>
   11cd0:	mov	r4, #16384	; 0x4000
   11cd4:	mov	r2, r4
   11cd8:	add	r1, sp, #140	; 0x8c
   11cdc:	ldr	r0, [sp, #68]	; 0x44
   11ce0:	bl	16238 <__assert_fail@plt+0x4eb0>
   11ce4:	cmp	r0, #0
   11ce8:	beq	11dac <__assert_fail@plt+0xa24>
   11cec:	cmn	r0, #1
   11cf0:	beq	11d58 <__assert_fail@plt+0x9d0>
   11cf4:	ldrd	r2, [sp, #120]	; 0x78
   11cf8:	adds	r6, r2, r0
   11cfc:	adc	r7, r3, #0
   11d00:	strd	r6, [sp, #120]	; 0x78
   11d04:	b	11cd4 <__assert_fail@plt+0x94c>
   11d08:	mov	r5, #0
   11d0c:	mov	r3, #1
   11d10:	str	r3, [sp]
   11d14:	mov	r3, r5
   11d18:	ldr	r0, [sp, #68]	; 0x44
   11d1c:	bl	11190 <lseek64@plt>
   11d20:	cmp	r0, #0
   11d24:	sbcs	r3, r1, #0
   11d28:	blt	11cb4 <__assert_fail@plt+0x92c>
   11d2c:	add	r3, sp, #16384	; 0x4000
   11d30:	add	r3, r3, #184	; 0xb8
   11d34:	ldr	r3, [r3]
   11d38:	subs	r4, r4, r3
   11d3c:	add	r3, sp, #16384	; 0x4000
   11d40:	add	r3, r3, #188	; 0xbc
   11d44:	ldr	r3, [r3]
   11d48:	sbc	r5, r5, r3
   11d4c:	str	r4, [sp, #120]	; 0x78
   11d50:	str	r5, [sp, #124]	; 0x7c
   11d54:	b	11cb4 <__assert_fail@plt+0x92c>
   11d58:	bl	11280 <__errno_location@plt>
   11d5c:	ldr	r4, [r0]
   11d60:	ldr	r2, [sp, #88]	; 0x58
   11d64:	mov	r1, #3
   11d68:	mov	r0, #0
   11d6c:	bl	15cd0 <__assert_fail@plt+0x4948>
   11d70:	mov	r3, r0
   11d74:	movw	r2, #33460	; 0x82b4
   11d78:	movt	r2, #1
   11d7c:	mov	r1, r4
   11d80:	mov	r0, #0
   11d84:	bl	111c0 <error@plt>
   11d88:	mov	r8, #0
   11d8c:	mov	r9, #0
   11d90:	mov	r7, r8
   11d94:	mov	sl, r9
   11d98:	mov	r4, r8
   11d9c:	mov	r6, r9
   11da0:	mov	r3, #0
   11da4:	str	r3, [sp, #72]	; 0x48
   11da8:	b	11b34 <__assert_fail@plt+0x7ac>
   11dac:	mov	r8, #0
   11db0:	mov	r9, #0
   11db4:	mov	r7, r8
   11db8:	mov	sl, r9
   11dbc:	mov	r4, r8
   11dc0:	mov	r6, r9
   11dc4:	mov	r3, #1
   11dc8:	str	r3, [sp, #72]	; 0x48
   11dcc:	b	11b34 <__assert_fail@plt+0x7ac>
   11dd0:	bl	1119c <__ctype_get_mb_cur_max@plt>
   11dd4:	cmp	r0, #1
   11dd8:	bls	1234c <__assert_fail@plt+0xfc4>
   11ddc:	mov	r5, #0
   11de0:	str	r5, [sp, #104]	; 0x68
   11de4:	str	r5, [sp, #108]	; 0x6c
   11de8:	mov	r6, r5
   11dec:	mov	r9, r5
   11df0:	str	r5, [sp, #32]
   11df4:	str	r5, [sp, #36]	; 0x24
   11df8:	str	r5, [sp, #44]	; 0x2c
   11dfc:	str	r5, [sp, #56]	; 0x38
   11e00:	str	r5, [sp, #60]	; 0x3c
   11e04:	mov	r7, r5
   11e08:	mov	sl, r5
   11e0c:	mov	fp, r5
   11e10:	add	r3, sp, #104	; 0x68
   11e14:	str	r3, [sp, #52]	; 0x34
   11e18:	movw	r2, #37280	; 0x91a0
   11e1c:	movt	r2, #2
   11e20:	str	r2, [sp, #92]	; 0x5c
   11e24:	str	r3, [sp, #48]	; 0x30
   11e28:	movw	r3, #33464	; 0x82b8
   11e2c:	movt	r3, #1
   11e30:	str	r3, [sp, #64]	; 0x40
   11e34:	mov	r8, r5
   11e38:	b	11f68 <__assert_fail@plt+0xbe0>
   11e3c:	mov	r5, r8
   11e40:	bl	11280 <__errno_location@plt>
   11e44:	ldr	r4, [r0]
   11e48:	ldr	r2, [sp, #88]	; 0x58
   11e4c:	mov	r1, #3
   11e50:	mov	r0, #0
   11e54:	bl	15cd0 <__assert_fail@plt+0x4948>
   11e58:	mov	r3, r0
   11e5c:	movw	r2, #33460	; 0x82b4
   11e60:	movt	r2, #1
   11e64:	mov	r1, r4
   11e68:	mov	r0, #0
   11e6c:	bl	111c0 <error@plt>
   11e70:	mov	r3, #0
   11e74:	str	r3, [sp, #72]	; 0x48
   11e78:	b	12188 <__assert_fail@plt+0xe00>
   11e7c:	ldr	r3, [sp, #52]	; 0x34
   11e80:	ldrd	r2, [r3]
   11e84:	strd	r2, [sp, #112]	; 0x70
   11e88:	ldr	r3, [sp, #48]	; 0x30
   11e8c:	mov	r2, r6
   11e90:	mov	r1, r5
   11e94:	add	r0, sp, #100	; 0x64
   11e98:	bl	13a08 <__assert_fail@plt+0x2680>
   11e9c:	mov	r4, r0
   11ea0:	cmn	r0, #2
   11ea4:	beq	11f2c <__assert_fail@plt+0xba4>
   11ea8:	cmn	r0, #1
   11eac:	beq	11fa8 <__assert_fail@plt+0xc20>
   11eb0:	ldr	r0, [sp, #48]	; 0x30
   11eb4:	bl	11100 <mbsinit@plt>
   11eb8:	clz	r9, r0
   11ebc:	lsr	r9, r9, #5
   11ec0:	cmp	r4, #0
   11ec4:	bne	123ac <__assert_fail@plt+0x1024>
   11ec8:	mov	r3, #0
   11ecc:	str	r3, [sp, #100]	; 0x64
   11ed0:	mov	r3, #1
   11ed4:	str	r3, [sp, #76]	; 0x4c
   11ed8:	mov	r0, r4
   11edc:	bl	1116c <iswprint@plt>
   11ee0:	cmp	r0, #0
   11ee4:	beq	1217c <__assert_fail@plt+0xdf4>
   11ee8:	ldr	r3, [sp, #92]	; 0x5c
   11eec:	ldrb	r3, [r3, #11]
   11ef0:	cmp	r3, #0
   11ef4:	bne	12110 <__assert_fail@plt+0xd88>
   11ef8:	ldr	r4, [sp, #100]	; 0x64
   11efc:	mov	r0, r4
   11f00:	bl	11250 <iswspace@plt>
   11f04:	cmp	r0, #0
   11f08:	bne	120f4 <__assert_fail@plt+0xd6c>
   11f0c:	mov	r0, r4
   11f10:	bl	11488 <__assert_fail@plt+0x100>
   11f14:	cmp	r0, #0
   11f18:	bne	120fc <__assert_fail@plt+0xd74>
   11f1c:	ldr	r4, [sp, #76]	; 0x4c
   11f20:	ldr	r3, [sp, #72]	; 0x48
   11f24:	str	r3, [sp, #44]	; 0x2c
   11f28:	b	12008 <__assert_fail@plt+0xc80>
   11f2c:	ldrd	r2, [sp, #112]	; 0x70
   11f30:	ldr	r1, [sp, #52]	; 0x34
   11f34:	strd	r2, [r1]
   11f38:	cmp	r6, #0
   11f3c:	ldreq	r9, [sp, #72]	; 0x48
   11f40:	beq	11f68 <__assert_fail@plt+0xbe0>
   11f44:	cmp	r6, #16384	; 0x4000
   11f48:	addeq	r5, r5, #1
   11f4c:	movweq	r6, #16383	; 0x3fff
   11f50:	movw	r3, #16385	; 0x4001
   11f54:	mov	r2, r6
   11f58:	mov	r1, r5
   11f5c:	add	r0, sp, #140	; 0x8c
   11f60:	bl	110c4 <__memmove_chk@plt>
   11f64:	ldr	r9, [sp, #72]	; 0x48
   11f68:	rsb	r2, r6, #16384	; 0x4000
   11f6c:	add	r3, sp, #140	; 0x8c
   11f70:	add	r1, r3, r6
   11f74:	ldr	r0, [sp, #68]	; 0x44
   11f78:	bl	16238 <__assert_fail@plt+0x4eb0>
   11f7c:	cmp	r0, #0
   11f80:	beq	12184 <__assert_fail@plt+0xdfc>
   11f84:	cmn	r0, #1
   11f88:	beq	11e3c <__assert_fail@plt+0xab4>
   11f8c:	ldrd	r2, [sp, #120]	; 0x78
   11f90:	adds	r4, r2, r0
   11f94:	adc	r5, r3, #0
   11f98:	strd	r4, [sp, #120]	; 0x78
   11f9c:	add	r6, r6, r0
   11fa0:	add	r5, sp, #140	; 0x8c
   11fa4:	b	12020 <__assert_fail@plt+0xc98>
   11fa8:	add	r5, r5, #1
   11fac:	sub	r6, r6, #1
   11fb0:	ldr	r9, [sp, #72]	; 0x48
   11fb4:	b	12018 <__assert_fail@plt+0xc90>
   11fb8:	ldr	r3, [sp, #128]	; 0x80
   11fbc:	ldr	r2, [sp, #132]	; 0x84
   11fc0:	adds	r3, r3, #1
   11fc4:	adc	r2, r2, #0
   11fc8:	str	r3, [sp, #128]	; 0x80
   11fcc:	str	r2, [sp, #132]	; 0x84
   11fd0:	ldrd	r0, [sp, #56]	; 0x38
   11fd4:	ldrd	r2, [sp, #32]
   11fd8:	cmp	r1, r3
   11fdc:	cmpeq	r0, r2
   11fe0:	strdcc	r2, [sp, #56]	; 0x38
   11fe4:	mov	r2, #0
   11fe8:	mov	r3, #0
   11fec:	strd	r2, [sp, #32]
   11ff0:	ldrb	r2, [sp, #44]	; 0x2c
   11ff4:	mov	r3, #0
   11ff8:	adds	r8, r8, r2
   11ffc:	adc	fp, fp, r3
   12000:	mov	r3, #0
   12004:	str	r3, [sp, #44]	; 0x2c
   12008:	add	r5, r5, r4
   1200c:	sub	r6, r6, r4
   12010:	adds	r7, r7, #1
   12014:	adc	sl, sl, #0
   12018:	cmp	r6, #0
   1201c:	beq	11f68 <__assert_fail@plt+0xbe0>
   12020:	cmp	r9, #0
   12024:	bne	11e7c <__assert_fail@plt+0xaf4>
   12028:	ldrb	r3, [r5]
   1202c:	lsr	r1, r3, #5
   12030:	and	r2, r3, #31
   12034:	ldr	r0, [sp, #64]	; 0x40
   12038:	ldr	r4, [r0, r1, lsl #2]
   1203c:	lsr	r4, r4, r2
   12040:	ands	r4, r4, #1
   12044:	beq	11e7c <__assert_fail@plt+0xaf4>
   12048:	str	r3, [sp, #100]	; 0x64
   1204c:	sub	r3, r3, #9
   12050:	cmp	r3, #23
   12054:	ldrls	pc, [pc, r3, lsl #2]
   12058:	b	12134 <__assert_fail@plt+0xdac>
   1205c:	strheq	r2, [r1], -ip
   12060:			; <UNDEFINED> instruction: 0x00011fb8
   12064:	strdeq	r1, [r1], -r0
   12068:	ldrdeq	r1, [r1], -r0
   1206c:	ldrdeq	r1, [r1], -r0
   12070:	andeq	r2, r1, r4, lsr r1
   12074:	andeq	r2, r1, r4, lsr r1
   12078:	andeq	r2, r1, r4, lsr r1
   1207c:	andeq	r2, r1, r4, lsr r1
   12080:	andeq	r2, r1, r4, lsr r1
   12084:	andeq	r2, r1, r4, lsr r1
   12088:	andeq	r2, r1, r4, lsr r1
   1208c:	andeq	r2, r1, r4, lsr r1
   12090:	andeq	r2, r1, r4, lsr r1
   12094:	andeq	r2, r1, r4, lsr r1
   12098:	andeq	r2, r1, r4, lsr r1
   1209c:	andeq	r2, r1, r4, lsr r1
   120a0:	andeq	r2, r1, r4, lsr r1
   120a4:	andeq	r2, r1, r4, lsr r1
   120a8:	andeq	r2, r1, r4, lsr r1
   120ac:	andeq	r2, r1, r4, lsr r1
   120b0:	andeq	r2, r1, r4, lsr r1
   120b4:	andeq	r2, r1, r4, lsr r1
   120b8:	ldrdeq	r2, [r1], -r8
   120bc:	ldrd	r0, [sp, #32]
   120c0:	bic	r3, r0, #7
   120c4:	adds	r3, r3, #8
   120c8:	str	r3, [sp, #32]
   120cc:	adc	r3, r1, #0
   120d0:	str	r3, [sp, #36]	; 0x24
   120d4:	b	11ff0 <__assert_fail@plt+0xc68>
   120d8:	ldr	r3, [sp, #32]
   120dc:	adds	r3, r3, #1
   120e0:	str	r3, [sp, #32]
   120e4:	ldr	r3, [sp, #36]	; 0x24
   120e8:	adc	r3, r3, #0
   120ec:	str	r3, [sp, #36]	; 0x24
   120f0:	b	11ff0 <__assert_fail@plt+0xc68>
   120f4:	ldr	r4, [sp, #76]	; 0x4c
   120f8:	b	11ff0 <__assert_fail@plt+0xc68>
   120fc:	ldr	r4, [sp, #76]	; 0x4c
   12100:	b	11ff0 <__assert_fail@plt+0xc68>
   12104:	str	r4, [sp, #76]	; 0x4c
   12108:	mov	r4, r2
   1210c:	b	11ed8 <__assert_fail@plt+0xb50>
   12110:	mov	r0, r4
   12114:	bl	110b8 <wcwidth@plt>
   12118:	cmp	r0, #0
   1211c:	ble	11ef8 <__assert_fail@plt+0xb70>
   12120:	ldrd	r2, [sp, #32]
   12124:	adds	r2, r2, r0
   12128:	adc	r3, r3, r0, asr #31
   1212c:	strd	r2, [sp, #32]
   12130:	b	11ef8 <__assert_fail@plt+0xb70>
   12134:	bl	1122c <__ctype_b_loc@plt>
   12138:	ldrb	r3, [r5]
   1213c:	ldr	r2, [r0]
   12140:	lsl	r3, r3, #1
   12144:	ldrh	r3, [r2, r3]
   12148:	tst	r3, #16384	; 0x4000
   1214c:	beq	12008 <__assert_fail@plt+0xc80>
   12150:	ldr	r2, [sp, #32]
   12154:	adds	r2, r2, #1
   12158:	str	r2, [sp, #32]
   1215c:	ldr	r2, [sp, #36]	; 0x24
   12160:	adc	r2, r2, #0
   12164:	str	r2, [sp, #36]	; 0x24
   12168:	tst	r3, #8192	; 0x2000
   1216c:	bne	11ff0 <__assert_fail@plt+0xc68>
   12170:	ldr	r3, [sp, #72]	; 0x48
   12174:	str	r3, [sp, #44]	; 0x2c
   12178:	b	12008 <__assert_fail@plt+0xc80>
   1217c:	ldr	r4, [sp, #76]	; 0x4c
   12180:	b	12008 <__assert_fail@plt+0xc80>
   12184:	mov	r5, r8
   12188:	ldrd	r2, [sp, #56]	; 0x38
   1218c:	mov	r8, r2
   12190:	mov	r9, r3
   12194:	ldrd	r0, [sp, #32]
   12198:	cmp	r3, r1
   1219c:	cmpeq	r2, r0
   121a0:	movcc	r8, r0
   121a4:	movcc	r9, r1
   121a8:	ldrb	r2, [sp, #44]	; 0x2c
   121ac:	mov	r3, #0
   121b0:	adds	r4, r2, r5
   121b4:	adc	r6, r3, fp
   121b8:	b	11b34 <__assert_fail@plt+0x7ac>
   121bc:	bl	11280 <__errno_location@plt>
   121c0:	ldr	r7, [r0]
   121c4:	ldr	r2, [sp, #88]	; 0x58
   121c8:	mov	r1, #3
   121cc:	mov	r0, #0
   121d0:	bl	15cd0 <__assert_fail@plt+0x4948>
   121d4:	mov	r3, r0
   121d8:	movw	r2, #33460	; 0x82b4
   121dc:	movt	r2, #1
   121e0:	mov	r1, r7
   121e4:	mov	r0, #0
   121e8:	bl	111c0 <error@plt>
   121ec:	mov	r3, #0
   121f0:	str	r3, [sp, #72]	; 0x48
   121f4:	ldrd	r2, [sp, #32]
   121f8:	mov	r8, r2
   121fc:	mov	r9, r3
   12200:	cmp	r3, fp
   12204:	cmpeq	r2, sl
   12208:	movcc	r8, sl
   1220c:	movcc	r9, fp
   12210:	uxtb	r2, r5
   12214:	mov	r3, #0
   12218:	adds	r4, r2, r4
   1221c:	adc	r6, r3, r6
   12220:	mov	r7, #0
   12224:	mov	sl, r7
   12228:	b	11b34 <__assert_fail@plt+0x7ac>
   1222c:	ldr	r3, [sp, #128]	; 0x80
   12230:	ldr	r2, [sp, #132]	; 0x84
   12234:	adds	r3, r3, #1
   12238:	adc	r2, r2, #0
   1223c:	str	r3, [sp, #128]	; 0x80
   12240:	str	r2, [sp, #132]	; 0x84
   12244:	ldrd	r2, [sp, #32]
   12248:	cmp	r3, fp
   1224c:	cmpeq	r2, sl
   12250:	strdcc	sl, [sp, #32]
   12254:	mov	sl, #0
   12258:	mov	fp, #0
   1225c:	uxtb	r2, r5
   12260:	mov	r3, #0
   12264:	adds	r4, r4, r2
   12268:	adc	r6, r6, r3
   1226c:	mov	r5, #0
   12270:	cmp	r7, r9
   12274:	beq	1236c <__assert_fail@plt+0xfe4>
   12278:	ldrb	r8, [r7], #1
   1227c:	sub	r3, r8, #9
   12280:	cmp	r3, #23
   12284:	ldrls	pc, [pc, r3, lsl #2]
   12288:	b	12308 <__assert_fail@plt+0xf80>
   1228c:	andeq	r2, r1, ip, ror #5
   12290:	andeq	r2, r1, ip, lsr #4
   12294:	andeq	r2, r1, ip, asr r2
   12298:	andeq	r2, r1, r4, asr #4
   1229c:	andeq	r2, r1, r4, asr #4
   122a0:	andeq	r2, r1, r8, lsl #6
   122a4:	andeq	r2, r1, r8, lsl #6
   122a8:	andeq	r2, r1, r8, lsl #6
   122ac:	andeq	r2, r1, r8, lsl #6
   122b0:	andeq	r2, r1, r8, lsl #6
   122b4:	andeq	r2, r1, r8, lsl #6
   122b8:	andeq	r2, r1, r8, lsl #6
   122bc:	andeq	r2, r1, r8, lsl #6
   122c0:	andeq	r2, r1, r8, lsl #6
   122c4:	andeq	r2, r1, r8, lsl #6
   122c8:	andeq	r2, r1, r8, lsl #6
   122cc:	andeq	r2, r1, r8, lsl #6
   122d0:	andeq	r2, r1, r8, lsl #6
   122d4:	andeq	r2, r1, r8, lsl #6
   122d8:	andeq	r2, r1, r8, lsl #6
   122dc:	andeq	r2, r1, r8, lsl #6
   122e0:	andeq	r2, r1, r8, lsl #6
   122e4:	andeq	r2, r1, r8, lsl #6
   122e8:	strdeq	r2, [r1], -ip
   122ec:	bic	r3, sl, #7
   122f0:	adds	sl, r3, #8
   122f4:	adc	fp, fp, #0
   122f8:	b	1225c <__assert_fail@plt+0xed4>
   122fc:	adds	sl, sl, #1
   12300:	adc	fp, fp, #0
   12304:	b	1225c <__assert_fail@plt+0xed4>
   12308:	bl	1122c <__ctype_b_loc@plt>
   1230c:	ldr	r2, [r0]
   12310:	lsl	r3, r8, #1
   12314:	ldrh	r3, [r2, r3]
   12318:	tst	r3, #16384	; 0x4000
   1231c:	beq	12270 <__assert_fail@plt+0xee8>
   12320:	adds	sl, sl, #1
   12324:	adc	fp, fp, #0
   12328:	tst	r3, #8192	; 0x2000
   1232c:	bne	1225c <__assert_fail@plt+0xed4>
   12330:	mov	r0, r8
   12334:	bl	112b0 <btowc@plt>
   12338:	bl	11488 <__assert_fail@plt+0x100>
   1233c:	cmp	r0, #0
   12340:	bne	1225c <__assert_fail@plt+0xed4>
   12344:	ldr	r5, [sp, #44]	; 0x2c
   12348:	b	12270 <__assert_fail@plt+0xee8>
   1234c:	mov	sl, #0
   12350:	mov	fp, #0
   12354:	mov	r5, #0
   12358:	strd	sl, [sp, #32]
   1235c:	mov	r4, sl
   12360:	mov	r6, fp
   12364:	ldr	r3, [sp, #72]	; 0x48
   12368:	str	r3, [sp, #44]	; 0x2c
   1236c:	mov	r2, #16384	; 0x4000
   12370:	add	r1, sp, #140	; 0x8c
   12374:	ldr	r0, [sp, #68]	; 0x44
   12378:	bl	16238 <__assert_fail@plt+0x4eb0>
   1237c:	cmp	r0, #0
   12380:	beq	121f4 <__assert_fail@plt+0xe6c>
   12384:	cmn	r0, #1
   12388:	beq	121bc <__assert_fail@plt+0xe34>
   1238c:	ldrd	r2, [sp, #120]	; 0x78
   12390:	adds	r8, r2, r0
   12394:	adc	r9, r3, #0
   12398:	strd	r8, [sp, #120]	; 0x78
   1239c:	add	r3, sp, #140	; 0x8c
   123a0:	add	r9, r3, r0
   123a4:	mov	r7, r3
   123a8:	b	12278 <__assert_fail@plt+0xef0>
   123ac:	ldr	r2, [sp, #100]	; 0x64
   123b0:	sub	r3, r2, #9
   123b4:	cmp	r3, #23
   123b8:	ldrls	pc, [pc, r3, lsl #2]
   123bc:	b	12104 <__assert_fail@plt+0xd7c>
   123c0:	strheq	r2, [r1], -ip
   123c4:			; <UNDEFINED> instruction: 0x00011fb8
   123c8:	strdeq	r1, [r1], -r0
   123cc:	ldrdeq	r1, [r1], -r0
   123d0:	ldrdeq	r1, [r1], -r0
   123d4:	andeq	r2, r1, r4, lsl #2
   123d8:	andeq	r2, r1, r4, lsl #2
   123dc:	andeq	r2, r1, r4, lsl #2
   123e0:	andeq	r2, r1, r4, lsl #2
   123e4:	andeq	r2, r1, r4, lsl #2
   123e8:	andeq	r2, r1, r4, lsl #2
   123ec:	andeq	r2, r1, r4, lsl #2
   123f0:	andeq	r2, r1, r4, lsl #2
   123f4:	andeq	r2, r1, r4, lsl #2
   123f8:	andeq	r2, r1, r4, lsl #2
   123fc:	andeq	r2, r1, r4, lsl #2
   12400:	andeq	r2, r1, r4, lsl #2
   12404:	andeq	r2, r1, r4, lsl #2
   12408:	andeq	r2, r1, r4, lsl #2
   1240c:	andeq	r2, r1, r4, lsl #2
   12410:	andeq	r2, r1, r4, lsl #2
   12414:	andeq	r2, r1, r4, lsl #2
   12418:	andeq	r2, r1, r4, lsl #2
   1241c:	ldrdeq	r2, [r1], -r8
   12420:	mov	r3, #2
   12424:	str	r3, [sp, #8]
   12428:	mov	r2, #0
   1242c:	mov	r3, #0
   12430:	strd	r2, [sp]
   12434:	ldr	r0, [sp, #68]	; 0x44
   12438:	bl	13600 <__assert_fail@plt+0x2278>
   1243c:	movw	r3, #37280	; 0x91a0
   12440:	movt	r3, #2
   12444:	ldrb	r3, [r3, #1]
   12448:	orrs	r3, r4, r3
   1244c:	bne	11af4 <__assert_fail@plt+0x76c>
   12450:	b	119a0 <__assert_fail@plt+0x618>
   12454:	push	{lr}		; (str lr, [sp, #-4]!)
   12458:	sub	sp, sp, #60	; 0x3c
   1245c:	subs	r5, r0, #0
   12460:	beq	124a8 <__assert_fail@plt+0x1120>
   12464:	movw	r3, #37256	; 0x9188
   12468:	movt	r3, #2
   1246c:	ldr	r4, [r3]
   12470:	mov	r2, #5
   12474:	movw	r1, #31536	; 0x7b30
   12478:	movt	r1, #1
   1247c:	mov	r0, #0
   12480:	bl	11124 <dcgettext@plt>
   12484:	movw	r3, #37352	; 0x91e8
   12488:	movt	r3, #2
   1248c:	ldr	r3, [r3]
   12490:	mov	r2, r0
   12494:	mov	r1, #1
   12498:	mov	r0, r4
   1249c:	bl	112e0 <__fprintf_chk@plt>
   124a0:	mov	r0, r5
   124a4:	bl	11238 <exit@plt>
   124a8:	mov	r2, #5
   124ac:	movw	r1, #31576	; 0x7b58
   124b0:	movt	r1, #1
   124b4:	mov	r0, #0
   124b8:	bl	11124 <dcgettext@plt>
   124bc:	movw	r3, #37352	; 0x91e8
   124c0:	movt	r3, #2
   124c4:	ldr	r2, [r3]
   124c8:	mov	r3, r2
   124cc:	mov	r1, r0
   124d0:	mov	r0, #1
   124d4:	bl	112c8 <__printf_chk@plt>
   124d8:	mov	r2, #5
   124dc:	movw	r1, #31648	; 0x7ba0
   124e0:	movt	r1, #1
   124e4:	mov	r0, #0
   124e8:	bl	11124 <dcgettext@plt>
   124ec:	movw	r4, #37268	; 0x9194
   124f0:	movt	r4, #2
   124f4:	ldr	r1, [r4]
   124f8:	bl	11070 <fputs_unlocked@plt>
   124fc:	mov	r2, #5
   12500:	movw	r1, #31844	; 0x7c64
   12504:	movt	r1, #1
   12508:	mov	r0, #0
   1250c:	bl	11124 <dcgettext@plt>
   12510:	ldr	r1, [r4]
   12514:	bl	11070 <fputs_unlocked@plt>
   12518:	mov	r2, #5
   1251c:	movw	r1, #31900	; 0x7c9c
   12520:	movt	r1, #1
   12524:	mov	r0, #0
   12528:	bl	11124 <dcgettext@plt>
   1252c:	ldr	r1, [r4]
   12530:	bl	11070 <fputs_unlocked@plt>
   12534:	mov	r2, #5
   12538:	movw	r1, #32204	; 0x7dcc
   1253c:	movt	r1, #1
   12540:	mov	r0, #0
   12544:	bl	11124 <dcgettext@plt>
   12548:	ldr	r1, [r4]
   1254c:	bl	11070 <fputs_unlocked@plt>
   12550:	mov	r2, #5
   12554:	movw	r1, #32508	; 0x7efc
   12558:	movt	r1, #1
   1255c:	mov	r0, #0
   12560:	bl	11124 <dcgettext@plt>
   12564:	ldr	r1, [r4]
   12568:	bl	11070 <fputs_unlocked@plt>
   1256c:	mov	r2, #5
   12570:	movw	r1, #32556	; 0x7f2c
   12574:	movt	r1, #1
   12578:	mov	r0, #0
   1257c:	bl	11124 <dcgettext@plt>
   12580:	ldr	r1, [r4]
   12584:	bl	11070 <fputs_unlocked@plt>
   12588:	movw	r3, #31280	; 0x7a30
   1258c:	movt	r3, #1
   12590:	add	r0, r3, #8
   12594:	ldr	r1, [r3, #8]
   12598:	ldr	r3, [r3, #12]
   1259c:	str	r1, [sp]
   125a0:	str	r3, [sp, #4]
   125a4:	ldrd	r2, [r0, #8]
   125a8:	strd	r2, [sp, #8]
   125ac:	ldrd	r2, [r0, #16]
   125b0:	strd	r2, [sp, #16]
   125b4:	ldrd	r2, [r0, #24]
   125b8:	strd	r2, [sp, #24]
   125bc:	ldrd	r2, [r0, #32]
   125c0:	strd	r2, [sp, #32]
   125c4:	ldrd	r2, [r0, #40]	; 0x28
   125c8:	strd	r2, [sp, #40]	; 0x28
   125cc:	ldrd	r2, [r0, #48]	; 0x30
   125d0:	strd	r2, [sp, #48]	; 0x30
   125d4:	cmp	r1, #0
   125d8:	moveq	r4, sp
   125dc:	beq	12608 <__assert_fail@plt+0x1280>
   125e0:	mov	r4, sp
   125e4:	movw	r6, #31532	; 0x7b2c
   125e8:	movt	r6, #1
   125ec:	mov	r0, r6
   125f0:	bl	11088 <strcmp@plt>
   125f4:	cmp	r0, #0
   125f8:	beq	12608 <__assert_fail@plt+0x1280>
   125fc:	ldr	r1, [r4, #8]!
   12600:	cmp	r1, #0
   12604:	bne	125ec <__assert_fail@plt+0x1264>
   12608:	ldr	r4, [r4, #4]
   1260c:	cmp	r4, #0
   12610:	beq	1276c <__assert_fail@plt+0x13e4>
   12614:	mov	r2, #5
   12618:	movw	r1, #32612	; 0x7f64
   1261c:	movt	r1, #1
   12620:	mov	r0, #0
   12624:	bl	11124 <dcgettext@plt>
   12628:	movw	r3, #32636	; 0x7f7c
   1262c:	movt	r3, #1
   12630:	movw	r2, #32676	; 0x7fa4
   12634:	movt	r2, #1
   12638:	mov	r1, r0
   1263c:	mov	r0, #1
   12640:	bl	112c8 <__printf_chk@plt>
   12644:	mov	r1, #0
   12648:	mov	r0, #5
   1264c:	bl	11310 <setlocale@plt>
   12650:	cmp	r0, #0
   12654:	beq	12670 <__assert_fail@plt+0x12e8>
   12658:	mov	r2, #3
   1265c:	movw	r1, #32692	; 0x7fb4
   12660:	movt	r1, #1
   12664:	bl	11364 <strncmp@plt>
   12668:	cmp	r0, #0
   1266c:	bne	126ec <__assert_fail@plt+0x1364>
   12670:	mov	r2, #5
   12674:	movw	r1, #32768	; 0x8000
   12678:	movt	r1, #1
   1267c:	mov	r0, #0
   12680:	bl	11124 <dcgettext@plt>
   12684:	movw	r6, #31532	; 0x7b2c
   12688:	movt	r6, #1
   1268c:	mov	r3, r6
   12690:	movw	r2, #32636	; 0x7f7c
   12694:	movt	r2, #1
   12698:	mov	r1, r0
   1269c:	mov	r0, #1
   126a0:	bl	112c8 <__printf_chk@plt>
   126a4:	mov	r2, #5
   126a8:	movw	r1, #32796	; 0x801c
   126ac:	movt	r1, #1
   126b0:	mov	r0, #0
   126b4:	bl	11124 <dcgettext@plt>
   126b8:	mov	r1, r0
   126bc:	movw	r2, #33256	; 0x81e8
   126c0:	movt	r2, #1
   126c4:	movw	r3, #32504	; 0x7ef8
   126c8:	movt	r3, #1
   126cc:	cmp	r4, r6
   126d0:	moveq	r3, r2
   126d4:	mov	r2, r4
   126d8:	mov	r0, #1
   126dc:	bl	112c8 <__printf_chk@plt>
   126e0:	b	124a0 <__assert_fail@plt+0x1118>
   126e4:	movw	r4, #31532	; 0x7b2c
   126e8:	movt	r4, #1
   126ec:	mov	r2, #5
   126f0:	movw	r1, #32696	; 0x7fb8
   126f4:	movt	r1, #1
   126f8:	mov	r0, #0
   126fc:	bl	11124 <dcgettext@plt>
   12700:	movw	r3, #37268	; 0x9194
   12704:	movt	r3, #2
   12708:	ldr	r1, [r3]
   1270c:	bl	11070 <fputs_unlocked@plt>
   12710:	b	12670 <__assert_fail@plt+0x12e8>
   12714:	mov	r2, #5
   12718:	movw	r1, #32768	; 0x8000
   1271c:	movt	r1, #1
   12720:	mov	r0, #0
   12724:	bl	11124 <dcgettext@plt>
   12728:	movw	r4, #31532	; 0x7b2c
   1272c:	movt	r4, #1
   12730:	mov	r3, r4
   12734:	movw	r2, #32636	; 0x7f7c
   12738:	movt	r2, #1
   1273c:	mov	r1, r0
   12740:	mov	r0, #1
   12744:	bl	112c8 <__printf_chk@plt>
   12748:	mov	r2, #5
   1274c:	movw	r1, #32796	; 0x801c
   12750:	movt	r1, #1
   12754:	mov	r0, #0
   12758:	bl	11124 <dcgettext@plt>
   1275c:	mov	r1, r0
   12760:	movw	r3, #33256	; 0x81e8
   12764:	movt	r3, #1
   12768:	b	126d4 <__assert_fail@plt+0x134c>
   1276c:	mov	r2, #5
   12770:	movw	r1, #32612	; 0x7f64
   12774:	movt	r1, #1
   12778:	mov	r0, #0
   1277c:	bl	11124 <dcgettext@plt>
   12780:	movw	r3, #32636	; 0x7f7c
   12784:	movt	r3, #1
   12788:	movw	r2, #32676	; 0x7fa4
   1278c:	movt	r2, #1
   12790:	mov	r1, r0
   12794:	mov	r0, #1
   12798:	bl	112c8 <__printf_chk@plt>
   1279c:	mov	r1, #0
   127a0:	mov	r0, #5
   127a4:	bl	11310 <setlocale@plt>
   127a8:	cmp	r0, #0
   127ac:	beq	12714 <__assert_fail@plt+0x138c>
   127b0:	mov	r2, #3
   127b4:	movw	r1, #32692	; 0x7fb4
   127b8:	movt	r1, #1
   127bc:	bl	11364 <strncmp@plt>
   127c0:	cmp	r0, #0
   127c4:	bne	126e4 <__assert_fail@plt+0x135c>
   127c8:	mov	r2, #5
   127cc:	movw	r1, #32768	; 0x8000
   127d0:	movt	r1, #1
   127d4:	mov	r0, #0
   127d8:	bl	11124 <dcgettext@plt>
   127dc:	movw	r4, #31532	; 0x7b2c
   127e0:	movt	r4, #1
   127e4:	mov	r3, r4
   127e8:	movw	r2, #32636	; 0x7f7c
   127ec:	movt	r2, #1
   127f0:	mov	r1, r0
   127f4:	mov	r0, #1
   127f8:	bl	112c8 <__printf_chk@plt>
   127fc:	mov	r2, #5
   12800:	movw	r1, #32796	; 0x801c
   12804:	movt	r1, #1
   12808:	mov	r0, #0
   1280c:	bl	11124 <dcgettext@plt>
   12810:	mov	r1, r0
   12814:	movw	r3, #33256	; 0x81e8
   12818:	movt	r3, #1
   1281c:	b	126d4 <__assert_fail@plt+0x134c>
   12820:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12824:	strd	r6, [sp, #8]
   12828:	strd	r8, [sp, #16]
   1282c:	strd	sl, [sp, #24]
   12830:	str	lr, [sp, #32]
   12834:	vpush	{d8}
   12838:	sub	sp, sp, #316	; 0x13c
   1283c:	mov	r5, r0
   12840:	mov	r7, r1
   12844:	ldr	r0, [r1]
   12848:	bl	13ba0 <__assert_fail@plt+0x2818>
   1284c:	movw	r1, #32504	; 0x7ef8
   12850:	movt	r1, #1
   12854:	mov	r0, #6
   12858:	bl	11310 <setlocale@plt>
   1285c:	movw	r4, #32680	; 0x7fa8
   12860:	movt	r4, #1
   12864:	movw	r1, #32848	; 0x8050
   12868:	movt	r1, #1
   1286c:	mov	r0, r4
   12870:	bl	11340 <bindtextdomain@plt>
   12874:	mov	r0, r4
   12878:	bl	11148 <textdomain@plt>
   1287c:	movw	r0, #13552	; 0x34f0
   12880:	movt	r0, #1
   12884:	bl	17a0c <_obstack_memory_used@@Base+0x6c8>
   12888:	bl	11274 <getpagesize@plt>
   1288c:	movw	r6, #37280	; 0x91a0
   12890:	movt	r6, #2
   12894:	str	r0, [r6, #12]
   12898:	movw	r0, #37268	; 0x9194
   1289c:	movt	r0, #2
   128a0:	mov	r3, #0
   128a4:	mov	r2, #1
   128a8:	mov	r1, r3
   128ac:	ldr	r0, [r0]
   128b0:	bl	11298 <setvbuf@plt>
   128b4:	movw	r0, #32872	; 0x8068
   128b8:	movt	r0, #1
   128bc:	bl	111d8 <getenv@plt>
   128c0:	adds	r0, r0, #0
   128c4:	movne	r0, #1
   128c8:	strb	r0, [r6]
   128cc:	mov	r4, #0
   128d0:	strb	r4, [r6, #10]
   128d4:	strb	r4, [r6, #9]
   128d8:	strb	r4, [r6, #8]
   128dc:	strb	r4, [r6, #1]
   128e0:	strb	r4, [r6, #11]
   128e4:	mov	r2, #0
   128e8:	mov	r3, #0
   128ec:	strd	r2, [r6, #48]	; 0x30
   128f0:	strd	r2, [r6, #40]	; 0x28
   128f4:	strd	r2, [r6, #32]
   128f8:	strd	r2, [r6, #24]
   128fc:	strd	r2, [r6, #16]
   12900:	ldr	r8, [pc, #1920]	; 13088 <__assert_fail@plt+0x1d00>
   12904:	movw	r6, #32916	; 0x8094
   12908:	movt	r6, #1
   1290c:	movw	r9, #37280	; 0x91a0
   12910:	movt	r9, #2
   12914:	mov	r3, #0
   12918:	str	r3, [sp]
   1291c:	mov	r3, r8
   12920:	mov	r2, r6
   12924:	mov	r1, r7
   12928:	mov	r0, r5
   1292c:	bl	11220 <getopt_long@plt>
   12930:	cmn	r0, #1
   12934:	beq	12a40 <__assert_fail@plt+0x16b8>
   12938:	cmp	r0, #108	; 0x6c
   1293c:	beq	12a0c <__assert_fail@plt+0x1684>
   12940:	ble	12974 <__assert_fail@plt+0x15ec>
   12944:	cmp	r0, #119	; 0x77
   12948:	beq	12a18 <__assert_fail@plt+0x1690>
   1294c:	ble	129f8 <__assert_fail@plt+0x1670>
   12950:	cmp	r0, #256	; 0x100
   12954:	beq	12914 <__assert_fail@plt+0x158c>
   12958:	movw	r3, #257	; 0x101
   1295c:	cmp	r0, r3
   12960:	bne	12a38 <__assert_fail@plt+0x16b0>
   12964:	movw	r3, #37272	; 0x9198
   12968:	movt	r3, #2
   1296c:	ldr	r4, [r3]
   12970:	b	12914 <__assert_fail@plt+0x158c>
   12974:	cmn	r0, #2
   12978:	beq	12a30 <__assert_fail@plt+0x16a8>
   1297c:	ble	1299c <__assert_fail@plt+0x1614>
   12980:	cmp	r0, #76	; 0x4c
   12984:	beq	12a24 <__assert_fail@plt+0x169c>
   12988:	cmp	r0, #99	; 0x63
   1298c:	bne	12a38 <__assert_fail@plt+0x16b0>
   12990:	mov	r3, #1
   12994:	strb	r3, [r9, #10]
   12998:	b	12914 <__assert_fail@plt+0x158c>
   1299c:	cmn	r0, #3
   129a0:	bne	12a38 <__assert_fail@plt+0x16b0>
   129a4:	movw	r3, #37160	; 0x9128
   129a8:	movt	r3, #2
   129ac:	movw	r0, #37268	; 0x9194
   129b0:	movt	r0, #2
   129b4:	mov	r4, #0
   129b8:	str	r4, [sp, #8]
   129bc:	movw	r2, #32888	; 0x8078
   129c0:	movt	r2, #1
   129c4:	str	r2, [sp, #4]
   129c8:	movw	r2, #32904	; 0x8088
   129cc:	movt	r2, #1
   129d0:	str	r2, [sp]
   129d4:	ldr	r3, [r3]
   129d8:	movw	r2, #32676	; 0x7fa4
   129dc:	movt	r2, #1
   129e0:	movw	r1, #31532	; 0x7b2c
   129e4:	movt	r1, #1
   129e8:	ldr	r0, [r0]
   129ec:	bl	167ac <__assert_fail@plt+0x5424>
   129f0:	mov	r0, r4
   129f4:	bl	11238 <exit@plt>
   129f8:	cmp	r0, #109	; 0x6d
   129fc:	bne	12a38 <__assert_fail@plt+0x16b0>
   12a00:	mov	r3, #1
   12a04:	strb	r3, [r9, #9]
   12a08:	b	12914 <__assert_fail@plt+0x158c>
   12a0c:	mov	r3, #1
   12a10:	strb	r3, [r9, #1]
   12a14:	b	12914 <__assert_fail@plt+0x158c>
   12a18:	mov	r3, #1
   12a1c:	strb	r3, [r9, #8]
   12a20:	b	12914 <__assert_fail@plt+0x158c>
   12a24:	mov	r3, #1
   12a28:	strb	r3, [r9, #11]
   12a2c:	b	12914 <__assert_fail@plt+0x158c>
   12a30:	mov	r0, #0
   12a34:	bl	12454 <__assert_fail@plt+0x10cc>
   12a38:	mov	r0, #1
   12a3c:	bl	12454 <__assert_fail@plt+0x10cc>
   12a40:	movw	r3, #37280	; 0x91a0
   12a44:	movt	r3, #2
   12a48:	ldrb	r3, [r3, #1]
   12a4c:	cmp	r3, #0
   12a50:	bne	12abc <__assert_fail@plt+0x1734>
   12a54:	movw	r3, #37280	; 0x91a0
   12a58:	movt	r3, #2
   12a5c:	ldrb	r3, [r3, #8]
   12a60:	cmp	r3, #0
   12a64:	bne	12abc <__assert_fail@plt+0x1734>
   12a68:	movw	r3, #37280	; 0x91a0
   12a6c:	movt	r3, #2
   12a70:	ldrb	r3, [r3, #9]
   12a74:	cmp	r3, #0
   12a78:	bne	12abc <__assert_fail@plt+0x1734>
   12a7c:	movw	r3, #37280	; 0x91a0
   12a80:	movt	r3, #2
   12a84:	ldrb	r3, [r3, #10]
   12a88:	cmp	r3, #0
   12a8c:	bne	12abc <__assert_fail@plt+0x1734>
   12a90:	movw	r3, #37280	; 0x91a0
   12a94:	movt	r3, #2
   12a98:	ldrb	r3, [r3, #11]
   12a9c:	cmp	r3, #0
   12aa0:	bne	12abc <__assert_fail@plt+0x1734>
   12aa4:	movw	r3, #37280	; 0x91a0
   12aa8:	movt	r3, #2
   12aac:	mov	r2, #1
   12ab0:	strb	r2, [r3, #10]
   12ab4:	strb	r2, [r3, #8]
   12ab8:	strb	r2, [r3, #1]
   12abc:	cmp	r4, #0
   12ac0:	beq	12d50 <__assert_fail@plt+0x19c8>
   12ac4:	movw	r3, #37248	; 0x9180
   12ac8:	movt	r3, #2
   12acc:	ldr	r3, [r3]
   12ad0:	cmp	r3, r5
   12ad4:	blt	12bac <__assert_fail@plt+0x1824>
   12ad8:	movw	r1, #32996	; 0x80e4
   12adc:	movt	r1, #1
   12ae0:	mov	r0, r4
   12ae4:	bl	11088 <strcmp@plt>
   12ae8:	cmp	r0, #0
   12aec:	bne	12c30 <__assert_fail@plt+0x18a8>
   12af0:	movw	r3, #37264	; 0x9190
   12af4:	movt	r3, #2
   12af8:	ldr	r5, [r3]
   12afc:	mov	r0, r5
   12b00:	bl	112d4 <fileno@plt>
   12b04:	add	r2, sp, #64	; 0x40
   12b08:	mov	r1, r0
   12b0c:	mov	r0, #3
   12b10:	bl	11178 <__fxstat64@plt>
   12b14:	cmp	r0, #0
   12b18:	bne	12b2c <__assert_fail@plt+0x17a4>
   12b1c:	ldr	r3, [sp, #80]	; 0x50
   12b20:	and	r3, r3, #61440	; 0xf000
   12b24:	cmp	r3, #32768	; 0x8000
   12b28:	beq	12c88 <__assert_fail@plt+0x1900>
   12b2c:	mov	r0, r5
   12b30:	bl	13378 <__assert_fail@plt+0x1ff0>
   12b34:	str	r0, [sp, #56]	; 0x38
   12b38:	mov	r3, #0
   12b3c:	mov	r5, r3
   12b40:	str	r3, [sp, #60]	; 0x3c
   12b44:	mov	r6, r3
   12b48:	ldr	r3, [sp, #56]	; 0x38
   12b4c:	cmp	r3, #0
   12b50:	beq	12dbc <__assert_fail@plt+0x1a34>
   12b54:	cmp	r5, #0
   12b58:	bne	12d8c <__assert_fail@plt+0x1a04>
   12b5c:	mov	r1, #112	; 0x70
   12b60:	mov	r0, #1
   12b64:	bl	16a04 <__assert_fail@plt+0x567c>
   12b68:	mov	r9, r0
   12b6c:	mov	r6, #1
   12b70:	str	r6, [r9]
   12b74:	movw	r3, #37280	; 0x91a0
   12b78:	movt	r3, #2
   12b7c:	str	r6, [r3, #4]
   12b80:	mov	r8, #0
   12b84:	mov	r7, #1
   12b88:	movw	r3, #33196	; 0x81ac
   12b8c:	movt	r3, #1
   12b90:	str	r3, [sp, #32]
   12b94:	movw	r3, #33460	; 0x82b4
   12b98:	movt	r3, #1
   12b9c:	str	r3, [sp, #40]	; 0x28
   12ba0:	movw	fp, #32996	; 0x80e4
   12ba4:	movt	fp, #1
   12ba8:	b	13290 <__assert_fail@plt+0x1f08>
   12bac:	mov	r2, #5
   12bb0:	movw	r1, #32924	; 0x809c
   12bb4:	movt	r1, #1
   12bb8:	mov	r0, #0
   12bbc:	bl	11124 <dcgettext@plt>
   12bc0:	mov	r4, r0
   12bc4:	movw	r3, #37248	; 0x9180
   12bc8:	movt	r3, #2
   12bcc:	ldr	r3, [r3]
   12bd0:	ldr	r1, [r7, r3, lsl #2]
   12bd4:	mov	r0, #4
   12bd8:	bl	15bac <__assert_fail@plt+0x4824>
   12bdc:	mov	r3, r0
   12be0:	mov	r2, r4
   12be4:	mov	r1, #0
   12be8:	mov	r0, r1
   12bec:	bl	111c0 <error@plt>
   12bf0:	movw	r3, #37256	; 0x9188
   12bf4:	movt	r3, #2
   12bf8:	ldr	r4, [r3]
   12bfc:	mov	r2, #5
   12c00:	movw	r1, #32944	; 0x80b0
   12c04:	movt	r1, #1
   12c08:	mov	r0, #0
   12c0c:	bl	11124 <dcgettext@plt>
   12c10:	mov	r3, r0
   12c14:	movw	r2, #33788	; 0x83fc
   12c18:	movt	r2, #1
   12c1c:	mov	r1, #1
   12c20:	mov	r0, r4
   12c24:	bl	112e0 <__fprintf_chk@plt>
   12c28:	mov	r0, #1
   12c2c:	bl	12454 <__assert_fail@plt+0x10cc>
   12c30:	movw	r1, #33000	; 0x80e8
   12c34:	movt	r1, #1
   12c38:	mov	r0, r4
   12c3c:	bl	11334 <fopen64@plt>
   12c40:	subs	r5, r0, #0
   12c44:	bne	12afc <__assert_fail@plt+0x1774>
   12c48:	bl	11280 <__errno_location@plt>
   12c4c:	ldr	r5, [r0]
   12c50:	mov	r2, #5
   12c54:	movw	r1, #33004	; 0x80ec
   12c58:	movt	r1, #1
   12c5c:	mov	r0, #0
   12c60:	bl	11124 <dcgettext@plt>
   12c64:	mov	r6, r0
   12c68:	mov	r1, r4
   12c6c:	mov	r0, #4
   12c70:	bl	15bac <__assert_fail@plt+0x4824>
   12c74:	mov	r3, r0
   12c78:	mov	r2, r6
   12c7c:	mov	r1, r5
   12c80:	mov	r0, #1
   12c84:	bl	111c0 <error@plt>
   12c88:	ldrd	r0, [sp, #112]	; 0x70
   12c8c:	bl	177d4 <_obstack_memory_used@@Base+0x490>
   12c90:	vmov	d8, r0, r1
   12c94:	bl	13b00 <__assert_fail@plt+0x2778>
   12c98:	vldr	d7, [pc, #984]	; 13078 <__assert_fail@plt+0x1cf0>
   12c9c:	vmul.f64	d7, d0, d7
   12ca0:	vldr	d6, [pc, #984]	; 13080 <__assert_fail@plt+0x1cf8>
   12ca4:	vcmpe.f64	d7, d6
   12ca8:	vmrs	APSR_nzcv, fpscr
   12cac:	vldrgt	d0, [pc, #972]	; 13080 <__assert_fail@plt+0x1cf8>
   12cb0:	ble	12d08 <__assert_fail@plt+0x1980>
   12cb4:	vcmpe.f64	d8, d0
   12cb8:	vmrs	APSR_nzcv, fpscr
   12cbc:	bhi	12b2c <__assert_fail@plt+0x17a4>
   12cc0:	add	r0, sp, #168	; 0xa8
   12cc4:	bl	15fac <__assert_fail@plt+0x4c24>
   12cc8:	add	r1, sp, #168	; 0xa8
   12ccc:	mov	r0, r5
   12cd0:	bl	16078 <__assert_fail@plt+0x4cf0>
   12cd4:	subs	r3, r0, #0
   12cd8:	str	r3, [sp, #60]	; 0x3c
   12cdc:	beq	12d18 <__assert_fail@plt+0x1990>
   12ce0:	mov	r0, r5
   12ce4:	bl	13670 <__assert_fail@plt+0x22e8>
   12ce8:	cmp	r0, #0
   12cec:	bne	12d18 <__assert_fail@plt+0x1990>
   12cf0:	ldr	r6, [sp, #172]	; 0xac
   12cf4:	ldr	r5, [sp, #168]	; 0xa8
   12cf8:	mov	r0, r6
   12cfc:	bl	13340 <__assert_fail@plt+0x1fb8>
   12d00:	str	r0, [sp, #56]	; 0x38
   12d04:	b	12b48 <__assert_fail@plt+0x17c0>
   12d08:	bl	13b00 <__assert_fail@plt+0x2778>
   12d0c:	vldr	d7, [pc, #868]	; 13078 <__assert_fail@plt+0x1cf0>
   12d10:	vmul.f64	d0, d0, d7
   12d14:	b	12cb4 <__assert_fail@plt+0x192c>
   12d18:	mov	r2, #5
   12d1c:	movw	r1, #33032	; 0x8108
   12d20:	movt	r1, #1
   12d24:	mov	r0, #0
   12d28:	bl	11124 <dcgettext@plt>
   12d2c:	mov	r5, r0
   12d30:	mov	r1, r4
   12d34:	mov	r0, #4
   12d38:	bl	15bac <__assert_fail@plt+0x4824>
   12d3c:	mov	r3, r0
   12d40:	mov	r2, r5
   12d44:	mov	r1, #0
   12d48:	mov	r0, #1
   12d4c:	bl	111c0 <error@plt>
   12d50:	movw	r3, #37248	; 0x9180
   12d54:	movt	r3, #2
   12d58:	ldr	r3, [r3]
   12d5c:	cmp	r3, r5
   12d60:	addlt	r6, r7, r3, lsl #2
   12d64:	sublt	r5, r5, r3
   12d68:	ldrge	r6, [pc, #796]	; 1308c <__assert_fail@plt+0x1d04>
   12d6c:	movge	r5, #1
   12d70:	mov	r0, r6
   12d74:	bl	13340 <__assert_fail@plt+0x1fb8>
   12d78:	subs	r3, r0, #0
   12d7c:	str	r3, [sp, #56]	; 0x38
   12d80:	movne	r3, #0
   12d84:	strne	r3, [sp, #60]	; 0x3c
   12d88:	beq	12dbc <__assert_fail@plt+0x1a34>
   12d8c:	mov	r1, #112	; 0x70
   12d90:	mov	r0, r5
   12d94:	bl	16a04 <__assert_fail@plt+0x567c>
   12d98:	mov	r9, r0
   12d9c:	cmp	r5, #1
   12da0:	beq	12dc0 <__assert_fail@plt+0x1a38>
   12da4:	mov	r8, r6
   12da8:	add	r7, r9, #8
   12dac:	add	r6, r6, r5, lsl #2
   12db0:	movw	fp, #32996	; 0x80e4
   12db4:	movt	fp, #1
   12db8:	b	12e18 <__assert_fail@plt+0x1a90>
   12dbc:	bl	16d18 <__assert_fail@plt+0x5990>
   12dc0:	movw	r2, #37280	; 0x91a0
   12dc4:	movt	r2, #2
   12dc8:	ldrb	r3, [r2, #1]
   12dcc:	ldrb	r1, [r2, #8]
   12dd0:	add	r3, r3, r1
   12dd4:	ldrb	r1, [r2, #9]
   12dd8:	add	r3, r3, r1
   12ddc:	ldrb	r1, [r2, #10]
   12de0:	add	r3, r3, r1
   12de4:	ldrb	r2, [r2, #11]
   12de8:	add	r3, r3, r2
   12dec:	cmp	r3, #1
   12df0:	bne	12da4 <__assert_fail@plt+0x1a1c>
   12df4:	b	12b6c <__assert_fail@plt+0x17e4>
   12df8:	mov	r2, r7
   12dfc:	mov	r1, #0
   12e00:	mov	r0, #3
   12e04:	bl	11178 <__fxstat64@plt>
   12e08:	str	r0, [r7, #-8]
   12e0c:	add	r7, r7, #112	; 0x70
   12e10:	cmp	r8, r6
   12e14:	beq	131b8 <__assert_fail@plt+0x1e30>
   12e18:	ldr	sl, [r8], #4
   12e1c:	cmp	sl, #0
   12e20:	beq	12df8 <__assert_fail@plt+0x1a70>
   12e24:	mov	r1, fp
   12e28:	mov	r0, sl
   12e2c:	bl	11088 <strcmp@plt>
   12e30:	cmp	r0, #0
   12e34:	beq	12df8 <__assert_fail@plt+0x1a70>
   12e38:	mov	r2, r7
   12e3c:	mov	r1, sl
   12e40:	mov	r0, #3
   12e44:	bl	11358 <__xstat64@plt>
   12e48:	b	12e08 <__assert_fail@plt+0x1a80>
   12e4c:	add	r3, r3, #112	; 0x70
   12e50:	cmp	r3, ip
   12e54:	beq	12e8c <__assert_fail@plt+0x1b04>
   12e58:	ldr	r2, [r3]
   12e5c:	cmp	r2, #0
   12e60:	bne	12e4c <__assert_fail@plt+0x1ac4>
   12e64:	ldr	r2, [r3, #24]
   12e68:	and	r2, r2, #61440	; 0xf000
   12e6c:	cmp	r2, #32768	; 0x8000
   12e70:	movne	r7, r6
   12e74:	bne	12e4c <__assert_fail@plt+0x1ac4>
   12e78:	ldr	r2, [r3, #56]	; 0x38
   12e7c:	ldr	lr, [r3, #60]	; 0x3c
   12e80:	adds	r0, r0, r2
   12e84:	adc	r1, r1, lr
   12e88:	b	12e4c <__assert_fail@plt+0x1ac4>
   12e8c:	mov	r6, #1
   12e90:	mov	sl, #10
   12e94:	mov	fp, #0
   12e98:	b	12eac <__assert_fail@plt+0x1b24>
   12e9c:	add	r6, r6, #1
   12ea0:	mov	r2, sl
   12ea4:	mov	r3, fp
   12ea8:	bl	17834 <_obstack_memory_used@@Base+0x4f0>
   12eac:	cmp	r1, #0
   12eb0:	cmpeq	r0, #9
   12eb4:	bhi	12e9c <__assert_fail@plt+0x1b14>
   12eb8:	cmp	r6, r7
   12ebc:	movlt	r6, r7
   12ec0:	b	12b74 <__assert_fail@plt+0x17ec>
   12ec4:	ldr	r3, [sp, #64]	; 0x40
   12ec8:	cmp	r3, #3
   12ecc:	beq	12fac <__assert_fail@plt+0x1c24>
   12ed0:	cmp	r3, #4
   12ed4:	beq	12efc <__assert_fail@plt+0x1b74>
   12ed8:	cmp	r3, #2
   12edc:	beq	130c8 <__assert_fail@plt+0x1d40>
   12ee0:	ldr	r3, [pc, #424]	; 13090 <__assert_fail@plt+0x1d08>
   12ee4:	movw	r2, #938	; 0x3aa
   12ee8:	movw	r1, #33080	; 0x8138
   12eec:	movt	r1, #1
   12ef0:	movw	r0, #33092	; 0x8144
   12ef4:	movt	r0, #1
   12ef8:	bl	11388 <__assert_fail@plt>
   12efc:	bl	11280 <__errno_location@plt>
   12f00:	ldr	r5, [r0]
   12f04:	mov	r2, #5
   12f08:	movw	r1, #33064	; 0x8128
   12f0c:	movt	r1, #1
   12f10:	mov	r0, #0
   12f14:	bl	11124 <dcgettext@plt>
   12f18:	mov	r6, r0
   12f1c:	mov	r2, r4
   12f20:	mov	r1, #3
   12f24:	mov	r0, #0
   12f28:	bl	15cd0 <__assert_fail@plt+0x4948>
   12f2c:	mov	r3, r0
   12f30:	mov	r2, r6
   12f34:	mov	r1, r5
   12f38:	mov	r0, #0
   12f3c:	bl	111c0 <error@plt>
   12f40:	mov	r7, #0
   12f44:	ldr	r3, [sp, #60]	; 0x3c
   12f48:	cmp	r3, #0
   12f4c:	bne	13124 <__assert_fail@plt+0x1d9c>
   12f50:	ldr	r0, [sp, #56]	; 0x38
   12f54:	bl	13474 <__assert_fail@plt+0x20ec>
   12f58:	cmp	r0, #1
   12f5c:	bhi	13130 <__assert_fail@plt+0x1da8>
   12f60:	ldr	r0, [sp, #56]	; 0x38
   12f64:	bl	1349c <__assert_fail@plt+0x2114>
   12f68:	mov	r0, r9
   12f6c:	bl	1379c <__assert_fail@plt+0x2414>
   12f70:	movw	r3, #37280	; 0x91a0
   12f74:	movt	r3, #2
   12f78:	ldrb	r3, [r3, #60]	; 0x3c
   12f7c:	cmp	r3, #0
   12f80:	bne	13190 <__assert_fail@plt+0x1e08>
   12f84:	eor	r0, r7, #1
   12f88:	uxtb	r0, r0
   12f8c:	add	sp, sp, #316	; 0x13c
   12f90:	vpop	{d8}
   12f94:	ldrd	r4, [sp]
   12f98:	ldrd	r6, [sp, #8]
   12f9c:	ldrd	r8, [sp, #16]
   12fa0:	ldrd	sl, [sp, #24]
   12fa4:	add	sp, sp, #32
   12fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fac:	bl	16d18 <__assert_fail@plt+0x5990>
   12fb0:	mov	r2, #5
   12fb4:	movw	r1, #33132	; 0x816c
   12fb8:	movt	r1, #1
   12fbc:	bl	11124 <dcgettext@plt>
   12fc0:	mov	r7, r0
   12fc4:	mov	r1, r6
   12fc8:	mov	r0, #4
   12fcc:	bl	15bac <__assert_fail@plt+0x4824>
   12fd0:	mov	r3, r0
   12fd4:	mov	r2, r7
   12fd8:	mov	r1, #0
   12fdc:	mov	r0, r1
   12fe0:	bl	111c0 <error@plt>
   12fe4:	ldrb	r3, [r6]
   12fe8:	cmp	r3, #0
   12fec:	beq	1322c <__assert_fail@plt+0x1ea4>
   12ff0:	mov	r7, #0
   12ff4:	b	13280 <__assert_fail@plt+0x1ef8>
   12ff8:	mov	r1, #0
   12ffc:	mov	r0, r6
   13000:	bl	111cc <open64@plt>
   13004:	str	r0, [sp, #48]	; 0x30
   13008:	cmn	r0, #1
   1300c:	beq	13094 <__assert_fail@plt+0x1d0c>
   13010:	mov	r2, #0
   13014:	mov	r3, #0
   13018:	strd	r2, [sp]
   1301c:	mov	r2, sl
   13020:	mov	r1, r6
   13024:	ldr	r0, [sp, #48]	; 0x30
   13028:	bl	118f4 <__assert_fail@plt+0x56c>
   1302c:	mov	sl, r0
   13030:	ldr	r0, [sp, #48]	; 0x30
   13034:	bl	1137c <close@plt>
   13038:	cmp	r0, #0
   1303c:	beq	13334 <__assert_fail@plt+0x1fac>
   13040:	bl	11280 <__errno_location@plt>
   13044:	ldr	sl, [r0]
   13048:	mov	r2, r6
   1304c:	mov	r1, #3
   13050:	mov	r0, #0
   13054:	bl	15cd0 <__assert_fail@plt+0x4948>
   13058:	mov	r3, r0
   1305c:	ldr	r2, [sp, #40]	; 0x28
   13060:	mov	r1, sl
   13064:	mov	r0, #0
   13068:	bl	111c0 <error@plt>
   1306c:	mov	sl, #0
   13070:	b	13334 <__assert_fail@plt+0x1fac>
   13074:	nop	{0}
   13078:	andeq	r0, r0, r0
   1307c:	svccc	0x00e00000
   13080:	andeq	r0, r0, r0
   13084:	cmnmi	r4, r0
   13088:	andeq	r7, r1, r0, ror sl
   1308c:	ldrdeq	r9, [r2], -r8
   13090:	andeq	r7, r1, r0, lsl fp
   13094:	bl	11280 <__errno_location@plt>
   13098:	ldr	sl, [r0]
   1309c:	mov	r2, r6
   130a0:	mov	r1, #3
   130a4:	mov	r0, #0
   130a8:	bl	15cd0 <__assert_fail@plt+0x4948>
   130ac:	mov	r3, r0
   130b0:	ldr	r2, [sp, #40]	; 0x28
   130b4:	mov	r1, sl
   130b8:	mov	r0, #0
   130bc:	bl	111c0 <error@plt>
   130c0:	mov	sl, #0
   130c4:	b	13334 <__assert_fail@plt+0x1fac>
   130c8:	cmp	r4, #0
   130cc:	movne	r4, #0
   130d0:	andeq	r4, r7, #1
   130d4:	cmp	r4, #0
   130d8:	beq	12f44 <__assert_fail@plt+0x1bbc>
   130dc:	ldr	r0, [sp, #56]	; 0x38
   130e0:	bl	13474 <__assert_fail@plt+0x20ec>
   130e4:	cmp	r0, #0
   130e8:	movne	r7, r4
   130ec:	bne	12f44 <__assert_fail@plt+0x1bbc>
   130f0:	movw	r3, #37280	; 0x91a0
   130f4:	movt	r3, #2
   130f8:	mov	r2, #1
   130fc:	strb	r2, [r3, #60]	; 0x3c
   13100:	mvn	r2, #0
   13104:	mvn	r3, #0
   13108:	strd	r2, [sp]
   1310c:	mov	r2, r9
   13110:	mov	r1, #0
   13114:	mov	r0, r1
   13118:	bl	118f4 <__assert_fail@plt+0x56c>
   1311c:	mov	r7, r0
   13120:	b	12f44 <__assert_fail@plt+0x1bbc>
   13124:	add	r0, sp, #168	; 0xa8
   13128:	bl	1603c <__assert_fail@plt+0x4cb4>
   1312c:	b	12f50 <__assert_fail@plt+0x1bc8>
   13130:	movw	r3, #37280	; 0x91a0
   13134:	movt	r3, #2
   13138:	ldrd	r0, [r3, #16]
   1313c:	strd	r0, [sp, #32]
   13140:	ldrd	r4, [r3, #24]
   13144:	strd	r4, [sp, #40]	; 0x28
   13148:	ldrd	sl, [r3, #32]
   1314c:	strd	sl, [sp, #48]	; 0x30
   13150:	ldrd	sl, [r3, #40]	; 0x28
   13154:	ldrd	r4, [r3, #48]	; 0x30
   13158:	mov	r2, #5
   1315c:	movw	r1, #33240	; 0x81d8
   13160:	movt	r1, #1
   13164:	mov	r0, #0
   13168:	bl	11124 <dcgettext@plt>
   1316c:	str	r0, [sp, #24]
   13170:	strd	r4, [sp, #16]
   13174:	strd	sl, [sp, #8]
   13178:	ldrd	sl, [sp, #48]	; 0x30
   1317c:	strd	sl, [sp]
   13180:	ldrd	r2, [sp, #40]	; 0x28
   13184:	ldrd	r0, [sp, #32]
   13188:	bl	116c4 <__assert_fail@plt+0x33c>
   1318c:	b	12f60 <__assert_fail@plt+0x1bd8>
   13190:	mov	r0, #0
   13194:	bl	1137c <close@plt>
   13198:	cmp	r0, #0
   1319c:	beq	12f84 <__assert_fail@plt+0x1bfc>
   131a0:	bl	11280 <__errno_location@plt>
   131a4:	movw	r2, #32996	; 0x80e4
   131a8:	movt	r2, #1
   131ac:	ldr	r1, [r0]
   131b0:	mov	r0, #1
   131b4:	bl	111c0 <error@plt>
   131b8:	ldr	r3, [r9]
   131bc:	cmp	r3, #0
   131c0:	movgt	r6, #1
   131c4:	bgt	12b74 <__assert_fail@plt+0x17ec>
   131c8:	mov	r3, r9
   131cc:	mov	ip, #112	; 0x70
   131d0:	mla	ip, ip, r5, r9
   131d4:	mov	r0, #0
   131d8:	mov	r1, #0
   131dc:	mov	r7, #1
   131e0:	mov	r6, #7
   131e4:	b	12e50 <__assert_fail@plt+0x1ac8>
   131e8:	ldrb	r3, [r6]
   131ec:	cmp	r3, #0
   131f0:	bne	132e0 <__assert_fail@plt+0x1f58>
   131f4:	mov	r2, #5
   131f8:	ldr	r1, [sp, #32]
   131fc:	mov	r0, #0
   13200:	bl	11124 <dcgettext@plt>
   13204:	mov	r3, r0
   13208:	ldr	r2, [sp, #40]	; 0x28
   1320c:	mov	r1, #0
   13210:	mov	r0, r1
   13214:	bl	111c0 <error@plt>
   13218:	mov	r7, #0
   1321c:	b	13280 <__assert_fail@plt+0x1ef8>
   13220:	ldrb	r3, [r6]
   13224:	cmp	r3, #0
   13228:	bne	132e0 <__assert_fail@plt+0x1f58>
   1322c:	ldr	r0, [sp, #56]	; 0x38
   13230:	bl	13474 <__assert_fail@plt+0x20ec>
   13234:	mov	r7, r0
   13238:	mov	r2, r4
   1323c:	mov	r1, #3
   13240:	mov	r0, #0
   13244:	bl	15cd0 <__assert_fail@plt+0x4948>
   13248:	mov	r6, r0
   1324c:	mov	r2, #5
   13250:	ldr	r1, [sp, #32]
   13254:	mov	r0, #0
   13258:	bl	11124 <dcgettext@plt>
   1325c:	str	r0, [sp, #4]
   13260:	str	r7, [sp]
   13264:	mov	r3, r6
   13268:	movw	r2, #33228	; 0x81cc
   1326c:	movt	r2, #1
   13270:	mov	r1, #0
   13274:	mov	r0, r1
   13278:	bl	111c0 <error@plt>
   1327c:	mov	r7, #0
   13280:	cmp	r5, #0
   13284:	moveq	r3, #1
   13288:	streq	r3, [r9]
   1328c:	add	r8, r8, #1
   13290:	add	r1, sp, #64	; 0x40
   13294:	ldr	r0, [sp, #56]	; 0x38
   13298:	bl	133b8 <__assert_fail@plt+0x2030>
   1329c:	subs	r6, r0, #0
   132a0:	beq	12ec4 <__assert_fail@plt+0x1b3c>
   132a4:	cmp	r4, #0
   132a8:	beq	131e8 <__assert_fail@plt+0x1e60>
   132ac:	mov	r1, fp
   132b0:	mov	r0, r4
   132b4:	bl	11088 <strcmp@plt>
   132b8:	cmp	r0, #0
   132bc:	bne	13220 <__assert_fail@plt+0x1e98>
   132c0:	mov	r1, fp
   132c4:	mov	r0, r6
   132c8:	bl	11088 <strcmp@plt>
   132cc:	cmp	r0, #0
   132d0:	beq	12fb0 <__assert_fail@plt+0x1c28>
   132d4:	ldrb	r3, [r6]
   132d8:	cmp	r3, #0
   132dc:	beq	1322c <__assert_fail@plt+0x1ea4>
   132e0:	cmp	r5, #0
   132e4:	movne	sl, #112	; 0x70
   132e8:	mulne	sl, sl, r8
   132ec:	moveq	sl, r5
   132f0:	add	sl, r9, sl
   132f4:	mov	r1, fp
   132f8:	mov	r0, r6
   132fc:	bl	11088 <strcmp@plt>
   13300:	cmp	r0, #0
   13304:	bne	12ff8 <__assert_fail@plt+0x1c70>
   13308:	movw	r3, #37280	; 0x91a0
   1330c:	movt	r3, #2
   13310:	mov	r2, #1
   13314:	strb	r2, [r3, #60]	; 0x3c
   13318:	mvn	r2, #0
   1331c:	mvn	r3, #0
   13320:	strd	r2, [sp]
   13324:	mov	r2, sl
   13328:	mov	r1, r6
   1332c:	bl	118f4 <__assert_fail@plt+0x56c>
   13330:	mov	sl, r0
   13334:	and	r7, r7, sl
   13338:	uxtb	r7, r7
   1333c:	b	13280 <__assert_fail@plt+0x1ef8>
   13340:	str	r4, [sp, #-8]!
   13344:	str	lr, [sp, #4]
   13348:	mov	r4, r0
   1334c:	mov	r0, #24
   13350:	bl	16dd0 <__assert_fail@plt+0x5a48>
   13354:	cmp	r0, #0
   13358:	beq	1336c <__assert_fail@plt+0x1fe4>
   1335c:	mov	r3, #0
   13360:	str	r3, [r0]
   13364:	str	r4, [r0, #16]
   13368:	str	r4, [r0, #20]
   1336c:	ldr	r4, [sp]
   13370:	add	sp, sp, #4
   13374:	pop	{pc}		; (ldr pc, [sp], #4)
   13378:	str	r4, [sp, #-8]!
   1337c:	str	lr, [sp, #4]
   13380:	mov	r4, r0
   13384:	mov	r0, #24
   13388:	bl	16dd0 <__assert_fail@plt+0x5a48>
   1338c:	cmp	r0, #0
   13390:	beq	133ac <__assert_fail@plt+0x2024>
   13394:	str	r4, [r0]
   13398:	mov	r3, #0
   1339c:	str	r3, [r0, #8]
   133a0:	str	r3, [r0, #12]
   133a4:	str	r3, [r0, #4]
   133a8:	str	r3, [r0, #16]
   133ac:	ldr	r4, [sp]
   133b0:	add	sp, sp, #4
   133b4:	pop	{pc}		; (ldr pc, [sp], #4)
   133b8:	ldr	r3, [r0]
   133bc:	cmp	r3, #0
   133c0:	beq	1343c <__assert_fail@plt+0x20b4>
   133c4:	strd	r4, [sp, #-16]!
   133c8:	str	r6, [sp, #8]
   133cc:	str	lr, [sp, #12]
   133d0:	mov	r5, r1
   133d4:	mov	r4, r0
   133d8:	mov	r2, #0
   133dc:	add	r1, r0, #12
   133e0:	add	r0, r0, #8
   133e4:	bl	1134c <getdelim@plt>
   133e8:	cmp	r0, #0
   133ec:	blt	1341c <__assert_fail@plt+0x2094>
   133f0:	mov	r3, #1
   133f4:	str	r3, [r5]
   133f8:	ldr	r3, [r4, #4]
   133fc:	add	r3, r3, #1
   13400:	str	r3, [r4, #4]
   13404:	ldr	r3, [r4, #8]
   13408:	mov	r0, r3
   1340c:	ldrd	r4, [sp]
   13410:	ldr	r6, [sp, #8]
   13414:	add	sp, sp, #12
   13418:	pop	{pc}		; (ldr pc, [sp], #4)
   1341c:	ldr	r0, [r4]
   13420:	bl	11244 <feof@plt>
   13424:	cmp	r0, #0
   13428:	movne	r3, #2
   1342c:	moveq	r3, #4
   13430:	str	r3, [r5]
   13434:	mov	r3, #0
   13438:	b	13408 <__assert_fail@plt+0x2080>
   1343c:	ldr	r3, [r0, #20]
   13440:	ldr	r3, [r3]
   13444:	cmp	r3, #0
   13448:	moveq	r2, #2
   1344c:	streq	r2, [r1]
   13450:	beq	1346c <__assert_fail@plt+0x20e4>
   13454:	mov	r3, #1
   13458:	str	r3, [r1]
   1345c:	ldr	r3, [r0, #20]
   13460:	add	r2, r3, #4
   13464:	str	r2, [r0, #20]
   13468:	ldr	r3, [r3]
   1346c:	mov	r0, r3
   13470:	bx	lr
   13474:	ldr	r3, [r0]
   13478:	cmp	r3, #0
   1347c:	beq	13488 <__assert_fail@plt+0x2100>
   13480:	ldr	r0, [r0, #4]
   13484:	bx	lr
   13488:	ldr	r3, [r0, #20]
   1348c:	ldr	r0, [r0, #16]
   13490:	sub	r0, r3, r0
   13494:	asr	r0, r0, #2
   13498:	bx	lr
   1349c:	str	r4, [sp, #-8]!
   134a0:	str	lr, [sp, #4]
   134a4:	mov	r4, r0
   134a8:	ldr	r3, [r0]
   134ac:	cmp	r3, #0
   134b0:	beq	134bc <__assert_fail@plt+0x2134>
   134b4:	ldr	r0, [r0, #8]
   134b8:	bl	1379c <__assert_fail@plt+0x2414>
   134bc:	mov	r0, r4
   134c0:	bl	1379c <__assert_fail@plt+0x2414>
   134c4:	ldr	r4, [sp]
   134c8:	add	sp, sp, #4
   134cc:	pop	{pc}		; (ldr pc, [sp], #4)
   134d0:	movw	r3, #37344	; 0x91e0
   134d4:	movt	r3, #2
   134d8:	str	r0, [r3]
   134dc:	bx	lr
   134e0:	movw	r3, #37344	; 0x91e0
   134e4:	movt	r3, #2
   134e8:	strb	r0, [r3, #4]
   134ec:	bx	lr
   134f0:	strd	r4, [sp, #-16]!
   134f4:	str	r6, [sp, #8]
   134f8:	str	lr, [sp, #12]
   134fc:	sub	sp, sp, #8
   13500:	movw	r3, #37268	; 0x9194
   13504:	movt	r3, #2
   13508:	ldr	r0, [r3]
   1350c:	bl	16e68 <__assert_fail@plt+0x5ae0>
   13510:	cmp	r0, #0
   13514:	beq	1353c <__assert_fail@plt+0x21b4>
   13518:	movw	r3, #37344	; 0x91e0
   1351c:	movt	r3, #2
   13520:	ldrb	r3, [r3, #4]
   13524:	cmp	r3, #0
   13528:	beq	13568 <__assert_fail@plt+0x21e0>
   1352c:	bl	11280 <__errno_location@plt>
   13530:	ldr	r3, [r0]
   13534:	cmp	r3, #32
   13538:	bne	13568 <__assert_fail@plt+0x21e0>
   1353c:	movw	r3, #37256	; 0x9188
   13540:	movt	r3, #2
   13544:	ldr	r0, [r3]
   13548:	bl	16e68 <__assert_fail@plt+0x5ae0>
   1354c:	cmp	r0, #0
   13550:	bne	135f0 <__assert_fail@plt+0x2268>
   13554:	add	sp, sp, #8
   13558:	ldrd	r4, [sp]
   1355c:	ldr	r6, [sp, #8]
   13560:	add	sp, sp, #12
   13564:	pop	{pc}		; (ldr pc, [sp], #4)
   13568:	mov	r2, #5
   1356c:	movw	r1, #33444	; 0x82a4
   13570:	movt	r1, #1
   13574:	mov	r0, #0
   13578:	bl	11124 <dcgettext@plt>
   1357c:	mov	r4, r0
   13580:	movw	r3, #37344	; 0x91e0
   13584:	movt	r3, #2
   13588:	ldr	r5, [r3]
   1358c:	cmp	r5, #0
   13590:	beq	135d0 <__assert_fail@plt+0x2248>
   13594:	bl	11280 <__errno_location@plt>
   13598:	ldr	r6, [r0]
   1359c:	mov	r0, r5
   135a0:	bl	15c98 <__assert_fail@plt+0x4910>
   135a4:	str	r4, [sp]
   135a8:	mov	r3, r0
   135ac:	movw	r2, #33456	; 0x82b0
   135b0:	movt	r2, #1
   135b4:	mov	r1, r6
   135b8:	mov	r0, #0
   135bc:	bl	111c0 <error@plt>
   135c0:	movw	r3, #37164	; 0x912c
   135c4:	movt	r3, #2
   135c8:	ldr	r0, [r3]
   135cc:	bl	110e8 <_exit@plt>
   135d0:	bl	11280 <__errno_location@plt>
   135d4:	mov	r3, r4
   135d8:	movw	r2, #33460	; 0x82b4
   135dc:	movt	r2, #1
   135e0:	ldr	r1, [r0]
   135e4:	mov	r0, #0
   135e8:	bl	111c0 <error@plt>
   135ec:	b	135c0 <__assert_fail@plt+0x2238>
   135f0:	movw	r3, #37164	; 0x912c
   135f4:	movt	r3, #2
   135f8:	ldr	r0, [r3]
   135fc:	bl	110e8 <_exit@plt>
   13600:	strd	r4, [sp, #-12]!
   13604:	str	lr, [sp, #8]
   13608:	sub	sp, sp, #20
   1360c:	ldr	r1, [sp, #40]	; 0x28
   13610:	str	r1, [sp, #8]
   13614:	ldrd	r4, [sp, #32]
   13618:	strd	r4, [sp]
   1361c:	bl	11094 <posix_fadvise64@plt>
   13620:	add	sp, sp, #20
   13624:	ldrd	r4, [sp]
   13628:	add	sp, sp, #8
   1362c:	pop	{pc}		; (ldr pc, [sp], #4)
   13630:	cmp	r0, #0
   13634:	bxeq	lr
   13638:	str	r4, [sp, #-8]!
   1363c:	str	lr, [sp, #4]
   13640:	sub	sp, sp, #16
   13644:	mov	r4, r1
   13648:	bl	112d4 <fileno@plt>
   1364c:	str	r4, [sp, #8]
   13650:	mov	r2, #0
   13654:	mov	r3, #0
   13658:	strd	r2, [sp]
   1365c:	bl	11094 <posix_fadvise64@plt>
   13660:	add	sp, sp, #16
   13664:	ldr	r4, [sp]
   13668:	add	sp, sp, #4
   1366c:	pop	{pc}		; (ldr pc, [sp], #4)
   13670:	strd	r4, [sp, #-16]!
   13674:	str	r6, [sp, #8]
   13678:	str	lr, [sp, #12]
   1367c:	sub	sp, sp, #8
   13680:	mov	r4, r0
   13684:	bl	112d4 <fileno@plt>
   13688:	cmp	r0, #0
   1368c:	blt	13704 <__assert_fail@plt+0x237c>
   13690:	mov	r0, r4
   13694:	bl	11208 <__freading@plt>
   13698:	cmp	r0, #0
   1369c:	beq	136d0 <__assert_fail@plt+0x2348>
   136a0:	mov	r0, r4
   136a4:	bl	112d4 <fileno@plt>
   136a8:	mov	r3, #1
   136ac:	str	r3, [sp]
   136b0:	mov	r2, #0
   136b4:	mov	r3, #0
   136b8:	bl	11190 <lseek64@plt>
   136bc:	mvn	r2, #0
   136c0:	mvn	r3, #0
   136c4:	cmp	r1, r3
   136c8:	cmpeq	r0, r2
   136cc:	beq	13710 <__assert_fail@plt+0x2388>
   136d0:	mov	r0, r4
   136d4:	bl	1372c <__assert_fail@plt+0x23a4>
   136d8:	cmp	r0, #0
   136dc:	beq	13710 <__assert_fail@plt+0x2388>
   136e0:	bl	11280 <__errno_location@plt>
   136e4:	mov	r5, r0
   136e8:	ldr	r6, [r0]
   136ec:	mov	r0, r4
   136f0:	bl	112ec <fclose@plt>
   136f4:	cmp	r6, #0
   136f8:	strne	r6, [r5]
   136fc:	mvnne	r0, #0
   13700:	b	13718 <__assert_fail@plt+0x2390>
   13704:	mov	r0, r4
   13708:	bl	112ec <fclose@plt>
   1370c:	b	13718 <__assert_fail@plt+0x2390>
   13710:	mov	r0, r4
   13714:	bl	112ec <fclose@plt>
   13718:	add	sp, sp, #8
   1371c:	ldrd	r4, [sp]
   13720:	ldr	r6, [sp, #8]
   13724:	add	sp, sp, #12
   13728:	pop	{pc}		; (ldr pc, [sp], #4)
   1372c:	str	r4, [sp, #-8]!
   13730:	str	lr, [sp, #4]
   13734:	sub	sp, sp, #8
   13738:	subs	r4, r0, #0
   1373c:	beq	13750 <__assert_fail@plt+0x23c8>
   13740:	mov	r0, r4
   13744:	bl	11208 <__freading@plt>
   13748:	cmp	r0, #0
   1374c:	bne	13768 <__assert_fail@plt+0x23e0>
   13750:	mov	r0, r4
   13754:	bl	110ac <fflush@plt>
   13758:	add	sp, sp, #8
   1375c:	ldr	r4, [sp]
   13760:	add	sp, sp, #4
   13764:	pop	{pc}		; (ldr pc, [sp], #4)
   13768:	ldr	r3, [r4]
   1376c:	tst	r3, #256	; 0x100
   13770:	bne	13780 <__assert_fail@plt+0x23f8>
   13774:	mov	r0, r4
   13778:	bl	110ac <fflush@plt>
   1377c:	b	13758 <__assert_fail@plt+0x23d0>
   13780:	mov	r3, #1
   13784:	str	r3, [sp]
   13788:	mov	r2, #0
   1378c:	mov	r3, #0
   13790:	mov	r0, r4
   13794:	bl	137fc <__assert_fail@plt+0x2474>
   13798:	b	13774 <__assert_fail@plt+0x23ec>
   1379c:	strd	r4, [sp, #-12]!
   137a0:	str	lr, [sp, #8]
   137a4:	sub	sp, sp, #12
   137a8:	mov	r5, r0
   137ac:	bl	11280 <__errno_location@plt>
   137b0:	mov	r4, r0
   137b4:	ldr	r3, [r0]
   137b8:	str	r3, [sp]
   137bc:	str	r3, [sp, #4]
   137c0:	mov	r3, #0
   137c4:	str	r3, [r0]
   137c8:	mov	r0, r5
   137cc:	bl	110d0 <free@plt>
   137d0:	ldr	r3, [r4]
   137d4:	clz	r3, r3
   137d8:	lsr	r3, r3, #5
   137dc:	add	r2, sp, #8
   137e0:	add	r3, r2, r3, lsl #2
   137e4:	ldr	r3, [r3, #-8]
   137e8:	str	r3, [r4]
   137ec:	add	sp, sp, #12
   137f0:	ldrd	r4, [sp]
   137f4:	add	sp, sp, #8
   137f8:	pop	{pc}		; (ldr pc, [sp], #4)
   137fc:	str	r4, [sp, #-16]!
   13800:	strd	r6, [sp, #4]
   13804:	str	lr, [sp, #12]
   13808:	sub	sp, sp, #8
   1380c:	mov	r4, r0
   13810:	mov	r6, r2
   13814:	mov	r7, r3
   13818:	ldr	r2, [r0, #8]
   1381c:	ldr	r3, [r0, #4]
   13820:	cmp	r2, r3
   13824:	beq	13854 <__assert_fail@plt+0x24cc>
   13828:	ldr	r3, [sp, #24]
   1382c:	str	r3, [sp]
   13830:	mov	r2, r6
   13834:	mov	r3, r7
   13838:	mov	r0, r4
   1383c:	bl	112f8 <fseeko64@plt>
   13840:	add	sp, sp, #8
   13844:	ldr	r4, [sp]
   13848:	ldrd	r6, [sp, #4]
   1384c:	add	sp, sp, #12
   13850:	pop	{pc}		; (ldr pc, [sp], #4)
   13854:	ldr	r2, [r0, #20]
   13858:	ldr	r3, [r0, #16]
   1385c:	cmp	r2, r3
   13860:	bne	13828 <__assert_fail@plt+0x24a0>
   13864:	ldr	r3, [r0, #36]	; 0x24
   13868:	cmp	r3, #0
   1386c:	bne	13828 <__assert_fail@plt+0x24a0>
   13870:	bl	112d4 <fileno@plt>
   13874:	ldr	r3, [sp, #24]
   13878:	str	r3, [sp]
   1387c:	mov	r2, r6
   13880:	mov	r3, r7
   13884:	bl	11190 <lseek64@plt>
   13888:	mvn	r2, #0
   1388c:	mvn	r3, #0
   13890:	cmp	r1, r3
   13894:	cmpeq	r0, r2
   13898:	beq	138b4 <__assert_fail@plt+0x252c>
   1389c:	ldr	r3, [r4]
   138a0:	bic	r3, r3, #16
   138a4:	str	r3, [r4]
   138a8:	strd	r0, [r4, #80]	; 0x50
   138ac:	mov	r0, #0
   138b0:	b	13840 <__assert_fail@plt+0x24b8>
   138b4:	mvn	r0, #0
   138b8:	b	13840 <__assert_fail@plt+0x24b8>
   138bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   138c0:	str	r6, [sp, #8]
   138c4:	strd	r8, [sp, #12]
   138c8:	str	lr, [sp, #20]
   138cc:	mov	r4, r0
   138d0:	mov	r5, r1
   138d4:	add	r6, r2, #20
   138d8:	mov	r3, #0
   138dc:	strb	r3, [r2, #20]
   138e0:	mov	r8, #10
   138e4:	mov	r9, #0
   138e8:	b	138f4 <__assert_fail@plt+0x256c>
   138ec:	mov	r4, r0
   138f0:	mov	r5, r1
   138f4:	mov	r2, r8
   138f8:	mov	r3, r9
   138fc:	mov	r0, r4
   13900:	mov	r1, r5
   13904:	bl	17834 <_obstack_memory_used@@Base+0x4f0>
   13908:	add	r2, r2, #48	; 0x30
   1390c:	strb	r2, [r6, #-1]!
   13910:	mov	r2, r8
   13914:	mov	r3, r9
   13918:	mov	r0, r4
   1391c:	mov	r1, r5
   13920:	bl	17834 <_obstack_memory_used@@Base+0x4f0>
   13924:	cmp	r5, #0
   13928:	cmpeq	r4, #9
   1392c:	bhi	138ec <__assert_fail@plt+0x2564>
   13930:	mov	r0, r6
   13934:	ldrd	r4, [sp]
   13938:	ldr	r6, [sp, #8]
   1393c:	ldrd	r8, [sp, #12]
   13940:	add	sp, sp, #20
   13944:	pop	{pc}		; (ldr pc, [sp], #4)
   13948:	str	r4, [sp, #-8]!
   1394c:	str	lr, [sp, #4]
   13950:	mov	r4, r0
   13954:	bl	110b8 <wcwidth@plt>
   13958:	cmp	r0, #0
   1395c:	blt	1396c <__assert_fail@plt+0x25e4>
   13960:	ldr	r4, [sp]
   13964:	add	sp, sp, #4
   13968:	pop	{pc}		; (ldr pc, [sp], #4)
   1396c:	mov	r0, r4
   13970:	bl	11154 <iswcntrl@plt>
   13974:	clz	r0, r0
   13978:	lsr	r0, r0, #5
   1397c:	b	13960 <__assert_fail@plt+0x25d8>
   13980:	strd	r4, [sp, #-16]!
   13984:	str	r6, [sp, #8]
   13988:	str	lr, [sp, #12]
   1398c:	mov	r5, r0
   13990:	mov	r4, r1
   13994:	ldr	r3, [r1], #16
   13998:	cmp	r3, r1
   1399c:	strne	r3, [r0]
   139a0:	beq	139d0 <__assert_fail@plt+0x2648>
   139a4:	ldr	r3, [r4, #4]
   139a8:	str	r3, [r5, #4]
   139ac:	ldrb	r3, [r4, #8]
   139b0:	strb	r3, [r5, #8]
   139b4:	cmp	r3, #0
   139b8:	ldrne	r3, [r4, #12]
   139bc:	strne	r3, [r5, #12]
   139c0:	ldrd	r4, [sp]
   139c4:	ldr	r6, [sp, #8]
   139c8:	add	sp, sp, #12
   139cc:	pop	{pc}		; (ldr pc, [sp], #4)
   139d0:	add	r6, r0, #16
   139d4:	ldr	r2, [r4, #4]
   139d8:	mov	r0, r6
   139dc:	bl	110f4 <memcpy@plt>
   139e0:	str	r6, [r5]
   139e4:	b	139a4 <__assert_fail@plt+0x261c>
   139e8:	movw	r3, #33464	; 0x82b8
   139ec:	movt	r3, #1
   139f0:	lsr	r2, r0, #5
   139f4:	and	r0, r0, #31
   139f8:	ldr	r3, [r3, r2, lsl #2]
   139fc:	lsr	r0, r3, r0
   13a00:	and	r0, r0, #1
   13a04:	bx	lr
   13a08:	strd	r4, [sp, #-20]!	; 0xffffffec
   13a0c:	strd	r6, [sp, #8]
   13a10:	str	lr, [sp, #16]
   13a14:	sub	sp, sp, #12
   13a18:	mov	r7, r1
   13a1c:	mov	r5, r2
   13a20:	subs	r6, r0, #0
   13a24:	addeq	r6, sp, #4
   13a28:	mov	r0, r6
   13a2c:	bl	111b4 <mbrtowc@plt>
   13a30:	mov	r4, r0
   13a34:	cmp	r5, #0
   13a38:	cmnne	r0, #3
   13a3c:	bhi	13a58 <__assert_fail@plt+0x26d0>
   13a40:	mov	r0, r4
   13a44:	add	sp, sp, #12
   13a48:	ldrd	r4, [sp]
   13a4c:	ldrd	r6, [sp, #8]
   13a50:	add	sp, sp, #16
   13a54:	pop	{pc}		; (ldr pc, [sp], #4)
   13a58:	mov	r0, #0
   13a5c:	bl	16ef4 <__assert_fail@plt+0x5b6c>
   13a60:	cmp	r0, #0
   13a64:	bne	13a40 <__assert_fail@plt+0x26b8>
   13a68:	ldrb	r3, [r7]
   13a6c:	str	r3, [r6]
   13a70:	mov	r4, #1
   13a74:	b	13a40 <__assert_fail@plt+0x26b8>
   13a78:	str	r4, [sp, #-8]!
   13a7c:	str	lr, [sp, #4]
   13a80:	sub	sp, sp, #64	; 0x40
   13a84:	mov	r0, #85	; 0x55
   13a88:	bl	11130 <sysconf@plt>
   13a8c:	mov	r4, r0
   13a90:	mov	r0, #30
   13a94:	bl	11130 <sysconf@plt>
   13a98:	cmp	r0, #0
   13a9c:	cmpge	r4, #0
   13aa0:	bge	13ac8 <__assert_fail@plt+0x2740>
   13aa4:	mov	r0, sp
   13aa8:	bl	111e4 <sysinfo@plt>
   13aac:	cmp	r0, #0
   13ab0:	beq	13ae0 <__assert_fail@plt+0x2758>
   13ab4:	vldr	d0, [pc, #60]	; 13af8 <__assert_fail@plt+0x2770>
   13ab8:	add	sp, sp, #64	; 0x40
   13abc:	ldr	r4, [sp]
   13ac0:	add	sp, sp, #4
   13ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ac8:	vmov	s15, r4
   13acc:	vcvt.f64.s32	d0, s15
   13ad0:	vmov	s15, r0
   13ad4:	vcvt.f64.s32	d7, s15
   13ad8:	vmul.f64	d0, d0, d7
   13adc:	b	13ab8 <__assert_fail@plt+0x2730>
   13ae0:	vldr	s15, [sp, #16]
   13ae4:	vcvt.f64.u32	d0, s15
   13ae8:	vldr	s15, [sp, #52]	; 0x34
   13aec:	vcvt.f64.u32	d7, s15
   13af0:	vmul.f64	d0, d0, d7
   13af4:	b	13ab8 <__assert_fail@plt+0x2730>
   13af8:	andeq	r0, r0, r0
   13afc:	orrsmi	r0, r0, r0
   13b00:	str	r4, [sp, #-8]!
   13b04:	str	lr, [sp, #4]
   13b08:	sub	sp, sp, #64	; 0x40
   13b0c:	mov	r0, #86	; 0x56
   13b10:	bl	11130 <sysconf@plt>
   13b14:	mov	r4, r0
   13b18:	mov	r0, #30
   13b1c:	bl	11130 <sysconf@plt>
   13b20:	cmp	r0, #0
   13b24:	cmpge	r4, #0
   13b28:	bge	13b6c <__assert_fail@plt+0x27e4>
   13b2c:	mov	r0, sp
   13b30:	bl	111e4 <sysinfo@plt>
   13b34:	cmp	r0, #0
   13b38:	bne	13b84 <__assert_fail@plt+0x27fc>
   13b3c:	vldr	s15, [sp, #20]
   13b40:	vcvt.f64.u32	d0, s15
   13b44:	vldr	s15, [sp, #28]
   13b48:	vcvt.f64.u32	d7, s15
   13b4c:	vadd.f64	d0, d0, d7
   13b50:	vldr	s15, [sp, #52]	; 0x34
   13b54:	vcvt.f64.u32	d7, s15
   13b58:	vmul.f64	d0, d0, d7
   13b5c:	add	sp, sp, #64	; 0x40
   13b60:	ldr	r4, [sp]
   13b64:	add	sp, sp, #4
   13b68:	pop	{pc}		; (ldr pc, [sp], #4)
   13b6c:	vmov	s15, r4
   13b70:	vcvt.f64.s32	d0, s15
   13b74:	vmov	s15, r0
   13b78:	vcvt.f64.s32	d7, s15
   13b7c:	vmul.f64	d0, d0, d7
   13b80:	b	13b5c <__assert_fail@plt+0x27d4>
   13b84:	bl	13a78 <__assert_fail@plt+0x26f0>
   13b88:	vldr	d7, [pc, #8]	; 13b98 <__assert_fail@plt+0x2810>
   13b8c:	vmul.f64	d0, d0, d7
   13b90:	b	13b5c <__assert_fail@plt+0x27d4>
   13b94:	nop	{0}
   13b98:	andeq	r0, r0, r0
   13b9c:	svccc	0x00d00000
   13ba0:	strd	r4, [sp, #-16]!
   13ba4:	str	r6, [sp, #8]
   13ba8:	str	lr, [sp, #12]
   13bac:	subs	r4, r0, #0
   13bb0:	beq	13c4c <__assert_fail@plt+0x28c4>
   13bb4:	mov	r1, #47	; 0x2f
   13bb8:	mov	r0, r4
   13bbc:	bl	1131c <strrchr@plt>
   13bc0:	subs	r5, r0, #0
   13bc4:	beq	13c24 <__assert_fail@plt+0x289c>
   13bc8:	add	r6, r5, #1
   13bcc:	sub	r3, r6, r4
   13bd0:	cmp	r3, #6
   13bd4:	ble	13c24 <__assert_fail@plt+0x289c>
   13bd8:	mov	r2, #7
   13bdc:	movw	r1, #33552	; 0x8310
   13be0:	movt	r1, #1
   13be4:	sub	r0, r5, #6
   13be8:	bl	11364 <strncmp@plt>
   13bec:	cmp	r0, #0
   13bf0:	bne	13c24 <__assert_fail@plt+0x289c>
   13bf4:	mov	r2, #3
   13bf8:	movw	r1, #33560	; 0x8318
   13bfc:	movt	r1, #1
   13c00:	mov	r0, r6
   13c04:	bl	11364 <strncmp@plt>
   13c08:	cmp	r0, #0
   13c0c:	movne	r4, r6
   13c10:	bne	13c24 <__assert_fail@plt+0x289c>
   13c14:	add	r4, r5, #4
   13c18:	movw	r3, #37240	; 0x9178
   13c1c:	movt	r3, #2
   13c20:	str	r4, [r3]
   13c24:	movw	r3, #37352	; 0x91e8
   13c28:	movt	r3, #2
   13c2c:	str	r4, [r3]
   13c30:	movw	r3, #37244	; 0x917c
   13c34:	movt	r3, #2
   13c38:	str	r4, [r3]
   13c3c:	ldrd	r4, [sp]
   13c40:	ldr	r6, [sp, #8]
   13c44:	add	sp, sp, #12
   13c48:	pop	{pc}		; (ldr pc, [sp], #4)
   13c4c:	movw	r3, #37256	; 0x9188
   13c50:	movt	r3, #2
   13c54:	ldr	r3, [r3]
   13c58:	mov	r2, #55	; 0x37
   13c5c:	mov	r1, #1
   13c60:	movw	r0, #33496	; 0x82d8
   13c64:	movt	r0, #1
   13c68:	bl	11184 <fwrite@plt>
   13c6c:	bl	11370 <abort@plt>
   13c70:	mov	r2, #0
   13c74:	mov	r3, #0
   13c78:	strd	r2, [r0]
   13c7c:	strd	r2, [r0, #8]
   13c80:	strd	r2, [r0, #16]
   13c84:	strd	r2, [r0, #24]
   13c88:	strd	r2, [r0, #32]
   13c8c:	strd	r2, [r0, #40]	; 0x28
   13c90:	cmp	r1, #10
   13c94:	beq	13ca0 <__assert_fail@plt+0x2918>
   13c98:	str	r1, [r0]
   13c9c:	bx	lr
   13ca0:	str	r4, [sp, #-8]!
   13ca4:	str	lr, [sp, #4]
   13ca8:	bl	11370 <abort@plt>
   13cac:	strd	r4, [sp, #-16]!
   13cb0:	str	r6, [sp, #8]
   13cb4:	str	lr, [sp, #12]
   13cb8:	mov	r5, r0
   13cbc:	mov	r6, r1
   13cc0:	mov	r2, #5
   13cc4:	mov	r1, r0
   13cc8:	mov	r0, #0
   13ccc:	bl	11124 <dcgettext@plt>
   13cd0:	mov	r4, r0
   13cd4:	cmp	r5, r0
   13cd8:	beq	13cf0 <__assert_fail@plt+0x2968>
   13cdc:	mov	r0, r4
   13ce0:	ldrd	r4, [sp]
   13ce4:	ldr	r6, [sp, #8]
   13ce8:	add	sp, sp, #12
   13cec:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf0:	bl	16f50 <__assert_fail@plt+0x5bc8>
   13cf4:	ldrb	r3, [r0]
   13cf8:	bic	r3, r3, #32
   13cfc:	cmp	r3, #85	; 0x55
   13d00:	bne	13d84 <__assert_fail@plt+0x29fc>
   13d04:	ldrb	r3, [r0, #1]
   13d08:	bic	r3, r3, #32
   13d0c:	cmp	r3, #84	; 0x54
   13d10:	bne	13d48 <__assert_fail@plt+0x29c0>
   13d14:	ldrb	r3, [r0, #2]
   13d18:	bic	r3, r3, #32
   13d1c:	cmp	r3, #70	; 0x46
   13d20:	bne	13d48 <__assert_fail@plt+0x29c0>
   13d24:	ldrb	r3, [r0, #3]
   13d28:	cmp	r3, #45	; 0x2d
   13d2c:	bne	13d48 <__assert_fail@plt+0x29c0>
   13d30:	ldrb	r3, [r0, #4]
   13d34:	cmp	r3, #56	; 0x38
   13d38:	bne	13d48 <__assert_fail@plt+0x29c0>
   13d3c:	ldrb	r3, [r0, #5]
   13d40:	cmp	r3, #0
   13d44:	beq	13d64 <__assert_fail@plt+0x29dc>
   13d48:	movw	r4, #33648	; 0x8370
   13d4c:	movt	r4, #1
   13d50:	movw	r3, #33668	; 0x8384
   13d54:	movt	r3, #1
   13d58:	cmp	r6, #9
   13d5c:	movne	r4, r3
   13d60:	b	13cdc <__assert_fail@plt+0x2954>
   13d64:	ldrb	r2, [r4]
   13d68:	movw	r4, #33664	; 0x8380
   13d6c:	movt	r4, #1
   13d70:	movw	r3, #33652	; 0x8374
   13d74:	movt	r3, #1
   13d78:	cmp	r2, #96	; 0x60
   13d7c:	movne	r4, r3
   13d80:	b	13cdc <__assert_fail@plt+0x2954>
   13d84:	cmp	r3, #71	; 0x47
   13d88:	bne	13d48 <__assert_fail@plt+0x29c0>
   13d8c:	ldrb	r3, [r0, #1]
   13d90:	bic	r3, r3, #32
   13d94:	cmp	r3, #66	; 0x42
   13d98:	bne	13d48 <__assert_fail@plt+0x29c0>
   13d9c:	ldrb	r3, [r0, #2]
   13da0:	cmp	r3, #49	; 0x31
   13da4:	bne	13d48 <__assert_fail@plt+0x29c0>
   13da8:	ldrb	r3, [r0, #3]
   13dac:	cmp	r3, #56	; 0x38
   13db0:	bne	13d48 <__assert_fail@plt+0x29c0>
   13db4:	ldrb	r3, [r0, #4]
   13db8:	cmp	r3, #48	; 0x30
   13dbc:	bne	13d48 <__assert_fail@plt+0x29c0>
   13dc0:	ldrb	r3, [r0, #5]
   13dc4:	cmp	r3, #51	; 0x33
   13dc8:	bne	13d48 <__assert_fail@plt+0x29c0>
   13dcc:	ldrb	r3, [r0, #6]
   13dd0:	cmp	r3, #48	; 0x30
   13dd4:	bne	13d48 <__assert_fail@plt+0x29c0>
   13dd8:	ldrb	r3, [r0, #7]
   13ddc:	cmp	r3, #0
   13de0:	bne	13d48 <__assert_fail@plt+0x29c0>
   13de4:	ldrb	r2, [r4]
   13de8:	movw	r4, #33660	; 0x837c
   13dec:	movt	r4, #1
   13df0:	movw	r3, #33656	; 0x8378
   13df4:	movt	r3, #1
   13df8:	cmp	r2, #96	; 0x60
   13dfc:	movne	r4, r3
   13e00:	b	13cdc <__assert_fail@plt+0x2954>
   13e04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e08:	strd	r6, [sp, #8]
   13e0c:	strd	r8, [sp, #16]
   13e10:	strd	sl, [sp, #24]
   13e14:	str	lr, [sp, #32]
   13e18:	sub	sp, sp, #116	; 0x74
   13e1c:	str	r0, [sp, #64]	; 0x40
   13e20:	mov	r8, r1
   13e24:	str	r2, [sp, #48]	; 0x30
   13e28:	str	r3, [sp, #24]
   13e2c:	ldr	r7, [sp, #152]	; 0x98
   13e30:	bl	1119c <__ctype_get_mb_cur_max@plt>
   13e34:	str	r0, [sp, #76]	; 0x4c
   13e38:	ldr	r3, [sp, #156]	; 0x9c
   13e3c:	ubfx	r3, r3, #1, #1
   13e40:	str	r3, [sp, #32]
   13e44:	mov	r3, #1
   13e48:	str	r3, [sp, #40]	; 0x28
   13e4c:	mov	r3, #0
   13e50:	str	r3, [sp, #68]	; 0x44
   13e54:	str	r3, [sp, #36]	; 0x24
   13e58:	str	r3, [sp, #28]
   13e5c:	str	r3, [sp, #52]	; 0x34
   13e60:	str	r3, [sp, #60]	; 0x3c
   13e64:	str	r3, [sp, #72]	; 0x48
   13e68:	movw	r3, #33672	; 0x8388
   13e6c:	movt	r3, #1
   13e70:	str	r3, [sp, #80]	; 0x50
   13e74:	mov	r9, r8
   13e78:	mov	sl, r7
   13e7c:	cmp	sl, #10
   13e80:	ldrls	pc, [pc, sl, lsl #2]
   13e84:	b	14048 <__assert_fail@plt+0x2cc0>
   13e88:	andeq	r3, r1, r8, ror #29
   13e8c:			; <UNDEFINED> instruction: 0x00013ebc
   13e90:	andeq	r4, r1, r0, lsr #32
   13e94:			; <UNDEFINED> instruction: 0x00013eb4
   13e98:	ldrdeq	r3, [r1], -r4
   13e9c:	strdeq	r3, [r1], -r8
   13ea0:	andeq	r5, r1, r4, asr #5
   13ea4:	andeq	r4, r1, ip, asr #32
   13ea8:	andeq	r3, r1, r4, lsr pc
   13eac:	andeq	r3, r1, r4, lsr pc
   13eb0:	andeq	r3, r1, r4, lsr pc
   13eb4:	mov	r3, #1
   13eb8:	str	r3, [sp, #28]
   13ebc:	mov	r3, #1
   13ec0:	str	r3, [sp, #32]
   13ec4:	str	r3, [sp, #52]	; 0x34
   13ec8:	movw	r3, #33668	; 0x8384
   13ecc:	movt	r3, #1
   13ed0:	str	r3, [sp, #60]	; 0x3c
   13ed4:	mov	fp, #0
   13ed8:	mov	sl, #2
   13edc:	mov	r6, #0
   13ee0:	ldr	r8, [sp, #64]	; 0x40
   13ee4:	b	1475c <__assert_fail@plt+0x33d4>
   13ee8:	mov	fp, sl
   13eec:	mov	r3, #0
   13ef0:	str	r3, [sp, #32]
   13ef4:	b	13edc <__assert_fail@plt+0x2b54>
   13ef8:	ldr	r3, [sp, #32]
   13efc:	cmp	r3, #0
   13f00:	bne	14060 <__assert_fail@plt+0x2cd8>
   13f04:	cmp	r9, #0
   13f08:	beq	14084 <__assert_fail@plt+0x2cfc>
   13f0c:	mov	r3, #34	; 0x22
   13f10:	ldr	r2, [sp, #64]	; 0x40
   13f14:	strb	r3, [r2]
   13f18:	mov	fp, #1
   13f1c:	str	fp, [sp, #28]
   13f20:	str	fp, [sp, #52]	; 0x34
   13f24:	movw	r3, #33648	; 0x8370
   13f28:	movt	r3, #1
   13f2c:	str	r3, [sp, #60]	; 0x3c
   13f30:	b	13edc <__assert_fail@plt+0x2b54>
   13f34:	cmp	sl, #10
   13f38:	bne	13f6c <__assert_fail@plt+0x2be4>
   13f3c:	ldr	r3, [sp, #32]
   13f40:	cmp	r3, #0
   13f44:	movne	fp, #0
   13f48:	beq	13f94 <__assert_fail@plt+0x2c0c>
   13f4c:	ldr	r0, [sp, #168]	; 0xa8
   13f50:	bl	1125c <strlen@plt>
   13f54:	str	r0, [sp, #52]	; 0x34
   13f58:	ldr	r3, [sp, #168]	; 0xa8
   13f5c:	str	r3, [sp, #60]	; 0x3c
   13f60:	mov	r3, #1
   13f64:	str	r3, [sp, #28]
   13f68:	b	13edc <__assert_fail@plt+0x2b54>
   13f6c:	mov	r1, sl
   13f70:	ldr	r0, [sp, #80]	; 0x50
   13f74:	bl	13cac <__assert_fail@plt+0x2924>
   13f78:	str	r0, [sp, #164]	; 0xa4
   13f7c:	mov	r1, sl
   13f80:	movw	r0, #33668	; 0x8384
   13f84:	movt	r0, #1
   13f88:	bl	13cac <__assert_fail@plt+0x2924>
   13f8c:	str	r0, [sp, #168]	; 0xa8
   13f90:	b	13f3c <__assert_fail@plt+0x2bb4>
   13f94:	ldr	r3, [sp, #164]	; 0xa4
   13f98:	ldrb	r3, [r3]
   13f9c:	cmp	r3, #0
   13fa0:	beq	13fcc <__assert_fail@plt+0x2c44>
   13fa4:	ldr	r2, [sp, #164]	; 0xa4
   13fa8:	mov	fp, #0
   13fac:	ldr	r1, [sp, #64]	; 0x40
   13fb0:	cmp	r9, fp
   13fb4:	strbhi	r3, [r1, fp]
   13fb8:	add	fp, fp, #1
   13fbc:	ldrb	r3, [r2, #1]!
   13fc0:	cmp	r3, #0
   13fc4:	bne	13fb0 <__assert_fail@plt+0x2c28>
   13fc8:	b	13f4c <__assert_fail@plt+0x2bc4>
   13fcc:	mov	fp, #0
   13fd0:	b	13f4c <__assert_fail@plt+0x2bc4>
   13fd4:	ldr	r3, [sp, #32]
   13fd8:	cmp	r3, #0
   13fdc:	bne	13ebc <__assert_fail@plt+0x2b34>
   13fe0:	mov	r3, #1
   13fe4:	str	r3, [sp, #28]
   13fe8:	cmp	r9, #0
   13fec:	beq	140a0 <__assert_fail@plt+0x2d18>
   13ff0:	mov	r3, #39	; 0x27
   13ff4:	ldr	r2, [sp, #64]	; 0x40
   13ff8:	strb	r3, [r2]
   13ffc:	mov	r3, #0
   14000:	str	r3, [sp, #32]
   14004:	mov	fp, #1
   14008:	str	fp, [sp, #52]	; 0x34
   1400c:	movw	r3, #33668	; 0x8384
   14010:	movt	r3, #1
   14014:	str	r3, [sp, #60]	; 0x3c
   14018:	mov	sl, #2
   1401c:	b	13edc <__assert_fail@plt+0x2b54>
   14020:	ldr	r3, [sp, #32]
   14024:	cmp	r3, #0
   14028:	beq	13fe8 <__assert_fail@plt+0x2c60>
   1402c:	mov	r3, #1
   14030:	str	r3, [sp, #52]	; 0x34
   14034:	movw	r3, #33668	; 0x8384
   14038:	movt	r3, #1
   1403c:	str	r3, [sp, #60]	; 0x3c
   14040:	mov	fp, #0
   14044:	b	13edc <__assert_fail@plt+0x2b54>
   14048:	bl	11370 <abort@plt>
   1404c:	mov	fp, #0
   14050:	str	fp, [sp, #32]
   14054:	mov	r3, #1
   14058:	str	r3, [sp, #28]
   1405c:	b	13edc <__assert_fail@plt+0x2b54>
   14060:	ldr	r3, [sp, #32]
   14064:	str	r3, [sp, #28]
   14068:	mov	r3, #1
   1406c:	str	r3, [sp, #52]	; 0x34
   14070:	movw	r3, #33648	; 0x8370
   14074:	movt	r3, #1
   14078:	str	r3, [sp, #60]	; 0x3c
   1407c:	mov	fp, #0
   14080:	b	13edc <__assert_fail@plt+0x2b54>
   14084:	mov	fp, #1
   14088:	str	fp, [sp, #28]
   1408c:	str	fp, [sp, #52]	; 0x34
   14090:	movw	r3, #33648	; 0x8370
   14094:	movt	r3, #1
   14098:	str	r3, [sp, #60]	; 0x3c
   1409c:	b	13edc <__assert_fail@plt+0x2b54>
   140a0:	mov	r3, #0
   140a4:	str	r3, [sp, #32]
   140a8:	mov	fp, #1
   140ac:	str	fp, [sp, #52]	; 0x34
   140b0:	movw	r3, #33668	; 0x8384
   140b4:	movt	r3, #1
   140b8:	str	r3, [sp, #60]	; 0x3c
   140bc:	mov	sl, #2
   140c0:	b	13edc <__assert_fail@plt+0x2b54>
   140c4:	mov	r3, r2
   140c8:	add	r4, r6, r2
   140cc:	ldr	r2, [sp, #24]
   140d0:	cmp	r3, #1
   140d4:	movls	r3, #0
   140d8:	movhi	r3, #1
   140dc:	cmn	r2, #1
   140e0:	movne	r3, #0
   140e4:	cmp	r3, #0
   140e8:	beq	140f8 <__assert_fail@plt+0x2d70>
   140ec:	ldr	r0, [sp, #48]	; 0x30
   140f0:	bl	1125c <strlen@plt>
   140f4:	str	r0, [sp, #24]
   140f8:	ldr	r3, [sp, #24]
   140fc:	cmp	r4, r3
   14100:	bhi	152ec <__assert_fail@plt+0x3f64>
   14104:	ldr	r3, [sp, #48]	; 0x30
   14108:	add	r4, r3, r6
   1410c:	ldr	r2, [sp, #52]	; 0x34
   14110:	ldr	r1, [sp, #60]	; 0x3c
   14114:	mov	r0, r4
   14118:	bl	1110c <memcmp@plt>
   1411c:	cmp	r0, #0
   14120:	bne	152ec <__assert_fail@plt+0x3f64>
   14124:	ldr	r3, [sp, #32]
   14128:	cmp	r3, #0
   1412c:	bne	1433c <__assert_fail@plt+0x2fb4>
   14130:	ldrb	r4, [r4]
   14134:	cmp	r4, #126	; 0x7e
   14138:	ldrls	pc, [pc, r4, lsl #2]
   1413c:	b	14bf0 <__assert_fail@plt+0x3868>
   14140:	andeq	r4, r1, r0, lsl #7
   14144:	strdeq	r4, [r1], -r0
   14148:	strdeq	r4, [r1], -r0
   1414c:	strdeq	r4, [r1], -r0
   14150:	strdeq	r4, [r1], -r0
   14154:	strdeq	r4, [r1], -r0
   14158:	strdeq	r4, [r1], -r0
   1415c:	muleq	r1, r8, sl
   14160:	andeq	r4, r1, ip, lsl r6
   14164:	andeq	r4, r1, r0, asr #19
   14168:	andeq	r4, r1, ip, ror #20
   1416c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14170:	andeq	r4, r1, r0, lsr r6
   14174:	andeq	r4, r1, r4, asr #12
   14178:	strdeq	r4, [r1], -r0
   1417c:	strdeq	r4, [r1], -r0
   14180:	strdeq	r4, [r1], -r0
   14184:	strdeq	r4, [r1], -r0
   14188:	strdeq	r4, [r1], -r0
   1418c:	strdeq	r4, [r1], -r0
   14190:	strdeq	r4, [r1], -r0
   14194:	strdeq	r4, [r1], -r0
   14198:	strdeq	r4, [r1], -r0
   1419c:	strdeq	r4, [r1], -r0
   141a0:	strdeq	r4, [r1], -r0
   141a4:	strdeq	r4, [r1], -r0
   141a8:	strdeq	r4, [r1], -r0
   141ac:	strdeq	r4, [r1], -r0
   141b0:	strdeq	r4, [r1], -r0
   141b4:	strdeq	r4, [r1], -r0
   141b8:	strdeq	r4, [r1], -r0
   141bc:	strdeq	r4, [r1], -r0
   141c0:	andeq	r4, r1, ip, lsl #22
   141c4:	andeq	r4, r1, r0, lsr fp
   141c8:	andeq	r4, r1, r0, lsr fp
   141cc:	andeq	r4, r1, r8, asr #21
   141d0:	andeq	r4, r1, r0, lsr fp
   141d4:	andeq	r5, r1, r0, asr r0
   141d8:	andeq	r4, r1, r0, lsr fp
   141dc:	andeq	r4, r1, r0, asr fp
   141e0:	andeq	r4, r1, r0, lsr fp
   141e4:	andeq	r4, r1, r0, lsr fp
   141e8:	andeq	r4, r1, r0, lsr fp
   141ec:	andeq	r5, r1, r0, asr r0
   141f0:	andeq	r5, r1, r0, asr r0
   141f4:	andeq	r5, r1, r0, asr r0
   141f8:	andeq	r5, r1, r0, asr r0
   141fc:	andeq	r5, r1, r0, asr r0
   14200:	andeq	r5, r1, r0, asr r0
   14204:	andeq	r5, r1, r0, asr r0
   14208:	andeq	r5, r1, r0, asr r0
   1420c:	andeq	r5, r1, r0, asr r0
   14210:	andeq	r5, r1, r0, asr r0
   14214:	andeq	r5, r1, r0, asr r0
   14218:	andeq	r5, r1, r0, asr r0
   1421c:	andeq	r5, r1, r0, asr r0
   14220:	andeq	r5, r1, r0, asr r0
   14224:	andeq	r5, r1, r0, asr r0
   14228:	andeq	r5, r1, r0, asr r0
   1422c:	andeq	r4, r1, r0, lsr fp
   14230:	andeq	r4, r1, r0, lsr fp
   14234:	andeq	r4, r1, r0, lsr fp
   14238:	andeq	r4, r1, r0, lsr fp
   1423c:			; <UNDEFINED> instruction: 0x000144b0
   14240:	strdeq	r4, [r1], -r0
   14244:	andeq	r5, r1, r0, asr r0
   14248:	andeq	r5, r1, r0, asr r0
   1424c:	andeq	r5, r1, r0, asr r0
   14250:	andeq	r5, r1, r0, asr r0
   14254:	andeq	r5, r1, r0, asr r0
   14258:	andeq	r5, r1, r0, asr r0
   1425c:	andeq	r5, r1, r0, asr r0
   14260:	andeq	r5, r1, r0, asr r0
   14264:	andeq	r5, r1, r0, asr r0
   14268:	andeq	r5, r1, r0, asr r0
   1426c:	andeq	r5, r1, r0, asr r0
   14270:	andeq	r5, r1, r0, asr r0
   14274:	andeq	r5, r1, r0, asr r0
   14278:	andeq	r5, r1, r0, asr r0
   1427c:	andeq	r5, r1, r0, asr r0
   14280:	andeq	r5, r1, r0, asr r0
   14284:	andeq	r5, r1, r0, asr r0
   14288:	andeq	r5, r1, r0, asr r0
   1428c:	andeq	r5, r1, r0, asr r0
   14290:	andeq	r5, r1, r0, asr r0
   14294:	andeq	r5, r1, r0, asr r0
   14298:	andeq	r5, r1, r0, asr r0
   1429c:	andeq	r5, r1, r0, asr r0
   142a0:	andeq	r5, r1, r0, asr r0
   142a4:	andeq	r5, r1, r0, asr r0
   142a8:	andeq	r5, r1, r0, asr r0
   142ac:	andeq	r4, r1, r0, lsr fp
   142b0:	andeq	r4, r1, r8, ror #19
   142b4:	andeq	r5, r1, r0, asr r0
   142b8:	andeq	r4, r1, r0, lsr fp
   142bc:	andeq	r5, r1, r0, asr r0
   142c0:	andeq	r4, r1, r0, lsr fp
   142c4:	andeq	r5, r1, r0, asr r0
   142c8:	andeq	r5, r1, r0, asr r0
   142cc:	andeq	r5, r1, r0, asr r0
   142d0:	andeq	r5, r1, r0, asr r0
   142d4:	andeq	r5, r1, r0, asr r0
   142d8:	andeq	r5, r1, r0, asr r0
   142dc:	andeq	r5, r1, r0, asr r0
   142e0:	andeq	r5, r1, r0, asr r0
   142e4:	andeq	r5, r1, r0, asr r0
   142e8:	andeq	r5, r1, r0, asr r0
   142ec:	andeq	r5, r1, r0, asr r0
   142f0:	andeq	r5, r1, r0, asr r0
   142f4:	andeq	r5, r1, r0, asr r0
   142f8:	andeq	r5, r1, r0, asr r0
   142fc:	andeq	r5, r1, r0, asr r0
   14300:	andeq	r5, r1, r0, asr r0
   14304:	andeq	r5, r1, r0, asr r0
   14308:	andeq	r5, r1, r0, asr r0
   1430c:	andeq	r5, r1, r0, asr r0
   14310:	andeq	r5, r1, r0, asr r0
   14314:	andeq	r5, r1, r0, asr r0
   14318:	andeq	r5, r1, r0, asr r0
   1431c:	andeq	r5, r1, r0, asr r0
   14320:	andeq	r5, r1, r0, asr r0
   14324:	andeq	r5, r1, r0, asr r0
   14328:	andeq	r5, r1, r0, asr r0
   1432c:	andeq	r4, r1, r8, lsr #21
   14330:	andeq	r4, r1, r0, lsr fp
   14334:	andeq	r4, r1, r8, lsr #21
   14338:	andeq	r4, r1, r8, asr #21
   1433c:	mov	r8, r9
   14340:	mov	r7, sl
   14344:	b	15244 <__assert_fail@plt+0x3ebc>
   14348:	ldr	r3, [sp, #28]
   1434c:	cmp	r3, #0
   14350:	bne	14370 <__assert_fail@plt+0x2fe8>
   14354:	ldr	r3, [sp, #156]	; 0x9c
   14358:	tst	r3, #1
   1435c:	bne	14758 <__assert_fail@plt+0x33d0>
   14360:	ldr	r3, [sp, #28]
   14364:	str	r3, [sp, #44]	; 0x2c
   14368:	mov	r5, r3
   1436c:	b	14678 <__assert_fail@plt+0x32f0>
   14370:	ldr	r3, [sp, #32]
   14374:	cmp	r3, #0
   14378:	bne	151f4 <__assert_fail@plt+0x3e6c>
   1437c:	str	r3, [sp, #44]	; 0x2c
   14380:	ldr	r3, [sp, #36]	; 0x24
   14384:	eor	r3, r3, #1
   14388:	cmp	sl, #2
   1438c:	movne	r3, #0
   14390:	andeq	r3, r3, #1
   14394:	cmp	r3, #0
   14398:	beq	143f0 <__assert_fail@plt+0x3068>
   1439c:	cmp	r9, fp
   143a0:	movhi	r2, #39	; 0x27
   143a4:	strbhi	r2, [r8, fp]
   143a8:	add	r2, fp, #1
   143ac:	cmp	r9, r2
   143b0:	movhi	r1, #36	; 0x24
   143b4:	strbhi	r1, [r8, r2]
   143b8:	add	r2, fp, #2
   143bc:	cmp	r9, r2
   143c0:	movhi	r1, #39	; 0x27
   143c4:	strbhi	r1, [r8, r2]
   143c8:	add	r2, fp, #3
   143cc:	cmp	r9, r2
   143d0:	bls	152b0 <__assert_fail@plt+0x3f28>
   143d4:	mov	r1, #92	; 0x5c
   143d8:	strb	r1, [r8, r2]
   143dc:	add	fp, fp, #4
   143e0:	str	r3, [sp, #36]	; 0x24
   143e4:	mov	r5, #0
   143e8:	mov	r4, #48	; 0x30
   143ec:	b	146c4 <__assert_fail@plt+0x333c>
   143f0:	cmp	r9, fp
   143f4:	bhi	1441c <__assert_fail@plt+0x3094>
   143f8:	add	r1, fp, #1
   143fc:	ldr	r2, [sp, #56]	; 0x38
   14400:	cmp	r2, #0
   14404:	bne	14444 <__assert_fail@plt+0x30bc>
   14408:	mov	r3, r5
   1440c:	ldr	r5, [sp, #56]	; 0x38
   14410:	mov	fp, r1
   14414:	mov	r4, #48	; 0x30
   14418:	b	14678 <__assert_fail@plt+0x32f0>
   1441c:	mov	r2, #92	; 0x5c
   14420:	strb	r2, [r8, fp]
   14424:	add	r1, fp, #1
   14428:	ldr	r2, [sp, #56]	; 0x38
   1442c:	cmp	r2, #0
   14430:	moveq	r3, r5
   14434:	moveq	r5, r2
   14438:	moveq	fp, r1
   1443c:	moveq	r4, #48	; 0x30
   14440:	beq	146c4 <__assert_fail@plt+0x333c>
   14444:	add	r2, r6, #1
   14448:	ldr	r0, [sp, #24]
   1444c:	cmp	r2, r0
   14450:	bcs	1446c <__assert_fail@plt+0x30e4>
   14454:	ldr	r0, [sp, #48]	; 0x30
   14458:	ldrb	r2, [r0, r2]
   1445c:	sub	r2, r2, #48	; 0x30
   14460:	uxtb	r2, r2
   14464:	cmp	r2, #9
   14468:	bls	14484 <__assert_fail@plt+0x30fc>
   1446c:	mov	r2, r3
   14470:	mov	r3, r5
   14474:	mov	r5, r2
   14478:	mov	fp, r1
   1447c:	mov	r4, #48	; 0x30
   14480:	b	1469c <__assert_fail@plt+0x3314>
   14484:	cmp	r9, r1
   14488:	movhi	r2, #48	; 0x30
   1448c:	strbhi	r2, [r8, r1]
   14490:	add	r2, fp, #2
   14494:	cmp	r9, r2
   14498:	movhi	r1, #48	; 0x30
   1449c:	strbhi	r1, [r8, r2]
   144a0:	add	r1, fp, #3
   144a4:	b	1446c <__assert_fail@plt+0x30e4>
   144a8:	mov	r3, #0
   144ac:	str	r3, [sp, #44]	; 0x2c
   144b0:	cmp	sl, #2
   144b4:	beq	144d0 <__assert_fail@plt+0x3148>
   144b8:	cmp	sl, #5
   144bc:	beq	144e8 <__assert_fail@plt+0x3160>
   144c0:	mov	r5, #0
   144c4:	mov	r3, r5
   144c8:	mov	r4, #63	; 0x3f
   144cc:	b	14678 <__assert_fail@plt+0x32f0>
   144d0:	ldr	r3, [sp, #32]
   144d4:	cmp	r3, #0
   144d8:	bne	15200 <__assert_fail@plt+0x3e78>
   144dc:	mov	r5, r3
   144e0:	mov	r4, #63	; 0x3f
   144e4:	b	14be0 <__assert_fail@plt+0x3858>
   144e8:	ldr	r3, [sp, #156]	; 0x9c
   144ec:	tst	r3, #4
   144f0:	beq	15018 <__assert_fail@plt+0x3c90>
   144f4:	add	r2, r6, #2
   144f8:	ldr	r3, [sp, #24]
   144fc:	cmp	r2, r3
   14500:	bcs	15028 <__assert_fail@plt+0x3ca0>
   14504:	ldr	r3, [sp, #48]	; 0x30
   14508:	add	r3, r3, r6
   1450c:	ldrb	r4, [r3, #1]
   14510:	cmp	r4, #63	; 0x3f
   14514:	movne	r5, #0
   14518:	movne	r3, r5
   1451c:	movne	r4, #63	; 0x3f
   14520:	bne	14678 <__assert_fail@plt+0x32f0>
   14524:	ldr	r3, [sp, #48]	; 0x30
   14528:	ldrb	r1, [r3, r2]
   1452c:	sub	r3, r1, #33	; 0x21
   14530:	cmp	r3, #29
   14534:	ldrls	pc, [pc, r3, lsl #2]
   14538:	b	15038 <__assert_fail@plt+0x3cb0>
   1453c:			; <UNDEFINED> instruction: 0x000145b4
   14540:	andeq	r5, r1, r8, lsr r0
   14544:	andeq	r5, r1, r8, lsr r0
   14548:	andeq	r5, r1, r8, lsr r0
   1454c:	andeq	r5, r1, r8, lsr r0
   14550:	andeq	r5, r1, r8, lsr r0
   14554:			; <UNDEFINED> instruction: 0x000145b4
   14558:			; <UNDEFINED> instruction: 0x000145b4
   1455c:			; <UNDEFINED> instruction: 0x000145b4
   14560:	andeq	r5, r1, r8, lsr r0
   14564:	andeq	r5, r1, r8, lsr r0
   14568:	andeq	r5, r1, r8, lsr r0
   1456c:			; <UNDEFINED> instruction: 0x000145b4
   14570:	andeq	r5, r1, r8, lsr r0
   14574:			; <UNDEFINED> instruction: 0x000145b4
   14578:	andeq	r5, r1, r8, lsr r0
   1457c:	andeq	r5, r1, r8, lsr r0
   14580:	andeq	r5, r1, r8, lsr r0
   14584:	andeq	r5, r1, r8, lsr r0
   14588:	andeq	r5, r1, r8, lsr r0
   1458c:	andeq	r5, r1, r8, lsr r0
   14590:	andeq	r5, r1, r8, lsr r0
   14594:	andeq	r5, r1, r8, lsr r0
   14598:	andeq	r5, r1, r8, lsr r0
   1459c:	andeq	r5, r1, r8, lsr r0
   145a0:	andeq	r5, r1, r8, lsr r0
   145a4:	andeq	r5, r1, r8, lsr r0
   145a8:			; <UNDEFINED> instruction: 0x000145b4
   145ac:			; <UNDEFINED> instruction: 0x000145b4
   145b0:			; <UNDEFINED> instruction: 0x000145b4
   145b4:	ldr	r3, [sp, #32]
   145b8:	cmp	r3, #0
   145bc:	bne	152a4 <__assert_fail@plt+0x3f1c>
   145c0:	cmp	r9, fp
   145c4:	movhi	r3, #63	; 0x3f
   145c8:	strbhi	r3, [r8, fp]
   145cc:	add	r3, fp, #1
   145d0:	cmp	r9, r3
   145d4:	movhi	r0, #34	; 0x22
   145d8:	strbhi	r0, [r8, r3]
   145dc:	add	r3, fp, #2
   145e0:	cmp	r9, r3
   145e4:	movhi	r0, #34	; 0x22
   145e8:	strbhi	r0, [r8, r3]
   145ec:	add	r3, fp, #3
   145f0:	cmp	r9, r3
   145f4:	movhi	r0, #63	; 0x3f
   145f8:	strbhi	r0, [r8, r3]
   145fc:	add	fp, fp, #4
   14600:	ldr	r3, [sp, #32]
   14604:	mov	r5, r3
   14608:	mov	r4, r1
   1460c:	mov	r6, r2
   14610:	b	14678 <__assert_fail@plt+0x32f0>
   14614:	mov	r3, #0
   14618:	str	r3, [sp, #44]	; 0x2c
   1461c:	mov	r4, #8
   14620:	mov	r3, #98	; 0x62
   14624:	b	14664 <__assert_fail@plt+0x32dc>
   14628:	mov	r3, #0
   1462c:	str	r3, [sp, #44]	; 0x2c
   14630:	mov	r4, #12
   14634:	mov	r3, #102	; 0x66
   14638:	b	14664 <__assert_fail@plt+0x32dc>
   1463c:	mov	r3, #0
   14640:	str	r3, [sp, #44]	; 0x2c
   14644:	mov	r4, #13
   14648:	mov	r3, #114	; 0x72
   1464c:	ldr	r2, [sp, #32]
   14650:	cmp	sl, #2
   14654:	movne	r2, #0
   14658:	andeq	r2, r2, #1
   1465c:	cmp	r2, #0
   14660:	bne	14a84 <__assert_fail@plt+0x36fc>
   14664:	ldr	r2, [sp, #28]
   14668:	cmp	r2, #0
   1466c:	bne	1506c <__assert_fail@plt+0x3ce4>
   14670:	mov	r5, r2
   14674:	mov	r3, r2
   14678:	ldr	r2, [sp, #28]
   1467c:	eor	r2, r2, #1
   14680:	cmp	sl, #2
   14684:	orreq	r2, r2, #1
   14688:	eor	r2, r2, #1
   1468c:	ldr	r1, [sp, #32]
   14690:	orr	r2, r1, r2
   14694:	tst	r2, #255	; 0xff
   14698:	beq	146c4 <__assert_fail@plt+0x333c>
   1469c:	ldr	r2, [sp, #160]	; 0xa0
   146a0:	cmp	r2, #0
   146a4:	beq	146c4 <__assert_fail@plt+0x333c>
   146a8:	ubfx	r1, r4, #5, #8
   146ac:	and	r2, r4, #31
   146b0:	ldr	r0, [sp, #160]	; 0xa0
   146b4:	ldr	r1, [r0, r1, lsl #2]
   146b8:	lsr	r2, r1, r2
   146bc:	tst	r2, #1
   146c0:	bne	146d0 <__assert_fail@plt+0x3348>
   146c4:	ldr	r2, [sp, #44]	; 0x2c
   146c8:	cmp	r2, #0
   146cc:	beq	14a24 <__assert_fail@plt+0x369c>
   146d0:	ldr	r3, [sp, #32]
   146d4:	cmp	r3, #0
   146d8:	bne	15224 <__assert_fail@plt+0x3e9c>
   146dc:	ldr	r3, [sp, #36]	; 0x24
   146e0:	eor	r3, r3, #1
   146e4:	cmp	sl, #2
   146e8:	movne	r3, #0
   146ec:	andeq	r3, r3, #1
   146f0:	cmp	r3, #0
   146f4:	beq	1472c <__assert_fail@plt+0x33a4>
   146f8:	cmp	r9, fp
   146fc:	movhi	r2, #39	; 0x27
   14700:	strbhi	r2, [r8, fp]
   14704:	add	r2, fp, #1
   14708:	cmp	r9, r2
   1470c:	movhi	r1, #36	; 0x24
   14710:	strbhi	r1, [r8, r2]
   14714:	add	r2, fp, #2
   14718:	cmp	r9, r2
   1471c:	movhi	r1, #39	; 0x27
   14720:	strbhi	r1, [r8, r2]
   14724:	add	fp, fp, #3
   14728:	str	r3, [sp, #36]	; 0x24
   1472c:	cmp	r9, fp
   14730:	movhi	r3, #92	; 0x5c
   14734:	strbhi	r3, [r8, fp]
   14738:	add	fp, fp, #1
   1473c:	cmp	fp, r9
   14740:	strbcc	r4, [r8, fp]
   14744:	add	fp, fp, #1
   14748:	cmp	r5, #0
   1474c:	ldr	r3, [sp, #40]	; 0x28
   14750:	moveq	r3, r5
   14754:	str	r3, [sp, #40]	; 0x28
   14758:	add	r6, r6, #1
   1475c:	ldr	r3, [sp, #24]
   14760:	cmn	r3, #1
   14764:	beq	15094 <__assert_fail@plt+0x3d0c>
   14768:	ldr	r3, [sp, #24]
   1476c:	subs	r5, r3, r6
   14770:	movne	r5, #1
   14774:	cmp	r5, #0
   14778:	beq	150a8 <__assert_fail@plt+0x3d20>
   1477c:	ldr	r3, [sp, #28]
   14780:	cmp	sl, #2
   14784:	moveq	r3, #0
   14788:	andne	r3, r3, #1
   1478c:	str	r3, [sp, #56]	; 0x38
   14790:	ldr	r2, [sp, #52]	; 0x34
   14794:	adds	r7, r2, #0
   14798:	movne	r7, #1
   1479c:	ands	r3, r3, r7
   147a0:	str	r3, [sp, #44]	; 0x2c
   147a4:	bne	140c4 <__assert_fail@plt+0x2d3c>
   147a8:	ldr	r3, [sp, #48]	; 0x30
   147ac:	ldrb	r4, [r3, r6]
   147b0:	cmp	r4, #126	; 0x7e
   147b4:	ldrls	pc, [pc, r4, lsl #2]
   147b8:	b	14bf0 <__assert_fail@plt+0x3868>
   147bc:	andeq	r4, r1, r8, asr #6
   147c0:	strdeq	r4, [r1], -r0
   147c4:	strdeq	r4, [r1], -r0
   147c8:	strdeq	r4, [r1], -r0
   147cc:	strdeq	r4, [r1], -r0
   147d0:	strdeq	r4, [r1], -r0
   147d4:	strdeq	r4, [r1], -r0
   147d8:	muleq	r1, r0, sl
   147dc:	andeq	r4, r1, ip, lsl r6
   147e0:	andeq	r4, r1, r0, asr #19
   147e4:	andeq	r4, r1, r4, ror #20
   147e8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147ec:	andeq	r4, r1, r0, lsr r6
   147f0:	andeq	r4, r1, r4, asr #12
   147f4:	strdeq	r4, [r1], -r0
   147f8:	strdeq	r4, [r1], -r0
   147fc:	strdeq	r4, [r1], -r0
   14800:	strdeq	r4, [r1], -r0
   14804:	strdeq	r4, [r1], -r0
   14808:	strdeq	r4, [r1], -r0
   1480c:	strdeq	r4, [r1], -r0
   14810:	strdeq	r4, [r1], -r0
   14814:	strdeq	r4, [r1], -r0
   14818:	strdeq	r4, [r1], -r0
   1481c:	strdeq	r4, [r1], -r0
   14820:	strdeq	r4, [r1], -r0
   14824:	strdeq	r4, [r1], -r0
   14828:	strdeq	r4, [r1], -r0
   1482c:	strdeq	r4, [r1], -r0
   14830:	strdeq	r4, [r1], -r0
   14834:	strdeq	r4, [r1], -r0
   14838:	strdeq	r4, [r1], -r0
   1483c:	andeq	r4, r1, ip, lsl #22
   14840:	andeq	r4, r1, r8, lsl #22
   14844:	andeq	r4, r1, r8, lsl #22
   14848:	andeq	r4, r1, r8, asr #21
   1484c:	andeq	r4, r1, r8, lsl #22
   14850:	andeq	r5, r1, r0, lsl r0
   14854:	andeq	r4, r1, r8, lsl #22
   14858:	andeq	r4, r1, r0, asr fp
   1485c:	andeq	r4, r1, r8, lsl #22
   14860:	andeq	r4, r1, r8, lsl #22
   14864:	andeq	r4, r1, r8, lsl #22
   14868:	andeq	r5, r1, r0, lsl r0
   1486c:	andeq	r5, r1, r0, lsl r0
   14870:	andeq	r5, r1, r0, lsl r0
   14874:	andeq	r5, r1, r0, lsl r0
   14878:	andeq	r5, r1, r0, lsl r0
   1487c:	andeq	r5, r1, r0, lsl r0
   14880:	andeq	r5, r1, r0, lsl r0
   14884:	andeq	r5, r1, r0, lsl r0
   14888:	andeq	r5, r1, r0, lsl r0
   1488c:	andeq	r5, r1, r0, lsl r0
   14890:	andeq	r5, r1, r0, lsl r0
   14894:	andeq	r5, r1, r0, lsl r0
   14898:	andeq	r5, r1, r0, lsl r0
   1489c:	andeq	r5, r1, r0, lsl r0
   148a0:	andeq	r5, r1, r0, lsl r0
   148a4:	andeq	r5, r1, r0, lsl r0
   148a8:	andeq	r4, r1, r8, lsl #22
   148ac:	andeq	r4, r1, r8, lsl #22
   148b0:	andeq	r4, r1, r8, lsl #22
   148b4:	andeq	r4, r1, r8, lsl #22
   148b8:			; <UNDEFINED> instruction: 0x000144b0
   148bc:	strdeq	r4, [r1], -r0
   148c0:	andeq	r5, r1, r0, lsl r0
   148c4:	andeq	r5, r1, r0, lsl r0
   148c8:	andeq	r5, r1, r0, lsl r0
   148cc:	andeq	r5, r1, r0, lsl r0
   148d0:	andeq	r5, r1, r0, lsl r0
   148d4:	andeq	r5, r1, r0, lsl r0
   148d8:	andeq	r5, r1, r0, lsl r0
   148dc:	andeq	r5, r1, r0, lsl r0
   148e0:	andeq	r5, r1, r0, lsl r0
   148e4:	andeq	r5, r1, r0, lsl r0
   148e8:	andeq	r5, r1, r0, lsl r0
   148ec:	andeq	r5, r1, r0, lsl r0
   148f0:	andeq	r5, r1, r0, lsl r0
   148f4:	andeq	r5, r1, r0, lsl r0
   148f8:	andeq	r5, r1, r0, lsl r0
   148fc:	andeq	r5, r1, r0, lsl r0
   14900:	andeq	r5, r1, r0, lsl r0
   14904:	andeq	r5, r1, r0, lsl r0
   14908:	andeq	r5, r1, r0, lsl r0
   1490c:	andeq	r5, r1, r0, lsl r0
   14910:	andeq	r5, r1, r0, lsl r0
   14914:	andeq	r5, r1, r0, lsl r0
   14918:	andeq	r5, r1, r0, lsl r0
   1491c:	andeq	r5, r1, r0, lsl r0
   14920:	andeq	r5, r1, r0, lsl r0
   14924:	andeq	r5, r1, r0, lsl r0
   14928:	andeq	r4, r1, r8, lsl #22
   1492c:	andeq	r4, r1, r8, ror #19
   14930:	andeq	r5, r1, r0, lsl r0
   14934:	andeq	r4, r1, r8, lsl #22
   14938:	andeq	r5, r1, r0, lsl r0
   1493c:	andeq	r4, r1, r8, lsl #22
   14940:	andeq	r5, r1, r0, lsl r0
   14944:	andeq	r5, r1, r0, lsl r0
   14948:	andeq	r5, r1, r0, lsl r0
   1494c:	andeq	r5, r1, r0, lsl r0
   14950:	andeq	r5, r1, r0, lsl r0
   14954:	andeq	r5, r1, r0, lsl r0
   14958:	andeq	r5, r1, r0, lsl r0
   1495c:	andeq	r5, r1, r0, lsl r0
   14960:	andeq	r5, r1, r0, lsl r0
   14964:	andeq	r5, r1, r0, lsl r0
   14968:	andeq	r5, r1, r0, lsl r0
   1496c:	andeq	r5, r1, r0, lsl r0
   14970:	andeq	r5, r1, r0, lsl r0
   14974:	andeq	r5, r1, r0, lsl r0
   14978:	andeq	r5, r1, r0, lsl r0
   1497c:	andeq	r5, r1, r0, lsl r0
   14980:	andeq	r5, r1, r0, lsl r0
   14984:	andeq	r5, r1, r0, lsl r0
   14988:	andeq	r5, r1, r0, lsl r0
   1498c:	andeq	r5, r1, r0, lsl r0
   14990:	andeq	r5, r1, r0, lsl r0
   14994:	andeq	r5, r1, r0, lsl r0
   14998:	andeq	r5, r1, r0, lsl r0
   1499c:	andeq	r5, r1, r0, lsl r0
   149a0:	andeq	r5, r1, r0, lsl r0
   149a4:	andeq	r5, r1, r0, lsl r0
   149a8:	andeq	r4, r1, r8, lsr #21
   149ac:	andeq	r4, r1, r8, lsl #22
   149b0:	andeq	r4, r1, r8, lsr #21
   149b4:	andeq	r4, r1, r8, asr #21
   149b8:	mov	r3, #0
   149bc:	str	r3, [sp, #44]	; 0x2c
   149c0:	mov	r4, #9
   149c4:	mov	r3, #116	; 0x74
   149c8:	b	1464c <__assert_fail@plt+0x32c4>
   149cc:	mov	r3, #0
   149d0:	str	r3, [sp, #44]	; 0x2c
   149d4:	mov	r4, #11
   149d8:	mov	r3, #118	; 0x76
   149dc:	b	14664 <__assert_fail@plt+0x32dc>
   149e0:	mov	r3, #0
   149e4:	str	r3, [sp, #44]	; 0x2c
   149e8:	cmp	sl, #2
   149ec:	beq	14a10 <__assert_fail@plt+0x3688>
   149f0:	ldr	r3, [sp, #28]
   149f4:	ldr	r2, [sp, #32]
   149f8:	and	r3, r3, r2
   149fc:	tst	r7, r3
   14a00:	bne	15084 <__assert_fail@plt+0x3cfc>
   14a04:	mov	r4, #92	; 0x5c
   14a08:	mov	r3, r4
   14a0c:	b	14664 <__assert_fail@plt+0x32dc>
   14a10:	ldr	r3, [sp, #32]
   14a14:	cmp	r3, #0
   14a18:	bne	1520c <__assert_fail@plt+0x3e84>
   14a1c:	mov	r5, r3
   14a20:	mov	r4, #92	; 0x5c
   14a24:	eor	r3, r3, #1
   14a28:	ldr	r2, [sp, #36]	; 0x24
   14a2c:	and	r3, r3, r2
   14a30:	tst	r3, #255	; 0xff
   14a34:	beq	1473c <__assert_fail@plt+0x33b4>
   14a38:	cmp	r9, fp
   14a3c:	movhi	r3, #39	; 0x27
   14a40:	strbhi	r3, [r8, fp]
   14a44:	add	r3, fp, #1
   14a48:	cmp	r9, r3
   14a4c:	movhi	r2, #39	; 0x27
   14a50:	strbhi	r2, [r8, r3]
   14a54:	add	fp, fp, #2
   14a58:	mov	r3, #0
   14a5c:	str	r3, [sp, #36]	; 0x24
   14a60:	b	1473c <__assert_fail@plt+0x33b4>
   14a64:	mov	r3, #110	; 0x6e
   14a68:	b	1464c <__assert_fail@plt+0x32c4>
   14a6c:	mov	r3, #110	; 0x6e
   14a70:	b	1464c <__assert_fail@plt+0x32c4>
   14a74:	mov	r3, #0
   14a78:	str	r3, [sp, #44]	; 0x2c
   14a7c:	mov	r3, #110	; 0x6e
   14a80:	b	1464c <__assert_fail@plt+0x32c4>
   14a84:	mov	r8, r9
   14a88:	mov	r7, #2
   14a8c:	b	1522c <__assert_fail@plt+0x3ea4>
   14a90:	mov	r3, #97	; 0x61
   14a94:	b	14664 <__assert_fail@plt+0x32dc>
   14a98:	mov	r3, #97	; 0x61
   14a9c:	b	14664 <__assert_fail@plt+0x32dc>
   14aa0:	mov	r3, #0
   14aa4:	str	r3, [sp, #44]	; 0x2c
   14aa8:	ldr	r3, [sp, #24]
   14aac:	cmn	r3, #1
   14ab0:	beq	14adc <__assert_fail@plt+0x3754>
   14ab4:	ldr	r3, [sp, #24]
   14ab8:	subs	r3, r3, #1
   14abc:	movne	r3, #1
   14ac0:	cmp	r3, #0
   14ac4:	bne	15044 <__assert_fail@plt+0x3cbc>
   14ac8:	cmp	r6, #0
   14acc:	beq	14b0c <__assert_fail@plt+0x3784>
   14ad0:	mov	r5, #0
   14ad4:	mov	r3, r5
   14ad8:	b	14678 <__assert_fail@plt+0x32f0>
   14adc:	ldr	r3, [sp, #48]	; 0x30
   14ae0:	ldrb	r3, [r3, #1]
   14ae4:	adds	r3, r3, #0
   14ae8:	movne	r3, #1
   14aec:	b	14ac0 <__assert_fail@plt+0x3738>
   14af0:	mov	r3, #0
   14af4:	str	r3, [sp, #44]	; 0x2c
   14af8:	b	14ac8 <__assert_fail@plt+0x3740>
   14afc:	mov	r3, #0
   14b00:	str	r3, [sp, #44]	; 0x2c
   14b04:	b	14b0c <__assert_fail@plt+0x3784>
   14b08:	ldr	r5, [sp, #44]	; 0x2c
   14b0c:	ldr	r3, [sp, #32]
   14b10:	cmp	sl, #2
   14b14:	movne	r3, #0
   14b18:	andeq	r3, r3, #1
   14b1c:	cmp	r3, #0
   14b20:	beq	14678 <__assert_fail@plt+0x32f0>
   14b24:	mov	r8, r9
   14b28:	mov	r7, #2
   14b2c:	b	1522c <__assert_fail@plt+0x3ea4>
   14b30:	ldr	r5, [sp, #32]
   14b34:	b	14b0c <__assert_fail@plt+0x3784>
   14b38:	mov	r3, #0
   14b3c:	str	r3, [sp, #44]	; 0x2c
   14b40:	mov	r5, r3
   14b44:	b	14b0c <__assert_fail@plt+0x3784>
   14b48:	mov	r3, #0
   14b4c:	str	r3, [sp, #44]	; 0x2c
   14b50:	cmp	sl, #2
   14b54:	strne	r5, [sp, #68]	; 0x44
   14b58:	movne	r3, #0
   14b5c:	movne	r4, #39	; 0x27
   14b60:	bne	14678 <__assert_fail@plt+0x32f0>
   14b64:	ldr	r3, [sp, #32]
   14b68:	cmp	r3, #0
   14b6c:	bne	15218 <__assert_fail@plt+0x3e90>
   14b70:	ldr	r3, [sp, #72]	; 0x48
   14b74:	clz	r3, r3
   14b78:	lsr	r3, r3, #5
   14b7c:	cmp	r9, #0
   14b80:	moveq	r3, #0
   14b84:	cmp	r3, #0
   14b88:	movne	r3, #0
   14b8c:	bne	14bb4 <__assert_fail@plt+0x382c>
   14b90:	cmp	r9, fp
   14b94:	movhi	r3, #39	; 0x27
   14b98:	strbhi	r3, [r8, fp]
   14b9c:	add	r3, fp, #1
   14ba0:	cmp	r9, r3
   14ba4:	movhi	r2, #92	; 0x5c
   14ba8:	strbhi	r2, [r8, r3]
   14bac:	mov	r3, r9
   14bb0:	ldr	r9, [sp, #72]	; 0x48
   14bb4:	add	r2, fp, #2
   14bb8:	cmp	r2, r3
   14bbc:	movcc	r1, #39	; 0x27
   14bc0:	strbcc	r1, [r8, r2]
   14bc4:	add	fp, fp, #3
   14bc8:	str	r5, [sp, #68]	; 0x44
   14bcc:	ldr	r2, [sp, #32]
   14bd0:	str	r2, [sp, #36]	; 0x24
   14bd4:	str	r9, [sp, #72]	; 0x48
   14bd8:	mov	r9, r3
   14bdc:	mov	r4, #39	; 0x27
   14be0:	mov	r3, #0
   14be4:	b	146c4 <__assert_fail@plt+0x333c>
   14be8:	mov	r3, #0
   14bec:	str	r3, [sp, #44]	; 0x2c
   14bf0:	ldr	r7, [sp, #76]	; 0x4c
   14bf4:	cmp	r7, #1
   14bf8:	bne	14c30 <__assert_fail@plt+0x38a8>
   14bfc:	bl	1122c <__ctype_b_loc@plt>
   14c00:	ldr	r2, [r0]
   14c04:	lsl	r3, r4, #1
   14c08:	ldrh	r5, [r2, r3]
   14c0c:	ubfx	r5, r5, #14, #1
   14c10:	mov	ip, r7
   14c14:	eor	r3, r5, #1
   14c18:	ldr	r2, [sp, #28]
   14c1c:	and	r3, r3, r2
   14c20:	ands	r3, r3, #255	; 0xff
   14c24:	beq	14678 <__assert_fail@plt+0x32f0>
   14c28:	mov	r5, #0
   14c2c:	b	14e8c <__assert_fail@plt+0x3b04>
   14c30:	mov	r2, #0
   14c34:	mov	r3, #0
   14c38:	strd	r2, [sp, #104]	; 0x68
   14c3c:	ldr	r3, [sp, #24]
   14c40:	cmn	r3, #1
   14c44:	beq	14c68 <__assert_fail@plt+0x38e0>
   14c48:	mov	r3, #0
   14c4c:	str	r4, [sp, #88]	; 0x58
   14c50:	str	fp, [sp, #92]	; 0x5c
   14c54:	str	r8, [sp, #56]	; 0x38
   14c58:	mov	r8, r3
   14c5c:	str	r9, [sp, #84]	; 0x54
   14c60:	ldr	r9, [sp, #48]	; 0x30
   14c64:	b	14db4 <__assert_fail@plt+0x3a2c>
   14c68:	ldr	r0, [sp, #48]	; 0x30
   14c6c:	bl	1125c <strlen@plt>
   14c70:	str	r0, [sp, #24]
   14c74:	b	14c48 <__assert_fail@plt+0x38c0>
   14c78:	mov	r1, fp
   14c7c:	ldr	r4, [sp, #88]	; 0x58
   14c80:	mov	r2, r8
   14c84:	mov	ip, r8
   14c88:	ldr	fp, [sp, #92]	; 0x5c
   14c8c:	ldr	r8, [sp, #56]	; 0x38
   14c90:	ldr	r9, [sp, #84]	; 0x54
   14c94:	ldr	r0, [sp, #24]
   14c98:	cmp	r7, r0
   14c9c:	bcs	14e54 <__assert_fail@plt+0x3acc>
   14ca0:	ldrb	r3, [r1]
   14ca4:	cmp	r3, #0
   14ca8:	beq	14e5c <__assert_fail@plt+0x3ad4>
   14cac:	mov	r3, r1
   14cb0:	add	r2, r2, #1
   14cb4:	add	r1, r6, r2
   14cb8:	cmp	r0, r1
   14cbc:	bls	14e64 <__assert_fail@plt+0x3adc>
   14cc0:	ldrb	r1, [r3, #1]!
   14cc4:	cmp	r1, #0
   14cc8:	bne	14cb0 <__assert_fail@plt+0x3928>
   14ccc:	mov	ip, r2
   14cd0:	mov	r5, #0
   14cd4:	b	14e84 <__assert_fail@plt+0x3afc>
   14cd8:	ldr	r3, [sp, #56]	; 0x38
   14cdc:	str	r3, [sp, #64]	; 0x40
   14ce0:	ldr	r8, [sp, #84]	; 0x54
   14ce4:	mov	r7, #2
   14ce8:	b	1522c <__assert_fail@plt+0x3ea4>
   14cec:	cmp	r2, r7
   14cf0:	beq	14d90 <__assert_fail@plt+0x3a08>
   14cf4:	ldrb	r3, [r2], #1
   14cf8:	sub	r3, r3, #91	; 0x5b
   14cfc:	cmp	r3, #33	; 0x21
   14d00:	ldrls	pc, [pc, r3, lsl #2]
   14d04:	b	14cec <__assert_fail@plt+0x3964>
   14d08:	ldrdeq	r4, [r1], -r8
   14d0c:	ldrdeq	r4, [r1], -r8
   14d10:	andeq	r4, r1, ip, ror #25
   14d14:	ldrdeq	r4, [r1], -r8
   14d18:	andeq	r4, r1, ip, ror #25
   14d1c:	ldrdeq	r4, [r1], -r8
   14d20:	andeq	r4, r1, ip, ror #25
   14d24:	andeq	r4, r1, ip, ror #25
   14d28:	andeq	r4, r1, ip, ror #25
   14d2c:	andeq	r4, r1, ip, ror #25
   14d30:	andeq	r4, r1, ip, ror #25
   14d34:	andeq	r4, r1, ip, ror #25
   14d38:	andeq	r4, r1, ip, ror #25
   14d3c:	andeq	r4, r1, ip, ror #25
   14d40:	andeq	r4, r1, ip, ror #25
   14d44:	andeq	r4, r1, ip, ror #25
   14d48:	andeq	r4, r1, ip, ror #25
   14d4c:	andeq	r4, r1, ip, ror #25
   14d50:	andeq	r4, r1, ip, ror #25
   14d54:	andeq	r4, r1, ip, ror #25
   14d58:	andeq	r4, r1, ip, ror #25
   14d5c:	andeq	r4, r1, ip, ror #25
   14d60:	andeq	r4, r1, ip, ror #25
   14d64:	andeq	r4, r1, ip, ror #25
   14d68:	andeq	r4, r1, ip, ror #25
   14d6c:	andeq	r4, r1, ip, ror #25
   14d70:	andeq	r4, r1, ip, ror #25
   14d74:	andeq	r4, r1, ip, ror #25
   14d78:	andeq	r4, r1, ip, ror #25
   14d7c:	andeq	r4, r1, ip, ror #25
   14d80:	andeq	r4, r1, ip, ror #25
   14d84:	andeq	r4, r1, ip, ror #25
   14d88:	andeq	r4, r1, ip, ror #25
   14d8c:	ldrdeq	r4, [r1], -r8
   14d90:	ldr	r0, [sp, #100]	; 0x64
   14d94:	bl	1116c <iswprint@plt>
   14d98:	cmp	r0, #0
   14d9c:	moveq	r5, #0
   14da0:	add	r8, r8, r4
   14da4:	add	r0, sp, #104	; 0x68
   14da8:	bl	11100 <mbsinit@plt>
   14dac:	cmp	r0, #0
   14db0:	bne	14e20 <__assert_fail@plt+0x3a98>
   14db4:	add	r7, r6, r8
   14db8:	add	fp, r9, r7
   14dbc:	add	r3, sp, #104	; 0x68
   14dc0:	ldr	r2, [sp, #24]
   14dc4:	sub	r2, r2, r7
   14dc8:	mov	r1, fp
   14dcc:	add	r0, sp, #100	; 0x64
   14dd0:	bl	13a08 <__assert_fail@plt+0x2680>
   14dd4:	subs	r4, r0, #0
   14dd8:	beq	14e70 <__assert_fail@plt+0x3ae8>
   14ddc:	cmn	r4, #1
   14de0:	beq	14e38 <__assert_fail@plt+0x3ab0>
   14de4:	cmn	r4, #2
   14de8:	beq	14c78 <__assert_fail@plt+0x38f0>
   14dec:	ldr	r3, [sp, #32]
   14df0:	cmp	sl, #2
   14df4:	movne	r3, #0
   14df8:	andeq	r3, r3, #1
   14dfc:	cmp	r3, #0
   14e00:	beq	14d90 <__assert_fail@plt+0x3a08>
   14e04:	cmp	r4, #1
   14e08:	bls	14d90 <__assert_fail@plt+0x3a08>
   14e0c:	add	r2, r7, #1
   14e10:	add	r2, r9, r2
   14e14:	add	r3, r9, r4
   14e18:	add	r7, r3, r7
   14e1c:	b	14cf4 <__assert_fail@plt+0x396c>
   14e20:	ldr	r4, [sp, #88]	; 0x58
   14e24:	mov	ip, r8
   14e28:	ldr	fp, [sp, #92]	; 0x5c
   14e2c:	ldr	r8, [sp, #56]	; 0x38
   14e30:	ldr	r9, [sp, #84]	; 0x54
   14e34:	b	14e84 <__assert_fail@plt+0x3afc>
   14e38:	ldr	r4, [sp, #88]	; 0x58
   14e3c:	mov	ip, r8
   14e40:	ldr	fp, [sp, #92]	; 0x5c
   14e44:	ldr	r8, [sp, #56]	; 0x38
   14e48:	ldr	r9, [sp, #84]	; 0x54
   14e4c:	mov	r5, #0
   14e50:	b	14e84 <__assert_fail@plt+0x3afc>
   14e54:	mov	r5, #0
   14e58:	b	14e84 <__assert_fail@plt+0x3afc>
   14e5c:	mov	r5, #0
   14e60:	b	14e84 <__assert_fail@plt+0x3afc>
   14e64:	mov	ip, r2
   14e68:	mov	r5, #0
   14e6c:	b	14e84 <__assert_fail@plt+0x3afc>
   14e70:	ldr	r4, [sp, #88]	; 0x58
   14e74:	mov	ip, r8
   14e78:	ldr	fp, [sp, #92]	; 0x5c
   14e7c:	ldr	r8, [sp, #56]	; 0x38
   14e80:	ldr	r9, [sp, #84]	; 0x54
   14e84:	cmp	ip, #1
   14e88:	bls	14c14 <__assert_fail@plt+0x388c>
   14e8c:	add	lr, r6, ip
   14e90:	ldr	r3, [sp, #48]	; 0x30
   14e94:	add	r1, r3, r6
   14e98:	mov	r3, #0
   14e9c:	eor	r0, r5, #1
   14ea0:	ldr	r2, [sp, #28]
   14ea4:	and	r0, r0, r2
   14ea8:	uxtb	r0, r0
   14eac:	str	r0, [sp, #56]	; 0x38
   14eb0:	mov	r7, #92	; 0x5c
   14eb4:	ldr	ip, [sp, #36]	; 0x24
   14eb8:	str	r5, [sp, #84]	; 0x54
   14ebc:	ldr	r2, [sp, #44]	; 0x2c
   14ec0:	b	14f30 <__assert_fail@plt+0x3ba8>
   14ec4:	cmp	r2, #0
   14ec8:	beq	14ed8 <__assert_fail@plt+0x3b50>
   14ecc:	cmp	r9, fp
   14ed0:	strbhi	r7, [r8, fp]
   14ed4:	add	fp, fp, #1
   14ed8:	add	r5, r6, #1
   14edc:	cmp	r5, lr
   14ee0:	bcs	14fec <__assert_fail@plt+0x3c64>
   14ee4:	eor	r2, r3, #1
   14ee8:	and	r2, r2, ip
   14eec:	ands	r2, r2, #255	; 0xff
   14ef0:	beq	15008 <__assert_fail@plt+0x3c80>
   14ef4:	cmp	r9, fp
   14ef8:	movhi	r2, #39	; 0x27
   14efc:	strbhi	r2, [r8, fp]
   14f00:	add	r2, fp, #1
   14f04:	cmp	r9, r2
   14f08:	movhi	ip, #39	; 0x27
   14f0c:	strbhi	ip, [r8, r2]
   14f10:	add	fp, fp, #2
   14f14:	ldr	ip, [sp, #56]	; 0x38
   14f18:	mov	r2, ip
   14f1c:	mov	r6, r5
   14f20:	cmp	r9, fp
   14f24:	strbhi	r4, [r8, fp]
   14f28:	add	fp, fp, #1
   14f2c:	ldrb	r4, [r1, #1]!
   14f30:	cmp	r0, #0
   14f34:	beq	14ec4 <__assert_fail@plt+0x3b3c>
   14f38:	ldr	r3, [sp, #32]
   14f3c:	cmp	r3, #0
   14f40:	bne	151d4 <__assert_fail@plt+0x3e4c>
   14f44:	eor	r3, ip, #1
   14f48:	cmp	sl, #2
   14f4c:	movne	r3, #0
   14f50:	andeq	r3, r3, #1
   14f54:	cmp	r3, #0
   14f58:	beq	14f90 <__assert_fail@plt+0x3c08>
   14f5c:	cmp	r9, fp
   14f60:	movhi	ip, #39	; 0x27
   14f64:	strbhi	ip, [r8, fp]
   14f68:	add	ip, fp, #1
   14f6c:	cmp	r9, ip
   14f70:	movhi	r5, #36	; 0x24
   14f74:	strbhi	r5, [r8, ip]
   14f78:	add	ip, fp, #2
   14f7c:	cmp	r9, ip
   14f80:	movhi	r5, #39	; 0x27
   14f84:	strbhi	r5, [r8, ip]
   14f88:	add	fp, fp, #3
   14f8c:	mov	ip, r3
   14f90:	cmp	r9, fp
   14f94:	strbhi	r7, [r8, fp]
   14f98:	add	r3, fp, #1
   14f9c:	cmp	r9, r3
   14fa0:	bls	14fb0 <__assert_fail@plt+0x3c28>
   14fa4:	lsr	r5, r4, #6
   14fa8:	add	r5, r5, #48	; 0x30
   14fac:	strb	r5, [r8, r3]
   14fb0:	add	r3, fp, #2
   14fb4:	cmp	r9, r3
   14fb8:	bls	14fc8 <__assert_fail@plt+0x3c40>
   14fbc:	ubfx	r5, r4, #3, #3
   14fc0:	add	r5, r5, #48	; 0x30
   14fc4:	strb	r5, [r8, r3]
   14fc8:	add	fp, fp, #3
   14fcc:	and	r4, r4, #7
   14fd0:	add	r4, r4, #48	; 0x30
   14fd4:	add	r5, r6, #1
   14fd8:	cmp	r5, lr
   14fdc:	bcs	14ff8 <__assert_fail@plt+0x3c70>
   14fe0:	ldr	r3, [sp, #56]	; 0x38
   14fe4:	mov	r6, r5
   14fe8:	b	14f20 <__assert_fail@plt+0x3b98>
   14fec:	str	ip, [sp, #36]	; 0x24
   14ff0:	ldr	r5, [sp, #84]	; 0x54
   14ff4:	b	14a24 <__assert_fail@plt+0x369c>
   14ff8:	str	ip, [sp, #36]	; 0x24
   14ffc:	ldr	r5, [sp, #84]	; 0x54
   15000:	mov	r3, r0
   15004:	b	14a24 <__assert_fail@plt+0x369c>
   15008:	mov	r6, r5
   1500c:	b	14f20 <__assert_fail@plt+0x3b98>
   15010:	ldr	r3, [sp, #44]	; 0x2c
   15014:	b	14678 <__assert_fail@plt+0x32f0>
   15018:	mov	r5, #0
   1501c:	mov	r3, r5
   15020:	mov	r4, #63	; 0x3f
   15024:	b	14678 <__assert_fail@plt+0x32f0>
   15028:	mov	r5, #0
   1502c:	mov	r3, r5
   15030:	mov	r4, #63	; 0x3f
   15034:	b	14678 <__assert_fail@plt+0x32f0>
   15038:	mov	r5, #0
   1503c:	mov	r3, r5
   15040:	b	14678 <__assert_fail@plt+0x32f0>
   15044:	mov	r5, #0
   15048:	mov	r3, r5
   1504c:	b	14678 <__assert_fail@plt+0x32f0>
   15050:	ldr	r5, [sp, #44]	; 0x2c
   15054:	ldr	r3, [sp, #32]
   15058:	b	14678 <__assert_fail@plt+0x32f0>
   1505c:	ldr	r5, [sp, #44]	; 0x2c
   15060:	mov	r3, #0
   15064:	str	r3, [sp, #44]	; 0x2c
   15068:	b	14678 <__assert_fail@plt+0x32f0>
   1506c:	mov	r4, r3
   15070:	mov	r5, #0
   15074:	b	146d0 <__assert_fail@plt+0x3348>
   15078:	mov	r5, #0
   1507c:	mov	r4, #97	; 0x61
   15080:	b	146d0 <__assert_fail@plt+0x3348>
   15084:	mov	r5, #0
   15088:	mov	r3, r5
   1508c:	mov	r4, #92	; 0x5c
   15090:	b	14a24 <__assert_fail@plt+0x369c>
   15094:	ldr	r3, [sp, #48]	; 0x30
   15098:	ldrb	r5, [r3, r6]
   1509c:	adds	r5, r5, #0
   150a0:	movne	r5, #1
   150a4:	b	14774 <__assert_fail@plt+0x33ec>
   150a8:	cmp	sl, #2
   150ac:	movne	r3, #0
   150b0:	moveq	r3, #1
   150b4:	ldr	r1, [sp, #32]
   150b8:	cmp	fp, #0
   150bc:	andeq	r2, r3, r1
   150c0:	movne	r2, #0
   150c4:	cmp	r2, #0
   150c8:	bne	151e8 <__assert_fail@plt+0x3e60>
   150cc:	eor	r2, r1, #1
   150d0:	uxtb	r2, r2
   150d4:	and	r3, r3, r2
   150d8:	ldr	r1, [sp, #68]	; 0x44
   150dc:	ands	r3, r1, r3
   150e0:	beq	15174 <__assert_fail@plt+0x3dec>
   150e4:	ldr	r2, [sp, #40]	; 0x28
   150e8:	cmp	r2, #0
   150ec:	bne	15124 <__assert_fail@plt+0x3d9c>
   150f0:	ldr	r2, [sp, #72]	; 0x48
   150f4:	adds	r2, r2, #0
   150f8:	movne	r2, #1
   150fc:	cmp	r9, #0
   15100:	movne	r2, #0
   15104:	str	r2, [sp, #68]	; 0x44
   15108:	mov	sl, #2
   1510c:	ldr	r1, [sp, #40]	; 0x28
   15110:	str	r1, [sp, #32]
   15114:	cmp	r2, #0
   15118:	beq	15168 <__assert_fail@plt+0x3de0>
   1511c:	ldr	r9, [sp, #72]	; 0x48
   15120:	b	13e7c <__assert_fail@plt+0x2af4>
   15124:	ldr	r3, [sp, #168]	; 0xa8
   15128:	str	r3, [sp, #16]
   1512c:	ldr	r3, [sp, #164]	; 0xa4
   15130:	str	r3, [sp, #12]
   15134:	ldr	r3, [sp, #160]	; 0xa0
   15138:	str	r3, [sp, #8]
   1513c:	ldr	r3, [sp, #156]	; 0x9c
   15140:	str	r3, [sp, #4]
   15144:	mov	r3, #5
   15148:	str	r3, [sp]
   1514c:	ldr	r3, [sp, #24]
   15150:	ldr	r2, [sp, #48]	; 0x30
   15154:	ldr	r1, [sp, #72]	; 0x48
   15158:	ldr	r0, [sp, #64]	; 0x40
   1515c:	bl	13e04 <__assert_fail@plt+0x2a7c>
   15160:	mov	fp, r0
   15164:	b	15284 <__assert_fail@plt+0x3efc>
   15168:	mov	r8, r9
   1516c:	mov	r2, r3
   15170:	b	15178 <__assert_fail@plt+0x3df0>
   15174:	mov	r8, r9
   15178:	ldr	r3, [sp, #60]	; 0x3c
   1517c:	cmp	r3, #0
   15180:	moveq	r2, #0
   15184:	andne	r2, r2, #1
   15188:	cmp	r2, #0
   1518c:	beq	151bc <__assert_fail@plt+0x3e34>
   15190:	mov	r2, r3
   15194:	ldrb	r3, [r3]
   15198:	cmp	r3, #0
   1519c:	beq	151bc <__assert_fail@plt+0x3e34>
   151a0:	ldr	r1, [sp, #64]	; 0x40
   151a4:	cmp	r8, fp
   151a8:	strbhi	r3, [r1, fp]
   151ac:	add	fp, fp, #1
   151b0:	ldrb	r3, [r2, #1]!
   151b4:	cmp	r3, #0
   151b8:	bne	151a4 <__assert_fail@plt+0x3e1c>
   151bc:	cmp	r8, fp
   151c0:	bls	15284 <__assert_fail@plt+0x3efc>
   151c4:	mov	r3, #0
   151c8:	ldr	r2, [sp, #64]	; 0x40
   151cc:	strb	r3, [r2, fp]
   151d0:	b	15284 <__assert_fail@plt+0x3efc>
   151d4:	mov	r8, r9
   151d8:	mov	r7, sl
   151dc:	ldr	r3, [sp, #32]
   151e0:	str	r3, [sp, #28]
   151e4:	b	1522c <__assert_fail@plt+0x3ea4>
   151e8:	mov	r8, r9
   151ec:	mov	r7, #2
   151f0:	b	1522c <__assert_fail@plt+0x3ea4>
   151f4:	mov	r8, r9
   151f8:	mov	r7, sl
   151fc:	b	1522c <__assert_fail@plt+0x3ea4>
   15200:	mov	r8, r9
   15204:	mov	r7, sl
   15208:	b	1522c <__assert_fail@plt+0x3ea4>
   1520c:	mov	r8, r9
   15210:	mov	r7, sl
   15214:	b	1522c <__assert_fail@plt+0x3ea4>
   15218:	mov	r8, r9
   1521c:	mov	r7, sl
   15220:	b	1522c <__assert_fail@plt+0x3ea4>
   15224:	mov	r8, r9
   15228:	mov	r7, sl
   1522c:	ldr	r3, [sp, #28]
   15230:	cmp	r7, #2
   15234:	movne	r3, #0
   15238:	andeq	r3, r3, #1
   1523c:	cmp	r3, #0
   15240:	movne	r7, #4
   15244:	ldr	r3, [sp, #168]	; 0xa8
   15248:	str	r3, [sp, #16]
   1524c:	ldr	r3, [sp, #164]	; 0xa4
   15250:	str	r3, [sp, #12]
   15254:	mov	r3, #0
   15258:	str	r3, [sp, #8]
   1525c:	ldr	r3, [sp, #156]	; 0x9c
   15260:	bic	r3, r3, #2
   15264:	str	r3, [sp, #4]
   15268:	str	r7, [sp]
   1526c:	ldr	r3, [sp, #24]
   15270:	ldr	r2, [sp, #48]	; 0x30
   15274:	mov	r1, r8
   15278:	ldr	r0, [sp, #64]	; 0x40
   1527c:	bl	13e04 <__assert_fail@plt+0x2a7c>
   15280:	mov	fp, r0
   15284:	mov	r0, fp
   15288:	add	sp, sp, #116	; 0x74
   1528c:	ldrd	r4, [sp]
   15290:	ldrd	r6, [sp, #8]
   15294:	ldrd	r8, [sp, #16]
   15298:	ldrd	sl, [sp, #24]
   1529c:	add	sp, sp, #32
   152a0:	pop	{pc}		; (ldr pc, [sp], #4)
   152a4:	mov	r8, r9
   152a8:	mov	r7, sl
   152ac:	b	15244 <__assert_fail@plt+0x3ebc>
   152b0:	add	fp, fp, #4
   152b4:	str	r3, [sp, #36]	; 0x24
   152b8:	mov	r5, #0
   152bc:	mov	r4, #48	; 0x30
   152c0:	b	14678 <__assert_fail@plt+0x32f0>
   152c4:	mov	r3, #1
   152c8:	str	r3, [sp, #32]
   152cc:	str	r3, [sp, #28]
   152d0:	str	r3, [sp, #52]	; 0x34
   152d4:	movw	r3, #33648	; 0x8370
   152d8:	movt	r3, #1
   152dc:	str	r3, [sp, #60]	; 0x3c
   152e0:	mov	fp, #0
   152e4:	mov	sl, #5
   152e8:	b	13edc <__assert_fail@plt+0x2b54>
   152ec:	ldr	r3, [sp, #48]	; 0x30
   152f0:	ldrb	r4, [r3, r6]
   152f4:	cmp	r4, #126	; 0x7e
   152f8:	ldrls	pc, [pc, r4, lsl #2]
   152fc:	b	14be8 <__assert_fail@plt+0x3860>
   15300:	andeq	r4, r1, r0, ror r3
   15304:	andeq	r4, r1, r8, ror #23
   15308:	andeq	r4, r1, r8, ror #23
   1530c:	andeq	r4, r1, r8, ror #23
   15310:	andeq	r4, r1, r8, ror #23
   15314:	andeq	r4, r1, r8, ror #23
   15318:	andeq	r4, r1, r8, ror #23
   1531c:	andeq	r5, r1, r8, ror r0
   15320:	andeq	r4, r1, r4, lsl r6
   15324:			; <UNDEFINED> instruction: 0x000149b8
   15328:	andeq	r4, r1, r4, ror sl
   1532c:	andeq	r4, r1, ip, asr #19
   15330:	andeq	r4, r1, r8, lsr #12
   15334:	andeq	r4, r1, ip, lsr r6
   15338:	andeq	r4, r1, r8, ror #23
   1533c:	andeq	r4, r1, r8, ror #23
   15340:	andeq	r4, r1, r8, ror #23
   15344:	andeq	r4, r1, r8, ror #23
   15348:	andeq	r4, r1, r8, ror #23
   1534c:	andeq	r4, r1, r8, ror #23
   15350:	andeq	r4, r1, r8, ror #23
   15354:	andeq	r4, r1, r8, ror #23
   15358:	andeq	r4, r1, r8, ror #23
   1535c:	andeq	r4, r1, r8, ror #23
   15360:	andeq	r4, r1, r8, ror #23
   15364:	andeq	r4, r1, r8, ror #23
   15368:	andeq	r4, r1, r8, ror #23
   1536c:	andeq	r4, r1, r8, ror #23
   15370:	andeq	r4, r1, r8, ror #23
   15374:	andeq	r4, r1, r8, ror #23
   15378:	andeq	r4, r1, r8, ror #23
   1537c:	andeq	r4, r1, r8, ror #23
   15380:	strdeq	r4, [r1], -ip
   15384:	andeq	r4, r1, r8, lsr fp
   15388:	andeq	r4, r1, r8, lsr fp
   1538c:	strdeq	r4, [r1], -r0
   15390:	andeq	r4, r1, r8, lsr fp
   15394:	andeq	r5, r1, ip, asr r0
   15398:	andeq	r4, r1, r8, lsr fp
   1539c:	andeq	r4, r1, r8, asr #22
   153a0:	andeq	r4, r1, r8, lsr fp
   153a4:	andeq	r4, r1, r8, lsr fp
   153a8:	andeq	r4, r1, r8, lsr fp
   153ac:	andeq	r5, r1, ip, asr r0
   153b0:	andeq	r5, r1, ip, asr r0
   153b4:	andeq	r5, r1, ip, asr r0
   153b8:	andeq	r5, r1, ip, asr r0
   153bc:	andeq	r5, r1, ip, asr r0
   153c0:	andeq	r5, r1, ip, asr r0
   153c4:	andeq	r5, r1, ip, asr r0
   153c8:	andeq	r5, r1, ip, asr r0
   153cc:	andeq	r5, r1, ip, asr r0
   153d0:	andeq	r5, r1, ip, asr r0
   153d4:	andeq	r5, r1, ip, asr r0
   153d8:	andeq	r5, r1, ip, asr r0
   153dc:	andeq	r5, r1, ip, asr r0
   153e0:	andeq	r5, r1, ip, asr r0
   153e4:	andeq	r5, r1, ip, asr r0
   153e8:	andeq	r5, r1, ip, asr r0
   153ec:	andeq	r4, r1, r8, lsr fp
   153f0:	andeq	r4, r1, r8, lsr fp
   153f4:	andeq	r4, r1, r8, lsr fp
   153f8:	andeq	r4, r1, r8, lsr fp
   153fc:	andeq	r4, r1, r8, lsr #9
   15400:	andeq	r4, r1, r8, ror #23
   15404:	andeq	r5, r1, ip, asr r0
   15408:	andeq	r5, r1, ip, asr r0
   1540c:	andeq	r5, r1, ip, asr r0
   15410:	andeq	r5, r1, ip, asr r0
   15414:	andeq	r5, r1, ip, asr r0
   15418:	andeq	r5, r1, ip, asr r0
   1541c:	andeq	r5, r1, ip, asr r0
   15420:	andeq	r5, r1, ip, asr r0
   15424:	andeq	r5, r1, ip, asr r0
   15428:	andeq	r5, r1, ip, asr r0
   1542c:	andeq	r5, r1, ip, asr r0
   15430:	andeq	r5, r1, ip, asr r0
   15434:	andeq	r5, r1, ip, asr r0
   15438:	andeq	r5, r1, ip, asr r0
   1543c:	andeq	r5, r1, ip, asr r0
   15440:	andeq	r5, r1, ip, asr r0
   15444:	andeq	r5, r1, ip, asr r0
   15448:	andeq	r5, r1, ip, asr r0
   1544c:	andeq	r5, r1, ip, asr r0
   15450:	andeq	r5, r1, ip, asr r0
   15454:	andeq	r5, r1, ip, asr r0
   15458:	andeq	r5, r1, ip, asr r0
   1545c:	andeq	r5, r1, ip, asr r0
   15460:	andeq	r5, r1, ip, asr r0
   15464:	andeq	r5, r1, ip, asr r0
   15468:	andeq	r5, r1, ip, asr r0
   1546c:	andeq	r4, r1, r8, lsr fp
   15470:	andeq	r4, r1, r0, ror #19
   15474:	andeq	r5, r1, ip, asr r0
   15478:	andeq	r4, r1, r8, lsr fp
   1547c:	andeq	r5, r1, ip, asr r0
   15480:	andeq	r4, r1, r8, lsr fp
   15484:	andeq	r5, r1, ip, asr r0
   15488:	andeq	r5, r1, ip, asr r0
   1548c:	andeq	r5, r1, ip, asr r0
   15490:	andeq	r5, r1, ip, asr r0
   15494:	andeq	r5, r1, ip, asr r0
   15498:	andeq	r5, r1, ip, asr r0
   1549c:	andeq	r5, r1, ip, asr r0
   154a0:	andeq	r5, r1, ip, asr r0
   154a4:	andeq	r5, r1, ip, asr r0
   154a8:	andeq	r5, r1, ip, asr r0
   154ac:	andeq	r5, r1, ip, asr r0
   154b0:	andeq	r5, r1, ip, asr r0
   154b4:	andeq	r5, r1, ip, asr r0
   154b8:	andeq	r5, r1, ip, asr r0
   154bc:	andeq	r5, r1, ip, asr r0
   154c0:	andeq	r5, r1, ip, asr r0
   154c4:	andeq	r5, r1, ip, asr r0
   154c8:	andeq	r5, r1, ip, asr r0
   154cc:	andeq	r5, r1, ip, asr r0
   154d0:	andeq	r5, r1, ip, asr r0
   154d4:	andeq	r5, r1, ip, asr r0
   154d8:	andeq	r5, r1, ip, asr r0
   154dc:	andeq	r5, r1, ip, asr r0
   154e0:	andeq	r5, r1, ip, asr r0
   154e4:	andeq	r5, r1, ip, asr r0
   154e8:	andeq	r5, r1, ip, asr r0
   154ec:	andeq	r4, r1, r0, lsr #21
   154f0:	andeq	r4, r1, r8, lsr fp
   154f4:	andeq	r4, r1, r0, lsr #21
   154f8:	strdeq	r4, [r1], -r0
   154fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15500:	strd	r6, [sp, #8]
   15504:	strd	r8, [sp, #16]
   15508:	strd	sl, [sp, #24]
   1550c:	str	lr, [sp, #32]
   15510:	sub	sp, sp, #52	; 0x34
   15514:	mov	r5, r0
   15518:	str	r1, [sp, #24]
   1551c:	str	r2, [sp, #28]
   15520:	mov	r4, r3
   15524:	bl	11280 <__errno_location@plt>
   15528:	str	r0, [sp, #32]
   1552c:	ldr	r3, [r0]
   15530:	str	r3, [sp, #36]	; 0x24
   15534:	movw	r3, #37168	; 0x9130
   15538:	movt	r3, #2
   1553c:	ldr	r6, [r3]
   15540:	cmn	r5, #-2147483647	; 0x80000001
   15544:	movne	r3, #0
   15548:	moveq	r3, #1
   1554c:	orrs	r3, r3, r5, lsr #31
   15550:	bne	156b4 <__assert_fail@plt+0x432c>
   15554:	movw	r3, #37168	; 0x9130
   15558:	movt	r3, #2
   1555c:	ldr	r2, [r3, #4]
   15560:	cmp	r2, r5
   15564:	bgt	155d4 <__assert_fail@plt+0x424c>
   15568:	str	r2, [sp, #44]	; 0x2c
   1556c:	add	r3, r3, #8
   15570:	cmp	r6, r3
   15574:	beq	156b8 <__assert_fail@plt+0x4330>
   15578:	sub	r2, r5, r2
   1557c:	mov	r3, #8
   15580:	str	r3, [sp]
   15584:	mvn	r3, #-2147483648	; 0x80000000
   15588:	add	r2, r2, #1
   1558c:	add	r1, sp, #44	; 0x2c
   15590:	mov	r0, r6
   15594:	bl	16ad0 <__assert_fail@plt+0x5748>
   15598:	mov	r6, r0
   1559c:	movw	r3, #37168	; 0x9130
   155a0:	movt	r3, #2
   155a4:	str	r0, [r3]
   155a8:	movw	r7, #37168	; 0x9130
   155ac:	movt	r7, #2
   155b0:	ldr	r0, [r7, #4]
   155b4:	ldr	r2, [sp, #44]	; 0x2c
   155b8:	sub	r2, r2, r0
   155bc:	lsl	r2, r2, #3
   155c0:	mov	r1, #0
   155c4:	add	r0, r6, r0, lsl #3
   155c8:	bl	112a4 <memset@plt>
   155cc:	ldr	r3, [sp, #44]	; 0x2c
   155d0:	str	r3, [r7, #4]
   155d4:	add	fp, r6, r5, lsl #3
   155d8:	ldr	r8, [r6, r5, lsl #3]
   155dc:	ldr	r7, [fp, #4]
   155e0:	ldr	r3, [r4, #4]
   155e4:	orr	r9, r3, #1
   155e8:	add	sl, r4, #8
   155ec:	ldr	r3, [r4, #44]	; 0x2c
   155f0:	str	r3, [sp, #16]
   155f4:	ldr	r3, [r4, #40]	; 0x28
   155f8:	str	r3, [sp, #12]
   155fc:	str	sl, [sp, #8]
   15600:	str	r9, [sp, #4]
   15604:	ldr	r3, [r4]
   15608:	str	r3, [sp]
   1560c:	ldr	r3, [sp, #28]
   15610:	ldr	r2, [sp, #24]
   15614:	mov	r1, r8
   15618:	mov	r0, r7
   1561c:	bl	13e04 <__assert_fail@plt+0x2a7c>
   15620:	cmp	r8, r0
   15624:	bhi	15688 <__assert_fail@plt+0x4300>
   15628:	add	r8, r0, #1
   1562c:	str	r8, [r6, r5, lsl #3]
   15630:	movw	r3, #37356	; 0x91ec
   15634:	movt	r3, #2
   15638:	cmp	r7, r3
   1563c:	beq	15648 <__assert_fail@plt+0x42c0>
   15640:	mov	r0, r7
   15644:	bl	1379c <__assert_fail@plt+0x2414>
   15648:	mov	r0, r8
   1564c:	bl	168cc <__assert_fail@plt+0x5544>
   15650:	mov	r7, r0
   15654:	str	r0, [fp, #4]
   15658:	ldr	r3, [r4, #44]	; 0x2c
   1565c:	str	r3, [sp, #16]
   15660:	ldr	r3, [r4, #40]	; 0x28
   15664:	str	r3, [sp, #12]
   15668:	str	sl, [sp, #8]
   1566c:	str	r9, [sp, #4]
   15670:	ldr	r3, [r4]
   15674:	str	r3, [sp]
   15678:	ldr	r3, [sp, #28]
   1567c:	ldr	r2, [sp, #24]
   15680:	mov	r1, r8
   15684:	bl	13e04 <__assert_fail@plt+0x2a7c>
   15688:	ldr	r3, [sp, #32]
   1568c:	ldr	r2, [sp, #36]	; 0x24
   15690:	str	r2, [r3]
   15694:	mov	r0, r7
   15698:	add	sp, sp, #52	; 0x34
   1569c:	ldrd	r4, [sp]
   156a0:	ldrd	r6, [sp, #8]
   156a4:	ldrd	r8, [sp, #16]
   156a8:	ldrd	sl, [sp, #24]
   156ac:	add	sp, sp, #32
   156b0:	pop	{pc}		; (ldr pc, [sp], #4)
   156b4:	bl	11370 <abort@plt>
   156b8:	sub	r2, r5, r2
   156bc:	mov	r3, #8
   156c0:	str	r3, [sp]
   156c4:	mvn	r3, #-2147483648	; 0x80000000
   156c8:	add	r2, r2, #1
   156cc:	add	r1, sp, #44	; 0x2c
   156d0:	mov	r0, #0
   156d4:	bl	16ad0 <__assert_fail@plt+0x5748>
   156d8:	mov	r6, r0
   156dc:	movw	r3, #37168	; 0x9130
   156e0:	movt	r3, #2
   156e4:	str	r0, [r3]
   156e8:	ldrd	r2, [r3, #8]
   156ec:	strd	r2, [r0]
   156f0:	b	155a8 <__assert_fail@plt+0x4220>
   156f4:	strd	r4, [sp, #-16]!
   156f8:	str	r6, [sp, #8]
   156fc:	str	lr, [sp, #12]
   15700:	mov	r4, r0
   15704:	bl	11280 <__errno_location@plt>
   15708:	mov	r5, r0
   1570c:	ldr	r6, [r0]
   15710:	cmp	r4, #0
   15714:	ldr	r3, [pc, #32]	; 1573c <__assert_fail@plt+0x43b4>
   15718:	moveq	r4, r3
   1571c:	mov	r1, #48	; 0x30
   15720:	mov	r0, r4
   15724:	bl	16c40 <__assert_fail@plt+0x58b8>
   15728:	str	r6, [r5]
   1572c:	ldrd	r4, [sp]
   15730:	ldr	r6, [sp, #8]
   15734:	add	sp, sp, #12
   15738:	pop	{pc}		; (ldr pc, [sp], #4)
   1573c:	andeq	r9, r2, ip, ror #5
   15740:	subs	r3, r0, #0
   15744:	ldr	r2, [pc, #8]	; 15754 <__assert_fail@plt+0x43cc>
   15748:	moveq	r3, r2
   1574c:	ldr	r0, [r3]
   15750:	bx	lr
   15754:	andeq	r9, r2, ip, ror #5
   15758:	subs	r3, r0, #0
   1575c:	ldr	r2, [pc, #8]	; 1576c <__assert_fail@plt+0x43e4>
   15760:	moveq	r3, r2
   15764:	str	r1, [r3]
   15768:	bx	lr
   1576c:	andeq	r9, r2, ip, ror #5
   15770:	push	{lr}		; (str lr, [sp, #-4]!)
   15774:	subs	r3, r0, #0
   15778:	ldr	r0, [pc, #44]	; 157ac <__assert_fail@plt+0x4424>
   1577c:	moveq	r3, r0
   15780:	add	r3, r3, #8
   15784:	lsr	lr, r1, #5
   15788:	and	r1, r1, #31
   1578c:	ldr	ip, [r3, lr, lsl #2]
   15790:	lsr	r0, ip, r1
   15794:	eor	r2, r2, r0
   15798:	and	r2, r2, #1
   1579c:	eor	r1, ip, r2, lsl r1
   157a0:	str	r1, [r3, lr, lsl #2]
   157a4:	and	r0, r0, #1
   157a8:	pop	{pc}		; (ldr pc, [sp], #4)
   157ac:	andeq	r9, r2, ip, ror #5
   157b0:	subs	r3, r0, #0
   157b4:	ldr	r2, [pc, #12]	; 157c8 <__assert_fail@plt+0x4440>
   157b8:	moveq	r3, r2
   157bc:	ldr	r0, [r3, #4]
   157c0:	str	r1, [r3, #4]
   157c4:	bx	lr
   157c8:	andeq	r9, r2, ip, ror #5
   157cc:	subs	r3, r0, #0
   157d0:	ldr	r0, [pc, #44]	; 15804 <__assert_fail@plt+0x447c>
   157d4:	moveq	r3, r0
   157d8:	mov	r0, #10
   157dc:	str	r0, [r3]
   157e0:	cmp	r2, #0
   157e4:	cmpne	r1, #0
   157e8:	beq	157f8 <__assert_fail@plt+0x4470>
   157ec:	str	r1, [r3, #40]	; 0x28
   157f0:	str	r2, [r3, #44]	; 0x2c
   157f4:	bx	lr
   157f8:	str	r4, [sp, #-8]!
   157fc:	str	lr, [sp, #4]
   15800:	bl	11370 <abort@plt>
   15804:	andeq	r9, r2, ip, ror #5
   15808:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1580c:	strd	r6, [sp, #8]
   15810:	strd	r8, [sp, #16]
   15814:	str	sl, [sp, #24]
   15818:	str	lr, [sp, #28]
   1581c:	sub	sp, sp, #24
   15820:	mov	r7, r0
   15824:	mov	r8, r1
   15828:	mov	r9, r2
   1582c:	mov	sl, r3
   15830:	ldr	r4, [sp, #56]	; 0x38
   15834:	cmp	r4, #0
   15838:	ldr	r3, [pc, #104]	; 158a8 <__assert_fail@plt+0x4520>
   1583c:	moveq	r4, r3
   15840:	bl	11280 <__errno_location@plt>
   15844:	mov	r5, r0
   15848:	ldr	r6, [r0]
   1584c:	ldr	r3, [r4, #44]	; 0x2c
   15850:	str	r3, [sp, #16]
   15854:	ldr	r3, [r4, #40]	; 0x28
   15858:	str	r3, [sp, #12]
   1585c:	add	r3, r4, #8
   15860:	str	r3, [sp, #8]
   15864:	ldr	r3, [r4, #4]
   15868:	str	r3, [sp, #4]
   1586c:	ldr	r3, [r4]
   15870:	str	r3, [sp]
   15874:	mov	r3, sl
   15878:	mov	r2, r9
   1587c:	mov	r1, r8
   15880:	mov	r0, r7
   15884:	bl	13e04 <__assert_fail@plt+0x2a7c>
   15888:	str	r6, [r5]
   1588c:	add	sp, sp, #24
   15890:	ldrd	r4, [sp]
   15894:	ldrd	r6, [sp, #8]
   15898:	ldrd	r8, [sp, #16]
   1589c:	ldr	sl, [sp, #24]
   158a0:	add	sp, sp, #28
   158a4:	pop	{pc}		; (ldr pc, [sp], #4)
   158a8:	andeq	r9, r2, ip, ror #5
   158ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158b0:	strd	r6, [sp, #8]
   158b4:	strd	r8, [sp, #16]
   158b8:	strd	sl, [sp, #24]
   158bc:	str	lr, [sp, #32]
   158c0:	sub	sp, sp, #44	; 0x2c
   158c4:	mov	r8, r0
   158c8:	mov	sl, r1
   158cc:	mov	r6, r2
   158d0:	subs	r4, r3, #0
   158d4:	ldr	r3, [pc, #200]	; 159a4 <__assert_fail@plt+0x461c>
   158d8:	moveq	r4, r3
   158dc:	bl	11280 <__errno_location@plt>
   158e0:	mov	r7, r0
   158e4:	ldr	fp, [r0]
   158e8:	ldr	r5, [r4, #4]
   158ec:	cmp	r6, #0
   158f0:	orreq	r5, r5, #1
   158f4:	add	r9, r4, #8
   158f8:	ldr	r3, [r4, #44]	; 0x2c
   158fc:	str	r3, [sp, #16]
   15900:	ldr	r3, [r4, #40]	; 0x28
   15904:	str	r3, [sp, #12]
   15908:	str	r9, [sp, #8]
   1590c:	str	r5, [sp, #4]
   15910:	ldr	r3, [r4]
   15914:	str	r3, [sp]
   15918:	str	sl, [sp, #36]	; 0x24
   1591c:	mov	r3, sl
   15920:	str	r8, [sp, #32]
   15924:	mov	r2, r8
   15928:	mov	r1, #0
   1592c:	mov	r0, r1
   15930:	bl	13e04 <__assert_fail@plt+0x2a7c>
   15934:	mov	sl, r0
   15938:	add	r8, r0, #1
   1593c:	mov	r0, r8
   15940:	bl	168cc <__assert_fail@plt+0x5544>
   15944:	str	r0, [sp, #28]
   15948:	ldr	r3, [r4, #44]	; 0x2c
   1594c:	str	r3, [sp, #16]
   15950:	ldr	r3, [r4, #40]	; 0x28
   15954:	str	r3, [sp, #12]
   15958:	str	r9, [sp, #8]
   1595c:	str	r5, [sp, #4]
   15960:	ldr	r3, [r4]
   15964:	str	r3, [sp]
   15968:	ldr	r3, [sp, #36]	; 0x24
   1596c:	ldr	r2, [sp, #32]
   15970:	mov	r1, r8
   15974:	bl	13e04 <__assert_fail@plt+0x2a7c>
   15978:	str	fp, [r7]
   1597c:	cmp	r6, #0
   15980:	strne	sl, [r6]
   15984:	ldr	r0, [sp, #28]
   15988:	add	sp, sp, #44	; 0x2c
   1598c:	ldrd	r4, [sp]
   15990:	ldrd	r6, [sp, #8]
   15994:	ldrd	r8, [sp, #16]
   15998:	ldrd	sl, [sp, #24]
   1599c:	add	sp, sp, #32
   159a0:	pop	{pc}		; (ldr pc, [sp], #4)
   159a4:	andeq	r9, r2, ip, ror #5
   159a8:	str	r4, [sp, #-8]!
   159ac:	str	lr, [sp, #4]
   159b0:	mov	r3, r2
   159b4:	mov	r2, #0
   159b8:	bl	158ac <__assert_fail@plt+0x4524>
   159bc:	ldr	r4, [sp]
   159c0:	add	sp, sp, #4
   159c4:	pop	{pc}		; (ldr pc, [sp], #4)
   159c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159cc:	strd	r6, [sp, #8]
   159d0:	str	r8, [sp, #16]
   159d4:	str	lr, [sp, #20]
   159d8:	movw	r3, #37168	; 0x9130
   159dc:	movt	r3, #2
   159e0:	ldr	r7, [r3]
   159e4:	ldr	r3, [r3, #4]
   159e8:	cmp	r3, #1
   159ec:	ble	15a18 <__assert_fail@plt+0x4690>
   159f0:	mov	r4, #1
   159f4:	add	r6, r7, #4
   159f8:	movw	r5, #37168	; 0x9130
   159fc:	movt	r5, #2
   15a00:	ldr	r0, [r6, r4, lsl #3]
   15a04:	bl	1379c <__assert_fail@plt+0x2414>
   15a08:	add	r4, r4, #1
   15a0c:	ldr	r3, [r5, #4]
   15a10:	cmp	r3, r4
   15a14:	bgt	15a00 <__assert_fail@plt+0x4678>
   15a18:	ldr	r0, [r7, #4]
   15a1c:	movw	r3, #37356	; 0x91ec
   15a20:	movt	r3, #2
   15a24:	cmp	r0, r3
   15a28:	beq	15a4c <__assert_fail@plt+0x46c4>
   15a2c:	bl	1379c <__assert_fail@plt+0x2414>
   15a30:	movw	r3, #37168	; 0x9130
   15a34:	movt	r3, #2
   15a38:	mov	r2, #256	; 0x100
   15a3c:	str	r2, [r3, #8]
   15a40:	movw	r2, #37356	; 0x91ec
   15a44:	movt	r2, #2
   15a48:	str	r2, [r3, #12]
   15a4c:	ldr	r3, [pc, #64]	; 15a94 <__assert_fail@plt+0x470c>
   15a50:	cmp	r7, r3
   15a54:	beq	15a70 <__assert_fail@plt+0x46e8>
   15a58:	mov	r0, r7
   15a5c:	bl	1379c <__assert_fail@plt+0x2414>
   15a60:	movw	r3, #37168	; 0x9130
   15a64:	movt	r3, #2
   15a68:	add	r2, r3, #8
   15a6c:	str	r2, [r3]
   15a70:	movw	r3, #37168	; 0x9130
   15a74:	movt	r3, #2
   15a78:	mov	r2, #1
   15a7c:	str	r2, [r3, #4]
   15a80:	ldrd	r4, [sp]
   15a84:	ldrd	r6, [sp, #8]
   15a88:	ldr	r8, [sp, #16]
   15a8c:	add	sp, sp, #20
   15a90:	pop	{pc}		; (ldr pc, [sp], #4)
   15a94:	andeq	r9, r2, r8, lsr r1
   15a98:	str	r4, [sp, #-8]!
   15a9c:	str	lr, [sp, #4]
   15aa0:	ldr	r3, [pc, #16]	; 15ab8 <__assert_fail@plt+0x4730>
   15aa4:	mvn	r2, #0
   15aa8:	bl	154fc <__assert_fail@plt+0x4174>
   15aac:	ldr	r4, [sp]
   15ab0:	add	sp, sp, #4
   15ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab8:	andeq	r9, r2, ip, ror #5
   15abc:	str	r4, [sp, #-8]!
   15ac0:	str	lr, [sp, #4]
   15ac4:	ldr	r3, [pc, #12]	; 15ad8 <__assert_fail@plt+0x4750>
   15ac8:	bl	154fc <__assert_fail@plt+0x4174>
   15acc:	ldr	r4, [sp]
   15ad0:	add	sp, sp, #4
   15ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ad8:	andeq	r9, r2, ip, ror #5
   15adc:	str	r4, [sp, #-8]!
   15ae0:	str	lr, [sp, #4]
   15ae4:	mov	r1, r0
   15ae8:	mov	r0, #0
   15aec:	bl	15a98 <__assert_fail@plt+0x4710>
   15af0:	ldr	r4, [sp]
   15af4:	add	sp, sp, #4
   15af8:	pop	{pc}		; (ldr pc, [sp], #4)
   15afc:	str	r4, [sp, #-8]!
   15b00:	str	lr, [sp, #4]
   15b04:	mov	r2, r1
   15b08:	mov	r1, r0
   15b0c:	mov	r0, #0
   15b10:	bl	15abc <__assert_fail@plt+0x4734>
   15b14:	ldr	r4, [sp]
   15b18:	add	sp, sp, #4
   15b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b20:	strd	r4, [sp, #-12]!
   15b24:	str	lr, [sp, #8]
   15b28:	sub	sp, sp, #52	; 0x34
   15b2c:	mov	r4, r0
   15b30:	mov	r5, r2
   15b34:	mov	r0, sp
   15b38:	bl	13c70 <__assert_fail@plt+0x28e8>
   15b3c:	mov	r3, sp
   15b40:	mvn	r2, #0
   15b44:	mov	r1, r5
   15b48:	mov	r0, r4
   15b4c:	bl	154fc <__assert_fail@plt+0x4174>
   15b50:	add	sp, sp, #52	; 0x34
   15b54:	ldrd	r4, [sp]
   15b58:	add	sp, sp, #8
   15b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b60:	strd	r4, [sp, #-16]!
   15b64:	str	r6, [sp, #8]
   15b68:	str	lr, [sp, #12]
   15b6c:	sub	sp, sp, #48	; 0x30
   15b70:	mov	r4, r0
   15b74:	mov	r5, r2
   15b78:	mov	r6, r3
   15b7c:	mov	r0, sp
   15b80:	bl	13c70 <__assert_fail@plt+0x28e8>
   15b84:	mov	r3, sp
   15b88:	mov	r2, r6
   15b8c:	mov	r1, r5
   15b90:	mov	r0, r4
   15b94:	bl	154fc <__assert_fail@plt+0x4174>
   15b98:	add	sp, sp, #48	; 0x30
   15b9c:	ldrd	r4, [sp]
   15ba0:	ldr	r6, [sp, #8]
   15ba4:	add	sp, sp, #12
   15ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bac:	str	r4, [sp, #-8]!
   15bb0:	str	lr, [sp, #4]
   15bb4:	mov	r2, r1
   15bb8:	mov	r1, r0
   15bbc:	mov	r0, #0
   15bc0:	bl	15b20 <__assert_fail@plt+0x4798>
   15bc4:	ldr	r4, [sp]
   15bc8:	add	sp, sp, #4
   15bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd0:	str	r4, [sp, #-8]!
   15bd4:	str	lr, [sp, #4]
   15bd8:	mov	r3, r2
   15bdc:	mov	r2, r1
   15be0:	mov	r1, r0
   15be4:	mov	r0, #0
   15be8:	bl	15b60 <__assert_fail@plt+0x47d8>
   15bec:	ldr	r4, [sp]
   15bf0:	add	sp, sp, #4
   15bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bf8:	strd	r4, [sp, #-12]!
   15bfc:	str	lr, [sp, #8]
   15c00:	sub	sp, sp, #52	; 0x34
   15c04:	mov	r4, r0
   15c08:	mov	r5, r1
   15c0c:	mov	r1, r2
   15c10:	ldr	r0, [pc, #92]	; 15c74 <__assert_fail@plt+0x48ec>
   15c14:	ldrd	r2, [r0]
   15c18:	strd	r2, [sp]
   15c1c:	ldrd	r2, [r0, #8]
   15c20:	strd	r2, [sp, #8]
   15c24:	ldrd	r2, [r0, #16]
   15c28:	strd	r2, [sp, #16]
   15c2c:	ldrd	r2, [r0, #24]
   15c30:	strd	r2, [sp, #24]
   15c34:	ldrd	r2, [r0, #32]
   15c38:	strd	r2, [sp, #32]
   15c3c:	ldrd	r2, [r0, #40]	; 0x28
   15c40:	strd	r2, [sp, #40]	; 0x28
   15c44:	mov	r2, #1
   15c48:	mov	r0, sp
   15c4c:	bl	15770 <__assert_fail@plt+0x43e8>
   15c50:	mov	r3, sp
   15c54:	mov	r2, r5
   15c58:	mov	r1, r4
   15c5c:	mov	r0, #0
   15c60:	bl	154fc <__assert_fail@plt+0x4174>
   15c64:	add	sp, sp, #52	; 0x34
   15c68:	ldrd	r4, [sp]
   15c6c:	add	sp, sp, #8
   15c70:	pop	{pc}		; (ldr pc, [sp], #4)
   15c74:	andeq	r9, r2, ip, ror #5
   15c78:	str	r4, [sp, #-8]!
   15c7c:	str	lr, [sp, #4]
   15c80:	mov	r2, r1
   15c84:	mvn	r1, #0
   15c88:	bl	15bf8 <__assert_fail@plt+0x4870>
   15c8c:	ldr	r4, [sp]
   15c90:	add	sp, sp, #4
   15c94:	pop	{pc}		; (ldr pc, [sp], #4)
   15c98:	str	r4, [sp, #-8]!
   15c9c:	str	lr, [sp, #4]
   15ca0:	mov	r1, #58	; 0x3a
   15ca4:	bl	15c78 <__assert_fail@plt+0x48f0>
   15ca8:	ldr	r4, [sp]
   15cac:	add	sp, sp, #4
   15cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb4:	str	r4, [sp, #-8]!
   15cb8:	str	lr, [sp, #4]
   15cbc:	mov	r2, #58	; 0x3a
   15cc0:	bl	15bf8 <__assert_fail@plt+0x4870>
   15cc4:	ldr	r4, [sp]
   15cc8:	add	sp, sp, #4
   15ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd0:	strd	r4, [sp, #-12]!
   15cd4:	str	lr, [sp, #8]
   15cd8:	sub	sp, sp, #100	; 0x64
   15cdc:	mov	r4, r0
   15ce0:	mov	r5, r2
   15ce4:	mov	r0, sp
   15ce8:	bl	13c70 <__assert_fail@plt+0x28e8>
   15cec:	ldrd	r2, [sp]
   15cf0:	strd	r2, [sp, #48]	; 0x30
   15cf4:	ldrd	r2, [sp, #8]
   15cf8:	strd	r2, [sp, #56]	; 0x38
   15cfc:	ldrd	r2, [sp, #16]
   15d00:	strd	r2, [sp, #64]	; 0x40
   15d04:	ldrd	r2, [sp, #24]
   15d08:	strd	r2, [sp, #72]	; 0x48
   15d0c:	ldrd	r2, [sp, #32]
   15d10:	strd	r2, [sp, #80]	; 0x50
   15d14:	ldrd	r2, [sp, #40]	; 0x28
   15d18:	strd	r2, [sp, #88]	; 0x58
   15d1c:	mov	r2, #1
   15d20:	mov	r1, #58	; 0x3a
   15d24:	add	r0, sp, #48	; 0x30
   15d28:	bl	15770 <__assert_fail@plt+0x43e8>
   15d2c:	add	r3, sp, #48	; 0x30
   15d30:	mvn	r2, #0
   15d34:	mov	r1, r5
   15d38:	mov	r0, r4
   15d3c:	bl	154fc <__assert_fail@plt+0x4174>
   15d40:	add	sp, sp, #100	; 0x64
   15d44:	ldrd	r4, [sp]
   15d48:	add	sp, sp, #8
   15d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d50:	strd	r4, [sp, #-20]!	; 0xffffffec
   15d54:	strd	r6, [sp, #8]
   15d58:	str	lr, [sp, #16]
   15d5c:	sub	sp, sp, #52	; 0x34
   15d60:	mov	r4, r0
   15d64:	mov	r5, r3
   15d68:	ldr	r3, [pc, #92]	; 15dcc <__assert_fail@plt+0x4a44>
   15d6c:	ldrd	r6, [r3]
   15d70:	strd	r6, [sp]
   15d74:	ldrd	r6, [r3, #8]
   15d78:	strd	r6, [sp, #8]
   15d7c:	ldrd	r6, [r3, #16]
   15d80:	strd	r6, [sp, #16]
   15d84:	ldrd	r6, [r3, #24]
   15d88:	strd	r6, [sp, #24]
   15d8c:	ldrd	r6, [r3, #32]
   15d90:	strd	r6, [sp, #32]
   15d94:	ldrd	r6, [r3, #40]	; 0x28
   15d98:	strd	r6, [sp, #40]	; 0x28
   15d9c:	mov	r0, sp
   15da0:	bl	157cc <__assert_fail@plt+0x4444>
   15da4:	mov	r3, sp
   15da8:	ldr	r2, [sp, #72]	; 0x48
   15dac:	mov	r1, r5
   15db0:	mov	r0, r4
   15db4:	bl	154fc <__assert_fail@plt+0x4174>
   15db8:	add	sp, sp, #52	; 0x34
   15dbc:	ldrd	r4, [sp]
   15dc0:	ldrd	r6, [sp, #8]
   15dc4:	add	sp, sp, #16
   15dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dcc:	andeq	r9, r2, ip, ror #5
   15dd0:	push	{lr}		; (str lr, [sp, #-4]!)
   15dd4:	sub	sp, sp, #12
   15dd8:	mvn	ip, #0
   15ddc:	str	ip, [sp]
   15de0:	bl	15d50 <__assert_fail@plt+0x49c8>
   15de4:	add	sp, sp, #12
   15de8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dec:	str	r4, [sp, #-8]!
   15df0:	str	lr, [sp, #4]
   15df4:	mov	r3, r2
   15df8:	mov	r2, r1
   15dfc:	mov	r1, r0
   15e00:	mov	r0, #0
   15e04:	bl	15dd0 <__assert_fail@plt+0x4a48>
   15e08:	ldr	r4, [sp]
   15e0c:	add	sp, sp, #4
   15e10:	pop	{pc}		; (ldr pc, [sp], #4)
   15e14:	push	{lr}		; (str lr, [sp, #-4]!)
   15e18:	sub	sp, sp, #12
   15e1c:	str	r3, [sp]
   15e20:	mov	r3, r2
   15e24:	mov	r2, r1
   15e28:	mov	r1, r0
   15e2c:	mov	r0, #0
   15e30:	bl	15d50 <__assert_fail@plt+0x49c8>
   15e34:	add	sp, sp, #12
   15e38:	pop	{pc}		; (ldr pc, [sp], #4)
   15e3c:	str	r4, [sp, #-8]!
   15e40:	str	lr, [sp, #4]
   15e44:	ldr	r3, [pc, #12]	; 15e58 <__assert_fail@plt+0x4ad0>
   15e48:	bl	154fc <__assert_fail@plt+0x4174>
   15e4c:	ldr	r4, [sp]
   15e50:	add	sp, sp, #4
   15e54:	pop	{pc}		; (ldr pc, [sp], #4)
   15e58:	andeq	r9, r2, r0, asr #2
   15e5c:	str	r4, [sp, #-8]!
   15e60:	str	lr, [sp, #4]
   15e64:	mov	r2, r1
   15e68:	mov	r1, r0
   15e6c:	mov	r0, #0
   15e70:	bl	15e3c <__assert_fail@plt+0x4ab4>
   15e74:	ldr	r4, [sp]
   15e78:	add	sp, sp, #4
   15e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e80:	str	r4, [sp, #-8]!
   15e84:	str	lr, [sp, #4]
   15e88:	mvn	r2, #0
   15e8c:	bl	15e3c <__assert_fail@plt+0x4ab4>
   15e90:	ldr	r4, [sp]
   15e94:	add	sp, sp, #4
   15e98:	pop	{pc}		; (ldr pc, [sp], #4)
   15e9c:	str	r4, [sp, #-8]!
   15ea0:	str	lr, [sp, #4]
   15ea4:	mov	r1, r0
   15ea8:	mov	r0, #0
   15eac:	bl	15e80 <__assert_fail@plt+0x4af8>
   15eb0:	ldr	r4, [sp]
   15eb4:	add	sp, sp, #4
   15eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ebc:	strd	r4, [sp, #-16]!
   15ec0:	str	r6, [sp, #8]
   15ec4:	str	lr, [sp, #12]
   15ec8:	mov	r4, r0
   15ecc:	ldr	r3, [r0, #24]
   15ed0:	ldr	r6, [r0, #20]
   15ed4:	sub	r5, r3, r6
   15ed8:	sub	r5, r5, #1
   15edc:	cmp	r3, r6
   15ee0:	beq	15f7c <__assert_fail@plt+0x4bf4>
   15ee4:	ldr	r2, [r4, #36]	; 0x24
   15ee8:	add	r3, r3, r2
   15eec:	bic	r3, r3, r2
   15ef0:	ldr	r2, [r4, #16]
   15ef4:	ldr	r1, [r4, #28]
   15ef8:	sub	r0, r3, r2
   15efc:	sub	r2, r1, r2
   15f00:	cmp	r0, r2
   15f04:	movhi	r3, r1
   15f08:	str	r3, [r4, #24]
   15f0c:	str	r3, [r4, #20]
   15f10:	ldr	r3, [r4, #72]	; 0x48
   15f14:	ldr	r2, [r4, #68]	; 0x44
   15f18:	sub	r3, r3, r2
   15f1c:	cmp	r3, #3
   15f20:	bls	15f8c <__assert_fail@plt+0x4c04>
   15f24:	ldr	r3, [r4, #68]	; 0x44
   15f28:	str	r6, [r3]
   15f2c:	ldr	r3, [r4, #68]	; 0x44
   15f30:	add	r3, r3, #4
   15f34:	str	r3, [r4, #68]	; 0x44
   15f38:	ldr	r3, [r4, #116]	; 0x74
   15f3c:	ldr	r2, [r4, #112]	; 0x70
   15f40:	sub	r3, r3, r2
   15f44:	cmp	r3, #3
   15f48:	bls	15f9c <__assert_fail@plt+0x4c14>
   15f4c:	ldr	r3, [r4, #112]	; 0x70
   15f50:	str	r5, [r3]
   15f54:	ldr	r3, [r4, #112]	; 0x70
   15f58:	add	r3, r3, #4
   15f5c:	str	r3, [r4, #112]	; 0x70
   15f60:	ldr	r3, [r4]
   15f64:	add	r3, r3, #1
   15f68:	str	r3, [r4]
   15f6c:	ldrd	r4, [sp]
   15f70:	ldr	r6, [sp, #8]
   15f74:	add	sp, sp, #12
   15f78:	pop	{pc}		; (ldr pc, [sp], #4)
   15f7c:	ldrb	r2, [r0, #52]	; 0x34
   15f80:	orr	r2, r2, #2
   15f84:	strb	r2, [r0, #52]	; 0x34
   15f88:	b	15ee4 <__assert_fail@plt+0x4b5c>
   15f8c:	mov	r1, #4
   15f90:	add	r0, r4, #56	; 0x38
   15f94:	bl	17168 <_obstack_newchunk@@Base>
   15f98:	b	15f24 <__assert_fail@plt+0x4b9c>
   15f9c:	mov	r1, #4
   15fa0:	add	r0, r4, #100	; 0x64
   15fa4:	bl	17168 <_obstack_newchunk@@Base>
   15fa8:	b	15f4c <__assert_fail@plt+0x4bc4>
   15fac:	strd	r4, [sp, #-20]!	; 0xffffffec
   15fb0:	strd	r6, [sp, #8]
   15fb4:	str	lr, [sp, #16]
   15fb8:	sub	sp, sp, #12
   15fbc:	mov	r5, r0
   15fc0:	mov	r4, #0
   15fc4:	str	r4, [r0]
   15fc8:	str	r4, [r0, #4]
   15fcc:	str	r4, [r0, #8]
   15fd0:	movw	r6, #28112	; 0x6dd0
   15fd4:	movt	r6, #1
   15fd8:	movw	r7, #14236	; 0x379c
   15fdc:	movt	r7, #1
   15fe0:	str	r7, [sp]
   15fe4:	mov	r3, r6
   15fe8:	mov	r2, r4
   15fec:	mov	r1, r4
   15ff0:	add	r0, r0, #12
   15ff4:	bl	17100 <_obstack_begin@@Base>
   15ff8:	str	r7, [sp]
   15ffc:	mov	r3, r6
   16000:	mov	r2, r4
   16004:	mov	r1, r4
   16008:	add	r0, r5, #56	; 0x38
   1600c:	bl	17100 <_obstack_begin@@Base>
   16010:	str	r7, [sp]
   16014:	mov	r3, r6
   16018:	mov	r2, r4
   1601c:	mov	r1, r4
   16020:	add	r0, r5, #100	; 0x64
   16024:	bl	17100 <_obstack_begin@@Base>
   16028:	add	sp, sp, #12
   1602c:	ldrd	r4, [sp]
   16030:	ldrd	r6, [sp, #8]
   16034:	add	sp, sp, #16
   16038:	pop	{pc}		; (ldr pc, [sp], #4)
   1603c:	str	r4, [sp, #-8]!
   16040:	str	lr, [sp, #4]
   16044:	mov	r4, r0
   16048:	mov	r1, #0
   1604c:	add	r0, r0, #12
   16050:	bl	172bc <_obstack_free@@Base>
   16054:	mov	r1, #0
   16058:	add	r0, r4, #56	; 0x38
   1605c:	bl	172bc <_obstack_free@@Base>
   16060:	mov	r1, #0
   16064:	add	r0, r4, #100	; 0x64
   16068:	bl	172bc <_obstack_free@@Base>
   1606c:	ldr	r4, [sp]
   16070:	add	sp, sp, #4
   16074:	pop	{pc}		; (ldr pc, [sp], #4)
   16078:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1607c:	strd	r6, [sp, #8]
   16080:	str	r8, [sp, #16]
   16084:	str	lr, [sp, #20]
   16088:	mov	r6, r0
   1608c:	mov	r4, r1
   16090:	mov	r8, #1
   16094:	add	r7, r1, #12
   16098:	b	161c8 <__assert_fail@plt+0x4e40>
   1609c:	ldr	r3, [r4, #24]
   160a0:	ldr	r2, [r4, #20]
   160a4:	cmp	r3, r2
   160a8:	beq	160d4 <__assert_fail@plt+0x4d4c>
   160ac:	ldr	r2, [r4, #28]
   160b0:	cmp	r3, r2
   160b4:	beq	161a0 <__assert_fail@plt+0x4e18>
   160b8:	ldr	r3, [r4, #24]
   160bc:	add	r2, r3, #1
   160c0:	str	r2, [r4, #24]
   160c4:	mov	r2, #0
   160c8:	strb	r2, [r3]
   160cc:	mov	r0, r4
   160d0:	bl	15ebc <__assert_fail@plt+0x4b34>
   160d4:	ldr	r3, [r4, #72]	; 0x48
   160d8:	ldr	r2, [r4, #68]	; 0x44
   160dc:	sub	r3, r3, r2
   160e0:	cmp	r3, #3
   160e4:	bls	16208 <__assert_fail@plt+0x4e80>
   160e8:	ldr	r3, [r4, #68]	; 0x44
   160ec:	mov	r2, #0
   160f0:	str	r2, [r3]
   160f4:	ldr	r3, [r4, #68]	; 0x44
   160f8:	add	r3, r3, #4
   160fc:	str	r3, [r4, #68]	; 0x44
   16100:	ldr	r1, [r4, #64]	; 0x40
   16104:	cmp	r3, r1
   16108:	beq	16218 <__assert_fail@plt+0x4e90>
   1610c:	ldr	r2, [r4, #80]	; 0x50
   16110:	add	r3, r3, r2
   16114:	bic	r3, r3, r2
   16118:	ldr	r2, [r4, #60]	; 0x3c
   1611c:	ldr	r0, [r4, #72]	; 0x48
   16120:	sub	ip, r3, r2
   16124:	sub	r2, r0, r2
   16128:	cmp	ip, r2
   1612c:	movhi	r3, r0
   16130:	str	r3, [r4, #68]	; 0x44
   16134:	str	r3, [r4, #64]	; 0x40
   16138:	str	r1, [r4, #4]
   1613c:	ldr	r1, [r4, #108]	; 0x6c
   16140:	ldr	r3, [r4, #112]	; 0x70
   16144:	cmp	r3, r1
   16148:	beq	16228 <__assert_fail@plt+0x4ea0>
   1614c:	ldr	r2, [r4, #124]	; 0x7c
   16150:	add	r3, r3, r2
   16154:	bic	r3, r3, r2
   16158:	ldr	r2, [r4, #104]	; 0x68
   1615c:	ldr	r0, [r4, #116]	; 0x74
   16160:	sub	ip, r3, r2
   16164:	sub	r2, r0, r2
   16168:	cmp	ip, r2
   1616c:	movhi	r3, r0
   16170:	str	r3, [r4, #112]	; 0x70
   16174:	str	r3, [r4, #108]	; 0x6c
   16178:	str	r1, [r4, #8]
   1617c:	mov	r0, r6
   16180:	bl	110dc <ferror@plt>
   16184:	clz	r0, r0
   16188:	lsr	r0, r0, #5
   1618c:	ldrd	r4, [sp]
   16190:	ldrd	r6, [sp, #8]
   16194:	ldr	r8, [sp, #16]
   16198:	add	sp, sp, #20
   1619c:	pop	{pc}		; (ldr pc, [sp], #4)
   161a0:	mov	r1, #1
   161a4:	add	r0, r4, #12
   161a8:	bl	17168 <_obstack_newchunk@@Base>
   161ac:	b	160b8 <__assert_fail@plt+0x4d30>
   161b0:	ldr	r3, [r4, #24]
   161b4:	add	r2, r3, #1
   161b8:	str	r2, [r4, #24]
   161bc:	strb	r5, [r3]
   161c0:	cmp	r5, #0
   161c4:	beq	161fc <__assert_fail@plt+0x4e74>
   161c8:	mov	r0, r6
   161cc:	bl	112bc <fgetc@plt>
   161d0:	mov	r5, r0
   161d4:	cmn	r0, #1
   161d8:	beq	1609c <__assert_fail@plt+0x4d14>
   161dc:	ldr	r2, [r4, #28]
   161e0:	ldr	r3, [r4, #24]
   161e4:	cmp	r2, r3
   161e8:	bne	161b0 <__assert_fail@plt+0x4e28>
   161ec:	mov	r1, r8
   161f0:	mov	r0, r7
   161f4:	bl	17168 <_obstack_newchunk@@Base>
   161f8:	b	161b0 <__assert_fail@plt+0x4e28>
   161fc:	mov	r0, r4
   16200:	bl	15ebc <__assert_fail@plt+0x4b34>
   16204:	b	161c8 <__assert_fail@plt+0x4e40>
   16208:	mov	r1, #4
   1620c:	add	r0, r4, #56	; 0x38
   16210:	bl	17168 <_obstack_newchunk@@Base>
   16214:	b	160e8 <__assert_fail@plt+0x4d60>
   16218:	ldrb	r2, [r4, #96]	; 0x60
   1621c:	orr	r2, r2, #2
   16220:	strb	r2, [r4, #96]	; 0x60
   16224:	b	1610c <__assert_fail@plt+0x4d84>
   16228:	ldrb	r2, [r4, #140]	; 0x8c
   1622c:	orr	r2, r2, #2
   16230:	strb	r2, [r4, #140]	; 0x8c
   16234:	b	1614c <__assert_fail@plt+0x4dc4>
   16238:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1623c:	strd	r6, [sp, #8]
   16240:	strd	r8, [sp, #16]
   16244:	str	sl, [sp, #24]
   16248:	str	lr, [sp, #28]
   1624c:	mov	r8, r0
   16250:	mov	r7, r1
   16254:	mov	r9, r2
   16258:	mov	r5, #0
   1625c:	movt	r5, #32752	; 0x7ff0
   16260:	b	16268 <__assert_fail@plt+0x4ee0>
   16264:	mov	r9, r5
   16268:	mov	r2, r9
   1626c:	mov	r1, r7
   16270:	mov	r0, r8
   16274:	bl	110a0 <read@plt>
   16278:	subs	r6, r0, #0
   1627c:	bge	162c8 <__assert_fail@plt+0x4f40>
   16280:	bl	11280 <__errno_location@plt>
   16284:	ldr	r3, [r0]
   16288:	cmp	r3, #4
   1628c:	beq	16268 <__assert_fail@plt+0x4ee0>
   16290:	cmp	r9, r5
   16294:	movls	r4, #0
   16298:	movhi	r4, #1
   1629c:	cmp	r3, #22
   162a0:	movne	r4, #0
   162a4:	cmp	r4, #0
   162a8:	bne	16264 <__assert_fail@plt+0x4edc>
   162ac:	mov	r0, r6
   162b0:	ldrd	r4, [sp]
   162b4:	ldrd	r6, [sp, #8]
   162b8:	ldrd	r8, [sp, #16]
   162bc:	ldr	sl, [sp, #24]
   162c0:	add	sp, sp, #28
   162c4:	pop	{pc}		; (ldr pc, [sp], #4)
   162c8:	mov	r0, r6
   162cc:	b	162b0 <__assert_fail@plt+0x4f28>
   162d0:	strd	r4, [sp, #-16]!
   162d4:	str	r6, [sp, #8]
   162d8:	str	lr, [sp, #12]
   162dc:	sub	sp, sp, #32
   162e0:	mov	r4, r0
   162e4:	ldr	r5, [sp, #48]	; 0x30
   162e8:	ldr	r6, [sp, #52]	; 0x34
   162ec:	cmp	r1, #0
   162f0:	beq	163bc <__assert_fail@plt+0x5034>
   162f4:	str	r3, [sp, #4]
   162f8:	str	r2, [sp]
   162fc:	mov	r3, r1
   16300:	movw	r2, #33780	; 0x83f4
   16304:	movt	r2, #1
   16308:	mov	r1, #1
   1630c:	bl	112e0 <__fprintf_chk@plt>
   16310:	mov	r2, #5
   16314:	movw	r1, #33800	; 0x8408
   16318:	movt	r1, #1
   1631c:	mov	r0, #0
   16320:	bl	11124 <dcgettext@plt>
   16324:	movw	r3, #2022	; 0x7e6
   16328:	str	r3, [sp]
   1632c:	mov	r3, r0
   16330:	movw	r2, #34528	; 0x86e0
   16334:	movt	r2, #1
   16338:	mov	r1, #1
   1633c:	mov	r0, r4
   16340:	bl	112e0 <__fprintf_chk@plt>
   16344:	mov	r1, r4
   16348:	mov	r0, #10
   1634c:	bl	11118 <fputc_unlocked@plt>
   16350:	mov	r2, #5
   16354:	movw	r1, #33804	; 0x840c
   16358:	movt	r1, #1
   1635c:	mov	r0, #0
   16360:	bl	11124 <dcgettext@plt>
   16364:	movw	r3, #33976	; 0x84b8
   16368:	movt	r3, #1
   1636c:	mov	r2, r0
   16370:	mov	r1, #1
   16374:	mov	r0, r4
   16378:	bl	112e0 <__fprintf_chk@plt>
   1637c:	mov	r1, r4
   16380:	mov	r0, #10
   16384:	bl	11118 <fputc_unlocked@plt>
   16388:	cmp	r6, #9
   1638c:	ldrls	pc, [pc, r6, lsl #2]
   16390:	b	16694 <__assert_fail@plt+0x530c>
   16394:	andeq	r6, r1, r0, lsl #8
   16398:	ldrdeq	r6, [r1], -r8
   1639c:	andeq	r6, r1, r4, lsl r4
   163a0:	andeq	r6, r1, r8, asr #8
   163a4:	andeq	r6, r1, r4, lsl #9
   163a8:	andeq	r6, r1, r8, asr #9
   163ac:	andeq	r6, r1, r4, lsl r5
   163b0:	andeq	r6, r1, r8, ror #10
   163b4:	andeq	r6, r1, r4, asr #11
   163b8:	andeq	r6, r1, r8, lsr #12
   163bc:	str	r3, [sp]
   163c0:	mov	r3, r2
   163c4:	movw	r2, #33792	; 0x8400
   163c8:	movt	r2, #1
   163cc:	mov	r1, #1
   163d0:	bl	112e0 <__fprintf_chk@plt>
   163d4:	b	16310 <__assert_fail@plt+0x4f88>
   163d8:	mov	r2, #5
   163dc:	movw	r1, #34012	; 0x84dc
   163e0:	movt	r1, #1
   163e4:	mov	r0, #0
   163e8:	bl	11124 <dcgettext@plt>
   163ec:	ldr	r3, [r5]
   163f0:	mov	r2, r0
   163f4:	mov	r1, #1
   163f8:	mov	r0, r4
   163fc:	bl	112e0 <__fprintf_chk@plt>
   16400:	add	sp, sp, #32
   16404:	ldrd	r4, [sp]
   16408:	ldr	r6, [sp, #8]
   1640c:	add	sp, sp, #12
   16410:	pop	{pc}		; (ldr pc, [sp], #4)
   16414:	mov	r2, #5
   16418:	movw	r1, #34028	; 0x84ec
   1641c:	movt	r1, #1
   16420:	mov	r0, #0
   16424:	bl	11124 <dcgettext@plt>
   16428:	ldr	r3, [r5, #4]
   1642c:	str	r3, [sp]
   16430:	ldr	r3, [r5]
   16434:	mov	r2, r0
   16438:	mov	r1, #1
   1643c:	mov	r0, r4
   16440:	bl	112e0 <__fprintf_chk@plt>
   16444:	b	16400 <__assert_fail@plt+0x5078>
   16448:	mov	r2, #5
   1644c:	movw	r1, #34052	; 0x8504
   16450:	movt	r1, #1
   16454:	mov	r0, #0
   16458:	bl	11124 <dcgettext@plt>
   1645c:	ldr	r3, [r5, #8]
   16460:	str	r3, [sp, #4]
   16464:	ldr	r3, [r5, #4]
   16468:	str	r3, [sp]
   1646c:	ldr	r3, [r5]
   16470:	mov	r2, r0
   16474:	mov	r1, #1
   16478:	mov	r0, r4
   1647c:	bl	112e0 <__fprintf_chk@plt>
   16480:	b	16400 <__assert_fail@plt+0x5078>
   16484:	mov	r2, #5
   16488:	movw	r1, #34080	; 0x8520
   1648c:	movt	r1, #1
   16490:	mov	r0, #0
   16494:	bl	11124 <dcgettext@plt>
   16498:	ldr	r3, [r5, #12]
   1649c:	str	r3, [sp, #8]
   164a0:	ldr	r3, [r5, #8]
   164a4:	str	r3, [sp, #4]
   164a8:	ldr	r3, [r5, #4]
   164ac:	str	r3, [sp]
   164b0:	ldr	r3, [r5]
   164b4:	mov	r2, r0
   164b8:	mov	r1, #1
   164bc:	mov	r0, r4
   164c0:	bl	112e0 <__fprintf_chk@plt>
   164c4:	b	16400 <__assert_fail@plt+0x5078>
   164c8:	mov	r2, #5
   164cc:	movw	r1, #34112	; 0x8540
   164d0:	movt	r1, #1
   164d4:	mov	r0, #0
   164d8:	bl	11124 <dcgettext@plt>
   164dc:	ldr	r3, [r5, #16]
   164e0:	str	r3, [sp, #12]
   164e4:	ldr	r3, [r5, #12]
   164e8:	str	r3, [sp, #8]
   164ec:	ldr	r3, [r5, #8]
   164f0:	str	r3, [sp, #4]
   164f4:	ldr	r3, [r5, #4]
   164f8:	str	r3, [sp]
   164fc:	ldr	r3, [r5]
   16500:	mov	r2, r0
   16504:	mov	r1, #1
   16508:	mov	r0, r4
   1650c:	bl	112e0 <__fprintf_chk@plt>
   16510:	b	16400 <__assert_fail@plt+0x5078>
   16514:	mov	r2, #5
   16518:	movw	r1, #34148	; 0x8564
   1651c:	movt	r1, #1
   16520:	mov	r0, #0
   16524:	bl	11124 <dcgettext@plt>
   16528:	ldr	r3, [r5, #20]
   1652c:	str	r3, [sp, #16]
   16530:	ldr	r3, [r5, #16]
   16534:	str	r3, [sp, #12]
   16538:	ldr	r3, [r5, #12]
   1653c:	str	r3, [sp, #8]
   16540:	ldr	r3, [r5, #8]
   16544:	str	r3, [sp, #4]
   16548:	ldr	r3, [r5, #4]
   1654c:	str	r3, [sp]
   16550:	ldr	r3, [r5]
   16554:	mov	r2, r0
   16558:	mov	r1, #1
   1655c:	mov	r0, r4
   16560:	bl	112e0 <__fprintf_chk@plt>
   16564:	b	16400 <__assert_fail@plt+0x5078>
   16568:	mov	r2, #5
   1656c:	movw	r1, #34188	; 0x858c
   16570:	movt	r1, #1
   16574:	mov	r0, #0
   16578:	bl	11124 <dcgettext@plt>
   1657c:	ldr	r3, [r5, #24]
   16580:	str	r3, [sp, #20]
   16584:	ldr	r3, [r5, #20]
   16588:	str	r3, [sp, #16]
   1658c:	ldr	r3, [r5, #16]
   16590:	str	r3, [sp, #12]
   16594:	ldr	r3, [r5, #12]
   16598:	str	r3, [sp, #8]
   1659c:	ldr	r3, [r5, #8]
   165a0:	str	r3, [sp, #4]
   165a4:	ldr	r3, [r5, #4]
   165a8:	str	r3, [sp]
   165ac:	ldr	r3, [r5]
   165b0:	mov	r2, r0
   165b4:	mov	r1, #1
   165b8:	mov	r0, r4
   165bc:	bl	112e0 <__fprintf_chk@plt>
   165c0:	b	16400 <__assert_fail@plt+0x5078>
   165c4:	mov	r2, #5
   165c8:	movw	r1, #34232	; 0x85b8
   165cc:	movt	r1, #1
   165d0:	mov	r0, #0
   165d4:	bl	11124 <dcgettext@plt>
   165d8:	ldr	r3, [r5, #28]
   165dc:	str	r3, [sp, #24]
   165e0:	ldr	r3, [r5, #24]
   165e4:	str	r3, [sp, #20]
   165e8:	ldr	r3, [r5, #20]
   165ec:	str	r3, [sp, #16]
   165f0:	ldr	r3, [r5, #16]
   165f4:	str	r3, [sp, #12]
   165f8:	ldr	r3, [r5, #12]
   165fc:	str	r3, [sp, #8]
   16600:	ldr	r3, [r5, #8]
   16604:	str	r3, [sp, #4]
   16608:	ldr	r3, [r5, #4]
   1660c:	str	r3, [sp]
   16610:	ldr	r3, [r5]
   16614:	mov	r2, r0
   16618:	mov	r1, #1
   1661c:	mov	r0, r4
   16620:	bl	112e0 <__fprintf_chk@plt>
   16624:	b	16400 <__assert_fail@plt+0x5078>
   16628:	mov	r2, #5
   1662c:	movw	r1, #34280	; 0x85e8
   16630:	movt	r1, #1
   16634:	mov	r0, #0
   16638:	bl	11124 <dcgettext@plt>
   1663c:	ldr	r3, [r5, #32]
   16640:	str	r3, [sp, #28]
   16644:	ldr	r3, [r5, #28]
   16648:	str	r3, [sp, #24]
   1664c:	ldr	r3, [r5, #24]
   16650:	str	r3, [sp, #20]
   16654:	ldr	r3, [r5, #20]
   16658:	str	r3, [sp, #16]
   1665c:	ldr	r3, [r5, #16]
   16660:	str	r3, [sp, #12]
   16664:	ldr	r3, [r5, #12]
   16668:	str	r3, [sp, #8]
   1666c:	ldr	r3, [r5, #8]
   16670:	str	r3, [sp, #4]
   16674:	ldr	r3, [r5, #4]
   16678:	str	r3, [sp]
   1667c:	ldr	r3, [r5]
   16680:	mov	r2, r0
   16684:	mov	r1, #1
   16688:	mov	r0, r4
   1668c:	bl	112e0 <__fprintf_chk@plt>
   16690:	b	16400 <__assert_fail@plt+0x5078>
   16694:	mov	r2, #5
   16698:	movw	r1, #34332	; 0x861c
   1669c:	movt	r1, #1
   166a0:	mov	r0, #0
   166a4:	bl	11124 <dcgettext@plt>
   166a8:	ldr	r3, [r5, #32]
   166ac:	str	r3, [sp, #28]
   166b0:	ldr	r3, [r5, #28]
   166b4:	str	r3, [sp, #24]
   166b8:	ldr	r3, [r5, #24]
   166bc:	str	r3, [sp, #20]
   166c0:	ldr	r3, [r5, #20]
   166c4:	str	r3, [sp, #16]
   166c8:	ldr	r3, [r5, #16]
   166cc:	str	r3, [sp, #12]
   166d0:	ldr	r3, [r5, #12]
   166d4:	str	r3, [sp, #8]
   166d8:	ldr	r3, [r5, #8]
   166dc:	str	r3, [sp, #4]
   166e0:	ldr	r3, [r5, #4]
   166e4:	str	r3, [sp]
   166e8:	ldr	r3, [r5]
   166ec:	mov	r2, r0
   166f0:	mov	r1, #1
   166f4:	mov	r0, r4
   166f8:	bl	112e0 <__fprintf_chk@plt>
   166fc:	b	16400 <__assert_fail@plt+0x5078>
   16700:	strd	r4, [sp, #-12]!
   16704:	str	lr, [sp, #8]
   16708:	sub	sp, sp, #12
   1670c:	ldr	r5, [sp, #24]
   16710:	ldr	ip, [r5]
   16714:	cmp	ip, #0
   16718:	beq	16750 <__assert_fail@plt+0x53c8>
   1671c:	mov	lr, r5
   16720:	mov	ip, #0
   16724:	add	ip, ip, #1
   16728:	ldr	r4, [lr, #4]!
   1672c:	cmp	r4, #0
   16730:	bne	16724 <__assert_fail@plt+0x539c>
   16734:	str	ip, [sp, #4]
   16738:	str	r5, [sp]
   1673c:	bl	162d0 <__assert_fail@plt+0x4f48>
   16740:	add	sp, sp, #12
   16744:	ldrd	r4, [sp]
   16748:	add	sp, sp, #8
   1674c:	pop	{pc}		; (ldr pc, [sp], #4)
   16750:	mov	ip, #0
   16754:	b	16734 <__assert_fail@plt+0x53ac>
   16758:	strd	r4, [sp, #-12]!
   1675c:	str	lr, [sp, #8]
   16760:	sub	sp, sp, #52	; 0x34
   16764:	ldr	r5, [sp, #64]	; 0x40
   16768:	add	r4, sp, #8
   1676c:	mov	ip, #0
   16770:	ldr	lr, [r5], #4
   16774:	str	lr, [r4], #4
   16778:	cmp	lr, #0
   1677c:	beq	1678c <__assert_fail@plt+0x5404>
   16780:	add	ip, ip, #1
   16784:	cmp	ip, #10
   16788:	bne	16770 <__assert_fail@plt+0x53e8>
   1678c:	str	ip, [sp, #4]
   16790:	add	ip, sp, #8
   16794:	str	ip, [sp]
   16798:	bl	162d0 <__assert_fail@plt+0x4f48>
   1679c:	add	sp, sp, #52	; 0x34
   167a0:	ldrd	r4, [sp]
   167a4:	add	sp, sp, #8
   167a8:	pop	{pc}		; (ldr pc, [sp], #4)
   167ac:	push	{r3}		; (str r3, [sp, #-4]!)
   167b0:	push	{lr}		; (str lr, [sp, #-4]!)
   167b4:	sub	sp, sp, #16
   167b8:	add	r3, sp, #24
   167bc:	str	r3, [sp, #12]
   167c0:	str	r3, [sp]
   167c4:	ldr	r3, [sp, #20]
   167c8:	bl	16758 <__assert_fail@plt+0x53d0>
   167cc:	add	sp, sp, #16
   167d0:	pop	{lr}		; (ldr lr, [sp], #4)
   167d4:	add	sp, sp, #4
   167d8:	bx	lr
   167dc:	str	r4, [sp, #-8]!
   167e0:	str	lr, [sp, #4]
   167e4:	movw	r3, #37268	; 0x9194
   167e8:	movt	r3, #2
   167ec:	ldr	r1, [r3]
   167f0:	mov	r0, #10
   167f4:	bl	11118 <fputc_unlocked@plt>
   167f8:	mov	r2, #5
   167fc:	movw	r1, #34392	; 0x8658
   16800:	movt	r1, #1
   16804:	mov	r0, #0
   16808:	bl	11124 <dcgettext@plt>
   1680c:	movw	r2, #34412	; 0x866c
   16810:	movt	r2, #1
   16814:	mov	r1, r0
   16818:	mov	r0, #1
   1681c:	bl	112c8 <__printf_chk@plt>
   16820:	mov	r2, #5
   16824:	movw	r1, #34436	; 0x8684
   16828:	movt	r1, #1
   1682c:	mov	r0, #0
   16830:	bl	11124 <dcgettext@plt>
   16834:	movw	r3, #32636	; 0x7f7c
   16838:	movt	r3, #1
   1683c:	movw	r2, #32676	; 0x7fa4
   16840:	movt	r2, #1
   16844:	mov	r1, r0
   16848:	mov	r0, #1
   1684c:	bl	112c8 <__printf_chk@plt>
   16850:	mov	r2, #5
   16854:	movw	r1, #34456	; 0x8698
   16858:	movt	r1, #1
   1685c:	mov	r0, #0
   16860:	bl	11124 <dcgettext@plt>
   16864:	movw	r2, #34496	; 0x86c0
   16868:	movt	r2, #1
   1686c:	mov	r1, r0
   16870:	mov	r0, #1
   16874:	bl	112c8 <__printf_chk@plt>
   16878:	ldr	r4, [sp]
   1687c:	add	sp, sp, #4
   16880:	pop	{pc}		; (ldr pc, [sp], #4)
   16884:	str	r4, [sp, #-8]!
   16888:	str	lr, [sp, #4]
   1688c:	bl	16dd0 <__assert_fail@plt+0x5a48>
   16890:	cmp	r0, #0
   16894:	beq	168a4 <__assert_fail@plt+0x551c>
   16898:	ldr	r4, [sp]
   1689c:	add	sp, sp, #4
   168a0:	pop	{pc}		; (ldr pc, [sp], #4)
   168a4:	bl	16d18 <__assert_fail@plt+0x5990>
   168a8:	str	r4, [sp, #-8]!
   168ac:	str	lr, [sp, #4]
   168b0:	bl	16dd0 <__assert_fail@plt+0x5a48>
   168b4:	cmp	r0, #0
   168b8:	beq	168c8 <__assert_fail@plt+0x5540>
   168bc:	ldr	r4, [sp]
   168c0:	add	sp, sp, #4
   168c4:	pop	{pc}		; (ldr pc, [sp], #4)
   168c8:	bl	16d18 <__assert_fail@plt+0x5990>
   168cc:	str	r4, [sp, #-8]!
   168d0:	str	lr, [sp, #4]
   168d4:	bl	16884 <__assert_fail@plt+0x54fc>
   168d8:	ldr	r4, [sp]
   168dc:	add	sp, sp, #4
   168e0:	pop	{pc}		; (ldr pc, [sp], #4)
   168e4:	strd	r4, [sp, #-16]!
   168e8:	str	r6, [sp, #8]
   168ec:	str	lr, [sp, #12]
   168f0:	mov	r5, r0
   168f4:	mov	r4, r1
   168f8:	bl	16e0c <__assert_fail@plt+0x5a84>
   168fc:	cmp	r0, #0
   16900:	beq	16914 <__assert_fail@plt+0x558c>
   16904:	ldrd	r4, [sp]
   16908:	ldr	r6, [sp, #8]
   1690c:	add	sp, sp, #12
   16910:	pop	{pc}		; (ldr pc, [sp], #4)
   16914:	adds	r4, r4, #0
   16918:	movne	r4, #1
   1691c:	cmp	r5, #0
   16920:	moveq	r4, #1
   16924:	cmp	r4, #0
   16928:	beq	16904 <__assert_fail@plt+0x557c>
   1692c:	bl	16d18 <__assert_fail@plt+0x5990>
   16930:	str	r4, [sp, #-8]!
   16934:	str	lr, [sp, #4]
   16938:	cmp	r1, #0
   1693c:	orreq	r1, r1, #1
   16940:	bl	16e0c <__assert_fail@plt+0x5a84>
   16944:	cmp	r0, #0
   16948:	beq	16958 <__assert_fail@plt+0x55d0>
   1694c:	ldr	r4, [sp]
   16950:	add	sp, sp, #4
   16954:	pop	{pc}		; (ldr pc, [sp], #4)
   16958:	bl	16d18 <__assert_fail@plt+0x5990>
   1695c:	strd	r4, [sp, #-16]!
   16960:	str	r6, [sp, #8]
   16964:	str	lr, [sp, #12]
   16968:	mov	r4, r0
   1696c:	mov	r6, r1
   16970:	mov	r5, r2
   16974:	bl	17378 <_obstack_memory_used@@Base+0x34>
   16978:	cmp	r0, #0
   1697c:	beq	16990 <__assert_fail@plt+0x5608>
   16980:	ldrd	r4, [sp]
   16984:	ldr	r6, [sp, #8]
   16988:	add	sp, sp, #12
   1698c:	pop	{pc}		; (ldr pc, [sp], #4)
   16990:	cmp	r4, #0
   16994:	beq	169a4 <__assert_fail@plt+0x561c>
   16998:	cmp	r6, #0
   1699c:	cmpne	r5, #0
   169a0:	beq	16980 <__assert_fail@plt+0x55f8>
   169a4:	bl	16d18 <__assert_fail@plt+0x5990>
   169a8:	str	r4, [sp, #-8]!
   169ac:	str	lr, [sp, #4]
   169b0:	bl	1695c <__assert_fail@plt+0x55d4>
   169b4:	ldr	r4, [sp]
   169b8:	add	sp, sp, #4
   169bc:	pop	{pc}		; (ldr pc, [sp], #4)
   169c0:	str	r4, [sp, #-8]!
   169c4:	str	lr, [sp, #4]
   169c8:	mov	ip, r1
   169cc:	mov	r3, r2
   169d0:	cmp	r2, #0
   169d4:	cmpne	r1, #0
   169d8:	moveq	r3, #1
   169dc:	moveq	ip, r3
   169e0:	mov	r2, r3
   169e4:	mov	r1, ip
   169e8:	bl	17378 <_obstack_memory_used@@Base+0x34>
   169ec:	cmp	r0, #0
   169f0:	beq	16a00 <__assert_fail@plt+0x5678>
   169f4:	ldr	r4, [sp]
   169f8:	add	sp, sp, #4
   169fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16a00:	bl	16d18 <__assert_fail@plt+0x5990>
   16a04:	str	r4, [sp, #-8]!
   16a08:	str	lr, [sp, #4]
   16a0c:	mov	r2, r1
   16a10:	mov	r1, r0
   16a14:	mov	r0, #0
   16a18:	bl	1695c <__assert_fail@plt+0x55d4>
   16a1c:	ldr	r4, [sp]
   16a20:	add	sp, sp, #4
   16a24:	pop	{pc}		; (ldr pc, [sp], #4)
   16a28:	str	r4, [sp, #-8]!
   16a2c:	str	lr, [sp, #4]
   16a30:	mov	r2, r1
   16a34:	mov	r1, r0
   16a38:	mov	r0, #0
   16a3c:	bl	169c0 <__assert_fail@plt+0x5638>
   16a40:	ldr	r4, [sp]
   16a44:	add	sp, sp, #4
   16a48:	pop	{pc}		; (ldr pc, [sp], #4)
   16a4c:	strd	r4, [sp, #-16]!
   16a50:	str	r6, [sp, #8]
   16a54:	str	lr, [sp, #12]
   16a58:	mov	r5, r1
   16a5c:	ldr	r4, [r1]
   16a60:	cmp	r0, #0
   16a64:	beq	16a94 <__assert_fail@plt+0x570c>
   16a68:	lsr	r3, r4, #1
   16a6c:	add	r3, r3, #1
   16a70:	adds	r4, r4, r3
   16a74:	bcs	16ab0 <__assert_fail@plt+0x5728>
   16a78:	mov	r1, r4
   16a7c:	bl	1695c <__assert_fail@plt+0x55d4>
   16a80:	str	r4, [r5]
   16a84:	ldrd	r4, [sp]
   16a88:	ldr	r6, [sp, #8]
   16a8c:	add	sp, sp, #12
   16a90:	pop	{pc}		; (ldr pc, [sp], #4)
   16a94:	cmp	r4, #0
   16a98:	bne	16a78 <__assert_fail@plt+0x56f0>
   16a9c:	mov	r4, #64	; 0x40
   16aa0:	udiv	r4, r4, r2
   16aa4:	cmp	r2, #64	; 0x40
   16aa8:	addhi	r4, r4, #1
   16aac:	b	16a78 <__assert_fail@plt+0x56f0>
   16ab0:	bl	16d18 <__assert_fail@plt+0x5990>
   16ab4:	str	r4, [sp, #-8]!
   16ab8:	str	lr, [sp, #4]
   16abc:	mov	r2, #1
   16ac0:	bl	16a4c <__assert_fail@plt+0x56c4>
   16ac4:	ldr	r4, [sp]
   16ac8:	add	sp, sp, #4
   16acc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ad0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16ad4:	strd	r6, [sp, #8]
   16ad8:	str	r8, [sp, #16]
   16adc:	str	lr, [sp, #20]
   16ae0:	mov	r5, r1
   16ae4:	ldr	lr, [sp, #24]
   16ae8:	ldr	ip, [r1]
   16aec:	asr	r4, ip, #1
   16af0:	adds	r4, ip, r4
   16af4:	movvs	r1, #1
   16af8:	movvc	r1, #0
   16afc:	cmp	r1, #0
   16b00:	mvnne	r4, #-2147483648	; 0x80000000
   16b04:	mvn	r8, r3
   16b08:	lsr	r8, r8, #31
   16b0c:	cmp	r3, r4
   16b10:	movge	r1, #0
   16b14:	andlt	r1, r8, #1
   16b18:	cmp	r1, #0
   16b1c:	movne	r4, r3
   16b20:	smull	r6, r7, r4, lr
   16b24:	asr	r1, r6, #31
   16b28:	cmp	r1, r7
   16b2c:	bne	16b44 <__assert_fail@plt+0x57bc>
   16b30:	mov	r1, r6
   16b34:	cmp	r6, #63	; 0x3f
   16b38:	movle	r1, #64	; 0x40
   16b3c:	ble	16b48 <__assert_fail@plt+0x57c0>
   16b40:	b	16b54 <__assert_fail@plt+0x57cc>
   16b44:	mvn	r1, #-2147483648	; 0x80000000
   16b48:	sdiv	r4, r1, lr
   16b4c:	mls	r6, lr, r4, r1
   16b50:	sub	r1, r1, r6
   16b54:	cmp	r0, #0
   16b58:	moveq	r6, #0
   16b5c:	streq	r6, [r5]
   16b60:	sub	r6, r4, ip
   16b64:	cmp	r6, r2
   16b68:	bge	16ba0 <__assert_fail@plt+0x5818>
   16b6c:	adds	r2, ip, r2
   16b70:	mov	r4, r2
   16b74:	bvs	16bbc <__assert_fail@plt+0x5834>
   16b78:	cmp	r2, r3
   16b7c:	movle	r3, #0
   16b80:	andgt	r3, r8, #1
   16b84:	cmp	r3, #0
   16b88:	bne	16bbc <__assert_fail@plt+0x5834>
   16b8c:	smull	r2, r3, r2, lr
   16b90:	asr	ip, r2, #31
   16b94:	mov	r1, r2
   16b98:	cmp	ip, r3
   16b9c:	bne	16bbc <__assert_fail@plt+0x5834>
   16ba0:	bl	168e4 <__assert_fail@plt+0x555c>
   16ba4:	str	r4, [r5]
   16ba8:	ldrd	r4, [sp]
   16bac:	ldrd	r6, [sp, #8]
   16bb0:	ldr	r8, [sp, #16]
   16bb4:	add	sp, sp, #20
   16bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bbc:	bl	16d18 <__assert_fail@plt+0x5990>
   16bc0:	str	r4, [sp, #-8]!
   16bc4:	str	lr, [sp, #4]
   16bc8:	bl	16d5c <__assert_fail@plt+0x59d4>
   16bcc:	cmp	r0, #0
   16bd0:	beq	16be0 <__assert_fail@plt+0x5858>
   16bd4:	ldr	r4, [sp]
   16bd8:	add	sp, sp, #4
   16bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16be0:	bl	16d18 <__assert_fail@plt+0x5990>
   16be4:	str	r4, [sp, #-8]!
   16be8:	str	lr, [sp, #4]
   16bec:	mov	r1, #1
   16bf0:	bl	16bc0 <__assert_fail@plt+0x5838>
   16bf4:	ldr	r4, [sp]
   16bf8:	add	sp, sp, #4
   16bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16c00:	str	r4, [sp, #-8]!
   16c04:	str	lr, [sp, #4]
   16c08:	bl	16d5c <__assert_fail@plt+0x59d4>
   16c0c:	cmp	r0, #0
   16c10:	beq	16c20 <__assert_fail@plt+0x5898>
   16c14:	ldr	r4, [sp]
   16c18:	add	sp, sp, #4
   16c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c20:	bl	16d18 <__assert_fail@plt+0x5990>
   16c24:	str	r4, [sp, #-8]!
   16c28:	str	lr, [sp, #4]
   16c2c:	mov	r1, #1
   16c30:	bl	16c00 <__assert_fail@plt+0x5878>
   16c34:	ldr	r4, [sp]
   16c38:	add	sp, sp, #4
   16c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c40:	strd	r4, [sp, #-16]!
   16c44:	str	r6, [sp, #8]
   16c48:	str	lr, [sp, #12]
   16c4c:	mov	r5, r0
   16c50:	mov	r4, r1
   16c54:	mov	r0, r1
   16c58:	bl	16884 <__assert_fail@plt+0x54fc>
   16c5c:	mov	r2, r4
   16c60:	mov	r1, r5
   16c64:	bl	110f4 <memcpy@plt>
   16c68:	ldrd	r4, [sp]
   16c6c:	ldr	r6, [sp, #8]
   16c70:	add	sp, sp, #12
   16c74:	pop	{pc}		; (ldr pc, [sp], #4)
   16c78:	strd	r4, [sp, #-16]!
   16c7c:	str	r6, [sp, #8]
   16c80:	str	lr, [sp, #12]
   16c84:	mov	r5, r0
   16c88:	mov	r4, r1
   16c8c:	mov	r0, r1
   16c90:	bl	168a8 <__assert_fail@plt+0x5520>
   16c94:	mov	r2, r4
   16c98:	mov	r1, r5
   16c9c:	bl	110f4 <memcpy@plt>
   16ca0:	ldrd	r4, [sp]
   16ca4:	ldr	r6, [sp, #8]
   16ca8:	add	sp, sp, #12
   16cac:	pop	{pc}		; (ldr pc, [sp], #4)
   16cb0:	strd	r4, [sp, #-16]!
   16cb4:	str	r6, [sp, #8]
   16cb8:	str	lr, [sp, #12]
   16cbc:	mov	r5, r0
   16cc0:	mov	r4, r1
   16cc4:	add	r0, r1, #1
   16cc8:	bl	168a8 <__assert_fail@plt+0x5520>
   16ccc:	mov	r2, #0
   16cd0:	strb	r2, [r0, r4]
   16cd4:	mov	r2, r4
   16cd8:	mov	r1, r5
   16cdc:	bl	110f4 <memcpy@plt>
   16ce0:	ldrd	r4, [sp]
   16ce4:	ldr	r6, [sp, #8]
   16ce8:	add	sp, sp, #12
   16cec:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf0:	str	r4, [sp, #-8]!
   16cf4:	str	lr, [sp, #4]
   16cf8:	mov	r4, r0
   16cfc:	bl	1125c <strlen@plt>
   16d00:	add	r1, r0, #1
   16d04:	mov	r0, r4
   16d08:	bl	16c40 <__assert_fail@plt+0x58b8>
   16d0c:	ldr	r4, [sp]
   16d10:	add	sp, sp, #4
   16d14:	pop	{pc}		; (ldr pc, [sp], #4)
   16d18:	str	r4, [sp, #-8]!
   16d1c:	str	lr, [sp, #4]
   16d20:	movw	r3, #37164	; 0x912c
   16d24:	movt	r3, #2
   16d28:	ldr	r4, [r3]
   16d2c:	mov	r2, #5
   16d30:	movw	r1, #34576	; 0x8710
   16d34:	movt	r1, #1
   16d38:	mov	r0, #0
   16d3c:	bl	11124 <dcgettext@plt>
   16d40:	mov	r3, r0
   16d44:	movw	r2, #33460	; 0x82b4
   16d48:	movt	r2, #1
   16d4c:	mov	r1, #0
   16d50:	mov	r0, r4
   16d54:	bl	111c0 <error@plt>
   16d58:	bl	11370 <abort@plt>
   16d5c:	strd	r4, [sp, #-16]!
   16d60:	str	r6, [sp, #8]
   16d64:	str	lr, [sp, #12]
   16d68:	cmp	r1, #0
   16d6c:	cmpne	r0, #0
   16d70:	beq	16dac <__assert_fail@plt+0x5a24>
   16d74:	mov	r2, r0
   16d78:	mov	r3, r1
   16d7c:	umull	r4, r5, r0, r1
   16d80:	adds	r1, r5, #0
   16d84:	movne	r1, #1
   16d88:	cmp	r4, #0
   16d8c:	movlt	r1, #1
   16d90:	cmp	r1, #0
   16d94:	beq	16db4 <__assert_fail@plt+0x5a2c>
   16d98:	bl	11280 <__errno_location@plt>
   16d9c:	mov	r3, #12
   16da0:	str	r3, [r0]
   16da4:	mov	r0, #0
   16da8:	b	16dc0 <__assert_fail@plt+0x5a38>
   16dac:	mov	r3, #1
   16db0:	mov	r2, r3
   16db4:	mov	r1, r3
   16db8:	mov	r0, r2
   16dbc:	bl	11064 <calloc@plt>
   16dc0:	ldrd	r4, [sp]
   16dc4:	ldr	r6, [sp, #8]
   16dc8:	add	sp, sp, #12
   16dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd0:	str	r4, [sp, #-8]!
   16dd4:	str	lr, [sp, #4]
   16dd8:	cmp	r0, #0
   16ddc:	beq	16df8 <__assert_fail@plt+0x5a70>
   16de0:	bge	16dfc <__assert_fail@plt+0x5a74>
   16de4:	bl	11280 <__errno_location@plt>
   16de8:	mov	r3, #12
   16dec:	str	r3, [r0]
   16df0:	mov	r0, #0
   16df4:	b	16e00 <__assert_fail@plt+0x5a78>
   16df8:	mov	r0, #1
   16dfc:	bl	111f0 <malloc@plt>
   16e00:	ldr	r4, [sp]
   16e04:	add	sp, sp, #4
   16e08:	pop	{pc}		; (ldr pc, [sp], #4)
   16e0c:	str	r4, [sp, #-8]!
   16e10:	str	lr, [sp, #4]
   16e14:	cmp	r0, #0
   16e18:	beq	16e3c <__assert_fail@plt+0x5ab4>
   16e1c:	cmp	r1, #0
   16e20:	beq	16e48 <__assert_fail@plt+0x5ac0>
   16e24:	cmp	r1, #0
   16e28:	blt	16e54 <__assert_fail@plt+0x5acc>
   16e2c:	bl	1113c <realloc@plt>
   16e30:	ldr	r4, [sp]
   16e34:	add	sp, sp, #4
   16e38:	pop	{pc}		; (ldr pc, [sp], #4)
   16e3c:	mov	r0, r1
   16e40:	bl	16dd0 <__assert_fail@plt+0x5a48>
   16e44:	b	16e30 <__assert_fail@plt+0x5aa8>
   16e48:	bl	1379c <__assert_fail@plt+0x2414>
   16e4c:	mov	r0, #0
   16e50:	b	16e30 <__assert_fail@plt+0x5aa8>
   16e54:	bl	11280 <__errno_location@plt>
   16e58:	mov	r3, #12
   16e5c:	str	r3, [r0]
   16e60:	mov	r0, #0
   16e64:	b	16e30 <__assert_fail@plt+0x5aa8>
   16e68:	strd	r4, [sp, #-16]!
   16e6c:	str	r6, [sp, #8]
   16e70:	str	lr, [sp, #12]
   16e74:	mov	r5, r0
   16e78:	bl	111a8 <__fpending@plt>
   16e7c:	mov	r6, r0
   16e80:	ldr	r4, [r5]
   16e84:	and	r4, r4, #32
   16e88:	mov	r0, r5
   16e8c:	bl	13670 <__assert_fail@plt+0x22e8>
   16e90:	cmp	r4, #0
   16e94:	bne	16ec8 <__assert_fail@plt+0x5b40>
   16e98:	cmp	r0, #0
   16e9c:	beq	16eb8 <__assert_fail@plt+0x5b30>
   16ea0:	cmp	r6, #0
   16ea4:	bne	16ee4 <__assert_fail@plt+0x5b5c>
   16ea8:	bl	11280 <__errno_location@plt>
   16eac:	ldr	r0, [r0]
   16eb0:	subs	r0, r0, #9
   16eb4:	mvnne	r0, #0
   16eb8:	ldrd	r4, [sp]
   16ebc:	ldr	r6, [sp, #8]
   16ec0:	add	sp, sp, #12
   16ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ec8:	cmp	r0, #0
   16ecc:	bne	16eec <__assert_fail@plt+0x5b64>
   16ed0:	bl	11280 <__errno_location@plt>
   16ed4:	mov	r3, #0
   16ed8:	str	r3, [r0]
   16edc:	mvn	r0, #0
   16ee0:	b	16eb8 <__assert_fail@plt+0x5b30>
   16ee4:	mvn	r0, #0
   16ee8:	b	16eb8 <__assert_fail@plt+0x5b30>
   16eec:	mvn	r0, #0
   16ef0:	b	16eb8 <__assert_fail@plt+0x5b30>
   16ef4:	push	{lr}		; (str lr, [sp, #-4]!)
   16ef8:	sub	sp, sp, #268	; 0x10c
   16efc:	movw	r2, #257	; 0x101
   16f00:	add	r1, sp, #4
   16f04:	bl	173b4 <_obstack_memory_used@@Base+0x70>
   16f08:	cmp	r0, #0
   16f0c:	movne	r0, #0
   16f10:	bne	16f48 <__assert_fail@plt+0x5bc0>
   16f14:	movw	r1, #34596	; 0x8724
   16f18:	movt	r1, #1
   16f1c:	add	r0, sp, #4
   16f20:	bl	11088 <strcmp@plt>
   16f24:	cmp	r0, #0
   16f28:	beq	16f44 <__assert_fail@plt+0x5bbc>
   16f2c:	movw	r1, #34600	; 0x8728
   16f30:	movt	r1, #1
   16f34:	add	r0, sp, #4
   16f38:	bl	11088 <strcmp@plt>
   16f3c:	adds	r0, r0, #0
   16f40:	movne	r0, #1
   16f44:	and	r0, r0, #1
   16f48:	add	sp, sp, #268	; 0x10c
   16f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f50:	str	r4, [sp, #-8]!
   16f54:	str	lr, [sp, #4]
   16f58:	mov	r0, #14
   16f5c:	bl	11328 <nl_langinfo@plt>
   16f60:	cmp	r0, #0
   16f64:	beq	16f88 <__assert_fail@plt+0x5c00>
   16f68:	ldrb	r2, [r0]
   16f6c:	movw	r3, #34608	; 0x8730
   16f70:	movt	r3, #1
   16f74:	cmp	r2, #0
   16f78:	moveq	r0, r3
   16f7c:	ldr	r4, [sp]
   16f80:	add	sp, sp, #4
   16f84:	pop	{pc}		; (ldr pc, [sp], #4)
   16f88:	movw	r0, #34608	; 0x8730
   16f8c:	movt	r0, #1
   16f90:	b	16f7c <__assert_fail@plt+0x5bf4>
   16f94:	str	r4, [sp, #-8]!
   16f98:	str	lr, [sp, #4]
   16f9c:	ldrb	r3, [r0, #40]	; 0x28
   16fa0:	tst	r3, #1
   16fa4:	beq	16fc0 <__assert_fail@plt+0x5c38>
   16fa8:	ldr	r3, [r0, #28]
   16fac:	ldr	r0, [r0, #36]	; 0x24
   16fb0:	blx	r3
   16fb4:	ldr	r4, [sp]
   16fb8:	add	sp, sp, #4
   16fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16fc0:	ldr	r3, [r0, #28]
   16fc4:	mov	r0, r1
   16fc8:	blx	r3
   16fcc:	b	16fb4 <__assert_fail@plt+0x5c2c>
   16fd0:	str	r4, [sp, #-8]!
   16fd4:	str	lr, [sp, #4]
   16fd8:	ldrb	r3, [r0, #40]	; 0x28
   16fdc:	tst	r3, #1
   16fe0:	beq	16ffc <__assert_fail@plt+0x5c74>
   16fe4:	ldr	r3, [r0, #32]
   16fe8:	ldr	r0, [r0, #36]	; 0x24
   16fec:	blx	r3
   16ff0:	ldr	r4, [sp]
   16ff4:	add	sp, sp, #4
   16ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ffc:	ldr	r3, [r0, #32]
   17000:	mov	r0, r1
   17004:	blx	r3
   17008:	b	16ff0 <__assert_fail@plt+0x5c68>
   1700c:	strd	r4, [sp, #-16]!
   17010:	str	r6, [sp, #8]
   17014:	str	lr, [sp, #12]
   17018:	mov	r4, r0
   1701c:	subs	r5, r2, #0
   17020:	moveq	r5, #8
   17024:	movw	r3, #4072	; 0xfe8
   17028:	cmp	r1, #0
   1702c:	moveq	r1, r3
   17030:	str	r1, [r0]
   17034:	sub	r6, r5, #1
   17038:	str	r6, [r0, #24]
   1703c:	bl	16f94 <__assert_fail@plt+0x5c0c>
   17040:	str	r0, [r4, #4]
   17044:	cmp	r0, #0
   17048:	beq	170a0 <__assert_fail@plt+0x5d18>
   1704c:	add	r3, r0, #8
   17050:	add	r3, r3, r6
   17054:	rsb	r5, r5, #0
   17058:	and	r5, r5, r3
   1705c:	str	r5, [r4, #8]
   17060:	str	r5, [r4, #12]
   17064:	ldr	r3, [r4]
   17068:	add	r3, r0, r3
   1706c:	str	r3, [r0]
   17070:	str	r3, [r4, #16]
   17074:	mov	r2, #0
   17078:	str	r2, [r0, #4]
   1707c:	ldrb	r3, [r4, #40]	; 0x28
   17080:	and	r3, r3, #253	; 0xfd
   17084:	bfi	r3, r2, #2, #1
   17088:	strb	r3, [r4, #40]	; 0x28
   1708c:	mov	r0, #1
   17090:	ldrd	r4, [sp]
   17094:	ldr	r6, [sp, #8]
   17098:	add	sp, sp, #12
   1709c:	pop	{pc}		; (ldr pc, [sp], #4)
   170a0:	movw	r3, #37232	; 0x9170
   170a4:	movt	r3, #2
   170a8:	ldr	r3, [r3]
   170ac:	blx	r3
   170b0:	str	r4, [sp, #-8]!
   170b4:	str	lr, [sp, #4]
   170b8:	movw	r3, #37256	; 0x9188
   170bc:	movt	r3, #2
   170c0:	ldr	r4, [r3]
   170c4:	mov	r2, #5
   170c8:	movw	r1, #34576	; 0x8710
   170cc:	movt	r1, #1
   170d0:	mov	r0, #0
   170d4:	bl	11124 <dcgettext@plt>
   170d8:	mov	r3, r0
   170dc:	movw	r2, #33788	; 0x83fc
   170e0:	movt	r2, #1
   170e4:	mov	r1, #1
   170e8:	mov	r0, r4
   170ec:	bl	112e0 <__fprintf_chk@plt>
   170f0:	movw	r3, #37164	; 0x912c
   170f4:	movt	r3, #2
   170f8:	ldr	r0, [r3]
   170fc:	bl	11238 <exit@plt>

00017100 <_obstack_begin@@Base>:
   17100:	str	r4, [sp, #-8]!
   17104:	str	lr, [sp, #4]
   17108:	str	r3, [r0, #28]
   1710c:	ldr	r3, [sp, #8]
   17110:	str	r3, [r0, #32]
   17114:	ldrb	r3, [r0, #40]	; 0x28
   17118:	bfc	r3, #0, #1
   1711c:	strb	r3, [r0, #40]	; 0x28
   17120:	bl	1700c <__assert_fail@plt+0x5c84>
   17124:	ldr	r4, [sp]
   17128:	add	sp, sp, #4
   1712c:	pop	{pc}		; (ldr pc, [sp], #4)

00017130 <_obstack_begin_1@@Base>:
   17130:	str	r4, [sp, #-8]!
   17134:	str	lr, [sp, #4]
   17138:	str	r3, [r0, #28]
   1713c:	ldr	r3, [sp, #8]
   17140:	str	r3, [r0, #32]
   17144:	ldr	r3, [sp, #12]
   17148:	str	r3, [r0, #36]	; 0x24
   1714c:	ldrb	r3, [r0, #40]	; 0x28
   17150:	orr	r3, r3, #1
   17154:	strb	r3, [r0, #40]	; 0x28
   17158:	bl	1700c <__assert_fail@plt+0x5c84>
   1715c:	ldr	r4, [sp]
   17160:	add	sp, sp, #4
   17164:	pop	{pc}		; (ldr pc, [sp], #4)

00017168 <_obstack_newchunk@@Base>:
   17168:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1716c:	strd	r6, [sp, #8]
   17170:	str	r8, [sp, #16]
   17174:	str	lr, [sp, #20]
   17178:	ldr	r7, [r0, #4]
   1717c:	ldr	r6, [r0, #12]
   17180:	ldr	r3, [r0, #8]
   17184:	sub	r6, r6, r3
   17188:	add	r1, r6, r1
   1718c:	ldr	r2, [r0, #24]
   17190:	add	r2, r1, r2
   17194:	add	r5, r2, r6, lsr #3
   17198:	add	r5, r5, #100	; 0x64
   1719c:	ldr	r3, [r0]
   171a0:	cmp	r2, r3
   171a4:	movcs	r3, r2
   171a8:	cmp	r3, r5
   171ac:	movcs	r5, r3
   171b0:	cmp	r6, r1
   171b4:	cmpls	r1, r2
   171b8:	bhi	17258 <_obstack_newchunk@@Base+0xf0>
   171bc:	mov	r4, r0
   171c0:	mov	r1, r5
   171c4:	bl	16f94 <__assert_fail@plt+0x5c0c>
   171c8:	subs	r8, r0, #0
   171cc:	beq	17258 <_obstack_newchunk@@Base+0xf0>
   171d0:	str	r8, [r4, #4]
   171d4:	str	r7, [r8, #4]
   171d8:	add	r3, r8, r5
   171dc:	str	r3, [r4, #16]
   171e0:	mov	r5, r8
   171e4:	str	r3, [r5], #8
   171e8:	ldr	r3, [r4, #24]
   171ec:	add	r5, r5, r3
   171f0:	bic	r5, r5, r3
   171f4:	mov	r2, r6
   171f8:	ldr	r1, [r4, #8]
   171fc:	mov	r0, r5
   17200:	bl	110f4 <memcpy@plt>
   17204:	ldrb	r3, [r4, #40]	; 0x28
   17208:	tst	r3, #2
   1720c:	bne	1722c <_obstack_newchunk@@Base+0xc4>
   17210:	ldr	r2, [r4, #24]
   17214:	add	r3, r7, #8
   17218:	add	r3, r3, r2
   1721c:	bic	r3, r3, r2
   17220:	ldr	r2, [r4, #8]
   17224:	cmp	r2, r3
   17228:	beq	17268 <_obstack_newchunk@@Base+0x100>
   1722c:	str	r5, [r4, #8]
   17230:	add	r5, r5, r6
   17234:	str	r5, [r4, #12]
   17238:	ldrb	r3, [r4, #40]	; 0x28
   1723c:	bfc	r3, #1, #1
   17240:	strb	r3, [r4, #40]	; 0x28
   17244:	ldrd	r4, [sp]
   17248:	ldrd	r6, [sp, #8]
   1724c:	ldr	r8, [sp, #16]
   17250:	add	sp, sp, #20
   17254:	pop	{pc}		; (ldr pc, [sp], #4)
   17258:	movw	r3, #37232	; 0x9170
   1725c:	movt	r3, #2
   17260:	ldr	r3, [r3]
   17264:	blx	r3
   17268:	ldr	r3, [r7, #4]
   1726c:	str	r3, [r8, #4]
   17270:	mov	r1, r7
   17274:	mov	r0, r4
   17278:	bl	16fd0 <__assert_fail@plt+0x5c48>
   1727c:	b	1722c <_obstack_newchunk@@Base+0xc4>

00017280 <_obstack_allocated_p@@Base>:
   17280:	ldr	r0, [r0, #4]
   17284:	cmp	r0, #0
   17288:	bne	1729c <_obstack_allocated_p@@Base+0x1c>
   1728c:	b	172b0 <_obstack_allocated_p@@Base+0x30>
   17290:	ldr	r0, [r0, #4]
   17294:	cmp	r0, #0
   17298:	beq	172b0 <_obstack_allocated_p@@Base+0x30>
   1729c:	cmp	r1, r0
   172a0:	bls	17290 <_obstack_allocated_p@@Base+0x10>
   172a4:	ldr	r3, [r0]
   172a8:	cmp	r3, r1
   172ac:	bcc	17290 <_obstack_allocated_p@@Base+0x10>
   172b0:	adds	r0, r0, #0
   172b4:	movne	r0, #1
   172b8:	bx	lr

000172bc <_obstack_free@@Base>:
   172bc:	strd	r4, [sp, #-16]!
   172c0:	str	r6, [sp, #8]
   172c4:	str	lr, [sp, #12]
   172c8:	mov	r4, r0
   172cc:	mov	r6, r1
   172d0:	ldr	r1, [r0, #4]
   172d4:	cmp	r1, #0
   172d8:	bne	1730c <_obstack_free@@Base+0x50>
   172dc:	cmp	r6, #0
   172e0:	beq	17334 <_obstack_free@@Base+0x78>
   172e4:	bl	11370 <abort@plt>
   172e8:	ldr	r5, [r1, #4]
   172ec:	mov	r0, r4
   172f0:	bl	16fd0 <__assert_fail@plt+0x5c48>
   172f4:	ldrb	r3, [r4, #40]	; 0x28
   172f8:	orr	r3, r3, #2
   172fc:	strb	r3, [r4, #40]	; 0x28
   17300:	mov	r1, r5
   17304:	cmp	r5, #0
   17308:	beq	172dc <_obstack_free@@Base+0x20>
   1730c:	cmp	r6, r1
   17310:	bls	172e8 <_obstack_free@@Base+0x2c>
   17314:	ldr	r3, [r1]
   17318:	cmp	r3, r6
   1731c:	bcc	172e8 <_obstack_free@@Base+0x2c>
   17320:	str	r6, [r4, #12]
   17324:	str	r6, [r4, #8]
   17328:	ldr	r3, [r1]
   1732c:	str	r3, [r4, #16]
   17330:	str	r1, [r4, #4]
   17334:	ldrd	r4, [sp]
   17338:	ldr	r6, [sp, #8]
   1733c:	add	sp, sp, #12
   17340:	pop	{pc}		; (ldr pc, [sp], #4)

00017344 <_obstack_memory_used@@Base>:
   17344:	ldr	r3, [r0, #4]
   17348:	cmp	r3, #0
   1734c:	beq	17370 <_obstack_memory_used@@Base+0x2c>
   17350:	mov	r0, #0
   17354:	ldr	r2, [r3]
   17358:	sub	r2, r2, r3
   1735c:	add	r0, r0, r2
   17360:	ldr	r3, [r3, #4]
   17364:	cmp	r3, #0
   17368:	bne	17354 <_obstack_memory_used@@Base+0x10>
   1736c:	bx	lr
   17370:	mov	r0, #0
   17374:	bx	lr
   17378:	str	r4, [sp, #-8]!
   1737c:	str	lr, [sp, #4]
   17380:	umull	r2, r3, r1, r2
   17384:	cmp	r3, #0
   17388:	bne	173a0 <_obstack_memory_used@@Base+0x5c>
   1738c:	mov	r1, r2
   17390:	bl	16e0c <__assert_fail@plt+0x5a84>
   17394:	ldr	r4, [sp]
   17398:	add	sp, sp, #4
   1739c:	pop	{pc}		; (ldr pc, [sp], #4)
   173a0:	bl	11280 <__errno_location@plt>
   173a4:	mov	r3, #12
   173a8:	str	r3, [r0]
   173ac:	mov	r0, #0
   173b0:	b	17394 <_obstack_memory_used@@Base+0x50>
   173b4:	strd	r4, [sp, #-16]!
   173b8:	str	r6, [sp, #8]
   173bc:	str	lr, [sp, #12]
   173c0:	mov	r6, r1
   173c4:	mov	r4, r2
   173c8:	mov	r1, #0
   173cc:	bl	11310 <setlocale@plt>
   173d0:	subs	r5, r0, #0
   173d4:	beq	17418 <_obstack_memory_used@@Base+0xd4>
   173d8:	mov	r0, r5
   173dc:	bl	1125c <strlen@plt>
   173e0:	cmp	r4, r0
   173e4:	bhi	17434 <_obstack_memory_used@@Base+0xf0>
   173e8:	cmp	r4, #0
   173ec:	moveq	r0, #34	; 0x22
   173f0:	beq	17448 <_obstack_memory_used@@Base+0x104>
   173f4:	sub	r4, r4, #1
   173f8:	mov	r2, r4
   173fc:	mov	r1, r5
   17400:	mov	r0, r6
   17404:	bl	110f4 <memcpy@plt>
   17408:	mov	r3, #0
   1740c:	strb	r3, [r6, r4]
   17410:	mov	r0, #34	; 0x22
   17414:	b	17448 <_obstack_memory_used@@Base+0x104>
   17418:	cmp	r4, #0
   1741c:	moveq	r0, #22
   17420:	beq	17448 <_obstack_memory_used@@Base+0x104>
   17424:	mov	r3, #0
   17428:	strb	r3, [r6]
   1742c:	mov	r0, #22
   17430:	b	17448 <_obstack_memory_used@@Base+0x104>
   17434:	add	r2, r0, #1
   17438:	mov	r1, r5
   1743c:	mov	r0, r6
   17440:	bl	110f4 <memcpy@plt>
   17444:	mov	r0, #0
   17448:	ldrd	r4, [sp]
   1744c:	ldr	r6, [sp, #8]
   17450:	add	sp, sp, #12
   17454:	pop	{pc}		; (ldr pc, [sp], #4)
   17458:	str	r4, [sp, #-8]!
   1745c:	str	lr, [sp, #4]
   17460:	mov	r1, #0
   17464:	bl	11310 <setlocale@plt>
   17468:	ldr	r4, [sp]
   1746c:	add	sp, sp, #4
   17470:	pop	{pc}		; (ldr pc, [sp], #4)
   17474:	eor	r1, r1, #-2147483648	; 0x80000000
   17478:	b	17480 <_obstack_memory_used@@Base+0x13c>
   1747c:	eor	r3, r3, #-2147483648	; 0x80000000
   17480:	push	{r4, r5, lr}
   17484:	lsl	r4, r1, #1
   17488:	lsl	r5, r3, #1
   1748c:	teq	r4, r5
   17490:	teqeq	r0, r2
   17494:	orrsne	ip, r4, r0
   17498:	orrsne	ip, r5, r2
   1749c:	mvnsne	ip, r4, asr #21
   174a0:	mvnsne	ip, r5, asr #21
   174a4:	beq	17690 <_obstack_memory_used@@Base+0x34c>
   174a8:	lsr	r4, r4, #21
   174ac:	rsbs	r5, r4, r5, lsr #21
   174b0:	rsblt	r5, r5, #0
   174b4:	ble	174d4 <_obstack_memory_used@@Base+0x190>
   174b8:	add	r4, r4, r5
   174bc:	eor	r2, r0, r2
   174c0:	eor	r3, r1, r3
   174c4:	eor	r0, r2, r0
   174c8:	eor	r1, r3, r1
   174cc:	eor	r2, r0, r2
   174d0:	eor	r3, r1, r3
   174d4:	cmp	r5, #54	; 0x36
   174d8:	pophi	{r4, r5, pc}
   174dc:	tst	r1, #-2147483648	; 0x80000000
   174e0:	lsl	r1, r1, #12
   174e4:	mov	ip, #1048576	; 0x100000
   174e8:	orr	r1, ip, r1, lsr #12
   174ec:	beq	174f8 <_obstack_memory_used@@Base+0x1b4>
   174f0:	rsbs	r0, r0, #0
   174f4:	rsc	r1, r1, #0
   174f8:	tst	r3, #-2147483648	; 0x80000000
   174fc:	lsl	r3, r3, #12
   17500:	orr	r3, ip, r3, lsr #12
   17504:	beq	17510 <_obstack_memory_used@@Base+0x1cc>
   17508:	rsbs	r2, r2, #0
   1750c:	rsc	r3, r3, #0
   17510:	teq	r4, r5
   17514:	beq	17678 <_obstack_memory_used@@Base+0x334>
   17518:	sub	r4, r4, #1
   1751c:	rsbs	lr, r5, #32
   17520:	blt	1753c <_obstack_memory_used@@Base+0x1f8>
   17524:	lsl	ip, r2, lr
   17528:	adds	r0, r0, r2, lsr r5
   1752c:	adc	r1, r1, #0
   17530:	adds	r0, r0, r3, lsl lr
   17534:	adcs	r1, r1, r3, asr r5
   17538:	b	17558 <_obstack_memory_used@@Base+0x214>
   1753c:	sub	r5, r5, #32
   17540:	add	lr, lr, #32
   17544:	cmp	r2, #1
   17548:	lsl	ip, r3, lr
   1754c:	orrcs	ip, ip, #2
   17550:	adds	r0, r0, r3, asr r5
   17554:	adcs	r1, r1, r3, asr #31
   17558:	and	r5, r1, #-2147483648	; 0x80000000
   1755c:	bpl	1756c <_obstack_memory_used@@Base+0x228>
   17560:	rsbs	ip, ip, #0
   17564:	rscs	r0, r0, #0
   17568:	rsc	r1, r1, #0
   1756c:	cmp	r1, #1048576	; 0x100000
   17570:	bcc	175b0 <_obstack_memory_used@@Base+0x26c>
   17574:	cmp	r1, #2097152	; 0x200000
   17578:	bcc	17598 <_obstack_memory_used@@Base+0x254>
   1757c:	lsrs	r1, r1, #1
   17580:	rrxs	r0, r0
   17584:	rrx	ip, ip
   17588:	add	r4, r4, #1
   1758c:	lsl	r2, r4, #21
   17590:	cmn	r2, #4194304	; 0x400000
   17594:	bcs	176f0 <_obstack_memory_used@@Base+0x3ac>
   17598:	cmp	ip, #-2147483648	; 0x80000000
   1759c:	lsrseq	ip, r0, #1
   175a0:	adcs	r0, r0, #0
   175a4:	adc	r1, r1, r4, lsl #20
   175a8:	orr	r1, r1, r5
   175ac:	pop	{r4, r5, pc}
   175b0:	lsls	ip, ip, #1
   175b4:	adcs	r0, r0, r0
   175b8:	adc	r1, r1, r1
   175bc:	tst	r1, #1048576	; 0x100000
   175c0:	sub	r4, r4, #1
   175c4:	bne	17598 <_obstack_memory_used@@Base+0x254>
   175c8:	teq	r1, #0
   175cc:	moveq	r1, r0
   175d0:	moveq	r0, #0
   175d4:	clz	r3, r1
   175d8:	addeq	r3, r3, #32
   175dc:	sub	r3, r3, #11
   175e0:	subs	r2, r3, #32
   175e4:	bge	17608 <_obstack_memory_used@@Base+0x2c4>
   175e8:	adds	r2, r2, #12
   175ec:	ble	17604 <_obstack_memory_used@@Base+0x2c0>
   175f0:	add	ip, r2, #20
   175f4:	rsb	r2, r2, #12
   175f8:	lsl	r0, r1, ip
   175fc:	lsr	r1, r1, r2
   17600:	b	17618 <_obstack_memory_used@@Base+0x2d4>
   17604:	add	r2, r2, #20
   17608:	rsble	ip, r2, #32
   1760c:	lsl	r1, r1, r2
   17610:	orrle	r1, r1, r0, lsr ip
   17614:	lslle	r0, r0, r2
   17618:	subs	r4, r4, r3
   1761c:	addge	r1, r1, r4, lsl #20
   17620:	orrge	r1, r1, r5
   17624:	popge	{r4, r5, pc}
   17628:	mvn	r4, r4
   1762c:	subs	r4, r4, #31
   17630:	bge	1766c <_obstack_memory_used@@Base+0x328>
   17634:	adds	r4, r4, #12
   17638:	bgt	17654 <_obstack_memory_used@@Base+0x310>
   1763c:	add	r4, r4, #20
   17640:	rsb	r2, r4, #32
   17644:	lsr	r0, r0, r4
   17648:	orr	r0, r0, r1, lsl r2
   1764c:	orr	r1, r5, r1, lsr r4
   17650:	pop	{r4, r5, pc}
   17654:	rsb	r4, r4, #12
   17658:	rsb	r2, r4, #32
   1765c:	lsr	r0, r0, r2
   17660:	orr	r0, r0, r1, lsl r4
   17664:	mov	r1, r5
   17668:	pop	{r4, r5, pc}
   1766c:	lsr	r0, r1, r4
   17670:	mov	r1, r5
   17674:	pop	{r4, r5, pc}
   17678:	teq	r4, #0
   1767c:	eor	r3, r3, #1048576	; 0x100000
   17680:	eoreq	r1, r1, #1048576	; 0x100000
   17684:	addeq	r4, r4, #1
   17688:	subne	r5, r5, #1
   1768c:	b	17518 <_obstack_memory_used@@Base+0x1d4>
   17690:	mvns	ip, r4, asr #21
   17694:	mvnsne	ip, r5, asr #21
   17698:	beq	17700 <_obstack_memory_used@@Base+0x3bc>
   1769c:	teq	r4, r5
   176a0:	teqeq	r0, r2
   176a4:	beq	176b8 <_obstack_memory_used@@Base+0x374>
   176a8:	orrs	ip, r4, r0
   176ac:	moveq	r1, r3
   176b0:	moveq	r0, r2
   176b4:	pop	{r4, r5, pc}
   176b8:	teq	r1, r3
   176bc:	movne	r1, #0
   176c0:	movne	r0, #0
   176c4:	popne	{r4, r5, pc}
   176c8:	lsrs	ip, r4, #21
   176cc:	bne	176e0 <_obstack_memory_used@@Base+0x39c>
   176d0:	lsls	r0, r0, #1
   176d4:	adcs	r1, r1, r1
   176d8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   176dc:	pop	{r4, r5, pc}
   176e0:	adds	r4, r4, #4194304	; 0x400000
   176e4:	addcc	r1, r1, #1048576	; 0x100000
   176e8:	popcc	{r4, r5, pc}
   176ec:	and	r5, r1, #-2147483648	; 0x80000000
   176f0:	orr	r1, r5, #2130706432	; 0x7f000000
   176f4:	orr	r1, r1, #15728640	; 0xf00000
   176f8:	mov	r0, #0
   176fc:	pop	{r4, r5, pc}
   17700:	mvns	ip, r4, asr #21
   17704:	movne	r1, r3
   17708:	movne	r0, r2
   1770c:	mvnseq	ip, r5, asr #21
   17710:	movne	r3, r1
   17714:	movne	r2, r0
   17718:	orrs	r4, r0, r1, lsl #12
   1771c:	orrseq	r5, r2, r3, lsl #12
   17720:	teqeq	r1, r3
   17724:	orrne	r1, r1, #524288	; 0x80000
   17728:	pop	{r4, r5, pc}
   1772c:	teq	r0, #0
   17730:	moveq	r1, #0
   17734:	bxeq	lr
   17738:	push	{r4, r5, lr}
   1773c:	mov	r4, #1024	; 0x400
   17740:	add	r4, r4, #50	; 0x32
   17744:	mov	r5, #0
   17748:	mov	r1, #0
   1774c:	b	175c8 <_obstack_memory_used@@Base+0x284>
   17750:	teq	r0, #0
   17754:	moveq	r1, #0
   17758:	bxeq	lr
   1775c:	push	{r4, r5, lr}
   17760:	mov	r4, #1024	; 0x400
   17764:	add	r4, r4, #50	; 0x32
   17768:	ands	r5, r0, #-2147483648	; 0x80000000
   1776c:	rsbmi	r0, r0, #0
   17770:	mov	r1, #0
   17774:	b	175c8 <_obstack_memory_used@@Base+0x284>
   17778:	lsls	r2, r0, #1
   1777c:	asr	r1, r2, #3
   17780:	rrx	r1, r1
   17784:	lsl	r0, r2, #28
   17788:	andsne	r3, r2, #-16777216	; 0xff000000
   1778c:	teqne	r3, #-16777216	; 0xff000000
   17790:	eorne	r1, r1, #939524096	; 0x38000000
   17794:	bxne	lr
   17798:	bics	r2, r2, #-16777216	; 0xff000000
   1779c:	bxeq	lr
   177a0:	teq	r3, #-16777216	; 0xff000000
   177a4:	orreq	r1, r1, #524288	; 0x80000
   177a8:	bxeq	lr
   177ac:	push	{r4, r5, lr}
   177b0:	mov	r4, #896	; 0x380
   177b4:	and	r5, r1, #-2147483648	; 0x80000000
   177b8:	bic	r1, r1, #-2147483648	; 0x80000000
   177bc:	b	175c8 <_obstack_memory_used@@Base+0x284>
   177c0:	orrs	r2, r0, r1
   177c4:	bxeq	lr
   177c8:	push	{r4, r5, lr}
   177cc:	mov	r5, #0
   177d0:	b	177f0 <_obstack_memory_used@@Base+0x4ac>
   177d4:	orrs	r2, r0, r1
   177d8:	bxeq	lr
   177dc:	push	{r4, r5, lr}
   177e0:	ands	r5, r1, #-2147483648	; 0x80000000
   177e4:	bpl	177f0 <_obstack_memory_used@@Base+0x4ac>
   177e8:	rsbs	r0, r0, #0
   177ec:	rsc	r1, r1, #0
   177f0:	mov	r4, #1024	; 0x400
   177f4:	add	r4, r4, #50	; 0x32
   177f8:	lsrs	ip, r1, #22
   177fc:	beq	1756c <_obstack_memory_used@@Base+0x228>
   17800:	mov	r2, #3
   17804:	lsrs	ip, ip, #3
   17808:	addne	r2, r2, #3
   1780c:	lsrs	ip, ip, #3
   17810:	addne	r2, r2, #3
   17814:	add	r2, r2, ip, lsr #3
   17818:	rsb	r3, r2, #32
   1781c:	lsl	ip, r0, r3
   17820:	lsr	r0, r0, r2
   17824:	orr	r0, r0, r1, lsl r3
   17828:	lsr	r1, r1, r2
   1782c:	add	r4, r4, r2
   17830:	b	1756c <_obstack_memory_used@@Base+0x228>
   17834:	cmp	r3, #0
   17838:	cmpeq	r2, #0
   1783c:	bne	17854 <_obstack_memory_used@@Base+0x510>
   17840:	cmp	r1, #0
   17844:	cmpeq	r0, #0
   17848:	mvnne	r1, #0
   1784c:	mvnne	r0, #0
   17850:	b	17870 <_obstack_memory_used@@Base+0x52c>
   17854:	sub	sp, sp, #8
   17858:	push	{sp, lr}
   1785c:	bl	17880 <_obstack_memory_used@@Base+0x53c>
   17860:	ldr	lr, [sp, #4]
   17864:	add	sp, sp, #8
   17868:	pop	{r2, r3}
   1786c:	bx	lr
   17870:	push	{r1, lr}
   17874:	mov	r0, #8
   17878:	bl	1107c <raise@plt>
   1787c:	pop	{r1, pc}
   17880:	cmp	r1, r3
   17884:	cmpeq	r0, r2
   17888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1788c:	mov	r4, r0
   17890:	movcc	r0, #0
   17894:	mov	r5, r1
   17898:	ldr	lr, [sp, #36]	; 0x24
   1789c:	movcc	r1, r0
   178a0:	bcc	1799c <_obstack_memory_used@@Base+0x658>
   178a4:	cmp	r3, #0
   178a8:	clzeq	ip, r2
   178ac:	clzne	ip, r3
   178b0:	addeq	ip, ip, #32
   178b4:	cmp	r5, #0
   178b8:	clzeq	r1, r4
   178bc:	addeq	r1, r1, #32
   178c0:	clzne	r1, r5
   178c4:	sub	ip, ip, r1
   178c8:	sub	sl, ip, #32
   178cc:	lsl	r9, r3, ip
   178d0:	rsb	fp, ip, #32
   178d4:	orr	r9, r9, r2, lsl sl
   178d8:	orr	r9, r9, r2, lsr fp
   178dc:	lsl	r8, r2, ip
   178e0:	cmp	r5, r9
   178e4:	cmpeq	r4, r8
   178e8:	movcc	r0, #0
   178ec:	movcc	r1, r0
   178f0:	bcc	1790c <_obstack_memory_used@@Base+0x5c8>
   178f4:	mov	r0, #1
   178f8:	subs	r4, r4, r8
   178fc:	lsl	r1, r0, sl
   17900:	orr	r1, r1, r0, lsr fp
   17904:	lsl	r0, r0, ip
   17908:	sbc	r5, r5, r9
   1790c:	cmp	ip, #0
   17910:	beq	1799c <_obstack_memory_used@@Base+0x658>
   17914:	lsr	r6, r8, #1
   17918:	orr	r6, r6, r9, lsl #31
   1791c:	lsr	r7, r9, #1
   17920:	mov	r2, ip
   17924:	b	17948 <_obstack_memory_used@@Base+0x604>
   17928:	subs	r3, r4, r6
   1792c:	sbc	r8, r5, r7
   17930:	adds	r3, r3, r3
   17934:	adc	r8, r8, r8
   17938:	adds	r4, r3, #1
   1793c:	adc	r5, r8, #0
   17940:	subs	r2, r2, #1
   17944:	beq	17964 <_obstack_memory_used@@Base+0x620>
   17948:	cmp	r5, r7
   1794c:	cmpeq	r4, r6
   17950:	bcs	17928 <_obstack_memory_used@@Base+0x5e4>
   17954:	adds	r4, r4, r4
   17958:	adc	r5, r5, r5
   1795c:	subs	r2, r2, #1
   17960:	bne	17948 <_obstack_memory_used@@Base+0x604>
   17964:	lsr	r3, r4, ip
   17968:	orr	r3, r3, r5, lsl fp
   1796c:	lsr	r2, r5, ip
   17970:	orr	r3, r3, r5, lsr sl
   17974:	adds	r0, r0, r4
   17978:	mov	r4, r3
   1797c:	lsl	r3, r2, ip
   17980:	orr	r3, r3, r4, lsl sl
   17984:	lsl	ip, r4, ip
   17988:	orr	r3, r3, r4, lsr fp
   1798c:	adc	r1, r1, r5
   17990:	subs	r0, r0, ip
   17994:	mov	r5, r2
   17998:	sbc	r1, r1, r3
   1799c:	cmp	lr, #0
   179a0:	strdne	r4, [lr]
   179a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179ac:	mov	r7, r0
   179b0:	ldr	r6, [pc, #72]	; 17a00 <_obstack_memory_used@@Base+0x6bc>
   179b4:	ldr	r5, [pc, #72]	; 17a04 <_obstack_memory_used@@Base+0x6c0>
   179b8:	add	r6, pc, r6
   179bc:	add	r5, pc, r5
   179c0:	sub	r6, r6, r5
   179c4:	mov	r8, r1
   179c8:	mov	r9, r2
   179cc:	bl	11044 <calloc@plt-0x20>
   179d0:	asrs	r6, r6, #2
   179d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   179d8:	mov	r4, #0
   179dc:	add	r4, r4, #1
   179e0:	ldr	r3, [r5], #4
   179e4:	mov	r2, r9
   179e8:	mov	r1, r8
   179ec:	mov	r0, r7
   179f0:	blx	r3
   179f4:	cmp	r6, r4
   179f8:	bne	179dc <_obstack_memory_used@@Base+0x698>
   179fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a00:	andeq	r1, r1, r4, asr r5
   17a04:	andeq	r1, r1, ip, asr #10
   17a08:	bx	lr
   17a0c:	ldr	r3, [pc, #12]	; 17a20 <_obstack_memory_used@@Base+0x6dc>
   17a10:	mov	r1, #0
   17a14:	add	r3, pc, r3
   17a18:	ldr	r2, [r3]
   17a1c:	b	1128c <__cxa_atexit@plt>
   17a20:	andeq	r1, r1, r8, lsl #14

Disassembly of section .fini:

00017a24 <.fini>:
   17a24:	push	{r3, lr}
   17a28:	pop	{r3, pc}
